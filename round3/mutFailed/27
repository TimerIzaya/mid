const v2 = new Array(257);
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.propertyIsEnumerable;
    try { new v7(v2); } catch (e) {}
    a5 - a5;
    try {
        this.f = 257;
    } catch(e10) {
    }
    try {
        this.g = Array;
    } catch(e11) {
    }
    try {
        this.b = v2;
    } catch(e12) {
    }
}
const v13 = new F3(257, F3, 257);
v13.length = v13;
const v14 = new F3(v13, v13);
const v15 = new F3(257, Array);
v15.length = v15;
function f16(a17, a18, a19, a20) {
    let v21 = -Infinity;
    class C24 {
        [C24];
        static [-2] = -3;
        m(a26, a27) {
            try {
                v21 = a26;
            } catch(e28) {
            }
            return 0.0;
        }
    }
    new C24();
    class C30 {
        #toString(a32, a33, a34, a35) {
            try {
            } catch(e36) {
            }
        }
    }
    const o37 = {
    };
    try {
    } catch(e38) {
    }
    try {
        const o39 = {
        };
    } catch(e40) {
    }
    try {
        const o41 = {
        };
    } catch(e42) {
    }
    try {
        const o43 = {
        };
    } catch(e44) {
    }
    a19.d = 257;
    const v45 = a20?.e;
    try { new v45(v14); } catch (e) {}
    const o59 = {
        n(a48, a49) {
            Array(257);
            super.a;
            return a19;
        },
        m(a53, a54, a55) {
            try {
                a20 = v15;
            } catch(e56) {
            }
            a19.c;
            return o37;
        },
    };
    return o59;
}
f16(v15, v13, v13, v14);
f16(v13, v15, v15, v13);
f16(v13, Array, v13, v15);
class C64 extends F3 {
}
const v65 = new C64();
const v66 = new C64();
v66.MIN_SAFE_INTEGER = v66;
try { v66.findIndex(v65); } catch (e) {}
