[10,-9007199254740990,1421432432,53840,47569,9007199254740991,-5,-4294967295,9007199254740992,5];
[4,65536,-2147483648,973007978,1147388632,-30269];
[-5,27893,536870887,268435441];
new Set();
try {
    const t5 = -5n;
    new t5(4);
} catch(e11) {
}
for (let i15 = 0, i16 = 10; i15 < i16; i15++) {
    function f23() {
        return f23;
    }
}
try {
    new Float64Array(1331);
} catch(e26) {
}
class C29 extends Date {
}
const v30 = [1e-15,94.81870020355291,-1e-15,Infinity,1.722730461030436e+308,2.220446049250313e-16,-1000000000000.0,-1.4282100503495254,940561.3390314283,4.0];
const v31 = [-55592423,1722732688];
const v32 = v31.__proto__;
try { v32(v30, v32, v31, v32, v31); } catch (e) {}
new Date();
const v37 = [-29990,846248213,16,6217,9007199254740990,-8];
const v38 = new Float64Array(v37);
v38.buffer;
try {
    let v40 = Uint8ClampedArray;
    v40 ||= v40;
    class C41 {
    }
    const v42 = new C41();
    let v43;
    try { v43 = v42.o(); } catch (e) {}
    const v44 = `
        try { v43(); } catch (e) {}
        try {
        } catch(e46) {
        }
    `;
    new Int32Array(2333);
} catch(e48) {
}
class C55 {
    constructor(a57) {
        a57[268435439] = 268435456n;
        a57[7] = v31;
    }
    [v37];
    3414284681 = 4294967296;
    set e(a59) {
        try {
            const v60 = [35657,35657,-779975567,a59,-1331840628];
            this.fuck(v60, [16,v60,v60,a59,-1331840628], 1381311670, /0a\S/gv);
        } catch(e65) {
        }
    }
    [-60064] = 4;
    [4294967296] = 4294967296;
}
new C55();
const v67 = new C55();
gc();
class C73 {
    static ["4294967297"] = "pop";
    static #a = "function";
    static ["pop"];
    static #c;
    static ["function"];
}
new C55();
const v78 = [0.8704144529215507,1000.0,-0.0,-326.7774138017803,-1000000000.0,0.9565432704757396,0.14511398626063166,-2.2250738585072014e-308];
function F82(a84, a85, a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a85;
    this.g = a87;
    this.b = 3;
}
new F82(3, v78, 3, 155);
let v89;
try { v89 = v67.getUTCSeconds("b", 4294967296, C55); } catch (e) {}
const v93 = -(-60064);
try {
    Math.cosh(-1331840628);
} catch(e95) {
}
try {
    Math.pow(v93, 5);
} catch(e97) {
}
Math.acosh("b");
-840477.6496061762;
-v89;
