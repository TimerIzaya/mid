const v3 = /22[x\dz]/i;
const v4 = /a(?=b)c/isv;
const v5 = /K^2\p{Script=Greek}/isdvm;
v5.flags = v5;
const v7 = /6?/gu?.__lookupGetter__;
try { new v7(-13); } catch (e) {}
try { v5.test(v5); } catch (e) {}
const v10 = /j/gsd;
/ua(?=bbb|bb)c?/yiu.multiline;
class C13 {
    constructor(a15, a16, a17) {
        this.b = this;
        a15 * a15;
        this.d = this;
        ~a16;
        a16.f = this;
        ~a17;
        -(-9.229714831037963e+307);
        -0.0 === -0.0;
        const v26 = [1383476399,15,635312785,-2147483647,268435440,-2147483648,128];
        try { v26.map(v3); } catch (e) {}
        [32828,1073741824,10000,-63943,-1777006471,-9007199254740990,-9007199254740992];
        const v29 = [127,47874,5,8,-5,7,-2,-435278476,3,3];
        v29[9] = v29;
        const v30 = v29[4];
        v30 + v30;
        try { v29.map(v4); } catch (e) {}
        try {
            v10[1228592537] = 1678589415;
        } catch(e33) {
        }
    }
    static #g;
    d = v5;
}
new C13(-13, 1678589415, 1678589415);
const v35 = new C13(-13, C13, -13);
new C13(26866, v35, -13);
153 | 153;
try {
    const v40 = new Uint8ClampedArray(153);
    const v41 = v40?.toString;
    try { v41(); } catch (e) {}
    try { new v41(); } catch (e) {}
} catch(e44) {
}
1000 - 1000;
const v48 = Uint8Array?.constructor;
try { new v48(v5); } catch (e) {}
try { Uint8Array.from(Uint8ClampedArray); } catch (e) {}
Uint8Array.d = Uint8Array;
try {
    const v51 = new Uint8Array(1000);
    const v52 = v51[322];
    v52 * v52;
    const v54 = v52 * v52;
    v54 >> v54;
} catch(e56) {
}
const v58 = 3115 * 3115;
-v58;
v58 / v58;
Uint8Array.name = Uint8Array;
try {
    const v62 = new Uint8Array(3115);
    v62[1658] = v62;
} catch(e63) {
}
function f65() {
    return -15;
}
%OptimizeFunctionOnNextCall(f65);
const v66 = f65();
v66 > v66;
