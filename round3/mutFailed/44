const v3 = [-Infinity,-2.2250738585072014e-308,-1000.0,-3.820829009227687,-890.4321977065606,-0.0,-0.7962188105539365,868.5007699917328,1000.0];
([-6.015299103818337,1000000000000.0,0.9958515509935479,0.7142783063272556,0.9079681039298287,-1.0])[5];
[Infinity,287556.70703372406,2.0,6.590553781630844e+307,-1.7976931348623157e+308,0.41063031983170184,-1000000000000.0,891964.4532413988];
try {
    new Int32Array(10);
} catch(e10) {
}
let v11 = 1193;
class C12 extends Int32Array {
    #h = v3;
    9;
}
new C12();
new C12();
const v15 = new C12();
try {
    new Int8Array(v11);
} catch(e18) {
}
C12[Symbol.isConcatSpreadable] = v3;
({"length":v11,} = v15);
/(a+abc+?(e3N\u{12345}))/gdvm;
/O(?:a?)+/yisdv;
/a|b/isv;
BigUint64Array.prototype = BigUint64Array;
try {
    new BigUint64Array(9);
} catch(e27) {
}
class C28 extends Int8Array {
    p(a30, a31) {
        a30[this];
        class C33 {
            [a31];
            [a30];
        }
        new C33();
        new C33();
        try {
            let v37 = -64998;
            const v38 = C33 + C33;
            v37-- * v38;
        } catch(e41) {
            super[9];
        } finally {
            function f43() {
                return "object";
            }
        }
        const v44 = new C33();
        return v44;
    }
    static a = Int32Array;
    static c = "object";
    a;
    static [Int8Array] = "object";
}
try { new BigUint64Array(); } catch (e) {}
const v46 = new C28();
let v47;
try { v47 = v46.p(Int8Array, Int8Array); } catch (e) {}
const v48 = new C28();
new C28();
try { Math.sign(v48); } catch (e) {}
const v53 = !v47;
!9;
Math.cbrt(v53);
