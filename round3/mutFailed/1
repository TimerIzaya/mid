function f0() {
}
function f1() {
    const o6 = {
        ...f0,
        toString() {
            return 18008;
        },
        "f": f0,
        [f1]: f0,
        2816430632: f0,
        "b": f0,
        "h": f0,
        "e": f0,
        3: f0,
        "g": f0,
    };
    return o6;
}
const o12 = {
    "d": "number",
    valueOf(a10) {
        const v11 = this.d;
        v11[5] = a10;
        return v11;
    },
    1073741824: 1150143460,
    ..."number",
};
const v13 = f1();
const v14 = f1();
const v15 = f1();
const v16 = v15[2816430632];
function f17(a18, a19) {
    const o41 = {
        set f(a21) {
            const v22 = f1();
            %PrepareFunctionForOptimization(f1);
            const v23 = f1();
            const v24 = f1();
            %OptimizeMaglevOnNextCall(f1);
            for (let v25 = 0; v25 < 91; v25++) {
                function F26(a28, a29, a30) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.d = f17;
                    } catch(e31) {
                    }
                }
                new F26(v15, v24, a21);
                new F26(v24, a19, v23);
                return -2.220446049250313e-16;
                for (const v36 in "byteLength") {
                }
                new F26(v22, v15, v22);
            }
            f1();
        },
        get a() {
            try {
                this[f1] = this;
            } catch(e40) {
            }
            return v13;
        },
    };
    o41.b = f0;
    return o41;
}
const v42 = v16(v15, v13);
["boolean","boolean"];
const v47 = new Map();
const t72 = v47.keys();
t72.d &= 65535;
f17(v14, v13);
const v50 = f17(v15, v14);
v50.b = f0;
v50.b = v50;
function f51() {
    return v13;
}
const o52 = {
};
let v56 = [7.347928708012564e+307,1.5572881452156465e+308];
function f57(a58) {
    function f60(a61) {
        v56 = this;
    }
    this.onmessage = f60;
}
const v64 = [Map];
const o65 = {
    "arguments": v64,
    "type": "function",
};
new Worker(f57, o65);
try { new f51(); } catch (e) {}
[v13,f1,f0,f0,v14];
[f0,v14,[v15,v15,v14,v42,f17],v42];
2 >> 2;
const v78 = /s(?: foo )/yi;
const v79 = /a[a-z]/yd;
class C80 extends BigUint64Array {
    [v79] = v78;
    #toString(a82, a83, a84, a85) {
        try {
        } catch(e86) {
        }
    }
    g = 2;
    #toString(a88, a89) {
    }
}
const v90 = new C80();
const v91 = new C80();
delete v91[80];
const o93 = {
    __proto__: v90,
    "d": Uint8Array,
    ...v90,
};
o93.e = o93;
