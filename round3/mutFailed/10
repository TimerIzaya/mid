try { ("boolean").italics(); } catch (e) {}
try { ("-1005159259").localeCompare(-3.0); } catch (e) {}
true || true;
const v10 = [-1000000000.0,-7.800475187537197,2.220446049250313e-16,1000000000000.0,2.220446049250313e-16,-0.07977616257199394,-728731.2942530662,7.494242175779483,-7.701859805009103e+306];
const v11 = [-3.0,-1000000.0,1.6542290487426165e+308];
const v12 = [-6.451701812465563e+307,-1000.0,-1000.0,-445297.7485212366,-6.955759135239171e+307,-1000.0,2.220446049250313e-16,0.0,0.2405436337628153];
function F13(a15, a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    a15[2] = a15;
    a16[3];
    try {
        this.e = "boolean";
    } catch(e20) {
    }
    try {
        this.g = a17;
    } catch(e21) {
    }
}
new F13(v10, "boolean", v10, "-1005159259");
new F13(v10, v12, v10, "-1005159259");
new F13(v11, F13, v10, "symbol");
Date.e = Date;
new Date();
const v27 = [];
class C28 {
}
C28.prototype = C28;
class C29 extends C28 {
    1000 = C28;
    [v27];
}
try { C29.call(v27); } catch (e) {}
const v32 = Date["parse"]("parse");
try { v32(); } catch (e) {}
5 ^ 5;
9007199254740992 >>> 9007199254740992;
const v39 = new C29();
try {
    v39 ^ 9007199254740992;
} catch(e41) {
}
[] = v12;
const v42 = new C29();
v42[1000] = v42;
function f43(a44, a45) {
    return a44;
}
const v48 = ["function",v42];
v48[0];
const o50 = {
    "arguments": v48,
    "type": "function",
};
new Worker(f43, o50);
