function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Math.tan(-256);
    ("268435456").normalize();
    try {
        ++F0;
    } catch(e9) {
    }
    let v12 = 132401.99261227832;
    try {
        Math.cos(-9223372036854775807);
    } catch(e14) {
    }
    try {
        Math.min(-9223372036854775807);
    } catch(e16) {
    }
    try {
        Math.asin(-9223372036854775807);
    } catch(e18) {
    }
    v12--;
    try {
        this.d = -9223372036854775807;
    } catch(e20) {
    }
}
const v21 = new F0();
const v22 = new F0();
const v23 = new F0();
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v22;
        const o30 = {
            get c() {
                return "callee";
            },
        };
    } catch(e31) {
    }
    function f33(a34, a35, a36) {
        if (a34) {
            Object.defineProperty(this, v21, { writable: true, value: Uint32Array });
        } else {
            delete this[BigInt64Array];
            v23.b;
        }
        return -2.220446049250313e-16;
    }
    try {
        this.f = F0;
    } catch(e45) {
    }
}
class C47 extends Uint8ClampedArray {
}
new C47();
Math.expm1(9007199254740991);
new F24(v23, v22);
new F24(v23, v22);
Math.__proto__;
let {"a":v55,"b":v56,...v57} = C47;
try {
    Math[C47] = v23;
} catch(e58) {
}
new F24(v23, v21);
!1000000000.0;
Math.cbrt(F0);
