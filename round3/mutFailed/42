[Float32Array,Int32Array,Float64Array];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a9;
    } catch(e10) {
    }
}
try {
    ("15296").localeCompare("undefined", "toStringTag");
} catch(e14) {
}
const t12 = "15296";
t12.h = false;
const v19 = Array(4096);
const v20 = [30057];
const v21 = [840125982,-1024,-30795,16,268435440];
const v22 = [-1,-10294,-1221637653,536870889,8,4294967297,-2147483647];
function f23(a24, a25, a26) {
    const o29 = {
        set h(a28) {
        },
    };
    return o29;
}
f23(v19, v20, v19);
f23(v22, v20, v20);
f23(v20, v21, v21);
try {
    new Int16Array(-1762455234);
} catch(e37) {
}
function F39(a41) {
    if (!new.target) { throw 'must be called with new'; }
}
new Int32Array(Array);
const o45 = {
    __proto__: null,
};
for (let v46 = 0; v46 < 25; v46++) {
    function F47(a49, a50) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = a50;
    }
    class C52 {
        constructor(a54) {
            const t46 = ("symbol").__proto__;
            t46.valueOf = a54;
        }
    }
    const t50 = "symbol";
    new t50(v46, v46);
}
try {
    new Uint16Array(127, 127, -2396);
} catch(e60) {
}
class C62 {
    toString(a64, a65) {
        try { new a64(); } catch (e) {}
    }
}
const v67 = new v21();
const o72 = {
    [v67](a69, a70, a71) {
    },
};
[,-1000000000.0];
eval("");
try {
    new Infinity(128, -2396);
} catch(e81) {
}
const o83 = {
    "type": "minor",
};
const v86 = ["function",,];
const o87 = {
    "arguments": v86,
    "type": "function",
};
Array(219).concat(25208n, Int8Array);
