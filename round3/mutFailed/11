const v7 = [-1000000000.0,-7.800475187537197,2.220446049250313e-16,1000000000000.0,2.220446049250313e-16,-0.07977616257199394,-728731.2942530662,7.494242175779483,-7.701859805009103e+306];
const v8 = [-3.0,-1000000.0,1.6542290487426165e+308];
const v9 = [-6.451701812465563e+307,-1000.0,-1000.0,-445297.7485212366,-6.955759135239171e+307,-1000.0,2.220446049250313e-16,0.0,0.2405436337628153];
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    try {
        this.e = "boolean";
    } catch(e16) {
    }
    try {
        this.g = a14;
    } catch(e17) {
    }
}
new F10(v7, "boolean", v7, "-1005159259");
new F10(v7, v9, v7, "-1005159259");
new F10(v8, F10, v7, "symbol");
new Date();
const v23 = [];
class C24 {
}
class C25 extends C24 {
    1000 = C24;
    [v23];
}
const v27 = Date["parse"]("parse");
try { v27(); } catch (e) {}
const v32 = new C25();
function f33(a34) {
    13 + 13;
    return a34;
}
v32[Symbol.toPrimitive] = f33;
try {
    v32 ^ 9007199254740992;
} catch(e40) {
}
[] = v9;
const v41 = new C25();
v41.toJSON = C25;
function f42(a43, a44) {
    return a43;
}
const v47 = ["function",v41];
const o48 = {
    "arguments": v47,
    "type": "function",
};
new Worker(f42, o48);
