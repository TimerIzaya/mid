let v0 = 2990;
try {
    new Int32Array(v0);
} catch(e3) {
}
try {
    new BigInt64Array(64);
} catch(e7) {
}
try {
    new Int8Array(82);
} catch(e11) {
}
function f12(a13, a14) {
    const o29 = {
        "d": a14,
        set c(a16) {
            for (let i19 = 0, i20 = 10; i19 < i20; i19++, i20--) {
                try {
                    v0 = i20;
                } catch(e28) {
                }
            }
        },
    };
    return o29;
}
const v30 = f12(82, 64);
const v31 = f12(v0, 82);
f12(v0, 82);
const v33 = [1000000000000.0,1.1202704646378545e+308,7.5335641934548e+307,0.3957641848016713];
const v34 = [-1000000.0,1.7976931348623157e+308,0.18480435767576786,-6.106043615117374,393744.1021267732,6.2183567994498965,-415707.4036483703,5.0];
const v35 = [-1000000000000.0,662.6990392593727,NaN,1000.0,-1000000000000.0,2.0,-1000.0,818214.1046048922];
class C36 {
    constructor(a38, a39, a40) {
        try {
            a39[a39] = v31;
        } catch(e41) {
        }
    }
    static {
        try {
            new BigInt64Array(-9223372036854775808);
        } catch(e47) {
        }
    }
}
const v48 = new C36(v34, Int32Array, v35);
const v49 = new C36(Int8Array, v48, v48);
new C36(BigInt64Array, C36, v33);
var b = v30;
const v52 = [BigInt64Array,C36,v0,[BigInt64Array,64,f12,BigInt64Array],C36];
[Int8Array,v52,82,Int32Array];
for (let i55 = 0; i55 < 9; i55++) {
    Object.defineProperty(v49, 4, { configurable: true, get: f12, set: f12 });
    c in v52;
    try {
        f12(82, 64);
    } catch(e64) {
    }
}
