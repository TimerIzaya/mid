const v1 = new Map();
const v2 = [8.760626698923337e+307,4.70940689998069,1000000.0,-471.25786900169726,-2.220446049250313e-16,5.418566381617589,Infinity];
const v3 = [-1000000000000.0];
const v4 = [-6.058222309744679,272877.3448392865,84091.68528205343,-1000000.0,334933.55605626875,2.2250738585072014e-308];
class C5 {
    static [v2];
    constructor(a7) {
        const v8 = [v4,a7];
        [a7,v8,v1,a7,v8];
        [v2,this,v3,v8];
        new Map(v4);
        const o15 = {
            "execution": "async",
            "type": "major",
        };
        gc(o15);
    }
}
const v17 = new C5(v2);
new C5(v3);
new C5(v4);
class C20 extends Map {
    set h(a22) {
        try {
            new Map(this);
        } catch(e24) {
        }
    }
    toString(a26, a27, a28) {
        const o29 = {
        };
        try {
            o29.h = v17;
        } catch(e30) {
        }
        try {
            const o31 = {
            };
            o31.h = v17;
            o31.f = a26;
        } catch(e32) {
        }
        try {
            const o33 = {
            };
            o33.h = v17;
            o33.f = a26;
            o33.g = v17;
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.h = v17;
            o35.f = a26;
            o35.g = v1;
        } catch(e36) {
        }
        return C5;
    }
}
new C20();
new C20();
const v39 = new C20();
function f40() {
    return v39;
}
for (let v45 = 0; v45 < 100; v45++) {
    URIError();
}
for (const v47 in v4) {
    try {
        ("9").toLowerCase();
    } catch(e49) {
    }
}
