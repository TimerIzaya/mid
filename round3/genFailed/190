class C3 {
    set d(a5) {
        try {
            super.split(this, a5, a5, a5, "-27707");
        } catch(e7) {
        }
    }
    static #d = "string";
    ["-27707"];
    c = "shift";
    a;
    [-1];
    2147483647;
    #c;
}
const v8 = new C3();
const v9 = new C3();
const v10 = new C3();
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = "shift";
    } catch(e16) {
    }
}
const v17 = new F11("string", v8, v8);
new F11("string", v9, v9);
const v19 = new F11("-27707", v10, v9);
function f20() {
    return "shift";
}
function f21() {
    return v10;
}
function f22() {
    const v24 = arguments;
    const v25 = new C3();
    arguments in arguments;
    Object.defineProperty("-27707", "d", { get: f21 });
    const v29 = 268435439 * v25;
    try {
        Math.acos(v25);
    } catch(e31) {
    }
    v29 ^ v25;
    +268435439;
    +268435439;
    return arguments;
}
f22(v17, "-27707", v19, C3, F11);
