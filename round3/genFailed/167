try {
    new Float32Array(255);
} catch(e4) {
}
try {
    new BigInt64Array(6);
} catch(e8) {
}
try {
    new Float32Array(2409);
} catch(e12) {
}
const v14 = new Date();
/1a|b/gisv;
const v16 = /XQA/isv;
const v17 = /wN*/gyidm;
function f18(a19, a20, a21, a22) {
    const o44 = {
        __proto__: v17,
        "g": 6,
        o(a24, a25, a26) {
            class C27 extends Float32Array {
                static 1 = a26;
            }
            new C27();
            new C27();
            new C27();
            let v32 = 5;
            const v34 = !1.2401511272875896e+308;
            const v35 = +v17;
            const v36 = ~v35;
            try {
                Math.cbrt(v35);
            } catch(e38) {
            }
            try {
                Math.cbrt(v36);
            } catch(e40) {
            }
            try {
                Math.tanh(v34);
            } catch(e42) {
            }
            v32--;
            return v34;
        },
    };
    return o44;
}
const v45 = f18(255, 6, 6, v16);
f18(6, 255, 255, v17);
const v47 = f18(255, 255, 2409, v17);
let v48 = v45[-1];
Date < v47;
let v50 = 0;
do {
    v14["toLocaleString"](v45, ..."toLocaleString", v47, ..."toLocaleString", Float32Array, Float32Array);
    const v56 = v48--;
    try {
        Math.floor("toLocaleString");
    } catch(e58) {
    }
    const v59 = -1000.0 << v56;
    -v48;
    268435440 + v56;
    try {
        Math.atanh(v56);
    } catch(e63) {
    }
    -1000.0 >> v59;
    v50++;
} while (v50 < 4)
