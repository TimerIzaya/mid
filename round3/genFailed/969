try {
    new Float64Array(1024);
} catch(e3) {
}
try {
    new Float32Array(146);
} catch(e7) {
}
try {
    new Int8Array(1024);
} catch(e11) {
}
class C12 extends Int8Array {
    #g;
    d;
    get e() {
        let v14 = 0;
        do {
            this[1];
            try {
                this.toString();
            } catch(e17) {
            }
            v14++;
        } while (v14 < 6)
        return Float32Array;
    }
}
const v21 = new C12();
new C12();
const v23 = new C12();
[833284906,766915024,-25634];
[-2,28656,-2147483647,-154570731,3,-64237,-1072177993,2147483647];
const v26 = [64,-268435456,-14,1];
const v27 = [-1842733840,4294967295,268435441,536870912,-1200443425,-248163803,10,1959478024];
[-14,-46474,-2147483649,257,1919137982,7,2147483648,-947737974,1613741557];
[9007199254740991,-63023,1464248685,-14,-2];
[v21,Int8Array];
const v31 = [1024];
const v32 = [v23,v31,C12,v31,v27];
v32.sort(...v21, ...v26, ...v32, Float32Array);
try {
    v23.__proto__ = v27;
} catch(e34) {
}
