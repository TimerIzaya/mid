function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -9007199254740992;
    } catch(e3) {
    }
    try {
        this.a = -9007199254740992;
    } catch(e4) {
    }
    try {
        this.b = -9007199254740992;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
function f10() {
    return v8;
}
class C11 extends f10 {
    e;
    static m(a13, a14, a15, a16) {
        %VerifyType(F0);
        v6[v8];
        return -3.0;
    }
    8 = F0;
    static #c = v7;
    static [v6];
    static 4;
    #d = v7;
}
new C11();
const v22 = new C11();
const v23 = new C11();
function f27(a28, a29, a30, a31) {
    const o39 = {
        p(a33, a34, a35, a36) {
            a28[Symbol.hasInstance] = a35;
            return -1364n;
        },
        ...C11,
        "c": -1364n,
        [v6]: v22,
        7: false,
        ...v23,
        "a": v22,
        "d": v22,
        "h": F0,
    };
    return o39;
}
f27(v22, v7, -1364n, v23);
f27(v23, v8, 42387n, C11);
const v42 = f27(v8, v8, -1364n, 42387n);
try {
    v22[v42] = v7;
} catch(e43) {
}
delete v23[false];
for (let v45 = 0; v45 < 100; v45++) {
    f10();
}
let v48 = -1;
try {
    Math.tanh(v48);
} catch(e51) {
}
try {
    Math.abs(v8);
} catch(e53) {
}
--v48;
