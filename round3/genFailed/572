const v0 = [65536,255,536870887,65537,-1347,-10,-6];
[-2147483648,65537,8,0,-2086484384,-485727103,255,1098610310,-10];
const v2 = [10000,536870888,3,-44690,-106177972,1000,-771961987,512,-65535];
const v6 = [4294967295,-1024,-62081];
const v7 = [-65537,45887,512,60343,-2,-536870912,1,-14586];
const v8 = [1473109256,-2147483649,1901804826,127,25700,-9223372036854775807];
class C9 {
    m(a11, a12) {
        function f13() {
            return a11;
        }
        return a12;
    }
    toString(a15, a16) {
        try {
            v2[v7] = a15;
        } catch(e17) {
        }
        return v6;
    }
    #g = -7;
    static [v0];
}
const v18 = new C9();
const v19 = new C9();
const v20 = new C9();
class C21 extends C9 {
    get e() {
        try {
            v20[2377667671] = v19;
        } catch(e23) {
        }
        const v26 = this << 17597;
        (this && this) ^ (v26 ^ v26);
        return v8;
    }
    static [v7] = -7;
    #e;
}
const v30 = new C21();
const v31 = new C21();
const v32 = new C21();
const v33 = v30.e;
try {
    v32[9] = v31;
} catch(e34) {
}
delete C21[v31];
v7["reduceRight"](v33, -7);
try {
    v32 >= v18 ? v32 : v18;
} catch(e40) {
}
