[1.7976931348623157e+308,0.5154550253768748,-701.44040649506,0.9155944309924052,1.7976931348623157e+308,-1000000000.0,3.5014544792056856,-446.2918997889735,-3.787814225194806];
const v1 = [-9.282748202724125,23786.01878766995,366153.63833488943,2.2250738585072014e-308,1000.0,39.925191408508226,-475.528565367978,-0.0,-1000000.0];
const v2 = [NaN,-1.6281806672038144,-4.0,-2.2250738585072014e-308];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a5;
    } catch(e7) {
    }
    try {
        this.e = v2;
    } catch(e8) {
    }
}
const v9 = new F3(v2, v2);
const v10 = new F3(v1, v1);
new F3(v1, v2);
try {
    new Int8Array(2566);
} catch(e15) {
}
try {
    new Int32Array(3954);
} catch(e19) {
}
try {
    new Uint8Array(1190);
} catch(e23) {
}
class C24 extends Int8Array {
    [1190] = v9;
    static d;
    get f() {
        const v26 = this;
        let {"c":v27,"e":v28,"f":v29,} = v10;
        new Int32Array(v10, v29, 1190);
        try {
            v9[268435441] = 1190;
        } catch(e31) {
        }
        return v1;
    }
    #e = v1;
    1841070008;
}
new C24();
const v33 = new C24();
const v34 = new C24();
v34[Symbol.match] = Int32Array;
const o37 = {
};
try {
    o37.e = v34;
} catch(e38) {
}
try {
    const o39 = {
    };
    o39.e = v34;
    o39.h = v33;
} catch(e40) {
}
try {
    const o41 = {
    };
    o41.e = v34;
    o41.h = v33;
    o41.a = 3954;
} catch(e42) {
}
try {
    const o43 = {
    };
    o43.e = v34;
    o43.h = v33;
    o43.g = v1;
} catch(e44) {
}
