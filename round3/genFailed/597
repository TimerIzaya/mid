class C3 {
    #n(a5) {
        let v6 = 0;
        do {
            a5[255] >>= v6;
            try {
                new Int8Array(2329);
            } catch(e10) {
            }
            try {
                new Int32Array(11);
            } catch(e14) {
            }
            try {
                new Uint8Array(448);
            } catch(e18) {
            }
            v6++;
        } while (v6 < 10)
        return "isConcatSpreadable";
    }
}
new C3();
new C3();
const v24 = new C3();
new WeakMap();
Reflect.construct(WeakMap, ["isConcatSpreadable"], WeakMap);
const o36 = {
};
try {
    o36.g = -388875374;
} catch(e37) {
}
try {
    const o38 = {
    };
    o38.g = -388875374;
    o38.h = 65535;
} catch(e39) {
}
try {
    const o40 = {
    };
    o40.g = -388875374;
    o40.h = 65535;
    o40.f = 9223372036854775807n;
} catch(e41) {
}
try {
    const o42 = {
    };
    o42.g = -388875374;
    o42.h = 65535;
    o42.f = v24;
} catch(e43) {
}
