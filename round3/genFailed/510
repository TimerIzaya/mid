const v0 = [];
class C1 {
    static 5 = v0;
    e;
    constructor() {
        const v4 = [v0,this];
        Reflect.apply(v0.findLast, v0, v4);
        let v8 = -536870912;
        v8++;
        -1024 + -1024;
        let v12 = --v8;
        v12--;
    }
}
const v14 = new C1();
new C1();
const v16 = new C1();
try {
    new Uint8ClampedArray(3);
} catch(e20) {
}
try {
    new Float32Array(0);
} catch(e24) {
}
try {
    new Int32Array(257);
} catch(e28) {
}
const t29 = "UMF";
t29[Symbol.iterator] = v16;
Uint8ClampedArray === v14;
const v35 = C1 <= v14;
if (v35) {
    try {
        C1[v0] = v35;
    } catch(e36) {
    }
} else {
    try {
    const t0 = 0;
    t0(v0, "string", Float32Array, 3);
    } catch (e) {}
    try {
        const t44 = "symbol";
        t44[1485] = 0;
    } catch(e38) {
    }
}
