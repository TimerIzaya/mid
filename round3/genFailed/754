try {
    new Float32Array(2);
} catch(e3) {
}
try {
    new Uint16Array(512);
} catch(e7) {
}
try {
    new BigInt64Array(1);
} catch(e11) {
}
try {
    new Int8Array(1272);
} catch(e21) {
}
try {
    new BigUint64Array(3);
} catch(e25) {
}
try {
    new Uint8Array(9);
} catch(e29) {
}
function f30(a31, a32, a33, a34) {
    let v38 = 846983.6469621945;
    const v39 = v38--;
    16 >>> 16;
    512 & (512 / 9007199254740990);
    9n >> v39;
    v38 >> 512;
    return 9n;
}
f30(9, 9n, -1n, -1462285660);
