try {
    new BigInt64Array(9);
} catch(e3) {
}
try {
    new Int8Array(15);
} catch(e7) {
}
try {
    new BigUint64Array(129);
} catch(e11) {
}
class C12 extends BigInt64Array {
    constructor(a14, a15, a16, a17) {
        super(15);
        const v18 = a15?.h;
        [this,a14,BigInt64Array,Int8Array];
        [BigInt64Array];
        [129,v18,a17];
        try {
            new BigUint64Array(50711);
        } catch(e24) {
        }
    }
    5 = 9;
    static 9;
}
const v25 = new C12(15, 129, 9, 9);
const v26 = new C12(9, C12, 129, 15);
const v27 = new C12(9, v26, 15, 9);
function f28() {
    return 129;
}
class C29 {
    constructor(a31, a32, a33) {
        try {
            a33 >> v27;
        } catch(e35) {
        }
    }
    static #a = v25;
    #f;
    static [BigUint64Array] = v25;
    #o(a37, a38, a39, a40) {
        try {
            a39.#a;
        } catch(e43) {
        }
        return BigUint64Array;
    }
}
const v44 = new C29(129, 129, v27);
const v45 = new C29(C12, 15, v26);
new C29(v45, 15, v44);
try {
    v27[-1] = C29;
} catch(e47) {
}
v45 === v25;
function f49(a50, a51, a52, a53) {
    const o54 = {
        [a50]: Int8Array,
        [a53]: v25,
        "c": a50,
        ...v27,
        "d": v26,
    };
    return o54;
}
f49(C12, 9, v25, 15);
f49(f49(C12, 9, v26, 9), 15, v26, 15);
