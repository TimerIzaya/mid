try {
    new BigUint64Array(2347);
} catch(e3) {
}
try {
    new Float32Array(14);
} catch(e7) {
}
try {
    new Uint8Array(3);
} catch(e11) {
}
class C12 extends Float32Array {
    constructor(a14, a15) {
        let v13 = this;
        super(a15, a14, a15);
        (1 - v13) & -880.8236991422882;
        1 / a15;
        const v23 = 1 % BigUint64Array;
        try {
            Math.log1p(1);
        } catch(e25) {
        }
        v23 + -880.8236991422882;
        v13++;
    }
}
new C12(14, 3);
new C12(3, 14);
new C12(14, 3);
const v31 = [536870888];
[9,78420988,6,-2147483647,1282280559,16,-14,13,-8];
[-1313348996];
function f34(a35, a36) {
    const o44 = {
        "d": a36,
        8: a36,
        get b() {
            super[Float32Array];
            const o42 = {
                "execution": "sync",
                "type": "minor",
            };
            return gc(o42);
        },
        "e": v31,
    };
    return o44;
}
const v45 = f34(2347, 14);
f34(14, 2347);
const v47 = f34(3, 2347);
let v48;
try { v48 = v47.n(3, v47); } catch (e) {}
delete v45[v48];
for (const v50 in v31) {
    function f51() {
        return v50;
    }
}
const v52 = v48.__proto__;
const o53 = {
};
try {
    o53.g = v52;
} catch(e54) {
}
try {
    const o55 = {
    };
    o55.g = v52;
    o55.c = BigUint64Array;
} catch(e56) {
}
try {
    const o57 = {
    };
    o57.g = v52;
    o57.c = BigUint64Array;
    o57.a = 14;
} catch(e58) {
}
try {
    const o59 = {
    };
    o59.g = v52;
    o59.c = BigUint64Array;
    o59.a = v52;
} catch(e60) {
}
