try {
    new Int8Array(0);
} catch(e9) {
}
try {
    new Int8Array(1);
} catch(e13) {
}
try {
    new Uint32Array(16);
} catch(e17) {
}
class C18 extends Int8Array {
    static [Uint32Array];
    1 = 663.7150561294432;
    static {
        try {
            this[5] = this;
        } catch(e20) {
        }
    }
    static set g(a22) {
        let v23;
        try { v23 = a22(255n, a22, 0.30726799426578566, -256n); } catch (e) {}
        try {
            v23 & v23;
        } catch(e25) {
        }
    }
}
new C18();
const v27 = new C18();
const v28 = new C18();
const v30 = [];
Reflect.apply(v28.entries, v27, v30);
try {
    new BigUint64Array(12);
} catch(e36) {
}
try {
    new Uint32Array(2739);
} catch(e40) {
}
try {
    new Int32Array(5);
} catch(e44) {
}
