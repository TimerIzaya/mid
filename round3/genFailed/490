const v0 = /a{1,2}?(?=.)?/sum;
const v1 = /\cj\cJ\ci\cI\ck\cK/idm;
const v2 = /dzY\u0034/gim;
function f3(a4, a5) {
    const o29 = {
        [v2](a7, a8) {
            a8[Symbol.replace];
            return a5;
        },
        set d(a13) {
            this.b |= a13;
            try {
                try {
                    v2 ^ v0;
                } catch(e15) {
                }
            } catch(e16) {
                e16?.a;
            } finally {
                const v19 = Symbol.iterator;
                const o28 = {
                    [v19]() {
                        let v21 = 10;
                        const o27 = {
                            next() {
                                v21--;
                                const v25 = v21 == 0;
                                const o26 = {
                                    "done": v25,
                                    "value": v21,
                                };
                                return o26;
                            },
                        };
                        return o27;
                    },
                };
            }
        },
    };
    return o29;
}
const v30 = f3(v2, v2);
f3(v0, v0);
f3(v30, v1);
try {
    new Int16Array(7);
} catch(e36) {
}
try {
    new Float32Array(3818);
} catch(e40) {
}
try {
    new Uint8Array(0);
} catch(e44) {
}
const v45 = f3(7, v1);
const o46 = {
};
try {
    o46.c = v45;
} catch(e47) {
}
try {
    const o48 = {
    };
    o48.c = v45;
    o48.a = Int16Array;
} catch(e49) {
}
try {
    const o50 = {
    };
    o50.c = v45;
    o50.a = Int16Array;
    o50.d = v2;
} catch(e51) {
}
try {
    const o52 = {
    };
    o52.c = v45;
    o52.a = Int16Array;
    o52.d = Float32Array;
} catch(e53) {
}
