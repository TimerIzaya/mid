const v0 = [5.0,-2.220446049250313e-16,1.7976931348623157e+308,3.0];
const v1 = [-1000000000.0,-8.837794649735439e+307];
const v2 = [46.554123923854604];
const v4 = new Date();
function f5(a6, a7) {
    const o15 = {
        [v0](a9, a10) {
            try { this["valueOf"]("valueOf", a9, v4, a7); } catch (e) {}
            for (let v13 = 0; v13 < 100; v13++) {
                Date();
            }
            return v0;
        },
        [v1]: v2,
        [a7]: v1,
        [Date]: v1,
        "e": v2,
        "a": a7,
        [a6]: a6,
    };
    return o15;
}
const v16 = f5(v2, v1);
f5(v0, v16);
const v18 = f5(v2, v0);
function F19(a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a22;
    } catch(e24) {
    }
    try {
        this.c = v18;
    } catch(e25) {
    }
    try {
        this.f = Date;
    } catch(e26) {
    }
}
new F19(v18, v16, v1);
new F19(v16, v4, v1);
new F19(v16, v4, v0);
[-4.0,305.68508201385316,150943.86287016934,-4.920836950341252,-1000000000000.0];
[0.478835088236119,0.7666349986894148,1000000000000.0,-211.64052326974797];
v0.length -= [0.43788097537136605,5.0,-532.6659459780287];
for (const v33 of v2) {
    const o36 = {
        "maxByteLength": 4294967295,
    };
    const v38 = new SharedArrayBuffer(1420, o36);
    try {
        new Float32Array(v38);
    } catch(e41) {
    }
}
