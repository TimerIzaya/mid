function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 11;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v7 = [v5];
const v8 = [v7,F0,v4];
[v8,v8,F0,v8,v7];
try {
    new Uint32Array(5);
} catch(e16) {
}
try {
    new Uint32Array(1000);
} catch(e20) {
}
try {
    new BigInt64Array(64);
} catch(e24) {
}
let v25 = 0;
while (v25 < 7) {
    const v29 = [1000,v6];
    Reflect.apply(v7.find, v4, v29);
    v25++;
}
