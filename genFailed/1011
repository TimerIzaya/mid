const v2 = new BigInt64Array(1022);
const v5 = new Int8Array(1000);
const v8 = new Uint8Array(9);
[1466122185,2,-2,65535,-45230,-536870912];
const v10 = [-11,256,257,4294967295,-1517990160,2];
const v11 = [64494,8,-1834526704,-1923430069,-11];
class C12 extends Int8Array {
    #valueOf(a14, a15, a16) {
        try {
            v8.slice();
        } catch(e18) {
        }
        let v19;
        try { v19 = v5.lastIndexOf(Int8Array, 9); } catch (e) {}
        const v20 = v19;
        try { v20(v20, v10, v11); } catch (e) {}
        return v5;
    }
    [v2];
    static [Int8Array];
    [v5];
    2147483647 = BigInt64Array;
    static [BigInt64Array];
}
let v22 = new C12();
const v23 = new C12();
const v24 = new C12();
C12[1000] = BigInt64Array;
v22--;
function f26(a27, a28, a29, a30) {
    const o31 = {
        "c": a30,
        "a": a28,
    };
    return o31;
}
f26(v23, 9, v24, v10);
f26(v24, 1000, v24, v10);
f26(v23, 9, v23, v11);
