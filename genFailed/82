const v2 = new Float64Array(4096);
const v5 = new Int16Array(4096);
const v8 = new Uint8Array(2736);
class C12 extends Float64Array {
    static #d;
    get a() {
        try {
            v2.sort(v8);
        } catch(e15) {
        }
        let v19 = 159796.3721774125;
        v19++;
        const v21 = -268435456 && -268435456;
        Math.cosh(-2147483649);
        -268435456 & Float64Array;
        v21 || this;
        return v5;
    }
}
const v25 = new C12();
new C12();
const v27 = new C12();
v27[2] = v8.buffer;
for (let v29 = 0; v29 < 32; v29++) {
    v25["p" + v29] = v29;
}
v25.buffer <<= 2736;
const v33 = [4096,v27];
Reflect.apply(v27.every, v2, v33);
