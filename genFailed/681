class C3 {
    #b;
    g = 0.5304672130626139;
    static #toString(a5, a6) {
        let v7;
        try { v7 = a5(682644.6023788613, a6); } catch (e) {}
        function* f8(a9, a10, a11, a12) {
            try { a9["o"](a5); } catch (e) {}
            yield* "matchAll";
            return a9;
        }
        f8(682644.6023788613, v7, a6, "matchAll");
        return 682644.6023788613;
    }
}
const v16 = new C3();
const v17 = new C3();
const v18 = new C3();
class C19 extends C3 {
    #o(a21, a22, a23, a24) {
        a22 = a24;
        C3[4];
        return a22;
    }
    #m(a27, a28, a29) {
        v16[a29] = a29;
        v18.g >>>= 0.5304672130626139;
        const o30 = {
        };
        new Proxy(a28, o30);
        return C3;
    }
}
new C19();
new C19();
new C19();
const v38 = new Uint8Array(1024);
const v41 = new BigInt64Array(10);
new BigUint64Array(8);
try {
    v18.fuck(v17, "p", Uint8Array);
} catch(e47) {
}
/[(x)(x)(x)\2]/gv;
const v49 = /aBx/uisy;
/A(ab)+/udsy;
(v49 ** v38) <= v41;
