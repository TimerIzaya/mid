function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -1225078767;
    } catch(e3) {
    }
    try {
        this.c = -1225078767;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
class C8 extends F0 {
    static get f() {
        delete v5?.c;
        v5.g;
        return this;
    }
    10 = v6;
    static #m(a13) {
        super[-4.625984452855643e+307] = 1000000.0;
        return 0.24182568746150213;
    }
}
const v17 = new C8();
const v18 = new C8();
const v19 = new C8();
function f20(a21, a22, a23, a24) {
    const o31 = {
        set e(a26) {
            super.c = a23;
        },
        "b": a22,
        "c": v17,
        "g": v6,
        m(a28, a29) {
            super.h = a24;
            const o30 = {
                "d": C8,
                "e": this,
                "a": this,
            };
            return o30;
        },
    };
    return o31;
}
const v32 = f20(v18, v17, v18, v7);
const v33 = f20(v32, v18, v7, v19);
f20(v33, v7, v32, v6);
for (let [v35,v36] of v33) {
    v35[Symbol.toStringTag] = v7;
    const v41 = ~v36;
    Math.exp(v6);
    Math.pow(v19, 1319533638);
    +v19;
    Math.sqrt(v41);
}
