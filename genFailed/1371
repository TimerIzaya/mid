const v0 = [-734073.053248753,-Infinity];
const v1 = [-5.0];
let v2 = [1.0,-1000000000000.0,-294.3327625650685,-6.19764736394694e+307,963.3470673495281,NaN,1000000000000.0,1000.0];
class C3 {
    constructor(a5, a6) {
        Object.defineProperty(v1, v0, { value: a6 });
        try { v2(v2, v0, a5, v1, v1); } catch (e) {}
    }
    #toString(a9, a10) {
        const v14 = -Infinity;
        let v15 = v1 >> v0;
        Math.atan2(-1375136948, v1);
        Math.pow(v0, v14);
        -64920 << ~-1375136948;
        ++v15;
        return v2;
    }
}
new C3(v2, v2);
const v22 = new C3(v1, v2);
new C3(v0, v22);
[1288457349,4294967296,8827,677909137,-16,-268435456,0,-536870912];
const v25 = [2076178090,9,-2147483649,42820,-4096,-9223372036854775807,-3];
const v30 = new C3([2147483649,65535,2147483647,16,-27234,-45795,-1,-9,-32121], v22);
function f31() {
    return v30;
}
function f32() {
    function f34(a35) {
        a35 >= v25;
        this[3002199833] >>>= 1;
    }
    this.onmessage = f34;
    Math.sinh(C3);
    const v40 = --v2;
    v40 >>> C3;
    Math.trunc(v40);
    Math.pow(v40, v2);
    v2 << (v40 & f34);
}
const v48 = [];
const o49 = {
    "arguments": v48,
    "type": "function",
};
new Worker(f32, o49);
