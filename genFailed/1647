const v2 = new BigInt64Array(10);
const v5 = new Int16Array(255);
const v8 = new Uint32Array(7);
class C9 {
    constructor(a11, a12, a13) {
        v2.__proto__;
        {
        }
        v5.byteOffset /= a13;
        try { this.p(a11, 7, 10, 10, BigInt64Array); } catch (e) {}
        try {
            v2.forEach(a11);
        } catch(e18) {
        }
    }
    [10] = BigInt64Array;
}
const v19 = new C9(Uint32Array, 255, 10);
const v20 = new C9(v8, 10, 255);
const v21 = new C9(v20, 255, 7);
for (const v22 in v5) {
    const v24 = Symbol.unscopables;
    v8[v24] = v24;
}
Int16Array / 10;
const v26 = new BigInt64Array(v19, 7, 10);
~v5;
v8[1024] = v19;
try { v19.p(v26, v2, v21, 255); } catch (e) {}
