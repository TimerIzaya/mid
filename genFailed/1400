const v2 = new BigUint64Array(255);
const v5 = new BigInt64Array(129);
const v8 = new Uint16Array(7);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a14;
    } catch(e15) {
    }
    try {
        this.c = v2;
    } catch(e16) {
    }
    try {
        this.g = 129;
    } catch(e17) {
    }
}
new F9(129, 129, 7, 255);
const v19 = new F9(7, 7, 129, 7);
const v20 = new F9(255, 129, 129, 7);
[0.7206252129928813,0.4689173631148741,-4.0,156038.25250809058,-220911.0025916081];
[1.7976931348623157e+308,0.8767829134000235];
[-3.0,-902.376107390068,0.0,48.653878655841254,1000000000.0];
const v24 = v20[3890];
[3.0,-0.0,-1e-15,-1000000.0,460460.4671113014,1000.0,-2.220446049250313e-16,Infinity,-4.0];
[466752.0361520839,-1e-15,-2.0,1.0];
[0.4648433845989677,0.8553124177259112,1000000.0,4.923912180779114e+307,-2.0,1.7976931348623157e+308];
function f28(a29, a30, a31) {
    function f33(a34) {
        let v35;
        try { v35 = a34(a34); } catch (e) {}
        try {
            v5.valueOf = v35;
        } catch(e36) {
        }
    }
    this.onmessage = f33;
    f33 + v19;
    /rS/uy;
    /[G5]/gdim;
    /z9BnB[^123]/gudimy;
}
const v43 = [v24,v19,v8];
const o44 = {
    "arguments": v43,
    "type": "function",
};
new Worker(f28, o44);
