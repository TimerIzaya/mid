const v1 = new WeakMap();
const v2 = [0.11277618525540123];
const v3 = [NaN,NaN,-Infinity,1000000.0];
const v4 = [-844402.5044027074,Infinity,-199468.9096539619,0.12337746625227741,-3.0,-2.2250738585072014e-308,9.75854775342576,1000000.0];
[-96641.31442344352,-430403.4022645231,237.14344112933713,-219246.78080171975,-903.1560683515472,2.5474228140160697,-1.3209549796772873,-7.455595793734035e+307];
[9.248110981642462e+307,-978459.6570148525,-Infinity];
[-1000.0,1.0,1000000.0,0.09446811404784894,-241.99393646659087,0.45348475179490877,5.567678784164402e+307,1000.0,4.481306172525938,-2.2250738585072014e-308];
const v8 = [5.348517118265249,0.9900772852275449];
[5.0,-4.0,3.0,-1000.0,-2.096408014629554,252.56958514181883,-1000000.0,0.6252184052665551];
const v10 = [-1000000000000.0,138034.44635037705,424.9477875733171,2.2250738585072014e-308];
class C11 extends WeakMap {
    n(a13, a14) {
        new WeakMap(...v3, ...v10, ...v8, v1);
        const o18 = {
            "maxByteLength": 129,
        };
        const v20 = new SharedArrayBuffer(129, o18);
        new Uint8ClampedArray(v20);
        return a14;
    }
    static #f = v2;
}
new C11();
new C11();
let v25 = new C11();
v25 + v25;
let v27;
try { v27 = v3(); } catch (e) {}
function f28(a29, a30, a31) {
    const v32 = [257,-1525306306,-44569,8,-12,268435441,10,-16,536870887,-9223372036854775808];
    let v33 = [-65537,-2147483649,2098649519,9007199254740992,-16655,3,65537,1766831608,128,-247809724];
    let v34 = [-1];
    ({"a":v34,"h":v33,"length":v25,} = a30);
    return v32;
}
f28(C11, v27, v4);
