const v0 = /\u{12345}\u{23456}(?!a)?a\1?/di;
const v1 = /kWSP/ums;
const v2 = /((\xed\xa0\x80))\x02/gm;
new BigUint64Array(3939);
const v8 = new Uint8ClampedArray(1);
const v11 = new Int32Array(128);
class C12 extends Int32Array {
    constructor(a14, a15, a16, a17) {
        super(a14, a14, a14);
        function f18() {
            return a15;
        }
        Object.defineProperty(a16, 0, { writable: true, configurable: true, get: f18 });
        delete v11?.byteOffset;
        function f20() {
            return a17;
        }
    }
    static b;
    a = 3939;
    static [v11] = v8;
    #e = 3939;
}
new C12(1, v1, v11, v0);
const v22 = new C12(3939, v1, v1, v2);
let v23 = new C12(3939, v0, Uint8ClampedArray, v2);
try { v0.test(BigUint64Array); } catch (e) {}
try {
    C12.length = 1;
} catch(e26) {
}
v23 = v22;
const o27 = {
};
try {
    o27.g = v1;
} catch(e28) {
}
try {
    const o29 = {
    };
    o29.g = v1;
    o29.e = Uint8ClampedArray;
} catch(e30) {
}
try {
    const o31 = {
    };
    o31.g = v1;
    o31.e = Uint8ClampedArray;
    o31.b = BigUint64Array;
} catch(e32) {
}
try {
    const o33 = {
    };
    o33.g = v1;
    o33.e = Uint8ClampedArray;
    o33.d = BigUint64Array;
} catch(e34) {
}
