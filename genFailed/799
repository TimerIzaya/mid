function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 3;
    } catch(e3) {
    }
    try {
        this.g = 3;
    } catch(e4) {
    }
    try {
        this.a = 3;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v9 = [5.793822672047633e+307];
const v10 = [-1.629718827320941e+308,678795.8484721694,0.7962470711623162,-1000000000000.0,3.0];
const v11 = [0.048768531940202364,-1000000.0,-2.2250738585072014e-308,3.0,-4.0,-5.681372495989021e+305];
function f12() {
    return v11;
}
[v9,[v11],[v8,f12,v10]];
class C16 extends f12 {
    d;
    m(a18, a19) {
        v11[2] = this;
        v10[1];
        return a18;
    }
    static #g = v8;
    10;
    f = v6;
    #h = v7;
}
new C16();
new C16();
new C16();
const v27 = async (a28, a29, a30) => {
    %VerifyType(v6);
    delete a29?.length;
    await a29;
    return a28;
};
const o36 = {
    "maxByteLength": 1073741823,
};
const v38 = new SharedArrayBuffer(3966, o36);
new Uint8ClampedArray(v38);
