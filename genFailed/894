const v2 = new Array(485);
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a5;
    } catch(e6) {
    }
    try {
        this.e = a5;
    } catch(e7) {
    }
}
const v8 = new F3(485);
new F3(v8);
const v10 = new F3(Array);
function f11() {
    return 485;
}
const v14 = new Int16Array(1388);
const v17 = new Int16Array(255);
const v20 = new BigInt64Array(1);
const o21 = {
};
new Proxy(BigInt64Array, o21);
let v24;
try { v24 = v2.fill(v14, 1); } catch (e) {}
Object.defineProperty(v20, "b", { writable: true, set: Array });
try { v20.reduce(f11, v17); } catch (e) {}
v17.byteLength;
v24 = v10;
Object.defineProperty(o21, "h", { enumerable: true, set: Array });
