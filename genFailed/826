const v0 = [22061,40009,-5,1073741823,-1243511268,-1940188502,536870889,-65536,-34332];
const v1 = [36159];
const v2 = [268435441,-2,2,20638983];
class C3 {
    static [v0] = v0;
    constructor(a5, a6) {
        [4294967295,268435439,-2147483648,4096,59122];
        [-9223372036854775807,268435440,938872649,38211,10,255,-1024];
        const v9 = [-15,-10,-7,65537,-3,7];
        let v10;
        try { v10 = this(v0); } catch (e) {}
        try { a5.indexOf(v9, v10); } catch (e) {}
        v9.length **= v10;
        v9[a5];
    }
    [v0] = v1;
    c = v2;
    static #h = v1;
}
const v13 = new C3(v1, v0);
new C3(v2, v1);
const v15 = new C3(v2, v0);
class C19 extends C3 {
    static {
        for (let v21 = 0; v21 < 32; v21++) {
            v15["p" + v21] = v21;
        }
        this[7] = v1;
    }
    constructor(a25, a26) {
        super(a25, v1);
        function F27(a29, a30, a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = v2;
            } catch(e33) {
            }
            try {
                this.f = a25;
            } catch(e34) {
            }
        }
        const v35 = new F27(v13, v1, a26, a26);
        const v36 = new F27(v35, v35, 2n, 2n);
        new F27(v36, a26, a26, 6n);
    }
}
new C19(v0, 6n);
new C19(v0, 6n);
new C19(v1, 6n);
let v41 = 0;
while (v41 < 10) {
    new Int8Array(2874);
    new Uint32Array(11);
    new Int16Array(2);
    v41++;
}
