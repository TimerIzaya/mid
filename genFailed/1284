const v1 = -Infinity;
class C3 {
    static n(a5) {
        const v6 = this[a5];
        try {
            a5.__proto__ = v6;
        } catch(e7) {
        }
        return v6;
    }
    constructor(a9) {
        try {
            this.b = Infinity;
        } catch(e10) {
        }
    }
}
const v11 = new C3(Infinity);
let v12 = new C3(v1);
const v13 = new C3(Infinity);
class C17 {
    constructor(a19, a20, a21) {
        function F22(a24, a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v1;
            } catch(e28) {
            }
        }
        const v29 = new F22(a19, F22, this, -1000000000000.0);
        const v30 = new F22(v29, v12, v11, -1000000000000.0);
        new F22(v30, F22, this, -1000000000000.0);
    }
    static #d = v12;
    static #f;
    static [Infinity] = v1;
}
const v32 = new C17(C17, v12, -1n);
const v33 = new C17(v13, v11, -1n);
const v34 = new C17(v33, v11, 57567n);
try {
    v11.__proto__ = v34;
} catch(e35) {
}
let v37;
try { v37 = v11["o"](v32, "o"); } catch (e) {}
let v38;
try { v38 = new v37(-1n, v37, v34); } catch (e) {}
v38 !== v1;
v12 = v33;
v38[1] &&= Infinity;
