let v1 = Int32Array;
let v2 = new v1(128);
const v5 = new BigUint64Array(128);
const v8 = new Uint32Array(0);
class C9 extends Uint32Array {
    #c;
    constructor(a11, a12, a13) {
        super(128, 0);
        Math.round(a11);
        const v19 = !-3;
        a12 >>> v19;
        -v19;
        v2++;
    }
    [v8] = 0;
}
let v23 = new C9(v2, v2, 0);
new C9(v8, 0, 128);
new C9(v2, 0, 128);
class C26 extends BigUint64Array {
    valueOf(a28, a29, a30) {
        let v32 = 257;
        Math.log(-2147483648);
        -2147483648 * v5;
        let v36 = v5 % a30;
        Math.expm1(v32);
        --v32;
        return v36++;
    }
    3971 = v23;
    static [v1] = 0;
}
const v40 = new C26();
new C26();
const v42 = new C26();
Uint32Array >> v8;
v5[v42] = v40;
try {
    new Uint32Array(-65535);
} catch(e48) {
}
[v2,v23,...v1] = v23;
