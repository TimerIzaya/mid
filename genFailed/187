const v0 = [-1e-15,0.025973511535987925,-2.2250738585072014e-308,2.220446049250313e-16];
const v1 = [5.0,-4.0,-1000000.0,0.019597914256706206,-1000.0];
const v2 = [-2.0,-1000000000.0,-1000.0];
class C3 {
    c = v1;
    65535 = v2;
    static 3 = v0;
    d = v2;
    static #a;
    static valueOf(a5, a6) {
        const v8 = [a5,a6,a5];
        Reflect.apply(a5.toSpliced, v1, v8);
        /(\cj\cJ\ci\cI\ck\cK)/gvmy;
        /(?<!a)+/vdim;
        /a\Bb/ud;
        return this;
    }
}
const v14 = new C3();
const v15 = new C3();
const v16 = new C3();
const v17 = /\P{sc=Greek}[By1*]/gvm;
const v18 = /a\nb\bc(?<a>.)\k<a>/dis;
const v19 = /Ma\b![]abc+[\xe2\x81\xa3]\ud808\udf45*/umsy;
class C20 {
    static #d = v18;
    [v1] = v14;
    set d(a22) {
        try { a22(a22, this, v15, this); } catch (e) {}
        try { this.find(); } catch (e) {}
        try {
            v17.#d;
        } catch(e26) {
        }
    }
    static e;
    [v19];
}
const v27 = new C20();
const v28 = new C20();
new C20();
%VerifyType(v0);
try {
    v16.valueOf = v19;
} catch(e33) {
}
v19 == v19;
v27 + v28;
