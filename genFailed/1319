class C3 {
    constructor(a5) {
        if (this) {
            try { this.n(); } catch (e) {}
        } else {
            try { a5(525.089499454228); } catch (e) {}
        }
    }
    2 = -4.823692694980069e+307;
    static #p(a9) {
        this.c;
        let v12;
        try { v12 = this["p"](1000000.0, "p", "p"); } catch (e) {}
        function F13(a15, a16, a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a9;
            } catch(e19) {
            }
            try {
                this.e = a17;
            } catch(e20) {
            }
            try {
                this.g = 525.089499454228;
            } catch(e21) {
            }
        }
        const v22 = new F13(a9, a9, F13, this);
        const v23 = new F13(F13, "p", "p", v22);
        new F13(v12, v23, this, 1000000.0);
        return v22;
    }
}
const v25 = new C3(1000000.0);
const v26 = new C3(525.089499454228);
const v27 = new C3(1000000.0);
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v26;
    } catch(e33) {
    }
}
const v34 = new F28(C3, v25, v26);
new F28(v27, v34, v27);
new F28(v34, v26, v27);
function f40(a41, a42) {
    ~arguments;
    v26[a42];
    const o48 = {
        "maxByteLength": 165,
    };
    const v50 = new SharedArrayBuffer(165, o48);
    new Float32Array(v50);
    return arguments;
}
f40(v34, 525.089499454228, 1000000.0);
