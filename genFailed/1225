function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -4096;
    } catch(e3) {
    }
    try {
        this.f = -4096;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f11() {
    return 1.0;
}
class C12 extends f11 {
    static {
        v5[8] = -799535.232111934;
    }
    static valueOf(a15, a16, a17) {
        Object.defineProperty(v6, v6, { writable: true, value: v7 });
        F0 |= F0;
        return f11;
    }
    set g(a19) {
        super[this] = this ^ -799535.232111934;
        try {
            f11();
        } catch(e22) {
        }
    }
}
const v23 = new C12();
new C12();
const v25 = new C12();
for (const v29 in v25) {
    const v30 = f11();
    v30 <= v30 ? v30 : v30;
    f11();
    f11();
}
try { v23.sinh(v5); } catch (e) {}
const o38 = {
    "maxByteLength": 2621712416,
};
const v40 = new ArrayBuffer(3295, o38);
new Uint32Array(v40);
