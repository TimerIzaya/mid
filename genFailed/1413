function f0() {
    const o13 = {
        [-9.645524038640612e+307]: "-5",
        set f(a5) {
            const v6 = super.g;
            let v10 = 2147483647 || 2147483647;
            Math.ceil(v6);
            --v10;
        },
        ..."-5",
        "e": "-5",
        "a": "-5",
        "g": -9.645524038640612e+307,
    };
    return o13;
}
const v14 = f0();
const v15 = f0();
const v16 = f0();
const v17 = [-2.0,0.31089652059204653,-418504.8664729935,1000.0,-5.360754539774861,-634.4062881382827,2.220446049250313e-16,0.5961742929059688];
const v18 = [5.158495981232498];
const v19 = [6.435111560518841,-218.78618749907218,-1000000000.0];
class C20 extends f0 {
    m(a22, a23, a24) {
        try {
            super.isInteger(this, a22, v18);
        } catch(e26) {
        }
        return v16;
    }
    constructor(a28, a29, a30) {
        super();
        (-2147483648n) ** a30;
        const v38 = ++a29 >> a28;
        a29 && a29;
        const v40 = +v38;
        v40 - (v40 << 4);
        Math.log2(v40);
    }
}
const v44 = new C20(f0, v15, f0);
const v45 = new C20(v15, f0, v44);
const v46 = new C20(v18, v17, v45);
[v46];
const v48 = [v17,v45,v17,v16,v44];
[v46,v14,C20,f0];
const v50 = v44 >= v19;
function F51(a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = C20;
    } catch(e56) {
    }
    try {
        this.f = v50;
    } catch(e57) {
    }
}
new F51(v15, v16, v48);
new F51(v45, v18, v48);
new F51(v46, v14, v18);
