new Uint16Array(255);
new Float32Array(1475);
const v8 = new Float32Array(1024);
class C9 extends Uint16Array {
    static m(a11, a12, a13, a14) {
        %VerifyType(a13);
        const v15 = new Float32Array(a11);
        throw v15;
        delete v15[a13];
        return a11;
    }
    #valueOf(a21, a22) {
        delete v8[Float32Array];
        super.set(v8, a22);
        v8.__proto__;
        a22[6] = Float32Array;
        return a21;
    }
}
new C9();
const v27 = new C9();
const v28 = new C9();
class C29 extends Uint16Array {
    get g() {
        function f31(a32, a33) {
            try {
                new C9();
            } catch(e35) {
            }
        }
        new Promise(f31);
        return v28;
    }
    static [Float32Array];
    static g;
    2419 = 1024;
    10;
}
new C29();
new C29();
new C29();
for (let [v41,v42,...v43] of v27) {
    new Set();
}
[11,-4719];
const v47 = [7];
[28380,-4,34473,-1073741824];
v28.byteLength;
Object.defineProperty(C29, -1, { value: v47 });
new Date();
