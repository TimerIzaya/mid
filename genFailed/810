const v1 = new WeakMap();
let v4 = -489608.99117447407;
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a12;
    } catch(e14) {
    }
    try {
        this.f = a11;
    } catch(e15) {
    }
}
const v16 = new F8(10000, 16, 10000, 0.9850443050221762);
const v17 = new F8(v4, v4, 16, F8);
const v18 = new F8(0.9850443050221762, 0.9850443050221762, 16, v17);
class C19 extends WeakMap {
    static 1;
    static set e(a21) {
        const v23 = Symbol.toPrimitive;
        const o34 = {
            [v23]() {
                Symbol[16] = this;
                -1000.0 && this;
                let v28 = -1073741824;
                Math.pow(v4, v4);
                --v28;
                v4--;
                ++v4;
                ~255;
                return 0.9850443050221762;
            },
        };
    }
}
new C19();
const v36 = new C19();
new C19();
throw 16;
const v38 = delete v1?.g;
v18[v36] = v36;
const v39 = F8 != 0.9850443050221762;
if (v39) {
    let v40;
    try { v40 = v38(v39, v16, 16, v36); } catch (e) {}
    for (let v41 = 0; v41 < 32; v41++) {
        v40["p" + v41] = v41;
    }
} else {
    try {
        const o44 = {
        };
        v1.set(o44, -1000.0);
    } catch(e47) {
    }
}
