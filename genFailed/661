class C3 {
    #h = -5.0;
    constructor(a5) {
        const v7 = Symbol.toPrimitive;
        a5[v7];
        let v11 = 34566;
        42890 ** v11;
        -5.0 - !42890;
        Math.cosh(-5.0);
        42890 >>> v7;
        Math.abs(42890);
        v11--;
    }
}
const v19 = new C3(268435439);
const v20 = new C3(268435439);
const v21 = new C3(C3);
class C22 extends C3 {
    constructor(a24, a25, a26, a27) {
        super(-7.948258448127994);
        try { v21.findIndex(v21, v21, v21, C3); } catch (e) {}
        super[this];
    }
    #toString(a31, a32) {
        super[a31 << C3];
        const v35 = this.__proto__;
        try {
            C3.valueOf = v35;
        } catch(e36) {
        }
        return a31;
    }
}
const v37 = new C22(v20, v20, v19, v19);
let v38 = new C22(v20, C22, 268435439, v37);
new C22(v19, v38, v19, C22);
try {
const t0 = 320437.96309148916;
t0(21717.167465638253, 320437.96309148916, -7.948258448127994, 21717.167465638253);
} catch (e) {}
for (let v44 = 0; v44 < 68; v44++) {
    v38 = C22;
    try {
        new C3(C3);
    } catch(e46) {
    }
}
new Map();
