function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a5;
    } catch(e6) {
    }
    try {
        this.g = -4096;
    } catch(e7) {
    }
}
const v8 = new F3(-1);
new F3(-1);
const v10 = new F3(-4096);
class C11 extends F3 {
    static {
        super[this] = 9007199254740992;
    }
    static set e(a17) {
        const v18 = super.e;
        const v19 = [v18,this,-1,F3,v18];
        const v20 = [v10,v8,v19,v10,v19];
        [a17];
        try { v18(F3, ...v20, a17, ...v20); } catch (e) {}
        try { v8.entries(-4096, -4096); } catch (e) {}
    }
    #c = F3;
}
new C11();
const v25 = new C11();
const v26 = new C11();
const v27 = [-9007199254740990,1071847811,256,8,-65536,-59095,512,5,-59572];
const v28 = [-4294967296,-2147483649,-12,256];
const v29 = [-9007199254740991,65535,55096];
function f33(a34, a35, a36, a37) {
    a35["reduceRight"](a37, "reduceRight");
    return "reduceRight";
}
const v41 = f33("any", v28, v10, f33);
try {
    const v42 = [9007199254740992,F3,v25,v10,v41];
    C11.fuck(v42, v26, [9007199254740992,v27,v28,v29,v42]);
} catch(e45) {
}
