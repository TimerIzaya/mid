const v0 = [-2.220446049250313e-16,0.0,1000.0,5.0];
[7.490310508644058,0.00833008584316397,1000000.0];
const v2 = [-748.9556401390764,811.2725292625726];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a6;
    } catch(e7) {
    }
}
const v8 = new F3(v0, v2);
const v9 = new F3(v2, v2);
const v10 = new F3(v0, v2);
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a13;
    } catch(e17) {
    }
    try {
        this.h = v10;
    } catch(e18) {
    }
    try {
        this.e = v9;
    } catch(e19) {
    }
}
const v20 = new F11(v9, v8, v10, v8);
const v21 = new F11(v0, v9, v8, v9);
const v22 = new F11(v0, v20, v8, v20);
const v24 = new Set();
v8[34] ^= Set;
v0.length **= v24;
const v25 = v22.__proto__;
try { v25(v21, v0); } catch (e) {}
const o32 = {
    "maxByteLength": 2147483648,
};
const v34 = new SharedArrayBuffer(14, o32);
new Uint32Array(v34);
