function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a5;
    } catch(e7) {
    }
    try {
        this.c = "1";
    } catch(e8) {
    }
    try {
        this.g = "cZ";
    } catch(e9) {
    }
}
const v10 = new F3("cZ", "cZ");
new F3("cZ", "1");
new F3("1", "b");
class C13 extends F3 {
    #m(a15, a16) {
        const v18 = [];
        const v22 = [Reflect.apply(a15.toUpperCase, this, v18)];
        Reflect.apply(a15.match, Reflect, v22);
        return v18;
    }
    static [F3];
}
new C13();
new C13();
const v27 = new C13();
function f28() {
    return v10;
}
for (const v29 of "cZ") {
    Object.defineProperty("b", f28, { writable: true, value: v29 });
    const v30 = [1172040537];
    const v31 = [-13,15,-23027,-1208184107,4,-1073741824,-29789];
    [15509,2142004478,-591154507,9007199254740990,-1024,-8,-2,-1889434402];
    const o33 = {
    };
    try {
        o33.b = v27;
    } catch(e34) {
    }
    try {
        const o35 = {
        };
        o35.b = v27;
        o35.a = v30;
    } catch(e36) {
    }
    try {
        const o37 = {
        };
        o37.b = v27;
        o37.a = v30;
        o37.e = "cZ";
    } catch(e38) {
    }
    try {
        const o39 = {
        };
        o39.b = v27;
        o39.a = v30;
        o39.e = v31;
    } catch(e40) {
    }
}
