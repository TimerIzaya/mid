function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = true;
    } catch(e3) {
    }
    try {
        this.a = true;
    } catch(e4) {
    }
}
const v5 = new F1();
const v6 = new F1();
new F1();
class C11 {
    static {
        v5[this] += v6;
        const t17 = "resizable";
        t17[this] *= v5;
        [-2,536870912,-32109,719352460,1,-13884];
        [476893374,1860226708,9,-1024,39397,5,268435456,4096,-1768430646,597687924];
        [-53691,268435456,-1668051321,65537,1073741824,-58793];
    }
    static #valueOf(a20, a21, a22, a23) {
        try {
            a21.__proto__ = "resizable";
        } catch(e24) {
        }
        Math.exp(0.6168428688872499);
        +a22;
        --a22;
        let v31 = a22 % a22;
        Math.log2(0.6168428688872499);
        --v31;
        return true;
    }
}
new C11();
new C11();
const v36 = new C11();
v36[249];
const o43 = {
    "maxByteLength": 9,
};
const v45 = new SharedArrayBuffer(5, o43);
new Uint8ClampedArray(v45);
