class C3 {
    get h() {
        const v5 = this[this];
        try { v5.getTimezoneOffset(v5, v5); } catch (e) {}
        return v5;
    }
    p(a8, a9) {
        const v10 = this.h;
        const v11 = super[a8];
        try { v10.setPrototypeOf(-145.2166967643302, v11, a9, a9, 139.3915302352152); } catch (e) {}
        return a9;
    }
    a = 139.3915302352152;
}
const v13 = new C3();
let v14 = new C3();
const v15 = new C3();
class C16 {
    valueOf(a18, a19, a20, a21) {
        let v17 = this;
        const v27 = v13 + 34516;
        const v28 = v27 / v27;
        v17--;
        34516 * v27;
        return v28;
    }
}
new C16();
new C16();
const v33 = new C16();
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = C16;
    } catch(e39) {
    }
    try {
        this.g = a36;
    } catch(e40) {
    }
    try {
        this.c = -145.2166967643302;
    } catch(e41) {
    }
}
new F34(v14, -145.2166967643302, 139.3915302352152);
new F34(v13, 0.5025139306595234, -145.2166967643302);
new F34(v13, 0.5025139306595234, -145.2166967643302);
v13 + v15;
let {"a":v46,} = v14;
new F34(C3, 0.5025139306595234, 139.3915302352152);
v33 <= v46;
let v50 = 5;
const v51 = v50--;
v14++;
+v51;
Math.tan(v50);
!v50;
