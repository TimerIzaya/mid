const v2 = new Array(255);
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a5;
    } catch(e7) {
    }
}
const v8 = new F3(F3, Array);
const v9 = new F3(F3, v8);
const v10 = new F3(v8, F3);
class C11 {
    static n(a13, a14, a15) {
        a14[this];
        const v20 = 2 || v9;
        const v22 = 2 / +v10;
        Math.fround(v10);
        v20 ** 2;
        v20 * v20;
        return v22;
    }
    #d = v8;
    1408886972 = v2;
}
new C11();
const v27 = new C11();
const v28 = new C11();
const v29 = [42250,129,-7530];
[1,7,-9007199254740990,-256,-13011,13];
const v31 = [16447];
function f32() {
    return v31;
}
for (let v33 = 0; v33 < 32; v33++) {
    v27["p" + v33] = v33;
}
for (let [v36] of v31) {
    Object.defineProperty(v29, "g", { configurable: true, value: C11 });
    delete v28[Array];
}
Array(255);
%PrepareFunctionForOptimization(Array);
Array(255);
Array(255);
%OptimizeFunctionOnNextCall(Array);
Array(255);
