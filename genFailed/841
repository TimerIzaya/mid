const v2 = new Array(4);
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a5;
    } catch(e6) {
    }
    try {
        this.f = a5;
    } catch(e7) {
    }
}
const v8 = new F3(F3);
const v9 = new F3(v2);
const v10 = new F3(F3);
class C14 {
    static d = "-12183";
    static g = v8;
    static #o(a16, a17) {
        let v18;
        try { v18 = this.o(a16, a16, this, Array); } catch (e) {}
        const o22 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o22);
        return v18;
    }
}
new C14();
const v25 = new C14();
const v26 = new C14();
`-4096${v25}ZAAUP${v26}f${Array}Tx${v9}name`;
v10[9] = "-12183";
const o28 = {
    "apply": Array,
    "construct": Array,
    "defineProperty": Array,
    "get": Array,
    "isExtensible": Array,
    "set": Array,
    "setPrototypeOf": Array,
};
new Proxy("bigint", o28);
