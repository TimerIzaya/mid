const v5 = new Uint32Array(5);
new Uint8ClampedArray(9);
new Uint16Array(16);
class C12 {
    set c(a14) {
        let {"a":v15,"e":v16,...v17} = a14;
        function f18() {
            return v17;
        }
    }
    b = "function";
    static b;
    get c() {
        const v20 = super.d;
        ("K").length;
        v20?.["K"];
        const v24 = Symbol.iterator;
        const o33 = {
            [v24]() {
                let v26 = 10;
                const o32 = {
                    next() {
                        v26--;
                        const v30 = v26 == 0;
                        const o31 = {
                            "done": v30,
                            "value": v26,
                        };
                        return o31;
                    },
                };
                return o32;
            },
        };
        return "function";
    }
}
new C12();
new C12();
new C12();
for (let v37 = 0; v37 < 32; v37++) {
    const t41 = "maxByteLength";
    t41["p" + v37] = v37;
}
let v40 = 0;
do {
    "function" != Uint16Array;
    const v44 = [("function")["K"]];
    Reflect.apply(v5.findLast, C12, v44);
    v40++;
} while (v40 < 3)
