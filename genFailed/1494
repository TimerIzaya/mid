const v2 = new Float32Array(3);
let v3 = 15;
const v5 = new Uint8ClampedArray(v3);
const v8 = new Uint32Array(256);
class C9 extends Float32Array {
    m(a11, a12, a13, a14) {
        const v17 = 256 - 65537;
        const v18 = +65537;
        v17 || v18;
        256 - v18;
        return v5;
    }
    static #p(a22, a23, a24) {
        let v25;
        try { v25 = a24(a23, this, a22, this, Uint32Array); } catch (e) {}
        for (let v26 = 0; v26 < 66; v26++) {
            ({"buffer":v3,"byteLength":v26,} = v2);
            v25 %= Uint32Array;
        }
        Math.atanh(a23);
        Math.cos(this);
        -2147483649 - a23;
        Math.sqrt(-7.962576442308788e+307);
        Math.atan2(-7.962576442308788e+307, -2147483649);
        ~-7.962576442308788e+307;
        a23 ^ -2147483649;
        return v8;
    }
}
const v38 = new C9();
new C9();
const v40 = new C9();
try {
    v40.m(v2, -1285863486n, Uint32Array, -1285863486n);
} catch(e46) {
}
const o47 = {
};
new Proxy("symbol", o47);
v38[8];
