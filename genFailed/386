const v0 = [-1.7976931348623157e+308,-1.0,1000.0,8.918734510443526e+307,0.8002562454750687,-185.0314743511641];
const v1 = [2.2250738585072014e-308,0.32656333468890564,5.0,-4.0];
[-2.0,-1000000000000.0,5.0,1e-15,958950.0248478402,-0.0,2.220446049250313e-16];
class C9 {
    [-9007199254740992n] = -858.2687832827692;
    #toString(a11, a12, a13, a14) {
        if (!a11) {
            v1[NaN] = v0;
        } else {
            let v16;
            try { v16 = v1.copyWithin(a13, -9007199254740992n, -9007199254740992n); } catch (e) {}
            Reflect.construct(v16, [a13,a14,this], v16);
        }
        return NaN;
    }
}
let v20 = new C9();
new C9();
const v22 = new C9();
v20 = v22;
let v23 = 10;
for (; v23--;) {
    Math.round(-536870912n);
    Math.sign(-536870912n);
    const v30 = +(v23 ^ v1);
    (-536870912n >>> v1) + v23;
    v30 << v30;
}
