class C3 {
    static o(a5) {
        a5[244] = a5;
        Object.defineProperty(this, -1, { enumerable: true, value: -9 });
        return -2.220446049250313e-16;
    }
    static g = -65536;
    static #d;
    h = -65536;
    a = 0.9594376104298966;
}
const v9 = new C3();
new C3();
const v11 = new C3();
const v12 = /(ab|cde)\1\cA/gvds;
const v13 = /s9XF(?<=)*/gi;
const v14 = /((?:a+){0,0})/vdims;
function f15(a16, a17, a18, a19) {
    const o35 = {
        p(a21, a22, a23) {
            a21[-65536];
            a17[-9] <<= -65536;
            return v11;
        },
        "b": v14,
        get a() {
            function F26(a28, a29, a30) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = a30;
                } catch(e31) {
                }
            }
            new F26(v9, a16, v9);
            new F26(v11, a17, v11);
            const v34 = new F26(v11, a16, a17);
            return v34;
        },
    };
    return o35;
}
const v36 = f15(v11, v9, v13, v12);
f15(v9, v11, v12, v12);
f15(v11, v9, v12, v12);
function* f39(a40, a41, a42) {
    const v43 = [-58623,255,2];
    const v44 = [257,47467];
    [-13,-4,9007199254740992,-16,1617784689,268435441];
    yield* [v44,f15,v43];
    return v36;
}
f39(v14, v14, f15);
try {
    v9.fuck("isConcatSpreadable", C3, -1.7976931348623157e+308);
} catch(e51) {
}
