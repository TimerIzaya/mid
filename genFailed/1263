const v2 = new Array(4);
function f3(a4, a5) {
    const o15 = {
        __proto__: a5,
        get c() {
            a4 |= 4;
            const o7 = {
            };
            try {
                o7.c = this;
            } catch(e8) {
            }
            try {
                const o9 = {
                };
                o9.c = this;
                o9.a = this;
            } catch(e10) {
            }
            try {
                const o11 = {
                };
                o11.c = this;
                o11.a = this;
                o11.h = this;
            } catch(e12) {
            }
            try {
                const o13 = {
                };
                o13.c = this;
                o13.a = this;
                o13.b = this;
            } catch(e14) {
            }
            return a4;
        },
    };
    return o15;
}
const v16 = f3(Array, f3);
const v17 = f3(f3, v2);
const v18 = f3(v17, 4);
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 4;
    } catch(e25) {
    }
    try {
        this.g = a21;
    } catch(e26) {
    }
    try {
        this.h = a21;
    } catch(e27) {
    }
}
const v28 = new F19(v16, v17, v2, v16);
const v29 = new F19(v16, v28, v16, v28);
new F19(v28, v28, 4, v18);
const v35 = new Map();
const v36 = v16 == v35;
const v37 = v36 ? v16 : v35;
F19 = f3;
const v38 = v29 << v36;
v38 >> "number";
v28[3837347293] &= v38;
v37[f3];
const o43 = {
    "maxByteLength": 6,
};
const v45 = new ArrayBuffer(2, o43);
new Int32Array(v45);
