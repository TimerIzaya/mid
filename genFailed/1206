const v1 = new Map();
const v3 = new Map();
function f7(a8, a9, a10, a11) {
    const o19 = {
        get e() {
            Object.defineProperty("ITo", "length", { value: "symbol" });
            super["symbol"];
            a9["trimStart"]();
            return -9007199254740991;
        },
        7: v3,
        "d": Map,
    };
    return o19;
}
const v20 = f7("symbol", "symbol", "-44823", "symbol");
f7("-44823", "-44823", "-44823", "ITo");
const v22 = f7("-44823", "ITo", "ITo", "ITo");
class C23 {
    #toString(a25, a26, a27) {
        try {
            a26.#toString();
        } catch(e29) {
        }
        return this;
    }
    toString(a31, a32, a33, a34) {
        try {
            a34.length = this;
        } catch(e35) {
        }
        return v1;
    }
}
const v36 = new C23();
new C23();
new C23();
switch (C23) {
    case v22:
        ("-44823")[v20];
        break;
}
if (v36 <= v20) {
    v20[WeakRef];
} else {
    C23 >= Map;
}
