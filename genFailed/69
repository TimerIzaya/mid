const v0 = [];
function f1() {
    const o11 = {
        "g": v0,
        set b(a3) {
            super.e = a3;
            let v4;
            try { v4 = a3(this, v0, this); } catch (e) {}
            let v5;
            try { v5 = new a3(v0, a3, v4); } catch (e) {}
            v5[v4] = v0;
            const o9 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o9);
        },
    };
    return o11;
}
const v12 = f1();
f1();
f1();
const v15 = [-325.3588835741998,-20342.920051137335,-2.749263552462313e+307,-1.0,-1000000000.0,-Infinity,1.0,1000.0,-1.1069495730023126e+308,-2.220446049250313e-16];
[-7.741588137702358];
const v17 = [11191.984215289936,0.23013730205534422,1.0,1.0,402.3829241691217];
[-488693.68364851765];
const v19 = [1000000000000.0,-3.9668479299935395,-322.6083324701614,-9.142733275706875e+307,4.0,1.4509409786552694e+308,565086.5754914111];
[2.220446049250313e-16,0.21403088664678038,0.5332440692744629];
const v22 = [];
for (const v24 of Reflect.construct(f1, v22, f1)) {
    function F25(a27, a28, a29) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a27;
        } catch(e30) {
        }
        try {
            this.b = a27;
        } catch(e31) {
        }
    }
    new F25(v17, v15, v24);
    new F25(v22, v0, v15);
    new F25(v19, v12, v15);
}
