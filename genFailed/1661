let v2 = -14n;
class C3 {
    static #f;
    static #o(a5) {
        Math.abs(this);
        ~v2;
        v2--;
        return 2069413516n;
    }
    [-1] = -1n;
    static 10;
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
function f18(a19, a20, a21) {
    const o45 = {
        [-1n](a23, a24, a25) {
            Math.acos(268435439);
            Math.log(a23);
            Math.ceil(2.0);
            return a19;
        },
        "d": v16,
        set g(a33) {
            [2069413516n];
            [v2,v2];
            const v36 = [v16,a19,v16];
            try { v36.findIndex(a19); } catch (e) {}
            const o43 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o43);
        },
    };
    return o45;
}
f18(v16, -1n, v16);
const v47 = f18(2069413516n, v2, v15);
f18(1000n, 2069413516n, f18(v16, 2069413516n, C3));
v15[d8] = -12n;
delete v47[v17];
let v58 = 0;
while (v58 < 8) {
    v17[1];
    const o64 = {
        "maxByteLength": 4096,
    };
    const v66 = new SharedArrayBuffer(1761, o64);
    new Float32Array(v66);
    v58++;
}
