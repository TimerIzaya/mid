[1.0,Infinity];
const v1 = [0.5357773118200135,2.220446049250313e-16,1000000000.0,-945189.8534774961,-8.189885140860411e+307,0.4891217583606332];
[3.0,0.8657837358529871,1000000000000.0,0.02742339496391155,5.955249923743358,0.724768365710559,-4.0,0.33741963717153634,1.0,3.53956420255821e+307];
let v3 = 2202;
const v5 = new BigInt64Array(v3);
new Uint16Array(12);
let v9 = 3023;
const v11 = new Uint32Array(v9);
class C12 {
    #f = v5;
    #m(a14, a15, a16) {
        v1[v5] = v9;
        var a = Uint32Array;
        a16 || v5;
        return 2099947586;
    }
    static set e(a22) {
        super.d = a22;
        const v23 = v5[11];
        this[8] = v23;
        super[BigInt64Array];
        super.a;
        a22 = v9;
        c = v5;
        v3 >>>= v23;
    }
}
const v26 = new C12();
new C12();
const v28 = new C12();
let v29;
try { v29 = v11(v28); } catch (e) {}
v29[Symbol.matchAll] = v3;
let v32 = 0;
do {
    v26[91] += 12;
    const v36 = -32202 + 0.5745786585454715;
    v9--;
    ++v9;
    -v36;
    Math.pow(-32202, -32202);
    +-32202;
    v32++;
} while (v32 < 0)
