const v0 = [0.08058298567166444,1.5612370650835856e+308,0.0];
const v1 = [0.6528850798311586,-1000000000000.0,1.7976931348623157e+308,1.7976931348623157e+308,-0.0];
const v2 = [237.94071609706498,-1.7976931348623157e+308,0.694879452778971,0.5681842668772874,6.930399700452352];
const v5 = new Uint8ClampedArray(44);
let v6 = 222;
const v8 = new Int8Array(v6);
const v11 = new BigInt64Array(983);
class C12 extends Uint8ClampedArray {
    static set f(a14) {
        v2[163] = a14;
        super[v1];
    }
    static o(a17, a18, a19) {
        try { new BigInt64Array(44, 44, ...BigInt64Array, a19, a17, a17); } catch (e) {}
        v1[268435440] ||= v5.length;
        return 44 instanceof BigInt64Array;
    }
    e = 983;
    static [v0] = v8;
}
const v23 = new C12();
const v24 = new C12();
const v25 = new C12();
for (const v26 in v2) {
    delete v24[C12];
    v11[8] = Uint8ClampedArray;
}
if (v25 <= BigInt64Array) {
    try {
        v24.valueOf = v25;
    } catch(e29) {
    }
} else {
    v2[4] = v23;
    v11.buffer |= v6;
    v6 = 44;
}
