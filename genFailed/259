class C3 {
    static #c;
    constructor(a5, a6) {
        const t3 = 2.220446049250313e-16;
        t3[1] = a5;
        try {
            ("number").concat(2.220446049250313e-16, a6, a5, this);
        } catch(e8) {
        }
        try { a6.entries(115838442, "number"); } catch (e) {}
    }
    #h = 2.220446049250313e-16;
    8;
    static [115838442];
    static 3 = "number";
}
new C3(C3, 115838442);
const v12 = new C3(115838442, "number");
new C3("number", "number");
const v14 = [9007199254740990];
const v15 = [-44309,9,6109,512,0,-1073741824,17176,-436665693,-4,-1869709240];
const v16 = [2,268435456,62507,0,255,1073741825,-13178,-12,-9518,1211658278];
class C17 {
    129;
    static n(a19, a20, a21, a22) {
        a19[this] &&= C3.c;
        v16.__proto__;
        Math.trunc(-0);
        Math.tan(v15);
        Math.acos(0);
        return 0;
    }
    [v12];
}
const v31 = new C17();
const v32 = new C17();
new C17();
v31[2.220446049250313e-16] = C3;
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = C17;
    } catch(e38) {
    }
    try {
        this.e = v14;
    } catch(e39) {
    }
}
new F34(v15, v14);
new F34("number", v12);
new F34(v32, v16);
