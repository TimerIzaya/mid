const v0 = [7,-867244108,-26042,65537,63220,51193];
const v1 = [536870887,827135197,16075,-256,1650474754,-65536,15310];
const v2 = [4294967296,-823535080,1,16,-1828517605,2000179347,1063184519];
function f3() {
    return v2;
}
function f4(a5) {
    const o23 = {
        get b() {
            try {
                f3();
                -0n;
                const o12 = {
                    "execution": "async",
                };
                gc(o12);
            } catch(e14) {
            }
            return v1;
        },
        "arguments": v1,
        "h": f3,
        "c": v1,
        toString(a16, a17, a18) {
            class C19 {
            }
            return C19;
            a5?.__defineSetter__;
            return v0;
            return a18;
        },
        "unicode": v2,
        "MAX_VALUE": v1,
        "d": v2,
        next() {
            const o22 = {
            };
            return o22;
        },
    };
    return o23;
}
const v24 = f4(v2, v0, v2);
const v25 = f4(v0);
const v26 = f4(v2);
class C27 extends f4 {
    4;
    static get g() {
        super[this] = this;
        Object.defineProperty(v24, 3391, { writable: true, get: f3 });
        return this;
    }
    constructor(a30, a31, a32, a33) {
        super(v2);
        a32?.[13];
        let v35 = v26 / a33;
        ({"c":v35,} = v35);
    }
}
const v36 = new C27(v24, v25, f3, v0);
const v37 = new C27(v24, v36, v0, v1);
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    function F44(a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
        function f48() {
            const v49 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
            v49.length >>>= -65536;
            return v49;
        }
        f48();
        try {
            eval("boolean");
            function F55(a57) {
                if (!new.target) { throw 'must be called with new'; }
                const v58 = this.constructor;
                try { new v58(); } catch (e) {}
                try {
                    const v62 = new Int32Array(12);
                    for (const v63 in v62) {
                    }
                } catch(e64) {
                }
            }
            new F44(a41, a46);
        } catch(e66) {
        }
    }
    new F44();
    let v68 = 1836424012;
    v68--;
    const v72 = new Float64Array(1);
    [v72];
}
new C27(v36, v37, f3, v1, v2, f4, v24);
this.encodeURIComponent("1073741824");
