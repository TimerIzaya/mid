const v1 = new Set();
function f2(a3) {
    class C5 {
        #m(a7, a8) {
            function f9() {
                return a8;
            }
            super[a8] = "f";
            %VerifyType(a8);
            return f9;
        }
        static c;
    }
    const v10 = new C5();
    const v11 = new C5();
    class C12 {
        p(a14) {
            this.g ^= this[8];
        }
        static #n(a17, a18, a19, a20) {
            class C21 {
                4;
                static a;
            }
            C21();
            C21();
            C21();
        }
        7 = v11;
        #a = v10;
    }
    return "f";
}
v1.valueOf = f2;
/(s3z[\cZ])/gi;
const v26 = /L/uiy;
const v27 = /Ca{0,1}?a\b!/gdims;
v27.lastIndex = v27;
const v31 = 64n ^ 64n;
v31 != v31;
try { new Uint8ClampedArray(v26, v27, 14); } catch (e) {}
const v36 = new Uint8ClampedArray(14);
v36.BYTES_PER_ELEMENT = v36;
try { new Int8Array(Int8Array, Int8Array, v36); } catch (e) {}
const v40 = new Int8Array(1024);
v40[290];
const v42 = v40.byteOffset;
v42 >>> v42;
const v46 = new Int16Array(247);
function f47() {
    return f2;
}
function f48(a49) {
    function f52(a53, a54, a55) {
        const o56 = {
            "h": a55,
        };
        return o56;
    }
    f52(1000000.0, -3.9870582640049523, 1000000.0);
}
Object.defineProperty(v46, Symbol.toPrimitive, { writable: true, configurable: true, get: f47, set: f48 });
function F60() {
    if (!new.target) { throw 'must be called with new'; }
}
function f62(a63, a64) {
    return 3521;
}
F60.toString = f62;
const v67 = new Date();
try { v67.setFullYear(Int8Array, v46, v1); } catch (e) {}
const v69 = v67?.valueOf;
v69.name = v69;
try { new v69(); } catch (e) {}
v67.setDate(F60);
