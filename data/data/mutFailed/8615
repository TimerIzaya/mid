function f3(a4, a5) {
    try { Date.now(); } catch (e) {}
    Date.prototype;
    class C9 {
        static {
            for (let v11 = 0; v11 < 25; v11++) {
                function f12() {
                    return C9;
                }
                const v13 = [601759695];
                v13.g = v13;
                const v14 = [1073741824,1073741823,1376142744,1073741825];
                function f16(a17, a18, a19, a20) {
                    a18 >>> a18;
                    const v22 = a17.length;
                    v22 / v22;
                    a18 >= a18;
                    function f26() {
                        return a17;
                    }
                    const v27 = f12();
                    v27.e = v27;
                    Int8Array.BYTES_PER_ELEMENT;
                    const v30 = new Int8Array();
                    const v33 = new Uint32Array(4);
                    const v34 = [v33];
                    v34[0] = v34;
                    536870887 >> 536870887;
                    const v38 = BigUint64Array * 536870887;
                    v38 ** v38;
                    function f40(a41, a42) {
                        return v27;
                    }
                    const v43 = f40();
                    v43.length = v43;
                    v43.a = v43;
                    const v44 = v30.buffer;
                    v44.maxByteLength = v44;
                    v44.detached;
                    Object.defineProperty(v44, "constructor", { writable: true, configurable: true, value: Date });
                    const v47 = new Int8Array();
                    try { v47.entries(); } catch (e) {}
                    v44.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f26);
                    try { ("find").blink(); } catch (e) {}
                    let v52;
                    try { v52 = v14["find"](..."find", a20, ...v13, ...v14, ...522675525n); } catch (e) {}
                    Symbol.for(Symbol.for(Symbol("find").description).description);
                    const v62 = new Uint8ClampedArray();
                    try { v62.findLast(v38); } catch (e) {}
                    const o64 = {
                        ...v62,
                    };
                    v52 <= a19;
                    return arguments;
                }
                for (let v66 = 0; v66 < 5; v66++) {
                    f16(this, v66, v66, v66)[2];
                }
            }
        }
    }
    const o75 = {
        ..."UmjI",
        ...a4,
        set b(a70) {
            try {
                this.fuck(-17850n, undefined, a4);
            } catch(e74) {
            }
        },
        [a5]: "LSy",
        "c": a4,
    };
    o75[3];
    return o75;
}
f3.caller;
f3(f3("LSy", "UmjI"), "LSy");
f3("LSy", "LSy");
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v83 = new Float32Array(512);
10 / 10;
new Uint16Array(10);
const v89 = -851;
BigInt64Array.g = BigInt64Array;
new BigInt64Array(851);
127 - 127;
const v95 = new Float32Array(127);
try { v95.with(BigInt64Array, BigInt64Array); } catch (e) {}
v95[94] = v95;
Uint8Array.e = Uint8Array;
new Uint8Array(2);
try { new Int8Array(2, 2, f3); } catch (e) {}
let v103;
try { v103 = Int8Array.of(); } catch (e) {}
try { v103.entries(); } catch (e) {}
const v105 = new Int8Array(8);
const v106 = v105[4];
v106 / v106;
417275.45700312406 * 417275.45700312406;
v95[7] = v106;
let {"byteLength":v113,"byteOffset":v114,"length":v115,} = v83;
v113 + v113;
v114 * v114;
v115++;
2147483649 >>> 2147483649;
let v121 = -20155 - -20155;
v121--;
function F124(a126, a127, a128) {
    if (!new.target) { throw 'must be called with new'; }
    const v129 = this?.constructor;
    try { new v129(Float32Array, v89, v89); } catch (e) {}
    a128 === a128;
    const v132 = a128 + a128;
    v132 >>> v132;
    const v134 = this?.constructor;
    v134.prototype = v134;
    try { new v134(a127, Uint8Array, a127); } catch (e) {}
    try {
        this.a = Uint8Array;
    } catch(e136) {
    }
    try {
        this.f = v95;
    } catch(e137) {
    }
    try {
        this.h = 8;
    } catch(e138) {
    }
}
F124.a = F124;
new F124(127, 2147483649, 8);
