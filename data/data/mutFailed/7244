function f5(a6, a7, a8, a9) {
    function f15() {
        function f16() {
            return f16;
        }
        return f16;
    }
    Symbol[Symbol.iterator] = f15;
    2147483648 ^ 2147483648;
    const v25 = new Int32Array(Symbol);
    v25[8];
    v25[3];
    return "find";
}
f5(-56610, 522675525n, f5, -56610);
f5(7.589647165982214, 1073741825n, 522675525n, 411585671n);
const v33 = [-4.293079136321913,0.17656020689165153,-1.3556266805398147e+308];
try { v33.shift(); } catch (e) {}
const v35 = [-787.1891101240572,850853.4299821614,-3.0,2.220446049250313e-16,-2.220446049250313e-16];
let v36;
try { v36 = v35.entries(); } catch (e) {}
const v37 = [1.792804416496935,0.26903185948539354,1.0,-5.0,211888.24497612054,-4.877239458901046,Infinity,-Infinity,3.441037345204659,1.379268279717733e+308];
class C38 {
}
const v39 = new C38(v35);
const v40 = new C38();
const v43 = new BigInt64Array(129);
const v44 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v45;
try { v45 = v44.some(); } catch (e) {}
const v46 = [-1.7976931348623157e+308];
function f47(a48, a49, a50, a51) {
    const o65 = {
        toString(a53, a54, a55) {
            let v56;
            try { v56 = this.toString(a54, v45, a53); } catch (e) {}
            function f58(a59, a60, a61) {
                return v39 == v40 ? v39 : v40;
            }
            f58(255n, v56, a54);
            a50[a49] = a48;
            return v45;
        },
    };
    return o65;
}
f47(v43, 129, v46);
new Date();
class C69 extends Date {
    f;
    static #f = v35;
    toString(a71, a72, a73, a74) {
        let v76 = 560367367;
        BigUint64Array.atan2(-7.588364219438885, this);
        v76++;
        BigUint64Array.acosh(-7.588364219438885);
        return -7.588364219438885;
    }
    g = v33;
    [-9007199254740992] = v37;
    static #g = 9223372036854775807;
}
C69.prototype;
new C69();
new C69();
new C69();
44 * 44;
new Uint16Array(44);
new Float64Array(128);
new Uint8Array(64);
const v97 = [-1000000.0,1.2447871437442695e+308,2.0,-1.7099107331057683e+308,0.0];
for (let i99 = 0;
    (() => {
        i99 - i99;
        const v102 = i99 < 1;
        v102 && v102;
        return v102;
    })();
    i99 % i99, i99++) {
}
function F108() {
    if (!new.target) { throw 'must be called with new'; }
    const v110 = this.constructor;
    function F111() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v114 = /W(jy2)/udy;
    for (let v115 = 0; v115 < 5; v115++) {
        v115 === v114;
    }
    v110.length;
    let v118;
    try { v118 = new v110("constructor", "constructor", v110, v110); } catch (e) {}
    const v119 = this.valueOf(F108);
    switch (v97) {
        case "constructor":
            v119 < v118;
            break;
    }
}
new F108();
new F108(Float64Array, v36);
