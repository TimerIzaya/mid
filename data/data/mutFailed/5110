class C3 {
    static 257 = -10;
    4;
    p(a5, a6) {
        const o7 = {
        };
        const v9 = new Proxy(this, o7);
        return super[v9];
    }
}
C3[257];
new C3();
new C3();
new C3();
const v16 = -4294967295 - 147;
new Int32Array(-40086);
-206;
function f22() {
    C3.g /= 206;
    for (const v24 in "1024") {
    }
    return "1024";
}
BigUint64Array[Symbol.toPrimitive] = f22;
try { new BigUint64Array(-10, BigUint64Array, -10); } catch (e) {}
const v28 = new BigUint64Array(206);
v28[Symbol.toPrimitive] = f22;
const v32 = 1024 != 1024;
const v34 = Uint32Array?.constructor;
try { new v34(BigUint64Array); } catch (e) {}
new Uint32Array(1024);
const v38 = new BigUint64Array();
4096 - 4096;
const v42 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v42[Symbol.toPrimitive] = Symbol;
function f45(a46, a47) {
    v28 < 206 ? v28 : 206;
    return a46;
}
v42[Symbol.toPrimitive] = f45;
Uint32Array.BYTES_PER_ELEMENT;
const v54 = new Uint32Array();
Object.defineProperty(v54, "constructor", { writable: true, configurable: true, enumerable: true, value: Symbol });
let v55 = -4294967297n;
v55--;
const v57 = [601759695];
try { v57.toReversed(); } catch (e) {}
const v59 = [1073741824,1073741823,1376142744,1073741825];
function f61(a62, a63, a64, a65) {
    const v66 = a62?.keys;
    try { new v66(); } catch (e) {}
    function f68() {
        const v69 = [a62,v16];
        [a63,a64,[v69,a64,v69],a63];
        return v69;
    }
    try { new v32(); } catch (e) {}
    a62.constructor = f68;
    const v73 = a62?.constructor;
    v73.g = v73;
    let v74;
    try { v74 = new v73(a62, a65, v59); } catch (e) {}
    arguments.length;
    function f77() {
        try { ("Vre").charAt(4096); } catch (e) {}
        let v80;
        try { v80 = ("Vre").codePointAt(v42); } catch (e) {}
        v80 >> v80;
        v80 ^ v80;
        let v83 = Float64Array;
        try { new v83(f45, f45, f45); } catch (e) {}
        v83 = a63;
        b = v42;
        let v85 = v42.length;
        v85++;
        try {
            v59.forEach(a63);
        } catch(e88) {
            e88.message;
        }
        const o100 = {
            "c": v55,
            "c": v57,
            valueOf(a91, a92) {
                return a91;
            },
            1073741824: v54,
            [v55](a94, a95, a96, a97) {
                eval();
            },
            "arguments": 5,
            256: a65,
        };
        o100[1073741824] = o100;
        o100[256];
    }
    f77.e = f77;
    f77();
    try { new Array(v74); } catch (e) {}
    const v105 = Array();
    try { v73.findLast(v38); } catch (e) {}
    v105.unshift();
    let v109;
    try { v109 = Int8Array.of(); } catch (e) {}
    try { v109.entries(); } catch (e) {}
    const v111 = new Int8Array();
    const v112 = v111.buffer;
    v112.constructor = f45;
    const v114 = v112.slice(2147483648);
    try { v114.slice(v114, Int8Array); } catch (e) {}
    const v118 = new Int32Array(1024);
    const v119 = v118[3];
    v119 - v119;
    v119 + v119;
    1024 * v119;
    for (let v123 = 0; v123 < 5; v123++) {
    }
    %OptimizeFunctionOnNextCall(f77);
    try { v59["find"](..."find", a65, ...v57, ...v59, ...522675525n); } catch (e) {}
}
f61.arguments;
for (let v127 = 0; v127 < 10; v127++) {
    f61(v54);
}
%OptimizeFunctionOnNextCall(f61);
f61(5, v38, 522675525n, f61);
