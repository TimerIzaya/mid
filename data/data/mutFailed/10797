[-868566327,[-868566327,-488881184,-868566327]];
[-65535];
new Uint16Array(10);
new Float64Array(16);
+(-1.252027415501717e+308 | -32070);
const v18 = new Float64Array(-868566327);
new Int16Array(v18);
new Uint8ClampedArray(4096);
function F25(a27) {
    if (!new.target) { throw 'must be called with new'; }
}
const v28 = new F25(536870889);
with (v28) {
    let v29 = 10;
    const v30 = /(x)(x)(x)\1/uis;
    function f31(a32, a33, a34, a35) {
        const o42 = {
            4294967295: a32,
            2: a34,
            __proto__: a35,
            [v30](a37, a38, a39, a40) {
                super.test();
            },
        };
        return a32;
    }
    f31();
    for ((() => {
            function f44(a45, a46) {
                const v50 = new Uint16Array(3225);
                for (const v51 of v50) {
                    const v53 = 9007199254740991 * v51;
                    v53 | v53;
                }
            }
            function F55(a57, a58, a59, a60) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v61 = new F55();
            v61.valueOf = f44;
            "" >= v61;
        })();
        v29--;
        ) {
    }
}
for (let [v66,...v67] of "atan2") {
}
const v70 = new Float32Array(2);
const o87 = {
    set d(a72) {
        for (let v73 = 0; v73 < 25; v73++) {
        }
    },
    "c": Uint8ClampedArray,
    "type": "atan2",
    o(a75) {
        const o77 = {
        };
        o77.type = o77;
        gc(o77);
    },
    m(a80) {
    },
    set d(a82) {
        for (let v83 = 0; v83 < 25; v83++) {
        }
    },
    n(a85, a86) {
        return 2;
    },
    "type": "atan2",
    4: "atan2",
};
const o89 = {
};
const v91 = new Proxy(Uint32Array, o89);
0 < 6;
("D")[0];
o87["o"](o87, Uint32Array, "o", "o", v91);
const v100 = new Int32Array(v70, 2);
const v101 = v70;
const v102 = v100.fill(...v101);
try { v102.lastIndexOf(v102); } catch (e) {}
