const v6 = [-1024,-9223372036854775807,-9223372036854775807,25694,-1024];
[v6];
[v6,"function",-9223372036854775807,"species"];
class C12 {
    #valueOf(a14, a15, a16, a17) {
        const o18 = {
            "g": this,
            2147483647: "function",
        };
        const v21 = Symbol.iterator;
        const o30 = {
            [v21]() {
                let v23 = 10;
                const o29 = {
                    next() {
                        v23--;
                        const v27 = v23 == 0;
                        const o28 = {
                            "done": v27,
                            "value": v23,
                        };
                        return o28;
                    },
                };
                return o29;
            },
        };
        return 25694;
    }
}
const v31 = new C12();
new C12();
new v31();
function f34() {
}
const v36 = [-4563];
new Int32Array(v36);
for (const v39 in v36) {
}
const v40 = new Map();
function f41() {
    return v40;
}
Infinity + Infinity;
-3.0 >>> -3.0;
const v47 = v40 < v40;
v47 || v47;
const v49 = [-1000000.0,-3.1923473210656557,-1.721355656202141e+308,4.0,0.3955838142797843,-3.0,1.1463753586867827e+308];
function f50(a51) {
    const o52 = {
    };
    o52.g = o52;
    o52[213] = v49;
    const v53 = o52[213];
    try { v53.toString(); } catch (e) {}
    return v53;
}
const v55 = [-3.0,Infinity,f41,4.0];
try { v55.toLocaleString(); } catch (e) {}
const v57 = [Map,f34,f41,Map,f41];
const v58 = [Map,v55,v55,v57,f34];
new Set();
new Int16Array(Int16Array, Int16Array, Int16Array);
/[.ma\Sc]/vdimsy.exec(Int16Array);
new f50(1000);
const v72 = C12();
try { v72.findLast(v58); } catch (e) {}
const v75 = Array(1000);
try { v75.shift(); } catch (e) {}
const v77 = new BigUint64Array(257);
const v78 = Uint8Array in v77;
const v79 = v78 && v78;
v79 || v79;
"f" == "f";
const v89 = [];
const v90 = [];
const v91 = [1000.0];
function f92(a93, a94) {
    const o98 = {
        [a94]: v89,
        "h": v90,
        get e() {
            a93[1000.0] >>= -4.0;
            Date();
        },
        [227.40634637175117]: 227.40634637175117,
        [a93]: v90,
    };
    return o98;
}
f92(v91, -4.0);
%PrepareFunctionForOptimization(f92);
f92(v91, -4.0);
f92(v91, -4.0);
%OptimizeFunctionOnNextCall(f92);
f92();
for (let v103 = 0; v103 < 10; v103++) {
    const t97 = "f";
    t97[1073741824] = 4294967296;
}
const v104 = new Float32Array(4);
v104[3] = v104;
4096 | 4096;
const o107 = {
};
o107.e = f50;
Float64Array.e = Float64Array;
const v110 = new Float64Array(10);
v110[1] = v110;
try { new Uint8Array(v77, Uint8Array, v77); } catch (e) {}
Uint8Array.e = Uint8Array;
new Uint8Array(4096);
const v114 = Float32Array.name;
const v115 = new Float32Array(141);
v115[37];
const v118 = 7 + 7;
v118 >>> v118;
BigInt64Array.length = v114;
new f50();
try { Array.o(); } catch (e) {}
function f123(a124, a125) {
    return f123;
}
const v126 = f123.prototype;
5 + 5;
const v129 = [v49,v49,v49,v49,v49];
function F130(a132, a133) {
    if (!new.target) { throw 'must be called with new'; }
    const v136 = this.valueOf(this.propertyIsEnumerable(a132), v129, v129).constructor;
    let v137;
    try { v137 = new v136(a132); } catch (e) {}
    a132.lastIndexOf(v137, a132);
}
try { new Uint16Array(v49, Map, v114); } catch (e) {}
new Uint16Array(v126);
function f142() {
    return f142;
}
new BigInt64Array(7);
let v144 = -2n;
v144--;
function f147() {
    return 536870887n;
}
let v148;
try { v148 = f147(); } catch (e) {}
v148 + v148;
let v150;
try { v150 = f147(); } catch (e) {}
v150++;
v150 * v150;
2 === 2;
Map.prototype;
new Map();
const v158 = 24560 ^ 24560;
v158 & v158;
-1000000000000.0 >>> -1000000000000.0;
Uint8Array.prototype = Uint8Array;
function F163() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    try { Date.parse(f34); } catch (e) {}
    const v168 = Date();
    v168[47];
    let v170;
    try { v170 = v168.small(); } catch (e) {}
    const v171 = v170?.slice;
    try { new v171(v57, v57); } catch (e) {}
    for (const v175 of Array(19793)) {
    }
}
const v176 = new F163();
v176.b = v129;
const v177 = v176?.constructor;
v177.c = v177;
try { new v177(); } catch (e) {}
function F179(a181, a182, a183) {
    if (!new.target) { throw 'must be called with new'; }
    const v184 = this?.__defineGetter__;
    try { new v184(v77, v77); } catch (e) {}
}
class C187 {
    constructor(a189) {
        for (const v190 of "bigint") {
        }
    }
}
class C191 extends C187 {
}
const o192 = {
};
o192.h = o192;
