const v0 = [-14,-14,127,1524183794,-8,-1137982022];
function f1(a2) {
    this.decodeURIComponent([-2.216170140955498,-2.2250738585072014e-308,-643865.3403199288,NaN]);
    return v0;
}
v0[Symbol.toPrimitive] = f1;
const v8 = [-128,-4294967295,2,-14,1073741824];
Object.defineProperty(v8, "toString", { writable: true, configurable: true, enumerable: true, value: f1 });
const v9 = [11526,268435441,-1776724312,129,35090,-9223372036854775808,-43487,-6];
function f10(a11, a12) {
    try {
        a11.toString = Symbol;
    } catch(e13) {
    }
    return v8;
}
v9[Symbol.toPrimitive] = f10;
function f16(a17, a18) {
    try { a18.with(a17, v8); } catch (e) {}
    const o27 = {
        "e": v9,
        [v9](a21, a22) {
            v9 in a17;
            try {
                a18.findLastIndex(a18, a17);
            } catch(e25) {
            }
            try { a17(a21); } catch (e) {}
            return a21;
        },
        "c": a18,
    };
    return o27;
}
try { f16.call(f16); } catch (e) {}
const v29 = f16(v8, v0);
f16(v0, v9);
const v31 = f16(v8, v8);
const v32 = [v31,v29,v29,v31];
try { v32.map(v0); } catch (e) {}
const v34 = [v32,v8,v32,f16,v32];
try { v34.forEach(v29); } catch (e) {}
const v36 = [v9,v34,v0,v34];
function f37() {
    return v36;
}
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = -(-7);
    v41 ** v41;
}
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    function f47(a48) {
        a46?.[a48];
        f1 = a45;
        return f37;
    }
    this.toString = f47;
    try { this.toString(); } catch (e) {}
    const v51 = this.constructor;
    try { new v51(F38, a45, F38, v51); } catch (e) {}
    new F38();
}
new F43();
const o55 = {
};
