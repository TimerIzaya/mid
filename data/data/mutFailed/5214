const v5 = new Array(4096);
function f6() {
    ("aZ4O").normalize();
    6 >>> -57958;
    class C12 {
    }
    class C13 {
        constructor(a15, a16, a17, a18) {
            try { a17(...a15, "e", a18, a18, ...C12); } catch (e) {}
            return arguments;
        }
    }
    Math.atan(1653620084);
    Math.log();
    return v5;
}
Object.defineProperty(f6, Symbol.iterator, { writable: true, value: f6 });
[2.12457717923302,2.220446049250313e-16];
[1000000000.0,-5.10604412028419,-2.0,-5.86946840882149e+307,1000.0,507.7960352302496,-62419.170507354196,0.32350630633929,-87.87912169649223,-5.781489817324563];
const v29 = [-5.0,-3.0,-696.9642769267198,2.458720459437707,1000000000000.0,1000000000000.0,5.0,-3.0,-888578.6001228399];
const v31 = new Date();
v31.setUTCFullYear(Date, v31, Date).getFullYear();
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
    const o38 = {
        "b": 1e-15,
    };
    delete o38.b;
}
new F34(F34);
try { v29.reduceRight(-57958); } catch (e) {}
const v44 = new Set();
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a47;
    } catch(e49) {
        for (let [v50,v51] of a47) {
            class C52 {
            }
            const v53 = new C52();
            const v54 = v53.g;
            try {
                v54.length = 1;
            } catch(e56) {
            }
            try {
                v44.values();
            } catch(e58) {
            }
        }
    }
    try {
        this.h = v44;
    } catch(e59) {
    }
    try {
        const v60 = v44[this];
        try {
            new F45(v60, -268435456n);
        } catch(e63) {
        }
        this.b = Set;
    } catch(e64) {
    }
}
const v65 = new F45(Set, Set);
new F45(v65, F45);
function f67() {
    new Date();
    byteLength || byteLength;
    function f73(a74, a75) {
        const o76 = {
            "g": a74,
            "h": "a",
        };
        return o76;
    }
    return 2720;
}
try { new Int32Array(f6, Array, v29); } catch (e) {}
const v79 = new Int32Array(2720);
Object.defineProperty(v79, "toString", { configurable: true, value: Symbol });
v79[2071];
const v81 = v79[v79];
for (let v82 = 0; v82 < 32; v82++) {
    v81["p" + v82] = v82;
}
class C85 {
}
const v87 = new C85();
v87.toString = Symbol;
const o92 = {
    [v87](a89, a90, a91) {
    },
};
o92.c = 2720;
o92.c = o92;
