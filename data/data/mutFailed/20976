const v2 = new Float32Array(512);
const v5 = new v2(1000);
const v8 = [];
([[128,-1641321930,-2147483649]]).concat(v8);
const v12 = new Int16Array(256);
class C13 {
    constructor(a15, a16, a17, a18) {
        super[a15] = Uint8Array;
        try {
            new Float32Array(-234812275);
        } catch(e21) {
        }
    }
    #o(a23, a24, a25) {
        const o26 = {
        };
        try {
            o26.a = 512;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.a = 512;
            o28.h = v12;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.a = 512;
            o30.h = v12;
            o30.e = a24;
        } catch(e31) {
        }
        try {
            const o32 = {
            };
            o32.a = 512;
            o32.h = v12;
            o32.e = Uint8Array;
        } catch(e33) {
        }
        return a23;
    }
}
const v34 = new C13(1000, v12, 1000, Uint8Array);
const v35 = new C13(1000, v34, 1000, v2);
new C13(256, v35, 256, v5);
const v40 = [-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308];
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    try { new v45(a43, v45, this, v40, v40); } catch (e) {}
    v40.fill(1000, v45);
}
new F41(F41, F41);
