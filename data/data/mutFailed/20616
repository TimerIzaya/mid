const v1 = new Set();
const v2 = [v1,v1];
const v3 = [v2,v2,v1,v2];
[Set,v3,v3];
const v6 = 5 >>> 5;
new Uint16Array(5);
new Uint16Array(0);
try { Int32Array.from(Int32Array); } catch (e) {}
Uint8Array.length = Uint8Array;
Int8Array.name = Int8Array;
try { new Uint8Array(Uint8Array, 4, Set); } catch (e) {}
try {
} catch(e23) {
    const v53 = (a54, a55, a56) => {
        return a55;
    };
}
0 + 0;
let v82 = -1;
v82--;
new Int32Array(252);
v6 >>> 1487;
new Int8Array(1487);
new Int32Array(2147483649);
194 >>> 194;
let v100 = 268435440;
v100--;
function f103(a104, a105, a106) {
    'use strict';
    return a104;
}
f103.name;
const v108 = new BigUint64Array(194);
try { v108.copyWithin(-21847n, 2630); } catch (e) {}
const v110 = /LR0/gudisy;
let v111;
try { v111 = v110.toString(); } catch (e) {}
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F114() {
    if (!new.target) { throw 'must be called with new'; }
    function f116(a117) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f116 });
    let v120 = 1073741825;
    try {
        v120++;
        ~-175950080;
        let v125 = -1e-15;
        v125 + v125;
        let v128 = Math.atan2(v125++, -175950080);
        v128++;
        this.b = v120;
    } catch(e130) {
    }
}
let v131 = new F114();
let v132 = new F114();
v132.a = -10809n;
({"a":v132,"b":v132,...v131} = v132);
const v134 = v111.caller;
const o138 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": v134,
};
gc(o138);
const v140 = new F114();
let v141;
try { v141 = v140.__lookupGetter__(13); } catch (e) {}
const v145 = new Uint32Array();
try { v145.entries(); } catch (e) {}
v145.true = v145;
function f147(a148, a149, a150, a151) {
    a151++;
    for (let [i156, i157] = (() => {
            let v153 = 0;
            v153++;
            return [v153, 10];
        })();
        (() => {
            i157 > i157;
            const v159 = i156 < i157;
            v145[v159];
            return v159;
        })();
        (() => {
            const v163 = i157--;
            v163 - v163;
        })()) {
        -i157;
    }
    return f147;
}
for (let v168 = 0; v168 < 5; v168++) {
    const v169 = f147(v168, Uint32Array, f147, v168);
    v169.d = v169;
}
%OptimizeFunctionOnNextCall(f147);
v141();
const v171 = new Uint8ClampedArray(16);
v171[0] = v171;
function f173() {
    new Int8Array(1073741823);
    class C177 {
        #valueOf(a179, a180, a181, a182) {
        }
    }
    const o186 = {
        valueOf(a184, a185) {
        },
    };
}
f173();
%OptimizeFunctionOnNextCall(f173);
