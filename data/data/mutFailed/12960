const v0 = [NaN,1.438471533441394e+308,668.6609885462037,1.2764480462836523e+308,-292093.1007833078,-1e-15,7.140778975581895,-0.4876735834361412,-52.702501267940306];
const v1 = [5.0,0.06258836922297717];
const v2 = [-0.0,1000000000.0,-8.5885931999301e+307,-3.4412528761880594,-1000000000000.0,-19209.454339536955,-965.644234823041,-Infinity,-9.72273051287056,0.5855174701509448];
const v3 = [v2,v2,v0,v0];
function f4(a5, a6) {
    for (let i10 = 0, i11 = 10;
        (() => {
            const v12 = i10 < i11;
            class C13 extends Date {
            }
            return v12;
        })();
        i10++) {
    }
    return v3;
}
Object.defineProperty(v3, "toString", { writable: true, enumerable: true, value: f4 });
const v19 = [v3,v1,v2];
[v19,v0,v2];
try { new BigUint64Array(v19, v19, BigUint64Array); } catch (e) {}
new BigUint64Array(16);
52 - 52;
try { new BigUint64Array(52, 52, v1); } catch (e) {}
new BigUint64Array(52);
new BigInt64Array(4);
const v35 = new Int32Array(1024);
let v36 = this;
v36.toString = f4;
Reflect.toString = f4;
try { Reflect.isExtensible(BigInt64Array); } catch (e) {}
const v39 = [v35];
v39.g = v3;
v39.g = v39;
const v40 = Reflect.construct(Int32Array, v39);
v40[Symbol.toPrimitive] = f4;
v40[487] = v40;
v36 >>>= Reflect;
