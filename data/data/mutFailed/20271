const v2 = -Infinity;
class C3 {
    h = v2;
    static #p(a5) {
        let {"c":v6,} = a5;
        let v8;
        try { v8 = a5["toString"](v6); } catch (e) {}
        return v8;
    }
    constructor(a10) {
        a10++;
        !(this !== a10);
        for (let v14 = 0; v14 < 32; v14++) {
            "p" == "p";
            this["p" + v14] = v14;
        }
    }
}
const v18 = new C3(-7.989192840233765e+307);
const v19 = new C3(v2);
v19.p7;
const v21 = new C3(-7.989192840233765e+307);
v21.p6 = v21;
class C22 {
    #b = v2;
    constructor(a24, a25, a26, a27) {
        -a25;
        a26.name = a26;
        a27.d = a27;
        try {
            this.b = C3;
        } catch(e29) {
        }
        try { a26(-7.989192840233765e+307, this, this, v18); } catch (e) {}
        function F31(a33, a34) {
            if (!new.target) { throw 'must be called with new'; }
            const v35 = this?.constructor;
            try { new v35(a33, a25); } catch (e) {}
            try {
                this.f = a34;
            } catch(e37) {
            }
        }
        new F31(a27, v2);
        new F31(a27, -7.989192840233765e+307);
        new F31(v18, a24);
    }
}
try { new C22(v18, v21, -7.989192840233765e+307, -7.989192840233765e+307); } catch (e) {}
const v42 = new C22(v18, -7.989192840233765e+307, C3, v19);
const v43 = v42?.b;
try { new v43(697889.420219769); } catch (e) {}
const v45 = new C22(v19, v2, -7.989192840233765e+307, v19);
const v46 = v45?.b;
try { new v46(v18); } catch (e) {}
new C22(v18, 697889.420219769, v19, v19);
-1000000.0;
const v56 = [7,128];
const v57 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v58 = v57[4];
v58 / v58;
v58 | v58;
const v61 = [40213,422333454,47387,65536,-51830];
v61[2] = v61;
const v63 = 0 - 0;
v63 * v63;
try { gc(); } catch (e) {}
gc();
const v73 = BigInt64Array?.of;
try { new v73(); } catch (e) {}
new BigInt64Array();
try { ("boolean").repeat(1000000.0); } catch (e) {}
const t72 = "toString";
t72[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
-256 * -256;
-256 >> -256;
function f84(a85, a86) {
    a85++;
    const v88 = a86--;
    v88 / v88;
    a85 | a85;
    const o104 = {
        "c": 15135,
        "a": 15135,
        "d": a85,
        __proto__: a86,
        "g": -1628878962,
        "type": "boolean",
        "a": a85,
        set b(a92) {
        },
        "g": 15135,
        "b": a86,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f97() {
                    return f97;
                }
                const o99 = {
                    [f97]() {
                    },
                };
                [o99];
                v57.copyWithin(8, -268435456, -256);
            } catch(e103) {
            }
            return this;
        },
    };
    o104.g = o104;
    return o104;
}
let v105;
try { v105 = f84(15135, 15135); } catch (e) {}
v105[1000000];
const v107 = f84(925.1427495594241, v56);
v107.a = v107;
f84(317008.8127941969, -4);
f84(1000000.0, v57);
268435441n ^ 268435441n;
const v112 = 268435441n - 268435441n;
v112 % v112;
const v115 = new BigUint64Array();
v115[2445191368] = 268435441n;
