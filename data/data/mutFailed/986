[18121,3,-3,1829190547,3,9007199254740992,1,256,23296];
[5,7,127,-9007199254740990,16,536870889,9007199254740992];
const v2 = [-330860834,-1080060196,-2543,-1,65536,65536,9223372036854775807,22558,-59882,28645];
function f3() {
    return v2;
}
BigInt64Array.name = f3;
const v6 = new BigInt64Array(10);
function f7() {
    const o14 = {
        "d": 268435440,
        "a": 4.0,
        __proto__: "cJ",
        "h": 4.0,
        valueOf(a12) {
            const o13 = {
                __proto__: this,
            };
        },
        "c": "cJ",
    };
    return o14;
}
const v15 = f7();
const v16 = f7();
const v18 = [f7(),v15,v16,v16];
[];
const v20 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
[65535];
new Set();
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e29) {
    }
    try {
    } catch(e30) {
    }
    v18.a = a27;
}
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.constructor;
    try { new v35(v20, this); } catch (e) {}
    ++a34;
}
new v6(F31);
11 + 11;
new Uint8Array(11);
Uint32Array.length;
new Uint32Array(8);
const v49 = new Uint8Array();
104 - 104;
const v53 = new Uint32Array(104);
v53[89] = v53;
for (const v54 in v53) {
    104 in v49;
    typeof Uint8Array;
}
