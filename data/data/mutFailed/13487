function f0() {
}
let v2 = "6";
const t3 = "padStart";
t3[1] = "padStart";
class C4 extends f0 {
    set e(a6) {
        v2 ^= "268435441";
        try { a6(a6, v2, "268435441", f0); } catch (e) {}
    }
    static #m(a9) {
        function f10(a11) {
            return a11;
        }
        class C12 extends f10 {
            #e = a9;
            f;
            static g = v2;
        }
        return v2;
    }
}
const v13 = new C4();
new C4();
new C4();
[-5,6];
const v17 = [-1,-413573102,0,1565756454,2081264075,129,13];
const v18 = [-2147483648,2147483649,-4294967297,-2147483647,-391944661,-9223372036854775807,3,-4294967295];
const v19 = v18?.slice;
try { new v19(v17, v13); } catch (e) {}
class C21 extends f0 {
    static #a;
    set h(a23) {
        eval();
    }
    3;
    static #e;
    constructor(a29, a30, a31, a32) {
    }
    [v18];
    #e;
    n(a34, a35, a36, a37) {
        try {
            function F39(a41, a42) {
                if (!new.target) { throw 'must be called with new'; }
                const v43 = this?.__lookupSetter__;
                try { new v43(this); } catch (e) {}
                a41--;
            }
            a34.concat(9n, this);
        } catch(e47) {
        }
        %VerifyType(a35);
        return v18;
    }
    static ["padStart"] = v17;
    ["padStart"] = "padStart";
}
C21.caller = C21;
new C21();
new C21();
const v50 = new C21();
v50[3];
SharedArrayBuffer.prototype;
const v54 = new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
v54.byteLength;
