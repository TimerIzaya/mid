function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = F0;
    try {
        this.e = 2147483649;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
const v8 = -2.044298706366324e+307 & -2.044298706366324e+307;
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v4;
    Object.defineProperty(a14, "e", { writable: true, configurable: true, value: a13 });
    try { this.constructor(a13, F11); } catch (e) {}
    a14.e = a14;
    try {
        this.d = a13;
    } catch(e16) {
    }
    try {
        this.c = 1000000000.0;
    } catch(e17) {
    }
}
const v18 = new F11(1000000000.0, v4);
const v19 = new F11(1000000000.0, v6);
const v20 = new F11(v6, v4);
function f21() {
    function f22(a23, a24) {
        a24 / v4;
        const o27 = {
            "execution": "async",
        };
        return "async";
    }
    return f22;
}
function f28(a29) {
    function F30() {
        if (!new.target) { throw 'must be called with new'; }
    }
    ReferenceError.captureStackTrace(F30);
}
Object.defineProperty(v20, "constructor", { writable: true, enumerable: true, get: f21, set: f28 });
const v34 = v20?.constructor;
try { new v34(F11, v19); } catch (e) {}
[1000000000.0,[v18,2.2250738585072014e-308,v20,v20,v19],F11,[F11,v8],v18];
-3.3474037991793697 >>> -3.3474037991793697;
const v42 = Math.sinh(-3.3474037991793697);
v42 + v42;
