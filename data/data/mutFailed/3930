new Float32Array(255);
BigUint64Array.fuck = Float32Array;
const v5 = new BigUint64Array(5);
1 - 1;
function f9(a10) {
    a10[a10] = a10;
    return 0;
}
Int8Array.toString = f9;
const v14 = new Int8Array(1);
try { ("-268435456").isWellFormed(); } catch (e) {}
try { ("number").sup(); } catch (e) {}
237 / 237;
Int8Array.name = Int8Array;
const v23 = new Int8Array(1);
const v26 = v5.constructor;
try { v26(v26, v23, v14); } catch (e) {}
class C28 extends v26 {
    static ["toString"];
    [Int8Array];
}
const v29 = new C28();
try { v29.toLocaleString(); } catch (e) {}
new Uint16Array(183);
9 >> 9;
new Float64Array(9);
function f36() {
    return BigUint64Array;
}
for (let v39 = 0; v39 < 25; v39++) {
    try {
        65001 >>> 65001;
        C28.fuck(255, 65001, v39, v26);
    } catch(e43) {
        e43.message = e43;
    }
    let v45 = "p" + v39;
    const t37 = "M";
    t37[v45] = 237;
    Math.clz32("p");
    let v50 = Math.acos("p");
    v50--;
    const v52 = -4.0 / "-268435456";
    v52 >>> v52;
    v45++;
    "p" ^ -4.0;
    +127;
}
Object.defineProperty([8,-65537,9007199254740991,-268435456,4294967296,8,44846,-13], 10n, { get: f36, set: f36 });
