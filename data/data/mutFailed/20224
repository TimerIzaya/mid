const v0 = [];
new Int16Array(166);
const v8 = ("D")[0];
(1739195972n).match();
const v12 = new BigUint64Array(3927);
function f13(a14, a15, a16) {
    try { a16.apply(a15, v12); } catch (e) {}
    f13 ** "D";
    return v12;
}
new Int16Array(3);
new Uint16Array(7);
try {
    v0.c = 268435441n;
} catch(e27) {
}
const v29 = /(x)(x)(x)\1/uis;
function f30(a31, a32, a33, a34) {
    const o41 = {
        4294967295: a31,
        [v29](a36, a37, a38, a39) {
            super.test();
        },
    };
    return a32;
}
%OptimizeFunctionOnNextCall(v8);
const v42 = new Float64Array();
function F44() {
    if (!new.target) { throw 'must be called with new'; }
}
new F44();
!1000;
const v51 = new Float32Array(4096);
const v53 = [v51,Uint32Array,[v42,Uint32Array,v51]];
v53[v53] >>= 1000;
