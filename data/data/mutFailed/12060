[];
const v2 = [664759814,36432,255,-7,128,1000,65536,-55156];
[4294967296];
[-540142436,-6,-24814,8,-683073315,536870912];
const v8 = 512n | 512n;
[10773,-7,-6,9,3216,3];
[550556285,64,10,40180,10,1024,1024,-9223372036854775807,-2147483649,9];
[1568259842,-6555,-364827627];
([1073741824,1073741823,1376142744,1073741825]).forEach();
new Int8Array(964446029);
function F23() {
    if (!new.target) { throw 'must be called with new'; }
}
const v25 = new F23();
const v26 = new F23();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
function f29(a30) {
}
f29(v26);
f29(v25);
const v34 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v35 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
v35[7] = v35;
for (let v37 = 0; v37 < 25; v37++) {
    v37 - v37;
    const t25 = "p";
    t25[0] = "p";
    const v40 = "p" + v37;
    try { v40.fixed(); } catch (e) {}
    v34[v40] = v37;
}
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
}
F42.caller = F42;
new F42(v35);
class C47 {
}
C47.length = C47;
const v49 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v50 = [601759695];
const v51 = [1073741824,1073741823,1376142744,1073741825];
v51[2] = v51;
function f53(a54, a55, a56, a57) {
    const v59 = ("6Ct").normalize();
    const v60 = v2.constructor;
    try { new v60(v59); } catch (e) {}
    function f62(a63, a64, a65, a66) {
        return Reflect.construct(Uint8ClampedArray, []);
    }
    f62();
    %OptimizeFunctionOnNextCall(f62);
    function f72() {
        try { ("Vre").split("Vre", v34); } catch (e) {}
        -4294967295 | -4294967295;
        let v77 = Float64Array;
        v77 = a55;
        b = v50;
        v34.length;
        try {
            -2.241327492701015 & 9007199254740991;
            const v82 = [];
            let v83;
            try { v83 = v82.with(v82, v82); } catch (e) {}
            const v85 = new Float64Array(v82, v83);
            const v86 = new Float64Array(v85, v8, v83);
            return v86;
            v51.forEach(v77);
        } catch(e88) {
            e88.b = e88;
        }
        const v89 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v91 = Symbol.toPrimitive;
        const o97 = {
            toString(a93, a94) {
                const v95 = a57 && v77;
                a93 *= v91;
                return v77;
                return v95 <= v89;
            },
        };
        try { o97.toString(v77, 522675525n); } catch (e) {}
        const v99 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
        function f100(a101, a102, a103, a104) {
            function f105() {
                const v106 = v99.length;
                const v107 = v106 >>> v106;
                const v108 = v107 % v107;
                v108 & v108;
                return f100;
            }
            f105();
            %OptimizeFunctionOnNextCall(f105);
            return f105;
        }
        const v112 = f100(v99, f100(v99, f100, f100, v99), f100, f100);
        f100(f100, v112, v112, f100);
        const o138 = {
            "c": -4294967297n,
            [522675525n](a116, a117) {
            },
            "c": v50,
            valueOf(a119, a120) {
                new Date();
                ("minor").fontcolor([]);
            },
            "b": -4294967295,
            [-4294967297n](a127, a128, a129, a130) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v49,
            ...v50,
            "type": "Vre",
            ..."Vre",
            valueOf(a132, a133) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a135, a136, a137) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f72();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f72);
    try { v51["find"]("find", a57, v50, v51); } catch (e) {}
}
for (let v144 = 0; v144 < 10; v144++) {
    v144 >> v144;
    f53();
}
%OptimizeFunctionOnNextCall(f53);
f53();
