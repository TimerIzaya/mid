const v0 = [-0.3118198078428751,-Infinity];
[-0.8945924396125555,8.776066337627231];
[2.220446049250313e-16];
const v6 = Array(36862);
new Int32Array(2528);
new Int8Array(10);
function f15() {
    (1165).max(4.0, 4.0);
    return 4.0;
}
new Int16Array(1165);
function f21() {
    const v25 = Symbol.toPrimitive.description.codePointAt();
    ([-1.5424212036356715e+308]).shift();
    [1073741824,1073741823,1376142744,1073741825];
    return v25;
}
f21();
%OptimizeFunctionOnNextCall(f21);
new Uint8Array(512);
const v31 = [601759695];
const v32 = [1073741824,1073741823,1376142744,1073741825];
function f34(a35, a36, a37, a38) {
    const v40 = a36.toString();
    function f41() {
        ("Vre").fixed("Vre");
        const o58 = {
            [522675525n](a46, a47) {
            },
            ..."Vre",
            valueOf(a49, a50) {
                return this;
            },
            ...v31,
            ..."Vre",
            valueOf(a52, a53) {
                return a35;
            },
            ..."Vre",
            4: "Vre",
            toString(a55, a56, a57) {
                return v40;
            },
            5: -4294967295,
        };
        o58.valueOf();
        return f34;
    }
    v6();
    new Int8Array();
    v0.buffer.slice();
    %OptimizeFunctionOnNextCall(f41);
    function f67(a68, a69, a70, a71) {
        const o75 = {
            ["42776"](a73, a74) {
            },
        };
        return a68;
    }
    let v76;
    try { v76 = v32["find"](..."find", a38, ...v31, ...v32, ...522675525n); } catch (e) {}
    return v76;
}
function F77(a79, a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    a79.propertyIsEnumerable();
}
for (let v84 = 0; v84 < 10; v84++) {
    (10).__defineGetter__;
}
for (let v86 = 0; v86 < 5; v86++) {
    f34(v31, v86, v86, v32);
}
%PrepareFunctionForOptimization(f34);
f34(f34, 522675525n, f34, v32);
%OptimizeFunctionOnNextCall(f34);
f34();
