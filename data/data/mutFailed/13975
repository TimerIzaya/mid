const v3 = new BigInt64Array(5);
try { Float64Array.from(v3); } catch (e) {}
let v8 = -2.0;
v8++;
const v10 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
function f11() {
    return v10;
}
class C12 extends f11 {
}
const v13 = new C12();
class C14 {
    static h;
    constructor(a16) {
        try {
            const t15 = -17240;
            t15.h = BigInt64Array;
        } catch(e17) {
        }
    }
    static #o(a19, a20) {
        const o21 = {
        };
        function F22() {
            if (!new.target) { throw 'must be called with new'; }
        }
        let v24 = "string";
        class C25 extends C14 {
            static set f(a27) {
                for (let [v28] of a27) {
                }
            }
            #g;
            set h(a30) {
                ({"h":v24,} = this);
            }
        }
        try {
            o21.c = -2.220446049250313e-16;
        } catch(e31) {
        }
        try {
            const o32 = {
                "maxByteLength": -17240,
            };
            const v33 = C14();
            try {
                v33.b = -9007199254740991;
            } catch(e35) {
            }
            o32.c = -2.220446049250313e-16;
            o32.f = a19;
        } catch(e36) {
            class C38 {
                static [-53146] = -17240;
                #d;
                get e() {
                    let v40;
                    try { v40 = v10.toString(); } catch (e) {}
                    const v42 = Symbol.replace;
                    v40[v42] = v42;
                    return -17240;
                }
                static #e;
            }
            new C38();
        }
        try {
            const o44 = {
            };
            o21.c = -2.220446049250313e-16;
            o44.f = a19;
            o44.d = a19;
        } catch(e45) {
        }
        try {
            const o46 = {
            };
            o46.c = o46;
            o46.f = a19;
            return [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
            const v48 = [-9223372036854775808,4294967297,1524216812,1583265095,-6,4294967297];
            function f49(a50, a51) {
                return v48;
            }
            o46.d = this;
        } catch(e52) {
        }
        return this;
    }
    /*
    constructor(a54) {
        for (let v55 = 0; v55 < 32; v55++) {
            "p" & v55;
            for (let v58 = 0; v58 < 5; v58++) {
                function f59() {
                    return f59;
                }
            }
            this.p16;
            try { a54(); } catch (e) {}
        }
    }
    */
}
new C14(v13);
new C14(C14);
new C14(C14);
new Uint8Array(143);
new Uint32Array(Uint32Array);
new Float32Array(2427);
class C76 {
    toString(a78, a79) {
        do {
        } while ((() => {
                for (let v83 = 0; v83 < 25; v83++) {
                    function f84(a85, a86, a87, a88) {
                        return -261.99102172609366;
                    }
                }
                return 6;
            })())
    }
}
const t124 = 9;
new t124(9);
const v96 = new Float64Array();
("p").lastIndexOf(v96);
const v99 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
Math.acosh(v99 & -2);
