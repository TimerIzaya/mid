let v1 = "c";
class C3 {
    static {
        this.c = C3;
        this[v1];
        v1 /= v1;
    }
    get f() {
        const o10 = {
        };
        new Proxy("-256", o10);
        return "b";
    }
}
C3.e = C3;
C3.e = C3;
const v13 = new C3();
function f14() {
    function f15() {
        v13[1073741823] = "-256";
        try {
        } catch(e16) {
            eval("");
        }
        return "b";
    }
    return f15;
}
Object.defineProperty(v13, "constructor", { configurable: true, get: f14 });
const v21 = v13?.constructor;
try { new v21(); } catch (e) {}
new C3();
new C3();
const v30 = 0.2510089730549625 + 0.2510089730549625;
512.29276402866 === 512.29276402866;
class C33 {
    constructor(a35, a36) {
        a35 + a35;
        a36--;
        this.f = this;
        -a36;
        let v40;
        try { v40 = new a35(-5.869943149384486, a36, a36, a36, ...0.2510089730549625); } catch (e) {}
        try {
        } catch(e41) {
            e41.stack;
        }
        a36 = v40;
        try { ("m").match(a35); } catch (e) {}
        try { v40["m"](v40, "m", a35); } catch (e) {}
        -(-2);
        Math.sign(0.8907211315752046);
        const v52 = -2 & 0.8907211315752046;
        Math.sqrt(0.8907211315752046);
        !(!-1);
        ~(v52 + v52);
        ~0.8907211315752046;
    }
    [-5.869943149384486];
    c;
    static e;
}
C33.prototype = C33;
let v59;
try { v59 = C33.apply(C33, 0.2510089730549625); } catch (e) {}
WeakSet.a = WeakSet;
const v61 = new WeakSet();
const o62 = {
};
Object.defineProperty(o62, Symbol.match, { enumerable: true, value: f14 });
o62.h = o62;
Proxy[Symbol.iterator] = f14;
Proxy.g = Proxy;
const v68 = new Proxy(v61, o62);
v68[5] = v30;
const v69 = new C33(-5.869943149384486, 0.2510089730549625);
Object.defineProperty(v69, "b", { configurable: true, enumerable: true, value: v69 });
v69.b = v69;
v69.h = v69;
const v70 = new C33(-5.869943149384486, 0.2510089730549625);
const v71 = v70?.constructor;
v71[Symbol.match] = Symbol;
try { new v71(o62, v61); } catch (e) {}
const v75 = v70?.constructor;
function f76() {
    function F77() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v80 = new F77();
    class C82 {
        #b = v80;
        constructor(a84, a85) {
            this.#b <<= "object";
        }
    }
    return v30;
}
Object.defineProperty(v75, Symbol.match, { configurable: true, value: f76 });
try { new v75(v59, C33); } catch (e) {}
let v90;
try { v90 = new v75(C33, C33); } catch (e) {}
const v91 = v90?.constructor;
v91.valueOf = f76;
try { new v91(v75, v68); } catch (e) {}
const v93 = new C33(512.29276402866);
v93.c = v93;
v68[5] = v75;
try { v90(0.2510089730549625, Map, Map); } catch (e) {}
let v96;
try { v96 = v75(WeakSet); } catch (e) {}
v61.a |= v90;
let v97 = 75;
v97--;
const v100 = new Uint8Array(v97);
v100.toReversed();
let v104;
try { v104 = new Uint8ClampedArray(Proxy, v96, 5); } catch (e) {}
v104[Symbol.toPrimitive] = Symbol;
v104[1] = v104;
new Uint8ClampedArray(5);
new Int32Array(127);
const v111 = new Map();
try { v111.get(C33); } catch (e) {}
WeakMap.name = WeakMap;
const v114 = new WeakMap();
[v93,v114,v93,C33];
[-5.869943149384486,v70];
268435456 << 268435456;
268435456 | 268435456;
function f121() {
}
