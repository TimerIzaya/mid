const v0 = [-2.0,1.385460008116937e+308,-862.843581849637,-0.0,-4.181568411814225,6.147021212018959,4.0,9.918162406079255e+307];
function f1(a2) {
    return v0["findLastIndex"](..."findLastIndex", ...v0, ...v0, ..."findLastIndex", ..."findLastIndex", ...v0);
}
v0.toString = f1;
const v5 = [0.6988969197785546,5.0,-1000000.0,-3.0,-1000.0,-300.10095579276117,1.0509476969054353e+308];
const v6 = [2.2250738585072014e-308,4.1749976449162074e+307,3.0,1000000.0,-5.281830383683774e+307];
function f7() {
    return v5;
}
function f8() {
    return f1;
}
function f9(a10) {
    class C11 {
        static {
            do {
            } while (0 < 0)
        }
    }
}
Object.defineProperty(f7, "valueOf", { configurable: true, get: f8, set: f9 });
function f16(a17) {
    function f18(a19) {
        function f20() {
            return a19;
        }
        return a19;
    }
    a17.valueOf = f18;
    const o25 = {
        __proto__: v0,
        "d": v5,
        "e": a17,
        "b": a17,
        "h": v5,
        get b() {
            super[this] = v0;
            typeof a17 === "undefined";
            return a17;
        },
        2147483647: v6,
        [a17]: a17,
        6: f7,
        "c": a17,
        [v0]: v6,
        "a": f7,
    };
    return o25;
}
const v26 = f16(v6);
const v27 = delete v5[f7];
function f28() {
    return f16;
}
f7 / v6;
const v30 = f16(v0);
const v31 = f16(v6);
class C32 extends f7 {
    toString(a34, a35) {
        try { a34.reverse(); } catch (e) {}
        delete C32?.[v27];
        for (let v38 = 0; v38 < 32; v38++) {
            v30["p" + v38] = v38;
        }
        this[v31];
        f16(this);
        return this;
    }
    set f(a45) {
        try {
            v30.fuck(v26, undefined);
        } catch(e48) {
        }
    }
}
new C32();
new C32();
new C32();
[0.21808862503879312,5.0,-1.0665781164403594,-6.220722996655604e+307,1.0,198672.6622953352,0.5437703373793757];
[-9.047719465313138];
[-1.7976931348623157e+308,-3.0,0.0];
class C55 {
    static {
        function F57(a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            this.constructor = f16;
            const v61 = this.constructor;
            try { new v61(); } catch (e) {}
            try { this.constructor(); } catch (e) {}
        }
        new F57();
    }
}
