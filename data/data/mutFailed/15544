1217 * 1217;
const v6 = new Uint16Array(1217);
let v7;
try { v7 = v6.indexOf("symbol"); } catch (e) {}
Int32Array.prototype = Int32Array;
const v10 = new Int32Array(2640);
-512;
try { new Float64Array(Float64Array, "-46446", "-46446"); } catch (e) {}
new Float64Array(512);
Int32Array.BYTES_PER_ELEMENT = Int32Array;
const v18 = new Int32Array(129);
let v19 = 0;
v19--;
-v19;
try { new Int16Array(v7, 2640, Float64Array); } catch (e) {}
const v24 = new Int16Array(v19);
try { v24.findLast(Uint16Array); } catch (e) {}
Uint8Array.name;
Uint8Array.name = Uint8Array;
new Uint8Array(9);
let v30 = "-185650492";
v30[8] = v30;
let v31 = "E";
v31[0];
function f33(a34) {
    const o35 = {
        "g": v30,
        "f": a34,
        "h": v31,
    };
    const v36 = o35.f;
    for (let v37 = 0; v37 < 5; v37++) {
        function f38() {
            Math.ceil();
            return v37;
        }
        class C41 {
            static [v36] = Uint16Array;
        }
        try { new C41(); } catch (e) {}
        const v43 = new C41();
        const v44 = v43?.constructor;
        try { new v44(); } catch (e) {}
        new C41();
        const v47 = new C41();
        const v48 = v47?.constructor;
        try { new v48(); } catch (e) {}
        a34 = v10;
        v31 = "-46446";
        %VerifyType(v37);
        function f50() {
            return Int32Array;
        }
        try { new f50(); } catch (e) {}
        f38();
        %OptimizeFunctionOnNextCall(f38);
    }
}
f33();
f33();
2 !== 2;
f33(2 % 2);
1 - 1;
9007199254740991 >> 9007199254740991;
try {
    v18.e = "symbol";
} catch(e64) {
}
let v65 = 3;
const v66 = v65 | v65;
v66 % v66;
const v69 = new BigUint64Array();
let v71;
try { v71 = Set.toString(); } catch (e) {}
v71[13];
const v73 = new Set();
function F74(a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    const v78 = this?.constructor;
    try { new v78(512, a77); } catch (e) {}
    try {
        this.e = a76;
    } catch(e80) {
        for (let [v81,v82] of a76) {
            class C83 {
            }
            v30 = e80;
            v81 ^= v69;
            C83 != a76;
            const v85 = new C83();
            const t90 = v85.g;
            t90.length = 1;
        }
    }
    try {
        this.h = v73;
    } catch(e88) {
        this.toString();
        v31[2555];
    }
    try {
        const v91 = v73[this];
        try {
            -2046072084n ^ -2046072084n;
            new F74(v91, -2046072084n);
        } catch(e95) {
        }
        const o97 = {
        };
        const v99 = new SharedArrayBuffer(1024, o97);
        new BigInt64Array(v99);
        this.b = Set;
    } catch(e102) {
    }
}
F74.c = F74;
new F74();
new F74();
[65537,268435441,63298,-5,1235122603];
[128,215394418];
const v113 = v65++;
Math.atan2(v69, -16);
!-16;
Math.fround(v113);
