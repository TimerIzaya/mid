function f0() {
    const v2 = [3.0];
    for (let v3 = 0; v3 < 10; v3++) {
        function F4(a6, a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v9 = new F4(-725.0347156854516);
        new F4(v9, v2);
    }
    const o14 = {
        10: "number",
        "h": "a",
        "g": "number",
        11: "a",
        ..."a",
        ..."number",
        "a": "number",
        ..."number",
        __proto__: "number",
        "e": -10,
        "c": "a",
        3: "a",
        "f": "number",
    };
    return o14;
}
const v15 = f0();
const v16 = f0();
const v17 = f0();
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = f0;
    } catch(e22) {
    }
    try {
        this.f = a20;
        v15.d = a20;
        -25283n >> (-25283n && -25283n);
        function F26(a28, a29) {
            if (!new.target) { throw 'must be called with new'; }
            a28.g = a28;
            const v30 = this.constructor;
            try { new v30(); } catch (e) {}
        }
    } catch(e32) {
    }
    try {
        this.e = a21;
    } catch(e33) {
    }
}
const v34 = new F18(v17, v15);
new F18(v17, v17);
const v36 = new F18(v16, v17);
class C37 {
    static p(a39, a40) {
        super.g = f0 ** a40;
        let {"c":v42,"e":v43,"g":v44,...v45} = v16;
        return v34;
    }
    constructor(a47, a48, a49, a50) {
        function f51(a52, a53) {
            a52 && v15;
            this[129];
            return a52;
        }
        f51(this, a50);
        const o60 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o60);
    }
}
class C64 {
    static ["22307"] = "AanB8";
    b;
}
new C64();
new C37(v16, v36, v15, v15);
const v67 = new C37(v34, v15, v15, v34);
new C37(v15, v36, v15, v67);
for (let v72 = 0; v72 < 25; v72++) {
    const v73 = [601759695];
    const v74 = [1073741824,1073741823,1376142744,1073741825];
    function f75(a76, a77, a78, a79) {
        let v81 = 536870887;
        v81++;
        BigUint64Array * v81;
        try { v74["find"](..."find", a79, ...v73, ...v74); } catch (e) {}
        return v74;
    }
    for (let v86 = 0; v86 < 5; v86++) {
        f75();
    }
}
