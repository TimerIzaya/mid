[-433490.2576129049,-1.7976931348623157e+308,-275163.0257098094,-8.248992777340282,-1000000.0];
[2.2250738585072014e-308,2.2250738585072014e-308,-1.0,-1.5977898571885625];
const v2 = [0.16431728293807724,0.27479481343566725,-1.0,-5.0,1000000.0,3.0,2.2250738585072014e-308,-0.0,-209.86777369231982,-0.0];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
}
("-1073741824").localeCompare(Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array));
const v11 = [2147483649,1001798205,2147483647,-2058178124,-10];
try { v11.entries(); } catch (e) {}
const v13 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f14() {
    return v13;
}
class C15 extends f14 {
    a;
}
const v16 = [1073741824,-9,-1204808652,128];
try { v16.forEach(v2); } catch (e) {}
const v18 = [1892517876,-36178,-128,10000,28835,1470761449];
function f19() {
    const o21 = {
        "maxByteLength": 1468,
    };
    return true;
    return f19;
}
new Uint8Array();
const v25 = v18[5];
v25 - v25;
class C27 {
    toString(a29, a30) {
        function f31() {
            const o32 = {
            };
            const v33 = o32.__defineGetter__;
            let v34;
            try { v34 = v33(); } catch (e) {}
            return v34;
        }
        a29 << a30;
        new Float32Array(1288);
        class C41 {
        }
        C41.constructor;
        class C44 extends Set {
        }
        new BigInt64Array(64);
        const t47 = 7;
        new t47(7);
        return v11;
    }
}
C27.e = C27;
new C27();
new C27();
new C27();
const v52 = [-26238,2147483649,55386,-53880,536870912,-2,16,16219,9007199254740990,-256];
let v53;
try { v53 = v52.fill(C27); } catch (e) {}
v53[7] = v53;
const v54 = [-9007199254740992,1,-11,-7,474,-2147483648,-39299];
try { v54.toString(); } catch (e) {}
const v56 = [7,536870912,1073741823];
v56[0] = v56;
const v57 = [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
const v59 = [-2,-2,-2,-2,-2];
const v60 = [v57,-2];
const v61 = v60[1];
v61 << v61;
new BigUint64Array(-2);
class C65 {
}
class C67 extends Date {
}
const v68 = new C67();
v68.setMonth(C65, C67);
v68.setUTCSeconds();
function f72() {
    return -0.0;
}
const v75 = new BigInt64Array(11);
v75.lastIndexOf();
const v78 = v57.concat(v59, v60, true);
("D")[0];
function f81() {
    try { ("NFKD").localeCompare(v54); } catch (e) {}
}
v78[11] = v78;
