const v3 = [1073741824];
try { v3.splice(4096, v3); } catch (e) {}
const v5 = [4096,v3,1073741824,v3];
const v6 = [-534817751,v5,v5,1073741824];
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    a12 >> a12;
    const v14 = a9 - a9;
    v14 >>> v14;
    try { a10.map(v6); } catch (e) {}
    let v17;
    try { v17 = a11.pop(); } catch (e) {}
    v17 + v17;
    try {
        this.d = 1073741824;
    } catch(e19) {
    }
    try {
        this.h = 1073741824;
    } catch(e20) {
    }
}
const v21 = new F7(4096, v3, v6, -534817751);
try { v21.propertyIsEnumerable(v5); } catch (e) {}
v21.h = v21;
const v24 = new Int8Array();
class C26 extends Uint8Array {
    constructor(a28, a29) {
        super(a28);
        try {
            v24.length = 415075273;
        } catch(e31) {
        }
    }
}
C26.name;
const v33 = new F7(v5, v5, v5, 1073741824);
v33.d = v33;
const v34 = new F7(1073741824, v6, v6, 4096);
v34.d;
const v38 = new BigUint64Array(256);
v38[200];
512 >> 512;
-766;
const v49 = new Uint8ClampedArray(104);
[];
v49.toLocaleString();
const v53 = new Int32Array(512);
v53[28] = v53;
try { v53.with(512, BigUint64Array); } catch (e) {}
~819;
const v58 = new Uint8Array(819);
v58[100];
let v60 = 591114.0785999324;
const v61 = v60++;
v61 * v61;
const v64 = new BigInt64Array(v61, v60, v61);
v64[296342] = v64;
function f65() {
    return v64[v61];
}
f65.length = f65;
%PrepareFunctionForOptimization(f65);
const o67 = {
    "apply": f65,
};
const v68 = o67.apply;
try { v68(); } catch (e) {}
v68(v68, v60, BigInt64Array, BigInt64Array, BigInt64Array);
f65();
