const v0 = [4294967296,1140343207,4294967295];
const v1 = [6,-2147483647,9007199254740990,268435440,-2,-5115,2147483647];
const v2 = [-4294967295,-8,1416,10000,13,-917378236,9223372036854775807,8];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(this); } catch (e) {}
    a5[3] = a5;
    try {
        this.g = v1;
    } catch(e8) {
    }
}
try { new F3(v2); } catch (e) {}
const v10 = new F3(v1);
const v11 = new F3(v1);
v11.a = v11;
const v12 = new F3(v11);
v12.g;
const o15 = {
    "arguments": v2,
    "type": "function",
};
const v16 = [v12,v0,v11,v0,v10];
const v17 = [v12];
const v20 = new Uint8Array(165);
o15 % o15;
let v22 = 6;
v22++;
const v25 = new Uint8Array(v22);
try { v25.filter(o15); } catch (e) {}
const v28 = ["function",v25];
const o29 = {
    "arguments": v28,
    "type": "function",
};
o29.arguments;
[v16,v10,v12,v12,F3];
[-1.0,426.77975744325886,-Infinity,-1000000.0,-954301.3886935441,-2.2709753031964595e+307,-5.0,-5.0,3.0];
([1000000000000.0,1.4657976588257456e+308,864.8658784513918,0.0,1000000000.0,902.7456610731738,-6.935437465993806e+307])[2];
try { Uint32Array.from(v20); } catch (e) {}
const v37 = async (a38, a39, a40) => {
    return Uint32Array;
};
const v42 = new Set();
const v43 = v42?.__defineGetter__;
try { new v43(v17, v17); } catch (e) {}
[-1.0509677738969931e+308,3.8546103657956827,-1000000.0,-808.864194312303,-1e-15,-2.0];
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
Map.prototype = Map;
class C49 extends Map {
}
class C51 {
    static {
        const v53 = [601759695];
        const v54 = [1073741824,1073741823,1376142744,1073741825];
        function f55(a56, a57, a58, a59) {
            a56.name = a56;
            a57++;
            try { new a56(); } catch (e) {}
            a58 << a58;
            function f63() {
                return a56;
            }
            try { f63(); } catch (e) {}
            const v66 = new Int8Array();
            try { v66.filter(a59); } catch (e) {}
            try { new BigUint64Array(BigUint64Array, BigUint64Array, v16); } catch (e) {}
            let v70 = 536870887;
            v70--;
            function F72(a74) {
                if (!new.target) { throw 'must be called with new'; }
                for (const v78 of Array(4087)) {
                }
            }
            const v79 = BigUint64Array * v70;
            function f80(a81, a82, a83, a84) {
                a83++;
                const v86 = a83++;
                const v87 = a83 % a83;
                const o88 = {
                    ...v20,
                };
                let v89;
                try { v89 = o88.n(v87, v86); } catch (e) {}
                return v89;
            }
            Number.isNaN(v79 ** v79);
            function f93(a94, a95) {
            }
            try { f93(); } catch (e) {}
            const v97 = v66.buffer;
            const v98 = v97.__defineGetter__;
            const v99 = v98?.constructor;
            try { new v99(v1); } catch (e) {}
            try { v98(); } catch (e) {}
            Object.defineProperty(v97, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f63);
            let v103;
            try { v103 = v54["find"](..."find", a59, ...v53); } catch (e) {}
            const o104 = {
            };
            o104.h = o104;
            o104.e = this;
            o104.e = o104;
            v103 <= a58;
            function f106(a107, a108) {
                const o109 = {
                };
                o109.h = o109;
                return o109;
            }
            f106();
        }
        for (let v111 = 0; v111 < 5; v111++) {
            f55(this, v111, v111);
        }
    }
}
