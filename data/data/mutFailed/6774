const v0 = [-963505.5373769935,-3.701112214977373,-1000.0,0.20819879695790366,0.0];
const v1 = [-1.5974533517757257e+308,Infinity,482.39288409208143,522.6625853498515,0.5870454919962047,-1000000000.0,8.553098936368961,260.81211496228957,0.19581676998771613];
const v2 = [1000.0,-5.460754685186974e+307,1000.0,0.2821482716857048,1000000000.0,8.622226169479482,-5.0];
-(-15);
10 >> 10;
function f8(a9, a10, a11, a12) {
    try { a9.filter(v0); } catch (e) {}
    a10 >>> a10;
    a11[7];
    a11[2];
    -(a12 >> a12);
    const o36 = {
        "e": 10,
        "g": 10,
        [a12](a20, a21) {
            [[a12,[a21,a21]],a9,a9,10];
            const v29 = -a12;
            const v30 = v29 ^ a12;
            Math.imul(a10, v29);
            Math.atan(v30);
            Math.expm1(10);
            Math.floor(v29);
            return -a12;
        },
    };
    return o36;
}
f8.d = f8;
f8(v0, 10, v1, -15).e;
f8(v1, 10, v1, -15);
f8(v1, 4294967297, v0, 10);
try { ("match").strike(); } catch (e) {}
try { ("match").codePointAt(145693.0891353658); } catch (e) {}
class C46 {
    #h = "object";
}
C46.prototype = C46;
function f47() {
}
Object.defineProperty(f47, "toString", { configurable: true, value: f47 });
255 == 255;
255 - 255;
const v51 = 255 * 255;
v51 - v51;
const v54 = [];
v54.toString = f47;
try { v54.reverse(); } catch (e) {}
const v56 = v54?.toString;
v56.e = v56;
try { new v56(); } catch (e) {}
2147483649 - 2147483649;
const v62 = ~f47 >> 536870889;
v62 >> v62;
class C65 {
}
const v66 = new C65();
v66[-16] = v2;
const v67 = v66?.constructor;
try { new v67(); } catch (e) {}
function f69() {
    1000000000000.0 === 1000000000000.0;
}
const v74 = f69();
const v75 = f69();
const v76 = f69();
function f77(a78, a79, a80) {
}
const v81 = f77(v76, v76, v74);
f77(v75);
const v83 = f77(v81);
const o85 = {
};
o85.e = o85;
o85.g = o85;
o85.b = o85;
try { ("symbol").codePointAt(undefined); } catch (e) {}
try { ("symbol").localeCompare("symbol"); } catch (e) {}
class C90 {
}
try { C90.call(v83); } catch (e) {}
const v92 = new C90();
let v93;
try { v93 = v92.propertyIsEnumerable(v83); } catch (e) {}
v93 && v93;
v66[-16];
try { ("bigint").valueOf(); } catch (e) {}
const v99 = ("symbol").replace("bigint").fontsize;
v99.length;
v99.name = v99;
Float64Array();
