function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        return F0;
    }
    function f3(a4) {
        try { this.p(F0, this); } catch (e) {}
    }
    Object.defineProperty(this, "f", { writable: true, configurable: true, get: f2, set: f3 });
    try {
        this.f = 617048616;
        function f7(a8, a9) {
            const v10 = -a8;
            v10 >> v10;
            const o12 = {
            };
            return o12;
        }
        const v14 = f7().propertyIsEnumerable;
        const v17 = new Uint8Array(this);
        function f18(a19, a20, a21, a22) {
            a21++;
            a21 % a21;
            const o28 = {
                "b": a19,
                ...v17,
                n(a26, a27) {
                    return a27;
                },
            };
            return v14;
        }
        const v29 = f18(Uint8Array, 2, 617048616);
        try { v29(617048616); } catch (e) {}
    } catch(e31) {
    }
    try {
        this.a = 617048616;
    } catch(e32) {
        `boolean`;
        new BigUint64Array(16);
        new Int8Array(2);
        new Uint8ClampedArray(236);
    }
}
const v43 = new F0();
function f44(a45, a46) {
    function F47() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            let v49 = 0;
            do {
                v49++;
            } while (v49 < 5)
            new F47();
        } catch(e54) {
        }
    }
    return F0;
}
v43.valueOf = f44;
const v55 = new F0();
const v56 = new F0();
function f57() {
    return v56;
}
function f58(a59) {
    const o63 = {
        "h": BigUint64Array,
        __proto__: "number",
        "type": "number",
        10: 3853,
    };
}
Object.defineProperty(v56, 268435456, { configurable: true, get: f57, set: f58 });
const v64 = [5.0153050136724335];
const v65 = v56[268435456];
try { v43.valueOf(v56, v65); } catch (e) {}
v55[1] |= v65;
function F67(a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F67;
    try {
        this.h = a70;
    } catch(e71) {
    }
    try {
        this.g = v64;
    } catch(e72) {
    }
}
new F67(v43, v65);
new F67(v55, v56);
new F67(v56, v65);
[5684.493631139281,227326.96302872384,-1.0,188.92417960267176,-1000000000000.0,-1e-15,-441764.1625556898];
[-450825.59042371484];
Symbol.toPrimitive;
["function",/[-123]N/gdis,null];
[-1.7976931348623157e+308];
[4.0];
[7.447016276006774,1.0411649983373867e+308,-4.569437069543336,-1.7976931348623157e+308,102.94416131820572,0.9438093762244595,-1e-15,-862251.5062497742,1e-15];
function f87() {
    return v55;
}
const v89 = new Float32Array();
for (let v90 = 0; v90 < 25; v90++) {
    function f91(a92, a93, a94, a95) {
        a92[1];
        a93--;
        a92[0] = a92;
        a93 <= a93;
        arguments[1] = arguments;
        const v100 = arguments?.__lookupGetter__;
        try { v100.constructor(v89, a94, v90, f91); } catch (e) {}
        let v102;
        try { v102 = v100(v100, f91, a93); } catch (e) {}
        return v102;
    }
    continue;
    function f106() {
        return F0;
    }
    for (let v107 = 0; v107 < 10; v107++) {
        f91(v89);
    }
}
