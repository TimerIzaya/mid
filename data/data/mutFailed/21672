const v0 = [];
function f1() {
    return v0;
}
function f5() {
    return 7555;
}
Array.d = Array;
new Array(3647);
WeakSet.e = WeakSet;
const v10 = new WeakSet();
function f13(a14, a15, a16, a17) {
    function f18() {
        return f13;
    }
    Object.defineProperty(a15, Symbol.toPrimitive, { configurable: true, get: f18 });
    a15 + a15;
    arguments[1];
    function f24() {
        return -17353;
    }
    function f25(a26) {
        return a17;
    }
    Object.defineProperty(arguments, 7, { configurable: true, get: f24, set: f25 });
    arguments[2] = arguments;
    return Uint8Array;
}
const v27 = f13?.bind;
try { new v27(f5); } catch (e) {}
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    a31 >>> a31;
    a32 >>> a32;
}
const v36 = new F29(-17353, -17353, f13);
v36.constructor = f13;
const v37 = v36.constructor;
try { v37(-17353, v10, v10, v10); } catch (e) {}
v37(-17353, -17353, Uint8Array);
