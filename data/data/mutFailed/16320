class C3 {
    static #toString(a5, a6) {
        ("Vre").charAt(8);
        const v10 = new Float32Array("Vre", 8, 8);
        const v11 = v10;
        try {
            this.length = 57;
        } catch(e13) {
        }
        return 57;
    }
    f;
    #g;
    2156 = 8;
    [268435439];
}
const v14 = new C3();
const v15 = new C3();
const v16 = new v15();
function f17(a18, a19) {
    const o29 = {
        set b(a21) {
        },
        valueOf(a23, a24) {
            return a18;
        },
        ...C3,
        "a": a19,
        "g": -1398760834,
        __proto__: a19,
        "c": a18,
        get b() {
            this[Symbol.replace];
            return 268435439;
        },
        "h": C3,
    };
    return o29;
}
f17(8, v14);
const v31 = f17(268435439, v16);
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    a37 instanceof -1398760834;
    const v39 = a36 === a36;
    v39 ** v39;
}
function f41() {
    for (let v42 = 0; v42 < 5; v42++) {
        new F33(f41, v42, f41);
    }
}
f17(8, v31);
const v50 = new BigInt64Array(128);
class C52 {
}
function f53(a54, a55, a56, a57) {
    function f58() {
        const o65 = {
            "type": "Vre",
            5: F33,
            "g": C52,
            "execution": "Vre",
            "type": "Vre",
            p(a62, a63) {
                this.toString(a63, this, a54);
                return 1000000.0;
            },
            6: -268435456,
        };
    }
    f58();
    %OptimizeFunctionOnNextCall(f58);
}
const v68 = new Uint16Array();
const v69 = v50 > v68;
new BigInt64Array([]);
const v73 = [-128,-204399241,1126169676,-39466,-37076,268435456,9223372036854775807,536870888,15798,-1632967117];
const o76 = {
    get c() {
        return v73;
    },
    get d() {
        return v73;
    },
};
v50[14] = v69;
