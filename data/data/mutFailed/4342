class C3 {
    #valueOf(a5, a6) {
        let v8 = 31464;
        const v9 = a6 | v8;
        const v10 = v8++;
        const v11 = Math.expm1(v9);
        v10 ** v9;
        const v13 = !v11;
        v10 ** v10;
        Math.min(a6);
        return v13;
    }
}
new C3();
const t14 = 5.0;
const v17 = new t14();
const v18 = new C3();
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v17;
        try { this.expm1(this, 127n, a24, F22, v18); } catch (e) {}
        this[Symbol.hasInstance];
        let v32 = 4;
        const v34 = ++v32;
        ~this;
        let v36 = -v34;
        Math.imul(this / v32, this);
        v36--;
    } catch(e40) {
    }
    try {
        this.c = a25;
    } catch(e41) {
    }
    try {
        const t36 = 9007199254740990n;
        t36.b = 9007199254740990n;
    } catch(e42) {
    }
}
new F22(127n, 5.0);
new F22(-1426539652n, -793188.3030315267);
new F22(-1426539652n, 5.0);
let v46 = -1024;
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
}
const v53 = new F47(F47, F47, v46, v46);
const v54 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v55 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
class C57 {
}
const v60 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v61 = [601759695];
function f63(a64, a65, a66, a67) {
    function f68() {
        let v71 = Float64Array;
        try { new v71(a67); } catch (e) {}
        v71 = a65;
        b = v61;
        const v73 = v54.length;
        try {
            v54.forEach(-4294967295);
        } catch(e75) {
        }
        const v76 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v77 = Symbol.toPrimitive;
        Symbol.for(v77.description);
        const o85 = {
            toString(a81, a82) {
                const v83 = a67 && v71;
                a81 *= v77;
                v83 <= v76;
                return v77;
            },
        };
        const o106 = {
            "c": -4294967297n,
            [522675525n](a88, a89) {
            },
            "c": v61,
            valueOf(a91, a92) {
                return a66;
            },
            "b": -4294967295,
            [-4294967297n](a94, a95, a96, a97) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v60,
            ...v53,
            [v77]() {
            },
            "type": C57,
            ..."Vre",
            valueOf(a100, a101) {
                return f68;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "a": o85,
            "d": v53,
            ["Vre"]: a66,
            "h": C57,
            ...v77,
            "type": "Vre",
            toString(a103, a104, a105) {
            },
            5: -4294967295,
            6: -268435456,
        };
        v77 = v71;
        new Float32Array(1334);
        v46 %= -268435456;
        new Uint32Array(v55, v73);
        return v53;
    }
    const v111 = f68();
    %OptimizeFunctionOnNextCall(f68);
    for (let v112 = 0; v112 < 32; v112++) {
        Symbol[a65 + v112] = v112;
    }
    return v111;
}
for (let v115 = 0; v115 < 5; v115++) {
    f63();
}
