new Uint8ClampedArray(202);
new BigUint64Array(2864);
new BigUint64Array(210);
new Set();
new Uint16Array(116);
new Int16Array(512);
new Int32Array(9);
class C23 {
}
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = new F24();
new F24(v30, F24, F24, v30);
const v32 = [7,128];
const v33 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v34 = v33[4];
v34 | v34;
const v36 = [40213,422333454,47387,65536,-51830];
v36[2] = v36;
0 - 0;
let v44;
try { v44 = gc(); } catch (e) {}
gc();
const t23 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
t23.length = 1;
const v48 = /xyz{1,32}?/gusy;
class C49 {
    268435440 = v48;
}
new BigInt64Array();
try { ("boolean").repeat(1000000.0); } catch (e) {}
const t32 = "toString";
t32[6] = "toString";
"toString" == "toString";
let [,...v57] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
function f58() {
    const o62 = {
        ...v44,
        set b(a61) {
        },
    };
    return C49;
}
v34();
("boolean").split("toString");
8 < "boolean";
let v68 = new Uint8ClampedArray();
try { v68.reduceRight(v68); } catch (e) {}
("toString").localeCompare();
202 >> -256;
function f73(a74, a75) {
    v68--;
    new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
    class C80 {
        static {
            this < this;
        }
    }
    a74 | a74;
    const o119 = {
        "c": 15135,
        "a": 15135,
        "d": a74,
        __proto__: a75,
        "g": 9,
        "type": "boolean",
        "a": a74,
        set b(a85) {
        },
        "g": 15135,
        "b": a75,
        get f() {
            super[1000000.0] = this;
            Math.exp(-359.60295377780096);
            const v90 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
            [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v90,v90]];
            try {
                new Int8Array(9);
                function f97() {
                    return f97;
                }
                new Uint16Array();
                !0.8843420658768774;
                function F101() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v104 = new F101();
                const o112 = {
                    [v104](a107, a108, a109, a110) {
                        "D2z" < a107;
                    },
                };
                const o114 = {
                    [f97]() {
                    },
                };
                [o114];
                v33.copyWithin(8, -268435456, -256);
            } catch(e118) {
            }
            return this;
        },
    };
    o119.g = o119;
    return o119;
}
let v120;
try { v120 = f73(15135, 15135); } catch (e) {}
v120[1000000];
f73(925.1427495594241, v32);
f73(317008.8127941969, -4);
f73(1000000.0, v33);
268435441n ^ 268435441n;
268435441n - 268435441n;
const v129 = new BigUint64Array();
v129[2445191368] = 268435441n;
const v2 = -Infinity;
const v3 = [-2.2250738585072014e-308,v2,v2,3.0];
try {
    v3.entries();
} catch(e5) {
}
let v6;
try { v6 = v3(v2, v3, -2.2250738585072014e-308, -2.2250738585072014e-308, v3); } catch (e) {}
[v2,v3,-2.2250738585072014e-308,v3,-2.2250738585072014e-308];
[v2,v2,v3];
/sR.Q/mgyd;
const v10 = /MjIJo15Cxyz{93}(?:ab)|cde[xyz]?/iu;
const v11 = /[(?:a*)*]/viyd;
new BigUint64Array(210);
new Int16Array(4);
let v18 = 8;
try {
    v18 = v6;
} catch(e19) {
}
let v20;
try { v20 = v11.test(v18); } catch (e) {}
new Uint8ClampedArray(v18);
try {
    v18 = "next";
} catch(e28) {
}
try { v10.compile(v20); } catch (e) {}
16 ^ 16;
