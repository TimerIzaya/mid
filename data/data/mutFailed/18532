function f0() {
    const o7 = {
        get f() {
            try {
                super.sinh(this, this, 0);
            } catch(e6) {
            }
            return 0;
        },
        ..."constructor",
        ["constructor"]: "-70696297",
        "h": "constructor",
    };
    return o7;
}
f0();
const v9 = f0();
f0();
new BigInt64Array(3255);
new Uint16Array(4096);
new Uint16Array(116);
Float64Array.d = Float64Array;
const v25 = new Float64Array(257);
const v28 = new Float64Array(3609);
try { v28.filter(Float64Array); } catch (e) {}
Float32Array.BYTES_PER_ELEMENT;
new Float32Array(9);
function f34() {
}
const v35 = [601759695];
const v36 = v35?.groupToMap;
try { new v36(257); } catch (e) {}
const v38 = [1073741824,1073741823,1376142744,1073741825];
try { v38.findLastIndex(v38); } catch (e) {}
let v40 = 522675525n;
v40--;
function f42(a43, a44, a45, a46) {
    function f47() {
        return f34;
    }
    Object.defineProperty(a45, "valueOf", { configurable: true, get: f47 });
    a44 >>> a44;
    function f50() {
        return v40;
    }
    f34();
    try { new Int8Array(v25, v25, 3609); } catch (e) {}
    const v54 = new Int8Array();
    function f57(a58, a59) {
        function f60() {
            return f34;
        }
        Object.defineProperty(a58, Symbol.toPrimitive, { get: f60 });
        const o68 = {
            "g": 1073741824,
            get d() {
                super[a58];
                return this;
            },
            "f": 3,
            ...a58,
            "getOwnPropertyDescriptor": f50,
            p(a66, a67) {
                return f50;
            },
            1: 257,
            10: 1073741824,
        };
        return o68;
    }
    Object.defineProperty(f57, "toString", { writable: true, configurable: true, enumerable: true, value: f42 });
    f57(f57(f57))[10];
    const v72 = v54.buffer;
    Int8Array.prototype = Int8Array;
    const v75 = new Int8Array();
    try { v75.set(-1024); } catch (e) {}
    let v77 = 1000000000000.0;
    -(v77--);
    v72.slice(2147483648);
    const t77 = [];
    t77.length += 1.0;
    class C84 {
        ["resolve"] = "resolve";
    }
    %OptimizeFunctionOnNextCall(f50);
    ("6Ct").normalize();
    class C88 {
    }
    function f89() {
        function f90(a91, a92) {
            const o95 = {
                toString(a94) {
                    return a91;
                },
            };
            return o95;
        }
        return v75;
    }
    C88[Symbol.toPrimitive] = f89;
    Symbol.search = Symbol;
    Date.toString = Symbol;
    class C100 extends Date {
    }
    C100.valueOf = f42;
    try { new C100(); } catch (e) {}
    const v102 = new C100();
    try { v102.setMonth(C88, C100); } catch (e) {}
    let v104;
    try { v104 = v38["find"](..."find", a46, ...v35, ...v38, ...v40); } catch (e) {}
    for (const v107 in "1024") {
    }
    const o108 = {
        "execution": "1024",
    };
    Symbol.iterator = Symbol;
    Symbol("bZ");
    new Uint8ClampedArray();
    const o113 = {
    };
    v104 <= a45;
    return arguments;
}
for (let v115 = 0; v115 < 10; v115++) {
    v115 % v115;
    const v117 = f42(v115, v115, f34, v40);
    v117[3] = v117;
    const v119 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v120 = [601759695];
    const v121 = [1073741824,1073741823,1376142744,1073741825];
    v121[3];
    function f124(a125, a126, a127, a128) {
        function f130() {
            b = Float64Array;
            v38.b = -302142025;
            function F137(a139, a140) {
                if (!new.target) { throw 'must be called with new'; }
            }
            try {
                v121.forEach(Float64Array);
            } catch(e142) {
            }
            const v143 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            Symbol.toPrimitive;
            const o151 = {
                toString(a147, a148) {
                    return (a128 && Float64Array) <= v143;
                },
            };
            const o171 = {
                "c": -4294967297n,
                [522675525n](a154, a155) {
                },
                "c": v120,
                valueOf(a157, a158) {
                    return a125;
                },
                [-4294967297n](a160, a161, a162, a163) {
                },
                "e": -4294967295,
                "f": 4096,
                "d": v9,
                10: Float64Array,
                "g": a125,
                8: f130,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v119,
                "type": "Vre",
                ..."Vre",
                valueOf(a165, a166) {
                    return v143;
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a168, a169, a170) {
                    return a128;
                },
                5: -4294967295,
                6: -268435456,
            };
        }
        f130();
        const v174 = new Int8Array();
        v174.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f130);
        let v179;
        try { v179 = v121["find"](..."find", a128, ...v120, ...v121, ...522675525n); } catch (e) {}
        v179 <= a127;
        return arguments;
    }
}
%OptimizeFunctionOnNextCall(f42);
f42();
