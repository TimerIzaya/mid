const v3 = [0.6424020555459223,-1000000.0,-5.113019687720599,118.44764885931613,-1000.0,527702.9816304445,-9.412489032016292e+307,-1000000000.0,NaN,-5.0];
const v4 = [-1.7976931348623157e+308,892115.1874798061,-5.0,525302.4579524065,-0.0,-0.36534776048736717,-6.244809663204636,1000.0,-2.220446049250313e-16,-3982.9986510280287];
const v5 = [-1.7854454325782449e+308,-1.237178721556953e+308,0.0,1.2632836113771369,0.0,131.02659744685207,-2.220446049250313e-16,-2.0,822.2384835963474];
try { v5.push(v4); } catch (e) {}
const v7 = [v5,51526n,v5,v5,v3];
const v8 = [v7];
try { ("imul").padEnd(1073741824); } catch (e) {}
v4.constructor;
const v14 = v8.constructor;
try { new v14(-15n); } catch (e) {}
[v5,51526n,51526n,v5,v7];
class C17 {
    c;
    #toString(a19, a20) {
        v8[536870887];
        super.f[Symbol.replace];
        return v8;
    }
    1073741825 = v5;
    static 2677592664 = v7;
    static #e = v4;
}
for (const v28 of Array()) {
    v28 - v28;
}
new C17();
const v31 = new C17();
v31.e = v31;
const v32 = new C17();
v32[1073741825] = v32;
function f33() {
    function F34(a36) {
        if (!new.target) { throw 'must be called with new'; }
        const v37 = this.constructor;
        const v38 = v37.bind(F34, F34, F34, F34);
        try { v38(v38, F34, f33, f33, a36); } catch (e) {}
        const v41 = new Int8Array();
        v41.buffer;
        for (let v43 = 0; v43 < 10; v43++) {
            f33();
        }
        try { new v37(); } catch (e) {}
    }
    new F34();
}
const v47 = /5mxyz{0,1}?/gimsy;
const o48 = {
    __proto__: v47,
};
const v50 = [0.8307152163010869,1.0,0.0];
v50.length = 1494907924;
%VerifyType(v50 instanceof -24894);
const v53 = [f33];
const v54 = [v53];
const v55 = [v53,f33,v53];
new BigInt64Array(3444);
class C60 {
}
new C60();
const v63 = [];
function f64() {
    const o65 = {
        __proto__: v63,
    };
}
new Uint8Array();
new Uint8ClampedArray();
const v71 = new Date();
const v73 = new BigUint64Array();
v73[v71] = v71;
const v75 = new BigInt64Array();
let [,v76,v77] = v75;
try { v77(); } catch (e) {}
class C80 extends Date {
}
let v81;
try { v81 = new C80(); } catch (e) {}
v81.constructor;
f33(BigInt64Array, f33, ...v54, 3444, 1024, ...v55);
f33();
f33();
[0.9830880735406903,-0.6660198851192867,729.1589343121786,6.490727458123557e+307,-1.2538779643386477e+308,-1000000000.0];
[638.8226705123661,3.0,-2.2250738585072014e-308,771474.4832247959,816263.8956170448,2.220446049250313e-16,5.0];
const v88 = [8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
[-5.83623517593701,-1.0,-1e-15];
[692.912813481568,126686.58689393173];
function f92(a93, a94) {
    const o98 = {
        [a93](a96, a97) {
        },
    };
}
const v99 = f92(v88, 128);
/j(x)(x)(x)\2/gud;
/[\0](?:ab|cde)/vimsy;
/^xxx$/uisy;
try { v99.p(); } catch (e) {}
try { ("-536870912").padEnd(v7); } catch (e) {}
let v111 = new Int32Array(Int32Array);
const v113 = new Uint8Array(v111, v111, Int32Array);
function f114(a115, a116, a117, a118) {
    v111++;
    const o124 = {
        "b": a115,
        get d() {
            return v7;
        },
        "execution": "n",
        ...4033,
        ...v113,
        n(a122, a123) {
            return v111;
        },
    };
    return a117;
}
for (let v125 = 0; v125 < 625; v125++) {
    f114();
}
const v129 = /D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy;
v129.e = v129;
const v130 = [v129];
const v132 = ["-536870912","replace",v130,1,[v130]];
const v134 = [];
const v135 = ("-536870912").normalize;
v135.name;
Reflect.apply(v135, v132, v134);
