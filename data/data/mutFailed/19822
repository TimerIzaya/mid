const v2 = new Uint8ClampedArray(16);
const v5 = new Uint32Array(2661);
const t2 = 16;
const v8 = new t2(2);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a13;
    } catch(e14) {
    }
    try {
        this.g = Int8Array;
    } catch(e15) {
        let v16 = 0;
        do {
            try { v5.includes(e15); } catch (e) {}
            try { v2.sort(a12); } catch (e) {}
            new Set();
            v16++;
        } while (v16 < 1)
    }
    try {
        this.e = a11;
    } catch(e24) {
    }
}
new F9(2661, 2, 2);
new F9(16, 2, 2);
new F9(2, 2661, 2661);
const v29 = new WeakMap();
const v30 = /8[\cA]v/uisy;
function f31(a32, a33) {
    const v34 = [v30,v30,v30,v30,v30];
    v29.set(v34, v34);
    return v30;
}
v30[Symbol.toPrimitive] = f31;
const v38 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v38.length = v30;
} catch(e39) {
    e39?.[257];
    v8[4] = e39;
    f31(this, e39);
    new Int32Array(1);
    const t45 = 2;
    new t45(4);
    new Uint16Array(Uint16Array);
}
new BigInt64Array(1073741824);
