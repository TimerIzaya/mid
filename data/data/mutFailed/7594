function f3() {
    return -1365024692n;
}
function f4(a5, a6) {
    return 9007199254740991n;
    try {
        f3();
    } catch(e8) {
    }
    return 537473644n;
}
f3.toString = f4;
const v9 = f3?.toString;
try { new v9(); } catch (e) {}
41938 + 41938;
[-1000000000.0,Infinity,-4.978667593453004];
const v16 = [-1.7976931348623157e+308,699806.7516493837];
const v17 = [-1000000000000.0,2.220446049250313e-16,-256.06696022780204,-485.15942082147467,-Infinity,0.5235048580792475,2.2250738585072014e-308,Infinity,-1.7976931348623157e+308,366467.82604089566];
let v18;
try { v18 = v17.fill(41938); } catch (e) {}
class C20 {
    toString() {
        this[536870887] = this;
        [0.42610628000409834];
        [0.1916863927637561,5.0,-1000000.0,-1000000000000.0,-2.2250738585072014e-308,786167.582370504,221250.34918176057];
        [2.0,121972.82426161831,1.0,1000.0,1.586101720587471e+308,682084.812556563];
        return undefined;
    }
    #f;
    static [undefined] = undefined;
    536870887;
    static #d = undefined;
}
C20.log10 = f3;
C20.log10 = v9;
const v25 = C20.length;
const v26 = new C20();
new C20();
const v28 = new C20();
class C29 {
    p(a31, a32, a33, a34) {
    }
}
const v38 = ([C29])[Symbol.iterator];
function f39(a40) {
    const v42 = new Set();
    function F43(a45, a46) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = a45;
        } catch(e47) {
            for (let [v48,v49] of a45) {
                class C50 {
                }
                const v51 = new C50();
                const v52 = v51.g;
                try {
                    v52.length = 1;
                } catch(e54) {
                }
                try {
                    v42.values();
                } catch(e56) {
                }
            }
        }
        try {
            this.h = v42;
        } catch(e57) {
            Math.atan2(257, 257);
        }
        try {
            const v61 = v42[this];
            try {
                new F43(v61, -2046072084n);
            } catch(e64) {
            }
            this.b = Set;
        } catch(e65) {
        }
    }
    new F43(Set, F43);
    return C29;
}
v38.constructor = f39;
const t85 = v38.constructor;
const t86 = t85(C29);
t86();
Object.defineProperty(v28, "toString", { writable: true, value: f3 });
class C70 {
    static #c;
    set c(a72) {
        try {
            v26.__proto__ = v28;
        } catch(e73) {
        }
    }
    c = C20;
    static #g;
    #b = undefined;
}
const v74 = new C70();
try { v74.c(); } catch (e) {}
const v76 = new C70();
const v77 = v76?.c;
try { new v77(); } catch (e) {}
new C70();
const v82 = new Int16Array(1659);
function f83() {
    try {
        v16.valueOf = v18;
    } catch(e84) {
    }
    return v25;
}
v82.toString = f83;
v82[1238] = v82;
const v88 = new WeakMap();
function F89(a91) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a91;
    const v92 = this?.constructor;
    try { new v92(v88); } catch (e) {}
    try {
        this.c = WeakMap;
    } catch(e94) {
    }
}
new F89(v88);
for (let v96 = 0; v96 < 25; v96++) {
}
new Uint8Array(3);
try { new BigInt64Array(f3, f3, BigInt64Array); } catch (e) {}
new BigInt64Array(428);
try { C20.log10(); } catch (e) {}
try { v28.toString(Int16Array, BigInt64Array); } catch (e) {}
6 >>> 6;
for (let i109 = 0; i109 + i109, i109 < 7; i109++) {
    new Uint8Array(i109);
}
