[-1.1506388570539023,-9.965624664729175e+307,-3.976902341769509e+306,0.3189965473578421,102833.19655139581,1000.0,-1000000000000.0,4.192054739784638,8.089399509668912];
let v1 = [4.0,0.6053224135733024,-9.947866181317348e+307,-0.0,1.099069892903767e+308,1e-15,1000000000000.0,-1e-15,0.2781687331148781];
const v2 = [-0.8973507919791395,1e-15,0.9941091207142144,1000.0,1e-15];
function f4(a5, a6, a7) {
    return a6;
}
const v9 = new Date();
try { v9.getUTCHours(); } catch (e) {}
64 >>> 64;
118 | 118;
function f16(a17, a18, a19, a20) {
    a17 >> a17;
    a18.f = a18;
    return arguments;
}
const v23 = f16(118, f16, 118, 118);
const v24 = f16(v23, f16, v23, 118);
const v25 = v2.constructor;
try { v25.setPrototypeOf(Date, v24); } catch (e) {}
v25(118).toExponential(v23);
try { new Set(); } catch (e) {}
const v31 = new Set();
class C32 extends Set {
    static #toString(a34, a35, a36) {
        v1 = this;
        5 >>> a34;
        try {
            v2.__proto__ = a34;
        } catch(e38) {
        }
        return v2;
    }
    a;
    d = 64;
    b;
    static e = v31;
}
try { C32.apply(f16, v31); } catch (e) {}
new C32();
new C32();
new C32();
new Uint16Array(1024);
Uint8ClampedArray.e = Uint8ClampedArray;
const v48 = new Uint8ClampedArray(7);
try { v48.values(); } catch (e) {}
const v52 = new Float64Array(512);
try { v52.entries(); } catch (e) {}
let v54 = -534568.6902183883;
v54--;
class C58 {
}
try { C58.call(7); } catch (e) {}
const v60 = new C58();
const v61 = v60?.constructor;
try { new v61(); } catch (e) {}
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    const v70 = a68?.__lookupSetter__;
    try { new v70(a68, ...v70, v54, this); } catch (e) {}
    try {
        const v74 = new Uint16Array(3);
        v74.indexOf();
        Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
        v60.__proto__ = a68;
    } catch(e79) {
    }
    try { v70(6); } catch (e) {}
    a69[2147483648] = a69;
    const v82 = new Int8Array();
    for (const v83 in v82) {
    }
}
