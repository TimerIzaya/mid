let v0 = [];
function F1(a3, a4, a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a4;
}
const v7 = new F1();
function f8() {
    function f10(a11) {
        v0["unshift"]("unshift", F1, "unshift", "unshift", a11);
    }
    this.onmessage = f10;
    let v16 = --v0;
    Math.expm1(-(v16++));
}
const v22 = [];
const o23 = {
    "arguments": v22,
    "type": v0,
};
new Worker(f8, o23);
for (const v25 in v7) {
}
function f26() {
    return v0;
}
function f28() {
    return "28j";
}
const v29 = f28.constructor;
/L\bd/vmsy;
/v[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/gvm;
/T+/gudim;
const v34 = new Set();
const v40 = new Int8Array(3787);
const v41 = v40[1926];
const v44 = new v29();
v44.setUTCFullYear(v41, Int8Array, Float32Array);
const v47 = new BigUint64Array(v41);
const v49 = new Float32Array(Float32Array, Float32Array, Float32Array);
async function f51(a52, a53, a54) {
    v49.h = v49;
    await 160;
    return f8;
}
f51(v49, v49, v41);
v47[v44] = v44;
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v34.b = a60;
    } catch(e62) {
    }
}
