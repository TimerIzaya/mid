const v0 = /a\w/guims;
const v1 = /9(?:a+)?(?:a?)?/gvs;
const v2 = /xyz{1,}a\b!/gvdis;
0.10211909365986094 - 0.10211909365986094;
const v6 = 0.546653387580812 - 0.546653387580812;
let v7 = -993953.411753612;
v7--;
class C9 {
    #n(a11, a12) {
        try {
            a11.#n(0.546653387580812, v1, 0.10211909365986094, v1);
        } catch(e14) {
        }
        try { v1.test(this); } catch (e) {}
        const v17 = Symbol.iterator;
        const o26 = {
            [v17]() {
                let v19 = 10;
                const o25 = {
                    next() {
                        v19--;
                        const v23 = v19 == 0;
                        const o24 = {
                            "done": v23,
                            "value": v19,
                        };
                        return o24;
                    },
                };
                return o25;
            },
        };
        return 0.546653387580812;
    }
}
const v27 = C9.length;
v27 / v27;
const v29 = new C9();
const v30 = v29?.__lookupGetter__;
try { new v30(v2); } catch (e) {}
const v32 = v0?.constructor;
v32.length = v32;
let v33;
try { v33 = new v32(); } catch (e) {}
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
const v36 = new v30();
let v37;
try { v37 = v36.propertyIsEnumerable(v1); } catch (e) {}
v37 && v37;
new C9();
let v40;
try { v40 = v2.valueOf(); } catch (e) {}
const v41 = v40?.constructor;
try { new v41(); } catch (e) {}
12 < 12;
12 * 12;
const v47 = new Float64Array(12);
let v48;
try { v48 = v47.join(v2); } catch (e) {}
v48.d = v48;
v47[9];
~v1;
64 % 64;
const v54 = Uint8ClampedArray.name;
try { v54.includes(v6); } catch (e) {}
const v56 = new Uint8ClampedArray(64);
v56[61];
let v58 = 16;
let v59 = v58++;
v59--;
-v59;
const v63 = new Int8Array(v58);
let v64;
try { v64 = v63.reduce(C9); } catch (e) {}
for (let v65 = 0; v65 < 5; v65++) {
    v65 + v65;
    try { Math.exp(v64); } catch (e) {}
    const v69 = Math?.expm1;
    try { new v69(v0); } catch (e) {}
    v41 == -2147483649;
    let v73 = -2147483649 * v65;
    ++v73;
    Math.tan(v73);
}
/[\ca]a(?=b)+/gisuy;
[-7];
[1444506438,9007199254740991,-46124];
const t0 = /(?:ab)(?:a?)?/mgiu;
t0.valueOf = -7;
/(?:a+){0,0}Va\qna(?!bbb|bb)c0*/s;
/a+ba{0,1}?/gd;
class C20 {
    static #e = NaN;
}
[2147483649n];
