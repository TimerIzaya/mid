[8,-26513,18665,-1073741824,1073741824,1342306611,175764996,4096,3,10];
const v1 = [4294967296,-256,7,5,-2131325884,-1073741824,-65536];
const v2 = [0,53104,-9223372036854775808,512,-16,4294967296,2091379639,-1];
function f3() {
    for (let v4 = 0; v4 < 100; v4++) {
        f3();
    }
    return v2;
}
/(Exyz{0,1})/uisy;
/S/uy;
let v14 = /ju(x)(x)(x)\1/gs;
new Uint8Array(1289);
new BigUint64Array(129);
try {
    v1.b = 1;
} catch(e22) {
}
f3();
new Float64Array(1);
new Int8Array(129);
new Uint8ClampedArray(154);
const v35 = 1289;
-9007199254740991 - -25474;
-(-9007199254740991);
v14--;
-9007199254740991 || v14++;
const v46 = new Int32Array(7);
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a49;
    } catch(e53) {
    }
    try {
        this.f = a51;
    } catch(e54) {
    }
}
new F47(154, 129, 129, 154);
const v56 = new F47(154, 129, 129, 129);
new F47(7, 154, 154, 129);
const v58 = v46.buffer;
try { v58(48870, Int8Array, 129, v58); } catch (e) {}
let v60 = 8n;
typeof v56 === "string";
v60 = Int8Array;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = F0;
    try {
        this.h = -3271;
    } catch(e3) {
    }
    try {
        this.a = -3271;
    } catch(e4) {
    }
    try {
        this.d = -3271;
    } catch(e5) {
    }
}
const v6 = new F0();
const v8 = Symbol.toStringTag;
v6[v8] = v6;
const v9 = new F0();
const v10 = new F0();
v10.toString = Symbol;
const v11 = v10.h;
let {"d":v12,"h":v13,} = v10;
v10[0] = v10;
function f17(a18) {
    const o26 = {
        set e(a20) {
            try { a20(this, this, v6, v6, this); } catch (e) {}
            v6.a;
        },
        __proto__: v6,
        "f": v9,
        3: F0,
    };
    o26[Symbol.toPrimitive] = f17;
    return o26;
}
const v29 = f17(v9);
function f30(a31) {
    Object.defineProperty(v8, "a", { configurable: true, enumerable: true, set: Symbol });
    try {
    } catch(e32) {
    }
    return v6;
}
v29[Symbol.toPrimitive] = f30;
f17(f17);
const v36 = f17(v9);
class C37 extends f17 {
    [v9] = v6;
    h;
    static [v29] = v10;
    static #valueOf(a39, a40, a41) {
        for (let v42 = 0; v42 < 32; v42++) {
            v36["p" + v42] = v42;
        }
        return F0;
    }
}
C37.prototype = C37;
new C37();
const v46 = new C37();
new C37();
let v49 = new BigInt64Array();
let v50 = 171;
v50 + v50;
Int16Array.length = Int16Array;
const v53 = new Int16Array(v50);
try { v53.copyWithin(v10, v46); } catch (e) {}
v53[4012] ^= v13;
/a{1,2}?/syd;
/Rsfoo|(bar|baz)|quux/vis;
/a[a-z]/mgsyd;
try {
    const t75 = "a";
    t75.toString = v11;
} catch(e58) {
}
const v60 = new Int8Array();
v60[Symbol.toPrimitive] = f30;
try { v60.subarray(F0, v29); } catch (e) {}
let v64 = -9007199254740990;
let v65 = v60 <= v64;
({"byteLength":v50,"byteOffset":v64,"e":v49,...v65} = v53);
