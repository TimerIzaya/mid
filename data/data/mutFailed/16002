function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 536870888;
    } catch(e3) {
    }
    try {
        with (this) {
            h % h;
            const v6 = h - h;
            v6 * v6;
            -876.4741003050574 >= -876.4741003050574;
        }
        this.f = 536870888;
    } catch(e12) {
    }
}
const v13 = new F0();
const v14 = new F0();
const v15 = new F0();
const v18 = [v14,[v15,[v14,v14,v13,v14]]];
try { v18.toReversed(); } catch (e) {}
const v20 = v18?.filter;
let v21;
try { v21 = new v20(v18); } catch (e) {}
const v24 = Uint8Array.prototype;
let v25;
try { v25 = v24.slice(v15, v15); } catch (e) {}
const v26 = new v25(2);
Float64Array.prototype = v20;
const v29 = new Float64Array(127);
let v30 = 197;
const v31 = v30--;
v25 >> v31;
let v34;
try { v34 = new Uint16Array(v31, 127, v31); } catch (e) {}
let v35;
try { v35 = new v34(Float64Array, Uint16Array, v29); } catch (e) {}
try { v35.slice(v18, v29); } catch (e) {}
new Uint16Array(v30);
function f38() {
}
const v39 = [601759695];
let v40;
try { v40 = v39.find(2); } catch (e) {}
v39[0];
v40--;
const v43 = [1073741824,1073741823,1376142744,1073741825];
new F0();
[4.0,-1.0,0.21593496069677376,3.0,2.0,2.220446049250313e-16];
[-5.461251115413148,-1.111567151153791e+308,0.21397369104337227,4.0];
const v47 = [-8.806092170021778,4.126299882953223,-9.130894521468729e+307,0.9290600864953391,1.7976931348623157e+308,0.5472656262529462,9.983112971672128e+307,0.7646397561946229,-506942.1899473663];
let v48;
try { v48 = v47.group(v29); } catch (e) {}
let v49;
try { v49 = v26.lastIndexOf(v13, v30); } catch (e) {}
v49 + v49;
function f52(a53, a54, a55, a56) {
    a54--;
    a54--;
    const v59 = ~a56;
    function f61() {
        return 522675525n;
    }
    const v62 = f61?.constructor;
    let v63;
    try { v63 = new v62(v62); } catch (e) {}
    f38();
    const v66 = new v20();
    v66.buffer.byteLength;
    const v70 = v59.slice(2147483648);
    try { v70.transfer(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f61);
    const t73 = "find";
    t73[1] = "find";
    let v73;
    try { v73 = v43["find"](..."find", a56, ...v39, ...v43, ...522675525n); } catch (e) {}
    v73 <= a55;
    return v63;
}
const v75 = v48.prototype;
try { v75.constructor(v75, v75, v35, v49); } catch (e) {}
for (let v77 = 0; v77 < 10; v77++) {
    v77 >> v77;
    f52(v77, v77 << v77, f38, 522675525n);
}
%VerifyType(Float64Array);
try {
    try { ("cos").codePointAt(v21); } catch (e) {}
    f52(f52, v13, "cos", v49);
} catch(e84) {
}
%OptimizeFunctionOnNextCall(f52);
const v85 = f52();
v85.length = v85;
