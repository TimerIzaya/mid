/Ya./gvdisy;
/\p{Script=Greek}z(?=)+/vdmy;
const v2 = /d/udi;
function f3() {
    return v2;
}
function f5() {
    const v7 = new Set();
    v7.size += 10000;
    return v7;
}
f5();
function f15() {
    return Int32Array;
}
const t15 = f15().e;
new t15();
new Map();
function f21(a22, a23, a24, a25) {
    function f27() {
        return arguments;
    }
    const v29 = new Int8Array();
    v29.buffer;
    %OptimizeFunctionOnNextCall(f27);
    ("find").codePointAt(f21);
    return arguments;
}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = new Float64Array(16);
    const v40 = [1.5340415543558148e+308];
    Reflect.apply(v37.indexOf, v37, v40);
}
const v43 = [11,-2147483648,51391,-2,1073741824,65536];
class C44 {
    constructor(a46, a47) {
        1073741825 == 0n;
        const v51 = [1073741824,1073741823,1376142744,1073741825];
        function f52(a53, a54, a55, a56) {
            function f57() {
                try {
                    v51.forEach(a54);
                    let v61 = BigUint64Array * 536870887;
                    v61--;
                } catch(e63) {
                }
                return a56;
            }
            return f57();
        }
        f52(f52, v51, f52, v51);
        for (let v66 = 0; v66 < 100; v66++) {
            class C67 {
                o(a69, a70, a71, a72) {
                    const o75 = {
                        "maxByteLength": -2,
                    };
                    new ArrayBuffer(536870912, o75);
                }
            }
        }
        [F33] = v43;
    }
}
new C44();
