const v0 = [-65536,-1073741824,-106203397];
const v1 = [-8,30311,3,128];
function f2() {
    const o3 = {
    };
    new Proxy(v1, o3);
    return o3;
}
Object.defineProperty(v1, "toString", { writable: true, value: f2 });
const v6 = [9,-7,4];
function f7(a8) {
    const o23 = {
        "h": v1,
        8: v0,
        ...v0,
        [v1](a10) {
            a10.length;
            const v16 = 1019742121 >> 1019742121;
            Math.abs(this);
            ~-12;
            let v19 = +v16;
            --v19;
            let v21 = v16 && v19;
            --v21;
            return -12;
        },
    };
    return o23;
}
const v24 = f7(v1);
const v25 = f7(v0);
[[f7(v0),["valueOf",v0,v6]],v24];
[2147483648];
const v35 = /(l{z})/s;
v35.b = v25;
function F36(a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(v35); } catch (e) {}
    a38.b = a38;
}
new F36(v35);
new F36(v35);
function f43(a44, a45) {
    class C46 {
        constructor(a48, a49) {
        }
    }
    const o51 = {
    };
    o51.type = f2;
    gc(o51);
    for (let v53 = 0; v53 < 50; v53++) {
        new C46();
    }
}
new Promise(f43);
class C57 {
}
const v58 = new C57();
const v59 = [v58];
try { Uint8Array.from(v59); } catch (e) {}
function f62(a63, a64) {
    function f65() {
    }
    function f66(a67) {
    }
}
new Promise(f62);
