function f0() {
}
class C1 extends f0 {
    static {
        const v4 = f0 !== this ? f0 : this;
        try {
            v4.h = this;
        } catch(e5) {
        }
    }
    constructor() {
        super();
        const t12 = "abs";
        t12[1] = "abs";
        try { ("number").toUpperCase(); } catch (e) {}
    }
}
new C1();
new C1();
new C1();
let v16 = 4294967296;
v16--;
new Uint8ClampedArray(3369);
const v23 = new Uint32Array(257);
v23[87] = v23;
new Int32Array(257);
function f27() {
    const o32 = {
        8: 0.043152456200264866,
        get a() {
            Math.acos(0.043152456200264866);
        },
    };
    return o32;
}
f27.d = f27;
const v33 = f27();
const v34 = f27();
257 + 257;
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this?.constructor;
    try { new v43(a40, a39, a42, a42); } catch (e) {}
    a39[8];
    a40[8];
    this.d = 257;
    this.h = a40;
}
const v47 = new F37(v34, v33);
v47.length;
function f50(a51, a52, a53) {
    function f55(a56) {
    }
    a51[1] = a53;
}
const v59 = [v47];
v59[0] = v59;
const o60 = {
    "arguments": v59,
    "type": "function",
};
const v61 = new Worker(f50, o60);
try { v61.terminate(); } catch (e) {}
new Int8Array(220);
new Uint32Array(16);
const v8 = new Uint16Array(Uint16Array);
const v11 = new Uint8ClampedArray(127);
const v14 = new Float64Array(512);
new Uint8Array(1);
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.constructor;
    let v26;
    try { v26 = new v25(a24, a23); } catch (e) {}
    a23 - a23;
    a24.caller = a24;
    const v28 = a23 ^ a23;
    a23 >> a23;
    try {
        this.h = 628n;
    } catch(e30) {
    }
    try {
        this.f = 3n;
    } catch(e31) {
    }
    h = Int8Array;
    function F33(a35, a36, a37, a38) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a35;
        } catch(e39) {
        }
    }
    new Uint32Array(v28, 35294n, 1, 512);
    new F33(v8, 3n, 512, a23);
    new F33(Uint8ClampedArray, v26, v25, 127);
    try {
        this.d = Float64Array;
    } catch(e43) {
        const o47 = {
            "execution": "sync",
            "type": 3n,
        };
        gc(o47);
    }
}
let v49;
try { v49 = new F21(3n, 16); } catch (e) {}
v49.f = v49;
const v50 = new F21(3n, 35294n);
let v51 = new F21(3n, v50);
let v52 = 6;
v52--;
try { v14.reverse(); } catch (e) {}
Math.log10(127);
const v62 = v51++;
!127;
const v64 = 127 ^ v62;
Math.tan(127);
v62 && v64;
v11.prototype = Int16Array;
Int32Array.BYTES_PER_ELEMENT = Int32Array;
[1000000000.0,-1000.0,-690.3798026183179,8.153290522672417e+306,2.0,-1000000.0,-1000000000.0];
[172808.41555842035,6961.648758031544,-1000000000.0,-3.0,-3.473146185040173e+307,-421.3362201856155,-879.0794661120945,-5.0,-2.4710773994464814e+307,1000000000000.0];
[1000000.0,5.0,1000.0,0.5082630760435969];
try { (3n).push(10); } catch (e) {}
try { new Int32Array(); } catch (e) {}
try { F21(); } catch (e) {}
const o77 = {
    "execution": "sync",
};
o77.execution;
