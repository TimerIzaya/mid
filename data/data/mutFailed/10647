class C3 {
    8;
    static toString(a5, a6) {
        const t3 = "prototype";
        t3[11] = a5;
        return "prototype";
    }
    static 257;
    static f;
    ["prototype"] = "prototype";
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
function f16(a17, a18, a19, a20) {
    const o35 = {
        1: a19,
        ...a20,
        4: a19,
        o(a22, a23, a24) {
            let v25;
            try { v25 = new a22(); } catch (e) {}
            v25 - v10;
            [-455.6084419268374,-4.099410306805369,-1.5302037086922046e+308];
            [-5.0,0.3776993554681861,Infinity,-1.0643491930170882e+308,1000000000000.0,313324.94809946185,0.0];
            [-84.83796583222909,-1e-15,1.7976931348623157e+308,Infinity,-7.231611637617594e+307,-5.0,-1000000.0,NaN,0.3399748281657675,-3.0];
            const o33 = {
                "execution": "sync",
                "type": "minor",
            };
            gc(o33);
            return "sync";
        },
    };
    return o35;
}
f16(-2.0, "prototype", -2.0, C3);
f16(562.5491781073272, "prototype", v12, "prototype");
f16(1e-15, v11, -2.0, "1037931176");
new Int32Array(-65537);
new Uint8ClampedArray(3776);
new BigInt64Array(10);
new Uint16Array(127);
new Uint8Array(255);
new BigInt64Array(128);
[];
const v60 = new Int8Array(16);
v60.toSorted();
function f62() {
}
class C63 {
    o(a65, a66) {
        for (const v68 of "bigint") {
        }
        f62();
    }
}
[f62,[f62],C63];
const v75 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
const v78 = new BigInt64Array(205);
const v79 = v78[205];
try {
    v79.toString = v79;
} catch(e80) {
}
const v81 = [-1803975943,57715,-9007199254740992];
[2147483647,13,536870912,-13,-1024,536870887];
const v86 = new Uint8ClampedArray(1000, v11, 8.806760127177498);
+(v86 ^ 3) + -3.0;
const v94 = ["undefined",8.806760127177498,v81,345168.6487633812,"undefined"];
[1000.0,8.806760127177498,v94,v75,v81];
[v94];
const v100 = (a101, a102, a103) => {
    try { ("function")["toUpperCase"](); } catch (e) {}
    "boolean" ^ a101;
    class C108 {
        8 = 6;
    }
    return a103;
};
Symbol.unscopables;
class C111 {
}
const o114 = {
};
const v116 = new ArrayBuffer(2, o114);
const v118 = new Int8Array(v116);
[-4096,13,16,6] + v118;
Symbol.iterator;
const v124 = [];
function f125() {
    const o129 = {
        toString() {
            super[this];
        },
        ...v124,
        n() {
            return this;
        },
    };
}
f125();
new Uint16Array(4294967295, 4294967295);
const o138 = {
    toSorted() {
        const o137 = {
        };
    },
};
const v140 = new Int32Array();
function F141(a143, a144, a145) {
    if (!new.target) { throw 'must be called with new'; }
    const v146 = this?.constructor;
    try { new v146(Uint16Array, a145, a145); } catch (e) {}
    a143 * a143;
    a145++;
    this.d = a143;
    this.g = Int32Array;
}
new F141(256, v140, 4294967295);
class C152 {
    constructor(a154, a155, a156) {
    }
}
Math.asinh();
new Float32Array(Float32Array, Float32Array);
