function F3() {
    if (!new.target) { throw 'must be called with new'; }
}
const v5 = new F3();
const t4 = 1024;
t4(v5, 512);
function f7() {
}
const v8 = [601759695];
const v9 = [1073741824,1073741823,1376142744,1073741825];
function f10(a11, a12, a13, a14) {
    function f16() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
    }
    f7();
    const v26 = new Int8Array();
    v26.buffer.slice();
    %OptimizeFunctionOnNextCall(f16);
    let v31;
    try { v31 = v9["find"](..."find", a14, ...v8); } catch (e) {}
    v31 <= a13;
    return arguments;
}
f10();
class C37 {
    constructor(a39, a40, a41, a42) {
        a42 * a42;
        try {
            function F44(a46) {
                if (!new.target) { throw 'must be called with new'; }
                const o48 = {
                    "b": 1e-15,
                };
                delete o48.b;
            }
            super.setUint16("boolean", a41, "S5swr", 1024);
        } catch(e51) {
        }
    }
    static f;
    ["512"] = "S5swr";
    2300 = "512";
    static 10;
}
const v52 = new C37(1024, 9007199254740992, "512", 512);
v52[2300];
const v54 = new C37(1024, 1024, 9007199254740992, 1024);
v54[2300];
const v56 = new C37(1024, 9007199254740992, 9007199254740992, 512);
v56[2300];
class C60 {
    [9007199254740990] = -624806.1246088534;
}
const v61 = new C60();
const v62 = new C60();
const v63 = new C60();
function f64(a65, a66, a67, a68) {
    const o69 = {
        ...a68,
        __proto__: v62,
    };
    return a68;
}
f64(f64, v61, v63, v62);
-0.0;
function F76() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1489843090;
    } catch(e79) {
    }
}
const v80 = new F76();
const v81 = v80?.constructor;
try { new v81(); } catch (e) {}
const v83 = new F76();
const v84 = new F76();
v84.g = v84;
function F85(a87) {
    if (!new.target) { throw 'must be called with new'; }
    const v88 = this?.constructor;
    try { new v88(v83); } catch (e) {}
    a87.g;
    try {
        this.a = v80;
    } catch(e91) {
    }
}
let v92;
try { v92 = new F85(F85); } catch (e) {}
const v93 = new F85(v84);
v93.a = v93;
const v94 = new F85(v84);
v94.a = v94;
const v95 = [-1335654396,-2,-9,-4294967295,-15,-16];
try { v95.reduce(v95); } catch (e) {}
let [,...v98] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
try { v98.push(v56); } catch (e) {}
try { v92.unshift(F85); } catch (e) {}
try { ("-268435456").concat(1024); } catch (e) {}
let v103;
try { v103 = ("-268435456").codePointAt(F76); } catch (e) {}
v103 - v103;
try { ("function")["-268435456"](); } catch (e) {}
([2147483647,4294967296,-7,-277691152,-616812028,-788936298])[1];
[38857,-4294967296,1073741824,-4096,33257,2];
function F111(a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    const v115 = this.constructor;
    try { new v115("-268435456", a114); } catch (e) {}
    a113.prototype;
    a114.arguments = a114;
}
const v118 = new F111(F111, F111);
const v119 = v118?.toLocaleString;
try { new v119(); } catch (e) {}
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
function f122() {
    return 3.5885237423067196;
}
1042950492 >> 1042950492;
function f125(a126, a127) {
    return f125;
}
const v128 = f125(f125, f125);
class C129 extends f125 {
    constructor(a131, a132, a133) {
        super();
        const v134 = `
            try { a131(a133, v128); } catch (e) {}
        `;
        eval();
    }
}
class C145 {
    static #n(a147, a148, a149, a150) {
        this[257] *= -5;
    }
}
function f153(a154, a155) {
    return this == this ? this : this;
}
