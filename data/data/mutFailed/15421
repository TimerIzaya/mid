function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1073741823;
    } catch(e3) {
    }
    try {
        this.g = F0;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new v5();
const v7 = new F0();
function F8(a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a10;
    } catch(e11) {
    }
    try {
        this.f = v5;
    } catch(e12) {
    }
    try {
        this.e = a10;
    } catch(e13) {
    }
}
const v14 = new F8(v5);
const v15 = new F8(v5);
const v16 = new F8(v7);
class C17 {
    static get a() {
        function f19(a20, a21, a22, a23) {
            a23 %= a23;
            return this;
        }
        const v24 = f19(F8, this, v5, v16);
        super[v24] = v24;
        try {
            super.m(v14, v5, v14);
        } catch(e26) {
        }
        return F0;
    }
    static [v6];
    static [F0] = v6;
}
const v27 = new C17();
new C17();
new v7();
function f30() {
    return v27;
}
class C31 extends C17 {
    #e = v15;
    static d = f30;
    toString(a33, a34) {
        a34 = v27;
        try {
            super.setMonth(F8, F8);
        } catch(e36) {
        }
        return this;
    }
    constructor(a38, a39, a40) {
        super();
        const v41 = super.d;
        try {
            v41.toString = a38;
        } catch(e42) {
        }
    }
}
new C31(v5, v5, v15);
const v44 = new C31(v7, v5, v14);
new C31(v44, v7, v14);
const v54 = new Uint8ClampedArray(16);
v54[10] = v54;
const v56 = -1322;
const v58 = new Uint8ClampedArray(1322);
const v59 = v58[315];
function F60(a62, a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "536870889";
    } catch(e66) {
    }
    try {
        this.b = a65;
    } catch(e67) {
    }
}
new F60(1073741824n, 1073741824n, 257n, "6");
const v69 = new F60(1073741824n, 257n, 257n, v56);
const v70 = new F60(v59, 257n, 257n, "536870889");
new BigUint64Array(6);
3768 >>> Uint8ClampedArray;
const v78 = new BigInt64Array(4046);
v78[123];
-115;
function f83(a84, a85) {
    a84++;
    a85 + a85;
    const v88 = a84++;
    v88 >> v88;
    try {
        v69.toString = a85;
    } catch(e90) {
    }
    Object.defineProperty(v70, v70, { configurable: true, enumerable: true, get: f83 });
    let o92 = {
        "d": a84,
        ...a84,
        get e() {
            return a85;
        },
    };
    [,...o92] = v78;
    a85[4046];
    const o96 = {
        "maxByteLength": 3035,
    };
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f83(4046, 3768);
try { Uint8ClampedArray.bind(f83); } catch (e) {}
