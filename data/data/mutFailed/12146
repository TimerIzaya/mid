let v1 = new WeakMap();
function f2(a3, a4) {
    const o9 = {
        "a": a4,
        "c": WeakMap,
        valueOf(a6) {
            a6?.[2];
            try {
                a3.valueOf = a6;
            } catch(e8) {
            }
            v1 = v1;
            return a4;
        },
    };
    return o9;
}
const v10 = f2(v1, WeakMap);
const v11 = f2(f2, v1);
f2(v11, v11);
class C13 {
    static [v1] = v11;
    static set a(a15) {
        v10[v11];
        try {
            f2(v1, v1);
        } catch(e18) {
        }
    }
    f;
    static [C13];
    #c;
}
new C13();
new C13();
new C13();
const v28 = new Date(-4.0);
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
}
const v36 = new F32(5, 5);
let v39;
try { v39 = Array.bind(-195224844); } catch (e) {}
const v41 = [1024];
Reflect.construct(Date, v41, v39);
const v43 = v28[v41];
const v46 = new Uint8Array(10);
let v47;
try { v47 = v46.reduce(129); } catch (e) {}
function f48() {
    let v51 = -65535;
    const v52 = v51 / v51;
    const o90 = {
        next() {
            v51--;
        },
        m(a56) {
            try { a56.next(); } catch (e) {}
            const o58 = {
            };
            try {
                o58.e = v51;
            } catch(e59) {
                const v63 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v63, o58);
            }
            super[v36];
            try { v43["getDate"]("", Float64Array); } catch (e) {}
            try {
            } catch(e68) {
            }
            let v70;
            try { v70 = ("EV").link(v52); } catch (e) {}
            let v71 = 0;
            class C72 {
                o(a74, a75, a76, a77) {
                    return v71;
                }
            }
            const v80 = new Int8Array(3938);
            let v81 = 3;
            let v83 = 0 >> 0;
            [...v81] = v80;
            try {
                let v84 = 0;
                do {
                    ({"c":v47,"d":v71,...v83} = v70);
                    v84++;
                } while (v84 < 5)
                const o88 = {
                };
            } catch(e89) {
            }
        },
    };
    try { o90.m(o90); } catch (e) {}
    class C93 {
    }
    const v94 = new C93();
    new Float32Array(v94, "nt", Float32Array);
    const t100 = "nt";
    const v97 = delete t100[v43];
    let v98;
    try { v98 = v94.floor(v97); } catch (e) {}
    for (const v99 in v98) {
    }
}
v43();
f48();
function f102(a103, a104, a105, a106) {
}
function f107(a108, a109) {
    const o112 = {
        set b(a111) {
        },
    };
}
function F113(a115, a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e118) {
}
