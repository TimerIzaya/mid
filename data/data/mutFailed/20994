try { new Uint16Array(Uint16Array, 268435440, -7); } catch (e) {}
const v5 = new Uint16Array(108);
const v6 = [-25552.232795396703,-1e-15,-4.0,4.0,-1000000000.0,Infinity,5.418706939384283e+306,3.0,-5.0,1.7434284636811316e+308];
try { v6.toReversed(); } catch (e) {}
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
}
const v13 = [Worker,F8,v6];
function f16() {
    const o19 = {
        501: null,
        "a": null,
        __proto__: v13,
        "h": 108,
        "c": v13,
        "b": f16,
        14: v13,
        "h": null,
        [null]() {
            super.b;
        },
        "f": null,
        9: null,
        "e": null,
        ...null,
    };
    return o19;
}
const v24 = new Map();
function f25(a26) {
    const v27 = a26.toString(v24);
    class C28 extends Map {
        [v27] = f25;
    }
    const v29 = new C28();
    const o30 = {
        ...v24,
        "f": Map,
        "h": a26,
        [-2]: v24,
        ...v29,
    };
    return o30;
}
const v32 = new WeakSet();
class C33 {
    n(a35) {
    }
}
C33.prototype = C33;
const v36 = new C33();
const v37 = new C33();
function f38(a39, a40, a41, a42) {
    const v43 = a40?.constructor;
    try { new v43(); } catch (e) {}
    const o45 = {
        "e": v32,
        "b": v32,
    };
}
new Uint8Array(165);
const v51 = f38(C33, v37, C33, f38(v37, v36, v32, v32));
f38(v51, v37, v37, v51);
function f54(a55, a56, a57) {
    function f59(a60) {
        try {
            new WeakSet(v6);
        } catch(e62) {
        }
    }
    this.onmessage = f59;
}
const v68 = [-9223372036854775808,"function",null];
const o69 = {
    "arguments": v68,
    "type": "function",
};
const v70 = new Worker(f54, o69);
65537 - 65537;
65537 == 4096n;
class C79 {
}
new C79();
const v81 = new C79();
const v82 = v81?.__lookupGetter__;
try { new v82(v5); } catch (e) {}
try { Uint8ClampedArray.pop(); } catch (e) {}
function F85() {
    if (!new.target) { throw 'must be called with new'; }
}
class C87 {
    static {
        try { new this(); } catch (e) {}
        for (let v90 = 0; v90 < 25; v90++) {
            v90 + v90;
            function f92() {
            }
            const v93 = [1073741824,1073741823,1376142744,1073741825];
            try { v93.at(v70); } catch (e) {}
            function f95(a96, a97, a98, a99) {
                return a96;
                f92();
                new Int8Array();
                new Float64Array(2534);
                const o116 = {
                    toString(a108) {
                        function f110(a111, a112, a113, a114) {
                        }
                        f110(-4294967297n, f110);
                    },
                };
                class C117 {
                }
                const v118 = [-1024];
                for (let v119 = 0; v119 < 5; v119++) {
                    delete v118[v119];
                }
                const v122 = new Uint32Array(4);
                0 <= 0;
                const v126 = new Int8Array(0);
                for (const v127 in v126) {
                }
                [v122];
                function f129(a130, a131) {
                }
                const o132 = {
                };
            }
            f95.name = f95;
            for (let v133 = 0; v133 < 5; v133++) {
                f95();
            }
        }
    }
}
const v135 = C87?.constructor;
try { new v135(f38); } catch (e) {}
1 ^ 1;
const v142 = [-1.5424212036356715e+308];
const v143 = v142.shift();
v143 === v143;
v142[536870887n] = v142;
(108)[3];
for (let v148 = 0; v148 < 5; v148++) {
    v148--;
    function f150() {
        return v148;
    }
    f150.prototype = f150;
    const v151 = f150();
    v151 == v151;
    f150.a = f150;
    f150.a = -1609839612;
}
Symbol.iterator;
const v159 = new BigUint64Array(1448);
function f160(a161, a162, a163) {
    a161--;
    return a162;
}
const v165 = [-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308];
v165[7];
const v167 = v165.reduce(f160);
v167 & v167;
const v169 = v159.toLocaleString(v167);
try { v169.concat(null); } catch (e) {}
try { ("bigint").anchor(127); } catch (e) {}
"n" == "n";
const v176 = ["n"];
try { v176.with(v176, v176); } catch (e) {}
