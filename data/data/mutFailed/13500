const o1 = {
};
class C3 extends Array {
}
const v4 = C3?.constructor;
try { new v4(o1); } catch (e) {}
const v6 = new o1();
const v7 = v6.concat(o1);
new Uint16Array(142);
const v12 = new Float64Array(1000);
try { Int32Array.bind(o1); } catch (e) {}
const v16 = new Int32Array(232);
function f17() {
    return v12;
}
class C18 {
    a = f17;
    2147483649;
    static [142] = 1000;
    static [Float64Array] = f17;
    static 2179771059;
    static {
        %VerifyType(f17);
    }
    6;
    #b = v16;
    static f = v4;
}
C18[142] = C18;
new C18();
new C18();
new C18();
const v23 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f24(a25, a26, a27, a28) {
    let v29;
    try { v29 = a28(a28, a28, a25, a25); } catch (e) {}
    const v30 = /(?:a*)+q(?<a>.)/guds;
    for (let [i34, i35] = (() => {
            v29 * 0;
            return [0, 10];
        })();
        (() => {
            i35 >> v12;
            const v37 = i34 < i35;
            v37 && v37;
            return v37;
        })();
        (() => {
            const v41 = i35--;
            v41 >>> v41;
        })()) {
        i34 + i34;
        for (let v46 = 0; v46 < 5; v46++) {
            const v47 = (142).constructor;
            try { v47(v30, v30); } catch (e) {}
            v23.constructor;
            v7.constructor;
            C18.lastParen;
            const v53 = [i35,i35,i35,i35,i35];
            v53[4];
            v53 > -12n;
        }
    }
    return v23;
}
for (let v56 = 0; v56 < 10; v56++) {
    v56 === v56;
    -f24(v56, v23, v56, f24);
}
