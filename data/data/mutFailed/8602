function f0() {
}
function f4(a5, a6) {
    try { a5.indexOf(a6); } catch (e) {}
    try { a6.small(); } catch (e) {}
    const o9 = {
        ["sort"]: "sort",
        "a": a5,
        [a5]: a6,
        "c": a5,
        "d": a6,
        "f": "toString",
        ...a5,
        [a6]: f0,
        "g": "toString",
        "e": a5,
        "b": "toString",
    };
    return o9;
}
const v10 = f4("HUS", "HUS");
let v11;
try { v11 = v10.valueOf(); } catch (e) {}
f4("sort", "HUS");
const v13 = f4("sort", "toString");
class C15 extends f0 {
    get d() {
        let v18;
        try { v18 = arguments.for(arguments, arguments, this); } catch (e) {}
        try {
            super.n("toString", v18, v18, v13, this);
        } catch(e20) {
        }
        return arguments;
    }
    g = v10;
    static b = "sort";
}
try { new v10(); } catch (e) {}
const v22 = new f0();
v22.d = v22;
new v11();
const v24 = new C15();
v24.d = v24;
const v26 = new Int32Array();
const v30 = new Uint8ClampedArray(129);
try { v30.slice(v24, "sort"); } catch (e) {}
const v32 = new Int32Array(3208);
const t48 = v26.constructor;
new t48(v30);
Int32Array.from(v32);
