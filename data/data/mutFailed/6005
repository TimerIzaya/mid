const o1 = {
};
const v3 = [-9223372036854775808,1415432483,1];
function f6() {
}
function f7(a8, a9) {
    const v11 = Symbol.toPrimitive;
    a8[v11] = f6;
    const o16 = {
        "e": a8,
        "g": a9,
        [v11]() {
        },
        "maxByteLength": 60241,
        get d() {
        },
        "h": -1000000.0,
        ...a8,
        "b": v3,
        "d": Int16Array,
        [60241](a15) {
        },
    };
}
f7(v3);
new Int16Array(1);
try {
} catch(e22) {
}
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
new Uint8ClampedArray(12);
new Float32Array(177);
const v38 = new Float64Array();
v38.buffer.resize(Float64Array);
const v42 = new BigUint64Array();
const v43 = /anVXYFzN(x)(x)(x)\3/gvdms;
try { v42.reduceRight(v43); } catch (e) {}
Math.cbrt(11 - 11);
const v51 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v52 = 0; v52 < 25; v52++) {
    v51["p" + v52] = v52;
}
const o81 = {
    toString(a56, a57) {
        function F58(a60, a61, a62, a63) {
            if (!new.target) { throw 'must be called with new'; }
            class C64 {
            }
            const v65 = new C64();
            function F66(a68, a69) {
                if (!new.target) { throw 'must be called with new'; }
                const v70 = this?.constructor;
                try { new v70(a68, v65); } catch (e) {}
            }
            let {"c":v72,} = Int16Array;
        }
        const v73 = new F58();
        ([-8n]).toLocaleString();
        [[5],Uint8Array];
        return v73;
    },
};
try { (14).toString(); } catch (e) {}
