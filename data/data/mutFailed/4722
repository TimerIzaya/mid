const v0 = [-43867,16,9007199254740991];
const v1 = [4294967296,-128,-9376];
const v2 = [357913402,-2147483649,56267,-1363316597];
[v0];
const v4 = [v0,v1,v2];
const v5 = [v4,v4,v1,v0,v1];
class C6 {
    [v2] = v5;
    #d = v4;
    1673443520 = v2;
    constructor(a8, a9, a10, a11) {
        v5 && a9;
        a8[v4];
        typeof a11 === "undefined";
    }
    static [v2];
    static #e;
    static 268435456;
    d = v2;
    3 = v0;
}
new C6(v1, v5, v2, v2);
new C6(v2, v4, v5, v0);
new C6(v2, v5, v2, v1);
const v39 = [];
class C40 {
}
const v41 = new C40();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a45;
}
const v46 = new F42(v41, v39);
function f47(a48, a49) {
}
const v52 = [v46];
const o53 = {
    "arguments": v52,
    "type": "function",
};
new Worker(f47, o53);
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new Uint16Array();
const v72 = new Float32Array();
try { v72.filter(); } catch (e) {}
try {
const t0 = -536870912;
t0();
} catch (e) {}
new d8();
const o89 = {
    m() {
        for (let v82 = 0; v82 < 10; v82++) {
            v82 < 10;
        }
    },
};
try { Uint16Array(); } catch (e) {}
new Uint16Array();
function F93(a95, a96, a97) {
    if (!new.target) { throw 'must be called with new'; }
    const v98 = this.constructor;
    try { new v98(Uint16Array, a97, a97); } catch (e) {}
    a95 * a95;
    this.d = a95;
}
new F93(F93, 256);
class C103 {
}
const v106 = new Uint32Array(186);
Float64Array > v106;
