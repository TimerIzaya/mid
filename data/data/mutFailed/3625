class C1 {
    set h(a3) {
    }
    b;
}
7 & 7;
536870887 - 536870887;
1941215480n <= 1941215480n;
Map.name = Map;
new Map();
class C19 {
    g;
    constructor() {
        const v21 = this.constructor;
        try { new v21(); } catch (e) {}
    }
}
function f24() {
    return f24;
}
const o31 = {
    [f24]() {
        const v28 = new Uint16Array(2);
        new Uint16Array(v28);
        class C30 {
        }
    },
};
~4096;
class C34 {
    #d = 4096;
    static {
        try { this.toString(); } catch (e) {}
        try {
            this.#d;
        } catch(e38) {
            e38.h = e38;
        }
    }
}
const v39 = [o31];
const v40 = [v39];
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    a43[0];
    const v48 = a43.lastIndexOf(a43, a44);
    v48 >> v48;
}
const v50 = new F41(v39);
const v51 = v50?.constructor;
try { new v51(C1, 3, -2147483648n, C1); } catch (e) {}
Date.toString = Symbol;
class C55 extends Date {
}
try { C55.parse(-815114589); } catch (e) {}
function f57(a58, a59) {
    return a59;
}
try { ("function").fontcolor("function"); } catch (e) {}
const v63 = ["function",v40];
const o64 = {
    "arguments": v63,
    "type": "function",
};
o64.arguments = o64;
new Worker(f57, o64);
