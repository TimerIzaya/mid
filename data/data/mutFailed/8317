function f0() {
    const o15 = {
        ["-2023905775"]: -1.0,
        "a": -1.0,
        [NaN](a5, a6) {
            function F7(a9) {
                if (!new.target) { throw 'must be called with new'; }
                const v10 = this.constructor;
                v10.prototype;
                v10.caller = v10;
                try { new v10(); } catch (e) {}
            }
            a6[2] %= -1.0;
            const v13 = a5 >> NaN;
            try { ("-2023905775").trimLeft(); } catch (e) {}
            a6 = this;
            return v13;
        },
        [NaN]: "-2023905775",
        "d": -1.0,
    };
    return o15;
}
f0();
const v17 = f0();
f0();
const v19 = /p/dsy;
function* f20(a21, a22, a23) {
    return a22;
}
try {
} catch(e24) {
}
const v25 = /x/gmy;
const v26 = /n7/gvimy;
class C27 extends f0 {
    constructor(a29) {
        for (let v30 = 0; v30 < 32; v30++) {
            "p" + v30;
            function f33() {
                for (let v34 = 0; v34 < 5; v34++) {
                }
                return f33;
            }
            f33();
        }
    }
    static #g = f0;
    /*
    constructor(a37, a38, a39) {
        super();
        v26[10] = this;
        [a38,a38,a38];
        [[a37,f0,a39],a39,v26,a37,v19];
    }
    */
    #d = f0;
    [v19] = v17;
    h;
}
const v43 = new C27(C27, v26, v26);
const v44 = new C27(f0, v25, v43);
new C27(v17, v19, v44);
const v47 = gc.constructor;
try { v47(gc); } catch (e) {}
const o57 = {
    "execution": "async",
    "apply": f0,
    ..."minor",
    "b": v43,
    "execution": "async",
    [v25](a52, a53, a54, a55) {
        super.test();
    },
    "type": "minor",
};
gc(o57);
new Int8Array(1073741823);
