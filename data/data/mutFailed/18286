class C3 {
    static set a(a5) {
        for (const v6 in "match") {
            try {
                a5.d = this;
            } catch(e7) {
            }
        }
    }
    ["mkxlY"];
    ["toUpperCase"] = "mkxlY";
    ["match"];
}
const v8 = new C3();
const v9 = new C3();
v9.fuck = "match";
const v10 = new C3();
function f11(a12, a13) {
    a12.d |= a12;
    a12 !== "mkxlY" ? a12 : "mkxlY";
    return a13;
}
Object.defineProperty(v10, "toString", { writable: true, enumerable: true, value: f11 });
"toUpperCase" << v10;
("match")["match"];
try {
    v9.fuck(false, -1000000000000.0);
} catch(e21) {
}
new Uint16Array(2781);
new Uint8ClampedArray(127);
new Uint8Array(2795);
function f32() {
    return f32;
}
function f33(a34) {
    class C35 {
        constructor(a37, a38) {
            function f39(a40) {
                return C35;
            }
            const o43 = {
                "type": "function",
            };
            new Worker(f39, o43);
        }
    }
    return f32;
}
f32[Symbol.toPrimitive] = f33;
const o48 = {
    [f32]() {
    },
};
const v49 = [o48];
Object.defineProperty(v49, "toJSON", { writable: true, value: true });
const v50 = [v49];
function f51(a52, a53) {
    return a53;
}
const v56 = ["function",v50];
const o57 = {
};
o57.setPrototypeOf = v8;
const v59 = new Proxy(Worker, o57);
v59 === v59;
const o61 = {
    "arguments": v56,
    "type": "function",
};
new Worker(f51, o61);
