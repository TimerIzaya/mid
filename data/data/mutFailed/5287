function f2() {
    const t1 = 79;
    t1[1] = Float64Array;
    return 79;
}
Int16Array[Symbol.iterator] = f2;
const v6 = new Int16Array(79);
try { BigInt64Array.from(v6); } catch (e) {}
const v10 = new BigInt64Array(5);
const v11 = v10.BYTES_PER_ELEMENT;
v11 & v11;
BigUint64Array[0] = f2;
BigUint64Array.prototype = BigUint64Array;
try { new BigUint64Array(BigUint64Array, 79, 5); } catch (e) {}
try { new BigUint64Array(Int16Array, v10, Int16Array); } catch (e) {}
const v17 = new BigUint64Array(257);
v17[139];
Uint8Array.prototype = Uint8Array;
Uint8Array.g = Uint8Array;
new Uint8Array(2);
Int32Array.length = Int32Array;
const v24 = new Int32Array(1000);
v24.constructor = Symbol;
v24[330] = v24;
const v25 = v24?.constructor;
try { new v25(v24, Uint8Array, 1000); } catch (e) {}
Float64Array.d = Int32Array;
Float64Array.d = Float64Array;
const v29 = new Float64Array(75);
v29.constructor = Symbol;
const v30 = v29?.constructor;
v30.length = v30;
let v31;
try { v31 = new v30(2, 75, 75); } catch (e) {}
try { v31.entries(); } catch (e) {}
function f33() {
    const o38 = {
        [-1000000.0]: 0.0,
        set e(a37) {
        },
    };
    return f33;
}
f33.name;
const v40 = f33();
v40[Symbol.toPrimitive] = Symbol;
let v43;
try { v43 = new v40(); } catch (e) {}
v43[Symbol.toPrimitive] = f33;
v43.length = v43;
try { v43(); } catch (e) {}
const v47 = f33();
try { v47(); } catch (e) {}
const v49 = /4VL[a-zA-Z0-9]/uimy;
const v50 = /ufoo(?!bar)baz/ums;
v50.dotAll = v50;
class C51 {
    static [f33] = v47;
}
C51.prototype = C51;
let v52;
try { v52 = new C51(); } catch (e) {}
const v53 = v52?.constructor;
try { new v53(); } catch (e) {}
try { C51.apply(BigUint64Array, v50); } catch (e) {}
v50[-2] &&= v49;
