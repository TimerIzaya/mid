const v0 = /(a)/vdimy;
/pB/dsy;
const v2 = /A/gvim;
function f3() {
    return v2;
}
new Uint32Array(1020);
const v9 = new Uint8ClampedArray(1);
new Uint16Array(1538);
class C13 extends Uint8ClampedArray {
    c;
    constructor(a15, a16, a17) {
        super(a17, a17, a16);
        const o18 = {
            [v9]: 1538,
            [Uint32Array]: a16,
        };
        function F20(a22) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v23 = new F20();
        const v24 = F20 >>> 536870887;
        with (v23) {
            typeof v24;
        }
        try { o18.push(a15); } catch (e) {}
        const o27 = {
            "construct": f3,
            "defineProperty": f3,
            "get": f3,
            "has": f3,
            "isExtensible": f3,
            "preventExtensions": f3,
        };
        new Proxy(v0, o27);
    }
}
new C13(v2, 1, 1538);
new C13(v2, 1020, 1);
new C13(v2, 1020, 1538);
const v33 = -Infinity;
function f34() {
    const o35 = {
    };
    return o35;
}
const v36 = f34();
v36.a = v36;
const v37 = f34();
for (let v38 = 0; v38 < 25; v38++) {
    const v39 = [601759695];
    const v40 = [1073741824,1073741823,1376142744,1073741825];
    function f41(a42, a43, a44, a45) {
        a43.h = a43;
        a42[4] = a43;
        a43[4] = v33;
        const v46 = v39.e;
        try { v46(); } catch (e) {}
        try { v40["find"](..."find", a45, ...v39, ...v40); } catch (e) {}
        return a43;
    }
    for (let v50 = 0; v50 < 5; v50++) {
        f41(v36, v37);
    }
}
