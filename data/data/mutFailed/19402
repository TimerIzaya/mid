class C3 {
    #g = 0.0;
    toString(a5, a6) {
        let v4 = this;
        v4 = "R8nL";
        const v8 = Symbol.iterator;
        const o17 = {
            [v8]() {
                let v10 = 10;
                const o16 = {
                    next() {
                        v10--;
                        const v14 = v10 == 0;
                        const o15 = {
                            "done": v14,
                            "value": v10,
                        };
                        return o15;
                    },
                };
                return o16;
            },
        };
        return o17;
    }
}
new C3();
new C3();
new C3();
new WeakSet(WeakSet, 0.0);
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
}
const v32 = new F27();
function f33(a34, a35, a36, a37) {
    try { a34(v32); } catch (e) {}
    try { a36(); } catch (e) {}
    const o43 = {
        n(a41, a42) {
            return a37;
        },
    };
    return a37;
}
for (let v44 = 0; v44 < 500; v44++) {
    f33();
}
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    function f50(a51, a52) {
        const v53 = [1984879050,0,-8575,7,1073741825];
        function f54(a55, a56, a57, a58) {
            return ("Vre").constructor.fromCharCode(v53);
        }
        for (let v62 = 0; v62 < 10; v62++) {
            f54(v62, f54, v62, v62);
        }
        return a52;
    }
    this.constructor = f50;
    const v64 = this.constructor;
    try { new v64(); } catch (e) {}
    Math.acosh();
}
new F46(F46, F46);
new F46();
