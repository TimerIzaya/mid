const v3 = new Float32Array(9);
new Int8Array(v3);
Symbol.toPrimitive;
const o8 = {
};
const v9 = [];
class C10 {
}
const v11 = new C10();
try { v11.__defineSetter__(C10, v11, v11, C10, C10); } catch (e) {}
const v14 = -25283n && -25283n;
-25283n >> v14;
BigInt64Array.length = BigInt64Array;
v14.split(v14);
function f19() {
    return f19;
}
const v20 = Array();
v20[2358] = f19;
for (const v21 of v20) {
    v21 - v21;
}
new BigInt64Array(v9);
const v25 = new Uint8ClampedArray(8);
try { v25.slice(Uint8ClampedArray, v25); } catch (e) {}
function f27(a28) {
}
([188439.8808918628,491144.33908044384,7.99804504476413,6.321598426193364e+307,-820860.9743012136,0.7234201729305241,-998514.8410675353,5.600912141333236]).toString();
function F31(a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this.constructor;
    try { new v34(); } catch (e) {}
    for (let i38 = 256n, i39 = 10; i38 < i39;) {
    }
}
Int8Array.d = Int8Array;
5.0 - 5.0;
-(5.0 / -2.220446049250313e-16);
gc();
const v54 = new Int8Array(1024);
v54[603] = v54;
Uint8ClampedArray.name;
const o58 = {
};
%PrepareFunctionForOptimization(2);
let v60 = 0;
while (v60 < 6) {
    v60++;
    const v67 = [601759695];
    const v68 = [1073741824,1073741823,1376142744,1073741825];
    function f71(a72, a73, a74, a75) {
        function f77() {
            return a75;
        }
        arguments.c = 1163987790;
        -9223372036854775808n & -2147483647n;
        const v88 = new Int8Array();
        const v89 = v88.buffer;
        class C92 {
            static {
                for (const v94 of "-4294967295") {
                }
            }
        }
        v89.slice();
        %OptimizeFunctionOnNextCall(f77);
        let v97;
        try { v97 = v68["find"](..."find", a75, ...v67); } catch (e) {}
        v97 <= a74;
        return arguments;
    }
    f71(-25283n, 522675525n, -1553n, 3948);
    f71(null, 1024, v14, "B");
}
new Uint8ClampedArray(3948);
let v103;
try { v103 = ("-9").normalize(); } catch (e) {}
v103.length;
const v106 = [601759695];
function f107() {
    const t80 = ("1073741824").constructor;
    const v111 = t80().replaceAll(f107, 1024);
    return v111.toLowerCase(v111, "1073741824", v111);
}
const v113 = [1073741824,1073741823,1376142744,1073741825];
function f114(a115, a116, a117, a118) {
    try { v113["find"](..."find", a118, ...v106); } catch (e) {}
    return a115;
}
let v122;
try { v122 = ("8").trimLeft(); } catch (e) {}
try { v122.codePointAt(v103); } catch (e) {}
try { ("toString").sup(); } catch (e) {}
const v127 = ("undefined")?.search;
try { new v127(v9); } catch (e) {}
try { ("undefined").search(Uint8ClampedArray); } catch (e) {}
Math.cbrt(Math);
function f132(a133, a134) {
    return a133;
}
("undefined").localeCompare("undefined", "toString");
