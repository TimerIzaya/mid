function f0() {
}
let v3 = new Uint8Array(1024);
let v4;
try { v4 = v3.indexOf(Uint8Array); } catch (e) {}
let v5;
try { v5 = v4.m(1024); } catch (e) {}
let v7 = 255;
+v5;
Math.log2(v4);
const v11 = v5.random();
v7++;
Math.clz32(v5);
!v5;
+8.098093425837562e+307;
Uint16Array.name;
const v19 = new Uint16Array(2);
const v20 = v19.byteOffset;
const v21 = [5.0,1.3592092552573985e+308,5.0,-625586.6728466693,-1e-15,4.841395317934243];
[5.135786769999996,0.9054187066259716,0.07682667930617537,1.7976931348623157e+308,-1000000.0,0.011119945359381433,-1.1883671156724304e+308,45.207923442703986];
[2.220446049250313e-16,-2.220446049250313e-16,-169957.49229589663,1000000000000.0,-1000000.0,-1.6326775881901802e+308,0.6769530658254482,1000000.0,-6.661007480656264e+307];
-v20;
v20 | -1;
v3++;
v19[1] = v19;
new Uint8ClampedArray(3675);
[2147483649,1853334056,-65537,11,-14,-4294967297,-2,3];
[-2147483649];
[-4,-3,-2,512,1975823394,-19269,-256,-256,-2147483647];
const v37 = [];
try { v37.reverse(); } catch (e) {}
Math.log10(v37.length);
v21.length;
new Uint8ClampedArray(Math, -65537, -1);
f0();
%PrepareFunctionForOptimization(f0);
v11();
f0();
%OptimizeFunctionOnNextCall(v4);
f0();
