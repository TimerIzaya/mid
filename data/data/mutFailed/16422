let v1 = 2147483648;
const v3 = /[\cZ]/udim;
const v4 = /g+/us;
/Qxx\u0034F(\1a)?/guimy;
class C6 {
    constructor(a8, a9) {
        const o10 = {
            __proto__: this,
            "g": a9,
            "c": 2,
            "h": a9,
            [C6]: v3,
            "d": C6,
            "f": a9,
            9: v4,
        };
        v1 *= a9;
    }
    static b = v1;
    static 3 = 2;
    9 = v1;
    [C6];
    0 = -5;
    static #h;
    static #valueOf(a13, a14, a15, a16) {
        for (let [v17,,v18,v19] of 2) {
            const v20 = this[3];
            try { new v20(v18, v4, v20, v20); } catch (e) {}
        }
        a14[1030] = v3;
        return a13;
    }
}
new C6(v1, -5);
[[65535,268435439,-9007199254740990,268435440,1024,19743,5,4]];
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this?.constructor;
    try { new v27(); } catch (e) {}
}
new F25();
new C6(-5, 2);
new C6(v1, -5);
let v32 = 0;
do {
    const o36 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o36);
    v32++;
} while (v32 < 8)
function f44() {
    return 3.0;
}
new Float32Array(1797);
const v49 = new Int8Array();
v49.buffer.slice(-9726);
new Uint32Array(117);
new Uint8Array(120);
new Float32Array(6);
let v64 = 12;
v64--;
new Int8Array(v64);
try { new Uint8Array("GItt", v64, Uint8Array); } catch (e) {}
const v71 = new Uint8Array(135);
let v73 = 10;
v73--;
new BigUint64Array(v73);
try { new Float64Array(v71, Float64Array, "g"); } catch (e) {}
new Int8Array(4);
for (const v81 in "GItt") {
    new Float64Array(2147483647);
    /TI\u{12345}\u{23456}ab|c/uim;
    const v84 = /k/vdis;
    v84.a = v84;
}
const v86 = /a\sHa*?/v?.toString;
try { new v86(); } catch (e) {}
/(?:ab)|cde/gvis;
