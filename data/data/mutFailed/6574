const v2 = new Array(3186);
class C3 extends Array {
    static f;
    static e;
    static #p(a5) {
        this.#p();
    }
    #valueOf(a8, a9) {
        let v10 = Math;
        const v12 = ++v10;
        v12.sinh(a8);
        3186 << 7;
        a8 * a9;
        class C16 {
            static {
                for (let v21 = 0; v21 < 32; v21++) {
                }
            }
        }
        const v23 = new C16();
        function f24(a25, a26, a27) {
            const o28 = {
                8: a26,
                4: v23,
                1838408335: a26,
                ...a25,
            };
            return o28;
        }
        const v29 = -v2;
        a9 += v10;
        super[v12];
        v10 | C16.a;
        super.length;
        v10.tanh(v29);
        return a9;
    }
    f;
}
const v35 = new Array();
function f36(a37, a38) {
    return f36;
}
const v41 = [v35];
const o42 = {
    "arguments": v41,
    "type": "function",
};
var h = v2;
v2[v35];
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a47;
    } catch(e48) {
    }
    try {
        this.b = v35;
    } catch(e49) {
    }
    try {
        this.g = v35;
    } catch(e50) {
    }
}
new F44(v35, v2);
new F44(v2, Worker);
new F44(v35, Array);
new Worker(f36, o42);
const v55 = new C3();
new C3();
new C3();
function f60() {
    return Uint32Array;
}
const v63 = new BigInt64Array(9);
try { v55.toLocaleString(v63); } catch (e) {}
new WeakMap();
function f66() {
    return Array;
}
const v70 = /8/vdiy;
Object.defineProperty(v55, 130, { value: 1000 });
let v72 = -1e-15;
const v73 = v72++;
const v74 = [];
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v74;
    } catch(e77) {
    }
}
const v78 = new F75();
const o87 = {
    "h": v78,
    199: v73,
    "b": F75,
    "a": v74,
    n(a80, a81, a82) {
        try {
        } catch(e86) {
        }
    },
};
class C88 {
    constructor(a90, a91) {
        const v95 = new Float64Array(1);
        v95["indexOf"](4, 4);
        try {
            b = v70;
        } catch(e98) {
        } finally {
        }
        class C99 extends Float64Array {
            static [-2] = F75;
            [-2] = this;
            [v2];
        }
        new C99();
        new C99();
        new C99();
    }
}
new C88(v70, C88);
