const v4 = [];
v4.length = 65535;
new Float64Array(256);
const o15 = {
    [Infinity]: -0.0,
    [-16]: Infinity,
    "h": -16,
    ...-0.0,
    "c": Infinity,
    "e": -0.0,
};
new Float64Array(3);
new Uint32Array(3);
v4.length;
const v23 = [16,-1073741824n];
class C27 {
    static #e = -216197759n;
    [v23];
    set d(a29) {
    }
    static #g = -9n;
    static 6;
    static 5 = -256n;
    static [-216197759n] = -256n;
}
const v31 = new Uint32Array(0);
Int16Array[0] = -27833;
const v35 = new Int16Array(Int16Array);
class C38 extends Set {
}
const v39 = new C38();
const v40 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    a47--;
    function f51() {
        const v53 = ("Vre")?.constructor;
        try { v53(v39); } catch (e) {}
        const o60 = {
            "e": -4294967295,
            ...v40,
            ..."Vre",
            [-1]: arguments,
            ...arguments,
            [f51]: -268435456,
            "a": 2n,
            [522675525n]: v53,
            "c": a48,
            "f": "-1073741824",
            "b": a46,
            "g": -4294967295,
            ...arguments,
            [C27]: a46,
            ...o15,
            84: arguments,
            ..."Vre",
            valueOf(a58, a59) {
                return a45;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    try { f51(); } catch (e) {}
    f51();
    %OptimizeFunctionOnNextCall(arguments);
    let v64;
    try { v64 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
    Object.defineProperty(v35, 26, { configurable: true, enumerable: true, get: f44, set: f51 });
    delete v31[9];
    try {
        new f51();
    } catch(e67) {
    }
    const v68 = v64 <= a47;
    v68 || v68;
}
const v71 = new BigInt64Array();
const v74 = new BigUint64Array();
f44(v74, 3331, v71);
new Uint8ClampedArray(1332);
function F79(a81) {
    if (!new.target) { throw 'must be called with new'; }
}
const v82 = new F79("a");
for (const v84 in "findIndex") {
    v82.d = v84;
}
const o94 = {
    [0.490851131893864]: -48490,
    get d() {
    },
    o(a89, a90) {
        class C91 {
        }
        return "findIndex";
    },
    set h(a93) {
    },
};
o94[4096] >>>= 4096;
