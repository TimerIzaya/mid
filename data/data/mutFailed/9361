1634 % 1634;
new Uint8ClampedArray(1634);
const v12 = new BigInt64Array(3684);
try { v12.reduce(-2147483647); } catch (e) {}
const v16 = new BigUint64Array(5);
v16[4] = v16;
1 > 1;
new Int32Array(1);
const v23 = new Int8Array(12);
try { v23.join(1); } catch (e) {}
const v25 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
try { v25.toString(); } catch (e) {}
const v27 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
v27[8];
const v29 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    a33 % a33;
    try { a34.toString(); } catch (e) {}
    this.d = this;
    try {
        this.d = a32;
    } catch(e37) {
    }
    try {
        this.b = a34;
    } catch(e38) {
    }
}
new F30(Int32Array, 12, v27);
new F30(v27, 5, v29);
const v41 = new F30(v25, 12, v25);
v41[65536] = 5;
v41[65536];
const o44 = {
};
o44.e = o44;
o44.type = 1634;
gc(o44);
new Int16Array(162);
function f49(a50, a51, a52, a53) {
    const v56 = [-3.942521664036782e+307,-3.942521664036782e+307,[]];
    v56.f = v56;
    return -3.942521664036782e+307;
}
try { f49(f49, f49, f49, 257); } catch (e) {}
for (let v58 = 0; v58 < 10; v58++) {
    f49();
}
%OptimizeFunctionOnNextCall(f49);
const v60 = f49(f49, f49, f49, f49);
v60 != v60;
