const v0 = /Oxyz{1,}?/gudmsy;
const v1 = /[\cz]/gudis;
const v2 = /2g\P{sc=Greek}+/gvis;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v0); } catch (e) {}
    try {
        this.b = a5;
    } catch(e7) {
    }
    try {
        this.g = v2;
    } catch(e8) {
    }
    try {
        this.a = a5;
    } catch(e9) {
    }
}
F3.length;
const v11 = new F3(v2);
const v12 = new F3(v2);
new F3(v2);
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = a17?.constructor;
    try { new v18(a17); } catch (e) {}
    try {
        this.b = v11;
    } catch(e20) {
        const v22 = Symbol.toPrimitive;
        const o26 = {
            [v22]() {
                Symbol.iterator;
            },
        };
    }
    try {
        this.g = v1;
    } catch(e27) {
    }
}
F14.b = F14;
const v28 = new F14(v1, v11);
v28.g = v28;
new F14(v0, v11);
const v30 = [];
Object.defineProperty(v30, -2, { writable: true, enumerable: true, value: v30 });
const t48 = [784840714,1000,256];
t48.length = 1000;
const v33 = new F14(v0, v12);
v33.e = v33;
try { ("bigint").trim(); } catch (e) {}
function f38() {
}
let v39 = -1.0;
const v40 = v39++;
v40 - v40;
function F44(a46) {
    if (!new.target) { throw 'must be called with new'; }
    if (!a46) {
        function F47(a49, a50, a51, a52) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F47(this, Set, 3, a46);
    }
    const o60 = {
        toString() {
            const v55 = this?.toString;
            try { new v55(); } catch (e) {}
            class C57 {
            }
            const o58 = {
            };
            o58.c = o58;
            super[this];
        },
    };
    try { o60.toString(); } catch (e) {}
    new Int8Array([-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990]);
    class C65 {
        constructor(a67, a68) {
            try {
                this.fuck(a68, "function");
            } catch(e71) {
            }
        }
    }
    for (let [i109, i110] = (() => {
            const v74 = [601759695];
            function f76() {
                [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                const o84 = {
                    toString(a82, a83) {
                        return this;
                    },
                };
                const o106 = {
                    "c": -4294967297n,
                    [522675525n](a87, a88) {
                    },
                    "c": v74,
                    valueOf(a90, a91) {
                        return 3;
                    },
                    "b": -4294967295,
                    [-4294967297n](a93, a94, a95, a96) {
                    },
                    "e": -4294967295,
                    "e": -268435456,
                    "maxByteLength": -4294967295,
                    "arguments": v30,
                    ...v74,
                    "type": "Vre",
                    ..."Vre",
                    valueOf(a98, a99) {
                        return "g";
                    },
                    "type": "byteOffset",
                    o(a101) {
                        return this;
                    },
                    ..."Vre",
                    "c": -268435456,
                    "type": "Vre",
                    toString(a103, a104, a105) {
                        return f38;
                    },
                };
                return -4294967297n;
            }
            f76();
            return [256n, 10];
        })();
        i109 < i110;
        ) {
    }
    const v118 = new BigUint64Array(3375);
    v118[0];
    v118[2];
    v118[3];
}
new F44();
new F44();
