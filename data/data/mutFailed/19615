new Set();
new Array(3222);
[4096,15,8,-23815,533790146,-1242015161,-1922,-37218,-2147483648,4];
[9007199254740990,-54888,-2147483648];
[1073741824,-2147483647,2147483647];
new Int8Array(2);
new Uint8ClampedArray(3490);
new Float64Array(2415);
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(a35, a36, a35); } catch (e) {}
    a34 - a34;
    a36 * a36;
    try {
        this.f = a34;
    } catch(e41) {
    }
    try {
        this.c = -2n;
    } catch(e42) {
    }
}
new F32(1000000.0, 7.559689826868887, 1000000.0);
new F32(7.559689826868887, 7.559689826868887, -113.9176065145133);
new F32(-113.9176065145133, 7.559689826868887, -113.9176065145133);
class C47 extends Date {
}
const v48 = new C47();
v48.toGMTString();
[155533.8602852358,2.0];
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = this?.__lookupGetter__;
    try { new v54(); } catch (e) {}
    19793 ^ 19793;
    -2.0 - -2.0;
    function f62() {
        return -2.220446049250313e-16;
    }
    f62.length = f62;
    4 >> 4;
    const v66 = new Int8Array(4);
    try { v66.reduce(4); } catch (e) {}
    8 - 8;
    for (const v71 in "1024") {
    }
    class C72 {
    }
    let v73;
    try { v73 = new C72(); } catch (e) {}
    try { v73.toString(); } catch (e) {}
    ("1073741823").trimRight()[8];
    const v79 = [];
    function f80(a81, a82) {
        class C83 {
        }
        5.0 / -2.220446049250313e-16;
        new Uint8Array(257);
        class C93 extends Uint16Array {
            constructor(a95, a96, a97) {
                super();
            }
        }
        Math.exp();
        Math.log(-23525);
        function f101() {
            return f101;
        }
    }
    f80.length;
    v79.constructor = f80;
    new Float32Array(8);
    const v105 = /abc?/gvmy;
    v105.b = v105;
    try { v105.toString(); } catch (e) {}
    v105.exec("Q8F");
    const v108 = /(x)(x)(x)\1/uis;
    v108[Symbol.toPrimitive] = Array;
    try { v108.compile(F52, 7.559689826868887); } catch (e) {}
    function f112(a113, a114, a115, a116) {
        const o123 = {
            2: a115,
            __proto__: a116,
            [v108](a118, a119, a120, a121) {
                super.test();
            },
        };
        o123[2] = o123;
        const v124 = o123[2];
        v124.caller = null;
        v124.caller = v124;
        return a113;
    }
    f112();
    f112();
    215 / 215;
    function F129() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new F129(); } catch (e) {}
    let v133 = 2;
    v133--;
    v133 >>> v133;
    Math.cos(v133);
    class C137 {
        get a() {
        }
    }
    function f139(a140, a141, a142) {
    }
    class C143 {
    }
    function F144(a146, a147, a148) {
        if (!new.target) { throw 'must be called with new'; }
    }
    F144.arguments = F144;
    for (const v151 of Array(19793)) {
    }
}
function f152(a153, a154) {
    const v156 = new Uint8Array(Uint8Array);
    function f157(a158, a159, a160, a161) {
        a160++;
        const v163 = ++a160;
        Number.isNaN(v163 - v163);
        let v167 = v163 * v163;
        const v168 = v167--;
        v168 % v168;
        const v170 = a160 || a160;
        v170 + v170;
        const o172 = {
            ...v156,
        };
        o172[2] = o172;
        const v173 = o172[1];
        v173 * v173;
        o172[2] = o172;
        let v176 = o172[2][1];
        v176--;
        return v176;
    }
    f157.caller = f157;
    return v156;
}
F52[Symbol.toPrimitive] = f152;
new F52();
new F52();
