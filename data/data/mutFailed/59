const v2 = new BigUint64Array(4);
const v5 = new BigInt64Array(7);
new Uint16Array(1);
function f13() {
    v2[7] = -3;
    v2[3] ^= 536870912;
    return BigUint64Array;
}
Uint32Array[Symbol.iterator] = f13;
function f16(a17, a18) {
    try {
        v5.f = 536870912;
    } catch(e19) {
    }
    return a17;
}
Uint32Array.valueOf = f16;
function f20() {
    return Uint32Array;
}
function f21(a22) {
    for (let [v24] of "Opx24") {
    }
}
Object.defineProperty(Uint32Array, 0, { enumerable: true, get: f20, set: f21 });
const v25 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v28 = new Float64Array(3341);
const v30 = new Int8Array();
const o31 = {
    __proto__: v25,
    "g": Float64Array,
    ...v28,
    2147483647: v30,
};
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 40687;
    } catch(e3) {
    }
    try {
        this.c = 40687;
    } catch(e4) {
    }
    try {
        this.a = 40687;
    } catch(e5) {
    }
}
const v6 = new F0();
new F0();
new F0();
const v17 = [1073741824,1756196835,536870889,256,6,58443];
const v18 = [2,257,-10,2102434943,-1816686577,-15];
const v19 = [-938173549,-7,-9223372036854775807,8,-536870912,1073741825,5,257,36585,-56792];
const v20 = [2.220446049250313e-16,4.817717597327409,1e-15,-1000000000000.0,-1000000.0,2.0,-3.382353865622333e+306,134.7295617651339];
const v21 = [NaN,-5.161337834188833e+307,NaN,-984.7986985006023];
const v22 = [-1000000000.0,226.41468646930184,145.7749307686554,945.9985168168885,NaN,-2.0];
class C23 {
    constructor(a25, a26, a27) {
        try { a27.findLastIndex(v22); } catch (e) {}
        const v29 = v21.constructor;
        class C30 extends v29 {
            [a25] = v29;
            b = a27;
            h = F0;
        }
    }
    a;
    static [v22] = v19;
    h = v18;
    static 724884816 = v22;
    #a = "string";
}
new C23(v17, v18, v20, v20, v18);
const v32 = new C23(v22, v18, v19);
v32.a;
const t42 = 536870889;
const v34 = new t42(v32, v20, v17);
v34.a;
const v36 = [10,1073741823,-2,-16,10000,0,-9007199254740992];
try { v36.groupToMap(v20); } catch (e) {}
const v39 = ([21416,-1145171309,658365418,-9007199254740991]).some;
try { new v39(); } catch (e) {}
function f42() {
    const o45 = {
        get b() {
            return -8.233575780020734;
        },
    };
    o45.undefined = -8.233575780020734;
    Symbol.EPSILON = Symbol;
    Symbol.EPSILON;
    o45[-8.233575780020734] = f42;
    return v6;
}
const t62 = f42();
t62[Symbol.toPrimitive] = f42;
