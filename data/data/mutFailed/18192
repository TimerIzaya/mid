~1000000.0;
new Uint16Array(666);
try { new Float64Array(666, Uint16Array, 1025); } catch (e) {}
new Float64Array(1025);
new Uint32Array(3);
try { Uint8ClampedArray.bind(Float64Array); } catch (e) {}
const v18 = new Uint8ClampedArray();
const v20 = /(?<a>.)\k<a>?/vdimsy;
let v21;
try { v21 = v20(v20); } catch (e) {}
const v22 = [v21,v21,v21,v21,v21];
-v22 && v22;
const v25 = new Uint8ClampedArray(127);
const v28 = new Uint8Array(257);
class C30 extends Uint16Array {
    constructor(a32, a33, a34) {
        super(v28);
    }
}
const v35 = delete v18[4294967296];
v35 && v35;
Math.sin(3.862600614459211e+307);
class C41 extends SharedArrayBuffer {
}
const v42 = v25 < -56166n;
v42 || v42;
async function f44(a45, a46, a47) {
    return a45;
}
const v48 = f44.constructor;
v48.name;
const v52 = new BigUint64Array(4096);
v52[3408] = SharedArrayBuffer;
const v53 = [155533.8602852358,2.0];
for (const v57 of Array()) {
    v53[658291203] = null;
}
v48();
