/\[\]\{\}\(\)\%\^\ ?/gs;
class C7 {
}
const v8 = [-9223372036854775808,4294967297,1524216812,1583265095,-6,4294967297];
function f9(a10, a11) {
    return v8;
}
const o12 = {
};
const v14 = new Proxy(v8, o12);
function f15() {
    return f9;
}
Object.defineProperty(v14, "then", { enumerable: true, get: f15 });
/[p5(x)(x)(x)\3*[a\bcKB[^E(?:a+)?]]]/guy;
/\111U/y;
[-268435456,65537,0,65537,1073741825];
[0,-53260,-1189590083,-1651989012,1,64,257];
[1];
Math.acosh(65535);
const v27 = new Float64Array(255);
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    a31 >> a31;
    a33 | a33;
    try {
        v27.b = a31;
    } catch(e36) {
    }
    try {
        this.h = a30;
    } catch(e37) {
    }
}
const v39 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
v39.constructor;
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    function f48() {
        return ("Vre").constructor.fromCodePoint(undefined);
    }
    try { f48(); } catch (e) {}
}
const v54 = [-1727815353,-9007199254740991];
[4,13];
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
new Int8Array([1000.0,-1.7976931348623157e+308,1000000.0,1000000000000.0,-1000000000000.0,-863970.4344405974,1.7873969073744563e+308,0.0]);
eval("");
const v66 = new Int16Array(16);
([601759695]).includes(...v39);
const v71 = new Uint16Array(1024);
v71[7] = v71;
try { v66.find(v66); } catch (e) {}
0.6822080711934364 / 0.6822080711934364;
function F78(a80, a81) {
    if (!new.target) { throw 'must be called with new'; }
    const v82 = this?.constructor;
    const v83 = v82?.constructor;
    try { new v83(v82); } catch (e) {}
    try { new v82(0.29489550717955537, a80); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e87) {
    }
}
const v88 = F78?.constructor;
try { new v88(F78); } catch (e) {}
const v90 = new F78("string");
v90.f = v90;
let v92 = 127;
v92++;
const v94 = v92 != v92;
const v97 = new Int32Array(Int32Array);
const v98 = [];
function f99() {
    const o101 = {
        p() {
            return f99;
        },
        [v98]: v98,
        "a": v98,
    };
    const v102 = o101?.constructor;
    try { new v102(v94); } catch (e) {}
    return v98;
}
f99();
const v105 = f99();
const v106 = f99();
const v107 = (a108, a109) => {
    return v106 * a109;
};
0.6058227007604853 | 0.6058227007604853;
let v113 = -Infinity;
v113++;
const v117 = new Float64Array(129);
let v118;
try { v118 = v117.entries(); } catch (e) {}
try { v118.next(); } catch (e) {}
255 - 255;
class C122 {
    static [v97] = 0.29489550717955537;
}
true || true;
const v125 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o127 = {
    valueOf() {
        return true;
    },
};
v125.length = o127;
class C128 {
}
const o129 = {
};
try { ("Xkz0W").split(v54, -536870912); } catch (e) {}
class C132 {
    set b(a134) {
    }
    static {
        eval(v105);
    }
    constructor(a139) {
        ("object").localeCompare(a139, "object");
    }
}
const v141 = new C132();
const v142 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v142(v141); } catch (e) {}
function f144(a145, a146) {
}
for (const v147 in v113) {
    function F148(a150, a151) {
        if (!new.target) { throw 'must be called with new'; }
        ("minor").valueOf();
        const o155 = {
            "execution": "async",
            "type": "minor",
        };
    }
}
try {
} catch(e156) {
} finally {
}
