const t0 = "stringify";
t0.c = "stringify";
new Uint8Array(1010);
const v4 = /2a\sc/uds;
function f5() {
    try { v4.test(v4); } catch (e) {}
    const t6 = Array(11);
    t6.length |= 113;
    return 11;
}
v4[Symbol.toPrimitive] = f5;
const o17 = {
    [v4](a14) {
        try {
            super.m(this);
        } catch(e16) {
        }
        return v4;
    },
};
for (let v22 = 0; v22 < 25; v22++) {
}
Uint8Array();
const t22 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
t22.length >>>= -65536;
new Uint8ClampedArray(127);
const v28 = new Float32Array();
class C31 extends Float64Array {
    static 1;
    static #d = 256;
}
const v32 = new C31();
try { v32(v28); } catch (e) {}
let {"buffer":v34,"byteLength":v35,"byteOffset":v36,} = v32;
const v39 = new Int8Array(0);
const v40 = [1,2147483647,268435440,-2,536870889];
[-1024,-1612632669,6];
[269479904,-2147483648];
h = v40;
try {
const t0 = 0;
t0(127, Uint8ClampedArray, "stringify", v39);
} catch (e) {}
new Float32Array(1024);
("undefined").localeCompare("undefined", "toString");
new BigUint64Array(127);
for (const v54 of "setUTCSeconds") {
    try {
        v54.h = v54;
        for (const v56 in "1024") {
        }
        new Uint32Array(186);
    } catch(e60) {
    }
}
new Int8Array(5);
const v66 = new Uint8ClampedArray();
for (let v67 = 0; v67 < 5; v67++) {
    v66[v67] = "n";
}
new Int32Array(1);
new Uint8ClampedArray(257);
class C79 {
    [null];
}
