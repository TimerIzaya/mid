[];
Uint8ClampedArray.name = Uint8ClampedArray;
const v6 = new Uint8ClampedArray();
v6.byteOffset;
function f8(a9, a10) {
    const o15 = {
        [a9]: Float64Array,
        4: 6,
        "b": a9,
        [v6](a12, a13, a14) {
        },
    };
    o15.prototype = 6;
    return o15;
}
let v16;
try { v16 = f8(2, Uint8ClampedArray); } catch (e) {}
const v17 = f8(2);
%OptimizeFunctionOnNextCall(f8);
const v21 = new WeakMap();
const v23 = -1 % -1;
v23 !== v23;
const v26 = 40502441 >> 40502441;
-16;
const v29 = 16 - 16;
v29 >>> v29;
const o34 = {
    set e(a32) {
        return;
    },
};
function f35(a36) {
    try {
    const t0 = 1073741825;
    t0();
    } catch (e) {}
    return o34;
}
o34[Symbol.toPrimitive] = f35;
function f41() {
    return 16;
}
function f42() {
    return 40502441;
}
f42.e = f42;
-49547111 - -49547111;
~-2147483649;
function f49(a50, a51, a52, a53) {
    try { a53.delete(a53); } catch (e) {}
    return arguments;
}
try { f49(f42, v16, v16, f42); } catch (e) {}
let v57;
try { v57 = f49(o34, 16, v21, v21); } catch (e) {}
v57[1];
const v60 = Uint8ClampedArray.prototype;
v60.name = v60;
try { v60.slice(o34, WeakMap); } catch (e) {}
try { v60.at(Uint8ClampedArray, Uint8ClampedArray, v60, Uint8ClampedArray); } catch (e) {}
3 <= 3;
const v68 = new Uint8ClampedArray();
v68[6] = 3;
try { new Float32Array(3011, 2, v6); } catch (e) {}
new Float32Array(2);
function F73(a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    a75.constructor = f41;
    a77.constructor = Symbol;
    a76.prototype;
    a77.name = a77;
    a75 - a75;
    try { new a77(this, v6, v6); } catch (e) {}
}
F73.name;
const v82 = new F73(3011, Uint8ClampedArray, F73);
v82[Symbol.toPrimitive] = f35;
const v85 = v82?.constructor;
try { new v85(Uint8ClampedArray, WeakMap, v82); } catch (e) {}
const v87 = v82?.constructor;
let v88;
try { v88 = new v87(o34, v17, -49547111); } catch (e) {}
const v89 = v88?.__lookupGetter__;
try { new v89(v26); } catch (e) {}
v82.constructor = Date;
const v91 = v82.constructor;
v91.name;
v91.prototype = v91;
-3.3474037991793697 - -3.3474037991793697;
const v96 = Math.sinh(-3.3474037991793697);
v96 - v96;
Math.LN2;
let v100;
try { v100 = Math.tan(Math); } catch (e) {}
v100 % v100;
Math.tanh();
new v91(v82, Uint8ClampedArray, 3011);
