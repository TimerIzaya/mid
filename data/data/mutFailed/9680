class C3 {
    constructor(a5, a6) {
        function f7() {
            ("string")[0];
            class C9 {
                constructor(a11, a12, a13) {
                    class C15 extends a12.constructor {
                    }
                    new C15();
                }
            }
            return a5;
        }
        this.constructor = f7;
        function f17() {
            [2.0,Infinity,1.7587262504433117,1.7976931348623157e+308];
            [415789.8444897947,-2.0,486.79616090557215,-2.220446049250313e-16,2.2250738585072014e-308,5.0,-5.0,1.0,0.0];
            [-653.963385518536,-255194.45603472658,2.539233271419111e+307,572.6767284471084,-2.220446049250313e-16,693.0288241048561,-2.5376469057991507e+307,-1000000000.0];
            return 127;
        }
        a5[Symbol.toPrimitive] = f17;
        function f23(a24) {
            return 36924;
        }
        Object.defineProperty(a6, "d", { configurable: true, set: f23 });
        try {
            const t26 = "-256";
            t26.length = C3;
        } catch(e26) {
        }
        ("string").length;
        let o28 = {
        };
        o28.b = o28;
        o28.f = o28;
        try {
            o28.b = this;
        } catch(e29) {
        }
        try {
            try { Math.acosh("string"); } catch (e) {}
            -16 - -16;
            const v35 = C3++;
            o28 || C3;
            const v37 = ++o28;
            let v38 = v35 || o28;
            const v39 = v37 + C3;
            try { a5.p(v39, 127, Math, a6, this); } catch (e) {}
            function f41() {
                return a5;
            }
            v38++;
            Math.min(v38);
            Math.max(3.759933622172621);
            Math.max(v38);
            !C3;
            const o50 = {
            };
            o50.b = this;
            Math.g = 127;
        } catch(e51) {
            e51.name = e51;
        }
        try {
            const o52 = {
            };
            Object.defineProperty(o52, "b", { writable: true, value: o52 });
            o52.b = this;
            o52.g = 127;
            o52.e = "string";
        } catch(e53) {
        }
        try {
            const o54 = {
            };
            o54.b = this;
            o54.g = 127;
            a6.d = a6;
        } catch(e55) {
            e55.b = a5;
            e55.b = e55;
        }
    }
}
const v56 = new C3("string", "-256");
const v57 = v56?.constructor;
function f58() {
    class C60 {
        static #o() {
            const v62 = [-2147483648,-46456,1200954989,-4294967296,1];
            const v63 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
            const v64 = [23955,1426598775,2147483649];
            try {
                v63.#o(v63, v64, null, v63, v62);
            } catch(e66) {
            }
            return null;
        }
        #p() {
            const v68 = this[223];
            const v69 = super.g;
            let v70;
            try { v70 = v68.p(this, v69, v69, v69); } catch (e) {}
            this[null] = v70;
            new Map();
            return v69;
        }
    }
    const v73 = new C60();
    const v74 = new C60();
    class C75 {
        p(a77) {
            const v78 = null - a77;
            %VerifyType(v73);
            super[v73] = v78;
            a77?.[1858] ^ v78;
            for (let i83 = 0; i83 < 7; i83++) {
                try { v74.valueOf(i83, a77, v73, i83, i83); } catch (e) {}
            }
            const v94 = new BigUint64Array();
            v94.buffer.slice();
            Math.cos(Math);
            return C60;
        }
    }
    new C75();
    return "-256";
}
v57[Symbol.toPrimitive] = f58;
function f102(a103, a104, a105, a106) {
    const o107 = {
        [a105]: "string",
        ["-256"]: 127,
    };
    return o107;
}
f102(C3, C3, "string", v57);
const v109 = f102(v57, C3, C3, v57);
f102(v109, f102, v109, v109);
try { new v57(127, 127); } catch (e) {}
const v112 = new C3("string", "-256");
function f113() {
    const v114 = v109.__proto__;
    v109[Symbol] *= v114;
    return v114;
}
v112.constructor = f113;
const v115 = v112?.constructor;
v115.valueOf = f58;
try { new v115(C3, C3); } catch (e) {}
new C3(C3, "string");
const v118 = [Infinity,-1.0,-1000000000.0,0.3877939275227411,2.8467437807389384,-525.5744744760661];
[Infinity,0.4651093211145573,-4.0,-1.7976931348623157e+308,-2.0];
[0.543111281457527];
function F121(a123, a124, a125) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = f113;
    try {
        this.f = v56;
    } catch(e126) {
    }
}
const v127 = new F121(v118, C3, "-256");
const v128 = new F121(v118, "string", v127);
new F121(v112, v128, v118);
new Map();
Int16Array.b = Int16Array;
/p[a-zA-Z0-9]a||bc/gvm;
801251841n >> 801251841n;
