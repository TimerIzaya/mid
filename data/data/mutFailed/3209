class C3 {
    static [1000000000000.0] = 1000000000000.0;
    [1000000000000.0] = 1000000000.0;
    static 1 = 1000000000.0;
    constructor(a5) {
        this[1000000000000] = this;
        for (let i = 0; i < 10; i++) {
            const v6 = /[xyz{1,}(O)]/udis;
            v6.global = v6;
        }
    }
    static #f = 1000000000.0;
    /*
    constructor(a8) {
        const v9 = /Ryq[]/vs;
        /a(?=b)c/vim;
        class C11 {
            [1000000000.0] = 1000000000.0;
            static #c = v9;
        }
        const v12 = /(x)(x)(x)\1/uis;
        function f13(a14, a15, a16, a17) {
            const o32 = {
                2: a16,
                __proto__: a17,
                [v12](a19, a20, a21, a22) {
                    const v23 = a22;
                    throw a20;
                    C11[5] = a8;
                    Math.sqrt(-19691 & 1024);
                    Math.atan2(-7.247345609030786, -7.247345609030786);
                    super.test();
                },
            };
            return a14;
        }
        new C11();
        new C11();
        new C11();
        new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
        new Uint8Array(6);
        /((?!\1(a\1)\1)\1)/guimsy;
    }
    */
    [-879453.2549575686];
    d = 1000000000.0;
    #g;
}
const v43 = new C3(C3);
const v44 = new C3(C3);
const v45 = new C3(1000000000.0);
v45[1000000000000] = v45;
3 - 3;
const v49 = new Float32Array(3);
const v51 = [[65535,268435439,-9007199254740990,268435440,1024,19743,5,4]];
try { v51.map(v43); } catch (e) {}
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = new F53();
const o58 = {
    "f": v44,
    __proto__: v49,
    2: v51,
    2029735192: C3,
    "d": v43,
    129: v57,
};
new BigInt64Array(178);
new Float32Array(45);
function f65(a66, a67, a68) {
    a67.arguments;
    a68.d = a68;
    ~112;
    Uint8ClampedArray.name = Uint8ClampedArray;
    const v74 = new Uint8ClampedArray(112);
    const o75 = {
        "apply": f65,
        "call": f65,
        "construct": f65,
        "deleteProperty": f65,
        "get": f65,
        "getOwnPropertyDescriptor": f65,
        "getPrototypeOf": f65,
        "has": f65,
        "isExtensible": f65,
        "ownKeys": f65,
        "preventExtensions": f65,
        "set": f65,
        "setPrototypeOf": f65,
    };
    new Proxy(v74, o75);
    46 >>> 46;
    const v81 = new Uint8Array(64);
    function F82(a84) {
        if (!new.target) { throw 'must be called with new'; }
        const v85 = this.constructor;
        try { new v85(); } catch (e) {}
        new BigInt64Array();
    }
    try { v74(-85357.59116785484, ...v81, 64, 46, -3.383486186086852e+307, ...v74); } catch (e) {}
    const o94 = {
        set e(a93) {
        },
    };
    o94.e;
    return a66;
}
f65.caller;
const v98 = f65(f65, f65(f65, f65, f65), f65);
v98.e = v98;
