const v2 = new Int16Array(512);
Uint8ClampedArray[2] = Uint8ClampedArray;
const v5 = new Uint8ClampedArray(14);
function f6(a7, a8) {
    function F9() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            let v11 = 0;
            for (let i = 0; i < 5; i++) {
                const v12 = v11++;
                v12 + v12;
            }
            new F9();
        } catch(e15) {
        }
    }
    return v2;
}
v5.constructor = f6;
const v16 = v5?.constructor;
v16[Symbol.iterator] = f6;
try { new v16(Uint8ClampedArray, 512, 14); } catch (e) {}
113 < 113;
const v23 = new Uint8ClampedArray(113);
class C24 {
    static 6 = Uint8ClampedArray;
    [-2];
    #b = Uint8ClampedArray;
    constructor(a26, a27) {
        this.c = a27;
        this.c = this;
        try {
            const v28 = new Uint8ClampedArray(14, a26, a27);
            v28[1];
        } catch(e30) {
        }
    }
    set h(a32) {
        const v33 = super.d;
        v2.values(v33, ...v23, 113, v33);
        try {
            this.#b;
        } catch(e36) {
        }
    }
}
new C24();
new C24();
new C24();
const v41 = new Map();
let v42;
try { v42 = v41.keys(); } catch (e) {}
v42.__lookupGetter__;
const v46 = new Uint8Array();
function f47(a48, a49, a50, a51) {
    a48.length = a48;
    a49 - a49;
    const v53 = a50 ^ a50;
    class C54 {
    }
    C54[Symbol.toPrimitive] = Symbol;
    const v57 = /[a-zA-Z0-9]BL[\cZ]/udsy;
    v57.dotAll = v57;
    try { ("async").trimLeft(); } catch (e) {}
    ("async").split(v57, C54);
    const o64 = {
        "b": a48,
        "c": a51,
        ...v46,
        n(a62, a63) {
            return v53;
        },
    };
    return v53;
}
for (let v65 = 0; v65 < 625; v65++) {
    const v66 = f47(Uint8Array, 2, v65);
    v66 - v66;
}
new Int8Array(1073741823);
