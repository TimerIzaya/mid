new Float64Array(4);
new Uint8Array(64);
const v11 = new Uint16Array(256);
[-619649032,-6483,-1616002755];
[-31423,24306,1073741824,4];
[9007199254740992,55804,1834421238,-268435456,256,15];
let v15 = -2147483648n;
class C17 {
    static m(a19) {
        ({"a":C17,"h":v15,} = this);
    }
}
const v20 = new C17();
const v21 = new C17();
class C22 {
}
function f23(a24) {
    class C25 {
        constructor(a27, a28) {
            function f29(a30, a31, a32, a33) {
                return arguments;
            }
            for (let v35 = 0; v35 < 5; v35++) {
                const v36 = f29();
                v36[1] = v36;
            }
        }
    }
    new C25();
    return C25;
}
C22[Symbol.iterator] = f23;
const o40 = {
};
o40.b = v20;
const o41 = {
};
Object.defineProperty(o41, "b", { writable: true, value: v21 });
const v42 = new C22();
v42.constructor = f23;
let v43;
try { v43 = v42.constructor(); } catch (e) {}
const v44 = new C22();
const v45 = v44.__lookupGetter__;
let v46;
try { v46 = v45(); } catch (e) {}
const v47 = new C22();
v47.constructor = Symbol;
const v48 = v47.constructor;
new v48(C17, v43, C22, o40);
const v52 = new Float32Array();
try { v52.forEach(v46, v21); } catch (e) {}
const v56 = new BigUint64Array();
let v57;
try { v57 = v56.filter(v48); } catch (e) {}
class C58 {
}
function f59(a60) {
    const v61 = delete v11?.length;
    v61 + v61;
    return a60;
}
C58.toString = f59;
const v63 = new C58();
function f64() {
    return Symbol;
}
Object.defineProperty(v63, "constructor", { enumerable: true, get: f64 });
const v65 = v63.__lookupGetter__;
try { v65(); } catch (e) {}
function f67(a68) {
    return a68;
}
const v69 = v63.constructor;
v69[Symbol.toPrimitive] = Symbol;
new v69(v46);
const v73 = new C58();
v73.propertyIsEnumerable(v69, v57, o41);
const v75 = new C58();
const t79 = v75.constructor;
const v77 = new t79();
const v78 = /[\11]/gm;
v78.e = v78;
v78.e = v78;
const v79 = /a(?!bbb|bb)c/vi;
Object.defineProperty(v79, "toString", { value: f67 });
const v80 = v79.toString;
const v81 = new v80(BigUint64Array, 246, C17, v79, v80);
const v82 = v81.__lookupGetter__;
try { v82(); } catch (e) {}
const v85 = new Uint16Array(C22);
const v86 = v85[1];
v86 & v86;
const v90 = new Int32Array(v77, 31, 560);
v90[30];
function f92() {
    return Int32Array;
}
const v93 = f92();
v93.e = v93;
const t100 = f92().e;
new t100();
