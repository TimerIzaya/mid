function f0() {
    const o7 = {
        __proto__: 441540582,
        "e": 268435441,
        get b() {
            try {
                this.fuck(this, 441540582, this);
            } catch(e6) {
            }
            return this;
        },
        [268435441]: 1296129182,
    };
    return o7;
}
const v8 = f0();
const v9 = f0();
const v10 = f0();
const v12 = new Set();
const v16 = [Set,v12,v12];
const v17 = [v8,v9,v10];
[6012,v17,v16];
function f20() {
    const o37 = {
        1678: true,
        ...true,
        "d": true,
        [true]() {
            const v22 = super.e;
            function f24(a25, a26) {
                const o32 = {
                    toString(a28, a29, a30) {
                        try {
                            a28.f = 536870888n;
                        } catch(e31) {
                        }
                        return 536870888n;
                    },
                };
                return o32;
            }
            const v33 = f0();
            !f24(536870888n, v33);
            v33 == v22;
        },
        1: true,
    };
    return o37;
}
const v38 = f20();
let v39 = f20();
let v41 = 9;
class C44 {
    constructor(a46, a47, a48, a49) {
        try { new a49(v38); } catch (e) {}
        try {
            new f20();
        } catch(e52) {
        }
        a48[36];
    }
    static #a;
    static {
        this.__proto__;
        try {
            this.b = -9007199254740991;
        } catch(e56) {
        }
    }
}
const v57 = new v9();
new C44(-2147483649, v38, v39);
({"c":v39,"h":v41,} = v57);
v57[8] **= -5;
const o59 = {
};
new Proxy(v17, o59);
const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v0;
    } catch(e3) {
    }
    try {
        this.f = v0;
    } catch(e4) {
    }
    try {
        this.a = v0;
    } catch(e5) {
    }
}
const v6 = new F1();
const v7 = new F1(v0, v6, v0);
const v8 = new F1();
const v12 = [v8,v6,"3F",F1];
const v13 = [v0,"-1831242857",v12,"-351045106",F1,v12];
const v15 = new SharedArrayBuffer();
v15["clear"]();
[v7,v6,v13,F1,"-1831242857"];
new Date();
function f21() {
    return v0;
}
const v23 = new isFinite(isFinite);
try { v23.find(v23); } catch (e) {}
