[-536870912,-459675655,242513042,10000,2,-2147483648,-536870912,268435441];
const v1 = [1885667114,256,-36368,-4294967296];
const v2 = [17636];
class C3 {
    static #toString(a5) {
        try {
            const o7 = {
            };
            v2.concat(v1, "6", o7);
        } catch(e9) {
        }
        return this;
    }
}
new C3();
new C3();
new C3();
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f18() {
    class C19 {
    }
    const v21 = new WeakMap();
    class C22 extends C19 {
        static 1 = v21;
        10000;
    }
    new C22();
    return C19;
}
Uint32Array[Symbol.toPrimitive] = f18;
const v26 = new Uint32Array();
let v27 = -4294967297n;
const v28 = v27--;
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    a32.toString = Symbol;
    const v36 = a32.constructor;
    function f37() {
        return f18;
    }
    Object.defineProperty(v36, "toString", { configurable: true, enumerable: true, get: f37 });
    let v38;
    try { v38 = v36(); } catch (e) {}
    const v39 = v38?.constructor;
    v39.toString = Symbol;
    let v40;
    try { v40 = v39(f31, a32, v16, Uint32Array, v36); } catch (e) {}
    function f41() {
        const v43 = ("Vre").charAt(v40);
        v43.blink();
        let v45;
        try { v45 = ("Vre").codePointAt(v16); } catch (e) {}
        v45 % v45;
        let v47 = Float64Array;
        v47 = a33;
        b = v16;
        let v48 = v16.length;
        v48++;
        try {
            v30.forEach(a33);
        } catch(e51) {
            e51.message = e51;
        }
        const o62 = {
            "c": v27,
            valueOf(a53, a54) {
                return v38;
            },
            1073741824: v26,
            [v27](a56, a57, a58, a59) {
                eval(v43);
            },
        };
        return v30;
    }
    f41();
    const v65 = Array(v39);
    try { v65.findLast(); } catch (e) {}
    const v68 = Int8Array.of();
    let v69;
    try { v69 = v68.every(v68, a32, v68, a33, Array); } catch (e) {}
    const v70 = new Int8Array(v69);
    const v71 = v70.buffer;
    function f72(a73, a74) {
        return ([65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096]).filter;
    }
    v71.constructor = f72;
    const v77 = v71.slice();
    const v78 = v77.constructor;
    try { v78(v77, v69, v28, v68, a32); } catch (e) {}
    const v81 = new Int32Array(v78, v36, v36);
    v81.lastIndexOf(a32, a34);
    try { v30["find"](..."find", a35, ...v29, ...v30); } catch (e) {}
    return v27;
}
function f85(a86, a87) {
    a86 = a87;
    try {
    } catch(e88) {
        function F89() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function f91() {
            return e88;
        }
    }
    return a87;
}
f31.toString = f85;
for (let v92 = 0; v92 < 10; v92++) {
    f31(v26);
}
%OptimizeFunctionOnNextCall(f31);
f31(Uint32Array);
