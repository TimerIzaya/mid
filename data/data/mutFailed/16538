let v1 = -60736;
class C3 {
    set c(a5) {
        const v6 = [a5,this,this,v1];
        [this,v1,[a5,-1.0,v6],v1];
        v6["toSorted"](this, Infinity, a5, -1.0, Infinity, a5);
    }
    #b;
    valueOf(a12) {
        try { new a12(a12, -1.0, this); } catch (e) {}
        /\p{gc=Nd}/gvmy;
        /(a\1)/gdm;
        return /bEnpxyz{1,32}?/gud;
    }
}
let v20;
try { v20 = new C3(); } catch (e) {}
const v21 = v20?.constructor;
try { new v21(); } catch (e) {}
try { new C3(); } catch (e) {}
const v24 = new C3();
const v25 = new C3();
const v26 = v25?.constructor;
let v27;
try { v27 = new v26(); } catch (e) {}
try { v27.valueOf(v27); } catch (e) {}
const v29 = v27?.constructor;
let v30;
try { v30 = new v29(); } catch (e) {}
const v31 = new C3();
class C35 {
    static 7 = Infinity;
    static get f() {
        function f37() {
            return C3;
        }
        return f37;
    }
    constructor(a39, a40) {
        const v41 = this?.__lookupGetter__;
        try { new v41(v27); } catch (e) {}
        const v43 = a40?.constructor;
        v43.name = v43;
        let v44;
        try { v44 = new v43(); } catch (e) {}
        const v45 = v44?.__defineSetter__;
        try { new v45(a40, a40); } catch (e) {}
        const v47 = a40?.constructor;
        try { new v47(); } catch (e) {}
        const v49 = v47?.constructor;
        try { v49.bind(v27); } catch (e) {}
        try { new v49(v1); } catch (e) {}
        let v52;
        try { v52 = new v47(); } catch (e) {}
        try { v52.valueOf(v44); } catch (e) {}
        if (a40) {
            a40 = C3;
        } else {
            v1 <<= v1;
        }
        try { a40(); } catch (e) {}
    }
}
const v55 = C35?.constructor;
try { new v55(C35); } catch (e) {}
C35.name = C35;
const v57 = new C35("boolean", v31);
v57.length = v57;
const v58 = new C35("boolean", v25);
v58.length = v58;
const v59 = new C35("boolean", v24);
const v60 = v59?.constructor;
try { v60.bind(v1); } catch (e) {}
try { new v60(v1, Infinity); } catch (e) {}
10 & 10;
try { new Uint8Array(Uint8Array, C35, v30); } catch (e) {}
Uint8Array.BYTES_PER_ELEMENT;
Uint8Array.length = Uint8Array;
new Uint8Array(10);
new BigInt64Array(153);
try { new Uint16Array(v25, BigInt64Array, Uint16Array); } catch (e) {}
let v75;
try { v75 = new Uint16Array(16, v58, 16); } catch (e) {}
v75[15];
const v77 = v75?.constructor;
let v78;
try { v78 = new v77(v75, Uint8Array, 10); } catch (e) {}
const v79 = new Uint16Array(16);
try { v79.join(v26); } catch (e) {}
v79[10] = v79;
const v82 = 5 !== 5;
v82 || v82;
const v85 = Int8Array?.constructor;
try { new v85(Int8Array); } catch (e) {}
const v87 = new Int8Array(5);
v87.g = v87;
let v88;
try { v88 = v87.entries(); } catch (e) {}
try { v88.next(); } catch (e) {}
let v90 = 200;
v90--;
v90 - v90;
v90 >>> v90;
Int8Array.g = Int8Array;
let v95;
try { v95 = new Int8Array(v31, 16, 16); } catch (e) {}
try { v95.map(v57); } catch (e) {}
let v97;
try { v97 = v95.entries(); } catch (e) {}
try { v97.next(); } catch (e) {}
-127;
const v102 = new BigUint64Array(127);
v102.BYTES_PER_ELEMENT = v102;
-2147483648 !== -2147483648;
-2147483648 << -2147483648;
-2147483648 >> -2147483648;
const v108 = -4294967295 << -4294967295;
v108 < v108;
141276884 + 141276884;
let v112 = 127;
v112++;
v112 >> v112;
BigInt64Array.length = BigInt64Array;
3685 != 3685;
let v119;
try { v119 = new Uint32Array(10, 10, Int8Array); } catch (e) {}
v119[1];
-1000;
v87[v102];
try { Math.expm1(v78); } catch (e) {}
-(324308659 - 324308659);
const v131 = Math.sin();
v131 << v131;
const v133 = 324308659 + 324308659;
v133 - v133;
v133 <= v133;
