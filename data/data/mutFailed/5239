new Float64Array(1);
new BigUint64Array(3325);
new Uint16Array(14);
const o12 = {
};
const v14 = new BigInt64Array();
let [,v15,v16] = v14;
class C17 {
}
const v18 = new C17();
const v19 = new C17();
const v20 = new C17();
function f21() {
    function f22(a23) {
        Math.atanh(-15);
        return Math;
    }
    return f22;
}
Object.defineProperty(v20, "valueOf", { writable: true, configurable: true, get: f21 });
const v28 = new Date();
const v30 = [Reflect,Reflect,Reflect,Reflect];
Reflect.apply(v28.getDate, v28, v30);
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    function f38(a39, a40) {
        Math.log1p(268435456);
        return f21;
    }
    this.constructor = f38;
    const v44 = this.constructor;
    try { new v44(this, a37, -14); } catch (e) {}
    a37.valueOf(a35, a37);
}
new F33(v19, v20, v20);
new F33(v19, v18, v18);
