const v0 = [];
function f1() {
    const o14 = {
        ...v0,
        [v0]: v0,
        get e() {
            let v2 = this;
            let v3 = v2 instanceof v0;
            ({"g":v3,"length":v2,...v2} = v0);
            v3 ^= v0;
            async function* f6(a7, a8) {
                yield* [a8];
                return -16257;
            }
            v2 = v0;
            const v11 = new Int16Array(-16257);
            super(v11);
            function f12() {
                return f12;
            }
            try {
                v0.length = v3;
            } catch(e13) {
            }
            return v3;
        },
    };
    return o14;
}
f1();
for (let v16 = 0; v16 < 25; v16++) {
}
const o38 = {
    next() {
    },
    m(a19) {
        let v18 = this;
        try { a19.next(); } catch (e) {}
        a19.g = a19;
        const o21 = {
        };
        function f22(a23, a24, a25) {
        }
        try {
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            o27.unscopables = o27;
        } catch(e28) {
        }
        try { Math.cos(a19); } catch (e) {}
        class C31 {
        }
        const v34 = new Int8Array(3938);
        let v35 = 3;
        v18++;
        [...v35] = v34;
        const o37 = {
        };
    },
};
try { o38.next(); } catch (e) {}
f1();
f1();
/[Xa[^a]n\p{Changes_When_NFKC_Casefolded}?]/vdiy;
function f43(a44, a45, a46, a47) {
    function f49(a50) {
        return arguments;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f49 });
    arguments.toString(a45, f43, f43);
    function f52() {
        ("Vre").fixed().normalize();
        let v56 = -268435456;
        const v57 = v56--;
        v57 << v57;
        return a46;
    }
    f52();
    %OptimizeFunctionOnNextCall(f52);
    return arguments;
}
const v60 = f43();
%PrepareFunctionForOptimization(f43);
/O(?:a*)*/gvdmy;
const v62 = /Q1[\ca]/gmsy;
try { ("Vre").search(v60); } catch (e) {}
const v67 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v68 = Float64Array;
v68 = v62;
try {
    v67.forEach(v68);
} catch(e70) {
}
new Map();
const v76 = new String();
Object.defineProperty(v76, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
