const v0 = [65537,-65537,-1024,-2147483649,65536];
function f1(a2, a3) {
    v0 ** v0;
    Math.atan2(-0.0, 2.0);
    return -0.0;
}
Object.defineProperty(v0, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f1 });
const v11 = [1203027929,-11,-9007199254740992,-2147483647,-65537,-4294967296,-2004181265,111228227];
const v12 = [-2984,-2147483648,1212853383,512,2147483648,-9007199254740992,4294967295];
class C13 {
    constructor(a15) {
        const v16 = a15[192];
        try {
            v12.d = v16;
        } catch(e17) {
        }
    }
    static get d() {
        return Reflect.construct(arguments, [v11,Reflect,arguments,v0,v12], arguments);
    }
}
new C13(v11);
const v24 = new C13(v0);
Object.defineProperty(v24, 192, { configurable: true, value: v12 });
const v25 = new C13(v24);
function f26() {
    const o27 = {
    };
    return o27;
}
v25[Symbol.toPrimitive] = f26;
class C30 {
    a;
    constructor(a32, a33, a34) {
        a33.toString = f26;
        v0[a33] = a34;
        const v35 = [a34];
        [C13,v11,v24,this];
        [v11,a34,v35];
    }
    f;
    1270509923 = v25;
    static f = C13;
    d = v25;
    [C13];
}
const v38 = new C30(C30, v25, C30);
function f39() {
    return Symbol;
}
function f40(a41) {
    class C44 {
        static get d() {
        }
        c;
        static #e = -1000000.0;
        4294967295;
        #a;
    }
    try { C44.search(-1000000.0, -1000000000.0); } catch (e) {}
}
Object.defineProperty(v38, Symbol.toPrimitive, { writable: true, get: f39, set: f40 });
const v49 = new C30(C30, v38, v25);
new C30(C30, v0, C13);
for (let i54 = 0, i55 = 10; i54 < i55; i54++, i55--) {
    C13[0];
}
new Set();
function f68() {
}
new BigUint64Array(0);
new BigInt64Array(257);
const v84 = new Uint8ClampedArray(3);
class C85 {
    constructor(a87, a88, a89, a90) {
        function f91(a92, a93) {
            a88 instanceof a93;
            const v98 = v49 - -v49;
            !v98;
            Math.imul(v98, 446306635);
            return v98;
        }
        a90.valueOf = f91;
        const v101 = this.constructor;
        try { new v101(3983, a90, this, this); } catch (e) {}
        for (let v103 = 0; v103 < 5; v103++) {
            v84[v103] = a90;
        }
    }
}
new C85();
