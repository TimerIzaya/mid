class C2 {
    #valueOf(a4, a5, a6, a7) {
    }
}
function f9() {
    return 160;
}
const v12 = Math.tan(4.0);
class C14 {
    m(a16) {
        let v19 = 4;
        function f21() {
            function f23(a24) {
                try {
                    this.toString = a16;
                } catch(e25) {
                }
            }
            this.onmessage = f23;
            this[7] = f23;
            v19 &&= v12;
        }
        const v28 = [];
        const o29 = {
            "arguments": v28,
            "type": "function",
        };
        new Worker(f21, o29);
        Math.sqrt(1073741824);
        const v32 = ~v19;
        Math.exp(a16);
        Math.ceil(++a16);
        ~v32;
        ("-4294967295").replace();
        new BigUint64Array(10);
        Math.sinh(v19);
        return v32;
    }
    static [C2] = C14;
    static #n(a44, a45, a46, a47) {
        a46.e |= a46;
        super.d = a44;
        return this;
    }
    static c;
}
try { C14.call(-578.8409641020935); } catch (e) {}
const v49 = new C14();
new C14();
const v51 = new C14();
const v52 = v51?.constructor;
try { new v52(); } catch (e) {}
const v54 = [65537,-15,16,-9223372036854775808,6,-58041];
const v55 = [-488050305,257,2048902584,-4294967295,1024,-2116999726,843,-59543,553605766];
let v56;
try { v56 = v55.fill(160); } catch (e) {}
Object.defineProperty(v54, "h", { writable: true, configurable: true, enumerable: true, set: f9 });
v51[v56] = -578.8409641020935;
-(-1000000.0);
const v59 = Symbol.iterator;
const o68 = {
    [v59]() {
        let v61 = 10;
        const o67 = {
            next() {
                v61--;
                const v65 = v61 == 0;
                const o66 = {
                    "done": v65,
                    "value": v61,
                };
                return o66;
            },
        };
        return o67;
    },
};
const v69 = [-1653309803];
268435456 * 268435456;
const o75 = {
    "execution": "async",
    "type": "minor",
};
gc(o75);
function f79() {
    return 65536;
}
try { new f79(); } catch (e) {}
const v82 = new Set();
try { v82.add(v49); } catch (e) {}
("29753")[3];
const v86 = ("29753").replaceAll("29753");
try { v86.split("b", v69); } catch (e) {}
