const v2 = new BigInt64Array(257);
let v3 = 220;
class C4 {
}
const v5 = [];
v5.push();
function f7(a8, a9, a10, a11) {
    function F12() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C15 extends F12 {
    }
    return C15;
    function f16() {
        return f16;
    }
    const v17 = f16();
    function f18(a19, a20) {
        const o22 = {
            get d() {
                return this;
            },
        };
        return v17;
    }
    f18(f18());
    return f7;
}
%OptimizeFunctionOnNextCall(f7);
const v25 = v3--;
new Float32Array(v3);
new BigUint64Array(15);
function f33() {
    return f33;
}
function f35(a36, a37, a38, a39) {
    return a39 >= a39;
}
for (let v41 = 0; v41 < 10; v41++) {
    f35(v41, v41, f33, 522675525n);
}
try { ("toString").toLocaleLowerCase(); } catch (e) {}
const v44 = /[^7Y[a-zA-Z0-9]?]/vdmy;
const o46 = {
    [v44]: f7,
    [f7]: -65537,
    65536: -65537,
};
function f47() {
    class C48 extends -65537 {
        [v2];
    }
    function f52(a53, a54) {
        const o59 = {
            "c": -11,
            set g(a56) {
                try {
                    super.o(this, a56);
                } catch(e58) {
                }
            },
            ...a54,
            "a": a54,
            __proto__: a54,
        };
        return o59;
    }
    f52(15, f52(-11, -128));
    const v63 = Array();
    let v64;
    try { v64 = v63.reduceRight(v44); } catch (e) {}
    return v64;
}
[4130,-52478,747598676,600719635,12,-65537,-9007199254740990,35525,-65536];
const v67 = [-65536,-15,10000,-2023043780];
try { v67.concat(BigInt64Array); } catch (e) {}
const v69 = [1,4294967296,-9007199254740992,4,-4294967295,-9,-4294967297,255,536870888,255];
const v70 = [1073741824,1073741823,1376142744,1073741825];
function f71(a72, a73, a74, a75) {
    try { v70["find"](); } catch (e) {}
    return v70;
}
for (let v78 = 0; v78 < 10; v78++) {
    f71(v78, f71, v70, v70);
}
[v69,v69,v69];
function f81() {
    Array(5);
    const o86 = {
        "construct": Array,
        "defineProperty": Array,
        "getPrototypeOf": Array,
        "preventExtensions": Array,
        "set": Array,
    };
    const v87 = Symbol.for();
    const o88 = {
        [v87]: f81,
    };
    return f81;
}
f81();
[2,-9,849046370,4294967297,1073741824];
const v91 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
v91.g = v91;
const v92 = v91.push(v91);
-v92;
const v94 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
switch (v94) {
    default:
        function F95(a97, a98) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a98;
            } catch(e99) {
            }
            try {
                this.e = 257;
            } catch(e100) {
            }
        }
        const v101 = new F95(15, 15);
        new F95(15, v25);
        const v103 = new F95(v92, 257);
        class C104 {
            constructor(a106, a107) {
                try {
                    C104++;
                } catch(e109) {
                }
            }
        }
        let v110;
        try { v110 = v94(); } catch (e) {}
        v103[257];
        try {
            v101.__proto__ = "QP7";
        } catch(e112) {
        }
        try { v110(); } catch (e) {}
        break;
    case v44:
    case v3:
        try {
            v5.length = 1;
        } catch(e115) {
        }
        break;
}
const v118 = new Date();
v118.setUTCFullYear(Date, v118, Date);
function F120() {
    if (!new.target) { throw 'must be called with new'; }
    const o122 = {
    };
    class C124 extends Uint32Array {
    }
    class C126 {
        #d = 4096;
        static {
            try {
                this.#d;
            } catch(e129) {
            }
        }
    }
    const v131 = new Proxy(this, o122);
    v131.hasOwnProperty();
}
new Int8Array(v91);
