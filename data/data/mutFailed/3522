const v2 = new Uint16Array(230);
function f5() {
    class C7 {
    }
    class C8 extends C7 {
        m(a10, a11, a12) {
            for (let [v13,v14] of "puWUt") {
            }
        }
    }
    return C8;
}
Int32Array[Symbol.toPrimitive] = f5;
const v23 = new Int32Array(128);
Object.defineProperty(v23, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f5 });
v23[48];
try { v23.join(Int32Array); } catch (e) {}
let v28 = 1024;
v28--;
const v31 = new Int16Array(v28);
try { v31.join(v31); } catch (e) {}
const v33 = [Int16Array,Int16Array,v2];
const v34 = [230,v2,v23,v23];
const v35 = [v34,v33,Uint16Array];
try { v35.sort(v28); } catch (e) {}
function f37(a38, a39) {
    a39 - a39;
    a38 & a38;
    const o46 = {
        [-1]: 230,
        [v23]: a38,
        [v2]: Int16Array,
        "e": v34,
        "h": v33,
        [a39]: v28,
        get c() {
            try {
                new Uint16Array(v34);
            } catch(e44) {
            }
            const v45 = new Uint16Array(v35, a38, 230);
            return v45;
        },
        "g": Uint16Array,
    };
    o46[128];
    o46[128] = o46;
    return o46;
}
const v48 = f37(230, 128);
function f49() {
    return Symbol;
}
function f50(a51) {
}
Object.defineProperty(v48, Symbol.toPrimitive, { writable: true, get: f49, set: f50 });
const v57 = f37(230, v48);
v57[128] = v57;
const t58 = f37(v28, v23);
t58[128] = v35;
const v59 = [-1.7976931348623157e+308,-0.0,-1000000000000.0,18.192610755442843,-7.676824412389783,1000000000.0,-3.0];
const o60 = {
    __proto__: v59,
};
o60[2];
try { o60.fill(v35); } catch (e) {}
const v63 = o60.unshift();
v63 >> v63;
16 != 16;
try { SharedArrayBuffer.apply(); } catch (e) {}
217 << 217;
const v71 = new SharedArrayBuffer(217);
v71.byteLength = v71;
v71.slice(v71, 16);
