[-1000000000.0,-13722.651990014245];
const v1 = [-1.457825525726286e+308];
const v2 = [0.0,-Infinity];
function f3(a4) {
    function F5(a7, a8, a9, a10) {
        if (!new.target) { throw 'must be called with new'; }
        a7.propertyIsEnumerable();
    }
    return v1;
}
v2[Symbol.toPrimitive] = f3;
const v14 = [-1.2422537423621345e+308,-3.0];
try { v14.copyWithin(v1, v2); } catch (e) {}
v14[1];
const v17 = [-3.0,947.2699728019545,2.2250738585072014e-308,628014.3096313009,NaN,0.7603203792593032,-4.0];
let v18;
try { v18 = v17.toLocaleString(); } catch (e) {}
const v19 = [-4.0,-156.98585300057096,558457.2064182763,6.045713681330373,208.04756583284666,-4.302486085347055,5.939718758222541e+307,5.0];
class C20 {
    2284436437;
    m(a22, a23, a24, a25) {
        try {
            this.a = v19;
        } catch(e26) {
        }
        return v2;
    }
    static m(a28, a29) {
        BigUint64Array.prototype = BigUint64Array;
        new BigUint64Array(9);
        new Uint8Array(4);
        new Uint16Array(246);
        return a28;
    }
}
try { new C20(); } catch (e) {}
let v40;
try { v40 = C20.m(v14, v1); } catch (e) {}
try { v40.push(v14); } catch (e) {}
new C20();
new C20();
const v44 = new C20();
v44[2284436437];
const v48 = new Uint8Array(77);
Object.defineProperty(v48, "d", { configurable: true, enumerable: true, value: 77 });
v48.d = v48;
const v50 = 12 + 12;
v50 * v50;
new Int8Array(12);
319 != 319;
const v57 = new Uint8ClampedArray(319);
try { v57.values(); } catch (e) {}
function f60(a61) {
    Object.defineProperty(v18, a61, { enumerable: true, value: a61 });
    function F62(a64, a65, a66, a67) {
        if (!new.target) { throw 'must be called with new'; }
        ~a65;
        a67 | a67;
        const v70 = this.constructor;
        try { new v70(); } catch (e) {}
        typeof Float32Array;
    }
    return v40;
}
Float64Array.toString = f60;
try { new URIError(Float64Array); } catch (e) {}
URIError(Float64Array);
