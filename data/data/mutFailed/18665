new Int16Array(466);
new Int16Array(3);
new Int32Array(161);
let v9 = -9223372036854775807n;
const v10 = [];
const v12 = new BigInt64Array(v10);
function f13() {
    return f13;
}
Object.defineProperty(v12, v10, { enumerable: true, get: f13 });
const v16 = Uint8Array.toString(Uint8Array, v10, Uint8Array, Uint8Array, Uint8Array);
const v18 = ([]).constructor;
const v20 = new Float32Array();
v20.filter(v18);
new v16();
function f25() {
    return v9;
}
/[[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]]/vim;
for (let i28 = 0; i28 < 10; v9++) {
    try { ("boolean").trimEnd(); } catch (e) {}
    class C36 {
        constructor(a38) {
            for (let v39 = 0; v39 < 5; v39++) {
                const v41 = "p" + v39;
                try { v41.matchAll(C36); } catch (e) {}
            }
        }
    }
    new C36();
    try {
        const o44 = {
        };
    } catch(e45) {
    }
}
