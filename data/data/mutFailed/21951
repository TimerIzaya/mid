function f0() {
}
const v4 = [9740,-750484518,-5,-4096];
[-4294967297];
const v6 = [-17411,41571,1510262110,-1073741824,-65536,4096,-1073741824,11];
function f10(a11, a12, a13, a14) {
    const o40 = {
        "g": -268435456n,
        "f": 2,
        ...v6,
        get e() {
            try { this.p(a13); } catch (e) {}
            new Uint8Array(5);
            new BigUint64Array(3);
            const v26 = new Uint8Array(268435440);
            function F27() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C29 {
                constructor(a31, a32, a33) {
                    class C35 extends a32.constructor {
                    }
                    new C35();
                }
            }
            new C29(F27, C29);
            const v39 = new Float32Array(127, a13, v26);
            return v39;
        },
    };
    return o40;
}
f10(-1462652596, v6, -268435456n, -268435456n);
f10(-1462652596, v4, f0, -43611n);
f10(-51932, v4, v6, -268435456n);
function F44(a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    a47 === a47;
    new BigUint64Array(BigUint64Array);
    /{z}/gims;
}
function f53() {
    for (let v54 = 0; v54 < 5; v54++) {
        const v55 = new F44();
        const v56 = v55.e;
        class C57 {
        }
        const v58 = new C57();
        for (const v59 in v58) {
        }
        new v56(F44, f53);
    }
    return f53;
}
%PrepareFunctionForOptimization(f53);
f53();
%OptimizeFunctionOnNextCall(f53);
f53();
