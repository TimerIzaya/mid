let v1 = -9007199254740991;
const v6 = new Int32Array();
const v8 = new BigInt64Array();
const v9 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v10 = [-1.7976931348623157e+308];
v10[129] = 11;
function f11(a12, a13, a14, a15) {
    const o21 = {
        toString(a17, a18, a19) {
            a14[a13] = a12;
            return 255n;
        },
    };
    function f22() {
        return f11;
    }
    Object.defineProperty(o21, Symbol.toPrimitive, { writable: true, configurable: true, get: f22 });
    return o21;
}
let v25 = f11(v8, 129, v10);
v25[Symbol.toPrimitive] = f11;
const v28 = f11(v6, 129, v9);
function f29(a30, a31) {
    a30 & a30;
    const v37 = v25++;
    !-2147483649;
    +v25;
    +v37;
    return 11;
}
v28.valueOf = f29;
for (let v41 = 0; v41 < 5; v41++) {
    v28 % v25;
    v9.b = v6;
}
--v1;
268435439 % 10000;
!-1.0;
new BigInt64Array(5);
new BigUint64Array(9);
new Uint32Array(4096);
new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
[[]];
