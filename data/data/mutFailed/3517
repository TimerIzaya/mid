const v2 = new Int32Array(4);
let v5 = new BigUint64Array(16);
new Int16Array(15);
const v9 = [-3.0,-7.458512305260748e+307,-2.0];
[-2.0];
const v11 = [0.5644799317302278,-7.853040500963831e+307,-988.8159873476843,-1000000000000.0,-1000000.0];
try { v11.findIndex(BigUint64Array); } catch (e) {}
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.constructor;
    try { new v17(v2, 16); } catch (e) {}
    try {
        this.c = a16;
    } catch(e19) {
    }
    try {
        this.e = a15;
    } catch(e20) {
    }
}
F13.g = F13;
const v21 = new F13(v11, 16);
const v22 = [F13,v2,Int16Array,v5,Int32Array];
const v23 = [15,v21];
[v2,v23,v22,v23,v23];
const v25 = --v5;
let v26;
try { v26 = v9.entries(); } catch (e) {}
const v27 = new F13(v11, 15);
v27.length = v27;
const v28 = new F13(v9, 16);
const v29 = v28?.constructor;
try { new v29(v21, v28); } catch (e) {}
const v32 = new Set();
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a35;
    } catch(e37) {
        for (let [v38,v39] of a35) {
            class C40 {
            }
            const v41 = new C40();
            const v42 = v41.g;
            try {
                v42.length = 1;
            } catch(e44) {
            }
            try {
                v39.values();
            } catch(e46) {
            }
        }
    }
    let v47 = 0;
    while (v47 < 10) {
        %VerifyType(16);
        v26 = BigUint64Array;
        v47++;
    }
    try {
        this.h = v32;
    } catch(e51) {
        Math.atan2(257, 257);
    }
    try {
        const v55 = v32[this];
        try {
            new F33(v55, -2046072084n);
        } catch(e58) {
        }
        this.b = Set;
    } catch(e59) {
    }
}
F33.length = F33;
const v60 = new F33(Set, Set);
let [v61,,...v62] = v32;
const v64 = Symbol.toPrimitive;
const v65 = v62[v64];
const o68 = {
    "maxByteLength": 65535,
};
new ArrayBuffer(1024, o68);
new DataView(o68);
try {
    v60.toString = v65;
} catch(e73) {
}
new F33(Set, F33);
new F33(v60, F33);
[28.464807941936897,0.6876471799475875,-4.024971662372387,-1000000000.0,-982.6382193743566,Infinity,0.0,-4.0,-821.2850284587798];
[0.27109226904944717,-4.9641037907328345,0.0,2.220446049250313e-16];
[1.7976931348623157e+308,-488.74642043706683,-4.0,-4.0,-1.7976931348623157e+308,1.0,-0.0,0.6085307230700101];
const v85 = [65537,268435441,63298,-5,1235122603];
const v86 = [128,215394418];
try { v86.entries(); } catch (e) {}
[-2,-4294967296,4294967297];
function F89(a91, a92, a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    const v95 = this.constructor;
    try { v95(1024, 1024, v85); } catch (e) {}
}
new F89(-714582153, F89, -714582153, v86);
let v99 = -1;
class C101 {
}
function f102(a103, a104, a105, a106) {
}
function f107() {
    const o111 = {
        [v25](a110) {
        },
    };
}
f107(v64, -35417, F33);
class C113 extends f107 {
}
const o116 = {
    set b(a115) {
        v99 <<= v99;
    },
};
