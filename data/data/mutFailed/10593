const v2 = new Int16Array(12);
const v5 = new Float32Array(14);
const v8 = new Uint8ClampedArray(512);
function f9(a10, a11, a12) {
    a10 !== a10;
    a11 & a11;
    a12++;
    const o19 = {
        ...v8,
        "c": v8,
        "d": a12,
        512: a11,
        "a": a10,
        "g": a12,
        __proto__: a12,
        "h": v2,
        get b() {
            try {
                super.getInt8(this);
            } catch(e18) {
            }
            return this;
        },
    };
    o19[367];
    return o19;
}
const v21 = f9(512, 512, 14);
f9(Float32Array, 12, f9, Uint8ClampedArray, 14, 14);
try { Math.cbrt(14); } catch (e) {}
let v27 = -51142;
const v28 = v27++;
v28 | v28;
+v28;
const v31 = Math.acosh(v27);
v31 >>> v31;
const v34 = new Int16Array(/5mxyz{0,1}?/gimsy);
const v36 = new BigUint64Array();
const v37 = v36.byteLength;
v34[v37] += v37;
const v38 = Math.sign(v27);
const v39 = Math.max(15);
v39 * v39;
const v41 = f9(12, 512, 14);
const v42 = f9(12, 512, 12);
v42[125];
const v44 = [v8,Float32Array,f9,v41,Float32Array];
[v44,v42];
[Uint8ClampedArray,v21];
/ND2/gds;
const o49 = {
    "call": f9,
};
const v50 = o49?.call;
try { new v50(v34, Uint8ClampedArray, o49); } catch (e) {}
new Proxy(v41, o49);
class C54 extends Map {
}
const v55 = new C54();
v55.isPrototypeOf();
7 + 7;
try { new Date(v44, v44, v44, v55, BigUint64Array, Date, v44); } catch (e) {}
class C61 {
    static {
        this.prototype = this;
        super.h = v5;
        try { new C61(this, v42, o49); } catch (e) {}
        const v64 = super[Date];
        const t67 = f9(this, C61, 12);
        t67[8] = v38;
        for (let v66 = 0; v66 < 25; v66++) {
            v66++;
            const v68 = [601759695];
            const v69 = [1073741824,1073741823,1376142744,1073741825];
            try { v69.entries(); } catch (e) {}
            function f72(a73, a74, a75, a76) {
                a73.length = a73;
                a74 * a74;
                a75 & a75;
                try { new v21(); } catch (e) {}
                a75 << a75;
                function f82() {
                    return a73;
                }
                const v84 = new Int8Array();
                try { BigUint64Array.apply(v44, v64); } catch (e) {}
                let v88 = BigUint64Array * 536870887;
                v88++;
                const v90 = v88 - v88;
                const v91 = v66 ** v88;
                v91 - v91;
                Number.isNaN(v90);
                function f95(a96, a97) {
                }
                try { f95.toString(); } catch (e) {}
                try { f95(); } catch (e) {}
                const v100 = v84.buffer;
                v100.resizable = v100;
                const v101 = v100.__defineGetter__;
                v101.length = v101;
                try { v101(); } catch (e) {}
                Object.defineProperty(v100, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f82);
                let v104;
                try { v104 = v69["find"](..."find", a76, ...v68); } catch (e) {}
                const o105 = {
                };
                o105.e = o105;
                v104 <= a75;
                return this;
            }
            for (let v107 = 0; v107 < 5; v107++) {
                f72(this, v107, v107);
            }
        }
    }
}
try { new C61(); } catch (e) {}
const o110 = {
};
new Int16Array(512);
