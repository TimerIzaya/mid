function f0() {
}
const v3 = new Uint16Array(128);
v3[103] = v3;
try { new Int16Array(v3, 128, f0); } catch (e) {}
new Int16Array(127);
Float32Array.g = Float32Array;
const v10 = new Float32Array(5);
const v11 = v10?.some;
try { new v11(Int16Array); } catch (e) {}
let v15 = -7;
v15++;
let v17 = 1273;
v17--;
new Uint32Array();
const v21 = [4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886];
try { v21.findIndex(Uint32Array); } catch (e) {}
const v23 = v21.toLocaleString();
new f0();
function f25() {
    return f25;
}
new Float64Array();
function f30(a31, a32) {
    return -9223372036854775807;
}
[NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
function f34(a35, a36) {
    return 128;
}
const v37 = [];
const v38 = [-6.786788220284745e+307,3.0441372838377454,0.16607240252493405,9.1870148243921,-1.1724672307306477e+307,-1.3233810423722777e+308,0.3268930863961368];
const v39 = [1.1232876344345233e+308,1.0,3.0,-1.7976931348623157e+308,892.6991223982873,1000000.0,0.1500507613745743,8.371259043064821,1e-15,-192.2897093527156];
try { v39.findIndex(127); } catch (e) {}
const v41 = [1000000.0,2.0511322290964932e+307];
function f42(a43, a44) {
    try { a43.reverse(); } catch (e) {}
}
const v46 = f42(v39, v37);
f42(v41, v38);
const v48 = v41 || v46;
try { v48["asinh"](); } catch (e) {}
class C51 {
    constructor(a53, a54, a55, a56) {
        const t44 = this.constructor;
        t44();
        a54 >>> a54;
        -0.0 >>> -0.0;
    }
}
new Float32Array();
[-2.317948391170037,5.380512071963272,1.0,532131.8089454074];
[0.9815406638516286,121.30534539703694,-5.0,Infinity,-611091.1872133282,0.3052766402808791,0.0009368873469747241];
const v67 = [0.3692093935150569];
try { v67.lastIndexOf(v23); } catch (e) {}
class C69 {
    toString(a71, a72, a73, a74) {
        this.length;
        const v76 = [15,52917,-9223372036854775807,-647320912,1463936330,-11132,-65537,1005084643,16,1073741823];
        function f77() {
            const v79 = ("Vre").fixed("Vre");
            v79[4] = v79;
            const v80 = v79.concat(v76);
            try { v80.padStart(v80); } catch (e) {}
            return v80;
        }
        const v82 = f77();
        v82[98] = v82;
        try { ("throw").toLocaleLowerCase(); } catch (e) {}
        try { this["throw"](); } catch (e) {}
        let v87 = 512;
        v87--;
        try { new Uint8ClampedArray(128, 128, v76); } catch (e) {}
        const v91 = new Uint8ClampedArray(v87);
        new Uint8ClampedArray(798, ...v91, eval());
    }
    constructor(a96, a97) {
        const v98 = this?.constructor;
        try { new v98(f34, f34); } catch (e) {}
        function F100(a102, a103, a104) {
            if (!new.target) { throw 'must be called with new'; }
            return -9223372036854775807;
            const o105 = {
            };
            Array(19793);
        }
        let v109 = 115;
        try { Math.expm1(a97); } catch (e) {}
        const v112 = v109--;
        v112 - v112;
        const v114 = Math.imul(v112);
        v114 >> v114;
        typeof arguments;
        for (let i = 0; i < 5; i++) {
            this[this];
        }
    }
}
C69.name = C69;
const v120 = new C69();
const v121 = v120?.__defineGetter__;
try { new v121(v39, v39); } catch (e) {}
