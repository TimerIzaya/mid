const v2 = new Int16Array(1122);
let v3 = 6;
const v4 = v3 * v3;
v4 >>> v4;
v4 >> v4;
let v7 = v3++;
v7++;
const v10 = Int16Array.length;
v10 + v10;
const v12 = new Int16Array(v3);
let v13 = 7;
let v14 = v13--;
v14++;
const v16 = v13 * v13;
Object.defineProperty(Int32Array, 1, { writable: true, value: v16 });
try { new Int32Array(Int32Array, Int32Array, v3); } catch (e) {}
const v19 = new Int32Array(v13);
let v22;
try { v22 = Set.apply(v14, v4); } catch (e) {}
new Set();
function f24(a25, a26, a27) {
    a25 !== a25;
    a26 + a26;
    let v30 = a25 % a25;
    const v31 = v30++;
    v31 >> v31;
    const v33 = v31 & v31;
    v33 / v33;
    a26 << a26;
    const o43 = {
        1073741825: a25,
        "f": Int16Array,
        [a26](a37, a38) {
            [2.0,0.943593582717391,93444.28155144816,1.0,4.0,1e-15,-2.0,8.278155552815132,-1000.0];
            [83.2845904066221,-Infinity,1.7976931348623157e+308];
            const v41 = [1.2341426245784496e+308,1000000000000.0,1.7976931348623157e+308,Infinity,-12.8532625422215,-1000000000.0];
            try {
                v19.h = v41;
            } catch(e42) {
            }
            return this;
        },
        __proto__: v12,
        3: v12,
    };
    try { o43.copyWithin(v2, f24); } catch (e) {}
    o43[1073741825] = o43;
    return o43;
}
const v45 = f24?.bind;
v45.length = v45;
try { new v45(false); } catch (e) {}
const v47 = f24(1122, v13, v13);
const v48 = f24(v13, 1122, false);
v48[1122];
try { v48.findLast(v48); } catch (e) {}
const v51 = f24(v3, v3, f24);
try { v51.copyWithin(f24, Set); } catch (e) {}
function f53(a54, a55, a56, a57) {
    a55.e = v16;
    a56.c = a55;
    function f58() {
        return a56;
    }
    f58.arguments = f58;
    try { f58(); } catch (e) {}
    const v60 = f58.bind(a56, f53, a55, f53);
    v60.g = v60;
    v60.e = v60;
    return a56;
}
f53.constructor = f53;
const v61 = f53.length;
v61 - v61;
const v63 = v61 - v61;
for (let v64 = 0; v64 < 10; v64++) {
    f53();
}
%OptimizeFunctionOnNextCall(f53);
const v66 = f53(f53, f53, f53, f53);
v66.c = v22;
const v67 = v66?.constructor;
try { new v67(v63); } catch (e) {}
v66.e = v66;
try { v66(Set, v47, 1122, 1122); } catch (e) {}
v66.c = v66;
