-11 != -11;
class C7 {
    static {
        try { this.call(-11); } catch (e) {}
        try {
        const t0 = -51613;
        t0(-9007199254740991, this, -51613, -2147483648);
        } catch (e) {}
        const v14 = -2147483648;
        Math.h = Math;
        let v16 = -2147483649;
        let v17 = -8.117683426573176;
        --v17;
        Math.abs(v16);
        Math.sin(this);
        const v21 = v16++;
        v21 & v21;
    }
    static 1 = Infinity;
}
const v23 = new C7();
const v24 = v23?.__defineGetter__;
try { new v24(9, -11); } catch (e) {}
const v26 = new C7();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
new C7();
1073741824 - 1073741824;
const v35 = new Map();
try { v35.forEach(Infinity); } catch (e) {}
function f37(a38) {
    return a38;
}
f37.d = f37;
const o41 = {
    "type": "function",
};
o41.arguments = f37;
const v42 = new Worker(f37, o41);
v42.terminateAndWait();
class C3 {
    static {
        class C5 {
            static 3;
        }
        new C3();
        new C5();
        new C5();
    }
    set e(a10) {
        const o14 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o14);
    }
}
const v16 = new C3();
const v17 = new C3();
const v18 = new v17();
class C19 {
    n(a21, a22) {
        try { new a22(36590, a21, a22, this, -10); } catch (e) {}
        function F24(a26, a27, a28, a29) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = a28;
            } catch(e30) {
            }
            try {
                this.f = -10;
            } catch(e31) {
            }
        }
        const v32 = new F24(-56327, a22, -10, C3);
        const v33 = new F24(-56327, a21, 36590, v32);
        new F24(36590, a21, v33, v16);
        return v18;
    }
}
new C19();
const v36 = new C19();
new C19();
class C38 extends C3 {
    static set d(a40) {
        try {
            super[v36] = v16;
        } catch(e41) {
        }
    }
    n(a43, a44, a45, a46) {
        const o49 = {
            "maxByteLength": v17,
        };
        const v51 = new ArrayBuffer(646, o49);
        new Int32Array(v51);
        return -56327;
    }
}
new C38();
new C38();
new C38();
function F57() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 10270;
    } catch(e60) {
    }
    try {
        this.e = 10270;
    } catch(e61) {
    }
}
new F57();
new F57();
new F57();
const o71 = {
    230: 3,
};
let v72 = 0;
while (v72 < 6) {
    let v75;
    try { v75 = o71.repeat(); } catch (e) {}
    o71[v75];
    v72++;
}
