const v0 = /a\w/guims;
const v1 = /9(?:a+)?(?:a?)?/gvs;
const v2 = /xyz{1,}a\b!/gvdis;
function f3(a4, a5) {
    return v1;
}
v2[Symbol.toPrimitive] = f3;
0.10211909365986094 - 0.10211909365986094;
const v14 = 0.546653387580812 - 0.546653387580812;
let v15 = -993953.411753612;
v15--;
class C17 {
    #n(a19, a20) {
        try {
            a19.#n(0.546653387580812, v1, 0.10211909365986094, v1);
        } catch(e22) {
        }
        try { v1.test(this); } catch (e) {}
        const v25 = Symbol.iterator;
        const o34 = {
            [v25]() {
                let v27 = 10;
                const o33 = {
                    next() {
                        v27--;
                        const v31 = v27 == 0;
                        const o32 = {
                            "done": v31,
                            "value": v27,
                        };
                        return o32;
                    },
                };
                return o33;
            },
        };
        return 0.546653387580812;
    }
}
function f35() {
    function f36(a37, a38, a39) {
        return a39;
    }
    return 0.546653387580812;
}
C17.toString = f35;
const v40 = C17.length;
v40 / v40;
const v42 = new C17();
function f43(a44, a45) {
    new Uint16Array(3917);
    const v51 = new Uint8Array(1339);
    new Float32Array(118);
    return v51;
}
v42.constructor = f43;
const v55 = v42?.__lookupGetter__;
try { new v55(v2); } catch (e) {}
const v57 = v42?.constructor;
v57.length = v57;
let v58;
try { v58 = new v57(); } catch (e) {}
v58.constructor = f3;
const v59 = v58?.constructor;
try { new v59(); } catch (e) {}
const v61 = new C17();
let v62;
try { v62 = v61.propertyIsEnumerable(v57); } catch (e) {}
v62 && v62;
const v64 = new C17();
let v65;
try { v65 = v64.valueOf(); } catch (e) {}
const v66 = v65?.constructor;
try { new v66(); } catch (e) {}
12 < 12;
12 * 12;
const v72 = new Float64Array(12);
let v73;
try { v73 = v72.join(v2); } catch (e) {}
v73.d = v73;
~v72[9];
64 % 64;
const v79 = Uint8ClampedArray.name;
try { v79.includes(v14); } catch (e) {}
const v81 = new Uint8ClampedArray(64);
v81[61];
let v83 = 16;
let v84 = v83++;
v84--;
-v84;
const v88 = new Int8Array(v83);
let v89;
try { v89 = v88.reduce(C17); } catch (e) {}
for (let v90 = 0; v90 < 5; v90++) {
    v90 + v90;
    try { Math.exp(v89); } catch (e) {}
    const v94 = Math?.expm1;
    try { new v94(v0); } catch (e) {}
    -2147483649 == -2147483649;
    let v98 = -2147483649 * v90;
    ++v98;
    Math.tan(v98);
}
/[\ca]a(?=b)+/gisuy;
/(?:a+){0,0}Va\qna(?!bbb|bb)c0*/s;
/a+ba{0,1}?/gd;
class C13 {
    static #e = NaN;
}
[2147483649n];
