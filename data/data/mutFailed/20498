function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a12;
    } catch(e14) {
    }
    try {
        this.g = "e";
        try {
            const v15 = ["a",a11,268435439,this];
            ["-536870912","jCM48",v15,v15,a12];
            ["f",a12];
        } catch(e18) {
            const o19 = {
            };
            new Proxy("f", o19);
        }
    } catch(e22) {
    }
    try {
        this.h = a11;
    } catch(e23) {
    }
}
new F9("a", "a", 268435439);
new F9(38022, "jCM48", 257);
new F9(F9, "-536870912", 257);
const t27 = -870;
t27.e = -870;
const v30 = new Int16Array(127, 127, 127);
const v31 = v30.constructor;
let v33 = -7;
class C35 {
    constructor(a37, a38) {
        const v39 = this.constructor;
        try { new v39(v39); } catch (e) {}
        this[-2147483648] >>>= v33;
        let v41 = 0;
        while (v41 < 1) {
            const v46 = v33--;
            Math.atan();
            v33 * 7;
            Math.floor();
            const v50 = v46 + 7;
            v50 * v50;
            const v52 = v41++;
            v52 - v52;
        }
    }
}
new C35();
function f59() {
    const v62 = new Int32Array(1024);
    for (const v63 of v62) {
        new SharedArrayBuffer();
    }
}
function f67() {
    const t58 = true;
    t58[3] = 5n;
    return v31;
    this.escape();
    class C73 {
        [720972705n];
        #p(a75, a76, a77, a78) {
            super.m();
        }
    }
    const v80 = new C73();
    const v81 = new C73();
    const v82 = new C73();
    try { v81(v81, v80, -8n, ...v82); } catch (e) {}
    return true;
}
new Uint32Array();
function F87(a89, a90) {
    if (!new.target) { throw 'must be called with new'; }
    const v91 = this.constructor;
    const v92 = [];
    function f93() {
        const v94 = -v92;
        const o95 = {
        };
        try {
            o95.f = 268435440n;
        } catch(e96) {
        }
        try {
            const o97 = {
            };
            o97.f = 268435440n;
            o97.a = v94;
        } catch(e98) {
        }
        try {
            const o99 = {
            };
            o99.f = 268435440n;
            o99.a = v94;
            o99.d = v94;
        } catch(e100) {
        }
        try {
            const o101 = {
            };
            o101.f = 268435440n;
            o101.a = v94;
            o101.d = v94;
        } catch(e102) {
        }
        return v94 && v92;
    }
    f93();
    try { new v91(268435440n, a90); } catch (e) {}
}
const o107 = {
    get f() {
    },
};
new F87();
new F87();
function f110(a111) {
    const o114 = {
        valueOf(a113) {
        },
    };
}
const v116 = new Uint32Array();
Object.defineProperty("valueOf", 7, { writable: true, configurable: true, enumerable: true, set: f67 });
-536870912 <= C35 ? -536870912 : C35;
try {
    const t131 = "a";
    t131.valueOf = f59;
} catch(e119) {
}
for (const v120 in v116) {
    Math.log1p(5.712452742881646e+307);
}
function f124(a125, a126) {
    const o128 = {
        get h() {
        },
    };
}
function f129() {
}
class C130 extends f129 {
    constructor(a132) {
        for (let v133 = 0; v133 < 5; v133++) {
        }
    }
}
