const v0 = [-0.0,-0.7791848458798274,1000000000000.0,4.884906871252059e+307,-1.456682554398297e+308,-Infinity,687.662132290207,-2.2694111622834706e+307,1.7976931348623157e+308];
let v1 = [-2.2250738585072014e-308,1000.0,-1.7976931348623157e+308,884521.0070985751,623887.860669018,-63.00514719470357];
const v2 = [1000000000.0,-3.0,1.7314733414888208e+308,1.0437152270128367e+308,0.24041909414465834,-516216.71157085046,Infinity];
Date.parse(([188439.8808918628,491144.33908044384,7.99804504476413,6.321598426193364e+307,-820860.9743012136,0.7234201729305241,-998514.8410675353,5.600912141333236]).toString());
-(-7);
class C9 {
    set a(a11) {
        Symbol.iterator;
        const o33 = {
            [-7]() {
                let v15 = 10;
                const o32 = {
                    next() {
                        v15++;
                        function f18(a19, a20, a21, a22) {
                            function f23() {
                                function f24(a25) {
                                    return f18;
                                }
                                f24(f24);
                                return f18;
                            }
                            f23();
                            f23();
                            %OptimizeFunctionOnNextCall(f23);
                            return a20;
                        }
                        const v30 = v15 == 0;
                        const o31 = {
                            "done": v30,
                            "value": v15,
                        };
                        return o31;
                    },
                };
                return o32;
            },
        };
    }
}
try {
    new C9();
} catch(e35) {
}
v1 *= v0;
const v36 = new C9();
new v1();
new C9();
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a42.a = C9;
    } catch(e44) {
    }
    try {
        this.h = a41;
    } catch(e45) {
        function F46() {
            if (!new.target) { throw 'must be called with new'; }
        }
        let v48 = "string";
        class C49 extends F46 {
            set h(a51) {
                ({"h":v48,} = this);
            }
        }
    }
}
new F39(v1, v36, v2);
const v53 = new F39(v0, v36, v1);
new F39(v1, v53, v0);
function f58() {
    /[a-zA-Z0-9]/gvisy;
    return f58;
}
for (let v60 = 0; v60 < 5; v60++) {
    f58();
    new BigUint64Array();
    new Int8Array(1073741823);
    %OptimizeFunctionOnNextCall(f58);
}
