const v0 = [-1664097464,0,14880,1304441314,9007199254740990];
const v1 = [-1058];
const v2 = [64184,-1024,257,-13318,4];
const v3 = [-10999,3,-1600773429,11,33819,127,9007199254740990,-6,-4096,-536870912];
const v4 = [64,7,255,268435441,9007199254740991,-2];
const v5 = [-39186,536870889];
function f9(a10, a11, a12, a13) {
    const o26 = {
        "b": v4,
        ...v2,
        2147483647: a10,
        10: a13,
        "h": v3,
        ...a11,
        __proto__: a11,
        n(a15, a16) {
            const v19 = new Uint8Array(225);
            for (const v20 in v19) {
            }
            let v21 = a16;
            --v21;
            super[-9223372036854775807] = a13;
            return a13;
        },
    };
    return o26;
}
f9(v3, v0, 1000000000.0, v1);
f9(f9(v4, v4, 1000000000.0, v0), v5, 1.0, v1);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 3;
    } catch(e33) {
    }
    try {
        this.f = 3;
    } catch(e34) {
    }
    try {
        this.h = 3;
    } catch(e35) {
    }
}
const v36 = v1.lastIndexOf(v1, v1);
const v39 = new BigInt64Array(9);
const v40 = [-0.0,-2.0,-1e-15,2.0,-Infinity,2.220446049250313e-16];
const v41 = [0.7413321115775521,436298.36999994353,-547.5300741212703,1.0,-1e-15,8.397732840452793,-1000000000.0,6.84258291941704];
v39["lastIndexOf"](v36);
v41.toLocaleString(("lastIndexOf")[Symbol.toPrimitive], v40);
const v48 = new F30();
const v49 = new F30();
const v50 = new F30();
v50.b = v50;
new Uint32Array();
class C55 extends BigUint64Array {
}
const v56 = -v5;
class C58 {
    set e(a60) {
        const v62 = Symbol.iterator;
        const o68 = {
            [v62]() {
                let v64 = 10;
                const o67 = {
                    next() {
                        v64--;
                        return -886003937;
                    },
                };
            },
        };
    }
}
const v69 = C58();
const o76 = {
    valueOf(a71, a72) {
    },
    "e": v69,
    o(a74, a75) {
        return v56;
    },
};
const v79 = new Uint32Array();
const v82 = new Float64Array(10);
v82[1] = v82;
class C83 {
}
const v84 = new C83();
const v85 = new C83();
const v86 = [v85,v84,v48];
function F87(a89, a90, a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    try { a89.entries(); } catch (e) {}
    const v94 = a90?.constructor;
    try { new v94(); } catch (e) {}
    const v96 = a89.unshift();
    v96 === v96;
    const v99 = new Set();
    function F100(a102, a103) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a102;
        } catch(e104) {
            for (let [v105,v106] of a102) {
                try {
                    v99.values();
                } catch(e108) {
                }
            }
        }
        try {
            const v111 = new Uint16Array(1657);
            v111.reverse();
            15462 || 1000000000000.0;
            this.h = v99;
        } catch(e116) {
        }
        try {
            const v117 = v99[this];
            const v120 = Array(19793);
            const v121 = [v120,v120,v120,v120];
            [v121,v121,v121];
            try {
                new F100(v117, -268435456n);
            } catch(e125) {
            }
            this.b = Set;
        } catch(e126) {
        }
    }
    const v127 = new F100(Set, Set);
    new F100(Set, F100);
    const v129 = new F100(v127, F100);
    const v130 = [-9223372036854775808];
    function F131(a133) {
        if (!new.target) { throw 'must be called with new'; }
        try { a133.groupToMap(a133, F131, v130, this, F131); } catch (e) {}
        try {
            this.d = v130;
        } catch(e135) {
            for (let v136 = 0; v136 < 5; v136++) {
            }
        }
    }
    try { ("number").match(F131); } catch (e) {}
    const v142 = [65537,268435441,63298,-5,1235122603];
    const v143 = [128,215394418];
    const v144 = v143.entries();
    const v145 = [-2,-4294967296,4294967297];
    function F146(a148, a149, a150, a151) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v152 = new F146(-714582153, F146, -714582153, v143);
    const v154 = new F100(v129, null);
    new Uint8ClampedArray(231);
    function f160(a161, a162, a163, a164) {
        a161.prototype = a161;
        try { a161(a164); } catch (e) {}
        a162 & Uint16Array;
        const o170 = {
            n(a168, a169) {
                return a164;
            },
        };
        return Uint8Array;
    }
    new BigUint64Array(0);
    new Int32Array(1519);
    v152.length;
    const v178 = new F146(9, v152, 9, v145);
    v178.b = v178;
    new F146(1024, v178, v145, v145);
    const v187 = ("string").trimStart();
    v144[3];
    let v191;
    try { v191 = v187(); } catch (e) {}
    v142[v191] = v143;
    0 ^ 9;
    const v196 = -1000;
    ~9;
    v196 >>> v196;
    a = ("string").length - F146;
    v99[v178];
    v154.__proto__;
    -35417 - -35417;
    class C207 {
        #c = "toUpperCase";
        get a() {
            const v209 = this << "toUpperCase";
            const v210 = v209 ^ v209;
            let v211;
            try { v211 = v210(v210, this, v210, v210, v209, this); } catch (e) {}
            v211[v210] <<= 1.1922093890401552e+308;
            return "Tx";
        }
        static b;
    }
}
const v213 = new F87(v86, v49);
new F87(v86, v79, v79, v213);
