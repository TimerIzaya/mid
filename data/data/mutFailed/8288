[];
const v3 = new BigUint64Array(16);
new Uint32Array(2232);
4096 % 4096;
let v10;
try { v10 = new Int32Array(2232, Uint32Array, Uint32Array); } catch (e) {}
const v11 = new Int32Array(4096);
v11[319];
[-207.93982314671223,0.6315555496737068,1.0,-1000000.0,5.546766424986112e+307];
const v14 = v11[0];
let v15;
try { v15 = v14(v14, Int32Array, v14, v10, Uint32Array, v14); } catch (e) {}
new WeakMap();
const v19 = [-1.0,-8.925089111625307e+307,2.2928265323910484,902.9942146269443,-2.2250738585072014e-308,6.346661955403977];
[-764.8767714959723,1000000.0,2.2250738585072014e-308,6.376785381361664,-1000000.0,-4.358141963969877e+307,-672.6645153706286,0.6885919481827927,-1000000000.0,139.7597609742329];
const v21 = v3.NEGATIVE_INFINITY;
class C22 extends v21 {
    static [Int32Array] = v21;
}
new C22();
-512;
new Int16Array(512);
252 + 252;
new Float32Array(252);
[10,127,-65535,-5,-390932054,15,-1073741824,-179877528];
[-60160,-2,6];
[-2147483648,1,1000,7,-158559202];
%VerifyType(v3);
try { v21(); } catch (e) {}
new Uint8ClampedArray(9, 512, v15, v19);
function f39() {
    const v41 = -4294967296 <= -4294967296;
    v41 || v41;
    class C43 {
        set d(a45) {
        }
    }
    class C46 extends C43 {
    }
    const v47 = new C46();
    return v47.d;
}
%PrepareFunctionForOptimization(f39);
f39();
%OptimizeFunctionOnNextCall(f39);
f39();
