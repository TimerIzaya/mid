let v1 = "-1";
class C3 {
    static set d(a5) {
        const v6 = super[v1];
        let v7;
        try { v7 = new a5(this, 2.2250738585072014e-308, a5, this); } catch (e) {}
        super[v7];
        v1 = v6;
    }
    static #h = 2.2250738585072014e-308;
    a;
    static [v1] = 2.2250738585072014e-308;
    #d;
}
new C3();
new C3();
new C3();
/(?:a+){0,0}/gdimsy;
/[ya{0}]/vm;
/h\P{Decimal_Number}/gvimy;
let v15 = 1024;
for (let i19 = 0, i20 = 10;
    (() => {
        const v21 = i19 < i20;
        class C22 extends Date {
        }
        return v21;
    })();
    i19++) {
}
Int32Array[2] = Int32Array;
new Int32Array(v15);
new Uint8ClampedArray(2698);
new Uint32Array(204);
class C36 {
    static #m(a38, a39, a40) {
    }
    constructor(a42, a43, a44, a45) {
        this.#m();
        function f47() {
            return f47;
        }
        const v49 = new Uint16Array(f47);
        v49["filter"](f47);
    }
}
[-6.672391061426152e+307];
new Int32Array(Int32Array);
function f58(a59, a60, a61, a62) {
    const o63 = {
    };
}
class C64 {
    static get c() {
        const v66 = `
        `;
    }
}
function F68(a70, a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    a73[1];
}
for (let v76 = 0; v76 < 10; v76++) {
}
for (let v77 = 0; v77 < 25; v77++) {
    Array(36862);
    v15++;
    ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
}
