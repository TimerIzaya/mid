const v1 = [20728,12328,-15553,-1590643568,512,3,3];
const v2 = [2087168392,-4096,17528,58367,9007199254740992,-65537,257,536870912,9126];
const v3 = [34303,65537];
class C4 {
    constructor(a6) {
        super.c += this;
        Object.defineProperty(a6, "length", { writable: true, value: a6 });
        super[v1] = v3;
    }
    static #m(a8, a9) {
        try {
            v1.g = a9;
        } catch(e10) {
        }
        return v2;
    }
}
new C4(v1);
new C4(v3);
new C4(v1);
new Uint8ClampedArray(6);
new Float64Array(555);
new Float64Array(3);
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    a31[1][1];
}
Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
class C36 {
    set e(a38) {
        Math.fround();
        Math.ceil();
    }
    m(a43) {
    }
    e;
}
const v44 = new C36();
const v45 = new C36();
new C36();
let v47 = ["number","ignoreCase",v44];
[[v45,"number","R"],C36,C36,v47];
const v53 = ("NN")["9"];
C36[0] >>= v53;
let v54;
try { v54 = v53(v45, v44, "string"); } catch (e) {}
v47 = v54;
let v55 = 0;
while (v55 < 7) {
    v55++;
}
