let v0 = [];
new Float32Array(4);
new BigInt64Array(8);
let v9 = new BigInt64Array(64);
v9.b = 8;
let v11;
try { v11 = v0.every(8, v9); } catch (e) {}
({"b":v0,"buffer":v9,"byteLength":v0,...v11} = v9);
try {
    v9.slice(64, 64);
} catch(e14) {
}
new Set();
[Infinity,4.0,0.3247656201580028,-292909.2153672348,-1.6540686841073134e+308,0.5845866244908217];
[-476.1418735915728,-790.1579621607093,-1.7976931348623157e+308,0.0,2.2250738585072014e-308,5.1859020921475413e+306,2.220446049250313e-16];
const v18 = [-37.05904866765786,8.116168797610232];
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
}
const v23 = new F19(F19, F19);
function f24(a25) {
    class C27 {
    }
    const v28 = new C27();
    const t24 = v28.constructor;
    const v30 = new t24();
    const v32 = new Int32Array(v30, 8, 560);
    v32[30];
    return v18;
}
v23.toString = f24;
Math.asinh(~v23);
