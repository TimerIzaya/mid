function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 3;
    } catch(e3) {
    }
    try {
        this.g = 3;
    } catch(e4) {
    }
    try {
        this.e = 3;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 {
    set g(a11) {
        try { v8.setUint16(a11, a11, v8, this, this); } catch (e) {}
    }
    static {
        function F14(a16, a17) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a16;
            } catch(e18) {
            }
            try {
                this.f = v8;
            } catch(e19) {
                const v20 = a17 || C9;
                let v21;
                try { v21 = v7.n(v6, v20, C9, v20); } catch (e) {}
                F0 = F14;
                try { this.o(F0, C9, e19); } catch (e) {}
                try {
                    new F0([v21,e19,F14,C9,this], 1081305428n);
                } catch(e26) {
                }
            }
            try {
                this.h = v7;
            } catch(e27) {
            }
        }
        const v28 = new F14(v7, F14);
        const v29 = new F14(v7, v28);
        new v29(v8, F14);
    }
}
new C9();
const v32 = new C9();
const v33 = new C9();
class C34 extends F0 {
    static {
        let v35 = this;
        v35 |= v33;
        super.e;
        v32.g;
        [-268435456,1073741825,2102811098,-63001,2,10000];
        [2035251808,-45443,-268435456,-1024,-256,-845911474];
        [9007199254740992];
    }
    static #a = v6;
    128 = v6;
}
new C34(v33);
new C34();
new C34();
class C47 {
    #b = 26507;
    static [26507];
    static get a() {
        super[this] = 26507;
        try {
            arguments.#b <<= arguments;
        } catch(e51) {
        }
        return v6;
    }
}
const v52 = new C47();
const v53 = v52?.constructor;
v53.name = v53;
let v54;
try { v54 = new v53(); } catch (e) {}
const v55 = v54?.constructor;
try { new v55(); } catch (e) {}
new C47();
const v58 = new C47();
try { v58.constructor(); } catch (e) {}
const v60 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
try { v60.findLastIndex(C47); } catch (e) {}
[-9007199254740991,22341,65537];
const v63 = [9007199254740990,2147483647,-9223372036854775808];
const v65 = new Date();
const v66 = v65?.getHours;
try { new v66(); } catch (e) {}
let v68;
try { v68 = v65.setUTCSeconds(v60, v58); } catch (e) {}
v68++;
for (let v70 = 0; v70 < 5; v70++) {
    const v75 = new BigInt64Array(4046);
    let v76 = undefined;
    const v77 = v76++;
    v77 + v77;
    %VerifyType(4046);
    v58[v63];
    v58[undefined] = v65;
    try {
        v75.g = v76;
    } catch(e80) {
    }
    const v81 = v77 >> v77;
    v81 >> v81;
    const v83 = v81 >>> v81;
    let v84 = v83 % v83;
    v84--;
    const o86 = {
    };
    o86.e = o86;
    for (let i89 = 0, i90 = 10; i89 < i90; i89++) {
    }
}
