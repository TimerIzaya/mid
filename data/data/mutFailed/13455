const v6 = new Float32Array(99);
for (const v7 of v6) {
    function F8(a10, a11) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v7;
    }
    const t6 = 58446;
    new t6();
}
const v14 = new v6(117);
const v15 = [13135,-3,0,-1024,-9223372036854775808];
const v16 = [-119405563,9223372036854775807,7811,7];
[-256,16,2147483649,-27275,128];
class C18 extends Array {
    static #e;
    get c() {
        Object.defineProperty(Array, v16, { set: Array });
        class C20 {
            set e(a22) {
                const v24 = new SharedArrayBuffer();
                new DataView(16, v24, a22);
            }
        }
        const t23 = 99;
        new t23();
        !v15;
        try {
            v14.#e;
        } catch(e30) {
        }
        return this;
    }
    constructor(a32, a33, a34, a35) {
        super(765819875);
        try {
            v15.map(Array);
        } catch(e37) {
        }
        super.f = a34;
        for (let v38 = 0; v38 < 32; v38++) {
            v15["p" + v38] = v38;
        }
    }
}
const v41 = new C18(v16, 765819875, 58446, v14);
const v42 = new C18(v41, 58446, 765819875, v41);
new C18(v16, 765819875, 117, v42);
new BigInt64Array(2992);
new Int16Array(19);
new Int32Array(1024);
const o54 = {
};
class C55 {
}
const t54 = 99;
t54[0] = 19;
for (let i58 = 0, i59 = 10; i58 < i59; i59--) {
    for (let v66 = 0; v66 < 5; v66++) {
        const o69 = {
            o(a68) {
            },
        };
    }
}
gc(v16);
