new Int32Array(3743);
new Uint8ClampedArray(3776);
new BigInt64Array(10);
new Uint16Array(127);
new Uint8Array(255);
new BigInt64Array(179);
[];
const v22 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
const v23 = [-1803975943,57715,-9007199254740992];
[2147483647,13,536870912,-13,-1024,536870887];
const v28 = new Uint8ClampedArray(-3);
+(v28 ^ 3) + -3.0;
const v36 = ["undefined",8.806760127177498,v23,345168.6487633812,"undefined"];
[1000.0,8.806760127177498,v36,v22,v23];
[v36];
const v42 = Symbol.iterator;
const t16 = "string";
t16[v42] = v42;
new Uint16Array(4294967295, 4294967295);
const v49 = new Float32Array(7);
const o53 = {
    m() {
        const o52 = {
        };
    },
};
const v55 = new Int32Array();
function F56(a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this?.E;
    try { new v61(Uint16Array, a60, a60); } catch (e) {}
    a58 * a58;
    a60++;
    this.d = a58;
    this.g = Int32Array;
}
new F56(F56, 256, 256);
const v66 = new F56(256, v55, 4294967295);
const t38 = v66.g;
new t38(Uint16Array, v49, 7);
class C70 {
    #a;
    constructor(a72, a73, a74) {
    }
}
new F56(256, Float32Array);
Math.asinh();
const v80 = new Float32Array(Float32Array, Float32Array);
v80.h = v80;
Math.sin();
