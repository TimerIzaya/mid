new gc();
ReferenceError(-1073741824, 9007199254740991n);
9n >> 9n;
function f14(a15, a16, a17, a18) {
    ~a15;
    const o20 = {
        "e": a16,
        [a17]: 1000,
    };
    return f14;
}
const v21 = f14(-19647, -19647);
const v23 = new Int8Array(10);
4096 >>> 4096;
try { new BigUint64Array("symbol", v23, "function"); } catch (e) {}
const o29 = {
};
new Proxy(Uint8Array, o29);
new BigUint64Array(4096);
new Int32Array(64);
class C36 extends BigUint64Array {
    static #f = BigUint64Array;
    static ["function"] = "function";
    static #a;
    static #m(a38, a39, a40, a41) {
        const o44 = {
            "maxByteLength": 2660,
        };
        Math.acosh(2660);
        const o50 = {
        };
        try {
            o50.g = "e";
        } catch(e51) {
        }
        v21(36862);
        const v53 = [601759695];
        const v54 = [1073741824,1073741823,1376142744,1073741825];
        function f56(a57, a58, a59, a60) {
            let v63;
            try { v63 = v54["find"](..."find", a60, ...v53, ...v54, ...522675525n); } catch (e) {}
            v63 <= a59;
            return arguments;
        }
        [[1.0,-6.818981069405753e+307]];
        const v68 = new ArrayBuffer(2660, o44);
        new Int32Array(v68);
        return v68;
    }
}
C36.function = C36;
new C36();
new C36();
new C36();
function F74() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    this.c = 5;
}
F74.prototype;
const v79 = new F74();
v79.e = v79;
const v80 = new F74();
function f81(a82, a83) {
    const o85 = {
        "h": v80,
        6: v80,
        128: a83,
        "e": v79,
        0: "symbol",
        "type": "7",
        ...4096,
        get d() {
            return this;
        },
        __proto__: a82,
        "a": a82,
        ...a83,
    };
    return o85;
}
function f86() {
    return f86;
}
("a")[0];
class C89 {
    ["7"] = "a";
    static get c() {
    }
    #valueOf(a92, a93, a94, a95) {
    }
    constructor(a97, a98) {
        for (let v99 = 0; v99 < 32; v99++) {
            a98["p" + v99] = v99;
        }
    }
}
C89.b = C89;
try {
const t0 = 65536n;
t0(65536n);
} catch (e) {}
function f104() {
}
const v105 = [601759695];
const v106 = [1073741824,1073741823,1376142744,1073741825];
function f108(a109, a110, a111, a112) {
    function f114() {
        return 522675525n;
    }
    f104();
    const v117 = new Int8Array();
    v117.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f114);
    let v122;
    try { v122 = v106["find"](..."find", a112, ...v105, ...v106, ...522675525n); } catch (e) {}
    v122 <= a111;
    return arguments;
}
for (let v124 = 0; v124 < 10; v124++) {
    f108(v124, v124, f104, 522675525n);
}
new C89();
const v127 = f81();
const v128 = f81();
try { v128.hasOwnProperty(Int8Array); } catch (e) {}
f81(v79, v128)[128];
function f132() {
    return f81;
}
const v135 = new Float32Array(218);
Uint8Array.name;
const v138 = new Uint8Array();
try { v138.entries(); } catch (e) {}
for (const v140 of v135) {
    Object.defineProperty(v127, Float32Array, { configurable: true, enumerable: true, get: f81, set: f132 });
}
Object.defineProperty(v128, "e", { configurable: true, enumerable: true, set: f81 });
const v141 = v138 instanceof f81;
v141 || v141;
function F143() {
    if (!new.target) { throw 'must be called with new'; }
}
const v145 = new F143();
const v148 = [2.2250738585072014e-308,-Infinity,496645.0382158025,-621700.5175002808];
const v149 = [974836.255416306,7.54270135293536,0.0,0.35539841926815563,1.385396251341163,-1000000000000.0,NaN,-1.7976931348623157e+308];
class C150 {
}
const v151 = new C150();
function f152(a153, a154, a155) {
    for (let v156 = 0; v156 < 25; v156++) {
        a155["p" + v156] = v156;
    }
    return a155;
}
f152(0.0, v145, v149);
f152(1.0, v151, v148);
