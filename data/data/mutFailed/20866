function f0() {
    const o24 = {
        ["prototype"]: 9223372036854775807,
        set b(a5) {
            const o9 = {
                "execution": "sync",
                "type": "c",
            };
            gc(o9);
        },
        "f": 9223372036854775807,
        "e": "prototype",
        "d": 9223372036854775807,
        toString(a12, a13, a14, a15) {
            let v11 = this;
            a13 << -1557853178;
            let v19 = v11++;
            Math.log2(a12);
            const v21 = v19++;
            Math.pow(v19, -1557853178);
            f0 ^ v21;
            return f0;
        },
        2: "prototype",
    };
    return o24;
}
const v25 = f0();
f0();
f0();
function f31(a32, a33, a34) {
    const o46 = {
        9: 16,
        "b": a34,
        "e": f0,
        m(a36, a37, a38, a39) {
            super[a38];
            try {
                super.o();
            } catch(e45) {
            }
            return a34;
        },
        3: a32,
    };
    return o46;
}
const v47 = f31(16, 16, 16);
f31(9007199254740992, 9007199254740992, 9007199254740992);
f31(9007199254740992, 9007199254740992, 9007199254740992);
class C50 extends 9223372036854775807 {
    static set c(a52) {
        const v54 = Symbol.iterator;
        const o63 = {
            [v54]() {
                let v56 = 10;
                const o62 = {
                    next() {
                        v56--;
                        const v60 = v56 == 0;
                        const o61 = {
                            "done": v60,
                            "value": v56,
                        };
                        return o61;
                    },
                };
                return C50;
            },
        };
    }
}
new C50();
const v65 = new C50();
new C50();
function f67(a68, a69, a70, a71) {
    function f73(a74, a75) {
        -25283n && -25283n;
        return a68;
    }
    arguments.constructor = f73;
    const t81 = arguments.constructor;
    new t81(a70);
    Array(1000);
    function F83() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new C50();
    const v86 = new F83();
    function F87(a89, a90) {
        if (!new.target) { throw 'must be called with new'; }
        const v91 = v65?.constructor;
        try {
        const t0 = 9007199254740992;
        new t0(v91, F87);
        } catch (e) {}
        try { v47.constructor(); } catch (e) {}
        try {
            v25.h = v86;
        } catch(e94) {
        }
    }
    return f67;
}
for (let v95 = 0; v95 < 10; v95++) {
    f67(f67, f67, v95, v95);
}
%OptimizeFunctionOnNextCall(f67);
f67(f67, f67, f67, f67);
