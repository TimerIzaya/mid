class C3 {
    constructor(a5, a6) {
        const v7 = this.a;
        let v8;
        try { v8 = new a5(a6, a6, a6, v7); } catch (e) {}
        super.e = -1.0;
        let v9 = delete this[a5];
        ++v9;
        -1.0 instanceof v8;
        const o14 = {
            "maxByteLength": 512,
        };
        const v16 = new SharedArrayBuffer(9, o14);
        new BigInt64Array(v16);
    }
    static [-1.0] = 1907326993;
    #d = -2.0;
    [-1.0] = -2.0;
}
const v19 = new C3(-1.0, -2.0);
const v20 = new C3(C3, -2.0);
const v21 = new C3(1907326993, -1.0);
function f28() {
    return f28;
}
class C29 extends f28 {
    constructor(a31, a32, a33, a34) {
        super();
        function f35() {
            const v36 = [];
            v36[-2n] = v36;
            function F37(a39, a40, a41, a42) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = a40;
                } catch(e43) {
                }
                try {
                    this.b = a40;
                } catch(e44) {
                }
                try {
                    this.g = v20;
                } catch(e45) {
                }
            }
            const v46 = new F37(F37, v36, v21, a34);
            new F37(F37, v46, v20, -2n);
            new F37(4.571711269660989, a32, a33, 9n);
            v36[6] = 4294967295;
            const o52 = {
                set b(a51) {
                },
            };
            return 4294967295;
        }
        for (let v53 = 0; v53 < 5; v53++) {
            f35();
            %OptimizeFunctionOnNextCall(f35);
        }
    }
    g = v21;
    [4.571711269660989] = v19;
    [f28] = 9n;
    9;
    [-2.220446049250313e-16];
}
new C29();
