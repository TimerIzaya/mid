const v0 = [1073741823,1,256,-9007199254740992,-2147483647];
[3,6,-64517,-1073741824];
let v2 = [-39628];
class C3 {
    #e = v0;
    static set h(a5) {
        try { a5(this); } catch (e) {}
        delete v0?.length;
    }
    set e(a9) {
        function f10() {
            return this;
        }
        try { this.m(this, a9); } catch (e) {}
        try {
            v2.length = a9;
        } catch(e12) {
        }
    }
}
const v13 = new C3();
new C3();
const v15 = new C3();
class C16 extends C3 {
    static #valueOf(a18, a19, a20, a21) {
        try {
            a21.#valueOf(this, v0);
        } catch(e23) {
        }
        return a21;
    }
    set g(a25) {
        v15[this] >>>= a25;
        C3 -= C3;
        try {
            v13.e = v0;
        } catch(e26) {
        }
    }
}
new C16();
new C16();
const v29 = new C16();
class C30 extends C16 {
    get g() {
        v2 = v2["toReversed"]();
        new Set();
        const o39 = {
            "execution": "async",
            "type": "major",
        };
        gc(o39);
        return "async";
    }
}
new v29();
new C30();
new C30();
function f44(a45) {
}
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    try { new v52(); } catch (e) {}
    this.d = f44;
}
++v2;
new F46();
new F46();
