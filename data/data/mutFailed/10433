const v0 = [0.03495871668366912,-529342.2945252062,-2.2250738585072014e-308,-362.68693715373183,-1e-15];
const v1 = [1e-15,158334.8503546007,2.0,1.7976931348623157e+308];
const v2 = [-260.8007303099249,5.0,8.101349065099364e+307,2.2250738585072014e-308];
class C3 {
    constructor(a5) {
        try { a5.map(v0); } catch (e) {}
        for (let v8 = 0; v8 < 32; v8++) {
            v8 << v8;
            Array["p" + v2] = v8;
        }
    }
    #n(a13) {
        const o17 = {
            "execution": C3,
            "type": "minor",
        };
        gc(o17);
        return "async";
    }
}
C3.prototype = C3;
const v19 = new C3(v0);
const v20 = v19?.constructor;
try { new v20(v0); } catch (e) {}
const v22 = new C3(v1);
v22.__proto__ = v22;
const v23 = new C3(v22);
const v26 = new BigUint64Array(7);
const v29 = new Uint32Array(1);
const v30 = v29?.constructor;
try { new v30(v26, v19, v29); } catch (e) {}
11 != 11;
try { new Uint8Array(v19, v19, Uint32Array); } catch (e) {}
new Uint8Array(v23);
-971.4320242429535 <= -971.4320242429535;
let v40 = -2.2250738585072014e-308;
v40--;
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this?.constructor;
    try { new v51(F45, this, a50, F45); } catch (e) {}
    a47 + a47;
    const v54 = this?.constructor;
    v54.caller;
    try { new v54(this, v54, this, this); } catch (e) {}
    try { a48.toString(); } catch (e) {}
    a49++;
    a50 >> a50;
    [-48550.861763252644,0.9741629380021758,-2.0,5.0,0.0,9.550440224838109,-759349.387046625,1e-15,-716.166433089257];
    [-1000000.0,-2.0,593.8866544050784,0.208936607803352,-1e-15,-1000000000000.0,6.506436847772548e+307];
    const v62 = [344.64861552632146,-4.0,1000000.0,642514.606934905,0.1807180632123203,0.10752618873097497,983.7839603476882,1000.0,1e-15];
    try {
        v62.e = v62;
    } catch(e63) {
    }
    try {
    } catch(e64) {
    }
}
const v65 = F45?.constructor;
try { new v65(v2); } catch (e) {}
const v67 = new F45(-34744, v40, 5, 5);
new F45(5, v67, -60268, -60268);
const o69 = {
};
try {
} catch(e70) {
}
