const v1 = new WeakSet();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a4.c = WeakSet;
    } catch(e5) {
    }
    try {
        this.b = v1;
    } catch(e6) {
    }
    try {
        this.e = v1;
    } catch(e7) {
    }
}
new F2(v1);
new F2(v1);
new F2(WeakSet);
let v21;
try { v21 = ("function")["-268435456"](); } catch (e) {}
const v22 = v21 + v21;
v22 >> v22;
class C26 {
    static p(a28) {
    }
}
let v32;
try { v32 = new C26(); } catch (e) {}
const v33 = v32.constructor;
try { v33(); } catch (e) {}
const v35 = new C26();
v35.propertyIsEnumerable;
const v37 = new C26();
v37.constructor;
const t34 = "HkAXC";
new t34();
try { v37.constructor(); } catch (e) {}
const v41 = new C26();
const v42 = v41.constructor;
let v43;
try { v43 = new v42(); } catch (e) {}
const v44 = v43?.__defineGetter__;
try { new v44("toStringTag", "toStringTag"); } catch (e) {}
const t44 = v43?.constructor;
new t44();
const v48 = new C26();
v48.constructor;
v48.__defineGetter__;
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = v43?.constructor;
    try { new v57(a53, a53); } catch (e) {}
    try { a54.isPrototypeOf(C26); } catch (e) {}
}
(0n)?.bind;
try { F2(); } catch (e) {}
new F51("toStringTag", v41);
new F51(v37, "flags");
const v64 = new F51("HkAXC", "toStringTag", "toStringTag", "HkAXC");
let v67 = -128 % -128;
v67++;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v70 = [601759695];
const v71 = [1073741824,1073741823,1376142744,1073741825];
function f73(a74, a75, a76, a77) {
    function f79() {
        const o94 = {
            [a76](a82, a83) {
                Int16Array[0] = -27833;
            },
            get d() {
                return this;
            },
            "maxByteLength": -128,
            "c": -1000000.0,
            valueOf(a88, a89) {
            },
            toString(a91, a92, a93) {
            },
        };
        o94.toString(v64, v64, v64);
    }
    f79();
    new Int8Array();
    v37.buffer;
    %OptimizeFunctionOnNextCall(f79);
    try { v71["find"]("find", a77, v70, v71); } catch (e) {}
    a74 <= a76;
    return arguments;
}
try { f73("HkAXC", v70, "flags", "HkAXC"); } catch (e) {}
for (let v104 = 0; v104 < 5; v104++) {
    f73();
}
