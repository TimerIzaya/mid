class C3 {
    #h = -0.0;
    static a;
    static toString(a5, a6) {
        let v10;
        try { v10 = a6.valueOf(-0.0, -2147483647, a5); } catch (e) {}
        try { v10(a5, -46128, a6, ..."g", v10, this); } catch (e) {}
        super[-2147483647] = "g";
        return this;
    }
    [-0.0];
    2594794892;
    static 536870912 = "g";
}
const v12 = new C3();
const v13 = new C3();
new C3();
new Uint8Array(1000);
new Int32Array(1024);
function f23(a24, a25, a26) {
    function f28(a29) {
        try { a29(a29, a29); } catch (e) {}
    }
    this.onmessage = f28;
    const t24 = "g";
    t24[0] = v13;
}
Object.defineProperty(Worker, "toJSON", { enumerable: true, value: 1000 });
const v33 = [10,v13,Worker];
const o34 = {
    "arguments": v33,
    "type": v12,
};
new Worker(f23, o34);
new BigInt64Array(10);
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this.valueOf().constructor;
    try { new v42(v42, v42, v42, a40); } catch (e) {}
    Math.imul();
}
new F37(F37, F37);
new F37();
