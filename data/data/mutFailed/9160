new Set();
const o3 = {
    "c": Set,
};
try {
    const o4 = {
    };
    new Set(o4);
} catch(e6) {
}
function f10(a11, a12, a13) {
    function f15(a16) {
        Set[9] = a16;
    }
    this.onmessage = f15;
    let v19 = 1000.0;
    Math.max(Set);
    Math.tan(Set);
    Math.pow(Set ** v19, 7);
    Math.sin(v19);
    v19--;
}
f10.toJSON = "number";
const v28 = [f10,o3,Set];
const o29 = {
    "arguments": v28,
    "type": "function",
};
new Worker(f10, o29);
const v31 = new Set();
[v31];
[Set];
[Set];
const v38 = /LD/vds;
const v39 = /a\s/vims;
const v40 = /SO/uis;
function f41() {
    return f10;
}
Object.defineProperty(v40, Symbol.toPrimitive, { writable: true, configurable: true, get: f41 });
function f47() {
    return v38;
}
[12,65535,536870912,-8,1000,-9223372036854775808,-8,2,13];
const v49 = [2,30964,-9223372036854775808,8,536870887,61212,-9223372036854775807,10000,-380609068];
[-527931172,-2147483647,1073741823,1913461086,9007199254740991,128,-2008902983,-7];
const v51 = [v38,1000.0,v39];
const v52 = [v38,1000.0];
[v39,v52,v40,1000.0,v52];
for (let v54 = 0; v54 < 22; v54++) {
    const v55 = v39[v54];
    try { new v55(v55); } catch (e) {}
    v51[v40];
    const o64 = {
        "execution": "async",
        "type": "minor",
        set c(a62) {
            this[13];
        },
        "f": v49,
        __proto__: o3,
    };
    gc(o64);
}
