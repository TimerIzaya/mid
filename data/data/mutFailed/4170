const v0 = [];
const v2 = new WeakMap();
class C4 extends Uint16Array {
}
class C5 {
}
function f6() {
    const o7 = {
    };
    new Uint16Array(2);
    return v2;
}
class C11 {
}
Math.atan2(v0, 13);
const v15 = [f6,WeakMap];
const v16 = [v15,v0,v15,v2,f6];
v16[4];
const v18 = [f6,WeakMap,v15,v15,f6];
const v21 = new Float64Array(3);
try { new SharedArrayBuffer(SharedArrayBuffer, v2, v18); } catch (e) {}
const v25 = new SharedArrayBuffer(512);
const v28 = new BigInt64Array(-365585002, v16, v21);
try { v28.set(v2); } catch (e) {}
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = this?.constructor;
    try { new v36(SharedArrayBuffer, SharedArrayBuffer, a34, SharedArrayBuffer); } catch (e) {}
    a34.arguments = a34;
}
F30.caller = F30;
const v39 = new BigUint64Array();
const t32 = [v39];
t32[65536] %= 256;
const v42 = new F30(F30, F30, F30, F30);
v42.b = 512;
%PrepareFunctionForOptimization(v25);
