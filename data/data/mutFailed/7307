const v0 = [-9007199254740992,-65537,841855796,1000,-2];
const v1 = [1000,536870912,-175232322];
const v2 = [-56695,9007199254740990,-9007199254740991,-4294967297];
class C6 {
    static valueOf(a8) {
        a8[5];
    }
    1073741825;
    constructor(a11, a12, a13, a14) {
        super();
        function f15() {
            const t11 = [];
            t11[6] = 4294967295;
            const o20 = {
                set b(a19) {
                },
            };
            return 4294967295;
        }
        for (let v21 = 0; v21 < 5; v21++) {
            f15();
            %OptimizeFunctionOnNextCall(f15);
        }
    }
    /*
    constructor(a24, a25, a26, a27) {
        let v23 = this;
        v23[2] %= "toLowerCase";
        const v28 = super[v2];
        v23 = v1;
        ([v2,...v0,...a25,v28]).__proto__;
    }
    */
    static {
        function f32() {
            return this;
        }
        this[268435441];
        let [] = "number";
        super["o"];
    }
}
const v35 = new C6(v2, "toLowerCase", "number", v0);
const v36 = new C6(v1, v35, v35, v1);
let v37 = new C6(v35, v35, "o", v1);
class C38 extends C6 {
    ["toLowerCase"];
    set f(a40) {
        const v41 = v36 % v36;
        ("toLowerCase")[this];
        v36[v41] = "o";
        %VerifyType(v37);
        +"number";
        --v37;
    }
    [v2] = C6;
    82 = "toLowerCase";
    1;
    static 1079;
    2884466588;
    static ["toLowerCase"];
}
new C38();
new C38();
new C38();
for (const v49 in "1487412280") {
}
const o50 = {
};
[-4294967295,7,128,-5,-2,3,3,2,3,663869830];
[268435440,-11,268435441,-2147483648];
[416700078,3507,536870887,10];
for (let v54 = 0; v54 < 5; v54++) {
    const o58 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o58);
}
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    const v67 = new Int32Array(127);
    function f68(a69, a70) {
        return v67.toSorted();
    }
    const v75 = [1126838905];
    return v75;
    return Int32Array;
    const o82 = {
        o(a78) {
            const o80 = {
            };
            return gc(o80);
        },
    };
    Reflect.construct(Int8Array, v75);
}
function f84(a85, a86, a87, a88) {
    const o92 = {
        get f() {
            new a86();
            return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
        },
        ...a86,
    };
    return o92;
}
new F60(F60, F60, F60);
