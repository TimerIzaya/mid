function f0() {
    const o10 = {
        [-1e-15](a5, a6) {
            try {
                const v7 = [a6,a5,59.717634552626805,-1e-15,16];
                this.fuck(v7, v7, a5, a5);
            } catch(e9) {
            }
            return 59.717634552626805;
        },
        ...59.717634552626805,
        ...16,
        "c": -1e-15,
        "e": 59.717634552626805,
        ...-1e-15,
        __proto__: 16,
        "b": 59.717634552626805,
    };
    return o10;
}
const v11 = f0();
const v12 = f0();
const v13 = f0();
class C14 extends f0 {
    p(a16, a17) {
        v11[v12] = a16;
        const o18 = {
            __proto__: a17,
            "h": v12,
            6: a17,
            [a16]: v12,
        };
        try {
            new f0();
        } catch(e20) {
        }
        return a16;
    }
    static #e = v12;
}
const v21 = new C14();
const v22 = new C14();
const v23 = new C14();
class C24 extends f0 {
    #n(a26, a27) {
        v12.b ^= v11;
        const o32 = {
            "execution": "sync",
            "type": "minor",
        };
        return gc(o32);
    }
    static 1468173750;
    a = v21;
}
const v34 = new C24();
const v35 = new C24();
const v36 = new C24();
v36.c;
function f38() {
    return C14;
}
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = a41?.__defineSetter__;
    try { new v44(a41, a41); } catch (e) {}
    try {
        this.e = a42;
    } catch(e46) {
    }
}
try { new F39(v12, v34, v36); } catch (e) {}
const v48 = new F39(v11, v35, v21);
v48.length = v48;
new F39(v35, v36, v34);
const v50 = new F39(C14, v13, v22);
-4096 >> -4096;
try { ("string").link(C14); } catch (e) {}
class C57 {
    static 7;
    static [-1] = "string";
    #n(a59) {
        a59 = this;
        a59.e >>>= -35417;
        const o63 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o63);
        return this;
    }
}
const v65 = new C57();
const v66 = v65?.constructor;
try { new v66(); } catch (e) {}
Array();
const v72 = Array();
let v73 = 9.187362692894364;
v73++;
class C75 {
    static 9 = v73;
}
C75.length = C75;
for (const v76 in C75) {
}
class C77 {
    #e;
    static {
        function f79(a80, a81) {
            return a80;
        }
        const o89 = {
            o(a83) {
                try { this.valueOf(); } catch (e) {}
                try { a83.valueOf(); } catch (e) {}
                const o87 = {
                };
                return gc(o87);
            },
        };
        const o91 = {
        };
        const v93 = new Proxy(Uint32Array, o91);
        v93.length = v93;
        const t124 = "o";
        t124[0] = "o";
        o89["o"](o89, Uint32Array, "o", "o", v93);
        const v96 = super[this];
        try { v96.join(-4096, -4096, v96); } catch (e) {}
        const o98 = {
        };
        o98.e = o98;
        const v101 = [/LD/vds,1000.0];
        v101[1] = v101;
    }
    m(a103, a104) {
        const o105 = {
        };
        const o108 = {
        };
        const v110 = new Proxy(Uint8Array, o108);
        v110.d = v110;
        new Proxy(this, o105);
        class C116 {
        }
        function f117() {
            class C119 {
            }
            new C119();
            const v121 = new C119();
            [C116,C119];
            [257828.6336153492,v121];
            class C124 extends C57 {
            }
            function f125(a126, a127) {
                return -4096;
            }
            Set.toString = f125;
            Set.constructor(Set);
            v72.constructor;
        }
        const v131 = "string" && -4096;
        +a104;
        Math.sqrt(v131);
        a103--;
    }
}
try { new C77(); } catch (e) {}
const v137 = new WeakSet();
class C139 extends v137.constructor {
}
try { new C139(); } catch (e) {}
class C141 {
}
try { C141.apply(v50, v23); } catch (e) {}
function F143(a145, a146) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v147 = 0; v147 < 32; v147++) {
}
