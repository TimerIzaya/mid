const v1 = new Date();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a4;
    } catch(e5) {
    }
    try {
        this.b = a4;
    } catch(e6) {
    }
}
const v7 = new F2(v1);
const v8 = new F2(v7);
const v9 = new F2(v1);
const v10 = /^R(?:ab)?foo[z]*/gudimy;
const v11 = /a{/gms;
const v12 = /1(?<!)+/ums;
let v15 = 512;
const v17 = new Float64Array(Float64Array);
for (const v18 in v17) {
}
class C19 {
}
const v20 = new C19();
switch (v20) {
    default:
        C19.toString();
        break;
}
class C22 {
    [-4096] = -12;
    set d(a24) {
        for (const v25 in v10) {
        }
    }
    536870887;
    [v8] = v15;
    static c = Date;
    valueOf(a27, a28, a29, a30) {
        try {
            super.set(-4096, a29, v12, v11, v11);
        } catch(e32) {
        }
        return v9;
    }
    #valueOf(a34, a35, a36) {
    }
    #o(a38, a39) {
        const v40 = super.h;
        a38 > -12;
        return v40;
    }
    static [v7] = Date;
    e = v9;
    static 4 = v11;
    [v9];
    static #p(a43, a44) {
    }
    constructor(a46, a47, a48) {
    }
    /*
    constructor(a50, a51) {
        const v52 = this.constructor;
        try { new v52(a50); } catch (e) {}
        this[-12] >>>= v15;
        let v54 = 0;
        while (v54 < 1) {
            const v59 = v15--;
            Math.atan();
            v15 * 7;
            const v62 = v59 + 7;
            v62 * v62;
            const v64 = v54++;
            v64 - v64;
        }
    }
    */
}
24560 ^ 24560;
([-3,2147483648,127,18127,7,5]).toLocaleString();
class C70 {
    constructor(a72, a73, a74) {
    }
}
new C22();
new C22();
new C22();
const t88 = [];
t88[6] = 4294967295;
("function").normalize();
Uint32Array[1] = 15;
