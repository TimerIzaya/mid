class C3 {
    static #b = -268435456n;
    toString(a5) {
        let v6;
        try {
        const t0 = -11n;
        v6 = new t0(-268435456n, this, a5, this);
        } catch (e) {}
        try {
            v6.#b;
        } catch(e8) {
        }
        return -11n;
    }
    static #a;
    512;
}
const v9 = new C3();
function f10(a11) {
    -268435456n - -268435456n;
    Math.imul(-11n, -268435456n);
    const v16 = (-9) ** a11;
    -11n >>> a11;
    const v18 = +v16;
    -268435456n ^ -11n;
    (-268435456n) ** a11;
    return v18;
}
v9.toString = f10;
const v21 = new C3();
function f22(a23, a24) {
    const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function f26(a27, a28, a29, a30) {
        function f31() {
            const v32 = v25.length;
            v32 & v32;
            const v36 = new Float32Array(1334);
            v36[1283] = v36;
            return a27;
        }
        f31();
        %OptimizeFunctionOnNextCall(f31);
        return a28;
    }
    return -268435456n;
}
v21.toString = f22;
const v38 = new C3();
function f39(a40, a41) {
    new SharedArrayBuffer();
    return -11n;
}
v38[Symbol.toPrimitive] = f39;
function f46(a47, a48, a49, a50) {
    a48[Symbol.toPrimitive] = f46;
    const o58 = {
        "a": a48,
        [a48]: -268435456n,
        n(a54, a55) {
            const v56 = super[this];
            try {
                v56.g = v56;
            } catch(e57) {
            }
            return C3;
        },
        "d": -11n,
    };
    return o58;
}
f46(-268435456n, v9, v9, C3);
f46(127n, v21, v21, v38);
f46(-11n, v38, v38, v21);
/\P{Decimal_Number}/gudims;
