let v2 = 1.4985176910533134e+308;
class C3 {
    #n(a5) {
        let v4 = this;
        v4++;
        v2 = -0.0;
        const v7 = (-0.0).e;
        v7[65536] = -0.0;
        return v7;
    }
    static [v2];
    static h;
    #f;
    4096;
    f;
    #c = v2;
    #b = 0.0;
    static 1073741824;
}
try { new C3(); } catch (e) {}
new C3();
new C3();
new C3();
const v13 = new Set();
const v14 = v13?.add;
let v15;
try { v15 = new v14(Set); } catch (e) {}
class C16 extends C3 {
    p(a18, a19, a20) {
        let v21;
        try { v21 = v13.keys(); } catch (e) {}
        function f22(a23, a24, a25, a26) {
            try {
                a23.valueOf = a18;
            } catch(e27) {
            }
            return v21;
        }
        f22(f22, a19, v21, a18);
        return 0.0;
    }
    static b;
    static #e;
    #d = v13;
}
new C16();
const v30 = new C16();
const v31 = v30[4096];
new C16();
try { ("Ye8BX").trim(); } catch (e) {}
try { ("size").codePointAt(C16); } catch (e) {}
let v41;
try { v41 = v31(); } catch (e) {}
v41[130] = v15;
function f45() {
    return 129;
}
function f46(a47) {
    function f48() {
        const o49 = {
        };
        return o49;
    }
    const v50 = f48();
    const v51 = f48();
    for (let v52 = 0; v52 < 25; v52++) {
        const v53 = [601759695];
        const v54 = [1073741824,1073741823,1376142744,1073741825];
        function f55(a56, a57, a58, a59) {
            a56[4] = a56;
            a57[4] = a57;
            BigUint64Array * 536870887;
            try { v54["find"](..."find", a59, ...v53, ...v54); } catch (e) {}
            return v52;
        }
        for (let v65 = 0; v65 < 5; v65++) {
            f55(v50, v51);
        }
    }
    return a47;
}
f45[Symbol.toPrimitive] = f46;
f45.length = f45;
const o70 = {
    [f45]() {
    },
};
const v75 = Symbol.iterator;
Symbol.for(v75.description);
const o80 = {
    [v75]() {
    },
};
