180 != 180;
Int32Array.g = Int32Array;
const v6 = new Int32Array(180);
let v7;
try { v7 = v6.includes(-1014545457); } catch (e) {}
new Uint16Array(0);
try { Uint8ClampedArray.toString(); } catch (e) {}
const v14 = new Uint8ClampedArray(3215);
function f15() {
    function f16(a17, a18) {
        try { new a18(3215, Uint16Array, v7, a17, 0); } catch (e) {}
        const o22 = {
            "execution": "async",
            "type": "minor",
        };
        return 0;
    }
    return f16;
}
Object.defineProperty(v14, "valueOf", { writable: true, enumerable: true, get: f15 });
v14[321] = v14;
try { new Uint32Array(Int32Array, Int32Array, 256); } catch (e) {}
const v26 = new Uint32Array(4);
const v28 = Float64Array.length;
v28 + v28;
const v30 = new Float64Array(v26);
try { v30.with(180, 3215); } catch (e) {}
