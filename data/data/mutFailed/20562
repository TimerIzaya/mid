const v3 = [5.0,-2.2250738585072014e-308,-9.94038899002833e+307,0.6337626401521014,-5.618221936961456e+307,1000000000000.0,1000000.0,-3.0,-1.5490379914655376e+308,-563.1765272345752];
[519403.61114507634,5.684657536231409e+307,1.7976931348623157e+308];
[-122.12027366306756];
new Map();
function F11() {
    if (!new.target) { throw 'must be called with new'; }
}
new F11();
const t8 = "bpjXM";
new t8();
const v15 = new F11();
v15.g = v15;
const v16 = v15.g;
try { v16.bind(); } catch (e) {}
const v18 = -Infinity;
let v20 = Number.isFinite();
const v21 = v3 && v20;
v18 - v18;
-261.1271706035858 + -261.1271706035858;
v20++;
const v27 = -10n << -10n;
v27 + v27;
let v29 = 65535n;
const v30 = v29++;
let v31 = v30 | v30;
v31--;
Int32Array.g = Int32Array;
let v34;
try { v34 = Int32Array.of(); } catch (e) {}
let v35;
try { v35 = v34.entries(); } catch (e) {}
const v36 = v35.next(v21, v20);
new Int32Array();
let v39 = 7;
v39--;
v39++;
const t34 = "valueOf";
new t34();
const v44 = new Int8Array();
new Uint32Array(v44, v34, v36);
try { new Worker(); } catch (e) {}
