const v2 = new Int32Array(43874);
let v5;
try { v5 = new BigInt64Array(Int32Array, v2, v2); } catch (e) {}
const v6 = new BigInt64Array(2, BigInt64Array, 43874, v5);
const v8 = 256 + 256;
new Uint8ClampedArray(256, v2, v2, 43874);
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    a14 - a14;
    const v17 = this?.__defineGetter__;
    v17.name;
    try { new v17(a13, a13, v8, 256); } catch (e) {}
    F11++ >>> a15--;
    try {
        this.f = a14;
    } catch(e23) {
    }
    try {
        this.h = a15;
    } catch(e24) {
    }
}
try { new F11(43874, v8, 2); } catch (e) {}
const v26 = new F11(43874, 256, 2);
new F11(256, 2, 43874);
const v28 = new F11(2, 256, 2);
const v29 = v26?.constructor;
v29.length;
try { new v29(v6, 2, v28); } catch (e) {}
true && true;
const o37 = {
    "h": v8,
    ...true,
    get c() {
        return this;
    },
    set d(a36) {
    },
    "d": true,
};
o37.flags = o37;
o37.d = o37;
