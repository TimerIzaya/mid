function f0() {
}
function f4() {
    return 1073741823;
}
const v5 = /I+/gumsy;
const v6 = /ka(?!bbb|bb)cYz+/udm;
/[\1\2(a(?:\1(b\1\2))\2)\1]/gvy;
new BigUint64Array(1602);
v6["compile"]("compile");
v5[3609] = BigUint64Array;
const o14 = {
    "deleteProperty": f4,
    "getOwnPropertyDescriptor": f4,
    "has": f4,
    "isExtensible": f4,
    "ownKeys": f0,
    "setPrototypeOf": f4,
};
new Proxy(v6, o14);
new Float64Array(255);
new Int32Array(197);
class C25 {
    static #valueOf(a27) {
        const t24 = "boolean";
        t24[-8] = a27;
        a27[5] = -1.0654615543745536e+308;
        new Float32Array(9);
        new Float32Array(2823);
        new Uint16Array(512);
        return Float32Array;
    }
}
const v37 = new C25();
const v38 = v37?.constructor;
try { new v38(); } catch (e) {}
const v40 = new C25();
const v41 = new C25();
class C42 {
    constructor(a44, a45, a46, a47) {
        const v48 = this?.__lookupGetter__;
        try { new v48(C42); } catch (e) {}
        try { a46.isPrototypeOf(a46); } catch (e) {}
        try { v41(); } catch (e) {}
        try {
            a47.b = a46;
        } catch(e52) {
        }
    }
    #g;
    valueOf(a54, a55, a56, a57) {
        this[536870889];
        a54.__proto__;
        0.6920828961713477 % 1;
        -8 && 0.6920828961713477;
        +v37;
        let v69 = -8 && -8;
        return v69++;
    }
}
try { C42.bind(-8); } catch (e) {}
new C42(C42, "boolean", v41, v41);
const v73 = new C42(v41, v40, C25, C25);
new C42(v41, C25, C42, v73);
[-4.0,5.0,1e-15,-1000000.0];
const v76 = [4.0,1.7976931348623157e+308,-1.6746280838181564e+308,Infinity,0.02995849684218521,8.253324943521243e+307,-4.753315469426976e+307,1000000.0];
v76[3] = v76;
[-1.5131061856231655e+308,0.9940081941996022,-1000000000.0,-9.722353359280868,9.968489719443777e+307,-5.0,-374352.7778849256,-Infinity,1000000000.0,0.05917465816222045];
const v79 = new Float32Array(Float32Array);
for (let v80 = 0; v80 < 25; v80++) {
    function f81(a82, a83, a84, a85) {
        try { a82.join(v80); } catch (e) {}
        a83--;
        a83 <= a83;
        const v90 = arguments?.__lookupGetter__;
        try { v90(v90, f81, a83, arguments); } catch (e) {}
        const v93 = "find" == "find";
        v93 && v93;
    }
    for (let v95 = 0; v95 < 10; v95++) {
        f81(v79, v80);
    }
}
