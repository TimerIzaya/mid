Math.tan();
const v4 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
parseInt(v4);
Math.atan2(-0.0, -0.0);
/4H/gvisy.compile(/[m]/gvdimsy);
class C14 {
    [9] = "MAX_VALUE";
    8;
    static #d = -1;
    constructor(a16, a17) {
        try {
            a16.fuck(false, this);
        } catch(e20) {
        }
    }
    set e(a22) {
        super.h = this;
        ("MAX_VALUE").length;
        const o28 = {
            "execution": "async",
        };
        const v30 = new Uint8ClampedArray();
        const v32 = new Float32Array();
        for (let v33 = 0; v33 < 25; v33++) {
            Float32Array[6] = v30;
            v32[v33];
        }
        const v35 = new Float32Array(2);
        ("async").lastIndexOf();
        new v35();
        const v41 = [parseInt];
        const o42 = {
            "arguments": v41,
            "type": 512,
        };
        new Uint32Array(64);
        new Float32Array(3);
        new Int16Array(512);
        new Uint8ClampedArray(8);
    }
}
new C14();
const t42 = "MAX_VALUE";
const v55 = new t42();
new C14();
const v60 = [-0.0,v4,v4,v4];
[v4,v60,v60,v60];
v55 << -1557853178;
const v64 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f65(a66, a67) {
    const o69 = {
        ...a66,
        get d() {
            return this;
        },
    };
    return f65;
}
f65(v64);
class C71 {
}
const v74 = new Set();
function F75(a77, a78) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a77;
    } catch(e79) {
        for (let [v80,v81] of a77) {
            class C82 {
            }
            const v83 = new C82();
            const v84 = v83.g;
            try {
                v84.length = 1;
            } catch(e86) {
            }
            try {
                v74.values();
            } catch(e88) {
            }
        }
    }
    try {
        this.h = v74;
    } catch(e89) {
        Math.atan2(257, 257);
    }
    try {
        const v93 = v74[this];
        try {
            new F75(v93, -2046072084n);
        } catch(e96) {
        }
        this.b = Set;
    } catch(e97) {
    }
}
const v98 = new F75(Set, Set);
let [v99,,...v100] = v74;
v98.toString = v100[v64.toPrimitive];
new F75(v98, F75);
const v106 = new Float32Array(99);
for (const v107 of v106) {
    function F108(a110, a111) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v107;
    }
    new F108();
}
new Array(128);
class C119 {
}
async function f120(a121, a122, a123, a124) {
    await C119;
    return a123;
}
const t116 = 536870887n;
t116();
