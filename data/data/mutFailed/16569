const v5 = new Float32Array(2501);
const v8 = new BigUint64Array(255);
const v11 = new BigInt64Array(3477);
[v11,v5,v5,v5,BigUint64Array];
["defineProperties",255,BigUint64Array,"replace"];
const v14 = [BigUint64Array];
class C17 {
    constructor(a19) {
        const v20 = this.constructor;
        try { new v20(); } catch (e) {}
        ("setPrototypeOf").localeCompare();
    }
    9 = C17;
}
const v23 = new C17();
const v24 = new C17();
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    try { new v31(v24, 6, 6, a27); } catch (e) {}
    a27[9];
    a30--;
    try {
        this.c = v31;
    } catch(e35) {
    }
}
const v36 = new F25(v23);
const v37 = [];
try { v14(v14, v14, v14, v37, v37); } catch (e) {}
class C39 {
}
const v40 = new C39();
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F41(C39, v40, F41);
const v47 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
function f48() {
    const v49 = v47.length;
    const v50 = v46.__lookupSetter__;
    const v51 = v49 >>> v49;
    v8[v50 & (v51 % v51)] += v40;
    return F41;
}
f48();
new F25(v36);
