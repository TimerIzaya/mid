const v2 = new Array(65536);
function f3() {
    return 65536;
}
const v5 = v2 || false;
class C6 extends Array {
    [65536];
    #toString(a8, a9) {
        a9 >>> a9;
        function f11(a12) {
            return false;
        }
        class C13 extends f3 {
            [Array];
            #c = v5;
            #h;
        }
        return v2;
    }
    static 3 = v2;
    b = Array;
}
const v14 = new C6();
const v15 = new v14();
v15.f = v15;
new C6();
new Int32Array(9);
const v22 = new Uint8ClampedArray(1264);
v22[39] = v22;
let v23 = 11;
v23--;
new Uint8Array(v23);
for (let i29 = 0, i30 = 10; i29 < i30; i29++) {
    i30 >>> i30;
}
function F38(a40) {
    if (!new.target) { throw 'must be called with new'; }
}
try { ("async").codePointAt("async"); } catch (e) {}
Array.length;
function f48() {
    for (let i53 = 0, i54 = 10;
        i53 < i54;
        (() => {
            const v65 = F38(-1263139894, -23596, i53++);
            eval();
            v65 | F38;
            ("catch").codePointAt(-1263139894);
        })()) {
    }
    return URIError;
}
