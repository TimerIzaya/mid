new Float32Array(4096);
const v5 = new Int16Array(64);
let v7 = v5[257];
v7 = 257;
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a11;
    } catch(e12) {
    }
}
new F8(64, 4096);
new F8(64, 4096);
new F8(v7, v7);
new Int32Array(257);
class C21 extends Float32Array {
    147;
    4 = Int16Array;
    toString(a23, a24) {
        v5[4096];
        let v27 = -9007199254740990;
        2147483647 + 2147483647;
        Math.cosh(a23);
        --v27;
        a24 / a24;
        super.buffer = -9223372036854775807;
        super[Math] = -1615019512n;
        return this;
    }
}
new C21();
new C21();
new C21();
const v42 = new Uint8ClampedArray(4096);
function f43(a44) {
    return Uint8ClampedArray;
}
const v47 = [v42];
const o48 = {
    "arguments": v47,
    "type": "function",
};
const v49 = new Worker(f43, o48);
v49.getMessage();
