const v2 = new BigInt64Array(-2);
let v3 = 127;
try { Uint8Array.from(Uint8Array); } catch (e) {}
Uint8Array.prototype = Uint8Array;
let v6 = new Uint8Array(v3, Uint8Array, v2, Uint8Array);
try { v6.subarray(Uint8Array); } catch (e) {}
new Uint8Array(2080);
const v12 = 208 >> 208;
Uint8ClampedArray.name;
let v15;
try { v15 = new Uint8ClampedArray(Uint8Array, 2080, BigInt64Array); } catch (e) {}
try { v15.with(v15, v15); } catch (e) {}
const v17 = new Uint8ClampedArray(208);
try { new BigUint64Array(Uint8ClampedArray, Uint8Array, v6); } catch (e) {}
Object.defineProperty(v17, "a", { writable: true, configurable: true, value: v6[6] });
({"buffer":v6,...v3} = v6);
"getUTCDate" == "getUTCDate";
new BigUint64Array(64);
try { new Uint32Array(208, 208, 208, 2080, -2, Uint32Array); } catch (e) {}
new Uint32Array(9007199254740992);
try { ("aZ4O").link(v12); } catch (e) {}
"aZ4O" == "aZ4O";
("aZ4O").endsWith();
