const v0 = [-1.4712638180965237e+308,-4.197184309805209,272176.49175806926,3.0,2.220446049250313e-16,-1000000.0,1000000.0,Infinity];
const v1 = [1.0295877545676895,2.2250738585072014e-308,-2.2250738585072014e-308,-3.0,-548090.8000650955,934056.7706369159,-2.0,Infinity,2.2250738585072014e-308,226917.3229528265];
const v2 = [3.0,1000000000000.0,-0.0,-1000000.0,-1000000000.0,722208.4961241579,1.1157839555004279e+308,-1000000000.0,0.5551197063813312];
function f3(a4) {
    const o8 = {
        get f() {
            a4["some"](v0);
            return this;
        },
        ...v2,
        "c": v1,
        205: v1,
        [a4]: v0,
        [v0]: v2,
        __proto__: v0,
    };
    const o9 = {
        __proto__: o8,
    };
    class C10 {
        2 = o8;
    }
    const v11 = new C10();
    function f12(a13, a14) {
        return f12;
    }
    const v17 = [v11];
    const o18 = {
        "arguments": v17,
        "type": "function",
    };
    new Worker(f12, o18);
    return o8;
}
f3(v2);
const o21 = {
};
const v23 = [17452,4294967295,64,-8];
try {
const t0 = "jER";
new t0(...v23, -1.6798118066934893e+307);
} catch (e) {}
const v26 = f3(v1);
const v27 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v27.concat(v27);
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e33) {
    }
}
const v34 = f3(v2);
function f35() {
    return v34;
}
function f36() {
    try {
        139837843 in "deleteProperty";
    } catch(e40) {
    }
    return v26;
}
function f41() {
}
const v42 = new f41();
v42[Symbol.toPrimitive] = f41;
const v47 = [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
try { v47.group(BigInt64Array); } catch (e) {}
const v51 = new Int8Array(268435456);
const v53 = eval(eval);
try { v53.isExtensible(v51); } catch (e) {}
const v55 = /\p{Script_Extensions=Greek}/vis;
const v56 = /a$\P{Decimal_Number}/gvdims;
v55[Infinity] = v56[v56];
new Date();
%OptimizeFunctionOnNextCall(f41);
new Uint32Array(268435456);
const o63 = {
    "maxByteLength": 268435456,
};
const v65 = [16,-1073741824n];
function f67() {
}
const v68 = [601759695];
const v69 = [1073741824,1073741823,1376142744,1073741825];
function f71(a72, a73, a74, a75) {
    for (let i78 = 0; i78 < 2; i78++) {
        try {
            arguments.g = i78;
        } catch(e84) {
        }
    }
    function f85() {
        return a72;
    }
    const v86 = f67();
    const v88 = new Int8Array();
    const v91 = new Uint32Array(4);
    [v91];
    const v95 = BigUint64Array * 536870887;
    v95 ** v95;
    function f97(a98, a99) {
        return v86;
    }
    f97();
    const v101 = v88.buffer;
    Object.defineProperty(v101, "constructor", { writable: true, configurable: true, value: Date });
    new Int8Array();
    v101.slice(2147483648);
    %OptimizeFunctionOnNextCall(f85);
    let v106;
    try { v106 = v69["find"](..."find", a75, ...v68, ...v69, ...522675525n); } catch (e) {}
    Symbol("find");
    const v110 = new Uint8ClampedArray();
    const o111 = {
        ...v110,
    };
    v106 <= a74;
    return arguments;
}
v65.flat(16);
