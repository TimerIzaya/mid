function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 24223;
    } catch(e3) {
    }
    try {
        this.b = 24223;
    } catch(e4) {
    }
    try {
        this.c = 24223;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
new Array(3563);
new ReferenceError(0);
new Int32Array(-9223372036854775807);
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    function f20(a21) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f20 });
    let v24 = 1073741825;
    try {
        v24--;
        Math.atan2(+-1e-15, -175950080);
        this.f = v24;
    } catch(e31) {
    }
}
let v32 = new F18();
let v33 = new F18();
({"a":v33,"b":v33,...v32} = v33);
const o38 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o38);
new F18();
new Uint8ClampedArray(16);
function f45() {
    new Int8Array(1073741823);
    class C49 {
        #valueOf(a51, a52, a53, a54) {
        }
    }
    const o58 = {
        valueOf(a56, a57) {
        },
    };
}
f45();
%OptimizeFunctionOnNextCall(f45);
f45();
