new Uint8Array(10);
new Int32Array(64);
new BigUint64Array(64);
const v9 = [54501,-6,10337,811850158];
[512,351578341,536870888];
[-65536,8,536870887,-153779042];
new Uint8Array(0);
new Float32Array(1100);
const v20 = new Float64Array(16);
const v23 = new Int8Array(520);
const v25 = new Uint8ClampedArray();
const v26 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f28() {
    for (let [v30,...v31] of "atan2") {
    }
    return v20;
}
Uint32Array.constructor = f28;
const v32 = new Uint32Array();
function f33() {
    function f34() {
        try {
            new Uint32Array(64, 0, 129);
        } catch(e36) {
        }
        return v9;
    }
    return f34;
}
Object.defineProperty(v32, "constructor", { get: f33 });
let v37 = -4294967297n;
const v38 = v37--;
const v39 = [601759695];
const v40 = [1073741824,1073741823,1376142744,1073741825];
function f41(a42, a43, a44, a45) {
    const v46 = a42.constructor;
    const v48 = Symbol.toPrimitive;
    v46[v48] = f41;
    let v49;
    try { v49 = v46(); } catch (e) {}
    const v50 = v49?.constructor;
    let v51;
    try { v51 = v50(f41, a42, v26, Uint32Array, v46); } catch (e) {}
    function f52() {
        const v54 = ("Vre").charAt(v51);
        v54.blink();
        let v56;
        try { v56 = ("Vre").codePointAt(v26); } catch (e) {}
        v56 % v56;
        let v58 = Float64Array;
        v58 = a43;
        b = v26;
        let v59 = v26.length;
        v59++;
        try {
            v40.forEach(a43);
        } catch(e62) {
            e62.message = e62;
        }
        const o73 = {
            "c": v37,
            valueOf(a64, a65) {
                return v49;
            },
            1073741824: v32,
            [v37](a67, a68, a69, a70) {
                eval(v54);
            },
        };
        return v40;
    }
    f52();
    const v76 = Array(v50);
    try { v76.findLast(); } catch (e) {}
    const v79 = Int8Array.of();
    let v80;
    try { v80 = v79.every(v79, a42, v79, a43, Array); } catch (e) {}
    const v81 = new Int8Array(v80);
    const v83 = v81.buffer.slice();
    function f84() {
        function f85(a86, a87) {
            Symbol[a86] >>>= v46;
            const v90 = new Uint32Array(186);
            const v94 = new Float64Array(186, 186, 16);
            const v95 = [Float64Array,v94];
            if (Float64Array > v90) {
                new Uint32Array(v95);
            } else {
                function F98(a100, a101, a102) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
            return v48;
        }
        return f85;
    }
    function f103(a104) {
        function F105(a107, a108) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a104;
            } catch(e109) {
            }
        }
        new F105(a45, v46);
        new F105(1100, a104);
        new F105(a104, v40);
    }
    Object.defineProperty(v83, "constructor", { writable: true, configurable: true, enumerable: true, get: f84, set: f103 });
    const v113 = v83.constructor;
    function f114() {
        function f115(a116, a117) {
            let v118 = 10;
            for (; v118--;) {
            }
            return a116;
        }
        return f115;
    }
    function f120(a121) {
        [] != -2147483647n;
    }
    Object.defineProperty(v113, Symbol.iterator, { enumerable: true, get: f114, set: f120 });
    try { v113(v83, v80, v38, v79, a42); } catch (e) {}
    const v129 = new Int32Array(v113, v46, v46);
    v129.lastIndexOf(a42, a44);
    try { v40["find"](..."find", a45, ...v39, ...v40); } catch (e) {}
    return v37;
}
for (let v133 = 0; v133 < 10; v133++) {
    f41(v32);
}
%OptimizeFunctionOnNextCall(f41);
f41(Uint32Array);
const v136 = v25.toReversed();
const v138 = [v136,v136];
Reflect.apply(v23.includes, v23, v138);
