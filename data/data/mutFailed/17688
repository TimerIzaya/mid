const v3 = /(a)\1/gdmy;
const v4 = /\x01/guims;
const v5 = /\xed\xb0\x80*/gvi;
function f6(a7, a8) {
    const o14 = {
        __proto__: a7,
        get c() {
            let {"ignoreCase":v10,} = v5;
            [NaN,698.9219273731123,-1000000.0,-Infinity,-990582.8638143302,604243.6576715414,Infinity,0.780202471987412,-1.322993221125336e+308,0.3909229402061294];
            [0.13103258561628317,0.46395269273308337,1.7850033382494177e+308,-674395.3321442427,2.0,5.0,0.002457711606611901,1000000.0];
            [-1000.0,9.664274025784778,2.220446049250313e-16,4.0];
            return this;
        },
        "f": 4,
        ...a7,
        "h": v3,
        ...v3,
    };
    return o14;
}
f6(v4, 4);
const v16 = f6(v5, 4);
let v18 = 932132118;
552610460 | v3;
Math.imul(v18, v18);
v18++;
f6(v16, 11);
class C27 {
    static toString(a29, a30) {
        this.d = this;
        const v32 = super[a30];
        try {
            delete this[v32];
            this[C27];
        } catch(e35) {
        }
        function f39(a40, a41, a42) {
            const o43 = {
            };
            return o43;
        }
        f39(9, 9, 9);
        f39(9, 11, 9);
        f39(9, 9, 9);
        function f50(a51, a52, a53, a54) {
            const v55 = /(?:a*)+q(?<a>.)/guds;
            function f56(a57) {
                a57.dotAll;
                a57.hasIndices = a57;
                const v59 = a57?.constructor;
                v59.$_;
                v59.lastParen;
                const o63 = {
                    get d() {
                    },
                };
                return v55;
            }
            for (let [i67, i68] = (() => {
                    let v64 = 0;
                    v64++;
                    return [v64, 10];
                })();
                (() => {
                    const v69 = 9 < i68;
                    v69 || v69;
                    return v69;
                })();
                i68--) {
                f56(v55);
            }
            return f50;
        }
        for (let v77 = 0; v77 < 10; v77++) {
            f50();
        }
        %OptimizeFunctionOnNextCall(f50);
        f50();
    }
}
const v80 = new C27();
const v82 = new Uint8ClampedArray(C27);
function f83() {
    function f84(a85, a86) {
        const v87 = v80.constructor;
        v87 + v87;
        return f84;
    }
    return f84;
}
Object.defineProperty(v82, "valueOf", { get: f83 });
v82[5] = v82;
