function f0() {
    function f1(a2, a3, a4, a5) {
        return arguments;
    }
    const v9 = new BigInt64Array(4046);
    function f11(a12, a13) {
        a12++;
        let o16 = {
            "d": a12,
            ...a12,
            get e() {
                return a13;
            },
        };
        [,...o16] = v9;
        a13[4046];
        const o20 = {
            "maxByteLength": 3035,
        };
        new ArrayBuffer();
        new Float32Array();
        return 115;
    }
    const o43 = {
        set f(a29) {
            let v30 = ("XX9Za")[10000];
            v30 >>>= a29;
            ("XX9Za")[334257220];
            function f33() {
                const v34 = [];
                v34[6] = v34;
                const o37 = {
                    set b(a36) {
                    },
                };
                return undefined;
            }
        },
        "f": "XX9Za",
        ..."p",
        "c": -8.585186917231653,
        valueOf(a39, a40) {
            this - -8.585186917231653;
            return a40;
        },
    };
    return o43;
}
const v44 = f0();
f0();
const v46 = f0();
new Int8Array(121);
new Uint32Array(2731);
new Float32Array(128);
Object.defineProperty(v44, "e", { enumerable: true, value: v46 });
Set.toString = f0;
Set.constructor(Set);
new Uint8ClampedArray(Uint8ClampedArray);
const v66 = [7,128];
const v67 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v68 = v67[4];
v68 | v68;
const v70 = [40213,422333454,47387,65536,-51830];
v70[2] = v70;
0 - 0;
try { gc(); } catch (e) {}
const v79 = gc();
new BigInt64Array();
let v83;
try { v83 = ("boolean").repeat(1000000.0); } catch (e) {}
class C85 {
    #o(a87) {
    }
}
function f88(a89, a90) {
    const o91 = {
        ...a89,
    };
    return a90;
}
const t80 = "toString";
t80[6] = "toString";
"toString" == v79;
("boolean").split("toString");
const v96 = [65537,268435441,63298,-5,1235122603];
const v97 = [128,215394418];
try { v97.entries(); } catch (e) {}
function F99(a101, a102, a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    const v105 = this.constructor;
    try { v105(1024, 1024, v96); } catch (e) {}
}
const v107 = new F99(-714582153, F99, -714582153, v97);
v107.length;
-256 >> -256;
function f111(a112, a113) {
    a113--;
    a112 | a112;
    const o129 = {
        "c": 15135,
        "a": 15135,
        "d": a112,
        __proto__: a113,
        "g": -1628878962,
        "type": "boolean",
        "a": a112,
        set b(a117) {
        },
        "g": 15135,
        "b": a113,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f122() {
                    return f122;
                }
                const o124 = {
                    [v83]() {
                    },
                };
                [o124];
                v67.copyWithin(8, -268435456, -256);
            } catch(e128) {
            }
            return this;
        },
    };
    o129.g = o129;
    return o129;
}
let v130;
try { v130 = f111(15135, 15135); } catch (e) {}
const v131 = /M/gus;
class C134 {
    #h = 1e-15;
    static get e() {
        function f136() {
            return 1e-15;
        }
        return this;
    }
    static [v131];
    set f(a138) {
        const v139 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        for (let v140 = 0; v140 < 5; v140++) {
            v139 | v140;
        }
        this != a138;
    }
    #g = 3.7122420217608383;
    static 65536;
}
v130[1000000];
f111(925.1427495594241, v66);
f111(317008.8127941969, -4);
f111(1000000.0, v67);
268435441n ^ 268435441n;
268435441n - 268435441n;
const v151 = new BigUint64Array();
v151[2445191368] = 268435441n;
