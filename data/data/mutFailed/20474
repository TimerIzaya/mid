[34177,48506,-256,127,3,65537,-34207,-1024,-2];
const v1 = [-14,-7,3,7,3,-65537,34305,1730265955,1073741823];
[1200139104];
[0.3667904168427565,-218.54794150897328,-694.7607799048369,-2.220446049250313e-16,-1000000.0,-0.0];
const v4 = [253.6494715094609,1.7976931348623157e+308,1000000000.0,0.0,-573.8056275749606,0.1531848258317703,-2.2250738585072014e-308];
const v5 = [-948.9339898018951,-2.220446049250313e-16,-1.0,-1.0];
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 4294967297n;
    } catch(e15) {
    }
    try {
        this.c = a14;
    } catch(e16) {
    }
    try {
        this.h = v4;
    } catch(e17) {
    }
}
const v18 = new F9(v1, -13n, v4, -13n);
new F9(F9, 4294967297n, v18, 4n);
new F9(v4, 4n, v5, 4n);
class C22 {
    141 = "9007199254740991";
}
new C22();
const v24 = new C22();
const v27 = new BigInt64Array();
function f32() {
    const v36 = -65535 / -65535;
    const o83 = {
        ...128,
        m(a38) {
            a38.c = a38;
            a38.h = 4294967297n;
            const o39 = {
            };
            o39.d = v27;
            v24.h = o39;
            function f40(a41, a42, a43) {
            }
            f40.bind();
            f40.caller = f40;
            try {
                o39.e = -65535;
            } catch(e45) {
                const v49 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v49, o39);
            }
            const o51 = {
            };
            o51.g = o51;
            o51.e = 1261703539;
            let v53;
            try { v53 = Math.expm1(128); } catch (e) {}
            v53--;
            const v56 = -9007199254740991 >> -9007199254740991;
            v56 - v56;
            -Math.sin(-9007199254740991);
            try { ("EV").link(v36); } catch (e) {}
            0 != 0;
            class C64 {
                o(a66, a67, a68, a69) {
                    class C70 {
                    }
                }
            }
            C64.name = C64;
            new C64();
            const v74 = new Int8Array(3938);
            let v75 = 3;
            1000 + v75++;
            const v79 = 0 >> 1261703539;
            v79 / (v79 - v79);
            [...v75] = v74;
            const o82 = {
            };
            o82.c = o82;
            return a38;
        },
    };
    let v84;
    try { v84 = v18.m(o83); } catch (e) {}
    v84.m(128);
    class C87 {
    }
    new Float32Array();
}
f32();
