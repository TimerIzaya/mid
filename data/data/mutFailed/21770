class C3 {
    f = 46144;
    static #b;
    static #h;
    h = 46144;
    constructor(a5) {
        const o6 = {
        };
        const v8 = new Proxy(this, o6);
        let v9;
        try { v9 = new a5(a5, o6); } catch (e) {}
        Reflect.construct(a5, [46144,v8,-874580.3133453012,v8], v9);
    }
    static 10 = 431.6490004788732;
}
new C3(C3);
const v14 = new C3(C3);
new C3(v14);
[3,891411439];
const v23 = [15543];
v23.d = v23;
class C25 extends Date {
}
Date.toLocaleString();
[7,-15,-65536,-9223372036854775807,-1144732007];
function f28() {
    typeof arguments;
    const o34 = {
        "execution": "sync",
        "type": "minor",
    };
    const o44 = {
        "e": -1781241988,
        8: -1781241988,
        "c": -1781241988,
        ..."g",
        ..."g",
        [1](a38, a39) {
            Object.defineProperty("n", "d", { writable: true, value: "n" });
            let v43;
            try { v43 = ("construct").concat(f28, Uint8ClampedArray, this); } catch (e) {}
            v43["n"] = Uint8ClampedArray;
        },
    };
    return o44;
}
const v46 = [f28,f28()];
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
}
const v53 = F47.constructor;
try { v53(v46); } catch (e) {}
