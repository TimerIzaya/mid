const v2 = new WeakMap();
class C6 {
    static set f(a8) {
        v2[46540] = this;
        const v9 = super[WeakMap];
        v9?.[v2];
        try {
            super.grow(v9);
        } catch(e12) {
        }
    }
    [122490330] = 122490330;
    static #f;
    static h = undefined;
    171 = -33072;
    static #n(a14, a15, a16) {
        a16 - WeakMap;
        return -33072;
    }
    #a = -33072;
}
try { C6.bind(-33072); } catch (e) {}
const v19 = new C6();
v19[122490330] = v19;
const v20 = new C6();
v20[122490330];
const v22 = new C6();
v22[171];
function f24() {
    return v22;
}
-159867.2560778329 / -159867.2560778329;
-4.0 >>> -4.0;
Int8Array.prototype;
const v33 = new Int8Array();
class C34 {
    constructor(a36) {
        try { new C6(this, -159867.2560778329, ...Int8Array, ...v33, this); } catch (e) {}
        v19[128] *= -33072;
        try {
            this.fuck(0.07438927597873335, 0.07438927597873335, 0.07438927597873335, 0.08486797327330642);
        } catch(e41) {
            e41.stack = e41;
        }
        super.f;
        [-1000000.0,5.0,4.0,2.2250738585072014e-308,-413664.13652614446];
        [771920.1683706015,0.47306556430505464];
        [-4.0,7.478326937218128,432.13117577847356,-2.2250738585072014e-308];
        try { ("n").strike(); } catch (e) {}
        v33[this] %= -4.0;
        for (let v50 = 0; v50 < 32; v50++) {
            function f51() {
                return 122490330;
            }
            Int32Array.length = Int32Array;
            new Int32Array(946);
            13 ^ 13;
            Int8Array.prototype = Int8Array;
            new Int8Array(13);
            46 - 46;
            new Uint16Array(46);
            "p" + v50;
            for (let v65 = 0; v65 < 5; v65++) {
                function f66() {
                    return f66;
                }
                const v67 = f66();
                try { v67(); } catch (e) {}
            }
        }
    }
}
new C34();
const v70 = new C34();
const v71 = v70?.__lookupGetter__;
try { new v71(122490330); } catch (e) {}
const v73 = new C34();
const v74 = v73?.constructor;
try { new v74(v73); } catch (e) {}
function f76() {
    const v78 = ([f76,f76]).constructor;
    const v79 = new v78();
    class C80 extends v78 {
    }
    const v81 = new C80();
    try { v81.reduceRight(); } catch (e) {}
    return v79;
}
try { f76(); } catch (e) {}
