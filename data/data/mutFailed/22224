function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -1280531065;
    } catch(e3) {
    }
    try {
        this.g = -1280531065;
    } catch(e4) {
    }
    try {
        this.a = -1280531065;
    } catch(e5) {
    }
}
new F0();
const v7 = new F0();
const v8 = new F0();
v8.b = v8;
const o9 = {
};
const v10 = o9.constructor;
try { v10.freeze(F0); } catch (e) {}
const v12 = v10.isFrozen(v10);
v12 || v12;
class C14 {
}
try { new C14(); } catch (e) {}
const v16 = new C14();
try { v16.constructor(); } catch (e) {}
const v18 = new C14();
try { v18.constructor(); } catch (e) {}
const v20 = new C14();
const v21 = v20?.__lookupSetter__;
try { new v21(v8); } catch (e) {}
for (let v23 = 0; v23 < 5; v23++) {
    const v25 = "p" + v23;
    const v26 = v25?.toLocaleUpperCase;
    try { new v26(); } catch (e) {}
    v18[v25] = v23;
}
let v28;
try { v28 = v20(C14, v18, F0, v18, v18); } catch (e) {}
v16.f = v28;
const v29 = [4.0,-1.2361743749753238,NaN];
try { v29.fill(v29); } catch (e) {}
const v31 = [-913.7120732190333,2.2250738585072014e-308];
const v32 = [2.0,-277181.4010862736,0.6444389704501857,-803802.4345120647,2.2250738585072014e-308,5.38107702321563e+307,-0.0];
let v33;
try { v33 = v32.toLocaleString(); } catch (e) {}
try { v33.sup(); } catch (e) {}
const v35 = /\ud808\udf45*/is;
const v36 = /(Ya\D*)/giy;
const v37 = v36.ignoreCase;
v37.e = v37;
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.constructor;
    try { new v45(0.29489550717955537, a43); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e48) {
    }
}
const v49 = /(?<!a)/gvdm;
function f50(a51, a52, a53, a54) {
    const v55 = a52?.constructor;
    try { new v55(); } catch (e) {}
    a51.c = a51;
    a52.d = a52;
    const v57 = a53?.__defineSetter__;
    try { v57.bind(a52); } catch (e) {}
    try { new v57(a52, a54); } catch (e) {}
    const v60 = a54?.constructor;
    let v61;
    try { v61 = new v60(a51, a52); } catch (e) {}
    const o70 = {
        [a52]: v7,
        "d": F0,
        "b": v31,
        [a51]: F0,
        "a": F0,
        "g": v8,
        "e": a54,
        [v49]: v32,
        p(a63, a64, a65) {
            try {
                super.m(a52, F0, a53);
            } catch(e67) {
            }
            v61[8];
            try {
                a51.c = v36;
            } catch(e69) {
            }
            return a63;
        },
        16: v16,
        __proto__: v16,
        "a": v7,
        "arguments": v31,
        268435441: v20,
    };
    return o70;
}
const v71 = f50(v36, v8, v31, v35);
const v73 = f50(v49, F0, v31, v49).b;
try { v73.findLastIndex(f50); } catch (e) {}
function* f75(a76, a77, a78) {
}
for (let v79 = 0; v79 < 5; v79++) {
    function f80() {
        const v82 = new Set();
        const v83 = v82.add(v79);
        try { v83.forEach(); } catch (e) {}
        const v85 = v83.entries();
        try { v85.next(); } catch (e) {}
        v85.next();
        return v79;
    }
    const v88 = f80();
    v88 - v88;
    %OptimizeFunctionOnNextCall(f80);
}
const v90 = f50(v49, v7, v29, v49);
const v91 = v90.g;
v91.b = v91;
function f93(a94, a95, a96, a97) {
    const o105 = {
        [-4294967297n](a99, a100, a101, a102) {
            eval(a102);
        },
    };
    o105.e = o105;
    function f107(a108) {
        return a97;
    }
    const v109 = f107?.constructor;
    try { new v109(Int8Array); } catch (e) {}
    class C111 extends f107 {
        static 64 = v29;
    }
    Int8Array.name = Int8Array;
    const v112 = new Int8Array();
    let v113;
    try { v113 = v112.slice(v71, v71); } catch (e) {}
    const v114 = v112.buffer;
    const v115 = v114.slice(a95);
    v115.f = v115;
    function f116(a117) {
        a117.detached;
        const v119 = [601759695];
        const v120 = [1073741824,1073741823,1376142744,1073741825];
        try { v120["find"](..."find", undefined, ...v119, ...undefined); } catch (e) {}
        return a95;
    }
    v113.length;
    let v125;
    try { v125 = f116(v90); } catch (e) {}
    f116(v114);
    v114.constructor = f116;
    const v127 = v125.slice();
    try { v127.slice(a97, v12); } catch (e) {}
    function F129() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            let v131 = -9007199254740991;
            for (let i = 0; i < 5; i++) {
                v131++;
            }
            F129();
        } catch(e134) {
        }
    }
    return C111;
}
f93.arguments = f93;
for (let v135 = 0; v135 < 10; v135++) {
    f93();
}
%OptimizeFunctionOnNextCall(f93);
const v137 = f93(-4294967297n, f93, f93, f93);
let v138;
try { v138 = v137(v7); } catch (e) {}
v138.arguments = v138;
