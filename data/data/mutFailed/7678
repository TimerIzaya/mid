function f0() {
}
const v6 = new Int8Array(1);
new BigUint64Array(256);
const v10 = [];
"-1210238113" - v10;
const o13 = {
    [v6]: v10,
};
new Float64Array(1975);
/[vC[\cz]]/gvdims;
function f22(a23, a24, a25, a26) {
    const o31 = {
        p(a29, a30) {
        },
        10: 1073741824,
    };
    for (const v33 in "1024") {
    }
}
%OptimizeFunctionOnNextCall(f22);
function f35() {
}
function F36(a38) {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new F36();
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "f", { writable: true, enumerable: true, value: a44 });
    this.f = a44;
    try {
        const v45 = [];
        class C46 {
            constructor(a48, a49, a50) {
                function f51(a52, a53, a54) {
                    v45.copyWithin();
                    let v57 = 0;
                    do {
                        const o58 = {
                        };
                        try {
                            o58.h = v39;
                        } catch(e59) {
                        }
                        try {
                            const o60 = {
                            };
                            o60.h = v39;
                            o60.e = 4096;
                        } catch(e61) {
                        }
                        const o62 = {
                        };
                        o62.h = v39;
                        o62.e = 4096;
                        o62.c = WeakSet;
                        v57++;
                    } while (v57 < 7)
                    f51(-268435456, 0.6683462416314783, [-268435456]);
                    const v69 = this >> -268435456;
                    v69 >> this;
                    return -v69;
                }
                f51();
            }
        }
        class C73 extends C46 {
        }
        new C73();
    } catch(e75) {
    }
}
-63367 < 10;
const v80 = new BigInt64Array();
class C81 {
    constructor(a83, a84) {
        for (let v85 = 0; v85 < 10; v85++) {
            v80[-1];
            try {
                super.o();
            } catch(e88) {
            }
        }
    }
}
const v91 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v92 = [601759695];
const v93 = [1073741824,1073741823,1376142744,1073741825];
function f95(a96, a97, a98, a99) {
    function f100() {
    }
    class C101 extends f100 {
        toString(a103, a104) {
            const v105 = this.constructor;
            new v105(a104, v105, this, v105, C101);
            -this;
        }
    }
    const v108 = new C101();
    try { v108.toString(); } catch (e) {}
    function f111() {
        const o118 = {
            "e": -4294967295,
            ...v91,
            ..."Vre",
            "c": a99,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a116, a117) {
                return v93;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    f111();
    %OptimizeFunctionOnNextCall(arguments);
    let v121;
    try { v121 = v93["find"](..."find", a99, ...v92, ...v93, ...522675525n); } catch (e) {}
    v121 <= a98;
    return arguments;
}
f95(v91, v93, "-1073741824", 522675525n);
const t127 = "-1210238113";
const v130 = new t127();
[v130,v130];
new Uint8Array(0);
const v140 = new Uint8ClampedArray(4);
new Int8Array(v140);
