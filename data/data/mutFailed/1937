function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 2147483649;
    } catch(e3) {
    }
    try {
        this.c = 2147483649;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f8(a9) {
    v7.h;
    [Reflect,Reflect,Reflect,Reflect];
    return F0;
}
v7.toString = f8;
function f13(a14, a15) {
    function f16() {
        function f17(a18, a19) {
            const o23 = {
                "execution": "sync",
                "type": "minor",
            };
            gc(o23);
            return o23;
        }
        return f17;
    }
    function f25(a26) {
        a26 *= v6;
    }
    Object.defineProperty(a15, Symbol.toPrimitive, { writable: true, configurable: true, get: f16, set: f25 });
    const o33 = {
        "e": v7,
        "g": v7,
        "h": v5,
        [v7]: F0,
        ...a15,
        [v6](a30, a31) {
            this[a14];
            return a31;
        },
        "d": v5,
    };
    return o33;
}
f13(v6, v6);
f13(v5, v7);
f13(v6, v6);
class C40 {
}
const v41 = new C40();
ReferenceError(v41);
ReferenceError();
