const v0 = [];
let v2 = -9;
new Float32Array(128);
const v8 = 8 !== 5;
if (v8) {
    function F9(a11, a12) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.c = v8;
        } catch(e13) {
        }
    }
    new F9(8, v2);
    new F9(5, v2);
    new F9(5, 8);
} else {
    v2 ||= 512;
}
new v2(5);
const v21 = new BigUint64Array(16);
function f22() {
    return 8;
}
try { f22(); } catch (e) {}
for (let v24 = 0; v24 < 32; v24++) {
    try { ("p").codePointAt(5); } catch (e) {}
    v0["p" + v24] = v24;
}
/(a)/dims;
const v29 = /uLabc/vy;
v29.lastIndex = v29;
/(a)/gu;
try { ("MAX_SAFE_INTEGER").endsWith(v8); } catch (e) {}
Uint16Array.name;
let v38 = 168;
v38++;
273 % 273;
let v43 = BigUint64Array;
const t38 = /a\S\u0034/guim;
t38.dotAll = "setUTCMinutes";
const o45 = {
};
const v47 = new Proxy(f22, o45);
try { v47(); } catch (e) {}
const v52 = -65535 >>> v43;
Math.clz32(v21);
Math.ceil(Proxy);
--v43;
const v56 = v21 + 16;
try { v56.codePointAt(v8); } catch (e) {}
let v58 = v52 % v21;
let v59 = v58++;
v59--;
