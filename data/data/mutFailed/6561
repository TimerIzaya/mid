new Uint32Array(75);
new Float32Array(3326);
new Uint32Array(156);
const v12 = [-1727815353,-9007199254740991];
[4,13];
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v18 = new Int16Array(16);
try { v18.find(v18); } catch (e) {}
0.6822080711934364 / 0.6822080711934364;
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = this?.constructor;
    const v30 = v29?.constructor;
    try { new v30(v29); } catch (e) {}
    try { new v29(0.29489550717955537, a27); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e34) {
    }
}
const v35 = F25?.constructor;
try { new v35(F25); } catch (e) {}
const v37 = new Int16Array("string");
v37.f = v37;
let v39 = 127;
v39++;
const v41 = v39 != v39;
const v44 = new Int32Array(Int32Array);
const v45 = [];
function f46() {
    const o48 = {
        p() {
            return f46;
        },
        [v45]: 16,
        "a": v45,
    };
    const v49 = o48?.constructor;
    try { new v49(v41); } catch (e) {}
    return v45;
}
f46();
f46();
const v53 = f46();
const v54 = (a55, a56) => {
    return v53 * a56;
};
0.6058227007604853 | 0.6058227007604853;
let v60 = -Infinity;
v60++;
const v64 = new Float64Array(129);
let v65;
try { v65 = v64.entries(); } catch (e) {}
try { v65.next(); } catch (e) {}
255 - 255;
class C69 {
    static [v44] = 0.29489550717955537;
}
true || true;
function f72() {
    new Int8Array(1073741823);
}
f72();
f72();
const v78 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o80 = {
    valueOf() {
        return true;
    },
};
v78.length = o80;
class C81 {
}
const o82 = {
};
try { ("Xkz0W").split(v12, -536870912); } catch (e) {}
class C85 {
    set b(a87) {
    }
}
const t81 = 1763388454;
const v88 = new t81();
const v89 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v89(v88); } catch (e) {}
function f91(a92, a93) {
}
for (const v94 in v60) {
    function F95(a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e99) {
} finally {
}
