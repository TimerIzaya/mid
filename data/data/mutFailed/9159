const v2 = new Int16Array(3);
new Uint8Array(1);
const v8 = new Float64Array(2);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a11.d = a12;
    } catch(e14) {
    }
    function F15(a17) {
        if (!new.target) { throw 'must be called with new'; }
        const v18 = this.constructor;
        v18.prototype;
        v18.caller = v18;
        try { new v18(); } catch (e) {}
    }
    new F15(F15);
}
const v22 = new F9(1, v8, 2);
new F9(3, v22, 3);
const v24 = new F9(3, v2, 3);
class C26 {
    594532432 = -60610;
}
const v27 = new v24();
const o53 = {
    get d() {
        const v32 = v27.toPrimitive;
        const o52 = {
            get a() {
                return this;
            },
            toString(a35, a36) {
                1 && Float64Array;
                return -60610;
            },
            [v32]() {
                [v27];
                const t37 = "9007199254740992";
                t37["255"] &= 1;
                function f43() {
                    function f44(a45, a46) {
                        return f43;
                    }
                    const v48 = Promise.resolve(f44);
                    new Promise(-30285);
                    const v50 = v8.constructor;
                    try { new v50(v50); } catch (e) {}
                    return v48;
                }
                %OptimizeFunctionOnNextCall(f43);
            },
        };
    },
};
for (let i = 0; i < 5; i++) {
    (-32070) ** (-1000000.0 | -32070);
    ("entries").toUpperCase();
    const o61 = {
    };
    gc(o61);
}
