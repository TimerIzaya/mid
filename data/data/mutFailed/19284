const v0 = [5,-3,3,1940506048,-10,35085,4294967296,14,38416,1859296681];
const v1 = [9007199254740991,-256,1282034598];
const v2 = [-4294967297,268435456,-1839084205,536870887,128];
class C3 {
    get b() {
        function F5(a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a8;
            } catch(e9) {
            }
        }
        new F5(this, v0);
        new F5(this, v1);
        new F5(v2, this);
        return F5;
    }
}
new C3();
new C3();
new C3();
new BigUint64Array(2154);
new Uint8ClampedArray(956);
new Uint32Array(1);
const v25 = [];
function f26(a27) {
    function f28() {
        const v29 = [f28];
        function f30(a31) {
            return a31;
        }
        v29.constructor = f30;
        const v32 = v29.constructor;
        v32(v32, f30);
        return f28;
    }
    %PrepareFunctionForOptimization(f28);
    return v2;
}
v25[Symbol.toPrimitive] = f26;
class C36 {
    [v25];
    set a(a38) {
        a38 === v25 ? a38 : v25;
        [v25,a38,a38,v25];
        [v25];
        [a38,v25,v25,v25,v25];
    }
    static [v25];
    #f;
    h = v25;
}
const v44 = new C36();
new C36();
const v46 = new C36();
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
}
const v56 = new F50(-12, -56455, v46, v25);
const v57 = new F50(v44, -14, v44, v46);
const v58 = new F50(v44, -14, v46, C36);
v58.toString = f26;
v58 - -12;
Math.round();
v56 << -1.0;
try { v57(); } catch (e) {}
