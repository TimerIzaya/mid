function f0() {
    const o8 = {
        get b() {
            for (let v5 = 0; v5 < 32; v5++) {
                const t4 = "undefined";
                t4["p" + v5] = v5;
            }
            return "undefined";
        },
        ["undefined"]: "undefined",
        "b": 3.1976530456634707e+307,
        __proto__: "undefined",
        "f": 3.1976530456634707e+307,
    };
    const v9 = o8?.toLocaleString;
    try { new v9(); } catch (e) {}
    return o8;
}
const v11 = f0();
const v12 = f0();
const v13 = f0();
function f14(a15) {
    const o24 = {
        [a15]: a15,
        [v11](a17) {
            let v19 = 0;
            do {
                try {
                    a15.c = arguments;
                } catch(e20) {
                }
                v19++;
            } while (v19 < 2)
            return v13;
        },
    };
    o24.e = o24;
    return o24;
}
const v25 = f14(v11);
try { v25.hasOwnProperty(f14); } catch (e) {}
const v27 = f14(v11);
const v28 = f14(v11);
v27.b = v28;
class C29 {
    n(a31, a32, a33, a34) {
        f0();
        function f36() {
            return v28;
        }
        const o39 = {
            "maxByteLength": 2951,
        };
        const v41 = new SharedArrayBuffer(2951, o39);
        new Uint16Array(v41);
        return f14;
    }
}
new C29();
new v12();
const v46 = new C29();
v46?.constructor;
try { new v27(); } catch (e) {}
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    a52?.constructor;
    try { new v25(a53); } catch (e) {}
    try { new v55(); } catch (e) {}
    try {
    } catch(e59) {
        const v61 = e59();
        class C63 extends Float64Array {
        }
        const v64 = C63();
        try { v64(v61); } catch (e) {}
    }
}
const v66 = new F49();
new F49(F49, v66, v66, v66);
