new Float32Array(490);
new Uint8ClampedArray(814);
new Uint8ClampedArray(127);
const v9 = [-128,1000,4294967297,9223372036854775807,4294967296,34008];
function f10() {
    var a = 814;
    0 >= 1;
    return 127;
}
v9.toString = f10;
const v14 = [-1148496324,443042431,-65536,-22582];
[15,-35195,8];
class C19 {
    static #h;
}
new C19();
new C19();
const v25 = [-788.7260290236088];
const v27 = [-4294967295];
function F28() {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = new F28();
const v31 = new F28();
const o33 = {
    "h": v31,
    6: v31,
    128: undefined,
    "e": v27,
    "e": v30,
};
const v34 = Math.round();
for (let v35 = 0; v35 < 10; v35++) {
    v35 / v35;
    async function f37(a38, a39, a40) {
        ("b")[a40];
        v9 ** f37;
        new BigInt64Array(4096);
        await v34;
    }
    const v48 = f37();
    function f49() {
        function f50() {
            Math.acosh(1073741824 << f37);
            ++f37;
            Math.sinh(f37);
            return 2.220446049250313e-16;
        }
        return f50;
    }
    function f57(a58) {
        Date.parse();
    }
    Object.defineProperty(v48, "toString", { configurable: true, get: f49, set: f57 });
    const o62 = {
        [v48]: Math,
        "c": v14,
        "type": "c",
        "type": "c",
        "type": "c",
    };
    function f63() {
        return v25;
    }
    Object.defineProperty(o62, "execution", { writable: true, configurable: true, get: f63 });
    gc(o62);
    class C65 {
    }
}
function f66(a67) {
}
f66(f66);
f66();
const v70 = f66();
for (let v71 = 0; v71 < 25; v71++) {
    const v72 = [601759695];
    const v73 = [1073741824,1073741823,1376142744,1073741825];
    function f74(a75, a76, a77, a78) {
        let v80;
        try { v80 = v73["find"](..."find", a78, ...v72); } catch (e) {}
        v80 = v70;
        v72 || v71;
    }
    for (let v82 = 0; v82 < 5; v82++) {
        f74();
    }
}
