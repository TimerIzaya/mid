function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        function f3(a4) {
            arguments.length;
            return arguments;
        }
        return f3;
    }
    function f7(a8) {
        a8 ** a8;
    }
    Object.defineProperty(this, Symbol.toPrimitive, { get: f2, set: f7 });
    try {
        let v13 = [5];
        v13 **= this;
        const v14 = this[1073741824];
        v14[4040] = v14;
        v14[this] |= v14;
        this.f = 5;
    } catch(e15) {
        e15.message = e15;
    }
}
function f16() {
    let v17 = F0[-1];
    ({"e":v17,} = v17);
    return v17;
}
F0.constructor = f16;
const v18 = new F0();
function f19(a20, a21) {
    const v22 = /\c4a.[(x)(x)(x)\4*(x)(x)(x)\3*]/gmy;
    const v23 = /G(a)\1a+8?/vdimsy;
    let v24;
    try { v24 = new a21(); } catch (e) {}
    let v25 = -198895178;
    class C26 {
        static #n(a28, a29) {
            function F30(a32, a33, a34, a35) {
                if (!new.target) { throw 'must be called with new'; }
            }
            v23[243] -= v24;
            ++v25;
            F30(v22);
        }
    }
    return v18;
}
Object.defineProperty(v18, "constructor", { configurable: true, value: f19 });
const v38 = new F0();
const v39 = new F0();
class C40 extends F0 {
    static toString(a42, a43) {
        const v44 = typeof this;
        const v46 = v44 === "bigint";
        "bigint" | v44;
        ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
        v18[v39];
        v38 in a43;
        return v46;
    }
    set b(a56) {
        try {
            v38.toString = a56;
        } catch(e57) {
        }
    }
}
C40.constructor = f19;
const v58 = new C40();
const v59 = new C40();
function f60() {
    const v61 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
    v61[5] = v61;
    return C40;
}
v59.toString = f60;
const v62 = v59?.constructor;
try { new v62(); } catch (e) {}
function f64(a65) {
    return F0;
}
class C66 extends f64 {
    c;
    static [v39];
}
const v67 = new C40();
const v68 = v67?.constructor;
v68.constructor = f60;
try { new v68(); } catch (e) {}
class C70 {
    constructor(a72, a73, a74) {
        a73.valueOf = f60;
        a74.prototype = a74;
        const v75 = a73?.constructor;
        Object.defineProperty(v75, "constructor", { enumerable: true, value: f64 });
        try { new v75(); } catch (e) {}
        const v77 = a74?.constructor;
        try { new v77(); } catch (e) {}
        a72[v39] = a74;
        -4294967296 + -4294967296;
        function f83(a84, a85, a86, a87) {
            function f88() {
                const o92 = {
                    valueOf(a90, a91) {
                        return f83;
                    },
                };
                o92.valueOf();
                return a87;
            }
            f88();
            f88();
            return f83;
        }
        const v97 = +v59;
        v97 | v97;
        class C100 {
            [10000] = 10000;
            static toString(a102) {
            }
        }
        new C100();
        const v104 = +v59;
        const v105 = -v104;
        v105 << v105;
        -4294967296 && v59;
        +v97;
        const v109 = Math.fround(v104);
        const v111 = /0j/vds;
        try { v111.compile("Di0", "Di0"); } catch (e) {}
        WeakSet.prototype;
        v109 / v109;
        Math.random();
    }
}
const v117 = new C70(v39, v58, v38);
v117.e = v117;
v117.e = v117;
const v118 = new C70(v58, v59, C40);
v118.length;
new C70(v18, v58, v18);
function f121(a122, a123) {
    a123.prototype = a123;
    const o133 = {
        "d": a122,
        "c": v38,
        1724: v118,
        __proto__: C70,
        "h": a122,
        [v67](a125, a126, a127, a128) {
            try {
                a127.fuck(this, 775386.477315817, undefined);
            } catch(e132) {
            }
            return a127;
        },
    };
    return o133;
}
f121(v38, C70);
f121(C40, v38);
f121(v18, v39);
Int32Array[2] = v67;
Int32Array.length;
const v139 = new Int32Array(Int32Array, Int32Array, Int32Array);
v139.toString = f64;
([-3,2147483648,127,18127,7,5]).toLocaleString();
class C143 extends SharedArrayBuffer {
}
Math.expm1(~v139);
