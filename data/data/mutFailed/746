function f1(a2) {
    const o3 = {
        [a2]: a2,
    };
    return a2;
}
const v4 = new Set();
v4[Symbol.toPrimitive] = f1;
let v7 = [v4,Set,v4,v4,Set];
const v8 = [v7,v7,Set,Set];
v8.valueOf = Symbol;
const v9 = [v8,Set,v4,Set,Set];
class C10 extends Set {
    n(a12, a13) {
        let v14;
        try { v14 = this(Set, v9, v7, Set); } catch (e) {}
        const v16 = Symbol.toStringTag;
        v4[v16] = v7;
        let [v17,,v18] = a12;
        try {
            new Int16Array(512);
            let v24;
            try { v24 = new a12(v14, Uint16Array, Uint16Array, v9); } catch (e) {}
            v16.__proto__;
            Symbol.split;
            const o27 = {
            };
            try {
                o27.h = v16;
            } catch(e28) {
            }
            try {
                const o29 = {
                };
                o29.h = v16;
                o29.b = v18;
            } catch(e30) {
            }
            try {
                const o31 = {
                };
                o31.h = v16;
                o31.b = v18;
                o31.d = v24;
            } catch(e32) {
            }
            try {
                const o33 = {
                };
                o33.h = v16;
                o33.b = v18;
                o33.d = Set;
            } catch(e34) {
            }
            const v35 = new Uint16Array(3);
            v35.indexOf();
            const o37 = {
            };
            v7.findLast(v14, o37);
        } catch(e39) {
        }
        return v14;
    }
    static {
        this.toString = Symbol;
        super.size;
        let v43 = -8;
        Math.hypot(--v43);
        Math.sin(v43);
        this[Symbol.hasInstance];
    }
}
new C10();
new C10();
new C10();
function f53() {
    return v9;
}
f53.toString = Symbol;
function f54() {
    return v4;
}
class C55 extends C10 {
    static {
        v7 += v7;
        const v57 = C10 % v8;
        v57 && v57;
        f53 ^= f53;
    }
    static get a() {
        super.size &&= Set * f53;
        e = f54();
        try {
            this.fuck(this, v8, f53, "-256");
        } catch(e64) {
        }
        return Set;
    }
}
new C55();
new C55();
new C55();
const v70 = new Uint16Array(5);
const o74 = {
    "c": Uint16Array,
    set g(a72) {
    },
    39: v70,
};
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
    } catch(e78) {
    }
}
class C79 {
    n(a81, a82) {
        let v83 = 10;
        for (;
            v83--;
            (() => {
                f54 >> v83;
                try {
                    v70.valueOf = f54;
                } catch(e86) {
                }
            })()) {
            try {
            } catch(e87) {
            }
        }
    }
}
const o90 = {
    "execution": "async",
};
o90.type = Uint16Array;
gc(o90);
