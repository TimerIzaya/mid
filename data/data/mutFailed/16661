[1,536870889,4294967297,-9,1073741825,65536,-30038,0,-2147483647];
const v1 = [-128,-58395,-64830,1073741824,2,-16];
const v2 = [10558,47881,11,-225553021];
const v3 = /a{0,1}?m/gvis;
/a{0,1}?/gudim;
/4\p{Script=Greek}/gudis;
const v6 = v2 instanceof v2;
const o9 = {
    "maxByteLength": 841957965,
};
const v11 = new SharedArrayBuffer(0, o9);
new Float32Array(v11);
[-7.181203265081399e+307,-1000.0,-1.0,-915878.1052490403,5.58103155585902e+307,2.5325733540463364,0.7257013854494929,2.2250738585072014e-308];
const v15 = [1.2252373435206772e+308];
const v16 = [-1e-15,-5.15306713206205e+307,0.00354861357362779,0.1598384588342474,-223961.40965217468,-121242.10823007987];
class C17 {
    static o(a19, a20, a21, a22) {
        try {
            v1.toLocaleString();
        } catch(e24) {
        }
        return v2;
    }
    b = v2;
    c = v2;
    [v2] = v15;
    static get c() {
        this[o9] = v3;
        C17 = this;
        return v6;
    }
}
const v26 = new C17();
const v27 = new C17();
v27.b = v27;
const v28 = new C17();
function f29() {
    function f30(a31, a32) {
        try { a31(a31); } catch (e) {}
        try { a32.call(v28); } catch (e) {}
        a32(f30);
        return f30;
    }
    new Promise(f30);
    return Promise;
}
try { f29(); } catch (e) {}
%PrepareFunctionForOptimization(f29);
try { new Date(v28, v1, v1, v1, v1, v1, v27); } catch (e) {}
const v42 = new Date();
v42.setFullYear(-12);
try { new Uint8Array(f29, v16, f29); } catch (e) {}
const v47 = new Uint8Array(127);
const v48 = v47.fill();
try { v48.with(Date, v26); } catch (e) {}
f29();
%OptimizeFunctionOnNextCall(f29);
f29();
const o54 = {
    "maxByteLength": 256,
};
const v56 = new SharedArrayBuffer(127, o54);
new Uint32Array(v56);
