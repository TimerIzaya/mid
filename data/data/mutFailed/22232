const v3 = [-16];
function f4(a5) {
    new Int16Array(7);
    new Uint16Array(9);
    new Float64Array(10);
    return -1104291129;
}
v3[Symbol.toPrimitive] = f4;
const v17 = [-128,10];
const o18 = {
    [v3]: v17,
};
function F19(a21) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = -1104291129;
    try {
        this.b = a21;
    } catch(e22) {
    }
    try {
        this.c = a21;
    } catch(e23) {
    }
}
const v24 = new F19(-48442);
const v25 = new F19(v24);
const v26 = new F19(F19);
const v27 = [-65537,268435456,1000,582398684,1073741823,-2];
const v28 = [57530,-9,-1625880219,-591599462,-2];
[];
function f31() {
    let v32 = 12;
    const v33 = v32--;
    class C34 {
        constructor(a36) {
            Uint16Array(v32);
        }
    }
    v33.constructor.call();
    return Uint16Array;
}
[[-1104291129,v24,v25,[-48442,v25,[663689575,-2147483647],v28,-48442]],v27,-48442,v25,v28];
function f44() {
    for (let [i54, i55] = (() => {
            class C45 {
                constructor(a47, a48) {
                    try {
                        this.fuck(a48, "function");
                    } catch(e51) {
                    }
                }
            }
            return [0, v26];
        })();
        (() => {
            const v56 = v26 < i55;
            function f57(a58, a59, a60, a61) {
                const v62 = a59 >>> a59;
                let v63 = v62 >>> v62;
                v63--;
                return v63;
            }
            f57();
            %OptimizeFunctionOnNextCall(f57);
            return v56;
        })();
        i55--) {
    }
    return v25;
}
const o72 = {
    "maxByteLength": f31,
};
class C73 {
}
const o76 = {
    "maxByteLength": 536870889,
};
const v78 = new SharedArrayBuffer(217, o76);
([1.479450712344466]).join();
(217).__proto__;
class C83 {
    #m(a85, a86, a87) {
        for (const v88 in this) {
            (delete v88?.h).__proto__;
        }
    }
}
class C91 extends C83 {
    static set e(a93) {
        this > a93;
    }
}
let v95 = new Uint8Array(v78);
v95[Symbol.toPrimitive] = Symbol;
Float64Array.toString = f44;
new Int8Array(5);
v95 &= -48442;
