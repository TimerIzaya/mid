const v0 = [-13,21529,536870888];
const v1 = [1073741823,-359449404,127,-2147483649,64,-268017024,-12];
~10;
const v4 = [1073741824,1073741823,1376142744,1073741825];
for (let v5 = 0; v5 < 5; v5++) {
    function f6() {
        try {
            v4.some();
        } catch(e8) {
        }
        return v5;
    }
    f6();
    %OptimizeFunctionOnNextCall(f6);
}
const v10 = [61163,512,-65536,8,569272530,-12,-4294967295,11];
const v11 = [v1];
const v12 = [v11,v0,v11,v0,v1];
[v12,v11,v11,v10];
const v14 = [0.0,-1000.0];
const v15 = [738205.9588006306,1.0,1.0,9.920291945367795e+305,-7.405393141362174,4.680255480483364e+307,0.0,0.43225361890895553,1.4694149539479777e+308,2.2250738585072014e-308];
[291432.6058798295,3.0,-1000000000000.0,5.0];
const v19 = new Uint8Array(1169);
v19[256] = v19;
try { ("9007199254740991").match(v0); } catch (e) {}
("a")[0];
class C26 {
    ["9007199254740991"] = "a";
}
C26.e = C26;
new Float64Array(255);
-2346;
new Uint32Array(2346);
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
    ~a36;
}
try { new F34(v15); } catch (e) {}
const v39 = new F34(536870889);
with (v39) {
    let v40 = 10;
    for (; v40--;) {
    }
}
for (let [v43,...v44] of "atan2") {
}
function f45() {
    for (let v46 = 0; v46 < 5; v46++) {
        v46 & f45;
    }
    ["e","e","e","e","e"];
    for (let v50 = 0; v50 < 5; v50++) {
        const v54 = Array(36862, "e").reverse();
        try { v54.copyWithin("e"); } catch (e) {}
    }
    return f45;
}
const v58 = new Float32Array(2);
const o72 = {
    set d(a60) {
        for (let v61 = 0; v61 < 25; v61++) {
        }
    },
    o(a63) {
        const o65 = {
        };
        gc(o65);
    },
    m(a68) {
    },
    set d(a70) {
        for (let v71 = 0; v71 < 25; v71++) {
        }
    },
};
try { Uint32Array.bind(v58); } catch (e) {}
const o75 = {
};
class C76 {
}
const v77 = C76?.toString;
try { new v77(); } catch (e) {}
let v79 = new C76();
const v80 = v79?.constructor;
try { new v80(); } catch (e) {}
function f83(a84, a85, a86, a87) {
    a87 >> a87;
    const v89 = v79++;
    let v90 = a86 % a86;
    v90--;
    const o92 = {
    };
    o92.f = o92;
    try { (-9223372036854775808).n(v90, v89); } catch (e) {}
    return o92;
}
let v94;
try { v94 = f83.bind("a"); } catch (e) {}
const o95 = {
};
const v98 = 1842642860 % !o95;
for (let v99 = 0; v99 < 500; v99++) {
    const v100 = f83(v79, C76, -9223372036854775808, v99);
    v100.f = v100;
}
Proxy.name;
class C103 {
    constructor(a105) {
        for (let v106 = 0; v106 < 32; v106++) {
            "p" & v106;
            for (let v109 = 0; v109 < 5; v109++) {
                function f110() {
                    return f110;
                }
            }
            this.p16;
            try { a105(); } catch (e) {}
        }
    }
    b;
    /*
    constructor(a114, a115, a116) {
        function f117(a118, a119, a120) {
            v14.copyWithin();
            let v123 = 0;
            for (let i = 0; i < 25; i++) {
                try {
                    const o124 = {
                    };
                    o124.c = v94;
                } catch(e125) {
                }
                try {
                    const o126 = {
                    };
                    o126.h = v12;
                    o126.f = "atan2";
                } catch(e127) {
                }
                v123++;
            }
            try {
                f117(a115, a116, [-268435456]);
            } catch(e131) {
            }
            this >> -268435456;
            return -268435456;
        }
        f117();
    }
    */
}
const v134 = new Proxy(Uint32Array, o75);
v134.d = v134;
o72["o"](o72, Uint32Array, "o", "o", v134);
const v139 = this?.ReferenceError;
try { new v139(v15); } catch (e) {}
const o144 = {
    get b() {
        const v142 = Array.constructor;
        v142(Array, v142, v142, Array);
        return this;
    },
};
o144.a = o144;
const v146 = new Int32Array(v58, 2);
v146[1] = v146;
const v147 = v58;
new v98();
function f149() {
    return Math.round(f149);
}
%OptimizeFunctionOnNextCall(f149);
const v152 = v146.fill(...v147);
try { v152.entries(); } catch (e) {}
let v154;
try { v154 = v152.lastIndexOf(v152); } catch (e) {}
v154 - v154;
const v157 = new Int32Array();
[v157];
function f159() {
    const o161 = {
        get b() {
            return f159;
        },
    };
    return o161;
}
