new Float32Array(3821);
new Uint8ClampedArray(11);
function f9(a10, a11, a12, a13) {
    for (let v14 = 0; v14 < 5; v14++) {
        0 == 5n;
        const v21 = new Int16Array(2);
        v21.lastIndexOf(2.220446049250313e-16);
        const v24 = new Uint8ClampedArray(129);
        const v25 = [-1235077344,-4096,50383815,-8476,-9007199254740991];
        class C27 extends Set {
        }
        new C27(v25);
        const v31 = new Int32Array(1450);
        class C32 {
            [Uint8ClampedArray] = v31;
            static valueOf(a34, a35, a36) {
                new a36();
            }
            static a = v24;
        }
        const v38 = new C32();
        const v39 = new C32();
        const v40 = new C32();
        try {
        const t0 = 1450;
        t0(v40, v40);
        } catch (e) {}
        function f42() {
            try { (0).log2(0); } catch (e) {}
            9007199254740991n * 9007199254740991n;
            (~9007199254740990).constructor;
            function f50(a51) {
                this.c = v38;
            }
            v39[2147483647] = v31 << this;
        }
        const v55 = [];
        const o56 = {
            "arguments": v55,
            "type": "function",
        };
        new Worker(f42, o56);
    }
    return a12;
}
f9(3821, 3821, 5n, f9);
const t45 = [256,-4294967297,536870912,-8,255,-2670];
t45.length = 0;
try {
    function f61() {
        return f61;
    }
} finally {
}
new BigInt64Array(15);
[4294967297,4096];
[-11];
[536870912,257,-2071120806,536870887,43302,1024,9007199254740990,10,-8];
const v66 = [-882453.1668433619,-2.0];
const v69 = new BigInt64Array(9);
let v70;
try { v70 = v66.toLocaleString(v69); } catch (e) {}
v70[9];
("entries").toUpperCase();
parseInt([-5.034735835956977e+307,-385.25474675985527]);
