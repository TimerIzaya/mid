const v0 = [-1578154478];
const v1 = [-536870912,540045297,24624,-2147483649,-16,10,1339250122,12];
[-2059199476,0,-3,-1];
const v3 = /R/umsy;
const v4 = /a\b!/gv;
const v5 = /\x60/gd;
function f9() {
    return v0;
}
function f13(a14, a15, a16, a17) {
    const o31 = {
        "f": v4,
        get g() {
            f9();
            %PrepareFunctionForOptimization(f9);
            let v20;
            try { v20 = this.all(this); } catch (e) {}
            try {
                super.getSeconds(v20, a16, -14n);
            } catch(e22) {
            }
            f9();
            f9();
            %OptimizeMaglevOnNextCall(f9);
            try {
                new f9();
            } catch(e26) {
            }
            f9();
            return v1;
        },
        ...v0,
        "d": a17,
        "b": a15,
        ...a17,
    };
    return o31;
}
const v32 = f13(7996, v3, v1, f9);
f13(7996, v5, v0, v0);
let v34 = f13(44286, v4, v0, 44286);
for (let v35 = 0; v35 < 25; v35++) {
    const v36 = [601759695];
    const v37 = [1073741824,1073741823,1376142744,1073741825];
    function f38(a39, a40, a41, a42) {
        try { v37["find"](..."find", a42, ...v36, ...v37); } catch (e) {}
        let v47 = Symbol.isConcatSpreadable;
        for (const v48 in v37) {
            536870889 ** ++v47;
            v34 = v32;
        }
        const v51 = v47.description;
        const v52 = Array(a41);
        try { v52.groupToMap(v47, v51, f38, v52, v47); } catch (e) {}
        return v36;
    }
    for (let v54 = 0; v54 < 5; v54++) {
        f38();
    }
}
