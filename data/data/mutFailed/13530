const v2 = new Int16Array(4096);
v2[5] = Int16Array;
v2[2147483648] = v2;
const o3 = {
};
const v5 = new Proxy(v2, o3);
new Uint32Array(1500);
new Int32Array(1358);
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1358;
    } catch(e17) {
    }
    try {
        this.f = 1358;
    } catch(e18) {
    }
    try {
        this.e = Int32Array;
    } catch(e19) {
    }
}
new F12(Int32Array, 4096, 4096);
const v21 = new F12(Uint32Array, 4096, 4096);
new F12(v21, 1500, 4096);
new Uint32Array();
const v31 = new Uint8Array(4096);
const v33 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
v33[16] = 2.220446049250313e-16;
delete v33[2.0];
new Uint8Array(5);
let v39 = 10000;
/a\b!+/vdiy;
/(a\1)/gvdimy;
const v44 = /4ka{1,2}?lX3+/guimy;
const v50 = new Int8Array(1487);
try {
    v21.b = Int32Array;
} catch(e53) {
}
o3[2728045423] = v39;
new Int32Array(2147483648, v31, 1358, -1024);
new BigUint64Array(4096);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    function f66(a67) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f66 });
    try {
        v39++;
        let v74 = -1e-15;
        BigInt64Array.atan2(v74++, -175950080);
        this.b = 1073741825;
    } catch(e77) {
    }
}
let v78 = new F64();
let v79 = new F64();
v79.a = -10809n;
({"a":v79,"b":v79,...v78} = v79);
const o83 = {
    "execution": "minor",
    "execution": "minor",
    "execution": v78,
    "type": "minor",
};
gc(v79);
new F64();
new Uint8ClampedArray();
[-10809n];
[Uint32Array,Int8Array,-1053939857,[v44,"async"]];
v50[v5] = BigUint64Array;
let v93 = 37920;
let v94 = -1.7473320236528222e+308;
++v94;
Math.asinh(Int8Array);
v93--;
~v93;
function f100() {
    Int8Array();
    class C104 {
        #valueOf(a106, a107, a108, a109) {
        }
    }
    return Uint32Array;
}
%OptimizeFunctionOnNextCall(f100);
