new Int8Array(7);
new Uint8Array(1959);
new Uint16Array(225);
[-50433,-1615204132,9];
[-268435456,268435441];
for (let v11 = 0; v11 < 25; v11++) {
    function f12(a13, a14, a15, a16) {
        try { a14(); } catch (e) {}
        const v19 = undefined >> undefined;
        const v21 = new Set();
        const v22 = v21.add();
        const v25 = typeof v19 === "symbol";
        return [v22,v25,v25];
    }
    for (let v27 = 0; v27 < 10; v27++) {
        f12(v27, f12);
    }
}
[65536,-41920,16,3,-8,512,4,8];
new Int16Array(257);
new Uint32Array(256);
Math.pow(-15 >> 8798, -3.0);
new Uint32Array(0);
let v46 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
v46 &= v46;
class C47 {
}
async function f48(a49, a50, a51, a52) {
    (await C47).call();
    return f48;
}
f48.call();
class C57 {
}
class C59 {
    static {
        function f61() {
            return this;
        }
        function f62(a63) {
            return f62;
        }
        Object.defineProperty(this, 256, { configurable: true, get: f61, set: f62 });
    }
    static [256];
}
class C64 extends C57 {
    static [-2];
    toString(a66, a67) {
        const t49 = this.constructor;
        new t49();
        +this;
    }
}
new C64();
const v74 = new WeakMap();
const v75 = /8[\cA]v/uisy;
function f76(a77, a78) {
    v74.set([]);
    ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
    const t58 = DataView.constructor;
    t58();
    const o90 = {
        "execution": "async",
        "type": "minor",
    };
    DataView(o90);
    new Int8Array(1073741823);
    [4294967297,-4096,3];
    function f96(a97, a98) {
    }
    [];
    const o102 = {
        "type": "function",
    };
    new Worker(f96, o102, o102, "async", Symbol);
}
try { f76.apply(-4294967296); } catch (e) {}
f76();
v75[Symbol.toPrimitive] = f76;
[3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
