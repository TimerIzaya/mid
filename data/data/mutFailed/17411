const v0 = [129,1965,7,6976,-58609,9223372036854775807,-256,-2147483647,-9223372036854775807,16];
const v1 = [-2034255524,0,-849125271,-821962593,2147483647,-606359114];
const v2 = [219132335,1073741824,-64351,268435440,6];
let v3 = 13;
class C6 {
    constructor(a8, a9) {
        let v7 = this;
        %VerifyType(v2);
        function F10(a12, a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a13;
            } catch(e15) {
                ({"c":a13,"g":e15,"h":e15,...v7} = this);
                v2 & C6;
                e15[Symbol.toStringTag] = v0;
            }
            try {
                this.h = a8;
            } catch(e21) {
            }
            v3 >>>= -8;
            Math.sin(-268435456);
            const o30 = {
                get a() {
                    class C24 {
                        constructor(a26, a27) {
                        }
                    }
                    eval();
                },
            };
        }
        new F10(a8, v7, -2147483647);
        new F10(a9, v1, -8);
        new F10(a8, v0, a8);
    }
}
new C6(v3, C6);
new C6(-8, v2);
function F36(a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    a39 - a39;
    const v42 = this.constructor;
    try { new v42(F36); } catch (e) {}
    this.a <<= 4096;
}
new C6(v3, v1);
new Int32Array(175);
const v52 = new Int8Array(268435456);
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this.constructor;
    try { new v57(); } catch (e) {}
    let [v59,,v60,v61] = v52;
    const v66 = +v3;
    -11 % v3;
    Math.log1p(this);
    Math.round(v66);
    this.a = Uint16Array;
}
new v52(F53, Uint16Array);
new F53(Uint16Array, Uint16Array);
