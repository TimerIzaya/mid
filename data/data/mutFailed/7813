[-14,2147483649,-27810,-2126431769,1139208563,-60586,550888604,268435456];
const v1 = [-63558,129,-1158942356,6,2147483647,-11459,7,-9007199254740990];
function f2(a3) {
    class C4 {
    }
}
Object.defineProperty(v1, "p15", { configurable: true, enumerable: true, set: f2 });
const v5 = [-4];
v5.valueOf = f2;
for (let v6 = 0; v6 < 32; v6++) {
    v1["p" + v6] = v6;
}
const v11 = new Int8Array(2338);
Object.defineProperty(v11, "h", { writable: true, configurable: true, value: 2338 });
v11.h = v11;
93 <= 93;
const v15 = new Uint32Array(93);
function f16(a17) {
    for (let v18 = 0; v18 < 5; v18++) {
        Math.atanh(v18);
    }
    return a17;
}
v15.toString = f16;
const v22 = 255 >> 255;
v22 << v22;
Int16Array.g = Int16Array;
Int16Array.g = Int16Array;
const v25 = new Int16Array(255);
let v26;
try { v26 = v25.slice(v5, v15); } catch (e) {}
try { v26.subarray(255, v22); } catch (e) {}
class C29 {
}
C29.d = 93;
C29.d = C29;
C29.length = C29;
const v30 = new C29();
const v31 = v30?.constructor;
let v32;
try { v32 = new v31(); } catch (e) {}
v32.constructor = f2;
const v33 = v32?.constructor;
class C34 {
    10;
}
new C34();
new C34();
new C34();
try { new v33(); } catch (e) {}
class C39 extends WeakMap {
    536870887;
}
function f40() {
    function f41(a42, a43) {
        function f44() {
            new Uint16Array(209);
        }
        class C48 extends f44 {
        }
        for (const v49 in C48) {
        }
        return v32;
    }
    return f41;
}
function f50(a51) {
    [];
}
Object.defineProperty(C39, Symbol.toPrimitive, { configurable: true, get: f40, set: f50 });
C39.length = C39;
const v55 = new C39();
class C56 {
}
C56[Symbol.toPrimitive] = f2;
try { C56.bind(93); } catch (e) {}
v30[C39];
const v61 = [-1.0];
function f62(a63) {
    const o64 = {
        ...a63,
    };
    return C29;
}
v61[Symbol.toPrimitive] = f62;
try { v61.map(v55); } catch (e) {}
try { v61.toString(); } catch (e) {}
v61 * C56;
