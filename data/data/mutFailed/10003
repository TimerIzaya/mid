function f0() {
}
class C1 extends f0 {
    get c() {
        try { this[C1]("n"); } catch (e) {}
        return "n";
    }
    p() {
        return -65260n;
    }
    static [f0];
    f = f0;
    [f0] = f0;
}
const v11 = ([-6.672391061426152e+307])["pop"]();
~v11;
new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
new C1();
const v17 = new C1();
let v18;
try { v18 = v17.f(); } catch (e) {}
const v19 = new v18();
let v20;
try { v20 = v19.f(); } catch (e) {}
let v22 = -0.0;
v22++;
4.464921118585782 >>> 4.464921118585782;
4.464921118585782 >>> 4.464921118585782;
const v28 = [-1000000000000.0,1.6625612869249247e+308,1.0,-972.0943312068566,5.0,576.0306192795115,-1.7976931348623157e+308,9.842997438382366,2.0,-1000000.0];
let v29;
try { v29 = v28.fill(4.464921118585782); } catch (e) {}
const v30 = [1e-15,-2.0];
v11.g = v30;
[0.669628130120987,472409.55858858814,188.9607633136875,4.0];
try { Int32Array(Int32Array, v30, 4.464921118585782); } catch (e) {}
new Int32Array(1);
new Float64Array(151);
new Int32Array(8);
function f42() {
    for (let v43 = 0; v43 < 5; v43++) {
        for (let v44 = 0; v44 < 5; v44++) {
            let v46;
            try { v46 = Math.expm1(v20); } catch (e) {}
            v46 >> v46;
            Math.atanh(v44);
        }
    }
    return f42;
}
f42();
try { f42(); } catch (e) {}
%OptimizeFunctionOnNextCall(f42);
const v51 = v29();
try { v51(); } catch (e) {}
