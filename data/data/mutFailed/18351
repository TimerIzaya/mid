const v2 = new Int32Array(0);
const v4 = new Int8Array();
v4[5] = v2;
let v5;
try { v5 = v2.findIndex(v4, v4); } catch (e) {}
try { new v5(Int32Array, v4); } catch (e) {}
const o7 = {
};
try {
    o7.f = Int32Array;
} catch(e8) {
}
try {
    const o9 = {
    };
    o9.f = Int32Array;
    o9.a = o9;
} catch(e10) {
}
try {
    const o11 = {
    };
    o11.f = Int32Array;
    o11.a = v5;
    o11.g = Int32Array;
} catch(e12) {
}
try {
    const o13 = {
    };
    o13.f = Int32Array;
    o13.a = v5;
    o13.c = Int32Array;
} catch(e14) {
}
const v17 = v4.buffer.slice(-9726);
class C18 {
}
const v19 = new v17();
const v20 = v19.constructor;
for (let i22 = 0, i23 = v20; i22 < i23, -9726;) {
}
const v31 = new BigUint64Array(4);
new Uint8Array(4);
const v38 = new Uint16Array(4);
v38.includes(true, -706152110);
function f41() {
    return 0;
}
[10,255,0,-1024,0,-9223372036854775807];
const o43 = {
    __proto__: o7,
    "c": v31,
    "h": v2,
};
[536870888,-43282,268435456,11,1793424760,9223372036854775807,9,6];
[10,31415192,-1449445143,0,-62501,268435439,11,-4096,-33598];
[-4294967297,1,-268435456,-5,10000,-1896809539];
[34824,-1,4294967297,268435441,536870912];
[16,611437797,268435439,-1024,380621132,4096,0,8];
const v49 = [748666.7832804511,3.0];
class C51 extends Float64Array {
    static #p(a53, a54) {
    }
    static {
        for (let v56 = 0; v56 < 25; v56++) {
            for (let v61 = 0; v61 < 25; v61++) {
                eval();
                v61 < v61;
                new BigUint64Array(3375);
            }
        }
    }
    [v49];
}
try {
    new C51();
} catch(e69) {
}
Int32Array / v2;
new C51();
