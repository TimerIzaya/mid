const v0 = /KvXl/udimsy;
const v1 = /a[a-z]V()/gvimy;
const v2 = /[\cA](?!(a))\1/udims;
const v3 = [v2,v1,v0];
const v4 = [v3];
const v5 = [v4,v0,v3];
new Map();
function F8(a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v4;
    try {
        this.b = v0;
    } catch(e13) {
    }
    try {
        this.g = v0;
    } catch(e14) {
    }
}
new F8(v0, v5, v4);
new F8(v2, v4, v5);
new F8(v2, v5, v4);
const v20 = new Int32Array(1024);
for (const v21 of v20) {
    const o23 = {
    };
    function f24() {
        return gc;
    }
    Object.defineProperty(o23, "execution", { writable: true, configurable: true, get: f24 });
    gc(o23);
    new SharedArrayBuffer(1024);
}
