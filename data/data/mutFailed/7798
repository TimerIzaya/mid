let v4;
try { v4 = ("1704396501").anchor(4294967297); } catch (e) {}
try { ("-6").trimLeft(); } catch (e) {}
const v8 = [127,-65536,4294967297,-65536];
const v9 = ["1704396501",v8,-65536];
let v10;
try { v10 = v9.map(-65536); } catch (e) {}
const v11 = [v9,"undefined"];
2.0 & 2.0;
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    a18[1];
    try { a18.sort(4294967297); } catch (e) {}
    let v22;
    try { v22 = a19.slice(v8, a18); } catch (e) {}
    v22.length;
    try {
        this.d = a18;
    } catch(e24) {
    }
    try {
        this.b = a19;
    } catch(e25) {
    }
}
try {
    const t26 = "1704396501";
    t26.length = 127;
} catch(e26) {
}
try {
    v9.splice(-65536);
} catch(e28) {
}
try { F16(-65536, 2.0); } catch (e) {}
new F16(v9, "-6");
new F16(v8, v9);
v11 in v10;
const v33 = v8[v4];
let v34;
try { v34 = new v33(127, v10, v9); } catch (e) {}
try {
    v8.a = v4;
} catch(e35) {
}
const v36 = new F16(v8, "1704396501");
v36.d = v36;
let v37 = 0.7556184011642024;
const v38 = v37--;
-1.0 - -1.0;
1447991408 >>> 1447991408;
const v46 = -536870912 & -536870912;
v46 === v46;
function f49() {
    try { v34(arguments, v10, arguments); } catch (e) {}
    return arguments;
}
f49(v46, v38);
-9007199254740990;
const v58 = 9007199254740990 >> 9007199254740990;
v58 >> v58;
9n / 9n;
9007199254740990 | -9007199254740990;
