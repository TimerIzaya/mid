function f4(a5) {
    const o6 = {
        "c": a5,
        16: -4.0,
        1073741824: a5,
    };
    return o6;
}
const v7 = f4();
const v8 = f4(-5.0);
function f9(a10, a11, a12, a13) {
    const o14 = {
        [f4]: a12,
        "c": v8,
        ...a13,
    };
    return f9;
}
f9(v7, -4.0, -869.5873935050056, v8);
const v18 = new f4([536870887,-42204,-17288903,-3,9007199254740991,7]);
v18.constructor;
function f21(a22) {
    return a22;
}
class C23 {
}
const v24 = new C23();
const v25 = [C23,C23];
const v26 = [v24,v25,v25];
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    a31.groupToMap(f21);
}
new F27(2.2250738585072014e-308, F27, v26);
const v37 = new BigInt64Array(11);
v37.lastIndexOf("number");
new Int16Array(128);
-Infinity;
this.setTimeout();
function f49() {
    return -536870912;
}
const o50 = {
    "defineProperty": f49,
};
const v52 = new Proxy("h", o50);
v52.b = v52;
new BigInt64Array(101);
new Uint16Array(255);
new Int16Array(590);
const v61 = /KvXl/udimsy;
const v62 = /[\cA](?!(a))\1/udims;
const v63 = [v62];
const o66 = {
    "execution": "sync",
};
gc(o66);
const v68 = [v63];
function F69(a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = this.constructor;
    try { new v74(v62, v63); } catch (e) {}
    a72[2] = a72;
}
new F69(v61, v68);
new F69(v62, v63);
const v80 = new Int32Array(1024);
for (const v81 of v80) {
    const o83 = {
    };
    gc(o83);
    const v85 = [];
    class C86 {
        constructor() {
            delete v85[1073741824];
        }
    }
}
