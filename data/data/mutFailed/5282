[-2219,128,-4294967297,-1450710410,-17633,-4294967296,1752497953,3,62304,-2];
const v1 = [2147483649,1073741824,-7,-53927,268435456,-9007199254740992,-1024,6,9];
function f3(a4) {
    let v6 = new Uint8Array();
    v6 &= this;
    return a4;
}
Symbol[Symbol.iterator] = f3;
new Int32Array(Symbol);
const v12 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
v12[Symbol.toPrimitive] = Symbol;
v12.g = v12;
let v15 = -1;
v15--;
class C17 {
    static #e;
    m(a19, a20, a21, a22) {
        v12.#e;
        a20.#e = v15;
    }
}
const v30 = [-9007199254740990,-2,2147483648,-13,1173405290,4096,2];
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    function f33(a34, a35) {
        a35 === a35;
        const v38 = [536870888,4096,-11];
        const v41 = [31909n];
        return Reflect.apply(v38.includes, "symbol", v41);
    }
    this.constructor = f33;
    const v44 = this?.constructor;
    try { new v44(); } catch (e) {}
}
try { F31(); } catch (e) {}
const v47 = new F31();
const o48 = {
    "h": v47,
    "e": v30,
};
o48.b = o48;
-(-128);
16 != 16;
const o61 = {
    __proto__: null,
    valueOf() {
        return null;
    },
};
new BigInt64Array(16);
function f65() {
    [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
    const v68 = ([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
    let v69;
    try { v69 = v68.search(f65); } catch (e) {}
    return v69;
}
const v70 = new Uint32Array(1543);
try { v70.with(v12, 1543); } catch (e) {}
try { Uint32Array.from(v1); } catch (e) {}
const v75 = new Uint32Array(7);
Object.defineProperty(v75, "toString", { configurable: true, enumerable: true, value: Symbol });
v75[4] = v75;
const o91 = {
    valueOf() {
        class C78 {
        }
        Symbol.toPrimitive.description.codePointAt(C78);
        const v83 = /gk4b*/vmsy;
        v83.flags = v83;
        2 * 2;
        const v88 = new Uint16Array(2);
        const v89 = new Uint16Array(v88);
        for (const v90 in v89) {
        }
        Object.defineProperty(v83, -9223372036854775808, { enumerable: true, set: gc });
        return v83;
    },
};
function f92(a93) {
    9007199254740991n * 9007199254740991n;
    return Uint32Array;
}
o91[Symbol.toPrimitive] = f92;
for (let v98 = 0; v98 < 5; v98++) {
    Math.round(o91);
}
function f101() {
    return f101;
}
class C102 extends f101 {
    constructor(a104) {
    }
}
C102.b = C102;
try { new C102(); } catch (e) {}
