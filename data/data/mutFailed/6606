const v6 = [0.71465078532354,-2.2250738585072014e-308,1.0,-2.2250738585072014e-308,2.2250738585072014e-308,-620.8633845139873,0.0,-1.0,3.3358719500528515];
const v7 = [-7.462188141503825,-3.070207201828062e+307,0.6861416475431791,1000000000.0,-3.0];
const o13 = {
    ...v6,
    [Set](a10, a11, a12) {
    },
    "b": v7,
};
const v14 = [4.0,0.7094008736728812,1.0,-Infinity,751.782637596797,9.135402319209974e+307];
function f15(a16, a17) {
    class C18 {
    }
    new C18();
    return v14;
}
Object.defineProperty(v14, "toString", { enumerable: true, value: f15 });
const v20 = [-2.2250738585072014e-308,1000.0,-3.5215366779354894e+307,-2.0,2.220446049250313e-16,-Infinity];
function f22() {
    Array.__proto__ = this;
    return gc;
}
const v25 = [-639.8114780526407,-1.26650346280414e+308,25.97295815994903,659.4805837386336];
let v26 = Uint8Array;
function f27() {
    Object.defineProperty(o13, 9007199254740990, { enumerable: true, set: f15 });
    v7[2147483649] <<= 9007199254740990;
    return gc;
}
v26.valueOf = f27;
new v26(v7);
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f22;
    const v35 = this.constructor;
    let v36;
    try { v36 = new v35(F29, v35, F29, F29); } catch (e) {}
    const v38 = v36 >>> 38445;
    38445 >> v36;
    let v40 = v38 * v38;
    v40--;
}
new F29(F29, F29);
class C43 {
    static a;
    [4] = v20;
    static [v14] = 1073741825;
    #h;
    static 2147483648 = v14;
    constructor(a45, a46) {
        try {
            v14.#h = a45;
        } catch(e47) {
        }
    }
    #c = -4096;
    static 2147483649;
}
const v48 = new C43(v14, v25);
new C43(v25, v20);
new C43(v20, v25);
-4294967296 >>> -4294967296;
%PrepareFunctionForOptimization(255);
function f53() {
    const o57 = {
        ...1.0,
        set b(a56) {
        },
    };
    const v60 = v26--;
    Math.min(6);
    v26 ** 6;
    -4294967296 >>> v48;
    (v60 - v48) && 6;
    o57.b = o57;
    return o57;
}
for (let v66 = 0; v66 < 5; v66++) {
    f53();
    %OptimizeFunctionOnNextCall(f53);
}
const v68 = [-6.672391061426152e+307];
const v72 = new Float64Array(127);
new Uint8ClampedArray(v72);
function f75() {
    new Float32Array();
    class C78 {
    }
    function F79(a81, a82, a83) {
        if (!new.target) { throw 'must be called with new'; }
        const v84 = this.constructor;
        let v85;
        try { v85 = new v84(); } catch (e) {}
        const o86 = {
            22: C43,
            "f": Set,
            __proto__: v25,
        };
        this.e = v85;
    }
    function f87() {
        for (let v88 = 0; v88 < 5; v88++) {
            new F79();
        }
        return F79;
    }
    let v90 = 8n;
    let v91;
    try { v91 = v25.with(9007199254740990, v20); } catch (e) {}
    return v90;
    try { v91.p(v90, -10, -4096, v14); } catch (e) {}
    try {
        new f75();
    } catch(e94) {
    }
    v90++;
    const v97 = [v90] > v90;
    v90 || v97;
    v68 || v48;
    ~v68["pop"]();
    let v106 = 0;
    const o109 = {
        "maxByteLength": 1814769353,
    };
    const v111 = new SharedArrayBuffer(12, o109);
    try { v111.grow(-10); } catch (e) {}
    Uint32Array.e = Uint32Array;
    while ((() => {
            const v115 = v106 < 10;
            v20.length;
            new BigUint64Array(5);
            new Uint8ClampedArray(1);
            new Float64Array(3645);
            v115 || v115;
            return v115;
        })()) {
        for (let v127 = 0; v127 < 5; v127++) {
            "n" + v127;
        }
        v106++;
    }
    return v97;
}
%PrepareFunctionForOptimization(f75);
f75();
%OptimizeFunctionOnNextCall(f75);
f75();
