-1.9513247498278616 - -1.9513247498278616;
-1000.0 - -1000.0;
1000000000000.0 >>> 1000000000000.0;
class C9 {
    constructor(a11, a12) {
        function f13() {
            return f13;
        }
        new Date();
        a11 - a11;
        a12++;
        let v18;
        try { v18 = a11(); } catch (e) {}
        try {
            super.now(v18, -51077n);
        } catch(e20) {
        }
    }
    static 0 = -1000.0;
    g;
    static #b = -1n;
}
C9[0];
const v25 = /8[\cA]v/uisy;
const v26 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v26.length = v25;
} catch(e27) {
}
new C9(-51077n, -1n);
new C9(-1n, -1n);
new C9(-1831563778n, -1n);
4.948664414277427 >>> 4.948664414277427;
const v36 = new Set();
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a39;
    } catch(e41) {
        for (let [v42,v43] of a39) {
            try {
                v36.values();
            } catch(e45) {
            }
        }
        v26.length;
        try {
            v36.toString = a39;
        } catch(e47) {
        }
    }
    try {
        this.h = v36;
    } catch(e48) {
    }
    try {
        const v49 = v36[this];
        try {
            new F37(v49, -268435456n);
        } catch(e52) {
        }
        this.b = Set;
    } catch(e53) {
        const v56 = new Uint8Array(1024);
        v56.join(1024);
        function f59() {
            return -172798652;
        }
        %OptimizeFunctionOnNextCall(f59);
    }
}
const v60 = new F37(Set, Set);
new F37(Set, F37);
const v62 = new F37(v60, F37);
const v66 = [65537,268435441,63298,-5,1235122603];
const v67 = [128,215394418];
const v68 = v67.entries();
const v69 = [-2,-4294967296,4294967297];
function F70(a72, a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    for (const v76 in this) {
        v26.length;
    }
    let v78 = new Set(this);
    v78 >> v78--;
    Math.round(-2);
}
const v84 = new F70(-714582153, F70, -714582153, v67);
const v86 = new F37(v62, null);
const v91 = new Date();
v91.setUTCSeconds(-482.72039968688557);
new BigUint64Array(0);
new Int32Array(1519);
v84.length;
const v98 = new F70(9, v84, 9, v69);
new Int8Array(268435456);
new Int8Array(3663);
v98.b = v98;
const v105 = new F70(1024, v98, v69, v69);
try { BigUint64Array.from("-2"); } catch (e) {}
Math.asin();
const v118 = ("string").trimStart();
v68[3];
function f122() {
    return -2147483647;
}
class C131 extends f122 {
    p(a133, a134) {
        const v139 = new Uint8ClampedArray();
        Float32Array in v139;
        new WeakMap();
        class C147 {
            static #p(a149) {
                this.#p();
            }
        }
    }
}
let v157;
try { v157 = v118(); } catch (e) {}
v66[v157] = v67;
0 ^ 9;
Int8Array !== -1000.0;
Object.defineProperty(v98, "g", { writable: true, value: v66 });
const o165 = {
    "maxByteLength": 512,
};
const v167 = new SharedArrayBuffer(512, o165);
new DataView(v167);
const v170 = -1000;
~9;
v170 >>> v170;
a = ("string").length - F70;
v36[v98];
v86.__proto__;
-35417 - -35417;
let v179 = undefined;
v179 = v105;
