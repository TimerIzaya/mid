const v3 = new Uint32Array();
delete v3[5];
const v6 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v8 = [601759695];
const v9 = [1073741824,1073741823,1376142744,1073741825];
function f10(a11, a12, a13, a14) {
    function f15() {
        ("Vre")["concat"]("concat", a14);
        let v20 = Float64Array;
        v20 = a12;
        v6.length;
        try {
            v9.forEach();
        } catch(e23) {
        }
        Symbol.toPrimitive;
        const o30 = {
            toString(a27, a28) {
                a14 && v20;
                return this;
            },
        };
        const o31 = {
        };
        new Proxy(Uint8ClampedArray, o31);
        o30[9] = a11;
        const o39 = {
            [-4294967297n](a35, a36, a37, a38) {
            },
            ...v8,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f10;
    }
    f15();
    %OptimizeFunctionOnNextCall(f15);
    return -4294967297n;
}
for (let v41 = 0; v41 < 10; v41++) {
    f10();
}
function F53(a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this?.constructor;
    try { new v58(a57, a57, "08"); } catch (e) {}
    a56 & a56;
    try {
        this.f = "toString";
        const v61 = [-6.672391061426152e+307];
        v61[0] = v61;
        function f62() {
            return v61["pop"]();
        }
        f62();
        f62();
    } catch(e67) {
    }
    function f68(a69, a70, a71, a72) {
        return f68.arguments;
    }
    f68(f68, f68, f68, f68);
}
F53.caller = F53;
const v75 = new F53(491664406, 1n, 1n, "iOK1");
v75.length;
const v77 = new F53(2052491414n, 1n, 2052491414n);
new F53(v77, 2052491414n, 1n);
Map.d = Map;
class C86 {
}
const v87 = new C86();
const v88 = v87?.__defineSetter__;
try { new v88(-7, F53); } catch (e) {}
"p" + -13;
try {
    const t78 = "08";
    t78.a = 3872;
} catch(e94) {
}
try { BigUint64Array.toString(); } catch (e) {}
6.221456434799227e+306 << 6.221456434799227e+306;
1146 < 491664406;
F53.trim();
new Int16Array(7);
126 % 126;
Uint8ClampedArray.b = Uint8ClampedArray;
65535 + 65535;
function f114() {
    try { v87.getMinutes(arguments); } catch (e) {}
    arguments[arguments] = v87;
    return 65535;
}
