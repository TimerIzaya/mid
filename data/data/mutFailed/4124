class C3 {
    get multiline() {
        this[2] = 1.3069552580965197e+308;
        return 4.565894649002855;
    }
    #o(a9) {
        a9.__proto__;
        function f11(a12) {
            return this;
        }
        class C13 extends f11 {
            120 = "ps";
            ["toString"];
            static 12 = f11;
        }
        return "z2xOd";
    }
}
const v14 = new C3();
function f15(a16) {
    let [,...v18] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
    return "toString";
}
v14[Symbol.toPrimitive] = f15;
const v21 = new C3();
const v23 = Symbol.toPrimitive;
v21[v23] = Symbol;
const v24 = new C3();
function f25(a26, a27) {
    a27.toString = Symbol;
    const o35 = {
        [a27](a29, a30, a31, a32) {
            try { a31(this, this, a26, a31); } catch (e) {}
            v14.g;
            return a31;
        },
        "g": v24,
        ..."z2xOd",
        "b": a27,
        ..."z2xOd",
        ...C3,
        __proto__: "ps",
        "e": a27,
        "d": "z2xOd",
        "f": a26,
        "a": a27,
    };
    function f36() {
        return ([5]).fill;
    }
    o35[Symbol.toPrimitive] = f36;
    return o35;
}
const v41 = f25(v21, v14);
const v42 = f25(C3, v21);
function f43(a44) {
    try {
        v41.toString = f15;
    } catch(e45) {
    }
    return a44;
}
v42[Symbol.toPrimitive] = f43;
const v48 = f25(C3, v42);
function f52(a53, a54, a55, a56) {
    const o72 = {
        valueOf(a58, a59, a60) {
            v48[Symbol.iterator];
            return a54;
        },
        n(a65, a66) {
            let v67;
            try { v67 = a65.trunc(); } catch (e) {}
            this ** v67;
            return "toString";
        },
        "e": a56,
    };
    return o72;
}
f52(f52(7.8150361148792555, v42, "z2xOd", "z2xOd", v21, v23), v14, "ps", "toString");
f52(v42, v41, "toString", "toString");
new DataView(1091060517);
