class C3 {
    static [124762.52952651773];
    n(a5, a6) {
        let v7 = 0;
        do {
            const v10 = new RegExp(0);
            if (C3) {
                try { C3.o(a5, RegExp, a6, v7, a5); } catch (e) {}
                try {
                    v10.__proto__ = v10;
                } catch(e13) {
                }
            } else {
                function F14(a16, a17, a18, a19) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.h = a16;
                    } catch(e20) {
                    }
                }
                new F14(C3, F14, v10, 0);
                const v22 = new F14(C3, 3764, RegExp, 0);
                new F14(v22, a6, 16, 16);
            }
            new Int16Array(3764);
            new Float32Array(1000);
            v7++;
        } while (v7 < 5)
        return 0;
    }
}
const v32 = C3[0];
v32[2] = 16;
try { v32(); } catch (e) {}
v32 & 124762.52952651773;
C3[95] = 16;
new C3(124762.52952651773, 124762.52952651773, 124762.52952651773);
new C3();
const v37 = new C3();
v37.b &&= 16;
try {
    new C3();
} catch(e39) {
}
let v42;
try { v42 = ("-5").match(16); } catch (e) {}
("8")[0];
new WeakMap();
function f47() {
    return "9223372036854775807";
}
const v48 = [-13063,230037640,0,-1717935321,257,0,1073741825];
const v49 = [-2051630605,509562611];
class C50 {
    [-1] = v49;
}
const v51 = new C50(16, v42);
v51[3114] = v51;
Float32Array.length = Float32Array;
const v53 = new Float32Array(v48);
try { v49.toReversed(v53); } catch (e) {}
Object.defineProperty(v51, 7, { configurable: true, value: v48 });
