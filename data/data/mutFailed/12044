const v0 = [-6.8707197993418045,0.0016297212755254087];
const v1 = [0.2953471786517545,-327.64545164903745,1000000000.0];
const v2 = [0.6486406903935077,835919.2781582458,1.7976931348623157e+308,1.7976931348623157e+308,-Infinity,0.2877766611103594,231.22725977544474,-2.7689761722502787e+307,1000.0,-31.663407251798503];
function f3(a4) {
    const o9 = {
        "d": v2,
        "h": a4,
        n(a6, a7) {
            const o8 = {
                __proto__: a7,
                127: v2,
                [-1]: a7,
                1679: a4,
            };
            return o8;
        },
        10000: a4,
        [v2]: v2,
        "g": v1,
    };
    return o9;
}
const v10 = f3(v1);
const v11 = f3(v1);
const v12 = f3(v1);
class C13 extends f3 {
    #h = v12;
    get b() {
        const v15 = new f3(v1);
        v11[732397740] = v11;
        function F16(a18, a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = v11;
            } catch(e22) {
            }
        }
        new F16(v12, v0, v0, this);
        const v24 = new F16(v15, v1, v0, v12);
        new F16(v12, v2, v2, v10);
        return v24;
    }
}
new C13();
new C13();
new C13();
const v31 = new BigUint64Array(6);
new BigInt64Array(78);
new Float64Array(2368);
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    Math.isFinite(Math);
    const v44 = this.constructor;
    try { new v44(); } catch (e) {}
    const v49 = new Uint8Array(9);
    v49.lastIndexOf(10);
}
new F38();
new F38(v0, v31);
