function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -6;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
function f6() {
    let v7 = 0;
    v7++;
    return F0;
}
v5.toString = f6;
const v9 = new F0();
function f13(a14, a15, a16, a17) {
    function f18(a19, a20) {
        return -1.7976931348623157e+308;
    }
    a14.toString = f18;
    const o31 = {
        "e": F0,
        "c": a17,
        ...v4,
        "a": v5,
        ...v4,
        [v5](a25, a26, a27, a28) {
            const v29 = super.f;
            try { new v29(v29, F0, v29, ...a14); } catch (e) {}
            return this;
        },
    };
    return o31;
}
f13[Symbol.toPrimitive] = f13;
const v34 = f13(v9, v4, v4, v9);
const v35 = f13(v5, v5, v4, v9);
f13(v5, v9, v4, v5);
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    function f39(a40) {
        const v41 = [this,F37];
        [f6,v41,v41,v4,[this,v35,v41]];
    }
    Object.defineProperty(this, "c", { set: f39 });
    function F44() {
        if (!new.target) { throw 'must be called with new'; }
    }
    [F44,Uint8Array];
    3 | f13;
    try {
        this.a = 12;
    } catch(e51) {
        const v52 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v53 = 0; v53 < 5; v53++) {
            function f54() {
                let v56 = Float64Array;
                v56 = -4294967295;
                try {
                    v52.forEach(v56);
                } catch(e58) {
                }
                const o63 = {
                    toString(a60, a61) {
                        v53 && v56;
                        return -4294967295;
                    },
                };
                return v52;
            }
            f54();
            %OptimizeFunctionOnNextCall(f54);
        }
    }
    try {
        this.c = 12;
    } catch(e65) {
    }
}
const v66 = new F37();
const v67 = new F37();
const v68 = new F37();
class C72 extends F37 {
    #h;
    #valueOf(a74, a75, a76) {
        const v77 = v34.constructor;
        try { new v77(); } catch (e) {}
        class C79 {
            constructor(a81, a82, a83) {
                for (let v84 = 0; v84 < 5; v84++) {
                    function f86() {
                        const o94 = {
                            [-4294967297n](a88, a89, a90, a91) {
                                eval(C79);
                            },
                        };
                        return f86;
                    }
                    f86();
                    %OptimizeFunctionOnNextCall(f86);
                }
            }
        }
        try {
            a75.h = v66;
        } catch(e96) {
            function f97() {
                for (let v98 = 0; v98 < 5; v98++) {
                    "p" + v98;
                }
                class C103 {
                }
                function F107(a109) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v110 = this.constructor;
                    try { new v110(); } catch (e) {}
                    this.g = -1517929768;
                    this.g = -1;
                    this.h = a109;
                }
                const o113 = {
                    "b": -1000000.0,
                    "h": -1540034480,
                };
            }
            f97();
        }
        return 536870912;
    }
    static #c = 100910865;
    [v66] = v67;
    [F37] = v66;
    static [v68] = v67;
}
new C72();
Symbol.keyFor(Symbol());
function f120() {
    return "function";
}
const v121 = new C72();
new C72();
class C123 {
    static g;
    static {
        for (let v125 = 0; v125 < 25; v125++) {
            const v126 = [601759695];
            const v127 = [1073741824,1073741823,1376142744,1073741825];
            function f129(a130, a131, a132, a133) {
                try { new a130(); } catch (e) {}
                a132 << a132;
                function f137() {
                    return a130;
                }
                const v139 = new Int8Array();
                const v142 = BigUint64Array * this;
                v142 - v142;
                const v144 = v142 ** v142;
                class C145 {
                }
                const v147 = [-9223372036854775808];
                function F148(a150, a151, a152) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.g = this;
                    this.c = a151;
                    for (let v153 = 0; v153 < 5; v153++) {
                    }
                    this.g = 4;
                }
                new F148(v147, -11396);
                Number.isNaN(v144);
                function f157(a158, a159) {
                }
                try { f157(); } catch (e) {}
                const v162 = v139.buffer.__defineGetter__;
                try { v162(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f137);
                let v165;
                try { v165 = v127["find"](..."find", a133, ...v126); } catch (e) {}
                const o166 = {
                };
                const o168 = {
                };
                gc(o168);
                class C170 {
                }
                const v171 = new C170();
                [v171,v171,v171,v171,v171];
                v165 <= a132;
            }
            for (let v174 = 0; v174 < 5; v174++) {
                f129(this, v174, v174);
            }
        }
    }
    static set a(a177) {
        for (const v178 of a177) {
            super.e = v178;
        }
        super.b = v121;
    }
    [F37] = 536870912;
    2147483649 = 536870912;
    static h = v67;
    3058268856 = C72;
}
new C123();
new C123();
new C123();
function F183() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v185 = 0; v185 < 1000; v185++) {
        const v187 = new WeakMap();
        const v188 = /8[\cA]v/uisy;
        function f189(a190, a191) {
            const v192 = [v188];
            v187.set(v192, v192);
            return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
        }
        const v200 = ("p" + v185).fontcolor();
        let v201;
        try { v201 = v200.trimLeft(this); } catch (e) {}
        v201[12];
    }
}
new F183();
new F183();
