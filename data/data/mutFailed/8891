function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f3() {
            return f3;
        }
        Object.defineProperty([this], -2, { value: f3 });
        this.d = 10;
    } catch(e5) {
    }
    try {
        this.a = 10;
    } catch(e6) {
    }
    try {
        this.e = 10;
    } catch(e7) {
    }
}
const v8 = new F0();
const v9 = new F0();
const v10 = new v8();
function f11(a12, a13) {
    const o18 = {
        get b() {
            const v17 = v9[Symbol.match];
            a13[9] = v9;
            return v17;
        },
        [-2]: f11,
        __proto__: a12,
        "h": v10,
        /*
        __proto__: v8,
        */
        "d": f11,
        ...v10,
        "c": a13,
    };
    return o18;
}
const v19 = f11(v8, f11);
f11(v10, v19);
f11(v10, F0);
try {
    v19.b = Map;
} catch(e23) {
}
const v26 = new Uint16Array(3);
v26.indexOf();
new Map();
[-256,-9007199254740991,536870889,65537,1725600054,-9223372036854775808,4,9,4294967297,1];
[-197616407,468855870,-614617084,65537,4294967297,-1843347643];
[2,12,817632217,446621544,6,2147483649,268435456];
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this.constructor;
    let v39;
    try { v39 = new v38(v38, a37); } catch (e) {}
    new Float32Array(165);
    for (const v43 in this) {
        (delete this?.h).__proto__;
    }
    const v46 = typeof v39;
    const o48 = {
    };
    v46 === "symbol";
}
const v50 = new F32();
new F32(F32, F32, v50, v50);
function f52() {
    const o54 = {
        get c() {
        },
    };
}
new BigUint64Array(10);
for (const v61 in F0) {
    new Float64Array(2147483647);
}
f52();
