const v1 = new Map();
function f2(a3) {
    const o33 = {
        "b": v1,
        191: Map,
        valueOf(a5, a6) {
        },
        ...v1,
        __proto__: Map,
        "h": a3,
        "d": Map,
        /*
        __proto__: v1,
        */
        p(a8, a9) {
            %VerifyType(Map);
            let v10 = 0;
            do {
                Math.cbrt(7);
                const v18 = ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
                const o28 = {
                    [v18](a20) {
                    },
                    [-4294967297n](a22, a23, a24, a25) {
                        eval();
                    },
                };
                v10++;
            } while (v10 < 9)
            return Map;
        },
    };
    return o33;
}
const v34 = f2(f2);
if (v34) {
} else {
    v34.d;
}
f2(v34);
const v40 = f2(v1);
[2,536870887,-16,38589,9223372036854775807,1109463875,536870888];
let v42 = [65536,4];
[-3820,-1634162960,14,2107858501,-9007199254740992];
function f44() {
    return v34;
}
let v48 = Math;
const v50 = v48.cos(-7);
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v53 = 0; v53 < 1000; v53++) {
        ("p" + v53).fontcolor();
    }
}
Object.defineProperty(v42, 26, { get: f44 });
({"length":v48,...v42} = v42);
v50 || "2";
delete v1[v42];
const v59 = "10";
try {
    ("number").repeat(506345303);
} catch(e65) {
}
new Int16Array(1);
const v69 = new Float32Array();
Object.defineProperty(v40, 8, { writable: true, set: f2 });
f2(v69);
const v76 = new BigUint64Array(512);
v76["lastIndexOf"](v69);
new Int8Array(7);
([0.4391347154580403,257.99749453941945,-9.996237582361703,-2.2250738585072014e-308,2.0,0.22007729464719739]).b;
function f85(a86) {
    return a86;
}
new BigUint64Array(4096);
const v90 = new BigInt64Array(128);
v90.indexOf(-11907, 4294967296);
