const v0 = [];
class C1 {
    static #c;
    static {
        let v3;
        try { v3 = this(...v0, this, this, this, this); } catch (e) {}
        v3[Symbol.hasInstance];
    }
    [v0] = v0;
    8;
    d;
}
const v7 = new C1();
let v8 = new C1();
new C1();
class C10 {
    constructor(a12, a13) {
        function f14() {
            return v0;
        }
        ({"c":a12,"g":v8,} = a12);
        const o18 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o18);
    }
    n(a21) {
        super.f = a21;
        let v23;
        try { v23 = a21["toLocaleString"](); } catch (e) {}
        super.h = v23;
        return a21;
    }
}
new C10(v7, v8);
const v25 = new C10(v7, v8);
new C10(v25, v25);
new Float64Array(10);
new Float64Array(7);
new BigUint64Array(4);
const v36 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v37 = 0; v37 < 5; v37++) {
    function f38() {
        try {
            v36.forEach();
            try {
                v0.length = v8;
            } catch(e40) {
            }
            C1.f **= v37;
        } catch(e41) {
            e41.message;
            const v43 = e41.constructor();
            const o44 = {
                "execution": v43,
            };
        }
        return f38;
    }
    f38.call(v36, f38, v36, f38);
    %OptimizeFunctionOnNextCall(f38);
}
