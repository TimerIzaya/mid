const v2 = new Uint16Array(3);
BigUint64Array <= 0.7221600461335677;
(2136873598).constructor;
const v10 = new Uint8ClampedArray(1789);
const v12 = Uint8ClampedArray;
try { v10.subarray(1789, 1789); } catch (e) {}
v2 < 3;
new Int32Array(1024);
const v20 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
const v21 = [12,-256,-4096,2,7,8,21956,46111,11,10];
v21[4] = v21;
const v22 = [-1073741824,1665564361,16526,1805211777,10,-9007199254740990,4,-17063,-1];
const v23 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
const v24 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
const v25 = [-1.015259194643325e+308,-Infinity,-9.825391401141273,-2.2250738585072014e-308,5.0,-2.2250738585072014e-308];
class C26 {
    constructor(a28, a29, a30, a31) {
        const v32 = this?.constructor;
        try { new v32(v24, a30, a30, v20); } catch (e) {}
        a29 >>> a29;
        -0.0 >>> -0.0;
    }
    /*
    constructor(a40, a41, a42, a43) {
        const o49 = {
            "maxByteLength": 2240,
        };
        const v51 = new ArrayBuffer(2240, a41);
        new Uint8ClampedArray(v51);
        this[268435456];
        v23 && this;
        try {
            v23.length = v25;
        } catch(e56) {
        }
    }
    */
    static 268435439 = v22;
    #c = -2.2250738585072014e-308;
    static 832209355 = 2.220446049250313e-16;
}
C26[832209355] = C26;
try {
    v21.length = C26;
} catch(e57) {
}
const o58 = {
};
new Proxy(v2, o58);
new Float32Array(34);
for (let v65 = 0; v65 < 5; v65++) {
}
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array);
function f68() {
    try {
        const v69 = [3];
        const o70 = {
        };
        const t58 = o70 > v69;
        t58();
    } catch(e73) {
        for (let v74 = 0; v74 < 500; v74++) {
        }
    }
    return 3;
}
f68();
Reflect.apply(o58, "symbol", [31909n]);
const v83 = [5.0];
const v84 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F85(a87, a88, a89, a90) {
    if (!new.target) { throw 'must be called with new'; }
    function f91(a92, a93, a94) {
        const v95 = v84.__proto__;
        try { v95.findLastIndex(this); } catch (e) {}
        return a92;
    }
    f91(a89, a89, a89);
}
new Uint8ClampedArray(v83);
