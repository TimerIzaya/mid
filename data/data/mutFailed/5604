let v1 = Uint32Array;
const v2 = new v1(5);
const v5 = new Uint8ClampedArray(1294);
const v8 = new BigInt64Array(257);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = 5;
    try {
        this.e = a13;
    } catch(e15) {
    }
    try {
        this.f = 257;
    } catch(e16) {
    }
}
const v17 = new F9(257, 257, v1, 257);
new F9(1294, 1294, v5, 5);
const v19 = new F9(1294, 257, v17, 5);
[];
const v24 = v5[12];
const v25 = [v19,1294,v5];
const v27 = [1294,v8,257,[v1,v8,v25]];
const v29 = /rb/gdms;
const v30 = /\p{Script_Extensions=Greek}/vis;
const v31 = /a$\P{Decimal_Number}/gvdims;
function f32(a33) {
    return v30;
    try { a33(a33, v29, v2, v25); } catch (e) {}
    return v30;
}
v31.toString = f32;
const v36 = v31[v31];
v30[Infinity] = v36;
for (let i = 0; i < 5; i++) {
    const v37 = v31.source;
    try { v36(v37, v37, v37, v37); } catch (e) {}
    Math.log(true + true);
}
let v42;
try { v42 = v24(v31, BigInt64Array); } catch (e) {}
v2[-2] %= v42;
try { v24(1000000000000.0, v27); } catch (e) {}
v1 %= v1;
%VerifyType(v17);
