function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = this;
    try {
        this.b = 127;
    } catch(e3) {
        const v6 = new BigInt64Array();
        v6[205];
        const v10 = new BigUint64Array(1486);
        const o11 = {
            [v6]: F0,
            ...v10,
        };
    }
}
const v12 = new F0();
new F0();
class C15 extends Int8Array {
}
const v16 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
const v17 = v12[3137543296];
let v18;
try { v18 = v12.p(Int8Array, F0); } catch (e) {}
v12[Int8Array] = v17;
v16.length = 1;
const v23 = new F0();
let v24;
try { v24 = v17(v23); } catch (e) {}
const v26 = [C15,8n];
const v27 = Reflect.construct(v24, v26, Int8Array);
v18 || v26;
const v31 = new Date(Date);
function F32(a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.constructor;
    try { new v35(); } catch (e) {}
    this.f = v31;
}
new F32();
new Uint8Array(3);
new BigUint64Array();
class C42 {
    constructor(a44) {
        const v45 = this.constructor;
        try { new v45(); } catch (e) {}
        super.e;
    }
    #toString(a49, a50) {
        return typeof a50 != "string";
    }
}
class C54 extends C42 {
    #d;
}
new Float64Array(128);
new Uint8ClampedArray(3558);
[536870888,-4294967295,9223372036854775807,-4,-5,9,4294967296,5,-10557,268435441];
try {
    v16.__proto__ = v26;
} catch(e62) {
}
const v63 = [v18,Reflect];
[v63,[v27],Int8Array,v63];
[-9007199254740992,-4294967295,-1609361612,-536870912];
[1328443131];
const v69 = [Float64Array];
for (let v70 = 0; v70 < 5; v70++) {
    v69.length = 2;
}
