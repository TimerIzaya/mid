const v2 = new Array(1024);
function f6(a7, a8, a9, a10) {
    const o75 = {
        "h": a8,
        p(a12, a13) {
            this.toString(a13, this, Array, a9);
            return a8;
        },
        p(a16, a17) {
        },
        [Array]: v2,
        "g": 8,
        get c() {
            super.c;
            /Ma{1,2}?abc/vi;
            function f21() {
                return f21;
            }
            const v22 = f21();
            let v23 = Int16Array;
            function f24() {
                const v25 = v23--;
                v25 - v25;
                class C28 {
                }
                C28.length;
                const v30 = new C28();
                v30.g = v30;
                const v31 = new C28();
                v31.length = -4294967296;
                let v32 = 0;
                for (let i = 0; i < 5; i++) {
                    for (let v33 = 0; v33 < 5; v33++) {
                        try { ("p").indexOf(v22); } catch (e) {}
                        try { ("p").fontcolor(v33); } catch (e) {}
                        "p" + v33;
                    }
                    v32++;
                }
                const v39 = new C28(v32);
                const v40 = [C28];
                try { v40.fill(); } catch (e) {}
                [v39];
                class C43 extends C28 {
                    [v30];
                    #n(a45, a46, a47, a48) {
                    }
                }
                return -4294967296;
            }
            f24();
            /[]Wh*/umsy;
            let v51 = -9007199254740992;
            ++v51;
            class C53 {
                constructor(a55, a56, a57, a58) {
                }
                /*
                constructor(a60, a61, a62, a63) {
                }
                */
            }
            /(?<a>.)/vdimy;
            const t62 = Array(8);
            t62[2147483648] <<= 8;
            function F68(a70, a71) {
                if (!new.target) { throw 'must be called with new'; }
                const v72 = this.constructor;
                try { new v72(); } catch (e) {}
                try { this.constructor(); } catch (e) {}
            }
            return 8;
        },
        ...Array,
        "a": a10,
    };
    return o75;
}
f6(1024, 256, 8, 26190);
f6(256, 256, 1024, 8);
f6(256, 256, 1024, 1024);
/[-\xf0\x9f\x92\xa9]+/gs;
/\p{gc=Nd}/dms;
/Cxyz{0,1}+/s;
function F82(a84, a85, a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
    Symbol.toPrimitive;
    const v92 = Array(6);
    const o93 = {
        __proto__: v92,
    };
    function f94() {
        return F82;
    }
    class C95 extends f94 {
        constructor(a97) {
            super();
            for (let v98 = 0; v98 < 25; v98++) {
                function f99(a100) {
                    return Uint32Array;
                }
                ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
                const v106 = [8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
                const v107 = [-5.83623517593701,-1.0,-1e-15];
                const v108 = [692.912813481568,126686.58689393173];
                function f111(a112, a113) {
                    const o117 = {
                        [a112](a115, a116) {
                        },
                    };
                    return o117;
                }
                f111(v106, 128);
                f111(v108, -3);
                f111(v107, 128);
                this["p" + "p"] = v98;
            }
        }
    }
    new C95();
}
new F82();
