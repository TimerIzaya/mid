function f3() {
    const o5 = {
        get c() {
            return this;
        },
    };
    return o5;
}
f3.arguments = f3;
class C6 {
    constructor(a8) {
        const v9 = this[1449449444];
        v9[1] = v9;
        class C10 {
            223 = this;
            #d;
            ["sticky"];
        }
        let v11;
        try { v11 = new C10(); } catch (e) {}
        v11[223];
        const v13 = new C10();
        v13[223];
        const v15 = new C10();
        v15[223];
        const v17 = new C10();
        try { v17.isPrototypeOf(C6); } catch (e) {}
        function f19(a20, a21) {
            const o25 = {
                [a20](a23, a24) {
                },
            };
            return o25;
        }
        v17[223];
    }
    #g = "sticky";
    static #b = "O";
    static n(a28, a29) {
    }
    536870887;
    ["sticky"] = "sticky";
    ["EPQ"] = "sticky";
    4 = "O";
    e;
    1449449444 = "EPQ";
}
const v30 = C6?.apply;
try { new v30(f3, "sticky"); } catch (e) {}
new C6("EPQ");
const v33 = new C6("O");
v33[1449449444];
const v35 = new C6("EPQ");
const v36 = v35[1449449444];
v36[2] = v36;
[-269746457,-2147483648];
[268435440,-536870912,536870889,303037429,-17877,536870887,13899,35084,50202];
[127,-4096,65536,13828];
1437 >>> 1437;
Uint16Array.BYTES_PER_ELEMENT;
const v44 = new Uint16Array(1437);
const v45 = v44?.constructor;
try { new v45("sticky", v44, v44); } catch (e) {}
257 ^ 257;
new Uint32Array(257);
127 - 127;
const v54 = new Int8Array(127);
const v56 = new WeakSet();
for (const v57 in v54) {
    v56[v57] = v57;
}
0 * 0;
BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
const v61 = BigUint64Array.name;
v61[1] = v61;
const v64 = new BigUint64Array(512);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v66 = new Int16Array();
v64.includes(v66);
const v68 = new BigUint64Array(0);
const v69 = v68?.constructor;
try { new v69(127, 127, C6); } catch (e) {}
try { Uint16Array.apply(1657, Uint32Array); } catch (e) {}
const v74 = new Uint16Array(1657);
v74.reverse();
