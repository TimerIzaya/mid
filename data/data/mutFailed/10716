function f0() {
}
function f1() {
    const o30 = {
        o() {
            const v3 = this.__proto__;
            class C9 extends 268435456 >>> (268435456 % 268435456) {
            }
            const v10 = new Float32Array(205);
            Object.defineProperty(this, 255, { configurable: true, get: f0 });
            const v12 = v3.__proto__;
            v12[v12] = 205;
            super[v10] = f1;
            let v15 = ++f0;
            const v16 = v10 * v15;
            const v17 = v15++;
            f0 || v16;
            Math.fround(v17);
            new Uint8Array(0);
            new Uint8ClampedArray(16);
            for (let v25 = 0; v25 < 50; v25++) {
            }
            const o29 = {
                set e(a27) {
                },
                get e() {
                    return this;
                },
            };
            return Uint8ClampedArray;
        },
    };
    return o30;
}
const v31 = f1();
const v32 = f1();
f1();
class C37 extends f1 {
    static [65535];
    valueOf(a39, a40) {
        const v44 = ~a39;
        const v45 = 1307566335 | 1307566335;
        this >> v44;
        this[Symbol.split] = a39;
        try {
            a39.toString = a39;
        } catch(e49) {
        }
        Math.cosh(v45);
        return -this;
    }
}
new C37();
new C37();
new C37();
const t55 = gc.constructor;
t55();
const o60 = {
    "execution": "async",
    "type": "minor",
    "c": "async",
    __proto__: v31,
    "g": v32,
    "d": "async",
    "e": v31,
};
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
}
const v67 = new F63(Float32Array, 1000.0);
try {
    v67.fuck("flags", "flags", "flags", Float32Array);
} catch(e70) {
}
gc(o60);
new Int8Array(1073741823);
[4294967297,-4096,3];
function f76(a77, a78) {
}
[];
const o82 = {
    "type": "function",
};
new Worker(f76, o82);
