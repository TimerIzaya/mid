[298,-65535,2029631940,-65537,1584414170,9223372036854775807,8];
[65536,257,-509804766,13,9007199254740992,8,0,9,-2147483648,0];
[65535,508715403,894449071,-14,-8,-1016350375,15585];
-Infinity;
f = 768816.9417179571;
const v8 = 768816.9417179571 * -9.793635949808783;
new Array(3908);
const v16 = [1.6376038116084188e+307,2.220446049250313e-16,0.0,1000000000.0,2.220446049250313e-16,1.7976931348623157e+308,-2.0,1000000000000.0];
v8 >>> 768816.9417179571;
Object.defineProperty(v16, 13, { writable: true, configurable: true, set: Array });
const v18 = v8 << "number";
const v19 = Array(8);
%PrepareFunctionForOptimization(Array);
Array(8);
Array(8);
%OptimizeFunctionOnNextCall(Array);
const v22 = Array(8);
[-9.335320187783694,NaN];
[Infinity,2.220446049250313e-16];
const v27 = new Int32Array();
v27.reverse();
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v27;
    } catch(e34) {
    }
}
new F30(v22, 9);
new F30(v16, v8);
new F30(v19, v18);
Math.pow(!0.8843420658768774, -60544);
