const v1 = new Date();
class C2 {
    static m(a4) {
        let v6 = 16 | 16;
        new Date(v6);
        function F9(a11, a12) {
            if (!new.target) { throw 'must be called with new'; }
            const v13 = this.constructor;
            const v14 = /[a-zA-Z0-9]/gvisy;
            const v15 = /abc?/gvmy;
            v15[-2] ^= v14;
            const v17 = new Int16Array();
            const v18 = v17.lastIndexOf();
            let v19 = v18 - v18;
            v19--;
            try { new v13(F9, this, F9, v15); } catch (e) {}
        }
        const o60 = {
            "construct": Date,
            "defineProperty": Date,
            "deleteProperty": Date,
            "get": Date,
            "getOwnPropertyDescriptor": Date,
            "getPrototypeOf": Date,
            ...Date,
            ...a4,
            m(a23) {
                try { a23.next(a23, 16); } catch (e) {}
                a23.c = a23;
                a23.h = a23;
                const o25 = {
                };
                o25.h = o25;
                o25.h = o25;
                function f26(a27, a28, a29) {
                    return o25;
                }
                f26.caller = f26;
                try {
                    o25.e = v6;
                } catch(e30) {
                    const v33 = new Uint8ClampedArray(798, v6, e30);
                    new Uint8ClampedArray(798, ...v33, o25);
                }
                try {
                    const o35 = {
                    };
                    o35.e = 16;
                } catch(e36) {
                }
                let v38;
                try { v38 = ("EV").link(); } catch (e) {}
                let v39 = 0;
                class C40 {
                }
                const v43 = new Int8Array(3938);
                let v44 = 3;
                let v45 = 0;
                let v46 = v45 >> v45;
                for (let i = 0; i < 5; i++) {
                    [...v44] = v43;
                    v45++;
                }
                const o48 = {
                };
                try {
                    let v49 = 0;
                    for (let i = 0; i < 5; i++) {
                        ({"c":v6,"d":v39,...v46} = v38);
                        try {
                            o25.fuck(v6, a23);
                        } catch(e51) {
                        }
                        v49++;
                        v49 < 5;
                    }
                    const o55 = {
                    };
                } catch(e56) {
                }
                return Int8Array;
            },
            "has": Date,
            "isExtensible": Date,
            "ownKeys": Date,
            "preventExtensions": Date,
            "b": C2,
            "c": 16,
            toString(a58, a59) {
            },
            "c": 16,
            "set": Date,
            "setPrototypeOf": Date,
        };
        const v62 = new Proxy(v1, o60);
        return v62;
    }
}
function f63() {
    const v64 = C2 - v1;
    new Int8Array();
    return v64;
}
C2[Symbol.toPrimitive] = f63;
const v71 = new BigInt64Array(9);
for (let i73 = 0; i73 < 6; i73++) {
    v71[C2] = v71.byteLength;
    const o80 = {
        "apply": Date,
        "deleteProperty": Date,
        "get": Date,
        "getOwnPropertyDescriptor": Date,
        "has": Date,
        "isExtensible": Date,
        "ownKeys": Date,
        "set": Date,
        "setPrototypeOf": Date,
    };
    new Proxy(v71, o80);
}
function F84(a86) {
    if (!new.target) { throw 'must be called with new'; }
}
const v87 = new F84(4);
let v88 = 0;
do {
    const o89 = {
    };
    o89.h = o89;
    o89.h = v87;
    const o90 = {
    };
    function f91(a92) {
        Uint8ClampedArray();
    }
    Object.defineProperty(o90, "e", { writable: true, set: f91 });
    o90.e = 4;
    v88++;
} while (v88 < 7)
new C2();
new C2();
new C2();
/[^a[bc]d]/gdimy;
/(a(?=bbb|bb)c)/gvdisy;
const v103 = [1073741824,1073741823,1376142744,1073741825];
for (let v104 = 0; v104 < 5; v104++) {
    function f105() {
        try {
            v103.some();
        } catch(e107) {
        }
        return v104;
    }
    f105();
    %OptimizeFunctionOnNextCall(f105);
}
/(x)(x)(x)\2/dim;
[749588469,8,-4,-3774,129,2147483648];
[23013,1423813900,-9007199254740990,536870888,-1165962647,-9223372036854775808,64,1873431721,10,-8];
[1,-2,8];
function F113() {
    if (!new.target) { throw 'must be called with new'; }
}
class C116 extends F113 {
}
const v117 = new C116();
function F118(a120, a121) {
    if (!new.target) { throw 'must be called with new'; }
}
function f123(a124, a125, a126, a127) {
    Uint8Array / a124;
    a125 < F118;
    const o133 = {
        n(a131, a132) {
            return 9;
        },
    };
    return 9;
}
for (let v134 = 0; v134 < 500; v134++) {
    f123();
}
Reflect.getOwnPropertyDescriptor(v117, 65536 | "undefined");
