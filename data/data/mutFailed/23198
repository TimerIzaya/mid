class C3 {
    m(a5, a6) {
        const v11 = -11454;
        const v12 = a5 && a5;
        const v13 = v11 / 11454;
        11454 >>> v12;
        Math.random();
        const v16 = Math.cbrt(a5);
        Math.imul(v13, 1e-15);
        return v16;
    }
}
new C3();
new C3();
const v20 = new C3();
function f21() {
    return C3;
}
[9.8217425435234e+307];
[1e-15,0.7063919201993858,-1.0];
[1000.0,-Infinity,-4.0,213982.2651765705,-Infinity,0.0,-3.0];
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    this.valueOf = f21;
    const v29 = this.constructor;
    Object.defineProperty(v29, Symbol.toPrimitive, { enumerable: true, value: f21 });
    try { new a27(this, this); } catch (e) {}
    const v33 = a27--;
    try {
        +(-1538129542 - v29) ^ v33;
    } catch(e38) {
    }
}
function f39() {
    const v41 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
    const v42 = [1000000000.0,4.0,5.0,-6.555298893133851e+307];
    for (let v43 = 0; v43 < 5; v43++) {
        v42.unshift(-463330.04816285486, v41.values());
    }
    return -463330.04816285486;
}
const v47 = Symbol.toPrimitive;
F25[v47] = f39;
const v48 = new F25(F25, F25);
function f49(a50) {
    try {
        v47.length = 2076916240;
    } catch(e52) {
    }
    return v20;
}
v48.toString = f49;
new F25(v48, F25);
