new BigUint64Array(512);
-16;
const v9 = new BigInt64Array(16);
function f10() {
    function f11() {
        /[a-zA-Z0-9]/gvisy;
        return f11;
    }
    for (let v13 = 0; v13 < 5; v13++) {
        f11();
        %OptimizeFunctionOnNextCall(f11);
    }
    return f11;
}
v9.constructor = f10;
try { v9.filter(-40797416); } catch (e) {}
const v18 = new Float32Array(443);
v18[283];
const v23 = /[]\u0034jC\P{sc=Greek}/gusy;
Uint16Array[2] = f10;
new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
const o29 = {
    toString(a27) {
        class C28 {
            static [this] = a27;
        }
        return C28;
    },
};
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
}
const o38 = {
    set e(a37) {
    },
};
("async").lastIndexOf();
v9.constructor;
Uint8ClampedArray.g = v23;
new Uint8ClampedArray([5.0]);
const v48 = ("h").split(65535);
try { v48.keys(); } catch (e) {}
Uint8ClampedArray.g = Uint8ClampedArray;
const v54 = ["bpkzx","bpkzx","bpkzx"];
const v55 = [v54,v54,v54];
v55.toString = f10;
"bpkzx" * v55;
const v57 = [506097.1301051206];
const o58 = {
};
v57.toLocaleString(o58);
class C61 {
}
const v62 = new C61();
function f63(a64, a65, a66) {
    const o67 = {
        ...v62,
    };
    return v62;
}
4096 !== 4096;
Date();
try { ("catch").codePointAt(v18); } catch (e) {}
new BigInt64Array(9);
1073741825 == 1073741825;
