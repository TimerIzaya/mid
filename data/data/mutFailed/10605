function f3(a4, a5) {
    const o11 = {
        __proto__: a4,
        "a": -2,
        "f": a5,
        "g": a5,
        set d(a7) {
        },
        "e": -2,
    };
    return o11;
}
f3(f3, -42527);
const t12 = -2;
t12(f3(-42527, -42527), 16);
const t14 = -2;
const v19 = new t14();
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = this?.propertyIsEnumerable;
    v24.name = v24;
    try { new v24(v19); } catch (e) {}
    try {
        this.f = a23;
    } catch(e26) {
    }
    try {
        this.d = a23;
    } catch(e27) {
    }
    try {
        this.a = a23;
        -53190 << -53190;
        1073741823 % 1073741823;
    } catch(e36) {
    }
}
const v37 = new F20(v19, 169771.4929358901);
const v38 = v37?.constructor;
try { new v19(WeakMap, F20); } catch (e) {}
const v40 = new F20(F20, F20);
const v41 = v40?.constructor;
let v42;
try { v42 = new v41(F20, v38); } catch (e) {}
new F20(v37, v37);
4096 - 4096;
let v47 = -941236596;
let v48 = v47--;
v48++;
try { ("vX").isWellFormed(); } catch (e) {}
let v57;
try { v57 = v42.strike(); } catch (e) {}
try { v57.blink(); } catch (e) {}
const v59 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v59.find(v37); } catch (e) {}
const v61 = [601759695];
const v62 = [1073741824,1073741823,1376142744,1073741825];
let v63;
try { v63 = v62.sort(v59); } catch (e) {}
function f65(a66, a67, a68, a69) {
    a68 + a68;
    try { a69.group(a68); } catch (e) {}
    try { a66.findIndex("toString"); } catch (e) {}
    let v73;
    try { v73 = a67.toLocaleString(); } catch (e) {}
    try { v73.toLocaleLowerCase(); } catch (e) {}
    a69[1];
    function f77() {
        const v80 = -4294967295 - -4294967295;
        -4294967295 >>> -4294967295;
        const o86 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a84, a85) {
            },
            ..."Vre",
            4: v80,
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        o86[0];
        return o86;
    }
    try { new f77(); } catch (e) {}
    f77();
    %OptimizeFunctionOnNextCall(f77);
    let v91;
    try { v91 = v62["find"](..."find", a69, ...v61, ...v62, ...522675525n); } catch (e) {}
    v91 <= a68;
    return arguments;
}
f65(v61, v59, 522675525n, v59, 522675525n);
4n * 4n;
function f112(a113, a114, a115, a116) {
}
f112(v63);
