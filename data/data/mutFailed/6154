const v0 = [-1e-15,0.3999878131076561,-2.2250738585072014e-308,0.5742067077316981];
const v1 = [-707485.7745320073,7.680938783178043,-4.970923007683804e+306];
const v2 = [1.3345516762243508e+308,1e-15,-2.220446049250313e-16,0.6274927882026303,4.0,2.2250738585072014e-308,-1000.0,-1.0,738.4080771260276,-3.0];
const v3 = [1.9068702496021004,-1.5245269725618496e+308,-1.7285064681641834e+308,2.0];
try { v3.sort(v2); } catch (e) {}
const v5 = [1000000000.0,-1000000000000.0,-1000000.0,2.7276266819222097e+307,1.0,-Infinity,1.6853799642958422e+308];
function f7() {
    return 256;
}
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this.constructor;
    try { new v12(a10); } catch (e) {}
    -a10;
    a11--;
    this.h = f7;
}
try { v5.sort(v2); } catch (e) {}
const v17 = [717.5008463543074,0.7566699491691615,0.0,2.2250738585072014e-308,NaN,0.20712784017751218];
try { v17.map(v2); } catch (e) {}
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(v1, a22); } catch (e) {}
    try {
        this.b = v2;
    } catch(e25) {
    }
}
try { new F19(v17, v0); } catch (e) {}
new F19(v0, v5);
new F19(v2, v17);
new F19(v0, v0);
let v36 = -1024;
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
}
F37.c = F37;
const v43 = new F37();
const v44 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v44.map("EPSILON"); } catch (e) {}
const v46 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
}
class C52 {
}
const v54 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v55 = [601759695];
for (let v57 = 0; v57 < 5; v57++) {
    function f59() {
        -4294967295 | -4294967295;
        const v66 = Array().unshift();
        v66 + v66;
        new Set();
        function F70(a72, a73) {
            if (!new.target) { throw 'must be called with new'; }
            F70();
        }
        F70.g = F70;
        const v76 = new Float32Array(Float32Array, Float32Array);
        v76.h = v76;
        f59();
        let v79 = undefined;
        v79 = -9223372036854775808;
        try {
            v44.forEach(Float64Array);
        } catch(e81) {
            const v82 = e81?.constructor;
            try { new v82("EPSILON"); } catch (e) {}
            let v86 = new Float64Array(3);
            v86 ^= this;
        }
        with (undefined) {
        }
        [[/D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy]];
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C95 {
        }
        try { new C95(); } catch (e) {}
        const v97 = new C95();
        try { v97.isPrototypeOf(v97); } catch (e) {}
        try {
            v97.__proto__ = F48;
        } catch(e99) {
        }
        const v100 = Symbol.toPrimitive;
        const v102 = v100.description;
        ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
        class C105 {
        }
        const v106 = [1073741824,1073741823,1376142744,1073741825];
        function f107(a108, a109) {
            return a108;
        }
        f107(v106, C105);
        return C105;
        Symbol.for(v102);
        const o115 = {
            toString(a113, a114) {
            },
        };
        try { o115.toString(o115, "EPSILON"); } catch (e) {}
        const o137 = {
            [522675525n](a119, a120) {
            },
            "c": v55,
            valueOf(a122, a123) {
                return a123;
            },
            [-4294967297n](a125, a126, a127, a128) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v54,
            ...v43,
            [v100]() {
            },
            "type": C52,
            valueOf(a131, a132) {
                return Symbol;
            },
            4: "Vre",
            toString(a134, a135, a136) {
                return a135;
            },
        };
        new Float32Array();
        v36 %= -268435456;
        const v141 = new Uint32Array(v46);
        try { v141.reduceRight(522675525n); } catch (e) {}
        return undefined;
    }
    f59();
    %OptimizeFunctionOnNextCall(f59);
}
