new Int32Array(16, -939766.5781505813);
new Float64Array(1);
new Float64Array(4);
new WeakMap();
const v15 = new BigInt();
class C16 {
    #c;
    static #n(a18) {
        try { a18(this, this, a18); } catch (e) {}
        try {
            const v20 = [8,261232906,-2092304111];
            function F21(a23) {
                if (!new.target) { throw 'must be called with new'; }
                try { a23.groupToMap(a23, F21, v20, this, F21); } catch (e) {}
                try {
                    this.b = v20;
                } catch(e25) {
                    for (let v26 = 0; v26 < 5; v26++) {
                    }
                    const o27 = {
                    };
                    for (let i = 0; i < 5; i++) {
                        v20[v20];
                    }
                }
            }
            try { ("number").match(F21); } catch (e) {}
            const o31 = {
            };
            const v33 = new Uint8Array(Uint8Array, Uint8Array);
            v33[Math.atan2(-988.8649474800335, 10000)] = 10000;
            new BigInt(o31);
        } catch(e39) {
        }
        return v15;
    }
    static e = BigInt;
    [BigInt];
    static #b;
}
new C16();
const v41 = new C16();
new C16();
const v43 = [C16,-939766.5781505813];
[BigInt];
const v45 = [v43,Float64Array];
const v46 = [BigInt,v45,v45,v15];
const v47 = [v46,C16,BigInt,v45,v46];
([Float32Array])["concat"]().includes(Float32Array);
[v47,v41,v45,v41,v15];
Float32Array[2147483648] = Float32Array;
/(?:a*)+q(?<a>.)/guds;
function f55(a56) {
    a56.dotAll;
    a56.hasIndices = a56;
    const v58 = a56?.constructor;
    v58.$_;
    v58.lastParen;
    const o62 = {
        get d() {
        },
    };
    return v58;
}
for (let [i66, i67] = (() => {
        let v63 = 0;
        v63++;
        return [v63, 10];
    })();
    (() => {
        const v68 = i66 < i67;
        v68 || v68;
        return v68;
    })();
    i67--) {
    for (let v75 = 0; v75 < 25; v75++) {
    }
}
class C77 extends Array {
}
