[9,64,51818,4,-1024,1000,-9223372036854775807,1,-8,1];
[-9007199254740991,9223372036854775807,128,-2,-1024,64994];
[8,6];
new Uint16Array(4);
const v14 = new Uint8Array(4);
new BigInt64Array(8);
class C18 {
    static {
        const v20 = this.__proto__;
        const v21 = [-0.21275859911088446,-4.0,-5.0,NaN,-2.3166842667177834,0.060663001395200866,487.3681425454663,0.5285682431876934,0.27086792344895905,1000000000.0];
        [-741.922055544301,-466112.4738683371,-1000000000000.0,1000.0,-590.0330386325822,-1000000000.0];
        new Uint8Array(442);
        1 >> 1;
        const v28 = 1 - 1;
        Int8Array.e = Int8Array;
        const v30 = new Int8Array(1);
        Uint32Array.length;
        Uint32Array.prototype = Uint32Array;
        new Uint32Array(12, Uint32Array);
        const v36 = [520126.03439582814,827116.4087908485,-3.0];
        try { v36.groupToMap(v28); } catch (e) {}
        try { Int16Array.of(); } catch (e) {}
        const v40 = new Int16Array(442, Int16Array);
        v40[32];
        const v42 = v40.slice(v30, 1);
        v42[0] = v42;
        for (let v44 = 0; v44 < 25; v44++) {
            function f45(a46, a47, a48, a49) {
                a48.prototype = a48;
                const v50 = a48 != a48;
                v50 && v50;
                a49.d = a49;
                Int8Array.prototype = Int8Array;
                new Int8Array(v40);
                class C54 {
                }
                let v55;
                try { v55 = C54.toString(); } catch (e) {}
                C54.length;
                const v57 = [-1024];
                for (let v58 = 0; v58 < 5; v58++) {
                    delete v57[v58];
                }
                0 <= 0;
                const v62 = new Int8Array(v36, v44, v44);
                v62[2] = v62;
                function f63(a64, a65) {
                    return v55;
                }
                return f45;
            }
            for (let v66 = 0; v66 < 5; v66++) {
                f45(v36, v36, v44, Date);
            }
        }
        function f68(a69) {
        }
        function f71() {
            const o81 = {
                [-2147483649](a73, a74) {
                },
                valueOf(a76, a77) {
                    return 12;
                },
                valueOf(a79, a80) {
                    return a80;
                },
            };
            return -38329;
        }
        function F82() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C84 {
            valueOf(a86, a87, a88, a89) {
            }
        }
        function F90(a92, a93) {
            if (!new.target) { throw 'must be called with new'; }
            const o94 = {
            };
        }
        class C95 {
        }
        if ("log1p") {
        }
        [-1000000000000.0,1000000000000.0,4.0,-3.0677704137073754,-418.93800882097287,Infinity,0.07433425201873334,-1.6736528691785703e+308];
        Uint16Array % v21;
        v14 instanceof BigInt64Array;
        v20();
    }
}
