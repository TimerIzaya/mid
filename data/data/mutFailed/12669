function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = F0;
    } catch(e3) {
    }
    try {
        this.a = -4294967296;
    } catch(e4) {
    }
    try {
        this.c = -4294967296;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new v6();
const v8 = new F0();
const v9 = v8.g;
v9 >= v9;
const v11 = [0.31793908947638616,1.4332360028713717e+308,-518518.44849449827,-2.220446049250313e-16,-1000.0,-561.3182910045884];
[-1000000000.0,0.0];
const v14 = ([-1000000000.0,0.0])?.groupToMap;
try { new v14(F0); } catch (e) {}
const v17 = 16 >> 16;
16 - 16;
let v19 = -294002194;
v19++;
/[tlD]/vdims;
let v23 = -1 >> -1;
v23++;
class C25 extends F0 {
    set h(a27) {
        for (let v28 = 0; v28 < 32; v28++) {
            this["p" + v28] = v28;
        }
    }
    o(a32, a33, a34, a35) {
        this[v11] = v7;
        const o38 = {
            "maxByteLength": 76,
        };
        const v40 = new ArrayBuffer(6, o38);
        new Uint8Array(v40);
        return -1;
    }
}
v6.d = C25;
let v43;
try { v43 = new C25(); } catch (e) {}
v43.d = v43;
C25.prototype = C25;
new v14();
const v45 = new v17();
v45.c;
const v47 = new C25();
v47.g = v47;
try { Uint8Array.bind(v9); } catch (e) {}
try { Uint8Array.bind(C25); } catch (e) {}
new Uint8Array(268435440);
