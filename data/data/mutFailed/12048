const v2 = new Float64Array(10);
const v5 = new BigInt64Array(1000);
function f8(a9) {
    const o11 = {
        4294967296: 1733353236,
    };
    return o11;
    return o11;
}
Float64Array[Symbol.toPrimitive] = f8;
const v14 = new Float64Array(148);
function f15(a16, a17, a18, a19) {
    const o28 = {
        "c": a17,
        ...v5,
        ...v14,
        9: v2,
        "e": v5,
        [Float64Array](a21, a22, a23) {
            Float64Array ** BigInt64Array;
            super[a17];
            try { a22(); } catch (e) {}
            this[10000];
            return a16;
        },
    };
    return o28;
}
f15(148, 10, 10, 148);
f15(10, 1000, 148, 148);
f15(1000, 10, 1000, 1000);
const v33 = new Uint8ClampedArray();
function F34() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c;
        this + v33;
        this.g = this;
        for (let i = 0; i < 5; i++) {
        }
        new F34();
    } catch(e39) {
    }
}
new F34();
