function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F0;
    try {
        this.c = -65535;
    } catch(e3) {
    }
    try {
        this.h = -65535;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
Object.defineProperty(v7, Symbol.toStringTag, { value: v6 });
function f10(a11, a12) {
    const o18 = {
        __proto__: a11,
        [a11](a14, a15, a16) {
            %VerifyType(a14);
            try { a15(a16, v7, a15); } catch (e) {}
            return F0;
        },
        "c": v5,
        "e": a12,
        "f": F0,
        "a": F0,
    };
    o18[Symbol.toPrimitive] = f10;
    return o18;
}
f10(v7, v5);
f10(f10(v7, v6), v6);
new Int8Array([1024,1024]);
