class C3 {
    static #valueOf(a5, a6) {
        try {
            const v9 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
            const v10 = [601759695];
            function f12(a13, a14, a15, a16) {
                arguments[4] = arguments;
                return a15;
            }
            f12(v10, v9, 522675525n, v9, 522675525n);
            f12(v10);
            this.fuck(-979482.1285433366, a5, 64);
        } catch(e21) {
        }
        try {
            a6.e = -4294967295;
        } catch(e22) {
        }
        return a5;
    }
    #f;
    constructor(a24) {
        const v25 = (a26, a27, a28, a29) => {
            this[536870887] = a24;
            return a29;
        };
    }
    2 = -4294967295;
}
C3.b = C3;
const v30 = new C3();
v30[2];
const v32 = new C3();
v32[2] = v32;
const v33 = new C3(-4294967295);
v33[2] = v33;
function f34() {
    return v32;
}
const v35 = f34?.constructor;
try { new v35(269356986); } catch (e) {}
const v37 = [v32,1190744438];
v37[1] = v37;
const v38 = [1190744438];
const v40 = ("UHH")?.search;
try { new v40(v38); } catch (e) {}
const o42 = {
    4294967296: "UHH",
};
o42[4294967296] = o42;
try { o42.propertyIsEnumerable(269356986); } catch (e) {}
const t51 = [];
t51.length += 1.0;
const v46 = [C3,v33,v32,v33,v38];
try { v46.shift(); } catch (e) {}
v46[4];
64 < 64;
64 - 64;
function F52(a54, a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let [i61, i62] = (() => {
        10 >> 10;
        return [0, 10];
    })();
    i61 < i62;
    (() => {
        i62 >>> i62;
        const v67 = i61++;
        v67 / v67;
    })()) {
    try { ("l").valueOf(); } catch (e) {}
}
-56859 - -56859;
const v78 = new Set();
try { v78.has(1190744438); } catch (e) {}
let v80 = 1;
v80++;
const v83 = new BigInt64Array(v80, v46, BigInt64Array);
v83[0];
function f85() {
    function F86(a88, a89, a90) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = f34;
        } catch(e91) {
        }
        try {
            this.d = v83;
        } catch(e92) {
        }
    }
    const v93 = new F86(v46, 64, -56859);
    new F86(v38, 64, C3);
    const v95 = new F86(v93, v83, F86);
    return v95;
}
const v96 = f85?.constructor;
try { new v96("UHH"); } catch (e) {}
let v98;
try { v98 = new v96(-4294967295); } catch (e) {}
v98.arguments;
v83.a = f85;
v83[0] = v83;
