const v1 = new Set();
function f2(a3, a4) {
    const o9 = {
        __proto__: a4,
        [v1]: v1,
        [Set]: a3,
        6: f2,
        ...v1,
        "a": Set,
        "h": Set,
        65535: Set,
        toString(a6, a7) {
            a4 ^ Set;
            return this;
        },
        930: v1,
        234: a3,
        "e": Set,
    };
    return o9;
}
const v10 = f2(f2, Set);
f2(f2, Set);
const v12 = f2(v1, v10);
function f13() {
    return v12;
}
function f14() {
    return v1;
}
class C15 extends f2 {
    static f;
    static {
        const o19 = {
            "maxByteLength": 3015,
        };
        const v21 = new ArrayBuffer(3015, o19);
        new Uint8ClampedArray(v21);
    }
}
const v24 = new C15();
new C15();
new C15();
delete v24[C15];
for (const v28 of v1) {
    Object.defineProperty(v12, "c", { writable: true, configurable: true, enumerable: true, set: f14 });
}
Math.cosh(C15);
Math.trunc(v10);
v10 ^ v10;
9007199254740992 | 40097;
try {
    f13();
} catch(e38) {
}
function f39(a40, a41, a42, a43) {
    const o48 = {
        [f39](a45, a46, a47) {
        },
    };
    [];
    try {
        f13();
    } catch(e51) {
    }
    return a43;
}
%OptimizeFunctionOnNextCall(f39);
f39();
