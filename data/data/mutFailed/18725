function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -50202;
    } catch(e3) {
    }
    try {
        this.b = -50202;
    } catch(e4) {
    }
}
const v5 = new F0();
function f6(a7, a8) {
    F0 = a7;
    F0[27] >>>= F0;
    return a8;
}
v5.toString = f6;
new F0(v5);
const v10 = new F0(v5);
Object.defineProperty(v10, "toString", { writable: true, configurable: true, enumerable: true, value: f6 });
class C11 {
    4 = v5;
    #b;
    h;
    constructor(a13) {
        a13.fuck = this;
        const v14 = a13 ** v10;
        const v15 = a13[3789515707];
        try {
            a13.fuck(v15, v14);
        } catch(e17) {
        }
    }
    static [v5] = v5;
    static #f = v10;
}
new C11(v10);
new C11(v10);
new C11(C11);
[7,-384327212,8,2];
[678388584,-9007199254740990,30178,64,9007199254740990,-34857,-34129,24679,-707435221];
[64,-76587197,4294967295,-284378489,-4,964755466,-15,268435456,64];
new BigInt64Array(0);
new Uint32Array(667);
new Uint8Array(4);
class C35 extends Set {
}
const v36 = new C35();
v36["delete"](129n);
