let v0 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/gu;
const v1 = /abc+?/gvy;
const v2 = /(ab)/vdimsy;
const v4 = Symbol.iterator;
const o13 = {
    [v4]() {
        let v6 = 10;
        const o12 = {
            next() {
                v6--;
                const v10 = v6 == 0;
                const o11 = {
                    "done": v10,
                    "value": v6,
                };
                return o11;
            },
        };
        return o12;
    },
};
const v16 = new Int16Array(14);
new Uint8ClampedArray(4096);
const v22 = new Int32Array(128);
const v23 = [5,4142,11,268435456,11,-30743,4096,268435440,1753297073];
function f24() {
    const v26 = Int16Array > Int8Array;
    const v27 = v26 ? Int16Array : Int8Array;
    let v28;
    try { v28 = v16.subarray(128, 4096); } catch (e) {}
    const v29 = Symbol.keyFor(Int16Array, v28, v27, v28);
    for (let v30 = 0; v30 < 32; v30++) {
        v29["p" + v30] = v30;
    }
    o13[538] = Int8Array;
    const v35 = new Uint32Array(127);
    const v38 = new Uint32Array(256);
    new Uint8ClampedArray(11);
    Int8Array.b = Int8Array;
    const v43 = gc();
    Object.defineProperty(v23, 1, { writable: true, enumerable: true, value: v23 });
    Object.defineProperty(v35, 16, { enumerable: true, value: Uint32Array });
    Symbol(v28);
    v22.indexOf(v26, v1, ...v22, v43, ...v38, ...v29);
    Object.defineProperty(v22, "e", { get: Symbol });
    v0 = v2;
    return Int8Array;
}
%PrepareFunctionForOptimization(f24);
f24();
%OptimizeFunctionOnNextCall(f24);
f24();
