const v3 = [-48480,6,65537,-1767538054,16,1073741825,64,127,-9,1073741823];
const v4 = [-2,1554768728,2,536870912,129];
const v5 = [1868302205,44903,-10,-65535,-65537,-128,-1251948339,1345408314,1465595405,-40486];
const v9 = new BigUint64Array(208);
function f10(a11, a12) {
    v9.filter(a11);
    return a11;
}
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    a17 % a17;
    const v20 = this.constructor;
    v20.bind(a17, F15, this, F15);
    try { new v20(); } catch (e) {}
}
const v23 = new F15();
v23.constructor;
const v25 = new v9();
v3["reverse"]();
try {
    v4.length = 2;
} catch(e31) {
}
new Function("1532738280");
class C36 {
}
for (let v39 = 0; v39 < 25; v39++) {
    const o43 = {
        "c": v3,
        [Function]: 2,
        "arguments": v25,
        "type": "undefined",
        set e(a41) {
        },
    };
    try {
        o43.g = v39;
    } catch(e44) {
    }
    try {
        const o45 = {
        };
        o45.g = v39;
        o45.b = v39;
        try {
            const t45 = null;
            t45.valueOf = C36;
        } catch(e47) {
        }
    } catch(e48) {
    }
    try {
        const o49 = {
        };
        o49.g = v39;
        o49.b = v39;
        o49.c = v5;
    } catch(e50) {
    }
    try {
        new Uint8ClampedArray(1322);
        Int16Array.g = -49300;
        -49300 | Int16Array;
        const o57 = {
        };
        o57.g = v39;
        o57.b = v39;
        o57.a = 2;
    } catch(e58) {
    }
    Math.sin(v39 ** 2);
}
