class C3 {
    set f(a5) {
        this[-5.0] = this;
        const t3 = "number";
        delete t3?.h;
    }
    static #valueOf(a8, a9) {
        super.b <<= a8;
        try {
            const o11 = {
            };
            this.fuck(undefined, o11, o11);
        } catch(e13) {
        }
        return a9;
    }
}
const v14 = new C3();
new v14();
const v17 = Symbol.toPrimitive;
const o27 = {
    [v17]() {
        const o19 = {
        };
        try {
            o19.h = -5.0;
        } catch(e20) {
        }
        try {
            const o21 = {
            };
            o21.h = -5.0;
            o21.g = this;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.h = -5.0;
            o23.g = this;
            o23.e = this;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.h = -5.0;
            o25.g = this;
            o25.d = -5.0;
        } catch(e26) {
        }
        return "number";
    },
};
new C3();
const v30 = 1073741824 & 1073741824;
const v31 = [6.621588498634488e+307,1.0,3.0,-5.0,-1.7976931348623157e+308,-1.7976931348623157e+308,257.7405098162435,-136018.55674827856];
const v32 = [v31,v31];
v31.concat(v32, v32, true, v30);
new Int16Array(1791);
try { new Uint16Array("number", Int16Array, -5.0); } catch (e) {}
new Uint16Array(16);
const v44 = new Uint8Array(6);
const v45 = v44?.findLastIndex;
try { new v45(6); } catch (e) {}
("toString")[3];
-0.0 >>> -0.0;
function f55(a56, a57, a58, a59) {
    const o64 = {
        [a58](a61, a62, a63) {
            switch (a56) {
                default:
                    break;
            }
        },
    };
    return a59;
}
f55.arguments = f55;
