function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 16;
    } catch(e3) {
    }
    try {
        this.e = 16;
    } catch(e4) {
    }
    try {
        this.f = 16;
    } catch(e5) {
    }
}
const v6 = new F0();
new F0();
const v8 = new F0();
const v9 = v8?.constructor;
try { new v9(); } catch (e) {}
try { new Map(); } catch (e) {}
new Map();
const v14 = /ND2/gds;
try { v14.exec(v6); } catch (e) {}
/W\1\2(a(?:\1(b\1\2))\2)\1/gvdisy;
const v17 = /a(?=b)c(xmxyz{1,32}v)*/dim;
class C18 extends Map {
    static [v6] = v6;
    #m(a20, a21, a22) {
        v8[v17] = v6;
        new F0();
        try {
        const t0 = -128n;
        t0(a21, ...-128n, a20, F0, 268435439n, -128n);
        } catch (e) {}
        return v6;
    }
    5 = v6;
    static #a = Map;
    static e = v8;
    #e = v17;
}
C18.e;
const v29 = new C18();
let v30;
try { v30 = v29.isPrototypeOf(C18); } catch (e) {}
const v31 = new C18();
const v32 = v31?.constructor;
let v33;
try { v33 = new v32(); } catch (e) {}
v33[5] = v33;
const v34 = new C18();
v34[5] = v34;
10 >> 10;
const v38 = 10 & 10;
const v40 = 7 * 7;
v40 ^ v40;
try { new Date(F0, v30, v33, F0, F0, v38, v33); } catch (e) {}
Date.length = Date;
class C44 {
    static {
        try { new this(); } catch (e) {}
        for (let v47 = 0; v47 < 25; v47++) {
            function f48() {
                return C44;
            }
            try { f48.apply(Map, Map); } catch (e) {}
            try { new f48(); } catch (e) {}
            const v51 = [601759695];
            const v52 = [1073741824,1073741823,1376142744,1073741825];
            function f54(a55, a56, a57, a58) {
                try { new a55(); } catch (e) {}
                a57 < a57;
                a58 + a58;
                try { new a55(); } catch (e) {}
                a56 >>> a56;
                a57 << a57;
                a58 + a58;
                function f67() {
                    return a55;
                }
                const v68 = f48();
                const v70 = new Int8Array();
                const v73 = new Uint32Array(4);
                [v73];
                BigUint64Array.length = BigUint64Array;
                ~536870887;
                const v78 = BigUint64Array * 536870887;
                v78 - v78;
                const v80 = v78 ** v78;
                v80 + v80;
                Number.isNaN(v80);
                function f84(a85, a86) {
                    return v68;
                }
                try { f84(this, a55); } catch (e) {}
                let v88;
                try { v88 = f84(v51, 7); } catch (e) {}
                v88.g = v88;
                const v89 = f84();
                v89.prototype = v89;
                const v90 = v70.buffer;
                const v91 = v90?.__defineGetter__;
                try { new v91(f67, v90); } catch (e) {}
                Object.defineProperty(v90, "constructor", { writable: true, configurable: true, value: Date });
                2147483648 % 2147483648;
                const v95 = new Int8Array();
                const v96 = v95?.entries;
                try { new v96(); } catch (e) {}
                v90.slice(2147483648);
                %OptimizeFunctionOnNextCall(f67);
                let v100;
                try { v100 = v52["find"](..."find", a58, ...v51, ...v52, ...522675525n); } catch (e) {}
                Symbol.for(Symbol.matchAll.description);
                Symbol.for(Symbol("find").description);
                const v111 = new Uint8ClampedArray();
                const o112 = {
                    ...v111,
                };
                o112.e = o112;
                o112.e = o112;
                v100 <= a57;
                return arguments;
            }
            f54.name = f54;
            for (let v114 = 0; v114 < 5; v114++) {
                f54(this, v114, v114, v114);
            }
        }
    }
}
