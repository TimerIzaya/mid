const v1 = new WeakMap();
function f5(a6) {
    const o13 = {
        __proto__: a6,
        set a(a8) {
            let v7 = this;
            const v9 = delete v1[164];
            a8 = 2147483649;
            %VerifyType(509407943);
            v7 &&= v7;
            2147483649 - (a6 -= v9);
            new WeakSet();
        },
        ...a6,
        "d": a6,
        "h": a6,
        1964: WeakMap,
    };
    o13[1964];
    return o13;
}
try { f5(509407943); } catch (e) {}
const v16 = f5(509407943);
const v17 = f5(14);
v17.h = v17;
f5(v17);
[537.6450950632559,-719.6498455429414,-1000.0];
const v20 = [-7.5889405942253845,2.0,Infinity,0.2569181606062786,-130779.11990021379,2.220446049250313e-16,1.4366507775247746e+308,-2.2250738585072014e-308,-1000000000.0,0.3674268910444114];
try { v20.lastIndexOf(v20); } catch (e) {}
const v22 = [2.220446049250313e-16,0.2533799352651359,-4.967630029669364,-5.114510389476705e+307,-2.0,-1000000.0,4.0,0.7598775008121651,-359.6231910767593,357580.0147840623];
[v16];
[[WeakMap,2147483649,v17,v20,14,v22,v20,509407943]];
const v26 = [];
try { v26.filter(14); } catch (e) {}
Float64Array.length;
const v31 = new Float64Array(2402);
v31[2367] = v31;
v31[22] = v31;
const v34 = new Uint8ClampedArray(10);
try { v34.find(2402); } catch (e) {}
const v37 = -1;
new Uint32Array(1);
2 % 2;
2 - 2;
2 >> 2;
const v46 = [];
try { v46.some(Uint32Array); } catch (e) {}
const v48 = [v46];
class C50 extends Map {
}
try { new C50(); } catch (e) {}
C50.length;
const v53 = C50.length;
v53 >> v53;
const v55 = v53 >> v53;
v55 >> v55;
const v57 = new C50();
const v58 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
class C62 extends Int32Array {
    [Set] = false;
    [v58];
}
new C62();
let v64;
try { v64 = v57.get(v20); } catch (e) {}
const v65 = new C50(v48);
const v66 = new C50(v65);
v66.size = v66;
4096 === 4096;
const v70 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
Uint32Array.name = Uint32Array;
const v72 = Uint32Array.name;
try { v72.search(v64); } catch (e) {}
let v74;
try { v74 = v72.trimRight(); } catch (e) {}
const v75 = v74?.replaceAll;
try { new v75(v58, v74); } catch (e) {}
const v77 = new Uint32Array();
const v79 = [601759695];
v79.g = v79;
const v80 = [1073741824,1073741823,1376142744,1073741825];
try { v80.group(v17); } catch (e) {}
function f83(a84, a85, a86, a87) {
    try { a84.toLocaleString(); } catch (e) {}
    const v89 = a84?.constructor;
    try { v89(a87, v79, a87); } catch (e) {}
    v89.prototype = v89;
    let v91;
    try { v91 = v89(); } catch (e) {}
    try { v89(); } catch (e) {}
    const v95 = arguments[0]?.constructor;
    try { new v95(v37, v37, C50); } catch (e) {}
    const v97 = arguments.length;
    -v97;
    Object.defineProperty(v57, "e", { configurable: true, enumerable: true, value: f83 });
    try { ("entries").trimStart(); } catch (e) {}
    v65["entries"](a86, ...v66, BigUint64Array, ..."entries", a85, v97);
    const v103 = new Float32Array();
    let v104;
    try { v104 = v103.subarray(Uint8ClampedArray, v37); } catch (e) {}
    const v105 = v104?.entries;
    try { new v105(); } catch (e) {}
    new BigUint64Array();
    const v110 = new String();
    try { v110.getUTCMilliseconds(); } catch (e) {}
    Number.isNaN(v110.setSeconds(v110, "jFd1"));
    const v115 = v103?.entries;
    try { new v115(); } catch (e) {}
    try { ("e").codePointAt(v48); } catch (e) {}
    class C119 {
    }
    C119.e = C119;
    class C120 {
    }
    const v121 = C120.name;
    let v122;
    try { v122 = v121.anchor(v121); } catch (e) {}
    try { v122.codePointAt(v64); } catch (e) {}
    Symbol.match = Symbol;
    const v125 = Symbol.toStringTag;
    Symbol.for(v125.description);
    v65[v125] = v125;
    function f129() {
        let v131;
        try { v131 = ("Vre").charAt(4096); } catch (e) {}
        let v132;
        try { v132 = v131.lastIndexOf("Vre", a84, v131); } catch (e) {}
        const v133 = v132 !== v132;
        v133 || v133;
        v133 || v133;
        let v136;
        try { v136 = ("Vre").codePointAt(v64); } catch (e) {}
        v136 * v136;
        const v138 = v136 - v136;
        v138 <= v138;
        v138 == v138;
        v136 ^ v136;
        let v142 = Float64Array;
        v142.length;
        try { v142(v131, v133, f83); } catch (e) {}
        let v145;
        try { v145 = v142.from("e"); } catch (e) {}
        const t142 = [-3.0];
        t142.length >>>= 213;
        new Uint8ClampedArray(129);
        try { v145.with(-4294967297n, -4294967297n); } catch (e) {}
        v142 = a85;
        let v152 = v70.length;
        const v153 = v152 | v152;
        v153 >>> v153;
        new Int8Array();
        const o157 = {
        };
        class C158 {
            constructor(a160, a161, a162) {
                for (let v163 = 0; v163 < 5; v163++) {
                    function f165() {
                        const o173 = {
                            [-4294967297n](a167, a168, a169, a170) {
                                eval(C158);
                            },
                        };
                        return f165;
                    }
                    f165();
                    %OptimizeFunctionOnNextCall(f165);
                }
            }
        }
        C158.length = C158;
        const v175 = v152++;
        function F176(a178, a179, a180) {
            if (!new.target) { throw 'must be called with new'; }
            const v181 = this.constructor;
            try { new v181(); } catch (e) {}
            this.e = a180;
        }
        class C183 {
        }
        try { new C183(); } catch (e) {}
        let v185;
        try { v185 = C183(); } catch (e) {}
        for (let v186 = 0; v186 < 5; v186++) {
            new F176(undefined, v185);
        }
        try {
        } catch(e189) {
        }
        const o217 = {
            268435439: v79,
            ..."e",
            n(a191, a192) {
                return a192;
            },
            m(a194) {
                return v175;
            },
            m(a196) {
                return Map;
            },
            [f129]() {
            },
            ["entries"](a199, a200) {
            },
            valueOf(a202, a203) {
                return a202;
            },
            get h() {
                return v70;
            },
            [v80](a206, a207, a208) {
            },
            "toPrimitive": v91,
            get f() {
                return this;
            },
            [-4294967297n](a211, a212, a213, a214) {
                eval(a213);
            },
        };
        return v65;
    }
    f129.isConcatSpreadable = f129;
    function f218() {
        function F220() {
            if (!new.target) { throw 'must be called with new'; }
            const v222 = this.constructor;
            try { v222(v222, v222); } catch (e) {}
            try { new v222(); } catch (e) {}
        }
        new F220();
        new Int8Array(1073741823);
        return 1073741823;
    }
    try { new f129(); } catch (e) {}
    const v229 = f129();
    try { v229.get(a85); } catch (e) {}
    const v232 = Array();
    try { v232.findLast(f83); } catch (e) {}
    function f234(a235, a236, a237, a238) {
    }
    const o239 = {
    };
    for (let v240 = 0; v240 < 5; v240++) {
    }
}
for (let v241 = 0; v241 < 10; v241++) {
    f83(v77);
}
