function f3() {
    return -11n;
}
[1000.0,-284.45484659182216,-447224.0329346823,-Infinity,-2.0390096943284168e+307,712.7902730614655,-1000000000.0,1.0];
[-6.737435327515229,0.019422661403720953,3.0,1.0,743203.1937665392,1000000000.0];
const v9 = [2.597984163455737e+307,709.8648577658464,0.06446076121577071,-2.0752889260206697e+307];
class C16 {
    [-4.0] = -7.645692469523979;
    constructor(a18, a19) {
        const v20 = this?.constructor;
        try { new v20(1.0126260068434707e+308, C16); } catch (e) {}
        a18 != a18;
        try {
            this.length = 2;
        } catch(e24) {
        }
    }
    #m(a26) {
        const v27 = super.b;
        Math.abs(v27);
        let v31 = -2147483648 / -2147483648;
        const v32 = ++v31;
        v31 || v27;
        Math.log10(-2147483648);
        Math.atan2(-2147483648, -2147483648);
        !v32;
        return 1.0126260068434707e+308;
    }
}
new C16(-4.0, -4.0);
const v38 = new C16(-7.645692469523979, C16);
v38.length = v38;
const v39 = new C16(-7.645692469523979, C16);
const v40 = v39.length;
const v43 = new Uint8Array(0);
try { v43.values(); } catch (e) {}
2522 != 2522;
Float32Array.length;
new Float32Array(2522);
new Uint16Array(3);
let v54 = 3409;
v54++;
const v56 = v54 - v54;
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v58 = new Uint8Array(4096);
const v59 = v58.includes(v56);
v59 && v40;
let v62 = 255;
const v63 = new Array(v62);
class C67 extends Array {
    static n(a69, a70, a71, a72) {
        [0.1270426937578495,a71,v59];
        const v74 = [1.0,Array];
        [v74,a70];
        return v74;
    }
    static [Array] = v62;
    static #n(a77, a78, a79) {
        const v80 = 1.0 == v63;
        if (v80) {
            super.at(a77);
        } else {
            new BigUint64Array(11);
            const v87 = ("536870888")[3];
            const o88 = {
            };
            const t66 = o88.constructor;
            t66(128).toExponential(v87);
            new Int16Array(1);
            new Uint16Array(1758);
        }
        return v80;
    }
}
const v98 = new C67();
const v99 = new C67();
const v100 = new C67();
function f101(a102, a103, a104, a105) {
    const o155 = {
        ...v98,
        "c": a104,
        set g(a107) {
            let [v108,v109,,v110] = v100;
            try {
                this.__proto__ = this;
                new Date(..."undefined");
                v62++;
                for (let v115 = 0; v115 < 5; v115++) {
                    const v118 = v115 >> -18321;
                    const v119 = Math.log1p(v115);
                    try { Math.sin(v119); } catch (e) {}
                    v9 && 0.0;
                    new Uint32Array(129);
                    new BigInt64Array(16);
                    new Int8Array(2409);
                    Math.tan(v118);
                }
            } catch(e133) {
            }
            const v134 = Array(a104);
            %PrepareFunctionForOptimization(Array);
            -(536870912n << 536870912n);
            class C138 {
            }
            function f139(a140, a141) {
                const o142 = {
                    "c": a141,
                    __proto__: C138,
                };
                o142.c;
                return o142;
            }
            async function f144(a145, a146, a147, a148) {
                await a103;
                return a102;
            }
            f144(v134, 536870912n, v63, 256n);
            %OptimizeFunctionOnNextCall(f139);
            Array(a104, a103);
            Array(a104);
            %OptimizeFunctionOnNextCall(v99);
            v109(a104);
        },
    };
    return o155;
}
const t126 = 256n;
t126(0.0, v98, f101(0.1270426937578495, v99, f101(0.1270426937578495, v100, 0.0, 0.0), 0.1270426937578495), 0.0);
function F160(a162, a163) {
    if (!new.target) { throw 'must be called with new'; }
    const v164 = this.constructor;
    try { new v164(a163); } catch (e) {}
    a163 == a163;
    this.g = a162 !== a162;
}
new F160(v43, -418967591n);
