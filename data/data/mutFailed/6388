class C3 {
    c;
    #m(a5, a6) {
        let v4 = this;
        a6[2] = a5;
        let v7;
        try { v7 = a6(987.3913765451775, 0.14922916512017514, 0.14922916512017514, v4, v4); } catch (e) {}
        v4 = v7;
        const v8 = delete a5?.[10];
        try { v8(v8, a5); } catch (e) {}
        return 783123970;
    }
    [0.14922916512017514] = 987.3913765451775;
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
const v13 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
const v14 = new v12();
const v15 = new v12();
const v16 = new v12();
class C17 extends v12 {
    constructor(a19, a20, a21) {
        super();
        class C23 extends v15.constructor {
            static #a = this;
            static [v13] = this;
        }
    }
    4294967295;
}
new C17(v14, v16);
class C25 extends C3 {
    d = v11;
    #p(a27, a28, a29, a30) {
        +this;
        super.a = a29;
        return a30;
    }
    #a = v12;
    static 257 = 783123970;
    static #b;
    static [v10] = C3;
}
const v32 = new C25();
const v33 = new C25(v32);
const v34 = new C25();
class C38 {
    static #m(a40, a41) {
        return a41;
        ("3").normalize("NFKD");
        return a40?.[179];
    }
    ["valueOf"] = "valueOf";
    b;
    13;
}
C38.name = C38;
[2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
class C47 {
    constructor(a49, a50) {
    }
}
new C47();
const v53 = new C47();
new C47();
[C3,783123970];
[];
v53 << -1557853178;
[3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f63(a64, a65) {
    return f63;
}
f63();
const v69 = new Set();
function F70(a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a72;
    } catch(e74) {
        for (let [v75,v76] of a72) {
            class C77 {
            }
            const t83 = C77().g;
            t83.length = 1;
            v69.values();
        }
    }
    try {
        this.h = v69;
    } catch(e82) {
    }
    new Date();
    Array(19793);
    const v88 = [19793];
    v88.g = v88;
    try {
        const v89 = v69[this];
        try {
            new F70(v89, -2046072084n);
        } catch(e92) {
        }
        this.b = Set;
    } catch(e93) {
    }
}
const v94 = new F70();
let [v95,,...v96] = v69;
v94.toString = v96[Symbol.toPrimitive];
new F70();
const v102 = new Float32Array();
for (const v103 of v102) {
    function F104(a106, a107) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v103;
    }
    new F104();
}
Array();
const v115 = new C38();
const v116 = new C38();
const v117 = new C38();
v117[13] = v117;
const v118 = [0.602038268284836,-1.7976931348623157e+308,-4.211494269917182,-939259.7989376923,0.02623941368615268];
function f119() {
    try {
        v34.d = 987.3913765451775;
    } catch(e120) {
    }
    return v33;
}
v118.toString = f119;
const v121 = [2.220446049250313e-16,-2.220446049250313e-16,-1000.0];
try { v121.entries(); } catch (e) {}
const v123 = [-1000000000.0,4.0,-9.792130726362629];
v123.toString = f119;
function F124(a126, a127, a128, a129) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a126;
    a129.toString = f119;
    try { this.p(); } catch (e) {}
    try { a126.toString(); } catch (e) {}
    a129[1];
    try {
        this.b = v116;
    } catch(e133) {
    }
    try {
        this.h = a128;
        const v135 = /[abc+]/gvdim.sticky;
        const v136 = /ka{0}/guims;
        function f137(a138, a139) {
            const o140 = {
                ...v136,
                "d": v13,
                "c": a139,
                "g": a139,
                "f": v13,
                "b": v135,
                "a": a139,
            };
            return f137;
        }
        %PrepareFunctionForOptimization(f137);
    } catch(e141) {
    }
    try {
        this.c = v118;
    } catch(e142) {
        class C143 {
        }
        for (let i146 = 0, i147 = 10;
            i146 < i147;
            (() => {
                const v151 = [601759695];
                const v152 = [1073741824,1073741823,1376142744,1073741825];
                function f154(a155, a156, a157, a158) {
                    function f159() {
                        return a155;
                    }
                    function f160(a161, a162) {
                        return i146;
                    }
                    f160(v152, C143);
                    try { v152["find"](..."find", a158, ...v151, ...v152, ...522675525n); } catch (e) {}
                    return a157;
                }
                for (let v166 = 0; v166 < 10; v166++) {
                    f154(v166, f154, i146, v166);
                }
                i146++;
            })()) {
        }
    }
}
F124.e = v116;
F124.e = F124;
new F124(v123, v121, -1.7560623034267127e+308, v123);
const v172 = new F124(v118, v121, -1.7560623034267127e+308, v116);
v172.e = v172;
new F124(v118, v123, v115, -1.7560623034267127e+308);
const v175 = new BigUint64Array();
function F176() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v178 = 0;
        let v179 = 0;
        while (0 - 0, v179 < 0) {
            for (let v183 = 0; v183 < 5; v183++) {
            }
            v179++;
        }
        do {
            try { v175.entries(); } catch (e) {}
            const v187 = v178++;
            v187 >>> v187;
        } while (v178 < 5)
    } catch(e191) {
    }
}
try { new F176(); } catch (e) {}
new F176();
