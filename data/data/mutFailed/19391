const v0 = [];
function f1() {
    const o5 = {
        __proto__: v0,
        ...v0,
        "c": v0,
        get e() {
            try {
                v0.fill(this);
            } catch(e4) {
            }
            return this;
        },
        ...v0,
        "g": v0,
        [v0]: f1,
        ...v0,
    };
    return o5;
}
const v6 = f1();
const v7 = f1();
const v8 = f1();
function f9(a10) {
    const o18 = {
        "h": v0,
        "f": v6,
        [f9]: v8,
        ...v8,
        "d": v0,
        [v7]: v7,
        "g": v6,
        __proto__: v8,
        "f": v8,
        ...a10,
        ...v0,
        [f1]: a10,
        set a(a12) {
            try { new a12(a12, v6, a12); } catch (e) {}
            try { a10.filter(f1, a10); } catch (e) {}
            [-2147483649,0,-9007199254740992,-676896719,11,-4294967296,-953525870];
            [-7142,65536,2,9851,9];
            [-256,-6,1428616231];
        },
    };
    return o18;
}
const v19 = f9(v6);
f9(v6);
f9(v8);
function f22() {
    return v8;
}
new Uint16Array(11);
new Uint16Array(256);
new Float32Array(5);
Object.defineProperty(v19, "c", { writable: true, enumerable: true, get: f9 });
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = f22;
    } catch(e36) {
    }
}
new F32(256, 5);
new F32(256, 11);
new F32(5, 11);
gc();
