[16];
[4,536870888,-15,-16,129,13,9223372036854775807,-4096];
[16,127,-1024,-65537,55579,9007199254740992,-25064];
function f15() {
}
new Int8Array(128);
const v19 = /(?:a*)+q(?<a>.)/guds;
function f20(a21) {
    a21.dotAll;
    const o24 = {
        get d() {
            return v19;
        },
    };
    return v19;
}
new Uint8Array(15);
new Float32Array(3098);
new BigUint64Array(4);
const v36 = Date.prototype;
try { v36.setFullYear(); } catch (e) {}
new Set();
(~9007199254740990).constructor;
const v44 = ("minor").valueOf("minor", "minor", "minor", "minor");
async function f45(a46, a47, a48, a49) {
    (await v44).call();
    return "minor";
}
function F54(a56) {
    if (!new.target) { throw 'must be called with new'; }
    function f57() {
        new Float64Array();
        function f60(a61, a62, a63) {
        }
        class C64 {
        }
        const v65 = new C64();
        const v66 = [C64,C64];
        [v65,v66,v66];
        return v44;
    }
    function f68() {
        class C72 {
            [1.7976931348623157e+308] = 23354;
            #h;
            1;
            [23354];
            [-4.055130549492246];
        }
        const v73 = [f68,f68];
        let v74;
        try { v74 = v73.every(f68); } catch (e) {}
        return v74;
    }
    const v75 = this.constructor;
    new Set();
    function F78(a80, a81, a82, a83) {
        if (!new.target) { throw 'must be called with new'; }
        function f84(a85) {
            return a80;
        }
        this.constructor = f84;
    }
    ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach(Float64Array);
    const o92 = {
        toString(a90, a91) {
            return F78;
        },
    };
    try { o92.toString(Float64Array, Float64Array); } catch (e) {}
    function f94(a95, a96) {
        o92.g /= 257;
        return 257;
    }
    try { new v75(); } catch (e) {}
    this.g = 257;
    this.g = -1;
    this.h = a56;
}
new F54(257);
new F54();
class C101 extends TypeError {
}
new Float64Array([-9223372036854775808,-12]);
const v109 = [Uint8ClampedArray];
function F111(a113, a114, a115, a116) {
    if (!new.target) { throw 'must be called with new'; }
    const v117 = this.constructor;
    try { new v117(0, F111, F111); } catch (e) {}
    const t89 = a115.constructor;
    new t89();
}
v109[0] = v109;
Reflect.construct(Uint8ClampedArray, v109);
const v122 = new BigInt64Array(1);
v122[0] = v122;
class C123 extends F54 {
    [6];
    valueOf(a125, a126, a127, a128) {
        const v129 = this?.constructor;
        try { new v129(); } catch (e) {}
    }
    constructor() {
        super();
        Math.acosh();
    }
}
new C123();
