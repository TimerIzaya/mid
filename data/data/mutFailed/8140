let v1 = Float64Array;
new v1(9);
new Uint8Array(7);
const v7 = new Uint8ClampedArray();
const o8 = {
    ...v7,
};
o8.b = Set;
function f11() {
    return ("D")[0];
}
new Uint8Array(3190);
new Float64Array(3815);
new Float64Array(5);
const v23 = v1++;
v23 * v23;
class C25 {
}
const v26 = [];
const v29 = new Float32Array(4061, 4061);
const v30 = v26.constructor;
class C31 extends v30 {
    [4061] = v29;
    3;
}
new BigUint64Array(9);
const v38 = ([])["concat"]("concat");
function f39(a40) {
    return v38.toPrimitive;
}
const v43 = new Uint16Array(2785);
v43.fill();
let v45 = 0;
v45++;
new Uint32Array(Uint32Array, v30);
const v49 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
const o58 = {
    [v38]() {
        for (let v52 = 0; v52 < 500; v52++) {
            const o57 = {
                [v49](a54, a55, a56) {
                },
                ...v52,
            };
        }
    },
};
const v59 = o58.null(null);
o58.null(v59, v59, v49, o58, o58);
