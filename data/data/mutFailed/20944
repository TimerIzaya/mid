const v2 = new Uint8ClampedArray(10);
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f5(a6, a7, a8, a9) {
    try { v4["find"](..."find"); } catch (e) {}
    return a9;
}
for (let v12 = 0; v12 < 10; v12++) {
    f5();
}
const v15 = new Int32Array(9);
new Uint8Array(1358);
const v21 = new Uint8ClampedArray(3222);
let v23 = Int32Array;
new v23(190);
class C26 {
    constructor(a28, a29) {
        const o31 = {
            84: arguments,
        };
    }
}
function f34() {
    ("D")[0].substring(129);
    return "D";
}
f34();
new Int16Array(16);
v23 **= v23;
Object.defineProperty(v2, 16, { writable: true, enumerable: true, get: f34 });
class C46 {
}
const v47 = new C46();
const v48 = new C46();
const v49 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v50 = [601759695];
const v51 = [1073741824,1073741823,1376142744,1073741825];
function f53(a54, a55, a56, a57) {
    function f59() {
        const o74 = {
            "e": -4294967295,
            ...v49,
            84: arguments,
            ..."Vre",
            "g": 190,
            toString(a63, a64) {
                f53 += f53;
                ++a57;
                a63[Symbol.iterator] = "Vre";
                return "Vre";
            },
            set b(a69) {
            },
            ["Vre"](a71, a72) {
                super[f59];
            },
        };
        return a54;
    }
    class C76 extends Float32Array {
        constructor(a78, a79, a80) {
        }
    }
    const v81 = f59();
    %OptimizeFunctionOnNextCall(f59);
    let v83;
    try { v83 = v51[a56](..."find", a57, ...v50, ...v51, ...522675525n); } catch (e) {}
    const v85 = Symbol.toPrimitive;
    const o88 = {
        [v85]() {
            f5(v81, this, Uint8ClampedArray, 522675525n);
            return "find";
        },
    };
    v83 <= a56;
    return arguments;
}
const t76 = "9007199254740992";
t76["255"] &= 7;
[1000,1000,1000,1000,1000];
for (let v95 = 0; v95 < 10; v95++) {
    f53();
    const v99 = ("undefined").normalize("NFC");
    function F100() {
        if (!new.target) { throw 'must be called with new'; }
        const v104 = v99 == Uint8ClampedArray ? v99 : Uint8ClampedArray;
        const v105 = v48[7];
        let v106;
        try { v106 = v104.p(v105); } catch (e) {}
        Reflect.construct(v104, [v21,v15], v106);
    }
    new F100();
}
%OptimizeFunctionOnNextCall(f53);
for (const v111 in v48) {
    const t94 = Int32Array();
    t94[3] = 9007199254740991;
    v47.p("m");
}
f53(v51, f53, 522675525n);
