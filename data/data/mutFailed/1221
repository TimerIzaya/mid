new Int32Array(-33252n);
[];
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    a9.lastIndexOf(a9, a10);
}
new F7(34687n);
(87).constructor;
class C17 {
    p(a19) {
        const v20 = this - 34687n;
        for (const v21 in this) {
            new Float64Array([-25855,-25855,[false]]);
        }
        delete this[v20];
        return 128n;
    }
    e;
    [128n] = 128n;
    #f;
    static #b = -33252n;
}
new C17();
new C17();
new C17();
("vZa2U").normalize("NFKC");
("boolean").split("toString");
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
let v46 = new F43();
const v47 = new F43();
v46 |= v47;
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a51;
}
const v56 = new Date();
v56.getUTCDay();
class C61 {
}
const v62 = Array();
const v63 = new C61();
function f64(a65, a66, a67) {
    const o75 = {
        toString(a69, a70, a71) {
            a66 < v62;
            super[v63];
            return a66;
        },
        get d() {
            return this;
        },
    };
    return a66;
}
%PrepareFunctionForOptimization(f64);
f64(v62, v63, f64());
%OptimizeFunctionOnNextCall(f64);
f64();
