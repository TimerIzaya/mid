const v1 = new Set();
function f2(a3) {
    const o12 = {
        o(a5) {
            const o6 = {
            };
            const v8 = new Proxy(v1, o6);
            return v8;
        },
        "b": a3,
        set a(a10) {
            a3?.a;
        },
        "h": v1,
        "e": v1,
        "POSITIVE_INFINITY": Set,
    };
    return o12;
}
const v13 = f2(v1);
f2(f2(Set));
new BigInt64Array(12);
new Uint8Array(3464, f2, v13);
new Uint8Array(-1831670489);
/[8a(?=bbb|bb)c]/gums;
const v26 = /a[a]/vdsy;
const v27 = /M/gus;
class C31 {
    #h = 1e-15;
    static get e() {
        function f33() {
            return 1e-15;
        }
        return this;
    }
    static [v27];
    set f(a35) {
        const v36 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        for (let v37 = 0; v37 < 5; v37++) {
            v36 | v37;
        }
        this == a35;
    }
    #g = 3.7122420217608383;
    static 65536;
}
new C31();
new C31(BigInt64Array, v1);
new C31();
new Set();
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f54() {
    let v56 = 1000000000000.0;
    const v57 = v56--;
    +v57;
    class C62 {
        constructor(a64) {
            const v66 = new Float32Array();
            try { v66.entries(); } catch (e) {}
            const v68 = new Uint16Array(12, -4294967296, v57);
            new Float32Array(v68, -4294967296, 268435439, v56, v68);
        }
    }
    try { new C62(12); } catch (e) {}
    const v71 = new C62(257828.6336153492);
    const v72 = new C62();
    const v73 = new C62(-4294967296);
    const v74 = [v73,C62];
    const v75 = [257828.6336153492,v73,v71,v73,v74];
    const v76 = [v73];
    class C77 extends C62 {
        [v71];
    }
    const v78 = new C77();
    const v79 = v76.constructor;
    try { v79.valueOf(v76); } catch (e) {}
    class C81 extends v79 {
    }
    C81.a = C81;
    const v82 = new C81();
    const v83 = v82?.constructor;
    try { new v83(C62, v75); } catch (e) {}
    Object.defineProperty(v82, 65537, { value: v72 });
    try { v78.m(v74); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f54);
f54(v26);
%OptimizeFunctionOnNextCall(f54);
f54();
