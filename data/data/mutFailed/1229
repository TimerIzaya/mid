const v2 = new BigInt64Array(205);
v2[257] = BigInt64Array;
const v4 = [v2,205];
Reflect.apply(v2.set, v2, v4);
new Uint16Array(256);
new Float64Array(255);
function F13(a15, a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a16;
    } catch(e19) {
    }
    try {
        this.h = a15;
    } catch(e20) {
    }
}
new F13(255, 205, 255, 205);
new F13(255, 256, 256, 256);
new F13(255, 205, 256, 255);
[-Infinity,-5.577012134541006];
[-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
[-2.220446049250313e-16,-171953.22769972356,2.220446049250313e-16,Infinity,-3.0,-4.368087235127776];
const v27 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v28 = /\c4a.[(x)(x)(x)\4*(x)(x)(x)\3*]/gmy;
const v29 = /G(a)\1a+8?/vdimsy;
const v30 = [Infinity];
try { v30.pop(); } catch (e) {}
const v32 = [2.2250738585072014e-308,1.949684848262672,4.0];
try { v32.push(v27); } catch (e) {}
const v35 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0])?.toStringTag;
let v36;
try { v36 = new v35(); } catch (e) {}
let v37 = -198895178;
v37 | v37;
24356 % 24356;
class C41 {
    static #n(a43, a44) {
        function F45(a47, a48, a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
        }
        v29[243] -= v36;
        ++v37;
        F45(v28);
    }
}
