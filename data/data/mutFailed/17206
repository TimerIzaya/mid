new Map();
new Uint8Array(512);
function F7() {
    if (!new.target) { throw 'must be called with new'; }
}
const v9 = new F7();
function f10(a11, a12) {
    const o13 = {
        "e": v9,
    };
    return o13;
}
f10();
new Float32Array(9);
const v18 = new Float32Array(118);
class C19 extends Uint32Array {
    static #e = Float32Array;
    [118] = 512;
    h;
    static #h;
    static #p(a21, a22, a23) {
        const o24 = {
        };
        new Proxy(v18, o24);
        return a22;
    }
    static #d;
    [Uint32Array] = Uint8Array;
    #a;
}
const v27 = new C19();
new C19();
new C19();
function f30() {
    return f30;
}
class C31 extends f30 {
}
class C32 extends C31 {
}
const v35 = new BigUint64Array();
v35[2445191368] = 268435441n;
for (const v36 in v27) {
}
function f39(a40, a41, a42, a43) {
    let v44;
    try { v44 = a40(a43, 3, 3); } catch (e) {}
    Uint8Array & a41;
    const v46 = 3 | C32;
    v46 * v46;
    a40 / a40;
    Date[-22872n] = Date;
    const v51 = [237.40427484073666,938352.7862596414];
    function f52(a53) {
    }
    v51.toString = f52;
    a41 < a40;
    const o58 = {
        n(a56, a57) {
            return a43;
        },
    };
    return v44;
}
const v59 = [-9007199254740991,536870888,51292,-2147483649];
const v60 = [536870912,-124426018];
const v61 = [23930,454087404,65536,-6,-1955199007,1,1073741824,14];
function f62(a63) {
    try { a63.map(v60); } catch (e) {}
    a63[0] = a63;
    const o69 = {
        "e": v59,
        "c": v60,
        [v61]: v61,
        "a": v61,
        [v59]: v61,
        get f() {
            let {"h":v66,"length":v67,...v68} = v61;
            this.toString = v66;
            return v68;
        },
    };
    return o69;
}
f62(v59);
f62(v60);
f62(v61);
function F73() {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = this?.constructor;
    v75.e = v75;
    try { new v75(); } catch (e) {}
}
F73.arguments = F73;
const v77 = new F73();
try { v77.hasOwnProperty(f62); } catch (e) {}
let v81;
try {
const t0 = "object";
v81 = t0(v77, "number", F73);
} catch (e) {}
function f82(a83) {
    return v81;
}
for (let v84 = 0; v84 < 500; v84++) {
    f39(Uint8Array);
}
function F86(a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
}
const v91 = new BigUint64Array();
function F92(a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    function f96() {
        try { v91.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
        return a94;
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f96 });
}
const v102 = new F92();
class C103 {
    static [v102];
}
