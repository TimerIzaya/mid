let v4;
try { v4 = ("1704396501").anchor(4294967297); } catch (e) {}
try { ("-6").trimLeft(); } catch (e) {}
const v8 = [127,-65536,4294967297,-65536];
function f9() {
    Object.defineProperty("-6", 277, { writable: true, value: "undefined" });
    function F10(a12, a13, a14) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.g = a13;
        } catch(e15) {
        }
        try {
            this.a = "1704396501";
        } catch(e16) {
        }
    }
    new F10("undefined", "undefined", -65536);
    const v18 = new F10("-6", "undefined", v4);
    new F10("1704396501", "undefined", 4294967297);
    return v18;
}
v8.toString = f9;
const v20 = ["1704396501",v8,-65536];
function f21(a22) {
    const v24 = new WeakMap();
    return v24;
}
v20.valueOf = f21;
try { v20.map(-65536); } catch (e) {}
[v20,"undefined"];
2.0 & 2.0;
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = 2.0;
    function f35() {
        const v37 = Symbol.replace;
        v8[v37] = this;
        return v37;
    }
    a33[Symbol.toPrimitive] = f35;
    function f40() {
        return f9;
    }
    Object.defineProperty(a34, "constructor", { writable: true, configurable: true, enumerable: true, get: f40 });
    a33[1];
    try { a33.sort(4294967297); } catch (e) {}
    let v43;
    try { v43 = a34.slice(v8, a33); } catch (e) {}
    v43.length;
    try {
        this.d = a33;
    } catch(e45) {
    }
    try {
        this.b = a34;
    } catch(e46) {
    }
}
try { F31(-65536, 2.0); } catch (e) {}
new F31(v20, "-6");
new F31(v8, v20);
const v50 = new F31(v8, "1704396501");
v50.d = v50;
let v51 = 0.7556184011642024;
v51--;
-1.0 - -1.0;
1447991408 >>> 1447991408;
const v60 = -536870912 & -536870912;
v60 === v60;
-9007199254740990;
const v65 = 9007199254740990 >> 9007199254740990;
v65 >> v65;
9n / 9n;
9007199254740990 | -9007199254740990;
