const v0 = [];
new Uint8ClampedArray(127);
new Uint32Array(127);
new Float32Array(512);
let v16 = -1024;
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
}
const v23 = new F17(v16, v16, F17, F17);
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v25 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
}
function f31() {
    const v34 = new Uint8Array(481);
    v34.indexOf(Uint8Array, 481);
    return v0;
}
F27.toString = f31;
const v36 = new F27();
class C37 {
}
const v39 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v40 = [601759695];
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 1163987790;
}
function F44(a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
}
function f50(a51, a52, a53, a54) {
    function f55() {
        let v58 = Float64Array;
        v58 = a52;
        const v59 = v24.length;
        try {
            v24.forEach(v58);
        } catch(e61) {
        }
        const v62 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v64 = Symbol.toPrimitive;
        const o70 = {
            toString(a66, a67) {
                const v68 = a54 && v58;
                a66 *= v64;
                v68 <= v62;
                return F27;
            },
        };
        const o97 = {
            m() {
                return f55;
            },
            5: "Vre",
            [a53](a74, a75, a76) {
                super[v16];
            },
            "c": -4294967297n,
            [522675525n](a79, a80) {
            },
            "c": v40,
            valueOf(a82, a83) {
            },
            [-4294967297n](a85, a86, a87, a88) {
            },
            "e": -268435456,
            "maxByteLength": f55,
            "arguments": v39,
            ...v23,
            [v64]() {
            },
            "type": C37,
            ..."Vre",
            valueOf(a91, a92) {
                return Symbol;
            },
            ...f55,
            4: "Vre",
            toString(a94, a95, a96) {
                return a94;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v16 %= -268435456;
        new Uint32Array(v25, v59, v64);
        v36 - f55;
        try {
            new Float64Array(127);
        } catch(e106) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    function f113(a114) {
        let v117 = 413368.55193535704;
        v24 << v24;
        Math.clz32(a54);
        let v120 = v117++;
        Math.imul(v24, v120);
        Math.cosh(v120);
        v120++;
        return v36;
    }
    f55.toString = f113;
    const v124 = f55();
    %OptimizeFunctionOnNextCall(f55);
    return v124;
}
for (let v125 = 0; v125 < 5; v125++) {
    f50(v36, F17, F27, v125);
}
