const v0 = [1000000.0,-1000000.0,-2.0,908252.4912012208,-0.0,-1.079522978981702e+308,1000.0,NaN];
const v1 = [1.7431641894144261e+308,484.05543374885497,-7.46390432996848e+305];
const v3 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v4 = [601759695];
v4[0] = v4;
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f7(a8, a9, a10, a11) {
    function f13() {
        -268435456 >> -268435456;
        const o21 = {
            "e": -4294967295,
            ...v3,
            ..."Vre",
            "c": a11,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a19, a20) {
                return a20;
            },
            ..."Vre",
            4: "Vre",
            5: -4294967295,
            6: -268435456,
        };
        return v4;
    }
    f13();
    %OptimizeFunctionOnNextCall(f13);
    let v24;
    try { v24 = v5[a10](..."find", a11, ...v4, ...v5, ...522675525n); } catch (e) {}
    const v25 = v24 <= a10;
    v25 && v25;
    return arguments;
}
try { f7(v1, v3, v1, v3); } catch (e) {}
for (let v28 = 0; v28 < 10; v28++) {
    f7();
}
%OptimizeFunctionOnNextCall(f7);
f7(v5, f7, 522675525n)[2];
[-2.0,-1000000000.0,-1.0,Infinity,0.699710973163288,0.690677932907918];
const v33 = [-1000000000000.0,5.0,6.499220546684338,-2.220446049250313e-16,2.220446049250313e-16,-53791.02466437896,577784.1418617098,-478167.9335639228,2.220446049250313e-16];
try { v33.map(v33); } catch (e) {}
let v35;
try { v35 = v33.flat(); } catch (e) {}
v35[5];
const v37 = [746.7102221841046,2.2250738585072014e-308,-1.7976931348623157e+308,0.0,-8.123708092584184,2.0];
v37[3] = v37;
const v38 = [-1000000000.0];
v38[0] = v38;
-10n;
class C43 {
    #p(a45, a46, a47, a48) {
        Object.defineProperty(a45, this, { configurable: true, value: v37 });
        new BigInt64Array(9);
        new Float32Array(252);
        new Float64Array(0);
        return Float64Array;
    }
}
C43.a = C43;
new v0();
const v59 = new C43();
const v60 = v59?.constructor;
try { new v60(); } catch (e) {}
try { v59.constructor(); } catch (e) {}
const v63 = new C43();
const v64 = v63?.constructor;
let v65;
try { v65 = new v64(); } catch (e) {}
const v66 = v65?.__defineGetter__;
try { new v66(v37, v37); } catch (e) {}
const v70 = Symbol.iterator;
const t74 = "string";
t74[v70] = v70;
