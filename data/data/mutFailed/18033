const v3 = [-9223372036854775808,-941441987,-1,1518884250,45315,-536870912,-13,-47857,-786584406];
const v4 = [-2147483649,-9007199254740990,25471];
const v5 = [-296560361];
const v6 = [-22095,-13,12,10000,32646,536870888];
const v7 = [685016789,0,-9223372036854775807,19775,-11,65535];
const v8 = [4096,715910218,-738722412,62199,1073741825,-53912,46202];
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 9n;
    } catch(e14) {
    }
    try {
        this.c = v5;
    } catch(e15) {
    }
}
new F9(v6, v7, v5);
const v17 = new F9(v6, v4, v5);
new F9(v5, v3, v8);
const v20 = new Set();
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a23;
    } catch(e25) {
        for (let [v26,v27] of a23) {
            class C28 {
            }
            const v29 = new C28();
            const v30 = v29.g;
            try {
                v30.length = 1;
            } catch(e32) {
            }
            try {
                v29.values();
            } catch(e34) {
            }
        }
    }
    try {
        this.h = v20;
    } catch(e35) {
    }
    try {
        const v36 = v20[this];
        try {
            new F21(v36, v20);
        } catch(e39) {
        }
        this.b = Set;
    } catch(e40) {
    }
}
const v41 = new F21(Set, 9223372036854775807n);
let [v42,,...v43] = v20;
const v46 = v43[Symbol.toPrimitive];
try {
    v41.toString = v46;
} catch(e47) {
}
new F21(Set, F21);
const v49 = new F21(v41, F21);
[28.464807941936897,0.6876471799475875,-4.024971662372387,-1000000000.0,-982.6382193743566,Infinity,0.0,-4.0,-821.2850284587798];
[0.27109226904944717,-4.9641037907328345,0.0,2.220446049250313e-16];
[-0.0,1.0,Infinity,609.6267739945692,0.5061350985708035];
const v56 = [65537,268435441,63298,-5,1235122603];
const v57 = [128,215394418];
let v58;
try { v58 = v57.entries(); } catch (e) {}
const v59 = [-2,-4294967296,4294967297];
function F60(a62, a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this.constructor;
    try { v66(1024, 1024, v56); } catch (e) {}
}
const v68 = new F60(-714582153, F60, -714582153, v57);
const v70 = new F21(v49, null);
new Float32Array(16);
const v76 = new v58(0);
const v80 = Reflect.set(v76, [1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691], 268435439);
class C81 {
}
class C82 extends v17 {
    get f() {
        for (const v85 of this()) {
        }
    }
}
new Int32Array(1519);
const v89 = v68.length;
const v90 = new F60(9, v68, 9, v59);
v90.b = v89;
const v91 = new F60(1024, v90, v59, v59);
let v97;
try { v97 = ("string").trimStart(); } catch (e) {}
v58?.[3];
let v101;
try { v101 = v97(); } catch (e) {}
v56[v101] = v57;
0 ^ 9;
const v106 = -1000;
~16 >>> v106;
a = v76.length - F60;
v20[v90];
v70.__proto__;
-35417 - -35417;
class C114 {
}
function f115(a116, a117, a118, a119) {
    return v91;
}
f115(v80, v97);
v58[v90] ||= ([1024,19026,1125846339]).length;
Math.tan(-1);
function f126() {
    const o134 = {
        ...v97,
        [-2]: 1.7976931348623157e+308,
        __proto__: 256,
        [1.7976931348623157e+308](a130) {
            0 < 10;
        },
    };
    return o134;
}
const v135 = f126();
class C136 extends null {
    3164398692 = v135;
    10000 = f126;
}
C136[741] %= 13;
const o140 = {
    set b(a139) {
        v101 <<= -1;
    },
};
