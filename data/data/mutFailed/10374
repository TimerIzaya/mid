function f3() {
    return 1000.0;
}
const v4 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v6 = new Int16Array(v4, v4, v4);
const v8 = [1073741824,1073741823,1376142744,1073741825];
function f9(a10, a11, a12, a13) {
    function f14() {
        new Int32Array(v4, a13, v6);
        try {
            v8.forEach(a11);
        } catch(e18) {
            const v20 = new Float32Array();
            v20[2] = v20;
            function f21() {
                return Float32Array;
            }
        }
        const o29 = {
            [-4294967297n](a23, a24, a25, a26) {
                eval();
            },
        };
        return o29;
    }
    f14();
    eval();
    %OptimizeFunctionOnNextCall(f14);
    return -4294967297n;
}
for (let v33 = 0; v33 < 5; v33++) {
    f9();
}
function f35(a36) {
    const o62 = {
        "h": 1000.0,
        get a() {
            this.__proto__;
            for (let v39 = 0; v39 < 100; v39++) {
                f3();
            }
            return 1000.0;
        },
        "e": a36,
        "b": Infinity,
        [5.0](a42) {
            function f43(a44) {
                function F45(a47) {
                    if (!new.target) { throw 'must be called with new'; }
                    function f48(a49, a50, a51) {
                        function f53(a54) {
                            return a49;
                        }
                        a50 > a47;
                        f53 && a49;
                        return a47;
                    }
                    Worker(f48);
                }
                return a44;
            }
            class C61 extends f43 {
                static #g = a42;
                static a = this;
                static 4294967296 = Infinity;
            }
            return f43;
        },
    };
    return o62;
}
const v63 = f35(Infinity);
f35(5.0);
const v65 = f35(Infinity);
class C66 {
    static #d = 1000.0;
    static get h() {
        /a[^a]/usy;
        /q/sy;
        /abc+?(?<=)[foo(?<!bar)baz?]?/gvdimy;
        try {
            super.fromCharCode(v63, this);
            function F72(a74, a75) {
                if (!new.target) { throw 'must be called with new'; }
                const v76 = this.constructor;
                try { new v76(); } catch (e) {}
                Math.acosh();
            }
        } catch(e80) {
        }
        return 1000.0;
    }
    static #h;
    [1000.0] = Infinity;
    [Infinity];
    #b;
}
const v81 = new C66();
const v82 = new C66();
new C66();
function F84(a86, a87, a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a87;
    } catch(e90) {
    }
}
const v91 = new F84(5.0, v82, v65, C66);
const v92 = new F84(1000.0, v91, v91, C66);
new Set();
function f95(a96, a97, a98, a99) {
    function f100() {
        const o104 = {
            valueOf(a102, a103) {
                return f95;
            },
        };
        o104.valueOf();
        return a99;
    }
    f100();
    f100();
    return f95;
}
new F84(Infinity, v81, v92, v82);
function* f110(a111, a112, a113, a114) {
    return a112;
}
("by").normalize();
gc();
gc();
"toString" == "toString";
("boolean").split("toString");
const o124 = {
    get f() {
    },
};
