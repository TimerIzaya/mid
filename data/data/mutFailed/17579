const v1 = /a(?!bbb|bb)c/vi;
const v2 = v1.toString;
let v3;
try { v3 = v2(); } catch (e) {}
const v6 = [-976.3988062840774];
v6.g = v6;
try { v6.map(-779338.8745349308); } catch (e) {}
const v8 = [1000.0,2.220446049250313e-16,-276.19928277067936];
try { v8.filter(1.0); } catch (e) {}
[-5.0,-35512.95651348063,-276.0624739550992,3.0,128.31795557030432,678.6937893666836,302.4652331893649];
try { Int8Array(v3, v1, 1000000000000.0); } catch (e) {}
new Int8Array(326);
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v17 = new Uint8Array(6);
function f18(a19, a20) {
    for (let v21 = 0; v21 < 5; v21++) {
        const o23 = {
        };
        gc(o23);
    }
    return v2;
}
v17.toString = f18;
v17[1] = v17;
new Int16Array(25);
536870912n !== 536870912n;
function f32(a33, a34) {
    const o42 = {
        set g(a36) {
            function F37(a39, a40, a41) {
                if (!new.target) { throw 'must be called with new'; }
            }
        },
    };
    return 536870912n;
}
try { new f32(1.0, -779338.8745349308); } catch (e) {}
f32.e = f32;
-3.8127471528589885 != -3.8127471528589885;
