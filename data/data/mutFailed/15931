const v0 = [];
function f1(a2, a3) {
    v0.constructor;
    const v8 = new Float32Array(3562);
    v8.lastIndexOf(-128);
    return v0;
}
v0.toString = f1;
function F10() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v0;
    try {
        this.a = v0;
    } catch(e12) {
    }
    try {
        this.f = v0;
    } catch(e13) {
    }
    try {
        this.c = v0;
    } catch(e14) {
    }
}
const v15 = new F10();
const v16 = new F10();
v16.a = v16;
const v17 = new F10();
class C18 {
    n(a20, a21) {
        try {
            new F10();
        } catch(e23) {
        }
        try {
            this.toString = v0;
        } catch(e24) {
        }
        return v16;
    }
    static [v16];
    static [v0] = F10;
    #g;
    6 = v16;
}
try { new C18(); } catch (e) {}
new C18();
new C18();
const v28 = new C18();
v28[6] = v28;
let v31 = -532.4669449879644;
const v32 = v31++;
function f37(a38, a39, a40, a41) {
    const v43 = 2 >>> 2;
    const v44 = new Float32Array(2);
    const o48 = {
    };
    try {
        o48.b = v32;
    } catch(e49) {
    }
    try {
        const o50 = {
        };
        o50.b = 2;
        o50.b = v32;
        o50.f = v31;
    } catch(e51) {
    }
    try {
        const o52 = {
        };
        o52.b = v32;
        o52.f = v31;
        o52.g = v43;
    } catch(e53) {
    }
    try {
        const o54 = {
        };
        Object.defineProperty(o54, "f", { configurable: true, value: 2 });
        o54.b = v32;
        o54.f = v31;
        o54.a = v15;
    } catch(e55) {
    }
    v44[1] = v44;
    Int32Array.d = Int32Array;
    const v57 = new Int32Array();
    const v58 = v57?.constructor;
    try { new v58(a39, a39, a39); } catch (e) {}
    %VerifyType(a41);
    try {
        C18.fuck(v15, v17, 4294967295);
    } catch(e61) {
    }
    const v62 = v44;
    v57.fill();
}
for (let v64 = 0; v64 < 625; v64++) {
    f37();
}
