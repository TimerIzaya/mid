const v2 = new BigUint64Array(137);
Int16Array.prototype = Int16Array;
const v5 = new Int16Array(3148);
16 % 16;
const v9 = new Float32Array(16);
v9[8] = v9;
class C10 {
    constructor(a12, a13, a14, a15) {
        a12 >>> a12;
        try { a13.filter(a13); } catch (e) {}
        a14 != a14;
        for (let v20 = 0; v20 < 32; v20++) {
            const t12 = "p";
            t12[0] = "p";
            v2["p" + v20] = v20;
        }
    }
    static [3148] = Int16Array;
    static [BigUint64Array] = Float32Array;
    static [Float32Array] = Float32Array;
    static #d = 3148;
}
try { C10.apply(BigUint64Array, v2); } catch (e) {}
const v24 = new C10(16, v5, 3148, 3148);
const v25 = new C10(3148, v24, 16, 16);
const v26 = v25?.constructor;
try { new v26(v2, BigUint64Array, v25, C10); } catch (e) {}
const v28 = new C10(137, Float32Array, 3148, 3148);
const v29 = v28?.constructor;
try { new v29(v28, v24, v5, v9); } catch (e) {}
class C31 {
}
const v32 = new C31();
const v33 = v32?.constructor;
try { new v33(); } catch (e) {}
let v35 = 591114.0785999324;
const v36 = v35++;
v36 - v36;
const v38 = [v35,v35];
try { v38.copyWithin(v25, C31); } catch (e) {}
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(this, F41, F41, this); } catch (e) {}
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    let v45 = 9223372036854775807;
    v45--;
    let v48;
    try { v48 = Date.toString(F41, v45); } catch (e) {}
    v48[14] = v48;
    Date(v35);
    let v52;
    try { v52 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
    v52[2] = v52;
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    const v53 = new Uint32Array(5);
    let v54;
    try { v54 = v53.reduce(Date); } catch (e) {}
    try { v54.charCodeAt(v48); } catch (e) {}
    Set.name;
    const v59 = new Set(v38);
    const v60 = v59?.add;
    try { new v60(v52); } catch (e) {}
    let v63;
    try { v63 = ("delete").blink(4); } catch (e) {}
    v63[10] = v63;
    v63[4] = v63;
    const v64 = v59["delete"](839612.5677247904);
    !(v64 || v64);
    const v67 = 839612.5677247904 || v64;
    v67 * v67;
    const v69 = v67 && v67;
    v69 != v69;
    const o72 = {
    };
    o72.b = o72;
    o72.e = 19793;
    try { new Array(v45); } catch (e) {}
    let v76;
    try { v76 = ("getPrototypeOf").blink(); } catch (e) {}
    try { v76.strike(); } catch (e) {}
    let v78;
    try { v78 = v76.strike(v35); } catch (e) {}
    class C80 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    C80.length;
    class C82 extends C80 {
        ["getPrototypeOf"] = C80;
    }
    try { new C82(); } catch (e) {}
    C82.e = C82;
    const v84 = new C82();
    const v85 = v84?.getPrototypeOf;
    try { new v85(); } catch (e) {}
    v84.constructor;
    try { new v32(F41, v69); } catch (e) {}
    const v89 = Array(19793);
    for (const v90 of v89) {
    }
    const v91 = [v89,v89,v89,v89,v89];
    let v92;
    try { v92 = v91.includes(839612.5677247904); } catch (e) {}
    v92 && v92;
    BigUint64Array.e = BigUint64Array;
    try { v78.reduceRight(v38); } catch (e) {}
    for (let v96 = 0; v96 < 5; v96++) {
    }
}
try { new F41(); } catch (e) {}
new F41();
const v99 = new F41();
const v100 = v99?.constructor;
try { new v100(); } catch (e) {}
