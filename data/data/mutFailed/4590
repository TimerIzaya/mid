let v0 = [];
const v1 = [-2.6333760308798205e+307,-1000.0,1000000000000.0,1e-15,-1000.0,494.00435374088215];
const v2 = [1.059761190647178e+308,0.6995141689773126,1000000000000.0,1.7976931348623157e+308,-1000000.0];
const v4 = ([-4.971719414756704,-0.0,0.9052168097224449,-5.0,0.8515269606343439,3.0])[2];
-v4;
const v6 = [-2,13];
let v7;
try { v7 = v6.sort(v6); } catch (e) {}
for (const v8 in v2) {
    v1[parseInt] <<= v7;
}
v0 &= v2;
const v10 = [-256,64,4294967295];
let v11;
try { v11 = v10.find(v10); } catch (e) {}
[-15430,9007199254740992,1,-42448,-1533278518,4,1024,104404838,0];
[-116836204,536870912,-16017,-1131181359,1073741824,65537,-45232,-572787583];
[-8,4,4294967295,-59895];
v2.length &= v11;
typeof v11 === "symbol";
const v18 = [-1010608269,-256,8,-437713543,536870887,585014013,-4,-5,1145644500];
let v19;
try { v19 = v18.map(v10); } catch (e) {}
class C24 {
    constructor(a26) {
        const v28 = Symbol.iterator;
        const o30 = {
            [v28]() {
            },
        };
    }
}
try { new C24(C24); } catch (e) {}
for (let i34 = 0;
    i34 < 10;
    (() => {
        ~i34;
        let v39 = i34++;
        v39--;
    })()) {
    try {
    const t0 = -44394n;
    t0();
    } catch (e) {}
    const v44 = !-1802551371;
    v44 || v44;
}
~2147483649;
const v48 = 2147483649 * 2147483649;
v48 - v48;
1872886191 << 1872886191;
try { Int32Array(1872886191, 1872886191, "-9007199254740992"); } catch (e) {}
new Int32Array(512);
new BigUint64Array(129);
const v61 = new Int8Array(1676);
try { v61.reduce("number"); } catch (e) {}
const v63 = [-1.7976931348623157e+308,1000000000.0];
const v64 = [4.0902151973711183e+307,-758.964951148866,1e-15,-5.261122784521454];
v64[3];
v64[3] = v64;
const v66 = [-2.2250738585072014e-308,-3.0,1000000000.0,-6.987156890700151,4.0];
v66[3] = v66;
try { v66.toLocaleString(); } catch (e) {}
function f68() {
}
f68.length;
let v70;
try { v70 = new f68(); } catch (e) {}
const v72 = [1000000000000.0];
v72[1] = v72;
const v73 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
try { v73.includes(1000000000000.0); } catch (e) {}
new Uint8Array(v73);
try { v70.propertyIsEnumerable(v2); } catch (e) {}
try { ("EV").toLocaleLowerCase(); } catch (e) {}
let v80 = 0;
v80++;
const v82 = v80 >>> v80;
v82 - v82;
class C84 {
    #m(a86, a87) {
        class C88 {
            e;
        }
    }
}
const v89 = new C84();
try { v89.propertyIsEnumerable(v89); } catch (e) {}
function f91(a92, a93) {
    %VerifyType("object");
    Math.sign(-65535);
    Math.cosh(-44394n);
    const v98 = -65535 >> -65535;
    Math.cbrt(-65535);
    v98 >> -65535;
    a92.g = a92;
    try { a93.forEach(v19); } catch (e) {}
    a92[1] = a92;
    const o110 = {
        "a": v64,
        "d": a93,
        "type": "EV",
        p(a103, a104) {
        },
        get c() {
            a93[1];
            a92[v64];
            return v66;
        },
    };
    let v111 = 268435439;
    v111--;
    const o120 = {
        toString(a114, a115, a116) {
            function f117() {
                return a116;
            }
            Object.defineProperty(a114, Symbol.toPrimitive, { writable: true, get: f117 });
            return Symbol;
        },
    };
    o110.a = o110;
    const v121 = /\xf0\x9f\x92\xa9a*/us;
    1 >>> 1;
    function F125(a127, a128, a129, a130) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.hasOwnProperty(v2); } catch (e) {}
        a130.length;
        a127.flags = a127;
        a128 >>> a128;
        a129 + a129;
    }
    try { new F125(-6, v111, v4, v18); } catch (e) {}
    const v136 = new F125(v121, 1, -1263139894, F125);
    const v137 = v136?.constructor;
    let v138;
    try { v138 = new v137(v136, v136, a93, o110); } catch (e) {}
    const v139 = v138?.constructor;
    try { new v139(a92, a92, v64, v64); } catch (e) {}
    return o110;
}
f91.length = f91;
f91(v63, v63);
const v142 = f91(v66, v66);
class C144 extends f91 {
    static #f = v142;
}
C144.length;
try { new Uint8Array(f91, f91, f91); } catch (e) {}
const v148 = new Uint8Array();
try { v148.entries(); } catch (e) {}
function f150(a151, a152, a153, a154) {
    try { a151.bind(a151); } catch (e) {}
    a152 >> a152;
    try { a153.reduceRight(a152); } catch (e) {}
    a151.length = a151;
    class C158 {
    }
    function f159() {
        const v163 = Symbol.toPrimitive.description.codePointAt(C158);
        return v163 >> v163;
    }
    const v165 = f159();
    v165 - v165;
    %OptimizeFunctionOnNextCall(f159);
    const v167 = a153?.findLast;
    try { new v167(Int32Array); } catch (e) {}
    const o169 = {
    };
    o169.c = o169;
    new Int8Array(3);
    function f173(a174, a175, a176, a177) {
        %OptimizeFunctionOnNextCall(a176);
        return a175;
    }
    %OptimizeFunctionOnNextCall(f173);
    function f178() {
    }
    const o185 = {
        n(a180, a181) {
            const v182 = this?.n;
            try { new v182(-44394n, f68); } catch (e) {}
            a180--;
        },
    };
    try { o185.n(a154, o185); } catch (e) {}
}
for (let v187 = 0; v187 < 625; v187++) {
    f150(f150, v187, v148, v187);
}
