const v2 = new BigUint64Array(4062);
let v3 = -8386;
v3++;
try { new BigInt(v3, BigUint64Array, v2); } catch (e) {}
const v7 = new BigInt(v3);
const v8 = v7?.buffer;
let v9;
try { v9 = new v8(BigUint64Array, v2, v2); } catch (e) {}
const v12 = new Float64Array(4);
class C13 {
    static get h() {
        let v15;
        try { v15 = this(this, this, BigInt); } catch (e) {}
        const v17 = [v15];
        Int8Array.apply(v12.sort, v7, v17);
        return 4062;
    }
    d = v3;
    static #e;
}
new C13();
new C13();
new C13();
function f23() {
    return f23;
}
try { new Int16Array(f23, Float64Array, 4); } catch (e) {}
const v26 = new Int16Array();
v26.constructor = f23;
v26.filter(f23, v8, v9);
