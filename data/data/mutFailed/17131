const v2 = new Array(255);
class C3 {
    #p(a5, a6) {
        new Uint8ClampedArray(226);
        new Int8Array(129);
        new Float64Array(10);
        return 255;
    }
}
const v16 = new C3();
const v17 = new C3();
v17[Symbol.toPrimitive] = Array;
const v20 = new C3();
function f21() {
    const v22 = [-6.078081144782104,3.0,-1000.0,4.739392359408212,-1.3763335971087312e+307,5.0,0.8267200417626637,276.24411996178765,2.2250738585072014e-308];
    for (let v23 = 0; v23 < 25; v23++) {
        v22["p" + v23] = v23;
    }
    return 255;
}
let v26 = [v20,Array,v2,v20];
const v27 = [v17,255,v26,255,C3];
[v20,C3,v2];
class C29 {
    static [v20];
    #o(a31, a32, a33) {
        super.d -= a31;
        v26 = a32;
        return a32;
    }
    static #p(a35, a36, a37, a38) {
        Array(255);
        %PrepareFunctionForOptimization(Array);
        Array(255);
        Array(255);
        %OptimizeFunctionOnNextCall(Array);
        const v42 = Array(255);
        let v43 = 0;
        do {
            v16[2147483648] = v20;
            try {
                a35.b = v2;
            } catch(e44) {
            }
            v43++;
        } while (v43 < 8)
        return v42;
    }
    #e;
    static [v17];
}
Object.defineProperty(C29, v20, { value: v17 });
const o48 = {
};
try {
    o48.c = Array;
} catch(e49) {
}
try {
    const o50 = {
    };
    o50.c = v20;
    o50.c = Array;
    o50.e = 255;
} catch(e51) {
}
try {
    const o52 = {
    };
    o52.f = o52;
    o52.c = Array;
    o52.e = 255;
    o52.f = v27;
} catch(e53) {
}
try {
    const o54 = {
    };
    o54.c = Array;
    o54.e = 255;
    o54.f = 255;
} catch(e55) {
}
new C29();
new C29();
new C29();
let v60 = -16n;
function f61() {
    v60 *= -1911645276n;
    return -1911645276n;
}
f61();
f61();
f61();
