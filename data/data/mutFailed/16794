function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 9421;
    } catch(e3) {
    }
    try {
        this.e = 9421;
    } catch(e4) {
    }
}
new F0(F0);
const v6 = new F0(F0, F0, F0);
new F0();
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
}
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this.__lookupGetter__;
    try { v17(); } catch (e) {}
    const v20 = Date.toString();
    const v21 = v20[23];
    try { v21.strike(F15, F15, v20, Int16Array); } catch (e) {}
    const v23 = v20.replaceAll();
    let v24;
    try { v24 = v23.replaceAll(); } catch (e) {}
    const v26 = new Uint32Array(v17, v17, v17);
    v26[2];
    const v29 = new Set(v24);
    const v30 = v29.add;
    const v32 = v29["delete"]();
    const v33 = v32 || v32;
    const v34 = v33 || v33;
    const v35 = v33 && v33;
    const o37 = {
    };
    let v39;
    try { v39 = v29.forEach(v34, v30); } catch (e) {}
    const v41 = -v32;
    v41 >>> v41;
    const v43 = Int16Array >>> v34;
    try {
        arguments.fuck();
    } catch(e45) {
    }
    const v47 = ("getPrototypeOf").blink();
    const v48 = v47.trimRight;
    try { v48(v34, Int16Array); } catch (e) {}
    const v50 = v47[28];
    const v51 = v50.strike();
    try { v51.isWellFormed(); } catch (e) {}
    const v53 = v47.strike(v24);
    const v54 = v53.replace(v32, Int16Array, v47, Array, v53);
    v54[11] = v54;
    class C55 {
    }
    class C56 extends C55 {
        ["getPrototypeOf"] = C55;
    }
    new C56();
    v6.getPrototypeOf;
    const t61 = 20514;
    new t61();
    const v60 = new F11();
    const t65 = v60.constructor;
    const v62 = new t65(v26);
    v62.valueOf(Int16Array, F15);
    const v64 = new C56();
    const t69 = v64.constructor;
    new t69();
    const t71 = v64.getPrototypeOf;
    new t71();
    const v70 = BigUint64Array.of();
    try { v70.entries(Int16Array, F15, v21); } catch (e) {}
    let v72 = Int8Array;
    try { v72(v72, v72, v39); } catch (e) {}
    const v74 = new C56();
    const v75 = v74.getPrototypeOf;
    new v75();
    v74.getPrototypeOf;
    const v78 = new F15();
    const v79 = v78.__defineSetter__;
    try { v79(v43); } catch (e) {}
    const t84 = v74.getPrototypeOf;
    const v82 = new t84();
    v82.getPrototypeOf = v82;
    const v83 = new C56();
    const v84 = v83.getPrototypeOf;
    const v85 = new v84(F15, "getPrototypeOf", v23);
    v85.b = v85;
    const v86 = new v84();
    const v87 = v86.constructor;
    try { v87.call(v50); } catch (e) {}
    const v89 = new v87();
    v89.getPrototypeOf;
    v72++;
    const t95 = v83.constructor;
    const v93 = new t95(F15, v35);
    const v94 = v93.constructor;
    new v94(v94);
    const v96 = v93.getPrototypeOf;
    try { v96.toString(arguments, v96, v75); } catch (e) {}
    const v98 = Array(19793);
    v98.with(v47, v43);
    for (const v100 of v98) {
    }
}
new F15();
new F15();
new Array(3);
[2.2250738585072014e-308,3.794940768423041];
[0.9022233289233671,3.6910370454848795,6.768623982312345e+307,-0.0,1000000000000.0,0.34808765433555966,5.0];
[1e-15,2.220446049250313e-16,1.7976931348623157e+308,5.090287883694613,0.6631738036923792];
function F113() {
    if (!new.target) { throw 'must be called with new'; }
    for (let [v116,v117,v118,v119] of F0) {
    }
}
