function f0() {
}
const v2 = new f0();
class C3 {
    static #b;
    m(a5) {
        super[Map];
        function f7() {
            return v2;
        }
        return v2;
    }
    set c(a9) {
        this[Map] = this;
        new WeakMap();
        delete v2?.size;
        try {
            this.#b = f0;
        } catch(e13) {
        }
        let v14;
        try { v14 = a9(f0, f0, C3, f0, a9); } catch (e) {}
        try { this.m(v14, a9, f0, f0); } catch (e) {}
    }
    b;
    [v2];
    c;
    #g;
    #c = Map;
    d;
    static #a;
}
new f0();
const v17 = new Map();
const v18 = new v17();
[-4,257,40907,4294967296,-121453107,9,2038340944,33073,6];
[-4294967297,-7,536870887];
[7,-728810650,36097,-16,-1871983610];
const v22 = [-423540.3650805291,0.6820649643017599,1.7976931348623157e+308];
[279502.193659368,NaN,-346.7894047286377];
[-958.4153612609343,-590.5702884038508,129.84779788113178,-1.2851302942707532e+308,-7.090985540606312,-5.0,Infinity,-2.220446049250313e-16];
new Date();
gc(v22, f0);
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
const v42 = F35.constructor;
try { v42(v18); } catch (e) {}
const v46 = [3.0];
for (let v47 = 0; v47 < 10; v47++) {
    function F48(a50, a51, a52) {
        if (!new.target) { throw 'must be called with new'; }
        const v53 = this?.constructor;
        try { new v53(Map, v46); } catch (e) {}
    }
    new F48();
}
