function f0() {
    12 / 12;
    const o13 = {
        11: 12,
        [12](a6, a7) {
            super.d -= (a6 ^ this) ^ "boolean";
            %VerifyType("boolean");
            return "boolean";
        },
        "execution": "boolean",
        162: "boolean",
        valueOf(a11, a12) {
            return "boolean";
        },
        "e": "boolean",
        785: -2147483647,
        __proto__: "boolean",
        "a": 12,
        15: 12,
        "d": -2147483647,
        "c": "boolean",
    };
    return o13;
}
const v14 = f0();
v14[Symbol.toPrimitive] = f0;
f0();
const v18 = f0();
function f19() {
    return v18;
}
let v22;
try { v22 = ("51389").trim(); } catch (e) {}
try { v22.fixed(); } catch (e) {}
16n === 16n;
for (let i = 0; i < 10; i++) {
    const o27 = {
        "a": 16n,
        1: 16n,
        257: undefined,
    };
}
try { ("bigint").localeCompare(v14); } catch (e) {}
const v32 = new Int16Array(9);
Uint32Array.f = Uint32Array;
Uint32Array.f = Uint32Array;
const v35 = new Uint32Array(1214);
v35[977];
121 >>> 121;
try { new Uint8Array(Int16Array, f19, "bigint"); } catch (e) {}
new Uint8Array(121);
let v42 = 256;
const v44 = new Float64Array(v42);
const t53 = "bigint";
t53[v44] = 47457;
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    ~a48;
}
let v51;
try { v51 = new F46(47457, 47457); } catch (e) {}
const v52 = v51?.constructor;
try { new v52(47457, v51); } catch (e) {}
5 + 5;
const v56 = 5 & 5;
v56 === v56;
const v59 = new Int16Array(5);
Float32Array.BYTES_PER_ELEMENT = Float32Array;
Float32Array.name = Float32Array;
const v61 = new Float32Array(v59);
v61[Symbol.toPrimitive] = f19;
try { v61.copyWithin(v51, v61); } catch (e) {}
3 !== 3;
new BigInt64Array(3);
const v71 = this?.SyntaxError;
try { new v71(v22); } catch (e) {}
const v73 = this.DataView;
v73.d = v73;
v73.length = v73;
function f74() {
    return f74;
}
class C75 extends f74 {
}
try { new C75(); } catch (e) {}
const v77 = new C75();
v77.e = v73;
v77.e = v77;
try { v77(); } catch (e) {}
const v80 = new Int16Array(10);
try { v80.findIndex(v42); } catch (e) {}
let v82 = 0n;
v82--;
function F86(a88) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = Symbol;
    this.caller;
    a88--;
    const v91 = a88 ^ a88;
    v91 + v91;
    const v93 = this.constructor;
    v93.prototype = v93;
    let v94;
    try { v94 = new v93(3n); } catch (e) {}
    function f95() {
        return 6n;
    }
    v94.toString = f95;
    try { v94(); } catch (e) {}
    try { v94.toLocaleString(); } catch (e) {}
}
F86.arguments = F86;
F86.prototype = F86;
new F86();
const v102 = new F86(349865170n);
function f103() {
    v42 >>= 1214;
    Symbol("e");
    return v32;
}
v102.constructor = f103;
const v105 = v102?.constructor;
try { new v105(9); } catch (e) {}
