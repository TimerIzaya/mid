class C3 {
    static valueOf(a5) {
        let v6;
        try { v6 = ("toString").localeCompare("toString", "127"); } catch (e) {}
        const v7 = v6 || "stack";
        try { this.toSpliced("toString", "127"); } catch (e) {}
        try { v7(this, this, a5, "stack"); } catch (e) {}
        a5 = "stack";
        Math.expm1(v6);
        const v13 = v6 << "127";
        Math.hypot(v6);
        const v15 = Math.imul(v13, 0);
        Math.atanh(0);
        return v15;
    }
}
new C3();
const v18 = new C3();
const v19 = new C3();
const v20 = /a*/dms;
/4a\nb\bc/gvis;
function f22() {
    for (let v25 = 0; v25 < 5; v25++) {
        const v28 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
        v28[3] = v28;
        const v30 = new BigUint64Array(3375);
        let [v31,,v32,...v33] = v30;
        v25++;
    }
}
const v35 = /(x)(x)(x)\1/gumsy;
class C36 {
    static {
        const o38 = {
        };
        new Proxy("127", o38);
    }
    #g = v19;
    constructor(a42, a43, a44) {
        const v45 = (a46, a47, a48, a49) => {
            'use strict';
            return a46;
        };
        const v50 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
        for (let v51 = 0; v51 < 500; v51++) {
            const o56 = {
                [v50](a53, a54, a55) {
                },
                ...v51,
            };
        }
        super.f = "stack";
        a43 instanceof C3;
        const v58 = ("toString")[10000];
        v58 >= this ? v58 : this;
        let v63 = 0.4666556655531985;
        Math.atanh(9007199254740992);
        let v65 = v63 - 9007199254740992;
        Math.max(v65);
        Math.imul(v65, v18);
        --v65;
        v63++;
    }
}
new C36(v35, v35, v20);
new C36("127", v18, v20);
let v72 = 7;
v72--;
class C74 {
    set e(a76) {
        const v78 = Symbol.iterator;
        const o84 = {
            [v78]() {
                let v80 = 10;
                const o83 = {
                    next() {
                        v80--;
                        return this;
                    },
                };
            },
        };
    }
}
const v85 = new C74();
function f86(a87, a88) {
    const o95 = {
        512: C74,
        4294967295: a87,
        valueOf(a90, a91) {
            return a91;
        },
        "e": v85,
        o(a93, a94) {
            return a94;
        },
    };
    return o95;
}
new C36(C36, v35, v20);
function F97() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 1073741825;
}
const v100 = new F97();
new F97();
const v102 = new F97();
const v104 = new Set();
function F105(a107, a108) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a107;
    } catch(e109) {
    }
    try {
    } catch(e110) {
    }
    v104[this];
    try {
        new F105(a108, v104);
    } catch(e113) {
    }
}
function f114(a115) {
    const o116 = {
        __proto__: v100,
        "a": F97,
    };
    o116.g;
    return o116;
}
f114(v102);
new Map();
function F121() {
    if (!new.target) { throw 'must be called with new'; }
}
const v123 = new F121();
function F124(a126, a127) {
    if (!new.target) { throw 'must be called with new'; }
}
const v128 = new F124(v100, F124);
const t141 = v128.constructor;
new t141();
const v133 = [f114,f114,f114];
function F135() {
    if (!new.target) { throw 'must be called with new'; }
    9223372036854775807 < 9223372036854775807;
    const v140 = Date.toString(F135);
    const v142 = v140[23]?.trimRight;
    try { new v142(); } catch (e) {}
    v140.replaceAll(v123, -37859n);
    const v146 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v146[2] = v146;
    const v147 = v146[2];
    v147 * v147;
    const v151 = new Set(v133);
    try { v151.add(v151); } catch (e) {}
    const v153 = v151.add;
    v153.f = v153;
    try { v153(v146); } catch (e) {}
    try { ("delete").localeCompare(v151); } catch (e) {}
    const v157 = v151["delete"](839612.5677247904);
    const v158 = v157 || v157;
    v158 && v158;
    const v160 = v158 || v158;
    const v161 = v160 && v160;
    const v162 = v158 && v158;
    const v163 = v162 || v162;
    v163 || v163;
    const o166 = {
    };
    o166.b = o166;
    try { new Array(Array); } catch (e) {}
    try { Array(9223372036854775807); } catch (e) {}
    const v171 = ("getPrototypeOf").blink();
    const v172 = v171[28];
    const v173 = v172.strike();
    try { v173.split(v173, v161); } catch (e) {}
    v173[4] = v173;
    const v175 = v171.strike(591114.0785999324);
    const v176 = v175?.search;
    try { new v176(v146); } catch (e) {}
    const v178 = v175.replace(19793, v128);
    const v181 = [-946345318n];
    v181.fill(4);
    v181 > 8n;
    v178[11] = v178;
    class C185 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    try { new C185(); } catch (e) {}
    class C187 extends C185 {
        a;
        static {
            try {
            const t0 = -1.7976931348623157e+308;
            t0();
            } catch (e) {}
        }
        constructor(a191) {
            function f192() {
            }
            const v193 = f192();
            const v194 = [];
            function F195(a197, a198, a199) {
                if (!new.target) { throw 'must be called with new'; }
                a197 === a198;
            }
            function f201() {
                const v202 = new F195();
                const t210 = v202.constructor;
                new t210(v193, v194);
                const t212 = v202.constructor;
                new t212();
            }
            f201();
            %OptimizeFunctionOnNextCall(f201);
            f201();
        }
        ["getPrototypeOf"] = C185;
    }
    new C187();
    const v210 = new C187();
    try { v210.getPrototypeOf(); } catch (e) {}
    const t224 = v210.constructor;
    new t224();
    const v214 = new C187();
    try { v214.getPrototypeOf(); } catch (e) {}
    const v216 = v214.getPrototypeOf;
    v216.length = v216;
    const v218 = BigUint64Array.of();
    try { v218.entries(); } catch (e) {}
    new BigUint64Array();
    new Int8Array();
    Uint8Array.length;
    const v225 = new C187();
    const v226 = v225.getPrototypeOf;
    try { v226.toString(); } catch (e) {}
    const v228 = new v226();
    v228.getPrototypeOf;
    const v230 = v225.getPrototypeOf;
    try { new v230(); } catch (e) {}
    let v232;
    try { v232 = new v230(); } catch (e) {}
    v232.getPrototypeOf = v232;
    const v233 = new C187();
    const v234 = v233?.getPrototypeOf;
    try { new v234(); } catch (e) {}
    const v236 = v233.getPrototypeOf;
    let v237;
    try { v237 = new v236(); } catch (e) {}
    v237.getPrototypeOf = v237;
    try { v236(); } catch (e) {}
    let v239;
    try { v239 = new v236(); } catch (e) {}
    v239.getPrototypeOf;
    try { v239.propertyIsEnumerable(v178); } catch (e) {}
    const v242 = v239?.constructor;
    try { v242.call(v172); } catch (e) {}
    let v244;
    try { v244 = new v242(v171, this, 4); } catch (e) {}
    v244.getPrototypeOf;
    const v246 = v244.getPrototypeOf;
    v246 >>> v246;
    try { v244.constructor(); } catch (e) {}
    const v249 = v233.constructor;
    const v251 = Math.round();
    for (let v252 = 0; v252 < 10; v252++) {
        async function f253(a254, a255, a256) {
            await v251;
            Number.isNaN();
            const t269 = [0.8307152163010869,1.0,0.0];
            t269.length = v252;
        }
        f253();
    }
    let v262;
    try { v262 = new v249(F135, v162); } catch (e) {}
    v262?.constructor;
    v262?.getPrototypeOf;
    for (const v266 of Array(19793)) {
    }
}
new F135();
new F135();
