function f0() {
    return f0;
    function F1(a3, a4, a5, a6) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C8 extends Uint32Array {
    }
    const o19 = {
        "h": "12",
        __proto__: "12",
        get g() {
            return this;
            return delete this["dw2Am"];
        },
        "f": "12",
        ["12"]: 0.9506544030444747,
        "f": "dw2Am",
        "c": "dw2Am",
        "type": "12",
        m(a15, a16) {
            return a15;
        },
        set e(a18) {
        },
    };
    for (let v20 = 0; v20 < 25; v20++) {
        function f21() {
            return v20;
        }
        const v22 = [601759695];
        const v23 = [1073741824,1073741823,1376142744,1073741825];
        function f24(a25, a26, a27, a28) {
            const v29 = f21();
            [v29,v29];
            BigUint64Array * 536870887;
            let v35;
            try { v35 = v23["find"](..."12", a28, ...v22); } catch (e) {}
            return v35;
        }
        for (let v36 = 0; v36 < 10; v36++) {
            f24(v36, v36, v23, f24);
        }
    }
    return C8;
}
f0();
const v39 = f0();
f0();
let v41 = -2.0;
v41--;
-(-585.1792342580425);
const v48 = Uint16Array.prototype;
const v49 = new Uint16Array(256);
try { v49.filter(NaN); } catch (e) {}
for (let v51 = 0; v51 < 25; v51++) {
    function f52() {
        return v51;
    }
    const v53 = [601759695];
    const v54 = [1073741824,1073741823,1376142744,1073741825];
    function f55(a56, a57, a58, a59) {
        a56 >>> a56;
        const v61 = a58[3];
        const v62 = f52();
        [v62,v62];
        v61 * 536870887;
        try { ("find").codePointAt(v54); } catch (e) {}
        try { v54["find"](..."find", a59, ...v53); } catch (e) {}
        return v53;
    }
    for (let v70 = 0; v70 < 10; v70++) {
        f55(v70, v70, v54, f55);
    }
}
new v48(9);
try { new Uint32Array(v49, v39, -585.1792342580425); } catch (e) {}
new Uint32Array(9);
const v80 = [-0.23549034038133065];
v80.then = Date;
async function f81(a82, a83, a84, a85) {
    return await v80;
}
f81();
try { Float64Array.from(Date); } catch (e) {}
function F90(a92, a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = a93.constructor;
    let v97;
    try { v97 = new v96(a93); } catch (e) {}
    typeof v97 === "symbol";
}
1073741824 - 1073741824;
const v103 = new Float64Array(1073741824);
v103.BYTES_PER_ELEMENT = v103;
