function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    a5 + -4;
    a5 >= a5;
    try {
        this.a = a5;
    } catch(e8) {
    }
    try {
        this.c = 11621;
    } catch(e9) {
    }
    try {
        this.h = a5;
    } catch(e10) {
    }
}
let v11;
try { v11 = new F3(-4); } catch (e) {}
const v12 = new F3(-4);
v12.h;
new F3(-4);
const v15 = new F3(-1640941054);
class C16 extends F3 {
    [-4] = v15;
    static b = v12;
    127 = v15;
    a;
    static f;
    static #b = 11621;
    e;
    static 2 = F3;
    g;
    static #p(a18, a19, a20) {
        let v21;
        try { v21 = v15.m(); } catch (e) {}
        function f22() {
            f22 % a19;
            let v26 = ~1571633852;
            const v27 = 1571633852 >> 1571633852;
            let v28 = v26--;
            v27 >>> -1640941054;
            v28--;
            Math.cos(a19);
            !v26;
            return v21;
        }
        try {
            f22();
        } catch(e34) {
        }
        return C16;
    }
}
let v35;
try { v35 = new v11(); } catch (e) {}
v35[11621] = v35;
new C16();
new C16();
new C16();
const v41 = 182 >> 182;
v41 !== v41;
Uint8ClampedArray.g = Uint8ClampedArray;
Uint8ClampedArray.name = v35;
try { new Float32Array(v11, -4, Float32Array); } catch (e) {}
try { Math.log2(Math); } catch (e) {}
const v51 = Math?.log2;
v51.length;
try { new v51(Uint8ClampedArray); } catch (e) {}
16 >>> 16;
let v57 = 1000000000.0 >> 1000000000.0;
v57--;
