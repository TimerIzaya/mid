75275626 < 75275626;
const v9 = new Uint32Array(341);
const v14 = new Int16Array(2183);
const t3 = /QK/gvdimy;
t3.__proto__ = length;
BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
new BigUint64Array(127);
const v20 = new Uint8Array(1784);
v20[1117] = v20;
const o24 = {
    toString() {
        super[this];
    },
    n() {
    },
};
class C27 {
}
const v31 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
const v32 = [-1073741824,1665564361,16526,1805211777,10,-9007199254740990,4,-17063,-1];
const v33 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
const v34 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
const v35 = [-1.015259194643325e+308,-Infinity,-9.825391401141273,-2.2250738585072014e-308,5.0,-2.2250738585072014e-308];
class C36 {
    constructor(a38, a39, a40, a41) {
        const v42 = this?.constructor;
        try { new v42(v34, a40, a40, v31); } catch (e) {}
        a39 >>> a39;
        -0.0 >>> -0.0;
    }
    /*
    constructor(a50, a51, a52, a53) {
        const o59 = {
            "maxByteLength": 2240,
        };
        const v61 = new ArrayBuffer(2240, a51);
        new Uint8ClampedArray(v61);
        this[268435456];
        v33 && this;
        try {
            v33.length = v35;
        } catch(e66) {
        }
    }
    */
    static 268435439 = v32;
    #c = -2.2250738585072014e-308;
    static 832209355 = 2.220446049250313e-16;
}
function f67(a68) {
    new C36(...v32, a68, ...v34, ...v35);
    new Float64Array();
    return -2.2250738585072014e-308;
}
C36.valueOf = f67;
new C36(v14, v14, 659.0540372978887, v31);
try {
    v9.valueOf = -423.92279658183065;
    const v75 = new Float64Array();
    v75 > Uint32Array;
    Math.sinh();
} catch(e80) {
    const o90 = {
        toString(a84, a85, a86, a87) {
            return "preventExtensions";
        },
        get e() {
            return "-1865512128";
        },
    };
}
function f91(a92, a93, a94, a95) {
    a92--;
    a95++;
    const v98 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
    let v99;
    try { v99 = v98.filter(); } catch (e) {}
    return v99;
}
for (let v100 = 0; v100 < 10; v100++) {
    v100 + v100;
    f91(v100, f91, v100, v100);
}
const o106 = {
    "h": BigUint64Array,
    __proto__: "number",
    "type": "number",
    10: 3853,
};
%OptimizeFunctionOnNextCall(f91);
f91(f91, f91, f91, f91, -14);
