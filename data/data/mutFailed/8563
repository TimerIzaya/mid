class C1 {
}
new C1();
const v5 = new Uint32Array(128);
new Uint8ClampedArray(v5);
const v13 = new Map();
function f14(a15) {
    const v16 = a15.splice(v13);
    class C17 extends Map {
        [v16] = f14;
        set b(a19) {
            Symbol.search;
        }
        static c = 128;
    }
    const v22 = new C17();
    Math.acosh(1073741825);
    new Int32Array(64);
    const o29 = {
        ...v13,
        "f": Map,
        "h": a15,
        71: v13,
        ...v22,
    };
    return o29;
}
const o31 = {
    __proto__: true,
};
function f32(a33) {
    return a33;
}
const v34 = [f32];
new Float64Array(1);
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    a43.unshift(a44);
    v34.constructor;
    class C50 {
        4294967296 = 996195971n;
    }
}
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    let v53 = "string";
    for (let i56 = 0, i57 = 10;
        i56 < i57;
        (() => {
            const v61 = i56++;
            v61 >> v61;
        })()) {
        for (const v65 in v34) {
            v53 *= v53;
        }
    }
    const v66 = this.constructor;
    try { new v66(); } catch (e) {}
    let v68 = -128;
    v68--;
    this.g = v68;
}
new F51();
new Float32Array(145);
new Uint8ClampedArray(6);
let v77 = 20191;
v77 &&= 1073741824;
const v78 = [128,Uint8ClampedArray,"b"];
const v79 = [v78,v78,v78,v78];
[v79,v79,v79];
[-1653309803];
function f82() {
    return f82;
}
class C83 extends f82 {
}
new C83();
("29753").normalize("29753", "b").split("b");
