function f0() {
    const o12 = {
        [-926136.4177981104]: -9007199254740991,
        [-9007199254740991]: -9007199254740991,
        "d": -2147483648,
        valueOf(a5, a6) {
            try {
                a5.__proto__ = a6;
            } catch(e7) {
            }
            try {
                this.fuck(1.3113057631007745, [1.3113057631007745,a5,-9007199254740991,-2147483648,a6], f0, this);
            } catch(e11) {
            }
            return this;
        },
    };
    return o12;
}
const v13 = f0();
let v14 = f0();
f0();
function f16(a17) {
    const o23 = {
        toString(a19) {
            const v20 = a19 && v14;
            v20 & v20;
            this[v13] = a19;
            return v20[4096];
        },
        [a17]: v13,
        __proto__: v14,
        6: v14,
        "b": a17,
        "h": a17,
        ...v14,
    };
    return o23;
}
const v25 = f16(f16(f16));
f16(v14);
[-1.7976931348623157e+308,-798.1331098461952,811.8312748615715,4.0,-211.22813935368572,4.0,-9.083275689592961e+307,107336.02559891925,-6.3701554209668165,3.1573834053196865];
[6.379420748309273e+307,-1.3683608657676444e+308,Infinity,-4.0];
[0.9762562845783719,5.0,-2.4663995677124584,0.0];
class C30 {
    static m(a32, a33, a34) {
        for (let [v35,v36] of a32) {
            v14--;
            v14 << ~v25;
            Math.cos(-3828);
        }
        return a32;
    }
    static #e;
}
new C30();
new C30();
new C30();
new Uint8ClampedArray(256);
new BigInt64Array(24);
const v55 = Uint8Array?.constructor;
try { new v55(Uint8ClampedArray); } catch (e) {}
new Uint8Array(4);
-9223372036854775807n | -9223372036854775807n;
-(-30326n);
function F66() {
    if (!new.target) { throw 'must be called with new'; }
    const v68 = this?.propertyIsEnumerable;
    try { new v68(-30326n); } catch (e) {}
    this.a = this;
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e72) {
    }
}
const v73 = new F66();
const v74 = new F66();
v74.length;
new F66();
62324 & 62324;
4294967295 * 4294967295;
function F82(a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a85(); } catch (e) {}
    a86.f = a86;
    try {
        this.b = a85;
    } catch(e88) {
    }
}
new F82(4294967295, F66, v73);
new F82(62324, F82, v74);
Symbol.toPrimitive;
const o94 = {
    [f0]() {
    },
};
