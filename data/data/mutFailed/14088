[1024,-59827,10];
const v1 = [1,512,-2];
const v2 = [2,8,-34395];
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    a9.g = a9;
    a10 === a10;
    try {
        this.a = 9007199254740991;
    } catch(e12) {
    }
    try {
        this.h = a8;
    } catch(e13) {
    }
}
F6.b = F6;
new F6(5, v1, 11);
new F6(9007199254740991, v1, 11);
new F6(5, v1, 11);
const v17 = [5];
try { v17.entries(); } catch (e) {}
const v19 = [v2,v17,11,v1,v1];
try { v19.valueOf(); } catch (e) {}
[5,11,v1,F6];
function F22(a24) {
    if (!new.target) { throw 'must be called with new'; }
    a24.constructor;
    F22.arguments.length;
}
new F22();
const v29 = v2?.__lookupGetter__;
try { new v29(9007199254740991); } catch (e) {}
