const v0 = [];
let v3 = Uint8Array;
const v4 = v3--;
let v5;
try { v5 = v4(...v0, ...v0, ...v0, v4, v3); } catch (e) {}
%VerifyType(v0);
const v7 = Symbol.iterator;
const o16 = {
    [v7]() {
        let v9 = 10;
        const o15 = {
            next() {
                v9--;
                const v13 = v9 == 0;
                const o14 = {
                    "done": v13,
                    "value": v9,
                };
                return o14;
            },
        };
        return o15;
    },
};
v0[Uint8Array] = v0;
Object.defineProperty(v0, "c", { writable: true, configurable: true, value: v0 });
new Int16Array(4);
const v22 = new Uint32Array(15);
v22[1967160851] = 4005;
v5.d %= v5;
const v24 = v0.join(4, 15, v5, ...o16);
v24.length;
Int32Array && Uint8Array;
let [,,v31] = v22;
for (let v32 = 0; v32 < 32; v32++) {
    v24["p" + v32] = v32;
}
new Int32Array(15);
new Uint8Array(115);
new Float64Array(234);
new Uint32Array(19);
/jVo(?:a?)?/diy;
/a\Bb/vdy;
/a+b6s^a\w+/gvis;
const v48 = new Uint32Array(234);
class C49 {
    constructor(a51, a52, a53, a54) {
        for (let v55 = 0; v55 < 5; v55++) {
            v48[115] = a54;
        }
    }
}
new C49();
