function f0() {
    const o25 = {
        "g": 4,
        "a": 4,
        __proto__: 9,
        "d": 9,
        toString(a5, a6, a7) {
            const t7 = 9;
            t7[9] = 4;
            return 255n;
        },
        get c() {
            function F10(a12) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a12;
                } catch(e13) {
                }
                try {
                    const v16 = Array();
                    class C17 extends Array {
                    }
                    class C18 extends C17 {
                        [1] = v16;
                    }
                    new C18();
                    this.e = this;
                } catch(e20) {
                }
                try {
                    this.b = a12;
                } catch(e21) {
                }
            }
            new F10(4);
            new F10(8);
            new F10(8);
            return 9;
        },
    };
    return o25;
}
f0();
f0();
const v28 = f0();
class C29 {
    #valueOf(a31, a32) {
        return a32;
    }
    set d(a34) {
    }
    constructor(a36) {
        a36.d;
        arguments[0] = arguments;
        new f0();
    }
    static [f0] = f0;
    static m(a41) {
        new Uint8ClampedArray(300);
        new Float64Array(2229);
        new Float64Array(3074);
        return Uint8ClampedArray;
    }
}
const v51 = new C29(v28);
const v52 = new C29(v51);
const v53 = v52?.constructor;
try { new v53(v52); } catch (e) {}
new C29(v51);
const v56 = [5.509179327765562,2.220446049250313e-16,-4.0,81.94537586914043,398.05736978949517,973524.5579878087];
try { v56.reduce(v51); } catch (e) {}
const v58 = [-717295.4683317854,-1000000000.0,-538.9958147778055,1000000000000.0,1000000000000.0,1.5174660575008138e+307,-1000.0,-1.7976931348623157e+308];
try { v58.pop(); } catch (e) {}
[1.7976931348623157e+308,1000000000.0,0.0,-2.2250738585072014e-308,-1000000000000.0,-2.220446049250313e-16,-1000.0];
class C61 {
    toString(a63, a64, a65, a66) {
        return a64;
    }
    get d() {
        const v72 = [this];
        const v73 = Reflect.construct(C29, v72, f0);
        v72 * Reflect;
        super[v56];
        const v77 = [1.0,141599.63044947106,730.845463907873,1000000.0,-4.2811873669589365e+307,0.0,3.0];
        try { v77.forEach(-5n); } catch (e) {}
        function f81(a82) {
        }
        Reflect.construct(f81, [0], Uint8ClampedArray);
        super[v73];
        return v56;
    }
}
try { new C61(); } catch (e) {}
new C61();
const v89 = new C61();
v89.d;
const v91 = new C61();
v91.d;
const v94 = new Set();
const v95 = v94?.forEach;
try { new v95(v52); } catch (e) {}
class C102 {
    g = v94;
}
new C102();
const v104 = new C102();
const v105 = v104?.__defineSetter__;
try { new v105(v104, v104); } catch (e) {}
const v107 = new C102();
const v108 = v107?.constructor;
try { new v108(); } catch (e) {}
new BigInt64Array(66);
const v113 = Uint32Array?.constructor;
try { new v113(66); } catch (e) {}
new Uint32Array(8);
const v116 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f117() {
    try {
        v116.forEach();
    } catch(e119) {
        e119.a = e119;
    }
    Symbol.toPrimitive.description;
    return Symbol.for();
}
f117.caller = f117;
512 === 512;
new Uint16Array(512);
class C128 {
}
try { new C128(); } catch (e) {}
try { new C128(); } catch (e) {}
const v132 = WeakMap?.constructor;
try { new v132(BigInt64Array); } catch (e) {}
const v135 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
try { v135.find(512); } catch (e) {}
Set.a = Set;
const v138 = new Set(v135);
let v139;
try { v139 = v138.add(v138); } catch (e) {}
try { v139.delete(v107); } catch (e) {}
function F141(a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(a144); } catch (e) {}
    try {
    } catch(e146) {
    }
    try {
        Math.clz32();
    } catch(e148) {
    }
}
const v149 = F141?.constructor;
try { new v149(66); } catch (e) {}
F141.caller = F141;
const v151 = new F141();
const v152 = v151?.constructor;
try { new v152(512, 66); } catch (e) {}
new F141();
