const v2 = new Array(255);
Math.cosh(-9.488890520175198e+307);
for (let v6 = 0; v6 < 100; v6++) {
}
new Uint8Array(255);
new Uint32Array(128);
new Uint8ClampedArray();
for (let v18 = 0; v18 < 5; v18++) {
    const t8 = ~"function" >>> v18;
    t8[v18] = 255;
}
const o24 = {
    "f": "k",
    get f() {
        return this;
    },
};
new BigInt64Array(7);
class C29 extends Map {
}
const v30 = new C29();
const v32 = Symbol.toStringTag;
v30[v32] = v32;
const v33 = [-0.0,3.5501749464532004,-0.0,-2.220446049250313e-16,0.7626441105891978,-585.9055525866645,1e-15,1000000.0];
Object.defineProperty(v33, Symbol.toPrimitive, { writable: true, enumerable: true, value: Array });
v33 ** "IxTD";
const v38 = new Set();
function f39() {
    return Math;
}
try { v38["entries"](...461471.53518758505, v2, f39, ...v38); } catch (e) {}
