class C3 {
    m(a5, a6) {
        const v7 = a6 in this;
        try {
            super.toString(this, "-1228941716");
        } catch(e9) {
        }
        return v7;
    }
    1 = C3;
    static #h = "-1228941716";
    c = 0.9125261630296417;
    #e = "buffer";
}
new C3();
new C3();
const v12 = new C3();
class C16 extends C3 {
    static {
        try { C3["valueOf"]("valueOf", "valueOf", 9, 0.06521876449811514); } catch (e) {}
    }
    static [0.06521876449811514] = v12;
    static [v12] = C3;
    static g;
    b = C3;
    a;
}
new C16();
new C16();
new C16();
const v29 = [-54813,8,-54813,8];
const v30 = [-54813];
const v31 = [-54813];
function f32(a33, a34, a35, a36) {
    const o45 = {
        n(a38, a39, a40, a41) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a36;
        },
        ...v31,
        "b": v29,
        ...551.9389213197012,
        ...v31,
        129: 4,
        ...a33,
    };
    return o45;
}
f32(v30, 8, f32(v30, v31, v29, 4), 4);
f32(v31, 4, 4, 4);
/ND2/gds;
class C54 extends -54813 {
}
const v55 = new C54();
v55.isPrototypeOf();
class C59 {
    static {
        for (let v61 = 0; v61 < 25; v61++) {
            const v62 = [601759695];
            const v63 = [1073741824,1073741823,1376142744,1073741825];
            function f65(a66, a67, a68, a69) {
                try { new a66(); } catch (e) {}
                a68 << a68;
                function f73() {
                    return a66;
                }
                const v75 = new Int8Array();
                const v78 = BigUint64Array * 536870887;
                v78 - v78;
                Number.isNaN(v78 ** v78);
                function f83(a84, a85) {
                }
                try { v31(); } catch (e) {}
                const v88 = v75.buffer.__defineGetter__;
                try { v88(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f73);
                let v91;
                try { v91 = v63["find"](..."find", a69, ...v62); } catch (e) {}
                const o92 = {
                };
                v91 <= a68;
            }
            for (let v94 = 0; v94 < 5; v94++) {
                f65(this, v94, v94);
            }
        }
    }
}
