const v0 = [-4.0,-2.220446049250313e-16,-1.0624740081877277,-1000000000000.0,6.6606670421487735,2.0,-1.0,1.1935602073262654e+308,-1e-15,-1000000.0];
const v1 = [-2.2250738585072014e-308,-1.2734499059372313e+308,-1.0];
const v2 = [5.185779010952018e+307,0.238689671266345];
function f6(a7, a8, a9) {
    const o18 = {
        "f": a9,
        ...a7,
        __proto__: v1,
        valueOf(a11, a12, a13, a14) {
            a14[Symbol.toPrimitive];
            return a9;
        },
        "g": a7,
        "d": -268435456,
        "b": a7,
    };
    return o18;
}
f6(v0, 10102, v1);
f6(v0, 10102, v2);
const v21 = f6(v2, -268435456, v0);
class C28 {
    constructor(a30, a31) {
        function f32(a33) {
            function f35(a36) {
                a36 & a36;
            }
            this.onmessage = f35;
            this.__proto__;
            let v42;
            try { v42 = this["getUTCHours"](v21, "getUTCHours", "2055637386"); } catch (e) {}
            Object.defineProperty(a30, f32, { value: v42 * a30 });
            new Float32Array(3725);
            new Int32Array(2270);
            new Uint8Array(6);
        }
        f32.toJSON = a31;
        const v55 = [f32];
        const o56 = {
            "arguments": v55,
            "type": "function",
        };
        new Worker(f32, o56);
    }
}
new C28(C28, -4.0);
const v59 = new C28(-4.0, -4.0);
const v60 = new C28(9007199254740992, 512);
v60.m = v60;
const v63 = new Uint8Array(0);
const v66 = new Uint8Array(4096);
function f67(a68, a69) {
    const v71 = new Float32Array();
    return v71;
}
v66.valueOf = f67;
const v74 = new Uint8Array(255);
v74.toString = f67;
let v75;
try { v75 = v66(); } catch (e) {}
let v76;
try { v76 = v75(v63, v75, v59); } catch (e) {}
v75 + v76;
v66.buffer;
v63[1073741824];
f = -268435456;
const v82 = -Infinity;
Math.cos(v82);
~v82;
const v85 = 1787133428 * v82;
v66 >> 1787133428;
Math.expm1(v82);
+v85;
C28[v74];
let v93;
try { v93 = v60.m(0, v63); } catch (e) {}
const o94 = {
};
try {
    o94.h = v93;
} catch(e95) {
}
try {
    const o96 = {
    };
    o96.d = v66;
    o96.h = v93;
    o96.d = 512;
} catch(e97) {
}
try {
    const o98 = {
    };
    Object.defineProperty(o98, "e", { writable: true, configurable: true, value: Uint8Array });
    o98.h = v93;
    o98.d = 512;
    o98.e = v63;
} catch(e99) {
}
try {
    const o100 = {
    };
    o100.d = o100;
    o100.h = v93;
    o100.d = 512;
    o100.e = 255;
} catch(e101) {
}
