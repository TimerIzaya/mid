function f0() {
    return f0;
    for (let [v4] of "bigint") {
    }
    class C5 {
    }
    const o17 = {
        "h": "bigint",
        get b() {
            super.g;
            super.g /= 1.7976931348623157e+308;
            %VerifyType([0.8307152163010869,1.0,0.0] instanceof -24894);
            const v12 = Map.name;
            try { v12.trimLeft(); } catch (e) {}
            function f15() {
                return new.target;
            }
            const t17 = "bigint";
            return delete t17?.length;
        },
        "d": "bigint",
        [1.0]: 1.7976931348623157e+308,
        [1.7976931348623157e+308]: 1.0,
    };
    return o17;
}
const v18 = f0();
const v19 = f0();
const v20 = f0();
class C21 {
    #a;
    2 = v20;
    static 2 = v20;
    3 = v20;
    static {
        const v24 = new Uint8Array();
        const t36 = [65535,9223372036854775807,2101773358,536870888,536870912,7];
        t36.__proto__ = v24;
        new Int16Array(2183);
        const v29 = f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeMaglevOnNextCall(f0);
        f0();
        const v33 = f0(this, v18, v29);
        try {
            v33.#a = this;
        } catch(e35) {
        }
    }
    static #f = f0;
    [v19];
}
const v36 = new C21();
const v37 = new C21();
const v38 = new C21();
let v40 = [1000000000000.0,-2.0,-51.976410948622515,264.5808457228279,-2.0,-4.566638341081788e+307,-1000000000.0,1.3521697982555564e+308];
[2.220446049250313e-16,-2.2250738585072014e-308,0.9045199719505456];
const v42 = [1.7289111255949144e+308,8.521747574690748e+305,-56.81940239305709,474.94444402039994,-128194.74191329896,-4.0,1000000000.0,-0.7128767811926036];
class C43 extends f0 {
    #m(a45, a46) {
        (v40 = v42) >= v18;
        return this[Symbol.replace];
    }
    static p(a52, a53) {
        new BigUint64Array(194);
        new BigUint64Array(217, BigUint64Array, v38);
        const v62 = new Uint32Array(4096);
        return v62;
    }
}
new C43();
new C43();
new C43();
class C67 {
    static {
        for (let v69 = 0; v69 < 25; v69++) {
            function f70() {
                return C67;
            }
            const v71 = [601759695];
            const v72 = [1073741824,1073741823,1376142744,1073741825];
            function f74(a75, a76, a77, a78) {
                function F80() {
                    if (!new.target) { throw 'must be called with new'; }
                    this.a = this;
                    try {
                    } catch(e83) {
                    }
                }
                function f84() {
                    return a75;
                }
                for (let v85 = 0; v85 < 32; v85++) {
                    a76 || v37;
                    try {
                        C21.__proto__ = Date;
                    } catch(e87) {
                    }
                }
                const v88 = f70();
                const v90 = new Int8Array();
                const v93 = new Uint32Array(4);
                const v94 = [v93];
                const v97 = v36 * 536870887;
                v97 ** v97;
                function f99(a100, a101) {
                    return v88;
                }
                f99();
                const v103 = v90.buffer;
                Object.defineProperty(v103, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array(v94);
                v103.slice(2147483648);
                %OptimizeFunctionOnNextCall(f84);
                let v108;
                try { v108 = v72["find"](..."find", a78, ...v71, ...v72, ...522675525n); } catch (e) {}
                Symbol("find");
                f70();
                %PrepareFunctionForOptimization(f70);
                f70();
                f70();
                %OptimizeMaglevOnNextCall(f70);
                function F117(a119) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v120 = this.constructor;
                    v120.e = v120;
                    try { new v120(); } catch (e) {}
                    this.g = -1;
                    this.f = a119;
                    this.h = a119;
                }
                try { F117.bind(-143547321); } catch (e) {}
                const v123 = new F117(-1);
                v123.g = v123;
                f70(Symbol, BigUint64Array, this);
                const v125 = new Uint8ClampedArray();
                const o126 = {
                    ...v125,
                };
                Math.sinh();
                gc();
                new Uint32Array(5);
                v108 <= a77;
                return arguments;
            }
            for (let v135 = 0; v135 < 5; v135++) {
                f74(this, v135, v135, v135);
            }
        }
    }
}
