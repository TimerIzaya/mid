function f0() {
    const o33 = {
        [-8]: "4096",
        "a": -8,
        n(a5) {
            ("a").__proto__;
            try {
                a5.length = a5;
                const v8 = new Uint16Array();
                v8.indexOf();
                [2,12,817632217,446621544,6,2147483649,268435456];
                function F11(a13, a14, a15, a16) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v17 = this.constructor;
                    try { new v17(v17); } catch (e) {}
                    for (const v19 in this) {
                        delete a16?.h;
                    }
                }
                const v22 = new F11();
                new v22(F11);
                const v28 = new this(10);
                for (const v30 in v28) {
                    new Float64Array(2147483647);
                }
            } catch(e32) {
            }
            return -8;
        },
        "c": "4096",
        "f": "4096",
    };
    return o33;
}
f0();
f0();
const v36 = f0();
[-1.6380284845213241e+308,-0.0,0.5473036318363165];
const v41 = [-2.0,538683.9793032892,0.5348320215598746,1.330682162679705e+308,-975886.0222778117];
try { v41.copyWithin(-107770207, -107770207); } catch (e) {}
[0.7720846353211434,0.7964684083809419,2.2250738585072014e-308];
try { ("a").padEnd(f0); } catch (e) {}
let v49 = 512;
v49--;
const v52 = new v36(v49);
Int16Array.length;
const v55 = new Int16Array();
const v56 = v52.includes(v55);
v56 || v56;
let v59 = 4 + 4;
v59++;
Array(3).unshift(3, v59);
