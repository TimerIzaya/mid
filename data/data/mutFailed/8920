function f3(a4, a5, a6, a7) {
    a4 != a4;
    a6 | a6;
    function f10(a11, a12) {
    }
}
f3.arguments;
for (let v14 = 0; v14 < 5; v14++) {
    v14 ^ v14;
    const v16 = [2.220446049250313e-16,-2.0,9.472378156545009,0.0,1e-15,0.3751557433004281,0.0,-474740.46049005154];
    const o22 = {
        set h(a18) {
        },
        __proto__: v16,
        o(a20, a21) {
        },
    };
    f3(v14, f3, -1096423313);
}
const v24 = [-1096423313,6,128,-1096423313];
const v25 = [6,v24,v24,-1096423313,-1096423313];
v25[3] = v25;
const v26 = [v24];
for (let [i32, i33] = (() => {
        let v28 = 0;
        v28--;
        -10;
        return [v28, 10];
    })();
    (() => {
        i33 + i33;
        const v35 = i32 < i33;
        class C36 extends Date {
            9 = i33;
            static #p(a38) {
                function f39(a40) {
                    return a40;
                }
                class C41 extends f39 {
                    static [-1] = 6;
                    static [a38];
                    static 268435441;
                }
                const v42 = [];
                const v44 = /[a-zA-Z0-9]/gvisy;
                const v45 = /abc?/gvmy;
                v45[-2] ^= v44;
                v45.exec("Q8F");
                const t17 = "Q8F";
                t17[2078209647] = v42;
                return a38;
            }
        }
        return v35;
    })();
    i32++) {
    i33 !== i33;
}
const v53 = [0.8750270288987227,0.49223188804036366,9.792303427156046,1e-15];
v53[3] = v53;
const v54 = [-1000.0,2.220446049250313e-16,0.7906050798348575,0.6705684199575933,1.4686508334376586e+308,-770.7325255219348,-1000000.0,-1.7976931348623157e+308,512121.60758385365];
const v55 = [118.08133281961364];
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this?.__lookupGetter__;
    try { new v62(this); } catch (e) {}
    a58++;
    a59.g = a59;
    a60 | a60;
    const v67 = new Uint8ClampedArray(-1096423313);
    new Int8Array(v67);
    function f71(a72, a73, a74, a75) {
        return -261.99102172609366;
    }
    try { a61.reduce(a61); } catch (e) {}
    function f80() {
        return v26;
    }
    function f81(a82) {
        8 - 8;
        new Int8Array(8);
    }
    Object.defineProperty(this, "b", { configurable: true, get: f80, set: f81 });
    try {
        this.b = a58;
    } catch(e87) {
    }
}
new F56(-1096423313, v53, 6, v55);
new F56(-1096423313, v53, 128, v53);
"p" + 128;
function F92(a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
}
F92.arguments;
const v97 = new F92();
const v98 = v97?.constructor;
try { new v98(6, 6); } catch (e) {}
const v100 = v97.constructor;
try { new v100(v55, "p"); } catch (e) {}
class C102 extends v100 {
}
const v103 = new F56(6, v54, -1096423313, v25);
v103.b = v103;
new Float64Array();
class C108 {
}
const t107 = 6;
new t107();
function F111(a113) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(this); } catch (e) {}
    a113--;
    a113 ^ a113;
    const v117 = this.constructor;
    try { new v117(3n); } catch (e) {}
}
const v119 = new F111();
class C121 extends Array {
}
const v123 = [Map,Map];
const o124 = {
    ...v123,
};
const v125 = v119?.isPrototypeOf;
try { new v125(v54); } catch (e) {}
const v127 = new F111(349865170n);
const v128 = v127?.constructor;
try { new v128(f3); } catch (e) {}
%OptimizeFunctionOnNextCall(Date);
function f130() {
    const v131 = [f130];
    function f132(a133) {
        return a133;
    }
    v131.constructor = f132;
    const v134 = v131.constructor;
    v134(v134, f132);
    return f130;
}
