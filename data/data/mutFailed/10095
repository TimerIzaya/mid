function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 16;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
v6.b = v6;
let v12;
try { v12 = ("NEGATIVE_INFINITY").codePointAt(v4); } catch (e) {}
const v13 = -v12;
let v15;
try { v15 = ("n").strike(); } catch (e) {}
let v16 = -4.0;
const v17 = v16++;
v17 === v17;
let v19 = 1.3808785990594282e+308;
const v20 = v19--;
Array.__proto__ = this;
const o28 = {
    get b() {
        this.f = this;
        const v25 = this.constructor;
        try { v25.getOwnPropertySymbols(v25); } catch (e) {}
        new v25(this, this, Array, Array, v25);
        return v6;
    },
};
let v29 = ("NEGATIVE_INFINITY")[o28];
try { v12(v12, F0, o28); } catch (e) {}
try {
    Array(-256);
} catch(e32) {
}
o28.b;
v29 = v15;
v13 == v17;
try {
    ("NEGATIVE_INFINITY").substring(512, 1);
} catch(e38) {
}
const o39 = {
    ...this,
};
const v40 = o39?.read;
try { new v40(); } catch (e) {}
Reflect.construct(v15, [v20], v15);
