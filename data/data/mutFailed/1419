function f3(a4) {
    a4 * a4;
    const v7 = new Uint16Array(2);
    v7.lastIndexOf(4);
    class C11 {
        [720972705n];
        #p(a13, a14, a15, a16) {
            super.m();
        }
    }
    new C11();
    const o31 = {
        "f": a4,
        "g": a4,
        "c": a4,
        __proto__: a4,
        716952824: a4,
        "b": 4294967295,
        set d(a20) {
            let v23 = -10;
            const v24 = ++v23;
            let v25 = 2 & this;
            v24 >> -1073741824;
            const v28 = v25-- << a4;
            Math.sqrt(v28);
            !v28;
        },
    };
    return o31;
}
const v32 = f3(2);
const v33 = f3(4294967295);
v33[716952824] = v33;
const v34 = f3(4294967295);
new Uint8ClampedArray(Date);
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a41;
    } catch(e42) {
    }
    try {
        this.c = a41;
    } catch(e43) {
    }
}
const v44 = new F38(4294967295, v33);
new F38(1, v32);
new F38(2, v34);
class C47 extends F38 {
    #e;
    [v33];
    static toString(a49, a50, a51) {
        v33 && F38;
        new Int8Array(257);
        new Uint16Array(19);
        const o61 = {
        };
        try {
            o61.e = -65535;
        } catch(e62) {
            const v66 = new Uint8ClampedArray(512);
            new Uint8ClampedArray(798, ...v66, o61);
        }
        const v69 = new Int32Array(691);
        return v69;
    }
}
try { new C47(); } catch (e) {}
const v71 = new C47();
v71.a = v71;
new C47();
new C47();
try { new Int32Array(v44, Int32Array, Int32Array); } catch (e) {}
const v77 = new Int32Array();
const v79 = new BigInt64Array();
const v80 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v81;
try { v81 = v80.some(); } catch (e) {}
const v82 = [-1.7976931348623157e+308];
function f83(a84, a85, a86, a87) {
    try { a84.lastIndexOf(f83); } catch (e) {}
    try { a85.fill(a84); } catch (e) {}
    try { a86.toString(); } catch (e) {}
    const o100 = {
        __proto__: Uint8ClampedArray,
        ...v32,
        set h(a92) {
        },
        ...v33,
        toString(a94, a95, a96) {
            try { this.toString(a95, v81, a94); } catch (e) {}
            a95++;
            a86[a85] = a84;
        },
    };
    return Int32Array;
}
const v101 = f83(v79, v80, v82);
const v102 = f83(v77, v80, v80);
for (let v103 = 0; v103 < 5; v103++) {
    v103 & v103;
    const v105 = v102 % v101;
    v105 | v105;
    v80.b = v77;
}
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
([-7,-18455])["pop"]();
(1).sup(("-1723624938").slice(129, "g").normalize(), "-1723624938");
