const v0 = [1000000.0];
const v1 = [1000000.0,-517441.67008805554,-1000000000000.0];
const v2 = [-5.017496617304362];
function f3() {
    const v6 = new Int32Array(257);
    let v8 = new Map();
    [...v8] = v6;
    return v2;
}
v2[Symbol.toPrimitive] = f3;
function f11() {
    return v1;
}
function f12(a13, a14) {
    const o15 = {
        ...v1,
        ...v2,
        "f": v2,
        ...v0,
        862: a14,
        "h": f11,
        "e": a13,
        1: a13,
        [a13]: a14,
        "b": v1,
    };
    return o15;
}
f12(v1, v1);
f12(f11, v0);
f12(v2, v2);
new Uint32Array(1000);
new Float64Array(8);
new Float32Array(127);
class C29 {
    141 = "9007199254740991";
}
new C29();
new C29();
new BigInt64Array();
function f39() {
    const v43 = -65535 / -65535;
    const o94 = {
        ...352326470,
        m(a45) {
            this.c = f12;
            a45.c = a45;
            a45.h = a45;
            const o46 = {
            };
            o46.d = o46;
            o46.h = o46;
            function f47(a48, a49, a50) {
            }
            f47.bind();
            f47.caller = f47;
            try {
                o46.e = -65535;
            } catch(e52) {
                const v56 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v56, o46);
            }
            const o58 = {
            };
            o58.g = o58;
            o58.e = 1261703539;
            let v60;
            try { v60 = Math.expm1(128); } catch (e) {}
            v60--;
            const v63 = -9007199254740991 >> -9007199254740991;
            try {
                this.fuck(-728.3884409928194, -728.3884409928194, false);
            } catch(e67) {
            }
            v63 - v63;
            -Math.sin(-9007199254740991);
            try { ("EV").link(v43); } catch (e) {}
            0 != 0;
            class C75 {
                o(a77, a78, a79, a80) {
                    class C81 {
                    }
                }
            }
            C75.name = C75;
            new C75();
            const v85 = new Int8Array(3938);
            let v86 = 3;
            const v87 = v86++;
            v87 + v87;
            const v90 = 0 >> 0;
            const v91 = v90 - v90;
            v91 / v91;
            [...v86] = v85;
            const o93 = {
            };
            o93.c = o93;
            return this;
        },
    };
    let v95;
    try { v95 = o94.m(o94); } catch (e) {}
    v95.m(128);
    class C98 {
    }
    new Float32Array();
}
f39();
