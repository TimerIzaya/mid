const v2 = new Int16Array(2594);
new SyntaxError(5);
const v8 = new Uint8Array(1024);
function f12() {
    const o13 = {
    };
    o13.d = o13;
    return o13;
}
try {
const t0 = 1024;
new t0();
} catch (e) {}
function f15(a16, a17, a18) {
    function f20(a21) {
        a21();
        %PrepareFunctionForOptimization(f12);
        f12();
        f12();
        %OptimizeMaglevOnNextCall(f12);
        a17();
    }
    this.onmessage = f20;
    v8[10] = a16;
    try {
        v2.with(-139824521, /lRs6/gudis);
    } catch(e29) {
    }
}
const v32 = [ArrayBuffer,"function","function"];
const o33 = {
    "arguments": v32,
    "type": "function",
};
new ArrayBuffer(f15, v8);
const v35 = v32();
const v36 = f12();
v36.e = v36;
for (let v37 = 0; v37 < 25; v37++) {
    v37 - v37;
    const v39 = [601759695];
    try { v39.map(v37); } catch (e) {}
    const v41 = [1073741824,1073741823,1376142744,1073741825];
    function f42(a43, a44, a45, a46) {
        a44.d = a44;
        a43[4] = a43;
        a44[4] = a44;
        -(BigUint64Array * 536870887);
        try { ("find").isWellFormed("find"); } catch (e) {}
        try { v41["find"](..."find", a46, ...v39, ...v41); } catch (e) {}
        return v37;
    }
    for (let v54 = 0; v54 < 5; v54++) {
        f42(v35, v36);
    }
}
