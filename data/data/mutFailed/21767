for (let v1 = 0; v1 < 5; v1++) {
    function f2() {
        const v3 = [f2,f2,f2,f2];
        try {
            v3.some(v1);
        } catch(e5) {
            const v6 = `
            `;
            eval(e5);
        }
        return v3;
    }
    f2();
    %OptimizeFunctionOnNextCall(f2);
}
const v15 = [1.9211994461535063e+307,1.0,8.969270154105067e+307,6.119101159871781e+307,-1000.0,0.28475518541898925,-1.0];
[0.21242441289742464,-1000000000000.0,2.0];
const v17 = [-839.0255957291444,629286.2326002698,0.14968372118014228,9.833940533072358,NaN,1.2861139894238217e+308,179.94192987958354];
const v20 = new Uint32Array();
const v22 = new Map();
function f23(a24, a25) {
    a24.trim();
    let v27;
    try { v27 = a24.valueOf(a25, v22, a25); } catch (e) {}
    v27 == v27;
    class C30 extends v20.constructor {
    }
    return v27;
}
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    function F34() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const v36 = new F32();
const o44 = {
    n(a38, a39) {
        class C40 {
        }
        new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
    },
    "a": v36,
};
new Float32Array(256);
for (let v47 = 0; v47 < 25; v47++) {
}
function f48() {
    for (let [i51, i52] = (() => {
            switch (f48) {
            }
            return [0, 10];
        })();
        i51 % i51, i51 < i52;
        i51++, i52--) {
    }
    return f48;
}
f48();
%OptimizeFunctionOnNextCall(f48);
class C63 {
    constructor(a65) {
        const v66 = this.constructor;
        try { new v66(); } catch (e) {}
        const v69 = new Float32Array();
        v69.entries();
    }
}
for (let v71 = 0; v71 < 5; v71++) {
    function f72() {
        const t70 = 536870889;
        new t70();
        Array(8);
        const v77 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f78() {
            try {
                v77.forEach();
            } catch(e80) {
            }
            const v82 = Symbol.toPrimitive;
            const v83 = v82.description;
            try { v83.link(v83, v83, f78); } catch (e) {}
            Symbol.for();
            return v82;
        }
        f78();
        Symbol.toPrimitive.description.codePointAt(C63);
        return Symbol;
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
}
new BigUint64Array(622);
new Float64Array(1000);
%VerifyType(Infinity());
try {
    function f98(a99, a100, a101) {
        for (let i = 0; i < 5; i++) {
            function f102() {
                const v103 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
                function f105(a106, a107, a108, a109) {
                    arguments[4] = arguments;
                    return a108;
                }
                f105(v17, v103, 522675525n, v103, 522675525n);
                let v112 = 6;
                function F113(a115, a116) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v117 = new F113(F113, F113);
                ~v117;
                for (let v119 = 0; v119 < 5; v119++) {
                    function f120() {
                        try {
                            v15.some();
                        } catch(e122) {
                        }
                        return v119;
                    }
                    f120();
                    %OptimizeFunctionOnNextCall(f120);
                }
                v112 % v112;
                v112--;
                return v112;
            }
            %OptimizeFunctionOnNextCall(f102);
            /k/gdsy;
        }
        f98();
        const v128 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
        let v129;
        try { v129 = v128.some(); } catch (e) {}
        function f130(a131, a132, a133, a134) {
            const o142 = {
                toString(a136, a137, a138) {
                    try { this.toString(a137, v129, a136); } catch (e) {}
                    a137++;
                    a133[a132] = a131;
                },
            };
            return o142;
        }
        return f98;
    }
    f98();
} catch(e144) {
}
