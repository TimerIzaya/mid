class C3 {
    constructor(a5, a6) {
        try {
            this.fuck("toString", a5, -50534);
        } catch(e8) {
        }
        a5[Symbol.match] = a6;
    }
    static 1073741824;
    [0.05332586342784895] = -50534;
    static [0.05332586342784895] = -50534;
    1073741825 = 0.05332586342784895;
}
const v13 = Symbol.isConcatSpreadable;
const t14 = Array();
t14[267] = v13;
const v15 = new C3(0.05332586342784895, -50534);
const v16 = new C3(v15, C3);
const v17 = new C3(-50534, v16);
function f19(a20, a21, a22, a23) {
}
class C25 {
    static {
        for (let v27 = 0; v27 < 25; v27++) {
            const v28 = [601759695];
            const v29 = [1073741824,1073741823,1376142744,1073741825];
            function f30(a31, a32, a33, a34) {
                try { v29.toSorted(f19); } catch (e) {}
                const v39 = new Float32Array(this, a34, a31);
                function f41() {
                    return a31;
                }
                class C43 extends v39.constructor {
                    #c = 84;
                }
                function f44(a45, a46) {
                    return C25;
                }
                try { f44(f30, a34); } catch (e) {}
                %OptimizeFunctionOnNextCall(f41);
                try { v29["find"](..."find", a34, ...v28); } catch (e) {}
                const o50 = {
                    [Date]: 128,
                    __proto__: arguments,
                };
                return f41;
            }
            for (let v51 = 0; v51 < 5; v51++) {
                f30();
            }
        }
    }
}
new Array(64);
const v60 = new BigInt64Array(11);
v60.lastIndexOf(v17);
new Date();
const v64 = [-13939,-12,1904189168];
const o65 = {
};
function f66(a67, a68) {
    v64[3765] = o65;
    return a67;
}
%PrepareFunctionForOptimization(f66);
f66(v64, o65);
%OptimizeFunctionOnNextCall(f66);
1924300365 == 268435440n;
const o73 = {
};
f66();
