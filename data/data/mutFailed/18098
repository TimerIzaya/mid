class C3 {
    static #toString(a5, a6) {
        try { a5.getUTCMonth(this, 679862347, this, this, a5); } catch (e) {}
        [2.0,-1e-15,1000000000.0,2.0,1.0,-2.2250738585072014e-308,-533390.6409235646,-4.349748372818292,-4.4291928400221336e+307,1000.0];
        const v9 = [0.15396225818223686,-1000.0,-1.1833201181227544];
        [-5.7261928451691695,-1000000000.0,-92145.42838168854,-465.04564694665487];
        return v9;
    }
    129;
    5 = -858969296;
    [-1] = -858969296;
    static #a;
}
C3.length = C3;
const v11 = new C3();
const v12 = v11[129];
const v13 = new C3();
const v14 = new v11();
v14[129] = v14;
function f15(a16, a17, a18, a19) {
    const v20 = f15?.__lookupSetter__;
    let v21;
    try { v21 = new v20(f15); } catch (e) {}
    a18 ^ a18;
    const o32 = {
        "b": a17,
        [C3](a24, a25) {
            a24[1] = v21;
            a19--;
            const o30 = {
                "execution": "IOimR",
                "type": "minor",
            };
            return gc(o30);
        },
    };
    o32.b;
    return o32;
}
const v34 = f15(v14, v11, 127, v13);
try { v34.toString(); } catch (e) {}
f15(v13, f15(v11, v13, -858969296, v11), -858969296, v13);
function f38(a39, a40) {
    const v41 = [a39,a39];
    const v42 = v41.at(a39);
    try { v42(127, v41); } catch (e) {}
    return f38;
}
f38.arguments;
%PrepareFunctionForOptimization(f38);
const v45 = v12(f38, f38, v11, f15, v14);
%OptimizeFunctionOnNextCall(f38);
const v46 = f38(f38, v45);
v46.e = v46;
