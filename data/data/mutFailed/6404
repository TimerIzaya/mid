const v0 = /ra?w9a(?=b)c?/vi;
Math.sin(-4294967295);
class C4 {
}
/S(a\1)/gvdmsy;
/(?:foo)/gvdimy;
class C11 {
}
const v12 = new C11();
const v13 = new Math();
class C14 {
    constructor(a16, a17) {
        const v18 = a16?.constructor;
        let v19;
        try { v19 = this.toLocaleString(this, v18, v12); } catch (e) {}
        v19.charCodeAt(v13);
        this[-4294967295] >>>= -4294967295;
        for (let v21 = 0; v21 < 25; v21++) {
            new C11();
            for (let v24 = 0; v24 < 10; v24++) {
                const v25 = [601759695];
                const v26 = [1073741824,1073741823,1376142744,1073741825];
                try { v26["find"](..."find", undefined, ...v25, ...undefined); } catch (e) {}
            }
            const v30 = new Map(a16);
            const v32 = "p" + -4294967295;
            const v33 = new Map(v30);
            function f34(a35, a36) {
                const o37 = {
                    [v33]: Map,
                };
                return o37;
            }
            f34(v18, this);
            v30[v32] = -4294967295;
        }
    }
    536870887;
}
const v44 = [-6.6253083485926005];
[-26594n,v44,v44,52262n,1000000000.0];
[1000000000.0,-6.6253083485926005,1000000000.0,v0,v0];
function f48() {
    return 256;
}
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this.constructor;
    try { new v53(a51); } catch (e) {}
    -a51;
    a52--;
    this.h = f48;
}
class C57 extends F49 {
    3120 = F49;
}
const v59 = ([]).constructor;
function* f60(a61) {
    return f60;
}
class C63 {
    toString(a65) {
        const t62 = super["bigint"];
        t62[9] = 0;
    }
}
new C63();
const o70 = {
};
for (let v71 = 0; v71 < 5; v71++) {
    function f72() {
        try {
            return /2a\sc/uds;
        } catch(e74) {
        }
        return v71;
    }
    f72.call();
    %OptimizeFunctionOnNextCall(f72);
}
const v76 = new Float32Array();
v76.filter(v59);
gc(256);
for (let [v82,...v83] of "atan2") {
}
