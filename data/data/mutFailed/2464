function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -65535;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
v4.a >>>= v4;
const o10 = {
    "execution": "async",
    "type": "minor",
};
gc(o10);
class C12 {
    get a() {
        const v14 = `gQ${v4}symbol${v6}4096${this}d${this}symbol`;
        try {
            super.cbrt(v14, v4, F0, v5, v14);
        } catch(e16) {
        }
        return v6;
    }
    static #h = F0;
    6 = v6;
}
const v17 = new C12();
const v18 = new C12();
const v19 = new C12();
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v6;
    } catch(e26) {
    }
    try {
        this.c = a25;
    } catch(e27) {
    }
    try {
        this.b = a24;
    } catch(e28) {
    }
}
const v29 = new F20(v17, F0, v17, C12);
const v30 = new F20(v19, v18, v29, v5);
new F20(v19, v30, v19, v4);
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1;
    } catch(e35) {
    }
    try {
        this.c = 1;
    } catch(e36) {
    }
    function f37() {
        return F0;
    }
    v6 ^ C12;
    this.c;
    try {
        this.d = 1;
    } catch(e40) {
    }
}
new F32();
const v42 = new F32();
new F32();
12 * 12;
const v49 = ([12,12])?.indexOf;
try { new v49(Int32Array); } catch (e) {}
2707 / 2707;
let v55 = -128n;
const v58 = [8.858723857900515,Infinity,-1.1848494944569402e+308,383427.98921984946];
class C62 {
    set b(a64) {
        gc();
    }
}
const v67 = new C62();
v67.b = v58;
++v55;
new Uint8Array(2707, 2707, 128);
const v70 = new Int32Array(128);
Uint16Array.name;
const v74 = new Uint16Array(92);
const v77 = new Int8Array(257);
const v78 = v77?.subarray;
try { new v78(F32, 92); } catch (e) {}
function f80() {
}
try { f80(); } catch (e) {}
const v82 = [f80,f80];
const v84 = new Date();
try { v84.setDate(F32); } catch (e) {}
try { ("getUTCMinutes").fixed(); } catch (e) {}
v84["getUTCMinutes"]();
const o90 = {
    0: "1ya",
    162: "1ya",
};
o90[162];
try { v82.includes(v82); } catch (e) {}
const v93 = [v82,f80];
v93.b = v93;
const v94 = [v93];
try { v94.pop(); } catch (e) {}
let v98;
try { v98 = ("toString").padStart(v42); } catch (e) {}
v98[6] = v98;
try { ("-1865512128").valueOf(); } catch (e) {}
const o109 = {
    toString(a103, a104, a105, a106) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
try { Uint8ClampedArray.from(128); } catch (e) {}
new BigUint64Array(12);
Date.b = Date;
class C117 extends Date {
    static get c() {
        const v119 = `
        `;
        eval();
    }
}
new Uint8ClampedArray(3989);
try { ("Bl4").toWellFormed(); } catch (e) {}
const v127 = new BigUint64Array("Bl4");
let v134 = -65295;
let v135 = -1756920223n | v134;
Math.pow(58951, v134);
Math.abs(v70);
v134++;
v135++;
Int32Array.name = Int32Array;
const v140 = new Int32Array();
v140.__proto__ = v127;
let v142;
try { v142 = new Int8Array(3989, v74, 3989); } catch (e) {}
v142?.constructor;
class C144 {
}
const v145 = new C144();
v145[10] = v145;
v145[10].prototype;
const o151 = {
    "execution": "async",
    "type": "minor",
};
gc(o151);
