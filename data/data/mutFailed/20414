class C3 {
    static [1];
    static #d;
    #a;
    #toString(a5, a6) {
        let {"b":v7,"d":v8,"h":v9,} = a5;
        v9[3] &= v9;
        for (let v11 = 0; v11 < 32; v11++) {
            v9["p" + v11] = v11;
        }
        return v8;
    }
    3988828809;
}
C3.length = C3;
const v14 = new C3();
v14[3988828809] = v14;
const v15 = new C3();
const t18 = "boolean";
t18[3988828809] = v15;
const v16 = new C3();
v16[3988828809];
function f18() {
    return "boolean";
}
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23("boolean", this); } catch (e) {}
    try {
        this.d = a22;
    } catch(e25) {
    }
    try {
        this.e = v15;
    } catch(e26) {
    }
}
const v27 = new F19("boolean", f18);
new F19(v15, v27);
new C3(v16, v14);
class C30 {
    static #n(a32, a33) {
        try { v15.isFinite(this); } catch (e) {}
        a32[536870887] = "boolean";
        return a33;
    }
    static 945 = "boolean";
    static 14 = f18;
    static {
        this[945] = this;
        [-468234187,-8,-2,-32119,-15375];
        [64,-7,65535];
        [2147483647,4096,-18157,22539,-625341927];
    }
    static #c = C30;
    static [-2.2250738585072014e-308];
    static 137;
}
const v39 = new C30();
new C30();
const v41 = new v39();
v41?.propertyIsEnumerable;
try { new v41(C30); } catch (e) {}
function f44(a45, a46, a47, a48) {
    a46 | a46;
    a47++;
    try { a46.toString(); } catch (e) {}
    const v53 = arguments.toString(a45, f44, f44, a45);
    ("boolean")[9];
    function f55() {
        let v56 = -268435456;
        v56--;
        const v58 = v56--;
        const v59 = v58 + v58;
        const v60 = v56 + v56;
        v60 >>> v60;
        const v62 = -v59;
        v62 - v62;
        const o64 = {
            [v53]: a45,
        };
        return f44;
    }
    f55();
    %OptimizeFunctionOnNextCall(f55);
    return f44;
}
for (let v66 = 0; v66 < 5; v66++) {
    const t89 = f44(f44, v66, v66, v66);
    t89.d = F19;
}
