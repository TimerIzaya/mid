const v0 = [1073741825,0];
const v1 = [16,2147483648,-697686718,-1161996637,-54902,9007199254740992];
const v3 = ([1.479450712344466]).join();
for (let v4 = 0; v4 < 25; v4++) {
    v3.__proto__;
}
const v6 = [1024,1073741824,-1016939374,127,1672346697,5121,49802,1743045141,11];
const v8 = [v0,v1,v6,[v6]];
for (let v9 = 0; v9 < 32; v9++) {
    v8["p" + v9] = v9;
}
[v1,v1];
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v17 = 0; v17 < 5; v17++) {
    function f18() {
        try {
            v16.forEach();
        } catch(e20) {
            e20.constructor().constructor.stackTraceLimit;
        }
        return v17;
    }
    f18.call();
    %OptimizeFunctionOnNextCall(f18);
}
new BigInt64Array(2008790163);
new BigInt64Array(2289);
new Uint8ClampedArray(15);
const v37 = Symbol.toStringTag;
new Uint8Array(245);
function f39(a40, a41, a42) {
    const v46 = new v37(242);
    try { Int16Array.apply(128, v46); } catch (e) {}
    try { a40(); } catch (e) {}
    return a42;
}
%PrepareFunctionForOptimization(f39);
f39(f39, f39, f39);
%OptimizeFunctionOnNextCall(f39);
function f51() {
}
function f52(a53) {
    const v54 = (15).constructor;
    new Uint8ClampedArray(2008790163);
    try { v54(a53, f51); } catch (e) {}
    class C59 {
    }
    return f52;
}
f39();
const v62 = new Float32Array();
for (let v63 = 0; v63 < 5; v63++) {
    v62[836499325] = ~v63;
}
