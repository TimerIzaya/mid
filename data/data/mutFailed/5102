function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a5;
    } catch(e6) {
    }
    try {
        this.e = a5;
    } catch(e7) {
    }
}
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty();
    const v13 = this.constructor;
    try { new v13(); } catch (e) {}
}
new F8();
const v16 = new F3(49757n);
const v17 = new F3(49757n);
const v18 = new F3(49757n);
class C19 extends F3 {
    valueOf(a21, a22) {
        let v25 = 536870887;
        const v27 = v25++;
        Math.random();
        Math.cos(a22);
        Math.min(3);
        Math.asin(v27 >> this);
        return 49757n;
    }
    d = v18;
    [49757n];
}
new C19();
new C19();
const t36 = -769381416n;
const v35 = new t36();
class C37 {
    toString(a39) {
        this.e *= 0.8199829542463926;
    }
}
function f41(a42, a43) {
    const o57 = {
        [a43](a45, a46, a47) {
            a46[Symbol.iterator] = a45;
            super.f;
            return F3;
        },
        3: a43,
        [49757n]: F3,
        2: v35,
        p(a52, a53, a54) {
            a54 = a43;
            super[a53] = a42;
            a43 in a54;
            return a54;
        },
    };
    return o57;
}
f41(v35, v18);
f41(v16, v17);
f41(v35, v16);
class C61 {
}
const v62 = new C61();
const v63 = new C61();
const v66 = new Int32Array(C61, 129, 129);
const v68 = new BigInt64Array(129);
const v69 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v70;
try { v70 = v69.some(); } catch (e) {}
const v71 = [-1.7976931348623157e+308];
function f72(a73, a74, a75, a76) {
    const o90 = {
        toString(a78, a79, a80) {
            let v81;
            try { v81 = this.toString(a79, v70, a78); } catch (e) {}
            function f83(a84, a85, a86) {
                return v62 == v63 ? v62 : v63;
            }
            f83(255n, v81);
            a75[a74] = a73;
            return v70;
        },
    };
    return o90;
}
const v91 = f72(v68, 129, v71);
const v92 = f72(v66, 129, v69);
for (let v93 = 0; v93 < 5; v93++) {
    16 | 16;
    function F96(a98, a99) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = a99;
    }
    new F96(F96, F96);
    v92 % v91;
}
