let v2 = 1292993332;
class C3 {
    n(a5) {
        try {
            super.getFloat64(this, a5, 286.2033587495155, this, a5);
        } catch(e7) {
        }
        return this;
    }
    o(a9, a10) {
        -0.0 >> v2;
        C3.__proto__;
        a10?.[268435441];
        v2 >>= a9;
        a10 += 286.2033587495155;
        const o16 = {
            "maxByteLength": 140,
        };
        const v18 = new ArrayBuffer(-11185, o16);
        new DataView(v18);
        try { new a10(-0.0, -0.0, this, a9, -0.0); } catch (e) {}
        const v23 = Symbol.species;
        this[v23] = v23;
        return a10;
    }
}
const v24 = new C3();
const v25 = new v24();
new C3();
[706.4323046323955,0.850069447256286,-Infinity,-2.0];
[999586.209978109,0.8357515074305869,-1000000000000.0,-3.8667760643169906,2.2250738585072014e-308,1000000000.0,-0.0,0.11058292341071518,0.9283636057158354,-2.2250738585072014e-308];
const v29 = [-3.0,-4.0,-547487.5267014592];
new BigUint64Array(257);
new Uint8ClampedArray(39);
const o36 = {
};
const v38 = new Proxy(v29, o36);
const v39 = v38 >= 286.2033587495155;
v39 ? v38 : 286.2033587495155;
(v25 > v38 ? v25 : v38) - v24;
new Uint16Array(1380);
function F50() {
    if (!new.target) { throw 'must be called with new'; }
}
const v52 = new Uint16Array();
const v53 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v54 = 0; v54 < 5; v54++) {
    function f55() {
        try {
            v53.forEach();
        } catch(e57) {
            e57.a = e57;
            v39.a = v52;
            e57.a = e57;
        }
        const v59 = Symbol.toPrimitive;
        v59.description;
        Symbol.for();
        return v59;
    }
    F50();
    %OptimizeFunctionOnNextCall(f55);
}
