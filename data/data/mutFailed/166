function f0() {
}
class C1 extends f0 {
    static {
        const v4 = f0 !== this ? f0 : this;
        try {
            v4.h = this;
        } catch(e5) {
        }
    }
    constructor() {
        super();
        try { ("number").codePointAt("number"); } catch (e) {}
    }
}
new C1();
new C1();
new C1();
-5 - -5;
4294967296 - 4294967296;
new Uint8ClampedArray(3369);
Uint32Array.d = Uint32Array;
const v24 = new Uint32Array(257);
try { v24.join(C1); } catch (e) {}
new Int32Array(257);
function f29() {
    const v31 = ~0.043152456200264866;
    const o35 = {
        8: 0.043152456200264866,
        get a() {
            this[8] = v31;
            Math.acos(0.043152456200264866);
        },
    };
    return o35;
}
const t36 = -5;
t36();
const v37 = f29();
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    a41[8] = a41;
    this.d = 257;
    this.h = a42;
}
const v45 = new F39(v37, v24);
function f47(a48, a49, a50) {
    function f52(a53) {
    }
    a48[1] = a50;
}
("function")[4];
const v57 = [v45];
const o58 = {
    "arguments": v57,
    "type": "function",
};
o58.e = 257;
new Worker(f47, o58);
function f0() {
}
new Uint8Array(87);
new Int8Array(90);
new Uint8Array(2);
new Set();
const v17 = Date[2];
try {
    f0[65535] = Uint8Array;
} catch(e18) {
}
Date.now();
const v22 = [Date];
v22.toString = v17;
9 ** v22;
