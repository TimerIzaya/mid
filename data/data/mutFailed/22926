const v2 = new BigInt64Array(115);
let v3 = 1459696932;
const v4 = v3--;
const v5 = v4 / v4;
try { Float32Array(v4, BigInt64Array, v4); } catch (e) {}
const v8 = new Float32Array(v3);
const v11 = new Int16Array(2);
v11[1] = v11;
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    a14 / a14;
    a14 - a14;
    try {
        this.g = a15;
    } catch(e19) {
    }
}
v11.caller = F12;
const v20 = new F12(v3, 115, 115);
const v21 = new F12(2, v3, 2, v20, v20, F12);
const v22 = new F12(115, 2, v3);
v22.d = v22;
class C23 {
    d;
    #o(a25, a26, a27) {
        try {
            v2.find(Int16Array, a25);
        } catch(e29) {
        }
        return a25;
    }
    [F12] = v21;
    88;
    257;
    #h;
    e = v8;
    b;
}
try { new C23(); } catch (e) {}
const v31 = new v5();
v31[257];
new C23();
new C23();
"c" == "c";
const v38 = Math.round();
for (let v39 = 0; v39 < 10; v39++) {
    const v40 = v39 & v39;
    v40 - v40;
    async function f42(a43, a44, a45) {
        const v46 = "c" && f42;
        v46 % v46;
        BigInt64Array.prototype = BigInt64Array;
        try { BigInt64Array(v46); } catch (e) {}
        const v51 = new BigInt64Array(4096);
        v51[2175];
        const v53 = v51[1087];
        v53 ^ v53;
        for (let i = 0; i < 5; i++) {
            class C55 {
            }
            try { new C55(); } catch (e) {}
            let v57 = C55.length;
            v57++;
            for (let v59 = 0; v59 < 5; v59++) {
            }
        }
        const v60 = await v38;
        v60 | v60;
    }
    f42.f = f42;
    f42();
}
