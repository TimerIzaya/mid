const v0 = [];
[-65536,-37258,7,1150383913,1249979106,1128086379,4096,14,-604745739];
const v2 = [256,-24970,9007199254740991,-536870912,1073741824,-31968,2147483649,-9007199254740992,0,4096];
[9007199254740991,-1073741824,-1893183875,-2,392722854,-431346731,-21378,4294967296,4294967295];
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
function f7(a8, a9) {
    a8.name = a8;
    a9.length = a9;
    try { a8(f7); } catch (e) {}
    try { a8(BigInt64Array); } catch (e) {}
    a9.constructor(a9);
    return f7;
}
const v14 = new Promise(f7, Uint8Array);
try { v14.then(); } catch (e) {}
function f16(a17, a18) {
    const o19 = {
    };
    o19.g = o19;
    return o19;
}
try { f16(v14, v14); } catch (e) {}
class C23 {
    constructor(a25, a26, a27, a28) {
        this[1276125173] = v2.every(this, this, a28, a28, a25, ...v2);
        super.f;
        for (let v33 = 0; v33 < 25; v33++) {
        }
        function F34(a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            const v41 = new Float32Array(this, a38, a38);
            const v43 = new Uint8Array(268435440);
            new Uint8ClampedArray(129);
            v43[6] = v41;
        }
        let v48 = 4.61636394404693e+307;
        const v49 = --v48;
        const v50 = !-8;
        Math.exp(v49);
        Math.cos(v50);
    }
    static valueOf(a54) {
        super[a54] = this;
        v0[v0] = v0;
        return super[v0];
    }
}
const v57 = new Uint8Array(Uint8Array);
const o58 = {
    ...v57,
};
new C23(-4096, -4096, -4096, -4096);
new C23(-4096, -4096, -65537, -4096);
new C23(-65535, -65535, -65535, -65535);
const v62 = /(?<a>.)\k<a>?/vdimsy;
let v63;
try { v63 = v62(); } catch (e) {}
const v64 = [v63,v63,v63];
function f65() {
    const v66 = -v64;
    const t60 = v66 && v64;
    t60[v66] &= v63;
    return v62;
}
%PrepareFunctionForOptimization(f65);
Reflect.construct(Int8Array, [1126838905]);
f65();
%OptimizeFunctionOnNextCall(f65);
let v74 = 852.2904873570058;
v74++;
const v76 = [1000000000.0,5.0,1000000000.0,-1.0,-195466.27982473024,-0.0];
function F77(a79, a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    const v84 = 9007199254740991n * 9007199254740991n;
    v84 * v84;
    const v88 = new BigUint64Array(255);
    v88.buffer.slice();
    try { a80.fill(v76); } catch (e) {}
    a81[0] = a81;
    try {
        this.e = a82;
    } catch(e92) {
    }
    try {
        this.h = a80;
    } catch(e93) {
    }
    for (const v95 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
        ("-2").normalize("NFKC");
    }
}
f65();
