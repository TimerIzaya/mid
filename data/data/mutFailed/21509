const v0 = [-3,1423257552,-2];
const v1 = /8[\cA]v/uisy;
const v2 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v2.length = v1;
} catch(e3) {
}
const v4 = [-9007199254740990,-1655968524,-50382];
const v5 = [6,16,268435441,4,-49599,1073741824];
function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this?.constructor;
    try { new v9(v4); } catch (e) {}
    const v11 = this?.constructor;
    v11.prototype = v11;
    try { new v11(v4); } catch (e) {}
    try {
        this.e = v0;
    } catch(e13) {
    }
    try {
        this.c = a8;
    } catch(e14) {
    }
    try {
        this.b = v4;
    } catch(e15) {
        class C16 {
            static #m(a18, a19, a20) {
            }
            constructor(a22, a23, a24, a25) {
                --a25;
                try {
                    this.#m();
                } catch(e28) {
                }
            }
        }
    }
}
const v30 = new BigUint64Array();
const o31 = {
    __proto__: v30,
};
try { o31.at(v4); } catch (e) {}
const v33 = new F6(v4);
const v34 = v33.e;
v34[1];
try { v34.map(v5); } catch (e) {}
const v37 = new F6(v33);
v37[1] = v37;
v37.b = v37;
const v38 = v37.e;
try { v38.sort(v34); } catch (e) {}
const v40 = new F6(v33);
v40.e;
const v42 = v40?.valueOf;
try { v42.toString(); } catch (e) {}
try { new v42(); } catch (e) {}
function f45(a46, a47, a48, a49) {
    a48.e = a48;
    try { a49.findLast(a48); } catch (e) {}
    a46.c;
    try { a49.reduce(a48); } catch (e) {}
    a46.c = a46;
    const v53 = a49?.findLast;
    try { new v53(a49); } catch (e) {}
    const o60 = {
        get g() {
            a48 = this;
            a46 = v33;
            v5 >> v37;
            return v5;
        },
        [a46]: a48,
        "g": a46,
        "c": a48,
    };
    return o60;
}
f45(v37, v37, v33, v0);
const v62 = f45(v40, v37, v40, v0);
v62.g = v62;
const v63 = f45(v33, v40, v40, v0);
new Float32Array(165);
function f67(a68, a69, a70, a71) {
    Int8Array.length = Int8Array;
    const v73 = new Int8Array();
    const v74 = v73.buffer;
    v74.g = v74;
    return Int8Array;
}
f67();
%OptimizeFunctionOnNextCall(f67);
const v76 = v63.c;
v76[4] = v76;
[886.8355067666025,1000000000.0];
[-1.0,2.2250738585072014e-308,-649320.1638426211,0.08970489124525116,-4.49906203622864e+307,2.220446049250313e-16,2.220446049250313e-16,5.0,-5.0,1000000.0];
const v79 = [3.0,-Infinity,572.3923256908752,-3.9006984395706805,-3.0,0.36231158244973827];
v79[3] = v79;
let v80;
try { v80 = v79.group(f45); } catch (e) {}
v80.c = v80;
function f82(a83, a84, a85, a86) {
    "valueOf" | a84;
    a83 / a84;
    const v89 = a84 < a84;
    v89 >>> a85;
    const o94 = {
        n(a92, a93) {
            return v89;
        },
    };
}
try { Math.expm1("valueOf"); } catch (e) {}
const v98 = Math.cos(-1567809689);
v98 >> v98;
