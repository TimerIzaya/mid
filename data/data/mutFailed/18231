const v2 = new Uint8ClampedArray(256);
1784 >= 1784;
function f6() {
    for (let i10 = 0, i11 = 10;
        (() => {
            const v12 = i10 < i11;
            class C13 extends Date {
            }
            return v12;
        })();
        i10++) {
    }
    return 1784;
}
Float32Array[Symbol.iterator] = f6;
try { Float32Array.apply(Float32Array, v2); } catch (e) {}
new Float32Array(1784);
try { Uint32Array.from(Float32Array); } catch (e) {}
new Uint32Array(1400);
const v27 = [-1000000.0,NaN,0.9448799403139216,1.7976931348623157e+308,1000000.0,Infinity,245808.27845762414,-840.4667273663769,231176.82140775677];
[-0.584106292095445];
const v29 = [-2.2250738585072014e-308,3.0,-249.6125574088826,0.7463006706423734,1.0,1000.0];
const v30 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
Object.defineProperty(v30, Symbol.toPrimitive, { writable: true, configurable: true, value: f6 });
function f33(a34, a35) {
    a34.toString = f33;
    a35.toString = Symbol;
    try { a34.entries(); } catch (e) {}
    try { a35.flatMap(256); } catch (e) {}
    function F39(a41) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.toString(); } catch (e) {}
        139837843 in this;
    }
    new a35();
    new F39(a35);
    const o46 = {
        __proto__: v30,
    };
    o46[4];
    return o46;
}
try { v27.bind(f33); } catch (e) {}
const v49 = f33(v30, v30);
try { v49.fill(v29); } catch (e) {}
v49.group(f33);
