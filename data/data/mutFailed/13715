class C3 {
    o(a5, a6) {
        a5 = 1000000000000.0;
        try {
            const v8 = [9,1073741825,-4096,10,1,4294967297,911296943,-9223372036854775808,-53393,16];
            const v9 = [2147483648,-9223372036854775808,1073741823,-5827,17147,6507,0,255,61798];
            const v10 = [-10,2,536870888,-6,-10,-16,3090,-1132274585,-4612];
            class C11 {
                valueOf(a13, a14) {
                    v8.length -= a13;
                    return v10 % v9;
                }
                1 = v8;
                static #m(a17, a18) {
                    return 5n;
                }
                2916208505 = v9;
            }
            const v22 = new v9();
            let v23 = new C3();
            C3?.[v9];
            const o31 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o31);
            const v33 = new C11();
            try {
                v33.a = C11;
            } catch(e34) {
            }
            new BigInt64Array(255);
            new Uint8Array(127);
            new Int8Array(10);
            function F44(a46, a47, a48, a49) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = C11;
                } catch(e50) {
                }
            }
            const v51 = new F44(v8, v9, v33, v9);
            function f52(a53, a54, a55) {
                const o62 = {
                    "g": v9,
                    __proto__: a53,
                    8: a54,
                    176: a53,
                    p(a57, a58, a59) {
                        v23 = this;
                        %VerifyType(this);
                        v9["some"](a54, v8);
                        return a53;
                    },
                    "d": a55,
                };
                return C11;
            }
            f52(v51, v9, v22);
            this.length = 3;
        } catch(e64) {
        }
        return a6;
    }
    #e;
}
new C3();
const v66 = new C3();
const v67 = new C3();
const v70 = new Uint16Array(108);
new Uint32Array(1444);
new Uint16Array(2);
new Uint8Array(28);
function f80(a81, a82) {
    a82.apply();
    return a81;
}
const v85 = new Promise(f80);
class C86 extends v85 {
    constructor(a88, a89, a90, a91) {
        super();
        a88[268435441] = this;
    }
    static #b;
    #valueOf(a93, a94, a95) {
        return this[a93];
    }
    #c = -1.7976931348623157e+308;
    p(a98, a99, a100) {
        v70.byteOffset %= -1.7976931348623157e+308;
        try { a98(Uint16Array, v67); } catch (e) {}
        return a100;
    }
}
const v105 = new C86(v67, C3, Infinity, v66);
const v106 = new C86(C3, v105, 1000000000000.0, v105);
new C86(C86, v106, 1000000000000.0, C86);
let v110 = 0 < 7;
v85.valueOf();
const v112 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
try { v112(); } catch (e) {}
class C117 {
}
const v118 = new C117();
function F120(a122, a123) {
    if (!new.target) { throw 'must be called with new'; }
}
const v127 = F120.constructor;
let v128;
try { v128 = v127("function"); } catch (e) {}
let v130 = -10;
function F132(a134, a135) {
    if (!new.target) { throw 'must be called with new'; }
    const v136 = a134?.__lookupSetter__;
    let v137;
    try { v137 = new v136(a134, ...v136, -534568.6902183883, this); } catch (e) {}
    try {
        v118.__proto__ = a134;
        const v138 = delete v137?.[v137];
        const v139 = --v110;
        v137[10] >>= v128;
        v130 = v139;
        v138?.[64];
    } catch(e141) {
    }
    try { v136(6); } catch (e) {}
    a135[2147483648] = a135;
    const v144 = new Int8Array();
    for (const v145 in v144) {
    }
}
