const v3 = [7,256,14,14532,2,-9007199254740990];
function f4() {
    v3.length;
    function F7(a9) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v10 = new F7("a");
    for (const v12 in "findIndex") {
        v10.d = v12;
    }
    return v3;
}
v3.toString = f4;
const v14 = new Uint32Array();
v14.true = f4;
for (let i17 = 0, i18 = 10;
    (() => {
        const v19 = i17 < i18;
        v14[v19];
        return v19;
    })();
    i18--) {
}
[12,257,-61047,-9223372036854775808,-2012956657];
const v27 = [-1414,-2069306306,-51814,8,9007199254740990,-13,1467666680,2147483649];
v27.valueOf = f4;
try { ("undefined").codePointAt(-65535n); } catch (e) {}
class C32 {
    set f(a34) {
        function f35(a36, a37) {
            const t30 = "9007199254740992";
            t30[Symbol.species] = -65535n;
        }
        new Promise(f35);
    }
    static #e = 7n;
    static 255 = "undefined";
    h = v3;
    #a = C32;
    [v27] = "9007199254740992";
    static #h;
    #f;
    #g;
}
const v42 = new C32();
v42.h = v42;
const v43 = new C32();
const v44 = new C32();
v44.h;
Math.log10(8);
new Uint8ClampedArray(9);
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a54, "valueOf", { configurable: true, value: f4 });
    function f57() {
        const v60 = new Uint8ClampedArray(1000);
        v60.includes(undefined);
        return 9;
    }
    a55.constructor = f57;
    a54.h = a54;
    a56--;
    a54 >> a54;
    48979n instanceof C32;
    const v66 = this[-2];
    this[v66] ||= v66;
    class C67 {
    }
    const v68 = new C67();
    class C69 {
        static #a = C67;
        static g = v68;
        static {
            delete this.g;
        }
    }
    try {
        this.length = 2;
        class C73 {
        }
        class C77 {
            #c;
            [-0.0];
            #valueOf(a79, a80) {
                a80 = this;
                try {
                    ("MAX_SAFE_INTEGER").#valueOf();
                } catch(e82) {
                }
                a80[3.2149281669993574e+307] = a79;
                return a79;
            }
        }
        new C77();
    } catch(e87) {
    }
    a55?.__defineSetter__;
    const v89 = a55 === a55;
    !v89;
    for (let v91 = 0; v91 < 50; v91++) {
    }
    b = [601759695];
    const v95 = new Uint8ClampedArray(9);
    try { BigInt64Array.from(v95); } catch (e) {}
    const v98 = v89 ** v89;
    v98 - v98;
}
function f100() {
    class C101 {
    }
    C101.prototype = C101;
    const v102 = new C101();
    for (let v103 = 0; v103 < 5; v103++) {
        v103++;
        new F52(F52, v102, v103);
    }
    return v102;
}
const v106 = f100();
v106.constructor = f100;
const v107 = v106?.constructor;
try { new v107(); } catch (e) {}
%PrepareFunctionForOptimization(f100);
const v111 = new Date();
try { v111.getFullYear(); } catch (e) {}
const v113 = v44[v3];
for (let v116 = 0; v116 < 5; v116++) {
    function f117() {
        [Math.atanh(v116)];
        return Math;
    }
    f117();
    %OptimizeFunctionOnNextCall(f117);
}
const v123 = f100();
function f124() {
    function f125(a126) {
        Promise.reject(Promise);
        return v27;
    }
    return f125;
}
function f129(a130) {
    new Int8Array(426);
    new Int16Array(257);
    new Float32Array(10);
}
Object.defineProperty(v123, "constructor", { writable: true, configurable: true, enumerable: true, get: f124, set: f129 });
try { v123.constructor(); } catch (e) {}
%OptimizeFunctionOnNextCall(f100);
const o141 = {
};
let v142 = 0.3050534209767637;
v142--;
const o144 = {
    __proto__: v27,
};
o144.length = o144;
try { o144.push(v27, o144); } catch (e) {}
const v146 = f100();
try { v146.__defineGetter__(v113, v43); } catch (e) {}
