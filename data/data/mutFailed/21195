const v0 = [560574742,21012,1858344764,33454,-61563,-11];
const v1 = [-2147483648,7,-464811765,-4,38501];
const v2 = [6];
const v3 = [v1];
const v5 = [v3,[v1,v1,v3,v0],v1];
class C6 {
    2920349193 = v5;
    9;
    static #n(a8, a9, a10, a11) {
        v0[v3];
        function f14() {
            return -314.9391272852571;
        }
        const v17 = new Map();
        const o21 = {
            set d(a19) {
                v17.delete();
            },
        };
        o21.d /= -2147483647;
        return a9;
    }
    #p(a23, a24) {
        this[0] = a24;
        try {
            super.m(v2, this);
        } catch(e26) {
        }
        return v2;
    }
}
const v27 = new C6();
new v27();
const v30 = new Float32Array();
for (let v31 = 0; v31 < 5; v31++) {
    v30[836499325] = ~v31;
}
const v33 = new C6();
function f34() {
    function f35(a36, a37, a38) {
        return a38;
    }
    const o41 = {
        "type": "function",
    };
    const v42 = new Worker(f35, o41);
    v42.terminateAndWait().terminate();
    return o41;
}
[-Infinity,-3.0];
[-557125.8713770537,4.0,-2.220446049250313e-16,-1000000000.0,-3.397772480739521];
const o47 = {
};
("undefined").localeCompare(v27, o47);
function f50() {
    try {
    } catch(e61) {
        function F62() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function f64() {
            return e61;
        }
    }
}
class C65 {
    #m() {
        const v67 = this in this;
        f50 % f50;
        f50();
        return v67;
    }
    static c;
    static set f(a71) {
        const v73 = Symbol.iterator;
        const o82 = {
            [v73]() {
                let v75 = 10;
                const o81 = {
                    next() {
                        v75--;
                        v75 == 0;
                        const o80 = {
                            "done": v33,
                            "value": v75,
                        };
                        return o80;
                    },
                };
                return o81;
            },
        };
    }
}
[7.0482289407922245,1000000000.0,1000000.0,1000.0,Infinity,-800.5747867692543,1e-15];
function F84(a86) {
    if (!new.target) { throw 'must be called with new'; }
    try { a86.groupToMap(a86, a86, a86, F84, this); } catch (e) {}
    function F88(a90, a91) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e92) {
            const v93 = -Infinity;
            const o94 = {
                "a": v93,
                "d": v93,
            };
        }
        try {
        } catch(e95) {
        }
    }
}
("number").match(F84);
