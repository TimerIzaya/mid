class C3 {
    static 65536 = -899;
    static d = 869642.5723028006;
    #n(a5) {
        try {
            if (this > C3) {
                869642.5723028006 + a5;
            } else {
                this ^ a5;
            }
            a5.valueOf = a5;
        } catch(e9) {
        }
        return this;
    }
    3418;
    4096 = 869642.5723028006;
    static 1685;
    #g = -899;
    [C3];
    [-899] = -899;
    #g;
    b;
    static f = 2.297621653272774;
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
const v14 = new WeakSet();
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    try {
        class C23 {
        }
        const v24 = new C23();
        v24.f = v24;
        const v25 = new a17();
        const v26 = new C23();
        function F27(a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            const v32 = (a30--)?.constructor;
            v32.MAX_SAFE_INTEGER;
            new v32();
            const v35 = this.constructor;
            try { v35(a29, v26); } catch (e) {}
        }
        new F27(204, 2415);
        new F27(v26, v25);
        this.d = v14;
    } catch(e39) {
    }
    try {
        this.a = a17;
    } catch(e40) {
    }
    try {
        this.e = v10;
    } catch(e41) {
    }
    const v42 = `
        a17[6] = this;
    `;
    eval(v42);
}
new F15(v14, v10, 2.297621653272774, v14);
new F15(v10, v10, 2.297621653272774, v12);
new F15(v11, v14, v10, C3);
const v51 = new BigUint64Array(256);
v51.toSorted();
