function f0() {
    const o10 = {
        __proto__: f0,
        get d() {
            this[16] = -2.0;
            -2.0 in this;
            this[100];
            for (let v7 = 0; v7 < 32; v7++) {
                const t8 = "p";
                t8["p" + v7] = v7;
            }
            return -2.0;
        },
        "a": 4.28955607867637,
    };
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
class C17 {
    #m(a19, a20, a21) {
        %PrepareFunctionForOptimization(f0());
        f0();
        f0();
        %OptimizeFunctionOnNextCall(f0);
        f0();
        return f0;
    }
    static [v12] = -838361874n;
    [-838361874n];
    0 = v13;
    static #h = 30907n;
}
new C17();
const v27 = new C17();
new C17();
new BigInt64Array(8);
new Uint8ClampedArray(2105);
new Float32Array(118);
const v39 = [1.0663730977141727e+308,NaN,-1.1534060997380896e+308,-9.26829361922416e+307];
["function",/xEz\xe2\x81\xa3/gumy];
class C43 {
}
const v44 = new C43();
ReferenceError(v44);
const v47 = [0.3588640203078587,-1e-15,0.5938791097479088,-1000000000.0];
const v48 = v39.constructor;
function f49(a50, a51) {
    return Math.tanh("1");
}
%PrepareFunctionForOptimization(f49);
const v55 = [5.453486096719857];
function F56(a58) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.push(F56); } catch (e) {}
    try {
        this.d = a58;
    } catch(e60) {
        let v62 = new Date();
        v62 **= v62;
    }
}
new F56(v48);
new F56(v47);
const v66 = new F56(v55);
v66.a = v66;
let v68 = 2086125797;
v68++;
const o71 = {
};
Math.cos(-1567809689);
256 === 256;
const v78 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v78);
function f81() {
}
class C82 extends v27 {
}
new C82();
function f85(a86, a87) {
    const o88 = {
    };
    return o88;
}
const v89 = new Set();
function F90(a92, a93) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o99 = {
            o(a95) {
                const o97 = {
                };
                return gc(o97);
            },
        };
        this.d = a92;
    } catch(e100) {
        for (let [v101,v102] of a92) {
        }
    }
    const t101 = 4294967296;
    t101.h = v89;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v109 = [WeakSet];
        const v110 = new F90();
        this.b = v109;
        const v112 = new Map();
        v109[4294967296] = Set;
        const v113 = [v110];
        const v114 = [v113,v113,v110,v112];
        [-256n,v114,-41535,v112,v114];
    } catch(e116) {
    }
}
F90.arguments;
new F90();
