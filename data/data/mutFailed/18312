function f0() {
}
function f14(a15) {
    ([-946345318n]).fill(9223372036854775807);
    return 1679205470;
}
Object.defineProperty(BigUint64Array, Symbol.toPrimitive, { writable: true, configurable: true, value: f14 });
const v22 = new BigUint64Array();
const v24 = new BigUint64Array(1448);
function f25(a26, a27, a28) {
    return a28;
}
v24.toLocaleString(([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(f25), v22);
new BigUint64Array(2864);
let v34 = 2549;
v34--;
new BigInt64Array(v34);
try { Float32Array(v34, v34, undefined); } catch (e) {}
new Float32Array(3);
const v42 = /(J5a{0,1}?)/y;
function f43() {
    const v44 = [];
    const o45 = {
        __proto__: v44,
    };
    return v42;
}
Object.defineProperty(v42, "toString", { configurable: true, enumerable: true, value: f43 });
/u?/udms;
/bf/gvms;
32 >>> 32;
let v50 = 32 + 32;
v50--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v60 = 1582 >> 1582;
v60--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v70 = [-54813,1582,-54813,8];
const v71 = [-54813];
const v72 = [-54813];
v72.valueOf = f0;
try { v72.map(4); } catch (e) {}
function f74(a75, a76, a77, a78) {
    try { a75.toString(); } catch (e) {}
    try { a76.groupToMap(a77); } catch (e) {}
    a77[0] = a77;
    try { a75.copyWithin(undefined, a76); } catch (e) {}
    const o90 = {
        n(a83, a84, a85, a86) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a78;
        },
        ...v72,
        "b": v70,
        ...a77,
        ...v72,
        129: 4,
        ...a75,
    };
    function f91() {
        return o90;
    }
    function f92(a93) {
        [[128,-1641321930,-2147483649]];
    }
    Object.defineProperty(o90, 2, { writable: true, configurable: true, enumerable: true, get: f91, set: f92 });
    o90[2] = o90;
    return o90;
}
const v97 = f74(v71, 8, f74(v71, v72, v70, 4), 4);
v97[129] = v97;
const v98 = f74(v72, 4, 4, 4);
v98.d = v98;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C106 extends Map {
}
const v107 = new C106();
try { v107.get(Uint8Array); } catch (e) {}
const v109 = v107.isPrototypeOf();
v109 && v109;
v109 && v109;
Date.name;
let v115;
try { v115 = Date.parse(4); } catch (e) {}
-v115;
class C117 {
    static {
        for (let v119 = 0; v119 < 25; v119++) {
            v119 >>> v119;
            const v121 = [601759695];
            const v122 = [1073741824,1073741823,1376142744,1073741825];
            function f124(a125, a126, a127, a128) {
                try { new a125(); } catch (e) {}
                a126 & a126;
                ~a126;
                try { new a125(); } catch (e) {}
                const v133 = a127 << a127;
                v133 % v133;
                function f136() {
                }
                const v138 = new Int8Array();
                const v141 = BigUint64Array * 536870887;
                let v142 = v141 - v141;
                v142++;
                const v144 = v141 ** v141;
                try { Number.parseInt(v142, v142); } catch (e) {}
                let v147;
                try { v147 = new Number(v42); } catch (e) {}
                function f148() {
                    return f0;
                }
                Object.defineProperty(v147, "valueOf", { configurable: true, get: f148 });
                try { v147.valueOf(); } catch (e) {}
                Number.isNaN(v144);
                function f151(a152, a153) {
                    return Number;
                }
                try { f151(); } catch (e) {}
                v138.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f136);
                try { v122["find"](..."find", a128, ...v121); } catch (e) {}
                const o159 = {
                };
            }
            for (let v160 = 0; v160 < 5; v160++) {
                f124(this, v160, v160);
            }
        }
    }
}
