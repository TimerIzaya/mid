[-9.752023272906442,0.013275883424997637,NaN,-733404.514039746];
[272.13308427419065,2.0,6.343492233097308,0.1642558456877642,2.0,1000000.0,-0.0,121495.25015292689,1000000.0,4.0];
[4.0,-1000000000000.0,5.015706408064257e+307,-2.2250738585072014e-308];
class C6 {
    ["resolve"] = "resolve";
}
const v8 = new Int32Array(Int32Array);
const o9 = {
};
const v10 = o9.constructor;
const t10 = v10.isSealed(v8);
new t10(8);
new v10(9);
class C19 {
}
class C20 {
}
const v21 = new C20();
v21?.constructor;
new Float32Array(2411);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 268435439;
    } catch(e29) {
    }
}
const v30 = new F26();
const v31 = new F26();
const v32 = new F26();
function f33(a34) {
    const o41 = {
        __proto__: a34,
        ...v31,
        valueOf(a36) {
            return v32;
        },
        ...a34,
        "a": a34,
        "b": C19,
    };
    return o41;
}
f33(v30);
const v43 = f33(v32);
const v44 = f33(v31);
/(ab)[U]/udmy;
const v46 = /2(?!(a))\18/giy;
const v47 = /a[^a]/gms;
class C48 {
}
new C48(v46);
function F50() {
    if (!new.target) { throw 'must be called with new'; }
}
const v52 = new F50();
let v56;
try { v56 = Uint32Array.apply(F50); } catch (e) {}
const v57 = [Uint32Array,Uint32Array,Uint32Array,Uint32Array,Uint32Array];
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = a61.constructor;
    const v66 = new Set();
    const v67 = v66.keys;
    let v68;
    try { v68 = v67(Proxy, v64, 3228, a60); } catch (e) {}
    function F69(a71, a72) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e73) {
        }
        try {
            this.h = v66;
        } catch(e74) {
        }
        try {
            const v75 = v66[this];
            try {
                new F69(v75, -268435456n);
            } catch(e78) {
            }
        } catch(e79) {
        }
        switch (3228) {
            case v68:
                v64[5] = v56;
                break;
        }
    }
    new F69();
    new F69();
    new F69(a61, a62);
}
new F58(v57, v52);
new C48(v47);
const v86 = async (a87, a88, a89) => {
    [v43,a89,F26,v44];
    return v10;
};
