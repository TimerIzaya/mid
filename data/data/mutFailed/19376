new Map();
try { ("function").toWellFormed(); } catch (e) {}
("yd")[1];
const v9 = [2147483647,9,268435441,-39151,7,16,-2019446363,0,4294967295,42568];
v9.length = 1342;
const o11 = {
};
36889n / 36889n;
let v14 = -1523932467;
function F16() {
    if (!new.target) { throw 'must be called with new'; }
}
const v18 = new F16();
function f19(a20, a21) {
    const o28 = {
        [a21](a23, a24, a25) {
        },
        set h(a27) {
        },
        "h": v18,
    };
    return F16;
}
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    class C39 {
        constructor(a41, a42, a43, a44) {
            function F45(a47, a48, a49) {
                if (!new.target) { throw 'must be called with new'; }
                Math.trunc(a43);
                const v51 = this.constructor;
                try { new v51(); } catch (e) {}
            }
            new F45();
        }
    }
    const v54 = new BigInt64Array(11);
    v54.lastIndexOf(this);
}
new F30(F30, F30, F30, F30);
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this?.constructor;
    try { new v61(this, "function"); } catch (e) {}
    a60 - a60;
    try {
        this.a = "dWV";
    } catch(e64) {
    }
    function f66(a67, a68, a69, a70) {
        const o74 = {
            ["42776"](a72, a73) {
            },
        };
        return a67;
    }
    ("function").search(f66);
    try {
        try {
            new Int8Array(-45057);
        } catch(e80) {
        }
        this.b = -256;
    } catch(e81) {
    }
    class C83 extends Date {
    }
    return "toStringTag";
}
F57.caller = F57;
new F57("yd", v14);
v14--;
%OptimizeFunctionOnNextCall(Date);
v9.constructor;
new Uint16Array(0);
new F57("function", -65536n);
new F57("dWV", 2029343304);
const v94 = [1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691];
const v95 = v94.pop;
try { v95(v94); } catch (e) {}
