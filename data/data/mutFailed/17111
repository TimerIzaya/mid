const o20 = {
    toString(a5, a6, a7, a8) {
        const v9 = a7?.[a7];
        129 * v9;
        -(v9 - -19736);
        -v9;
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
const v21 = new Uint16Array(129);
function f25(a26) {
    new BigInt64Array("preventExtensions", a26);
    -25283n && -25283n;
    return a26;
}
Int32Array[Symbol.iterator] = f25;
const v32 = new Int32Array();
let v33;
try { v33 = v32.forEach(v32); } catch (e) {}
function f34() {
    class C35 {
    }
    const v36 = new C35();
    const v37 = v36.constructor;
    const v38 = new v37(f34);
    const v39 = v38.constructor;
    const v40 = new v39();
    const v41 = v36.constructor;
    const v42 = new v41();
    try { v33(); } catch (e) {}
    let v44;
    try { v44 = v41(); } catch (e) {}
    function F45(a47, a48) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = a48;
        } catch(e49) {
        }
        try {
            this.e = 129;
        } catch(e50) {
        }
        try {
            this.d = 129;
        } catch(e51) {
        }
    }
    new F45(v21, v44);
    const v53 = new F45(v32, v39);
    new F45(v53, v53);
    new v41(v39, f34, v42, v40, v37);
    const t54 = v21.constructor;
    const v57 = new t54();
    const t56 = v39.constructor;
    new t56();
    const v60 = new C35();
    const v61 = v60.constructor;
    const t60 = v61.valueOf(v61, v61, f34, v61);
    new t60();
    return v57;
}
new BigInt64Array(129);
const v65 = [-2.220446049250313e-16,0.4010936999061169];
try {
    v65.length = -2;
} catch(e67) {
}
class C69 {
    #f;
    [955];
}
C69 / "preventExtensions";
try { v33(o20); } catch (e) {}
function F72(a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = Int32Array;
    } catch(e76) {
    }
    try {
        this.c = 955;
    } catch(e77) {
    }
}
new F72(-2, 955);
new F72(64, 955);
new F72(129, 129);
new C69();
function f84() {
    return C69;
}
Object.defineProperty(Int32Array, 2, { configurable: true, enumerable: true, get: f84 });
const v85 = new Int32Array(Int32Array, Int32Array, Int32Array);
const o90 = {
    toString(a87, a88, a89) {
        Object.defineProperty(v85, 2143681708, { value: v85 });
        return a87;
    },
};
new Uint16Array(955);
/(?: foo )fx\bLa(?=b)/gds;
/(?:ab)|cde/udimsy;
/ea+bNa\Sc(a)+/udmy;
for (let v96 in [-65535,536870889,4096]) {
    v96--;
    Math.log10(v96) ** 1000000000000.0;
}
