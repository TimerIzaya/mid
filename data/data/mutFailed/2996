class C3 {
    constructor(a5) {
        try {
        const t0 = -274468917;
        t0();
        } catch (e) {}
    }
    toString(a8) {
        try { a8.defineProperties(); } catch (e) {}
        const v14 = ~a8;
        Math.asinh(-2147483648);
        const v16 = 60814 + v14;
        !v14;
        return v16;
    }
}
C3.p21 = -9;
const v18 = new C3(-9);
const v19 = new C3(-41474);
v19.p13 = -9;
const v20 = new C3(-41474);
v20.p20 = C3;
class C21 {
    constructor(a23, a24, a25) {
        a23.p24 = this;
        for (let v26 = 0; v26 < 32; v26++) {
            a23["p" + v26] = v26;
        }
    }
    static g;
    #e;
    6 = v18;
    #a;
    static [v20];
    #c;
}
function f29(a30) {
    let v31 = C3[129];
    v31 >>>= v31;
    class C32 {
    }
    class C33 extends C32 {
    }
    new C33();
    return -274468917;
}
C21[Symbol.toPrimitive] = f29;
const v37 = new C21(v19, v20, v20);
const v38 = new C21(v20, v18, v18);
new C21(C3, v37, v20);
[-34,536870887,268435440,14525];
try {
    new C21(-274468917, v38, true);
} catch(e46) {
}
const v47 = [6,127,-128,13,65537,-13];
v47.valueOf = f29;
const v48 = [-536870912,-4608,-9223372036854775808,15];
try { ("object").substring(v47, v48); } catch (e) {}
try { ("has").matchAll("object"); } catch (e) {}
const v56 = new Int8Array(2);
v56.toString = f29;
const v58 = 8 & 8;
new Int16Array(8);
const v64 = new Uint16Array(3225);
v64[877];
v58 ^ C21;
for (const v71 of v64) {
    v71 ^ v71;
    v71[3] = 5n;
    const v74 = 9007199254740991 * v71;
    v74 | v74;
}
const v78 = new Int32Array(23);
v78[1];
new Uint8Array(v58);
const v83 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C85 {
    static #e;
    m(a87, a88, a89, a90) {
        v83.#e;
        a88.#e = -1;
    }
}
1000000.0 >>> 1000000.0;
const o101 = {
};
function f102(a103, a104, a105) {
}
function f107(a108) {
    function f109() {
        return a108;
    }
}
this.onmessage = f107;
const v110 = [7,128];
const v111 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
v111[4];
const v113 = v111[4];
const v114 = v113 | v113;
v114 / v114;
const v116 = [40213,422333454,47387,65536,-51830];
const t102 = "i";
new t102();
[-1.7976931348623157e+308,-613.7550152041111] ^ -1264607604;
const v123 = new Uint8ClampedArray(104);
v123.toLocaleString();
v116[2] = v116;
0 - 0;
0 - 0;
let v128 = 15135;
v128--;
try { gc(); } catch (e) {}
gc();
const v137 = new BigInt64Array();
try { v137.entries(); } catch (e) {}
try { ("boolean").slice(v64, v56); } catch (e) {}
let v141;
try { v141 = ("boolean").repeat(1000000.0); } catch (e) {}
v141[1322328];
const t119 = "toString";
t119[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
const v147 = -256 >> -256;
v147 ^ v147;
function f149(a150, a151) {
    const v152 = a151++;
    const v153 = a151--;
    v153 | v153;
    a150 | a150;
    const o173 = {
        ...v116,
        __proto__: v20,
        "h": "boolean",
        2: v152,
        65536: "8",
        "c": v128,
        "a": v128,
        "d": a150,
        /*
        __proto__: a151,
        */
        "g": -1628878962,
        "type": "boolean",
        "a": a150,
        "execution": "i",
        ..."0QZg",
        valueOf(a157) {
            const o158 = {
                __proto__: this,
                2261555780: "has",
            };
            super.a;
            return this;
        },
        set b(a161) {
        },
        "g": v128,
        "b": a151,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f166() {
                    return f166;
                }
                const o168 = {
                    [f166]() {
                    },
                };
                [o168];
                v111.copyWithin(8, -268435456, -256);
            } catch(e172) {
            }
            return this;
        },
    };
    o173[1000000] = 8;
    o173.g = o173;
    new Uint32Array(4096);
    try { WeakMap.apply(Int32Array, Date); } catch (e) {}
    return o173;
}
let v181;
try { v181 = f149(v128, v128); } catch (e) {}
v181[1000000];
f149(925.1427495594241, v110);
f149(317008.8127941969, -4);
f149(1000000.0, v111);
268435441n ^ 268435441n;
268435441n - 268435441n;
const v190 = new BigUint64Array();
v190[2445191368] = 268435441n;
