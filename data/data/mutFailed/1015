function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "c", { writable: true, configurable: true, value: F0 });
    const v2 = [-1.7976931348623157e+308,-613.7550152041111];
    function f3() {
        function f4(a5, a6) {
            a6();
            return f4;
        }
        return v2;
    }
    v2[Symbol.toPrimitive] = f3;
    v2 ^ -1264607604;
    this.c = this;
    let v12 = 3;
    v12++;
    const v15 = new Uint16Array(v12);
    v15.indexOf();
    4294967296 === 4294967296;
    try {
        this.a = 4294967296;
    } catch(e19) {
    }
    try {
        this.d = 4294967296;
    } catch(e20) {
    }
    const v21 = [];
    const v22 = [v21,v21,v21,v21,v21];
    try { v21.reduce(v22); } catch (e) {}
    function F24() {
        if (!new.target) { throw 'must be called with new'; }
        const v26 = this?.constructor;
        try { new v26(); } catch (e) {}
    }
    const v28 = new F24();
    class C29 {
        static get b() {
        }
        static 182 = F24;
        static g;
        static #b = v28;
    }
    const v31 = new C29();
    v31.constructor = f3;
    const v32 = v31?.constructor;
    try { new v32(); } catch (e) {}
    try {
        this.c = 4294967296;
    } catch(e34) {
    }
}
const v35 = new F0();
const v36 = new F0();
new F0();
14 - 14;
const v41 = new BigInt64Array(14);
1936 | 1936;
new Int8Array(1936);
const v48 = new Int8Array(3908);
function f49() {
    delete v36[110];
    v41.constructor;
    return v41;
}
v48.toString = f49;
const v52 = v48?.toString;
try { new v52(); } catch (e) {}
function f54(a55, a56, a57) {
    a55 >>> a55;
    a56 << a56;
    a57 >> a57;
    const o64 = {
        170: Int8Array,
        get g() {
            try {
                super.n();
            } catch(e63) {
            }
            return a56;
        },
        "b": v36,
        "a": v35,
        2: a57,
        [a56]: Int8Array,
        "c": a56,
        [1936]: a57,
    };
    return o64;
}
f54(14, 14, 14);
const v66 = f54(14, 3908, 3908);
v66[1936] = v66;
f54(14, 1936, 14)[170];
const o71 = {
    "maxByteLength": 268435439,
};
const v73 = new SharedArrayBuffer(6, o71);
const v75 = new DataView(v73);
const v76 = v75?.setInt8;
try { new v76(v75, 1936); } catch (e) {}
