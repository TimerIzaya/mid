new Map();
function f2(a3, a4, a5, a6) {
    function f8() {
        return f2;
    }
    function f9(a10) {
        return a10;
    }
    Object.defineProperty(arguments, 7, { configurable: true, get: f8, set: f9 });
    arguments[2] = arguments;
    return arguments[7];
}
try { Set.__proto__(); } catch (e) {}
const v14 = new Set();
Set.name;
-3;
const v20 = new Uint16Array(3);
v20.g = v20;
v14[1] = v20;
for (let i26 = (() => {
        function f22() {
            return Map;
        }
        try { f22(); } catch (e) {}
        const o25 = {
            [f22]() {
            },
        };
        o25.h = o25;
        return 0.8037056182165817;
    })();
    i26 != i26, i26++, -10, i26 < 10;
    i26++) {
    i26 >>> i26;
}
const v36 = new Set();
try { v36.values(); } catch (e) {}
try {
} catch(e38) {
    e38.stack;
}
Float32Array.BYTES_PER_ELEMENT;
const v42 = new Float32Array();
const v43 = [v42];
const v44 = new Float32Array(v43);
v44[0];
const v49 = this?.SyntaxError;
let v50;
try { v50 = new v49(11); } catch (e) {}
v50.message;
const o52 = {
    ...this,
};
o52.testRunner = o52;
let v53;
try { v53 = o52.toString(); } catch (e) {}
try { v53.match(v53); } catch (e) {}
function f55() {
}
const v56 = new Uint16Array(11);
let v57;
try { v57 = v56.every(v56); } catch (e) {}
const o58 = {
};
o58.f = v57;
function f59() {
    return f59;
}
const v60 = f55.length;
const v61 = v60 * v60;
const v62 = -v60;
const v63 = typeof f55;
const v64 = v63.italics(v63, v62);
try { v64.match(f59, o58, f2, f59, v64); } catch (e) {}
try { Int8Array.from(f59); } catch (e) {}
const v69 = new v61(1024);
v69[442] = v69;
const v70 = v69?.constructor;
v70.name = v70;
try { new v70(v43, v44, 11); } catch (e) {}
const v74 = new Int16Array(4);
v74[1] = v74;
let v75 = 980;
v75++;
v75++;
const v78 = [1073741824,1073741823,1376142744,1073741825];
try { v78["has"](..."has", f59, ...v43, ...v78); } catch (e) {}
function f81() {
    return f81;
}
try { f81(); } catch (e) {}
function f83(a84, a85, a86) {
    const t92 = a85.constructor;
    t92().toPrecision(f81);
    return Float32Array;
}
new BigInt64Array(v75);
(0.8037056182165817).includes(v75);
