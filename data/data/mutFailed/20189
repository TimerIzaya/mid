function f2() {
    const o10 = {
        [-4294967297n](a4, a5, a6, a7) {
            eval();
        },
    };
    return f2;
}
%OptimizeFunctionOnNextCall(f2);
!false;
class C15 {
    static #e = -1011110915;
    [-1011110915];
    1073741825;
    constructor(a17) {
        super();
        for (let v18 = 0; v18 < 25; v18++) {
            this["p" + "p"] = v18;
        }
    }
    get a() {
        class C22 {
            constructor(a24, a25) {
                function f26(a27, a28, a29, a30) {
                    try { a27(a24); } catch (e) {}
                    a29 >> a29;
                    return a24;
                }
                for (let v33 = 0; v33 < 500; v33++) {
                    f26(a25, f26, v33, a25);
                }
            }
        }
        new C22();
        this[8] = this;
        for (let v36 = 0; v36 < 32; v36++) {
            function f38(a39, a40) {
                const o42 = {
                    get h() {
                        return a40;
                    },
                    [a40]: 4,
                    2778757984: a39,
                    "h": 4,
                };
                return 4;
            }
            this["p" + v36] = v36;
            try {
            } catch(e45) {
            }
            const o48 = {
                o(a47) {
                    return a47;
                },
            };
        }
        return -22261;
    }
    [-1011110915] = -1011110915;
}
try { new C15(); } catch (e) {}
new C15();
new C15();
const v52 = new C15();
const v54 = new WeakMap();
let v55;
try { v55 = v54.delete(C15); } catch (e) {}
!v55;
function f57(a58, a59) {
    a59.d = a59;
    let v60;
    try { v60 = a58.bind(WeakMap); } catch (e) {}
    try { v60(v60); } catch (e) {}
    a59.constructor(a59);
    return f57;
}
try { Promise.all(v54); } catch (e) {}
try { Promise.all(-22261); } catch (e) {}
const v66 = new Promise(f57);
try { v66.then(v52, Promise); } catch (e) {}
for (let v68 = 0; v68 < 5; v68++) {
    const o70 = {
    };
    o70.c = o70;
    gc(o70);
}
