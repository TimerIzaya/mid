const v1 = new Map();
function f2(a3, a4) {
    const o17 = {
        toString(a6, a7) {
            const v8 = new Map(a3, a4, a3, a6);
            const v10 = [];
            return Reflect.apply(v8.values, v8, v10);
        },
        [a3]: a4,
        __proto__: a4,
        valueOf(a14) {
            const v15 = this ** Map;
            try {
                v1.size = v15;
            } catch(e16) {
            }
            return Map;
        },
    };
    return o17;
}
const v18 = f2(v1, v1);
const v19 = f2(v18, v1);
const v20 = f2(v19, v18);
function f21() {
    return v19;
}
const v22 = [Map,f2,v1];
const v23 = [v19];
const v24 = [v20,v20];
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a29;
    } catch(e30) {
    }
    try {
        this.g = Map;
        Math.log1p(268435456);
    } catch(e34) {
    }
    try {
        this.h = a28;
    } catch(e35) {
    }
}
new F25(f21, v24, v24);
new F25(Map, v22, v22);
new F25(v22, v23, v23);
[-1.7976931348623157e+308,-3.0,-3.0,363.8138396999086,Infinity,612.3486694343287,1.7976931348623157e+308,1000000000.0];
[NaN,-139.41140470336723,9.77499234576472,420.6073825280855,1000000000000.0,776.2819047660907,0.07357195689559204,3.779577825846644,-1.0];
[5.0,215.46537503132595,5.0,-2.220446049250313e-16,Infinity,NaN,1e-15];
const v43 = new Uint8ClampedArray();
for (const v46 in [[v43,v43],v43]) {
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        try {
            a3[a3] = a3;
        } catch(e4) {
        }
        return a3;
    }
    this.constructor = f2;
    try {
        this.b = 9007199254740990;
    } catch(e6) {
    }
}
const v7 = new F0();
const v10 = new Int32Array("sinh");
for (let v11 = 0; v11 < 5; v11++) {
    v10.length <<= v11;
}
const v12 = new F0();
try { v12.hasOwnProperty(v12); } catch (e) {}
const v14 = new F0();
function f15(a16) {
    const v20 = [[-409.5445341345936]];
    const v21 = [2.220446049250313e-16,-409.5445341345936];
    function f22(a23, a24, a25) {
        a24--;
        const o31 = {
            "h": a25,
            "a": a24,
            [a25](a28, a29, a30) {
            },
            [a25]: -409.5445341345936,
            "b": a25,
            1942: v21,
            "g": v21,
            ...v20,
        };
        o31[1942] = o31;
        return -409.5445341345936;
    }
    return v20.findIndex(f22);
}
v14.toString = f15;
function f33() {
    const o35 = {
        __proto__: f33,
        [f33]: -410.8373818683839,
        "c": f33,
    };
    return o35;
}
const v38 = f33().c;
v38[Symbol.iterator] = f15;
new Uint16Array(v38);
const v45 = [2.220446049250313e-16,4.276454155698374];
const v46 = [v45,v45,2.220446049250313e-16,v45];
const v47 = [2.220446049250313e-16,-409.5445341345936];
function f48(a49, a50, a51) {
    a51--;
    const o57 = {
        "h": a51,
        "a": a50,
        [a51](a54, a55, a56) {
        },
        "b": a51,
        1942: v47,
        "g": v47,
        ...v46,
    };
    return o57;
}
const v58 = f48(v46, -409.5445341345936, -409.5445341345936);
v58.f = v38;
v58.b;
const o61 = {
    __proto__: v58,
    126: undefined,
    ...v58,
};
o61.f = o61;
class C62 extends F0 {
    [v12];
    g;
    static {
        this.d = this;
        try {
            F0 &= F0;
        } catch(e64) {
        }
    }
    f = v7;
    static get a() {
        [this,this];
        [this,v7];
        [v12];
        [-2.775006358294279,415107.076926725,0.3008616043322886,-4.0,486156.59821420535,0.19903748333915627,-2.2250738585072014e-308,200256.17927956698];
        [1.7976931348623157e+308,1.6134429050007646e+308,-1000000.0,-277.35385020194485,0.7036758121172078,-2.220446049250313e-16,327279.8401523591,2.220446049250313e-16,1.0203912425277007e+308,541947.0305862708];
        [559.044559780747,-1000000000000.0,-1.060814059720605e+308,4.36727978354992,3.42110072516243e+307,2.0];
        return v7;
    }
}
const v72 = new C62();
try { v72.constructor(); } catch (e) {}
new C62();
new C62();
new Set();
F0++;
function F79(a81, a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    a81.arguments;
}
F79.length = F79;
const v87 = new Int16Array();
v87.__proto__;
("length")[2];
class C93 {
    toString(a95, a96, a97) {
        C93();
        super.b = -2;
    }
}
const v100 = [758472092,9007199254740992,9007199254740992];
try { v100.reverse(); } catch (e) {}
([7992,4294967295,2147483649,2,9,-6,-65536,536870912])[2];
const v104 = [-65537,59335,-9223372036854775807];
v104.g = 2.220446049250313e-16;
v104.g = v104;
0.8270476620027499 / 0.8270476620027499;
const v108 = 1646732670 * 1646732670;
v108 !== v108;
let v110 = -256n;
v110--;
const t133 = (-13545).constructor;
const v114 = new t133();
const v115 = v114?.__lookupGetter__;
try { new v115(v114); } catch (e) {}
v114.toLocaleString();
const v119 = [-10458,-2,2147483648];
v119[512] = v119;
v119[512] = 512;
const v121 = ("65535").match();
try { v121.with(v14, v14); } catch (e) {}
