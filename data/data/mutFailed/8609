const v1 = new Set();
const v4 = new Int32Array(3208);
let v6 = 512 / 512;
v6--;
try { new BigInt64Array(512, Int32Array, v4); } catch (e) {}
const v10 = new BigInt64Array(512);
v10[433];
const v13 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
new Date(-2, v13, v13, v13, -2);
const o21 = {
    get a() {
        const o19 = {
        };
        gc();
    },
};
const v23 = new Uint8ClampedArray(16);
const v24 = v23?.constructor;
try { (3208).of(); } catch (e) {}
try { new v24(512, Int32Array, BigInt64Array); } catch (e) {}
const v27 = [274956.59505171515];
v27[0] = v27;
[4.0,-0.0,1.0,NaN,NaN,-49514.68207472295];
[5.5642004500232325,1000000.0,559.4905929766151,7.264995332332824e+307,-1000000.0,-5.0];
const v32 = new Uint8Array(5);
let v33;
try { v33 = v32.slice(3208, 16); } catch (e) {}
const v34 = v33?.findLast;
try { new v34(v24); } catch (e) {}
81 - 81;
-Date;
const v40 = new Uint16Array(81);
([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(v4, -27205);
function f45(a46, a47) {
    const o49 = {
        ...a46,
        get d() {
            return a46;
        },
    };
    return f45;
}
v1();
const v51 = v40?.constructor;
try { new v51(Uint8Array, Set, v40); } catch (e) {}
~2;
BigInt64Array.b = Int16Array;
new Int16Array(2);
-2927 % -2927;
try { new Uint16Array(Set, Set, 512); } catch (e) {}
const v62 = new Uint16Array(10);
v62[7];
v62.indexOf(Uint16Array);
function f65() {
    return f65;
}
const o68 = {
    "f": "k",
    get f() {
        return this;
    },
};
