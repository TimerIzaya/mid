function f0() {
    const o8 = {
        [-149347071](a5) {
            a5.g /= a5;
            let v6;
            try { v6 = new a5(this, -149347071, 129); } catch (e) {}
            let v7;
            try { v7 = a5.o(-149347071, a5, v6); } catch (e) {}
            return v7;
        },
        "b": -149347071,
        __proto__: "symbol",
        "c": 129,
        ..."symbol",
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
f0();
function f15() {
    return v9;
}
f0 = f15;
++f0;
new Int32Array(541);
new Int32Array(28);
const v28 = new BigUint64Array(10);
function f29() {
}
const v31 = ([9007199254740990,-16,376821973,268435456])[1];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f29;
    try { f0.constructor(); } catch (e) {}
    this.b = 4294967296;
    try {
        function F36() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v38 = new F36();
        const v39 = new F36();
        const v40 = v39.__defineSetter__;
        try { v40(); } catch (e) {}
        function f42(a43, a44) {
            const o45 = {
                "e": v38,
            };
            return o45;
        }
        const v46 = f42();
        f42();
        function f48() {
            return f42;
        }
        f48.b = v31;
        f48.b = f48;
        const v51 = new Float32Array();
        Object.defineProperty(v28, 0, { writable: true, value: 4096 });
        const o57 = {
            "maxByteLength": 59,
        };
        new SharedArrayBuffer(f48, o57);
        new Uint16Array(F32);
        for (const v62 of v51) {
            v62 >>> v62;
            try {
                v10.fuck(-3n, 127);
            } catch(e66) {
            }
            Object.defineProperty(v46, Float32Array, { configurable: true, enumerable: true, get: f42, set: f48 });
        }
        this.g = 4294967296;
    } catch(e67) {
    }
    this.f = 4294967296;
}
const v68 = new F32();
new v68();
new F32();
