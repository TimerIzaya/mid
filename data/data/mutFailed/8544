const v4 = this.DataView;
try { new v4(); } catch (e) {}
function f6(a7, a8, a9, a10) {
    const o14 = {
        get f() {
            new a8();
            return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
        },
        ...a8,
    };
    return o14;
}
const v20 = new BigUint64Array(6);
new Int8Array(1024);
new BigInt64Array(10);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o33 = {
    };
} catch(e34) {
}
class C35 {
    static p(a37) {
        function f38(a39, a40, a41) {
            const o50 = {
                [v20](a43, a44, a45) {
                    class C47 {
                        #d = 4096;
                        static {
                            this.#d;
                        }
                    }
                },
                "h": a41,
            };
            return o50;
        }
        const o57 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f52() {
                        return this;
                    }
                    const v53 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e56) {
                }
                return -128;
            },
        };
        return o57;
    }
    g;
}
try { new C35(); } catch (e) {}
const v59 = new C35();
class C61 extends Map {
}
new C61();
new Float32Array();
v59.g;
new C35();
new C35();
class C68 extends C35 {
    static n(a70, a71) {
        try {
            v20.#m();
        } catch(e74) {
        }
        function f76() {
            const o79 = {
                [null]() {
                    super.b;
                },
                "f": null,
            };
            return o79;
        }
        f76();
        function F81(a83, a84, a85, a86) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C93 {
        }
        this[Symbol.matchAll] = a71;
        a70 += C61;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e98) {
        }
        const v101 = new Int8Array(Int8Array);
        const v102 = new Int8Array();
        try {
            v102.find(v101);
        } catch(e104) {
        }
        return -128;
    }
    #c = C68;
    valueOf(a107, a108, a109) {
        super.f;
    }
    constructor(a112, a113, a114, a115) {
        super();
        function f116() {
            const t113 = [];
            t113[6] = 4294967295;
            new Int32Array();
            const o131 = {
                get b() {
                    return Int32Array;
                },
                "c": f116,
                toString(a124, a125, a126) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a128) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a130) {
                },
            };
        }
        for (let v132 = 0; v132 < 5; v132++) {
            f116();
        }
    }
    set f(a135) {
        for (const v136 of a135) {
            try {
            } catch(e137) {
            }
        }
        class C139 extends SharedArrayBuffer {
        }
        const o140 = {
        };
        try {
        } catch(e141) {
        }
        try {
            const o142 = {
            };
        } catch(e143) {
        }
        try {
            const o144 = {
            };
            o144.c = -128;
            o144.e = this;
        } catch(e145) {
        }
        try {
            const o146 = {
            };
        } catch(e147) {
        }
    }
}
const v148 = new C68();
gc(v148);
class C151 {
}
%VerifyType([0.8307152163010869,1.0,0.0] instanceof -24894);
for (let v155 = 0; v155 < 25; v155++) {
}
function f156(a157, a158, a159, a160) {
    const o165 = {
        p(a162, a163, a164) {
        },
    };
}
let v166 = 10;
for ((() => {
        for (let v167 = 0; v167 < 5; v167++) {
        }
    })();
    v166--;
    ) {
}
for (let v169 = 0; v169 < 25; v169++) {
}
const v171 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f172(a173, a174) {
    const o176 = {
        get d() {
        },
    };
}
f172();
const v178 = f172(v171);
try { v178(956206316, 956206316); } catch (e) {}
const v181 = new Uint8Array(Uint8Array);
function f182(a183, a184, a185, a186) {
    a185++;
    const v188 = a185++;
    v188 - v188;
    const v190 = v188 * v188;
    v190 ** v190;
    a185 % a185;
    const o193 = {
        ...v181,
    };
    o193[2] = o193;
    const v194 = o193[2];
    v194 >>> v194;
}
