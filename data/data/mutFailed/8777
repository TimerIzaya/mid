function f0() {
    const o10 = {
        ["yu9W"]: "yu9W",
        "f": -311.7888371966626,
        set g(a5) {
            let v6;
            try { v6 = new a5(this, -311.7888371966626); } catch (e) {}
            let v7;
            try { v7 = new a5(v6, -311.7888371966626, "yu9W", a5); } catch (e) {}
            try {
                super.p(-9007199254740990, v7, v6);
            } catch(e9) {
            }
        },
        "e": "yu9W",
        "b": -311.7888371966626,
        "a": "yu9W",
        "d": "yu9W",
    };
    return o10;
}
const v11 = f0(f0, f0);
Object.defineProperty(v11, Symbol.toPrimitive, { enumerable: true, value: f0 });
const v14 = f0();
const v15 = f0();
function f16(a17, a18) {
    try { a17.isPrototypeOf(v14); } catch (e) {}
    const o38 = {
        [a18](a21, a22, a23, a24) {
            this && v11;
            [5537,1886948263,19547,1073741824,-4,2067,54977];
            [8];
            [1000,3,536870888];
            return a17;
        },
        "b": v11,
        "g": v15,
        valueOf(a30, a31, a32, a33) {
            f0();
            %PrepareFunctionForOptimization(f0);
            f0();
            f0();
            %OptimizeMaglevOnNextCall(f0);
            f0();
            return a32;
        },
    };
    return o38;
}
const v39 = f16.name;
const v41 = f16(f16(v14, f0), v11);
v41.b;
const v43 = f16(v14, v11, v15, v41, f16);
let v44 = 127;
v44--;
new Uint8ClampedArray(v44);
139 >>> 139;
new Uint8Array(139);
Float32Array.d = Float32Array;
new Float32Array(6);
function f56(a57, a58, a59, a60) {
    a58.toString = f56;
    try { a58.toString(); } catch (e) {}
    -a60;
    Object.defineProperty(arguments, "valueOf", { configurable: true, value: Symbol });
    return arguments;
}
const v64 = f56(118, f56, 118, 118);
v64[2] = v64;
const v65 = f56(v64, f56, v64, 118);
function f66() {
    const t71 = 6;
    t71[2] = v39;
    v39 || v43;
    return v14;
}
v65.constructor = f66;
const t77 = v65.constructor;
const v69 = t77(118);
v69.toString = f66;
let v70;
try { v70 = v69.toString(Float32Array); } catch (e) {}
const v71 = v69.toExponential(v64, 6, v70, v70);
try { v71.valueOf(); } catch (e) {}
