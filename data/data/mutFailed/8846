try {
} catch(e1) {
}
class C3 {
    set e(a5) {
        const v7 = Symbol.iterator;
        const o13 = {
            [v7]() {
                let v9 = 10;
                const o12 = {
                    next() {
                        v9--;
                        return -886003937;
                    },
                };
            },
        };
    }
}
const v14 = C3();
const v15 = C3();
function f16(a17, a18) {
    const o25 = {
        valueOf(a20, a21) {
        },
        "e": v15,
        o(a23, a24) {
            return -81123.56026403967;
        },
    };
    return v14;
}
class C27 {
}
let v28 = 2684;
v28--;
const v30 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v31 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
class C32 {
    constructor(a34) {
        function f35(a36, a37) {
            return a36;
        }
        f35(v31);
        f35(v30);
    }
}
const v40 = new C32(C32);
let v41;
try { v41 = v40.__defineGetter__(); } catch (e) {}
const o42 = {
    "d": v41,
};
function F44(a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -5.389472373664166;
    } catch(e47) {
    }
    try {
        this.a = -1e-15;
    } catch(e48) {
    }
    try {
        this.b = -81123.56026403967;
    } catch(e49) {
        let v50 = 0;
        while (v50 < 7) {
            const o53 = {
            };
            try {
                o53.e = -81123.56026403967;
            } catch(e54) {
            }
            try {
                const o55 = {
                };
                o55.e = -81123.56026403967;
                o55.c = v50;
            } catch(e56) {
            }
            try {
                const o57 = {
                };
                const v59 = new Float64Array(Float64Array, Float64Array, Float64Array);
                function f60() {
                    v59.length = 0;
                    return 0;
                }
                f60();
                %OptimizeFunctionOnNextCall(f60);
                o57.e = -81123.56026403967;
                o57.c = v50;
                o57.h = -1e-15;
            } catch(e63) {
            }
            const t96 = [6,-1340283293,-11812,-1073741824,-1073741824];
            t96.length = -2147483648;
            [-25855];
            try {
                const o68 = {
                };
                o68.e = -81123.56026403967;
                o68.c = v50;
                o68.d = -81123.56026403967;
            } catch(e69) {
            }
            v50++;
        }
    }
}
const v71 = new F44(-5.389472373664166);
v71[1];
new Float64Array(453);
C32.__defineGetter__;
const v82 = new Float64Array(65536, 65536, 65536);
v82.copyWithin(65536, 4294967297);
%VerifyType(-9007199254740990n);
const v85 = new F44(-1e-15);
const v86 = new F44(-81123.56026403967);
function f87(a88, a89, a90, a91) {
    const o112 = {
        [a89]: v86,
        "f": a91,
        [v85](a93, a94) {
            try {
            const t0 = 1073741825n;
            t0();
            } catch (e) {}
            const v99 = new Uint8ClampedArray(129);
            const v102 = new Int32Array(1450);
            class C103 {
                [Uint8ClampedArray] = v102;
                static valueOf(a105, a106, a107) {
                    new a107();
                }
                static a = v99;
            }
            [1000.0,397373.07023895974,1000000000.0];
            [0.1858740296633261,3.2598553577310856,0.9201963322332642,112483.10861715325,1000000000.0];
            [-Infinity,-1000000000000.0,0.4440454897051409,5.625570235409249];
            return F44;
        },
        __proto__: v71,
        "c": -5.389472373664166,
        "a": a91,
        0: v85,
        181: a89,
        "d": a91,
        "b": -5.389472373664166,
        "a": a91,
    };
    return o112;
}
const v113 = f87(-1e-15, -5.389472373664166, v86, -1e-15);
f87(-81123.56026403967, -1e-15, -5.389472373664166, -1e-15);
f87(-5.389472373664166, -5.389472373664166, v113, -5.389472373664166);
const v117 = new Map();
v117.clear();
