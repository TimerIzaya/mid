function f3() {
    return -1024;
}
512 > 512;
let v11 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
const o12 = {
    __proto__: v11,
};
class C14 {
    [-1024] = 2147483648;
    static c = 268435440n;
    static #toString(a16, a17) {
        v11 = -128n;
        for (let v18 = 0; v18 < 100; v18++) {
            f3();
        }
        return -1024;
    }
    n(a21, a22, a23, a24) {
        const v25 = -63587 + a24;
        [2147483648,v25,v25,12,-128n];
        [v25,12];
        [this,a22,268435440n,12,a23];
        return v25;
    }
}
new C14();
new C14();
new C14();
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    function f37() {
        let v38;
        try { v38 = this.toString(F32, this, v11, f3); } catch (e) {}
        this[Symbol.asyncIterator] = v38;
        return a34;
    }
    a35.valueOf = f37;
    const v42 = new Int8Array();
    const v43 = v42.buffer;
    v43.constructor = f3;
    v43.slice(a35, a35).transferToFixedLength();
}
F32[Symbol.toPrimitive] = f3;
new F32(F32, F32, F32);
const v49 = [1e-15,-1.696798697226352e+308,1000000000000.0,-432.5691190692478];
function f50() {
    const v53 = Array(4087);
    v53[2671] = o12;
    for (const v54 of v53) {
    }
    return 4087;
}
f50();
[-1000000000.0,0.007564657698543642];
[-1000000000000.0,-974369.4481080713,-487337.25578581466,-479.12403330333757,1.7976931348623157e+308,0.3293969077783455,-5.0,1000000000000.0,783.9936120328941];
ReferenceError(-1073741824, 256n);
class C64 extends WeakMap {
}
[10,-1012881949];
const v67 = [11,-146405100,536870912,-65535,-9,-1042500765,9];
const v70 = new BigInt64Array(11);
v70.lastIndexOf();
function f74() {
}
class C75 extends f74 {
    static [-145.3420418564839] = -4294967296n;
    h;
    static #d;
}
[-1,1108545007,-2,-536870912,24425,1397095361,-153132480];
new Uint32Array(54);
const v85 = new Uint16Array(129);
new Uint8ClampedArray(2);
v85[Uint8ClampedArray] %= 2;
try {
    new Uint16Array(v49, 54);
} catch(e90) {
    v67.length = e90;
    function f92() {
    }
    function F93(a95, a96, a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
        this.a = a96;
    }
    const v99 = new F93();
    for (const v100 in v99) {
    }
}
let v101 = 0;
do {
    v101++;
} while ((() => {
        function f106(a107, a108, a109) {
            return a108;
        }
        function f111(a112) {
            const t4 = [2147483647,9,268435441,-39151,7,16,-2019446363,0,4294967295,42568];
            t4.length = 1342;
            return v67;
        }
        Float64Array[Symbol.iterator] = f111;
        const v117 = new Float64Array(Float64Array);
        return v101 < v117;
    })())
