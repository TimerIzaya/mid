const v3 = [2,237513775,64,700106456,-2127435896,-8,7,1003504260,6];
const v4 = [-544968798,64,-2072538256];
const v5 = [10000,4294967297,1659502263,819984107];
class C6 {
    b;
    c = v5;
    constructor(a8, a9, a10, a11) {
        v5.length;
    }
    a = -13n;
    1073741823;
    3361349989 = 3764n;
    d = 65536n;
    3;
    2147483649 = v4;
}
const v13 = new C6(v3, v5, 65536n, 3764n);
const v14 = new C6(v13, -13n, 65536n, 3764n);
let v16 = 1073741823;
Math.ceil(65536n);
3764n / ++v16;
new C6(v4, v14, 3764n, 3764n);
/Mq(?:a+){0,0}/gudimy;
/a[a]/gums;
/J[a*b\xed\xa0\x80a(?=bbb|bb)cra\D?]/uy;
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v26 = new Uint32Array();
let v27 = -4294967297n;
const v28 = v27--;
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    const v36 = a32.constructor;
    let v37;
    try { v37 = v36(); } catch (e) {}
    const v38 = v37?.constructor;
    let v39;
    try { v39 = v38(f31, a32, v24, Uint32Array, v36); } catch (e) {}
    function f40() {
        const v42 = ("Vre").charAt(v39);
        v42.blink();
        let v44;
        try { v44 = ("Vre").codePointAt(v24); } catch (e) {}
        v44 % v44;
        let v46 = Float64Array;
        v46 = a33;
        b = v24;
        let v47 = v24.length;
        v47++;
        try {
            v30.forEach(a33);
        } catch(e50) {
            e50.message = e50;
        }
        const o67 = {
            "c": v27,
            valueOf(a52, a53) {
                return v37;
            },
            1073741824: v26,
            [v27](a55, a56, a57, a58) {
                eval(v42);
            },
            [v30](a62, a63) {
                const v64 = [0.0];
                [-5.0];
                [-4.0,0.0];
                return v64;
            },
        };
        return v30;
    }
    const v68 = f40();
    const v70 = Array(v38);
    try { v70.findLast(); } catch (e) {}
    const v73 = Int8Array.of();
    let v74;
    try { v74 = v73.every(v73, a32, v73, a33, Array); } catch (e) {}
    for (let i77 = 0, i78 = 10; i77 < i78; i77++, i78--) {
        v68[0] = i78;
        Object.defineProperty(v70, v4, { writable: true, configurable: true, get: f31, set: f40 });
    }
    const v86 = new Int8Array(v74);
    const v88 = v86.buffer.slice();
    const v89 = v88.constructor;
    try { v89(v88, v74, v28, v73, a32); } catch (e) {}
    const v92 = new Int32Array(v89, v36, v36);
    v92.lastIndexOf(a32, a34);
    try { v30["find"](..."find", a35, ...v29, ...v30); } catch (e) {}
    return v27;
}
for (let v96 = 0; v96 < 10; v96++) {
    f31(v26);
}
%OptimizeFunctionOnNextCall(f31);
f31(Uint32Array);
