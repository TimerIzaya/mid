const v2 = new Int8Array(3178);
const v7 = v2[Symbol.iterator];
const o8 = {
};
try {
    o8.a = v7;
} catch(e9) {
}
try {
    const o10 = {
    };
    o10.a = v7;
    o10.c = v7;
} catch(e11) {
}
try {
    const o12 = {
    };
    o12.a = v7;
    o12.c = v7;
    o12.e = v7;
} catch(e13) {
}
try {
    const o14 = {
    };
    o14.a = v7;
    o14.c = v7;
    o14.e = v7;
} catch(e15) {
}
new Float64Array(1000);
new Int8Array(255);
const v26 = [-946345318n];
function f27(a28) {
    const o29 = {
    };
    return 8n;
}
v26.valueOf = f27;
function f30() {
    const v31 = [f30];
    class C33 extends v31.constructor {
    }
    const v34 = new C33();
    v31 ** 8n;
    const v36 = /(a+b|c)/gdsy;
    /l8W(\1a)/guimsy;
    /5wk/udim;
    try {
        new Int8Array(v36);
    } catch(e40) {
    }
    return v34.constructor;
}
%OptimizeFunctionOnNextCall(f30());
f30();
v26.fill(9223372036854775807);
v26 > 8n;
