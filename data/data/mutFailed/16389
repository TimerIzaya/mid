function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e6) {
        for (let [v7,v8] of a4) {
        }
    }
    -256n >> -256n;
    ~this;
    try {
        new F2();
    } catch(e13) {
    }
}
const v15 = new Float32Array(129);
new Int16Array(2162);
const v21 = [1073741824,1073741823,1376142744,1073741825];
function f22() {
    v21.forEach(3047);
}
const v25 = new Date();
v25.getUTCDay();
const v27 = new Int8Array(3047);
class C28 {
    static #valueOf(a30, a31, a32) {
    }
    set e(a34) {
    }
}
const v35 = [Int16Array,v15];
[false,129,v27,[129,Int16Array,v35,v35],2162];
const v41 = new Int16Array(2);
const v42 = [1,-1643840771,4,1111495904,-9007199254740992,-268435456,255,-403790861,268435439];
async function f43(a44, a45, a46) {
    a44 | a44;
    a46 % a46;
    const v49 = ~a45;
    for (let v50 = 0; v50 < 5; v50++) {
        ([-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036]).toLocaleString(a44);
        for (let v53 = 0; v53 < 50; v53++) {
        }
    }
    function F54() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v56 = 0; v56 < 1000; v56++) {
            const v58 = "p" + v56;
            v58 == v58;
        }
    }
    new F54();
    return v49;
}
f43(f43, v42);
v41.lastIndexOf(2.220446049250313e-16);
class C64 extends v15 {
}
class C67 {
    static ["536870887"];
    constructor(a69, a70) {
        let v71;
        try { v71 = new a69(); } catch (e) {}
        this / v71;
        -Infinity;
    }
}
const v74 = new C67(NaN, NaN);
const v75 = [NaN,v74];
function F76(a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
}
new F76(v75);
