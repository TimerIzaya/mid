const v2 = new BigUint64Array(223);
const v5 = new BigUint64Array(1);
const v8 = new Int32Array(127);
function f9() {
    return v8;
}
class C10 extends BigUint64Array {
    a = BigUint64Array;
    m(a12, a13) {
        v2[255];
        f9();
        let v17;
        try { v17 = v5.copyWithin(223, 223, 127); } catch (e) {}
        try {
            arguments.d = v17;
        } catch(e18) {
        }
        return BigUint64Array;
    }
    3095068682;
}
new C10();
new C10();
new C10();
function f23(a24, a25, a26, a27) {
    return arguments;
}
const v29 = f23(f23, f23, Date, f23);
v29.constructor.setPrototypeOf(Date, v29);
class C32 {
}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
}
const v35 = new F33();
const v36 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v38 = 9007199254740991n * 9007199254740991n;
for (let v39 = 0; v39 < 5; v39++) {
    function f40() {
        for (let v41 = 0; v41 < 5; v41++) {
            try { ("p").substring(C32, C32); } catch (e) {}
        }
        try {
            v36.forEach();
        } catch(e45) {
            e45.a = v35;
            e45.a = e45;
        }
        const t48 = ("1073741824").constructor;
        t48(v38);
        return "1073741824";
    }
    f40();
    %OptimizeFunctionOnNextCall(f40);
}
