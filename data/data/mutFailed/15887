class C3 {
    constructor(a5, a6) {
        a6 & a6;
        const v8 = a5?.[this];
        try { a6(a6, v8, -128); } catch (e) {}
        const v13 = Array();
        const v15 = v13.null(null);
        v13.null(v15, v15, v13, v13, v13);
        2n <= 2n;
    }
    c = -128;
    static #n(a20) {
        const o21 = {
        };
        try {
            o21.c = this;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.c = this;
            o23.h = -128;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.c = this;
            o25.h = -128;
            o25.d = this;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            ["-536870912","replace",[/D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy]];
            o27.c = this;
            o27.h = -128;
            o27.a = this;
            function f33() {
            }
            class C34 extends f33 {
                constructor(a36, a37, a38) {
                    super();
                    for (let v39 = 0; v39 < 100; v39++) {
                        f33();
                    }
                }
            }
            const v41 = new C34();
            v41?.constructor.arguments;
        } catch(e44) {
        }
        return a20;
    }
}
const v45 = C3?.constructor;
try { new v45(C3); } catch (e) {}
const v47 = new C3(C3, -4.0);
const v48 = new C3(v47, -4.0);
const v49 = v48?.constructor;
try { new v49(C3, v48); } catch (e) {}
const v51 = new C3(v48, v48);
const v52 = v51?.constructor;
try { new v52(v47, v51); } catch (e) {}
function f57(a58, a59) {
    const o61 = {
        ...a58,
        get d() {
            return this;
        },
    };
    return f57;
}
f57();
1000 <= 1000;
-1024 * -1024;
const o69 = {
};
const v71 = new Float32Array();
for (let v72 = 0; v72 < 5; v72++) {
    v71[836499325] = ~v72;
}
const v74 = new Uint8ClampedArray(9);
v74.g = v74;
new Int16Array(10);
new Uint16Array(106);
/[UMa\fb\nc\rd\te\vf]/udms;
try { ("compile").blink(); } catch (e) {}
