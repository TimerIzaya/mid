let v1 = "object";
class C3 {
    static set f(a5) {
        v1[2];
    }
    #h;
    1 = 1000.0;
    o(a9, a10) {
        v1 %= a9;
        super.g;
        %VerifyType(a10);
        2.4055206643129257 ** -1.5876750346470025e+308;
    }
    static #a = Infinity;
    f;
    static toString(a36, a37) {
        const v39 = super[a37];
        try {
            const v40 = delete this[v39];
            v40 && v40;
            this[1000.0];
        } catch(e43) {
        }
    }
    static [v1];
    static c;
}
new C3();
new C3();
new C3();
new Int8Array(242);
const v52 = [601759695];
const v53 = [1073741824,1073741823,1376142744,1073741825];
try { v53["has"](..."has", v1, ...v52, ...v53); } catch (e) {}
const o59 = {
    "execution": "async",
    "type": "minor",
};
gc(o59);
new BigInt64Array(5);
new Int8Array(127);
let v68 = new Int32Array(Int32Array);
const v70 = new Uint8Array(v68, v68, Int32Array);
function f71(a72, a73, a74, a75) {
    v68++;
    const o80 = {
        "b": a72,
        ...v70,
        n(a78, a79) {
            return v68;
        },
    };
    return a74;
}
for (let v81 = 0; v81 < 625; v81++) {
    f71();
}
new Uint32Array(14);
class C84 {
}
new C84();
for (let v86 = 0; v86 < 10; v86++) {
    const v87 = [601759695];
    const v88 = [1073741824,1073741823,1376142744,1073741825];
    try { v88["find"](..."find", undefined, ...v87, ...undefined); } catch (e) {}
}
v68.reverse();
const v95 = new Uint32Array(5);
let v96 = v95.byteOffset;
new Set(v95);
function F99(a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v96 >>= 5;
    } catch(e103) {
        for (let [v104,v105] of a101) {
        }
    }
    try {
        new F99(5, this[this]);
    } catch(e108) {
    }
}
const v110 = ([8,-46529,2147483648,1073741824]).includes;
try { v110(); } catch (e) {}
function F112(a114, a115, a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
}
new Int32Array(257);
