[10,829820207,16,-4294967296,-9007199254740992,-65535,-2147483648,1024];
[11292,-4294967295,390527019,12197];
[536870889,2147483647,-9007199254740992,-1,65535,65537,-818001342,-36114];
new Float32Array(256);
function f9() {
    Math.cos(Math);
    return Math;
}
f9();
%OptimizeFunctionOnNextCall(f9);
new BigUint64Array(16);
new Int16Array(7);
const v16 = [];
const v17 = /((((.).).).)?/gvdimy;
const v18 = /C/gudm;
const v19 = /w/gmy;
v19.b = v19;
%PrepareFunctionForOptimization(f9);
const v25 = new Float32Array(7);
const v28 = new Int32Array();
const v29 = new f9(256, v28, 4294967295);
const t21 = v29.g;
new t21(Uint16Array, v25, 7);
let v33;
try { v33 = Uint32Array(Uint32Array, 1391, v17); } catch (e) {}
new Uint32Array(1391);
for (let i37 = 0; i37 < 6; i37++) {
    try {
        class C43 {
            #d;
        }
        const v44 = new C43();
        const o45 = {
            __proto__: v44,
            ...v44,
        };
        v18.dotAll = v33;
    } catch(e46) {
    }
}
const v47 = ~3398;
for (let v48 = 0; v48 < 30; v48++) {
    var a = v48;
}
new gc();
Uint32Array.name = v19;
const v52 = new Uint32Array(3398);
const v56 = new Int16Array(1000);
class C59 extends Float64Array {
    constructor(a61, a62, a63, a64) {
        super(v56);
    }
    [65] = Float64Array;
}
new C59();
let v66 = 255 * 255;
v66 += v47;
const v68 = v16[1];
try {
    v52.forEach(v68, v68);
} catch(e71) {
}
function F74(a76, a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    a76.unshift(a77);
}
63735 >>> 63735;
function f82(a83, a84, a85) {
    return a84;
}
"p" + 6;
function F96() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v99 = -(-7);
        v99 ** v99;
    } catch(e101) {
    }
}
function F102(a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    const v106 = this.constructor;
    try { new v106(this, a104); } catch (e) {}
    new F96();
}
