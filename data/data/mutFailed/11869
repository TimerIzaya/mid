let v0 = 1000000000.0;
class C3 {
    static get c() {
        super[this] = this;
        v0 <<= C3;
        -1000000000.0 > this;
        ("9007199254740992")["concat"]();
        const o8 = {
        };
        try {
            o8.g = C3;
        } catch(e9) {
        }
        try {
            const o10 = {
            };
            o10.g = C3;
            o10.e = "concat";
        } catch(e11) {
        }
        try {
            const o12 = {
            };
            o12.g = C3;
            o12.e = C3;
            o12.b = C3;
        } catch(e13) {
        }
        try {
            const o14 = {
            };
            o14.g = C3;
            o14.e = "concat";
            o14.a = "9007199254740992";
        } catch(e15) {
        }
        const t36 = "9007199254740992";
        t36.length %= v0;
        new Array(2028);
        return "9007199254740992";
    }
    valueOf(a20) {
        try {
            a20.__proto__ = this;
        } catch(e21) {
        }
        return C3;
    }
    n(a23, a24) {
        for (const v25 of "9007199254740992") {
            a23 == v25 ? v25 : v25;
        }
        a24.__proto__;
        return v0;
    }
}
const v29 = new C3();
new C3();
new C3();
let v34 = 57195;
v34 |= 1955868440;
const v37 = new Uint32Array(2618);
const t62 = 128;
new t62(128);
new Float64Array(15);
[15,-65535,-125063199,8,65535];
[9];
[257,1174890453,2147483648,64,536870912,-2];
function F50(a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v37.f = a53;
    } catch(e55) {
    }
    try {
        this.c = v29;
    } catch(e56) {
    }
}
new F50(2123943254, 40530, 2123943254);
new F50(40530, 40530, 2123943254);
new F50(-4, 40530, 2123943254);
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F60);
    const v65 = this.constructor;
    try { new v65(); } catch (e) {}
}
const v67 = new F60();
const t89 = v67.constructor;
new t89();
