const v0 = [257,-2147483649,0];
[806708344,-128,9,7,1514143929,1967254376];
const v2 = [-868692135,-41843,12,-525202295];
const v3 = [536870887,-1314597871,1247685076,1007727974,268435456,2147483649];
[-644778719,37573,-1332496471,-14231,-48693,1073741824,16,65535,4096,-1];
const v5 = [-2,4];
class C6 {
    static {
        v0 && v2;
        const v9 = this[0];
        try { v9(v3); } catch (e) {}
        const o13 = {
            "maxByteLength": 3516,
        };
        const v15 = new SharedArrayBuffer(3516, o13);
        new BigUint64Array(v15);
    }
}
const v18 = new C6();
const v19 = new C6();
const v20 = new C6();
[C6,v5,v20,v19,v3];
[v20,v18,v0,v5];
[v3];
new Date();
function f26(a27) {
}
const v28 = f26(f26);
f26();
new Set();
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
new F32(v28);
for (let v38 = 0; v38 < 25; v38++) {
    const v39 = [601759695];
    const v40 = [1073741824,1073741823,1376142744,1073741825];
    function f41(a42, a43, a44, a45) {
        try { v40["find"](..."find", a45, ...v39); } catch (e) {}
        const v48 = [Set];
        [v48,v48,v38];
        v39 || f26;
    }
    for (let v51 = 0; v51 < 5; v51++) {
        f41();
    }
}
