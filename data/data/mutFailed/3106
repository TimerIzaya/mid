[-273591.37727540266,3.0,0.3140005360948678,0.3996021111090503,-5.194504191250461e+307,3.0];
[-Infinity,0.08045683175579676,1000000000.0,2.0,-1e-15,343224.2414536036,-1000000000.0,1000.0,-4.0,-2.2250738585072014e-308];
const v2 = [0.2688736689946336,1000.0,Infinity,0.07169728056017965,-0.059351316088063655,630.082484323603,1.6778452168849177e+308,-949243.1919878623,5.0];
function f3(a4, a5) {
    const o9 = {
        get f() {
            super.n();
            return isFinite;
        },
    };
    return o9;
}
v2.toString = f3;
new Set();
9007199254740991 ^ 9007199254740991;
const v21 = new Int32Array(64);
let v22 = 678;
v22--;
const v25 = new Uint16Array(v22);
try { v25.with(v21, "bigint"); } catch (e) {}
BigInt64Array.constructor = f3;
const v29 = BigInt64Array?.constructor;
try { new v29(v2); } catch (e) {}
new BigInt64Array(8);
const v32 = [];
v32[Symbol.toPrimitive] = f3;
function f35(a36) {
    try {
        v32.some();
    } catch(e38) {
        e38.stack;
    }
    return a36;
}
try { new f35(Int32Array); } catch (e) {}
f35(f35).arguments;
v32.toString = f35;
const o44 = {
    __proto__: v32,
    [v32]() {
    },
};
function f45() {
    return "e" | ["e","e","e","e","e"];
}
o44.toString = f45;
const v49 = o44.toString(f35);
v49.caller = v49;
