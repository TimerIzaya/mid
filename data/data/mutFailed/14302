class C3 {
    static [64];
    constructor(a5, a6) {
        return this;
        let v9 = -1024;
        Math.log(-3.377362004789839e+307);
        let v12 = -(-3.377362004789839e+307);
        --v12;
        ++v9;
        v9 & v12;
        -(-3.377362004789839e+307);
    }
}
new C3(-13120, -13120);
new C3(9, -13120);
const v19 = new C3(-13120, 64);
function f20() {
    return v19;
}
function f24(a25, a26, a27, a28) {
    return a25;
}
const v29 = f24();
const v32 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v33 = [601759695];
v33[0] = v33;
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    arguments.toString();
    function f43() {
        const v45 = ("Vre").toLocaleUpperCase;
        try { new v45(v45, -4294967297n, a39, v34); } catch (e) {}
        ("Vre").fixed(f36);
        let v49 = -268435456;
        v49--;
        -(v49 + v49);
        const o66 = {
            "c": -4294967297n,
            [522675525n](a54, a55) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v33,
            valueOf(a57, a58) {
                return a57;
            },
            "e": -4294967295,
            "e": v49,
            "maxByteLength": -4294967295,
            "arguments": v32,
            ...v33,
            "type": "Vre",
            ..."Vre",
            valueOf(a60, a61) {
                return -4294967295;
            },
            ..."Vre",
            4: "Vre",
            "c": v49,
            "type": "Vre",
            "type": "Vre",
            toString(a63, a64, a65) {
                return a63;
            },
            5: -4294967295,
            6: v49,
        };
        o66.valueOf();
        return f36;
    }
    f43.length;
    f43();
    Int8Array.a = Int8Array;
    const v71 = new Int8Array();
    try { v71.findIndex(v29); } catch (e) {}
    v71.buffer.slice();
    %OptimizeFunctionOnNextCall(f43);
    ("find").strike();
    try { v34["find"](..."find", a40, ...v33, ...v34, ...522675525n); } catch (e) {}
    const v80 = Reflect.construct(a37, [Reflect,Reflect,a39], f36);
    try { v80["toString"](arguments); } catch (e) {}
    return v34;
}
for (let v83 = 0; v83 < 5; v83++) {
    f36(v33, v83, v83, v34);
}
%PrepareFunctionForOptimization(f36);
const v85 = f36();
%OptimizeFunctionOnNextCall(f36);
class C88 extends f36(v85, f36, -128, v29).constructor {
    static #h;
}
new C88();
