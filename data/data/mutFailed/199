class C3 {
    get e() {
        return 1e-15;
    }
    static ["match"];
    static 1061 = "match";
    #h = "object";
    static d = 145693.0891353658;
}
new C3();
const v9 = new C3();
function f10(a11, a12) {
    const v14 = Symbol.replace;
    v9[v14] = "object";
    return v14;
}
v9[Symbol.toPrimitive] = f10;
new C3();
[5.0,1.0];
[0.9518900649308116,1e-15,5.0];
[1.5723674266999802e+308,Infinity,4.0];
function f21() {
}
f21[Symbol.toPrimitive] = f21;
[-4096,-1073741824,65537,9007199254740990,-4096];
const v25 = [1557591051,8137,536870888,-9223372036854775808];
255 * 255;
-16 <= -16;
v25 * v25;
const v31 = [];
try { v31.findIndex(); } catch (e) {}
class C33 {
}
C33.m = -16;
if ("match") {
    try { C33.m(); } catch (e) {}
}
const v35 = [];
[];
[];
[];
const v44 = ~f21;
-16 & -v31;
v44 >> f21;
class C49 {
}
new C49();
class C51 {
}
const v52 = new C51();
function f53() {
    const o62 = {
        toString(a58, a59) {
            try {
                super.getMinutes();
            } catch(e61) {
            }
            return "object";
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return "object";
}
const v63 = f53();
const v64 = f53();
const v65 = f53();
function f66(a67, a68, a69) {
    const o76 = {
        get a() {
            const o74 = {
                "execution": "async",
                "type": "major",
            };
            gc(o74);
        },
    };
    o76[2074850330] = o76;
    return o76;
}
const v77 = f66(v65, v65, v63);
f66(v77, f66(v64, v64, v77), v64);
v52[594532432] = v52;
const o81 = {
};
o81.b = v63;
o81.b = o81;
class C84 {
}
const v85 = new C84();
const v86 = new C84();
function f87() {
    const v88 = C33.toString();
    try { v88(); } catch (e) {}
    return C33;
}
v86.toString = f87;
const o95 = {
    "h": v85,
    [v86](a91, a92, a93) {
        super[268435439];
    },
    [v9]: v85,
    __proto__: C84,
    "c": 9,
};
v52[-16];
v35[268435439];
("symbol").replace("bigint").fontsize;
class C102 {
    #a = -2;
    constructor(a104, a105) {
    }
}
for (let i = 0; i < 5; i++) {
    const o107 = {
        "type": "symbol",
        "type": "symbol",
    };
    gc();
}
let v2 = "163558485";
const v3 = [-7,127,13,-2];
[-1238491077];
-3 >> -3;
const v8 = v2--;
class C10 {
    e;
    constructor(a12) {
        try {
            a12.toString = a12;
        } catch(e13) {
        }
        try {
            a12[a12] = a12;
        } catch(e14) {
        }
    }
    c = v8;
}
C10.prototype;
new C10(C10);
const v17 = new C10(C10);
const v18 = new C10(-2.0);
v18.c;
9n | 9n;
65537n + 65537n;
~-768129381n;
-65536n == -65536n;
2147483649 >>> 2147483649;
const v34 = 1073741824 - 1073741824;
v34 >>> v34;
Uint32Array.name;
try { new Uint32Array(9n, 4096, -65536n); } catch (e) {}
const v40 = new Uint32Array(4096);
let v41 = 9;
v41--;
try { new Int32Array(v40, v40, -2.0); } catch (e) {}
const v45 = Int32Array.length;
v45 - v45;
new Int32Array(v41);
try { new Uint16Array(C10, Uint32Array, 2147483649); } catch (e) {}
new Uint16Array(120);
let v53;
try { v53 = Array.bind(v17); } catch (e) {}
try { v53(Int32Array); } catch (e) {}
const v56 = Array();
v56.a = v56;
v56.a = v56;
const v59 = new Int8Array(Array, 92, 485);
const v61 = Symbol.toPrimitive;
Object.defineProperty(v59, v61, { writable: true, value: Array });
v59[277] = v59;
const v63 = 3666 - 3666;
const v64 = v63 + v63;
v64 >>> v64;
const v68 = 0 < 1;
v68 || v68;
v68 && v68;
Object.defineProperty(BigInt64Array, "g", { configurable: true, value: v61 });
BigInt64Array.name;
const v76 = ([1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10]).sort();
try { v76.sort(-65536n); } catch (e) {}
BigInt64Array.g = BigInt64Array;
[-65535,2147483648,257,255,-25075,2403];
-271.34860184807815 | -271.34860184807815;
["p",4.260409396049164e+307,v3,1000000.0];
[v2,[1000000.0],v3,v2,"function"];
new Uint8Array(1);
class C94 {
    constructor(a96, a97) {
        function f98() {
            const v100 = new Uint8Array();
            return v100;
        }
        a97[Symbol.toPrimitive] = f98;
        a96 << a96;
        const v104 = this.constructor;
        try { new v104(); } catch (e) {}
        a96?.[a97];
    }
    #n(a108, a109) {
    }
}
const v110 = new C94(-65536n);
function f111() {
    return Array;
}
Object.defineProperty(v110, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f111 });
new C94(1000.0, v110);
new C94();
