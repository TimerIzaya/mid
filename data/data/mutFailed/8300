new Int8Array(127);
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
const v8 = new Uint16Array(3720);
~64;
try { new Uint32Array(14235n, Uint16Array, -13n); } catch (e) {}
const v13 = new Uint32Array(64);
try { v13.keys(); } catch (e) {}
202 + 202;
const v18 = new Uint8ClampedArray(202);
v18[140] = v18;
const v21 = new BigUint64Array(2864);
v21[712];
210 % 210;
210 >> 210;
let v27;
try { v27 = new BigUint64Array(210, Uint32Array, Uint32Array); } catch (e) {}
v27[207] = v27;
new BigUint64Array(210);
Set.name = Set;
const v30 = new Set();
try { v30.add(64); } catch (e) {}
Uint16Array.e = Uint16Array;
const v34 = new Uint16Array(116);
v34[51];
v34[98] = v34;
Int16Array.name = Int16Array;
const v38 = new Int16Array(512);
try { v38.slice(Uint32Array, v38); } catch (e) {}
const v42 = new Int32Array(9);
try { v42.findIndex(116); } catch (e) {}
317008.8127941969 >>> 317008.8127941969;
class C48 {
}
C48.length;
C48.length;
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this?.constructor;
    try { new v57(F51, a55, F51, a56); } catch (e) {}
}
const v59 = new F51();
v59.e = v59;
const v60 = new F51(v59, F51, F51, v59);
const v61 = v60?.__defineSetter__;
try { new v61(Int32Array, v34); } catch (e) {}
let v63;
try { v63 = v60.valueOf(); } catch (e) {}
v63.length = v63;
const v64 = [7,128];
try { v64.fill(3720); } catch (e) {}
const v66 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
try { v66.at(14235n); } catch (e) {}
const v68 = v66[4];
v68 << v68;
v68 % v68;
v68 | v68;
const v72 = [40213,422333454,47387,65536,-51830];
v72[2] = v72;
0 & 0;
0 - 0;
8 - 8;
const v82 = gc.prototype;
try { v82.constructor(); } catch (e) {}
try { gc(); } catch (e) {}
gc();
const v86 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
1 - 1;
1 >> 1;
v86.length = 1;
const v90 = /xyz{1,32}?/gusy;
class C91 {
    268435440 = v90;
}
try { C91.bind(v8); } catch (e) {}
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
const v94 = new BigInt64Array();
v94.BYTES_PER_ELEMENT;
let v97;
try { v97 = ("boolean").repeat(1000000.0); } catch (e) {}
try { v97.bold(); } catch (e) {}
const t80 = "toString";
t80[6] = "toString";
"toString" == "toString";
const v101 = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
try { v101.toLocaleString(); } catch (e) {}
let [,...v103] = v101;
try { v103.values(); } catch (e) {}
function f105() {
    const o109 = {
        ...1.0,
        set b(a108) {
        },
    };
    return o109;
}
const v110 = f105();
try { v110.__defineGetter__(-4, "toString"); } catch (e) {}
const v112 = ("boolean").split("toString");
try { v112.join(v112); } catch (e) {}
-256 & -256;
const v116 = 8 < "boolean";
v116 || v116;
v116 && v116;
const v120 = new Uint8ClampedArray();
try { v120.lastIndexOf(v97); } catch (e) {}
try { v120.reduceRight(v120); } catch (e) {}
let v124 = ("I").localeCompare();
v124--;
const v126 = -256 >> -256;
v126 / v126;
const v128 = v126 - v126;
v128 >>> v128;
function f130(a131, a132) {
    -a131;
    const v134 = a132++;
    v134 - v134;
    const v136 = a132--;
    v136 === v136;
    const v140 = new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
    try { v140.with(15135, v140); } catch (e) {}
    try { v140.toSorted(v97); } catch (e) {}
    class C143 {
        static {
            this < this;
        }
    }
    C143.length = C143;
    ~(a131 | a131);
    const o183 = {
        "c": 15135,
        "a": 15135,
        "d": a131,
        __proto__: a132,
        "g": -1628878962,
        "type": "boolean",
        "a": a131,
        set b(a149) {
        },
        "g": 15135,
        "b": a132,
        get f() {
            super[1000000.0] = this;
            Math.exp(-359.60295377780096);
            const v154 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
            [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v154,v154]];
            try {
                new Int8Array(9);
                function f161() {
                    return f161;
                }
                new Uint16Array();
                !0.8843420658768774;
                function F165() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v168 = new F165();
                const o176 = {
                    [v168](a171, a172, a173, a174) {
                        "D2z" < a171;
                    },
                };
                const o178 = {
                    [f161]() {
                    },
                };
                [o178];
                v66.copyWithin(8, -268435456, -256);
            } catch(e182) {
            }
            return this;
        },
    };
    o183.f = o183;
    o183.g = o183;
    return o183;
}
let v184;
try { v184 = f130(15135, 15135); } catch (e) {}
v184.b = v184;
v184[1000000][1000000];
f130(925.1427495594241, v64);
f130(317008.8127941969, -4);
const v189 = f130(1000000.0, v66);
v189.f = v189;
268435441n ^ 268435441n;
268435441n - 268435441n;
try { BigUint64Array.from(v18); } catch (e) {}
const v195 = new BigUint64Array();
const v196 = v195?.keys;
try { new v196(); } catch (e) {}
v195[2445191368] = 268435441n;
