function f0() {
}
function f2(a3, a4, a5, a6) {
    return a6 >= a6;
}
new Set();
new Int8Array(230);
new Uint8ClampedArray(2740);
const v17 = new Int8Array(799);
[Int8Array,230,v17];
[[f0,v17,Int8Array],Int8Array];
const v26 = new Uint8Array();
const t12 = [65535,9223372036854775807,2101773358,536870888,536870912,7];
t12.__proto__ = v26;
const v29 = new Float64Array(Float64Array, Float64Array, Float64Array);
function f30() {
    v29.length = 0;
    return 0;
}
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(4.0, 4.0); } catch (e) {}
    a35 < a35;
    const v40 = a36 << a36;
    v40 != v40;
    try {
        const o42 = {
        };
        function f43(a44, a45, a46, a47) {
            a44--;
            ("6Ct").codePointAt(1000000000000.0);
            for (const v53 in "1024") {
            }
            return f43;
        }
        f43(2740);
        this.h = a36;
    } catch(e55) {
    }
    try {
        this.a = a35;
    } catch(e56) {
    }
    try {
        this.e = a36;
    } catch(e57) {
    }
}
new F33(547507.481762301, 547507.481762301);
function F59(a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e63) {
    }
}
try {
} catch(e64) {
}
const v66 = Symbol.toPrimitive;
true.fuck(true);
const v70 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v70["p" + 2740] = 2740;
const v74 = [601759695];
const v75 = [1073741824,1073741823,1376142744,1073741825];
function f76(a77, a78, a79, a80) {
    function f81() {
        ("Vre")["concat"]("concat", a80);
        let v86 = Float64Array;
        v86 = a78;
        v70.length;
        try {
            v75.forEach();
        } catch(e89) {
        }
        Symbol.toPrimitive;
        const o96 = {
            toString(a93, a94) {
                a80 && v86;
                return this;
            },
        };
        const o97 = {
        };
        new Proxy(Uint8ClampedArray, o97);
        o96[9] = a77;
        const o105 = {
            [-4294967297n](a101, a102, a103, a104) {
            },
            ...v74,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f76;
    }
    f81();
    %OptimizeFunctionOnNextCall(f81);
    return -4294967297n;
}
const o112 = {
    [v66]() {
        function F108(a110, a111) {
            if (!new.target) { throw 'must be called with new'; }
        }
    },
};
try {
    new Map("268435441");
} catch(e114) {
}
