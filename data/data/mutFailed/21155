function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1536639757;
    } catch(e3) {
    }
    try {
        this.c = F0;
    } catch(e4) {
    }
    try {
        new BigUint64Array();
        new BigUint64Array();
        const v13 = new BigInt64Array(4046);
        function f15(a16, a17) {
            Math.exp([-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6] | [1073741824,-46456,536870888]);
            let o23 = {
            };
            [,...o23] = v13;
        }
        F0();
        this.e = -1536639757;
    } catch(e25) {
    }
}
const v26 = new F0();
new v26();
new F0();
16 >>> 16;
const v32 = new Array(16);
[F0,v32,v26];
const v35 = [v26,[16,Array]];
try { v35.entries(); } catch (e) {}
/9l4(?<=)/udsy;
/a\bc/gvdimy;
/a5a\W/uimsy;
const v42 = new BigInt64Array(2440);
let v43;
try { v43 = v42.slice(16, 2440); } catch (e) {}
new Uint32Array(v43);
-8;
BigUint64Array.d = BigUint64Array;
new BigUint64Array(8);
let v51 = 0;
const v52 = v51--;
v52 & v52;
const v54 = v51++;
function f55() {
    return v54;
}
Int8Array.b = Int8Array;
const v57 = new Int8Array(v51, v51, v52);
v57.buffer.slice(f55, v54);
