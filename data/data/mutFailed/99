class C3 {
    toString(a5, a6) {
        const v7 = this[this];
        try {
            this.fuck(/((?:a?)?a$+)/guisy, a6, v7, undefined);
        } catch(e11) {
        }
        return this;
    }
    ["toString"];
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a17;
    } catch(e19) {
    }
}
new F15(v14, v12);
new F15(v13, C3);
new F15(v13, v13);
1.1660447917673544e+308 | 1.1660447917673544e+308;
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
const v37 = new F33();
class C38 {
    constructor(a40) {
        const v42 = Symbol.iterator;
        const o44 = {
            [v42]() {
            },
        };
    }
}
for (let i47 = 0; i47 < 10; i47++) {
    try {
    const t0 = -44394n;
    t0();
    } catch (e) {}
    !-1802551371;
}
const v56 = new F33();
const v59 = new Uint32Array();
[v56,v37,v59[0.29489550717955537]];
function f3() {
    return -9223372036854775807n;
}
function f7() {
    return -1565274965n;
}
[-65537,-15,24110,-31875,-21617,13];
[2,-14941,1024,-4294967296,-41492,2147483648,4];
const v10 = [1073741823,-65536,127,67189447,1628465197,3,11,-45644];
const o11 = {
};
try {
    o11.c = v10;
} catch(e12) {
}
try {
    const o13 = {
    };
    o13.c = -128n;
    o13.d = -1565274965n;
} catch(e14) {
}
try {
    const o15 = {
    };
    o15.c = -128n;
    o15.d = -128n;
    o15.a = f3;
} catch(e16) {
}
try {
    const o17 = {
    };
    o17.c = -2147483647n;
    o17.d = v10;
    o17.a = -128n;
} catch(e18) {
}
f3.for();
