function f3() {
    return 4294967297;
}
2.368633034661169e+307 ^ 2.368633034661169e+307;
function f8() {
    return -5.0;
}
new gc();
const v12 = new Date(Date);
const t9 = 2.368633034661169e+307;
new t9(v12, v12);
const v14 = [536870912];
const v15 = [f8,f8,-4294967297];
try { v15.fill(815525.8811962535); } catch (e) {}
const v17 = [2.368633034661169e+307,2.368633034661169e+307,f3,4294967297,-5.0];
function f18(a19, a20, a21) {
}
Symbol.isConcatSpreadable;
const v24 = [142026.36415256164,-1000000000000.0,160593.91457975493,-1.9364523595671663,0.10652337324779793,0.4591098029687508,0.2689630899972745];
const v26 = new WeakMap();
function f27(a28, a29, a30) {
    return a29;
}
const v32 = [f27,v26,v24];
const o33 = {
    "arguments": v32,
    "type": "function",
};
try { v17.toLocaleString(); } catch (e) {}
class C35 {
    #m(a37, a38) {
        class C39 {
            e;
        }
    }
}
new C35();
const v41 = new C35();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
const v44 = new C35();
const v45 = v44?.constructor;
try { new v45(); } catch (e) {}
class C47 {
}
const v48 = new C47();
const v49 = v48?.constructor;
try { new v49(); } catch (e) {}
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F52(4294967297, 4294967297); } catch (e) {}
const v58 = new SharedArrayBuffer();
new DataView(v58);
for (let v61 = 0; v61 < 5; v61++) {
    Symbol.toPrimitive.description.constructor;
    ([]).constructor;
    v61 + v61;
    ("async").lastIndexOf();
    const o76 = {
        [-1000000.0]: 0.0,
        set e(a75) {
        },
    };
    const o77 = {
    };
    o77.e = o77;
    gc(o77);
}
v14.length = 1342;
const v82 = new Int32Array(257);
let v84 = new Map();
[...v84] = v82;
