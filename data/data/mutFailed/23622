class C3 {
    n(a5, a6) {
        this[4294967296] = "number";
        let v7;
        try { v7 = new a5(0.13462413542508522); } catch (e) {}
        Object.defineProperty(v7, v7, { writable: true, configurable: true, value: this + "arguments" });
        return 0.13462413542508522;
    }
    ["number"] = "number";
    static #a;
    static [0.13462413542508522];
    static f;
    #p(a10, a11, a12, a13) {
    }
    constructor(a15, a16) {
        const v17 = this.constructor;
        try { new v17(this, "arguments"); } catch (e) {}
        a16.sup();
    }
    [0.13462413542508522] = "arguments";
    ["arguments"] = "number";
    static #e;
    #n(a21, a22) {
    }
    static {
        for (const v24 of "number") {
        }
    }
}
new C3();
new C3();
new C3();
new BigInt64Array(127);
new Float64Array(6);
new Int8Array(863);
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    v37.indexOf();
    return a42;
}
for (let v44 = 0; v44 < 10; v44++) {
    f38(v44, v44, v44, v44);
}
[,[,]];
const v51 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889] <= "Z";
v51 && v51;
%OptimizeFunctionOnNextCall(f38);
f38(v37, f38, v37, f38);
