let v0 = [-9007199254740992,-6,6,10000,-128,-11,53907,1671830537,10];
const v1 = [536870912,-1073741824,1000];
const v2 = [-5,-24486,-8,8,128,64,6,57225,-4294967296,9223372036854775807];
const o6 = {
    "type": "function",
};
[965.8350154560603,0.49486962057142736,56.983454083028164,1000.0,-1.1533911705575388e+308];
[911727.2045854204];
[0.2930691454970392,167130.3696351084,4.561692932069507e+307,2.2250738585072014e-308,1000000.0,-1.0,-1000.0,-1e-15,-1.0877152932354159e+308,2.220446049250313e-16] / v2;
new Int16Array(305);
new Int32Array(1903);
const v18 = new Uint8Array(1);
const v21 = new Uint8ClampedArray(434);
function f22(a23, a24, a25) {
    const o30 = {
        get g() {
            super.c += a23;
            const v27 = a24[10];
            v0 = a24;
            try {
                super.reject(v2, v27, this);
            } catch(e29) {
            }
            return v18;
        },
        [a24]: v21,
        "a": Uint8Array,
        "g": v1,
    };
    return o30;
}
f22(v0, v1, 1903);
f22(Uint8ClampedArray, v2, 1);
f22(v21, v0, 1);
for (let i36 = 0, i37 = 10; i36 < i37; i37--) {
    function f44() {
        return Math.asin(Math);
    }
}
const v47 = /Cs[\cz]*/vi;
for (let v48 = 0; v48 < 25; v48++) {
    const v49 = [1073741824,1073741823,1376142744,1073741825];
    function f50(a51, a52, a53, a54) {
        for (let v56 = 0; v56 < 5; v56++) {
            try {
                const o59 = {
                    "execution": "async",
                    "type": "minor",
                };
                function f60() {
                }
            } catch(e61) {
                arguments.callee;
                arguments.g;
                arguments.length;
                v49.__proto__ = v49;
            }
            const v65 = [-6.741855211610779,553.594505585577,1.0637276618206825e+308];
            const o69 = {
                set c(a67) {
                    class C68 {
                        static [v65];
                    }
                },
            };
        }
        const v71 = new Int8Array();
        try { v71.entries(); } catch (e) {}
        const v73 = v71.buffer;
        Math.log1p(-(46598 / v47));
        return v73.slice();
    }
    for (let v80 = 0; v80 < 5; v80++) {
        let [] = v21;
        const o83 = {
            "maxByteLength": 1776081761,
        };
        const v85 = new SharedArrayBuffer(1, o83);
        new Float32Array(v85);
        f50();
    }
    const o90 = {
        __proto__: null,
    };
    class C92 extends Array {
    }
    function F93(a95, a96, a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            v47.c = null;
        } catch(e100) {
        }
        C92[C92];
        const v103 = new Float64Array(1);
        v103.reverse();
    }
    try { o90.valueOf(v47, v49); } catch (e) {}
}
