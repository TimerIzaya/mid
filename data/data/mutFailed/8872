function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a6;
    } catch(e7) {
    }
    Array(4087);
    const v11 = [1073741824,1073741823,1376142744,1073741825];
    function f12(a13, a14, a15, a16) {
        a13 | a13;
        a15[3] = a15;
        const v18 = a13 >>> a13;
        v18 === v18;
        const v20 = a15[3];
        v20 !== v20;
        v20 + v20;
        const v24 = ("find").codePointAt();
        v24 * v24;
        try { v11["find"](..."find", ...a16); } catch (e) {}
        return "find";
    }
}
new F3("bigint", "symbol");
new F3("toString", "toString");
new F3("symbol", "bigint");
class C33 extends F3 {
    [1000];
    static 3518;
    constructor(a35) {
        const v36 = this.constructor;
        try { new v36(); } catch (e) {}
        const v39 = new Float32Array();
        v39.entries();
    }
    #toString(a42, a43, a44) {
        for (let v45 = 0; v45 < 5; v45++) {
            %OptimizeFunctionOnNextCall(v45);
        }
        new Float64Array(1880);
        const v50 = Symbol.iterator;
        const o69 = {
            [v50]() {
                let v52 = 10;
                const o63 = {
                    next() {
                        ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["toString"]();
                        const v58 = new Int32Array(47);
                        return v58;
                        v52--;
                        const v61 = v52 == 0;
                        const o62 = {
                            "done": v61,
                            "value": v52,
                        };
                        return o62;
                    },
                };
                function f64() {
                    return f64;
                }
                try {
                    new f64();
                    /Ckza\Wb?/vis;
                    /Ma\W+/gudm;
                } catch(e68) {
                }
                return o63;
            },
        };
        return F3;
    }
    /*
    constructor(a71, a72, a73, a74) {
    }
    */
    ["toString"] = F3;
    m(a76) {
        Object.defineProperty(this, 10, { writable: true, enumerable: true, value: a76 });
    }
}
new C33();
new C33();
new C33();
class C80 {
}
function F81(a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v85 = `
        `;
        eval(v85);
    } catch(e88) {
    }
}
new F81();
class C94 {
    constructor(a96) {
        const v97 = this.constructor;
        try { new v97(v97, C94, C94, this); } catch (e) {}
        ("valueOf").localeCompare(a96, "valueOf");
    }
}
const v100 = new C94("valueOf");
const v101 = v100.constructor;
new v101(v100, v100, v101, v100, "valueOf");
