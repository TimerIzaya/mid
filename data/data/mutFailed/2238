new Uint16Array(4);
const v5 = new Int16Array(3);
function f8(a9) {
    return -1000.0;
}
Object.defineProperty(Uint16Array, Symbol.toPrimitive, { writable: true, enumerable: true, value: f8 });
const v15 = new Uint16Array(5);
[214.60877903202936,0.6425224724722088,4.0,-0.9674190396745139,685.2929477319658,332808.2093695267,-1.5544508030726264e+308];
const v17 = [-2.6955718184467736,-2.0,0.5996080991940064,-14656.819101149798,1.6719522342168898e+308,-3.0,2.5112709224513345,0.0];
const v18 = [1.6270970798980623e+308,-5.0,-6.587280013650505e+307,-693.275498482235,0.5092643681898388];
class C19 {
    #h = v18;
    #n() {
    }
    constructor(a22, a23) {
        super();
        let v24 = 0;
        for (let i = 0; i < 5; i++) {
            v24 < 7;
            try {
                Symbol.#b;
            } catch(e28) {
            }
            v24++;
        }
    }
    [Uint16Array];
    #p(a31, a32, a33, a34) {
        let [] = v5;
        const o35 = {
        };
        new Proxy(this, o35);
        const v39 = v17["copyWithin"](5, a32, a32);
        Int16Array instanceof Int16Array;
        a34[a32] *= v39;
        return 4;
    }
    /*
    constructor(a42, a43) {
        try {
            v5.filter(a42);
        } catch(e45) {
        }
        try {
            v15.#p();
        } catch(e47) {
        }
        const o49 = {
            "type": "function",
        };
        function f50(a51, a52) {
            a52.constructor(a52);
            return f50;
        }
        new Promise(f50);
    }
    */
}
function f56(a57, a58, a59) {
    const o61 = {
        get d() {
            return f56;
        },
    };
    const v62 = o61?.__lookupSetter__;
    let v63;
    try { v63 = new v62(); } catch (e) {}
    return v63;
}
new C19(5, 5);
new C19(4, 3);
new C19(5, 3);
const v69 = new Int16Array(7);
1024 * 1024;
new Uint16Array(1024);
let v76 = 948880884;
let v77 = 15;
v77++;
Math.ceil(v69);
++v76;
new Float32Array(3415);
let v83 = 12;
v83++;
Int16Array.prototype = Int16Array;
new Int16Array(v83);
const v89 = new BigUint64Array(10);
Float32Array.prototype = Float32Array;
const v92 = new Float32Array(2494);
try { v92.find(Uint16Array); } catch (e) {}
const v94 = [7,v92];
const v95 = [10,7,v94,v69];
new Float64Array();
const o103 = {
    [-352741132]: -352741132,
    set b(a101) {
    },
    get c() {
        return this;
    },
    "b": 2.220446049250313e-16,
};
const v104 = v95?.reverse;
try { v104(); } catch (e) {}
[v89,7];
let v108 = Int32Array;
const v109 = new v108(2917);
new Int16Array(5);
function F113() {
    if (!new.target) { throw 'must be called with new'; }
}
const v116 = v108--;
/S4/gvm;
/a?abc+e6H*/gvmsy;
/G(?:ab|cde)b?/udim;
const o121 = {
};
!-2;
function f124() {
}
const v125 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v125.concat(v125);
new Proxy(v94, o121);
v109["lastIndexOf"](v116);
