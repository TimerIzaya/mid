function f0() {
}
new Int16Array(2);
new Float32Array(2);
const v9 = new BigUint64Array(1024);
const v15 = new Int32Array(512);
new Int32Array(4096);
const v21 = new Float32Array(7);
for (let v22 = 0; v22 < 25; v22++) {
    const v23 = [1073741824,1073741823,1376142744,1073741825];
    function f24(a25, a26, a27, a28) {
        function f30() {
            return a26;
        }
        const v32 = new Int8Array(1024);
        const v33 = v32.stack;
        try { v33(v33, v33, 1024); } catch (e) {}
        function f35() {
        }
        Object.defineProperty(v32, "constructor", { configurable: true, enumerable: true, get: f35 });
        const v36 = [1840677197,-43868];
        v21[971.295292621937] += 512;
        v15 ^ f35;
        new f30(c, f35, 4096, f30, a26);
        const v42 = [c,Int16Array];
        Reflect.apply(v9.with, v23, v42);
        const v45 = new Int8Array(6);
        for (const v46 in v45) {
            Object.defineProperty(v36, v46, { writable: true, configurable: true, enumerable: true, value: v46 });
        }
        v32.map(f30, v32, arguments);
        try { v23["find"](); } catch (e) {}
        Object.defineProperty(v21, 8, { configurable: true, get: f35 });
        new Float32Array(104);
        new Int8Array(2269);
        new Uint8ClampedArray(3697);
        function F59(a61, a62, a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F59();
        return 6;
    }
    for (let v66 = 0; v66 < 5; v66++) {
        f24();
    }
}
