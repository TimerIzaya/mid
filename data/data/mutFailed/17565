function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    new Date(-118.8024069268339);
    let v13 = 1864489360 << ("c").toLowerCase();
    v13--;
    try {
        this.g = a5;
        const v16 = new Uint8ClampedArray();
        Math.acosh(v16 & 1864489360);
    } catch(e20) {
    }
}
new F3(536870912, -51296);
const v22 = new F3(-51296, -51296);
new F3(536870912, 536870912);
const v26 = new Set();
const v29 = new Float32Array(11);
v29.lastIndexOf();
for (let i33 = 0, i34 = 10; i33 < i34; i34--) {
    for (let v41 = 0; v41 < 5; v41++) {
        function f42() {
        }
    }
}
class C43 {
    e;
    constructor(a45, a46, a47) {
        for (const v48 in this) {
            let v49;
            try { v49 = this.valueOf(a45, Set, -24966, v48, this); } catch (e) {}
            this & v49;
        }
    }
    [v22] = v26;
    static [-24966] = Set;
    static 14 = v22;
}
const v54 = new C43(-24966, 536870912, 536870912);
const v55 = new C43(-24966, -24966, v26);
new C43(536870912, -24966, null);
-24966 instanceof C43;
v54[2712034435];
Math.hypot(2);
const v66 = v55 / C43;
const v67 = Math.ceil(v66);
const v68 = -(-1.0);
~v55;
v66 ^ -v68;
const v72 = new Uint8Array(891);
function F73() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v75 = 0; v75 < 50; v75++) {
        v75 << v75;
        for (let v77 = 0; v77 < 25; v77++) {
            this["p" + v77] = v77;
        }
    }
}
new F73();
new F73();
let v82 = 3;
new Float64Array(v82);
const v87 = new Float32Array(129);
class C88 extends Float32Array {
    536870887 = -24966;
    [v72];
    n(a90, a91, a92) {
        function F93(a95, a96, a97, a98) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a98;
            } catch(e99) {
            }
            try {
                let v100 = v87[v67];
                v100 = a96;
                v82 = a96;
                Math.sign(-65535);
                Math.cosh(v100);
                let v106 = +v100;
                ++v106;
                this.e = a96;
            } catch(e108) {
            }
            const o110 = {
            };
            new Proxy(Uint32Array, o110);
            try {
                this.g = a97;
            } catch(e113) {
            }
        }
        new F93(a92, a92, v82, 129);
        new F93(129, a91, a91, v82);
        new F93(v82, a91, v82, 891);
        return a92;
    }
}
new C88();
new C88();
new C88();
const v122 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v122.g = v122;
const v123 = [601759695];
const t104 = "Vre";
t104[2] = "Vre";
const o140 = {
    "c": -4294967297n,
    [522675525n](a128, a129) {
    },
    ..."Vre",
    "maxByteLength": -128,
    "c": v123,
    valueOf(a131, a132) {
    },
    "e": -4294967295,
    "e": 129,
    "maxByteLength": -4294967295,
    "arguments": v122,
    ...v123,
    "type": "Vre",
    ..."Vre",
    valueOf(a134, a135) {
        return a135;
    },
    ..."Vre",
    4: "Vre",
    "c": 129,
    "type": "Vre",
    toString(a137, a138, a139) {
        return a139;
    },
    6: 129,
};
try { o140.valueOf(o140, -128); } catch (e) {}
const v143 = new Float32Array(Float32Array);
for (let v144 = 0; v144 < 25; v144++) {
    function f145(a146, a147, a148, a149) {
        a146[1];
        for (let v152 = 0; v152 < 5; v152++) {
        }
        const v154 = arguments.__lookupGetter__;
        try { v154.constructor(); } catch (e) {}
    }
    for (let v156 = 0; v156 < 10; v156++) {
        f145(v143);
    }
}
