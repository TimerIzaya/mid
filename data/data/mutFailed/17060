function f0() {
    const o29 = {
        [1.6224176578527423e+308]: 1.6224176578527423e+308,
        1073741825: 536870888,
        __proto__: "function",
        "e": 1.6224176578527423e+308,
        ["function"]: 536870888,
        "f": 536870888,
        "a": "function",
        ["function"](a5) {
        },
        set g(a7) {
            return this;
            const v8 = [];
            v8.some("function");
            const o11 = {
                __proto__: v8,
                [v8]() {
                },
            };
            const v13 = Symbol.iterator;
            const o28 = {
                [v13]() {
                    function f15() {
                        const v17 = new Uint16Array();
                        const v18 = v17.fill(f15, Uint16Array, f15);
                        v18.entries(f15, v18, v17, v18, v17).next();
                        return Uint16Array;
                    }
                    %OptimizeFunctionOnNextCall(f15);
                    let v21 = 10;
                    const o27 = {
                        next() {
                            v21--;
                            const v25 = v21 == 0;
                            const o26 = {
                                "done": v25,
                                "value": v21,
                            };
                            return o26;
                        },
                    };
                    return o27;
                },
            };
        },
    };
    return o29;
}
let v30 = f0();
f0();
f0();
class C39 {
    constructor(a41, a42) {
        v30 **= this;
        Object.defineProperty(a42, -2, { writable: true, enumerable: true, get: f0 });
        Symbol.toPrimitive;
        const v48 = new BigUint64Array(10);
        function F49() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                Object.defineProperty(v48, 0, { writable: true, value: 4096 });
            } catch(e52) {
            }
        }
        new F49();
        [-154937.43118262617,1.7976931348623157e+308,-1.7976931348623157e+308,0.6517558661212788,-1000000000000.0,1000.0];
        [-1000.0,-0.7108466592522475,-9.332165125578978,-1000000000000.0,-3.0,-8.089155838123245,-801038.2082739422,1.1750924317841979e+308,-2.220446049250313e-16];
        [-Infinity,-3.0,-17.339292605804303,-1.3076135991387687];
    }
    valueOf(a58, a59) {
        const v61 = Symbol.toPrimitive;
        const o64 = {
            [v61]() {
                Symbol.toStringTag &&= 0.671366453455724;
                try {
                    this.valueOf = Symbol;
                } catch(e63) {
                }
                return a58;
            },
        };
        return 0.671366453455724;
    }
}
const v65 = new C39(-33751n, v30);
new C39(179151475n, C39);
new C39(2n, v65);
const v69 = new Int32Array(Int32Array, Int32Array, Int32Array);
const v71 = ~v69;
const v72 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f73(a74, a75, a76, a77) {
    function f78() {
        let v80 = Float64Array;
        v80.toString();
        v80 = a75;
        const v82 = v72.length;
        const v83 = v82 >>> v82;
        v83 / v83;
        const o89 = {
            toString(a86, a87) {
                a77 && v80;
                return a75;
            },
        };
        o89.toString();
        let v91 = -268435456;
        v91--;
        const o93 = {
            "e": -4294967295,
            "e": v91,
        };
        return a75;
    }
    const v94 = f78();
    %OptimizeFunctionOnNextCall(f78);
    return v94;
}
Math.expm1(v71);
