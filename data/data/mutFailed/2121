const v4 = new Uint32Array();
const v5 = v4[40];
for (let v6 = 0; v6 < 25; v6++) {
    try { v5(); } catch (e) {}
}
class C9 {
    static 13;
    [5n];
    #b;
    static a = 41372n;
    m(a11) {
        super[41372n] = this;
        return 41372n;
    }
    c;
    257 = 41372n;
    static #a = 5n;
    [3n];
    static c = 3n;
}
const v12 = new C9();
const v13 = new C9();
const v14 = new C9();
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = v13;
    function f21(a22, a23) {
        Math.tan(9007199254740991);
        const v28 = Math.tan(a18);
        Math.acosh(v12 || 9007199254740991);
        return v28;
    }
    a20[Symbol.toPrimitive] = f21;
    try {
        this.e = a20;
    } catch(e33) {
    }
    try {
        this.c = a20;
    } catch(e34) {
    }
}
const v35 = new F15(41372n, v14, v12, v14);
const v36 = new F15(v14, v14, v12, v14);
const v37 = new F15(v14, v13, 41372n, v35);
class C38 {
    a = v36;
    static #c;
    static set d(a40) {
    }
    static {
        function f42(a43) {
            try {
                v5.toString = v5;
            } catch(e44) {
            }
            return v4;
        }
        this[Symbol.toPrimitive] = f42;
        super[this];
    }
    static valueOf(a49, a50) {
        super.e = this;
        v14[super[v36]];
        return v37;
    }
    static #e = C9;
    static [v14];
    h = v37;
    #f;
    6 = v35;
}
const v53 = new C38();
new C38();
new C38();
const v58 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v59 = [601759695];
const o61 = {
    4294967296: "UHH",
};
const v62 = [];
function F63(a65, a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    a65.lastIndexOf(a65, a66);
}
const v70 = new F63(v62);
const v71 = v70.constructor;
try { new v71(); } catch (e) {}
const v73 = [1073741824,1073741823,1376142744,1073741825];
function f75(a76, a77, a78, a79) {
    function f81() {
        const o106 = {
            "c": -4294967297n,
            "arguments": v59,
            [v62]: v53,
            "h": "Vre",
            ...-4294967295,
            "c": -4294967295,
            [522675525n](a86, a87) {
                try {
                } finally {
                }
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v59,
            valueOf(a89, a90) {
                return a78;
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v58,
            ...v59,
            "type": "Vre",
            ..."Vre",
            valueOf(a92, a93) {
                return a76;
            },
            get d() {
                const v96 = Symbol.toPrimitive;
                const o99 = {
                    [v96]() {
                        ["Vre"];
                    },
                };
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a101, a102, a103) {
                return a76;
            },
            m(a105) {
                return a105;
            },
            "execution": "UHH",
            "execution": "UHH",
            5: -4294967295,
            6: -268435456,
        };
        return "Vre";
    }
    f81();
    const v109 = new Int8Array();
    const v110 = v109.buffer;
    v110.constructor = f81;
    v110.slice(2147483648);
    %OptimizeFunctionOnNextCall(f81);
    let v114;
    try { v114 = v73["find"](..."find", a79, ...v59, ...v73, ...522675525n); } catch (e) {}
    v114 <= a78;
    return arguments;
}
for (let v116 = 0; v116 < 5; v116++) {
    f75();
}
%PrepareFunctionForOptimization(f75);
f75();
%OptimizeFunctionOnNextCall(F63);
f75();
