class C3 {
    g = -1.9630564410752207;
    #d;
    constructor(a5, a6) {
        this[-752578.6490168085];
        class C8 {
            4096;
            static 5 = -752578.6490168085;
        }
        new C8();
        new C8();
        new C8();
    }
    #g = 1.7630225008061434e+308;
    #b = -752578.6490168085;
}
const v12 = new C3(-752578.6490168085, 1.7630225008061434e+308);
new C3(-752578.6490168085, -752578.6490168085);
const v14 = new C3(-752578.6490168085, -752578.6490168085);
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    function f19(a20) {
        v12[127] = a20;
    }
    Object.defineProperty(this, "e", { writable: true, enumerable: true, set: f19 });
    try {
        this.e = v12;
    } catch(e21) {
    }
}
new F15(v14, C3);
new F15(v14, v14);
new F15(v14, C3);
[6.938918489800134,-108.46539873669394,-525.9244663240281,0.0,0.27739710659622097,-1000.0,-1000000000.0,1000000.0,258962.84335079673];
[4.0,-1000000000000.0,1.0];
[1.0,1000.0,7.8859667211341815,8.16467104345406];
function f31() {
    return Date;
}
Object.defineProperty(Uint8ClampedArray, "toString", { get: f31 });
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
const v37 = new F32(3011, Uint8ClampedArray, F32);
v37.constructor = Date;
const t45 = v37.constructor;
new t45(v37, Uint8ClampedArray, 3011);
