function f9(a10, a11, a12, a13) {
    const o70 = {
        get d() {
            const v16 = new Set();
            function F17(a19, a20) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a19;
                } catch(e21) {
                    for (let [v22,v23] of a19) {
                        try {
                        } catch(e24) {
                        }
                    }
                }
                try {
                } catch(e25) {
                }
                const v26 = v16[this];
                try {
                    new F17(v26);
                } catch(e28) {
                }
            }
            new F17();
            const v30 = [65537,268435441,63298,-5,1235122603];
            const v31 = [128,215394418];
            const v32 = v31.entries();
            function F33(a35, a36, a37, a38) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v39 = new F17();
            new F33();
            const v48 = ("string").trimStart();
            v32[3];
            let v52;
            try { v52 = v48(); } catch (e) {}
            v30[v52] = v31;
            ~0;
            v39.__proto__;
            -35417 - -35417;
            this[-143626331n] = -46483n;
            const v60 = -9223372036854775808n !== this;
            function f61() {
                const o62 = {
                };
                return f61;
            }
            v60 ? -9223372036854775808n : this;
            return 268435440n;
        },
        "f": a11,
        [-46483n](a65, a66, a67, a68) {
            return new.target;
        },
        __proto__: a12,
        [a11]: 8n,
        "g": -143626331n,
    };
    return o70;
}
f9.toString = f9;
f9(127n, f9, -160642517n, 536870889n);
const v72 = f9(-143626331n, -46483n, -160642517n, -143626331n);
function f73() {
    return -160642517n;
}
function f74(a75) {
    function f76() {
        return a75;
    }
}
Object.defineProperty(v72, "p20", { get: f73, set: f74 });
const v77 = f9(-46483n, f9, 268435440n, -143626331n);
const v80 = new Int8Array(0);
function f81() {
    new Int8Array(1073741823);
    class C85 {
        static 3 = v80;
        [v77];
        f;
        static #b = 1073741823;
        #d = -9223372036854775808n;
        #valueOf(a87, a88, a89, a90) {
        }
    }
    const o94 = {
        valueOf(a92, a93) {
        },
    };
}
new BigInt64Array(3);
{
    for (let v98 = 0; v98 < 32; v98++) {
        v72["p" + v98] = v98;
    }
}
new Float32Array(115);
function f104(a105, a106, a107, a108) {
    const v109 = /(?:a*)+q(?<a>.)/guds;
    Object.defineProperty(v109, "constructor", { configurable: true, enumerable: true, value: f9 });
    function f110(a111) {
        a111.hasIndices = a111;
        a111.constructor;
    }
    for (let i115 = 0, i116 = 10; i115 < i116; i116--) {
        for (let v123 = 0; v123 < 25; v123++) {
            f110(v109);
        }
    }
    function f125() {
        let v126 = Float64Array;
        v126 = a106;
        return f104;
    }
    return f125;
}
for (let v127 = 0; v127 < 10; v127++) {
    f104();
}
%OptimizeFunctionOnNextCall(f104);
f104(f104, f104, f104, f104);
