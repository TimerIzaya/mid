class C3 {
    constructor(a5, a6) {
        try {
            a5.fuck(false, this);
        } catch(e9) {
        }
    }
    [0.5785707006122682] = 0.16500187474651917;
    /*
    constructor(a11, a12) {
        with (this) {
            [-12974,4294967295,-2147483649,-12946,5,-1221098290];
            [2,-7,13646,-11858,915743801,-4096,-4294967297];
            [5238504,0,2,-770275355,7];
        }
    }
    */
    [0.16500187474651917];
    static #b = 0.5217934407251624;
    9;
    e;
}
const v17 = new C3(0.5217934407251624, 0.5785707006122682);
const v20 = new Int32Array(Symbol);
let v21 = 0;
const o22 = {
};
try {
    o22.h = 0.5785707006122682;
} catch(e23) {
}
try {
    const o24 = {
    };
    o24.h = 0.5785707006122682;
    o24.g = v21;
} catch(e25) {
}
try {
    const o26 = {
    };
    o26.h = 0.5785707006122682;
    o26.g = v21;
    o26.b = v17;
} catch(e27) {
}
try {
    const o28 = {
    };
    o28.h = 0.5785707006122682;
    o28.g = v21;
    o28.c = Int32Array;
} catch(e29) {
}
v21++;
new C3(0.16500187474651917, 0.5785707006122682);
new C3(0.5217934407251624, 0.16500187474651917);
const v40 = new Int8Array(1024);
[v40,C3,-43710,0.5217934407251624];
const v44 = new Int16Array(1269);
for (const v45 in v44) {
}
const v46 = new BigUint64Array(229);
const v49 = new Int16Array(3749);
new Uint16Array(3209, 1269, v49, v20);
function f53(a54) {
    const o55 = {
        9: a54,
        "f": a54,
    };
    return o55;
}
const v58 = new Set(1024);
v46["copyWithin"]();
new BigUint64Array(10);
v58.reverse();
