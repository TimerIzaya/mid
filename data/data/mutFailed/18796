const v2 = /(l{z})/s;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this.constructor;
    try { new v6(v2); } catch (e) {}
    a5.b = a5;
    a5.dotAll;
}
const v10 = [];
try {
    v10.some();
} catch(e12) {
    e12.message = e12;
    e12.stack;
}
class C14 {
    [-1.3266522790944002];
    static #m(a16) {
        const v19 = [1959699296,-1,9007199254740991,9007199254740992,2147483649,-4096,-9223372036854775808];
        for (const v20 in v19) {
        }
        Math.atan2(1073741823, 1073741823);
        const v24 = [];
        const v25 = [v24];
        class C27 extends Map {
        }
        const v28 = new C27();
        const v29 = new C27(v25);
        const v30 = new C27(v29);
        const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v34 = new Uint32Array(v29, v24);
        const v36 = [1073741824,1073741823,1376142744,1073741825];
        function f37(a38, a39, a40, a41) {
            const v42 = a38.constructor;
            v19["pop"]();
            try { v42(v42); } catch (e) {}
            try { v42(); } catch (e) {}
            const v48 = arguments.length;
            Object.defineProperty(v28, "e", { configurable: true, enumerable: true, value: f37 });
            v29["toString"](a40, ...v30, BigUint64Array, ..."toString", a39, v48);
            function f51() {
                const v53 = ("Vre").charAt();
                try { v53.lastIndexOf(); } catch (e) {}
                ("Vre").codePointAt();
                v32.length;
                try {
                    v36.forEach();
                } catch(e58) {
                }
                const o71 = {
                    "c": -4294967297n,
                    "EPSILON": v19,
                    valueOf(a60, a61) {
                        return a38;
                    },
                    1073741824: v34,
                    [-4294967297n](a63, a64, a65, a66) {
                        eval();
                    },
                    o(a70) {
                        return -4294967297n;
                    },
                    256: a41,
                };
                return a39;
            }
            f51();
            const v74 = Array();
            try { v74.findLast(f37); } catch (e) {}
            let v77;
            try { v77 = Int8Array.of(); } catch (e) {}
            try { v77.join(a39); } catch (e) {}
            for (let v79 = 0; v79 < 5; v79++) {
            }
            try { v36["find"](..."find", a41, ...v19, ...v36); } catch (e) {}
            return a41;
        }
        return -1.3266522790944002;
    }
    constructor(a83, a84) {
        super();
        for (let v85 = 0; v85 < 10; v85++) {
            function f86(a87, a88, a89) {
                return a89;
            }
        }
        [,a83 % v10];
    }
    /*
    constructor(a94) {
        class C97 {
        }
        [,[,]];
        const v102 = -8.290461192848784e+307 && a94;
        const v103 = v102 >>> v102;
        -8.290461192848784e+307 | v102;
        v103 >>> v102;
    }
    */
}
const v106 = new C14(1073741823);
const v107 = new C14(v106);
const v108 = new C14(v107);
[-2147483647,9007199254740992,-1,129,8,1073741824,21939,1756514470,42055,1024];
const v110 = [0,65536,-51819,10000,9,2141248639];
const v111 = [1024,-9007199254740990,-6,-9223372036854775807,-1465528305,6,2147483648,9223372036854775807,536870889];
function f112() {
    return v111;
}
class C113 {
    #toString(a115, a116, a117, a118) {
        try {
            this.valueOf = f112;
        } catch(e119) {
        }
        return v106;
    }
    c = v108;
    9;
    268435456;
    static [-7] = C14;
    static #e = v110;
}
new C113();
new C113();
new C113();
const v124 = [];
let v126;
try { v126 = ("YPzzJ").toLocaleUpperCase(); } catch (e) {}
try { v126.replaceAll(); } catch (e) {}
let v128;
try { v128 = v126.match(); } catch (e) {}
let v129;
try { v129 = v126.normalize(); } catch (e) {}
let v130;
try { v130 = v107.call(v124); } catch (e) {}
try { v130.strike(); } catch (e) {}
const v133 = 1236059864 >>> 1236059864;
const v136 = ([f112()])?.reduce;
try { v136(); } catch (e) {}
let v138;
try { v138 = v136(v128, v130, 255, v129); } catch (e) {}
try { C113(v133, v138, v107); } catch (e) {}
function F140(a142, a143) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e144) {
        for (let [v145,v146] of a142) {
        }
    }
    ~(-256n >> -256n);
    try {
        new F140();
    } catch(e151) {
    }
}
new F140(F140, F140);
new F140();
