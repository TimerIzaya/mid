class C3 {
    static #p(a5) {
        ~-64168;
        -1000000000.0 - -64168;
        !a5;
        return "19";
    }
    static [-0.8818178904739575] = "19";
}
const v12 = new C3();
try { v12.toString(); } catch (e) {}
new C3();
const v15 = new C3();
const v16 = v15?.constructor;
try { new v16(); } catch (e) {}
new BigUint64Array(11);
let v21 = 4;
v21--;
new Uint8ClampedArray(v21);
const v27 = new Uint8ClampedArray(115);
v27[24] = v27;
let v29 = 4.0;
try { ("undefined").sup(); } catch (e) {}
const v33 = new Date("undefined");
v33.getYear();
v29 **= v29;
const o41 = {
    set d(a37) {
        for (let v38 = 0; v38 < 5; v38++) {
        }
        this["cos"]();
    },
};
class C42 {
    constructor(a44) {
        o41.d = a44;
    }
}
C42.name = C42;
const v46 = new WeakSet();
v46[4] = -8.576381465737261e+307;
new Map();
-719616954n === -719616954n;
class C53 {
    e;
    constructor(a55, a56, a57, a58) {
        super[a56] = this;
        const o59 = {
        };
        function f60(a61, a62) {
            return BigInt64Array;
        }
        o59.set = f60;
        function F65() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C68 extends F65 {
        }
        this[Symbol.match];
        v46[Symbol.asyncIterator];
    }
    [v33];
    #e;
    a;
    #g;
    static {
        for (let i78 = 0, i79 = 10;
            (() => {
                const v80 = i78 < i79;
                v80 || v80;
                return v80;
            })();
            (() => {
                i79 >>> i79;
                function f85() {
                    return f85;
                }
                const v86 = [601759695];
                const v87 = [1073741824,1073741823,1376142744,1073741825];
                try { v87.shift(); } catch (e) {}
                function f90(a91, a92, a93, a94) {
                    function f96() {
                        return a91;
                    }
                    const v97 = f85();
                    const v99 = new Int8Array();
                    function f100(a101, a102) {
                        return v97;
                    }
                    f100();
                    const v104 = f100();
                    v104.e = v104;
                    const v105 = v99.buffer;
                    Object.defineProperty(v105, "constructor", { writable: true, configurable: true, value: Date });
                    const v107 = new Int8Array();
                    try { v107.fill(Int8Array); } catch (e) {}
                    let v109 = 1000000000000.0;
                    v109--;
                    v105.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f96);
                    let v113;
                    try { v113 = v87["find"](..."find", a94, ...v86, ...v87, ...522675525n); } catch (e) {}
                    Symbol.d = Symbol;
                    Symbol.for(Symbol("find").description);
                    Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
                    const v120 = new Uint8ClampedArray();
                    const o121 = {
                        ...v120,
                    };
                    o121.h = o121;
                    v113 <= a93;
                    return arguments;
                }
                f90.length;
                for (let v124 = 0; v124 < 10; v124++) {
                    f90();
                }
                const v126 = i78++;
                v126 >>> v126;
            })()) {
            i79 >> i79;
        }
    }
}
