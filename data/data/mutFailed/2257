let v2 = -9.191639688579322;
class C3 {
    constructor(a5) {
        a5[1000] = a5;
        Math.min(a5);
        Math.acosh(0.6484686149360689);
        9 / 9;
        9 % 9;
        Math.asin(v2);
    }
}
const v14 = new C3("function");
const v15 = new C3(C3);
let v16 = new C3(v15);
class C17 {
    constructor(a19, a20, a21) {
        "function" - C3;
        v16 = a19;
        v14[239] = a19[C3];
        v2 ^= 1000000000000.0;
    }
    #b;
    static 10000 = C3;
    static #d;
    static f;
}
const v24 = new C17("function", v16, v14);
const v25 = new C17(C17, v24, C3);
new C17(v15, v25, "function");
function f27() {
}
[-4096,-1073741824,65537,9007199254740990,-4096];
f27();
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "function";
    } catch(e34) {
    }
    try {
        this.f = v24;
    } catch(e35) {
    }
    try {
        this.h = C17;
    } catch(e36) {
    }
}
new F30(f27, v16);
const v38 = new F30(F30, F30);
new F30(F30, v38);
const v40 = [1557591051,8137,536870888,-9223372036854775808];
255 * 255;
-16 <= -16;
v40 * v40;
const v46 = [];
try { v46.findIndex(); } catch (e) {}
const v48 = [];
[];
[];
[];
const v57 = ~f27;
const v58 = -v46;
v57 & v58;
v57 >> 536870889;
class C62 {
}
new C62();
class C64 {
}
const v65 = new C64();
v65[594532432] = v65;
const o67 = {
};
o67.b = o67;
const v70 = v65[-16];
v48[268435439];
("symbol").replace("bigint").fontsize;
class C75 {
    #a = -2;
    constructor(a77, a78) {
        this[v16];
        v58 && C17;
        try {
            this.#a = v70;
        } catch(e81) {
        }
    }
}
for (let i = 0; i < 5; i++) {
    const o83 = {
        "type": "symbol",
        "type": "symbol",
    };
    gc();
}
