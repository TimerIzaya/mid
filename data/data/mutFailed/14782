/l[\ca]/gmy;
/s/u;
/(A[\cz]vbfoo(?<!bar)baz)/vims;
-4294967295 << -4294967295;
1073741825 !== 1073741825;
class C10 {
}
const v11 = new C10();
const v12 = [-5.0];
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this.constructor;
    try { new v17(v11, v12); } catch (e) {}
    a16.__proto__.valueOf();
}
function f26(a27, a28) {
    a27[5];
}
65537 < 4096n;
-52809 + -52809;
1073741824 << 1073741824;
class C39 {
    static {
        class C41 {
            #g = C41;
            static #c;
        }
        const v42 = [536870888,8];
        v42.concat(v42);
        try {
        const t0 = 529940173;
        t0(this, this);
        } catch (e) {}
        Math.cos(1000);
        const v48 = Math.tan(1000);
        v48 * v48;
        new F13();
        function f52() {
            (623782.6377989235).constructor();
            return 623782.6377989235;
        }
        f52.call();
        %OptimizeFunctionOnNextCall(f52);
    }
}
const v55 = new C39();
const v56 = v55?.constructor;
try { new v56(); } catch (e) {}
function f60(a61, a62, a63) {
    const o67 = {
        __proto__: a62,
        [a63]: -2147483648,
        [a62](a65, a66) {
        },
        "c": 529940173,
        1073741824: C39,
    };
    return o67;
}
const v68 = f60();
const v69 = f60(v68, v68);
const v70 = f60(-2147483648, v55);
v70.undefined = v70;
const v71 = -5 << v69;
Symbol.b = Symbol;
v70[Symbol.isConcatSpreadable] = v71;
new Float32Array(165);
const v79 = new Int32Array(56885);
[v79];
