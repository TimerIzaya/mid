const v2 = new Uint32Array(Uint32Array);
const v5 = new BigUint64Array(3188);
const v8 = new Uint8Array(9);
class C9 extends BigUint64Array {
    a;
    #c;
    f = Uint32Array;
    #d = 9;
    static b = v5;
    constructor(a11, a12) {
        super(v8, 3188, a11);
        super[Uint8Array] = C9;
        let [v13] = this;
    }
    8 = Uint8Array;
}
new C9(v2, v8);
new C9(v5, 9);
new C9(51, v2);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F17();
async function f22(a23, a24, a25, a26) {
    a23.fuck();
    await v21;
    return F17;
}
v21();
function f0() {
    try { ("3Ol").match("stack"); } catch (e) {}
    const o8 = {
        "a": "number",
        ..."3Ol",
        __proto__: "number",
        "e": "number",
        set g(a6) {
            this[48];
        },
        "d": "3Ol",
        "g": "3Ol",
        65537: "3Ol",
        "h": "stack",
        ["stack"]: "3Ol",
        "b": "3Ol",
        "f": "3Ol",
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
const v11 = f0();
v11[2];
function f13() {
    return f0;
}
function f14() {
    return v9;
}
f0 - v10;
let v16 = delete v9?.b;
!v16;
!v16;
v11[v16] >>= v16;
v9[v11];
try {
    v9[f13] = f0;
} catch(e20) {
}
const v21 = [f14];
const v22 = [f13,v21];
[v21,f13];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    a29[0];
    a30[65537];
    try { a29.match(v11); } catch (e) {}
    try {
        this.b = a29;
    } catch(e34) {
    }
    try {
        Object.defineProperty(this, "b", { get: f14, set: f13 });
        try { a30(a29, a30, this, v22); } catch (e) {}
        SyntaxError.length;
        try {
            this[270] = this;
        } catch(e38) {
        }
        this.a = v10;
    } catch(e39) {
    }
}
F27.g = F27;
const v40 = new F27("n", v10);
v40.a;
v40[270] = v40;
const v42 = new F27("n", v9);
const v43 = new F27("bigint", v10);
const v44 = v43?.hasOwnProperty;
try { new v44(v42); } catch (e) {}
let v47 = 2.220446049250313e-16;
let v48 = 167.17964779139515;
v48--;
const v50 = v48 >> v48;
v50 != v50;
class C52 {
    constructor(a54) {
        a54[1] = a54;
        const o55 = {
            ...this,
        };
        o55.d = o55;
        try {
            v47 = -1.0;
        } catch(e56) {
        }
    }
    [v47];
    #e = -1.0;
}
try { new C52(v11); } catch (e) {}
const v58 = new C52(v47);
const v59 = v58?.constructor;
v59.name = v59;
try { new v59("bigint"); } catch (e) {}
const v61 = new C52(v48);
const v62 = v61?.constructor;
try { new v62(v43); } catch (e) {}
const v64 = new C52(v48);
const v65 = v64?.constructor;
v65.length = v65;
try { new v65(f14); } catch (e) {}
let v67 = 128;
v67++;
function F70(a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = a73?.constructor;
    try { new v75(a72); } catch (e) {}
    const v77 = a74?.constructor;
    try { new v77(this); } catch (e) {}
    try { this.propertyIsEnumerable(a72); } catch (e) {}
    a72.g = a72;
    const v80 = a73?.constructor;
    v80.length;
    try { new v80(this); } catch (e) {}
    try {
        this.e = a73;
    } catch(e83) {
    }
}
F70.e = F70;
F70.arguments = F70;
const v84 = new F70(F70, v64, v58);
v84.length;
const v86 = new F70(v64, v61);
const v87 = new F70(v47, v58, v58);
try {
    const v88 = [v84,v67,v87,v58,v48];
    try { v88.map(f0); } catch (e) {}
    v61.fuck(v88, -2058640984);
} catch(e91) {
    e91.message = e91;
    e91.message = e91;
}
try {
    v16 = v67;
} catch(e92) {
}
f13 || F70;
function f94() {
    return v87;
}
f94.d = f94;
try { v58["indexOf"](v87, v58, v86); } catch (e) {}
