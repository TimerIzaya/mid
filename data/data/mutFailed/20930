const v3 = [-2147483647,333595822,-65536];
const v4 = [1106348117,-924784047];
const v5 = [14,-6,4294967297,2143345678,68292031,-2147483649,6,1073741825,10000];
function f6(a7, a8, a9) {
    a7 * a7;
    ~a9;
    const o23 = {
        toString(a13, a14, a15, a16) {
            d = a7;
            this[a7] <<= 783562419;
            super[a7] = v5;
            try {
                const t12 = "toString";
                t12.length = 3;
            } catch(e21) {
            }
            try {
                a14.__proto__ = "toString";
            } catch(e22) {
            }
            return "-562260042";
        },
        [v4]: v4,
        ...v3,
        [a8]: a9,
    };
    return o23;
}
const v24 = f6(1374916379, v4, 783562419);
f6(783562419, v4, 1374916379);
const v26 = f6(-1, v5, 783562419);
class C27 extends f6 {
    get f() {
        let v32 = -1000.0;
        Math.log(-31210);
        -31210 << -3;
        Math.acos(v32);
        v32--;
        Math.acosh(-3);
        Math.sin(v26);
        return Math.random();
    }
}
new C27();
const v41 = new C27();
v41[2];
const v43 = new C27();
new Int32Array(3743);
const v49 = new Uint8ClampedArray(3776);
const v52 = new BigInt64Array(10);
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
const v55 = new Uint16Array(127);
v55[49];
Uint8Array.name;
const v60 = new Uint8Array(255);
v60[21];
let v62 = 179;
const v63 = v62--;
BigInt64Array.g = BigInt64Array;
const v65 = new BigInt64Array(v62);
const v66 = [];
try { v66.toSpliced(v52, v49); } catch (e) {}
let v68 = 16;
f6(v65, 10, v68--);
const v71 = v49.__proto__;
%VerifyType(v60);
new f6(v65, BigInt64Array, v71);
const v73 = new Uint16Array(v63, 783562419, 1374916379);
const v75 = new Int8Array(v68);
v75.toSorted();
function f77() {
}
class C78 {
    o(a80, a81) {
        for (const v83 of "bigint") {
        }
        f77();
    }
}
const v86 = [f77,[f77],C78];
v86[1] = v86;
const v90 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
205 - 205;
const v94 = new BigInt64Array(205);
try { v94.toSorted(v94); } catch (e) {}
const v96 = v94[205];
try {
    v96.toString = v96;
} catch(e97) {
    e97.b = e97;
}
const v98 = [-1803975943,57715,-9007199254740992];
[2147483647,13,536870912,-13,-1024,536870887];
const v103 = new Uint8ClampedArray(1000);
const v107 = +(v103 ^ 3);
const v108 = v107 + -3.0;
v108 | v108;
try { ("p").localeCompare(v3); } catch (e) {}
try { ("undefined").trim(); } catch (e) {}
const v114 = ["undefined",8.806760127177498,v98,345168.6487633812,"undefined"];
[1000.0,8.806760127177498,v114,v90,v98];
[v114];
const v120 = (a121, a122, a123) => {
    try { ("function")["toUpperCase"](); } catch (e) {}
    "-268435456" ^ a121;
    class C128 {
        9 = 6;
    }
    return a123;
};
Symbol.for(Symbol.unscopables.description);
class C134 {
}
const o137 = {
    [v73]: v43,
    "c": v24,
    "f": 1468,
    "d": v26,
    __proto__: v26,
};
o137.d = o137;
const v139 = new ArrayBuffer(2, o137);
const v141 = new Int8Array(v139);
const v143 = [-4096,13,16,6] + v141;
try { ("string").link("string"); } catch (e) {}
Symbol.iterator;
const v148 = [];
try { v148.findLast(v4); } catch (e) {}
function f150() {
    const o154 = {
        toString() {
            super[this];
        },
        ...v148,
        n() {
            return this;
        },
    };
}
f150.g = f150;
f150();
new Uint16Array(4294967295, 4294967295);
Float32Array.e = Float32Array;
const o163 = {
    m() {
        const o162 = {
        };
    },
};
function F164(a166) {
    if (!new.target) { throw 'must be called with new'; }
    const v167 = [-0.685155357392599,5.0];
    try { v167.reduceRight(this); } catch (e) {}
    function F169(a171, a172, a173, a174) {
        if (!new.target) { throw 'must be called with new'; }
        const v175 = this.constructor;
        try { new v175(a172, F164, v175); } catch (e) {}
        v167.length &= 1;
    }
    try { new F169(v107, v143, v143, v143); } catch (e) {}
    new F169();
}
const v180 = new F164();
new F164(v180);
const v183 = new Int32Array();
function F184(a186, a187, a188) {
    if (!new.target) { throw 'must be called with new'; }
    const v189 = this?.constructor;
    try { new v189(Uint16Array, a188, a188); } catch (e) {}
    a186 * a186;
    a188++;
    this.d = a186;
    this.g = Int32Array;
}
new F184(256, v183, 4294967295);
class C195 {
    constructor(a197, a198, a199) {
    }
}
Math.asinh();
new Float32Array(Float32Array, Float32Array);
