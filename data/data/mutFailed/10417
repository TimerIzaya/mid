const v0 = [];
const v1 = [v0,v0,v0];
const v2 = [v0,v1,v1];
[v0,v0,v2];
const v5 = new WeakSet();
try { v5.delete(v5); } catch (e) {}
[1014951204,9,-128,535631776,4294967295,54527,4294967296,-2,65535,-9007199254740991];
const v8 = [9007199254740990,-9223372036854775808,4];
function f9(a10, a11) {
    return Array(19793);
}
v8.toString = f9;
const v15 = [-128,-2147483647,268435440,16,65535,268435441,-1];
class C16 {
    #m(a18, a19) {
        v5[a19 / WeakSet] &&= a19;
        return v5;
    }
    [v5];
    3285;
    static 6 = v15;
    [v8] = v2;
}
C16[6];
const v25 = new C16();
const v26 = new C16();
v26[3285] = v26;
const v27 = new C16();
v27[3285] = v27;
const v30 = Array(7);
v30[6] = Array;
let v32 = 129n;
v32--;
const v35 = new Int32Array();
const v36 = v35.constructor;
try { v36.of(); } catch (e) {}
new v36(v30);
151 === 151;
const v42 = new Int8Array();
try { v42.findLast(v25); } catch (e) {}
const v44 = v42[2];
v44 < v44;
135.68951961804942 - 135.68951961804942;
const v52 = new Int16Array(2183);
v52[1459];
8 !== 8;
new Int16Array(8);
try { parseFloat.call(135.68951961804942); } catch (e) {}
async function f61(a62, a63, a64) {
    let [v65,v66,...v67] = v52;
    v67[1400] = v67;
    const v68 = await v66;
    v68 | v68;
    return v65;
}
const v70 = f61();
try { v70.then(v26, 536870912n); } catch (e) {}
const v73 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v73[3];
function F75(a77, a78) {
    if (!new.target) { throw 'must be called with new'; }
    const v79 = this.constructor;
    try { new v79(); } catch (e) {}
    ~a78;
}
new F75(F75, F75);
new F75();
new F75();
new Uint8Array(v73);
new Uint8Array(268435440);
new Uint8ClampedArray(129);
