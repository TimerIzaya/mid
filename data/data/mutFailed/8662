for (const v5 in -3) {
    const v7 = new Int32Array(v5.d, -3, 7433);
    v7[128];
}
const v9 = new Int32Array(128);
Uint8ClampedArray[4] = Int32Array;
const t6 = 5;
new t6(5);
const v15 = new Int32Array(v9);
class C18 {
    static #p(a20) {
        function f21() {
            return a20;
        }
    }
}
async function* f22(a23, a24, a25, a26) {
    a23 = 5;
    C18 >> v15;
    const v28 = await a24;
    try {
        yield v28;
    } catch(e30) {
    }
    return a24;
}
const v31 = f22(128, -2147483648, "d", Uint8ClampedArray);
const v33 = new Map();
v33.constructor = f22;
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
[1073741824,1073741823,1376142744,1073741825];
Uint8ClampedArray[4] = v33;
const v40 = ("p").normalize("NFD");
v40 === v31;
function f43(a44, a45) {
    const o46 = {
    };
    v40?.__defineSetter__;
}
f43();
f43();
let v50 = 1000000000000.0;
v50--;
function f54(a55, a56) {
    const o57 = {
        [10000n]: a56,
    };
}
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = C18;
    const v65 = this.constructor;
    try { new v65(10000n, this); } catch (e) {}
    this.c = -2147483648;
}
const v67 = new F59(-2.0);
const v68 = new F59(-1.093925554716035e+308);
const v69 = v68 in v67;
v69 || v69;
const t59 = [];
t59.length += 1.0;
try { undefined(); } catch (e) {}
for (const v76 in "1024") {
}
