const v2 = new Int16Array();
with (v2) {
    byteLength || byteLength;
}
const v5 = new Map();
257 / 257;
new Uint8ClampedArray(257);
4 + 4;
const v13 = new Int16Array(257);
const v16 = new Uint8Array(4);
const v17 = [Uint8ClampedArray,Int16Array,v2];
const v18 = [v13,257,v5];
v18.length = v18;
const v19 = [v17,v18,v16];
class C20 {
}
const v21 = new C20();
class C23 {
}
try { C23.bind(Uint8ClampedArray); } catch (e) {}
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(Uint8ClampedArray); } catch (e) {}
}
const v28 = new F25();
try { v28.toString(); } catch (e) {}
const v30 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v32 = 9007199254740991n * 9007199254740991n;
for (let v33 = 0; v33 < 5; v33++) {
    v33 + v33;
    function f35() {
        for (let v36 = 0; v36 < 5; v36++) {
            v36 + v36;
            const v39 = ("p")?.search;
            try { new v39(f35); } catch (e) {}
            "p" == "p";
            let v42;
            try { v42 = ("p").substring(C23, C23); } catch (e) {}
            try { v42.lastIndexOf("p"); } catch (e) {}
        }
        try {
            v30.forEach();
        } catch(e45) {
            const v46 = e45?.constructor;
            try { new v46(v19); } catch (e) {}
            e45.a = v28;
            e45.a = e45;
        }
        const v49 = ("1073741824").constructor;
        v49.name = v49;
        const v50 = v49(v32);
        v50 == v50;
        try { ("1073741824").replaceAll(6, v21); } catch (e) {}
        return "1073741824";
    }
    try { f35(); } catch (e) {}
    f35();
    536870912n << 536870912n;
    function f57() {
    }
    new Int16Array(3);
    %OptimizeFunctionOnNextCall(f35);
}
