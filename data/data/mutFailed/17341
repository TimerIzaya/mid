function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -0.0;
    } catch(e7) {
    }
    try {
        const o8 = {
        };
        class C9 extends -0.0 {
        }
        const v10 = [1073741824,1073741823,1376142744,1073741825];
        try {
            v10.forEach();
        } catch(e12) {
        }
        this.h = -0.0;
    } catch(e13) {
    }
}
const v14 = new F3(-2.2250738585072014e-308, -0.0);
const v15 = new F3(-0.0, -2.2250738585072014e-308);
new F3(-0.0, -13.740397731503549);
const v20 = [-9.874612800566398,-1.0,1000000.0,0.0819871741387227,0.533813135432809];
[-1.1517305616198632e+308,-2.0,-321.1696646978595,Infinity,-2.220446049250313e-16,-1.0];
[-1000000000.0,-8.207494230511065e+307,1000.0,1.0,-Infinity,6.274731224220576e+307,421.299322718708,-Infinity,-1.7976931348623157e+308,1000000000000.0];
function f23() {
    function f24(a25, a26) {
        return f23;
    }
    const v28 = new Promise(f24);
    v28.then(f23, f24);
    return v28;
}
%PrepareFunctionForOptimization(f23);
class C34 {
    [-39233] = -2127350647;
    [-117.6202672056188];
    constructor(a36) {
        -268435456 || 4.0;
        Math.sign(4.0);
        +4.0;
    }
    268435439 = -39233;
    d;
    g;
    a;
}
const v44 = new C34(-2127350647);
try { v44.getMinutes(v44); } catch (e) {}
const v46 = new C34(v44);
class C47 extends C34 {
    static #n(a49, a50, a51, a52) {
        let v53;
        try { v53 = a51(C34); } catch (e) {}
        const v54 = [v44,v53,this,a50,v53];
        [-117.6202672056188,v54];
        [v54];
        return v44;
    }
    constructor(a58, a59, a60) {
        super(-39233);
        for (let v61 = 0; v61 < 32; v61++) {
            C34["p" + v61] = v61;
        }
    }
}
new C47(v46, v46, C34);
Int32Array[2] = Int32Array;
const v65 = new Int32Array(Int32Array, Int32Array);
for (let v66 = 0; v66 < 5; v66++) {
    const o67 = {
        "a": v14,
        "e": v14,
        10: v15,
    };
    function f68() {
        return Math.acos(v65);
    }
    f68();
    function F72(a74, a75, a76, a77) {
        if (!new.target) { throw 'must be called with new'; }
        const v81 = new Float32Array(7);
        v81.includes(1234, 1000);
        2105444095n >> 2105444095n;
        for (let v88 = 0; v88 < 100; v88++) {
            const o121 = {
                6: undefined,
                [268435439n]: 2105444095n,
                __proto__: a76,
                "g": a76,
                m(a91) {
                    a91.f = a91;
                    try { a91.next(); } catch (e) {}
                    a91.c = a91;
                    a91.h = a91;
                    const o93 = {
                    };
                    o93.h = o93;
                    o93.h = o93;
                    function f94(a95, a96, a97) {
                    }
                    f94.caller = f94;
                    try {
                    } catch(e99) {
                    }
                    try {
                        const o101 = {
                        };
                        o101.h = o101;
                    } catch(e102) {
                    }
                    Math?.expm1;
                    const v106 = -9007199254740991 >> -9007199254740991;
                    v106 - v106;
                    class C108 {
                        o(a110, a111, a112, a113) {
                        }
                    }
                    C108.name;
                    const v117 = new Int8Array(3938);
                    let v118 = 3;
                    [...v118] = v117;
                },
                "b": v88,
                "arguments": this,
                "f": -2127350647,
                ...v20,
                "h": -4294967296n,
                "h": "unicode",
                9: this,
                valueOf(a120) {
                    return v88;
                },
            };
        }
        try {
        } catch(e122) {
        }
        const v123 = [];
        const o126 = {
            set b(a125) {
            },
            "arguments": v123,
        };
        try { Math.ceil(-4294967296n); } catch (e) {}
    }
    new F72();
    const v130 = new F72();
    const t149 = v130.constructor;
    new t149();
    new F72();
    %OptimizeFunctionOnNextCall(f68);
}
const v135 = new Float64Array(Float64Array, Float64Array, Float64Array);
function f136() {
    v135.length = 0;
    return 0;
}
f136();
