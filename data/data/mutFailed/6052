let v3 = 9;
v3++;
class C5 {
}
const v6 = new C5();
const v7 = [-0.42703791448452577,-9.174109027962913,-1.7976931348623157e+308,-3.06318157624919,1000000000000.0,-2.2250738585072014e-308,-515.183479844324,0.20435565392355481,616564.7515082213,-3.0];
const o8 = {
    [v7]: v6,
};
40722 !== 40722;
const v13 = ~(-6 + -6);
class C14 {
    #d = -6;
    [v3] = 768291592;
    static n(a16, a17) {
        new Int8Array(268435456);
        URIError();
        this.d ^= a16;
        let v23;
        try {
        const t0 = 40722;
        v23 = new t0(a16, this);
        } catch (e) {}
        try { new v23(a16, v3, v3); } catch (e) {}
        return a16;
    }
    static [768291592] = 42853;
    static #a;
    constructor() {
        super();
        Math.acosh();
    }
    [-6] = 4096;
    a;
}
const v28 = C14?.constructor;
try { new v28(768291592); } catch (e) {}
const v30 = C14.length;
v30 * v30;
new C14();
new C14();
const v34 = new C14();
class C35 {
    7 = v34;
    constructor(a37, a38, a39) {
        function f40(a41, a42, a43) {
            v7.copyWithin();
            try {
                f40(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e49) {
            }
            const v50 = this >> -268435456;
            v50 >> this;
            return -v50;
        }
        f40(this, this, a37);
    }
    static #e;
    static e = -6;
    static {
        const v56 = this.prototype?.constructor;
        try { new v56(); } catch (e) {}
        try {
            this.#e = this;
        } catch(e58) {
        }
        -559377378 << -559377378;
        -559377378 >> -559377378;
    }
    [-6];
}
const v64 = new C35();
const v65 = v64?.constructor;
try { new v65(); } catch (e) {}
const v67 = v64?.constructor;
let v68;
try { v68 = new v67(); } catch (e) {}
const v69 = new C35();
const v70 = v69?.constructor;
try { new v70(); } catch (e) {}
const v73 = new Int16Array(v13);
class C76 extends Float64Array {
    constructor(a78, a79, a80, a81) {
        super(v73);
    }
    [65] = Float64Array;
}
const v82 = v69?.constructor;
try { new v82(); } catch (e) {}
const v84 = new C35();
class C85 {
}
("async").split(/[a-zA-Z0-9]BL[\cZ]/udsy, C85);
const v89 = v84?.constructor;
try { new v89(); } catch (e) {}
const v93 = new Uint8ClampedArray(3);
class C94 {
    constructor(a96, a97, a98, a99) {
        const v100 = this?.constructor;
        try { new v100(a97, v28, 42853, a97); } catch (e) {}
        a96 / a96;
        a99--;
        for (let v104 = 0; v104 < 5; v104++) {
            const v105 = ~a98;
            class C106 {
                #g = C106;
                static #c;
            }
            const o107 = {
            };
            v105 >>> v104;
            v93[v104] = a99;
        }
    }
}
const v109 = C94?.constructor;
try { new v109(v68); } catch (e) {}
let v111;
try { v111 = new C94(3, C94, v84, 3); } catch (e) {}
v111.length;
const v113 = new C94();
const v114 = v113?.constructor;
try { new v114(v84, C14, C14, v64); } catch (e) {}
