const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = this;
    try {
        this.b = v0;
    } catch(e3) {
    }
    try {
        this.h = v0;
        try {
            this.fuck(v0, 0.49435060840545286);
        } catch(e6) {
        }
    } catch(e7) {
    }
    try {
        this.c = v0;
    } catch(e8) {
    }
}
const v9 = new F1();
const v10 = new F1();
const v11 = new F1();
class C12 {
    static h;
    static #e = F1;
    constructor(a14) {
        function f15() {
            return C12;
        }
        function f16(a17) {
            const v20 = new Uint8ClampedArray(4);
            v20.indexOf();
        }
        Object.defineProperty(this, "length", { writable: true, enumerable: true, get: f15, set: f16 });
        super.h;
        try {
            this.#e %= a14;
        } catch(e23) {
            function f24() {
                const v25 = f16 / v0;
                Object.defineProperty(this, 556318822, { writable: true, set: f15 });
                return v25;
            }
            e23.constructor = f24;
            const v26 = e23?.constructor;
            try { new v26(C12); } catch (e) {}
        }
    }
    [v9];
}
const v31 = Array(670)?.findIndex;
try { new v31(v10); } catch (e) {}
function f33(a34, a35, a36, a37) {
    return arguments;
}
const v39 = new C12(v10);
v39.length = v11;
v39.length = v39;
new C12(v11);
new C12(v9);
65537 * 65537;
try { ("m").padEnd(670); } catch (e) {}
try { ("Ut0RN").codePointAt("Ut0RN"); } catch (e) {}
139837843 ^ 139837843;
9 >> 9;
function F65(a67) {
    if (!new.target) { throw 'must be called with new'; }
    0 / 0;
}
F65.arguments = F65;
