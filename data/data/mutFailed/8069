function f1(a2, a3) {
    try { a3(a3, a3, a3); } catch (e) {}
    class C6 {
        4294967296 = 996195971n;
    }
    const v7 = new C6();
    return v7;
}
Set[Symbol.toPrimitive] = f1;
let v10 = new Set();
function f11(a12) {
    const o18 = {
        [Set](a14, a15) {
            v10 <<= a12;
            try {
                new Set(this);
            } catch(e17) {
            }
            return this;
        },
        "b": Set,
        __proto__: v10,
    };
    return o18;
}
const v19 = f11(f11);
const v20 = f11(v19);
const v21 = f11(Set);
function f22(a23, a24, a25) {
    const o34 = {
        toString(a27, a28, a29, a30) {
            const v31 = new f11(a30, a29, a28, a27);
            const v32 = this % v31;
            let v33;
            try { v33 = new a27(a30, v32, v32, a23); } catch (e) {}
            a27[7] %= v32;
            v21[v10] = v33;
            return a24;
        },
        ...v21,
        __proto__: a23,
    };
    return o34;
}
f22(v19, v10, v20);
f22(v19, f22(v19, v19, Set), f11);
const v41 = new Int8Array();
for (const v42 in v41) {
}
const v43 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
function f47(a48, a49, a50, a51) {
    function f53() {
        const o62 = {
            "e": -4294967295,
            ...v43,
            84: arguments,
            ..."Vre",
            set b(a57) {
            },
            ["Vre"](a59, a60) {
                super[f53];
            },
        };
        return a48;
    }
    class C64 extends Float32Array {
        constructor(a66, a67, a68) {
        }
    }
    f53();
    %OptimizeFunctionOnNextCall(f53);
    let v71;
    try { v71 = v45[a50](..."find", a51, ...v44, ...v45, ...522675525n); } catch (e) {}
    v71 <= a50;
    return arguments;
}
try { f47(964598.6714444079, 964598.6714444079, 964598.6714444079, v44); } catch (e) {}
let v76 = 5;
-9 >>> -9;
const v79 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v80 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v80.map(1.0); } catch (e) {}
const v83 = Symbol.species;
v79[v83] = 8.580387257773513;
~268435440;
Uint8Array.length;
new Uint8Array(268435440);
v83.description = 964598.6714444079;
v76 = -15;
const v91 = new Int8Array(8);
[v91];
995 | 995;
const v96 = new Uint8ClampedArray(995);
const v98 = new Int8Array(v96);
const v99 = v98.copyWithin;
v99.name = v99;
for (let v100 = 0; v100 < 32; v100++) {
    v79[-2] = -9 << v100;
    const v102 = v80[v83];
    try {
        v102.__proto__ = v102;
    } catch(e103) {
        Object.defineProperty(e103, "g", { enumerable: true, value: e103 });
        e103.g = e103;
    }
    const v105 = new Uint8ClampedArray();
    v105.byteOffset;
    Math.sin(/c(?:ab)|cde/vdmy.exec());
    const v112 = "object" + v100;
    const v113 = v112?.trim;
    try { new v113(); } catch (e) {}
    v80[v112] = v100;
}
const v115 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F116(a118, a119, a120, a121) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a118;
}
const v122 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C124 {
    static #e;
    m(a126, a127, a128, a129) {
        v122.#e;
        a127.#e = -1;
    }
}
let v132 = 0;
v132 & v132;
do {
    break;
    v115[Symbol.asyncIterator] = v79;
    v132++;
} while (v132 < 9)
Uint8ClampedArray.name;
const v142 = new Uint8ClampedArray(995);
new Int8Array(v142);
const v147 = new Float64Array(Float64Array, Float64Array);
class C148 extends Int16Array {
}
const v149 = new C148();
const o150 = {
    __proto__: v149,
};
try { v147.every(o150); } catch (e) {}
