new Uint8ClampedArray(584);
new Int8Array(1933);
const v8 = new Uint16Array(5);
try { Map(); } catch (e) {}
const v12 = new Map();
function f13(a14, a15, a16, a17) {
    a16.arguments = a16;
    a14[3];
    a16.caller = a16;
    const o25 = {
        n(a20, a21, a22, a23) {
            for (let v24 = 0; v24 < 10; v24++) {
            }
        },
        16: a14,
        ...v12,
    };
    return o25;
}
const v26 = f13("m", "m", f13);
const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = [601759695];
try { v30.sort(v30); } catch (e) {}
v30[0] = v30;
const v32 = [1073741824,1073741823,1376142744,1073741825];
function f34(a35, a36, a37, a38) {
    arguments.toString();
    function f41() {
        const v43 = ("Vre")?.toLocaleUpperCase;
        try { new v43(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v47 = -268435456;
        v47--;
        -(v47 + v47);
        const o64 = {
            "c": -4294967297n,
            [522675525n](a52, a53) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v30,
            valueOf(a55, a56) {
            },
            "e": -4294967295,
            "e": v47,
            "maxByteLength": -4294967295,
            "arguments": v29,
            ...v30,
            "type": "Vre",
            ..."Vre",
            valueOf(a58, a59) {
            },
            ..."Vre",
            4: "Vre",
            "c": v47,
            "type": "Vre",
            toString(a61, a62, a63) {
            },
            6: v47,
        };
        try { o64.valueOf(o64, -128); } catch (e) {}
        return "Vre";
    }
    f41.length;
    f41();
    const v69 = new Int8Array();
    try { v69.findIndex(v26); } catch (e) {}
    %OptimizeFunctionOnNextCall(f41);
    ("find").strike();
    try { v32["find"](..."find", a38, ...v30, ...v32, ...522675525n); } catch (e) {}
}
for (let v74 = 0; v74 < 5; v74++) {
    f34();
}
const v76 = [1000.0,-2.0];
[-566129.1999229374,-2.0,-2.2250738585072014e-308];
const v79 = new Float32Array(Float32Array);
function f80(a81, a82, a83, a84) {
    a81[0] = a81;
    a82 <= a82;
    const v87 = arguments?.__lookupGetter__;
    try { v87(v87, f80, a82, arguments); } catch (e) {}
    try { undefined(); } catch (e) {}
    new Int8Array(v79);
    "find" == "find";
    return v79;
}
for (let v95 = 0; v95 < 10; v95++) {
    f80(v79, -128);
}
const v97 = [-1.7976931348623157e+308,1000000000.0,867887.6042050705,-1000000000.0,5.0,-2.2250738585072014e-308,2.2250738585072014e-308,249620.5428979788,1000000000000.0];
function F98(a100, a101, a102, a103) {
    if (!new.target) { throw 'must be called with new'; }
    const v104 = this.constructor;
    try { new v104(a100); } catch (e) {}
    this.c = a100;
}
function f106() {
    return v76;
}
class C107 extends f106 {
    #g = Int8Array;
    static #n(a109, a110, a111, a112) {
        try {
            v8.__proto__ = v97;
        } catch(e113) {
        }
        const v115 = Date.constructor;
        function f116(a117, a118, a119) {
            try { a118.groupToMap(v115); } catch (e) {}
            return a118;
        }
        return 1933;
    }
    n(a122, a123, a124) {
        f106();
        %PrepareFunctionForOptimization(f106);
        function f127() {
            const o129 = {
                __proto__: 584,
            };
            o129.e = o129;
            const v130 = new Uint16Array();
            v130[1] = v130;
            return BigInt64Array;
        }
        const v132 = new BigInt64Array(218);
        v132.sort(f127);
        f106();
        f106();
        %OptimizeMaglevOnNextCall(f106);
        f106();
        const v138 = new BigUint64Array();
        const v139 = /o(\xed\xb0\x80)\x01/gudims;
        const v141 = Symbol.toPrimitive;
        v139[v141] = v141;
        const v142 = /(xyz{93})/gusy;
        try { v142.compile(v138, v139); } catch (e) {}
        return this;
    }
}
new C107();
new C107();
new C107();
new BigInt64Array(128);
class C152 {
}
[-2.220446049250313e-16,[C152,C152,C152]];
const v157 = new Uint16Array(9);
v157.includes(9223372036854775807);
