const v0 = [-647001.9797080504,-1000000000.0,3.0,-182792.30797207414,-1.7976931348623157e+308,-Infinity,0.7507170858955736];
const v1 = [3.260836020283436e+307,-1000000000.0,1000000000000.0,7.541068532744827,3.0153861758430867e+307,-1e-15,-599996.1657023347];
const v2 = [0.5032924099570778,428.4332230582211,661.7517070638414];
function f3(a4) {
    const o10 = {
        "d": a4,
        o(a6) {
            a6[2] = a6;
            try { new a6(this); } catch (e) {}
            a4[this];
            this.__proto__;
            return a4;
        },
        "b": v0,
        "h": v1,
        __proto__: v1,
    };
    return o10;
}
f3(v1);
const v12 = f3(v2);
f3(v1);
let v14 = 10;
for (; v14--;) {
}
new Uint8Array(6);
new BigUint64Array(955);
new Int32Array(55);
function f25() {
}
const v26 = /xyz??/dmsy;
v26.toString = f3;
const v27 = /Al(?:a+)*/dis;
const v28 = /()/udy;
v28.flags = v28;
const t35 = "toString";
t35.length = "toString";
("boolean")[6];
-268435456 << -268435456;
[-268435456];
const v38 = [v26,v28,v27];
try { v0["find"](..."find", Int32Array, ...v38, ...v0, ...522675525n); } catch (e) {}
const v43 = new BigInt64Array(-268435456);
for (const v44 in v43) {
}
try { v38.map(v28); } catch (e) {}
const v46 = ["n",v28,v28,v38,f25];
try { v46.every("boolean"); } catch (e) {}
try { Uint32Array.from("toString"); } catch (e) {}
new Uint32Array(314);
let v53 = 64 >>> 64;
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v55 = new Float32Array(64);
v53++;
v12 in v12;
const v59 = new Uint16Array();
const v61 = new Int32Array();
class C62 {
    static #d = -2;
    constructor(a64, a65) {
        try {
            v59.#d += v61;
        } catch(e66) {
            e66.toString();
        }
    }
}
C62.constructor;
try { v55.reduce(64); } catch (e) {}
255 + 255;
Float32Array.BYTES_PER_ELEMENT = Float32Array;
new Float32Array(255);
const o74 = {
    "c": 6,
};
function f75(a76, a77, a78) {
    const o88 = {
        p(a80, a81, a82) {
            function f83(a84, a85, a86) {
            }
            f83(a80, a78, a77);
        },
    };
    for (let v89 = 0; v89 < 25; v89++) {
        function f90() {
            return v89;
        }
        const v91 = [601759695];
        const v92 = [1073741824,1073741823,1376142744,1073741825];
        function f93(a94, a95, a96, a97) {
            f90();
            try { v92["find"]("find", a97, v91); } catch (e) {}
        }
        for (let v101 = 0; v101 < 10; v101++) {
            f93(v101, v101, v92, f93);
        }
    }
    return o88;
}
f75();
f75();
try { new Uint8ClampedArray(314, 314, 314); } catch (e) {}
function F107() {
    if (!new.target) { throw 'must be called with new'; }
    function f109(a110, a111) {
        try {
            new Uint8Array(255, 536870888);
        } catch(e114) {
        }
        return Uint32Array;
    }
    this.constructor = f109;
    const v115 = this?.constructor;
    try { new v115(); } catch (e) {}
}
const v118 = new F107();
function f119() {
}
let v122;
try { v122 = ("-1024").concat(v26); } catch (e) {}
try { v122.search(64); } catch (e) {}
function f124(a125, a126) {
    const o128 = {
        get d() {
        },
    };
}
f124(v118, "8Yr");
function f130(a131, a132, a133) {
    const o136 = {
        get f() {
            class C135 {
            }
        },
    };
}
for (let i139 = 0, i140 = 10; i139 < i140; i139++) {
}
