const v0 = [-1.3479840914834522,-375.31565077106086,9.28299965974474e+307,2.2250738585072014e-308];
let v1 = [-3.9015858296224016e+307,NaN,-4.0,-9.865089690717418e+307,-2.2250738585072014e-308,-0.0,923157.3339762616,-2.220446049250313e-16,6.518226794527737e+305,0.4500726632884876];
const v2 = [-766.0680843239483,1000000.0,424045.2283449655,-2.220446049250313e-16,0.31763461558925576,-368.02193670713734,150.73043252521552,3.0];
function f3(a4, a5) {
    a4[6] = a4;
    const o11 = {
        "c": v2,
        __proto__: a5,
        "b": a4,
        [v1](a7) {
            a5 += a4;
            new WeakSet();
            v1.length;
            v1 = v0;
            v1[v0] = WeakSet;
            a7[this] = a4;
            return WeakSet;
        },
        [v2]: a4,
        "e": a5,
    };
    try { o11.apply(v2, o11); } catch (e) {}
    return o11;
}
let v13;
try { v13 = f3(v1, f3); } catch (e) {}
try { v13.bind(v2); } catch (e) {}
const v15 = f3(f3, v0);
const v16 = f3(v0, v2);
const v17 = f3(v16, v2);
function f18() {
    return v17;
}
f18.d = f18;
const v20 = Array?.constructor;
let v21;
try { v21 = v20.prototype(); } catch (e) {}
let v22;
try { v22 = new v20(v17); } catch (e) {}
try { v22.apply(v0, v0); } catch (e) {}
const v25 = new Array(232);
try { v25.reverse(); } catch (e) {}
let v27 = 9223372036854775807;
v27++;
0 - 0;
class C33 extends 0 << 0 {
    set d(a35) {
        for (let v36 = 0; v36 < 100; v36++) {
            f18();
        }
        try {
            v0.length = v27;
        } catch(e38) {
        }
    }
    [1024] = 0;
    static n(a40, a41) {
        Array(0);
        const v46 = ~a41;
        ~-128;
        v46 || a41;
        Math.round(a41);
        Math.abs(2.220446049250313e-16);
        return v25;
    }
}
try { C33.call(Array); } catch (e) {}
const v52 = new C33();
try { v0.sort(v17); } catch (e) {}
try { v52.some(C33); } catch (e) {}
const v55 = new C33();
try { v55.groupToMap(v16); } catch (e) {}
const v57 = new v27();
v57.e = v57;
function f58() {
    return f58;
}
f58.arguments = f58;
function f60(a61, a62, a63, a64) {
    a62--;
    const v67 = (~a63)[5];
    v67 + v67;
    a63 === a63;
    try { a63(); } catch (e) {}
    return a64 >= a64;
}
f60.name;
let v73;
try { v73 = f60(v2, 0, 0, v15); } catch (e) {}
v73 || v73;
for (let v75 = 0; v75 < 10; v75++) {
    !f60(v75, v75, f58, 522675525n);
}
%OptimizeFunctionOnNextCall(v21);
const v78 = f60(f60, 522675525n, f58, f58);
v78 && v78;
!v78;
