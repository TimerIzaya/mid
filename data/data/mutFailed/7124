class C3 {
    constructor(a5, a6) {
        this[this != this] |= 1000000000.0;
        let v8;
        try {
        const t0 = 1000000000.0;
        v8 = new t0(a5, a6, this, 1000000000.0);
        } catch (e) {}
        v8[2524324493] = v8;
        const v10 = Symbol.iterator;
        const o19 = {
            [v10]() {
                let v12 = 10;
                const o18 = {
                    next() {
                        v12--;
                        const v16 = v12 == 0;
                        const o17 = {
                            "done": v16,
                            "value": v12,
                        };
                        return o17;
                    },
                };
                return o18;
            },
        };
    }
    p(a21) {
        let v22;
        try { v22 = this.o(a21, a21, this, a21); } catch (e) {}
        let v23 = this[16];
        super[v22] = this;
        v23 >>> v23;
        Math.exp(v22);
        Math.log2(v22);
        v23++;
        return 2.220446049250313e-16;
    }
}
const v30 = new C3(2.220446049250313e-16, 2.220446049250313e-16);
const v31 = new C3(Infinity, 1000000000.0);
const v32 = new C3(2.220446049250313e-16, 2.220446049250313e-16);
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = Infinity;
    } catch(e39) {
    }
    try {
        this.b = a38;
    } catch(e40) {
    }
}
const v41 = new F33(v30, v31, v31, 1000000000.0);
const v42 = new F33(v32, v32, v41, 2.220446049250313e-16);
new F33(v41, v32, v42, Infinity);
let v45;
try { v45 = v32.p(188, C3, v31, v41, 2.220446049250313e-16); } catch (e) {}
new Float64Array(1944);
const v51 = new Uint8Array(3837);
const v54 = new BigUint64Array(5);
new BigUint64Array(188);
new Int32Array(16);
const v62 = new Int8Array(4024);
const v64 = new Map();
function f65(a66) {
    return a66;
}
const v67 = f65(v51);
const v68 = BigUint64Array % v62;
let v69;
try { v69 = C3.m(v68, v42, v67, Uint8Array, C3); } catch (e) {}
try { v45(); } catch (e) {}
v54[F33] /= v69;
Object.defineProperty(v64, "g", { configurable: true, enumerable: true, get: f65, set: f65 });
Math.log1p();
