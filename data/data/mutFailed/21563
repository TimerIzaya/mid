new Uint8Array(3112);
("p").strike("p", "p", "p", "p");
const o5 = {
};
3112 < 3112;
const v9 = new Float32Array(13);
new Uint16Array(9);
[6.102599535257998];
[1.0,-1000000000000.0,-1000000000.0,-1000000.0,-238.30037002251663,545012.1874595298];
const v15 = [-1.7976931348623157e+308,5.5090850890782335,-7.948416560123941,-1000000000000.0,0.5637853933190922,0.7411701507466457,-Infinity,1000000000000.0,-1.0,-7.891851419837885];
function f17(a18) {
    return a18;
}
function f21(a22, a23, a24, a25) {
    const v26 = a22.length;
    a22.BYTES_PER_ELEMENT = "p";
    let v27 = 3 | a23;
    v27++;
    const v29 = a22 / a24;
    v29 % v29;
    a23 < Float32Array;
    const o35 = {
        n(a33, a34) {
            return v26;
        },
    };
    return a24;
}
for (let v36 = 0; v36 < 625; v36++) {
    f21(Uint8Array, v36);
}
class C38 extends f17 {
    [9] = v15;
    [C38];
    [3112] = v9;
    get e() {
    }
}
const v42 = [-9223372036854775807,-31958,-437619447,54990,9007199254740992,-9223372036854775807,8,128];
const v43 = [1.7976931348623157e+308,1.0,1000.0];
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a47;
    } catch(e49) {
    }
    try {
        this.c = 503467484;
    } catch(e50) {
    }
    try {
        a47.d = v43;
    } catch(e51) {
    }
}
function F52() {
    if (!new.target) { throw 'must be called with new'; }
}
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v58 = 0; v58 < 10; v58++) {
        "p" + "p";
    }
    const t63 = v42.constructor;
    new t63(F52, a56);
}
const v63 = new F54();
const t67 = v63.constructor;
new t67();
