class C3 {
    static #f;
    #b;
    constructor(a5) {
        this[a5] = 4294967296;
        this[7] = this;
    }
    0;
    [4294967296];
    117;
    [-2];
}
const v6 = new C3(4294967296);
const v7 = new C3(9223372036854775807);
const v8 = new v7(v7);
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v8;
    } catch(e13) {
    }
}
new F9(C3, v6);
const v15 = new F9(v7, 9223372036854775807);
new F9(v15, v8);
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
class C20 extends Map {
}
class C22 {
    static o(a24, a25, a26, a27) {
        -10 >> 9223372036854775807;
        const v31 = !9223372036854775807;
        Math.max(9223372036854775807);
        Math.atanh(v31);
        !v31;
        return a24;
    }
    static {
        const v36 = [601759695];
        const v37 = [1073741824,1073741823,1376142744,1073741825];
        function f38(a39, a40, a41, a42) {
            try { new a39(); } catch (e) {}
            ("65535").lastIndexOf(128, 65536);
            -0.0 << a41;
            function f49() {
                return a39;
            }
            const v51 = new Int8Array();
            const v54 = BigUint64Array * 536870887;
            Number.isNaN(v54 ** v54);
            function f58(a59, a60) {
            }
            try { f58(); } catch (e) {}
            const v62 = v51.buffer;
            const v63 = v62.__defineGetter__;
            try { v63(); } catch (e) {}
            Object.defineProperty(v62, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f49);
            let v66;
            try { v66 = v37["find"](..."find", a42, ...v36); } catch (e) {}
            const o67 = {
            };
            o67.e = this;
            o67.e = o67;
            v66 <= a41;
        }
        for (let v69 = 0; v69 < 5; v69++) {
            f38(this, v69, v69);
        }
    }
}
