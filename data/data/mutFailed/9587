class C3 {
    static a;
    #h = "R5ag";
    valueOf(a5) {
        const t4 = "R5ag";
        t4[7] = this;
        let v6;
        try { v6 = new a5(a5, "n", a5, this, this); } catch (e) {}
        a5 >>> v6;
        return v6;
    }
    static 851 = -1.0;
    static {
        let v9;
        try {
        const t0 = -1.0;
        v9 = new t0(this, this, ...-1.0, ..."R5ag");
        } catch (e) {}
        v9[1] = this;
    }
    e = "R5ag";
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
function f13() {
    return C3;
}
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a16;
    } catch(e19) {
        class C20 {
        }
        const v21 = new C20();
        for (let v22 = 0; v22 < 25; v22++) {
            v21["p" + v22] = v22;
        }
    }
}
new F14(v11, v12, v11);
new F14(v12, v10, v11);
new F14(v10, v11, v12);
class C28 extends f13 {
    o(a30, a31, a32) {
        try {
            super.sinh(a30, v12, this);
        } catch(e34) {
        }
        try {
            this.fuck(-38347n, -38347n, v10, 5.1787980311987845);
        } catch(e38) {
        }
        return a30;
    }
    #f = -1.0;
}
new C28();
new C28();
new C28();
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(); } catch (e) {}
    typeof Float32Array;
}
const v52 = new F42();
new F42(F42, v52, F42, v52);
