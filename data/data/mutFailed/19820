-Infinity;
const t0 = 1397;
new t0(1397);
new Array(0);
new BigUint64Array(4096);
new Int16Array(162);
new Int16Array(11);
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v24 = 0; v24 < 25; v24++) {
    function f25() {
        return f25;
    }
    const v26 = [601759695];
    const v27 = [1073741824,1073741823,1376142744,1073741825];
    function f29(a30, a31, a32, a33) {
        function f35() {
            return a31;
        }
        try { new f35(); } catch (e) {}
        f25();
        const v39 = new Int8Array();
        const v41 = new Uint32Array();
        v41.c = v41;
        [v41];
        const v45 = BigUint64Array * 536870887;
        ~(v45 ** v45);
        function f48(a49, a50) {
            return a31;
        }
        f48();
        const v52 = v39.buffer;
        try { v52.slice(F19, F19); } catch (e) {}
        Object.defineProperty(v52, "constructor", { writable: true, configurable: true, value: Date });
        const v55 = new Int8Array();
        try { v55.lastIndexOf(-1073741824); } catch (e) {}
        v52.slice(2147483648);
        %OptimizeFunctionOnNextCall(f35);
        let v59;
        try { v59 = v27["find"](..."find", a33, ...v26, ...v27, ...522675525n); } catch (e) {}
        const t41 = 1.651660759518163e+308;
        t41(a33);
        const o62 = {
        };
        v59 <= a32;
        return arguments;
    }
    for (let v64 = 0; v64 < 5; v64++) {
        f29(f25, v64, 11, v27);
    }
}
