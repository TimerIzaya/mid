new Float64Array(0);
29 + 29;
Float64Array.name = Float64Array;
const v6 = new Float64Array(29);
function f7(a8) {
    v6[6];
    const v11 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
    const v12 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
    function F13(a15, a16, a17) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a15;
        } catch(e18) {
        }
        try {
            this.b = a17;
        } catch(e19) {
        }
    }
    const v20 = new F13(v11, 5, v12);
    return v20;
}
Object.defineProperty(v6, "toString", { writable: true, configurable: true, enumerable: true, value: f7 });
v6[21] = v6;
let v21 = 85;
v21--;
new Uint16Array(v21);
const v26 = 51564931 >>> 51564931;
v26 | v26;
-1972742400 - -1972742400;
const v31 = /(x)(x)(x)\1xyz??a.a{1,2}?/gvdmy;
v31.e = v31;
for (let [i35, i36] = (() => {
        0 + 0;
        return [0, 10];
    })();
    i36--, i36 / i36, i35 << i35, i35 < i36;
    !(i36 != i36), i35++) {
    i35 - i35;
    i36 - i36;
    i35 * i35;
    let v51 = -i36;
    v51++;
}
