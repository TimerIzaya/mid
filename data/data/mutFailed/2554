const v0 = [1485491959,-15,-9223372036854775808,31736,2032330951,-13047,10000,-1086450433,-62746,-256];
const v1 = [-256];
const v2 = [-564433034,-15,4294967297,10];
function f3(a4, a5) {
    const o10 = {
        1: a5,
        ...v2,
        "a": a5,
        n(a7) {
            for (const v8 in a5) {
                super[v8] = v8;
            }
            try {
                v1.__proto__ = this;
            } catch(e9) {
            }
            return this;
        },
    };
    o10[Symbol.match] = f3;
    return o10;
}
const v13 = f3(v1, v2);
v13[0];
const v15 = f3(v1, v1);
f3(v0, v1);
-1783286040 >>> -1783286040;
-43916 >> -43916;
class C22 extends f3 {
    m(a24, a25, a26) {
        super[-1783286040];
        try {
            v2.__proto__ = v2;
        } catch(e28) {
            function f29() {
                function f30(a31, a32, a33, a34) {
                    return a31;
                }
                f29 != f30;
                return f29;
            }
            %PrepareFunctionForOptimization(f29);
            f29();
            %OptimizeFunctionOnNextCall(f29);
            f29();
        }
        return a25;
    }
    d = f3;
    1958779056 = v15;
    a = v13;
}
new C22();
const v39 = new C22();
v39[1];
const v41 = new C22();
try { v41.d(-1783286040, v39); } catch (e) {}
const v43 = [104762.14753807266,-279097.1642774454,5.0,1.0];
try { v43.group(v43); } catch (e) {}
const v45 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
v45.toString = f3;
22 + 22;
const v51 = new Uint8Array(22);
const v54 = new Int32Array(3289);
function f55(a56) {
    -4.380315352541508e+307 >> 129;
    return -4.380315352541508e+307;
}
v54[Symbol.toPrimitive] = f55;
const v63 = [v54];
const v65 = Reflect.apply(v43.join, v51, v63);
try { v65.matchAll(v39); } catch (e) {}
class C67 extends Int32Array {
    [Set] = true;
    [v45];
}
try { new C67(); } catch (e) {}
new C67();
