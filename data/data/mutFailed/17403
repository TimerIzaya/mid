const v0 = [];
class C4 {
    get c() {
        try {
            v0.__proto__ = this;
        } catch(e6) {
        }
        return -9007199254740990;
    }
    [-2] = -43202;
    6;
    static [61437] = -43202;
    1 = -9007199254740990;
}
let v10;
try { v10 = C4.call(v0); } catch (e) {}
const v11 = new C4();
const v12 = new C4();
v12.d = v11;
const v13 = new C4();
v13[6];
-(-1630849303);
-47522 >>> -47522;
class C21 {
    constructor(a23, a24, a25) {
        a23 + a23;
        a24[6] = a24;
        function F27(a29, a30, a31) {
            if (!new.target) { throw 'must be called with new'; }
            const v32 = this?.constructor;
            try { new v32(this, a30, this); } catch (e) {}
            a29[6] = a29;
            a30 >>> a30;
            try {
                this.d = a30;
            } catch(e35) {
            }
        }
        new F27(a25, 268435440, a24);
        new F27(C4, a23, v11);
        new F27(v13, -47522, a24);
    }
    #g;
    #f;
    a = -43202;
}
const v39 = new C21(-43202, v12, v11);
new v39(-9007199254740990, v11, v11);
new C21(61437, C21, v11);
v10.length = Array;
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
class C45 extends Map {
}
try { new Date(v12, -47522, Array, -47522, Array, Array, v12); } catch (e) {}
class C48 {
    static {
        const v50 = [601759695];
        const v51 = [1073741824,1073741823,1376142744,1073741825];
        function f52(a53, a54, a55, a56) {
            a54 >> a54;
            try { new a53(); } catch (e) {}
            a55 << a55;
            function f60() {
                return v39;
            }
            try { f60(); } catch (e) {}
            const v63 = new Int8Array();
            try { new BigUint64Array(Date, Map, v63); } catch (e) {}
            const v67 = BigUint64Array * Array;
            const v68 = v67 ** v67;
            Number.MIN_SAFE_INTEGER;
            Number.isNaN(v68);
            function f72(a73, a74) {
            }
            try { f72(); } catch (e) {}
            const v76 = v63.buffer;
            try { v76.slice(v11, v50); } catch (e) {}
            const v78 = v76.__defineGetter__;
            try { v78(); } catch (e) {}
            Object.defineProperty(v76, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(v67);
            "find" == "find";
            let v82;
            try { v82 = v51["find"](..."find", a56, ...v50); } catch (e) {}
            const o83 = {
            };
            o83.e = this;
            o83.e = o83;
            v82 <= a55;
        }
        for (let v85 = 0; v85 < 5; v85++) {
            f52(this, v85, v85);
        }
    }
}
try { new C48(); } catch (e) {}
