new BigInt64Array(1091060517);
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a9;
}
class C12 {
    static ["256"] = "EPSILON";
    #c;
    constructor(a14, a15, a16) {
        super("256", a16);
        const v17 = new BigInt64Array();
        for (let v18 = 0; v18 < 25; v18++) {
            v17["p" + v18] = v18;
        }
    }
    static #b = "EPSILON";
    static valueOf(a22, a23) {
        for (let v24 = 0; v24 < 32; v24++) {
            this["p" + v24] = v24;
        }
        return "EPSILON";
    }
    [21508] = "EPSILON";
    h = "EPSILON";
}
try { C12.valueOf("EPSILON", C12); } catch (e) {}
const v28 = new C12();
const v29 = new C12();
v29[21508] = v29;
const v30 = new C12();
function f31() {
    return 21508;
}
f31.caller = f31;
const v32 = [-184991922,2147483647,-22975,2040498746,257,1,4607,-268435456,1180139263,1585953387];
try { v32.findLast(v32); } catch (e) {}
[10,3,48371,52752,1000];
[-4096,0,-959473436,-10,-57247762,-1,32891,129];
[16,-4294967297,6,-964090017,-2,-65537];
const v37 = [-9223372036854775808,4294967296,-268435456,4096,30054,618994789,-65536,13,1619132208];
[184791.33719420154,-2.220446049250313e-16];
[5.0,-8.518540808193055e+307,-Infinity,1000000000000.0,4.0,0.9517088715881594];
const v40 = /Ee+/gsy;
try { new Int8Array(f31, f31, v28); } catch (e) {}
Int8Array.b = v37;
class C44 {
}
const v45 = /(x)(x)(x)\1/uis;
const o52 = {
    4294967295: v40,
    [v45](a47, a48, a49, a50) {
        super.test();
    },
};
function f53() {
    try { new Int8Array(21508, Int8Array, "EPSILON"); } catch (e) {}
    v30[268435440] = f53;
    new Float64Array(81);
    class C62 {
        static #d;
        set b(a64) {
            Symbol.search;
        }
        static ["Xkz0W"] = "Xkz0W";
        8;
        d;
    }
    new C62();
    try { BigInt64Array.from(1); } catch (e) {}
    new BigInt64Array(1);
    Math.random();
    function F73(a75, a76, a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
        a78[1][1];
    }
    new BigInt64Array(1726);
    gc.caller = gc;
    gc();
    return Int8Array;
}
%PrepareFunctionForOptimization(f53);
const v86 = f53();
v86.BYTES_PER_ELEMENT = v86;
