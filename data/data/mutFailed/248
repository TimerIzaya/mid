const v0 = [2052327709,11784,-53287,256,-6,2,-33482];
[5,268435441,256,-4294967296,18530,10,-2147483648];
const v2 = [4294967297,13793];
const v3 = [0.13234330556288498,Infinity,7.587757193644823,-7.220045938303315,0.7511477829784367,NaN,1e-15,-1.128222205760502e+308,7.831822942373981e+307,-848291.1750024955];
const v4 = [2.0,5.0,2.2250738585072014e-308,3.0,0.38383618247746787,-2.930632016090359e+307,-716.6478562998923,1000000.0];
const v5 = [-3.0,-399233.9281938606,2.220446049250313e-16];
function f6(a7, a8) {
    const o26 = {
        "f": v4,
        set c(a10) {
            super.g = a7;
            try {
                v2.toString = a10;
            } catch(e11) {
            }
        },
        __proto__: v5,
        p(a13, a14) {
            a8 = v5;
            const v16 = Object.iterator;
            const o25 = {
                [v16]() {
                    let v18 = 10;
                    const o24 = {
                        next() {
                            const v20 = v18--;
                            const v22 = v18 == -455379940;
                            const o23 = {
                                "f": v20,
                                9: v20,
                                __proto__: v3,
                                "d": v4,
                                "a": v18,
                                "done": v22,
                                "value": v18,
                            };
                            return o23;
                        },
                    };
                    return o24;
                },
            };
            return a14;
        },
    };
    return o26;
}
const v27 = f6(v0, v3);
f6(v3, v0);
const v29 = f6(v2, v5);
new Uint32Array(257);
new Uint8Array(3);
try {
    v27.p(v3, 3, v29, /foo|(bar|baz)|quux/gvimy);
} catch(e38) {
}
new Uint16Array(-14);
const o44 = {
    "maxByteLength": 536870889,
};
const v46 = new SharedArrayBuffer(217, o44);
let v48 = new Uint8Array(v46);
v48 &= v48;
function f2(a3, a4) {
    a4?.[65537];
    const o7 = {
        230: 3,
    };
    let v8;
    try { v8 = o7.repeat(); } catch (e) {}
    o7[v8];
    return a4;
}
Float32Array.toString = f2;
let v10 = new Float32Array(3975);
const v13 = new Uint16Array(127);
Object.defineProperty(v13, "toString", { writable: true, configurable: true, enumerable: true, value: f2 });
let v15 = Int16Array;
const v16 = new v15(7);
let v17;
try { v17 = v16.slice(3975, v13); } catch (e) {}
Int32Array[Symbol.toPrimitive] = f2;
const v22 = new Int32Array(161);
v22.BYTES_PER_ELEMENT;
let v24 = 142;
v24--;
const v30 = v16[Int32Array];
try { v17(Int32Array, Float32Array, v30, 9223372036854775807); } catch (e) {}
const v32 = new Float32Array(v24);
let v33;
try { v33 = v32.join(Uint16Array); } catch (e) {}
let v34 = 215;
const v36 = new Uint32Array(v34);
try { Int8Array.from(512); } catch (e) {}
let v43 = v32[v13];
({"byteOffset":v43,"h":v15,"length":v10,} = v16);
v33 - Float32Array;
const v49 = -801967.1747690998 || Float32Array;
Math.pow(-801967.1747690998, v49);
Math.pow(268435439, -801967.1747690998);
-801967.1747690998 || 268435439;
!v49;
16 - 16;
[1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
function f58() {
}
function f59(a60) {
    ++v34;
    function f62() {
        return f62;
    }
    return v24;
}
function f63() {
    return Symbol;
}
function f64(a65) {
    try {
        a65.__proto__ = a65;
    } catch(e66) {
    }
}
Object.defineProperty(f59, "toString", { writable: true, configurable: true, get: f63, set: f64 });
try { f59.toString(); } catch (e) {}
f58.constructor = f59;
const v68 = f58.constructor;
try { v68(v36); } catch (e) {}
const v70 = v68(-21059);
v70 >> v70;
f58();
f58();
const v76 = !(-1600745002 % -1600745002);
v76 || v76;
const v80 = new Int8Array();
try { v80.entries(); } catch (e) {}
const v82 = new Int8Array();
v82[92];
let v84 = v82[161];
v84--;
let v87 = ([-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456]).push();
const v88 = v87++;
const v89 = v88 / v88;
v89 + v89;
const v91 = [-21059];
v91.valueOf = Symbol;
const v92 = v91.groupToMap;
v92.length = v92;
try { v92(); } catch (e) {}
Object.defineProperty(v92, "d", { writable: true, enumerable: true, value: "e35" });
v92.d = v92;
try { v92(); } catch (e) {}
288.9075242979261 | 288.9075242979261;
const v99 = [];
v99.includes();
const v101 = [];
try { v101.findLast("e35"); } catch (e) {}
Object.defineProperty(v101, 2, { configurable: true, value: v15 });
try { v101.find(); } catch (e) {}
let v105 = undefined;
try { v99.flatMap(); } catch (e) {}
const o110 = {
    "execution": "sync",
    "type": "minor",
};
gc(o110);
v101[2] = v101;
const v112 = 2.220446049250313e-16 ^ 2.220446049250313e-16;
v112 === v112;
v105 = v99;
Date.now();
const v116 = Date.now();
v116 ^ v116;
const v118 = new Date();
v118.getUTCMinutes();
v118.setFullYear(-409.5445341345936, 288.9075242979261, v91);
v118.setMonth();
