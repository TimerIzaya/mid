const v3 = /[\cz]/guds;
/ab|c/gudi;
const v5 = /ndvf+/gudmsy;
new BigInt64Array(4);
let v9 = 2779;
v9++;
let v11 = Float32Array;
const v12 = new v11(v9);
const v13 = v12.byteLength;
v5.ignoreCase -= v13;
try {
    const v15 = v12.filter(EvalError, v3);
    try { v15.join(BigInt64Array); } catch (e) {}
} catch(e17) {
}
new Int32Array(906);
function f21(a22) {
    const o23 = {
        9: BigInt64Array,
        "f": a22,
    };
    return o23;
}
const v24 = f21();
function f25(a26, a27, a28) {
    const o29 = {
        185: BigInt64Array,
        ...v24,
    };
    return o29;
}
const v30 = f25(v13, 4, 4);
v30[185] = v30;
class C34 {
    set e(a36) {
        Math.fround();
        Math.ceil();
    }
    m(a41) {
    }
    e;
}
const v42 = new C34();
const v43 = new C34();
new C34();
const v45 = [-4n,"ignoreCase",v42];
[[v43,"number","R"],C34,BigInt64Array,v45];
const v51 = ("NN")["9"];
C34[0] >>= v51;
let v52;
try { v52 = v51(v43, v42, "string"); } catch (e) {}
v11 = v52;
let v53 = 0;
while (v53 < 7) {
    v53++;
}
const v57 = f25(v9, v9, v9);
v57[185] = v57;
const v58 = f25(906, v9, 906);
const v59 = v58();
v59[9] = v59;
f21();
const v61 = v59 >> f25;
v61 & v61;
v58[18] = 1n;
try { Math.fround(v24); } catch (e) {}
-Math.sign(5);
const v69 = 0.0 ^ 5;
v69 != v69;
const v71 = +0.0;
v71 - v71;
function F73() {
    if (!new.target) { throw 'must be called with new'; }
}
F73.e = F73;
try {
    Array(-12302);
} catch(e78) {
    e78.message;
    const v80 = e78.stack;
    try { v80.codePointAt(v24); } catch (e) {}
}
