const v3 = [0.37122871487181996,5.153598338005542,0.06105027567675603,0.34275896408539275,-0.0,5.0];
const v4 = [-Infinity,967.4466798842489,5.0,-1000000000.0,-841.5543189426478,1.7774229495804974,-1000000000.0];
const v5 = [-2.2250738585072014e-308];
v3[65536] |= -1.0;
try {
    v3.d = v4;
} catch(e10) {
}
const v14 = new parseFloat();
class C15 extends parseFloat {
    [parseFloat] = v14;
    static d;
    static #g;
    e = -3;
    [Infinity] = "F";
    f;
    p(a17, a18) {
        try {
            v5.toReversed();
        } catch(e20) {
        }
        return a18;
    }
    [v3] = 0.6224645626913077;
    [1616511491] = -58762;
    static [0.6224645626913077];
    static a = 0.6224645626913077;
}
const v21 = new C15();
const v22 = new C15();
const v23 = new C15(v3, v3);
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
let v27 = -1.5264047652530307e+308;
1000000.0 % 1000000.0;
let v30 = -4096;
try { C15["getTime"](v3, v4, v4, v21, "getTime"); } catch (e) {}
v23[127] &&= v30;
v30 = -3;
let v38 = v27++;
v27++;
-536870912 >>> -(--v38);
Math.log(536870912);
const v44 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v54 = new Uint8Array();
gc();
110 <= 110;
110 + 110;
class C62 extends v22.constructor {
    static [-2] = 110;
    static 257;
}
new C62();
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const v67 = new Date();
const v68 = v67.getUTCDay();
v68 && v68;
let v70 = 127;
v67 * 536870887;
v22 << v22;
-256 || v22;
Math.cosh(v22);
v70 >> v70;
v70++;
function f79(a80, a81) {
    try { a80(f79); } catch (e) {}
    try { a80(BigInt64Array); } catch (e) {}
    a81.constructor(a81);
    return f79;
}
try { new Promise(4096); } catch (e) {}
const v87 = new Promise(f79, Uint8Array);
let v88;
try { v88 = v87.then(); } catch (e) {}
try { v88.then(v44, v54); } catch (e) {}
Uint8Array.length = Uint8Array;
const v91 = new Uint8Array(v70);
function f92(a93, a94) {
    const o95 = {
    };
    o95.g = o95;
    return o95;
}
let v96;
try { v96 = f92(v87, v87); } catch (e) {}
v96.g;
f92.arguments = f92;
for (let v98 = 0; v98 < 25; v98++) {
    v98 - v98;
    const v100 = f92();
    v100.g = v100;
    v100.d = v100;
    Object.defineProperty(v100, v98, { enumerable: true, get: f92, set: f92 });
    8 - 8;
    const v105 = new Int8Array(8);
    try { Reflect.preventExtensions(v100); } catch (e) {}
    Reflect.construct(Uint16Array, [v105]);
    v91[v100] = v100;
    gc.name = gc;
    !("sync" == "sync");
    const o114 = {
        "execution": "sync",
    };
    gc(o114);
}
