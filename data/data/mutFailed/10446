const v0 = [];
class C2 {
    #d;
    [false];
    valueOf(a4) {
        try { new a4(this, this, a4); } catch (e) {}
        return false;
    }
    static f = v0;
    #a;
    a = false;
    static 127 = false;
}
const v6 = new C2();
new C2();
const v8 = new C2();
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v0;
    } catch(e14) {
    }
}
const v15 = new F10(v6, v6);
new F10(v8, C2);
const v17 = new F10(v6, v15);
[560.3764338321384,2.831189514697529,-1.0,1000.0,-2.4858124652164726,1000.0,1000000.0,1000000.0,6.670434684407409e+307,-Infinity];
const v21 = new Uint32Array();
let v22;
try { v22 = Uint32Array.entries(); } catch (e) {}
v21[40];
for (let v24 = 0; v24 < 5; v24++) {
    try { v17(); } catch (e) {}
}
[-2.220446049250313e-16,-146030.0093347557,-759818.7684978913,1000000000000.0,-1.2175538670763404e+307];
const v27 = [];
const v29 = [];
function f30(a31, a32) {
    Reflect.construct(a31, [a31,Reflect], v22);
    return v29;
}
v29.valueOf = f30;
v29[0] = v29;
const v36 = new BigUint64Array(v29);
v36.toString = f30;
v36[v36] = v27;
[4.0];
const v39 = new BigUint64Array();
const v40 = /anVXYFzN(x)(x)(x)\3/gvdms;
try { v39.reduceRight(v40); } catch (e) {}
[-1.7976931348623157e+308,-1.7976931348623157e+308];
