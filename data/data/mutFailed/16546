const v1 = new Date();
const v2 = [332331873,1340053651,170795573,11,1101357224,-22492,268435440,2];
const v3 = [-38877,1681132204,-65535,370805117,118903900];
const v4 = [40295,9,-2147483649,-2147483649,-5,-5];
function f5(a6) {
    const o24 = {
        "c": a6,
        [v2](a8, a9, a10) {
            v2 < this[3826126375];
            /\p{gc=Nd}/uy;
            /O+/guy;
            /\p{gc=Nd}/udimy;
            const o16 = {
                "apply": Date,
                "call": Date,
                "getOwnPropertyDescriptor": Date,
                "ownKeys": Date,
            };
            new Proxy(a6, o16);
            try { a10.toString(Proxy, a10, v1, o16); } catch (e) {}
            this.c ||= a9;
            try { new a9(); } catch (e) {}
            try {
                Date(1960405147);
            } catch(e23) {
            }
            return a9;
        },
    };
    return o24;
}
const v25 = f5(v2);
f5(v4);
f5(v3);
const v31 = [-9223372036854775808,4294967297,1524216812,1583265095,-6,4294967297];
function f32(a33, a34) {
    return v31;
}
v31.then = f32;
const v35 = [6,1000,-505700133];
const o36 = {
};
const v38 = new Proxy(v31, o36);
try {
    const o44 = {
        [v31](a40, a41) {
            try {
                v3.forEach(Date);
            } catch(e43) {
            }
            return f32;
        },
    };
    new Proxy("string", o44);
} catch(e46) {
}
const v47 = Date["caller"];
try { v47["m"]("caller", "m", Date, f32); } catch (e) {}
try {
    Date.parse("split");
} catch(e52) {
}
function f53() {
    return f32;
}
Object.defineProperty(v38, "then", { enumerable: true, get: f53 });
async function* f55(a56, a57) {
    try {
        a56.toString = f53;
    } catch(e58) {
    }
    await f32;
    try {
        yield* v4;
    } catch(e60) {
    }
    return a57;
}
f55("string", v25);
v31["push"](v35);
