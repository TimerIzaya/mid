const v0 = [-239.27829797665993,-1.50611919464347e+308,-2.220446049250313e-16,-632.9683602632508,120.53498297493275,-8.428470463543356,-0.2438043605161475,-132169.68336130038];
function f1(a2) {
    const v4 = Symbol.iterator;
    const o13 = {
        [v4]() {
            let v6 = 10;
            const o12 = {
                next() {
                    v6--;
                    const v10 = v6 == 0;
                    const o11 = {
                        "done": v10,
                        "value": v6,
                    };
                    return o11;
                },
            };
            return o12;
        },
    };
    return o13;
}
const v15 = Symbol.toPrimitive;
v0[v15] = f1;
const v18 = Math.sinh(-3.3474037991793697);
const v19 = [-536870912,-1454443390,-11,536870887];
v19.constructor = Symbol;
v19[4] = v18;
const v22 = v19["splice"](-650191005, -650191005, "splice");
[0.645937108216188,-3.0,0.0];
[-312.61757959480633,4.128550828692376,NaN,1.5253856503065081e+308,1000000000000.0,-1.0474229617911178e+308,Infinity];
try {
    v0.findLast(v22);
} catch(e29) {
}
const t35 = "splice";
t35[v0] = -3.3474037991793697;
let v30 = [-5.034735835956977e+307,-385.25474675985527];
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = this.valueOf().constructor;
    try { new v36(); } catch (e) {}
    --v30;
    Math.imul();
}
const v45 = [WeakSet];
v45[1] = v45;
v45[1];
function f47() {
    const v49 = new Set();
    v49.add(v49);
    return v49;
}
f47();
function f52() {
    function f54() {
        1864489360 << ("c").toLowerCase();
        return 1864489360;
    }
    return v0;
}
let v58 = 10;
for (; v58--;) {
    try {
        delete v30[2278];
        -"a";
    } catch(e65) {
    }
}
function f67() {
    for (let v68 = 0; v68 < 10; v68++) {
        function F70(a72, a73) {
            if (!new.target) { throw 'must be called with new'; }
            this.b = v45;
            this.b = "b";
            this.d = a73;
        }
        const v74 = new F70();
        const o75 = {
            ...v74,
        };
    }
    const o83 = {
        [-4294967297n](a77, a78, a79, a80) {
            eval();
        },
    };
    return f67;
}
%OptimizeFunctionOnNextCall(f67);
const v84 = [f67,f67,f67,f67];
v84[4] = v15;
const v85 = v84.push(-4294967297n);
const v86 = /(M(?:ab|cde)VbD)/vdim;
const o92 = {
    set d(a88) {
        for (let v89 = 0; v89 < 25; v89++) {
        }
        try { this["cos"](); } catch (e) {}
    },
};
f67(v85, v86);
