class C3 {
    toString(a5, a6) {
        a6[a6] = "growable";
        const v8 = a5?.["growable"] instanceof a5;
        super[a6];
        super[v8] = v8;
        [1,9007199254740992,8];
        [10,268435440,1551484050,-9223372036854775808,255,-13,7];
        [-4096,33510,2,-52097];
        return a6;
    }
    #h;
    static 1 = "growable";
    a;
    993;
}
const v13 = new C3();
new C3();
const v15 = new C3();
class C16 extends C3 {
    static #m(a18, a19, a20, a21) {
        for (let v22 = 0; v22 < 32; v22++) {
            const v24 = new Float64Array();
            const v26 = new BigInt64Array();
            try {
                v24.reduce(v26);
            } catch(e28) {
            }
            a21["p" + v22] = v22;
        }
        return 895169.4626848982;
    }
    static g;
    [C3] = v15;
    toString(a32, a33) {
        super[a33];
        Math.atan(this);
        Math.pow(this, -1);
        !-1;
        !-826.7049980708367;
        return Math.floor(this);
    }
}
C16.length = C16;
const v43 = new C16();
const v44 = new C16();
const v45 = v44?.constructor;
try { new v45(); } catch (e) {}
const v47 = new C16();
const o48 = {
};
v15.g = -128;
class C50 {
}
const v51 = C50.call;
let v52;
try { v52 = v51(v51, C50, v51, v51, v51); } catch (e) {}
const v53 = new C50();
const v55 = Date();
let v56 = -1073741824;
v56--;
const v58 = [601759695];
const v59 = [1073741824,1073741823,1376142744,1073741825];
function f60(a61, a62, a63, a64) {
    let v65;
    try { v65 = a61(); } catch (e) {}
    try { a64.map(v65, a64); } catch (e) {}
    try { a64.toLocaleString(); } catch (e) {}
    function f68() {
    }
    try { f68(); } catch (e) {}
    new Int8Array();
    try { Uint32Array(Uint32Array, f68, v53); } catch (e) {}
    const v74 = new Uint32Array();
    let v75;
    try { v75 = v74.join(v52); } catch (e) {}
    const v77 = ([v75,v75,v75,v75]).find;
    try { v77(-128); } catch (e) {}
    const v81 = BigUint64Array * 536870887;
    const v83 = ~(v81 ** v81);
    const v84 = a62.buffer;
    try { v84.slice(v55); } catch (e) {}
    try { v84.slice(); } catch (e) {}
    Object.defineProperty(v84, "constructor", { writable: true, configurable: true, value: Date });
    const v87 = new Int8Array(v59);
    try { v87.includes(v83); } catch (e) {}
    try { v87.lastIndexOf(v56); } catch (e) {}
    v84.slice();
    %OptimizeFunctionOnNextCall(f68);
    try { v59["find"](..."find", a64, ...v58, ...v59); } catch (e) {}
    const v93 = typeof -128;
    v93.codePointAt;
    v93 === "number";
    return v58;
}
f60();
function f98() {
    return 0.11733359897575113;
}
function f99(a100, a101) {
    a101[993];
    const v105 = new Uint8Array(1010);
    const o106 = {
        268435439: Uint8Array,
        ...v105,
    };
    const o136 = {
        "a": a100,
        set g(a108) {
            v44[1];
            const v111 = new Float32Array(Float32Array);
            class C113 {
            }
            const v114 = new C113();
            const v115 = [-5.0];
            function F118(a120, a121) {
                if (!new.target) { throw 'must be called with new'; }
                const v122 = v114.constructor;
                try { new v122(v114, v115); } catch (e) {}
                a121.__proto__;
            }
            new F118(v111, Uint16Array);
            new F118(-2.220446049250313e-16, 1000000000.0);
            super.b = v47;
        },
        set f(a128) {
            Object.defineProperty(a101, "f", { get: f98, set: f98 });
            a101 ** v13;
            const o133 = {
                "apply": f98,
                "call": f98,
                "construct": f98,
                "defineProperty": f98,
                "deleteProperty": f98,
                "get": f98,
                "getPrototypeOf": f98,
                "isExtensible": f98,
                "ownKeys": f98,
                "set": f98,
                "setPrototypeOf": f98,
                ...v105,
                valueOf(a131, a132) {
                    return this;
                },
                ...v105,
            };
            new Proxy(v47, o133);
        },
    };
    return o136;
}
f99(f99(v43, v15), v15);
f99(v44, v43);
function f141(a142, a143) {
    return 4;
}
f141.caller = f141;
function f144() {
    const o152 = {
        "type": "growable",
        "execution": "growable",
        get a() {
            class C146 {
                constructor(a148, a149) {
                }
            }
            eval();
        },
    };
    o152.valueOf = f141;
    return o152;
}
const v153 = f144();
try { v153.valueOf(f98, v44); } catch (e) {}
const v155 = f144();
([Uint8Array])["indexOf"](v153, v155);
