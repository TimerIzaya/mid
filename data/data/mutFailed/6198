const v2 = new Uint8ClampedArray(9);
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const t2 = 16;
const v5 = new t2(16);
const v6 = v5?.constructor;
let v7;
try { v7 = new v6(v5, Uint32Array, 16); } catch (e) {}
try { v7.toString(); } catch (e) {}
131 + 131;
-131;
let v13;
try { v13 = Int8Array.from(v2); } catch (e) {}
new Int8Array(131);
-16 & -16;
let v18 = 1205456208;
v18--;
Float64Array.name;
Float64Array[0] = Float64Array;
const v22 = new Float64Array(v13, Float64Array, Float64Array);
const v23 = v22?.toSorted;
try { new v23(v5); } catch (e) {}
172 / 172;
const v30 = [138.3846677150391];
v22[138.3846677150391] = 1000000000.0;
const v31 = [1868255996,1,2,9007199254740992];
try { v31.includes(undefined, -4934n); } catch (e) {}
v30.length += 172;
