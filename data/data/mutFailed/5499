class C3 {
    constructor(a5, a6) {
        try { a5(a5, C3, "number"); } catch (e) {}
        a5 > a6;
    }
    9 = C3;
    static a;
    o(a10) {
        [-12,"number",[-12,[this,-12,"boolean"],"boolean","number"],-12];
        return C3;
    }
}
const v14 = new C3("number", -12);
new C3(C3, C3);
new C3(v14, "number");
new Uint8Array(2706);
const v22 = new Uint8ClampedArray(853);
new Uint8ClampedArray(v22, 853, -12);
const v26 = new BigInt64Array(115);
new Float32Array(10);
new Uint32Array(257);
let v34 = 0;
while (v34 < 6) {
    try { Uint32Array(Float32Array, ..."number", 2706, ...v26, ..."number"); } catch (e) {}
    new WeakSet("number");
    v34++;
}
new BigInt64Array(2706);
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
ReferenceError.captureStackTrace(F43);
