const v0 = [];
class C1 {
    1338;
    set g(a3) {
        %VerifyType(this);
        %VerifyType(this);
        v0.length %= a3;
        v0[10000] = this;
    }
    static 5;
    2520 = v0;
}
const v5 = new C1();
const v6 = new C1();
function f7(a8, a9) {
    try {
        v6.length = 2;
    } catch(e11) {
    }
    return a9;
}
v6[Symbol.toPrimitive] = f7;
const v14 = new C1();
-4294967296 / -4294967296;
12 - 12;
function f20(a21, a22, a23, a24) {
    Object.defineProperty(a21, Symbol.toPrimitive, { writable: true, enumerable: true, value: f7 });
    a24 | a24;
    const o28 = {
        [12]: v5,
        "d": a24,
        [a21]: a22,
        "f": 12,
        "b": v5,
        __proto__: v6,
        ...v14,
        "e": v6,
        [v0]: a21,
        "h": a23,
    };
    function f29() {
        return f7;
    }
    function f30(a31) {
        const v34 = [-21696350,-6,2,9007199254740991];
        function F35(a37, a38, a39) {
            if (!new.target) { throw 'must be called with new'; }
            const v42 = new Float32Array(this, a39, a39);
            const v44 = new Uint8Array(268435440);
            new Uint8ClampedArray(129);
            v44[6] = v42;
        }
        new F35(v34, -1000000000000.0, -2.2250738585072014e-308);
    }
    Object.defineProperty(o28, Symbol.toPrimitive, { get: f29, set: f30 });
    o28.d;
    return o28;
}
const v52 = f20(v0, 12, 12, -9223372036854775807);
function f53(a54, a55) {
    Uint8Array.prototype = Uint8Array;
    return Uint8Array;
}
v52.toString = f53;
f20(v52, -4294967296, -9223372036854775807, -9223372036854775807);
f20(12, -4294967296, f20, -4294967296);
const v60 = new Uint8Array();
const t67 = [65535,9223372036854775807,2101773358,536870888,536870912,7];
t67.__proto__ = v60;
