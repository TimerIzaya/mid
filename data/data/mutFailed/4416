function f0() {
    const o10 = {
        "b": -6042,
        set f(a5) {
            a5[Symbol.match] = this;
            try {
                super.m();
            } catch(e9) {
            }
        },
        "a": -536870912,
        "f": -6042,
        "e": -6042,
        __proto__: -6042,
        "d": -6042,
    };
    return o10;
}
const v11 = f0();
const v12 = f0();
const v13 = v11();
function f14(a15, a16) {
    const o24 = {
        3430: v12,
        "c": a15,
        "h": a15,
        "g": v13,
        "d": v11,
        10: v13,
        get e() {
            try {
                this.fuck(-12, v13, -12);
            } catch(e20) {
            }
            return this;
        },
    };
    return a15;
}
f14(v12, v11);
f14(v13, v13);
const v27 = f14(v11, v13);
class C31 {
    static toString(a33, a34, a35, a36) {
        try {
            new f14(a33, a33);
        } catch(e38) {
        }
        return v11;
    }
    static valueOf(a40, a41) {
        try {
            new Uint8Array();
            function F44(a46, a47, a48, a49) {
                if (!new.target) { throw 'must be called with new'; }
                const v50 = this.constructor;
                try { new v50(); } catch (e) {}
                typeof Float32Array;
            }
            const v54 = new F44();
            new F44(F44, v54, F44, v54);
            f0();
        } catch(e57) {
            new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
            const v60 = /(?:a*)+q(?<a>.)/guds;
            function f61(a62) {
                a62.dotAll = a62;
                const o66 = {
                    set b(a64) {
                    },
                    get d() {
                        return a62;
                    },
                    __proto__: v60,
                };
                return o66;
            }
        }
        return v27;
    }
    static b = v13;
}
new C31();
new C31();
new C31();
const v72 = new Uint8Array(6);
function f73() {
    const o74 = {
    };
    return o74;
}
function f75(a76, a77) {
    return f75;
}
const v80 = ["function",v72];
const o81 = {
    "arguments": v80,
    "type": "function",
};
new Worker(f75, o81);
