const v0 = [-7.758956458046439e+306,-1.0,-2.2250738585072014e-308,0.0,0.7388383731967221];
const v1 = [5.0,0.9321231321365272,1.0,-1.0,Infinity,5.0,1e-15,200159.40675783483,-1000000000.0,-792391.4698498906];
[-1000000000000.0,-813924.5606427991,-1000000000.0,-8.703850217656556e+307,-Infinity,-4.0,-5.110235538347312,-1000000000.0];
try { new Uint32Array(v0, Uint32Array, v0); } catch (e) {}
const v6 = new Uint32Array(240);
1 & 1;
new Int16Array(1);
let v11 = 3526;
const v12 = v11--;
function f14() {
    function f15(a16) {
        class C18 extends Date {
        }
        return C18;
    }
    return f15;
}
function f19(a20) {
    v6[a20] = v12;
}
Object.defineProperty(Uint8ClampedArray, Symbol.iterator, { configurable: true, get: f14, set: f19 });
const v23 = new Uint8ClampedArray(v11);
function f24(a25) {
    return "m";
}
v23[Symbol.toPrimitive] = f24;
v23[174] = v23;
class C31 extends Uint8ClampedArray {
    static #valueOf(a33, a34) {
        a33[31] = Uint8ClampedArray;
        v23[a34] = v6;
        new Int32Array(1000);
        new Uint16Array(160);
        const v43 = new Uint16Array(10);
        return v43;
    }
    static #h = v1;
}
new C31();
const v45 = new C31();
new C31();
const v47 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { Uint32Array.from(C31); } catch (e) {}
const v51 = new Uint32Array();
const v53 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v54 = [601759695];
const v55 = [1073741824,1073741823,1376142744,1073741825];
function f57(a58, a59, a60, a61) {
    function f62(a63) {
        try { a60(a59, v0, a63, Uint32Array); } catch (e) {}
        new WeakMap();
        return a60;
    }
    a61[Symbol.species] = f62;
    function f70() {
        let v73 = Float64Array;
        try { new v73("Vre", v45, arguments); } catch (e) {}
        v73 = a59;
        b = v54;
        const v75 = v47.length;
        try {
            v55.forEach(a59);
        } catch(e77) {
        }
        const v78 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        try { new Symbol(); } catch (e) {}
        const v81 = Symbol.toPrimitive;
        const o87 = {
            toString(a83, a84) {
                const v85 = a61 && a59;
                a83 *= v81;
                v85 <= v78;
            },
        };
        const o112 = {
            "c": -4294967297n,
            [522675525n](a90, a91) {
            },
            "c": v54,
            valueOf(a93, a94) {
            },
            [v75](a96) {
            },
            [-1]: 2684,
            1073741824: v51,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [-4294967297n](a98, a99, a100, a101) {
                class C103 extends Date {
                    static get c() {
                        eval();
                    }
                }
                for (let v107 = 0; v107 < 5; v107++) {
                    continue;
                }
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v53,
            set b(a109) {
            },
            256: a61,
            m(a111) {
            },
            ...v54,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            5: -4294967295,
            6: -268435456,
        };
    }
    f70();
    const v115 = new Int8Array();
    try { v115.values(); } catch (e) {}
    const v117 = v115.buffer;
    v117.constructor = f57;
    v117.slice(2147483648);
    %OptimizeFunctionOnNextCall(f70);
    let v121;
    try { v121 = v55["find"](..."find", a61, ...v54, ...v55, ...522675525n); } catch (e) {}
    v121 <= a60;
    return arguments;
}
function f123() {
    return ("symbol").normalize("NFD");
}
f57[Symbol.species] = f123;
for (let v129 = 0; v129 < 10; v129++) {
    f57();
}
%OptimizeFunctionOnNextCall(f57);
const v131 = f57();
try { v131.callee(2684, Uint32Array, Uint32Array, f57); } catch (e) {}
