function f3() {
    return -0.0;
}
-1 + -1;
-65536 + -65536;
function f9(a10, a11, a12, a13) {
    a12[Symbol.toPrimitive] = f3;
    a10 + a10;
    a12--;
    a13 % a13;
    const v21 = [-65536];
    v21.push(Reflect);
    [v21];
    const o31 = {
        "h": a10,
        valueOf(a25, a26) {
        },
        get d() {
        },
        n(a29, a30) {
            return -65536;
        },
        ...a12,
        "a": -361878.9300406411,
        "e": a11,
        512: a11,
        ...a12,
        "d": a12,
        ...a12,
        "b": -8.254222617953861e+307,
        "f": -65536,
        __proto__: a12,
        "c": a11,
        "g": -0.0,
        [-0.0]: a10,
    };
    o31[512];
    return o31;
}
const v33 = f9(5, 5, -65536, -8.254222617953861e+307);
const v34 = f9(-65536, -1, -65536, -0.0);
v34.g = v34;
const v35 = f9(-1, -1, v34, -8.254222617953861e+307);
class C36 {
    static f;
    #n(a38, a39, a40, a41) {
        new WeakSet();
        return (a39 > v33) << v35;
    }
    1024 = -65536;
    static 1024;
    static a;
    #e;
    [-361878.9300406411] = f3;
}
new C36();
const v48 = new C36();
const v49 = v48?.constructor;
try { new v49(); } catch (e) {}
const v51 = new C36();
v51[1024];
const v53 = [601759695];
const v54 = [427812215,61195,-2147483647,4096,-2147483647,30905];
([-1300791131,33477,0,5,-48254,14,4294967295,545422795]).push;
-65536 - -65536;
let v59 = 0;
v59++;
function f61(a62, a63, a64, a65) {
    a63.groupToMap = -361878.9300406411;
    a64.g = -1;
    try { a63.groupToMap(a63); } catch (e) {}
    function f67() {
        const o78 = {
            "h": -1073741824,
            "g": v59,
            [-361878.9300406411](a72, a73) {
            },
            268435441: v54,
            get d() {
            },
            ..."Vre",
            valueOf(a76, a77) {
                return v54;
            },
            ..."Vre",
            "c": a65,
            5: -1073741824,
            6: -268435456,
        };
        return a65;
    }
    f67();
    %OptimizeFunctionOnNextCall(f67);
    let v81;
    try { v81 = v54["find"](..."find", a65, ...v53, ...v54, ...522675525n); } catch (e) {}
    v81 <= a64;
    return a64;
}
function f83(a84, a85) {
    const v86 = f61 ^ a85;
    try {
        f3();
    } catch(e88) {
    }
    return v86;
}
Object.defineProperty(f61, Symbol.toPrimitive, { configurable: true, value: f83 });
const v91 = f61(v54, v54, v53, 522675525n);
v91.g = v91;
for (let v92 = 0; v92 < 5; v92++) {
    false || false;
    f61(v53, v92, false, v92);
}
%OptimizeFunctionOnNextCall(f61);
const v96 = f61(522675525n, v53, f61, v91);
v96[Symbol.toPrimitive] = f61;
try { v96(v91, v33, f61, f61); } catch (e) {}
