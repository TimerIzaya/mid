const v6 = new Int32Array(4);
let v7;
try { v7 = v6.with(466.05068048757175, 2.0); } catch (e) {}
const v10 = new Uint16Array(v7);
try { new Uint8ClampedArray(v10, 466.05068048757175, Uint16Array); } catch (e) {}
new Uint8ClampedArray(61);
function f15() {
}
[9007199254740990,-16,376821973,268435456];
const v17 = v7[1];
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f15;
    let v20;
    try { v20 = this.constructor(); } catch (e) {}
    61 >>> 4294967296;
    this.b = 4294967296;
    try {
        function F23() {
            if (!new.target) { throw 'must be called with new'; }
            const v25 = this?.constructor;
            try { new v25(); } catch (e) {}
        }
        const t23 = F23.prototype;
        const v28 = new t23();
        v28.length;
        const v30 = new F23();
        const v31 = v30.__defineSetter__;
        try { v31(); } catch (e) {}
        function f33(a34, a35) {
            const o36 = {
                "e": v28,
            };
            return v20;
        }
        const v37 = f33();
        const v38 = f33();
        function f39() {
            return f33;
        }
        const v40 = f39?.constructor;
        try { new v40(v38); } catch (e) {}
        f39.b = v17;
        f39.b = f39;
        Float32Array.name = Float32Array;
        const v44 = new Float32Array();
        try { v7.entries(); } catch (e) {}
        for (const v46 of v44) {
            v46 >>> v46;
            Object.defineProperty(v37, Float32Array, { configurable: true, enumerable: true, get: f33, set: v46 });
        }
        this.g = 4294967296;
    } catch(e48) {
    }
    this.f = 4294967296;
}
new F18();
new F18();
new F18();
