let v3 = /HoP/gmy;
const v4 = /\p{Changes_When_NFKC_Casefolded}/ud;
const v5 = /(?<!a)/gviy;
v3 = v5;
let v6;
try { v6 = v5(v4, v4, v3, 5n, 65536n); } catch (e) {}
try {
    v4.e = v3;
} catch(e7) {
}
const v9 = -53091n;
let v11 = 1250291645n;
try {
    v5.valueOf = v6;
} catch(e12) {
}
try { new v6(); } catch (e) {}
v11++;
128 & 128;
Int32Array.prototype = Int32Array;
let v18;
try { v18 = new Int32Array(Int32Array, v11, v11); } catch (e) {}
try { v18.indexOf(128); } catch (e) {}
const t23 = 5n;
new t23(128);
-v4;
const v23 = 16 % 16;
new BigInt64Array(16);
const v28 = new Int32Array(659);
try { v28.join(Int32Array); } catch (e) {}
try { new Map(); } catch (e) {}
let v32;
try { v32 = new v9(); } catch (e) {}
const v33 = v32?.constructor;
try { new v33(); } catch (e) {}
const v35 = new v28();
const v36 = v35.values();
try { (659).next(); } catch (e) {}
let v38;
try { v38 = v36.next(); } catch (e) {}
v38.value = v38;
const v41 = new Uint8Array(268435440);
try { v41.filter(v23); } catch (e) {}
