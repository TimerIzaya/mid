const v0 = -Infinity;
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    a8--;
    a10 - a10;
    try {
        this.c = a9;
    } catch(e13) {
    }
}
const v14 = F6?.constructor;
try { new v14(F6); } catch (e) {}
new F6(-1, 64, -1);
new F6(64, 64, 1000.0);
new F6(29182, 64, -1);
new Set();
try { Int8Array.call(v0); } catch (e) {}
new Int8Array(841);
102 % 102;
BigUint64Array.length;
new BigUint64Array(102);
Int32Array.name = Int32Array;
const t22 = 841;
new t22(2);
try { Int8Array.findLast(29182); } catch (e) {}
for (let v34 = 0; v34 < 5; v34++) {
    function f35() {
        for (let i38 = 0, i39 = 10;
            (() => {
                const v40 = 841 < i39;
                !v40;
                return v40;
            })();
            (() => {
                const v44 = i38++;
                v44 >> v44;
            })()) {
        }
        return v34;
    }
    f35.length;
    f35();
    %OptimizeFunctionOnNextCall(f35);
}
