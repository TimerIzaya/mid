const v1 = new Map();
[-1000000000000.0,-4.0,0.7386578105848175];
const v3 = [2.2250738585072014e-308,982479.974607646,-1.0];
const v4 = [1000000000000.0,1.0868375391767542e+308,0.17899487962179028,1.090061820976045e+308,-2.0,1000.0,-2.2250738585072014e-308,-555902.2100231948];
[173.63378271652505,8.516479999613375e+307,470784.9775518258,-136399.60251297522,6.225586798919785,1000000.0,896.9884138512739,4.0,0.32332362838491335];
const v6 = [1.7976931348623157e+308,1.7976931348623157e+308];
const v7 = [1000.0,692660.1799232333,0.6952237377997482,2.220446049250313e-16,-1000.0,0.6385834375495084,0.0,-1.7976931348623157e+308,-1000000000.0,-6.47493036213985e+307];
function f11(a12, a13, a14, a15) {
    const v16 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
    const v17 = new Map(v1);
    ++a15;
    with (v16) {
        length | length;
    }
    new Int8Array();
    const v26 = new Int8Array();
    f11(v17, a14, v17, v7);
    %PrepareFunctionForOptimization(f11);
    f11(v17, a14, v17, v7);
    f11(v17, a14, v17, v7);
    %OptimizeMaglevOnNextCall(f11);
    f11(v17, a14, v17, v7);
    for (const v31 in v26) {
    }
    function F32(a34) {
        if (!new.target) { throw 'must be called with new'; }
        const v35 = this.b;
        try { v35(v26); } catch (e) {}
    }
    new F32();
}
for (let v38 = 0; v38 < 10; v38++) {
    f11();
}
%OptimizeFunctionOnNextCall(f11);
const v40 = v7.length;
const v42 = [[v7],f11,v4];
[v42,v40,v6,v42];
f11(v42, 1073741825, v3, v40);
f11();
