const v0 = [-9223372036854775808,28734,20485];
let v1 = 4294967295;
const v3 = new Uint8Array(Uint8Array);
function f4(a5, a6, a7, a8) {
    const v9 = a7++;
    f4 << a7;
    const o11 = {
        ...v3,
    };
    o11[2] = o11;
    const v12 = o11[2];
    v9[1] = v1;
    const t12 = v12[2];
    t12[2] = v9;
    v12 >>> v12;
    return v12;
}
const v15 = [-788889934,55693];
[-1521630526,2,2,-2147483649,536870887,9007199254740990,-4,10];
v15[2] = 3.0;
for (let i20 = 0, i21 = 10; i20 < i21; i21--, Symbol.toPrimitive) {
    for (let v30 = 0; v30 < 5; v30++) {
        const v32 = ([601759695])[0];
        v32 >>> v32;
        function f34() {
        }
    }
}
new Uint8ClampedArray(v0);
const v40 = new Date(Uint32Array);
v40.getMonth();
new Uint32Array();
function f45() {
}
function f46() {
    function f47() {
    }
    return f47;
}
const o52 = {
    "b": f45,
    valueOf() {
        let v49;
        try { v49 = this.b(); } catch (e) {}
        try { v49.b(); } catch (e) {}
        [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
    },
};
new Int16Array(1278);
new Float64Array(2709);
const v59 = new WeakSet();
const v61 = [[v59,WeakSet,WeakSet,WeakSet],v59];
class C62 {
}
f46.f = -4n;
v1++;
([1,8]).fill(3);
for (let v69 = 0; v69 < 5; v69++) {
    function f70() {
        let v72 = ("Vre").codePointAt(v69);
        const v74 = v72 * v72--;
        const v75 = v74 / v74;
        v75 ^ v75;
        return v72;
    }
    f70();
    %OptimizeFunctionOnNextCall(f70);
}
("catch")["1073741823"];
function F80(a82) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
v61[65537] *= F80.trimRight();
