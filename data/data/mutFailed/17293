function f3() {
    return -3n;
}
class C10 extends f3 {
    e;
    constructor(a12, a13, a14, a15) {
        super();
        const v17 = Symbol.unscopables;
        this[v17] = v17;
        const v23 = BigInt64Array && BigInt64Array;
        super.f <<= 9007199254740991;
        const o24 = {
            "apply": f3,
            "defineProperty": Symbol,
            "deleteProperty": Symbol,
            "get": f3,
            "getOwnPropertyDescriptor": f3,
            "getPrototypeOf": f3,
            "isExtensible": f3,
            "ownKeys": Symbol,
            "preventExtensions": Symbol,
            "set": f3,
        };
        const v26 = new Proxy(v17, o24);
        new BigInt64Array();
        new Uint16Array();
        [1073741824,-2118633808,512];
        [-58942,-65537,835264087,973003550,9311];
        v26[this] = -3n;
        const o34 = {
        };
        try {
            o34.f = -0.0;
        } catch(e35) {
        }
        try {
            const o36 = {
            };
            o36.f = -0.0;
            o36.g = BigInt64Array;
        } catch(e37) {
        }
        try {
            const o38 = {
            };
            o38.f = -0.0;
            o38.g = BigInt64Array;
            o38.h = v23;
        } catch(e39) {
        }
        try {
            const o40 = {
            };
            o40.f = -0.0;
            o40.g = BigInt64Array;
            o40.e = 103501371;
        } catch(e41) {
        }
        function F42(a44, a45) {
            if (!new.target) { throw 'must be called with new'; }
            const v46 = this.constructor;
            try { v46(); } catch (e) {}
            this.b = a44;
        }
        new F42();
        new F42();
        "object" == "object";
        ("JghwC").slice;
        function F54() {
            if (!new.target) { throw 'must be called with new'; }
            class C56 {
            }
            for (let v59 = 0; v59 < 25; v59++) {
                let v60 = v59++;
                v60--;
                v59 < v59;
                [601759695];
                [1073741824,1073741823,1376142744,1073741825];
                function f65() {
                    try { Array.isArray(f65); } catch (e) {}
                    const v69 = Array(4087);
                    try { v69.find(); } catch (e) {}
                    for (const v71 of v69) {
                    }
                    return 4087;
                }
                function f72(a73, a74, a75, a76) {
                }
                for (let v77 = 0; v77 < 10; v77++) {
                    f72();
                }
            }
        }
        new F54();
    }
    static [f3];
    static b = 1;
}
new C10(58361, 3n, 1, 6);
const v81 = new C10(9007199254740991, 3n, 6, 103501371);
new C10(v81, 3n, 9007199254740991, 1);
for (let i85 = 0, i86 = 10;
    (() => {
        const v87 = i85 < i86;
        const v90 = new BigUint64Array(3375);
        let [v91,,v92,...v93] = v90;
        v91 << v91;
        return v87;
    })();
    i85++) {
}
