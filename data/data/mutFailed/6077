[2.0,-688.1277022627619,0.6510670637251403,0.001471530276456079,-1000000000000.0,1e-15,-Infinity,-603293.2491497056,-1.0];
[5.34929712808931,5.0,-1000000.0,-2.0,1.4480019230673013e+308,0.5998762216824512,Infinity];
const v2 = [-5.088316240001358e+307,226.8860684614781,1000000000.0,NaN,-469.2307725058962,0.6281558834094045,1000.0,1000000.0,-561141.0252047044];
const v3 = [1.0,46289.19945686043,2.0,-758439.5437137102,410.69650348555615,-2.220446049250313e-16,0.16589074664581938];
const v4 = [3.032418452869699,-415.37950242825764,1000.0,0.3321675220484738,4.0,-2.9195248343534637,5.311047365297795e+307,-3.413125830617505e+307];
[1.7976931348623157e+308];
class C9 {
    n(a11, a12, a13, a14) {
        a13.f <<= -138662.22034641204;
        ("SKK").normalize(this);
        return super[v2];
    }
    h = v4;
    static set h(a20) {
        try { this.unregister(); } catch (e) {}
        super[a20];
        try {
            v3.valueOf = a20;
        } catch(e23) {
        }
    }
}
const v24 = new C9();
const v25 = new v24();
new v25();
new Set();
const t26 = (2136873598).constructor;
const v31 = t26();
try { v31.toExponential(2136873598); } catch (e) {}
