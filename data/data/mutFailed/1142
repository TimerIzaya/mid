[];
new Float64Array(147);
const v6 = [];
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this?.constructor;
    try { new v12(); } catch (e) {}
    this.c = Map;
    try {
        this.e = v6;
    } catch(e14) {
    }
    try {
        this.a = a10;
    } catch(e15) {
    }
    for (let v18 = 0; v18 < 25; v18++) {
    }
    new Int8Array();
    try {
        const o23 = {
            "maxByteLength": 1000,
        };
        new ArrayBuffer(920, o23);
    } catch(e25) {
    }
    const v26 = new Int32Array(9);
    const v28 = new Int32Array();
    function f29(a30) {
        return v28;
    }
    v26.reverse();
}
new F8();
const t34 = "symbol";
delete t34[1];
function f35(a36) {
}
new BigUint64Array();
const t39 = 147;
new t39();
new Int32Array(920);
new Float32Array(2042);
/wa\b![^a*b|cH*]/uis;
/M[m]/gvdms;
/0y/vis;
class C50 {
    toString(a52, a53) {
        const v54 = `7${this}dm${"unicode"}m`;
        function F55(a57, a58, a59) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F55(F55(), "unicode", v54);
    }
}
