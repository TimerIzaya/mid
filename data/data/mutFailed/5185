const v0 = [-34637,855851346,64,-9007199254740991,-1636893642,9007199254740990,-9223372036854775808];
const v1 = [2,-2147483648,-1428072075,-49240,9223372036854775807];
const v2 = [-1259423607,8,9007199254740992,2142811740,-1024];
const v5 = new Uint16Array(50);
const v8 = new Int8Array(512);
const v11 = new BigInt64Array(256);
class C12 extends Uint16Array {
    #n(a14, a15, a16, a17) {
        v11[268435439];
        a14[v0] = v8;
        let {"e":v19,"length":v20,} = v0;
        a16 = 256;
        return a14;
    }
    constructor(a23, a24, a25, a26) {
        super(256, a25);
        super.byteLength = 512;
        new Set();
        [159524002];
        [-54830091,-58888,127,4294967296,-38948,-2147483648];
        [4,15,536870912,1073741824,1073741823,3617,-57401,3,-256];
        try {
            a23.length = 50;
        } catch(e32) {
        }
    }
}
new C12(v0, 50, 512, Int8Array);
new C12(v1, v5, 256, v5);
new C12(v1, v2, 512, C12);
[];
let [] = v0;
