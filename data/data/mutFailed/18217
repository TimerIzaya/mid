const v0 = [268435456];
[256,16];
const v2 = [3,10,255,20337,1073741823,3,9,1024];
const v6 = [3.36030682316108e+307,2.220446049250313e-16,-654.7975412258846,5.0,-3.0,-1.0,-2.0356372672305368e+307,903.7784867405251,-9.813249303865204e+307,-2.092813990764587e+307];
function f7() {
    [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
    const v10 = ([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
    let v11;
    try { v11 = v10.search(f7); } catch (e) {}
    return v11;
}
const v12 = f7();
const v13 = [-4.0,4.75565484252365e+307,-1.7976931348623157e+308,-7.533561419972773e+307,-83688.6501651362,-968.8201892357844,-496.03130578499855];
const v14 = [-1000000000000.0,485.44525826898075,-2.220446049250313e-16,-0.12690089758011425,-805.5981544912512,0.9531098170973004,0.5341753491706029,8.3025946860492e+307];
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a18;
    } catch(e20) {
    }
    try {
        this.g = v14;
    } catch(e21) {
    }
    try {
        this.c = a18;
    } catch(e22) {
    }
}
new F15(v2, v0, "isNaN");
new F15(v6, v13, "isNaN");
new F15(v0, v13, "isNaN");
function F26(a28) {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = this.constructor;
    ("d").prototype;
    v29.caller = v0;
    try { new v29(); } catch (e) {}
}
function f32() {
    return ("D")[0].substring();
}
v12();
const v37 = new F26(F15);
new F26(v37);
for (let v39 = 0; v39 < 25; v39++) {
    Object.defineProperty(f32, v39, { value: v39 });
}
class C40 {
    static {
        [];
        try {
            super.setInt8();
        } catch(e44) {
        }
    }
}
const v45 = new C40();
[v45];
