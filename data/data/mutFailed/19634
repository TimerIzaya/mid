function f0() {
    const o19 = {
        "b": -1.7976931348623157e+308,
        ..."-256",
        "g": "-256",
        "c": -1.7976931348623157e+308,
        536870889: -1.7976931348623157e+308,
        ["-256"]: 5.0,
        m(a5, a6) {
            const v7 = a5?.h;
            function F8(a10, a11, a12, a13) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a5;
                } catch(e14) {
                }
                try {
                    a5.d = a11;
                } catch(e15) {
                }
            }
            const v16 = new F8(-1.7976931348623157e+308, F8, "-256", F8);
            const v17 = new F8(v16, "-256", v16, a6);
            new F8(v17, v7, v7, 5.0);
            return v16;
        },
    };
    return o19;
}
f0();
const v21 = f0();
f0();
class C23 extends f0 {
    get f() {
        f0 & this;
        %VerifyType(v21);
        /(?!\1(a\1)\1)\1/di;
        /[xyz]/ud;
        const v28 = /(x)(x)(x)\2(a||bc)/guis;
        for (let v29 = 0; v29 < 32; v29++) {
            v28["p" + v29] = v29;
        }
        return C23;
    }
}
C23.prototype;
new C23();
new C23();
new C23();
/[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/gudmsy;
const v37 = /\w|\d/gds;
v37.dotAll = v37;
/\P{Any}/gu;
const v41 = ([-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0])?.values;
try { new v41(); } catch (e) {}
class C44 extends Map {
}
try { new C44(); } catch (e) {}
class C47 {
    static {
        this.g = this;
        const v49 = [601759695];
        const v50 = [1073741824,1073741823,1376142744,1073741825];
        function f51(a52, a53, a54, a55) {
            a52.length;
            a53 >>> a53;
            let v58;
            try { v58 = new a52(); } catch (e) {}
            const v59 = v58?.constructor;
            try { new v59(); } catch (e) {}
            a54 << a54;
            function f62() {
                return f62;
            }
            Int8Array.name;
            const v65 = new Int8Array();
            try { v65.reduceRight(v50); } catch (e) {}
            const v69 = BigUint64Array * 536870887;
            Number.isNaN(v69);
            const v72 = v69 ** v69;
            Number.isNaN(v72);
            Number.isNaN(v72);
            function f77(a78, a79) {
            }
            try { f77(); } catch (e) {}
            function f81(a82, a83) {
                const v84 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
                class C85 {
                }
                C85.a = C85;
                C85[Symbol.replace] = v84;
                return f81;
            }
            %PrepareFunctionForOptimization(f81);
            f81();
            %OptimizeFunctionOnNextCall(v58);
            const v89 = f81();
            v89.e = v89;
            const v90 = v65.buffer;
            const v91 = v90.__defineGetter__;
            const v92 = v91?.constructor;
            try { new v92(v49); } catch (e) {}
            try { v91(); } catch (e) {}
            Object.defineProperty(v90, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f62);
            try { ("find").normalize(); } catch (e) {}
            let v97;
            try { v97 = v50["find"](..."find", a55, ...v49); } catch (e) {}
            const o98 = {
            };
            o98.e = this;
            o98.e = this;
            !(v97 <= a54);
        }
        f51.name = f51;
        for (let v101 = 0; v101 < 5; v101++) {
            f51(this, v101, v101);
        }
    }
}
