const v3 = [2,237513775,64,700106456,-2127435896,-8,7,1003504260,6];
const v4 = [-544968798,64,-2072538256];
const v5 = [10000,4294967297,1659502263,819984107];
class C6 {
    b;
    c = v5;
    constructor(a8, a9, a10, a11) {
        v5.length;
    }
    a = -13n;
    1073741823;
    3361349989 = 3764n;
    d = 65536n;
    3;
    2147483649 = v4;
}
const v13 = new C6(v3, v5, 65536n, 3764n);
const v14 = new C6(v13, -13n, 65536n, 3764n);
const v15 = new C6(v4, v14, 3764n, 3764n);
/Mq(?:a+){0,0}/gudimy;
const v17 = /a[a]/gums;
/J[a*b\xed\xa0\x80a(?=bbb|bb)cra\D?]/uy;
const v19 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v21 = new Uint32Array();
let v22 = -4294967297n;
const v23 = v22--;
const v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
function f26(a27, a28, a29, a30) {
    const v31 = a27.constructor;
    let v32;
    try { v32 = v31(); } catch (e) {}
    const v33 = v32?.constructor;
    let v34;
    try { v34 = v33(f26, a27, v19, Uint32Array, v31); } catch (e) {}
    function f35() {
        const v37 = ("Vre").charAt(v34);
        v37.blink();
        let v39;
        try { v39 = ("Vre").codePointAt(v19); } catch (e) {}
        v39 % v39;
        let v41 = Float64Array;
        v41 = a28;
        b = v19;
        let v42 = v19.length;
        v42++;
        try {
            v25.forEach(a28);
        } catch(e45) {
            ("Vre").length;
            %VerifyType(v41);
            Object.defineProperty(v19, "d", { writable: true, get: f26 });
            ("Vre").length;
            try {
                v5.toString = f26;
            } catch(e48) {
            }
            e45.message = e45;
        }
        const o59 = {
            "c": v22,
            valueOf(a50, a51) {
                return v32;
            },
            1073741824: v21,
            [v22](a53, a54, a55, a56) {
                eval(v37);
            },
        };
        return v25;
    }
    f35();
    try { v15["m"](v23, v31, Uint32Array, v34, v22); } catch (e) {}
    const v64 = ~v17;
    delete v5[Array];
    v4[v64] = v21;
    const v66 = Array(v33);
    try { v66.findLast(); } catch (e) {}
    const v69 = Int8Array.of();
    let v70;
    try { v70 = v69.every(v69, a27, v69, a28, Array); } catch (e) {}
    const v71 = new Int8Array(v70);
    const v73 = v71.buffer.slice();
    const v74 = v73.constructor;
    try { v74(v73, v70, v23, v69, a27); } catch (e) {}
    const v77 = new Int32Array(v74, v31, v31);
    v77.lastIndexOf(a27, a29);
    try { v25["find"](..."find", a30, ...v24, ...v25); } catch (e) {}
    return v22;
}
for (let v81 = 0; v81 < 10; v81++) {
    f26(v21);
}
%OptimizeFunctionOnNextCall(f26);
f26(Uint32Array);
