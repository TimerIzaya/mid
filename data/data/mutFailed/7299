function f2(a3, a4) {
    new Int16Array(255);
    new Int8Array(4);
    new Uint32Array(2);
    return Int32Array;
}
Int32Array[Symbol.toPrimitive] = f2;
new Int32Array(157);
1283 ^ 1283;
const v20 = new Float64Array(1283);
v20[1213] = v20;
Uint16Array.b = Uint16Array;
const v23 = new Uint16Array(1);
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = v23;
    try { this.propertyIsEnumerable(a27); } catch (e) {}
    const v29 = a27 >> a27;
    v29 >>> v29;
    try {
        this.b = 1;
    } catch(e31) {
    }
    try {
        this.f = v20;
    } catch(e32) {
    }
    try {
        this.c = a26;
    } catch(e33) {
    }
}
function f34(a35) {
    function f36() {
        return Symbol;
    }
}
Object.defineProperty(F24, "e", { enumerable: true, set: f34 });
const v37 = F24?.constructor;
try { new v37(Int32Array); } catch (e) {}
F24.e = F24;
new F24(157, 1283);
new F24(157, 1283);
const v41 = new F24(1, 1);
v41.b = v41;
function f43() {
    return undefined;
}
const v44 = [,];
try { v44.findLast(Int32Array); } catch (e) {}
try { v44.findLast(v44); } catch (e) {}
const v47 = v44.group(f43);
v47.undefined;
v47.b = v47;
const v49 = /(\1a)/gums;
const v50 = /V(?:a{5,1000000}){3,1000000}/vims;
v50.toString = f2;
try { v50.compile(undefined, undefined); } catch (e) {}
const v52 = /(?<a>.)\k<a>?/vdimsy;
v52.d = v52;
for (let v53 = 0; v53 < 27; v53++) {
    let v55 = v49.compile(v50).lastIndex;
    v55++;
}
let v57;
try { v57 = v52(v49, v50, v50, v49); } catch (e) {}
%VerifyType(v57);
const v58 = [v52,v50,v49];
function f59(a60) {
    try {
        a60.valueOf = f34;
    } catch(e61) {
    }
    return Int32Array;
}
v58.toString = f59;
v58[1] = v58;
v58[2] = v58;
const v62 = [v58,v50,v52,v58,v58];
v62[4] = v62;
v62[2] = v62;
[v52,v49,v49];
let v64 = 8;
const v65 = v64--;
v65 / v65;
const v68 = new BigInt64Array(v50, v49, v57);
try { v68.subarray(v44, v68); } catch (e) {}
let v70;
try { v70 = v68.copyWithin(v20, v50); } catch (e) {}
const v71 = v70?.entries;
try { new v71(); } catch (e) {}
const v73 = new BigInt64Array(v64);
try { v73.findLastIndex(v52); } catch (e) {}
new BigUint64Array(10);
let v78 = 7;
v78--;
const v81 = new Uint8Array(v78);
const v82 = v81.constructor;
v82[2] = v82;
try { new v82(v82, v52, v82); } catch (e) {}
const v84 = new v82(Uint8Array, v73, v73);
v84[1];
Uint16Array.BYTES_PER_ELEMENT;
let v89;
try { v89 = Int32Array.bind(v58); } catch (e) {}
v89.name = v89;
function f90() {
    const v92 = 3.4890473589784586e+307 === 3.4890473589784586e+307;
    const v93 = v92 || v92;
    !v93;
    let v95 = 1000000000000.0;
    const v96 = v95--;
    const v97 = -v96;
    -v97;
    257828.6336153492 >>> 257828.6336153492;
    const v102 = -v62;
    const v103 = v102 && v62;
    v103 - v103;
    -4294967296 << -4294967296;
    class C107 {
        static #m(a109) {
        }
        constructor(a111) {
            const v113 = new Float32Array();
            let v114;
            try { v114 = v113.entries(); } catch (e) {}
            const v115 = v114.next();
            v115.b = v115;
            v115.value;
            v115.b = v115;
            const v117 = new Uint16Array(12, -4294967296, v96);
            const v118 = new Float32Array(v117);
            try { v118.findIndex(v97); } catch (e) {}
        }
    }
    C107.g = -4294967296;
    try { new C107(Float64Array); } catch (e) {}
    C107.g = C107;
    const v121 = new C107();
    const v122 = v121?.constructor;
    let v123;
    try { v123 = new v122(v121); } catch (e) {}
    const v124 = v121?.__defineSetter__;
    v124.e = v124;
    try { new v124(v64, v121); } catch (e) {}
    const v126 = new C107();
    const v127 = v126?.constructor;
    try { new v127(v62); } catch (e) {}
    const v129 = v126?.constructor;
    let v130;
    try { v130 = new v129(v64); } catch (e) {}
    v130.constructor = f2;
    const v131 = v130?.constructor;
    try { new v131(v130); } catch (e) {}
    try { new Symbol(); } catch (e) {}
    Symbol.hasInstance;
    Symbol.iterator;
    try { v73.reduce(Int32Array, 12); } catch (e) {}
    let v138 = 0;
    v138++;
    const v140 = new C107();
    v140.constructor = Symbol;
    const v141 = v140?.constructor;
    let v142;
    try { v142 = new v141(v140); } catch (e) {}
    new C107();
    const v144 = new C107(-4294967296);
    try { v144.constructor(v47); } catch (e) {}
    [];
    [257828.6336153492,v144,v140,v144];
    const v148 = [];
    v148.constructor = f2;
    const v149 = v148?.constructor;
    try { new v149(Uint8Array); } catch (e) {}
    v148[0];
    class C152 extends C107 {
    }
    try { new C152(); } catch (e) {}
    const v154 = new C152();
    try { v154.constructor(); } catch (e) {}
    const v156 = v148.constructor;
    const v157 = v156?.constructor;
    try { new v157(v93); } catch (e) {}
    let v159;
    try { v159 = v156.isArray(v148); } catch (e) {}
    !v159;
    class C161 extends v156 {
    }
    C161.a = v142;
    C161.g = C161;
    try { new C161(); } catch (e) {}
    C161.a = C161;
    const v163 = new C161();
    v163.constructor = f59;
    const v164 = v163.constructor;
    try { v164.bind(); } catch (e) {}
    const o166 = {
        "e": v148,
        __proto__: v58,
        [v62]: v81,
        "h": 257828.6336153492,
    };
    const v167 = o166[0];
    function f168() {
        let v169 = v96 >> v49;
        return v169 = v123;
    }
    v167.toString = f168;
    const v170 = v167?.constructor;
    try { new v170(257828.6336153492, v102); } catch (e) {}
    try { o166.e(BigUint64Array); } catch (e) {}
    return Int32Array;
}
let v173;
try { v173 = f90(); } catch (e) {}
v173.name = v173;
%PrepareFunctionForOptimization(f90);
const v174 = f90();
v174.BYTES_PER_ELEMENT = v174;
%OptimizeFunctionOnNextCall(f90);
f90();
