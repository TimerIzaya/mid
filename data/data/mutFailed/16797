const v0 = [];
function f1() {
    new BigUint64Array();
    return BigUint64Array;
}
v0[Symbol.toPrimitive] = f1;
const v6 = [v0,v0,v0,v0];
const v7 = [v6,v6];
v7.toString = f1;
const v8 = [v7,v6,v0];
v8.toString = Symbol;
v8[1] = v8;
function f9(a10, a11) {
    a11[Symbol.toPrimitive] = f1;
    const v14 = a11?.join;
    try { new v14(v7); } catch (e) {}
    const o16 = {
        [a11]: a10,
        "d": a10,
        "a": v7,
    };
    return o16;
}
const v17 = f9(v7, v0);
f9(v7, v7);
const v19 = f9(v8, v8);
v19.d = v19;
function f20() {
    return v8;
}
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    function f25(a26, a27) {
        const v28 = delete Symbol[this];
        try {
            this.fuck(a24, v28, 1.5892557511152394e+308);
        } catch(e31) {
        }
        return a27;
    }
    a23[Symbol.toPrimitive] = f25;
    function f34() {
        [4.434946405135671,0.5532525703783594,-240734.26728165476,1.0,-1000000.0,5.841463785154799,-0.21107717601997322,4.0];
        [6.706506147963378,5.166439545653981e+307,-1.7976931348623157e+308,3.311380784116306e+307,646.5916997654415,-3.0];
        return [-Infinity];
    }
    a24.toString = f34;
    a23[1];
    let v39;
    try { v39 = a24.findLast(a23); } catch (e) {}
    try {
        this.a = a23;
        this[3] = v39;
        const v40 = v7.length;
        v40 >>> v40;
        Object.defineProperty(this, a24, { writable: true, get: f9, set: f20 });
        try {
            const o42 = {
            };
            new F21(v40, o42);
        } catch(e44) {
        }
        const v48 = -F21;
        Math.min(1748170863);
        v48 | -1000000000000.0;
        1748170863 >> 1748170863;
        F21 >> -1000000000000.0;
    } catch(e53) {
        e53.name = e53;
    }
    try {
        this.e = v6;
    } catch(e54) {
    }
    try {
        this.g = v0;
    } catch(e55) {
    }
}
F21.constructor = Symbol;
const v56 = F21?.constructor;
function f57(a58, a59) {
    v8.__proto__;
    const o61 = {
        "apply": f9,
        "call": f20,
        "construct": Symbol,
        "defineProperty": Symbol,
        "deleteProperty": Symbol,
        "get": Symbol,
        "getOwnPropertyDescriptor": f1,
        "has": f1,
        "isExtensible": f9,
        "ownKeys": Symbol,
        "preventExtensions": f1,
        "set": f9,
        "setPrototypeOf": f9,
    };
    new Proxy(v7, o61);
    return F21;
}
v56.toString = f57;
try { v56.toString(); } catch (e) {}
try { new v56(v6); } catch (e) {}
new F21(v7, v0);
new F21(v6, v6);
const v68 = new F21(v7, v0);
const v70 = -14161 + -14161;
Set.toString = f9;
const v74 = [865030.0072136207,-1000000000000.0,-1.2335898302795516e+308,-123.52161477757932,0.8230465364846693,-141113.64897402772,-196.5981128122221,151.59178734474358,0.667472981056507,-0.0];
class C75 extends Set {
}
const v76 = new C75();
function f77(a78) {
    v74.length;
    function F80(a82, a83, a84) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = a82;
        } catch(e85) {
        }
        try {
            this.b = a84;
        } catch(e86) {
        }
    }
    new F80(v19, v0, 10);
    new F80(v17, v56, v70);
    new F80(a78, v0, -14161);
    return v19;
}
v76[Symbol.toPrimitive] = f77;
try { v76.has(v76); } catch (e) {}
function f93(a94) {
    try { new BigInt64Array(a94, v68, v68); } catch (e) {}
    BigInt64Array.prototype = BigInt64Array;
    const v97 = new BigInt64Array(a94, a94, a94);
    const v98 = `
        var c = v97;
    `;
    try { v98.lastIndexOf(Set); } catch (e) {}
    try { eval(v19); } catch (e) {}
    return eval(v98);
}
v76.toString = f93;
v74[v76];
