function F1() {
    if (!new.target) { throw 'must be called with new'; }
    function f3(a4) {
        new F1();
    }
    Object.defineProperty(this, "a", { set: f3 });
    1191742690 > 1191742690;
    try {
        this.a = 1191742690;
    } catch(e8) {
    }
}
class C11 {
    static #n(a13, a14) {
        try {
            this.#n(this, a13);
        } catch(e16) {
        }
        return 1024;
    }
    #valueOf(a18, a19) {
        a19 && a18;
        %VerifyType(a19);
        return a18;
    }
    1 = 10;
    static #e = 1024;
}
const v21 = new C11();
new C11();
new C11();
new v21();
const v32 = new Float64Array();
("p").lastIndexOf(v32);
const v40 = new Float32Array(Float32Array);
for (let v41 = 0; v41 < 25; v41++) {
    function f42(a43, a44, a45, a46) {
        a43[0] = a43;
        a44 <= a44;
        const v49 = [-848370.7489683867,1.7976931348623157e+308,-0.0,Infinity,-939644.2877334312,709.4714121839102,1000000.0,-607265.92864471,-1000000000.0,2.2250738585072014e-308];
        try { v49.entries(); } catch (e) {}
        [];
        class C52 {
            constructor(a54, a55, a56) {
                function f57(a58, a59, a60) {
                    a58.copyWithin();
                    try {
                        f57(-268435456, 0.6683462416314783, [-268435456]);
                    } catch(e66) {
                    }
                    const v67 = this >> -268435456;
                    v67 >> this;
                    return -v67;
                }
                f57(this, this, a54);
            }
        }
        const v71 = arguments?.__lookupGetter__;
        try { v71(v71, f42, a44, arguments); } catch (e) {}
        try { undefined(); } catch (e) {}
        const v76 = new Int8Array();
        const o77 = {
            ...v76,
        };
        new Int8Array(v40);
        "find" == "find";
        return v40;
    }
    for (let v82 = 0; v82 < 10; v82++) {
        f42(v40, v41);
    }
}
