const v0 = [-228.5917884063167,-5.0];
const v1 = [-2.220446049250313e-16,-4.0,NaN,-1.0,1e-15,1000000.0,-1.533190497928834e+308];
const v2 = [1.7976931348623157e+308,5.0,-1.0,-0.0];
const v3 = [v1,v2,v1];
const v4 = [v3,v3,v1,v3,v2];
const v5 = [v4,v2];
new WeakMap();
class C8 extends WeakMap {
    constructor(a10, a11) {
        super(v1);
        let v12;
        try { v12 = a11.n(v5, v0, C8); } catch (e) {}
        Math.asin(-8840);
        const v16 = -8840 || v12;
        (v12 * -8840) | v16;
        -8840 % v16;
        Math.tanh(v12);
        a10.__proto__;
        delete v2?.length;
    }
    536870888;
    5;
    c;
    f;
    4 = v0;
}
new C8(v3, v1);
new C8(v4, v1);
new C8(v3, v4);
function f26(a27, a28, a29, a30) {
    return a27;
}
function f31(a32, a33, a34, a35) {
    function f36() {
        return f36;
    }
    const v37 = f36.length;
    const v38 = v37 + v37;
    const v40 = new Int8Array(a32);
    const v41 = v40.buffer;
    function f42(a43) {
        return a43;
    }
    f42.constructor = f26;
    f42.constructor;
    const v45 = v41.slice(v37, a33);
    function f46(a47) {
        v45.slice(a47, v38);
        return f31;
    }
    return v38;
}
%PrepareFunctionForOptimization(f31);
f31(f26, f31, f31, f26);
%OptimizeFunctionOnNextCall(f31);
f31(f31, f31, f31, f26);
