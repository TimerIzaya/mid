let v2 = "h";
class C3 {
    5;
    static 536870887;
    static {
        this[16] = this;
        this.__proto__;
        try {
            this.b = "trimLeft";
        } catch(e6) {
        }
        const v7 = (a8, a9, a10, a11) => {
            function f12() {
                return this;
            }
            return f12;
        };
    }
    1494 = v2;
    static #c = "f";
}
new C3();
const v14 = new C3();
new C3();
const v18 = new Float32Array(1000);
new Int8Array(4096);
const v24 = new Int32Array(1283);
let v25 = 0;
do {
    v14[4294967295] /= 4096;
    v25++;
} while (v25 < 1)
C3[16];
let {"length":v31,} = "f";
try { v14.n(C3, 1000, v18, Float32Array); } catch (e) {}
-1000000000000.0 >>> -1000000000000.0;
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = Array(19793);
    Object.defineProperty(v42, 7969, { writable: true, configurable: true, enumerable: true, value: v42 });
    try { v42.reduce(); } catch (e) {}
    for (const v44 of v42) {
    }
    [[v42,v42]];
    ("function")[0];
    new Set();
    const v51 = [];
    v51.toSpliced();
    function f54() {
        const v55 = v24.buffer;
        ([1.479450712344466]).join();
        return v55;
    }
    Object.defineProperty(Uint16Array, Symbol.toPrimitive, { writable: true, value: f54 });
    v51 >= Uint16Array;
}
const v61 = new F38();
function f62(a63) {
    [v2] = [17452,4294967295,64,-8];
    return "trimLeft";
}
v61.constructor = f62;
v61.constructor;
class C66 {
}
