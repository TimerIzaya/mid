const v2 = new Int8Array(1497745028);
const v5 = new Int8Array(9);
const v8 = new NaN(191);
function f9(a10, a11, a12, a13) {
    return 191 >> a10;
}
const v15 = f9(Int8Array, Int8Array, 9, 1497745028);
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v5;
    } catch(e20) {
    }
    try {
        this.a = a18;
    } catch(e21) {
    }
}
function f22() {
    function f24(a25) {
        try { a25["transfer"](v2); } catch (e) {}
    }
    this.onmessage = f24;
    v2[v15];
}
const v31 = [];
const o32 = {
    "arguments": v31,
    "type": "function",
};
new Worker(f22, o32);
const v34 = new F16(v8, NaN);
new F16(v34, NaN);
new F16(v8, v8);
class C40 {
    p(a42) {
        this.g ^= v34[8];
    }
}
const o53 = {
    get d() {
        function f49(a50, a51, a52) {
            'use strict';
            return a50;
        }
        return this;
    },
};
class C3 {
    #g;
    6 = "e";
    valueOf(a5) {
        let v4 = this;
        try {
            const v6 = [];
            class C7 {
                [v6] = v6;
            }
            const v8 = new C7();
            const v9 = new C7();
            function f12(a13, a14) {
                const o19 = {
                    "g": C7,
                    __proto__: C7,
                    ...v9,
                    "f": C7,
                    268435456: 7n,
                    [7n](a16, a17, a18) {
                    },
                };
                return o19;
            }
            const v20 = f12(v8, f12);
            f12(v8, -704263332n);
            for (let v23 = 0; v23 < 100; v23++) {
                f12(v23, C7);
            }
            Reflect.construct(f12, [65537n,v20], Date);
            v4 %= "getOwnPropertyNames";
        } catch(e29) {
        }
        return C3;
    }
    static h;
    static ["e"] = "getOwnPropertyNames";
    static #b = -2;
    static #d;
    m(a31, a32) {
        const o33 = {
            __proto__: this,
            "d": a32,
        };
    }
    static 4;
    static #e = -2;
    constructor(a35, a36) {
        const v37 = [NaN,1.0,1.1875413619536744e+308];
        [] = v37;
        v37 < "e" ? v37 : "e";
        super.h >>>= a35;
        this.__proto__;
        const v41 = [21727,-1745701472,15,11452,2147483649,-1972291451,-29619,9];
        const v42 = [-12368,-2,4,-1,-25489,2147483647];
        function f43(a44, a45) {
            const o46 = {
                __proto__: a44,
            };
            return o46;
        }
        f43(v42);
        const t61 = f43(v41);
        t61[v42] ^= ("257").__proto__;
        [-2.0,0.6635667292348898,-2.2250738585072014e-308,2.2250738585072014e-308,2.2250738585072014e-308,-745.7093385146616,232.43155999430383,-871.3461315962776];
        [-6.0877700781126665,5.0,NaN,-748.8943071666221,-9.127552821446095,-5.0];
    }
    #d;
    static [-2] = -2;
    [-2];
    1073741825 = "e";
}
const v53 = new C3(-2, "getOwnPropertyNames");
const v54 = new C3(v53, v53);
let v55 = new C3(-2, v54);
const v56 = [-2147483648,4294967295,-22931,-11,1,-763643767];
const v57 = [-1];
const v58 = [1267,-3];
const v59 = -Infinity;
new Int8Array(13);
const v65 = new Uint8Array(124);
new Int32Array(3870);
try {
    v53[v65] = Int32Array;
} catch(e71) {
}
v56[10] **= 1.0;
class C72 {
    static #n(a74) {
        try { this(); } catch (e) {}
        return this.g;
    }
    static 10 = 0.7066651792620507;
    toString(a78, a79, a80) {
        try { C72(); } catch (e) {}
        try {
            super.b = -2;
        } catch(e82) {
        }
        return v57;
    }
}
let [] = v56;
try { v53["o"]("o", v58, v53, "o"); } catch (e) {}
try {
    v55 = "e";
} catch(e85) {
}
const v86 = new C72();
const v87 = new C72();
v87.localeCompare = "getOwnPropertyNames";
let v88 = 512n;
v88++;
try { v87.localeCompare(); } catch (e) {}
v87[v88];
v86[v59] *= v59;
