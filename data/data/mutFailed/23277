const v0 = [-1.0,610.0712499398785,1.0];
[85.9376186605034,0.020892139908054497,0.21272187172082324,-3.4239199634458934,-346579.9242801006,1.7976931348623157e+308,0.8073262790900985];
function f2() {
    class C3 {
    }
    const v4 = new C3();
    const v6 = Symbol.toPrimitive;
    v4[v6] = f2;
    const v7 = v4?.constructor;
    try { new v7(); } catch (e) {}
    const v9 = [v4,v4,v4,v4,v4];
    const v10 = [f2,f2];
    function f11() {
        return Symbol;
    }
    Object.defineProperty(v10, "constructor", { get: f11 });
    class C12 extends C3 {
        [v4];
    }
    const v13 = new C12();
    function f14() {
        v6[Symbol] = v13;
        [-334.02950850400657,-1000000.0,1.0,897386.1612921269,1.3141113367654907e+308,1.7976931348623157e+308];
        [-2.659743564932718e+307,1000.0];
        return [0.5573336488284985,2.220446049250313e-16,2.0,-1e-15,-1000000.0,1000.0,0.23985177711524874,-1e-15,0.435933647947077,1000000000000.0];
    }
    Object.defineProperty(v13, "constructor", { writable: true, configurable: true, value: f14 });
    const v18 = v13?.constructor;
    try { new v18(); } catch (e) {}
    const v20 = v10.constructor;
    try { v20.from(v10); } catch (e) {}
    try { v13.m(v9); } catch (e) {}
    return f2;
}
const v23 = f2();
v23.prototype;
const v25 = [-1000000000.0,-875.923064410159,-1.0,0.29652511227204226];
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v28.pop(); } catch (e) {}
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    try { v30["throw"](); } catch (e) {}
    12 << 9007199254740991;
    function f41() {
        try {
            v30.forEach(a33, v28);
        } catch(e43) {
        }
        return a33;
    }
    f41();
    eval();
    %OptimizeFunctionOnNextCall(f41);
    return v30;
}
class C48 {
}
const v49 = new C48();
function f50() {
    function f51(a52) {
        for (let v53 = 0; v53 < 32; v53++) {
            v0["p" + v53] = v53;
        }
        return a52;
    }
    return f51;
}
function f56(a57) {
    class C58 {
    }
    new C58();
}
Object.defineProperty(v49, "constructor", { configurable: true, get: f50, set: f56 });
const v60 = v49.constructor;
function f61(a62) {
    Math.tanh(-1000.0);
    return v0;
}
v60[Symbol.toPrimitive] = f61;
v60.c = v60;
function f68(a69, a70, a71, a72) {
    return arguments;
}
~3888;
Float32Array.valueOf = v23;
Float32Array.name;
new Float32Array(3888);
const o80 = {
    "deleteProperty": Date,
    "ownKeys": Date,
};
const v81 = o80?.deleteProperty;
try { new v81(f68, Float32Array, f68, C48, C48, C48, f68); } catch (e) {}
class C84 {
}
C84.d = f61;
C84.d = C84;
class C85 {
    static n(a87, a88) {
    }
    static [3888];
}
try { C85(); } catch (e) {}
class C90 extends C84 {
    static valueOf(a92, a93) {
    }
}
C90.g = C90;
new BigUint64Array(3190);
Uint32Array.length;
new Uint32Array(8);
function F101() {
    if (!new.target) { throw 'must be called with new'; }
}
F101.fuck = v25;
F101.fuck = F101;
const v104 = [1073741824,1073741823,1376142744,1073741825];
try { v104.reduceRight(C90); } catch (e) {}
function f106(a107, a108, a109, a110) {
    try {
        v104.forEach(a110, a107);
    } catch(e112) {
    }
    const o114 = {
    };
    const v116 = new Proxy(Uint8ClampedArray, o114);
    try { v116.apply(Symbol, f106); } catch (e) {}
    return o114;
}
const v119 = new Int8Array(180);
const v121 = /(xyz??)/vm;
class C122 {
    get e() {
    }
    #c = v121;
}
function f124(a125) {
    for (let v126 = 0; v126 < 10; v126++) {
        for (let v127 = 0; v127 < 5; v127++) {
        }
        const o129 = {
            __proto__: null,
        };
        try { o129.valueOf(); } catch (e) {}
    }
}
Object.defineProperty(C122, "d", { writable: true, set: f124 });
C122.d = C122;
const v131 = v119.byteOffset;
v131 !== v131;
v119[v131] = 5;
