-Infinity;
new Uint32Array(1843);
const t2 = -1.7976931348623157e+308;
new t2(256);
const v15 = new BigUint64Array(3379);
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
const v21 = 1000000.0 % 1000000.0;
const v25 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v35 = new v21();
gc();
110 <= 110;
110 + 110;
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const t20 = 14;
new t20();
const v46 = v15.getUTCDay();
v46 >>> v46;
let v48 = 127;
v48 >> v48;
v48++;
function f51(a52, a53) {
    try { a52(f51); } catch (e) {}
    try { a52(BigInt64Array); } catch (e) {}
    a53.constructor(a53);
    return Date;
}
try { new Promise(4096); } catch (e) {}
const v59 = new Promise(f51, -4096);
let v60;
try { v60 = v59.then(); } catch (e) {}
try { v60.then(v25, v35); } catch (e) {}
Uint8Array.length = Uint8Array;
const v63 = new Uint8Array(v48);
function f64(a65, a66) {
    const o67 = {
    };
    o67.g = o67;
    return o67;
}
let v68;
try { v68 = f64(v59, v59); } catch (e) {}
v68.g;
f64.arguments = f64;
for (let v70 = 0; v70 < 25; v70++) {
    v70 - v70;
    const v72 = f64();
    v72.g = v72;
    v72.d = v72;
    Object.defineProperty(v72, v70, { enumerable: true, get: f64, set: f64 });
    8 - 8;
    const v77 = new Int8Array(8);
    try { Reflect.preventExtensions(v72); } catch (e) {}
    Reflect.construct(Uint16Array, [v77]);
    v63[v72] = v72;
    gc.name = gc;
    !("sync" == "sync");
    const o86 = {
        "execution": "sync",
    };
    gc(o86);
}
