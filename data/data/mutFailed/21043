class C3 {
    constructor(a5) {
        const o8 = {
            "maxByteLength": 1043,
        };
        const t5 = 1043;
        const v10 = new t5(1043, o8);
        new Int32Array(v10);
    }
    c = -5.758441300358994;
    g;
    static f = -5.758441300358994;
    a;
}
const v13 = new C3(9007199254740991);
const v14 = new C3(-1.0);
const v15 = new C3(-5.758441300358994);
const v16 = [268435456,-1496765071];
const v17 = [1,1073741823,536870887,11766,-23568,-2,9007199254740991];
const v18 = [-8,-2147483647,-1579620778,43832,-1024,9,-4294967295];
function f19(a20, a21, a22, a23) {
    const o34 = {
        get a() {
            Math.cos(a22);
            !(~a22);
            Math.sign(a20);
            return a22 | !-6;
        },
        ...a20,
        ...a20,
        "d": a22,
    };
    return o34;
}
f19(v18, v14, v13, v17);
const v36 = f19(v17, v14, v13, v16);
const v37 = f19(v17, v15, v15, v18);
class C38 extends v37 {
    n(a40, a41) {
        function F42(a44, a45, a46, a47) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = v14;
            } catch(e48) {
            }
            try {
                this.h = C3;
            } catch(e49) {
            }
            try {
                f19.e = a41;
            } catch(e50) {
            }
        }
        new F42(9007199254740991, v37, v37, v18);
        const v52 = new F42(f19, v37, v36, v16);
        const v53 = new F42(v52, v37, this, v18);
        return v53;
    }
}
new C38();
new C38();
new C38();
const v57 = /(J5a{0,1}?)/y;
class C58 {
    static {
        for (let v60 = 0; v60 < 25; v60++) {
            const v61 = [601759695];
            const v62 = [1073741824,1073741823,1376142744,1073741825];
            function f63(a64, a65, a66, a67) {
                ~a65;
                try { a64(); } catch (e) {}
                const v70 = a66 << a66;
                v70 % v70;
                function f72() {
                    return a64;
                }
                const v74 = new Int8Array();
                BigUint64Array.length;
                const v78 = BigUint64Array * 536870887;
                let v79 = v78 - v78;
                v79++;
                const v81 = v61 ** v78;
                try { Number(v57); } catch (e) {}
                Number.isNaN(v81);
                const v86 = v74.buffer.__defineGetter__;
                try { v86(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f72);
                let v89;
                try { v89 = v62["find"](..."find", a67, ...v61); } catch (e) {}
                return v89;
            }
            for (let v90 = 0; v90 < 5; v90++) {
                f63(this, v90);
            }
        }
    }
}
