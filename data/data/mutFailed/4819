const v2 = new Float32Array(7);
function f5(a6) {
    const v9 = v2 & a6;
    Math.random();
    Math.sinh(v2);
    268435440 & v9;
    Math.sign(268435440);
    return a6;
}
BigUint64Array[Symbol.toPrimitive] = f5;
const v16 = new BigUint64Array(512);
const o18 = {
    [BigUint64Array]: v16,
    __proto__: v2,
};
try {
    const v19 = /(?:a*)+/udimy;
    const v20 = /Ja+?/vim;
    const o21 = {
    };
    o18.fuck(v19, o18, v20, o21);
} catch(e23) {
}
const v25 = new Float32Array(2);
function f29(a30, a31, a32) {
    const o40 = {
        2147483647: v16,
        "c": 512,
        p(a34, a35, a36) {
            Reflect.construct(a34, [a32,7,v2,v2], BigUint64Array);
            return 512;
        },
        ...v25,
        "g": v25,
        [60581n]: 2,
        __proto__: v16,
        "b": a31,
    };
    return o40;
}
f29(4n, 60581n, 4n);
f29(4n, 4n, -268435456n);
f29(4n, 60581n, -268435456n);
const v53 = Promise.reject(Promise);
v53[Symbol.iterator] = Symbol;
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
const v70 = new F66(512, 10000);
const v71 = new F66();
const v73 = new Uint32Array(v53, 36002, 4);
([v71,v70,v73[0.29489550717955537]])[2];
