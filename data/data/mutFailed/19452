[1.5950344740603214e+308,2.220446049250313e-16,7.098198811244753,5.0,-25.37361863566366,1.4293476262938185,9.36244806100013e+307,-1.0,1.8465521887200627,-61.38914170660041];
const v1 = [-3.5898605627255753,1.3125679453725613e+308,-1000000000.0,3.0];
const v2 = [668.3367149699206,1.1257690115934729,-1.7976931348623157e+308,1000000000.0];
class C6 {
    static {
        const v9 = new WeakMap();
        %VerifyType(-192505663);
        v9 == WeakMap;
        v2 === v1;
    }
    static a = v1;
    0;
    static 9;
    f;
    static m(a13, a14) {
    }
}
const v15 = new C6();
const v16 = new C6();
v16[0];
const v18 = new C6();
v18[0];
class C20 extends C6 {
    static {
        this.name;
        try {
            v15.fuck("species", "species");
        } catch(e25) {
        }
    }
    constructor(a27, a28, a29) {
        super();
        const o33 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o33);
    }
    static #d = -192505663;
    static a = 268435456;
    #b = v18;
    static [-2];
}
const v35 = new C20();
v35.f = v35;
new C20();
const v37 = new C20();
const v40 = new WeakMap();
const v41 = /8[\cA]v/uisy;
v41.global;
function f43(a44, a45) {
    const v46 = [v41];
    const v47 = v46.concat(v46, a44);
    try { v47.flat(); } catch (e) {}
    v40.set(v46);
    const v50 = [-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0];
    gc.arguments = gc;
    const v53 = v50["findIndex"](gc);
    v53 != v53;
}
try { f43.apply(-4294967296, v37); } catch (e) {}
f43();
const v57 = Symbol.toPrimitive;
for (let [v58,v59] of C20) {
}
class C60 {
}
const v61 = new C60();
v61.constructor.constructor();
v41[v57] = f43;
const v64 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v64.length = v41;
} catch(e65) {
    e65.name;
}
