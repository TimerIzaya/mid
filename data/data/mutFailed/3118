class C3 {
    g;
    constructor(a5, a6) {
        a5 == a5;
        const v9 = [a5,a5,-561250721,a5,-561250721];
        function F10(a12, a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            const v16 = this?.constructor;
            try { new v16(a15, a12, a15, Reflect); } catch (e) {}
            a12.b = a12;
            a14.prototype = a14;
            try {
                this.d = "257";
            } catch(e18) {
            }
        }
        const v19 = new F10(C3, a5, F10, a5);
        v19.length;
        const v21 = new F10(v9, v9, "257", C3);
        const v22 = new F10(v21, "4294967295", v21, a5);
        v22.b = v22;
        Reflect.apply(("4294967295").concat, this, v9);
    }
    static #e = -561250721;
    static #h = "257";
    static c = "257";
}
try { C3.bind("257"); } catch (e) {}
let v26 = new C3("4294967295", "257");
const v27 = new C3("4294967295", C3);
const v28 = new C3(v27, "257");
class C29 extends C3 {
    static 1024;
    #toString(a31, a32, a33, a34) {
        let v35 = this[a34];
        typeof v35 === "symbol";
        -(-561250721);
        a33["4294967295"] ^= -561250721;
        v26[129] = this;
        const v40 = `
            let [v41,v42,v43,v44] = "symbol";
            const t41 = "symbol";
            t41[v44] = v35;
            ({"c":v26,...v35} = C3);
            C3[6819] = v41;
            ("257")[3048];
            for (const v49 of "symbol") {
                try { v28["p"](a32); } catch (e) {}
            }
            let v54 = 37275;
            const v55 = -v54;
            const v56 = --v54;
            Math.floor(268435440);
            +v56 << v54;
            Math.hypot(v55);
            v54 ^ "257";
        `;
        eval(v40);
        return v27;
    }
    #h;
    [C3];
    static [C3];
    static g = v26;
}
C29[1024] = C29;
const v64 = new C29();
const v65 = v64?.constructor;
try { new v65(); } catch (e) {}
new C29();
new C29();
const v70 = -Infinity;
try { Math.cos(v70); } catch (e) {}
Math.pow(-1073741824, v70);
const v77 = new Int8Array(964446029);
const v78 = v77.buffer;
try { v78.transfer(); } catch (e) {}
const v80 = v27[128];
function f81() {
    return v80;
}
f81.e = f81;
