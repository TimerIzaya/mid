function f0() {
}
[536870912,268435440,5,-56066,-256];
[232302645,9];
[1009881045,9070,-65537,-65536,1073741825,42667,1073741825];
const v6 = new BigUint64Array(243);
new Uint8Array(243);
new Uint8Array(1084);
for (let v17 = 0; v17 < 30; v17++) {
    var a = v17;
}
function f20() {
    return Uint8Array;
}
function f21(a22) {
    function F23() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = -1052649622;
            const v28 = -(-7);
            Math.tan(v28 ** v28);
        } catch(e31) {
        }
    }
    function F32(a34, a35) {
        if (!new.target) { throw 'must be called with new'; }
        const v36 = this.constructor;
        try { new v36(F23, a34, F23, v36); } catch (e) {}
        new F23();
    }
}
Object.defineProperty(Float32Array, 1, { writable: true, configurable: true, get: f20, set: f21 });
Float32Array[1] = -1e-15;
class C39 extends Float32Array {
    constructor(a41, a42, a43) {
        super(a43);
    }
}
class C44 {
    constructor(a46, a47) {
        const v48 = (-2)?.h;
        const v49 = /(x)(x)(x)\1/uis;
        v49[Symbol.toPrimitive] = f0;
        const o58 = {
            4294967295: -7,
            [v49](a53, a54, a55, a56) {
                super.test();
            },
        };
        super.g;
        const v60 = v6.constructor;
        v60[Symbol.toPrimitive] = Symbol;
        try { new v60(v48); } catch (e) {}
        Math.atan2(Math, v60);
    }
}
new C44(-2);
new C44(-1602984247);
function F68(a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
}
