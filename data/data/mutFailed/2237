new Uint16Array(4);
const v5 = new Int16Array(3);
function f8(a9) {
    return -1000.0;
}
Object.defineProperty(Uint16Array, Symbol.toPrimitive, { writable: true, enumerable: true, value: f8 });
const v15 = new Uint16Array(5);
[214.60877903202936,0.6425224724722088,4.0,-0.9674190396745139,685.2929477319658,332808.2093695267,-1.5544508030726264e+308];
const v17 = [-2.6955718184467736,-2.0,0.5996080991940064,-14656.819101149798,1.6719522342168898e+308,-3.0,2.5112709224513345,0.0];
const v18 = [1.6270970798980623e+308,-5.0,-6.587280013650505e+307,-693.275498482235,0.5092643681898388];
class C19 {
    #h = v18;
    [Uint16Array];
    #p(a21, a22, a23, a24) {
        let [] = v5;
        const o25 = {
        };
        new Proxy(this, o25);
        const v29 = v17["copyWithin"](5, a22, a22);
        Int16Array instanceof Int16Array;
        a24[a22] *= v29;
        return 4;
    }
    constructor(a32, a33) {
        try {
            v5.filter(a32);
        } catch(e35) {
        }
        try {
            v15.#p();
        } catch(e37) {
        }
    }
}
new C19(5, 5);
new C19(4, 3);
new C19(5, 3);
const v43 = new Int16Array(7);
v43.valueOf = Symbol;
1024 * 1024;
new Uint16Array(1024);
let v50 = 948880884;
let v51 = 15;
v51++;
Math.ceil(v43);
++v50;
new Float32Array(3415);
let v57 = 12;
v57++;
Int16Array.prototype = Int16Array;
new Int16Array(v57);
const v63 = new BigUint64Array(10);
Float32Array.prototype = Float32Array;
const v66 = new Float32Array(2494);
try { v66.find(Uint16Array); } catch (e) {}
const v68 = [7,v66];
const v70 = ([10,7,v68,v43])?.reverse;
try { v70(); } catch (e) {}
[v63,7];
let v74 = Int32Array;
function f75(a76, a77) {
    ([12]).toLocaleString();
    return Uint16Array;
}
v74.toString = f75;
const v80 = new v74(2917);
const v82 = v74--;
/S4/gvm;
/a?abc+e6H*/gvmsy;
/G(?:ab|cde)b?/udim;
const o87 = {
};
new Proxy(v68, o87);
v80["lastIndexOf"](v82);
