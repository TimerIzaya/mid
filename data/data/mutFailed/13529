function f3(a4) {
    const o39 = {
        "b": a4,
        [a4](a6, a7) {
            super[9007199254740991] = a7;
            function f8(a9, a10, a11, a12) {
                'use strict';
                try { a4(-1073741824, -1073741824, a9, -1073741824, this); } catch (e) {}
                function f17(a18, a19) {
                    const o20 = {
                    };
                    return o20;
                }
                f17();
                Math.fround(a11);
                Math.fround(64);
                return a11 & (64 << 4294967297);
            }
            const v27 = new Uint8ClampedArray();
            class C28 {
                constructor(a30, a31, a32, a33) {
                    const v34 = this.constructor;
                    try { new v34(v27); } catch (e) {}
                    for (let v36 = 0; v36 < 5; v36++) {
                        ~v36;
                        v27[v36] = a33;
                    }
                }
            }
            return a4(a7, a7, -1073741824, a4);
        },
    };
    return o39;
}
const v40 = f3.prototype;
const v41 = f3(-1073741824);
const v42 = f3(f3);
const v43 = f3(-3);
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    a46 - a46;
    a47 >>> a47;
    try {
        try { Symbol.keyFor(Symbol); } catch (e) {}
        class C54 {
        }
        const v55 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
        const v56 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
        class C57 {
            constructor(a59, a60) {
                super[v56] = v55;
            }
        }
        const v61 = new C57(v55, v56);
        function f62(a63) {
            return C57;
        }
        const v66 = [v61];
        const o67 = {
            "arguments": v66,
            "type": "function",
        };
        new Worker(f62, o67);
        this.h = v41;
    } catch(e69) {
    }
    try {
        this.d = a46;
    } catch(e70) {
    }
    function f71() {
        const o78 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a76, a77) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        return o78;
    }
    %PrepareFunctionForOptimization(f71);
    try {
        this.e = a49;
    } catch(e79) {
    }
    Array();
    for (let v83 = 0; v83 < 25; v83++) {
        function f84(a85, a86, a87, a88) {
            return -261.99102172609366;
        }
    }
}
new F44(9007199254740991, -3, v43, v41);
const v93 = new F44(-1073741824, -1073741824, v41, v41);
v93.d = v93;
new F44(-3, -1073741824, v42, v43);
const v95 = /a\sc/g;
Object.defineProperty(v95, "toString", { configurable: true, enumerable: true, value: f3 });
/xyz?/gvdm;
const v97 = /V\118foo[z]*/dmsy;
v97.b = v40;
v97.b = v97;
BigInt64Array.g = BigInt64Array;
BigInt64Array.g = BigInt64Array;
const v100 = new BigInt64Array(257);
new Int16Array(180);
const v106 = new Float64Array(2898);
v106[1117] = v106;
try { new Array(f3); } catch (e) {}
const v110 = Array(1024);
v110[611] = v110;
Uint8ClampedArray[0] = v106;
const v113 = [Uint8ClampedArray];
const v114 = v113?.__defineSetter__;
try { new v114(v110, BigInt64Array); } catch (e) {}
const v116 = Reflect.construct(Uint8ClampedArray, v113);
v116[1] = v116;
const v117 = v116.constructor;
const v118 = v117?.constructor;
new BigUint64Array();
class C121 {
    constructor(a123, a124) {
        function f125(a126) {
            function f127(a128) {
            }
            const v131 = new Uint16Array(1024);
            v131[7] = v131;
            return C121;
        }
        const o134 = {
            "type": "function",
        };
        o134.arguments = v100;
        new Worker(f125, o134);
    }
}
new C121();
try { new v118(v95); } catch (e) {}
new v117(v110);
