function f0() {
}
const v1 = [2.0];
const v2 = [7.830634752107482,0.006033685793877752,202369.19324926357,5.9519043173705874,5.0];
[9.293463637035234e+307,-714469.3194915156,0.608439092183521];
const v4 = [-9.375898432482832e+307,-68618.2769533546,0.0,-2.2250738585072014e-308,844.3805435910124,699.036972819935,5.0,544.1163907117148,-1000000.0];
[0.8603540216556712,204745.99339148472,Infinity,834.3311897106728,572.5958125985496,705811.912100802,888.3256103934357,1000000000000.0,0.3681726408406497,1.7976931348623157e+308];
[-5.0,90574.25408907654,5.582782581800108e+307,-1000000000.0];
new Float64Array(2, v4, v1, -446797586);
new Int8Array(10, v2, 10);
new isNaN(3582);
const v19 = [-536870912,-3592,61205];
for (let i = 0; i < 10; i++) {
    const v20 = v19.constructor;
    class C21 extends v20 {
        static 1 = v20;
    }
}
new Uint16Array(20);
new BigUint64Array(10);
const v8 = new Int32Array(1000);
function f9(a10, a11) {
    const v12 = [-2147483649,-536870912,48907,-2147483647];
    const o13 = {
        __proto__: v12,
    };
    return o13;
}
v8.toString = f9;
new Array(4);
class C17 extends Uint16Array {
    get e() {
        try {
            Array(1);
        } catch(e21) {
        }
        return 20;
    }
    1;
    static #c;
    constructor(a23, a24, a25) {
        super(1000, 20, a24);
        try {
            Array(-9007199254740990);
        } catch(e28) {
        }
    }
    static #h;
    16 = v8;
    #f;
}
new C17();
new C17();
Array(10);
%PrepareFunctionForOptimization(Array);
Array(10);
Array(10);
%OptimizeMaglevOnNextCall(Array);
Array(10);
new C17();
function F36(a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
}
Reflect.construct(F36, [Reflect,Reflect,Reflect], Map);
