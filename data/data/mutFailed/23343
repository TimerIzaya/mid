async function* f3(a4, a5, a6) {
    return a5;
}
const v7 = f3();
const v10 = new Uint16Array(255);
const v11 = v10.buffer;
v11.slice().transfer();
class C14 {
    #d = 12;
    [5] = 12;
    b = 12;
    static #valueOf(a16, a17, a18) {
        v11 && v7;
        return this;
    }
    d = C14;
    static #valueOf(a21, a22) {
        %VerifyType(a22);
        super[12] = "-8";
        let v23;
        try { v23 = new a21(a22, 12, 5); } catch (e) {}
        const t21 = "-8";
        t21.length %= 5;
        a21?.e;
        return v23;
    }
    static #toString(a26, a27) {
        const o30 = {
            "maxByteLength": 613,
        };
        const v32 = new ArrayBuffer(11, o30);
        new BigInt64Array(v32);
        return 613;
    }
}
const v35 = new C14();
const v36 = new C14();
const v37 = new C14();
[12,v35,v37];
[v37,"-8",v36,5];
[12];
const v41 = [-392.0576825237305,0.3449869706009556,4.447039970507995e+307,-5.063798246562485e+307,-568.9796177589394,388231.4033702491,-3.5365646375454567,0.12172568971863451,-4.474791203319841e+307];
const v42 = [9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648];
function f43(a44, a45, a46) {
    return f43;
}
const v49 = ["function",v42,v41];
const o50 = {
    "arguments": v49,
    "type": "function",
};
new Worker(f43, o50);
