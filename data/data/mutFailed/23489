function f6(a7, a8, a9) {
    a8 - a8;
    a9 + a9;
    const o27 = {
        "g": 255,
        get c() {
            const v13 = [this,this,255,a9,-1000000.0];
            const v14 = [53041,v13];
            const v15 = [a8,this,53041,a9,v14];
            v13 instanceof v14;
            function F17(a19, a20, a21, a22) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.c = this;
                } catch(e23) {
                }
            }
            new F17(-36252, 255, v13, a7);
            const v25 = new F17(-36252, v15, v15, 0.07732806113565416);
            const v26 = new F17(53041, v25, v15, a7);
            return v26;
        },
    };
    return o27;
}
const v28 = f6(-5.0, -36252, 53041);
v28.g = v28;
f6(-5.0, -36252, -36252);
f6(0.07732806113565416, 255, 255);
new Int8Array(297);
function f36() {
    function f37() {
        const t32 = (2136873598).constructor;
        t32();
        return -1000000.0;
    }
    return f37;
}
function f41(a42) {
}
Object.defineProperty(BigUint64Array, Symbol.toPrimitive, { enumerable: true, get: f36, set: f41 });
let v48 = new BigUint64Array(2232);
v48[Symbol.toPrimitive] = f36;
let v51 = 89;
v51--;
try { Float32Array.from(0.07732806113565416); } catch (e) {}
new Float32Array(v51);
function f56(a57, a58, a59, a60) {
    a57.d = a60;
    try { a57(BigUint64Array, BigUint64Array, BigUint64Array, a59); } catch (e) {}
    -a60;
    v48 |= a59;
    Math.max(-1e-15);
    const v69 = Float32Array | 268435439;
    9223372036854775807 >> Float32Array;
    Math.hypot(v69);
    for (let i = 0; i < 5; i++) {
        -724330360 >> -724330360;
        "number" ** -724330360;
    }
    return a59;
}
f56.caller = f56;
for (let v75 = 0; v75 < 5; v75++) {
    f56(f56, f56, f56, v75);
}
%OptimizeFunctionOnNextCall(f56);
const v77 = f56(f56, f56, f56, f56);
v77.d = Int8Array;
v77.d = v77;
