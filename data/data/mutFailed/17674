const v1 = new Date();
new Float64Array(255);
const v7 = new BigUint64Array(7);
try {
    v7[Float64Array] >>>= 7;
} catch(e11) {
}
function f13() {
    return f13;
}
const o16 = {
    "execution": "async",
    "type": "major",
};
new Int8Array(16);
Float64Array.d = Float64Array;
const v22 = new Float64Array(257);
const v25 = new Float64Array(3609);
new Date(-2, [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943]);
class C33 {
    n(a35, a36) {
        function F37(a39, a40, a41) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v42 = new F37(a35, 35066, -65537);
        const v43 = new F37("fl", F37, v42);
        F37(v43);
    }
}
try { v25.filter(Float64Array); } catch (e) {}
Float32Array.BYTES_PER_ELEMENT;
new Float32Array(9);
function f50() {
}
const v51 = [601759695];
v51?.groupToMap;
try {
const t0 = 255;
new t0(257);
} catch (e) {}
const v54 = [1073741824,1073741823,1376142744,1073741825];
try { v54.findLastIndex(v54); } catch (e) {}
let v56 = 522675525n;
v56--;
function f58(a59, a60, a61, a62) {
    a60 >>> a60;
    function f65() {
        return v56;
    }
    f50();
    try { new Int8Array(v22, v22, 3609); } catch (e) {}
    const v69 = new v1();
    function f72(a73, a74) {
        const v76 = [,];
        const v77 = [13,-3,1073741824,4294967295,-910142687];
        const o80 = {
            "maxByteLength": 1073741825,
        };
        const v81 = new ArrayBuffer(3, o80);
        v81[v76] = v77;
        const o96 = {
            "g": 1073741824,
            "type": "async",
            "g": 16,
            "e": -1024,
            m(a83) {
                const v86 = new Int8Array(3938);
                let v87 = 3;
                let v88 = 0;
                [...v87] = v86;
                -(v88++);
            },
            get d() {
                super[ArrayBuffer];
                return this;
            },
            "f": 3,
            ...a73,
            "getOwnPropertyDescriptor": f65,
            p(a94, a95) {
                return f65;
            },
            1: 257,
            10: 1073741824,
        };
        return o96;
    }
    f72(f72(f72))[10];
    const v100 = v69.buffer;
    Int8Array.prototype = Int8Array;
    const v103 = new Int8Array();
    try { v103.set(-1024); } catch (e) {}
    let v105 = 1000000000000.0;
    -(v105--);
    v100.slice(2147483648);
    [];
    const t93 = 1.0;
    t93.length += 1.0;
    class C112 {
        ["resolve"] = "resolve";
    }
    %OptimizeFunctionOnNextCall(f65);
    ("6Ct").normalize();
    class C116 {
    }
    Symbol.search = Symbol;
    Date.toString = Symbol;
    class C119 extends Date {
    }
    try { new C119(); } catch (e) {}
    const v121 = new C119();
    try { v121.setMonth(C116, C119); } catch (e) {}
    let v123;
    try { v123 = v54["find"](..."find", a62, ...v51, ...v54, ...v56); } catch (e) {}
    for (const v126 in "1024") {
    }
    const o127 = {
        "execution": "1024",
    };
    Symbol.iterator = Symbol;
    Symbol("bZ");
    class C131 {
    }
    const v132 = new C131();
    const v133 = new C131();
    const v134 = [1073741824,1073741823,1376142744,1073741825];
    function f135() {
        try {
            v134.forEach();
        } catch(e138) {
            with ("toStringTag") {
                length = "toStringTag";
                v133 & v132;
            }
        }
        return "toStringTag";
    }
    f135();
    new Uint8ClampedArray();
    const o142 = {
    };
    v123 <= a61;
    return arguments;
}
for (let v144 = 0; v144 < 10; v144++) {
    v144 % v144;
    const v146 = f58(v144, v144, f50, v56);
    v146[3] = v146;
    const v148 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v149 = [601759695];
    const v150 = [1073741824,1073741823,1376142744,1073741825];
    v150[3];
    function f153(a154, a155, a156, a157) {
        function f159() {
            b = Float64Array;
            v54.b = -302142025;
            function F166(a168, a169) {
                if (!new.target) { throw 'must be called with new'; }
            }
            try {
                v150.forEach(Float64Array);
            } catch(e171) {
            }
            const v172 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            Symbol.toPrimitive;
            const o180 = {
                toString(a176, a177) {
                    return (a157 && Float64Array) <= v172;
                },
            };
            a156[typeof C33 === "undefined"] = -302142025;
            let [,,,v185] = "fl";
            const o204 = {
                "c": -4294967297n,
                [522675525n](a187, a188) {
                },
                "c": v149,
                valueOf(a190, a191) {
                    return a154;
                },
                [-4294967297n](a193, a194, a195, a196) {
                },
                "e": -4294967295,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v148,
                "type": "Vre",
                ..."Vre",
                valueOf(a198, a199) {
                    return v172;
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a201, a202, a203) {
                    return a157;
                },
                __proto__: v185,
                "a": a157,
                "h": Float64Array,
                ...arguments,
                [v25]: a155,
                5: -4294967295,
                6: -268435456,
            };
        }
        f159();
        const v207 = new Int8Array();
        v207.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f159);
        try { v150["find"](..."find", a157, ...v149, ...v150, ...522675525n); } catch (e) {}
        Float32Array <= a156;
        return arguments;
    }
}
%OptimizeFunctionOnNextCall(f58);
f58();
