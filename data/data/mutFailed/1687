class C3 extends Int32Array {
}
const v4 = new C3();
for (let v5 = 0; v5 < 5; v5++) {
    v4["p" + v5] = v5;
}
const v8 = new Uint8ClampedArray(8);
new BigInt64Array(6);
-(-7);
const v15 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v17 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v18 = [601759695];
const v19 = [1073741824,1073741823,1376142744,1073741825];
function f21() {
    let v24 = Float64Array;
    b = v24 = Uint8ClampedArray;
    v15.length;
    try {
        v19.forEach(v24);
    } catch(e27) {
    }
    const v28 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    const v30 = Symbol.toPrimitive;
    const o36 = {
        toString(a32, a33) {
            const v34 = 6 && v24;
            a32 *= v30;
            return v34 <= v28;
        },
    };
    const o56 = {
        "c": -4294967297n,
        [522675525n](a39, a40) {
        },
        "c": v18,
        valueOf(a42, a43) {
            return v8;
        },
        "b": -4294967295,
        [-4294967297n](a45, a46, a47, a48) {
        },
        "e": -4294967295,
        "e": -268435456,
        "maxByteLength": -4294967295,
        "arguments": v17,
        ...v18,
        "type": "Vre",
        ..."Vre",
        valueOf(a50, a51) {
            return v28;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        "type": "Vre",
        toString(a53, a54, a55) {
            return 6;
        },
        5: -4294967295,
        6: -268435456,
    };
}
new Float32Array(257);
class C62 extends Float32Array {
    constructor(a64, a65, a66) {
        new Uint8Array(2, 2, 2);
        const v72 = new Float32Array(165);
        v72[35] = v72;
        super(6);
        class C74 extends SharedArrayBuffer {
        }
        class C75 {
        }
        function f76() {
            return "ownKeys";
        }
        const v77 = super.every(a64, this);
        v77 / v77;
    }
    #b = Uint8ClampedArray;
    /*
    constructor(a80, a81, a82) {
        super(a82);
    }
    */
    /*
    constructor(a84, a85) {
        const o88 = {
            "type": "minor",
        };
        o88.b = o88;
        gc(o88);
    }
    */
    get d() {
        new BigInt64Array("toString", 6, 257);
        return this;
    }
}
new C62(C62, 6, "undefined");
const v94 = new C62(Float32Array, 257, "ownKeys");
const v97 = Array();
class C98 extends Array {
}
class C99 extends C98 {
    [1] = v97;
}
new C62(v94, 8, "undefined");
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
