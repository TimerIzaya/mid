let v3 = 130;
v3--;
class C6 {
    constructor(a8) {
        const v9 = this.constructor;
        try { new v9(a8, this); } catch (e) {}
        ("buffer")["search"](..."buffer", ..."search", ..."search", a8, ..."search");
    }
}
new C6(C6);
const v15 = new Uint8ClampedArray(v3);
v15[37] = v15;
function f17(a18, a19, a20, a21) {
    return arguments;
}
f17(f17, f17, Date, f17);
new BigInt64Array(0);
const v29 = new Float32Array(257);
const v30 = [-29345,48135,-2,-485818299,0,-34652,7,-65537];
function F31(a33) {
    if (!new.target) { throw 'must be called with new'; }
}
class C34 {
}
new C34();
let v36;
try { v36 = v30.group(v30, v30, v30, v30, v30); } catch (e) {}
let v38 = 16;
v38--;
const v41 = Object(v38);
function f42(a43, a44) {
    a43 = v29;
    new Uint32Array(0);
    new Uint8ClampedArray(3500);
    new Uint8Array(127);
    return v36;
}
const v55 = Symbol?.keyFor;
try { new v55(Symbol); } catch (e) {}
Object.defineProperty(v41, Symbol.replace, { writable: true, enumerable: true, value: f42 });
class C59 {
}
const v60 = new C59();
const t43 = v60.constructor;
t43(v30, Int8Array);
v41[Symbol.replace] = Symbol;
for (let v65 = 0; v65 < 5; v65++) {
    v65 === v65;
    const v67 = Symbol.replace;
    Symbol.for(v67.description);
    v41[v67] = v36;
}
