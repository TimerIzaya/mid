new Float64Array(23);
new Float32Array(1);
new BigInt64Array(512);
-Infinity;
function f15(a16, a17, a18, a19) {
    return a17;
}
const v20 = f15();
const v23 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v24 = [601759695];
v24[0] = v24;
const v25 = [1073741824,1073741823,1376142744,1073741825];
function f27(a28, a29, a30, a31) {
    arguments.toString();
    function f34() {
        const v36 = ("Vre").toLocaleUpperCase;
        let v37;
        try { v37 = new v36(v36, -4294967297n, a30, v25); } catch (e) {}
        const v38 = ("Vre").fixed(f27);
        let v40 = -268435456;
        v40--;
        v40 + v40;
        -v38;
        const o57 = {
            "c": v23,
            [522675525n](a45, a46) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v24,
            valueOf(a48, a49) {
                return a28;
            },
            "e": -4294967295,
            "e": v40,
            "maxByteLength": -4294967295,
            "arguments": v23,
            ...v24,
            "type": "Vre",
            ..."Vre",
            valueOf(a51, a52) {
                return -4294967295;
            },
            ..."Vre",
            4: "Vre",
            "c": v40,
            "type": "Vre",
            "type": "Vre",
            toString(a54, a55, a56) {
                return a54;
            },
            5: v37,
            6: v40,
        };
        o57.valueOf();
        return f34;
    }
    f34.length;
    v20();
    Int8Array.a = Int8Array;
    const v62 = new Int8Array();
    try { v62.findIndex(v20); } catch (e) {}
    v62.buffer.slice();
    %OptimizeFunctionOnNextCall(f34);
    ("find").strike();
    try { v25["find"](..."find", a31, ...v24, ...v25, ...522675525n); } catch (e) {}
    return v25;
}
for (let v69 = 0; v69 < 5; v69++) {
    f27(v24, v69, v69, v25);
}
%PrepareFunctionForOptimization(f27);
const v71 = f27();
%OptimizeFunctionOnNextCall(f27);
f15(v71, f27, -128, v20);
