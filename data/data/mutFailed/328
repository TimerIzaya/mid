const v0 = [];
function f1() {
    const o15 = {
        "f": v0,
        [v0]: v0,
        n() {
            v0[this] = v0;
            const v5 = new Uint8Array(1024);
            new Float64Array(128);
            v5[1673];
            try {
                f1();
            } catch(e12) {
            }
            new Uint8Array(518);
            return this;
        },
    };
    return o15;
}
f1[Symbol.iterator] = f1;
Float32Array.BYTES_PER_ELEMENT = Float32Array;
512 / 512;
try { new Uint32Array(f1, f1, 4); } catch (e) {}
2085 - 2085;
const v32 = -257;
let v34 = 10;
for (; v34--;) {
}
const v36 = f1();
const v37 = f1();
v37[Symbol.toPrimitive] = f1;
const v40 = f1();
function F41(a43) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(v34); } catch (e) {}
    try {
        this.b = a43;
    } catch(e45) {
    }
}
new F41(v40);
delete v36[2];
const v48 = v37.f;
try { v48.copyWithin(2085, F41); } catch (e) {}
const v50 = v48 == v36;
const o51 = {
};
o51.c = BigInt64Array;
o51.c = o51;
try {
    o51.f = v50;
} catch(e52) {
}
try {
    const o53 = {
    };
    o53.f = v32;
    o53.f = v50;
    o53.h = v50;
} catch(e54) {
}
try {
    const o55 = {
    };
    o55.a = Float32Array;
    o55.f = v50;
    o55.h = v50;
    o55.a = v40;
} catch(e56) {
}
try {
    const o57 = {
    };
    o57.f = v50;
    o57.h = v50;
    o57.e = v50;
} catch(e58) {
}
const v59 = new F41(v40);
v59.b = v59;
const v60 = new F41(v40);
class C61 {
    [v37];
    #valueOf(a63, a64, a65, a66) {
        const o67 = {
            __proto__: this,
            "h": v0,
            ...v37,
            "e": F41,
        };
        return a66;
    }
}
try { new C61(); } catch (e) {}
const v69 = new C61();
function f70(a71, a72) {
    const o73 = {
        "apply": f1,
        "construct": f1,
        "defineProperty": Symbol,
        "get": Symbol,
        "isExtensible": Symbol,
        "ownKeys": Symbol,
        "set": f1,
        "setPrototypeOf": Symbol,
    };
    new Proxy(C61, o73);
    return o51;
}
v69.constructor = f70;
const v76 = v69?.constructor;
try { new v76(); } catch (e) {}
const v78 = new C61();
const v79 = new C61();
const v80 = v79?.propertyIsEnumerable;
try { new v80(v59); } catch (e) {}
const v82 = /xyz{1,32}?/gusy;
class C83 {
    268435440 = v82;
}
C83.prototype = C83;
const v84 = new C83();
const o85 = {
    ...v84,
    [v60]: v60,
    __proto__: v78,
    ...v82,
    "f": v60,
    "d": v84,
};
