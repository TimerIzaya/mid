function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 4294967295;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
const v7 = v6?.constructor;
let v8;
try { v8 = new v7(); } catch (e) {}
const v9 = [F0,v6,v6];
const v10 = [v4,F0];
v10[1] = v10;
[v10,v9];
NaN + NaN;
[4,-12888];
[268435439];
const v18 = [2147483647,7];
try { v18.toString(); } catch (e) {}
const v24 = new v8();
const v25 = new v8();
function f26(a27, a28) {
    const o40 = {
        "h": v24,
        [v25](a30, a31, a32) {
            super[-9223372036854775807];
        },
        set b(a35) {
        },
        [a28]: v24,
        __proto__: v8,
        "c": 9,
        set h(a37) {
        },
        o(a39) {
            return v25;
        },
    };
    return o40;
}
%PrepareFunctionForOptimization(f26);
new Int16Array(1239);
2102 >>> 2102;
const v45 = new Float64Array(2102);
const o47 = {
    "type": "async",
};
function f48(a49, a50, a51, a52) {
    try { a50(); } catch (e) {}
    const v55 = undefined >> undefined;
    const v57 = new Set();
    const v58 = v57.add();
    const v61 = typeof v55 === "symbol";
    return [v58,v61,v61];
}
for (let v63 = 0; v63 < 10; v63++) {
    f48(v63, f48);
}
try { v45.set(v45); } catch (e) {}
parseInt("pop");
class C70 {
}
const v71 = new C70();
v71.g = v71;
new Int32Array(3137);
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    const v80 = this.constructor;
    try { new v80(a79); } catch (e) {}
    for (let v82 = 0; v82 < 5; v82++) {
        new Date();
    }
}
const v85 = new Int32Array(2890);
v85.lastIndexOf();
function F88() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v90 = 0; v90 < 50; v90++) {
        v90 - v90;
        for (let v92 = 0; v92 < 25; v92++) {
            ("p").codePointAt(Uint8ClampedArray);
        }
    }
}
