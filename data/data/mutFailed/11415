const v4 = -2n ^ -2n;
const o5 = {
    [-15603n]: 4n,
    "c": v4,
};
o5[4n] = -2n;
class C8 {
    constructor(a10, a11, a12, a13) {
        try { this.constructor(-38332n, a10, -9007199254740992n, a13); } catch (e) {}
        ~a11;
        const v16 = a12--;
        const v17 = a13 << a13;
        v17 < v17;
        const v19 = [-872285502,529966623,-3,-2147483649];
        v19[3] = v19;
        const v20 = [4294967296,-4294967296,536870887,1027604358];
        const v21 = [-3,255,5,8,536870887,-9007199254740991,-61355,-1073741824,4294967296];
        super[this] = v16;
        49038n ** C8;
        const v24 = Symbol.iterator;
        const o33 = {
            [v24]() {
                let v26 = 10;
                const o32 = {
                    next() {
                        v26--;
                        const v30 = v26 == 0;
                        const o31 = {
                            "done": v30,
                            "value": v26,
                        };
                        return o31;
                    },
                };
                return o32;
            },
        };
        try { v21.lastIndexOf(v20); } catch (e) {}
    }
    static toString(a36, a37, a38) {
        new Array(141);
        new Int16Array(3534);
        new Float64Array(2);
        new Uint8ClampedArray(240);
        return 141;
    }
}
const v54 = C8?.constructor;
try { new v54(C8); } catch (e) {}
const v56 = new C8(-15603n, -38332n, -15603n, -9007199254740992n);
try { v56.propertyIsEnumerable(-15603n); } catch (e) {}
const v58 = v56?.__lookupGetter__;
try { new v58(C8); } catch (e) {}
const v60 = new C8(4n, 49038n, -2n, -15603n);
const v61 = v60?.constructor;
try { new v61(v56, C8, v60, v56); } catch (e) {}
const v63 = new C8(4n, 4n, -15603n, -9007199254740992n);
const v64 = v63?.constructor;
v64.b = v64;
try { new v64(4n, 4n, v60, -9007199254740992n); } catch (e) {}
new BigUint64Array(12);
const v71 = new Int32Array(11);
try { v71.findIndex(v56); } catch (e) {}
0 < 0;
const v76 = new BigInt64Array(0);
try { v76.entries(); } catch (e) {}
let v78;
try { v78 = v76.lastIndexOf(-9007199254740992n); } catch (e) {}
v78 | v78;
-425087802 ^ -425087802;
const v82 = -425087802 >>> -425087802;
~v82;
try { new Array(BigUint64Array); } catch (e) {}
class C86 extends Array {
}
const v87 = new C86();
try { v87.group(v82); } catch (e) {}
