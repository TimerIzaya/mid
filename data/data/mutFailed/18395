const v2 = new Uint32Array(6);
const v5 = new Uint16Array(1024);
const v8 = new Float32Array(3695);
function f9(a10, a11, a12, a13) {
    const o24 = {
        __proto__: v2,
        p(a15, a16) {
            const o23 = {
                __proto__: this,
                116: Uint32Array,
                get e() {
                    return v8;
                },
                ...v2,
                get d() {
                    function f19(a20, a21, a22) {
                        'use strict';
                        return a20;
                    }
                    return this;
                },
                "f": 6,
            };
            return Uint16Array;
        },
        "b": a12,
        "c": a11,
        [a10]: Float32Array,
        "h": Uint32Array,
    };
    return o24;
}
f9(v2, 1024, 1024, 6);
f9(v5, 3695, 1024, 3695);
f9(Uint32Array, 6, 3695, 6);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o34 = {
    };
} catch(e35) {
}
class C36 {
    static p(a38) {
        const o54 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f40() {
                        [512n];
                        let v43 = "function";
                        function f44() {
                            return v43;
                        }
                        const v48 = "size" && "boolean";
                        with ("boolean") {
                            length = v48;
                            ({"length":v43,} = "isExtensible");
                            f44();
                        }
                        return this;
                    }
                    const v50 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e53) {
                }
                return -128;
            },
        };
        return o54;
    }
    g;
}
try { new C36(); } catch (e) {}
const v56 = new C36();
class C58 extends Map {
}
new C58();
new Float32Array();
v56.g;
new C36();
new C36();
class C65 extends C36 {
    static n(a67, a68) {
        function F70(a72, a73, a74, a75) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C82 {
        }
        this[Symbol.matchAll] = a68;
        a67 += C58;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e87) {
        }
        return -128;
    }
    #c = C65;
    valueOf(a91, a92, a93) {
        super.f;
    }
    constructor(a96, a97, a98, a99) {
        super();
        function f100() {
            const t110 = [];
            t110[6] = 4294967295;
            new Int32Array();
            const o115 = {
                get b() {
                    return Int32Array;
                },
                "c": f100,
                toString(a108, a109, a110) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a112) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a114) {
                },
            };
        }
        for (let v116 = 0; v116 < 5; v116++) {
            f100();
        }
    }
    set f(a119) {
        for (const v120 of a119) {
            try {
            } catch(e121) {
            }
        }
        class C123 extends SharedArrayBuffer {
        }
        const o124 = {
        };
        try {
        } catch(e125) {
        }
        try {
            const o126 = {
            };
        } catch(e127) {
        }
        try {
            const o128 = {
            };
            o128.c = -128;
            o128.e = this;
        } catch(e129) {
        }
        try {
            const o130 = {
            };
        } catch(e131) {
        }
    }
}
const v132 = new C65();
gc(v132);
class C135 {
}
function f136(a137, a138, a139, a140) {
    const o163 = {
        p(a142, a143, a144) {
            ~0;
            ("-536870912").normalize;
            function f149() {
            }
            try {
                for (let v150 = 0; v150 < 10; v150++) {
                    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                        length | length;
                    }
                    function F157(a159) {
                        if (!new.target) { throw 'must be called with new'; }
                        this.b;
                    }
                    new F157();
                }
                this.valueOf = f149;
            } catch(e162) {
            }
        },
    };
}
for (let v164 = 0; v164 < 25; v164++) {
}
const v166 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f167(a168, a169) {
    const o171 = {
        get d() {
        },
    };
}
f167();
const v173 = f167(v166);
try { v173(956206316, 956206316); } catch (e) {}
