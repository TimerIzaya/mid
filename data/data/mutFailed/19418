new Uint8ClampedArray(584);
const t1 = 1933;
const v4 = new t1();
function f5() {
    return f5;
}
const v6 = f5.arguments;
function f7() {
    for (let v8 = 0; v8 < 5; v8++) {
        const v12 = Array(36862, v6).reverse();
        try { v12.copyWithin(v4); } catch (e) {}
    }
    return f5;
}
%PrepareFunctionForOptimization(f7);
this.setTimeout();
try {
    BigInt.asUintN(-15843, 45011n);
} catch(e21) {
}
new Int8Array(1933);
const v25 = new Uint16Array(5);
const v26 = [1000.0,-2.0];
[-566129.1999229374,-2.0,-2.2250738585072014e-308];
const v28 = [-1.7976931348623157e+308,1000000000.0,867887.6042050705,-1000000000.0,5.0,-2.2250738585072014e-308,2.2250738585072014e-308,249620.5428979788,1000000000000.0];
const v30 = new WeakSet();
for (let v31 = 0; v31 < 25; v31++) {
    v30["p" + v31] = v31;
}
function f34() {
    return v26;
}
class C35 extends f34 {
    #g = Int8Array;
    static #n(a37, a38, a39, a40) {
        try {
            v25.__proto__ = v28;
        } catch(e41) {
        }
        return 1933;
    }
    n(a43, a44, a45) {
        f34();
        %PrepareFunctionForOptimization(f34);
        f34();
        f34();
        %OptimizeMaglevOnNextCall(f34);
        f34();
        return this;
    }
}
new C35();
new C35();
new C35();
const v54 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
v54[5] = v25;
Math.tan(-532550611);
const v61 = new Uint16Array(9);
v61.includes(9223372036854775807);
