class C3 {
    static set d(a5) {
        ("65535").lastIndexOf(128, 65536);
        const v10 = "fround" >>> "fround";
        (v10 >>> v10) != 65536;
        let v14;
        try { v14 = a5["o"]("o", C3); } catch (e) {}
        [this];
        const v16 = ++v14;
        try {
            super.indexOf("fround", "o", v16, this, -1e-15);
        } catch(e18) {
        }
    }
    o(a20, a21, a22, a23) {
        class C24 {
        }
    }
    constructor(a26, a27) {
        for (let v28 = 0; v28 < 5; v28++) {
            const v30 = new Map();
            v30["p" + 40638] = 40638;
            const o33 = {
                ...v30,
            };
        }
    }
    1078;
    #f;
    4;
}
const v34 = C3?.constructor;
try { new v34(-1e-15); } catch (e) {}
const v36 = new C3();
new C3();
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
}
function f44() {
    return f44;
}
class C45 extends f44 {
}
const v46 = new C3();
[v36,[-1e-15,-1e-15,v46,40638,-1e-15],"fround",["fround",C3,v36,v46,C3]];
const v52 = new BigInt64Array(2268);
new Int32Array(157);
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(); } catch (e) {}
    a59 >= a59;
    const v63 = this.constructor;
    try { new v63(); } catch (e) {}
}
class C65 extends F57 {
}
new C65();
try { v34["atan2"](); } catch (e) {}
function F70(a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = [-0.685155357392599,5.0];
    function F74(a76, a77, a78, a79) {
        if (!new.target) { throw 'must be called with new'; }
        const v80 = this.constructor;
        try { new v80(a77, F70, v80); } catch (e) {}
        v73.length &= 1;
    }
    new F74();
}
new F70();
const v85 = new Uint8Array(4096);
try { v85.set("fround"); } catch (e) {}
257 + 257;
try { new Float64Array("fround", 40638, 40638); } catch (e) {}
const v92 = new BigInt64Array();
for (const v93 in v92) {
}
const t77 = -1e-15;
const v94 = new t77();
function f95() {
    return f95;
}
const v96 = f95.arguments;
function f97() {
    for (let v98 = 0; v98 < 5; v98++) {
        const v102 = Array(36862, v96).reverse();
        try { v102.copyWithin(v94); } catch (e) {}
    }
    return f95;
}
f97();
const v105 = new Float64Array(257);
try { v105.join("fround"); } catch (e) {}
v105.reverse();
v52 * v52;
const v109 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v110 = [1073741824,1073741823,1376142744,1073741825];
function f111(a112, a113, a114, a115) {
    function f116() {
        try {
            v110.forEach(a113, v109);
        } catch(e118) {
        }
        return a112;
    }
    f116();
    const v121 = eval();
    %OptimizeFunctionOnNextCall(f116);
    return v121;
}
