function f0() {
    const o13 = {
        "f": 8.046446345112347e+307,
        "c": "4cW",
        ..."4cW",
        "e": 8,
        536870888: 8,
        "g": 8.046446345112347e+307,
        "a": 8,
        "d": "4cW",
        ..."4cW",
        [8](a5) {
            let v6;
            try { v6 = new a5(8.046446345112347e+307); } catch (e) {}
            const v7 = [8];
            let v8;
            try { v8 = a5(8.046446345112347e+307, 8, v6, 8); } catch (e) {}
            v8 % v7;
            for (let v10 = 0; v10 < 32; v10++) {
                v6[v6 + v10] = v10;
            }
            return v7;
        },
    };
    return o13;
}
const v14 = f0();
f0();
const v16 = f0();
function F17(a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a19;
    } catch(e20) {
    }
}
new F17(v16);
new F17(v14);
new F17(v16);
new WeakSet();
[-975406.5155336856,2.220446049250313e-16,1000000000.0,-5.195927347020259,-590816.8808704764,-1.7976931348623157e+308,1000000000.0];
[0.8618822246696196,-3.0,-836.5022531363416,1e-15,-1000000000000.0,4.786630496380859];
[-1000000.0,-154.93696403840863,2.0];
const v34 = new Float32Array(1000);
const v37 = new Uint8Array(201);
const t45 = 1000;
new t45(129);
v14.lastIndexOf();
v37[6] = v34;
const v0 = [];
[-10939,-50816,255,1073741824,40774,-22517,29712];
const v2 = [-21073,1073741824,-1899177080,9007199254740990];
[-268435456,268435440,512,-1603,7,127,1024];
const v6 = new Uint8Array(1024);
const v8 = 14 >>> 14;
const v9 = [-1073741824,-393008115,37190067,-1024,1000,-804470190,-12];
[65535,-2147483649,1336774097,629081453,2147483648,9007199254740992,-44278,536870889,9007199254740991,60840];
[-571990019,1,256];
v9 === v9 ? v9 : v9;
const o17 = {
    "maxByteLength": v6,
};
const v19 = new ArrayBuffer(4096, o17);
new Uint32Array(v19);
const v22 = new Uint16Array(14);
v22[0];
1870 < 1870;
for (const v26 in v22) {
    try {
        v22[v26] = v22;
    } catch(e27) {
    }
}
new Uint8Array(1870);
const v31 = [];
const v32 = v2?.__defineSetter__;
let v33;
try { v33 = new v32(14, v31); } catch (e) {}
const v34 = v31.groupToMap;
let v35;
try { v35 = v34(); } catch (e) {}
const o36 = {
    "f": v8,
    __proto__: v0,
};
try { v33(Uint16Array); } catch (e) {}
const o38 = {
};
new Proxy(v9, o38);
let v42 = -2;
const v43 = v42--;
Math.sin(v8);
v43 >> (v8 & v42);
Math.random();
Math.cosh(v33);
Math.log1p(v42);
for (let i = 0; i < 5; i++) {
    function f51() {
        return Int16Array;
    }
    try {
        v33 = f51;
    } catch(e52) {
    }
    Int16Array[2] = v35;
    for (let v53 = 0; v53 < 10; v53++) {
    }
}
