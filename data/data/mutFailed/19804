class C3 {
    257 = "G4l";
    n(a5, a6) {
        try {
            this.a = a5;
        } catch(e7) {
        }
        return "-13";
    }
    static [0.0] = "-13";
    ["-13"] = "-13";
    [0.0] = 0.0;
    ["G4l"];
}
const v8 = new C3();
const v9 = v8?.__defineGetter__;
try { new v9(C3, "G4l"); } catch (e) {}
const v11 = new C3();
new C3(v11, "-13");
-22964 / -22964;
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = -1;
    this.d = F17;
    const v21 = this?.__lookupGetter__;
    try { new v21(a20); } catch (e) {}
    -a20;
    try {
        this.d = -268435456;
    } catch(e24) {
    }
}
new F17(-1, -268435456);
const v26 = new F17(-268435456, -268435456);
new F17(-268435456, -22964);
function f31() {
    function f32() {
        function f33(a34, a35, a36, a37) {
            a34[1];
            a35--;
            a34[0] = a34;
            a35 <= a35;
            arguments[1] = arguments;
            const v42 = arguments?.__lookupGetter__;
            try { v42.constructor(); } catch (e) {}
            let v44;
            try { v44 = v42(v42, f33, a35, arguments); } catch (e) {}
            return v44;
        }
        return f33;
    }
    return f32;
}
function f45(a46) {
    v26[a46] &= a46;
}
Object.defineProperty(Uint16Array, "constructor", { writable: true, configurable: true, get: f31, set: f45 });
const v47 = Uint16Array?.constructor;
try { new v47(-22964); } catch (e) {}
const v49 = new Uint16Array(9);
v49[4];
v49.includes(true, -706152110);
