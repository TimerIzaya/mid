new Uint8Array(2237);
const v5 = new Uint8Array(14);
new Float32Array(3176);
function f12() {
    const o23 = {
        "e": -1781241988,
        8: -1781241988,
        "c": -1781241988,
        ..."g",
        ..."g",
        [1](a17, a18) {
            Object.defineProperty("n", "d", { writable: true, value: "n" });
            let v22;
            try { v22 = ("construct").concat(f12, Uint8ClampedArray, this); } catch (e) {}
            v22["n"] = Uint8ClampedArray;
        },
    };
    return o23;
}
[f12,f12()];
class C26 extends Uint8Array {
    static h = v5;
    constructor(a28, a29) {
        const o43 = {
            84: arguments,
        };
    }
    static #valueOf(a49, a50, a51) {
        new Float32Array(3433);
        new Uint16Array(5);
        new Uint8ClampedArray(4096);
        return Float32Array;
    }
}
new C26();
new C26();
("c").split("toString");
function F65() {
    if (!new.target) { throw 'must be called with new'; }
}
function f67(a68, a69) {
    a69.constructor(a69);
    return f67;
}
new C26();
const v73 = [0.0,-Infinity,-147.46499796325293,-3.0,0.010365536828205624];
function f74() {
    const v76 = [65537,1073741825,7841,-12,13];
    const v77 = [1073741823,4294967295];
    v77[1] = v77;
    function F78(a80, a81, a82) {
        if (!new.target) { throw 'must be called with new'; }
        const v83 = this.constructor;
        class C85 {
            constructor(a87) {
                ("valueOf").localeCompare(a87, "valueOf");
            }
        }
        try { new v83(a80, a81, a81); } catch (e) {}
        a80.pop();
        a82.g = a82;
    }
    new BigUint64Array();
    5.0 / -2.220446049250313e-16;
    const v96 = new F78(v76, v77, WeakSet);
    new F78(v77, v77, v96);
}
v73.toString = f74;
/a\Sc?/gvy;
const v100 = /a|bh(x)(x)(x)\1/gusy;
try { v100.compile(v73); } catch (e) {}
