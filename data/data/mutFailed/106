function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        Math.log10();
    }
    Object.defineProperty(this, "b", { writable: true, enumerable: true, set: f2 });
    try {
        this.g = -128;
    } catch(e7) {
    }
    try {
        this.b = -128;
    } catch(e8) {
    }
}
new F0();
new F0();
new F0();
new Uint8ClampedArray(595);
new BigUint64Array(64);
new Uint8Array(0);
function f21() {
    return 64;
}
new WeakSet();
[12];
for (let i = 0; i < 25; i++) {
    new Uint8ClampedArray(129);
}
[-128,-267518319,4,-65537];
[-28165,1073741824,-65535,-9007199254740991,-1024,-13,5,-65537];
const v2 = [6,4096,2,-1,-2147483648,1073741824,2,8];
const v4 = new Date();
class C5 {
    set d(a7) {
        v2 instanceof a7;
        delete this?.b;
        try {
            Date("n");
        } catch(e12) {
        }
    }
    c = v4;
    static 7;
    2147483649;
}
const v13 = new v4();
const v14 = new v13();
const v15 = new C5();
const v16 = [v15,v15,Date,v15,Date];
const v17 = [v16,v16,v16,v16];
[v4,v17,v15,v13,v17];
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
}
new F20();
const v26 = new Set();
function f27() {
    return v26;
}
const v28 = v14();
v28 > v2;
b = 536870889;
Object.defineProperty(v28, "b", { configurable: true, set: f27 });
