new Int8Array(127);
const v5 = new Uint8ClampedArray(127);
v5.toLocaleString();
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a10;
}
const v12 = new Uint32Array(183);
const v15 = new Uint8Array(9);
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a18;
    } catch(e22) {
    }
    try {
        this.c = a18;
    } catch(e23) {
    }
    try {
        this.a = Uint32Array;
    } catch(e24) {
    }
}
new F16(9, 127, 9, Int8Array);
new F16(9, 183, 127, Uint32Array);
new F16(183, 9, 127, v15);
const v29 = new Set();
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a32;
    } catch(e34) {
        const v35 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
        const o36 = {
        };
        new Proxy(v35, o36);
        for (let [v39,v40] of a32) {
            try {
            } catch(e41) {
            }
        }
    }
    try {
    } catch(e42) {
    }
    const v43 = v29[this];
    try {
        new F30(v43);
    } catch(e45) {
    }
}
new F30();
const v47 = [65537,268435441,63298,-5,1235122603];
const v48 = [128,215394418];
const v49 = v48.entries();
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
}
const v56 = new F30();
new F50();
const v65 = ("string").trimStart();
new Uint16Array(8);
const v69 = [0.6962759092984843];
let v70 = [4.55590263310031,1e-15,2.220446049250313e-16,4.0,3.0];
class C71 {
    constructor(a73, a74, a75, a76) {
        v70 = a74;
    }
}
const v77 = new C71(v69, C71, C71, v69);
v70.unshift(v77, v12, [v15,v15]);
v49[3];
let v83;
try { v83 = v65(); } catch (e) {}
v47[v83] = v48;
~0;
v56.__proto__;
-35417 - -35417;
