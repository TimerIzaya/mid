const v0 = [1.1116948397021132e+308,2.220446049250313e-16,1000000000000.0,711.0554419203668,-2.833558799705999,-193.41927385745737,541537.0090739853,2.0,0.31510408981986715,Infinity];
const v1 = [1000.0,0.6469614597305622,-1000.0,9.680447631439748,-2.2250738585072014e-308,-2.6831259313584592,2.220446049250313e-16,0.4761303236574701,2.0];
const v2 = [-1.7976931348623157e+308,1.7976931348623157e+308,484.62421264677755,4.0,-1.0,0.9940771021845329,-101.06114866060386,-2.0];
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try { a6.push(a7); } catch (e) {}
    a7[1] = a7;
    Math.acosh(1073741825);
    do {
    } while ((() => {
            const v15 = 0 < 7;
            Int16Array(null);
            return v15;
        })())
    try {
        this.f = a6;
        function F20() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = 3;
            } catch(e23) {
            }
            try {
                this.f = 3;
            } catch(e24) {
            }
            try {
                this.h = 3;
            } catch(e25) {
            }
        }
        new F20();
    } catch(e27) {
    }
}
new F4(v0, v0);
const v29 = new F4(v0, v2);
const v30 = new F4(v0, v2);
const v31 = [v29];
const v32 = [v30,F4,v30,v30,v31,v29,null];
v32[4] = v32;
const v33 = [v31,v1,null];
try { v33.at(v1); } catch (e) {}
function f37(a38, a39) {
    const o40 = {
        [a39]: v1,
    };
    return o40;
}
%PrepareFunctionForOptimization(f37);
45775 >>> 45775;
for (let v45 = 0; v45 < 25; v45++) {
    Math.sin(v45 ** 2);
}
const v53 = new Uint32Array(4);
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this?.constructor;
    try { new v61(0.29489550717955537, a59); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e64) {
    }
}
const v65 = v53?.constructor;
try { new v65(v1, "a1", "a1"); } catch (e) {}
v53.fill();
