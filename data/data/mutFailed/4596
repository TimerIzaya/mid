let v4 = 0;
while (v4 < 2) {
    const t2 = "clz32";
    t2["isFinite"] = "isFinite";
    const o9 = {
        "maxByteLength": 2147483648,
    };
    const v11 = new ArrayBuffer(12, o9);
    new Float32Array(v11);
    v4++;
}
const v16 = new Uint32Array(1000);
const v18 = ("-958921533")["search"]("search");
const t13 = "isFinite";
t13[9] %= v18;
try { v18.o("isFinite", v16, Uint32Array); } catch (e) {}
delete v16?.length;
new BigUint64Array(7);
new Uint8Array(921);
const v27 = [536870888,8];
function f28() {
    function f29(a30, a31) {
        -2.241327492701015 & 9007199254740991;
        return a31;
    }
    return f29;
}
function f35(a36) {
    typeof a36 === "symbol";
}
Object.defineProperty(v27, "constructor", { writable: true, configurable: true, enumerable: true, get: f28, set: f35 });
Object.defineProperty(v27, Symbol.isConcatSpreadable, { writable: true, value: "clz32" });
v27.concat(v27);
