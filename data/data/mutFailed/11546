new BigInt64Array(16);
const v5 = new Float32Array(1233);
const v6 = v5[257];
v6 + v6;
6 | 6;
const v10 = 6 + 6;
v10 != v10;
function f13() {
    const v14 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
    v14.includes(...v14);
    return Float32Array;
}
Float32Array.toString = f13;
Float32Array.prototype = Float32Array;
const v16 = new Float32Array(6);
v16[Symbol.toPrimitive] = f13;
v16[4] = v16;
const v19 = [Float32Array];
const v20 = v19[0];
v20.e = v20;
v20.e = v20;
v19.g = v19;
[BigInt64Array,v19,Float32Array];
[BigInt64Array,6,v19,v5];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
}
F23.length = F23;
const v27 = new F23();
function f28(a29) {
    a29.__proto__;
    const v31 = [65537,268435441,63298,-5,1235122603];
    function F32(a34, a35, a36, a37) {
        if (!new.target) { throw 'must be called with new'; }
        const v38 = this.constructor;
        try { v38(6, 6, v31); } catch (e) {}
    }
    return v31;
}
v27.constructor = f28;
try { v27.constructor(6, Float32Array); } catch (e) {}
const v41 = typeof v27;
try { v41.toString(); } catch (e) {}
try { v41.toUpperCase(); } catch (e) {}
("number")[5];
const v46 = v41 === "number";
try { Math.asinh(v19); } catch (e) {}
Math.asinh(v46);
