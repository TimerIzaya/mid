const v1 = new Set();
const v2 = [255,-4,11,9007199254740992,-1,6,-2147483647,536870889,1073741824,-1239642617];
const v3 = [-9007199254740992,7512,268435440];
const v4 = [-48031,-9007199254740991,-62802,5,0,-1024,-1182094033];
class C5 extends Set {
    constructor(a7, a8) {
        super(a8);
        const o12 = {
            "execution": "async",
            "type": "major",
        };
        gc(o12);
        const v14 = a8 !== v1;
        if (v14) {
            try { new a7(this, ...v2, a8, v1, ...this); } catch (e) {}
        } else {
            try { a7(a8, a7, v14, a7); } catch (e) {}
        }
    }
    86 = v3;
    static 255 = v4;
    #g = v2;
    9;
}
const v17 = new v2(v3, v3);
const v18 = new C5(v2, v4);
new C5(v17, v18);
class C20 extends Set {
    #o(a22, a23, a24, a25) {
        super.forEach(a23);
        super.size <<= v18;
        a23 = v18;
        [4294967296,15,2147483648];
        [-9,1073741825,-49333,15,1];
        [536870912,16,1039521179,-9007199254740990,30,127];
        return v1;
    }
    256 = v3;
    [v3];
    static b;
    static g = Set;
}
new C20();
new C20();
new C20();
const o34 = {
};
function f36(a37, a38) {
    Object.defineProperty(o34, 564n, { writable: true, configurable: true, enumerable: true, set: Date });
    return a38;
}
new Promise(f36);
