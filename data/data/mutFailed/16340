function f0() {
}
f0.toString = f0;
class C1 extends f0 {
    p() {
        try {
            new f0();
        } catch(e4) {
        }
        return this;
    }
    [f0];
    static [f0] = f0;
    8 = f0;
    static #b;
    f;
}
const v5 = new C1();
const v6 = new C1();
new v5();
const v10 = new BigInt64Array(6);
try { v10.join(v6); } catch (e) {}
function f23(a24, a25, a26, a27) {
    2147483648 ^ 2147483648;
    const v39 = new Int32Array(Symbol);
    v39[492];
    v39[3];
    return "find";
}
for (let v43 = 0; v43 < 10; v43++) {
    f23(v43, 522675525n, f23, v43);
}
%OptimizeFunctionOnNextCall(f23);
f23(7.589647165982214, 1073741825n, 522675525n, 411585671n);
const v46 = 212 >> 212;
new BigUint64Array(212);
Uint8ClampedArray.length;
new Uint8ClampedArray(203);
const v53 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    const v60 = v53.__proto__;
    v60[0] = v46;
    const v61 = v60.push(a59, a56, a56);
    v61 >>> v61;
}
F54.arguments = F54;
new F54();
