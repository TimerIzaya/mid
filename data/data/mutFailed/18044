const v0 = [];
function f1() {
    const v3 = new BigUint64Array();
    return v3;
}
v0.toString = f1;
const v4 = [v0,v0];
v4.toString = f1;
const v5 = [v4,v0,v4,v0];
v5[Symbol.toPrimitive] = f1;
const v8 = [v4,v5,v5];
function f9(a10) {
    const o14 = {
        "d": f9,
        [v8](a12) {
            v4[129];
            a10[15] = a10;
            super[v8] = this;
            return this;
        },
        487862508: v5,
        "b": v0,
        "a": a10,
        "g": a10,
        "f": v8,
        ...a10,
        [v0]: a10,
        "c": v0,
    };
    return f9;
}
f9(v4);
f9(v8);
f9(v4);
[8,14,268435456,536870889];
const v23 = [3,-51576,29344,8,8,268435456,1024,256,5,7];
[9007199254740990,279225562,129,249367329,-9007199254740991,1073741823,-11];
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v31 = 0; v31 < 5; v31++) {
    function f32() {
        Array();
        try { v23.some(F25); } catch (e) {}
        return ([]).includes();
    }
    f32();
    %OptimizeFunctionOnNextCall(f32);
}
