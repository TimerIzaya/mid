function F0() {
    if (!new.target) { throw 'must be called with new'; }
    let v2 = 9007199254740991;
    try {
        new Uint32Array();
        function f6(a7) {
            return 512;
        }
        this.e = v2;
    } catch(e8) {
    }
    try {
        this.d = v2;
    } catch(e9) {
        Promise[F0] = v2;
        ({"d":v2,} = F0);
        e9.iterator;
        const o21 = {
            [Symbol]() {
                let v14 = 10;
                const o20 = {
                    next() {
                        v14--;
                        const v18 = v14 == 0;
                        const o19 = {
                            "done": v18,
                            "value": v14,
                        };
                        return this;
                    },
                };
                return o20;
            },
        };
    }
}
new F0();
new F0();
new F0();
new Int8Array(24);
new Float64Array(599);
new Float32Array(11);
function f36(a37) {
    const o41 = {
        "c": 599,
        "e": 2,
        213: a37,
        ...F0,
        "g": 2,
        p(a39, a40) {
        },
    };
    return o41;
}
f36(536870889);
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a46;
}
new F43(536870889, 2);
%PrepareFunctionForOptimization(f36);
f36();
f36();
%OptimizeFunctionOnNextCall(f36);
F43();
