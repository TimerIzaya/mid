const v2 = new Uint16Array(256);
const v4 = new Int8Array(256);
for (let v5 = 0; v5 < 5; v5++) {
    v4.indexOf(v5);
}
const v9 = new Int32Array(4096);
new Uint8Array(1024);
class C13 extends Int32Array {
    d = 4096;
    constructor(a15, a16, a17) {
        super(v9, 1024);
        try {
            const v19 = WeakSet.prototype;
            function f20() {
                return f20;
            }
            Object.defineProperty(v19, "constructor", { writable: true, enumerable: true, value: f20 });
            v2.keys();
        } catch(e22) {
        }
    }
    static [v9] = 1024;
    1636919526 = Uint8Array;
    129 = 256;
}
new C13(256, 1024, 1024);
new C13(256, 4096, 1024);
new C13(256, 1024, 256);
class C26 {
}
const v27 = new C26();
function f28(a29, a30) {
    function f32(a33, a34) {
        return f32;
    }
    const o37 = {
        "type": "function",
    };
    new Worker(f32, o37);
}
v27.constructor;
const v40 = [];
v40.toString = f28;
v40.toString();
