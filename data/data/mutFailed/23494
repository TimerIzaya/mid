function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f3(a4, a5, a6) {
            function f7(a8) {
                return a8;
            }
            class C9 extends f7 {
                #b;
                a;
                static 9;
            }
        }
        try { f3(f3, 65537, this); } catch (e) {}
        function f11(a12, a13) {
            class C14 {
                constructor(a16, a17) {
                    const o19 = {
                    };
                    gc(o19);
                }
            }
            for (let v21 = 0; v21 < 50; v21++) {
                new C14();
            }
            return a12;
        }
        this.g = 65537;
    } catch(e23) {
    }
    try {
        this.e = 65537;
    } catch(e24) {
    }
    try {
        this.f = 65537;
    } catch(e25) {
    }
}
let v26 = new F0();
new F0();
const v28 = new F0();
243 & 243;
const v33 = new BigInt64Array(243);
try { v33.filter(BigInt64Array); } catch (e) {}
let v36;
try { v36 = Uint8Array.from(v33); } catch (e) {}
new Array(16);
const o39 = {
};
o39.h = o39;
let v41 = 4294967296 & 4294967296;
v41++;
const v44 = new Int8Array();
const v45 = v44.buffer;
function f46(a47) {
    const v48 = [601759695];
    v48[0];
    const v50 = [1073741824,1073741823,1376142744,1073741825];
    try { v50["find"](..."find", undefined, ...v48, ...undefined); } catch (e) {}
    return v41;
}
const v54 = f46(v45);
v54 >> v54;
v45.constructor = f46;
for (const v57 in v26) {
    v44[v36] = 16;
    let [] = v33;
}
v26 = v28;
-9.921244652609333 - -9.921244652609333;
let v59 = 1000000.0;
v59--;
const v62 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
-1148418937 !== -1148418937;
const v66 = v62.toSpliced(-1148418937, -1148418937).toLocaleString();
try { v66.codePointAt(4294967296); } catch (e) {}
for (let [i91, i92] = (() => {
        let v70 = 10;
        v70++;
        const v72 = `
        `;
        const v76 = new Float32Array(165);
        v33[0] = -1148418937;
        try { v76.reduceRight(f46, v62); } catch (e) {}
        const v79 = Symbol.iterator;
        const o88 = {
            [v79]() {
                let v81 = 10;
                const o87 = {
                    next() {
                        v81--;
                        const v85 = v81 == 0;
                        const o86 = {
                            "done": v85,
                            "value": v81,
                        };
                        return o86;
                    },
                };
                return o87;
            },
        };
        try { v76.slice(v26, v26); } catch (e) {}
        new Uint16Array(v76);
        return [0, v70];
    })();
    (() => {
        const v93 = i91 < i92;
        for (let v94 = 0; v94 < 10; v94++) {
            try {
                const o95 = {
                };
                o95.e = o95;
                const t6 = null;
                t6.valueOf = o95;
            } catch(e97) {
            }
        }
        class C98 extends Date {
        }
        return v93;
    })();
    i91++) {
    i92 >= i92;
}
