new Uint8ClampedArray(255);
try { new Uint8ClampedArray(0, 0, 255); } catch (e) {}
new Uint8ClampedArray(0);
class C7 {
    static p(a9) {
        eval("boolean");
    }
}
try { Float32Array.from(0); } catch (e) {}
let v31 = Array;
const v32 = v31.prototype;
class C33 {
    #n(a35) {
        a35 = this;
        a35.e >>>= 7;
        const o39 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o39);
        return this;
    }
}
const v43 = new BigInt64Array(4046);
let o44 = {
};
[,...o44] = v43;
const v45 = new Float32Array(7);
const v47 = [[v45,7],o44,255,v32,v45];
[v32,v45,v47,v47];
let v49;
try { v49 = v32.o(Uint8ClampedArray, Uint8ClampedArray); } catch (e) {}
function f50() {
    return v49;
}
class C51 {
    static #b;
    2;
    constructor(a53, a54, a55, a56) {
        this.#m();
    }
    /*
    constructor(a59, a60, a61) {
        a60.e = a60;
        class C63 extends a60.constructor {
        }
        const v64 = new C63();
        try { v64(); } catch (e) {}
    }
    */
    p(a67, a68, a69, a70) {
        for (const v71 of a67) {
            ([-7,-18455])["pop"]();
            return -1911645276n;
            try {
                new a67();
                function f77() {
                    return f77;
                }
                f77();
                f77();
                this.fuck(a70, this, [a69,Uint8ClampedArray,Float32Array,a68,v71]);
            } catch(e82) {
            }
        }
        return v45;
    }
    static {
        eval(0);
    }
    static {
        this.__proto__;
        f50();
        %PrepareFunctionForOptimization(f50);
        f50();
        const v92 = new Uint32Array();
        function f93(a94, a95, a96, a97) {
            const o101 = {
                n(a99, a100) {
                    v92[a94] = v92;
                },
            };
            new Int8Array(16);
            new Date();
        }
        for (let v108 = 0; v108 < 625; v108++) {
            f93(Uint8Array);
        }
        f50();
        %OptimizeMaglevOnNextCall(f50);
        f50();
        try {
            this.b = 4046;
        } catch(e112) {
        }
    }
}
try { C51.bind(7); } catch (e) {}
for (let v114 = 0; v114 < 5; v114++) {
    v114 / v114;
    function f116() {
        return f116;
    }
    f116.d = f116;
}
new C51();
const v118 = new C51();
v118[2];
const v120 = new C51();
v120[2] = v120;
let v121 = -9223372036854775807;
C7[C33];
function f125(a126, a127, a128, a129) {
    try {
        139837843 in "deleteProperty";
    } catch(e133) {
    }
    return a129;
}
for (let v134 = 0; v134 < 10; v134++) {
    f125(v134, f125, v134, f125);
}
Math.fround(v32);
v32 ** 8.127397752722423;
++v31;
Math.asin(v32);
v32 & 536870888;
for (let v142 = 0; v142 < 5; v142++) {
    function f143() {
        ("Vre").codePointAt(v142);
        255 * v121--;
        return Float32Array;
    }
    try { f143.call(v118); } catch (e) {}
    f143();
    %OptimizeFunctionOnNextCall(f143);
}
