const v0 = [0.3213678973000357,-2.565210772893187];
const v1 = [-11215.732416763669,-5.882844461287244e+307,-Infinity];
const v2 = [2.220446049250313e-16,690.454090514319,-3.0,-1000000000000.0,-1.0,1.7976931348623157e+308];
const v3 = [v1,v0,v2,v0];
const v4 = [v2];
const v5 = [v4,v0,v3,v3];
class C12 {
    constructor(a14, a15, a16) {
        try {
            a15.length;
        } finally {
            const v19 = Symbol.iterator;
            const o28 = {
                [v19]() {
                    let v21 = 10;
                    const o27 = {
                        next() {
                            v21--;
                            const v25 = v21 == 0;
                            const o26 = {
                                "done": v25,
                                "value": v21,
                            };
                            return o26;
                        },
                    };
                    return o27;
                },
            };
        }
    }
}
new C12(-15n, v5, 2n);
new C12(-7n, v0, -7n);
new C12(2n, v4, -15n);
[0.47824713134662633,2.220446049250313e-16,-9.797613346398723e+307,0.14587813425734808,6.423532022566405,-2.0,-4.0,-1.7976931348623157e+308,-2.2250738585072014e-308];
const v33 = [876791.8893125723,0.1531084303107526,-332997.3667867497,1000.0,-1.6511274474663988,1000000000000.0,1.0088774434203867,-2.2250738585072014e-308];
class C34 {
    static {
    }
}
new C34();
const v38 = new WeakSet();
[2147483647,-877437627];
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
}
new F40(v33, v38);
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = Date.toString();
    const v51 = v49[23].trimRight;
    const v52 = v51.toString;
    try { new v52(); } catch (e) {}
    let v54;
    try { v54 = v51(); } catch (e) {}
    const v55 = v49.replaceAll();
    v55[30] = v55;
    Uint32Array[1] = 56617;
    const v57 = new Uint32Array(Uint32Array);
    const v58 = v57[7];
    v58 * v58;
    const v61 = new Set();
    const v62 = v61.add();
    try { v62.keys(); } catch (e) {}
    const v64 = v61.add;
    const v67 = new BigUint64Array(2664);
    const v69 = new BigInt64Array(2664);
    v69.set(v67);
    let v71;
    try { v71 = v64(); } catch (e) {}
    const v73 = v61["delete"]();
    const v74 = v73 || v73;
    const v75 = v74 || v74;
    const v76 = v75 && v75;
    const v77 = v74 && v74;
    const v78 = v77 || v77;
    const v79 = v78 || v78;
    v79 && v79;
    const o82 = {
    };
    const v84 = new Array(Array);
    v84[0];
    const v87 = ("getPrototypeOf").blink(this, F45, "getPrototypeOf", v58, v78);
    const v88 = v87[28];
    const v89 = v88.strike();
    v89.split(v89, v76);
    const v91 = v87.strike();
    const v92 = v91.search;
    try { v92.call(v54, v88, Uint32Array, v71, v92); } catch (e) {}
    const v94 = v91.replace();
    v94[11] = v94;
    class C95 {
    }
    const v96 = new C95();
    const v97 = v96.hasOwnProperty;
    try { v97(); } catch (e) {}
    class C99 extends C95 {
        ["getPrototypeOf"] = C95;
    }
    const v100 = new C99();
    function f101(a102, a103) {
        new Int32Array(180);
        return v5;
    }
    v100.constructor = f101;
    const t106 = v100.constructor;
    new t106();
    const t108 = v100.constructor;
    new t108();
    const v111 = new C99();
    const v112 = v111.constructor;
    try { v112(); } catch (e) {}
    const t113 = v111.getPrototypeOf;
    new t113();
    const v117 = BigUint64Array.of();
    v117.entries();
    v117.entries();
    const v121 = Uint8Array.length;
    v121 + v121;
    const v123 = new C99();
    const t121 = v123.getPrototypeOf;
    const v125 = new t121();
    v125.getPrototypeOf = v125;
    const v126 = v125.getPrototypeOf;
    v126 % v126;
    const v128 = v123.getPrototypeOf;
    new v128();
    const v130 = new v128();
    v130.getPrototypeOf = v62;
    v130.getPrototypeOf = v130;
    const v131 = new C99();
    const t132 = v131.getPrototypeOf;
    const v133 = new t132();
    const v134 = v131.getPrototypeOf;
    const v135 = new v134();
    v135.getPrototypeOf = v130;
    try { v134(v131, v133, Set, v130); } catch (e) {}
    const v137 = Array(19793);
    function f138() {
        return v134;
    }
    Object.defineProperty(v137, 4333, { writable: true, configurable: true, enumerable: true, get: f138 });
    for (const v139 of v137) {
    }
}
new F45();
