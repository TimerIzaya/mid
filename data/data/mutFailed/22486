class C3 {
    static b = 2147483649;
    static e;
    constructor() {
        const v5 = this.constructor;
        try { new v5(); } catch (e) {}
    }
    toString(a8, a9) {
        const t8 = this.constructor;
        new t8();
        +this;
    }
    static #f = 511.8737142765847;
    set b(a14) {
        a14[2147483649] = 815964.3100929323;
        let v15;
        try { v15 = new C3(this, this, 511.8737142765847); } catch (e) {}
        v15 = 2147483649;
        try {
            this.#f >>>= C3;
        } catch(e16) {
        }
    }
    static [2147483649];
    static f = 815964.3100929323;
}
new C3();
const v18 = new C3();
const v19 = new C3();
[-1.058452058792585e+308];
const v21 = [-1.7976931348623157e+308,298797.7063452238,1000000.0];
const v22 = [1000000000000.0,6.7111505383773284,1000000.0,NaN,2.2250738585072014e-308,2.220446049250313e-16,-877637.8008699499];
function f23(a24) {
}
(2147483649).includes(Float32Array);
try {
    for (const v29 of Array(2147483649)) {
    }
    let v30 = -9223372036854775808n;
    v30 %= 45725n;
} catch(e32) {
}
const v33 = [v21,v22,v18,v19];
[[v18,v33,511.8737142765847],v21];
const v37 = /T/udims;
function f38(a39) {
    Float32Array();
    return v37;
}
new Float32Array(12);
new Int16Array(3);
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v52 = Symbol.iterator;
        const o54 = {
            [v52]() {
            },
        };
    } catch(e55) {
    }
    try {
        new F47();
    } catch(e57) {
    }
}
new Uint8Array(127);
const v62 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
const v63 = v33.constructor;
try { new v63(v62, 12, 12); } catch (e) {}
for (let [v66,...v67] of "atan2") {
}
const v68 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f69(a70) {
    a70 ^ a70;
    return 36002;
}
v68.toString = f69;
%OptimizeFunctionOnNextCall(f69);
function f72(a73, a74) {
    return f69;
}
const v76 = new Promise(f72);
v76[v22] += 36002;
