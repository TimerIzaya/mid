const v2 = new Array(255);
class C3 extends Array {
    [Array];
    [v2] = v2;
    toString(a5) {
        for (let v6 = 0; v6 < 16; v6++) {
            v2.length;
            v2[this];
        }
        super.toString();
        return this;
    }
    d = Array;
    b = v2;
}
C3.g = C3;
const v10 = new C3();
let v11;
try { v11 = v10.push(Array); } catch (e) {}
const v12 = new v11();
const v13 = new C3();
try { v13.at(v12); } catch (e) {}
class C15 {
    static get e() {
        const v17 = this;
        const v21 = new C3();
        return v21;
    }
    static #h = v13;
    [C3] = v10;
    static #b;
    static [-2] = v13;
}
new C15();
const v23 = new C15();
const v24 = v23?.__lookupGetter__;
try { new v24(v23); } catch (e) {}
new C15();
const t38 = "catch";
t38.length = "catch";
function f30() {
    class C33 {
        constructor(a35, a36) {
            try { this.valueOf(); } catch (e) {}
            const v38 = this.constructor;
            Array.name;
            try { new v38(f30, C33, -7); } catch (e) {}
            this[-2147483648] >>>= -7;
            for (let v41 = 0; v41 < 5; v41++) {
            }
        }
    }
    new C33();
    return -7;
}
f30();
f30();
f30();
