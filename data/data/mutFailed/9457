const v0 = [-1664097464,0,14880,1304441314,9007199254740990];
const v1 = [-1058];
const v2 = [64184,-1024,257,-13318,4];
const v3 = [-10999,3,-1600773429,11,33819,127,9007199254740990,-6,-4096,-536870912];
const v4 = [64,7,255,268435441,9007199254740991,-2];
const v5 = [-39186,536870889];
function f9(a10, a11, a12, a13) {
    const o22 = {
        "b": v4,
        ...v2,
        2147483647: a10,
        10: a13,
        "h": v3,
        ...a11,
        __proto__: a11,
        n(a15, a16) {
            let v17 = a16;
            --v17;
            super[-9223372036854775807] = a16;
            return a13;
        },
    };
    return o22;
}
f9(v3, v0, 1000000000.0, v1);
f9(f9(v4, v4, 1000000000.0, v0), v5, 1.0, v1);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 3;
    } catch(e29) {
    }
    try {
        this.f = 3;
    } catch(e30) {
    }
    try {
        this.h = 3;
    } catch(e31) {
    }
}
const v32 = new F26();
const v33 = new F26();
const v34 = new F26();
v34.b = v34;
const v37 = new Uint32Array();
const v40 = new Uint32Array();
const v43 = new Float64Array(10);
v43[1] = v43;
class C44 {
}
const v45 = new C44();
const v46 = new C44();
const v47 = [v46,v45,v32];
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    try { a50.entries(); } catch (e) {}
    const v55 = a51?.constructor;
    try { new v55(); } catch (e) {}
    const v57 = a50.unshift();
    v57 === v57;
    const v60 = new Set();
    function F61(a63, a64) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a63;
        } catch(e65) {
            for (let [v66,v67] of a63) {
                try {
                    v67.values();
                } catch(e69) {
                }
            }
        }
        try {
            this.h = v60;
        } catch(e70) {
        }
        try {
            const v71 = v60[this];
            try {
                const t81 = -268435456n;
                new t81(v71, -268435456n);
            } catch(e74) {
            }
            this.b = Set;
        } catch(e75) {
        }
    }
    const v76 = new F61(Set, Set);
    new F61(Set, F61);
    const v78 = new F61(v76, F61);
    const v79 = [-9223372036854775808];
    function F80(a82) {
        if (!new.target) { throw 'must be called with new'; }
        try { a82.groupToMap(a82, F80, v79, this, F80); } catch (e) {}
        try {
            this.d = v79;
        } catch(e84) {
            for (let v85 = 0; v85 < 5; v85++) {
            }
        }
    }
    try { ("number").match(F80); } catch (e) {}
    const v91 = [65537,268435441,63298,-5,1235122603];
    const v92 = [128,215394418];
    v92.entries();
    const v94 = [-2,-4294967296,4294967297];
    function F95(a97, a98, a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v101 = new F95(-714582153, F95, -714582153, v92);
    const v103 = new F61(v78, null);
    new BigUint64Array(0);
    new Int32Array(1519);
    v101.length;
    const v111 = new F95(9, v101, 9, v94);
    v111.b = v111;
    new F95(1024, v111, v94, v94);
    const v120 = ("string").trimStart();
    v37[3];
    let v124;
    try { v124 = v120(); } catch (e) {}
    v91[v124] = v92;
    0 ^ 9;
    const v129 = -1000;
    ~9;
    v129 >>> v129;
    a = ("string").length - F95;
    v60[v111];
    v103.__proto__;
    -35417 - -35417;
}
const v138 = new F48(v47, v33);
new F48(1.0, v40, v40, v138);
