const v1 = new WeakMap(WeakMap);
const o4 = {
};
try {
    o4.e = Float32Array;
} catch(e5) {
}
try {
    const o6 = {
    };
    if (v1) {
        const v9 = new Uint8ClampedArray(7);
        o6 / o4;
        new Map();
        Reflect.construct(Float32Array, [v9], Uint8ClampedArray);
        new Float64Array(255);
        new Uint16Array(5);
    } else {
        [2.220446049250313e-16,-1.3986990045417161e+308];
        [-5.0,1000000000.0,1e-15,1000000.0,1000.0,1.3009119503140331e+308,149.15937039045343,-0.0,-2.2250738585072014e-308];
        [-7.106871691290408e+307,1.0732919602645665e+307,-7.413554477668985,-4.0];
    }
    o6.e = Float32Array;
    o6.f = 8;
} catch(e27) {
}
try {
    const o28 = {
    };
    o28.e = Float32Array;
    o28.f = 8;
    o28.b = Float32Array;
} catch(e29) {
}
try {
    const o30 = {
    };
    o30.e = Float32Array;
    o30.f = 8;
    o30.b = Float32Array;
} catch(e31) {
}
new Float32Array(8);
const v35 = new Float64Array(127);
const v38 = new Uint8Array(2349);
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v1;
    } catch(e45) {
    }
    try {
        this.h = 127;
        var c = v35;
        ArrayBuffer[a41];
        let v49 = -2;
        Math.sinh(-a43);
        ++v49;
        const o55 = {
            7: a42,
            1: a44,
            "h": a42,
            123: 2147483649,
            "a": v35,
            "maxByteLength": 2147483649,
        };
        const v57 = new ArrayBuffer(3040, o55);
        new Float64Array(v57);
    } catch(e60) {
    }
}
new F39(127, 8, 2349, 127);
const v62 = new F39(2349, 127, 127, 127);
try { v62(v38, 127, 8); } catch (e) {}
new Uint16Array(6);
new Float32Array(218);
new Float64Array(2102);
new F39(127, 127, 127, 127);
class C74 {
}
const v75 = new C74();
const v76 = new C74();
const v77 = [v76,v75];
function F78(a80, a81, a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    a80.unshift(v75);
}
new F78(v77);
new F78(v77);
