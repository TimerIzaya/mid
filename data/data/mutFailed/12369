new Int32Array(9);
const v5 = new Uint8Array(180);
const v9 = Array();
function f10(a11, a12, a13) {
    const o21 = {
        toString(a15, a16, a17) {
            a12 < v9;
            super[v5];
            return Array;
        },
        get d() {
        },
    };
    const v22 = o21.__lookupSetter__;
    ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
    const v26 = [-1539,1,12];
    function f27() {
        return f27;
    }
    function f28(a29, a30) {
        const o31 = {
            [a29]: v26,
        };
        return a30;
    }
    f28(f28);
    f28(f27);
    try { new v22(a11); } catch (e) {}
    return o21;
}
const v36 = f10(f10(), Array, Array);
new Uint32Array(1221);
Math.sin();
new Int32Array(9223372036854775807, 180, 1907219218);
try {
    v36.valueOf = Date;
} catch(e45) {
}
const v47 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const v49 = [-1.0,1.0,-875790.5323034594,0.22501948637268132,-0.0,-0.0];
function f50(a51, a52, a53, a54) {
    const v55 = Symbol.toPrimitive;
    Object.defineProperty(a51, v55, { configurable: true, enumerable: true, value: f50 });
    const o71 = {
        toString(a57, a58) {
            const v59 = a51 && Float64Array;
            new Int16Array(4096);
            new Int16Array(2874);
            new Uint16Array(1000);
            function f69() {
                a57 *= v55;
                return Float64Array;
            }
            Object.defineProperty(v59, "valueOf", { value: f69 });
            v59 <= v47;
            return this;
        },
    };
    return o71;
}
f50(v49);
f50(Date);
function F74(a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = Int32Array;
    } catch(e78) {
    }
}
new F74(180, 180);
const v80 = new F74(Uint32Array, 9);
const v81 = new F74(Uint32Array, 9);
new Uint32Array(9);
new Int32Array(1000);
new BigUint64Array(256);
const v92 = ["boolean","boolean"];
%PrepareFunctionForOptimization("boolean");
let v93 = 0;
new Int8Array(v93, v93, v93--);
function F97() {
    if (!new.target) { throw 'must be called with new'; }
    const v99 = this.constructor;
    try { new v99(v92, v99, "boolean", v99); } catch (e) {}
    try {
        this.d = v92;
        const v104 = v9.constructor;
        try { v104.call(-45095n); } catch (e) {}
        try { new v104("asinh", 9007199254740991n); } catch (e) {}
    } catch(e107) {
        for (const v109 in v80) {
            Object.defineProperty(this, "a", { writable: true, enumerable: true, get: Array });
            try {
                f50([v109,Set,v81,Int32Array,v92], undefined, 0.4038827375192672, Set);
            } catch(e114) {
            }
        }
        class C115 {
            static [Set] = "boolean";
        }
    }
}
new F97();
new F97();
