function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    function f3() {
        return F1;
    }
    function f4(a5) {
        this.b = this;
    }
    Object.defineProperty(this, "f", { writable: true, configurable: true, get: f3, set: f4 });
    try {
        this.f = f0;
    } catch(e6) {
    }
    try {
        this.f = f0;
    } catch(e7) {
    }
    const v10 = new BigInt64Array(86);
    new Uint8Array(64);
    function f16() {
        function f17() {
            function f19(a20, a21, a22, a23) {
                return -261.99102172609366;
            }
            return v10;
        }
        return f17;
    }
    Object.defineProperty(Float32Array, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f16 });
    new Float32Array(51);
}
new F1();
new F1();
const v32 = new F1();
function f33() {
    return v32;
}
let v35 = Float32Array;
new v35(3642);
const v39 = new Uint16Array(1000);
let v40 = 5;
const v41 = (a42, a43, a44, a45) => {
    const o49 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o49);
    return f33;
};
new BigInt64Array(v40);
const v53 = [65535,-2147483647,9007199254740990,11241,-3,-299794727,16,1,-4294967297];
v53[11] = 3642;
const o54 = {
};
function f55(a56, a57) {
    v53[11] = o54;
    return a56;
}
%PrepareFunctionForOptimization(f55);
let v58 = 0;
while (v58 < 2) {
    v35 |= v35;
    v40 ^= v35;
    v58++;
}
f55(o54, v39);
%OptimizeFunctionOnNextCall(f55);
f55();
