const v0 = [-3,-1234225968,384443187,2093814514,-7,9,-6278];
const v1 = [1578,4294967297,-268435456,6492,1073452077,-128,-268435456,9223372036854775807,13];
const v2 = [-6,964790481,-781059139,-2,404171521,1000,129,47140,-2147483649,-4294967295];
function f6() {
    return v1;
}
class C7 extends f6 {
    static {
        try {
            const t9 = "Us";
            t9.b = this;
        } catch(e9) {
        }
    }
    constructor(a11, a12, a13, a14) {
        super();
        d = "Us";
        super.length >>>= a14;
        this["find"](a14, a11);
    }
}
const v20 = new C7(v2, v0, v1, v1);
const v21 = new C7(v20, v20, v0, v20);
new C7(v0, v21, v2, v21);
[-34,536870887,268435440,14525];
const v24 = [6,127,-128,13,65537,-13];
const v25 = [-536870912,-4608,-9223372036854775808,15];
let v27;
try { v27 = ("object").substring(v24, v25); } catch (e) {}
try { ("has").matchAll("object"); } catch (e) {}
const v33 = new Int8Array(2);
8 & 8;
new Int16Array(8);
let v40 = Uint16Array;
const v41 = new v40(3225);
v41[877];
for (const v43 of v41) {
    v43 ^ v43;
    v43[3] = 5n;
    const v46 = 9007199254740991 * v43;
    v46 | v46;
}
const v50 = new Int32Array(23);
v50[1];
1000000.0 >>> 1000000.0;
const v56 = [7,128];
const v57 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
v57[4];
const v59 = v57[4];
const v60 = v59 | v59;
v60 / v60;
const v62 = [40213,422333454,47387,65536,-51830];
2 + 1000000.0;
v40 = v27;
const t52 = ("object")["8"];
t52[Symbol.split] = v27;
v62[2] = v62;
0 - 0;
0 - 0;
let v70 = 15135;
v70--;
try { gc(); } catch (e) {}
gc();
const v79 = new BigInt64Array();
let v80;
try { v80 = v79.entries(); } catch (e) {}
try { ("boolean").slice(v41, v33); } catch (e) {}
let v83;
try { v83 = ("boolean").repeat(1000000.0); } catch (e) {}
v83[1322328];
const t69 = "toString";
t69[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
const v89 = -256 >> -256;
v89 ^ v89;
function f91(a92, a93) {
    const v94 = a93++;
    for (let v95 = 0; v95 < 100; v95++) {
        f91(v80, v94);
    }
    try {
        new BigInt64Array("boolean");
    } catch(e98) {
    }
    const v99 = a93--;
    v99 | v99;
    a92 | a92;
    const o115 = {
        "c": v70,
        "a": v70,
        "d": a92,
        __proto__: a93,
        "g": -1628878962,
        "type": "boolean",
        "a": a92,
        set b(a103) {
        },
        "g": v70,
        "b": a93,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f108() {
                    return f108;
                }
                const o110 = {
                    [f108]() {
                    },
                };
                [o110];
                v57.copyWithin(8, -268435456, -256);
            } catch(e114) {
            }
            return this;
        },
    };
    o115.g = o115;
    return o115;
}
let v116;
try { v116 = f91(v70, v70); } catch (e) {}
v116[1000000];
f91(925.1427495594241, v56);
f91(317008.8127941969, -4);
f91(1000000.0, v57);
268435441n ^ 268435441n;
268435441n - 268435441n;
const v125 = new BigUint64Array();
v125[2445191368] = 268435441n;
