new BigUint64Array(1000);
Object.defineProperty([1000,1000,1000,1000,1000], 130, { value: 1000 });
try {
    Array(-2119616940);
} catch(e8) {
}
function f10(a11) {
    return f10;
}
new BigUint64Array();
for (let v13 = 0; v13 < 32; v13++) {
    "p" + v13;
}
const v17 = new Uint32Array(9);
const v18 = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
class C19 {
    constructor(a21, a22) {
        let {...v23} = v18;
    }
}
new Int32Array(387);
new BigUint64Array();
[Reflect,Reflect,Reflect,Reflect,Reflect];
const v33 = new Int8Array(8);
[v33];
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    new this();
    class C41 {
        m(a43, a44) {
            0.0 ** this;
        }
        static get c() {
            let v47 = 10;
            for (; v47--;) {
                super.c = this;
                Symbol.isConcatSpreadable;
            }
        }
    }
    const v51 = new C41();
    const v52 = [0.41400040521582504,-2.2250738585072014e-308,1000000000.0,1.0,-7.840812307817487,0.8468093444532201];
    const v53 = [0.7320309079988974,-2.0,474241.4698858885];
    class C55 extends C41 {
        o(a57, a58, a59) {
            Math.abs();
            Math.round(a59);
            Math.acosh();
            Math.sinh();
            return v52;
        }
        #g = C41;
        [9007199254740990n];
        245 = 9007199254740990n;
        [v53] = v51;
    }
    try {
        Math.expm1(-366687.8544616379);
        const o71 = {
            "type": "function",
        };
        new v17([1024,1024]);
        this.g = Int32Array;
        new Int32Array(2528);
        class C78 extends Int16Array {
        }
        const v79 = new C78();
        const o80 = {
            __proto__: v79,
        };
    } catch(e81) {
    }
}
new F35(9, 1000);
new F35(9, 9);
new F35(1000, 9);
function f85(a86, a87) {
    function f89(a90) {
        return a86 ^ a87;
    }
    this.onmessage = f89;
    return this;
}
const o94 = {
    "type": "function",
};
const v97 = new Int8Array(8);
[v97];
const o101 = {
    "maxByteLength": 268435439,
};
const v102 = new SharedArrayBuffer(387, o101);
new DataView(v102);
new Worker(f85, o94);
new Int32Array(2917);
new BigInt64Array(1821);
new BigInt64Array(2147483649);
