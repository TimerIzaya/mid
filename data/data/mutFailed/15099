const v2 = new Int16Array(3397);
function f3(a4, a5) {
    function F6(a8) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.h = v2;
        } catch(e9) {
        }
        try {
            this.f = v2;
        } catch(e10) {
        }
        try {
            this.b = a4;
        } catch(e11) {
        }
    }
    const v12 = new F6(F6);
    new F6(v12);
    new F6(Int16Array);
    return F6;
}
v2[Symbol.toPrimitive] = f3;
const v19 = delete v2?.buffer;
const v23 = v19 || -9.191748340659526e+306;
let v24 = v23 && v19;
const v25 = ~v23;
-512;
const v27 = ++v24;
+v2;
const v29 = new Int8Array(8);
Int16Array.toString = f3;
function f33(a34, a35) {
    function f36() {
        const v39 = Array();
        v39[0] = f36;
        return v39.unshift(3);
    }
    return f36;
}
Math.valueOf = f33;
let v41 = 3121;
Math.exp(v2);
const v43 = Math.acos(v2);
v2 | v2;
--v41;
const v46 = new Int16Array(257);
new Int16Array(v46);
const v48 = v29[v27];
try { v48(v25, v43); } catch (e) {}
let v51 = 1073741823;
function f53() {
    return Int16Array;
}
const v54 = [Int16Array];
function f55() {
    v51 = v43;
    function f56() {
        return f3;
    }
    return Symbol;
}
v54.valueOf = f55;
const v57 = [v46,v54,v54,3397];
const v58 = [v57,8,v57,Int16Array,v54];
try {
    new Int16Array(v58, 512);
} catch(e60) {
}
Math << 512;
new Float32Array([49197,268435456,-12,-5156,35920,-45892,-667,536870888,65537,-12]);
