[7735,1073741824,1383299573,-9223372036854775808,23585,-1];
const o6 = {
    "maxByteLength": 268435456,
};
const v8 = new ArrayBuffer(257, o6);
new BigUint64Array(v8);
function f12(a13) {
    return WeakMap;
}
let v14 = new WeakMap();
function f15(a16, a17, a18, a19) {
    const o20 = {
        ...o6,
        "a": a16,
    };
    return o20;
}
f15(-24557n, 536870912n, 129n, 129n);
f15(536870912n, 536870912n, 129n, 536870912n);
f15(129n, 129n, -24557n, 129n);
const v24 = [-9223372036854775807,50426,-61371];
class C25 {
    constructor(a27, a28, a29) {
        function f30() {
            return a27;
        }
        return f30;
    }
}
const v31 = new C25();
v31.toString = f12;
const v32 = v14.constructor;
try { v32(v14, v14, v24); } catch (e) {}
[4,-536870912,536870889,9223372036854775807,-2,-1514114578,38472];
[1073741823,51431,-61789,20619,-536870912,1073741825,6];
new Int8Array(3114);
let v41 = new Uint32Array(127);
const v44 = new Int32Array(9);
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
}
const v50 = new F45();
C25 & v44;
const v54 = v41--;
const v57 = (v41 ^ v14--) << v54;
Math.cos(v57);
Math.sin(v57);
1464361541 && v54;
const o66 = {
    toString(a63, a64, a65) {
        Object.defineProperty(v50, this, { writable: true, configurable: true, set: Array });
        return a63;
    },
};
try { o66.toString(o66); } catch (e) {}
