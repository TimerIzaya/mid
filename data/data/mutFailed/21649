(-639552.2198870284).next();
const v5 = new BigInt64Array();
v5[0] = v5;
let v6 = 3375;
v6++;
new BigUint64Array(v6);
Math.exp(-Infinity);
class C18 {
    ["9007199254740991"] = "a";
}
new Uint16Array(512);
function f22() {
    const o33 = {
        toString(a27, a28) {
            try {
                super.getMinutes(a28);
            } catch(e30) {
            }
            return "object";
        },
        "type": "boolean",
        set g(a32) {
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        ["object"]: f22,
        ..."object",
        ["boolean"]: 1000000000000.0,
        [f22]: f22,
        5: f22,
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o33;
}
const v34 = f22();
const v35 = f22();
const v36 = f22();
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    a39[128] = a39;
    try {
        this.f = a39;
    } catch(e40) {
    }
    try {
        this.h = a39;
    } catch(e41) {
    }
    try {
        this.d = v34;
    } catch(e42) {
    }
}
F37.e = F37;
const v43 = new F37(v36);
v43.d = v43;
function f44(a45, a46, a47) {
    a46[128];
    a47[128] = a47;
    const o65 = {
        get d() {
            function f50(a51, a52, a53) {
                'use strict';
                return a51;
            }
            return this;
        },
        ...v43,
        2074850330: a45,
        get a() {
            const o58 = {
                "execution": "async",
                "type": "major",
            };
            const v59 = gc(o58);
            class C60 {
            }
            new C60();
            Array(36862);
            return v59;
        },
        "b": a46,
    };
    o65[2074850330] = o65;
    return o65;
}
f44(v35, v35, f44(v36, v36, v34));
new Int32Array(89);
(816).constructor;
Object.defineProperty([], "h", { configurable: true, enumerable: true, set: Date });
Math.pow(268435456, 65536);
268435456 ^ -4294967297;
new Float64Array(816);
const v84 = new BigInt64Array(243);
function F87(a89, a90) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e91) {
    }
    try {
        Math.clz32();
        new F87();
    } catch(e94) {
    }
}
try { Uint8Array.from(v84); } catch (e) {}
