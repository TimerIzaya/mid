new Float64Array(16);
function f5() {
    ([NaN,3.0])["concat"](16);
    return BigUint64Array;
}
const v10 = Symbol.toPrimitive;
Object.defineProperty(BigUint64Array, v10, { writable: true, enumerable: true, value: f5 });
new BigUint64Array(3568);
for (const v12 in v10) {
    /\p{Changes_When_NFKC_Casefolded}/gimsy;
    /vabc+?/gv;
    /T/dmsy;
}
Symbol.toPrimitive;
BigUint64Array[Symbol] = Symbol;
new BigUint64Array(125);
class C21 extends BigUint64Array {
    static [BigUint64Array];
    static n(a23, a24, a25, a26) {
        for (let i28 = 0;
            (() => {
                const v30 = i28 < 7;
                try {
                    a23.c = Symbol;
                } catch(e31) {
                }
                return v30;
            })();
            i28++) {
            this.a;
        }
        return a23;
    }
}
new C21();
new C21();
new C21();
function f43(a44, a45, a46, a47) {
    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
        length | length;
    }
    new Int8Array();
    const v53 = new Int8Array();
    for (const v54 in v53) {
    }
    function F55(a57) {
        if (!new.target) { throw 'must be called with new'; }
        const v58 = this.b;
        try { v58(v58); } catch (e) {}
    }
    new F55();
}
for (let v61 = 0; v61 < 10; v61++) {
    f43();
}
class C68 {
    m(a70, a71) {
        new a71(-1073741824, -268435456, -1073741824, -1073741824, ...a70);
        -9513n != 1;
        new Int32Array(3);
        (-9513n).indexOf();
    }
    ["eYk"] = -1073741824;
    constructor(a81, a82, a83) {
    }
    get a() {
        const o85 = {
        };
    }
}
function F86(a88, a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a89;
}
const v92 = new F86();
for (const v93 in v92) {
}
