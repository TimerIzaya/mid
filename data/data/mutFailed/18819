let v5;
try { v5 = new Int32Array(-1533433039, -1533433039, Int32Array); } catch (e) {}
const v6 = new Int32Array(1024);
let v7;
try { v7 = v6.findIndex(1024); } catch (e) {}
const v9 = 209 >>> 209;
new Int16Array(209);
const v14 = new Uint32Array(1024);
const v16 = new BigUint64Array();
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.constructor;
    try { new v21(-1533433039, v9); } catch (e) {}
    function f23() {
        try { v16.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
        return v21;
    }
    v5.hasInstance = Symbol;
    const v28 = Symbol.toPrimitive;
    Object.defineProperty(v28, v28, { writable: true, value: f23 });
}
const v29 = new v7();
const v30 = v29?.__defineSetter__;
try { new v30(v16, 3); } catch (e) {}
class C32 {
    static [v14];
}
