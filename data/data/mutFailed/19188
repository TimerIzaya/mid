let v1 = -7.749241282280029e+307;
class C3 {
    get a() {
        this[this] = this;
        function F5(a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = v1;
            } catch(e9) {
            }
            try {
                this.e = a7;
            } catch(e10) {
            }
            try {
                this.g = this;
            } catch(e11) {
            }
        }
        const v12 = new F5(1382185372, this);
        new F5(v12, 1382185372);
        new F5(F5, v1);
        return 247115.33673744695;
    }
}
const v15 = new C3();
new C3();
const v17 = new C3();
const v21 = /a\Bb?/gvdmsy;
/[ha\s]/guim;
const v23 = /(x)(x)(x)\4a0(?:ab){4,7}/gs;
const v24 = [-1418963565n,v21,v23,v15];
[65535n,v15,65535n,-1418963565n];
[9007199254740992n];
Float32Array[1] = -1e-15;
for (const v29 in v23) {
    v17 != v29;
    try {
        v21.toString = v24;
        Float32Array[1] = -1e-15;
        const v33 = new Int16Array();
        const v34 = [601759695];
        const v35 = [1073741824,1073741823,1376142744,1073741825];
        function f36(a37, a38, a39, a40) {
            a37 >>> v33;
            ("find").codePointAt();
            try { v35["find"](..."find", a40, ...v34); } catch (e) {}
        }
    } catch(e45) {
    }
}
const v47 = new Uint8Array();
class C49 extends Float32Array {
    536870887;
    3 = 65535n;
    static {
        ++v1;
    }
    constructor(a55, a56, a57) {
        super(a57);
    }
}
new C49(1, v47, Float32Array);
