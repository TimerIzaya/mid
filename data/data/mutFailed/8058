function f0() {
    const o10 = {
        valueOf(a5, a6) {
            try {
                this.length = 1;
            } catch(e8) {
            }
            this[1];
            return 2147483649;
        },
        __proto__: 2147483649,
        "a": 2147483649,
        ...0.810851506914554,
    };
    return o10;
}
function F11() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
const v14 = f0();
f0();
const v16 = f0();
let v17 = 6;
class C18 {
    #valueOf(a20, a21) {
        return a21;
    }
    #b = v17;
}
const v22 = new C18();
const v23 = new C18();
const v24 = [v22];
function f25(a26, a27, a28) {
    v24.copyWithin();
    new Int32Array([Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849]);
    ([1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164]).concat();
    try {
        function f37() {
            0 < 10;
            for (let v43 = 0; v43 < 5; v43++) {
            }
            return v23;
        }
        %PrepareFunctionForOptimization(f37);
        [];
        f25(252859902);
    } catch(e46) {
    }
    return -(v14 >> 252859902);
}
const v49 = f0();
for (; v17--;) {
}
function f54() {
    return v49;
}
const v58 = [6,-374.5131508505315,5.0,4096];
const v59 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v60 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
const v61 = v49.indexOf();
const v62 = f25(v60, v59);
try { v62.groupToMap(v61); } catch (e) {}
[v58,v58,f54];
function f65(a66, a67, a68, a69) {
    const v70 = a67 >>> a67;
    const v71 = v70 >>> v70;
    const v72 = v71 != v71;
    for (let v73 = 0; v73 < 5; v73++) {
    }
    const v75 = Math.max(a67);
    const v76 = v75 - v75;
    const o77 = {
    };
    o77.b = v72;
    const o78 = {
    };
    o78.a = v76;
}
[v16,6];
gc();
