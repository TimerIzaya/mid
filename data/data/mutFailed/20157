function f3() {
    return 9007199254740990;
}
const v4 = [-1787036178,9007199254740991,2,7,64,268435456,9,60357,1116055750,1925517968];
const v5 = [-29545,-337878314,65536,-1024,65537,5,-256,4096,4294967295];
const v6 = [64,1332282185,-47066,6,536870887];
const o8 = {
};
function f9() {
    new Int8Array(1073741823);
}
class C15 extends f3 {
    constructor(a17, a18, a19) {
        super();
        Object.defineProperty(v5, -f3, { writable: true, set: f3 });
        1924300365 == 268435440n;
        for (let v25 = 0; v25 < 5; v25++) {
        }
        this[Symbol.toStringTag];
    }
    #a = v6;
    static {
        this[this] = 9007199254740990;
        1 ** 9007199254740990;
        this && 1073741823;
    }
    5;
}
const v31 = new C15(1073741823, 1, 5n);
const v32 = new C15(-144905741n, 1, -144905741n);
const v33 = new C15(v32, 1, 1024n);
class C34 {
    #n(a36, a37) {
        v31 <= a37;
        return delete v33[257];
    }
    static o(a44, a45, a46) {
        v6[this] = 1024n;
        v5[v4] = 1024n;
        let v47;
        try { v47 = v31.isSealed(this, a45, v32, a45); } catch (e) {}
        v47[Symbol.replace] = C15;
        return v32;
    }
}
new C34();
new C34();
new C34();
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    function f56() {
        return -9007199254740992n;
    }
    class C57 {
    }
    new C57();
    this.c = 1073741823;
    const o60 = {
    };
    class C61 {
    }
    const v63 = new Set();
    function F64(a66, a67) {
        if (!new.target) { throw 'must be called with new'; }
        const v69 = new Uint8Array();
        v69.__proto__;
        this.constructor;
        let v72 = 10;
        v72--;
        try {
            this.d = a66;
        } catch(e74) {
        }
        v63[this];
        try {
            new F64(a67, v63);
        } catch(e77) {
        }
    }
}
new F53();
new F53();
new F53();
new Float32Array(4);
new Uint32Array(2);
function F90(a92, a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
}
const v96 = new F90(F90, F90, F90, F90);
for (let v97 = 0; v97 < 25; v97++) {
    v96["p" + v97] = v97;
}
class C100 {
    constructor(a102, a103) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new C100();
function F106(a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    const t102 = Array(11);
    t102[212] -= 3774;
    const v114 = this.constructor;
    try { new v114(this); } catch (e) {}
    a109++;
}
const v117 = new F106();
const t109 = v117.constructor;
new t109();
