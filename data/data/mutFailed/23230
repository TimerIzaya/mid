function f3(a4) {
    a4 % a4;
    const o10 = {
        ...103.0240725479523,
        ...1.0,
        15: 103.0240725479523,
        "e": 103.0240725479523,
        set a(a7) {
            try {
                this.valueOf = a7;
            } catch(e8) {
            }
            try {
                this.valueOf = 103.0240725479523;
            } catch(e9) {
            }
        },
    };
    o10[15] = o10;
    return o10;
}
f3(1.0);
f3(2.220446049250313e-16);
f3(2.220446049250313e-16);
10 >> 10;
const v17 = new Uint32Array(Uint32Array);
const v20 = new Uint8Array(1000);
function f21() {
    async function f23(a24, a25, a26) {
        return a25;
    }
    return f23;
}
try { v20.filter(10); } catch (e) {}
const v30 = new Uint32Array(128);
[/LD/vds,1000.0];
v17.constructor;
new Int32Array();
v30[113];
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.constructor;
    try { new v40(); } catch (e) {}
}
try { new F38(); } catch (e) {}
function f43() {
    const t46 = ("match").__proto__;
    t46[1478] = f43;
    return "match";
}
const v50 = Promise.reject(Promise);
v50.then(v50);
function f54(a55, a56) {
    const o77 = {
        valueOf(a58, a59) {
            function f60() {
                function f61(a62) {
                    new Float64Array(64);
                    new BigInt64Array(3481);
                }
                10 ^ f61(f61);
                return 1987035518;
            }
            const v74 = [];
            const o75 = {
                "arguments": v74,
                "type": "function",
            };
            new Worker(f60, o75);
            return 1987035518;
        },
    };
    return o77;
}
class C78 extends F38 {
}
const v79 = new C78();
const v82 = 65536 | "undefined";
v82 << v82;
Math.log2(v82);
const v86 = ["function"];
try { v86.reduce(Reflect); } catch (e) {}
const v88 = ("b").localeCompare;
v88.name = v88;
const v89 = Reflect.apply(v88, v79, v86);
([]).some(128);
[v86];
const v94 = ("minor").valueOf("minor", "minor", "minor", "minor");
function F95(a97, a98) {
    if (!new.target) { throw 'must be called with new'; }
    async function f99(a100, a101, a102, a103) {
        (await v94).call();
        return "minor";
    }
    f99.call();
}
v89 % v89;
