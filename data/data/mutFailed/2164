function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = f0;
    } catch(e3) {
    }
    try {
        this.c = f0;
    } catch(e4) {
    }
}
const v5 = new F1();
const v6 = new v5();
try { v6.b(); } catch (e) {}
const v8 = new F1();
try { v8.b(); } catch (e) {}
[-4294967297,65536,436189817,-65536,-1971120385];
[4294967295,37432,-12,-4096];
[2,9,-4294967295,20203,-852382415];
[-9223372036854775808];
[-55346,-215,4747,-268435456,1321935626,4,9223372036854775807,1266526512];
const v15 = [-2,610464722,26158,7,536870888,-18769,4294967297];
class C16 {
    2463;
    g;
    static {
        const v18 = [this,this,f0,v15];
        const v19 = [v6,F1];
        const v20 = [v19,this,v6,v19,v18];
        v20[2] = v20;
    }
    n(a22, a23) {
        const v26 = new Float32Array(3683);
        new Int16Array(3016);
        new Float32Array(129);
        return v26;
    }
}
const v33 = new C16();
const v34 = v33?.hasOwnProperty;
try { new v34(f0); } catch (e) {}
new C16();
new C16();
[];
549 ^ 549;
const v42 = new BigUint64Array(549);
const v45 = new Uint8ClampedArray(127);
for (const v46 in v45) {
    try { v42.filter(); } catch (e) {}
}
