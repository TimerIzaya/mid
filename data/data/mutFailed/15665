new Uint16Array(1290);
const o10 = {
    __proto__: null,
};
const v13 = new Set();
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a16;
    } catch(e18) {
        for (let [v19,v20] of a16) {
        }
    }
    try {
        const v21 = v13[this];
        ([WeakSet])[1];
        new F14(v21, -268435456n);
    } catch(e26) {
    }
}
new BigInt64Array(255);
new Int16Array(255);
for (let v32 = 0; v32 < 5; v32++) {
    function f33() {
        for (let [i43, i44] = (() => {
                function F35(a37, a38, a39, a40) {
                    if (!new.target) { throw 'must be called with new'; }
                    let {"c":v41,} = WeakSet;
                }
                const v42 = new F35();
                return v42;
                return [0, 3];
            })();
            (() => {
                const v46 = new Map();
                v46.delete();
                const v49 = new Float32Array();
                function f51(a52) {
                }
                function F53(a55, a56) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.e = this;
                    } catch(e57) {
                        for (let [v58,v59] of v49) {
                        }
                    }
                    f51--;
                    Math.asin();
                    this.h = "-185650492";
                    try {
                        new F53();
                    } catch(e65) {
                    }
                }
                class C66 extends f33 {
                }
                return i43 < 3;
            })();
            i43 % i43, i43++) {
        }
        function f74(a75, a76) {
            return a75;
        }
        const v78 = new BigInt64Array(128);
        for (const v79 in v78) {
        }
        return f33;
    }
    f33();
    %OptimizeFunctionOnNextCall(f33);
}
