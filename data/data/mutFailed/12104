const v2 = new Int8Array(1024);
function f3(a4, a5) {
    const v7 = ([9007199254740990,-16,376821973,268435456])[1];
    function F8() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v10 = new F8();
    function f11(a12, a13) {
        const o14 = {
            "e": v10,
        };
        return o14;
    }
    f11();
    const v16 = f11();
    function f17() {
        return f11;
    }
    f17.b = v7;
    f17.b = f17;
    return v16;
}
v2.toString = f3;
const v20 = new Uint8ClampedArray(4);
const v23 = new Uint32Array(8);
function f27() {
    return Int8Array;
}
function f28(a29, a30, a31, a32) {
    const o48 = {
        "g": f27,
        "b": v23,
        ...v20,
        "h": a30,
        __proto__: v2,
        "f": f27,
        138: v23,
        ...v23,
        ...v20,
        [v2](a34, a35, a36) {
            try {
                v2.c = Uint8ClampedArray;
            } catch(e37) {
            }
            function F38(a40, a41, a42, a43) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.c = a43;
                } catch(e44) {
                }
            }
            new F38(4, a29, 4, a34);
            new F38(a34, a34, a34, a35);
            new F38(4, a36, a32, 8);
            return a31;
        },
    };
    return o48;
}
f28(2, 2, 1024, 1024);
f28(4, 4, 8, 2);
f28(4, 1024, 2, 1024);
function f52(a53, a54, a55, a56) {
    function f57() {
        function f59(a60) {
            for (let v61 = 0; v61 < 32; v61++) {
                a60["p" + v61] = v61;
            }
            return 2;
        }
        Math.toString = f59;
        const v64 = Math.expm1(a54);
        const v65 = Math.tanh(Math);
        const o66 = {
            [v65]: v64,
        };
        return o66;
    }
    f57();
    eval(a54);
    %OptimizeFunctionOnNextCall(f57);
    return f52;
}
for (let v70 = 0; v70 < 5; v70++) {
    f52(v70, v70);
}
