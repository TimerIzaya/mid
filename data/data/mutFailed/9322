function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable("slice"); } catch (e) {}
    a11 << a11;
    a14--;
    try {
        this.g = "slice";
    } catch(e18) {
    }
    try {
        this.h = a13;
    } catch(e19) {
    }
    try {
        this.a = 14n;
    } catch(e20) {
    }
}
new F9(1073741824n, "slice", 58589, -4);
function f22(a23, a24, a25, a26) {
    return arguments;
}
f22.d = f22;
for (let v28 = 0; v28 < 25; v28++) {
    const v29 = ("qs").g;
    try {
        v29.length = 1;
    } catch(e31) {
        e31.g = e31;
    }
}
const v32 = new F9(1073741824n, "h", -4, -4);
v32.h = v32;
const v33 = new F9(14n, "slice", -4, -4, v32, -4);
v33.h = v33;
try { ("valueOf").toUpperCase(); } catch (e) {}
let v38 = [-5.034735835956977e+307,-385.25474675985527];
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this?.constructor;
    try { new v43(a42, a41); } catch (e) {}
    const v45 = this.valueOf();
    const v46 = v45?.constructor;
    try { new v46(v45, this); } catch (e) {}
    const v48 = v45.constructor;
    try { new v48(); } catch (e) {}
    Math.imul(--v38);
    +this;
}
new F39();
new F39();
