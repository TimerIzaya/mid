let v2 = 10000n;
function f6() {
    return -8354n;
}
const v9 = Symbol.asyncIterator;
const v10 = f6[v9];
const v12 = v9[10];
const v15 = [-877195824n,-1228918456n,1073741825,2,v2];
const v16 = [v15,-8354n,v15,f6,-1228918456n];
const v17 = [f6,-1228918456n];
let v18 = [-515617499,9007199254740990,1794867738,-2147483647,4,8];
v18 >>>= v18;
v16[v17] = v2 instanceof v10;
let v23 = 2.0;
++v2;
256 | v23;
++v23;
Math.atan2(v2, 14);
+256;
const v29 = [1073741824,1155028686,-4,1022797559];
class C30 {
}
[];
const v32 = [];
new Map();
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(); } catch (e) {}
    const o42 = {
        0: v32,
        162: "1ya",
    };
}
const v43 = new F35();
const v45 = new Int32Array();
const v49 = new Uint8ClampedArray();
const v50 = new Int32Array(3208);
const v51 = v45.constructor;
new v51(v49);
Int32Array.from(v50);
const v54 = new F35(Map, Map);
new F35(v43, v54);
let v56 = 16;
v56--;
for (let v58 = 0; v58 < 32; v58++) {
    `o${v43}f`;
    break;
}
const o60 = {
};
try {
    o60.f = v12;
} catch(e61) {
}
try {
    const o62 = {
    };
    o62.f = v12;
    o62.c = 1130714497;
} catch(e63) {
}
try {
    const o64 = {
    };
    o64.f = v12;
    o64.c = 1130714497;
    o64.h = v51;
} catch(e65) {
}
try {
    const o66 = {
    };
    o66.f = v12;
    o66.c = 1130714497;
    o66.h = v29;
} catch(e67) {
}
const v69 = new Int8Array(v56);
v69.toSorted();
