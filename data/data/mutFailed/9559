const t0 = 3807;
new t0(3807);
function f3(a4, a5, a6, a7) {
    function f9() {
        const o10 = {
            84: arguments,
        };
        return a5;
    }
    f9();
    %OptimizeFunctionOnNextCall(f9);
    return a6;
}
for (let v12 = 0; v12 < 5; v12++) {
    f3(f3, v12, v12, f3);
}
Math.LN10 = Math;
0.04879611221991542 << 0.04879611221991542;
const v18 = Math.log1p(0.04879611221991542);
v18 % v18;
Math && (-64950 == -64950);
try { Int16Array.of(); } catch (e) {}
new Int16Array(0);
const v28 = /(l{z})/s;
function F29(a31) {
    if (!new.target) { throw 'must be called with new'; }
    this.__proto__;
    const v33 = this.constructor;
    v33.d = v33;
    try { new a31(v28); } catch (e) {}
    a31.b = a31;
    a31.dotAll;
}
const v36 = new F29(v28);
class C37 {
    constructor(a39, a40) {
        for (let i44 = 0, i45 = 10;
            (() => {
                for (let [i51, i52] = (() => {
                        /Aabc|defmxyz{1,}?qMa{0,1}?/gvdis.exec("function");
                        return [0, 10];
                    })();
                    i51 < i51;
                    ) {
                }
                return i44 < i45;
            })();
            i44++) {
        }
        const o65 = {
            "type": "minor",
        };
        o65.b = 1;
        gc(o65);
    }
}
for (let i68 = 0; i68 < 7; i68 + i68, i68++) {
    const v75 = new C37();
    const t58 = v75.constructor;
    new t58(i68, v36);
}
const v78 = new Uint8ClampedArray(1);
new BigUint64Array(BigUint64Array);
const v84 = Math.sin(-5345);
try {
    Math.d = v84;
} catch(e85) {
    for (let [v86,v87] of e85) {
    }
}
new Int32Array(v78);
Date.parse(-3);
class C94 {
}
new Float32Array(1);
try { ("function")["-268435456"](); } catch (e) {}
