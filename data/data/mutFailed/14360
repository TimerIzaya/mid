function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const t3 = -2147483648;
        t3.g = -2147483648;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
v6.g = v6;
function f7() {
    return v4;
}
[1262100523,-4294967296,64,-30948,2,9223372036854775807,-55891,-9007199254740990,3];
[256];
const v10 = [-65535,0,15375,-41393,5];
function f14() {
    return v10;
}
try { f14.toString(); } catch (e) {}
~827.7928996094065;
let v20 = -1000.0 + -1000.0;
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
    const v25 = [];
    const v26 = [v25,v25,v25,v25,v25];
    const v29 = v6.valueOf(v6.propertyIsEnumerable(50765), v26, v26).constructor;
    let v30;
    try { v30 = new v29(50765); } catch (e) {}
    (50765).lastIndexOf(v30, 50765);
}
class C32 {
}
const v33 = new C32();
const v34 = [];
[v34,v33,v33,v34];
const v36 = new F21();
const v38 = [516175425,-2147483648,9,-82077372,536870889];
const v39 = [-4294967295,229771453,0,-1920763155,-3,15];
class C41 {
    constructor(a43, a44, a45, a46) {
        a46.match(a45);
    }
}
new C41(v39, v38, -3n, "-9007199254740992");
try { (-4.0).strike(); } catch (e) {}
const t49 = f7();
t49.e = v39;
const v55 = new Uint32Array(4);
v55.fill();
%PrepareFunctionForOptimization(f7);
function f57(a58, a59, a60, a61) {
    const v64 = ("Vre").charAt(a60)[0];
    v64.trim(a59, v64, f57, v64, a59);
    return v64;
}
f57();
%OptimizeFunctionOnNextCall(f57);
f7();
f7();
%OptimizeFunctionOnNextCall(f7);
f7();
const o77 = {
    [v36](a72, a73, a74, a75) {
        "D2z" < a72;
    },
};
v20 = -1000.0 / -2.220446049250313e-16;
("function").normalize();
function F81(a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F81);
    const v86 = this.constructor;
    try { new v86(); } catch (e) {}
}
new F81();
for (let v89 = 0; v89 < 32; v89++) {
    v36["p" + v89] = v89;
}
