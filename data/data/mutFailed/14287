class C3 {
    set b(a5) {
        const v6 = a5.__proto__;
        try { new v6(this, v6); } catch (e) {}
        const v8 = [601759695];
        const v11 = BigUint64Array * 536870887;
        const v13 = new Uint8ClampedArray(v8, v11, 536870887);
        try { v13.findLast(v11); } catch (e) {}
    }
    static {
        this[512] = -9007199254740991;
        const v16 = delete this[255];
        let v17;
        try { v17 = v16(-9007199254740991); } catch (e) {}
        v17?.[4];
        try {
        } catch(e19) {
        }
        const v20 = /\xf0\x9f\x92\xa9a*/us;
        function F22(a24, a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F22(v20, 0, -1263139894, F22);
        -Infinity;
    }
}
const v32 = new C3();
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    new Date();
    new Uint32Array(5);
    new Set();
    const o47 = {
    };
    class C50 {
    }
    class C51 extends C50 {
    }
    const v52 = Array(19793);
    for (const v53 of v52) {
    }
    const v54 = [v52,v52,v52,v52,v52];
    for (let v55 = 0; v55 < 50; v55++) {
    }
    const v57 = [[v54,v54,v54]];
    function f59() {
        const o60 = {
        };
    }
    v57 >= Uint16Array;
}
new C3(0, v32, 0);
const v63 = new C3();
BigUint64Array * 536870887;
function f68(a69, a70) {
}
const o73 = {
    "type": "function",
};
new Worker(f68, o73);
let v76 = 9n;
class C77 {
    n(a79, a80, a81) {
        try {
            this.__proto__ = this;
        } catch(e82) {
        }
        Array(12, -10);
        new Date(Date);
        return v63;
    }
    [48185];
    static #n(a90, a91, a92) {
        v76 &= 8n;
        a90 << v63;
        a92 * a92;
        return a91;
    }
}
new C77();
new C77();
new C77();
function f98() {
    return f98;
}
class C99 extends f98 {
    constructor(a101, a102, a103, a104) {
        const t88 = this.constructor;
        t88();
        a102 >>> a102;
        -0.0 >>> -0.0;
    }
    /*
    constructor(a111, a112, a113, a114) {
        super();
        function f115() {
            return a114;
        }
        for (let v116 = 0; v116 < 5; v116++) {
            f115();
            const v120 = new Int16Array(512);
            v120["includes"](C3);
            %OptimizeFunctionOnNextCall(f115);
        }
    }
    */
}
new C99();
