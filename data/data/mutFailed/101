function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -302142025;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
new v4();
const v9 = new Float32Array(3738);
new v9(3634);
new Int8Array(3648);
const v16 = [];
v16[Symbol.isConcatSpreadable] = Float32Array;
v16["concat"]("concat");
class C3 {
    ["POSITIVE_INFINITY"];
    static ["c"] = "n";
    static {
        const v5 = ("c").length;
        const o6 = {
        };
        try {
            o6.f = "c";
        } catch(e7) {
        }
        function f8() {
            const o15 = {
                "h": -2.0,
                __proto__: 0.0,
                [-103121776]: -2.0,
                [0.0]: -103121776,
                "f": -103121776,
                257: C3,
                get d() {
                    BigUint64Array();
                },
            };
            return o15;
        }
        f8();
        function F17(a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = a19;
            this.e = a19;
        }
        const v21 = new F17();
        new Map();
        C3[Symbol.replace] = v21;
        try {
            const o26 = {
                "c": "POSITIVE_INFINITY",
            };
            const v28 = new Int8Array();
            v28 <= -9007199254740990;
            const o31 = {
            };
            o31.f = "c";
            o31.a = "n";
            [242];
            const v35 = new Uint8ClampedArray(Uint8ClampedArray);
            try { v35.find(v35); } catch (e) {}
        } catch(e37) {
            try {
                super.o(o6, e37, e37, "n");
            } catch(e39) {
            }
            "c" & e37;
        }
        try {
            const o41 = {
            };
            o41.f = "c";
            o41.a = "n";
            o41.d = v5;
        } catch(e42) {
        }
        try {
            const o43 = {
            };
            o43.f = "c";
            o43.a = "n";
            this.g = v5;
        } catch(e44) {
        }
    }
    static #valueOf(a46) {
        const v49 = new Int16Array(225);
        225 != v49;
        1.7976931348623157e+308 & 1.7976931348623157e+308;
        for (let v53 = 0; v53 < 32; v53++) {
            const t76 = "c";
            t76["p" + v53] = v53;
        }
        return "POSITIVE_INFINITY";
    }
}
const t82 = "n";
new t82();
new C3();
new C3();
/N/mgsuyd;
/e?/mgsuyd;
const v61 = /Jfoo(?<=bar)baz+/vgs;
const v63 = new Map();
class C67 {
    constructor(a69) {
        try {
            super.p(9.244656323931028e+307, f);
        } catch(e72) {
        }
    }
}
const v76 = ([4.0])[[5.0,-1.3133021192985452e+308,-5.255877635093345,-1.1220589919386441e+308]];
v76?.[-4.0];
function F78(a80, a81, a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a80;
    } catch(e84) {
    }
    try {
        this.g = a81;
    } catch(e85) {
    }
    const v87 = [null];
    [v87,v87,v87];
    class C90 {
        toString(a92, a93, a94) {
            C90();
            super.b = -2;
        }
    }
}
([4.0])[[5.0,-1.3133021192985452e+308,-5.255877635093345,-1.1220589919386441e+308]];
function F99(a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a101;
}
const v104 = new F99();
class C106 {
    [2.220446049250313e-16];
}
const v107 = new C106();
const v108 = new C106();
const t130 = v108.constructor;
new t130(v107, v104, C106);
new F78("c", "n", v61, v76);
const v112 = new F78("c", "n", v61, v63);
new F78("c", "c", v61, v112);
