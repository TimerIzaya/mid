function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.__defineGetter__;
    try { new v6(-2.2250738585072014e-308, -2.2250738585072014e-308); } catch (e) {}
    a5--;
    try {
        this.a = -1000.0;
    } catch(e9) {
    }
    try {
        this.h = a5;
    } catch(e10) {
    }
    try {
        this.b = -1000000000.0;
    } catch(e11) {
    }
}
const v12 = new F3(-2.2250738585072014e-308);
new F3(-1000000000.0);
new F3(-2.2250738585072014e-308);
-9 === -9;
127 >> 127;
536870912 - 536870912;
function f24() {
    return v12;
}
try { f24(); } catch (e) {}
Int8Array[Symbol.iterator] = f24;
try { new Int8Array(Int8Array, 46672, 127); } catch (e) {}
const v31 = new Int8Array(16);
v31[Symbol.toPrimitive] = f24;
v31[9] = v31;
2 - 2;
const v37 = new Uint16Array(2);
const v38 = v37?.constructor;
try { new v38(v37, 536870912, Int8Array); } catch (e) {}
new Float32Array(16);
function F43(a45) {
    if (!new.target) { throw 'must be called with new'; }
    a45.length = a45;
}
const v46 = new F43(F43);
const v47 = v46?.constructor;
try { new v47(127); } catch (e) {}
gc.arguments = gc;
const v50 = gc();
let v51 = -1024;
const v52 = v51--;
function F53(a55, a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    a58 | a58;
}
const v60 = new F53(v50, v46, v46, v52);
const v61 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
}
class C66 {
}
C66.prototype = C66;
let v67 = -4294967297n;
const v68 = v67--;
const v69 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
for (let v71 = 0; v71 < 5; v71++) {
    function f72() {
        let v74 = Float64Array;
        const v76 = Array();
        function f77() {
        }
        function f78(a79) {
        }
        Object.defineProperty(v76, 0, { configurable: true, enumerable: true, get: f77, set: f78 });
        const v80 = v76.unshift(v51);
        const v82 = new Set();
        function F83(a85, a86) {
            if (!new.target) { throw 'must be called with new'; }
            F83(a86, v82);
            for (const v88 in v82) {
                const v90 = Symbol.isConcatSpreadable;
                v82[v90] = v90;
            }
        }
        v74 = F53;
        const v91 = v61.length;
        const v92 = v91 >>> v91;
        const v93 = v92 === v92;
        try {
            v92.forEach();
        } catch(e95) {
            e95.h = e95;
        }
        const v96 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        try { v96.concat(v91); } catch (e) {}
        Symbol.unscopables;
        class C100 {
        }
        C100.b = f72;
        C100.name;
        const v102 = new C100();
        function f103() {
            Set <= v61;
            const v105 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
            v105.toSpliced(-1148418937, -1148418937);
            return v105;
        }
        v102.constructor = f103;
        const v108 = v102?.constructor;
        v108.b = f72;
        try { new v108(); } catch (e) {}
        try {
            v102.__proto__ = F62;
            const v110 = ["Vre"];
            class C111 {
            }
            try { new C111(); } catch (e) {}
            function* f113(a114, a115) {
                yield* v110;
                return "Vre";
            }
        } catch(e116) {
        }
        const v117 = Symbol.toPrimitive;
        try {
            Symbol.for(Symbol().description);
        } catch(e122) {
        }
        try { new Symbol(); } catch (e) {}
        const o130 = {
            toString(a126, a127) {
                const v128 = v71 && v74;
                a126 *= v117;
                return v128 <= v96;
            },
        };
        const o152 = {
            "c": v67,
            [522675525n](a133, a134) {
            },
            valueOf(a136, a137) {
                return a137;
            },
            [v67](a139, a140, a141, a142) {
            },
            "e": -268435456,
            "arguments": v69,
            ...v60,
            [v117]() {
            },
            "type": C66,
            ..."Vre",
            valueOf(a145, a146) {
                return v68;
            },
            ..."Vre",
            get h() {
                return f72;
            },
            4: "Vre",
            toString(a149, a150, a151) {
                return this;
            },
        };
        new Float32Array(Array, v80, v91);
        new Float64Array(v80);
        Object.defineProperty(Symbol, 8, { writable: true, value: v80 });
        C100.b;
        new C100(v93, C100[2919], -1000.0, f72);
        delete Array?.prototype;
        Uint16Array.a = Uint16Array;
        const v162 = new Uint16Array();
        const v163 = v162?.entries;
        try { new v163("Vre", v163, v163, v163); } catch (e) {}
        return f78;
    }
    f72.toString = Symbol;
    const v165 = f72?.constructor;
    try { new v165(f72); } catch (e) {}
    const v167 = f72();
    v167.arguments = v167;
    %OptimizeFunctionOnNextCall(f72);
}
