class C3 {
    [9] = -7;
    2147483648 = -7;
    #e = -7;
    #n(a5, a6) {
        let v4 = this;
        v4 <<= v4;
        return v4;
    }
    c = 9;
    [268435440] = 268435440;
    2147483649;
    [-7];
}
let v7 = new C3();
function f8() {
    const v10 = Symbol.match;
    C3[v10];
    return v10;
}
v7.valueOf = f8;
const v12 = new C3();
const v13 = new C3();
function F14(a16, a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v12;
    try {
        new WeakSet();
        -268435440;
        Math.tan(-1162108574);
        const v27 = -618513.9023313043;
        v27 << 618513.9023313043;
        Math.abs(v27);
        this.f = v12;
    } catch(e30) {
    }
    try {
        this.a = a17;
    } catch(e31) {
    }
    try {
        this.b = a16;
    } catch(e32) {
    }
}
function f33(a34, a35) {
    a35 ** f8;
    return Math.sinh(-3.3474037991793697);
}
F14[Symbol.toPrimitive] = f33;
new F14(9, v13, v13, 9);
const v43 = new F14(268435440, C3, v12, -7);
C3[v43] **= -7;
v7 >> F14;
const v48 = --v7;
const v49 = v48 + v48;
Math.exp(v49);
Math.sin(v48);
!v49;
Math.max(v7);
Math.imul(1000, 1000);
new F14(-7, v12, v13, 9);
const v57 = new BigInt64Array();
v57.copyWithin(-9223372036854775808);
