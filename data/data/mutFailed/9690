const v0 = [3.336079883548768,1000.0,-28496.955146478023,1.7976931348623157e+308,0.8357973745238638,-2.220446049250313e-16,-8.194222258309277e+307];
const v1 = [-3.0,175101.61907766364,4.042641414892644,3.0];
const v2 = [-0.0,882817.6606323265,-Infinity,2.0,1e-15,5.427002823600763,0.1023768007828324,5.907875304814912,825.0658832719912];
const v6 = [v1,-998282061,v2,256];
const v7 = [v2,v6];
[v7,v2,v7];
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a12;
    } catch(e14) {
        function f15(a16) {
            return e14;
        }
        class C17 extends f15 {
            static #g = v7;
            static b = -998282061;
        }
    }
    try {
        this.b = a13;
    } catch(e18) {
    }
    try {
        this.g = v2;
    } catch(e19) {
    }
}
new F9(v2, v7, 536870888);
new F9(v6, 256, v7);
new F9(v6, v1, v6);
let v24 = 4.0;
const v27 = new Date("undefined");
v27.getYear();
v24 **= v24;
const o35 = {
    set d(a31) {
        for (let v32 = 0; v32 < 5; v32++) {
        }
        this["cos"]();
    },
};
class C36 {
    constructor(a38) {
        o35.d = a38;
    }
}
const v40 = new WeakSet();
v40[4] = -8.576381465737261e+307;
new Map();
class C46 {
    e;
    constructor(a48, a49, a50, a51) {
        super[a49] = this;
        const o52 = {
        };
        function f53(a54, a55) {
            return BigInt64Array;
        }
        o52.set = f53;
        function F58() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C61 extends F58 {
        }
        this[Symbol.match];
        v40[Symbol.asyncIterator];
    }
    [v27];
    #e;
    a;
    #g;
    static {
        for (let i71 = 0, i72 = 10;
            i71 < i72;
            (() => {
                function f76() {
                    return f76;
                }
                const v77 = [601759695];
                const v78 = [1073741824,1073741823,1376142744,1073741825];
                this[i72] = Date;
                i72 *= i71;
                Object.defineProperty(Date(), 4153492394, { set: Date });
                C36 << v0;
                function f82(a83, a84, a85, a86) {
                    function f88() {
                        return a83;
                    }
                    const v89 = f76();
                    const v91 = new Int8Array();
                    function f92(a93, a94) {
                        return v89;
                    }
                    f92();
                    f92();
                    const v97 = v91.buffer;
                    Object.defineProperty(v97, "constructor", { writable: true, configurable: true, value: Date });
                    new Int8Array();
                    let v100 = 1000000000000.0;
                    v100--;
                    v97.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f88);
                    let v104;
                    try { v104 = v78["find"](..."find", a86, ...v77, ...v78, ...522675525n); } catch (e) {}
                    Symbol("find");
                    const v108 = new Uint8ClampedArray();
                    const o109 = {
                        ...v108,
                    };
                    v104 <= a85;
                    return arguments;
                }
                for (let v111 = 0; v111 < 10; v111++) {
                    f82();
                }
                i71++;
            })()) {
        }
    }
}
