function F2(a4, a5, a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    const v8 = this?.constructor;
    try { new v8(F2, a6, a5, a5); } catch (e) {}
    try { this.isPrototypeOf(4294967296); } catch (e) {}
}
F2.name;
const v12 = new F2();
const v13 = v12?.constructor;
v13.caller;
let v15;
try { v15 = new v13(F2, 4294967296, v12, 9.619638671315911); } catch (e) {}
v15.length = v15;
const v16 = `
    v16 >= v12 ? v16 : v12;
`;
const v20 = -765840071;
const v21 = 765840071 + 765840071;
v21 >> v21;
class C23 {
    static [765840071] = 9.619638671315911;
    static b;
    o(a25) {
        const o26 = {
        };
        new Proxy(this, o26);
        return 9.619638671315911;
    }
    [9.619638671315911] = 4294967296;
    a = 9.619638671315911;
    [765840071] = 4294967296;
    198;
    static a = 9.619638671315911;
}
const v29 = new C23();
v29[765840071];
const v31 = new C23();
v31[765840071] = v31;
const v32 = new C23();
try { v32.o(v16); } catch (e) {}
const v34 = [5.0,1.438988129508878e+307,0.9483187069258213,0.8629275940441922,4.384597652804793];
const v35 = v34?.filter;
try { new v35(v21); } catch (e) {}
v34[1];
const v38 = [4.1301107813438875,-9.681737074678502];
v38[1];
const v40 = v38[1];
v40 / v40;
const v42 = [-2.0];
try { v42.groupToMap(v34); } catch (e) {}
1.7976931348623157e+308 >>> 1.7976931348623157e+308;
-2.220446049250313e-16 >>> -2.220446049250313e-16;
let v48 = 0;
do {
    try { gc.call(v20); } catch (e) {}
    const o51 = {
    };
    o51.h = o51;
    o51.e = o51;
    gc(o51);
    const v53 = v48++;
    v53 >>> v53;
} while (v48 < 5)
new BigUint64Array(512);
let v61 = 2718;
v61++;
new BigUint64Array(v61);
10 % 10;
const v68 = new Float64Array(10);
const v69 = v68[7];
v69 - v69;
const v71 = [-12,0,-2107431110,4,512,-63916];
const v72 = /Mrn(?:a*)+IhCO/udimsy;
v72.e = v72;
v72.unicode;
const v74 = v72.__proto__;
v74.flags = v74;
v74.hasIndices;
const v76 = [0.021647043302781555,982.9822277058386,68.55386187204931,-3.6548181863708407e+307,0.20797002453168356,1000000.0,-569469.7761417266,-3.877892592640821,Infinity,5.0];
try { v76.lastIndexOf(v76); } catch (e) {}
const v78 = v76.toLocaleString();
try { v78.blink(); } catch (e) {}
v78[437] = v78;
const v81 = ("toString")?.italics;
v81.name;
try { new v81(); } catch (e) {}
"toString" == "toString";
-0.22113456748615867 >= -0.22113456748615867;
const v87 = -(-0.22113456748615867);
v87 - v87;
const v89 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
const v90 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v91;
try { v91 = v90.keys(); } catch (e) {}
const v92 = v91?.__lookupGetter__;
try { new v92(9.619638671315911); } catch (e) {}
try { v91.next(); } catch (e) {}
let v95;
try { v95 = v90.map(); } catch (e) {}
function f96(a97, a98, a99) {
    a97++;
    try { a98.push("toString"); } catch (e) {}
    a97 + a97;
    return a98;
}
const v103 = f96(-0.22113456748615867, v71);
try { v103.map(v103); } catch (e) {}
try { v103.toReversed(); } catch (e) {}
v103.d = v103;
const v106 = f96(v90, v89);
try { v106.findLast(v106); } catch (e) {}
try {
    v90.forEach();
} catch(e109) {
    e109.message = e109;
    const v110 = e109.message;
    v110 >>> v110;
    try { v110.codePointAt(e109); } catch (e) {}
}
let v113 = 5;
v113 % v113;
v113--;
try { new BigInt64Array(v32, v113, v76); } catch (e) {}
const v118 = new BigInt64Array(v113);
try { v118.some(512); } catch (e) {}
v118[4];
let v121 = 3088;
v121--;
let v123 = v121 * v121;
v123++;
const v126 = v118.toLocaleString(v121, [-536870912,8,9007199254740992,-461574414,3,-268435456,-536870912,65535,-1713660255,128]);
v126[4] = v126;
const v127 = v126?.toLocaleUpperCase;
try { v127(); } catch (e) {}
v127.name;
try { new v127(); } catch (e) {}
const v131 = v106.fill();
v131[6];
let v133;
try { v133 = v131.concat(v131); } catch (e) {}
try { v133.pop(); } catch (e) {}
const v135 = f96(v90, v106);
([-3,2147483648,127,18127,7,5]).toLocaleString();
try { gc(); } catch (e) {}
gc();
const o141 = {
};
o141.e = o141;
o141.f = o141;
const v142 = v135.includes(v95, v103);
v142 && v142;
!(!v142);
