function f0() {
    const v5 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
    for (let v6 = 0; v6 < 5; v6++) {
        v5[v6] = "setFloat64";
    }
    const o16 = {
        "d": "setFloat64",
        "a": 1073741823,
        ..."Vb2",
        "c": f0,
        set f(a8) {
            super.g;
        },
    };
    return o16;
}
const v17 = f0();
const v18 = f0();
f0();
const v21 = new v18();
class C24 extends ([9007199254740992,9007199254740992]).constructor {
}
const v25 = new C24();
Object.defineProperty(v25, 65537, { value: v21 });
~2147483649;
const v34 = new WeakMap();
const v35 = /8[\cA]v/uisy;
v35.dotAll = v35;
function f36(a37, a38, a39, a40) {
    const o45 = {
        p(a43, a44) {
        },
        10: 1073741824,
    };
    for (const v47 in "1024") {
    }
}
for (let v48 = 0; v48 < 5; v48++) {
    f36();
}
function f50(a51, a52) {
    function f53(a54, a55) {
        const o56 = {
            ...a54,
        };
        o56.g = o56;
        return f53;
    }
    f53.d = f53;
    const t49 = f53();
    t49(f53);
    try { a51.split(v34, a52); } catch (e) {}
    const v60 = [v35,v35,v35,v35,v35];
    return v34.set(v60, v60);
}
v35[Symbol.toPrimitive] = f50;
const v64 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    let v65 = "-185650492";
    const v68 = new BigUint64Array();
    const v70 = new Set();
    function F71(a73, a74) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = a73;
        } catch(e75) {
            for (let [v76,v77] of a73) {
                class C78 {
                }
                v65 = e75;
                v76 ^= v68;
                C78 != a73;
                const v80 = new C78();
                const t73 = v80.g;
                t73.length = 1;
            }
        }
        try {
            this.h = v70;
        } catch(e83) {
            this.toString();
            ("E")[2555];
        }
        try {
            const v86 = v70[this];
            try {
                new F71(v86, -2046072084n);
            } catch(e89) {
            }
            const o91 = {
            };
            const v93 = new SharedArrayBuffer(1024, o91);
            new BigInt64Array(v93);
            this.b = Set;
        } catch(e96) {
        }
    }
    new F71();
    v64.length = v35;
} catch(e98) {
    e98.message;
}
1073741824 + 1073741824;
BigInt64Array.f = BigInt64Array;
new BigInt64Array(v17);
try { f0.find(2055241242); } catch (e) {}
