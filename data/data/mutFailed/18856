const v0 = [3,-389421101,1,9007199254740992];
function f1() {
    const v2 = v0.filter(...v0, ...v0, ...v0, ...v0);
    function F3() {
        if (!new.target) { throw 'must be called with new'; }
        [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
        const v8 = Date();
        try { v8.small(); } catch (e) {}
        for (const v13 of Array(19793)) {
        }
        try {
        } catch(e14) {
        }
    }
    return v2;
}
const v17 = Symbol.toPrimitive;
v0[v17] = f1;
const v18 = [-65537,2147483649,-106324131,4294967296];
v18.valueOf = Symbol;
const v19 = [-25828,-2147483647,-608633157,-9223372036854775807];
function f20() {
    v19[1438740531] = v17;
    return v0[536870912];
}
v19[Symbol.toPrimitive] = f20;
%PrepareFunctionForOptimization("object");
class C26 {
}
function f27() {
    return f27;
}
function f28(a29) {
    v17[1] = a29;
    function f30(a31, a32) {
        a32?.__lookupGetter__;
        a32?.constructor;
        return f30;
    }
    return f30(f30, Symbol);
}
f27.constructor = f28;
const t42 = f27()?.constructor;
const v38 = t42();
let v39;
try { v39 = v38.bind(); } catch (e) {}
v39.bind();
let v41 = -85982918;
v41++;
function f44() {
    return 268435456;
}
function f45(a46, a47) {
    a47[Symbol.toPrimitive] = f28;
    try { a47.with(268435456, 268435456); } catch (e) {}
    const o59 = {
        ...v0,
        "c": a47,
        __proto__: v18,
        [a47](a52, a53) {
            Object.defineProperty(this, "c", { writable: true, set: f44 });
            a46 & a46;
            return v18;
        },
    };
    o59[3];
    return o59;
}
const v61 = f45(v41, v0);
function f62(a63) {
    a63?.[10000] % f44;
    return v18;
}
Object.defineProperty(v61, "valueOf", { configurable: true, enumerable: true, value: f62 });
const v66 = f45(-238949539, v18);
try { v66.group(f45); } catch (e) {}
const v68 = f45(v41, v0);
try { v68.slice(v61, v19); } catch (e) {}
function F70(a72, a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(v19, v19, a73, v41); } catch (e) {}
    ~a73;
    a75 | a75;
    const v79 = this.constructor;
    try { new v79(); } catch (e) {}
    typeof Float32Array;
}
new F70();
new F70();
