Int16Array.from(Int16Array);
new Int16Array(128);
const v8 = new Uint8ClampedArray(798);
Int16Array.from(v8);
class C12 {
    [3.3270569326022894];
    [-207591230];
    constructor(a14, a15) {
        Math.round(268435456);
        +this;
        const v23 = ("minor").valueOf("minor", "minor", "minor", "minor");
        v23.split(v23);
        new Date(536870888, 1000.0);
        (this & 268435456) || -1e-15;
        Math.d = Uint8ClampedArray;
        const v32 = new Int8Array();
        Object.defineProperty(v32.buffer, "constructor", { writable: true, configurable: true, value: Date });
    }
}
const v34 = new C12(3.3270569326022894, -4.0);
const v35 = new C12(v34, v34);
const v36 = new C12(v34, v35);
class C39 {
    2824;
    #a = v36;
}
new Uint8Array(481);
const v43 = [];
try { v43.with(v43, v43); } catch (e) {}
new C39();
new C39();
new C39();
const v51 = new Uint8Array(2);
for (let i = 0; i < 10; i++) {
    v43[v43];
    try { BigInt64Array(BigInt64Array); } catch (e) {}
    [0.8307152163010869,1.0,0.0] instanceof -56830;
    new BigUint64Array();
}
const o61 = {
    "deleteProperty": Date,
    "ownKeys": Date,
};
new BigUint64Array(53);
const v66 = new Uint16Array(2);
function f72() {
    for (let v73 = 0; v73 < 5; v73++) {
        v73++;
        v73 / v73;
        function f76() {
            return f72;
        }
    }
    return f72;
}
v51.join(2, ...v66, BigUint64Array, 268435439);
try {
    ("184880194").split();
} catch(e79) {
    C12.__lookupGetter__;
    for (const v81 in v43) {
    }
    const v82 = [601759695];
    const v83 = [1073741824,1073741823,1376142744,1073741825];
    function f84(a85, a86, a87, a88) {
        function f90() {
            return a88;
        }
        arguments.c = 1163987790;
        -9223372036854775808n & -2147483647n;
        const v101 = new Int8Array();
        const v102 = v101.buffer;
        class C105 {
            static {
                for (const v107 of "-4294967295") {
                }
            }
        }
        v102.slice();
        %OptimizeFunctionOnNextCall(f90);
        let v110;
        try { v110 = v83["find"](..."find", a88, ...v82); } catch (e) {}
        v110 <= a87;
        return arguments;
    }
}
try {
} catch(e115) {
    eval("");
}
