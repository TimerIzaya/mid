function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        return F0;
    }
    this.toString = f2;
    try {
        this.a = -430903656;
    } catch(e7) {
    }
}
const v8 = new F0();
const v9 = new F0();
const v10 = new F0();
function f11(a12, a13) {
    const o25 = {
        10000: v9,
        "f": a13,
        8: a12,
        "g": a13,
        "e": v9,
        toString(a15, a16, a17) {
            try {
                new F0();
                try {
                    f11(/I+/udmsy, /(a{12,3b+)/gdimsy);
                } catch(e22) {
                }
            } catch(e23) {
            }
            const v24 = a17;
            return v9;
        },
        "a": a12,
        ...v8,
        __proto__: v9,
        ...v10,
        [v9]: f11,
        "h": v9,
    };
    return o25;
}
const v26 = f11(f11, v8);
const v27 = f11(F0, v26);
f11(v27, v26);
class C29 extends f11 {
    #p(a31, a32, a33) {
        super.toString();
        Object.defineProperty(this, a33, { get: f11 });
        try {
            a33.valueOf = f11;
        } catch(e35) {
        }
        return this;
    }
    static #a = f11;
    h = v10;
    d = v27;
    static #e;
    static #h = v26;
}
new C29();
new C29();
new C29();
new Uint32Array(14);
new Float32Array(239);
new Int32Array(129);
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    function f50(a51) {
        new F48();
    }
    Object.defineProperty(this, "a", { set: f50 });
    1191742690 > 1191742690;
    try {
        this.a = 1191742690;
    } catch(e55) {
    }
}
new F48();
