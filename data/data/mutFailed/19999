class C3 {
    4;
    #m(a5, a6) {
        function f7() {
            return "species";
        }
        return C3;
    }
    n(a9) {
        const v10 = -2.0 << a9;
        function F11(a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            this.constructor;
            try { new v10(); } catch (e) {}
        }
        new F11(F11, F11, F11);
        const v22 = new BigUint64Array(10);
        for (const v24 in v22) {
            new Float64Array(2147483647);
        }
        return -433.30212838152613;
    }
}
try { new C3(); } catch (e) {}
const v30 = new C3();
v30[4];
new C3();
new C3();
[-16,20772,-4,1650610791,255,9007199254740990,-1];
[6,1120927120,256,-9007199254740990];
const v36 = [8,1073741824,6,-12,-1652573835,-2104819202,-8473];
let v37;
try { v37 = v36.sort("species"); } catch (e) {}
function f38() {
    return v36;
}
const v42 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
try { v42.flat(); } catch (e) {}
2.220446049250313e-16 > -2.0;
const v48 = v42.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
v37.g = v48;
new Uint8ClampedArray(v48);
