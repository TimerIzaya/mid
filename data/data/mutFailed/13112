function f0() {
    700240.7988350873 >= 700240.7988350873;
    const o18 = {
        toString(a6, a7) {
            try { a6(-536870912, a7, a6); } catch (e) {}
            new Int8Array(6);
            new Uint8ClampedArray(2329);
            const v17 = new Float32Array(6);
            return v17;
        },
        [-536870912]: -536870912,
        "h": -536870912,
    };
    return o18;
}
const v19 = f0();
const v20 = f0();
const v21 = f0();
const v22 = [v20,f0,v19,v20,v19];
const v23 = [f0];
let v24;
try { v24 = v23.entries(); } catch (e) {}
const v25 = [v21,v20,v19,v22,v22];
0 >> 0;
Object.defineProperty(v24, 723762630, { enumerable: true, get: f0 });
v20[65537] = 0;
let v28;
try { v28 = v24(v25, v23, 0, v25, v25); } catch (e) {}
v20[v22] **= v28;
v22[5];
const v31 = new Float64Array(0);
const o33 = {
    "ownKeys": f0,
    "setPrototypeOf": f0,
};
new Proxy(v31, o33);
new Uint8Array(512);
733 !== 733;
const v42 = new Int16Array(733);
v42[646];
let v45 = -4294967296n * -4294967296n;
v45--;
const o49 = {
    "maxByteLength": 268435439,
};
const v51 = new ArrayBuffer(127, o49);
new DataView(v51);
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    -a57;
    a58 * a58;
    a58--;
}
new F55(35994, v45);
