class C3 {
    63;
    constructor(a5, a6) {
        let v4 = this;
        throw -65535n;
        a6?.[3];
        v4 *= a6;
    }
    o(a9) {
        let v10 = 0;
        while (v10 < 3) {
            super[11n];
            v10++;
        }
        try {
            this.fuck(a9, a9, 6.941367376283275e+306);
        } catch(e20) {
        }
        return 11n;
    }
    1130;
    static set b(a22) {
        a22 || this;
        const o24 = {
        };
        new Proxy(this, o24);
    }
}
const v27 = new C3(11n, -9n);
const v28 = -65535n != v27;
v27[C3] = 11n;
const v29 = v27[16];
v29.e >>= v29;
try { v27.o(v28, v27, v28, C3); } catch (e) {}
new C3(11n, 11n);
const v32 = new C3(-9n, C3);
[-65535n,v32,[-995267436,-8,-9n,-995267436,-65535n],v32,11n];
[-2147483649];
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    function f46(a47, a48) {
        const v50 = ("0x2I").sup(F42, "0x2I", "0x2I", a48, f46);
        v50.toString(F42, v50, a47, this);
        return f46;
    }
    %PrepareFunctionForOptimization(f46);
    f46(F42, F42);
    %OptimizeFunctionOnNextCall(f46);
    f46(a45, a45);
}
new F42(F42, F42);
