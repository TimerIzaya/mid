function f0() {
    const v3 = [1868255996,1,2,9007199254740992];
    try { v3.includes(undefined, -4934n); } catch (e) {}
    this[628786973] = BigUint64Array;
    const o21 = {
        "a": 773.9404118872942,
        6: 773.9404118872942,
        [773.9404118872942](a12, a13) {
            let v14 = 0;
            while (v14 < 2) {
                v14++;
            }
            return v14;
        },
    };
    return o21;
}
const v22 = f0();
const v23 = f0();
const v24 = f0();
new Float64Array(6);
class C31 {
    2147483647 = undefined;
}
const v32 = new C31();
for (const v33 in v32) {
}
let v34 = -1073741824n;
class C35 {
    [v34] = v34;
    16;
    o(a37, a38) {
        v22[5] = a38;
        v24[512];
        super.d = a38;
        return a37;
    }
    c;
    constructor(a42, a43) {
        const v44 = v24[7];
        const v45 = v22 || f0;
        v34 *= v44;
        v45.__proto__;
        v23[Symbol.toStringTag] = 2147483648n;
    }
    /*
    constructor(a50, a51) {
        const v52 = this.constructor;
        try { new v52(); } catch (e) {}
        this[6] >>>= 6;
    }
    */
}
new C35(1024n, C35);
new C35(1024n, v24);
new C35(2147483648n, v22);
function F60() {
    if (!new.target) { throw 'must be called with new'; }
}
function f64(a65, a66) {
    const o74 = {
        toString(a68, a69, a70, a71) {
            return "preventExtensions";
        },
        get e() {
            return "-1865512128";
        },
    };
    return "preventExtensions";
}
const v79 = (2136873598).constructor;
function f80(a81, a82) {
    return a81;
}
try { f80(); } catch (e) {}
function f84(a85) {
    return f84;
}
v79().toExponential();
