if ("MAX_SAFE_INTEGER") {
    "MAX_SAFE_INTEGER" >= 1n;
} else {
    const t3 = "MAX_SAFE_INTEGER";
    delete t3[3];
}
const v8 = new BigUint64Array();
const o9 = {
    ...v8,
};
const v13 = typeof 9n === "number";
v13 && v13;
-(v13 | v13);
try {
    const t14 = "d";
    t14.__proto__ = "MAX_SAFE_INTEGER";
} catch(e17) {
}
let v18 = 2073825150;
/[.ma\Sc]/vdimsy.exec(Int16Array);
function f23(a24) {
    for (let i = 0; i < 10; i++) {
        ["object"];
    }
}
Object.defineProperty("d", "c", { enumerable: true, set: f23 });
%VerifyType("d");
const v31 = -v18;
v31 / v31;
Math.log10(v31);
let v34 = Math.random();
v34++;
4294967295 >>> 4294967295;
const v37 = [];
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    function F48() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            const v52 = this.__proto__?.constructor;
            try { new v52(); } catch (e) {}
            F48[8] = this;
            this.a = -4;
        } catch(e54) {
        }
        try {
            this.g = -4;
        } catch(e55) {
        }
    }
    const v56 = this.constructor;
    try { new v56(a47, v37); } catch (e) {}
    a45[2];
}
new F42("ceil", "pop", "ceil", "isConcatSpreadable");
new F42("ceil", "ceil");
const v61 = ++v18;
v61 != v61;
894205.8305286025 + 894205.8305286025;
0.4951991091233857 > 0.4951991091233857;
481 / 481;
const v73 = new Uint8Array(481);
v73.indexOf(Uint8Array, 481);
