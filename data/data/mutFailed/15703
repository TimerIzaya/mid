const v0 = [6.505239989552642];
const v1 = [-5.0,-7.178824475784181e+307];
const v2 = [NaN,-477.2758368534911,-Infinity,0.020938062891702747,1e-15,529826.3011641898,0.7990436996537329,9.834226796846004,0.0];
class C3 {
    static 0;
    p(a5, a6) {
        for (const v7 in C3) {
            let v8;
            try { v8 = a5.filter(a6, v2); } catch (e) {}
            super[v2];
            super.g &&= v8;
        }
        return v0;
    }
    static a = v2;
    static 127;
}
C3.length = C3;
const v10 = new C3();
try { v10.p(v0, v10); } catch (e) {}
new v2();
const v13 = new C3();
Uint8ClampedArray.prototype = Uint8ClampedArray;
new Uint8ClampedArray(v13);
new v1(178);
const v22 = new Int8Array(7);
try { v22.subarray(v22, v0); } catch (e) {}
class C25 extends Float32Array {
}
C25.name;
const v27 = new C25();
v27.length;
const v30 = [v27,v27];
const v33 = Reflect.apply(v27.reverse, v27, v30)?.__defineSetter__;
try { new v33(v2, v2); } catch (e) {}
