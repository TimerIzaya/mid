let v5 = -65537;
const v6 = v5--;
const v7 = [v5,v5,-536870912];
const v8 = [-30176,v7];
try { v8.values(); } catch (e) {}
[v7,1,-30176,v8];
const v11 = [4294967297,1073741824,256,-13,-2,256];
v11[4] = v11;
const v12 = [-931108822];
try { v12.entries(); } catch (e) {}
const v14 = [-6,14];
const v15 = [];
[1000.0,-5.371943296273409];
const v18 = [2.220446049250313e-16,-1e-15,-608.4005139519284,0.9533113881733636];
[0.6091733271803677,1000.0,810289.1403032676,0.9320700773584879,2.0];
const v20 = Array(-30176);
%PrepareFunctionForOptimization(Array);
Array(-30176);
const v22 = Array(-30176);
%OptimizeMaglevOnNextCall(Array);
Array(-30176);
Array.length;
const v26 = new Array(228);
v26.d = v26;
class C27 {
    [Array] = v15;
    static set f(a29) {
        Object.defineProperty(this, "h", { set: Array });
        function F30(a32, a33, a34) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = v22;
            } catch(e35) {
            }
        }
        new F30(C27, v6, v15);
        new F30(1, v20, v14);
        new F30(-30176, this, v18);
    }
    static {
        try { new this(); } catch (e) {}
        function F41(a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            a44.d = a44;
            try {
                this.b = a44;
            } catch(e45) {
            }
        }
        const v46 = new F41(v26, this);
        new F41(Array, F41);
        new F41(v46, v26);
    }
}
new C27();
const v50 = new C27();
const v51 = v50?.constructor;
try { new v51(); } catch (e) {}
const v53 = new C27();
let v56;
try { v56 = v50.o(C27, v53, -1n, v26); } catch (e) {}
try {
    const t62 = "7MU";
    t62.valueOf = v56;
} catch(e57) {
}
-64;
const v61 = new BigInt64Array(64);
v61[25];
const v65 = Int8Array?.of;
try { new v65(); } catch (e) {}
new Int8Array(8);
const v70 = new Uint8ClampedArray(256);
v70.BYTES_PER_ELEMENT = v70;
new Int16Array(1);
new Uint16Array();
const v79 = new Int16Array(386);
v79[108] = v79;
new Uint16Array();
const v85 = new Int16Array(16);
try { v85.findLastIndex(Int16Array); } catch (e) {}
new BigInt64Array(2);
const v91 = Symbol.iterator;
v70[256] -= 1;
new Float32Array(8);
new Float32Array(5);
new Float64Array(774);
Symbol.for(v91.description);
const o112 = {
    [v91]() {
        let v105 = 10;
        const o111 = {
            next() {
                v105--;
                v105 == 0;
                const o110 = {
                };
            },
        };
    },
};
