class C3 {
    static #c;
    [-4294967297] = -4.0;
    valueOf(a5, a6) {
        let v7;
        try { v7 = a5(a5, -4294967297, this, a6, a6); } catch (e) {}
        const v8 = delete v7?.h;
        v8?.[25];
        v8 & -4294967297;
        return a6;
    }
    static get f() {
        new BigUint64Array(186);
        function f16() {
            for (const v18 in [-65535,536870889,4096]) {
            }
            try {
                f16();
            } catch(e20) {
            }
            return f16;
        }
        new Int8Array(2);
        new Int16Array(3040);
        return 186;
    }
}
new C3();
const v27 = new C3();
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor.arguments;
}
9007199254740991n * 9007199254740991n;
new C3();
const o45 = {
    toString(a37, a38) {
        new Int32Array(1024);
        new SharedArrayBuffer();
        this?.__lookupSetter__;
    },
};
function f46() {
    return v27;
}
let v49 = 0.982093033714947;
class C50 extends C3 {
    toString(a52) {
        const t48 = super["a"];
        t48[9] = 0;
    }
    #d = -4.0;
    [-4294967297];
    constructor(a56, a57) {
        super();
        function F58() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v60 = new F58();
        a57.a = v60;
        function F61(a63, a64, a65, a66) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v67 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v68 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
        let v70 = undefined;
        function f71() {
            let v72 = Float64Array;
            Array();
            v72 = F61;
            const v75 = v67.length;
            class C77 {
            }
            new C77();
            Symbol.toPrimitive;
            new Uint32Array(v68, v75);
        }
        v70 = f71();
        Object.defineProperty(this, a56, { writable: true, enumerable: true, get: f46, set: f46 });
        v49 = -439.11627688413125;
    }
    #valueOf(a85, a86, a87, a88) {
        Object.defineProperty(a86, "d", { writable: true, configurable: true, enumerable: true, get: f46, set: f46 });
        const v90 = Symbol.iterator;
        const o103 = {
            [v90]() {
                let v92 = 10;
                const o102 = {
                    next() {
                        v92--;
                        const v96 = v92 == 0;
                        const o101 = {
                            "type": "a",
                            n(a98, a99) {
                                return v96;
                            },
                            get d() {
                            },
                            "done": v96,
                            "value": v92,
                        };
                        return o101;
                    },
                };
                return o102;
            },
        };
        return a87;
    }
}
new C50(v49, -439.11627688413125);
new C50(-4.0, -4.0);
new C50(v49, v49);
Date.parse();
[/8[\cA]v/uisy];
const v113 = new Int8Array(520);
for (let v114 = 0; v114 < 5; v114++) {
    v113.indexOf(v114);
}
