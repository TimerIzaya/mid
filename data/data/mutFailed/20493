class C3 {
    static #h;
    static get d() {
        const v6 = Symbol.split;
        this[v6];
        return v6;
    }
    set e(a9) {
        const v14 = new Uint16Array(10);
        v14.indexOf(-2927);
        const v16 = this / true;
        try { new a9(a9, 4294967295, a9); } catch (e) {}
        super[-9223372036854775807] = v16;
    }
}
const v21 = new C3();
try {
    v21.f = C3;
} catch(e22) {
}
for (let [i26, i27] = (() => {
        0 + 0;
        return [0, 10];
    })();
    i26 < i27;
    i26++) {
}
new C3();
new C3();
new Int8Array(0);
const v41 = new Uint8Array(9);
const v44 = new Float32Array(16);
class C45 {
    #d;
}
const v46 = new C45();
const o47 = {
    __proto__: v46,
    ...v46,
};
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 3;
    } catch(e51) {
        const o52 = {
        };
        const v54 = new Proxy(v41, o52);
        try {
            v54.fuck(v54, 1073741825);
        } catch(e56) {
        }
    }
}
const v58 = new BigInt64Array();
var c = v58;
function f61(a62, a63, a64) {
    return a64;
}
[f61,4294967297,,];
const o67 = {
};
gc();
class C69 extends F48 {
    static #m(a71, a72, a73) {
    }
    constructor(a75, a76, a77) {
        try {
            a76.#a;
        } catch(e79) {
        }
    }
    static set d(a81) {
    }
}
try {
    v44.subarray();
} catch(e83) {
}
("function").normalize("NFKD");
/V/gdiy;
/a\b!/vmy;
/a{0,1}?/uisy;
new Int8Array(127);
const v94 = [-1.5424212036356715e+308];
const v95 = [];
function F97(a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    const v101 = this?.constructor;
    try { new v101(); } catch (e) {}
    this.c = Map;
    try {
        this.e = v95;
    } catch(e103) {
    }
    try {
        this.a = a99;
    } catch(e104) {
    }
    const v107 = new Int32Array(9);
    v107.reverse();
}
v94[536870887n] = gc;
function f111() {
    for (let v112 = 0; v112 < 5; v112++) {
        v112 & v112;
    }
    try {
        f111();
    } catch(e115) {
    }
    return f111;
}
new Uint8Array(v21);
function f121() {
}
