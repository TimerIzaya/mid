let v3 = -268435456;
v3--;
function F5() {
    if (!new.target) { throw 'must be called with new'; }
    const v8 = [F5,F5];
    [v8,1141300185,F5];
    let v10 = [this];
    Math.log2(v8);
    const v14 = v10++;
    v14 ^ v14;
    Math.asinh(536870887);
    try {
        class C18 extends this.constructor {
            e = F5;
        }
        C18.caller;
        new v10();
    } catch(e21) {
    }
}
new BigInt64Array(3852);
const v27 = new Int16Array(257);
class C28 {
    set h(a30) {
        eval();
    }
}
new Uint8ClampedArray(2436);
function f38() {
    let v39 = -65535;
    const o67 = {
        next() {
            v39--;
            return this;
        },
        m(a43) {
            const o44 = {
            };
            try {
                function f45(a46, a47, a48, a49) {
                    let v50 = 10;
                    for (; v50--;) {
                    }
                }
                o44.e = v39;
            } catch(e52) {
                const v56 = new Uint8ClampedArray(o44);
                new Uint8ClampedArray(798, ...v56, o44);
            }
            const v60 = new this(3938);
            let v61 = 3;
            let v62 = 0;
            for (let i = 0; i < 5; i++) {
                [...v61] = v60;
                v62++;
            }
            const o64 = {
            };
            try {
                const o65 = {
                };
            } catch(e66) {
            }
        },
    };
    v27.f = 145253519;
    const v71 = new String();
    Object.defineProperty(v71, 7, { configurable: true, enumerable: true, value: Int8Array });
    return o67.m(f38, v39, v39);
}
f38();
f38();
try {
const t0 = 6;
t0();
} catch (e) {}
function f78(a79) {
    const o83 = {
        ...Uint8ClampedArray,
        get d() {
            const v81 = this.__lookupSetter__;
            try { v81(); } catch (e) {}
            return f78;
        },
    };
    return o83;
}
const v86 = new Uint16Array(1412);
v86.lastIndexOf();
new Int32Array(9);
function f91() {
    const v93 = Math.atan(Math);
    return v93 - v93;
}
