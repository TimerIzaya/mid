const v3 = new BigUint64Array(558);
[9223372036854775807,-128];
let v10 = [-43938,12];
const v11 = [20156,-1024,-9007199254740991,-42101,9,-10,127,0,42218,-4096];
const v12 = new Float64Array(8);
v12[0] = v12;
let v15;
try { v15 = new Int16Array(Int16Array, 558, 1311); } catch (e) {}
const v16 = new Int16Array(1311);
const v17 = v16?.constructor;
let v18;
try { v18 = new v17(Int16Array, v3, 1311); } catch (e) {}
const v19 = [-Infinity,6.480988017773699e+306,573910.463011838,1e-15,0.3229651369155768,2.437804697941676,-4.0,-Infinity];
try { Float64Array.from(Float64Array); } catch (e) {}
const v23 = new Float64Array(256);
const v26 = new BigUint64Array(3);
const v28 = v26["indexOf"](v19);
let v29 = v28 - v28;
const v30 = [1073741824,-523864342,1161249740];
const v31 = async (a32, a33, a34, a35) => {
    [v29,,v10,a32] = v30;
    await v17;
    return v18;
};
const o37 = {
    ...v23,
    ...v30,
};
for (let v38 = 0; v38 < 100; v38++) {
    v31(v11, v17, v15, 128);
}
Object.defineProperty(v19, 1013, { writable: true, set: v31 });
const t32 = -370148119;
t32[5] = 1311;
