const v0 = [61725];
const v1 = [2100101793,1,5,-11,-65537,-28660,-2018026146,-14243];
function f2(a3) {
    v1.constructor;
    try {
        const o8 = {
            "maxByteLength": 1000,
        };
        new ArrayBuffer(10000, o8);
    } catch(e10) {
    }
    return v0;
}
const v12 = Symbol.toPrimitive;
v1[v12] = f2;
const v13 = [-9,1543297124,-256,1073741824,3,3,-536870912,-1,268435439];
function f14() {
    return v0;
}
try { f14(); } catch (e) {}
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    const v20 = this?.constructor;
    try { new v20(this, this); } catch (e) {}
    try {
        this.b = a18;
    } catch(e22) {
    }
    try {
        this.a = a19;
    } catch(e23) {
    }
}
new F16(v1, v1);
new F16(v1, v13);
new F16(v0, v13);
3 << 3;
Date[6] = v12;
function f35() {
    return v1;
}
function f36(a37) {
    -9223372036854775808n - -9223372036854775808n;
}
f36.caller = f36;
Object.defineProperty(Date, 3, { configurable: true, enumerable: true, get: f35, set: f36 });
const v41 = new Uint8ClampedArray(Date);
v41[1] = v41;
