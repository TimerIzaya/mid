class C3 {
    constructor(a5, a6) {
        try { new a5(a5); } catch (e) {}
    }
    c;
    #a;
    static p(a12) {
    }
    ["-1258375416"];
    static #g = "-1258375416";
    #h = 268435440;
    #m(a14, a15) {
        super.h = a15;
        return -2;
    }
    static #a;
    static ["-1258375416"];
    [-2];
    /*
    constructor(a17, a18) {
        try {
            a17.fuck(false, this);
        } catch(e21) {
        }
    }
    */
}
const v22 = new C3(-2, "-1258375416");
const v24 = Map.prototype;
try { v24.clear(v24, Map); } catch (e) {}
const v27 = new Float32Array();
const v29 = new Uint32Array(268435440);
v29[v29] = v27;
const v30 = new C3(-2, v22);
new C3(v30, v30);
[-4294967297,-7,1024,50271,1607717221,127,-47109];
[-2443,-4096];
[2,7,16,1,536870887,-2147483648,512,268435456,1438139465];
function f36() {
    return 268435440;
}
class C41 {
}
const v42 = new C41();
let v44;
try { v44 = undefined(); } catch (e) {}
let v45;
try { v45 = v42(); } catch (e) {}
function F46(a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    class C51 {
    }
    function F52(a54, a55, a56, a57) {
        if (!new.target) { throw 'must be called with new'; }
        C51.d = v45;
        "p" + 11;
        const v60 = this.constructor;
        try { new v60(); } catch (e) {}
    }
    new F52(a50, v42, C51, undefined);
    new F52();
}
new F46(undefined, F46, v44);
