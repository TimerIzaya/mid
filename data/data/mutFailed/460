function f2() {
    return 160;
}
const v4 = ([1.479450712344466]).join();
for (let v5 = 0; v5 < 25; v5++) {
    v4.__proto__;
}
const v8 = new Uint8ClampedArray(255);
new Int32Array(7);
const v14 = new Int16Array(255);
function f15() {
    return f2;
}
function f19() {
    let v20 = -1000000000.0;
    const o28 = {
        o(a22, a23) {
            function f24(a25, a26, a27) {
                v20 |= a23;
            }
        },
    };
}
f19();
f19();
const v31 = v14();
const v33 = /[\cA]?/d;
const v34 = /jU/vims;
const v35 = /a+b|c/gvdimsy;
function f36(a37, a38, a39) {
    try {
        v33.f = v8;
    } catch(e40) {
    }
    function F41(a43) {
        if (!new.target) { throw 'must be called with new'; }
        this.h = a43;
    }
    const o48 = {
        set a(a45) {
            v8.g;
            super.toString();
        },
    };
}
Math.cos(0.8497483139616006);
for (let v52 = 0; v52 < 10; v52++) {
    for (const v53 in "a") {
        new Uint8Array(3041);
        new v52(128);
        new Uint16Array(256);
    }
    function* f63(a64, a65, a66) {
        return a65;
    }
    f63();
}
const v68 = f36(v33, Int32Array, v31);
const v69 = f36(v35, 160);
const v70 = f36(v34, v33, v68);
const v71 = /a\S/gudsy;
const o73 = {
};
try {
    o73.a = v71;
} catch(e74) {
}
try {
    const o75 = {
    };
    o75.a = v71;
    o75.c = Int32Array;
} catch(e76) {
}
try {
    const o77 = {
    };
    o77.a = v71;
    o77.c = 7;
    v70.g = "jBHoR";
} catch(e78) {
}
try {
    const o79 = {
    };
    o79.a = v71;
    o79.c = Int32Array;
    o79.g = v70;
} catch(e80) {
}
const v81 = /\u{12345}\u{23456}/vsy;
/f}L/gdis;
try {
    v69.fuck([v81,v70,v34,v71,-52627n], false);
    const v87 = Float32Array.length;
    function F89(a91, a92) {
        if (!new.target) { throw 'must be called with new'; }
        const v93 = this?.constructor;
        try { new v93("yi", v87); } catch (e) {}
    }
} catch(e95) {
}
/[Fa\b!]/gimy;
/\u{12345}leqkLU[\c!]/gs;
new Uint8ClampedArray(9);
new Uint8ClampedArray(12);
