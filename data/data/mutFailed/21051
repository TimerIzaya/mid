-10;
const v7 = new Float32Array(10);
let v9 = Float64Array;
const v10 = new v9(235);
const v13 = new Int8Array(3756);
function f14(a15, a16) {
    const o25 = {
        m(a18, a19, a20, a21) {
            const o22 = {
            };
            new Proxy(this, o22);
            return 2147483648;
        },
        1699: v10,
        "b": v13,
        __proto__: v13,
        ...v10,
        "a": v13,
        "c": a16,
        "f": 6,
    };
    return o25;
}
const v26 = f14(10, Int8Array);
const v27 = f14(3756, 235);
f14(2147483648, -26377);
try { new Int16Array(v27, v26, f14); } catch (e) {}
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = v13?.constructor;
    try { new v35(a33, a33); } catch (e) {}
}
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.__lookupGetter__;
    v39.length = v26;
    try { v39(); } catch (e) {}
    const v42 = Date.toString();
    const v43 = v42[23];
    try { v43.italics(); } catch (e) {}
    let v45;
    try { v45 = v43.strike(F37, F37, v42, Int16Array); } catch (e) {}
    v45.length = v45;
    const v46 = v42.replaceAll();
    let v47;
    try { v47 = v46.replaceAll(); } catch (e) {}
    try { new Uint32Array(this, v47, Date); } catch (e) {}
    const v50 = new Uint32Array(v39, v39, v39);
    v50[2];
    const v53 = new Set(v47);
    const v54 = v53.add;
    v54.length = v54;
    const v56 = v53["delete"]();
    const v57 = v56 || v56;
    const v58 = v57 || v57;
    const v59 = v57 && v57;
    !v43;
    let v61 = 19793;
    v61--;
    const o63 = {
    };
    o63.f = o63;
    let v65;
    try { v65 = v53.forEach(v58, v54); } catch (e) {}
    const v67 = -v56;
    const v68 = v67 >>> v67;
    -v68;
    const v70 = Int16Array >>> v58;
    try {
        arguments.fuck();
    } catch(e72) {
    }
    try { ("getPrototypeOf").normalize(); } catch (e) {}
    const v75 = ("getPrototypeOf").blink();
    v75[8];
    const v77 = v75.trimRight;
    try { v77(v58, Int16Array); } catch (e) {}
    const v79 = v75[28];
    try { v79.italics(); } catch (e) {}
    const v81 = v79.strike();
    try { v81.fontsize(v68); } catch (e) {}
    try { v81.isWellFormed(); } catch (e) {}
    const v84 = v75.strike(v47);
    try { v84.blink(); } catch (e) {}
    const t84 = v84.replace(v56, Int16Array, v75, Array, v84);
    t84[11] = v81;
    class C87 {
    }
    class C88 extends C87 {
        ["getPrototypeOf"] = C87;
    }
    C88.name;
    const v90 = new C88();
    const v91 = v90.getPrototypeOf;
    try { new v91(); } catch (e) {}
    function f93() {
        return Date;
    }
    Object.defineProperty(v70, "toString", { enumerable: true, get: f93 });
    new v91();
    const v95 = new F31();
    function f96(a97) {
        function f99() {
            return "object" + -13;
        }
        return a97;
    }
    v95.constructor = f96;
    const v102 = v95.constructor;
    v102.d = v102;
    const v103 = new v102(v50);
    function f104() {
        v9 = v39;
        try {
            new f93();
        } catch(e106) {
        }
        return 235;
    }
    f104.arguments;
    v103.valueOf = f104;
    v103.valueOf(Int16Array, v81);
    const v109 = new C88();
    const v110 = v109?.getPrototypeOf;
    try { new v110(); } catch (e) {}
    v109.constructor.prototype;
    new v84();
    const v115 = v109.getPrototypeOf;
    try { new v115(); } catch (e) {}
    const v117 = new v115();
    const v118 = v117?.constructor;
    try { new v118(); } catch (e) {}
    const v121 = BigUint64Array?.constructor;
    try { new v121(false); } catch (e) {}
    const v123 = BigUint64Array.of();
    try { v123.join(v123); } catch (e) {}
    try { v123.entries(Int16Array, F37, v43); } catch (e) {}
    try { Int8Array(Int8Array, Int8Array, v65); } catch (e) {}
    const v128 = new C88();
    const v129 = v128?.getPrototypeOf;
    try { new v129(); } catch (e) {}
    const v131 = v27.getPrototypeOf;
    try { new v131(); } catch (e) {}
    function f133(a134, a135) {
        for (let v136 = 0; v136 < 5; v136++) {
            function f138() {
                return f138;
            }
            const o141 = {
                "type": "function",
            };
            new Worker(f138, o141);
        }
        return a135;
    }
    f133.length;
    v131.toString = f133;
    const v144 = new v131();
    const v145 = v144?.__lookupGetter__;
    try { new v145("getPrototypeOf"); } catch (e) {}
    const t160 = v128.getPrototypeOf;
    const v148 = new t160();
    const v149 = v148.__defineSetter__;
    v149.name;
    try { v149(v70); } catch (e) {}
    const v152 = v128.getPrototypeOf;
    function f153() {
        "find" + 15;
        return 15;
    }
    v152.toString = f153;
    const v157 = new v152();
    const v158 = v157?.constructor;
    try { new v158(); } catch (e) {}
    v157.getPrototypeOf = 235;
    v157.getPrototypeOf = v157;
    const v160 = new C88();
    const v161 = v160?.getPrototypeOf;
    try { new v161(); } catch (e) {}
    v160.constructor = f104;
    const v163 = v160.getPrototypeOf;
    v163.toString = f133;
    const v164 = new v163(F37, "getPrototypeOf", v46);
    const v165 = v164?.constructor;
    try { new v165(); } catch (e) {}
    v164.b = v164;
    const v167 = new v163();
    const v168 = v167.constructor;
    try { v168.call(v79); } catch (e) {}
    const v170 = new v168();
    const v171 = v170?.__defineGetter__;
    try { new v171(v65, v7); } catch (e) {}
    Object.defineProperty(v170, "getPrototypeOf", { enumerable: true, value: v157 });
    let v173 = v170.getPrototypeOf;
    v173++;
    const t194 = v160.constructor;
    const v176 = new t194(F37, v59);
    const v177 = v176?.__defineGetter__;
    try { new v177(v54, C88); } catch (e) {}
    v176.constructor = f93;
    const v179 = v176.constructor;
    v179.d = v179;
    const v180 = new v179(v179);
    const v181 = v180?.constructor;
    try { new v181(235); } catch (e) {}
    const v183 = v176.getPrototypeOf;
    try { v183.toString(arguments, v183, v131); } catch (e) {}
    const v185 = Array(v61);
    try { v185.splice(v185, v167); } catch (e) {}
    const v187 = v185.with(v75, v70);
    try { v187.groupToMap(v95); } catch (e) {}
    for (const v189 of v185) {
    }
}
F37.arguments = F37;
new F37();
const v191 = new F37();
v191.h = v191;
