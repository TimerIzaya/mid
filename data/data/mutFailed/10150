(3.0).lastIndexOf();
function f11() {
    delete arguments.callee;
    return arguments;
}
new Array(2);
function F16() {
    if (!new.target) { throw 'must be called with new'; }
}
const v19 = new Date(-9223372036854775808);
v19.setUTCFullYear(-9223372036854775808);
function f21() {
}
new F16();
const v23 = new F16();
const v24 = new F16();
v24.g = v24;
const v25 = v24.g;
try { v25.bind(); } catch (e) {}
const v27 = -Infinity;
("of").replaceAll("of");
const v30 = v23.constructor;
try { new v30(); } catch (e) {}
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
}
const v37 = Number.isFinite();
const v38 = v37 && v37;
v27 - v27;
-261.1271706035858 + -261.1271706035858;
let v42 = -10n;
v42++;
const v44 = v42 << v42;
v44 + v44;
Math.sin(-268435456);
const v49 = /[abc+]/gvdim;
const v50 = v49.sticky;
const v51 = [v49,v49,v49,v49];
const v52 = /ka{0}/guims;
function f53(a54, a55) {
    const o56 = {
        ...v52,
        "d": v51,
        "c": a55,
        "g": a55,
        "f": v51,
        "b": v50,
        "a": a55,
    };
    return f53;
}
let v57 = 65535n;
const v58 = v57++;
v58 | v58;
v57--;
Int32Array.g = Int32Array;
new Uint16Array(12);
for (let v66 = 0; v66 < 25; v66++) {
    ("p").codePointAt(Uint8ClampedArray);
}
let v69;
try { v69 = Int32Array.of(); } catch (e) {}
let v70;
try { v70 = v69.entries(); } catch (e) {}
const v71 = v70.next(v38, v37);
new Uint8Array(268435440);
function f75() {
}
new Int32Array();
let v78 = 7;
v78--;
v78++;
new Int8Array();
const v83 = new Int8Array();
new Uint32Array(v83, v69, v71);
const o88 = {
    set f(a87) {
    },
    ...v49,
    "f": Uint16Array,
};
try { new Worker(); } catch (e) {}
