class C4 {
    constructor(a6, a7) {
        Math.imul(3n, -8);
        -8 + -8;
        Math.trunc(-8);
        Math.trunc(3n);
    }
    static valueOf(a16) {
        function F17(a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a21;
            } catch(e22) {
            }
            try {
                this.c = a19;
            } catch(e23) {
            }
            try {
                this.d = a16;
            } catch(e24) {
            }
        }
        new F17(a16, 9n, -38468n);
        new F17(-38468n, a16, a16);
        new F17(3n, 3n, a16);
        this[268435439] = -38468n;
        this[this] = this;
        new Float32Array(257);
        new Int32Array(128);
        new BigInt64Array(0);
        return null;
    }
}
new C4(9n, 3n);
const v38 = new C4(9n, 9n);
new C4(-38468n, 9n);
let v42;
try {
const t0 = 9n;
v42 = t0();
} catch (e) {}
v38[Uint8ClampedArray] /= v42;
new Uint8ClampedArray(47);
new Float32Array(257);
new Uint32Array(627);
[601759695];
const v54 = [1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    function f60() {
        +("Vre").constructor;
    }
    try { f60(); } catch (e) {}
    f60();
    try { v54["find"]("find"); } catch (e) {}
}
try {
    const o69 = {
    };
    new C4(2147483649n, o69);
} catch(e71) {
}
for (let v72 = 0; v72 < 10; v72++) {
    f55();
}
%OptimizeFunctionOnNextCall(f55);
f55();
