const v4 = (a5, a6, a7, a8) => {
    'use strict';
    return a5;
};
const v11 = /((?<=a))/gudm;
const v12 = /gk4b*/vmsy;
let v14;
try {
const t0 = -1.3832922122240728e+307;
v14 = t0(2);
} catch (e) {}
for (let v15 = 0; v15 < 5; v15++) {
    v15 < 1;
    try { v14(v11, v15, v12, v15, -4); } catch (e) {}
    const v20 = Symbol.iterator;
    const o24 = {
        [v20]() {
            const o23 = {
                next() {
                    return v12;
                },
            };
        },
    };
}
const v29 = new BigInt64Array();
v29.entries();
const v34 = new Float32Array(165);
new Int16Array(v34);
new Int32Array(1099);
new Int8Array(129);
new Uint32Array(3235);
const v44 = [-1000000.0,-1.0,952.4163692749257,41232.51719836402,-2.220446049250313e-16,869.918809614255,0.6566814488589754,-2.299816654271874,1000000000.0];
for (let v45 = 0; v45 < 5; v45++) {
    function f46() {
        let v47 = -268435456;
        v47 ^ v47;
        v47++;
        const o50 = {
            __proto__: v44,
        };
        try { o50.every(); } catch (e) {}
        return v44;
    }
    f46();
    %OptimizeFunctionOnNextCall(f46);
    class C53 {
    }
    const v54 = new C53();
    function f55(a56, a57) {
        return f55;
    }
    const v58 = f55(v54, C53);
    class C61 extends Date {
        static [v58];
        static [0.0] = v54;
    }
}
class C63 extends Map {
}
const v64 = new C63(v44);
const v65 = new C63(v64);
function f67(a68, a69, a70, a71) {
    try { a68.toLocaleString(); } catch (e) {}
    arguments.length;
    v64["entries"](a70, ...v65, BigUint64Array);
    const t64 = "e";
    t64[0] = "e";
    return "e";
}
