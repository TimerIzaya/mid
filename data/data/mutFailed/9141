function f0() {
    const o14 = {
        "g": "valueOf",
        ["species"]: "valueOf",
        set h(a5) {
            let {"g":v6,"length":v7,} = "c";
            v6 <= a5;
        },
        "f": "species",
        ["valueOf"]: "c",
        "d": "species",
        ["c"]: "species",
        __proto__: "species",
        n(a10) {
            const o11 = {
                "call": f0,
                "get": f0,
                "isExtensible": f0,
            };
            const v13 = new Proxy("species", o11);
            return v13;
        },
        "a": "species",
        "e": "species",
        25: "valueOf",
    };
    return o14;
}
const v15 = f0();
const v16 = f0();
f0();
let v20 = "f";
v20 &&= v20;
v16.g;
-Infinity;
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = "PI";
    } catch(e31) {
    }
}
new F25(v15, "vhmb2", "vhmb2", "PI");
const v33 = new F25("PI", "vhmb2", v20, "vhmb2");
new F25(v33, "vhmb2", "vhmb2", v20);
/v(x)(x)(x)\2/uy;
/ab\b\d\bcd/vdisy;
/[E(?:a+)?({z}a\w[\p{Script_Extensions=Mongolian}&&\p{Number}])]/gdi;
class C39 {
    static {
        try {
            const t51 = null;
            t51.valueOf = this;
        } catch(e41) {
            e41.stack;
        }
    }
}
const v43 = [null,null];
function f44() {
    const v45 = -v43;
    new Float32Array();
    -(v45 && v43);
    return C39;
}
%PrepareFunctionForOptimization(f44);
f44();
%OptimizeFunctionOnNextCall(f44);
f44();
