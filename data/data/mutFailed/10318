-4 - -4;
3265 >>> 3265;
Int32Array.length;
try { new Int32Array(-4294967295, 4294967296, 10000); } catch (e) {}
const v12 = new Int32Array(3265);
const v13 = v12[1060];
v13 !== v13;
new BigInt64Array(7);
let v18 = 3123;
v18--;
try { new BigInt64Array(Int32Array, Int32Array, Int32Array); } catch (e) {}
let v22;
try { v22 = new BigInt64Array(990659698, v18, 4096); } catch (e) {}
new v22(v18);
for (let i26 = 0, i27 = 10;
    (() => {
        i26 >>> i26;
        const v29 = i26 < i27;
        !v29;
        class C31 {
        }
        C31.length;
        function f33(a34, a35, a36, a37) {
            const v38 = BigInt64Array?.constructor;
            try { new v38(a34); } catch (e) {}
            a34 * a34;
            try { a35(); } catch (e) {}
            let v42;
            try { v42 = a35.apply(a37, a35); } catch (e) {}
            return v42;
        }
        f33(i27, C31);
        %OptimizeFunctionOnNextCall(f33);
        return v29;
    })();
    i26 >>> i26, i27--) {
    (i27 >> i27) + 3265;
}
