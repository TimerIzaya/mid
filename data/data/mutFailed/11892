class C3 {
    constructor(a5) {
        Reflect.construct(a5, [-2147483648,Reflect], a5);
    }
    static e = -2147483648;
    [-2] = 1000;
    static 10000 = 1000;
    static [-135632805];
    p(a10, a11) {
        if (a11 > 1000) {
            try {
                this.b = -135632805;
            } catch(e13) {
            }
        } else {
            try {
                function f14() {
                    const v16 = ("D")[0];
                    return v16.concat(v16);
                }
                %PrepareFunctionForOptimization(f14);
                f14();
                %OptimizeFunctionOnNextCall(f14);
                f14();
                this.fuck([a10,1000,-2147483648,-135632805,a11], -3.0, -135632805);
            } catch(e23) {
            }
        }
        return 1000;
    }
}
new C3(-2147483648);
new C3(-2147483648);
new C3(1000);
class C27 {
    get e() {
        super.h = this;
        const o32 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o32);
        return o32;
    }
    #a;
    [-2147483648];
    #c = 1000;
}
new C27();
new C27();
new C27();
new Uint32Array(114);
new Uint8Array(1000);
new Uint8Array(64);
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    a48 >= a48;
    const v51 = this.constructor;
    try { new v51(v51); } catch (e) {}
}
class C53 extends F46 {
}
new C53();
new C53();
