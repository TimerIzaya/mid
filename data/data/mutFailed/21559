const v3 = /VD/udim;
/\bR(?:ab)+\111?/gdmy;
const v5 = /\xed\xa0\x80/gvdims;
const v6 = [v5,20597,20597];
const v7 = [0];
class C8 {
}
const t7 = C8.length.constructor;
t7().toPrecision(v6, v5);
[v7,v3,v5,v6];
Symbol.iterator;
const o16 = {
};
const v18 = new Uint8Array();
const v20 = new Uint16Array();
function f21(a22, a23, a24, a25) {
    a22.g = a22;
    a24 % a24;
    const o30 = {
        "b": a22,
        ...v18,
        n(a28, a29) {
            v20[a22] = v20;
            return Uint8Array;
        },
    };
    return Uint8Array;
}
const v36 = [-48288,15,-63536,268435456];
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
}
const o42 = {
};
const v45 = Array(19793);
v45[8034] = v36;
for (const v46 of v45) {
}
class C47 extends Array {
    constructor(a49, a50, a51) {
        new Int8Array(1159);
        const o56 = {
        };
        gc(o56);
        super(a49, a51, 178, a51);
    }
}
new C47(178);
const v59 = new C47();
const t49 = [-1245897732,-9,-356186296,128,12,1119687909,6,0,268435439,-2147483649];
t49.__proto__ = [-1915908385,268435441,-4096];
const v62 = [601759695];
const v63 = [4,4294967297,50770,9007199254740991,-4294967297,13,-536870912,2,-8390];
function f64(a65, a66, a67, a68) {
    try { v63["find"](..."find", a68, ...v62, ...v63); } catch (e) {}
    const v73 = Symbol.isConcatSpreadable;
    const v74 = v73.description;
    const v75 = Array(a67);
    try { v75.groupToMap(v73, v74, f64, v75, v73); } catch (e) {}
    return v62;
}
for (let v77 = 0; v77 < 5; v77++) {
    f64();
}
const v79 = new C47();
for (let i = 0; i < 5; i++) {
    v59[v36] = v79;
}
