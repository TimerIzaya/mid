const v2 = new Float32Array(1685);
2368 >> 2368;
new Uint32Array(2368);
try { new Float64Array(3597, 1685, Float64Array); } catch (e) {}
new Float64Array(3597);
const v12 = 268435441 | 268435441;
536870912 === 536870912;
const v16 = -1871164927 >>> -1871164927;
v16 >> v16;
const v19 = new BigUint64Array();
let v20;
try { v20 = v19.entries(); } catch (e) {}
typeof (v19 >>> v2) === "number";
const o27 = {
    "maxByteLength": 127,
};
const v29 = new ArrayBuffer(127, o27);
new Float32Array(v29);
try { v20.next(); } catch (e) {}
const v33 = v19.values();
try { v33.next(); } catch (e) {}
try { v33.next(); } catch (e) {}
const o36 = {
};
o36.e = o36;
const v37 = o36.constructor;
try { new v37(v20); } catch (e) {}
try { v37.values(v2); } catch (e) {}
v37.getOwnPropertyDescriptors(v33);
for (let i42 = 0; i42 < 7; i42++) {
    o36[v12];
}
