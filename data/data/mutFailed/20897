function f1(a2) {
    const v3 = [a2,a2];
    [v3,Map,v3,Map];
    [Map,a2,v3,Map,Map];
    return Map;
}
let v6 = Symbol;
Map[v6.toPrimitive] = f1;
const v8 = new Map();
function f9() {
    Math.log1p(v6);
    v6--;
    Math.log2(v8 + v6);
    return Map;
}
v8.toString = f9;
class C19 {
    constructor(a21) {
        const v22 = [-7,1918358692,65450];
        try { v22.reverse(); } catch (e) {}
        [129,-65537,10,16,268435440,1198897590,-292044734,-17547,46143];
        const t20 = [-9007199254740991,1419764334,268435440,59464,14];
        t20[v8] ||= 1024;
    }
    [310908752];
    #a = 0;
    static 65537 = 310908752;
    b;
}
try { new C19(Map); } catch (e) {}
const v27 = new C19(Map);
v27[310908752];
new C19(1024);
new C19(310908752);
-4294967296 ^ -4294967296;
const t34 = (2136873598).constructor;
const v37 = t34();
v37 >>> v37;
const v39 = v37.toExponential();
try { v39.fontcolor(Map); } catch (e) {}
