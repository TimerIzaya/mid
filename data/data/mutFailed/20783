const v3 = [5.0];
[1000000000000.0,-1.7976931348623157e+308,4.98105960779659];
const v5 = [-4.0,1.7976931348623157e+308,2.2250738585072014e-308,-2.220446049250313e-16,1000000000.0,277.3244769959881,-1.0067515494890313e+308,-2.220446049250313e-16];
const v6 = v5 >>> v5;
const o7 = {
};
o7.e = v6;
const v10 = new BigInt64Array(3329);
const v12 = [v10];
const o13 = {
    "arguments": v12,
    "type": "function",
};
const v15 = new Map();
class C19 {
    constructor(a21, a22, a23) {
        function f24(a25, a26) {
            return a25;
        }
        this[Symbol.toPrimitive] = f24;
        a22[4] = v3;
        for (let v29 = 0; v29 < 25; v29++) {
        }
    }
    static set a(a32) {
        let [,v33,v34,v35] = v15;
        [1943696108,268435440];
        [-103034222,13,-4294967297,-1162525840,9,-3];
        [4,-65537,-16];
        a32?.[v33];
    }
    e;
    static #c;
    toString(a41, a42, a43) {
        const o44 = {
        };
        o44.g = "function";
        const o45 = {
        };
        o45.c = o45;
        const o46 = {
        };
        o46.g = o46;
        o46.g = "function";
    }
    static #o(a48, a49, a50) {
        super[-11112];
        super[7] = v5;
        for (let i53 = 0; i53 < 8; i53++) {
            const v59 = delete v15?.size;
            v59 & v59;
        }
        return -11112;
    }
}
new C19();
new C19();
new C19();
function F68(a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    function f75(a76) {
        const o77 = {
            ...65536,
            163: 4,
        };
        -o77[163];
        return f75;
    }
    const v80 = this.constructor;
    try { new v80(a70, a70, this); } catch (e) {}
    a70 + a70;
    try {
        this.e = a72;
    } catch(e83) {
    }
    try {
        this.prototype = -6.336273045214518e+306;
    } catch(e84) {
    }
    try {
        this.g = -1.7976931348623157e+308;
    } catch(e85) {
    }
}
const v86 = [601759695];
const v87 = [1073741824,1073741823,1376142744,1073741825];
function f89(a90, a91, a92, a93) {
    const v95 = arguments.toString();
    function f96() {
        ("Vre").fixed("Vre");
        const o113 = {
            [522675525n](a101, a102) {
            },
            ..."Vre",
            valueOf(a104, a105) {
                return this;
            },
            ...v86,
            ..."Vre",
            valueOf(a107, a108) {
                return a90;
            },
            ..."Vre",
            4: "Vre",
            toString(a110, a111, a112) {
                return v95;
            },
            5: -4294967295,
        };
        o113.valueOf();
        return f89;
    }
    f96();
    const v117 = new Int8Array();
    v117.buffer.slice();
    %OptimizeFunctionOnNextCall(f96);
    let v121;
    try { v121 = v87["find"](..."find", a93, ...v86, ...v87, ...522675525n); } catch (e) {}
    return v121;
}
f89(f89, 522675525n, f89, v87);
%OptimizeFunctionOnNextCall(f89);
new F68(268435439n, 268435439n, 12460n);
const v126 = new Uint16Array(64);
function f127() {
    class C130 {
    }
    let v131;
    try { v131 = new C130(12, -4294967296); } catch (e) {}
    const v132 = new C130(-4294967296);
    const v133 = [v132,C130];
    try { v133.map(v126); } catch (e) {}
    const v135 = [v132];
    for (let i137 = 0; i137 / i137, i137 < 2; i137++) {
        new F68(undefined, v131, undefined);
    }
    class C146 extends C130 {
    }
    const v147 = new C146();
    class C149 extends v135.constructor {
    }
    try { v147.m(); } catch (e) {}
    return C130;
}
%PrepareFunctionForOptimization(f127);
class C151 {
}
function f152(a153, a154, a155, a156) {
    try { v87["find"](..."find"); } catch (e) {}
    return a156;
}
f152(v87, f152, f152, f152);
f127();
%OptimizeFunctionOnNextCall(f127);
f127();
