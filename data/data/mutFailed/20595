const v0 = [];
function f1() {
    return v0;
}
const v8 = /ea(?=b)/umy;
const v9 = /daxyz??/viy;
/6((?:a+)?)/is;
for (let v11 = 0; v11 < 5; v11++) {
    v9.__proto__;
}
v8[Symbol.replace];
let v17 = 255;
v17 = -56045;
f1();
v9.unicode &= 10;
Math.log10(-9223372036854775807n);
-1582463097n;
const v25 = +1582463097n;
Math.log(~1582463097n);
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o35 = {
            "apply": f1,
            "call": f1,
            get f() {
                const v33 = this + this;
                let v34;
                try { v34 = a31(-4096n, v33, v33, v25, a30); } catch (e) {}
                a31 = v34;
                return this;
            },
            "construct": a31,
            "getOwnPropertyDescriptor": f1,
            "getPrototypeOf": F28,
            "isExtensible": f1,
            "set": a31,
            "setPrototypeOf": a30,
        };
        new Proxy(v0, o35);
        [a31,[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new f1();
    } catch(e42) {
    }
}
new F28();
