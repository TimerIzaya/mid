const v0 = [];
const v3 = new BigInt64Array(16);
const v4 = [v0,...v0,16];
const v8 = v4 % 4.0;
-4.0;
v8 ** 4.0;
-15 * (v4 * v3);
const v15 = new Uint32Array(354);
new Float32Array(9);
class C19 {
    [Float32Array] = 16;
    constructor(a21, a22, a23, a24) {
        a24 %= v15;
        class C26 {
            9 = -65536;
        }
        class C27 {
            p(a29, a30, a31, a32) {
            }
        }
        ([C27])[Symbol.iterator];
        const o40 = {
            "execution": "sync",
            "type": "major",
        };
        const v41 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
        new Symbol(-2, v41, v41, v41, -2);
        const v47 = new Map();
        const t28 = v47.set(Map, Array).values();
        t28.constructor = Array;
        gc(o40);
    }
    static #b = 354;
    static #d = v0;
}
new C19(16, 16, 354, Uint32Array);
const v52 = new C19(16, 16, 354, C19);
new C19(16, 9, 16, v52);
for (let v54 = 0; v54 < 5; v54++) {
    function f55() {
        for (let i58 = 0, i59 = 10; i58 < i59; i58--, i59--) {
        }
        return f55;
    }
    f55();
    %OptimizeFunctionOnNextCall(f55);
}
