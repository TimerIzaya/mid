new Int32Array(2463);
11 - 11;
const o10 = {
    set e(a8) {
        return;
    },
};
const v11 = new Int8Array(2);
class C13 {
    constructor(a15, a16, a17) {
        for (let v18 = 0; v18 < 25; v18++) {
            const o22 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o22);
        }
    }
}
new C13();
const v26 = new Int16Array(8);
8 & 8;
v11.constructor;
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    ([134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439]).length;
    class C37 extends Date {
        constructor(a39, a40, a41, a42) {
            super(a40);
            this.setYear(189);
        }
    }
    new C37(189, 6);
    try {
        v26.length = 2;
    } catch(e46) {
    }
    try {
        Symbol("256");
    } catch(e49) {
    }
    Symbol.toPrimitive;
}
const v51 = new F30();
for (let i55 = 0, i56 = 10;
    (() => {
        const v57 = i55 < i56;
        const t0 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
        t0[3] = v51;
        let v61 = 3375;
        const v62 = v61++;
        v62 / v62;
        const v64 = new BigUint64Array();
        let [v65,,v66,...v67] = v64;
        return v57;
    })();
    (() => {
        i55++;
        v11[Symbol.iterator] = F30;
        const o76 = {
            "execution": "async",
            "type": "major",
        };
        gc(o76).toExponential(v26);
        Math.expm1(Math);
        function f81(a82, a83, a84, a85) {
            function f86() {
                function f87(a88) {
                    return f81;
                }
                f87(f87);
                return f81;
            }
            f86();
            f86();
            %OptimizeFunctionOnNextCall(f86);
            return a83;
        }
        f81();
    })()) {
}
for (let v98 = 0; v98 < 5; v98++) {
    function f99() {
        /9f8\xf0\x9f\x92\xa9/diy["compile"]();
        (10).toFixed(10);
        URIError();
        for (let v108 = 0; v108 < 25; v108++) {
            const v109 = [601759695];
            const v110 = [1073741824,1073741823,1376142744,1073741825];
            function f111(a112, a113, a114, a115) {
                try { v110["find"](..."find", ...a115, ...v109); } catch (e) {}
                16 | 16;
                const v123 = new Int16Array(2183);
                const v127 = new Int16Array(8);
                async function f128(a129, a130, a131) {
                    delete v127[-1000000000.0];
                    function F134(a136, a137) {
                        if (!new.target) { throw 'must be called with new'; }
                        this.b = "b";
                        this.d = a137;
                    }
                    const v138 = new F134();
                    const v139 = new F134(v138, v138);
                    const o140 = {
                        ...v139,
                        __proto__: v138,
                    };
                    for (const v141 in o140) {
                    }
                    let [v142,v143,...v144] = v123;
                    v123[5];
                    const o146 = {
                    };
                    for (let v148 = 0; v148 < 500; v148++) {
                        class C150 {
                        }
                        new Int32Array(v148, v148, 257);
                        new Map();
                    }
                    const v158 = new Uint16Array(5);
                    function f159(a160, a161) {
                        const o165 = {
                            set g(a163) {
                            },
                            39: v158,
                        };
                    }
                    f159("message", 5);
                    await "message";
                    return Uint8Array;
                }
                return v108;
            }
            for (let v168 = 0; v168 < 10; v168++) {
                f111(f111, v109, v168, v109);
            }
        }
        return ("Vre").codePointAt(-1.0);
    }
    f99();
    %OptimizeFunctionOnNextCall(f99);
    function F172(a174) {
        if (!new.target) { throw 'must be called with new'; }
        const v175 = this.constructor;
        v175.bind();
        try { new v175(); } catch (e) {}
    }
    new F172();
}
class C181 {
    static #a;
    static #d = "string";
    static #valueOf(a183, a184) {
        const o185 = {
        };
        try {
            o185.a = a183;
        } catch(e186) {
        }
        try {
            const o187 = {
            };
            o187.a = a183;
            o187.d = Set;
        } catch(e188) {
        }
        try {
            const o189 = {
            };
            o189.a = a183;
            o189.d = Set;
            o189.e = "string";
        } catch(e190) {
        }
        try {
            const o191 = {
            };
            o191.a = a183;
            o191.d = Set;
            o191.h = a184;
        } catch(e192) {
        }
        return this;
    }
}
for (let v193 = 0; v193 < 5; v193++) {
}
function f195() {
    return this;
}
new C181();
