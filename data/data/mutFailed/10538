class C3 {
    [-2] = 1638412294;
    get f() {
        const v8 = -477361345 | -21076;
        let v9 = this << -21076;
        v8 ^ v9;
        return v9++ >> -477361345;
    }
}
new C3();
const v14 = new C3();
new v14();
new Int32Array(55);
new Int32Array(512);
new Uint16Array(257);
const v26 = new Float32Array(Float32Array);
for (let v27 = 0; v27 < 25; v27++) {
    function f28(a29, a30, a31, a32) {
        a29[0] = a29;
        a30 <= a30;
        const v35 = arguments?.__lookupGetter__;
        try { v35(v35, f28, Int32Array, arguments); } catch (e) {}
        function f37(a38, a39) {
            return f37;
        }
        let v40 = -1073741824n;
        const v41 = v40--;
        function F43(a45, a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            const v49 = this?.constructor;
            try { new v49(a46, 268435441n, a47, a48); } catch (e) {}
            a47 + a47;
            a48 << a48;
            try {
                this.c = 268435441n;
            } catch(e53) {
            }
            try {
                this.e = v41;
            } catch(e54) {
            }
        }
        try { undefined(); } catch (e) {}
        new Int8Array(v26);
        "find" == "find";
        return v26;
    }
    for (let v61 = 0; v61 < 10; v61++) {
        f28(v26, v27);
    }
    let v64 = new Date();
    v64 **= v64;
    const v67 = new BigUint64Array(v27);
    v67.buffer;
    C3.slice();
}
