const v4 = /h\p{gc=Nd}/vdy;
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
}
const v13 = new F7(v4, F7, -23596, 1);
const v14 = v13 | F7;
function f17(a18, a19, a20, a21) {
    const v22 = [1000000000000.0,-952.1538186148879,597175.6294050945,0.5606738113859926,787.1655584120176,-1.4391319355275538,972495.0958115859];
    class C25 extends 1 {
        constructor(a27, a28) {
            a27[1] = Float64Array;
            super();
        }
    }
    new C25(v22);
    return f17;
}
f17(v14, v14, f17, v14);
const v38 = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
Math.cos(Math);
let v44 = 1000000000000.0;
const v45 = v44--;
class C48 {
    constructor(a50) {
        const v52 = new Float32Array();
        try { v52.entries(); } catch (e) {}
        const t26 = -1.2860162124323843e+308;
        const v54 = new t26(12, -4294967296, v45);
        new Float32Array(v54, -4294967296, 268435439, v44, v54);
    }
}
const v56 = new C48(-4294967296);
const v57 = [v56];
const v58 = v57.constructor;
try { v58.isArray(v57); } catch (e) {}
class C60 extends v58 {
}
C60.a = C60;
async function f62(a63, a64) {
    'use strict';
    a64[9] = v38;
    function f65(a66) {
        return f65;
    }
    const v68 = new BigUint64Array();
    const v70 = new Uint32Array(BigUint64Array);
    v70.includes(v68);
    return -21133.120743932668;
}
f62("h", -21133.120743932668);
