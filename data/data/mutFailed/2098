const v0 = [-92488275,-2,5,-65537,129,2101926997,-9007199254740990,-9223372036854775808];
const v1 = [-4294967296,-51304,127,4294967295,512,55480,9007199254740990,10,1073741823];
const v2 = [2147483648,4,883435770];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    v1[5];
    try {
        this.f = v2;
    } catch(e7) {
    }
    try {
        this.g = v0;
    } catch(e8) {
    }
}
const v9 = new F3(v0);
const v10 = v9.f;
const v11 = new F3(v2);
const v12 = v11?.constructor;
let v13;
try { v13 = new v12(v9); } catch (e) {}
const v14 = new F3(v2);
const v15 = v14.g;
BigUint64Array.length;
const v20 = new BigUint64Array(v13);
let v23;
try { v23 = Int16Array.call(v1); } catch (e) {}
new Int16Array(v15);
try { new Uint8Array(v20, v20, v1); } catch (e) {}
const v28 = new Uint8Array(v15);
try { v28.join(v20); } catch (e) {}
241 * 241;
const v35 = new BigUint64Array(4 - 4);
v23[1];
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this?.constructor;
    try { new v42(a41, a39, a39); } catch (e) {}
    try { new a39(a39, a39, a39); } catch (e) {}
    a40 >> a40;
    a41 ^ a41;
}
const v47 = new F37(v10, 4, 241);
v47.length = v47;
for (let v48 of v35) {
    v48 ^ v48;
    v48--;
    Object.defineProperty(v47, 241, { enumerable: true, value: v48 });
}
