const v2 = new Float64Array(15060);
const v5 = new Int32Array(526);
const v8 = new Float32Array(1024);
class C9 extends Float32Array {
    valueOf(a11, a12) {
        function f13() {
            return Float32Array;
        }
        v5[5];
        return 526;
    }
    static #b;
    constructor(a16, a17, a18, a19) {
        super(v5, a16, 15060);
        const v20 = v5[a16];
        try { v20(v20, v20, v2, 1024, 15060, v20, v20); } catch (e) {}
        try {
            this.#b &&= a17;
        } catch(e22) {
        }
    }
}
const v23 = new C9(Int32Array, 15060, 15060, v8);
new C9(v23, 1024, 526, v23);
const v26 = async (a27, a28, a29) => {
    return Uint32Array;
};
const v30 = [-1000000.0,-1.0,952.4163692749257,41232.51719836402,-2.220446049250313e-16,869.918809614255,0.6566814488589754,-2.299816654271874,1000000000.0];
for (let v31 = 0; v31 < 5; v31++) {
    function f32() {
        let v33 = -268435456;
        v33 ^ v33;
        v33++;
        const o36 = {
            __proto__: v30,
        };
        try { o36.every(); } catch (e) {}
        return v30;
    }
    f32();
    %OptimizeFunctionOnNextCall(f32);
}
new C9(v8, 526, 15060, Int32Array);
[-1073741824];
for (let v41 = 0; v41 < 5; v41++) {
    v41 > v41;
}
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = (15060).constructor;
    try { new v47(F43); } catch (e) {}
    a46 / a46;
}
try {
    new Int32Array(1024, -47349);
} catch(e52) {
}
[16,536870888,-2051371396,-1722764463,10000,0,127,0,-19388];
[-6138,-64848,536870888];
for (let v55 = 0; v55 < 5; v55++) {
    function f56() {
        let v58 = F43.codePointAt(v55);
        let v59 = v58--;
        const v60 = v58 * v59;
        v59--;
        return v60 && v60;
    }
    for (const v63 in v8) {
    }
    f56(v55);
    %OptimizeFunctionOnNextCall(f56);
}
