const t0 = "maxByteLength";
t0[10] = "maxByteLength";
const v10 = 256 >>> "0I";
try { Int32Array.from(Int32Array); } catch (e) {}
new Int32Array(256);
~v10;
new Float64Array(1024);
const v18 = (-808628.7226193225)?.constructor;
try { new v18(-820.1571789267555, 3.4442772857323315e+307, -820.1571789267555); } catch (e) {}
new BigInt64Array(3170);
for (let v23 = 0; v23 < 5; v23++) {
    for (let [i36, i37] = (() => {
            const v26 = v23?.call;
            try { new v26(Float64Array); } catch (e) {}
            const v28 = v23(v23);
            v28 !== v28;
            function f30() {
                for (let v31 = 0; v31 < 5; v31++) {
                    v31 + v31;
                    [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                }
                return v28;
            }
            f30();
            %OptimizeFunctionOnNextCall(v28);
            return [0, 10];
        })();
        i37 - i37, i36 < i37;
        i36--) {
    }
}
