const v3 = ["64","growable","growable"];
const v4 = [v3,"c","growable"];
const v5 = [v4,v4];
class C6 {
    static valueOf(a8, a9, a10) {
        try {
            v5.length = this;
        } catch(e11) {
        }
        return "growable";
    }
    [v5] = v3;
    static f;
    #b;
    ["growable"];
    n(a13, a14) {
    }
    #n(a16) {
    }
}
const t20 = "64";
const v17 = new t20();
const v20 = Array(1000);
v20.indexOf(Array);
class C23 extends Uint8Array {
}
new C6();
new v4();
function F27() {
    if (!new.target) { throw 'must be called with new'; }
}
("c").sup(v17.slice(9, "g").normalize(), "-1723624938");
const o51 = {
    ...v20,
    [v17]: C23,
    get d() {
        return this;
    },
    valueOf(a40, a41, a42) {
        function f43(a44) {
            for (let v47 = 0; v47 < 100; v47++) {
            }
            return this;
        }
        Worker(f43);
        return Worker;
    },
};
const v56 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v57 = [601759695];
function f59(a60, a61, a62, a63) {
    arguments[4] = arguments;
    return a62;
}
f59(v57, v56, 522675525n, v56, 522675525n);
