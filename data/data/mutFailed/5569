for (let v1 = 0; v1 < 5; v1++) {
    Math.atanh(v1);
}
const v5 = Date.toString(Date, Date, Date, Date);
async function* f6(a7, a8) {
    return Date;
}
const v9 = f6(v5, Date);
function f10(a11, a12) {
    const o13 = {
        [v5]: v9,
    };
    return f6;
}
%OptimizeFunctionOnNextCall(f10);
const v18 = new Uint32Array();
function f19(a20, a21, a22, a23) {
    const o27 = {
        n(a25, a26) {
            v18[a20] = v18;
        },
    };
    new Int8Array(16);
    new Date();
}
for (let v34 = 0; v34 < 625; v34++) {
    f19(Uint8Array);
}
const v42 = new Float32Array(165);
const v43 = new Uint16Array(v42);
class C48 {
}
class C49 {
    constructor(a51, a52, a53, a54) {
        try { a53(...a51, "e", a54, a54, ...C48); } catch (e) {}
        return arguments;
    }
}
const v57 = new C49("p");
const v60 = new Float64Array();
delete v60[-1.5286188982640463e+308];
new Date();
/[\ud808\udf45*ZdW]/disy;
function F66() {
    if (!new.target) { throw 'must be called with new'; }
}
const v71 = new BigInt64Array(6);
v71.findLast(F66);
/L[a-zA-Z0-9]/gvmy;
/\bmX(x)(x)(x)\1*/gvdi;
const o78 = {
    [v57]: v43,
    ...v43,
};
([-2096457859]).__proto__;
const v81 = new Uint8ClampedArray(303);
Object.defineProperty(v81, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
