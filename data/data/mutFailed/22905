new WeakMap();
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v4 = new Float32Array();
let v5;
try { v5 = v4.entries(); } catch (e) {}
v5.e = v5;
v5.next();
new Uint8Array(26);
const v13 = new Int16Array(1591);
new Int8Array(129);
256n ^ 256n;
for (let i19 = 256n, i20 = 10; i19 / i19, i20 + i20, i19 < i20;) {
}
function f29() {
}
const v31 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
try { v31.find(512); } catch (e) {}
Set.a = Set;
const v34 = new Set(v31);
let v35;
try { v35 = v34.add(v34); } catch (e) {}
try { v35.add(WeakMap); } catch (e) {}
-536870912 - -536870912;
const v39 = /0vM9/udim;
v39.dotAll = v39;
const v40 = /(?:a?)?/guiy;
v40.multiline = v40;
const v41 = /pVv(?:a?)*/vdm;
v41.hasIndices = v41;
[-2147483647,-4294967295];
[6];
2105444095n >> 2105444095n;
const o51 = {
    968: -4294967296n,
    "d": f29,
    [268435439n]: 2105444095n,
    __proto__: -4294967296n,
    valueOf(a49) {
        return 268435439n;
    },
};
[-53446,-9223372036854775808,-12021,8,-8,-13,257,-4294967296,268435440,5079];
const v53 = [8.711315446139029,1.5361000083369713e+308,Infinity,1000000000000.0,-0.0,1.7976931348623157e+308,0.8184761971939671,-2.9059148786857536,-1.0];
try { v53.map(Set); } catch (e) {}
[-1000000.0,885.5760175233909];
[Infinity,343088.07118330174,94225.11461406993,1.7976931348623157e+308,2.2250738585072014e-308,748.420035819707,-3.0,-166098.26047177066,-Infinity];
function f58(a59) {
    new Float64Array();
    return -2.2250738585072014e-308;
}
9 >>> 9;
function F69(a71) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o73 = {
            "type": 10,
        };
        Worker(a71, o73);
    } catch(e75) {
    }
}
new Int16Array(4096);
function f77() {
    class C78 {
    }
    function f79(a80, a81) {
        const o82 = {
            __proto__: C78,
        };
        o82.name;
        return C78;
    }
    f79(f79, C78);
}
class C85 {
}
C85.e = C85;
const v86 = new C85(1568, f77, 9);
const v87 = v86?.constructor;
let v88;
try { v88 = new v87(); } catch (e) {}
new C85();
v13 + v88;
Math.imul((1000 || 1000) % 2105444095n, 2105444095n);
~2105444095n;
