function f3(a4, a5) {
    a4 % a4;
    a5 - a5;
    const v8 = a4 >> a5;
    const o20 = {
        [103918.77675367286]: -1.7976931348623157e+308,
        [-6.476369920269134]: a5,
        ...a4,
        "e": a5,
        get d() {
            new Float32Array([10000]);
            new URIError();
            try {
                super.o(4, -6, 346298449);
            } catch(e19) {
            }
            return v8;
        },
    };
    return a5;
}
let v21;
try { v21 = f3(-1.7976931348623157e+308, -6.476369920269134); } catch (e) {}
v21 == v21;
const v23 = f3(103918.77675367286, -6.476369920269134);
v23 - v23;
const v25 = f3(-6.476369920269134, -6.476369920269134);
const v26 = f3(-1.7976931348623157e+308, -6.476369920269134);
v26.e = v26;
const v27 = [0.0,1000000000.0];
[-1.6759468844770566,5.0,949051.3231780096,3.0,-245888.14169866045,-1e-15,-1000000000000.0,Infinity,-4.0];
[-576.1828598209484];
let v30 = -3.0;
v30 >>> v30;
v21--;
439628.69709560834 % 439628.69709560834;
0.2810847722521336 >>> 0.2810847722521336;
0.2810847722521336 - 0.2810847722521336;
4850 - 4850;
const v42 = v30++;
v42 ^ v42;
-670007143 == -670007143;
function f47() {
    return eval();
}
const v53 = [-47225,-49245,-355128693,-536870912,536870912];
try { v53.indexOf(2); } catch (e) {}
[v25,v53,v53];
try { Array.bind(-670007143); } catch (e) {}
const v59 = Array(1102693041);
const v60 = v59?.constructor;
try { new v60(v59); } catch (e) {}
v59.reduce(v27, v53);
Symbol.species = Symbol;
