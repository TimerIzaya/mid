new Uint8Array(3860);
new Float32Array(142);
const v11 = new BigUint64Array(61);
class C12 extends Float32Array {
    3645;
    p(a14, a15, a16) {
        let v19 = 1.0;
        const v20 = ++v19;
        const v21 = v20 / v20;
        class C22 {
        }
        const v23 = new C22();
        let v24 = 591114.0785999324;
        v24++;
        const v26 = [v24,v24];
        function F28() {
            if (!new.target) { throw 'must be called with new'; }
            try { this.toString(this, F28, F28, this); } catch (e) {}
            [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
            try { Date.toString(F28, 9223372036854775807); } catch (e) {}
            Date(v24);
            let v38;
            try { v38 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
            Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
            const v39 = new Uint32Array(5);
            try { v39.reduce(Date); } catch (e) {}
            const v43 = new Set(v26);
            const v44 = v43?.add;
            try { new v44(v38); } catch (e) {}
            let v47;
            try { v47 = ("delete").blink(4); } catch (e) {}
            v47[4] = v47;
            const v48 = v43["delete"](839612.5677247904);
            v48 || v48;
            const v50 = 839612.5677247904 || v48;
            const v51 = v50 && v50;
            const o53 = {
            };
            o53.b = o53;
            o53.e = 19793;
            try { new Array(9223372036854775807); } catch (e) {}
            let v57;
            try { v57 = ("getPrototypeOf").blink(); } catch (e) {}
            let v58;
            try { v58 = v57.strike(v24); } catch (e) {}
            class C60 {
                ["getPrototypeOf"] = -1.7976931348623157e+308;
            }
            class C61 extends C60 {
                ["getPrototypeOf"] = C60;
            }
            try { new C61(); } catch (e) {}
            C61.e = C61;
            const v63 = new C61();
            const v64 = v63?.getPrototypeOf;
            try { new v64(); } catch (e) {}
            v63.constructor;
            try { new v23(F28, v51); } catch (e) {}
            const v68 = Array(19793);
            for (const v69 of v68) {
            }
            const v70 = [v68,v68,v68,v68,v68];
            let v71;
            try { v71 = v70.includes(839612.5677247904); } catch (e) {}
            v71 && v71;
            BigUint64Array.e = BigUint64Array;
            try { v58.reduceRight(v26); } catch (e) {}
            for (let v75 = 0; v75 < 5; v75++) {
            }
        }
        new F28();
        new F28();
        11 >> 11;
        ~(v21 | v11);
        return "setUTCDate";
    }
    104 = "setUTCDate";
}
new C12();
new C12();
new C12();
new Uint8ClampedArray([5.0]);
