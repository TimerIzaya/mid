const t0 = 3364;
const v6 = new t0(3364);
const v7 = v6?.findLastIndex;
try { new v7(7278n); } catch (e) {}
const v11 = new Uint32Array(1);
try {
    v11.length = 2;
} catch(e13) {
    const v15 = new BigUint64Array();
    const v16 = /o(\xed\xb0\x80)\x01/gudims;
    const v17 = /(xyz{93})/gusy;
    try { v17.compile(v15, v16); } catch (e) {}
}
const v21 = new Uint8ClampedArray(4096);
const o25 = {
    ..."44184",
    [-15]: -15,
    2480: 9,
    ..."44184",
};
try { new TypeError(7278n); } catch (e) {}
TypeError(2147483647n);
try {
    v21.at(4096);
    class C30 {
        constructor(a32) {
            for (let v33 = 0; v33 < 32; v33++) {
                for (let v34 = 0; v34 < 5; v34++) {
                    function f35() {
                        return f35;
                    }
                    f35();
                }
                const o38 = {
                };
                const t35 = -1073741824n;
                t35(o38);
            }
        }
    }
    try { new C30(Uint32Array); } catch (e) {}
} catch(e41) {
    const v42 = [];
    class C43 {
        constructor(a45) {
            function* f46(a47, a48) {
                yield* v42;
                return a47;
            }
        }
    }
}
try { ("d").substr("d", Uint8ClampedArray); } catch (e) {}
("JMM3")[1];
const v54 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f55() {
    return v54;
}
const t58 = -15;
t58.prototype = Int16Array;
const v57 = new Int16Array(3364);
v57[2784] = v57;
function f59() {
    return f59;
}
try { f59.bind(o25); } catch (e) {}
const v62 = new BigInt64Array();
const o63 = {
    __proto__: v62,
};
o63.BYTES_PER_ELEMENT;
try { o63.fill(o63, BigInt64Array); } catch (e) {}
%PrepareFunctionForOptimization(f59);
const o66 = {
};
o66.c = o66;
const v68 = new Proxy(Int16Array, o66);
try { new v68(f59, f59, BigInt64Array); } catch (e) {}
f59().name;
%PrepareFunctionForOptimization(f59);
let [,...v73] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
const t81 = [-3.0];
t81[2] = 3.0;
const v76 = f59();
f59();
%OptimizeMaglevOnNextCall(f59);
f59();
f59().length;
%OptimizeFunctionOnNextCall(f59);
const v81 = v76();
v81.length = v81;
