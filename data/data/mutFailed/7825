const v1 = new Map();
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a4;
    try {
        this.e = a4;
    } catch(e6) {
    }
}
const v7 = new F2(Map, v1);
const v8 = new F2(v7, F2);
const v9 = new F2(F2, v1);
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v1;
    } catch(e16) {
    }
}
new F10(v8, v7, v7, v9);
new F10(v9, v7, v8, v8);
new F10(v8, v7, v8, v9);
let v20 = [-883936.0401947303,9.41640124927378e+307,0.060305085001335246];
function f21(a22, a23) {
    const v24 = [];
    const v25 = [v24,v24,v24,v24];
    [v24,v25,v25,v25];
    return F2;
}
Object.defineProperty(v20, "toString", { writable: true, configurable: true, value: f21 });
v20 /= v20;
gc();
