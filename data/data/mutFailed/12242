const v5 = new Uint32Array(1);
function f8(a9) {
    return [WeakSet,WeakSet];
}
Uint32Array[Symbol.toPrimitive] = f8;
const v14 = new Uint32Array(129);
try { Uint32Array("1472951225", 29, 29); } catch (e) {}
-"delete";
const t7 = "1472951225";
t7.length &= 1;
try {
    new Uint32Array(-2147483649);
} catch(e20) {
}
const v22 = new Uint8Array(29);
class C24 extends Map {
}
const v25 = new C24();
const v26 = new C24();
const v27 = new C24();
const v31 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v31.toString = Symbol;
Uint32Array[Symbol.toPrimitive] = Symbol;
const v35 = new Uint32Array(5);
let v36 = -4294967297n;
v36--;
const v38 = [601759695];
const v39 = [1073741824,1073741823,1376142744,1073741825];
function f41(a42, a43, a44, a45) {
    try { a42.toLocaleString(); } catch (e) {}
    const v47 = a42?.constructor;
    v47[Symbol.toPrimitive] = Symbol;
    let v50;
    try { v50 = v47(); } catch (e) {}
    try { v47(); } catch (e) {}
    const v53 = arguments.length;
    Object.defineProperty(v25, "e", { configurable: true, enumerable: true, value: f41 });
    const v55 = v26["entries"](a44, ...v27, BigUint64Array, ..."entries", a43, v53);
    const v57 = Symbol.toStringTag;
    v26[v57] = v57;
    function f58() {
        let v60;
        try { v60 = ("Vre").charAt(4096); } catch (e) {}
        try { v60.lastIndexOf(f58); } catch (e) {}
        let v62;
        try { v62 = ("Vre").codePointAt(v31); } catch (e) {}
        v62 - v62;
        v62 ^ v62;
        let v65 = Float64Array;
        v65 = a43;
        let v66 = v31.length;
        v66++;
        try {
            v39.forEach(a43);
        } catch(e69) {
            e69.stack = e69;
        }
        const o80 = {
            "c": v36,
            "c": v38,
            valueOf(a71, a72) {
                return a72;
            },
            1073741824: v35,
            [v36](a74, a75, a76, a77) {
                eval(v50);
            },
            "arguments": 5,
            256: a45,
        };
        o80[256];
    }
    Object.defineProperty(f58, "toString", { value: Symbol });
    function f82() {
        return v5;
    }
    f58();
    const v88 = Array();
    let v89;
    try { v89 = v88.findLast(f41, v35); } catch (e) {}
    v88.unshift("entries", v55, "entries", v89);
    let v92;
    try { v92 = Int8Array.of(); } catch (e) {}
    try { v92.join(v47); } catch (e) {}
    const v94 = new Int8Array(v38);
    v94.c = v88;
    v94.c = v94;
    const v95 = v94.buffer;
    v95.maxByteLength;
    const v97 = v95.slice(v47);
    try { Int32Array(v97, arguments, v36); } catch (e) {}
    function f100(a101, a102, a103, a104) {
        return v25;
    }
    const v105 = new Int32Array();
    const v106 = v105[3];
    v106 + v106;
    for (let v108 = 0; v108 < 5; v108++) {
    }
    %OptimizeFunctionOnNextCall(f58);
    try { v39["find"](..."find", a45, ...v38, ...v39, ...522675525n); } catch (e) {}
    return v47;
}
let v111 = f41(29, v5, 129, v22);
[-1e-15,2.220446049250313e-16,2.220446049250313e-16,-2.0];
[-0.0,-1.7976931348623157e+308,5.0];
v111 = [5.0,-2.0,-808466.5211953028,1000.0,1e-15,6.951921457136926e+307,-1.0,-2.472906394838537,-Infinity,6.055164280419692];
function f115(a116, a117) {
    Object.defineProperty(v14, "h", { value: v26 });
}
new Promise(f115);
for (let v120 = 0; v120 < 10; v120++) {
    f41(v35);
}
%OptimizeFunctionOnNextCall(f41);
f41();
