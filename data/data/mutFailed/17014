const v6 = new Uint8Array(225);
for (const v7 in v6) {
}
/\xf0\x9f\x92\xa9/gusy;
const v11 = /l8TXX\xf0\x9f\x92\xa9/gvdm;
/O\u0034tab\b\d\bcd[^fhFh[a(?!bbb|bb)cq?]]/gu;
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
}
const v22 = new F17();
v22.toString = Array;
const v27 = new Float32Array(Float32Array);
for (let v28 = 0; v28 < 25; v28++) {
    function f29(a30, a31, a32, a33) {
        a30[0] = a30;
        a31 <= a31;
        const v36 = arguments?.__lookupGetter__;
        const v37 = /(\1a)/gums;
        const v38 = /V(?:a{5,1000000}){3,1000000}/vims;
        const v39 = /(?<a>.)\k<a>?/vdimsy;
        v37.compile(v38);
        try { v39(v37, v38, v38, v37); } catch (e) {}
        const v42 = [v39,v38,v37];
        const v43 = [v42,v38,v39,v42,v42];
        let v44 = 8;
        v44--;
        const v47 = new BigInt64Array(v44);
        const v51 = new Uint8Array(7);
        try { Int32Array.bind(v42); } catch (e) {}
        function f55() {
            3.4890473589784586e+307 === 3.4890473589784586e+307;
            let v58 = 1000000000000.0;
            const v59 = v58--;
            -v59;
            -v43 && v43;
            class C66 {
                static #m(a68) {
                }
                constructor(a70) {
                    const v72 = new Float32Array();
                    let v73;
                    try { v73 = v72.entries(); } catch (e) {}
                    v73.next();
                    const v75 = new Uint16Array(12, -4294967296, v59);
                    new Float32Array(v75);
                }
            }
            new C66();
            new C66();
            Symbol.iterator;
            try { v47.reduce(Int32Array, 12); } catch (e) {}
            let v82 = 0;
            v82++;
            const v84 = new C66();
            new C66();
            const v86 = new C66(-4294967296);
            [];
            [257828.6336153492,v86,v84,v86];
            const v89 = [];
            v89[0];
            class C91 extends C66 {
            }
            new C91();
            const v93 = v89.constructor;
            try { v93.isArray(v89); } catch (e) {}
            class C95 extends v93 {
            }
            C95.a = C95;
            const v96 = new C95();
            const v97 = v96.constructor;
            try { v97.bind(); } catch (e) {}
            const o99 = {
                "e": v89,
                __proto__: v42,
                [v43]: v51,
                "h": 257828.6336153492,
            };
            try { o99.e(BigUint64Array); } catch (e) {}
            return Int32Array;
        }
        try { v36(v36, f29, a31, arguments); } catch (e) {}
        const v103 = [-20096,4294967296,-65537,-2];
        const v104 = [-1947047520];
        [v104,v104,v104,v103];
        new Int8Array(0);
        try { undefined(); } catch (e) {}
        new Int8Array(v27);
        "find" == "find";
        return v27;
    }
    for (let v114 = 0; v114 < 10; v114++) {
        f29(v27, v28);
        function f116() {
        }
        const o118 = {
            4294967296: 1733353236,
        };
        const o120 = {
            get h() {
                return o118;
            },
            ...o118,
        };
    }
    for (let v121 = 0; v121 < 5; v121++) {
        +v121;
    }
    v11.parseFloat([-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1]);
}
