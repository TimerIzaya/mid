function f2(a3, a4) {
    for (let i7 = 0, i8 = 10;
        i7 < i8;
        (() => {
            i8--;
            let v14 = BigInt64Array;
            const v15 = new v14(3768);
            const v16 = v14++;
            v16 >> v16;
            let o18 = {
            };
            [,...o18] = v15;
        })()) {
    }
    return a3;
}
Uint8ClampedArray[Symbol.iterator] = f2;
new Uint8ClampedArray(7, 7);
9 - 9;
new ArrayBuffer(9);
const v30 = new Int8Array(2, 7, 7, Uint8ClampedArray);
v30.constructor = Symbol;
v30[1];
const v32 = v30?.constructor;
v32.d = v32;
v32.d = v32;
let v33;
try { v33 = new v32(Uint8ClampedArray, 9, Int8Array); } catch (e) {}
function f34() {
    function f35() {
        try { v33(v32, Uint8ClampedArray, ArrayBuffer); } catch (e) {}
        const o38 = {
        };
        gc(o38);
        return 2;
    }
    return f35;
}
Object.defineProperty(v33, "toString", { configurable: true, enumerable: true, get: f34 });
v33[1];
65536 - 65536;
const v45 = [4.610682887579243];
try { v45.fill(Uint8ClampedArray); } catch (e) {}
[-1000000000000.0,2.2250738585072014e-308,1000000.0,1000.0,5.0];
const v48 = [-1.4163080042208686e+308,2.450273416265812,4.0,3.8635905046093733,934.0820815526808,1.0];
try { v48.group(v45); } catch (e) {}
const v50 = [748666.7832804511,3.0];
Float64Array.length;
class C53 extends Float64Array {
    [v50];
}
C53.prototype = C53;
const v54 = new C53();
try { v54.subarray(v33, v54); } catch (e) {}
