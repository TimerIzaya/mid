function f0() {
}
const v3 = new Int16Array(127);
Object.defineProperty(v3, "toString", { writable: true, configurable: true, value: f0 });
Int16Array[32] = v3;
function F5() {
    if (!new.target) { throw 'must be called with new'; }
}
const t8 = 127;
new t8();
const v8 = new F5();
const v9 = new F5();
const v10 = [v8];
const v11 = [v9,v8,v9,v9];
[v8,F5,v11,v11,v10];
[-6];
[15,1000,456510946,268435439,-4096,-1621925631,-536870912,4294967295,127,768050783];
[-30837,-2147483647,11,14];
const v18 = new Uint32Array(1000);
new BigUint64Array(v18);
function f24() {
    return f24;
}
const v26 = new Map();
try { v26.set(Array, f24); } catch (e) {}
new Uint8Array(134);
const v30 = delete v10?.length;
try { v30["cbrt"](v18, Uint32Array, v8, v9, v30); } catch (e) {}
const o33 = {
};
new Proxy(Uint8Array, o33);
for (let v36 = 0; v36 < 5; v36++) {
}
try { new BigInt64Array(234, Int16Array, 234); } catch (e) {}
new BigInt64Array(234);
3 >>> 3;
new Float64Array(3);
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
}
const v48 = new F44();
const v51 = typeof v48 === "number";
v51 && v51;
Math.asinh(v51);
