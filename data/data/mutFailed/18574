class C3 {
    c = NaN;
    toString(a5) {
        super.a ^= a5;
        try {
            this.fuck(a5, false, a5, -62111);
        } catch(e9) {
        }
        return -5.73611034476378e+307;
    }
    #d = 0.4815171082008085;
    static e = 0.4815171082008085;
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
const o15 = {
    valueOf() {
        return -5.73611034476378e+307;
    },
};
new Array(7);
class C19 extends Array {
    10 = v10;
    constructor(a21, a22) {
        super(7);
        const t26 = 7;
        t26[3] = Array;
        super[0.4815171082008085] = a21;
        0.4815171082008085 | a22;
    }
    #m(a25, a26, a27) {
        try {
            v11.a = a26;
        } catch(e28) {
        }
        [7,a27,v10,[7],a25];
        [v11];
        return a25;
    }
}
new C19(NaN, v11);
const v33 = new C19(-5.73611034476378e+307, v12);
new C19(NaN, v10);
class C35 {
    constructor(a37, a38) {
        let v39 = 10;
        for (let i = 0; i < 5; i++) {
            const v40 = v39--;
            function f41(a42, a43, a44, a45) {
                const v47 = new Int16Array();
                try {
                    f41(v33, true, -65537, false);
                } catch(e53) {
                }
                async function f54(a55, a56, a57) {
                    for (const v58 of a37) {
                        -740089575 ^ v39;
                    }
                    await v47[1];
                }
                f54().finally(Uint8Array);
                return v40;
            }
            for (let v65 = 0; v65 < 5; v65++) {
                try {
                    Array / v10;
                } finally {
                    super.c;
                }
                f41();
            }
            %OptimizeFunctionOnNextCall(f41);
        }
    }
}
new C35(C35, C35);
