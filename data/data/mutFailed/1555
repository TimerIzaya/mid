function f0() {
    let v1 = "-256159335";
    const v4 = 21917 << 21917;
    const o30 = {
        "f": v1,
        "b": 21917,
        toString(a6) {
            v1 & "m";
            Math.trunc(v1);
            v1++;
            return 21917;
        },
        [v1](a13) {
            %OptimizeFunctionOnNextCall(Date);
            const v17 = Math.acosh(1073741825);
            for (const v18 in this) {
                new Float32Array(1439);
                function F22(a24, a25) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v27 = [Reflect,v1,a13];
                v4.apply(this.toString, a13, v27);
            }
            return v17;
        },
    };
    return o30;
}
const v31 = f0();
f0();
const v33 = f0();
try { ("Ut0RN").codePointAt("1000"); } catch (e) {}
const v39 = 4.0 | 4.0;
[1000000000.0,-1.0];
const v43 = [-214.75542767945012,Infinity,-4.0,352374.24624437955,-1.5979668559337818e+308,-620958.8604312716,1e-15];
const v44 = [960.7050839061703,NaN,0.7407547220131361,NaN,1000000000000.0,1.3756121212434467e+308,-1000000000.0,5.0,-2.220446049250313e-16];
try { v44.toSorted(v33); } catch (e) {}
const v46 = ("1000").constructor;
try { new v46(v31); } catch (e) {}
[v44,v44,v44,v44,v44];
let o53 = {
    get a() {
        const o51 = {
        };
        gc();
    },
};
const v55 = [];
const v58 = o53--;
const v59 = [-268435456,1000];
class C60 {
    constructor(a62, a63, a64, a65) {
        a62--;
        a64 | a64;
        a65--;
        let v69 = 0;
        do {
            let v71 = 30918;
            const v72 = v71--;
            v72 / v72;
            let v74 = v59 ^ v59;
            Math.random();
            Math.exp(v59);
            v72 >> v59;
            Math.ceil(v72);
            ++v74;
            v69++;
        } while (2 != 2, v69 < 2)
    }
}
new C60(2, v55, 2, -1);
new Date();
function f89() {
    return 9;
}
function F90(a92) {
    if (!new.target) { throw 'must be called with new'; }
    this >>> a92;
    try {
        a92 *= this;
        const v94 = 139837843 in this;
        0 / 0;
        const v98 = 0 <= 0;
        v98 && v98;
        const v101 = new Int8Array(0);
        v101?.keys;
        try { new v58(); } catch (e) {}
        for (const v105 in v101) {
            0 ^ v98;
            Object.defineProperty(this, this, { writable: true, configurable: true, enumerable: true, value: v94 });
            this[129] = v105;
        }
        new BigUint64Array(10);
        const v110 = 128 !== 128;
        v110 || v110;
    } catch(e113) {
    }
}
try { F90.bind(v43); } catch (e) {}
new v31(F90);
const v116 = new F90(v39);
v116.length;
