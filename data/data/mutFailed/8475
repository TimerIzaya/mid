function f0() {
}
const v3 = new Uint8ClampedArray(2858);
new Int8Array(3974);
new Float64Array(202);
[-1.7477134376014694e+308,-2.2250738585072014e-308,-1000000000000.0,1e-15,1000.0,1.8155518754695628,-1.0,-1.7976931348623157e+308];
const v11 = [-1.7976931348623157e+308,-521541.7465111543,-Infinity,-2.220446049250313e-16];
const v12 = [0.053511597941923617,0.18461380357296864,-1000000000.0];
class C13 extends f0 {
    static #c = v11;
    static #n(a15, a16) {
        new Int8Array(1850);
        new Uint8Array(1000);
        new Uint8Array(3791);
        return Uint8ClampedArray;
    }
    static 2409;
}
new C13();
new C13();
new C13();
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F29;
    try {
        this.h = -2;
    } catch(e32) {
    }
    try {
        this.c = -2;
    } catch(e33) {
    }
    try {
        this.f = -2;
    } catch(e34) {
    }
}
new F29();
const v36 = new F29();
new F29();
new Uint32Array(16);
function f43(a44) {
    let v45;
    try { v45 = a44(v36, v12); } catch (e) {}
    v45.g = v45;
    return a44;
}
Int8Array.toString = f43;
const v46 = new Int8Array(2);
v46[Int8Array] = v46;
new Float64Array(571);
const v52 = new Uint8Array(10);
new Float64Array(2713);
const v58 = new Int32Array(16);
const v61 = new Uint8Array(9);
function F62(a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v61;
    } catch(e67) {
    }
    try {
        this.e = v58;
        const v76 = new Uint8ClampedArray(16);
        v76.valueOf = f0;
        v76[10] = v76;
        const v78 = -1322;
        v76["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v52);
        } catch(e80) {
        }
        const v82 = new Uint8ClampedArray(1322);
        let v83 = v82[315];
        function F84(a86, a87, a88, a89) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = this;
            try {
                this.a = "536870889";
            } catch(e90) {
            }
            try {
                this.b = a89;
            } catch(e91) {
            }
        }
        new F84(1073741824n, 1073741824n, 257n, "6");
        const v93 = new F84(1073741824n, 257n, 257n, v78);
        const v94 = new F84(v83, 257n, 257n, "536870889");
        function f95() {
            try { new a65(Int8Array, v58, v3, a64); } catch (e) {}
            const v97 = new Uint8Array();
            const v100 = new Uint32Array(104);
            for (const v101 in v100) {
                104 in v97;
                typeof Uint8Array;
            }
            return 9;
        }
        v94.toString = f95;
        new BigUint64Array(6);
        3768 >>> 3768;
        const v111 = new BigInt64Array(4046);
        v111[123];
        -115;
        function f116(a117, a118) {
            a117++;
            a118 + a118;
            const v121 = a117++;
            v121 >> v121;
            try {
                v93.toString = a118;
            } catch(e123) {
            }
            Object.defineProperty(v94, v94, { configurable: true, enumerable: true, get: f116 });
            let o125 = {
                "d": a117,
                ...a117,
                get e() {
                    return a118;
                },
            };
            [,...o125] = v111;
            a118[4046];
            const o129 = {
                "maxByteLength": 3035,
            };
            o129.n = v94;
            const v131 = v83--;
            v82[v131] ||= v131;
            try { o129.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f116(4046, 3768);
        try { Uint8ClampedArray.bind(f116); } catch (e) {}
    } catch(e140) {
    }
}
new F62(9, 16, 16);
const v145 = new Int16Array(2);
v145.lastIndexOf(2.220446049250313e-16);
