const v0 = [-9007199254740990,-1073741824,1958205276,-30436,53725,2147483648,5];
const v1 = [244742510];
const v2 = [-1082807448,18696,127,-2,536870912,-41257,-4096];
function f3(a4) {
    const o12 = {
        __proto__: v1,
        o(a6) {
            if (v0 > this) {
                this[v2];
            } else {
            }
            return v0;
        },
    };
    let v13;
    try { v13 = o12.lastIndexOf(a4); } catch (e) {}
    return v13;
}
const v14 = f3(v2);
try { v14.group(v1); } catch (e) {}
const v16 = f3(v0);
const v17 = v16[0];
const v18 = f3(v0);
/LK/gudimsy;
/na?(?: foo )/gvdmy;
/(d)/vsy;
class C22 {
    static #o(a24, a25) {
        const o29 = {
            "apply": f3,
            "call": v16,
            "defineProperty": f3,
            "get": f3,
            "getOwnPropertyDescriptor": f3,
            "getPrototypeOf": f3,
            "has": f3,
            "isExtensible": f3,
            "ownKeys": f3,
            "preventExtensions": f3,
            "set": f3,
            "setPrototypeOf": f3,
        };
        new Number(a24, o29);
        return this;
    }
}
try { new v14(); } catch (e) {}
const v33 = new C22();
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
new C22();
const v37 = new C22();
const v38 = v37?.constructor;
try { new v38(); } catch (e) {}
const v41 = [104762.14753807266,-279097.1642774454,5.0,1.0];
try { v41.reduce(v37); } catch (e) {}
const v46 = new Uint8Array(22);
new Int32Array(3289);
try { Reflect.construct(v18, 3289); } catch (e) {}
const v52 = [v17];
const v54 = Reflect.apply(v41.join, v46, v52);
class C55 extends Int32Array {
}
const v56 = v14.from(v54);
try { v56.values(); } catch (e) {}
