let v2 = 1000000000.0;
v2 >>>= v2;
try {
    const t3 = 0.3986101551697768;
    t3.__proto__ = 6;
} catch(e4) {
}
const v6 = new Float64Array(6);
function f9(a10) {
    function f12(a13) {
        try { this.getDay(); } catch (e) {}
    }
    Int16Array.onmessage = f12;
    const v16 = [6,1546];
    Reflect.apply(v6.copyWithin, this, v16);
}
const v21 = [Float64Array];
const o22 = {
    "arguments": v21,
    "type": v6,
};
new o22(f9, o22);
new v6(v2);
new f9(10);
const v28 = [];
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(a38, v28); } catch (e) {}
    a36[2];
}
new F33("ceil", "pop", v28, "isConcatSpreadable");
new F33("ceil", "ceil");
