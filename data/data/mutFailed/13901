function f2() {
    const o47 = {
        next() {
            return this;
        },
        m(a6) {
            a6.f = a6;
            let v7;
            try { v7 = a6.next(f2); } catch (e) {}
            a6.c = a6;
            a6.h = a6;
            const o8 = {
            };
            o8.h = o8;
            function f9(a10, a11, a12) {
                return a10;
            }
            f9.caller = f9;
            try {
                f9.e = -65535;
            } catch(e13) {
                const v17 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v17, o8);
            }
            try {
                const o19 = {
                };
            } catch(e20) {
            }
            const v22 = Math?.expm1;
            try { new v22(v7, 128); } catch (e) {}
            try { Math.expm1(128); } catch (e) {}
            let v25 = -9007199254740991;
            v25++;
            const v27 = v25 >> v25;
            v27 - v27;
            class C29 {
                o(a31, a32, a33, a34) {
                }
            }
            const v35 = this.name;
            try { v35.codePointAt(Math); } catch (e) {}
            const v39 = new Int8Array(3938);
            let v40 = 3;
            let v41 = 0;
            v41++;
            for (let i = 0; i < 5; i++) {
                [...v40] = v39;
                v41++;
            }
            const o44 = {
            };
            try {
                const o45 = {
                };
            } catch(e46) {
            }
            return -65535;
        },
    };
    return o47.m(o47);
}
f2();
const v50 = f2();
const v51 = new Date();
for (let v53 = 0; v53 < 100; v53++) {
    Date();
}
Date[v51] >>>= 268435440;
function f58() {
    return Date;
}
const v60 = -v50;
v60 >> v60;
const v63 = new Uint8Array(Uint8Array, Uint8Array, Uint8Array);
function f64(a65, a66, a67, a68) {
    a67++;
    const v70 = a67++;
    const v71 = a67 % a67;
    const o72 = {
        ...v63,
    };
    let v73;
    try { v73 = o72.n(v71, v70); } catch (e) {}
    return v73;
}
new Int32Array(2);
new Int16Array(252);
class C80 extends Date {
}
const o86 = {
    __proto__: f64,
    p(a82, a83) {
        48752008 ^ this;
        return this;
    },
};
new Float32Array(Float32Array);
const v92 = Symbol.isConcatSpreadable;
const v93 = Array();
class C94 extends 47903 {
    constructor(a96, a97) {
        super();
        try {
            a96.__proto__ = 47903;
        } catch(e98) {
        }
        const t107 = 47903;
        new t107();
    }
}
const t111 = 145;
t111[267] = v92;
v93["concat"]();
