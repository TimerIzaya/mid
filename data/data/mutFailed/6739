new Int32Array(1000);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
new Int16Array(0);
Uint16Array.length = Uint16Array;
const v11 = new Uint16Array(257);
let v12;
try { v12 = v11.entries(); } catch (e) {}
try { v12.next(); } catch (e) {}
let v14 = 209;
const v15 = v14++;
function f17() {
    function f18(a19, a20) {
        Int16Array || v11;
        try { v12(65535n, 268435441n, Int32Array, v15); } catch (e) {}
        return Uint16Array;
    }
    return f18;
}
Object.defineProperty(Uint16Array, Symbol.toPrimitive, { writable: true, get: f17 });
Uint16Array.name = Uint16Array;
const v25 = new Uint16Array(v14);
const v26 = v14 > Uint16Array;
const v27 = v26 && v26;
const v28 = v26 || v26;
v28 && v28;
try {
    v25.__proto__ = v25;
} catch(e30) {
}
let v31 = 1829;
const v32 = v31 >>> v31;
v32 / v32;
Uint8Array.g = v27;
Uint8Array.g = Uint8Array;
const v35 = new Uint8Array(v31);
Object.defineProperty(v35, v26, { writable: true, configurable: true, enumerable: true, value: v31 = v14 });
v35[8] = Uint16Array;
let v36;
try { v36 = v31(); } catch (e) {}
try { v25.forEach(v36, v36); } catch (e) {}
try { new Float64Array(257, Int32Array, v32); } catch (e) {}
new Float64Array(3916);
/(\xed\xb0\x80)\x01/vdsy;
/a[a-z]/vim;
