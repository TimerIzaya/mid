class C3 {
    valueOf(a5, a6) {
        const v7 = 1294730567 <= "4";
        const v8 = v7 ? 1294730567 : "4";
        let v9;
        try { v9 = new a6(1000.0, 1294730567, a6, "4", v8); } catch (e) {}
        function F10(a12, a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = "4";
            } catch(e16) {
            }
            try {
                this.e = a15;
            } catch(e17) {
            }
            try {
                this.h = a5;
            } catch(e18) {
            }
        }
        new F10(F10, v7, v9, a6);
        const v20 = new F10(v8, v9, F10, v8);
        new F10(this, v20, a5, "4");
        return this;
    }
}
const v22 = C3?.constructor;
try { new v22(C3); } catch (e) {}
const v24 = new C3();
const v25 = v24?.constructor;
try { new v25(); } catch (e) {}
const v27 = new C3();
const v28 = v25?.constructor;
try { new v28(); } catch (e) {}
const v30 = new C3();
v30?.constructor;
try { new v30(); } catch (e) {}
function f33(a34, a35, a36, a37) {
    a35.prototype;
    const o46 = {
        p(a40, a41) {
            v30[a41];
            [a41,a40,[a37,v22,v28],a35];
            [a36];
            return a41;
        },
        [a37]: v24,
        [v24]: v30,
        "g": v27,
    };
    return o46;
}
const v48 = f33(v27, "4", f33(v30, C3, v24, v27), v27);
const v49 = v48?.__lookupGetter__;
try { new v49(v48); } catch (e) {}
v49(v27, "4", "4", v24);
function f52() {
    const o59 = {
        toString(a57, a58) {
        },
        "b": "4",
        "c": "boolean",
        ["object"]: f52,
        ["boolean"]: 1000000000000.0,
        "h": 1000000000000.0,
    };
    return o59;
}
const v60 = f52();
f52();
const v62 = f52();
function F63(a65) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
}
F63.arguments;
const v68 = new F63();
const v69 = v68?.constructor;
try { new v69(v24); } catch (e) {}
function f71(a72, a73, a74) {
    const o79 = {
        get a() {
            const o77 = {
            };
            gc();
        },
    };
    return o79;
}
const v80 = f71();
f71();
function F82(a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor;
    try { new a84(F82, F82); } catch (e) {}
    a85.g = a85;
    v30.a = a84;
}
const v89 = new F82(v62, v60, v68);
v89.d = v89;
const v90 = new F82(v62, v80);
v90.a;
const v93 = Math?.expm1;
try { v93.bind(f52); } catch (e) {}
