function f0() {
    const o11 = {
        __proto__: "arguments",
        m(a5) {
            try {
                ("uv").trimEnd();
            } catch(e7) {
            }
            return "b";
        },
        "f": "uv",
        "e": -662331.2858536356,
        "h": "uv",
    };
    return o11;
}
const v12 = f0();
const v13 = f0();
const v14 = f0();
class C15 {
    get d() {
        v13[Symbol.isConcatSpreadable];
        return this;
    }
    3 = f0;
    n(a21, a22) {
        const v23 = this >>> a21;
        try {
            this.__proto__ = v12;
        } catch(e24) {
        }
        return v23;
    }
}
function f25() {
    return f0;
}
function f26(a27) {
    try {
        v14.e = a27;
    } catch(e28) {
    }
}
Object.defineProperty(C15, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f25, set: f26 });
try { new C15(); } catch (e) {}
new C15();
const v33 = new C15();
v33[3] = v33;
const v34 = new C15();
[0.8062009126648836,9.093828953628567e+306,527694.3768359155,4.0,253656.05217201984,-0.0,-1e-15,0.2035782629253834,1000000.0,-281416.66071298777];
[-978081.7203316856,0.0,1000000000000.0];
const v37 = [-1.3412544172459573e+308,-1000000.0,1.3259530203941528e+308,NaN,-1.0,0.7421977725702997,420113.7028075161];
try { v37.toSpliced(v34, C15); } catch (e) {}
class C39 {
    static o(a41, a42) {
        try {
            this.fuck(v33, v12);
        } catch(e44) {
        }
        let v48 = --C15;
        v48++ / 2147483648;
        C15--;
        Math.sign(2147483648);
        C15 >>> v48;
        return 1000000000000.0;
    }
}
try { new C39(); } catch (e) {}
new C39();
const v56 = new C39();
function f57(a58) {
    for (let v59 = 0; v59 < 32; v59++) {
        v33["p" + v59] = v59;
    }
    return v33;
}
v56.constructor = f57;
const v62 = v56?.constructor;
try { new v62(); } catch (e) {}
new C39();
function F65() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f57;
    try { this.constructor(); } catch (e) {}
    class C68 {
    }
    for (let [i72, i73] = (() => {
            10 >= 10;
            return [0, 10];
        })();
        i72 > i72, i72++, i72 < i73;
        (() => {
            const v79 = [601759695];
            const v80 = [1073741824,1073741823,1376142744,1073741825];
            try { v80.lastIndexOf(C68); } catch (e) {}
            function f82(a83, a84, a85, a86) {
                a83--;
                a85 - a85;
                a86 - a86;
                function f90() {
                    return a83;
                }
                function f91(a92, a93) {
                    return a92;
                }
                try { f91(); } catch (e) {}
                f91(v80, C68);
                try { v80["find"](..."find", a86, ...v79, ...v80); } catch (e) {}
                return C68;
            }
            for (let v98 = 0; v98 < 10; v98++) {
                f82(v98, f82, i72, v98);
            }
        })()) {
    }
}
F65.length = F65;
new F65();
new F65();
