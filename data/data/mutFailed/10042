function f0() {
}
class C1 {
    n() {
        super.d = f0;
        let {"d":v3,"f":v4,...v5} = this;
        v3 *= v3--;
        try { v5["endsWith"](C1, "endsWith", "endsWith"); } catch (e) {}
        const o9 = {
            "getOwnPropertyDescriptor": f0,
            "ownKeys": f0,
        };
        new Proxy(v5, o9);
        v5[v4] ^= C1;
        [129,9007199254740992,-227002497,10000,9400,-5090,-61986,1000,623518409];
        [65537,8,-4096,-2147483647,-966765394,28096,1247710921];
        [1894159515];
        return v3;
    }
    #m() {
        const o16 = {
        };
        try {
            o16.e = this;
        } catch(e17) {
        }
        try {
            const o18 = {
            };
            o16.e = this;
            o18.d = this;
        } catch(e19) {
        }
        try {
            const o20 = {
            };
            o20.e = this;
            o20.d = C1;
            o20.h = this;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.e = this;
            o22.d = this;
            o22.b = o22;
        } catch(e23) {
        }
        return o16;
    }
}
new C1();
const v25 = new C1();
new C1();
const v29 = new BigUint64Array(5);
const v32 = new BigInt64Array(7);
new Float32Array(5);
const v36 = C1 instanceof BigUint64Array;
Object.defineProperty(C1, 3147425828, { configurable: true, value: f0 });
function F43(a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this.constructor;
    const v47 = v46.bind(F43, F43, F43, F43);
    try { v47(); } catch (e) {}
    try { new v46(); } catch (e) {}
}
v25["n"](..."n", ...v29, v25, 5, 7, ..."n");
v32[257] = v25;
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a54;
    } catch(e57) {
    }
}
const v58 = new F52(BigUint64Array, Float32Array, "n");
new F52(646753454, v58, "n");
new F52(-2, v36, "o");
new F43();
new F43();
