const v0 = [-536870912,3,-9223372036854775807,-1375123838,-268435456];
const v1 = [4,16];
const v2 = [-33577,4,3,-286032820,-62544,1024,-2147483649];
new Uint8Array(3);
const v8 = new BigInt64Array(4037);
const v11 = new BigInt64Array(8);
v2[10] = v2;
v1.length >>= 3;
let v15 = v0[16187];
v15 += v11;
new Uint8ClampedArray(1024);
new Float32Array(8);
new Int8Array(127);
try {
    v1.b = v11;
} catch(e30) {
}
Object.defineProperty(v2, 8, { writable: true, enumerable: true, get: EvalError });
class C33 {
}
new C33();
const v35 = new C33();
for (let [i52, i53] = (() => {
        for (let v39 = 0; v39 < 2; v39++) {
            C33 > v39 ? C33 : v39;
        }
        try {
            for (let i43 = 0; i43 < 8; i43++) {
                v8.buffer %= 3;
            }
            v8.__proto__ = v8;
        } catch(e49) {
        }
        return [0, 10];
    })();
    (() => {
        function F54(a56, a57) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = a57;
            } catch(e58) {
            }
            try {
                this.e = NaN;
            } catch(e59) {
            }
            try {
                this.f = 8;
            } catch(e60) {
            }
        }
        new F54(26328n, i53);
        new F54(26328n, i53);
        new F54(-65536n, i53);
        return i52 < i53;
    })();
    (() => {
        i52++;
        9223372036854775807 || 2.220446049250313e-16;
        const v72 = -(-2147483647);
        v72 && i53;
        Math.cosh(9223372036854775807);
        const v75 = -2147483647 % -2147483647;
        Math.floor(v72);
        2.220446049250313e-16 / v75;
        i53--;
        let v79;
        try { v79 = v2.reverse(); } catch (e) {}
        try {
            v35.__proto__ = v79;
        } catch(e80) {
        }
    })()) {
    new C33();
}
