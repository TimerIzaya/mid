const v2 = new Array(129);
v2[91] = v2;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    function f6(a7, a8, a9) {
        function f11(a12) {
            try { new a7(a7, a12); } catch (e) {}
        }
        this.onmessage = f11;
        a8 > a5;
        f11 && a7;
    }
    const v18 = ["function",v2,"function"];
    const o19 = {
        "arguments": v18,
        "type": "function",
    };
    new Worker(f6, o19);
    try {
        new Date();
        a5 = v18.length;
        try {
            Date();
        } catch(e25) {
        }
        this.e = a5;
    } catch(e26) {
    }
}
const v27 = new F3(v2);
const v28 = new F3(v2);
v28.b = v27;
const v29 = new F3(129);
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    a32.b = 129;
    function f36(a37) {
        function f38() {
            return a34;
        }
    }
    Object.defineProperty(a35, "b", { set: f36 });
    try {
        this.c = F3;
    } catch(e39) {
    }
    try {
        Math.asinh();
        Math.sin(3.862600614459211e+307);
        this.b = v28;
    } catch(e44) {
    }
    const o45 = {
        ...v27,
    };
    try {
        a35.b = 129;
    } catch(e46) {
    }
    try {
        this.d = a32;
    } catch(e47) {
    }
}
new F30(v29, v29, v27, v27);
new F30(v28, v27, v29, v28);
new F30(v29, v29, v27, v27);
const v53 = new Int16Array(1269);
for (const v54 in v53) {
}
