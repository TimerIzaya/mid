new Float64Array(2949);
const v5 = new Float64Array(64);
const v8 = new Int8Array(2);
class C9 extends Float64Array {
    static {
        for (let v11 = 0; v11 < 32; v11++) {
            this["p" + v11] = v11;
        }
        try { v5(Int8Array, this, 64, v8, 64); } catch (e) {}
        v5.buffer;
    }
    static 3;
    #c = Float64Array;
    [C9] = Float64Array;
    static #h = 2949;
    10;
    #b = v5;
    #n(a17, a18, a19) {
        const v21 = Symbol.iterator;
        const o38 = {
            [v21]() {
                let v23 = 10;
                const o37 = {
                    next() {
                        v23--;
                        const v27 = v23 == 0;
                        const o28 = {
                            "done": v27,
                            "value": v23,
                        };
                        return o28;
                    },
                    p(a30, a31, a32, a33) {
                        try {
                            this.next(Float64Array, 3.5756862525854523);
                        } catch(e36) {
                        }
                        return 2;
                    },
                };
                return o37;
            },
        };
        return a19;
    }
}
new C9();
const v40 = new C9();
new C9();
new Int16Array(0);
new Float64Array(3009);
new Float64Array(128);
function f51() {
    const o52 = {
    };
    Object.defineProperty(o52, 4, { writable: true, value: v40 });
    return o52;
}
const v53 = f51();
v53[4] = v53;
const v54 = f51();
v54[4] = v8;
for (let v55 = 0; v55 < 25; v55++) {
    const v56 = [601759695];
    const v57 = [1073741824,1073741823,1376142744,1073741825];
    function f58(a59, a60, a61, a62) {
        a59[4] = a61;
        a60[4] = v57;
        a59[4] = a59;
        a60[4] = a60;
        BigUint64Array * 536870887;
        try { v57["find"](..."find", a62, ...v56, ...v57); } catch (e) {}
        return v55;
    }
    for (let v68 = 0; v68 < 5; v68++) {
        f58(v53, v54);
    }
}
