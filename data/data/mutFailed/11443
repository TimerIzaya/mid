function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = null;
    } catch(e3) {
        new Int8Array(3);
        ~this;
        const v9 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
        class C10 extends Int16Array {
            [v9];
        }
    }
    try {
        this.a = null;
    } catch(e11) {
    }
    const v12 = /2a\sc/uds;
    function f13() {
        try { v12.test(v12); } catch (e) {}
    }
    ([1073741824,1073741823,1376142744,1073741825]).forEach(this);
}
new F1();
const v19 = [601759695];
const v20 = [1073741824,1073741823,1376142744,1073741825];
function f21(a22, a23, a24, a25) {
    -a22;
    a24[3] + 2;
    try { v20["58572"](..."58572", a25, ...v19); } catch (e) {}
}
new F1();
new F1();
let v35 = 65535n;
v35--;
try {
} catch(e37) {
}
new Int8Array(702);
new Uint8ClampedArray(5);
new Float32Array(255);
new Uint16Array(6);
Math.atan2([], -40875);
function f54() {
    ("D")[0].match();
    return f54;
}
f54();
%OptimizeFunctionOnNextCall(f54);
Uint8ClampedArray[2] = Float32Array;
Uint8ClampedArray[1] = 14;
/4H/gvisy.compile(/[m]/gvdimsy);
function F63() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v67 = Array(19793);
        for (const v68 of v67) {
        }
        const v69 = [v67,v67,v67,v67,v67];
        [[v69,v69,v69]];
    } catch(e73) {
        [e73,this];
    }
}
new Float32Array(Uint8ClampedArray);
