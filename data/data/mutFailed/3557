let v0 = 64;
let v2 = new Int32Array(v0);
({"byteLength":v0,"c":v2,"length":v0,...v2} = v2);
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a6;
    } catch(e7) {
    }
}
const v8 = new F3(v0, v0);
new F3(v8, v8);
new F3(v8, v2);
for (let [v12,v13,...v14] of v0) {
    v14 || v14;
}
const v20 = new Uint16Array(64);
const v23 = new Int16Array(2);
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a26;
    } catch(e28) {
    }
    try {
        this.c = a27;
    } catch(e29) {
    }
    try {
        [a27] = v23;
        this / a26;
        Object.defineProperty(v20, v20.byteOffset, { writable: true, value: ArrayBuffer });
        this.b = Uint16Array;
    } catch(e33) {
    }
}
new F24(v0, v0);
new F24(v0, 2);
new F24(2, 2);
function f37() {
    const o41 = {
        ...1.0,
        set b(a40) {
        },
    };
    return 1.0;
}
for (let v42 = 0; v42 < 5; v42++) {
    f37();
    %OptimizeFunctionOnNextCall(f37);
}
