class C3 {
    constructor(a5) {
        -4294967296 / -4294967296;
    }
    [C3];
    static set e(a11) {
        function f12(a13, a14) {
            Math.min(-12 | -12);
            Math.log1p(-1.0, Math.exp(-12));
            const o23 = {
                "b": "buffer",
                "a": this,
                [a13]: a11,
            };
            return o23;
        }
        f12("buffer", a11);
        f12(this, this);
        f12("buffer", C3);
    }
}
C3.e = C3;
const v27 = new C3("65535");
delete v27[7];
const v29 = [-9,0,725603259,9007199254740992,-9,1073741825,-203235122];
[837086941,4294967295,-65537,-65537,7];
[129675714,1073741823,65535,-1073741824];
const v32 = new C3("buffer");
v32.e = v32;
const v33 = new C3("buffer");
v33.b = v33;
const v34 = new C3("65535");
try { v34.hasOwnProperty(v34); } catch (e) {}
const v36 = [v33,"65535",v34];
const v37 = [v36];
v37.g = v37;
["flags","65535",v32];
function f39() {
    return v36;
}
f39.arguments = f39;
new Int32Array(1024);
for (const v46 of v29) {
    v46 >>> v46;
    1293466293 & 1293466293;
    const o51 = {
        "maxByteLength": 1293466293,
    };
    -1796;
    new SharedArrayBuffer(1796, o51);
}
