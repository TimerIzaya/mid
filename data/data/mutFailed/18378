function f2() {
    const v3 = [f2,f2];
    let v4;
    try { v4 = v3.every(f2); } catch (e) {}
    return v4;
}
const v5 = f2();
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this.constructor;
    try { new v15(a12); } catch (e) {}
    typeof v15 === "symbol";
}
const o20 = {
};
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = this;
    } catch(e24) {
    }
}
new F21();
new BigInt64Array(1850);
for (let i29 = 0, i30 = 10;
    i29 < i30;
    (() => {
        i30--;
        let v36 = BigInt64Array;
        const v37 = new v36(3768);
        v36++;
        let o39 = {
        };
        eval(i30);
        [,...o39] = v37;
    })()) {
}
new Float32Array(256);
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = f2();
    function f55() {
        return v54;
    }
    new Float64Array(Float64Array);
}
const v58 = new F48(164140152, F48, 164140152, 164140152);
for (let v59 = 0; v59 < 5; v59++) {
    function f60() {
        new Float64Array(6);
        this.setTimeout();
        const v67 = /(\1a)/gums;
        const v68 = /V(?:a{5,1000000}){3,1000000}/vims;
        const v69 = /(?<a>.)\k<a>?/vdimsy;
        v67.compile(v68);
        const v71 = [v69,v68,v67];
        v71[2] = v71;
        const v72 = [v71,v68,v69,v71,v71];
        v72[2] = v72;
        const v75 = new BigInt64Array(8);
        const v79 = new Uint8Array(7);
        let v82;
        try { v82 = Int32Array.bind(this); } catch (e) {}
        function f83() {
            3.4890473589784586e+307 === 3.4890473589784586e+307;
            let v86 = 1000000000000.0;
            const v87 = v86--;
            -v87;
            -v72 && v72;
            class C94 {
                static #m(a96) {
                }
                constructor(a98) {
                    const v100 = new Float32Array();
                    let v101;
                    try { v101 = v100.entries(); } catch (e) {}
                    v101.next();
                    const v103 = new Uint16Array(12, -4294967296, v87);
                    new Float32Array(v103);
                }
            }
            new C94();
            new C94();
            Symbol.iterator;
            try { v75.reduce(Int32Array, 12); } catch (e) {}
            let v110 = 0;
            v110++;
            const v112 = new C94();
            new C94();
            const v114 = new C94(v59);
            [];
            [257828.6336153492,v114,v112,v114];
            const v117 = [];
            v117[0];
            class C119 extends C94 {
            }
            new C119();
            const v121 = v117.constructor;
            try { v121.isArray(v117); } catch (e) {}
            class C123 extends v121 {
            }
            C123.a = C123;
            const v124 = new C123();
            const v125 = v124.constructor;
            try { v125.bind(); } catch (e) {}
            const o127 = {
                "e": v117,
                __proto__: v71,
                [v72]: v79,
                "h": 257828.6336153492,
            };
            try { o127.e(BigUint64Array); } catch (e) {}
            return Int32Array;
        }
        f83();
        %OptimizeFunctionOnNextCall(f83);
        ("Vre").strike();
        const v131 = Int32Array.link();
        v131.includes(164140152);
        const v134 = Array();
        v134.unshift(v58, v59, F48, v59, v134.pop());
        const v138 = new Set();
        v138.add().entries();
        class C141 {
        }
        const v142 = new v82();
        v142.hasOwnProperty(v131);
    }
    f60();
    %OptimizeFunctionOnNextCall(v5);
    ("29753").replaceAll("29753", "b");
    Array(36862);
}
new Int32Array(228);
const v156 = [[]];
class C158 extends Map {
}
const v159 = new C158(v156);
const v160 = new C158(v159);
function f162(a163, a164, a165, a166) {
    try { a163.toLocaleString(); } catch (e) {}
    arguments.length;
    v159["entries"](a165, ...v160, BigUint64Array);
    const t141 = "e";
    t141[0] = "e";
    return "e";
}
Date.UTC(268435456);
