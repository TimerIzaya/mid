new BigInt64Array(1000);
const t1 = 1000;
new t1();
const v6 = new WeakSet();
const v7 = v6.has(v6);
const v9 = ([WeakSet,WeakSet,WeakSet,WeakSet]).copyWithin();
try { v9.group(v7); } catch (e) {}
[233798.02788175456,-0.0];
[2.2250738585072014e-308,-2.220446049250313e-16,1.3261334592885063];
[1000000.0,-71.74487949182912,-2.1339176273647587];
new Int8Array(8);
const v22 = Array(11);
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v25 = 0; v25 < 25; v25++) {
    v24["p" + v25] = v25;
}
const v29 = [601759695];
function f30(a31, a32, a33, a34) {
    function f35() {
        let v38 = Float64Array;
        v38 = a32;
        v24.length;
        try {
            v22.forEach();
        } catch(e41) {
        }
        Symbol.toPrimitive;
        const o48 = {
            toString(a45, a46) {
                return a34 && v38;
            },
        };
        const o49 = {
        };
        new Proxy(Uint8ClampedArray, o49);
        o48[9] = a31;
        const o57 = {
            [-4294967297n](a53, a54, a55, a56) {
            },
            ...v29,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f30;
    }
    f35();
    %OptimizeFunctionOnNextCall(f35);
    return -4294967297n;
}
new Int32Array();
Date | -7;
const v64 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try {
    v64.forEach();
} catch(e66) {
    e66.a = e66;
}
new Uint32Array(422);
new Uint8Array(173);
new Date(..."undefined");
class C75 {
}
9n >> 9n;
new Float32Array(6);
class C81 {
}
class C82 {
    constructor(a84, a85, a86, a87) {
        try { a86(...a84, "e", a87, a87, ...C81); } catch (e) {}
        return arguments;
    }
}
