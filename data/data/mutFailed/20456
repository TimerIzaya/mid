const v0 = [];
const v2 = new Map();
const v5 = -(-24568);
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this?.__defineGetter__;
    try { new v13(Map, F7); } catch (e) {}
    -a11;
    v0["reduceRight"]("reduceRight", v5, this, a10, -24568, 8);
    const o21 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o21);
    a12 & a12;
    try {
        this.b = a10;
    } catch(e24) {
    }
    try {
        this.d = a12;
    } catch(e25) {
    }
    try {
        this.c = a10;
    } catch(e26) {
    }
}
new F7(v0, F7, 8, 8);
const v28 = new F7(1429121328, -24568, 8, 8);
new F7(-24568, v28, 8, -24568);
[29284,414581343,-65537,512,1000];
const v31 = [54908640,-23486];
v31[1] = v31;
[23327,257,268435441];
4096 >> 4096;
Int16Array.a = Int16Array;
const v36 = new Int16Array(4096);
new Array(7);
Array(1429121328);
v36.__proto__;
class C42 {
    constructor(a44, a45, a46, a47) {
        try { new a47(this, v2, a46, v2); } catch (e) {}
        let [v49,v50,,...v51] = v36;
        -v49;
        v50 + v50;
        try {
            class C54 {
                #n(a56, a57, a58, a59) {
                    super[this] = this;
                }
            }
            try { new C54(); } catch (e) {}
        } catch(e61) {
        }
    }
}
try { new C42(v28, v0, v0, 4096); } catch (e) {}
const v63 = new C42(v36, 4096, Int16Array, C42);
const v64 = v63?.constructor;
try { new v64(F7, C42, C42, C42); } catch (e) {}
new C42(C42, 4096, 4096, C42);
