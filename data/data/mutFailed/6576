class C3 {
    f;
    static {
        const t3 = "isConcatSpreadable";
        t3[3] = "replaceAll";
        function F5(a7) {
            if (!new.target) { throw 'must be called with new'; }
            const v8 = this.constructor;
            const v9 = v8.bind(F5, F5, F5, F5);
            try { v9(); } catch (e) {}
            try { new v8(); } catch (e) {}
        }
        new F5();
        new F5();
        try {
            super.p("isConcatSpreadable", 1.457255432236491e+308, this, 1.457255432236491e+308);
        } catch(e15) {
        }
    }
    #c;
    static #f;
    9;
    c = 1.457255432236491e+308;
}
new C3();
new C3();
new C3();
const o29 = {
    valueOf() {
        const v27 = /gk4b*/vmsy;
        Object.defineProperty(v27, -9223372036854775808, { enumerable: true, set: gc });
        return v27;
    },
};
for (let v30 = 0; v30 < 5; v30++) {
    Math.round(o29);
}
function f33() {
    return f33;
}
class C34 extends f33 {
    constructor(a36) {
    }
}
try { new C34(); } catch (e) {}
