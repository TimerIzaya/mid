class C3 {
    set d(a5) {
        ("function").length;
        try {
            const t4 = "p";
            t4.length = this;
        } catch(e9) {
        }
        const v10 = a5 || a5;
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = this;
            } catch(e15) {
            }
            try {
                this.e = a5;
            } catch(e16) {
            }
            try {
                this.h = a14;
            } catch(e17) {
            }
        }
        const v18 = new F11(v10, F11);
        new F11(v18, v10);
        new F11(v10, this);
    }
}
const v21 = new C3();
const v22 = new C3();
const v23 = new C3();
class C27 extends C3 {
    constructor(a29, a30) {
        super();
        const v31 = C27[129];
        const v32 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
        function F33(a35, a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            const v39 = this.constructor;
            try { new v39(); } catch (e) {}
            v32.__proto__.splice(a37);
        }
        v31.log1p(5.712452742881646e+307);
        function f47(a48, a49, a50) {
            for (let i = 0; i < 5; i++) {
                /k/gdsy;
            }
            f47();
        }
        const v57 = "-268435456" ^ (9 || 1309059372);
        const v58 = v57 << 1309059372;
        3.0 ^ C27;
        5.712452742881646e+307 | ["e","e","e","e","e"];
        ("h").split(65535);
        -1309059372;
        v57 >>> v58;
    }
    /*
    constructor(a69, a70, a71) {
        function f72(a73, a74, a75) {
            function f77(a78) {
                return a75;
            }
            %PrepareFunctionForOptimization(f77);
            return this;
        }
        Worker(f72);
    }
    */
}
new C27("forEach", v21);
new C27("forEach", v23);
new C27("forEach", v22);
function f90() {
    class C93 {
    }
    Math.log1p(-4.600007534268795);
    new Uint8Array(10);
    const v102 = `
        try {
            new Float64Array(127);
        } catch(e104) {
        }
    `;
    let v105 = -65535;
    v105 * v105;
    v105 / v105;
    const o118 = {
        __proto__: 352326470,
        next() {
            v105--;
            const v111 = v105 == 0;
            const o112 = {
                "done": v111,
                "value": v105,
            };
            return o112;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        get d() {
            return "-268435456";
        },
        toString(a115, a116) {
            1309059372 && Float64Array;
            return 10;
        },
    };
}
