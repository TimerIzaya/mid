const v0 = [65536,-6,65536,-282724255,28203,-65537,-347];
const v1 = [-1046514251,257,4294967297,9007199254740991,64,-23133,16,1073741825,65536];
const v2 = [-65537,4];
v0 || true;
class C5 {
    static #e;
    [v2];
    static d;
    static #g;
    valueOf(a7, a8) {
        v1[64];
        try {
            super.setUTCDate(a7);
        } catch(e11) {
        }
        return v1;
    }
}
const v12 = C5?.apply;
try { v12(v1, v2); } catch (e) {}
try { new v12(v1, C5); } catch (e) {}
const v15 = new C5();
const v16 = new C5();
try { v16.valueOf(v16, v0); } catch (e) {}
const v18 = new C5();
const v19 = [true,v18,v1,v1,v16];
try { v19.reduceRight(v15); } catch (e) {}
const v21 = [v15,v19,true];
const v22 = v21[1];
v22[1] = v22;
const v23 = [v1];
try { v23.entries(); } catch (e) {}
v23[0] = v23;
function f26() {
    return v2;
}
let v27;
try { v27 = new f26(); } catch (e) {}
function f28(a29) {
    const v31 = ([-634925.1890290517,2.90152870633192,-3.0061501334692515,731.2207499041451,2.0])?.filter;
    try { new v31(v27); } catch (e) {}
    [2.2250738585072014e-308,-389743.59421557153,-5.069626322872619e+307,2.2250738585072014e-308,-2.0,5.0,1e-15,-810647.4695986046,5.0];
    [1.0,2.0,-3.0,1e-15,3.0];
}
Object.defineProperty(Uint8Array, "g", { configurable: true, enumerable: true, get: f26, set: f28 });
const v35 = new Uint8Array();
const v37 = Uint32Array?.constructor;
v37.name;
try { new v37(v16); } catch (e) {}
const v40 = new Uint32Array();
let v41;
try { v41 = v40.entries(); } catch (e) {}
const v42 = v41?.__lookupSetter__;
try { new v42(v0); } catch (e) {}
function f44(a45, a46, a47, a48) {
    let v49;
    try { v49 = new a45(a45, a45, a46); } catch (e) {}
    a45.g = a46;
    a45.g = a45;
    f44(v49, g, v40, g);
    [] = v19;
    f26();
    const o53 = {
        "isExtensible": f26,
    };
    new Proxy(v21, o53);
    const v56 = a47 % a47;
    v56 | v56;
    const o61 = {
        "b": a45,
        ...v35,
        n(a59, a60) {
            v40[a45] = v40;
            return Uint8Array;
        },
    };
    const v62 = o61?.b;
    try { new v62(v15, v15, v15); } catch (e) {}
    let v64;
    try { v64 = new v62(v18, o61, v15); } catch (e) {}
    try { v64.entries(); } catch (e) {}
    return Uint8Array;
}
for (let v66 = 0; v66 < 625; v66++) {
    f44(Uint8Array);
}
