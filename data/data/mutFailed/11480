new Int32Array(8);
("minor").valueOf();
class C8 {
    5;
    constructor(a10) {
        const v11 = ("m")[9];
        super.c = "m";
        try {
            super.expm1("m", v11, arguments);
        } catch(e14) {
        }
    }
    96;
    static a = "defineProperties";
    #e;
    h;
    0 = "defineProperties";
}
const v15 = new C8("defineProperties");
const v16 = new C8(324243101);
const v17 = new C8(v16);
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a20;
    } catch(e24) {
    }
}
new F18(v15, v15, v15, v17);
const v26 = new F18(v16, v15, v16, v15);
new F18(v15, v17, v26, v16);
function f29() {
    const o30 = {
    };
    return o30;
}
new Set();
/Qabc|def/msy;
/foo(?<=bar)baz[\011]?/gi;
/\P{gc=Decimal_Number}/ud;
function f35(a36, a37, a38, a39) {
    function f40() {
        let v42 = !257;
        -v42 | v42--;
        return a36;
    }
    const v46 = f40();
    function f48() {
        const v52 = !128;
        +128;
        +(v52 >>> Int16Array);
        Math.cos(Int16Array);
        Int16Array ^ 128;
        a36 ** 128;
        return v17;
    }
    Int16Array[Symbol.iterator] = f48;
    const v61 = new Int16Array(Int16Array, Int16Array, Int16Array);
    function f62() {
        return f62;
    }
    class C63 extends f62 {
        constructor(a65, a66, a67, a68) {
            super();
            function f69() {
                const o70 = {
                    "g": a66,
                    ...v61,
                };
                return C63;
            }
            for (let v71 = 0; v71 < 5; v71++) {
                f69();
                %OptimizeFunctionOnNextCall(f69);
            }
        }
    }
    new C63();
    %OptimizeFunctionOnNextCall(f40);
    return v46;
}
const v74 = f35();
f35(v74, v74, v74, f35(f35, f35, f35, v74));
