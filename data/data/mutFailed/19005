function f0() {
    const o32 = {
        ["g"]: -1585100583,
        n(a5, a6) {
            const v10 = +-1585100583;
            Math.log1p(-59271);
            Math.expm1(v10);
            -59271 & v10;
            a6 >>> (-1585100583 || a6);
            +40935;
            return "g";
        },
        "c": "g",
        get f() {
            let [v18,...v19] = "g";
            const v20 = this["g"];
            const v21 = v19?.f;
            const o24 = {
                "execution": "g",
                m(a23) {
                    return a23;
                },
                "type": "g",
            };
            try {
                o24.g = v20;
            } catch(e25) {
            }
            try {
                const o26 = {
                };
                o26.g = v20;
                o26.d = v20;
            } catch(e27) {
            }
            try {
                const o28 = {
                };
                o28.g = v20;
                o28.d = v21;
                o28.e = "g";
            } catch(e29) {
            }
            try {
                const o30 = {
                };
                o30.g = v20;
                o30.d = v21;
                o30.a = v19;
            } catch(e31) {
            }
            return o24;
        },
    };
    return -1585100583;
}
f0();
const v34 = f0();
const v35 = v34();
function f36() {
    return v35;
}
class C40 {
    get a() {
        this ** v34;
        Object.defineProperty(this, 4294967297, { configurable: true, get: f36, set: f36 });
        const v44 = new Map();
        v44["has"](v35);
        return v44;
    }
    static #g = f36;
}
const v49 = new Int8Array(3);
new Uint8ClampedArray(v49);
new C40();
const v53 = new C40();
new C40();
let v55 = [-5105,-65536,512,536870887,128,1108608188,60880,12,5];
const o56 = {
};
const v57 = o56.constructor;
const v59 = 1922 % 1922;
v59 == v59;
for (let v61 = 0; v61 < 25; v61++) {
    v61 - v61;
    v55 = v57;
    function f63() {
        return f63;
    }
    function f64(a65, a66, a67, a68) {
        a66.hasOwn(f63, a67);
        let v70;
        try { v70 = new a67(a66); } catch (e) {}
        const v71 = v70?.is;
        try { v71(a66, a68); } catch (e) {}
        const v73 = a68 >>> a68;
        try { a66(v73); } catch (e) {}
        let v75;
        try { v75 = new a67(); } catch (e) {}
        a66.freeze();
        a68 + a68;
        -f63;
        function f79() {
            return v53;
        }
        f79.arguments;
        try { f79.toString(); } catch (e) {}
        const v83 = -f79.length;
        ~v83;
        const v86 = f63().constructor;
        let v87;
        try { v87 = v86(); } catch (e) {}
        v87.arguments = v87;
        v87.bind(v83, v86, v87);
        function f89() {
            return v87;
        }
        const v90 = typeof f79;
        v90 == v90;
        try { v90.charAt(v75); } catch (e) {}
    }
    for (let v93 = 0; v93 < 5; v93++) {
        f64(v93, v57, v57, 1922);
    }
}
