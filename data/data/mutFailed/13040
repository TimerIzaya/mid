const v2 = new Int16Array(40);
function f3() {
    try {
        v2.length = 142;
    } catch(e5) {
    }
    return 142;
}
v2[Symbol.toPrimitive] = f3;
new Float32Array(129);
const v13 = new Uint8ClampedArray(7);
function f14() {
    return v13;
}
const v15 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
v15.length = 1;
for (let v17 = 0; v17 < 25; v17++) {
    Array(36862);
}
function f21(a22, a23, a24, a25) {
    const o37 = {
        [a22]: 129,
        "g": 129,
        2147483648: a22,
        ...v15,
        6: 40,
        [Int16Array]: v13,
        [v2](a27, a28, a29, a30) {
            for (let v31 = 0; v31 < 33; v31++) {
            }
            try { v13.every(...a24, a30, a25, a28, ...a29); } catch (e) {}
            return v2;
        },
        "d": a23,
        "c": a23,
    };
    return o37;
}
f21(129, 129, 40, f21(7, 129, 129, f21(40, 40, 7, 129)));
const v41 = [837449509,1,0,28677,-1493785230,14423,536870887,1395954475,1096550133];
Object.defineProperty(v41, "toString", { value: f21 });
const v42 = [-7,-5,-10,7];
function F43(a45) {
    if (!new.target) { throw 'must be called with new'; }
    ([Float32Array])["concat"]().includes(Float32Array);
    for (let i = 0; i < 5; i++) {
        try {
        const t0 = 9907n;
        t0();
        } catch (e) {}
    }
    new Uint8Array();
}
const v55 = new F43(v41);
function f56(a57) {
    return [0.00952483356421907,-3.0,2.220446049250313e-16];
    return v15;
}
v55[Symbol.toPrimitive] = f56;
const v61 = new F43(v41);
try {
    new BigUint64Array();
    const o65 = {
        "d": BigUint64Array,
    };
    const o71 = {
        [-1.1635412394243161e+308](a68) {
        },
        set b(a70) {
        },
    };
    const v72 = new BigUint64Array(4);
    [v72];
} catch(e74) {
}
try {
    const o75 = {
    };
} catch(e76) {
}
try {
    const o77 = {
    };
} catch(e78) {
}
try {
    const o79 = {
    };
} catch(e80) {
}
const v81 = new F43(v41);
class C82 extends F43 {
    static valueOf(a84, a85, a86, a87) {
    }
    [v61] = v42;
    #d;
    [v41] = v41;
    [v55] = v81;
}
const v88 = /2a\sc/uds;
v88[Symbol.toPrimitive] = f14;
function f91() {
    try { v88.test(v88); } catch (e) {}
}
v88[Symbol.toPrimitive] = f91;
const o97 = {
    [v88](a96) {
    },
};
