const v2 = new Uint16Array(230);
new Uint8Array(12);
try {
    v2.c = v2;
} catch(e6) {
}
const o7 = {
};
new Proxy(v2, o7);
new BigUint64Array(57);
/[eg(?<=a)]/gi;
/aW/vms;
/[w(x)(x)(x)\3*]/gvdmsy;
const v16 = [-65537,-24143,-1293542190,14907,3476,-65083];
const v17 = [65537,3,-25535,268435440,-2,9007199254740990,1,-128,9007199254740990];
const v18 = [6,-536870912];
function f20(a21, a22) {
    try {
        v2.indexOf(Date);
    } catch(e24) {
    }
}
const v26 = new Promise(f20);
const v27 = new Date();
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v27;
    this.g = Date;
}
new F28(v16);
const v32 = new F28();
class C33 {
    constructor(a35, a36) {
        function f37(a38, a39, a40, a41) {
            const o42 = {
                "deleteProperty": Date,
                "ownKeys": Date,
            };
            return v32;
        }
        f37(v17, Date);
    }
    [v18];
    g = v32;
}
new C33();
new C33();
const v47 = new Uint16Array();
const v50 = new Float64Array(453);
const v51 = v50.toSorted();
const o52 = {
    "c": Float64Array,
    "f": v18,
    __proto__: v47,
    "b": f20,
    [F28]: v26,
    [-1]: v16,
    "e": v50,
    "a": v16,
};
Date();
Date.valueOf = v51;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -12;
    } catch(e3) {
    }
    try {
        this.h = -12;
    } catch(e4) {
    }
}
const v5 = new F0();
new F0();
const v7 = new F0();
class C8 extends F0 {
    static a = F0;
    [v5] = v7;
    static 198 = F0;
    [F0];
    static #toString(a10) {
        function f11(a12, a13) {
            try { this["isFrozen"](v7, "isFrozen", "isFrozen", v5, a13); } catch (e) {}
            try {
                const t23 = "isFrozen";
                t23.toString = a12;
            } catch(e16) {
            }
        }
        Date.now();
        9 ** [Date];
        new Uint8Array();
        const v26 = new Set();
        return v26;
        new Promise(f11);
        return v7;
    }
}
function f29() {
    return "trim";
}
Object.defineProperty("trim", 5, { enumerable: true, set: f29 });
new C8();
new C8();
new C8();
new Date();
new Int8Array(2755);
new Uint8Array(127);
new Int32Array(3644);
let v45 = 2.220446049250313e-16;
class C47 {
    constructor(a49) {
        const o50 = {
            ...this,
        };
        try {
            v45 = -1.0;
        } catch(e51) {
        }
    }
    toString(a53, a54, a55) {
        const t60 = 3644;
        t60();
        super.b = 2755;
    }
    #f;
    [v45];
    #e = -1.0;
}
const v57 = new C47(v45);
const v58 = new C47(167.17964779139515);
const v59 = new C47(167.17964779139515);
function F62(a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a65;
    } catch(e67) {
    }
}
const v68 = new F62(F62, v59, v57);
const v69 = new F62(v59, 2755);
const v70 = new F62(v45, v57, v57);
try {
    v58.fuck([v68,128,v70,v57,167.17964779139515], -2058640984);
    class C73 {
    }
    new C73();
} catch(e76) {
}
function f77() {
    new BigInt64Array(1024);
    new BigUint64Array(16);
    return v70;
}
const v86 = new Int16Array(Int16Array, Int16Array, Int16Array);
new Float64Array(v86, v86, Int16Array);
function F89(a91, a92, a93) {
    if (!new.target) { throw 'must be called with new'; }
}
try { v57["indexOf"](v70, v57, v69); } catch (e) {}
