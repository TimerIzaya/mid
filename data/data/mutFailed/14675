class C3 {
    #n(a5, a6) {
        try { ("subarray").trimEnd(); } catch (e) {}
        let v9 = 4;
        let v10 = a6 % v9;
        a5 && v10;
        --v10;
        v9--;
        return a6;
    }
}
new C3();
new C3();
new C3();
[36495,-15];
[-8];
[-1238895943,129,1073741823,-3,2147483648];
function f20() {
    const o23 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o23;
}
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.constructor;
    try { new v26(); } catch (e) {}
}
const v28 = new F24();
const v29 = v28?.constructor;
let v30;
try { v30 = v29(); } catch (e) {}
v28.length;
const v32 = new F24();
const v33 = [v32,v32,v32,v32,v32];
const v36 = new Uint32Array(1000);
const v37 = delete v33.length;
("cbrt").toLocaleUpperCase(v30, v37);
try { v37["cbrt"](v36, Uint32Array, v28); } catch (e) {}
f20();
const v42 = f20();
const v43 = f20();
WeakMap();
new Float32Array([49197,268435456,-12,-5156,35920,-45892,-667,536870888,65537,-12]);
Number.isNaN(NaN);
65537 >> 65537;
536870912 + 536870912;
const v60 = [-42643,-2,-327102325,-1073741824,5];
function f61(a62, a63) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
class C66 {
}
const v67 = v42.constructor;
let v68;
try { v68 = new v67(v67, 1.7976931348623157e+308); } catch (e) {}
typeof v68 === "symbol";
function f72(a73, a74, a75, a76) {
    function f78() {
        return a76;
    }
    ("number").slice([a73,a73]);
    %OptimizeFunctionOnNextCall(f78);
    function F82() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F82();
    return arguments;
}
for (let v85 = 0; v85 < 10; v85++) {
    f72(f72, f72, v85, v85);
}
class C88 {
}
const v89 = new C88();
function f90(a91, a92) {
    let v93 = a91.BYTES_PER_ELEMENT;
    v93++;
    class C95 {
    }
    const v96 = C95.length;
    v96 !== v96;
    try { ("0x2I").sup(); } catch (e) {}
    class C101 {
    }
    try { C101(); } catch (e) {}
    const v103 = C101?.call;
    v103.length;
    try { v103(null); } catch (e) {}
    class C106 extends C101 {
        constructor(a108, a109, a110, a111) {
        }
    }
    C106.e = C106;
    try { C106(NaN, v89, NaN, v43); } catch (e) {}
    const v113 = a92?.propertyIsEnumerable;
    try { v113(C101); } catch (e) {}
    let v115;
    try { v115 = v113(); } catch (e) {}
    class C116 {
    }
    C116.name = C116;
    try { C116.call(); } catch (e) {}
    const v118 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v118.includes(v115); } catch (e) {}
    class C120 {
    }
    try { C120(); } catch (e) {}
    try { C120.apply(1.7976931348623157e+308, f90); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C120[Symbol.replace] = v118;
    const v126 = [];
    try { v126.findLast(1.7976931348623157e+308); } catch (e) {}
    function f129(a130, a131) {
        const o132 = {
            "f": a131,
            [a130]: -12,
        };
        return o132;
    }
    try { f129.toString(); } catch (e) {}
    let v134;
    try { v134 = v126.with(v126, v126); } catch (e) {}
    const v136 = new Float64Array(v126, v134);
    const v137 = new Float64Array(v136, a91, v134);
    v137.values().next();
    return v137;
}
f90.name;
f90.length = f90;
%PrepareFunctionForOptimization(f90);
f90(Uint16Array, v89).length;
%OptimizeFunctionOnNextCall(f90);
f90(v89, v89);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v147 = undefined;
const o148 = {
    __proto__: undefined,
};
o148.h = o148;
v147 = v60;
let v150;
try { v150 = BigInt64Array(4.0, v147); } catch (e) {}
const v153 = new BigInt64Array(205);
const v156 = new Uint16Array(256);
const v157 = v153[205];
for (const v158 of v156) {
    v157?.h;
}
try { v150.lastIndexOf(BigInt64Array); } catch (e) {}
const v161 = [-11,65536,65537];
function f162(a163, a164, a165, a166) {
    v161[1428717040];
    return a166;
}
%OptimizeFunctionOnNextCall(f162);
