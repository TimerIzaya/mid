function f3() {
    return "k7el1";
}
class C4 extends f3 {
    constructor(a6) {
        super();
        super[this];
        class C8 {
        }
        class C9 {
            toString(a11, a12, a13) {
            }
        }
    }
    valueOf(a15, a16) {
        try {
        } catch(e17) {
        }
        new Int8Array(268435456);
        super.length &&= a15;
        [1163217695,2147483649,-9223372036854775808,3,512,4,-62126];
        [-9007199254740990,-412605800,-4294967295,37250,21860,-1490628282,64,-56158,-7746,4];
        [9007199254740992,-536870912,12,4453,-47408,15,4294967297];
        return "function";
    }
}
const t26 = "e";
new t26();
gc();
Math.cosh(Math);
const v29 = new C4("function");
const v30 = new C4(v29);
const v31 = new C4(v29);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = 6 >>> 1;
    const t35 = "e";
    t35[1] = "e";
    function f41() {
        const o45 = {
            m(a44) {
                return a44;
            },
            __proto__: 946.0676210033328,
        };
    }
    f41();
    %OptimizeFunctionOnNextCall(f41);
    try {
        this.e = a36;
        0 < v40;
        1 * 7;
        1940694780n == [10624,733951208,4294967296,5138,14];
    } catch(e54) {
    }
}
new F32(v31, v29, v31, "function");
new F32(v31, v29, "e", v31);
new F32("e", v31, v29, v30);
function f58(a59, a60, a61, a62) {
    function f64() {
        return arguments;
    }
    const v66 = new Int8Array();
    v66.buffer;
    %OptimizeFunctionOnNextCall(f64);
    const v68 = [];
    v68[0] = v68;
    function f69() {
        class C70 {
        }
        const v71 = new C70();
        const v72 = [v71,v71,v71,v71,v71];
        const v73 = [f69,f69];
        class C74 extends C70 {
            [v71];
        }
        const v75 = new C74();
        v73.constructor;
        try { v75.m(v72); } catch (e) {}
        return f69;
    }
    const v79 = new a61();
    for (const v81 of `match${v79}-20124`) {
    }
    function F82() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C84 extends F82 {
        static {
            try {
                this.fuck(this, this, F82);
            } catch(e87) {
            }
        }
        static 10;
    }
    ("find").codePointAt(f58);
    return arguments;
}
for (let v89 = 0; v89 < 10; v89++) {
    f58();
}
%OptimizeFunctionOnNextCall(f58);
f58();
