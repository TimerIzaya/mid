class C3 {
    static #d = "-2121814466";
    constructor(a5) {
        let v4 = this;
        function f6(a7, a8) {
            const v9 = [a7,C3,a7,a5,a5];
            [[v4,a8,a7,C3,C3],a8];
            return v9;
        }
        v4[Symbol.toPrimitive] = f6;
        a5.toString = f6;
        let v16 = 9007199254740990;
        const v17 = v4--;
        Math.log10(v16++);
        Math.trunc(v16);
        a5 | v17;
    }
    4;
    h;
    7 = -1;
    d = "-2121814466";
}
const v22 = new C3(-1);
function f23() {
    const v27 = [601759695];
    const v28 = [1073741824,1073741823,1376142744,1073741825];
    function f30(a31, a32, a33, a34) {
        function f36() {
            return a34;
        }
        arguments.c = 1163987790;
        -9223372036854775808n & -2147483647n;
        const v47 = new Int8Array();
        const v48 = v47.buffer;
        class C51 {
            static {
                for (const v53 of "-4294967295") {
                }
            }
        }
        v48.slice();
        %OptimizeFunctionOnNextCall(f36);
        let v56;
        try { v56 = v28["find"](..."find", a34, ...v27); } catch (e) {}
        v56 <= a33;
        return arguments;
    }
    f30(null, -256, -9223372036854775808n, "B");
    return "B";
}
v22[Symbol.toPrimitive] = f23;
new C3(1000000000.0);
new C3(v22);
[-2,-13,1,1001664292,12,2064844498,1];
[-14,31981,-9,65535,-1,686,4294967296,268435440];
[-12,276191255,2147483649,15];
function f68(a69, a70, a71, a72) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
    arguments[4] = arguments;
    return f68;
}
f68();
for (let v80 = 0; v80 < 5; v80++) {
    function f81() {
        Math.atan(Math);
        return Math;
    }
    f81();
    %OptimizeFunctionOnNextCall(f81);
}
