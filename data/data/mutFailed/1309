const v2 = new Int8Array(5);
new Uint8Array(10);
new Int8Array(12);
const v9 = [1000000000.0,-5.0,625.7403399479574,-942.0485124766018];
const v10 = [-1e-15,3.0,-490340.0450974547,-4.681312917566405,5.0,-8.681947153988407];
let v11 = [-1e-15,0.9650050566904838,-729117.8220138293];
class C12 extends Uint8Array {
    n(a14, a15, a16, a17) {
        ({"f":a15,"length":v11,} = a17);
        a16?.[64];
        10 > Int8Array;
        try { v2.copyWithin(a15, v11, v11); } catch (e) {}
        function f23(a24) {
            const o25 = {
                3677: -128n,
            };
            return o25;
        }
        f23(-1024n)[3677];
        ("of").replaceAll("of");
        class C31 {
            constructor(a33, a34, a35) {
                class C37 extends a34.constructor {
                }
                new C37();
            }
        }
        const v39 = [];
        function f41(a42, a43, a44) {
            return a43;
        }
        class C45 extends f41 {
        }
        for (let v46 = 0; v46 < 5; v46++) {
            Object.defineProperty(C45, Float32Array, { enumerable: true, get: f41 });
        }
        Reflect.apply(a17.reverse, v9, v39);
        return v39;
    }
    static 257 = v11;
    [12] = v10;
}
new C12();
const v50 = /((((.).).).)?/gvdimy;
const v51 = /C/gudm;
let v54;
try { v54 = Uint32Array(Uint32Array, 1391, v50); } catch (e) {}
try {
    v51.dotAll = v54;
} catch(e55) {
}
new C12();
new C12();
Math.cbrt(11 - 11);
const v64 = new Float64Array(10);
v64["indexOf"](4, 4);
