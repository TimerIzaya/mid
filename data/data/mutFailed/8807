function f4() {
    function f6(a7, a8, a9, a10) {
    }
    function f11() {
        const v12 = [f11,f11,f11,f11,f11];
        class C14 extends v12.constructor {
        }
        const v15 = new C14();
        try { v15.reduce(); } catch (e) {}
        return v12;
    }
    const v18 = new Uint16Array(209);
    v18?.__lookupGetter__;
    v18?.constructor;
    const v23 = new Int8Array(1159);
    v23[1];
    return 209;
}
16 << 16;
-45317 >>> -45317;
class C29 {
    set g(a31) {
    }
}
0 < 7;
const v35 = [-45317];
let v36;
try { v36 = v35.copyWithin(6, 512); } catch (e) {}
const v38 = [[512,v35,v35,536870888]];
-1.7976931348623157e+308 >> -1.7976931348623157e+308;
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this?.__defineGetter__;
    try { new v47(-2.220446049250313e-16, a46); } catch (e) {}
    return v36;
    const v51 = new Uint16Array(536870888);
    for (const v52 of v51) {
        v52[3] = 5n;
        9007199254740991 * v52;
    }
    ~a45;
    try {
        this.h = a45;
    } catch(e56) {
    }
    try {
        this.d = a46;
    } catch(e57) {
    }
    const v59 = `
        class C60 {
        }
        const v63 = new Int8Array(1159);
        const v65 = new Uint8ClampedArray();
        const v66 = v63[1];
        const v67 = v63[2];
        try { v65["forEach"](...v67, v66, ..."forEach"); } catch (e) {}
        Uint8Array >> v59;
    `;
    const v72 = new Int16Array(16);
    try { Map.apply(v72, v72); } catch (e) {}
}
function F75(a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    a77--;
    a79 / a79;
    const v82 = this.constructor;
    try { new v82(a78, a78, a79); } catch (e) {}
}
const v84 = new F43(-2.220446049250313e-16, -2.220446049250313e-16);
const v87 = new Float64Array(216);
new Uint8Array(v87);
v84.length = v84;
new F43(-1.7976931348623157e+308, v38);
new F43(-1.7976931348623157e+308, v35);
class C94 extends Date {
}
class C95 {
}
new C95();
function f97(a98, a99) {
    Math.atan2(Math, f97);
    return f97;
}
const v102 = new C94();
v102.setUTCMinutes(1073741825, C94, C94);
v38.length = 2499;
function F105() {
    if (!new.target) { throw 'must be called with new'; }
}
const v107 = new F105();
const v108 = new F105();
const v109 = new F105();
function f110(a111, a112) {
    const o117 = {
        "b": v109,
        n(a114, a115) {
            a111(v107, a112);
            return F105;
        },
        "a": v108,
    };
    return o117;
}
f110(1073741825, f110());
%OptimizeFunctionOnNextCall(f110);
const v120 = f4();
v120.e = v120;
function F121(a123, a124, a125) {
    if (!new.target) { throw 'must be called with new'; }
}
