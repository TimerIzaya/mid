const v0 = [];
function f1() {
    return v0;
}
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try { a4.bind(this); } catch (e) {}
    try {
        this.d = f1;
    } catch(e6) {
    }
    try {
        this.a = v0;
    } catch(e7) {
    }
    try {
        this.g = f1;
    } catch(e8) {
    }
}
const v9 = new F2(f1);
const v10 = new F2(F2);
try { v10.d(); } catch (e) {}
const v12 = new F2(F2);
function f13(a14, a15) {
    a14.a;
    const o17 = {
        "g": a15,
        "d": a14,
        0: v10,
        "h": a14,
        [a15]: v9,
        __proto__: v0,
        ...a15,
        "b": v10,
        "a": a15,
        [v0]: v10,
        "c": a14,
        "e": v10,
        [f1]: a14,
        "f": a14,
    };
    return o17;
}
const v18 = F2(v12, v9);
f13(v10, v18);
const v20 = f13(v18, v12);
const v21 = v20?.constructor;
try { new v21(v20); } catch (e) {}
const v24 = [v20,v20,true,f13];
const v25 = [v10];
const v26 = v25?.filter;
try { new v26(v24); } catch (e) {}
[v10,v25];
for (let [i32, i33] = (() => {
        0 === 0;
        return [0, 10];
    })();
    (() => {
        const v34 = i32 < i33;
        v34 && v34;
        return v34;
    })();
    (() => {
        const v38 = i33--;
        v38 >= v38;
    })()) {
    const v42 = v25[v26];
    try {
        v42.c = i32;
    } catch(e43) {
        e43.h = f13;
    }
}
for (let v44 = 0; v44 < 25; v44++) {
    v44++;
    const o47 = {
        __proto__: null,
    };
}
