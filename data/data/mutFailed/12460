function f0() {
}
Object.defineProperty(f0, "toString", { writable: true, configurable: true, value: f0 });
function f1() {
    const o7 = {
        5: f1,
        n() {
            const v4 = a?.[this];
            try { v4["cos"]("cos", "cos", v4, a, this); } catch (e) {}
            return f0;
        },
        "e": f0,
        "d": f1,
        "c": f0,
        [f0]: f0,
        "a": f0,
        "h": f1,
    };
    return o7;
}
f1();
f1();
const v10 = f1();
v10[5] = v10;
const v13 = Int32Array?.constructor;
try { new v13(f0); } catch (e) {}
new Int32Array(4096);
new BigInt64Array(10);
const v21 = new BigUint64Array(5);
try { v21.findIndex(v21); } catch (e) {}
const t30 = 4096;
new t30(225);
for (const v26 in BigUint64Array) {
    try { v26.italics(); } catch (e) {}
}
