/a\w\xe2\x81\xa3a[bc]d+/gdimsy;
const v1 = /a\W/vmy;
/pabc+U8xyz{0,1}r\p{General_Category=Decimal_Number}*/vsy;
const v4 = new Date();
const v5 = [4.77281860765207,-7.939110372502345,-2.0691056008522697,7.22302160583947,1e-15,-Infinity,-2.0,0.828199632303253,1.7976931348623157e+308,-Infinity];
const v6 = [1.7976931348623157e+308];
[v1,[1.5817869849459307e+308,-1e-15,-1.0,1000000.0,8.818637126735286e+307,7.610312656147439,-4.020129714687302,7.657760244163011,1000000000.0],Date];
const v9 = [v4,v6,v5,v5];
[v9,v9,v6,v1,v9];
new Set();
(129)["delete"](839612.5677247904);
const v21 = new Float64Array(127);
(127).constructor;
new Int8Array(1073741823);
let v26 = 9223372036854775807;
v26 = v26;
1024 >>> 1024;
try { new Uint32Array(1024, Uint32Array, 127); } catch (e) {}
new Uint32Array(1024);
Float64Array.e = Float64Array;
const v35 = new Float64Array(159);
try { v35.filter(v35); } catch (e) {}
[v35];
[v21];
[Float64Array,Uint32Array,159,"delete"];
[1000000000.0,-1000.0];
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(a43); } catch (e) {}
    const v46 = this.constructor;
    try { new v46(); } catch (e) {}
    a43--;
    a43 & a43;
}
function f50(a51) {
    return a51;
}
class C52 extends Int8Array {
    [1024] = Float64Array;
    [1073741823];
}
new F41();
("29753").replaceAll("29753", "b").split("b");
("boolean").split("toString");
function f61(a62, a63, a64) {
}
function f65(a66, a67, a68, a69) {
}
const v72 = new Uint8ClampedArray(104);
v72.toLocaleString().toLocaleLowerCase();
