class C3 {
    get e() {
        this.a -= this;
        "byteOffset" << this;
        return "string";
    }
    constructor(a7) {
        const v8 = ("string")[a7];
        "byteOffset" >>> v8;
        Symbol.iterator = Symbol;
        Symbol.iterator;
        const o20 = {
            [v8]() {
                let v13 = 10;
                const o19 = {
                    next() {
                        v13--;
                        const v17 = v13 == a7;
                        const o18 = {
                            "done": v17,
                            "value": v13,
                        };
                        return o18;
                    },
                };
                return o19;
            },
        };
        const v21 = o20?.isPrototypeOf;
        try { new v21(o20); } catch (e) {}
    }
}
const v23 = new C3(C3);
const v24 = new C3(C3);
const v25 = v24?.constructor;
let v26;
try { v26 = new v25(v23); } catch (e) {}
const v27 = v26?.constructor;
try { new v27(C3); } catch (e) {}
const v29 = new C3("string");
const v30 = v29?.constructor;
try { new v30(v29); } catch (e) {}
const v32 = v29?.constructor;
v32.length;
let v34;
try { v34 = new v32(C3); } catch (e) {}
const v35 = v34?.constructor;
try { new v35(C3); } catch (e) {}
const v40 = [-284268.6699357943,C3,v29];
try { v40.toLocaleString(); } catch (e) {}
const v42 = ["byteOffset",-4.0,-4.0];
const v43 = [-284268.6699357943,v42,v42];
try { v43.reduce(C3); } catch (e) {}
const o45 = {
};
o45.a = o45;
let v46 = -128n;
v46++;
-9n * -9n;
try { o45.p(o45, ...-9n, v46); } catch (e) {}
