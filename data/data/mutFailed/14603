let v4 = -665845797;
v4--;
11664 * 11664;
try { ("stringify").replaceAll(v4, -1.675759971306812e+308); } catch (e) {}
new Int8Array(4);
2689 >> 2689;
new Uint16Array(2689);
new Float64Array(84);
try { ("symbol").blink(); } catch (e) {}
try { Int16Array.from("valueOf"); } catch (e) {}
const v26 = [Int16Array,Int16Array,Int16Array,Int16Array];
const v27 = [v26];
v27[0];
try { Map.call(2.220446049250313e-16); } catch (e) {}
class C31 extends Map {
}
try { new C31(); } catch (e) {}
const v33 = new C31();
const v34 = new C31(v27);
try { v34.set(Uint16Array, Uint16Array); } catch (e) {}
const v36 = new C31(v34);
const v40 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v42 = new Uint32Array();
const v44 = [601759695];
try { v44.reverse(); } catch (e) {}
const v46 = [1073741824,1073741823,1376142744,1073741825];
try { v46.sort(-1.468374381037114e+308); } catch (e) {}
function f49(a50, a51, a52, a53) {
    try { a50.toLocaleString(); } catch (e) {}
    const v55 = a50?.constructor;
    let v56;
    try { v56 = v55(); } catch (e) {}
    try {
    const t0 = "symbol";
    t0();
    } catch (e) {}
    const v59 = arguments.length;
    Object.defineProperty(v33, "e", { configurable: true, enumerable: true, value: f49 });
    try { ("entries").trimLeft(); } catch (e) {}
    const v62 = v34["entries"](a52, ...v36, BigUint64Array, ..."entries", a51, v59);
    Float32Array.e = Float32Array;
    new Float32Array(5, 5, v59);
    const t42 = "e";
    t42[0] = "e";
    class C66 {
    }
    class C67 {
    }
    const v69 = Symbol.toStringTag;
    v34[v69] = v69;
    function f70() {
        let v72;
        try { v72 = ("Vre").charAt(4096); } catch (e) {}
        try { v72.bold(); } catch (e) {}
        try { v72.lastIndexOf("Vre", a50); } catch (e) {}
        let v75;
        try { v75 = ("Vre").codePointAt(v40); } catch (e) {}
        v75++;
        v75 - v75;
        v75 ^ v75;
        let v79 = Float64Array;
        v79.h = v79;
        v79 = a51;
        let v80 = v40.length;
        const v81 = v80++;
        v81 - v81;
        try {
            v46.forEach(a51);
        } catch(e84) {
            e84.stack = e84;
        }
        const o102 = {
            268435439: v44,
            ..."e",
            m(a86) {
                return C67;
            },
            "c": -4294967297n,
            "EPSILON": v44,
            valueOf(a88, a89) {
                return Uint32Array;
            },
            1073741824: v42,
            "arguments": v26,
            get h() {
                return v72;
            },
            [v46](a92, a93, a94) {
            },
            [-4294967297n](a96, a97, a98, a99) {
                eval();
            },
            "arguments": 5,
        };
        return Int16Array;
    }
    const v103 = f70?.apply;
    try { new v103(v62, "e"); } catch (e) {}
    f70();
    const v107 = Array();
    let v108;
    try { v108 = v107.findLast(f49); } catch (e) {}
    v107.unshift("entries", v62, "entries", v108);
    let v111;
    try { v111 = Int8Array.of(); } catch (e) {}
    let v112;
    try { v112 = v111.join(v55); } catch (e) {}
    try { v112.includes(v62); } catch (e) {}
    const v114 = new Int8Array(v44);
    v114.c = v114;
    const v116 = v114.buffer.slice(v55);
    try { Int32Array(v116, arguments, -4294967297n); } catch (e) {}
    function f119(a120, a121, a122, a123) {
        return C66;
    }
    const v124 = new v56();
    const v125 = v124[3];
    v125 + v125;
    for (let v127 = 0; v127 < 5; v127++) {
    }
    try { v4.indexOf(f70); } catch (e) {}
    try { v46["find"](..."find", a53, ...v44, ...v46, ...522675525n); } catch (e) {}
    return v124;
}
for (let v131 = 0; v131 < 10; v131++) {
    f49(v42);
}
%OptimizeFunctionOnNextCall(f49);
f49();
