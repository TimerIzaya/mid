new Float64Array(8);
const v5 = new BigUint64Array(64);
function f6(a7) {
    const o10 = {
        "maxByteLength": 256,
    };
    const v12 = new ArrayBuffer(256, o10);
    new DataView(v12);
    return v5;
}
v5[Symbol.toPrimitive] = f6;
Uint8ClampedArray.length = Uint8ClampedArray;
const v19 = new Uint8ClampedArray(0);
try { v19.entries(); } catch (e) {}
function f21() {
    return Uint8ClampedArray;
}
for (let v22 = 0; v22 < 5; v22++) {
    function f23() {
        const v24 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
        let v25;
        try { v25 = v24.splice(64, v22, v5, v24, v24); } catch (e) {}
        v25.sinh = 8;
        %VerifyType(v19.__proto__);
        try { v25["sinh"]("sinh", f21, v22, "sinh"); } catch (e) {}
        Uint8Array.prototype;
        const v31 = new Uint8Array(v24, v22, v22);
        try { v31.reduce(Uint8Array); } catch (e) {}
        v24.length >>>= -65536;
        return -65536;
    }
    f23();
    %OptimizeFunctionOnNextCall(f23);
}
