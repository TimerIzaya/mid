new Int32Array(3618);
const v8 = new Uint8Array(222);
function f9() {
    function f10(a11) {
        const v12 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
        const v13 = v12.concat(v12);
        v13.flat(v13);
        return 222;
    }
    return f10;
}
function f15(a16) {
    function F19(a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
        const v23 = this?.constructor;
        try { new v23(this, a22); } catch (e) {}
        this.c = a21;
    }
    const v25 = new F19(18074, 28602970);
    v25.b = v25;
}
const v27 = Symbol.toPrimitive;
Object.defineProperty(v8, v27, { writable: true, enumerable: true, get: f9, set: f15 });
function f28(a29, a30, a31, a32) {
    const o33 = {
    };
    let v34 = o33.__proto__;
    v34.__lookupSetter__.length;
    a29 *= 222;
    const v42 = new Uint8ClampedArray(v34 = Int32Array);
    const v43 = v42.length;
    const v45 = ("stack").normalize();
    async function f46(a47, a48, a49, a50) {
        Object.defineProperty(v45, 0, { enumerable: true, value: v43 });
        return f46;
    }
    f46();
    return "stack";
}
const v52 = f28(f28, 222, 222, f28);
new Uint16Array(0);
const v56 = /rM9a\bc/gu;
const v57 = /34?/gvdsy;
const v60 = new Int32Array(8);
v60[3] = 9007199254740991;
/vNf\xed\xa0\x80+/gvdim;
const v63 = [0.09625845130830724,-1e-15,0.40226168662621953];
function f64(a65, a66) {
    for (let v67 = 0; v67 < 32; v67++) {
        v56["p" + v67] = v67;
    }
    return v27;
}
v63.toString = f64;
class C70 {
}
function f71() {
    switch (8) {
        case Uint16Array:
            Object.defineProperty(v57, 9, { writable: true, value: f28 });
            break;
    }
    const v73 = new Set();
    v73.add(v73);
    return v73;
}
%PrepareFunctionForOptimization(f71);
const v75 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const v76 = [-1.7976931348623157e+308,585278.7631767453,-1.0,-2.0];
const v82 = Array();
function f83(a84, a85, a86, a87) {
    const o104 = {
        [-9007199254740991]: 512,
        [v8](a89, a90, a91, a92) {
            v52 < a89;
        },
        m(a95) {
            const v98 = Int8Array();
            let v99 = 3;
            let v100 = 0;
            v100 >> v100;
            [...v99] = v98;
            v100++;
            return 1;
        },
        [a86]: v75,
        ...v82,
        "e": v82,
        "b": a84,
    };
}
f83(4294967297, f83, 4294967297, 2124);
f83(2124, v76, v63, v76);
new Uint16Array(52);
const v112 = new Uint32Array(2128);
v112.toString = Symbol;
for (let v113 = 0; v113 < 100; v113++) {
    f83(512, v112, v112, v82);
}
for (let v115 = 0; v115 < 32; v115++) {
}
