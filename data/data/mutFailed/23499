let v2 = new Uint8ClampedArray(3790);
new Uint8ClampedArray(v2, 16);
new BigInt64Array(512);
const v14 = new Float32Array(1781);
let v15 = 15;
new Int8Array(v15);
const v18 = new Float32Array(16);
new Uint8Array(249);
class C22 extends Uint8ClampedArray {
    5;
    m(a24, a25) {
        const v26 = ++a25;
        super[16];
        const v29 = [a25,512,[v14,a24],v26,16];
        [v29,v29];
        super.buffer;
        super.g = Uint8Array;
        return a24;
    }
    static #toString(a36, a37) {
        new Float32Array(a36, a36, 16);
        super[v2];
        super.length;
        v2 *= v2;
        return Float32Array;
    }
}
const v41 = new C22();
const v42 = new C22();
const v43 = new C22();
function f44(a45, a46) {
    const o54 = {
        [3790]: a45,
        get b() {
            const v48 = new C22();
            v48[1] = v48;
            super.a;
            v15 = 16;
            try {
                this.fuck(BigInt64Array, f44, /Fy\c/sy);
            } catch(e52) {
            }
            this[this] %= v2;
            %VerifyType(v48);
            try {
                v42.__proto__ = v18;
            } catch(e53) {
            }
            return 16;
        },
        "b": a46,
        8: a46,
        [Uint8ClampedArray]: v41,
    };
    return o54;
}
f44(v43, 3790);
f44(v43, v2);
f44(v43, v2);
let v59 = undefined;
const o60 = {
};
v59 = o60;
function F64(a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    const v69 = this.constructor;
    try { new v69(a66, -1000000000000.0); } catch (e) {}
    a67 % a67;
    this.a = a66;
}
new F64(2.220446049250313e-16);
const v73 = new F64();
class C74 extends F64 {
    65537 = v59;
    7 = v73;
}
new C74();
new C74();
new C74();
