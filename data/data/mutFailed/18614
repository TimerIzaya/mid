let v1 = "object";
new Uint8Array(64);
-77;
const v9 = new BigUint64Array(77);
7 / 7;
BigInt64Array.name;
const v14 = new BigInt64Array(7);
function f15(a16, a17) {
    let {"h":v18,} = a16;
    function f19() {
        return v18;
    }
    return "cbrt";
}
v14.valueOf = f15;
function f20(a21, a22, a23, a24) {
    a21 >> a21;
    try { a24.codePointAt(a24); } catch (e) {}
    const o34 = {
        "e": a23,
        3437980390: v1,
        4: a24,
        [a24](a28, a29, a30) {
            v1[v9] += 7;
            v1 = a23;
            const v31 = ("e").length;
            try {
                super.set(v31, a23, 7, v9);
            } catch(e33) {
            }
            return a21;
        },
        1239: 7,
    };
    Object.defineProperty(o34, "length", { writable: true, value: Uint8Array });
    return o34;
}
f20(77, 64, "cbrt", "cbrt");
f20(7, 64, "cbrt", "e");
const v37 = f20(7, 77, "e", "e");
Float32Array[1] = v1;
Float32Array.name;
const v40 = new Float32Array(Float32Array);
v40.valueOf = f15;
for (let v41 = 0; v41 < 25; v41++) {
    const v42 = [1073741824,1073741823,1376142744,1073741825];
    function f43(a44, a45, a46, a47) {
        a44[2] = a44;
        a45 >>> a45;
        a46 + a46;
        a47.name = a47;
        function f51() {
            return Float32Array;
        }
        try { undefined(); } catch (e) {}
        try { Int8Array.apply(Int8Array, v37); } catch (e) {}
        const v56 = new Int8Array(v40, a46, v41);
        function f57(a58, a59) {
            return v40;
        }
        f57(v42, v40);
        const v61 = v56.buffer;
        try { v61.slice(v14, v41); } catch (e) {}
        %OptimizeFunctionOnNextCall(f51);
        try { v42["find"](); } catch (e) {}
        return arguments;
    }
    f43.length = f43;
    for (let v65 = 0; v65 < 10; v65++) {
        f43(v40, v41, v65, Float32Array);
    }
}
