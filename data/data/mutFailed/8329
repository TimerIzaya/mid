[-1.1506388570539023,-9.965624664729175e+307,-3.976902341769509e+306,0.3189965473578421,102833.19655139581,1000.0,-1000000000000.0,4.192054739784638,8.089399509668912];
let v1 = [4.0,0.6053224135733024,-9.947866181317348e+307,-0.0,1.099069892903767e+308,1e-15,1000000000000.0,-1e-15,0.2781687331148781];
const v2 = [-0.8973507919791395,1e-15,0.9941091207142144,1000.0,1e-15];
function f4(a5, a6, a7) {
    return a6;
}
new Date();
function f13(a14, a15, a16, a17) {
    function f19() {
        function f20(a21) {
            v1[3810756082] = a17;
            class C22 {
                #f;
                [5];
            }
            return 118;
        }
        return f20;
    }
    function f23(a24) {
        new Uint8ClampedArray(9);
    }
    Object.defineProperty(arguments, "valueOf", { writable: true, configurable: true, get: f19, set: f23 });
    return arguments;
}
const v28 = f13(118, f13, 118, 118);
const v29 = f13(v28, f13, v28, 118);
v29.constructor = f4;
const t28 = v29.constructor;
t28(118).toExponential(v28);
const v34 = new Set();
class C35 extends Set {
    static #toString(a37, a38, a39) {
        v1 = this;
        v2 >>> a37;
        try {
            v2.__proto__ = a37;
        } catch(e41) {
        }
        return v2;
    }
    a;
    d = 64;
    b;
    static e = v34;
}
new C35();
new C35();
new C35();
new Uint16Array(1024);
new Uint8ClampedArray(7);
new Float64Array(512);
class C57 {
}
const v58 = new C57();
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = a64?.__lookupSetter__;
    try { new v66(a64, ...v66, -534568.6902183883, this); } catch (e) {}
    try {
        const v70 = new Uint16Array(3);
        v70.indexOf();
        Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
        v58.__proto__ = a64;
    } catch(e75) {
    }
    try { v66(6); } catch (e) {}
    a65[2147483648] = a65;
    const v78 = new Int8Array();
    for (const v79 in v78) {
    }
}
