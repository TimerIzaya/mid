const v2 = new Array(1016);
const v3 = [129,15,-268435456,-62629];
const v4 = [-1,-472452434,-160988677,268435439,-9007199254740990,512,-10];
const v5 = [107042740,257,-6,4294967296,-14,-2,1073741825];
-44390n % 1016;
v5["every"](Array, v4);
class C18 extends Array {
    p(a20, a21) {
        super.length;
        let v23;
        try { v23 = a21(v3, a21); } catch (e) {}
        new BigInt64Array(362);
        new BigUint64Array(9);
        new BigInt64Array(364);
        Object.defineProperty("reduce", 1, { configurable: true, enumerable: true, set: v23 });
        return 2024031600n;
    }
    n(a36, a37, a38) {
        const v39 = 2024031600n || C18;
        try {
            v39.valueOf = Array;
        } catch(e40) {
        }
        return v39;
    }
}
const v41 = new Array();
v41[3] = -536870912;
try {
    v2.__proto__ = "reduce";
} catch(e42) {
}
new C18();
new C18();
function f46(a47) {
    try { ("4096").trimRight(); } catch (e) {}
    function F49(a51) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return a47;
}
Uint8Array[Symbol.toPrimitive] = f46;
Uint8Array.toString = Array;
async function f54(a55, a56) {
    return f54;
}
f54.constructor = f54;
f54.constructor = f54;
const v57 = f54.constructor;
try { v57(Uint8Array); } catch (e) {}
