const v3 = [79027.47367845173,-2.9971324831554847e+307,-2.0,79027.47367845173];
const v4 = [v3,v3,v3,79027.47367845173,v3];
let v5 = [v4,v4];
function f6(a7, a8) {
    a8.toString = f6;
    const o15 = {
        "c": -2.9971324831554847e+307,
        [a8](a10, a11, a12, a13) {
            a11 = a12;
            v5 <<= a7;
            try {
                a8.b = a13;
            } catch(e14) {
            }
            return a13;
        },
        536870888: a8,
    };
    return o15;
}
const v16 = f6(v5, v4);
f6(v4, v4);
const v18 = f6(v4, v3);
[10];
[6,-4294967295];
[-65535,1073741824,1022384263,1,11,268435456,14,28577];
function f22() {
    const o25 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o25;
}
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    function f28() {
        function f29() {
            const v33 = new Float32Array(5);
            v33.indexOf(255);
            return this;
        }
        return f29;
    }
    function f35(a36) {
        this[this] %= a36;
    }
    Object.defineProperty(this, "constructor", { writable: true, enumerable: true, get: f28, set: f35 });
    const v37 = this?.constructor;
    try { new v37(); } catch (e) {}
}
const v39 = new F26();
const v40 = v39?.constructor;
let v41;
try { v41 = v40(); } catch (e) {}
v39.length;
const v43 = new F26();
const v44 = [v43,v43,v43,v43,v43];
const v47 = new Uint32Array(1000);
const v48 = delete v44.length;
("cbrt").toLocaleUpperCase(v41, v48);
try { v48["cbrt"](v47, Uint32Array, v39); } catch (e) {}
f22();
f22();
const v54 = f22();
Number.isNaN(NaN);
65537 >> 65537;
536870912 + 536870912;
const v66 = [-42643,-2,-327102325,-1073741824,5];
function f67(a68, a69) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
Symbol.b = v18;
class C73 {
}
const v74 = new C73();
function f75(a76, a77) {
    a76.BYTES_PER_ELEMENT = v16;
    let v78 = a76.BYTES_PER_ELEMENT;
    v78++;
    class C80 {
    }
    const v81 = C80.length;
    v81 !== v81;
    try { ("0x2I").sup(); } catch (e) {}
    class C86 {
    }
    C86.toString = f22;
    try { C86(); } catch (e) {}
    const v88 = C86?.call;
    v88.length;
    try { v88(null); } catch (e) {}
    class C91 extends C86 {
        constructor(a93, a94, a95, a96) {
        }
    }
    C91.e = C91;
    try { C91(NaN, v74, NaN, v54); } catch (e) {}
    const v98 = a77?.propertyIsEnumerable;
    try { v98(C86); } catch (e) {}
    let v100;
    try { v100 = v98(); } catch (e) {}
    class C101 {
    }
    C101.name = C101;
    try { C101.call(); } catch (e) {}
    const v103 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v103.includes(v100); } catch (e) {}
    class C105 {
    }
    try { C105(); } catch (e) {}
    try { C105.apply(1.7976931348623157e+308, f75); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C105[Symbol.replace] = v103;
    const v111 = [];
    try { v111.findLast(1.7976931348623157e+308); } catch (e) {}
    function f114(a115, a116) {
        const o117 = {
            "f": a116,
            [a115]: -12,
        };
        return o117;
    }
    f114.toString = f22;
    try { f114.toString(); } catch (e) {}
    let v119;
    try { v119 = v111.with(v111, v111); } catch (e) {}
    const v121 = new Float64Array(v111, v119);
    const v122 = new Float64Array(v121, a76, v119);
    v122.values().next();
    return v122;
}
Object.defineProperty(f75, 1, { enumerable: true, value: v16 });
f75.name;
f75.length = f75;
%PrepareFunctionForOptimization(f75);
f75(Uint16Array, v74).length;
%OptimizeFunctionOnNextCall(f75);
f75(v74, v74);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v132 = undefined;
const o133 = {
    __proto__: undefined,
};
o133.h = o133;
v132 = v66;
let v135;
try { v135 = BigInt64Array(4.0, v132); } catch (e) {}
try { v135.lastIndexOf(BigInt64Array); } catch (e) {}
