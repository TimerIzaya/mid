const v8 = new Array(128);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a12;
    } catch(e15) {
    }
    try {
        this.e = a14;
    } catch(e16) {
    }
}
new F9("5", -256n, "function", 65537n);
new F9("prototype", -256n, "5", 65537n);
const v19 = new F9("prototype", -256n, "function", 65537n);
function f20(a21, a22) {
    const v24 = [];
    function f25(a26, a27) {
        const v29 = new Uint8Array(47108);
        for (const v30 in v29) {
        }
    }
    v24.toString = f25;
    const o43 = {
        ..."5",
        [v19](a32, a33, a34) {
            let v36 = 450149850;
            Math.pow(v8, a32);
            Math.log(v36);
            Math.fround(-v36);
            v36++;
            ~a32;
            return 65537n;
        },
        "h": a22,
        "g": a22,
    };
    return o43;
}
f20(-256n, 65537n);
f20(-256n, -256n);
f20(65537n, -256n);
new BigUint64Array(2864);
let v52 = 2549;
v52--;
new BigInt64Array(v52);
try { Float32Array(v52, v52, undefined); } catch (e) {}
new Float32Array(3);
const v60 = /(J5a{0,1}?)/y;
/u?/udms;
/bf/gvms;
32 >>> 32;
let v65 = 32 + 32;
v65--;
new Uint8ClampedArray(32);
4096 & 4096;
let v72;
try { v72 = new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v75 = 1582 >> 1582;
v75--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v85 = [-54813,1582,-54813,8];
const v86 = [-54813];
const v87 = [-54813];
try { v87.map(4); } catch (e) {}
function f89(a90, a91, a92, a93) {
    try { a90.toString(); } catch (e) {}
    try { a91.groupToMap(a92); } catch (e) {}
    a92[0] = a92;
    try { a90.copyWithin(undefined, a91); } catch (e) {}
    const o105 = {
        n(a98, a99, a100, a101) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return this;
        },
        ...v87,
        "b": v85,
        ...a92,
        ...v87,
        129: 4,
        ...a90,
    };
    o105[2] = o105;
    return o105;
}
const v107 = f89(v86, 8, f89(v86, v87, v85, 4), 4);
v107[129] = v107;
const v108 = f89(v87, 4, 4, 4);
v108.d = v108;
2864 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C116 extends Map {
}
const v117 = new C116();
try { v117.get(Uint8Array); } catch (e) {}
const v119 = v117.isPrototypeOf();
v119 && v119;
v119 && v119;
Date.name;
let v125;
try { v125 = Date.parse(4); } catch (e) {}
-v125;
class C127 {
    static {
        for (let v129 = 0; v129 < 25; v129++) {
            v129 >>> v129;
            const v131 = [601759695];
            const v132 = [1073741824,1073741823,1376142744,1073741825];
            function f134(a135, a136, a137, a138) {
                try { new a138(); } catch (e) {}
                a136 & a136;
                ~a136;
                try { new a135(); } catch (e) {}
                const v143 = a137 << a137;
                v143 % v143;
                function f146() {
                }
                new v72();
                const v151 = BigUint64Array * 536870887;
                let v152 = v151 - v151;
                v152++;
                const v154 = v151 ** v151;
                try { Number.parseInt(v152, v152); } catch (e) {}
                let v157;
                try { v157 = new Number(v60); } catch (e) {}
                try { v157.valueOf(); } catch (e) {}
                Number.isNaN(v154);
                function f160(a161, a162) {
                    return Number;
                }
                try { f160(); } catch (e) {}
                v132.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f146);
                try { v132["prototype"](..."find", a138, ...v131); } catch (e) {}
                const o168 = {
                };
            }
            for (let v169 = 0; v169 < 5; v169++) {
                f134(this, v169, v169);
            }
        }
    }
}
