const v1 = new Set();
const v4 = new BigUint64Array(8);
const v7 = new BigInt64Array(227);
const o10 = {
    "maxByteLength": 3822,
};
const v12 = new SharedArrayBuffer(3822, o10);
new Float64Array(v12);
const v17 = new Float64Array(4);
[v17,v1];
const v19 = [Set];
[BigInt64Array,v19,o10,v19,227];
try {
    new BigInt64Array(v7, 64, 1000);
} catch(e24) {
}
let v25 = [-5.034735835956977e+307,-385.25474675985527];
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this.valueOf().constructor;
    function f32(a33) {
        return v4;
    }
    class C34 extends f32 {
        static #g = Float64Array;
    }
    try { new v31(); } catch (e) {}
    --v25;
    Math.imul();
}
new F26();
new F26();
