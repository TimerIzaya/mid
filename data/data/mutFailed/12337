const v2 = new Float32Array(12);
Uint8Array.h = Uint8Array;
const v5 = new Uint8Array(13);
try { Int8Array.from(12); } catch (e) {}
const v9 = new Int8Array(256);
class C10 {
    n(a12, a13) {
        v9.__proto__;
        return this;
    }
    constructor(a16, a17) {
        super.b;
        this[a17] = Int8Array;
        try {
            this.f = Int8Array;
        } catch(e19) {
        }
    }
}
new C10(Int8Array, v5);
const t20 = 12;
const v21 = new t20(v5, 256);
const v22 = new C10(v21, 256);
const v23 = v22?.hasOwnProperty;
try { new v23(12); } catch (e) {}
function f25() {
    return f25;
}
const v26 = f25?.apply;
let v27;
try { v27 = new v26(v2, 13); } catch (e) {}
class C28 extends v27 {
}
try { C28.__proto__(); } catch (e) {}
const v30 = new C28();
v30.caller = v30;
const v32 = new Date(Int8Array);
v32.setUTCMinutes(f25, v32, Date);
