const v0 = [];
new v0([6,268435440,13,1073741825]);
function f3(a4, a5) {
    const o6 = {
        __proto__: a5,
    };
    return a4;
}
function F7() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v0;
        const v9 = [-946.1982015264321,-406.6809700455609];
        const v12 = [1000.0,1000n];
        with ([v12,v12,v12]) {
            new Int32Array(v0, v9, Int32Array);
        }
    } catch(e16) {
    }
    try {
        +17469;
        const v21 = new Float64Array(5);
        const v22 = new Float64Array(v21);
        v21 ** v22;
        this.c = v0;
    } catch(e24) {
    }
}
new F7();
new F7();
const v27 = new F7();
const v32 = new BigInt64Array(0);
v32.f = 0;
new Uint8ClampedArray(127);
try { Int8Array.bind(v27); } catch (e) {}
new Int8Array(255);
170 & 170;
new Int16Array(170);
Uint16Array.d = Uint16Array;
new Uint16Array(2032);
const o48 = {
};
function f49() {
    const v52 = new Uint8Array(1010);
    const o53 = {
        268435439: Uint8Array,
        ...v52,
    };
    return o48;
}
f49.h = f49;
function f54(a55, a56) {
    try { a55(a55); } catch (e) {}
    Object.defineProperty(o48, "h", { writable: true, configurable: true, enumerable: true, get: f49, set: f49 });
    return o48;
}
try { Promise.bind(255); } catch (e) {}
new Promise(f54);
new Uint16Array(257);
new Int32Array();
