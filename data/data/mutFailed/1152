let v1 = 1;
function f3() {
    return -9007199254740992;
}
let v4 = -65536;
const v5 = v4--;
v5 >>> v5;
268435456 >>> 268435456;
268435456 + 268435456;
const v11 = -(-58329);
v11 >> v11;
class C13 {
    m(a15, a16, a17) {
        for (let v18 = 0; v18 < 100; v18++) {
            f3(C13, v18);
        }
        ({"d":v1,...v1} = a15);
        v4 = -4294967295;
        a17[1524] = v1;
        const o22 = {
            atanh() {
                return v1;
            },
        };
        return a15;
    }
    static {
        let v23 = this;
        try { v23(); } catch (e) {}
        try { Math.expm1(v5); } catch (e) {}
        let v28 = -61808;
        v28--;
        let v30 = -1000.0;
        v30 <= v30;
        const v32 = ++v23;
        const v33 = -514 >>> v28;
        const v34 = v30--;
        v34 & v34;
        v23 << v33;
        const v37 = v23 ^ v32;
        v37 >>> v37;
        -(268435456 ** v37);
    }
}
C13.name = C13;
new C13();
const v42 = new C13();
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
new C13();
function f46(a47, a48, a49) {
    a48 / a48;
    a49 && a49;
    const o52 = {
        2: a47,
        __proto__: v1,
    };
    return o52;
}
const v53 = f46(v4, v4, -9007199254740992);
v53[2] = v53;
f46(268435456, v11, 268435456);
const v55 = f46(v5, -58329, 268435456);
v55[2] = v55;
-512;
512 >> 512;
let v60 = 257;
v60--;
[-4294967297,-10290673,-1523890497];
[-2147483649,-42363,-1024,-30083,-1636953879,-8,-27684];
[831874661,512,64,-1937107293,-1759939314,10936,-9223372036854775808,9007199254740990,-10,268435456];
Int8Array.prototype = Int8Array;
const v68 = new Int8Array(-268435456);
v68.indexOf(-9);
