class C2 {
    static #m(a4) {
    }
    static #m(a6) {
    }
    static {
        delete this.g;
    }
    toString(a10, a11, a12, a13) {
        try { this["throw"](); } catch (e) {}
        const v19 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v19, eval());
    }
    constructor(a24, a25) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
        const v29 = Array(19793);
        const v30 = [v29,v29,v29,v29,v29];
        [v30,v30,v30];
    }
}
new C2(C2, C2);
class C34 {
    m(a36) {
        function f40(a41) {
            return 2.0;
        }
        class C42 extends f40 {
            #d;
            [2.0] = 2.0;
            g = 2.0;
        }
        return "toString";
    }
    1024;
}
const v43 = new C34();
const v44 = new C34();
const v45 = new C34();
[5.600712405781979e+307,2.0,v43];
class C47 {
}
for (let v48 = 0; v48 < 10; v48++) {
    const v49 = [1929306256,-35796];
    try { v49["36049"](); } catch (e) {}
}
[1,v45];
[v44,5.600712405781979e+307];
new Set();
const v59 = [-1000000.0,-1.0,952.4163692749257,41232.51719836402,-2.220446049250313e-16,869.918809614255,0.6566814488589754,-2.299816654271874,1000000000.0];
for (let v60 = 0; v60 < 5; v60++) {
    for (let v61 = 0; v61 < 5; v61++) {
        function F64(a66, a67, a68, a69) {
            if (!new.target) { throw 'must be called with new'; }
            const v70 = this.constructor;
            try { new v70(a66, a66); } catch (e) {}
            a67.isPrototypeOf();
        }
        new F64("HkAXC", "toStringTag");
    }
    function f74() {
        let v75 = -268435456;
        const v76 = v75 ^ v75;
        v75++;
        const o81 = {
            __proto__: v59,
            n(a79, a80) {
                return 11;
            },
            "h": 2.0,
            "maxByteLength": v76,
        };
        try { o81.every(); } catch (e) {}
        return v59;
    }
    f74();
    %OptimizeFunctionOnNextCall(f74);
}
