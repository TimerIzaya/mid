class C3 {
    static {
        super[257] = 8;
        try { this.p(128, 257, 8); } catch (e) {}
    }
    constructor(a7, a8) {
        super[257];
        128 - this;
        this[128];
    }
    static 952309171;
}
new C3(8, 257);
Int16Array.g = Int16Array;
function f16() {
    2156 | Int16Array;
    return -222991958;
}
new C3(8, 128);
new C3(128, 128);
/(\2)(\1)/vdim;
/a\bc*/gu;
function f22() {
}
function f23() {
    const o47 = {
        "b": f22,
        [f22]: f22,
        valueOf() {
            let v26 = -(-1e-15);
            v26--;
            const t30 = /a\Sc?/giy;
            t30.valueOf = f22;
            try {
                f22();
            } catch(e30) {
                Symbol("bZ");
                const v34 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                class C35 {
                    constructor(a37, a38, a39, a40) {
                        const v41 = this?.constructor;
                        try { new v41(v34, a39, a39); } catch (e) {}
                        a38 >>> a38;
                        0.061410412759498656 >>> 0.061410412759498656;
                    }
                }
            }
            try {
                this.valueOf = f22;
            } catch(e46) {
            }
            return f23;
        },
    };
    return o47;
}
("function").length;
const v50 = f23();
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this?.constructor;
    try { new v55(a53, a53); } catch (e) {}
    new Uint16Array(-222991958);
    const v59 = [];
    const o60 = {
        ...v59,
    };
    try {
        this.b = this;
    } catch(e61) {
    }
    try {
        this.c = a53;
    } catch(e62) {
    }
}
new F51(v50, v50);
/[\cA]/gvimy;
const v66 = [-1000000.0,1.2447871437442695e+308,2.0,-1.7099107331057683e+308,0.0];
for (let i75 = (() => {
        for (let v68 = 0; v68 < 10; v68++) {
            let v70 = -25283n && -25283n;
            v70--;
            const v72 = -25283n >> v70;
            ~v72;
            v72 | v72;
        }
        return 0;
    })();
    i75 < 1;
    i75++) {
}
function F81() {
    if (!new.target) { throw 'must be called with new'; }
    [31909n];
    class C85 {
        constructor(a87) {
            for (let v88 = 0; v88 < 5; v88++) {
                const v90 = "p" + v88;
                try { v90.matchAll(C85); } catch (e) {}
            }
        }
    }
    const v92 = this.constructor;
    let v93;
    try { v93 = new v92("constructor", "constructor", v92, v92); } catch (e) {}
    const v94 = this.valueOf(F81);
    Math.sin(-4294967295);
    new Map();
    switch (v66) {
        case "constructor":
            v94 < v93;
            break;
    }
}
new F81();
new F81();
