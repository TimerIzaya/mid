function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -15231;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
[-465539.860763951,487057.74682811345,3.0,1e-15,3.0,-1.7976931348623157e+308,1000.0];
[-Infinity];
const v9 = [813.4154378348599,751.9421739386792,-2.06865245835184,1000000.0,244.1212539985047,0.5692856086208787,-681215.6334884788,1.0,-1903.6506526464364,2.4210866591121736];
let v11 = "string";
class C13 extends F0 {
    b = v11;
    toString(a15, a16, a17) {
        const o18 = {
        };
        o18.g = v11;
        let v19 = Map;
        super.b;
        let v21 = -3;
        let v22 = 2;
        [v22,v19,,v21] = v9;
    }
    c = "number";
    constructor(a24, a25, a26, a27) {
        a27.match(a26);
    }
    #toString(a30, a31, a32, a33) {
    }
    #a;
    [v6];
    static f;
    set e(a35) {
        Math.fround();
        Math.ceil();
    }
    static #valueOf(a40, a41, a42) {
        if (v5 !== this) {
            v11 = "o";
        } else {
            const v46 = [this,F0,this,[F0,a40]];
            [null,this,v46,v46];
        }
        return a42;
    }
}
const o48 = {
};
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this.constructor;
    v53.name = v53;
    const v55 = new Int16Array();
    const v56 = v55.lastIndexOf(v55, a52);
    const v57 = v56 ^ v56;
    try { new v53(v57); } catch (e) {}
}
new C13();
const v60 = new C13();
new C13();
for (let v62 = 0; v62 < 5; v62++) {
    function f63() {
        function f64(a65, a66, a67) {
            return a67;
        }
        const o70 = {
            "type": "function",
        };
        const v71 = new Worker(f64, o70);
        v71.terminateAndWait();
        v71.terminate();
        return o70;
    }
    const v74 = v60.propertyIsEnumerable(v60);
    try { new v74(); } catch (e) {}
    function f79() {
        let v81 = 1000000000000.0;
        const v82 = v81--;
        -v82;
        class C87 {
            constructor(a89) {
                const v91 = new Float32Array();
                try { v91.entries(); } catch (e) {}
                const v93 = new Uint16Array(12, -4294967296, v82);
                new Float32Array(v93, -4294967296, 268435439, v81, v93);
            }
        }
        try { new C87(12); } catch (e) {}
        const v96 = new C87(257828.6336153492);
        const v97 = new C87();
        const v98 = new C87(-4294967296);
        const v99 = [v98,C87];
        [257828.6336153492,v98,v96,v98,v99];
        const v101 = [v98];
        class C102 extends C87 {
            [v96];
        }
        const v103 = new C102();
        const v104 = v101.constructor;
        try { v104.isArray(v101); } catch (e) {}
        class C106 extends v104 {
        }
        C106.a = C106;
        const v107 = new C106();
        const v108 = v107?.constructor;
        try { new v108(); } catch (e) {}
        Object.defineProperty(v107, 65537, { value: v97 });
        try { v103.m(v99); } catch (e) {}
        return Int32Array;
    }
    f79();
    f63();
    %OptimizeFunctionOnNextCall(f63);
}
