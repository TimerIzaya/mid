const v0 = /[k84t]/udmy;
const v1 = /1m()/usy;
v1[2] = v0;
const v2 = /PWU/gudimsy;
function f3() {
    return v2;
}
const v5 = new WeakSet();
class C7 extends f3 {
    constructor(a9, a10, a11) {
        function f12() {
            return f3;
        }
        function f13(a14) {
            new Float64Array(231);
        }
        Object.defineProperty(a9, "valueOf", { configurable: true, enumerable: true, get: f12, set: f13 });
        function f18() {
            return WeakSet;
        }
        function f19(a20) {
            new BigUint64Array(512);
            new Int32Array(4096);
            new Int16Array(8);
        }
        Object.defineProperty(a10, 2, { configurable: true, enumerable: true, get: f18, set: f19 });
        function f30(a31) {
            const v32 = new f12();
            function F33(a35, a36, a37, a38) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.c = f18;
                } catch(e39) {
                }
            }
            const v40 = new F33(F33, f19, a11, a31);
            const v41 = new F33(v40, f12, f19, v0);
            new F33(F33, v41, v32, v40);
            return WeakSet;
        }
        a11[Symbol.toPrimitive] = f30;
        super();
        a9 = this;
        ++a11 >> v0;
        a10[2];
    }
    /*
    constructor(a49, a50, a51, a52) {
        const o54 = {
        };
        gc(o54);
    }
    */
    [-2] = v0;
    [v5] = v0;
    7;
}
const v56 = new C7(C7, v2, v1);
const v57 = new C7(v1, v1, v5);
new C7(v57, v56, v2);
v1[Symbol.toPrimitive] = Date;
new Date(Date);
