const v3 = [-21637,2147483648];
const v4 = [-21637,1000,1000];
let v5;
try { v5 = (1000).reduce(-21637); } catch (e) {}
const v6 = [v4,-21637,-21637,-21637];
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a12;
    } catch(e13) {
    }
    try {
        this.e = 2147483648;
    } catch(e14) {
    }
    try {
        this.c = v6;
    } catch(e15) {
    }
}
const v16 = new F7(v6, v3, v3, v6);
const v17 = new F7(v6, 1000, v4, v16);
new F7(v6, -21637, v3, 2147483648);
class C19 extends F7 {
    static #g;
    d;
    [v3];
    m(a21, a22, a23) {
        super[a23];
        delete a22?.e;
        try {
            super.m(v3, v6);
        } catch(e27) {
        }
        return v4;
    }
    static #c;
    #f = F7;
    static #e = -21637;
}
const v28 = new C19();
v28.e = v28;
new C19();
const v30 = new C19();
v30.a = v30;
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = (-21637)?.constructor;
    try { new v36(F31, a35, -21637); } catch (e) {}
    try { v5.toString(); } catch (e) {}
    a35[0] = a35;
    try {
        this.f = a34;
    } catch(e39) {
    }
    try {
        this.c = a35;
    } catch(e40) {
    }
    try {
        this.h = v28;
    } catch(e41) {
    }
}
try { new F31(C19, C19, v17); } catch (e) {}
const v43 = new F31(C19, v6, v3);
new F31(v17, v43, v3);
new v6(v17, v6, v6);
const v46 = [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
try {
const t0 = 1073741825n;
t0(v46);
} catch (e) {}
