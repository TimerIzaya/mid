("valueOf").localeCompare();
function f4(a5, a6) {
    new SharedArrayBuffer();
    return Uint32Array;
}
Uint32Array.toString = f4;
const v10 = new Date(Uint32Array);
v10.getMonth();
new Float64Array(2);
const t9 = ("1073741824").constructor;
t9();
const v22 = new Uint8ClampedArray(4);
v22.indexOf();
new Int16Array(2570);
const v27 = new Uint16Array(1);
class C28 extends Uint16Array {
    static toString(a30, a31, a32) {
        const v33 = a31 >= a31;
        v22[-1] = 10;
        return typeof v22 != "string";
        return Int16Array & v33;
    }
    static valueOf(a40, a41, a42, a43) {
        const v44 = 1 != v27;
        const v47 = [601759695];
        const v48 = [1073741824,1073741823,1376142744,1073741825];
        function f49(a50, a51, a52, a53) {
            function f54() {
                const o58 = {
                    toString(a56, a57) {
                        return a50;
                    },
                };
                o58.toString();
                const o67 = {
                    [-4294967297n](a61, a62, a63, a64) {
                        eval();
                    },
                };
                return o67;
            }
            f54();
            try { ("").charCodeAt(Map); } catch (e) {}
            eval(a53);
            %OptimizeFunctionOnNextCall(f54);
            try { v48["find"](..."find", a53, ...v47, ...v48); } catch (e) {}
            return a52;
        }
        f49(-4294967297n, -4294967297n, 2, 2);
        f49();
        v44 ? 1 : v27;
        return v27;
    }
}
new C28();
class C84 {
}
function f85(a86, a87, a88, a89) {
    const o92 = {
        "e": "valueOf",
        ...a86,
        "d": a86,
        ["valueOf"]: a89,
        "g": 579720983,
        256: "getInt32",
        set b(a91) {
        },
        "b": a88,
        ..."valueOf",
        "f": a88,
        "c": C84,
    };
    return o92;
}
f85();
%PrepareFunctionForOptimization(f85);
new C28();
new C28();
class C96 {
}
const v97 = new C96();
function f98(a99, a100, a101, a102) {
    const v105 = new Int16Array(1269);
    for (const v106 in v105) {
    }
    const o113 = {
        valueOf(a108, a109, a110, a111) {
            const o112 = {
                [a100]: v97,
            };
            return a100;
        },
    };
    return o113;
}
const v114 = f98(C96, f98, C96, C96);
const v115 = f98();
f98(v115, v115, v114, v114);
const v120 = new BigInt64Array(9);
v120.includes(1151276981n);
