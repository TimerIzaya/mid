class C2 extends WeakSet {
    m(a4) {
        Object.defineProperty(this, 10, { writable: true, enumerable: true, value: a4 });
    }
    129;
}
const v5 = new C2();
v5.m(-9007199254740991);
for (let v8 = 0; v8 < 25; v8++) {
    v5["p" + v8] = v8;
}
new WeakMap();
try { BigInt64Array.from(BigInt64Array); } catch (e) {}
const v15 = new BigInt64Array(71);
new Float32Array(4);
Int16Array.name;
new Int16Array(4096);
const o25 = {
    ..."1p",
};
const v26 = [o25,o25,o25,o25];
function f27() {
    return v26;
}
6 | 6;
const v30 = new Int16Array(6);
const v33 = new Float64Array(3262);
try { Uint8ClampedArray.of(); } catch (e) {}
v33.then();
const v41 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
const v42 = [-1803975943,57715,-9007199254740992];
[1000.0,8.806760127177498,["undefined",8.806760127177498,v42,345168.6487633812,"undefined"],v41,v42];
new Uint8ClampedArray(115);
function f47(a48, a49) {
    const o57 = {
        __proto__: a48,
        p(a51, a52) {
            this.length;
            48752008 >>> 48752008;
            48752008 ^ v30;
            return v15;
        },
    };
    return o57;
}
f47.arguments = f47;
const v58 = f47(f47);
let v59;
try { v59 = v58.p(); } catch (e) {}
try { v59.includes(Int16Array); } catch (e) {}
