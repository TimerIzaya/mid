class C3 {
    #p(a5) {
        super.g = "-4294967297";
        new Proxy(3956);
        new WeakMap();
        function f11(a12) {
            for (let v13 = 0; v13 < 5; v13++) {
                const v14 = v13 < v13;
                class C15 {
                }
                const v16 = C15.constructor;
                try { v16(v14, v14, v13, v16, v16); } catch (e) {}
            }
            return a12;
        }
        new Uint16Array(2656);
        new Uint16Array();
        const v26 = new Uint8Array(10);
        const v29 = new Int32Array(16);
        function f33() {
            return "function";
        }
        function F34(a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            const v39 = this.constructor;
            try { new v39(this, F34, a38); } catch (e) {}
            a36.c = a36;
            const v41 = a38?.constructor;
            try { new v41(); } catch (e) {}
            this.b = a38;
        }
        const v43 = new Uint8Array(9);
        function F44(a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = v43;
            } catch(e49) {
            }
            try {
                this.e = v29;
                const v58 = new Uint8ClampedArray(16);
                v58[10] = v58;
                const v60 = -1322;
                v58["536870889"] = "536870889";
                try {
                    new Uint8ClampedArray(v26);
                } catch(e62) {
                }
                const v64 = new Uint8ClampedArray(1322);
                let v65 = v64[315];
                function F66(a68, a69, a70, a71) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.a = "536870889";
                    } catch(e72) {
                    }
                    try {
                        this.b = a71;
                    } catch(e73) {
                    }
                }
                new F66(1073741824n, 1073741824n, 257n, "6");
                const v75 = new F66(1073741824n, 257n, 257n, v60);
                const v76 = new F66(v65, 257n, 257n, "536870889");
                new BigUint64Array(6);
                3768 >>> 3768;
                const v84 = new BigInt64Array(4046);
                v84[123];
                -115;
                function f89(a90, a91) {
                    a90++;
                    a91 + a91;
                    const v94 = a90++;
                    v94 >> v94;
                    try {
                        v75.toString = a91;
                    } catch(e96) {
                    }
                    Object.defineProperty(v76, v76, { configurable: true, enumerable: true, get: f89 });
                    let o98 = {
                        "d": a90,
                        ...a90,
                        get e() {
                            return a91;
                        },
                    };
                    [,...o98] = v84;
                    a91[4046];
                    const o102 = {
                        "maxByteLength": 3035,
                    };
                    const v104 = v65--;
                    v64[v104] ||= v104;
                    try { o102.n(Int8Array, Worker); } catch (e) {}
                    new ArrayBuffer();
                    new Float32Array();
                    return 115;
                }
                ([0.021647043302781555,982.9822277058386,68.55386187204931,-3.6548181863708407e+307,0.20797002453168356,1000000.0,-569469.7761417266,-3.877892592640821,Infinity,5.0]).toLocaleString();
                const o112 = {
                };
                function F113(a115, a116, a117, a118) {
                    if (!new.target) { throw 'must be called with new'; }
                    function f122(a123, a124) {
                        const o127 = {
                            968: a124,
                            "d": a123,
                            [268435439n]: 2105444095n,
                            __proto__: o112,
                            "g": a117,
                            ...a124,
                            "b": -4294967296n,
                            "f": this,
                            valueOf(a126) {
                                return a126;
                            },
                        };
                        return a124;
                    }
                    for (let v128 = 0; v128 < 100; v128++) {
                        f122(-4294967296n, v128);
                    }
                }
                new F113();
                f89(4046, 3768);
                try { Uint8ClampedArray.bind(f89); } catch (e) {}
            } catch(e134) {
            }
        }
        new BigInt64Array(8);
        return this;
    }
}
new C3();
new C3();
class C141 {
    static {
        for (let v143 = 0; v143 < 25; v143++) {
            function f144() {
                return C141;
            }
            const v145 = [601759695];
            const v146 = [1073741824,1073741823,1376142744,1073741825];
            function f148(a149, a150, a151, a152) {
                function f154() {
                    return a149;
                }
                const v155 = f144();
                const v157 = new Int8Array();
                const v160 = new Uint32Array(4);
                [v160];
                const v164 = BigUint64Array * 536870887;
                v164 ** v164;
                function f166(a167, a168) {
                    return v155;
                }
                f166();
                const v170 = v157.buffer;
                Object.defineProperty(v170, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v170.slice(2147483648);
                %OptimizeFunctionOnNextCall(f154);
                let v175;
                try { v175 = v146["find"](..."find", a152, ...v145, ...v146, ...522675525n); } catch (e) {}
                Symbol("find");
                const v179 = new Uint8ClampedArray();
                const o180 = {
                    ...v179,
                };
                v175 <= a151;
                return arguments;
            }
            for (let v182 = 0; v182 < 5; v182++) {
                f148(this, v182, v182, v182);
            }
        }
        new Int8Array(0);
        new Uint8Array(8);
        new Int16Array(151);
    }
}
function F193() {
    if (!new.target) { throw 'must be called with new'; }
}
const v195 = [F193,F193,F193];
v195.some();
try { v195.constructor(); } catch (e) {}
new C3();
const v199 = [-1000.0,-1e-15,Infinity,-1.0,-1000000000000.0,-5.0,2.220446049250313e-16,-494158.42436940083,1e-15,-184.89737517276365];
[-1000.0,-2.220446049250313e-16];
[1000000000.0,-1000000.0,-74.03030571940337,-10.392277132594813,-786422.524001547,2.2250738585072014e-308,0.8916601523163379,NaN,-1.0,-1000000.0];
class C205 {
}
const v206 = C3 || -1000.0;
const v208 = [];
Reflect.construct(C205, v208, v206);
let v211 = -908890636;
const v213 = v199 & --v211;
([1073741824,1073741823,1376142744,1073741825]).forEach(Float64Array);
new Date(128, 1000.0);
Math.log(v213);
/a(?=bbb|bb)c+/dis;
function f222() {
    class C225 {
        #valueOf(a227, a228) {
            const v230 = WeakMap();
            "m" > v230 ? "m" : v230;
            return this;
        }
        static set f(a234) {
            const o237 = {
                "maxByteLength": 129,
            };
            SharedArrayBuffer();
            const t213 = "m";
            t213();
        }
    }
    new C225();
    class C243 {
        constructor(a245, a246) {
            const v247 = this.constructor;
            Object.defineProperty(v208, "length", { enumerable: true, value: a246 });
            v247 * "a";
            try { new v247(f222, C243, -7); } catch (e) {}
            this[-2147483648] >>>= -7;
            for (let v253 = 0; v253 < 5; v253++) {
            }
        }
    }
    new C243();
    return -7;
}
/thfv/;
/[a*?a+]/gvims;
const v257 = new C205();
const v258 = [-5.0];
function F261(a263, a264) {
    if (!new.target) { throw 'must be called with new'; }
    const v265 = this.h;
    try { new v265(v257, v258); } catch (e) {}
    a264.__proto__.valueOf();
}
new F261(-2.220446049250313e-16, 1000000000.0);
