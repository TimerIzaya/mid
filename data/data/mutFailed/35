class C2 {
    static get d() {
    }
    c;
    static #e = -1000000.0;
    4294967295;
    #a;
}
new C2();
class C5 {
}
const v8 = new Int8Array(128);
const v12 = new v8();
for (const v13 in v12) {
}
const v17 = new Int16Array(16);
v17[10] = -9007199254740992;
function f20(a21, a22, a23, a24) {
    function F25() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = 4;
        } catch(e28) {
        }
        try {
            this.f = 4;
        } catch(e29) {
        }
        try {
            this.g = 4;
        } catch(e30) {
        }
    }
    const v31 = new F25();
    class C32 {
        static 128 = v31;
        #b;
    }
    new C32();
    const o38 = {
        get h() {
            return 9007199254740990;
        },
        "e": a22,
        "e": -1000000.0,
        __proto__: -65537,
        "f": -1.6788673953326875e+307,
        "g": -0.0,
        ...a23,
        "f": a21,
        [-1.6788673953326875e+307]: 50020,
    };
    return o38;
}
f20(-65537, -65537, -4, f20(-4, -4, -65537, f20));
f20(-4, -65537, -65537, -1.6788673953326875e+307);
let v44 = [-3,2147483648,127,18127,7,5];
v44.toLocaleString();
v44 = [NaN,-1e-15];
class C48 extends Uint32Array {
}
const v50 = /(?!(a))\1*/vmy;
/k/gdsy;
v50.compile(24913);
const o54 = {
};
o54.g = "e";
o54.d = Int16Array;
new BigInt64Array(2);
new Int8Array(512);
new Int8Array(127);
try { ("p").toLocaleUpperCase(); } catch (e) {}
function f17() {
    return f17;
}
16 >> "o";
const v20 = 16 ^ 16;
v20 & v20;
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
}
([1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10]).sort();
new Set();
function f32() {
    return f32;
}
try { f32(); } catch (e) {}
f32();
-1600745002 % -1600745002;
const v39 = new Int8Array(485);
Int8Array[161];
const v41 = [-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456];
let v42;
try { v42 = v41.push(); } catch (e) {}
v42++;
const v44 = [-21059];
const v45 = v44.groupToMap;
Object.defineProperty(18392, "d", { writable: true, enumerable: true, value: "e35" });
v45.d = v45;
try { new v45(); } catch (e) {}
const v50 = [v39,v39,v39];
const v51 = [-409.5445341345936,-409.5445341345936,-409.5445341345936];
function f52(a53, a54, a55) {
    const o56 = {
        [a55]: -409.5445341345936,
    };
    return v50;
}
f52(v50, v51, 2.220446049250313e-16);
Date.parse(v45);
const v60 = Date.now();
v60 ^ v60;
const v62 = new Date();
v62.setFullYear(-409.5445341345936, 4.276454155698374, v44);
const v64 = v62.setMonth();
const v65 = v64 - v64;
v65 * v65;
