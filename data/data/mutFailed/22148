new Uint16Array(2722);
new Int8Array(3);
new Uint8Array(2434);
const o14 = {
    "c": Array,
};
const t6 = o14.c;
const v16 = new t6();
v16.forEach(Uint32Array);
(-1.4618325192014402e+308) ** -724330360;
const v20 = [1073741824,1073741823,1376142744,1073741825];
let v22;
try { v22 = v20["536870889"](); } catch (e) {}
const v24 = new v22(522);
function f25(a26) {
    Int32Array.bind();
    function F30(a32, a33) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e34) {
        }
        try {
            Math.clz32();
            new F30();
        } catch(e37) {
        }
    }
    new f25();
    const o58 = {
        "f": a26,
        ...a26,
        "d": v24,
        __proto__: Array,
        536870887: v24,
        "g": 522,
        "b": 522,
        "a": a26,
        "h": 522,
        set c(a40) {
            const v41 = a40?.h;
            const v42 = a26 >= this;
            -2147483648 ^ 8.868704382732872e+307;
            class C47 extends v41 {
                6 = String;
            }
            new C47();
            v42 ? C47 : v41;
            function f50(a51, a52) {
                return a40;
            }
            C47.constructor;
            f50.stack;
            try {
                new Array(4294967296);
            } catch(e57) {
            }
        },
    };
    return o58;
}
const v59 = f25(522);
f25(v59);
f25(f25);
for (let v62 = 0; v62 < 100; v62++) {
    Array(36862);
}
const v68 = v59.constructor;
v68.length = v68;
const v70 = new Int16Array();
async function f71(a72, a73, a74) {
    function F75(a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v79 = new F75();
    const o80 = {
        ...v79,
    };
    const v81 = v68[1];
    for (let v82 = 0; v82 < 500; v82++) {
        const v84 = new Int32Array(v82);
        let v86 = new Map();
        [...v86] = v84;
    }
    await v81;
    return v70;
}
try { ("1O6N").localeCompare("1O6N", "1O6N"); } catch (e) {}
