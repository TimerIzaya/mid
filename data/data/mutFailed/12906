const v1 = new WeakSet();
const v2 = [-8,536870888];
const v3 = [9007199254740992,-1337,61121,-1533779859,-1522288742,132668875];
const v4 = [-2147483647,16,-1312437478,-5];
class C5 extends WeakSet {
    7 = v3;
    constructor(a7) {
        super(v3);
        v1.d;
        let v9;
        try { v9 = v2.pop(); } catch (e) {}
        for (let v10 = 0; v10 < 32; v10++) {
            v9["p" + v10] = v10;
        }
    }
}
new C5(v4);
new C5(v4);
new C5(v4);
new Uint8ClampedArray(3202);
new Int8Array(255);
new Uint8ClampedArray(3338);
for (let v25 = 0; v25 < 5; v25++) {
    function f26(a27, a28, a29, a30) {
        return v25;
    }
    const v31 = f26(255, f26, v25, v25);
    const v33 = [601759695];
    const v34 = [1073741824,1073741823,1376142744,1073741825];
    function f36(a37, a38, a39, a40) {
        a38.toString();
        function f43() {
            const v45 = ("Vre")?.toLocaleUpperCase;
            try { v45(); } catch (e) {}
            try { ("Vre").fixed(); } catch (e) {}
            let v48 = -268435456;
            v48--;
            -(v48 + v48);
            const o52 = {
                "c": -4294967297n,
                "e": v48,
            };
            return o52;
        }
        f43.length;
        f43();
        const v56 = new Int8Array();
        try { v56.findIndex(v31); } catch (e) {}
        %OptimizeFunctionOnNextCall(f43);
        ("find").strike("find");
        try { v34["find"](..."find", a40, ...v33, ...v34, ...522675525n); } catch (e) {}
    }
    const v61 = f36();
    f36(v61, v31, v61, v25);
    %OptimizeFunctionOnNextCall(f36);
}
