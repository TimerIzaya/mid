[-301675.7867301005,5.620962405978275e+307];
const v4 = [290312.6181210927,-2.775716157235393,-1.6566492855334457e+308,512.5811692308196,1000000000000.0,-750674.2083180489,1000000000000.0,-757.6818230239562,203.00130319812888,0.5308912714592084];
function F5(a7, a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    const v11 = this.constructor;
    let v12;
    try { v12 = new v11(a8); } catch (e) {}
    typeof v12 === "symbol";
}
new F5();
const v17 = v4?.values;
try { new v17(); } catch (e) {}
const v19 = [-362969.87053406343];
const v21 = 128 % 128;
const v23 = new Float64Array(128);
v23[76] = v23;
try { Int8Array.bind(-41798); } catch (e) {}
let v27;
try { v27 = Int8Array.toString(); } catch (e) {}
v27[2];
const v29 = new Int8Array(1024);
v29[487] = v29;
let v30 = 5;
v30--;
new Float64Array(v30);
try { ("2147483649").trimLeft(); } catch (e) {}
let v37;
try { v37 = ("2147483649").valueOf(); } catch (e) {}
try { v37.fontsize(v21); } catch (e) {}
let v39 = 8;
class C40 {
    static #p(a42) {
        function f43(a44) {
            return a44;
        }
        class C45 extends f43 {
            constructor(a47) {
                [a47,v39] = "2147483649";
            }
            static #d = 1024;
            [v19];
            static [-1] = v39;
            static [a42];
            static 268435441;
        }
        return a42;
    }
    [0.028957958839558873];
    static 2147483648 = C40;
    static #g;
    #a;
    #toString(a49, a50, a51, a52) {
    }
    constructor(a54, a55, a56) {
        function f57(a58, a59, a60) {
            function f62(a63) {
                return a60;
            }
            %PrepareFunctionForOptimization(f62);
            return this;
        }
        Worker(f57);
    }
}
C40.length;
try { C40.apply(v23, v23); } catch (e) {}
const v70 = new C40();
const v71 = v70?.constructor;
v71.h = v71;
v71.length = v71;
let v72;
try { v72 = new v71(); } catch (e) {}
const v73 = v72?.constructor;
try { new v73(); } catch (e) {}
let v75;
try { v75 = v72.hasOwnProperty(1073741825); } catch (e) {}
!v75;
const v77 = new C40();
const v78 = v77?.constructor;
try { new v78(); } catch (e) {}
let v80;
try { v80 = v77.propertyIsEnumerable(C40); } catch (e) {}
v80 || v80;
v80 || v80;
for (const v86 of Array(19793)) {
}
const v87 = new C40();
const v88 = v87?.isPrototypeOf;
try { new v88(v39); } catch (e) {}
try { v87.constructor(); } catch (e) {}
("Vre").charAt();
("Vre").codePointAt(1024);
try {
    v77.a = Uint8Array;
} catch(e95) {
}
const v96 = /[\11]/gm;
let v97;
try { v97 = v96.test(v70); } catch (e) {}
!v97;
/(?:a*)*/gudm;
const v100 = /a(?!bbb|bb)c/vi;
v100.g = v100;
const v101 = v100?.toString;
v101.name = v101;
try { v101.toString(); } catch (e) {}
try { new v101(); } catch (e) {}
117 & 117;
117 >>> 117;
const v107 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
v107[3];
try { v107.entries(); } catch (e) {}
const v110 = [1959699296,-1,9007199254740991,9007199254740992,2147483649,-4096,-9223372036854775808];
new BigUint64Array();
([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
try { v110.lastIndexOf(1073741825); } catch (e) {}
for (const v117 in v110) {
}
for (const v118 in v107) {
    new BigInt64Array();
    function f123(a124, a125) {
        return f123;
    }
    const o127 = {
        "type": "-2",
    };
    new Worker(f123, o127);
    try { ("-2").fontsize(1024); } catch (e) {}
    const v130 = ("-2").normalize("NFKC");
    try { v130.match(v130); } catch (e) {}
}
~117;
const v134 = new Uint16Array(Uint16Array);
v134[1];
31 * 31;
const v138 = 31 | 31;
v138 >>> v138;
Int32Array.length;
new Int32Array(31);
let v145;
try { v145 = Uint32Array.toString(); } catch (e) {}
try { v145.normalize(); } catch (e) {}
new Uint32Array(128);
function f148() {
    let v150 = 1000000000000.0;
    v150--;
    const o155 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a154) {
            return a154;
        },
        ...v150,
    };
    return Int32Array;
}
%PrepareFunctionForOptimization(f148);
const v156 = f148();
let v157;
try { v157 = new v156(Int32Array, v72, v29); } catch (e) {}
v157[1] = v157;
f148();
%OptimizeFunctionOnNextCall(f148);
const v159 = f148();
v159.name;
try { new v159(v159, C40, v156); } catch (e) {}
