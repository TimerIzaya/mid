const v3 = new Uint16Array(128);
v3[36];
128 ^ 128;
new Float32Array(128);
new Int8Array(-1080038043);
try { new Uint16Array(Uint16Array, 16, Uint16Array); } catch (e) {}
const v15 = new Uint16Array(16);
try {
    const v16 = new Float32Array(128);
    try { v16.filter(v16); } catch (e) {}
} catch(e18) {
}
try {
    v15.b = Int8Array;
} catch(e19) {
}
2 ^ 2;
new Float64Array(2);
new Float32Array(257);
function f27() {
    function f29(a30) {
        return a30;
    }
    try { f29(f29); } catch (e) {}
    this.onmessage = f29;
    try {
        class C32 {
        }
        try { new C32(); } catch (e) {}
        const v34 = new C32();
        const v35 = v34?.constructor;
        try { new v35(); } catch (e) {}
        const v37 = [5];
        const v39 = [];
        const v42 = Uint8Array.apply(v37.fill, v34, v39)?.constructor;
        try { new v42(); } catch (e) {}
    } catch(e44) {
    }
    return f27;
}
const v45 = f27();
const v47 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v48 = 0; v48 < 25; v48++) {
    v47["p" + v48] = v48;
}
const v52 = [601759695];
const v53 = [1073741824,1073741823,1376142744,1073741825];
function f54(a55, a56, a57, a58) {
    function f59() {
        ("Vre")["concat"]("concat", a58);
        let v64 = String;
        v64 = a56;
        v47.length;
        try {
            v53.forEach();
        } catch(e67) {
        }
        Math.toPrimitive;
        const o74 = {
            toString(a71, a72) {
                a58 && v64;
                return this;
            },
        };
        const o75 = {
        };
        new Proxy(Uint8ClampedArray, o75);
        o74[9] = a55;
        const o83 = {
            [-4294967297n](a79, a80, a81, a82) {
            },
            ...v52,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f54;
    }
    f59();
    %OptimizeFunctionOnNextCall(f59);
    return -4294967297n;
}
for (let v85 = 0; v85 < 10; v85++) {
    f54();
}
%OptimizeFunctionOnNextCall(f54);
f54();
v45.name;
%PrepareFunctionForOptimization(f27);
f27();
%OptimizeFunctionOnNextCall(f27);
f27();
