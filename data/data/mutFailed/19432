let v0 = 48;
const v2 = new Float64Array(v0);
let {"a":v5,"b":v6,} = v2[v2];
try {
    const o7 = {
    };
    v2.set(o7);
} catch(e9) {
}
const v11 = new Uint32Array(1000);
v11[772];
const v14 = new Uint32Array(v2, v0, 1000);
v0--;
let v18 = 1258078326;
--v18;
~v18;
v14 * v18;
536870889 / v18;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
new Int16Array(5);
function f25() {
    return Uint32Array;
}
function f26() {
    return 5;
}
try { new Map(); } catch (e) {}
const v29 = new Int16Array();
try { v29.entries(); } catch (e) {}
155 >>> 155;
const o53 = {
    valueOf(a40, a41) {
        const v42 = (a43, a44, a45, a46) => {
            function F47(a49, a50, a51, a52) {
                if (!new.target) { throw 'must be called with new'; }
            }
            return Int8Array;
        };
        return 155;
    },
};
