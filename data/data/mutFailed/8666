class C3 {
    #e;
    #n(a5) {
        const o7 = {
            "execution": "sync",
        };
    }
    static #n(a9) {
        try { this(); } catch (e) {}
        let v11 = super.f;
        v11 ||= -52731;
        class C15 {
            constructor(a17, a18, a19, a20) {
                this[this] = a20;
            }
        }
        const v21 = new C15(-1.461653635104799e+308, -1.461653635104799e+308, -1.0, -5.0);
        function F22(a24, a25, a26) {
            if (!new.target) { throw 'must be called with new'; }
            const v27 = this.constructor;
            try { new v27(C15, -1.0); } catch (e) {}
            const v29 = a25.constructor;
            try { new v29(a25, v21, this, a24); } catch (e) {}
        }
        delete v11?.[256];
        super.h;
        return -52731;
    }
    536870888 = -52731;
    h;
}
function f33() {
    return f33;
}
function f34() {
    return f33 == f34;
}
%PrepareFunctionForOptimization(f34);
const v36 = new C3();
new C3();
const v38 = new C3();
const v39 = [C3];
new Uint16Array();
const v45 = new Uint32Array(3);
class C46 {
    constructor(a48, a49, a50, a51) {
        try { a50(); } catch (e) {}
        for (let i54 = 0;
            i54 < 9;
            (() => {
                const o58 = {
                };
                new Proxy(C3, o58);
                super.d;
                i54++;
            })()) {
            v45[i54] = a51;
        }
    }
    c;
}
new C46();
new C46();
[C3,v39,2147483648];
[v38,-8,v36,-8];
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v70 = 0; v70 < 1000; v70++) {
        Math.pow(-15 >> 8798, -3.0);
        const v79 = ("p" + v70).fontcolor();
        let v80;
        try { v80 = v79.trimLeft(this); } catch (e) {}
        v80[12];
    }
}
new F68();
new F68();
