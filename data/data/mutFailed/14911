let v0 = [];
function f1() {
    function f2(a3) {
        v0 += a3;
        return -65535 * -65535;
    }
    return f2;
}
function f6(a7) {
    --v0;
}
Object.defineProperty(v0, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f1, set: f6 });
Uint16Array[1] = 9;
new Uint16Array(9);
try { new Int16Array(Uint16Array, v0, 129); } catch (e) {}
const v17 = new Int16Array(129);
let v18;
try { v18 = v17.indexOf(v17); } catch (e) {}
const v21 = new Uint8ClampedArray(4);
function f22() {
    return f6;
}
Object.defineProperty(v21, "toString", { writable: true, configurable: true, get: f22 });
let v23 = 35888;
v23 / v23;
const v25 = v23--;
-8 | -8;
const v29 = -(-8);
const v30 = [-65535,406094985];
const v31 = [-17291,1886,-9007199254740992,857,2,13,14,-1,536870912];
try { v31.reduce(Uint8ClampedArray); } catch (e) {}
let v33;
try { v33 = v31.toSpliced(1073741824, 1073741824); } catch (e) {}
v33.g = v18;
v33.g = v33;
const v34 = [4096,-1286614374,64,-1091506598,-985243739,10000,-1];
const v35 = /a{12,3b*/gm;
v35[Symbol.toPrimitive] = f6;
v35.d = v35;
const v38 = /4(x)(x)(x)\3/gudi;
new Map();
new Map();
function f45(a46, a47, a48, a49) {
    const o50 = {
    };
    o50.length = o50;
    return o50;
}
const v51 = f45("string", "m");
const v52 = f45("m", "m");
v52.length = 1073741824;
let v55 = 129;
v55++;
new Float32Array(v55);
try { new BigInt64Array(v52, 16, Map); } catch (e) {}
new BigInt64Array();
~-4294967297n;
const v66 = [601759695];
try { v66.sort(); } catch (e) {}
[1073741824,1073741823,1376142744,1073741825];
function f69(a70, a71, a72, a73) {
    function f75() {
        -(-268435456 + -268435456);
    }
    f75();
    const v81 = new Int8Array();
    v81.buffer;
    %OptimizeFunctionOnNextCall(f75);
    try { ("find").strike(); } catch (e) {}
    try {
    } catch(e85) {
    }
    const o86 = {
    };
    o86.g = -4294967297n;
    const o87 = {
    };
    o87.d = v0;
    o87.g = -4294967297n;
    o87.d = v51;
}
f69();
%PrepareFunctionForOptimization(f69);
f69();
%OptimizeFunctionOnNextCall(f69);
f69();
try { v38.compile(v21, v21); } catch (e) {}
v38.dotAll = v38;
let v92;
try { v92 = v38.test(v35); } catch (e) {}
const v93 = /(q()n)/guimsy;
v93.toString = f1;
v93.f = v93;
v93.lastIndex = v93;
const v94 = [v93];
v94[Symbol.toPrimitive] = f45;
try { v94.reduce(v94); } catch (e) {}
const v98 = [v94,v30,v31,v93,v31];
try { v98.toSorted(v92); } catch (e) {}
const v100 = [v31];
v100[0] = v100;
function f101(a102, a103) {
    let v104;
    try { v104 = a102.push(a102); } catch (e) {}
    v104 >>> v104;
    try { a102.map(v31); } catch (e) {}
    const o124 = {
        "g": a103,
        n(a108, a109, a110, a111) {
            function f112() {
                const v115 = new Uint16Array(231);
                new Int8Array(v115);
                return a102;
            }
            a109[Symbol.toPrimitive] = f112;
            const v120 = [v94,a111,this];
            const v122 = [a102,a109,[v120,v120,a111],this,a103];
            v122.b = a111;
            super.f = a102;
            var d = v34;
            try {
                v122.b = a110;
            } catch(e123) {
            }
            return a102;
        },
        [v38]: v31,
        __proto__: v35,
    };
    return o124;
}
f101.toString = f45;
f101(v34, v93);
const v126 = f101(v98, v93);
try { v126.n(Uint8ClampedArray, v31, Int16Array, v126); } catch (e) {}
const v128 = f101(v30, v38);
try { v128.compile(v93, v25); } catch (e) {}
Object.defineProperty(Date, "toString", { writable: true, configurable: true, enumerable: true, value: f6 });
let v131;
try { v131 = new Date(v35, v0, v93, v93, v0, Date, f101); } catch (e) {}
const v132 = v131?.setTime;
try { new v132(v31); } catch (e) {}
let v134;
try { v134 = Date.now(); } catch (e) {}
v134 > v134;
const v136 = new Date(v98, v38);
try { v136.toTimeString(); } catch (e) {}
let v138;
try { v138 = v136.toDateString(); } catch (e) {}
let v139;
try { v139 = v138.fontcolor(v138); } catch (e) {}
try { v139.substring(-8, -8); } catch (e) {}
let v142 = 128;
v142--;
function f144() {
    const o198 = {
        next() {
        },
        m(a148) {
            let v147 = this;
            try { v147.next(); } catch (e) {}
            try { a148.valueOf(); } catch (e) {}
            try { a148.next(); } catch (e) {}
            a148.g = a148;
            const o152 = {
            };
            o152.c = o152;
            function f153(a154, a155, a156) {
            }
            try {
            } catch(e157) {
            }
            try {
                const o158 = {
                };
                o158.unscopables = o158;
            } catch(e159) {
            }
            let v161;
            try { v161 = Math.cos(a148); } catch (e) {}
            v161++;
            let v163;
            try { v163 = Math.expm1(); } catch (e) {}
            const v164 = ~v163;
            --v163;
            let v166 = -9007199254740991;
            v166--;
            v166++;
            const v169 = v166 >> 1.7047100695894155e+308;
            v169 <= v169;
            class C171 {
            }
            try { C171.apply(-65535, v128); } catch (e) {}
            const v173 = C171?.constructor;
            let v174;
            try { v174 = new v173(v38); } catch (e) {}
            const v175 = v174?.apply;
            try { new v175(v164, v29); } catch (e) {}
            let v177;
            try { v177 = new C171(); } catch (e) {}
            const v178 = v177?.constructor;
            try { new v178(); } catch (e) {}
            const v180 = v177?.constructor;
            try { new v180(); } catch (e) {}
            const v183 = C171.name.codePointAt();
            v183 * v183;
            3938 >>> 3938;
            let v187 = 3938 - 3938;
            v187--;
            const v190 = new Int8Array(3938);
            v190[3177];
            let v192 = 3;
            const v193 = v147++;
            v193 >> v193;
            [...v192] = v190;
            const o195 = {
            };
            function f196(a197) {
                Object.defineProperty(v128, v169, { writable: true, configurable: true, get: Symbol, set: f153 });
            }
            Object.defineProperty(o195, "c", { configurable: true, enumerable: true, set: f196 });
            o195.c = o195;
        },
    };
    o198.toString = f1;
    try { o198.next(); } catch (e) {}
    try { o198.next(); } catch (e) {}
    o198.m(o198);
}
f144();
