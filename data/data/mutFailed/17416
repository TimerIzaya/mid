const v12 = [1.0663730977141727e+308,NaN,-1.1534060997380896e+308,-9.26829361922416e+307];
let v15 = ["function",/xEz\xe2\x81\xa3/gumy];
function f16(a17) {
    function f18() {
        return f18;
    }
    const v19 = [f18,f18,f18,f18];
    v19.flatMap(f18);
    return v19;
}
v15[Symbol.toPrimitive] = f16;
class C23 {
}
const v24 = new C23();
ReferenceError(v24);
const v27 = [0.3588640203078587,-1e-15,0.5938791097479088,-1000000000.0];
const v28 = v12.constructor;
v28[Symbol.toPrimitive] = Symbol;
function f31(a32, a33) {
    return Math.tanh(-2.2250738585072014e-308);
}
%PrepareFunctionForOptimization(f31);
const v37 = [5.453486096719857];
function F38(a40) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = f31;
    try { this.push(F38); } catch (e) {}
    try {
        this.d = a40;
    } catch(e42) {
        let v44 = new Date();
        v44 **= v44;
    }
}
new F38(v12);
new F38(v27);
const v48 = new F38(v37);
Object.defineProperty(v48, "a", { configurable: true, value: -1310044746 });
v48.a = v48;
v15++;
const o53 = {
};
Math.cos(-1567809689);
256 === 256;
Uint16Array[1] = v28;
const v60 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v60);
function f63() {
}
class C64 extends f63 {
}
new f63();
function f67(a68, a69) {
    const o70 = {
    };
    return o70;
}
const v71 = new Set();
function F72(a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = f67;
    try {
        const o81 = {
            o(a77) {
                const o79 = {
                };
                return o79(o79);
            },
        };
        this.d = a74;
    } catch(e82) {
        for (let [v83,v84] of a74) {
        }
    }
    const t74 = 4294967296;
    t74.h = v71;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v91 = [WeakSet];
        const v92 = new F72();
        this.b = v91;
        const v94 = new Map();
        v91[4294967296] = Set;
        const v95 = [v92];
        const v96 = [v95,v95,v92,v95];
        [-256n,v96,-41535,v94,v96];
    } catch(e98) {
    }
}
F72.arguments;
new F72();
const v102 = [-0.23549034038133065];
function f103(a104) {
    const v105 = [-268435456,2,9007199254740992,0];
    const v106 = [2147483649,1024,-128,-256];
    v106["join"](...v105, ...v106);
}
Object.defineProperty(v102, "then", { configurable: true, enumerable: true, set: f103 });
v102.then = Date;
async function f109(a110, a111, a112, a113) {
    return await v102;
}
f109();
new Float64Array(1073741824);
