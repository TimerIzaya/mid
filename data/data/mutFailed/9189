const v1 = new Set();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v1;
    } catch(e5) {
        const v8 = [601759695];
        const v9 = [1073741824,1073741823,1376142744,1073741825];
        function f10(a11, a12, a13, a14) {
            function f15() {
                const o19 = {
                    toString(a17, a18) {
                        return a11;
                    },
                };
                o19.toString();
                const o28 = {
                    [a14](a22, a23, a24, a25) {
                        a23();
                    },
                };
                return o28;
            }
            a13();
            try { ("").charCodeAt(Map); } catch (e) {}
            eval(a14);
            %OptimizeFunctionOnNextCall(f15);
            try { v9["find"](..."find", a14, ...v8, ...v9); } catch (e) {}
            return a13;
        }
    }
    try {
        this.g = Set;
    } catch(e36) {
    }
    function F38(a40, a41) {
        if (!new.target) { throw 'must be called with new'; }
        const v42 = this.constructor;
        try { new v42("-268435456"); } catch (e) {}
        a40.prototype;
    }
    try {
        this.c = Set;
        function f46() {
            eval("");
            return -128;
        }
    } catch(e50) {
    }
}
const v51 = new F2(Set);
const v52 = new F2(Set);
new F2(Set);
class C54 extends F2 {
    10 = v52;
    p(a56, a57, a58, a59) {
        let v60;
        try { v60 = new a56(a56, this, a58); } catch (e) {}
        [891351.7498323463,1000000000.0,-1.0,-888175.6554961524,0.8718005510207083];
        [-6.910419865160533e+307,2.2250738585072014e-308,6.537684429706439e+307,1.1833571177235216e+308,0.36423902043392165];
        [0.17599055956781495,-207.05756765110368,-Infinity,-Infinity,-1.0,1000000000.0];
        return v60;
    }
    3622927351;
    static [Set] = Set;
    static [v1] = v51;
    #a;
}
new C54();
new v52();
new C54();
gc();
