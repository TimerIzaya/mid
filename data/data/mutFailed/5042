const v7 = [Uint8Array,0];
const o8 = {
    "arguments": v7,
    "type": "function",
};
~-4294967295;
Symbol.toPrimitive;
const v14 = /(?:a*)+q(?<a>.)/guds;
function f15(a16) {
    a16.hasIndices = a16;
    new Uint8Array(v7);
    new Int32Array(Int32Array);
    function F23(a25, a26, a27) {
        if (!new.target) { throw 'must be called with new'; }
        a25--;
        a27 / a27;
        const v30 = this.constructor;
        try { new v30(a26, a26, a27); } catch (e) {}
    }
    new F23(0, F23, 4);
    a16?.constructor.lastParen;
    const o38 = {
        set b(a36) {
        },
        get d() {
            return this;
        },
    };
    return o38;
}
f15(v14);
const o43 = {
    "maxByteLength": 1000,
};
const v44 = new ArrayBuffer(1, o43);
new BigUint64Array(v44);
const v48 = /0j/vds;
let v49;
try { v49 = v48.compile("Di0", "Di0"); } catch (e) {}
function F50() {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = [8n] > 8n;
const v58 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v60 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v61 = [601759695];
const v62 = [1073741824,1073741823,1376142744,1073741825];
function f64() {
    let v67 = Float64Array;
    v67 = v44;
    b = v61;
    v58.length;
    try {
        v62.forEach(v67);
    } catch(e70) {
    }
    const v71 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    const v73 = Symbol.toPrimitive;
    const o80 = {
        toString(a75, a76) {
            const v77 = v57 && v67;
            function f78() {
                a75 *= v73;
                return v67;
            }
            return v77 <= v71;
        },
    };
    const o101 = {
        "c": -4294967297n,
        [522675525n](a83, a84) {
        },
        "c": v61,
        valueOf(a86, a87) {
            return this;
        },
        "b": -4294967295,
        [-4294967297n](a89, a90, a91, a92) {
            [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
        },
        "e": -4294967295,
        "e": -268435456,
        "maxByteLength": -4294967295,
        "arguments": v60,
        ...v61,
        "type": "Vre",
        ..."Vre",
        valueOf(a95, a96) {
            return a96;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        "type": "Vre",
        toString(a98, a99, a100) {
        },
        5: -4294967295,
        6: -268435456,
    };
}
%OptimizeFunctionOnNextCall(f64);
[1000000000000.0,-3.0,1.7976931348623157e+308,0.6000533971555821];
const t102 = [256,-4294967297,536870912,-8,255,-2670];
t102.length = -62875;
for (const v109 of "-4294967295") {
}
[1e-15,0.5177026852191892,-763237.7765964074,0.779379559110098];
try { v14.exec(v49); } catch (e) {}
const v112 = -62875 << -82404.784027313;
for (let v113 = 0; v113 < 100; v113++) {
    f15(v112);
}
[3.0];
const v120 = new Uint8ClampedArray(4096);
[v120];
new Int8Array([[]]);
function F126(a128) {
    if (!new.target) { throw 'must be called with new'; }
    const v129 = this?.constructor;
    try { new v129(); } catch (e) {}
    try {
        function f131(a132, a133, a134) {
            'use strict';
            return a132;
        }
        let v135 = "function";
        function f136() {
            return v135;
        }
        const v139 = "size" && "undefined";
        with ("undefined") {
            length = v139;
            ({"length":v135,} = "isExtensible");
            f136();
        }
        this.f = 145253519;
    } catch(e141) {
    }
}
const v142 = /h\p{gc=Nd}/vdy;
function F145(a147, a148, a149, a150) {
    if (!new.target) { throw 'must be called with new'; }
}
const v151 = new F145(v142, F145, -23596, 1);
v151 | F145;
const v153 = new F126();
new F126(v153);
const o156 = {
};
o156.execution;
gc();
