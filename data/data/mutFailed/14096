let v1 = -570573671;
let v2 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f3(a4, a5, a6, a7) {
    new Uint8ClampedArray(2664);
    a5[0] = "asIntN" / "number";
    for (let [i18, i19] = (() => {
            0 + 0;
            -10;
            return [0, 10];
        })();
        i19 === i19, i18 < i19;
        i18 >> i18, v2--) {
        for (let v28 = 0; v28 < 25; v28++) {
            const v29 = v2.constructor;
            try { new v29("asIntN"); } catch (e) {}
            v29(v29)[0];
        }
    }
    return 2664;
}
for (let v33 = 0; v33 < 10; v33++) {
    v33 ^ v33;
    f3();
    v1--;
}
%OptimizeFunctionOnNextCall(f3);
f3();
2144308791 + 2144308791;
class C40 {
    toString(a42, a43) {
        this[6] = -1872314696;
        for (let v44 = 0; v44 < 6; v44++) {
            for (let v45 = 0; v45 < 32; v45++) {
                a42["p" + v45] = v45;
            }
        }
        return a43;
    }
    #d;
    g;
    static [2144308791] = v1;
}
const v48 = new C40();
new C40();
const v50 = new C40();
function f51() {
    return v50;
}
const v54 = ("sin")?.toLocaleUpperCase;
try { new v54(); } catch (e) {}
function f57(a58, a59, a60) {
    const v61 = a59?.replaceAll;
    try { new v61(f51, f51); } catch (e) {}
    const o69 = {
        ..."symbol",
        "d": 2144308791,
        [2144308791]: v48,
        "a": f51,
        "f": f51,
        "b": v50,
        __proto__: C40,
        "c": a58,
        [f51](a64, a65, a66) {
            let v63 = this;
            new C40();
            delete C40[a58];
            Object.defineProperty(C40, "c", { writable: true, enumerable: true, get: f51 });
            v63 &= v63;
            return a59;
        },
        "a": a59,
        "f": -1872314696,
        "e": 2144308791,
        "c": v48,
    };
    return o69;
}
f57("setUTCMinutes", "setUTCMinutes", "sin");
f57("sin", "sin", "setUTCMinutes");
f57("sin", "symbol", "symbol");
const o76 = {
    "execution": "async",
    "type": "minor",
};
gc(o76);
class C79 {
}
const t87 = (41).constructor;
const v81 = t87(41);
v81 >> v81;
v81.toExponential(C79);
