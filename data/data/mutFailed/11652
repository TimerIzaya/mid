const v0 = /458?/dms;
const v1 = /(?:a{5,1000000}){3,1000000}/gvi;
const v2 = /[Y]/gdim;
const v4 = v2[v1];
let v5;
try { v5 = new v4(v1, v4); } catch (e) {}
v4["exec"](v5);
const v12 = Math.sin(-8.932596882098945);
const v13 = Math.tanh(v4);
Math.clz32(v1);
236 > 236;
try { Uint32Array.apply(v0, Uint32Array); } catch (e) {}
new Uint32Array(236);
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 236;
    } catch(e25) {
    }
    try {
        this.f = 482805131;
    } catch(e26) {
    }
}
const t24 = 236;
new t24(v1, 9, v2);
new F20(v0, 7, v0);
new F20(v2, v12, v13);
Int32Array.name;
const v32 = new Int32Array(9);
const v35 = new BigUint64Array(10);
try { new Uint8ClampedArray(v2, v35, v32); } catch (e) {}
const v39 = new Uint8ClampedArray(798);
Int16Array.from(v39);
try { v2.at(Uint8ClampedArray); } catch (e) {}
