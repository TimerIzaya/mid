const v1 = new Date();
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v1;
    } catch(e8) {
    }
    try {
        this.e = v1;
        for (let v9 = 0; v9 < 25; v9++) {
            "p" + v9;
        }
        function F12() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 268435440;
        }
    } catch(e15) {
    }
    try {
        this.g = v1;
    } catch(e16) {
        class C21 {
        }
        const v23 = ([315.3838771878211,0.8321654879979539,1.0,-813011.8421276518]).__proto__;
        try { v23.findLastIndex(v1); } catch (e) {}
        new Set();
    }
}
const v26 = new F5(-6210);
const v27 = new F5(3);
const v28 = new F5(3);
class C29 {
    536870912 = v26;
    constructor(a31, a32, a33, a34) {
        try {
            v26.f = a33;
            const v37 = new BigInt64Array(2255);
            try { Uint16Array.from(v37); } catch (e) {}
        } catch(e40) {
        }
        -293119312 instanceof F5;
    }
    [3] = v27;
    static 1000;
}
new C29(v26, v28, 3, v26);
new C29(v27, v26, 3, C29);
new C29(v26, 3, -6210, v26);
("deleteProperty").replace("deleteProperty");
const o48 = {
};
class C49 {
    toString(a51, a52, a53, a54) {
        try { this["throw"](); } catch (e) {}
        const v60 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v60, eval());
    }
    constructor(a65, a66) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
let v68;
try { v68 = Float32Array.bind(); } catch (e) {}
v68.length.call();
const v72 = new Map();
const o76 = {
    set d(a74) {
        v72.delete();
    },
};
gc();
