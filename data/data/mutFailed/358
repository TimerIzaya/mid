let v4 = "function";
const v6 = ["-65537"];
const v7 = [65536n,v6,"string",v6,v6];
const v8 = [v7,-536870912n,v7,v6];
const v9 = [65536,4294967297,-231322162,-29408,51669,4294967297];
const v10 = [1000,256,-65536,127,5,-1188452092,709163537,-65535,-9007199254740991];
[16,-16,1220633130];
class C12 {
    static o(a14, a15, a16, a17) {
        "string" << 65536n;
        let v19 = "-65537" < -536870912n;
        v4 /= "-65537";
        try { a16(Math, Math); } catch (e) {}
        v8 | 16;
        Math.log10("-65537");
        const v28 = Math.sinh(10000);
        this + v7;
        3 | 3;
        const v32 = ~3;
        v19--;
        v32 >> 65536n;
        return v28;
    }
    #b = 56675n;
    [v10] = "string";
    static 256;
}
new C12();
const t28 = v10 !== 65536n ? v10 : 65536n;
delete t28?.h;
[257,2049558403,-2147483649,5,-1467009719,5,417352794,-5];
[9,4096,2];
[2,-268435456,-10];
new C12();
new C12();
function f47(a48) {
    const o49 = {
        3677: -128n,
    };
    return o49;
}
const v50 = f47(-1024n);
const v51 = v50[3677];
const v52 = f47();
const v53 = f47(-1024n);
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    const v60 = this?.constructor;
    try { new v60(this, a59, a59, this); } catch (e) {}
    C12[3677];
    a58 << a58;
    a59.e = a59;
    try {
        this.e = a56;
    } catch(e64) {
    }
    try {
        this.d = f47;
    } catch(e65) {
    }
}
new F54(v52, v52, -128n, F54);
const v67 = new F54(v50, v53, -1024n, v50);
const v68 = new F54(v53, v50, -9223372036854775807n, v50);
try {
    v67.fuck(v68, v51, 1073741823);
} catch(e72) {
}
try { Set.apply(v67, -1024n); } catch (e) {}
const v74 = new v9();
v74.entries();
