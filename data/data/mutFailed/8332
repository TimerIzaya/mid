function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 45367;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
new Array(1);
new Int16Array(10);
new Float32Array(2358);
new Int8Array(256);
class C22 {
    toString(a24, a25) {
        super.g = "-9223372036854775808";
        let v29 = 15;
        v29--;
        new Int16Array(v29);
        new Uint8ClampedArray(6);
        new Int16Array(3699);
        "2147483649" == "2147483649";
        class C43 {
            static #p(a45) {
                function f46(a47) {
                    return a47;
                }
                class C48 extends f46 {
                    static [-1] = 8;
                    static [a45];
                    static 268435441;
                }
                const v49 = [];
                const v51 = /[a-zA-Z0-9]/gvisy;
                const v52 = /abc?/gvmy;
                v52[-2] ^= v51;
                v52.exec("Q8F");
                const t37 = "Q8F";
                t37[2078209647] = v49;
                return a45;
            }
            [0.028957958839558873];
            static {
                for (let v58 = 0; v58 < 32; v58++) {
                }
            }
            static 2147483648 = C43;
            static #g;
            #a;
        }
        function f60() {
            const o62 = {
            };
            return gc(o62);
        }
        C43[Symbol.toPrimitive] = f60;
        try { C43(); } catch (e) {}
        const v67 = new C43();
        v67.constructor = f60;
        try { BigInt64Array(BigInt64Array); } catch (e) {}
        function F71(a73) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a73;
        }
        const v74 = new F71(-2);
        with (v74) {
            h = Uint16Array;
        }
        const v76 = v67?.constructor;
        v76[Symbol.toPrimitive] = f60;
        let v79;
        try { v79 = new v76(); } catch (e) {}
        const v80 = v79?.constructor;
        try { new v80(); } catch (e) {}
        const v82 = new C43();
        let v83;
        try { v83 = v82.propertyIsEnumerable(C43); } catch (e) {}
        !v83;
        new C43();
        /[\11]/gm.flags;
        /(?:a*)*/gudm;
        const v89 = /a(?!bbb|bb)c/vi;
        v89.toString = Symbol;
        const v90 = v89?.toString;
        try { new v90(); } catch (e) {}
        [4096];
        const o97 = {
            "execution": "async",
            "type": "minor",
        };
        ~117;
        Uint16Array[0] = v76;
        const v100 = new Uint16Array(Uint16Array);
        let v101 = v100[1];
        v101--;
        Int32Array.name;
        new Int32Array(31);
        let v109;
        try { v109 = Uint32Array.toString(); } catch (e) {}
        try { v109.small(); } catch (e) {}
        const v111 = new Uint32Array(128);
        v111[72];
        function f113() {
            3.4890473589784586e+307 > 3.4890473589784586e+307;
            let v116 = 1000000000000.0;
            v116--;
            257828.6336153492 - 257828.6336153492;
            -4294967296 >> -4294967296;
            class C123 {
                static #m(a125) {
                }
                constructor(a127) {
                    function f128() {
                        return 9007199254740992;
                    }
                    Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f128 });
                    const v129 = this?.__defineSetter__;
                    try { new v129(22227, 22227); } catch (e) {}
                    new Float32Array();
                    try { Uint16Array.apply(Uint16Array, "2147483649"); } catch (e) {}
                    const v135 = new Uint16Array();
                    const v136 = new Float32Array(v135, -4294967296, a127);
                    v136.f = v136;
                }
            }
            const v137 = new C123(C123);
            v137.g = v137;
            const v138 = new C123(C123);
            v138.length = -4294967296;
            v138.length;
            const v140 = new C123(-4294967296);
            const v141 = [v140,C123];
            [257828.6336153492,v140,v137,v140,v141];
            const v143 = [v140];
            class C144 extends C123 {
                [v137];
                #n(a146, a147, a148, a149) {
                    function f150() {
                    }
                }
            }
            C144.name = C144;
            const v151 = new C144();
            class C153 extends v143.constructor {
            }
            try { v151.m(v141); } catch (e) {}
            const o157 = {
                "e": Uint16Array,
                o(a156) {
                },
                ...v116,
            };
            return Int32Array;
        }
        try { f113.bind(-7); } catch (e) {}
        %PrepareFunctionForOptimization(f113);
        f113();
        f113();
        %OptimizeFunctionOnNextCall(f113);
        const v161 = f113();
        v161.prototype = v161;
    }
    n(a163) {
    }
}
const v164 = new C22();
function f165(a166, a167, a168) {
}
const v169 = /(?: foo )/vdm;
const v170 = /zP/gud;
v164 > "-9223372036854775808";
Object.defineProperty(v164, 129, { configurable: true, set: f165 });
v169.__proto__ = v170;
Object.defineProperty(v170, "source", { configurable: true, enumerable: true, get: f165, set: f165 });
const o175 = {
    "execution": "async",
    "type": "major",
};
gc(o175);
