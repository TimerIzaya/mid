const v3 = [2.0,-6.960023737052075e+307,-4.0,8.029794072582337,7.746552816432569,-1.1185662281427522,1.0,-817058.1432225703,-2.220446049250313e-16,-3.0983960340303662];
const v4 = [-3.0,-602137.6017503033,-1000.0,-1000.0,0.03362828502937343,1.0,0.12829138745343527,0.18584278384725883,-1.7976931348623157e+308];
const v5 = [0.9641255517341948,-5.0,-4.0,0.9671808891640824,-Infinity,2.0];
[v5,v5,"Zk",[v5,v3,v3,v4]];
const v8 = ["c"];
const v9 = v8?.filter;
try { new v9(v5); } catch (e) {}
v8[0];
[-6.819033539819608,0.578258588738105,-1.0,2.6610888729370394,-1.0,1.6622362787374243,-4.0643465955814947e+307,-2.2250738585072014e-308,-0.0,-Infinity];
[-2.2441334953208347,-1000000.0,-1000.0];
[0.0,-926335.0212635193,2.2250738585072014e-308,NaN];
const v16 = new Uint8Array(Uint8Array);
function f17(a18, a19, a20, a21) {
    const v22 = a20++;
    v22 & v22;
    const v24 = ++a20;
    v24 / v24;
    const v26 = v24 - v24;
    try { Number.isNaN(v16); } catch (e) {}
    Number.isNaN(v26);
    let v30 = v24 * v24;
    -v30;
    const v32 = v30--;
    const o34 = {
        get d() {
            return Number;
        },
    };
    v32 % v32;
    const v36 = a20 || a20;
    v36 / v36;
    const v38 = v36 + v36;
    v38 >> v38;
    const o40 = {
        ...v16,
    };
    o40[2] = o40;
    (10).toFixed(10);
    class C44 extends Uint32Array {
        static {
            this.length = this;
            try { eval.bind(this); } catch (e) {}
            eval(C44);
        }
    }
    try { C44.apply(v32, Uint32Array); } catch (e) {}
    const v50 = o40[1];
    v50 >> v50;
    v50 * v50;
    o40[2] = o40;
    const v53 = o40[2];
    v53[2];
    let v55 = v53[1];
    v55 / v55;
    v55--;
    return v55;
}
f17.caller = f17;
for (let v58 = 0; v58 < 500; v58++) {
    -f17();
}
