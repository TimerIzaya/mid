new Array(5);
new BigInt64Array(257);
const v11 = new BigInt64Array(1590);
new BigInt64Array(9);
function f18() {
    return -2147483648;
}
function F19(a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v11;
    } catch(e22) {
    }
}
new F19();
const t15 = -2147483648;
new t15(-2147483648);
[7,-2147483647,268435456,9007199254740991,-4096];
[268435441,268435439];
new Uint16Array(-2147483648);
const o36 = {
    "execution": -2147483648,
};
gc(o36);
let v0 = 2147483648n;
const v3 = [-4.0,-2.2250738585072014e-308,-765197.015522522,-1.0,198398.92370344675,61920.114995772485,Infinity];
let v4 = [206.2916870271772,-2.2250738585072014e-308];
const v5 = [-5.0,-0.0,-7.028336586956381,0.4253704171971935];
try { v5.groupToMap(v0); } catch (e) {}
class C7 {
    p(a9, a10) {
        if (64n !== v4) {
            -v4;
            try {
                v0 |= 64n;
            } catch(e13) {
            }
        } else {
            try {
                v4 = v5;
            } catch(e14) {
            }
        }
        return v4;
    }
}
const v15 = new C7();
const v16 = v15?.constructor;
try { new v16(); } catch (e) {}
const v18 = new C7();
const v19 = new C7();
[v5,v4,v3,v18];
[v18,v15,C7,v3];
[v4,v4,v18,v4];
function f23() {
    const o27 = {
        get b() {
            this.a = v19;
            try {
                super[this] = -8.233575780020734;
            } catch(e26) {
                e26.h = e26;
            }
            return this;
        },
    };
    try { new Symbol(); } catch (e) {}
    const v30 = Symbol.toPrimitive;
    const v32 = v30.description;
    v32.for(v32);
    o27[v30] = f23;
    return o27;
}
f23.arguments = f23;
const v34 = v0();
const o35 = {
    ...v34,
};
