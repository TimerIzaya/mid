class C3 {
    [-4] = 994905073;
    e = 9007199254740991;
    sort(a5) {
        this[28590.811815908644] = -1.0;
        const v9 = this[2325327350];
        try { v9["setHours"](9007199254740991, -4, -4, this, 994905073); } catch (e) {}
        return 9007199254740991;
    }
    #c;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
v14.e = v14;
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(C3, C3, a21); } catch (e) {}
    -a21;
    this.h = 498.38653541943745;
    try {
        this.multiline = a20;
    } catch(e26) {
    }
    try {
        this.NEGATIVE_INFINITY = C3;
    } catch(e27) {
    }
}
const v28 = new F18(0.5710386895351905, 9007199254740991, v12);
v28.length;
new F18(498.38653541943745, 9007199254740991, v13);
const v31 = new F18(Infinity, 994905073, v12);
v31.length;
function f33() {
    const v34 = [f33,f33,f33,f33,f33,F18];
    function f35() {
        class C37 extends Float64Array {
        }
        try { new C37(); } catch (e) {}
        return Float64Array;
    }
    v34.source = f35;
    class C40 extends v34.b {
    }
    const v41 = new C40();
    v41.c = v41;
    try { v41.reduce(); } catch (e) {}
    return v34;
}
%PrepareFunctionForOptimization(f33);
f33();
%OptimizeFunctionOnNextCall(f33);
f33();
