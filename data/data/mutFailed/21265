function f2() {
}
class C3 extends f2 {
}
const v4 = new C3();
function f5() {
    const v8 = Array(4087);
    v8[351] = v4;
    for (const v9 of v8) {
        function f11(a12) {
            return Uint8ClampedArray;
        }
        try {
            Array.c = Array;
        } catch(e13) {
        }
    }
    return Array;
}
f5();
const v15 = new v4();
const v16 = new v4();
const v19 = new Int32Array(v4, 129, 129);
const v21 = new BigInt64Array(129);
const v22 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v23;
try { v23 = v22.some(); } catch (e) {}
const v24 = [-1.7976931348623157e+308];
function f25(a26, a27, a28, a29) {
    const o43 = {
        toString(a31, a32, a33) {
            let v34;
            try { v34 = this.toString(a32, v23, a31); } catch (e) {}
            function f36(a37, a38, a39) {
                return v15 == v16 ? v15 : v16;
            }
            f36(255n, v34);
            a28[a27] = a26;
            return v23;
        },
    };
    return o43;
}
const v44 = f25(v21, 129, v24);
f25(v19, 129, v22) % v44;
f5();
new Uint8ClampedArray(1024);
const v51 = new Int32Array(3);
try {
    v51.length = 2499;
} catch(e53) {
}
for (const v57 of v15()) {
}
[0.3083488057663979,0.3083488057663979,0.3083488057663979];
new Int8Array(2191);
new Float64Array(1073741824);
class C67 {
}
const v68 = new C67();
const v69 = new C67();
const v70 = [v69,v68];
function F71(a73, a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    a73.unshift(v68);
}
new F71(v70);
const v84 = new Uint8Array(165);
const v85 = v84.constructor;
let v86;
try { v86 = new v85(v85, "multiline"); } catch (e) {}
typeof v86;
new Uint8ClampedArray();
function f89(a90, a91, a92, a93) {
    return f89.arguments;
}
v84.lastIndexOf();
