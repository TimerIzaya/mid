[];
for (let i6 = 0, i7 = 10;
    (() => {
        const v8 = i6 < i7;
        const v11 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
        v11[3] = v11;
        let v12 = 3375;
        const v13 = v12++;
        v13 / v13;
        const v15 = new BigUint64Array(v12);
        let [v16,,v17,...v18] = v15;
        return v8;
    })();
    i6++) {
}
let v28 = 5;
new BigInt64Array(v28);
new Uint16Array(210);
new Uint16Array(2642);
function f37() {
    const v39 = [8n,8n,8n,8n];
    const v40 = v39 > 8n;
    for (let v42 = 0; v42 < 5; v42++) {
        Array(36862);
    }
    while ((() => {
            function f46(a47) {
            }
            const v49 = new Int16Array(Int16Array, Int16Array, Int16Array);
            const v50 = v49["split"]();
            function f51() {
                return v50;
            }
            return 0 < 0;
        })()) {
        for (let v54 = 0; v54 < 5; v54++) {
            "n" + v54;
            v39.toExponential(16);
            function F59() {
                if (!new.target) { throw 'must be called with new'; }
                const v63 = new Uint8Array(1024);
                v63.join(1024).strike().match();
                for (let v67 = 0; v67 < 250; v67++) {
                    class C69 extends Date {
                    }
                    const v74 = ("p" + v67).fontcolor(Date, this).trimLeft()[12];
                    ("p")[v74.substring(this, this, v74, v74)];
                }
            }
        }
        v28++;
    }
    return v40;
}
[1024];
function f80(a81, a82, a83, a84) {
    ("find").substr(a82);
    return a81;
}
%OptimizeFunctionOnNextCall(f80);
new f37();
const o90 = {
    "maxByteLength": 201,
};
new SharedArrayBuffer(0, o90);
%PrepareFunctionForOptimization(f37);
f37();
%OptimizeFunctionOnNextCall(f37);
f37();
