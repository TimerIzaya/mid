[268435441,4,128,5,-128,-4294967297,-8,-1984392661];
[268435439,-1820964678];
[255,-256,268435456,4294967295];
const v6 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f7() {
    return v6;
}
class C8 extends f7 {
    a;
}
function f10() {
    const o13 = {
        __proto__: -4n,
        ..."Vre",
    };
    o13.length;
    return ("D")[0].substring();
}
function f23() {
    return f7;
}
class C24 {
}
for (let i26 = 0;
    (() => {
        new Float32Array(Float32Array, Float32Array);
        try {
            C24.length = 2499;
        } catch(e31) {
        }
        return i26 < 9;
    })();
    i26++) {
    const o39 = {
        "execution": "sync",
        "type": d,
    };
    gc(o39);
}
class C41 {
}
const v42 = new C41();
function f44(a45, a46, a47, a48) {
    for (let v49 = 0; v49 < 5; v49++) {
        try { new C24(v42, v49, Float32Array, ...v49); } catch (e) {}
    }
}
f44(512, C41, 512, 512);
/nfoo|(bar|baz)|quux[a.a\qVk[\cZ]]/di;
function f54() {
    return f54;
}
function f58(a59, a60, a61) {
    return a61;
}
[f58,4294967297,,];
const o65 = {
    "arguments": d,
    "type": v42,
};
new Worker(f58, o65);
const o68 = {
    "maxByteLength": 10,
};
const v70 = new ArrayBuffer(10, o68);
new Uint8ClampedArray(v70);
const v75 = 10 ^ 10;
Math.tan(~10 >>> v75);
class C79 {
}
const v80 = new C79();
const v81 = v80.constructor;
let v82;
try { v82 = v81(v81, C8); } catch (e) {}
function f83() {
    const v85 = ("D")[0];
    try { v85.substring(v82); } catch (e) {}
    return v82;
}
%PrepareFunctionForOptimization(f23);
