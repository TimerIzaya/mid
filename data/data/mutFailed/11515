let v1 = "growable";
class C3 {
    static {
        const o8 = {
            "execution": "5nb",
            "type": "minor",
        };
        gc(o8);
    }
    static ["5nb"];
}
new C3();
new C3();
const v12 = new C3();
function f13(a14, a15) {
    const o17 = {
        ...this,
    };
    return a15;
}
v12.valueOf = f13;
new Set();
function f23() {
    const o44 = {
        valueOf(a28) {
            let v29;
            try { v29 = ("split").padEnd(a28, a28); } catch (e) {}
            function f30(a31, a32) {
                v29.g = f23;
                return v12;
            }
            try {
            } catch(e33) {
                const v35 = Symbol.isConcatSpreadable;
                try { e33(v35); } catch (e) {}
            }
            function f43() {
                return a28;
            }
            return f23;
        },
    };
    return f23;
}
if ("5nb" != v12) {
    /foo|(bar|baz)|quuxa{0,1}?/gdmsy;
    /\u0060/gvdim;
    /^xxx$/vdsy;
} else {
}
f23();
const v53 = f23();
const v54 = f23();
const v58 = -v12;
f23();
++v1;
v58[v58];
c = 536870888;
const v62 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10[Ca\nb\bc?]/vim;
v62.toString = v54;
v62 ^ v12;
try {
    new v53();
} catch(e65) {
}
try {
    v54.length = 10000;
} catch(e67) {
}
