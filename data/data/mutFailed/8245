function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 1920961870;
    } catch(e3) {
    }
    try {
        this.d = 1920961870;
    } catch(e4) {
    }
}
const v5 = new F0();
let v6 = new F0();
const v7 = new F0();
function f8() {
    return v6;
}
const v9 = /vUT\xf0\x9f\x92\xa9/gimsy;
const v10 = /([\00011]C(?:a?)*)/;
const v11 = /xyz{1,32}?H3T+/guim;
class C12 extends F0 {
    #f = v10;
    212 = v10;
    static toString(a14, a15, a16, a17) {
        try {
            a17.#f = this;
            Math.atan2(v9, v9);
            function f20() {
                59817n < undefined;
                return f20;
            }
        } catch(e24) {
        }
        function f26(a27, a28) {
            let [v30,v31,,...v32] = arguments;
            return 48680;
        }
        v10 <= a14 ? v10 : a14;
        v9 * v5;
        try {
            this.fuck(v5, 664);
        } catch(e38) {
        }
        return F0;
    }
    static 33;
    #c;
    #d = F0;
    [v9] = F0;
}
const v39 = new C12();
new C12();
const v41 = new C12();
class C42 extends f8 {
    static #g = v5;
    constructor(a44, a45) {
        super(v9, a45, a44);
        const v46 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
        const o63 = {
            [null]() {
                for (let v49 = 0; v49 < 500; v49++) {
                    const v52 = new Float32Array();
                    v52["copyWithin"](..."-11838");
                    const o62 = {
                        __proto__: "-11838",
                        ...v46,
                        [v46]: null,
                        valueOf() {
                            return [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                        },
                        "arguments": v46,
                        ...v46,
                        1: v49,
                        get d() {
                            return this;
                        },
                        [v46](a59, a60, a61) {
                        },
                        ...v49,
                    };
                }
            },
        };
        super[a44];
        const v65 = f8();
        try { v65.concat(v65, v41, a44, f8, v65); } catch (e) {}
        11 - 11;
        function f69() {
            return f69;
        }
        const v70 = [1.4598948242971485e+307,5.0,202.50817195072136];
        Object.defineProperty(v70, v70, { enumerable: true, set: f69 });
    }
    static {
        v7.c;
        v6 = this;
        Math.LOG10E = Math;
        new Float64Array(1073741825);
    }
    static 4294967295;
    static [v39];
}
new C42(v11, v11);
new C42(v6, v10);
new C42(v10, v10);
[0.3917692554960539,-674906.0645804916];
[7.924379118654414,8.971532815660825e+306];
[155533.8602852358,2.0];
1000000000.0 & 1000000000.0;
let v88 = 1.394021134332674e+308;
v88++;
-1.340075496624941e+308 - -1.340075496624941e+308;
const v96 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
try { v96.pop(); } catch (e) {}
const v98 = [-1e-15,9.330767979388325e+307,-4.60104484756231e+307,-660449.2774246833,1000000.0,1000.0,-5.0];
v98[5] = v98;
[-7.672768111123561e+307,-1000000000000.0];
function F100() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function F104() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v106 = f8.arguments;
        Symbol.hasInstance.toString();
        class C111 {
            static #m(a113) {
            }
            set d(a115) {
                this.#m();
            }
            constructor(a118) {
                function f119() {
                    return this;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f119 });
            }
        }
        Array(36862, v106).reverse();
        const v123 = Array(19793);
        for (const v124 of v123) {
        }
        const v125 = [v123,v123,v123,v123,v123];
        const v126 = [v125,v125,v125];
        [v126,v126,v7];
    } catch(e129) {
        return v96;
        new Uint32Array(2240);
        new Int32Array(46);
        new Float32Array(3223);
        [e129,this,null];
    }
}
const v143 = new F100();
const v144 = v143?.h;
try { new v144(15); } catch (e) {}
new F100();
