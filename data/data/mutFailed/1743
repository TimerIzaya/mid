const v0 = [536870889,268435456,4,-8,1073741823,1330524410,64986,129];
const v1 = [-46645,-13214,15,15795,11,-7];
function f2(a3) {
    Object.defineProperty(a3, a3, { writable: true, value: a3 });
    const v7 = new Uint8ClampedArray(303);
    Object.defineProperty(v7, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
    return v1;
}
v1.toString = f2;
const v8 = [-1024,536870912,839637553,9007199254740991,-7,255,127];
const v10 = new WeakSet();
try { v10.add(v10); } catch (e) {}
const v12 = [1e-15,-1000000000000.0,0.48995162628788624,1.0,1.7165015318413282e+308,-3.984293733195252];
const v13 = [5.0,1000000000.0,5.554494309937439,-1000000.0,-262268.113647019,-5.022633194439232,0.8983874952993445,-200.80678652851793,0.0,-0.0];
v13[Symbol.toPrimitive] = f2;
try { v13.toString(); } catch (e) {}
const v17 = [638.4859745048411];
class C18 extends WeakSet {
    static get c() {
        let v22 = ~-1211316686;
        v22++;
        this || this;
        v1 >>> v1;
        -WeakSet;
        return v13;
    }
    static 1543 = v12;
    [v1] = v8;
    [v13] = v12;
    static #c;
}
new C18();
const v28 = new C18();
try { v28.delete(v17); } catch (e) {}
new C18();
function f31(a32, a33, a34, a35) {
    Object.defineProperty(a32, "toString", { writable: true, value: f31 });
    function f36(a37, a38) {
        new Set();
        return a32;
    }
    a34.toString = f36;
    try { a32.copyWithin(v8, f31); } catch (e) {}
    a34[3] = a34;
    try { a35.flatMap(a35); } catch (e) {}
    const o71 = {
        [v13]: WeakSet,
        set b(a44) {
            let v46;
            try { v46 = C18["toString"](a34, v17, a34, "toString"); } catch (e) {}
            const v47 = [this,this];
            [a34,v8,v47,[v47,a33,v47,a33],v46];
        },
        4: v12,
        toString(a51, a52, a53, a54) {
            function f55(a56, a57) {
                function f59(a60) {
                    const o64 = {
                        "execution": "async",
                        "type": "minor",
                    };
                    gc(o64);
                }
                this.onmessage = f59;
                a56 = v8;
            }
            const v68 = [a54,C18];
            const o69 = {
                "arguments": v68,
                "type": "function",
            };
            new Worker(f55, o69);
            return Worker;
        },
    };
    return o71;
}
f31(v17, v8, v0, v17);
f31(v8, v0, v13, v8);
f31(v1, v1, v13, v13);
Object.defineProperty(Uint8ClampedArray, 0, { value: v28 });
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
Uint8ClampedArray[1] = 14;
new Float32Array(Uint8ClampedArray);
