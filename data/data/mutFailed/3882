[9.138550210009171,NaN,-2.2250738585072014e-308,-734.3221794618253,0.1899037514049262,7.958573197648099e+306,0.43604111546256696,Infinity,4.0];
[888725.8740448265,-3.0,-0.0];
[Infinity,-1e-15,2.220446049250313e-16,-1e-15,0.18557610286912274,-3.0,9.668397341319533,-1.2037360093764082e+308,4.0,NaN];
class C9 {
    static set f(a11) {
        const o12 = {
        };
        try {
            o12.b = -796957027;
        } catch(e13) {
        }
        try {
            const o14 = {
            };
            o14.b = -796957027;
            o14.f = 38917;
        } catch(e15) {
        }
        try {
            const o16 = {
            };
            o16.b = -796957027;
            o16.f = 38917;
            o16.g = this;
        } catch(e17) {
        }
        try {
            const o18 = {
            };
            o18.b = -796957027;
            o18.f = 38917;
            o18.g = a11;
        } catch(e19) {
        }
    }
}
new C9();
new C9();
new C9();
[3.836595330454784e+307,-1.1402235194805368e+308];
const v24 = [991.721527488573,-290835.2265090322];
[-1.0,-1000000.0,-6.453134415503834e+307,-2.2250738585072014e-308,1e-15,-228003.00463890494,1.9400411482062907,-197.7029619198281,Infinity];
const v27 = new WeakMap();
const v32 = ("-1723624938").slice(9, "g").normalize();
try { v32.substring(v24, WeakMap); } catch (e) {}
class C34 {
    constructor(a36, a37) {
        a37.sup(v32, "-1723624938").toLocaleLowerCase();
    }
}
[v24,v27];
[v27];
[v24,v27];
try { C34.pop(); } catch (e) {}
const v44 = /(x)(x)(x)\1/uis;
function f45(a46, a47, a48, a49) {
    const o56 = {
        4294967295: a46,
        [v44](a51, a52, a53, a54) {
            super.test();
        },
    };
    return a47;
}
-8298n <= -8298n;
8.438590633230234e+306 / 8.438590633230234e+306;
const t64 = [-936145422,536870912,127,257,-36772,-15984,2];
t64.length = 6;
const v67 = [];
function f68() {
    const o72 = {
        toString() {
            super[this];
            return this;
        },
        ...v67,
        n() {
            return this;
        },
    };
}
const t81 = -7n;
t81();
f68();
gc.caller;
function f77() {
    function f78(a79) {
        try {
            const o80 = {
            };
        } catch(e81) {
        }
    }
    try {
    } catch(e82) {
    }
}
gc();
const v86 = new Uint8Array(165);
const v87 = v86.lastIndexOf();
v87 | v87;
const v90 = (a91, a92, a93, a94) => {
    function F95(a97, a98, a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
};
try { v90(Uint8Array, v87, v87, 8.438590633230234e+306); } catch (e) {}
