function f0() {
}
function F2(a4, a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
}
function F7() {
    if (!new.target) { throw 'must be called with new'; }
    class C9 {
    }
    for (let v10 = 0; v10 < 5; v10++) {
        const v11 = v10 + v10;
        function f12() {
            const v13 = f12 % C9;
            new F2(v13, v11, v13);
            for (const v18 of Array(4087)) {
            }
            return f12;
        }
        f12();
    }
}
class C25 extends f0 {
    constructor(a27, a28, a29) {
        const v32 = new Float32Array(2);
        const v33 = v32;
        class C35 extends Array {
        }
        super();
        this["11"] **= a27;
        function F36(a38, a39) {
            if (!new.target) { throw 'must be called with new'; }
        }
        ([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(2, -27205);
        new BigInt64Array(129);
        eval();
        const o49 = {
        };
        -719.6662441520621 !== o49;
        new Int8Array(1796);
        new Int16Array(2);
    }
}
new C25(9007199254740991n, "11", 15n);
const v59 = new Uint8ClampedArray();
v59 ^ 3;
let v62 = 0;
do {
    const o66 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o66);
    v62++;
} while (v62 < 2)
new C25(9007199254740991n, "11", 9007199254740991n);
new C25(9007199254740991n, "h", 9007199254740991n);
("h").split(65535);
