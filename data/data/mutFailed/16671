const v0 = [1801784456,536870887];
const v1 = [15,-58975,4294967296];
const v2 = [1073741824,48217,129];
function f3(a4, a5) {
    new f3(a4, v2);
    try {
        a5.valueOf = f3;
    } catch(e7) {
    }
    a4.g = a4;
    try { a4.reduce(v0); } catch (e) {}
    const o18 = {
        "b": a4,
        set e(a10) {
            const o13 = {
                "maxByteLength": 8,
            };
            const v15 = new SharedArrayBuffer(4, o13);
            new Uint32Array(v15);
        },
        "h": a4,
        "g": v1,
        ...v1,
    };
    const v19 = o18[2];
    v19 % v19;
    return o18;
}
const v21 = f3(v2, v2);
v21.h = v21;
const v22 = f3(v0, v1);
v22.g = v22;
v22[1];
const v24 = v22[0];
-v24;
const v26 = f3(v1, v1);
const v27 = [9223372036854775807,1000,18220,4,-65537,-12,257,63989,15];
let v28;
try { v28 = v27.slice(v0, v24); } catch (e) {}
const v29 = v28?.constructor;
try { new v29(v26); } catch (e) {}
v27[8] = v27;
[-2];
const v32 = [-1458185998,-6048,-4,3,-12,128,512,-4294967297,9223372036854775807];
try { v32.map(v27); } catch (e) {}
-4294967296 !== -4294967296;
const v36 = -(-4294967296);
v36 / v36;
let v39 = 16;
v39 & v39;
v39++;
-11 % -11;
~(7 / 7);
const v48 = 7 !== 7;
v48 && v48;
const v50 = [];
try { v50.findLast(v48); } catch (e) {}
class C52 {
}
C52.length = C52;
const v53 = new C52();
const v54 = v53?.__defineGetter__;
try { new v54(v26, v39); } catch (e) {}
const v56 = v53?.constructor;
try { new v56(); } catch (e) {}
try { new v56(); } catch (e) {}
const v59 = v53?.constructor;
try { new v59(); } catch (e) {}
const v61 = v59.name;
try { v61.italics(); } catch (e) {}
let v63;
try { v63 = new v59(); } catch (e) {}
const v64 = v63?.constructor;
try { new v64(); } catch (e) {}
const v66 = v63?.constructor;
try { new v66(); } catch (e) {}
function F68(a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
    const v73 = a70?.constructor;
    let v74;
    try { v74 = new v73(); } catch (e) {}
    const v75 = v74?.constructor;
    try { new v75(); } catch (e) {}
    try { a71.findLast(a70); } catch (e) {}
    const v78 = a70?.__lookupGetter__;
    try { new v78(F68); } catch (e) {}
    try { a71.findLast(7); } catch (e) {}
    this.c = a71;
}
const v81 = new F68(v53, v50);
function f82(a83, a84) {
    return a84;
}
const v87 = [v81];
v87[0];
const o89 = {
    "arguments": v87,
    "type": "function",
};
new Worker(f82, o89);
