let v1 = 10;
const o7 = {
    next() {
        v1--;
        const v5 = v1 == 0;
        const o6 = {
            "done": v5,
            "value": v1,
        };
        return o6;
    },
};
gc(256);
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = this.constructor;
    let v19;
    try { v19 = new v18(v18, a17); } catch (e) {}
    new Float32Array(165);
    for (const v23 in this) {
    }
    const v24 = typeof v19;
    const o26 = {
    };
    v24 === "symbol";
}
/[^(?<a>)n]/udiy;
/t(?:ab|cde)\p{Nd}Pa(?=b)*/udi;
/(?:a{5,1000000}){3,1000000}1k/vmy;
const v38 = [];
function f39() {
    -v38;
    return f39;
}
%OptimizeFunctionOnNextCall(f39);
function f41() {
    return f41;
}
Date.d = Date;
const t39 = Date.d;
new t39(Date, f41, 2.220446049250313e-16);
f39();
