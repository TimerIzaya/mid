const v2 = new Float32Array(7);
const v5 = /a$\P{Decimal_Number}/gvdims;
const v6 = v5[v5];
for (let i = 0; i < 5; i++) {
    const v7 = v5.source;
    try { v6(true, v7, v7, v7); } catch (e) {}
    Math.log(true + true);
}
function f13() {
    function f14(a15, a16) {
        return true;
    }
    return f14;
}
function f20(a21) {
    ([])["indexOf"](v2, Uint8ClampedArray);
}
Object.defineProperty(Int8Array, "toString", { writable: true, get: f13, set: f20 });
const v26 = new Int8Array(52);
Math.log1p(0.04879611221991542);
new Int32Array([64,-6,-60026,-9]);
const v35 = new Float32Array(3);
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.__lookupSetter__;
    try { new v40(this); } catch (e) {}
    a38--;
}
class C43 {
    static #m(a45, a46, a47) {
        (v26 && this).a;
        try {
            this.#m(this);
        } catch(e51) {
        }
        return a45;
    }
    6 = v35;
    b = Float32Array;
    static #g;
    [Int8Array];
    [52];
}
const v52 = new C43();
new C43();
new C43();
function f55(a56, a57) {
    const o94 = {
        "a": v2,
        ...v35,
        "f": v52,
        o(a59, a60) {
            let v62 = 4294967295;
            Math.asinh(v62);
            ++v62;
            Math.sin(v62);
            -9007199254740991 >>> -9007199254740991;
            const v70 = Array(Array);
            for (let v71 = 0; v71 < 5; v71++) {
                const v72 = v71 || v70;
                v72 ** v72;
            }
            v2 && -2147483648;
            Math.asinh(v2);
            const v77 = new Date(Date);
            v77.getDay();
            function f79(a80, a81, a82, a83) {
                const v85 = new Float32Array(2);
                v85[1] = v85;
                const v87 = new Int32Array();
                const v88 = v85;
                v87.fill();
            }
            for (let v90 = 0; v90 < 625; v90++) {
                f79();
            }
            let v92 = ~v62;
            return v92++;
        },
    };
    return o94;
}
f55(52, 52);
f55(3, 3);
f55(7, 3);
class C98 {
    o(a100, a101, a102, a103) {
    }
}
function F104(a106, a107, a108) {
    if (!new.target) { throw 'must be called with new'; }
    const v109 = this.constructor;
    try { new v109(); } catch (e) {}
    a106 % a106;
}
new F104();
new F104();
