function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this.constructor;
    try { new v6(this); } catch (e) {}
    a5++;
    this.g = a4;
}
const v9 = new F2();
const v10 = v9.constructor;
class C12 {
    get g() {
        var b = NaN;
        try { this.freeze(this, 3.792926074162112e+307, -1.3950302189044592, 3.792926074162112e+307, this); } catch (e) {}
        return -1.3950302189044592;
    }
    static {
        super.e = -1.3950302189044592;
        let v16;
        try { v16 = this.trim(); } catch (e) {}
        const o17 = {
        };
        const v18 = [];
        [v18];
        const v21 = Symbol.toPrimitive;
        function f22() {
            return f22;
        }
        const o24 = {
            [f22]() {
            },
        };
        [o24];
        const o27 = {
            [v21]() {
            },
        };
        try {
            o17.b = this;
        } catch(e28) {
        }
        try {
            const o29 = {
            };
            o29.b = this;
            o29.h = this;
            const o31 = {
                4294967296: 1733353236,
            };
            const o33 = {
                get h() {
                    return o31;
                },
                ...o31,
            };
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.b = this;
            o35.h = this;
            o35.e = -1.3950302189044592;
        } catch(e36) {
        }
        try {
            const o37 = {
                ...v9,
                "e": Symbol,
                ...v21,
                [v10]: v18,
                "d": 3.792926074162112e+307,
            };
            o37.b = this;
            o37.h = this;
            o37.e = v16;
        } catch(e38) {
        }
    }
}
new C12();
const v40 = new C12();
new C12();
const v45 = new Float32Array(9);
new Int8Array(v45);
new Uint8Array(64);
new Uint8Array(129, v40, C12);
new parseInt(1);
function* f65(a66, a67, a68, a69) {
    return a67;
}
class C70 {
}
const v71 = new C70();
const v72 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o73 = {
};
const v75 = new Proxy(v72, o73);
v75[7] = v71;
