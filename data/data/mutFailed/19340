let v0 = 4;
new Uint16Array(v0);
const v5 = new Float32Array(402);
new Int16Array(2778);
class C9 extends Int16Array {
    8;
    toString(a11, a12, a13, a14) {
        const v15 = this[3];
        v0 >>= a14;
        return v15;
    }
    7 = Float32Array;
    a = v5;
    [2778];
    p(a17, a18, a19, a20) {
        super.subarray(402);
        return ("g").normalize("NFKD");
    }
    static #f = 2778;
}
new C9();
new C9();
new C9();
try { ("imul").padEnd(1073741824); } catch (e) {}
gc(128n);
[256,-226375137,-4096,-9007199254740991,-1,-2,-6];
[2147483647,-642530021,1786934080,65535,65535,-1024,14,1445415583,1958088553,0];
class C44 {
    m(a46, a47) {
        super[a47];
        a47?.[11];
        return 5.0;
    }
    constructor(a51) {
        class C52 {
            static [11] = this;
            static d = 11;
            static [this] = this;
        }
        new C52();
        new C52();
        new C52();
    }
}
[2058213111,536870889,-13,-1244150048,1761453201,16,-2147483649,10000,-5,9];
new WeakMap();
function F59(a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
}
function f64() {
    class C65 {
    }
    for (let v66 = 0; v66 < 5; v66++) {
    }
}
class C67 {
    constructor(a69, a70) {
        for (const v71 in this) {
        }
    }
}
f64();
