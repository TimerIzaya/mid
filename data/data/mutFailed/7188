class C5 {
    constructor(a7, a8) {
        -63523 >= 127 ? -63523 : 127;
        function f13() {
            class C14 {
                constructor(a16) {
                    function f17() {
                        return f17;
                    }
                    Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f17 });
                }
            }
            const v18 = new C14();
            const v19 = v18.length(v18, C14);
            const v20 = new C14(v19);
            v20.length();
            const v22 = v20.length;
            const v23 = new v22(v22, f13, v19, f13, f13);
            v23.name = v23;
            return v22;
        }
        f13();
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
    /*
    constructor(a27, a28) {
        const v29 = this.constructor;
        try { new v29(); } catch (e) {}
        let v31 = 0;
        for (let i = 0; i < 10; i++) {
            Math.atan();
            const v35 = v31++;
            v35 - v35;
        }
    }
    */
}
const v37 = new C5();
2147483649 * 2147483649;
let v42 = new Float64Array(3);
function f43(a44) {
    return f43;
}
class C46 extends Set {
    #m(a48, a49) {
        let [v51,v52,,v53] = this;
    }
}
v42 ^= this;
function F55(a57, a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a59;
    } catch(e61) {
    }
}
const v62 = new F55("symbol", 2147483649, "h", "fill");
const v63 = new F55("fill", 16, "fill", "fill");
const v64 = new F55("fill", 16, v63, "h");
class C65 extends F55 {
    g;
    constructor(a67, a68, a69, a70) {
        super(a70, a70, 2147483649, a70);
        try { v37(16, this, 2147483649, this, v64); } catch (e) {}
    }
    #c = "h";
    static [2147483649];
    p(a73, a74, a75, a76) {
        try {
            const v80 = -4.092259470322528 <= -4.092259470322528;
            class C82 extends Float64Array {
            }
            this["p" + 2147483649] = 2147483649;
            if (v80) {
            }
            Array.__proto__ = this;
            const v92 = new Uint8Array();
            v92[Symbol.isConcatSpreadable] = BigInt64Array;
            const v96 = Array();
            Array()["concat"](v96, v92);
            new F55("symbol", 9n, 257n, "h");
        } catch(e101) {
        }
        return this;
    }
}
const v102 = new C65(65537, v64, "fill", "symbol");
new C65(65537, v64, "fill", "h");
v102[1] = "fill";
function F104(a106, a107, a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    const v110 = this.constructor;
    try { new v110(); } catch (e) {}
    function f113() {
        return "function";
    }
    Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[65537,65537]]);
    typeof Float32Array;
}
new C65(16, v62, "symbol", "symbol");
const v124 = Array(9);
([1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691]).pop;
this.Realm.dispose;
v124.length = 3;
