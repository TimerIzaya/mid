new BigInt64Array(2812);
new Int8Array();
function f8() {
    class C10 {
    }
    try { new C10(); } catch (e) {}
    const v12 = new C10();
    const v13 = v12?.constructor;
    try { new v13(); } catch (e) {}
    v12[3.4890473589784586e+307] = 268435439;
    const o15 = {
        "call": f8,
    };
    class C16 extends C10 {
        #a;
    }
    C16.b = C16;
    C16.g = C16;
    for (let i = 0; i < 5; i++) {
        new Date();
    }
    return 268435439;
}
new BigInt64Array(512);
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
    function f23(a24, a25, a26) {
        function f28(a29) {
            return a24;
        }
        f28 && (a25 > a22);
        return a22;
    }
    Worker(f23);
}
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this.constructor;
    try { new v42(); } catch (e) {}
    a39 % a39;
}
new F37();
new Uint8ClampedArray(64);
class C48 {
    static n(a50, a51, a52) {
        const o55 = {
            "maxByteLength": 2147483647,
        };
        class C56 {
        }
        new Float64Array();
        function f59(a60) {
            const o61 = {
            };
            o61[213];
            return a51;
        }
        const v64 = new ArrayBuffer(1000, o55);
        new Uint32Array(v64);
        return 2812;
    }
    o(a68, a69, a70, a71) {
        class C72 {
        }
    }
    constructor(a74, a75) {
        const o77 = {
        };
        gc(o77);
    }
}
new C48();
const v80 = new C48();
new C48();
new Int8Array(268435456);
Math.cos(-1567809689);
const v89 = new Int32Array(Int32Array);
let v90 = v89 < 2812;
v90++;
function f92() {
    const o94 = {
        get c() {
            return this;
        },
    };
    return o94;
}
class C95 extends f92 {
    #toString(a97, a98, a99, a100) {
    }
}
const o103 = {
    "maxByteLength": f8,
};
new v80(1796, o103);
let {...v106} = v89;
