function f3() {
    return 25397n;
}
function f4() {
    return 25397n;
}
function f5() {
    return 830052067n;
}
f5.g = f5;
const v6 = [0.0307816139862519,NaN];
v6[1] = v6;
const v7 = [-1.0371418295979993];
const v8 = [-1e-15,-1.0];
function f9(a10, a11, a12, a13) {
    try { a11.copyWithin(a10, 25397n); } catch (e) {}
    const v15 = f4--;
    try { a13.sort(v15); } catch (e) {}
    const o32 = {
        m(a18, a19) {
            this.f;
            super[f3] = a12;
            super.e;
            return super.c;
        },
        toString(a24, a25, a26) {
            try {
                this.toString = a26;
            } catch(e27) {
            }
            f4();
            %PrepareFunctionForOptimization(f4);
            f4();
            f4();
            %OptimizeMaglevOnNextCall(f4);
            f4();
            return f3;
        },
    };
    return o32;
}
const v33 = f9(830052067n, v7, -5n, v7);
let v34;
try { v34 = v33.m(25397n, f3); } catch (e) {}
f9(-5n, v8, -5n, v6);
f3(830052067n, v7, 25397n, v8);
let v38 = -1000.0;
v38--;
function f41(a42, a43, a44, a45) {
    Math.round();
    -v33;
    return Math;
}
%PrepareFunctionForOptimization(f41);
f41(f41, f41, f41, v34);
%OptimizeFunctionOnNextCall(f41);
f41();
