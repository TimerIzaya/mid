const v0 = [-37739,1073741824,127,268435440,-51117,50482976,-65537,-1];
const v1 = [-64926,536870888,16,268435456,-193533709,64010,-7,8,-4294967297];
const v2 = [536870888,3,-2488];
const v3 = [v1,v2,v1];
const v4 = [v2,v0,v2];
const v5 = [v2,v2,v2,v3];
class C6 {
    #f = v3;
    static get e() {
        [-1670285153];
        [32896,11816,1066478625];
        [-2147483647,268435456,-2147483647,1073741823,256,9007199254740991,1024,39850];
        return v3;
    }
    [v4];
    static {
        if (this !== this) {
            super.b;
            try {
                v4.#f = v0;
            } catch(e14) {
            }
        } else {
            this[v4];
        }
    }
}
const v16 = new C6();
const v17 = v16?.constructor;
let v18;
try { v18 = new v17(); } catch (e) {}
const v19 = new C6();
const v20 = v19?.__defineGetter__;
try { new v20(v0, v5); } catch (e) {}
const v22 = new C6();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a28;
    } catch(e30) {
    }
}
F25.caller = F25;
const v31 = new F25(v3, v4, v19);
try { v31.propertyIsEnumerable(v2); } catch (e) {}
const v33 = new v18(v5, v0, v4);
const v34 = v33?.constructor;
try { new v34(v31, v3, v3); } catch (e) {}
new F25(v5, v4, v0);
function f37() {
    return v22;
}
1000 % 1000;
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e44) {
    }
}
function f45(a46, a47) {
    function f49(a50) {
        return a46 ^ a47;
    }
    this.onmessage = f49;
}
const o54 = {
    "type": "function",
};
const v55 = o54?.__defineSetter__;
try { new v55(v5, v16); } catch (e) {}
const v57 = new Worker(f45, v17);
try { v57.terminate(); } catch (e) {}
new BigInt64Array(2147483649);
