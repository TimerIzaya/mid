let v2 = "WxK";
class C3 {
    static o(a5, a6) {
        v2 = a6;
        try { new v2(16); } catch (e) {}
        return "0TC";
    }
    static set h(a9) {
        try { a9["findLastIndex"]("findLastIndex", "0TC"); } catch (e) {}
    }
    static 4 = 16;
    static #e = "0TC";
    2147483647 = "0TC";
}
const v12 = new C3();
const v13 = new C3();
const v14 = v13[2147483647];
const t16 = 16;
const v15 = new t16();
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    a19[2147483647];
    a20[2147483647];
    a21[2147483647] = a21;
    try {
        this.b = a19;
    } catch(e24) {
    }
}
const v25 = new F16("0TC", v13, v12, v13);
const v26 = new F16(C3, v25, v12, v25);
v26.b = v26;
new F16(v13, v26, v15, v25);
[-2,15200,129,6,62700,-8,9223372036854775807,-859379369,1073741823,536870887];
const v29 = [-128,-14];
try { v29.group(v15); } catch (e) {}
[1000];
const v35 = new BigUint64Array(10);
for (const v37 in v35) {
    new Float64Array(2147483647);
}
function f39(a40, a41, a42, a43) {
    function f45(a46) {
        return arguments;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f45 });
    const v47 = arguments.toString(a41, f39, f39);
    try { v47.callee(f39); } catch (e) {}
    function f49() {
        let v50 = -268435456;
        let v51 = v50--;
        v51--;
        const v53 = v51 << v51;
        v53 * v53;
        return f39;
    }
    f49.d = f49;
    f49();
    return arguments;
}
for (let v56 = 0; v56 < 5; v56++) {
    v56 % v56;
    const t61 = f39(v14, f39, f39, 2147483647).toString;
    const v60 = t61();
    v60.e = v60;
}
%PrepareFunctionForOptimization(f39);
const v61 = f39();
%OptimizeFunctionOnNextCall(f39);
const v62 = f39(2147483647, Float64Array, BigUint64Array, v61);
v62[0] = v62;
