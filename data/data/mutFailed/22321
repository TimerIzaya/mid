new WeakSet();
new Uint32Array(3468);
let v5 = 3417;
v5--;
new Float32Array(v5);
const v11 = new BigUint64Array(108);
v11[104];
-27566n + -27566n;
-9007199254740992n + -9007199254740992n;
const v18 = [4.4580506370311035,0.0];
const v19 = v18?.filter;
try { new v19(11n); } catch (e) {}
const v21 = [-4.0,0.4890458233502635,-2.220446049250313e-16,-1000000000000.0,1000000.0];
try { v21.entries(); } catch (e) {}
[-1.2915478122457253e+307,0.275030405671152,-2.4867121049060525e+307,-913060.7357060094,-0.7618465992404033,-1.0,-1.7976931348623157e+308,1.0];
new Uint8ClampedArray(2742);
const v29 = new Uint32Array(4);
v29[1];
new Uint8Array(19);
[2,9223372036854775807,-18819,-4294967296,-4294967297,-975440104,1670425848,-128,-9007199254740992];
const v37 = [4294967297,1073741824,10,536870912,918866678,4096,536870912,-13];
try { v37.toString(); } catch (e) {}
const v39 = [-1871441266];
try { v39.toSorted(v11); } catch (e) {}
const v41 = new Uint8ClampedArray(v18, -104, 2742);
v41.byteOffset -= 2742;
const v43 = new URIError();
v43.stack;
class C45 {
    constructor(a47, a48, a49, a50) {
        const v51 = this?.__defineGetter__;
        try { new v51(a47, v43); } catch (e) {}
        a49.length = a49;
        this.constructor = URIError;
        const v53 = this.constructor;
        v53.length;
        try { new v53(v43, v53, a50); } catch (e) {}
        for (let v56 = 0; v56 < 5; v56++) {
            ~v56;
            v43[v56] = a50;
        }
    }
}
C45.e = C45;
new C45(v43, C45, C45, URIError);
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    eval();
    function F67(a69) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const o71 = {
};
