function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = F0;
    try {
        this.e = 1094596657;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
class C7 {
    get b() {
        function f9(a10, a11) {
            new Float32Array(2);
            class C16 {
            }
            new C16();
            function f18(a19) {
                a19[6] = a19;
            }
            function f20(a21, a22) {
                return a21;
            }
            -51320 >> -51320;
            this.onmessage = f18;
            try {
                this.c = a11;
                const v26 = new WeakMap();
                function f27(a28, a29) {
                    const v30 = [v26,v26,v26];
                    Date();
                    v26.set(v30);
                    return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
                }
            } catch(e38) {
            }
        }
        return v6 < Worker;
        class C41 {
            static [v5] = v5;
        }
        const v43 = [Worker,Worker];
        class C45 extends Date {
        }
        const o52 = {
            o(a48) {
                const o50 = {
                };
                gc(o50);
                return BigUint64Array;
            },
        };
        o52["o"]();
        const o55 = {
            "arguments": v43,
            "type": "function",
        };
        new Worker(f9, o55);
        return this;
    }
}
new C7();
new C7();
new C7();
new BigInt64Array(257);
new Uint32Array(128);
new BigInt64Array(6);
function F69() {
    if (!new.target) { throw 'must be called with new'; }
}
const v71 = new F69();
function f72() {
    function f73(a74, a75) {
        new Date();
        return a74;
    }
    return f73;
}
Object.defineProperty(v71, Symbol.toPrimitive, { writable: true, configurable: true, get: f72 });
const v80 = new F69();
new F69();
let v86;
try {
const t0 = "object";
v86 = t0(v71, "number", F69);
} catch (e) {}
function f87(a88) {
    return v86;
}
class C89 extends f87 {
    [v80] = "E";
    [v71] = -14n;
    268435441 = -14n;
}
const t95 = "object";
t95[v80] &= v86;
