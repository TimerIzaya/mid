const v5 = 0 >>> 0;
const v6 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v8 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v9 = [601759695];
const v10 = [1073741824,1073741823,1376142744,1073741825];
function f11(a12, a13, a14, a15) {
    function f16() {
        try { ("Vre").codePointAt(); } catch (e) {}
        let v19 = Float64Array;
        v19 = a13;
        b = v9;
        v6.length;
        try {
            v10.forEach(a13);
        } catch(e22) {
        }
        const o33 = {
            "c": -4294967297n,
            "c": v9,
            valueOf(a24, a25) {
                return a24;
            },
            [-4294967297n](a27, a28, a29, a30) {
                eval();
            },
            "arguments": v8,
            256: a15,
        };
    }
    f16();
    %OptimizeFunctionOnNextCall(f16);
    return f11;
}
const v35 = f11(0, -4294967297n, v8, 0);
let v37 = 2.220446049250313e-16;
v37--;
2.0 << 2.0;
v8 >>> v8;
const v43 = Float32Array.bind();
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    try { new v52(154, a51, 154, a49); } catch (e) {}
    -a49;
    a51 <= a51;
}
const v56 = new F46(154, 129, 129, 154);
const v57 = v56.constructor;
try {
    v8.valueOf = v35;
} catch(e59) {
}
try {
    v6.length = 231903325;
} catch(e60) {
}
const t56 = [-0.685155357392599,5.0];
t56.length &= 1;
const v68 = 3409 - 3409;
const v70 = new Uint8Array(4096);
const v71 = v70.includes(v68);
const t60 = v43?.[-2];
t60[268435441] = -1073741824;
const v74 = new Uint8Array(154, v71, ...v10, ...v70, Uint8Array, v56);
try { v57(0, v74, v74); } catch (e) {}
let v78 = 0.05554969486327188;
const v79 = ++v78;
v78 && (v79 >> 2);
Math.max(v78);
-v5;
Math.min(-1073741824 & v79);
class C86 {
    toString(a88) {
        const v89 = this?.constructor;
        try { new v89(); } catch (e) {}
        const t75 = super["bigint"];
        t75[9] = 0;
    }
}
const v93 = new C86();
const v94 = [v93,v93];
v94[1] = v94;
try {
    v94.length = v93;
    function F95() {
        if (!new.target) { throw 'must be called with new'; }
        this.h = 0;
    }
    class C98 extends F95 {
        #b;
        constructor(a100) {
            super();
            delete this.h;
            super.h = this;
            /\1\2(a(?:\1(b\1\2))\2)\1()l/udm;
        }
    }
} catch(e103) {
    e103.message = e103;
}
