class C3 {
    #a;
    8 = "symbol";
    constructor(a5) {
        try {
            this.#a;
        } catch(e7) {
        }
    }
    ["Ni6R"];
    h = "symbol";
    [C3];
    static #p(a9) {
        return 9007199254740992;
    }
}
new C3("symbol", "symbol");
new C3("symbol");
new C3(-2.2250738585072014e-308);
function f19() {
    return -2.2250738585072014e-308;
}
const v21 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
let v24 = v21 & -2;
v24++;
Math.cbrt(v24);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.e = 1024;
    } catch(e3) {
    }
    try {
        this.a = 1024;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
new Uint16Array(0);
const v13 = new Int32Array(7);
v13[1];
const v17 = new Uint32Array(2298);
class C20 {
    static {
        let v22;
        try { v22 = new this(); } catch (e) {}
        let v23;
        try { v23 = v22(); } catch (e) {}
        try {
            v23 = Uint16Array;
        } catch(e24) {
        }
    }
    2;
    [-65535] = "pVT";
}
try { C20.toString(); } catch (e) {}
try { ("ke5").startsWith(2298); } catch (e) {}
function f30(a31) {
}
const v32 = f30();
const v33 = f30("9007199254740990");
function f34(a35, a36, a37, a38) {
}
f34("o", v33, "ke5", v32);
const v42 = new Float64Array(1124);
v42[355];
[];
for (let v45 = 0; v45 < 32; v45++) {
}
function f47() {
    new f47();
    Math.trunc(-39476);
    const v53 = -39476 * "ke5";
    const v54 = 750201447 - v53;
    "ke5" && -39476;
    v53 >> v53;
    ~v54;
}
f47.name;
class C59 extends f47 {
    #toString(a61) {
    }
}
let v62;
try { v62 = new C59(); } catch (e) {}
new Date();
new Uint32Array(4);
const v70 = new Uint8Array(33);
const v73 = new Int32Array(1016);
Float32Array.BYTES_PER_ELEMENT = Float32Array;
try { v73.includes(Float32Array, v62); } catch (e) {}
f47();
%PrepareFunctionForOptimization(f47);
f47();
f47();
%OptimizeFunctionOnNextCall(f47);
f47();
const o81 = {
};
o81.e = o81;
gc();
try {
    v70.__proto__ = v70;
} catch(e83) {
}
new f30(v32);
const v85 = v42.__proto__;
try { v85.keys(); } catch (e) {}
let v87;
try { v87 = new v85(); } catch (e) {}
const v88 = new Float32Array();
try { v88.findLastIndex(v17); } catch (e) {}
const v90 = v88.BYTES_PER_ELEMENT;
function f91() {
    do {
        v87[1679] /= v90;
    } while (0 < 2)
    class C95 {
        constructor(a97) {
        }
    }
}
function f98() {
}
