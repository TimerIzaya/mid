let v0 = [];
function f1(a2, a3) {
    return 1 + 1;
}
v0.toString = f1;
class C6 {
    [v0];
    m() {
        try {
            super.tanh(this, v0, this, this);
        } catch(e9) {
        }
        return this;
    }
    static #valueOf() {
        const v11 = delete this[1073741824];
        let v12;
        try { v12 = v0(v0, v11); } catch (e) {}
        v0 = v12;
        new Uint8Array(255);
        new BigInt64Array(128);
        const v21 = new Int32Array(1000);
        return v21;
    }
}
new C6();
const v23 = new C6();
const v24 = new C6();
const v25 = /\8/y;
const v26 = /z/gvisy;
const v27 = /ab\b\d\bcd/gm;
function f28(a29, a30) {
    function f31(a32) {
        const o33 = {
            "call": f28,
            "has": f1,
        };
        new Proxy(v27, o33);
        return a29;
    }
    a29[Symbol.toPrimitive] = f31;
    const o43 = {
        [v23]: v26,
        valueOf(a39, a40, a41) {
            try {
                v26.multiline = v0;
            } catch(e42) {
            }
            return a41;
        },
        "g": C6,
        ...C6,
        "e": a29,
        "c": a29,
        ...a29,
        [v24]: v24,
        "d": v25,
    };
    return o43;
}
f28(v23, v27);
f28(v24, v27);
f28(v23, v27);
function f73() {
    const v74 = [f73,f73];
    v74.constructor = f73;
    return v74.constructor.isArray();
}
%PrepareFunctionForOptimization(f73);
f73();
%OptimizeFunctionOnNextCall(f73);
f73();
class C82 {
}
class C83 extends C82 {
    constructor(a85) {
        super();
        for (let v86 = 0; v86 < 25; v86++) {
            this["p" + v86] = v86;
        }
    }
}
new C83();
