const v3 = ["5"];
const v4 = [v3,v3,v3,v3,"jY"];
const v5 = ["6",v4,"jY","5",v3];
function f6(a7, a8, a9, a10) {
    try { a7.map(a10); } catch (e) {}
    const o23 = {
        __proto__: "jY",
        keyFor(a13, a14, a15, a16) {
            try { v3.every(a13, a14); } catch (e) {}
            v5.length;
            super[this] = "6";
            return a10;
        },
        "d": a7,
        "growable": "6",
        [a10](a20, a21) {
            try { new a21("5", "6", a20, this, a21, a21, this, v3); } catch (e) {}
            return a9;
        },
        ..."5",
    };
    return o23;
}
const v24 = f6(v3, v5, "5", v5);
v24[4];
const v26 = f6(f6, v3, "5", v24, "jY", v4, "jY");
f6(v3, v4, "5", v5, v3);
BigUint64Array.g = BigUint64Array;
const v30 = new BigUint64Array(255, "6");
v30[161];
const v34 = new Float32Array(179);
const v37 = new Int8Array(1);
const v38 = v37?.constructor;
try { new v38(Float32Array, v26, v3); } catch (e) {}
try { new Infinity(v30, v34, v30); } catch (e) {}
const v42 = new Infinity();
const o43 = {
    ...v42,
};
