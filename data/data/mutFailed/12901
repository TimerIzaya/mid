let v0 = Infinity;
class C3 {
    valueOf(a5, a6) {
        this[a5] <<= v0;
        let v7 = ~this;
        super.b = -3.0;
        this.h -= --v0;
        v7++;
        let v10 = 0;
        while (v10 < 10) {
            for (let v13 = 0; v13 < 5; v13++) {
                "n" + v13;
            }
            v10++;
        }
        function F17(a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            a19[4294967295] = a19;
        }
        F17.prototype.constructor;
        try {
            this.fuck(a5, a5);
        } catch(e25) {
            new Date();
            class C29 {
                set h(a31) {
                }
                b;
            }
            new C29();
            v7 | -9007199254740990;
            class C35 extends F17.constructor {
            }
        }
        return 923728.9904865862;
    }
}
const v36 = new C3();
let v40;
try { v40 = new C3(v36, -9788n, ...-34802n, -34802n); } catch (e) {}
v40[8] <<= -3.0;
const o44 = {
    ["536870887"]: -1000000000000.0,
    "b": -757.5759240774136,
    "a": -1000000000000.0,
    [-757.5759240774136]: "536870887",
    [-1000000000000.0]: -757.5759240774136,
    "d": "536870887",
    [-2]: -1000000000000.0,
};
new C3();
const v46 = new C3();
let v49 = "number";
[v46];
v49++;
class C53 {
    [null];
}
[923728.9904865862];
[-3.0,v0];
const v56 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F57(a59, a60, a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    function f63(a64, a65, a66) {
        const v67 = [1630629478,9,2034969337];
        for (let v68 = 0; v68 < 25; v68++) {
            v67.__proto__;
        }
        function f71(a72) {
            const o73 = {
                "g": "string",
                "f": a72,
                "h": "E",
            };
        }
        class C75 {
            static ["-2"];
        }
        const o76 = {
        };
        f71();
        f71();
        const v79 = v56.__proto__;
        try { v79.findLastIndex(this); } catch (e) {}
        return a64;
    }
    f63(a61, a61, a61);
}
new F57();
