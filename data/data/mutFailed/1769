let v0 = -10809n;
new Int8Array(1487);
const v8 = new Int32Array(2943);
new BigUint64Array(BigUint64Array);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    function f17(a18) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f17 });
    let v21 = 1073741825;
    try {
        v21++;
        let v25 = -1e-15;
        Math.atan2(v25++, -175950080);
        this.b = v21;
    } catch(e28) {
    }
}
let v29 = new F15();
let v30 = new F15();
({"a":v30,"b":v0,...v29} = v30);
const o35 = {
    "execution": Int32Array,
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o35);
new v8();
new Uint8ClampedArray(16);
function f42() {
    new Int8Array(1073741823);
    class C46 {
        #valueOf(a48, a49, a50, a51) {
        }
    }
    const o55 = {
        valueOf(a53, a54) {
        },
    };
}
f42();
%OptimizeFunctionOnNextCall(2943);
f42();
