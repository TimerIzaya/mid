/(a)\1/gdims;
const v1 = /fwF/udisy;
/uVe\xe2\x81\xa3?/disy;
const v3 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
const v7 = [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v3,v3]];
const o8 = {
    "arguments": v7,
    "type": "function",
};
([]).push();
function f13(a14, a15, a16, a17) {
    arguments.toString();
    return f13;
}
const v26 = new Float32Array(5);
new Int8Array(8, Float32Array, v26);
function F31(a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = -Infinity;
    16 >> v37;
    Math.atan2(v37, v37);
    const v43 = new BigUint64Array(3375);
    v43[0];
    v43[2];
    v43[3];
}
new F31();
new F31();
new BigInt64Array(v26, -2n, v1);
const v51 = [];
class C52 {
    constructor(a54) {
        const v55 = this.constructor;
        new WeakSet();
        for (let v58 = 0; v58 < 5; v58++) {
        }
        try { new v55(v51); } catch (e) {}
        ++a54;
    }
}
class C61 {
    static a;
    static {
        this >> this;
        this[6];
    }
    static m(a66) {
        gc();
    }
}
const v69 = new C61();
const v70 = new C61();
let v72;
try { v72 = v70.getMonth(1000); } catch (e) {}
v72 % v69;
new C52();
new Float64Array(512);
function f78(a79, a80, a81, a82) {
    function f83() {
        let v85 = !257;
        -v85 | v85--;
        return a79;
    }
    const v89 = f83();
    %OptimizeFunctionOnNextCall(Float32Array);
    return v89;
}
const v90 = f78();
f78(v90, v90, v90, f78(f78, f78, f78, v90));
new C52(C52);
