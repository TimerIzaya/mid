const v0 = [];
const v1 = [v0,v0,v0,v0];
const v2 = [v1];
[v0,v1,v2,v2];
[-9223372036854775807,7];
[2,-256,3];
[-14,-803213058,-256,-1501197711,129,2008562098,1094738072,10,-256];
function f7() {
    return v1;
}
const v11 = /a\w/gudsy;
const v12 = /ka{0}/guims;
const v13 = /ab|c/udmy;
class C14 {
}
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v23 = new Uint8Array(16);
const t19 = 1073741825n;
const v27 = new t19();
class C28 extends Uint8ClampedArray {
    constructor(a30, a31, a32, a33) {
        super(v23);
        try { a32(); } catch (e) {}
        `1073741824${42262n}c`;
        super[v27] = 520;
    }
}
new C28();
new C14();
new C14();
function f39(a40, a41) {
    const o42 = {
        ...v12,
        "d": v0,
        "c": a41,
        "g": a41,
        "f": a40,
        "a": a41,
        7: 42262n,
        __proto__: C14,
        "e": v12,
        "b": v11,
    };
    return o42;
}
%PrepareFunctionForOptimization(f39);
f39(v13);
f39(v13);
%OptimizeFunctionOnNextCall(f39);
f39(v11, v13);
new Float32Array(1245);
BigUint64Array.prototype;
const v6 = new BigUint64Array(152);
const v9 = new Uint32Array(52);
class C10 extends Uint32Array {
    static 1000 = 152;
    g;
    #b;
    valueOf(a12, a13, a14) {
        try {
            v6[Uint32Array] = v9;
        } catch(e15) {
        }
        return 1245;
    }
    static #m(a17, a18, a19, a20) {
        try {
            v9.#b = a19;
        } catch(e21) {
        }
        try {
            v6.#m(this, 52, a18, a19, a19);
        } catch(e23) {
        }
        return a20;
    }
}
new C10();
const v25 = new C10();
v25.BYTES_PER_ELEMENT;
new C10();
const v31 = ("object")?.link;
try { new v31(v6); } catch (e) {}
[];
const v36 = new Int16Array(225);
function f37(a38, a39) {
    const v40 = [2.220446049250313e-16,1e-15,-1000000000000.0];
    class C42 {
        constructor(a44, a45) {
            super[Int8Array] = v40;
        }
        #m(a47) {
        }
    }
    return Int8Array;
}
v36.toString = f37;
v36[152] = v36;
const v50 = new Uint16Array(4096);
257 != 257;
try { BigInt64Array(152, v50, BigInt64Array); } catch (e) {}
const v55 = new BigInt64Array(257);
class C56 {
    static get a() {
        const v58 = 225 != v36;
        return this;
        try {
            super.asinh(225, this, v58, v58);
        } catch(e60) {
        }
        return v36;
    }
    m(a62, a63, a64) {
        new BigInt64Array(4);
        new Uint16Array(4096);
        new Float32Array(4096);
        return 257;
    }
}
new C56();
new C56();
new C56();
try {
    v55.a = 225;
} catch(e75) {
}
for (let i78 = 0, i79 = 10;
    i78 < i79;
    (() => {
        i78 << i78;
        i78++;
        const v85 = i79--;
        v85 != v85;
    })()) {
    i78 >> i78;
    ~i79;
    try {
        v36[227] = i78;
    } catch(e91) {
    }
    try {
    const t0 = 225;
    t0();
    } catch (e) {}
}
