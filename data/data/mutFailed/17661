const v2 = new Int32Array(64);
const v4 = 256 | 256;
const v6 = new Int32Array(256);
new Uint8ClampedArray(257);
class C10 extends Int32Array {
    #toString(a12, a13, a14) {
        try { a13.trimRight(a14, a12); } catch (e) {}
        const v16 = super[v6];
        return v16;
        v16?.[2147483647];
        return a14;
    }
    static e = Int32Array;
    static f;
    c = v6;
    3 = 256;
    g;
    static [v2];
    static #a = v4;
    #e;
    constructor(a19, a20) {
        super(a19, a20);
        Object.defineProperty(v2, 8, { configurable: true, value: a20 });
    }
    static 2 = v2;
}
function f21(a22, a23, a24) {
    v2 != C10;
    return Uint8ClampedArray;
}
f21(257, v4, 256);
const v27 = C10?.e;
try { new v27(257, 257, 257); } catch (e) {}
new C10();
const v30 = new C10();
try { v30.reduce(257); } catch (e) {}
const v32 = new C10();
v32.e = v32;
function f34() {
    return f34;
}
const t41 = 5;
t41.constructor = f34;
