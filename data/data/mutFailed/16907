try { ("x").sup(); } catch (e) {}
let v5;
try { v5 = ("x").italics(); } catch (e) {}
const v6 = v5?.repeat;
try { new v6("x"); } catch (e) {}
("O")[0];
try { ("getUTCFullYear").localeCompare(-15827); } catch (e) {}
8 >>> 8;
BigInt64Array.BYTES_PER_ELEMENT;
new BigInt64Array(8);
const v19 = new Uint32Array(4);
try { v19.forEach(1282868944); } catch (e) {}
const v24 = new BigUint64Array();
let v25;
try { v25 = v24.entries(); } catch (e) {}
try { v25.next(); } catch (e) {}
const o27 = {
    ...v24,
};
new Float32Array(6);
try { ("I").split(Uint32Array, "x"); } catch (e) {}
const v31 = ("I").localeCompare();
const v32 = v31 >>> v31;
v32 - v32;
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
}
1000000.0 >> 1000000.0;
function f41() {
    return 3.0;
}
const v42 = [1000000.0,1000000.0,1000000.0];
try { v42.map(8); } catch (e) {}
class C44 extends f41 {
    [-1] = v42;
    static get c() {
    }
    m(a47) {
    }
    set e(a49) {
    }
    static get h() {
    }
}
C44.c = C44;
function f55() {
    class C56 {
        constructor(a58) {
            const v59 = /[^7Y[a-zA-Z0-9]?]/vdmy;
            class C60 {
                constructor(a62, a63) {
                    try {
                        C60++;
                    } catch(e65) {
                    }
                }
            }
            const v66 = C60?.__defineGetter__;
            try { new v66(F34, C60); } catch (e) {}
            for (let v68 = 0; v68 < 5; v68++) {
                const v69 = v68 != v68;
                v69 || v69;
                function f71() {
                    const v73 = /a\s/vims;
                    v73.sticky;
                    v73[v68];
                    class C76 {
                    }
                    function F77(a79, a80) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    F77.length = F77;
                    const v81 = Array();
                    try { v81.filter(this); } catch (e) {}
                    let v83;
                    try { v83 = v81.reduceRight(v59); } catch (e) {}
                    return v83;
                }
                f71.prototype;
                const v85 = f71();
                const v88 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
                v88[2] = v88;
                class C89 {
                    constructor(a91, a92) {
                        const v93 = this?.constructor;
                        try { new v93(a91, a91); } catch (e) {}
                        let v95 = /W(jy2)/udy;
                        const v96 = /(u4(?:a?)*)/gudimsy;
                        const v98 = Uint8Array(v96, C89);
                        const v100 = Uint32Array(4294967296, a91, a92);
                        function f101(a102, a103, a104, a105) {
                            const o109 = {
                                ...v98,
                                n(a107, a108) {
                                    v100[a102] = v100;
                                    return 4294967296;
                                },
                            };
                            return o109;
                        }
                        for (let v110 = 0; v110 < 5; v110++) {
                            f101(Uint8Array);
                        }
                        v95 = v96;
                        for (let v112 = 0; v112 < 5; v112++) {
                            v88["p" + v112] = v112;
                        }
                    }
                }
                C89.prototype = C89;
                try { new C89(v85, v68); } catch (e) {}
            }
        }
    }
    C56.name;
    new C56();
    const v118 = new C56();
    try { v118.isPrototypeOf(v118); } catch (e) {}
    class C120 extends C56 {
    }
    let v123;
    try { v123 = Math.expm1(v24); } catch (e) {}
    v123--;
    const v125 = Math.atanh("Vre");
    const v126 = v125 >> v125;
    v126 - v126;
    v126 * v126;
    -9223372036854775808n / -9223372036854775808n;
    const v131 = new C120();
    const v132 = v131?.constructor;
    try { new v132(); } catch (e) {}
    return v131;
}
%PrepareFunctionForOptimization(f55);
f55();
%OptimizeFunctionOnNextCall(f55);
f55();
