function f0() {
}
const v1 = [-1,-9007199254740991,-12,-9007199254740991,-3,1545795681,6,-16];
[268435441];
[64,-65535,1073741824,9007199254740992,19989,13,17822,1,-65536];
function f12(a13, a14) {
    const v16 = new SharedArrayBuffer();
    new DataView(v16);
    return v1;
}
Uint32Array[Symbol.toPrimitive] = f12;
const v21 = new Uint32Array(256);
function f24() {
    return f12;
}
Object.defineProperty(Uint32Array, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f24 });
try { v21.join(v1); } catch (e) {}
f0();
%PrepareFunctionForOptimization(f0);
f0();
f0();
%OptimizeMaglevOnNextCall(f0);
f0();
new Uint32Array(256);
new BigInt64Array(64);
for (let v36 = 0; v36 < 5; v36++) {
    function F39(a41, a42, a43, a44) {
        if (!new.target) { throw 'must be called with new'; }
        this.toStringTag = Symbol;
        this.toStringTag = Uint32Array;
        const v45 = ("HkAXC").constructor;
        v36 = 256;
        Object.defineProperty(this, "d", { writable: true, configurable: true, enumerable: true, value: Uint32Array });
        this[a41] ^= ("toStringTag").length;
        [a42];
        try { new v45(a41, a44); } catch (e) {}
        this.isPrototypeOf();
    }
    new F39("toStringTag", "toStringTag");
}
