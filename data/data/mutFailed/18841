new WeakMap();
const v3 = new Date();
const v5 = -Infinity;
v5 >>> v5;
try { ("boolean").strike(); } catch (e) {}
Date(1000000.0);
%VerifyType(1000000.0);
const v12 = typeof Date;
v12[6];
!(v12 === "object");
"boolean" == "boolean";
const t8 = "g";
t8[0] = "g";
function f21() {
    return 1000.0;
}
let v23;
try { v23 = Array(1000000.0); } catch (e) {}
try { v23.unshift(f21); } catch (e) {}
class C25 extends Array {
}
C25.d = C25;
C25.d = C25;
Object.defineProperty(Array, "f", { get: Array });
const t24 = "compile";
const v26 = delete t24?.length;
for (let v27 = 0; v27 < 32; v27++) {
    if ("compile" == v27) {
    } else {
        Object.defineProperty(Array, "d", { set: Date });
        try { ("compile").replace("object", v23); } catch (e) {}
    }
    v27 * v27;
    v26["p" + v27] = v27;
}
const v36 = new C25();
const t36 = "object";
t36[3] |= v36.push(Array);
new Int16Array(1121);
new Uint8Array(16);
new Uint8Array(225);
C25 >> v26;
const o50 = {
    "maxByteLength": 2147483647,
};
const v52 = new SharedArrayBuffer(13, o50);
new Int16Array(v52);
v3[f21] |= v23;
const t48 = "compile";
t48[9] = "boolean";
