const v0 = [65537,-8,26859,-73432056,3,-268435456,4,-883006231,-1425535202];
const v1 = [536870889,-13,-11];
const v2 = [128,1641491326,127,536870889,-7333,-10,-1,1,536870889,255];
v2.g = v2;
function f3() {
    return v2;
}
let v4;
try { v4 = new f3(); } catch (e) {}
const v5 = /(?:a?)+/udimy;
const v6 = /(\2)(\1)/udimsy;
const v7 = /(Dc(?<=))/gdis;
function f8(a9, a10, a11, a12) {
    a12.g = a12;
    const o29 = {
        "e": v5,
        o(a14, a15, a16, a17) {
            while (0 < 10) {
                const v21 = v5[f3];
                for (let v22 = 0; v22 < 32; v22++) {
                    const v24 = "p" + v22;
                    ("setUTCMinutes").toUpperCase();
                    ("setUTCMinutes").normalize();
                    v21[v24] = a14;
                }
                a9++;
            }
            return a14;
        },
    };
    function f30() {
        function f31(a32, a33) {
            v6[7];
            for (let v35 = 0; v35 < 5; v35++) {
                function f36() {
                    Math.atan(Math);
                    return Math;
                }
                f36();
                %OptimizeFunctionOnNextCall(f36);
            }
            return v4;
        }
        return f31;
    }
    function f40(a41) {
        [Uint8ClampedArray,Uint8ClampedArray];
    }
    Object.defineProperty(o29, "toString", { writable: true, enumerable: true, get: f30, set: f40 });
    o29.b = o29;
    return o29;
}
const v44 = f8(v2, v7, v2, v2);
const v45 = f8(v0, v5, v0, v5);
const v46 = f8(v2, v6, v1, f3);
v46.toString = f8;
const v51 = [v45,[-106.851343377901,-106.851343377901],-120.21219998735819];
try { v51.map(v6); } catch (e) {}
[-120.21219998735819,v51,v44,v2];
Date.valueOf = f8;
class C56 extends Date {
}
try { C56.bind(v0); } catch (e) {}
const v58 = new C56(-4294967296);
v58.toString = Date;
try { v58.setUTCMinutes(v58, v46, Date); } catch (e) {}
Object.defineProperty(Date, v58, { get: Date, set: Date });
