function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1536639757;
    } catch(e3) {
    }
    try {
        this.c = -1536639757;
    } catch(e4) {
    }
    try {
        const v7 = this[BigUint64Array];
        let v8;
        try { v8 = v7.acos(this, v7, this); } catch (e) {}
        const o9 = {
        };
        try {
            o9.c = this;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.c = this;
            o11.b = v8;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.c = this;
            o13.b = v8;
            o13.g = F0;
        } catch(e14) {
        }
        try {
            const o15 = {
            };
            o15.c = this;
            o15.b = v8;
            o15.h = F0;
        } catch(e16) {
        }
        new BigUint64Array();
        new BigUint64Array();
        const v23 = new BigInt64Array(4046);
        function f25(a26, a27) {
            Math.exp([-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6] | [1073741824,-46456,536870888]);
            let o33 = {
            };
            [,...o33] = v23;
        }
        f25();
        this.e = -1536639757;
    } catch(e35) {
    }
}
const v36 = new F0();
new F0();
new F0();
16 >>> 16;
const v42 = new Array(16);
[F0,v42,v36];
const v45 = [v36,[16,Array]];
try { v45.entries(); } catch (e) {}
/9l4(?<=)/udsy;
/a\bc/gvdimy;
/a5a\W/uimsy;
const v52 = new BigInt64Array(2440);
let v53;
try { v53 = v52.slice(16, 2440); } catch (e) {}
const v56 = new Uint32Array(512);
v56["every"](v53, v42);
[9,2147483648,-36662];
[-130438125,-4096,-413798671,2];
[127,-9223372036854775807,-5303];
-8;
BigUint64Array.d = BigUint64Array;
new BigUint64Array(8);
let v66 = 0;
const v67 = v66--;
v67 & v67;
const v69 = v66++;
function f70() {
    return v69;
}
Int8Array.b = Int8Array;
const v72 = new Int8Array(v66, v66, v67);
v72.buffer.slice(f70, v69);
