const v1 = new Map();
function f2() {
    return Map;
}
const v5 = new Float64Array(256);
const v6 = [1073741824,-523864342,1161249740];
const o7 = {
    ...v5,
    ...v6,
};
function f9(a10, a11) {
    const o74 = {
        o(a13, a14, a15, a16) {
            with (v1) {
                size?.[a10];
            }
            new Int32Array(127);
            const v25 = ("h").split(65535);
            function F26(a28) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v30 = new BigUint64Array();
            function f31(a32, a33) {
                Proxy();
                return a33;
            }
            v30.toString = f31;
            try { v30.copyWithin(v30); } catch (e) {}
            new Int32Array(257);
            const v39 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            let v40 = -4294967297n;
            v40--;
            const v42 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
            const v43 = [1073741824,1073741823,1376142744,1073741825];
            function f44(a45, a46, a47, a48) {
                function f49() {
                    try { ("Vre").codePointAt(); } catch (e) {}
                    let v52 = Float64Array;
                    v52 = a46;
                    b = v25;
                    v39.length;
                    try {
                        v43.forEach(a46);
                    } catch(e55) {
                    }
                    const o66 = {
                        "c": v40,
                        "c": v25,
                        valueOf(a57, a58) {
                            return a57;
                        },
                        [v40](a60, a61, a62, a63) {
                            eval();
                        },
                        "arguments": v42,
                        256: a48,
                    };
                }
                f49();
                %OptimizeFunctionOnNextCall(f49);
                return f44;
            }
            new BigInt64Array(368);
            function f71() {
                return f71;
            }
            class C73 extends BigInt64Array {
            }
            return a11;
        },
    };
    return o74;
}
const v75 = f9(f2, f2);
f9(v1, f2);
f9(v75, Map);
const v79 = [[false,Map,false,v75]];
const v81 = [];
const o82 = {
    "arguments": v81,
    "type": "function",
};
const v83 = [f9,false,f2,v79];
new Uint8Array(257);
v83.constructor;
const v91 = new Float32Array(260330366);
v91.byteOffset = v91;
function f93(a94, a95, a96, a97) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
    return a95;
}
f93();
class C102 {
    constructor(a104, a105, a106, a107) {
        super(a104);
    }
    p(a109) {
        this.g ^= this[8];
    }
    static {
        const t100 = this.__proto__;
        t100();
    }
}
