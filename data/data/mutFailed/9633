function F3() {
    if (!new.target) { throw 'must be called with new'; }
}
let v8;
try { v8 = Uint32Array.apply(F3); } catch (e) {}
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = a12.constructor;
    const v17 = new Set();
    const v18 = v17.keys;
    let v19;
    try { v19 = v18(Proxy, v15, 3228, a11); } catch (e) {}
    function F20(a22, a23) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e24) {
        }
        try {
            this.h = v17;
        } catch(e25) {
        }
        try {
            const v26 = v17[this];
            try {
                new F20(v26, -268435456n);
            } catch(e29) {
            }
        } catch(e30) {
        }
        switch (3228) {
            case v19:
                v15[5] = v8;
                break;
        }
    }
    new F20();
    new F20();
    new F20(a12, a13);
}
-450746.69945373747 ^ -450746.69945373747;
function f37() {
    class C42 {
        [-39233] = -2127350647;
        [-117.6202672056188];
        constructor(a44) {
            -268435456 || 4.0;
            Math.sign(4.0);
            +4.0;
        }
        268435439 = -39233;
        d;
        g;
        a;
    }
    C42.p24 = -2127350647;
    try { Uint32Array(C42); } catch (e) {}
    C42["p" + 3228] = 3228;
    const v57 = Symbol.toPrimitive.description.codePointAt();
    ([-1.5424212036356715e+308]).shift();
    [1073741824,1073741823,1376142744,1073741825];
    return v57;
}
new BigUint64Array(2147483647);
const v63 = new Array(170);
function F64(a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a67;
    } catch(e68) {
    }
    try {
        this.b = a66;
    } catch(e69) {
    }
}
const v70 = new F64(Array, Array);
const v71 = new F64(F64, 170);
const v72 = new F64(Array, v70);
const v73 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f74() {
    return v73;
}
class C75 extends f74 {
    constructor(a77, a78) {
        const o92 = {
            84: arguments,
        };
    }
}
new C75();
const v98 = [170,Array,F64,v72];
const v99 = [v63,v63,170,v71];
class C100 {
}
const v101 = new C100();
const v104 = new Uint16Array(2);
new Uint32Array(v104);
const v107 = [-5.0];
const v108 = v63.constructor;
try { new v108(v101, v107); } catch (e) {}
[170,v72,v99,v98];
new Int8Array(2);
new Float32Array(1000);
const v117 = [-536870912,-1454443390,-11,536870887];
let v119;
try {
const t0 = 65536n;
v119 = t0(65536n);
} catch (e) {}
v117[65536n] *= v119;
v117["splice"](-650191005, -650191005, "splice");
new BigUint64Array(1024);
function f127(a128, a129, a130) {
    const o132 = {
        get d() {
            return f127;
        },
    };
    const v133 = o132?.__lookupSetter__;
    let v134;
    try { v134 = new v133(); } catch (e) {}
    return v134;
}
new BigUint64Array(256);
new Function("1532738280");
