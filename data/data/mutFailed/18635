const v0 = [193.15092484036632,-491721.18972333934,-1.0,7.713275980915422e+307,-1e-15,-8.688584207373644e+307];
const v1 = [-1000000000.0,-1.7976931348623157e+308];
[1.0,325.72517471443825,655.4177494124983,1.305758732799628e+308,0.2683142903928145,4.0,-1e-15,-4.0,-372.4018135929854,Infinity];
class C3 {
    static {
        let v5;
        try { v5 = this(); } catch (e) {}
        super.a /= this;
        class C7 {
            constructor(a9, a10) {
                const v11 = this.constructor;
                try { new v11(); } catch (e) {}
                this[16] >>>= 16;
            }
        }
        try { ArrayBuffer.bind(ArrayBuffer); } catch (e) {}
        let v15 = 2510;
        v15++;
        const v17 = v15 === v15;
        v17 && v17;
        const o19 = {
            "maxByteLength": v15,
        };
        -v5.maxByteLength;
        const v23 = new ArrayBuffer(2510, o19);
        let v25;
        try { v25 = new DataView(v23); } catch (e) {}
        try { v25.getInt16(ArrayBuffer); } catch (e) {}
        new DataView(v23);
    }
}
C3.prototype;
let v29;
try { v29 = new C3(); } catch (e) {}
const v30 = new C3();
const v31 = v30?.propertyIsEnumerable;
try { new v31(v0); } catch (e) {}
new C3();
const v34 = new C3();
8 - 8;
const v38 = new Uint8ClampedArray(8);
v38[6];
16 * 16;
try { Int16Array.of(); } catch (e) {}
const v45 = new Int16Array(16);
v45[10] = -9007199254740992;
try { new Float32Array(v30, 126, C3); } catch (e) {}
const v49 = new Float32Array(126);
let v50 = 686;
v50 | v50;
const v52 = v50--;
v52 >>> v52;
const v55 = new BigUint64Array(v50);
class C56 {
}
let v57;
try { v57 = C56.propertyIsEnumerable(Uint8ClampedArray); } catch (e) {}
const v58 = !v57;
function F60() {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this?.__lookupGetter__;
    try { new v62(); } catch (e) {}
    19793 ^ 19793;
    -2.0 - -2.0;
    function f70() {
        return -2.220446049250313e-16;
    }
    f70.length = f70;
    4 >> 4;
    const v74 = new Int8Array(4);
    try { v74.reduce(4); } catch (e) {}
    8 - 8;
    for (const v79 in "1024") {
    }
    class C80 {
    }
    let v81;
    try { v81 = new C80(); } catch (e) {}
    try { v81.toString(); } catch (e) {}
    ("1073741823").trimRight()[8];
    const v87 = [];
    function f88(a89, a90) {
        class C91 {
        }
        5.0 / -2.220446049250313e-16;
        new Uint8Array(257);
        class C101 extends Uint16Array {
            constructor(a103, a104, a105) {
                super();
            }
        }
        Math.exp();
        Math.log(-23525);
        function f109() {
            return f109;
        }
    }
    f88.length;
    v87.constructor = f88;
    new Float32Array(8);
    const v113 = /abc?/gvmy;
    v113.b = v113;
    try { v113.toString(); } catch (e) {}
    v113.exec("Q8F");
    const v116 = /(x)(x)(x)\1/uis;
    try { v116.compile(F60, 7.559689826868887); } catch (e) {}
    function f118(a119, a120, a121, a122) {
        const o129 = {
            2: a121,
            __proto__: a122,
            [v116](a124, a125, a126, a127) {
                super.test();
            },
        };
        o129[2] = o129;
        const v130 = o129[2];
        v130.caller = v130;
        return a119;
    }
    f118();
    f118();
    215 / 215;
    function F135() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new F135(); } catch (e) {}
    let v139 = 2;
    v139--;
    v139 >>> v139;
    Math.cos(v139);
    class C143 {
        get a() {
        }
    }
    function f145(a146, a147, a148) {
    }
    class C149 {
    }
    function F150(a152, a153, a154) {
        if (!new.target) { throw 'must be called with new'; }
    }
    F150.arguments = F150;
    for (const v157 of Array(19793)) {
    }
}
const v158 = new C56();
const v161 = new Int16Array(C56);
const v162 = v161?.constructor;
try { new v162(v38, v55, v52); } catch (e) {}
let v164;
try { v164 = new v58(v161, v34, v50); } catch (e) {}
const v165 = v164?.lastIndexOf;
try { new v165(8); } catch (e) {}
function f169(a170) {
    const o173 = {
        ...65536,
        5: 65536,
        __proto__: a170,
        valueOf(a172) {
        },
        "d": 4,
        "g": 65536,
        163: 4,
    };
}
try { new Uint32Array(v29, v29, v29); } catch (e) {}
const v180 = new Uint8ClampedArray(127);
const v182 = v180.includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
class C185 {
    constructor(a187, a188, a189) {
        const v190 = a187?.constructor;
        let v191;
        try { v191 = new v190(); } catch (e) {}
        const v192 = v191?.__defineSetter__;
        try { new v192(v161, v161); } catch (e) {}
        try { a188.filter(v49); } catch (e) {}
        for (let v195 = 0; v195 < 25; v195++) {
            v195 % v195;
            Math.cosh(v195);
        }
        const v200 = new Uint16Array();
        const v201 = v200?.entries;
        try { new v201(); } catch (e) {}
        -2 - -2;
        Int32Array.name;
        const v207 = new Int32Array();
        class C208 {
            static #d = -2;
            constructor(a210, a211) {
                try {
                    v182.#d += v207;
                } catch(e212) {
                    e212.toString();
                }
            }
        }
        function f214(a215, a216) {
            return a215;
        }
        try { new Symbol(); } catch (e) {}
        this[Symbol.toPrimitive] = f214;
        a188[4] = v158;
        for (let v220 = 0; v220 < 25; v220++) {
            try { ("p").toWellFormed(); } catch (e) {}
        }
    }
}
const v223 = C185?.constructor;
try { new v223(Float32Array); } catch (e) {}
let v225;
try { v225 = new C185(v1, C3, C56); } catch (e) {}
const v226 = v225?.__defineGetter__;
try { new v226(v29, v29); } catch (e) {}
const v228 = new C185(v158, v161);
class C229 {
}
C229.length = C229;
const v231 = new Int8Array(C229, Int8Array, Int8Array);
const v232 = v231.reverse();
const v233 = v228?.constructor;
try { new v233(v233, v233, BigUint64Array); } catch (e) {}
try { new v233(126, 126, C185); } catch (e) {}
const v236 = new C185(Int8Array, Uint32Array);
v236.a = v236;
const v237 = new C185(v236, C56);
v232.b = v237;
