let v1 = 10;
for (; v1--;) {
}
const v5 = true % -15;
const v6 = delete v5[4206247407];
try {
    v6.a = 41160;
} catch(e7) {
}
const v8 = [-2.220446049250313e-16,-1000000000.0,-1e-15,1000000000.0,-1.0,1000000000.0,-1000.0];
const v9 = [1000000000000.0,1e-15];
v8.fill(v9, v8);
const o12 = {
    "c": v8,
};
function F13(a15) {
    if (!new.target) { throw 'must be called with new'; }
}
const v16 = new F13(o12);
function f17() {
    return v5;
}
function f18(a19) {
    delete v9[a19];
}
Object.defineProperty(v16, "search", { writable: true, configurable: true, enumerable: true, get: f17, set: f18 });
try { v16.search(v16); } catch (e) {}
const v26 = new BigInt64Array();
v26.copyWithin(-9223372036854775808);
class C29 {
    set g(a31) {
    }
}
-Infinity;
function f34(a35) {
    return f34;
}
Symbol.hasInstance;
-Infinity;
const v41 = new BigUint64Array();
function f44() {
    return Symbol;
}
function f45(a46) {
    try { v8.some(v16, ...a46, a46, a46); } catch (e) {}
}
Object.defineProperty(Symbol, Symbol.toPrimitive, { configurable: true, get: f44, set: f45 });
Symbol.for(Symbol);
const v52 = new WeakMap();
const v54 = new Int8Array();
const v56 = new Uint16Array();
[[v52,v56["values"](...v54, Int8Array, ..."values"),[]]];
v41["copyWithin"]();
