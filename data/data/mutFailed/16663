let v0 = 3843;
const v2 = new Uint32Array(v0);
new Uint8ClampedArray(3489);
Uint8Array.length;
const v9 = new Uint8Array(16);
function f10(a11) {
    v0 = 3489;
    const v14 = new Uint8Array();
    const v16 = Array();
    Array(670)["concat"](v16, v14);
    return v14;
}
v9[Symbol.toPrimitive] = f10;
v9[10] = v9;
[v9,v0];
[v2];
[v9,Uint8Array,v9];
function f25() {
    return Uint8ClampedArray;
}
const v27 = ([-1.0,-2.2250738585072014e-308,3838.6520943260984,-2.220446049250313e-16,-1.0,NaN,9.882758377786776e+307,2.2250738585072014e-308,-1.0,-1.7976931348623157e+308])?.forEach;
try { new v27(v9); } catch (e) {}
const v29 = [0.8446320896859991,2.2250738585072014e-308,1e-15,1.950131126536359,-669.8300334765179,-3.0,1000.0,4.0];
try { v29.pop(); } catch (e) {}
[-973221.460616033,-4.0,3.518459063559441e+307,0.6381576220435932,-372765.07264697005,NaN,-2.2250738585072014e-308,1e-15];
function f32() {
    return f32;
}
try { f32(); } catch (e) {}
function f34() {
    for (let v35 = 0; v35 < 5; v35++) {
        return v35;
        class C36 {
        }
    }
    return f34;
}
%OptimizeFunctionOnNextCall(f34);
f34();
