2.0 == 2.0;
678.4530758018102 / 678.4530758018102;
let v7 = 182347.13758428046;
-(v7--);
const v10 = [-256,103265696,268435456];
v10[1];
const v12 = [47540,-856007693,4,1073741824];
[1045330559,268435441,-4294967295,11,-1197758978,7,-22304,8];
const v15 = -Infinity;
try { new Int8Array(-8.402261091682526, v12, 964598.6714444079); } catch (e) {}
const v21 = new Int8Array();
for (const v22 in v21) {
}
const v23 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
let v24;
try { v24 = v23.reduce(536870912n); } catch (e) {}
let v25;
try { v25 = v23.copyWithin(v12, v12); } catch (e) {}
try { v25.toReversed(); } catch (e) {}
const v27 = [601759695];
let v28 = v27[0];
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    a34 / a34;
    a32 - a32;
    a33 === a33;
    arguments[2] = arguments;
    function f40() {
        let v42;
        try { v42 = ("Vre").search("Vre"); } catch (e) {}
        v42 >>> v42;
        -(-4294967295);
        const o52 = {
            "e": -4294967295,
            ...v23,
            84: arguments,
            ..."Vre",
            set b(a47) {
            },
            [-8.402261091682526](a49, a50) {
                super[f40];
            },
        };
        o52[7];
        return a32;
    }
    Float32Array.BYTES_PER_ELEMENT = Float32Array;
    let v55;
    try { v55 = new Float32Array(v12, a34, v27); } catch (e) {}
    a33[a35] = v7;
    const v58 = arguments[Symbol.split];
    const o59 = {
    };
    try {
        o59.h = v58;
    } catch(e60) {
    }
    try {
        const o61 = {
        };
        o61.c = o61;
        o61.h = v58;
        o61.d = v55;
    } catch(e62) {
    }
    try {
        const o63 = {
        };
        o63.h = o63;
        o63.h = v58;
        o63.d = v55;
        o63.a = a33;
    } catch(e64) {
    }
    try {
        const o65 = {
        };
        o65.h = o65;
        o65.h = v58;
        o65.d = v55;
        o65.a = v58;
    } catch(e66) {
    }
    class C67 extends Float32Array {
        constructor(a69, a70, a71) {
        }
    }
    C67.name;
    f40();
    %OptimizeFunctionOnNextCall(f40);
    let v75;
    try { v75 = v29[a34](..."find", a35, ...v27, ...v29, ...522675525n); } catch (e) {}
    v75 <= a34;
    return arguments;
}
let v77;
try { v77 = f31(964598.6714444079, 964598.6714444079, 964598.6714444079, v27); } catch (e) {}
v77[2];
let v81 = 5;
v81 + v81;
-9 >>> -9;
-9 >>> -9;
const v86 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v87 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v87.map(1.0); } catch (e) {}
const v90 = Symbol.species;
const v92 = v90.description;
Symbol.for(v92);
v86[v90] = 8.580387257773513;
let v95 = ~268435440;
v95++;
Uint8Array.prototype = Uint8Array;
const v98 = Uint8Array.length;
v98 * v98;
v98 >> v98;
new Uint8Array(268435440);
v90.description = 964598.6714444079;
v81 = -15;
Int8Array.prototype = Int8Array;
let v104;
try { v104 = Int8Array.from(2.0); } catch (e) {}
const v105 = v104?.__defineSetter__;
let v106;
try { v106 = new v105(751867013n, 751867013n); } catch (e) {}
const v107 = new Int8Array(v106);
v107[1];
const v109 = [v107];
v109[0] = v109;
995 - 995;
const v112 = 995 | 995;
v112 - v112;
const v115 = new Uint8ClampedArray(995);
try { new Int8Array(v107, v98, v107); } catch (e) {}
const v118 = new Int8Array(v115);
v118.byteLength;
const v120 = v118.copyWithin;
v120.d = v120;
let v121;
try { v121 = v120.toString(); } catch (e) {}
try { v121.match(v28); } catch (e) {}
v120.name = v120;
for (let v123 = 0; v123 < 32; v123++) {
    try {
        v29.slice(v123);
    } catch(e125) {
    }
    try { v77(v123, 5.0, v123); } catch (e) {}
    const v127 = v123 <= v123;
    v127 || v127;
    const v129 = -9 << v123;
    v129 >> v129;
    v86[-2] = v129;
    const v131 = v87[v90];
    try {
        v131.__proto__ = v131;
    } catch(e132) {
        e132.b = e132;
        const v133 = e132?.constructor;
        try { new v133(v15); } catch (e) {}
        e132.g = e132;
    }
    const v136 = new Uint8ClampedArray();
    const v137 = v136.byteOffset;
    v137 >= v137;
    const v139 = /c(?:ab)|cde/vdmy;
    v139.hasIndices = v139;
    const v140 = v139.exec();
    v92.sin(v140);
    const v144 = ("object")?.codePointAt;
    try { v144(v140); } catch (e) {}
    try { new v144(Math); } catch (e) {}
    const v147 = "object" + v123;
    const v148 = v147?.trim;
    v148.length = v148;
    try { new v148(); } catch (e) {}
    v87[v147] = v123;
}
const v150 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F151(a153, a154, a155, a156) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = v24;
}
F151.arguments = F151;
const v157 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
-1 | -1;
class C160 {
    static #e;
    m(a162, a163, a164, a165) {
        v157.#e;
        a163.#e = -1;
    }
}
v28 = v29;
for (let v167 = 0; v167 < 32; v167++) {
    v10["p" + v167] = v167;
}
let v171 = 0;
let v172 = v171 & v171;
v172++;
do {
    break;
    v150[Symbol.asyncIterator] = v86;
    v171++;
} while (v171 < 9)
let v181;
try { v181 = new Uint8ClampedArray(Uint8ClampedArray, v109, Uint8ClampedArray); } catch (e) {}
v181[2] = v181;
Uint8ClampedArray.name;
const v183 = new Uint8ClampedArray(995);
new Int8Array(v183);
