class C3 {
    static get h() {
        function F5() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const v7 = this in this;
                v7 || v7;
                new F5();
            } catch(e10) {
            }
        }
        const v11 = this.f;
        try {
            v11.valueOf = v11;
        } catch(e12) {
        }
        function F13() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = 16;
            } catch(e16) {
            }
            try {
                this.e = 16;
            } catch(e17) {
            }
        }
        new F13();
        return this;
    }
    static ["d"];
    h;
    static [-128];
}
const v20 = new Uint8Array();
function f21(a22, a23, a24, a25) {
    const v26 = a24 ^ a24;
    const o30 = {
        "b": a22,
        ...v20,
        n(a28, a29) {
            return v26;
        },
    };
    return f21;
}
f21();
new C3();
new C3();
new C3();
class C35 extends C3 {
    static #h = -128;
    constructor(a37, a38) {
        for (let v39 = 0; v39 < 5; v39++) {
            const v41 = new Map();
            v41["p" + -128] = -128;
            const o44 = {
                ...v41,
            };
        }
    }
    static #p(a46, a47, a48, a49) {
        super.f = a46;
        C3[6];
        let v51 = 536870887;
        v51++;
        const v53 = [1073741824,1073741823,1376142744,1073741825];
        for (let v54 = 0; v54 < 5; v54++) {
            function f55() {
                try {
                    v53.some();
                } catch(e57) {
                }
                return v54;
            }
            f55();
            %OptimizeFunctionOnNextCall(f55);
        }
        return 154;
        for (let v60 = 0; v60 < 5; v60++) {
            function f61() {
                const v62 = [];
                try {
                    v62.some(v60);
                } catch(e64) {
                }
                return v62;
            }
            f61();
            %OptimizeFunctionOnNextCall(f61);
        }
        [536870888];
        [4294967297];
        let v68 = [10,9223372036854775807,1073741823,-4096];
        --v68;
        Math.asinh(v68);
        class C75 extends Date {
        }
        const v76 = [155533.8602852358,2.0];
        function F78() {
            if (!new.target) { throw 'must be called with new'; }
            const v80 = this?.__lookupGetter__;
            try { new v80(); } catch (e) {}
            for (const v85 of Array(19793)) {
                v76[658291203] = null;
                Math.g = Math;
                let v88 = Math.cbrt();
                v88--;
                const v90 = 0.4890055133608564 || 0.4890055133608564;
                v90 + v90;
            }
            const v92 = [];
            v92.g = v92;
            const v93 = [C75,C75];
            class C96 {
            }
            class C97 extends C96 {
                static valueOf(a99, a100) {
                    super[268435441] = 1479696428;
                }
            }
            try { v93.fill(); } catch (e) {}
            const v102 = [v92];
            try { v102.entries(); } catch (e) {}
        }
        new F78();
        ~-65537;
        Math.atan(a48);
        a48 / -65537;
        gc();
        function f110(a111, a112) {
            for (let v113 = 0; v113 < 50; v113++) {
                const v115 = ("imul").padEnd();
                const v116 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
                [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
                const v118 = [1073741824,1073741823,1376142744,1073741825];
                try { v118["find"](..."find", v115, ...v116); } catch (e) {}
            }
            return a111;
        }
        const v121 = 255 - 255;
        class C122 {
        }
        for (let v123 = 0; v123 < 25; v123++) {
            const v124 = [601759695];
            const v125 = [1073741824,1073741823,1376142744,1073741825];
            function f127(a128, a129, a130, a131) {
                function f132() {
                    return a128;
                }
                const v134 = new Int8Array();
                const v137 = BigUint64Array * 536870887;
                v134.buffer;
                const v139 = new Int8Array();
                try { v139.entries(); } catch (e) {}
                try { v125["find"](..."find", a131, ...v124, ...v125, ...522675525n); } catch (e) {}
                const v144 = new Uint8ClampedArray(v124, v137, 536870887);
                try { v144.findLast(v137); } catch (e) {}
                const o146 = {
                    ...v144,
                };
                return f127;
            }
            for (let v147 = 0; v147 < 5; v147++) {
                f127();
            }
        }
        return v121;
    }
}
new C35();
new C35();
new C35();
class C154 {
}
new C154();
const v158 = new Float32Array();
class C159 {
}
new Uint8Array();
const v162 = [-1000000.0,-1.0,952.4163692749257,41232.51719836402,-2.220446049250313e-16,869.918809614255,0.6566814488589754,-2.299816654271874,1000000000.0];
function f163() {
    let v164 = -268435456;
    v164 ^ v164;
    v164++;
    const o167 = {
        __proto__: v162,
    };
    try { o167.every(); } catch (e) {}
    return v162;
}
%OptimizeFunctionOnNextCall(f163);
new Float64Array(3842);
class C172 {
    [9007199254740991] = v158;
    constructor(a174) {
        const v175 = this.constructor;
        try { new v175(v162); } catch (e) {}
        function f177(a178, a179) {
            a178++;
            return a174;
        }
        f177();
        f177(a174);
    }
}
let v183 = 0;
new Int8Array(v183, v183, v183--);
class C189 extends Array {
    2 = 64;
}
new C172();
