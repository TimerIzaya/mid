function f3() {
    return 1149797658n;
}
const v4 = [1.0,0.8290698774995446,-1000000000000.0,2.2250738585072014e-308,9.388961922912209,4.299198925616825];
let v5;
try { v5 = v4.splice(-63664n, -63664n); } catch (e) {}
const v6 = [1e-15,1000000.0,369.0578720309675,1000000.0,1000.0,1.7207032368219263e+308,1000000000.0,9.578145652307676];
const v7 = [-566.5748839705054,-3.0,-1.4313525724866979e+308,-2.6677659555940154e+307,1000.0,-0.0,0.2128750401063313,1.6680178138320098e+308,-4.0,-5.0];
try { v7.toLocaleString(); } catch (e) {}
class C9 extends f3 {
    static {
        this.d = this;
        f3();
        let v15 = -15;
        v15--;
        ~v15;
    }
    h = v6;
    2433;
    c;
    257;
}
const v18 = new C9();
v18[2433] = v18;
new C9();
const v20 = new C9();
v20.c = v20;
const v21 = [];
try { v21.findLast(v5); } catch (e) {}
const v23 = [v21];
v23[0];
try { Map.bind(v4); } catch (e) {}
class C27 extends Map {
}
C27.name = C27;
C27.prototype;
const v29 = new C27();
const v30 = new C27(v23);
const v31 = new C27(v30);
const v33 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v35 = new Uint32Array(v30, v21);
const v36 = v35?.findLastIndex;
try { v36(v36); } catch (e) {}
try { new v36(v7); } catch (e) {}
let v39 = -4294967297n;
v39--;
const v41 = v39--;
v41 + v41;
const v43 = [601759695];
v43[0] = v43;
const v44 = [1073741824,1073741823,1376142744,1073741825];
function f45(a46, a47, a48, a49) {
    a46[0] = a46;
    const v50 = a46.constructor;
    v50.e = v50;
    try { ("pop").normalize(); } catch (e) {}
    v43["pop"]();
    try { v50(v50); } catch (e) {}
    try {
    const t0 = 1149797658n;
    t0();
    } catch (e) {}
    const v57 = arguments.length;
    Object.defineProperty(v29, "e", { configurable: true, enumerable: true, value: f45 });
    ("toString")[3];
    const v60 = v30["toString"](a48, ...v31, BigUint64Array, ..."toString", a47, v57);
    let v61;
    try { v61 = v60.anchor(v60); } catch (e) {}
    try { v61.sub(); } catch (e) {}
    function f63() {
        const v65 = ("Vre").charAt();
        const v66 = v65[0];
        try { v66.trim(); } catch (e) {}
        let v68;
        try { v68 = v65.lastIndexOf(); } catch (e) {}
        v68--;
        ("Vre").codePointAt();
        ~v33.length;
        try {
            v44.forEach();
        } catch(e74) {
            e74.b = e74;
            e74.message = e74;
        }
        const o87 = {
            "c": v39,
            "EPSILON": v43,
            valueOf(a76, a77) {
                return a46;
            },
            1073741824: v35,
            [v39](a79, a80, a81, a82) {
                eval();
            },
            o(a86) {
                return v39;
            },
            256: a49,
        };
        return a47;
    }
    f63.arguments = f63;
    try { f63(); } catch (e) {}
    f63();
    Array.g = Array;
    const v91 = Array();
    try { v91.findLast(f45); } catch (e) {}
    let v94;
    try { v94 = Int8Array.of(); } catch (e) {}
    try { v94.toLocaleString(); } catch (e) {}
    try { v94.join(a47); } catch (e) {}
    for (let v97 = 0; v97 < 5; v97++) {
    }
    try { v44["find"](..."find", a49, ...v43, ...v44); } catch (e) {}
    return a49;
}
for (let v100 = 0; v100 < 10; v100++) {
    f45(v5);
}
%OptimizeFunctionOnNextCall(f45);
f45(v43);
