function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    function F3(a5, a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v10 = new Float32Array(this, a7, a7);
        const v12 = new Uint8Array(268435440);
        new Uint8ClampedArray(129);
        v12[6] = v10;
    }
    new F3();
    try {
        this.h = 5;
    } catch(e17) {
    }
    try {
        this.g = 5;
    } catch(e18) {
    }
    try {
        this.a = 5;
    } catch(e19) {
    }
}
new F0();
new F0();
new F0();
new BigUint64Array(2517);
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
}
const v34 = new F28();
const v35 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C36 {
}
const v38 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v39 = [601759695];
function f41() {
    let v44 = Float64Array;
    v44 = BigUint64Array;
    b = v39;
    v35.length;
    try {
        v35.forEach(BigUint64Array);
    } catch(e47) {
    }
    const v48 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    let v50 = Symbol.toPrimitive;
    const o56 = {
        toString(a52, a53) {
            const v54 = F0 && BigUint64Array;
            a52 *= v50;
            v54 <= v48;
            return f41;
        },
    };
    const o77 = {
        "c": -4294967297n,
        [522675525n](a59, a60) {
        },
        "c": v39,
        valueOf(a62, a63) {
            return a62;
        },
        "b": -4294967295,
        [-4294967297n](a65, a66, a67, a68) {
        },
        "e": -268435456,
        "maxByteLength": -4294967295,
        "arguments": v38,
        ...v34,
        [v50]() {
        },
        "type": C36,
        ..."Vre",
        valueOf(a71, a72) {
            return 2517;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        toString(a74, a75, a76) {
            return C36;
        },
        5: -4294967295,
        6: -268435456,
    };
    v50 = v44;
    new Float32Array(1334);
    new Float64Array(3);
    new Uint16Array(2);
}
new BigUint64Array(2826);
function f90() {
    return C36;
}
function f91(a92) {
    new Int32Array(Int32Array);
}
Object.defineProperty(Uint32Array, 1, { writable: true, enumerable: true, get: f90, set: f91 });
new Uint32Array(9);
let v96 = -1n;
function F98() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v103 of Array(19793)) {
    }
    const v105 = new Uint32Array(Uint32Array);
    for (let v106 = 0; v106 < 5; v106++) {
        v105[v106] = this;
    }
}
new F98();
function F109() {
    if (!new.target) { throw 'must be called with new'; }
    const o113 = {
        "maxByteLength": 1073741824,
    };
    function F114() {
        if (!new.target) { throw 'must be called with new'; }
        const v116 = this.constructor;
        let v118 = -16n;
        function f119() {
            v118 *= -1911645276n;
            return F114;
        }
        f119();
        new v116(f119, f119());
    }
}
[F109];
const v131 = [1557591051,8137,536870888,-9223372036854775808];
function f132(a133) {
    let v135 = 512;
    const v136 = v96++;
    let v137 = v135--;
    ++v137;
    return v136;
}
v131.valueOf = f132;
const v139 = v131 * v131;
const v140 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
v140[Symbol.toPrimitive] = f90;
function f143() {
    const o148 = {
        __proto__: v140,
        [v139](a145, a146, a147) {
        },
    };
    o148.copyWithin(o148, o148);
    return o148;
}
f143();
const v151 = new BigInt64Array(6);
try {
    v151.findLast(F109);
} catch(e153) {
}
