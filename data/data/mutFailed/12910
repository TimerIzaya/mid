const v2 = new BigUint64Array(512);
const v5 = new BigUint64Array(3);
try { new Int32Array(Int32Array, 3, BigUint64Array); } catch (e) {}
new Int32Array(1024);
const v11 = new Int32Array(3);
const v12 = v11.indexOf();
v2[Int32Array];
v5.slice(BigUint64Array, ...v2, Int32Array, 3, Int32Array);
[-1018012727,65537,9223372036854775807,5];
[23773,-2,-2147483648,7,-9007199254740991];
[2147483649,127];
const o29 = {
    m(a20, a21) {
    },
    get f() {
        let v23 = 21370;
        const v25 = --v23;
        -125424.26781270048 << 15;
        (v25 | 15) % 15;
        return 3;
    },
};
5 !== 5;
const v33 = -268435456;
/fTw(?:ab)|cde?/iy;
const v36 = /abc\P{sc=Greek}/gimsy;
v36.b = v36;
/3?/gus;
BigInt64Array.length = BigInt64Array;
class C39 {
}
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v33;
    } catch(e45) {
    }
    try {
        this.e = o29;
    } catch(e46) {
    }
}
new F41(v12, 4096);
new F41(v12, 268435456);
new F41(5, 4096);
class C50 {
    #d = 4096;
    static {
        try {
            this.#d;
        } catch(e53) {
        }
    }
}
try { C39.toString(); } catch (e) {}
new C39();
const v56 = new C39();
const v57 = v56?.constructor;
try { new v57(); } catch (e) {}
new C39();
for (let v60 = 0; v60 < 5; v60++) {
}
for (let v61 = 0; v61 < 5; v61++) {
    function f62() {
    }
    f62();
    %OptimizeFunctionOnNextCall(f62);
}
