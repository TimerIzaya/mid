function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(0.22539779377655011, this); } catch (e) {}
    a5--;
    try {
        this.g = a5;
    } catch(e8) {
    }
    try {
        F3.f = 1.34250513572951e+307;
    } catch(e9) {
    }
    try {
        this.b = 0.22539779377655011;
    } catch(e10) {
    }
}
const v11 = new F3(0.22539779377655011);
const v12 = new F3(1.34250513572951e+307, v11, 1.34250513572951e+307, F3);
const v13 = v12?.constructor;
let v14;
try { v14 = new v13(F3); } catch (e) {}
const v15 = new F3(v11);
v15.g;
-11 - -11;
5.0 + 5.0;
let v24 = 2.220446049250313e-16;
v24++;
[-34,536870887,268435440,14525];
const v27 = [-919846279,-13,7409,0];
const v28 = [-536870912,-4608,-9223372036854775808,15];
try { ("object").strike(); } catch (e) {}
let v31;
try { v31 = ("object").substring(v27, v28); } catch (e) {}
try { v31.matchAll(v13); } catch (e) {}
let v34;
try { v34 = ("has").matchAll("object"); } catch (e) {}
try { v34.next(); } catch (e) {}
const v39 = new Int8Array(2);
8 >> 8;
8 & 8;
new Int16Array(8);
3225 >>> 3225;
const v49 = new Uint16Array(3225);
v49[877];
for (const v51 of v49) {
    v51 + v51;
    const v53 = v51 ^ v51;
    v53 == v53;
    v51[3] = 5n;
    const v56 = 9007199254740991 * v51;
    v56 | v56;
}
const v60 = new Int32Array(23);
v60[1];
925.1427495594241 / 925.1427495594241;
1000000.0 >>> 1000000.0;
const v67 = [7,128];
const v68 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v69 = v68[4];
v69 / v69;
const v71 = v68[4];
v71 | v71;
const v73 = v71 | v71;
v73 & v73;
v73 / v73;
const v76 = [40213,422333454,47387,65536,-51830];
v76[1024] = v76;
0 - 0;
0 - 0;
let v80 = 15135;
v80--;
try { gc(); } catch (e) {}
gc();
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
const v89 = new BigInt64Array();
let v90;
try { v90 = v89.entries(); } catch (e) {}
try { v90.next(); } catch (e) {}
try { ("boolean").slice(v49, v39); } catch (e) {}
let v94;
try { v94 = ("boolean").repeat(1000000.0); } catch (e) {}
try { v94.strike(); } catch (e) {}
v94[1322328];
const t83 = "toString";
t83[6] = "toString";
!("toString" == "toString");
("boolean").split("toString");
~-2144639081;
const v103 = -256 >> -256;
v103 ^ v103;
function f105(a106, a107) {
    a106 % a106;
    a107++;
    const v110 = a107--;
    const v111 = v110 | v110;
    v111 + v111;
    const v113 = a106 | a106;
    v113 | v113;
    const o128 = {
        "c": v80,
        "a": v80,
        "d": a106,
        __proto__: a107,
        "g": -1628878962,
        "type": "boolean",
        "a": a106,
        set b(a116) {
        },
        "g": v80,
        "b": a107,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f121() {
                    return f121;
                }
                const o123 = {
                    [f121]() {
                    },
                };
                [o123];
                v68.copyWithin(8, -268435456, -256);
            } catch(e127) {
            }
            return this;
        },
    };
    o128.g = o128;
    return o128;
}
let v129;
try { v129 = f105(v80, v80); } catch (e) {}
v129[1000000];
f105(925.1427495594241, v67);
f105(317008.8127941969, -4).a;
v14(1000000.0, v68).a;
268435441n | 268435441n;
268435441n - 268435441n;
BigUint64Array.length;
const v141 = new BigUint64Array();
v141[2618853149] = 268435441n;
