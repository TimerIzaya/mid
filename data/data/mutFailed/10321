class C6 {
    static #f = 422264228n;
    valueOf(a8, a9) {
        try {
            this.#f = a9;
        } catch(e10) {
        }
        return this;
    }
    1262;
    static g;
    static b = -65537n;
    [536870889n];
}
new C6();
new C6();
new C6();
class C19 extends Set {
}
const v20 = new C19();
const v21 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v22 = [601759695];
const v23 = [1073741824,1073741823,1376142744,1073741825];
function f25(a26, a27, a28, a29) {
    a28--;
    function f32() {
        const v34 = ("Vre")?.constructor;
        try { v34(v20); } catch (e) {}
        +"-1073741824";
        new Uint8ClampedArray(5);
        const t30 = "-1073741824";
        new t30(143);
        new BigInt64Array(1122);
        const o51 = {
            "e": -4294967295,
            ...v21,
            ..."Vre",
            "c": a29,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a49, a50) {
                return a26;
            },
            ..."Vre",
            4: "Vre",
            "c": v20,
            5: -4294967295,
            6: -268435456,
        };
    }
    try { a26(); } catch (e) {}
    f32();
    %OptimizeFunctionOnNextCall(arguments);
    let v55;
    try { v55 = ("find")["find"](..."find", a29, ...v22, ...v23, ...522675525n); } catch (e) {}
    const v56 = v55 <= a28;
    v56 || v56;
}
const v59 = new BigInt64Array();
const v62 = new BigUint64Array();
for (let v63 = 0; v63 < 10; v63++) {
    f25(v63, v63, BigUint64Array, "-1073741824");
}
f25(v62, 3331, v59);
%OptimizeFunctionOnNextCall(f25);
f25(f25, v62, C19, 3331);
