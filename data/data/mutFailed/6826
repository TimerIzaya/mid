let v1 = 23439;
class C3 {
    static d = v1;
    static set e(a5) {
        const v6 = super.c;
        %VerifyType(this);
        function F7(a9, a10, a11) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a9;
            } catch(e12) {
            }
            try {
                this.a = a10;
            } catch(e13) {
            }
            try {
                this.e = a5;
                v1 = C3;
                C3 = 0.47885667217887473;
                const t20 = "bigint";
                t20[120] = a10;
                const v17 = a9 - F7;
                Math.sin(F7);
                a9--;
                Math.pow(v17, v17 >>> a9);
            } catch(e22) {
            }
        }
        const v23 = new F7(v6, 0.47885667217887473, v6);
        new F7(v23, v23, 0.47885667217887473);
        new F7("bigint", this, this);
    }
}
const t34 = "bigint";
t34[1441] = "bigint";
const o26 = {
};
try {
    o26.b = v1;
} catch(e27) {
}
try {
    const o28 = {
    };
    o28.b = v1;
    o28.h = v1;
} catch(e29) {
}
try {
    const o30 = {
    };
    o30.b = v1;
    o30.h = v1;
    o30.a = 0.47885667217887473;
} catch(e31) {
}
try {
    const o32 = {
    };
    o32.b = v1;
    o32.h = v1;
    o32.a = v1;
} catch(e33) {
}
const v34 = new C3();
const v35 = v34?.__lookupGetter__;
let v36;
try { v36 = new v35(v34); } catch (e) {}
const v37 = new C3();
C3 **= v36;
o26[255];
const v42 = !1073741823;
Math.cosh(o26);
v37 + o26;
-1073741823;
-v37;
v42 % v42;
const v48 = new C3();
new Uint8ClampedArray(7);
const v53 = 2 & 2;
try { new BigUint64Array(v48, v1, v48, v53); } catch (e) {}
new BigUint64Array(2);
let v57 = 7;
v57--;
new Float32Array(v57);
const o70 = {
    get c() {
        class C64 {
            constructor(a66, a67) {
            }
        }
        eval();
    },
};
const v71 = o70?.__lookupGetter__;
try { new v71(v57); } catch (e) {}
for (let v73 = 0; v73 < 5; v73++) {
    const o75 = {
    };
    o75.g = o75;
    gc(o75);
}
