function f0() {
    try { BigInt64Array(BigInt64Array); } catch (e) {}
    ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach(f0);
    function F8(a10, a11) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.hasOwnProperty(a10); } catch (e) {}
        const v13 = this.constructor;
        try { new v13(); } catch (e) {}
        a10--;
        a10 & a10;
    }
    const o37 = {
        "d": "-21767",
        set f(a18) {
            33904 && -2.0;
            -2.0 >>> 9;
            -a18;
            6 / -2.0;
            -2.0 * -2.0;
            const v30 = new Float32Array(99);
            for (const v31 of v30) {
                function F32(a34, a35) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.g = v31;
                }
                new F32();
            }
        },
        ..."-21767",
    };
    return o37;
}
const v38 = f0();
f0();
f0();
new Float64Array(142);
const v46 = new Int16Array(2823);
Object.defineProperty(v38, -2133197891, { writable: true, value: v46 });
new Float64Array(v38, 2823, 16);
new Uint8Array(16);
for (const v55 of "I") {
    v55.a %= v55;
}
