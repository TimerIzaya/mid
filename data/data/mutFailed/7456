const v1 = new WeakSet();
class C2 {
    static toString(a4, a5) {
        let v3 = this;
        let v8 = 58864;
        const v9 = ++v3;
        v8 + WeakSet;
        let v11 = v8--;
        Math.floor(v9);
        const v13 = +v8;
        ++v11;
        +v13;
        return a4;
    }
}
const v16 = new C2();
const v17 = new C2();
const v18 = v17?.constructor;
try { new v18(); } catch (e) {}
const v20 = new C2();
function f21(a22, a23, a24, a25) {
    const v26 = a23?.__defineGetter__;
    try { new v26(v20, f21); } catch (e) {}
    const o38 = {
        "e": v1,
        [v1]: v16,
        "g": WeakSet,
        ...v16,
        "b": v1,
        get c() {
            new Uint16Array(1000);
            new BigUint64Array(1000);
            new Int8Array(1654);
            return 1654;
        },
    };
    return o38;
}
try { f21(v20, v1, v1, C2); } catch (e) {}
const v40 = f21(v20, v17, v1, v1);
const v41 = v40?.g;
try { new v41(); } catch (e) {}
const v43 = f21(C2, v20, C2, v40);
const v44 = v43?.g;
try { new v44(); } catch (e) {}
f21(v43, v20, v20, v43);
4n >= 4n;
new Int16Array();
[-4,-46650,2,3,-65535];
65537 == 4096n;
try { Date.toString(); } catch (e) {}
class C62 {
}
const v63 = new C62();
const v64 = new C62();
const v65 = v64?.constructor;
try { new v65(); } catch (e) {}
const v67 = new C62();
function F68(a70, a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = a70?.constructor;
    try { new v74(a71); } catch (e) {}
    const v76 = a71?.propertyIsEnumerable;
    try { new v76(null); } catch (e) {}
    const v78 = a72?.constructor;
    try { new v78(); } catch (e) {}
    const v80 = a73?.constructor;
    try { new v80(); } catch (e) {}
    const t68 = a73.constructor;
    const v83 = new t68();
    const v84 = v83?.constructor;
    try { new v84(); } catch (e) {}
    const t72 = 4096n;
    t72[2147483648] = a71;
    a73[2147483648] = a73;
}
new F68(C62, v64, v63, v64);
new F68(v64, v64, v67, v63);
const v88 = [-768382956,65537,10000,-268435456,-1815566166,-536870912,4];
try { v88.flatMap(v40); } catch (e) {}
[128,7,55834];
try { Uint8ClampedArray.pop(); } catch (e) {}
function F92() {
    if (!new.target) { throw 'must be called with new'; }
}
class C94 extends F92 {
}
C94.e = C94;
class C95 {
    static {
        for (let v97 = 0; v97 < 25; v97++) {
            function f98() {
            }
            try { f98.call(f21); } catch (e) {}
            const v100 = [601759695];
            const v101 = [1073741824,1073741823,1376142744,1073741825];
            let v102 = 522675525n;
            v102--;
            function f104(a105, a106, a107, a108) {
                function f110() {
                    return a105;
                }
                const v111 = f98();
                Int8Array.BYTES_PER_ELEMENT = Int8Array;
                const v113 = new Int8Array();
                const v114 = v113?.set;
                try { new v114(v101); } catch (e) {}
                const v118 = new Uint32Array(4);
                [v118];
                try { new BigUint64Array(v113, v16, arguments); } catch (e) {}
                const v123 = BigUint64Array * 536870887;
                v123 ** v123;
                function f125(a126, a127) {
                    return v111;
                }
                f125();
                const v129 = v113.buffer;
                v129.resizable = v129;
                Object.defineProperty(v129, "constructor", { writable: true, configurable: true, value: Date });
                2147483648 * 2147483648;
                new Int8Array();
                v129.slice(2147483648);
                %OptimizeFunctionOnNextCall(f110);
                const v135 = ("find")?.toLocaleUpperCase;
                try { new v135(); } catch (e) {}
                let v137;
                try { v137 = v101["find"](..."find", a108, ...v100, ...v101, ...v102); } catch (e) {}
                Symbol("find");
                const o140 = {
                };
                o140.h = o140;
                const v141 = v137 <= a107;
                v141 || v141;
                return arguments;
            }
            for (let v143 = 0; v143 < 5; v143++) {
                f104();
            }
        }
    }
}
