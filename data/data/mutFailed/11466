const v2 = new Int8Array(61);
new Uint8ClampedArray(3752);
const v8 = new Uint32Array(257);
[Uint8ClampedArray,61,3752,Uint8ClampedArray];
[61,v8];
[v8,v2,3752];
const v12 = [-824.0719150908675,-1e-15,-1000000000000.0,6.254351366076641,0.07865904224503195,0.28381983421661583,1e-15];
const v13 = [-928188.3909074867,-2.220446049250313e-16,4.0,1.1783308442665198e+308,-9.94845452116106,0.7746506480802446,0.8128724234493491,0.0,37.040029436598616,462.2388249579508];
[-4.287487208915998e+307,-746267.0707631316,-1000000000000.0,-0.0,-1000000000000.0,857.993878492156];
const v16 = [[]];
class C18 extends Map {
}
const v19 = new C18();
const v20 = new C18(v16);
const v21 = new C18(v20);
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v26 = new Uint32Array();
const v28 = [601759695];
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    try { a32.toLocaleString(); } catch (e) {}
    const v37 = a32?.constructor;
    let v38;
    try { v38 = v13(); } catch (e) {}
    try { v37(); } catch (e) {}
    const v41 = arguments.length;
    Object.defineProperty(v19, "e", { configurable: true, enumerable: true, value: f31 });
    const v43 = v20["entries"](a34, ...v21, BigUint64Array, ..."entries", a33, v41);
    new Float32Array();
    class C47 {
    }
    class C48 {
    }
    const v50 = Symbol.toStringTag;
    v20[v50] = v50;
    function f51() {
        let v53;
        try { v53 = ("Vre").charAt(4096, "Vre", C47, v38); } catch (e) {}
        try { v53.lastIndexOf("Vre", a32); } catch (e) {}
        let v55;
        try { v55 = ("Vre").codePointAt(v24); } catch (e) {}
        v55 - v55;
        v55 ^ v55;
        let v58 = Float64Array;
        v58 = a33;
        let v59 = ("e").length;
        const v60 = v59++;
        try {
        } catch(e61) {
        }
        const o89 = {
            268435439: v28,
            ..."e",
            n(a63, a64) {
                return a64;
            },
            m(a66) {
                return v60;
            },
            m(a68) {
                return Map;
            },
            [f51]() {
            },
            ["entries"](a71, a72) {
            },
            valueOf(a74, a75) {
                return a74;
            },
            get h() {
                return v24;
            },
            [v29](a78, a79, a80) {
            },
            "toPrimitive": v38,
            get f() {
                return this;
            },
            [-4294967297n](a83, a84, a85, a86) {
                eval(a85);
            },
        };
        return v20;
    }
    v24();
    const v92 = v12();
    let v93;
    try { v93 = v92.findLast(f31); } catch (e) {}
    v92.unshift("entries", v43, "entries", v93);
    let v96;
    try { v96 = v12.of(); } catch (e) {}
    try { v96.join(v16, v96); } catch (e) {}
    const v98 = new Int8Array(v28);
    v98.c = v98;
    const v100 = v98.buffer.slice();
    try { Int32Array(v100, arguments, -4294967297n); } catch (e) {}
    function f103(a104, a105, a106, a107) {
        return a106;
    }
    const v108 = new Int32Array();
    const v109 = v108[3];
    v109 + v109;
    for (let v111 = 0; v111 < 5; v111++) {
    }
    try { v29["find"](..."find", a35, ...v28, ...v29, ...522675525n); } catch (e) {}
}
for (let v114 = 0; v114 < 10; v114++) {
    f31(v26);
}
%OptimizeFunctionOnNextCall(f31);
f31(Map, Map, v21, v21);
