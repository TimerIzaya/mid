const v0 = [];
const v1 = /D/gd;
const v2 = /a\D\P{gc=Decimal_Number}/viy;
const v3 = /5(x)(x)(x)\2/viy;
const v5 = [v0,[v0,v1,v0],v3];
const v6 = [v1,v0,v1,v1,v0];
-4096 >>> -4096;
-4.6096740251465445 * -4.6096740251465445;
let v16;
try { v16 = ("p").trimLeft(); } catch (e) {}
const v20 = new Set();
function f21(a22) {
    const o29 = {
        set b(a24) {
        },
        toString(a26, a27) {
            return a26;
        },
        get d() {
            return a22;
        },
    };
    const v30 = o29?.__defineSetter__;
    try { new v30(Set, -4096); } catch (e) {}
    return o29;
}
const v32 = f21(v20);
let v33;
try { v33 = v32.toString(v6, -9223372036854775807); } catch (e) {}
const v34 = f21(v16);
const v35 = f21(v20);
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = a38?.constructor;
    try { new v40(this, "p"); } catch (e) {}
    a38.b = a38;
    a39.d = a39;
}
const v42 = new F36(v32, v35);
const v43 = new F36(v34, v32);
const v44 = new F36(v32, v34);
try { v33.bind(v42); } catch (e) {}
const v48 = new Int32Array(2020);
try {
    v20.size;
    -406885.1001387938 >>> -406885.1001387938;
    v35 & 1024;
    268435440 - -406885.1001387938;
    const v57 = Math.fround(-406885.1001387938);
    v57 >>> v57;
    const v61 = new Uint8ClampedArray(231);
    try { ("reverse").codePointAt(Uint8ClampedArray); } catch (e) {}
    const v64 = v61["reverse"]();
    try { v64.filter(v5); } catch (e) {}
    ~Int32Array;
    class C68 {
        constructor(a70) {
        }
        h = undefined;
    }
    class C71 extends C68 {
    }
    C71.prototype;
    C71();
    v35 / 268435440;
} catch(e75) {
    e75.stack = e75;
    2306 - 2306;
    const v79 = new Float32Array(2306);
    v79.BYTES_PER_ELEMENT;
    v79.reverse();
    function F82(a84, a85) {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new F82(2306, v79); } catch (e) {}
    [-5.0,0.6506817157229189,-1.0,325954.7806464648,-2.977619842045307,207.7293164806515,-2.2250738585072014e-308,-3.8235851972465246e+307,1.0];
    [-1.0,-1000000000000.0,0.8531264749275649,-5.0];
    [7.640606689322991e+307,-0.0,2.0,1000000.0,-1.7976931348623157e+308,2.0,0.0,34737.52793939819,959540.4413600569,1e-15];
}
let v91 = -1.883023285666516;
v91--;
const o93 = {
    "f": v91,
};
const o95 = {
    1073741825: v44,
};
const v96 = o95[1073741825];
function F98(a100, a101, a102, a103) {
    if (!new.target) { throw 'must be called with new'; }
    const v104 = this?.constructor;
    try { new v104(a100, 2020, v2, v20); } catch (e) {}
    for (let v106 = 0; v106 < 100; v106++) {
        const o109 = {
            valueOf(a108) {
                return a108;
            },
        };
    }
}
new F98("n");
const v111 = v43?.constructor;
let v112;
try { v112 = new v111(f21, "valueOf", "valueOf", "valueOf"); } catch (e) {}
new Uint16Array(70);
8 >> v96;
try { new AggregateError("p", "p"); } catch (e) {}
[-4096,-156526366,-9007199254740992,-2108113053,-1409475351,11,-37308,16];
[-6,-429106885,58245331,9,5,-41416,33852];
[-1073741824,255,11,-9007199254740991,232691623,1046358555,-42399,13,-46796,1669956301];
try {
    v16[5];
    256 >= 256;
    BigInt64Array(256);
    const v131 = new Uint32Array();
    const v132 = v131[40];
    for (let v133 = 0; v133 < 5; v133++) {
        try { v132(); } catch (e) {}
    }
    AggregateError("undefined");
    v48?.constructor;
    [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
    [1073741824,-46456,536870888];
    function f139(a140, a141) {
        return a140;
    }
} catch(e142) {
    try { e142.propertyIsEnumerable(-8.792496344761888); } catch (e) {}
}
new v112(8);
const v145 = /(?:a*)+q(?<a>.)/guds;
v145.lastIndex = v3;
const o146 = {
    "maxByteLength": v44,
    __proto__: v145,
};
for (let i149 = 0, i150 = 10; i149 >> i149, i149 < i150; i150--) {
    -i149;
}
