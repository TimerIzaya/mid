const v3 = [16];
[4,536870888,-15,-16,129,13,9223372036854775807,-4096];
[16,127,-1024,-65537,55579,9007199254740992,-25064];
class C6 {
    constructor(a8, a9, a10, a11) {
        function F12() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v14 = new F12();
        const v15 = [6.345269750596144e+307,1.5426121797865451e+308,-1.0,1.0763754168130034e+308,-1.0165609707268582e+308,-2.220446049250313e-16,4.1652134965708285,Infinity,8.22884515469082e+307,-1000000000.0];
        function F16(a18, a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
            const v21 = this.constructor;
            try { new v21(v14); } catch (e) {}
            a18[3] = a18;
        }
        new F16(v15);
    }
}
new BigInt64Array();
Reflect.construct(Symbol, [Reflect,Reflect,Reflect,Reflect,Reflect]);
function f39() {
}
new Int8Array(128);
const v43 = /(?:a*)+q(?<a>.)/guds;
function f44(a45) {
    a45.dotAll;
    const v48 = new Int32Array();
    const t28 = [1000000000.0,4.0,5.0,-6.555298893133851e+307];
    t28[11] = v48;
    function F50(a52) {
        if (!new.target) { throw 'must be called with new'; }
        function f53(a54, a55, a56) {
            function f58(a59) {
                return a54;
            }
            a55 > a52;
            f58 && a54;
            return a52;
        }
        Worker(f53);
    }
    const o79 = {
        get d() {
            ([1073741824,1073741823,1376142744,1073741825]).forEach(Float64Array);
            const v70 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const v72 = Symbol.toPrimitive;
            const o78 = {
                toString(a74, a75) {
                    const v76 = v3 && Float64Array;
                    a74 *= v72;
                    v76 <= v70;
                },
            };
            return v43;
        },
    };
    return v43;
}
new Uint8Array(15);
new Float32Array(3098);
new BigUint64Array(4);
const v91 = Date.prototype;
try { v91.setFullYear(); } catch (e) {}
new Set();
(~9007199254740990).constructor;
const v99 = ("minor").valueOf("minor", "minor", "minor", "minor");
async function f100(a101, a102, a103, a104) {
    (await v99).call();
    return "minor";
}
function F109(a111) {
    if (!new.target) { throw 'must be called with new'; }
    function f112() {
        return v99;
    }
    function f113() {
        class C117 {
            [1.7976931348623157e+308] = 23354;
            #h;
            1;
            [23354];
            [-4.055130549492246];
        }
        const v118 = [f113,f113];
        let v120 = Int32Array;
        const v121 = new v120(2917);
        v121["lastIndexOf"](v120--, v120, ..."lastIndexOf", 10);
        let v126;
        try { v126 = v118.every(f113); } catch (e) {}
        return v126;
    }
    const v127 = this.constructor;
    try { new v127(); } catch (e) {}
    this.g = 257;
    this.g = -1;
    this.h = a111;
}
new F109(257);
new F109();
class C132 extends TypeError {
}
const v136 = new Int32Array(Int32Array);
v136.indexOf(1);
const t103 = Array(5);
t103.length = 1;
new Float64Array([-9223372036854775808,-12]);
const v146 = [Uint8ClampedArray];
v146[0] = v146;
Reflect.construct(Uint8ClampedArray, v146);
const v148 = new BigInt64Array(1);
v148[0] = v148;
class C149 extends F109 {
    [6];
    valueOf(a151, a152, a153, a154) {
        const v155 = this?.constructor;
        try { new v155(); } catch (e) {}
    }
    constructor() {
        super();
        try { String.fromCodePoint(-2.2250738585072014e-308); } catch (e) {}
        const v162 = new Float32Array();
        function f163(a164, a165, a166, a167) {
            a164[1];
            a165--;
            a164[0] = a164;
            a165 <= a165;
            arguments[1] = arguments;
            const v172 = arguments?.__lookupGetter__;
            try { v172.constructor(v162, a166, 15, f163); } catch (e) {}
            let v174;
            try { v174 = v172(v172, f163, a165); } catch (e) {}
            return v174;
        }
        f163(v162);
        Math.acosh();
    }
}
new C149();
