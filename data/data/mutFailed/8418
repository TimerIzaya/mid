new Uint8Array(225);
new Float32Array(512);
new Float32Array(255);
function F18(a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this.constructor;
    try { new v21(-143547321); } catch (e) {}
    a20 - a20;
    this.g = -1517929768;
    try {
        this.g = -1;
    } catch(e24) {
    }
    try {
        this.h = a20;
    } catch(e25) {
    }
}
let v26;
try { v26 = F18.bind(-143547321); } catch (e) {}
const v27 = new F18(-1);
const t21 = -1517929768;
const v28 = new t21(-143547321);
v28.d = v28;
new F18(-1);
class C30 extends -1 {
    #p(a32, a33) {
        const v34 = a32?.[32];
        Object.defineProperty(255, v27, { writable: true, configurable: true, value: F18 });
        return v34;
    }
    [-1];
    static {
        let v37;
        try { v37 = this["n"](C30); } catch (e) {}
        const o38 = {
        };
        const o39 = {
            "c": v27,
            ...v37,
            65537: o38,
            __proto__: this,
            "a": "d",
            "g": this,
            ...this,
        };
    }
}
try { C30(); } catch (e) {}
new C30();
const v42 = new C30();
v42.g;
new C30();
const v46 = new Map();
function f47(a48, a49, a50, a51) {
    a48 >>> a48;
    a51--;
    const o67 = {
        "c": -143547321,
        toString(a55, a56, a57, a58) {
            let v54 = this;
            v26 << -1557853178;
            let v62 = v54++;
            Math.log2(v62);
            const v64 = v62++;
            Math.pow(v62, -1557853178);
            F18 ^ v64;
            return a58;
        },
        "b": v42,
    };
    try { o67.toString(v46, a48, v28, v28); } catch (e) {}
    return o67;
}
f47(-1517929768, -1517929768, F18, -1);
const v70 = f47(-1517929768, -143547321, F18, -1517929768);
v70.f;
f47(-1517929768, -1517929768, v70);
("HEkWL").localeCompare("isArray", "isArray");
