let v2 = 1.7976931348623157e+308;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = 0.2103468099173127;
    try {
        this.e = v2;
    } catch(e6) {
    }
    try {
        this.f = this;
    } catch(e7) {
    }
}
const v8 = new F3(v2);
let v9 = new F3(v2);
new F3(0.2103468099173127);
[268435439];
const v12 = [-9007199254740990,12,-364196677,-4294967296,10000,29091];
[946625513,4294967295,1901447464,129,-593531426,-7,51143,2147483649,18283,-9007199254740992];
class C14 extends F3 {
    #n(a16, a17, a18, a19) {
        super.e **= v2;
        let v20;
        try { v20 = a18(v9, a19, a16); } catch (e) {}
        Object.defineProperty(v8, 3205869354, { writable: true, configurable: true, enumerable: true, value: v20 });
        v12[v2] += 0.2103468099173127;
        try { v12.push(v2); } catch (e) {}
        ++v2;
        Math.random();
        ++v9;
        return this;
    }
}
new C14();
new C14();
new C14();
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
        const v44 = -(-7);
        Math.tan(v44 ** v44);
    } catch(e47) {
    }
}
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    v52.length = v52;
    try { new v52(F39, a50, F39, v52); } catch (e) {}
    new F48();
}
function f55(a56, a57, a58, a59) {
    const o60 = {
    };
}
const t56 = 1000;
t56(-9007199254740992);
