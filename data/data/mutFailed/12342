class C4 {
    constructor(a6, a7) {
        Math.imul(3n, -8);
        -8 + -8;
        Math.trunc(-8);
        Math.trunc(3n);
    }
    static valueOf(a16) {
        this[268435439] = -38468n;
        this[this] = this;
        new Float32Array(257);
        new Int32Array(128);
        new BigInt64Array(0);
        return null;
    }
}
new C4(9n, 3n);
new C4(9n, 9n);
const v28 = [1.2193317869829605e+308,-4.0,-0.0];
const v29 = [-5.0,1000.0,-3.0,-248408.12241369626,1000.0,-1.0,-1e-15,1.5326940564150708e+308,1000.0];
[-392.2976168323722,NaN,-1.7976931348623157e+308,Infinity,Infinity,-1.7976931348623157e+308,0.32625217376879745,878296.8452976581,3.0];
let v32 = -536870912;
const v36 = new Uint32Array(3120, Uint32Array);
let v37 = 3505;
v37++;
const v40 = new Uint16Array(v37);
new Uint8Array(1175);
class C44 {
    #toString(a46, a47) {
        ({"length":a46,} = v29);
        v32 ^= a46;
        delete v36[v36];
    }
    static #b = v28;
}
new Int16Array(Int16Array, 3120, v40);
new C4(-38468n, 9n);
new Uint8ClampedArray(47);
new Float32Array(257);
new Uint32Array(627);
[601759695];
const v70 = [1073741824,1073741823,1376142744,1073741825];
function f71(a72, a73, a74, a75) {
    function f76() {
        +("Vre").constructor;
    }
    try { f76(); } catch (e) {}
    f76();
    try { v70["find"]("find"); } catch (e) {}
}
for (let v84 = 0; v84 < 10; v84++) {
    f71();
}
%OptimizeFunctionOnNextCall(f71);
f71();
