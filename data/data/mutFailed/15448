new Uint8ClampedArray(251);
new Uint8ClampedArray(9);
const v11 = new Uint8Array(3846);
function f12(a13, a14, a15) {
    const o22 = {
        get a() {
            const o21 = {
                valueOf() {
                    let v18;
                    try { v18 = this.random(9); } catch (e) {}
                    super[this] = v18;
                    try {
                        const t12 = "ifKOp";
                        t12.length = 2977090903;
                    } catch(e20) {
                    }
                    return a13;
                },
            };
            return a13;
        },
    };
    return o22;
}
const v23 = f12(3846, "MIN_VALUE", 9);
f12(v23, "d", v23);
f12(3846, "MIN_VALUE", v11);
const v26 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v27 = -4294967297n;
v27--;
const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    function f37() {
        try { ("Vre").codePointAt(); } catch (e) {}
        let v40 = Float64Array;
        v40 = a34;
        b = v30;
        v26.length;
        try {
            f37.forEach(a34);
        } catch(e43) {
        }
        const o54 = {
            "c": v27,
            "c": v30,
            valueOf(a45, a46) {
                return a45;
            },
            [v26](a48, a49, a50, a51) {
                v31();
            },
            "arguments": v26,
            256: a36,
        };
    }
    const t57 = 9;
    t57();
    %OptimizeFunctionOnNextCall(f37);
    return a34;
}
for (let v56 = 0; v56 < 5; v56++) {
    f32(v56, v27, v29, v56);
}
