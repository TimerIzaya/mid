class C3 {
    static set d(a5) {
        try { a5(a5, a5, this, 1750264324, ..."number", 1750264324); } catch (e) {}
        const v9 = [];
        ("number").trimStart;
        Reflect.apply(RegExp, RegExp, v9);
    }
    #d = 1750264324;
    [1750264324];
    static #c;
    2147483648;
}
const t12 = 0.3788395517959664;
const v12 = new t12();
const v13 = new C3();
const v14 = new C3();
const v15 = [v12,v14,v14];
[v14,[v12,"number",v15,v13,C3],v15,v12,v14];
function f20(a21, a22, a23, a24) {
    for (let i27 = 0, i28 = 10;
        (() => {
            const v29 = i27 < i28;
            class C30 {
            }
            const v31 = new C30();
            class C32 {
                static #e;
                static {
                    try {
                        v31.#e = this;
                    } catch(e34) {
                    }
                }
            }
            return v29;
        })();
        i28--) {
    }
    return a22;
}
for (let v40 = 0; v40 < 5; v40++) {
    f20();
}
%OptimizeFunctionOnNextCall(v12);
f20();
new Int16Array(955);
new Uint8ClampedArray(5);
new v14(230);
const v51 = new Int16Array(Int16Array, Int16Array, Int16Array);
class C52 {
}
with (C52) {
    const v54 = v51["subarray"]();
    function f55() {
        return v54;
    }
}
