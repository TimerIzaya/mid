class C3 {
    get g() {
        const v5 = this.constructor;
        class C6 extends v5 {
            static #g;
            #f;
        }
        new C6();
        return v5;
    }
    [-4];
    static f;
    #e;
}
C3.name = C3;
new C3();
const v9 = new C3();
const v10 = new C3();
1155658358 >> 1155658358;
function f15() {
    return C3;
}
f15.h = f15;
class C16 {
    #d = v9;
    set c(a18) {
        new BigInt64Array(548);
        new Int16Array(255);
        new BigInt64Array(127);
    }
}
const v28 = new C16();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
new C16();
const v32 = new v28();
v32.c;
const v35 = [2.220446049250313e-16,4.688311165693396,-4.0];
v35?.find;
let v37;
try {
const t0 = -4;
v37 = new t0(v10);
} catch (e) {}
const v38 = [v37];
const v39 = v38.constructor;
try { new v39(v32); } catch (e) {}
const v43 = Symbol.isConcatSpreadable;
const v44 = Array(v35, 12, v39);
Object.defineProperty(v44, 83, { configurable: true, enumerable: true, value: v38 });
v44[267] = v43;
const v46 = v44["concat"]();
try { v46.every(v32); } catch (e) {}
