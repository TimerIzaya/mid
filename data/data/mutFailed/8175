function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7() {
        try { Reflect.set(); } catch (e) {}
        return this;
    }
    this.valueOf = f7;
    try {
        this.g = a5;
    } catch(e10) {
    }
    try {
        this.e = a5;
        let v11;
        try { v11 = new a6(F3, 9007199254740990); } catch (e) {}
        const v12 = v11--;
        const o13 = {
        };
        try {
            o13.d = this;
        } catch(e14) {
        }
        try {
            const o15 = {
            };
            o15.d = this;
            o15.b = a5;
        } catch(e16) {
        }
        try {
            const o17 = {
            };
            o17.g = 1;
            o17.d = this;
            o17.b = a5;
            o17.g = v12;
        } catch(e18) {
        }
        try {
            const o19 = {
            };
            o19.d = this;
            o19.b = a5;
            o19.f = v11;
        } catch(e20) {
        }
    } catch(e21) {
    }
    class C22 {
    }
    const v23 = new C22();
    const t51 = v23.constructor;
    new t51();
}
const v26 = new F3(9007199254740990, F3);
const v27 = new F3(1, 3);
const v28 = new F3(3, 9007199254740990);
function F29(a31, a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v26;
    } catch(e35) {
        ([Float32Array])["concat"]();
        let v40 = -4294967297n;
        v40--;
    }
    try {
        this.h = 9007199254740990;
    } catch(e42) {
    }
    try {
        this.c = F3;
    } catch(e43) {
    }
}
new F29(v26, v27, 1, v26);
new F29(v26, v26, v27, v28);
new F29(v27, v27, v26, v26);
const v52 = Float64Array.of();
function f53() {
    function f54(a55) {
        for (let v56 = 0; v56 < 50; v56++) {
        }
        return 3811;
    }
    return f54;
}
function f57(a58) {
    const v60 = [-48288,15,-63536,268435456];
    class C61 extends Array {
        constructor(a63, a64, a65) {
            super(a63);
        }
    }
    const v66 = new C61();
    const v67 = new C61();
    v66[v60] = v67;
}
Object.defineProperty(v52, "toString", { writable: true, configurable: true, get: f53, set: f57 });
let v68 = Date;
const v69 = new v68(v68);
new v68();
++v68;
v69.setFullYear(v52, 3811);
