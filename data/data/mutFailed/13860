function F1() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v3 = 0; v3 < 1000; v3++) {
        const v5 = "p" + v3;
        v5.fontcolor();
        this[v5] = v3;
    }
}
const v7 = new WeakMap();
const v8 = [1000000000000.0,-Infinity,-5.0,2.220446049250313e-16,-779.8157327465314];
[1.4187730497384378e+308,-360883.6467822958];
const v10 = [-383764.48552437755,-527767.169300396,0.9434618834305624,0.6100573151558604,437783.5309492701,3.0,1.0,1000000.0,1.556841875349761,1000000000.0];
function f14() {
    return v10;
}
[[[-5n,-19675n,v8,-19675n],v10,v7,910876882n,WeakMap]];
const v20 = [-195.17246022083714,-1e-15,58520.45042095962,-2.0,-2.2250738585072014e-308];
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
}
new F21();
const o29 = {
    toString() {
    },
};
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    a32--;
    function f36() {
        return f36;
    }
    class C37 extends f36 {
        constructor() {
            super();
            Math.acosh();
        }
        [f36] = f36;
    }
    const v41 = new C37();
    const v42 = new C37();
    const v43 = new C37();
    const v44 = v43?.__defineGetter__;
    try { v44(v41, v42); } catch (e) {}
    a34 / a34;
    this.write();
    new Int32Array(1024);
    const v52 = this.constructor;
    try { new v52(a33, a33, a34); } catch (e) {}
}
new F30(0, F30, 4);
new F30(4, v20, 0);
