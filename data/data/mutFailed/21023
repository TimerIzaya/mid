class C6 {
    static {
        try {
            this.c = this;
            function f8() {
                return f8;
            }
            const v11 = new Uint8ClampedArray();
            delete v11[4294967296];
            for (let i15 = 0, i16 = 10; i15 < i16; i16--) {
                for (let v23 = 0; v23 < 50; v23++) {
                }
            }
            const v24 = [C6];
            Math.tan(4.0);
            class C29 extends Int32Array {
            }
            C29.from(Math);
            function f31(a32, a33) {
                const o37 = {
                    [this](a35, a36) {
                        v24[5] = -37672;
                    },
                };
                function F38() {
                    if (!new.target) { throw 'must be called with new'; }
                    for (const v43 of Array(19793)) {
                    }
                    /8/vdiy;
                }
                new F38();
                return -37672;
            }
        } catch(e46) {
        }
    }
    toString(a48, a49) {
        Symbol.toPrimitive;
        const o91 = {
            [this]() {
                super[Symbol] = Symbol;
                function F53(a55, a56, a57, a58) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.g = a48;
                    } catch(e59) {
                    }
                    function f60(a61, a62, a63, a64) {
                        a63 * a63;
                        const o66 = {
                        };
                        o66.__proto__;
                        return f60;
                    }
                    try {
                        a56.c = this;
                    } catch(e68) {
                    }
                    try {
                        this.f = this;
                        const o71 = {
                            "maxByteLength": 10000,
                        };
                        const v73 = new ArrayBuffer(3471, o71);
                        v73.transferToFixedLength();
                    } catch(e75) {
                    }
                }
                new F53(8n, -54948n, -1e-15, -4.0);
                function f77() {
                    return f77;
                }
                [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
                for (let v79 = 0; v79 < 5; v79++) {
                    function f80() {
                        try {
                            a48.forEach();
                        } catch(e82) {
                            e82.a = e82;
                            e82.a = e82;
                        }
                        return C6;
                    }
                    f80();
                    %OptimizeFunctionOnNextCall(f80);
                }
                class C84 {
                }
                const v85 = new C84();
                const o86 = {
                };
                new Proxy(v85, o86);
                new F53(-1024n, 8n, -1e-15, 8n);
                new F53(8n, 8n, a49, this);
                return a48;
            },
        };
        return -0.0;
    }
}
const v92 = new C6();
new C6();
new v92();
new Array(76);
const v100 = new Int32Array();
const v102 = new BigInt64Array();
const v103 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v104;
try { v104 = v103.some(); } catch (e) {}
[-1.7976931348623157e+308];
function f106(a107, a108, a109, a110) {
    const o118 = {
        toString(a112, a113, a114) {
            try { this.toString(a113, v104, a112); } catch (e) {}
            a113++;
            a109[a108] = a107;
        },
    };
    return o118;
}
const v120 = new Float64Array(129);
new Uint32Array(v120);
-9223372036854775808n | -9223372036854775808n;
f106(v102, 129, v103);
f106(v100, 129, v103);
for (let v127 = 0; v127 < 5; v127++) {
    v127 % v100;
    v103.b = v100;
}
