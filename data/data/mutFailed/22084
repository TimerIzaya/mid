const v1 = new Map();
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a5;
    } catch(e6) {
    }
    try {
        this.g = Map;
    } catch(e7) {
    }
    try {
        this.a = a4;
    } catch(e8) {
    }
}
const v9 = new F2(F2, v1);
const v10 = new F2(Map, v9);
new F2(v9, v10);
function f12() {
    return Map;
}
Float32Array.f = -1512594807n;
new Float32Array(127);
const v24 = new Uint8ClampedArray(117, -1512594807n);
const v27 = new Int16Array(255);
const v32 = new Uint8ClampedArray(16);
function f35() {
    return v27;
}
function f36(a37) {
    Reflect.construct(Int16Array, [a37,-4294967297,1470], a37);
}
Object.defineProperty(Float32Array, "f", { writable: true, configurable: true, get: f35, set: f36 });
Float32Array.f = Float32Array;
const v41 = new Float32Array(1470);
v41.join(v32);
-173;
BigUint64Array.BYTES_PER_ELEMENT;
new BigUint64Array();
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = this?.constructor;
    try { new v54(); } catch (e) {}
    a52 + a52;
    this.h = a51;
}
try { F48(); } catch (e) {}
new F48();
const v59 = new F48(v32, F48);
const v60 = new F48(BigUint64Array, v59, 16, -7.981664924203587e+307, v59, Uint8ClampedArray);
function f61() {
    return -1512594807n;
}
function f62(a63) {
    for (let v64 = 0; v64 < 5; v64++) {
        const v65 = [0.8307152163010869,1.0,0.0];
        v65.push(v64);
        v65[2] = v65;
        v65.length = v64;
    }
}
Object.defineProperty(v60, "d", { configurable: true, get: f61, set: f62 });
v60.d = v60;
const o67 = {
};
o67.c = v24;
o67.c = o67;
-522.1393553916671 - -522.1393553916671;
class C71 {
    [o67] = -522.1393553916671;
    #a = 1.185961373472971e+308;
}
function f72() {
    return f36;
}
function f73(a74) {
    if ("log1p") {
    }
}
Object.defineProperty(C71, Symbol.iterator, { enumerable: true, get: f72, set: f73 });
const v78 = new C71();
v78.constructor = f61;
const v79 = v78?.constructor;
v79[Symbol.iterator] = f73;
try { new v79(); } catch (e) {}
const v83 = o67.constructor;
v83.f = v83;
v83.freeze();
const v86 = 1922 % 1922;
const v87 = v86 == v86;
for (let v88 = 0; v88 < 25; v88++) {
    v88 ^ v88;
    function f90() {
        return f90;
    }
    function f91(a92, a93, a94, a95) {
        try { new a94(); } catch (e) {}
        function f97() {
            return v86;
        }
        f97.h = f97;
        const v98 = f97.length;
        ~v98;
        const v100 = -v98;
        v100 / v100;
        v98 | v98;
        const v104 = f90()?.constructor;
        v104.d = v104;
        let v105;
        try { v105 = v104(); } catch (e) {}
        v105.e = v78;
        let v106;
        try { v106 = v105.bind(); } catch (e) {}
        v106.bind();
        v105.e = v105;
        const v108 = v104 * v87;
        v108 >> v108;
        v108 - v108;
        const v111 = typeof f97;
        v111.italics();
        v111 === "uv4";
        v105(v83);
        const v117 = new Int8Array(C71, a95, a94);
        const v118 = v117.entries();
        let v119;
        try { v119 = v118.next(); } catch (e) {}
        v119.b = v88;
        v119.b = v119;
        const v120 = v118.next(1.185961373472971e+308, f90, o67, v119, v119);
        v120.b = v120;
        a93.f = 1922;
        [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        return v88;
    }
    for (let v122 = 0; v122 < 5; v122++) {
        f91(v122, v83, v83, 1922);
    }
}
