function f3() {
    return -3n;
}
103501371 >> 103501371;
6 >>> 6;
class C12 extends f3 {
    e;
    constructor(a14, a15, a16, a17) {
        super();
        const v19 = Symbol.unscopables;
        this[v19] = v19;
        let v20 = -0.0;
        v20++;
        54 >> 54;
        new BigInt64Array();
        const v30 = new Uint16Array();
        try { v30.join(9007199254740991); } catch (e) {}
        [1073741824,-2118633808,512];
        [-58942,-65537,835264087,973003550,9311];
        function F35(a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            const v39 = this.constructor;
            v39.name = v39;
            try { v39(); } catch (e) {}
            this.b = a37;
        }
        new F35();
        new F35();
        "object" == "object";
        ("JghwC").slice;
        function F47() {
            if (!new.target) { throw 'must be called with new'; }
            try { this.constructor(); } catch (e) {}
            class C50 {
            }
            for (let v53 = 0; v53 < 25; v53++) {
                v53 >> v53;
                let v55 = v53++;
                v55--;
                v53 < v53;
                const v58 = [601759695];
                v58[0] = v58;
                const v59 = [1073741824,1073741823,1376142744,1073741825];
                function f60() {
                    try { Array.isArray(f60); } catch (e) {}
                    const v64 = Array(4087);
                    try { v64.find(); } catch (e) {}
                    for (const v66 of v64) {
                    }
                    return 4087;
                }
                function f67(a68, a69, a70, a71) {
                }
                try { f67(103501371, v59, v59, a14); } catch (e) {}
                for (let v73 = 0; v73 < 10; v73++) {
                    f67();
                }
            }
        }
        const v75 = new F47();
        try { v75.toLocaleString(); } catch (e) {}
    }
    static [f3];
    static b = 1;
}
try { new C12(3, f3, -3n, f3); } catch (e) {}
new C12(58361, 3n, 1, 6);
const v79 = new C12(9007199254740991, 3n, 6, 103501371);
new C12(v79, 3n, 9007199254740991, 1);
for (let [i84, i85] = (() => {
        10 >>> 10;
        return [0, 10];
    })();
    (() => {
        i84--;
        const v87 = i84 < i85;
        let v88 = 3375;
        v88++;
        const v91 = new BigUint64Array(v88);
        let [v92,,v93,...v94] = v91;
        let v95 = v92 << v92;
        v95--;
        return v87;
    })();
    i84--, i84++) {
    -i84;
    i85 >> i85;
}
