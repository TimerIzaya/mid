const v5 = new Uint16Array(93);
try { v5.includes(93); } catch (e) {}
BigUint64Array.g = BigUint64Array;
const v9 = new BigUint64Array(1.0);
let v10;
try { v10 = v9.some(1.0); } catch (e) {}
new Float64Array(257);
let v18 = 0.6225177695488006;
const v19 = v18++;
v19 - v19;
function f23() {
    -16 in v10;
    v9.byteOffset;
    return 257;
}
Uint8Array[Symbol.toPrimitive] = f23;
function f28(a29, a30, a31, a32) {
    a29 | a29;
    Object.defineProperty(a29, "g", { value: a30 });
    -(a31 % a31);
    const o39 = {
        n(a37, a38) {
        },
    };
    const v40 = o39?.__lookupSetter__;
    try { new v40(v19); } catch (e) {}
    return 9007199254740991;
}
try { f28(-16, BigUint64Array); } catch (e) {}
for (let v43 = 0; v43 < 625; v43++) {
    f28(Uint8Array);
}
