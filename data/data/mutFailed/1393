function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = F0;
    try {
        this.a = 268435440;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7() {
    const v9 = new Int32Array(Int32Array);
    const o10 = {
    };
    o10.constructor = f7;
    o10.constructor.isSealed(v9);
    return v6;
}
[F0];
ReferenceError[Symbol.toPrimitive] = f7;
const v17 = ReferenceError(ReferenceError);
v17.stack = v17;
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
[v4];
[v5,F0];
new Uint8Array(3618);
new Int16Array(512);
new BigUint64Array(2);
const v32 = new Uint32Array(127);
function f35() {
    return Symbol;
}
Object.defineProperty(Uint32Array, Symbol.iterator, { configurable: true, enumerable: true, get: f35 });
Uint32Array[2] = 1;
new Uint32Array(Uint32Array);
f7();
new Uint8Array(v32);
