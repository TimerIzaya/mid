/x.ma*b/gvdisy;
const v1 = /PL[x\dz]/vdimsy;
const v2 = /[\c~]/giy;
function f6(a7, a8) {
    const o32 = {
        78: "X",
        "e": "subarray",
        __proto__: "X",
        "b": a7,
        m(a10, a11) {
            function f12() {
                function f14(a15) {
                }
                this.onmessage = f14;
                const v20 = [1,12,4294967296,-7,-1024,1073741825,1533427862];
                const v21 = [-2,2001857812,-128,9,-97558891,-586273076,-858014268];
                [8,536870888,-1052068670,1073741823,-457181205,536870889,13,65537];
                try { v21.reduceRight(f12, a8); } catch (e) {}
                v1[v20];
                -Infinity;
            }
            [];
            const o30 = {
                "arguments": a10,
                "type": "function",
            };
            new Worker(f12, o30);
            return a8;
        },
    };
    return o32;
}
f6("subarray", "subarray");
f6("subarray", f6);
f6("undefined", v2);
new WeakSet();
const v39 = new Uint16Array();
v39.indexOf();
[2,12,817632217,446621544,6,2147483649,268435456];
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(v48); } catch (e) {}
    for (const v50 in WeakSet) {
        delete this?.h;
    }
}
new F42();
const v54 = new F42(F42);
const v59 = new BigUint64Array(10);
for (const v61 in v59) {
    new Float64Array(2147483647);
}
function f63(a64, a65, a66, a67) {
    function f69(a70) {
        return arguments;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: v54 });
    arguments.toString(a65, f63, f63);
    function f72() {
        ("Vre").fixed().normalize();
        let v76 = -268435456;
        const v77 = v76--;
        v77 << v77;
        return a66;
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
    return arguments;
}
for (let v80 = 0; v80 < 5; v80++) {
    const t71 = f63().toString;
    t71(f63, v80, f63, f63);
}
%PrepareFunctionForOptimization(f63);
f63(f63, f63, f63, f63);
%OptimizeFunctionOnNextCall(f63);
f63();
