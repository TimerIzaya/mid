function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3, a4, a5, a6) {
        return f2;
    }
    const v7 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
    ([-2]).concat(v7);
    try {
        this.f = -18675;
    } catch(e11) {
    }
    try {
        this.g = -18675;
    } catch(e12) {
    }
    try {
        this.e = -18675;
    } catch(e13) {
    }
}
const v14 = new F0();
new F0();
new F0();
[4.86138708058256,-4.0,-1.0,-5.0,1000000000.0,470403.3506419943,1000000000.0,-1.2368553897984054,0.15541969525723287];
[-3.0,1.2871405231393279e+308,1.5067850581150019e+308,-1.9560947992421092,-5.0,-1000000000.0,0.0,-7.608469647186572e+306];
const v22 = [977910.5911674707,0.9499842964755414,Infinity,3.0,-0.0,2.0];
let v23;
try { v23 = v22.every(-13n); } catch (e) {}
new Int16Array(5);
new BigUint64Array(1024);
new Uint32Array(1353);
for (let i = 0; i < 5; i++) {
    function f34() {
        arguments[1073741823];
        return Int16Array;
    }
    f34();
    %OptimizeFunctionOnNextCall(f34);
}
const v38 = new WeakSet();
try { v38.delete(v14); } catch (e) {}
function f43(a44, a45, a46) {
    function f47(a48) {
        for (let v49 = 0; v49 < 100; v49++) {
            const v50 = [-9223372036854775808,1415432483,1];
            function f53() {
            }
            function f54(a55, a56) {
                const v58 = Symbol.toPrimitive;
                a55[v58] = f53;
                const o63 = {
                    "e": a55,
                    "g": a56,
                    [v58]() {
                    },
                    "maxByteLength": v49,
                    get d() {
                    },
                    "h": -1000000.0,
                    ...a55,
                    "b": v50,
                    "d": Int16Array,
                    [v49](a62) {
                    },
                };
            }
            v49++;
            const v65 = f53(a48, 1.0);
            v65.JG3 = v65;
        }
        return a46;
    }
    function F66(a68, a69) {
        if (!new.target) { throw 'must be called with new'; }
        const v71 = this.valueOf().constructor;
        try { new v71(v71, v71, v71, a69); } catch (e) {}
        Math.imul();
    }
    new F66();
    f47.d = f47;
    a45.toString = f47;
    try { a44.codePointAt(a45); } catch (e) {}
    a46 & a46;
    const o79 = {
        get d() {
            return a45;
        },
        ["JG3"]: a45,
        "c": a46,
    };
    o79.d = o79;
    return o79;
}
try { f43.bind(1024); } catch (e) {}
const v82 = f43("JG3", f43("function", v38));
v82.a = v82;
f43("JG3", v23);
