new Int8Array(0);
new Float64Array(1);
new BigInt64Array(129);
new WeakMap();
class C11 {
}
const v12 = new C11();
const v13 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v16 = new Uint32Array();
const v18 = [601759695];
const v19 = [1073741824,1073741823,1376142744,1073741825];
function f21(a22, a23, a24, a25) {
    function f26() {
        const t13 = "Vre";
        t13[1] = "Vre";
        try { Math.expm1(Math); } catch (e) {}
        const v31 = Math.expm1();
        const v32 = Math.tanh();
        Math.hypot(a24, Math);
        Float64Array.BYTES_PER_ELEMENT = Float64Array;
        b = v18;
        v13.length;
        try {
            v19.findLast();
        } catch(e37) {
            e37.a = e37;
        }
        const v38 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        ("number").slice();
        const o43 = {
            0: a25,
            162: "1ya",
        };
        const o61 = {
            [522675525n](a45, a46) {
                delete v19[127];
                new Int8Array(9);
                function F51() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v53 = new F51();
                class C54 extends Math {
                    [v53];
                }
                try {
                    const t45 = "Vre";
                    t45.toString = a23;
                } catch(e55) {
                }
            },
            "c": v18,
            [-1]: 2684,
            1073741824: v16,
            "maxByteLength": WeakMap,
            __proto__: v16,
            9: v12,
            [v32]: v31,
            ...a23,
            "arguments": v38,
            [2n](a57, a58, a59, a60) {
            },
            "e": -4294967295,
            "arguments": Float64Array,
            256: a25,
            4: "Vre",
            "c": -268435456,
        };
        return -4294967295;
    }
    a25();
    const v64 = eval(a23);
    %OptimizeFunctionOnNextCall(f26);
    return v64;
}
for (let v65 = 0; v65 < 5; v65++) {
    f21(v65, v18, v65, 0);
}
