function f1() {
    Int8Array.b = Int8Array;
    return f1;
}
4096 >>> 4096;
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = new BigInt64Array(11);
    v15.lastIndexOf(this);
}
new BigUint64Array(4096);
Symbol.toPrimitive.description;
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = "b";
    this.d = a27;
}
const v28 = new F24();
const v29 = new F24(v28, v28);
const o30 = {
    ...v29,
    __proto__: v28,
};
for (const v31 in o30) {
}
const v33 = new Uint8ClampedArray(3);
try { v33.with(BigUint64Array, -2n); } catch (e) {}
new Float64Array(10);
v29.f = 145253519;
BigInt.toString = BigInt;
function f40(a41, a42, a43) {
    'use strict';
    return a41;
}
try {
    false.fuck();
} catch(e46) {
    e46.message;
}
Uint32Array.e = Uint32Array;
const v52 = new Uint32Array(381);
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array);
class C56 extends Date {
}
new C56();
v52[121];
new Float32Array(v52);
const v60 = Proxy();
function f61() {
}
f61();
class C63 extends f61 {
    constructor(a65) {
        super();
        for (let v66 = 0; v66 < 5; v66++) {
            super.valueOf();
        }
    }
}
new C63();
%VerifyType(v60);
