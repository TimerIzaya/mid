class C3 {
    get b() {
        let v5;
        try { v5 = this(); } catch (e) {}
        function F6(a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = v5;
            } catch(e9) {
            }
            try {
                this.f = a8;
            } catch(e10) {
            }
        }
        const v11 = new F6("assign");
        new F6(v11);
        new F6(-2147483647);
        return F6;
    }
}
C3.d = C3;
C3.prototype = C3;
const v14 = new C3();
const v15 = v14?.constructor;
try { new v15(); } catch (e) {}
let v17 = new C3();
const v18 = v17?.__lookupSetter__;
const v19 = v18?.call;
try { new v19(v15); } catch (e) {}
try { new v18(v14); } catch (e) {}
new C3();
const v23 = [5,-870780679,-9223372036854775808,1024,-65537,-5,-554552736,-835254134];
const v24 = [4096,-1024,1073741823,-11];
v24[3];
const v26 = [-16769];
function f27() {
    const v30 = new Uint32Array(65536);
    for (const v31 in v30) {
        this.escape();
    }
    return "assign";
}
Object.defineProperty(v26, "constructor", { configurable: true, enumerable: true, value: f27 });
try { v26.constructor(v18); } catch (e) {}
class C35 extends C3 {
    p(a37, a38) {
        "assign" - v24;
    }
    constructor(a41, a42) {
        const v43 = this.constructor;
        try { new v43(); } catch (e) {}
        const v46 = Math.atan2(this);
        v46 ** v46;
    }
    1000 = -46735;
    #d;
    static {
        this.e = "assign";
        const v49 = this?.__defineSetter__;
        try { new v49(v14, v17); } catch (e) {}
        this.e = this;
        let v51 = 0;
        v51--;
        do {
            function f54() {
                return 4n;
            }
            f54();
            v17 <<= C3;
            v23[0] = v51;
            const v56 = [16,-4294967297,65537,25858,-32741,-1024,-128,-12,2584,15594];
            v56[7] = v56;
            ([-2147483649,-16,257,2147483648,4294967295])[4];
            const v59 = [653251785,1073741824,10,-61115,1073741823,9007199254740992,-8,63145,4];
            try { v59.sort(v24); } catch (e) {}
            v51++;
        } while (0 | 0, v51 < 0)
    }
}
C35.prototype;
const v66 = new C35();
v66[1000];
const v68 = new C35();
v68[1000];
new C35();
1.6015824630328361e+308 * 1.6015824630328361e+308;
class C75 {
    static {
        this.toString = f27;
        this.length;
    }
}
function f78(a79) {
    const o83 = {
        "execution": "async",
        "type": "minor",
    };
    return gc(o83);
}
C75.toString = f78;
try { new C75(); } catch (e) {}
let v86;
try { v86 = C75.toString(); } catch (e) {}
try { v86.at(v86); } catch (e) {}
function F88() {
    if (!new.target) { throw 'must be called with new'; }
}
class C90 {
    #a;
    a;
    constructor(a92) {
        super();
        for (let v93 = 0; v93 < 5; v93++) {
        }
    }
    static {
        for (let v95 = 0; v95 < 25; v95++) {
            const v96 = [1073741824,1073741823,1376142744,1073741825];
            function f97(a98, a99, a100, a101) {
                -a98;
                function f104() {
                }
                Object.defineProperty(f104, "constructor", { value: f104 });
                try { f104.toString(); } catch (e) {}
                let v106;
                try { v106 = f104.constructor(this); } catch (e) {}
                const v107 = v106?.__lookupSetter__;
                try { new v107(v106); } catch (e) {}
                const v110 = new Int8Array();
                try { v110.slice(this, v96); } catch (e) {}
                let v112 = 4;
                -(v112++);
                let v115 = 0;
                v115 >>> v115;
                let v117 = 5;
                v117--;
                const v119 = v115 < v117;
                const v120 = v119 && v119;
                let v121 = 10;
                for (; v121--;) {
                }
                function f123() {
                }
                try { f123(); } catch (e) {}
                const o125 = {
                };
                o125.g = o125;
                try {
                    const o126 = {
                    };
                    o126.a = v120;
                    o126.a = o126;
                    o126.e = o126;
                    o126.a = v96;
                } catch(e127) {
                }
                const o128 = {
                };
                o128.h = o128;
                -(v115++);
                new Uint32Array(v112);
                function f133(a134, a135) {
                }
                f133.prototype = f133;
                f133();
                v110.buffer;
                %OptimizeFunctionOnNextCall(f104);
                const o141 = {
                    n(a139, a140) {
                    },
                };
                const v142 = o141?.n;
                try { new v142(f97, v96); } catch (e) {}
                return arguments;
            }
            let v144;
            try { v144 = f97(242.02280361644853, v68, this, 242.02280361644853); } catch (e) {}
            v144[1] = v144;
            for (let v145 = 0; v145 < 5; v145++) {
                const v146 = f97();
                try { v146.propertyIsEnumerable(v146); } catch (e) {}
            }
        }
    }
}
try { new C90(); } catch (e) {}
