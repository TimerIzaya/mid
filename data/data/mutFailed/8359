class C6 {
    constructor(a8, a9, a10, a11) {
        let v12;
        try { v12 = a9(this); } catch (e) {}
        function F13(a15, a16, a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            Object.defineProperty(this, "g", { configurable: true, value: this });
            this.g = v12;
            this.constructor;
            [Reflect,Reflect,Reflect];
            new Uint16Array(512);
            try {
                this.g = a9;
            } catch(e25) {
            }
        }
        const v26 = new F13(12, 1.0, 12, a8);
        new F13(a8, v26, -64242, a10);
        const v28 = new F13(this, F13, a11, 12);
        for (const v30 in "1487412280") {
        }
        function f31() {
            const v34 = Array(4087);
            function f35() {
                return a11;
            }
            function f36(a37) {
                v28[Symbol.split];
            }
            Object.defineProperty(v34, 2484, { writable: true, get: f35, set: f36 });
            for (const v41 of v34) {
            }
            return Array;
        }
        f31();
    }
}
const v43 = new C6(-64242, C6, 4, -64242);
new C6(4, 1.0, 4, 12);
const v47 = new Uint32Array(2432);
const o48 = {
    ...v47,
};
new C6(12, 1.0, -64242, 12);
const v50 = [NaN,3.0];
function f51(a52, a53) {
    try {
        const v56 = new Int8Array(268435456);
        const t48 = Array();
        t48[3] = 65535;
        v43.h = -9.906526330399328e+307;
        return v56;
        const o61 = {
            "maxByteLength": 1000,
        };
    } catch(e62) {
    }
    return a53;
}
f51[Symbol.species] = f51;
Object.defineProperty(v50, "constructor", { configurable: true, value: f51 });
let v67 = 16;
v67--;
const v70 = new Int8Array(v67);
v70.toSorted();
v50["concat"](-483497369);
