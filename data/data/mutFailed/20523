const v1 = [,,];
const v2 = [,,v1,v1,v1];
const v3 = [v2,,];
let v4;
try { v4 = v3.map(undefined); } catch (e) {}
const v8 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v9;
try { v9 = v8.some(); } catch (e) {}
function f10(a11, a12, a13, a14) {
    const o22 = {
        toString(a16, a17, a18) {
            try { this.toString(a17, v9, a16); } catch (e) {}
            a17++;
            a13[a12] = a11;
        },
    };
    return o22;
}
try { new BigUint64Array(v2, undefined, "h"); } catch (e) {}
let v26 = 3375;
v26 >>> v26;
const v28 = v26++;
new BigUint64Array(v26);
v4[0];
4294967297 << 4294967297;
-2 | -2;
-2 % -2;
class C36 {
    o(a38, a39) {
        super[this] = a39;
        super.e = -2;
        super[v2] = v2;
        const v41 = new Float32Array();
        for (let [v42,v43] of v41) {
        }
        for (let v44 = 0; v44 < 5; v44++) {
        }
        function f45() {
            return -2;
        }
        return a39;
    }
    6;
    #g;
    a;
}
try { C36.toString(); } catch (e) {}
C36.d = C36;
new C36();
const v48 = new C36();
v48[6];
const v50 = new C36();
v50.a;
class C52 {
    constructor(a54, a55, a56) {
        for (let v57 = 0; v57 < 5; v57++) {
            function f59() {
                const o67 = {
                    [-4294967297n](a61, a62, a63, a64) {
                        eval(C52);
                    },
                };
                return f59;
            }
            f59();
            %OptimizeFunctionOnNextCall(f59);
        }
    }
}
try { new C52(v28, -11, -11); } catch (e) {}
for (let v70 = 0; v70 < 5; v70++) {
    v70 % v70;
    function f72() {
        const v76 = [Math.atanh("Vre")];
        try { v76.map(Math); } catch (e) {}
        return v70;
    }
    const v78 = f72();
    1000000000.0 - 1000000000.0;
    1000000000.0 >> 1000000000.0;
    let v82 = "function";
    ({"length":v82,} = "isExtensible");
    v78 - v78;
    %OptimizeFunctionOnNextCall(f72);
    [10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163];
    Date.parse(v1);
    function f88(a89, a90, a91, a92) {
        ("HEkWL").localeCompare("isArray", "isArray");
        for (let v96 = 0; v96 < 5; v96++) {
        }
        return a92;
    }
    f88.d = f88;
}
const v98 = new Int32Array(Int32Array);
v98.byteLength;
function f100(a101, a102, a103) {
    try { new a101(a102, v8, v8); } catch (e) {}
    ~64;
    try { Uint8ClampedArray.call(a102); } catch (e) {}
    const v110 = new Uint8ClampedArray(112);
    const v113 = new Uint8Array(64);
    const v116 = ~-3.383486186086852e+307;
    try { v110(-85357.59116785484, ...v113, 64, 46, -3.383486186086852e+307, ...v110); } catch (e) {}
    const o120 = {
        set e(a119) {
        },
    };
    o120.e;
    return v116;
}
f100(f100, v9(f100, f100, f100), f100);
