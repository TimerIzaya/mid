function f0() {
    const o35 = {
        "e": "reverse",
        "f": "SSn",
        "b": "SSn",
        ..."SSn",
        "h": "reverse",
        15: "SSn",
        ["reverse"](a5, a6) {
        },
        [f0]() {
        },
        get a() {
            const o12 = {
                set e(a10) {
                    return;
                },
            };
            const v13 = ("d")[this];
            const v15 = [10,-9007199254740991,512,7];
            function f16(a17) {
                const o18 = {
                    ...v15,
                };
                return f16;
            }
            const v19 = ["SSn","d"];
            class C20 {
                constructor(a22, a23) {
                    eval(a22);
                }
            }
            Reflect.construct(v13, v19, v13);
            const v32 = new Uint16Array(2);
            new Uint32Array(v32);
            return Reflect;
        },
    };
    return o35;
}
f0();
const v37 = f0();
const v39 = f0()?.__lookupSetter__;
try { new v39(v37); } catch (e) {}
const v43 = new Int16Array(9);
const v46 = Int32Array?.constructor;
try { new v46(v43); } catch (e) {}
new Int32Array(5);
function F50(a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = this?.constructor;
    try { new v54(this, F50); } catch (e) {}
}
F50.caller;
const v57 = new F50();
v57.a = v57;
const v60 = Array(4087);
try { v60.at(f0); } catch (e) {}
const v63 = new Uint8ClampedArray(4096);
v63[2760];
const o65 = {
};
const v66 = /LD/vds;
const v67 = /a\s/vims;
const v68 = /SO/uis;
v68[Symbol.toPrimitive] = Array;
const v72 = [v66,1000.0,v67];
for (let v73 = 0; v73 < 22; v73++) {
    const v74 = v67[v73];
    try { new v74(v74); } catch (e) {}
    const v76 = v72[v68];
    try { ("minor").localeCompare(v76); } catch (e) {}
    const o81 = {
        "execution": "async",
        "type": "minor",
    };
    const v82 = gc(o81);
    try { v82.__lookupSetter__(v60); } catch (e) {}
}
257 - 257;
const v87 = [257,257,257,4096,2];
function f88(a89) {
    function f91(a92) {
        v87["entries"]();
    }
    this.onmessage = f91;
    return f91;
}
try { Set(Set); } catch (e) {}
const v98 = ("boolean").normalize();
v98.h = v98;
