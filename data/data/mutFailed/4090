const v3 = [1999173997,5,268435441,-1331834229];
const v4 = [9,-9007199254740991,47383,-2147483649,597045198,1000,1368110894,-53003];
try { v4.reduceRight(v3); } catch (e) {}
const v6 = [4294967297,-35099,-60113,2];
4 * 4;
%VerifyType(4);
let v12 = 128;
const v16 = !(v6 * ++v12);
v16 && v16;
const v18 = +891.1942977682324;
~v16;
v18 / v18;
Math.trunc(v6);
const v22 = [0.10632572175859434,187.92037184357696,0.0];
[0.2971603380581096,1000000000000.0];
const v24 = [-7.7634564347428,-6.363387736066408,1.0,-2.2250738585072014e-308,-1000.0,-1.7976931348623157e+308,-29796.831539575825,0.06801636952245271,2.2250738585072014e-308,-723.5668212660418];
try { v24.groupToMap(v6); } catch (e) {}
function f26() {
    return 7;
}
class C27 extends f26 {
    static #m(a29, a30, a31, a32) {
        try {
            a32.__proto__ = v3;
        } catch(e33) {
        }
        return a32;
    }
    #a = 1073741825;
    static #valueOf(a35, a36, a37) {
        Object.defineProperty(v22, "f", { writable: true, get: f26 });
        let v38;
        try { v38 = f26(...a37, ...v3, ...a35, 7); } catch (e) {}
        return v38;
    }
}
try { new C27(); } catch (e) {}
const v43 = new C27();
const v44 = v43?.constructor;
try { new v44(); } catch (e) {}
new C27();
const v47 = new C27();
const v48 = v47?.constructor;
try { new v48(); } catch (e) {}
function f51() {
    return 9;
}
let v52;
try { v52 = Date.now(); } catch (e) {}
v52 & v52;
const v55 = new Float64Array();
try { v55.entries(); } catch (e) {}
for (let v57 = 0; v57 < 25; v57++) {
    try { Math.expm1(v12); } catch (e) {}
    Math.cosh(v57);
}
const v62 = C27.matchAll;
Symbol.for(v62.description);
v55[v62];
