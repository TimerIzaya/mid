const v2 = new Uint32Array(6);
const v5 = new Uint16Array(1024);
new Float32Array(3695);
function f9(a10, a11, a12, a13) {
    const o18 = {
        __proto__: v2,
        p(a15, a16) {
            const o17 = {
                __proto__: this,
                116: Uint32Array,
                "f": 6,
            };
            return Uint16Array;
        },
        "b": a12,
        "c": a11,
        [a10]: Float32Array,
        "h": Uint32Array,
    };
    return o18;
}
f9(v2, 1024, 1024, 6);
f9(v5, 3695, 1024, 6);
const v21 = f9(Uint32Array, 6, 3695, 6);
let v25;
try {
const t0 = 1.8503897255003885;
v25 = new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o28 = {
    };
} catch(e29) {
}
class C30 {
    static p(a32) {
        const o39 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f34() {
                        return this;
                    }
                    const v35 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e38) {
                }
                return -128;
            },
        };
        return o39;
    }
    g;
}
let v40;
try { v40 = new v25(); } catch (e) {}
new v21();
class C43 extends Map {
}
new C43();
const v46 = new Float32Array();
v46.g;
new C30();
new C30();
class C50 extends C30 {
    static n(a52, a53) {
        function F55(a57, a58, a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C67 {
        }
        this[Symbol.matchAll] = a53;
        a52 += C43;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e72) {
        }
        return -128;
    }
    #c = C50;
    valueOf(a76, a77, a78) {
        super.f;
    }
    constructor(a81, a82, a83, a84) {
        super();
        function f85() {
            const t90 = [];
            t90[6] = 4294967295;
            new Int32Array();
            const o100 = {
                get b() {
                    return Int32Array;
                },
                "c": f85,
                toString(a93, a94, a95) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a97) {
                    return 4294967295;
                },
                "h": 6,
                ...1.0,
                set b(a99) {
                },
            };
        }
        for (let v101 = 0; v101 < 5; v101++) {
            f85();
        }
    }
    set f(a104) {
        for (const v105 of this) {
            try {
            } catch(e106) {
            }
        }
        class C108 extends SharedArrayBuffer {
        }
        const o109 = {
        };
        try {
        } catch(e110) {
        }
        try {
            const o111 = {
            };
        } catch(e112) {
        }
        try {
            const o113 = {
            };
            o113.c = -128;
            o113.e = this;
        } catch(e114) {
        }
        try {
            const o115 = {
            };
        } catch(e116) {
        }
    }
}
const v117 = new C50();
gc(v117);
class C120 {
}
function f121(a122, a123, a124, a125) {
    const o130 = {
        p(a127, a128, a129) {
        },
    };
}
for (let v131 = 0; v131 < 25; v131++) {
}
const v133 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f134(a135, a136) {
    const o138 = {
        get d() {
        },
    };
}
f134();
const v140 = v40(v133);
try { v140(956206316, 956206316); } catch (e) {}
