const v3 = [9,-55243];
[2147483647,65446,-16507,-14,599616247,128,-4294967297];
[3030,128,536870912,-190933447,-9007199254740990];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    ([-12,0,-2107431110,4,512,-63916]).groupToMap(Date.constructor);
    function F14(a16, a17, a18, a19) {
        if (!new.target) { throw 'must be called with new'; }
    }
    this.h = this;
    const v20 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f21(a22, a23, a24, a25) {
        const v26 = /(?:a*)+q(?<a>.)/guds;
        function f27(a28) {
            const v29 = v20.constructor;
            try { v29(); } catch (e) {}
            a28.constructor;
            15312 | [Infinity,5.072687501529128e+307,0.4093098171074484,4.0,-4.442441003635313e+306,843998.4933901483,-714.8973177887364];
        }
        for (let [i40, i41] = (() => {
                function f36(a37, a38) {
                    return f21;
                }
                return [0, 10];
            })();
            i40 < i41;
            i41--) {
            for (let v48 = 0; v48 < 25; v48++) {
                f27(v26);
            }
        }
        function f50() {
            let v51 = Float64Array;
            v51 = a23;
            return a23;
        }
        return f50;
    }
    for (let v52 = 0; v52 < 10; v52++) {
        f21(v20, f21, f21, v52);
    }
    try {
        this.d = a9;
    } catch(e54) {
    }
    try {
        function F58(a60) {
            if (!new.target) { throw 'must be called with new'; }
            const v61 = this.constructor;
            try { new v61(); } catch (e) {}
            this.g = 257;
            this.g = -1;
            this.h = a60;
        }
        class C63 extends F58 {
            [6];
        }
        new C63();
        this.h = v3;
    } catch(e65) {
    }
}
const v66 = new F6(F6, -4n);
new F6(v66, -4n);
new F6(F6, -6n);
function F72() {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = "D2z" < -4n;
    try { ("Z").codePointAt(v75); } catch (e) {}
    function f78(a79) {
        Float64Array();
        /(\P{scx=Greek})/imy;
        return Int16Array;
    }
}
class C86 {
    static {
        function F88(a90, a91, a92, a93) {
            if (!new.target) { throw 'must be called with new'; }
            const v94 = this.constructor;
            let v95;
            try { v95 = new v94(); } catch (e) {}
            typeof v95 === "symbol";
        }
        for (let v99 = 0; v99 < 25; v99++) {
            for (let v104 = 0; v104 < 25; v104++) {
                eval();
                v104 < v104;
                new BigUint64Array(3375);
            }
        }
    }
}
