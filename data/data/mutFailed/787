function f0() {
    const o17 = {
        o(a5) {
            let v7 = 0;
            do {
                let v8 = 0.5683367607496589 instanceof a5;
                v8 %= v8;
                v7++;
            } while (v7 < 3)
            let v13 = -11;
            Math.fround(-2109318762);
            ++v13;
            return -2109318762 >> -65537;
        },
        "f": 0.5683367607496589,
        ...0.5683367607496589,
        1073741824: 622544.8350247601,
    };
    function f18() {
        try {
            new f0();
        } catch(e20) {
        }
        return o17;
    }
    o17.toString = f18;
    return o17;
}
const v21 = f0();
const v22 = f0();
const v23 = f0();
class C24 {
    set a(a26) {
        function f27(a28) {
            return a28;
        }
        class C29 extends f27 {
            #c;
        }
    }
    static 1073741823 = v21;
    1;
    static 10;
    [v23];
}
const v30 = new C24();
const v31 = new C24();
v31.toString = f0;
const v32 = new C24();
[v22,[v30,f0,v32,v32],v22];
const v35 = [v23,v22];
function f36(a37, a38, a39) {
    function f40(a41, a42) {
        const v43 = -Infinity;
        const o44 = {
            "a": v43,
            "d": v43,
        };
        class C46 extends o44.constructor {
        }
        return v43;
    }
    a38[Symbol.toPrimitive] = f40;
    a39.toString = f36;
    const o64 = {
        "b": v35,
        "h": v35,
        [a38](a50, a51, a52) {
            a39--;
            Math.cos(65537);
            const v58 = -f0;
            Math.cbrt(f0);
            v58 >> -1.0;
            f0 & 65537;
            f0 - f0;
            Math.max(65537);
            return a39;
        },
    };
    return o64;
}
function f65() {
    return f36;
}
Object.defineProperty(f36, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f65 });
f36(v32, f36, v23);
f36(v32, v22, v22);
f36(v31, v31, v22);
function f76(a77, a78, a79) {
    const o87 = {
        toString(a81, a82, a83) {
            a78 < this;
            return super[a79];
        },
        get d() {
            return this;
        },
    };
    return o87;
}
%PrepareFunctionForOptimization(f76);
f76(f76, f76(), f76);
%OptimizeFunctionOnNextCall(f76);
f76();
const v93 = new Float32Array(256);
256 !== 6;
v93[5] ||= 6;
