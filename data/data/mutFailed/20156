function f3() {
    return 9007199254740990;
}
const v4 = [-1787036178,9007199254740991,2,7,64,268435456,9,60357,1116055750,1925517968];
const v5 = [-29545,-337878314,65536,-1024,65537,5,-256,4096,4294967295];
const v6 = [64,1332282185,-47066,6,536870887];
class C10 extends f3 {
    constructor(a12, a13, a14) {
        super();
        Object.defineProperty(v5, -f3, { writable: true, set: f3 });
        this[Symbol.toStringTag];
    }
    #a = v6;
    static {
        this[this] = 9007199254740990;
        1 ** 9007199254740990;
        this && 1073741823;
    }
    5;
}
const v22 = new C10(1073741823, 1, 1073741823);
const v23 = new C10(-144905741n, 1, -144905741n);
const v24 = new C10(v23, 1, 1024n);
class C25 {
    #n(a27, a28) {
        v22 <= a28;
        delete v24[257];
        return "maxByteLength";
    }
    static o(a35, a36, a37) {
        v6[this] = 1024n;
        v5[v4] = 1024n;
        let v38;
        try { v38 = v22.isSealed(this, a36, v23, a36); } catch (e) {}
        v38[Symbol.replace] = C10;
        return v23;
    }
}
new C25();
new C25();
new C25();
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    function f47() {
        return -9007199254740992n;
    }
    class C48 {
    }
    new C48();
    this.c = 1073741823;
    const o51 = {
    };
    class C52 {
    }
    const v54 = new Set();
    function F55(a57, a58) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a57;
        } catch(e59) {
        }
        v54[this];
        try {
            new F55(a58, v54);
        } catch(e62) {
        }
    }
}
new F44();
new F44();
new F44();
new Float32Array(4);
new Uint32Array(2);
function F75(a77, a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
}
const v81 = new F75(F75, F75, F75, F75);
for (let v82 = 0; v82 < 25; v82++) {
    v81["p" + v82] = v82;
}
class C85 {
    constructor(a87, a88) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new C85();
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    const t90 = Array(11);
    t90[212] -= 3774;
    const v99 = this.constructor;
    try { new v99(this); } catch (e) {}
    a94++;
}
const v102 = new F91();
const t97 = v102.constructor;
new t97();
