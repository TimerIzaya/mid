const v0 = [];
function f1() {
    return v0;
}
Uint8ClampedArray.d = Uint8ClampedArray;
new Uint8ClampedArray(13);
const v7 = new Uint8Array(524);
const v10 = new Float64Array(43);
22223 ^ 22223;
26525 & 26525;
new Uint32Array(4);
let [v19,v20,...v21] = v7;
v0.forEach(...v10, Float64Array, Uint8ClampedArray, v19, v19, Uint8Array);
v0.length &= 13;
new Map();
const v27 = new Int32Array(1548);
const v28 = v27?.constructor;
try { new v28(v7, v7, v7); } catch (e) {}
new Int32Array(5);
-27118 & -27118;
new Float64Array(3609);
9 + 9;
try { Float32Array.from(22223); } catch (e) {}
function f46() {
}
[601759695];
const v48 = [1073741824,1073741823,1376142744,1073741825];
function f50(a51, a52, a53, a54) {
    a52 >>> a52;
    arguments[1] = arguments;
    function f57() {
    }
    try { f57(); } catch (e) {}
    const v59 = f46();
    const v61 = new Int8Array();
    1073741824 >> 1073741824;
    function f64(a65, a66) {
        const o70 = {
            p(a68, a69) {
            },
            10: 1073741824,
        };
        return o70;
    }
    f64();
    f64();
    const v74 = v61.buffer?.slice;
    try { new v74(v59, 43); } catch (e) {}
    let v76 = 2147483648;
    v76--;
    let v78 = 1000000000000.0;
    ~v78;
    const v80 = v78--;
    v80 * v80;
    const t53 = [];
    t53.length += 1.0;
    %OptimizeFunctionOnNextCall(f57);
    class C88 extends Date {
    }
    C88.d = C88;
    try { v48["find"](); } catch (e) {}
    for (const v91 in "1024") {
        try { v91.valueOf(); } catch (e) {}
    }
}
for (let v93 = 0; v93 < 10; v93++) {
    f50(v93, v93);
    522675525n & 522675525n;
}
%OptimizeFunctionOnNextCall(f50);
f50();
