function f0() {
}
class C1 {
    set e(a3) {
        const v4 = [748666.7832804511,3.0];
        class C6 extends Float64Array {
            [v4];
        }
        new C6();
        new WeakSet();
    }
    get f() {
        const v11 = this[f0];
        let v12;
        try { v12 = this.fround(v11, f0, f0); } catch (e) {}
        try {
            this.e = v12;
        } catch(e13) {
        }
        return v11;
    }
}
function f14() {
    return f0;
}
f0.stack;
let v17 = 10;
for (; v17--;) {
}
let v19 = -128;
const v22 = --v19;
Math.sinh(v19);
const v24 = v19 + v19;
const v25 = +0.5246794498615147;
Math.sinh(-1162498326);
const v27 = v22 + v24;
const v28 = ~v22;
function f29(a30) {
    new Float64Array(1);
}
Object.defineProperty(C1, Symbol.toPrimitive, { configurable: true, get: f14, set: f29 });
const v36 = new C1();
const v37 = new v27();
const v38 = new C1();
class C42 extends C1 {
    [C1];
    constructor(a44, a45, a46) {
        ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
        super();
        C1.__proto__;
        const v56 = new Int8Array(3);
        const v59 = new Int32Array(3, 114, 3);
        v59["keys"](v56, ...v59, ..."keys");
    }
    #o(a63, a64) {
        try {
            const v65 = super.p(C1, a64, -50595, C1);
            try {
                const v66 = [v25,v65];
                const v67 = [v65,64,v28,v66,v66];
                [v67,v67,C1,v19,v67];
            } catch(e69) {
                let v71 = -1710810463;
                Math.asinh(f0);
                ++v71;
                ~v38;
                v71--;
                ~f0;
            } finally {
                new C1();
            }
        } catch(e79) {
        }
        return a64;
    }
}
const v80 = new C42(f0, v36, v37);
const v81 = new C42(v80, v36, v37);
new C42(v81, v81, v80);
const v84 = [0.8307152163010869,1.0,0.0];
v84.length = 1494907924;
%VerifyType(v84 instanceof -24894);
