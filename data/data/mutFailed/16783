class C3 {
    static ["undefined"];
    [-725549.3831986599];
    static #a;
    get b() {
        try {
            this.fuck([-3.0,-725549.3831986599,"undefined",this], "f", 4294967297);
        } catch(e9) {
        }
        return -725549.3831986599;
    }
}
function f10() {
    const o16 = {
        0: 549538.9552070533,
        [-6.170254254244802e+307](a14, a15) {
        },
    };
    return o16;
}
const v17 = f10();
const v18 = f10();
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    a23[0];
    const v28 = this?.constructor;
    try { v28.call(v18); } catch (e) {}
    try { new v28(a23, a25, a24, a23); } catch (e) {}
    a23[0] = a23;
    a26[0] = a26;
    this.f = a23;
    this.f = v18;
}
const v31 = new F21(v18, v17, -61894, v17);
new F21(v18, v17, 31995, 31995);
try { new C3(); } catch (e) {}
const v34 = new C3();
const v35 = v34?.constructor;
try { new v35(); } catch (e) {}
const v37 = new C3();
Object.defineProperty(v37, "constructor", { value: f10 });
const v38 = v37?.constructor;
try { new v38(); } catch (e) {}
new C3();
const v43 = new Uint32Array(5);
const v44 = v43?.findLastIndex;
try { new v44(5); } catch (e) {}
const v48 = new BigInt64Array(535);
const v51 = new Uint8Array(256);
try { v51.join(256); } catch (e) {}
class C54 {
    constructor(a56) {
        const v57 = ("valueOf").localeCompare(a56, "valueOf");
        v57 >> v57;
    }
}
C54.toString = f10;
try { C54.toString(); } catch (e) {}
const v60 = new C54();
const v61 = v60?.constructor;
try { new v61(535); } catch (e) {}
const v64 = [58584,15,9007199254740990,2146023485];
const v65 = [46733,-268435456];
delete v31[v64];
Object.defineProperty(v48, "d", { writable: true, configurable: true, get: f10 });
try {
    new Uint8Array("I", -1);
} catch(e69) {
}
v65[1] = v65;
Object.defineProperty(v64, 65537, { writable: true, value: v65 });
("I").localeCompare();
