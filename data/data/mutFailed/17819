const v2 = new Uint16Array(Uint16Array);
try { new Int32Array(Array, Uint16Array, Int32Array); } catch (e) {}
function f5() {
    const o11 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a10) {
            return v2;
        },
        ...1000000000000.0,
    };
    return Int32Array;
}
%PrepareFunctionForOptimization(f5);
const v13 = new Array(164);
const v14 = v13?.groupToMap;
let v15;
try { v15 = new v14(Int32Array); } catch (e) {}
const v17 = new Set();
class C18 extends Array {
    toString(a20, a21) {
        this || a20;
        return -65537;
    }
    #h;
    [v13] = v17;
    c = v13;
}
const v26 = new v15();
try { v26.toReversed(); } catch (e) {}
const v28 = new C18();
const v29 = new C18();
function f30() {
    return v13;
}
const v31 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
try { v31.groupToMap(v28); } catch (e) {}
function f33(a34, a35) {
    return f33;
}
v31[Symbol.toPrimitive] = f33;
/nupa\Sc/vms.constructor;
function f41() {
    const o50 = {
        [-4294967297n](a44, a45, a46, a47) {
            eval(a44);
        },
    };
    const v53 = 9 ** 9;
    Math.sqrt();
    9007199254740991 * v53;
    return 164;
}
const v56 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
class C57 {
}
try { C57.toString(); } catch (e) {}
new BigUint64Array(3375);
function f62(a63, a64, a65) {
    try { a63.slice(Symbol, a64); } catch (e) {}
    try { a64.entries(); } catch (e) {}
    a64[8] = a64;
    function F68() {
        if (!new.target) { throw 'must be called with new'; }
    }
    [F68,Uint8Array];
    const v73 = new BigInt64Array();
    try { v73.entries(); } catch (e) {}
    const o75 = {
        __proto__: v73,
    };
    try { o75.every(v29); } catch (e) {}
    const o77 = {
        __proto__: a65,
    };
    o77.h = o77;
    return a64;
}
const v78 = f62(v56, v31);
try { v78.pop(); } catch (e) {}
f62(v56, v78, v78);
1073741824 - 1073741824;
new BigInt64Array(1073741824);
