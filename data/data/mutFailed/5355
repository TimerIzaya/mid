const v2 = new Uint8ClampedArray(3);
new Uint32Array(47);
8 >>> 8;
const v9 = new Float64Array(8);
let v10 = 6;
v10++;
const v13 = Uint8Array?.constructor;
try { new v13(v2); } catch (e) {}
new Uint8Array(v10);
255 >>> 255;
new Uint8Array(255);
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
const v22 = new BigInt64Array(1249);
try { v22.slice(BigInt64Array, v9); } catch (e) {}
4 << 4;
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
new v10(4);
new BigUint64Array(10);
1000 * 1000;
new Uint8Array(1000);
let v41 = 2;
v41--;
[-406823059,-65536,2147483647,-9007199254740990,62716,-15];
[-97092656,-65537,-1];
const v45 = [1858,1];
const v47 = v45 <= 3 ? v45 : 3;
const v49 = new Int16Array(v41);
const v50 = v49?.constructor;
try { new v50(10, 0.2532896350702849, Uint8Array); } catch (e) {}
const v55 = ["undefined"];
const v56 = ("undefined").replaceAll;
const v57 = Reflect.apply(v56, v56, v55);
try { v57.codePointAt(v47); } catch (e) {}
function f59() {
    function f60(a61) {
        try {
            const o62 = {
            };
        } catch(e63) {
        }
    }
    try {
    } catch(e64) {
    }
}
try { Worker.bind(v2); } catch (e) {}
const o68 = {
    "type": "function",
    "f": Uint32Array,
    "g": 3,
    "d": Reflect,
    "e": v9,
    1688384739: Reflect,
};
new Worker(f59, o68);
