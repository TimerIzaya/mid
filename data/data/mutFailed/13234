function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = ("async").constructor;
    v7.length = v7;
    v7.raw(v7);
}
const v9 = new F3();
const v10 = v9?.constructor;
try { new v10(41878.67524362868, 41878.67524362868); } catch (e) {}
2147483649 + 2147483649;
class C14 {
    constructor(a16, a17) {
        const v18 = this?.constructor;
        try { new v18(v9, C14); } catch (e) {}
        a16 | a16;
        /Babc|def|ghi/dimsy;
        const v22 = /E(x)(x)(x)\2a*b(?:ab)?/vdimsy;
        v22.sticky = v22;
        const v23 = /((((.).).).)p\P{scx=Greek}\xed\xa0\x80/vim;
        try {
            v23.toString = a16;
        } catch(e24) {
        }
    }
    #g = -1;
}
const v25 = new C14(-1, 2147483649);
const v26 = new C14(2147483649, v25);
v26.length;
new C14(41878.67524362868, 41878.67524362868);
class C29 extends C14 {
    static #toString(a31, a32, a33, a34) {
        try {
            a32.b = 2147483649;
        } catch(e35) {
        }
        return a34;
    }
    static e;
    #b = -1;
    static #c = -1;
}
C29.name = C29;
const v36 = new C29();
const v37 = v36?.constructor;
try { new v37(); } catch (e) {}
const v39 = new C29();
v39.length;
const v41 = new C29();
v41.length = v41;
([])["concat"]("concat");
