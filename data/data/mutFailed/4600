const v2 = new Int8Array(8);
const t1 = ("V9t").isPrototypeOf;
%OptimizeFunctionOnNextCall(t1());
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
new F7();
const v15 = new BigInt64Array(946);
const v18 = new Int32Array(11);
class C19 extends BigInt64Array {
    constructor(a21, a22, a23) {
        super(v15, a21);
        super.buffer;
        v18.byteOffset ^= 946;
        try {
            v2.a = this;
        } catch(e25) {
        }
    }
    /*
    constructor(a27, a28, a29, a30) {
        super();
        function f31() {
            return a30;
        }
        for (let v32 = 0; v32 < 5; v32++) {
            f31();
            %OptimizeFunctionOnNextCall(f31);
        }
    }
    */
    [v15];
    static 197 = v2;
}
new C19(8, 8, 946);
new C19(8, 11, 946);
new C19(946, 946, 11);
function f37() {
    const t39 = [-0.685155357392599,5.0];
    t39.length &= 1;
    for (let [v42] of "Opx24") {
    }
    const o45 = {
    };
    return "caller";
}
/\p{Changes_When_NFKC_Casefolded}/guis;
