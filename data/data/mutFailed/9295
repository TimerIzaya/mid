function f0() {
    const o9 = {
        __proto__: 35147,
        "a": 48916,
        "g": 48916,
        "h": -4.0,
        [-4.0]: -4.0,
        get f() {
            this[this] = this;
            const v5 = this.h;
            [this,[v5,48916,v5,v5,-4.0]];
            [48916,35147,this,v5,-4.0];
            return -4.0;
        },
        ...35147,
        [35147]: -4.0,
    };
    return o9;
}
const v10 = f0();
const v11 = f0();
const v12 = f0();
class C13 {
    toString(a15) {
        const v16 = new f0();
        v16[3099179150] = a15 in v16;
        Object.defineProperty(v12, 2726779034, { writable: true, configurable: true, set: f0 });
        super.f += a15;
        new f0();
        Object.defineProperty(v11, "d", { enumerable: true, get: f0, set: f0 });
        return v10;
    }
    #m(a20) {
        a20 = this;
        const v23 = v12[Symbol.asyncIterator];
        a20.__proto__;
        f0 ** 36658;
        Math.log(36658);
        36658 + a20;
        !v11;
        36658 + v11;
        return v23;
    }
}
const v32 = new C13();
const v33 = new C13();
const v34 = new C13();
class C35 {
    static set a(a37) {
        new Int8Array(10);
        new Uint8Array(4);
        new Float64Array(6);
    }
    f = v33;
    c;
    [v12] = v34;
    [v32];
}
const v47 = new C35();
new C35();
let v49 = new C35();
class C50 extends C13 {
    static toString(a52, a53, a54, a55) {
        super[v11];
        return a54;
    }
    static 94;
    [v47] = v10;
    static d = v33;
    [v49];
    g = C13;
    static {
        %VerifyType(C13);
        Object.defineProperty([f0], 536870887, { set: f0 });
        ++v49;
    }
}
new C50();
new C50();
new C50();
const v65 = new Int8Array(2);
v65[Int8Array] = v65;
new Float64Array(571);
const v71 = new Uint8Array(10);
new Float64Array(2713);
const v77 = new Int32Array(16);
new Uint8Array(9);
function F81(a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a85;
    } catch(e86) {
    }
    try {
        this.e = v77;
        const v95 = new Uint8ClampedArray(16);
        v95[10] = v95;
        const v97 = -1322;
        v95["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v71);
        } catch(e99) {
        }
        const v101 = new Uint8ClampedArray(2);
        let v102 = v101[315];
        function F103(a105, a106, a107, a108) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = "536870889";
            } catch(e109) {
            }
            try {
                this.b = a108;
            } catch(e110) {
            }
        }
        new F103(1073741824n, 1073741824n, 257n, "6");
        const v112 = new F103(1073741824n, 257n, 257n, v97);
        const v113 = new F103(v102, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 >>> 3768;
        const v121 = new BigInt64Array(4046);
        v121[123];
        -115;
        function f126(a127, a128) {
            a127++;
            a128 + a128;
            const v131 = a127++;
            v131 >> v131;
            try {
                v112.toString = a128;
            } catch(e133) {
            }
            Object.defineProperty(v113, v113, { configurable: true, enumerable: true, get: f126 });
            let o135 = {
                "d": a127,
                ...a127,
                get e() {
                    return a128;
                },
            };
            [,...o135] = v121;
            a128[4046];
            const o139 = {
                "maxByteLength": 3035,
            };
            const v141 = v102--;
            v101[v141] ||= v141;
            try { o139.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 9;
        }
        f126(4046, 3768);
        try { Uint8ClampedArray.bind(f126); } catch (e) {}
    } catch(e150) {
    }
}
new F81(9, 16, 16);
new F81(16, 2713, 2);
