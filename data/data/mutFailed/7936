function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 463797856;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
v6.c = v6;
const v7 = [-256,1788310373,15,1859469884,512,-9,2147483648,1008715139,-547618487,4294967297];
v7[8];
const v9 = [16,22716,2147483647,-1024,5,0,10000,255];
const v10 = [1073741824,694323053,9223372036854775807,3,1073741824];
class C11 extends F0 {
    10 = v4;
    static #o(a13, a14, a15) {
        const v16 = delete a14?.length;
        if (a13) {
            try {
                v10.toString = v16;
            } catch(e17) {
            }
        } else {
            function F18(a20, a21) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a15;
                } catch(e22) {
                }
                try {
                    this.h = a20;
                } catch(e23) {
                }
                try {
                    this.f = v7;
                } catch(e24) {
                }
            }
            const v25 = new F18(this, a13);
            const v26 = new F18(v9, v25);
            new F18(this, v26);
        }
        return v16;
    }
}
new v4();
new C11();
new C11();
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(v6, v4); } catch (e) {}
    try { a34.values(); } catch (e) {}
    try {
        this.d = v10;
    } catch(e37) {
    }
}
let v38;
try { v38 = new F31(C11, v6); } catch (e) {}
new v38(v10, v10);
new F31(v10, v9);
new F31(v10, v10);
const v42 = [155533.8602852358,2.0];
let v43;
try { v43 = v42.toLocaleString(); } catch (e) {}
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    NaN % NaN;
    for (const v53 of Array(19793)) {
        v42[658291203] = v38;
    }
    const v55 = v43 ^ undefined;
    v55 * (v55 >>> v55);
}
const v58 = new F45();
const v59 = v58?.constructor;
try { new v59(); } catch (e) {}
new F45();
