let v0 = 64;
const v2 = new Float64Array(v0);
const v5 = v2[367];
let v6;
try { v6 = v5(4059, v5); } catch (e) {}
Math.round(Float32Array);
Math.tanh(Float32Array);
const v11 = -Float32Array;
Float32Array - v6;
const v13 = 7633 | Float32Array;
v11 ** Float32Array;
const v15 = new Float32Array(4059);
v0 **= v13;
try {
    v15.__proto__ = v2;
} catch(e16) {
}
new Float64Array(4);
Object.defineProperty(v6, 4, { writable: true, enumerable: true, get: Date });
new Float32Array(v15, v13, 64);
const o25 = {
    "isExtensible": Date,
    "ownKeys": Date,
    "preventExtensions": Date,
};
new Proxy(v15, o25);
new Date();
Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[-3.942521664036782e+307,-3.942521664036782e+307,-3.942521664036782e+307]]);
