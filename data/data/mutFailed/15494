function f0() {
    try {
        const t2 = "-1258974686";
        t2.__proto__ = "-1258974686";
    } catch(e3) {
    }
    const t6 = "-1258974686";
    t6[-4294967296] = f0;
    const v4 = ["-1258974686"];
    let v5;
    try { v5 = v4.fill(f0); } catch (e) {}
    const v6 = [v4,v4,-4294967296,"-1258974686"];
    v6[3];
    [v6,v6,v6];
    let v12 = 2.2250738585072014e-308;
    v12--;
    const v14 = ~v12;
    Math.log1p(v14);
    const v16 = v14 | -65537;
    const v18 = new Date();
    Object.defineProperty(v18, 5, { writable: true, enumerable: true, set: f0 });
    function F19(a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a22;
        } catch(e23) {
        }
    }
    new F19(v12, v5);
    new F19(-65537, 10000);
    new F19(v16, 10000);
    let v27 = !v14;
    ++v27;
    let v29 = Math.round(v27);
    v29--;
    ("YZ")[1];
    const o45 = {
        ["YZ"](a34, a35) {
            this === a35;
            5 + 5;
            const v41 = 421301.22171579907 / a34;
            const v42 = 5 & 5;
            v42 * v42;
            Math.cos(v41);
            return "YZ";
        },
        [-4294967296]: "YZ",
    };
    const v46 = o45?.YZ;
    try { new v46(f0, f0); } catch (e) {}
    return o45;
}
const v48 = f0();
f0();
const v50 = f0();
function f51() {
    return f0;
}
function f52(a53) {
    function f57(a58, a59, a60) {
    }
    const v61 = f57(567768644, -4294967297, 567768644);
    const o62 = {
        ...f57,
    };
    if (o62.d) {
        typeof o62 === "function";
    } else {
        -9223372036854775808 === v61;
    }
}
Object.defineProperty(v50, "getTimezoneOffset", { configurable: true, get: f51, set: f52 });
Map.g = Map;
const v69 = typeof Map;
const v71 = v69 === "number";
let v72;
try { v72 = v50.getTimezoneOffset(v69, "number", v69); } catch (e) {}
const v73 = v72?.YZ;
try { new v73(f52, v50); } catch (e) {}
let v76 = 513;
v76--;
new Array(v76);
const o81 = {
    "maxByteLength": 2268320186,
};
const v83 = new SharedArrayBuffer(129, o81);
new Uint8ClampedArray(v83);
const v86 = new Map();
try { v86.has(v71); } catch (e) {}
9223372036854775807 + 9223372036854775807;
10 - 10;
function f93() {
    return Map;
}
new Float32Array(255);
new Uint8ClampedArray(1);
let v100 = 16;
v100++;
const v103 = new Float64Array(v100);
const v104 = [-1235077344,-4096,50383815,-8476,-9007199254740991];
const v105 = v104.length;
const v106 = v105 == v48;
v106 || v106;
const v109 = v86 ^ (v106 ? v105 : v48);
v109 * v109;
const o111 = {
    "apply": f0,
    "call": Array,
    "isExtensible": Array,
    "ownKeys": Array,
    "preventExtensions": f0,
    "set": Array,
    "setPrototypeOf": Array,
};
Proxy.e = Proxy;
const v113 = new Proxy(v103, o111);
try { v113.subarray(1, 1); } catch (e) {}
class C116 extends Set {
}
new C116(v104);
