function f3() {
    return 9;
}
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    a6 >>> a6;
    try {
        a6 *= this;
        139837843 in this;
        0 <= 0;
        new Int8Array(0);
        new BigUint64Array(10);
        128 !== 128;
        class C23 extends -2.241327492701015 & 9007199254740991 {
        }
        new C23();
        new Uint8ClampedArray(128);
        this.g = 9;
    } catch(e26) {
    }
}
try { F4.toString(); } catch (e) {}
const v28 = new F4(64);
new F4(9);
const v30 = new F4(139837843);
let v31 = 1n;
v31--;
let v33 = 255n;
v33--;
16n >= 16n;
function f37(a38, a39, a40) {
    a38.f = a38;
    const o49 = {
        valueOf(a42, a43, a44) {
            let v45 = 0;
            while (v45 < 3, a42) {
                super.e = f37;
                this[a43] <<= a40;
                v45++;
            }
            return v31;
        },
        "e": v33,
        "f": 9,
        ...v28,
    };
    return o49;
}
function f51(a52, a53) {
    const o54 = {
        [a52]: a53,
        [a53]: -65537,
        65536: -65537,
    };
    return -65537;
}
const v56 = f37(v30, v33, f37(v28, v31, f3));
Int32Array.g = Int32Array;
const v58 = [1000];
const v61 = new Int8Array(1342);
Object.defineProperty(v61, v58, { writable: true, enumerable: true, value: v61 });
v56.b = v56;
f37(v28, v33, f3);
const o65 = {
    [9007199254740992n]: -43292n,
};
const v66 = o65?.__lookupGetter__;
try { new v66(f37); } catch (e) {}
const v2 = new Array(8);
class C3 extends Array {
    n(a5, a6) {
        const v7 = v2[3499145331];
        try { v7(a5, a5, a6, v7); } catch (e) {}
        return this;
    }
    static get e() {
        const v12 = 715084368 << this;
        let v13 = this >>> 715084368;
        v12 & 715084368;
        const v15 = ++v13;
        v13 >>> 715084368;
        Math.acosh(v13);
        v13 + v15;
        return 8;
    }
}
new C3();
new C3();
new C3();
let v22;
try { v22 = v2.find(C3); } catch (e) {}
const t23 = "fromEntries";
t23[9] = "fromEntries";
const v26 = ("fromEntries")?.trimRight;
try { new v26(); } catch (e) {}
let v29 = 127;
v29 !== v29--;
new v22(v29);
try { Array.concat(v26); } catch (e) {}
const v34 = [857848.4744835799];
try { v34.values(); } catch (e) {}
try { v34.groupToMap(v34); } catch (e) {}
[1000000.0,-4.483787736365636,6.225469033173713];
const v39 = ([1.0])?.sort;
try { v39(v39); } catch (e) {}
try { new v39("-1055423864"); } catch (e) {}
try { ("h").valueOf(); } catch (e) {}
("h").normalize("NFKD");
