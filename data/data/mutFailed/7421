const v0 = [];
function f4(a5, a6) {
    const o13 = {
        set h(a8) {
            return this;
            try {
                const o10 = {
                };
                RegExp.apply(o10, o10);
            } catch(e12) {
            }
        },
        "e": 2004297363n,
        __proto__: a6,
    };
    return o13;
}
f4(-128n, f4(7n, -128n));
const v16 = [155533.8602852358,2.0];
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    function f20() {
        class C21 {
            set h(a23) {
            }
            b;
        }
        new C21();
        return this;
    }
    this[Symbol.toPrimitive] = f20;
    for (const v30 of Array(19793)) {
        v16[658291203] = null;
    }
    const v31 = [this,this,this];
    v31[Symbol.toPrimitive] = Array;
    undefined ^ v31;
}
new F18();
new F18();
const v38 = f4(7n, v0);
d = 2004297363n;
try {
    new f4(v0, v0);
} catch(e40) {
}
const v44 = [-1.0,0.6913220529619881,4.0];
[805.5357746571024,-371.1547294695022,1.298957682582955e+308,5.0,1.0];
const v46 = [-1000000.0,0.1095312422393816,-88321.47941024089,0.0908977600958436,-4.0399802691277524e+307,1.5181095183870728e+308];
const v49 = new Uint8ClampedArray(2664);
function F50(a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a52;
    try {
        this.f = a53;
    } catch(e54) {
    }
    try {
        this.c = 2664;
    } catch(e55) {
    }
}
new F50(7n, v44);
new F50(v38, v0);
new F50(-2135868651, v46);
v49[0] = "asIntN" / "number";
