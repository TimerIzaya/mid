const v4 = new Set();
const v6 = new Set();
const v7 = [0.5056701084838725,-61629.798017403926,NaN,864.4381894698445,2.220446049250313e-16,783231.8077183717];
const v10 = new BigUint64Array();
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v10[16] = v7;
    } catch(e17) {
    }
}
const v18 = new F11(16, 16, F11, F11);
try { v6.forEach(v6); } catch (e) {}
const v23 = [0.11391117486554414,727668.0600189252,-2.0,-1.5962814570938971e+308,1000000000.0,388.9162696182798,-26459.59071905876,-2.234619958669371e+307,-1.393035915748086e+308,-0.0];
const v24 = [-3.0,2.2250738585072014e-308,-877.9711325843282];
function f25(a26, a27, a28, a29) {
    const o30 = {
        [BigUint64Array]: a27,
        [a28]: a29,
        "g": Set,
    };
    return o30;
}
f25(v7, v23, 7, v24);
f25(v24, v18, 7, v7);
f25(v18, v7, Set, v7);
[-633.8009764404005,-1000000000000.0,1.4079925739869874e+308,1.7934491198477893,0.05728166281095637,1.7976931348623157e+308];
function f35() {
    return f35;
}
for (let [i39, i40] = (() => {
        let v37 = 10;
        v37--;
        return [0, v37];
    })();
    (() => {
        i39 & i39;
        const v42 = i39 < i40;
        v42 || v42;
        class C44 {
            #o(a46, a47) {
                delete a46[3] ** i40;
                [1.4847218356463428e+308,-5.0,6.172446373125275,-557.9857699837012,2.0,-4.0];
                [-3.0,8.194042222368483e+307,-1.0];
                [1000000.0,1.0,-3.0,1000.0];
                return this;
            }
        }
        Symbol.matchAll;
        C44[Symbol.toPrimitive] = f35;
        3375 >> 3375;
        try { new BigUint64Array(v6, v6, v4); } catch (e) {}
        const v60 = new BigUint64Array(3375);
        let [v61,,v62,...v63] = v60;
        v61 >> v61;
        v62--;
        return v42;
    })();
    i39++) {
}
