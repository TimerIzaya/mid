function f3(a4) {
    const o5 = {
        ..."toStringTag",
    };
    o5[5] = o5;
    return o5;
}
class C6 extends f3 {
    ["15036"];
}
let v7;
try { v7 = new C6(); } catch (e) {}
try { v7.valueOf(); } catch (e) {}
const v9 = new C6();
let v10 = -11n;
v10 & v10;
class C13 {
    o(a15, a16) {
        const v17 = this?.constructor;
        try { new v17(); } catch (e) {}
        a15.arguments = a15;
        ({"h":v10,...a16} = this);
        let v19;
        try { v19 = new v10(a15); } catch (e) {}
        const o20 = {
        };
        try {
            1371 % 1371;
            const v24 = new Int16Array(1371);
            v24[96];
            const v28 = ("sync")?.toLocaleUpperCase;
            try { new v28(); } catch (e) {}
            ("sync")[-5.0];
            o20.d = v19;
        } catch(e31) {
        }
        try {
            const o32 = {
            };
            o32.d = o32;
            o32.d = v19;
            o32.f = -2147483649n;
        } catch(e33) {
        }
        try {
            function F34(a36, a37) {
                if (!new.target) { throw 'must be called with new'; }
                this.c = a37;
            }
            function f38(a39) {
                function f41(a42) {
                    a42 & a42;
                }
                this.onmessage = f41;
                v9.__proto__;
            }
            f38.name;
            const v49 = [f38];
            const o50 = {
                "arguments": v49,
                "type": "function",
            };
            const o51 = {
            };
            o51.h = o51;
            o51.d = v19;
            o51.f = -2147483649n;
            o51.e = -2147483649n;
        } catch(e52) {
        }
        const v55 = new Int32Array(257);
        function f56(a57, a58, a59, a60) {
            let v62 = new Map();
            [...v62] = v55;
            let [...v63] = v55;
            return v62;
        }
        try {
            const o64 = {
            };
            o64.c = o64;
            o64.d = v19;
            o64.f = -2147483649n;
            o64.a = a16;
            return o64;
            const v66 = new BigInt64Array();
            v66[0] = v66;
            try {
                Array(-12302);
            } catch(e70) {
            }
        } catch(e71) {
        }
        return 0n;
    }
}
const v72 = C13?.apply;
try { v72(v72, v72); } catch (e) {}
try { new v72(C13, v9); } catch (e) {}
new C13();
const v76 = new C13();
try { v76.o(0n, v72); } catch (e) {}
let v78;
try { v78 = v76.o(C6, v10); } catch (e) {}
v78.d;
new C13();
[549.0446026521968,-723614.8410958203,2.220446049250313e-16];
gc();
function f85(a86, a87, a88, a89) {
    const o94 = {
        [a88](a91, a92, a93) {
            switch (a86) {
                default:
                    break;
            }
        },
    };
    return a89;
}
f85.e = f85;
f85.h = f85;
const v95 = [1.7976931348623157e+308,4.0,-938721.1407019085,-1.0,-183.35329447949357,4.0,-3.1897515634632185,0.0];
v95[7] = v95;
([2.2250738585072014e-308,6.122990157382489])[1];
new Map();
Uint32Array.a = Uint32Array;
const v101 = new Uint32Array(Uint32Array);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
Int16Array.d = Int16Array;
new Int16Array(v101);
