const v5 = new Uint8ClampedArray(1280);
new BigInt64Array(256);
const v11 = new Float64Array(1000);
const v14 = new Uint8Array();
const v15 = `string${-848.8361782883886}boolean${v14}asyncIterator${Uint8Array}bigint${256}name`;
const v18 = [delete v14[2668],v15];
Reflect.apply(v5.findIndex, v11, v18);
const v22 = Symbol.isConcatSpreadable;
v14[v22] = BigInt64Array;
Uint8ClampedArray - Uint8Array;
delete Reflect[43];
function f25() {
    return v22;
}
let v27 = 0;
while (v27 < 4) {
    Reflect.__proto__;
    v27++;
}
const v32 = Array();
v32[Symbol.isConcatSpreadable] = Uint8ClampedArray;
Array()["concat"](v32, v14);
