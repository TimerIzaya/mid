new Uint32Array(255);
const v5 = new Uint8Array(256);
256 in v5;
const v10 = 256 >> 256;
Math.asinh(-1024);
v10 >> 256;
new Uint8ClampedArray(5);
const v22 = [];
function f23() {
    const o39 = {
        ...v22,
        "c": v22,
        "e": v22,
        "f": v22,
        m() {
            function f25(a26) {
                function f28(a29) {
                    const v30 = [256,256,a26,-1,a29];
                    [-1,v5,this,[this],v30];
                }
                this.onmessage = f28;
                new f23();
            }
            const v36 = [Uint8ClampedArray];
            const o37 = {
                "arguments": v36,
                "type": "function",
            };
            new Worker(f25, o37);
        },
        "h": f23,
    };
    [1.0,-719.809310779852,0.25457047948861544,-4.472914695959473,1.0,-3.0];
    [-2.0,-3.0,0.4053318861519567];
    [4.236827091493346,-1.7976931348623157e+308,0.8321769794907622,-1.0,-1000000.0,0.7726220677863448,1000000000000.0,-0.0,1.0,528680.2851885264];
    f23();
    %PrepareFunctionForOptimization(f23);
    f23();
    f23();
    %OptimizeMaglevOnNextCall(f23);
    f23();
    const v51 = new Int32Array(1024);
    for (const v52 of v51) {
        new SharedArrayBuffer();
    }
}
f23();
f23();
for (let v57 = 0; v57 < 5; v57++) {
}
