function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    try {
        this.h = 1195430666;
    } catch(e3) {
    }
    try {
        this.e = 1195430666;
    } catch(e4) {
    }
    try {
        this.a = this;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v17 = Math.acos(-1.123561447561815e+308);
Math.log1p(-1.123561447561815e+308);
-1.123561447561815e+308 >>> 4096;
function f31(a32) {
    const o33 = {
        ..."toStringTag",
    };
    return o33;
}
f31.toString = f31;
class C34 extends f31 {
    ["15036"];
}
function f35(a36, a37) {
    const v38 = [129,16,1369206470,22652];
    class C39 extends a37 {
        set d(a41) {
            function f42() {
                let {"a":v44,"b":v45,"length":v46,} = v38;
                return a37;
            }
            Worker(f42);
        }
    }
    return v17;
}
C34.toString = f35;
[v7];
[v8,F0,536870889,[F0,v6,-5.0],v8];
class C57 {
    constructor(a59) {
        this.constructor;
        try {
        const t0 = -1.123561447561815e+308;
        new t0();
        } catch (e) {}
        Uint8Array.toString = f31;
        536870889 < Uint8Array;
        function F66(a68, a69) {
            if (!new.target) { throw 'must be called with new'; }
            function f70(a71, a72) {
                const o73 = {
                    "b": a69,
                };
                return a72;
            }
            f70(f70, F66);
            this.constructor;
            try { new this(f70); } catch (e) {}
            ++a69;
        }
        const v80 = ~(10 && 10);
        Math.sinh(-5.0);
        const v82 = -10;
        const v83 = +v80;
        2147483649 & v82;
        C34 | v83;
    }
}
new C57(10);
new C57();
