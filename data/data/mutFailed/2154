class C3 {
    static #valueOf(a5, a6) {
        try {
            ("padEnd").#valueOf("e", this);
            function F8() {
                if (!new.target) { throw 'must be called with new'; }
                const v11 = -(-7);
                v11 ** v11;
            }
            function F13(a15, a16) {
                if (!new.target) { throw 'must be called with new'; }
                const v17 = this.constructor;
                try { new v17(v17, F8, F13, this, v17); } catch (e) {}
                new F8();
            }
        } catch(e20) {
        }
        return a5;
    }
    static 1;
    constructor(a22) {
        function f23(a24) {
            let [v25,v26] = "padEnd";
            const o27 = {
            };
            try {
                o27.c = 836028.7999128257;
            } catch(e28) {
            }
            try {
                const o29 = {
                };
                o29.c = 836028.7999128257;
                o29.e = a22;
            } catch(e30) {
            }
            try {
                const o31 = {
                };
                o31.e = o31;
                o31.c = 836028.7999128257;
                o31.e = a22;
                o31.d = v26;
            } catch(e32) {
            }
            try {
                const o33 = {
                };
                o33.f = this;
                new f23(-525.1582304247171, 1000.0);
                const o44 = {
                    toString(a38, a39, a40) {
                        function f41() {
                            return a40;
                        }
                        Object.defineProperty(a38, Symbol.toPrimitive, { writable: true, get: f41 });
                        return Symbol;
                    },
                };
                o33.c = 836028.7999128257;
                o33.e = a22;
                o33.f = a22;
            } catch(e45) {
            }
            return v25;
        }
        f23(f23);
    }
}
new C3(C3);
const v48 = new C3(836028.7999128257);
new C3(C3);
const v56 = new Uint8ClampedArray();
const o57 = {
    ...v56,
};
new v48();
let v60 = 0;
const v63 = v60++;
Math.log10(44149);
Math.fround(v63);
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v48;
    } catch(e71) {
    }
}
const v72 = new F66(2, -5.0, 15645);
new F66(10, v72, 10);
new F66(2, 836028.7999128257, 15645);
const v76 = Uint8ClampedArray.prototype;
try { v76.at(Uint8ClampedArray, Uint8ClampedArray, v76, Uint8ClampedArray); } catch (e) {}
