for (let v3 in [-65535,536870889,4096]) {
    v3--;
    Math.log10(v3);
    v3 ** 1000000000000.0;
}
new Array(2210);
const o10 = {
};
const v14 = new Uint32Array(5);
v14[1] = 716884141;
[-7.070664335355856e+307,-305.15746725091003,7.121379768182983,0.0,-5.0,1000000.0,-4.21996573934736,-4.036925378718186e+307];
const v16 = [1000.0,0.07505707100595416,0.5252503788737368,-1.0,-3.0,-8.029098728077528,1000000000.0,1000.0,-Infinity,2.2250738585072014e-308];
let v17 = [1000.0,1.4403358403994661e+308,-1.3932995436449368e+308,808343.4382461587,-663.4741824203231,-7.090619721417944e+306,-1.0,-0.0,441.5751551582789];
function f18() {
    return Array;
}
class C22 {
}
f18(f18, f18, f18, f18);
new Int8Array(1487);
class C27 extends f18 {
    #h = v16;
    o(a29, a30, a31) {
        new this(2210);
        new Float64Array(Array(3303));
        let v38;
        try { v38 = Array.of(f18, 2210); } catch (e) {}
        v38 = a30;
        let v40 = 257;
        ++v40;
        new Uint8ClampedArray(798);
        const o47 = {
            "a": 16n,
            1: 16n,
            257: undefined,
        };
        ++v17;
        Math.log1p(v40);
        const v50 = v17 << v17;
        function F51() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = -65536;
            } catch(e54) {
            }
            try {
                this.b = -65536;
            } catch(e55) {
            }
            try {
                this.e = -65536;
            } catch(e56) {
            }
        }
        !v50;
        return f18;
    }
}
new C27();
new C27();
new C27();
const v61 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
v61.push(v61);
new Int8Array(1024);
function f67() {
    let v68 = -4294967295;
    const v69 = v68++;
    const o73 = {
        valueOf(a71, a72) {
            return v68;
        },
    };
    return v69;
}
new Int8Array(v61);
