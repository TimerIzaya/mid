[-46685];
[256,257,1073741825,6,7,9223372036854775807,63388,-5,2];
[255,-1859373943,8,127,257,-1852532123,-2147483647];
const v5 = new Uint8Array(8);
const v8 = new Int8Array(4);
new Int32Array(91);
function f12() {
    const o21 = {
        ["1073741824"]: 268435441,
        874720287: 268435441,
        get d() {
            try { this.m(268435441, this, this); } catch (e) {}
            const o18 = {
            };
            return Proxy("1073741824", o18);
        },
        ["species"]: "1073741824",
    };
    return o21;
}
const v22 = f12(f12, v5, v8, v5);
const v23 = f12();
const v24 = f12();
v24[1073741824] = v24;
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = this?.constructor;
    try { new v29(a27, v22); } catch (e) {}
    a27[1073741824] = a27;
    try {
        this.g = a28;
    } catch(e31) {
    }
}
F25.length;
const v33 = new F25(v24, v22);
const v34 = new F25(v24, v23);
const v35 = new F25(v22, v23);
function f36(a37, a38, a39) {
    a39.g = a39;
    const o45 = {
        "a": a38,
        get e() {
            v24 & this;
            return (a38 == a38 ? a38 : a38)[15];
        },
        ...a39,
        "c": v34,
        "f": v35,
    };
    return o45;
}
const v46 = f36(v33, v33, v34);
v46.c = v46;
f36(v33, v35, v35, v46, f12, v46);
f36(v34, v33, v33);
58091 >> 58091;
Uint8ClampedArray.length;
try { Uint16Array.from(v34); } catch (e) {}
const v62 = new Uint16Array();
try { v62.entries(); } catch (e) {}
try { ("minor").anchor(v33); } catch (e) {}
const o69 = {
    "type": "minor",
};
gc(o69);
Array(228);
class C72 {
}
const v73 = new C72();
const v74 = v73?.constructor;
try { new v74(); } catch (e) {}
const v76 = new C72();
const v77 = v76?.constructor;
try { new v77(3516, gc); } catch (e) {}
new Float64Array(Float64Array, Float64Array, gc);
Float32Array.e = Float32Array;
new Number(6);
function F90() {
    if (!new.target) { throw 'must be called with new'; }
}
class C92 {
}
const v93 = new C92();
ReferenceError.captureStackTrace(F90, v93);
const v96 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
URIError.caller = URIError;
v96["findIndex"](URIError);
