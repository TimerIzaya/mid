const o2 = {
};
const v3 = gc(o2);
for (let v4 = 0; v4 < 10; v4++) {
    class C5 {
        #f;
        [v4];
    }
    new C5();
}
const v9 = [-948251741n,1760125459n,-948251741n,538601073n];
try {
    o2.toString = gc;
} catch(e10) {
}
let v11;
try { v11 = v3.expm1(v3, v3, v9, 1760125459n, gc); } catch (e) {}
const v12 = [538601073n,538601073n,1760125459n,538601073n];
const v13 = [538601073n,-948251741n,v12,538601073n,1760125459n];
function f14() {
    return f14;
}
const o15 = {
    __proto__: f14,
    "e": f14,
};
v13.f = v13;
const v16 = -Infinity;
let v19 = 0;
const v20 = v19++;
const v23 = new Map();
const o30 = {
    "a": f14,
    [v20]: v23,
    [v23]: Map,
    [2221](a25, a26, a27) {
    },
    ...v23,
    "b": v20,
    [f14]: Map,
    "h": v20,
    valueOf(a29) {
        return a29;
    },
};
-(-1);
Uint32Array.d = Uint32Array;
const v36 = new Uint32Array();
3 >>> 3;
const v42 = BigInt64Array?.bind;
try { new v42(v16); } catch (e) {}
function f44(a45, a46) {
    const o58 = {
        [v36](a48, a49, a50) {
            a46?.[a48].__proto__;
        },
        m() {
            const o55 = {
            };
        },
        n(a57) {
            return a57;
        },
    };
    return a45;
}
function f59() {
    const o65 = {
        "b": f14,
        "a": 549538.9552070533,
        "h": v13,
        ...v3,
        ...o30,
        0: 549538.9552070533,
        [-6.170254254244802e+307](a63, a64) {
        },
    };
    return o65;
}
const v66 = f59();
const v67 = f59();
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    a71[0];
    const v76 = this?.constructor;
    try { v76.call(v67); } catch (e) {}
    try { new v76(a71, a73, a72, a71); } catch (e) {}
    a71[0] = a71;
    a74[0] = a74;
    this.f = a71;
    this.f = v67;
}
new F69(v67, v66, -61894, v66);
try { f44(1760125459n, v16); } catch (e) {}
new f44(1887, 1000);
v11[-5.0] = v12;
new Int32Array(648);
new Float64Array(3);
new BigInt64Array(1890);
const v93 = (a94, a95, a96, a97) => {
    function F98(a100, a101, a102, a103) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return Int8Array;
};
function F106(a108, a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    function f112() {
        return F106;
    }
    class C113 extends f112 {
        constructor(a115) {
            super();
            for (let v116 = 0; v116 < 25; v116++) {
                this["p" + "p"] = v116;
            }
        }
    }
    new C113();
}
Uint8ClampedArray.name = Uint8ClampedArray;
const v125 = new Int8Array(770);
new Uint8ClampedArray(v125);
