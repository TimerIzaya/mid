new Uint8ClampedArray(256);
new Float32Array(1784);
let v6 = 1400;
v6--;
const v9 = Uint32Array?.constructor;
try { new v9(1784); } catch (e) {}
new Uint32Array(v6);
[-1000000.0,NaN,0.9448799403139216,1.7976931348623157e+308,1000000.0,Infinity,245808.27845762414,-840.4667273663769,231176.82140775677];
[-0.584106292095445];
[-2.2250738585072014e-308,3.0,-249.6125574088826,0.7463006706423734,1.0,1000.0];
const v15 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
function f16(a17, a18) {
    try { a18.group(a18); } catch (e) {}
    function F21(a23) {
        if (!new.target) { throw 'must be called with new'; }
        this.__proto__ = this;
        const v24 = 139837843 in this;
        v24 || v24;
    }
    new F21();
    new F21(a18);
    const o28 = {
        __proto__: v15,
    };
    o28.g = o28;
    return o28;
}
f16.prototype;
const v30 = f16(v15, v15);
try { v30.unshift(Uint8ClampedArray); } catch (e) {}
v30.group(f16);
