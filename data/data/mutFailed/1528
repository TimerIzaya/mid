let v0 = 4;
let v2 = new Uint8Array(v0);
512 | 512;
const v6 = new Int32Array(512);
let v9;
try { v9 = Uint8Array.call(v0); } catch (e) {}
const v10 = new Uint8Array(2);
!true;
function f13(a14, a15) {
    a14 >> a14;
    const o29 = {
        __proto__: v6,
        n(a18, a19, a20, a21) {
            let v22 = v6[-1];
            v22 = a15;
            let {"c":v23,...v24} = this;
            v24[this] = this;
            v24 instanceof a14;
            Reflect.construct(Uint8Array, [v24,a14,a15], Uint8Array);
            return Uint8Array;
        },
        "f": true,
    };
    return o29;
}
const v30 = f13(v0, 2);
const v32 = v10["values"]();
try { v32.next(); } catch (e) {}
Object.defineProperty(v32, v32, { configurable: true, enumerable: true, get: f13, set: f13 });
Math.log2(512);
-1811266488 + 512;
let v38 = Uint8Array || 512;
const v39 = v38 | v38;
v0--;
f13(512, 2);
const v42 = f13(512, 2);
Uint32Array ** v10;
try { v9(); } catch (e) {}
Object.defineProperty("values", 2, { writable: true, enumerable: true, get: f13 });
let v47 = v2--;
v47 = v32;
const v49 = new Float32Array(3);
const v50 = v49?.constructor;
try { new v50(v30, Float32Array, v30); } catch (e) {}
%VerifyType(v0);
v42[5] = v50;
let v57 = 7.596188050744255e+307;
v57--;
-13 / v38;
v38--;
Uint16Array.prototype = Uint16Array;
new Uint16Array(1000);
let v65 = 4087;
v65--;
const v68 = new Int8Array(v65);
v68[457] = v68;
if (v65 !== v32) {
    let v71 = new Float32Array(Float32Array, Float32Array, Float32Array);
    try {
        v71.toReversed();
    } catch(e73) {
    }
    v71++;
    const v75 = v71.constructor;
    try { new v75(); } catch (e) {}
    new Uint32Array();
    try { v32.isInteger(Math, v10); } catch (e) {}
} else {
    f13(f13, v39, 3, 1000);
}
let v81 = 2794;
v81++;
new Uint8Array(v81);
const v85 = [v49];
v85[0];
Reflect.construct(Uint32Array, v85);
