function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    a7--;
    a7 ^ a7;
    const v10 = this.constructor;
    try { new v10(3n); } catch (e) {}
}
new F5(349865170n);
function f13() {
    return 9;
}
class C14 extends f13 {
    #f;
    static c;
    static {
        Object.defineProperty(this, this, { writable: true, configurable: true, enumerable: true, get: f13 });
        this[201] = 9;
        9 | 9;
        const o17 = {
        };
        function F18(a20, a21, a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
        }
        let v24 = Float64Array;
        9 && (v24 = F18);
        super.c |= 9;
        const o29 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o29);
    }
}
new C14();
new C14();
new C14();
const o38 = {
    o(a37) {
        return this;
    },
};
o38["o"]();
new Uint32Array(5);
new Int8Array(2010);
new Int16Array(4096);
class C49 {
    #valueOf(a51, a52) {
        const v54 = WeakMap();
        "m" > v54 ? "m" : v54;
        return this;
    }
    #o(a58) {
        for (let i60 = 0; i60 < 6;) {
            const t53 = 349865170n;
            var c = t53(this, i60);
        }
    }
    static set f(a70) {
        const o73 = {
            "maxByteLength": 129,
        };
        SharedArrayBuffer();
        const t61 = "m";
        t61();
    }
}
const v77 = new C49();
const v78 = new C49();
const v79 = v78.constructor;
Math.random();
gc(256);
Object.defineProperty(/gk4b*/vmsy, 9, { enumerable: true, set: gc });
new v79();
const v87 = v78.__lookupGetter__;
try { v87(); } catch (e) {}
const v89 = new C49();
function f90() {
    function F92(a94) {
        if (!new.target) { throw 'must be called with new'; }
        const v95 = this.constructor;
        v95.e = v95;
        try { new v95(); } catch (e) {}
        this.g = 2010;
        this.f = a94;
        this.h = a94;
    }
    try { F92.bind(-143547321); } catch (e) {}
    const v98 = new F92(2010);
    const o99 = {
    };
    new Proxy(v98, o99);
    return v89;
}
f90.d = f90;
function F102(a104, a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    a106.valueOf();
    a107.e = a107;
    const v109 = this?.constructor;
    try { new v109(v78, a106, a104, F102); } catch (e) {}
    a107.toLocaleString();
}
new Date();
new Float64Array(16);
new F102("m", C49, v89, C49);
const v118 = new F102(v77, v78, "m", v77);
new F102(v118, v118, v78, v118);
