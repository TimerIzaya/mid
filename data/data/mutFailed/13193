function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 1;
    } catch(e3) {
    }
    try {
        this.b = 1;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
[-Infinity,-7.230945278929126,2.220446049250313e-16,-1.7976931348623157e+308,-1000.0,-1.0,5.002169598915335,1e-15,-5.0,-4.0];
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
const v22 = new Int32Array(7);
new Uint16Array(v22);
1000000.0 % 1000000.0;
const v30 = ([-698004.1950483839,2.2250738585072014e-308,-658.5488403472419,1.7976931348623157e+308])?.groupToMap;
let v31;
try { v31 = new v30(-8516); } catch (e) {}
const v32 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
v32.g = v22;
v32.g = v32;
[1.4550120056683328e+308,-1.0772967663163728e+308,186061.78370046848,-1.7976931348623157e+308,-5.0,-Infinity,0.03200553966660591];
const v39 = new BigInt64Array(14);
4096 / 4096;
function f43(a44) {
    try {
        -35199 % (v22 / -1478256740);
    } catch(e49) {
    }
}
Object.defineProperty(Uint8Array, "d", { writable: true, configurable: true, enumerable: true, set: f43 });
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v50 = new Uint8Array(4096);
const v53 = [-2.216170140955498,-2.2250738585072014e-308,-643865.3403199288,NaN];
function f54() {
    Object.defineProperty("major", 1164279220, { configurable: true, enumerable: true, get: gc, set: f43 });
    const o59 = {
        "b": 1e-15,
        [3](a58) {
        },
    };
    return 3;
}
v53.toString = f54;
this.decodeURIComponent(v53);
let v62 = 127;
const v63 = v62++;
function f64(a65, a66) {
    return a65;
}
new Promise(f64);
let v69;
try { v69 = v31.then(v39, v63); } catch (e) {}
try { v69.then(v32, v50); } catch (e) {}
function f71(a72, a73) {
    const o74 = {
    };
    return o74;
}
for (let v75 = 0; v75 < 25; v75++) {
    const v76 = f71();
    Object.defineProperty(v76, v75, { enumerable: true, get: f71, set: f71 });
    try { Reflect.preventExtensions(v76); } catch (e) {}
    const o80 = {
    };
    gc(o80);
}
