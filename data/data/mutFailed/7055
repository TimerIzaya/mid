[];
const v3 = new Uint32Array(411);
new Uint32Array(4);
do {
} while ((() => {
        for (let v12 = 0; v12 < 25; v12++) {
            function f13(a14, a15, a16, a17) {
                return -261.99102172609366;
            }
        }
        return 6;
    })())
new Float32Array(3688);
const v24 = Float64Array.of();
const v26 = new Date(Date);
v26.setFullYear(v24, 3811);
try { v3(60470n); } catch (e) {}
let v34 = 1073741824;
const v35 = [Infinity];
class C36 {
    [v35];
}
const v37 = new C36();
const v38 = new C36(v37, v37);
const o39 = {
    ...v38,
    __proto__: v37,
};
for (const v40 in o39) {
}
const v43 = 3688 || 4;
--v34;
3 << v43;
const v46 = 4 / 3688;
Math.asin(1e-15);
const v48 = 4 >>> 3688;
v46 - 3688;
const v50 = /\b[gW\x60]/vi;
const v52 = Symbol.iterator;
const o73 = {
    [v52]() {
        class C55 extends Int8Array {
        }
        const v57 = [1073741824,1073741823,1376142744,1073741825];
        const v59 = ("Vre").toLocaleUpperCase;
        try { v59(v59, -4294967297n, v43, v57); } catch (e) {}
        let v61 = 10;
        const v63 = new Int16Array(Int16Array, Int16Array, Int16Array);
        const v65 = v63["subarray"]();
        function f66() {
            return v65;
        }
        const o72 = {
            next() {
                v61--;
                const v70 = v61 == 0;
                const o71 = {
                    "done": v70,
                    "value": v61,
                };
                return o71;
            },
        };
        return o72;
    },
};
class C74 {
    #p(a76, a77, a78, a79) {
    }
    static #p(a81) {
        function f82() {
            return a81;
        }
    }
    #a;
    constructor(a84, a85, a86) {
        try {
            a85.#a;
        } catch(e88) {
        }
    }
    536870887;
    static f = v48;
    a;
    static #c;
    b = Float32Array;
}
new C74(v50, 0n);
