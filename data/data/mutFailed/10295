const v1 = new Map();
const v5 = ["b","o","b"];
const v6 = [v5];
function f22(a23, a24, a25) {
    const o68 = {
        n(a27, a28) {
            class C32 {
                static #m(a34) {
                }
                constructor(a36) {
                    new BigUint64Array();
                    const v40 = new Uint16Array();
                    new Float32Array(v40, -4294967296, a36);
                }
            }
            new C32(C32);
            class C49 extends Int32Array {
            }
            const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
            const o57 = {
                "e": -4294967295,
                ...v50,
                ..."undefined",
                "c": a24,
                "f": "object",
                84: arguments,
                ..."undefined",
                valueOf(a55, a56) {
                    return a56;
                },
                ..."undefined",
                4: "undefined",
                5: -4294967295,
                6: -268435456,
            };
            function F63() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C66 {
                static get b() {
                }
            }
            return a24;
        },
    };
    class C70 {
    }
    new C70();
    const v72 = [-2,1024];
    function F73(a75, a76, a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v81 = 0; v81 < 100; v81++) {
            const o85 = {
                6: undefined,
                "d": undefined,
                [268435439n]: 2105444095n,
                __proto__: v72,
                "g": undefined,
                "b": 2105444095n,
                "arguments": this,
                valueOf(a84) {
                },
            };
            o85[1] = o68;
        }
    }
    return a25;
}
const v88 = [0.0,0.0];
const o89 = {
    __proto__: v88,
};
Float32Array.push(0.0);
[v1,v6,v6,v5,"string"];
class C111 {
    constructor(a113, a114, a115, a116) {
        a115[this] = a116;
    }
}
const v117 = new C111(-1.461653635104799e+308, v6, -1.0, -5.0);
function F118(a120, a121, a122) {
    if (!new.target) { throw 'must be called with new'; }
    const v123 = this.constructor;
    try { new v123(C111, -1.0); } catch (e) {}
    const v125 = a121.constructor;
    try { new v125(a121, v117, this, a120); } catch (e) {}
}
const v127 = new F118(2.2250738585072014e-308, v117);
new F118(-9.59045000403769, v127);
new F118(-3.0, C111);
