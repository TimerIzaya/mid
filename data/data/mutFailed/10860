function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        let v6 = 15499;
        const v7 = --v6;
        Math.log1p(-1);
        Math.sin(v6);
        this / -1;
        Math.sin(v6);
        v7 | v7;
    }
    Object.defineProperty(this, "h", { set: f2 });
    try {
        this.a = 536870887;
    } catch(e14) {
    }
    try {
        this.h = 536870887;
    } catch(e15) {
    }
}
new F0();
new F0();
const v18 = new F0();
function f19() {
    return v18;
}
[-993325156,10988,-4294967296,-1886227940,65535,-1584004189,-8,2146092169,16,16];
[-2147483648,-56961635,-65537,1,-128,7970,-2046202326,6,10,1000];
[-9007199254740991,65535,-25205,536870912,-65537,-65535];
[5,-55089,6,-35784,1073741824,2147483647,268435456,-4];
[512];
[-256,14284,-9223372036854775808,512,-1,2,52525,8,9007199254740991];
function f26() {
    return f26;
}
const o28 = {
    [f26]() {
    },
};
o28.toJSON = o28;
const v30 = [[o28]];
function f31(a32, a33) {
    return a33;
}
const v36 = ["function",v30];
const o37 = {
    "arguments": v36,
    "type": "function",
};
new Worker(f31, o37);
