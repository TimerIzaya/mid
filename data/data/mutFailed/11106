function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    -a6;
    try {
        this.d = a6;
        try { a5(-2, -16); } catch (e) {}
        try { ("16").link(-2); } catch (e) {}
        try { F3.valueOf(); } catch (e) {}
        [1.7976931348623157e+308,-9.269738243931002,-2.2250738585072014e-308,5.0,-2.220446049250313e-16,1.3754244653826256e+308,0.3898850825189043,5.65543286752658];
        [130481.47412447166,-0.0,-1e-15,-1.1201445060896575e+308];
        [-1.7976931348623157e+308,1e-15];
    } catch(e17) {
    }
    try {
        this.f = -16;
    } catch(e18) {
    }
    try {
        this.c = -2;
    } catch(e19) {
    }
}
F3.e = F3;
const v20 = new F3(-16, -2);
let v21 = -1;
v21--;
let v26 = v21 / Proxy;
v20.d?.[Proxy];
const v31 = -24623 * -24623;
const v32 = v26++;
-v26;
Math.round(v26);
Math.pow(v26, -24623 >> v32);
const v37 = [-120359.10361182771,0.20729273199597487,3.0,5.285444740348764e+307,911.771957859653,0.20840787090822666,0.40630993260888315];
[0.700005370804561,-949284.5239505183,NaN];
[-1e-15];
const v40 = new F3(v20, -2);
const v41 = new F3(v20, -2110318480);
function f42() {
    v41[Symbol.unscopables] = "object";
    "object" >= v31 ? "object" : v31;
    return v41;
}
try { f42(); } catch (e) {}
Map.name = Map;
const v56 = new Map(F3, v40);
try { v56.forEach(Proxy); } catch (e) {}
const v62 = [-256n,-256n,-256n,v37,-256n];
try { v62.find(-256n); } catch (e) {}
