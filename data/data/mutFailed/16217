function f0() {
    const v4 = 1.3619585714155247e+307 - 1.3619585714155247e+307;
    const o28 = {
        "f": 1.3619585714155247e+307,
        "d": 1.3619585714155247e+307,
        "e": "o",
        ..."toString",
        "c": "toString",
        [1.3619585714155247e+307]: "o",
        10000: "toString",
        get a() {
            if (this === this) {
                const o10 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o10);
            } else {
                const v12 = [];
                function F16(a18, a19, a20, a21) {
                    if (!new.target) { throw 'must be called with new'; }
                    a18.strike();
                    const v23 = this.constructor;
                    try { new v23(a21, v12, a19, a21); } catch (e) {}
                    a19[2];
                }
                new F16("ceil", "pop", "ceil", "isConcatSpreadable");
                try {
                const t0 = 1.3619585714155247e+307;
                t0(1.3619585714155247e+307, this, this, "toString", "o");
                } catch (e) {}
            }
            return this;
        },
    };
    class C32 {
        4;
        constructor() {
            super.f >>= this;
        }
        b = -2.2250738585072014e-308;
        n(a35, a36) {
        }
        2658944561 = -2.2250738585072014e-308;
        static 134;
        #c = -65535;
        514214165;
        [v4] = 1.3619585714155247e+307;
        static b;
        [f0];
        [-65535];
        static [-2.2250738585072014e-308] = -2.2250738585072014e-308;
    }
    const v37 = new C32(2142097854, -2.2250738585072014e-308);
    new C32(-2.2250738585072014e-308, v37);
    new C32(2142097854, C32);
    new WeakMap();
    const v44 = new Uint8ClampedArray();
    const v46 = new Uint8Array(64);
    const v50 = new Int32Array(v46);
    f0 >>> -65535;
    f0 *= ("o")[f0];
    /S78/gvmy;
    /(?:ab)|cdea(?!bbb|bb)c/gvdis;
    /\p{Script=Greek}/vdims;
    const v57 = new BigInt64Array();
    const v58 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
    const v59 = [-1.7976931348623157e+308];
    function f60(a61, a62, a63, a64) {
        const o69 = {
            toString(a66, a67, a68) {
                return 64;
            },
        };
        function f70() {
            const o74 = {
                [3](a73) {
                },
            };
        }
        return a61;
    }
    f60(v57, 129, v59);
    f60(v50, 129, v58);
    try { v44(-85357.59116785484, v46); } catch (e) {}
    return o28;
}
f0();
const v79 = f0();
const v80 = f0();
-1549001782n * -1549001782n;
-4294967296n ^ -4294967296n;
function f86() {
    return v80;
}
let v87 = 318438444;
v87--;
const v91 = [9007199254740991,-9223372036854775808,512,536870889,152033866,2070870142];
v91[5];
[-9,1828300954];
[64,5,65536,1558674165,26395,-9007199254740990,1073741824,2147483648,-38840,58340];
const v96 = 512 >>> 512;
2147483647 + 2147483647;
443944762 << 443944762;
Int16Array.c = Int16Array;
const o118 = {
    o(a111) {
        const o112 = {
        };
        let v113;
        try { v113 = this.isFrozen(v91); } catch (e) {}
        new Int16Array(v113, v79, v96);
        o112.execution = Float64Array;
        o112.execution = this;
        return this;
    },
};
