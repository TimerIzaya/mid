class C3 {
    #d = 2.405622685269444;
    get f() {
        super.a *= 2.405622685269444;
        super.f = "bigint";
        try {
            this.__proto__ = "bigint";
        } catch(e5) {
        }
        return "bigint";
    }
    static #b;
    [-2] = "bigint";
    a = "KVd";
    #g;
}
C3.name = C3;
const v6 = new C3();
v6.a = v6;
const v7 = new C3();
const v8 = new C3();
function f9() {
    return v8;
}
129 & 129;
new Int8Array(129);
v7[9];
h = v7;
const v17 = C3?.__defineSetter__;
try { new v17(); } catch (e) {}
const v21 = new Uint16Array(8);
-v7;
const v25 = new Int8Array(1851);
v25.BYTES_PER_ELEMENT = v25;
Uint8ClampedArray.length = Uint8ClampedArray;
const v28 = new Uint8ClampedArray(214);
v28[135] = v28;
function f30(a31, a32) {
    function F33(a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
        const v37 = this.constructor;
        let v38;
        try { v38 = new v37(); } catch (e) {}
        try { this.constructor(a31, f30, v38, F33); } catch (e) {}
    }
    new F33(a31, a32);
    return f30;
}
function f42() {
    class C43 {
    }
    const t51 = 214;
    const v44 = new t51();
    v44.length = v44;
    return v44.length;
}
try { new Int8Array(Int8Array, 127, Int8Array); } catch (e) {}
new Int8Array(127);
const v48 = new BigInt64Array(2);
new Float64Array(222);
class C52 {
    constructor(a54) {
        function f55() {
            return a54;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f55 });
    }
}
const v56 = new C52();
const v57 = new C52();
const v58 = v57?.constructor;
try { new v58(); } catch (e) {}
for (let v61 = 0; v61 < 10; v61++) {
    f9();
}
function f63(a64, a65) {
    a65.name;
    const v69 = Array();
    function f70() {
        class C73 {
            static e;
            constructor(a75, a76) {
                this?.constructor;
                a76 - a76;
                -4.0 !== -1e-15;
            }
            static get d() {
                for (let v81 = 0; v81 < 16; v81++) {
                }
                try {
                } catch(e82) {
                }
            }
        }
    }
    function f83(a84) {
        gc();
    }
    Object.defineProperty(v69, 0, { configurable: true, enumerable: true, get: f70, set: f83 });
    v69.unshift(3);
}
const v90 = new Int32Array(C52, 129, 129);
const v92 = new BigInt64Array(129);
const v93 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v94;
try { v94 = v93.some(); } catch (e) {}
const v95 = [-1.7976931348623157e+308];
const v96 = v95?.filter;
try { new v96(v48); } catch (e) {}
function f98(a99, a100, a101, a102) {
    try { a101.sort(a102); } catch (e) {}
    const o117 = {
        toString(a105, a106, a107) {
            let v108;
            try { v108 = this.toString(a106, v94, a105); } catch (e) {}
            function f110(a111, a112, a113) {
                return v56 == v57 ? v56 : v57;
            }
            f110(255n, v108);
            a101[a100] = a99;
            return v21;
        },
    };
    try { o117.toString(v8, v8, v8); } catch (e) {}
    return o117;
}
const v119 = f98(v92, 129, v95);
try { v119.toString(8, 8, v119); } catch (e) {}
const v121 = f98(v90, 129, v93);
for (let v122 = 0; v122 < 5; v122++) {
    v121 % v119;
    new Float64Array(v95);
    function F126(a128, a129, a130) {
        if (!new.target) { throw 'must be called with new'; }
        [8n] > 8n;
    }
}
