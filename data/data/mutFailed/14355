function f0() {
}
const v1 = [f0,f0,f0,f0];
const v2 = [f0];
const v3 = [v2,v2];
try {
    v1.length = 255;
} catch(e8) {
}
class C10 extends (255).constructor {
}
const v11 = [601759695];
const v12 = [1073741824,1073741823,1376142744,1073741825];
function f13(a14, a15, a16, a17) {
    try { v12["find"](..."find", ...a17, ...v11); } catch (e) {}
    return 255;
}
new WeakMap();
const v23 = new Int16Array(255);
try { ("HtCsy").split("3", 4096); } catch (e) {}
var b = WeakMap;
new Int32Array(4096);
const v33 = new Uint8ClampedArray();
for (let v34 = 0; v34 < 5; v34++) {
    ~v34;
    v33[v34] = 6;
}
new Int32Array(6);
const t28 = "map";
t28.b = Set;
const v39 = v3.constructor;
try { new v39(2147483647n, v3, 6, 2147483647n); } catch (e) {}
const v42 = new Uint8Array();
function f43(a44, a45, a46, a47) {
    a46 ^ a46;
    const o53 = {
        "b": a44,
        ...v42,
        n(a50, a51) {
            return a47;
        },
        get g() {
            return this;
        },
    };
    return a45;
}
f43();
function f55() {
    for (let v59 = 0; v59 < 32; v59++) {
        const v61 = "p" + v59;
        const v63 = [601759695];
        const v64 = [1073741824,1073741823,1376142744,1073741825];
        function f65(a66, a67, a68, a69) {
            -a66;
            a68[3] + 2;
            try { v64["58572"](..."58572", a69, ...v63); } catch (e) {}
        }
        for (let v75 = 0; v75 < 10; v75++) {
            f65(v75, v75, v64);
        }
        const t61 = "map";
        t61[v61] = v59;
    }
    const o80 = {
        ...1.0,
        set b(a79) {
        },
    };
    const o81 = {
    };
    Math.log10();
    const o87 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o87);
    o80.b = o80;
    return o80;
}
class C90 {
    2147483647 = undefined;
}
new C90();
for (let v92 = 0; v92 < 5; v92++) {
    f55();
    %OptimizeFunctionOnNextCall(f55);
    const v94 = new v23();
    const v95 = new v23();
    const v96 = new v23();
    const v100 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v102 = new Uint32Array(5);
    let v103 = -4294967297n;
    v103--;
    const v105 = [601759695];
    const v106 = [1073741824,1073741823,1376142744,1073741825];
    function f108(a109, a110, a111, a112) {
        try { a109.toLocaleString(); } catch (e) {}
        const v114 = a109?.constructor;
        let v115;
        try { v115 = v114(); } catch (e) {}
        try { v114(); } catch (e) {}
        const v118 = arguments.length;
        Object.defineProperty(v94, "e", { configurable: true, enumerable: true, value: f108 });
        const v120 = v95["entries"](a111, ...v96, BigUint64Array, ..."entries", a110, v118);
        const v122 = Symbol.toStringTag;
        v95[v122] = v122;
        function f123() {
            let v125;
            try { v125 = ("Vre").charAt(4096); } catch (e) {}
            try { v125.lastIndexOf(f123); } catch (e) {}
            let v127;
            try { v127 = ("Vre").codePointAt(v100); } catch (e) {}
            v127 - v127;
            v127 ^ v127;
            let v130 = Float64Array;
            v130 = a110;
            let v131 = v100.length;
            v131++;
            try {
                v106.forEach(a110);
            } catch(e134) {
                e134.stack = e134;
            }
            const o145 = {
                "c": v103,
                "c": v105,
                valueOf(a136, a137) {
                    return a137;
                },
                1073741824: v102,
                [v103](a139, a140, a141, a142) {
                    eval(v115);
                },
                "arguments": 5,
                256: a112,
            };
            o145[256];
        }
        f123();
        const v149 = Array();
        let v150;
        try { v150 = v149.findLast(f108, v102); } catch (e) {}
        v149.unshift("entries", v120, "entries", v150);
        let v153;
        try { v153 = Int8Array.of(); } catch (e) {}
        try { v153.join(v114); } catch (e) {}
        const v155 = new Int8Array(v105);
        v155.c = v155;
        const v156 = v155.buffer;
        v156.maxByteLength;
        const v158 = v156.slice(v114);
        try { Int32Array(v158, arguments, v103); } catch (e) {}
        function f161(a162, a163, a164, a165) {
            return v94;
        }
        const v166 = new Int32Array();
        const v167 = v166[3];
        v167 + v167;
        for (let v169 = 0; v169 < 5; v169++) {
        }
        %OptimizeFunctionOnNextCall(f123);
        try { v106["find"](..."find", a112, ...v105, ...v106, ...522675525n); } catch (e) {}
        return v114;
    }
}
