let v0 = 64n;
const v3 = [1.3450563248387595e+308,1000000000000.0,-1000000.0,-6.357526478376839];
v0 >>= 3n;
!1518893886n;
let v8 = -v3;
v8--;
Math.expm1(v0);
const v11 = [-1.7976931348623157e+308,5.389126513884044e+307,3.603194570037653,0.046468250748774254,-1.214744779002391e+307,-1000000000.0,0.19943278050831525];
const v12 = [2.220446049250313e-16,-1.7976931348623157e+308,0.12254839063324974,-0.0];
const v14 = new Map();
const v16 = new WeakSet();
try {
    v16.b = v16;
} catch(e17) {
}
[3n,v0,Map];
[v14,1518893886n,Map,v11];
[v12,1518893886n];
new Float32Array(5);
let v26 = 0;
while (v26 < 0) {
    v14.size |= 7;
    v26++;
}
new BigUint64Array(7);
new Uint16Array(0);
try {
    Array(-2119616940);
} catch(e37) {
}
let v1 = Float32Array;
v1[0] = v1;
const v2 = new v1(v1);
function f5(a6) {
    const v8 = new Int8Array();
    return v8;
}
Float64Array[Symbol.toPrimitive] = f5;
new Float64Array(9);
new Float64Array(512);
class C15 {
    3 = 512;
    constructor(a17, a18) {
        try {
            v1 = v2;
        } catch(e19) {
        }
    }
    [Float64Array];
    static #f = v2;
    static b = v1;
}
new C15(9, Float64Array);
new C15(0, 9);
const v23 = new C15(0, 512);
v23[10] = 0;
class C27 {
    #g;
    6 = "e";
    static h;
    static ["e"] = "getOwnPropertyNames";
    static 4;
    static #e = -2;
    #d;
    static [-2] = -2;
    [-2];
    1073741825 = "e";
}
[-2147483648,4294967295,-22931,-11,1,-763643767];
v23[10] **= 1.0;
