function f0() {
    let v4;
    try { v4 = ("MAX_SAFE_INTEGER").trimLeft(); } catch (e) {}
    try { v4.italics(); } catch (e) {}
    const o11 = {
        "a": "undefined",
        "e": "b",
        ..."MAX_SAFE_INTEGER",
        "h": "MAX_SAFE_INTEGER",
        "g": "undefined",
        ["b"](a7) {
            const v8 = this >>> "b";
            super["b"] = v8;
            ("b")["padStart"](v8, a7);
            return "MAX_SAFE_INTEGER";
        },
        "c": "MAX_SAFE_INTEGER",
    };
    function f12(a13) {
        f0 = v4;
        function F14(a16, a17) {
            if (!new.target) { throw 'must be called with new'; }
        }
        return "undefined";
    }
    o11[Symbol.iterator] = f12;
    return o11;
}
const v20 = f0();
const v21 = f0();
const v22 = f0();
v22.a = v22;
const v23 = v22[14];
try { ("symbol").codePointAt("symbol"); } catch (e) {}
let v28;
try { v28 = ("nOU").strike(); } catch (e) {}
try { v28.padStart(v23); } catch (e) {}
function f30(a31, a32, a33, a34) {
    a32[2];
    a34 == a34;
    a31[15] = a31;
    let v37;
    try { v37 = a32.codePointAt(a32); } catch (e) {}
    v37 % v37;
    a33.caller = a33;
    const o42 = {
        "f": a32,
        "e": "entries",
        [a32]: v20,
        set d(a40) {
            a32[1] = "nOU";
            try {
                const t52 = "symbol";
                t52.e = "nOU";
            } catch(e41) {
            }
            super.d = v22;
        },
        __proto__: v21,
        "c": f0,
    };
    return o42;
}
f30.entries = v21;
try { f30(f0, v23, "entries", v23); } catch (e) {}
const v44 = f30(v22, "nOU", f0, "entries");
v44.caller = v44;
const v45 = f30(v20, "entries", v44, "entries");
v45[Symbol.iterator] = f30;
f30(v21, "entries", f30, "entries");
/[(x)(x)(x)\4*]/ms;
const v50 = /F97G7YF?/imsy;
v50.sticky = v50;
const v51 = /xyz{1,}?Mg^RrV?/gvmsy;
function f52(a53, a54, a55) {
    a53[0] = a55;
    function f56(a57) {
        const o59 = {
            "maxByteLength": 10000,
        };
        return a55;
    }
    a55[Symbol.iterator] = f56;
    const v62 = a53.e;
    a55.entries = a55;
    a53.arguments = a53;
    const v65 = new Int8Array(a55, a53, a55);
    try { v65.forEach(v51); } catch (e) {}
    v65[1];
    try { Int16Array.apply(128, v62); } catch (e) {}
    return f52;
}
f52[0] = v21;
let v70;
try { v70 = new f52(v22, v22, v45); } catch (e) {}
v70[Symbol.iterator] = f52;
try { v70(v70, v21, "nOU"); } catch (e) {}
%PrepareFunctionForOptimization(f52);
const v74 = f52(f52, f52, f52);
try { new v74(v70, v23, f30); } catch (e) {}
v74.e = v51;
%OptimizeFunctionOnNextCall(f52);
f52(f52, v74, v74);
