const v2 = new Int32Array(Int32Array, Int32Array, Int32Array);
const v4 = ~v2;
v2.expm1(v4);
const v7 = new Int16Array(2);
const t4 = 1024;
new t4(1024);
new BigUint64Array(3);
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a17.b = Int16Array;
    } catch(e19) {
    }
    try {
        this.c = Int16Array;
    } catch(e20) {
    }
}
new F14(3, v7, 3);
const v22 = new F14(v7, F14, 1024);
new F14(v22, F14, 1024);
const v28 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
try { v28.filter(v4); } catch (e) {}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -2;
    } catch(e3) {
    }
    try {
        this.d = -2;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
[-9007199254740992,1,-17388,536870887,-59525,5];
[4,-1383987908,2147483647];
[129,22711];
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    a22 ^ a22;
    "-9007199254740992" >> a22;
    try {
        this.h = 628n;
    } catch(e26) {
    }
    try {
        a22.f = 3n;
    } catch(e27) {
    }
    try {
        this.d = a23;
    } catch(e28) {
    }
}
F20.length = F20;
let v29;
try { v29 = new F20(3n, F20); } catch (e) {}
v29.f = v29;
const v30 = new F20(3n, 35294n);
new F20(3n, v30);
new F20(35294n, v30);
let v33 = 6;
-(v33--);
Int16Array.prototype = Int16Array;
new Int16Array(v33);
16 >>> 16;
Uint8ClampedArray.d = Uint8ClampedArray;
new Uint8ClampedArray(16);
Int32Array.d = Int32Array;
new Int32Array(2614);
const v45 = [1000000000.0,-1000.0,-690.3798026183179,8.153290522672417e+306,2.0,-1000000.0,-1000000000.0];
const v46 = v45.toSpliced;
try { new v46(3n, v29); } catch (e) {}
const v48 = [172808.41555842035,6961.648758031544,-1000000000.0,-3.0,-3.473146185040173e+307,-421.3362201856155,-879.0794661120945,-5.0,-2.4710773994464814e+307,1000000000000.0];
[2.0,67588.71976092551,987444.2991633068,0.4770197645753065,1000000.0,-212679.8858953634,-1e-15,-3.0];
let v50;
try { v50 = v45.groupToMap(); } catch (e) {}
v29 >> 10;
new Uint32Array();
[1.0,-7.897761779739891];
new Uint32Array();
const v59 = v50?.findLastIndex;
try { v59(v48); } catch (e) {}
const v61 = new Uint32Array();
v61[6] = v61;
try { gc(); } catch (e) {}
const o64 = {
};
gc(o64);
