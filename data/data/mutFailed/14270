const v0 = [-9];
[46074,-4294967295];
[-9007199254740990,256,-128,-65536,1,0,-1,-558687815,-38808];
-139.47919493211498 > -139.47919493211498;
const v7 = -139.47919493211498 >>> -139.47919493211498;
const o10 = {
};
o10.h = o10;
const o12 = {
    "f": 1e-15,
    ...-139.47919493211498,
};
const v16 = new Proxy(v0, o10);
v16[0] = v16;
const v18 = Symbol.match;
const v20 = v18.description;
Symbol.for(v20);
v0[v18] = v18;
const v23 = [2147483649];
try { v23.toString(); } catch (e) {}
const v25 = [32738,2014244287,-20419,6,31511];
v25[2] = v25;
[2147483647,8348,-4096,-349453171,257,-808932746,2147483648,9,5];
1717180592n >> 1717180592n;
let v30 = 10000n;
const v31 = v30--;
try { v20.replaceAll(v20, v20); } catch (e) {}
[3,-1306220330,2025];
[232908337,-2147483648,-1,57212,-1024,-2147483647];
[9223372036854775807];
const v37 = v30 | v30;
let v39;
try { v39 = Int32Array.apply(-139.47919493211498, -2.220446049250313e-16); } catch (e) {}
const v40 = v18.bind();
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 10000;
    } catch(e47) {
    }
}
new F41(v30, v7, -1.0, 3.289730657757559);
new F41(v31, v39, 1e-15, v16);
new F41(v30, v16, v39, 3.289730657757559);
try { v40(3.289730657757559, v37, 3.289730657757559); } catch (e) {}
const v52 = v40.name;
try { v52.normalize(); } catch (e) {}
