const v2 = new Int32Array(4075);
v2.g = v2;
const v3 = [-55841,536870912,65536,-1024,886617036,3];
let v4;
try { v4 = v2.copyWithin(4075, 4075, 4075); } catch (e) {}
function f5() {
    return 4075;
}
Object.defineProperty(v4, "g", { writable: true, enumerable: true, get: f5 });
let {"f":v6,"g":v7,} = v4;
const o8 = {
};
function f9() {
    return v4;
}
function f10(a11) {
    try { a11(v7, a11, a11); } catch (e) {}
}
Object.defineProperty(o8, "g", { writable: true, enumerable: true, get: f9, set: f10 });
try {
    o8.g = v7;
} catch(e13) {
}
try {
    const o14 = {
    };
    function f15() {
        return v7;
    }
    function f16(a17) {
        v3[v3];
    }
    Object.defineProperty(o14, "g", { writable: true, get: f15, set: f16 });
    o14.g = v7;
    o14.d = Int32Array;
} catch(e19) {
}
try {
    const o20 = {
    };
    o20.g = v7;
    o20.d = Int32Array;
    o20.a = v6;
} catch(e21) {
}
try {
    const o22 = {
    };
    o22.g = v7;
    o22.d = Int32Array;
    o22.f = v4;
} catch(e23) {
}
v3.length = 1;
for (let i27 = 0; i27 < 7; i27++) {
    new Uint8Array(i27);
}
new Uint16Array(3791);
new Uint16Array(16);
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.d;
    let v46;
    try { v46 = new v45(F41, v45, F41, F41, v45, v3, a43); } catch (e) {}
    const v48 = v46 >>> 38445;
    Object.defineProperty(this, v48, { writable: true, value: a43 });
    new Uint16Array(this, this.b, a44);
    const o53 = {
        "maxByteLength": 268435456,
    };
    const v55 = new SharedArrayBuffer(9, o53, 268435456, 4075, 3791);
    new Int16Array(v55);
    38445 % v46;
    let v59 = v48 * v48;
    v59--;
}
const v63 = [-1.7976931348623157e+308,-4.428826532698088e+307,-570.9643467288894,-226.8700029753678];
const v64 = [4.0,-1.1848120341476155e+308,4.0,575.5830546149314,1.7976931348623157e+308,0.7402613248624473,4.0];
[-786058.776878048,2.7027381102326094e+307];
const o66 = {
};
function f67(a68) {
    const o69 = {
    };
    return o69;
}
const v70 = f67();
class C71 extends f67 {
    #n(a73, a74, a75, a76) {
        let [,v77] = v64;
        try { a75.at(4075); } catch (e) {}
        return v63;
    }
}
const v79 = new C71();
function F80(a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f5;
    const v84 = this.constructor;
    const v85 = [9.64246076776908,2.220446049250313e-16,-2.220446049250313e-16,-5.0,4.0,-0.0,1000.0,-1.0];
    class C86 {
        static [v85];
    }
    return 1;
    try { new v84(a82, v84, v84, o66, v84); } catch (e) {}
    v70[v79] = o66;
}
new F80();
