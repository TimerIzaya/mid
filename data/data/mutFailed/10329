const v0 = [-9.036513072009377,-1000000000000.0,-511.89147483416855,9.478566951820678,-1000000000000.0,9.548431403431678e+307];
const v1 = [-2.0,1000000.0,-1e-15];
const v2 = [0.0,1.2713152316724407e+308,2.1558789560042584,7.547856858685936,-1000000000000.0,-5.0,985.4362915320405];
class C3 {
    static n(a5) {
        const v7 = Symbol.match;
        this[v7] = v7;
        return v2;
    }
    6;
    constructor(a9, a10) {
        Math.abs(10000);
        Math.random();
        const v17 = !a10;
        Math.hypot(10000);
        (v17 | 10000) && 10000;
    }
}
const v21 = new C3(v2, v2);
const v22 = new C3(v0, v1);
new C3(v0, v2);
const o28 = {
    n(a26, a27) {
    },
};
v2.matchAll;
function f33() {
    return 268435440;
}
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a37;
    try {
        this.h = a37;
    } catch(e39) {
        function F40(a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
            new BigInt64Array(1091060517);
        }
    }
    try {
        this.e = a36;
    } catch(e47) {
    }
}
const v48 = new v2(-128, v21, v0);
new F34(268435440, v22, v48);
class C51 extends Int8Array {
}
const v52 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v53 = [601759695];
function f55(a56, a57, a58, a59) {
    arguments[4] = arguments;
    return a58;
}
f55(v53, v52, 522675525n, v52, 522675525n);
new F34(268435440, v2, v22);
Symbol.toPrimitive;
function f66(a67) {
}
let v68 = undefined;
const o69 = {
};
v68 = v48;
const v70 = new Uint8Array(Uint8Array, Uint8Array, Uint8Array);
function f71(a72, a73, a74, a75) {
    a74++;
    const v77 = a74++;
    const v78 = a74 % a74;
    const o79 = {
        ...v70,
    };
    try { o79.n(v78, v77); } catch (e) {}
    return f71;
}
for (let v81 = 0; v81 < 500; v81++) {
    f71();
}
