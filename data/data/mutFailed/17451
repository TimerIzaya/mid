let v2 = -59873;
class C3 {
    #m(a5) {
        for (let v6 = 0; v6 < 32; v6++) {
            this["p" + v6] = v6;
        }
        v2--;
        return this;
    }
    get f() {
        delete this?.g;
        return 1000n;
    }
}
new C3();
const v16 = new C3();
new C3();
[268435439,-4096,-128,10000,268435439,-175228916,-452916790,1073741825];
[-10,-2098521316,3668,60621,-12,15,8,4294967296,39263];
[2,3,268435439,-10,-1540599599,536870889];
const v30 = /49/gims;
207 + 207;
try { new Uint8ClampedArray("symbol", 14, v30); } catch (e) {}
new BigUint64Array();
class C42 {
}
new C42();
[0.03568519099872258];
const v48 = new v16();
function f49(a50, a51, a52, a53) {
    const o54 = {
        ...v48,
    };
    function f58(a59, a60, a61) {
        const o62 = {
            "h": a60,
        };
        return o62;
    }
    f58(-3.9870582640049523, -3.9870582640049523, 1000000.0);
    const v64 = f58(1000000.0, -3.9870582640049523, 1000000.0);
    f58(-3.9870582640049523, -2.2250738585072014e-308, -3.9870582640049523);
    v64["toString"]();
    class C69 {
    }
    const v70 = new C69();
    function f72() {
        const v75 = C3--;
        Math.min();
        Uint8Array ** 6;
        -4294967296 >>> v70;
        return v75 - v70;
    }
    for (let v80 = 0; v80 < 5; v80++) {
        f72();
        %OptimizeFunctionOnNextCall(f72);
    }
}
for (let v82 = 0; v82 < 500; v82++) {
}
