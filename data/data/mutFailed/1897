const v2 = new Float64Array(297);
function f4(a5) {
    'use strict';
    class C7 {
    }
    const t5 = "pF";
    t5.f = "pF";
    const v9 = /M/gus;
    class C12 {
        #h = 1e-15;
        static get e() {
            function f14() {
                return 1e-15;
            }
            return this;
        }
        static [v9];
        set f(a16) {
            const v17 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
            for (let v18 = 0; v18 < 5; v18++) {
                v17 | v18;
            }
            this != a16;
        }
        #g = 3.7122420217608383;
        static 65536;
    }
    return -1179329576;
}
[16,-1073741824n];
const o26 = {
};
f4(v2);
const v29 = new Float64Array(1000);
const v32 = new BigUint64Array(157);
const o33 = {
    [v32]: v29,
    ...v29,
};
new BigInt64Array(205);
[-3,11,9007199254740991,536870912,4323];
const v40 = new Uint8Array(257);
class C42 extends Uint16Array {
    constructor(a44, a45, a46) {
        super(v40);
    }
}
const v47 = [3,4096,-339689186,-8,1512490321,0,9223372036854775807];
[-4294967296,-58187,1073741824,-1775330715,5,17120,-18284,-9007199254740992,4096];
let v49 = 15135;
v49--;
const v53 = new BigUint64Array(4);
Reflect.construct(BigInt64Array, [v53]);
v2[0];
try {
    new Uint8ClampedArray(v47);
} catch(e60) {
}
("sync")[-5.0];
