const v3 = [8,536870889,-7,-1,41603,-57225];
const v4 = [10,16,-18610451,9007199254740990,-9007199254740990,255,-14,-5,-9];
const v5 = [1485520812,-13,4];
const v7 = [v4,[2147483648],v3];
let [v8,...v9] = v7;
v5[6] = 512;
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a13;
    } catch(e14) {
    }
}
const v15 = new F10(-768517061, 2147483648);
const v16 = new F10(-768517061, 512);
new F10(-768517061, -768517061);
[v5,v7,v5,512];
new Map();
const v22 = [9];
function f25() {
    const v26 = [f25,f25];
    v7[v26];
    let [v28,v29,v30] = v22;
    Reflect.construct(Map, [v16], v8);
    function f35(a36) {
    }
    const v38 = [0];
    const v40 = [Reflect.construct(f35, v38, Uint8ClampedArray),v38];
    [v40,9];
    const v42 = [v22,Reflect];
    let v43;
    try { v43 = v42.findIndex(); } catch (e) {}
    const v44 = v26.constructor;
    class C45 extends v44 {
    }
    const v46 = new C45();
    const v47 = v46?.constructor;
    function f48(a49, a50, a51) {
        const o52 = {
            "d": v28,
            ...a51,
        };
        return o52;
    }
    f48(Reflect, 9, v47);
    f48(v15, Map, f35);
    f48(v43, v44, v40);
    return v26;
}
%PrepareFunctionForOptimization(f25);
f25();
%OptimizeFunctionOnNextCall(f25);
f25();
