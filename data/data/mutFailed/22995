function f0() {
}
const v1 = [8046,-2147483649,1268501360];
const v2 = [256,9007199254740990,9007199254740992];
const v3 = [-2147483649,9007199254740991,129,4,-465788692,9007199254740992,536870889,7,4294967295];
class C4 extends f0 {
    static 185 = f0;
    static p(a6, a7) {
        this[a7];
        const v9 = v1.length;
        function F10(a12, a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a6;
            } catch(e16) {
            }
            try {
                this.c = v9;
            } catch(e17) {
            }
            try {
                this.f = v1;
            } catch(e18) {
            }
        }
        new F10(v2, v1, v9, a6);
        new F10(v3, a7, a6, v3);
        new F10(a6, a6, a6, this);
        return a7;
    }
}
const v22 = new C4();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
const v25 = new C4();
const v26 = v25?.constructor;
try { new v26(); } catch (e) {}
new C4();
5 >>> 5;
const v32 = new Uint8ClampedArray(5);
try { v32.slice(5, v2); } catch (e) {}
new Float32Array(2891);
const v39 = new Int16Array(109);
class C43 {
    constructor(a45) {
        const v46 = this?.__lookupGetter__;
        try { new v46(v39); } catch (e) {}
        a45.prototype;
        ("buffer")["search"](..."buffer", ..."search", ..."search", a45, ..."search", 52021);
        arguments[0];
        Uint32Array.prototype = Uint32Array;
        new Uint32Array(3120, Uint32Array);
        Uint8ClampedArray.name = Uint8ClampedArray;
        const v58 = new Uint8ClampedArray(3016);
        try { Float32Array.apply(3016, v58); } catch (e) {}
        super.d = arguments;
    }
    static h;
    static #a;
    [-5.0] = -5.0;
    #g = "buffer";
    static #c;
    static #e = C43;
}
C43.prototype;
const v62 = new C43(C43);
const v63 = new C43(v62);
const v64 = v63?.constructor;
try { new v64(v63); } catch (e) {}
const v66 = new C43(v63);
v66.length;
new Date();
const v72 = new BigInt64Array(129);
try { v72.keys(); } catch (e) {}
new Int8Array(12);
const v79 = new Uint32Array(1024);
const v80 = /1xyz{1,}?/gims;
const v81 = /h\p{gc=Nd}/vdy;
const v82 = /\xf0\x9f\x92\xa9a*/us;
-23596 | -23596;
class C87 {
    static {
        this.name;
        this[Symbol.hasInstance];
    }
    #p() {
        let v94;
        try { v94 = this.p(undefined, this, this, this, this); } catch (e) {}
        const v96 = new Float32Array(Float32Array);
        const v98 = new Int8Array(v96, v94, -23596);
        v98.buffer;
        try {
            v94.#p(undefined, v94, v94, undefined);
        } catch(e101) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v102 = new C87();
v102.h = v102;
const v103 = new C87();
const v104 = v103?.constructor;
try { new v104(); } catch (e) {}
const v106 = new C87();
v106.c = v106;
function f107(a108) {
    const o116 = {
        15: a108,
        toString(a110, a111) {
            super.h = a111;
            try { C87.stringify(a108, a108, this); } catch (e) {}
            try {
                C87.c = v102;
            } catch(e113) {
            }
            const v115 = [1000,1000,1000,1000,1000];
            for (let i = 0; i < 5; i++) {
                Object.defineProperty(v115, 130, { value: 1000 });
            }
            return a111;
        },
        2147483647: undefined,
        __proto__: v103,
        "c": a108,
        ...a108,
        "f": a108,
    };
    return o116;
}
f107.length = f107;
const v117 = f107(v79);
f107(v106);
const v119 = f107(v117);
v119[80] = v119;
for (let i122 = (() => {
        0 % 0;
        return 0;
    })();
    i122 < 5;
    i122++) {
    try {
    } catch(e128) {
    }
}
function F130(a132, a133, a134, a135) {
    if (!new.target) { throw 'must be called with new'; }
    a134 / a134;
    a135.arguments;
}
const v138 = new F130(v82, 1, -1263139894, F130);
const v139 = new F130(v80, v82, -23596, v138);
const v140 = new F130(v81, F130, -23596, 1);
try { v140.propertyIsEnumerable(12); } catch (e) {}
const v142 = v140 | F130;
v142 >> v142;
let v144;
try { v144 = v139(v82, v142, v142); } catch (e) {}
if (v144) {
} else {
}
