const v2 = new Uint8ClampedArray(6);
let v5;
try { v5 = new Uint8ClampedArray(v2, Uint8ClampedArray, 6); } catch (e) {}
new Uint8ClampedArray(728);
try { new BigUint64Array(BigUint64Array, Uint8ClampedArray, BigUint64Array); } catch (e) {}
new v5(127);
let v15 = 1024;
v15++;
let v19 = 10 << 10;
v19 !== v19;
--v19;
const v22 = --v19;
BigUint64Array.f = BigUint64Array;
new BigUint64Array();
BigUint64Array.e = BigUint64Array;
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v31 = v28.reduce(v22);
    v31[52] = v31;
    const v32 = Date[22];
    try { v32.toLocaleUpperCase(); } catch (e) {}
    19793 <= 19793;
    function f37() {
        function f39(a40) {
        }
        Object.defineProperty(v28, 16, { writable: true, enumerable: true, get: f39 });
    }
    try { f37(); } catch (e) {}
    const v43 = Worker.constructor;
    const v44 = new v43(v43);
    try { v44(); } catch (e) {}
    const v47 = [];
    const v48 = v47.lastIndexOf(v47);
    v48 % v48;
    const o50 = {
        "type": "function",
    };
    o50.arguments;
    new Worker(f37, o50);
    const v53 = Array(19793);
    for (const v54 of v53) {
    }
    const v55 = [v53,v53,v53,v53];
    try { v55.pop(); } catch (e) {}
    new BigUint64Array();
    const v60 = [[v55,v55]];
    let v62;
    try { v62 = Uint16Array.from(v47); } catch (e) {}
    v62.byteOffset = v62;
    const v63 = v60 >= Uint16Array;
    !(v63 || v63);
}
new F26();
new F26();
const t56 = "byteLength";
t56[7] = "byteLength";
const v70 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
try { v70.every(v70); } catch (e) {}
