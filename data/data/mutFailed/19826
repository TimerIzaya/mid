const v2 = new Float64Array(128);
const v5 = new Int16Array(128);
const v8 = new Int16Array(1);
class C9 {
    constructor(a11, a12) {
        const v13 = this?.__defineGetter__;
        try { new v13(this, C9); } catch (e) {}
        a12 === a12;
        a11 / a11;
        for (let v17 = 0; v17 < 32; v17++) {
            v17 >>> v17;
            v17 << v17;
            const v21 = ("boolean")?.blink;
            v21.d = v21;
            let v22;
            try { v22 = new v21("boolean", "boolean", 1); } catch (e) {}
            const v23 = v22 + v17;
            try { v23.strike(); } catch (e) {}
            v5[v23] = v17;
        }
    }
    static 1073741824;
    static set h(a26) {
    }
    static c = 1;
}
let v30;
try { v30 = new C9(v5, v8); } catch (e) {}
v30.length = v30;
const v31 = new C9(128, 128);
v31.f = v31;
const v32 = new C9(1, 128);
v32.g = v32;
const v33 = new C9(1, 1);
v33.length;
v33.length = v33;
const v35 = [1,v2];
const v36 = [1,1,128,v35];
try { v36.pop(); } catch (e) {}
[Int16Array,C9,v36,Int16Array,Int16Array];
const v39 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v39.splice(v2, v39); } catch (e) {}
for (let v41 = 0; v41 < 5; v41++) {
    v41 >> v41;
    function f43() {
        try {
            v39.forEach();
        } catch(e45) {
        }
        const v47 = v2.toPrimitive;
        Symbol.for(v47.description);
        const v51 = v47.description;
        let v52;
        try { v52 = v51.fontcolor(Symbol); } catch (e) {}
        let v53;
        try { v53 = v52.match(v51); } catch (e) {}
        try { v51.link(v51, v51, f43); } catch (e) {}
        try { Symbol.sup(); } catch (e) {}
        v53[31];
        Symbol.for();
        return v47;
    }
    try { f43.apply(v35, f43); } catch (e) {}
    let v59;
    try { v59 = f43(v30, v41); } catch (e) {}
    Symbol.for(Symbol.for(f43(v59).description).description);
    %OptimizeFunctionOnNextCall(f43);
}
