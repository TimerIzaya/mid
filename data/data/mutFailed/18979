const v2 = new Infinity(128);
new BigInt64Array(9);
Int32Array.BYTES_PER_ELEMENT = Int32Array;
const v8 = new Int32Array(2327);
v8[2194] = v8;
const v11 = 4294967295 / 4294967295;
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    a15 >> a15;
    try {
        this.g = a16;
    } catch(e18) {
    }
    try {
        this.d = a15;
    } catch(e19) {
    }
    try {
        this.f = v2;
    } catch(e20) {
    }
}
F13.length;
new F13(-1143867216, 9, v11, -1143867216, 2327);
const v23 = new F13(-1143867216, 9);
v23.g = v23;
const v24 = new F13(9, 9);
const v28 = [0.48879817238347556,2.2250738585072014e-308,1000.0,1000.0,-681.8004556870678,-1000.0,-1.5737380958439236e+306];
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    a31 >>> a31;
    try { a32.entries(); } catch (e) {}
    a33 ^ a33;
    this.g = 4411;
    const v37 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
    const v38 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
    class C39 {
        constructor(a41, a42) {
            try { a41.reverse(); } catch (e) {}
            super[v38] = v37;
        }
    }
    try { new C39(-1143867216, a32); } catch (e) {}
    const v45 = new C39(v37, v38);
    const v46 = v45?.e;
    try { new v46(4294967295, 4294967295); } catch (e) {}
    function f48(a49) {
    }
    try { ("function").charCodeAt(v24); } catch (e) {}
    const v53 = [v45];
    const o54 = {
        "arguments": v53,
        "type": "function",
    };
    try { o54.isPrototypeOf(o54); } catch (e) {}
    new Worker(f48, o54);
}
new F29(-65537, v28, -65537);
class C58 {
}
try { new C58(); } catch (e) {}
