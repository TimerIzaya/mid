const v0 = [];
const v3 = new BigInt64Array(v0, 8, 8);
let {"d":v4,"length":v5,} = v0;
const v6 = v4 | v0;
const v7 = v0.length;
v0.at(v7, v7, v6, ...v3);
new BigInt64Array(8);
new Uint32Array(174);
let v15 = new Float32Array(1018);
const o17 = {
};
class C18 {
}
const v19 = new C18();
v19 << -1557853178;
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F23;
}
const v27 = F23?.bind;
let v28;
try { v28 = new v27(o17); } catch (e) {}
const v29 = new F23();
new F23();
new F23("function", v29);
let v32 = 4096;
v32--;
new Float32Array();
class C35 {
    static {
        try { new this(); } catch (e) {}
        for (let v38 = 0; v38 < 10; v38++) {
            v38 % v38;
            function f40() {
                return v38;
            }
            const v41 = [601759695];
            const v42 = [1073741824,1073741823,1376142744,1073741825];
            function f44(a45, a46, a47, a48) {
                f40();
                let v51;
                try { v51 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
                const v52 = v51 <= a47;
                v52 && v52;
                const v55 = new Date(Date);
                class C56 {
                    static #e;
                    constructor(a58, a59) {
                        const v62 = +v15;
                        Math.atan(v62);
                        ~v62;
                        ++v15;
                        try {
                            a59.#e = Date;
                        } catch(e66) {
                        }
                    }
                }
                new C56(v55, Date);
            }
            for (let v68 = 0; v68 < 10; v68++) {
                v28();
            }
        }
        ("object").__proto__?.trimRight;
    }
}
new Uint8Array(512);
new Int32Array(512);
function f78() {
    let v81 = -1e-15;
    Math.atan2(v81++, -175950080);
    return C35;
}
function f84() {
    parseInt(([174,174,174,174]).toSpliced());
}
f84();
function f90(a91, a92, a93, a94) {
    function f95() {
        const o134 = {
            valueOf(a97, a98) {
                function F99(a101, a102) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.hasOwnProperty(a97, a102, a97);
                    a101 >= a101;
                    const v105 = a101.constructor;
                    const v106 = [1.1232876344345233e+308,1.0,3.0,-1.7976931348623157e+308,892.6991223982873,1000000.0,0.1500507613745743,8.371259043064821,1e-15,-192.2897093527156];
                    function f107(a108, a109) {
                    }
                    %VerifyType(f107(v106, v0));
                    try { new v105(); } catch (e) {}
                }
                class C112 extends F99 {
                }
                new C112();
                new C112();
                for (let i117 = 0, i118 = 10;
                    (() => {
                        eval();
                        const v121 = i117 < i118;
                        const v124 = new BigUint64Array(3375);
                        let [v125,,v126,...v127] = v124;
                        v125--;
                        return v121;
                    })();
                    i117++) {
                }
                return F99;
            },
        };
        return o134.valueOf();
    }
    f95();
    f95();
    return a94;
}
for (let v138 = 0; v138 < 5; v138++) {
    f90(f90, v138, v138, v138);
}
%PrepareFunctionForOptimization(f90);
const v140 = f90(f90, f90, f90, f90);
%OptimizeFunctionOnNextCall(f90);
f90(v140, f90, v140, v140);
