const v1 = new Set();
7n * 7n;
class C6 extends Set {
    d;
    static a;
    static 7;
    static #m(a8) {
    }
    #toString(a10, a11) {
        return "buffer";
    }
    set f(a16) {
        const o17 = {
        };
        try {
            o17.d = Set;
        } catch(e18) {
        }
        try {
            const o19 = {
            };
            o19.d = Set;
            o19.b = a16;
        } catch(e20) {
        }
        try {
            const o21 = {
            };
            o21.d = Set;
            o21.b = a16;
            o21.e = 127n;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.d = Set;
            o23.b = a16;
            o23.c = this;
        } catch(e24) {
        }
    }
}
try { new C6(); } catch (e) {}
new C6();
new C6();
new C6();
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(a31, C6); } catch (e) {}
    try {
        this.h = C6;
    } catch(e35) {
    }
    try {
        this.e = a31;
    } catch(e36) {
    }
    try {
        this.g = 127n;
    } catch(e37) {
    }
}
const v38 = new F29(7n, v1);
new F29(255n, 7n);
const v40 = [];
const v41 = [v40,v40,v40];
const v44 = Math.sinh(-3.3474037991793697);
new F29(7n, v38);
-3120n & -3120n;
function f50() {
    return 536870887n;
}
try { f50(); } catch (e) {}
2 >>> 2;
const v55 = new Map();
-2 * -2;
let v58 = 24560;
v58 ^ v58;
let v60 = -1000000000000.0;
v60++;
591114.0785999324 << 591114.0785999324;
const o70 = {
    "e": -4294967295,
    ..."Vre",
    valueOf(a68, a69) {
    },
    ..."Vre",
    4: "Vre",
    "c": -268435456,
    5: -4294967295,
    6: -268435456,
};
try { Uint8Array.from(v41); } catch (e) {}
function F76() {
    if (!new.target) { throw 'must be called with new'; }
    const v78 = this?.__defineGetter__;
    try { new v78(-2, v44); } catch (e) {}
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    try { new Array(v44); } catch (e) {}
    const v87 = Array(19793);
    v87.e = v87;
    for (const v88 of v87) {
    }
    const v89 = [v87,v87,v87,v87];
    try { new BigUint64Array(f50, f50, f50); } catch (e) {}
    const v92 = new BigUint64Array();
    v92.constructor;
    const v94 = [v89,v89,v89];
    try { v94.reverse(); } catch (e) {}
    const v96 = [v94];
    v96.toSpliced(v96);
    try { new Uint16Array(Map, Array, Array); } catch (e) {}
    v96 >= Uint16Array;
}
new F76();
const v102 = new F76();
v102.length = v102;
for (const v103 in C6) {
    let v105 = 257;
    const v107 = v105--;
    const v108 = Math.asinh(v55);
    v108 >>> v108;
    Math.cosh(v58);
    const v111 = v107 + v55;
    try { v111.sup(); } catch (e) {}
    ++v58;
}
class C115 {
    constructor(a117) {
        const v118 = this?.constructor;
        try { new v118(); } catch (e) {}
        try {
        } catch(e120) {
        }
        try {
        } catch(e121) {
            new Uint8Array();
            [16,7n];
            const o126 = {
            };
        }
        for (const v127 of "bigint") {
            v127[0] = v127;
        }
    }
}
C115.name = C115;
const v128 = C115.name;
try { v128.replaceAll(f50, v60); } catch (e) {}
class C130 extends C115 {
}
new C130();
const o132 = {
};
