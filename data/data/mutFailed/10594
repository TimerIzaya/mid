const v2 = new Int16Array(12);
let v3 = 14;
const v5 = new Float32Array(v3);
const v8 = new Uint8ClampedArray(512);
function f9(a10, a11, a12) {
    const o16 = {
        ...v8,
        "c": v8,
        "d": a12,
        512: a11,
        "a": a10,
        "g": a12,
        __proto__: a12,
        "h": v2,
        get b() {
            try {
                super.getInt8(this);
            } catch(e15) {
            }
            return this;
        },
    };
    return o16;
}
const v17 = f9(512, 512, v3);
f9(Float32Array, 12, f9, Uint8ClampedArray, v3, v3);
let v22 = -51142;
const v24 = +(v22++);
Math.acosh(v22);
const v26 = /5mxyz{0,1}?/gimsy;
function f27() {
    v3 += v24;
    function F28(a30, a31) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            class C33 extends [this,this,this,this,this] {
            }
        } catch(e34) {
        }
    }
    return F28;
}
Object.defineProperty(v26, Symbol.iterator, { writable: true, enumerable: true, value: f27 });
const v37 = new Int16Array(v26);
function f39() {
    v37[0] = f9;
    const v41 = new Float64Array(15);
    v41.fill();
    return v41;
}
BigUint64Array.toString = f39;
const v43 = new BigUint64Array();
const v44 = v43.byteLength;
v37[v44] += v44;
const v45 = Math.sign(v22);
Math.max(15);
const v47 = f9(12, 512, v3);
const v48 = f9(12, 512, 12);
[[v8,Float32Array,f9,v47,Float32Array],v48];
[Uint8ClampedArray,v17];
/ND2/gds;
const o54 = {
    "call": f9,
};
new Proxy(v47, o54);
class C57 extends Map {
}
const v58 = new C57();
v58.isPrototypeOf();
Date[Symbol.toPrimitive] = Symbol;
class C64 {
    static {
        super.h = v5;
        try { new C64(this, v48, o54); } catch (e) {}
        super[Date];
        const t74 = f9(this, C64, 12);
        t74[8] = v45;
        for (let v69 = 0; v69 < 25; v69++) {
            const v70 = [601759695];
            const v71 = [1073741824,1073741823,1376142744,1073741825];
            function f73(a74, a75, a76, a77) {
                try { new v17(); } catch (e) {}
                a76 << a76;
                function f81() {
                    return a74;
                }
                const v83 = new Int8Array();
                const v86 = BigUint64Array * 536870887;
                const v87 = v86 - v86;
                v69 ** v86;
                Number.isNaN(v87);
                function f91(a92, a93) {
                }
                try { f91(); } catch (e) {}
                const v95 = v83.buffer;
                const v96 = v95.__defineGetter__;
                try { v96(); } catch (e) {}
                Object.defineProperty(v95, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f81);
                let v99;
                try { v99 = v71["find"](..."find", a77, ...v70); } catch (e) {}
                const o100 = {
                };
                o100.e = o100;
                v99 <= a76;
                return this;
            }
            for (let v102 = 0; v102 < 5; v102++) {
                f73(this, v102, v102);
            }
        }
    }
}
const o104 = {
};
new Int16Array(512);
