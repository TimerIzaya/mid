const v2 = new BigUint64Array(2569);
function f5() {
    function f6() {
        const v9 = new Array(4);
        return v9;
    }
    return f6;
}
Object.defineProperty(Uint8Array, "toString", { configurable: true, enumerable: true, get: f5 });
new Uint8Array(129);
const v13 = new Int8Array(16);
let v14;
try { v14 = v13.findLastIndex(v13); } catch (e) {}
const v15 = [v14];
let v16 = [16];
v16.valueOf = f5;
[v13,v16];
[v15,v16,BigUint64Array,129,BigUint64Array];
[Uint8Array];
const v20 = [v13,16,Uint8Array,v16];
const v22 = [null];
[v22,Uint8Array,129,16];
[Int8Array,v2,Uint8Array,v13,129];
const v25 = /[^7Y[a-zA-Z0-9]?]/vdmy;
try { v14(); } catch (e) {}
v20 >= 129;
v16--;
v22 || Int8Array;
Math.exp(+v16);
for (let v35 = 0; v35 < 5; v35++) {
    function f36() {
        const v38 = Array();
        try { v38.reduceRight(v25); } catch (e) {}
        return v38;
    }
    f36();
    %OptimizeFunctionOnNextCall(f36);
}
