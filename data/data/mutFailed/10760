function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    try {
        this.h = -9223372036854775808;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
v6.d = v6;
"268435441" == "268435441";
class C14 {
    c;
    1786;
    static g;
    static a;
    p(a16, a17) {
        function f18(a19, a20, a21, a22) {
            const o23 = {
                "f": "268435441",
                "a": v5,
            };
            return o23;
        }
        f18(-1024, v4, f18, v5);
        const v25 = f18(-1024, v5, "LXlR", v6);
        f18(9223372036854775807, v6, -1024, v5);
        return v25;
    }
}
const v27 = new C14();
const v28 = new C14();
v28[1786] = v28;
const v29 = new C14(v5, v27);
v29[1786] = v29;
const v30 = /2a\sc/uds;
function f31() {
    try { v30.test(v30); } catch (e) {}
    const t40 = Array(11);
    t40.length |= 113;
    return 11;
}
const v38 = Symbol?.keyFor;
try { new v38("-10"); } catch (e) {}
v30[Symbol.toPrimitive] = f31;
const v41 = /2(x)(x)(x)\3/dim;
function f42() {
    return f31;
}
const v44 = Symbol.toPrimitive;
Object.defineProperty(v41, v44, { enumerable: true, get: f42 });
v41.dotAll = v41;
function f45(a46) {
    v30[0];
    let v50;
    try { v50 = ("imul").padEnd(1073741824); } catch (e) {}
    return v50;
}
v41.valueOf = f45;
const v51 = /DIxJ0a[\cA]?/udy;
function f52(a53) {
    v44 === a53;
    new Int16Array(0);
    new Int32Array(10);
    new Uint16Array(7);
    return v5;
}
v51[Symbol.toPrimitive] = f52;
try { v51.exec(v51, v51, v30, v6); } catch (e) {}
const o71 = {
    [v30](a68) {
        try {
            super.m(this);
        } catch(e70) {
        }
        return v30;
    },
};
function f72(a73) {
    `b`;
}
Object.defineProperty(o71, Symbol.iterator, { writable: true, configurable: true, enumerable: true, set: f72 });
function f77(a78) {
    ("getBigInt64").normalize();
    return "getBigInt64";
}
o71[Symbol.iterator] = f77;
Uint8ClampedArray.BYTES_PER_ELEMENT;
const v86 = new Uint8ClampedArray(1000);
v86.toString = f31;
Object.defineProperty(v30, "g", { writable: true, enumerable: true, value: Uint8ClampedArray });
-268435456;
3 | 268435456;
const v92 = Math.ceil(v41);
const v93 = v86 ^ 3;
v93 == v93;
v41 ^ 268435456;
const v97 = new BigUint64Array(3, "268435441");
-14;
const v101 = new Int8Array(14);
v101.toString = f31;
const v102 = v101?.constructor;
try { new v102(o71, Math, 3); } catch (e) {}
try { new Int16Array(v97, v97, Int16Array); } catch (e) {}
new Int16Array(3912, v92);
const v108 = /9f8\xf0\x9f\x92\xa9/diy;
const v114 = +v93;
v114 | v114;
v93 >>> (v114 + -3.0);
const v118 = v108["compile"]();
v118.constructor = Symbol;
v118?.constructor;
