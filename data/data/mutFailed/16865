const v0 = [];
const v3 = new BigUint64Array(21);
const v6 = new Int16Array(1995);
function f7(a8) {
    let v9;
    try { v9 = v0.keys(); } catch (e) {}
    [a8,,v9,...v9] = v3;
    return v9;
}
v6[Symbol.toPrimitive] = f7;
Int16Array[Symbol.toPrimitive] = Symbol;
const v16 = new Int16Array(512);
class C17 extends BigUint64Array {
    #p(a19, a20, a21, a22) {
        class C23 {
            static [v3];
            static #d = BigUint64Array;
            static #e;
        }
        new C23();
        new C23();
        new C23();
        return a21;
    }
    static #b = v0;
    [v6];
    [Int16Array];
}
new C17();
new C17();
new C17();
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    this.a = F30;
    this.a = 43806;
    this.h = 43806;
    this.c = 43806;
}
new F30();
new F30();
([0.6757774703824373,0.7659452606332188]).join(F30);
const v37 = [-1000000000000.0,0.42720131076488843,-2.2250738585072014e-308];
const v38 = [1.0,-880481.6395920017];
2974 & 2974;
const v42 = new Uint8Array(2974);
v42[730] = v42;
let v43 = 10;
Float64Array.h = v43--;
const v46 = new Float64Array(v43);
v46[8];
let v48;
try { v48 = v46.entries(); } catch (e) {}
try { v48.next(); } catch (e) {}
function f52(a53, a54) {
    try {
        v16.b = a53;
    } catch(e55) {
    }
    return a54;
}
Float64Array.next = f52;
Float64Array.name;
const v57 = new Float64Array(9);
v57[1];
function f60() {
    const o116 = {
        m(a63) {
            this.f = v48;
            a63.next = Symbol;
            const v64 = this?.__defineGetter__;
            try { new v64(this, F30); } catch (e) {}
            Object.defineProperty(this, "h", { writable: true, configurable: true, value: v38 });
            const v66 = this?.__defineSetter__;
            try { new v66(v43, v43); } catch (e) {}
            a63.f = a63;
            let v68;
            try { v68 = a63.next(); } catch (e) {}
            function f69() {
                function f70(a71) {
                    function f72() {
                        const o79 = {
                            m() {
                                const o77 = {
                                    "execution": "async",
                                    "type": "minor",
                                };
                                gc(o77);
                            },
                        };
                        return o79;
                    }
                    return v46;
                }
                return f70;
            }
            Object.defineProperty(v68, "next", { writable: true, configurable: true, enumerable: true, get: f69 });
            try { v68.bind(9); } catch (e) {}
            a63.c = a63;
            a63.h = a63;
            const o81 = {
            };
            o81.h = 1995;
            o81.h = o81;
            o81.f = o81;
            o81.h = o81;
            o81.h = o81;
            function f82(a83, a84, a85) {
            }
            try { f82(128, 128, 128); } catch (e) {}
            const v88 = f82.length;
            f82.caller = f82;
            const v91 = Math?.expm1;
            try { new v91(this); } catch (e) {}
            const v94 = -9007199254740991 >> -9007199254740991;
            -(v94 - v94);
            class C97 {
                o(a99, a100, a101, a102) {
                }
            }
            let v103;
            try { v103 = new C97(); } catch (e) {}
            const v104 = v103?.__defineGetter__;
            try { new v104(-65535, v37); } catch (e) {}
            const v106 = C97.name;
            const v107 = v106?.italics;
            try { new v107(); } catch (e) {}
            3938 ^ 3938;
            3938 - 3938;
            try { Int8Array(v88, v106, Math); } catch (e) {}
            const v114 = new Int8Array(3938);
            let v115 = 3;
            [...v115] = v114;
        },
    };
    o116.next = f7;
    try { o116.m(Float64Array); } catch (e) {}
    function f118(a119) {
        function F120(a122, a123) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = a122;
        }
        return Float64Array;
    }
    o116.next = f118;
    o116.m(o116);
}
f60.length = f60;
f60();
f60();
