const v2 = new Int32Array(1422);
const v5 = new Int32Array(127);
new Uint8Array(216);
Array();
function f11() {
    const o13 = {
        get a() {
            return f11;
        },
    };
    return o13;
}
f11();
class C15 extends Int32Array {
    constructor(a17, a18, a19, a20) {
        super();
        function f21() {
            for (const v22 in a18) {
                64 instanceof Uint16Array;
            }
            return f11;
        }
        for (let v26 = 0; v26 < 5; v26++) {
            f21();
            %OptimizeFunctionOnNextCall(f21);
        }
    }
    static a = 216;
    static f;
    static #m(a29, a30, a31) {
        v5.byteOffset;
        super.byteLength %= 127;
        a31 & this;
        return v2;
    }
    n(a35, a36) {
        Object.defineProperty(this, "e", { enumerable: true, value: super[216] });
    }
    1866 = v5;
    /*
    constructor(a39) {
        this >> -1073741824;
        for (let v42 = 0; v42 < 32; v42++) {
            for (let v44 = 0; v44 < 5; v44++) {
            }
        }
    }
    */
    g = 127;
    static 3;
    static #g = 216;
}
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    a48 === a48;
    this.constructor;
}
class C52 {
}
const v53 = new C52();
new F45(undefined, v53);
new C15();
new C15();
new C15();
("boolean").split("toString");
