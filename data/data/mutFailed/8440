class C3 {
    static 1335 = 3.0;
    4 = 3.0;
    #e;
    get d() {
        try {
            this.#e;
        } catch(e6) {
        }
        function f8() {
            return this;
        }
        return this;
    }
    #a;
}
const v9 = new C3();
v9[4];
const v11 = C3[4];
v11 >> v11;
new C3();
new C3();
248 >>> 248;
let v18;
try { v18 = new Uint8Array(8, Uint8Array, "1024"); } catch (e) {}
let v19;
try { v19 = v18.reduce(248); } catch (e) {}
new Uint8Array(248);
new Uint32Array(888);
const v26 = new Int8Array(3);
v26[2] = v26;
let v27 = Uint8Array;
class C28 {
}
try { new v19(); } catch (e) {}
let v30;
try { v30 = new C28(); } catch (e) {}
const v31 = v30?.constructor;
try { new v31(); } catch (e) {}
const v33 = new C28();
const v34 = v33?.constructor;
let v35;
try { v35 = new v34(); } catch (e) {}
function f37() {
    let v39 = 6;
    v39--;
    v39 - v39;
    const v42 = v27--;
    v42 >> v42;
    const v44 = Math.min();
    v44 >>> v44;
    let v46 = v27 ** v39;
    v46++;
    -4294967296 >>> v33;
    let v49 = v42 - v33;
    v49++;
    return v49;
}
for (let v51 = 0; v51 < 5; v51++) {
    v51 !== v51;
    const v53 = v35();
    try { Number.toString(); } catch (e) {}
    const v56 = Number.isNaN(v53);
    v56 && v56;
    %OptimizeFunctionOnNextCall(f37);
}
