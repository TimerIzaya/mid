const v2 = [-47479,-256,-11,58632];
const v3 = [536870888,8];
const v6 = new BigInt64Array(128);
v6.indexOf(-11907, 4294967296);
const v10 = [2147483649,2147483649,-65537,-268435456,10,9223372036854775807];
function f11(a12) {
    const o16 = {
        set g(a14) {
        },
        get g() {
            return a12;
        },
        __proto__: a12,
        ...v3,
        4096: v10,
    };
    return o16;
}
const v17 = f11(v2);
class C19 {
    static toString(a21, a22) {
        const v24 = super[a22];
        try {
            delete this[v24];
            this[2.0];
        } catch(e27) {
        }
    }
    n(a29) {
        let v30;
        try { v30 = this.slice(this, -1000000.0, 0.031067295528881766); } catch (e) {}
        this[268435439] = 2.0;
        let v31;
        try { v31 = new v30(this, this, 0.031067295528881766, v30, this); } catch (e) {}
        [2.0,v30];
        [this,v30,v31];
        return [0.031067295528881766];
    }
    static #g = 0.031067295528881766;
}
new C19();
new C19();
const v37 = new v17();
function f38() {
    return v37;
}
for (let v39 = 0; v39 < 5; v39++) {
    Math.atan2(4294967296, v39);
}
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v49 = 0; v49 < 5; v49++) {
        function f50() {
            let v52 = ("Vre").codePointAt(v49);
            v52 ^ v52--;
            return f50;
        }
        a48();
        %OptimizeFunctionOnNextCall(f50);
    }
    try {
        this.b = a48;
    } catch(e56) {
    }
    try {
        this.a = v37;
    } catch(e57) {
    }
}
new F43(0.031067295528881766, -1000000.0, -1000000.0, 2.0);
new F43(2.0, 0.031067295528881766, 0.031067295528881766, 0.031067295528881766);
new F43(2.0, 2.0, 0.031067295528881766, 2.0);
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F61;
    this[1] = this;
    const v65 = new Uint8Array(127);
    new Uint32Array(v65);
    this.c = -4294967295;
}
new F61();
const t81 = [];
delete t81.length;
[290511.96857215906,0.3003673637544756,-458526.71260649094,0.8333335605081266,16682.170944584184,0.12597720350931985];
const v73 = [2.220446049250313e-16,-3.0,-3.117457405711452,Infinity,2.220446049250313e-16];
const v74 = [-2.220446049250313e-16,8.380618196344006];
class C75 {
    g;
    static charCodeAt(a77, a78) {
        return this;
    }
    static get f() {
        v74[114] <<= v2;
        return v73;
    }
}
C75.e = C75;
const v80 = new F61();
const v81 = new F61();
v81.b = v81;
const o84 = {
};
1842642860 % !o84;
function F88(a90, a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    const v93 = this?.constructor;
    try { new v93(this, F88, a92); } catch (e) {}
    const t107 = a92?.constructor;
    new t107();
}
new F88(v81, v80, v81);
function F98() {
    if (!new.target) { throw 'must be called with new'; }
}
function F100(a102, a103) {
    if (!new.target) { throw 'must be called with new'; }
}
