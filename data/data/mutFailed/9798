let v2 = -1;
class C3 {
    f;
    constructor(a5) {
        let v4 = this;
        v4 = a5;
        const t5 = "valueOf";
        t5["valueOf"] = v2;
        try {
            v4.d = v2;
        } catch(e6) {
            class C13 {
                m(a15, a16) {
                    new a16(-1073741824, -268435456, -1073741824, -1073741824, ...a15);
                }
            }
            function F19(a21, a22, a23, a24) {
                if (!new.target) { throw 'must be called with new'; }
                this.a = a22;
            }
            const v25 = new F19();
            for (const v26 in v25) {
            }
        }
    }
    toString(a28, a29) {
        try {
            this.f = a28;
        } catch(e30) {
        }
        return a29;
    }
}
const v31 = new C3("valueOf");
const v32 = new C3(v2);
new C3(v31);
class C37 extends C3 {
    n(a39, a40, a41) {
        v2 >>>= v2;
        class C42 {
            static [a41] = "valueOf";
            162 = this;
            16;
        }
        new C42();
        new C42();
        new C42();
        return C42;
    }
    e = v32;
    [v32] = v32;
    ["object"];
}
const v46 = new C37();
const v47 = new C37();
new C37();
class C49 extends C37 {
    static [-2];
    p(a51, a52, a53, a54) {
        a51["toString"](a51, a51, a52, C37, a52);
        v47[1];
        C37 <= a51;
        super.e;
        const v62 = a52 - a53;
        let v63 = a53--;
        +a53;
        ~v63;
        Math.cosh(v62);
        ++v63;
        --v63;
        return v46;
    }
}
new C49();
new C49();
new C49();
const v72 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
const v73 = v72.concat(v72);
v73.flat(v73);
