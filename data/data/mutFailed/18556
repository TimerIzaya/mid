const v0 = /5D/dms;
const v1 = /(ab|cde)/gvdims;
function f2(a3, a4) {
    let v6 = 1922 + 1922;
    new Int8Array(v1, --v6, v6);
    return v1;
}
Object.defineProperty(v1, "constructor", { writable: true, enumerable: true, value: f2 });
const v10 = /(?!(a))\1*/gvdmsy;
const v11 = v1.constructor;
class C12 extends v11 {
    static #a = v10;
}
new C12();
function f14(a15, a16) {
    function f17(a18, a19) {
        function f20() {
            return f20;
        }
        const v22 = f20().constructor;
        let v23;
        try { v23 = v22(); } catch (e) {}
        return v23;
        return a18;
    }
    a15.toString = f17;
    try { a15.toString(); } catch (e) {}
    try { a16.toString(); } catch (e) {}
    const o45 = {
        set e(a27) {
            const v28 = super.a;
            function F29(a31, a32, a33, a34) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = a33;
                } catch(e35) {
                }
                try {
                    this.h = a31;
                } catch(e36) {
                }
                try {
                    this.a = v11;
                } catch(e37) {
                }
            }
            new F29(v10, v1, v11, this);
            const v39 = new F29(a15, v1, a15, v10);
            new F29(f14, v39, v28, a27);
            const v42 = this || a27;
            try { new a27(v42, this, a27, this, v1); } catch (e) {}
            a16 >>> this;
        },
        "g": a15,
        "a": v1,
        [v1]: v0,
        "e": a16,
    };
    o45.a;
    return o45;
}
function f47() {
    const o51 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o51);
    return gc;
}
f14.toString = f47;
try { f14(f14, v10); } catch (e) {}
const v54 = f14(v0, v10);
try {
    v54.__proto__ = v1;
} catch(e55) {
}
try {
    v1.valueOf = f14;
} catch(e56) {
}
f14(v0, v0);
const v58 = f14(v10, v1);
[f14,v54,v58];
const v61 = [v0,[v10,v10,v58],f14];
v61[2] = v61;
const v62 = [784840714,1000,256];
v62[411] = v1;
v62[0] = v62;
v62.length = 1000;
new Uint32Array(v62);
