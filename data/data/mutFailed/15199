const v0 = [7,-844868102,4294967297,-128,-35282,-7,52143,5];
const v1 = [-8,9223372036854775807,6,-49605];
const v2 = [1387];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
    } catch(e6) {
    }
}
new v0(v2);
const v8 = new F3(v1);
new F3(v1);
64 | 64;
1073741825 - 1073741825;
for (let v16 = 0; v16 < 5; v16++) {
    const o17 = {
    };
    try { Reflect.defineProperty(o17, o17, v16); } catch (e) {}
}
-2062997897 >>> -2062997897;
([-2.0,-1000000000000.0,2.0,-820.2064938681668,-1e-15,0.8162679086070171,-2.4182463911370693,-7.307764936942877e+306])[5];
[-1.1315451378975964e+308,5.0,1000000000000.0,3.0,1e-15];
[-Infinity,1000000.0,-745.8509480667769];
for (let v28 = 0; v28 < 5; v28++) {
    function f29() {
        class C30 {
            [v28];
            static #h;
        }
        new v8();
        new C30();
        new C30();
        try { ("Vre").search("Vre"); } catch (e) {}
        let v36 = ("Vre").codePointAt(v28);
        -9223372036854775807 * v36--;
        new Float64Array(1024);
        new Int16Array(3627);
        new BigInt64Array(2);
        return f29;
    }
    %OptimizeFunctionOnNextCall(f29());
}
