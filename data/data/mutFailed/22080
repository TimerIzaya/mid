([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new BigInt64Array(218);
const v10 = [];
class C12 {
    p(a14, a15) {
        "-1210238113" - v10;
    }
}
const v17 = [576321.3097715627,NaN,2.2250738585072014e-308,152.98381964388022,316949.7911628757,738532.586404609,-5.4502227395624825];
const v18 = [-5.130812842161701,9.977583159103752e+307,1000000.0,0.057236330542179914,-2.0,0.9768490692168909,3.0];
const v19 = [-1000000.0,437.7488103649075,1.79706201873151e+308,5.0,5.0,-1000000.0,-569690.0477560274,0.8071106963751065];
class C20 {
}
const v21 = new C20();
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    a24[4] = a24;
    const v27 = this.valueOf().constructor;
    try { new v27(); } catch (e) {}
    a24[4];
}
new F22(v21);
function f31(a32, a33) {
    const o46 = {
        "e": a33,
        __proto__: v17,
        [a32]: "cosh",
        "type": "cosh",
        m(a35) {
            const v38 = new Int8Array(3938);
            let v39 = 3;
            let v40 = 0;
            v40 >> v40;
            for (let i = 0; i < 5; i++) {
                [...v39] = v38;
                v40++;
                try {
                    a35.length = 1;
                } catch(e44) {
                }
            }
            const o45 = {
            };
        },
        [v19]: a32,
        ["cosh"]: "cosh",
        ...a33,
        "b": "Yirg",
        ["Yirg"]: a33,
        536870912: a33,
        "a": "fKbq",
    };
    ("async").lastIndexOf();
    const v52 = new Int16Array(2);
    new Uint16Array(v52);
    return o46;
}
f31(v19, v18);
f31(v17, v18);
f31(v19, v19);
const o68 = {
    valueOf() {
        const v59 = /gk4b*/vmsy;
        Object.defineProperty(v59, -9223372036854775808, { enumerable: true, set: gc });
        return v59;
    },
    "b": v21,
    2: v19,
    "type": "Yirg",
    __proto__: v18,
    toString(a62, a63, a64) {
        function f65() {
            return a64;
        }
        Object.defineProperty(a62, Symbol.toPrimitive, { writable: true, get: f65 });
        return Symbol;
    },
};
for (let v69 = 0; v69 < 5; v69++) {
    Math.round(o68);
    function f72() {
        const o73 = {
        };
        return o73;
    }
    function F74() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v76 = new F74();
    v76.constructor = f72;
}
function f77() {
    return f77;
}
class C78 extends f77 {
    constructor(a80) {
    }
}
try { new C78(); } catch (e) {}
