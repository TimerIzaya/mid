const v4 = [-4.0,[-4.57033566365661e+307]];
[v4,-4.0];
function F9(a11) {
    if (!new.target) { throw 'must be called with new'; }
}
class C12 {
}
const v13 = new C12();
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = this?.constructor;
    try { new v18(a16, v13); } catch (e) {}
}
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
}
const v27 = [0n,0n,0n,0n];
const v28 = C12?.constructor;
try { new v28(v27, C12); } catch (e) {}
const v30 = [-8.170245459945505,-9.53786179441455,4.0,-519.2853732206779,625197.7996533306];
const t19 = -1e-15;
const v33 = new t19(1880);
v30.__proto__ = v33;
const v34 = new v4();
for (let i = 0; i < 5; i++) {
    v34.toString = Array;
}
function f35() {
    return 2.81824838654136e+307;
}
const v38 = new Uint32Array();
const v40 = Float64Array > v38;
let v41;
try { v41 = new v40(); } catch (e) {}
function f42() {
    return v41;
}
const v44 = new Uint16Array(67);
new Int8Array(129);
536870912n << 536870912n;
function* f52(a53, a54, a55) {
    return a54;
}
new Float32Array(4096);
function F61(a63, a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
}
const v67 = new F61(-1024, -1024, F61, F61);
const v69 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v70 = [601759695];
const v74 = Symbol.toPrimitive;
const o95 = {
    "c": -4294967297n,
    [522675525n](a77, a78) {
    },
    "c": v70,
    valueOf(a80, a81) {
    },
    [-4294967297n](a83, a84, a85, a86) {
    },
    "e": -268435456,
    "maxByteLength": -4294967295,
    "arguments": v69,
    ...v67,
    [v74]() {
    },
    "type": v44,
    ..."a",
    valueOf(a89, a90) {
        return Symbol;
    },
    ..."a",
    4: "a",
    toString(a92, a93, a94) {
        return a92;
    },
    5: -4294967295,
    6: -268435456,
};
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a99;
    const v100 = this.constructor;
    try { new v100("a"); } catch (e) {}
    try { a98.valueOf(); } catch (e) {}
    const o105 = {
        [57144]: 4294967296,
    };
    try {
        this.f = "-2147483648";
        9n >> 9n;
    } catch(e108) {
    }
}
F96.arguments = F96;
new F14();
new Uint16Array(52);
new Int16Array();
Math.tanh(o95);
function f117(a118, a119) {
    const o121 = {
        get h() {
            return a119;
        },
        [a119]: 129,
        2778757984: a118,
        "h": 129,
    };
    return 129;
}
f117(f117, f117);
new F96();
