const v4 = [601759695];
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f7(a8, a9, a10, a11) {
    function f12() {
        return f12;
    }
    class C13 {
    }
    try { v5["find"](..."find", a11, ...v4, ...v5, ...522675525n); } catch (e) {}
    const o17 = {
    };
}
f7();
Int8Array.length;
const v21 = new Int8Array(127);
try { new Int16Array(55793, Int8Array, 55793); } catch (e) {}
new Int16Array(0);
7 * 7;
let v29;
try { v29 = new Float64Array(127, Float64Array, Float64Array); } catch (e) {}
new v29(7);
function f32() {
    return v21;
}
new Int8Array(1487);
new f32();
new Uint32Array();
class C46 {
}
C46.__proto__;
new Int32Array(2943);
~-9223372036854775807;
function f56(a57, a58, a59) {
    'use strict';
    return a57;
}
new RangeError(194);
/LR0/gudisy;
const v62 = /(?:ab){4,7}/gvisy;
v62.h = v62;
/a\Bb+/vdims;
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    const v67 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    new Int32Array(v67, 10);
    function f71(a72) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    f71.length;
    Object.defineProperty(this, "b", { enumerable: true, set: f71 });
    let v76 = 1073741825;
    try {
        const v77 = v76++;
        v77 - v77;
        -(-175950080);
        let v82 = -1e-15;
        v82 >> v82;
        const v85 = Math.atan2(v82++, -175950080);
        v85 >= v85;
        this.b = v76;
    } catch(e87) {
    }
}
let v88 = new F64();
let v89 = new F64();
v89.a = -10809n;
({"a":v89,"b":v89,...v88} = v89);
const o99 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        gc(256);
        function f98() {
            return Int8Array;
        }
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
const v100 = gc(o99);
try { v100.then(1073741825n, 10000); } catch (e) {}
const v102 = new F64();
v102.b = v102;
16 < 16;
const v106 = new Uint8ClampedArray(16);
v106[13] = v106;
function f108() {
    new Int8Array(1073741823);
    class C112 {
        #valueOf(a114, a115, a116, a117) {
        }
    }
    const o121 = {
        valueOf(a119, a120) {
        },
    };
}
f108();
%OptimizeFunctionOnNextCall(f108);
