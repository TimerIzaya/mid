function f3() {
    return 9007199254740991n;
}
const v6 = new Int8Array(Int8Array);
function f8(a9) {
    Promise.race();
}
let v13 = [1073741824,1073741823,1376142744,1073741825];
function f14(a15, a16, a17, a18) {
    function f19() {
        return a18;
    }
    class C20 extends f19 {
    }
    for (let v21 = 0; v21 < 5; v21++) {
        try {
            v13 &= C20;
        } catch(e22) {
        }
    }
    return Float32Array;
}
const v23 = new Float32Array(v6, Int8Array, Float32Array);
const v26 = new BigInt64Array(10);
function f27() {
    return 10;
}
class C28 extends f27 {
    constructor(a30, a31, a32, a33) {
        super();
        const v34 = [f27,f27,f27];
        v34.minimumIntegerDigits = a33;
        const v36 = [a31,v34];
        Reflect.apply(v23.toLocaleString, v26, v36);
    }
}
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    function F44(a46, a47, a48, a49) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v50 = new F44();
    const v53 = new BigInt64Array(4046);
    function f54(a55, a56) {
        Object.defineProperty(v50, v50, { configurable: true, enumerable: true, get: f54 });
        let o58 = {
            get e() {
                return a41;
            },
        };
        [,...o58] = v53;
        return a55;
    }
    f54();
}
new C28();
for (let v61 = 0; v61 < 5; v61++) {
    function f62() {
        v6.byteLength;
        const v65 = [65537,1073741825,7841,-12,13];
        const v66 = [1073741823,4294967295];
        v66[1] = v66;
        const v67 = new f62(v65, v66, WeakSet);
        new f62(v66, v66, v67);
        return Float32Array;
    }
    f62();
    %OptimizeFunctionOnNextCall(f62);
}
[f3];
[-1031613870,-1031613870,9007199254740991n,9007199254740991n];
[-1031613870,-128,f3,-1000000.0];
class C80 {
    9 = 6;
    valueOf(a82, a83, a84, a85) {
        a84.setMilliseconds();
    }
    toString(a88, a89, a90, a91) {
        const v93 = ("throw")?.trimRight;
        try { v93(); } catch (e) {}
        const v98 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v98, eval());
    }
}
new Uint8ClampedArray(16);
Math.asin();
const v107 = new C80();
const v108 = new C80();
function F109(a111, a112, a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    const v115 = this?.constructor;
    try { new v115(v108, 6, 6, a111); } catch (e) {}
    a111[9];
    a114--;
    try {
        this.c = -578828680;
    } catch(e119) {
    }
}
const v120 = new F109(v107);
new F109(v120);
