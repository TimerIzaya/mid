[2.0,1.2049810185393516e+308,111152.75528964982,-1.092739219994052e+308,0.6600589746041197];
[-4.0,-1000000.0,-5.0,1000000000000.0,-2.220446049250313e-16,-1.7976931348623157e+308,6.203877600098712e+307,112.1386350750613,-1000000000.0];
[-1e-15];
1024n / 1024n;
~-536870912;
-1814632578 >>> -1814632578;
-1814632578 / -1814632578;
const v17 = -7n;
const v21 = new Int32Array(Int32Array, Int32Array, Int32Array);
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
}
const v26 = new F22(Int32Array, v21);
function f27(a28) {
    let v29;
    try { v29 = v26.resize(v21, F22, Int32Array, a28); } catch (e) {}
    v21.length |= v29;
    return v29;
}
f27();
1592138330n ^ 1592138330n;
Math.BYTES_PER_ELEMENT = Math;
function f34(a35, a36, a37, a38) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: 38932 });
    arguments[4] = arguments;
    return f34;
}
Math.b = Math;
const v40 = new Math(2799);
try { v40.reduce(v17); } catch (e) {}
const o42 = {
};
o42.b = o42;
o42.h = o42;
const v43 = o42.constructor;
try { new v43(11173); } catch (e) {}
const v45 = v43(2799);
let v46;
try { v46 = v45.toLocaleString(); } catch (e) {}
try { v46.trim(); } catch (e) {}
v45.toExponential(v40);
