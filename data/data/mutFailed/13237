const v2 = "D2z" < 1000000000.0;
function f3() {
    return f3;
}
function f6() {
    return -2.220446049250313e-16;
}
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a10;
    } catch(e11) {
    }
    try {
        this.a = -2.220446049250313e-16;
    } catch(e12) {
    }
}
const v13 = new F7(f6, 0.016446136212951323);
new F7(v13, v13);
new F7(f6, F7);
[Infinity,-129.96022333378062,677.0017570188647,-367856.87780039234,-4.297730448858184,1000000.0,0.13063185598928828,3.0,0.32051983532787076];
const v17 = [1000000.0,0.5860457468847045,-1.7976931348623157e+308,-1.0,1000000.0,651.4507575315324,-Infinity,4.827812522793023,-0.5625181483762276,749876.9412359165];
const v18 = [-2.220446049250313e-16,0.6661313312813485,Infinity,4.0,3.0,2.220446049250313e-16,-3.0,-9.850602056160875,0.0,-1000000.0];
function f19() {
    return v18;
}
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    Reflect.preventExtensions(Worker);
}
function f25() {
    return f6;
}
function f29(a30, a31, a32, a33) {
    return a30;
}
const v34 = f29();
-128 / -128;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v39 = [601759695];
function f40(a41, a42, a43, a44) {
    a42 * a42;
    a43 == a43;
    const o48 = {
    };
    const o49 = {
    };
    class C50 {
        #valueOf(a52, a53, a54, a55) {
        }
    }
    a43[2] = arguments;
    const v56 = arguments.toString(v39, -128);
    function f57() {
        const v59 = v56.toLocaleUpperCase;
        ("Vre").fixed();
        const o77 = {
            "c": v39,
            valueOf(a64, a65) {
            },
            ...v18,
            get h() {
                return v17;
            },
            o(a68) {
                return gc();
            },
            "e": v59,
            n(a72, a73) {
            },
            "maxByteLength": -268435456,
            6: -1349822283,
            n(a75, a76) {
                return v2;
            },
        };
        o77.valueOf() * f57;
    }
    return a41;
    const v80 = [];
    function f81() {
        const v82 = v80.constructor;
        v82.call();
        return v82;
    }
    Int8Array.a = Int8Array;
    const v85 = new Int8Array();
    v85.buffer;
    %OptimizeFunctionOnNextCall(f57);
    function F88() {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f91(a92, a93) {
        const o97 = {
            p(a95, a96) {
                super.a = F88;
                return f91;
            },
        };
        return a92;
    }
    ("find").strike();
}
%PrepareFunctionForOptimization(f40);
const v99 = f40();
%OptimizeFunctionOnNextCall(f40);
f40(v99, f40, -128, v34);
