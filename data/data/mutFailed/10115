class C3 {
    o(a5) {
        [256.8461487315233,20474.26564560365];
        [2.2250738585072014e-308,1000000.0,298504.02441318077,4.0,-186660.86724884761,-3.779087739032243,3.0,727099.9978352275];
        [-1000.0,1e-15,-602673.2700803035,2.0];
        return 655564233;
    }
    #toString(a10, a11) {
        function F12(a14) {
            if (!new.target) { throw 'must be called with new'; }
            const o16 = {
                "b": 1e-15,
            };
            delete o16.b;
        }
        for (let v18 = 0; v18 < 32; v18++) {
            a11["p" + v18] = v18;
        }
        return a10;
    }
}
const v21 = new C3();
const v22 = new C3();
const v23 = [601759695];
const v24 = [1073741824,1073741823,1376142744,1073741825];
function f25(a26, a27, a28, a29) {
    try { v24["find"](..."find", a29, ...v23, ...v24); } catch (e) {}
    const v34 = Symbol.isConcatSpreadable;
    const v35 = v34.description;
    const v36 = Array(a28);
    try { v36.groupToMap(v34, v35, f25, v36, v34); } catch (e) {}
    return v23;
}
new C3();
let v40 = 10n;
class C42 {
    static set f(a44) {
        if (987692.963451314 <= 655564233) {
            v21[Symbol.split];
        } else {
            v40 /= a44;
            const v50 = [-3.0];
            function f51(a52, a53) {
            }
            const v56 = [181.0767075529559,v50];
            const o57 = {
                "arguments": v56,
                "type": "function",
            };
            new Worker(f51, o57);
            v22.h;
        }
    }
    static [C3];
}
new C42();
new C42();
new C42();
class C63 {
}
const v64 = new C63();
v64.constructor;
const v66 = /8[\cA]v/uisy;
const t63 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
t63.length = v66;
function f69() {
    Math.cos(Math);
    Math.sin(-268435456);
    function f74() {
    }
    return Math;
}
%PrepareFunctionForOptimization(f69);
const v75 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
function f77(a78, a79, a80, a81) {
    function f82() {
        const o90 = {
            __proto__: v75,
            valueOf(a84, a85) {
                return v75;
            },
            ["-1073741824"](a87, a88, a89) {
            },
        };
        return o90.copyWithin();
    }
    f82();
    %OptimizeFunctionOnNextCall(f82);
    return a78;
}
f69();
%OptimizeFunctionOnNextCall(f69);
f69();
