new Uint16Array(4);
const v5 = new Float32Array(402);
new Int16Array(2778);
class C9 extends Int16Array {
    8;
    7 = Float32Array;
    constructor(a11, a12) {
        this[2778] >>>= 402;
        for (let v13 = 0; v13 < 25; v13++) {
        }
    }
    a = v5;
    [2778];
    p(a15, a16, a17, a18) {
        Math.cosh(Math);
        const o21 = {
        };
        function f22() {
            return f22;
        }
        super.subarray(402);
        return ("g").normalize("NFKD");
    }
    static #f = 2778;
}
new C9();
new C9();
new C9();
for (let i35 = 0, i36 = 10; i35 < i36; i35++, i36--) {
}
try { ("imul").padEnd(1073741824); } catch (e) {}
gc(128n);
Array(36862);
let v52 = -268435456;
v52--;
-(v52 + v52);
[256,-226375137,-4096,-9007199254740991,-1,-2,-6];
[2147483647,-642530021,1786934080,65535,65535,-1024,14,1445415583,1958088553,0];
Symbol.b = Symbol;
let v63 = 0;
do {
    v63++;
} while ((() => {
        const v68 = v63 < 9;
        class C69 {
        }
        return v68;
    })())
class C72 {
    m(a74, a75) {
        super[a75];
        const v80 = [Symbol.hasInstance];
        const o81 = {
            "arguments": v80,
            "type": "function",
        };
        a75?.[11];
        return 5.0;
    }
    constructor(a84) {
        class C85 {
            static [11] = this;
            static d = 11;
            static [this] = this;
        }
        new C85();
        new C85();
        new C85();
    }
}
[2058213111,536870889,-13,-1244150048,1761453201,16,-2147483649,10000,-5,9];
new WeakMap();
function F92(a94, a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
}
function f97() {
    class C98 {
    }
    for (let v99 = 0; v99 < 5; v99++) {
    }
}
class C100 {
    constructor(a102, a103) {
        for (const v104 in this) {
        }
    }
}
function F105() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 1163987790;
}
const v108 = new F105();
const o109 = {
    __proto__: v108,
    "c": v108,
};
f97();
