let v2 = "string";
class C3 {
    #c = v2;
    static get e() {
        let v5;
        try { v5 = this(-3.0, this, this, -3.0, this, this); } catch (e) {}
        b = this;
        v2 = v5;
        return this;
    }
    ["MAX_SAFE_INTEGER"];
    constructor(a7) {
        super[a7] = a7;
        [-13,-19962,-9007199254740992,19260,225750772,-5981];
        const v9 = [1073741824];
        let v10 = [-47729632,-35543,268435456,-52103,1073741823,4294967295,-65536,-3,2147483649,268435439];
        let v11;
        try { v11 = v9.with(a7, this); } catch (e) {}
        v10 &= v11;
        try { v2(v10, v2, -3.0, v2); } catch (e) {}
    }
}
const v13 = new C3(v2);
const v14 = new C3("MAX_SAFE_INTEGER");
new C3(v14);
const v16 = /a??R/vdis;
const v17 = /aQX(\xed\xb0\x80)\x01/vdm;
const v18 = /(a(?:b)a|b[x]+)/umsy;
class C19 extends C3 {
    constructor(a21, a22, a23) {
        super(a23);
        a23 ^= a22;
        const v24 = a22[4294967296];
        try { new v24(); } catch (e) {}
        try {
            super.grow(v13, "MAX_SAFE_INTEGER", "MAX_SAFE_INTEGER", v2, v18, this, C19);
        } catch(e27) {
        }
    }
    c = "MAX_SAFE_INTEGER";
    #d;
    e;
    #c;
}
new C19(v18, v16, v17);
const v29 = new C19(v18, v14, v16);
new C19(v13, v16, v16, -3.0, -3.0, v17);
const v32 = [-4,536870888,-65243,-256,-4294967295,65536,-12];
const v33 = [-2096457859];
const v34 = /a+b|cu(?:foo)*/u;
const v36 = new Map(Map, v18, v29);
class C37 {
    constructor(a39, a40, a41, a42) {
        const v43 = v33.__proto__;
        this & v34;
        v43[6] = a40;
        class C46 {
        }
        if ("log1p") {
            try { C46.m(); } catch (e) {}
        }
    }
    toString(a49, a50, a51, a52) {
        super[v32] = v36;
    }
}
new C37(v32, v33, v34, v32);
for (const v54 in v33) {
    Array(310668736);
}
