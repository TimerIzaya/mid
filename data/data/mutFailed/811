const v0 = [];
const v4 = new Uint8ClampedArray(112);
const v7 = new Uint8Array();
const v8 = [Infinity,-1e-15,-5.383093003658099,-232599.5850816276];
let v11;
try { v11 = v4(-85357.59116785484, ...v7, 64, 46, -3.383486186086852e+307, ...v4); } catch (e) {}
v8.length = 64;
const v13 = [v11,v7];
Reflect.apply(v7.reduce, v11, v13);
Reflect[3] = -85357.59116785484;
new Int32Array(3);
new Uint8Array(2);
const v24 = new BigUint64Array(1);
delete v0?.length;
v13[7];
try {
    v24.at(3);
} catch(e28) {
}
new WeakSet();
class C32 {
    static e;
    f;
    #c = Uint8ClampedArray;
}
new C32();
new C32();
new C32();
const v36 = new Uint8ClampedArray();
try { v36.reduceRight(v36); } catch (e) {}
