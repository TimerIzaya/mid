new Int16Array(3);
const v5 = new Float32Array(9);
let v6;
try { v6 = v5.toString(); } catch (e) {}
10 - 10;
const v10 = new Float32Array(10);
-2n / -2n;
const v15 = [6,16];
function f16(a17) {
    v10["forEach"](v6, "forEach");
    return "forEach";
}
v15[Symbol.toPrimitive] = f16;
const v24 = Date.constructor;
const o32 = {
    [v15](a26, a27, a28, a29) {
        [,];
    },
};
o32.h = o32;
const v33 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
function f34() {
    return f16;
}
function f35(a36) {
    class C39 {
        constructor(a41) {
            for (const v42 of "bigint") {
                this.c = v42;
            }
        }
        h = undefined;
    }
    class C43 extends C39 {
    }
}
Object.defineProperty(v33, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f34, set: f35 });
const v46 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
Object.defineProperty(v46, "toString", { writable: true, configurable: true, enumerable: true, value: f35 });
v46[2];
function f49(a50, a51, a52) {
    a51.toString = f16;
    try { a50.join(v46); } catch (e) {}
    try { a51.groupToMap(v24); } catch (e) {}
    return a51;
}
f49.d = f49;
const v55 = f49(v46, v33);
function f56(a57, a58) {
    try { a58["toString"]("toString", "toString", a58, 3); } catch (e) {}
    return v6;
}
v55.toString = f56;
v55.fill();
f49(v46, v55);
