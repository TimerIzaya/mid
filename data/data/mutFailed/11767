function F0() {
    if (!new.target) { throw 'must be called with new'; }
    new F0();
    new Uint32Array(257);
    new Float32Array(9);
    new BigUint64Array(749);
    const v16 = Symbol.iterator;
    const o25 = {
        [v16]() {
            let v18 = 10;
            const o24 = {
                next() {
                    v18--;
                    const v22 = v18 == 0;
                    const o23 = {
                        "h": 257,
                        [BigUint64Array]: F0,
                        [F0]: -11,
                        8: -11,
                        "d": 0,
                        "done": v22,
                        "value": v18,
                    };
                    return o23;
                },
            };
            return o24;
        },
    };
    class C30 {
        m(a32, a33) {
            new a33(-1073741824, -268435456, -1073741824, -1073741824, ...a32);
        }
    }
    function F36(a38, a39, a40, a41) {
        if (!new.target) { throw 'must be called with new'; }
        this.a = a39;
    }
    const v42 = new F36();
    for (const v43 in v42) {
    }
    for (let v44 = 0; v44 < 54; v44++) {
        "8Rt" in o25;
        ("eYk").length;
        this.g;
    }
    try {
        this.c = -11;
    } catch(e48) {
    }
}
const v49 = new F0();
const v50 = new F0();
new F0();
class C52 {
    static #toString(a54) {
        if (F0 === a54) {
            v49[5] >>>= F0;
        } else {
            throw F0;
        }
        return F0;
    }
    static [F0];
}
new C52();
new C52();
const v58 = new C52();
const v59 = [F0,C52,v58,F0];
[[v59,v59,v50,C52,v59],v58];
function f62(a63, a64) {
}
function f65(a66, a67, a68, a69) {
    const o70 = {
    };
    return o70;
}
[-65537,-24143,-1293542190,14907,3476,-65083];
function F73(a75) {
    if (!new.target) { throw 'must be called with new'; }
    const o76 = {
        "preventExtensions": f65,
        "setPrototypeOf": f62,
    };
    new Proxy(this, o76);
    const v79 = this?.constructor;
    try { new v79(); } catch (e) {}
}
const v81 = new F73();
const t89 = Date();
t89[v50] = f65;
Object.defineProperty(v59, "b", { configurable: true, value: v81 });
try {
    v59.reverse();
} catch(e84) {
}
new F73(Date);
new Float64Array();
Date();
