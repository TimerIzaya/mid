class C5 {
    toString(a7, a8, a9) {
    }
}
for (let v10 = 0; v10 < 25; v10++) {
    Promise.reject(Promise);
}
const o13 = {
    "a": C5,
    "f": 1617700384n,
    "b": "boolean",
    [1617700384n]: 1617700384n,
    "d": 128n,
};
const t14 = "boolean";
t14[16] >>= 128n;
try {
    ("boolean").substring(-2147483648);
} catch(e16) {
}
let v17;
try { v17 = ("DB").substring(128n, "DB"); } catch (e) {}
Set.d = Set;
const v20 = new Set();
try { v20.add(1617700384n); } catch (e) {}
const v24 = new Array(0);
["n",["boolean",Set],"n",v24,v24];
[v20,1617700384n,"n","DB"];
const o28 = {
};
o28.b = o28;
Array(v17);
%PrepareFunctionForOptimization(Array);
Array(v17);
Array(v17);
%OptimizeMaglevOnNextCall(Array);
Array(v17);
const v34 = ("undefined").localeCompare("undefined", o28);
v34 & v34;
