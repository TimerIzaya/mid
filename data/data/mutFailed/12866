const v2 = new Float64Array(25);
const v5 = new Uint16Array(5);
v5[3] = v5;
new Float32Array(2);
function f12() {
    const o13 = {
    };
    o13.g = o13;
    return o13;
}
const v14 = f12();
const v15 = v14?.__lookupSetter__;
try { new v15(2.0); } catch (e) {}
const v21 = new Int16Array(2);
const v23 = Reflect?.set;
try { new v23(2, Int16Array, Int16Array); } catch (e) {}
const v25 = ["dgV"];
const v26 = ("undefined").replaceAll;
try { v26.bind(2.0); } catch (e) {}
Reflect.apply(v26, v21, v25);
const v31 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
try { v31.entries(); } catch (e) {}
v31["findIndex"](gc);
const t22 = "toString";
t22[1] = "toString";
("boolean").split("toString");
class C39 {
}
const v40 = new C39();
const v41 = v40?.constructor;
try { new v41(); } catch (e) {}
function f43(a44, a45) {
    const v46 = a45?.__lookupSetter__;
    try { new v46(f43); } catch (e) {}
    v2.BYTES_PER_ELEMENT;
    class C49 {
    }
    C49.e = C49;
    const v50 = new C49();
    const v51 = v50?.constructor;
    try { new v51(); } catch (e) {}
    function f53(a54) {
        this.ReferenceError;
        return a54;
    }
    f53.g = f53;
    %PrepareFunctionForOptimization(f53);
    class C57 {
    }
    const v58 = C57.length;
    v58 / v58;
    let v61;
    try { v61 = ("0x2I").sup(); } catch (e) {}
    v61[12] = v61;
    function F63(a65, a66, a67) {
        if (!new.target) { throw 'must be called with new'; }
        function F68(a70, a71) {
            if (!new.target) { throw 'must be called with new'; }
            function f72(a73, a74, a75) {
                for (let i = 0; i < 10; i++) {
                    const o76 = {
                    };
                }
                try {
                    f72(F63, a73, a71);
                } catch(e78) {
                }
                return a74;
            }
            f72();
        }
        new F68();
    }
    F63.e = F63;
    class C81 {
    }
    try { new C81(); } catch (e) {}
    const v83 = C81?.call;
    v83.e = v83;
    try { new v83(null); } catch (e) {}
    class C85 extends C81 {
    }
    C85.length = C85;
    try { new C85(NaN, v40, NaN, v14); } catch (e) {}
    const v87 = v14?.propertyIsEnumerable;
    try { v87(); } catch (e) {}
    class C89 {
    }
    C89.name;
    try { C89.call(C81); } catch (e) {}
    const v92 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    class C93 {
        static {
            this.length = this;
            class C95 {
            }
            try { new C95(); } catch (e) {}
        }
    }
    C93.name = C93;
    class C97 {
    }
    try { C97.apply(1.7976931348623157e+308, f43); } catch (e) {}
    Symbol.b = Symbol;
    C97[Symbol.replace] = v92;
    const v101 = [];
    let v102;
    try { v102 = Infinity.with(v101); } catch (e) {}
    Float64Array.prototype = Float64Array;
    const v104 = new Float64Array(v101, v102);
    const v105 = new Float64Array(v104, a44, v102);
    const v106 = v105.values();
    try { v106.next(); } catch (e) {}
    return v105;
}
try { Uint16Array.from(Uint16Array); } catch (e) {}
%PrepareFunctionForOptimization(f43);
const v110 = f43(Uint16Array, v40);
try { v110.entries(); } catch (e) {}
%OptimizeFunctionOnNextCall(f43);
const o112 = {
};
o112.c = o112;
function f113() {
    const v116 = Array(4087);
    v116[4037] = v116;
    for (const v117 of v116) {
    }
    return Array;
}
const v118 = f43(v40);
try { v118.values(); } catch (e) {}
new BigInt64Array();
new BigInt64Array(1073741824);
