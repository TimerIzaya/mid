function F3(a5, a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = new Int8Array();
    v9.buffer.slice(a6, a6).transferToFixedLength();
}
new F3(F3, F3, F3);
new Set();
function f17() {
}
class C18 extends f17 {
    toString(a20, a21) {
        const v22 = this.constructor;
        new v22(a21, v22, this, v22, C18);
        -this;
    }
}
const v25 = new C18();
try { v25.toString(); } catch (e) {}
const v31 = [-1000.0,1000000.0,2.220446049250313e-16,614071.3005355855,-1.0,2.220446049250313e-16];
v31[301] = -536870912;
const o33 = {
    "type": "function",
};
new Int16Array(2478);
new Float64Array(5);
new Uint32Array(129);
const t26 = eval();
const v44 = new t26();
const o45 = {
};
new Set(v44, o45);
Array(228);
class C52 {
}
new C52();
new C52();
for (let [v59,...v60] of "function") {
}
"p" + -13;
const t38 = BigInt64Array.constructor;
t38(129);
new Int16Array();
for (let i74 = 0; i74 < 1; i74++) {
}
new Uint8Array(6);
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new Date();
class C92 {
}
const v96 = v31.push(-1336159725, v31, -12, 10);
function F98(a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F98(v96, /(M(?:ab|cde)VbD)/vdim);
    } catch(e104) {
        a101 >> 10;
        Math.PI;
    }
}
new F98();
