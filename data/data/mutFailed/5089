const v2 = new Date();
v2.getFullYear();
function F4(a6, a7, a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a7;
}
const v10 = new F4();
for (const v11 in v10) {
}
class C14 {
    ["-4294967295"] = "flatMap";
    e;
    3597928079;
    static #g;
    m(a16, a17) {
        this[3] /= a17;
        const o19 = {
            "type": "minor",
        };
        const v20 = /[a-zA-Z0-9]/gvisy;
        const t20 = /abc?/gvmy;
        t20[-2] ^= v20;
        delete this[6];
        return a16;
    }
    static 257 = -1.261801573951714e+308;
    #d;
    f;
    ["flatMap"] = -1.261801573951714e+308;
}
const v23 = new C14();
Int8Array.prototype;
new Uint32Array();
Float64Array(10);
const v31 = new C14();
new Int16Array(5);
const v36 = new BigUint64Array();
const v37 = new BigUint64Array(5);
function f38(a39, a40, a41) {
    return a41;
}
v37.toLocaleString(([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(f38), v36);
const v45 = new C14();
class C46 {
    2 = 10;
    static {
        this[Symbol.hasInstance];
    }
    static g;
    3 = v31;
    get b() {
        for (const v52 of "flatMap") {
            v45 === v31 ? v45 : v31;
            this[Symbol.match];
        }
        return v45;
    }
    2 = -1.261801573951714e+308;
}
const v58 = new C46();
v58[3];
new C46();
new C46();
[-9007199254740990,-256,-1973524997,16,2147483649,1014462086];
const v63 = [-256,53898,255,9007199254740990,-9223372036854775807,0,-2147483649,11736,-15,-1034519237];
v63[7] = v63;
[11,64,-12,0];
const v69 = new Int8Array(3938);
let v70 = 3;
let v71 = 0;
for (let i = 0; i < 5; i++) {
    [...v70] = v69;
    v71++;
}
try { new Int8Array(v58, v23, v58); } catch (e) {}
const v74 = new Int8Array(268435456);
v74[64420943];
