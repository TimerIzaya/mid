const v0 = [-1e-15,313.44679996485615,NaN,0.6798959323206759];
const v1 = [136.57978035746964];
const v2 = [5.422585253465462e+307,739334.2018369758,2.0,2.220446049250313e-16,-0.8379177525066908,490185.28394445777,-1e-15,241.0405630020448,1000000000000.0];
function f6() {
    return 10000n;
}
class C7 extends f6 {
    o(a9, a10, a11) {
        const v13 = v2["pop"](4294967297n, ..."pop", ..."pop", ...v0);
        v2[2] = a9;
        function F18(a20, a21, a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = a20;
            } catch(e24) {
            }
            try {
                this.e = "min";
            } catch(e25) {
            }
            try {
                this.d = 4294967297n;
            } catch(e26) {
            }
        }
        new F18(4294967297n, v0, v0, v0);
        new F18(a10, v13, "min", v2);
        new F18(a11, 1914n, v1, v0);
        for (let v30 = 0; v30 < 32; v30++) {
            try {
                v1.toString = new.target;
            } catch(e31) {
            }
            break;
            const t34 = 4294967297n;
            t34[a9 + v30] = v30;
        }
        return a11;
    }
}
new C7();
const v35 = new C7();
delete v35[v35];
const o39 = {
    "maxByteLength": 1000,
};
const v40 = o39?.__defineGetter__;
try { new v40(v40, SharedArrayBuffer); } catch (e) {}
1000 >> 1000;
const v44 = new SharedArrayBuffer(1000, o39);
try { new Int32Array(1000, 1000, Int32Array); } catch (e) {}
new v35(v44);
const v48 = new C7();
const v49 = v48?.constructor;
try { new v49(); } catch (e) {}
function f51() {
    return f51;
}
10n / 10n;
for (let v55 = 0; v55 < 25; v55++) {
    try { ("p").anchor("p"); } catch (e) {}
    "p" + v55;
    const t61 = "M";
    t61["M"] = v55;
}
Object.defineProperty([8,-65537,9007199254740991,-268435456,4294967296,8,44846,-13], 10n, { get: f51, set: f51 });
