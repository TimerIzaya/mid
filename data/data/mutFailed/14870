const v1 = [-536870912,-3592,61205];
const v2 = v1.constructor;
class C3 extends v2 {
    static 1 = v2;
}
const v5 = new Float64Array(8);
const v8 = new Uint32Array(11);
Object.defineProperty("MAX_SAFE_INTEGER", 1024, { enumerable: true, value: "MAX_SAFE_INTEGER" });
const v11 = Float64Array === Uint32Array ? Float64Array : Uint32Array;
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v11;
    } catch(e17) {
    }
}
new F12(Float64Array, v11, v5);
const v19 = new F12("MAX_SAFE_INTEGER", F12, v5);
new F12(v1, v8, v11);
class C23 {
    #c;
    [-0.0];
    #valueOf(a25, a26) {
        a26 = this;
        try {
            ("MAX_SAFE_INTEGER").#valueOf();
        } catch(e28) {
        }
        a26[3.2149281669993574e+307] = a25;
        return a25;
    }
}
const v34 = new Int16Array(255);
const v36 = new Date();
for (let v42 = 0; v42 < 24; v42++) {
    let [v43] = v34;
}
try { v19.setYear(255, "MAX_SAFE_INTEGER", C23, 8, v5); } catch (e) {}
const v50 = new BigInt64Array(3);
let v52;
try { v52 = Float32Array.from(v50); } catch (e) {}
const v53 = new Float32Array(11);
v53.byteOffset = v53;
const v57 = ReferenceError(-1073741824, 9007199254740991n);
function f58(a59) {
}
f58(f58);
v53 * 260330366;
v1["findIndex"](gc);
function f66() {
    return f66;
}
try {
    new Float64Array(v34);
} catch(e68) {
    "ex7" <= Uint8ClampedArray;
    const v74 = new Uint8Array(165);
    v74.lastIndexOf();
}
class C76 {
    constructor(a78) {
        const v80 = Symbol.iterator;
        const o82 = {
            [v80]() {
            },
        };
    }
}
for (let i85 = 0; i85 < 10; i85++) {
    try {
    const t0 = -44394n;
    t0();
    } catch (e) {}
    !-1802551371;
}
try {
    v5.c = v57;
} catch(e94) {
}
try {
    new C76([Float32Array,3.2149281669993574e+307,v36,3,v52]);
} catch(e97) {
}
new BigUint64Array(2582);
