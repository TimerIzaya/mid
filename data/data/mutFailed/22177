function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 10;
    } catch(e3) {
    }
    try {
        this.f = 10;
    } catch(e4) {
    }
    try {
        this.g = 10;
    } catch(e5) {
    }
}
function f6(a7, a8) {
    return "28j";
    return a8;
}
F0.toString = f6;
const v10 = new F0();
const v11 = new F0();
const v12 = new F0();
v12.toString = f6;
function f13() {
    return F0;
}
function f14(a15, a16) {
    function f17() {
        a15[f14] &= a15;
        delete v11[f13];
        return f14;
    }
    a15[Symbol.toPrimitive] = f17;
    a16.toString = f13;
    const o24 = {
        "e": F0,
        "a": a15,
        [a15]: v11,
        "d": v10,
        set g(a22) {
            a22++;
        },
        "c": F0,
        __proto__: a15,
        [F0]: a16,
    };
    return o24;
}
f14(v12, F0);
const v27 = f14(v10, f14(v12, v10));
class C28 extends f13 {
    o(a30, a31, a32) {
        try {
            const o33 = {
            };
            for (let i35 = 0; i35 < 0; i35++) {
                f13[6] = v10;
            }
            a32.fuck(f13, o33);
        } catch(e43) {
        }
        return F0;
    }
    static #a = v27;
}
new C28();
new C28();
new C28();
const v48 = new Float32Array();
for (let v49 = 0; v49 < 25; v49++) {
    function f50(a51, a52, a53, a54) {
        a51[1];
        a52--;
        a51[0] = a51;
        a52 <= v49;
        arguments[1] = arguments;
        const v59 = arguments?.__lookupGetter__;
        try { v59.constructor(v48, a53, v49, f50); } catch (e) {}
        let v61;
        try { v61 = v59(v59, f50, a52); } catch (e) {}
        a51?.e;
        const o65 = {
            "maxByteLength": 4,
        };
        const v67 = new ArrayBuffer(4, o65);
        new Int16Array(v67);
        return v61;
    }
    for (let v70 = 0; v70 < 10; v70++) {
        f50(v48);
    }
}
