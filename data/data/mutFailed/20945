let v1 = Uint8ClampedArray;
new v1(10);
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f5(a6, a7, a8, a9) {
    try { v4["find"](..."find"); } catch (e) {}
    return a9;
}
for (let v12 = 0; v12 < 10; v12++) {
    v12 !== v12;
    f5();
}
new Int32Array(9);
Uint8Array.e = Uint8Array;
new Uint8Array(1358);
3222 * 3222;
const v23 = new Uint8ClampedArray(3222);
const v26 = new Int32Array(190);
class C28 {
    constructor(a30, a31) {
        const o33 = {
            84: arguments,
        };
    }
}
try { C28.bind(v26); } catch (e) {}
function f37() {
    ("D")[0].substring(129);
    return "D";
}
f37();
const t29 = 10;
new t29(16);
try { ("m").codePointAt(129); } catch (e) {}
class C46 {
}
const v47 = new C46();
const v48 = v47?.__lookupGetter__;
try { new v48(190); } catch (e) {}
const v50 = new C46();
const v51 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v52 = [601759695];
v52.g = v52;
const v53 = [1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    function f61() {
        const o76 = {
            "e": -4294967295,
            ...v51,
            84: arguments,
            ..."Vre",
            "g": 190,
            toString(a65, a66) {
                v1 += f55;
                ++a59;
                a65[Symbol.iterator] = "Vre";
                return "Vre";
            },
            set b(a71) {
            },
            ["Vre"](a73, a74) {
                super[f61];
            },
        };
        o76[2];
        return a56;
    }
    class C79 extends Float32Array {
        constructor(a81, a82, a83) {
        }
    }
    C79.length;
    f61();
    %OptimizeFunctionOnNextCall(f61);
    let v87;
    try { v87 = v53[a58](..."find", a59, ...v52, ...v53, ...522675525n); } catch (e) {}
    const v88 = v87 <= a58;
    v88 && v88;
    return arguments;
}
const t79 = "255";
t79.f = v52;
const t81 = "9007199254740992";
t81["255"] &= 7;
[1000,1000,1000,1000,"255"];
for (let v95 = 0; v95 < 10; v95++) {
    const v96 = f55();
    try { ("NFC").replaceAll(v96, v23); } catch (e) {}
    try { ("undefined").substring(v47, v47); } catch (e) {}
    v51.normalize("NFC");
    function F102() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new F102(); } catch (e) {}
    new F102();
}
%OptimizeFunctionOnNextCall(f55);
for (const v107 in v50) {
    const t97 = Int32Array();
    t97[3] = 9007199254740991;
    v47.p("m");
}
f55(v53, f55, 522675525n);
