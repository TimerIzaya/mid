const v0 = [4.2506440322859837e+307,0.0,2.0,1000000000000.0,-2.2250738585072014e-308,-440159.75061819865,-772.4688175074918];
const v1 = [0.539466582314998,134.21426545067197,-2.4972675816228858,-2.2250738585072014e-308,-2.0926517698002005];
const v2 = [2.3961819058890874e+307,105.4845069505318,-3.0,5.0];
class C3 {
    a = v1;
    static #h = C3;
    constructor(a5) {
        this.a = this;
        const o8 = {
            "maxByteLength": 1814769353,
        };
        const v10 = new SharedArrayBuffer(12, o8);
        function f11() {
            return v10;
        }
        function f12(a13) {
            function f14(a15, a16) {
                Symbol.toPrimitive;
                const v21 = Array();
                function f22() {
                    return 3;
                }
                function f23(a24) {
                    const o28 = {
                        "execution": "async",
                    };
                    gc();
                }
                Object.defineProperty(v21, 0, { configurable: true, enumerable: true, get: f22, set: f23 });
                v21.unshift(3, a15);
            }
        }
        Object.defineProperty(v10, "h", { writable: true, get: f11, set: f12 });
        v10.h = v10;
        let v31;
        try { v31 = a5.keys(); } catch (e) {}
        const v32 = v31?.next;
        try { new v32(); } catch (e) {}
        try {
            const o34 = {
            };
            function f35(a36, a37, a38) {
                try { a36(); } catch (e) {}
                return a36;
            }
            %PrepareFunctionForOptimization(f35);
            a5.toString = v31;
        } catch(e40) {
        }
    }
    #e = v1;
}
new C3(v1);
new C3(v0);
new C3(v2);
function f44() {
    function f46(a47) {
        a47 !== v1;
    }
    this.onmessage = f46;
}
[1625256820,665194308,1073741825];
[52062,0,1171070887];
[-536870912,-10,253557790];
let v53 = -256n;
v53++;
v53 >> v53;
function f56(a57, a58, a59, a60) {
    const v63 = Reflect?.construct;
    try { new v63(Uint8ClampedArray, a60); } catch (e) {}
    const v66 = Reflect.construct(Uint8ClampedArray, []);
    try { v66.entries(); } catch (e) {}
    return v66;
}
f56.g = f56;
f56();
for (let i72 = 0, i73 = 10;
    (() => {
        const v74 = i72 < i73;
        v74 || v74;
        function f76() {
            return f44;
        }
        const v78 = ~-1684549676;
        const v79 = [2.2250738585072014e-308,0.5522511629085187,-7.435509479805105e+307];
        Object.defineProperty(v79, "d", { enumerable: true, value: Array });
        v79.d = v78;
        class C80 {
        }
        const v83 = new BigUint64Array(3375);
        v83[686];
        let [v85,,v86,...v87] = v83;
        let v88 = 3375;
        const v89 = v88++;
        v89 / v89;
        new Float64Array();
        v85 ^ v85;
        try { v87.reverse(); } catch (e) {}
        return v74;
    })();
    -i72, ~i73, i72++) {
}
let v103 = 4.0;
class C104 {
    constructor(a106, a107) {
        this[65536] = v0;
        a106.constructor = Array;
        this[65536];
        const v109 = a106?.constructor;
        try { new v109(v103); } catch (e) {}
        super[v103 = a107] = a107;
        const v113 = new Int8Array(2509);
        new Date(..."undefined", "undefined", ...v113);
        Math?.expm1;
        Number.isNaN(Math.asin(1000.0));
        -268435439;
    }
    #d = v103;
}
C104.constructor = f56;
new C104(C104, v103);
class C127 extends Array {
    16 = 4;
    268435440;
}
new C127();
Number.isFinite();
function F131(a133) {
    if (!new.target) { throw 'must be called with new'; }
    const v134 = this.constructor;
    v134.prototype;
    try { new v134(); } catch (e) {}
}
