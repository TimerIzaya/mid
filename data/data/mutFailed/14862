let v3 = -1072920722n;
v3--;
268435441n <= 268435441n;
const v8 = 7n + v3;
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    a11 >> a11;
    let v16;
    try { v16 = this.propertyIsEnumerable(a12); } catch (e) {}
    v16 || v16;
    try {
        this.h = "c";
    } catch(e18) {
    }
    try {
        this.f = "Hn";
    } catch(e19) {
    }
}
const v20 = new F9(268435441n, F9, v3, v3, "c", "26522", v3);
const v21 = new F9(7n, v20, v3, 7n);
v21.b = v21;
const v22 = new F9(v3, F9, v3, v3);
const v23 = v22.f;
v22.h = v22;
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
    -a26;
    const v30 = this?.constructor;
    v30.length = v30;
    try { new a27(7n, a27); } catch (e) {}
    a26 == a26;
    a27--;
    try {
        this.g = v20;
    } catch(e34) {
    }
    try {
        this.h = v21;
    } catch(e35) {
    }
    try {
        this.a = "Hn";
    } catch(e36) {
    }
}
const v37 = F24?.constructor;
let v38;
try { v38 = new v37("c"); } catch (e) {}
new F24(268435441n, 268435441n);
const v40 = new F24(7n, 7n);
v40.length;
const v42 = new F24(268435441n, 7n);
4046 >> 4046;
try { new BigInt64Array(v42, 4046, BigInt64Array); } catch (e) {}
const v48 = new BigInt64Array(4046, BigInt64Array);
function f51(a52, a53) {
    const v54 = a52++;
    let o56 = {
        "d": v8,
        ...a52,
        get a() {
            return v23;
        },
    };
    [,...o56] = v48;
    a53[4046];
    const o60 = {
        "maxByteLength": 3035,
    };
    o60.e = o60;
    new ArrayBuffer();
    const v64 = new Float32Array();
    try { v64.copyWithin(v54, 115); } catch (e) {}
    return 115;
}
f51(4046, -65537);
v38(4046, 4046);
