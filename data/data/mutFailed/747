new Uint8ClampedArray(3672);
BigInt64Array.prototype = BigInt64Array;
new BigInt64Array(820);
new Uint32Array(1024);
const v12 = new Int16Array(1);
const v13 = v12[0];
103 | 103;
new BigInt64Array(103);
10 / 10;
new Int8Array(10);
let v22 = 12;
v22--;
const v25 = [v22,v22];
function f26(a27) {
    try { v13(820, v13); } catch (e) {}
    const v29 = /(ab|cde)\118\P{sc=Greek}+/gdims;
    v29.exec(v29);
    return v25;
}
Object.defineProperty(v25, "toString", { value: f26 });
try { v25.every(v12); } catch (e) {}
const v32 = [v22,v25];
class C33 {
    constructor(a35, a36) {
        try { this.constructor(a35, Int8Array); } catch (e) {}
        new Uint16Array(a35);
    }
}
C33.e = C33;
const v39 = new C33(v32);
const v40 = v39?.isPrototypeOf;
try { new v40(v39); } catch (e) {}
