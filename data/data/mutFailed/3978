function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 536870888;
    } catch(e3) {
    }
    try {
        this.g = 536870888;
    } catch(e4) {
    }
    try {
        this.length = 536870888;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v13 = 48 + 48;
const v15 = new Int16Array(48);
1701 % 1701;
try { new Uint32Array(Uint32Array, v6, 48); } catch (e) {}
const v20 = new Uint32Array(1701);
1194 * 1194;
const v24 = Float32Array.prototype;
try { new Float32Array(F0, F0, F0); } catch (e) {}
v20 in v15;
try {
    v8.valueOf = v24;
} catch(e27) {
}
new Float32Array(1194);
257 * 257;
const v34 = [257,257,257,55852,2];
try { v34.findLast(v13); } catch (e) {}
try { v34.find(v34); } catch (e) {}
function f38(a39) {
    function f41(a42) {
        try { new a39(f41, ...v15, f41, a39, a42, a42); } catch (e) {}
        this instanceof Float32Array;
        try {
            this.length = 1073741825;
        } catch(e46) {
        }
        v34["entries"]();
    }
    this.arguments = f41;
    return f41;
}
f38.ignoreCase = f38;
let v49;
try { v49 = f38(f38); } catch (e) {}
try { v49(v7); } catch (e) {}
const v52 = Worker?.constructor;
try { new v52(2); } catch (e) {}
const o55 = {
    "d": "function",
};
const v56 = new Worker(f38, o55);
try { v56.terminateAndWait(); } catch (e) {}
