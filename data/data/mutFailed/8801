const v4 = new Set();
const v5 = [v4,-988321.7498549824];
const v6 = [v5];
const v7 = [-988321.7498549824,v6,Set,-988321.7498549824];
[-988321.7498549824];
const v9 = [v5];
const v10 = [v4,v7,v6,Set,v9];
function f14() {
}
const v15 = f14();
let v17 = 5;
v17++;
const v19 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v21 = new Uint32Array();
v21.cause = v9;
let v22 = -6n;
const v23 = v22--;
const v24 = [601759695];
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        [WeakSet,WeakSet];
        return v25;
    }
    f26();
    %OptimizeFunctionOnNextCall(f26);
}
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    function f37() {
        function f38(a39) {
            f14();
            const o44 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o44);
            return a35;
        }
        return f38;
    }
    function f46(a47) {
        const v49 = new Date();
        const v51 = new Set();
        v51.add(v49);
        let [v53,,...v54] = v51;
        v53.setUTCMilliseconds();
    }
    Object.defineProperty(a33, "constructor", { configurable: true, get: f37, set: f46 });
    a33.cause = f14;
    const v56 = a33.constructor;
    v56.BYTES_PER_ELEMENT = v10;
    v56.BYTES_PER_ELEMENT = v56;
    %VerifyType(v56);
    delete v10?.length;
    try {
        f32(a34, "4", true, a33);
    } catch(e61) {
    }
    try { v56(); } catch (e) {}
    let v64 = arguments.length;
    let v65 = v64++;
    v65--;
    function f67() {
        let v69;
        try { v69 = ("Vre").toLocaleLowerCase(); } catch (e) {}
        try { v69.padStart(); } catch (e) {}
        const v71 = ("Vre").charAt();
        v71[0] = v71;
        let v72;
        try { v72 = ("Vre").codePointAt(); } catch (e) {}
        v72 === v72;
        Float64Array.prototype = Float64Array;
        v19.length;
        const o94 = {
            "c": v22,
            "a": v72,
            [v23](a77, a78) {
            },
            [v23](a80, a81, a82, a83) {
                eval();
            },
            "c": v24,
            valueOf(a87, a88) {
            },
            1073741824: v21,
            [v22](a90, a91, a92, a93) {
            },
            "arguments": v17,
            256: a36,
        };
    }
    try { f67(); } catch (e) {}
    f67();
    try { Array(arguments); } catch (e) {}
    const v99 = Array(a36);
    v99[0] = v99;
    try { v99.findLast(); } catch (e) {}
    const v102 = new Uint8Array();
    try { v102.lastIndexOf(v17); } catch (e) {}
    const t99 = v102.buffer;
    t99.constructor = f14;
    try { Int32Array(); } catch (e) {}
    const v107 = new Int32Array();
    v107[3];
    for (let v109 = 0; v109 < 5; v109++) {
        const v110 = v109 !== v109;
        v110 || v110;
    }
    %OptimizeFunctionOnNextCall(f67);
    v102[0];
    function F113(a115, a116, a117, a118) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F113(65536, v15);
    try { v30["find"](..."find", a36, ...v24, ...v30, ...522675525n); } catch (e) {}
}
for (let v122 = 0; v122 < 10; v122++) {
    f32(v21);
}
%OptimizeFunctionOnNextCall(f32);
f32(v17);
