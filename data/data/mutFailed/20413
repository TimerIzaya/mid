const v2 = -Infinity;
class C6 {
    toString(a8, a9, a10, a11) {
        this.b += a11;
        typeof v2;
        a11 === "bigint";
        return 4n;
    }
    n(a16, a17, a18) {
        let v19;
        try { v19 = a18.getUTCSeconds(-41559n, v2, a16); } catch (e) {}
        [-1937962817n,-1000000000.0,a16];
        let v21;
        try { v21 = new v19(); } catch (e) {}
        -1937962817n | v21;
        return v2;
    }
}
const v26 = new C6();
const v27 = new C6();
const v28 = new C6();
class C29 {
    268435441 = v2;
    static valueOf(a31, a32, a33, a34) {
        let v35 = 0;
        do {
            var d = v27;
            v35++;
        } while (v35 < 3)
        return a34;
    }
}
new C29();
new C29();
const v44 = new v28();
const v48 = [-20857,-1303616328,-1864740753,-1023402966,129,-20506,7,8229,-53914];
v48[2] = v48;
let v50 = undefined;
const o54 = {
    set b(a53) {
    },
};
v50 = o54;
o54.f = o54;
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this?.constructor;
    v57.d = v57;
    try { new v26(); } catch (e) {}
}
new F55();
const v60 = new F55();
function f61(a62, a63) {
    const o70 = {
        n(a65, a66) {
            new Int8Array(1342);
        },
        "a": v60,
    };
    return a63;
}
new Uint16Array(v44);
%PrepareFunctionForOptimization(f61);
f61().n();
%OptimizeFunctionOnNextCall(f61);
f61();
