class C2 {
    static {
        for (let v4 = 0; v4 < 25; v4++) {
            const v5 = [601759695];
            const v6 = [1073741824,1073741823,1376142744,1073741825];
            function f8(a9, a10, a11, a12) {
                try { new a9(); } catch (e) {}
                a11 << a11;
                function f16() {
                    return a9;
                }
                const v18 = new Int8Array();
                const v21 = BigUint64Array * 536870887;
                v21 - v21;
                Number.isNaN(v21 ** v21);
                function f26(a27, a28) {
                }
                try { f26(); } catch (e) {}
                const v30 = v18.buffer;
                const v31 = v30.__defineGetter__;
                try { v31(); } catch (e) {}
                Object.defineProperty(v30, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f16);
                let v34;
                try { v34 = v6["find"](..."find", a12, ...v5); } catch (e) {}
                const o35 = {
                };
                o35.e = o35;
                v34 <= a11;
                return arguments;
            }
            for (let v37 = 0; v37 < 5; v37++) {
                f8(this, v37, v37);
            }
        }
    }
}
const v40 = new Int32Array(13);
const v43 = new BigUint64Array(16);
const v46 = new Uint16Array(2407);
class C47 extends BigUint64Array {
    get e() {
        const v50 = new Int8Array();
        v50.buffer;
        let v52 = /a\Sc?/giy;
        v52 >>= v52;
        const v54 = new Set();
        const v56 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0] >>> 16;
        const v59 = v56 >> -18321;
        Math.log1p(v56);
        Math.tan(v59);
        return v54;
    }
    get h() {
        super.with(2407, 13);
        this ^ 16;
        v43 < v40;
        return 13;
    }
    static c = v46;
    [16];
    [2407];
}
function f66() {
    return v46;
}
try { f66.bind(C47); } catch (e) {}
function F68(a70) {
    if (!new.target) { throw 'must be called with new'; }
}
new C47();
new C47();
new C47();
/(?:foo)\xf0\x9f\x92\xa9[(?:a+)*]/vims;
try { F68(); } catch (e) {}
function F78() {
    if (!new.target) { throw 'must be called with new'; }
}
const v80 = new F78();
function f81(a82) {
    return 1000.0;
}
v80.toString = f81;
Array[v80] = 731894.5693476209;
/(x)(x)(x)\2*/uimsy;
/A\1\2(a(?:\1(b\1\2))\2)\1DRK/vmy;
class C87 extends SharedArrayBuffer {
}
new C87();
