const v2 = new Int32Array(2147483648, Int32Array);
const t1 = 180;
const v5 = new t1(180);
const v9 = Array();
function f10(a11, a12, a13) {
    const o21 = {
        toString(a15, a16, a17) {
            a12 < v9;
            super[v5];
            return Array;
        },
        get d() {
        },
    };
    const v22 = o21.__lookupSetter__;
    [-5,2147483649,-4294967295,1,8,-4331,52354,15231];
    v2["unshift"]();
    const v26 = [-65535,268435440,9,-1295164600,63223,21408,1996471774,59877,-2147483648];
    function f27() {
        return f27;
    }
    function f28(a29, a30) {
        const o31 = {
            [a29]: v26,
        };
        return a30;
    }
    f28(f28);
    f28(f27);
    let v34;
    try { v34 = new v22(a11); } catch (e) {}
    return v34;
}
f10(f10(), Array, Array);
const v37 = new ReferenceError(1221);
Math.sin();
const v42 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const v44 = [-1.0,1.0,-875790.5323034594,0.22501948637268132,-0.0,-0.0];
function f45(a46, a47, a48, a49) {
    const v50 = Symbol.toPrimitive;
    Object.defineProperty(a46, v50, { configurable: true, enumerable: true, value: f45 });
    const o57 = {
        toString(a52, a53) {
            const v54 = a46 && Float64Array;
            function f55() {
                a52 *= v50;
                return Float64Array;
            }
            Object.defineProperty(v54, "valueOf", { value: f55 });
            v54 <= v42;
            return this;
        },
    };
    return o57;
}
f45(v44);
f45(Date, f10, v37);
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = Int32Array;
    } catch(e64) {
    }
}
new F60(180, 180);
new F60(ReferenceError, 2147483648);
new F60(ReferenceError, 2147483648);
new Uint32Array(9);
new Int32Array(1000);
new BigUint64Array(256);
const v78 = ["boolean","boolean"];
%PrepareFunctionForOptimization(v42);
let v79 = 0;
new Int8Array(v79, BigUint64Array, v79--);
function F83() {
    if (!new.target) { throw 'must be called with new'; }
    const v85 = this.constructor;
    try { new v85(v78, v85, "boolean", v85); } catch (e) {}
    try {
        this.d = v78;
        const v90 = v9.constructor;
        try { v90.call(-45095n); } catch (e) {}
        try { new v90("asinh", 1273259495n); } catch (e) {}
    } catch(e93) {
        class C95 {
            static [Set] = "boolean";
        }
    }
}
new F83();
new F83();
