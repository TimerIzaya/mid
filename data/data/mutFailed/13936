function f2() {
}
new Int16Array();
const v8 = new Map();
function f9(a10) {
    const o17 = {
        __proto__: v8,
        "f": v8,
        ...v8,
        [v8]: -6n,
        [-6n](a12, a13, a14, a15) {
            delete v8?.size;
        },
    };
    return a10;
}
const v18 = f9(v8);
const v19 = v18?.set;
try { new v19(-6n, v8); } catch (e) {}
const v21 = f9(-128n);
v21 ^ v21;
try { v21.m(v18, Map); } catch (e) {}
try { ("6Ct").indexOf(v18); } catch (e) {}
("6Ct").codePointAt(1000000000000.0);
class C31 {
}
try { new C31(); } catch (e) {}
const v33 = new C31();
v33[10] = v33;
for (let v36 = 0; v36 < 5; v36++) {
    const o39 = {
        o(a38) {
        },
    };
}
let v41;
try { v41 = new Float32Array(128, 128, 128); } catch (e) {}
v41.byteOffset;
const v43 = new Float32Array(239);
Float64Array.BYTES_PER_ELEMENT;
const v47 = new Float64Array(567);
v47[10] = v47;
const v49 = 1189 << 1189;
v49 + v49;
new Float32Array(1189);
function f53() {
    const v56 = Math.atanh("Vre");
    return v56 >> v56;
}
try { f53(); } catch (e) {}
const v59 = [7,128];
const v60 = v59?.__lookupSetter__;
try { new v60(f2); } catch (e) {}
try { v59.map(128); } catch (e) {}
class C63 {
}
class C64 {
    constructor(a66, a67) {
        const v68 = this?.__defineGetter__;
        try { new v68(C64, v59); } catch (e) {}
    }
}
try { eval(C64); } catch (e) {}
const v73 = ("boolean").constructor;
try { new v73(v43); } catch (e) {}
new Uint8ClampedArray(Date);
function f78(a79, a80, a81) {
    try { a79(); } catch (e) {}
    return a79;
}
const v83 = eval("p");
const v84 = new C64();
v84.length = v84;
const v85 = v84?.constructor;
try { new v85(C63, 239); } catch (e) {}
const v87 = new C64();
v87.length;
const v89 = v87?.constructor;
try { v89.call(v59); } catch (e) {}
1000000000000.0 && v83;
C63[239] >>>= 239;
function f92() {
    ~([-1.5424212036356715e+308]).shift();
    return 239;
}
%OptimizeFunctionOnNextCall(f92);
try { new v89(v87, 1189); } catch (e) {}
