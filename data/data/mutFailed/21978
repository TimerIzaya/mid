class C3 {
    constructor(a5) {
        a5[this] = 9007199254740991;
        super[63251] = a5;
        try {
            a5.toString = a5;
            const v8 = new BigInt64Array();
            function f9() {
                const v11 = v8[undefined] instanceof f9;
                const o12 = {
                };
                o12.h = v11;
                return BigInt64Array;
            }
            f9();
            f9();
        } catch(e15) {
        }
    }
    static #h = 0;
    static d;
    b = 0;
    static #c = 63251;
}
const v16 = new C3(9007199254740991);
new C3(v16);
const v18 = new C3(C3);
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a22;
    } catch(e23) {
    }
    try {
        this.a = a21;
    } catch(e24) {
    }
}
new F19(v18, 63251);
new F19(v18, 0);
new F19(v16, 9007199254740991);
class C28 {
    c = 9007199254740991;
    0;
    g = C3;
    static 1 = C3;
    static #b = 63251;
    static m(a30, a31, a32, a33) {
        try {
        } catch(e34) {
        }
    }
    static 4294967296 = F19;
    static 6;
    n(a36, a37, a38, a39) {
        new Date();
        return a36;
    }
    2782739894;
    static f = C3;
}
new C28();
new C28();
new C28();
const v47 = new Uint16Array(209);
const v48 = 209 > Uint16Array;
try {
    v47.__proto__ = v47;
} catch(e49) {
}
let v50 = 1829;
const v52 = new Uint8Array(v50);
Object.defineProperty(v52, v48, { writable: true, configurable: true, enumerable: true, value: v50 = 209 });
v52[8] = Uint16Array;
-10 ^ -10;
function f55() {
    -1585100583 >>> -1585100583;
}
const v60 = f55();
const v61 = f55();
function f62() {
}
class C64 {
    get a() {
        this ** v60;
        Object.defineProperty(this, 4294967297, { configurable: true, get: f62, set: f62 });
        const v68 = new Map();
        v68["has"](v61);
        return v68;
    }
    static #g = f62;
}
new C64();
let v72;
try { v72 = v50(); } catch (e) {}
try { v47.forEach(v72, v72); } catch (e) {}
new Float64Array(3916);
/(\xed\xb0\x80)\x01/vdsy;
/a[a-z]/vim;
