[-0.8389489539452804,-0.8389489539452804,2.8157651936034345,-0.8389489539452804];
const v7 = [0.6522428867400225];
[v7,v7,129n,-4294967296n,-44677n];
new isNaN(-4294967296);
try {
    Array(-2119616940, 0.6522428867400225);
} catch(e16) {
}
const v18 = new Uint8Array(3189);
new Uint32Array(1);
const v23 = new Uint8Array(v18);
function f24(a25, a26, a27, a28) {
    a25 / a25;
    const o33 = {
        get b() {
            const v31 = this.constructor;
            v31.getOwnPropertySymbols(v31);
            return v31;
        },
    };
    a26 < a26;
    const o43 = {
        "b": a25,
        ...v23,
        n(a36, a37) {
            new BigUint64Array(2147483647);
            new Int32Array();
            return this;
        },
    };
    class C45 extends Set {
    }
    try {
        new Float64Array(127);
    } catch(e49) {
    }
    return o43;
}
for (let v50 = 0; v50 < 625; v50++) {
    f24(f24, v50, v23, v50, v50);
}
