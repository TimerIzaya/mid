const v0 = [-2,3,-13,-528255738,-1749737169];
const v1 = [-5,35181];
let v2 = [-29435,-2899,9007199254740992];
class C4 {
    static #e;
    static g = v2;
    static #e;
    static set e(a6) {
        this > a6;
    }
    #b;
    static 6;
    n(a9, a10) {
        let v11 = 10;
        for (; v11--;) {
            try {
            } catch(e13) {
            }
        }
    }
    #valueOf(a15) {
        try { this.toString(this, v0, a15, a15, this); } catch (e) {}
        v2 %= v1;
        const v19 = this.constructor;
        v19.e = v19;
        function f20() {
        }
        f20.toString = f20;
        new f20();
        return "n";
    }
    #c = false;
    [false] = v0;
}
const v23 = new C4();
new C4();
const v25 = new C4();
function f26() {
    return v0;
}
class C27 extends f26 {
    949;
    #o(a29, a30) {
        super.length **= -v23;
        const v32 = [-9223372036854775808];
        function F33(a35) {
            if (!new.target) { throw 'must be called with new'; }
            try { a35.groupToMap(a35, F33, v32, this, F33); } catch (e) {}
            try {
                this.d = v32;
            } catch(e37) {
                for (let v38 = 0; v38 < 5; v38++) {
                }
            }
        }
        try {
            a29.#o(v2, v1, v25, v1, v23);
        } catch(e40) {
        }
        return a29;
    }
    constructor(a42, a43, a44, a45) {
        const v46 = this.constructor;
        try { new v46(v0, a44, a44); } catch (e) {}
        a43 >>> a43;
        -0.0 >>> -0.0;
    }
    static #b = v0;
    [f26];
}
const v51 = new C27();
new C27();
new C27();
function F54(a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
}
const v59 = new F54();
const v60 = new F54(F54, F54, v59);
for (let v62 = 0; v62 < 5; v62++) {
    const v63 = v59 || undefined;
    function f64(a65, a66) {
        return BigInt64Array;
    }
    for (let v68 = 0; v68 < 10; v68++) {
        f64(v51, v68);
    }
    Object.defineProperty(v63, v60, { value: v59 });
}
