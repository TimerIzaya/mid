class C3 {
    constructor(a5, a6) {
        a6 * a6;
        a6 >> a6;
        function F9(a11, a12) {
            if (!new.target) { throw 'must be called with new'; }
            const v13 = this.constructor;
            const v14 = /[a-zA-Z0-9]/gvisy;
            const v15 = /abc?/gvmy;
            v15[-2] ^= v14;
            const v17 = new Int16Array();
            const v18 = v17.lastIndexOf();
            let v19 = v18 - v18;
            v19--;
            try { new v13(F9, this, F9, v15); } catch (e) {}
        }
        const v22 = new F9(F9, F9);
        v22.constructor;
        Math.sign(10000);
        10000 >>> 780098.53077529;
        const v31 = new Int16Array(-2.0 >> -2.0);
        Int8Array.from(v31);
        -Math.round(a6);
    }
    #b;
    m(a37) {
        try {
            this.#b;
        } catch(e39) {
        }
        a37[this] = this;
        super[1073741825] = a37;
        let v43 = -84107.49302066129;
        const v44 = v43--;
        -1480054736 / this;
        Math.sqrt(-1480054736);
        v44 | this;
        return -1480054736 / this;
    }
}
let v49;
try { v49 = new C3(C3, -2.0); } catch (e) {}
new C3(C3, 780098.53077529);
const v51 = new C3(1073741825, -2.0);
const v52 = new C3(1073741825, -2.0);
const v53 = v52?.constructor;
try { new v53(v51, v49); } catch (e) {}
-13 === -13;
Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
Math.atan2(-988.8649474800335, 10000);
let v67;
try { v67 = new Int8Array(1, 1, C3); } catch (e) {}
v67[0] = v67;
new Int8Array(1);
let v69 = 10;
v69--;
new Float64Array(v69);
1336 / 1336;
const t57 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
t57.length >>>= -65536;
const v77 = [1000000000.0,-5.576877862296471e+307,1000000000000.0,-311382.1661484719,1000000000.0];
function f78() {
    return f78;
}
for (let i = 0; i < 5; i++) {
    Object.defineProperty(v77, "d", { configurable: true, get: f78, set: f78 });
}
try { new Uint16Array(v51, v51, Float64Array); } catch (e) {}
const v81 = new Uint16Array(1336);
v81[1001] = v81;
try { Math.tan(1336); } catch (e) {}
const v84 = Math.cos(Math);
v84 >>> v84;
