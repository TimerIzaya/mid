const v3 = [-2147483649,1073741823,-259526767,1073741823,1073741823];
const v4 = [-259526767,v3,v3,v3];
[v4];
[1,65535,2018513964,65537,-17858,-13];
[536870888,536870887,1024,-11154,6,5,257];
[128,1137680938];
class C9 {
    #valueOf(a11, a12, a13) {
        v3[Symbol.unscopables];
        new BigInt64Array(10);
        new C9(3768);
        const v25 = new v4(2659);
        let v26 = 0;
        do {
            this.d;
            v26++;
        } while (v26 < 4)
        return v25;
    }
}
new C9();
new C9();
new C9();
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 3;
    } catch(e38) {
    }
    try {
        this.f = 3;
    } catch(e39) {
    }
    try {
        this.h = -2147483649;
    } catch(e40) {
    }
}
const v41 = new F35();
const v42 = new F35();
const v43 = new F35();
v43.b = v43;
new Uint32Array();
const v49 = new Uint32Array();
const v52 = new Float64Array(10);
v52[1] = v52;
class C53 {
}
const v54 = new C53();
const v55 = new C53();
const v56 = [v55,v54,v41];
function F57(a59, a60, a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    try { a59.entries(); } catch (e) {}
    const v64 = a60?.constructor;
    try { new v64(); } catch (e) {}
    const v66 = v41.unshift();
    v66 === v66;
    const v69 = new Set();
    function F70(a72, a73) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a72;
        } catch(e74) {
            for (let [v75,v76] of a72) {
                try {
                    v69.values();
                } catch(e78) {
                }
            }
        }
        try {
            this.h = v69;
        } catch(e79) {
        }
        try {
            const v80 = v69[this];
            try {
                new F70(v80, -268435456n);
            } catch(e83) {
            }
            this.b = Set;
        } catch(e84) {
        }
    }
    const v85 = new F70(Set, Set);
    new F70(Set, F70);
    const v87 = new F70(v85, F70);
    const v91 = [65537,268435441,63298,-5,1235122603];
    const v92 = [128,215394418];
    const v93 = v92.entries();
    const v94 = [-2,-4294967296,4294967297];
    function F95(a97, a98, a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v101 = new F95(-714582153, F95, -714582153, v92);
    const v103 = new F70(v87, null);
    new BigUint64Array(0);
    new Int32Array(1519);
    v101.length;
    const v111 = new F95(9, v101, 9, v94);
    v111.b = v111;
    new F95(1024, v111, v94, v94);
    const v120 = ("string").trimStart();
    v93[3];
    let v124;
    try { v124 = v120(); } catch (e) {}
    v91[v124] = v92;
    0 ^ 9;
    -1000 >>> ~9;
    v54.length - F95;
    a = 1000;
    v69[v111];
    v103.__proto__;
    -35417 - -35417;
}
const v138 = new F57(v56, v42);
new F57(v56, v49, v49, v138);
