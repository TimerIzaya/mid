const v0 = [];
class C1 {
    static #valueOf() {
        v0 - this;
        return this[2];
    }
    h = v0;
    static m() {
        C1.__proto__;
        const o9 = {
            "maxByteLength": 1833,
        };
        const v11 = new SharedArrayBuffer(C1, o9);
        new BigUint64Array(v11);
        return v11;
    }
}
const v14 = new C1();
const v15 = new C1();
new C1();
const v17 = /[Fa+b|c]/gvdm;
const v18 = /dRM(?:a*)*xyz?/ums;
const v19 = /\P{Decimal_Number}/gusy;
class C20 extends C1 {
    7;
    constructor(a22, a23, a24, a25) {
        super();
        a23.flags >>= C1.h;
        const v27 = v14[1];
        try {
            a23.g = v27;
        } catch(e28) {
        }
    }
    [-2] = v17;
}
new C20(v18, v19, v14, v18);
const v30 = new C20(v17, v18, v15, v18);
new C20(v17, v18, v30, v18);
class C33 {
}
new C33();
class C36 extends Set {
}
const t44 = C36.constructor;
t44(C36);
let v39 = 0.3050534209767637;
v39--;
new WeakMap();
const v44 = [BigUint64Array];
v44.pop();
const v47 = Math.__defineSetter__;
try { v47(); } catch (e) {}
Math.sinh();
const o50 = {
};
if (5) {
    function F51(a53, a54) {
        if (!new.target) { throw 'must be called with new'; }
    }
    for (let v55 = 0; v55 < 5; v55++) {
        function F56(a58, a59) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
}
const o60 = {
    ...v44,
};
