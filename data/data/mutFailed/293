const v0 = [-1.1660776947697242e+308,0.2977635103517431,-1000.0,2.0,Infinity,-1.7976931348623157e+308,-388.1934196462631,460.87256336989685,1.6193273512733374e+308,0.5179155436427904];
const v1 = [NaN,-1.7976931348623157e+308,4.236733455359319e+307];
const v2 = [3.3136631292119727,-0.0,NaN,-9.129237880053952e+307,652957.6034317545];
new Date();
let v5 = WeakMap;
function f6(a7, a8) {
    function F9(a11, a12) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.c = v1;
        } catch(e13) {
        }
        try {
            this.f = v1;
        } catch(e14) {
        }
        try {
            this.h = v1;
        } catch(e15) {
        }
    }
    new F9(a8, v0);
    new F9(v1, v2);
    new F9(v1, v1);
    return v0;
}
v5[Symbol.toPrimitive] = f6;
let v21;
try { v21 = v5(); } catch (e) {}
const v22 = new v5();
v22[128] = f6;
[NaN,382239.42175114923,1000.0,6.706575851762341e+307,0.0];
[0.6098948580811658];
[1000000000.0,-1000000.0,1000.0,0.9930125125264603,-9.951837187566075e+307,1e-15,Infinity,-1000000000000.0,NaN,1.0];
v22[128];
try { v0.toReversed(); } catch (e) {}
const o32 = {
    "maxByteLength": 1073741825,
};
const v34 = new ArrayBuffer(1, o32);
new Uint8ClampedArray(v34);
Uint8Array.valueOf = f6;
Uint8Array.length = Uint8Array;
let v40 = 0.5430760373116464;
const v41 = Math.cosh(v5);
const v42 = v5++;
v42 % v42;
class C44 {
    constructor(a46) {
        let v47 = "atan2";
        try { a46[v47](); } catch (e) {}
        v47++;
    }
}
~v42;
++v40;
const v52 = new Uint8Array(1024);
v52.constructor = Date;
const v54 = v52.reverse()?.constructor;
if (v54 >= v21) {
    new Date();
} else {
    let v63 = 10 << 10;
    --v63;
    --v63;
    function F67(a69, a70) {
        if (!new.target) { throw 'must be called with new'; }
        const v71 = this.constructor;
        try { new v71(a70, -418967591n); } catch (e) {}
        a70 == a70;
        a69 !== a69;
        this.g = a70;
    }
    const v75 = new F67(F67, -418967591n);
    const v76 = new F67(v75);
    v76.constructor;
    -v41;
    Math.log10(-v41);
}
try { new v54(1024, Uint8Array, Uint8Array); } catch (e) {}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F0;
    try {
        this.c = 0;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
function f16() {
    const o20 = {
        257: 268435439,
        "prototype": "o",
        "a": "bigint",
        __proto__: "o",
    };
    return o20;
}
const v21 = f16();
f16();
const v23 = f16();
const v24 = [1000.0,-5.016087683444805,NaN,-1000.0];
const v25 = [-745.7220723324123,0.21018301473003975,1.7976931348623157e+308,0.3859496770590838,-2.220446049250313e-16,-1.6133346593342317,-4.0,NaN,7.9252585356615874,-Infinity];
function f26(a27, a28, a29) {
    const o30 = {
        __proto__: v25,
    };
}
f26(v21, v21, v24);
f26(v21, v23);
f26(v23, v21);
const v35 = new Set();
const v36 = [-4294967297,-4096,512,-3,-256,-12,-55546,-1279933634,-4294967295];
const v37 = [-2147483649,-536870912,48907,-2147483647];
[-2147483647,-574757603,-41008,1073741824];
const v40 = Date.constructor;
function f41(a42) {
    let v43 = 16;
    class C46 {
        constructor(a48, a49, a50) {
            a48 === a48;
            const v52 = +Uint8ClampedArray;
            try {
                v43 = v52;
            } catch(e53) {
            }
        }
        static #b = Uint32Array;
        d;
        #h;
    }
    const v54 = new C46(4294967296, 4294967296, v43);
    function f55() {
        const v56 = [1073741824,1756196835,536870889,256,6,58443];
        const v57 = [NaN,-5.161337834188833e+307,NaN,-984.7986985006023];
        const v58 = v57.constructor;
        try { new v58(f55); } catch (e) {}
        class C60 extends v58 {
            [f55] = v58;
            b = v57;
            h = v56;
        }
        try { C60(); } catch (e) {}
        let v63 = -(-410.8373818683839);
        v63--;
        const v66 = new Int16Array(Int16Array, Int16Array, Int16Array);
        for (let v67 = 0; v67 < 25; v67++) {
            -(v67 >> v67);
            v66["p" >>> v67] = v67;
        }
        const v73 = ("function")?.toLocaleUpperCase;
        try { new v73(); } catch (e) {}
        const o85 = {
            valueOf(a76) {
                try {
                    this[a76] = this;
                } catch(e77) {
                }
                return this;
            },
            __proto__: v54,
            "c": f55,
            n(a79) {
                try {
                } catch(e80) {
                    function f81() {
                        const o84 = {
                            valueOf(a83) {
                            },
                        };
                    }
                }
            },
        };
        o85[10];
    }
    return v23;
}
v40[Symbol.toPrimitive] = f41;
Date.now();
class C90 {
    c = v35;
}
new C90();
v35[Symbol.species] = C90;
Date();
new Uint16Array();
new Int8Array();
new Float64Array();
Float32Array.name = Float32Array;
const v102 = new C90();
let v104 = 0.610266531079643;
v104--;
class C108 {
    [-1248835410n] = 268435456n;
}
C108.name = C108;
function f109(a110, a111, a112) {
    const o113 = {
        "a": Date,
        [v40]: v24,
        ...Symbol,
    };
    o113[1];
}
f109(v37, v102, 0.34535591904858587);
f109(v36);
-57641.03148885199 ^ -57641.03148885199;
class C120 {
    static [38567] = -57641.03148885199;
}
const v121 = new C120();
function f122() {
    [1000,"nfN"];
    return 257;
}
v121.toString = f122;
const v126 = new C120();
[-2.0,-Infinity,1.762696690706525e+307,4.561012756948999e+307];
const v129 = [4.0,6.789772630191657e+307,1.7976931348623157e+308,1.7976931348623157e+308,-2.0,0.06136428089954615,1000000.0,-1.4205107913505,-1.730047930360128e+308,-7.329935897040107];
const v130 = [6.929526887701016,-252289.71684125415,0.0,-5.0,1000000000000.0,-1000.0];
try { v130.map(); } catch (e) {}
function F132(a134, a135, a136, a137) {
    if (!new.target) { throw 'must be called with new'; }
    const v138 = this.constructor;
    try { new v138(-57641.03148885199, a135); } catch (e) {}
    a136 ^ a136;
}
new F132(v126, v129);
new F132(v121, v130, v121);
const o147 = {
};
o147.type = Set;
gc(o147);
new Int16Array();
