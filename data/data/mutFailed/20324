new Int32Array(147);
const o4 = {
};
o4.constructor;
const o7 = {
    ...Int32Array,
    get d() {
        return this;
    },
};
new Uint16Array(3);
new Int32Array(3);
let v14 = "mSS";
(3).ceil(++v14);
class C18 extends Array {
}
Math.atan2(147, -9);
const v23 = [-3.658340648235961e+307,448383.7005262254,1e-15,1e-15,-194.61930619535894,-89393.11449571606,-719215.112220642,694.9417266491937];
const o24 = {
    "execution": -9,
    "type": v23,
};
[0.4391436918300139,9.677012907460562e+307,2.2250738585072014e-308,-2.220446049250313e-16,68.1253498768067,-3.0];
[-2.0,-2.695961293116726,-5.0,Infinity,1.7976931348623157e+308];
[0.9334664264940868,3.0,1000000000.0,733.9924059860705,4.479733583245014e+307,-1000000000.0];
const v29 = [];
function f30() {
    const o45 = {
        toString() {
            let v33 = new Float64Array(-9);
            v33 ^= this;
            for (let v35 = 0; v35 < 5; v35++) {
                function f36() {
                    let v38 = ("Vre").codePointAt(v35);
                    const v40 = v38 * v38--;
                    v40 / v40;
                    return f36;
                }
                f36();
                %OptimizeFunctionOnNextCall(f36);
            }
            super[this];
        },
        ...v29,
        n() {
            return this;
        },
    };
    try { o45.n(); } catch (e) {}
    return v29;
}
%PrepareFunctionForOptimization(f30);
const v47 = [-65535,536870889,4096];
const o49 = {
    get f() {
        return this;
    },
};
function f50(a51, a52, a53, a54) {
    return f50;
}
Object.defineProperty(o49, "f", { enumerable: true, get: f50 });
for (const v55 in v47) {
    function f57() {
        "Vre" == "Vre";
        return f57;
    }
    f57();
    %OptimizeFunctionOnNextCall(f57);
    const v62 = Math.log10(v55);
    new Int16Array(3);
    ("29753").replaceAll("29753");
    ([3.0,-1.5434910396300392e+308]).entries();
    v62 ** 1000000000000.0;
}
f30();
f30();
%OptimizeFunctionOnNextCall(f30);
f30();
