function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        const o3 = {
        };
        return this;
    }
    this[Symbol.toPrimitive] = f2;
    this.c = this;
    try {
        this.c = 19793;
        const v8 = Array(19793);
        v8[6655] = F0;
        for (const v9 of v8) {
        }
        const v10 = [];
        v10[Symbol.toPrimitive] = f2;
        v10[Symbol.toPrimitive] = Array;
        const v15 = [v10,v10,v10];
        v15[Symbol.toPrimitive] = Symbol;
        const v18 = [v15,v15];
        Uint16Array.toString = Array;
        v18 >= Uint16Array;
    } catch(e21) {
    }
    try {
        this.b = 19793;
    } catch(e22) {
    }
}
new F0();
const v24 = new F0();
const v25 = new F0();
class C26 {
    [v24] = v25;
    set b(a28) {
        v24[1];
        v25.b;
        const v33 = [991.721527488573,-290835.2265090322];
        const v39 = ("-1723624938").slice(9, "g").normalize();
        try { v39.substring(v33, WeakMap); } catch (e) {}
        Math.acosh(a28);
        const v42 = ~v24;
        -v25 ^ v42;
    }
    static g = F0;
}
new C26();
new C26();
new C26();
/eP\xf0\x9f\x92\xa9/usy;
/H(ab|cde)\1/guiy;
new Float64Array(3341);
0 * 0;
/2^xxx$Ge/gusy;
function f60(a61, a62, a63, a64) {
    Object.defineProperty(a61, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f60 });
    const o71 = {
        toString(a68, a69) {
            new Date(a61);
            return this;
        },
    };
    return o71;
}
const v72 = f60(Date);
try { v72.toString(); } catch (e) {}
