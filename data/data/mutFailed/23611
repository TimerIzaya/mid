[10,536870912,-908723154,-1024,3154,16,4];
const v1 = [-65537,-12,-2147483649,5,10032,17229,-2,-39674];
const v2 = [2,536870888];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 0.6594118996517957;
    } catch(e10) {
    }
    const t9 = this.constructor;
    new t9();
    function f13() {
        return f13;
    }
    try {
        class C14 extends f13 {
            #h = f13;
        }
        new C14();
        new C14();
    } catch(e17) {
    }
    try {
        this.f = v1;
    } catch(e18) {
    }
}
const v19 = new F6(v2, 0.6594118996517957);
const v20 = new F6(v19, v2);
new F6(v20, 172.87142829897243);
const v26 = new Int32Array(48342);
for (const v27 of v26) {
    const v29 = new Date();
    v29.getHours();
    typeof 522675525n;
}
new Int8Array(2300);
Symbol.toPrimitive;
const v37 = [-768400.1657361139];
class C38 {
}
const v39 = new C38();
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    try { new v45(a43, a44); } catch (e) {}
    -a42;
    a44 | a44;
    try {
        this.e = v39;
    } catch(e49) {
        a44 - v37;
    }
}
new Int32Array(7);
new BigUint64Array(6);
const v57 = new Float32Array();
for (let v58 = 0; v58 < 25; v58++) {
    function f59(a60, a61, a62, a63) {
        a60[1];
        a61--;
        a60[0] = a60;
        a61 <= a61;
        arguments[1] = arguments;
        const v68 = arguments?.__lookupGetter__;
        try { v68.constructor(v57, a62, v58, f59); } catch (e) {}
        let v70;
        try { v70 = v68(v68, f59, a61); } catch (e) {}
        return v70;
    }
    for (let v71 = 0; v71 < 10; v71++) {
        f59(v57);
        new Set();
        function f75() {
            function F76() {
                if (!new.target) { throw 'must be called with new'; }
                for (let v78 = 0; v78 < 10; v78++) {
                    "p" + v78;
                }
            }
            new F76();
        }
    }
}
