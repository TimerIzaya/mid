function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -65536;
    } catch(e3) {
    }
    try {
        this.d = -65536;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new v5();
const v7 = new F0();
const v9 = [v7,v7,v5];
[v9,[v9,v7,v7,F0],null];
function f12() {
    return F0;
}
[1223499781];
[0];
[40553,256,-1310466385,-2,-6,23135,1,-5,268435456,715123365];
let v17 = [];
function f18(a19) {
    const o23 = {
        ...v17,
        ...v17,
        "f": a19,
        set c(a21) {
            a19[this != v6] <<= a21;
        },
    };
    return o23;
}
f18();
[v17] = "2lZu";
%PrepareFunctionForOptimization(f18);
f18(f18);
%OptimizeFunctionOnNextCall(f18);
f18();
class C3 {
    #b = -1.7976931348623157e+308;
    d = 26476;
    #o(a5) {
        function f6() {
            return a5;
        }
        return -1.7976931348623157e+308;
    }
    [26476];
    3144726779 = -1.7976931348623157e+308;
    [-1.7976931348623157e+308] = -1.7976931348623157e+308;
}
const v7 = new C3();
const v8 = new C3();
const v9 = new C3();
v9[3144726779];
536870888 >>> 536870888;
const v15 = [Infinity,-1000000000.0,-1000.0,0.616770467362187,0.996519810461017,227777.0879711986,-6.650971445146981e+307];
new BigInt64Array();
const v21 = new v7();
const v24 = new Int8Array();
("e35").strike();
let v31 = 16;
v31++;
const v33 = v31 ^ v31;
v33 & v33;
const v37 = new Set();
const v38 = v37.delete(512);
function f39() {
    return f39;
}
f39.constructor;
f39();
-1600745002 % -1600745002;
!2;
new Int8Array();
const v47 = new Int8Array();
let v48 = v47[161];
v48--;
let v51 = ([-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456]).push();
const v52 = v51++;
v52 / v52;
const v55 = ([-21059]).groupToMap;
let v56;
try { v56 = v55(); } catch (e) {}
Object.defineProperty(v55, "d", { writable: true, enumerable: true, value: "e35" });
v55.d = v55;
let v57;
try { v57 = new v55(); } catch (e) {}
[];
[-409.5445341345936,-409.5445341345936];
const o65 = {
};
[288.9075242979261,,v15,[v24,v38,v57]];
const v69 = new Date();
v56?.[130];
v69.setMonth();
const v72 = v21[65535];
try { v72.trimStart(); } catch (e) {}
const o76 = {
    "execution": "sync",
};
gc(o76);
const v78 = v15?.values;
try { new v78(); } catch (e) {}
const v80 = [619.1440398410084];
[-7.418942594267617,-1000.0,-1000.0,8.825538634100187,-474.21832611247953,1.6522426920059043e+307,1.0,1e-15,-8.279637942258024];
const v83 = new Set();
[75277.92503252462,-2.9628587561702453,997000.7431874245,1000000000000.0,-3.0,-1000000000.0,5.924389041780332,1e-15];
const v85 = [-943690.5037993332,-2.220446049250313e-16];
try { v85.map(v8); } catch (e) {}
-13 * -13;
2147483647 + 2147483647;
function f92() {
}
class C93 {
    [Set];
    4;
}
const v94 = new C93();
v94[4] = v94;
const v95 = new C93();
v94.__proto__?.__lookupGetter__;
try {
const t0 = 1073741824;
new t0(v80);
} catch (e) {}
let v100 = -3;
class C102 {
    static toString(a104, a105) {
        a104[1] += 6;
        a104?.[6];
        return a104;
    }
    get e() {
        try {
            super.h = this;
        } catch(e108) {
        }
        try {
            v100 |= -268435456;
        } catch(e109) {
        }
        return this;
    }
}
C102.name;
C102.length = C102;
const v111 = new C102();
const v112 = v111?.constructor;
let v113;
try { v113 = new v112(); } catch (e) {}
const v114 = v113?.constructor;
try { new v114(); } catch (e) {}
v113.b = v113;
const v116 = new C102();
const v117 = v116?.__lookupGetter__;
try { new v117(v113); } catch (e) {}
new C102();
let v121;
try { v121 = ("p").padEnd(v116); } catch (e) {}
try { v121.trimStart(); } catch (e) {}
const t123 = "40089";
t123[2] = "40089";
function F125() {
    if (!new.target) { throw 'must be called with new'; }
    const v127 = this?.constructor;
    try { new v127(); } catch (e) {}
}
const v129 = new F125();
const v130 = v129?.constructor;
try { new v130(); } catch (e) {}
const v132 = v129?.constructor;
let v133;
try { v133 = new v132(); } catch (e) {}
const v134 = v133?.constructor;
try { new v134(); } catch (e) {}
let v136;
try { v136 = new v132(); } catch (e) {}
const v137 = v136?.constructor;
try { new v137(); } catch (e) {}
("multiline")[-1];
try { Math.random(); } catch (e) {}
let v142;
try { v142 = Math.acosh(Math); } catch (e) {}
v142 - v142;
1.7976931348623157e+308 & 1.7976931348623157e+308;
const v146 = +1.7976931348623157e+308;
v146 / v146;
let v148 = Math.log1p(v146);
v148--;
v85[v83] = C93;
v95[v83] **= 2147483647;
