const v0 = /FN/vds;
const v1 = /(?:a+){0,0}([\cZ])/gudis;
const v2 = /xyz?/vdiy;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7(a8, a9) {
        new Float64Array(128);
        new Int16Array(13);
        new Float32Array(2);
        return 13;
    }
    a6.valueOf = f7;
    try {
        this.h = v1;
    } catch(e19) {
    }
    try {
        this.b = v1;
    } catch(e20) {
    }
    try {
        this.f = a6;
    } catch(e21) {
    }
}
function f22(a23) {
    Object.defineProperty(v2, 5, { value: a23 });
    class C24 {
    }
    const v25 = new C24();
    function f26(a27, a28) {
        const o29 = {
            __proto__: a27,
        };
        return v25;
    }
    return F3;
}
F3.toString = f22;
function f30() {
    return v0;
}
function f31(a32) {
    function F33(a35, a36, a37, a38) {
        if (!new.target) { throw 'must be called with new'; }
        class C46 {
            static {
                super[this];
            }
        }
    }
}
Object.defineProperty(F3, "f", { get: f30, set: f31 });
new F3(v2, v1);
const v50 = new F3(v0, v0);
new F3(v2, v0);
[v2,v50,[F3,v1]];
[v1];
class C55 extends F3 {
    static {
        const v57 = this.__proto__;
        function f58() {
            function F59(a61, a62) {
                if (!new.target) { throw 'must be called with new'; }
            }
            return F59;
        }
        v57.valueOf = f58;
        let v63 = this;
        Object.defineProperty(v63, "toString", { writable: true, configurable: true, value: f30 });
        %VerifyType(v63);
        v2[v57] += v57;
        Math[10];
        super.f &= C55;
        !v63;
        const v71 = --v63;
        Math.acos(5.819781081542626e+307);
        Math.hypot(5.819781081542626e+307);
        v71 | -1106351919;
    }
}
new C55();
new C55();
const v77 = new C55();
const v78 = [];
v78[6] = v77;
v78[6] = 4294967295;
