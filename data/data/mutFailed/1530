const v2 = new Int16Array(1024);
const v5 = new Uint16Array(1);
const v8 = new Int16Array(2259);
const v11 = new Int8Array(257, 1024);
new Float64Array(7);
const v17 = new Int32Array(-9007199254740991);
try { v8.findIndex(Int16Array, v2, v5, Uint16Array); } catch (e) {}
v17[268435456] = Int32Array;
v8[7] = Int8Array;
for (let v19 = 0; v19 < 32; v19++) {
    v17[2634537784] = 1024;
    v8[v19] = 257;
    const v21 = Symbol.unicode;
    const o30 = {
        [v21]() {
            let v23 = 10;
            const o29 = {
                next() {
                    v23--;
                    const v27 = v23 == 0;
                    const o28 = {
                        "done": v27,
                        "value": v23,
                    };
                    return o28;
                },
            };
            return o29;
        },
    };
    v17["p" + v19] = v19;
}
const v33 = [];
function f34() {
    return ("YZmA")[Symbol.toStringTag];
}
Object.defineProperty(v33, "toString", { writable: true, configurable: true, value: f34 });
class C40 {
    constructor(a42, a43) {
        a42.valueOf = Date;
        Date | a42;
        super.h = v5;
        Int8Array / Int16Array;
        Date();
        %PrepareFunctionForOptimization(Date);
        const v47 = Date();
        Date();
        %OptimizeFunctionOnNextCall(Date);
        Object.defineProperty(v11, "h", { writable: true, configurable: true, enumerable: true, value: a43 });
        try {
            new Int8Array(v47);
        } catch(e50) {
        }
        Date();
    }
}
for (let i53 = 0; i53 < 8; i53++) {
    const v60 = Symbol.iterator;
    const o69 = {
        [v33]: v2,
        "c": v60,
        __proto__: v5,
        "d": v60,
        "g": v60,
        [v60]() {
            let v62 = 10;
            const o68 = {
                next() {
                    v62--;
                    const v66 = v62 == 0;
                    const o67 = {
                        "done": v66,
                        "value": v62,
                    };
                    return o67;
                },
            };
            return o68;
        },
    };
}
new C40(v33);
