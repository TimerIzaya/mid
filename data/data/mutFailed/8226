function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a10;
    } catch(e12) {
        async function f13(a14, a15, a16, a17) {
            [3.0,Infinity,-0.0,-1.5918534910653719,0.5781956927279348,-1000000000000.0];
            const v19 = [-1.5358469668728899e+308,0.3736969226423479,0.36622614651340113];
            [2.0,-1.7976931348623157e+308,-5.660623063285071,441491.73429585644,1.1293480985690321e+308,0.47337658867436583];
            await v19;
            return v19;
        }
        f13(e12, 512, e12, 512);
    }
    try {
        this.h = a11;
    } catch(e23) {
    }
    try { ("bigint").trimLeft(); } catch (e) {}
    const o27 = {
        "maxByteLength": 2198663476,
    };
    const v29 = new SharedArrayBuffer(257, o27);
    new Int32Array(v29);
}
new F6("bigint", 4294967297, 512, 1000);
new F6("bigint", 1000, 4294967297, 1000);
new F6("p", 4294967297, 1000, 4294967297);
function f35() {
    return 512;
}
class C36 {
    constructor(a38, a39) {
        function f40(a41) {
            const v42 = [536870887,-42204,-17288903,-3,9007199254740991,7];
            const v43 = [6,268435440,13,1073741825];
            function f44(a45, a46) {
                const o47 = {
                    "c": v43,
                };
                return o47;
            }
            f44(v42, v42);
            let v49 = 0;
            v49++;
            return f40 - this;
        }
        ("undefined").localeCompare("undefined", "symbol", "undefined");
        const o57 = {
            "type": "function",
        };
        new Worker(f40, o57);
    }
}
new C36(C36, C36);
new C36();
