class C3 {
    constructor(a5) {
        const v6 = this?.constructor;
        try { new v6(this); } catch (e) {}
        4294967296 / this;
        const v13 = Math.fround(4294967296);
        v13 >> v13;
        const v15 = !v13;
        v15 && v15;
        Math.acosh(4294967296);
    }
    static #e = C3;
}
C3.name = C3;
const v18 = new C3("129");
v18.length = v18;
const v19 = new C3(v18);
new Date();
class C22 {
}
const v23 = new C22();
[v23,"-65537"];
v19.length;
new C3(1.7976931348623157e+308);
for (let i = 0; i < 10; i++) {
    const o29 = {
        "a": 16n,
        1: 16n,
        257: undefined,
    };
}
const v32 = new C3(34);
v32.b = v32;
512 >> 512;
class C36 {
}
C36.name;
class C39 {
    toString(a41, a42) {
        const v43 = `7${this}dm${a42}m`;
        function F44(a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F44(F44(), "unicode", v43);
    }
}
new C3(512);
try {
} catch(e54) {
} finally {
}
function f57(a58) {
    const o61 = {
        ...a58,
        5: 65536,
        __proto__: a58,
        valueOf(a60) {
        },
        "d": 4,
        "g": 65536,
        163: 4,
    };
}
f57();
Object(Object).toExponential(16);
2548 - 2548;
new Int8Array(34);
class C70 {
    constructor(a72, a73) {
        try {
            this.fuck(C3, "function");
        } catch(e76) {
            e76.name;
        }
    }
}
const v78 = new C70();
"129" % !v78;
