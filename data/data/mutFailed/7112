new Int16Array(256);
new Uint32Array(2739);
new Int32Array(2);
[WeakSet,WeakSet,WeakSet,WeakSet];
function f12(a13, a14, a15, a16) {
    class C18 {
        static ["-2"];
    }
    return "-2";
}
%OptimizeFunctionOnNextCall(f12);
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v24 = new Float32Array(2);
const v25 = new Int32Array(v24, 2);
const v26 = v24;
v25.fill(...v26);
new Float64Array(15);
function f30() {
    const o32 = {
        get b() {
            return f30;
        },
    };
    return o32;
}
class C33 extends f30 {
    constructor(a35) {
        super();
        for (let v36 = 0; v36 < 25; v36++) {
            this["p" + v36] = v36;
        }
    }
}
new Float64Array(11);
new Uint16Array(6);
function F44() {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F44();
const v48 = new Date();
const v51 = new Int16Array(2183);
let [v52,v53,...v54] = v51;
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
}
function f59() {
    return Date;
}
const v62 = new Int16Array();
const v63 = new Int16Array();
v63.toString = f59;
const v64 = new Int16Array();
class C65 {
    [v63];
    #toString(a67, a68, a69) {
    }
    [3.2255150730772826] = v62;
    188 = Int16Array;
    static 3865;
    4 = v62;
    #g = C65;
}
try { C65.call(v62); } catch (e) {}
const v71 = new C65();
function f72() {
    const t67 = "symbol";
    t67[v62] = v64;
    class C74 {
    }
    const v75 = C74();
    const v76 = C74();
    function f77(a78, a79) {
        const o88 = {
            [-943.3768400471749]: v76,
            [a79](a81, a82, a83) {
            },
            p(a85, a86) {
                this.toString(a86, this, v75);
                return -943.3768400471749;
            },
        };
        return o88;
    }
    return v71;
}
v46.toString = f59;
try { Reflect.set(v48, v46); } catch (e) {}
