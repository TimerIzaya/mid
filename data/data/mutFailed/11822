const v0 = [];
class C1 {
    constructor() {
        let v2 = this;
        function f3(a4) {
            for (const v5 of v0) {
            }
            return v2;
        }
        v2.toString = f3;
        v2 ||= v2;
        256 + 256;
        const o9 = {
            "maxByteLength": 256,
        };
        o9.maxByteLength;
        const v12 = new ArrayBuffer(256, o9);
        Int32Array.constructor = f3;
        const v14 = Int32Array?.constructor;
        try { new v14(C1); } catch (e) {}
        new Int32Array(v12);
    }
}
function f17(a18, a19) {
    a18[-1] = v0;
    return C1[a19];
}
C1[Symbol.toPrimitive] = f17;
const v23 = new C1();
const v24 = new C1();
v24.length = C1;
v24.length = v24;
const v25 = new C1();
const v26 = v25?.constructor;
function f27() {
    return Symbol;
}
function f28(a29) {
    var b = a29;
}
Object.defineProperty(v26, "toString", { writable: true, enumerable: true, get: f27, set: f28 });
try { new v26(); } catch (e) {}
try { ("string").codePointAt(v25); } catch (e) {}
const v35 = [v25,v24,"string","e"];
v35[3] = v35;
const v36 = [v24,"string",v35,"string",v35];
[v36,v36];
const v40 = new BigUint64Array(9);
v40[4];
new BigUint64Array(257);
Uint32Array.prototype = Uint32Array;
new Uint32Array(1);
const v48 = /xEz\xe2\x81\xa3/gumy;
v48.toJSON = BigUint64Array;
function f49(a50, a51, a52) {
    return v48;
}
try { f49(v36, 9, v23); } catch (e) {}
const v56 = ["function",v48];
const o57 = {
    "arguments": v56,
    "type": "function",
};
new Worker(f49, o57);
