new Uint8ClampedArray(129);
new BigInt64Array(127);
const v8 = 16 | 16;
const v10 = new Date(v8);
v10.setFullYear(Date, v10, v8);
class C12 extends Date {
}
const v13 = new C12();
new Float32Array(64);
const v19 = new Date();
function f20(a21) {
    return a21;
}
function f22(a23) {
    return f20;
}
const v26 = [v19];
const o27 = {
    "arguments": v26,
    "type": "function",
};
new Worker(f22, v13);
new Array(133);
const v35 = Array(4);
function f36(a37, a38) {
    return f36;
}
const v40 = C12.constructor;
try { new v40(); } catch (e) {}
try {
    new Int8Array(-45057);
} catch(e45) {
}
function f47() {
}
f47();
function f49() {
    return f49;
}
function f50() {
    return f49 == f50;
}
%PrepareFunctionForOptimization(f50);
const v52 = [v35];
const o75 = {
    "arguments": v52,
    "type": "function",
    2: C12,
    "b": Date,
    n(a54, a55) {
        class C64 extends Int32Array {
        }
        function F70() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C73 {
            static get b() {
            }
        }
        return f49;
    },
};
const v77 = [4294967296,-57202,256,48562,333990054];
v77.length = 1957281702;
try { Uint32Array.apply(2, v77); } catch (e) {}
new Worker(f36, o75);
