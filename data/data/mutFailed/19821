const v0 = -Infinity;
new BigUint64Array();
v0 & 9007199254740991;
new Array(1397);
new Array(9007199254740991);
new BigUint64Array(4096);
new Int16Array(162);
new Int16Array(11);
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v29 = 0; v29 < 25; v29++) {
    function f30() {
        return f30;
    }
    const v31 = [601759695];
    const v32 = [1073741824,1073741823,1376142744,1073741825];
    function f34(a35, a36, a37, a38) {
        function f40() {
            return a36;
        }
        try { new f40(); } catch (e) {}
        const v42 = f30();
        new Int8Array();
        const v46 = new Uint32Array();
        v46.c = v46;
        [v46];
        const v50 = BigUint64Array * 536870887;
        ~(v50 ** v50);
        function f53(a54, a55) {
            return v42;
        }
        f53();
        const v57 = a38.buffer;
        try { v57.slice(F24, F24); } catch (e) {}
        Object.defineProperty(v57, "constructor", { writable: true, configurable: true, value: Date });
        const v60 = new Int8Array();
        try { v60.lastIndexOf(-1073741824); } catch (e) {}
        v57.slice(2147483648);
        %OptimizeFunctionOnNextCall(f40);
        let v64;
        try { v64 = v32["find"](..."find", a38, ...v31, ...v32, ...522675525n); } catch (e) {}
        Symbol(a38);
        const o67 = {
        };
        v64 <= a37;
        return arguments;
    }
    for (let v69 = 0; v69 < 5; v69++) {
        f34(f30, v69, v69, v32);
    }
}
