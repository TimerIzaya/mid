function f3(a4) {
    Object.defineProperty(a4, "f", { writable: true, enumerable: true, value: a4 });
    a4.f = a4;
    const o15 = {
        ..."isConcatSpreadable",
        1073741824: a4,
        [a4]: "unicode",
        [a4](a6) {
            const v7 = a4.length;
            a6.trim(this, v7, ..."o", v7, ..."o");
            const t9 = "isConcatSpreadable";
            t9[a4] += v7;
            return a4;
        },
        ..."isConcatSpreadable",
        toString(a10, a11, a12) {
            a4 < this;
            return super[a4];
        },
    };
    o15[12];
    function f17(a18) {
        try { a18.toLowerCase(); } catch (e) {}
        try { new a18(a18, a18); } catch (e) {}
        WeakMap.prototype = WeakMap;
        new WeakMap();
        return a4;
    }
    const v23 = f17?.apply;
    try { new v23(o15, "isConcatSpreadable"); } catch (e) {}
    Symbol.unscopables;
    o15[Symbol.toPrimitive] = f17;
    const v29 = new Float64Array();
    v29.valueOf = f3;
    function f30() {
        Math.exp(v29);
        return Float64Array;
    }
    for (let i34 = 0; i34 < 6; i34++) {
        f30();
        %OptimizeFunctionOnNextCall(f30);
    }
    return o15;
}
f3(f3("o"));
const v44 = f3("isConcatSpreadable");
v44[4] = v44;
for (let v51 = 0; v51 < 5; v51++) {
    function f52() {
        let v54 = ("Vre").codePointAt(v51);
        -9223372036854775807 * v54--;
        return f52;
    }
    f52();
    %OptimizeFunctionOnNextCall(f52);
}
const v59 = Math.acosh(1073741825);
v59 << v59;
