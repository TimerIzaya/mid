function f0() {
    const o20 = {
        [5](a5) {
            try {
                this.b = f0;
            } catch(e6) {
            }
            return 5;
        },
        ..."symbol",
        ..."symbol",
        ["symbol"]: 5,
        set b(a8) {
            try { this["fill"]("fill"); } catch (e) {}
        },
        ["symbol"](a12, a13) {
            try { new a12(a13, a12); } catch (e) {}
            super[5];
            return delete this[6];
        },
    };
    return o20;
}
const v21 = f0();
const v22 = f0();
const v23 = f0();
class C24 {
    get g() {
        const o26 = {
        };
        const v27 = [601759695];
        const v28 = [1073741824,1073741823,1376142744,1073741825];
        function f29(a30, a31, a32, a33) {
            function f34() {
                v28.forEach(a31);
            }
            new Int8Array();
            for (let v38 = 0; v38 < 5; v38++) {
            }
            try { v28["find"](..."find", a33, ...v27, ...v28); } catch (e) {}
        }
        Object.defineProperty(v22, "h", { configurable: true, set: f0 });
        return v21;
    }
    static [v23] = v22;
    n(a42, a43) {
        const v47 = 268435439n ^ 268435439n;
        throw a42;
        return v47;
    }
    f;
}
try { new C24(); } catch (e) {}
const v49 = new C24();
v49.g;
const v51 = new C24();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this.constructor;
    let v58;
    try { v58 = new v57(); } catch (e) {}
    -429.3290910931888 << v58;
}
const v60 = new C24();
function f61() {
    return f0;
}
const v62 = [v49,C24];
const v63 = [v49,v62,v62,v62,v22];
v63[1] = v63;
const v64 = [f0,f0,v60,v21];
const o67 = {
    set b(a66) {
    },
};
const v69 = new Float32Array(Float32Array, Float32Array, Float32Array);
function f71() {
    return 160;
}
Object.defineProperty(v69, "h", { configurable: true, enumerable: true, get: f71 });
v64[3] = v64;
try {
    v51.valueOf = f61;
} catch(e72) {
}
const v73 = new f61();
const v76 = new Int8Array(114);
v76[59];
class C79 extends v64.constructor {
}
try {
    v60.d = v73;
} catch(e80) {
    for (let [v81,v82] of v73) {
    }
}
let v83 = 4;
v83--;
new Uint16Array(v83);
const v89 = Int16Array?.constructor;
for (let v90 = 0; v90 < 5; v90++) {
    v63.unshift(3);
}
new v63(v63);
try { new v89(Int16Array); } catch (e) {}
new Int16Array(47);
Math.exp(10000);
Math.log(-23525);
