function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 6;
    } catch(e3) {
    }
    const v4 = [-9007199254740991,536870888,51292,-2147483649];
    const v5 = [536870912,-124426018];
    const v6 = [23930,454087404,65536,-6,-1955199007,1,1073741824,14];
    function f7(a8) {
        try { a8.map(v5); } catch (e) {}
        a8[0] = a8;
        const o14 = {
            "e": v4,
            "c": v5,
            [v6]: v6,
            "a": v6,
            [v4]: v6,
            get f() {
                let {"h":v11,"length":v12,...v13} = v6;
                this.toString = v11;
                return v13;
            },
        };
        return o14;
    }
    f7(v4);
    function F16() {
        if (!new.target) { throw 'must be called with new'; }
        const v18 = v5?.constructor;
        v18.e = v18;
        try { new v18(); } catch (e) {}
    }
    F16.arguments = F16;
    const v20 = new F16();
    try { v20.hasOwnProperty(f7); } catch (e) {}
    const v22 = new F16();
    let v25;
    try {
    const t0 = "object";
    v25 = t0(v20, "number", F16);
    } catch (e) {}
    const t42 = "object";
    t42[v22] &= v25;
}
const v26 = new F0();
new v26();
const v28 = new F0();
v28.g = v28;
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
}
const v34 = [1,4294967296,-9007199254740992,4,-4294967295,-9,-4294967297,255,536870888,255];
const v35 = [v34,v34,v34];
Array(1102693041).slice(v35, v34);
new Uint16Array(v28);
const v44 = new Uint32Array(1477);
try { v44.reverse(); } catch (e) {}
function f48() {
    const o52 = {
    };
    return o52;
}
Uint32Array.e = Uint32Array;
new Uint32Array(v28);
function F54() {
    if (!new.target) { throw 'must be called with new'; }
    this?.constructor;
    try { new v26(); } catch (e) {}
}
const v58 = new F54();
function f60() {
    return 4294967297n;
}
class C61 extends f60 {
    o(a63, a64, a65) {
        for (let v71 = 0; v71 < 32; v71++) {
            break;
        }
    }
}
Map.length;
const v76 = new Date(Date);
v76.setFullYear();
("toString").match();
[v58];
v28[1073741824] = Map;
