function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v3 = Float32Array.bind();
    F0[2];
    function f5(a6, a7) {
        const o9 = {
            ...Float32Array,
            get h() {
                return this;
            },
        };
        return a7;
    }
    try {
        this.f = v3;
    } catch(e11) {
    }
}
const v12 = new F0();
let v13 = new F0();
const v14 = new F0();
class C15 extends F0 {
    m(a17, a18) {
        try { this.n(); } catch (e) {}
        let v21 = 1073741824;
        v13++;
        v21 & this;
        v12 & v12;
        --v21;
        switch (v13) {
            default:
                break;
        }
        try {
            v12.fuck(-9223372036854775808n, "n", -21068n);
        } catch(e32) {
        }
        return a17;
    }
}
const v33 = new C15();
const v34 = new C15();
new C15();
for (const v38 in v34) {
    [-1.3842424840203881e+307,-6.009097302373538e+307,-1.1802560158964299e+308,-1000000000.0,NaN,1e-15,0.7766567657905142,0.4444988685071358,1e-15,0.27342070590005274];
    [-5.0,2.0,17990.722597714514,1000000000000.0,1000000000.0,1000000.0];
    [-1e-15,1.7976931348623157e+308,-Infinity,-0.0,-1000000.0,0.0,4.230492745639812e+306];
}
const v43 = new Float32Array(8);
class C44 {
    #b = v43;
    static #g = v14;
    a = v14;
}
let v45 = new C44();
const v46 = new C44();
new C44();
let v49;
try { v49 = v34.m(2816, Float32Array, v13, 2816, v33, ...2816); } catch (e) {}
[20960];
[914083955,9223372036854775807,-2,-1244566435];
[11,512,-64599,-256,-10,50180,51962,255,9223372036854775807];
[-128];
[-2147483647,-57317,2,62611];
[13576,-854270974,-65536,5,12,1000];
new v49(2816);
try {
    v13.f = 34184n;
} catch(e62) {
}
new Uint8ClampedArray(307);
const v67 = new Uint8ClampedArray(3);
class C68 {
    constructor(a70, a71, a72, a73) {
        const v74 = this.constructor;
        try { new v74(3, a73, this, this); } catch (e) {}
        for (let v76 = 0; v76 < 5; v76++) {
            v67[v76] = a73;
        }
    }
    m(a78, a79) {
        v45 = v46;
        new Int32Array(a78);
        return a78;
    }
}
new C68();
