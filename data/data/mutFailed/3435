function f3() {
    return 2.7951941490622083;
}
new Uint8Array(36);
new Float32Array(134);
new Float64Array(129);
const v13 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v15 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v16 = [601759695];
const v17 = [1073741824,1073741823,1376142744,1073741825];
function f19(a20, a21, a22, a23) {
    function f25() {
        let v28 = Float64Array;
        b = v28 = a21;
        v13.length;
        try {
            v17.forEach(v28);
        } catch(e31) {
        }
        const v32 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v34 = Symbol.toPrimitive;
        const o40 = {
            toString(a36, a37) {
                const v38 = a23 && v28;
                a36 *= v34;
                return v38 <= v32;
            },
        };
        const o60 = {
            "c": -4294967297n,
            [522675525n](a43, a44) {
            },
            "c": v16,
            valueOf(a46, a47) {
                return a20;
            },
            "b": -4294967295,
            [-4294967297n](a49, a50, a51, a52) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": v34,
            "arguments": v15,
            ...v16,
            "type": "Vre",
            ..."Vre",
            valueOf(a54, a55) {
                return v32;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a57, a58, a59) {
                return a23;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f25();
    const v63 = new Int8Array();
    v63.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f25);
    try { v17["find"](..."find", a23, ...v16, ...v17, ...522675525n); } catch (e) {}
    129 <= a22;
    return arguments;
}
for (let v70 = 0; v70 < 10; v70++) {
    v70();
}
%OptimizeFunctionOnNextCall(f19);
f19();
