class C3 {
    16 = "bigint";
    static m(a5) {
        ("b")["indexOf"]("indexOf");
        return a5;
    }
    static p(a9) {
        const v10 = delete a9?.[8];
        let v11;
        try { v11 = new v10(a9, a9, this, a9); } catch (e) {}
        delete this[6];
        for (let v13 = 0; v13 < 32; v13++) {
            v11["p" + v13] = v13;
        }
        return "bigint";
    }
}
const v16 = new C3();
new C3();
const v18 = new C3();
v18[16] = v18;
let v20 = 12n;
const o22 = {
    "e": "6tfFR",
    [-59135n]: 1000,
};
v20 ^ v20;
let v24 = v20--;
v24--;
let v26 = 16n;
v26++;
function f28() {
    new Uint16Array(6);
    const v32 = [10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163];
    function f33(a34) {
        Promise.race();
    }
    v32[Symbol.toPrimitive] = f33;
    Date.parse(v32);
    return v16;
}
const v41 = [-1000000000000.0,1000000.0];
const v42 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
const v43 = /QK/gvdimy;
with (v42) {
    v43.__proto__ = length;
}
let v45;
try { v45 = v41.find(v26); } catch (e) {}
const v47 = ([-0.0,-921357.9270390093,-1000000.0,8.426869655526065,NaN,-774613.0111985095])?.some;
try { new v47(v41); } catch (e) {}
const v49 = [1000.0,-1000000000000.0,-316.46381951531487,2.473905471398826];
try { v49.sort(v45); } catch (e) {}
[1000000000000.0,1.255960704579724e+308,1000.0,2.220446049250313e-16];
[926.6263211360331,-2.220446049250313e-16,0.9061300748678893,-1.7976931348623157e+308,-5.955637183071147e+306,0.07564827875427005,Infinity,5.787895266646695,-1.3817482515058848e+308];
[-3.6500305846554833e+307,-534764.9925341182,450.4523197211315,1.7525935324867687e+307,NaN,1.0,915065.8078490875,-756.1378502483209,4.0];
function F54() {
    if (!new.target) { throw 'must be called with new'; }
    const v56 = this?.constructor;
    try { new v56(); } catch (e) {}
}
try { new F54(); } catch (e) {}
const v59 = new F54();
try { v59.hasOwnProperty(f28); } catch (e) {}
const v61 = [-1000000.0,-2.0,0.7940062623406634,2.2250738585072014e-308,175040.77477615396,-2.220446049250313e-16,2.220446049250313e-16];
const v62 = [-1000000000.0,-1.0,1000000000.0,0.7381945036706961,2.220446049250313e-16,1.0,-530.0133386888629,1e-15];
function f63() {
    return f63;
}
class C64 extends f63 {
    constructor(a66, a67, a68) {
        function f69(a70, a71, a72) {
            v41.copyWithin();
            try {
                f69(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e78) {
            }
            const v79 = this >> -268435456;
            v79 >> this;
            return -v79;
        }
        f69(this, this, a66);
    }
}
const v83 = new C64();
const v85 = new Date(v83);
function F86() {
    if (!new.target) { throw 'must be called with new'; }
}
[F86];
const v90 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v91 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
let v93 = 0;
v93++;
const v95 = new f63(v91, v93);
const v97 = [1073741824,1073741823,1376142744,1073741825];
let v98 = 522675525n;
v98--;
function f100(a101, a102, a103, a104) {
    function f105() {
        ("Vre").trimLeft();
        -4294967295 - -4294967295;
        let v110 = Float64Array;
        try { new v110(-2147483647, "bigint", v95); } catch (e) {}
        v110 = a102;
        b = v42;
        const v112 = v90.length;
        v112 >>> v112;
        try {
            v97.forEach(v110);
        } catch(e115) {
        }
        const v116 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v118 = Symbol.toPrimitive;
        const o125 = {
            toDateString(a120, a121) {
                const v122 = a104 && v110;
                function f123() {
                    a120 *= v118;
                    return v110;
                }
                return v122 <= v116;
            },
        };
        const o136 = {
            "c": -4294967297n,
            [v98](a128, a129) {
            },
            "c": v42,
            "b": -4294967295,
            [-4294967297n](a131, a132, a133, a134) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v62,
            ...v42,
            "type": "Vre",
            ..."Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            5: -4294967295,
        };
    }
    f105();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f105);
    try { v97["find"]("find", a104, v42, v97, v98); } catch (e) {}
}
v85.setUTCMinutes(f63, v85, Date);
const v143 = v62.copyWithin(v59, v61);
try { v143.fill(v41); } catch (e) {}
function f145() {
    const o146 = {
    };
    return o146;
}
const v147 = f145();
v147.h = v147;
const v148 = f145();
v148.g = v148;
v148.e = v148;
for (let v149 = 0; v149 < 25; v149++) {
    const v150 = [601759695];
    const v151 = [1073741824,1073741823,1376142744,1073741825];
    v151[3] = v151;
    function f152(a153, a154, a155, a156) {
        a153.h;
        const v158 = a154?.constructor;
        try { new v158(v151); } catch (e) {}
        const v160 = a154.e;
        v160.e = v160;
        try { v151["find"](..."find", a156, ...v150); } catch (e) {}
    }
    for (let v163 = 0; v163 < 5; v163++) {
        f152(v147, v148);
    }
    const v167 = new Date();
    v167.setUTCMilliseconds(-3);
    const v172 = new Int16Array(2183);
    const v175 = new Int16Array(8);
    async function f176(a177, a178, a179) {
        delete v175[-1000000000.0];
        let [v181,v182,...v183] = v172;
        v172[5];
        await v182;
    }
}
