const v11 = new Array(2);
function F12() {
    if (!new.target) { throw 'must be called with new'; }
}
const v14 = new F12();
const v15 = new F12();
const v16 = new F12();
v16.EPSILON = v16;
const v17 = v16.g;
let v18;
try { v18 = v17.bind(); } catch (e) {}
const v19 = -Infinity;
const v21 = Number.isFinite();
const v22 = v21 && v21;
let v23 = v14.g;
Object.defineProperty(v11, v21, { writable: true, configurable: true, enumerable: true, set: Number });
const v25 = [Number,Array];
Reflect.apply(v11.reduceRight, v15, v25);
v19 - v19;
const v30 = -261.1271706035858 + -261.1271706035858;
3.0 & v11;
v23 %= v30;
let v32 = Array.isArray(v22, -261.1271706035858, Reflect, v19, v30);
v32 = v18;
let v36 = -10n;
v36++;
const v38 = v36 | v36;
v38 + v38;
let v40 = 65535n;
const v41 = v40++;
v41 | v41;
v40--;
Int32Array.g = Int32Array;
let v45;
try { v45 = Int32Array.of(); } catch (e) {}
let v46;
try { v46 = v45.entries(); } catch (e) {}
const v47 = v46.next(v22, v21);
new Int32Array();
const v52 = !256;
+v52;
v52 || v52;
let v55 = 257 && v52;
v55--;
let v58 = 7;
v58--;
v58++;
new Int8Array();
const v63 = new Int8Array();
new Uint32Array(v63, v45, v47);
try { new Worker(); } catch (e) {}
