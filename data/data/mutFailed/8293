function f3() {
    return 64;
}
function f4() {
    return f3;
}
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = new Int32Array(257);
    function f18(a19, a20, a21, a22) {
        let v24 = new Map();
        [...v24] = v17;
        let [...v25] = v17;
    }
    f18();
}
const v27 = new F10(-1734174209, 4294967296);
function f28(a29, a30) {
    const o58 = {
        __proto__: -5,
        0: f3,
        get d() {
            const v32 = this > 64;
            if (64) {
                let v34 = 7;
                v34 &&= 1073741824;
                const v39 = [/D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy];
                ["-536870912","replace",v39,1,[v39]];
                f4();
                try {
                    const v43 = 64 != 64;
                    ([Worker]).unshift(v43);
                    function f47(a48) {
                        return f47;
                    }
                    class C49 extends f47 {
                    }
                    this.__proto__ = this;
                    const v52 = new BigInt64Array(5);
                    try { Float64Array.from(v52); } catch (e) {}
                } catch(e55) {
                }
            } else {
                let v56;
                try { v56 = this.reverse(f3, a30, a30); } catch (e) {}
                v56?.[4];
            }
            return v32;
        },
    };
    return o58;
}
f28(0.0, 64);
f28(0.0, -5);
f28(1000.0, -5);
/0\xe2\x81\xa3[\0]/ds;
/a/disy;
/9/gvsy;
for (let v67 = 0; v67 < 32; v67++) {
    v27["p" + v67] = v67;
}
let v70 = 1000000000000.0;
class C71 {
    b = -142.577867451237;
    [v70] = -142.577867451237;
    #m(a73) {
        const v75 = Symbol.toPrimitive;
        const o97 = {
            [v75]() {
                let v77 = Math;
                const v79 = ++v70;
                const v80 = v70 ** v70;
                v77 & (15462 ** 15462);
                +Infinity;
                (15462 || 1000000000000.0) + -142.577867451237;
                v77--;
                +v70;
                v77.log(v79);
                v77.sin(v80);
                try {
                    Symbol("toDateString");
                } catch(e96) {
                }
                return -142.577867451237;
            },
        };
        return this;
    }
}
const v100 = new BigUint64Array(1000);
const o101 = {
    ...v100,
};
new C71();
new C71();
new C71();
new Uint8Array(1246);
const v110 = new Uint16Array(512);
const t98 = [];
t98[6] = 4294967295;
const v115 = BigUint64Array(ReferenceError);
function F117() {
    if (!new.target) { throw 'must be called with new'; }
    typeof arguments;
    gc();
}
const v123 = new F117();
const t107 = v123.constructor;
new t107();
class C126 {
}
const v128 = new Date();
const v130 = new Set();
v130.add(v128);
const v132 = new Int32Array(1);
function f133() {
}
class C134 extends f133 {
}
new C134();
[0.0,1000000.0];
function f137() {
    let v138 = 0;
    do {
        const o139 = {
        };
        try {
            o139.h = f133;
        } catch(e140) {
        }
        try {
            const o141 = {
            };
            o141.h = f133;
            o141.f = Uint8Array;
        } catch(e142) {
            e142[536870887] **= e142;
            v115["toString"]();
        }
        try {
            const o148 = {
            };
            o148.h = f133;
            o148.f = Uint8Array;
            o148.d = f133;
        } catch(e149) {
        }
        try {
            const o150 = {
            };
            o150.h = f133;
            o150.f = Uint8Array;
            o150.d = v110;
        } catch(e151) {
        }
        v138++;
    } while ((() => {
            const v154 = v138 < 10;
            try {
                new f4();
            } catch(e156) {
            }
            Object.defineProperty(Date, "f", { configurable: true, value: v132 });
            return v154;
        })())
    for (const v160 of Array(4087)) {
    }
    return Array;
}
f137();
f137();
