const v0 = [-1.4433811800592144e+308,688716.7588036766,3.2296504925599585,-1.6892408315299713e+308,-5.1002597469835065,2.220446049250313e-16];
const v1 = [-876.6229300236272,1000000000.0,-Infinity,-5.603724460577154e+307];
[1000.0,-7.566403793247636,2.2250738585072014e-308,1e-15,0.9646395797056844,-4.0,5.0,0.7373783251183965];
function f3() {
    return v0;
}
Math.log1p(268435456);
const v8 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v9 = [601759695];
function f11(a12, a13, a14, a15) {
    function f17() {
        const v21 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v23 = Symbol.toPrimitive;
        const o30 = {
            toString(a25, a26) {
                const v27 = a15 && Float64Array;
                function f28() {
                    a25 *= v23;
                    return Float64Array;
                }
                Object.defineProperty(v27, "valueOf", { value: f11 });
                v27 <= v21;
                return this;
            },
        };
        const o53 = {
            "c": -4294967297n,
            [522675525n](a33, a34) {
            },
            "c": v9,
            valueOf(a36, a37) {
            },
            "b": -4294967295,
            [522675525n](a39, a40, a41, a42) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v8,
            ...v9,
            "type": a15,
            ..."Vre",
            valueOf(a47, a48) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a50, a51, a52) {
                return a12;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f17();
    const v56 = new Int8Array();
    v56.buffer;
    a14.slice(2147483648);
    %OptimizeFunctionOnNextCall(f17);
    let v61;
    try { v61 = v0["find"](..."find", a15, ...v9, ...a14, ...522675525n); } catch (e) {}
    v61 <= a14;
    return arguments;
}
const v66 = [v0,v0,6];
[v1,6];
[v66];
class C78 {
    static #o(a80) {
        this.g **= -1e-15;
        try {
            C78.normalize();
        } catch(e82) {
        }
        return 268435456;
    }
    a = -1e-15;
    static 27 = 268435456;
    static f;
}
let v83;
try { v83 = new C78(); } catch (e) {}
v83.a = v83;
const v84 = new C78();
v84.a = v84;
new C78();
const v86 = new C78();
let v88 = 8 - 8;
8 - 8;
-15 | -15;
344.61638667171496 | 344.61638667171496;
const v97 = 344.61638667171496 & -11;
v97 << v97;
Math.sqrt(-11);
const v100 = Math.floor(v97);
const v101 = v100 + v100;
const v102 = v88--;
v102 >> v102;
const v104 = new Int32Array(8);
try { v104.constructor(v86, -1e-15, 8); } catch (e) {}
new Uint32Array(2950);
const v110 = 28 | 28;
const v112 = new Uint32Array(28);
v112.valueOf = f11;
v112[0] = v112;
let v113 = 0;
let v114 = -56850;
v114++;
1.1408591040999836e+308 >>> v101;
class C118 {
    #b = v113;
    g = 1.1408591040999836e+308;
    static {
        this.e = v88;
        let v120;
        try { v120 = new this(); } catch (e) {}
        v120.e = v120;
        v120.e = v120;
        this.e = this;
        Math.toString = f3;
        try { Math.tan(Math); } catch (e) {}
        let v124 = 44149;
        -v124;
        v124--;
        const v127 = v113++;
        const v128 = v127 & v127;
        let v129 = -v127;
        v129++;
        let v131 = ~v113;
        v131--;
        Math.log10(v124);
        const v134 = v124 + v113;
        v134 + v128;
        v134 >> v134;
        const v137 = Math.fround(v127);
        v137 >> v137;
    }
}
let v139;
try { v139 = new C118(); } catch (e) {}
v139.d = "1081593877";
v139.d = v0;
v139.d = v139;
const v140 = new C118();
v140.g;
v140.g;
const v143 = new C118();
const v144 = v143?.__defineGetter__;
try { v144.constructor(v86); } catch (e) {}
try { new v144(v110, C118); } catch (e) {}
const o153 = {
    "execution": "async",
    set e(a151) {
        try {
        } catch(e152) {
        }
    },
};
gc(o153);
