const v3 = ["object","number"];
("async").toUpperCase();
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new F6();
    } catch(e14) {
    }
}
const v16 = ["268435441",["268435441",v3,"268435441","number"],"number"];
const v17 = [-536870912,-340775111,10000,536870912,-65536,-128,-2087231794,-939919964,-4294967297];
v16[7];
let {"c":v20,"g":v21,"length":v22,} = "size";
function F23(a25) {
    if (!new.target) { throw 'must be called with new'; }
}
new Int32Array(257);
[1337297170,536870887];
class C30 {
    static {
        try {
            this.length = 2499;
        } catch(e33) {
        }
    }
    set e(a35) {
    }
}
[1563186509];
v22 == 268435440n;
class C40 {
}
class C41 extends C40 {
}
const v42 = new C41();
const v44 = new Uint8Array();
v20.c = 1073741825;
delete v42[v44];
let v46;
try { v46 = v17.reverse(); } catch (e) {}
new Uint16Array(1657);
class C50 {
}
new C50();
const o55 = {
    get f() {
        return this;
    },
};
function f56(a57, a58, a59, a60) {
    return f56;
}
Object.defineProperty(o55, "f", { enumerable: true, get: f56 });
parseFloat(parseFloat) << v46;
