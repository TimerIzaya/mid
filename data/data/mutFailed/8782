class C3 {
    static #b;
    #p(a5, a6) {
        try {
            super.m(this, a6, this);
        } catch(e8) {
        }
        function f9(a10, a11, a12, a13) {
            function f15() {
                return Math.asin(Math);
            }
            %PrepareFunctionForOptimization(f15);
            f15();
            %OptimizeFunctionOnNextCall(f15);
            f15();
            return arguments;
        }
        this < 257;
        this[129] -= 10000;
        return a5;
    }
    5;
    static d;
    static 646 = 2;
    p(a22) {
        this.g ^= this[8];
    }
    static g = 257;
}
function f26() {
    ("D")[0].substring(129);
    return "D";
}
const v30 = new C3();
const v31 = new C3();
const v32 = new C3();
const v33 = [10000,v32,257,v32];
const v34 = [v31,v32,2];
const v36 = [10000,v30,[10000,257,C3,v34]];
const v37 = [v33,2,v31];
const v38 = [v37,v34,v37,10000,v37];
class C39 {
    [v31] = v36;
    p(a41, a42) {
        try {
            v33.length = 7;
        } catch(e44) {
        }
        return a41;
    }
    static #a = 10000;
    #a;
    10000 = f26;
    constructor(a46) {
        const v48 = Symbol.iterator;
        const o50 = {
            [v48]() {
            },
        };
    }
    static #h = v37;
    g;
    74 = v38;
    /*
    constructor(a52, a53) {
        super();
        try {
            a52.__proto__ = C3;
        } catch(e54) {
        }
        new C3();
    }
    */
    #g;
}
new C39();
new C39();
new C39();
function F59() {
    if (!new.target) { throw 'must be called with new'; }
}
ReferenceError.captureStackTrace(F59);
