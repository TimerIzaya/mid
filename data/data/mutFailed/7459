const v2 = new Uint8Array(1000);
Array();
Array(1000);
const v10 = new BigUint64Array(257);
Uint8Array in v10;
try {
    v10.d = v2;
} catch(e12) {
}
new Float32Array(4);
new Uint8Array(4096);
new Float32Array(141);
new Uint16Array(BigInt64Array);
function f27() {
    return f27;
}
new BigInt64Array(7);
function f32() {
    return 536870887n;
}
try { f32(); } catch (e) {}
new Map();
24560 ^ 24560;
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v54 = Array(19793);
    for (const v55 of v54) {
    }
    const v56 = [v54,v54,v54,v54];
    const v58 = new BigUint64Array();
    v58.constructor;
    const v60 = [v56,v56,v56];
    const v62 = ("function").normalize();
    new Set();
    try {
        v62.values();
    } catch(e66) {
    }
    const v67 = [v60];
    (7).toSpliced(v67);
    v67 >= Uint16Array;
}
const v71 = new F46();
v71.constructor;
function F73(a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
const v80 = new F73();
v80.e = Uint8ClampedArray;
new F46();
class C83 {
    constructor(a85) {
        try {
        } catch(e86) {
        }
        try {
        } catch(e87) {
        }
        for (const v88 of "bigint") {
        }
    }
}
C83.name;
class C90 extends C83 {
}
new C90();
const o92 = {
};
