[1000000000000.0,2.2250738585072014e-308,0.8121763448736308,1000.0];
[-917069.3220286856,462812.8329337479,-1.5815690601923402e+308,2.0,-3.0,-1000.0,-958647.1331157241,0.31379443673480767,2.220446049250313e-16];
[1.407215682848277e+308,4.917009057003931,295978.5145062653];
([-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308]).toLocaleString();
function f11(a12, a13, a14, a15) {
    for (let v16 = 0; v16 < 5; v16++) {
        (2136873598).constructor.parseFloat(f11);
    }
    return f11;
}
f11(f11, f11, -10, -10);
%OptimizeFunctionOnNextCall(f11);
[-9007199254740991,-52548];
[-43381,1073741824,-536870912,-65535,9,1073741825,-1831190014];
[4294967297,-65535,-2147483648,9007199254740991,0,268435439];
class C24 {
}
const v25 = new C24();
function f26() {
    return f26;
}
const v27 = [427812215,61195,-2147483647,4096,-2147483647,30905];
try { (9007199254740992).find(C24, 9007199254740992, "7", v27, "7"); } catch (e) {}
const v29 = [C24,C24,C24];
const v32 = -Date.parse(v29);
class C33 {
    static {
        for (let v35 = 0; v35 < 25; v35++) {
            function f36(a37, a38, a39, a40) {
                const v43 = -3.0 | -9007199254740992;
                new Int16Array();
                try { a37.call(a39, v25, a40, a38, this); } catch (e) {}
                const v47 = a38--;
                new Float64Array(v43);
                function f51(a52, a53, a54, a55) {
                    function f56() {
                        function f57(a58) {
                            return f51;
                        }
                        f57(f57);
                        return f51;
                    }
                    f56();
                    f56();
                    %OptimizeFunctionOnNextCall(f56);
                    return a53;
                }
                Number.isNaN(v47);
                let v64;
                try { v64 = Math.round(this); } catch (e) {}
                -v64;
                Math.tan();
                const v67 = new Date();
                for (let v68 = 0; v68 < 5; v68++) {
                    function F71(a73, a74, a75, a76) {
                        if (!new.target) { throw 'must be called with new'; }
                        const v77 = this.constructor;
                        try { new v77(a73, a73); } catch (e) {}
                        a74.isPrototypeOf();
                    }
                    new F71("HkAXC", "toStringTag");
                }
                const v81 = v67.setDate();
                let v83 = new Date();
                v83 **= v83;
                let [,...v85] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
                v81 * v81;
                const v87 = a38 & a38;
                let v88;
                try { v88 = a37(v87); } catch (e) {}
                v88?.constructor;
                arguments[2];
                const v92 = arguments[2];
                try { v92.findLast(); } catch (e) {}
                return v25;
            }
            f36(v32, v25, v35);
            f36(v35, v32, v29);
            for (let v96 = 0; v96 < 5; v96++) {
                const v97 = [286977509,536870889,-380982641,1073741825,-14496,-9223372036854775807];
                function f98(a99, a100, a101, a102) {
                    const v103 = /(?:a*)+q(?<a>.)/guds;
                    function f104(a105) {
                        a105.constructor;
                        return a99;
                    }
                    for (let [i114, i115] = (() => {
                            v97.toLocaleString(f104);
                            for (let v109 = 0; v109 < 5; v109++) {
                                v27[a100];
                                v103["exec"]("exec");
                            }
                            return [0, 10];
                        })();
                        (() => {
                            const v116 = i114 < i115;
                            !v116;
                            return v116;
                        })();
                        (() => {
                            i115--;
                            const v122 = Symbol.toPrimitive;
                            const o124 = {
                                [v122]() {
                                },
                            };
                        })()) {
                        for (let v127 = 0; v127 < 5; v127++) {
                            f104(v103);
                        }
                    }
                    return a101;
                }
                f98(-10, -10, -10, -10);
                %OptimizeFunctionOnNextCall(f98);
                f36(this, v96, v96);
            }
        }
    }
}
