let v1 = 128;
function f2() {
}
new Int16Array();
const v8 = new Map();
function f9(a10) {
    const o17 = {
        __proto__: v8,
        "f": v8,
        ...v8,
        [v8]: -6n,
        [-6n](a12, a13, a14, a15) {
            delete v8?.size;
        },
    };
    return a10;
}
const v18 = f9(v8);
const v19 = v18?.set;
let v20;
try { v20 = new v19(-6n, v8); } catch (e) {}
const v21 = f9(52504n);
v21 ^ v21;
try { v21.m(v18, Map); } catch (e) {}
try { ("6Ct").indexOf(v18); } catch (e) {}
const v30 = ("6Ct").codePointAt(1000000000000.0);
class C31 {
}
try { new C31(); } catch (e) {}
const v33 = new C31();
v33[10] = v33;
v19[v8] = Int16Array;
C31.h;
Object.defineProperty("6Ct", "b", { configurable: true, enumerable: true, get: f2 });
const o36 = {
    "apply": f2,
    "call": f2,
    "defineProperty": f2,
    "getOwnPropertyDescriptor": f9,
    "getPrototypeOf": f2,
    "has": f9,
    "ownKeys": f2,
    "set": f9,
};
const v38 = new Proxy(v33, o36);
v1 = "getFloat32" & 239;
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a44;
    } catch(e46) {
    }
}
new F41("getFloat32", "6Ct", v20);
const v48 = new F41(v18, v38, v18);
new F41(v48, "6Ct", v30);
for (let v50 = 0; v50 < 5; v50++) {
    const o53 = {
        o(a52) {
        },
    };
}
let v55;
try { v55 = new Float32Array(v1, v1, v1); } catch (e) {}
v55.byteOffset;
const v57 = new Float32Array(239);
Float64Array.BYTES_PER_ELEMENT;
const v61 = new Float64Array(567);
v61[10] = v61;
const v63 = 1189 << 1189;
v63 + v63;
new Float32Array(1189);
function f67() {
    const v70 = Math.atanh("Vre");
    return v70 >> v70;
}
try { f67(); } catch (e) {}
const v73 = [7,128];
const v74 = v73?.__lookupSetter__;
try { new v74(f2); } catch (e) {}
try { v73.map(v1); } catch (e) {}
class C77 {
}
class C78 {
    constructor(a80, a81) {
        const v82 = this?.__defineGetter__;
        try { new v82(C78, v73); } catch (e) {}
    }
}
try { eval(C78); } catch (e) {}
const v87 = ("boolean").constructor;
try { new v87(v57); } catch (e) {}
new Uint8ClampedArray(Date);
function f92(a93, a94, a95) {
    try { a93(); } catch (e) {}
    return a93;
}
const v97 = eval("");
const v98 = new C78();
v98.length = v98;
const v99 = v98?.constructor;
try { new v99(C77, 239); } catch (e) {}
const v101 = new C78();
const v104 = Symbol.iterator;
const o113 = {
    [v104]() {
        let v106 = 10;
        const o112 = {
            next() {
                v106--;
                const v110 = v106 == 0;
                const o111 = {
                    "done": v110,
                    "value": v106,
                };
                return o111;
            },
        };
        return o112;
    },
};
v101.length;
const v115 = v101?.constructor;
try { v115.call(v73); } catch (e) {}
1000000000000.0 && v97;
C77[239] >>>= 239;
function f118() {
    ~([-1.5424212036356715e+308]).shift();
    return 239;
}
%OptimizeFunctionOnNextCall(f118);
try { new v115(v101, 1189); } catch (e) {}
