new Map();
const v2 = [1056419606,-2147483647,-32770];
const v3 = [-11,10];
[-61933,10000,1000,65537,1513778442,1073741825,1073741824,-9007199254740991,-12];
new Float64Array(256);
new Int8Array(8);
new Float32Array(0);
function f17() {
}
const v18 = f17();
class C19 extends 0 {
    static #h = v3;
    7;
    #d;
    static [v18];
    4;
    constructor(a21) {
        super();
        for (let v22 = 0; v22 < 5; v22++) {
            super.valueOf();
        }
    }
}
new v2();
new C19();
new C19();
[536870887];
[9007199254740991,129,2147483649,-45944,129];
const v2 = [-678598675,9,-1319750838,129,65536,-12];
[536870912,14,9007199254740992,1523904158,-9007199254740992];
[-48064];
const v5 = [1112870246,-4294967296,4294967295,-5308,-7,-2147483647,255];
const v8 = new BigUint64Array(16);
new Int32Array(3877);
class C16 {
    d = 26476;
    #o(a18) {
        function f19() {
        }
        return -1.7976931348623157e+308;
    }
    3144726779 = -1.7976931348623157e+308;
    [-1.7976931348623157e+308] = -1.7976931348623157e+308;
}
new C16();
const v21 = new C16();
const v22 = new C16();
v22[3144726779];
536870888 >>> 536870888;
const v29 = ([Infinity,-1000000000.0,-1000.0,0.616770467362187,0.996519810461017,227777.0879711986,-6.650971445146981e+307]).values;
try { new v29(); } catch (e) {}
const v31 = [619.1440398410084];
const v33 = new Set();
function f34() {
    function F35(a37, a38) {
        if (!new.target) { throw 'must be called with new'; }
        a37.__proto__ = a37;
    }
    return v2;
}
Object.defineProperty(v33, "toString", { value: f34 });
[75277.92503252462,-2.9628587561702453,997000.7431874245,1000000000000.0,-3.0,-1000000000.0,5.924389041780332,1e-15];
const v40 = [-943690.5037993332,-2.220446049250313e-16];
try { v40.map(v21); } catch (e) {}
-13 * -13;
2147483647 + 2147483647;
class C47 {
    [Set];
    4;
}
const v48 = new C47();
v48[4] = v48;
new C47();
const v51 = v48.__proto__?.__lookupGetter__;
try { new v51(v31); } catch (e) {}
class C56 {
}
C56.name;
C56.length = C56;
const v58 = new C56();
const v59 = v58?.constructor;
let v60;
try { v60 = new v59(); } catch (e) {}
v60.constructor = f34;
const t58 = v60?.constructor;
new t58();
v60.b = v60;
const v63 = new C56();
const v64 = v63.__lookupGetter__;
try { new v64(v60); } catch (e) {}
new C56();
let v68;
try { v68 = ("p").padEnd(v63); } catch (e) {}
try { v68.trimStart(); } catch (e) {}
const t68 = "40089";
t68[2] = "40089";
function F72() {
    if (!new.target) { throw 'must be called with new'; }
    function f74() {
        return f34;
    }
    function f75(a76) {
        try {
            a76.length = 9;
        } catch(e78) {
        }
    }
    Object.defineProperty(this, "constructor", { writable: true, get: f74, set: f75 });
    const v79 = this?.constructor;
    try { new v79(); } catch (e) {}
}
const v81 = new F72();
v81?.constructor;
const v83 = v81?.constructor;
let v84;
try { v84 = new v83(); } catch (e) {}
v84?.constructor;
let v86;
try { v86 = new v83(); } catch (e) {}
v86.constructor = f34;
const v87 = v86.constructor;
try { new v87(); } catch (e) {}
("multiline")[-1];
Math.valueOf = f34;
let v91;
try { v91 = Math.acosh(Math); } catch (e) {}
v91 - v91;
1.7976931348623157e+308 & 1.7976931348623157e+308;
const v95 = +1.7976931348623157e+308;
v95 / v95;
Math.log1p(v95);
v40[v33] = C47;
new Int16Array(3047);
function F104(a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    const v108 = v5.constructor;
    try { v108(); } catch (e) {}
    const v111 = Uint32Array();
    async function f112(a113, a114, a115) {
        await v111;
    }
    try {
    } catch(e117) {
        class C119 {
            static [v8] = -2;
        }
    }
}
