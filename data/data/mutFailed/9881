~(852 && 852);
function f4() {
    return f4;
}
let v6 = new Uint16Array(f4);
v6["filter"](f4);
Date[Symbol.toPrimitive] = Date;
function f11() {
    return Date;
}
Object.defineProperty(Date, "toString", { enumerable: true, get: f11 });
const v12 = new Date();
class C13 extends Date {
    #p(a15, a16) {
        const v20 = Date(a15);
        [4.0,-1000000.0];
        [2.2250738585072014e-308,-5.0,-507.94625965989695,-4.0,-3.5027369115759344,27.425743881741937,-3.0];
        [1.2407530200015235e+308,-940711.2173822998,0.39805200616869385,-1.7976931348623157e+308,-624294.3322226147,776.7556318647967,1.2506782876715331e+308,6.470712862134718,5.0,1000000000000.0];
        return v20;
    }
    static [Date] = Date;
    static 5;
    f = v12;
}
const v24 = new C13();
try { v24.getUTCFullYear(); } catch (e) {}
class C27 extends WeakMap {
    536870887;
}
f11(f11, f11, f11, f11());
const v30 = new C13();
const v31 = new C13();
const v35 = [Date,v30,v24,-65537];
[C13,C13,C13,v31];
[v35];
function f38() {
    return C13;
}
try { f38.call(1164623575); } catch (e) {}
const v41 = new WeakSet();
v41[0n] = -65537n;
v35.name;
Date.lastIndexOf(Date, 256);
v6 += v6;
const o48 = {
};
1842642860 % !o48;
const v52 = new Uint32Array(256);
try { v52.indexOf(-65537); } catch (e) {}
function f54() {
    try { ("-26733").strike(); } catch (e) {}
    v52[3] = "-26733";
    return "-26733";
}
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
}
const v62 = [v24,v24,v24];
const o63 = {
    "e": v62,
};
%PrepareFunctionForOptimization(f54);
f54();
%OptimizeFunctionOnNextCall(f54);
const v65 = f54();
try { v65.strike(); } catch (e) {}
