[3.336079883548768,1000.0,-28496.955146478023,1.7976931348623157e+308,0.8357973745238638,-2.220446049250313e-16,-8.194222258309277e+307];
const v1 = [-3.0,175101.61907766364,4.042641414892644,3.0];
const v2 = [-0.0,882817.6606323265,-Infinity,2.0,1e-15,5.427002823600763,0.1023768007828324,5.907875304814912,825.0658832719912];
const v6 = [v1,-998282061,v2,256];
const v7 = [v2,v6];
[v7,v2,v7];
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a12;
    } catch(e14) {
    }
    try {
        this.b = a13;
    } catch(e15) {
    }
    try {
        this.g = v2;
    } catch(e16) {
    }
}
new F9(v2, v7, 536870888);
new F9(v6, 256, v7);
new F9(v6, v1, v6);
let v21 = 4.0;
const v24 = new Date("undefined");
v24.getYear();
v21 **= v21;
const o32 = {
    set d(a28) {
        for (let v29 = 0; v29 < 5; v29++) {
        }
        this["cos"]();
    },
};
class C33 {
    constructor(a35) {
        o32.d = a35;
    }
}
const v37 = new WeakSet();
o32[4] = -8.576381465737261e+307;
new Map();
class C43 {
    e;
    constructor(a45, a46, a47, a48) {
        super[256] = this;
        const o49 = {
        };
        function f50(a51, a52) {
            return BigInt64Array;
        }
        o49.set = f50;
        function F55() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C58 extends F55 {
        }
        this[Symbol.match];
        v37[Symbol.asyncIterator];
    }
    [v24];
    #e;
    a;
    #g;
    static {
        for (let i68 = 0, i69 = 536870888;
            i68 < i69;
            (() => {
                function f73() {
                    return f73;
                }
                const v74 = [601759695];
                const v75 = [1073741824,1073741823,1376142744,1073741825];
                function f77(a78, a79, a80, a81) {
                    function f83() {
                        return a78;
                    }
                    const v84 = f73();
                    const v86 = new f83();
                    function f87(a88, a89) {
                        return v84;
                    }
                    a81();
                    f87();
                    const v92 = v86.buffer;
                    Object.defineProperty(v92, "constructor", { writable: true, configurable: true, value: Date });
                    new Int8Array();
                    v21--;
                    v92.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f83);
                    let v99;
                    try { v99 = v75["find"](..."find", a81, ...v74, ...v75, ...522675525n); } catch (e) {}
                    Symbol("find");
                    const v103 = new Uint8ClampedArray();
                    const o104 = {
                        ...v103,
                    };
                    v99 <= a80;
                    return arguments;
                }
                for (let v106 = 0; v106 < 10; v106++) {
                    f77();
                }
                i68++;
            })()) {
        }
    }
}
