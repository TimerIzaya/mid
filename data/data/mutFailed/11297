const v0 = [2147483649,-6,-4294967297,498053731,-65535,2,9,16,-12,-1];
const v1 = [-210059557,64,2062891567,-1394555385,9,1350465950,256,4294967297,-31574,49638];
const v2 = [50257,1,52271,1,16,116347412];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a8;
    } catch(e12) {
    }
    try {
        this.a = 1.7010029312345237e+308;
    } catch(e13) {
    }
    try {
        this.d = a9;
    } catch(e14) {
    }
}
const v15 = new F6(v0, v2, v2, -4.888079504665814);
const v16 = new F6(v1, v1, v0, v0);
const v17 = new F6(v0, v1, v2, v2);
function f21(a22, a23, a24, a25) {
    const o35 = {
        "g": -1000000000000.0,
        "a": F6,
        "f": v0,
        set c(a27) {
            let v29;
            try { v29 = a24["charCodeAt"](-1000000000000.0, a25); } catch (e) {}
            v15[v29];
            try { v29(); } catch (e) {}
            [a25,F6,-1000000000000.0];
            [-4.888079504665814];
            [1.7010029312345237e+308];
        },
        "d": -1000000000000.0,
        "h": -1000000000000.0,
    };
    return o35;
}
const t40 = 2.220446049250313e-16;
t40(NaN, v16, v16, v17);
f21(-337.04821476627194, v17, v17, v15);
f21(NaN, v17, v17, v15);
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f43(a44, a45, a46, a47) {
    function f48() {
        const o52 = {
            toString(a50, a51) {
                return a44;
            },
        };
        o52.toString();
        const o61 = {
            [-4294967297n](a55, a56, a57, a58) {
                eval();
            },
        };
        return o61;
    }
    f48();
    try { ("").charCodeAt(Map); } catch (e) {}
    eval(a47);
    %OptimizeFunctionOnNextCall(f48);
    try { v42["find"](..."find", a47, ...v41, ...v42); } catch (e) {}
    return a46;
}
for (let v69 = 0; v69 < 10; v69++) {
    f43(-4294967297n, -4294967297n, v69, v69);
}
%OptimizeFunctionOnNextCall(f43);
f43();
