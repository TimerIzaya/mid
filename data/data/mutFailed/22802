const v4 = [39777,-1024];
const v5 = [13,989584688,-65535,255,-1206298785,9007199254740992];
v5[4] = v4;
const v6 = [536870887,-9007199254740991,49703,-2,256];
let v7;
try { v7 = v6.pop(); } catch (e) {}
const v8 = v7 / v7;
const v9 = [1000327729,-256,4294967296,4294967297];
let v10;
try { v10 = v9.indexOf(v9); } catch (e) {}
const v11 = [9223372036854775807,5,2147483647,-3090,1073741825,1];
let v12 = [268435439,20566,38431,7,17825];
try { v12.toReversed(); } catch (e) {}
function f14(a15, a16) {
    a16 == a16;
    const v18 = a15?.groupToMap;
    try { new v18(v6); } catch (e) {}
    const o25 = {
        "d": "3HbVH",
        "e": v6,
        "g": "3HbVH",
        set b(a21) {
            a15 = this;
            ({"length":v12,...a16} = v5);
        },
        [v12]: "valueOf",
        "f": v7,
        ...v5,
    };
    o25[4] = o25;
    return v12;
}
const v26 = f14(v11, "valueOf");
v26[4];
f14(v26, v12);
f14(v12, "3HbVH")[1];
try { new Promise("-4294967297"); } catch (e) {}
const v33 = v8.reject(Promise);
const v34 = v33.then(v33);
let v35;
try { v35 = v34.then(v10, "-4294967297"); } catch (e) {}
try { v35.finally(f14); } catch (e) {}
