function f0() {
    const v3 = new Map();
    try { v3.keys(); } catch (e) {}
    function f5(a6, a7) {
        const o14 = {
            "a": a7,
            [v3]: Map,
            [2221](a9, a10, a11) {
            },
            ...v3,
            [a7]: Map,
            valueOf(a13) {
            },
        };
        return f0;
    }
    try { ("331").strike(); } catch (e) {}
    const o44 = {
        128: "331",
        o(a20) {
            try { this["setInt16"](this, "setInt16", "331"); } catch (e) {}
            const v24 = new WeakSet();
            const v25 = [v24];
            class C26 {
                static get g() {
                    super.subarray();
                }
            }
            let [] = "setInt16";
            const v34 = new Int8Array(257);
            new Float32Array(v34);
            const o42 = {
                "execution": "async",
                "d": -1.7976931348623157e+308,
                "arguments": v25,
                __proto__: Map,
                o(a38) {
                    const o40 = {
                    };
                    return gc(o40);
                },
                "type": "minor",
            };
            return gc(o42);
        },
    };
    class C45 {
    }
    C45.__proto__ = "f";
    class C47 {
        #valueOf(a49, a50, a51, a52) {
        }
    }
    return o44;
}
f0();
f0();
f0()[128];
const v60 = [-213088.96658616257,-2.2250738585072014e-308,-1000000.0,381.2987977609912,-245.02342162849834,-4.4522270428192705e+307,-4.0,6.111435178464532,656094.0812608916];
try { v60.find("m"); } catch (e) {}
([6.1294941530875775,2.2250738585072014e-308,-1.4514874530007595e+308,6.798109710293588,8.497796009318707e+307,-289012.52266701416,0.5040961300184104,1000.0,-5.0,-344.0159160961267])[5];
[-8.252960797329528,-0.0,0.0,3.7343887125773065,5.0];
function F66() {
    if (!new.target) { throw 'must be called with new'; }
}
const v68 = new F66();
const v69 = v68?.constructor;
try { new v69(); } catch (e) {}
[v68];
const v72 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v73 = 0; v73 < 5; v73++) {
    function f74() {
        try {
            v72.forEach();
        } catch(e76) {
            e76.message = e76;
            const v77 = e76.constructor(e76, v73, f74, f74, f74);
            const v78 = v77?.constructor;
            try { new v78(v77); } catch (e) {}
            e76.a = e76;
            e76.a = e76;
        }
        return f74;
    }
    f74().prototype;
    %OptimizeFunctionOnNextCall(f74);
}
new Int8Array(8);
13 + 13;
new BigInt64Array(13);
try { Uint32Array.bind(F66); } catch (e) {}
new Uint32Array(5);
gc();
