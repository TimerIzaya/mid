const v3 = new Map();
const v4 = [-65535,-19265,3,-13,65537,128];
const v6 = v3.constructor;
const t1 = 2;
const v7 = new t1();
try { v6(WeakMap, v4, 129, v7); } catch (e) {}
new Uint32Array(2);
([]).length;
class C14 extends BigInt64Array {
}
const v17 = new Uint8ClampedArray(1000);
v17[287];
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
const v21 = new Uint8ClampedArray(2517);
class C22 {
    constructor(a24, a25) {
        function f26(a27) {
            function f28(a29) {
            }
            const v32 = new Uint16Array(1024);
            v32[7] = v32;
            return C22;
        }
        const o35 = {
            "type": "function",
        };
        new Worker(f26, o35);
    }
}
v21[333] = v21;
new Uint8Array(8);
new Uint8ClampedArray(3313);
const v45 = new Uint8Array(99);
try { Array.toString(); } catch (e) {}
const v49 = Array(8);
try { v49.sort(v49); } catch (e) {}
function f51() {
    return f51;
}
const v55 = new Uint8Array(1829);
v55[8] = Uint16Array;
const v56 = f51?.apply;
try { v56(v56, v56); } catch (e) {}
const o59 = {
};
const v60 = gc(o59);
new Uint8ClampedArray(([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4"));
try { v56(8, v49); } catch (e) {}
const v70 = new Map();
try { v70.set(Array, f51); } catch (e) {}
function f72() {
    return v70;
}
let v73;
try { v73 = f72(); } catch (e) {}
try { v73.forEach(v49); } catch (e) {}
const v75 = /(?=.)ha\nb\bc/gum;
v75.dotAll = v75;
class C76 extends f72 {
    static {
        try { new this(); } catch (e) {}
        class C80 extends Int8Array {
        }
        function f82() {
            return 160;
        }
        const v83 = v49.length;
        try { this.m(this, v83, Map, v75); } catch (e) {}
    }
}
C76.prototype = C76;
let v86 = 4087;
v86++;
const t72 = [536870912n,536870912n,536870912n,536870912n,536870912n];
t72.f = v60;
new Set();
function f92() {
    [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
    const v95 = ([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
    let v96;
    try { v96 = v95.search(f92); } catch (e) {}
    return v96;
}
function F97() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 0;
}
try { new Float64Array(v45, Array, Array); } catch (e) {}
