function f0() {
    const o10 = {
        __proto__: 4.28955607867637,
        get d() {
            this[16] = -2.0;
            -2.0 in this;
            const v6 = this[100];
            for (let v7 = 0; v7 < 32; v7++) {
                v6["p" + v7] = v7;
            }
            return -2.0;
        },
        "a": 4.28955607867637,
    };
    function f11(a12) {
        a12 ||= f0;
        const v13 = [Infinity,-1.0,334.9707523876036,1.7976931348623157e+308,-Infinity,9.222971090967075,5.837116397818294,-1.9364306250449163e+307];
        const v14 = [-686672.7285304164,-9.917362466302309e+307,2.220446049250313e-16,5.0,-795.7616940433296,0.07678289127045357,-2.2250738585072014e-308,-1.1183285484106199e+308];
        function f15(a16) {
            const o17 = {
                268435456: v13,
            };
            function f18(a19, a20, a21) {
                this[a16] += a16;
                return this;
            }
            const v25 = [f15,v14,a16];
            const o26 = {
                "arguments": v25,
                "type": "function",
            };
            new Worker(f18, o26);
            return o17;
        }
        return f0;
    }
    o10[Symbol.toPrimitive] = f11;
    return o10;
}
f0();
const v31 = f0();
const v32 = f0();
class C36 {
    #m(a38, a39, a40) {
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeFunctionOnNextCall(f0);
        f0();
        return f0;
    }
    static [v31] = -838361874n;
    [-838361874n];
    0 = v32;
    static #h = 30907n;
}
new C36();
new C36();
new C36();
new BigInt64Array(8);
new Uint8ClampedArray(2105);
new Float32Array(118);
const v58 = [1.0663730977141727e+308,NaN,-1.1534060997380896e+308,-9.26829361922416e+307];
v58.constructor = f0;
["function",/xEz\xe2\x81\xa3/gumy];
class C62 {
}
const v63 = new C62();
ReferenceError(v63);
const v66 = [0.3588640203078587,-1e-15,0.5938791097479088,-1000000000.0];
v58.constructor;
function f68(a69, a70) {
    return Math.tanh("1");
}
%PrepareFunctionForOptimization(f68);
const v74 = [5.453486096719857];
function F75(a77) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.push(F75); } catch (e) {}
    try {
        this.d = a77;
    } catch(e79) {
        let v81 = new Date();
        v81 **= v81;
    }
}
new F75(v58);
new F75(v66);
const v85 = new F75(v74);
v85.a = v32;
v85.a = v85;
let v87 = 2086125797;
v87++;
const o90 = {
};
Math.cos(-1567809689);
256 === 256;
Uint16Array[Symbol.iterator] = ReferenceError;
const v99 = new Uint16Array(Uint16Array);
const v101 = new Uint8ClampedArray(v99);
function f102() {
}
class C103 extends f102 {
}
new C103();
function f106(a107, a108) {
    const o109 = {
    };
    return o109;
}
const v110 = new Set();
function F111(a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = v85;
    try {
        const o120 = {
            o(a116) {
                const o118 = {
                };
                return gc(o118);
            },
        };
        this.d = a113;
    } catch(e121) {
        for (let [v122,v123] of a113) {
        }
    }
    const t128 = 4294967296;
    t128.h = v110;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v130 = [WeakSet];
        v130[4294967296] = v101;
        const v131 = new F111();
        this.b = v130;
        const v133 = new Map();
        v130[4294967296] = Set;
        const v134 = [v131];
        const v135 = [v134,v134,v131,v133];
        [-256n,v135,-41535,v133,v135];
    } catch(e137) {
    }
}
F111.arguments;
new F111();
