const v0 = [1000.0,1000000000000.0,2.0,1000000000000.0,-2.220446049250313e-16,-2.2250738585072014e-308,1.0775361429278658e+308,1.0334299732355903e+308];
const v1 = [-2.220446049250313e-16,1000000000.0,-251536.26927075943,0.7202863716384356,1000000.0,-0.0,1.3998880614541935,-968.276018234501,8.613307299589492e+307,1.0404230312568244e+308];
const v2 = [1.7976931348623157e+308,-346799.56398757803,1.7976931348623157e+308,0.20635668983820787,1.1005904878324766e+308,-5.0,-8.750927137883135e+307,8.379126663012965e+307,-1000000000.0,1.79324118296903e+308];
v0[v2] <<= v1;
v2[v2];
function f4() {
    return v1;
}
Int16Array.name;
const v8 = new Int16Array(8);
for (const v11 in v8) {
    Object.defineProperty(v8, "d", { set: f4 });
}
%VerifyType(Int16Array);
new Uint8ClampedArray(4096);
new BigInt64Array(204);
256n ^ 256n;
-4294967296n + -4294967296n;
1 === 1;
try { Reflect.set(8, Uint8ClampedArray, 1); } catch (e) {}
try { ("atan2").match(BigInt64Array); } catch (e) {}
let v31 = 10;
while ((() => {
        new WeakMap(WeakMap, 9);
        function F35() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new Int32Array(v0, [-946.1982015264321,-406.6809700455609], Int32Array, Int32Array, 268435441);
        return v31 < 1;
    })()) {
    v0[BigInt64Array] **= -4;
    const v41 = v31++;
    v41 >= v41;
}
for (let [v43,...v44] of "atan2") {
    try { v43.codePointAt(v43); } catch (e) {}
}
