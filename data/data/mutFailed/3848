function f0() {
    const o7 = {
        "f": "2147483648",
        "e": "2147483648",
        ..."boolean",
        set c(a5) {
            const t6 = "2147483648";
            t6[this != a5] <<= a5;
        },
        "h": "2147483648",
        [0.2323544746852768]: 0.2323544746852768,
        "c": "boolean",
        "b": "2147483648",
        "a": 0.2323544746852768,
        __proto__: "2147483648",
        "g": "boolean",
        255: 0.2323544746852768,
        13: "2147483648",
    };
    function f8() {
        return f0;
    }
    function f9(a10) {
        +-65537;
    }
    Object.defineProperty(o7, "toString", { enumerable: true, get: f8, set: f9 });
    return o7;
}
let v13 = f0();
const v14 = f0();
const v15 = f0();
v15[4] = v15;
Float64Array[1] = f0;
Float64Array[0] = v14;
new Float64Array(257);
const v23 = new Date();
v23["getUTCMilliseconds"]();
class C27 {
    #toString(a29, a30, a31, a32) {
        v13 = a32;
        [,];
        try {
            BigInt(BigInt);
        } catch(e37) {
        }
        this[v15];
        let v40;
        try { v40 = v13.valueOf(); } catch (e) {}
        return 4.0 & v40;
    }
    static 2;
    static #e = true;
    h = f0;
    d;
}
const v42 = new C27();
new C27();
const v44 = new C27();
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
}
Float64Array[2] = f0;
new Float64Array(Float64Array);
const v52 = [];
function f53() {
    const v55 = -v52 && v52;
    -v55;
    return v55;
}
try { v44.h(); } catch (e) {}
function F58(a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
}
F58.arguments;
const v63 = new F58();
function f64() {
    function f65() {
        [9.124524210311723,-8.392995992787444e+307,-1.2769899556655539e+308,601.5806024174265,-4.0,0.0];
        const v67 = [-1.4314744884810376e+308];
        [-1000000.0,-2.220446049250313e-16,Infinity,-1000000000000.0,2.2250738585072014e-308,1.7976931348623157e+308,1.7976931348623157e+308];
        return v67;
    }
    return f65;
}
function f69(a70) {
    function F71() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
Object.defineProperty(v63, "constructor", { writable: true, configurable: true, get: f64, set: f69 });
try { v63.constructor(4.0, true); } catch (e) {}
function f75() {
    return f53;
}
Object.defineProperty(Math, "valueOf", { writable: true, get: f75 });
Math.toString = Date;
Math.sinh(Math);
const v80 = new Uint8ClampedArray(5);
new Float32Array(v80);
async function f82(a83, a84, a85, a86) {
    a83.fuck();
    await v63;
    const v90 = new Int8Array();
    v90.buffer;
    const v94 = new WeakMap();
    v94.set(Uint16Array);
    return F58;
}
const v97 = f82()?.then;
try { new v97(v14, v42); } catch (e) {}
