(26).split(26);
Float32Array[1] = -1e-15;
class C4 {
    static {
        for (let v9 = 0; v9 < 32; v9++) {
        }
    }
}
const v12 = new BigInt64Array(26);
C4.constructor;
const v16 = new Int16Array(1371);
([0.7021385356541069,NaN,3.752300846891645,76.93522341476432,-277.4575758719999,9.404843788357361,-320.7110241266939])[Symbol.hasInstance];
new Int32Array(131);
4080 + 4080;
new Int16Array(4080);
class C29 {
    set e(a31) {
        Math.fround();
        Math.ceil();
    }
    m(a36) {
    }
    e;
}
const v37 = new C29();
const v39 = new BigInt64Array(6);
try { v39.findLast(4080); } catch (e) {}
function f43() {
    const o47 = {
        ...1.0,
        set b(a46) {
        },
    };
    o47.b = o47;
    return o47;
}
f43();
%OptimizeFunctionOnNextCall(f43);
try { new Uint32Array(v37, Int16Array, Int16Array); } catch (e) {}
new Uint32Array(9);
new Uint16Array(15);
const v56 = new Int32Array(127);
function f57(a58, a59) {
    2 ^ 2;
    v12[Int16Array] **= 4080;
    delete v16[-1000000000.0];
    function f66() {
        const o71 = {
            ..."D",
            ..."D",
            "c": "D",
            "h": "getHours",
            104: "D",
            get e() {
                return "getHours";
            },
            "d": "getHours",
            1: 4294967296,
            "g": "D",
        };
        return o71;
    }
    f66();
    %PrepareFunctionForOptimization(f66);
    a58.length;
    a59.length = a59;
    return v56.toSorted();
}
try { new f57(v12, v39); } catch (e) {}
Promise.prototype;
new Promise(f57);
const v80 = new Float64Array(6);
new Float64Array(v80);
v16.a = 26;
4.0 - 4.0;
9n | 9n;
/(?:a+)*xyz?0xyz{93}/gudi;
