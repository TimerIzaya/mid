const o5 = {
    valueOf() {
        "symbol" instanceof "symbol";
        return "boolean";
    },
};
class C6 {
    get b() {
        try { this.m(); } catch (e) {}
        Math.exp([-268435456,1000]);
        const v14 = new Uint8Array(2, 2, 2);
        const v16 = new Uint32Array();
        const o20 = {
            "b": C6,
            ...v14,
            n(a18, a19) {
                v16[C6] = v16;
            },
        };
        const v22 = ["boolean","boolean"];
        Reflect.apply(("symbol").replaceAll, this, v22);
        try { v22.reverse(); } catch (e) {}
        return -15;
    }
    static {
        try {
            const v27 = super.valueOf(this, this, this, "boolean");
            v27.length = v27;
        } catch(e28) {
        }
        let {"length":v29,} = "boolean";
        try {
            const t32 = "boolean";
            t32.toString = "boolean";
        } catch(e30) {
        }
    }
}
const t38 = "symbol";
delete t38[6];
C6.c = [C6];
6 >>> 1;
try {
    const t43 = "symbol";
    t43.length = -15;
} catch(e36) {
}
C6.length = C6;
const v37 = new C6();
new C6();
const v39 = new C6();
let v40;
try { v40 = v39.toLocaleString(); } catch (e) {}
const v46 = new Float32Array(1334);
v46[1283] = v46;
("undefined").charAt();
const v49 = Symbol.iterator;
class C50 {
}
Math.atan2(257, 257);
v39[v49] = v49;
if (v40) {
    function F54() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v58 = new SharedArrayBuffer(945);
    v58.slice();
    try { v40(C6, -15, v37); } catch (e) {}
} else {
    const o64 = {
        "execution": "sync",
        "type": "ceqqw",
    };
    gc(o64);
}
const o74 = {
    "execution": "async",
    ["major"](a70, a71) {
    },
    set b(a73) {
    },
    "maxByteLength": -15,
    "type": "major",
};
const v75 = Uint32Array(o74);
const v76 = new Array(156);
let v79 = -268435456;
typeof (v79++) === "bigint";
Array << v75;
v76[v39];
let v87 = 0.8710327391708468;
v87++;
Math.sinh(v87);
