new Uint8ClampedArray(9);
let v3 = 91;
v3 <= v3;
v3 >>> v3;
const v7 = new Int16Array(v3);
try { v7.join(9); } catch (e) {}
new Uint8Array(164);
class C12 {
    static set e(a14) {
        for (let i17 = 0, i18 = 10;
            (() => {
                const v19 = i17 < i18;
                let v20 = 3375;
                const v22 = new BigUint64Array(v20);
                Math.tan(--v20);
                v3--;
                let [v27,,v28,...v29] = v22;
                v27--;
                return v19;
            })();
            i17++) {
        }
        new Uint32Array(3205);
        new Uint32Array(147);
        new Int8Array(7);
    }
}
C12.f = C12;
new C12();
const v46 = new C12();
const v47 = v46?.constructor;
try { new v47(); } catch (e) {}
const v49 = new C12();
const v50 = v49?.constructor;
v50.g = v50;
let v51;
try { v51 = new v50(); } catch (e) {}
v51.__proto__ = v51;
const v52 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F53(a55, a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    const v59 = this?.constructor;
    try { new v59(a58, a58, a55, this); } catch (e) {}
    const v61 = this?.constructor;
    v61.prototype = v61;
    let v62;
    try { v62 = new v61(v46, a56, a55, a56); } catch (e) {}
    const v63 = v62?.constructor;
    try { new v63(); } catch (e) {}
    function f65(a66, a67, a68) {
        const v69 = v52.__proto__;
        try { v69.findLastIndex(this); } catch (e) {}
        return a66;
    }
    f65(a57, a57, a57);
}
F53.length;
F53.a = F53;
new F53();
