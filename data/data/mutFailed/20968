const v0 = [];
const v1 = [-15503,13,9007199254740992];
const v2 = [-1,257,4096,222468437,1073741824,-65536];
const v3 = [-4294967296,-503446083,1073741825,16,317945253,16,1785661585,2];
const v4 = [v3,v3,v2,v1,v2];
[v3,v0,v0,v3,v1];
[v2,v3,v1,v1,v4];
new Map();
[-57832,0,6,13,-4294967296,-1857462449,24721,16017,10,345889691];
[-4294967296,4294967296,65535,-59150,9007199254740991,1073741823,51948,1073741824];
[-1393559025,27815,3];
new Array(127);
[4294967296,-8];
const v16 = [-9007199254740992,129,-2147483647,1000,-4,-5,1073741823,257,2147483648,8];
const v17 = [];
v17.constructor = Array;
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
}
new F18();
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C26 {
}
const v27 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v28 = [601759695];
for (let v29 = 0; v29 < 5; v29++) {
    function f30() {
        const v33 = Array();
        v33.toString = Array;
        const v34 = v33.unshift();
        try {
            v25.forEach(Float64Array);
        } catch(e36) {
        }
        const o37 = {
            "c": v28,
            "arguments": v27,
            ...Float64Array,
            "type": C26,
        };
        const v38 = [v33,v33];
        function f39() {
        }
        Symbol.toPrimitive;
        v38[v16] = f39;
        function F42(a44) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C45 extends F42 {
            valueOf(a47, a48, a49, a50) {
            }
        }
        const v51 = new F18();
        const o58 = {
            set g(a53) {
            },
            [v38](a55, a56, a57) {
            },
        };
        for (const v59 in o58) {
            try { v17.flat(); } catch (e) {}
            new C26();
            try { v51.valueOf(v59); } catch (e) {}
        }
        return v34;
    }
    f30();
    %OptimizeFunctionOnNextCall(f30);
}
