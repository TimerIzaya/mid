const v2 = new Uint32Array(51);
const v5 = new BigUint64Array(3188);
const v8 = new Uint8Array(9);
class C9 extends BigUint64Array {
    a;
    #c;
    f = Uint32Array;
    #d = 9;
    static #p(a11, a12, a13) {
        try {
            this.#c;
        } catch(e15) {
        }
        return a13;
    }
    static b = v5;
    constructor(a17, a18) {
        super(v8, 3188, a17);
        super[Uint8Array] = this;
        let [v19] = this;
    }
    8 = Uint8Array;
}
const v20 = new C9(v2, v8);
new C9(v20, 9);
new C9(51, v2);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
}
const v27 = new F23();
async function f28(a29, a30, a31, a32) {
    a29.fuck();
    await v27;
    return F23;
}
f28();
function f0() {
    const o4 = {
        1: 1646732670,
        268435456: 1646732670,
        256: 1646732670,
        "e": 9007199254740991,
        ..."boolean",
        "a": 9007199254740991,
        ..."boolean",
        "f": 1646732670,
        __proto__: "boolean",
        "d": 1646732670,
        [9007199254740991]: 1646732670,
    };
    return o4;
}
f0();
f0();
f0();
/(Wa[a]+)/mgsuy;
/xyz{0,1}/mvgsyd;
/T6\xed\xa0\x80/visy;
class C14 {
    set a(a16) {
        a16 !== -128;
        try {
            super.g = a16;
        } catch(e18) {
        }
    }
    #h;
    static #f;
    #d = -128;
    #e = 1073741824;
}
new C14();
const v20 = new C14();
new C14();
function f22() {
    const o27 = {
        [-50127](a26) {
        },
        "f": -1790469273,
    };
    return o27;
}
%PrepareFunctionForOptimization(f0);
f22();
f22();
class C33 {
    static [-8.662521944722695];
    m(a35) {
        function f36() {
            return "trim";
        }
        Object.defineProperty("trim", 5, { enumerable: true, set: f36 });
        return -10913;
    }
    o(a38, a39) {
        let v40;
        try { v40 = this(-10913, "trim", -10913, this, a39); } catch (e) {}
        const v41 = -10913 == v20;
        try {
            v40.f = v41;
        } catch(e42) {
        }
        return -10913;
    }
}
const v43 = new C33();
const v44 = new C33();
const v45 = new C33();
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f0;
    try {
        this.b = a49;
    } catch(e52) {
    }
    try {
        this.g = v44;
    } catch(e53) {
    }
}
const v54 = new C33(v45, v45);
const v55 = new F46(v54, v54);
const v56 = new F46(F46, v55);
let v58;
try { v58 = v55(3, v45, 3, -8.662521944722695, v43); } catch (e) {}
v56 / v58;
class C60 {
    static #a = -10913;
    [F46];
    65535;
    static #b = 1073741824;
    g = v43;
}
new C60();
new C60();
new C60();
