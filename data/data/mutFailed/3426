function f0() {
    class C3 {
        #m(a5, a6) {
            function f7() {
                return a6;
            }
            super[a6] = "f";
            %VerifyType(a6);
            return f7;
        }
        static c;
    }
    const v8 = new C3();
    [v8];
    function F14(a16, a17, a18) {
        if (!new.target) { throw 'must be called with new'; }
        const v19 = this.constructor;
        const v20 = new f0();
        [v19,v19,"replace",121,f0];
        [C3];
        [v20,this];
        try {
            new C3();
        } catch(e25) {
        }
        try { new v19(a18, v8); } catch (e) {}
        a16 % a16;
    }
    new F14(820, 121);
    const o33 = {
        "a": 1073741825,
        ["replace"]: 1073741825,
        ..."replace",
        [268435456](a30) {
            try {
                const t35 = "replace";
                t35.c = this;
            } catch(e31) {
            }
            try { new a30(this); } catch (e) {}
            return 1073741825;
        },
    };
    return o33;
}
const v34 = f0(f0);
const v35 = f0();
const v36 = f0(v35, v35);
function f40() {
    return 1073741824;
}
try { f40(); } catch (e) {}
class C42 {
    constructor(a44, a45) {
        a44 >> a44;
        function F47(a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v34;
            } catch(e51) {
                Math.tan(-23394);
                function f55(a56) {
                    return a56;
                }
            }
        }
        const v57 = new F47(v35, this);
        const v58 = v57?.__lookupSetter__;
        try { new v58(a44); } catch (e) {}
        const v60 = new F47(this, v34);
        v60.e = v60;
        new F47(v34, v36);
    }
}
C42.d = C42;
new C42(7, 1024);
const v63 = new C42(7, 7);
const v64 = v63?.constructor;
try { new v64(v36, f40); } catch (e) {}
const v66 = new C42(1073741824, 7);
v66.length = v66;
const v67 = [-4563];
v67.g = v67;
new Int32Array(v67);
