const v2 = new BigUint64Array(594);
const v5 = new Uint8ClampedArray(11);
const v8 = new Int32Array(256);
class C9 {
    toString(a11, a12, a13) {
        super.h;
        try {
            new Uint8ClampedArray(1);
        } catch(e17) {
        }
        return v2;
    }
    static [256];
    [Int32Array] = 11;
}
const v18 = new BigUint64Array();
v18[9] = v2;
let v19;
try { v19 = v2.reduceRight(C9, Uint8ClampedArray); } catch (e) {}
new C9();
let v21;
try { v21 = v19(Uint8ClampedArray, v2, 11); } catch (e) {}
v21 === v19 ? v21 : v19;
const v24 = new Uint8ClampedArray();
const v25 = new Uint8ClampedArray();
[560.3764338321384,2.831189514697529,-1.0,1000.0,-2.4858124652164726,1000.0,1000000.0,1000000.0,6.670434684407409e+307,-Infinity];
new C9();
const o30 = {
};
try {
    o30.f = v25;
} catch(e31) {
}
try {
    const o32 = {
    };
    o32.f = v25;
    o32.a = v8;
} catch(e33) {
}
try {
    const o34 = {
    };
    o34.f = v25;
    o34.a = v8;
    o34.e = v5;
} catch(e35) {
}
try {
    const o36 = {
    };
    o36.f = v25;
    o36.a = v8;
    o36.e = v24;
} catch(e37) {
}
try { C9.entries(); } catch (e) {}
const v39 = v5[40];
for (let v40 = 0; v40 < 5; v40++) {
    try { v39(); } catch (e) {}
}
[-2.220446049250313e-16,-146030.0093347557,-759818.7684978913,1000000000000.0,-1.2175538670763404e+307];
const v43 = [4.0];
const v45 = new BigUint64Array();
/anVXYFzN(x)(x)(x)\3/gvdms;
try { v45.reduceRight(v39); } catch (e) {}
[-1.7976931348623157e+308,v43];
