function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1757003781;
    } catch(e3) {
    }
    try {
        this.c = 1757003781;
    } catch(e4) {
    }
    try {
        this.f = 1757003781;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
-1011474456n & -1011474456n;
let v13 = -49230;
v13--;
const v18 = new Uint8Array();
for (let v19 = 0; v19 < 500; v19++) {
    const o23 = {
        ...v18,
        n(a21, a22) {
        },
    };
}
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = v7?.constructor;
    try { new v30(F0, v7, a26, v7); } catch (e) {}
    const v32 = a26?.constructor;
    let v33;
    try { v33 = new v32(); } catch (e) {}
    a28--;
    a29.e = v33;
    try {
        this.a = -14;
    } catch(e35) {
        const v37 = 1000000000.0 >> 1000000000.0;
        const o38 = {
            ...v37,
        };
        o38.g = o38;
    }
}
1000 == 1000;
const v43 = ([Float32Array])["concat"]();
v43.pop();
new F24(v7, v6, v43, v8);
new F24(v6, v6, F0, v43);
const v47 = new F24(v8, v7, -14, v7);
v47.a;
Array.length = Array;
const v51 = Array(2597);
Uint32Array.prototype = Uint32Array;
Uint32Array.from(v51);
for (let v54 = 0; v54 < 10; v54++) {
    let v55 = 0;
    while ((() => {
            Symbol.isConcatSpreadable;
            v13 < 1;
            const t0 = [4294967296,-256];
            const v62 = delete t0.length;
            v55 < 2;
            return v62;
        })()) {
        v55++;
    }
}
class C65 extends v43 {
}
new C65();
for (let v68 = 0; v68 < 5; v68++) {
    0 == 5n;
}
