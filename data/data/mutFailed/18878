class C3 {
    536870888;
    static 9 = "1024";
    a = "1024";
    o(a5) {
        return super.a;
    }
    #f = "1024";
    d = -11040915;
    85 = "1024";
    static #d = "1024";
}
const v10 = C3?.__lookupSetter__;
try { new v10(C3); } catch (e) {}
const v12 = new C3();
v12[536870888] = v12;
const v13 = new C3();
v13.d = v13;
const v14 = new C3();
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v14;
    } catch(e20) {
    }
    try {
        this.d = a19;
    } catch(e21) {
    }
    try {
        this.f = a17;
    } catch(e22) {
    }
}
const v23 = new F15(C3, v13, v13);
const v24 = new F15(v13, v13, F15);
v24.e = v24;
new F15(v12, v12, "1024");
class C26 {
    static #p(a28, a29, a30, a31) {
        let v35 = 11 ** 11;
        let v36 = 7 && 7;
        -v14;
        +v36 >>> v35;
        ++v35;
        v36--;
        return 7;
    }
    10 = v23;
}
const v42 = C26?.apply;
try { new v42(v13, v23); } catch (e) {}
new C26();
new C26();
const v46 = new C26();
try { v46.toString(); } catch (e) {}
let v48 = [-5.034735835956977e+307,-385.25474675985527];
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = this.valueOf().constructor;
    v54[536870888] = v54;
    try { new v54(); } catch (e) {}
    const v59 = Math.imul(--v48);
    v59 & v59;
    +this;
}
F49.prototype = F49;
const v62 = new F49();
v62.f;
new F49();
