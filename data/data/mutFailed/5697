const v0 = /\u{12345}\u{23456}a\sc(?:ab)?/guim;
/(ab)\1(?<a>.)\k<a>/udim;
function f4() {
    const v5 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
    class C7 {
        static #e;
        m(a9, a10, a11, a12) {
            v5.#e;
            a10.#e = -1;
        }
    }
    return v0;
}
Uint8ClampedArray.valueOf = f4;
const v20 = new Uint8ClampedArray(64);
v20.includes(64);
/F(a)\1/um;
function f28() {
    return f4;
}
Object.defineProperty(Uint8ClampedArray, "toString", { writable: true, configurable: true, enumerable: true, get: f28 });
const v29 = new Uint8ClampedArray(3);
new Float32Array(10);
new BigUint64Array(128);
const v36 = /xyz{0,1}ja.a(?=b)/ui;
class C37 {
}
const v38 = new C37();
const v42 = new Set();
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    a46[Symbol.toPrimitive] = f28;
    try {
        this.d = a45;
    } catch(e49) {
        for (let [v50,v51] of a45) {
            new Array(2);
            new Int8Array(253);
            new Uint32Array(16);
            new Int16Array(0);
            try {
                v42.values();
            } catch(e63) {
            }
        }
    }
    try {
        this.h = v42;
    } catch(e64) {
    }
    if (a46 >= Uint8ClampedArray) {
        try { v29.reverse(); } catch (e) {}
    } else {
    }
    var h = v36;
    try {
        a46.e = v38;
    } catch(e70) {
    }
    try {
        const v71 = v42[this];
        try {
            new F43(v71, -268435456n);
        } catch(e74) {
        }
        this.b = Set;
    } catch(e75) {
    }
}
F43.valueOf = f4;
const v76 = new F43(F43, 2);
const v77 = new F43(v76, F43);
new F43(v77, null);
