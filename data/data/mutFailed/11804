const v0 = [];
class C1 {
    static f;
    set b(a3) {
        const v4 = v0.length;
        try { v0.lastIndexOf(v4); } catch (e) {}
        try {
            v0.toString = a3;
        } catch(e6) {
        }
    }
    f;
    [v0];
}
const v7 = new C1();
const v8 = new C1();
const v9 = new C1();
v9.f;
function f11(a12) {
    a12.f = a12;
    const o22 = {
        "c": v9,
        "f": v8,
        set g(a14) {
            super[v9] = a14;
            -1.0 - 35908;
            a14 ^ 35908;
            -a14;
        },
    };
    try { o22.hasOwnProperty(v9); } catch (e) {}
    return v0;
}
const v24 = f11?.bind;
try { new v24(v7); } catch (e) {}
const v27 = f11(v9)?.reverse;
try { new v27(); } catch (e) {}
const v29 = f11(v8);
const v30 = f11(C1);
try { v30.findLast(v30); } catch (e) {}
const v32 = [-0.23549034038133065];
async function f33(a34, a35, a36, a37) {
    return await v32;
}
new BigInt64Array(v29);
Int16Array.e = Int16Array;
new Int16Array(738);
new Int16Array(0);
function f48(a49) {
    return a49;
}
f48.d = f48;
class C50 extends f48 {
    constructor(a52) {
        function f53() {
            return f53;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f53 });
    }
}
C50.caller = C50;
const v54 = new C50();
Object.defineProperty(v54, 2075456563, { get: f48, set: f48 });
const v56 = new Date();
v56.getMonth();
class C61 {
    constructor(a63, a64) {
        a64.__proto__;
    }
    f;
    set d(a67) {
        super.d;
        const o69 = {
        };
    }
}
const v70 = new C61(-9340, 2147483649);
const v71 = new C61(-9340, 1073741823);
const v72 = new C61(1073741823, v70);
function F73(a75, a76, a77, a78) {
    if (!new.target) { throw 'must be called with new'; }
}
const v79 = new F73(v70, v71, 1073741823, -9340);
const v80 = new F73(v70, v72, -9340, 1073741823);
v79.fuck(v80, 1136);
