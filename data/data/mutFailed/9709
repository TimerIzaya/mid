[3,-4294967296,255,-10,10];
const v4 = [-6,65535];
const v5 = [268435441,-1894462686,9007199254740990,-993764000,-5,206889513];
const v6 = [268435441,-268435456,-1374625560,-7,-9007199254740991,0,-4294967296,129];
const v8 = new Float64Array(Float64Array, Float64Array, Float64Array);
const v11 = new Uint8Array(1010);
try { v8.filter(v8); } catch (e) {}
const o13 = {
    268435439: Uint8Array,
    "e": v5,
    "a": 9223372036854775807,
    ...v5,
    "c": -9007199254740991,
    "d": -9007199254740991,
    ...v11,
};
const v14 = [13,-9223372036854775808];
const v15 = [-250687858,9223372036854775807,-824385371,-11492,1779472960,1073741824,2147483648,663533914,1359976805,-1];
const v18 = new Array(44);
const v19 = [9223372036854775807,v15,Array,44,-428824916];
[-9007199254740991,v4,v19,v15];
[v6,v19];
function f22() {
    return v14;
}
o13 > Uint8Array;
/z[\cZ]+/diy;
/xyz??/usy;
/[\ca]Wxyz{1,32}?/uiy;
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this.constructor;
    a30 + v18;
    for (let v35 = 0; v35 < 32; v35++) {
        a31["p" + v35] = v35;
    }
    try { new v33(v33, a32); } catch (e) {}
    for (const v40 in this) {
    }
}
new F27();
