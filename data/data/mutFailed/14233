class C4 {
    #valueOf(a6, a7) {
        this[-4.0];
        new Float64Array(3);
        new BigUint64Array(BigUint64Array);
        new Int8Array(8);
        return a7;
    }
}
const v18 = new C4();
const v19 = new C4();
new v19();
class C21 extends C4 {
    #a;
    get b() {
        try {
        const t0 = null;
        t0(1.3424395544178748e+308, this);
        } catch (e) {}
        super[v18];
        return 1.3424395544178748e+308;
    }
    static #c = C4;
    static 9 = null;
    static d;
    static b;
}
new C21();
new C21();
new C4();
const v28 = [9007199254740990,1489104538,10,-1424616853,268435439,-32262,-2147483649,-63960,2,734739605];
const v29 = [-8,127,65535];
const v30 = [7,2147483648,1073741824,-1427988041,2,9];
const v31 = [-1000000000000.0,-2.0,1000000000000.0,0.901537490064662,-1.7976931348623157e+308,-385.3512032399924];
const v32 = [-1e-15,0.20747719464528913,-5.0];
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    try { new v37(v31); } catch (e) {}
    a35[5] = a35;
    for (const v39 of v30) {
        let v40 = delete v29?.length;
        Math.min(v40);
        --v40;
        Math.acos(v32 * v40);
    }
}
new F33(v30);
new F33(C4);
new F33(v28);
