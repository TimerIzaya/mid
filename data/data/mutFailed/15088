function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -4294967295;
    } catch(e3) {
    }
    try {
        this.d = -4294967295;
    } catch(e4) {
    }
}
function f5(a6) {
    const v9 = new Int16Array();
    try { v9.fill(-55149n); } catch (e) {}
    return v9;
}
F0.valueOf = f5;
const v11 = new F0();
function f12(a13) {
    return v11;
    const o17 = {
        "execution": "sync",
        "type": "major",
    };
    gc(o17);
    return gc;
}
v11.valueOf = f12;
new F0();
new F0();
let v21 = 7;
v21++;
v21 % v21;
const v25 = new BigInt64Array(v21);
-6;
function f29() {
    return f12;
}
function f30(a31) {
    let [...v32] = v25;
}
Object.defineProperty(Int16Array, "toString", { writable: true, enumerable: true, get: f29, set: f30 });
const v33 = new Int16Array(6);
const v34 = v33?.toString;
try { new v34(); } catch (e) {}
let v36 = 3;
v36--;
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v39 = new Float32Array(v36);
try { v39.subarray(v11, 6); } catch (e) {}
try { Float32Array.of(); } catch (e) {}
const v43 = new Float32Array();
v43.constructor = f12;
try { v43.subarray(F0, Int16Array); } catch (e) {}
5 % 5;
5 !== 5;
const v48 = 5 << 5;
let v50;
try { v50 = new Uint32Array(v21, Uint32Array, v48); } catch (e) {}
v50.valueOf = f30;
v50[6] = v50;
const v51 = new Uint32Array(5);
v51[2] = v51;
v51[v51] = v43;
