let v0 = Map;
new v0();
function f4(a5, a6) {
    const v10 = new Float64Array(203);
    new Float32Array(v10);
    return a6;
}
Uint8Array[Symbol.toPrimitive] = f4;
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v14 = new Uint8Array(168);
function f17() {
    class C18 {
    }
    return C18;
}
Uint8Array[Symbol.toPrimitive] = f17;
try { Uint8Array.toString(); } catch (e) {}
Uint8Array.d = Uint8Array;
const v22 = new Uint8Array(929);
function f23() {
    for (let v24 = 0; v24 < 25; v24++) {
    }
    return Uint8Array;
}
v22[Symbol.toPrimitive] = f23;
v22[34] = v22;
const v28 = v0--;
const v29 = delete v22?.byteLength;
v29 && v29;
v29?.c;
v29 ^ v14;
let v33 = 0.6508115728845194;
const v34 = v33++;
-4.0 + -4.0;
-(-5.0);
function f40() {
    return v34;
}
Uint32Array[Symbol.toPrimitive] = f40;
const v46 = v22[Uint32Array];
try { v46(); } catch (e) {}
const v48 = [-4.0,-1e-15];
try { v48.toString(); } catch (e) {}
const v50 = [-7.264687027014153e+307];
try { v50.pop(); } catch (e) {}
[-978180.2101221628,-1.7976931348623157e+308,-0.0,330.9090124803174,718.0964438768976,4.0];
const v53 = new Uint32Array(1132);
let v54;
try { v54 = v53.reverse(); } catch (e) {}
v54[429];
function f56(a57, a58, a59, a60) {
    const o65 = {
        [f56](a62, a63, a64) {
        },
    };
    return a60;
}
f56.e = f56;
%OptimizeFunctionOnNextCall(f56);
const v66 = f56();
const o67 = {
    "f": 1132,
};
o67 + -4.0;
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    a71[0] = a71;
    a72.toString = Symbol;
    const v75 = this?.__defineGetter__;
    try { new v75(v66, v66); } catch (e) {}
    try { a71.unshift(a72); } catch (e) {}
    a73 != a73;
    let v79;
    try { v79 = a71.toSpliced(a72, a72); } catch (e) {}
    const v80 = v79?.__defineSetter__;
    try { new v80(v22, a71); } catch (e) {}
    a73 >>> a73;
    try { a74.forEach(a74); } catch (e) {}
    try {
        this.a = Uint32Array;
    } catch(e84) {
    }
    try {
        this.b = a72;
    } catch(e85) {
    }
}
const v86 = new F69(v50, Uint8Array, 1132, v50);
const v87 = new F69(v50, v86, v66, 1132);
const v88 = v87?.a;
try { new v88(v33, Uint8Array, F69); } catch (e) {}
const v90 = new F69(v48, v28, 1132, 929);
v90.b;
