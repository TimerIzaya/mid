const v0 = [1073741824,-1965615568,34771,771469838,2406,22336,9];
[-60492,-4294967297];
const v2 = [-33863,-536870912,2116936003,65537,-61892,422755111,5];
const v5 = new Int16Array(v2);
function f6() {
    function f7() {
        return f7;
    }
    return f7;
}
v5[Symbol.toPrimitive] = f6;
let v10 = 194;
new Error(v10);
const v15 = new BigUint64Array(3662);
function f16(a17, a18, a19, a20) {
    const o34 = {
        set b(a22) {
            try {
                Reflect.ownKeys();
            } catch(e25) {
            }
            this << this[a20];
        },
        3114006988: Int16Array,
        "g": v5,
        [v5]: a19,
        [v10]: v10,
        ...v15,
        "h": Error,
        next() {
            v10--;
            v10 == 0;
            const o32 = {
            };
        },
        __proto__: v5,
        "toStringTag": a20,
        "b": BigUint64Array,
        "h": a18,
        "a": a17,
        "f": v0,
        /*
        __proto__: v10,
        */
        [3662]: BigUint64Array,
        get h() {
        },
        "arguments": v2,
        ...v2,
        "c": a18,
    };
    return Error;
}
f16(3662, v10, v2, v5);
f16(v10, 3662, v0, -9);
f16(-9, -9, v0, -9);
Reflect.replace = 3662;
Reflect.replace = [Reflect,Reflect,Reflect];
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    this.message = "b";
    this.d = a44;
}
const v45 = new F41();
const o46 = {
    ...v45,
};
