const v1 = [2.220446049250313e-16,-2.0,9.472378156545009,0.0,1e-15,0.3751557433004281,0.0,-474740.46049005154];
function f2(a3) {
    return v1;
}
v1[Symbol.toPrimitive] = f2;
const o21 = {
    "maxByteLength": 4096,
    [v1](a10, a11, a12, a13) {
        [,];
    },
    set h(a17) {
    },
    __proto__: v1,
    o(a19, a20) {
        return this;
    },
};
let v23 = new Int8Array(4096);
const v26 = new BigUint64Array(256);
const o37 = {
    valueOf() {
        function f32(a33, a34) {
            const o35 = {
                "g": a33,
                "h": "a",
            };
            return o35;
        }
        f32(2147483648);
        v26[1073741825] += 256;
        v23 %= v23;
        return 4096;
    },
};
new Int32Array(242);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = new Uint8Array(3521);
    v43.includes(false);
    function f46(a47) {
        const v48 = [58584,15,9007199254740990,2146023485];
        const v49 = /((((.).).).)?/gvdimy;
        const v50 = /C/gudm;
        let v53;
        try { v53 = Uint32Array(Uint32Array, 1391, v49); } catch (e) {}
        v50.dotAll = v53;
        Object.defineProperty(v48, 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f46 });
    let v55 = 1073741825;
    try {
        v55++;
        Math.log10(([]).length);
        Math.tan(-532550611);
    } catch(e66) {
    }
}
const v71 = [4096,256];
const v72 = ("16").slice;
Reflect.apply(v72, "16", v71);
new Int8Array(4096, 256);
Math.asin();
Symbol.toPrimitive;
const v82 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const o83 = {
};
new Proxy(v82, o83);
this[256] = BigUint64Array;
new BigInt64Array(256);
class C90 {
}
v72[Symbol.replace];
const o96 = {
    "b": 1e-15,
    [3](a95) {
    },
};
delete o96.b;
