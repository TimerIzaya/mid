const v2 = [-268435456];
class C3 {
}
C3.length = C3;
const v4 = new C3();
let v5;
try { v5 = v4.isPrototypeOf(v4); } catch (e) {}
v5 && v5;
function F7() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v2;
    try { this.toString(); } catch (e) {}
    Object.defineProperty(this, "f", { writable: true, enumerable: true, value: this });
    class C10 {
    }
    C10.name;
    const v13 = -25283n && -25283n;
    v13 ^ v13;
    Math.sin(-268435456);
    try {
        this.f = null;
    } catch(e18) {
    }
    try {
        this.d = null;
    } catch(e19) {
    }
    try {
        class C20 {
        }
        try { new C20(); } catch (e) {}
        const v22 = new C20();
        const v23 = v22?.constructor;
        try { new v23(); } catch (e) {}
        const v27 = new Int16Array(3);
        v27[2] = v27;
        this.h = null;
    } catch(e28) {
        const t38 = [-3.0];
        t38[2] = 3.0;
        for (let i33 = 0, i34 = 10;
            (() => {
                const v35 = i33 < i34;
                class C36 {
                }
                const v39 = new BigUint64Array(3375);
                let [v40,,v41,...v42] = v39;
                return v35;
            })();
            i33++) {
        }
    }
}
new F7();
new F7();
new F7();
[-1e-15,2.298369560681503e+307,4.0];
[-0.0,851.5717689883297,-640478.6859324838,-156049.2807907681,-5.0];
[-944929.1456271937,-1e-15,-1000000000.0,-3.0,362679.7832051541,430891.5334105713,-4.0,-146308.679572811,306.8232155180483];
new Map();
2 >>> 2;
function f64() {
    return Array;
}
Object.defineProperty(Array, "constructor", { get: f64 });
function f65() {
    return f65;
}
function f66() {
    class C67 {
    }
    C67.length = C67;
    const v68 = Array.constructor;
    try { new v68(-2.2250738585072014e-308); } catch (e) {}
    class C70 {
        static {
            this.d = this;
            const v72 = this.__proto__;
            v72.valueOf = f66;
            try { v72(); } catch (e) {}
            v72();
        }
    }
    const v75 = Array();
    v75[974] = null;
    const v77 = new Map();
    function f78(a79, a80) {
        function F82(a84, a85) {
            if (!new.target) { throw 'must be called with new'; }
            this.b = "b";
            this.d = a85;
        }
        new F82();
        return f66;
    }
    v77[Symbol.toPrimitive] = f78;
    class C89 {
        [v77];
        constructor(a91, a92) {
            const v93 = this?.constructor;
            try { new v93(); } catch (e) {}
            const v95 = /(?<!)/gv;
            v95.e = v95;
            const v96 = /(\xed\xb0\x80)\x01/gudmy;
            v96.c = v96;
            const v98 = Symbol.iterator;
            const o100 = {
                [v98]() {
                },
            };
        }
    }
    v75[1460] = v75;
    v75[2358] = f65;
    for (const v101 of v75) {
        v101 - v101;
    }
    return v75;
}
const v103 = f66();
try { v103.find(2); } catch (e) {}
f66();
