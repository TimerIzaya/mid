const v5 = new Int32Array(0);
+3208;
const v8 = [-65536,-432658450,256];
BigInt.BYTES_PER_ELEMENT = BigInt;
new BigInt(v8);
129 + 129;
try { Uint8ClampedArray.of(); } catch (e) {}
const v15 = new Uint8ClampedArray(129);
v15.lastIndexOf();
Int32Array.g = Int32Array;
const v18 = new Int32Array(3208);
Uint32Array.name = Uint32Array;
function f21() {
    const o24 = {
        get b() {
            super[this] = this;
            return f21;
        },
        ..."b",
    };
    return o24;
}
const v25 = f21();
let v26;
try { v26 = v25.assign(); } catch (e) {}
new Uint32Array(8);
const v28 = v5.constructor;
try { new v28(v15, v26, v8); } catch (e) {}
const v31 = new BigInt64Array();
const v32 = `
    var c = v31;
`;
try { v32.charCodeAt(-25624n); } catch (e) {}
const o35 = {
    get f() {
        return this;
    },
};
function f36(a37, a38, a39, a40) {
    try { a38.from(a40); } catch (e) {}
    const v42 = a39?.constructor;
    try { new v42(v28, v5, 0); } catch (e) {}
    return f36;
}
Object.defineProperty(o35, "h", { enumerable: true, get: f36 });
class C45 extends Date {
    static get c() {
        const v47 = `
        `;
        eval();
    }
}
try { C45.now(); } catch (e) {}
f36(8, Int32Array, v18, v18);
%PrepareFunctionForOptimization(f36);
f36(8, Int32Array, v18, v18);
const v53 = f36(8, Int32Array, v18, v18);
v53.g = v53;
%OptimizeMaglevOnNextCall(f36);
f36(8, Int32Array, v18, v18);
