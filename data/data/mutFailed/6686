function f0() {
    const o16 = {
        get a() {
            class C5 {
                constructor(a7, a8) {
                }
            }
            eval();
        },
        "b": "-9007199254740990",
        176: 6,
        o(a12, a13) {
            a13[Symbol.unscopables] = -32808;
            return a12;
        },
        __proto__: "-9007199254740990",
        "h": 6,
        "g": -32808,
        [6]: -32808,
    };
    return o16;
}
let v17 = f0();
const v18 = f0();
const v19 = f0();
class C20 {
    toString(a22, a23) {
        gc();
        function F26() {
            if (!new.target) { throw 'must be called with new'; }
            function f28(a29) {
                Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
            }
            Object.defineProperty(this, "b", { enumerable: true, set: f28 });
            let v32 = 1073741825;
            try {
                v32++;
                let v36 = -1e-15;
                Math.atan2(v36++, -175950080);
                this.b = v32;
            } catch(e39) {
            }
        }
        new F26();
        try { new a23(v17, f0, v18); } catch (e) {}
        ({"h":a23,...v17} = this);
        return f0;
    }
    get b() {
        Object.defineProperty(v19, v19, { get: f0, set: f0 });
        return v17;
    }
    static #b;
    static #e;
    static [f0] = v17;
}
const v43 = new C20();
const v44 = new C20();
const v45 = new C20();
const v46 = [v43,v17,v43,v44];
const v48 = [v44,v45,[v18,v19,v18,v46]];
[v43,v46];
const v52 = new BigUint64Array(10);
const v54 = [0.22970466031530812,NaN,NaN,Infinity];
class C55 {
    constructor(a57, a58) {
        super["fround"] = v54;
    }
}
new C55(C55, v46, v52);
[v18];
[v48,f0,v44,v46,v44];
const v64 = new Int16Array(7);
1024 * 1024;
function f68() {
    function f69(a70, a71) {
        a71(f69);
        return f69;
    }
    new Float32Array(f69);
    return f69;
}
new Uint16Array(1024);
new Float32Array(3415);
let v79 = 12;
v79++;
Int16Array.prototype = Int16Array;
new Int16Array(v79);
const v85 = new BigUint64Array(-2147483647);
Float32Array.prototype = Float32Array;
const v88 = new Float32Array(2494);
try { v88.find(Uint16Array); } catch (e) {}
const v90 = [7,v88,10];
const v92 = ([-2147483647,7,v90,v64])?.reverse;
try { v92(); } catch (e) {}
[v85,7];
let v96 = Int32Array;
const v97 = new v96(2917);
const v99 = v96--;
/S4/gvm;
/a?abc+e6H*/gvmsy;
/G(?:ab|cde)b?/udim;
const o104 = {
};
new Proxy(v90, o104);
v97["lastIndexOf"](v99);
