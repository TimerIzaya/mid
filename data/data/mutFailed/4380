function f0() {
    const o7 = {
        "b": -1.0,
        get f() {
            0.6099681936595825 ^ "h";
            try {
                this.h = this;
            } catch(e6) {
            }
            return -1.0;
        },
        __proto__: "h",
        129: 0.6099681936595825,
    };
    return o7;
}
const v8 = f0();
const v9 = f0();
const v10 = f0();
function F11(a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = f0;
    try {
        this.h = v10;
    } catch(e14) {
    }
    try {
        Array(3398);
        function f18() {
            const o31 = {
                m(a20) {
                    const v23 = new Int8Array(3938);
                    let v24 = 3;
                    let v25 = 0;
                    v25 >> v25;
                    for (let i = 0; i < 5; i++) {
                        [...v24] = v23;
                        v25++;
                        try {
                            a20.length = 1;
                        } catch(e29) {
                        }
                    }
                    const o30 = {
                    };
                },
            };
            o31.m(o31, o31, o31, f18, f18);
            return o31;
        }
        this.g = v9;
        function F33() {
            if (!new.target) { throw 'must be called with new'; }
            for (const v38 of Array(19793)) {
                const v40 = Math.cbrt();
                v40 % v40;
            }
        }
    } catch(e42) {
    }
    try {
        this.d = a13;
    } catch(e43) {
        switch (this) {
            case v9:
                f0();
                %PrepareFunctionForOptimization(f0);
                f0();
                f0();
                %OptimizeMaglevOnNextCall(f0);
                f0();
                break;
        }
    }
}
new F11(v8);
new F11(v9);
const v50 = new F11(v10);
function f51() {
    return v50;
}
[-502683.559890166,1000000000000.0,279071.69536901684];
[-1.7976931348623157e+308,0.02185183135461244,0.5606462206611692,1.0112115941028622e+308,-1000000000000.0];
[-9.414686996115674e+307,-1.0,-1.7976931348623157e+308,0.2611421437095469,-763535.5765895253,3.0723976267889585e+307,0.41988089038704157];
Symbol.search;
class C62 {
}
const v63 = new C62();
function f64(a65) {
    %VerifyType(a65);
    function f66(a67, a68, a69) {
        const o77 = {
            toString(a71, a72, a73) {
                a68 < this;
                return super[a69];
            },
            get d() {
                return this;
            },
        };
        return o77;
    }
    return 9007199254740990;
}
v63.toString = f64;
class C78 {
    [255] = 9007199254740990;
    static m(a80, a81) {
    }
    [false] = false;
    static [255];
    [v63] = v63;
}
const v89 = new BigUint64Array(4);
function F90(a92, a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
}
const v95 = new F90(BigUint64Array, 4, 241);
for (let v96 of v89) {
    v96--;
    Object.defineProperty(v95, 241, { enumerable: true, value: v96 });
}
const v98 = [0.0,0.0];
const o99 = {
    __proto__: v98,
};
o99.push(0.0);
new Uint32Array(64);
const v104 = new Uint16Array(10);
const v107 = new Int16Array(2);
class C108 {
    constructor(a110, a111) {
        const o112 = {
        };
        try {
            o112.e = a110;
        } catch(e113) {
        }
        try {
            const o114 = {
                2: 0.0,
            };
            Object.defineProperty(o114, "c", { enumerable: true, value: v107 });
            o114.e = a110;
            o114.c = a111;
        } catch(e115) {
            -1755886278n >>> -1755886278n;
            function f117(a118, a119) {
                return a118;
            }
            const v122 = Array(19793);
            const v123 = [v122,v122,v122,v122,v122];
            [v123,v123,v123];
        }
        try {
            const o125 = {
            };
            o125.e = a110;
            o125.c = a111;
            o125.b = a111;
        } catch(e126) {
        }
        try {
            const o127 = {
            };
            o127.e = o127;
            o127.e = a110;
            o127.c = a111;
            o127.g = v104;
        } catch(e128) {
        }
    }
}
new C108(-9007199254740992n, 64);
new C108(-15n, 2);
new C108(-9007199254740992n, 10);
let v132 = 0;
do {
    C108 / 10;
    const o137 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o137);
    v132++;
} while (v132 < 5)
