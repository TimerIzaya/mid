function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -38456;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8) {
    try { v6["valueOf"](); } catch (e) {}
    return v5;
}
v6.toString = f7;
class C11 extends F0 {
    #f;
    #m(a13, a14) {
        v5[13];
        try {
            this.#f |= v6;
        } catch(e16) {
        }
        return v6;
    }
    b;
    [F0];
    static #c = v4;
    239 = v4;
}
new C11();
const v18 = new C11();
new C11();
[13423,35364,-9007199254740992,4096,1073741824,-4294967297,-10,-22119,2147483648,13];
const v21 = [4294967295,129,61060,-13,49940];
[-5,-9007199254740992,3,2147483648,-4294967297,16,10569,10];
class C23 {
    set f(a25) {
        try {
            const t39 = "undefined";
            t39.h = v21;
        } catch(e29) {
        }
    }
    static #d;
    2690 = v5;
    static [C11] = v5;
    [v6];
}
new C23();
new C23();
new C23();
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = F0;
    function f35(a36) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f35 });
    let v39 = 1073741825;
    try {
        v39++;
        let v43 = -1e-15;
        Math.atan2(v43++, -175950080);
        this.b = v39;
    } catch(e46) {
    }
}
let v47 = new F33();
let v48 = new F33();
v48.a = v18;
({"a":v48,"b":v48,...v47} = v48);
const o53 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o53);
new F33();
new Uint8ClampedArray(16);
function f60() {
    new Int8Array(1073741823);
    class C64 {
        #valueOf(a66, a67, a68, a69) {
        }
    }
    const o73 = {
        valueOf(a71, a72) {
        },
    };
}
f60();
%OptimizeFunctionOnNextCall(f60);
f60();
