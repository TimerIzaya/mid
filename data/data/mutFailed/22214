new WeakMap();
const v2 = [-4294967296,10000,-56108,-2147483649];
const v3 = [-1024,-63037,16];
const v4 = [847614055,-15451,4,2100788319,-2];
class C8 extends WeakMap {
    static c = v2;
    valueOf(a10, a11, a12) {
        return 3;
    }
    constructor(a17, a18, a19, a20) {
        super(v3);
        this[3] = 9007199254740990;
        super.b;
        a20[Symbol.unscopables] = a19;
    }
}
new C8(9007199254740990, -9007199254740992, -9007199254740992, v2);
new C8(-15, -15, 9007199254740990, v3);
new C8(-15, 9007199254740990, -15, v4);
function f30() {
}
function f31() {
    return f30;
}
-520531413 >> -520531413;
const v36 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    function f43() {
        try {
            v37.forEach(a40, v36);
        } catch(e45) {
        }
        return a39;
    }
    f43();
    const v48 = eval();
    %OptimizeFunctionOnNextCall(f43);
    return v48;
}
f38();
-65536n + -65536n;
Map.prototype;
const v56 = new Map();
try { v56.set(Map, 512n); } catch (e) {}
try { new BigInt64Array(-9513n, f30, -9513n); } catch (e) {}
const v61 = new BigInt64Array(0);
let v62 = 1024;
let v63 = v62--;
v63++;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v62);
const v69 = -9513n != 1;
v69 || v69;
if (v69) {
    try {
        new BigInt64Array(127);
    } catch(e73) {
    }
} else {
    var h = v69;
}
5 ^ 5;
const v80 = new BigUint64Array(5);
const v81 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
const v82 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
try { v82.concat(v81); } catch (e) {}
const v85 = [44371,2,-65536,9,-5128,-9223372036854775808,-7,10];
const v87 = [14,-11,1];
class C88 {
    constructor(a90, a91) {
        try { this.propertyIsEnumerable(v87); } catch (e) {}
        const v95 = new Uint8Array(4, 4, 4);
        function f96(a97, a98, a99, a100) {
            const o101 = {
                ...v95,
            };
        }
        f96(Uint8Array, 4);
        const v103 = Symbol.iterator;
        const o115 = {
            [v103]() {
                const o114 = {
                    next() {
                        function f106(a107, a108) {
                            const o112 = {
                                p(a110, a111) {
                                },
                            };
                        }
                        const o113 = {
                        };
                    },
                };
            },
        };
        a91 | -4.0;
    }
}
new C88(v2, v85);
let v118;
try { v118 = v80.join(v62); } catch (e) {}
try { v118.replace(Int32Array, f30); } catch (e) {}
Int32Array.length;
-f30;
try {
    v61.f = 0;
} catch(e124) {
}
const v125 = new Int32Array(1);
v125[0];
v125[0] = v125;
new Int8Array(12);
const v130 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v131 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v132 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v132.join(-65536n); } catch (e) {}
function F134(a136, a137, a138) {
    if (!new.target) { throw 'must be called with new'; }
    const v139 = this?.__lookupGetter__;
    try { new v139(12); } catch (e) {}
    a137 + a137;
    try { a138.find(a136); } catch (e) {}
    try {
        this.d = a136;
    } catch(e143) {
    }
    try {
        this.b = a138;
    } catch(e144) {
        function F145() {
            if (!new.target) { throw 'must be called with new'; }
        }
        F145.fuck = F145;
        class C147 extends F145 {
        }
        for (const v148 in C147) {
        }
    }
}
const v149 = F134?.constructor;
v149.length = v149;
let v150;
try { v150 = new v149(12); } catch (e) {}
v150.arguments;
new F134(Int32Array, 12, v131);
const v153 = new F134(v131, 5, v132);
v153.length;
const v155 = new F134(v130, 12, v130);
v155[65536];
const o158 = {
};
for (let v159 = 0; v159 < 25; v159++) {
}
