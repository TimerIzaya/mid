new Uint16Array();
const v6 = ("minor").valueOf("minor");
v6.split(v6);
[795375712,141119161];
[1229674845,255,-48760,5,6,24713,-6,4,-2147483647];
[-5,256,-675861492,-1024,-7,904727997];
new Float64Array(4096);
const t7 = 11n;
const v17 = new t7();
Object.defineProperty(v17.buffer, "constructor", { writable: true, configurable: true, value: Date });
new BigInt64Array(6);
new Int8Array(64);
const v26 = new Uint32Array();
Math.asin();
new Uint8Array(3521);
function f36(a37, a38) {
    const o46 = {
        [v26](a40, a41, a42) {
            a38?.[a40].__proto__;
        },
    };
    return a37;
}
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    a52[1][1];
}
const v59 = new Int16Array(7);
v59["reverse"]();
function f64(a65, a66, a67, a68) {
}
class C70 {
    static {
        for (let v72 = 0; v72 < 25; v72++) {
            const v73 = [601759695];
            const v74 = [1073741824,1073741823,1376142744,1073741825];
            function f75(a76, a77, a78, a79) {
                try { v74.toSorted(f64, arguments, v73); } catch (e) {}
                const v84 = new Float32Array(this, a79, a76);
                function f86() {
                    return a76;
                }
                class C88 extends v84.constructor {
                    #c = 84;
                }
                function f89(a90, a91) {
                    return a91;
                }
                try { f89(f75, a79); } catch (e) {}
                %OptimizeFunctionOnNextCall(f86);
                try { v74["find"](..."find", a79, ...v73); } catch (e) {}
                const o95 = {
                    [Date]: 128,
                    __proto__: arguments,
                };
                return f86;
            }
            for (let v96 = 0; v96 < 5; v96++) {
                f75();
            }
        }
    }
}
