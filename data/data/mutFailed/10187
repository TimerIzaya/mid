const v2 = new Int8Array(64);
new Float32Array(64);
const v8 = new Uint16Array(4065);
const v10 = [-1.2776874705217039e+307,4.3076016223184155,3.660454885595876e+307,Infinity,-1000000.0,-219161.12456488993,2.2250738585072014e-308,94.27775738110995];
[-1000.0];
[0.555648747177629,-921933.7470935804,5.0,1e-15,-1000.0,0.207016841802675,-1.0,-3.0,1000000.0,-3.0];
class C13 extends Int8Array {
    static e;
    toString(a15, a16, a17) {
        this["at"](a15);
        new Map();
        return Int8Array;
    }
    static #d;
    set e(a23) {
        v8.byteOffset;
        let v28;
        try { v28 = new a23(a23, 64, v10, -1.7976931348623157e+308, a23); } catch (e) {}
        v2[this] *= v28;
    }
}
new C13();
new C13();
new C13();
const v33 = [601759695];
function f34(a35, a36, a37, a38) {
    arguments[2] = arguments;
    function f40() {
        const o41 = {
            __proto__: a37,
        };
        return o41.valueOf();
    }
    const v43 = f40();
    f34();
    v43[6] = v43;
    %OptimizeFunctionOnNextCall(f40);
    return gc;
}
for (let v46 = 0; v46 < 5; v46++) {
    f34(v33, v46, v46);
}
