function f3() {
    return -1;
}
class C4 extends f3 {
    constructor(a6, a7) {
        super();
        try {
            this.fuck("valueOf", "valueOf", 1.6597873108733356);
        } catch(e11) {
        }
    }
    8 = -11329;
    static f;
    [-1024] = -11329;
}
const v12 = new C4(-11329, -1);
const v13 = new C4(-1024, -11329);
f3 in v13;
v12[v13];
const v19 = new C4(-1024, -1);
new BigUint64Array(8);
const v25 = new Int8Array(256);
v25["b"] = -1024;
Object.defineProperty(v19, 14, { writable: true, configurable: true, get: f3, set: f3 });
const o27 = {
    "construct": f3,
    "has": f3,
};
new Proxy("10", o27);
new BigInt64Array(3125);
function f32() {
    for (let v33 = 0; v33 < 5; v33++) {
        for (let v34 = 0; v34 < 5; v34++) {
            Math.atanh(v34);
        }
    }
    return f32;
}
f32();
%OptimizeFunctionOnNextCall(f32);
f32();
