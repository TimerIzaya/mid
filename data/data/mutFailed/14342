const v0 = [];
class C1 {
    #h;
    [v0] = v0;
    set f(a3) {
        if (a3) {
            const o7 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o7);
        } else {
            let v9;
            try { v9 = a3(this, this, this, v0); } catch (e) {}
            super[v9] = a3;
        }
    }
}
new C1();
const v11 = new C1();
const v12 = v11?.constructor;
v12.name;
let v14;
try { v14 = new v12(); } catch (e) {}
const v15 = v14?.constructor;
try { new v15(); } catch (e) {}
const v17 = new C1();
let v18;
try { v18 = v17.valueOf(); } catch (e) {}
const v19 = v18?.constructor;
try { new v19(); } catch (e) {}
new Uint32Array(64, v17, v12, v0);
BigInt64Array.length;
new BigInt64Array(-7098);
2562 - 2562;
const v31 = new Int32Array(2562);
try { new Map(); } catch (e) {}
new Map();
36002 <= 36002;
const v37 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
let v38 = v37[5];
v38--;
function f40(a41) {
    const v42 = a41 && a41;
    v42 - v42;
    return 36002;
}
f40.e = f40;
v37.toString = f40;
%OptimizeFunctionOnNextCall(f40);
function f44(a45, a46) {
    try { a45.toString(); } catch (e) {}
    let v48;
    try { v48 = a45.toString(); } catch (e) {}
    try { v48.split(v48, v31); } catch (e) {}
    return f40;
}
f44.e = f44;
const v51 = new Promise(f44, Promise);
v51[v37] += 36002;
