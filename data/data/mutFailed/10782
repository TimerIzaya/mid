class C3 {
    10000 = 0;
    constructor(a5, a6) {
        this[10000] = this;
        let v7 = 57748n;
        v7--;
        /(x)(x)(x)\1/uis.exec(Int16Array);
        for (let v12 = 0; v12 < 5; v12++) {
            Math.atan2(-268435456, v12);
        }
    }
    valueOf(a19, a20) {
        this[10000];
        -16 === -16;
        const o25 = {
            [-137.76913245885396]: -0.0,
            [-16]: -137.76913245885396,
            "h": -16,
            ...-0.0,
            "c": -137.76913245885396,
            "e": -0.0,
        };
        o25.h = o25;
        const o26 = {
        };
        o26.h = o26;
        try {
            o26.h = -2.220446049250313e-16;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.h = -2.220446049250313e-16;
            o28.b = a20;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.f = -2.220446049250313e-16;
            o30.b = a20;
            o30.a = this;
        } catch(e31) {
        }
        class C32 {
            constructor(a34) {
                const v35 = this.constructor;
                try { new v35(); } catch (e) {}
                const v38 = new Float32Array();
                v38.entries();
            }
        }
        for (let v40 = 0; v40 < 5; v40++) {
            function f41() {
                const v43 = Symbol.toPrimitive;
                Symbol.for(v43.description);
                v43.description.codePointAt(C32);
                return Symbol;
            }
            const v49 = f41();
            v49.match = v49;
            %OptimizeFunctionOnNextCall(f41);
        }
        try {
            const o50 = {
            };
            o50.d = o50;
            o50.h = -2.220446049250313e-16;
            o50.b = a20;
            o50.a = a20;
        } catch(e51) {
        }
        return this;
    }
}
C3.e = C3;
const v52 = new C3();
v52[10000];
for (let [v55] of "bnxIi") {
    v55[0];
}
-4294967295 >>> -4294967295;
Math.sin(-4294967295, -4294967295, C3);
let v61 = new C3();
v61[10000] = v61;
const v62 = new C3();
v62[10000] = v62;
function f63(a64, a65, a66, a67) {
    a65 + a65;
    a66[10000];
    a64[10000] = a64;
    ~a65;
    a67[10000] = a67;
    const o86 = {
        get e() {
            for (const v73 of this[this]) {
                let v75 = a67.b;
                v75 = -2.220446049250313e-16;
            }
            return v52;
        },
        m(a77, a78, a79) {
            const v80 = this?.__defineGetter__;
            try { new v80(a77, a77); } catch (e) {}
            a78[10000] = a78;
            try { a79.constructor(v61, a79); } catch (e) {}
            v61 ||= a77;
            try { new a65(v61, a67, a64, a66, -137.76913245885396, a77); } catch (e) {}
            try {
                v52.length = 2;
            } catch(e85) {
            }
            return this;
        },
    };
    try { o86.m(0, v52, a67); } catch (e) {}
    return o86;
}
let v88 = 10;
for ((() => {
        for (let v89 = 0; v89 < 5; v89++) {
        }
    })();
    v88--;
    ) {
}
const v91 = f63(v52, -2.220446049250313e-16, v62, v62);
const v92 = f63(v52, v62, v62, v62);
const v93 = [];
const v94 = v93.toSpliced(v93);
const v96 = parseInt(v94);
const o99 = {
    "execution": "async",
};
const v100 = gc(o99);
try { v100.catch(v100); } catch (e) {}
v100.finally();
const v105 = new Int16Array();
const v108 = new Int16Array(8);
async function f109(a110, a111, a112) {
    delete v108[-1000000000.0];
    v105[0];
    const v115 = v105[1];
    let [,,...v116] = v105;
    await v115;
}
v100.then();
const v119 = f63(C3, 0, v52, v52);
function F120(a122, a123, a124) {
    if (!new.target) { throw 'must be called with new'; }
    a122.b = a122;
    a123[10000] = a123;
    a124.b = a124;
    function f125(a126, a127, a128, a129) {
        Uint8ClampedArray.BYTES_PER_ELEMENT;
        try { Reflect.construct(Reflect, f63); } catch (e) {}
        const v134 = [];
        const v135 = v134?.every;
        try { new v135(v134); } catch (e) {}
        const v137 = Reflect.construct(Uint8ClampedArray, v134);
        const v138 = v137?.entries;
        try { new v138(); } catch (e) {}
        return v137;
    }
    for (let v140 = 0; v140 < 10; v140++) {
        const v141 = f125();
        try { v141.at(v92); } catch (e) {}
        const v144 = Math.log2();
        const v145 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
        function f146(a147, a148, a149) {
            const o151 = {
                get d() {
                    return a148;
                },
            };
            for (let i = 0; i < 10; i++) {
                0 < 10;
                delete v145[v144];
            }
            return o151;
        }
    }
    let v156;
    try { v156 = a122.m(this, v52, a123); } catch (e) {}
    v156.b = v156;
    a123[10000];
    try {
        this.c = a123;
        function F158() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = 10137;
            } catch(e161) {
            }
            try {
                this.a = 10137;
            } catch(e162) {
            }
            try {
                this.h = 10137;
            } catch(e163) {
            }
        }
        new F158(F158);
    } catch(e165) {
    }
    try {
        this.d = 0;
    } catch(e166) {
    }
    try {
        this.prototype = v62;
    } catch(e167) {
    }
}
const v168 = new F120(v92, C3, v92);
const v169 = v168?.c;
try { new v169(v94, v94); } catch (e) {}
const v171 = new F120(v92, v62, v119);
new F120(v91, v62, v119);
function f173(a174, a175, a176, a177) {
    function f178() {
        257 - 257;
        let v181 = !257;
        -v181 | v181--;
        return a174;
    }
    f178.name;
    const v186 = f178();
    %OptimizeFunctionOnNextCall(f178);
    Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
    const v189 = new Uint8ClampedArray(1000);
    try { v189.at(Uint8ClampedArray); } catch (e) {}
    Math.LN10;
    const v193 = Math.__defineSetter__;
    v193.name = v193;
    try { v193(); } catch (e) {}
    return v186;
}
try { f173(v171, v171, v96, v171); } catch (e) {}
const v196 = f173();
const v197 = f173(f173, f173, f173, v196);
try { v197(v168, v197, v197, v197); } catch (e) {}
v197.caller = v197;
f173(v196, v196, v196, v197);
