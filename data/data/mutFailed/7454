class C3 {
    static 10;
    static f = -58962;
    static h;
    #h = 1000000.0;
    [1000000.0] = -58962;
    static {
        Reflect.construct(this, [], this);
    }
    static b;
    [-58962];
}
const v8 = new C3();
new v8();
new C3();
[256,-536870912,-25515,536870912,-23176];
[2147483648];
[-268435456,-2,-14312,10,-14753262,-4,256,-1048324283,-1937041817];
const v17 = /(l{z})/s;
function F18(a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this.constructor;
    try { new v21(v17); } catch (e) {}
    a20.b = a20;
}
new F18(v17);
new F18(v17);
function f25(a26, a27) {
    class C28 {
        constructor(a30, a31) {
            const o33 = {
            };
            gc(o33);
        }
    }
    for (let v35 = 0; v35 < 50; v35++) {
        new a26();
    }
    return a26;
}
new Promise(f25);
class C40 {
}
const v42 = new C40();
Object.defineProperty(v42, "valueOf", { enumerable: true, value: Symbol });
new C40();
const v44 = [v42];
35530n & 35530n;
new Float64Array();
try { Uint8Array.from(v44); } catch (e) {}
function f51(a52, a53) {
    (-45065n).name;
    const v57 = Array();
    function f58() {
    }
    function f59(a60) {
        gc();
    }
    Object.defineProperty(v57, 0, { configurable: true, enumerable: true, get: f58, set: f59 });
    v57.unshift(3);
}
new Promise(f51);
