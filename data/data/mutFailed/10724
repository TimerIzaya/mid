const v0 = [-1.7976931348623157e+308,-1000.0,-1000000000.0,-2.2250738585072014e-308,507.67579205377,3.3916870568825566];
[-562.3901968156848,5.421203492852493,2.220446049250313e-16,3.0];
const v2 = [1e-15,-575.2481348942024,149368.79241435975,-3.862506486261596];
class C3 {
    d = v2;
    static #e = v2;
    constructor(a5, a6) {
        function F7(a9, a10, a11, a12) {
            if (!new.target) { throw 'must be called with new'; }
            const v13 = a9.push();
            const v14 = this.__defineGetter__;
            try { v14.call(v13); } catch (e) {}
        }
        let {"a":v16,"e":v17,"length":v18,} = a5;
        Reflect.construct(a6, [Reflect,v18,Reflect], v17);
    }
    e;
    b;
    a;
    static #f = v0;
}
const v22 = new C3(v0, C3);
const v23 = new C3(v0, v2);
const v24 = new C3(v0, v23);
const v25 = [536870887,-48534,-14,-7755,-2147483647,-9007199254740990,-65537,1297188827,-9007199254740990];
[-17131,536870889,268435439,-2,2,9007199254740992,-4096,-24664,-1906268837];
const v27 = [-12,7,512,1073741823];
class C28 {
}
const v29 = new C28();
class C31 extends v25.constructor {
}
const v32 = new C31();
Object.defineProperty(v32, 65537, { value: v29 });
class C33 extends C3 {
    constructor(a35, a36, a37, a38) {
        super(v27, a37);
        function F39(a41, a42) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = this;
            } catch(e43) {
            }
            try {
                const o44 = {
                };
                new Float32Array(255);
                this.f = v22;
                const o48 = {
                };
                ("h").split(65535);
            } catch(e52) {
            }
        }
        new F39(v24, v2);
        new F39(C3, a36);
        new F39(a35, a36);
    }
}
const v56 = new C33(C3, v2, v22, v23);
new C33(v23, v25, v56, v22);
gc();
Date.UTC(-64.87258063624915);
new C33(v23, v27, v22, C33);
RegExp(RegExp);
function F67(a69, a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this.constructor;
    try { new v73(v73, a71, v73, Uint8Array, v73); } catch (e) {}
    const v75 = [this,this,this];
    const o76 = {
        "e": v75,
    };
}
