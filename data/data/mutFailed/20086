const v2 = new Uint32Array(511);
const v5 = new Uint8Array(127);
v5[106] = v5;
const v8 = new Int16Array(156);
class C9 extends Int16Array {
    set h(a11) {
        super.buffer |= Int16Array;
        try {
            v5.filter(a11);
        } catch(e13) {
        }
    }
    e;
    valueOf(a15, a16, a17, a18) {
        let v14 = this;
        [] = v14;
        v14 = v8;
        try {
            class C19 {
            }
            new C19();
            Date.constructor = Date;
            v2.__proto__ = a17;
        } catch(e22) {
        }
        return a16;
    }
}
C9.e = C9;
new C9();
try { Int16Array.values(); } catch (e) {}
Float32Array[1] = -1e-15;
new Uint32Array([1000000000000.0]);
new C9();
const v32 = new v2();
try { v32.find(v32); } catch (e) {}
function F34() {
    if (!new.target) { throw 'must be called with new'; }
}
function F36() {
    if (!new.target) { throw 'must be called with new'; }
}
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try { a41.call(); } catch (e) {}
    for (let v45 = 0; v45 < 50; v45++) {
    }
}
try { new F34(); } catch (e) {}
-64n;
class C52 {
    toString(a54, a55, a56, a57) {
        let [] = "undefined";
    }
}
try { F34(..."function", 64n, 0, ...1000000000000.0); } catch (e) {}
