function f0() {
    let v3 = 0.7525108592271276;
    const v4 = v3 ^ v3;
    const o8 = {
        __proto__: "hneN",
        get a() {
            ("hneN").length;
            v3 = -1000000000.0;
            const t8 = this.__proto__;
            t8.a **= v3;
            const t10 = "hneN";
            t10[268435456] = "hneN";
            return this;
        },
        ..."hneN",
        [v3]: -1000000000.0,
        "h": "hneN",
    };
    function f9() {
        f0();
        %VerifyType(-1000000000.0);
        return v4;
    }
    o8.toString = f9;
    return o8;
}
const v11 = f0();
const v12 = f0();
const v13 = f0();
const v17 = -15n;
const v18 = [v11,15n,717075199n,v12,v12];
v18[1] = v12;
const v19 = [v18,v18,f0,-43944n,v18];
try { v19.slice(v11, v17); } catch (e) {}
const v21 = [v19,717075199n,-43944n];
const v23 = new Set();
v23.arguments = v23;
try { v23.add(v13); } catch (e) {}
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f0;
    Object.defineProperty(a28, "d", { writable: true, configurable: true, enumerable: true, value: a28 });
    const v30 = v18?.__lookupGetter__;
    try { new v30(a27); } catch (e) {}
    a27 === a28;
    try { new BigUint64Array(15n, v30, this); } catch (e) {}
    const v35 = new BigUint64Array();
    try { v35.entries(); } catch (e) {}
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
function f38() {
    for (let v39 = 0; v39 < 5; v39++) {
        v39 < v39;
        const v41 = new F25();
        const v42 = v41?.constructor;
        try { new v42(v13, v21, v21); } catch (e) {}
        const v44 = v41.constructor;
        v23.arguments;
        class C46 {
        }
        let v47;
        try { v47 = C46.toString(); } catch (e) {}
        const v48 = new C46();
        function f49(a50, a51) {
            /w0/uiy;
            /abc+/gvimy;
            /(ab|cde)\1+/udsy;
            return v47;
        }
        Object.defineProperty(v48, "constructor", { writable: true, configurable: true, enumerable: true, value: f49 });
        const v55 = v48?.constructor;
        v55.toString = f38;
        try { new v55(); } catch (e) {}
        const v57 = v48?.constructor;
        try { v57.constructor(v57); } catch (e) {}
        let v59;
        try {
        const t0 = 15n;
        v59 = new t0();
        } catch (e) {}
        const v60 = v59?.constructor;
        try { new v60(); } catch (e) {}
        for (const v62 in v48) {
        }
        new v44(F25, f38);
    }
    return f38;
}
%PrepareFunctionForOptimization(f38);
const v64 = f38();
function f65() {
    function f66(a67) {
        return Set;
    }
    return f66;
}
function f71(a72) {
    Math.sin(-5345);
}
Object.defineProperty(v64, "toString", { writable: true, configurable: true, enumerable: true, get: f65, set: f71 });
const v76 = v64?.toString;
try { new v76(); } catch (e) {}
try { new v64(); } catch (e) {}
%OptimizeFunctionOnNextCall(f38);
const v79 = f38();
v79.d = v79;
