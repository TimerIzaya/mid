new Uint8ClampedArray([5.0]);
class C7 {
}
C7.constructor;
class C12 {
    static #b = 1175953465;
}
new C12();
new Int32Array(2252);
new Uint32Array(2463);
const v19 = new Float32Array(1175953465);
v19["at"]();
const v23 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
let v26 = 522675525n;
function f27(a28, a29, a30, a31) {
    function f33() {
        const o40 = {
            "e": -4294967295,
            ...v23,
            ..."Vre",
            "c": a31,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a38, a39) {
                return v25;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    f33();
    %OptimizeFunctionOnNextCall(arguments);
    let v43;
    try { v43 = v25["find"](..."find", a31, ...v24, ...v25, ...v26); } catch (e) {}
    v43 <= a30;
    return arguments;
}
new v24();
const v48 = new Set();
function f49() {
    return f49;
}
const v50 = [-5.317200505083752e+307,2.23862305457169,-202.48024689685315];
try { v48["entries"](...461471.53518758505, v50, f49, ...v48); } catch (e) {}
v26 %= v26;
try {
    const o55 = {
    };
} catch(e56) {
}
new Int32Array(3588);
for (let i = 0; i < 5; i++) {
    const o60 = {
        "execution": "async",
    };
    function f63(a64, a65) {
        const o68 = {
            "g": 1073741824,
            get d() {
                super[a64];
                return this;
            },
            "f": 3,
            ...a64,
            10: 1073741824,
        };
        return o68;
    }
    f63(f63);
    for (const v70 in "5amlK") {
        new Float64Array(1);
        const o75 = {
            "maxByteLength": 1000,
        };
        ("5amlK")[v70];
    }
}
