const v0 = [];
function f1() {
    const o11 = {
        ...v0,
        [v0]: v0,
        set b(a3) {
            v0["toSorted"](..."toSorted", ..."toSorted", ..."toSorted", ...v0);
            const v6 = async (a7, a8) => {
                'use strict';
                try {
                    a7.g = v0;
                } catch(e9) {
                }
                await this;
                return "toSorted";
            };
        },
    };
    return o11;
}
const v12 = f1();
const v13 = f1();
const v14 = f1();
Object.defineProperty(v12, 2, { configurable: true, enumerable: true, value: "CQL" });
Object.defineProperty(v13, f1, { configurable: true, value: v12 });
function f16() {
    return v12;
}
const v19 = [6,2147483647,-16,1832767805];
[-1,65536,17517,-65535,536870912];
const o21 = {
};
class C24 {
    [o21] = -522.1393553916671;
    #a = 1.185961373472971e+308;
}
const v25 = new C24();
const v26 = o21.constructor;
const v27 = v26.freeze(v25);
const v29 = -15 % -15;
const v30 = v29 == v29;
for (let v31 = 0; v31 < 25; v31++) {
    function f32() {
        return f32;
    }
    function f33(a34, a35, a36, a37) {
        function f38() {
            return v29;
        }
        f38.h = f38;
        const v39 = f38.length;
        const v40 = -v39;
        v39 | v39;
        const v42 = f32();
        const v43 = v42?.constructor;
        v43.d = v43;
        let v44;
        try { v44 = v43(); } catch (e) {}
        let v45;
        try { v45 = v44.bind(); } catch (e) {}
        const v46 = v45.bind();
        v44.e = v44;
        const v47 = v43 * v30;
        v47 - v47;
        const v49 = typeof f38;
        try { v49.italics(v49, v40, v46, v31, o21); } catch (e) {}
        const v52 = v49 === "n";
        v44(v26, v27, v52);
        const v55 = new Int8Array(C24, a37, a36);
        const v56 = v55.entries();
        let v57;
        try { v57 = v56.next(); } catch (e) {}
        const v58 = v56.next(1.185961373472971e+308, f32, o21, v57, v57);
        try {
            a35.f = -15;
        } catch(e59) {
            e59.b = e59;
        }
        const v60 = [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        v60[1] = v60;
        const v61 = [0.5067933585829714,1.0,-930004.7663294855,2.6834769420801777e+307,-0.0,0.8576192242870103,1000000.0,-3.341757808913002];
        v61[7] = v61;
        ([-2.2250738585072014e-308,-0.0,3.0,743.9950267369297]).copyWithin(v44);
        const v65 = new Uint32Array(v55, v58, v31);
        const v66 = v65.subarray();
        v66.entries();
        v66.entries();
        ([v42]).toLocaleString().strike();
        let v74 = BigUint64Array * 536870887;
        const v76 = ("c").toLowerCase();
        try { v76.sub(); } catch (e) {}
        try { v76.toUpperCase(); } catch (e) {}
        v74 >>> v74;
        const v80 = v74--;
        v80 - v80;
        const v84 = ("find").blink().replaceAll;
        try { v84(v52); } catch (e) {}
        return f32;
    }
    for (let v86 = 0; v86 < 5; v86++) {
        f33(v86, v26, v26, -15);
    }
}
const v88 = [-34890,-9223372036854775808,-789674582,1];
class C89 extends f1 {
    constructor(a91, a92, a93, a94) {
        super();
        let v98 = -1.0298362256352353e+305;
        a91 >> 8;
        v0.length *= -1985472885;
        try { new a93(this); } catch (e) {}
        f1 <= "crzz7" ? f1 : "crzz7";
        try { v0.forEach(C89, "Xx"); } catch (e) {}
        Math.expm1(v98);
        const v108 = super.b;
        try { a94(C89, -1985472885, v108, a92); } catch (e) {}
        ~-1985472885;
        Math.floor(a91);
        ~a91;
        ~(--v98);
    }
}
const v115 = new C89(v19, v14, f1, v13);
const v116 = new C89(v88, v115, v13, v12);
new C89(v0, v116, v0, v115);
const v119 = new BigInt64Array(BigInt64Array, BigInt64Array, BigInt64Array);
const v123 = Reflect.construct(Uint8Array, [v119]);
try { v119.findIndex(v123); } catch (e) {}
