const v2 = new Float32Array(8);
const v5 = new Float32Array(1);
new Uint8ClampedArray(512);
class C9 extends Float32Array {
    static 11 = 1;
    constructor(a11, a12) {
        super(a12);
        super.byteLength = a12;
        delete v2[this];
    }
    #toString(a15, a16, a17) {
        return v2;
    }
    178;
    [v5] = v5;
    static {
        [-1000.0,9.698738094418285,5.9647148835145956,-5.0,-4.0,1000000000.0,-1000000.0,-2.829928808700794,-975.7371919359961];
        [-451.17770564691887,1.7976931348623157e+308];
        [-Infinity,-497962.3106538191,-5.0];
    }
    static #a;
    static [v2];
}
new C9();
new C9();
new C9();
Math.asin();
class C3 {
    #c;
    static {
        const v6 = Symbol.asyncIterator;
        this[v6] = 1;
        try { v6.o(536870888, this, this, 1); } catch (e) {}
        const o8 = {
        };
        new Proxy(this, o8);
    }
}
new C3();
new C3();
new C3();
new Set();
const v22 = [-1.0,2.220446049250313e-16,-1000000000000.0,-0.0,281.17096674054847,0.20063797164464336,-91.81029159723403,-Infinity];
const v23 = [-1000000000000.0,1000000000000.0,2.2250738585072014e-308,-3.0,-6.779639927284209e+307,0.5751685661618485,-4.0];
const v24 = [-3.0];
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a28;
    } catch(e31) {
    }
    try {
        this.multiline = a27;
    } catch(e32) {
    }
}
const v33 = new F25(-789772631n, v22, v22, -789772631n);
new F25(-789772631n, v24, v22, v33);
const v35 = new F25(9223372036854775807n, v22, v22, v22);
function F36(a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a39;
    } catch(e41) {
    }
    try {
        this.e = a39;
    } catch(e42) {
    }
}
new F36(9223372036854775807n, v33, v24);
const v44 = new F36(F25, v35, v24);
new F36(v44, v35, v23);
[-2.2250738585072014e-308,-545.5924916280446,228820.87594439392,-1.6345613294260316e+307,1.7976931348623157e+308];
const v47 = [-2.2250738585072014e-308,0.9858828115446204,3.0,-1000.0,492.1002707194684,-133.75254724076683,4.212502896829633,2.392085498381519,-4.040929408166647];
[-9.153983076157641e+307,-5.0,0.6007600701343315];
function f52(a53) {
    const o64 = {
        "b": "o",
        "c": "9007199254740990",
        ["ke5"]: a53,
        p(a55, a56) {
            const v58 = "o" & a53;
            [a53,a55,..."9007199254740990"];
            new WeakSet();
            try {
                super[arguments] = arguments;
            } catch(e62) {
            }
            a53 << this;
            return v58;
        },
        16: a53,
        ..."9007199254740990",
        ..."9007199254740990",
        [a53]: "o",
        __proto__: "ke5",
    };
    return o64;
}
const v65 = f52("9007199254740990");
const v66 = f52("9007199254740990");
const v67 = f52("9007199254740990");
function f68(a69, a70, a71, a72) {
    const o76 = {
        "g": f52,
        ...a71,
        "a": "o",
        1774: v66,
        ...a72,
        "f": "o",
        "c": v22,
        set e(a74) {
            try {
                a74 = this;
            } catch(e75) {
            }
        },
        "d": a70,
    };
    return o76;
}
const v77 = f68("o", v67, "ke5", v65);
f68("ke5", v67, "ke5", v66);
f68("o", v67, "o", v66);
new Int8Array(1124);
new Int8Array(2369, v47);
new BigInt64Array(1658);
const v89 = [];
function f92() {
    const o94 = {
        "c": "pR7SG",
    };
    return o94;
}
class C95 extends f92 {
    #toString(a97) {
    }
}
2759 + 2759;
Float32Array[1] = -1383363179;
const v105 = new Float32Array(2759, "9007199254740990", F36, v23);
v105[31] = v105;
256 / 256;
class C112 {
}
try {
    v89[f68] = Int8Array;
} catch(e115) {
}
const v117 = new Uint16Array();
new WeakSet();
let v120 = -1000000.0;
function f121() {
}
const v122 = [-1624963049,1937433622,9,127,-1974233456];
function F123(a125) {
    if (!new.target) { throw 'must be called with new'; }
    const v126 = this?.constructor;
    try { new v126(f121); } catch (e) {}
}
new F123(F123);
class C129 {
}
let v132 = -0.0 % F123;
[,v132,v132,v120] = v122;
const v139 = v117.__proto__;
try { v139(v77, v139, v89, 129, WeakSet); } catch (e) {}
try {
} catch(e141) {
}
const v146 = /V(?:ab)+i\x60/uyd;
const v147 = [4096,5,-128,-2147483649,6];
[v147,v147];
class C153 {
}
class C155 extends v122 {
}
Math.e = Math;
let v156 = 9;
~v156;
++v156;
const v159 = Math.clz32();
v159 * v159;
Math.expm1();
const v162 = /[\11a]/gy;
[2.220446049250313e-16,1e-15,-1000000000000.0];
const v169 = 727 & 727;
v169 != v169;
const v175 = Symbol.replace;
WeakMap.description;
Symbol.for();
v175.description;
Symbol.for();
v162[v175];
function f189() {
    [] = [NaN,1.0,1.1875413619536744e+308];
    let v191 = -11;
    --v191;
    const o195 = {
        get b() {
            super[this] = -8.233575780020734;
            return -8.233575780020734;
        },
    };
    const o196 = {
        ...o195,
    };
    return f189;
}
9 >> 9;
try { Float32Array.of(); } catch (e) {}
Float32Array[1] = v146;
new Float32Array(Float32Array);
function f202() {
    class C203 {
        constructor(a205) {
        }
    }
}
function f206() {
    const o211 = {
        valueOf(a210) {
        },
        [-52276]: -410.8373818683839,
    };
    return o211;
}
[-1000000000.0,1e-15,-9.803124315434264,-366.4099400694298,1000000000000.0,0.7347183727038488,-Infinity,2.0,0.3916117682859279,-461027.2128179858];
function f213() {
    return v139;
}
class C214 extends Symbol {
    constructor(a216, a217, a218, a219) {
        super();
        const o221 = {
        };
        gc();
        const t210 = o221.constructor;
        t210();
        const v227 = ([-21059]).groupToMap;
        v227.d = v227;
        try { v227(); } catch (e) {}
    }
}
const v229 = new C214();
for (let v230 = 0; v230 < 8; v230++) {
    v229.length = v230;
}
function f231(a232) {
    return Float64Array;
}
Symbol.toPrimitive;
