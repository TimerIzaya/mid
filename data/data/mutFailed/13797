let v6 = [15];
const v7 = [4294967295n,v6,v6];
const v8 = [4294967295n,3n,v7];
class C9 {
    #f = 3n;
    static set e(a11) {
        v7 - 696937376;
        v7[v8];
        v6 = this;
        try {
            v7.#f;
        } catch(e15) {
        }
    }
    static [15];
    static [v7] = 3n;
    static #b;
    [129n] = 15;
    static h;
}
new C9();
const v17 = new C9();
const v18 = new C9();
function f19() {
    return v17;
}
function f20(a21, a22, a23, a24) {
    const o32 = {
        get e() {
            const v28 = a22 >>> 536870888;
            a22 | 536870888;
            a21 - v28;
            return a22 << this;
        },
        __proto__: a22,
        "e": f19,
        "c": v18,
        14: v18,
        "a": a23,
        [3n]: a24,
    };
    return o32;
}
f20(3n, v6, f20(129n, v7, f20(4294967295n, v17, v6, 15), 15), 696937376);
const v36 = /1xyz{1,}?/gims;
function f37() {
    function f38(a39, a40) {
        a40(f38);
        return f38;
    }
    new Promise(f38);
    return Promise;
}
%OptimizeFunctionOnNextCall(f37);
const v44 = /h\p{gc=Nd}/vdy;
const v45 = /\xf0\x9f\x92\xa9a*/us;
class C50 extends Int8Array {
}
const t58 = 129n;
t58();
function f52() {
}
function F53(a55, a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
}
const v59 = new F53(v45, 1, -1263139894, F53);
const v60 = new F53(v36, v45, -23596, v59);
const v61 = new F53(v44, F53, -23596, 1);
const v64 = v61 | F53;
let v65;
try { v65 = v60(v45, v64, v64); } catch (e) {}
if (v65) {
    let v66;
    try { v66 = ("catch").codePointAt(v65); } catch (e) {}
    [,v66] = "iterator";
} else {
    new WeakSet();
}
