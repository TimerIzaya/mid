class C3 {
    #b = "n";
    toString(a5, a6) {
        function F7(a9, a10) {
            if (!new.target) { throw 'must be called with new'; }
            const v11 = this?.__lookupGetter__;
            try { new v11(this); } catch (e) {}
            a9[5] = a9;
            try {
                this.b = C3;
            } catch(e13) {
            }
        }
        const v14 = new F7(this, 4294967297);
        const v15 = new F7(4294967297, v14);
        new F7(F7, v15);
        return -1.7976931348623157e+308;
    }
    [-1.7976931348623157e+308];
    5 = -1.7976931348623157e+308;
}
try { C3.toString(); } catch (e) {}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
function f21(a22, a23, a24) {
    const o37 = {
        "g": a23,
        "e": -1.7976931348623157e+308,
        "b": v19,
        "d": v19,
        [v19]: -1.7976931348623157e+308,
        [v18]: a23,
        o(a26, a27) {
            try { C3.hypot(a27, a24, this, a26, a26); } catch (e) {}
            const o29 = {
            };
            try {
                o29.e = a24;
            } catch(e30) {
            }
            try {
                const o31 = {
                };
                o31.e = a24;
                o31.c = a26;
            } catch(e32) {
            }
            try {
                const o33 = {
                };
                o33.e = a24;
                o33.c = o33;
                o33.a = a26;
            } catch(e34) {
            }
            try {
                const o35 = {
                };
                o35.e = a24;
                o35.c = a26;
                o35.g = -1.7976931348623157e+308;
            } catch(e36) {
            }
            return a23;
        },
    };
    return o37;
}
f21(v19, v19, C3);
const v39 = f21(v19, v20, v19);
f21(v19, v20, v19);
class C41 extends f21 {
    b = "n";
    o(a43, a44, a45) {
        a45[59];
        Reflect.construct(f21, [C3,v19,v20], f21);
        return v39;
    }
    static #b = v20;
    #toString(a51, a52, a53) {
        a52["toString"](this, "toString", "toString", false);
        %VerifyType(a52);
        /[[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]]/vim;
        for (let i59 = 0; i59 < 10; i59++) {
            try { ("boolean").trimEnd(); } catch (e) {}
            try {
                const o67 = {
                };
            } catch(e68) {
            }
        }
        C41 - false;
        return v18;
    }
}
C41.length;
new C41();
const v75 = new C41();
try { v75.o(C41, v19); } catch (e) {}
const v77 = new C41();
v77.d = v77;
6 - 6;
/na(?:ab)|cde(?:a+)?/;
