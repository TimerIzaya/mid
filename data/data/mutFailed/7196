let v5 = 1108437128n;
let v6;
try { v6 = v5(-1000.0, 2.0, v5); } catch (e) {}
const v10 = Math.trunc(12247);
const v11 = --v5;
75.0807052700161 & 75.0807052700161;
v11 ^ 75.0807052700161;
2.0 & 2.0;
const v15 = /a\fb\nc\rd\te\vfyia1/ds;
const v16 = /a[^a]/uisy;
/V\P{gc=Decimal_Number}?/udisy;
const v20 = new BigInt64Array(1481);
const v23 = [];
v23.g = -1252925017;
v23.g = v23;
let v24 = -6.50438168344124;
v24 **= v24;
new Uint8ClampedArray(7);
const v31 = new Int32Array(8);
try { Uint32Array.apply(v31, v31); } catch (e) {}
const v34 = new Uint8ClampedArray(2491);
const o35 = {
};
const v37 = new Proxy(v20, o35);
try { v6(); } catch (e) {}
v34 + v15;
const v41 = Symbol.matchAll;
try { v16.test(v6); } catch (e) {}
throw -63927563n;
Object.defineProperty(v20, v10, { writable: true, enumerable: true, value: -1.0 });
Object.defineProperty(v37, 1073741825, { configurable: true, enumerable: true, get: Symbol, set: Symbol });
try {
    v20.byteLength = v10;
} catch(e43) {
}
v23[v41] = -63927563n;
%VerifyType(v20);
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
}
const v49 = new F45();
async function f50(a51, a52, a53, a54) {
    a51.fuck();
    await v49;
    return F45;
}
gc();
const v59 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v60 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
function F61(a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a63;
    } catch(e66) {
    }
    try {
        this.b = a65;
    } catch(e67) {
    }
}
new F61(v59, 5, v60);
