const v0 = [256,255,-16,257];
[-41640,1918071405,64,-65537,16,129];
[268435456,7,-2,9007199254740991,-50815,-9007199254740992,965021288];
new Int8Array(0);
241 >> 241;
241 - 241;
const v10 = new Uint16Array(241);
try { v10.filter(v0); } catch (e) {}
const v13 = 219 >>> 219;
v13 !== v13;
try { new BigInt64Array(Uint16Array, 241, 0); } catch (e) {}
const v17 = new BigInt64Array(219);
try { v17.entries(); } catch (e) {}
const v19 = v17[101];
let v20 = 1;
v20++;
const v22 = v20 & v20;
v22 << v22;
const v25 = new Int16Array(v20);
new Int16Array(12);
try { new Float32Array(v25, v19, v22); } catch (e) {}
new Float32Array(0);
class C33 {
    static toString(a35, a36) {
        this.prototype = this;
        this.d = this;
        const v38 = super[a36];
        try {
            delete this[v38];
            this[C33];
        } catch(e41) {
        }
    }
}
C33.length;
const v43 = new C33();
const v45 = new Uint8ClampedArray(v43, C33, C33);
function f46() {
    function f47(a48, a49) {
        const v50 = v43.constructor;
        try { v50(); } catch (e) {}
        return v50 + v50;
    }
    f47.g = f47;
    return f47;
}
Object.defineProperty(v45, "valueOf", { get: f46 });
v45[5] = v45;
