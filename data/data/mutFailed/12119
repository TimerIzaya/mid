function f0() {
}
const v4 = ("c").__proto__;
let v5;
try { v5 = v4.trimLeft(); } catch (e) {}
const v6 = ("string")["h"];
2147483647 + v6;
const v10 = ~v6;
let v11 = Math.ceil(v4);
v11--;
const v13 = v10 / "c";
function f14(a15, a16, a17) {
    const o20 = {
        "maxByteLength": 6,
    };
    const v22 = new ArrayBuffer(6, o20);
    new Uint32Array(v22);
    return v10;
}
f14(v11, v5, v6);
v13 >>> v13;
("c").length;
try {
    const v28 = ("c").includes(f0);
    v28 && v28;
} catch(e30) {
}
-9223372036854775807n << -9223372036854775807n;
function f35(a36, a37, a38) {
    a38 === a38;
    const o48 = {
        "b": a36,
        [-9223372036854775807n]: a36,
        toString(a41, a42, a43) {
            this[0] = this;
            let v44;
            try { v44 = a37.repeat(a41); } catch (e) {}
            try { v44.substr(v10, v44); } catch (e) {}
            try {
                f0();
            } catch(e47) {
            }
            return v44;
        },
        __proto__: "string",
        "h": a38,
        ..."string",
    };
    return o48;
}
f35.arguments = f35;
const v49 = f35(-1459115286n, "c", 2147483649n);
f35(-1459115286n, "h", f0);
let v51 = f35(-9223372036854775807n, "c", -9223372036854775807n);
const v52 = [1024];
v52[0] = v52;
[6,-5];
[54752,-10,36788];
function f55(a56, a57, a58, a59) {
    a58 + a58;
    f35 !== v49;
    2147483647 * 2147483647;
    65536 % 65536;
    const v68 = --v51;
    !2147483647;
    v68 << 2147483647;
    ~65536;
    const v72 = a58++;
    v72 <= v72;
    return f55;
}
for (let v74 = 0; v74 < 10; v74++) {
    -v74;
    f55(v74, v74, v74);
}
%OptimizeFunctionOnNextCall(f55);
f55(f55, f55, f55, f55);
