try { ("bigint").codePointAt(-1989198876); } catch (e) {}
-Infinity;
try {
    ("bigint").concat("bigint", /(d7a+b+)/gud);
} catch(e9) {
}
class C10 {
    static {
        const o12 = {
        };
        try {
            o12.f = -3.0;
        } catch(e13) {
        }
        try {
            const o14 = {
            };
            o14.f = -3.0;
            o14.b = this;
        } catch(e15) {
        }
        try {
            const o16 = {
            };
            o16.f = -3.0;
            o16.b = this;
            o16.a = this;
        } catch(e17) {
        }
        try {
            const o18 = {
            };
            o18.f = -3.0;
            o18.b = this;
            o18.a = -3.0;
        } catch(e19) {
        }
    }
}
const v20 = new C10();
const v21 = new C10();
const v22 = new C10();
const v24 = new Map();
new Map();
function f27() {
    return v20;
}
class C28 {
    static 2;
    constructor(a30, a31, a32) {
        Object.defineProperty(a31, "a", { writable: true, configurable: true, enumerable: true, get: f27, set: f27 });
        let v34;
        try { v34 = v24["entries"](..."entries", v21, ...a32, a32, f27); } catch (e) {}
        var f = -1989198876;
        try {
            a32.valueOf = v34;
        } catch(e35) {
        }
    }
    static #h;
    #c = "bigint";
    static 3967 = "bigint";
}
new C28(v21, C28, v24);
const v37 = new C28("bigint", v24, v22);
new C28(v37, C28, v37);
function f40() {
    return 2147483648n;
}
%OptimizeFunctionOnNextCall(f40);
f40();
/\u{12345}\u{23456}\x01/mv;
const v1 = /a(?!bbb|bb)c/mvisy;
const v2 = /GFT(?:foo)xPM/mgsy;
new Int16Array(0);
new Int8Array(1218);
new Float32Array(59);
class C12 {
    constructor(a14, a15, a16, a17) {
        [-0.0,-4.42299559838236e+307,454739.5490119057,1000000.0];
        [1000000.0,-1000000000000.0,-7.80464366813963,-2.0,2.220446049250313e-16,-5.264459798418378e+307];
        [5.362210361649062,2.2250738585072014e-308,2.0,7.879109177994542e+307,1000.0];
        const o23 = {
            "maxByteLength": 1024,
        };
        const v25 = new ArrayBuffer(64, o23);
        new Float32Array(v25);
    }
}
const v28 = new C12(59, 1218, v1, v2);
const v29 = new C12(59, 1218, v28, v2);
new C12(0, 0, v2, v29);
const v31 = [-1000000000.0,1e-15,-9.803124315434264,-366.4099400694298,1000000000000.0,0.7347183727038488,-Infinity,2.0,0.3916117682859279,-461027.2128179858];
const v32 = [1000000000000.0,-1.7976931348623157e+308,6.570844083183324,3.0,-2.0,961.6011183149949,634.9606529678199,1.6712831869744128e+308,1000000000000.0];
const v33 = [-1.0,1e-15,NaN,5.0,-1.390593919008634e+308,2.2250738585072014e-308,-3.6891891067725497e+307];
function f34() {
    return v31;
}
f34.valueOf = f34;
class C38 extends f34 {
    constructor(a40, a41, a42, a43) {
        super();
        const o45 = {
        };
        this.type = a40;
        gc(o45);
    }
}
const v47 = new C38();
new C38(v47, C38, v33, v33);
new C38(-2147483647n, 0n, C38, v32);
class C50 extends f34 {
    [f34] = f34;
}
new C38();
const v52 = new v29();
h = v52;
C50 << v33;
for (let v54 = 0; v54 < 8; v54++) {
    v47.length = 59;
}
const o57 = {
    "maxByteLength": 65535,
};
const v59 = new SharedArrayBuffer(16, o57);
new BigInt64Array(v59);
