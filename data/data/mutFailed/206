try {
} catch(e1) {
} finally {
}
class C3 {
    static [376363416];
    e = C3;
    static [C3];
    104;
    b;
    #e = 9007199254740991n;
    static {
        super.b = this;
        let {...v5} = this;
    }
}
let v8 = [-9223372036854775807,45087,-268435456];
[509174734,-30078599,-1953700757,-725509519,50139,1073741825];
const v10 = [15,55234,268435441,0,9007199254740992,129];
const v11 = /\p{Script=Greek}/ds;
const v12 = /.\P{Decimal_Number}/gvds;
const v13 = /xyz{1,32}?a\nb\bc/ums;
class C22 {
}
try { v12.compile(v13); } catch (e) {}
v11.source;
v8 = v10;
new Uint32Array(3972);
new Int32Array(3);
new Int8Array(210);
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    a36.lastIndexOf(a36, a37);
}
const v42 = new Int16Array(2);
new Uint16Array(v42);
const v4 = new Map();
const o9 = {
    "c": "9007199254740990",
    p(a7, a8) {
        return this;
    },
};
class C10 {
    static set h(a12) {
        let v11 = this;
        try {
            v11 = a12;
        } catch(e13) {
        }
    }
    static toString(a15) {
        return Map;
    }
    static [v4];
    e = v4;
}
const v19 = new C10();
const v20 = new C10();
const v21 = new C10();
class C27 {
    constructor(a29, a30) {
        const v31 = this?.constructor;
        try { new v31(a29, a29); } catch (e) {}
        a29 | a29;
        a30.name;
        const v35 = super.replace;
        a29?.[a30];
        try {
            a29[6] = v35;
        } catch(e37) {
            e37.b = e37;
        }
    }
    #n(a39, a40) {
        try { a39(-14, -4096); } catch (e) {}
        [365052305,5283,128,9223372036854775807,5];
        [-1073741824,65537,257];
        return [-385315611,-1911959463,-3,1361108052];
    }
}
const v46 = new C27(C27, v20);
try { v46.constructor(-4096, 1000.0); } catch (e) {}
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = this?.propertyIsEnumerable;
    try { new v54(a50); } catch (e) {}
    a50.length = a50;
    a52.d = a52;
    a53.length = a53;
    const v56 = a53?.constructor;
    try { v56.call(v56); } catch (e) {}
    try { new v56(a50, v46); } catch (e) {}
    try {
        this.f = v46;
    } catch(e59) {
    }
}
const v61 = [];
v61[2] = v61;
16 ^ 16;
let {"multiline":v65,} = /[\cZ]r2foo(?<!bar)baz?/mgsud;
function f66() {
    return 13170;
}
class C67 extends Map {
    static #o(a69, a70) {
        a70--;
        for (let v72 = 0; v72 < 32; v72++) {
            v19["p" + v72] = v72;
        }
        return f66;
    }
    constructor(a76, a77, a78, a79) {
        super("r9se");
        function f80(a81, a82) {
            function f84(a85) {
                new Int8Array(2238);
                new Int8Array(4);
                new Float32Array(1000);
            }
            this.onmessage = f84;
            let v96 = -65537;
            f66--;
            const v99 = +-653891.5151603543;
            v96--;
            v99 << f66;
            Math.asinh(v96);
            !-653891.5151603543;
        }
        const v106 = ["function",a76];
        const o107 = {
            "arguments": v106,
            "type": "function",
        };
        new Worker(f80, o107);
    }
}
new C67(f66, C67, 268435440, v21);
new C67(13170, v21, v4, C67);
new C67(2127601868, v20, "e", v21);
const v113 = [null];
const v114 = [v113,v113,v113];
const v115 = [v114,v114,v114,v114,v114];
const v118 = new Float32Array(512, 512, 512);
v118[268435441] -= 512;
v114.a = v115;
