const v0 = [];
function f1() {
    const o10 = {
        "e": v0,
        "f": v0,
        "h": v0,
        "a": v0,
        "b": v0,
        p() {
            const v3 = super.d;
            super[v3] = v0;
            return v3;
        },
        3158430996: v0,
        3: v0,
        "g": f1,
        get d() {
            const v6 = Symbol.toPrimitive;
            const o9 = {
                [v6]() {
                    [v0];
                },
            };
        },
        2: v0,
    };
    return o10;
}
f1();
f1();
f1();
/a{1,2}?[t(x)(x)(x)\3*]?/udmy;
const v15 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f16() {
    return f16;
}
function f17(a18) {
    return a18;
}
Object.defineProperty(v15, 1, { get: f16, set: f17 });
/(?:a{5,1000000}){3,1000000}/gvis;
/\ud808\udf45*/vdims;
new BigInt64Array(3394);
Math.tan(9007199254740992);
("of").replaceAll("of");
new Uint8ClampedArray(0);
new Uint8ClampedArray(145);
class C35 {
}
const v36 = new C35();
class C37 {
}
class C38 {
    constructor(a40) {
        const v41 = this.constructor;
        try { new v41(); } catch (e) {}
        const v44 = new Float32Array();
        v44.entries();
    }
}
for (let v46 = 0; v46 < 5; v46++) {
    function f47() {
        Symbol.toPrimitive.description.codePointAt(C38);
        return Symbol;
    }
    f47();
    %OptimizeFunctionOnNextCall(f47);
}
const v53 = v36.constructor;
let v54;
try { v54 = v53(v53, C35); } catch (e) {}
function f55() {
    const v57 = ("D")[0];
    try { v57.substring(v54); } catch (e) {}
    return v54;
}
class C60 {
    #g = 268435439;
    [3394];
    3 = 268435439;
    1721114904;
    #b;
}
%PrepareFunctionForOptimization(f55);
f55();
%OptimizeFunctionOnNextCall(f55);
f55();
