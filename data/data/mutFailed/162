function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1024;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
const t10 = "WKgh";
t10[1] = "WKgh";
96 - 96;
new Int32Array(96);
new Int8Array(16);
new Float32Array(196);
const v22 = [8];
v22.g = v22;
const v23 = v22.fill(196);
try { v23.entries(); } catch (e) {}
new Uint16Array();
Int32Array.e = Int32Array;
const v29 = new Int32Array();
class C30 {
    static #d = -2;
    constructor(a32, a33) {
        try {
            a32.#d += v29;
        } catch(e34) {
            function f35(a36) {
                const v38 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
                const v40 = ([Uint32Array,Uint32Array,Uint32Array,Uint32Array]).push();
                v40 + v40;
                let v42;
                try { v42 = v38.every(v40, v38); } catch (e) {}
                return v42;
            }
            f35.name = f35;
            e34.toString = f35;
            e34.toString();
        }
    }
}
C30.name = C30;
const t44 = C30.constructor;
t44(255);
const v46 = new C30();
const v47 = v46?.constructor;
try { new v47(255, 255); } catch (e) {}
new Float32Array(2686);
function f3(a4, a5) {
    let {"c":v7,"e":v8,...v9} = a5;
    const v14 = 6 ^ v8;
    Math.log(v8);
    v14 | v7;
    return arguments;
}
f3();
const v20 = new Uint8Array(255);
const o21 = {
    "f": 255,
    10: v20,
};
255 ** Uint8Array;
new Uint32Array(127);
const v29 = [2.220446049250313e-16,4.817717597327409,1e-15,-1000000000000.0,-1000000.0,2.0,-3.382353865622333e+306,134.7295617651339];
const v30 = [NaN,-5.161337834188833e+307,NaN,-984.7986985006023];
let v31;
try { v31 = v29.findLastIndex(v29, v29); } catch (e) {}
class C33 extends v30.constructor {
}
const v34 = new C33();
v34.unshift(v31);
