const v0 = [3.768796173028337e+307,-2.220446049250313e-16,0.21616141928935195,1e-15,-184.6713631461621,4.0,-0.34554514414626425];
const v1 = [-794476.0414811651,0.5538407312966901,3.0171290639806045,-3.0,-2.2250738585072014e-308,-506096.56443168485,Infinity,2.2250738585072014e-308];
const v2 = [0.37399238179474803,-629.5872263125202,-2.2250738585072014e-308,903397.2933118434,0.5819294056517146,Infinity,1.5538979859022353e+308];
function f6() {
    const v9 = new BigUint64Array(4096);
    const o13 = {
        toString(a11, a12) {
            v9[3408] = this;
            return 4096;
        },
    };
    return 0.053939627194463435;
}
Object.defineProperty(BigUint64Array, "valueOf", { writable: true, value: f6 });
new BigUint64Array(10);
class C19 extends /nupa\Sc/vms.constructor {
}
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    function f24() {
        return F20;
    }
    function f25(a26) {
        a23 |= a26;
    }
    Object.defineProperty(this, "f", { writable: true, configurable: true, get: f24, set: f25 });
    try {
        this.f = a22;
    } catch(e27) {
    }
}
new Uint8ClampedArray([601759695], BigUint64Array * 536870887, 536870887);
const v34 = new F20(0.5918699554591806, f6);
const v35 = new F20(v34, v34);
new F20(v35, v34);
class C37 extends F20 {
    static o(a39, a40, a41) {
        function f42(a43, a44) {
            const v46 = new Set();
            function F47(a49, a50) {
                if (!new.target) { throw 'must be called with new'; }
                let v51 = Float64Array;
                v51 = a49;
                ("c").toLowerCase();
                class C54 {
                    constructor(a56, a57, a58) {
                        for (let v59 = 0; v59 < 5; v59++) {
                            function f61() {
                                const o69 = {
                                    [-4294967297n](a63, a64, a65, a66) {
                                        eval(C54);
                                    },
                                };
                                return f61;
                            }
                            f61();
                            %OptimizeFunctionOnNextCall(f61);
                        }
                    }
                }
                try {
                    ("toString").constructor;
                    function f73() {
                        const v76 = new Uint8Array();
                        v76[8] = Uint16Array;
                        return Uint8Array;
                    }
                    this.d = a49;
                } catch(e77) {
                    for (let [v78,v79] of a49) {
                        try {
                            v46.values();
                        } catch(e81) {
                        }
                    }
                }
                try {
                    this.h = v46;
                } catch(e82) {
                }
                try {
                    const v83 = v46[this];
                    try {
                        new F47(v83, -268435456n);
                    } catch(e86) {
                    }
                    this.b = Set;
                } catch(e87) {
                }
            }
            const o88 = {
                __proto__: v2,
            };
            return o88;
        }
        f42(f42, v2);
        f42(v1, v2);
        f42(a40, a40);
        return a41;
    }
    a = -1e-15;
    g;
    static #g = v0;
}
new C37();
class C93 {
}
async function* f95(a96, a97) {
    return -9223372036854775807;
}
new C37();
new C37();
const v102 = Array(16);
15312 | [Infinity,5.072687501529128e+307,0.4093098171074484,4.0,-4.442441003635313e+306,843998.4933901483,-714.8973177887364];
const v107 = new WeakMap();
const v108 = /8[\cA]v/uisy;
v108[Symbol.toPrimitive] = f95;
function f111(a112, a113) {
    const v114 = [v108,v108,v108,v108,v108];
    v107.set(v114, v114);
    return v108;
}
v108[Symbol.toPrimitive] = f111;
const v118 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v118.length = v108;
} catch(e119) {
}
const o120 = {
    ...v102,
};
class C122 extends Date {
}
const v123 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try {
    v123.forEach();
} catch(e125) {
    e125.a = e125;
    e125.a = e125;
}
const v126 = new C122();
v126.setUTCSeconds();
