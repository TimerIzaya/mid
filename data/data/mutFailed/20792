const v0 = [-421294683,-186608953,-2147483648,5,0,11,64522,2147483648,-10078,-4294967295];
const v1 = [1356211820,-65536,-127541105,51283,-65535,19038,14,512,1,3];
[1073741824,-256];
new Uint8ClampedArray(48);
const v11 = new Int32Array(9);
new Int32Array(15);
const v19 = new BigUint64Array(6);
let v20 = 2549;
v20--;
new BigInt64Array(v20);
try { Float32Array(v20, v20, undefined); } catch (e) {}
new Float32Array(3);
const v28 = /(J5a{0,1}?)/y;
const v29 = /u?/udms;
/bf/gvms;
32 >>> 32;
let v33 = 32 + 32;
v33--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, undefined); } catch (e) {}
new Uint8Array(4096);
let v43 = 1582 >> 1582;
v43--;
const v46 = new Int8Array(-65536);
const v48 = 4 - 4;
-54813 - -54813;
const v52 = 8 & 8;
const v53 = [-54813,1582,-54813,8];
const v54 = [-54813];
const v55 = [-54813];
try { v55.map(4); } catch (e) {}
function f57(a58, a59, a60, a61) {
    try { a60.toString(); } catch (e) {}
    try { v48.groupToMap(a60); } catch (e) {}
    a60[0] = a60;
    try { a58.copyWithin(undefined, a59); } catch (e) {}
    const o73 = {
        n(a66, a67, a68, a69) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a61;
        },
        ...v55,
        "b": v53,
        ...a60,
        ...v55,
        129: 4,
        ...a58,
    };
    o73[2] = o73;
    return o73;
}
%VerifyType(v19);
v55[2];
try {
    v46.__proto__ = v0;
} catch(e75) {
}
const v77 = f57(v54, 8, f57(v54, v55, v53, 4), 4);
v77[129] = v77;
const v78 = f57(v55, 4, 4, 4);
v78.d = v78;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C86 extends Map {
}
const v87 = new Map();
try { v87.get(Uint8Array); } catch (e) {}
const v89 = v87.isPrototypeOf();
v89 && v89;
v89 && v89;
Date.name;
let v95;
try { v95 = Date.parse(v52); } catch (e) {}
-v95;
class C97 {
    static {
        for (let v99 = 0; v99 < 25; v99++) {
            v99 >>> v99;
            const v101 = [601759695];
            const v102 = [1073741824,1073741823,1376142744,1073741825];
            function f104(a105, a106, a107, a108) {
                try { new a105(); } catch (e) {}
                a106 & a106;
                ~a106;
                try { new a105(); } catch (e) {}
                const v113 = a107 << a107;
                v113 % v113;
                function f116() {
                }
                v29 ^ v11;
                8 * C97;
                try {
                    v1.length = v99;
                } catch(e119) {
                }
                const v121 = new Int8Array();
                const v124 = BigUint64Array * 536870887;
                let v125 = v124 - v124;
                v125++;
                const v127 = v124 ** v124;
                try { Number.parseInt(Number, v125); } catch (e) {}
                try { new Number(v28); } catch (e) {}
                try { v19.valueOf(); } catch (e) {}
                Number.isNaN(v127);
                function f133(a134, a135) {
                    return Number;
                }
                try { f133(); } catch (e) {}
                v121.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f116);
                try { v102["find"](..."find", a108, ...v101); } catch (e) {}
                const o141 = {
                };
            }
            for (let v142 = 0; v142 < 5; v142++) {
                f104(this, v142, v142);
            }
        }
    }
}
