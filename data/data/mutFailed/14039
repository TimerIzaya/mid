class C3 {
    static m(a5) {
        try {
            super.delete(a5, this, 12153);
        } catch(e7) {
            e7.message = e7;
        }
        return this[1];
    }
    static #g;
    #c;
}
try { C3.m(964219455); } catch (e) {}
const v10 = new C3();
const v11 = v10?.constructor;
try { new v11(); } catch (e) {}
const v13 = new C3();
const v14 = new C3();
const v15 = v14?.constructor;
try { new v15(); } catch (e) {}
try { v14.constructor(); } catch (e) {}
let v18 = 32491;
v18--;
-38405 - -38405;
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.constructor;
    try { new v25(); } catch (e) {}
    let v27;
    try { v27 = this.propertyIsEnumerable(12153); } catch (e) {}
    v27 || v27;
}
F23.caller = F23;
const v30 = new F23();
try { v30.toString(); } catch (e) {}
const v32 = v30?.constructor;
let v33;
try { v33 = new v32(); } catch (e) {}
v33.length = v33;
let v34 = 28;
v34++;
2023 >>> 2023;
const v40 = new Uint16Array(C3, C3, -60790, -60790, 2023, C3);
Int8Array.e = Int8Array;
const v43 = new Int8Array(8);
const v45 = -127;
v45 / v45;
try { Float32Array.of(); } catch (e) {}
const v49 = new Float32Array(127);
let v50;
try { v50 = v49.entries(); } catch (e) {}
try { v50.next(); } catch (e) {}
1024 >>> 1024;
new BigInt64Array(1024);
let v57 = 604.4479109019192;
v57--;
const v61 = [-2.220446049250313e-16,-2.220446049250313e-16];
v61.g = v61;
try { v61.toLocaleString(); } catch (e) {}
const v63 = [v61];
const v64 = [0.3083488057663979,0.3083488057663979];
v64.push(0.3083488057663979);
class C66 {
    constructor(a68, a69) {
        const v70 = a68?.filter;
        try { new v70(Uint16Array); } catch (e) {}
        const v72 = this.__lookupGetter__;
        try { v72.toString(); } catch (e) {}
        try { new v72(); } catch (e) {}
        const v75 = a69[2];
        const v76 = ~v75;
        let v77 = v76 + v76;
        v77++;
        let v79 = 2;
        v79++;
        try { new Uint8Array(-60790, Uint16Array, v75); } catch (e) {}
        function f84(a85, a86, a87, a88) {
            a85.length;
            const v90 = a87++;
            v90 >> v90;
            const o96 = {
                n(a93, a94) {
                    try { this.n(this, a86); } catch (e) {}
                    return v76;
                },
            };
            let v97;
            try { v97 = o96.n(v49, BigInt64Array); } catch (e) {}
            -v97;
            return o96;
        }
        f84(v30, Uint8Array, f84);
        for (let v100 = 0; v100 < 625; v100++) {
            const v101 = v100 >>> v100;
            v101 << v101;
            f84(Uint8Array);
            7 + 7;
            try { new BigUint64Array(this, BigUint64Array, a68); } catch (e) {}
            const v108 = new BigUint64Array(7);
            try { v108.findIndex(v13); } catch (e) {}
            const v112 = new Int16Array(9);
            v112[8] = v112;
            Float32Array.prototype = Float32Array;
            new Float32Array(201);
        }
    }
}
C66.name = C66;
const v117 = new C66(v61, v61);
const v118 = v117?.__defineGetter__;
try { v118.toString(); } catch (e) {}
try { new v118(Uint8ClampedArray, v40); } catch (e) {}
const v121 = new C66(v63, v64);
const v122 = v121.constructor;
try { v122.call(v14); } catch (e) {}
let v124;
try { v124 = new v122(v122, v43); } catch (e) {}
v124.length;
const v126 = new v122(v57, 0.3083488057663979);
const v127 = v126?.constructor;
let v128;
try { v128 = new v127(v14, v126); } catch (e) {}
v128.f = v128;
