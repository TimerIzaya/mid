let v2 = -1000000000000.0;
class C3 {
    [v2] = 268435440;
    constructor(a5, a6) {
        "function" in a5;
        super["function"];
        const v10 = new String("function");
        a5 in v10;
    }
    o(a13, a14) {
        let v12 = this;
        %VerifyType(a14);
        ({"length":v12,...v2} = "function");
        a13[2147483649] = v2;
        const v15 = ("function")[30];
        const o16 = {
        };
        try {
            return v15;
            return C3;
            const v18 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
            try {
                v18.#p();
            } catch(e20) {
            }
            o16.d = v15;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.d = v15;
            o22.f = a14;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.d = v15;
            o24.f = a14;
            o24.e = a13;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.d = v15;
            o26.f = a14;
            o26.e = v15;
        } catch(e27) {
        }
        return a14;
    }
}
const v28 = new C3(268435440, "function");
new C3("function", 268435440);
new C3(v2, v28);
class C33 {
}
new C33();
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(a38); } catch (e) {}
    a38 == a38;
    this.g = a37 !== a37;
}
new BigUint64Array(180);
new Float32Array(8);
for (let v49 = 0; v49 < 25; v49++) {
}
6 >>> 8;
class C52 {
}
new Float32Array(87);
/(3[dCHK?]?)/vdim;
[0.3083488057663979,0.3083488057663979,0.3083488057663979];
const o66 = {
    o(a62) {
        const o64 = {
        };
        gc(o64);
        return BigUint64Array;
    },
};
const v75 = /xEz\xe2\x81\xa3/gumy;
function f76(a77, a78, a79) {
    return v75;
}
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
}
