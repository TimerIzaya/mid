function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -9007199254740992;
    } catch(e6) {
    }
    try {
        this.d = 65535;
    } catch(e7) {
    }
}
const v8 = [1073741824,1073741823,1376142744,1073741825];
try {
    v8.forEach();
} catch(e10) {
    const v12 = new Float32Array(-58873, 65535);
    function f13() {
        return v8;
    }
    Object.defineProperty(v12, "h", { configurable: true, enumerable: true, get: f13 });
}
const v14 = new F3(F3);
new Date();
function f17(a18) {
    const o19 = {
    };
    return o19[213];
}
f17(f17);
f17();
new F3(F3);
new F3(v14);
new Uint8ClampedArray(3615);
Math.sinh(0);
function f35() {
    return WeakMap;
}
f35();
new Uint32Array(512);
new Float64Array(4096);
class C44 {
    static #m(a46) {
    }
    set d(a48) {
        this.#m();
    }
    constructor(a51) {
        function f52() {
            return this;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f52 });
    }
}
let v53 = 0;
v53++;
const v55 = new C44(v53);
([v55]).constructor;
const v67 = new WeakSet();
v67[-65537n] >>>= WeakSet;
v67[0n] = -65537n;
class C71 {
    get c() {
        this.h &&= WeakSet;
        Object.defineProperty(v67, 3, { enumerable: true, get: Date });
        typeof this === "symbol";
        return Date;
    }
    constructor(a77, a78) {
        a77 | a77;
    }
}
function F87(a89) {
    if (!new.target) { throw 'must be called with new'; }
    new Uint8ClampedArray(Uint8ClampedArray);
    function f92(a93, a94, a95, a96) {
        const v98 = new Int8Array(a95);
        const v102 = new Int32Array(2528);
        v102[0] %= -1073741824;
        return v98.buffer;
    }
    f92();
    %OptimizeFunctionOnNextCall(f92);
    0 / 0;
}
