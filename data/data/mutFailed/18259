function f6(a7, a8, a9) {
    const o26 = {
        "b": 2147483648,
        [a7]: 2n,
        "c": a7,
        "g": 2n,
        [a9](a11, a12, a13, a14) {
            try {
                a7.valueOf = 4294967297;
            } catch(e15) {
            }
            class C16 {
                #n(a18) {
                    const o20 = {
                        "execution": "sync",
                    };
                }
            }
            const v21 = new C16();
            v21?.__defineGetter__;
            return -2147483647n;
        },
    };
    return o26;
}
f6(2n, 2n, 4294967297);
f6(65536n, 10n, 4294967297);
const v30 = [2147483648,2147483648,f6(65536n, 10n, 4294967297)];
[v30];
const v32 = [v30,2n,f6];
new Uint8Array(442);
1 >> 1;
const v38 = 1 - 1;
Int8Array.e = Int8Array;
const t34 = 4294967297;
const v40 = new t34(1);
const v43 = Uint32Array.length;
Uint32Array.prototype = Uint32Array;
new Uint32Array(12, Uint32Array);
const v46 = [520126.03439582814,827116.4087908485,-3.0];
try { v46.groupToMap(v38); } catch (e) {}
try { Int16Array.of(); } catch (e) {}
const v50 = new Int16Array(442, Int16Array);
v50[32];
const v52 = v50.slice(v40, 1);
v52[0] = v52;
for (let v54 = 0; v54 < 25; v54++) {
    function f55(a56, a57, a58, a59) {
        a58.prototype = a58;
        const v60 = a58 != a56;
        v60 && v60;
        a59.d = a59;
        Int8Array.prototype = -492058721;
        new Int8Array(v54);
        class C64 {
        }
        let v65;
        try { v65 = C64.toString(); } catch (e) {}
        C64.length;
        const v67 = [-1024];
        for (let v68 = 0; v68 < 5; v68++) {
            delete v67[v68];
        }
        0 <= 0;
        const v72 = new Int8Array(v46, v54, v54);
        v72[2] = v72;
        function f73(a74, a75) {
            return v65;
        }
        return f55;
    }
    for (let v76 = 0; v76 < 5; v76++) {
        f55(v46, v46, v54, Date);
    }
}
function f78(a79) {
}
function f81() {
    const o91 = {
        [-2147483649](a83, a84) {
        },
        valueOf(a86, a87) {
            return 12;
        },
        valueOf(a89, a90) {
            return a90;
        },
    };
    return -38329;
}
const v92 = [65536,12220,268435456,-176972115,977653611];
for (const v93 in v92) {
    try { e(v92, e, v93, v93, e); } catch (e) {}
    function F96(a98, a99) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = a98;
    }
    new F96();
}
function F101() {
    if (!new.target) { throw 'must be called with new'; }
}
class C103 {
    e;
    static [-492058721];
    [v32];
    [f81] = v43;
    static b = 1;
    valueOf(a105, a106, a107, a108) {
    }
}
function F109(a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    const o113 = {
    };
    for (let v115 = 0; v115 < 5; v115++) {
        function f116() {
            const v117 = new Uint32Array();
            return v117.entries().next();
        }
        f116();
        %OptimizeFunctionOnNextCall(f116);
    }
    class C121 extends Int8Array {
        static 10000;
    }
    new C121();
    new C121();
    new C121();
}
try {
} catch(e125) {
}
const v128 = new Float64Array(255);
function F129(a131, a132, a133, a134) {
    if (!new.target) { throw 'must be called with new'; }
    a132 >> a132;
    a134 | a134;
    try {
        v128.b = a132;
    } catch(e137) {
    }
    try {
        this.h = a131;
    } catch(e138) {
    }
}
class C139 {
}
if ("log1p") {
}
