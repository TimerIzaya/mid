[3.0902824605435875,1.036424495075876e+308,-1.0,263859.0064649093,-982.3172807027809];
const v2 = [-434208.6558949752,-1.1068305236107812e+307,-230625.81079230388,5.0,1e-15,-1.0,-7.667156992018455e+307,-662.802749163073,1.6916058244400326e+308];
const v3 = [0.6502778943924992,-5.092049271387503e+307,-1.7976931348623157e+308,-7.5656233208495e+307,Infinity,-240.50115684991272,-5.0,268091.85819458123];
class C4 {
    constructor(a6) {
        try { this[v3]("valueOf", "valueOf", v3, "valueOf"); } catch (e) {}
    }
    p(a10) {
        const o11 = {
            11: a10,
            "c": v2,
        };
        const v15 = Uint8ClampedArray.prototype;
        try { v15.at(Uint8ClampedArray, Uint8ClampedArray, v15, Uint8ClampedArray); } catch (e) {}
        return v2;
    }
}
const v18 = new C4(v3);
const v19 = new C4(v18);
new C4(v19);
-Infinity;
new v19();
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this.constructor;
    let v31;
    try { v31 = new v30(this); } catch (e) {}
    v31 >>> a29;
}
new F26();
new F26();
