const v0 = /a{1,2}?/gv;
const v1 = /Rjxyz{0,1}/uis;
class C3 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v9;
        try { v9 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v9.#p(undefined, v9, v9, undefined);
        } catch(e11) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v12 = new C3();
try { C3.stringify(v1, v1, v0); } catch (e) {}
C3.c = v12;
/\P{gc=Decimal_Number}/v;
const t21 = -188382644;
new t21();
const v20 = [BigInt64Array,BigInt64Array];
/((((.).).).)rfoo|(bar|baz)|quux*/uims[v20];
const v26 = ("dotAll")?.toLocaleUpperCase;
try { new v26(); } catch (e) {}
new Date();
function f30(a31, a32, a33, a34) {
    function F35(a37) {
        if (!new.target) { throw 'must be called with new'; }
    }
    for (let v38 = 0; v38 < 500; v38++) {
        const v40 = new BigInt64Array();
        for (let v41 = 0; v41 < 25; v41++) {
            v40["p" + v41] = v41;
        }
        v38 + v38;
    }
    256 + 256;
    function f47(a48) {
        const o50 = {
            ...a48,
            get d() {
                return this;
            },
            6: 3,
        };
        return 256;
    }
    const o55 = {
        [f30](a52, a53, a54) {
        },
    };
    const v58 = new Int32Array(12);
    for (const v59 in v58) {
    }
    o55.h = o55;
    return a34;
}
try { new f30("j8L", "dotAll", 3, "dotAll"); } catch (e) {}
%OptimizeFunctionOnNextCall(f30);
f30();
