function f0() {
}
const v1 = [-10,5,-61761,20471,7];
v1.multiline = v1;
v1.multiline = v1;
const v2 = [127,-65537,9007199254740992,-4,536870888,-2147483647,43319,10,61550,37636710];
[2147483648,10787,7];
const v4 = [0.0];
const v5 = [7.70890437476821,0.9122636112447872,0.5309625176781353,-2.220446049250313e-16,-1000000000.0,9.998329781378455];
const v6 = [-1000000000000.0,5.0,4.0,0.9581813224437463,2.220446049250313e-16,2.220446049250313e-16];
const v7 = [-1e-15,1000000000.0,1.62813817558258e+308,1.7976931348623157e+308,1.0,-1.7976931348623157e+308,-858.1209291264582,4.0,0.6443854316196609];
const v8 = [-1000.0,-1e-15,4.0];
const v9 = [8.072973413415252,1.7976931348623157e+308,1000000000000.0,-1000000000.0,-2.2250738585072014e-308,-536634.0706175514,1000000.0];
v9[Symbol.f] = f0;
v9[Symbol.toPrimitive] = f0;
function F14(a16, a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "d", { enumerable: true, value: v4 });
    a19.toString = f0;
    try {
        v1.multiline = a19;
    } catch(e20) {
    }
    try {
        this.h = v2;
    } catch(e21) {
    }
    try {
        this.g = v2;
    } catch(e22) {
    }
}
new F14(v8, v2, v1, v5);
new F14(v2, v2, v4, v9);
new F14(v6, v7, v5, v8);
const v28 = new Uint8Array(64);
new Int8Array(10);
new undefined(v28);
const v35 = new undefined(3327);
const v36 = v35.join(v35);
try { v36.concat(v9); } catch (e) {}
