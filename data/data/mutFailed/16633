new BigUint64Array(2049);
new Float32Array(1534);
typeof Float32Array === "number";
let v12;
try { v12 = ("number").charCodeAt(2049); } catch (e) {}
const t5 = -235276.73694527312;
new t5(5);
new Uint8ClampedArray(512);
const v21 = new Int16Array(1024);
new Int32Array(3098);
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = Int32Array;
    } catch(e29) {
    }
    try {
        this.b = a27;
    } catch(e30) {
    }
}
new F25(2049, Float32Array);
const v32 = new F25(3098, F25);
new F25(2049, 2049);
try {
    v12(5);
} catch(e36) {
}
try { v21.slice(512); } catch (e) {}
class C38 {
}
const v39 = Array();
const v40 = new v32();
function f41(a42, a43, a44) {
    const o52 = {
        toString(a46, a47, a48) {
            a43 < v39;
            super[v40];
            return Array;
        },
        get d() {
        },
    };
    const v53 = o52.__lookupSetter__;
    ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
    const v57 = [-1539,1,12];
    function f58() {
        return f58;
    }
    function f59(a60, a61) {
        const o62 = {
            [a60]: v57,
        };
        const v65 = ~a61;
        Math.ceil(o62);
        Math.log(o62);
        v65 - a61;
        Math.sinh(v65);
        return a61;
    }
    f59(f59);
    f59(f58);
    try { new v53(a42); } catch (e) {}
    return o52;
}
%PrepareFunctionForOptimization(f41);
const v74 = f41(f41(), Array, Array);
%OptimizeFunctionOnNextCall(f41);
f41(v39, f41, v74);
