const v0 = /(a)\1+/gudimy;
const v1 = /abc|def/gvdm;
const v2 = /H/udmsy;
function f3() {
    return v2;
}
const v7 = new Uint8Array(268435440);
function f8(a9, a10) {
    const o11 = {
        "b": v7,
    };
    return a10;
}
class C14 {
    7 = f3;
    c;
    5;
    get a() {
        v1[Symbol.matchAll] = -536870912;
        for (let v18 = 0; v18 < 25; v18++) {
        }
        class C19 {
            #a;
            valueOf(a21, a22) {
            }
            toString(a24) {
            }
            static f;
        }
        new C19();
        function f26() {
            return f3;
        }
        return v1;
    }
}
new C14();
new C14();
const v29 = new C14();
new Int16Array(2700);
new Float32Array(1026);
new Uint32Array(9);
const o41 = {
    "maxByteLength": 2645890471,
};
const v43 = new ArrayBuffer(103, o41);
new Float32Array(v43);
function f46() {
    const v52 = new Float64Array();
    function F53(a55, a56) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a55;
        } catch(e57) {
            for (let [v58,v59] of a55) {
            }
        }
        try {
            const v60 = v52[this];
            const v61 = [];
            new Float32Array(7);
            a56 === this;
            let [] = v52;
            v61[1];
            new F53(v60, -268435456n);
        } catch(e72) {
        }
    }
    v7[0]?.[4294967296];
    3.4890473589784586e+307 + f3;
    new WeakSet();
    new F53();
    new F53();
    const v82 = new WeakMap();
    const v85 = new Int32Array(87);
    v85.lastIndexOf(v82, -2147483647);
    new F53();
    function F88(a90, a91) {
        if (!new.target) { throw 'must be called with new'; }
        const v92 = this.constructor;
        try { new v92(this, this); } catch (e) {}
        const v94 = a90--;
        try {
            +(-1538129542 - v92) ^ v94;
        } catch(e99) {
        }
    }
    const o112 = {
        "e": 12,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a101) {
            function f102() {
                function f103(a104) {
                    try {
                        const o105 = {
                        };
                    } catch(e106) {
                    }
                }
                try {
                } catch(e107) {
                }
            }
            const o110 = {
                "type": "function",
            };
            new Worker(f102, o110);
            return a101;
        },
        "toPrimitive": v0,
        /*
        __proto__: v29,
        */
        ...1000000000000.0,
    };
    return o112;
}
%PrepareFunctionForOptimization(f46);
f46();
f46();
%OptimizeFunctionOnNextCall(f46);
f46();
