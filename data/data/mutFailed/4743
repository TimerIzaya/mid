const v1 = "a" < "a";
const o5 = {
    n(a3, a4) {
        return v1;
    },
};
const v8 = [1e-15,-1.2508449375200217e+307,-2.2250738585072014e-308];
const v9 = [-1.7976931348623157e+308,0.0,1000000.0,-78.8362741637203,1000000.0,-1000000000.0,0.8974255261975151,0.3109585085468427];
[1.0,2.220446049250313e-16,-221.6392150076698,362423.1266948187,-4.0,4.67762169666174,1.2703645585889014e+308,464512.6857675116];
class C11 {
    #valueOf(a13, a14, a15, a16) {
        ("a").length;
        %VerifyType(this);
        delete a15[77];
        [9223372036854775807,15,9,-18288,8,-65536,257,-2147483647,268435456,-280318342];
        [850890284,268435456,-2147483649,65535,2147483649,-35569,-2,64,-15,-10];
        [1,-9007199254740992,268435456,7,-4294967297,-2147483648,9007199254740991,78072960];
        return v9[97];
    }
    static {
        super["a"] = v8;
        const t21 = "function";
        t21[5] = "xAu";
    }
}
new C11();
const v26 = new C11();
new C11();
function f32() {
    return v26;
}
[2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
class C34 {
    constructor(a36, a37) {
    }
}
new C34();
const v40 = new C34();
new C34();
[];
[];
v40 << -1557853178;
[3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f50(a51, a52) {
    return f50;
}
f50();
const v56 = new Set();
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a59;
    } catch(e61) {
        for (let [v62,v63] of a59) {
            class C64 {
            }
            const t56 = C64().g;
            t56.length = 1;
            v56.values();
        }
    }
    try {
        this.h = v56;
    } catch(e69) {
    }
    try {
        const v70 = v56[this];
        try {
            new F57(v70, -2046072084n);
        } catch(e73) {
        }
        this.b = Set;
    } catch(e74) {
    }
}
const v75 = new F57();
new Uint8Array(4096);
Math.atan2(-0.0, 2.0);
let [v83,,...v84] = v56;
v75.toString = v84[Symbol.toPrimitive];
new F57();
const v90 = new Float32Array();
for (const v91 of v90) {
    function F92(a94, a95) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v91;
    }
    new F92();
}
Array();
