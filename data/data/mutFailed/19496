/9a(?!bbb|bb)cDa\n+/vdmy;
function f1(a2, a3) {
    const o6 = {
        set d(a5) {
        },
        "a": f1,
    };
    const v9 = new Int8Array(268435456);
    return v9;
}
/e/msy;
const v11 = /[[a-zA-Z0-9]\cAX+]/gdm;
for (let v13 = 0; v13 < 5; v13++) {
    function f14() {
        for (let i16 = 0, i17 = 3;
            (() => {
                class C18 extends f1 {
                }
                return i16 < 3;
            })();
            v13 >> i16++) {
        }
        return v13;
    }
    f14();
    %OptimizeFunctionOnNextCall(f14);
}
[-813533.065413065,609590.5685858717];
[0.0,1.0,-Infinity,0.6277640718395953,2.0027452684605223];
function f31() {
    return true;
}
Object.defineProperty(Int16Array, 1, { writable: true, configurable: true, enumerable: true, get: f31 });
Int16Array[0] = v11;
const v32 = new Int16Array(Int16Array, Int16Array, Int16Array);
const v34 = new Int32Array();
v32[v34 / v32];
[-Infinity,-2.0,-1000.0,4.0,731.1956910766951];
const v40 = new BigInt64Array(5);
v40.toString = f1;
v40.constructor = f1;
function f41() {
    return v40;
}
try { v40.map(f41); } catch (e) {}
new Uint16Array(9);
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "a", { writable: true, configurable: true, value: 3 });
    this.a = a55;
}
new F52(522675525n);
new Uint16Array(2736);
new BigUint64Array(1);
function f61() {
    const o62 = {
    };
    return f61;
}
%OptimizeFunctionOnNextCall(f61);
f61();
