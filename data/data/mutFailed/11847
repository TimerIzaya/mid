const v0 = [-1.0,-257.4300723222036,0.3352251494801649];
const v1 = [-479866.03331195645,-1000000.0,1000000000000.0,112.92439341674276,0.6652332491643822,1000.0,-2.2250738585072014e-308];
const v2 = [346823.08568278025,-11.208454072710197,4.498540472671265e+306,2.427085815843439];
const v3 = [v2,v2,v1,v2,v0];
const v4 = [v0,v2];
[v4,v2];
class C6 {
    static {
        Symbol.iterator;
        const o18 = {
            [C6]() {
                let v11 = 10;
                const o17 = {
                    next() {
                        v11--;
                        const v15 = v11 == 0;
                        const o16 = {
                            "done": v15,
                            "value": v11,
                        };
                        return o16;
                    },
                };
                return C6;
            },
        };
    }
}
const v19 = new C6();
const v20 = new v19();
new C6();
class C22 {
    static #c;
    static {
        const v25 = v20.isConcatSpreadable;
        v1[v25] = v2;
        v4[0] = this;
        try { v25.setMonth(this, v25, v20, v3, v1); } catch (e) {}
    }
    static set d(a29) {
        for (const v30 of v4) {
        }
        try {
            v0.#c;
        } catch(e33) {
        }
    }
}
new C22();
new C22();
new C22();
const o51 = {
    get g() {
        return this;
    },
    set g(a50) {
    },
};
