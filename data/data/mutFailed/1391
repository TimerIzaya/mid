let v0 = 4096;
let v2 = new Float64Array(v0);
53 * 53;
const v6 = new Uint8Array(53);
3865 & 3865;
function f10(a11) {
    const v16 = v2++;
    v16 >>> v16;
    --a11;
    let v19 = ++v0;
    v19++;
    Math.sinh(v19);
    Math.acosh(v2);
    return a11;
}
Int16Array[Symbol.toPrimitive] = f10;
let v25;
try { v25 = new Int16Array(Int16Array, v6, Float64Array); } catch (e) {}
const o26 = {
};
try {
    o26.b = Float64Array;
} catch(e27) {
}
try {
    const o28 = {
    };
    o28.b = o28;
    o28.b = Float64Array;
    o28.h = Int16Array;
} catch(e29) {
}
try {
    const o30 = {
    };
    o30.b = Float64Array;
    o30.h = Int16Array;
    o30.d = v25;
} catch(e31) {
}
try {
    const o32 = {
    };
    o32.b = Float64Array;
    o32.h = Int16Array;
    o32.d = Float64Array;
} catch(e33) {
}
new Int16Array(3865);
function f37() {
    return f10;
}
Object.defineProperty(Int16Array, "toString", { writable: true, configurable: true, get: f37 });
new Int16Array(69);
new Float32Array(15);
-0;
new Uint16Array(0);
const v48 = ("vZa2U")[1];
("vZa2U").normalize("NFKC");
if (Int16Array <= "vZa2U") {
    new Float32Array(v48, 3865, 53);
} else {
    try {
        const o52 = {
        };
        new Float32Array(o52, -63590, 268435441);
    } catch(e56) {
    }
}
