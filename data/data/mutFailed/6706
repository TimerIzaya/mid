function f0() {
}
const v2 = new Int8Array();
function f3(a4) {
    const o11 = {
        toString(a6, a7) {
            [-527.7412779372232,2.220446049250313e-16,0.8253984899510982,-784.568450567976,-9.124710295735705,-5.587235133927377,-Infinity];
            [-2.302579221611362e+307,0.7153521896996089,-1.6460095699091425e+308,3.4146804293356965,-1.0];
            return [-8.907842018168687,0.1395728035871724,-4.0,-2.220446049250313e-16,1000000000.0,-62915.04112818686];
        },
        __proto__: a4,
        "a": a4,
        "g": f0,
        ...v2,
        "f": Int8Array,
        "e": Int8Array,
        "h": a4,
        [a4]: a4,
        "e": Int8Array,
    };
    return o11;
}
const v12 = f3(Int8Array);
const v13 = f3(f3);
const v14 = f3(v12);
function f15(a16, a17, a18) {
    const o27 = {
        "e": Int8Array,
        o(a20, a21) {
            new Set();
            return this;
        },
        __proto__: v12,
    };
    return o27;
}
const v28 = f15(f15, v14, v13, v13, v12, f3);
const v30 = v2.toSorted(Int8Array, v2.__proto__, v12, v14, f0, f3);
let {"byteLength":v31,"byteOffset":v32,...v33} = v30;
const v35 = Symbol.species;
v14[v35] = v30;
try {
    f3(Int8Array);
} catch(e37) {
}
f15(v2, v14, v14, v12, v28, v28);
const v39 = f15(v28, v12, v14);
function f40(a41, a42) {
    function f44(a45) {
        return a41 ^ a42;
    }
    this.onmessage = f44;
    return this;
}
const o49 = {
    "type": "function",
};
new Worker(f40, o49);
new BigInt64Array(2147483649);
try { v13.toString(f15, Worker); } catch (e) {}
f0();
f3 + f0;
v35[f0] = v39;
const o57 = {
};
try {
    o57.d = v35;
} catch(e58) {
}
try {
    const o59 = {
    };
    o59.d = v35;
    o59.e = Worker;
} catch(e60) {
}
try {
    const o61 = {
    };
    o61.d = v35;
    o61.e = Worker;
    o61.h = BigInt64Array;
} catch(e62) {
}
try {
    const o63 = {
    };
    o63.d = v35;
    o63.e = Worker;
    o63.h = v2;
} catch(e64) {
}
