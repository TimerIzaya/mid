function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 65537;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
class C7 extends F0 {
    #toString(a9) {
        super.e;
        const o11 = {
        };
        new Proxy(this, o11);
        return a9;
    }
    static #e = F0;
    p(a15, a16) {
        let v17 = new F0();
        function f18() {
            return v5;
        }
        v17 = a16;
        return F0;
    }
}
const v19 = new C7();
const v20 = new C7();
const v21 = new C7();
v21.d = v21;
function F22(a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this?.__lookupSetter__;
    try { new v27(v20); } catch (e) {}
    a26.e;
    try {
        this.b = C7;
    } catch(e30) {
    }
}
try { F22.toString(); } catch (e) {}
const v32 = new F22(v6, v6, v6);
const v33 = new F22(v5, v32, v19);
const v34 = new F22(v4, v20, v21);
v34.length;
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = a40?.constructor;
    try { new v42(v5, a40, v5); } catch (e) {}
    const v44 = a41?.constructor;
    try { new v44(); } catch (e) {}
    try {
        this.h = v33;
    } catch(e46) {
    }
    try {
        this.b = v5;
    } catch(e47) {
    }
}
const v48 = new F36(C7, v34, v34, v4);
v48.length = v48;
const v49 = new F36(F0, v34, v33, v19);
v49.e = v49;
const v50 = new F36(v49, v5, v49, v19);
v50.b = v50;
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const v53 = new Uint32Array();
new Uint8Array(128);
const v58 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
v58[16] = 2.220446049250313e-16;
delete v58[2.0];
const v63 = new Uint8Array(5);
/a\b!+/vdiy;
/(a\1)/gvdimy;
const v69 = /^xxx$/gvi;
const v70 = v69?.constructor;
try { new v70(v69, v69); } catch (e) {}
v69 & -10809n;
let v75 = -21847n;
v75 % v75;
const v79 = new Int8Array(1487);
const v80 = v79?.constructor;
try { new v80(v50, v53, v79); } catch (e) {}
new Int32Array(2943);
-1053939857 / -1053939857;
new BigUint64Array(194);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F95() {
    if (!new.target) { throw 'must be called with new'; }
    function f97(a98) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 4, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f97 });
    try {
        v75++;
        let v105 = -1e-15;
        const v107 = Math.atan2(v105++, -175950080);
        v107 ^ v107;
        this.b = 1073741825;
    } catch(e109) {
    }
}
let v110 = new F95();
let v111 = new v48();
v111.a = -10809n;
({"a":v111,"b":v111,...v110} = v111);
try { ("minor").italics(); } catch (e) {}
const o116 = {
    "execution": "minor",
    "execution": "minor",
    "execution": "async",
    "type": "minor",
};
o116.e = o116;
const v117 = gc(o116);
try { v117.then(v63, Uint32Array); } catch (e) {}
const v119 = new F95();
v119.b = v119;
Uint8ClampedArray.name = Uint8ClampedArray;
const v122 = new Uint8ClampedArray();
try { new BigUint64Array(v122, v122, 10000); } catch (e) {}
function f125() {
    Int8Array();
    class C129 {
        #valueOf(a131, a132, a133, a134) {
        }
    }
    return Uint32Array;
}
%OptimizeFunctionOnNextCall(128);
