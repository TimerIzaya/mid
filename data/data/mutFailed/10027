[];
const v3 = new Uint8ClampedArray(2943);
let v4 = 0;
v4--;
const v7 = new Uint8ClampedArray(v4);
9 >>> 9;
const v11 = new Int16Array(9);
const v12 = v11?.with;
try { new v12(Uint8ClampedArray, Uint8ClampedArray); } catch (e) {}
function f17() {
    return 1;
}
[2.220446049250313e-16,857.4082312234195,-2.0,-3.0,2.220446049250313e-16,3.0,1.5624775458404063e+308,-1000000000.0,0.0,-432469.5776188263];
const v19 = [-702962.4265084276,NaN,1e-15,3.6977856511544474,-1.7976931348623157e+308,1000000000000.0,-2.220446049250313e-16,4.0];
try { v19.lastIndexOf(v11); } catch (e) {}
const v21 = [1000000000.0,-9.497683102282087e+307];
const v23 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v21); } catch (e) {}
    a27 & a27;
    a29 >>> a29;
    try { a27.call(); } catch (e) {}
    for (let v34 = 0; v34 < 50; v34++) {
    }
}
try { new F24(F24, 2943, 2943, 2943); } catch (e) {}
const v36 = new F24(7.090076723213673e+307, 7.090076723213673e+307, F24, 7.090076723213673e+307);
const v37 = v36?.constructor;
try { new v37(1, v3, v36, v7); } catch (e) {}
const t30 = v36.constructor;
new t30(v23, v36);
new F24();
