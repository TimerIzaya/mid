const v1 = /(x)(x)(x)\1/uis;
function f2(a3, a4, a5, a6) {
    const o13 = {
        4294967295: a3,
        2: a5,
        __proto__: a6,
        [v1](a8, a9, a10, a11) {
            super.test();
        },
    };
    return a3;
}
f2();
const v16 = new Int8Array(5);
new Uint8Array(10);
class C21 {
    static valueOf(a23) {
        a23[5];
    }
}
new Int8Array(12);
const v27 = [1000000000.0,-5.0,625.7403399479574,-942.0485124766018];
const v28 = [-1e-15,3.0,-490340.0450974547,-4.681312917566405,5.0,-8.681947153988407];
let v29 = [-1e-15,0.9650050566904838,-729117.8220138293];
class C30 extends Uint8Array {
    n(a32, a33, a34, a35) {
        ({"f":a33,"length":v29,} = a35);
        a34?.[64];
        10 > Int8Array;
        try { v16.copyWithin(a33, v29, v29); } catch (e) {}
        const v40 = [];
        Reflect.apply(a35.reverse, v27, v40);
        return v40;
    }
    static 257 = v29;
    [12] = v28;
}
new C30();
new C30();
new C30();
Math.cbrt(11 - 11);
