function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this ^ a5;
    try {
        this.h = a5;
    } catch(e7) {
    }
    try {
        this.b = 16n;
    } catch(e8) {
    }
    try {
        this.d = 879211887n;
    } catch(e9) {
    }
}
F3.h = F3;
const v10 = new F3(-561469544n);
const v11 = new F3(879211887n);
const v12 = new F3(-561469544n);
function f13(a14, a15, a16, a17) {
    const v18 = a15.h;
    a17.e = a17;
    const o19 = {
        __proto__: 879211887n,
        "h": 879211887n,
        257: a16,
        [v10]: a15,
        ...a14,
        [16n]: v11,
        6: a16,
        7: v10,
        172: v10,
        "f": a15,
        "a": v18,
        "c": a14,
    };
    return o19;
}
f13(v11, v12, v11, v12);
f13(v12, v12, v12, v11);
f13(v10, v11, v11, 879211887n);
function f26() {
}
const v27 = [601759695];
const v28 = [1073741824,1073741823,1376142744,1073741825];
522675525n / 522675525n;
function f31(a32, a33, a34, a35) {
    a32--;
    a33 * a33;
    function f39() {
        return f39;
    }
    const v40 = f26();
    const v42 = new Int8Array();
    const v43 = v42?.set;
    let v44;
    try { v44 = new v43(f39, a34, arguments); } catch (e) {}
    const v45 = v42.buffer;
    2147483648 >>> 2147483648;
    const v49 = v45.slice(a32)?.constructor;
    let v50;
    try { v50 = new v49(v40); } catch (e) {}
    %OptimizeFunctionOnNextCall(v50);
    try { v28["find"](..."find", a35, ...v27, ...v28, ...-561469544n); } catch (e) {}
    const v53 = v44 < a34;
    v53 && v53;
    return arguments;
}
for (let v55 = 0; v55 < 10; v55++) {
    f31(-561469544n, v55, f26, 522675525n);
}
%OptimizeFunctionOnNextCall(f31);
const v57 = f31();
v57.length = v57;
