class C3 {
    get b() {
        this in this;
        try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
        return this;
    }
    static #n(a8, a9) {
        function f10(a11) {
            return a9;
        }
        class C12 extends f10 {
            ["toStringTag"] = a9;
            static #e;
            #h = f10;
        }
        return "toStringTag";
    }
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
function f16(a17, a18, a19) {
    const o46 = {
        m(a21, a22) {
            ("boolean").split("toString");
            new BigInt64Array();
            function f29() {
                return f29;
            }
            const v30 = f29.arguments;
            function f31() {
                for (let v32 = 0; v32 < 5; v32++) {
                    Array(36862, v30, v32 & v32);
                }
                return f29;
            }
            f31();
            new Int32Array(1979);
            new BigInt64Array(3063);
            new Float32Array(127);
            return a19;
        },
        ["JbyK"]: a18,
        "b": v15,
        "h": -974509.5958479184,
    };
    return o46;
}
const v47 = f16(v15, v13, v14);
const v48 = f16(v47, v15, v15);
f16(v47, v48, v48);
const v50 = [-9223372036854775807,-32706,257,9,-23705,9007199254740990,-16801,-57620,-207650968,1073741823];
[-9223372036854775808];
[128,6,1024,4096,25098,-142731813,2147483647,-7];
class C53 extends f16 {
    #m(a55, a56, a57, a58) {
        try {
            C3.#m();
        } catch(e60) {
        }
        return a58;
    }
    [v13] = "toStringTag";
    a = v50;
    [v14] = v47;
    g;
    f;
    d = v47;
    10;
    constructor(a62, a63) {
    }
    static #n(a65) {
        function f66(a67) {
            return a67;
        }
        class C68 extends f66 {
        }
    }
    38 = "JbyK";
}
new C53();
new C53();
new C53();
function f72() {
}
new Int8Array();
new Float32Array(1000);
new Uint8Array(58);
function F82() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v86 = Array(19793);
        for (const v87 of v86) {
        }
        const v88 = [v86,v86,v86];
        new BigUint64Array();
        const v92 = [];
        for (let v93 = 0; v93 < 50; v93++) {
        }
        v92[65536] %= 256;
        [v88,v88,v88];
        [] >= Uint16Array;
    } catch(e98) {
    }
}
const v101 = new Uint8Array(6);
const v103 = ["function",v101];
const o104 = {
    "arguments": v103,
    "type": "function",
};
new F82();
new F82();
