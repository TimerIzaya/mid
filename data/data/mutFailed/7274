const v0 = [];
try { Map(); } catch (e) {}
const v4 = new Map();
function f5(a6, a7, a8, a9) {
    a8.arguments = a8;
    a6[3];
    a8.caller = a8;
    const o17 = {
        n(a12, a13, a14, a15) {
            for (let v16 = 0; v16 < 10; v16++) {
            }
        },
        16: a6,
        ...v4,
    };
    return o17;
}
new Map();
const v21 = new Uint8Array(1732);
new Uint8ClampedArray(255);
new Uint8Array(256);
new Float32Array(7);
new Uint16Array(128);
v21.__proto__;
function f36(a37, a38, a39) {
    return a39;
}
v0.reduce(f36);
new BigInt64Array(0);
[-1000000000.0,0.8968097643519101,-8.720684288580602e+307,-1.0,0.32807980030170847,117.99447186142652,1000.0];
new Int32Array(64);
class C48 {
}
class C49 extends C48 {
}
function f52(a53, a54, a55, a56) {
    3 | a54;
    const v58 = a53 / a53;
    const v59 = a54 < a53;
    let v60 = a55 >>> a55;
    v60++;
    const o65 = {
        n(a63, a64) {
            return v59;
        },
    };
    return v58;
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
function f68(a69, a70, a71, a72) {
    function f73() {
        Symbol.toPrimitive;
        const o81 = {
            "e": -268435456,
            valueOf(a79, a80) {
            },
            6: -268435456,
        };
    }
    f73();
    const v84 = new Int8Array();
    v84.buffer;
    %OptimizeFunctionOnNextCall(f73);
}
for (let v87 = 0; v87 < 10; v87++) {
    f68();
    function F89() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = 4;
        } catch(e92) {
        }
        try {
            this.f = 4;
        } catch(e93) {
        }
        try {
            this.g = 4;
        } catch(e94) {
        }
    }
    const v95 = new F89();
    class C96 {
        set a(a98) {
            class C99 {
                static 128 = v95;
                #b;
            }
            new C99();
            new C99();
            new C99();
        }
        static o(a104) {
            a104 % this;
            return super.d;
        }
    }
    new C96();
}
f68();
