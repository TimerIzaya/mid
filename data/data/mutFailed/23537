let v3 = -10129;
v3++;
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    const v16 = this?.constructor;
    try { new v16(-6, a15, -6, 65537); } catch (e) {}
    a12++;
    try {
        this.c = a14;
    } catch(e19) {
    }
    try {
        this.d = 5n;
    } catch(e20) {
    }
}
F10.arguments = F10;
new F10(5n, -28983n, -28983n, "bigint");
new F10(1073741824n, 5n, 1073741824n, "g");
const v23 = new F10(1073741824n, 1073741824n, -28983n, "Rt0n");
v23.b = v23;
function f24(a25, a26, a27, a28) {
    const v29 = a25.length;
    ~a28;
    arguments[1] = arguments;
    a26.toString(a25, f24, f24, a25);
    function f33() {
        let v34 = -268435456;
        v34--;
        const v36 = v34 + v34;
        const v37 = -v36;
        const o38 = {
            [v36]: v37,
        };
        o38.e = o38;
        return v29;
    }
    a27();
    %OptimizeFunctionOnNextCall(f33);
    return v29;
}
for (let v40 = 0; v40 < 5; v40++) {
    65537 + v40;
    f24(f24, v40, v40, v40);
}
