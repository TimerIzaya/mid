function f0() {
}
new Uint32Array(3866);
const v6 = new BigInt64Array(205);
new Uint8Array(64);
new Uint8Array(-1157953588);
new Int16Array(3);
try { Uint16Array(205, BigInt64Array, 256); } catch (e) {}
new Uint16Array(256);
const v20 = v6[205];
0 >> 0;
try {
    v20.toString = v20;
} catch(e23) {
    e23.message = e23;
}
255 - 255;
const v27 = Float64Array.d;
const v28 = new Float64Array(255);
function F29(a31, a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    a32 >> a32;
    const v36 = a34 | a34;
    try {
        v28.b = a32;
        a34 = Uint8Array;
        v27?.g;
        const v41 = !v36;
        -9223372036854775808 && v36;
        Math.hypot(-9223372036854775808 & -9223372036854775808);
        Math.abs(v41);
        !-9223372036854775808;
    } catch(e47) {
    }
    try {
        this.h = a31;
    } catch(e48) {
    }
}
const v49 = F29?.constructor;
try { new v49(v28); } catch (e) {}
const v51 = new F29(255, 205, 255, 205);
const v52 = new F29(255, 256, 255, 256);
new F29(255, 205, 256, 255);
const v55 = ([-Infinity,-5.577012134541006])?.filter;
let v56;
try { v56 = new v55(Uint16Array); } catch (e) {}
const v57 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
[-2.220446049250313e-16,-171953.22769972356,2.220446049250313e-16,Infinity,-3.0,-4.368087235127776];
const v59 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v60 = [Infinity];
const v62 = ([2.2250738585072014e-308,1.949684848262672,4.0]).push(v59);
const v64 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0]).toStringTag;
try { v60.every(v64, v52); } catch (e) {}
v51.h >>>= v62;
v57.length;
new Float64Array(v56, 255);
f0();
%PrepareFunctionForOptimization(f0);
f0();
f0();
%OptimizeFunctionOnNextCall(f0);
f0();
new Float32Array(Float32Array);
new Uint16Array(127);
function F85() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -536870912;
        const v90 = -(-7);
        v90 ** v90;
    } catch(e92) {
    }
}
function F93(a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    const v97 = this.constructor;
    v97.length = v97;
    try { new v97(F85, a95, F85, v97); } catch (e) {}
    new F85();
}
new F93(F85, F93);
new Int32Array(3060);
[-8617,3];
const o106 = {
    "h": 4.435972324405191e+307,
};
