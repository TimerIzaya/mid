let v0 = 16;
new Uint32Array(v0);
let v4 = Float64Array;
try {
    const o5 = {
    };
    new Uint32Array(o5, 653678704, 653678704);
} catch(e8) {
}
function f9() {
    const o10 = {
    };
    return o10;
}
const v11 = f9();
class C14 {
}
const v15 = new C14();
function f16(a17, a18) {
    const v19 = a17.BYTES_PER_ELEMENT;
    class C20 {
    }
    let v21 = C20.length;
    try { ("0x2I").sup(); } catch (e) {}
    class C25 {
    }
    const v26 = C25?.call;
    ({"b":v4,"f":C20,"length":v21,...v0} = "0x2I");
    "0x2I" >> null;
    Object.defineProperty(v11, "0x2I", { enumerable: true, get: f9 });
    Object.defineProperty(C25, "g", { configurable: true, get: f9, set: f9 });
    var c = C25;
    try { new v26(null); } catch (e) {}
    class C29 extends C25 {
    }
    try { new C29(NaN, v15, NaN, v11); } catch (e) {}
    const v31 = a18?.propertyIsEnumerable;
    try { v31(); } catch (e) {}
    class C33 {
    }
    let v34;
    try { v34 = C33.call(C25); } catch (e) {}
    const v35 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    class C36 {
        #d = v34;
        128 = null;
        f;
        static 2;
        129 = v19;
    }
    try { C36.apply(1.7976931348623157e+308, f16); } catch (e) {}
    Symbol.b = Symbol;
    C36[Symbol.replace] = v35;
    const v40 = [];
    let v41;
    try { v41 = v40.with(v40); } catch (e) {}
    const v43 = new Float64Array(v40, v41);
    const v44 = new Float64Array(v43, a17, v41);
    const v45 = v44.values();
    try { v45.next(); } catch (e) {}
    return v44;
}
%PrepareFunctionForOptimization(f16);
f16(Uint16Array, v15);
%OptimizeFunctionOnNextCall(f16);
f16(v15);
new BigInt64Array();
const v55 = new BigInt64Array(5);
function f56() {
    return v55;
}
try { v55.map(f56); } catch (e) {}
new BigInt64Array(1073741824);
new v4(10);
new Float32Array(1);
new Map();
function F65(a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    const v69 = this.constructor;
    const v70 = /[a-zA-Z0-9]/gvisy;
    const v71 = /abc?/gvmy;
    v71[-2] ^= v70;
    const v73 = new Int16Array();
    const v74 = v73.lastIndexOf();
    let v75 = v74 - v74;
    v75--;
    try { new v69(F65, this, F65, v71); } catch (e) {}
}
const v78 = new F65(F65, F65);
const t89 = v78.constructor;
new t89();
