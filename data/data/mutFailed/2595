const v2 = new Array(4009);
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.__lookupSetter__;
    try { new v6(this, F3, F3, v2); } catch (e) {}
    try {
        this.h = a5;
    } catch(e8) {
    }
    try {
        this.f = a5;
    } catch(e9) {
    }
    try {
        F3 = v6;
        try { a5(a5, 0.5273876649795975); } catch (e) {}
        this.h = a5;
    } catch(e14) {
    }
}
try { F3.toString(); } catch (e) {}
const v16 = new F3(4009);
v16.e = v16;
const v17 = new F3(v16);
const v18 = new F3(4009, v17, v2, v16);
const v21 = new Object(10);
const v24 = new Int8Array(6);
let v27;
try { v27 = new Float32Array(Float32Array, v18, v21); } catch (e) {}
const v28 = new Float32Array(6);
try { v28.findIndex(4009); } catch (e) {}
const v31 = v27 in v28;
try {
    Object.__proto__ = v2;
} catch(e32) {
}
const v33 = new Float32Array();
10 / v21;
v24.buffer;
4009 ** v31;
const o39 = {
    "maxByteLength": 800,
};
const v41 = new SharedArrayBuffer(800, o39);
new DataView(v41);
try { v33.lastIndexOf(Array); } catch (e) {}
const v45 = [v33];
new Float32Array(v45, v45);
