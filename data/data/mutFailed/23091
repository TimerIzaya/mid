const v2 = new BigInt64Array(129);
delete v2[Uint32Array];
const v7 = [3,v2];
const v8 = v2.find;
Reflect.apply(v8, v2, v7);
new Uint32Array(3);
const v13 = new Int16Array(1294);
class C14 {
    static [Int16Array];
    constructor(a16, a17, a18) {
        try {
            new Uint32Array(65536);
        } catch(e21) {
        }
    }
    static #n(a23, a24) {
        v13[9] = v13;
        const v26 = new WeakSet();
        v26[15];
        return a24;
    }
}
const v28 = new C14(129, C14, 1294);
const v29 = new C14(1294, v28, 3);
const v30 = new C14(3, v29, 129);
const v34 = [0.0,929.5949523232657,-1e-15,726.5380916090323,-4.0,-1e-15,2.2250738585072014e-308,-523.120508415708,421.61672852170136,0.5459629191822911];
try {
    v8.b = v13;
} catch(e35) {
}
for (let v36 = 0; v36 < 32; v36++) {
    v2["p" + v36] = v36;
}
function f39(a40, a41, a42) {
    const o46 = {
        [a42]: a41,
        "g": 1024,
        set a(a45) {
        },
        "a": -2.220446049250313e-16,
        "g": a40,
    };
    return o46;
}
const v48 = f39(0.06014031100068884, f39(6.873822427940361, f39, f39), 6.873822427940361);
for (let v49 = 0; v49 < 100; v49++) {
    f39(f39, v48, v7);
}
Int16Array + v7;
v30[Reflect] = 3;
f39(v48, v34, 6.873822427940361);
