const v0 = /A/gvimsy;
const v1 = /(M(?<!a))/gvimy;
const v2 = /(x)(x)(x)\2/gd;
function f3(a4, a5) {
    a4.dotAll = a4;
    const o18 = {
        [a4]: a5,
        [v0](a7, a8) {
            let v9 = 0;
            do {
                new Uint32Array();
                new Uint32Array([1524942359,268435439,8,1,256,-11]);
                a7 = a4;
                super[a4] = v1;
                v9++;
            } while (v9 < 3)
            return a5;
        },
    };
    return o18;
}
const v19 = f3(v0, v0);
v19.e = v19;
const v20 = f3(v1, v1);
v20.h = v20;
f3(v2, v2);
Uint32Array.e = Uint32Array;
const v26 = new Uint32Array(14);
v26.reverse();
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v30 = new Float32Array(7);
const v33 = v30.includes(1234, 1000);
!v33;
new Uint8Array(256);
try { BigInt64Array.apply(v33, BigInt64Array); } catch (e) {}
const v39 = new BigInt64Array(4096);
v39[743] = v39;
const v42 = new Uint8Array(2012);
const v43 = v42?.findLastIndex;
try { new v43(Uint8Array); } catch (e) {}
function f47(a48, a49, a50) {
    return a50;
}
Worker.name;
const v54 = [f47,4294967297,,];
try { v54.lastIndexOf(BigInt64Array); } catch (e) {}
const o56 = {
    "arguments": v54,
    "type": "function",
};
new Worker(f47, o56);
