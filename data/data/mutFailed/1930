const v0 = [];
let v2 = 1024;
512 != 512;
let v7 = 512 / 512;
v7--;
const v10 = new Uint8Array(v7);
let v11;
try { v11 = v10.filter(-89704045); } catch (e) {}
let v12 = 257;
const v14 = new v11(v12);
try { v0.entries(); } catch (e) {}
let v16 = 10;
v2--;
v16++;
try { new Int16Array(-2, -2, -2); } catch (e) {}
const v21 = new Int16Array(v16);
const v22 = v21?.constructor;
try { new Int8Array(v0, v2, undefined); } catch (e) {}
let v24;
try { v24 = v21.reverse(); } catch (e) {}
Uint32Array.BYTES_PER_ELEMENT;
v12--;
const v28 = new Uint32Array(Uint32Array);
try { v28.entries(); } catch (e) {}
const v30 = [1524942359,268435439,8,1,256,-11];
v30[1] = v30;
const v31 = new Uint32Array(v30);
v31[1] = v11;
const o32 = {
};
o32.g = v30;
function f33(a34, a35) {
    a35 >> a34;
    try { a34.filter(v31); } catch (e) {}
    try { a35.padStart(a34); } catch (e) {}
    try { new BigInt64Array(v0, v0, v12); } catch (e) {}
    return BigInt64Array;
}
const v41 = v24.prototype;
try { v14.constructor(Int16Array, v11); } catch (e) {}
try { v41.constructor(v7, v22); } catch (e) {}
o32.set = f33;
Proxy.name;
const v46 = new Proxy(v28, o32);
v46[2] = v46;
v28[2] = v46;
v46[2] = v46;
