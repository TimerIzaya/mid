new Uint8ClampedArray(8);
new Uint32Array(1160);
new Float32Array(132);
new Int16Array(7);
new Uint32Array(503);
new BigUint64Array(3007);
const v21 = [];
v21[1] = Uint32Array;
const v22 = [v21,1160,503];
class C24 extends Map {
}
const v25 = [1073741824,1073741823,1376142744,1073741825];
try {
    v25.forEach("B");
} catch(e27) {
}
const v28 = new C24();
const v29 = new C24(v22);
function f30(a31, a32) {
    const v33 = /(ab|cde)\118\P{sc=Greek}+/gdims;
    v33.exec(v33);
    return 503;
}
v29.toString = f30;
const v35 = new C24(v29);
const v37 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v39 = new Uint32Array(v29, v21, Uint8ClampedArray, BigUint64Array, 7);
v39.constructor = f30;
let v40 = -4294967297n;
v40--;
const v42 = [601759695];
Object.defineProperty(v42, "constructor", { enumerable: true, value: f30 });
const v43 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    a45[2] = a48;
    const v49 = a45.constructor;
    v42["pop"]();
    try { v49(v49); } catch (e) {}
    try {
    } catch(e55) {
        function F56(a58, a59, a60, a61) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F56(F56, 8, 127);
        const v65 = new Int8Array();
        for (const v66 of "some") {
            v65[1];
            let [,,,...v68] = v65;
            const o69 = {
            };
            const o70 = {
            };
        }
    }
    try { v49(); } catch (e) {}
    const v73 = arguments.length;
    Object.defineProperty(v28, "e", { configurable: true, enumerable: true, value: f44 });
    v29["toString"](a47, ...v35, BigUint64Array, ..."toString", a46, v73);
    function f76() {
        let v79 = 1922 + 1922;
        const v80 = 1922 % 1922;
        const v81 = v80 == v80;
        const v82 = --v79;
        function f83() {
        }
        function f84(a85, a86, a87, a88) {
            function f89() {
                return a85;
            }
            const v90 = f83();
            const v91 = v90?.e;
            try { v91(f89, v91); } catch (e) {}
            v91 * v81;
            v42[3] ^= v82;
            for (let v94 = 0; v94 < 5; v94++) {
            }
            [v90];
            return a86;
        }
        for (let v96 = 0; v96 < 10; v96++) {
            f84(f84, v96, 1922, v96);
        }
        const v98 = ("Vre").charAt();
        try { v98.lastIndexOf(); } catch (e) {}
        ("Vre").codePointAt();
        v37.prototype;
        class C102 extends f84 {
            static 287938057 = v98;
            static [a48] = f83;
        }
        new C102();
        new C102();
        new C102();
        try {
            v43.forEach();
        } catch(e107) {
        }
        const o120 = {
            "c": v40,
            "EPSILON": v42,
            valueOf(a109, a110) {
                return a45;
            },
            1073741824: v39,
            [v40](a112, a113, a114, a115) {
                eval();
            },
            o(a119) {
                return v40;
            },
            256: a48,
        };
        return a46;
    }
    f76();
    const v123 = Array();
    try { v123.findLast(f44); } catch (e) {}
    let v126;
    try { v126 = Int8Array.of(); } catch (e) {}
    try { v126.join(a46); } catch (e) {}
    for (let v128 = 0; v128 < 5; v128++) {
    }
    try { v43["find"](..."find", a48, ...v42, ...v43); } catch (e) {}
    return a48;
}
for (let v131 = 0; v131 < 10; v131++) {
    f44(v39);
}
%OptimizeFunctionOnNextCall(f44);
f44(v42, 503, 503, 7);
