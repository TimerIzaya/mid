128 < 64;
function f7(a8, a9, a10, a11) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
    arguments[4] = arguments;
    return f7;
}
new Int32Array(2098);
new Uint8Array(3);
function f22(a23, a24, a25, a26) {
    class C28 {
        static ["-2"];
    }
    return "-2";
}
for (let v29 = 0; v29 < 10; v29++) {
    f22(v29, v29, f22, v29);
}
const v31 = new Float32Array();
function f32(a33, a34, a35, a36) {
    a33[1];
    a34--;
    const t19 = 228;
    t19[0] = a33;
    const o41 = {
        "type": "MIN_VALUE",
        ...v31,
        1073741825: "MIN_VALUE",
    };
    const o42 = {
        __proto__: o41,
    };
    const v43 = arguments.__lookupGetter__;
    try { v43.constructor(v31, a35, 228); } catch (e) {}
    return v43;
}
f32(64);
function f46(a47, a48, a49) {
    let v50 = [1073741824,1073741823,1376142744,1073741825];
    function f51(a52, a53, a54, a55) {
        function f56() {
            function F57(a59) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    function f60(a61, a62, a63) {
                        return f60;
                    }
                    const o66 = {
                        "type": "function",
                    };
                    Worker(f60, o66);
                } catch(e68) {
                }
            }
            return a55;
        }
        class C69 extends a55 {
        }
        for (let v70 = 0; v70 < 5; v70++) {
            try {
                v50 &= C69;
            } catch(e71) {
            }
        }
        return Float32Array;
    }
    for (let v72 = 0; v72 < 5; v72++) {
        f51(f46, v50, v72, v50);
    }
    %OptimizeFunctionOnNextCall(f51);
    return a48;
}
f46(Float32Array, v31, v31);
new BigUint64Array(228);
let v77 = 144;
v77++;
class C79 {
    constructor(a81, a82) {
        this.propertyIsEnumerable(C79);
    }
}
function f84(a85) {
    return a85;
}
C79[Symbol.toPrimitive] = f84;
new C79();
