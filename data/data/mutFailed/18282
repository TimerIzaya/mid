new Array(9);
let v5 = 5.2893677695627765;
v5 - v5;
new Array(9);
const o11 = {
    ["536870887"]: -1000000000000.0,
    "b": -757.5759240774136,
    "a": -1000000000000.0,
    [-757.5759240774136]: "536870887",
    [-1000000000000.0]: -757.5759240774136,
    "d": "536870887",
    [-2]: -1000000000000.0,
};
const v12 = new Array(9);
try { v12.values(); } catch (e) {}
const v17 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f18(a19, a20, a21, a22) {
    const v23 = /(?:a*)+q(?<a>.)/guds;
    function f24(a25) {
        const v26 = v17.constructor;
        try { v26(); } catch (e) {}
        a25.constructor;
        15312 | [Infinity,5.072687501529128e+307,0.4093098171074484,4.0,-4.442441003635313e+306,843998.4933901483,-714.8973177887364];
    }
    for (let [i37, i38] = (() => {
            function f33(a34, a35) {
                return f18;
            }
            return [0, 10];
        })();
        i37 < i38;
        i38--) {
        for (let v45 = 0; v45 < 25; v45++) {
            f24(v23);
        }
    }
    function f47() {
        let v48 = Float64Array;
        v48 = a20;
        return a20;
    }
    return f47;
}
-2;
-1000000.0 >> -1000000.0;
+-1000000.0;
const v53 = -14 ^ Array;
v53 * v53;
const v55 = +-14;
~v55;
Math.clz32(Array);
try { ("wD").indexOf(2); } catch (e) {}
async function* f63(a64, a65) {
    return -9223372036854775807;
}
function f66() {
    for (let [i70, i71] = (() => {
            [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
            return [0, 10];
        })();
        i70 < i70;
        ) {
    }
    return f66;
}
f66();
%OptimizeFunctionOnNextCall(f66);
new BigInt64Array(1183);
const v83 = new Uint32Array(257);
function F85(a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    const v89 = this.constructor;
    try { new v89(); } catch (e) {}
    try { this.constructor(); } catch (e) {}
}
new F85();
243 !== 243;
v5 = 0.9729759720302975;
for (let v95 = 0; v95 < 5; v95++) {
    Math.atanh(v95);
}
const v99 = [65537,268435441,63298,-5,1235122603];
function F100(a102, a103, a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    const v106 = this.constructor;
    try { new v106(1024, 1024, v99, this); } catch (e) {}
    a103.caller;
    a105[1];
    this.c = a104;
    const v111 = [Reflect];
    const o112 = {
        __proto__: Reflect,
        "e": v111,
    };
    this.f = a103;
}
("bigint")["wD"];
try {
    new Float32Array(1183, -2540, -2540);
} catch(e116) {
}
const v117 = new Float32Array(243);
v55 in v83;
v117.byteOffset <<= 243;
try {
    const t105 = "wD";
    t105.__proto__ = Date;
} catch(e120) {
}
function F121(a123, a124) {
    if (!new.target) { throw 'must be called with new'; }
}
const v125 = new F121();
v125 instanceof -24894;
const v128 = new Date();
f63 + f63;
Array.from(Array);
const v135 = [601759695];
function f137(a138, a139, a140, a141) {
    const v143 = arguments.toString();
    function f144() {
        const t121 = "Vre";
        t121[2] = "Vre";
        const v146 = ("Vre")?.toLocaleUpperCase;
        v146.g = v146;
        try { new v146(); } catch (e) {}
        let v148;
        try { v148 = ("Vre").fixed(); } catch (e) {}
        try { v148.localeCompare(v143); } catch (e) {}
        let v151 = -268435456;
        v151--;
        -(v151 + v151);
        const o168 = {
            "c": -4294967297n,
            [522675525n](a156, a157) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v135,
            valueOf(a159, a160) {
            },
            "e": -4294967295,
            "e": v151,
            "maxByteLength": -4294967295,
            "arguments": v12,
            ...v135,
            "type": "Vre",
            ..."Vre",
            valueOf(a162, a163) {
                return a163;
            },
            ..."Vre",
            4: "Vre",
            "c": v151,
            "type": "Vre",
            toString(a165, a166, a167) {
                return a167;
            },
            6: v151,
        };
        try { o168.valueOf(o168, -128); } catch (e) {}
    }
    f144();
    %OptimizeFunctionOnNextCall(f144);
    return -4294967297n;
}
for (let v171 = 0; v171 < 5; v171++) {
    f137();
}
v128.setUTCMonth(2015);
