const o3 = {
};
o3.e = -1000.0;
function f4(a5, a6, a7, a8) {
    return f4.arguments;
}
f4(f4, f4, f4, f4);
class C11 {
    static c = 2.220446049250313e-16;
    10 = 321048.42903937167;
    p(a13, a14) {
        const v17 = a14 * -8;
        v17 >> -8;
        Math.atanh(a14);
        ([16,54285,440810918])["includes"](0.4878574089255555, 8.37300093017014);
        return v17;
    }
}
const v25 = new C11();
v25[10];
const v27 = new C11();
v27[10] = v27;
new C11();
function f31(a32, a33, a34, a35) {
    const v36 = /(?:a*)+q(?<a>.)/guds;
    function f37(a38, a39) {
        return 10000;
        return C11;
    }
    Object.defineProperty(v36, "constructor", { writable: true, value: f37 });
    function f41(a42) {
        a42.dotAll;
        a42.hasIndices = a42;
        const v44 = a42?.constructor;
        v44.$_;
        v44.lastParen;
        const o48 = {
            get d() {
            },
        };
        return v44;
    }
    for (let [i52, i53] = (() => {
            let v49 = 0;
            v49++;
            return [v49, 10];
        })();
        (() => {
            const v54 = i52 < i53;
            v54 || v54;
            return v54;
        })();
        i53--) {
        for (let v61 = 0; v61 < 25; v61++) {
            f41(v36);
        }
    }
    return f31;
}
for (let v63 = 0; v63 < 10; v63++) {
    f31();
}
const v65 = -Infinity;
v65 >>> v65;
function f67(a68, a69, a70, a71) {
    a69[Symbol.toPrimitive] = f31;
    a70.toString = f67;
    a71.valueOf = Symbol;
    a69.prototype;
    a70 & a70;
    function f77() {
        function f78(a79, a80, a81, a82) {
            let v83 = 10;
            for (; v83--;) {
            }
        }
        f78();
        return a71;
    }
    class C86 extends a68 {
    }
    const v89 = new Uint32Array(3);
    for (let v90 = 0; v90 < 5; v90++) {
        v89[v90] = v27;
    }
    f77.arguments = f77;
    const v92 = [a68,a68];
    function f93() {
        Symbol(a70);
        let v97;
        try { v97 = BigUint64Array.from("-2"); } catch (e) {}
        return v97;
    }
    v92[Symbol.toPrimitive] = f93;
    ("number").slice(v92);
    %OptimizeFunctionOnNextCall(f77);
    function F101() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v103 = new F101();
    function f104() {
        return f77;
    }
    Object.defineProperty(v103, "constructor", { writable: true, configurable: true, get: f104 });
    const v105 = v103?.constructor;
    try { new v105(); } catch (e) {}
    return arguments;
}
f67[Symbol.toPrimitive] = f31;
for (let v109 = 0; v109 < 10; v109++) {
    const v110 = f67(f67, f67, v109, v109);
    try { v110.toString(); } catch (e) {}
}
%OptimizeFunctionOnNextCall(f67);
f67(f67, f67, f67, f67);
