const v1 = new WeakSet();
const v3 = new Map();
class C4 {
    static 2147483649;
    static toString(a6, a7) {
        super.h = Map;
        function F8(a10, a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = this;
            } catch(e14) {
            }
            try {
                this.c = a11;
            } catch(e15) {
            }
        }
        const v16 = new F8(v3, WeakSet, v1, Map);
        const v17 = new F8(Map, F8, a7, this);
        new F8(Map, v16, v17, v17);
        return Map;
    }
}
new WeakSet();
new C4();
new C4();
const v28 = [-1727815353,-9007199254740991];
[4,13];
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v34 = new Int16Array(16);
try { v34.find(v34); } catch (e) {}
0.6822080711934364 / 0.6822080711934364;
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = a43?.constructor;
    const v46 = v45?.constructor;
    try { new v46(v45); } catch (e) {}
    try { new v45(0.29489550717955537, a43); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e50) {
    }
}
function f51(a52, a53) {
    new BigInt64Array(-536870912);
    return C4;
}
F41[Symbol.toPrimitive] = f51;
const v58 = F41?.constructor;
try { new v58(F41); } catch (e) {}
const v60 = new F41("string");
v60.f = v60;
let v62 = 127;
v62++;
const v64 = v62 != v62;
const v67 = new Int32Array(Int32Array);
v67.toString = Symbol;
const v68 = [];
function f69() {
    const o70 = {
    };
    try {
        o70.a = "536870889";
    } catch(e72) {
    }
    const o74 = {
        p() {
            return f69;
        },
        [v68]: v68,
        "a": v68,
    };
    const v75 = o74?.constructor;
    try { new v75(v64); } catch (e) {}
    return v68;
}
const v77 = f69();
f69();
const t77 = -2147483647;
const v79 = t77();
const v80 = (a81, a82) => {
    return v79 * a82;
};
0.6058227007604853 | 0.6058227007604853;
let v86 = -Infinity;
v86++;
new Float64Array(129);
let v91;
try { v91 = Symbol.entries(); } catch (e) {}
try { v91.next(); } catch (e) {}
255 - 255;
class C95 {
    static [v67] = 0.29489550717955537;
}
true || true;
const v98 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o100 = {
    valueOf() {
        return v91;
    },
};
function f101() {
    ([1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691]).pop;
    const v105 = v77.constructor;
    try { new v105(3n); } catch (e) {}
    ([Float32Array])["concat"]();
    return v64;
}
Object.defineProperty(o100, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f101 });
v98.length = o100;
class C113 {
}
const o114 = {
};
try { ("Xkz0W").split(v28, -536870912); } catch (e) {}
class C117 {
    set b(a119) {
    }
}
const v120 = new C117();
const v121 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v121(v120); } catch (e) {}
function f123(a124, a125) {
}
for (const v126 in v86) {
    function F127(a129, a130) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e131) {
} finally {
}
