let v4 = (-9459)[-2.220446049250313e-16];
const v6 = delete v4?.[4294967296];
try { v6(3, -9, v6, -9459, v4); } catch (e) {}
const v8 = v4 + v4;
function f9() {
    return -2.220446049250313e-16;
}
try {
    v4.length = 1;
} catch(e10) {
}
const v15 = new Array(64);
const v18 = new Array(16);
function f20(a21) {
    return true;
    return a21;
}
let o23 = {
    "call": Date,
    "construct": Array,
    "defineProperty": Date,
    "get": Array,
    "getOwnPropertyDescriptor": Date,
    "getPrototypeOf": Array,
    "has": f20,
    "isExtensible": Array,
    "ownKeys": f20,
    "preventExtensions": Array,
    "set": Date,
    "setPrototypeOf": Date,
};
({"e":o23,"length":o23,} = v15);
try {
    Array.b = v8;
} catch(e24) {
}
new Proxy(v15, o23);
Date.valueOf = f20;
let v27;
try { v27 = Array.isArray(-3.520516541488499); } catch (e) {}
const v31 = Reflect[Symbol.matchAll];
[v4] = v18;
v27.__proto__;
const v33 = [o23,Array];
Reflect.apply(Array.from, v27, v33);
const v36 = new Date(Date);
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this.constructor;
    try {
        Array(64);
    } catch(e42) {
    }
    v31 ^ v40;
    try { new v40(); } catch (e) {}
    this.f = v36;
}
const v45 = new F37();
new F37(v45);
