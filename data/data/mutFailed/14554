const v1 = new Map();
const v3 = new Set();
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a6;
    } catch(e8) {
    }
    try {
        this.b = Map;
    } catch(e9) {
    }
    try {
        this.g = a7;
    } catch(e10) {
    }
}
new F4(Set, v3);
new F4(v1, Set);
new F4(v3, F4);
new WeakSet();
function f16() {
    return Map;
}
new Int32Array(2511);
new Int16Array(130);
new Int32Array(4);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
}
class C28 extends F26 {
}
function f29() {
}
%OptimizeFunctionOnNextCall(f29);
new C28();
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    a34 === a34;
    const v38 = new BigUint64Array();
    const v39 = /anVXYFzN(x)(x)(x)\3/gvdms;
    try { v38.reduceRight(v39); } catch (e) {}
    a35 >> 9n;
    this.constructor;
}
function f44() {
    class C45 {
    }
    const v46 = new C45();
    for (let v47 = 0; v47 < 5; v47++) {
        [-Infinity,Infinity,959819.665748626];
        [0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
        [-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
        function f54() {
            let v56 = 1000000000000.0;
            const v57 = v56--;
            -v57;
            class C62 {
                constructor(a64) {
                    const v66 = new Float32Array();
                    try { v66.entries(); } catch (e) {}
                    const v68 = new Uint16Array(12, -4294967296, v57);
                    new Float32Array(v68, -4294967296, 268435439, v56, v68);
                }
            }
            try { new C62(12); } catch (e) {}
            const v71 = new C62(257828.6336153492);
            const v72 = new C62();
            const v73 = new C62(-4294967296);
            const v74 = [v73,C62];
            [257828.6336153492,v73,v71,v73,v74];
            const v76 = [v73];
            class C77 extends C62 {
                [v71];
            }
            const v78 = new C77();
            const v79 = v76.constructor;
            try { v79.isArray(v76); } catch (e) {}
            class C81 extends C62 {
            }
            C81.a = C77;
            const v82 = new C81();
            const v83 = v82?.constructor;
            try { new v83(); } catch (e) {}
            Object.defineProperty(v82, 65537, { value: v72 });
            try { v78.m(v74); } catch (e) {}
            return Int32Array;
        }
        %PrepareFunctionForOptimization(f54);
        f54();
        %OptimizeFunctionOnNextCall(f54);
        f54();
        new F31(undefined, v46);
    }
}
%PrepareFunctionForOptimization(f44);
f44();
%OptimizeFunctionOnNextCall(f44);
f29();
