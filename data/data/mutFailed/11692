class C3 {
    constructor(a5, a6) {
        new Int32Array();
        class C9 {
        }
        const v10 = [14,2147483649,-8,1905156927,-4294967295,-2,13044,-1085163507];
        -3.0 | -9007199254740992;
        const v18 = new Int8Array();
        class C19 {
            constructor(a21) {
                v18[this] %= -4.0;
                for (let v22 = 0; v22 < 32; v22++) {
                    "p" + v22;
                    for (let v25 = 0; v25 < 5; v25++) {
                        function f26() {
                            return f26;
                        }
                        f26();
                    }
                }
            }
        }
        try { v10.includes(undefined, -4934n); } catch (e) {}
        this.g = this;
        const v31 = new Int32Array();
        const v33 = new BigUint64Array();
        try { v33.with(Map, v31); } catch (e) {}
        const v35 = --a6;
        v35 - v35;
        let v37 = delete a5?.[2];
        const o38 = {
        };
        const v39 = o38.__defineGetter__;
        let v40;
        try { v40 = v39(); } catch (e) {}
        return v40;
        v37++;
        try {
            const v42 = /SC/g;
            function f43() {
                const o45 = {
                    get c() {
                        return this;
                    },
                };
                return o45;
            }
            const v46 = f43();
            class C47 extends f43 {
            }
            const v48 = new C47();
            new Int32Array(v46, v48);
            this.fuck(268435456, 9007199254740990, v35, v42);
        } catch(e52) {
            e52.e = e52;
        }
    }
    g;
    [1.1696290827294657e+308];
}
let [] = [1073741824,1073741823,1376142744,1073741825];
const o56 = {
    "execution": "async",
    "type": "minor",
};
C3.name;
const v58 = new C3(1.1696290827294657e+308, 9007199254740990);
new Int32Array(Int32Array);
const v61 = 268435456 != 268435456;
([Worker,v61,v61]).unshift(v61);
v58.g;
const v66 = new C3(1.1696290827294657e+308, 1.1696290827294657e+308);
const v67 = new C3(1.1696290827294657e+308, v66);
new Uint16Array(1.1696290827294657e+308);
const v71 = new Float64Array(Float64Array, Float64Array, Float64Array);
const v73 = new BigUint64Array();
const o82 = {
    toString(a75, a76) {
        const v77 = ~a76;
        const v78 = this.__lookupGetter__;
        try { new v78(v71); } catch (e) {}
        const v80 = a76 + a76;
        v80 >>> v80;
        v73[3408] = this;
        return v77;
    },
};
try { o82.toString(); } catch (e) {}
function f85() {
    return f85;
}
function f86(a87, a88) {
    a88.then = f85;
    return a88;
}
try { v67(8767); } catch (e) {}
const v92 = [];
function f93(a94) {
    try {
        v92.some();
    } catch(e96) {
        e96.stack;
    }
    return a94;
}
const o99 = {
    __proto__: v92,
    [v92]() {
    },
};
o99.toString(f93);
class C101 extends Date {
}
const v102 = [10000,512,4096,-5928];
try { v102["find"](); } catch (e) {}
const t115 = "toReversed";
t115[7] = "toReversed";
class C108 {
    constructor(a110, a111) {
    }
}
for (let i = 0; i < 10; i++) {
    class C113 {
        constructor(a115) {
            const v116 = this.constructor;
            try { new v116(); } catch (e) {}
            let v119 = ("size").g?.[7];
            [...v119] = "size";
        }
    }
    new C113("size");
}
new C108();
let v123 = 800562525;
v123--;
const o126 = {
};
const v127 = -719.6662441520621 !== o126;
v127 && v127;
/xyz?T9E\c/gdmy;
new Uint8ClampedArray(4);
const v136 = new Set();
function F137(a139, a140) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a139;
    } catch(e141) {
        for (let [v142,v143] of a139) {
        }
    }
    try {
        const v144 = v136[this];
        ([WeakSet])[1];
        new F137(v144, 6n);
    } catch(e149) {
    }
}
-1 / -1;
function F156() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.a = 1022873702;
    } catch(e159) {
    }
}
const v160 = new F156();
const v161 = new F156();
const v162 = new F156(4294967297n, v161, 4294967296n);
[[v161,F156],v160,v162,v161];
