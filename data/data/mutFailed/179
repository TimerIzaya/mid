const v0 = [340211.49085129844];
[-1000.0,-119987.55263875122,1000000000000.0,4.815320404514213e+307,492612.58079618076];
[1.7976931348623157e+308,-613.0829391607126];
function f3() {
    return v0;
}
new Int32Array(1000);
class C12 {
    #valueOf(a14, a15, a16, a17) {
        this.#valueOf();
    }
}
new Uint8Array(3256);
new Int16Array(5);
function f24() {
    return f24;
}
Math.atanh();
function f27(a28) {
}
class C29 extends f27 {
}
const o38 = {
    "f": f27,
    536870889: 5,
    set g(a32) {
        function F33(a35, a36, a37) {
            if (!new.target) { throw 'must be called with new'; }
        }
    },
};
o38.type = f24;
const v39 = [];
class C40 {
    constructor() {
        this[Symbol.toPrimitive] = f24;
        super.f >>= this;
    }
    static #o() {
        super[v39];
        super.a;
        return v39;
    }
}
const v47 = new C40();
v47.length = Int32Array;
v47.length = 1;
gc(o38);
class C3 {
    static {
        let v5 = 0;
        while (v5 < 9) {
            try {
                this.toString = this;
            } catch(e8) {
            }
            v5++;
        }
    }
    2444;
}
const v10 = new C3();
new v10();
const v12 = new C3();
new Int8Array(1938);
new Int32Array(6);
new Int32Array(6);
Object.defineProperty(Int32Array, "b", { configurable: true, enumerable: true, value: Int32Array });
Int32Array.b = Int32Array;
const v25 = new Uint16Array(120);
function f26() {
    return -4.170385303716435;
}
v25.valueOf = f26;
v10[87] = v25;
const v32 = new Int8Array(Array);
v32[0] = v12;
const v34 = BigInt64Array.bind();
v34.length;
([1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10]).sort().fill(v34);
