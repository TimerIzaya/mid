new Uint32Array(1476);
new Int32Array(1);
9 % 9;
new Uint32Array(9);
[-1000000000.0,0.8968097643519101,-8.720684288580602e+307,-1.0,0.32807980030170847,117.99447186142652,1000.0];
Int32Array.length = Int32Array;
const v16 = new Int32Array(64);
function f17() {
    function f18() {
        -4294967297n / -4294967297n;
        return Int32Array;
    }
    return f18;
}
Object.defineProperty(v16, Symbol.toPrimitive, { writable: true, configurable: true, get: f17 });
try { v16.at(v16); } catch (e) {}
class C25 {
}
class C26 extends C25 {
}
C26.e = C26;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = 522675525n / 522675525n;
function f31(a32, a33, a34, a35) {
    function f36() {
        try { new Symbol(); } catch (e) {}
        Symbol.toPrimitive;
        const o45 = {
            "e": -268435456,
            getSeconds(a43, a44) {
            },
            4: -268435456,
        };
    }
    function f46() {
        function f47(a48) {
            const v49 = [];
            const o51 = {
                [v49]: v49,
                get h() {
                    return this;
                },
            };
            return v30;
        }
        return f47;
    }
    Object.defineProperty(f36, "constructor", { configurable: true, enumerable: true, get: f46 });
    const v52 = f36?.constructor;
    try { new v52(a32, a33, v30, a32); } catch (e) {}
    f36();
    const v56 = new Int8Array();
    v56.buffer;
    %OptimizeFunctionOnNextCall(f36);
    const t54 = "find";
    t54[1] = "find";
}
for (let v59 = 0; v59 < 10; v59++) {
    f31();
}
f31();
