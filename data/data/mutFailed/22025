function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        /(?<=)(?:a+)?A[z-\d]?/i.dotAll;
        Math.hypot([256,54026]);
        Array.prototype;
        function f15(a16, a17, a18, a19) {
            return a16;
        }
        arguments.toString(f15(), arguments);
        const v23 = new Uint8Array(127);
        let v26 = 61;
        v26--;
        Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
        new Uint32Array(v23);
        this.e = 255;
    } catch(e30) {
    }
    Int32Array.bind().name;
    const v34 = [65535,-2147483647,9007199254740990,11241,-3,-299794727,16,1,-4294967297];
    const o35 = {
    };
    function f36(a37, a38) {
        v34[11] = o35;
        return a37;
    }
    f36(o35, o35);
}
const v40 = new F3(1073741824);
const v41 = new F3(F3);
const v42 = v41?.__defineGetter__;
try { new v42(536870888, 1073741824); } catch (e) {}
class C44 {
}
const v45 = new C44();
v45.constructor;
12204n <= -16;
const v53 = new BigUint64Array(-16);
v53[3408] = v40;
const v54 = new Float32Array(6);
class C55 {
}
const v56 = v54.propertyIsEnumerable;
const v57 = [C55,C55,C55];
function f58(a59, a60) {
    Object.defineProperty(v57, "length", { value: v56 });
    return C55;
}
v54[1] = v54;
new Uint8Array(v54);
new F3(v41);
Int32Array.prototype = Int32Array;
new Int32Array(4);
const v69 = new Uint16Array(3462);
const v72 = new Float64Array(3537);
v72[332] = v72;
function f73(a74, a75, a76, a77) {
    function f78() {
        function f79(a80) {
            a80.length = a80;
            new Uint16Array(9);
            const v86 = new BigInt64Array(12);
            const o87 = {
                ...v86,
            };
            const v88 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            Math.atan(16);
            function F92(a94, a95, a96) {
                if (!new.target) { throw 'must be called with new'; }
                a94 >> a94;
                a95?.__defineSetter__;
                const v99 = a95 === a95;
                v99 ** v99;
            }
            class C101 {
            }
            const v102 = new C101();
            new F92(F92, v102, 9);
            function f104(a105, a106, a107, a108) {
                function f109() {
                    let v111 = Float64Array;
                    v111.toString();
                    v111 = a106;
                    const v113 = v88.length;
                    const v114 = v113 >>> v113;
                    v114 / v114;
                    const o120 = {
                        toString(a117, a118) {
                            a108 && v111;
                            return a106;
                        },
                    };
                    o120.toString();
                    let v122 = -268435456;
                    v122--;
                    const o124 = {
                        "e": -4294967295,
                        "e": v122,
                    };
                    return a106;
                }
                const v125 = f109();
                %OptimizeFunctionOnNextCall(f109);
                return v125;
            }
            return f73;
        }
        f79(f79);
        return f73;
    }
    f78.arguments = f78;
    f78();
    f78();
    %OptimizeFunctionOnNextCall(f78);
    const v129 = [];
    function f130() {
        const v131 = v129.constructor;
        v131.call();
        return v131;
    }
    %PrepareFunctionForOptimization(f130);
    return a75;
}
function f134() {
    return Array;
}
for (let v135 = 0; v135 < 5; v135++) {
    function f136() {
        const o140 = {
            __proto__: f136,
            valueOf(a138, a139) {
                return a139;
            },
        };
        return v135;
    }
    f136();
    v57 >= Uint16Array;
    try { v54.constructor(0.6822080711934364, v54); } catch (e) {}
    class C147 extends Int32Array {
    }
    new C147();
    %OptimizeFunctionOnNextCall(f136);
}
f73();
try { new Uint8Array(536870888, v69, 536870888); } catch (e) {}
class C153 {
}
const v155 = Symbol.toPrimitive;
const o159 = {
    toString(a157, a158) {
        a157 *= v155;
        return v155;
    },
};
try { C153.m(); } catch (e) {}
const o163 = {
    valueOf() {
        return [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
    },
};
function F164(a166, a167) {
    if (!new.target) { throw 'must be called with new'; }
    try { a166.valueOf(); } catch (e) {}
    const v169 = this.constructor;
    try { new v169(a166); } catch (e) {}
}
new F164(o163);
new Uint8Array(268435440);
f73();
