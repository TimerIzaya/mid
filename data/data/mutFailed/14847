new Uint8Array(282);
class C8 {
    get b() {
        const v10 = ("B")[21];
        try {
            this.e = "B";
        } catch(e11) {
        }
        return v10;
    }
    static [2.0];
    static #g;
    g = "d";
}
new C8();
new Int32Array(0);
new Date(Math);
const v17 = [601759695];
const v18 = [1073741824,1073741823,1376142744,1073741825];
function f20(a21, a22, a23, a24) {
    const v26 = arguments.toString();
    function f27() {
        ("Vre").fixed("Vre");
        const o44 = {
            [522675525n](a32, a33) {
            },
            ..."Vre",
            valueOf(a35, a36) {
                return this;
            },
            ...v17,
            ..."Vre",
            valueOf(a38, a39) {
                return a21;
            },
            ..."Vre",
            4: "Vre",
            toString(a41, a42, a43) {
                return v26;
            },
            5: -4294967295,
        };
        o44.valueOf();
        return f20;
    }
    f27();
    const v48 = new Int8Array();
    v48.buffer.slice();
    %OptimizeFunctionOnNextCall(f27);
    let v52;
    try { v52 = v18["find"](..."find", a24, ...v17, ...v18, ...522675525n); } catch (e) {}
    return v52;
}
f20(v17, 0, 0, v18);
const v54 = f20(f20, 522675525n, f20, v18);
%OptimizeFunctionOnNextCall(f20);
const v59 = [-3.942521664036782e+307,-3.942521664036782e+307,[-3.942521664036782e+307,-3.942521664036782e+307,-3.942521664036782e+307]];
function f60(a61, a62, a63, a64) {
    const v66 = new Int32Array();
    v66[492];
    v66[3];
    return a61;
}
for (let v69 = 0; v69 < 10; v69++) {
    f60();
}
new Float32Array(105);
/(a)/udim;
/ei/udmy;
/iV/vi;
function f75(a76, a77, a78, a79) {
    const v80 = [1000000000000.0,-952.1538186148879,597175.6294050945,0.5606738113859926,787.1655584120176,-1.4391319355275538,972495.0958115859];
    for (let v81 = 0; v81 < 5; v81++) {
        continue;
    }
    const v82 = v80 < Math;
    const o86 = {
        n(a84, a85) {
            return v82;
        },
    };
    class C89 extends Uint8Array {
        constructor(a91, a92) {
            a91[1] = Float64Array;
            super();
        }
    }
    new C89(v80);
    return f75;
}
const v94 = ("B").constructor;
try { new v94("B", v54); } catch (e) {}
0 < 5;
for (let v99 = 0; v99 < 10; v99++) {
    f75(v99, v99, f75, v99);
}
class C102 {
}
const v103 = new C102();
const t99 = v103.constructor;
t99(v17, Int8Array);
%OptimizeFunctionOnNextCall(f75);
function f106(a107) {
    const v108 = `
    `;
}
new Float64Array(v59);
f75();
