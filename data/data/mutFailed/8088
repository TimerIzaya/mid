const v3 = [-1024,65537,65537,-1024];
try { v3.sort(-1024); } catch (e) {}
([v3,v3])[1];
[-1024,32421,32421];
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this.constructor;
    try { new v14(); } catch (e) {}
    typeof Float32Array;
}
const v18 = [-325994657,-9223372036854775808,536870889,9];
function f19() {
    const v22 = new Float32Array(2);
    new Int32Array(v22);
    return 2;
}
v18.valueOf = f19;
let v25;
try { v25 = v18.valueOf(); } catch (e) {}
([1000])[0];
[-23476,10000,-10,8,65536,-4294967295,1238173209];
let v29 = 15;
v29--;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v32 = new Int16Array(v29);
3989 >> 3989;
new Int16Array(3989);
new BigUint64Array(89);
try { ("b").strike(); } catch (e) {}
class C44 {
    static #h;
}
const v45 = C44?.constructor;
try { new v45(v25); } catch (e) {}
const v47 = new C44();
const v48 = v47?.constructor;
try { new v48(); } catch (e) {}
const v50 = v47?.constructor;
try { new v50(); } catch (e) {}
const v52 = new C44();
const v56 = new Int8Array(268435456);
try { v52.isExtensible(v56); } catch (e) {}
class C58 {
}
[-788.7260290236088];
try { Math.exp(v25); } catch (e) {}
const v64 = Math?.expm1;
try { v64(Math); } catch (e) {}
try { new v64(3989); } catch (e) {}
let v67 = Math.round();
v67--;
v67--;
for (let v70 = 0; v70 < 10; v70++) {
    let v72 = -(v70 / v70);
    const v75 = new Uint16Array();
    const v78 = new Int32Array();
    class C79 {
        static #d = -2;
        constructor(a81, a82) {
            try {
                v75.#d += v78;
            } catch(e83) {
                e83.toString();
            }
        }
    }
    const t66 = C79.constructor;
    t66(255);
    v72--;
    async function f88(a89, a90, a91) {
        ("b")[a91];
        "c" ** f88;
        try { new BigInt64Array(v70, BigUint64Array, BigUint64Array); } catch (e) {}
        new BigInt64Array(4096);
        ~(await v67);
    }
    f88.length = f88;
    f88.valueOf = f19;
    f88.e = f88;
    const v101 = f88();
    try { v101.then(Math, Math); } catch (e) {}
    const v104 = gc?.toString;
    try { v104(); } catch (e) {}
    try { new v104(); } catch (e) {}
    const o107 = {
    };
    o107.h = o107;
    o107.type = -788.7260290236088;
    o107.b = o107;
    gc(o107);
    class C109 {
        #b = v32;
        constructor(a111, a112, a113) {
            super();
            for (let v114 = 0; v114 < 100; v114++) {
                f19();
            }
        }
    }
    try { new C109(); } catch (e) {}
}
