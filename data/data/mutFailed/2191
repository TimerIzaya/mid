let v0 = /(X\xed\xb0\x80+)/gud;
const v1 = [10,2147483649,-65537,9223372036854775807,2147483647,0,268435440];
([8.42123894252574,2.2250738585072014e-308,1000000000000.0,1e-15,-1000.0,-5.0,1000000000.0,-3.636295005613261e+307,-3.0]).toString().search(v1);
v0.o();
const v6 = /[(?<=a)]/gvdimy;
const v7 = /(w(a\1)+)/gms;
const v8 = v1.__proto__;
const v9 = [];
function f10() {
    const o14 = {
        toString() {
            super[this];
            return this;
        },
        ...v9,
        n() {
            return this;
        },
    };
}
const v15 = [v6,v6,v6,v6,v7];
[v0,[v6,v7,v15,v15,v6],v15,v0,v0];
function f18() {
    v6.c = v8;
    const v19 = /(ab|cde)\118\P{sc=Greek}+/gdims;
    v19.exec(v19);
    const t25 = [[]];
    delete t25[0];
    return v0;
}
try { WeakMap.apply(Int32Array, Date); } catch (e) {}
new Int8Array(995);
const o36 = {
};
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    a40.caller = a42;
}
new Uint16Array([-2023,8,-5,-19182,268435441]);
v0 >>= /((ab))/vy;
const v50 = Symbol.isConcatSpreadable;
const o56 = {
    [-352741132]: -352741132,
    set b(a54) {
    },
    get c() {
        return this;
    },
    "b": 2.220446049250313e-16,
};
const v57 = Array();
v57[267] = v50;
v57["concat"]();
