function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "f", { writable: true, configurable: true, value: this });
    try {
        this.f = -9007199254740991;
    } catch(e3) {
    }
}
function f4(a5, a6) {
    eval();
    return F0;
}
F0[Symbol.iterator] = f4;
new F0();
new F0();
const v13 = new F0();
v13.f = v13;
try { new Uint32Array(F0, 10n, 10n); } catch (e) {}
new Uint32Array(257);
5 >> 5;
new Float64Array(5);
4 > 4;
new Float32Array(4);
const v31 = new Uint8Array(3521);
try { v31.every(Uint8Array); } catch (e) {}
Uint8Array["lastIndexOf"](0);
