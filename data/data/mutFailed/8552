const v0 = [9007199254740991,-9,10000,127,3,-1530162875,-833884721,6,-25361049,15];
const v1 = [536870887,843979888,-1073741824,698838935,-128];
const v2 = [200387720,-9223372036854775808,-8,-13,-27891,4,-1];
function f3() {
    const o4 = {
    };
    return o4;
}
v2.toString = f3;
const v6 = [[v2,v2],v0,v0,v1,v2];
function f7() {
    return f3;
}
function f8(a9) {
    +0.13782399835521153;
    5956 * a9;
    0.13782399835521153 && 0.13782399835521153;
}
Object.defineProperty(v6, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f7, set: f8 });
[v6,v1,v6,v1];
class C19 {
    static [v6] = v2;
    valueOf(a21, a22, a23) {
        try {
            super.round(v2, v2, a21);
        } catch(e25) {
        }
        return a23;
    }
    static a;
    c;
    h = v6;
}
new C19();
new C19();
new C19();
const v31 = new BigUint64Array(1);
new Int8Array(62);
new Int32Array(7);
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F41(3011, Uint8ClampedArray, F41);
function f47() {
    v31 !== v2 ? v31 : v2;
    return 7;
}
v46.toString = f47;
v46.constructor = Date;
const t49 = v46.constructor;
new t49(v46, Uint8ClampedArray, 3011);
