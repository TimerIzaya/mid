function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 4;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v10 = [v4,-9007199254740992,v4,-9007199254740992];
const v11 = [v10,v10,v6,v5,v10];
[v11];
const v14 = v11.entries;
let v15;
try { v15 = new v14(v14, v11, v14, v14, null); } catch (e) {}
v15 = null;
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
}
new F16();
class C22 extends Map {
}
const v23 = new C22();
const v24 = new C22();
const v25 = new C22();
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v31 = new Uint32Array(5);
let v32 = -4294967297n;
v32--;
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f37(a38, a39, a40, a41) {
    const v42 = new Map();
    function f43() {
        return Int32Array;
    }
    v42.constructor = f43;
    const t38 = v42.constructor;
    const v46 = t38();
    const o47 = {
        __proto__: v46,
    };
    try { a38.toLocaleString(); } catch (e) {}
    const v49 = a38?.constructor;
    let v50;
    try { v50 = v49(); } catch (e) {}
    try { v49(); } catch (e) {}
    const v53 = arguments.length;
    Object.defineProperty(v23, "e", { configurable: true, enumerable: true, value: f37 });
    const v55 = v24["entries"](a40, ...v25, BigUint64Array, ..."entries", a39, v53);
    const v57 = Symbol.toStringTag;
    v24[v57] = v57;
    function f58() {
        const v61 = new Int16Array();
        try {
            const o63 = {
            };
            o63.g = -261.99102172609366;
            o63.a = v61;
            o63.f = a40;
        } catch(e64) {
        }
        let v65;
        try { v65 = ("Vre").charAt(Int16Array); } catch (e) {}
        try { v65.lastIndexOf(f58); } catch (e) {}
        let v67;
        try { v67 = ("Vre").codePointAt(v29); } catch (e) {}
        v67 - v67;
        function f69() {
            return f69;
        }
        f69 <= 8n;
        v67 ^ v67;
        let v73 = Float64Array;
        v73 = a39;
        let v74 = v29.length;
        v74++;
        try {
            v35.forEach(a39);
        } catch(e77) {
            e77.stack = e77;
        }
        const o88 = {
            "c": v14,
            "c": v34,
            valueOf(a79, a80) {
                return a80;
            },
            1073741824: v31,
            [v32](a82, a83, a84, a85) {
                eval(v50);
            },
            "arguments": 5,
            256: a41,
        };
        o88[256];
    }
    f58();
    const t98 = 5;
    const v92 = t98();
    let v93;
    try { v93 = v92.findLast(f37, v92); } catch (e) {}
    v6.b %= v92.unshift("entries", v55, "entries", v93);
    [-4.8907117654122315e+307,-1.7976931348623157e+308];
    [0.47431523763615535];
    const v97 = [0.8345739380414845,2.0,NaN,5.9197186779268325,-2.267414280806948];
    try { v97.indexOf(a41, 1230); } catch (e) {}
    let v100;
    try { v100 = Int8Array.of(); } catch (e) {}
    try { v100.join(v49); } catch (e) {}
    const o105 = {
        ["536870887"]: -1000000000000.0,
        "b": -757.5759240774136,
        "a": -1000000000000.0,
        [-757.5759240774136]: "536870887",
        [-1000000000000.0]: -757.5759240774136,
        "d": "536870887",
        [-2]: -1000000000000.0,
    };
    const v106 = new Int8Array(v34);
    v106.c = v106;
    const v107 = v106.buffer;
    v107.maxByteLength;
    const v109 = v107.slice(v49);
    try { Int32Array(v109, arguments, v32); } catch (e) {}
    function f112(a113, a114, a115, a116) {
        return v23;
    }
    try {
        v97.b = 256;
    } catch(e118) {
    }
    const v119 = new Int32Array();
    const v120 = v119[3];
    v120 + v120;
    for (let v122 = 0; v122 < 5; v122++) {
    }
    %OptimizeFunctionOnNextCall(f58);
    try { v35["find"](..."find", a41, ...v34, ...v35, ...522675525n); } catch (e) {}
    return v49;
}
for (let v125 = 0; v125 < 10; v125++) {
    f37(v31);
}
%OptimizeFunctionOnNextCall(f37);
f37();
