new Uint8Array(512);
const v5 = new Set();
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a8;
    } catch(e10) {
        for (let [v11,v12] of a8) {
            try {
                v5.values();
            } catch(e14) {
            }
        }
    }
    try {
        this.h = v5;
    } catch(e15) {
    }
    try {
        const v16 = v5[this];
        try {
            new F6(v16, -268435456n);
        } catch(e19) {
        }
        this.b = Set;
    } catch(e20) {
    }
}
const v21 = new F6(Set, Set);
new F6(Set, F6);
const v23 = new F6(v21, F6);
const v27 = [65537,268435441,63298,-5,1235122603];
const v28 = [128,215394418];
const v29 = v28.entries();
const v30 = [-2,-4294967296,4294967297];
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
const v37 = new F31(-714582153, F31, -714582153, v28);
const v39 = new F6(v23, null);
new BigUint64Array(0);
new Int32Array(1519);
v37.length;
const v47 = new F31(9, v37, 9, v30);
v47.b = v47;
const v48 = new F31(1024, v47, v30, v30);
const v56 = ("string").trimStart();
v29[3];
let v60;
try { v60 = v56(); } catch (e) {}
v27[v60] = v28;
0 ^ 9;
const v65 = -1000;
~9;
v65 >>> v65;
a = ("string").length - F31;
v5[v47];
v39.__proto__;
-35417 - -35417;
let v74 = undefined;
v74 = v48;
const v76 = new Float32Array(10);
new Int16Array(6);
[[v76,512,Float32Array,Uint8Array],Float32Array,Int16Array];
const v82 = [Uint8Array];
class C84 extends Uint8Array {
    static #c = v82;
    static 65535;
    2470282968;
    #m(a86, a87, a88) {
        new Uint8Array(4096);
        new BigInt64Array(10);
        new Int8Array(15);
        return Int16Array;
    }
}
new C84();
new C84();
new C84();
const v101 = /[\ca]/ms;
function f104(a105, a106) {
    const o108 = {
        get h() {
            return a106;
        },
        [a106]: 4,
        2778757984: a105,
        "h": 4,
    };
    return 4;
}
f104(f104, f104);
f104(v101, -65535);
