new BigInt64Array(30);
const v5 = new Int16Array(0);
const v8 = new Uint16Array(719);
class C9 extends Uint16Array {
    m(a11, a12, a13) {
        let v14 = 0;
        do {
            const v15 = super[v5];
            b = C9;
            try {
                v8.toString = v15;
            } catch(e16) {
            }
            v14++;
        } while (4 < 4)
        return a11;
    }
}
new C9();
new C9();
new C9();
const v24 = new Float32Array(Float32Array);
for (let v25 = 0; v25 < 10; v25++) {
    function f26() {
        return f26;
    }
    const v27 = [601759695];
    const v28 = [1073741824,1073741823,1376142744,1073741825];
    function f30(a31, a32, a33, a34) {
        function f36() {
            return v24;
        }
        a34();
        const v39 = new Int8Array();
        function f40(a41, a42) {
            return a41;
        }
        f40(v28, v24);
        v39.buffer;
        a31.slice(2147483648);
        %OptimizeFunctionOnNextCall(f36);
        let v48;
        try { v48 = v28["find"](..."find", a34, ...v27, ...v28, ...522675525n); } catch (e) {}
        v48 <= a33;
        return arguments;
    }
    for (let v50 = 0; v50 < 10; v50++) {
        f30(v28, v50, v27, v50);
    }
}
function f53(a54, a55, a56, a57) {
    a54.length;
    const v59 = new Float32Array();
    const v61 = new Float32Array(2);
    const v63 = new Int32Array(v61);
    const v64 = v61;
    v63.fill(...v64);
    return v59;
}
for (let v66 = 0; v66 < 625; v66++) {
    f53(Uint8Array);
}
