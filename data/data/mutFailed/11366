let v1 = new WeakMap();
class C2 {
    static set f(a4) {
        let v5;
        try { v5 = a4(WeakMap, a4, this, this, WeakMap); } catch (e) {}
        const v6 = ++v1;
        try { this.o(v1, v1, v6, v6, v5); } catch (e) {}
        try {
            this.fuck(a4, v6);
        } catch(e9) {
        }
    }
    static #h;
    h = WeakMap;
    static #d = v1;
}
const v10 = new C2();
new C2();
new C2();
const v14 = new WeakSet();
try { v14.add(WeakSet); } catch (e) {}
-46661n * -46661n;
2117723837n | 2117723837n;
[-65536,-6,1080164929,8,-1024,6,9007199254740992,257,1024];
[0,536870889,-1073741824,-65535,-1153625595,-5,12,1073741824,31094];
const v24 = -Infinity;
class C26 {
    #toString(a28, a29) {
        new Int8Array(2);
        new BigInt64Array(56);
        new Float32Array(257);
        return 257;
    }
}
const v39 = new C26();
function f40() {
    class C41 {
    }
    return v10;
}
v39[Symbol.toPrimitive] = f40;
new C26();
new C26();
function f46() {
    return v24;
}
class C47 {
    [v39];
    #valueOf(a49, a50) {
        function f51() {
            return a50;
        }
        try {
            a49.__proto__ = a49;
        } catch(e52) {
        }
        return "toUpperCase";
    }
    constructor(a54, a55, a56, a57) {
        function f58() {
            this + a55;
            v1[4] = v1;
            return -46661n;
        }
        this.constructor = f58;
        this.constructor;
        [-3.942521664036782e+307,-3.942521664036782e+307,[a56,a56]];
    }
    f = v39;
}
new C47();
new C47();
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e70) {
    }
    try {
    } catch(e71) {
    }
}
[-38581];
function f74(a75, a76) {
    const o80 = {
        [122188848n](a78, a79) {
        },
    };
    return o80;
}
%PrepareFunctionForOptimization(f74);
f74()[122188848];
f74();
