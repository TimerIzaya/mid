new Float64Array(2312);
new Float64Array(256);
new Uint8Array(128);
new Date();
try {
    Date.now();
} catch(e15) {
}
new Int8Array(8);
new Float32Array(3);
const v27 = new BigInt64Array();
const o28 = {
    __proto__: v27,
};
try { o28.fill(o28, BigInt64Array); } catch (e) {}
new Float32Array(0);
class C32 {
    constructor(a34) {
        for (let v35 = 0; v35 < 32; v35++) {
            const t19 = super.d;
            t19[a34] |= v35;
            new Int16Array(3714);
            new Uint8ClampedArray(1000);
            new Uint32Array(2976);
            v35 === v35;
            for (let v47 = 0; v47 < 50; v47++) {
            }
            new Int8Array(520);
            for (let v51 = 0; v51 < 5; v51++) {
            }
            0 || Int8Array;
            Math.tanh();
            for (let v56 = 0; v56 < 5; v56++) {
                function f57() {
                    for (let v58 = 0; v58 < 5; v58++) {
                        function f59() {
                            [Math.atanh(v58)];
                            return Math;
                        }
                        f59();
                        %OptimizeFunctionOnNextCall(f59);
                    }
                    const o65 = {
                    };
                    const t44 = o65.constructor;
                    return t44(128);
                }
                f57();
                f57();
                %OptimizeFunctionOnNextCall(f57);
            }
            function f70() {
                return this;
            }
        }
    }
}
const o71 = {
};
Float32Array & Float32Array;
new C32();
