function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F0;
    this.h = F0;
    try {
        this.h = -2116053041;
    } catch(e3) {
    }
    try {
        this.d = -2116053041;
    } catch(e4) {
    }
    try {
        this.c = -2116053041;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
new F0();
const v9 = [65536,268435439,13,-2147483647,1024,64,65537,4096,1820317859,268435456];
const v10 = [268435456,380489966,2147483648,-31740];
const v11 = [65536,1534,9,128,14,-4294967296,2147483647];
const v12 = [0.5560078027753168,-1000000000.0,0.0,-4.0,NaN,-262213.8170565687];
const v13 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f14() {
    function f15(a16) {
        function F17(a19, a20, a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a19;
            } catch(e23) {
            }
            try {
                this.f = v7;
            } catch(e24) {
            }
            try {
                this.a = v12;
            } catch(e25) {
            }
        }
        new F17(v12, v11, F17, F0);
        const v27 = new F17(v9, v12, v9, v12);
        new F17(v10, v9, v10, v27);
        return v6;
    }
    return f15;
}
function f29(a30) {
    new WeakMap();
}
Object.defineProperty(v13, "constructor", { writable: true, enumerable: true, get: f14, set: f29 });
const v33 = /(?:a*)+q(?<a>.)/guds;
function f34(a35) {
    const v38 = new SharedArrayBuffer(945);
    v38.slice();
    return v33;
}
v33.toString = f34;
for (let [i43, i44] = (() => {
        0 * 0;
        return [0, 10];
    })();
    (() => {
        const v45 = i43 < i44;
        v45 && v45;
        return v45;
    })();
    (() => {
        const v49 = i44--;
        v49 >>> v49;
    })()) {
    i43 + i43;
    for (let v54 = 0; v54 < 5; v54++) {
        const v55 = v33.constructor;
        try { v55(v33, v33); } catch (e) {}
        v13.constructor;
        v33.constructor.lastParen;
        const v61 = [i44,i44,i44,i44,i44];
        v61[4];
        v61 > 8n;
    }
}
[-281.6795333440159,-1.8244228050138552e+307,1000.0,-1.470714050735055e+308,-5.0,-1000000.0,-2.0,2.2250738585072014e-308];
[60.76118094657363,-1.7374435242921084e+308,-678.5101179195252,8.797604770650047,-1e-15,2.220446049250313e-16,-1000000000000.0];
new BigInt64Array(3769);
new Int8Array(256);
function f72() {
    return f72;
}
const v73 = [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
try {
const t0 = 1073741825n;
t0(v73);
} catch (e) {}
new Int32Array(129);
class C79 {
}
const v80 = new C79();
function f81(a82, a83) {
    function f84() {
        return f81;
    }
    class C85 extends f84 {
    }
    class C86 extends C85 {
    }
    function f87(a88, a89, a90, a91) {
        try { a88(C86); } catch (e) {}
        let v93 = a89 & a89;
        new Map();
        v93++;
        const o100 = {
            n(a98, a99) {
                return this;
            },
        };
        return v80;
    }
    for (let v101 = 0; v101 < 500; v101++) {
        f87();
    }
    return C79;
}
Object.defineProperty(v80, "constructor", { value: f81 });
const v103 = v80.constructor;
v103(v103, v80);
