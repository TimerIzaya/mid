class C3 {
    static #b = "f";
    static n(a5) {
        a5[1921] = this;
        function f6(a7, a8, a9, a10) {
            function f11() {
                return f11;
            }
            const v12 = f11();
            function f13(a14, a15) {
                const o17 = {
                    get d() {
                        return this;
                    },
                };
                return v12;
            }
            f13(f13());
            return f6;
        }
        for (let v20 = 0; v20 < 10; v20++) {
            f6();
        }
        %OptimizeFunctionOnNextCall(f6);
        f6();
        const v24 = Symbol.replace;
        this[v24] = -304.7179060163352;
        return v24;
    }
    static [-304.7179060163352];
    ["9"];
    static h = -304.7179060163352;
    #f = "9";
}
const v25 = new C3();
new C3();
new C3();
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this.constructor;
    try { new v34(); } catch (e) {}
    this.a = Uint16Array;
}
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    new Int8Array(180);
    v25.d = -304.7179060163352;
    this.constructor(this);
    try {
        this.b = a41;
    } catch(e46) {
    }
    try {
        function F47(a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v54 = new Int8Array(7);
        new Uint32Array(v54);
        this.e = "9";
    } catch(e56) {
    }
}
const v57 = new F38("f", "callee");
new F38(-304.7179060163352, "f");
new F38(v57, "9");
const v60 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v65 = Array(19793);
        const o68 = {
            [8.946504243780264e+307]: v65,
            get g() {
                return v65;
            },
        };
        for (const v69 of v65) {
        }
        [v65,v65,v65];
        [[]] >= Uint16Array;
    } catch(e75) {
        [];
        v60.findLastIndex;
    }
}
new F61();
