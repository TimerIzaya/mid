function f0() {
}
const v3 = new Array(129);
const v5 = new Set();
const v6 = [15598,-46734,-4294967296];
const v7 = [25666];
const v8 = [4294967297,429151358,14347,-1869665667,-4294967297];
const v11 = new Int16Array(2);
new Float64Array(v11);
new Uint8Array(v5);
v6[137] = Float64Array;
delete v7[f0];
Object.defineProperty(v8, "h", { configurable: true, value: Array });
v3["reduce"](Array);
try { ("reduce").trimRight(); } catch (e) {}
const v33 = Symbol.iterator;
const o42 = {
    [v33]() {
        let v35 = 10;
        const o41 = {
            next() {
                v35--;
                const v39 = v35 == 0;
                const o40 = {
                    "done": v39,
                    "value": v35,
                };
                return o40;
            },
        };
        return o41;
    },
};
async function f46(a47, a48, a49) {
    for (let v50 = 0; v50 < 10; v50++) {
    }
    return BigUint64Array;
}
