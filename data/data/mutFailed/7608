const v0 = [-3.230776829551389e+307,0.3701178659171571,0.09404625801656563,NaN,1.7976931348623157e+308];
[62953.833583958214,-1000000000.0,856.2116631273739,-2.220446049250313e-16,Infinity,-1000000000.0,-8.661904209259006e+307];
[0.9730143707731017,782888.2857183872,1e-15,0.0,0.0,-0.0,-Infinity,-916.7264569364428];
const o4 = {
};
o4.execution = gc;
const v5 = gc(o4);
new Uint8ClampedArray(3279);
new Uint16Array(7);
new BigInt64Array(256);
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    class C17 {
    }
    for (let i20 = 10, i21 = 10;
        (() => {
            i20++;
            const v23 = i20 < i21;
            i21 %= i20;
            const v24 = this.h;
            throw C17;
            new C17(Uint8ClampedArray, ...v0, 256 >> v24, C17);
            return v23;
        })();
        (() => {
            const v29 = [601759695];
            const v30 = [1073741824,1073741823,1376142744,1073741825];
            function f31(a32, a33, a34, a35) {
                a35 - a35;
                function f37() {
                    return a34;
                }
                function f38(a39, a40) {
                    return a39;
                }
                new BigInt64Array(257);
                new BigUint64Array(v5);
                try { f38(); } catch (e) {}
                f38(v30, C17);
                try { v30["find"](..."find", a35, ...v29, ...v30); } catch (e) {}
                return C17;
            }
            for (let v50 = 0; v50 < 10; v50++) {
                f31(v50, f31, i20, v50);
            }
        })()) {
    }
}
new F15();
new F15();
