const v1 = new Map();
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(a4, F2); } catch (e) {}
    a4.length = a4;
    try {
        this.d = a5;
    } catch(e8) {
    }
    try {
        this.g = Map;
    } catch(e9) {
    }
    try {
        this.a = a4;
    } catch(e10) {
    }
}
const v11 = new F2(F2, v1);
const v12 = new F2(Map, v11);
const v13 = new F2(v11, v12);
const v14 = v13?.g;
try { new v14(); } catch (e) {}
function f16() {
    new Int8Array(1073741823);
    const v20 = [1073741824,1073741823,1376142744,1073741825];
    function f21(a22, a23, a24, a25) {
        function f26() {
            try {
                v20.forEach();
            } catch(e28) {
                const v30 = new Float32Array(a22, a24);
                function f31() {
                    return v20;
                }
                Object.defineProperty(v30, "h", { configurable: true, enumerable: true, get: f31 });
            }
            return f26;
        }
        f26();
        eval();
        %OptimizeFunctionOnNextCall(f26);
        return a25;
    }
    return Map;
}
f16.name;
4096 - 4096;
const v42 = ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
v42 < v42;
class C44 {
    get e() {
        ~-7673;
    }
}
new Float32Array(127);
new Uint8ClampedArray(117, -1512594807n);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v60 = new Int16Array(255);
16 != 16;
const v66 = new Uint8ClampedArray(16);
try { v66.with(-12n, f16); } catch (e) {}
Float32Array.f = Float32Array;
const v70 = new Float32Array(1470);
try { v70.toSorted(v60); } catch (e) {}
const v72 = v70.join(v66);
v72[23529];
-173;
BigUint64Array.BYTES_PER_ELEMENT;
new BigUint64Array();
function F79(a81, a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } finally {
    }
    function F85(a87, a88) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v89 = new F85();
    const v93 = v72.blink().strike().replace(19793, v89);
    class C94 {
    }
    class C95 extends C94 {
        [v72] = C94;
    }
    const v96 = new C95();
    const t87 = v96.getPrototypeOf;
    const v98 = new t87();
    const v99 = v98.propertyIsEnumerable(v93);
    v99 || v99;
    const v101 = this?.constructor;
    try { new v101(); } catch (e) {}
    a83 + a83;
    this.h = a82;
}
try { F79(); } catch (e) {}
new F79();
const v106 = new F79(v66, F79);
const v107 = new F79(BigUint64Array, v106, 16, -7.981664924203587e+307, v106, Uint8ClampedArray);
v107.d = v107;
const o108 = {
};
o108.c = o108;
-522.1393553916671 - -522.1393553916671;
class C112 {
    [o108] = -522.1393553916671;
    #a = 1.185961373472971e+308;
}
const v113 = new C112();
const v114 = v113?.constructor;
try { new v114(); } catch (e) {}
const v116 = o108.constructor;
v116.freeze();
const v119 = 1922 % 1922;
const v120 = v119 == v119;
for (let v121 = 0; v121 < 25; v121++) {
    const o122 = {
    };
    o122.constructor;
    const v125 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    class C126 {
        #p(a128, a129, a130, a131) {
        }
        constructor(a133, a134) {
            const v135 = this.constructor;
            try { new v135(); } catch (e) {}
            try {
                v125.#p();
            } catch(e138) {
            }
        }
    }
    v121 ^ v121;
    function f140() {
        return f140;
    }
    function f141(a142, a143, a144, a145) {
        try { new a144(); } catch (e) {}
        function f147() {
            return v119;
        }
        f147.h = f147;
        const v148 = f147.length;
        ~v148;
        const v150 = -v148;
        v150 / v150;
        v148 | v148;
        const v154 = f140()?.constructor;
        v154.d = v154;
        let v155;
        try { v155 = v154(); } catch (e) {}
        let v156;
        try { v156 = v155.bind(); } catch (e) {}
        v156.bind();
        v155.e = v155;
        const v158 = v154 * v120;
        v158 >> v158;
        v158 - v158;
        function f161(a162, a163, a164, a165) {
            const v166 = a163++;
            class C167 {
                static [v166];
            }
            return f161;
        }
        const v168 = typeof f147;
        v168.italics();
        v168 === "uv4";
        v155(v116);
        const v174 = new Int8Array(C112, a145, a144);
        const v175 = v174.entries();
        let v176;
        try { v176 = v175.next(); } catch (e) {}
        v176.b = v176;
        const v177 = v175.next(1.185961373472971e+308, f140, o108, v176, v176);
        v177.b = v177;
        a143.f = 1922;
        [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        return v121;
    }
    for (let v179 = 0; v179 < 5; v179++) {
        f141(v179, v116, v116, 1922);
    }
}
