let v0 = -2.220446049250313e-16;
let v2 = 0.45897870983631983;
class C3 {
    static get f() {
        super[this] = C3;
        let v5 = this > v0;
        this[v0] = this;
        ({"b":v0,"e":v5,"f":v2,} = this);
        return this;
    }
    static [-65537];
    static d = -65537;
    static [C3];
    #h = v0;
}
const v9 = new C3();
const v10 = new C3();
new C3();
function f12() {
    return v10;
}
new Uint8ClampedArray(1024);
new Uint8Array(3312);
class C21 {
}
const v22 = new C21();
let v24 = 1922 + 1922;
const v25 = --v24;
for (let v26 = 0; v26 < 25; v26++) {
    const v27 = v26 - v26;
    function f28() {
    }
    const v29 = [1073741824,1073741823,1376142744,1073741825];
    function f30(a31, a32, a33, a34) {
        function f35() {
            return a31;
        }
        const v36 = a32();
        const v39 = new Int8Array(a31, v25, v24);
        try { v39.entries(); } catch (e) {}
        [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        [0.5067933585829714,1.0,-930004.7663294855,2.6834769420801777e+307,-0.0,0.8576192242870103,1000000.0,-3.341757808913002];
        v29[3] ^= v25;
        try {
            try {
                const t45 = "symbol";
                t45.toString = v22;
            } catch(e43) {
            }
        } catch(e44) {
            [e44,e44,a33,v27];
        } finally {
            for (let v46 = 0; v46 < 5; v46++) {
            }
        }
        [-2.2250738585072014e-308,-0.0,3.0,743.9950267369297];
        [v36];
        let v50 = BigUint64Array * Int8Array;
        v50--;
        return v36;
    }
    for (let v52 = 0; v52 < 10; v52++) {
        f30();
    }
}
new Int32Array(0);
function f59(a60, a61) {
    const o63 = {
        [8.946504243780264e+307]: a61,
        get g() {
            return a61;
        },
    };
    return o63;
}
const v64 = f59(8.946504243780264e+307, 2.0);
f59(-9.389413203732939e+306, v0);
v64[v9.isConcatSpreadable];
