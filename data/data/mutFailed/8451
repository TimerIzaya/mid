const v2 = new Int8Array();
v2.buffer;
const v5 = (~0).constructor;
function f6() {
    function f7(a8) {
        +0;
        for (let i11 = 0; i11 < 1;) {
            function F16(a18, a19, a20) {
                if (!new.target) { throw 'must be called with new'; }
            }
        }
        return 0;
    }
    return f7;
}
function f21(a22) {
    v5 * a22;
}
Object.defineProperty(v5, "toString", { writable: true, enumerable: true, get: f6, set: f21 });
v5(v5).toFixed();
const v27 = [1073741824,1073741823,1376142744,1073741825];
try { v27[0](); } catch (e) {}
const v29 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v30 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
class C31 {
    constructor(a33) {
        function f34(a35, a36) {
            a35[5];
        }
        f34(v30);
        f34(v29);
        f34(a33);
    }
}
const v41 = new C31(v29);
function f42(a43, a44) {
    function F45(a47, a48, a49, a50) {
        if (!new.target) { throw 'must be called with new'; }
        const v51 = this?.constructor;
        try { new v51(this, a48, this, this); } catch (e) {}
        const v55 = new Int16Array(2183);
        v55[5];
        function f57() {
            const o61 = {
                __proto__: 3.4890473589784586e+307,
                o(a60) {
                },
            };
        }
        f57();
        f57();
        f57();
    }
    return F45;
}
v41.constructor = f42;
v41.constructor;
new Uint16Array(0);
([128,5,268435456,127,4096]).pop().d;
function F72() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v74 = 0; v74 < 1000; v74++) {
        const v77 = ("p" + v74).fontcolor();
        let v78;
        try { v78 = v77.trimLeft(this); } catch (e) {}
        v78[12];
    }
}
new Int8Array(1635);
let v81 = 0;
do {
    const o85 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o85);
    v81++;
} while (v81 < 2)
const o96 = {
    toString(a93, a94) {
        new Date(Uint16Array);
        return this;
    },
};
new Uint32Array([1524942359,268435439,8,1,256,-11]);
([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(-1073741824, -27205);
let v103 = 6;
v103--;
const v106 = new Uint8Array(v103);
v106.valueOf = f42;
function F107(a109, a110, a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(this, this, a109, a111); } catch (e) {}
    a111 * a111;
    try {
        this.e = v103;
    } catch(e115) {
    }
    try {
        const v117 = [Reflect];
        const o118 = {
            __proto__: Reflect,
            "e": v117,
        };
        this.c = a110;
    } catch(e119) {
    }
}
F107.length;
const o122 = {
    "maxByteLength": 1293466293,
};
function f123() {
}
function f126() {
    return f123;
}
function f127(a128, a129) {
    const o132 = {
        get d() {
            Object.defineProperty(this, 10000, { enumerable: true, get: f123 });
            return new.target;
        },
        __proto__: a129,
        "b": a128,
        "c": f126,
        ...9007199254740991n,
        ...a129,
        "g": 9007199254740991n,
        ...f123,
        "d": -1010928051n,
        ...9007199254740991n,
    };
    return o132;
}
f127(-1010928051n, 9007199254740991n);
const v134 = [-1000.0,1000000000.0];
const v135 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
function f139(a140, a141) {
    const o142 = {
        [33062n]: 8n,
        __proto__: v135,
        [37369]: a141,
        [a140]: a140,
        ...a140,
        5: v134,
        ...v134,
    };
    return o142;
}
new F107(1635, v103, 1635, v103);
new F107(1635, v103, 0, v103);
const v145 = new F107(1635, 0, 1635, 1635);
v145.e;
try { Math.expm1(v106); } catch (e) {}
Math.acos(1);
new Float32Array();
class C153 {
}
const v154 = new C153();
function F155(a157, a158) {
    if (!new.target) { throw 'must be called with new'; }
    ~a158;
    const v160 = this.__proto__;
    const v161 = v160?.constructor;
    try { new v161(v154); } catch (e) {}
    v160.toLocaleString();
}
