class C3 {
    constructor(a5, a6) {
        function f7(a8, a9) {
            a5 = a6;
            return C3 >>= a6;
        }
        a5.valueOf = f7;
        try { a6.repeat(268435456, a5); } catch (e) {}
    }
    [-1988695251];
    get f() {
        -2.0432509966925005 * this;
        new BigUint64Array();
        -16268 < 9;
        const v22 = new BigUint64Array(3375);
        let [v23,,v24,...v25] = v22;
        const v26 = -2.0432509966925005 + 268435456;
        Math.acosh(-2.0432509966925005);
        ~v26 >> this;
        return -16268;
    }
}
C3.repeat = -1988695251;
const o31 = {
    ...this,
};
function f32(a33, a34) {
    const o40 = {
        __proto__: a33,
        p(a36, a37) {
            48752008 ^ this;
            return this;
        },
    };
    return o40;
}
const v41 = new C3(C3, -1988695251);
v41.for = 268435456;
const v42 = new C3(v41, v41);
const v43 = new C3(v42, C3);
class C44 extends C3 {
    #d;
    static [C3] = v43;
    constructor(a46, a47) {
        a46.m = -1988695251;
        Object.defineProperty(a47, "repeat", { configurable: true, enumerable: true, value: -1988695251 });
        super(v43, a47);
        const v48 = this / v43;
        v43.__proto__;
        try { a46.for(); } catch (e) {}
        try { a46["m"](v48); } catch (e) {}
        function F53(a55, a56, a57) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F53();
        new Uint16Array(Uint16Array);
        try {
            v43.length = C3;
        } catch(e62) {
            function F63() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v65 = [];
            function F66() {
                if (!new.target) { throw 'must be called with new'; }
                const v68 = this.constructor;
                try { new v68(); } catch (e) {}
                try {
                    this.d = v65;
                } catch(e70) {
                    const v72 = new Set();
                    v72[v72];
                    function f74(a75) {
                        return f74;
                    }
                }
            }
            new F66();
        }
    }
}
const v77 = new C44(v43, v42);
v77.repeat = o31;
const v78 = new C44(v41, v77);
v78.m = -1988695251;
new C44(v78, v41);
const v85 = new Float64Array();
function f86(a87) {
    let v88;
    try { v88 = a87(a87); } catch (e) {}
    v88 === a87;
    return -1000000000000.0;
}
v85.toString = f86;
("p").lastIndexOf(v85);
