const v1 = -Infinity;
const v3 = 5493 >>> 5493;
const v4 = [10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163];
Date.parse(v4);
class C8 {
    set c(a10) {
        a10[this] = this;
        super[v1] = -9;
        super.f = a10;
        let v11;
        try { v11 = a10.splice(-9, this, v1, a10, this); } catch (e) {}
        try { v11.m(v11); } catch (e) {}
        super.b;
    }
    [-9] = -9;
    4294967295 = -9007199254740991;
    #c = -9007199254740991;
}
new C8();
class C18 {
    g;
    constructor() {
        const v20 = this.constructor;
        try { new v20(); } catch (e) {}
    }
}
new C8();
new C8();
new Date();
const v27 = new Float32Array(v3);
v27[5] ||= 6;
function f30() {
    return 256;
}
new Float64Array(2691);
new Int16Array(199);
const v42 = new Float32Array(15);
new Uint8Array(268435440);
const v47 = [3.0,-533.6058053075066,-3.0,-Infinity,9.77162142398339,-6.974865860269324,0.0,-1.7976931348623157e+308,1000000.0];
function f48() {
    const v49 = new v42();
    const o50 = {
        "call": Date,
        "defineProperty": Date,
        "deleteProperty": Date,
        "get": Date,
        "getOwnPropertyDescriptor": Date,
        "has": Date,
        "isExtensible": Date,
        "ownKeys": Date,
        "preventExtensions": Date,
        "setPrototypeOf": Date,
    };
    new Proxy(v4, o50);
    return v49;
}
v47.constructor = f48;
new BigInt64Array([]);
new BigInt64Array(5);
function F58() {
    if (!new.target) { throw 'must be called with new'; }
}
class C60 {
    constructor(a62, a63, a64) {
        a63.e = a63;
        let v66 = Int32Array;
        const v67 = new v66(2917);
        v67["lastIndexOf"](v66--, v66, ..."lastIndexOf", 10);
        class C73 extends v47.constructor {
        }
        new C73();
        try { v1(); } catch (e) {}
        function F76() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F79(a81, a82, a83, a84) {
            if (!new.target) { throw 'must be called with new'; }
            this.c = a81;
        }
    }
}
new C60(F58, C60);
