function f3() {
    return 127;
}
const v8 = new WeakSet();
new Symbol(6);
class C12 extends f3 {
    #h;
    #g;
    m(a14, a15, a16) {
        return a16;
    }
    static {
        try {
            Symbol(6);
        } catch(e22) {
        }
        try {
            v8.#g ^= 6;
        } catch(e23) {
        }
    }
}
new C12();
new C12();
new C12();
let v27 = "-185650492";
function f29(a30) {
    const o31 = {
        "g": v27,
        "f": a30,
        "h": "E",
    };
}
f29();
f29();
2 % 2;
3 | 3;
const v39 = new f29();
const v41 = new Set();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a44;
    } catch(e46) {
        for (let [v47,v48] of a44) {
            class C49 {
            }
            v27 = e46;
            v47 ^= v39;
            C49 != a44;
            const v51 = new C49();
            const t51 = v51.g;
            t51.NEGATIVE_INFINITY = 6;
        }
    }
    try {
        this.h = v41;
    } catch(e54) {
        this.toString();
        ("E")[2555];
        for (let v58 = 0; v58 < 25; v58++) {
            const v59 = [601759695];
            const v60 = [1073741824,1073741823,1376142744,1073741825];
            function f61(a62, a63, a64, a65) {
                -a62;
                a64[3] + 2;
                try { v60["58572"](..."58572", a65, ...v59); } catch (e) {}
            }
            for (let v71 = 0; v71 < 10; v71++) {
                f61(v71, v71, v60);
            }
        }
    }
    try {
        const v73 = v41[this];
        try {
            new F42(v73, -2046072084n);
        } catch(e76) {
        }
        const o78 = {
        };
        const v80 = new SharedArrayBuffer(1024, o78);
        new BigInt64Array(v80);
        this.b = Set;
    } catch(e83) {
    }
}
new F42();
new F42();
[65537,268435441,63298,-5,1235122603];
[128,215394418];
