function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 58887;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8, a9) {
    a8.g;
    const o27 = {
        "b": v6,
        "h": v6,
        "f": a9,
        "d": F0,
        "a": v4,
        [a8]: f7,
        [a9](a12, a13) {
            a9 & a13;
            for (const v15 in v5) {
                v5 || v15;
            }
            try { a8.valueOf(); } catch (e) {}
            new Float32Array(256);
            new Int16Array(330);
            new Uint32Array(255);
            return F0;
        },
    };
    return o27;
}
f7(v6, v5);
f7(v6, v6);
f7(v5, v6);
9007199254740992n << 9007199254740992n;
let v34 = -4294967295n;
v34--;
const v36 = [];
try { v36.group(v5); } catch (e) {}
WeakMap.length;
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = a45?.toLocaleUpperCase;
    try { new v49(); } catch (e) {}
    a46[2];
    a48 == a48;
    const v53 = this.constructor;
    try { new v53(a48, v36); } catch (e) {}
    a46[2];
}
new F43("ceil", "pop", "ceil", "isConcatSpreadable");
new F43("ceil", "isConcatSpreadable");
