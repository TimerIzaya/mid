function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 1073741825;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8) {
    const v9 = a8?.__defineSetter__;
    try { new v9(a8, a8); } catch (e) {}
    const o17 = {
        __proto__: v4,
        set g(a12) {
            let v13 = 0;
            do {
                v6[this] = F0;
                super.h = this;
                v13++;
            } while (v13 < 5)
        },
        "a": F0,
    };
    o17.g;
    return o17;
}
const v19 = f7(v6);
f7(v6);
const v21 = f7(v5);
v21.d = v21;
const v23 = new Map();
const v24 = [0.7605638125872468];
try { v24.concat(v5); } catch (e) {}
const v26 = [-9.749234407162461e+307,483380.49818316964,8.747792166401833,0.766063595781572,-3.0];
const v27 = [315399.4401805259];
try { v27.copyWithin(v19, v19); } catch (e) {}
v27[0] = v27;
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    try { new v31(); } catch (e) {}
}
let v33;
try { v33 = F29.bind(f7); } catch (e) {}
try { v33.apply(v23, v23); } catch (e) {}
const v35 = new F29();
const v36 = v35?.constructor;
try { new v36(); } catch (e) {}
v35.length = v35;
v27.length;
new F29();
f7(Map);
%PrepareFunctionForOptimization(f7);
f7(Map);
f7(Map);
%OptimizeFunctionOnNextCall(f7);
f7(Map);
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.__lookupSetter__;
    try { new v48(a47); } catch (e) {}
}
try { F44.call(v35); } catch (e) {}
const v51 = new F44();
v51.length = v51;
const v52 = v51?.constructor;
v52.length;
let v54;
try { v54 = new v52(v23, v5); } catch (e) {}
const v57 = [];
function F59() {
    if (!new.target) { throw 'must be called with new'; }
    let v61 = 9223372036854775807;
    !(v61 < v61);
    Date.prototype = Date;
    const v65 = Date.toString(F59);
    const v67 = v65[23]?.trimRight;
    const v68 = v67?.toString;
    try { new v68(); } catch (e) {}
    try { new v67(); } catch (e) {}
    const v71 = v65.replaceAll(v35, -37859n);
    v71[30] = v71;
    Uint32Array.length = Uint32Array;
    const v73 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v73[2] = v73;
    const v74 = v73[2];
    v74 * v74;
    v74 * v74;
    839612.5677247904 & 839612.5677247904;
    const v80 = new Set(v57);
    try { v80.clear(); } catch (e) {}
    let v82;
    try { v82 = v80.add(v80); } catch (e) {}
    class C83 {
    }
    const v85 = Array(C83);
    for (let v86 = 0; v86 < 25; v86++) {
        "p" + v86;
        const v89 = v85.includes;
        try { v89(); } catch (e) {}
        const v93 = new BigInt64Array(2325);
        for (const v94 in v93) {
        }
    }
    try { v82.keys(); } catch (e) {}
    const v96 = v80.add;
    v96.g = v96;
    v96.f = v96;
    try { v96(v73); } catch (e) {}
    try { ("delete").localeCompare(v80); } catch (e) {}
    const v100 = v80["delete"](839612.5677247904);
    !v100;
    Math.max(this);
    Math.tanh(v61);
    v61 ^ v19;
    v61--;
    this | -1661115828;
    const v111 = v100 || v100;
    !v111;
    v111 && v111;
    const v114 = v111 || v111;
    !v114;
    const v116 = v114 && v114;
    !v116;
    const v118 = v111 && v111;
    const v119 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    try {
        v85.forEach(f7, v119);
    } catch(e121) {
    }
    const v122 = v118 || v118;
    const v123 = v122 || v122;
    v123 && v123;
    const o126 = {
    };
    o126.c = o126;
    o126.b = o126;
    let v128;
    try { v128 = new Array(Array); } catch (e) {}
    return v128;
    let {"f":v129,"h":v130,...v131} = v54;
    v130 && Uint32Array;
    +v128;
    const o134 = {
        "apply": f7,
        "call": f7,
        "construct": Array,
        "defineProperty": f7,
        "deleteProperty": Array,
        "getOwnPropertyDescriptor": f7,
        "getPrototypeOf": Date,
        "has": f7,
        "isExtensible": Array,
        "ownKeys": f7,
        "preventExtensions": f7,
        "set": Date,
    };
    new Proxy(v85, o134);
    v128[0];
    try { Array(v61); } catch (e) {}
    try { ("getPrototypeOf").trimEnd(); } catch (e) {}
    const v141 = ("getPrototypeOf").blink();
    const v142 = v141[28];
    const v143 = v142.strike();
    try { v143.split(v143, v116); } catch (e) {}
    v143[4] = v143;
    const v145 = v141.strike(591114.0785999324);
    v145[29] = v145;
    const v146 = v145?.search;
    try { v146.call(v19); } catch (e) {}
    try { new v146(v73); } catch (e) {}
    const v149 = v145.replace(19793, v51);
    try { v149.slice(4, v23); } catch (e) {}
    v149[11] = v149;
    class C153 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    try { C153.bind(Array); } catch (e) {}
    let v155;
    try { v155 = new C153(); } catch (e) {}
    const v156 = v155?.hasOwnProperty;
    try { new v156(v26); } catch (e) {}
    class C158 extends C153 {
        ["getPrototypeOf"] = C153;
    }
    new C158();
    const v160 = new C158();
    const v161 = v160?.constructor;
    try { new v161(); } catch (e) {}
    try { v160.getPrototypeOf(); } catch (e) {}
    const t192 = v160.constructor;
    new t192();
    const v166 = new C158();
    const v167 = v166?.constructor;
    try { new v167(); } catch (e) {}
    try { v166.getPrototypeOf(); } catch (e) {}
    const v170 = v166.getPrototypeOf;
    try { new v170(); } catch (e) {}
    v170.length = v170;
    const v173 = BigUint64Array.of();
    try { v173.entries(); } catch (e) {}
    try { v173.entries(); } catch (e) {}
    new BigUint64Array();
    new Int8Array();
    const v180 = Uint8Array.length;
    v180 + v180;
    const v182 = new C158();
    const v183 = v182.getPrototypeOf;
    let v184;
    try { v184 = v183.toString(); } catch (e) {}
    try { v184.italics(); } catch (e) {}
    const v186 = new v183();
    v186.a = v186;
    const v187 = v186.getPrototypeOf;
    v187 % v187;
    const v189 = v182.getPrototypeOf;
    try { new v189(); } catch (e) {}
    let v191;
    try { v191 = new v189(); } catch (e) {}
    v191.getPrototypeOf = v191;
    v191.getPrototypeOf = v191;
    const v192 = new C158();
    const v193 = v192?.getPrototypeOf;
    try { new v193(); } catch (e) {}
    let v195;
    try { v195 = new v193(); } catch (e) {}
    try { v195.toString(); } catch (e) {}
    const v197 = v192.getPrototypeOf;
    let v198;
    try { v198 = new v197(); } catch (e) {}
    v198.getPrototypeOf = v198;
    try { v197(); } catch (e) {}
    let v200;
    try { v200 = new v197(); } catch (e) {}
    try { v200.hasOwnProperty(v19); } catch (e) {}
    v200.getPrototypeOf;
    try { v200.propertyIsEnumerable(v149); } catch (e) {}
    const v204 = v200?.constructor;
    v204.d = v204;
    try { v204.call(v142); } catch (e) {}
    let v206;
    try { v206 = new v204(v141, this, 4); } catch (e) {}
    try { v206.__defineSetter__(v74, "delete"); } catch (e) {}
    v206.getPrototypeOf;
    const v209 = v206.getPrototypeOf;
    v209 >>> v209;
    try { v206.constructor(); } catch (e) {}
    const v212 = v192.constructor;
    let v213;
    try { v213 = new v212(F59, v118); } catch (e) {}
    const v214 = v213?.constructor;
    v214.prototype = v214;
    const v215 = v213?.getPrototypeOf;
    try { new v215(); } catch (e) {}
    v215.h = v215;
    const v217 = Array(19793);
    v217.f = v217;
    for (const v218 of v217) {
    }
}
const v219 = new F59();
v219.length;
const v221 = new F59();
v221.length;
v221.length = v221;
