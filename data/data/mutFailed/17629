[-568302.3986358212,-2.862951998729286e+307,-Infinity,-3.0];
[-1.3794250860039892,-698912.7605967766,1000000000.0,Infinity,229314.32362360763,471034.18614498177,-1000000000000.0,6.789828713041263e+307,1.7976931348623157e+308];
[-508.1550552192589,2.0,1000.0,2.2250738585072014e-308];
function f6() {
    return f6;
}
class C7 extends f6 {
}
class C8 extends C7 {
}
function f10(a11, a12, a13, a14) {
    try { a11(); } catch (e) {}
    a12 & a12;
    const v17 = 3 | C8;
    v17 * v17;
    const v19 = a11 / a11;
    const v20 = a12 < a12;
    const o24 = {
        n(a22, a23) {
            return v20;
        },
    };
    return v19;
}
new Float32Array(Float32Array);
new Uint32Array(16);
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = a35.push();
    const v40 = this.__defineGetter__;
    try { v40.call(v39); } catch (e) {}
}
new Uint32Array(1587);
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
const t36 = 536870912;
const v45 = new t36();
const v46 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v47 = 0; v47 < 5; v47++) {
    function f48() {
        try {
            v46.forEach();
        } catch(e50) {
            e50.a = e50;
            const v51 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
            function F52(a54, a55, a56, a57) {
                if (!new.target) { throw 'must be called with new'; }
                function f58(a59, a60, a61) {
                    const v62 = v51.__proto__;
                    try { v62.findLastIndex(this); } catch (e) {}
                    return a59;
                }
                f58(a56, a56, a56);
            }
            e50.a = v45;
            class C65 {
            }
            const v66 = new C65();
            function f67(a68, a69) {
                const o70 = {
                    [a69]: v66,
                };
                return o70;
            }
            f67();
            f67(f67, 3);
            e50.a = e50;
        }
        const v75 = new Float64Array(128);
        const v77 = new Int16Array(v75, 128, 128);
        const t71 = v77.constructor;
        new t71(v75);
        const v81 = (1073741824).toPrimitive;
        v81.description;
        Symbol.for();
        return v81;
    }
    f48();
    %OptimizeFunctionOnNextCall(f48);
}
