class C3 {
    #p(a5) {
        const o17 = {
            valueOf() {
                let v7;
                try { v7 = this.from(); } catch (e) {}
                const t6 = "global";
                t6[v7] = "global";
                new Uint16Array(512);
                new Int8Array(1024);
                new Uint32Array(4);
                return 0.6148477733586615;
            },
        };
        return a5;
    }
}
const v18 = new C3();
const v19 = new v18();
const v20 = new C3();
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = "global";
    } catch(e27) {
    }
    try {
        this.b = a24;
    } catch(e28) {
    }
}
const v29 = new F21(v18, v19, v18, "global");
const v30 = new F21(v29, v19, v29, v19);
const v31 = new F21(v29, v30, "global", v30);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        if (a36) {
            this[a36] = 0.6148477733586615;
        } else {
            this[Symbol.isConcatSpreadable] = v31;
        }
        this.a = v30;
    } catch(e40) {
    }
    try {
        this.e = a35;
    } catch(e41) {
    }
}
const v42 = new F32("global", 456237.33352630376, v31, v31);
const v43 = new F32(v42, v42, F32, C3);
new F32(v19, v20, v18, v29);
const v46 = new Map();
let v53 = undefined;
const o61 = {
    ...v46,
    ...v46,
    ...v29,
    __proto__: v43,
    ...v29,
    ...C3,
    "d": v46,
    /*
    __proto__: v46,
    */
    [24560](a55, a56, a57) {
        super[591114.0785999324];
        v53 = Map;
    },
};
v53 = o61;
[v46];
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    new Date();
    const o71 = {
    };
    o71.e = 19793;
    const v73 = Array(19793);
    for (const v74 of v73) {
    }
    const v75 = [v73,v73,v73,v73,v73];
    new BigUint64Array();
    [];
    for (let v80 = 0; v80 < 50; v80++) {
    }
    const v82 = [[v75,v75,v75]];
    Object.defineProperty(v20, 2540, { enumerable: true, get: Array });
    try { this.setBigInt64(Date, o61); } catch (e) {}
    v82 ** -1000000000000.0;
    !-1000000000000.0;
    Math.sign(-1000000000000.0);
    +v82;
    v82 >= Uint16Array;
}
new F64();
new F64();
