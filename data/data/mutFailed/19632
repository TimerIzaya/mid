function f0() {
    const o19 = {
        "b": -1.7976931348623157e+308,
        ..."-256",
        "g": "-256",
        "c": -1.7976931348623157e+308,
        536870889: -1.7976931348623157e+308,
        ["-256"]: 5.0,
        m(a5, a6) {
            const v7 = a5?.h;
            function F8(a10, a11, a12, a13) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a5;
                } catch(e14) {
                }
                try {
                    a5.d = a11;
                } catch(e15) {
                }
            }
            const v16 = new F8(-1.7976931348623157e+308, F8, "-256", F8);
            const v17 = new F8(v16, "-256", v16, a6);
            new F8(v17, v7, v7, 5.0);
            return v16;
        },
    };
    return o19;
}
f0();
const v21 = f0();
const v22 = f0();
v22[0] = v22;
class C23 extends f0 {
    get f() {
        f0 & this;
        %VerifyType(v21);
        /(?!\1(a\1)\1)\1/di;
        /[xyz]/ud;
        const v28 = /(x)(x)(x)\2(a||bc)/guis;
        for (let v29 = 0; v29 < 32; v29++) {
            v28["p" + v29] = v29;
        }
        return C23;
    }
}
new C23();
const v33 = new C23();
v33[0];
const v35 = new C23();
v35.g;
const v37 = /[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/gudmsy;
v37.dotAll = v37;
/\w|\d/gds;
/\P{Any}/gu;
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
class C43 extends Map {
}
try { C43.apply(Array, Array); } catch (e) {}
class C46 {
    static {
        this.name = this;
        const v48 = [601759695];
        const v49 = [1073741824,1073741823,1376142744,1073741825];
        function f50(a51, a52, a53, a54) {
            let v55;
            try { v55 = new a51(); } catch (e) {}
            const v56 = v55?.constructor;
            try { new v56(); } catch (e) {}
            let v58 = a53 << a53;
            v58++;
            function f60() {
                return f60;
            }
            const v62 = new Int8Array();
            const v65 = BigUint64Array * 536870887;
            const v66 = v65 ** v65;
            try { new Number(v62); } catch (e) {}
            Number.isNaN(v66);
            function f70(a71, a72) {
            }
            try { f70(); } catch (e) {}
            function f74(a75, a76) {
                const v77 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
                v77[0];
                class C79 {
                }
                try { new C79(); } catch (e) {}
                const v82 = Symbol.replace;
                Symbol.for(v82.description);
                C79[v82] = v77;
                return f74;
            }
            const v86 = f74?.constructor;
            try { new v86(v65); } catch (e) {}
            %PrepareFunctionForOptimization(f74);
            f74();
            %OptimizeFunctionOnNextCall(v55);
            f74();
            const v90 = v62.buffer;
            const v91 = v90.__defineGetter__;
            v91.e = v91;
            try { v91(); } catch (e) {}
            Object.defineProperty(v90, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f60);
            let v94;
            try { v94 = v49["find"](..."find", a54, ...v48); } catch (e) {}
            const o95 = {
            };
            o95.d = o95;
            o95.e = this;
            o95.e = this;
            !(v94 <= a53);
        }
        for (let v98 = 0; v98 < 5; v98++) {
            f50(this, v98, v98);
        }
    }
}
C46.length = C46;
