const v1 = new WeakMap();
function f2(a3, a4) {
    const o36 = {
        __proto__: v1,
        o(a6) {
            v1[3] = a6;
            function F7() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v10 = new F7();
            v10.constructor.bind();
            delete v1[4];
            const v16 = -2147483647 & this;
            0.4890055133608564 || 0.4890055133608564;
            class C21 {
                set e(a23) {
                    [-4.0,-3.0,-7.745906537435259,-1.2266228113922306e+308,-Infinity,-2.0,-2.0,1e-15,-694511.6819848374,-2.0] ^ "-792442332";
                    Math.fround();
                    Math.ceil();
                }
                m(a31) {
                }
                e;
            }
            const v32 = new C21();
            [v32,"number","R"];
            const v34 = Math.atanh(v16);
            ~v16;
            return v34;
        },
    };
    return o36;
}
const v37 = f2(f2, v1);
~3145;
const o41 = {
    "maxByteLength": 3145,
};
o41.maxByteLength = o41;
128 >> 128;
const v44 = new SharedArrayBuffer(128, o41);
v44.byteLength = v44;
Float32Array.prototype;
const v47 = new Float32Array(v44);
v47[9] = v47;
const v48 = f2(v37, f2);
try { v48.o(Float32Array); } catch (e) {}
try {
    -2119616940 & -2119616940;
    Array(-2119616940);
} catch(e54) {
}
const v55 = f2(v37, WeakMap);
v55[3] = v55;
50521 + 50521;
[6,255,7,4294967297];
[-256,-939852505,18712,605228519,-1507769426,1312838848];
[1466339457,5,-4294967295,-1800440587,-14523,-3054,11,-65536];
for (let v63 = 0; v63 < 25; v63++) {
}
function f64(a65, a66) {
}
const v68 = new Date();
try { v68.setTime(WeakMap); } catch (e) {}
v68.getMonth();
const v73 = new Float32Array();
const v75 = new Uint8Array(268435440);
const v78 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v79 = -4294967297n;
v79--;
const v81 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v82 = [601759695];
v82[0] = v82;
function f84(a85, a86, a87, a88) {
    function f89() {
        try {
            v78.forEach(a86);
        } catch(e93) {
            e93.f = e93;
        }
        const v94 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v95 = v94?.entries;
        try { new v95(); } catch (e) {}
        const o102 = {
            toString(a98, a99) {
                return (a88 && a86) <= v94;
            },
        };
        let v103 = -268435456;
        v103++;
        const o123 = {
            "c": v79,
            [522675525n](a106, a107) {
            },
            "c": v82,
            valueOf(a109, a110) {
                return this;
            },
            [v79](a112, a113, a114, a115) {
            },
            "maxByteLength": -4294967295,
            "arguments": v81,
            ..."Vre",
            valueOf(a117, a118) {
                return this;
            },
            4: "Vre",
            "type": "Vre",
            toString(a120, a121, a122) {
                return v81;
            },
            5: -4294967295,
            6: v103,
        };
        const v124 = o123?.__lookupGetter__;
        try { new v124(a88); } catch (e) {}
        return a85;
    }
    f89();
    %OptimizeFunctionOnNextCall(f89);
    return v82;
}
for (let v127 = 0; v127 < 5; v127++) {
    -v127;
    f84();
}
new Uint8ClampedArray(129);
v75[6] = v73;
