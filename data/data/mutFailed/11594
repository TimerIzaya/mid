const v1 = new Date();
const v4 = ("buffer")?.slice;
let v5;
try { v5 = new v4("buffer", v1); } catch (e) {}
const v7 = [-876027929,9,536870887,-1257640956];
function f8() {
    return v4;
}
function f9(a10) {
    function f11() {
    }
}
Object.defineProperty(v7, "f", { configurable: true, get: f8, set: f9 });
const v12 = [-1647653848,1073741824,-10780,-1943214856,3,-48996];
const v13 = [14];
v13[Symbol.isConcatSpreadable] = "number";
let v16;
try { v16 = v13.entries(); } catch (e) {}
function f17(a18, a19, a20, a21) {
    Object.defineProperty(a19, "f", { writable: true, value: a18 });
    a21[Symbol.isConcatSpreadable] = a21;
    try { a18.every("buffer"); } catch (e) {}
    a19.f = a19;
    const o30 = {
        set d(a26) {
            a26 = a20;
            Date[a18] = a19;
            super.a;
            v1.e;
            v7 >>> a26;
            [] = "buffer";
        },
        4: a21,
        "g": a20,
        __proto__: a20,
        "f": a18,
    };
    Object.defineProperty(o30, v5.isConcatSpreadable, { writable: true, value: o30 });
    try { o30.copyWithin("f", "f"); } catch (e) {}
    return o30;
}
const v34 = f17(v13, v13, v12, v13);
const v35 = f17(v7, v7, v16, v7);
try { v35.concat("number"); } catch (e) {}
const v37 = f17(v7, v12, v12, v7);
try { v37.keys(); } catch (e) {}
const v39 = [-65537,-24143,-1293542190,14907,3476,-65083];
const v40 = [65537,3,-25535,268435440,-2,9007199254740990,1,-128,9007199254740990];
const v41 = [6,-536870912];
Date.toString = Date;
const v43 = new v34();
function F44(a46) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = f9;
    this.f = v43;
    this.g = Date;
}
new F44(v39);
const v48 = new F44();
class C49 {
    constructor(a51, a52) {
        const v53 = this?.__defineGetter__;
        try { new v53(F44, Date); } catch (e) {}
        function f55(a56, a57, a58, a59) {
            const o60 = {
                "deleteProperty": F44,
                "ownKeys": Date,
            };
            return v48;
        }
        f55(v40, Date);
    }
    [v41];
    g = v7;
}
let v62;
try { v62 = new C49(v1, v40); } catch (e) {}
try { f17(...v34, F44, ...v35, v62, v4, ...f17); } catch (e) {}
try {
    new Date();
} catch(e65) {
}
const v66 = new C49();
v66.g = v66;
new C49();
const v69 = new Uint16Array();
v69.constructor = v69;
try { v69.slice(Date, Uint16Array); } catch (e) {}
const v73 = new Float64Array(v4);
const v74 = v73.toSorted();
v74[132];
const o76 = {
    "c": Float64Array,
    "f": v41,
    __proto__: v69,
};
Date();
Date.valueOf = v74;
