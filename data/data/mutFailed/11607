class C3 {
    10;
    valueOf(a5) {
        const o6 = {
        };
        try {
            o6.f = 9;
        } catch(e7) {
        }
        [-56348,512];
        [512,-65537,1528067664,-36084,268435439,9007199254740991,1405070988,4,-1397551361,6];
        [-15,268435439,-2147483649];
        super.h = o6;
        Math.tanh(-128);
        const v15 = Math.asinh(-128);
        -128 << -128;
        try {
            const o17 = {
            };
            o17.f = 9;
            o17.a = 2;
        } catch(e18) {
        }
        try {
            const o19 = {
            };
            v15.f = 9;
            o19.a = 2;
            o19.g = 268435441;
        } catch(e20) {
        }
        try {
            const o21 = {
            };
            o21.f = 9;
            o21.a = 2;
            o21.g = 2;
        } catch(e22) {
        }
        return a5;
    }
}
const v23 = new C3();
new C3();
new C3();
[-0.0,-0.3861713136087843,-0.0,3.0,-0.5934102822336875,3.9999421305792456e+307,727.870354699046,1.0874328369581946e+308,0.9776932700817861];
[1.7124648738454937e+308,1000.0,0.7426407272529065];
[Infinity,-1.7976931348623157e+308,-427494.59052472515,-641.46149596454,-5.0,1.0,3.0];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 14;
        try {
            const v37 = new Float64Array(-2047358389);
            const v38 = v37.indexOf(-2047358389);
            class C39 {
            }
            function F40(a42, a43, a44) {
                if (!new.target) { throw 'must be called with new'; }
                a42 >>> a42;
                a43 - 14;
                -a44;
                const v48 = this.constructor;
                try { new v48(a44, C39); } catch (e) {}
            }
            new F40(v38, C39, F40);
            new F40();
            const v55 = Float32Array.bind();
            for (let v56 = 0; v56 < 5; v56++) {
                const o58 = {
                };
                v55(o58);
            }
        } catch(e60) {
        }
        class C61 {
        }
        class C62 extends C61 {
            static #m(a64, a65, a66, a67) {
            }
        }
    } catch(e68) {
        class C70 {
            constructor(a72, a73) {
                const v74 = this.constructor;
                try { new v74(); } catch (e) {}
                this[16] >>>= 16;
            }
            static toString(a77, a78) {
                for (let v79 = 0; v79 < 32; v79++) {
                    v23["p" + v79] = v79;
                }
                return e68;
            }
        }
    }
    try {
        this.g = 14;
    } catch(e82) {
    }
}
new F32();
function F84(a86, a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    a86--;
    a88 / a88;
    const v91 = this.constructor;
    try { new v91(a87, a87, a88); } catch (e) {}
}
const t109 = 9;
new t109();
new F32();
[0,-1093406053,13,-36193,-65536,-9007199254740992,7,-14,5,1378883556];
function f96() {
    return f96;
}
const o107 = {
    [F32](a98, a99) {
        super[f96];
        (268435456 >>> (268435456 % 268435456)) ^ -3.0;
    },
};
[268435441,9007199254740990,10,64,1073741825];
function f109(a110, a111, a112) {
}
const o113 = {
};
function f114(a115, a116) {
    const o117 = {
    };
}
function F118(a120, a121) {
    if (!new.target) { throw 'must be called with new'; }
}
