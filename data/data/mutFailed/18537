const v3 = new Int32Array(Int32Array, Int32Array, Int32Array);
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
}
const v8 = new F4(Int32Array, v3);
function f9(a10) {
    let v11;
    try { v11 = v8.resize(v3, F4, Int32Array, a10); } catch (e) {}
    v3.length |= v11;
    return v11;
}
const v12 = f9();
f9();
class C15 {
    static m(a17) {
        try { new a17(-2003687489, -14194, "valueOf"); } catch (e) {}
        const v19 = super.d;
        try {
            const v21 = new Int16Array(Int16Array, Int16Array, a17);
            return v21["subarray"]();
            const t20 = "valueOf";
            t20.__proto__ = v19;
        } catch(e24) {
        }
        new Date(512);
        function F28(a30) {
            if (!new.target) { throw 'must be called with new'; }
            const v31 = this.constructor;
            v31.bind();
            try { new v31(); } catch (e) {}
        }
        return "valueOf";
    }
    [-14194];
    static h = "valueOf";
    #b = -2003687489;
    1073741824;
    124041754 = -14194;
}
new C15();
new C15();
new C15();
const v39 = /5mxyz{0,1}?/gimsy;
const o40 = {
    __proto__: v39,
};
const v41 = [];
const v44 = new Float32Array(4061, 4061);
class C46 extends v41.constructor {
    [4061] = v44;
    3;
}
new Float64Array(9);
new Int16Array(65);
new Uint8Array(0);
const v54 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
const v56 = [[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v54,v54];
function f57(a58, a59) {
    return a58;
}
const v62 = [v56];
const o63 = {
    "arguments": v62,
    "type": "function",
};
function f65() {
    return -2003687489;
}
const v66 = [];
let v68 = 228;
const v69 = new Array(v68);
class C70 {
    [Array] = v66;
    static {
        const v73 = new Float32Array(4061, 4061);
        v73.at(4061);
        Symbol.toPrimitive;
        function F77(a79, a80) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a80;
                new Date(Uint32Array);
                class C85 {
                    static ["-2"];
                }
                const v88 = new Date(Date);
                v88.setFullYear(v12, 3811);
                function f90() {
                    const o91 = {
                    };
                    return o91;
                }
            } catch(e92) {
            }
            class C94 {
            }
            const v95 = new C94();
            try {
                v95.__proto__ = F77;
                const v96 = ["Vre"];
                class C97 {
                }
                function* f98(a99, a100) {
                    yield* v96;
                    return "Vre";
                }
            } catch(e101) {
            }
        }
        const v102 = new F77(v69, this);
        new F77(Array, F77);
        new F77(v102, v69);
        function F105() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F107(a109, a110) {
            if (!new.target) { throw 'must be called with new'; }
            const v111 = this.constructor;
            v111.caller;
            try { new v111(this, F107, F107); } catch (e) {}
        }
        new F107(F107, F107);
    }
}
const v115 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
v115.flat(v115);
function F117(a119, a120, a121, a122) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a120;
}
v68--;
class C124 {
}
new C124();
const o126 = {
};
new C70();
new Worker(f57, o63);
