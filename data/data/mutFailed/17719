const v1 = new WeakMap();
function f2(a3) {
    function f4(a5) {
        try {
            f2(-5);
        } catch(e8) {
        }
        return a3;
    }
    a3[Symbol.toPrimitive] = f4;
    const o27 = {
        "g": v1,
        "a": a3,
        m(a12, a13) {
            const v14 = [];
            try { new a3(a12, v14, a3, a3, a3); } catch (e) {}
            Math.cos(-7);
            const v21 = WeakMap & -7;
            Math.clz32(WeakMap);
            !v21;
            v21 | 268435441;
            const v25 = ~1.0;
            268435441 * -7;
            return v25;
        },
    };
    return o27;
}
const v29 = Symbol.toPrimitive;
f2[v29] = f2;
class C30 {
    static {
        const v32 = this.name;
        this.toString().lastIndexOf(v32);
    }
}
const v35 = f2(f2);
const v36 = f2(v35);
function f37(a38) {
    new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    return Uint16Array;
}
Object.defineProperty(v36, "toString", { configurable: true, enumerable: true, value: f37 });
const v41 = f2(v1);
Object.defineProperty(v41, "length", { configurable: true, enumerable: true, value: v29 });
class C42 {
    constructor(a44, a45) {
        f2(a45);
        try {
            v41.length = 116;
        } catch(e48) {
        }
        try {
            v41.toString = f2;
        } catch(e49) {
        }
    }
    [v36];
    [f2] = v1;
}
const v50 = new C42(v35, v36);
const v51 = new C42(v35, v35);
new C42(v50, v51);
/E[\cz]/gumsy;
/uWxyz?/vmy;
/Gm/udsy;
for (let v57 = 0; v57 < 5; v57++) {
    function f58() {
        const v59 = [];
        try {
            v59.some();
        } catch(e61) {
            function F63(a65, a66) {
                if (!new.target) { throw 'must be called with new'; }
            }
            F63.toString = f58;
            function f68(a69, a70, a71, a72) {
                Uint8Array / a69;
                a70 < F63;
                const o78 = {
                    n(a76, a77) {
                        return v57;
                    },
                };
                function F79(a81, a82, a83) {
                    if (!new.target) { throw 'must be called with new'; }
                    a82 === a82;
                    new BigUint64Array();
                    /anVXYFzN(x)(x)(x)\3/gvdms;
                }
                function f88() {
                    for (let v89 = 0; v89 < 5; v89++) {
                        const v90 = new F79(F79, f88, v89);
                        const t93 = v90.constructor;
                        new t93();
                    }
                    return f88;
                }
                %PrepareFunctionForOptimization(f88);
                f88();
                %OptimizeFunctionOnNextCall(f88);
                f88();
                return v57;
            }
            for (let v95 = 0; v95 < 500; v95++) {
                f68();
            }
            eval(e61);
        }
        return f58;
    }
    f58();
    %OptimizeFunctionOnNextCall(f58);
}
