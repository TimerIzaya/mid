WeakMap.length;
const v5 = new WeakMap();
function f6() {
    return v5;
}
try { f6(); } catch (e) {}
function F8(a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    a10 << a10;
    a12++;
    try {
        this.a = 1466077456n;
    } catch(e15) {
    }
    try {
        this.d = a11;
    } catch(e16) {
    }
}
const v17 = new F8(49089n, -1073741824n, 49089n);
v17.e = v17;
new F8(1466077456n, -1073741824n, 1466077456n);
const v19 = new F8(1466077456n, 1466077456n, 1466077456n);
class C21 {
}
try { C21.bind(WeakMap); } catch (e) {}
const v24 = new C21();
Object.defineProperty(v24, "valueOf", { enumerable: true, value: Symbol });
new C21();
const v26 = [v24];
try { v26.groupToMap(v26); } catch (e) {}
35530n & 35530n;
const v31 = new Float64Array();
try { v31.subarray("toUpperCase", -1073741824n); } catch (e) {}
try { Uint8Array.from(v26); } catch (e) {}
function f35(a36, a37) {
    a36.name;
    a37.name;
    const v42 = Array();
    function f43() {
    }
    function f44(a45) {
        a45 + a45;
        gc();
    }
    try { f44(v19); } catch (e) {}
    Object.defineProperty(v42, 0, { configurable: true, enumerable: true, get: f43, set: f44 });
    -v42.unshift(3);
}
new Promise(f35);
