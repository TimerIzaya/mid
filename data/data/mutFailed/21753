function f0() {
}
let v2 = 1073741824;
1778 + 1778;
const v7 = new Float32Array(1778);
v7[Float32Array] = 256;
v7[16] = Float32Array;
v7["join"]("join");
Math.atanh(Float32Array);
let v16 = +Float32Array;
const v17 = v2 >>> v2;
++v16;
3 ** v17;
new Uint8ClampedArray(-65535);
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    function F29(a31, a32, a33, a34) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v35 = 0; v35 < 100; v35++) {
            const o38 = {
                valueOf(a37) {
                },
            };
            function f39(a40, a41, a42) {
                const o44 = {
                    "a": o38,
                    get d() {
                    },
                };
            }
            f39(undefined);
        }
    }
    new F29();
}
BigUint64Array.e = BigUint64Array;
const v48 = new BigUint64Array(256);
let v50 = 4096 * 4096;
new Int8Array(4096);
const v55 = new Uint8Array(127);
class C60 {
    static 7;
    static [-1] = "join";
    #n(a62) {
        a62 = this;
        a62.e >>>= -35417;
        const o66 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o66);
        return this;
    }
}
const v69 = Array();
class C70 {
    #e;
    static {
        function f72(a73, a74) {
            return a73;
        }
        const o80 = {
            o(a76) {
                const o78 = {
                };
                return gc(o78);
            },
        };
        const o82 = {
        };
        const v84 = new Proxy(Uint32Array, o82);
        o80["o"](o80, Uint32Array, "o", "o", v84);
        const v87 = super[this];
        try { v87.join(-4096, -4096, v87); } catch (e) {}
        const o89 = {
        };
        [/LD/vds,1000.0];
    }
    m(a94, a95) {
        const o96 = {
        };
        const o99 = {
        };
        const v101 = new Proxy(Uint8Array, o99);
        v101.d = v101;
        new Proxy(this, o96);
        class C107 {
        }
        function f108() {
            class C110 {
            }
            new C110();
            const v112 = new C110();
            [C107,C110];
            [257828.6336153492,v112];
            class C115 extends C60 {
            }
            function f116(a117, a118) {
                return -4096;
            }
            Set.toString = f116;
            Set.constructor(Set);
            v69.constructor;
        }
        const v122 = "join" && -4096;
        +a95;
        Math.sqrt(v122);
        a94--;
    }
}
const v127 = new Int32Array(2);
v127[1];
new Int16Array(41);
try {
    const o133 = {
    };
} catch(e134) {
}
try { new Uint8ClampedArray(Int32Array, 4096, Uint8ClampedArray); } catch (e) {}
new Uint8ClampedArray(6);
function f138() {
    let v139 = 2;
    ({"byteLength":v50,"byteOffset":v139,"length":v2,} = v48);
    [268435456];
    [65535,60441,2,2,1024,-8,1024,1467668052];
    const v144 = [2147483649,2,-14205,4096,-11,1065229307,2147483649,268435441,-32601];
    const o153 = {
        ...1.0,
        [-65535]: undefined,
        [v144](a147, a148, a149) {
        },
        get d() {
            return this;
        },
        set b(a152) {
        },
    };
    return o153;
}
for (let v154 = 0; v154 < 5; v154++) {
    const v155 = f138();
    v155.c = v155;
    v155[2] = v155;
    Array(1000);
    function f159() {
        return f159;
    }
    %OptimizeFunctionOnNextCall(f138);
}
v7[-1];
try {
    v55.constructor;
    try {
        v127.f = 145253519;
    } catch(e166) {
    }
    new f0();
} catch(e168) {
}
