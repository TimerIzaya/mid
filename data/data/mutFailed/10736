const v0 = [4.0];
const v1 = [1000000000.0,1000000000.0,0.7112274691797903,4.0,-8.436618224667109,665648.0662803256];
const v2 = [1000.0,0.36359694037662815,0.2563625382871658,3.0,42477.50949773006,0.9455682466789556,-0.2161878357744591,2.0,1000000000000.0,-5.570469591912817];
const v6 = /r/gvmy;
/TcL7?/ums;
const v8 = /D6/gudi;
const v9 = [-329620.22738570336,-1000000.0,1.7976931348623157e+308];
let v10;
try { v10 = v9.sort(v2); } catch (e) {}
const v11 = [-8.237058738608539];
v11[0] = v11;
const v12 = [3.0,-5.0,-6.246199645250665,1.7727118284685336e+308];
let v13;
try { v13 = v12.slice(v8, v0); } catch (e) {}
function f14() {
}
const t16 = /(?:a*)+q(?<a>.)/guds;
t16.constructor = f14;
const o16 = {
};
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    let v22 = this?.constructor;
    function f23(a24, a25, a26, a27) {
        typeof 9007199254740990n === "object";
        return F17;
    }
    const v31 = f23(v0, v13, v8, a20);
    try { new v22(a19, a21, this); } catch (e) {}
    15312 | [Infinity,5.072687501529128e+307,0.4093098171074484,4.0,-4.442441003635313e+306,843998.4933901483,-714.8973177887364];
    v22 *= Symbol.toPrimitive;
    a21 | a21;
    try {
        this.g = a21;
        function f39(a40) {
            for (let v41 = 0; v41 < 5; v41++) {
                function f42() {
                    Symbol.toPrimitive.description.codePointAt();
                    return f39;
                }
                f42();
                %OptimizeFunctionOnNextCall(f42);
            }
        }
        return f39;
    } catch(e48) {
    }
    try {
        a19.d = v31;
    } catch(e49) {
    }
    f23(v1, v0, v6, v31);
    %PrepareFunctionForOptimization(f23);
    f23(v1, v0, v6, v31);
    f23(v1, v0, v6, v31);
    %OptimizeFunctionOnNextCall(f23);
    f23(v1, v0, v6, v31);
}
F17.caller = F17;
new F17(v9, v8, -25775n);
const v55 = new F17(v9, v6, 9007199254740990n);
v55.g;
new F17(v1, v8, 9007199254740990n);
const v60 = new Uint8Array(10);
new F17(v1, 10, v60);
let v62;
try { v62 = new v10(v10, v2); } catch (e) {}
v62.a = v62;
class C63 {
}
const v64 = new C63();
new Proxy(v64, v9);
Float32Array.from(v60);
