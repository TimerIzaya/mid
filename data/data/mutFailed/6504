[NaN,-3.741222753523517e+307,-1.0,-91.22756462237862,-198.32153058678045,-220.97928371013074,1.0];
const v1 = [1000000000000.0,0.2233263440109855,-2.2250738585072014e-308,2.2250738585072014e-308,403.0910657474801,-998.8290548639498,-5.0,1.0];
const v2 = [-Infinity,-4.0,-9.186873831333298,-1000000000000.0];
const v3 = [1,4294967295,1073741823,1864084580,-4,1199060002];
let v4 = [-1216196677,1073741824,-37888,7,4294967296,257,12453];
function f5() {
    function f6(a7) {
        const v8 = v4 in a7;
        function f9() {
            return f9;
        }
        const v10 = f9.length;
        const v12 = new Int8Array(v8);
        v12.buffer.slice(v10, v3);
        return v2;
    }
    return f6;
}
Object.defineProperty(v4, "toString", { writable: true, get: f5 });
[-61261];
const v18 = v4--;
Object.defineProperty(v1, v18, { configurable: true, enumerable: true, value: v1 });
try { v4(v4, v18, 55153); } catch (e) {}
try {
    v3.__proto__ = v1;
} catch(e20) {
}
("E").length;
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        for (const v38 of Array(19793)) {
        }
        const t33 = [];
        t33[Symbol.toPrimitive] = Array;
    } catch(e42) {
    }
}
new F33();
class C44 {
}
let v45 = 0;
while (v45 < 6) {
    v45++;
}
try { undefined.toString(); } catch (e) {}
