const v0 = [-3.5834043152193633,0.9358039441389655,1e-15,-1e-15];
const v1 = [-6.684149249887298e+307,0.6312370005753681,-1.7976931348623157e+308];
const v2 = [-5.0,-502.10957961804417,0.7265403185731781,-2.0,-3.0,Infinity,-376.9571651640771];
function f3(a4, a5) {
    const v6 = [-4096,-4096,-1073741824,4096,-2];
    const o7 = {
        __proto__: v6,
        ...v6,
    };
    return o7.pop(o7, v6);
}
v2.toString = f3;
function F9(a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v2;
    } catch(e12) {
    }
}
const v13 = new F9(v1);
const v14 = new F9(v1);
const v15 = new F9(v1);
class C16 {
    constructor(a18, a19) {
        [348459484,1073741825,8,268435439];
        [332468068,-4,536870912,-1,-1033198671,-27682];
        [-536870912,2];
    }
    get g() {
        try {
            this.g = this;
        } catch(e24) {
        }
        return v13;
    }
    static [v2] = v14;
    e = v15;
}
let v25 = new C16(v2, v14);
const v26 = new C16(v2, v15);
const v27 = new C16(v0, v13);
class C28 extends F9 {
    [v25];
    toString(a30, a31, a32) {
        let v33 = v2[2552307079];
        [a30,...v33] = a30;
        super.e = this;
        function f34() {
            return v33;
        }
        const v35 = C16 >= v0;
        Object.defineProperty(v1, "length", { enumerable: true, get: f34, set: f34 });
        v25 &= v27;
        [-1.7976931348623157e+308,7.50433519433059,4.4120420171513395,576.35867045284,2.2250738585072014e-308];
        [0.08764536249569355,1.0,-732229.4673361711,546.5851661214633,-995482.0571057965,-2.220446049250313e-16,-1000.0,-1000000000000.0,1000000.0];
        [-2.421327877654229];
        v35 ? C16 : v0;
        return this;
    }
    set d(a41) {
        super[this] = v14;
    }
    static 9 = v27;
    static f = F9;
    3899784921;
    static [-1] = v26;
}
new C28();
new C28();
new C28();
let v45 = -1024;
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
}
const v52 = new F46(v45, v45, F46, F46);
const v53 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v54 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
}
const v60 = new F56();
v60.toString = f3;
class C61 {
}
const v63 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v64 = [601759695];
function f66(a67, a68, a69, a70) {
    function f71() {
        let v74 = Float64Array;
        v74 = a68;
        const v75 = v53.length;
        try {
            v53.forEach(v74);
        } catch(e77) {
        }
        const v78 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v80 = Symbol.toPrimitive;
        const o89 = {
            toString(a82, a83) {
                try {
                    this.fuck(a69, 268435440);
                } catch(e86) {
                }
                const v87 = a70 && v74;
                a82 *= v80;
                v87 <= v78;
                return F56;
            },
        };
        const o110 = {
            "c": -4294967297n,
            [522675525n](a92, a93) {
            },
            "c": v64,
            valueOf(a95, a96) {
            },
            [-4294967297n](a98, a99, a100, a101) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v63,
            ...v52,
            [v80]() {
            },
            "type": C61,
            ..."Vre",
            valueOf(a104, a105) {
                return Symbol;
            },
            ..."Vre",
            4: "Vre",
            toString(a107, a108, a109) {
                return a107;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v45 %= -268435456;
        new Uint32Array(v54, v75, v80);
        v60 - f71;
        try {
            new Float64Array(127);
        } catch(e119) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    function f126() {
        return f71;
    }
    Object.defineProperty(f71, "valueOf", { writable: true, get: f126 });
    const v127 = f71();
    %OptimizeFunctionOnNextCall(f71);
    return v127;
}
for (let v128 = 0; v128 < 5; v128++) {
    f66(v60, F46, F56, v128);
}
