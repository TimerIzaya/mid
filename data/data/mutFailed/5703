const v0 = /(H)/gudi;
const v1 = /6JL/uimy;
const v2 = /s/gvdis;
class C3 {
    d;
    static [v2] = v1;
    [v0];
    constructor(a5) {
        a5.sticky = a5;
        for (const v6 in this) {
            536870888 >>> 536870888;
        }
        gc.b = gc;
        const o14 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o14);
    }
    static #a;
    static #g;
    static b;
    static f;
}
C3.name;
const v17 = new C3(v1);
new C3(v1, v1);
new C3(v17);
try { ("vKbo").propertyIsEnumerable(v1); } catch (e) {}
("string")[5];
[7.149782090512204,-596702.5692000536,1.0,548.9788658349003];
[0.3074873816774286,1.1205229067336691e+308];
const v30 = [1000000000000.0,-2.220446049250313e-16,5.0,1.282695127505481e+308,-0.0,-0.0,2.4616645000497357,-5.0];
v30[5] = v30;
-578828680 * -578828680;
2 / 2;
class C35 {
    n(a37, a38) {
        let v41 = -1.7976931348623157e+308;
        const v42 = ++a38;
        Math.imul(v41, 1985982983);
        Math.sign(+a38);
        v41++;
        Math.expm1(v41);
        return ~v42;
    }
    9 = 2;
}
const v55 = new C35();
v55[9];
const v57 = new C35();
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    a60[9] = a60;
    const v64 = this?.constructor;
    try { v64.apply(v64, a63); } catch (e) {}
    try { new v64(v57, 2, 2, a60); } catch (e) {}
    a60[9];
    a63--;
    try {
        this.c = -578828680;
    } catch(e69) {
    }
}
const v70 = new F58(v55);
new F58(v70);
