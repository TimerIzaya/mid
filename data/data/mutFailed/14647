const v1 = new Map();
class C5 {
    static [1324543844] = v1;
    static #d = v1;
    constructor(a7, a8) {
        const v10 = [a7];
        Reflect.apply(v1.forEach, this, v10);
        try { Map(); } catch (e) {}
        const v15 = new Map();
        function f16(a17, a18, a19, a20) {
            a19.arguments = a19;
            a17[3];
            a19.caller = a19;
            const o28 = {
                n(a23, a24, a25, a26) {
                    for (let v27 = 0; v27 < 10; v27++) {
                    }
                },
                16: a17,
                ...v15,
            };
            return o28;
        }
        [] = v10;
        try {
            Reflect.#d **= -10;
        } catch(e29) {
        }
    }
}
new C5(1324543844, -10);
class C31 {
    toString(a33) {
        super[this];
    }
}
[C31,C31,C31,C31,C31];
new C5(1324543844, -10);
const v37 = new C5(1324543844, 1324543844);
const v39 = new Date();
v39.getTimezoneOffset();
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e45) {
        for (let [v46,v47] of a43) {
        }
    }
    ~(-256n >> -256n);
    try {
        new F41();
    } catch(e52) {
    }
}
new F41();
class C54 {
    static n(a56, a57, a58) {
        try {
            a56.fuck(-2.220446049250313e-16, /P/gdis);
        } catch(e62) {
            function f63(a64, a65, a66) {
                return a66;
            }
            const v69 = new Int32Array(56885);
            Reflect.construct(Int32Array, [v69]);
        }
        return v37;
    }
    a = Map;
    static #b = v37;
    [Map];
}
new C54();
new C54();
function f76(a77, a78) {
    return a78;
}
Uint32Array.valueOf = f76;
new C54();
const v83 = new Uint8ClampedArray(4096);
function f84(a85) {
    return Uint8ClampedArray;
}
const v88 = [v83];
const o89 = {
    "arguments": v88,
    "type": "function",
};
const v90 = new Worker(f84, o89);
v90.getMessage();
class C92 {
    constructor(a94, a95) {
        function f96(a97) {
            return this;
        }
        const v100 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
        try {
            new Int8Array(9);
            function f106() {
                return f106;
            }
            const o108 = {
                [f106]() {
                },
            };
            [o108];
            v100.copyWithin(8, -268435456, -256);
        } catch(e112) {
        }
        const o113 = {
            "type": "function",
        };
        new Worker(f96, o113);
    }
}
const v115 = new C92(C92, C92);
new C92();
new C92(-50865, v115);
