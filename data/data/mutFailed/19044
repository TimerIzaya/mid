const v2 = new Uint8Array(13);
new Uint8ClampedArray(4);
const v8 = new Int8Array(186);
new Float64Array(506);
new Uint8Array(13);
const v17 = new Float32Array(122);
function f18() {
    return f18;
}
const v20 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
v20[Symbol.toPrimitive] = f18;
Date.UTC(f18, f18, "string");
const v26 = new Date(-2, v20);
function f27() {
    Math.sinh(0);
    const o32 = {
        ..."raw",
    };
    function f33() {
        return f33;
    }
    function f35() {
        let [v36,,...v37] = v17;
        v37 >>>= v2;
        const o38 = {
            "getOwnPropertyDescriptor": Date,
            "isExtensible": Date,
        };
        new Proxy(o32, o38);
        Object.defineProperty(f27, 13, { enumerable: true, set: f33 });
        return o32;
    }
    f35();
}
const v46 = [f27,5.0];
[-1000000.0,-9.82871036065143,f27,v46,-9.82871036065143];
const v48 = [v46,v46,-9.82871036065143,5.0];
v48.then = f18;
const o50 = {
};
async function f51(a52, a53, a54, a55) {
    await v48;
    return a53;
}
f51();
function f58() {
}
const v60 = new BigInt64Array();
for (const v61 in v60) {
    class C62 {
    }
    class C63 {
        set e(a65) {
            v8[Int8Array];
            const v67 = BigInt64Array.a;
            try { v60.findIndex(v67, v20); } catch (e) {}
            for (let v69 = 0; v69 < 100; v69++) {
                f51(v20, v46, v46, a65);
            }
            class C71 {
            }
            class C72 {
                static {
                }
            }
        }
    }
}
const o74 = {
};
("boolean").split(5.0);
v26.toTimeString();
