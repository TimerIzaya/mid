function f6(a7, a8, a9) {
    let v10 = -843644269;
    ({"a":a7,"e":v10,...f6} = a7);
    const o31 = {
        "c": a7,
        [-480764847](a17, a18) {
            const v20 = Symbol.toPrimitive;
            const o30 = {
                [v20]() {
                    1e-15 && 1e-15;
                    Math.ceil(v20 << a8);
                    v20 ** 1e-15;
                    ~Symbol;
                    return -480764847;
                },
            };
            return -2.3031129594299426e+307;
        },
    };
    return o31;
}
f6(-2.3031129594299426e+307, -2.3031129594299426e+307, -2.3031129594299426e+307);
f6(-2.3031129594299426e+307, -1000000000.0, -359535.7574284845);
f6(-1000000000.0, -2.3031129594299426e+307, -2.3031129594299426e+307);
new BigUint64Array(1024);
new BigUint64Array(2);
new Uint8ClampedArray(257);
const v48 = new Int8Array();
Uint8Array[0] = Uint8Array;
class C50 extends Uint8Array {
    constructor(a52, a53) {
        super(a52);
        for (let v55 = 0; v55 < 81; v55++) {
            ("function").normalize("NFD");
        }
        try {
            v48.length = 415075273;
        } catch(e59) {
        }
    }
}
new C50(Uint8Array);
