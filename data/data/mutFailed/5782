const v0 = [-1.7976931348623157e+308,1000000.0,-6.915611394355537,1.3526714764546773e+308,-547904.5365605006,-9.995503205713113];
function f1(a2) {
    const v3 = [515943.2030917471,-1e-15,1.7976931348623157e+308,0.19475803117559898,-546414.0415788401,285129.04068811354];
    new Uint8ClampedArray(v3);
    return v3;
}
v0.valueOf = f1;
const v6 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
function f7(a8, a9) {
    v0 ** f1;
    v0 % f1;
    --0.0;
    Math.atanh(f1);
    return f1;
}
v6.constructor = f7;
const v17 = [1.2064853884308828,389.29316056577704,0.4093535166309349,0.2957852566307807,-1000000000000.0,-1000000000000.0,-1.7976931348623157e+308];
function f18(a19, a20) {
    function f21(a22, a23) {
        const o25 = {
            "type": 137722928n,
        };
        return a23;
    }
    a19.valueOf = f21;
    a19[4];
    try { a20.slice(a20, f18); } catch (e) {}
    const o38 = {
        "c": a20,
        __proto__: v0,
        [a19](a29, a30) {
            let v31;
            try { v31 = a19.values(); } catch (e) {}
            try { this.o(a30, v31, a29); } catch (e) {}
            super.f = v31;
            return a29;
        },
        "g": a19,
        "arguments": v0,
        set b(a34) {
        },
        get f() {
            super.n();
            return isFinite;
        },
        "f": a19,
        "d": a20,
        ...v17,
        "a": v6,
    };
    return o38;
}
f18.valueOf = f18;
f18(v0, v6);
f18(v0, v6);
f18(v6, v0).a;
const v45 = new Float32Array(14);
const v48 = new Int16Array(257);
v48[34] = v48;
const v51 = new Int8Array(3709);
v51[3040];
const v53 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v53.includes(v45); } catch (e) {}
Uint32Array[2] = Uint32Array;
Uint32Array.prototype;
const v58 = new Uint32Array(v53, 2684);
const v60 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v61 = [601759695];
const v62 = [1073741824,1073741823,1376142744,1073741825];
function f64(a65, a66, a67, a68) {
    a65[3] = a68;
    a68[3] = v51;
    a65[3] = a65;
    a67 * a67;
    function f70() {
        try { new Int32Array(v6, a68, v48); } catch (e) {}
        new Int32Array(3, 114, 3);
        function F76(a78) {
            if (!new.target) { throw 'must be called with new'; }
            const v79 = [-0.685155357392599,5.0];
            function F80(a82, a83, a84, a85) {
                if (!new.target) { throw 'must be called with new'; }
                const v86 = this.constructor;
                try { new v86(a83, F76, v86); } catch (e) {}
                v79.length &= 1;
            }
            new F80();
        }
        let v91 = -4294967295;
        v91--;
        let v93 = Float64Array;
        v93 = a66;
        b = v61;
        const v94 = v53.length;
        v94 & v94;
        try {
            v62.forEach(a66, v53);
        } catch(e97) {
            e97.name = e97;
            Float32Array[0] = Float32Array;
            const v99 = new Float32Array(Float32Array, Float32Array, Float32Array);
            function f101() {
                return 160;
            }
            Object.defineProperty(v99, "h", { configurable: true, enumerable: true, get: f101 });
        }
        const v102 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v104 = Symbol.toPrimitive;
        const o108 = {
            toString(a106, a107) {
                a106 *= v104;
                return v93;
            },
        };
        o108.__proto__;
        const o126 = {
            [522675525n](a112, a113) {
            },
            "c": v61,
            valueOf(a115, a116) {
            },
            [v94](a118) {
            },
            [-1]: 2684,
            1073741824: v58,
            "maxByteLength": -268435456,
            "b": v91,
            "arguments": v102,
            [-4294967297n](a120, a121, a122, a123) {
                eval();
            },
            "e": v91,
            "e": -268435456,
            "arguments": v60,
            256: a68,
            ...v61,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
        return o126;
    }
    const v127 = f70();
    v127.e = v127;
    try { Int8Array(3709, v62, a65); } catch (e) {}
    const v130 = new Int8Array();
    try { v130.find(v130); } catch (e) {}
    const v132 = v130.buffer;
    2147483648 - 2147483648;
    eval("");
    Uint32Array[2] = 1;
    const v140 = v132.slice(2147483648)?.constructor;
    try { new v140(""); } catch (e) {}
    %OptimizeFunctionOnNextCall(f70);
    const t158 = "find";
    t158[1] = "find";
    let v143;
    try { v143 = v62["find"](..."find", a68, ...v61, ...v62, ...522675525n); } catch (e) {}
    return v143 <= a67;
}
Object.defineProperty(f64, 3, { value: v45 });
for (let v145 = 0; v145 < 10; v145++) {
    const v146 = f64(v62, v145, v145, v145);
    v146 || v146;
}
%OptimizeFunctionOnNextCall(f64);
f64(f64, v60, 2684, f64);
