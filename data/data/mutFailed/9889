function f0() {
}
class C7 {
    constructor(a9, a10) {
        this[f0] = a9;
        const v11 = [];
        try {
            v11.flatMap(f0, -11n);
        } catch(e14) {
        }
        new Float64Array(127);
        new Uint16Array(128);
        new Int32Array(509);
    }
    [C7];
    a = 3n;
    [-11n] = -1763311037n;
    static [-11n];
    257;
}
new C7(-1763311037n, 65536n);
const v25 = new C7(3n, 65536n);
new C7(3n, -11n);
[729.7086180904632,608661.4923667633,-274534.88452231616,955073.7643913324,2.220446049250313e-16,-713439.8516915839,-2.220446049250313e-16,-3.089184906694409,-1000000.0];
[1000000.0,-3.0];
[2.220446049250313e-16];
function F30() {
    if (!new.target) { throw 'must be called with new'; }
}
const v33 = new F30();
const v34 = new F30();
const v35 = new F30();
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this.constructor;
    try { new v42(this, F37, a41); } catch (e) {}
    a39.c = a39;
    const v44 = a41?.constructor;
    try { new v44(); } catch (e) {}
    this.b = a41;
}
new F37(v35, v34, v35);
new F37(3n, v35, v33);
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    function f52() {
        new Int8Array(v25);
        return F48;
    }
    this.constructor = f52;
    const v56 = this.constructor;
    try { v56(); } catch (e) {}
}
new F48();
