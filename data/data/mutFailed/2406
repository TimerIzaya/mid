const v1 = [];
function f2() {
    -v1;
    return f2;
}
const v4 = f2();
const v5 = new WeakSet();
new Float32Array();
new BigInt64Array(11);
try { new Int8Array(WeakSet, v5, Int8Array); } catch (e) {}
const v14 = new Int8Array(6);
v14[4];
const v18 = new Float64Array(476);
new BigUint64Array(15);
class C22 extends Float64Array {
    #m(a24, a25, a26, a27) {
        if (a24) {
            try { a24(Int8Array); } catch (e) {}
        } else {
            const v30 = typeof (a27 % 476);
            new Uint32Array(381);
            for (let v35 = 0; v35 < 5; v35++) {
                v4();
                %OptimizeFunctionOnNextCall(v4);
            }
            v30 === "function";
        }
        return BigUint64Array;
    }
    #c = 15;
    e = Int8Array;
    static {
        class C39 {
        }
    }
    static {
        let v41 = 0;
        while (v41 < 6) {
            v41++;
        }
    }
    h;
    static #e;
    constructor(a46, a47) {
        function f48(a49) {
            function f50(a51) {
            }
            const v54 = new Uint16Array(1024);
            v54[7] = v54;
            return v18;
        }
        const o57 = {
            "type": "function",
        };
        new Worker(f48, o57);
    }
}
new C22();
const v60 = new C22();
try { v60.toString(); } catch (e) {}
new C22();
new Int8Array([1000.0,-1.7976931348623157e+308,1000000.0,1000000000000.0,-1000000000000.0,-863970.4344405974,1.7873969073744563e+308,0.0]);
