class C3 {
    static set e(a5) {
        this.c;
        try {
            super.atanh(a5);
        } catch(e8) {
        }
    }
    #a = 1000000.0;
    m(a10, a11) {
        a11?.[129];
        return ("mfGXz")[4];
    }
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
class C18 extends C3 {
    static {
        1000 == 1000;
        65537 / 65537;
        v16 >> v16;
        (-2.2250738585072014e-308) ** v16;
        Math.sqrt(-2.2250738585072014e-308);
        Math.round(v16);
    }
    317;
    static #a = v15;
    static [1000000.0];
}
const v30 = new C18();
new C18(v30, v30, C3);
new C18();
new Uint8Array(1000);
-2;
try { Float64Array.apply(v17, Uint8Array); } catch (e) {}
new Float64Array(2);
let v41 = 1000;
v41--;
new BigInt64Array(v41);
10 & 10;
function F48(a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this?.__defineGetter__;
    try { new v51(this, a50); } catch (e) {}
    if (a50) {
        function F53(a55, a56, a57, a58) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F53(this, Set, 10, a50);
    }
    const o62 = {
        slice() {
            super[this];
        },
    };
    try { o62.slice(); } catch (e) {}
    for (let [i67, i68] = (() => {
            10 | 10;
            return [256n, 10];
        })();
        i67 < i68;
        ) {
    }
    const v76 = new BigUint64Array(3375);
    try { v76.toSorted(F48); } catch (e) {}
    const v78 = v76[0];
    v78 / v78;
    v76[2];
    v76[3];
}
const v82 = new F48();
try { v82.constructor(v82); } catch (e) {}
const v84 = new F48();
v84.b = v84;
