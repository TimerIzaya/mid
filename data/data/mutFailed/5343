const v3 = [1914570804,14,-4294967297,268435441,6,2147483647];
try { v3.pop(); } catch (e) {}
[4294967295,2,8];
const v6 = [-1419382441,-1244298362];
let v7;
try { v7 = v6.entries(); } catch (e) {}
1e-15 + 1e-15;
~0.5700359251536599;
[-641.5500680602411,-1000000000000.0,4.710348996888945e+307,-Infinity,-1000000000000.0,888794.9427220472,-268680.9407531461];
const v14 = [-799550.6765299363,0.1647271205617531,0.0,0.3734391513726466,1000000000000.0];
try { v14.reduce(v3); } catch (e) {}
const v16 = [-2.220446049250313e-16,1.2007839897040444e+308,9.971076652252768e+307,-5.0];
try { v16.sort(v3); } catch (e) {}
const v22 = 16 / 16;
v22 + v22;
const v25 = new Float32Array();
Float64Array.name;
const v28 = new Float64Array(v25, 16);
let v29;
try { v29 = v28.copyWithin(16, v28); } catch (e) {}
try { v29.entries(); } catch (e) {}
256 >> 256;
new Float64Array(256);
v25.length >>>= 16;
class C34 extends Float64Array {
    static 1;
    static #d = 256;
}
C34[1] = C34;
const v35 = new C34();
const v36 = new C34();
try { v36(v25); } catch (e) {}
let {"buffer":v38,"byteLength":v39,"byteOffset":v40,} = v36;
try { v38.slice(v16, v16); } catch (e) {}
v39 + v39;
v35 instanceof v7;
const o44 = {
};
new Proxy(v36, o44);
