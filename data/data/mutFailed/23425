function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -9;
    } catch(e3) {
    }
    try {
        this.h = -9;
    } catch(e4) {
    }
    try {
        this.b = -9;
    } catch(e5) {
    }
}
const v6 = new F0();
function f7(a8, a9) {
    const v11 = new Int32Array(Int32Array, Int32Array, Int32Array);
    return ~v11;
}
v6[Symbol.toPrimitive] = f7;
const v15 = new F0();
const v16 = new F0();
function f17() {
    return v16;
}
v16.e = f17;
const v21 = /(?:a*)+q(?<a>.)/guds;
for (let v22 = 0; v22 < 50; v22++) {
    f17(v21);
}
new Array(9);
const v29 = new Float64Array(5);
new Float64Array(v29);
const v33 = new Float32Array(6);
const v34 = v33.fill();
("getPrototypeOf").blink();
class C38 {
    ["getPrototypeOf"] = -1.7976931348623157e+308;
}
class C39 extends C38 {
    static {
    }
    65537 = v34;
    ["getPrototypeOf"] = C38;
}
new C39();
const v42 = /i3kKxyz{0,1}?/gdiy;
function f43() {
    class C45 extends Date {
    }
    const v46 = new C45();
    v46.setYear(v46);
    return v46;
}
v42[Symbol.toPrimitive] = f43;
const v50 = /h\P{sc=Greek}\P{gc=Decimal_Number}a\S+/guim;
const v51 = /exyz?/gvdmsy;
function f52(a53, a54, a55) {
    a54[Symbol.toPrimitive] = Symbol;
    a55[Symbol.toPrimitive] = Symbol;
    const o66 = {
        "f": a54,
        "d": a54,
        "h": a54,
        set a(a61) {
            super.d <<= a61;
            Array(9);
        },
        5: v50,
        [v42]: v6,
        [a55]: a55,
        6: a55,
        "b": v50,
    };
    return o66;
}
f52(v42, v50, v6);
f52(v50, v42, v15);
f52(v51, v42, v16);
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v74 = Array(19793);
        v74[16466] = v74;
        for (const v75 of v74) {
        }
        let v76 = -9223372036854775808n;
        v76 %= 45725n;
    } catch(e78) {
    }
}
new F70();
