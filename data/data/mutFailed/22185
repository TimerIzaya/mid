const v4 = Math.__defineSetter__;
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = F8;
    a10.length;
    try { this.constructor(128, this); } catch (e) {}
    a11 + a11;
    try {
        this.a = 5;
    } catch(e15) {
    }
    try {
        this.b = 5;
    } catch(e16) {
    }
    try {
        this.d = a11;
    } catch(e17) {
    }
}
new F8(F8, -195224844);
new Map();
new Int32Array(12);
3 + 3;
try { Int8Array.of(); } catch (e) {}
const v31 = new Int8Array(3);
const v32 = v31?.constructor;
try { new v32(3, 64, -9223372036854775807); } catch (e) {}
let v34 = 3940;
v34++;
new Uint8Array(v34);
function f39() {
    eval("");
    return -128;
}
for (let v43 = 0; v43 < 5; v43++) {
    v43 - v43;
    function f45() {
        const v47 = ("1073741824").constructor;
        v47[Symbol.toPrimitive] = f39;
        for (const v50 in "1073741824") {
        }
        try { new v47(v47); } catch (e) {}
        const v55 = v47();
        function f57(a58, a59, a60, a61) {
            a59.toString = f57;
            const v62 = a59 >>> a59;
            (v62 >>> v62) != -256;
            for (let v65 = 0; v65 < 5; v65++) {
            }
            return v62;
        }
        for (let v66 = 0; v66 < 5; v66++) {
            f57(v66, f57);
        }
        const v68 = v55.replaceAll();
        try { v68.replaceAll(v55, "1073741824"); } catch (e) {}
        class C71 {
            toString() {
                [0.42610628000409834];
                [0.1916863927637561,5.0,-1000000.0,-1000000000000.0,-2.2250738585072014e-308,786167.582370504,221250.34918176057];
                [2.0,121972.82426161831,1.0,1000.0,1.586101720587471e+308,682084.812556563];
                return undefined;
            }
            #f;
            static [undefined] = undefined;
            m(a77, a78, a79) {
                a78[6] = v4;
                return v43;
            }
            static #a = v43;
            536870887;
            static #d = undefined;
        }
        new C71();
        const v81 = v68.toLowerCase();
        const v82 = v81?.charCodeAt;
        2.4055206643129257 ** -1.5876750346470025e+308;
        %OptimizeFunctionOnNextCall(f45);
        const v87 = new Date();
        v87.getUTCFullYear();
        try { new v82(Int32Array); } catch (e) {}
        return v81;
    }
    f45();
    %OptimizeFunctionOnNextCall(f45);
}
