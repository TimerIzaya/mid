new Map();
const v2 = /B/udimy;
const v3 = [927716.746385878];
const v4 = v3.indexOf;
try { v4(); } catch (e) {}
try { Reflect.defineProperty(-12); } catch (e) {}
const v9 = /[x]/gms;
const v10 = /\cA/uims;
const v11 = [1000];
const v14 = new Int8Array(1342);
Object.defineProperty(v14, v11, { writable: true, enumerable: true, value: v14 });
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 7432n;
    } catch(e22) {
    }
}
new F18(v2, -14n);
try { new BigInt64Array(BigInt64Array); } catch (e) {}
const v26 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
function f27(a28, a29, a30) {
    try { a29.groupToMap(v10); } catch (e) {}
    return a29;
}
f27(v26, v3).fill();
new F18(v2, 7432n);
const v35 = new F18(v9, -14n);
class C37 extends F18 {
    [-26472n];
    [v3];
    static {
        delete this.g;
    }
    constructor(a41, a42, a43) {
        function f44(a45, a46, a47) {
            v26.copyWithin();
            new Int32Array([Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849]);
            ([1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164]).concat();
            try {
                function f56() {
                    0 < 10;
                    for (let v62 = 0; v62 < 5; v62++) {
                    }
                    return v26;
                }
                %PrepareFunctionForOptimization(f56);
                [];
                f44(252859902);
            } catch(e65) {
            }
            return -(this >> 252859902);
        }
        f44(this, this);
    }
    /*
    constructor(a70, a71) {
        super(a71, -26472n);
        function f72(a73, a74) {
        }
        function F76(a78, a79, a80) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v81 = new F76();
        for (let i = 0; i < 5; i++) {
            v81.toString = Array;
        }
        let v83;
        try { v83 = v35["compile"](); } catch (e) {}
        try { v83(); } catch (e) {}
    }
    */
    a;
    set e(a86) {
        let v88 = 2;
        const v89 = v88--;
        Math.ceil(v88);
        a86 << v89;
        %VerifyType(v88);
    }
}
new Date(-9223372036854775807);
const v97 = new Int32Array(2917);
v97["lastIndexOf"](10);
new C37(v9, v9);
new C37(v10, v9);
new C37(v9, v10);
const v108 = new Float32Array();
const v111 = new BigUint64Array(512);
v111["lastIndexOf"](v108);
if ("log1p") {
}
