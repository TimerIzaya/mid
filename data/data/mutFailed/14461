function f3() {
    return -37867;
}
BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
const v6 = new BigUint64Array(2949);
const v7 = v6?.constructor;
try { new v7(2949, -37867, f3); } catch (e) {}
const t7 = -37867;
const v10 = new t7();
const v11 = [v10];
function f12(a13, a14, a15) {
    v11.copyWithin();
    try {
        f12(a15, a14, 252859902);
    } catch(e19) {
    }
    const v20 = v6 >> 252859902;
    v20 - v6;
    return -v20;
}
let v23 = Int32Array;
const v24 = new v23(4096);
new Float64Array(129);
8 * 8;
let v31 = 0;
while (v31 < 3) {
    v31++;
}
let v39;
try { v39 = ("1G").toWellFormed(); } catch (e) {}
class C41 {
}
const v42 = new C41();
v42[Symbol.match] = f3;
let v45;
try { v45 = v42.propertyIsEnumerable(-37867); } catch (e) {}
const v46 = [-2.220446049250313e-16];
function f47() {
    v45.d >>>= 8;
    [0n];
    -760130167 < 4096n;
    ([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
    v7[65535] = -2.220446049250313e-16;
    v23 ^= f47;
    Reflect.construct(Float64Array, [Symbol,v39,v45], BigUint64Array);
    const v58 = [v24];
    Reflect.apply(v6.indexOf, v39, v58);
    return v6;
}
try {
    ("number")[2];
} finally {
    BigUint64Array % -760130167;
}
Object.defineProperty(v46, "constructor", { configurable: true, value: f47 });
try { v46.map(v23); } catch (e) {}
const v65 = [-2.220446049250313e-16,[8]];
v65[2] = v23;
v65.push(8);
const v67 = ("number").slice();
try { v67.match(v42); } catch (e) {}
const v70 = ("1G")["trimEnd"]();
function f71(a72, a73, a74) {
    try { a72.filter(a73); } catch (e) {}
    a74[2];
    const o77 = {
        ...a74,
        268435441: v42,
    };
    return o77;
}
const v78 = f71(v46, v67, v65);
v78[2597153494] = "number";
v78[2] = v78;
v78[2597153494] = v78;
f71(v70, v70, v78)[2597153494];
