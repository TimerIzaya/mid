function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 13;
        return 13 % !this;
        function f5(a6, a7) {
            Math.atan2(Math, f5);
            return f5;
        }
    } catch(e10) {
    }
}
new F0();
const v13 = [3.0];
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(Map, v13); } catch (e) {}
}
const v21 = new F0();
const v22 = new F0();
class C23 extends F0 {
    toString(a25, a26) {
        const v27 = `
        `;
        eval(v27);
        return v22;
    }
    0 = F0;
}
const v33 = new C23();
const v34 = new C23();
const v35 = new C23();
function f36(a37, a38, a39, a40) {
    const o48 = {
        "h": a40,
        "c": a38,
        set a(a42) {
            this in this;
            delete v34[a40];
        },
        "d": v34,
        [a38]: a38,
    };
    return o48;
}
const v49 = f36(v33, v35, v22, v34);
f36(v34, v49, v21, v49);
f36(C23, v34, v22, v33);
for (let [i59, i60] = (() => {
        const v55 = new Uint32Array(0, 0, 10);
        const t1 = v55.constructor;
        const v57 = new t1();
        v57.reverse();
        return [0, 10];
    })();
    i59 < i60;
    i60--) {
}
