new Uint8Array(956);
new BigInt64Array(163);
new BigInt64Array(1000);
new Date();
class C11 extends Uint8Array {
    #m(a13, a14, a15, a16) {
        Date(956);
        return 268435441;
    }
    constructor(a22, a23) {
        super(a22, a22, a22);
        this["toSorted"](Date);
        const t11 = "toSorted";
        t11[Symbol.replace] = BigInt64Array;
    }
}
new C11(163, 956);
new C11(163, 1000);
new C11(163, 956);
const v31 = /(\1a)/gums;
const v32 = /V(?:a{5,1000000}){3,1000000}/vims;
const v33 = /(?<a>.)\k<a>?/vdimsy;
for (let v34 = 0; v34 < 27; v34++) {
    v31.compile(v32).lastIndex;
}
let v37;
try { v37 = v33(v31, v32, v32, v31); } catch (e) {}
%VerifyType(v37);
const v38 = [v33,v32,v31];
v38[2] = v38;
const v39 = [v38,v32,v33,v38,v38];
v39[2] = v37;
[v33,v31,v31];
let v41 = 8;
v41--;
const v44 = new BigInt64Array(v32, v31, v37);
const v45 = new BigInt64Array(v41);
new BigUint64Array(163);
const v51 = new Uint8Array(7);
const v52 = v51.constructor;
new v52(Uint8Array, v45, v45);
try { Int32Array.bind(v38); } catch (e) {}
function f57() {
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v60 = 1000000000000.0;
    const v61 = v60--;
    -v61;
    -v39 && v39;
    class C68 {
        static #m(a70) {
        }
        constructor(a72) {
            const v74 = new Float32Array();
            let v75;
            try { v75 = v74.entries(); } catch (e) {}
            v75.next();
            const v77 = new Uint16Array(12, -4294967296, v61);
            new Float32Array(v77);
        }
    }
    new C68();
    new C68();
    Symbol.iterator;
    try { v45.reduce(Int32Array, 12); } catch (e) {}
    let v84 = 0;
    v84++;
    const v86 = new C68();
    new C68();
    const v88 = new C68(-4294967296);
    [];
    [257828.6336153492,v88,v86,v88];
    const v91 = [];
    v91[0];
    class C93 extends C68 {
    }
    new C93();
    const v95 = v91.constructor;
    try { v95.isArray(v91); } catch (e) {}
    class C97 extends v95 {
    }
    C97.a = C97;
    new C97();
    const v99 = v44.constructor;
    try { v99.bind(); } catch (e) {}
    const o101 = {
        "e": v91,
        __proto__: v38,
        [v39]: v99,
        "h": 257828.6336153492,
    };
    try { o101.e(BigUint64Array); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(v52);
v37();
%OptimizeFunctionOnNextCall(f57);
f57();
