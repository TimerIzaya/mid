class C3 {
    static {
        const o5 = {
        };
        try {
            const v6 = o5.d;
            const v7 = o5 && this;
            v7[7] ||= v6;
            v7[this && o5] ||= -3.0;
            o5.f = -3.0;
        } catch(e9) {
        }
        try {
            const o10 = {
            };
            o10.f = -3.0;
            o10.b = this;
        } catch(e11) {
        }
        try {
            const o12 = {
            };
            o12.f = -3.0;
            o12.b = this;
            o12.a = this;
        } catch(e13) {
            super.f &&= -1989198876;
            e13[-3.0] = C3;
            this | e13?.b;
        }
        try {
            const o17 = {
            };
            o17.f = -3.0;
            o17.b = this;
            o17.a = -3.0;
        } catch(e18) {
        }
    }
    static [-3.0] = -1989198876;
    d = C3;
    static 0;
    static c = C3;
    static 6 = -1989198876;
}
const v19 = new C3();
const v20 = new C3();
const v21 = new C3();
const v23 = new Map();
new Map();
function f26() {
    return v19;
}
class C27 {
    static 2;
    constructor(a29, a30, a31) {
        Object.defineProperty(a30, "a", { writable: true, configurable: true, enumerable: true, get: f26, set: f26 });
        let v33;
        try { v33 = v23["entries"](..."entries", v20, ...a31, a31, f26); } catch (e) {}
        var f = -1989198876;
        try {
            a31.valueOf = v33;
        } catch(e34) {
        }
    }
    static #h;
    #c = "bigint";
    static 3967 = "bigint";
}
new C27(v20, C27, v23);
const v36 = new C27("bigint", v23, v21);
new C27(v36, C27, v36);
function f39() {
    return 2147483648n;
}
%OptimizeFunctionOnNextCall(f39);
f39();
class C3 {
    static p(a5) {
        for (const v6 in "callee") {
            try {
                super["callee"] = a5;
            } catch(e7) {
            }
        }
        ("boolean").length;
        return "boolean";
    }
    set d(a10) {
        const o13 = {
            "maxByteLength": 95,
        };
        const v15 = new ArrayBuffer(255, o13);
        new BigUint64Array(v15);
    }
}
new C3();
new C3();
new C3();
[828705.2102230175,9.782512527258554,-497749.8302422023,2.2250738585072014e-308,1.780864044343074e+308,-0.0,3.0,-1000000000.0,-926279.4305257334,-921.4523400888568];
const v25 = [1.7976931348623157e+308,312920.01533012814,-2.0,1.1983521468628719e+308,-1.0,-2.2250738585072014e-308,1000000000.0,4.060050178666639,1000000.0,1e-15];
[958.8808400202181];
[64,268435456,-65536,11,536870889,255,13508,-1500979228,7,129];
const v28 = [-2102271705,49581,-751862503,9,512];
[4,-1853532376,127];
let v32 = "163558485";
const v33 = [-7,127,13,-2];
[-1238491077];
-3 >> -3;
const v38 = v32--;
class C40 {
    e;
    constructor(a42) {
        function f43(a44) {
            try {
                a44.b = a44;
            } catch(e45) {
            }
            return a44;
        }
        a42[Symbol.toPrimitive] = f43;
        try {
            a42.toString = a42;
        } catch(e48) {
        }
        try {
            a42[a42] = a42;
        } catch(e49) {
        }
    }
    c = v38;
}
C40.prototype;
const v51 = new C40(C40);
const v52 = new C40(C40);
const v53 = new C40(-2.0);
v53.c;
9n | 9n;
65537n + 65537n;
const v59 = [-781727972,-2,10,-14,268435456,16,341131571,-1535576263,-45048,10000];
const v60 = [-5280];
function f61(a62, a63) {
    try { a62(...v28, v51, v52, ...v25, a62, a62); } catch (e) {}
    new Uint16Array(8);
    return "callee";
}
v60.toString = f61;
function f70(a71, a72) {
    const o73 = {
        "e": v59,
        "a": a71,
        [a72]: a71,
        [v60]: 1405977585,
    };
    return a72;
}
f70(1405977585);
f70(-41022, v60);
~-768129381n;
const v81 = -65536n == -65536n;
2147483649 >>> 2147483649;
const v86 = 1073741824 - 1073741824;
v86 >>> v86;
Uint32Array.name;
try { new Uint32Array(9n, 4096, -65536n); } catch (e) {}
const v92 = new Uint32Array(4096);
let v93 = 9;
const v94 = v93--;
try { new Int32Array(v92, v92, -2.0); } catch (e) {}
const v97 = Int32Array.length;
v97 - v97;
new Int32Array(v93);
try { new Uint16Array(C40, Uint32Array, 2147483649); } catch (e) {}
new Uint16Array(120);
Array[0] = v81;
let v105;
try { v105 = Array.bind(v52); } catch (e) {}
let v106;
try { v106 = v105(Int32Array); } catch (e) {}
const v108 = Array();
v108.a = 2147483649;
v108.a = v108;
const v111 = new Int8Array(Array, 92, 485);
v111[277] = v111;
const v113 = 3666 - 3666;
const v114 = v113 + v113;
v114 >>> v114;
const v118 = 0 < 1;
v118 || v118;
v118 && v118;
BigInt64Array.g = v94;
BigInt64Array.name;
const v126 = ([1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10]).sort();
try { v126.sort(-65536n); } catch (e) {}
BigInt64Array.g = BigInt64Array;
[-65535,2147483648,257,255,-25075,2403];
-2.0 | -2.0;
["p",4.260409396049164e+307,v33,1000000.0];
[v32,[1000000.0],v33,v32,"function"];
Object.defineProperty(v106, 2, { configurable: true, get: Array });
try {
    v93 = v94;
} catch(e139) {
}
new Uint8Array(1);
class C145 {
    constructor(a147, a148) {
        this.constructor = f61;
        a147 << a147;
        const v150 = this.constructor;
        try { new v150(); } catch (e) {}
        a147?.[a148];
    }
    #n(a154, a155) {
    }
}
const v156 = new C145(-65536n);
new C145(1000.0, v156);
new C145();
