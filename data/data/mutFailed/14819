function f0() {
}
new Uint8Array(f0);
new URIError(-1073741824);
new Uint8Array(URIError);
const v10 = /L/uimy;
const v11 = /C\[\]\{\}\(\)\%\^\ /gdimy;
/(?!(a))\1/vy;
const v15 = new BigUint64Array(208);
const v19 = [65537,268435441,63298,-5,1235122603];
const v20 = [128,215394418];
let v21;
try { v21 = v20.entries(); } catch (e) {}
try { v21.next(); } catch (e) {}
new Float32Array(4096);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 3872;
    } catch(e29) {
    }
}
const v30 = new F26();
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a34;
    } catch(e36) {
    }
}
new F31(4096, F26, v30);
const v38 = [-2,-4294967296,4294967297];
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try { a44.valueOf(); } catch (e) {}
    const v46 = this?.constructor;
    try { new v46(1024, 1024, v19, this); } catch (e) {}
    a42.caller;
    a44[1];
    try {
        this.c = a43;
    } catch(e50) {
    }
    try {
        this.b = -714582153;
    } catch(e51) {
    }
    try {
        this.f = a42;
    } catch(e52) {
    }
}
const v53 = new F39(-714582153, F39, -714582153, v20);
v53.length;
const v55 = new F39(9, v53, 9, v38);
new F39(1024, v55, v38, v38);
Math.atan(Math);
let v64;
try { v64 = ("string").trimStart(); } catch (e) {}
-35417 - -35417;
class C67 {
    #n(a69) {
        const o71 = {
            "execution": "sync",
        };
    }
}
const v72 = new v11();
v72?.constructor;
function f74(a75, a76, a77, a78) {
    try { a75.filter("string", a75); } catch (e) {}
}
f74(-9007199254740991, v64, 1024, "string");
const o81 = {
};
const v82 = new C67();
const v83 = v82?.__defineGetter__;
try { new v83(v72, v20); } catch (e) {}
function f85(a86, a87) {
    do {
    } while (0 < 5)
    const o103 = {
        [a86](a92, a93, a94, a95) {
            function f96(a97, a98) {
            }
            return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
        },
        set b(a101) {
            try {
            } catch(e102) {
            }
        },
    };
}
const v105 = new Float64Array();
v105.buffer;
try {
} catch(e107) {
}
function f108(a109, a110) {
    v15.filter(a109);
    return BigUint64Array;
}
new v10(f108, v15);
