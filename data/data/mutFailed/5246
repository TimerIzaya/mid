const v0 = /KvXl/udimsy;
const v1 = /a[a-z]V()/gvimy;
let v2 = new v1();
const v3 = /[\11]/gm;
function f4() {
    return v2 >>>= f4 != v3;
}
const v6 = /[\cA](?!(a))\1/udims;
const v7 = [v6,v1,v0];
const v8 = [v7];
new Date();
v0 > 1073741824;
const v14 = Symbol.iterator;
const o23 = {
    [v14]() {
        let v16 = 10;
        const o22 = {
            next() {
                v16--;
                const v20 = v16 == 0;
                const o21 = {
                    "done": v20,
                    "value": v16,
                };
                return o21;
            },
        };
        return o22;
    },
};
const v24 = [v8,v0,v7];
Map.prototype;
new Map();
const v28 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
v28.push(v28);
new BigUint64Array();
([0.4391347154580403,257.99749453941945,-9.996237582361703,-2.2250738585072014e-308,2.0,0.22007729464719739]).length;
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this?.constructor;
    try { new v39(v6, v8, a36); } catch (e) {}
    a37[2] = a37;
    try {
        this.b = v0;
    } catch(e41) {
    }
    try {
        this.g = v0;
    } catch(e42) {
    }
}
new F34(v0, v24, v8);
const o46 = {
    set b(a45) {
    },
};
const t56 = null;
t56.valueOf = v8;
const v48 = [null,null];
-v48 && v48;
new F34(v6, v8, v24);
const v52 = new F34(v6, v24, v8);
1024 | 1024;
const v56 = new Int32Array(1024);
for (const v57 of v56) {
    const o59 = {
    };
    gc(o59);
    try { new SharedArrayBuffer(v57); } catch (e) {}
    const v63 = new SharedArrayBuffer(1024);
    try { v63.slice(v52, SharedArrayBuffer); } catch (e) {}
}
