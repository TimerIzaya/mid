const v5 = new Int32Array(0);
let v6;
try { v6 = v5.map(v5); } catch (e) {}
function f9() {
}
class C10 extends f9 {
}
let v11;
try { v11 = C10(); } catch (e) {}
const v13 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v13[8] = v13;
const v14 = [601759695];
const v15 = [1073741824,1073741823,1376142744,1073741825];
try { v15.map(0); } catch (e) {}
function f17(a18, a19, a20, a21) {
    const o29 = {
        ...v13,
        ..."Vre",
        "c": a21,
        84: arguments,
        ..."Vre",
        valueOf(a27, a28) {
            return a20;
        },
        ..."Vre",
        4: "-1073741824",
        5: -4294967295,
        6: -268435456,
    };
    %OptimizeFunctionOnNextCall(arguments);
    try { v15["find"](..."find", a21, ...v14, ...v15); } catch (e) {}
    return a19;
}
%OptimizeFunctionOnNextCall(f17);
new BigInt64Array(8998);
1031 + 1031;
function f35(a36, a37) {
    return f35;
}
const v40 = new Int8Array(7);
v40[4] = v40;
new Uint16Array(1031);
function f43() {
    ("1073741823").trimRight();
    const o46 = {
    };
    o46.e = o46;
    const v47 = o46.constructor;
    try { v47.getOwnPropertyDescriptors(f17); } catch (e) {}
    1922 >> 1922;
    const v51 = 1922 % 1922;
    v51 - v51;
    const v53 = v51 == v51;
    v53 || v6;
    for (let v55 = 0; v55 < 25; v55++) {
        v55 >>> v55;
        function f57() {
            return f57;
        }
        function f58(a59, a60, a61, a62) {
            try { a60.hasOwn(f57, v51); } catch (e) {}
            let v64;
            try { v64 = a60(a62); } catch (e) {}
            try { v64.isPrototypeOf(BigInt64Array); } catch (e) {}
            try { new a61(); } catch (e) {}
            a60.freeze();
            const v68 = a62 + a62;
            function f69() {
                return v64;
            }
            try { f69(); } catch (e) {}
            const v71 = f69.length;
            const v72 = -8;
            const v74 = f57().constructor;
            try { v74.prototype(); } catch (e) {}
            let v76;
            try { v76 = v74(); } catch (e) {}
            try { v76(); } catch (e) {}
            const v78 = v76.bind(v72, v74, v76);
            function f79() {
                return v76;
            }
            const v80 = f79();
            try { v80.null(); } catch (e) {}
            f79();
            %OptimizeFunctionOnNextCall(f79);
            f79();
            const v84 = v78.bind();
            v84.g = v84;
            v74 * v53;
            const v87 = a59.italics(typeof f69, v72);
            try { v87.match(f79); } catch (e) {}
            const v90 = new Int8Array();
            v90.entries().next(v71);
            const v93 = [];
            try { v93.reverse(); } catch (e) {}
            try { ("find").trimRight(); } catch (e) {}
            const v97 = ("find").blink("find", v90, v55);
            try { v97.link(C10); } catch (e) {}
            const v99 = v97.replaceAll;
            try { v99(f58, v68); } catch (e) {}
            return f57;
        }
        for (let v101 = 0; v101 < 5; v101++) {
            f58(v101, v47, v47, 1922);
        }
    }
    return "1073741823";
}
%PrepareFunctionForOptimization(v11);
f43();
%OptimizeFunctionOnNextCall(f43);
f43();
function f105() {
    const v107 = Symbol.for();
    const o108 = {
        [v107]: f105,
    };
    return f105;
}
f105.e = f105;
%OptimizeFunctionOnNextCall(f105);
