const v1 = new Set();
class C2 {
    2 = v1;
    #valueOf(a4, a5) {
        super[this] = v1;
        [Set];
        [C2];
        [a4];
        return v1;
    }
    static [v1] = Set;
    get g() {
        const v10 = `
            try {
                v1.size = this;
            } catch(e11) {
            }
        `;
        eval(v10);
        return eval;
    }
}
const v14 = new C2();
v14[2] = v14;
const v15 = new C2();
v15[2] = v14;
new C2();
const v20 = [1e-15,-85004.53463914909,-0.0,1000.0,0.0,285820.0759417536];
try { v20.pop(); } catch (e) {}
[0.43807225393336147,0.044411310871543264,-5.534382052685323,114770.52814236982,5.623004493111184e+307,2.220446049250313e-16,1.587334803907158];
[-1.0,3.0,2.220446049250313e-16,0.6962187334892461,-4.0,-2.0,-1000000.0];
BigUint64Array.name = BigUint64Array;
const v26 = new BigUint64Array(3847);
v26[2185];
new Float32Array(4);
2 | 2;
const v34 = new Int8Array(2);
class C35 {
}
const v36 = new C2();
try { v36.constructor(); } catch (e) {}
const v38 = [C35,C35,C35];
v38[2] = v38;
try { new Date(-268435456n, -268435456n, v38, -268435456n, -268435456n, v38, C2); } catch (e) {}
const v41 = C2.parse(v38);
v41 << v41;
const v43 = -v41;
class C44 {
    static {
        try { this.bind(v34); } catch (e) {}
        for (let v47 = 0; v47 < 25; v47++) {
            function f48(a49, a50, a51, a52) {
                a49--;
                let v54;
                try { v54 = a49.call(a51, v36, a52, a50, this); } catch (e) {}
                const v55 = a50--;
                v55 >> v55;
                Number.isNaN(v55);
                let v60;
                try { v60 = Math.round(this); } catch (e) {}
                -v60;
                const v62 = Math.tan();
                v62 | v62;
                new v54();
                const v65 = Math.setDate();
                v65 * v65;
                const v67 = a50 & a50;
                let v68;
                try { v68 = a49(v67); } catch (e) {}
                v68?.constructor;
                arguments[2];
                const v72 = arguments[2];
                f48 - v72;
                try { v72.findLast(); } catch (e) {}
                return v36;
            }
            const v76 = f48(v43, v36, v47)?.constructor;
            try { new v76(); } catch (e) {}
            const v78 = f48(v47, v43, v38);
            try { v78.propertyIsEnumerable(this); } catch (e) {}
            for (let v80 = 0; v80 < 5; v80++) {
                const v81 = f48(this, v80, v80);
                try { v81.constructor(); } catch (e) {}
            }
        }
    }
}
