function f0() {
    class C3 {
    }
    async function f4(a5, a6, a7, a8) {
        return (await C3).call();
    }
    f4.call(C3, C3, f4, f4, f4);
    const o27 = {
        get h() {
            this[218];
            try {
                super.replace(1000000.0, -57354, 1698749821, 127);
            } catch(e19) {
                const v20 = [155533.8602852358,2.0];
                for (const v24 of Array()) {
                    v20[658291203] = null;
                }
            }
            return 1000000.0;
        },
        [1000000.0]: -57354,
        "f": 1000000.0,
        [f0]() {
        },
        toString() {
        },
        "b": -57354,
    };
    return o27;
}
const v28 = f0();
f0();
const v30 = f0();
const v34 = [5,1436918233,13,-9223372036854775808,12,10779,268435439,-350312267,536870912];
function f35(a36) {
    return v34;
}
class C39 {
    static [0];
    static #b;
    static [2.0];
}
const v41 = new Set();
class C42 {
    constructor(a44, a45, a46, a47) {
        let v48;
        try { v48 = v41.clear(); } catch (e) {}
        let v49;
        try { v49 = this.concat(v48, a45); } catch (e) {}
        for (let v50 = 0; v50 < 32; v50++) {
            new Float32Array([10000]);
            new Uint8ClampedArray(9);
            v49["p" + v50] = v50;
        }
    }
    h;
    f;
    static 150 = v28;
    [-2];
    valueOf(a60, a61, a62, a63) {
        super[this] = f0;
    }
}
const v67 = new C42(v30, -873736.0639682427, -6.694913198749424e+307, -6.694913198749424e+307);
new C42(C42, -873736.0639682427, -873736.0639682427, -6.694913198749424e+307);
new C42(v67, -873736.0639682427, -6.694913198749424e+307, 4.0);
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e75) {
    }
}
function f76(a77, a78) {
    function f80(a81) {
        return a77 ^ a78;
    }
    this.onmessage = f80;
}
const o85 = {
    "type": "function",
};
new Worker(f76, o85);
new BigInt64Array(2147483649);
