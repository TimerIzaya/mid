class C3 {
    h;
    static p(a5, a6) {
        const v8 = Symbol.isConcatSpreadable;
        const t4 = "2115972667";
        t4[v8] = -4.0;
        v8 - v8;
        super.h = a6;
        try { a6(this, 0.0, "2115972667", this); } catch (e) {}
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a13;
            } catch(e15) {
            }
            try {
                this.b = a5;
            } catch(e16) {
            }
        }
        new F11(a6, v8);
        new F11(-4.0, this);
        new F11(-4.0, "2115972667");
        return "2115972667";
    }
}
let v20 = new C3();
const v21 = new C3();
new C3();
function f23() {
    return -4.0;
}
class C27 extends f23 {
    constructor(a29, a30, a31, a32) {
        super();
        Math.random();
        ++a31;
        Math.atanh(1e-15);
        try { ("2115972667").concat(a29, 0.0, a30, a32); } catch (e) {}
    }
    [-1000000000000.0] = 0.0;
    65537 = 0.0;
    static #f;
    [1000000000.0];
    #e;
    static #b = "2115972667";
    g;
    [f23] = f23;
    #e = v21;
}
new C27(1000000000.0, -4.0, -4.0, -1000000000000.0);
const v42 = new C27(-1000000000000.0, C3, 0.0, 0.0, -1000000000000.0, v20, v21);
new C27(0.0, v42, -1000000000000.0, -1000000000000.0);
for (let v47 = 0; v47 < 5; v47++) {
    v47 < v47;
    v20--;
    [1.7976931348623157e+308,-1e-15,-2.220446049250313e-16];
    [947.2158070199962,671.599689539893,-2.0,-1000000.0,700999.3212347303,1000000000000.0,1.0,0.17150595752248066,-2.2250738585072014e-308];
    [-0.0,1000000000000.0,-3.0,2.0,0.09725917150950025,-5.0,-Infinity,3.0];
    v47++;
}
for (let v57 = 0; v57 < 10; v57++) {
    const o79 = {
        m(a61) {
            let v62 = -9007199254740991;
            v62++;
            v62 >> v62;
            function f66() {
                function f68(a69) {
                    v20[65537];
                }
                this.onmessage = f68;
                this[undefined] ||= -4.0;
            }
            const v73 = [];
            const o74 = {
                "arguments": v73,
                "type": "function",
            };
            new Worker(f66, o74);
            const v77 = new Int8Array();
            let v78 = 3;
            for (let i = 0; i < 5; i++) {
                [...v78] = v77;
            }
            return v62;
        },
    };
    o79.m(o79);
}
