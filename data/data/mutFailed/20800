function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 255;
    } catch(e3) {
    }
    const o6 = {
        "maxByteLength": 1293466293,
    };
    const v7 = o6?.__defineGetter__;
    try { new v7(F0, F0); } catch (e) {}
    let v9 = 1796;
    v9++;
    const v11 = new SharedArrayBuffer(v9, o6);
    try { v11.grow(SharedArrayBuffer); } catch (e) {}
}
const v13 = new F0();
new F0();
const v15 = new F0();
const v19 = [Infinity,v13];
const v20 = [v19,v19];
Array.e = Array;
8 != 8;
const v24 = Array(8);
v24.length;
function f26() {
    return f26;
}
f26.length = f26;
const v28 = new Map();
let v29;
try { v29 = v28.set(Array, f26); } catch (e) {}
try { v29.delete(v15); } catch (e) {}
try { v29.forEach(v20); } catch (e) {}
function f32() {
    return v28;
}
const v33 = /(?=.)ha\nb\bc/gum;
class C34 extends f32 {
    static {
        this.prototype = this;
        const v36 = v24.length;
        v36 << v36;
        try { this.m(this, v36, Map, v33); } catch (e) {}
    }
}
C34.name;
const v40 = [v20,448628.94001455535,v15,F0,v19];
const v42 = -1 >>> -1;
let v43 = 2147483647;
v43--;
let v45 = 129;
v45++;
try { new Float32Array(v45, v42, v45); } catch (e) {}
const v50 = new Float32Array(1);
v50[0] = v50;
new Uint8ClampedArray(v50);
const v54 = 9n ^ 9n;
3n ^ 3n;
const v58 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
let v59;
try { v59 = v58.findLast(v40); } catch (e) {}
-2 - -2;
const v63 = new Date(-2, v58, v58, v58, -2);
let v64;
try { v64 = v63.setFullYear(v13, Float32Array, Date); } catch (e) {}
v64 * v64;
class C67 {
    constructor(a69, a70, a71) {
        const v72 = this?.constructor;
        try { new v72(v59, a70, v54); } catch (e) {}
        try { a69.getYear(); } catch (e) {}
        function f75(a76, a77, a78) {
            try {
                delete this[undefined];
            } catch(e80) {
            }
            return C67;
        }
        f75();
    }
}
try { new C67(v63, v19, v63); } catch (e) {}
10 * 10;
function f87() {
    const v88 = [];
    try { v88.findLast(v50); } catch (e) {}
    const v91 = Date.parse();
    const v92 = -v91;
    Number.e = Number;
    Number.isNaN(v92);
    class C95 {
        static {
            for (let v97 = 0; v97 < 5; v97++) {
                const v98 = v97 / v97;
                v98 >>> v98;
                function f100(a101, a102, a103, a104) {
                    a101.sticky;
                    const v106 = a102?.toString;
                    try { new v106(); } catch (e) {}
                    a103.a = a103;
                    const v108 = a101 & a101;
                    v108 !== v108;
                    a102 >>> a102;
                    a103 << a103;
                    const v113 = arguments[2];
                    v113.a = v113;
                }
                f100.name = f100;
                try { f100(v33, v50, v15, this); } catch (e) {}
                f100(v97, v92, v88);
                for (let v116 = 0; v116 < 5; v116++) {
                    v116 >> v116;
                    f100(this, v116, v116);
                }
            }
        }
    }
    const v119 = C95?.constructor;
    try { new v119(v91); } catch (e) {}
}
f87.length = f87;
f87();
const v122 = new BigUint64Array(10);
for (const v124 in v122) {
    const v125 = new Float64Array(2147483647);
    v125.BYTES_PER_ELEMENT = v125;
}
const o128 = {
    o(a127) {
        return this;
    },
};
o128["o"]();
