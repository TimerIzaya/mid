const v0 = [0,480547142,1809822823,6,-65536];
const v1 = [8,-3,24102,8,-128];
const v2 = [1];
let v4;
try { v4 = v1(v2, 6, v2, v0, v0); } catch (e) {}
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a7;
    } catch(e9) {
    }
    try {
        this.e = v2;
    } catch(e10) {
    }
}
const v11 = new F5(v0, v2);
new F5(v2, v0);
const v13 = new F5(v0, v1);
const v15 = new Uint8Array(6);
for (const v16 of v2) {
    continue;
    v15[v11];
}
new F5(v1, v2);
v4[2147483648] = v13;
try {
    new Float64Array(8, 8, 8);
    const v23 = ("boolean").normalize();
    v23[1] = v23;
    v11.toString = v4;
} catch(e24) {
    function f25(a26, a27) {
        const o28 = {
        };
        return o28;
    }
    Int32Array.bind(Int32Array, v2, Int32Array);
    const v34 = new Float32Array(2);
    v34[1] = v34;
    new Int32Array(v34);
    new Int16Array(6);
    const v39 = new BigInt64Array(4046);
    function f40(a41, a42) {
        Math.exp([-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6] | [1073741824,-46456,536870888]);
        let o48 = {
        };
        [,...o48] = v39;
    }
}
new Float64Array(8);
new Int8Array(53);
const t52 = "at";
t52[1] = "at";
const v56 = 3 != 3;
const v58 = [Worker];
v58.unshift(v56);
function f60() {
    return f60;
}
class C61 extends f60 {
}
const v62 = new C61();
function f63() {
    const v66 = [-1235077344,-4096,50383815,-8476,-9007199254740991];
    class C68 extends Set {
    }
    const v69 = new C68(v66);
    59817n < v69;
    return v2;
}
%PrepareFunctionForOptimization(v58);
const t72 = v62.constructor;
t72().name;
function F74(a76, a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    function F80(a82, a83) {
        if (!new.target) { throw 'must be called with new'; }
        function f84() {
            const v85 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
            v85.length >>>= -65536;
            return v85;
        }
        f84();
        try {
            new F80(a77, a82);
        } catch(e89) {
        }
    }
    new F80();
}
