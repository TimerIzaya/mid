const v0 = [];
new Map();
class C6 {
    static toString(a8, a9, a10) {
        return 9007199254740992;
    }
    get e() {
        this << this;
        const o19 = {
            "execution": "async",
            "type": "major",
        };
        gc(o19);
        return this;
    }
    static 0 = -1;
    7;
    9;
    [-1];
    2;
    static g;
}
new C6();
const v22 = new C6();
new C6();
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    function f31(a32, a33) {
        const v34 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
        class C35 {
        }
        const v37 = v22.replace;
        a32 = "d";
        const t31 = -1;
        t31[8] = arguments;
        try { v37(v34, a33, v0, F27); } catch (e) {}
        F27 << this;
        C35[Symbol] = v34;
        return -2;
    }
    %PrepareFunctionForOptimization(f31);
    f31(F27, f31(Map, this, 9007199254740992));
    new BigInt64Array(1073741824);
    function f46(a47, a48) {
        function f50(a51) {
            BigInt64Array || a51;
        }
        this.onmessage = f50;
        try {
            this.f = 1073741824;
        } catch(e53) {
        }
    }
    const v56 = ["function",f31];
    const o57 = {
        "arguments": v56,
        "type": this,
    };
    new Worker(f46, o57);
}
const v59 = new F27(F27, F27);
new C6(v59, F27);
