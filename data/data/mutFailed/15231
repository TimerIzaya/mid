~1;
function f7() {
    return "16";
}
try { new Date(Date, -39042, f7, 1, "4294967296", Date, Date); } catch (e) {}
const v10 = new Date();
let v11;
try { v11 = v10.getSeconds(); } catch (e) {}
try { new Uint8ClampedArray(Uint8ClampedArray, v11, Uint8ClampedArray); } catch (e) {}
new Float32Array(165);
function f19(a20, a21, a22, a23) {
    9007199254740991 | a21;
    a20 / a20;
    const v26 = a21 < a20;
    a22 >>> a22;
    const o31 = {
        n(a29, a30) {
            return v26;
        },
    };
}
let v32;
try { v32 = new Uint8ClampedArray(f7, f7, "16"); } catch (e) {}
try { v32.entries(); } catch (e) {}
new Uint8ClampedArray(256);
16 - 16;
function f37() {
    return f37;
}
const v38 = [601759695];
const v39 = [1073741824,1073741823,1376142744,1073741825];
function f40(a41, a42, a43, a44) {
    function f46() {
        return a41;
    }
    f37();
    const v49 = new Int8Array();
    v49.buffer.slice();
    %OptimizeFunctionOnNextCall(f46);
    let v53;
    try { v53 = v39["find"](..."find", a44, ...v38); } catch (e) {}
    v53 <= a43;
    return arguments;
}
try {
const t0 = 65536n;
t0(65536n);
} catch (e) {}
function f58() {
    return ([]).shift();
}
f58();
try { new Int32Array(256, Date, Int32Array); } catch (e) {}
const v63 = new Int32Array(16);
v63[4];
const v65 = v63[14];
v65 + v65;
function f67() {
    for (const v71 of Array(4087)) {
    }
    return 4087;
}
const v74 = new Uint32Array(186);
function f75() {
    const o77 = {
        "c": Array,
    };
    const v78 = o77.c;
    v78.length = v78;
    const v79 = new v78();
    try { v79.o(Int32Array); } catch (e) {}
    Date.parse(([-Infinity,1000000000.0,Infinity,-1e-15,14.557700682017867,-1.7976931348623157e+308,-4.0,6.029322461126224,-2.220446049250313e-16]).toString());
    const v86 = Set();
    class C87 extends Set {
    }
    class C88 extends C87 {
        [1] = v86;
    }
    try { v79.findLast(Array); } catch (e) {}
    const v91 = Array(4087, Array, Array);
    try { v91.findLast(Array); } catch (e) {}
    for (const v93 of v91) {
        v93 + v93;
        new Uint8Array();
        class C98 {
            #m(a100, a101) {
                function f102() {
                    return a101;
                }
                super[a101] = "f";
                %VerifyType(a101);
                return f102;
            }
            static c;
        }
        try { C98(); } catch (e) {}
        const v104 = new C98();
        class C105 {
            p(a107) {
                this.g ^= this[8];
            }
            static #n(a110, a111, a112, a113) {
                class C114 {
                    4;
                    static a;
                }
                C114();
                C114();
                C114();
            }
            7 = v74;
            #a = v104;
        }
        const v118 = new C105();
        v118[7] = v118;
        function F119() {
            if (!new.target) { throw 'must be called with new'; }
            try { this.propertyIsEnumerable(v118); } catch (e) {}
        }
        new F119();
        const v123 = v93 | v93;
        v123 / v123;
        -v123;
    }
    return f75;
}
try { f75.bind(1); } catch (e) {}
%PrepareFunctionForOptimization(f75);
f75();
%OptimizeFunctionOnNextCall(f75);
f75();
