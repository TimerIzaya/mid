const v2 = new Int8Array(1024);
const v5 = new Uint8ClampedArray(4);
const v8 = new Uint32Array(8);
function f12() {
    return Int8Array;
}
function f13(a14, a15, a16, a17) {
    const o47 = {
        "g": f12,
        "b": v8,
        ...v5,
        "h": a15,
        __proto__: v2,
        "f": f12,
        138: v8,
        ...v8,
        ...Int8Array,
        [1024](a19, a20, a21) {
            try {
                v2.c = Uint8ClampedArray;
            } catch(e22) {
                v5[this];
                delete a14?.[1073741824];
                f12();
                %PrepareFunctionForOptimization(f12);
                f12();
                f12();
                %OptimizeFunctionOnNextCall(f12);
                f12();
            }
            function F29(a31, a32, a33, a34) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.c = v8;
                } catch(e35) {
                }
            }
            new F29(4, a14, 4, a19);
            new F29(a19, a19, a19, a20);
            const v41 = !-1;
            const v42 = v41 && v41;
            new F29(4, a21, a17, !(a19 & v42) >>> v42);
            return a16;
        },
    };
    return o47;
}
f13(2, 2, 1024, 1024);
f13(4, 4, 8, 2);
const v50 = f13(4, 1024, 2, 1024);
function f51(a52, a53, a54, a55) {
    function f56() {
        const v58 = Math.expm1(a53);
        const v59 = Math.tanh(Math);
        const o60 = {
            [v59]: v58,
        };
        return o60;
    }
    f56();
    Int8Array(a53);
    %OptimizeFunctionOnNextCall(f56);
    return f51;
}
let v64 = v5[2147483649];
v64 = v8;
try {
    v50.g = 8;
} catch(e65) {
}
for (let v66 = 0; v66 < 5; v66++) {
    f51(v66, v66);
}
