const v2 = new Uint8Array(8);
function f3() {
    function F4() {
        if (!new.target) { throw 'must be called with new'; }
        Array(19793);
    }
    return F4;
}
v2[Symbol.hasInstance] = f3;
let v12 = Uint32Array;
const v13 = new v12(10);
v13.valueOf = Symbol;
let v14 = 3912;
let v16 = new Float64Array(v14);
const v19 = 4294967296 | 4294967296;
try {
    v13.f = 145253519;
} catch(e21) {
    ({"buffer":v14,"byteLength":v12,"byteOffset":v12,...v16} = v16);
    e21.__proto__;
    function f23() {
        return e21;
    }
}
const o28 = {
    "execution": "async",
    3: v14,
    "c": v13,
    "g": 145253519,
    "a": v16,
    [-1215241770n]: 4294967296,
};
d = v14;
try {
    new Float64Array("async", 1965301813);
} catch(e31) {
}
const v32 = gc(o28);
function f33(a34, a35) {
    const o44 = {
        [-4294967297n](a38, a39, a40, a41) {
            eval();
        },
    };
    return o44;
}
v32.constructor = f33;
function f45() {
    let v47 = ("Vre").codePointAt(145253519);
    v47 ^ v47--;
    return f45;
}
v32.finally();
v32.then();
v2[Symbol.hasInstance];
const v55 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
function f56(a57) {
    try { new a57(8, v2, ...v55, v19, a57, gc); } catch (e) {}
    let v60 = 13216;
    -v60;
    let v62 = v60++;
    let v63 = ++v62;
    Math.cosh(v60);
    --v60;
    v62 % a57;
    return --v63;
}
v55[Symbol.toPrimitive] = f56;
v55 >>> v13;
