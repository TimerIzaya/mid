function f3(a4, a5) {
    a4--;
    const o14 = {
        [a4]: 10,
        [1622062510](a8, a9) {
            this[36];
            return a5;
        },
        "c": a4,
        n(a12, a13) {
            return a12;
        },
        "d": 2147483649,
        ...a5,
        5: 2147483649,
        __proto__: f3,
    };
    o14[1622062510] = o14;
    return o14;
}
const v15 = f3(1622062510, f3);
const v17 = new Int16Array();
v17.lastIndexOf(v17, v15);
try { gc(); } catch (e) {}
const v22 = new Uint32Array();
Symbol.g = Symbol;
v22[Symbol.toPrimitive] = gc;
f3(10, f3(2147483649, v15));
Array.prototype;
2 + 2;
new Array(2);
const o33 = {
    ..."1p",
};
const v34 = [o33,o33,o33,o33];
const v36 = 28621 + 28621;
v36 != v36;
function f38() {
    return v34;
}
const o40 = {
    ...o33,
};
o40.length = v36;
Reflect.apply(f38, v34, o40);
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = this?.__lookupGetter__;
    try { new v44(F42); } catch (e) {}
    for (let v46 = 0; v46 < 32; v46++) {
        "p" + v46;
    }
}
try { new F42(); } catch (e) {}
const v50 = new F42();
const v51 = v50?.constructor;
try { new v51(); } catch (e) {}
const v53 = new F42();
v53.e = v53;
const o54 = {
};
o54.h = o54;
try {
    new Float64Array(127);
} catch(e58) {
}
new F42();
[];
try {
    o54.d = v34;
} catch(e61) {
}
0 - 0;
v53[v53];
const v66 = new Uint8Array();
class C67 {
    static {
        this.prototype = this;
        this.__proto__ = v66;
    }
    static set g(a70) {
        try {
            super.keys();
        } catch(e72) {
        }
    }
}
const v73 = v50[-1];
new WeakSet();
7 - 7;
const v79 = new BigInt64Array(7);
const v80 = v79?.constructor;
try { new v80(7, 0, Int16Array); } catch (e) {}
v79[v79] = v73;
gc.d = gc;
gc();
const v87 = -128n + -128n;
v87 << v87;
function F90(a92, a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
}
const v96 = new F90(undefined, undefined, -128n);
const v97 = v96?.constructor;
try { new v97(Symbol, Symbol, 28621, 1622062510); } catch (e) {}
