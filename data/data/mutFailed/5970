class C3 {
    static #g = C3;
    constructor(a5, a6) {
        function f8(a9) {
            a9 >>>= a5;
            delete a6?.[5];
            return C3;
        }
        Object.defineProperty(Math, "valueOf", { writable: true, value: f8 });
        Math.cos(Math);
        let v12 = 0;
        v12++;
        return arguments;
        try { this.hasOwnProperty(1.0); } catch (e) {}
        a5 == a5;
        try {
            this.#g = a6;
            function F17() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    let v19 = 0;
                    do {
                        v19++;
                    } while (v19 < 5)
                    new F17();
                } catch(e24) {
                }
            }
        } catch(e25) {
            e25.h = e25;
        }
        const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v29 = new Uint32Array(v27);
        let v30 = -4294967297n;
        v30--;
        const v32 = [601759695];
        const v33 = [1073741824,1073741823,1376142744,1073741825];
        function f34(a35, a36, a37, a38) {
            const v39 = a35?.constructor;
            let v40;
            try { v40 = v39(); } catch (e) {}
            function f41() {
                try { ("Vre").charAt(4096); } catch (e) {}
                const v44 = ("Vre").codePointAt();
                v44 ^ v44;
                let v46 = Float64Array;
                v46 = a36;
                b = v27;
                try {
                    v33.forEach();
                } catch(e48) {
                }
                const o59 = {
                    "c": v30,
                    valueOf(a50, a51) {
                        return v29;
                    },
                    1073741824: v40,
                    [v30](a53, a54, a55, a56) {
                        eval(a54);
                    },
                };
                return v30;
            }
            a36();
            const v63 = new Int32Array(1024);
            const v64 = v63[3];
            v64 + v64;
            1024 * v64;
            for (let v67 = 0; v67 < 5; v67++) {
            }
            %OptimizeFunctionOnNextCall(f41);
            try { v33["find"](..."find", a38, ...v32, ...v33); } catch (e) {}
            return f34;
        }
        f34();
    }
    static #e = 1.0;
    g = "number";
    #f = -9007199254740991;
    [-9007199254740991];
}
new C3("number", 1.0);
new C3(C3, -9007199254740991);
new C3(1.0, "number");
-14 - -14;
-2078225029 + -2078225029;
let v79 = 16;
v79--;
class C82 {
}
function f83(a84, a85) {
    return C3;
}
f83();
class C91 {
    static n(a93, a94) {
    }
    static [-4096];
}
const v95 = new C91();
v95[Symbol.toPrimitive] = gc;
function f98() {
    return f98;
}
const o100 = {
    ...-2,
    [v95]: -2,
    "e": C91,
    ...C91,
    "d": f98,
    get f() {
        C91[3] >>= 9;
        return -2;
    },
};
