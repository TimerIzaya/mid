257 - 257;
const v7 = [257,-351470466];
let v8;
try { v8 = v7.indexOf(0); } catch (e) {}
const v9 = [-256,v7];
const v10 = [v9,-256,v9,-15,-4294967295];
const v12 = 700182785n === 700182785n;
function f15(a16, a17, a18, a19) {
    const o20 = {
    };
    return o20;
}
const v21 = f15(f15, f15, f15, f15);
v21.c = v12;
v21.c = v21;
let v22 = -4294967297n;
v22++;
const v25 = -128 >>> -128;
const v26 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v27 = [601759695];
try { v27.fill(v22); } catch (e) {}
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    arguments.length = arguments;
    function f37(a38) {
        return a33;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f37 });
    try { arguments.toString(); } catch (e) {}
    try {
        v21[2] = v10;
    } catch(e40) {
        try {
            arguments.fuck(v25, -6);
        } catch(e43) {
        }
    } finally {
        for (let v44 = 0; v44 < 32; v44++) {
            v27["p" + v44] = v44;
        }
    }
    function f47() {
        const v49 = ("Vre")?.toLocaleUpperCase;
        try { new v49(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v53 = -268435456;
        v53--;
        -(v53 + v53);
        const o70 = {
            "c": v22,
            [522675525n](a58, a59) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v27,
            valueOf(a61, a62) {
            },
            "e": v53,
            "maxByteLength": -4294967295,
            "arguments": v26,
            ...v27,
            "type": "Vre",
            ..."Vre",
            valueOf(a64, a65) {
                return a64;
            },
            ..."Vre",
            4: "Vre",
            "c": v53,
            "type": "Vre",
            "type": "Vre",
            toString(a67, a68, a69) {
                return v22;
            },
            5: -4294967295,
            6: v53,
        };
        try { o70.valueOf(); } catch (e) {}
        return "Vre";
    }
    const v72 = f47.length;
    const v73 = v72 + v72;
    f47();
    new Int32Array(936);
    new Float64Array(64);
    new Uint16Array(257);
    Int8Array.a = Int8Array;
    try { new Int8Array(a33, a32, a33); } catch (e) {}
    Int8Array.a = Int8Array;
    const v89 = new Int8Array();
    try { v89.findIndex(v21); } catch (e) {}
    const v91 = v89.buffer;
    function f92(a93) {
        return a93;
    }
    f92.constructor = f15;
    const v94 = f92?.constructor;
    try { new v94(257); } catch (e) {}
    v91.constructor = f92;
    -2147483648;
    const v98 = v91.slice(2147483648);
    %OptimizeFunctionOnNextCall(f47);
    let v100;
    try { v100 = ("find").strike(); } catch (e) {}
    let v101;
    try { v101 = v100.match(2147483648); } catch (e) {}
    const o102 = {
    };
    o102.e = v26;
    try {
        o102.e = a33;
    } catch(e103) {
    }
    try {
        const o104 = {
        };
        o104.g = v101;
        o104.e = a33;
        o104.g = v22;
    } catch(e105) {
    }
    try {
        let o106 = {
        };
        o106.c = o106;
        function f107(a108) {
            o106 = a108;
            return a108;
        }
        Object.defineProperty(o106, "g", { set: f107 });
        o106.e = a33;
        o106.g = v22;
    } catch(e109) {
    }
    try {
        const o110 = {
        };
        function f111(a112) {
            try { v98.slice(a112, v73); } catch (e) {}
        }
        Object.defineProperty(o110, "g", { writable: true, set: f111 });
        o110.a = o110;
        o110.e = a33;
        o110.g = v22;
        o110.c = v98;
    } catch(e114) {
    }
    let v115;
    try { v115 = v29["find"](..."find", a35, ...v27, ...v29, ...522675525n); } catch (e) {}
    v115 <= a34;
    return arguments;
}
for (let v117 = 0; v117 < 5; v117++) {
    v117 - v117;
    f31();
}
%PrepareFunctionForOptimization(f31);
f31();
for (const v121 of v8) {
    v21[Symbol.split] = -48404n;
}
%OptimizeFunctionOnNextCall(f31);
f31();
