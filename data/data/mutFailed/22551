const v1 = new Map();
new Date();
new Float64Array(3219);
new v1(128);
new Int32Array(1093);
[1000000000000.0,-1.7976931348623157e+308,-714.9744183030335,1e-15];
[-1000000000000.0,-0.6936899472908582,1.1744344584786521,0.0];
const v15 = [Infinity,-1000000000.0,-3.0,331.16775367084597,0.7534488410976417,-3.5806895237786866e+306,9.077319691574942,1.0];
const v16 = [1000000000.0,-1.3776452930532159e+308,4.460522900748446e+306,-378407.8124788648,1.0,5.0,984335.4344547552,6.088853439279905,-2.0];
[-2.2250738585072014e-308,-0.0,872402.722888567,0.0,7.530358919766389];
const v18 = [1000.0,2.220446049250313e-16,2.220446049250313e-16,4.0,3.2483455168367773e+307,7.54850253244237];
new Int32Array();
class C22 extends Set {
}
const v26 = [4294967296,v18];
const v27 = [-14,-14,v15,v26,v16];
const v30 = Date();
const v31 = v30[Date];
const o32 = {
};
try {
    o32.e = v31;
} catch(e33) {
}
try {
    const o34 = {
    };
    o34.e = v31;
    o34.d = v27;
} catch(e35) {
}
try {
    const o36 = {
    };
    let v37 = 115;
    v37--;
    function F39() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v41 = 0; v41 < 1000; v41++) {
            const v44 = ("p" + v41).fontcolor();
            let v45;
            try { v45 = v44.trimLeft(this); } catch (e) {}
            v45[12];
        }
    }
    o36.e = v31;
    o36.d = v27;
    o36.b = 3219;
} catch(e47) {
    [-4.0,-3.0,-7.745906537435259,-1.2266228113922306e+308,-Infinity,-2.0,-2.0,1e-15,-694511.6819848374,-2.0] ^ "-792442332";
    class C51 {
        get e() {
            ~-7673;
        }
    }
}
try {
    const o57 = {
    };
    o57.e = v31;
    o57.d = v27;
    o57.b = v30;
} catch(e58) {
}
const v59 = new BigUint64Array(10);
function f60() {
    return 4294967296;
}
const v61 = /{}(x)(x)(x)\4*a{0}a|b/msy;
Array.__proto__ = this;
try { v27.constructor(); } catch (e) {}
for (const v66 in v15) {
    Math.tan(-23394);
}
const v70 = new BigUint64Array();
function F71(a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    const v76 = this.constructor;
    try { new v76(BigUint64Array, v70, v70); } catch (e) {}
    a75[1];
    function f80(a81, a82) {
        v59 / a82;
        arguments[1];
        v76.toString = a81;
    }
    try { f80(f60, v61); } catch (e) {}
    f80(v76, 8077n);
}
[5,v27,v26];
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C95 extends 4096 {
        }
    } catch(e96) {
        class C97 {
            constructor(a99, a100) {
                const o103 = {
                    "type": "minor",
                };
                o103.b = o103;
                gc(o103);
            }
        }
        const v105 = new C97();
        v105.constructor;
    }
}
const v107 = new F91(4096, F91);
let v110 = -9;
Math.cosh(1000000000.0);
Math.cbrt(1000000000.0);
F91 | 1000000000.0;
9223372036854775807 ^ F91;
Math.sinh(9223372036854775807);
Math.max(1000000000.0);
v110--;
Date();
const v122 = new Date();
const v123 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f124(a125, a126, a127, a128) {
    a126 & a126;
    try {
        v123.forEach(a126);
    } catch(e131) {
    }
    return f124;
}
const o135 = {
    n(a133, a134) {
    },
    __proto__: this,
    "c": 3219,
    [o32]: 4294967296,
    /*
    __proto__: v122,
    */
};
try { v1.toUTCString(); } catch (e) {}
class C137 extends Date {
    static {
        try {
        } catch(e139) {
        }
    }
}
v107 & 10;
function f142(a143, a144) {
    function f146(a147) {
        try { a147["call"]("call"); } catch (e) {}
    }
    this.onmessage = f146;
    this.onmessage |= 128;
}
const v152 = [Int32Array,5];
const o153 = {
    "arguments": v152,
    "type": "function",
};
new Worker(f142, o153);
const v157 = new Float32Array(v122, Map, v107);
const v159 = new Uint8Array(268435440);
v159[6] = v157;
new C137(4221);
class C162 extends Date {
    static get c() {
        const v164 = `
        `;
    }
}
