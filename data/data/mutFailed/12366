new Int8Array(260);
new Float32Array(4096);
const v8 = new BigInt64Array(52);
new Uint8Array(78);
new Uint8Array(1);
new Float64Array(64);
64n / 64n;
2147483648n & 2147483648n;
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
let v39 = -9223372036854775808n;
v39--;
const v43 = [601759695];
try { v43.filter(v8); } catch (e) {}
const v45 = [1073741824,1073741823,1376142744,1073741825];
"B" == "B";
function f49(a50, a51, a52, a53) {
    -a53;
    function f56() {
        return a53;
    }
    try { f56(); } catch (e) {}
    arguments.d = 1163987790;
    -9223372036854775808n & -2147483647n;
    Int8Array.h = Int8Array;
    const v68 = new Int8Array();
    const v69 = v68.buffer;
    class C72 {
        static {
            try { new this(); } catch (e) {}
            for (const v75 of "-4294967295") {
                v75[0] = v75;
            }
        }
    }
    try { new C72(); } catch (e) {}
    const v77 = v69.slice();
    v77.h = v77;
    %OptimizeFunctionOnNextCall(f56);
    let v79;
    try { v79 = v45["find"](..."find", a53, ...v43); } catch (e) {}
    !(v79 > a52);
    return arguments;
}
for (let v82 = 0; v82 < 10; v82++) {
    f49(-25283n, 522675525n, -1553n, v82);
    try { ("-268435456").trim(); } catch (e) {}
    ("function")[7];
}
%OptimizeFunctionOnNextCall(f49);
f49(null, -256, v39, "B");
