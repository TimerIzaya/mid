const v3 = new Int32Array(127);
const v5 = new isFinite(127, 127, 127);
let v6 = v5.constructor;
const v7 = new v6(v3);
class C10 {
    static ["number"] = 1.2320742259032293;
    static #p(a12) {
        try {
            this.valueOf = a12;
        } catch(e13) {
        }
        return a12;
    }
    static get h() {
        try {
            this.valueOf = 1.2320742259032293;
        } catch(e15) {
        }
        return this;
    }
}
const v16 = new C10();
const v17 = new C10();
const v18 = new C10();
try { ("e").concat("number"); } catch (e) {}
let v23 = -46689;
const v24 = v23--;
const v28 = ["floor",null,536870887,v18];
const v29 = [v28,v28,v16,"e",v28];
if (v24 == v29) {
    function F31(a33, a34, a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.c = "e";
        } catch(e37) {
        }
        try {
            this.a = "floor";
        } catch(e38) {
        }
        try {
            this.e = a35;
        } catch(e39) {
        }
    }
    const v40 = new F31(300520158, 536870887, v17, "number");
    const v41 = new F31(-3, v6, v7, "floor");
    new F31(536870887, v23, v40, "number", "floor", v41);
} else {
    v6 |= v24;
}
const v43 = [v16,null,-3,536870887,v29];
0 << 0;
const v47 = (2136873598).constructor;
try { v47.isFinite(v43); } catch (e) {}
const v49 = new v47();
try { v49.toFixed(v47); } catch (e) {}
try { v49.toFixed(0); } catch (e) {}
