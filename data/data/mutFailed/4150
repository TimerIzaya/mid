class C3 {
    constructor(a5, a6) {
        for (let v7 = 0; v7 < 32; v7++) {
            a5["p" + v7] = v7;
        }
    }
    static #d;
    1761004164;
    [-1024] = -1024;
    1000;
    1073741824;
    static [-1024];
    [9];
}
const v10 = new C3(9, C3);
const v11 = new C3(-1024, -186027.24269830645);
const v12 = new C3(v11, v10);
const v13 = [1.3590110962533417e+308,-1000000000.0,6.471410820005886,-3.0,0.9772760292941812,966.3659639238917,-6.508957510523706];
const v14 = [0.0,Infinity,-378.99654013641907,-3.787202116426751e+307,4.0,5.846813734122286];
const o17 = {
    "maxByteLength": 3145,
};
const v19 = new SharedArrayBuffer(128, o17);
const v21 = new Float32Array(v19);
v21[0];
[-1000000000000.0,1.0,1.5705988657978124e+308,-4.661352452600478e+307,4.331024700517048,-1000.0,2.0,-5.715477598195198,-3.5967508969944657e+307];
const v24 = [-186027.24269830645];
const v25 = [v10,v14,-1024,v24,v13];
const v26 = [C3,v14,v14];
function f27(a28, a29) {
    const o36 = {
        43: -186027.24269830645,
        [v11](a31, a32, a33) {
            v24.length;
            try {
                a28.length = 9;
            } catch(e35) {
            }
            return this;
        },
        __proto__: v24,
        "e": -1024,
        "f": v14,
        "d": a28,
        ...a29,
    };
    return o36;
}
f27(v12, v26);
f27(v11, v25);
f27(v24, v11);
const v40 = [-Infinity,-1000000.0,-964229.7889241329];
const v41 = [1000.0,7.013617100191173,-351.0818852767976,0.6726521994945021,0.0654548428416345,0.0,357.95756141696074,-114535.71398965968];
const v42 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
const v43 = [v42];
[v40,v41,v43,v43,v42];
[v41,v42,v42];
1000000000000.0 - 1000000000000.0;
let v49 = 4.9807369083218855;
v49++;
function f51() {
    return v49;
}
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this.constructor;
    try { new v57(a55, a54, a56); } catch (e) {}
    a56 + a56;
    try {
        this.b = v42;
    } catch(e60) {
    }
}
F52.arguments;
const v62 = new F52(1000000000000.0, v43, 0.0746389278020293);
v62.length = v62;
new F52(0.0746389278020293, v42, 0.0746389278020293);
class C64 extends F52 {
    512 = v42;
}
C64.prototype = C64;
new C64();
new C64();
new C64();
-1e-15 ^ -1e-15;
const v73 = 1073741823 & 1073741823;
v73 + v73;
