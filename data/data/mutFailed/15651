class C3 {
    #valueOf(a5, a6) {
        try {
            this.g = this;
        } catch(e7) {
        }
        return a6;
    }
    static #a;
    constructor(a9) {
        try {
        } catch(e10) {
        }
        try {
        } catch(e11) {
        }
        for (const v12 of "bigint") {
        }
    }
    static 2920647479;
    #a;
    static ["bigint"] = -5.0;
}
new C3();
new C3();
new C3();
const v18 = new Float32Array();
v18["copyWithin"](..."-11838");
[-4294967297,1073741824,10000,-65535,536870887,51805,4294967295,255];
[-2,-8];
[-2147483648,2147483647,65536,-1579491349];
function f24() {
    for (let i27 = -5.0, i28 = 10; i27 < i28;) {
    }
}
for (const v35 in [1000.0,-1000.0,0.4309916776051478,1000000.0,-1.0,-560.6262021777798,NaN,3.0]) {
    const o36 = {
    };
}
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e40) {
        function f41() {
            const o44 = {
                toString() {
                },
                n() {
                },
            };
        }
    }
}
function f45() {
}
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    function f52(a53) {
    }
    class C54 {
    }
    for (let i57 = 0, i58 = 10;
        i57 < i58;
        (() => {
            const v62 = [601759695];
            const v63 = [1073741824,1073741823,1376142744,1073741825];
            function f65(a66, a67, a68, a69) {
                function f70(a71, a72) {
                    return i57;
                }
                f70(v63, C54);
                try { v63["find"](..."find", a69, ...v62, ...v63, ...522675525n); } catch (e) {}
                const v77 = new Date();
                const v79 = new Set();
                v79.add(v77);
                let [v81,,...v82] = v79;
                v81.setUTCMilliseconds();
                return a68;
            }
            for (let v84 = 0; v84 < 10; v84++) {
                f65(v84, f65, i57, v84);
            }
            i57++;
        })()) {
    }
    try {
    } catch(e89) {
    }
}
const v90 = new F48(10000, 579501296);
const v93 = new Float32Array(Float32Array, Float32Array);
for (let v94 = 0; v94 < 25; v94++) {
    function f95(a96, a97, a98, a99) {
        a96[0] = a96;
        a97 <= 10000;
        const v101 = [1630629478,9,2034969337];
        for (let v102 = 0; v102 < 25; v102++) {
            v101.__proto__;
        }
        f45();
        const v106 = arguments?.__lookupGetter__;
        try { v106(v106, f95, a97); } catch (e) {}
        let v108 = -1073741824n;
        v108--;
        function F110(a112, a113, a114, a115) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a113;
        }
        try { undefined(); } catch (e) {}
    }
    for (let v118 = 0; v118 < 10; v118++) {
        f95(v93);
    }
}
const v122 = new Float64Array(256);
const v123 = [1073741824,-523864342,1161249740];
const o124 = {
    ...v122,
    ...v123,
};
const v125 = v90 instanceof -24894;
new Int8Array(268435456);
Math.expm1(3375);
%VerifyType(v125);
