[910421.7501429634,-2.0,-790145.7979084314,-671.5469295719397];
const v1 = [-306682.56038952863,-2.220446049250313e-16,-710.3549095485653,0.5585300779579792,-2.2250738585072014e-308,2.220446049250313e-16,-1.4020413579812202e+308];
ReferenceError(-1073741824, 9007199254740991n);
const v6 = [1840677197,-43868];
const v9 = new Int8Array(6);
for (const v10 in v9) {
    Object.defineProperty(v6, v10, { configurable: true, value: v10 });
}
const v11 = [0.0,1e-15,1.0355825912110964e+308,0.9852586792270316,-2.2250738585072014e-308,-0.0,8.353509273725109e+306,-2.0,-7.3915721435015165];
const v13 = new Set();
const v14 = /((?:ab)|cde)/vimy;
const v15 = /F(?<=a)/gums;
const v18 = Array.constructor;
new v18(v14, this, Array, Array, v18);
const v20 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this.constructor;
    try { new v26(a24, a23, a25); } catch (e) {}
    a25 + a25;
    try {
        this.b = v20;
    } catch(e29) {
    }
}
class C30 extends F21 {
    512 = v20;
}
new C30();
v1.multiline = v15;
const v32 = /foAW/udms;
class C36 {
    #m(a38, a39, a40) {
        try {
            a40.#m(a40, v11, a39);
        } catch(e42) {
        }
        return v32;
    }
    m(a44, a45) {
        super[this] = a45;
        super.f >>>= a44 & this;
        function f47() {
            try { WeakMap.apply(Int32Array, Date); } catch (e) {}
            ([601759695]).unshift(3);
            return a44;
        }
        return -7;
    }
}
new C36();
new C36();
const v57 = v13?.constructor;
try { new v57(); } catch (e) {}
const v59 = new C36();
try { v59.m(-7, v13); } catch (e) {}
("object")[5];
function* f65(a66) {
    [9007199254740990,-4294967296,-1205995130,-12581,9];
    return yield v11;
}
([-7.127262073336987e+307,9.142894664271836,5.0]).toLocaleString();
function f74(a75, a76, a77, a78) {
    a76 | a76;
    const v80 = a75 / a75;
    const v81 = a76 < a76;
    let v82 = a77 >>> a77;
    v82++;
    const o87 = {
        "b": a75,
        "c": a78,
        n(a85, a86) {
            return v81;
        },
    };
    return v80;
}
for (let v88 = 0; v88 < 625; v88++) {
    f74(Uint8Array, 2);
}
const v91 = [];
class C92 {
    static #g = v91;
    static d;
    static #c;
    static e;
    static {
    }
}
const o96 = {
    "arguments": v11,
    "type": "function",
};
