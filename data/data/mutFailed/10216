function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = this;
    try {
        this.b = 255;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
/Kna(?!bbb|bb)c/gvmy;
/(x)(x)(x)\1/udisy;
/an[\11a]/gim;
class C17 {
    b = "b";
    constructor(a19, a20, a21) {
        for (let v22 = 0; v22 < 5; v22++) {
            function f24() {
                const o32 = {
                    [-4294967297n](a26, a27, a28, a29) {
                        eval(v4);
                    },
                };
                return f24;
            }
            f24();
            %OptimizeFunctionOnNextCall(f24);
        }
    }
}
function f34(a35) {
    v6.b;
    [1000000.0,-4.0,-2.0,2.220446049250313e-16,1.7976931348623157e+308,1000000000.0,-5.0,1e-15,0.2487453116836582,449277.93690453866];
    const v38 = [-6.305008828931564];
    [-1.7976931348623157e+308];
    return v38;
}
C17[Symbol.toPrimitive] = f34;
try { new C17(); } catch (e) {}
const v43 = new C17();
const v44 = v43?.constructor;
try { new v44(); } catch (e) {}
const v46 = new C17();
function f47(a48) {
    function F49() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            new F49();
            /Ckza\Wb?/vis;
            /Ma\W+/gudm;
        } catch(e54) {
        }
    }
    return F49;
}
v46.constructor = f47;
function F55(a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this.constructor;
    const v59 = v58.bind(F55, F55, F55);
    try { v59(); } catch (e) {}
    try { new v58(); } catch (e) {}
}
const v62 = new C17();
const v63 = v46?.constructor;
try { new v63(); } catch (e) {}
class C65 {
}
const v67 = new BigInt64Array();
function f69(a70, a71) {
    const o73 = {
        get h() {
            return this;
        },
        [a71]: 4,
        2778757984: a70,
        "h": v67,
    };
    return f69;
}
class C74 extends C17 {
}
function f75(a76) {
    const v77 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
    const o87 = {
        [null]() {
            for (let v80 = 0; v80 < 500; v80++) {
                v80++;
                const o86 = {
                    [v77](a83, a84, a85) {
                    },
                    ...v80,
                };
            }
        },
    };
    o87.null();
    return Symbol;
}
C74.toString = f75;
const v89 = new C74(C17, v62, C17);
const v90 = v89?.constructor;
try { new v90(); } catch (e) {}
new C74("b", v89, C17);
const v93 = new C74(C17, v62);
const v94 = v93?.constructor;
try { new v94(); } catch (e) {}
[-128,-204399241,1126169676,-39466,-37076,268435456,9223372036854775807,536870888,15798,-1632967117];
v44 < v89;
-4294967297n ^ -4294967297n;
/5*/gi;
const v102 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v103 = [601759695];
const v104 = [1073741824,1073741823,1376142744,1073741825];
const t115 = "b";
t115.e = "B";
522675525n ^ 522675525n;
function f108(a109, a110, a111, a112) {
    function f114() {
        const t120 = "byteOffset";
        t120[4] = Float64Array;
        new BigInt64Array(1);
        -4294967295 | -4294967295;
        Float64Array.name;
        const v125 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v127 = Symbol.toPrimitive;
        const o134 = {
            toString(a129, a130) {
                const v131 = a112 && Float64Array;
                function f132() {
                    a129 *= v127;
                    return Float64Array;
                }
                Object.defineProperty(v131, "valueOf", { value: f132 });
                v131 <= v125;
                return this;
            },
        };
        try { o134.propertyIsEnumerable(C74); } catch (e) {}
        -268435456 - -268435456;
        const o164 = {
            "c": -4294967297n,
            [522675525n](a139, a140) {
            },
            "c": v103,
            valueOf(a142, a143) {
            },
            "b": -4294967295,
            [-4294967297n](a145, a146, a147, a148) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v102,
            ...v103,
            "type": "Vre",
            ..."Vre",
            valueOf(a153, a154) {
            },
            "type": "byteOffset",
            o(a156) {
                const o158 = {
                };
                gc(o158);
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a161, a162, a163) {
                return a109;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    try { f114(); } catch (e) {}
    f114();
    const v168 = new Int8Array();
    v168.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f114);
    let v173;
    try { v173 = v104["find"](..."find", a112, ...v103, ...v104, ...522675525n); } catch (e) {}
    v173 <= a111;
    return arguments;
}
for (let v175 = 0; v175 < 10; v175++) {
    -v175;
    f108();
}
%OptimizeFunctionOnNextCall(f108);
f108();
function F179() {
    if (!new.target) { throw 'must be called with new'; }
}
