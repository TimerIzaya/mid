class C3 {
    ["number"];
    #n(a5) {
        [-2.0];
        [1000000000000.0,NaN,7.337832364754785,56055.088887919206,-0.8298267559258896,-1e-15];
        const v8 = [274560.7571070655,-4.0,-6.656708982686048,5.531547750149262,2.0,1000000000000.0];
        v8.__proto__;
        v8["flatMap"](a5, a5);
        return -2147483647;
    }
    static d = C3;
    static #b;
    #g = "number";
}
let v12;
try { v12 = new C3(); } catch (e) {}
const v13 = new C3();
const v14 = new C3();
v14.b = v14;
const v15 = new v13();
const v16 = v15.a;
[128,268435441,-2147483647,4,268435440,257,2];
[64];
[-9223372036854775807,1205542331];
1096624795n + 1096624795n;
-536870912n ^ -536870912n;
try { BigUint64Array.from(512n); } catch (e) {}
const v28 = new v16(3768);
const v31 = new BigInt64Array(4046, v15);
let v32 = 115;
v32 << v32;
try { new Int8Array(v28, BigInt64Array, v13); } catch (e) {}
const v36 = new Int8Array(3768);
function f37(a38, a39) {
    a38 >>> a38;
    v32++;
    const o50 = {
        get d() {
            this[v32] /= 4046;
            let v44 = -908890636;
            this & --v44;
            Math.log(4046);
            return 4046;
        },
        "d": a38,
        ...a38,
        get e() {
            v12.d;
            return a39;
        },
        __proto__: v36,
        ...a39,
        ...BigUint64Array,
        536870888: BigInt64Array,
    };
    [,...a38] = v31;
    const v51 = a39?.[4046];
    ArrayBuffer.e = ArrayBuffer;
    let v53 = 3035;
    v53--;
    const o55 = {
        "maxByteLength": v53,
    };
    const v58 = new v51(512, o55, 512 > 512);
    new v16(v58);
    return a38;
}
f37(v32, 3768);
f37(4046, 3768, Int8Array);
const v63 = f37(4046, 4046);
v63 + v63;
try { Date.now(); } catch (e) {}
const v67 = v32?.UTC;
try { new v67(v67, 4046, 4046, Date, BigUint64Array, BigUint64Array, Date); } catch (e) {}
Uint8ClampedArray.length = Uint8ClampedArray;
const v70 = new Uint8ClampedArray(Date);
const v71 = v70[2];
v71 - v71;
