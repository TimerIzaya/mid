function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 751430727;
    } catch(e3) {
        class C4 {
            constructor(a6, a7, a8, a9) {
                const v10 = this.constructor;
                try { new v10(a9, a8, C4); } catch (e) {}
                a7[3] = a7;
            }
        }
    }
    try {
        this.c = 751430727;
    } catch(e12) {
    }
    try {
        this.g = 751430727;
    } catch(e13) {
    }
}
new F0();
new F0();
new F0();
new Set();
new BigInt64Array();
const v27 = [601759695];
function f28() {
    return ([-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0]).push(v27);
}
f28();
new Int16Array(8);
const v38 = [65537,1073741825,7841,-12,13];
const v39 = [1073741823,4294967295];
v39[1] = v39;
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    try { new v45(a42, a43, a43); } catch (e) {}
    a42.pop();
    a44.g = a44;
}
new F40(v38, v39, WeakSet);
new Uint8ClampedArray(2744);
new BigUint64Array(2);
for (let i55 = 0, i56 = 10;
    i55 < i56;
    (() => {
        const v60 = new i55();
        v60.toGMTString();
        const v62 = [1073741824,1073741823,1376142744,1073741825];
        function f63(a64, a65, a66, a67) {
            v62.indexOf();
            return a67;
        }
        %OptimizeFunctionOnNextCall(f63);
        i56--;
        let v71 = BigInt64Array;
        const v72 = new v71(3768);
        let v73 = undefined;
        const v74 = v71++;
        const v75 = v74 >> v74;
        i55++;
        class C79 {
        }
        async function f80(a81, a82, a83, a84) {
            (await C79).call(8, Uint16Array);
            return a82;
        }
        let o87 = {
        };
        [,...o87] = v72;
        v73 = v75;
        new Uint16Array();
        for (let v90 = 0; v90 < 5; v90++) {
            function f91() {
                let v92 = f91 % Uint16Array;
                v92--;
                for (const v97 of Array(4087)) {
                }
                return Uint16Array;
            }
            f91();
        }
    })()) {
}
