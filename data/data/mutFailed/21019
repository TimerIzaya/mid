const o2 = {
};
function f4(a5, a6, a7, a8) {
    "valueOf" | a6;
    a5 / a6;
    const v11 = a6 < a6;
    v11 >>> a7;
    const o16 = {
        n(a14, a15) {
            return v11;
        },
    };
}
class C18 {
    #n(a20, a21) {
        (this instanceof ("g")["toJSON"]) + this;
        const v26 = [];
        Reflect.apply(a21.trimEnd, a21, v26);
        return a20;
    }
}
const v29 = new C18();
try { v29.constructor(); } catch (e) {}
const v31 = new C18();
try { v31.constructor(); } catch (e) {}
const v33 = new C18();
function f34(a35, a36) {
    return f34;
}
new Promise(f34);
const v39 = v33?.constructor;
let v40;
try { v40 = new v39(); } catch (e) {}
const v41 = v33?.constructor;
let v42;
try { v42 = new v41(); } catch (e) {}
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
function f45() {
    new URIError();
    const v48 = /(x)(x)(x)\1/uis;
    function f49(a50, a51, a52, a53) {
        const o60 = {
            2: a52,
            __proto__: a53,
            [v48](a55, a56, a57, a58) {
                super.test();
            },
        };
        return a50;
    }
    return v29;
}
try { new Set(); } catch (e) {}
const v63 = new Set();
const v64 = v63?.valueOf;
try { new v64(); } catch (e) {}
const v66 = [15,52917,-9223372036854775807,-647320912,1463936330,-11132,-65537,1005084643,16,1073741823];
try { v66.pop(); } catch (e) {}
for (let v68 = 0; v68 < 5; v68++) {
    v68 + v68;
    function f70() {
        const v72 = ("Vre").fixed("Vre");
        v72[6] = v72;
        BigUint64Array.bind();
        ("n").split("n", 2147483647);
        try { v72.strike(); } catch (e) {}
        const v79 = v72.concat(v66);
        try { v79.toWellFormed(); } catch (e) {}
        return v79;
    }
    let v81 = -7;
    v81--;
    const t72 = "function";
    t72[v40] = 47457;
    const v85 = new WeakSet();
    function F86(a88, a89) {
        if (!new.target) { throw 'must be called with new'; }
        const v90 = this.constructor;
        try { new v90(); } catch (e) {}
        this.e = v85;
    }
    let v92;
    try { v92 = f70(); } catch (e) {}
    try { v92.blink(); } catch (e) {}
    const v94 = f70();
    try { v94.trimRight(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f70);
    class C96 {
    }
    f70(C96, 47457);
    function f100(a101, a102) {
        const o104 = {
            get c() {
                let v103 = this;
                v103 += v103;
                return a102;
            },
            "b": -65537n,
            __proto__: a101,
            ...a101,
            "a": a102,
            6: 4294967297n,
            "c": 4294967297n,
        };
        return o104;
    }
    f100(f100, -65537n);
    Reflect.construct(f100(f100, f100).h, v66);
}
