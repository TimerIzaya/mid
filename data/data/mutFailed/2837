const v0 = /xyz{0,1}ja.a(?=b)/ui;
const v1 = /PXGL/guim;
/e/vdimy;
class C3 {
    static #toString(a5) {
        let v8 = 5.62892459674069;
        const v9 = 536870887 % 536870887;
        Math.log(v0);
        v8--;
        let v12 = a5--;
        const v13 = --v12;
        v9 || 536870887;
        return v13;
    }
    #b;
    constructor(a16, a17, a18, a19) {
        a19.match(a18);
    }
    [v1];
    static b = v1;
}
new C3();
new C3();
new C3();
new Map();
new Array(2);
const v33 = new Set();
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    gc();
    const o40 = {
    };
    function f41() {
        const o48 = {
            m() {
                const o46 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o46);
            },
        };
        return o48;
    }
    try {
        this.d = a36;
    } catch(e49) {
        for (let [v50,v51] of a36) {
            try {
                v33.values();
            } catch(e53) {
            }
        }
    }
    try {
        this.h = v33;
    } catch(e54) {
    }
    try {
        const v55 = v33[this];
        try {
            new F34(v55, -268435456n);
        } catch(e58) {
        }
        this.b = Set;
        ("boolean").normalize();
        class C62 extends Map {
        }
    } catch(e63) {
    }
}
const v64 = new F34(Set, Set);
Set.constructor(Set);
function f67() {
    Math.max(4.0, 4.0);
    return 4.0;
}
f67();
new F34(Set, F34);
const v72 = new F34(v64, F34);
const v76 = [65537,268435441,63298,-5,1235122603];
const v77 = [128,215394418];
const v78 = v77.entries();
const v79 = [-2,-4294967296,4294967297];
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
}
const v86 = new F80(-714582153, F80, -714582153, v77);
const v88 = new F34(v72, null);
new BigUint64Array(0);
new Int32Array(1519);
v86.length;
const v96 = new F80(9, v86, 9, v79);
v96.b = v96;
const v97 = new F80(1024, v96, v79, v79);
const v105 = ("string").trimStart();
v78[3];
let v109;
try { v109 = v105(); } catch (e) {}
v76[v109] = v77;
0 ^ 9;
const v114 = -1000;
Array().unshift(3);
class C119 extends -1 {
}
const v120 = new C119();
Reflect.isExtensible(v120);
~9;
v114 >>> v114;
a = ("string").length - F80;
v33[v96];
v88.__proto__;
-35417 - -35417;
let v131 = undefined;
v131 = v97;
