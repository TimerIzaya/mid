[];
new Float32Array(192);
const v6 = new Int32Array(6);
new Int32Array(256);
function f10() {
    return 256;
}
let v11 = /(?:ab){4,7}?/vdiy;
v11 -= v11;
!6;
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v6;
    } catch(e18) {
    }
}
new F13(256, 192, 6);
new F13(192, 192, v11);
new F13(v11, 6, v11);
const v22 = /WV^xxx$+/gy;
/wY(x)(x)(x)\1*M(a\1)+/vdy;
const v28 = new Uint8Array(Uint8Array);
function f29(a30, a31, a32, a33) {
    const v34 = a32++;
    v34 * v34;
    a32 % a32;
    const o37 = {
        ...v28,
    };
    o37[2];
    let v39;
    try { v39 = o37.n(a31); } catch (e) {}
    return v39;
}
try { v22.exec(Float32Array); } catch (e) {}
f29(Uint8Array, v28, v28, f10);
%PrepareFunctionForOptimization(f29);
f29(Uint8Array, v28, v28, f10);
f29(Uint8Array, v28, v28, f10);
%OptimizeMaglevOnNextCall(f29);
f29(Uint8Array, v28, v28, f10);
for (let v45 = 0; v45 < 500; v45++) {
    f29();
}
