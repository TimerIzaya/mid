[];
function f6() {
    return BigUint64Array;
}
function f7(a8) {
    f6();
}
Object.defineProperty(BigUint64Array, "d", { writable: true, configurable: true, get: f6, set: f7 });
new BigUint64Array(3231);
for (let i14 = 0, i15 = 10;
    (() => {
        eval();
        const v18 = i14 < i15;
        BigUint64Array.d = BigUint64Array;
        const v21 = new BigUint64Array(3375);
        let [v22,,v23,...v24] = v21;
        v23--;
        try { v24.reduce(v21); } catch (e) {}
        v22--;
        return v18;
    })();
    (() => {
        i14 >>> i14;
        const v31 = i14++;
        v31 - v31;
    })()) {
}
const v36 = new Uint8Array(45);
v36.BYTES_PER_ELEMENT = v36;
Uint8ClampedArray.length = Uint8ClampedArray;
new Uint8ClampedArray(4096);
const v41 = new Set();
class C42 {
    b = v41;
}
const v43 = C42.prototype;
let v44 = "clear";
v44[2] = v44;
v41[v44]();
const v46 = new C42();
const v47 = new C42();
function f48() {
    return 65535;
}
function f49(a50) {
    const o51 = {
    };
    try {
        o51.e = C42;
    } catch(e52) {
    }
    try {
        const o53 = {
        };
        o53.e = C42;
        o53.g = v43;
    } catch(e54) {
    }
    try {
        const o55 = {
        };
        o55.e = C42;
        o55.g = v43;
        o55.d = a50;
    } catch(e56) {
    }
    try {
        const o57 = {
        };
        o57.e = C42;
        o57.g = v43;
        o57.d = a50;
    } catch(e58) {
    }
}
Object.defineProperty(v47, "p2", { configurable: true, get: f48, set: f49 });
function f59(a60, a61, a62, a63) {
    for (let v64 = 0; v64 < 25; v64++) {
        class C67 {
            set a(a69) {
                v44 = this;
                const o70 = {
                };
                o70.g = v44;
                const o71 = {
                };
                o71.g = v44;
                const o72 = {
                };
                o72.g = v44;
                const o73 = {
                };
                o73.g = v44;
            }
        }
        C67.f = "p";
        C67.f = C67;
        const v74 = new C67();
        v74.h = v44;
        const v75 = v74?.constructor;
        try { new v75(); } catch (e) {}
        function F77(a79, a80, a81) {
            if (!new.target) { throw 'must be called with new'; }
            a79 / a79;
            a80 == a80;
            a81.h = a81;
        }
        F77.b = F77;
        new F77(65536, "p", v74);
        const v85 = "p" + v64;
        try { v85.strike(); } catch (e) {}
        a61[v85] = v64;
    }
    return a63;
}
f59(v46, v47);
gc.length = gc;
gc();
