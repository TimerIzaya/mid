class C3 {
    static p(a5, a6) {
        this.e <<= super.f;
        return "bigint";
    }
    static {
        ("bigint")?.constructor;
        const v13 = new Uint8Array();
        Date(v13);
        let v17 = undefined;
        const o18 = {
        };
        v17 = o18;
        function F19(a21, a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
            const v24 = this.constructor;
            try { new v24(); } catch (e) {}
        }
        class C26 extends F19 {
            65537 = v17;
        }
        new C26();
        this.f &= 1611372655;
        ("bigint")[128];
        this[1385430426];
    }
    static [1611372655];
    static #e = "bigint";
    static get c() {
        eval();
    }
    #b = "m";
    #e;
}
new C3();
new C3();
new C3();
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v38 = 0; v38 < 500; v38++) {
        ("p" + v38).fontcolor().trimLeft()[12].substring();
        this || (this * this);
    }
}
new F36();
[-3.0,-1000000000.0,0.9543811425255059,140845.884257477,-2.220446049250313e-16,0.9851182700884712,834350.6694325695,1000000000.0,1000.0,1e-15];
[0.8398601711396659,-1000000000000.0,3.0,712.7840951708661,0.6573341715361362,0.0,-1000000000.0];
const o51 = {
    "maxByteLength": 10000,
};
Math.sinh(0);
[-2.220446049250313e-16,7.114500662547211e+307,2.0,-946408.6720254649,-1.6879922462649368e+308];
new Set();
[-1000000000000.0,-1.7976931348623157e+308,0.0,-2.0,-1.5675018205863862e+308];
[279.65686015778124,2.0,-1e-15,-543104.4393699784,-3.0,1.097573983422509e+308,0.857364992631377];
[1000.0,694.2639174020599,0.2160482965377778,508508.6079584942,983.4868103594799,2.220446049250313e-16];
class C62 {
}
const v63 = new C62();
const v64 = new C62();
function f65(a66, a67) {
    const o76 = {
        [-943.3768400471749]: v64,
        [a67](a69, a70, a71) {
        },
        p(a73, a74) {
            this.toString(a74, this, v63, a67);
            return a66;
        },
    };
}
%PrepareFunctionForOptimization(f65);
f65();
f65();
%OptimizeFunctionOnNextCall(f65);
const o79 = {
};
const v81 = -9007199254740991 >> -9007199254740991;
v81 - v81;
f65();
