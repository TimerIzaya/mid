const v0 = /9xyz{0,1}?/viy;
const v1 = /(x)(x)(x)\1/vdmsy;
const v2 = /la\w/gumy;
const v3 = [v2,v2,v1,v0,v2];
const v4 = [v1,v1,v0,v0];
const v5 = [v2];
const v6 = [-1.7976931348623157e+308,0.7104124723074083,2.0,-2.2250738585072014e-308];
let v7;
try { v7 = v6.concat(v3); } catch (e) {}
const v8 = [1000.0];
v8[0] = v8;
const v9 = [-1.4814170817671288e+308];
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f14(a15, a16) {
            a12.d = a15;
            try { a16.toString(); } catch (e) {}
            a16.constructor(a16);
            return f14;
        }
        const v20 = new Promise(f14);
        try { v20.then(F10, v20); } catch (e) {}
        this.f = v0;
    } catch(e22) {
    }
    1e-15 - 1e-15;
    const v28 = [];
    const v30 = Reflect.apply(v9.keys, v3, v28);
    try { v30.next(); } catch (e) {}
    try {
        a12.c = a12;
    } catch(e32) {
    }
}
try { new F10(v8, v3); } catch (e) {}
new F10(v1, v4);
new F10(v1, v8);
new F10(v1, v5);
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v38 = new v7(Uint8Array);
function f39(a40, a41, a42, a43) {
    a42++;
    const v45 = ++a42;
    const v46 = v45 - v45;
    function f47() {
        return f47;
    }
    a43.search;
    const o50 = {
    };
    o50.h = o50;
    Symbol(o50);
    let v52 = v45 * v46;
    v52--;
    a42 || a42;
    const o55 = {
        ...Symbol,
    };
    o55[2] = o55;
    o55[1];
    v4[2] = o55;
    o55[2];
    Int8Array.BYTES_PER_ELEMENT = Int8Array;
    const v59 = new Int8Array();
    const v60 = v59.buffer;
    2147483648 + 2147483648;
    const v63 = v60.slice(2147483648);
    let v64;
    try { v64 = v63.transferToFixedLength(); } catch (e) {}
    const v65 = v60[1];
    v64 * v65;
    return v65;
}
for (let v67 = 0; v67 < 500; v67++) {
    f39();
}
class C69 {
    static toString(a71, a72) {
        const v74 = super[a72];
        try {
            const v75 = delete this[v74];
            v75 && v75;
            this[C69];
        } catch(e78) {
        }
    }
}
const v79 = new v38();
const v80 = v79?.constructor;
try { new v80(); } catch (e) {}
v79.constructor;
