const v0 = [0.5047523275522513,-219.03034772884064,-9.32610564135673,-Infinity,-338.3082547686662,-1e-15,5.0,1000000000.0,-5.0,-3.0];
[1000000000.0,-5.624517910851903,4.218180664749427,-9.302917344603278,0.5559094934196479,0.4006219984777607,-1.7976931348623157e+308,495.9784852010357,0.052957019622362766];
const v2 = [-3.0,-1000.0];
try { ("-128").trimStart(); } catch (e) {}
let v5;
try { v5 = ("-128").toLowerCase(); } catch (e) {}
try { v5.replaceAll(v2, v2); } catch (e) {}
let v9;
try { v9 = ("function").toLocaleLowerCase(); } catch (e) {}
v9 == v9;
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try { a13.italics(); } catch (e) {}
    const v16 = a14[3];
    try { v16.fontsize(a13); } catch (e) {}
    try {
        this.h = v2;
    } catch(e18) {
    }
    try {
        this.a = a13;
    } catch(e19) {
    }
    try {
        this.c = v0;
    } catch(e20) {
    }
}
const v21 = F11.prototype;
const v22 = new F11("1024", "-128");
new F11("function", "function");
const v24 = new F11("-128", "1024");
v24.f = v24;
v24.a = v24;
2840 === 2840;
Uint8ClampedArray.d = ~2840;
Uint8ClampedArray.d = Uint8ClampedArray;
new Uint8ClampedArray(2840);
257 ^ 257;
Float32Array.BYTES_PER_ELEMENT;
const v34 = new Float32Array(257);
function f35() {
    v21 instanceof v21;
    return -9.705945433175923e+307;
}
v34.valueOf = f35;
v34[31] = v34;
new Int16Array(15);
/[]\u0034jC\P{sc=Greek}/gusy;
let v47 = 243;
v47--;
const v50 = Uint8ClampedArray?.d;
try { new v50("4", v22, v24); } catch (e) {}
Int16Array.BYTES_PER_ELEMENT = Int16Array;
1073741825 << 1073741825;
