[];
/(?<=a)+/udim;
/(?:a+)?/gds;
/[\p{Nd}]/vim;
[9007199254740991];
[-536870912,428426316,2,-18024,9223372036854775807,-65535];
[2];
const v10 = [];
const v11 = [v10];
class C13 extends Map {
    constructor(a15, a16) {
        super(v11);
    }
}
const v17 = new C13(v10, v11);
const v18 = new C13(v11, v17);
const v19 = new C13(v18, v17);
const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v25 = new Uint32Array();
let v26 = -4294967297n;
const v27 = v26--;
const v28 = [601759695];
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    try { a32.toLocaleString(); } catch (e) {}
    const v37 = a32?.constructor;
    try { v37(); } catch (e) {}
    try { v37(); } catch (e) {}
    const v41 = arguments.length;
    Object.defineProperty(v17, "e", { configurable: true, enumerable: true, value: f31 });
    const v43 = v18["entries"](a34, ...v19, BigUint64Array, ..."entries", a33, v41);
    const v45 = Symbol.toStringTag;
    v18[v45] = v45;
    function f46() {
        let v48;
        try { v48 = ("Vre").charAt(-8); } catch (e) {}
        try { v48.lastIndexOf(); } catch (e) {}
        let v50;
        try { v50 = ("Vre").codePointAt(v23); } catch (e) {}
        v50 - v50;
        v50 ^ v50;
        let v53 = Float64Array;
        v53 = a33;
        let v54 = v23.length;
        v54++;
        try {
            v29.forEach(a33);
        } catch(e57) {
            e57.stack = e57;
        }
        const o68 = {
            "c": v26,
            "EPSILON": v28,
            valueOf(a59, a60) {
                return a59;
            },
            1073741824: v25,
            [v26](a62, a63, a64, a65) {
                eval();
            },
            "arguments": 4096,
            256: a35,
        };
        return v54;
    }
    f46();
    const v71 = Array();
    let v72;
    try { v72 = v71.findLast(f31, v25); } catch (e) {}
    v71.unshift("entries", v43, "entries", v72);
    let v75;
    try { v75 = Int8Array.of(); } catch (e) {}
    try { v75.join(v37); } catch (e) {}
    const v77 = new Int8Array(v28);
    v77.c = v77;
    const v78 = a34.buffer;
    BigUint64Array.maxByteLength;
    const v80 = v78.slice(v37);
    try { Int32Array(v80, arguments, v26); } catch (e) {}
    function f83(a84, a85, a86, a87) {
        return a84;
    }
    const v88 = new Int32Array();
    const v89 = v88[3];
    v89 + v89;
    for (let v91 = 0; v91 < 5; v91++) {
    }
    %OptimizeFunctionOnNextCall(f46);
    try { v29["find"](..."find", a35, ...v28, ...v29, ...522675525n); } catch (e) {}
    return a32;
}
for (let v94 = 0; v94 < 10; v94++) {
    f31(v25);
}
%OptimizeFunctionOnNextCall(f31);
f31(v28, v10, v27, f31);
