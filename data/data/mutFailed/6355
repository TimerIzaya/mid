const v2 = new Uint16Array(256);
const v5 = new Uint8ClampedArray(9);
new Int32Array(4096);
class C9 extends Uint8ClampedArray {
    get e() {
        for (let v11 = 0; v11 < 32; v11++) {
            v2["p" + v11] = v11;
        }
        return v5;
    }
    3040;
    [Uint16Array];
}
new C9();
new C9();
new C9();
const v17 = [-6.672391061426152e+307];
const v18 = [1,-15];
function f19() {
    const o20 = {
        "apply": f19,
        "call": f19,
        "construct": f19,
        "defineProperty": f19,
        "deleteProperty": f19,
        "getOwnPropertyDescriptor": f19,
        "getPrototypeOf": f19,
        "has": f19,
        "isExtensible": f19,
        "ownKeys": f19,
        "preventExtensions": f19,
        "set": f19,
        "setPrototypeOf": f19,
    };
    new Proxy(C9, o20);
    v18.splice(v17, f19, v17);
    v17["pop"]();
    const v28 = new Float32Array(64);
    for (let v29 = 0; v29 < 5; v29++) {
        Array(36862);
        for (let i35 = 0, i36 = 10; i35 < i36; i35++, i36--) {
            const v44 = v28[o20];
            try { v44(); } catch (e) {}
        }
    }
    v28.toSorted();
    return f19;
}
%PrepareFunctionForOptimization(f19);
f19();
%OptimizeFunctionOnNextCall(f19);
f19();
