let v1 = 9223372036854775807;
const v6 = [2.220446049250313e-16,-2.2250738585072014e-308,5.391026859481078,-1.0,1.2588295577924495e+308,-999759.42263237,-0.0,NaN,-1000000000000.0];
let v7;
try { v7 = v6.sort(5275); } catch (e) {}
v1 >>= v1;
v7 != v1;
try {
    v6.toString();
} catch(e10) {
}
const v11 = [-1.1103328162915593e+308,1000.0,-713193.678103681,-1000000000.0,-1.0,1000000000000.0,-8.314639551769814];
const v12 = [-2.220446049250313e-16,0.28001796045151006,-5.0,-157163.6371344207,1000.0,3.0306364924481493,1.7976931348623157e+308,-0.0,0.7298442826464849,-929.3173856470236];
const v15 = new Uint32Array(1616);
try {
    v12.length = 2;
} catch(e18) {
}
new Int32Array(256);
let v23 = Int32Array;
const v24 = new v23(16);
16 - 9223372036854775807;
const v27 = 256 == v23;
try {
    v15.reduce(v7);
} catch(e29) {
}
function f31(a32, a33) {
    %VerifyType(a32);
    -Int32Array;
    const v40 = ~-9007199254740990;
    let v41 = -65535 | 15;
    const v42 = Math.tan(v15);
    v41 ^ (-9007199254740990 % v40);
    v41++;
    let o46 = {
        [a32]: a33,
        [a33]: -65537,
        65536: -65537,
    };
    a32 &= Uint32Array;
    o46[v40] = v24;
    v6[3] = 1616;
    delete v11[16];
    if (v27) {
        65536 ^ ++v23;
        ++o46;
    } else {
        v7.__proto__;
    }
    v42[0] = 129n;
    return -65537;
}
f31(9223372036854775807, -65537);
f31(9223372036854775807, 9223372036854775807);
