function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a5;
    } catch(e6) {
    }
}
const v7 = new F3(-4.0);
new F3(241937.60086404625);
new F3(-4.0);
const v10 = /3xyz{0,1}+/vims;
/(M(?:a*)+)/gudim;
/a+L\1(a)abc+R(?:a?)*/gums;
const v15 = new Int32Array(1589);
try { v10.test(Int32Array); } catch (e) {}
try {
    v7.e = v15;
} catch(e18) {
}
new Uint32Array(1930);
new Int8Array(129);
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    try {
    } catch(e27) {
    }
    function F28() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v30 = new F28();
    const v31 = v30?.__defineSetter__;
    try { v31(); } catch (e) {}
    function f33(a34, a35) {
        const o36 = {
        };
        return o36;
    }
    const v37 = f33(v31, f33);
    function f38() {
        return f38;
    }
    const v41 = new Float32Array(218);
    for (const v42 of v41) {
        v42 >>> v42;
        Object.defineProperty(v37, Float32Array, { configurable: true, enumerable: true, get: f33, set: f38 });
    }
}
new F24();
new F24();
new F24();
