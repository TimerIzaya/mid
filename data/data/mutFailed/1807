const v0 = [];
class C1 {
    static #valueOf() {
        v0 - this;
        return this[2];
    }
    h = v0;
    static m() {
        v0.__proto__;
        const o9 = {
            "maxByteLength": 1833,
        };
        const v11 = new SharedArrayBuffer(1833, o9);
        new BigUint64Array(v11);
        return v11;
    }
}
const v14 = new C1();
const v15 = new C1();
const v16 = new C1();
const v17 = /[Fa+b|c]/gvdm;
const v18 = /dRM(?:a*)*xyz?/ums;
const v19 = /\P{Decimal_Number}/gusy;
class C20 extends C1 {
    7;
    constructor(a22, a23, a24, a25) {
        super();
        a23.flags >>= C1.h;
        const v27 = v14[1];
        try {
            a23.g = v27;
        } catch(e28) {
        }
    }
    [-2] = v17;
}
new C20(v18, v19, v14, v18);
v16 <= C20;
C20[v19];
const v32 = v16.h;
try {
    v0.length = v32;
} catch(e33) {
}
const v34 = new C20(v17, v18, v15, v18);
new C20(v17, v18, v34, v18);
class C37 {
}
new C37();
class C40 extends Set {
}
const t51 = C40.constructor;
t51(C40);
let v43 = 0.3050534209767637;
v43--;
new WeakMap();
const v48 = [BigUint64Array];
v48.pop();
const v51 = Math.__defineSetter__;
try { v51(); } catch (e) {}
Math.sinh();
const o54 = {
};
if (5) {
    function F55(a57, a58) {
        if (!new.target) { throw 'must be called with new'; }
    }
    for (let v59 = 0; v59 < 5; v59++) {
        function F60(a62, a63) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
}
const o64 = {
    ...v48,
};
