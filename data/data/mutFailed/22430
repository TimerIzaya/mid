function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a5;
    } catch(e7) {
    }
    try {
        this.e = -51474;
    } catch(e8) {
    }
    const v11 = new Int8Array(242);
    const v13 = new Float64Array(242, 242);
    const t12 = v13.constructor;
    new t12(v11);
    try {
        this.d = -256;
    } catch(e16) {
    }
}
new F3(-51474, -703538225);
new F3(-703538225, -51474);
new F3(-703538225, -703538225);
new Int8Array(13);
("getPrototypeOf").blink();
class C26 {
    ["getPrototypeOf"] = -1.7976931348623157e+308;
}
class C27 extends C26 {
    ["getPrototypeOf"] = C26;
}
new C27();
new Uint32Array(3);
new Uint8Array(11);
for (let v35 = 0; v35 < 5; v35++) {
    function f36() {
        const v40 = new Float32Array(Float32Array);
        for (let v41 = 0; v41 < 25; v41++) {
            function f42(a43, a44, a45, a46) {
                a43[1];
                for (let v48 = 0; v48 < 5; v48++) {
                    const v49 = new f42();
                    v49.constructor;
                    function f52() {
                        return Array;
                    }
                    const v54 = new Date(f52);
                    C27.valueOf(Array, v54, v54);
                }
                a44--;
                a43[0] = a43;
                const v58 = arguments?.__lookupGetter__;
                let v59;
                try { v59 = v58.constructor(f42, v58, v58); } catch (e) {}
                const v60 = new Float32Array(v41, v59, a44);
                const v62 = new Int32Array();
                const v63 = v60;
                v62.fill(...v63);
                return Float32Array;
            }
            for (let v65 = 0; v65 < 10; v65++) {
                f42(v40);
                Date.parse(([188439.8808918628,491144.33908044384,7.99804504476413,6.321598426193364e+307,-820860.9743012136,0.7234201729305241,-998514.8410675353,5.600912141333236]).toString());
                function f71() {
                    return Math.min();
                }
                f71();
            }
        }
        for (let v75 = 0; v75 < 5; v75++) {
            const v78 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
            v78[3] = v78;
            const v80 = new BigUint64Array(3375);
            let [v81,,v82,...v83] = v80;
            v75++;
        }
    }
    f36();
}
