const v0 = [1073741825];
const v1 = [-6,65535];
const v2 = [22428];
class C3 {
    #valueOf(a5) {
        try { v2.toSorted(); } catch (e) {}
        const o9 = {
            "maxByteLength": 9,
        };
        const v11 = new ArrayBuffer(6, o9);
        new Int8Array(v11);
        return a5;
    }
}
let v14;
try { v14 = new C3(); } catch (e) {}
let v15 = new C3();
const v16 = v15?.__defineGetter__;
let v17;
try { v17 = new v16(v1, v15); } catch (e) {}
new C3();
const v19 = new C3();
const v21 = new Set();
function f22(a23, a24, a25) {
    a23[1];
    try { a25.copyWithin(f22, f22); } catch (e) {}
    const v29 = v14?.c;
    try { v15.o(v29, f22); } catch (e) {}
    const v32 = [];
    Reflect.apply(v21.clear, v1, v32);
    const o44 = {
        __proto__: v15,
        [a25]: v19,
        get h() {
            v15 = v21;
            return this;
        },
        "c": Set,
        [a25](a37, a38) {
            C3[158] = v0;
            C3.c &= a23;
            try {
                a25.indexOf(v2, 4294967296);
            } catch(e41) {
            }
            try { v14(...C3, a25, v14, ...v17, this); } catch (e) {}
            try {
                v0.f = v15;
            } catch(e43) {
            }
            return a25;
        },
    };
    o44[1073741825];
    return o44;
}
const v46 = f22(v1, Set, v0);
const v47 = f22(v0, v0, v1);
const v48 = v47?.c;
try { new v48(); } catch (e) {}
const v50 = f22(v0, v47, v1);
class C51 {
    constructor(a53, a54) {
        const v55 = this?.__lookupGetter__;
        try { new v55(v0); } catch (e) {}
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
try { new C51(v1, v46); } catch (e) {}
const v59 = new C51();
const v60 = v59?.constructor;
for (const v61 of v1) {
    v61[v61] &= v61;
}
v47[v2] = C51;
try {
    v19.fuck(true, undefined);
} catch(e65) {
}
try { new v60(v19, v50); } catch (e) {}
