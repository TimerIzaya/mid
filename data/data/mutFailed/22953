function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v5 = new BigUint64Array(220);
    const v6 = v5[42];
    const v9 = new Uint32Array(958);
    function f10() {
        Symbol.isConcatSpreadable;
        return v5;
    }
    v9[Symbol.toPrimitive] = f10;
    const v17 = new Int8Array(3844);
    let v20 = -1024n;
    class C21 {
        set c(a23) {
            v20 = 0n;
            a23 += 0n;
        }
        constructor(a25, a26, a27, a28) {
            C21 >>> v17;
        }
        static [v9] = v6;
        128 = "Cl";
        m(a31) {
            let v32;
            try { v32 = new this(a31, -490778482n, this); } catch (e) {}
            this.c |= v32;
            return a31;
        }
        static 1;
        static h = -490778482n;
        static #f = v20;
    }
    try {
        this.b = 9;
    } catch(e34) {
        new Date();
        function f37() {
            const v39 = new Map();
            v39.clear();
            ([-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574]).slice();
            return f37;
        }
    }
    try {
        this.c = 9;
        const o43 = {
        };
        class C44 {
            static {
                const v46 = (a47, a48, a49, a50) => {
                    return a50;
                };
            }
        }
    } catch(e51) {
    }
}
new F0();
new F0();
const v54 = new F0();
v54.b;
let v56 = 10;
v56++;
5 >= 5;
/UR*/gvdimsy;
/[z-\d]/gdimy;
/T./udmsy;
const v72 = new BigUint64Array(1486);
function f73(a74, a75, a76, a77) {
    const o78 = {
        [a77]: a76,
        ...v72,
    };
    return v72;
}
const v80 = new Date();
const v82 = new Int8Array();
v82.entries();
const v85 = undefined ^ undefined;
v85 * v85;
("getUTCMilliseconds")[2];
const v89 = v80["getUTCMilliseconds"]();
v89 >> v89;
