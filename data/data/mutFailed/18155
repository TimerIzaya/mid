const v2 = new Int32Array(3463);
const v5 = new Int32Array(102);
const v8 = new Uint16Array(128);
[v8,v5,v8,Int32Array];
[Int32Array,v2,128];
[v5,102];
function f12() {
    return Uint16Array;
}
f12();
const v14 = f12();
const v15 = f12();
class C17 extends Date {
}
function f18(a19, a20, a21, a22) {
    return f18;
}
f18(v15, v14);
const v24 = f18(v15, v14);
v24.e = 102;
const v25 = /(\1a)/gums;
const v26 = /V(?:a{5,1000000}){3,1000000}/vims;
v26[Symbol.iterator] = Date;
const v29 = /(?<a>.)\k<a>?/vdimsy;
let v30;
try { v30 = v26(); } catch (e) {}
const v31 = [v25,v25,v25,v25,v25];
const v32 = [v31,v26,v29,v31];
const v34 = new BigInt64Array(v26, v25, v30);
function f35() {
    let v36 = 1000000000000.0;
    const v38 = -(v36--);
    const v40 = -v31 && v32;
    class C41 {
    }
    new C41(v40);
    Symbol.constructor = Symbol;
    const t37 = Symbol.constructor;
    t37();
    let v46 = 0;
    v46++;
    const v48 = new C41();
    const t42 = v48.constructor;
    new t42(v34, v48);
    const v51 = new C41();
    function f52(a53, a54) {
        class C56 {
            static #p(a58, a59) {
            }
            toString(a61, a62, a63, a64) {
                eval("B");
            }
        }
        return "B";
    }
    Object.defineProperty(v51, "constructor", { value: f52 });
    const t56 = v51.constructor;
    new t56(v38);
    const v73 = [v29,v29,v29];
    class C74 extends C41 {
    }
    new C74();
    Date.constructor;
    v32.constructor.isArray(v73);
    const v80 = v29["test"]("test");
    v80 >> v80;
    try {
        v2.valueOf = Symbol;
    } catch(e82) {
    }
    let v83;
    try { v83 = v24.e(); } catch (e) {}
    return v83;
}
%PrepareFunctionForOptimization(f35);
f35();
%OptimizeFunctionOnNextCall(f35);
f35();
