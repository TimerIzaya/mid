function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -802470068;
    } catch(e3) {
    }
    try {
        this.e = -802470068;
        try {
        const t0 = 1450;
        t0(this, this);
        } catch (e) {}
        const v7 = new Float32Array(this, -802470068);
        v7.constructor;
    } catch(e9) {
    }
    try {
        this.g = -802470068;
    } catch(e10) {
    }
}
const v11 = new F0();
for (let i16 = (() => {
        function f13() {
            return f13;
        }
        const o15 = {
            [f13]() {
            },
        };
        return 0.8037056182165817;
    })();
    i16 < 10;
    i16++) {
}
const v22 = new F0();
const v23 = new F0();
class C24 extends F0 {
    constructor(a26, a27) {
        super();
        const v28 = [2,62536,1675731719];
        const v31 = new Uint8Array(64);
        const v33 = new Int32Array(v31);
        try { v28.keys(); } catch (e) {}
        Array.__proto__ = v11;
        Array.constructor;
        const v38 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
        const v39 = v38.length;
        const v41 = ("stack").normalize();
        async function f42(a43, a44, a45, a46) {
            a46[1] = Array;
            function f48() {
                return v41;
            }
            Object.defineProperty(v41, 0, { enumerable: true, value: v39 });
            return f42;
        }
        const v49 = [-2058090136,64];
        const v50 = [-1866311917,536870912,10,1,15,-10,13890];
        class C51 {
        }
        const v53 = new Set();
        v50 | v11;
        v33[7] = v53;
        v49[2] ^= v49[33];
        v31.length |= a27;
        v53["delete"](0.8037056182165817);
        const o60 = {
            "maxByteLength": 255,
        };
        255 << 255;
        const v63 = new ArrayBuffer(255, o60);
        const v64 = v63?.resize;
        try { new v64(C24); } catch (e) {}
        new Uint8ClampedArray(v63);
    }
}
let v68;
try { v68 = new C24(v22, C24); } catch (e) {}
const v69 = new C24(v22, v23);
const v70 = new C24(v23, v11);
new C24(v70, v11);
let v73;
try { v73 = Date.now(); } catch (e) {}
new Date();
function f75(a76, a77) {
    for (let i79 = 0; i79 < 4; i79++) {
        (v68 < i79) * v73;
    }
    Symbol.toPrimitive;
    const v91 = Array();
    function f92() {
        return 3;
    }
    function f93(a94) {
        const o98 = {
            "execution": "async",
        };
        gc();
    }
    Object.defineProperty(v91, 0, { configurable: true, enumerable: true, get: f92, set: f93 });
    v91.unshift(3, a76);
}
function f101() {
    return v69;
}
let v102 = 127;
new Float64Array(v102);
v102 %= -268435456;
try { f101(); } catch (e) {}
const v108 = new Map();
const v109 = v108?.get;
try { new v109(v11); } catch (e) {}
-410.1411447428658 - -410.1411447428658;
("undefined").localeCompare("undefined", "symbol", "undefined");
