16 - 16;
let v5 = BigInt64Array;
const v6 = new v5(16);
let v9 = new Uint8Array(4061);
9 + 9;
const v13 = new Uint8ClampedArray(9);
let v16;
try { v16 = new Map(); } catch (e) {}
v16 >>>= v5;
v5 /= v5;
let [...v17] = v9;
let v19 = v13["findLast"](9, 4061, Uint8Array, 256n);
new Map();
function f21() {
    return f21;
}
f21.name;
new Int16Array(1459);
const v27 = new Int32Array(512);
const v31 = new Float32Array(3562);
Set.length;
const v34 = new Set();
try { v34.add(v34); } catch (e) {}
const v36 = v34[v6];
let v37 = -268435456n;
v37--;
try {
    v6.c = 512;
} catch(e39) {
}
256n >> Uint8ClampedArray;
new f21(v36, v37);
v31.lastIndexOf(-128);
const v43 = v9--;
v19 = v6.byteLength;
v27 instanceof Float32Array;
try {
    v13.h = v43;
} catch(e46) {
}
