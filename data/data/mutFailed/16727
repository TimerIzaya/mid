function f0() {
    const v5 = Symbol.hasInstance.toString();
    const o8 = {
        "execution": "async",
        "type": "minor",
    };
    try { ("A").trimStart(); } catch (e) {}
    const o27 = {
        "c": 929.5793028656108,
        "g": "A",
        __proto__: "bigint",
        "type": "A",
        "type": "A",
        "b": f0,
        "g": 929.5793028656108,
        "e": 929.5793028656108,
        "a": 929.5793028656108,
        "h": "A",
        "b": "bigint",
        "f": 929.5793028656108,
        "type": "A",
        n(a12, a13) {
        },
        set b(a15) {
        },
        "d": "bigint",
        "g": v5,
        o(a17) {
        },
        valueOf(a19, a20) {
            a19 instanceof a20;
            const t30 = "async";
            t30.valueOf = a19;
        },
        [929.5793028656108]: "A",
        ["A"]: "bigint",
        2147483647: 929.5793028656108,
        o(a23) {
            const o25 = {
            };
            return gc(o25);
        },
    };
    return o27;
}
const v32 = new BigInt64Array();
function f33(a34, a35) {
    let o37 = {
        "d": a34,
        ...a34,
        get e() {
            return a35;
        },
    };
    [,...o37] = v32;
    return -4096;
}
f33(4046, 3768);
String[Symbol.toPrimitive] = f33;
const v42 = new String(String);
function f43() {
    return f33;
}
Object.defineProperty(v42, "toString", { writable: true, enumerable: true, get: f43 });
class C44 {
    #p(a46, a47, a48, a49) {
    }
    constructor(a51, a52) {
        try {
            v42.#p();
        } catch(e54) {
        }
    }
}
C44[Symbol.toPrimitive] = Symbol;
C44.prototype = C44;
f0().e;
f0();
const v60 = f0();
v60[2147483647];
[536870887,-1548469542,2147483647,3,-9223372036854775807,536870887,536870889];
[-9007199254740992,15,127,1,1715533714,1073741824,1180663796,-13,4096,268435439];
const v64 = [313594357,16,64];
try { v64.map(v60); } catch (e) {}
-1010289599 / -1010289599;
const v71 = new Date();
try { v71.setUTCSeconds(C44, -15); } catch (e) {}
try { ("0TC").localeCompare(v42); } catch (e) {}
BigUint64Array.length = BigUint64Array;
Uint8Array[Symbol.toPrimitive] = Symbol;
function f84(a85, a86, a87, a88) {
    a86 | a86;
    const v90 = a85 / a85;
    const v91 = a86 < a86;
    let v92 = a87 >>> a87;
    v92++;
    const o97 = {
        "b": a85,
        "c": a88,
        n(a95, a96) {
            return v91;
        },
    };
    return v90;
}
f84(Uint8Array, 2);
function f100(a101, a102, a103, a104) {
    function f106() {
        arguments < arguments;
        const v111 = new Float32Array(2);
        v111 / Int32Array;
        let v113 = -268435456;
        let v114 = v113--;
        new Uint8Array(9);
        const v119 = Symbol.toPrimitive;
        const o121 = {
            [v119]() {
            },
        };
        v114--;
        try {
            const v124 = Symbol.iterator;
            const o127 = {
                "maxByteLength": 257,
            };
            const v129 = new ArrayBuffer(203, o127);
            v129.slice();
            const o132 = {
                [v124]() {
                },
            };
        } catch(e133) {
        }
        const v134 = v114 << v114;
        v134 * v134;
        return f100;
    }
    f106.d = f106;
    return a101;
}
