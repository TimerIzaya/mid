function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -42262;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
const v7 = v6?.constructor;
let v8;
try { v8 = new v7(); } catch (e) {}
-268435456 - -268435456;
class C13 extends v7 {
    static #a;
    static #o(a15, a16, a17) {
        try {
            this.#a;
        } catch(e19) {
        }
        return this;
    }
    2538969365;
    set a(a21) {
        try { a21(this, this, this, a21); } catch (e) {}
        v6[this] += -268435456;
        this[255n] = -1024n;
    }
}
try { new C13(); } catch (e) {}
const v27 = new C13();
const v28 = new C13();
const v29 = new v4();
function f30() {
    return v4;
}
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    a33[2538969365];
    a34 / a35;
    try {
        this.a = 23010;
    } catch(e38) {
    }
}
const v39 = new F31(v28, v27, 38517);
new F31(v6, v39, 38517);
const v41 = v7?.constructor;
try { new v41(F0, f30, C13); } catch (e) {}
const v43 = new F31(v29, 23010, -268435456);
v43.b = v8;
~23010;
const v47 = new BigUint64Array(1000);
v41 || v47.includes(undefined);
