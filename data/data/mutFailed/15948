function f3(a4, a5) {
    const o13 = {
        "c": 1,
        set d(a7) {
            a4 >>>= this;
            try { a7.setUTCDate(a4); } catch (e) {}
        },
        "f": 1,
        __proto__: a4,
        [1]: 2,
        "a": 2,
        9: a5,
        "maxByteLength": -330627564,
        get d() {
        },
        [2](a11, a12) {
        },
    };
    class C14 {
    }
    Float32Array[1] = C14;
    const v16 = new Float32Array(Float32Array);
    class C17 {
    }
    try { C17.apply(C14, v16); } catch (e) {}
    return o13;
}
f3(2, -330627564);
f3(2, f3(2, 2));
const v22 = [3.0,-2.0];
[740585.0163876761,2.220446049250313e-16];
[-622828.1774120072,1.0,9.994203343791273,-934862.5032094977,-1.7472846477904351e+308,-130.89932476412548];
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    Symbol.toPrimitive;
}
const v29 = new F25();
const v30 = new F25();
for (let i34 = 0, i35 = 10;
    (() => {
        const v36 = i34 < i35;
        const v39 = new Uint16Array(3);
        v39.indexOf();
        function f41(a42, a43, a44, a45) {
            function f46() {
                Math.expm1();
                return f41;
            }
            f46();
            eval();
            %OptimizeFunctionOnNextCall(f46);
            return f41;
        }
        const v52 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
        const t14 = v52.toSpliced();
        t14[3] = v29;
        let v55 = 3375;
        function f56() {
            try {
                v22.forEach();
            } catch(e58) {
                function f59(a60) {
                    let {"a":v61,"d":v62,"e":v63,} = a60;
                    return v52[Symbol.isConcatSpreadable];
                }
                e58.toString = f59;
                e58.constructor(e58, v55, f56, f56, f56);
                e58.a = e58;
                e58.a = e58;
            }
            return f56;
        }
        f56();
        const v69 = v55++;
        v69 / v69;
        const v71 = new BigUint64Array();
        let [v72,,v73,...v74] = v71;
        return v36;
    })();
    i34++) {
}
for (let v80 = 0; v80 < 10; v80++) {
    const v81 = [601759695];
    const v82 = [1073741824,1073741823,1376142744,1073741825];
    try { v82["find"]("find", undefined, v81, v80); } catch (e) {}
}
+v30;
