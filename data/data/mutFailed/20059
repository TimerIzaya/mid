new Uint8Array(127);
const v5 = new Float64Array(16);
const v8 = new v5(3479);
class C17 {
    static 3143;
    static ["-2"];
    #f = "-2";
    static #a;
    #c;
    #valueOf(a19, a20) {
        const v21 = a20 == a20;
        v21 ? a20 : a20;
        const v23 = ["-2",this,"setMonth",a19,"-2"];
        [v23,v23,this,this];
        [v21,"-2","4X",a19];
        return a19;
    }
    10 = "4X";
    #g = C17;
}
const v26 = new C17();
new C17();
new C17();
let v30;
try { v30 = new WeakSet(); } catch (e) {}
new WeakSet();
!127;
let v33 = new C17();
v33 = v30;
let v35 = 8850;
v35 >> -128;
Math.acos(v35);
v35--;
-536870912 ^ -536870912;
const v44 = [-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
[35577,123452243,-2,65305,268435441,11,-58686];
const v46 = [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
try { v46.sort("-2"); } catch (e) {}
const v50 = 6 | 6;
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    try {
        const t43 = "-2";
        t43.__proto__ = this;
    } catch(e61) {
    }
    C17[8] = v44;
    const v62 = this.constructor;
    try { new v62(); } catch (e) {}
}
new F55();
new F55();
class C67 {
    constructor(a69) {
        const v70 = v26.constructor;
        v70.d = v70;
        try { new v8(); } catch (e) {}
        ("size").c;
        ("size").g;
        ("size").length;
        let v75 = v50?.[7];
        [...v75] = "size";
        /a\bc/vd;
    }
}
function f77(a78, a79, a80) {
}
const o81 = {
};
class C82 {
    static #n(a84) {
    }
}
new C82();
new C82();
("1866165091").normalize();
8 & 8;
9007199254740991n * 9007199254740991n;
let v93 = Int16Array;
try {
} catch(e94) {
}
v93 = v93;
