function f0() {
    let v1 = -35687;
    const o12 = {
        5: -769031854,
        [v1]: -769031854,
        "f": v1,
        4048: -769031854,
        [-769031854](a5, a6) {
            -1171628975 != (v1 = a5);
            super.a;
            return -1957263069;
        },
    };
    return o12;
}
const v13 = f0();
const v14 = f0();
f0();
function F16(a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a18;
    } catch(e19) {
    }
}
function f20() {
    function f21() {
        const v24 = new BigUint64Array(4);
        return v24;
    }
    return f21;
}
Object.defineProperty(F16, "toString", { writable: true, get: f20 });
new F16(v14);
new F16(v14);
new F16(v14);
class C28 extends F16 {
    [f0] = v13;
    static n(a30, a31) {
        const v32 = a30[a30];
        const v34 = Symbol.toStringTag;
        v32[v34] = v34;
        return F16;
    }
    #d = v13;
    #c;
    f;
    #f;
}
function f35() {
    return f20;
}
Object.defineProperty(C28, "constructor", { configurable: true, enumerable: true, get: f35 });
const v36 = C28?.constructor;
try { new v36(F16); } catch (e) {}
const v38 = new C28();
const v39 = v38?.constructor;
try { new v39(); } catch (e) {}
new C28();
const v42 = new C28();
v42.b = v42;
512 + 512;
const v46 = new BigUint64Array(512);
const v48 = new Int16Array();
try { v48.entries(); } catch (e) {}
const v50 = v46.includes(v48);
v50 || v50;
