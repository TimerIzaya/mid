const v2 = new Uint8ClampedArray(8);
let v4 = BigInt64Array;
let v5;
try { v5 = v2.toString(); } catch (e) {}
({"a":v4,} = v5);
try {
    v5.h = Uint8ClampedArray;
} catch(e6) {
}
new v4(6);
let [v8,v9,v10] = v2;
const v11 = v4 | v2;
try { v10.padStart(v4, Uint8ClampedArray, v11); } catch (e) {}
new Int32Array(132);
new Uint32Array(3969);
const v21 = new Uint8ClampedArray(5);
new Float32Array(257);
class C28 extends Float32Array {
    constructor(a30, a31, a32) {
        super(6);
        function f33() {
            return "ownKeys";
        }
        const v34 = super.every(a30, this);
        v34 / v34;
    }
    #b = Uint8ClampedArray;
    get d() {
        new v4("toString", 6, 257);
        return this;
    }
}
function f39(a40) {
    return 5;
}
class C41 extends f39 {
    static [v21];
}
new C28(C28, 6, "undefined");
const v43 = new C28(Float32Array, 257, "ownKeys");
new C28(v43, 8, "undefined");
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
