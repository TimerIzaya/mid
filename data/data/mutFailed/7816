new Int8Array(3585);
127 + 127;
const v6 = new Uint16Array(127);
let v9;
try { v9 = BigUint64Array.bind(1024); } catch (e) {}
const v10 = new BigUint64Array(1024);
function f11() {
    return f11;
}
Date.UTC(f11, f11, "string");
let v15;
try { v15 = v10.keys(); } catch (e) {}
class C16 extends Int8Array {
    get b() {
        const v18 = super[BigUint64Array];
        try {
            this.filter(v18);
        } catch(e20) {
        }
        return 127;
    }
    static {
        if (this) {
        }
    }
    a;
    static toString(a23, a24, a25) {
        this.undefined = v15;
        super[a25];
        try {
            return Int8Array;
            127 & 127;
            function* f28(a29) {
                return f28;
            }
            this.h = v10;
        } catch(e30) {
        }
        return 3585;
    }
}
const v31 = new C16();
v31.BYTES_PER_ELEMENT = v31;
const v32 = new C16();
const v33 = new C16();
function f34(a35, a36, a37) {
    a35.BYTES_PER_ELEMENT = a35;
    a36 | a36;
    const o47 = {
        "f": Int8Array,
        "b": Date,
        ...v10,
        "type": "string",
        4: "string",
        set b(a40) {
        },
        [v32]: v6,
        [C16]: 127,
        [C16]: Date,
        n(a45, a46) {
        },
        ...v9,
        ...v10,
        "d": C16,
        [BigUint64Array]: Int8Array,
        "h": a36,
        ...v32,
        "g": a35,
        2600: Int8Array,
    };
    o47.valueOf = f34;
    return o47;
}
const v49 = f34(v33, 1024, 3585)?.valueOf;
try { new v49(); } catch (e) {}
f34(v31, 127, 127);
f34(v32, 1024, 127);
let v53 = Uint8Array;
v53--;
const v57 = new Float32Array(9);
new Int8Array(v57);
function f60() {
}
f60.c = v49;
class C61 extends f60 {
    toString(a63, a64) {
        let v65;
        try { v65 = this.constructor(); } catch (e) {}
        const v66 = v65.constructor;
        new v66(a64, v66, this, v66, C61);
        -this;
    }
}
C61.c = C61;
const v69 = new C61();
function f70(a71) {
    const v72 = 1024 <= 3585;
    return v72 < v72;
    const o74 = {
    };
    ("D")[0];
    return v72 ? 1024 : 3585;
}
v69.constructor = f70;
try { v69.toString(); } catch (e) {}
