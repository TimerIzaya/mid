const v0 = /JOF2/g;
const v1 = /(?:a+)*foo(?!bar)baz?/gvms;
const v2 = /gWa\BbkE\ud808\udf45*/gu;
class C3 {
    static a = v1;
    constructor(a5, a6) {
        const v7 = this?.__lookupGetter__;
        try { new v7(v2); } catch (e) {}
        a6.dotAll = a6;
        const v9 = a5 - this;
        v9 & v9;
        const v11 = [v9,v1];
        [v11];
        [a6];
        let v16 = -2268;
        const v17 = Math.min(v11);
        v17 + v17;
        const v19 = Math.asin(v11);
        v19 >>> v19;
        -1806476599 << v11;
        ++v16;
    }
    5;
}
try { new C3(v1, v0); } catch (e) {}
const v24 = new C3(v2, v2);
const v25 = new C3(v24, v24);
v25[5] = v25;
new C3(v25, v24);
/a?iu/gdy;
/Y1(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10(?:ab)?/guy;
const v29 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10U/gvimy;
[-781728904,1073741824,58106,3,536870887];
const v31 = [12,9223372036854775807];
try { v31.sort(v24); } catch (e) {}
const v33 = [-65537,-1258327596];
try { v33.findLastIndex(v29); } catch (e) {}
-Infinity;
-4.0 + -4.0;
-0.14427114599573976 | -0.14427114599573976;
const v41 = new Set();
const v44 = new Uint32Array(152);
const v45 = v44.constructor;
v45.a = v45;
const v46 = new v45(v44, Uint32Array, Uint32Array);
v46[130];
const v48 = v46?.constructor;
try { v48(v45, v46, v44); } catch (e) {}
9 >>> 9;
const v53 = new Int8Array(9);
try { v53.with(v31, v46); } catch (e) {}
const v55 = v53[6];
v55 + v55;
try { ("n").match(Set); } catch (e) {}
function F61(a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this?.constructor;
    try { new v66(a65, a64, a65); } catch (e) {}
    try { a65.substr(v55, a64); } catch (e) {}
    const v69 = a63?.delete;
    try { new v69(Uint32Array); } catch (e) {}
    a64[2] = a64;
    this.a = a63;
    this.c = 152;
}
const v71 = new F61(v41, "48196", "48196");
v71.e = v71;
const v72 = new F61(v71, v71, "48196");
v72.e;
new F61(152, 152, "n");
try { Float64Array.of(); } catch (e) {}
try { Float64Array(v46, Set, Float64Array); } catch (e) {}
const v79 = new Float64Array(2385);
v79[492];
133 / 133;
BigInt64Array.name;
const v85 = new BigInt64Array(133);
let v86 = 1734;
v86--;
-(~v86);
try { BigInt64Array.of(); } catch (e) {}
let v92;
try { v92 = BigInt64Array(BigInt64Array, v79, v79); } catch (e) {}
new BigInt64Array(v86);
Int16Array.e = Int16Array;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
new Int16Array(255);
try { new Array(v29); } catch (e) {}
Array.prototype = Array;
Array.valueOf = Array;
const v99 = [-2,1024];
let v100;
try { v100 = v99.valueOf(); } catch (e) {}
try { v100.reduce(v85); } catch (e) {}
function F102(a104, a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    const v108 = this?.__defineGetter__;
    v108.name = v108;
    try { new v108(v86, v92); } catch (e) {}
    const v110 = this?.__lookupSetter__;
    try { new v110(BigInt64Array); } catch (e) {}
    for (let v112 = 0; v112 < 100; v112++) {
        for (let v113 = 0; v113 < 5; v113++) {
            v113 >> v113;
            function f115() {
                return v113;
            }
        }
        let v116 = v99.length;
        v116--;
        const v118 = Array / v116;
        v118 + v118;
    }
}
const v120 = new F102();
const v121 = v120?.constructor;
try { new v121(F102, v99, v2, v99); } catch (e) {}
v120.f = v120;
new F102();
