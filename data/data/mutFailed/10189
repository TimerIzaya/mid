const v2 = new BigInt64Array(1);
new Float32Array(0);
try {
    v2.g = 149;
} catch(e11) {
}
const v12 = new Float64Array(149);
const o15 = {
    "maxByteLength": 536870888,
};
new ArrayBuffer(1000, o15);
function f19() {
    /3/umsy;
    /Sh\xf0\x9f\x92\xa9/vdimy;
    return /[[\p{Script_Extensions=Mongolian}&&\p{Number}](hcWa||bc)]/dimsy;
}
Int32Array[Symbol.iterator] = f19;
new Int32Array(Int32Array);
const v26 = [1];
const v27 = [Float64Array,Float64Array,v12,149,Float32Array];
const v28 = [v27,1,v12];
function f29() {
    return v12;
}
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 1;
    try {
        this.h = v27;
    } catch(e35) {
    }
    try {
        this.d = a33;
    } catch(e36) {
    }
    try {
        this.a = a33;
    } catch(e37) {
    }
}
new F30(v28, f29, v26);
new F30(v27, v27, v27);
new F30(v27, v26, v27);
const v41 = [];
Object.defineProperty(v41, "constructor", { enumerable: true, value: f29 });
const v42 = v41.constructor;
const v44 = new Float32Array();
v44.filter(v42);
