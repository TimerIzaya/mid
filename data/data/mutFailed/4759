const v2 = new BigInt64Array(191);
let v3 = 255;
const v4 = v3 + v3;
const v5 = v4 | v4;
v2[8] = BigInt64Array;
let v6 = v2[BigInt64Array];
try {
    new BigInt64Array(191, v5, 191);
} catch(e8) {
}
v3--;
const v11 = new BigUint64Array(v3);
v6 ||= v11;
try { v6.valueOf(v6); } catch (e) {}
const v16 = v11[154];
v16 - v16;
v16 * v16;
const v21 = new BigUint64Array(15);
v21[11];
function f23() {
    return v3;
}
f23.d = f23;
[9.239396409049633,0.33666193552825674,1000000000.0,255919.94304560334,0.6529261387830391,-1.0,-1000.0,-3.0,603.2608281967655];
const v26 = ([-27980.287403144757,1000000000.0,0.12414172379806765,467544.351546281,1000.0,-1e-15,-Infinity,1.590444731275741e+308])?.pop;
try { new v26(); } catch (e) {}
const v29 = ([0.12202958172662948,-1000000000000.0,7.612120424445649])?.find;
try { new v29(15); } catch (e) {}
1073741825n + 1073741825n;
-45270n >> -45270n;
-(7n ^ 7n);
const v38 = /P[x\dz]*/gudmy;
try { v38.exec(v11); } catch (e) {}
1000 ^ 1000;
v38.multiline **= 1000;
