const o1 = {
};
const v2 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v3 = 0; v3 < 5; v3++) {
    function f4() {
        try {
            v2.forEach();
        } catch(e6) {
            e6.constructor(e6, v3, f4, f4, f4);
            e6.a = e6;
            e6.a = e6;
        }
        return f4;
    }
    f4();
    %OptimizeFunctionOnNextCall(f4);
}
class C11 {
    set b(a13) {
        try {
            a13.a = -4.0;
        } catch(e14) {
        }
        new Date();
    }
    get e() {
        this[-2] &= -4.0;
        %VerifyType("undefined");
        const v19 = Symbol.unscopables;
        this[v19] = v19;
        return "o";
    }
}
const v20 = new C11();
new C11();
function f23(a24, a25) {
    return 512;
}
const v27 = ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
const v28 = v27 >>> v27;
v28 / v28;
const v30 = new C11();
try { ("boolean").strike(); } catch (e) {}
switch (12) {
    case "boolean":
        try { v30["getMinutes"]("includes", "getMinutes", -4.0, "getMinutes"); } catch (e) {}
        break;
}
try { Int32Array("includes", Int32Array, Int32Array); } catch (e) {}
v30[12];
[1.3111902340055951e+308,0.6675519501049721,0.709178623689283,-2.0,NaN,1000000.0];
const v47 = [-673.3161939021318,-1.765393222028458e+308,3.0,0.7296025953601393,1000000000000.0,6.285262614062663,3.0,-1.7294874510674034e+308];
try { v47.lastIndexOf(v30); } catch (e) {}
[-2.0];
function F50(a52) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = this;
    const v53 = this?.constructor;
    try { new v53(a52); } catch (e) {}
}
const v55 = new F50();
v55.g = v55;
v55.length = v55;
const v56 = v55.g;
class C57 {
    7;
    static 2585138258 = -4.0;
}
new C57();
const v59 = new C57();
v59[7] = v59;
new C57();
Int8Array.a = f23;
try { new Int8Array(0.6141656143206465, Int32Array, 1073741824); } catch (e) {}
const v64 = new Int8Array(5);
new Float64Array(200);
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
~200;
Int8Array.a = Int8Array;
-127;
const v78 = new BigUint64Array(127);
new Uint8ClampedArray(4096);
function f83() {
    return f83;
}
function f84(a85, a86) {
    return 751.8573288711889;
}
Object.defineProperty(f83, Symbol.iterator, { writable: true, configurable: true, value: f84 });
new Uint16Array(f83);
-2147483648 >> -2147483648;
const o102 = {
    n(a100, a101) {
        return 3;
    },
};
let v104 = 3685;
v104++;
function F109(a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = "b";
    this.d = a112;
}
try { new Uint8Array(Int8Array, -236627.60107948212, v20); } catch (e) {}
v64[v78];
const v118 = Math?.tan;
try { new v118(Math); } catch (e) {}
function f121() {
    for (const v125 of Array(4087)) {
    }
    return 4087;
}
%PrepareFunctionForOptimization(f121);
~Math.sin();
324308659 + 324308659;
const v131 = new Uint16Array(209);
v131[145] = v56;
