const v0 = /^xxx$a(x)(x)(x)\2+/guimy;
const v1 = /(?:ab){4,7}(ab)\1^xxx$+/gudisy;
const v2 = /[\p{Script_Extensions=Mongolian}&&\p{Number}][\ca](\ud808\udf45*)/vmy;
class C3 {
    [v1];
    static e;
    static valueOf(a5) {
        const o6 = {
        };
        new Proxy(this, o6);
        super[v2] = v2;
        Float32Array & Float32Array;
        class C14 {
            constructor(a16, a17) {
                this[-2147483648] >>>= -7;
                for (let v18 = 0; v18 < 25; v18++) {
                }
            }
        }
        new C14();
        super.c = a5;
        return v0;
    }
    static a;
    static #b;
    static c = v1;
}
const v20 = new C3();
new C3();
new C3();
class C23 {
    constructor(a25, a26) {
        try { this(v1, a26, this, this, v20); } catch (e) {}
        [-46898,256,-1024,9,536870889,1,23466];
        [23725,9223372036854775807,-465343782,-59348,-4294967296,1073741823];
        [11,-1679124210,-1073741824,-4294967297,1060399963,-2,5,5,536870888,63623];
        const o31 = {
        };
        new Proxy(v2, o31);
    }
    1073741824;
    static #h = C3;
    b;
    /*
    constructor(a35, a36, a37, a38) {
        for (const v39 in a36) {
        }
    }
    */
    /*
    constructor(a41, a42) {
        try {
            this.fuck(a42, "function");
        } catch(e45) {
        }
    }
    */
    0;
}
new C23(v0, v2);
class C48 {
    #c = "e";
}
class C49 {
    constructor(a51, a52) {
        for (let v53 = 0; v53 < 500; v53++) {
            [601759695];
            function F55(a57, a58, a59) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F55();
        }
    }
}
new C23(v2, v1);
new C23(v1, v0);
const v69 = new Int8Array(268435456);
const v71 = new Float32Array();
function F72(a74, a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    const v78 = this.constructor;
    try { new v78(v71, a76, 2); } catch (e) {}
    this.h = a75;
}
const v80 = new F72(v69, Int8Array, F72, v71);
function f81(a82, a83, a84) {
}
const v87 = [v80];
this.write();
for (let i92 = 0, i93 = 10;
    i92 < i92;
    (() => {
        for (let v97 = 0; v97 < 5; v97++) {
            function f98(a99) {
                return f98;
            }
        }
    })()) {
}
const o102 = {
    "arguments": v87,
    "type": "function",
};
new Worker(f81, o102);
