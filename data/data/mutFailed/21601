class C3 {
    static n(a5) {
        %VerifyType(this);
        this / ("MxC" % this);
        return 1000000000000.0;
    }
    static get b() {
        super.h = "p";
        super[this] = this;
        return this;
    }
}
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    [8n] > 8n;
}
new F12(F12, F12, F12);
C3.length;
const v22 = new C3();
try { v22.propertyIsEnumerable("MxC"); } catch (e) {}
const v24 = new C3();
const v25 = new C3();
let v29 = 16;
v29--;
function f32() {
    for (let i35 = 0, i36 = 10;
        (() => {
            const v37 = i35 < i36;
            class C38 {
            }
            function f39(a40, a41, a42, a43) {
                let v44;
                try { v44 = a41.apply(a43, a41); } catch (e) {}
                return v44;
            }
            f39(i36, C38);
            %OptimizeFunctionOnNextCall(f39);
            return v37;
        })();
        i36--) {
    }
    return v24;
}
Uint32Array.toString = f32;
const v51 = new Uint32Array(v29);
new Int16Array(7);
new BigInt64Array(1346);
const v61 = [7,128];
const v62 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
function f63() {
    const v64 = v25["h"];
    for (let v65 = 0; v65 < 32; v65++) {
        v64["p" + v65] = v65;
    }
    return BigInt64Array;
}
v62.toString = f63;
const v68 = v62[4];
v68 | v68;
const v70 = [40213,422333454,47387,65536,-51830];
v70.constructor = f32;
try { v70.slice(v61, Uint32Array); } catch (e) {}
v70[2] = v70;
0 - 0;
try { gc(); } catch (e) {}
gc();
new BigInt64Array();
try { ("boolean").match(925.1427495594241); } catch (e) {}
try { ("boolean").repeat(1000000.0); } catch (e) {}
const t69 = "toString";
t69[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
-256 >> -256;
function f91(a92, a93) {
    a93 >> a93;
    const v95 = a93--;
    v95 - v95;
    -(a92 | a92);
    const o117 = {
        "c": 15135,
        "a": 15135,
        "d": a92,
        __proto__: a93,
        "g": -1628878962,
        "type": "boolean",
        "a": a92,
        set b(a100) {
        },
        "g": 15135,
        "b": a93,
        get f() {
            super[1000000.0] = this;
            try {
                const v104 = new Int8Array(9);
                function f105() {
                    return f105;
                }
                const o112 = {
                    [f105]() {
                        delete v104[512];
                        [-2147483648,8,-49338,114079733,7,-2,4294967296,5,-128];
                        [16,4];
                        [13472,1073741823];
                    },
                };
                [o112];
                v62.copyWithin(8, -268435456, -256);
            } catch(e116) {
            }
            return this;
        },
    };
    function f118() {
        return v51;
    }
    function f119(a120) {
        new C3();
    }
    Object.defineProperty(o117, 1000000, { writable: true, configurable: true, enumerable: true, get: f118, set: f119 });
    o117.a = o117;
    o117.g = o117;
    return o117;
}
let v122;
try { v122 = f91(15135, 15135); } catch (e) {}
v122.a = v122;
v122[1000000];
f91(925.1427495594241, v61);
const v125 = f91(317008.8127941969, -4);
v125.a = v125;
f91(1000000.0, v62);
268435441n ^ 268435441n;
268435441n - 268435441n;
try { new BigUint64Array(-1628878962, -1628878962, "i"); } catch (e) {}
const v132 = new BigUint64Array();
v132[2445191368] = 268435441n;
