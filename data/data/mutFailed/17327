const v0 = [9,3,128,1790719115,-1500876825,-2];
const v1 = [3,9007199254740992,257,-635121822,1073741825,491835001];
const v2 = [9007199254740990,-9,2,-1024,-4294967297,10,-754402323,-2,16];
function f6() {
    return v0;
}
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    try {
        this.h = 15;
    } catch(e14) {
    }
    try {
        this.f = a13;
    } catch(e15) {
    }
}
new F10(2n, v1);
new F10(10722n, v2);
const v18 = new F10(-65537n, v1);
let v19 = 333;
const v20 = [1073741824,1073741823,1376142744,1073741825];
Object.defineProperty(v20, "h", { value: 15 });
new Uint8Array(268435440);
function F24() {
    if (!new.target) { throw 'must be called with new'; }
}
class C26 extends F24 {
}
function f27(a28, a29, a30, a31) {
    let v32 = a30 && v18;
    arguments[3] = arguments;
    ({"h":v32,"length":a28,...v19} = v20);
    ("find").startsWith(a31);
    for (let v36 = 0; v36 < 5; v36++) {
    }
}
for (let v37 = 0; v37 < 5; v37++) {
    f27();
}
f27();
%OptimizeFunctionOnNextCall(-536870912);
const t43 = 15;
t43();
