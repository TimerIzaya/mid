const v2 = new Array(3257);
const v5 = [4096];
const o6 = {
    "arguments": v5,
    "type": "function",
};
class C7 extends Array {
    static #m(a9) {
        class C10 extends Array {
            #b = 3257;
            static 2312993610 = a9;
            static [3257] = a9;
        }
        new C10();
        new C10();
        new C10();
        return a9;
    }
    1631;
    static #d;
}
const v14 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v16 = new Int16Array(v14, Int16Array, Int16Array);
const v17 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v20 = new Uint32Array(2684, 2684, 2684);
const v22 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v23 = [601759695];
function f25() {
    try { new Int32Array(v14, 4096, v16); } catch (e) {}
    new Int32Array();
    [-0.685155357392599,5.0];
    let v33 = -4294967295;
    v33--;
    let v35 = Float64Array;
    v35 = C7;
    b = v23;
    const v36 = v17.length;
    try {
        v5.forEach(C7, v17);
    } catch(e38) {
        e38.name = e38;
        Float32Array[2] = C7;
        const v40 = new Float32Array(Float32Array, Float32Array, Float32Array);
        function f41() {
            return v14;
        }
        Object.defineProperty(v40, "h", { configurable: true, enumerable: true, get: f41 });
    }
    Symbol.toPrimitive;
    const o47 = {
        toString(a45, a46) {
            return -4294967297n;
        },
    };
    const o61 = {
        [522675525n](a50, a51) {
        },
        [v36](a53) {
        },
        [-1]: 2684,
        1073741824: v20,
        "maxByteLength": -268435456,
        "b": v33,
        [-4294967297n](a55, a56, a57, a58) {
            eval();
        },
        "arguments": v22,
        256: 4096,
        ...v23,
        ..."Vre",
        4: "Vre",
        "type": "Vre",
    };
    return o61;
}
f25();
const v63 = new C7();
const v64 = new C7();
let v65 = new C7();
class C66 {
    constructor(a68, a69, a70, a71) {
        Object.defineProperty(v63, a69, { writable: true, configurable: true, enumerable: true, get: Array });
        function f72() {
            45725n === 45725n;
            return f72;
        }
        super[Array] = this;
    }
    static get d() {
        const v76 = super.c;
        v65 |= v65;
        const v78 = Symbol.iterator;
        const o96 = {
            [v78]() {
                let v80 = 10;
                const o95 = {
                    65536: v64,
                    n(a82, a83) {
                        return Uint32Array;
                    },
                    "f": v14,
                    next() {
                        v80--;
                        const v87 = v80 == 0;
                        return v20;
                        function F88(a90, a91) {
                            if (!new.target) { throw 'must be called with new'; }
                            this.h = a91;
                        }
                        ("function").repeat(506345303);
                        const o94 = {
                            "done": v87,
                            "value": v80,
                        };
                        return o94;
                    },
                };
                return o95;
            },
        };
        return v76;
    }
}
const v97 = new C66(v64, v65, C66, v64);
new C66(v2, v63, v97, v64);
function f99() {
}
const v102 = new Uint8ClampedArray(16);
new Uint32Array(v102);
new C66(v97, v65, Array, v2);
/ha$\P{Decimal_Number}+/vdisy.constructor.$7;
