new BigUint64Array(2);
const v5 = new Uint32Array(7);
new Uint16Array(1422);
class C9 extends BigUint64Array {
    constructor(a11, a12, a13, a14) {
        super(a13, 1422, a12);
        try {
            this.byteLength = a12;
        } catch(e15) {
        }
    }
    static [v5];
    1208;
    static [2];
}
const v16 = new C9(7, 1422, 7, 1422);
Int8Array.e = Int8Array;
0 * 0;
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v22 = new F20();
const v23 = new F20();
class C24 extends F20 {
    [v23];
}
const v25 = new C24();
v25.hasOwnProperty(v22);
new C9(1422, 1422, 2, 7);
new C9(1422, 2, 1422, 1422);
[-9007199254740990,268435441];
[-37207,127,-4,-2147483649,65535,-1024,-536870912];
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
new F31();
[4294967297,-256,8,1204244361,536870887];
[4,268435456,-1988579072,-9007199254740991,-31917];
[-1257322457,8,127,-14,39653,128,9007199254740990];
const v38 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
try {
    -35199 % (v16 / -1478256740);
} catch(e43) {
}
const v44 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
try { v44.concat(v38); } catch (e) {}
