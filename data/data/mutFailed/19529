const v2 = new Float64Array(127);
Int32Array.length;
const v6 = new Int32Array(2275);
try { v6.filter(Int32Array); } catch (e) {}
let v8 = 1024;
v8--;
new Uint32Array(v8);
class C12 extends Float64Array {
    toString(a14, a15, a16) {
        const v17 = a14;
        const t10 = a15 instanceof Uint32Array;
        t10[3] = 2275;
        return 127;
    }
    [127];
    static [2275] = Int32Array;
    #valueOf(a20, a21, a22) {
        super[this] = a20;
        let [,v23,v24] = this;
        const v26 = [v2,2275,127];
        const v30 = new Int8Array(8);
        const v32 = [v30];
        v32.construct(Uint16Array, v32);
        Reflect.construct(Uint32Array, v26, Int32Array);
        return v23;
    }
}
C12.prototype = C12;
new C12();
new C12();
new C12();
Math.tan(4.0);
