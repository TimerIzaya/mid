-Infinity;
const v4 = new Date(Date, -741.8520322810464);
const v5 = v4?.setMilliseconds;
try { new v5(v4); } catch (e) {}
function f10() {
    return v4;
}
try { new f10(); } catch (e) {}
Number.isNaN(NaN);
-(-1000.0);
function f21() {
    const o24 = {
        get c() {
            super.m();
        },
    };
}
const v25 = f21();
const v28 = 5 >> 5;
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v31 = new Uint32Array();
let v32 = -6n;
const v33 = v32--;
v33 <= v33;
const v35 = [601759695];
const v36 = [1073741824,1073741823,1376142744,1073741825];
const v37 = v36?.filter;
try { new v37(v36); } catch (e) {}
function f40(a41, a42, a43, a44) {
    a41.cause = f21;
    const v45 = a41.constructor;
    v45.prototype;
    let v47;
    try { v47 = new v45(); } catch (e) {}
    let v49 = v47.length;
    v49++;
    let v51 = -6.50438168344124;
    v51 **= v51;
    function f52() {
        try { ("Vre").toLocaleLowerCase(); } catch (e) {}
        ("Vre").charAt();
        let v56;
        try { v56 = ("Vre").codePointAt(); } catch (e) {}
        let v57 = Float64Array;
        v57 = a42;
        let v58 = v29.length;
        v58++;
        const o78 = {
            "c": v32,
            "a": v56,
            [v33](a61, a62) {
            },
            [v35](a64, a65, a66, a67) {
                eval();
            },
            "c": v35,
            valueOf(a71, a72) {
            },
            1073741824: v31,
            [v32](a74, a75, a76, a77) {
            },
            "arguments": 5,
            256: a44,
        };
    }
    try { f52(); } catch (e) {}
    f52();
    const v82 = Array(a44);
    try { v82.findLast(); } catch (e) {}
    v82.unshift();
    const v86 = new Uint8Array();
    const t71 = v86.buffer;
    t71.constructor = f21;
    const v89 = new Int32Array();
    v89[3];
    for (let v91 = 0; v91 < 5; v91++) {
        v91 !== v91;
    }
    %OptimizeFunctionOnNextCall(f52);
    let [v93] = v86;
    function F94(a96, a97, a98, a99) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const t83 = -5.0;
    new t83();
    new F94(65536, v25);
    try { v36["find"](..."find", v49, ...v35, ...v36, ...522675525n); } catch (e) {}
}
for (let v104 = 0; v104 < 10; v104++) {
    ~v104;
    f40(v31);
}
%OptimizeFunctionOnNextCall(v4);
v28(5);
