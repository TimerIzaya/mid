let v0 = -14;
Int8Array.length;
const v6 = new Int8Array(58);
const v7 = v6?.constructor;
let v8;
try { v8 = new v6(58, v6, v6); } catch (e) {}
Uint16Array.h = Uint16Array;
const v11 = Uint16Array.name;
try { v11.match(v6); } catch (e) {}
const v13 = new Uint16Array(0);
1 * 1;
v0--;
new v8(1);
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.__defineSetter__;
    try { new v21(F19, F19); } catch (e) {}
    const v23 = this?.__lookupSetter__;
    try { new v23(Int8Array); } catch (e) {}
}
const v25 = new F19();
const v26 = v25?.__defineSetter__;
try { new v26(v25, v13); } catch (e) {}
v25.length;
function f29() {
    v7 & (4087 / 4087);
    const v34 = Array(4087);
    try { v34.map(Int8Array); } catch (e) {}
    v34[1959] = v25;
    for (const v36 of v34) {
    }
    return 4087;
}
%PrepareFunctionForOptimization(f29);
f29();
%OptimizeFunctionOnNextCall(f29);
f29();
