const v2 = new BigUint64Array(257);
function f3(a4, a5, a6) {
    return f3;
}
class C7 extends f3 {
}
new BigUint64Array(12);
const v13 = new Float64Array(27838);
[268435456,921699312,0,-815404338,-128,4294967295,0,61636];
const v15 = [-1527296987,48092];
[-2147483649,4,0,512,-26055,25514,29668,-50919,-426070400];
new WeakSet();
let v19 = 536870912;
const v26 = new v13();
const o29 = {
    get h() {
        return this;
    },
    [1]: 4,
    2778757984: 12,
    "h": v26,
};
v19 = 4096;
new Uint16Array(30353);
new Uint8Array(128);
new Uint8Array(64);
const v46 = new C7();
v46.constructor = Date;
function f47(a48, a49, a50, a51) {
    function f53() {
        const o61 = {
            84: -53303,
            set b(a56) {
            },
            ["Vre"](a58, a59) {
                super[f53];
            },
        };
        return f47;
    }
    f53();
    %OptimizeFunctionOnNextCall(f53);
    return a50;
}
f47();
const o82 = {
};
o82.g = v26;
const o83 = {
};
class C87 {
}
function F88(a90, a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    a90 >> a90;
    a91 == -9007199254740992;
    5 >>> a90;
    const o96 = {
    };
    function f97() {
        return f97;
    }
    a91 - a91;
    const v99 = this.constructor;
    try { new v99(a92, C87); } catch (e) {}
    v99.a <<= 4096;
    this[12] = 0;
    a90 % a90;
}
try {
    v15.g = 512;
} catch(e105) {
}
v2.length &&= 121;
new F88(F88, Math, 1);
new F88(820, 121);
