function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "e", { writable: true, value: F0 });
    try {
        this.d = -1024;
    } catch(e3) {
    }
    try {
        this.e = -1024;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f8(a9) {
    const o14 = {
        set f(a11) {
            this[F0] = super[this];
            try {
                v6.b = a9;
            } catch(e13) {
            }
        },
        "h": a9,
        ...a9,
    };
    return o14;
}
f8(v7);
f8(v5);
f8(F0);
function f18() {
    return f8;
}
class C19 extends v7 {
    static get g() {
        new Int8Array(4);
        new F0(255);
        new Uint32Array(132);
        return v7;
    }
}
new C19();
new C19();
new C19();
Math.log10();
