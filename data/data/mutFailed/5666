new Int32Array(1508);
class C5 {
    #m(a7, a8) {
        class C9 {
            e;
        }
    }
}
new Float32Array(256);
new BigUint64Array(128);
new Uint8Array(208);
for (let v21 = 0; v21 < 10; v21++) {
    function F23(a25, a26) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = "b";
        this.d = a26;
    }
    const v27 = new F23();
    const o28 = {
        ...v27,
    };
}
class C30 {
    static {
        try {
        const t0 = 529940173;
        t0(this, this);
        } catch (e) {}
        Math.cos(1000);
        Math.tan(1000);
        const o38 = {
            "maxByteLength": 201,
        };
        Float32Array.BYTES_PER_ELEMENT = Float32Array;
    }
}
const v40 = new C30();
function f43(a44, a45, a46) {
    const o55 = {
        __proto__: a45,
        n(a48) {
            const o50 = {
            };
            return Worker(o50);
        },
        [a46]: -2147483648,
        [a45](a53, a54) {
        },
        "c": 529940173,
        1073741824: C30,
    };
    return o55;
}
const v57 = f43(-1, f43());
const v58 = f43(-2147483648, v40);
const v59 = -5 << v57;
v58[Symbol.isConcatSpreadable] = v59;
