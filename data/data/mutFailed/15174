let v3 = 536870912n << 536870912n;
v3++;
3445 - 3445;
const v9 = new BigInt64Array(3445);
class C10 {
}
try { C10.apply(undefined, v9); } catch (e) {}
new Int16Array(1000);
try { new BigInt64Array(BigInt64Array, 536870912n, Int16Array); } catch (e) {}
const v16 = new BigInt64Array(5);
v16[6] = 1000;
try {
    v9.copyWithin(1, 1);
} catch(e20) {
}
function f22() {
    for (let [i25, i26] = (() => {
            switch (f22) {
            }
            return [0, 10];
        })();
        i25 < i26;
        i26--) {
    }
    return f22;
}
new BigInt64Array(11);
function f35() {
    1000000000000.0 % 1000000000000.0;
}
try { f35(); } catch (e) {}
f35();
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.__defineGetter__;
    try { new v45(undefined, 11); } catch (e) {}
}
const v47 = new F43();
const v48 = new F43();
v48.length = v48;
try {
    v47.h = v48;
} catch(e49) {
}
function F51(a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    a53[4294967295] = a53;
}
try { new F51(f22, v3, BigInt64Array); } catch (e) {}
function f58() {
    let v61 = Math.acosh(-14);
    v61--;
    const v63 = Math.atanh("Vre");
    const v65 = ~(v63 >> v63);
    return v65 != v65;
}
try { new f58(); } catch (e) {}
const v69 = [1000000000000.0];
const v71 = new BigUint64Array();
try { v71.values(); } catch (e) {}
const v74 = v71.__proto__;
try { v74.with(-2.216498506298894, v71); } catch (e) {}
v74[512] %= 9;
v69[1] = v69;
new Uint32Array(v69);
