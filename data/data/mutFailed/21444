[3.4152697499426e+307,1.9777365208832364e+307,1.0,0.22914954548297017,0.755348696020462,Infinity,-3.2324734720035914e+307,-5.1277230496579];
[4.589425425765272,-5.0,4.0,-8.101696375680856,1000000000000.0,200462.0648561872];
[0.7720294374458128,-7.028960022283355e+307,-1e-15,610.2718548707164];
const v12 = [];
function f13() {
    return v12;
}
-3.0 / -3.0;
const v19 = ArrayBuffer.atan2(v12, -40875);
v19 >>> v19;
function f22(a23, a24, a25) {
    return a24;
}
class C26 extends f22 {
}
try { new C26(); } catch (e) {}
for (let v28 = 0; v28 < 5; v28++) {
    Object.defineProperty(C26, Float32Array, { enumerable: true, get: f22 });
}
-3.0 % -3.0;
function f31(a32, a33) {
    a32 >> a32;
    a32 + a32;
    const v36 = a33 >> a33;
    v36 >>> v36;
    const o45 = {
        [-2]: a32,
        ...-3.0,
        ...v12,
        ...v19,
        get NEGATIVE_INFINITY() {
            Int32Array.acos(0.0);
        },
        "a": -3.0,
        set g(a42) {
            v12.__proto__ < a33;
        },
        "h": a33,
        "c": -3.0,
        ...v12,
        "b": a32,
        4: a33,
    };
    return o45;
}
const t45 = "Bl4";
t45[0] = "Bl4";
const v48 = new BigUint64Array("Bl4");
try { v48.copyWithin(v48, v12); } catch (e) {}
const v51 = new Int32Array();
for (let v52 = 0; v52 < 25; v52++) {
    v51.__proto__ = v48;
}
const v53 = f31(0.0, 0.0);
f31(64216.173742571846, 64216.173742571846)[4];
f31(64216.173742571846, -3.0);
let v57 = 64n;
v57 ^ v57;
v57--;
gc();
const v62 = [-1000.0,1000000000.0];
const v63 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
try { v63.lastIndexOf(v19); } catch (e) {}
let v66 = 37369;
v66--;
function f68(a69, a70) {
    const o71 = {
        [v57]: 8n,
        __proto__: a70,
        [v66]: a70,
        [a69]: a69,
        ...a69,
        5: v62,
        ...v12,
    };
    return o71;
}
const v76 = C26?.constructor;
try { v76(v53); } catch (e) {}
class C79 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
class C83 {
}
C83.g = C83;
("string")[3];
const v87 = Symbol.iterator;
Symbol.for(v87.description);
const t93 = "string";
t93[v87] = v87;
new BigInt64Array();
async function f93(a94, a95, a96, a97) {
    const v98 = await C83;
    try { new v98(); } catch (e) {}
    return a96;
}
f93.b = f93;
try { f93.toString(); } catch (e) {}
f93();
