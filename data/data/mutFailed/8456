const v3 = [65536];
const v4 = [v3,-11];
try { v4.lastIndexOf(v3); } catch (e) {}
const v6 = [v4,6,v3,v4];
("D")[0].substring();
const v10 = [-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036];
v10.toLocaleString(v4, v10);
try { v6.filter(-11); } catch (e) {}
try { ("reduceRight").localeCompare(v6); } catch (e) {}
("boolean")[0];
219 >>> 219;
const v21 = new Float32Array(219);
v21[87] = v21;
const o23 = {
    0: "1ya",
    162: "1ya",
};
o23[0] = o23;
new Uint16Array(8);
class C29 {
}
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    function f38(a39, a40) {
        return 6;
    }
    f38(v31, C29);
    try { v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
    const v45 = new Date();
    const v47 = new Set();
    v47.add(v45);
    let [v49,,...v50] = v47;
    v49.setUTCMilliseconds();
    return a36;
}
for (let v52 = 0; v52 < 10; v52++) {
    f33(v52, f33, 6, v52);
}
const v54 = new Uint32Array(128);
v54[37];
gc();
Int8Array.prototype;
const v63 = new Int8Array(3);
const v66 = new Int32Array(3, 114, 3);
v66["keys"](v63, ...v66, ..."keys");
function F69(a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
}
try { F69(F69, Map, F69); } catch (e) {}
class C75 {
    static get g() {
        const v77 = (a78, a79) => {
            'use strict';
            try {
                a78.a = this;
            } catch(e80) {
            }
            return a79;
        };
        try {
            var a = super.subarray();
        } catch(e82) {
        }
    }
}
const v83 = new Map();
for (const v86 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
    let v88;
    try { v88 = ("NFKC").indexOf(326.9924986537749); } catch (e) {}
    v88 ^ v88;
    const v91 = ("-2").normalize("NFKC");
    v91[1] = v91;
}
~-1000.0;
-1000.0 & -1000.0;
const v97 = new Map();
try { v97.values(); } catch (e) {}
WeakMap.length;
class C101 extends WeakMap {
    536870887;
}
C101.length = C101;
Int32Array.BYTES_PER_ELEMENT;
const v105 = new Int32Array(2917);
try { v105.reduce(WeakMap); } catch (e) {}
const v109 = ("lastIndexOf")[7];
try { v109.italics(); } catch (e) {}
const v111 = v105["lastIndexOf"](10);
v111 + v111;
const v115 = -1.7976931348623157e+308 - -1.7976931348623157e+308;
v115 / v115;
const v118 = ("lastIndexOf").localeCompare("lastIndexOf", "symbol", "lastIndexOf");
v118 >>> v118;
v118 + v118;
gc.length = gc;
const v122 = gc();
const v124 = [-1.5424212036356715e+308];
v124[536870887n] = v124;
-2.0 % -2.0;
const v131 = 256 !== 6;
!(v131 || v131);
try {
    const t103 = null;
    t103.valueOf = v105;
} catch(e135) {
    e135.stack = e135;
    const v136 = e135.stack;
    v136.prototype = v136;
    const v137 = e135.message;
    try { v137.search(v137); } catch (e) {}
    const v139 = v137?.toLocaleUpperCase;
    v139.e = v139;
    try { new v139(); } catch (e) {}
    const v141 = e135.stack;
    v141.e = v141;
}
-2.0;
const v146 = v83.size;
v146 >>> v146;
let v148 = v146 | v146;
v148--;
C101[3438438303] |= 2.0;
0 - 0;
Uint8Array.name = Uint8Array;
new Uint8Array(0);
let v154 = 3723;
v154 !== v154;
v154--;
const v158 = new Float32Array(v154);
~3245;
Float32Array.d = Float32Array;
const v162 = new Float32Array(3245);
try { v162.reduce("reduceRight"); } catch (e) {}
let v165;
try { v165 = Math.imul(-2.0, -2.0); } catch (e) {}
v165 + v165;
Math.atan2(-0.0, 2.0);
function F168(a170, a171) {
    if (!new.target) { throw 'must be called with new'; }
    const v172 = this?.constructor;
    try { new v172(this, 6); } catch (e) {}
    let v174;
    try { v174 = this.isPrototypeOf(2917); } catch (e) {}
    !v174;
}
F168.arguments = F168;
const v176 = new F168();
const v177 = v176?.constructor;
let v178;
try { v178 = new v177(C101, "symbol"); } catch (e) {}
function f179(a180, a181) {
    function f183(a184) {
        return a180 ^ a181;
    }
    this.onmessage = f183;
    return this;
}
try { v178.isPrototypeOf(v178); } catch (e) {}
Map * v178;
try {
    const v191 = [v162,Float32Array,"shift",v83,v124];
    try { v191.with(v154, v154); } catch (e) {}
    v148 << v148;
    ("V9t").isPrototypeOf;
    try {
        new Map("268435441");
    } catch(e198) {
    }
    try { ("atanh").big(); } catch (e) {}
    const v201 = new F168(v191, "atanh");
    v201.length;
} catch(e203) {
    new Float32Array(1024);
    try { (1).__defineSetter__(); } catch (e) {}
}
const v209 = new C75(-63366, v176);
const v210 = v209?.constructor;
try { new v210(); } catch (e) {}
function f212() {
    const o218 = {
        [1836424012](a215, a216, a217) {
        },
    };
}
function F219(a221, a222) {
    if (!new.target) { throw 'must be called with new'; }
    const v223 = a221?.constructor;
    try { new v223(null); } catch (e) {}
    try { new a222(null, 16); } catch (e) {}
    try {
    } catch(e226) {
    }
    class C227 {
        #a;
        valueOf(a229, a230) {
        }
        toString(a232) {
        }
        static f;
    }
    const v233 = new C227();
    class C236 extends C227 {
        #n(a238, a239, a240, a241) {
            super[403343340n];
        }
        static #toString(a244, a245) {
            v233[-2126520711n] = this;
        }
    }
    this.h = a222;
}
const v248 = new F219(F219, F219);
const v249 = v248?.constructor;
try { new v249(v158, v158); } catch (e) {}
const v251 = v248?.constructor;
let v252;
try { v252 = new v251(v176, v122); } catch (e) {}
v252.h;
!(delete v248.h);
