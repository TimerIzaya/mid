for (let v3 = 0; v3 < 10; v3++) {
    try {
        const o4 = {
        };
        const t4 = null;
        t4.valueOf = o4;
    } catch(e6) {
    }
}
function f10() {
    return -1.7976931348623157e+308;
}
const v13 = new Float64Array(16);
const v15 = [0.5445782990135042];
Reflect.apply(v13.indexOf, v13, v15);
-4294967296 + -4294967296;
let v21 = 7487;
new BigInt64Array(4046);
for (const v26 in [-65535,536870889,4096]) {
    Math.log10(v26) ** 1000000000000.0;
}
v21 !== v21;
class C32 {
    static #c;
    c;
    static 5 = 0.5445782990135042;
    #e;
    constructor(a34, a35, a36, a37) {
        super();
        function f38(a39, a40, a41) {
        }
        const o44 = {
            "type": "function",
        };
        new Worker(f38, o44);
    }
    m(a47, a48) {
        super.b = this;
        a47[9007199254740992] = this;
        let v50 = 1073741825;
        v21 / v21;
        const v52 = C32?.[f10];
        try { new a47(a47, v52); } catch (e) {}
        -2 | 268435441;
        const v57 = -2 >>> 268435441;
        new Set();
        function f60() {
            return f60;
        }
        Math.max(v57);
        const v62 = v50 % v50;
        isNaN.log1p(v62);
        isNaN.round(v62);
        ++v50;
        --v21;
        return a48;
    }
}
C32[5] = C32;
const v67 = new C32();
v67.b = v67;
new C32(876696131, C32, -1000000000.0);
new C32();
function f71(a72, a73, a74, a75) {
    a72 ^ a72;
    a73.name;
    const v78 = a73 >>> a73;
    (v78 << v78) != -2;
    for (let v81 = 0; v81 < 5; v81++) {
    }
    return v78;
}
for (let v82 = 0; v82 < 5; v82++) {
    f71(v82, f71, v82, C32);
}
%OptimizeFunctionOnNextCall(f71);
f71(-2, -2, -2, f71, -1000000000.0, v21, -2);
