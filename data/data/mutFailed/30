const v2 = new Uint32Array(51);
const v5 = new BigUint64Array(3188);
const v8 = new v5(9);
class C9 extends BigUint64Array {
    a;
    #c;
    f = Uint32Array;
    #d = 9;
    static b = v5;
    constructor(a11, a12) {
        super(v8, 3188, a11);
        super[Uint8Array] = this;
        let [v13] = this;
    }
    8 = Uint8Array;
}
new C9(BigUint64Array, v8);
new C9(C9, 9);
new C9(51, v2);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F17();
async function f22(a23, a24, a25, a26) {
    a23.fuck();
    await v21;
    return F17;
}
f22();
function f0() {
    try { ("3Ol").match("stack"); } catch (e) {}
    const o8 = {
        "a": "number",
        ..."3Ol",
        __proto__: "number",
        "e": "number",
        set g(a6) {
            this[48];
        },
        "d": "3Ol",
        "g": "3Ol",
        65537: "3Ol",
        "h": "stack",
        ["stack"]: "3Ol",
        "b": "3Ol",
        "f": "3Ol",
    };
    o8[1] = o8;
    return o8;
}
const v9 = f0();
const v10 = f0();
const v11 = f0();
function f12() {
    return f0;
}
function f13() {
    return v9;
}
f0 - v10;
let v15 = delete v9?.b;
v15 || v15;
!v15;
v11[v15] >>= v15;
v9[v11];
try {
    v9[f12] = f0;
} catch(e19) {
}
const v20 = [f13];
v20.g = v20;
const v21 = [f12,v20];
[v20,f12];
try { ("f").startsWith(f13); } catch (e) {}
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try { a29.strike(); } catch (e) {}
    try { a29.match(v11); } catch (e) {}
    try {
        this.b = a29;
    } catch(e33) {
    }
    try {
        Object.defineProperty(this, "b", { get: f13, set: f12 });
        try { a30(a29, a30, this, v21); } catch (e) {}
        try { new SyntaxError(v21); } catch (e) {}
        try {
            this[270] = this;
        } catch(e37) {
        }
        this.a = v10;
    } catch(e38) {
    }
}
const v39 = new F27("n", v10);
v39[270] = v39;
const v40 = new F27("n", v9);
const v41 = new F27("bigint", v10);
v41[270] = v41;
-1.0 % -1.0;
let v44 = 2.220446049250313e-16;
167.17964779139515 >> 167.17964779139515;
class C47 {
    constructor(a49) {
        a49.h = a49;
        const o50 = {
            ...this,
        };
        o50.e = o50;
        o50.d = o50;
        try {
            v44 = -1.0;
        } catch(e51) {
        }
    }
    [v44];
    #e = -1.0;
}
let v52;
try { v52 = new C47(v11); } catch (e) {}
const v53 = v52?.constructor;
try { new v53(f0); } catch (e) {}
const v55 = new C47(v44);
const v56 = v55?.constructor;
try { new v56(f0); } catch (e) {}
const v58 = v55?.constructor;
v58.prototype = v58;
let v59;
try { v59 = new v58("bigint"); } catch (e) {}
const v60 = new C47(167.17964779139515);
const v61 = new C47(167.17964779139515);
const v62 = v61?.constructor;
let v63;
try { v63 = new v62(f13); } catch (e) {}
const v64 = v63?.constructor;
try { new v64(v15); } catch (e) {}
let v66 = 128;
v66 - v66;
v66++;
function F70(a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = this?.constructor;
    try { new v75(v59, v59, v20); } catch (e) {}
    const v77 = a74?.constructor;
    try { new v77(a74); } catch (e) {}
    try { this.propertyIsEnumerable(a72); } catch (e) {}
    a72.g = a72;
    const v80 = a73?.constructor;
    v80.name = v80;
    let v81;
    try { v81 = new v80(this); } catch (e) {}
    const v82 = v81?.constructor;
    try { new v82(v40); } catch (e) {}
    try {
        this.e = a73;
    } catch(e84) {
    }
}
F70.arguments = F70;
const v85 = new F70(F70, v61, v55);
const v86 = v85.length;
v86 >>> v86;
const v88 = new F70(v61, v60);
const v89 = new F70(v44, v55, v55);
try {
    v60.fuck([v85,v66,v89,v55,167.17964779139515], -2058640984);
} catch(e92) {
    e92.message = e92;
}
try {
    v15 = v66;
} catch(e93) {
}
const v94 = f12 || F70;
try { v94(); } catch (e) {}
function f96() {
    return v89;
}
f96.arguments = f96;
f96.d = f96;
try { v55["indexOf"](v89, v55, v88); } catch (e) {}
