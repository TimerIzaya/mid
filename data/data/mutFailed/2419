function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 940953242;
    } catch(e3) {
    }
    try {
        function F4() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 0;
        }
        const v7 = F4?.toString;
        try { new v7(); } catch (e) {}
        class C10 extends Set {
        }
        this.a = 940953242;
    } catch(e11) {
    }
    try {
        this.c = 940953242;
    } catch(e12) {
    }
}
const v13 = new F0();
const v14 = new F0();
let v15;
try { v15 = F0(); } catch (e) {}
try { v15(); } catch (e) {}
const v20 = new F0();
2 & 2;
try { v13.setUTCMilliseconds(v20, Uint32Array, Uint32Array); } catch (e) {}
v14.g;
Array.prototype = Array;
const v28 = new Array(190);
new Uint32Array(2);
function f30() {
    return f30;
}
function f31() {
    return f30 == f31;
}
%OptimizeFunctionOnNextCall(f31);
new Int32Array(2682);
BigUint64Array.prototype = BigUint64Array;
new BigUint64Array(1559);
const v40 = [[]];
class C41 {
}
C41.d = C41;
const v42 = new C41();
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
v42[v40];
function f46(a47, a48, a49, a50) {
    const o55 = {
        [f46](a52, a53, a54) {
        },
    };
    const v56 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
    const v58 = ("-4")?.search;
    try { new v58(v28); } catch (e) {}
    Object.defineProperty("-4", "d", { enumerable: true, value: f30 });
    new Map();
    v58.h &= 190;
    v28[8] = Int32Array;
    2.220446049250313e-16 + 2.220446049250313e-16;
    v56.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
    return a50;
}
%OptimizeFunctionOnNextCall(f46);
f46();
