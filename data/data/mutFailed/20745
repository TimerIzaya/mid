function f1() {
    const o6 = {
        "g": true,
        [true]() {
            for (const v3 in this) {
                this | v3;
                super.h = this;
            }
            super.c = this;
            return true;
        },
        [-2]: true,
        4115318911: true,
        268435441: true,
    };
    return o6;
}
const v7 = f1();
const v8 = f1();
f1();
class C10 {
    static get c() {
        try { v7["imul"](true); } catch (e) {}
        const v17 = f1 ** -0.0;
        const v18 = -0.0 % f1;
        const v19 = -0.0 && -0.0;
        Math.tanh(v17);
        v17 >>> v19;
        return v18;
    }
}
const v22 = new C10();
const v23 = new C10();
[f1,this,this,this,Float64Array];
class C27 {
}
const v28 = new C10();
class C29 extends C10 {
    #b = v8;
    #n(a31, a32, a33) {
        const v34 = f1();
        [-2.220446049250313e-16,1000000000000.0,-837.2035238357056,1e-15,-1e-15,0.0,8.983016268137746,-552669.8213760112];
        const v36 = [-Infinity,0.7181955447577444];
        [0.9703140332267038,-1000000000.0];
        const v38 = [a31,v7,v34,v23];
        Uint16Array[1] = 1277001064;
        const v42 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
        v42[3] = v42;
        const v43 = [v38,v36];
        [v7,v22,v34,a32,a32];
        return v43;
    }
    static [v28];
    [C10];
}
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = this.constructor;
    let v51;
    try { v51 = new v50(); } catch (e) {}
    this.e = v51;
}
function f52() {
    for (let v53 = 0; v53 < 5; v53++) {
        new F45();
    }
    return F45;
}
const v55 = new C29();
new C29();
class C58 {
    constructor(a60, a61) {
        const o62 = {
            __proto__: a61,
        };
        o62[a61] = o62;
    }
}
const v63 = new C58(v55, -1000000000.0);
const v64 = new C29(-1000000000.0, v63);
const v65 = v64.constructor;
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
new F66(v63, v65);
new C29();
class C74 {
    ["getPrototypeOf"] = -1.7976931348623157e+308;
}
class C75 extends C74 {
    [this] = C74;
}
let v76;
try { v76 = new C75(); } catch (e) {}
const v77 = v76?.getPrototypeOf;
try { new v77(); } catch (e) {}
const v80 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
[1000000000.0,4.0,5.0,-6.555298893133851e+307];
for (let v82 = 0; v82 < 5; v82++) {
    const v83 = v80.values();
    v83.unshift(-463330.04816285486, v83);
}
