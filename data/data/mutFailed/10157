const v2 = new Uint32Array(4096);
const v5 = new Int8Array(127);
const v8 = new Int8Array(15);
function f9() {
    return v5;
}
const v10 = [-4.177961183959658,1.6309292683179403e+308,-0.0,1.0,-1000.0,-Infinity,-5.0,-1.5264988415621623];
[-0.0,1e-15,-2.220446049250313e-16,NaN,457219.5973681847,792803.8922391385,0.3428276861381524,-157473.30196591513];
let v12 = [v8,f9,v5,f9];
const v13 = [127,v8,v12,Uint32Array,v5];
const v14 = [Uint32Array,15,v13,v2];
v12 **= v13;
let v15;
try { v15 = v10.indexOf(v14, v5); } catch (e) {}
let v16 = 0;
while (v16 < 1) {
    new Float32Array(127);
    new Uint8ClampedArray(11);
    new Float64Array(1);
    v16++;
}
[2.0,-265.4490871863104,-2.0,-1.0,2.0,5.0,-885.2534388916021,-1000.0,-6.926897854055243,1.0];
class C31 extends Float32Array {
    #p(a33, a34, a35) {
        const v36 = new Float32Array(this, a35);
        v36 * a33;
        return v2;
    }
}
const v38 = new C31();
const v40 = [v38,v38];
Reflect.apply(v15.reverse, v38, v40);
