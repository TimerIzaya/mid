class C3 {
    constructor(a5) {
        a5[4];
        const v7 = ("yIm").__proto__;
        function f8(a9) {
            return f8;
        }
        for (let v10 = 0; v10 < 32; v10++) {
            const t8 = "yIm";
            t8["p" + v10] = v10;
        }
        Object.defineProperty(a5, 10, { writable: true, configurable: true, value: a5 });
        try {
            a5.toString = v7;
        } catch(e13) {
        }
    }
    static f = "valueOf";
    static g = "valueOf";
    ["valueOf"];
}
const v14 = new C3("valueOf");
const v15 = new C3("yIm");
const v16 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this.constructor;
    try { new v22(a20, a19, a21); } catch (e) {}
    a21 + a21;
    try {
        this.b = v16;
    } catch(e25) {
    }
}
class C26 extends F17 {
    512 = v16;
}
const v27 = new C3("RPuy");
class C30 {
}
const v32 = new Uint32Array();
const o40 = {
    [v32](a34, a35, a36) {
        C3?.[a34].__proto__;
    },
};
function f42(a43, a44) {
    const o55 = {
        "d": v15,
        "h": C3,
        "e": "yIm",
        "a": a43,
        "f": "yIm",
        "g": C3,
        get c() {
            try {
                v27.valueOf = "yIm";
            } catch(e47) {
            }
            a44 << v27;
            return 982546903;
        },
        ..."valueOf",
        get d() {
            this[2147483648] /= -12;
            let v51 = -908890636;
            return Math.log(this & --v51);
        },
    };
    return o55;
}
f42("RPuy", v15);
f42("yIm", "RPuy");
f42(v14, "yIm");
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    a64 % a64;
    a65 >>> a65;
    const v68 = this.constructor;
    try { new v68(0.8735699512350641); } catch (e) {}
    this.c = a64;
    this.g = a65;
}
new F62(-3.413527541634011e+307, 0.941857606566444);
const v71 = new F62(F62, 0.941857606566444);
new F62(0.941857606566444, 0.941857606566444, 0.941857606566444, v71, v71);
class C73 {
}
const v77 = new Date();
v77.getUTCDay();
("boolean").normalize();
const v81 = Math.log1p(-4.600007534268795);
v81 + v81;
