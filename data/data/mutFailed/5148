class C3 {
    constructor(a5, a6) {
        this[1578] = "hasInstance";
        const v7 = a6?.[7];
        for (const v8 in "hasInstance") {
            v7[-13] ||= a6;
            "P" % ("hasInstance" ** "P");
            for (let v11 = 0; v11 < 32; v11++) {
                ([-3,47741,-16128,9007199254740992,-1024,-58567,268435439,-4294967296,1807295090,-9223372036854775808]).flat();
                const o17 = {
                    toString(a16) {
                        return "p";
                    },
                };
                const t14 = "hasInstance";
                t14["p" + v11] = v11;
                function F19(a21, a22, a23, a24) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                for (let v25 = 0; v25 < 5; v25++) {
                }
                const v26 = [];
                class C27 {
                    static get b() {
                        try {
                            super.getOwnPropertyNames();
                        } catch(e30) {
                        }
                        return v26;
                    }
                    constructor() {
                        this[v26] = this;
                        this[v26] %= this;
                    }
                    static e;
                    [v26];
                }
                const v32 = new C27();
                class C34 {
                    [-9] = v32;
                    4294967296;
                    5;
                }
            }
        }
    }
    static #a = "hasInstance";
}
class C35 {
}
("P").constructor;
[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757]];
const v39 = new C3(-13, "hasInstance");
const v40 = new C3(v39, C3);
new C3(v40, -13);
new Float32Array(255);
new Uint8ClampedArray(129);
new Float64Array(120);
let v51 = 10;
try {
const t0 = 129;
new t0();
} catch (e) {}
const v53 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C55 {
    static #e;
    m(a57, a58, a59, a60) {
        v53.#e;
        a58.#e = -1;
    }
}
for (let i = 0; i < 10; i++) {
    v51--;
    function f69(a70, a71) {
        return f69;
    }
    new Int16Array();
    let v75 = v51 << v51;
    --v75;
    const o78 = {
        "execution": "hasInstance",
    };
    gc(o78);
    let v80 = --v75;
    let v81 = ++v80;
    Math.cos(++v81);
}
