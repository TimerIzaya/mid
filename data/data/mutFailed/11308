function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 4;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
new Int16Array(4);
try { (-12n).getTime(-12n, -816409267); } catch (e) {}
class C17 {
}
new Int8Array(14);
const v22 = new Int16Array(64);
const v24 = new BigInt64Array();
class C25 {
    constructor(a27, a28) {
        for (let v29 = 0; v29 < 10; v29++) {
            v24[-1];
            new BigUint64Array(4);
            v6.reverse();
            function F35(a37, a38) {
                if (!new.target) { throw 'must be called with new'; }
            }
            try {
                const v39 = [];
                class C40 {
                    [C17];
                    set a(a42) {
                        const v44 = v39 === v39 ? a42 : v39;
                        [v39,a42,a42,v39];
                        [v39];
                        let v47;
                        try { v47 = new v44(v4, F35, v6, this, a28); } catch (e) {}
                        try { a28(C25); } catch (e) {}
                        [a42,v39,v39,v39,v47];
                    }
                    static [v39];
                    #f;
                    h = v39;
                }
                const v53 = new C40();
                const v54 = new C40();
                function F56(a58, a59, a60, a61) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v62 = new F56(v53, -14, v53, v54);
                try { v62(); } catch (e) {}
                super.o();
            } catch(e65) {
            }
        }
    }
}
class C66 extends C25 {
}
new v22();
