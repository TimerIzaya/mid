class C3 {
    static 8 = 268435439;
    p(a5) {
        super.c **= -59941;
        const v10 = +-59941;
        let v11 = 13 + 13;
        v10 >> 268435439;
        const v13 = v11 && v10;
        ++v11;
        return v13;
    }
}
new C3();
new C3();
const v17 = new C3();
function f18() {
    return v17;
}
const v26 = Symbol.iterator;
const t19 = "string";
t19[v26] = v26;
Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
Promise.d = Promise;
new Float32Array(1000);
1000 instanceof WeakMap;
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new Uint16Array(4294967295);
const v42 = [Uint32Array,Uint32Array,Uint32Array,Uint32Array];
v42.__proto__ = v42.push();
function f44(a45, a46) {
    Math.atan2(Math, f44);
    return f44;
}
this.DataView;
const v53 = new Float32Array(7);
try { v53.filter(4294967295); } catch (e) {}
try {
const t0 = 4294967295;
t0();
} catch (e) {}
new Uint8ClampedArray();
const o80 = {
    m() {
        const v62 = Math.log1p(2.220446049250313e-16);
        for (let i64 = 0; i64 < 10;) {
        }
        const v72 = new Uint8Array(Uint8Array, Uint8Array);
        v72[Math.atan2(-988.8649474800335, 10000)] = 10000;
        const o78 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o78, 16224, -6, v62);
    },
};
try { Int32Array(7, Float32Array, Int32Array); } catch (e) {}
const v83 = new Int32Array(256);
function F84(a86, a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    const v89 = this?.constructor;
    try { new v89(Uint16Array, a88, a88); } catch (e) {}
    a86 * a86;
    a88++;
    this.d = a86;
    try {
        this.g = Int32Array;
    } catch(e93) {
    }
}
try { new F84(F84, 256, 256); } catch (e) {}
const v95 = new F84(256, v83, 4294967295);
const v96 = v95?.g;
try { new v96(Uint16Array, v53, 7, v26, "findIndex"); } catch (e) {}
new F84(7, 7, 4294967295);
class C100 extends Proxy {
}
class C101 {
    #a;
    constructor(a103, a104, a105) {
        a104.#a;
    }
}
new F84(256, Float32Array, 256);
Math.asinh();
const v112 = new Float32Array(Float32Array, Float32Array, Float32Array);
async function f114(a115, a116, a117) {
    v112.h = v112;
    await 160;
    return f114;
}
f114(v112, v112, Float32Array);
Math.sin(3.862600614459211e+307);
