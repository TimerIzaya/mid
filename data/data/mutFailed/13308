function f2() {
    function f3(a4, a5) {
        function f7() {
            return -45095n;
        }
        const v9 = new BigUint64Array(1);
        v9["filter"](f7);
        return -45095n;
    }
    return f3;
}
function f12(a13) {
    const v15 = /a$\P{Decimal_Number}/gvdims;
    const v16 = v15[v15];
    const v17 = v15.source;
    try { v16(true, v17, v17, v17); } catch (e) {}
}
Object.defineProperty(Int32Array, Symbol.iterator, { writable: true, get: f2, set: f12 });
new Int32Array(1);
const v24 = new Uint16Array(Int32Array);
v24[1];
1398 - 1398;
const v29 = new Uint8ClampedArray(1398);
129 < 129;
const v33 = new Int32Array(129);
v33[47] = v33;
5 >>> 5;
new Uint8Array(v29);
new Uint16Array(10);
const v41 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
function f42() {
    Object.defineProperty(v24, "c", { get: f12, set: Symbol });
    const o46 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o46);
    return 129;
}
v41[Symbol.toPrimitive] = f42;
function f50(a51, a52) {
    const o53 = {
        __proto__: v41,
    };
    function f54(a55) {
        const v60 = Promise.reject(Promise);
        function F62(a64, a65) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v66 = new F62(512, 10000);
        const v67 = new F62();
        const v69 = new Uint32Array(v60, 36002, 5);
        [v67,v66,v69[0.29489550717955537]];
        return 0.29489550717955537;
    }
    o53.toString = f54;
    try { o53.pop(); } catch (e) {}
    return o53;
}
f50().group(f50);
