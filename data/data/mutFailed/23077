function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(this); } catch (e) {}
    Object.defineProperty(a5, a5 >> a5, { configurable: true, value: 30672 });
    for (let v9 = 0; v9 < 32; v9++) {
        v6["p" + v9] = v9;
    }
    try {
        this.c = a5;
    } catch(e12) {
    }
    try {
        this.a = a5;
    } catch(e13) {
    }
    try {
        this.f = a5;
    } catch(e14) {
    }
}
new F3(-36225);
const v16 = new F3(-36225);
v16.c = v16;
const v17 = new F3(30672);
[F3];
const v19 = [v17,-36225,-36225];
[v16,v19,v19];
try { ("stack").strike(); } catch (e) {}
const v24 = Symbol.toPrimitive;
const o35 = {
    [v24]() {
        this[1617067680] = v19;
        new Uint8Array(2828);
        new Float32Array(0);
        new Uint8Array(127);
        return -36225;
    },
};
try { ("4").trimLeft(); } catch (e) {}
9007199254740992 - 9007199254740992;
15 & 15;
const v46 = new Uint8ClampedArray(15);
try { v46.filter(v46); } catch (e) {}
new Int32Array();
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    function f54(a55) {
        for (let i = 0; i < 10; i++) {
            ["object"];
        }
    }
    Object.defineProperty(this, "c", { enumerable: true, set: f54 });
    this.c = -28191;
}
new F52();
const v60 = new Int32Array(257);
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = this?.constructor;
    try { new v65(a64, a64); } catch (e) {}
    -a63;
    try {
        this.c = a64;
    } catch(e68) {
    }
}
const v69 = new F61(15, 257);
new F61(257, 512);
const v71 = new F61(15, 512);
for (const v72 in v71) {
    const v73 = /[MrN]/gudi;
    const v74 = /(x)(x)(x)\2/gvdisy;
    v74.dotAll = v74;
    try {
    const t0 = 15;
    t0(v72, v73, v74, v74, v69);
    } catch (e) {}
    /YzF[\11]/gms;
    const v77 = /(ab)\1[\11](?:a*)+(J\bI)+/diy;
    v77.dotAll = v77;
}
v60[v60];
