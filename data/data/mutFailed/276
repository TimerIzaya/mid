new WeakSet();
[13103,1073741824,4294967296,-760323496,257,2,-1024];
[65537,9007199254740990];
[-565089232,3,-1941674300,1497249581,4096,10000,536870889,1269867163,-51686];
const v16 = new Float32Array();
const v18 = new Uint8Array(v16, Uint8Array, Uint8Array);
v16[-1e-15] = Uint8ClampedArray;
class C21 extends Float32Array {
    constructor(a23, a24, a25) {
        super(this);
    }
}
new C21(1, v18, Float32Array);
class C3 {
    f = 9007199254740992;
    static {
        %VerifyType(1.432566276914656);
        let v6;
        try { v6 = new C3(Math, this, this); } catch (e) {}
        this[v6];
        let {"PI":v8,"b":v9,...v10} = Math;
        v9 instanceof v9;
        super.c ||= v9;
        try { Math.round(9007199254740992); } catch (e) {}
        1569957580 !== 1569957580;
        Math.atan("12930");
        const v17 = !1569957580;
        const v19 = Math.max(+"12930");
        v19 / v19;
        const v21 = v17 + 1.432566276914656;
        v21 === v21;
        Math.asin(v17);
    }
    c;
}
const v24 = new C3();
v24.d = v24;
const v25 = new C3();
const v26 = new C3();
const v28 = new Set();
try { v28.add(v26); } catch (e) {}
const v30 = [61087,-9223372036854775808,1000,-3,869239838];
try { v30.sort(Set); } catch (e) {}
[-30055,-536870912,-53563,805974297,536870889,536870912,16439,-4294967296];
[-13,512,-65537,-13606,2,-24360];
class C34 {
    1412834065;
    10000;
    #valueOf(a36, a37, a38, a39) {
        try {
            a39[a38] = a39;
        } catch(e40) {
        }
        return a38;
    }
    [v25] = v26;
    [9007199254740992];
    #c = 9007199254740992;
    static g;
    static #g = v24;
}
new C34();
const v42 = new C34();
v42[1412834065];
const v44 = new C34();
v44[1412834065];
class C46 {
}
C46.d = C46;
const v47 = new C46();
const v48 = v47?.constructor;
try { new v48(); } catch (e) {}
function F52(a54, a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this.constructor;
    try { new v58(v47, F52, v47); } catch (e) {}
    -a54;
    try {
        this.a = a55;
    } catch(e61) {
    }
    try {
        this.multiline = a54;
    } catch(e62) {
    }
}
new F52();
new F52();
function F65(a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    const v70 = this.constructor;
    try { new v70(-789772631n, -1635739933n); } catch (e) {}
    a67--;
    this.b = a68;
    this.e = a68;
}
new F65();
new F65();
