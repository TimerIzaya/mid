64 + 64;
const v7 = [1333754588,-1,4157,-128];
try { v7.fill(-24101); } catch (e) {}
const v9 = [16,-14,-65535,-1073741824,282385145,-14605,-4096];
const v10 = [-128];
function f11(a12, a13, a14, a15) {
    try { a12.every(a15); } catch (e) {}
    ~a14;
    const o22 = {
        valueOf(a19, a20, a21) {
            let v18 = this;
            return v18 = a12;
        },
        __proto__: v7,
        "f": v9,
        "b": v10,
        "a": 8,
        [-24101]: v10,
        "e": v9,
        3512: a14,
        "g": 2147483648,
    };
    return o22;
}
const v24 = f11(v7, f11(v9, f11, 2147483648, v9), 1073741823, v10);
v24[3512] = v24;
const v25 = f11(v10, 64, 1073741823, v10);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    function f28() {
        function F29() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v31 = new F29();
        class C32 extends F29 {
            [v31];
        }
        return F29;
    }
    this[Symbol.toPrimitive] = f28;
    const v35 = this?.toLocaleString;
    try { new v35(); } catch (e) {}
}
const v37 = new F26();
const v38 = v37.length;
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this?.constructor;
    try { new v43(F26, v37); } catch (e) {}
}
const v45 = new F39();
591114.0785999324 === 591114.0785999324;
const v49 = [];
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    const v54 = this.toString(this, F51, F51, this);
    9223372036854775807 >> 9223372036854775807;
    Date[Symbol.toPrimitive] = Date;
    const v60 = Date?.constructor;
    try { new v60(Date); } catch (e) {}
    const v63 = Date.toString(F51, 9223372036854775807).replaceAll(v37, -37859n);
    function f65(a66) {
        class C67 {
        }
        new C67();
        return 5;
    }
    Uint32Array[Symbol.iterator] = f65;
    try { new Uint32Array(v25, -37859n, v54); } catch (e) {}
    const v72 = new Uint32Array(Uint32Array, Uint32Array, 4);
    const v75 = new Set(v49);
    v75[9] = Symbol;
    try { v75.has(8); } catch (e) {}
    const v77 = v75.add;
    const v78 = v75[9];
    try {
        v78.valueOf = v63;
    } catch(e79) {
    }
    try { new v77(v72); } catch (e) {}
    const v82 = v75["delete"](839612.5677247904);
    const v83 = v49.__proto__;
    try { v83.toString(); } catch (e) {}
    Date[Symbol.search];
    const v88 = v24.__proto__;
    try { v88.group(Set); } catch (e) {}
    const v90 = v82 || v82;
    v90 || v90;
    !(v90 || v90);
    const v94 = v90 && v90;
    v94 && v94;
    const o97 = {
    };
    o97.e = o97;
    o97.e = o97;
    o97.b = o97;
    o97.e = 19793;
    try { new Array(Symbol); } catch (e) {}
    try { new Array(9223372036854775807); } catch (e) {}
    let v102;
    try { v102 = ("getPrototypeOf").blink(); } catch (e) {}
    const v103 = v102[28];
    try { v103.toLocaleUpperCase(); } catch (e) {}
    v103.strike();
    const v106 = v102.strike(591114.0785999324);
    v106.length = v106;
    let v107;
    try { v107 = v106.replace(19793, v45); } catch (e) {}
    try { v107.valueOf(); } catch (e) {}
    v107[11] = v107;
    class C110 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C111 extends C110 {
        ["getPrototypeOf"] = C110;
    }
    try { new C111(); } catch (e) {}
    try { new C111(); } catch (e) {}
    let v114;
    try { v114 = new C111(); } catch (e) {}
    v114.getPrototypeOf;
    let v116;
    try { v116 = new C111(); } catch (e) {}
    const v117 = v116?.getPrototypeOf;
    try { new v117(); } catch (e) {}
    const v119 = new C111();
    v119.constructor = f11;
    const v120 = v119?.getPrototypeOf;
    try { new v120(); } catch (e) {}
    const v122 = v119.getPrototypeOf;
    try { v122(v114); } catch (e) {}
    let v124;
    try { v124 = new v122(); } catch (e) {}
    v124.getPrototypeOf;
    try { v124.propertyIsEnumerable(v107); } catch (e) {}
    const v127 = v124?.constructor;
    v127.a = v38;
    v127.length;
    let v129;
    try { v129 = new v127(v102, this, 4); } catch (e) {}
    v129.b = v129;
    try { v129.constructor(); } catch (e) {}
    const v131 = v119.constructor;
    try { v131.call(v7); } catch (e) {}
    let v133;
    try { v133 = new v131(F51, v94); } catch (e) {}
    const v134 = v133?.getPrototypeOf;
    v134.a = f11;
    try { new v134(); } catch (e) {}
    const v136 = v133?.getPrototypeOf;
    v136.a = v136;
    v136?.e;
    let v138;
    try { v138 = new v136(); } catch (e) {}
    try { v138.isPrototypeOf(v138); } catch (e) {}
    for (const v141 of Array(19793, v9)) {
    }
}
const v142 = new F51();
const v143 = v142?.__defineSetter__;
try { new v143(v7, v7); } catch (e) {}
const v145 = new F51();
v145.constructor;
const v147 = v145.constructor;
try { new v147(); } catch (e) {}
new v147();
