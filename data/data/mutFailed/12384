let v1 = 65537;
class C3 {
    #toString(a5) {
        new Uint8Array(121);
        new Uint16Array(7);
        new Int16Array(754);
        return -65535;
    }
    #e = v1;
    f;
}
const v15 = new C3();
function f16(a17, a18) {
    const v19 = delete a17?.a;
    function F20(a22, a23) {
        if (!new.target) { throw 'must be called with new'; }
        this.hasOwnProperty();
        const v25 = this.constructor;
        try { new v25(); } catch (e) {}
    }
    return v19;
}
Object.defineProperty(v15, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f16 });
const v29 = new C3();
const v30 = new C3();
function f31() {
    return f16;
}
function f32(a33) {
    Symbol(a33);
}
Object.defineProperty(v30, "toString", { writable: true, configurable: true, enumerable: true, get: f31, set: f32 });
class C35 extends C3 {
    [v30];
    get b() {
        const v41 = v1++;
        Math.log10(-1.8409337588574094e+307);
        v41 ^ -1.8409337588574094e+307;
        Math.ceil(-65535);
        return v30;
    }
    static [v29] = v1;
    static [v15];
}
const v45 = new C35();
const v46 = new C35();
const v47 = new C35();
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v46;
    } catch(e52) {
    }
    try {
        this.d = a50;
    } catch(e53) {
    }
}
new F48(F48, v47);
const v55 = new F48(v30, v45);
new F48(v55, v47);
const v59 = new Float64Array(Float64Array, Float64Array);
class C60 extends Int16Array {
}
const v61 = new C60();
const o62 = {
    __proto__: v61,
};
try { v59.every(o62); } catch (e) {}
