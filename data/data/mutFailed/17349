/P?/guimsy;
const v1 = /6q[a-zA-Z0-9]/ui;
/[l[gab\b\d\bcd[]]]/uims;
const v4 = [];
const v6 = new Float32Array();
v4["indexOf"](v6, Uint8ClampedArray);
function f14(a15, a16) {
    return a15;
}
const v18 = Array?.constructor;
try { v18(); } catch (e) {}
class C24 {
    static valueOf(a26, a27) {
        /ab\b\d\bcd/i;
        /a\ScxA?/gus;
        return /E\xe2\x81\xa3(?:a?)?/v;
    }
    static #a = 30858;
    static set b(a32) {
        try {
            this.#a;
        } catch(e34) {
        }
        super[a32];
        const o36 = {
        };
        new Proxy(v1, o36);
    }
}
new C24();
new C24();
new C24();
function F42() {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e44) {
    function f45(a46) {
        return Uint32Array;
    }
}
class C48 extends F42 {
}
const v49 = new C48();
class C50 extends F42 {
}
const v51 = new C50();
const v53 = new BigUint64Array();
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this.constructor;
    const v60 = /[a-zA-Z0-9]/gvisy;
    const v61 = /abc?/gvmy;
    v61[-2] ^= v60;
    v61.exec();
    const v64 = new Int16Array();
    const v65 = v64.lastIndexOf(F54, a56, C48, v51);
    v65 ^ v65;
    try { new v58(this, a56); } catch (e) {}
    new Uint32Array(127);
    for (let v71 = 0; v71 < 5; v71++) {
    }
}
const v72 = new F54();
const t64 = v72.constructor;
new t64(v49, v53);
