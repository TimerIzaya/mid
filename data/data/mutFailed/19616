const v1 = new Set();
new Array(3222);
const v8 = [4096,15,8,-23815,533790146,-1242015161,-1922,-37218,-2147483648,4];
[9007199254740990,-54888,-2147483648];
[1073741824,-2147483647,2147483647];
new Int8Array(2);
new Uint8ClampedArray(3490);
const v22 = new Float64Array(2415);
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(a35, a36, a35); } catch (e) {}
    a34 - a34;
    a36 * a36;
    try {
        this.f = a34;
    } catch(e41) {
    }
    try {
        this.c = -2n;
    } catch(e42) {
    }
}
const v43 = new v22(1000000.0, 7.559689826868887, 1000000.0);
const v44 = new F32(7.559689826868887, 7.559689826868887, -113.9176065145133);
new F32(-113.9176065145133, 7.559689826868887, -113.9176065145133);
const v47 = new Date();
try {
    v47.toDateString();
} catch(e49) {
}
class C50 extends Date {
}
const v51 = new C50();
v51.toGMTString();
[155533.8602852358,2.0];
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this?.__lookupGetter__;
    try { new v57(); } catch (e) {}
    19793 ^ 19793;
    -2.0 - 9223372036854775807n;
    function f65() {
        return -2.220446049250313e-16;
    }
    f65.length = f65;
    4 >> 4;
    const v69 = new Int8Array(4);
    try { v69.reduce(4); } catch (e) {}
    const v72 = 8 - 8;
    for (const v74 in "1024") {
    }
    class C75 {
    }
    let v76;
    try { v76 = new C75(); } catch (e) {}
    function f77() {
        C75[v72];
        const v79 = [1073741824,1073741823,1376142744,1073741825];
        function f80(a81, a82, a83, a84) {
            try { v79["find"](); } catch (e) {}
            return v79;
        }
        for (let v87 = 0; v87 < 10; v87++) {
            f80(v87, f80, v79, v79);
        }
        return v44;
    }
    v76.toString = f77;
    try { v76.toString(); } catch (e) {}
    ("1073741823").trimRight()[8];
    const v94 = [];
    function f95(a96, a97) {
        class C98 {
        }
        5.0 / -2.220446049250313e-16;
        new Uint8Array(257);
        class C108 extends Uint16Array {
            constructor(a110, a111, a112) {
                super();
            }
        }
        Math.exp();
        Math.log(-23525);
        function f116() {
            return f116;
        }
    }
    f95.length;
    v94.constructor = f95;
    new Float32Array(8);
    let v121 = 512;
    const v123 = v121--;
    Math.pow(v1, v121);
    Math.expm1(v123);
    812551508 * v1;
    Math.acosh(v1);
    Math.log2(v121);
    v1 >> 812551508;
    const v130 = /abc?/gvmy;
    v130.b = v130;
    try { v130.toString(); } catch (e) {}
    v130.exec("Q8F");
    const v133 = /(x)(x)(x)\1/uis;
    v133.toString = f65;
    try { v133.compile(F55, 7.559689826868887); } catch (e) {}
    function f135(a136, a137, a138, a139) {
        const o146 = {
            2: a138,
            __proto__: a139,
            [v133](a141, a142, a143, a144) {
                super.test();
            },
        };
        o146[2] = o146;
        const v147 = o146[2];
        v147.caller = v147;
        return a136;
    }
    f135();
    f135();
    215 / 215;
    function F152() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new F152(); } catch (e) {}
    function f155() {
        for (let v156 = 0; v156 < 5; v156++) {
            function f157() {
                return f157;
            }
            f157.d = v156;
            f157.d = f157;
        }
        return f155;
    }
    let v159 = 2;
    v159--;
    v159 >>> v159;
    Math.cos(v159);
    class C163 {
        get a() {
        }
    }
    function f165(a166, a167, a168) {
    }
    class C169 {
    }
    function F170(a172, a173, a174) {
        if (!new.target) { throw 'must be called with new'; }
    }
    F170.arguments = F170;
    for (const v177 of Array(19793)) {
    }
}
F55[Symbol.toPrimitive] = Date;
let v180 = new F55();
v1.has(10000n, v1, v44, ...v8, 2415, 2);
127n >= (10000 instanceof C50);
v180 %= v43;
try {
    Date();
} catch(e185) {
}
new F55();
