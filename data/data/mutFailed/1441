function f0() {
    const o4 = {
        9: "2LrMO",
        "b": 65535,
        ["2LrMO"]: "2LrMO",
        5: 65535,
        [-2]: -2088263850,
        "e": "2LrMO",
        __proto__: "2LrMO",
        "f": "2LrMO",
        "g": -2088263850,
        [-2088263850]: 65535,
        ..."2LrMO",
        "c": 65535,
        "a": 65535,
    };
    return o4;
}
const v5 = f0();
const v6 = f0();
const v7 = f0();
function F8(a10) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    try {
        this.d = a10;
    } catch(e11) {
    }
    try {
        this.c = a10;
    } catch(e12) {
    }
    try {
        this.a = a10;
    } catch(e13) {
    }
}
const v14 = new F8(v6);
new F8(v7);
new F8(v5);
const v18 = new Date();
const v19 = [v7,v18,v18,Date];
[v6,Date,v7,v6];
[v19,v14,v19];
class C25 {
    #c = "toUpperCase";
    get a() {
        const v27 = this << "toUpperCase";
        const v28 = v27 ^ v27;
        let v29;
        try { v29 = v28(v28, this, v28, v28, v27, this); } catch (e) {}
        v29[v28] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
const v33 = new C25();
const v34 = new C25();
const v35 = v34?.toLocaleString;
try { new v35(); } catch (e) {}
const v37 = new C25();
[v33,"toUpperCase",C25];
[C25];
const v40 = [v33];
v40[0] = v40;
let v41 = -4n;
v41--;
const v44 = 35530n & 35530n;
let v48;
try { v48 = new Float64Array(35530n, v37, v37); } catch (e) {}
const v49 = new Float64Array();
try { v49.entries(); } catch (e) {}
const v53 = new v48();
const v56 = v53[44610];
let v57;
try { v57 = v56(); } catch (e) {}
v49.toString = v57;
[3,4294967295,-49424,9007199254740991,-4,5851,-10,4096];
function f60(a61, a62) {
    a62.name;
    const v65 = Array?.of;
    try { new v65(); } catch (e) {}
    Symbol.toPrimitive;
    const v70 = Array();
    function f71() {
        return 3;
    }
    function f72(a73) {
        a73--;
        const t88 = "async";
        t88[0] = "async";
        const o78 = {
            "execution": "async",
        };
        gc();
    }
    Object.defineProperty(v70, 0, { configurable: true, enumerable: true, get: f71, set: f72 });
    v70.unshift(3, a61, v44);
}
f60.name;
new Promise(f60);
