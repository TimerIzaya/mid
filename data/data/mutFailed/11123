const v0 = /(?=)/udy;
const v1 = /Dva+/gudi;
const v2 = /\cA/gimy;
class C3 {
    constructor(a5, a6) {
        const v7 = this?.constructor;
        try { new v7(v2, this); } catch (e) {}
        a6.b = a6;
        v2 & v2;
        try {
            v2.length = 4238653452;
        } catch(e11) {
        }
    }
    static valueOf(a13) {
        a13 >> this;
        const o17 = {
            "maxByteLength": 3662,
        };
        const v19 = new ArrayBuffer(1037, o17);
        new Uint16Array(v19);
        return a13;
    }
}
const v22 = new C3(v1, v1);
const v23 = new C3(v1, v0);
v23.length = v23;
class C24 {
}
const v25 = new C24();
const v26 = v25?.constructor;
try { new v26(); } catch (e) {}
const v28 = [C24,C24,C24];
const v31 = -Date.parse(v28);
class C32 {
    static {
        this.name = this;
        for (let v34 = 0; v34 < 25; v34++) {
            v34 * v34;
            function f36(a37, a38, a39, a40) {
                -a39;
                try { a37.call(a39, v25, a40, a38, this); } catch (e) {}
                const v43 = a38--;
                Number.name;
                Number.isNaN(v43);
                let v48;
                try { v48 = Math.round(this); } catch (e) {}
                -v48;
                Math.tan();
                const v51 = new Date();
                const v52 = v51.setDate();
                v52 * v52;
                const v54 = a38 & a38;
                v54 & v54;
                let v56;
                try { v56 = a37(v54); } catch (e) {}
                v56?.constructor;
                arguments[2];
                const v60 = arguments[2];
                try { v60.findLast(); } catch (e) {}
                return v25;
            }
            try { f36.apply(v31, f36); } catch (e) {}
            f36(v31, v25, v34);
            f36(v34, v31, v28);
            for (let v65 = 0; v65 < 5; v65++) {
                v65--;
                const v68 = f36(this, v65, v65)?.constructor;
                try { new v68(); } catch (e) {}
            }
        }
    }
}
C32.g = C32;
const v70 = new C3(v22, v0);
v70.length = v70;
-Infinity;
-1.7976931348623157e+308 ^ -1.7976931348623157e+308;
function F75(a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    const v80 = this?.constructor;
    try { new v80(C3, Date, v28); } catch (e) {}
    a77 !== a77;
    try {
        this.f = v22;
    } catch(e83) {
    }
    try {
        this.h = a79;
    } catch(e84) {
    }
    try {
        this.g = a79;
    } catch(e85) {
    }
}
new F75(-1.7976931348623157e+308, v1, v0);
const v87 = new F75(-1.7976931348623157e+308, v70, v22);
const v88 = new F75(v87, v0, v1);
v88.h;
function F90() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v93 = -(-7);
        v93 ** v93;
    } catch(e95) {
    }
}
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    const v100 = this.constructor;
    const v101 = v100?.apply;
    try { new v101(Date, this); } catch (e) {}
    try { new v100(this, a98); } catch (e) {}
    new F90();
}
new F96();
