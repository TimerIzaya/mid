function f0() {
    const o8 = {
        "b": -193139923,
        "h": 416.4964681095296,
        ...-1e-15,
        "d": -193139923,
        set a(a5) {
            let o6 = {
                __proto__: this,
            };
            o6 ||= this;
            a5 = 416.4964681095296;
            try {
                o6.g = a5;
            } catch(e7) {
            }
        },
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
const v11 = f0();
function f12() {
    return v9;
}
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const t29 = "return";
        t29.e = a19;
    } catch(e22) {
    }
    try {
        this.f = a18;
    } catch(e23) {
    }
    try {
        this.g = "289294640";
    } catch(e24) {
    }
}
const t42 = "matchAll";
const v25 = new t42(v11, "matchAll", v10, "matchAll");
new F16(v25, "matchAll", v9, "return");
new F16(v10, "matchAll", v11, "289294640");
[417073317,3,-449802236,-2147483649,14,1016599938,-5734];
[1024,1277748627,-4294967295,268435441,-2,-65536];
[4294967297,4,-4,715628560,1361504950,536870912,-43380,128,27381];
const v31 = [];
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f0;
    const v42 = this.constructor;
    try { new v42(v11, v31); } catch (e) {}
    v25[2];
}
new F36("ceil", "pop", "ceil", "isConcatSpreadable");
new F36("isConcatSpreadable", "ceil");
