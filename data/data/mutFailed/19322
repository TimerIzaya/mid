const v2 = new Uint32Array(22);
new Int16Array(2467);
const v8 = new Float32Array(5);
const v10 = [null,Float32Array];
const v11 = [v10,v10,22];
const v12 = [v8,v11,v11,v2,5];
function f13(a14, a15) {
    const o26 = {
        ...Uint32Array,
        "g": v2,
        toString(a17, a18) {
            let [v19] = a18;
            a14[v2] >>>= 2467;
            a18 && NaN;
            --v19;
            Math.sin(536870887);
            return a14;
        },
        "f": a14,
    };
    return o26;
}
f13(v12, v11);
f13(v12, v11);
f13(v12, v10);
class C31 {
    static {
        for (let v33 = 0; v33 < 25; v33++) {
            function f34() {
            }
            const v35 = [601759695];
            const v36 = [1073741824,1073741823,1376142744,1073741825];
            function f38(a39, a40, a41, a42) {
                for (let i49 = (() => {
                        const v46 = new BigInt64Array(980);
                        v46.includes(980);
                        return 0;
                    })();
                    i49 < 2;
                    i49++) {
                    try {
                        arguments.g = i49;
                    } catch(e55) {
                    }
                }
                function f56() {
                    return a39;
                }
                const v57 = f34();
                const v59 = new Int8Array();
                const v62 = new Uint32Array(v33);
                [v62];
                const v66 = BigUint64Array * 536870887;
                v66 ** v66;
                function f68(a69, a70) {
                    return v57;
                }
                f68();
                const v72 = v59.buffer;
                Object.defineProperty(v72, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v72.slice(2147483648);
                %OptimizeFunctionOnNextCall(f56);
                let v77;
                try { v77 = v36["find"](..."find", a42, ...v35, ...v36, ...522675525n); } catch (e) {}
                Symbol("find");
                const v81 = new Uint8ClampedArray();
                const o82 = {
                    ...v81,
                };
                v77 <= a41;
                return arguments;
            }
            for (let v84 = 0; v84 < 5; v84++) {
                v84();
            }
        }
    }
}
