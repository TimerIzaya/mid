[-15640,8,-1478080756,268435441];
[-4294967296,257,-10,512,65536,10,-4096];
[256,4294967297,-19468,-2,-1024,1,-1459545378];
const v7 = [-5.745613398295162,-4.622990281334681e+307,7.433339102565964e+307,6.750143066851418];
try { v7.indexOf(v7); } catch (e) {}
[-1.3100134770255588e+308,-647019.9607278821];
const v10 = [1000000.0,0.9470344969327387,-2.220446049250313e-16,0.24803299661477773,2.9645319213263954e+307,0.0,0.01315523495915727];
try { ("function").fill(v10); } catch (e) {}
function F12() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
}
const v15 = new F12();
const v16 = v15?.constructor;
try { new v16(); } catch (e) {}
function f18(a19, a20) {
    const o27 = {
        [a20](a22, a23, a24) {
        },
        set h(a26) {
        },
        "h": v15,
    };
    return F12;
}
const v29 = [null,null,null];
class C32 extends Uint16Array {
}
class C33 extends C32 {
    constructor(a35, a36, a37, a38) {
        super();
        function f39(a40, a41, a42) {
            return a35;
        }
        const v45 = new BigUint64Array();
        const v47 = [2082,"function",a38,C32,v45];
        const o48 = {
            "arguments": v47,
            "type": "function",
        };
        new Worker(f39, o48);
    }
}
[v29];
const v51 = [-268435456,1000];
let v53 = 30918;
const v54 = v53--;
Math.exp(v51);
Math.ceil(v54);
const v57 = [null];
new Set();
/(?:ab|cde)H[^123]*/vsy;
/a|bGxyz{93}a{0}\p{Script=Greek}/udis;
/(?:a+){0,0}/vdimy;
const t51 = "f";
const v67 = new t51();
Math.log1p(268435456);
function f72(a73, a74) {
    return -4096;
}
const o75 = {
    __proto__: v67,
};
const v84 = [];
let v85;
try { v85 = v84.flat(4096); } catch (e) {}
v85[1];
function F87(a89) {
    if (!new.target) { throw 'must be called with new'; }
}
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = Number.isFinite(Number);
    this.constructor;
    ([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(268435456, -27205);
    let v101 = 0;
    do {
        typeof v101 === "string";
        v101++;
    } while (v101 < 7, Math)
    try { new v96(); } catch (e) {}
}
const v109 = new Int16Array(2183);
new Uint8Array(Uint8Array);
const v115 = new Int16Array(8);
async function f117(a118, a119, a120) {
    delete v115[-1000000000.0];
    function F123(a125, a126) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = "b";
        this.d = a126;
    }
    const v127 = new F123();
    const v128 = new F123(v127, v127);
    const o129 = {
        ...v128,
        __proto__: v127,
    };
    for (const v130 in o129) {
    }
    let [v131,v132,...v133] = v109;
    v109[5];
    const o135 = {
    };
    for (let v137 = 0; v137 < 500; v137++) {
        class C139 {
        }
        new Int32Array(v137, v137, 257);
        new Map();
    }
    const v147 = new Uint16Array(5);
    function f148(a149, a150) {
        const o154 = {
            set g(a152) {
            },
            39: v147,
        };
    }
    f148("message", 5);
    await "message";
    return Uint8Array;
}
const o157 = {
};
const v159 = new Proxy(v57, o157);
try {
    with (v159) {
        o157[b];
    }
} catch(e162) {
}
f117(255, 8, 948737.12760097);
+-36313 || (135.68951961804942 / (-36313 + 135.68951961804942));
f18();
f18();
