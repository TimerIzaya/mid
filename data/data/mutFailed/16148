/R/gvdimy;
/am[x]/gim;
const v2 = /I\p{Script=Greek}/gudis;
const t3 = "420259877";
t3[0] = "420259877";
try { ("byteOffset").anchor("420259877"); } catch (e) {}
class C7 {
    static #n(a9, a10, a11, a12) {
        new Uint16Array(3572);
        new Int16Array(4050);
        new Int8Array(0);
        return a10;
    }
}
try { C7.bind(C7); } catch (e) {}
const v23 = new C7();
function f24(a25) {
    const v27 = new WeakSet();
    const o28 = {
        "e": v27,
        "b": v27,
    };
    return "toStringTag";
}
v23.constructor = f24;
const v29 = v23?.constructor;
try { new v29(); } catch (e) {}
const v31 = new C7();
function f32() {
    ("toStringTag")[v23.constructor];
    return v2;
}
v31.constructor = f32;
const v35 = v31?.constructor;
try { new v35(); } catch (e) {}
const v37 = new C7();
const v38 = v37?.propertyIsEnumerable;
try { new v38(v2); } catch (e) {}
const v43 = /X/uimsy;
Object.defineProperty(v43, Symbol.toPrimitive, { configurable: true, value: f32 });
-(-1000000000.0);
class C48 {
    constructor(a50, a51) {
        try { this.constructor(v23, a51); } catch (e) {}
        const o53 = {
            __proto__: a51,
        };
        o53[a51] = o53;
    }
}
C48.e = v23;
const v54 = new C48(-1000000000.0, -1000000000.0);
v54[Symbol.toPrimitive] = f24;
const v57 = v54?.constructor;
v57.b = v2;
try { new v57("toStringTag", v43); } catch (e) {}
const v59 = v54.constructor;
v59.b = v59;
const v60 = new v59();
const v61 = v60?.constructor;
try { new v61(v2, v43); } catch (e) {}
const v63 = new C48(-1000000000.0, v54);
v63.constructor = Symbol;
const v64 = v63.constructor;
function f65() {
    return "420259877";
}
function f66(a67) {
    try { v23.forEach(); } catch (e) {}
}
Object.defineProperty(v64, "e", { writable: true, enumerable: true, get: f65, set: f66 });
try { new v64("420259877", v64); } catch (e) {}
new v64(v43, v63);
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    a74.e = "toStringTag";
    a74.e = a74;
}
const v75 = new F71(v54, v64);
v60.length = v75;
function F76(a78) {
    if (!new.target) { throw 'must be called with new'; }
    function f79() {
        return Symbol;
    }
    Object.defineProperty(this, "constructor", { writable: true, enumerable: true, get: f79 });
    const v80 = this.constructor;
    v80.g = Symbol;
    v80.g = v80;
    try { new v80(); } catch (e) {}
    const v83 = new Int8Array();
    v83.length = 415075273;
}
new F76();
