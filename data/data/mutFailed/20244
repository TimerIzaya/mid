new Uint8Array(Uint8Array);
Int8Array.length;
new Int8Array(4);
let v7 = 6;
new Uint8Array(v7);
const v11 = /D*/gudy.ignoreCase;
const v12 = /2a|b/uds;
/abc+1uCJ+/gvdims;
const v15 = new Set();
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a18;
    } catch(e20) {
        for (let [v21,v22] of a18) {
            try {
            } catch(e23) {
            }
        }
        new Int32Array(3743);
        new Uint8ClampedArray(3776);
        new BigInt64Array(10);
        new Uint16Array(127);
        new Uint8Array(255);
        new BigInt64Array(179);
        [];
        const v45 = new Int8Array(16);
        v45.toSorted();
        function f47() {
        }
        class C48 {
            o(a50, a51) {
                for (const v53 of "bigint") {
                }
                f47();
            }
        }
        [f47,[f47],C48];
        const v60 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
        const v63 = new BigInt64Array(205);
        const v64 = v63[205];
        try {
            v64.toString = v64;
        } catch(e65) {
        }
        const v66 = [-1803975943,57715,-9007199254740992];
        [2147483647,13,536870912,-13,-1024,536870887];
        const v71 = new Uint8ClampedArray(1000);
        +(v71 ^ 3) + -3.0;
        const v79 = ["undefined",8.806760127177498,v66,345168.6487633812,"undefined"];
        [1000.0,8.806760127177498,v79,v60,v66];
        [v79];
        const v85 = (a86, a87, a88) => {
            try { ("function")["toUpperCase"](); } catch (e) {}
            v11 ^ a86;
            new BigUint64Array(257);
            new Uint8Array(129);
            new Int32Array(9);
            class C102 {
                9 = Int32Array;
            }
            return a88;
        };
        Symbol.unscopables;
        class C105 {
        }
        const o108 = {
        };
        const v110 = new ArrayBuffer(2, o108);
        const v112 = new Int8Array(v110);
        [-4096,13,16,6] + v112;
        Symbol.iterator;
        const v118 = [];
        function f119() {
            const o123 = {
                toString() {
                    super[this];
                },
                ...v118,
                n() {
                    return this;
                },
            };
        }
        f119();
        new Uint16Array(4294967295, v12);
        const o132 = {
            m() {
                const o131 = {
                };
            },
        };
        const v134 = new Int32Array();
        function F135(a137, a138, a139) {
            if (!new.target) { throw 'must be called with new'; }
            const v140 = this?.constructor;
            try { new v140(Uint16Array, a139, a139); } catch (e) {}
            a137 * a137;
            a139++;
            this.d = a137;
            this.g = Int32Array;
        }
        new F135(256, v134, 4294967295);
        class C146 {
            constructor(a148, a149, a150) {
            }
        }
        Math.asinh();
        new Float32Array(Float32Array, Float32Array);
    }
    try {
    } catch(e155) {
    }
    const v156 = v15[this];
    try {
        v7 >>>= 4;
        new F16(v156);
    } catch(e164) {
    }
}
new F16();
const v166 = [65537,268435441,63298,-5,1235122603];
const v167 = [128,215394418];
const v168 = Uint8Array.entries();
function F169(a171, a172, a173, a174) {
    if (!new.target) { throw 'must be called with new'; }
}
new F16();
new F169();
const v184 = ("string").trimStart();
v168[3];
let v188;
try { v188 = v184(); } catch (e) {}
class C190 extends v15.constructor {
    static 1;
    #g;
}
new C190();
v166[v188] = v167;
~0;
(0).__proto__;
-35417 - -35417;
