let v0 = [-2.220446049250313e-16,-0.0,0.6318643630548395,-2.2250738585072014e-308,1.2756890595799657,963726.0144357455,2.0];
const v1 = [-832.7716104315007,1.0,2.0783488091442811e+307,0.5314709435877607,2.220446049250313e-16,-1.0,0.6362321956343128,-3.0,-5.436567554376753e+307];
const v2 = [-1.7622316576513783e+308,-1000000000000.0];
new Int8Array();
const v6 = new Float32Array(Float32Array, Float32Array, Float32Array);
function f7() {
    v6.c = Float32Array;
    for (let v8 = 0; v8 < 5; v8++) {
        const o11 = {
        };
        o11[Uint32Array] -= -2147483649;
        class C12 {
        }
        new BigUint64Array(v8, v8, v8);
    }
    return f7;
}
%PrepareFunctionForOptimization(f7);
function f15() {
    return v0;
}
class C19 {
    g = v0;
    #h;
    o(a21, a22, a23) {
        try {
            async function f25(a26, a27) {
                return f25;
            }
            const v28 = f25.constructor;
            try { v28(Uint8Array); } catch (e) {}
            v0.#h;
        } catch(e31) {
        }
        return v0;
    }
    constructor(a33, a34) {
    }
    static 6;
    [v2];
    #a = v0;
}
const v36 = new C19();
const v37 = new C19();
new v36();
let v39 = 0;
do {
    for (let v40 = 0; v40 < 32; v40++) {
        v36["p" + v40] = v40;
    }
    v39++;
} while (v39 < 10)
v0 = v1;
delete v37?.g;
Math.tan();
