function f0() {
    const o10 = {
        "f": -209.60285720090053,
        [-209.60285720090053](a5) {
            this.f ^= a5;
            function f6(a7) {
                return a7;
            }
            class C8 extends f6 {
                #e;
            }
            super[a5];
            return this;
        },
        "g": -209.60285720090053,
        1362724500: -51111,
        "d": -51111,
        "e": "trimLeft",
    };
    o10[1362724500];
    return o10;
}
let v12 = f0();
const v13 = f0();
const v14 = f0();
const v17 = new Int32Array(8);
new Uint32Array(2562);
const v23 = new Int16Array(10);
function f24() {
    v14[231];
    function f26(a27) {
        return f26;
    }
    return f0;
}
v23[Symbol.toPrimitive] = f24;
v23[8] = v23;
-8 >> -8;
try {
    v17.length = 2;
} catch(e35) {
}
const v37 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
try { v37.toLocaleString(); } catch (e) {}
const v39 = [1000000000.0,4.0,5.0,-6.555298893133851e+307];
v39[1] = v39;
v39[11] = v17;
for (let v40 = 0; v40 < 5; v40++) {
    const v41 = v37.values();
    const v42 = v41?.__lookupGetter__;
    try { new v42(v41); } catch (e) {}
    const v44 = v39.unshift(-463330.04816285486, v41);
    v44 / v44;
}
v17[3] = 9007199254740991;
v12 = v13;
v17[-1] = Uint32Array;
let [] = v39;
v23.byteOffset;
