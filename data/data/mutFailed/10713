const v0 = [2.2250738585072014e-308,7.197673966898019,0.0,-1000000000.0];
const v1 = [-1000000000000.0,839147.4310416477,-4.627530135001607,-1.7593040080045148e+308,7.6289912357811005,2.2250738585072014e-308,1.4708959922391636e+308,-1000.0,NaN];
const v2 = [Infinity,-1.0,-84.2936261041109];
let v4 = 3;
v4++;
let v6 = -1073741824;
({"length":v6,} = v0);
const v7 = v2 << v4;
v7 * v7;
v0[Symbol.isConcatSpreadable] = v1;
-9223372036854775807 !== -9223372036854775807;
let v13 = 4294967296;
v13--;
function f16() {
    return v6;
}
let v18;
try { v18 = ("object").localeCompare(v13); } catch (e) {}
v18 >>> v18;
let v20 = "7";
try { v20.fontsize(v2); } catch (e) {}
function f23(a24, a25) {
    function f27(a28) {
    }
    this.onmessage = f27;
    for (let v32 = 0; v32 < 100; v32++) {
        Symbol(a25);
    }
}
try { Worker(); } catch (e) {}
const t30 = "function";
t30[3] = "function";
const v37 = [v0,v20];
v37[1];
const o39 = {
    "arguments": v37,
    "type": "function",
};
o39.arguments = o39;
o39.g = o39;
new Worker(f23, o39);
let v41 = 2147483647;
v41--;
const o43 = {
    "maxByteLength": v41,
};
o43.maxByteLength;
~9;
const v47 = new SharedArrayBuffer(9, o43);
new Int8Array(v47);
try { ("dfth").toWellFormed(); } catch (e) {}
("dfth")[1];
Date.length = Date;
v20 = "dfth";
new f16();
let v57 = (-1246832858) ** -1246832858;
v57 * v57;
v57--;
const v60 = Math.clz32(v47);
v60 << v60;
const v62 = Math.abs(1272601327);
v62 & v62;
-(-1246832858 - v57);
Math.expm1(v0);
v0 >> (-1246832858 / v47);
try { ("undefined").replaceAll(-9223372036854775807, "undefined"); } catch (e) {}
new Date(..."undefined");
