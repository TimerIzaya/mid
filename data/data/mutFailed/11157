function f2() {
    function f3(a4) {
        return Uint8ClampedArray;
    }
    Reflect.construct(f3, [Uint8ClampedArray], Uint8ClampedArray);
    return Uint8ClampedArray;
}
class C10 {
    ["function"] = "function";
    [9.515948743457608e+307];
    1073741824;
    static e;
    static 8;
    #h = 9.515948743457608e+307;
    static set b(a12) {
        try {
            a12.#h >>>= this;
        } catch(e13) {
        }
        function F14(a16, a17, a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            const v20 = a18[1];
            try {
                with (a16) {
                    F14(v20, a19);
                }
            } catch(e22) {
            }
        }
        %VerifyType(a12);
    }
}
for (let v23 = 0; v23 < 5; v23++) {
    new Date(v23, 1000.0);
}
const v27 = new C10();
const v28 = new C10();
new C10();
[149417396,"function"];
[C10,C10];
[v27,9.515948743457608e+307,v28];
(3.0).toExponential(64);
const o40 = {
    m(a39) {
        return this;
    },
    __proto__: 946.0676210033328,
};
new BigUint64Array();
class C48 {
    static 7;
}
const v50 = new WeakMap();
const o75 = {
    n(a52, a53) {
        class C62 extends Int32Array {
        }
        function F68() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C71 {
            static get b() {
            }
        }
        return v27;
    },
    get e() {
        v50.get();
    },
};
class C76 {
}
class C77 {
    static {
    }
}
const o84 = {
    o(a80) {
        const o82 = {
        };
        gc(o82);
    },
};
o84["o"]();
const v89 = new BigInt64Array();
v89["indexOf"]();
function F92(a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = this.constructor;
    try { new v96(v96); } catch (e) {}
}
new WeakSet();
