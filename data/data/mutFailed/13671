const v2 = new Int32Array(0);
const v5 = new Uint8Array(2247);
let v8;
try { v8 = new BigUint64Array(v5, BigUint64Array, Int32Array); } catch (e) {}
new BigUint64Array(2);
[v8,v2,Int32Array,v5];
const v11 = [BigUint64Array];
const v12 = [0,v8,v11,Int32Array,BigUint64Array];
function f13(a14) {
    return a14;
}
const v17 = new BigUint64Array();
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    function f22() {
        try { v17.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
        return this;
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: v12 });
}
try { ("function").trimStart(); } catch (e) {}
new f13();
function f31(a32, a33) {
    return Worker;
}
let v34;
try { v34 = BigUint64Array(v11, Uint8Array); } catch (e) {}
class C35 {
    constructor(a37, a38) {
        const o52 = {
            84: arguments,
        };
    }
}
const o57 = {
    "type": "function",
};
new v34(C35, o57);
