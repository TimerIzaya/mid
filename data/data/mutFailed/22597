const v1 = new Map();
class C2 {
    15;
    b;
    constructor(a4) {
        this instanceof a4;
        let v8 = 10;
        for (let i = 0; i < 10; i++) {
            v8--;
            Reflect.construct(Array, [v8], Uint8ClampedArray);
        }
        super.b >>= a4;
        -Infinity;
        const v16 = v1 >> Map;
        +Map;
        Math.sqrt(-30026);
        +-30026;
        const v21 = new BigUint64Array();
        v21[3408] = this;
        new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
        const v25 = !v16;
        Math.sinh(Map);
        -v25;
    }
}
class C28 {
}
async function f29(a30, a31, a32, a33) {
    (await C28).call();
    return f29;
}
f29.constructor;
const v37 = new C2(C2);
new C2(v37);
new C2(C2);
class C42 {
}
const v43 = new C42();
const v45 = new Uint32Array(C42);
const v47 = [601759695];
const v48 = [1073741824,1073741823,1376142744,1073741825];
function f50(a51, a52, a53, a54) {
    function f55() {
        const t43 = "Vre";
        t43[1] = "Vre";
        let v58;
        try { v58 = Math.expm1(Math); } catch (e) {}
        Number.isNaN(v58);
        Math.expm1();
        const v62 = Math.tanh();
        const v63 = Math.hypot();
        Float64Array.BYTES_PER_ELEMENT = Float64Array;
        const v66 = new Int8Array(Int8Array);
        v66.buffer;
        try {
            v48.findLast();
        } catch(e69) {
            const t57 = e69?.constructor;
            t57();
        }
        const o85 = {
            [522675525n](a73, a74) {
            },
            "c": v47,
            1073741824: v45,
            __proto__: v45,
            9: v43,
            [2n](a76, a77, a78, a79) {
            },
            valueOf(a81, a82, a83, a84) {
                super.c **= v63;
                return f55;
            },
            4: "Vre",
        };
        return v62;
    }
    f55();
    eval();
    %OptimizeFunctionOnNextCall(f55);
    return 522675525n;
}
for (let v89 = 0; v89 < 5; v89++) {
    f50(Uint32Array, 2n, v89, v47);
}
%PrepareFunctionForOptimization("object");
const v93 = v45?.constructor;
try { new v93(v45); } catch (e) {}
("p").strike("p", "p", "p", "p");
new Uint8ClampedArray(10);
class C102 {
}
const v103 = C102.name;
v103 == v103;
function F105(a107, a108) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(3352);
new BigUint64Array(15);
("string").normalize("NFKD");
