const v5 = new Uint8Array(2707, 2707, 128, 128, Uint8Array, Uint8Array);
try { v5.findLastIndex(v5, v5); } catch (e) {}
const v7 = new BigUint64Array(1535379080);
new Uint32Array(3681);
const v12 = 7 >> 7;
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v14 = new Uint8Array(7);
const v15 = v14?.constructor;
v15.length = v15;
let v16;
try { v16 = new v15(7, v14, v14); } catch (e) {}
v16[3] = v16;
try { v16.findIndex(v14); } catch (e) {}
try { Reflect.from(v7, Reflect, Uint8Array); } catch (e) {}
const v21 = new Reflect(9);
const t15 = [-1024];
delete t15[v12];
const v26 = new Int16Array(2872);
try {
    v26.length = 4;
} catch(e28) {
}
const v29 = v21[7];
v29 + v29;
try { v21.filter(9); } catch (e) {}
const v36 = new Uint8ClampedArray(9);
try { BigInt64Array.from(v36); } catch (e) {}
BigUint64Array.prototype = BigUint64Array;
const v39 = new BigUint64Array(2220);
const v40 = v39?.some;
v40.name;
try { new v40(v15); } catch (e) {}
let v43 = v39[1261];
v43--;
let v45 = 5;
v45--;
Uint16Array.b = Uint16Array;
const v48 = new Uint16Array(v45);
v48[4];
for (let v50 = 0; v50 < 5; v50++) {
    function f51() {
        for (let [i57, i58] = (() => {
                function f53() {
                    return f53;
                }
                f53();
                class C55 {
                    static #a;
                }
                return [0, 10];
            })();
            (() => {
                i57 << i57;
                i58 >>> i58;
                i57 >> i57;
                const v62 = i57 < i58;
                v62 || v62;
                return v62;
            })();
            (() => {
                i57 !== i57;
                i58 % i58;
                -i58;
                const v69 = i57++;
                new Int32Array(2890);
                function F73(a75, a76) {
                    if (!new.target) { throw 'must be called with new'; }
                    a75 >> a75;
                    this.constructor;
                }
                v69 >>> v69;
                const v80 = i58--;
                v80 + v80;
            })()) {
            i58--;
            let v85 = i57++;
            const v86 = v85++;
            v86 !== v86;
        }
        return f51;
    }
    f51();
    %OptimizeFunctionOnNextCall(f51);
}
