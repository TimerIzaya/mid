675287.2606415933 / 675287.2606415933;
function f10() {
    return 0.7130137664643297;
}
class C11 extends f10 {
    #valueOf(a13, a14, a15, a16) {
        a15[7] = a13;
        a16?.d;
        try {
            new f10();
        } catch(e19) {
            const v22 = new Int16Array(12);
            v22.fill();
            ([9007199254740990,-16,376821973,268435456])[1];
            try {
                function F27() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v29 = new F27();
                const v30 = new F27();
                const v31 = v30.__defineSetter__;
                try { v31(); } catch (e) {}
                function f33(a34, a35) {
                    const o36 = {
                        "e": v29,
                    };
                    return o36;
                }
                const v37 = f33();
                f33();
                function f39() {
                    return f33;
                }
                f39.b = F27;
                f39.b = f39;
                const v42 = new v37();
                for (const v43 of v42) {
                    v43 >>> v43;
                    Object.defineProperty(v37, Float32Array, { configurable: true, enumerable: true, get: f33, set: f39 });
                }
                v22.g = 4294967296;
            } catch(e45) {
            }
        }
        return 675287.2606415933;
    }
    static 4294967296 = 675287.2606415933;
    static c = 4.0;
    e = 948.5877340768479;
    [675287.2606415933] = -2.2250738585072014e-308;
    static 16 = 0.7130137664643297;
}
C11.name;
const t52 = -6.313393661088782e+307;
new t52();
new C11();
new C11();
for (let v50 = 0; v50 < 25; v50++) {
    const v52 = "p" + v50;
    try { v52.blink(); } catch (e) {}
    const v54 = v52.match(v52);
    try { v54.findLastIndex(675287.2606415933); } catch (e) {}
}
-9007199254740992n * -9007199254740992n;
function f58() {
    return -9007199254740992n;
}
f58.length;
%PrepareFunctionForOptimization(f58);
f58();
%OptimizeFunctionOnNextCall(f58);
f58();
try {
    Int8Array(Int8Array, Int8Array, Int8Array);
} catch(e64) {
    e64.stack;
}
