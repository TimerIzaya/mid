new BigInt64Array(125);
new Int32Array(0);
new Uint8ClampedArray(237);
function f12(a13, a14, a15, a16) {
    new Uint8ClampedArray();
    const o19 = {
        ...a16,
    };
    const v20 = a14++;
    class C21 {
        static [v20];
    }
    return f12;
}
function f22() {
}
const v24 = ([16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9]).keys();
const o25 = {
    "g": v24,
};
const t20 = 125;
t20.toString = f22;
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f22;
    this.a = f22;
}
new F26();
const v33 = new f22();
const v35 = Symbol.toPrimitive;
v33[v35] = f22;
for (let v36 = 0; v36 < 10; v36++) {
    f12();
}
%OptimizeFunctionOnNextCall(v35);
Int32Array();
