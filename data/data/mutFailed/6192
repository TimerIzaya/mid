const v0 = [62.850931592023244];
const v4 = Math.exp(-Infinity);
Math.tan(-532550611);
const v11 = new Set();
class C12 {
    [v11];
}
const o15 = {
    "execution": "async",
    "type": "minor",
};
gc(o15);
-[];
class C21 extends Int32Array {
}
const v22 = new C21();
for (let v23 = 0; v23 < 5; v23++) {
    v22["p" + v23] = v23;
}
function F26(a28) {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = this.constructor;
    try { new v29(-143547321); } catch (e) {}
    a28 - a28;
    this.g = -1517929768;
    try {
        this.g = -1;
    } catch(e32) {
    }
    try {
        this.h = a28;
    } catch(e33) {
    }
}
new F26(-1);
[5.0,-2.2250738585072014e-308,-1000000.0,-Infinity,4.0,-2.2250738585072014e-308,9.378797321153371];
[1000000000.0,4.641171136789515,2.2250738585072014e-308,-2.2250738585072014e-308,-2.220446049250313e-16,-2.220446049250313e-16,471519.9176246368];
new Map();
const v39 = [-5.0,1000000000000.0,2.0,-1000000.0,-6.117959750588393e+307];
const v40 = [1.7976931348623157e+308];
[NaN,-1000000000000.0,1000000.0,-7.5717191609009475,1.3820063660737017e+308,592041.5697882739,-839.5267432088784];
new Uint8ClampedArray(256);
let v50;
try { v50 = v0.indexOf(256, 8); } catch (e) {}
try { v39.findLastIndex(v50, v40); } catch (e) {}
v50 = 256;
class C55 extends Int8Array {
    [12];
}
new C55(1564);
[-2.220446049250313e-16,0.0,-4.0,3.083368472061526,4.0,1e-15,-1.786233873998581e+308];
[1000000000000.0,3.0,1.7976931348623157e+308,1000000000000.0,-1000000000.0,1.7976931348623157e+308,-0.24641356751462062,-2.0,5.116171124529245,-65574.22228196019];
[Infinity,940132.3730031401,-595944.9640820266,776681.8040957688,4.0,409456.8346359958,0.05843217549199764,-3.0];
new Float64Array(8);
new Int8Array(16);
let v66 = 0;
do {
    const o68 = {
    };
    const v71 = gc()?.then;
    try { v71(); } catch (e) {}
    function f73() {
        return f73;
    }
    const v74 = [601759695];
    const v75 = [1073741824,1073741823,1376142744,1073741825];
    function f77(a78, a79, a80, a81) {
        function f83() {
            return a78;
        }
        f73();
        const v86 = new Int8Array();
        function f87(a88, a89) {
            return -143547321;
        }
        f87(f87(v75, v4));
        v86.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f83);
        let v96;
        try { v96 = v75["find"](..."find", a81, ...v74, ...v75, ...522675525n); } catch (e) {}
        v96 <= a80;
        return arguments;
    }
    gc(o68);
    for (let i101 = 0, i102 = 10; i101 < i102; i101++) {
    }
    v66++;
} while ((() => {
        const v111 = v66 < 5;
        Map - v111;
        const v113 = new v40();
        const v114 = [v40,v40];
        [v113,v114,v114];
        const o116 = {
        };
        new Float32Array(5);
        new Float32Array(9);
        new Float64Array(3754);
        return v111;
    })())
