const v3 = ["string"];
const v4 = [v3,v3,"nv"];
let v5;
try { v5 = v4.entries(); } catch (e) {}
[v4,v3,"-36100"];
new v5();
const o15 = {
    valueOf() {
        this | this;
        super.c = this;
        const o12 = {
        };
        new WeakSet("nv", o12);
        return 219;
    },
};
v5.BYTES_PER_ELEMENT = Uint8Array;
const v17 = new Uint8Array(v5);
let v18;
try { v18 = v17.filter("-36100"); } catch (e) {}
8 !== 8;
new Int16Array(8);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v29 = this.constructor;
    try { new v29(); } catch (e) {}
}
new F23();
new v18();
new Int8Array(1087);
for (let v37 = 0; v37 < 5; v37++) {
    for (const v38 in "toString") {
        v38[0];
    }
    let {"g":v40,"length":v41,...v42} = "toString";
    v42[Symbol.species] = v40;
    let v46 = -65536;
    const v48 = v46--;
    "-36100" >>> v46;
    v48 ^ v48;
}
try {
    let v56 = -47505;
    (v4 / v4) * --v56;
    undefined.fuck();
} catch(e62) {
    e62.stack;
}
