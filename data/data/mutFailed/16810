class C3 {
    m(a5) {
        let v6;
        try {
        const t0 = 1073741824;
        v6 = t0(-2147483649, this, this, -2147483649);
        } catch (e) {}
        const v7 = v6.__proto__;
        try {
            this.fuck(-735327229n, v6, v6);
        } catch(e10) {
        }
        return v7;
    }
    static #g;
}
new C3();
new C3();
[-1000000.0,-0.0,0.19158826877272517,-5.0,-205.70313810349148,-1.0,614307.819358957];
[0.35788070940220273,0.2100199878854565,1000000.0,-556.8608424454465,1000000000.0];
const v15 = [1000000.0,5.0,-652543.0512888677];
let v16;
try { v16 = new C3(C3, ...-1024, ...v15, -1024, C3); } catch (e) {}
%VerifyType(v16);
const v17 = new C3();
function f18() {
    return v17;
}
let v19;
try { v19 = new f18(); } catch (e) {}
Infinity + v19;
let v23 = 5.0;
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    function f26(a27) {
        new F24();
        new Uint8ClampedArray(0);
        new Float64Array(1129);
        new BigUint64Array(1908);
    }
    const v45 = this.exp(Infinity || -12);
    Math.clz32(F24);
    f26 + f26;
    Object.defineProperty(this, "a", { set: f26 });
    1191742690 > 1191742690;
    try {
        this.a = 1191742690;
    } catch(e50) {
        try {
            v15.__proto__ = v45;
        } catch(e51) {
            try {
                new f18();
            } catch(e53) {
            }
            v17[v45.isConcatSpreadable];
        }
        v23 = -2.0;
    }
}
F24.name;
new F24();
