new Int16Array(2220);
const v5 = new Int16Array(3583);
v5[18] = v5;
254 - 254;
Float32Array.e = Float32Array;
new Float32Array(254);
64n << 64n;
let v20;
try { v20 = ("minor").trim(); } catch (e) {}
const o22 = {
    "execution": "async",
    "type": "minor",
};
o22.type;
gc(o22);
let v26 = 0.25392962976935707;
v26 + v26;
v26++;
const v30 = [-2.0,-628.7969742856723];
let v31;
try { v31 = v30.reduceRight(v30); } catch (e) {}
const v32 = [2.030535720202217e+307,2.030535720202217e+307,-1000.0,-628.7969742856723];
const v33 = [v32,v26,v32,-628.7969742856723];
class C34 {
    [-832267.262043573];
    static #n(a36, a37, a38) {
    }
    g = v33;
}
-8988 !== -8988;
-1073741824 >> -1073741824;
v31.name;
const v48 = new Set();
class C49 {
    b = v48;
}
v48["clear"]();
const v52 = new C49();
const v53 = new C49();
v53.b = v53;
function f54(a55, a56, a57, a58) {
    a55.b = a55;
    let v59;
    try { v59 = a55.hasOwnProperty(a56); } catch (e) {}
    !v59;
    a56.f = v59;
    for (let v61 = 0; v61 < 25; v61++) {
        const v63 = "p" + v61;
        const v64 = v63?.search;
        try { new v64(a58); } catch (e) {}
        let v66;
        try { v66 = v63.anchor(a57); } catch (e) {}
        v66[11] = v66;
        a56[v63] = v61;
    }
    return a58;
}
f54(v52, v53);
gc.arguments = v20;
gc();
