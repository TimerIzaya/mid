let v0 = 0;
let v2 = new Int32Array(v0);
let v3 = 11;
const v4 = [];
function f5(a6) {
    ({"b":a6,"g":v2,"h":v0,...v3} = a6);
    v0[v0] = v4;
    return a6;
}
Object.defineProperty(v4, "valueOf", { writable: true, enumerable: true, value: f5 });
const v7 = v4.toSpliced(v4);
v7[Symbol.toPrimitive] = f5;
parseInt(v7);
try {
} catch(e12) {
}
v3 | v3;
new BigUint64Array(v3);
class C18 {
    constructor(a20, a21) {
        function f22(a23) {
            function f24(a25) {
                function f26() {
                    const v27 = [f26,f26,f26,f26,f26];
                    class C29 extends v27.constructor {
                    }
                    const v30 = new C29();
                    try { v30.reduce(); } catch (e) {}
                    return v27;
                }
            }
            const v34 = new Uint16Array(1024);
            const v37 = new Int32Array();
            const v39 = new BigUint64Array();
            try { v39.with(Map, v37); } catch (e) {}
            v34[7] = v34;
            function F41() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v44 = new F41();
            let v46 = "-1024";
            f24(v44, "8Yr");
            v46 <<= "8Yr";
            return C18;
        }
        function F50(a52, a53, a54) {
            if (!new.target) { throw 'must be called with new'; }
            function f55() {
                return Math.asin(Math);
            }
            %PrepareFunctionForOptimization(f55);
            f55();
            %OptimizeFunctionOnNextCall(f55);
            f55();
        }
        const o60 = {
            "type": "function",
        };
        new Worker(f22, o60);
    }
}
const v62 = new C18();
new C18(v62, C18);
new C18();
const v65 = new Int32Array(1177);
v65[584];
0.26976159304214653 >>> 0.26976159304214653;
5n & 5n;
function f76(a77) {
    return f76;
}
const v80 = [];
try { v80.flat(); } catch (e) {}
const o84 = {
    "type": "function",
    "type": "function",
    m(a83) {
        return v3;
    },
    "type": "function",
};
new Worker(f76, o84);
Uint8Array.d = Uint8Array;
const v88 = new Uint8Array(0);
const o89 = {
};
for (let i91 = 4294967295; i91 < 9;) {
}
o89.e = v88;
