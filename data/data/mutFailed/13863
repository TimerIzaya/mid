const v1 = new Date();
class C2 extends Date {
    static valueOf(a4, a5) {
        let v6 = 0;
        do {
            const v7 = super.c;
            new Uint8ClampedArray(129);
            const v11 = [601759695];
            const v12 = [1073741824,1073741823,1376142744,1073741825];
            function f13(a14, a15, a16, a17) {
                -a14;
                a15 >>> a15;
                const v20 = a14 >>> a14;
                v20 | v20;
                const v22 = a16[3];
                v22 + v22;
                ("find").codePointAt(v12);
                try { v12["find"](..."find", a17, ...v11); } catch (e) {}
                return a17;
            }
            let v27;
            try { v27 = v7(v7); } catch (e) {}
            v6 &&= v7;
            const t23 = /P[x\dz]*/gudmy;
            t23.multiline **= 1000;
            Math.E = Math;
            v1[v6] = v27;
            v6++;
        } while (v6 < 9)
        return Date;
    }
}
new C2();
new C2();
new C2();
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F38);
    const v43 = this.constructor;
    try { new v43(); } catch (e) {}
}
const v46 = new Uint8ClampedArray(127);
const t42 = 127;
const v48 = new t42(-4294967296);
const v49 = [v48];
const v50 = v49.constructor;
try { v50.isArray(v49); } catch (e) {}
class C52 extends v50 {
}
C52.a = C52;
v46[23] = v46;
-4;
new Int32Array(4);
try { new Int16Array(127, Int16Array, Int32Array); } catch (e) {}
const v63 = new Date(64);
v63.setMonth(-3);
new Int16Array(7);
const v66 = /foo(?<=bar)baz/s;
v66.h = 127;
v66.h = v66;
new Int16Array(7);
new Float64Array(216);
const v72 = /ZMq/vy;
function f73(a74) {
    return "ceH7";
}
v72[Symbol.species] = f73;
const v81 = Symbol.species;
Symbol.for(v81.description);
v72[v81] = v66;
function f85(a86, a87, a88, a89) {
    function f90() {
        Math.round(a87);
        const v94 = Math.tanh(-4294967295);
        v94 * v94;
        return v94;
    }
    f90();
    eval(a86);
    %OptimizeFunctionOnNextCall(f90);
    return f85;
}
