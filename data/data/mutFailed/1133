class C3 {
    constructor(a5, a6) {
        try { a5(this); } catch (e) {}
    }
    f = C3;
    static #g = -2147483649;
    static 1;
    set d(a9) {
        super[8] = -2147483649;
        super[-2147483649] = this;
        const v11 = [[this,10,-2147483649,10,10]];
        const v12 = [v11,v11,a9,8,10];
        v12 >> v12;
    }
    5;
    a;
}
const v14 = new C3();
v14[5];
const v16 = new C3();
const v17 = v16[5];
const v18 = new C3();
const v19 = v18?.hasOwnProperty;
try { new v19(v16); } catch (e) {}
function f21() {
    return -2147483649;
}
let v22;
try { v22 = new f21(); } catch (e) {}
function f23() {
    function f24(a25) {
        const v26 = delete v14?.a;
        v26[v26] = v17;
        return v22;
    }
    return f24;
}
function f27(a28) {
    for (let v29 = 0; v29 < 32; v29++) {
        C3["p" + v29] = v29;
    }
}
Object.defineProperty(v22, "constructor", { writable: true, configurable: true, get: f23, set: f27 });
const v32 = v22?.constructor;
try { new v32(); } catch (e) {}
!false;
const v39 = false || false;
class C40 {
    #n() {
    }
}
C40[Symbol.toPrimitive] = f21;
C40.length = C40;
C40.prototype = C40;
const v44 = new C40();
const v45 = v44?.constructor;
try { new v45(); } catch (e) {}
const v47 = new C40();
const v48 = v47?.constructor;
function f49() {
    function f50() {
        const v51 = false;
        function F52() {
            if (!new.target) { throw 'must be called with new'; }
        }
        return v16;
    }
    return f50;
}
Object.defineProperty(v48, "valueOf", { writable: true, enumerable: true, get: f49 });
try { new v48(); } catch (e) {}
const v56 = [];
try { v56.includes(v18); } catch (e) {}
if (v39) {
    const o58 = {
    };
    try {
        o58.e = 9;
    } catch(e59) {
    }
    try {
        const o60 = {
        };
        o60.e = 9;
        o60.g = 8;
    } catch(e61) {
    }
    try {
        const o62 = {
        };
        o62.e = 9;
        o62.g = 8;
        o62.c = v22;
    } catch(e63) {
    }
    try {
        const o64 = {
        };
        o64.e = 9;
        o64.g = 8;
        o64.b = v19;
    } catch(e65) {
    }
} else {
    536870888 - v48;
}
const v67 = [];
const v68 = [v56];
v68[0];
let v72 = 11;
v72++;
16 < 16;
const v77 = new Int16Array(16);
v77.buffer;
const v79 = v77.length;
v79 >> v79;
v79 >>> v79;
function f82(a83, a84, a85, a86) {
    a85 - a85;
    try { a84.findLast(16); } catch (e) {}
    const v89 = a85 !== a85;
    v89 || v89;
    const o91 = {
        0: v68,
    };
    o91[0];
    o91[0] = o91;
}
f82(v44, v67, v79);
