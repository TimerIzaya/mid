class C3 {
    static m(a5, a6) {
        const t2 = "n";
        t2[208] **= a5;
        let v8 = 65537;
        Math.pow(v8, a6);
        ++v8 * v8;
        !a6;
        return a6;
    }
    c = "MIN_SAFE_INTEGER";
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
v15.b = v15;
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(this, a18); } catch (e) {}
    let v21;
    try { v21 = a19.strike(); } catch (e) {}
    try {
        this.a = v14;
    } catch(e22) {
    }
    try {
        this.f = C3;
    } catch(e23) {
    }
    try {
        const v24 = C3[-1];
        try { v21.m(v24, v24); } catch (e) {}
        let v26;
        try { v26 = ("MIN_VALUE").matchAll(a19); } catch (e) {}
        try { v26.next(); } catch (e) {}
        v15 * 9223372036854775807n;
        this.g = v13;
    } catch(e32) {
    }
}
const v35 = -Infinity;
v35 - v35;
v13 % v35;
const v40 = -(~(-v13));
const v41 = -14406 ^ v40;
v41 > v41;
v35 / v13;
~v40;
new F16("MIN_SAFE_INTEGER", "MIN_VALUE");
const v46 = new F16("MIN_VALUE", "MIN_VALUE");
const v47 = v46?.constructor;
try { new v47(v13, v13); } catch (e) {}
const t52 = "MIN_VALUE";
new t52("MIN_SAFE_INTEGER", "MIN_VALUE");
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v52 = new Float32Array(4061);
v52.indexOf() >>> Math;
