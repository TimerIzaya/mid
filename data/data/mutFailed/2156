[Infinity,-2.8790809075131126e+307,5.0];
const v1 = [2.0,-752789.552657183,1000.0,8.080518342201398,NaN,-9.504670728977306,-6.897134130257754e+307,Infinity,-1.7976931348623157e+308,-874.9052126590178];
("1073741823")["1073741823"];
const v7 = new Int32Array(2917);
const v10 = v7["lastIndexOf"](10);
const v11 = [2.0,-625.4052604574125];
new BigUint64Array(2147483647);
const v19 = new Map();
v19.constructor;
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a24;
        new Float64Array(Float64Array);
        const v28 = new Uint8ClampedArray(2147483647);
        function f29(a30) {
            return f29;
        }
        const v33 = [v28];
        const o34 = {
            "arguments": v33,
            "type": "function",
        };
        new Worker(f29, o34);
    } catch(e36) {
    }
    [4096];
    1073741823 & 1073741823;
    ("catch").replaceAll("catch");
    try {
        this.c = this;
    } catch(e42) {
    }
}
new v10(128, v11);
new F21(14, v11);
new v1(-7466, v1);
new Uint32Array(159);
function f54() {
    const o58 = {
        toString() {
            super[this];
        },
        ...v11,
        n() {
            return this;
        },
    };
    try { o58.n(); } catch (e) {}
    return v11;
}
f54();
let v62 = Map;
const v74 = new Int8Array(3816);
for (const v77 of "some") {
    const v78 = v74[1];
    let [,,,...v79] = v74;
    const o80 = {
    };
    o80.a = v78;
    const o81 = {
    };
    o81.a = 256;
}
v62--;
new Float32Array(256);
const v87 = new Float32Array();
const v90 = new BigUint64Array(512);
const o91 = {
};
new Int8Array(3787);
v90["lastIndexOf"](v87);
