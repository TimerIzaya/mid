function f2() {
    return 1073741824;
}
const v3 = [601759695];
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    const v12 = new Int8Array(a10);
    v4[3] = v4;
    const t8 = v12.buffer;
    t8.constructor = f2;
    try { v4["find"](..."find", a10, ...v3, ...v4, ...522675525n); } catch (e) {}
    return f2;
}
Math.cosh(Math);
new BigUint64Array(3996);
const v22 = [127,-4294967295,10,-18773,65535,1000,2147483647];
try { v22.sort(1073741824); } catch (e) {}
new Set();
const v26 = [601759695];
const v27 = [1073741824,1073741823,1376142744,1073741825];
function f28(a29, a30, a31, a32) {
    function f33() {
        return a31;
    }
    try { v27["find"](..."find", a32, ...v26); } catch (e) {}
    BigInt64Array.constructor.call(f33);
    return a31;
}
for (let v39 = 0; v39 < 10; v39++) {
    f28();
}
[47548,-2147483649,-128];
const t31 = v22.constructor;
t31();
class C44 {
}
Symbol.toPrimitive;
[4294967295,-11,-1751963281,7,65535,-4,-9,-55283];
~2520;
new Float64Array(2520);
const v54 = new Int32Array(9);
v54[8] = v54;
const v57 = new Uint16Array(4096);
v57.BYTES_PER_ELEMENT = v57;
const v58 = [-31263,-15,-1024];
const v62 = Date(v58, 512, 512, 512, v58, 512, 512);
v62[49] = v62;
class C63 extends Date {
    constructor(a65, a66) {
        eval(a65);
    }
}
C63.a = C63;
new C63();
const v73 = new C63(-4294967296);
Object.defineProperty(Date, v73, { get: Date, set: Date });
