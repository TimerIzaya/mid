const v5 = new BigInt64Array(8);
v5.byteOffset;
+1000.0;
Math.sin(v5);
Math.pow(BigInt64Array, BigInt64Array);
+1000.0;
Math.sign(v5);
Math.sign(v5);
new BigUint64Array(19);
const v20 = v5["entries"]();
new Uint8ClampedArray(3);
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    function f30(a31, a32, a33, a34) {
        const v36 = new BigInt64Array();
        a31 = f30;
        a31(BigInt64Array, v20, 1024, this);
        new Uint16Array(85);
        new Int8Array(1385);
        new Uint8ClampedArray(925);
        const o47 = {
            __proto__: v36,
        };
        try { o47.indexOf(); } catch (e) {}
        try { Set.apply(a31, a34, a31, Set, a32); } catch (e) {}
        const v52 = new BigInt64Array(4046);
        [,...a34] = v52;
        return a34;
    }
    for (let v53 = 0; v53 < 5; v53++) {
        f30();
    }
}
new F28();
