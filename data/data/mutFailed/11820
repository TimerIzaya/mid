new Int16Array(2344);
const v3 = [2.220446049250313e-16,1000000.0,-832083.505850983,0.4718386381385684,1000.0,-5.0,9.814259698721895e+307,-659970.7982908424,-5.0];
[v3];
let v5 = -1024;
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this?.__defineSetter__;
    try { new v12(v5, 2344); } catch (e) {}
}
const v14 = new F6();
v14.length = v14;
const v15 = v14?.__defineGetter__;
try { new v15(v3, 2344); } catch (e) {}
const v17 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v18 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
let v19;
try { v19 = v18.reduce(2344); } catch (e) {}
Uint32Array.c = Uint32Array;
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
}
F21.arguments = F21;
class C25 {
}
C25.prototype = C25;
try { C25.toString(); } catch (e) {}
const v28 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v29 = [601759695];
const v30 = v29?.values;
try { new v30(); } catch (e) {}
522675525n ^ 522675525n;
function f34(a35, a36, a37, a38) {
    function f39() {
        let v42 = Float64Array;
        const v44 = Array();
        function f45() {
            return f39;
        }
        function f46(a47) {
            return F21;
        }
        Object.defineProperty(v44, 0, { configurable: true, enumerable: true, get: f45, set: f46 });
        v44.unshift(v5);
        const v50 = new Set();
        function F51(a53, a54) {
            if (!new.target) { throw 'must be called with new'; }
            F51(a54, v50);
        }
        v42 = a36;
        const v56 = v17.length;
        try {
            v17.forEach(v42);
        } catch(e58) {
        }
        const v59 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C61 {
        }
        const v62 = new C61();
        try {
            v62.__proto__ = F21;
            const v63 = [];
            class C64 {
            }
            function* f65(a66, a67) {
                yield* v63;
                return v63;
            }
        } catch(e68) {
        }
        const v69 = Symbol.toPrimitive;
        const o75 = {
            toString(a71, a72) {
                const v73 = a38 && v42;
                a71 *= v69;
                return v73 <= v59;
            },
        };
        const o96 = {
            "c": -4294967297n,
            [522675525n](a78, a79) {
            },
            "c": v29,
            valueOf(a81, a82) {
                return F51;
            },
            [-4294967297n](a84, a85, a86, a87) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v28,
            ...v14,
            [v69]() {
            },
            "type": C25,
            ..."Vre",
            valueOf(a90, a91) {
            },
            ..."Vre",
            4: "Vre",
            toString(a93, a94, a95) {
                return v17;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v5 %= -268435456;
        new Uint32Array(v18, v56, v69);
        try {
            new Float64Array(127);
        } catch(e104) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    const v111 = f39();
    %OptimizeFunctionOnNextCall(f39);
    return v111;
}
f34.arguments = f34;
let v112 = f34.length;
v112++;
12 - 12;
new Uint8ClampedArray(12);
Float64Array.length;
new Float64Array(2311);
64 - 64;
-(-464780348);
const v127 = /\111/dmy;
/[c]/gvdisy;
/b(?:foo)/vmsy;
let v130 = 604.4479109019192;
v130++;
v130 >>> v130;
-2.220446049250313e-16 & -2.220446049250313e-16;
const v136 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
const v137 = [v130,-2.220446049250313e-16,0.3083488057663979,0.3083488057663979];
const v138 = [0.3083488057663979,0.3083488057663979,0.3083488057663979,0.3083488057663979];
class C139 {
    constructor(a141, a142) {
        a141[2];
        a142[2] = a142;
        const v144 = a141?.filter;
        const v145 = v144?.apply;
        try { new v145(a142, a141); } catch (e) {}
        try { new v144(a142); } catch (e) {}
        try { a142.find(C25); } catch (e) {}
        a142[2];
        const v150 = /Ia[a]/uims;
        try { v150.toString(); } catch (e) {}
        let v152 = /W(jy2)/udy;
        const v153 = v152?.toString;
        try { v153(); } catch (e) {}
        try { new v153(); } catch (e) {}
        v152.flags;
        const v157 = /(u4(?:a?)*)/gudimsy;
        2 !== 2;
        -(-2);
        const v163 = new Uint8Array(v157, C139);
        const v164 = v163?.constructor;
        try { new v164(v127, v29, a141); } catch (e) {}
        const v167 = new Uint32Array();
        function f168(a169, a170, a171, a172) {
            a171 + a171;
            const v174 = a170 > a170;
            v174 && v174;
            const o179 = {
                ...v163,
                n(a177, a178) {
                    v167[a169] = v167;
                },
            };
            const v180 = o179?.__defineSetter__;
            v180.name = v180;
            try { new v180(v28, v157); } catch (e) {}
            return o179;
        }
        for (let v182 = 0; v182 < 625; v182++) {
            v182 & v182;
            f168(Uint8Array, 2, v182);
        }
        v152 = v157;
        for (let v185 = 0; v185 < 25; v185++) {
            try { ("p").strike(); } catch (e) {}
            v136["p" + v185] = v185;
            const o189 = {
            };
            o189.h = o189;
            o189.d = o189;
            1000 >>> 1000;
            const v192 = new Uint8ClampedArray(1000);
            try { v192.reduce(v192); } catch (e) {}
            !v192.includes(undefined);
        }
    }
}
const v197 = new C139(v136, v136);
v197.length = v197;
const v198 = new C139(v137, v138);
v198.g = v198;
v198.g = v198;
const v199 = v198.constructor;
try { new v199(v19, -2.220446049250313e-16); } catch (e) {}
const v201 = new v199(v130, 0.3083488057663979);
v201.e = v201;
