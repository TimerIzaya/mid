function f3(a4) {
    a4 / a4;
    const o12 = {
        [a4]: 1.0,
        ...a4,
        "g": a4,
        6: f3,
        "f": a4,
        "h": a4,
        4052692751: -0.0,
        [1.0](a7, a8) {
            %VerifyType(this);
            return a4;
        },
        "a": 1.0,
        "e": a4,
        "c": 1.0,
        "b": 1.0,
        "d": -0.0,
    };
    o12[1] = o12;
    return o12;
}
f3.toString = f3;
f3(1.0)[6];
f3(f3);
f3(f3)[6];
-2.0 + -2.0;
let v20 = 5.0;
const v21 = v20--;
722 * 722;
new BigInt64Array(722);
let v27 = 3471;
v27--;
const v30 = new Float32Array(v27);
function f31(a32, a33) {
    Math.abs(v21);
    Math.trunc(2.5130413639450566);
    1.0 && 4;
    Math.tan(a33);
    2.5130413639450566 + 2.5130413639450566;
    return 5.136334369227454;
}
Object.defineProperty(v30, "toString", { configurable: true, enumerable: true, value: f31 });
v30[1671] = v30;
new Uint32Array(232);
class C47 {
    static {
        try {
        const t0 = 529940173;
        t0(this, this);
        } catch (e) {}
        Math.cos(1000);
        Math.tan(1000);
    }
}
const v54 = new C47();
function f55() {
    return v21;
}
function f56(a57) {
    127 ** v20;
    const v61 = v20 && a57;
    Math.cos(127);
    Math.cos(v61);
}
Object.defineProperty(v54, Symbol.isConcatSpreadable, { writable: true, get: f55, set: f56 });
const v66 = v54?.propertyIsEnumerable;
try { new v66(v54); } catch (e) {}
-2147483648 ^ -2147483648;
function f71(a72, a73, a74) {
    const o78 = {
        __proto__: a73,
        [a74]: -2147483648,
        [a73](a76, a77) {
        },
        "c": 529940173,
        1073741824: C47,
    };
    return o78;
}
const v79 = f71();
function f80(a81, a82) {
    ({"d":f56,} = a82);
    const o84 = {
        "c": Array,
    };
    return v54;
}
v79.toString = f80;
const v85 = f71(-1, v79);
const v86 = f71(-2147483648, v54);
v86[Symbol.isConcatSpreadable] = v54;
const v89 = -5 << v85;
Symbol.length = Symbol;
v86[Symbol.isConcatSpreadable] = v89;
