function f0() {
}
const v2 = /[-123]N/gdis;
function f3() {
    function f4() {
        f0 &= f0;
        function f7(a8) {
            const o11 = {
                "g": 1000000000.0,
                set a(a10) {
                    a10.h = this;
                },
                "h": a8,
                "d": 1000000000.0,
                "b": -1.1013479045636231e+308,
                2: a8,
            };
            return o11;
        }
        f7();
        class C13 {
            #n(a15, a16, a17, a18) {
                super[this] = this;
                super[f7].o();
            }
            constructor(a23, a24) {
                const o28 = {
                    "type": "minor",
                };
                gc(o28);
            }
        }
        return C13;
    }
    return f4;
}
Object.defineProperty(v2, "toString", { writable: true, enumerable: true, get: f3 });
function f30(a31, a32, a33) {
    a33 + a33;
    return null;
}
const v35 = f30?.constructor;
let v36;
try { v36 = new v35(v2); } catch (e) {}
try { ("function").codePointAt(f30); } catch (e) {}
const v40 = ["function",v2,null];
v40.g = v36;
v40.g = v40;
try { v40.reduce(f30); } catch (e) {}
const o42 = {
    "arguments": v40,
    "type": "function",
};
new Worker(f30, o42);
const v44 = [-1.0,1000000000.0];
v44[1] = v44;
try { v44.group(v44); } catch (e) {}
const v46 = [1000.0,-382.2545268036033,1000000.0,-Infinity,-4.168790149324993,-4.0,5.0];
const v47 = [304773.6974680214,-4.0,2.0,-1e-15];
const v48 = v47?.find;
try { new v48(v2); } catch (e) {}
let v50;
try { v50 = v47.map(v40); } catch (e) {}
let v51 = -256;
v51++;
let v53 = 16;
v53++;
class C57 extends Uint32Array {
}
C57.d = o42;
C57.d = C57;
const v60 = new BigInt64Array(1073741824, BigInt64Array);
v60[513327423];
try { ("number").fontcolor(Uint32Array); } catch (e) {}
const v67 = new BigInt64Array();
class C68 {
    constructor(a70, a71) {
        for (let v72 = 0; v72 < 10; v72++) {
            v67[-1];
            try {
                super.o();
            } catch(e75) {
            }
        }
    }
}
class C76 extends C68 {
}
C76.b = C76;
const t89 = "mYE";
t89[2] = "mYE";
const v78 = ("mYE")?.toLocaleUpperCase;
try { new v78(); } catch (e) {}
try { new Int32Array(Int32Array, 1785735859, "number"); } catch (e) {}
try { new Uint8Array(v50, v78, Uint8Array); } catch (e) {}
const v86 = new Uint8Array(3745);
v86.constructor = f30;
const v87 = v86?.constructor;
try { new v87(v46, v86, v46); } catch (e) {}
try { new v87(null, C57, null); } catch (e) {}
class C90 extends Int32Array {
}
try { new C90(); } catch (e) {}
const v92 = new C90();
function f93(a94) {
    const o96 = {
        __proto__: Reflect,
        "e": v44,
    };
}
Object.defineProperty(v92, "p3", { set: f93 });
let v97 = v86[64];
[,,...v97] = v86;
for (let v98 = 0; v98 < 5; v98++) {
    v92["p" + v98] = v98;
}
