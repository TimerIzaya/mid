let v3 = -13n;
v3 ^ v3;
const v6 = 1n ^ 1n;
const v8 = 536870912n << 536870912n;
function f9() {
    return f9;
}
Int8Array.BYTES_PER_ELEMENT = 0n;
const v12 = new Int8Array(16);
if (v8 <= v8) {
    Object.defineProperty(v12, "buffer", { writable: true, configurable: true, enumerable: true, get: f9 });
    v3 = v6;
} else {
    try { v12.findLast(f9, v12); } catch (e) {}
    v12[4229033471];
}
const v18 = new Uint8ClampedArray(16);
const v21 = new BigInt64Array(19);
let v22 = 0;
while (v22 < 2) {
    v21 + v18;
    try {
        v21.length = 2;
    } catch(e27) {
    }
    v22++;
}
("4294967296").toLocaleUpperCase();
try { v8.strike(); } catch (e) {}
