const v2 = new Int16Array(1752);
new Int32Array(474);
const v8 = new BigInt64Array(3235);
function f9(a10, a11) {
    const v12 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    class C13 {
    }
    C13[Symbol.replace] = v12;
    return f9;
}
%PrepareFunctionForOptimization(f9);
class C16 extends BigInt64Array {
    257 = v8;
    static get h() {
        try {
        const t0 = 474;
        t0(Int32Array);
        } catch (e) {}
        try {
            v2.values();
        } catch(e23) {
        }
        return Int32Array;
    }
}
new C16();
new C16();
new C16();
class C28 {
    static {
        try {
            const t31 = null;
            t31.valueOf = this;
        } catch(e30) {
            e30.stack;
        }
    }
}
const o33 = {
    4294967296: 1733353236,
};
class C34 {
}
const v35 = [null,null];
function f36() {
    const v37 = -v35;
    new Float32Array();
    -(v37 && v35);
    return C28;
}
%PrepareFunctionForOptimization(f36);
f36();
%OptimizeFunctionOnNextCall(f36);
f36();
