const v1 = new Map();
class C2 {
    static #toString(a4, a5) {
        a5?.[Map];
        /abc+?/gdi;
        /xyz?/imy;
        return /\p{Nd}/d;
    }
    2147483648;
    h = C2;
    static #e = Map;
    b;
    [Map];
    1519 = v1;
}
const v10 = new C2();
const v11 = new C2();
v11.e = v11;
const o12 = {
    __proto__: v11,
    "d": v1,
};
--C2;
const v14 = new o12();
const v15 = v14[2147483648];
const v17 = 337617.86892215465 - 337617.86892215465;
let v18 = 5.0;
const v19 = v18--;
-4.0 - -4.0;
const v22 = -v19;
const v23 = [v10,337617.86892215465,v1,v11,v18];
try { v23.every(-4.0); } catch (e) {}
[v23,v1,v23,v14];
const v26 = [v10];
const v29 = new Uint8Array(v15);
v29[1158] = v29;
-v29[904];
new Int32Array(241);
const v37 = v10.h;
try { v37.setInt8(v22, v37, v26, v18); } catch (e) {}
let [,v39,...v40] = v1;
try { v40.filter(v23); } catch (e) {}
v29[v17];
/M*/gudi;
/f9.6*/y;
/K/v;
const v46 = new Uint8Array(0);
let v47;
try { v47 = v46.at(C2); } catch (e) {}
260330366 | 260330366;
Float32Array.length;
const v52 = new Float32Array(260330366);
v52[2498442];
v52.byteOffset = v52;
new BigUint64Array(2582, v22, 2066, v47);
