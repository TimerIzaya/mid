function f0() {
    f0.stack;
    new BigInt64Array([63570]);
    const o10 = {
        "maxByteLength": 10000,
    };
    const v12 = new ArrayBuffer(3471, o10);
    new Uint8Array(v12);
    let v15 = -3.0;
    const o21 = {
        "c": "2147483648",
        o(a17) {
            const v18 = super[this];
            a17?.[-1.0];
            delete v18?.[1000];
            v15 = v18;
            return "2147483648";
        },
        "e": "2147483648",
        __proto__: v15,
        ...v15,
    };
    o21.d = o21;
    return o21;
}
f0();
f0();
try { (-12n).getTime(-12n, -816409267); } catch (e) {}
-253026077 % -816409267;
const v29 = f0();
class C33 extends Date {
}
("29753").replaceAll("29753");
Symbol.iterator;
const o41 = {
    get g() {
        return this;
    },
    set g(a40) {
    },
};
const v42 = new C33();
v42.getSeconds();
11632n ^ 11632n;
const v46 = [4096];
function f47(a48, a49) {
    return a49;
}
const o52 = {
    "arguments": v46,
    "type": "function",
};
new Worker(f47, o52);
const v54 = [-1033208178];
[-43386,1,15,4,-1736185668,9223372036854775807,60548,-1];
new Date();
new BigUint64Array(10);
try {
    const v62 = Array(19793);
    for (const v63 of v62) {
    }
    const v64 = [v62,v62,v62,v62,v62];
    [[v64,v64,v64]];
} catch(e68) {
    [e68,v46];
}
[-14,268435440,1073741824,-1024,-5,-16,1073741824];
const v71 = [-6,16,-1472482474,64,127,-8,13990,10000,-9007199254740992];
try { v71.groupToMap(11632n); } catch (e) {}
[10000,54255,-10,678978337,37493];
const v74 = [798019179,-9007199254740992,-8195,-4294967297,1420574578,9007199254740991,-1493424054,-2147483649,8,47842];
const v76 = /(?:a*)+q(?<a>.)/guds;
const o78 = {
    get d() {
        return Float32Array;
    },
    __proto__: v76,
};
try { new Float32Array(v29, v54, v71); } catch (e) {}
new Float32Array(v74);
new Uint32Array(5);
new Uint8ClampedArray(v54);
