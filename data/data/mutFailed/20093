new Uint16Array(255);
0 >>> 0;
new Int32Array(0);
2 - 2;
Uint32Array.d = Uint32Array;
const v10 = new Uint32Array(2);
const v11 = v10?.findLastIndex;
let v12;
try { v12 = new Uint16Array(v10); } catch (e) {}
new v12(64);
function f16() {
    return v12;
}
function f17(a18) {
    const v19 = a18?.constructor;
    try { v19(a18, f16); } catch (e) {}
    const o22 = {
        get d() {
            return this;
        },
    };
    return v19;
}
const v25 = new Int16Array(16);
v25[4];
new BigUint64Array(12);
[2.220446049250313e-16,1000000000000.0,-8.75732599276942,2.5202116906646893e+307,-1.1625373201705693e+308,601091.6602676569,-2.2250738585072014e-308,-1000.0];
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "constructor", { enumerable: true, value: f16 });
    function f35() {
        const o36 = {
        };
        o36.g = o36;
        return o36;
    }
    const v37 = f35();
    const v38 = v37?.g;
    try { new v38(f35, f35, v37); } catch (e) {}
    const v40 = f35();
    const v41 = v11?.g;
    try { new v41(v37, this, 2); } catch (e) {}
    ([Uint8Array])["indexOf"](v37, v40);
    const v47 = this.constructor;
    try { new v47(); } catch (e) {}
}
new F33();
const v50 = [140.11703814989755];
const v51 = [-3.0];
Object.defineProperty(v51, "toJSON", { configurable: true, value: v51 });
function f52(a53, a54) {
}
try { ("function").trimLeft(); } catch (e) {}
const v58 = [181.0767075529559,v51];
try { v58.map(Uint8Array); } catch (e) {}
Uint32Array.length;
const v63 = new Uint32Array(13);
let v64;
try { v64 = v63.join(2); } catch (e) {}
~127;
try { new Float64Array(13, v50, Int32Array); } catch (e) {}
new v64(127);
const o70 = {
    "arguments": v58,
    "type": "function",
};
new Worker(f52, o70);
