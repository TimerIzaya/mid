new Int16Array(255);
Float32Array.name;
const v6 = new Float32Array(4023);
const v9 = new Float32Array(4);
const v12 = [v9,Float32Array,[Float32Array,[v9,Float32Array,v9],255,Float32Array,255],v6,4];
const v13 = `
    let v14;
    try { v14 = v6.reverse(); } catch (e) {}
    function F15(a17) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v18 = new F15(F15);
    with (v18) {
        try { v13(); } catch (e) {}
    }
    try { v14(); } catch (e) {}
    let v22 = 13834;
    Math.atan2(v22, v12);
    Math.cbrt(v12);
    Math.floor(v12);
    --v22;
    function f27() {
        const v28 = [155533.8602852358,2.0];
        for (const v33 of Array(19793)) {
            for (let i = 0; i < 5; i++) {
            }
            v28[658291203] = null;
            Math.g = Math;
        }
        return f27;
    }
`;
try { v13.toLocaleLowerCase(); } catch (e) {}
const v36 = v13.normalize();
const v37 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
const v38 = new Float32Array();
v38.concat(v37);
try { BigUint64Array.from("-2"); } catch (e) {}
try { v36.matchAll(255); } catch (e) {}
