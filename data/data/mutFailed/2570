class C3 {
    toString(a5, a6) {
        for (let v7 = 0; v7 < 20; v7++) {
            a5?.[2];
            [1000000000000.0,5.263932586038787e+307];
            [0.8249495858783964,580.6350700315534,3.0];
            [515.1008667896126,-819.2536439018703,780021.2582060865,5.0,-8.764379744233953,275186.84618363366,2.0];
            const o14 = {
                "maxByteLength": 2101,
            };
            const v16 = new SharedArrayBuffer(2101, o14);
            new BigInt64Array(v16, 2101);
        }
        return this;
    }
    static 5 = -2147483647;
    #g;
}
const v19 = new C3();
new C3();
new C3();
new Int16Array(-536870912, 1000000000.0, v19);
new BigInt64Array(38);
const v30 = new Int32Array(1);
for (let i34 = 0; i34 < 2; i34++) {
    ({"buffer":i34,} = v30);
}
const v40 = new Uint8ClampedArray();
for (let v41 = 0; v41 < 25; v41++) {
}
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    a44--;
    a46 / a46;
    const v49 = this.constructor;
    try { new v49(a45, a45, a46); } catch (e) {}
}
Object in v40;
