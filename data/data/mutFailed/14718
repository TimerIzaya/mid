const v1 = new Set();
new WeakMap();
const v12 = new Int32Array(3491);
function f15(a16) {
    try {
        new Int32Array(-12, 3, 4096);
    } catch(e21) {
    }
    return a16;
}
Uint8ClampedArray[Symbol.iterator] = f15;
new Uint8ClampedArray(1);
const v27 = v12.constructor;
for (let v28 = 0; v28 < 10; v28++) {
    (3491).__defineGetter__;
}
const v32 = Array(1024);
Uint8ClampedArray[2] = v27;
const v36 = Reflect.construct(Uint8ClampedArray, [Uint8ClampedArray]);
function f37(a38, a39) {
    const v40 = (a41, a42, a43, a44) => {
        'use strict';
        return a41;
    };
    return a38;
}
v36.constructor = f37;
const t27 = v36.constructor;
new t27(v32);
new Uint8Array(257);
const v48 = [-1e-15,-2.0,4.0];
const v49 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
function f50(a51) {
    Math.max(4.0, 4.0);
    return 4.0;
    return v32;
}
v49[Symbol.toPrimitive] = f50;
const v57 = [-5.0,-2.0,-1.5942587568933252e+308,1.0730723170600494e+307,0.0,-2.2250738585072014e-308,-446.9921213911738];
Object.defineProperty(v57, "toString", { enumerable: true, value: Array });
class C58 {
    [v57] = v49;
    static #c;
    #o(a60, a61) {
        Symbol.search;
    }
    set e(a65) {
        this[this] = v48;
        SharedArrayBuffer();
        let v71 = Uint8ClampedArray();
        const v72 = v71++;
        class C73 {
            static [v72];
        }
        try {
        } catch(e74) {
            function F75() {
                if (!new.target) { throw 'must be called with new'; }
            }
            function f77() {
                return e74;
            }
        }
        function F79(a81, a82) {
            if (!new.target) { throw 'must be called with new'; }
            this.b = "b";
            this.d = a82;
        }
        const v83 = new F79();
        const o86 = {
            ...v83,
            [v12]: 1403203884,
            set b(a85) {
            },
        };
    }
}
const v87 = new C58();
const v88 = new C58();
function f89(a90) {
    const v91 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v92 = Symbol.toStringTag;
    try { v92.codePointAt(v91); } catch (e) {}
    eval(v91.length);
    return v91;
}
v88.constructor = f89;
const v97 = new C58();
class C99 extends C58 {
    constructor(a101, a102, a103) {
        super();
        class C105 extends v88.constructor {
            static #a = this;
            static [v49] = this;
        }
    }
    4294967295;
    static #p(a107, a108) {
        v12[Symbol.search];
        return v49;
    }
}
let [v112,v113,,v114] = v1;
const o115 = {
};
Int16Array.from(1);
new C99(v87, v97);
function f121() {
    return f121;
}
class C122 extends f121 {
}
/2\111/gdis;
