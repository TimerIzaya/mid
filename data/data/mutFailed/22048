const v3 = 16 !== -127653931;
if (v3) {
    16 instanceof -127653931;
} else {
    v3[129] = -127653931;
}
[65536];
[5,1141184731];
[-26612];
new Uint16Array(8);
new Uint8Array(512);
new BigInt64Array(6);
function f17() {
}
const v18 = f17();
let v20 = 5;
v20++;
const v22 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v24 = new Uint32Array();
let v25 = -6n;
const v26 = v25--;
const v27 = [601759695];
const v28 = [1073741824,1073741823,1376142744,1073741825];
function f30(a31, a32, a33, a34) {
    a31.cause = f17;
    const v35 = a31.constructor;
    v35.BYTES_PER_ELEMENT = v35;
    try { v35(); } catch (e) {}
    let v38 = arguments.length;
    let v39 = v38++;
    v39--;
    function f41() {
        let v43;
        try { v43 = ("Vre").toLocaleLowerCase(); } catch (e) {}
        try { v43.padStart(); } catch (e) {}
        const v45 = ("Vre").charAt();
        v45[0] = v45;
        let v46;
        try { v46 = ("Vre").codePointAt(); } catch (e) {}
        v46 === v46;
        Float64Array.prototype = Float64Array;
        v22.length;
        const o72 = {
            "c": v25,
            "a": v46,
            [v26](a51, a52) {
            },
            [v26](a54, a55, a56, a57) {
                eval();
            },
            "c": v27,
            valueOf(a61, a62) {
            },
            n(a64, a65, a66) {
                Object.defineProperty(v46 = a65, 8, { configurable: true, set: f41 });
                return 522675525n;
            },
            1073741824: v24,
            [v25](a68, a69, a70, a71) {
            },
            "arguments": v20,
            256: a34,
        };
    }
    try { f41(); } catch (e) {}
    f41();
    try { Array(arguments); } catch (e) {}
    const v77 = Array(a34);
    v77[0] = v77;
    try { v77.findLast(); } catch (e) {}
    const v80 = new Uint8Array();
    try { v80.lastIndexOf(v20); } catch (e) {}
    const t72 = v80.buffer;
    t72.constructor = f17;
    try { Int32Array(); } catch (e) {}
    const v85 = new Int32Array();
    v85[3];
    for (let v87 = 0; v87 < 5; v87++) {
        const v88 = v87 !== v87;
        v88 || v88;
    }
    %OptimizeFunctionOnNextCall(f41);
    v80[0];
    function F91(a93, a94, a95, a96) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F91(65536, v18);
    try { v28["find"](..."find", a34, ...v27, ...v28, ...522675525n); } catch (e) {}
}
for (let v100 = 0; v100 < 10; v100++) {
    f30(v24);
}
%OptimizeFunctionOnNextCall(f30);
f30(v20);
