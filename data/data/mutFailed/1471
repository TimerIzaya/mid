function f3(a4, a5) {
    const o13 = {
        "a": "toString",
        "c": a4,
        __proto__: "toString",
        "f": a4,
        "e": "exp",
        "h": "toString",
        "d": a4,
        "g": "exp",
        get f() {
            [56531,268435441,-8,-11,518534635,-4294967297,0,-4294967296,39018,15];
            [-1073741824,-2140158839,54785,-2,-536870912,268435440];
            const v9 = [-65537,33641,2];
            a5[Symbol.iterator];
            return v9;
        },
        "e": "p",
        "d": "exp",
        ["p"]: "toString",
    };
    return o13;
}
function f14() {
    return "exp";
}
function f15(a16) {
    class C17 {
        constructor(a19) {
            let v20 = "atan2";
            try { a19[v20](); } catch (e) {}
            v20++;
        }
    }
}
Object.defineProperty(f3, -21993, { writable: true, configurable: true, get: f14, set: f15 });
const v23 = f3("exp", "exp");
const v24 = f3("exp", "exp");
new BigInt64Array(1000);
let v31;
try { v31 = Int32Array(7, Float32Array, Int32Array); } catch (e) {}
try {
    v24.g = Int32Array;
} catch(e32) {
}
0 < 0;
class C38 {
}
new Int16Array(64);
Int16Array.toString = f15;
new Int16Array(128);
const v43 = f3("toString", "exp");
const v44 = [-21993];
function f45(a46, a47) {
    try {
        v23.toString = v31;
    } catch(e48) {
    }
    return a46;
}
v44[Symbol.toPrimitive] = f45;
const v51 = [1073741823,-990538055];
const v52 = [64,9,3,14];
class C53 {
    static b = "p";
    static get h() {
        try {
            new f3("p", "toString");
        } catch(e56) {
        }
        f3 / this;
        super.c = v23;
        return v24;
    }
    c;
    #c;
    ["p"];
    g = v23;
    [v24];
}
function f58(a59, a60) {
    class C61 {
    }
    class C63 extends Date {
    }
    const v64 = new C63();
    v64.setMonth(C61, C63);
    v64.setUTCSeconds();
    return C63;
}
C53.toString = f58;
const v67 = new C53();
const v68 = new C53();
f3 && v68;
delete v51[v44];
const v72 = v43.c || v52;
f3("toString", v72);
%PrepareFunctionForOptimization(f3);
f3("toString", v72);
f3("toString", v72);
%OptimizeMaglevOnNextCall(f3);
f3("toString", v72);
const v77 = new C53();
class C78 extends f3 {
    constructor(a80, a81, a82) {
        Object.defineProperty(a80, -21993, { value: a81 });
        function f83() {
            function f84() {
            }
            const v85 = [f84,f84];
            const v88 = new Int8Array(9);
            class C89 {
                [v85];
                10;
                static c = v88;
            }
            new C89();
            return C38;
        }
        a82[Symbol.toPrimitive] = f83;
        super("exp", "p");
        a80[a82] = v67;
        try {
            super.getBigInt64(v77, "toString");
        } catch(e94) {
        }
        const v95 = /[.ma\Sc]/vdimsy;
        function f97() {
            function f98() {
                function F99(a101, a102) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.h = 0;
                    } catch(e103) {
                    }
                }
                const v104 = new F99(C78, F99);
                new F99(Int16Array, F99);
                new F99(a82, BigInt64Array);
                return v104;
            }
            return f98;
        }
        function f107(a108) {
        }
        Object.defineProperty(Int16Array, "toString", { enumerable: true, get: f97, set: f107 });
        v95.exec(Int16Array);
        class C113 {
        }
    }
    static [C53] = v23;
    static {
        Object.defineProperty(this, -21993, { value: this });
        function f115(a116, a117, a118) {
            const o119 = {
                4: this,
            };
            return o119;
        }
        f115(v77, v52, f115(v77, v44, v77));
        f115(v77, v52, v68);
    }
}
Object.defineProperty(C78, -21993, { enumerable: true, value: f45 });
new C78(v43, v67, v44);
new C78(C78, v51, v51);
new C78(C78, f3, v44);
const v126 = [-10,255];
function f127(a128, a129) {
    class C131 {
    }
    const v132 = new C131();
    const o138 = {
        [v132](a134, a135, a136) {
            super[268435439];
        },
    };
    return 128;
}
v126[Symbol.toPrimitive] = f127;
const v142 = new Uint8ClampedArray();
v126 * v142;
