function f0() {
    const o19 = {
        ["-802834079"](a5, a6) {
            super.b *= a5;
            ("-802834079")[268435439];
            return 256;
        },
        __proto__: "-802834079",
        [256](a9, a10) {
            function f11(a12, a13, a14) {
                'use strict';
                let v16;
                try { v16 = a13["fromCharCode"](a10); } catch (e) {}
                try { v16(...v16, a14, ..."fromCharCode", ..."fromCharCode", ...a14); } catch (e) {}
                return a12;
            }
            f11(a10, this, f11);
            return a10;
        },
    };
    o19[256] = o19;
    return o19;
}
f0();
const v21 = f0();
const v22 = f0();
new BigUint64Array(76);
const v28 = new Uint16Array(193);
const v31 = new Float64Array(4);
const v32 = v31[2];
42102 >> 42102;
function f37() {
    ("-536870912").normalize;
    ("-536870912").g;
    const v43 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v44 = 0; v44 < 5; v44++) {
        function f45() {
            try {
                v43.forEach();
            } catch(e47) {
                e47.a = BigUint64Array;
                e47.message = e47;
                e47.a = e47;
            }
            const v49 = Symbol.toPrimitive;
            Symbol.toPrimitive = Symbol;
            Symbol.for(v49.description);
            v49.description;
            Symbol.for();
            return v49;
        }
        f45();
        %OptimizeFunctionOnNextCall(f45);
    }
    new Uint16Array(209);
}
[140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
const v58 = [0.0,2.439947332797196];
const v59 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
const v61 = Symbol.toPrimitive;
v59[v61] = f37;
Object.defineProperty(v59, "valueOf", { writable: true, value: f37 });
const v63 = v59 <= "Z";
const v64 = v63 && v63;
const v66 = 36002 % 36002;
v66 >>> v66;
const v68 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f69() {
    v61[1095] = 36002;
    v58[536870887] = v31;
    return v28;
}
v68.toString = f69;
try { v68.toString(); } catch (e) {}
let v71 = 1000000000000.0;
-(v71--);
const v78 = new Uint8ClampedArray();
function f79() {
    return Symbol;
}
function f80(a81) {
    class C84 extends Int8Array {
        [12];
    }
}
Object.defineProperty(v78, "toString", { enumerable: true, get: f79, set: f80 });
function f85(a86, a87) {
    const o92 = {
        [a86]: Float64Array,
        4: 6,
        "b": a86,
        [v78](a89, a90, a91) {
        },
    };
    return o92;
}
f85(2);
f85();
function f95(a96) {
    a96 ^ a96;
    return 36002;
}
function f98(a99, a100) {
    const v101 = a100.length;
    v101 - v101;
    return f95;
}
try { f98(v28, "Z"); } catch (e) {}
const v105 = new Promise(f98);
v105[v68] += 36002;
const v108 = new BigInt64Array();
const v109 = v108?.entries;
try { new v109(); } catch (e) {}
try { new BigUint64Array(v66, v66, BigUint64Array); } catch (e) {}
const v114 = new BigUint64Array(127);
function f115() {
    const t116 = "Q8F";
    t116[2078209647] = [];
    return v32;
}
v114.constructor = f115;
try { v114.slice(v64, v22); } catch (e) {}
class C121 extends f37 {
}
for (const v122 in C121) {
}
const v124 = new Int16Array(3);
try { v124.join(v21); } catch (e) {}
let v127 = 10;
v127 >>> v127;
for (;
    (() => {
        const v129 = v127--;
        v129 >> v129;
        return v129;
    })();
    ) {
}
try { new Int8Array(76, 268435456, 268435456); } catch (e) {}
const v133 = [];
try { v133.findLast(v21); } catch (e) {}
function* f135(a136, a137) {
    yield* v133;
    return a136;
}
const v138 = new Int8Array();
let v139;
try { v139 = v138.entries(); } catch (e) {}
try { v139.next(); } catch (e) {}
try { Array.from(v58); } catch (e) {}
try { new Array(v108); } catch (e) {}
for (let v144 = 0; v144 < 10; v144++) {
    3811 >>> 3811;
    const v148 = Float64Array.of();
    const v149 = v148?.set;
    try { v149(4); } catch (e) {}
    try { new v149(3811); } catch (e) {}
    v148.toString = f37;
    new Date();
    const v155 = Array(36862);
    v155.f = v155;
    try { v155.sort(36862); } catch (e) {}
}
