new Uint16Array(9);
let v4 = Float64Array;
new v4(38);
new Uint8ClampedArray(38);
new BigInt64Array(257);
new Uint32Array(10);
const v20 = new Float32Array(226);
class C25 {
    static 7;
    static [-1] = "string";
    #n(a27) {
        v4 = this;
        a27.e >>>= -35417;
        const o31 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o31);
        return this;
    }
}
new C25();
v20();
const v38 = Array();
class C40 {
    static 9 = 9.187362692894364;
}
for (const v41 in C40) {
}
class C42 {
    #e;
    static {
        function f44(a45, a46) {
            return a45;
        }
        const o52 = {
            o(a48) {
                const o50 = {
                };
                return gc(o50);
            },
        };
        const o54 = {
        };
        const v56 = new Proxy(Uint32Array, o54);
        o52["o"](o52, Uint32Array, "o", "o", v56);
        const v59 = super[this];
        try { v59.join(-4096, -4096, v59); } catch (e) {}
        const o61 = {
        };
        [/LD/vds,-4096];
    }
    static f;
    m(a66, a67) {
        const o68 = {
        };
        const o71 = {
        };
        const v73 = new Proxy(Uint8Array, o71);
        v73.d = v73;
        new Proxy(this, o68);
        class C79 {
        }
        function f80() {
            let v81 = 1000000000000.0;
            v81--;
            class C84 {
            }
            new C84();
            const v86 = new C84();
            [C79,C84];
            [257828.6336153492,v86];
            [v86];
            class C90 extends C25 {
            }
            function f91(a92, a93) {
                return -4096;
            }
            Set.toString = f91;
            Set.constructor(Set);
            v38.constructor;
        }
        const v97 = "string" && -4096;
        +a67;
        Math.sqrt(v97);
        a66--;
        -509886178 << -509886178;
        return this;
    }
}
new C25();
new C42();
new C42();
const v111 = new WeakSet();
class C113 extends v111.constructor {
}
const v116 = new Uint16Array(512);
class C118 {
}
function F119(a121, a122) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(v116);
