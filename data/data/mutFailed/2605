class C3 {
    #toString(a5) {
        const t2 = 61873;
        t2[5] = this;
        try { new a5(a5); } catch (e) {}
        super["unscopables"] = this instanceof a5;
        return 47253;
    }
    #a;
    static #d;
    e = 61873;
    ["unscopables"] = 47253;
}
new C3();
new C3();
new C3();
class C18 {
    #valueOf(a20, a21) {
        const v23 = WeakMap();
        "m" > v23 ? "m" : v23;
        return this;
    }
    static set f(a27) {
        const o30 = {
            "maxByteLength": 129,
        };
        SharedArrayBuffer();
        const t26 = "m";
        t26();
    }
}
const v34 = new C18();
v34.MIN_VALUE = "valueOf";
const v35 = new C18();
const v36 = v35.constructor;
function f37() {
    for (let v38 = 0; v38 < 25; v38++) {
        Array(36862);
    }
    return v35;
}
v36.toString = f37;
new v36();
const v43 = v35.__lookupGetter__;
try { v43(); } catch (e) {}
const v45 = new C18();
function f46() {
    const v47 = [-0.23549034038133065];
    async function f48(a49, a50, a51, a52) {
        return await v47;
    }
    f48();
    return f37;
}
v45.valueOf = f46;
function f55() {
    return v45;
}
f55.d = "undefined";
f55.d = f55;
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    function f62(a63) {
        BigInt.prototype;
        return BigInt;
    }
    Object.defineProperty(a58, "toString", { writable: true, configurable: true, enumerable: true, value: f62 });
    function f66(a67, a68) {
        a61?.a;
        const o72 = {
            "maxByteLength": 512,
        };
        const v74 = new ArrayBuffer(512, o72);
        const v76 = new Uint8ClampedArray(v74);
        return v76;
    }
    a61.toString = f66;
    a60.valueOf();
    a61.MIN_VALUE = a61;
    const v78 = this?.g;
    try { new v78(v35, a60, a58, F56); } catch (e) {}
    a61.toLocaleString();
}
new F56("m", C18, v45, C18);
const v82 = new F56(v34, v35, "m", v34);
v82.toString = f46;
new F56(v82, v82, v35, v82);
