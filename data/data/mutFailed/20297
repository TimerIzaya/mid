try { Uint8ClampedArray.bind("number"); } catch (e) {}
new Uint8ClampedArray(16);
let v7 = 118;
v7++;
const v9 = /xe+/gudimsy;
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this?.__defineGetter__;
    try { new v15(v9, F10); } catch (e) {}
    try { a13.entries(); } catch (e) {}
    this.f = a13;
}
("128").fontsize();
const v21 = [];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this?.constructor;
    try { new v27(); } catch (e) {}
    this.c = Map;
    try {
        this.e = v21;
    } catch(e29) {
    }
    try {
        this.a = a25;
    } catch(e30) {
    }
    const v33 = new Int32Array(9);
    v33.reverse();
}
new Int32Array(v7);
new Float32Array(3344);
let v39 = 144;
const v40 = v39++;
v40 << v40;
class C42 {
    constructor(a44, a45) {
        const v46 = this?.constructor;
        try { new v46(a45, "number"); } catch (e) {}
        this.propertyIsEnumerable(C42);
    }
}
C42.prototype = C42;
function f49(a50) {
    return v40;
}
const v52 = Symbol.toPrimitive;
Symbol.for(v52.description);
C42[v52] = f49;
const v56 = Symbol.constructor;
v56.caller = v56;
-2 | -2;
function f59(a60, a61, a62) {
    const v65 = new Int8Array(a62, a60, a62);
    try { Int16Array.apply(128, v65); } catch (e) {}
    return f59;
}
%PrepareFunctionForOptimization(f59);
const v68 = new C42();
try { v68.hasOwnProperty("number"); } catch (e) {}
