function f0() {
}
const v1 = /(?: foo )a\b!/gudimsy;
new Uint8ClampedArray();
Math.atan2(-0.0, -0.0);
const v7 = /\1\2(a(?:\1(b\1\2))\2)\1K(?:a{5,1000000}){3,1000000}+/imsy;
const v8 = /p?/u;
let v9 = Float64Array;
v9 >>>= v9;
try { ("1O6N").localeCompare("bigint", "1O6N"); } catch (e) {}
const v13 = [f0,f0,v7];
const v14 = [v1,v8,v7];
new Uint32Array(5);
const o20 = {
    toString(a19) {
        return v9;
    },
};
const v21 = [f0];
/Sa[a]c/vdy;
const v23 = /\1(a)0Lsa(?!b)pm+/gvdis;
class C24 {
}
[WeakSet,WeakSet,WeakSet,WeakSet];
function f28() {
    const v30 = Array();
    v30[3] = 65535;
    return v30.pop();
}
const v32 = /a{,}/dms;
const v35 = new Array(127);
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a39;
    } catch(e42) {
    }
}
new F36(v8, v23, v35, v13);
const v44 = new F36(F36, v8, v21, v32);
new F36(v44, v1, v14, F36);
const v54 = new Int16Array(2);
class C58 {
}
const v59 = new C58();
class C60 extends C58 {
    constructor(a62, a63) {
        super();
        try {
            a62.__proto__ = C58;
        } catch(e64) {
        }
        new C58();
    }
}
const v66 = new C60(v59);
new C60(v66, v66);
const v68 = ["dgV"];
Reflect.apply(("undefined").replaceAll, v54, v68);
function f71() {
    function f72(a73) {
        try {
            const o74 = {
            };
        } catch(e75) {
        }
    }
    try {
    } catch(e76) {
    }
}
const o79 = {
    "type": "function",
};
new Worker(f71, o79);
