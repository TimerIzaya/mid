new Uint32Array(16);
Float32Array.g = Float32Array;
const v8 = new Float32Array(3509);
9 >>> 9;
new Float64Array(9);
let v14 = 932217726n;
v14++;
128n | 128n;
for (let v20 = 0; v20 < 32; v20++) {
    v8["p" + v20] = v20;
}
new Uint8ClampedArray(256);
24 >>> 24;
try { BigInt64Array.toString(); } catch (e) {}
const v28 = new BigInt64Array(24);
let v29 = 4;
v29--;
const v32 = Uint8Array?.constructor;
v32.name = v32;
try { new v32(Uint8ClampedArray); } catch (e) {}
new Uint8Array(v29);
const v39 = -9223372036854775807n | -9223372036854775807n;
-(-30326n);
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.__lookupGetter__;
    let v46;
    try { v46 = new v45(1466272906n); } catch (e) {}
    const v47 = this?.propertyIsEnumerable;
    v47.d = v47;
    try { new v47(-30326n); } catch (e) {}
    this.a = this;
    let v50 = 3872 >>> 3872;
    const v51 = v50++;
    Symbol.toPrimitive;
    const v54 = [];
    try { v54.findLast(this); } catch (e) {}
    parseInt(v54.toSpliced(v54));
    try {
        this.a = 3872;
    } catch(e59) {
    }
    try { v46.p(v51, v39, 128n, v28); } catch (e) {}
    const v62 = Symbol.iterator;
    const o71 = {
        [v62]() {
            let v64 = 10;
            const o70 = {
                next() {
                    v64--;
                    const v68 = v64 == 0;
                    const o69 = {
                        "done": v68,
                        "value": v64,
                    };
                    return o69;
                },
            };
            return o70;
        },
    };
}
try { new F43(); } catch (e) {}
const v73 = new F43();
const v74 = new F43();
v74.length;
new F43();
let v77 = 10000;
v77++;
62324 & 62324;
257 * -30326n;
const v85 = [257,257,257,55852,2];
try { v85.pop(); } catch (e) {}
const v88 = v85["entries"]();
try { v88.next(); } catch (e) {}
4294967295 * 4294967295;
function F92(a94, a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a95(); } catch (e) {}
    a96.f = a96;
    try {
        this.b = a95;
    } catch(e98) {
    }
}
new F92(4294967295, F43, v73);
new F92(62324, F92, v74);
try { new Symbol(); } catch (e) {}
const v103 = Symbol.toPrimitive;
function f104(a105, a106, a107) {
    return a106;
}
const v109 = new BigUint64Array();
try { ("copyWithin").sup(); } catch (e) {}
const v113 = v109[v32]()?.__defineSetter__;
try { new v113(v85, v85); } catch (e) {}
const o116 = {
    [v103]() {
    },
};
