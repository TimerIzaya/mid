const v0 = [];
const v1 = [-4.0,-535.7176340873409,-779.0875925238716,-1.7976931348623157e+308,-9.846661853026016e+307,-1.3913972090034862e+308,-1.7976931348623157e+308,-340.35814895197177,472801.1906603682];
const v2 = [102731.21440724912,1.7976931348623157e+308,-108030.93637701042,-1000000000000.0,-690.0135622797883,0.31404243888947403,1.7976931348623157e+308,0.0,0.36485129993203147];
const v3 = v1 | v0;
const v4 = v2 >>> v0;
try {
    v0.toString = v1;
} catch(e5) {
}
[1000000.0,2.2250738585072014e-308];
const v9 = new Uint32Array(64);
const v10 = Uint32Array !== v9;
if (v10) {
    function F11(a13, a14, a15, a16) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = 64;
        } catch(e17) {
        }
        try {
            this.g = v3;
        } catch(e18) {
        }
        try {
            this.a = v10;
        } catch(e19) {
        }
    }
    new F11(64, v4, v4, 64);
    new F11(64, v4, 64, v3);
    new F11(64, v3, v4, v3);
} else {
}
class C27 {
}
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this.constructor;
    try { new v34(); } catch (e) {}
    this.c = a32;
}
const v37 = new Uint8Array(268435440);
const v40 = [C27];
const v41 = new F30(v40, v37);
new Uint8ClampedArray(129);
v40.length = 18074;
const v45 = new Int8Array(257);
v41[h] <<= h;
v0[11] = v45;
let v48 = -64003;
const v50 = ++v48;
const v51 = v48 % v50;
let v52 = v48 * v48;
--v52;
(v51 % 129) >> v50;
new BigInt64Array(7);
const v60 = new Date();
function f61(a62) {
    const o65 = {
        "maxByteLength": 102,
    };
    const v67 = new ArrayBuffer(16, o65);
    new Float64Array(v67);
    return Date;
}
const v72 = [v60];
const o73 = {
    "arguments": v72,
    "type": "function",
};
new Worker(f61, o73);
