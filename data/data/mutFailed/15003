function f0() {
    const o9 = {
        [-4.0]: "symbol",
        1: -4.0,
        ..."symbol",
        set a(a5) {
            let v4 = this;
            super.f = v4;
            const v6 = [a5,"symbol",a5,v4 = 1073741824,1073741824];
            [[v6,v4,v6]];
        },
        "h": 1073741824,
        "e": -4.0,
        "b": -4.0,
        __proto__: "symbol",
    };
    o9.b = o9;
    return o9;
}
const v10 = f0();
const v11 = f0();
const v12 = f0();
-19812n;
function f17(a18, a19, a20) {
    const o38 = {
        p(a22, a23, a24, a25) {
            this[Symbol.isConcatSpreadable];
            return v10;
        },
        ...v11,
        "e": v11,
        "f": a20,
        toString(a30, a31, a32) {
            let v33;
            try { v33 = a32.resize(-4294967295n, a30); } catch (e) {}
            v33?.[v10];
            this[v12];
            try {
                v33();
            } catch(e37) {
            }
            return v11;
        },
    };
    return o38;
}
f17(f0, 19812n, v11);
f17(v11, -4294967295n, v10);
f17(19812n, -268435456n, v10);
const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
-4294967297n ^ -4294967297n;
const v48 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v49 = [601759695];
const v50 = [1073741824,1073741823,1376142744,1073741825];
function f52(a53, a54, a55, a56) {
    function f58() {
        try { ("Vre").toLocaleLowerCase(); } catch (e) {}
        -4294967295 >= -4294967295;
        let v63 = Float64Array;
        v63.b = v63;
        v63 = a54;
        b = v49;
        v45.length;
        try {
            v50.forEach(v63);
        } catch(e66) {
            e66.name;
        }
        const v68 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v70 = a55.toPrimitive;
        const o76 = {
            toString(a72, a73) {
                const v74 = a56 && v63;
                a72 *= v70;
                v74 <= v68;
            },
        };
        try { o76.toString(v68, a55); } catch (e) {}
        const o102 = {
            "c": -4294967297n,
            [522675525n](a80, a81) {
            },
            "c": v49,
            valueOf(a83, a84) {
            },
            "b": -4294967295,
            [-268435456n](a86, a87, a88, a89) {
                class C91 extends Date {
                    static get c() {
                        eval();
                    }
                }
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v48,
            ...v49,
            "type": "Vre",
            ..."Vre",
            valueOf(a96, a97) {
                return a96;
            },
            ...a54,
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a99, a100, a101) {
                return a99;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f58();
    const v105 = new Int8Array();
    try { v105.reduce(f52); } catch (e) {}
    const v107 = v105.buffer;
    try { v107.slice(a56, -268435456n); } catch (e) {}
    const v110 = v107.slice(2147483648);
    v110.maxByteLength = v110;
    %OptimizeFunctionOnNextCall(f58);
    const t123 = "find";
    t123.c = "find";
    let v112;
    try { v112 = v50["find"](..."find", a56, ...v49, ...v50, ...522675525n); } catch (e) {}
    v112 <= a55;
    return arguments;
}
for (let v114 = 0; v114 < 10; v114++) {
    const v116 = f52()?.toLocaleString;
    try { new v116(); } catch (e) {}
}
%OptimizeFunctionOnNextCall(f52);
f52(522675525n, 522675525n, -4294967297n, 522675525n);
