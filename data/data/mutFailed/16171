function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = this;
    try {
        this.f = 6;
    } catch(e3) {
    }
    try {
        this.b = 6;
    } catch(e4) {
    }
}
new F0();
const v6 = [40213,422333454,47387,65536,-51830];
v6[2] = v6;
const v7 = [65535,268435439,-9007199254740990,268435440,1024,19743,5,4];
const v8 = [v7];
v8.toLocaleString();
const v10 = new F0();
new v7();
Int16Array.length = Int16Array;
new Int16Array(26);
new Uint8Array(0);
-268435456 == -268435456;
const v21 = v10 ^ v8;
const v22 = Math.min(v10);
const o24 = {
};
new Proxy(Float32Array, 26);
v22 >>> v22;
const v28 = ++F0;
v28 / v28;
new Float32Array();
function f33(a34, a35, a36, a37) {
    a35 * a35;
    Float32Array == a36;
    arguments[2] = arguments;
    arguments.toString(v8, -128);
    function f42() {
        ("Vre").toLocaleUpperCase;
        ("Vre").fixed();
        const o51 = {
            "c": v8,
            valueOf(a49, a50) {
            },
            "e": -268435456,
        };
        const v52 = o51.valueOf();
        v52 * v52;
    }
    Int8Array.a = Int8Array;
    const v55 = new Int8Array();
    v55.buffer;
    %OptimizeFunctionOnNextCall(f42);
    ("find").strike();
}
f33();
%OptimizeFunctionOnNextCall(f33);
v7.pow(F0, -268435456);
class C61 {
    constructor(a63, a64) {
        const o67 = {
            "type": "minor",
        };
        o67.b = o67;
        gc(o67);
    }
}
~v21;
Math.clz32(v10);
Array(4087);
class C75 {
}
Uint32Array.prototype = Uint32Array;
new Uint32Array(255);
const v78 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
try { v78.includes(-128); } catch (e) {}
v78.fill();
