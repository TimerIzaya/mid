function f0() {
}
const v3 = new Uint8ClampedArray(2858);
try { v3.entries(); } catch (e) {}
Int8Array.BYTES_PER_ELEMENT = Int8Array;
new Int8Array(3974);
const v10 = new Float64Array(3974);
v10[31];
[-1.7477134376014694e+308,-2.2250738585072014e-308,-1000000000000.0,1e-15,1000.0,1.8155518754695628,-1.0,-1.7976931348623157e+308];
const v13 = [-1.7976931348623157e+308,-521541.7465111543,-Infinity,-2.220446049250313e-16];
[0.053511597941923617,0.18461380357296864,-1000000000.0];
class C15 extends f0 {
    static #c = v13;
    static #n(a17, a18) {
        new Int8Array(C15);
        new Uint8Array(1000);
        new Uint8Array(3791);
        return Uint8ClampedArray;
    }
    static 2409;
}
C15.length = C15;
const v28 = new C15();
new C15();
const v30 = new C15();
try { v30.propertyIsEnumerable(v30); } catch (e) {}
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F32;
    try {
        this.h = -2;
    } catch(e35) {
    }
    try {
        this.c = -2;
    } catch(e36) {
    }
    try {
        this.f = -2;
    } catch(e37) {
    }
}
new v28();
const v39 = new F32();
new F32();
~16;
new Uint32Array(16);
const v47 = new Int8Array(2);
try { v47.at(v39); } catch (e) {}
v47[Int8Array] = v47;
new Float64Array(571);
const v54 = new Uint8Array(10);
v54[0];
new Float64Array(2713);
-16;
const v62 = new Int32Array(16);
Uint8Array.e = Uint8Array;
const v65 = new Uint8Array(9);
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    a69 - a69;
    a70 + a70;
    try {
        this.c = v65;
    } catch(e73) {
    }
    try {
        this.e = v62;
        const v82 = new Uint8ClampedArray(16);
        v82[10] = v82;
        const v84 = -1322;
        v82[a70] = "536870889";
        try {
            new Uint8ClampedArray(v54);
        } catch(e86) {
        }
        const v88 = new Uint8ClampedArray(1322);
        try { v88.filter(a68); } catch (e) {}
        let v90 = v88[315];
        v90++;
        function F92(a94, a95, a96, a97) {
            if (!new.target) { throw 'must be called with new'; }
            const v98 = this?.constructor;
            try { new v98(1073741824n, 1322, a69, 1073741824n); } catch (e) {}
            this.a = this;
            try {
                this.a = "536870889";
            } catch(e100) {
            }
            try {
                this.b = a97;
            } catch(e101) {
            }
        }
        F92.e = F92;
        const v102 = new F92(1073741824n, 1073741824n, 257n, "6");
        v102.length = v102;
        const v103 = new F92(1073741824n, 257n, 257n, v84);
        const v104 = new F92(v90, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 | 3768;
        3768 >>> 3768;
        const v113 = new BigInt64Array(4046);
        const v114 = v113[123];
        v114 - v114;
        let v117 = -115;
        v117--;
        function f120(a121, a122) {
            a121 ^ a121;
            a121++;
            let v125 = a122 + a122;
            const v126 = v125++;
            -v126;
            v126 >> v126;
            try {
                v103.toString = a122;
            } catch(e129) {
            }
            Object.defineProperty(v104, v104, { configurable: true, enumerable: true, get: f120 });
            let o131 = {
                "d": a121,
                ...a121,
                get e() {
                    return a122;
                },
            };
            [,...o131] = v113;
            a122[4046];
            const o135 = {
                "maxByteLength": 3035,
            };
            o135.maxByteLength = o135;
            o135.n = v104;
            let v136 = 512;
            v136--;
            const v138 = v90--;
            v138 - v138;
            v88[v138] ||= v138;
            try { o135.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f120(4046, 3768);
        try { new Uint8ClampedArray(Uint8ClampedArray, a69, 4046); } catch (e) {}
        let v148;
        try { v148 = BigUint64Array.bind(f120); } catch (e) {}
        v148.d = v148;
    } catch(e149) {
    }
}
new F66(9, 16, 16);
2 >>> 2;
Int16Array.length = Int16Array;
const v155 = new Int16Array(2);
try { v155.lastIndexOf(16); } catch (e) {}
const v157 = v155.lastIndexOf(2.220446049250313e-16);
v157 >> v157;
