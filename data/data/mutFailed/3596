let v1 = Uint16Array;
let v2 = new v1(10);
[v1,v2] = v2;
const v3 = v1?.d;
const v7 = Math.sin(536870889);
Math.abs(v1);
const v9 = Math.min(v1);
v3 ^ 536870889;
-v3;
function f14(a15, a16) {
    v2 = arguments;
    v2[8] = v9;
    let v20 = -12;
    v20--;
    +arguments;
    arguments ** -31612;
    return arguments;
}
const v25 = f14(v3);
let v27 = -8.280565779793089e+307;
v27 = v7;
h = v25;
const o31 = {
    "maxByteLength": 2317,
};
const v33 = new ArrayBuffer(2317, o31);
new Float32Array(v33);
new Uint8Array(3833);
new Uint8ClampedArray(0);
new Uint8ClampedArray(256);
new Float32Array(256);
new Uint8Array(2);
const v54 = new Int8Array(180);
const v56 = v54.byteOffset;
const o63 = {
    "execution": "async",
    "type": "minor",
};
gc(o63);
class C69 {
    n(a71, a72) {
        super[-8n] = this;
        const o75 = {
            "maxByteLength": 47,
        };
        SharedArrayBuffer(3, o75);
        new Int8Array();
    }
}
try { Map.bind(Map, 6, Map, Map); } catch (e) {}
const v85 = new Int32Array(1024);
for (const v87 of v85) {
    const o90 = {
        "maxByteLength": 1293466293,
    };
    new SharedArrayBuffer(1796, o90);
}
v54[v56] = 5;
