let v4 = 16;
let v5 = -44704;
function f6(a7, a8, a9) {
    const o13 = {
        "g": "X",
        [a9]: a9,
        "f": "X",
        get e() {
            try {
                this.valueOf = a8;
            } catch(e11) {
            }
            ({"b":a7,"d":v5,"length":v4,} = "-1000709202");
            this[1024];
            return "-1000709202";
        },
        "d": a9,
    };
    return o13;
}
f6(1024, f6(v5, 1024, v5), 1024);
f6(v5, 1024, v4);
const o19 = {
};
BigInt64Array();
const v21 = [1073741824,1073741823,1376142744,1073741825];
try {
    v21.forEach(1024);
} catch(e23) {
    e23.message;
}
new BigInt64Array(7);
new Int8Array(1907);
new Uint32Array(42);
const v32 = [];
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v35 = `
            for (let v36 = 0; v36 < 5; v36++) {
                class C37 {
                }
                const v38 = new C37();
                function f39(a40, a41) {
                    const o46 = {
                        [v38](a43, a44, a45) {
                        },
                    };
                    const v52 = new Float32Array();
                    const v55 = new Uint32Array(5);
                    v55[v55] = v52;
                }
            }
        `;
        const o60 = {
            set e(a59) {
            },
        };
        function f61(a62) {
            a62 === a62;
            a62 <= a62;
            const o68 = {
                ...a62,
                p(a66, a67) {
                },
            };
        }
        [[]];
        eval();
        function f73(a74, a75, a76, a77) {
            const t70 = arguments.constructor;
            new t70(a76);
            return f73;
        }
    } catch(e81) {
    }
    try {
    } catch(e82) {
    }
    try {
    } catch(e83) {
    }
}
const v84 = new F33();
const v85 = new F33();
const v86 = new F33();
const v87 = [v32,v86];
for (let i90 = 0, i91 = 10; i90 < i91; i91--) {
    for (let v98 = 0; v98 < 5; v98++) {
        v98 >>> v98;
    }
}
const v101 = [v87,F33,[v84,v32,v85],v32];
try { v101.flat(); } catch (e) {}
const v105 = new Int8Array(10);
try { v105.find(v86); } catch (e) {}
new Uint8ClampedArray(268435440);
class C110 {
}
class C111 extends C110 {
}
new C111();
function f115(a116, a117, a118, a119) {
    Object.defineProperty(a116, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f115 });
    function F123(a125, a126, a127, a128) {
        if (!new.target) { throw 'must be called with new'; }
        this.c = a125;
    }
    new F123(-2.0);
    const o134 = {
        toString(a131, a132) {
            new Date(a116);
        },
    };
}
