const v0 = [];
const o2 = {
    "type": "minor",
};
o2.h = v0;
let v6 = 0.9755545601723612;
function F7() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 1163987790;
}
const v10 = new F7();
const o11 = {
    __proto__: v10,
    "c": v10,
};
let v13 = 2.535855584963116;
[-2.0,582569.0013219069,3.807573864814671,-6.553060391177051e+307,-1000.0,-2.220446049250313e-16,2.2250738585072014e-308,130.3321464732121,0.16201599238769493];
const v16 = [-143845.08737240266,-3.290512328362749,-2.2250738585072014e-308,-268.6912790146656,-1000.0,1.2741040152452369e+308,0.6672926126964404,-4.0,-2.220446049250313e-16,1000000000.0];
const v17 = [-1.7976931348623157e+308,190332.25692923483,0.5594120935794885,649.0332920928097,2.0];
function* f18(a19, a20, a21) {
    v17.length;
    function f23() {
        const o28 = {
            ..."D",
            ..."D",
            "c": "D",
            "h": "getHours",
            104: "D",
            get e() {
                return "getHours";
            },
            "d": a21,
            1: 4294967296,
            "e": a21,
            1073741824: a20,
            "f": "D",
            ...v0,
            __proto__: o2,
            "g": "D",
        };
        return o28;
    }
    f23();
    f23();
    f23();
    a20.__proto__;
    yield* v17;
    return v0;
}
f18(f18, v16, v0);
const v35 = [[]];
new Int8Array(10);
([])["concat"]("concat");
function f44(a45, a46, a47, a48) {
    function f49() {
        const v52 = Math.expm1("n");
        const v53 = Math.tanh("n");
        const o54 = {
            [v53]: v52,
        };
        return 3454;
    }
    f49();
    const v57 = eval();
    %OptimizeFunctionOnNextCall(f49);
    return v57;
}
do {
    (v13 = v6) !== -2147483647 ? v13 : -2147483647;
    v6++;
} while (9 < 9)
class C64 extends Map {
}
const v65 = new C64(v35);
const v66 = new C64(v65);
function f68(a69, a70, a71, a72) {
    v65["entries"](a71, ...v66, BigUint64Array);
    let [,v75,v76] = "entries";
    v76.PI %= v13;
    new Float64Array(3870);
    const v82 = new Uint32Array(3728);
    new Float32Array(3617);
    v82.next("entries");
    return a72;
}
for (let v87 = 0; v87 < 10; v87++) {
    f68();
}
%OptimizeFunctionOnNextCall(f68);
f68(Map, C64, BigUint64Array, BigUint64Array);
