class C3 {
    o(a5) {
        for (let i8 = 0; i8 < 6;) {
            const t3 = -15n;
            var c = t3(this, i8);
        }
        try {
            const o17 = {
            };
            this.fuck(o17, a5);
        } catch(e19) {
        }
        var d = a5;
        return 2061194468;
    }
    static #o(a21) {
        const v22 = this[2061194468];
        try { new v22(-2147483649); } catch (e) {}
        return -170746972;
    }
}
const v30 = new C3();
const v31 = new C3();
const v32 = v31?.constructor;
try { new v32(); } catch (e) {}
const v34 = new C3();
const v36 = new Date();
try { v36.setYear(10); } catch (e) {}
class C38 extends C3 {
    n(a40) {
    }
    #valueOf(a42, a43, a44) {
    }
    constructor(a46, a47) {
    }
    static #g = 2061194468;
    p(a50, a51, a52, a53) {
        a53 || a50;
        return v36;
        let v56 = -1279533571;
        Math.log1p(-2);
        const v60 = v56--;
        ~v34;
        v60 * v56;
        return v36;
    }
    #e = v30;
}
try { new C38(); } catch (e) {}
const v64 = new C38();
const v65 = v64?.constructor;
try { new v65(); } catch (e) {}
const v67 = new C38();
const v68 = v67?.constructor;
const v71 = new Uint8ClampedArray(1000);
v71.includes(undefined);
try { new v68(); } catch (e) {}
new C38();
try { new WeakMap(); } catch (e) {}
new WeakMap();
function f80() {
    const v81 = [f80,f80];
    let v83;
    try { v83 = Reflect.get(v81, Uint8Array); } catch (e) {}
    return v83;
}
new Int8Array([1024,1024]);
