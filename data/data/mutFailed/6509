function f0() {
    let v2 = -1e-15;
    let v3 = -Infinity;
    v3--;
    v2++;
    const o15 = {
        "c": v3,
        get b() {
            try {
            const t0 = "bigint";
            new t0(this, v2, v2, v2);
            } catch (e) {}
            const o10 = {
                "maxByteLength": SharedArrayBuffer,
            };
            const v12 = new f0(512, o10);
            new Uint32Array(v12);
            return "bigint";
        },
    };
    o15.toString = f0;
    return o15;
}
const v16 = f0();
v16.toString = f0;
const v17 = f0();
const v18 = f0();
Object.defineProperty(v18, Symbol.toPrimitive, { value: f0 });
function f21() {
    return f0;
}
f21.g = f21;
class C22 extends f0 {
    static get h() {
        const v24 = C22();
        try {
            f0();
        } catch(e26) {
        }
        return v24;
    }
    [v18] = f0;
    static d;
    3485466259;
}
const v27 = new C22();
v27[3485466259] = v27;
const v28 = new C22();
f21[3485466259] = v28;
new C22();
const v30 = [v18,v17,v16];
Object.defineProperty(v30, Symbol.toPrimitive, { writable: true, enumerable: true, value: f0 });
const v33 = [f21,f21,v27];
[f0,v33,v17,v33];
const v35 = [-3.0];
let v36;
try { v36 = v35.fill(v35); } catch (e) {}
try { v36.at(v30); } catch (e) {}
213 << f0;
213 | 213;
v35.length >>>= 213;
Math.sin(4294967295);
