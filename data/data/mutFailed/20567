function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 127;
    } catch(e3) {
    }
    try {
        this.c = 127;
    } catch(e4) {
    }
    try {
        this.f = 127;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 {
    [v7];
    c;
    toString(a11, a12) {
        return 77132706n;
    }
    constructor(a17, a18) {
        let v16 = this;
        v16 >>>= a17;
        let v19;
        try { v19 = a18.asin(); } catch (e) {}
        super.a >>>= v19;
    }
    static #valueOf(a21, a22) {
        function F23(a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a21;
            } catch(e28) {
            }
            try {
                this.e = a26;
            } catch(e29) {
            }
            try {
                this.c = this;
            } catch(e30) {
            }
        }
        new F23(a21, v6, a22);
        new F23(v8, a21, this);
        new F23(a21, v7, v6);
        return v7;
    }
    static 1 = v6;
}
const v34 = new C9(v6, v8);
const v35 = new C9(F0, v7);
const v36 = new C9(F0, v8);
const v37 = [v34,v36,v36,v8];
[v7,[v36,v37,v35,v37,v35],C9,v8,v34];
function f40() {
    return v7;
}
new Array(322);
F0 + v37;
const v50 = +-823575776;
-823575776 << -823575776;
Math.trunc(F0);
v50 * -823575776;
const v58 = [-5,null,536870889,-1055048739,-1055048739];
[536870889];
[v58,-1055048739,v58,536870889];
[-9.735515399340533e+307,163470.27825054666,8.355421851275215e+307,-7.141423016921272e+307,-486.05440736004505,1.6461069750642172e+308,1000.0,-1e-15];
[-394794.8057064981,379960.7389405947,2.220446049250313e-16,-3.0,-8.57088526932401,0.0];
[913972.2113151569,-1000000.0,-837.2084454107498,-9.199548421707273e+307,-1000000000.0,0.0];
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F70;
    this.c = this;
    try {
        this.c = 19793;
        try { Array.of(); } catch (e) {}
        const v75 = Array(19793);
        try { v75.map(this); } catch (e) {}
        for (const v77 of v75) {
        }
        const v78 = [];
        const v80 = Symbol.toPrimitive;
        v78[v80] = Array;
        const v81 = [v78,v78,v78];
        try { Symbol.apply(Symbol, v80); } catch (e) {}
        v81[Symbol.toPrimitive] = Symbol;
        [v81,v81];
        Uint16Array.toString = Array;
    } catch(e87) {
    }
    try {
        this.b = 19793;
    } catch(e88) {
    }
}
new F70();
class C90 {
    set b(a92) {
    }
}
function f94(a95, a96, a97, a98) {
    const o102 = {
        toString(a100, a101) {
        },
    };
}
const v103 = f94(Date);
try { v103.toString(); } catch (e) {}
