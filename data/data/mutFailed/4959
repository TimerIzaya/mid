function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 321962689;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
[1000000000000.0];
const v8 = [1e-15,-72780.0426452969,-869.5305581989414,-1000.0,0.3672309572712946,-9.941687319966054,0.5212223260286835,-2.220446049250313e-16];
const v9 = [-656.5166192865477,1.0,-1000000000.0,1000.0,4.0,4.0,1000000000.0,-1e-15];
new Int8Array();
([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(-1073741824, -27205);
class C16 extends F0 {
    constructor(a18, a19) {
        let v17 = this;
        super();
        v17 = a19;
        function* f20(a21, a22, a23) {
            const v24 = /b\x0f/guimy;
            /((x)(x)(x)\2(I))/gudisy;
            /f^/gvimsy;
            yield v6;
            return v24;
        }
        f20(a18, v8, v4);
    }
    static [v9] = v5;
    static 203;
    #c = v9;
    static {
        Object.defineProperty(this, -1073741824, { writable: true, enumerable: true, value: this });
    }
    #valueOf(a31, a32, a33) {
    }
}
new C16(v6, v4);
const v35 = new C16(v4, C16);
new C16(v35, v35);
const v41 = new Date(-1073741824);
v41.setMonth(-27205);
const v43 = [-536870912,-1454443390,-11,536870887];
let v44;
try {
const t0 = 536870888n;
v44 = t0(536870888n);
} catch (e) {}
v43[536870888n] *= v44;
v43["splice"](-650191005, -650191005, "splice");
[-4.00875209314862,-1e-15,99774.13543443684,1.574834012689156e+307,1.7976931348623157e+308,NaN,-1.0,-1.1408596058573283e+308,-8.848106537810969e+306,0.7338903342112758];
[420273.4127466616,-861502.4633025147,1.0];
[-1e-15,-1.0385013861320701e+307,7.152882313381387];
[/(?:a?)?U*/dim];
function f54(a55, a56, a57, a58) {
    a55.length = a55;
    a57?.findLast;
    const o60 = {
    };
    o60.c = o60;
    const o64 = {
        n(a62, a63) {
            return a56;
        },
    };
    o64.n(a58, o64);
    return Uint8Array;
}
for (let v66 = 0; v66 < 625; v66++) {
    f54(f54, v66);
}
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v74 = new Uint8ClampedArray(2147483647);
        class C75 {
        }
        const o76 = {
        };
        135.68951961804942 / (2147483647 + 135.68951961804942);
        function f80(a81) {
            return f80;
        }
        const v84 = [v74];
        const o87 = {
            "arguments": v84,
            "type": "function",
            set h(a86) {
            },
        };
        Worker(f80, o87);
    } catch(e89) {
    }
}
new F69();
