const v0 = [];
let v3 = -65537n;
const v4 = v3--;
const v5 = [-5.0,1.7976931348623157e+308,1000000.0,-1.3620188084703956e+307,1000000000000.0,-9.391278856282527,2.0,-5.5677252573786975e+306];
function f8(a9, a10, a11, a12) {
    return a9;
}
const v13 = f8();
-128 / -128;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v18 = [601759695];
function f19(a20, a21, a22, a23) {
    a21 * a21;
    a22 == a22;
    arguments[2] = arguments;
    arguments.toString(v18, -128);
    function f28() {
        ("Vre").toLocaleUpperCase;
        ("Vre").fixed();
        const o37 = {
            "c": v18,
            valueOf(a35, a36) {
            },
            "e": -268435456,
        };
        const v38 = o37.valueOf();
        v38 * v38;
    }
    Int8Array.a = a23;
    Int8Array.a = Int8Array;
    const v41 = new Int8Array();
    v41.buffer;
    %OptimizeFunctionOnNextCall(f28);
    ("find").strike();
}
function f45() {
    function f46(a47) {
        let v49 = -56134;
        Math.cosh(9.517691321349436e+307);
        v49 && a47;
        Math.acosh(v0);
        v49 >>> v0;
        --v49;
        Math.sin(v0);
        return 7n;
    }
    return f46;
}
function f57(a58) {
    const v60 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    new Uint8ClampedArray(v60, Uint16Array, Uint8ClampedArray);
}
Object.defineProperty(f19, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f45, set: f57 });
%PrepareFunctionForOptimization(f19);
const v65 = f19();
%OptimizeFunctionOnNextCall(f19);
f19(v65, f19, -128, v13);
const v67 = [-9.07466978546611,0.0,8.0705002464302,-1.4989855867404028e+308,105227.0662186027];
v67[2] = v67;
const v68 = [-Infinity,-6.287750782825623,2.2250738585072014e-308,5.0,-1.0,NaN,-779629.1301722595,0.7992764606295677,4.0,0.0];
v68[6] = v68;
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    try { a74.findLast(a74); } catch (e) {}
    try {
        this.c = a74;
    } catch(e76) {
    }
}
function f77() {
    return v4;
}
function f78(a79) {
    Object.defineProperty(v67, "length", { writable: true, enumerable: true, value: v0 });
}
Object.defineProperty(F69, "findLast", { configurable: true, enumerable: true, get: f77, set: f78 });
const v80 = new F69(v0, v5, F69, v0);
function f81(a82, a83) {
    function F84() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v86 = new F84();
    const v87 = new F84();
    [v87,v86,v87,v87];
    return v68;
}
v80.constructor = f81;
const v89 = v80?.constructor;
v89.findLast = v18;
v89.findLast = v89;
try { new v89(v80, 7n, v80, F69); } catch (e) {}
new F69(v67, v68, v67, v5);
new F69(v5, v5, v0, v68);
const v93 = [2147483649,-2147483647,-975339484,15,15];
try { v93.map(v0); } catch (e) {}
const v95 = [-63689095,-16,5,1149231368];
const v96 = v95?.filter;
try { new v96(v95); } catch (e) {}
[-1129742882,-256,-2051114000,-2147483648,4294967295,268435441];
for (let [i102, i103] = (() => {
        10 >> 10;
        return [0, 10];
    })();
    i102 < i103;
    i102 - i102, i102++) {
}
