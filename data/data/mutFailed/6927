const v0 = [];
const v3 = new Uint16Array(9);
function f4(a5, a6) {
    try {
        new Uint16Array(v3, 9, 9);
    } catch(e8) {
    }
    return v0;
}
v3.toString = f4;
const v9 = v3[4];
const v12 = new Int8Array(16);
v12.valueOf = f4;
try { v12.slice(v3, v12); } catch (e) {}
4096 | 4096;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v17 = new Int16Array(4096);
class C18 extends Uint16Array {
    valueOf(a20, a21) {
        v17[156] = super[4096];
        [2.0,0.13133910355094847,-5.192950836033179e+307,7.852419839126057,-1e-15,1e-15,0.33541661240372744,7.913786603798663,1000000000.0,-0.0];
        [-307274.16987159103,2.6738117604248816e+306,0.44896593660232287,-6.775585983777139,2.0,-2.220446049250313e-16,-0.0,602.9366124041594,754493.9885839084,1000000.0];
        [1.590835187084103,-42.50381444382549,-8.863167011045718,0.720895918907092,1.2825979204477733e+308];
        return this;
    }
    static #c = v0;
    [v3];
    static b = 16;
    static #f = Uint16Array;
}
new C18();
new C18();
new C18();
this[256] = v9;
try { this.decodeURIComponent(v12); } catch (e) {}
this[256] = BigUint64Array;
