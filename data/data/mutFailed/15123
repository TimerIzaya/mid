class C2 {
    constructor(a4) {
        function f5() {
            return f5;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f5 });
    }
}
new C2();
class C8 {
    static e;
    constructor(a10, a11) {
        this.b;
        return undefined;
        Int8Array.prototype;
        const v17 = ("undefined").localeCompare();
        const v18 = [v17,v17,v17];
        function f20(a21, a22, a23, a24) {
            const o25 = {
            };
            return o25;
        }
        const v27 = f20()[268435441];
        const v28 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
        const v29 = f20();
        let v31;
        try { v31 = ("iterator").strike(WeakSet, v27, v18, v29); } catch (e) {}
        v31.padStart(v28);
        -4.0 !== -1e-15;
    }
    static get d() {
        for (let v35 = 0; v35 < 16; v35++) {
        }
        const v37 = this[255];
        super.b;
        function f39() {
            return f39;
        }
        class C40 extends f39 {
        }
        try {
            function F41(a43, a44, a45) {
                if (!new.target) { throw 'must be called with new'; }
                return arguments;
            }
            const v48 = new F41();
            v48.e = Uint8ClampedArray;
            this.fuck(1073741824n, -1e-15);
        } catch(e51) {
        }
        return v37;
    }
}
new C8(C8, -416162.11869703303);
const v53 = new C8(-1e-15, -4.0);
new C8(C8, v53);
C8 *= Symbol.toPrimitive;
const v60 = new Uint8Array(Uint8Array);
function f61(a62, a63, a64, a65) {
    a64++;
    const v67 = a64++;
    v67 - v67;
    const v69 = v67 * v67;
    v69 >>> v69;
    a64 % a64;
    const o72 = {
        ...v60,
    };
    o72[2] = o72;
    const v73 = o72[2];
    return v73 >>> v73;
}
const o78 = {
    "maxByteLength": 10000,
};
new ArrayBuffer(3471, o78);
v60.indexOf(-4);
const v84 = /dAza[a][\cZ]*/guims;
function f85(a86, a87, a88, a89) {
    with (v84) {
        a89 %= a86;
    }
    return a86;
}
f85.prototype;
("undefined").normalize("NFC");
