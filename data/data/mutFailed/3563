function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 536870888n;
        function f4() {
            return f4;
        }
        this.a = 21939;
        const t8 = "Bl4";
        t8["Bl4"] = 3;
        class C7 {
            constructor(a9, a10, a11) {
                for (let v12 = 0; v12 < 32; v12++) {
                    a9["p" + v12] = v12;
                }
            }
        }
    } catch(e15) {
        function F17(a19) {
            if (!new.target) { throw 'must be called with new'; }
        }
        typeof (F17 >>> 536870887);
    }
    try {
        this.b = 21939;
    } catch(e22) {
        const v23 = /h\p{gc=Nd}/vdy;
        const v24 = /\xf0\x9f\x92\xa9a*/us;
        function F27(a29, a30, a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v33 = new F27(v23, F27, -23596, 1);
        const v36 = v33 | F27;
        let v37;
        try { v37 = this(v24, v36, v36); } catch (e) {}
        if (v37) {
            let v38;
            try { v38 = ("catch").codePointAt(v37); } catch (e) {}
            [,v38] = "iterator";
        } else {
            new WeakSet();
        }
    }
    try {
        this.g = 21939;
    } catch(e41) {
        class C42 {
        }
        function f43(a44, a45) {
            const o46 = {
                "c": a45,
                __proto__: C42,
            };
            o46.c;
            return o46;
        }
        f43(C42, C42);
    }
}
const v49 = new F0();
const v50 = new F0();
let v51 = new F0();
class C52 extends F0 {
    static [-2];
    constructor(a54, a55, a56, a57) {
        --a57;
        try {
            this.#m();
        } catch(e60) {
        }
    }
    static set c(a62) {
        super.g **= a62;
        class C63 {
        }
        const v64 = new C63();
        function f65(a66, a67, a68) {
            const o70 = {
                get b() {
                    return C63;
                },
                127: v64,
            };
            return f65;
        }
        super[a62] = v50;
    }
    /*
    constructor(a72, a73) {
        super();
        ({"b":F0,"c":v51,"g":a72,} = v50);
        v50 % v51;
        new Int32Array();
        new Date(Date);
        ~(10 && 10);
        F0?.[2147483649];
    }
    */
}
const v83 = new C52(F0, v50);
new C52(v51, v50);
new C52(v83, v49);
class C86 extends C52 {
    [v50];
    get a() {
        const v88 = super.a;
        try {
            v83.e = v88;
        } catch(e89) {
            new Uint32Array(e89);
            Math.acosh(65535);
        }
        return this;
    }
    static #h = v83;
}
new C86();
new C86();
new Set([2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614]);
for (let v101 = 0; v101 < 5; v101++) {
    const v102 = [1000000000.0,-5.576877862296471e+307,1000000000000.0,-311382.1661484719,1000000000.0];
    function f103() {
        return f103;
    }
    for (let i = 0; i < 5; i++) {
        Object.defineProperty(v102, "d", { configurable: true, get: f103, set: f103 });
    }
    let v106 = -2147483649 * v101;
    ++v106;
    Math.tan(v106);
    function F112(a114, a115) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v116 = new F112(-1986892121, -1986892121);
    let v117;
    try {
    const t0 = true;
    v117 = t0(F112, -1986892121, v116, -128);
    } catch (e) {}
    const v118 = `
    `;
    try { v117(v118); } catch (e) {}
}
new C86();
const o122 = {
    "type": "function",
};
function F123() {
    if (!new.target) { throw 'must be called with new'; }
    const v125 = this.constructor;
    try { new v125(); } catch (e) {}
    let v127 = -128;
    v127--;
    this.g = v127;
}
new F123();
const v130 = [748666.7832804511,3.0];
class C132 extends Float64Array {
    [v130];
}
new C132();
