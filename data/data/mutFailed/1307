const v2 = new Int8Array(5);
const v5 = new Uint8Array(10);
new Int8Array(12);
const v9 = [1000000000.0,-5.0,625.7403399479574,-942.0485124766018];
const v10 = [-1e-15,3.0,-490340.0450974547,-4.681312917566405,5.0,-8.681947153988407];
let v11 = [-1e-15,0.9650050566904838,-729117.8220138293];
class C12 extends Uint8Array {
    n(a14, a15, a16, a17) {
        ({"f":a15,"length":v11,} = a17);
        a16?.[64];
        const v19 = 10 > Int8Array;
        try { v2.copyWithin(a15, v11, v11); } catch (e) {}
        const v22 = [];
        Reflect.apply(a17.reverse, v9, v22);
        super[Int8Array];
        a16 = v5;
        this[v19 / h];
        return v22;
    }
    static 257 = v11;
    [12] = v10;
}
new C12();
new C12();
new C12();
const v34 = 11 - 11;
new Uint8ClampedArray(1643);
new BigUint64Array(16);
new BigInt64Array(5);
Math.cbrt(v34);
