const v2 = new Uint16Array(37);
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v2;
    } catch(e12) {
    }
    try {
        this.a = 16n;
    } catch(e13) {
    }
    try {
        this.h = 209;
    } catch(e14) {
    }
}
new F8(61283n, 61283n);
new F8(16n, 16n);
new F8(61283n, -15832662n);
new Uint16Array(209);
let v19 = 0;
do {
    v2 / F8;
    let v23 = -12274;
    Math.asin(v23);
    const v26 = +11;
    ~v26;
    (61283n ** v26) * 61283n;
    ++v23;
    61283n ** v26;
    v19++;
} while (v19 < 0)
const v37 = new Uint32Array(256);
class C38 extends Uint16Array {
    constructor(a40, a41) {
        super(a40, 209);
        a40 & Uint32Array;
        --a41;
        v2[0] = a40;
        v37[0] = v2;
        a40 <= Uint16Array;
    }
    d = Uint16Array;
    static 2041989440 = 209;
}
new C38(37, 209);
new C38(209, 256);
new C38(256, 37);
const v49 = new Date();
const v51 = [Reflect,Reflect,Reflect,Reflect];
Reflect.apply(v49.getDate, v49, v51);
