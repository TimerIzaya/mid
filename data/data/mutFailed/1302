const v0 = [];
function f1(a2) {
    return f1;
}
let v3 = Worker;
let o5 = {
    "type": "function",
};
let v6 = new v3(f1, o5);
[v6,f1,o5,v3] = v0;
let v7;
try { v7 = f1(); } catch (e) {}
v7[v6] = v3;
new Float32Array(8);
new Int16Array(9);
new Float64Array(176);
new Int16Array(2401);
new Uint16Array(2);
new Uint8Array(10);
-15 >> 8798;
const o32 = {
    "e": Uint16Array,
    [10]: 1000,
};
const v36 = /(x)(x)(x)\1/uis;
[v36,false,false];
const v39 = Symbol.iterator;
const o48 = {
    [v39]() {
        let v41 = 10;
        const o47 = {
            next() {
                v41--;
                const v45 = v41 == 0;
                const o46 = {
                    "done": v45,
                    "value": v41,
                };
                return o46;
            },
        };
        return o47;
    },
};
function f49(a50, a51, a52, a53) {
    const o64 = {
        [f49](a55, a56, a57) {
        },
        "f": a53,
        "type": "function",
        "h": "function",
        4294967295: a50,
        [v36](a59, a60, a61, a62) {
            super.test();
        },
    };
    return a51;
}
new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
3409 - 3409;
%PrepareFunctionForOptimization(2);
%OptimizeFunctionOnNextCall(f49);
f49(f49, 2, f49, v36);
const v71 = [1000];
const v74 = new Int8Array(1342);
Object.defineProperty(v74, v71, { writable: true, enumerable: true, value: v74 });
