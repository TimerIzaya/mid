const v3 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
const v4 = v3.concat(v3);
Math.exp(35164);
v4.sup(("-1723624938").slice(9, "g").normalize(), "-1723624938").toLocaleLowerCase();
const v14 = [5.0,0.182405391788796,-645363.8428729422,1.3157957075612785,585230.936476161,0.6392228022628571,-1000000.0];
[Infinity,1000000000.0,770366.0845741597,1.0,1.3595660839143696e+307,4.0,0.26028253552920866,-4.0,5.793998050983758e+307,-0.0];
const v17 = new BigInt64Array();
v17.copyWithin(-786307391);
const v21 = new Uint16Array(1657);
v21.reverse();
const v23 = [4.654170113347805,0.7101260087655671,20748.232638755348,-3.0,-755816.912294331,-1000000000.0];
try { v23.find(v14); } catch (e) {}
[1e-15,5.0,4.661455025661759,1000000000.0,1000000000.0,1000000000000.0,1000.0,1e-15,Infinity,4.0];
[2.2250738585072014e-308,0.48388590269267895,-32.32523924741781,-1.1457902950723085e+308];
[-4.6837218094002715,NaN,NaN,-1.0,1000000000.0,1000000000000.0];
-4 + -4;
function f31() {
    const o36 = {
        [-1000000.0]: 0.0,
        set e(a35) {
        },
    };
    return f31;
}
const v38 = [1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164];
function f39() {
    return f39;
}
("stack").normalize();
f39(f39());
const v46 = new Float64Array(1231);
const v47 = v46.indexOf(1231);
class C48 {
}
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    a51 >>> a51;
    a52 - a52;
    -a53;
    const v57 = this.constructor;
    try { new v57(a53, C48); } catch (e) {}
}
new F49(v47, C48, F49);
const v60 = f39?.constructor;
try { new v60(35164); } catch (e) {}
v38.constructor = f39;
v38.concat(f39, f39, v38, v38);
