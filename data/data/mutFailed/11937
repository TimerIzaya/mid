const v2 = new Uint8Array(127);
const v5 = new BigUint64Array(200);
const v8 = new Uint32Array(105);
[BigUint64Array,Uint32Array];
[200,127,v5];
[v8,200,127];
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    const v20 = (532142090).constructor;
    try { new v20(268435440n, a19); } catch (e) {}
    this.f = 268435440n;
}
const v22 = new F16();
const v23 = [-4096,-4096,-1073741824,4096,-2];
const o24 = {
    __proto__: F16,
    ...v23,
};
o24.pop(o24, v23);
const v26 = new F16();
v2 && v5;
class C29 {
    get b() {
    }
    #e;
    c = 3.2255150730772826;
}
const v31 = new C29();
function f32(a33, a34) {
    return a34;
}
v31.toString = f32;
const v35 = new C29();
class C36 {
    [v35];
    #toString(a38, a39, a40) {
    }
    [3.2255150730772826] = v31;
    188 = C29;
    static 3865;
    7 = v31;
    #g = C36;
}
try { C36.call(v31); } catch (e) {}
new C36();
let v43 = 5;
v43--;
function f45(a46) {
    const o49 = {
        ...200,
        5: v43,
        valueOf(a48) {
            return v22;
        },
        "g": v43,
    };
    function f50() {
        return f50;
    }
    const o51 = {
        __proto__: f50,
        "g": f50,
    };
    return v26;
}
%PrepareFunctionForOptimization(f45);
f45();
f45(3.2255150730772826, C36);
%OptimizeFunctionOnNextCall(f45);
f45(268435440n);
