class C3 {
    static toString(a5) {
        return "a";
    }
    static {
        const v10 = this.b;
        try {
            v10.h = 2.815049447113421e+307;
        } catch(e11) {
        }
        new Uint8ClampedArray(1105);
        new Int16Array(366);
        new Float64Array(1609);
        try {
            v10.__proto__ = this;
        } catch(e21) {
        }
    }
}
const v22 = new C3();
const v23 = new C3();
const v24 = new C3();
class C25 {
    static 129;
    constructor(a27, a28, a29, a30) {
        class C31 extends C3 {
            #a = v23;
            static #c;
            g = a29;
        }
        const v32 = new C31();
        new v32();
        new C31();
    }
    static #f = C3;
    static [24652] = 24652;
}
const v35 = new C25(C25, C25, C25, v23);
const v36 = new C25(v23, v23, C25, v35);
new C25(C3, v22, v22, v22);
class C38 extends C25 {
    #valueOf(a40, a41, a42, a43) {
        let v44 = 0;
        do {
            const o45 = {
            };
            try {
                o45.g = v36;
            } catch(e46) {
            }
            try {
                const o53 = {
                    n(a48, a49) {
                        return -12695;
                    },
                };
                o53.g = 2.815049447113421e+307;
                o53.h = 24652;
            } catch(e54) {
            }
            try {
                const o55 = {
                };
                o55.g = 2.815049447113421e+307;
                o55.h = 24652;
                o55.f = a40;
            } catch(e56) {
            }
            try {
                const o57 = {
                };
                o57.g = this;
                o57.h = 24652;
                o57.f = a40;
            } catch(e58) {
            }
            v44++;
        } while (v44 < 4)
        return v24;
    }
}
new C38();
new C38();
new C38();
for (let v65 = 0; v65 < 25; v65++) {
    const v66 = [601759695];
    const v67 = [1073741824,1073741823,1376142744,1073741825];
    function f69(a70, a71, a72, a73) {
        const v76 = new Uint8ClampedArray();
        Math.acosh(v76 & -2);
        let v81;
        try { v81 = v67["find"](..."find", a73, ...v66, ...v67, ...522675525n); } catch (e) {}
        return v81;
    }
    for (let v82 = 0; v82 < 5; v82++) {
        f69();
    }
}
