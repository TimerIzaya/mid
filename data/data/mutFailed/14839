const v2 = new Float64Array(835);
new BigInt64Array(1512);
new Uint16Array(10);
let v10 = -1024;
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F11();
const v18 = v17?.constructor;
let v19;
try { v19 = new v18(Uint16Array, v2, 1512, Float64Array); } catch (e) {}
const v20 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v21 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
Uint32Array.length = Uint32Array;
class C23 {
}
try { C23.toString(); } catch (e) {}
const v25 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v26 = [601759695];
v26[0] = v26;
for (let v27 = 0; v27 < 5; v27++) {
    v27 - v27;
    function f29() {
        const v32 = Array();
        let v33;
        try { v33 = v32.some(F11); } catch (e) {}
        v33.unshift();
        try {
            v20.forEach(Float64Array);
        } catch(e36) {
        }
        const o38 = {
            "c": v26,
            "arguments": v25,
            ...v17,
            "type": C23,
        };
        o38.e = o38;
        const v40 = [];
        function F41(a43) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C44 extends F41 {
            valueOf(a46, a47, a48, a49) {
                const v50 = this?.constructor;
                try { new v50(); } catch (e) {}
                a46 == a46;
                super[this] = F41;
            }
        }
        const v53 = new C44();
        const o60 = {
            set g(a55) {
            },
            [v40](a57, a58, a59) {
            },
        };
        o60.h = o60;
        for (const v61 in o60) {
            try { v53.valueOf(v61); } catch (e) {}
        }
        try { ("function").strike(); } catch (e) {}
        const v66 = [];
        try { v66.includes(f29); } catch (e) {}
        const v68 = [-2.0,272822757,"function"];
        const o69 = {
            __proto__: v68,
        };
        try { o69.toString(); } catch (e) {}
        v66[o69] &= 272822757;
        v10 %= -268435456;
        new Uint32Array(v21);
    }
    v19();
    %OptimizeFunctionOnNextCall(f29);
}
