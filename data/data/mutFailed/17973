function f2() {
    const v3 = [f2,f2];
    let v4;
    try { v4 = v3.every(f2); } catch (e) {}
    return v4;
}
const v5 = new Uint16Array(12);
const v6 = /[\cA](?!(a))\1/udims;
const v7 = [v6,v6,v6,v6,v6];
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e12) {
        for (let [v13,v14] of a10) {
        }
    }
    -256n >> -256n;
    ~F8;
    if (f2 === v5) {
        Uint16Array ^ F8;
    } else {
        this.h;
    }
    try {
        new F8();
    } catch(e22) {
    }
}
new Int32Array(v7);
new Float64Array(2057);
v7[1073741824];
v7.length /= 2057;
const o33 = {
    "execution": "async",
    "type": "minor",
};
gc(o33);
[7,-9007199254740992,-1,-580512353];
const v36 = [0,268435440,4096,1434242614];
[-4096,-9223372036854775808,4294967295,536870889,-9007199254740990,60905,57133];
for (let v38 = 0; v38 < 32; v38++) {
    v5["p" + v38] = v38;
}
const v41 = [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
class C44 {
}
const v45 = new C44();
class C46 extends C44 {
    constructor(a48, a49, a50) {
        super();
        let v52 = 6;
        let v53 = 3;
        const v54 = ++v53;
        Math.acos(v36);
        const v56 = v54 << v36;
        +v36;
        v52++;
        Math.ceil(v56);
        Math.hypot(a50);
    }
    static #p(a62, a63, a64, a65) {
        [..."A",v45];
    }
}
v41.concat([-2,-2,-2,-2,-2], [v41,-2], true);
