function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "h", { writable: true, configurable: true, value: F0 });
    function F3(a5, a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        function f8(a9, a10) {
            function f11() {
                const v13 = new Date(5);
                v13.getFullYear();
                return Date;
            }
            return this;
        }
        this[Symbol.iterator] = f8;
        const v19 = new Float32Array(this, a7, a7);
        v19.valueOf = f8;
        const v21 = new Uint8Array(268435440);
        new Uint8ClampedArray(129);
        v21[6] = v19;
    }
    new F3();
    try {
        this.h = 5;
    } catch(e26) {
    }
    try {
        this.g = 5;
    } catch(e27) {
    }
    try {
        this.a = 5;
    } catch(e28) {
    }
}
new F0();
new F0();
new F0();
new BigUint64Array(2517);
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
}
const v43 = new F37();
const v44 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C45 {
}
const v47 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v48 = [601759695];
function f50() {
    let v53 = Float64Array;
    v53 = BigUint64Array;
    b = v48;
    v44.length;
    try {
        v44.forEach(BigUint64Array);
    } catch(e56) {
    }
    const v57 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    let v59 = Symbol.toPrimitive;
    const o65 = {
        toString(a61, a62) {
            const v63 = F0 && BigUint64Array;
            a61 *= v59;
            v63 <= v57;
            return f50;
        },
    };
    const o86 = {
        "c": -4294967297n,
        [522675525n](a68, a69) {
        },
        "c": v48,
        valueOf(a71, a72) {
            return a71;
        },
        "b": -4294967295,
        [-4294967297n](a74, a75, a76, a77) {
        },
        "e": -268435456,
        "maxByteLength": -4294967295,
        "arguments": v47,
        ...v43,
        [v59]() {
        },
        "type": C45,
        ..."Vre",
        valueOf(a80, a81) {
            return 2517;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        toString(a83, a84, a85) {
            return C45;
        },
        5: -4294967295,
        6: -268435456,
    };
    v59 = v53;
    new Float32Array(1334);
    new Float64Array(3);
    new Uint16Array(2);
}
new BigUint64Array(2826);
new Uint32Array(9);
function F102() {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f50;
    const v108 = Array(19793);
    v108[11927] = Array;
    for (const v109 of v108) {
    }
    const v111 = new Uint32Array(Uint32Array);
    for (let v112 = 0; v112 < 5; v112++) {
        v111[v112] = this;
    }
}
new F102();
function F115() {
    if (!new.target) { throw 'must be called with new'; }
    const o119 = {
        "maxByteLength": 1073741824,
    };
    function F120() {
        if (!new.target) { throw 'must be called with new'; }
        const v122 = this.constructor;
        let v124 = -16n;
        function f125() {
            v124 *= -1911645276n;
            return F120;
        }
        f125();
        new v122(f125, f125());
    }
}
[F115];
const v137 = [1557591051,8137,536870888,-9223372036854775808];
const v138 = v137 * v137;
const v139 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
function f140() {
    const o145 = {
        __proto__: v139,
        [v138](a142, a143, a144) {
        },
    };
    function f146() {
        return f50;
    }
    function f147(a148) {
        function F149() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C152 extends F149 {
        }
    }
    Object.defineProperty(o145, Symbol.toPrimitive, { writable: true, get: f146, set: f147 });
    o145.copyWithin(o145, o145);
    return o145;
}
f140();
const v157 = new BigInt64Array(6);
try {
    v157.findLast(F115);
} catch(e159) {
}
