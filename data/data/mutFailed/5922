class C3 {
    constructor(a5) {
        const v6 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
        v6[7] = a5;
        const o7 = {
        };
        Object.defineProperty(o7, "setPrototypeOf", { value: this });
        const v9 = new Proxy(v6, o7);
        v9[7] = o7;
        v9[7] = o7;
    }
    static valueOf(a14, a15) {
        /0\x3z/gsy;
        new Int8Array();
        const v20 = this.constructor;
        try { new v20(3n); } catch (e) {}
        /vm\x3z/d;
        /Tza\b!/gvis;
        return this;
    }
    #c;
}
function f24(a25) {
    new Uint16Array(5);
    return a25;
}
Object.defineProperty(C3, "constructor", { value: f24 });
new C3(-128);
new C3(0);
new C3(0);
Symbol.toPrimitive.description;
new BigUint64Array(10);
new BigInt64Array(5);
const v43 = new Float64Array(82);
v43 - v43;
10 <= 10;
const o46 = {
};
function F47(a49) {
    if (!new.target) { throw 'must be called with new'; }
}
const v50 = new F47(F47);
new Uint16Array(173);
class C54 {
}
new C54();
function f56(a57, a58) {
    function f60(a61, a62) {
        return f60;
    }
    const o65 = {
        "type": "function",
    };
    Object.defineProperty(o65, "arguments", { writable: true, configurable: true, value: v50 });
    new Worker(f60, o65);
}
C3.constructor;
const v68 = [];
v68.toString = f56;
v68.toString();
