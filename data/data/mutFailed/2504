let v0 = [1073741824,-261893641,2,15,12,64];
function f1(a2) {
    v0 = a2;
}
Object.defineProperty(v0, "g", { configurable: true, set: f1 });
const v3 = [10,255];
const v4 = [-470257110,-65535,536870888,128,268435440,-12,-536320537];
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f1;
    a8.g = a8;
    try {
        this.h = v0;
    } catch(e9) {
    }
    try {
        this.e = a8;
    } catch(e10) {
    }
    try {
        this.f = a8;
    } catch(e11) {
    }
}
const v12 = F5.caller;
const v13 = new F5(v0, v4);
function f14() {
    return v12;
}
function f15(a16) {
    function f17() {
        const o22 = {
            [-1000000.0]: 0.0,
            set e(a21) {
            },
        };
        return f17;
    }
}
Object.defineProperty(v13, "g", { writable: true, configurable: true, enumerable: true, get: f14, set: f15 });
const v23 = new F5(v4, v0);
const v24 = v23?.constructor;
try { new v24(v4, v13); } catch (e) {}
const v26 = new F5(v0, v3);
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    function f32(a33) {
        const o35 = {
            "a": -7498n,
        };
    }
    Object.defineProperty(this, "f", { writable: true, set: f32 });
    a31[2] = v24;
    a31[2] = a31;
    this.f = this;
    try {
        this.f = v23;
    } catch(e36) {
    }
    try {
        this.c = v13;
    } catch(e37) {
    }
}
new F27(v13, v3, v4);
new F27(v13, v3, v23);
const v40 = new F27(v26, v4, v4);
v40.b = v40;
class C41 {
    constructor(a43) {
        const v45 = Symbol.iterator;
        const o47 = {
            [v45]() {
            },
        };
    }
}
const v48 = C41?.constructor;
try { new v48(C41); } catch (e) {}
for (let i52 = 0;
    (() => {
        const v54 = i52 < 10;
        BigUint64Array.prototype = BigUint64Array;
        new Int8Array(BigUint64Array);
        return v54;
    })();
    i52++) {
    i52 % i52;
    try {
    const t0 = -44394n;
    t0();
    } catch (e) {}
    -(-1802551371);
    !-1802551371;
}
