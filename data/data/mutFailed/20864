const o2 = {
    "c": 2.0,
};
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
}
const v6 = new F3(o2, F3, 2.0);
try { v6.search(c); } catch (e) {}
const v11 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v12 = [601759695];
const v13 = [1073741824,1073741823,1376142744,1073741825];
function f15(a16, a17, a18, a19) {
    function f21() {
        const o28 = {
            "g": -4294967295,
            ...v11,
            ..."Vre",
            "c": v13,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a26, a27) {
                return a26;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    f21();
    %OptimizeFunctionOnNextCall(f21);
    let v31;
    try { v31 = v13["find"](..."find", a19, ...v12, ...v13, ...522675525n); } catch (e) {}
    v31 <= a18;
    return arguments;
}
%OptimizeFunctionOnNextCall(f15);
[-1.0,-2.220446049250313e-16,-1.7976931348623157e+308,1e-15];
[7.433615741698208,-Infinity,Infinity,1000000000000.0,-1000000.0,-1000000000000.0,1e-15,-1e-15];
[1.4921130326083394e+308,0.4035995182286354,0.0017487536933182835];
const v41 = new undefined(180);
v41[v41.byteOffset] = 5;
new BigUint64Array(3);
function F47() {
    if (!new.target) { throw 'must be called with new'; }
    class C53 {
        #c = "e";
        #p(a55, a56) {
            [536870912];
            [a55,[a55,536870912,a55,a55]];
            const o60 = {
            };
            try {
                o60.g = "e";
            } catch(e61) {
            }
            try {
                const o62 = {
                };
                o62.g = "e";
                o62.d = a56;
            } catch(e63) {
            }
            try {
                const o64 = {
                };
                o64.g = "e";
                o64.d = a56;
                o64.b = "e";
            } catch(e65) {
            }
            try {
                const o66 = {
                };
                o66.g = "e";
                o66.d = a56;
                o66.b = "string";
            } catch(e67) {
            }
            return "e";
        }
    }
    new C53();
    const v69 = new C53();
    const v70 = new C53();
    const v72 = new Set();
    class C73 {
        static #a;
        static #d = "string";
        static #valueOf(a75, a76) {
            const o77 = {
            };
            try {
                o77.g = a75;
            } catch(e78) {
            }
            try {
                const o79 = {
                };
                o79.a = a75;
                o79.d = Set;
            } catch(e80) {
            }
            try {
                const o81 = {
                };
                o81.a = a75;
                o81.d = Set;
                o81.e = "string";
            } catch(e82) {
            }
            try {
                const o83 = {
                };
                o83.a = a75;
                o83.d = Set;
                o83.h = a76;
            } catch(e84) {
            }
            return this;
        }
    }
    new C73();
    new C73();
    let v87 = new C73();
    const t127 = "string";
    t127[2] *= 536870912;
    new C73("e", v70, v87, v87, v69);
    try { v87.p(v72); } catch (e) {}
    ++v87;
    Array(19793).unshift(19793);
}
new F47();
new Int32Array(128);
new Int8Array(933);
class C99 {
    static {
        for (let v101 = 0; v101 < 5; v101++) {
            function f102(a103, a104, a105, a106) {
                class C109 {
                }
                new gc();
                function f112() {
                    new Int8Array(1073741823);
                    return f112;
                }
                new Date(this, v101, 84, f102, v101, Float32Array);
                new Uint8ClampedArray();
                class C121 {
                    static ["name"];
                }
                return a103;
            }
            f102();
        }
    }
}
