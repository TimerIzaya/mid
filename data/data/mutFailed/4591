const v2 = new Int32Array(16);
const v5 = new Int8Array(10);
const v8 = new Uint32Array(1000);
class C9 {
    static #valueOf(a11, a12, a13, a14) {
        this[a11] ||= a14;
        super[a12] = this;
        const v15 = [-10518,-65536,853724848,-4294967295,9223372036854775807];
        const v16 = [4294967296,-65536,257,-65537,29523,-30367,127,1928535750];
        [272514340,1009368210,-1,-7,-1238126923,-2,-61464];
        try {
            super.min(Int8Array);
        } catch(e19) {
        }
        try {
            v16.forEach(a13);
        } catch(e21) {
        }
        const o23 = {
            0: "1ya",
            162: "1ya",
        };
        return v15;
    }
    [Int8Array] = 16;
    static h;
    static {
    }
    constructor(a26, a27, a28, a29) {
        a29.match(a28);
    }
}
let v31 = new C9();
const v32 = new C9();
const v33 = new C9();
function f34(a35, a36) {
    const o48 = {
        "d": v2,
        "b": Int8Array,
        2724: 16,
        "e": v5,
        4: Int32Array,
        "h": a35,
        "g": a35,
        set f(a38) {
            v31++;
            const o40 = {
            };
            try {
                o40.b = v32;
            } catch(e41) {
            }
            try {
                const o42 = {
                };
                o42.b = v32;
                o42.f = Uint32Array;
            } catch(e43) {
            }
            try {
                const o44 = {
                };
                o44.b = v32;
                o44.f = Uint32Array;
                o44.h = a38;
            } catch(e45) {
            }
            try {
                const o46 = {
                };
                o46.b = v32;
                o46.f = Uint32Array;
                o46.d = a36;
            } catch(e47) {
            }
        },
    };
    return o48;
}
const v49 = f34(10, v33);
f34(v49, f34(v49, v8));
const v55 = new Date();
function f58() {
    function f59(a60, a61, a62, a63) {
        return a61;
    }
    f59(f59, f58, f59, f58);
    return f58;
}
f58();
const v66 = new Set();
v66.add(v55);
let [v68,,...v69] = v66;
v68.setUTCFullYear(v69, Set, -256);
const v71 = new Uint8ClampedArray(255);
v71[3] = Uint32Array;
