function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 59277;
    } catch(e3) {
    }
    try {
        this.a = 59277;
    } catch(e4) {
    }
    try {
        this.h = 59277;
    } catch(e5) {
    }
}
function f6() {
    function f7(a8) {
        const v11 = new Int32Array(497);
        return v11;
    }
    return f7;
}
Object.defineProperty(F0, Symbol.toPrimitive, { configurable: true, get: f6 });
const v14 = new F0();
const v15 = new F0();
const v16 = new F0();
const v17 = [v16,F0];
const v18 = [v16,v17];
function f19() {
    return Symbol;
}
function f20(a21) {
    Math.atan2(-(!9223372036854775807), v18);
}
Object.defineProperty(v18, "toString", { writable: true, configurable: true, enumerable: true, get: f19, set: f20 });
const v28 = [v18,v15,v16,v14];
const v30 = new WeakSet();
function f31(a32, a33, a34, a35) {
    a34.toString = f19;
    a35[Symbol.toPrimitive] = f20;
    const o59 = {
        [v28]: v28,
        [a32]: a35,
        "c": v30,
        "e": v17,
        [a34]: v14,
        "b": a32,
        __proto__: a34,
        m(a39, a40, a41, a42) {
            function f43(a44, a45, a46) {
                Symbol.iterator;
                const o57 = {
                    [v16]() {
                        let v50 = 10;
                        const o56 = {
                            next() {
                                v50--;
                                const v54 = v14 == 0;
                                const o55 = {
                                    "done": v54,
                                    "value": v50,
                                };
                                return o55;
                            },
                        };
                        return o56;
                    },
                };
                return a32;
            }
            f43(v18, v30, a42);
            return F0;
        },
    };
    return o59;
}
f31(v18, f31(v28, v16, v28, v16), v30, v14);
f31(v17, WeakSet, v14, v16);
function F71(a73, a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = this.constructor;
    let v78;
    try { v78 = new v77(a73, a76); } catch (e) {}
    typeof v78 === "symbol";
}
const v82 = new F71(65537, 1073741824, 0.19443453377416953, F71);
new F71(Date, 0.19443453377416953, 1073741824, v82);
