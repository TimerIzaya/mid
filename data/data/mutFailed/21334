const v2 = new Int32Array(170);
const v5 = new Int32Array(257);
const v8 = [v5,215];
const v9 = [257,Int32Array,v2];
[this,Int32Array,170,v9];
%VerifyType(v5);
const v12 = new Uint8Array(215);
class C13 extends Int32Array {
    [Int32Array] = v2;
    static [Uint8Array];
    c;
    static [v12] = Int32Array;
    static 16;
    255 = v5;
    static #h = 215;
    10;
    #a = 215;
    #e;
    34 = 215;
    static [Int32Array] = Int32Array;
    [v5];
    static e = Uint8Array;
}
new C13();
new C13();
new C13();
const v21 = [[]];
class C23 extends Map {
}
const v24 = new C23();
const v25 = new C23(v21);
const v26 = new C23(v25);
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v31 = new Uint32Array();
const v33 = [601759695];
let v34 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    v34 = Reflect.construct(C13, [], C13);
    v9 && C23;
    try { a37.toLocaleString(); } catch (e) {}
    const v46 = a37?.constructor;
    let v47;
    try { v47 = v46(); } catch (e) {}
    try { v46(); } catch (e) {}
    const v50 = arguments.length;
    Object.defineProperty(v24, "e", { configurable: true, enumerable: true, value: f36 });
    const v52 = v25["entries"](a39, ...v26, BigUint64Array, ..."entries", a38, v50);
    new Float32Array();
    class C56 {
    }
    class C57 {
    }
    const v59 = Symbol.toStringTag;
    v25[v59] = v59;
    function f60() {
        let v62;
        try { v62 = ("Vre").charAt(4096); } catch (e) {}
        try { v62.lastIndexOf("Vre", a37); } catch (e) {}
        let v64;
        try { v64 = ("Vre").codePointAt(v29); } catch (e) {}
        v64 - v64;
        v64 ^ v64;
        let v67 = Float64Array;
        v67 = a38;
        let v68 = v29.length;
        const v69 = v68++;
        try {
        } catch(e70) {
        }
        const o98 = {
            268435439: v33,
            ..."e",
            n(a72, a73) {
                return a73;
            },
            m(a75) {
                return v69;
            },
            m(a77) {
                return Map;
            },
            [f60]() {
            },
            ["entries"](a80, a81) {
            },
            valueOf(a83, a84) {
                return a83;
            },
            get h() {
                return v29;
            },
            [v34](a87, a88, a89) {
            },
            "toPrimitive": v47,
            get f() {
                return this;
            },
            [-4294967297n](a92, a93, a94, a95) {
                eval(a94);
            },
        };
        return v25;
    }
    f60();
    const v101 = Array();
    let v102;
    try { v102 = v101.findLast(f36); } catch (e) {}
    v101.unshift("entries", v52, "entries", v102);
    let v105;
    try { v105 = Int8Array.of(); } catch (e) {}
    try { v105.join(v21, v105); } catch (e) {}
    const v107 = new Int8Array(v33);
    v107.c = v107;
    const v109 = v107.buffer.slice();
    try { Int32Array(v109, arguments, -4294967297n); } catch (e) {}
    function f112(a113, a114, a115, a116) {
        return a115;
    }
    const v117 = new Int32Array();
    const v118 = v117[3];
    v118 + v118;
    for (let v120 = 0; v120 < 5; v120++) {
    }
    try { v34["find"](..."find", a40, ...v33, ...v34, ...522675525n); } catch (e) {}
}
for (let v123 = 0; v123 < 10; v123++) {
    f36(v31);
}
%OptimizeFunctionOnNextCall(f36);
f36(Map, Map, v26, v26);
%VerifyType(Int32Array);
Object.defineProperty(v8, 65536, { configurable: true, enumerable: true, value: 170 });
