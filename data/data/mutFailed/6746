const v1 = new Map();
-53893n ^ -53893n;
const v6 = 1464155946n ^ 1464155946n;
1464155946n | 1464155946n;
/kW/uisy;
const v9 = /\1(a)/gudms;
/bHs(?:a?)?/gvimy;
const v13 = new BigUint64Array(255);
204 ^ 204;
Int16Array[1] = v6;
try { new Int16Array(204, 204, -11n); } catch (e) {}
try { new Int16Array(Int16Array, Int16Array, BigUint64Array); } catch (e) {}
const v19 = new Int16Array(204);
try { v19.propertyIsEnumerable(204); } catch (e) {}
let v21;
try { v21 = v19.find(v9); } catch (e) {}
const v23 = 1000 >> 1000;
try { Int32Array.bind(Int32Array); } catch (e) {}
const v26 = new Int32Array(1000);
function f27() {
    function f28(a29) {
        ArrayBuffer[3991] &= v23;
        return -11n;
    }
    return f28;
}
Object.defineProperty(v26, "constructor", { get: f27 });
v26.g = v26;
let v31;
try { v31 = v26.slice(1000, v19); } catch (e) {}
try { v31.entries(); } catch (e) {}
Object.defineProperty(Set, "a", { configurable: true, enumerable: true, value: v9 });
const v34 = new Set();
("-35960")[2];
const t33 = "-35960";
t33[5] = "-35960";
class C41 {
    g = v34;
}
C41.length;
new C41();
const v44 = new C41();
v44.g = v44;
const v45 = v44?.__defineSetter__;
try { new v45(v45, "-35960"); } catch (e) {}
try { new v45(v44, v44); } catch (e) {}
new C41();
new BigInt64Array(66);
-8;
const v53 = new Uint32Array(8);
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
const v56 = new Uint16Array(512);
v56[Symbol.toPrimitive] = f27;
v56[222] = v56;
class C59 {
}
try { new C59(); } catch (e) {}
let v61;
try { v61 = new C59(); } catch (e) {}
const v62 = v61?.constructor;
try { new v62(); } catch (e) {}
const v65 = WeakMap?.constructor;
let v66;
try { v66 = v65.toString(); } catch (e) {}
v66[16] = v66;
try { new v65(BigInt64Array); } catch (e) {}
const v69 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
v69.g = v69;
try { v69.find(512); } catch (e) {}
Set.a = Set;
const v72 = new Set(v69);
try { v72.add(v72); } catch (e) {}
function F74(a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    let v78;
    try { v78 = this.toString(); } catch (e) {}
    try { v78.split(v21, v21); } catch (e) {}
    try {
    } catch(e80) {
    }
    try {
        Math.clz32();
    } catch(e82) {
    }
}
try { new F74(v21, v1); } catch (e) {}
F74.caller = F74;
const v84 = new F74();
v84.constructor = Symbol;
const v85 = v84?.constructor;
try { new v85(Uint16Array, Uint16Array); } catch (e) {}
const v87 = new F74();
try { v87.propertyIsEnumerable(v13); } catch (e) {}
const v89 = v87?.__defineGetter__;
v89.name;
try { new v89(v53, v44); } catch (e) {}
