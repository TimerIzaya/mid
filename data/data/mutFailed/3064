class C3 {
    n(a5, a6) {
        -(this + a6);
        const v11 = new Uint8ClampedArray(1521);
        new BigInt64Array(257);
        new Uint32Array(127);
        return v11;
    }
}
function f18(a19, a20) {
    function F21() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.h = 268435439;
        } catch(e24) {
        }
    }
    const v25 = new F21();
    const v26 = new F21();
    const v27 = new F21();
    function f28(a29) {
        const o36 = {
            __proto__: a29,
            ...v27,
            valueOf(a31) {
                return v25;
            },
            ...a29,
            "a": a29,
            "b": F21,
        };
        return o36;
    }
    f28(v25);
    const v38 = f28(v27);
    const v39 = f28(v26);
    const v40 = /2(?!(a))\18/giy;
    class C41 {
    }
    const v42 = new C41(v40);
    const v43 = async (a44, a45, a46) => {
        [v38,a44,F21,v39];
        return v42;
    };
    return v43;
}
Object.defineProperty(C3, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f18 });
C3.prototype = C3;
new C3();
new C3();
new C3();
255 / 255;
const v56 = Float32Array?.constructor;
let v57;
try { v57 = new v56(-2147483649); } catch (e) {}
Float32Array.name;
const v59 = new Float32Array(255);
function f60() {
    return Symbol;
}
function f61(a62) {
    function f63(a64, a65) {
        const o68 = {
            set d(a67) {
            },
            "a": a64,
        };
        const v71 = new Int8Array(268435456);
        return v71;
    }
    try { f63(-2147483649); } catch (e) {}
}
Object.defineProperty(v59, "valueOf", { enumerable: true, get: f60, set: f61 });
v59[83];
v59[191] = v59;
Object.defineProperty(Int8Array, "d", { writable: true, value: v57 });
Int8Array.d = Int8Array;
new Int8Array(2293);
6 * 6;
try { new BigInt64Array(-2147483649, Int8Array, BigInt64Array); } catch (e) {}
new BigInt64Array(6);
const v83 = new Date();
try { v83.setUTCFullYear(v83, v83, C3); } catch (e) {}
v83.getFullYear();
