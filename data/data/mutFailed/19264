const v2 = new Uint16Array(3549);
function f3() {
    class C4 {
    }
    try { new C4(); } catch (e) {}
    const v6 = new C4();
    const o7 = {
    };
    try { new Proxy(f3, Uint16Array); } catch (e) {}
    new Proxy(v6, o7);
    return 3549;
}
v2.toString = f3;
const v13 = Int32Array?.constructor;
try { new v13(Uint16Array); } catch (e) {}
const v15 = new Int32Array(4);
function f18() {
    return f18;
}
function f19(a20) {
    const v21 = a20?.constructor;
    let v22;
    try { v22 = v21(a20, f18); } catch (e) {}
    const o24 = {
        get d() {
            return this;
        },
    };
    return v22;
}
const v25 = new Uint16Array(16);
class C26 {
    static {
        this.b = this;
        let v29 = 9n;
        v29++;
        class C32 {
            static b = v25;
            [Uint16Array];
        }
        const v33 = new C32();
        const v34 = v33?.constructor;
        try { new v34(); } catch (e) {}
        function f36() {
        }
        try { f36.bind(4n); } catch (e) {}
        const v38 = [];
        class C39 {
            constructor() {
                delete v38[1073741824];
            }
        }
        try { C39.bind(Uint16Array); } catch (e) {}
        const v43 = new C32();
        const v44 = v43?.constructor;
        try { new v44(); } catch (e) {}
        const v46 = new C32();
        const v47 = v46?.constructor;
        try { new v47(); } catch (e) {}
        try { Date.toString(); } catch (e) {}
        let v51 = new Date();
        try { v51.setUTCMinutes(v25, v46, v25); } catch (e) {}
        v51 **= v51;
        BigUint64Array.d = BigUint64Array;
        const v54 = new v44();
        const v55 = v54.includes();
        v55 || v55;
    }
    10000;
    [-1];
    1;
    [v2];
    #h = Uint16Array;
}
const v57 = new v13();
v57[10000];
const v59 = new C26();
v59[10000] = v59;
const v60 = new C26();
v13[1];
function F62(a64, a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    a65 === a65;
    a67[3] = a67;
    try {
        this.e = Uint16Array;
    } catch(e69) {
    }
    try {
        this.h = a67;
    } catch(e70) {
    }
}
F62.name;
const v72 = new F62(Uint16Array, 16, 16, v15);
const v75 = Math.expm1(-366687.8544616379);
function f78(a79, a80, a81) {
    function f82(a83) {
        for (let v84 = 0; v84 < 100; v84++) {
            f78(a83, 1.0);
        }
        return a81;
    }
    a80.toString = f82;
    let v86;
    try { v86 = a79.codePointAt(a80); } catch (e) {}
    a81 & v86;
    const o89 = {
        get d() {
            return a80;
        },
        ["JG3"]: a80,
        "c": a81,
    };
    return o89;
}
try { f78.toString(); } catch (e) {}
const v91 = new F62(v59, 16, 3549, v72);
const v92 = v91?.e;
try { new v92(F62, v2, v75); } catch (e) {}
new F62(v72, 3549, 16, v91);
const v95 = v72?.constructor;
try { new v95(v59, v59, v57, v59); } catch (e) {}
for (let v97 = 0; v97 < 25; v97++) {
    function f98(a99, a100, a101, a102) {
        const v105 = new Date(a99);
        const v107 = new Set();
        const v108 = v107.add(v105);
        let [v109,,...v110] = v107;
        v109.setUTCHours(v108, Float64Array, v110);
        const o112 = {
            __proto__: v107,
        };
        function f113() {
            return f98;
        }
        class C114 extends f113 {
        }
        return v108;
    }
    f98.arguments = f98;
    const v117 = new BigUint64Array(255);
    const v119 = v117.buffer.slice();
    function f120(a121) {
        v60.b = "WwTV";
        return f98;
    }
    v119.constructor = f120;
    v119.slice(v119, v97);
}
