new Uint32Array(1374);
let v5;
try { v5 = Float64Array.from(1374); } catch (e) {}
const v6 = new Float64Array(7);
let v7;
try { v7 = v6.copyWithin(Float64Array, Float64Array); } catch (e) {}
1281 >> 1281;
1281 != 1281;
Int8Array.name = Int8Array;
const v12 = new Int8Array(1281);
try { v12.toSorted(v12); } catch (e) {}
const v17 = /2a\sc/uds;
v17.h = v17;
function f18(a19, a20) {
    function f21() {
        const v23 = new Set();
        v23.size;
        try {
            v7.toString = v5;
        } catch(e25) {
        }
        return v23.clear();
    }
    const v27 = f21();
    f21();
    return v27;
}
Symbol.prototype = Symbol;
const v30 = Symbol.toPrimitive;
v17[v30] = f18;
function f31() {
    try { v17.test(v17); } catch (e) {}
    const t32 = Array();
    t32.length |= 113;
}
const v36 = f31?.constructor;
let v37;
try { v37 = new v36(v12); } catch (e) {}
const v38 = f31?.bind;
try { v38(Int8Array); } catch (e) {}
try { new v38(1000.0); } catch (e) {}
const v42 = Symbol.toPrimitive;
let v43 = Symbol;
v43.for(v42.description);
v17[v42] = f31;
const o48 = {
    [v17](a47) {
    },
};
v43 = v37;
v7[2] = v42;
for (let v49 = 0; v49 < 100; v49++) {
    f18(v30, Uint32Array);
}
try { o48.undefined(Symbol); } catch (e) {}
const v53 = new Int8Array(Symbol);
try { v53.entries(); } catch (e) {}
v53.toString = f31;
v53.toString();
