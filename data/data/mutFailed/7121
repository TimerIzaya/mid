/[\11]D0/dimsy;
const v1 = /foo[z]*/gvimy;
const v2 = /BI/gvy;
class C8 extends Float64Array {
    static 1;
    static #d = 256;
}
class C12 {
    get g() {
        const v16 = new Float64Array(7);
        class C19 {
        }
        const v20 = new C19();
        v20.length = -4294967296;
        let v21 = super.c;
        v2[255];
        v21 -= v16[1073741824];
        new Int8Array(0);
        new Int16Array(279);
        return 0;
    }
}
new C12();
new C12();
new C12();
function f35() {
    let v36 = 852.2904873570058;
    const o43 = {
        3: "setDate",
        "f": 1836424012,
        m(a40, a41) {
            v36++;
            return v36;
        },
        "type": "setDate",
        "type": "setDate",
        "type": "setDate",
        "g": v1,
        "maxByteLength": 256,
        "d": 1836424012,
    };
    function F44(a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C48 extends 328.81357854924204 {
    }
    new C48();
    return o43;
}
%PrepareFunctionForOptimization(f35);
f35();
new BigUint64Array();
new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
Uint8Array.d = Uint8Array;
let v57 = 127;
v57++;
function f59(a60, a61) {
    try { a60(f59); } catch (e) {}
    try { a60(BigInt64Array); } catch (e) {}
    a61.constructor(a61);
    return f59;
}
const v66 = new Promise(f59, Uint8Array);
try { v66.then(); } catch (e) {}
const v69 = new Uint8Array(v57);
function f70(a71, a72) {
    const o73 = {
    };
    o73.g = o73;
    return o73;
}
try { f70(v66, v66); } catch (e) {}
for (let v75 = 0; v75 < 25; v75++) {
    v75 - v75;
    const v77 = f70();
    v77.g = v77;
    v77.d = v77;
    Object.defineProperty(v77, v75, { enumerable: true, get: f70, set: f70 });
    8 - 8;
    const v82 = new Int8Array(8);
    try { Reflect.preventExtensions(v77); } catch (e) {}
    Reflect.construct(Uint16Array, [v82]);
    v69[v77] = v77;
    gc.name = gc;
    !("sync" == "sync");
    const o91 = {
        "execution": "sync",
    };
    gc(o91);
}
f35();
%OptimizeFunctionOnNextCall(f35);
f35().constructor;
for (let v96 = 0; v96 < 5; v96++) {
}
try { Reflect.set(); } catch (e) {}
