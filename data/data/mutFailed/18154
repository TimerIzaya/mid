function f2(a3, a4) {
    class C8 {
        get e() {
            try {
                super.setHours(this, this, 2.9788133947234406e+306, this, "MV");
            } catch(e11) {
            }
            return ("MV").__proto__;
        }
        static #f = 2.9788133947234406e+306;
        static 8;
        static #b;
        e = 2.9788133947234406e+306;
        static 65535 = 1e-15;
    }
    return C8;
}
Float64Array.toString = f2;
const v13 = new Float64Array(972);
const v16 = new Float64Array(5);
Int32Array.BYTES_PER_ELEMENT = Int32Array;
Int32Array.prototype = Int32Array;
const v19 = new Int32Array(v16);
let v20;
try { v20 = v19.subarray(0, 0); } catch (e) {}
function f21() {
    return f2;
}
function f22(a23) {
    new Float64Array(257);
    new Int16Array(36);
    new Uint8Array(13);
}
Object.defineProperty(v20, "constructor", { writable: true, enumerable: true, get: f21, set: f22 });
const v33 = v20?.constructor;
try { new v33(0, 972, Float64Array); } catch (e) {}
class C35 {
    constructor(a37, a38, a39, a40) {
        function f41() {
            a39 = 972;
            return 5;
        }
        this[Symbol.toPrimitive] = f41;
        a37 + a37;
        a38 + a38;
        this[972] = this;
        -a38;
        let v50;
        try { v50 = v13(Float64Array, Float64Array); } catch (e) {}
        [] = v13;
        %VerifyType(972);
        try { v50(v50, Float64Array); } catch (e) {}
        const v52 = this.__proto__;
        v52.toString = Symbol;
        const v53 = v52?.__lookupGetter__;
        try { new v53(Float64Array); } catch (e) {}
        try { v52.propertyIsEnumerable(Int32Array); } catch (e) {}
        v13[this];
    }
    static #e;
    [972];
    static #b;
    static [Float64Array];
    static #a = Int32Array;
}
const v57 = new C35(972, 972, 972, 5);
v57[972] = v57;
const v58 = new C35(5, 972, 0, 0);
const v59 = v58?.__defineGetter__;
try { new v59(5, Int32Array); } catch (e) {}
v58[972];
const v62 = new C35(5, 972, 972, 972);
v62[972];
class C64 {
}
try { new v57(); } catch (e) {}
const v66 = new C64();
function f67(a68) {
    class C70 {
        [-55801.39760616061];
    }
    return v62;
}
Object.defineProperty(v66, "constructor", { writable: true, configurable: true, value: f67 });
const v71 = v66?.constructor;
try { new v71(); } catch (e) {}
const v73 = v66?.constructor;
try { new v73(); } catch (e) {}
function f75() {
    return v66;
}
try { f75(); } catch (e) {}
Object.defineProperty(C35, "b", { enumerable: true, get: f75 });
