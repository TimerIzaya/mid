const v2 = new Int8Array(221);
try { new Int32Array(v2, Int32Array, Int32Array); } catch (e) {}
new Int32Array(3);
const v9 = new BigUint64Array(9);
try { v9.findIndex(Int32Array); } catch (e) {}
function f13() {
    ("object").normalize("NFD");
    return "object";
}
Object.defineProperty(Float64Array, "toString", { configurable: true, enumerable: true, value: f13 });
const v18 = new Float64Array(512);
v18[322] = v18;
new Float32Array(3);
205 & 205;
const v25 = new BigInt64Array(205);
try { v25.find(v9); } catch (e) {}
256 * 256;
try { Uint16Array(205, BigInt64Array, 256); } catch (e) {}
const v31 = new Uint16Array(256);
v31[127];
const v33 = v25[205];
0 >> 0;
try {
    v33.toString = v33;
} catch(e36) {
    e36.message;
    e36.message = e36;
}
255 + 255;
255 - 255;
Float64Array.toString = f13;
-Float64Array.BYTES_PER_ELEMENT;
const v44 = new Float64Array(255);
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "h", { configurable: true, value: a49 });
    a49 >>> a49;
    a50--;
    a48 >> a48;
    a50 | a50;
    try {
        v44.b = a48;
    } catch(e55) {
    }
    try {
        this.h = a47;
    } catch(e56) {
    }
}
F45.constructor = f13;
const v57 = F45?.constructor;
v57.constructor = f13;
const v58 = v57?.constructor;
try { new v58(BigUint64Array); } catch (e) {}
let v60;
try { v60 = new v57(v44); } catch (e) {}
try { v60(); } catch (e) {}
const v62 = new F45(255, 205, 255, 205);
v62.h;
const v64 = new F45(255, 256, 255, 256);
const v65 = new F45(255, 205, 256, 255);
const v67 = ([-Infinity,-5.577012134541006])?.filter;
try { new v67(Uint16Array); } catch (e) {}
const v69 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
[-2.220446049250313e-16,-171953.22769972356,2.220446049250313e-16,Infinity,-3.0,-4.368087235127776];
const v71 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v72 = [Infinity];
let v74 = ([2.2250738585072014e-308,1.949684848262672,4.0]).push(v71);
v74++;
const v77 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0]).toStringTag;
try { v72.every(v77, v64); } catch (e) {}
v62.h >>>= v74;
v69.length;
1 >> 1;
const v83 = new BigUint64Array(1);
function f84() {
}
function f85() {
    return f84;
}
Object.defineProperty(f84, "valueOf", { writable: true, enumerable: true, get: f85 });
([-4096,-1073741824,65537,9007199254740990,-4096]).length;
const v88 = [1557591051,8137,536870888,-9223372036854775808];
v88.toString = f13;
255 * 255;
-16 <= -16;
v88 * v88;
const v94 = [];
try { v94.every(v65); } catch (e) {}
try { v94.findIndex(); } catch (e) {}
const v97 = [];
v97[268435439] = v97;
13 - 13;
const v100 = [];
try { v100.findLast(v83); } catch (e) {}
[];
[];
2147483649 | 2147483649;
const v109 = ~f84;
v109 & -v94;
v109 >> 536870889;
class C114 {
}
C114.name = C114;
new C114();
class C116 {
}
C116.name = C116;
const v117 = new C116();
try { v117.constructor(); } catch (e) {}
v117[594532432] = v117;
const o120 = {
};
o120.b = o120;
v117[-16];
v97[268435439];
const t114 = "bigint";
t114[1] = "bigint";
const v127 = ("symbol").replace("bigint").fontsize;
try { v127.call(Float64Array); } catch (e) {}
class C129 {
    #a = -2;
    constructor(a131, a132) {
    }
}
for (let i = 0; i < 5; i++) {
    const o134 = {
        "type": "symbol",
        "type": "symbol",
    };
    const v135 = o134?.__lookupSetter__;
    try { new v135(221); } catch (e) {}
    gc();
}
