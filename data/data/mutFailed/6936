new Float32Array(Float32Array);
new Float32Array(82);
new Uint8Array(0);
const t3 = 17;
new t3(17);
new Float32Array(639);
function f17(a18) {
    const v19 = -a18;
    typeof /(foo(?!bar)baz)/gis;
    return v19;
}
BigInt64Array[Symbol.toPrimitive] = f17;
new f17(255);
const v26 = new Set();
BigInt64Array.toString = Symbol;
class C32 {
    g = v26;
}
new C32();
const v34 = new C32();
const v35 = v34?.__defineSetter__;
let v36;
try { v36 = new v35(v34, v34); } catch (e) {}
const t23 = "XKrcX";
new t23();
new BigInt64Array(66);
new Uint32Array(Uint32Array);
new Uint16Array(512);
class C45 {
}
try { new C45(); } catch (e) {}
const v48 = v36?.constructor;
try { new v48(BigInt64Array); } catch (e) {}
const v51 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
try { v51.find(512); } catch (e) {}
Set.a = Set;
const t36 = 255;
const v54 = new t36(v51);
try { Symbol.add(v54); } catch (e) {}
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e60) {
    }
    try {
        Math.clz32();
    } catch(e62) {
    }
}
const t49 = 512;
t49.caller = F56;
new F56();
new F56();
