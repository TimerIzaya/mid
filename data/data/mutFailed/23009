const v0 = [Infinity,1.7976931348623157e+308,132725.59314215695,-2.220446049250313e-16,2.2250738585072014e-308];
const v1 = [-1000000.0,-4.0,2.1113468930189896,-Infinity,0.1345052567242051];
const v2 = [5.0,-Infinity];
const v3 = [v2,v0,v2,v1,v2];
const v4 = [v0,v3,v3];
[v4,v3,v4];
const v8 = new BigInt64Array(5);
new Uint8ClampedArray(113);
const v14 = new Float32Array(6);
function f16() {
    let v18 = 1261703539;
    let v20 = -65535;
    const v21 = v20 / v20;
    const o75 = {
        next() {
            v20--;
        },
        ...352326470,
        m(a25) {
            Object.defineProperty(a25, "c", { configurable: true, enumerable: true, value: a25 });
            a25.c = a25;
            a25.h = a25;
            const o26 = {
            };
            o26.h = o26;
            function f27(a28, a29, a30) {
            }
            v18 = v20;
            let v31 = this;
            v31.e = v14;
            super.e;
            v31 = o26;
            f27.caller = f27;
            try {
                o26.e = v20;
            } catch(e34) {
                const v38 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v38, o26);
            }
            const o40 = {
            };
            o40.e = v8;
            o40.e = v18;
            try { Math.expm1(128); } catch (e) {}
            const v44 = -9007199254740991 >> -9007199254740991;
            v44 - v44;
            Math.sin(-9007199254740991);
            try { ("EV").link(v21); } catch (e) {}
            0 != 0;
            class C51 {
                o(a53, a54, a55, a56) {
                    class C57 {
                    }
                }
            }
            C51.name = C51;
            new C51();
            const v61 = new Int8Array(3938);
            let v62 = 3;
            const v63 = v62++;
            v63 + v63;
            let v65 = 0;
            const v66 = v65 >> v65;
            v66 - v66;
            for (let i = 0; i < 5; i++) {
                v65 < 8;
                [...v62] = v61;
                const v70 = v65++;
                v70 % v70;
            }
            const o72 = {
            };
            o72.c = o72;
            o72.e = v18;
            o72.g = a25;
            try {
                const o73 = {
                };
                o73.g = a25;
                o73.h = 352326470;
            } catch(e74) {
            }
            return this;
        },
    };
    let v76;
    try { v76 = o75.m(o75); } catch (e) {}
    function f77() {
        return Float32Array;
    }
    function f78(a79) {
        ([]).entries;
    }
    Object.defineProperty(v76, "b", { writable: true, get: f77, set: f78 });
    v76.b = v76;
    class C83 {
    }
    const v84 = new C83();
    const v86 = new Float32Array(v84, "nt", Float32Array);
    function f87() {
        URIError();
        return "nt";
    }
    v86[Symbol.toPrimitive] = f87;
    const t104 = "nt";
    const v92 = delete t104[v86];
    let v93;
    try { v93 = v84.floor(v92); } catch (e) {}
    for (const v94 in v93) {
    }
}
f16();
f16();
f16();
function f98(a99, a100, a101, a102) {
}
function f103(a104, a105) {
    const o108 = {
        set b(a107) {
        },
    };
}
function F109(a111, a112, a113) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e114) {
}
