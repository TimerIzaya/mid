function f1() {
    return f1;
}
"ex7" <= Uint8ClampedArray;
let v8 = 2134637886;
let v9;
try {
const t0 = 2.2250738585072014e-308;
v9 = new t0(9, v8, 855365.2070162641, 9, 4.0);
} catch (e) {}
var g = 9;
function f10() {
}
const t13 = "ex7";
t13.f = 2.2250738585072014e-308;
function f11() {
    class C12 {
    }
    const v14 = C12.constructor.bind();
    new v14();
    return v14;
}
f11();
f11();
class C18 {
}
const v21 = -Infinity;
Math.floor(!v21);
function f25() {
}
const o27 = {
    "type": "function",
};
const v28 = new Worker(f25, o27);
try { v28.terminateAndWait(); } catch (e) {}
!536870912;
-v21;
new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
const v36 = new Date();
v36.getMonth();
v9 % v9;
v8++;
function f41() {
    const o42 = {
    };
    return o42;
}
-63043 != -63043;
try { (9).codePointAt(855365.2070162641); } catch (e) {}
class C48 {
    static c = "toString";
    #a = 536870912;
}
new C48();
new C48();
new C48();
const o52 = {
};
const v54 = ~9007199254740990;
o52().toPrecision(v54);
try { ("o").matchAll(v8); } catch (e) {}
const t61 = "symbol";
delete t61[1];
eval();
const v64 = new Uint32Array();
const v65 = new C48();
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
const v70 = new F66();
const v73 = [v64,v64,v64,v64];
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    const v79 = Date.toString(F75);
    v79[23];
    class C81 {
    }
    try { C81.m(); } catch (e) {}
    v64.constructor;
    const v86 = new Float32Array(6);
    const v87 = v86.fill();
    v79.replaceAll(v65, -37859n);
    const v89 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v89[2];
    const v93 = new Set(v73);
    for (let i96 = 0, i97 = 10;
        (() => {
            const v98 = i96 < i97;
            class C99 extends Date {
            }
            return v98;
        })();
        i96++) {
    }
    const v105 = v93.add;
    v105.f = v105;
    try { v105(); } catch (e) {}
    const v108 = v93["delete"](839612.5677247904);
    const v109 = v108 || v108;
    const v110 = v109 || v109;
    v110 && v110;
    const v112 = v109 && v109;
    v112 || v112;
    const o115 = {
    };
    o115.b = o115;
    try { Array(9223372036854775807); } catch (e) {}
    const v119 = ("getPrototypeOf").blink();
    const v120 = v119[28];
    function f121() {
        return F66;
    }
    function f123(a124) {
        f121();
        return v108;
    }
    this.onmessage = f123;
    const v126 = v120.strike();
    v126[4] = v126;
    const v128 = v119.strike(591114.0785999324).replace(19793, v70);
    v128[11] = v128;
    class C130 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C131 extends C130 {
        static {
        }
        65537 = v87;
        ["getPrototypeOf"] = C130;
    }
    const v133 = new C131();
    const v134 = new C131();
    const t132 = v134.constructor;
    new t132(v89, v65, 839612.5677247904);
    const v137 = new C131();
    v137.getPrototypeOf;
    const v140 = BigUint64Array.of();
    new BigUint64Array(v133, v140, v140);
    new Int8Array();
    const v144 = new C131();
    const t140 = v144.getPrototypeOf;
    new t140();
    const v147 = v144.getPrototypeOf;
    let v148;
    try { v148 = new v147(-37859n); } catch (e) {}
    v148.getPrototypeOf = v148;
    new C131();
    const v151 = new String();
    Object.defineProperty(v151, 7, { configurable: true, enumerable: true, value: Int8Array });
    for (const v153 of Array(19793)) {
    }
    class C154 {
        static get b() {
        }
    }
}
function F160(a162) {
    if (!new.target) { throw 'must be called with new'; }
    function f163(a164, a165, a166) {
        function f168(a169) {
            return a162;
        }
        a165 > a162;
        4.0 && a164;
        return a162;
    }
    Worker(f163);
}
function F178(a180) {
    if (!new.target) { throw 'must be called with new'; }
    const v181 = this.constructor;
    const v182 = v181.bind(F178, F178, F178);
    try { v182(); } catch (e) {}
    try { new v181(); } catch (e) {}
}
