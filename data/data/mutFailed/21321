new Uint16Array(13);
new Float64Array(9);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this.constructor;
    try { new v15(154, a14, 154, a12); } catch (e) {}
    -a12;
    a14 <= a14;
}
const v19 = new F9(154, 129, 129, 154);
const v20 = v19.constructor;
const v23 = new Float64Array();
const v27 = new Float32Array(4096);
const v28 = [v23,Uint32Array,v27];
try { Reflect.defineProperty(-12); } catch (e) {}
[v27,Uint32Array,v28];
new Uint8Array(128);
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = a36?.constructor;
    try { new v37(); } catch (e) {}
    try {
        this.g = a36;
    } catch(e39) {
    }
}
class C40 {
    static [v20];
    static 127;
    [129];
}
new C40();
const v42 = new C40();
const v43 = new C40();
const v44 = F34.arguments;
for (let v45 = 0; v45 < 55; v45++) {
    try { v43["stringify"](C40, v45, 9, v42); } catch (e) {}
}
v20 << Uint8Array;
[60671,9223372036854775807,4,6,3,268435456,-1643945335,9007199254740992];
[-65537,9007199254740990];
const v53 = new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
-4294967296n * 9007199254740991n;
[1000,36404,-705167121,-1234416956,65536,129,-2147483647];
let v59 = 0;
while (v59 < 7) {
    v53["sort"](v44);
    v59++;
}
const v65 = new Float64Array();
v65 > Uint32Array;
