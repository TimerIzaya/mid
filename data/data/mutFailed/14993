const v2 = new Array(4058);
let v5 = -785.6845467148966;
v5 + v5;
const v7 = v5++;
class C8 extends Array {
    get d() {
        const v10 = Array(4058);
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = v5;
            } catch(e15) {
            }
            try {
                this.b = v5;
            } catch(e16) {
            }
            try {
                this.d = v10;
            } catch(e17) {
            }
        }
        new F11(v10, v10);
        new F11(this, this);
        const v20 = new F11(v2, v2);
        return v20;
    }
}
let v21;
try { v21 = new C8(); } catch (e) {}
const v22 = new C8();
let v23;
try { v23 = v22.copyWithin(4058, v2); } catch (e) {}
let v24;
try { v24 = v23.concat(Array); } catch (e) {}
new C8();
const v26 = new C8();
let v27;
try { v27 = v26.copyWithin(-1.0963660065028506e+308, v5); } catch (e) {}
try { v27.concat(v7); } catch (e) {}
const v29 = /(foo[z]*)/gudimy;
v29.dotAll = v29;
/xyz{0,1}?/gdims;
/XSa?/gudisy;
v21.lastIndex;
[];
function F34() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v26;
}
const v36 = new F34();
const v37 = v36.d;
const v38 = new F34();
new v24();
2.0 % 2.0;
let v42 = 2.0 >>> 2.0;
const v43 = v42++;
const v44 = v43 >>> v42;
v43 || (v44 !== v44);
let v47 = 5.0;
v47--;
const v49 = v47 >>> v47;
v49 != v49;
let v51 = 65536n;
v51 <= v51;
const v53 = v51--;
v53 ^ v53;
~v37;
~(-2147483649n / -2147483649n);
let v59 = 536870888n;
v59--;
v59++;
const v62 = [-3.5650322397951273,1000.0,0.802460520523592,5.641883312396217e+306];
const v63 = [431.4791340196293,-3.0,125159.99825031101,21.6056810036589,1.6160148855763925e+308,1.7462069791264565e+308,5.0,1e-15,-1000.0];
let v64;
try { v64 = v63.toString(); } catch (e) {}
v64[31] = v64;
Array.h = v64;
const v65 = [-1.238631182886351e+308,1.9411414401127767e+306,5.0,-276.83656814954304,830049.9402099303,-4.0901138213923866e+307,-5.0,300.38437393340564];
let v66;
try { v66 = v65.lastIndexOf(v62); } catch (e) {}
class C67 {
}
C67.name;
let v69;
try { v69 = C67.bind(C67); } catch (e) {}
const v70 = v69?.constructor;
try { new v70(v69); } catch (e) {}
C67.__lookupGetter__;
try { Array(v38); } catch (e) {}
const v74 = new v66();
const v75 = v74.isPrototypeOf(v49);
const v77 = (v75 && v75) && v75;
v77 && v77;
