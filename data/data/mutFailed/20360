function f0() {
}
new Float32Array(2);
const v9 = new Int8Array(229);
new Float64Array(128);
let v13 = "resolve";
v13[3];
try { ("setUint16").strike(); } catch (e) {}
let v18 = 10n;
class C19 {
    static m(a21) {
        ({"a":v13,"h":v18,} = this);
    }
}
f0 % -3;
const v24 = /(?<a>.)\k<a>?/vdimsy;
try { v24.exec(128); } catch (e) {}
let v26;
try { v26 = v24(); } catch (e) {}
const v27 = ["setUint16"];
const v29 = new BigInt64Array();
try { v29.entries(); } catch (e) {}
function f32() {
    const v34 = 3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v35 = 1000000000000.0;
    const v36 = v35--;
    12 ^ 12;
    let v39 = 257828.6336153492;
    const v41 = -v27;
    const v42 = v41 && v27;
    -v42;
    const v45 = Array();
    try { v45.find(v34); } catch (e) {}
    v13 + 12;
    9 >>> 9;
    const v51 = new Int32Array(9);
    v51.reverse();
    for (let v53 = 0; v53 < 5; v53++) {
        function f54() {
            try { eval.bind(eval); } catch (e) {}
            eval();
            return Array;
        }
        f54();
        %OptimizeFunctionOnNextCall(f54);
    }
    -4294967295 ^ -4294967295;
    const o76 = {
        "e": -4294967295,
        ..."Vre",
        valueOf(a64, a65) {
            return Int32Array;
        },
        valueOf(a67, a68) {
            return a68;
        },
        "call": f32,
        "g": v41,
        "type": "setUint16",
        ..."Vre",
        n(a70, a71) {
            return v41;
        },
        ...v42,
        "type": "-1",
        set g(a73) {
        },
        "maxByteLength": -3,
        m(a75) {
            return v18;
        },
        "c": v45,
        5: -4294967295,
        6: Float32Array,
    };
    try { o76.valueOf(-3, Float64Array); } catch (e) {}
    v39--;
    -4294967296 | -4294967296;
    class C81 {
        static #m(a83) {
        }
        constructor(a85) {
            const v86 = new Uint16Array(12, -4294967296, v36);
            v86[9];
        }
    }
    C81.d = v18;
    try { C81(); } catch (e) {}
    try { C81(); } catch (e) {}
    Symbol.species;
    const v92 = Symbol.iterator;
    Math[v92] = v92;
    try { v29.reduce(v26); } catch (e) {}
    const v94 = new C81();
    const v95 = v94?.__lookupGetter__;
    try { new v95(v94); } catch (e) {}
    const v97 = new C81();
    const v98 = v97?.constructor;
    try { new v98(v92); } catch (e) {}
    let v100;
    try { v100 = v97.propertyIsEnumerable(v41); } catch (e) {}
    !v100;
    const v102 = new C81();
    const v103 = [];
    const v104 = [v102];
    const v106 = v104[0]?.constructor;
    try { new v106(v9); } catch (e) {}
    class C108 extends C81 {
        [v94];
        #n(a110, a111, a112, a113) {
        }
    }
    const v114 = -3 < -3;
    v114 && v114;
    const v117 = new WeakSet();
    function f118(a119) {
        a119.prototype = a119;
        const o120 = {
            "g": v117,
        };
        return o120;
    }
    f118(WeakSet);
    const v122 = new C108();
    const v123 = v104.constructor;
    try { v123.toString(); } catch (e) {}
    ~Array;
    function F126() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { eval(-4294967296); } catch (e) {}
    const t131 = eval();
    t131();
    class C132 extends v123 {
    }
    try { C132(); } catch (e) {}
    const v134 = new C132();
    const v135 = v134.constructor;
    try { new v135(); } catch (e) {}
    v135.bind(v39).length;
    Object.defineProperty(v134, 65537, { value: v97 });
    try { v122.m(v103); } catch (e) {}
    return v26;
}
%PrepareFunctionForOptimization(f32);
f32();
%OptimizeFunctionOnNextCall(f32);
f32();
