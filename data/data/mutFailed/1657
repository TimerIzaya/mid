const v4 = new Date();
[v4,Date];
const v7 = [4,[2147483648,-1909822356,-1909822356],2147483648];
v7[2] = v7;
[0.36182037685194424,4.766677850968432e+307,1e-15,NaN,-1000000000.0,5.971324784495396e+307,-406.4651471365521,1000000000.0,1000.0];
const v9 = [-6.723586853985717e+307,-1.0];
v9.g = v9;
[-257338.74930449738,-0.261893687126447];
class C12 {
}
class C13 {
    static a;
    static {
        this >> this;
        const v16 = this[6];
        function f18(a19, a20, a21, a22) {
        }
        f18();
        try {
            v7.g = v16;
            Object.defineProperty(Float64Array, "valueOf", { enumerable: true, value: f18 });
            const v25 = Array(this);
            v25[v25];
        } catch(e27) {
        }
    }
    static m(a29) {
        gc();
    }
}
try {
    C13();
} catch(e33) {
    ("NN")["9"];
    Math.pow(!0.8843420658768774, -60544);
}
4 + 4;
gc()?.then;
new Float32Array();
const v49 = new Uint8ClampedArray(4);
const v50 = v49?.findLastIndex;
try { new v50(v4); } catch (e) {}
(3508).pop();
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    const v60 = this.constructor;
    try { new v60(a56); } catch (e) {}
    this.c = a56;
}
new Float64Array(3508, v7, 3508);
BigUint64Array.prototype = BigUint64Array;
const v66 = new BigUint64Array(64);
v66[12];
for (let v68 = 0; v68 < 5; v68++) {
    const v71 = -3 ^ v68;
    const v72 = v49.length;
    const v74 = ("stack").normalize();
    async function f75(a76, a77, a78, a79) {
        Object.defineProperty(v74, 0, { enumerable: true, value: v72 });
        return f75;
    }
    Math.asin(v71);
}
