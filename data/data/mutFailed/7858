const v0 = [4294967296,1140343207,4294967295];
const v1 = [6,-2147483647,9007199254740990,268435440,-2,-5115,2147483647];
const v2 = [-4294967295,-8,1416,10000,13,-917378236,9223372036854775807,8];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v1;
    } catch(e6) {
    }
}
const v7 = new F3(v1);
const v8 = new F3(v1);
const v9 = new F3(v8);
const o11 = {
    "arguments": v2,
    "type": "function",
};
function f12() {
    function f13() {
        new BigUint64Array(6);
        return 6;
    }
    return f13;
}
function f17(a18) {
    function F19(a21, a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        a21.propertyIsEnumerable();
    }
}
Object.defineProperty(o11, "valueOf", { writable: true, enumerable: true, get: f12, set: f17 });
const v26 = [v9,v0,v8,v0,v7];
[v9];
const v30 = new Uint8Array(165);
o11 % o11;
const v34 = new Uint8Array(6);
const v36 = ["function",v34];
const o37 = {
    "arguments": v36,
    "type": "function",
};
[v26,v7,v9,v9,F3];
[-1.0,426.77975744325886,-Infinity,-1000000.0,-954301.3886935441,-2.2709753031964595e+307,-5.0,-5.0,3.0];
[1000000000000.0,1.4657976588257456e+308,864.8658784513918,0.0,1000000000.0,902.7456610731738,-6.935437465993806e+307];
const v42 = async (a43, a44, a45) => {
    return Uint32Array;
};
new Set();
[-1.0509677738969931e+308,3.8546103657956827,-1000000.0,-808.864194312303,-1e-15,-2.0];
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
class C52 extends Map {
}
class C54 {
    static {
        const v56 = [601759695];
        const v57 = [1073741824,1073741823,1376142744,1073741825];
        function f58(a59, a60, a61, a62) {
            try { new a59(); } catch (e) {}
            a61 << a61;
            function f65() {
                return a59;
            }
            const v67 = new Int8Array();
            function F70(a72) {
                if (!new.target) { throw 'must be called with new'; }
                for (const v76 of Array(4087)) {
                }
            }
            const v77 = BigUint64Array * 536870887;
            function f78(a79, a80, a81, a82) {
                a81++;
                const v84 = a81++;
                const v85 = a81 % a81;
                const o86 = {
                    ...v30,
                };
                let v87;
                try { v87 = o86.n(v85, v84); } catch (e) {}
                return v87;
            }
            Number.isNaN(v77 ** v77);
            function f91(a92, a93) {
            }
            try { f91(); } catch (e) {}
            const v95 = v67.buffer;
            const v96 = v95.__defineGetter__;
            try { v96(); } catch (e) {}
            Object.defineProperty(v95, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f65);
            let v99;
            try { v99 = v57["find"](..."find", a62, ...v56); } catch (e) {}
            const o100 = {
            };
            o100.e = v57;
            o100.e = this;
            o100.e = o100;
            v99 <= a61;
            function f102(a103, a104) {
                const o105 = {
                };
                return o105;
            }
            f102();
        }
        for (let v107 = 0; v107 < 5; v107++) {
            f58(this, v107, v107);
        }
    }
}
