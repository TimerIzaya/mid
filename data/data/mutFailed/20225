const v0 = [];
const v6 = new Int16Array(166);
("D")[0].match();
const v16 = new Set();
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a19;
    } catch(e21) {
        for (let [v22,v23] of a19) {
        }
    }
    this.h = v16;
    -256n >> -256n;
    try {
        v16[this];
        new F17(a20, [WeakSet], this);
        this.b = Set;
    } catch(e30) {
        v6.__proto__;
        /r/dimsy;
        /abc/vimsy;
        /\c~/gdis;
    }
}
new F17();
new F17();
const v39 = new BigUint64Array(-2147483648, v16, Int16Array);
function f40(a41, a42, a43) {
    try { a41.apply(a42, v39); } catch (e) {}
    f40 ** a42;
    function f46() {
        return a42;
    }
    for (let v47 = 0; v47 < 32; v47++) {
        a41["p" + v47] = v47;
    }
    return v39;
}
new Int16Array(3);
new Uint16Array(7);
try {
    v0.c = 268435441n;
} catch(e58) {
}
const v60 = /(x)(x)(x)\1/uis;
function f61(a62, a63, a64, a65) {
    const o72 = {
        4294967295: a62,
        [v60](a67, a68, a69, a70) {
            super.test();
        },
    };
    return a63;
}
%OptimizeFunctionOnNextCall(f61);
const v73 = new Float64Array();
function F75() {
    if (!new.target) { throw 'must be called with new'; }
}
new F75();
!-1;
const v82 = new Float32Array(4096);
const v84 = [v82,Uint32Array,[v73,Uint32Array,v82]];
v84[v84] >>= 1000;
