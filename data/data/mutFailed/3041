13 & 13;
let v6;
try { v6 = new Int16Array(0, 9007199254740991, 13); } catch (e) {}
try { v6.entries(); } catch (e) {}
try { v6.join(v6); } catch (e) {}
const v9 = new Int16Array(13);
~v9[8];
let v12 = 3719;
v12++;
let v15;
try { v15 = new Uint8Array(13, v12, v12); } catch (e) {}
v15[12] = v15;
const v16 = new Uint8Array(v12);
v16[1356] = v16;
256 + 256;
const v20 = new Int16Array(256);
try { v20.find(13); } catch (e) {}
v6[52] = v20;
[-840.4153363036376,2.2250738585072014e-308,2.220446049250313e-16,0.6887753920830509,4.0,-423697.7393616135,-8.589912106798002,654655.0844740823];
([1000.0,2.0,1.2586361281243157e+308,-3.0,-1.7976931348623157e+308,-2.0,1000000.0,0.8898355730521977,4.0,-5.0])[4];
const v25 = [-5.681957856005524,-5.838058729124208e+307];
v25[1] = v25;
const v26 = v25[1];
v26 * v26;
const v29 = Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array);
try { v29.normalize(); } catch (e) {}
const v31 = (256).toLowerCase();
try { v31.normalize(); } catch (e) {}
try { v31.valueOf(); } catch (e) {}
