[0.42290682557358783,NaN];
[NaN,339184.4556110613,0.8207238358064208,2.663542168668732e+307,1.0,1e-15,-3.0,-1.226172773127729,1e-15];
const v2 = [-1e-15,-6.541787980069385];
function f3() {
    const v4 = [f3,f3];
    let v5;
    try { v5 = v4.every(f3); } catch (e) {}
    return v5;
}
function f7(a8, a9) {
    return a9;
}
Set.toString = f7;
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = new Float32Array(this, a25, a25);
    const v30 = new Uint8Array(268435440);
    new Uint8ClampedArray(129);
    v30[6] = v28;
}
new F21(v2, -1000000000000.0, -2.2250738585072014e-308);
class C35 {
    5;
    static set a(a37) {
        new Int32Array(512);
        new BigUint64Array(236);
        new Int16Array(257);
    }
    static [-6.531778989987705e+307];
    536870887;
    a = -477505.9137825182;
}
new C35();
new C35();
new C35();
const v51 = new Uint32Array();
const v52 = [512,7,-1073741824];
const o53 = {
};
function f54(a55, a56) {
    return BigInt64Array;
}
new o53();
const v59 = v52.indexOf;
try { v59(); } catch (e) {}
new Float32Array(4096);
o53.set = f54;
const v65 = new Proxy(v51, o53);
v65.__proto__ = v52;
