function f1(a2, a3, a4) {
    const o12 = {
        toString(a6, a7, a8) {
            a3 < this;
            return super[a4];
        },
        get d() {
            return this;
        },
    };
    return o12;
}
const v13 = f1();
new Uint16Array(7);
const v18 = new BigUint64Array(4053);
class C20 {
    constructor(a22) {
        ("valueOf").localeCompare(a22, "valueOf");
    }
}
const v24 = new C20();
new Uint8Array(47);
function f28(a29, a30, a31) {
    const o77 = {
        get a() {
            const v38 = -9223372036854775808 >> this;
            (-9223372036854775808 >> -9223372036854775808) && v38;
            Math.trunc(-9223372036854775808);
            Math.pow(-1024, -1024);
            const v44 = new Date();
            v44.toJSON();
            const o47 = {
                "maxByteLength": 129,
            };
            Math.tan(-1024);
            v13.constructor;
            function F50(a52, a53) {
                if (!new.target) { throw 'must be called with new'; }
                const v54 = this.constructor;
                try { new v54(this, this); } catch (e) {}
                const v56 = a52--;
                const v58 = new Date();
                [v58];
                Reflect.preventExtensions(Reflect);
                try {
                    +(-1538129542 - v54) ^ v56;
                    const v66 = [4294967296,-57202,256,48562,333990054];
                    let v69;
                    try { v69 = Uint32Array.apply(2, v66); } catch (e) {}
                    const v71 = ~-2017259196;
                    const v72 = v71 | "valueOf";
                    try { new v69(v72, C20, v71, -2017259196); } catch (e) {}
                } catch(e74) {
                }
            }
            const v75 = new F50(F50, F50);
            new F50(v75, F50);
            return -1024;
        },
    };
    const v79 = [1000,1000,1000,1000,1000];
    for (let i = 0; i < 5; i++) {
        Object.defineProperty(v79, 130, { value: 1000 });
    }
    return o77;
}
v18[10] = v18;
function F80(a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    const v84 = ("valueOf").constructor;
    v84.raw(v84);
}
f28(4053, 47, 47);
f28(4053, 7, 4053);
v24.h = 4053;
const o89 = {
    __proto__: true,
};
f28(47, 7, 7);
gc();
function F95(a97, a98, a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = Date;
}
function F101(a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    function f105() {
        return f105;
    }
    "Vre" == "Vre";
    [WeakSet,WeakSet];
    const v113 = new Uint8Array(2707, 2707, 128);
    try { v113.findLastIndex(v113, v113); } catch (e) {}
    try {
        const v116 = new Uint8ClampedArray(2147483647);
        function f117(a118) {
            return f117;
        }
        const v121 = [v116];
        const o126 = {
            valueOf(a123, a124) {
                return this;
            },
            2773432668: 2147483647,
            get c() {
            },
            "arguments": v121,
            "type": "function",
        };
        Worker(f117, o126);
        const v129 = new Uint32Array(2147483647);
        new Float64Array(v129);
        -63523 >= 127;
    } catch(e135) {
    }
}
new F101();
