let v0 = "bigint";
class C3 {
    static e;
    static [11] = 11;
    #f = 11;
    static 9 = -3.6725202929650402;
    static 8 = C3;
    valueOf(a5) {
        v0 ||= this;
        let v6;
        try { v6 = v0.o(a5, -3.6725202929650402, this, 11); } catch (e) {}
        try {
            v0.b = v6;
        } catch(e7) {
        }
        return v0;
    }
    [11] = v0;
    static 2147483649;
    static 14;
    static #b = -3.6725202929650402;
    static #e = v0;
}
const v8 = new C3();
const v9 = new C3();
new C3();
const v13 = new Array(5);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -3.6725202929650402;
    } catch(e21) {
    }
    try {
        this.e = a20;
    } catch(e22) {
    }
    try {
        this.a = a20;
    } catch(e23) {
    }
}
const v24 = new F17("fP", v9);
new F17("symbol", v24);
new F17(v13, v0);
class C27 {
    constructor(a29) {
        let v30 = 0;
        do {
            const o31 = {
            };
            try {
                o31.g = a29;
            } catch(e32) {
            }
            try {
                const o33 = {
                };
                o33.g = a29;
                o33.a = v30;
            } catch(e34) {
            }
            try {
                const o35 = {
                };
                o35.g = a29;
                o35.a = v30;
                o35.b = v8;
            } catch(e36) {
            }
            try {
                const o37 = {
                };
                o37.g = a29;
                o37.a = v30;
                o37.b = 11;
            } catch(e38) {
            }
            v30++;
        } while (v30 < 2)
        for (let v42 = 0; v42 < 32; v42++) {
            v42 === v42;
            for (let v44 = 0; v44 < 50; v44++) {
            }
            new Int8Array(520);
            for (let v48 = 0; v48 < 5; v48++) {
            }
            0 || Int8Array;
            Math.tanh();
            function f53() {
                return this;
            }
        }
        const t93 = "fP";
        t93[6] &&= -3.6725202929650402;
        const o56 = {
            "maxByteLength": 129,
        };
        const v58 = new SharedArrayBuffer(129, o56);
        new Float64Array(v58);
    }
}
new C27();
new C27();
