let v1 = Int8Array;
const v2 = new v1(9);
function f5() {
    new Uint8Array(268435440);
    return 268435440;
}
Float64Array.toString = f5;
const v9 = new Float64Array(9);
v9.name = Float64Array;
const v12 = new Float32Array(4096);
v12[1670];
function f14(a15, a16, a17, a18) {
    a15.toString = f14;
    a18[Symbol.toPrimitive] = f5;
    a15.name;
    a16 * a16;
    a17 >>> a17;
    const o37 = {
        set e(a25) {
            function f26() {
                for (const v30 of Array(4087)) {
                }
                return 4087;
            }
            %PrepareFunctionForOptimization(f26);
            f26();
            %OptimizeFunctionOnNextCall(f26);
            f26();
            a15.h *= 9;
            v1 *= a25;
            try {
                a25.__proto__ = this;
            } catch(e36) {
            }
        },
        7: a16,
        "f": a18,
        "g": v2,
        [Float64Array]: v9,
    };
    o37.g;
    return o37;
}
f14(Float64Array, 4096, 4096, 9);
f14(v9, 4096, 9, 9);
f14(4096, 9, 9, v1);
try { ("PI").includes(v1); } catch (e) {}
const t47 = "2";
t47[0] = "2";
function f48(a49, a50, a51) {
    const o59 = {
        n(a53, a54, a55) {
            return f48;
        },
        valueOf(a57, a58) {
            return a58;
        },
    };
    try { o59.valueOf(a49, v2); } catch (e) {}
    return o59;
}
f48.d = f48;
const v61 = f48();
const t62 = f48();
t62[-2147483649] *= -13;
for (const v63 in v61) {
}
