const v3 = [-532149429n,10n];
let v4;
try { v4 = v3.reverse(10n, v3); } catch (e) {}
let v5;
try { v5 = v4.push(v4); } catch (e) {}
const v6 = [-14n,v3];
const v7 = [v6,10n,-532149429n,v6];
26 * 26;
const v11 = Uint8ClampedArray?.apply;
try { new v11(v4, v7); } catch (e) {}
Uint8ClampedArray.g = Uint8ClampedArray;
new Uint8ClampedArray(v5);
const v16 = new Uint16Array(3676);
v16.c = v16;
Int32Array.name = Int32Array;
const v19 = new Int32Array(24, 26);
const v20 = v19?.lastIndexOf;
try { new v20(Uint16Array); } catch (e) {}
const v22 = v19?.with;
try { v22(24, Uint16Array); } catch (e) {}
try { new v22(3676, 3676, 24); } catch (e) {}
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        let v28 = ("Vre").codePointAt();
        v28 === v28;
        const v30 = v28--;
        v30 >>> v30;
        v30 >> v30;
        const v33 = v28 >> v30;
        const v34 = v33 / v33;
        v34 * v34;
        return 24;
    }
    let v36 = v4();
    v36++;
    -(v36 / v36);
    %OptimizeFunctionOnNextCall(f26);
}
