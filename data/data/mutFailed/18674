class C3 {
    3339214519 = "799196808";
    static set d(a5) {
        this[1024];
        super[1e-15] = "799196808";
    }
    o(a8, a9) {
        const v10 = super[a8];
        const t8 = "799196808";
        t8[v10] = v10;
        try {
            a9.g = 1e-15;
        } catch(e11) {
        }
        return "799196808";
    }
}
new C3();
new C3();
new C3();
try { ("undefined").link("undefined"); } catch (e) {}
try { ("function").concat("799196808"); } catch (e) {}
let v21 = 255;
v21 >>> v21;
const v23 = new Array(v21);
0.0 >>> 0.0;
class C28 extends Array {
    static n(a30, a31, a32, a33) {
        [0.1270426937578495,a32,a30];
        const v35 = [1.0,Array];
        [v35,"799196808"];
        return v35;
    }
    static [Array] = v21;
    static #n(a38, a39, a40) {
        const v41 = 1.0 == v23;
        if (v41) {
            super.at(a38);
        } else {
            new BigUint64Array(11);
            new Int16Array(this);
            new Uint16Array(1758);
        }
        return v41;
    }
}
C28.length;
const v53 = new C28();
const v54 = new C28();
const v55 = new C28();
function f56(a57, a58, a59, a60) {
    a57 - a57;
    a59 >> a59;
    a60--;
    const o93 = {
        ...v53,
        "c": a59,
        set g(a65) {
            let [v66,v67,,v68] = v55;
            try {
                this.__proto__ = this;
                new Date(..."undefined");
                v21++;
                for (let v73 = 0; v73 < 5; v73++) {
                    const v76 = v73 >> -18321;
                    Math.log1p(v73);
                    Math.tan(v76);
                }
            } catch(e79) {
            }
            Array(a59);
            %PrepareFunctionForOptimization(v55);
            -(536870912n << 536870912n);
            class C84 {
            }
            function f85(a86, a87) {
                const o88 = {
                    "c": a87,
                    __proto__: C84,
                };
                o88.c;
                return o88;
            }
            %OptimizeFunctionOnNextCall(f85);
            Array(a59);
            Array(a59);
            %OptimizeFunctionOnNextCall(v54);
            v67(a59);
        },
    };
    return o93;
}
try { f56("function", "function", Array, "function"); } catch (e) {}
const v95 = f56(0.1270426937578495, v55, 0.0, 0.0);
v95[Symbol.toPrimitive] = Array;
const v98 = f56(0.1270426937578495, v54, v95, 0.1270426937578495);
v98.valueOf = Array;
f56(0.0, v53, v98, 0.0);
function F101(a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v98;
    a104 + a104;
    const v106 = this.constructor;
    try { new v106(a104); } catch (e) {}
    a104 == a104;
    this.g = a103 !== a103;
}
const v110 = F101?.bind;
try { new v110(Array); } catch (e) {}
new F101(F101, -418967591n);
