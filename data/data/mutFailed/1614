const v2 = new Uint8Array(227);
const v5 = new Int16Array(7);
const v9 = [65537,268435441,63298,-5,1235122603];
const v10 = [128,215394418];
try { v10.entries(); } catch (e) {}
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try { a17.valueOf(); } catch (e) {}
    const v19 = this?.constructor;
    try { new v19(1024, 1024, v9, this); } catch (e) {}
    a15.caller;
    a17[1];
    try {
        this.c = a16;
    } catch(e23) {
    }
    try {
        this.b = -714582153;
    } catch(e24) {
    }
    try {
        this.f = a15;
    } catch(e25) {
    }
}
new F12(-714582153, F12, -714582153, v10);
new Uint8ClampedArray(9);
const v29 = [Uint8Array,7,Uint8ClampedArray,Uint8ClampedArray];
const t27 = [2147483647,9,268435441,-39151,7,16,-2019446363,0,4294967295,42568];
t27.length = -714582153;
function f31() {
}
function f32() {
    return f32;
}
const v34 = [v5,v29,Uint8ClampedArray,[7],v2];
function f36() {
    return 2147483648n;
}
function f38() {
    return -9007199254740992n;
}
class C45 {
    set g(a47) {
        function F48(a50, a51) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C52 extends F48 {
        }
        class C53 {
        }
        try { C53.m(); } catch (e) {}
        -11 || v34;
    }
}
const v62 = new BigUint64Array(512);
const v64 = new Int16Array();
v62.includes(v64);
1000000.0 >> -2.0;
