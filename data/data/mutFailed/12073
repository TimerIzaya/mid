function f2(a3, a4) {
    const v6 = new Uint8ClampedArray();
    v6.reverse();
    return Uint8Array;
}
Uint8Array[Symbol.toPrimitive] = f2;
const v10 = new Uint8Array(220);
const v13 = new BigUint64Array(2);
try { v13.entries(); } catch (e) {}
const v17 = new Uint8ClampedArray(2722);
const v18 = v17?.constructor;
try { new v18(v13, v10, 2722); } catch (e) {}
function f20() {
    return 2;
}
-4294967295 - -4294967295;
const v25 = [];
let v29;
try { v29 = ("pop").fontsize(Uint8Array); } catch (e) {}
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(Uint8ClampedArray); } catch (e) {}
    a32[1] = a32;
    const v38 = a32.strike().constructor;
    const v39 = v38?.constructor;
    try { new v39(a32); } catch (e) {}
    let v41;
    try { v41 = new v38(a35, v25, a33, a35); } catch (e) {}
    function f42() {
        return Symbol;
    }
    function f43(a44) {
        const v47 = new Uint32Array(3);
        class C48 {
            constructor(a50, a51, a52, a53) {
                try { a52(); } catch (e) {}
                for (let i56 = 0; i56 < 9; i56++) {
                    v47[i56] = a53;
                }
            }
            c;
        }
        new C48();
    }
    Object.defineProperty(v41, Symbol.toPrimitive, { writable: true, get: f42, set: f43 });
    try { v41.at(v38); } catch (e) {}
    a33[2];
}
const v67 = new F30("ceil", "pop", "ceil", "isConcatSpreadable");
v67.length = v29;
v67.length;
