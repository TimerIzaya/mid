class C3 {
    static 1 = 128;
    constructor(a5, a6) {
        super();
        try {
            a5.__proto__ = 268435441;
        } catch(e7) {
        }
        const t8 = 268435441;
        new t8();
    }
    static #m(a10) {
        class C15 extends Set {
        }
        const t14 = [];
        t14[6] = 4294967295;
        ~1;
        ~128;
        ~Math;
        !1;
        return C3;
    }
    static #h = 268435441;
}
const v22 = new C3();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
const v25 = new C3();
const v26 = new C3();
try { v26.toString(); } catch (e) {}
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(a34); } catch (e) {}
    const v37 = a33?.constructor;
    try { new v37(); } catch (e) {}
    const v39 = a34?.__defineGetter__;
    try { new v39(a34, a34); } catch (e) {}
    this.c = 268435441;
    try {
        this.c = a35;
    } catch(e41) {
    }
    try {
        const v42 = /\c4a.[(x)(x)(x)\4*(x)(x)(x)\3*]/gmy;
        function F43(a45, a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F43(v42);
        try {
            const o51 = {
            };
            new Map(o51);
        } catch(e53) {
        }
        this.g = -51474;
    } catch(e54) {
    }
}
const v55 = new F31(v25, v25, v22);
const v56 = v55?.constructor;
let v57;
try { v57 = new v56(v22, v55, 2147483647); } catch (e) {}
const v58 = new F31(v26, v26, v57);
new F31(v22, v22, v58);
Uint16Array.h = Uint16Array;
const v61 = new Uint16Array(Uint16Array);
const v63 = new Int32Array(v61);
try { v63.slice(268435441, C3); } catch (e) {}
