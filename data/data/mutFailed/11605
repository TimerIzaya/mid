function f0() {
    const o12 = {
        ["1279199762"](a5, a6) {
            try {
                a6.__proto__ = "e";
            } catch(e8) {
            }
            return true;
        },
        3999: "e",
        ..."1279199762",
        "c": "e",
        ["1279199762"]: "undefined",
    };
    o12[9] = o12;
    function f15(a16) {
        const o17 = {
            3677: -128n,
        };
        return o17;
    }
    f15();
    f15(-1024n);
    function F20(a22, a23, a24, a25) {
        if (!new.target) { throw 'must be called with new'; }
        const v26 = this?.constructor;
        try { new v26(this, a25, a25, this); } catch (e) {}
        a23[3677];
        a24 << a24;
        a25.e = a25;
        try {
            this.e = a22;
        } catch(e30) {
        }
        try {
            this.d = f15;
        } catch(e31) {
        }
    }
    return o12;
}
const v32 = f0();
Object.defineProperty(v32, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f0 });
new Date(Date);
class C37 {
}
function f38(a39, a40) {
    new WeakSet();
    return a39;
}
C37.toString = f38;
C37.length;
let v45;
try { v45 = ("p").substring(C37); } catch (e) {}
let v46;
try { v46 = v45.strike(); } catch (e) {}
const v47 = f0();
v47.c = v47;
const v48 = f0();
1024 + 1024;
const v52 = new Uint8Array(1024);
const v55 = BigUint64Array?.constructor;
try { new v55(v32); } catch (e) {}
const v57 = new BigUint64Array(38);
try { Float64Array(v32, v57, Date); } catch (e) {}
new Float64Array(6);
class C63 extends Set {
}
const v66 = new BigUint64Array(4083);
v66[2734];
function f68() {
    return v47;
}
[v52,Uint8Array,v47,BigUint64Array];
[v47,Uint8Array];
[v48];
function f72(a73, a74) {
    return f72;
}
try { f72(38, v57); } catch (e) {}
try { new Worker(); } catch (e) {}
function F79() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v81 = 0; v81 < 1000; v81++) {
        const v84 = ("p" + v81).fontcolor();
        let v85;
        try { v85 = v84.trimLeft(this); } catch (e) {}
        v85[12];
    }
}
const o87 = {
    "type": "function",
};
o87.arguments = v46;
o87.type;
const v89 = new Worker(f72, o87);
const v90 = v89.terminateAndWait();
v89.terminateAndWait(v90, Worker, v90, v90);
