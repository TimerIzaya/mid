[4.0,-Infinity,1e-15,0.0,-1000000.0,9.874325206512998e+307,-1e-15];
const v1 = [9.51830848701144e+307,-1.613469850243414e+308,156.40658845404232,1.5649363315362805];
[1.94991682463022];
const t0 = "NEGATIVE_INFINITY";
t0.toString = -256;
const v6 = [9];
function f9() {
    const v10 = [f9,f9];
    function f11(a12) {
    }
    const v14 = [0];
    [[Reflect.construct(f11, v14, Uint8ClampedArray),v14],9];
    const v18 = [v6,Reflect];
    try { v18.findIndex(); } catch (e) {}
    class C21 extends v10.constructor {
    }
    const v22 = new C21();
    v22?.constructor;
    return v10;
}
function f25() {
    const o39 = {
        toString(a27, a28) {
            function F29(a31, a32, a33, a34) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f |= a28;
                    a28.c;
                } catch(e36) {
                    e36.stack;
                    Object.defineProperty(a27, 0, { writable: true, get: f25 });
                }
            }
            new F29(this, a27, this, f25);
            return F29;
        },
    };
    return o39;
}
f25();
function f43() {
}
const o61 = {
    valueOf() {
        try {
            for (let v48 = 0; v48 < 10; v48++) {
                with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                    length | length;
                }
                function F55(a57) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.b;
                }
                new F55();
            }
            this.valueOf = f43;
        } catch(e60) {
        }
    },
};
const v62 = [64,-1051309768,5,65535,14,1000,-2083154897,12];
[65537,8,13,53129,255,5,268435440];
const v64 = [-57550,307002580,-2147483649,-9223372036854775807,-9007199254740990,627602260,4,-951170224];
Array(1000);
function f68() {
    /[a-zA-Z0-9]/gvisy;
    return f68;
}
for (let v70 = 0; v70 < 5; v70++) {
    f68();
    %OptimizeFunctionOnNextCall(f68);
}
const v72 = [3730n,v62];
const v76 = new Int8Array(3);
const v79 = new Int32Array(3, 114, 3);
v79["keys"](v76, ...v79, ..."keys");
const v82 = [v72,v1,v62];
[v82,v82,v64];
let v85;
try { v85 = BigInt64Array(BigInt64Array); } catch (e) {}
v85[9] = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
const t81 = -15n;
var c = t81(v82, 0);
