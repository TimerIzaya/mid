const v0 = [0.7889712644398102,2.532953947756219e+307,-968.7554562671507,1.0,4.0,0.12333168573597308,-9.184633020879504,5.0,-738472.1753128234,-2.2250738585072014e-308];
const v1 = [-2.220446049250313e-16,5.696882276044307e+307,2.220446049250313e-16,-1000.0,9.655906780069426,-2.0];
const v2 = [-1000000000000.0,-0.8877784799499384,-772.6419499455379,1.7976931348623157e+308,2.0,-3.247095904195528e+307];
[v0,v2,v2,v2];
const v4 = [v2,v0,v0];
[v1];
class C6 {
    [v0];
    n(a8, a9, a10) {
        class C11 {
            static [v2] = a10;
            [v4];
        }
        new C11();
        new C11();
        const v14 = new C11();
        return v14;
    }
}
new C6();
new C6();
new C6();
[255,536870912,166776989];
[-5,8,4294967297,10,-37024,1,-4294967296,6];
[-33375,-279508190,1024,-2147483647,-1075623310,-9223372036854775808,1646716702];
let v22 = 4.0;
const v25 = new Date("undefined");
v25.getYear();
v22 **= v22;
const o33 = {
    set d(a29) {
        for (let v30 = 0; v30 < 5; v30++) {
        }
        this["cos"]();
    },
};
class C34 {
    constructor(a36) {
        o33.d = C34;
    }
}
const v38 = new WeakSet();
v38[4] = -8.576381465737261e+307;
new Map();
class C44 {
    e;
    constructor(a46, a47, a48, a49) {
        super[a47] = this;
        const o50 = {
        };
        function f51(a52, a53) {
            return BigInt64Array;
        }
        o50.set = f51;
        function F56() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C59 extends F56 {
        }
        this[Symbol.match];
        v38[Symbol.asyncIterator];
    }
    [v25];
    #e;
    a;
    #g;
    static {
        for (let i69 = 0, i70 = 10;
            i69 < i70;
            (() => {
                function f74() {
                    return i69;
                }
                const v75 = [601759695];
                const v76 = [1073741824,1073741823,1376142744,1073741825];
                function f78(a79, a80, a81, a82) {
                    function f84() {
                        return f84;
                    }
                    const v85 = f74();
                    const v87 = new Int8Array();
                    function f88(a89, a90) {
                        return v85;
                    }
                    f88();
                    const v92 = f88();
                    const v93 = v87.buffer;
                    Object.defineProperty(v92, "constructor", { writable: true, configurable: true, value: Date });
                    new Int8Array();
                    let v96 = 1000000000000.0;
                    v96--;
                    v93.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f84);
                    let v100;
                    try { v100 = v76["find"](..."find", a82, ...v75, ...v76, ...522675525n); } catch (e) {}
                    Symbol("find");
                    const v104 = new Uint8ClampedArray();
                    const o105 = {
                        ...v104,
                    };
                    v100 <= v96;
                    return v85;
                }
                for (let v107 = 0; v107 < 10; v107++) {
                    f78();
                }
                i69++;
            })()) {
        }
    }
}
