let v0 = -1;
const v5 = --v0;
v5 >>> v5;
v0 = v5;
const v7 = BigUint64Array ** v0;
v5[92] = v0;
const t6 = -1;
t6[512] = v7;
const v8 = new BigUint64Array(6);
const v11 = new Uint8ClampedArray(2474);
v11[84];
new Float64Array(112);
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v16.map(v11); } catch (e) {}
const v18 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
try { v18.push(112); } catch (e) {}
delete v16?.length;
function f25() {
    return v7;
}
try {
    v8.c = v5;
} catch(e26) {
}
const v27 = new Uint32Array(v16, 0, 0);
try { v27.slice(112, f25); } catch (e) {}
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(a32, a31); } catch (e) {}
    a32 - a32;
}
const v36 = new F29(v18, 0);
const v37 = new F29();
const v38 = v37?.constructor;
try { new v38(Float64Array, Float64Array); } catch (e) {}
class C41 {
}
-4294967297n <= -4294967297n;
/5*/gi;
const v46 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v47 = [601759695];
const v48 = [1073741824,1073741823,1376142744,1073741825];
const t43 = "b";
t43.e = "B";
~522675525n;
function f52(a53, a54, a55, a56) {
    function f57() {
        let v60 = Float64Array;
        v60 = a54;
        b = v47;
        let v61 = v16.length;
        v61--;
        try {
            v48.forEach(v60);
        } catch(e64) {
            e64.message;
        }
        const v66 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.hasInstance = Symbol;
        const v68 = Symbol.toPrimitive;
        Symbol.for(v68.description);
        const o78 = {
            toString(a73, a74) {
                const v75 = a56 && v60;
                function f76() {
                    a73 *= v68;
                    return v60;
                }
                return v75 <= v66;
            },
        };
        const o99 = {
            "c": -4294967297n,
            [522675525n](a81, a82) {
            },
            "c": v47,
            valueOf(a84, a85) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a87, a88, a89, a90) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v46,
            ...v47,
            "type": "Vre",
            ..."Vre",
            valueOf(a93, a94) {
                return a94;
            },
            ..."Vre",
            4: "Vre",
            [v36]: 2474,
            "a": v46,
            10: Float64Array,
            "d": a55,
            "g": f25,
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a96, a97, a98) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    const t110 = -1;
    t110();
    try { new Int8Array(Int8Array, "b", "b"); } catch (e) {}
    const v103 = new Int8Array();
    const v104 = v103?.__defineSetter__;
    try { new v104(v46, v46); } catch (e) {}
    %OptimizeFunctionOnNextCall(f57);
    try { v48["find"]("find", a56, v47, v48, 522675525n); } catch (e) {}
}
for (let v108 = 0; v108 < 10; v108++) {
    f52();
}
%OptimizeFunctionOnNextCall(f52);
f52();
