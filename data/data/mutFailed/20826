const v2 = new Int8Array(122);
const v5 = new Uint16Array(1775);
const v8 = new Int32Array(1024);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a12;
    } catch(e15) {
    }
    Array(36862);
    Array(176726687);
    try {
        this.d = a11;
    } catch(e22) {
        let v23 = Uint8Array;
        class C24 {
        }
        const v25 = new C24();
        function f27() {
            const v30 = v23--;
            Math.min();
            v23 ** 6;
            -4294967296 >>> v25;
            return v30 - v25;
        }
        for (let v35 = 0; v35 < 5; v35++) {
            f27();
            %OptimizeFunctionOnNextCall(f27);
        }
    }
}
new F9(v8, 1024, 1775, 1775);
const v38 = new F9(v2, 122, 122, 1024);
const v39 = new F9(Int8Array, 1775, 122, 1024);
class C40 {
    constructor(a42, a43) {
        let v41 = this;
        v5[8] = v2;
        v41 %= v8;
    }
    static c;
    static #g;
    set d(a45) {
    }
    b;
    static f;
    static #m(a47, a48) {
        this.c >>>= a48;
        super[a48];
        super.d;
        new v8();
        return v39;
    }
    static #c = v2;
    set g(a54) {
    }
    10 = 1024;
    /*
    constructor(a56, a57) {
        const v58 = this.constructor;
        try { new v58(a57, a57, v58, this, v58); } catch (e) {}
        this[1775] >>>= 122;
        for (let v60 = 0; v60 < 5; v60++) {
        }
    }
    */
}
new C40(v38, 1024);
const v62 = new C40(v38, 1775);
new C40(v62, 1024);
const v64 = [];
const v66 = [[128,-1641321930,-2147483649]];
class C67 {
}
const v68 = new C67();
[v68];
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = this?.constructor;
    try { new v72(); } catch (e) {}
}
const v74 = new F70();
const v75 = new v74();
function f76(a77, a78) {
    const o82 = {
        "b": v75,
        n(a80, a81) {
            return a77;
        },
        "a": v74,
    };
    return o82;
}
%PrepareFunctionForOptimization(f76);
v66.concat(v64);
