const v0 = /(?=)/udy;
const v1 = /Dva+/gudi;
const v2 = /\cA/gimy;
class C3 {
    constructor(a5, a6) {
        const v7 = this?.constructor;
        try { new v7(this, v2); } catch (e) {}
        a6.dotAll = a6;
        -(v2 & v2);
        try {
            v2.length = 4238653452;
        } catch(e12) {
        }
    }
    static valueOf(a14) {
        a14 >> this;
        const o18 = {
            "maxByteLength": 3662,
        };
        const v20 = new ArrayBuffer(1037, o18);
        new Uint16Array(v20);
        return a14;
    }
}
C3.d = C3;
const v23 = new C3(v1, v1);
const v24 = new C3(v1, v0);
const v25 = new C3(v23, v0);
-Infinity;
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    a33.lastIndex;
    try {
        this.f = v23;
    } catch(e35) {
    }
    try {
        this.h = a33;
    } catch(e36) {
    }
    try {
        this.g = a33;
    } catch(e37) {
    }
}
try { new F29(F29, v24, v24); } catch (e) {}
const v39 = new F29(-1.7976931348623157e+308, v1, v0);
v39.c = v39;
const v40 = new F29(-1.7976931348623157e+308, v25, v23);
new F29(v40, v0, v1);
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v45 = -(-7);
        v45 ** v45;
    } catch(e47) {
    }
}
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this?.constructor;
    try { new v52(F42, F42); } catch (e) {}
    const v54 = this.constructor;
    v54.arguments = v54;
    try { new v54(this, a50); } catch (e) {}
    new F42();
}
new F48();
