const v0 = /a\s/udms;
for (let i3 = 0, i4 = 10;
    (() => {
        const v5 = i3 < i4;
        class C6 {
            [C6] = i3;
            static #c;
            static e = v0;
            #g;
            [i4];
        }
        function f7(a8, a9, a10, a11) {
            let v12;
            try { v12 = a9.apply(a11, a9); } catch (e) {}
            return v12;
        }
        f7(i4, C6);
        %OptimizeFunctionOnNextCall(f7);
        return v5;
    })();
    i4--) {
}
const v19 = /qab\b\d\bcd/udimsy;
const v20 = /./gvdms;
const v23 = new Uint8Array(9);
const v26 = new Float32Array(584);
let v27;
try { v27 = v20(Uint8Array, Float32Array, v26, v26, Float32Array); } catch (e) {}
const v28 = v26[6];
const v29 = [v23,v27,Uint8Array,v19];
const v30 = [v28,v19,9,Uint8Array];
[v27,v27];
Math.log(278471.50119920843);
0 >>> 0;
Math.tanh(278471.50119920843);
Float32Array.a = Float32Array;
const v41 = new Float32Array(14);
try { v41.slice(v30, v29); } catch (e) {}
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v45 = new Uint8ClampedArray();
const v47 = new Uint8ClampedArray(127);
const v48 = delete v45[4294967296];
v48 || v48;
const v50 = v47 < -56166n;
v50 || v50;
let v52;
try { v52 = v41.findLastIndex(v27); } catch (e) {}
Object.defineProperty(v0, 9, { writable: true, configurable: true, enumerable: true, value: v52 });
try {
    let {"buffer":v53,"h":v54,"length":v55,...v56} = v23;
    for (let v57 = 0; v57 < 32; v57++) {
        v54["p" + v57] = v57;
    }
    new Float32Array(127);
} catch(e61) {
}
