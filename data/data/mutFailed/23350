Symbol.toPrimitive.description;
function f9(a10, a11, a12, a13) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
    arguments[4] = arguments;
    return f9;
}
const v20 = new Float64Array(453);
v20.toSorted();
(424).fuck();
let v23 = new BigInt64Array(424);
"a" >>> v23;
[] = "a";
const v27 = +-31385;
const v29 = new BigUint64Array();
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v32 = 0;
        v32 * v32;
        for (let i = 0; i < 5; i++) {
            v29.entries();
            const v35 = v32++;
            v35 ^ v35;
            v32 < 5;
        }
        new F30();
    } catch(e40) {
    }
}
new F30();
-v27;
const v43 = v23 / v27;
const v44 = v23++;
const v45 = v23 % v43;
Math.atanh("a");
!v44;
new Int32Array(5);
const o53 = {
};
class C58 {
    static 7;
    static [-1] = "string";
    #n(a60) {
        a60 = this;
        a60.e >>>= -35417;
        const o64 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o64);
        return this;
    }
}
const v67 = Array();
class C68 {
    #e;
    static {
        function f70(a71, a72) {
            return a71;
        }
        const o78 = {
            o(a74) {
                const o76 = {
                };
                return gc(o76);
            },
        };
        const o80 = {
        };
        const v82 = new Proxy(Uint32Array, o80);
        o78["o"](o78, Uint32Array, "o", "o", v82);
        const v85 = super[this];
        try { v85.join(-4096, -4096, v85); } catch (e) {}
        const o87 = {
        };
        [/LD/vds,1000.0];
    }
    static f;
    m(a92, a93) {
        const o94 = {
        };
        const o97 = {
        };
        const v99 = new Proxy(Uint8Array, o97);
        v99.d = v99;
        new Proxy(this, o94);
        class C105 {
        }
        function f106() {
            let v107 = 1000000000000.0;
            v107--;
            class C110 {
            }
            new C110();
            const v112 = new C110();
            [C105,C110];
            [257828.6336153492,v112];
            [v112];
            class C116 extends C58 {
            }
            function f117(a118, a119) {
                return -4096;
            }
            Set.toString = f117;
            Set.constructor(Set);
            v67.constructor;
        }
        const v123 = "string" && -4096;
        +a93;
        Math.sqrt(v123);
        a92--;
        -509886178 << -509886178;
        return this;
    }
}
new C68();
const v129 = new Int8Array(247);
function F130(a132, a133, a134, a135) {
    if (!new.target) { throw 'must be called with new'; }
    const v136 = this.constructor;
    let v137;
    try { v137 = new v136(v136, a135); } catch (e) {}
    const v138 = typeof v137;
    const o140 = {
    };
    v138 === "symbol";
}
const v142 = new F130();
new F130(F130, F130, v142, v142);
function f144() {
    const o150 = {
        get c() {
            const t132 = "f";
            const v146 = new t132();
            gc();
            class C149 {
            }
            with (v146) {
                h = C149;
            }
        },
        ...944237.2789256077,
    };
    function f151(a152, a153, a154) {
        let v157 = -560274064;
        Math.atan2(v157, v157);
        ~v129;
        Math.round(v45);
        Math.acos(v157);
        ++v157;
        Math.tanh(v45);
        return Math.exp(-2.220446049250313e-16);
    }
    f151(o150, v43, o150);
}
const v171 = new BigUint64Array(10);
function F172(a174, a175, a176) {
    if (!new.target) { throw 'must be called with new'; }
}
function F178() {
    if (!new.target) { throw 'must be called with new'; }
    this.__lookupGetter__.bind();
    for (const v185 of Array(19793)) {
        v67[658291203] = null;
    }
}
for (const v187 in v171) {
    const v189 = -4294967297n ^ -4294967297n;
    const o196 = {
        [-4294967297n](a191, a192, a193, a194) {
            super[v189];
        },
    };
    new Float64Array(2147483647);
}
f144();
const v199 = `
    v129[268435439] = BigInt64Array;
    Int8Array in v171;
    Reflect.construct(f144, [], f144);
`;
eval(v199);
