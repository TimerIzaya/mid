new BigInt64Array(512);
new Int8Array(13);
const v8 = new Int8Array(0);
function f10() {
}
const v11 = [601759695];
const v12 = [1073741824,1073741823,1376142744,1073741825];
function f14(a15, a16, a17, a18) {
    function f19(a20) {
        new Float64Array(65);
        new Uint16Array(83);
        new BigUint64Array(249);
        return a15;
    }
    a17[Symbol.toPrimitive] = f19;
    function f33() {
        return a15;
    }
    const v34 = f10();
    const v36 = new Int8Array();
    function f37(a38, a39) {
        const o41 = {
            get d() {
            },
        };
        return v34;
    }
    const v43 = f37(f37());
    const v44 = v36.buffer;
    function f45(a46, a47) {
        Object.defineProperty(Symbol, a46, { configurable: true, enumerable: true, get: f37 });
        v8.buffer;
        return v43;
    }
    v44.constructor = f45;
    new Int8Array();
    let v51 = 1000000000000.0;
    v51--;
    v44.slice(2147483648);
    %OptimizeFunctionOnNextCall(f33);
    let v55;
    try { v55 = v12["find"](..."find", a18, ...v11, ...v12, ...522675525n); } catch (e) {}
    Symbol();
    const v59 = new Uint8ClampedArray();
    const o60 = {
        ...v59,
    };
    v55 <= a17;
    return arguments;
}
for (let v62 = 0; v62 < 10; v62++) {
    f14(v62, v62, f14, v12);
}
%OptimizeFunctionOnNextCall(f14);
f14();
