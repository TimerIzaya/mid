[];
let v3 = new Float32Array(656);
new BigInt64Array(4096);
const v9 = new Float32Array(2592);
class C17 extends Map {
}
const v18 = new C17();
const v19 = new v9();
const v20 = new C17();
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v25 = Uint32Array;
function f26() {
    const o33 = {
        toString(a31, a32) {
        },
        "b": "boolean",
        "c": "boolean",
        ["object"]: f26,
        ["boolean"]: 1000000000000.0,
        "h": 1000000000000.0,
    };
    return o33;
}
const v34 = f26();
v18();
const v36 = f26();
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = new F37();
function f41(a42, a43, a44) {
    const o49 = {
        get a() {
            const o47 = {
            };
            gc();
        },
    };
    return o49;
}
const v50 = f41();
f41();
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this.constructor;
    try { new v57(F52, F52); } catch (e) {}
    a55.g = a55;
    v19.a = a54;
}
new F52(v36, v34, v40);
new F52(v36, v50);
Math?.expm1;
const v63 = new v25(5);
let v64 = -4294967297n;
v64--;
const v66 = [601759695];
const v67 = [1073741824,1073741823,1376142744,1073741825];
function f69(a70, a71, a72, a73) {
    try { a70.toLocaleString(); } catch (e) {}
    const v75 = a70?.constructor;
    let v76;
    try { v76 = v75(); } catch (e) {}
    try { v75(); } catch (e) {}
    const v79 = arguments.length;
    Object.defineProperty(v18, "e", { configurable: true, enumerable: true, value: f69 });
    const v81 = v19["entries"](a72, ...v20, BigUint64Array, ..."entries", a71, v79);
    const v83 = Symbol.toStringTag;
    v19[v83] = v83;
    function f84() {
        let v86;
        try { v86 = ("Vre").charAt(4096); } catch (e) {}
        try { v86.lastIndexOf(f84); } catch (e) {}
        let v88;
        try { v88 = ("Vre").codePointAt(v24); } catch (e) {}
        (v88 - v88) ^ v88;
        let v97 = Float64Array;
        v97 = a71;
        let v98 = v24.length;
        v98++;
        try {
            v67.forEach(a71);
        } catch(e101) {
            e101.stack = e101;
        }
        const o112 = {
            "c": v64,
            "c": v66,
            valueOf(a103, a104) {
                return a104;
            },
            1073741824: v63,
            [v64](a106, a107, a108, a109) {
                eval(v76);
            },
            "arguments": 5,
            256: a73,
        };
        o112[256];
    }
    f84();
    const v116 = Array();
    let v117;
    try { v117 = v116.findLast(f69, v63); } catch (e) {}
    ({"b":v3,"callee":v117,"length":v25,} = arguments);
    try {
        v76.length = 2;
    } catch(e119) {
    }
    v116.unshift("entries", v81, "entries", v117);
    let v122;
    try { v122 = Int8Array.of(); } catch (e) {}
    let v123;
    try { v123 = v122.join(v75); } catch (e) {}
    const v124 = new Int8Array(v123);
    v124.c = v124;
    const v125 = v124.buffer;
    v125.maxByteLength;
    const v127 = v125.slice(v20);
    try { Int32Array(v127, arguments, v64); } catch (e) {}
    function f130(a131, a132, a133, a134) {
        return v18;
    }
    const v135 = new Int32Array();
    const v136 = v135[3];
    v136 + v136;
    for (let v138 = 0; v138 < 5; v138++) {
    }
    %OptimizeFunctionOnNextCall(f84);
    try { v67["find"](..."find", a73, ...v66, ...v67, ...522675525n); } catch (e) {}
    return a72;
}
for (let v141 = 0; v141 < 10; v141++) {
    f69(v63);
}
%OptimizeFunctionOnNextCall(f69);
f69();
