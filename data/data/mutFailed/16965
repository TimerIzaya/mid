class C3 {
    static [C3];
    256;
    e = "deleteProperty";
    0;
    d = 1073741823;
    2 = "deleteProperty";
    #toString(a5) {
        %VerifyType(1073741823);
        return -1.0;
    }
    constructor(a7, a8) {
        a7--;
        a8--;
        const v11 = [a7,a8,a7,a8,this];
        try { new a8(v11, v11); } catch (e) {}
        const v13 = typeof "deleteProperty";
        v13[3];
        ("undefined")[2];
        v13 === "undefined";
    }
    static ["deleteProperty"] = "deleteProperty";
    h = -1.0;
    e;
}
let v18;
try { v18 = new C3("deleteProperty", C3); } catch (e) {}
const v19 = new C3(1073741823, 1073741823);
const v20 = new C3(v19, v19);
v20.c = v20;
const v21 = new C3(v19, v20);
-250121652 - -250121652;
[2,9007199254740991];
[1073741825,0,-1073741824,8,-32768,536870888,-65537,-9007199254740990,-65536];
const v28 = [39257];
try { v28.entries(); } catch (e) {}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.constructor;
    try { v35(); } catch (e) {}
    try {
        v18.h = v21;
    } catch(e37) {
    }
    new Array(4);
    try { new v35(v35); } catch (e) {}
}
const v42 = new F33();
const v43 = v42.constructor;
new v43(v43, v42);
