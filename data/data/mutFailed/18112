const v2 = new Uint32Array(Uint32Array);
new Int32Array(4096);
const v8 = [-9007199254740992,-9,268435441,-1294677798];
const v9 = [-54512,-2147483647,24944,7,268435439,4096,-6];
let v10;
try { v10 = v9.filter(v9); } catch (e) {}
function f11() {
    arguments[1073741823];
    return f11;
}
class C14 {
}
C14.length = C14;
const o16 = {
};
v2.h = o16;
gc(o16);
new C14();
new C14(v8, v9);
const v21 = new Float64Array(4);
const v22 = [601759695];
function f23(a24, a25, a26, a27) {
    const v29 = ("find").codePointAt(a27);
    try { v8["find"](...v10, a27, ...v22, "find", v29); } catch (e) {}
    return a24;
}
f23(v22, v8, 4096, 4096);
let v32;
try { v32 = v21.with(gc, f23); } catch (e) {}
function f35() {
    const o37 = {
        get c() {
            return C14;
        },
    };
    return o37;
}
v32();
class C39 extends f35 {
}
v32 >> -10n;
for (let v42 = 0; v42 < 5; v42++) {
    function f43() {
        const v45 = ([-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574]).slice();
        try { v45.filter(10); } catch (e) {}
        return gc;
    }
    f43();
    try { f35(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f43);
}
