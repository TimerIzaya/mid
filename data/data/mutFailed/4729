const v0 = [];
function f1(a2) {
    [2,1024,1,12,-1154591927,2147483648,-4];
    [65537,4294967297,-1,-536870912,1172599731];
    [2952,625863100,255462663,-9223372036854775808,1693048441,9007199254740992,-3,1557];
    return v0;
}
const v7 = Symbol.toPrimitive;
v0[v7] = f1;
-Infinity;
const v10 = -Infinity;
let v13 = 7;
const v14 = v13 / v13;
const v15 = v13--;
536870889 / 536870889;
function f20() {
    return -65536;
}
f20.a = f20;
try { f20(); } catch (e) {}
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v0); } catch (e) {}
    const v27 = a24 | a24;
    a25 >> a25;
    const v29 = -v27;
    v29 - v29;
    try {
        this.e = a24;
    } catch(e31) {
    }
}
F22.length = F22;
Symbol[f20] = v14;
Symbol.search;
const v34 = v7[v7];
Symbol[4] = -65536;
try { new F22(60374, v10); } catch (e) {}
new F22(-579221.1384977899, 9223372036854775807);
new F22(-579221.1384977899, -65536);
new F22(v10, 60374);
const v39 = [];
let v40 = Symbol;
v39[v40.isConcatSpreadable] = v39;
function f42(a43, a44) {
    v40++;
    const v46 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
    v46.toString = f20;
    class C47 {
    }
    const v48 = C47.constructor;
    try { new v48(v46); } catch (e) {}
    try { v46.some(C47); } catch (e) {}
}
f42[Symbol.species] = Symbol;
v40.for(v34.species.description);
f42[v15] = f42;
v39.constructor = f42;
const t58 = "concat";
t58[3] = "concat";
const t60 = "concat";
t60.length = "concat";
const v59 = v39["concat"]();
let v60;
try { v60 = v59.hasOwnProperty(536870889); } catch (e) {}
v60 && v60;
