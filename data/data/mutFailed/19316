[0.515529910611609,2.220446049250313e-16,-4.0,-47.34024509265498,1.741992023517946e+308,-2.6993866793204574e+307,1000000.0];
[0.2902155651403029,-1.7976931348623157e+308,-657.2645108343,-3.0,-0.5063371536417076,7.304082999609023e+307,-1000000000.0,NaN,7.908614381093312];
[1.1142291857112175e+308];
[0.8098270025378325,0.4155162600953881,0.7875012968786648,-2.9276445417088547e+307,-1000000000.0,-505815.79307954264];
[2.220446049250313e-16,0.45668550755748283,731558.9801476845,-36.29190764988891,-1.2521183070265367e+308,4.400954647997031,2.0,-0.0];
[-1e-15,-2.2250738585072014e-308,-3.0,0.8502003991597455,-569.2031346280886,-Infinity];
function f9() {
    return 4;
}
const o10 = {
};
function f11(a12, a13) {
    function f14(a15, a16, a17, a18) {
        arguments[2] = arguments;
        function f20() {
            const o21 = {
                __proto__: a17,
            };
            o21[0] = o21;
            return f14;
        }
        const v22 = f20();
        %OptimizeFunctionOnNextCall(f20);
        return v22;
    }
    return a12;
}
o10.constructor = f11;
const v23 = o10.constructor;
for (let v24 = 0; v24 < 25; v24++) {
    function f25() {
        return f25;
    }
    Object.defineProperty(f25, "toString", { writable: true, enumerable: true, value: f25 });
    function f26(a27, a28, a29, a30) {
        try { a28.hasOwn(); } catch (e) {}
        let v32;
        try { v32 = a28(); } catch (e) {}
        try { v32.isPrototypeOf(); } catch (e) {}
        try { new a29(); } catch (e) {}
        a28.freeze();
        const v36 = a30 + a30;
        function f37() {
            return v32;
        }
        try { f37(); } catch (e) {}
        const v39 = f37.length;
        const v40 = -v39;
        const v42 = f25().constructor;
        try { v42.prototype(); } catch (e) {}
        let v44;
        try { v44 = v42(); } catch (e) {}
        try { v44(); } catch (e) {}
        function f46() {
            return v44;
        }
        const v47 = f46();
        v47.null = f26;
        v47.null = f25;
        try { v47.null(); } catch (e) {}
        f46();
        const v50 = typeof f37;
        const v51 = v50.italics(v50, v40);
        try { v51.match(f25, o10, a30, f25, v51); } catch (e) {}
        const v54 = new Int8Array();
        v54.entries().next(v39);
        const v57 = [v24,v24,v24,v24,v24];
        try { v57.reverse(); } catch (e) {}
        try { ("find").trimRight(); } catch (e) {}
        const v62 = ("find").blink().replaceAll;
        try { v62(f26, v36); } catch (e) {}
        return v23;
    }
    for (let v64 = 0; v64 < 5; v64++) {
        f26(v64, v23);
    }
}
