function f0() {
}
new Int8Array(3459);
const v6 = new Uint32Array(127);
new Int8Array(127);
class C10 {
    2914278772 = v6;
    o(a12, a13, a14, a15) {
        a15?.[2147483648];
        new BigUint64Array(1000);
        new Float64Array(5);
        const v25 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
        new Uint8ClampedArray(v25, Uint16Array, Uint8ClampedArray);
        function f28() {
            return f28;
        }
        function F29() {
            if (!new.target) { throw 'must be called with new'; }
            const v31 = this?.constructor;
            try { new v31(); } catch (e) {}
            try {
                new f28();
                /Ckza\Wb?/vis;
                /Ma\W+/gudm;
            } catch(e36) {
            }
        }
        class C37 extends F29 {
            4;
        }
        new C37();
        const t31 = 127;
        new t31(60);
        return Int32Array;
    }
}
new C10();
new C10();
new C10();
try {
} catch(e44) {
}
const v46 = [0.22970466031530812,NaN,NaN,Infinity];
class C47 {
    constructor(a49, a50) {
        super["fround"] = v46;
    }
}
Object.defineProperty(Int16Array, 2, { writable: true, enumerable: true, value: v6 });
new Int16Array(1);
new C10();
Int16Array[2] = C10;
new Int16Array(Int16Array);
new Uint16Array();
new Int16Array(16);
new BigInt64Array(2);
const v71 = ["bpkzx","bpkzx","bpkzx"];
v71.length = "bpkzx" * [v71,v71,v71];
const v74 = Symbol.iterator;
const o83 = {
    [v74]() {
        let v76 = 10;
        const o82 = {
            next() {
                v76--;
                v76 == 0;
                const o81 = {
                };
            },
        };
    },
};
