new Float64Array(256);
let v4 = 0;
const v5 = v4++;
v5 - v5;
new Uint16Array(v4);
const v10 = 652 !== 652;
Int8Array.prototype;
Int8Array.length = Int8Array;
const v13 = new Int8Array(652);
try { v13.findLast(256); } catch (e) {}
8 >>> 8;
const v18 = new Int16Array(8);
try { v18.with(v13, Uint16Array); } catch (e) {}
102 == 102;
102 + 102;
let v24;
try { v24 = Uint8Array.from(Uint16Array); } catch (e) {}
v24[1];
new Uint8Array(102);
5 >> 5;
-(5 - 5);
const v32 = new Float64Array(5);
[];
const v35 = new Date();
const v36 = v35?.setTime;
try { new v36(v32); } catch (e) {}
const v38 = v35.toLocaleDateString();
let v39;
try { v39 = v38.italics(); } catch (e) {}
const o48 = {
    [null]() {
        try { this.null(this, null); } catch (e) {}
        const v44 = Array(Array);
        for (let v45 = 0; v45 < 5; v45++) {
            const v46 = v45 || v44;
            v46 ** v46;
        }
    },
};
v39--;
const v54 = 2.2250738585072014e-308 | 2.2250738585072014e-308;
v54 == v54;
const v58 = 490.5202885889528 | 490.5202885889528;
v58 / v58;
8.339995729022846 === 8.339995729022846;
0.3352975315574327 - 0.3352975315574327;
0.3352975315574327 >>> 0.3352975315574327;
const v66 = [335610671n,0.3352975315574327,-319.91710284458327,15n];
v66.g = v66;
const v67 = [2.2250738585072014e-308];
let v68;
try { v68 = v67.entries(); } catch (e) {}
const v69 = [v67,0.3352975315574327];
v69[0] = v69;
[15,3,-9066,-7];
const v71 = [1,-1643840771,4,1111495904,-9007199254740992,-268435456,255,-403790861,268435439];
const v72 = v71?.__defineSetter__;
try { new v72(256, 5); } catch (e) {}
const v74 = v71?.filter;
try { v74(v67); } catch (e) {}
try { v74(490.5202885889528); } catch (e) {}
let v77;
try { v77 = new v74(2.2250738585072014e-308); } catch (e) {}
const v78 = [21431,50,2015939235,-30775,-9223372036854775808,4294967296,15,-5512,-1711043381];
try { v78.lastIndexOf(Uint8Array); } catch (e) {}
const v81 = 501822767n ^ 501822767n;
v81 <= v81;
const v83 = 501822767n > 501822767n;
v83 || v83;
v83 || v83;
function f87() {
    return 501822767n;
}
16 - 16;
const v90 = 16 / 16;
v90 << v90;
const v93 = new Uint8ClampedArray();
try { v93.subarray(v68, v68); } catch (e) {}
const v96 = 4 + 4;
try { new BigUint64Array(v77, v77, v96); } catch (e) {}
new BigUint64Array(4);
let v101;
try { v101 = new Uint32Array(v74, v74, v74); } catch (e) {}
v101[0];
const v103 = new Uint32Array();
try { v103.entries(); } catch (e) {}
let v105;
try { v105 = v103.some(v74); } catch (e) {}
!v105;
v103.b = v103;
try { ("c").strike(); } catch (e) {}
~-1000000000.0;
class C111 {
    b = "c";
    static {
        try { new this(); } catch (e) {}
        let v114;
        try { v114 = this.toString(); } catch (e) {}
        try { v114.concat(v10); } catch (e) {}
        const v116 = v114[202];
        try { v116.strike(); } catch (e) {}
        this.e = this;
        function F118(a120, a121) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            this.constructor;
        }
    }
    static #h;
    268435439;
}
try { new C111(); } catch (e) {}
C111.prototype = C111;
const v125 = new v77();
v125[268435439] = v125;
const v126 = v125[268435439];
try { v126.from(5); } catch (e) {}
const v128 = new C111();
v128[268435439] = v128;
try { new Date(335610671n, 0.3352975315574327, 0.3352975315574327, 0.3352975315574327, 335610671n, 335610671n, Date); } catch (e) {}
Uint32Array.e = Uint32Array;
const v132 = new Uint32Array(Uint32Array, Uint32Array);
for (let v133 = 0; v133 < 5; v133++) {
    v132[v133] = v103;
}
2.220446049250313e-16 / 2.220446049250313e-16;
2.220446049250313e-16 >>> 2.220446049250313e-16;
2.220446049250313e-16 | 2.220446049250313e-16;
-788.7260290236088 + -788.7260290236088;
-788.7260290236088 / -788.7260290236088;
let v141 = -788.7260290236088 + -788.7260290236088;
v141--;
const v144 = [2.220446049250313e-16,1.7976931348623157e+308];
function f145(a146, a147, a148, a149) {
    a147 != a147;
    ~a148;
    v66[1428717040];
    return a149;
}
try { f145(1.7976931348623157e+308, 501822767n, 501822767n, 501822767n); } catch (e) {}
WeakMap.name = WeakMap;
const v155 = new WeakMap();
try { v155.delete(v126); } catch (e) {}
/8[\cA]v/uisy;
try { v144.with(v132, C111); } catch (e) {}
const v159 = [-788.7260290236088,C111];
try { v159.every(v32); } catch (e) {}
1073741824 | 1073741824;
class C163 {
}
C163.length = C163;
const v164 = new C163(C163);
const v165 = v164?.constructor;
try { new v165(); } catch (e) {}
const v167 = v164?.constructor;
try { new v167(); } catch (e) {}
try { new v167(); } catch (e) {}
const v170 = v164?.constructor;
let v171;
try { v171 = new v170(); } catch (e) {}
const v172 = v171?.constructor;
try { new v172(); } catch (e) {}
const v174 = v171?.constructor;
v174.name = v174;
let v175;
try { v175 = new v174(); } catch (e) {}
try { v175.propertyIsEnumerable(-1000000000.0); } catch (e) {}
for (let v177 = 0; v177 < 10; v177++) {
    async function f178(a179, a180, a181) {
        a179 > a179;
        a180 + a180;
        const v184 = a181--;
        v184 - v184;
        const v186 = -a180;
        v186 !== v186;
        a181 % a181;
        ~a180;
        -4294967297n ^ -4294967297n;
        const v193 = [1073741824,1073741823,1376142744,1073741825];
        let v194;
        try { v194 = v193.entries(); } catch (e) {}
        let v195;
        try { v195 = v194.next(); } catch (e) {}
        v195.value;
        function F197() {
            if (!new.target) { throw 'must be called with new'; }
            try { this.constructor(); } catch (e) {}
            for (let v200 = 0; v200 < 1000; v200++) {
                const v203 = ("p" + v200).fontcolor();
                let v204;
                try { v204 = v203.trimLeft(this); } catch (e) {}
                const v205 = v204[12];
                try { v205.trimStart(); } catch (e) {}
                try { v205.strike(); } catch (e) {}
            }
        }
        const v208 = new F197();
        const v209 = v208?.constructor;
        try { new v209(); } catch (e) {}
        try { v208.constructor(); } catch (e) {}
        function f212(a213, a214, a215, a216) {
            function f217() {
                function f218(a219, a220) {
                }
                try {
                    v74.d = -319.91710284458327;
                } catch(e221) {
                }
                for (let v222 = 0; v222 < 32; v222++) {
                    v101["p" + v222] = v222;
                }
                const o225 = {
                };
                const o232 = {
                    toString(a227, a228) {
                        function f229() {
                        }
                        const o230 = {
                        };
                        function f231() {
                        }
                    },
                };
            }
        }
        for (let v233 = 0; v233 < 10; v233++) {
        }
        const o234 = {
        };
        o234.d = o234;
    }
    try { f178(v54, v177, v177); } catch (e) {}
    const v237 = f178(-788.7260290236088, -1000000000.0, -1000000000.0)?.catch;
    try { new v237(v177); } catch (e) {}
}
