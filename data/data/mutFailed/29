const v2 = new Uint32Array(51);
const v5 = new BigUint64Array(3188);
const v8 = new Uint8Array(9);
class C9 extends BigUint64Array {
    a;
    #c;
    f = Uint32Array;
    #d = 9;
    static b = v5;
    constructor(a11, a12) {
        super(51, 3188, a11);
        super[Uint8Array] = this;
        let [v13] = this;
    }
    8 = C9;
}
const v14 = new C9(v2, v8);
new C9(v14, 9);
new C9(51, v2);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F17();
async function f22(a23, a24, a25, a26) {
    a23.fuck();
    await v21;
    return F17;
}
f22();
function f0() {
    try { ("3Ol").match("stack"); } catch (e) {}
    const o8 = {
        "a": "number",
        ..."3Ol",
        __proto__: "number",
        "e": "number",
        set g(a6) {
            this[48];
        },
        "d": "3Ol",
        "g": "3Ol",
        65537: "3Ol",
        "h": "stack",
        ["stack"]: "3Ol",
        "b": "3Ol",
        "f": "3Ol",
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
const v11 = f0();
function f12() {
    return f0;
}
function f13() {
    return v9;
}
f0 - v10;
let v15 = delete v9?.b;
!v15;
v11[v15] >>= v15;
v9[v11];
try {
    v9[f12] = f0;
} catch(e18) {
}
const v19 = [f13];
const v20 = [f12,v19];
[v19,f12];
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try { a27.match(v11); } catch (e) {}
    try {
        this.b = a27;
    } catch(e30) {
    }
    try {
        Object.defineProperty(this, "b", { get: f13, set: f12 });
        try { a28(a27, a28, this, v20); } catch (e) {}
        try {
            this[270] = this;
        } catch(e33) {
        }
        this.a = v10;
    } catch(e34) {
    }
}
const v35 = new v15("n", v10);
v35[270] = v35;
new F25("n", v9);
new F25("bigint", v10);
let v39 = 2.220446049250313e-16;
167.17964779139515 >> 167.17964779139515;
class C42 {
    constructor(a44) {
        const o45 = {
            ...this,
        };
        o45.d = o45;
        try {
            v39 = -1.0;
        } catch(e46) {
        }
    }
    [v39];
    #e = -1.0;
}
try { new C42(v11); } catch (e) {}
const v48 = new C42(v39);
const v49 = v48?.constructor;
try { new v49("bigint"); } catch (e) {}
const v51 = new C42(167.17964779139515);
const v52 = new C42(167.17964779139515);
const v53 = v52?.constructor;
try { new v53(f13); } catch (e) {}
let v55 = 128;
v55++;
function F58(a60, a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(a60); } catch (e) {}
    a60.g = a60;
    const v64 = a61?.constructor;
    try { new v64(this); } catch (e) {}
    try {
        this.e = a61;
    } catch(e66) {
    }
}
F58.arguments = F58;
const v67 = new F58(F58, v52, v48);
v67.length;
const v69 = new F58(v52, v51);
const v70 = new F58(v39, v48, v48);
try {
    v51.fuck([v67,v55,v70,v48,167.17964779139515], -2058640984);
} catch(e73) {
    e73.message = e73;
}
try {
    v15 = v55;
} catch(e74) {
}
f12 || F58;
function f76() {
    return v70;
}
f76.d = f76;
try { v48["indexOf"](v70, v48, v69); } catch (e) {}
