function f0() {
}
1453 >> 1453;
class C5 {
    #a = 1453;
    1073741825;
}
C5.name = C5;
const v6 = new C5();
v6[1073741825];
-1000000000000.0 & -1000000000000.0;
const v10 = [-1.80567059564844,-2.4808480102328723,-1.80567059564844];
const v11 = [v10,v10];
[v11,-1.80567059564844,-1.80567059564844,v11,-2.4808480102328723];
let v13 = undefined;
const o14 = {
};
v13 = o14;
try { Math.random(); } catch (e) {}
Math.log10(1453);
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v22 = new F20();
const v24 = new Uint32Array(Uint32Array, Uint32Array, 4);
const v26 = v11.constructor;
v26.prototype;
new v26(v24, v22, 839612.5677247904);
function F30(a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this.constructor;
    v33.e = v33;
    try { new v33(); } catch (e) {}
    this.g = -1;
}
~-9223372036854775807;
-(536870912n << 536870912n);
class C44 {
}
try { new C44(); } catch (e) {}
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    function f52() {
        return f0;
    }
    Object.defineProperty(a51, Symbol.toPrimitive, { writable: true, configurable: true, get: f52 });
    try { this.propertyIsEnumerable(a51); } catch (e) {}
    a51.caller = a51;
    function f57() {
        function F58(a60, a61, a62) {
            if (!new.target) { throw 'must be called with new'; }
            a61 === a61;
            const v66 = new Uint32Array(5);
            new Set(v66);
            new BigUint64Array();
            /anVXYFzN(x)(x)(x)\3/gvdms;
        }
        function f72() {
            for (let v73 = 0; v73 < 5; v73++) {
                const v74 = new F58(F58, f72, v73);
                const o75 = {
                };
                const v76 = o75[o75];
                for (const v77 of v76) {
                    v76();
                }
                const v79 = v74.constructor;
                const o80 = {
                    "toPrimitive": v79,
                };
                new Float64Array(2147483647);
                new v79();
            }
            return f72;
        }
        const v86 = new Date();
        v86.setUTCFullYear(Date, v86, Date);
        function f89() {
            Math.cos(Math);
            return Math;
        }
        ("Vre").constructor.fromCodePoint(undefined);
        return 1024;
    }
    try { f0(); } catch (e) {}
}
F46.e = F46;
const v95 = new F46(F46, F46, F46, F46);
const v96 = v95?.constructor;
try { new v96(v24, v22, v22, -1); } catch (e) {}
