function f1(a2) {
    let v3 = 10;
    for (; v3--;) {
    }
    return v3;
}
WeakMap[Symbol.toPrimitive] = f1;
function f7(a8) {
    class C9 {
        constructor(a11, a12, a13) {
            for (let v14 = 0; v14 < 25; v14++) {
                const o18 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o18);
            }
        }
    }
    return WeakMap;
}
WeakMap.toString = f7;
const v20 = new WeakMap();
Object.defineProperty(v20, 0, { configurable: true, value: Symbol });
const v21 = [-54017,128,536870887,-1,0];
const v22 = [268435440,6,519616105,9007199254740991];
function f23() {
    function f24() {
    }
    return f24;
}
v22[Symbol.toPrimitive] = f23;
const v27 = [-9223372036854775807,50426,-61371];
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "h", { writable: true, configurable: true, enumerable: true, value: a30 });
    try {
        this.h = v20;
    } catch(e31) {
    }
}
const v32 = new F28(v27);
function f33() {
    return f7;
}
function f34(a35) {
}
Object.defineProperty(v32, "toString", { get: f33, set: f34 });
new F28(v21);
const v38 = new F28(v27);
class C39 {
    constructor(a41, a42, a43) {
        function f44() {
            return f33;
        }
        function f45(a46) {
            const o59 = {
                valueOf() {
                    eval();
                    return ("-1723624938").slice(1024, 1024);
                },
            };
        }
        Object.defineProperty(this, "constructor", { writable: true, get: f44, set: f45 });
        function f60(a61, a62) {
            class C65 {
                ["9007199254740991"] = "a";
            }
            new C65();
            return f34;
        }
        a42.toString = f60;
        function f67() {
            return f34;
        }
        function f68(a69) {
            const v71 = new Date();
            v71.setUTCFullYear();
        }
        Object.defineProperty(a41, "toString", { configurable: true, enumerable: true, get: f67, set: f68 });
        try { this.propertyIsEnumerable(a42); } catch (e) {}
        a41[0] = a41;
        %VerifyType(F28);
        -(-128);
        try { Math.expm1(WeakMap); } catch (e) {}
        let v80 = 5;
        let v81 = 4096;
        v81--;
        let v83 = 1.0921116632242459e+308;
        v80++;
        v22 || v22;
        const v86 = v22 >> v22;
        v86 - v86;
        Math.atanh(v22);
        ++v83;
    }
}
const v90 = new C39(v27, v38, v21);
v90.toString = f7;
const v91 = v90?.constructor;
try { new v91(v20, v90, v27); } catch (e) {}
const v93 = new C39(v27, v38, v90);
try { v93.__defineGetter__(v22, C39); } catch (e) {}
new C39(v22, v32, v90);
class C96 {
    [v38];
    p(a98, a99, a100, a101) {
        return v22;
    }
    static d = F28;
    get c() {
        let v105 = this;
        ({"d":v105,"f":v105,} = v105);
        let v107 = 7;
        let v109 = 1.4049317205967e+308;
        let v110 = --v107;
        v109 * v27;
        v110--;
        v109--;
        return v93;
    }
}
new C96();
new C96();
const v116 = new C96();
v116.constructor = f34;
const v117 = v116?.constructor;
try { new v117(); } catch (e) {}
function F119() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v121 = 0;
        do {
            v121++;
        } while ((() => {
                5 !== 5;
                const v125 = v121 < 5;
                v125 && v125;
                return v125;
            })())
        new F119();
    } catch(e128) {
    }
}
new F119();
