class C2 {
}
class C3 {
}
const v4 = new C2();
try { v4.propertyIsEnumerable(C3); } catch (e) {}
const v6 = new Array(2422);
class C7 extends Array {
    constructor(a9) {
        super(a9);
        [-0.0,3.5501749464532004,-0.0,-2.220446049250313e-16,0.7626441105891978,-585.9055525866645,1e-15,1000000.0] ** "IxTD";
        Math.log1p(5.712452742881646e+307);
        v6[super.some(a9)] = this;
        this[Symbol.isConcatSpreadable] = 2422;
    }
    static f = 2422;
    #a;
    static g = v6;
    static e = Array;
    static #c = v6;
    /*
    constructor(a20, a21) {
        super[v6] = v6;
    }
    */
    /*
    constructor(a23, a24, a25, a26) {
        super();
        function f27() {
            const v28 = [];
            v28[6] = v28;
            const o31 = {
                set b(a30) {
                },
            };
            return a26;
        }
        for (let v32 = 0; v32 < 5; v32++) {
            f27();
            %OptimizeFunctionOnNextCall(f27);
        }
    }
    */
}
const v34 = new C7(2422);
const v35 = new C7(v34);
const v36 = new C7(v6);
function f37() {
    return Array;
}
function F38(a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a41;
        const t54 = [1000000000000.0,1e-15];
        t54[3] = -1000000.0;
        const v45 = [];
        /abc?/gvmy.exec("Q8F");
        const t58 = "Q8F";
        t58[2078209647] = v45;
    } catch(e49) {
    }
    try {
        this.a = a41;
    } catch(e50) {
    }
    try {
        this.d = v34;
    } catch(e51) {
        new Uint8Array(268435440);
        function f55(a56, a57, a58, a59) {
            const o64 = {
                [f55](a61, a62, a63) {
                },
            };
            return a59;
        }
        f55();
    }
}
new F38(F38, v36, v36);
new F38(v35, v6, v36);
new F38(Array, v36, v34);
("6Ct").normalize();
