const o3 = {
    "maxByteLength": 1000,
};
try {
    const t4 = 414353240;
    t4.b = o3;
} catch(e4) {
}
function f7(a8, a9) {
    const v10 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
    let v12;
    try { v12 = gc.bind(v10); } catch (e) {}
    v12 /= gc();
    const o67 = {
        4294967295: a8,
        [true]: 256,
        [a9](a15, a16, a17, a18) {
            let v19 = 0;
            while ((() => {
                    new Uint32Array(186);
                    let v24 = 9007199254740991n * 9007199254740991n;
                    v24--;
                    return v19 < 3;
                })()) {
                a18 = a8;
                const o58 = {
                    set a(a29) {
                        let v31 = ~1531487198;
                        const v32 = [748666.7832804511,3.0];
                        class C34 extends Float64Array {
                            [v32];
                        }
                        const v35 = v31++;
                        class C36 {
                            static #m(a38) {
                            }
                        }
                        const v39 = v31();
                        const v40 = C36();
                        const v41 = [];
                        const v42 = [v40];
                        class C43 extends C36 {
                            #n(a45, a46, a47, a48) {
                                function f49() {
                                }
                            }
                            #g;
                        }
                        const v50 = C43();
                        class C52 extends v42.constructor {
                        }
                        const v53 = new v42();
                        Object.defineProperty(v53, 65537, { value: v39 });
                        try { v50.m(v41); } catch (e) {}
                        !v35;
                        try { a29(); } catch (e) {}
                        v41[414353240];
                    },
                };
                v19++;
            }
            function F60(a62, a63) {
                if (!new.target) { throw 'must be called with new'; }
                const v64 = this.constructor;
                try { new v64(this); } catch (e) {}
                a63++;
                this.g = a62;
            }
            return a18;
        },
    };
    return o67;
}
f7(-61220, f7);
f7(-61220, 414353240);
f7(256, 414353240);
new Uint16Array(6);
function f75() {
    const o79 = {
        [null]() {
            try { this.null(f75, this, this, f75); } catch (e) {}
            super.b;
        },
    };
    return o79.null();
}
new BigUint64Array(BigUint64Array);
new Uint8ClampedArray(3235);
o3.constructor;
const v90 = new BigInt64Array(256);
v90.includes(null);
delete v90?.h;
function F93() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = true;
}
const v95 = new F93();
function f96(a97, a98) {
    const o100 = {
        ...a98,
        get h() {
            return this;
        },
    };
    return a98;
}
f96();
f96(v95, v95);
