class C3 {
    constructor(a5) {
        a5[C3];
        function F7(a9, a10, a11) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = "f";
            } catch(e12) {
            }
            try {
                this.c = a5;
            } catch(e13) {
            }
        }
        const v14 = new F7(F7, F7, C3);
        const v15 = new F7("h", "f", "h");
        new F7(v14, v15, "f");
    }
    5;
    static 536870887;
    static {
        this.__proto__;
        try {
            this.b = "trimLeft";
        } catch(e19) {
        }
        const v20 = (a21, a22, a23, a24) => {
            function f25() {
                return this;
            }
            return f25;
        };
    }
    1494 = "h";
    static #c = "f";
}
new C3();
const v27 = new C3();
new C3();
const v31 = new Float32Array(1000);
new Int8Array(4096);
new Int32Array(1283);
let v38 = 0;
do {
    v27[4294967295] /= 4096;
    v38++;
} while (v38 < 1)
C3[16];
let {"length":v44,} = "f";
let v45 = 0;
while (v45 < 4) {
    v44 = v45;
    v45++;
}
try { v27.n(C3, 1000, v31, Float32Array); } catch (e) {}
-1000000000000.0 >>> -1000000000000.0;
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    const v59 = Array(19793);
    try { v59.reduce(); } catch (e) {}
    for (const v61 of v59) {
    }
    [[v59,v59]];
    ("function")[0];
    new Set();
    const v68 = [];
    ("f")[255];
    g = -1000.0;
    let v73 = -113.78888436210639;
    const v74 = v73++;
    Math.asinh(this);
    ~v74;
    v68.toSpliced();
    v68 >= Uint16Array;
}
const v80 = new F55();
v80.constructor;
class C82 {
}
