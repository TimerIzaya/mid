const v0 = [];
function f1() {
    return v0;
}
const t4 = -1024;
const v6 = new t4();
[v6,f1];
const v9 = [1179233290,v6,WeakSet,true];
[v9];
const t8 = [Float64Array];
t8.length = v9;
let v14 = 0;
while (v14 < 5) {
    v14++;
}
/4H/gvisy.compile(/[m]/gvdimsy);
new WeakSet();
const v7 = new Float32Array(1652);
v7 <= Float32Array;
class C9 {
    static 8 = 1652;
    static #toString(a11, a12) {
        let v13;
        try {
        const t0 = 1652;
        v13 = t0();
        } catch (e) {}
        a12 in v13;
    }
    #c;
}
class C16 extends 1652 {
    set a(a18) {
    }
    static #o(a20, a21, a22, a23) {
        class C24 extends this {
            static #c;
        }
    }
}
try { C16.toReversed(); } catch (e) {}
function F29(a31, a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a31;
    } catch(e35) {
    }
    try {
        this.c = a31;
    } catch(e36) {
    }
}
const v37 = new F29("1y", "valueOf", "valueOf", "1y");
const v39 = new Uint16Array();
const o40 = {
    ...v39,
};
const v41 = new F29("1y", v37, "valueOf", "127");
new F29("1y", "valueOf", "valueOf", v41);
new Uint16Array(4);
new BigUint64Array(1583);
new Uint8ClampedArray(255);
Uint32Array.name;
new Uint32Array();
async function f64(a65, a66, a67) {
    const v68 = await a66;
    let v69;
    try { v69 = v68.lastIndexOf(7, 59769, v68); } catch (e) {}
    return v69;
}
f64(-4294967295, 59769, 4);
Float64Array.prototype;
const v74 = new Float64Array(11);
v74[8] = v74;
