function f0() {
}
function f1() {
    const o69 = {
        get c() {
            function f5(a6, a7, a8, a9) {
                try { a6(); } catch (e) {}
                a7 & a7;
                const v12 = 3 | a7;
                v12 * v12;
                a6 ^ a6;
                a7 < a6;
                const o19 = {
                    n(a17, a18) {
                        return a18;
                    },
                };
                return Uint8Array;
            }
            super[f0] = f0;
            --f0;
            class C21 {
                #toString(a23, a24) {
                    for (let v25 = 0; v25 < 32; v25++) {
                        a23["p" + v25] = v25;
                    }
                    3 in this;
                    new Float64Array(16);
                    new Int8Array(1330);
                    const v37 = new Int32Array(47);
                    return v37;
                }
                toString(a39, a40, a41, a42) {
                    const v44 = ("throw")?.trimRight;
                    try { v44(); } catch (e) {}
                    const v49 = new Uint8ClampedArray(512);
                    new Uint8ClampedArray(798, ...v49, eval());
                }
                constructor(a54, a55) {
                    for (let i = 0; i < 5; i++) {
                        this[this];
                    }
                }
            }
            const o59 = {
                "maxByteLength": 4034987614,
            };
            const v61 = new SharedArrayBuffer(57, o59);
            new DataView(v61);
            return 57;
        },
        "d": f1,
        valueOf(a65, a66) {
            return f1;
        },
        o(a68) {
        },
    };
    return o69;
}
const v70 = f1();
f1();
function f72() {
    const v74 = ([f72,f72]).constructor;
    const v75 = new v74();
    class C76 extends v74 {
    }
    const v77 = new C76();
    let v78;
    try { v78 = v77.reduceRight(); } catch (e) {}
    new v78();
    const v80 = v70 ** v70;
    const v81 = v80 + v80;
    const v82 = v81 <= v81;
    const o83 = {
    };
    o83.b = v82;
    return v75;
}
%PrepareFunctionForOptimization(f72);
f72();
%OptimizeFunctionOnNextCall(f72);
f72();
f1();
[1000000.0,Infinity,481952.281229452,1000000000000.0];
[1.0];
[-1e-15,0.7158105226782641,-1.7976931348623157e+308];
for (let i = 0; i < 5; i++) {
    function f93() {
        arguments[1073741823];
        return f93;
    }
    f93();
    %OptimizeFunctionOnNextCall(f93);
    function f97(a98, a99, a100, a101) {
        a98.a = a99;
        return a100;
    }
    function F102() {
        if (!new.target) { throw 'must be called with new'; }
        async function f105(a106, a107, a108) {
            return a108;
        }
        for (let i110 = 970636227n, i111 = 10; i110 < i111;) {
        }
        AggregateError.captureStackTrace(AggregateError);
    }
}
