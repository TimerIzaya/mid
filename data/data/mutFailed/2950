const v2 = new Uint32Array(37);
const v5 = new Uint8ClampedArray(8);
const v8 = new BigUint64Array(1965);
function f9(a10, a11) {
    class C12 {
        [a10] = a10;
    }
    new C12();
    Symbol.for(Symbol);
    new Uint8Array(268435440);
    new C12();
    new C12();
    const o56 = {
        m(a22, a23, a24, a25) {
            v8[0] = 1965;
            new Uint32Array();
            function F28() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C30 extends F28 {
            }
            super[a11] = 1965;
            for (let v32 = 0; v32 < 25; v32++) {
            }
            [-4.0,-3.0,-7.745906537435259,-1.2266228113922306e+308,-Infinity,-2.0,-2.0,1e-15,-694511.6819848374,-2.0];
            v2 ^ "-792442332";
            let v36 = 7;
            class C39 {
            }
            class C40 extends C39 {
                static valueOf(a42, a43) {
                    super[268435441] = 1479696428;
                }
            }
            const v45 = ++v36;
            const o46 = {
            };
            (["object"]).pop();
            v36 ** a22;
            Math.ceil(a10);
            Math.hypot(v36);
            v45 ^ v45;
            v45 >> a10;
            Math.exp(a25);
            return C12;
        },
    };
    return o56;
}
f9(8, 1965);
f9(1965, v5);
f9(1965, 8);
const v63 = new Uint32Array(381);
new v2(v63);
