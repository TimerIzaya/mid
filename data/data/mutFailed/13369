const v3 = [-1000000000.0,-1000000000.0];
let v4 = Int16Array;
const v5 = new v4(v4, v4, v4);
const v7 = new Int32Array(-1000000000.0);
v5[v7 / v5];
const v10 = [0.534409558084521];
const v11 = [v3,v10,0.534409558084521,v10,v3];
try { v11.find(-1000000000.0); } catch (e) {}
8.762733909339037 * 8.762733909339037;
new Uint16Array(0);
try { Uint32Array.p(0, Uint32Array); } catch (e) {}
const v23 = new Uint32Array(14);
Math.log10();
v4++;
new Int16Array(14);
v23[10];
107 / 107;
Proxy.prototype = Proxy;
new Proxy(107);
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a37(107, 107); } catch (e) {}
    class C39 {
    }
    C39.d = C39;
    const v40 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f41(a42, a43, a44, a45) {
        const v46 = /(?:a*)+q(?<a>.)/guds;
        v46.dotAll = v46;
        function f47(a48) {
            const v49 = v40.constructor;
            try { v49.call(v49); } catch (e) {}
            try {
                v46.compile("bigint");
            } catch(e53) {
            }
            let v54;
            try { v54 = v49.isArray(v46); } catch (e) {}
            v54 || v54;
            const v56 = a48.a;
            try { new v56(419003.8145096435, 419003.8145096435); } catch (e) {}
            const v59 = v56.$2.replaceAll(C39, a42);
            new Int32Array();
            function F61(a63, a64, a65) {
                if (!new.target) { throw 'must be called with new'; }
                a64 === a64;
                this.constructor;
            }
            try { v59.trimEnd(); } catch (e) {}
            return a43;
        }
        for (let [i75, i76] = (() => {
                let v69 = 0;
                v69++;
                function f71(a72, a73) {
                    return a44;
                }
                return [v69, 10];
            })();
            (() => {
                i75 >>> i75;
                const v78 = i75 < i76;
                !v78;
                return v78;
            })();
            (() => {
                i76--;
                Symbol.hasInstance = Symbol;
                const v84 = Symbol.toPrimitive;
                const o88 = {
                    [v84]() {
                        v84["isArray"]();
                    },
                };
            })()) {
            for (let v91 = 0; v91 < 10; v91++) {
                f47(v46);
                function f93() {
                    const o100 = {
                        "c": v91,
                        "f": f93,
                        __proto__: f93,
                        set b(a95) {
                        },
                        trimLeft(a97, a98) {
                            class C99 {
                            }
                        },
                    };
                    const v101 = [];
                    const o108 = {
                        set g(a103) {
                        },
                        [v101](a105, a106, a107) {
                        },
                    };
                    return v91;
                }
            }
        }
        const v111 = new Uint8Array(64);
        new Int32Array(v111);
        return a37;
    }
    for (let v114 = 0; v114 < 10; v114++) {
        const v116 = f41()?.constructor;
        try { new v116(0.1945864123168325); } catch (e) {}
    }
    %OptimizeFunctionOnNextCall(f41);
    f41();
}
new F34(F34, F34);
