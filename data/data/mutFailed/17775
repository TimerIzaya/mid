new WeakMap();
class C5 extends WeakMap {
    #n(a7, a8) {
        const v9 = super[a8];
        super[WeakMap] = a8;
        return v9;
    }
    static get f() {
        this * WeakMap;
        this[this];
        new Uint16Array(129);
        new Int16Array(3214);
        new Float32Array(16);
        return Uint16Array;
    }
}
new C5();
new C5();
new C5();
[1073741824,-268435456,16442,-8];
[-22798,18793,-13,4294967297,9007199254740991];
[58620,27484,65537,-2147483649,-28209];
[128,55416,15,-1502660307,9007199254740990,9,-268435456,-1073741824,4294967296];
[-1961194620,-256,-1465354383,3,128,-10];
[1335110205,2147483647,8,536870887];
for (let v31 = 0; v31 < 25; v31++) {
    const v32 = [601759695];
    const v33 = [1073741824,1073741823,1376142744,1073741825];
    function f34(a35, a36, a37, a38) {
        function f39() {
            return a37;
        }
        try { v33["find"](..."find", a38, ...v32); } catch (e) {}
        BigInt64Array.prototype.call(f39);
        return a37;
    }
    for (let v45 = 0; v45 < 10; v45++) {
        f34();
    }
}
