let v1 = "268435456";
/a{0}/vd;
const v4 = /a{0,1}?/gums;
/Ba{0,1}?/vdims;
const v9 = /a\sc/gm;
function f10(a11) {
    const o14 = {
        n(a13) {
            return a13;
        },
        [a11]: a11,
    };
    return a11;
}
f10(v9);
const v16 = f10();
new WeakMap();
class C19 extends WeakMap {
    static #toString(a21, a22) {
        let v23;
        try { v23 = new a21(this, this, this, this); } catch (e) {}
        v1 -= v23;
        new Float32Array(15);
        new Uint8ClampedArray(6);
        const v32 = new Float32Array(589);
        return v32;
    }
}
new WeakMap();
new v16();
new C19();
function f36() {
    const o47 = {
        "d": 268435440,
        "a": 4.0,
        __proto__: "cJ",
        "h": "cJ",
        valueOf(a41) {
            const o42 = {
                __proto__: this,
            };
        },
        toString(a44, a45, a46) {
            return v4;
        },
        "execution": "cJ",
        "call": f36,
        "c": "cJ",
    };
    return o47;
}
const v48 = f36();
const v49 = f36();
new BigUint64Array(3375);
Array(4087);
[f36(),v48,v49,v49];
[];
const v59 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
[65535];
new Set();
function F63(a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new BigUint64Array(0);
        for (let i73 = 0, i74 = 10;
            (() => {
                i73 < i74;
                const o79 = {
                    n(a77, a78) {
                        return this;
                    },
                };
                new BigUint64Array(3375);
                const v83 = ["P","P"];
                const o84 = {
                    "arguments": v83,
                };
                [-256,13351,5138,2,-4294967295,1000,268435440];
                class C86 {
                    3164398692 = "P";
                }
                let [v87,,v88,...v89] = this;
                return v16;
            })();
            i73++) {
        }
    } catch(e95) {
    }
    try {
    } catch(e96) {
    }
    this.a = a66;
}
function F97(a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    const v101 = this.constructor;
    try { new v101(v59, this); } catch (e) {}
    ++a100;
}
new F97(F97);
