function f3() {
    return -2.220446049250313e-16;
}
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a7;
    } catch(e8) {
    }
    try {
        this.a = -2.220446049250313e-16;
    } catch(e9) {
    }
}
const v10 = new F4(f3, 0.016446136212951323);
new F4(v10, v10);
new F4(f3, F4);
[Infinity,-129.96022333378062,677.0017570188647,-367856.87780039234,-4.297730448858184,1000000.0,0.13063185598928828,3.0,0.32051983532787076];
[1000000.0,0.5860457468847045,-1.7976931348623157e+308,-1.0,1000000.0,651.4507575315324,-Infinity,4.827812522793023,-0.5625181483762276,749876.9412359165];
const v15 = [-2.220446049250313e-16,0.6661313312813485,Infinity,4.0,3.0,2.220446049250313e-16,-3.0,-9.850602056160875,0.0,-1000000.0];
function f16() {
    return v15;
}
function f17() {
    return f3;
}
function f21(a22, a23, a24, a25) {
    return a22;
}
const v26 = F4();
-128 / -128;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v31 = [601759695];
function f32(a33, a34, a35, a36) {
    a34 * a34;
    a35 == a35;
    arguments[2] = arguments;
    arguments.toString(v31, -128);
    function f41() {
        ("Vre").toLocaleUpperCase;
        ("Vre").fixed();
        const o50 = {
            "c": v31,
            valueOf(a48, a49) {
            },
            "e": -268435456,
        };
        const v51 = o50.valueOf();
        v51 * v51;
    }
    Int8Array.a = Int8Array;
    const v54 = new Int8Array();
    v54.buffer;
    %OptimizeFunctionOnNextCall(f21);
    ("find").strike();
}
%PrepareFunctionForOptimization(f32);
const v58 = f32();
%OptimizeFunctionOnNextCall(f32);
f32(v58, f32, -128, v26);
