const v2 = new Uint16Array(8);
const v5 = (8).name;
try { v5.fontcolor(8); } catch (e) {}
const v7 = new Float32Array(512);
try { v7.join(v5); } catch (e) {}
const v11 = new Int32Array(129);
const t6 = 512;
t6[89] = v11;
false && false;
try { new BigUint64Array(Float32Array, Float32Array, 129); } catch (e) {}
const t10 = false;
const v16 = new t10();
try { v16.entries(); } catch (e) {}
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    a21[6];
    a21?.constructor;
    try { new this(this); } catch (e) {}
    function f25() {
        try { v16.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
    }
    Symbol.g = Symbol;
    const v30 = Symbol.toPrimitive;
    Symbol.for(v30.description);
    Object.defineProperty(this, v30, { writable: true, value: f25 });
}
let v34;
try { v34 = new F18(BigUint64Array, v2); } catch (e) {}
const v35 = v34?.constructor;
try { new v35(v34, v34); } catch (e) {}
const v37 = new F18(BigUint64Array, F18);
v37.length = v37;
class C38 {
    static [v37];
}
try { new C38(); } catch (e) {}
let v40;
try { v40 = C38.bind(512); } catch (e) {}
try { v40.bind(Uint16Array); } catch (e) {}
