class C3 {
    [-5.243162558204449e+307] = -5.243162558204449e+307;
    [9];
    set c(a5) {
        let v6;
        try { v6 = a5(-964.3537052019628); } catch (e) {}
        v6 = this;
        a5 < a5 ? a5 : a5;
    }
    static [9];
    static [-5.243162558204449e+307] = 9;
    b = -964.3537052019628;
    4 = -5.243162558204449e+307;
}
function f9() {
    try { C3.toGMTString(-5.243162558204449e+307, -5.243162558204449e+307, -5.243162558204449e+307); } catch (e) {}
    const v12 = new WeakMap();
    const v13 = /8[\cA]v/uisy;
    function f14(a15, a16) {
        v12.set([a16,a16,a16,a16,a16]);
        ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
    }
    v13[Symbol.toPrimitive] = f14;
    return v12;
}
C3.valueOf = f9;
C3[9] = C3;
const v25 = new C3();
v25[9];
const v27 = new C3();
const v28 = new C3();
-(-964.3537052019628);
-623 >> -623;
473 * 473;
class C41 extends C3 {
    static toString(a43, a44) {
        super[a44];
        try { C3["m"](-10, v28); } catch (e) {}
        return this;
    }
    [-10] = v27;
    static 105;
    static [-2];
}
const v51 = new C41();
new C41();
new C41();
function F54() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = F54;
    function f57(a58) {
        return a58;
    }
    class C59 extends f57 {
        3492 = 473;
        static h = C3;
    }
    4294967297 >>> 4294967297;
    try {
        this.g = this;
    } catch(e61) {
    }
}
new F54();
new F54();
const v64 = new F54();
function f65(a66) {
    new Int16Array(305);
}
Object.defineProperty(v64, "d", { writable: true, configurable: true, set: f65 });
v64.d = v64;
const v72 = new Uint32Array(3551);
try { v72.slice(v72, v51); } catch (e) {}
const v76 = new BigInt64Array(10);
const v77 = v76[0];
const v79 = [837449509,1,0,28677,-1493785230,14423,536870887,1395954475,1096550133];
const v80 = [-7,-5,-10,7];
function F81(a83) {
    if (!new.target) { throw 'must be called with new'; }
    Uint8Array.d = v76;
    new Uint8Array();
}
const v87 = new F81(v79);
const v89 = Symbol.toPrimitive;
v87[v89] = f9;
const v90 = new F81(v79);
function f91() {
    [-905.5805778737791,1e-15,1.1849226255463278e+308,4.0,-1.7976931348623157e+308,-Infinity,7.967614148834397,1.7976931348623157e+308];
    [-5.9593494245493055,5.969329916975472,2.2250738585072014e-308,-2.220446049250313e-16,1.7976931348623157e+308,-1.5913825889231232e+308,189.11089870943556,1e-15];
    [-1.0,1000.0,NaN];
    return -964.3537052019628;
}
v90.toString = f91;
try {
    const v97 = new BigUint64Array(4);
    [v97];
} catch(e99) {
}
try {
    const o100 = {
    };
} catch(e101) {
}
try {
    const o102 = {
    };
} catch(e103) {
}
try {
    const o104 = {
    };
} catch(e105) {
}
const v106 = new F81(v79);
class C107 extends F81 {
    static valueOf(a109, a110, a111, a112) {
    }
    [v90] = v80;
    [v79] = v79;
    [v87] = v106;
}
const v113 = /2a\sc/uds;
v113[Symbol.toPrimitive] = f91;
function f116() {
    try { v113.test(v113); } catch (e) {}
}
v113[Symbol.toPrimitive] = f116;
const o122 = {
    [v113](a121) {
    },
};
const v124 = new Float32Array(15);
function f125(a126, a127) {
    a126 <= a127;
    --a126;
    return v89;
}
v124[Symbol.toPrimitive] = f125;
v124[0] = v124;
948737.12760097 << 948737.12760097;
let v137 = 2.2250738585072014e-308;
v137--;
const v142 = new Int16Array(2183);
Uint8Array.d = v77;
Uint8Array.d = Uint8Array;
new Uint8Array(255);
Int16Array.name;
const v149 = new Int16Array(8);
async function f151(a152, a153, a154) {
    delete v149[-1000000000.0];
    let [v156,v157,...v158] = v142;
    v142[5];
    await v157;
    return Uint8Array;
}
const o161 = {
};
Object.defineProperty(o161, "c", { value: "d" });
o161.c = o161;
try {
} catch(e162) {
}
try {
    const v163 = -1024n != C3;
    try { f151(1000000000.0, v163, ...v163, 135.68951961804942, v163); } catch (e) {}
    try {
        new Int16Array(Symbol);
    } catch(e166) {
    }
    const o167 = {
    };
    o167.b = "d";
    o167.b = o167;
} catch(e168) {
}
try {
    const o169 = {
    };
    o169.h = o169;
} catch(e170) {
}
try {
    let o171 = {
    };
    for (const v172 of v142) {
        let {"c":v173,"e":v174,"h":v175,} = v172;
        ++o171;
        Math.floor(v174);
        Math.log1p(v173);
        ++v173;
    }
    o171.g = Float32Array;
} catch(e184) {
}
