function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 5;
    } catch(e3) {
    }
    try {
        this.a = 5;
    } catch(e4) {
    }
}
let v5 = new F0();
new F0();
new F0();
class C8 extends F0 {
    static toString(a10, a11) {
        new Uint8ClampedArray(1);
        new Int8Array(11);
        new Float64Array(64);
        return 1;
    }
}
const v21 = new C8();
v21.a = v21;
const v22 = new C8();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
new C8();
const v27 = new Map();
v27.size = v27;
const v34 = new Int8Array();
for (const v35 in v34) {
}
const v36 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v37 = [601759695];
const v38 = [1073741824,1073741823,1376142744,1073741825];
function f40(a41, a42, a43, a44) {
    a41 - a41;
    try { a44.find(a43); } catch (e) {}
    arguments[1];
    function f49() {
        -4294967295 * -4294967295;
        const o59 = {
            "e": -4294967295,
            ...v36,
            84: arguments,
            ..."Vre",
            set b(a54) {
            },
            ["Vre"](a56, a57) {
                super[f49];
            },
        };
        return a41;
    }
    f49.name;
    class C62 extends Float32Array {
        constructor(a64, a65, a66) {
        }
    }
    let v67 = f49();
    v67++;
    %OptimizeFunctionOnNextCall(f49);
    let v70;
    try { v70 = v38[a43](..."find", a44, ...v37, ...v38, ...522675525n); } catch (e) {}
    v70 <= a43;
    return arguments;
}
try { f40(964598.6714444079, 964598.6714444079, 964598.6714444079, v37); } catch (e) {}
let v75 = 5;
const v77 = -9 >>> -9;
const v78 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v79 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v79.map(1.0); } catch (e) {}
const t74 = -9;
t74[9] = -124726096;
const v83 = v27.constructor;
try { new v83(); } catch (e) {}
const v86 = Symbol.species;
v78[v86] = 8.580387257773513;
const v88 = ~268435440;
v88 !== v88;
try { Uint8Array.from(Uint8Array); } catch (e) {}
Uint8Array.length;
new Uint8Array(268435440);
v86.description = 964598.6714444079;
v75 = -15;
8 + 8;
const v97 = new Int8Array(8);
[v97];
const v100 = 995 | 995;
v100 & v100;
try { new Uint8ClampedArray(-9, -9, 268435440); } catch (e) {}
new Float32Array();
v5 *= Symbol.toPrimitive;
const v108 = new Uint8ClampedArray(995);
Int8Array.name = Int8Array;
const v110 = new Int8Array(v108);
try { v110.forEach(Symbol); } catch (e) {}
const v112 = v110.copyWithin;
v112.name = v112;
for (let v113 = 0; v113 < 32; v113++) {
    v78[-2] = -9 << v113;
    const v115 = v79[v86];
    try {
        v115.__proto__ = v115;
    } catch(e116) {
        e116.message;
        e116.g = e116;
    }
    const v119 = new Uint8ClampedArray();
    v119.byteOffset;
    Math.sin(/c(?:ab)|cde/vdmy.exec());
    const v126 = ("object")?.padEnd;
    try { new v126(v77); } catch (e) {}
    const v128 = "object" + v113;
    v128[2];
    const v130 = v128?.trim;
    try { new v130(); } catch (e) {}
    v79[v128] = v113;
}
const v132 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F133(a135, a136, a137, a138) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a135;
}
const v139 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C141 {
    static #e;
    m(a143, a144, a145, a146) {
        v139.#e;
        a144.#e = -1;
    }
}
let v149 = 0;
v149 & v149;
do {
    break;
    v132[Symbol.asyncIterator] = v78;
    v149++;
} while (v149 < 9)
let v156 = 995;
v156++;
const v159 = Uint8ClampedArray.name;
const v160 = new Uint8ClampedArray(v156);
v160[727] = v160;
try { new Int8Array(v159, v159, v159); } catch (e) {}
const v163 = new Int8Array(v160);
v163[865];
