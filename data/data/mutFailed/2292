const v0 = [-10,5,6,1079985684,-1,127];
const v1 = [257,-1073741824];
const v2 = [-2147483648,-65535,-268435456,7,1835420813,-15,1478749325,-30689,-36170];
class C6 {
    static p(a8, a9, a10) {
        let v11;
        try { v11 = this.findIndex(v2, -1.7976931348623157e+308, a9, v0); } catch (e) {}
        let v12;
        try { v12 = a10.splice(v11, v11, this); } catch (e) {}
        a9 |= v0;
        let v13 = v12?.[v12];
        a10?.[0];
        v12 >= a10;
        return v13 = 0.29172676542275344;
    }
    g;
    static #c = v1;
    static #e = v0;
    m(a17, a18, a19, a20) {
        return -1.7976931348623157e+308;
    }
    #f = v1;
}
new C6();
const v25 = new C6();
new C6();
let v28 = "undefined";
class C30 {
    get e() {
        const v32 = super.d;
        const v33 = this[v32];
        function F34(a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                v1[128] = v33;
                const v40 = Symbol.species;
                const t36 = "5";
                t36[v40] = v40;
                /(?:ab)?xyz?/gud;
                /N[\ca]na+\cj\cJ\ci\cI\ck\cK(?:a+)*/gusy;
                /7oa\bc/vdimsy;
                this.f = 0.29172676542275344;
            } catch(e44) {
            }
        }
        new F34(-2.8120917377158854, v2, v25);
        new F34(v32, v32, v25);
        const v47 = new F34(0.29172676542275344, "string", this);
        return v47;
    }
}
C6.a >>>= 65536;
let [v52,v53,...v54] = "5";
v28++;
try {
    v2.length = 10;
} catch(e57) {
}
("65535").lastIndexOf(128, 65536);
new C30();
new C30();
new C30();
const v62 = [-65535,452354247,-2,78479092,-2147483648,1073741823,5,6528,-1024,-261130286];
const o73 = {
    get f() {
        const o65 = {
        };
        try {
            o65.a = "string";
        } catch(e66) {
        }
        try {
            const o67 = {
            };
            o67.a = "string";
            o67.d = v53;
        } catch(e68) {
        }
        try {
            const o69 = {
            };
            o69.a = "string";
            o69.d = v53;
            o69.b = -2.8120917377158854;
        } catch(e70) {
        }
        try {
            const o71 = {
            };
            o71.a = "string";
            o71.d = v53;
            o71.e = 0.29172676542275344;
        } catch(e72) {
        }
        return 65536;
    },
};
function f74(a75, a76) {
    new Array(3);
    return Array;
}
Object.defineProperty(o73, "get", { writable: true, value: f74 });
const v81 = new Proxy(v62, o73);
new Int32Array(v81);
