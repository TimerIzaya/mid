[1000000000000.0,-119126.00994975038,-724.2463643965351,NaN,-969078.390351394,-2.3584879208929123e+307,1.0];
function f3() {
    function f4(a5) {
        class C7 extends SharedArrayBuffer {
        }
        return a5;
    }
    return f4;
}
Object.defineProperty(Uint16Array, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f3 });
let v10 = 2;
const o11 = {
    __proto__: 2,
    ...v10,
};
const v12 = new Uint16Array(o11, v10, v10);
Object.defineProperty(v12, "toString", { value: Symbol });
v12[1] = v12;
const v13 = [1.4034683554805349e+308];
[3.0];
let v15 = -958158759;
v15++;
let v17 = 9;
v17--;
const v22 = new Float32Array(0);
try { v22.entries(); } catch (e) {}
new Uint32Array(138);
new Int32Array(128);
const v30 = [];
new Float32Array(v30, 2);
v10 = 2;
class C36 {
    static #g = v30;
    static d;
    static #c;
    static e;
    static {
        Math.exp(-1697 | -1982743944);
    }
}
const v43 = C36?.constructor;
try { new v43(v15); } catch (e) {}
Math.pow(Uint16Array >> 8798, -3.0);
3141 + 3141;
const o63 = {
    o(a60, a61) {
        class C62 {
        }
        return C62;
    },
};
v13["keys"]();
const v73 = new Date(16 | 16);
v73.setFullYear();
-5 >>> -5;
5.0 / -2.220446049250313e-16;
const v85 = new Int16Array();
function F86(a88, a89, a90) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a90;
    } catch(e91) {
    }
    try {
        this.a = a89;
    } catch(e92) {
    }
}
new F86("sinh", 3141, "keys");
new F86("keys", v15, "-34874");
new F86("f", 2, "keys");
const v97 = new BigUint64Array(2, 16);
v85["fill"](v97, 16, 2);
-(-128n);
-9n <= -9n;
