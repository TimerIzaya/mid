function f0() {
    const o17 = {
        "b": 5,
        __proto__: "hasInstance",
        n(a5, a6) {
            a6?.[142];
            new Float32Array(256);
            new Int32Array(64);
            new Int32Array(16);
            return 256;
        },
    };
    return o17;
}
function f18() {
    return f18;
}
function f22(a23) {
    const o38 = {
        valueOf(a25, a26) {
            function F27(a29, a30, a31, a32) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = a31;
                } catch(e33) {
                }
                try {
                    this.h = -9223372036854775807;
                } catch(e34) {
                }
            }
            const v35 = new F27(a25, a23, a23, a26);
            new F27(v35, -12, -9223372036854775807, -9223372036854775807);
            new F27(-12, -12, v35, v35);
            return -536870912;
        },
    };
    return o38;
}
const v39 = f0();
const v40 = f0();
const v41 = f0();
const v42 = [512,2054523761,268435439,128,536870889,12,-24580,-4096,16];
const v43 = [2147483649,24504];
const v44 = [5,1593837297,13];
const v45 = [v39];
const v46 = [v43,v41,v40,v45];
const v47 = [v43,v40,v42];
function F48(a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = v46;
    try {
        this.c = a52;
    } catch(e53) {
    }
}
new F48(v45, v44, v42);
new F48(v47, v39, v45);
new F48(v47, v40, v43);
new Int8Array(64);
new Int8Array(128);
new Uint32Array(1662);
function f67() {
    ("filter")["startsWith"]();
    Math[Symbol.toPrimitive] = f67;
    const v73 = Math.cosh(Math);
    v73 / v73;
    return "startsWith";
}
%PrepareFunctionForOptimization(f67);
f67();
%OptimizeFunctionOnNextCall(f67);
f67();
