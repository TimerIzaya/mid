function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -8162;
    } catch(e3) {
    }
    try {
        this.e = -8162;
    } catch(e4) {
    }
    try {
        this.a = -8162;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v11 = new Array(164);
const v12 = [v11,164];
const v13 = [v11,v12,164,v12,v7];
v11[0] = [v13,v8,v13,v6];
const v15 = v8 & v8;
v11[368] &= 164;
Array["from"](v11, Array, v6);
const v20 = [-1e-15,-2.0,4.0];
const v21 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
const v22 = [-5.0,-2.0,-1.5942587568933252e+308,1.0730723170600494e+307,0.0,-2.2250738585072014e-308,-446.9921213911738];
class C23 {
    [v22] = v21;
    static #c;
    #o(a25, a26) {
        Symbol.search;
    }
    set e(a30) {
        this[this] = v20;
        SharedArrayBuffer();
        Uint8ClampedArray();
    }
}
new C23();
const v38 = new v7();
const v39 = new C23();
class C41 extends "from" {
    constructor(a43, a44, a45) {
        super();
        class C47 extends v38.constructor {
            static #a = this;
            static [v21] = this;
        }
    }
    4294967295;
}
new C41(v15, v39);
/2\111/gdis;
new Uint8ClampedArray(8);
new BigUint64Array(1);
new Uint16Array(3372);
[0.600959953156498,1.0,-Infinity];
new Int8Array(v20);
