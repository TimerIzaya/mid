class C3 {
    valueOf(a5) {
        "otxfR" < "Fw";
        new Int8Array(3663);
        const v11 = [1321234440,-2012385285,503280511,-65535,-50525,1929142229];
        try {
            v11.sort(-5);
        } catch(e13) {
        }
        [] = "-4";
        const v17 = /((((.).).).)?/gvdimy;
        const v18 = /C/gudm;
        let v21;
        try { v21 = Uint32Array(Uint32Array, 1391, v17); } catch (e) {}
        for (let i23 = 0; i23 < 6; i23++) {
            try {
                v18.dotAll = v21;
            } catch(e29) {
            }
        }
        this[4] = "otxfR";
        const t21 = "Fw";
        t21[a5] = "Fw";
        return a5[this];
    }
    constructor(a32, a33) {
        try {
            function f35(a36, a37) {
                'use strict';
                return 255;
            }
            f35("Fw", a32);
            return "Fw";
            new BigInt64Array(243);
            function f45(a46, a47) {
                const o53 = {
                    __proto__: a46,
                    p(a49, a50) {
                        48752008 ^ this;
                        return this;
                    },
                };
                return o53;
            }
            a33.length = 1;
        } catch(e54) {
        }
    }
}
new C3("-4", "Fw");
new C3("otxfR", "otxfR");
new C3("Fw", "otxfR");
[-8,3,3,9007199254740991];
[3832,2,9007199254740990,-536870912,-736544638,-9223372036854775807,-2,4096];
[1024];
for (let i68 = (() => {
        function f65() {
            return f65;
        }
        f65.toString = f65;
        const o67 = {
            [f65]() {
            },
        };
        return 0.8037056182165817;
    })();
    i68 < 10;
    i68++) {
}
const v74 = ("-4").name;
class C75 {
}
function f76(a77, a78) {
    new C75();
    const v80 = new v74();
    const t75 = v80.constructor;
    const v82 = new t75();
    const t77 = v82.getPrototypeOf;
    const v84 = new t77();
    return v84;
}
C75.toString = f76;
for (let v85 = 0; v85 < 5; v85++) {
    function f86() {
        function f88() {
            new Int32Array(257);
            return Symbol;
        }
        Symbol.toString = f88;
        try { new Symbol(); } catch (e) {}
        const v93 = Symbol.toPrimitive;
        Symbol.for(v93.description);
        try { Symbol.bind(v85); } catch (e) {}
        Symbol.for(Symbol.for(v93.description).description);
        try { Symbol.toString(); } catch (e) {}
        Symbol.for(v93.description);
        function f104() {
            const o107 = {
                m(a106) {
                    return f104;
                },
            };
        }
        try { f104(); } catch (e) {}
        const v110 = v93.description.codePointAt(C75);
        v110 - v110;
        v110 & v110;
        v110 + v110;
        return Symbol;
    }
    f86();
    %OptimizeFunctionOnNextCall(f86);
}
