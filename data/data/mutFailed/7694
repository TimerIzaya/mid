function f0() {
}
const v3 = new Uint8ClampedArray(861);
const v6 = new Float64Array(5);
const v9 = new Uint16Array(37);
class C10 extends f0 {
    [f0] = C10;
    constructor(a12, a13, a14) {
        super();
        a12 = a13;
        try {
            v3.__proto__ = a13;
        } catch(e15) {
        }
    }
    static #e = v6;
    static a = Uint8ClampedArray;
    static #d;
    10;
    /*
    constructor(a17, a18) {
        const v19 = v3.constructor;
        try { new v19(f0, 861, 861); } catch (e) {}
        this[5] >>>= 861;
        for (let v21 = 0; v21 < 5; v21++) {
        }
    }
    */
    [Uint8ClampedArray] = Uint8ClampedArray;
    a;
    static 5;
}
const v22 = new C10(37, 5, 37);
new C10(5, 5, 37);
new C10(861, 861, 37);
const v25 = [f0];
[Uint16Array,v22,v6,[v25,C10,v9,v25,v22],v6];
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    function f37() {
        const o41 = {
            toString(a39, a40) {
                return v30;
            },
        };
        o41.toString();
        const o50 = {
            [-4294967297n](a44, a45, a46, a47) {
                eval();
            },
        };
        return o50;
    }
    a34();
    try { ("").charCodeAt(Map); } catch (e) {}
    eval(a36);
    %OptimizeFunctionOnNextCall(f37);
    try { v30["find"](..."find", a36, ...v30, ...v31); } catch (e) {}
    return Uint8ClampedArray;
}
class C58 {
}
class C59 {
}
const v60 = new C59();
function f61(a62, a63) {
    a63?.__lookupGetter__;
    a62?.constructor;
    return C10;
}
const v67 = f61(Uint16Array, v60);
%OptimizeFunctionOnNextCall(f61);
for (let v68 = 0; v68 < 10; v68++) {
    const v69 = [10,-9007199254740991,512,7];
    const o70 = {
        ...v69,
    };
    const t78 = "byteOffset";
    t78[4] = Float64Array;
    f32(-4294967297n, -4294967297n, v68, v68);
}
%OptimizeFunctionOnNextCall(v67);
f32();
