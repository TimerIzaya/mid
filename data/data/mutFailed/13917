function f0() {
    const o21 = {
        "type": f0,
        [0.1830575795719701](a5, a6) {
        },
        n() {
            const v8 = f0();
            const v12 = !v8;
            23150 & this;
            ~v8;
            Math.sinh(4.0);
            4.0 + 23150;
            Math.acos(v12);
            return this;
        },
        __proto__: "undefined",
        3548777211: 0.1830575795719701,
        "f": 0.1830575795719701,
        18: 0.1830575795719701,
        set h(a19) {
            try {
                const t21 = "undefined";
                t21.__proto__ = a19;
            } catch(e20) {
            }
        },
        ["undefined"]: 1000000000000.0,
    };
    return o21;
}
const v22 = f0();
const v23 = f0();
const v24 = f0();
function f25() {
    return f25;
}
class C26 {
    b = v22;
    static #valueOf(a28) {
        try {
            this.d = a28;
        } catch(e29) {
        }
        return v24;
    }
    static #g = f0;
    #a = v22;
    672 = f25;
}
const v30 = new C26();
const v31 = new C26();
const v32 = new C26();
function f33(a34, a35, a36) {
    const o53 = {
        [C26](a38, a39) {
            const v40 = a35.b;
            super.a = f0;
            super[v40] = v30;
            new BigInt64Array(2147483649);
            class C44 {
            }
            a35 & this;
            return v40;
        },
        "e": f25,
        [v31]: a34,
        "a": v30,
        n(a47, a48) {
            return a48;
        },
        "g": a35,
        set b(a50) {
            for (const v51 in this) {
                function f52() {
                    return f0;
                }
            }
        },
        __proto__: v31,
    };
    return o53;
}
f33(v32, v31, v22);
const v55 = f33(v32, v31, C26);
f33(v31, C26, v23);
function f58(a59) {
    Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
}
new BigInt64Array();
v55.copyWithin(-9223372036854775808);
class C65 {
}
const t92 = C65.constructor;
t92();
for (let v68 = 0; v68 < 5; v68++) {
    function f69() {
        class C70 {
        }
        const v71 = new f58();
        try { v71.isPrototypeOf(v71); } catch (e) {}
        return v71;
    }
    f69();
    %OptimizeFunctionOnNextCall(f69);
}
