class C3 {
    g = 11;
    #g = 11;
    set a(a5) {
        a5 in a5;
        [789531097,-2147483649,-31638,-20474,-1073741824,268435440,9223372036854775807];
        [812251544,256,4096,256];
        [268435456,9223372036854775807,128,-12,65535];
    }
    #valueOf(a11, a12) {
        this.sin(a11 * 5);
        const v18 = 11 | 4096;
        5 - -9194;
        5 && v18;
        return -2;
    }
}
const v21 = new C3();
const v22 = new C3();
new v22();
let v25 = "-9223372036854775808";
try {
    v21.h = v25;
} catch(e28) {
}
v25 ** 23759757;
v25++;
const v35 = 11 * v25;
23759757 - 2.28613768173441e+307;
v25 << v25;
v35 % 2.28613768173441e+307;
[-9007199254740990,-6,-2,65535,672321521,257,129,512,-7795,1];
const v42 = [-771638888,17865];
[-21301,1238077297,2147483647,-250806728,-49030,268435440,10];
const v45 = new BigUint64Array();
function f46(a47, a48) {
    v42();
    return a48;
}
v45.toString = f46;
try { v45.copyWithin("object"); } catch (e) {}
