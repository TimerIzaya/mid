const v0 = [];
const v1 = [v0,v0,v0,v0,v0];
const v2 = [v1,v1,v1];
const v3 = [v2,v0,v1,v1];
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a6;
    } catch(e7) {
    }
    try {
        this.d = v3;
    } catch(e8) {
    }
}
const v9 = new F4(v2);
const v10 = new F4(v3);
const v11 = new F4(v0);
const v12 = [v10,v11,v1,v1,v2];
[[v3,v12,v0],v12,v9];
const v17 = new BigInt64Array(14);
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
new Uint8Array(4096);
gc();
110 <= 110;
110 + 110;
Int8Array.prototype = Int8Array;
new Int8Array(110);
const v30 = new Date();
try { v30.getUTCDay(); } catch (e) {}
let v32 = 127;
const v33 = v32++;
function f34(a35, a36) {
    try { a35(BigInt64Array); } catch (e) {}
    a36.constructor(a36);
    return f34;
}
const v40 = new Reflect(f34);
try { v40.then(v17, v33); } catch (e) {}
const v43 = new Uint8Array(v32);
function f44(a45, a46) {
    const o47 = {
    };
    return o47;
}
try { f44(v40, v40); } catch (e) {}
f44.arguments = f44;
for (let v49 = 0; v49 < 25; v49++) {
    const v50 = f44();
    v50.g = v50;
    v50.d = v50;
    Object.defineProperty(v50, v49, { enumerable: true, get: f44, set: f44 });
    const v54 = new Int8Array(8);
    Reflect.construct(Uint16Array, [v54,Reflect,v49]);
    v43[v50] = v50;
    "sync" == "sync";
    const o61 = {
        "execution": "sync",
    };
    Object(o61);
}
