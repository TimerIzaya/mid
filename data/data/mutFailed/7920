const v0 = [-1.4433811800592144e+308,688716.7588036766,3.2296504925599585,-1.6892408315299713e+308,-5.1002597469835065,2.220446049250313e-16];
const v1 = [-876.6229300236272,1000000000.0,-Infinity,-5.603724460577154e+307];
[1000.0,-7.566403793247636,2.2250738585072014e-308,1e-15,0.9646395797056844,-4.0,5.0,0.7373783251183965];
function f3() {
    return v0;
}
Math.valueOf = f3;
Math.log1p(268435456);
let v7 = -4294967297n;
const v8 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v9 = [601759695];
function f11(a12, a13, a14, a15) {
    function f17() {
        const v21 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v23 = Symbol.toPrimitive;
        const o30 = {
            toString(a25, a26) {
                const v27 = a15 && Float64Array;
                function f28() {
                    a25 *= v23;
                    return Float64Array;
                }
                Object.defineProperty(v27, "valueOf", { value: f28 });
                v27 <= v21;
                return this;
            },
        };
        const o53 = {
            "c": v7,
            [522675525n](a33, a34) {
            },
            "c": v9,
            valueOf(a36, a37) {
            },
            "b": -4294967295,
            [v7](a39, a40, a41, a42) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v8,
            ...v9,
            "type": "Vre",
            ..."Vre",
            valueOf(a47, a48) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a50, a51, a52) {
                return a12;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f17();
    const v56 = new Int8Array();
    v56.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f17);
    let v61;
    try { v61 = v0["find"](..."find", a15, ...v9, ...v0, ...522675525n); } catch (e) {}
    v61 <= a14;
    return arguments;
}
const v66 = [v0,v0,6];
[v1,6];
let v68 = [v66];
let v74 = -9n;
class C78 {
    static #o(a80) {
        this.g **= -1e-15;
        try {
            ("-2147483648").normalize();
        } catch(e82) {
        }
        return 268435456;
    }
    a = -1e-15;
    static 27 = 268435456;
    static f;
}
let v83;
try { v83 = new C78(); } catch (e) {}
v83.a = v83;
const v84 = new C78();
v84.a = v84;
new C78();
const v86 = new C78();
8 - 8;
8 - 8;
function f92(a93) {
    const t97 = "255";
    let v94 = delete t97?.length;
    ({"b":v74,"h":v7,"length":v68,...v94} = "1081593877");
    return v94;
}
Math.valueOf = f92;
let v96 = -15;
v96 | v96;
const v99 = 344.61638667171496 | 344.61638667171496;
const v100 = 344.61638667171496 & -11;
v100 << v99;
Math.sqrt(-11);
const v103 = Math.floor(v100);
const v104 = v103 + v103;
const v105 = v96--;
v105 >> v105;
const v107 = new Int32Array(8);
v107.constructor = f11;
try { v107.constructor(v86, -1e-15, 8); } catch (e) {}
new Uint32Array(2950);
const v113 = 28 | 28;
const v115 = new Uint32Array(28);
v115[0] = v115;
let v116 = 0;
let v117 = -56850;
v117++;
1.1408591040999836e+308 >>> v104;
class C121 {
    #b = v116;
    g = 1.1408591040999836e+308;
    static {
        this.e = this;
        let v123;
        try { v123 = new this(); } catch (e) {}
        function f124() {
            return -11;
        }
        function f125(a126) {
            const v129 = new Uint8ClampedArray(3);
            for (let v130 = 0; v130 < 5; v130++) {
                v129[v130] = a126;
            }
        }
        Object.defineProperty(v123, "e", { writable: true, configurable: true, enumerable: true, get: f124, set: f125 });
        v123.e = v123;
        this.e = this;
        Math[Symbol.toPrimitive] = f125;
        try { Math.tan(Math); } catch (e) {}
        let v136 = 44149;
        -v136;
        v136--;
        const v139 = v116++;
        const v140 = v139 & v139;
        let v141 = -v139;
        v141++;
        let v143 = ~v116;
        v143--;
        Math.log10(v136);
        const v146 = v136 + v116;
        v146 + v140;
        v146 >> v146;
        const v149 = Math.fround(v139);
        v149 >> v149;
    }
}
let v151;
try { v151 = new C121(); } catch (e) {}
function f152() {
    return v84;
}
function f153(a154) {
    let v155 = 0.6225177695488006;
    const v156 = v155++;
    function f158(a159, a160, a161, a162) {
        Object.defineProperty(a159, "g", { value: a160 });
        a161 % a161;
        const o167 = {
            n(a165, a166) {
            },
        };
        return a160;
    }
    try { f158(-16, v156); } catch (e) {}
}
Object.defineProperty(v151, "d", { get: f152, set: f153 });
v151.d = v151;
const v169 = new C121();
v169.g;
v169.g;
const v172 = new C121();
const v173 = v172?.__defineGetter__;
try { v173.constructor(v86); } catch (e) {}
try { new v173(v113, C121); } catch (e) {}
const o182 = {
    "execution": "async",
    set e(a180) {
        try {
        } catch(e181) {
        }
    },
};
gc(o182);
