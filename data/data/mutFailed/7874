function f0() {
    function f1() {
    }
    const v2 = /2/gvdims;
    /n\p{General_Category=Decimal_Number}(?: foo )?/gvdm;
    const v4 = /[r(?<!)]/uim;
    class C5 {
        m(a7, a8) {
            a8();
            v2[a7];
            let v11 = false;
            v11 <<= v11;
            const v13 = v4.iterator;
            const o22 = {
                [v13]() {
                    let v15 = 10;
                    const o21 = {
                        next() {
                            v15--;
                            const v19 = v15 == 0;
                            const o20 = {
                                "done": v19,
                                "value": v15,
                            };
                            return o20;
                        },
                    };
                    return f0;
                },
            };
            return a8;
        }
    }
    const v23 = new C5();
    const v24 = new C5();
    const v25 = new C5();
    function f26(a27, a28, a29, a30) {
        const o36 = {
            set a(a32) {
                [-910865.3408997525,626.3279856071824,-234.8554751364569];
                let v34 = [-3.0,5.0,0.030403066145865854,-2.2250738585072014e-308,-1e-15];
                const t41 = [0.0,-2.0,-4.4315495470280674e+307,2.220446049250313e-16,1.176246364365651e+307,-6.320855532259336e+307,2.0];
                t41[6] = v25;
                v34 = v34;
            },
            "e": v4,
            "d": a30,
            ...v23,
            "a": a28,
        };
        return o36;
    }
    f26(v24, v24, v24, v25);
    const v38 = f26(v24, f1, v23, v23);
    const v39 = v38(v23, f1, v24, v24);
    const v40 = f26 - v24;
    const v41 = delete v24[5];
    let v42;
    try { v42 = C5.slice(v39, v41, v2, v40); } catch (e) {}
    v38[v4.unscopables];
    const o61 = {
        n(a50, a51) {
            try { this(a50, -26590); } catch (e) {}
            Math.tanh(-26590);
            Math.imul(v42, -26590);
            const v58 = -this;
            10000 * 10000;
            Math.exp(this);
            return v58;
        },
        __proto__: 1000,
        [1000]: -26590,
        "f": 1000,
    };
    return o61;
}
f0();
f0();
f0();
new Int16Array(16);
new Int32Array(5);
new Uint16Array(3262);
("function").normalize();
