new Int16Array(256);
const o4 = {
};
new Int8Array(242);
function F10(a12) {
    if (!new.target) { throw 'must be called with new'; }
    a12--;
    a12 ^ a12;
    const v15 = this.constructor;
    try { new v15(3n); } catch (e) {}
}
const v17 = new Float64Array(16);
function f19() {
    return -536870912;
}
const o20 = {
    "defineProperty": f19,
};
v17[9];
[Reflect,Reflect,Reflect,Reflect,Reflect];
class C25 {
}
function f26() {
    return f26;
}
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v32 of Array(19793)) {
    }
    const v36 = new Int32Array(56885);
    f26(...v36, 127);
}
new F27();
const v40 = new BigUint64Array(0);
const v41 = v40?.entries;
try { new v41(); } catch (e) {}
const t36 = [-4.0,-1e-15];
t36[2] = 54004;
const v47 = parseInt([-5.034735835956977e+307,-385.25474675985527]);
function f48() {
    return 256;
}
[5.868805834103126,2.2250738585072014e-308,-0.0,2.220446049250313e-16,1.7269741225522117e+308];
[1.357180376569386e+308,668.5168240803569,0.9178101840953367,-3.0,-0.3817109689840077,-966616.8514807869,1.1050852718697866e+308];
const v51 = [5.0];
try { v51.push(Int16Array); } catch (e) {}
const v53 = [601759695];
const v54 = [1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    a56--;
    -a56;
    a57 >>> a57;
    const v63 = a56 >>> a56;
    v63 ^ v63;
    ([1073741824,1073741823,1376142744,1073741825]).forEach(Float64Array);
    const v68 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    const v70 = Symbol.toPrimitive;
    const o77 = {
        toDateString(a72, a73) {
            const v74 = v47 && Float64Array;
            function f75() {
                a72 *= v70;
                return Float64Array;
            }
            return v74 <= v68;
        },
    };
    a58[3];
    const t67 = "58572";
    t67[3] = "58572";
    try { v54["58572"](..."58572", a59, ...v53); } catch (e) {}
}
for (let v81 = 0; v81 < 10; v81++) {
    f55(v81, v81, v54);
}
