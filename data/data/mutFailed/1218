class C3 {
    static {
        const v5 = this?.toString;
        try { new v5(); } catch (e) {}
        try { this.constructor(this); } catch (e) {}
        +"string";
        const v11 = Symbol.iterator;
        const o20 = {
            "h": v11,
            ..."N1Vx",
            __proto__: this,
            ..."string",
            "g": v11,
            [v11]() {
                let v13 = 10;
                const o19 = {
                    next() {
                        v13--;
                        const v17 = v13 == 0;
                        const o18 = {
                            "done": v17,
                            "value": v13,
                        };
                        return o18;
                    },
                };
                return o19;
            },
        };
        o20[3];
    }
}
C3.e = C3;
try { new C3(); } catch (e) {}
const v23 = new C3();
const v24 = v23?.__lookupGetter__;
try { new v24("string"); } catch (e) {}
let v26 = new C3();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
new C3();
class C30 extends C3 {
    static o(a32, a33, a34, a35) {
        const o36 = {
        };
        new Proxy(a34, o36);
        return a35;
    }
    [-1];
    static h;
    toString(a40, a41, a42) {
        v23.__proto__;
        C30 = Infinity;
        Math.asinh(a41);
        a41 >> 65205;
        --a41;
        const v49 = --a41;
        v49 / a41;
        return v49 + 65205;
    }
    static #d = "string";
    2074525612;
    #e = "string";
}
C30.name = C30;
C30.h;
const v53 = new C30();
v53[2074525612] = v53;
const v54 = new C30();
v54[2074525612] = v54;
new C30();
const v58 = new BigUint64Array(2445);
try { v58.find(Infinity); } catch (e) {}
let v60 = 10;
v60++;
let v63;
try { v63 = new Float32Array(v58, v54, v58); } catch (e) {}
new Float32Array(v60);
delete v23[16];
[2147483648,-133303173,49412,-39474,4,-10553];
[8,-65536,129,257,-9223372036854775808,4294967295];
const v69 = [-4294967296,601291184,34757];
try {
    v69.toString = v63;
} catch(e70) {
}
1890 >>> 1890;
v26 >>= v53;
Object.defineProperty(v53, 1601, { writable: true, value: Infinity });
new Int8Array(1890);
const v78 = [Float64Array];
const v79 = v78[0];
v79.prototype = v79;
for (let v80 = 0; v80 < 5; v80++) {
    2 >= 2;
    v78.length = 2;
}
