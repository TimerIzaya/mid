const v0 = [];
let v4;
try { v4 = ("d").toLocaleLowerCase(); } catch (e) {}
const v5 = v4?.slice;
try { new v5("9223372036854775807", v0); } catch (e) {}
const v7 = ["d"];
const v8 = [v7];
v8[0] = v8;
[v7,"9223372036854775807"];
const v11 = v5 === 159;
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
let v13;
try { v13 = new Uint8Array("9223372036854775807", v8, Uint8Array); } catch (e) {}
new Uint8Array(159);
let v15 = 70;
v15++;
try { new BigUint64Array(BigUint64Array, 159, v4); } catch (e) {}
new BigUint64Array(v15);
Float64Array.e = Float64Array;
new Float64Array(512);
class C23 {
}
try { C23.call("d"); } catch (e) {}
new C23();
-(1922 ^ 1922);
let v29 = 1922 + 1922;
v29 + v11;
const v31 = --v29;
for (let v32 = 0; v32 < 25; v32++) {
    ~v32;
    const v34 = v32 - v32;
    function f35() {
    }
    f35.arguments = f35;
    f35.arguments = f35;
    const v36 = [1073741824,1073741823,1376142744,1073741825];
    function f37(a38, a39, a40, a41) {
        function f42() {
            return a38;
        }
        f42.prototype = f42;
        const v43 = f35();
        new Int8Array(a38, v31, v29);
        const v47 = [-554799.8407135659,-2.220446049250313e-16,731041.3668807968,-0.0,0.12359094160643747,-1000.0,-1e-15,-5.0,314.0545280433057];
        const v48 = [-1000000000.0,-2.220446049250313e-16,1e-15,1000000000000.0];
        const o49 = {
            __proto__: v47,
            [v47]: v48,
            ...v47,
        };
        try { v13.entries(); } catch (e) {}
        try { f35.next(); } catch (e) {}
        for (let i53 = 4294967295; i53 < 9;) {
        }
        [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        [0.5067933585829714,1.0,-930004.7663294855,2.6834769420801777e+307,-0.0,0.8576192242870103,1000000.0,-3.341757808913002];
        try { v0.map(a40); } catch (e) {}
        v36[3] ^= v31;
        try {
            try {
                const t60 = "symbol";
                t60.toString = v0;
            } catch(e61) {
            }
        } catch(e62) {
            [e62,e62,a40,v34];
        } finally {
            for (let v64 = 0; v64 < 5; v64++) {
                v64 * (v64 + v64);
            }
        }
        [-2.2250738585072014e-308,-0.0,3.0,743.9950267369297];
        [v43];
        for (let [i73, i74] = (() => {
                /Aabc|defmxyz{1,}?qMa{0,1}?/gvdis;
                return [0, 10];
            })();
            i73 < i73;
            ) {
        }
        BigUint64Array.length;
        Number.isNaN(BigUint64Array * Int8Array);
        a41--;
        return v43;
    }
    for (let v85 = 0; v85 < 10; v85++) {
        v85 + v85;
        v5();
    }
}
