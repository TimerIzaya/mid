function f0() {
}
class C1 {
    static a = f0;
    static toString() {
        Math.hypot(12);
        const v8 = new Float32Array(1);
        new Uint8ClampedArray(v8);
        12 >> this;
        return Math.sqrt(12);
    }
    static [f0] = f0;
    #g;
    b;
    constructor(a14, a15) {
        for (let v16 = 0; v16 < 32; v16++) {
            a15["p" + v16] = v16;
        }
    }
}
new C1();
const v20 = new C1();
const v21 = new C1();
class C22 extends C1 {
    constructor(a24, a25) {
        new Int16Array([255,-4294967295,2147483648,2390,8]);
        function F30(a32, a33, a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a34;
            } catch(e36) {
            }
            try {
                this.h = -9223372036854775807;
            } catch(e37) {
            }
        }
        super();
        const v38 = v21.g;
        super.h;
        try {
            super.imul(v21, v38);
            function F41() {
                if (!new.target) { throw 'must be called with new'; }
                this.d = -15;
            }
            class C44 extends F41 {
            }
        } catch(e45) {
        }
    }
    static 0 = v20;
}
new C22(v20, f0);
const v47 = new C22(v21, v21);
new C22(v47, v47);
new Int8Array(268435456);
for (let v56 = 0; v56 < 5; v56++) {
    for (let v58 = 0; v58 < 25; v58++) {
        const v59 = [601759695];
        const v60 = [1073741824,1073741823,1376142744,1073741825];
        function f61(a62, a63, a64, a65) {
            try { v60["find"](..."find", a65, ...v59, ...v60); } catch (e) {}
            const v70 = Symbol.isConcatSpreadable;
            const v71 = v70.description;
            const v72 = Array(a64);
            try { v72.groupToMap(v70, v71, f61, v72, v70); } catch (e) {}
            return v59;
        }
        for (let v74 = 0; v74 < 5; v74++) {
            f61();
        }
    }
    Array(36862);
}
