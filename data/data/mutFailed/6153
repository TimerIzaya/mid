const v0 = [-1e-15,0.3999878131076561,-2.2250738585072014e-308,0.5742067077316981];
[-707485.7745320073,7.680938783178043,-4.970923007683804e+306];
const v2 = [1.3345516762243508e+308,1e-15,-2.220446049250313e-16,0.6274927882026303,4.0,2.2250738585072014e-308,-1000.0,-1.0,738.4080771260276,-3.0];
[1.9068702496021004,-1.5245269725618496e+308,-1.7285064681641834e+308,2.0];
const v4 = [1000000000.0,-1000000000000.0,-1000000.0,2.7276266819222097e+307,1.0,-Infinity,1.6853799642958422e+308];
const v5 = [717.5008463543074,0.7566699491691615,0.0,2.2250738585072014e-308,NaN,0.20712784017751218];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v2;
    } catch(e10) {
    }
}
new F6(v0, v4);
new F6(v2, v5);
new F6(v0, v0);
let v20 = -1024;
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
}
const v27 = new F21();
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v29 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
}
class C35 {
}
const v37 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v38 = [601759695];
for (let v40 = 0; v40 < 5; v40++) {
    function f42() {
        Array().unshift();
        new Set();
        function F51(a53, a54) {
            if (!new.target) { throw 'must be called with new'; }
            F51();
        }
        try {
            v28.forEach(Float64Array);
        } catch(e57) {
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C60 {
        }
        const v61 = new C60();
        try {
            v61.__proto__ = F31;
        } catch(e62) {
        }
        const v63 = Symbol.toPrimitive;
        const o67 = {
            toString(a65, a66) {
            },
        };
        const o88 = {
            [522675525n](a70, a71) {
            },
            "c": v38,
            valueOf(a73, a74) {
                return a74;
            },
            [-4294967297n](a76, a77, a78, a79) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v37,
            ...v27,
            [v63]() {
            },
            "type": C35,
            valueOf(a82, a83) {
                return Symbol;
            },
            4: "Vre",
            toString(a85, a86, a87) {
                return a86;
            },
        };
        new v29();
        v20 %= -268435456;
        new Uint32Array(v29);
        return undefined;
    }
    f42();
    %OptimizeFunctionOnNextCall(f42);
}
