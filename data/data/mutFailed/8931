try {
    const t1 = -9.093773311457795;
    t1.length = 5;
} catch(e2) {
}
const v5 = [7.038599288790304e+307,-1000.0];
v5[2] = 7.038599288790304e+307;
const v6 = [-1000.0];
const v7 = [-9.093773311457795];
v5[2];
class C10 extends Date {
    constructor(a12, a13, a14, a15) {
        super(a12);
    }
}
class C16 extends C10 {
}
function f20(a21, a22) {
    const o45 = {
        [a21](a24, a25, a26) {
            function f31(a32) {
                const o38 = {
                    __proto__: 2,
                    "c": 2,
                    "e": 536870889,
                    213: a32,
                    ...a32,
                    "g": 2,
                    p(a34, a35) {
                        try {
                            this.fuck(536870889, a32);
                        } catch(e37) {
                        }
                        return this;
                    },
                };
                return o38;
            }
            f31(536870889);
            f31();
            f31(536870889);
            f31();
            return v6;
        },
        "g": a21,
        "b": -9.093773311457795,
        "h": v7,
    };
    return 7.038599288790304e+307;
}
f20(v7, -1000.0);
f20(v7, -1000.0);
function F49(a51) {
    if (!new.target) { throw 'must be called with new'; }
    a51 | a51;
    const v53 = this?.constructor;
    try { new v53(3n); } catch (e) {}
}
f20(v5, -1.0);
class C58 {
}
class C59 extends C58 {
    constructor(a61, a62, a63, a64) {
        super();
        NaN >= "0x2I";
    }
}
let v66 = Int32Array;
v66.toString = Date;
v66--;
for (let v68 = 0; v68 < 5; v68++) {
    function f69() {
        const t72 = ("1073741824").constructor;
        const v73 = t72().replaceAll(f69, v68);
        return v73.toLowerCase(v73, "1073741824", v73);
    }
    f69[Symbol.match] = f69;
    f69();
    %OptimizeFunctionOnNextCall(f69);
}
new C59();
