const v1 = -Infinity;
class C3 {
    #toString(a5, a6) {
        new Int8Array(2);
        new BigInt64Array(56);
        new a5(257);
        return 2;
    }
}
let v16 = new C3();
const v17 = new C3();
const v18 = v17?.constructor;
try { new v18(); } catch (e) {}
const v20 = new C3();
const v21 = v20?.constructor;
try { new v21(); } catch (e) {}
function f23() {
    return v1;
}
class C24 {
    [v16];
    #valueOf(a26, a27) {
        function f28() {
            return a27;
        }
        try {
            a26.__proto__ = a26;
        } catch(e29) {
        }
        return "toUpperCase";
    }
    constructor(a31, a32, a33, a34) {
        this.f = this;
        const v35 = this.constructor;
        try { new v35(); } catch (e) {}
        Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[a33,a33]]);
    }
    f = v16;
}
try { new C24(16, C3, 16, "toUpperCase"); } catch (e) {}
new C24();
const v44 = new C24();
new C24();
const t43 = (16).constructor;
new t43();
const v50 = new Uint8Array();
v50[v16.isConcatSpreadable] = BigInt64Array;
const v53 = [];
v44.constructor;
v16-- + 7;
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    this?.constructor;
    try { new v17(); } catch (e) {}
    this.c = this;
    try {
        this.e = v53;
    } catch(e66) {
    }
    try {
        this.a = a62;
    } catch(e67) {
    }
    const v70 = new Int32Array(9);
    v70.reverse();
}
new F60();
new Symbol();
