const v1 = [10,4,34338,10000,33461,1,536870887,-2056025985,-65537,-1];
let v2 = [-1399657498,-128,-905366192,2091938828,-1024,-884980475,1,1073741825];
const v3 = [29082,-42953];
class C4 {
    [v3];
    get e() {
        let v6;
        try { v6 = this(); } catch (e) {}
        function f7(a8, a9, a10) {
            const o16 = {
                "b": true,
                "d": a8,
                "c": true,
                "g": a9,
                ...this,
                "e": a10,
                [v6]: this,
                m(a12, a13, a14) {
                    try { C4(a9, this, true, this); } catch (e) {}
                    a14[1] = C4;
                    return a12;
                },
            };
            return o16;
        }
        f7(this, v6, v3);
        const v18 = f7(this, v6, v2);
        f7(v1, v2, v2);
        return v18;
    }
}
const v20 = new C4();
const v21 = new C4();
const v22 = new v21();
v20[1489087503] = Int16Array;
Math.min(0);
v20 >>> 0;
Math.random();
new Int16Array(181);
new BigUint64Array(3606);
let v37;
try { v37 = new Uint16Array(Uint16Array, Int16Array, 16); } catch (e) {}
const v38 = new Uint16Array(16);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v41 = 0; v41 < 5; v41++) {
        const v42 = [0.8307152163010869,1.0,0.0];
        try { v42.push(v41); } catch (e) {}
        v22 & v41;
        try { Int8Array.bind(Uint16Array); } catch (e) {}
        new Int8Array(64);
        try { new F39(this, this, v38); } catch (e) {}
        const v52 = new Float32Array(117);
        try { v52.reduce(181); } catch (e) {}
        new Float64Array(7);
        v42[2] = v42;
        v42.length = v41;
    }
}
F39.caller = F39;
const v57 = new F39();
try { v57.propertyIsEnumerable(v37); } catch (e) {}
const v59 = new F39();
let v61;
try { v61 = new Float64Array(v38, v3, v59); } catch (e) {}
v20[v21];
v2 -= v1;
function f63() {
    return v61;
}
try { new f63(); } catch (e) {}
