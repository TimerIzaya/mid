class C1 {
    constructor() {
        let v4 = -1;
        v4--;
    }
    get c() {
        const v8 = this / true;
        const v9 = v8 >>> v8;
        typeof v9 === "symbol";
        return v9;
    }
    #e = true;
}
new C1();
const v14 = new C1();
const v15 = v14?.constructor;
try { new v15(); } catch (e) {}
const v17 = v14?.constructor;
v17.prototype = v17;
let v18;
try { v18 = new v17(); } catch (e) {}
const v19 = v18?.constructor;
try { new v19(); } catch (e) {}
new C1();
16 << 16;
1118 < 1118;
const v29 = new Float32Array(1118);
v29[49];
let v31 = 8;
v31--;
const v34 = new Int16Array(v31);
const v35 = v34?.constructor;
try { new v35(v34, 16, v34); } catch (e) {}
const v39 = new Float32Array(129);
const v40 = v39?.__lookupGetter__;
try { new v40(636641613); } catch (e) {}
try { v39.with(1118, 16); } catch (e) {}
const v43 = [-53613,268435440,268435440,2,-65536,-2147483647];
const v44 = [8];
const v45 = [-1024,-2147483647,-37738,-2,21596,2147483649,9007199254740992,-2039218916];
class C46 {
    static #f;
    static set f(a48) {
        a48(this, this, a48, v44);
    }
    constructor(a51) {
        a51[0] = a51;
        const v52 = this?.constructor;
        v52.length = v52;
        try { new v52(true); } catch (e) {}
        this.e = v44;
    }
}
C46.prototype = C46;
new C46(v44);
const v55 = new C46(v45);
v55.e;
const v57 = new C46(v45);
let v60;
try { v60 = v57.reduceRight(4294967295, v45, C46); } catch (e) {}
v45[6] ||= -10;
function f61(a62, a63, a64, a65) {
    const v66 = v44 in v43;
    v66 && v66;
    try { v60(...v44, ...v43, v45, ...v66); } catch (e) {}
    return f61;
}
f61();
