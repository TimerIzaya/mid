class C3 {
    get e() {
        try {
            super.setHours(this, this, 2.9788133947234406e+306, this, "MV");
        } catch(e6) {
        }
        return ("MV").__proto__;
    }
    static #f = 2.9788133947234406e+306;
    static 8;
    static #b;
    e = 2.9788133947234406e+306;
    static 65535 = 1e-15;
}
C3[8];
const v9 = new C3();
v9.e;
let v11;
try { v11 = v9.toLocaleString(); } catch (e) {}
v11[9];
const v13 = new C3();
const v14 = new C3();
v14.e = v14;
v14.e = v14;
-4.0 & -4.0;
const v19 = new Date(-4.0);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    a26 >>> a26;
}
const v28 = new F23(5, 5);
let v31;
try { v31 = Array.bind(-195224844); } catch (e) {}
let v32;
try { v32 = v31(v28); } catch (e) {}
try { Reflect.ownKeys(-4.0); } catch (e) {}
const v35 = [1024];
v35[0];
const v37 = Reflect.construct(Date, v35, v31);
try { v37.toDateString(); } catch (e) {}
for (const v39 of v11) {
    h = v39;
}
const v41 = "MV" > 1e-15 ? "MV" : 1e-15;
const v42 = v19[v35];
const v44 = 10 >>> 10;
const v46 = new Uint8Array(10);
let v47;
try { v47 = v46.reduce(129); } catch (e) {}
function f48() {
    let v51 = -65535;
    ~v51;
    const v53 = v51 / v51;
    const o105 = {
        next() {
            try { this.next(); } catch (e) {}
            v51--;
        },
        m(a58) {
            const v59 = this?.m;
            try { new v59(v19); } catch (e) {}
            const v61 = a58?.m;
            try { new v61(v28); } catch (e) {}
            try { a58.next(); } catch (e) {}
            const o64 = {
            };
            o64.b = o64;
            try {
                o64.e = v51;
            } catch(e65) {
                const v69 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v69, o64);
            }
            const v71 = super[v28];
            const o73 = {
            };
            try {
                o73.c = v44;
            } catch(e74) {
            }
            try {
                const o75 = {
                };
                o75.c = v44;
                o75.e = v71;
            } catch(e76) {
            }
            try {
                const o77 = {
                };
                o77.c = v44;
                o77.e = v71;
                o77.f = Uint8Array;
            } catch(e78) {
            }
            try {
                const o79 = {
                };
                o79.c = v44;
                o79.e = v71;
                o79.f = 129;
            } catch(e80) {
            }
            try { v42["getDate"]("", Float64Array); } catch (e) {}
            try {
            } catch(e82) {
            }
            let v84;
            try { v84 = ("EV").link(v53); } catch (e) {}
            try { v84.replaceAll(Reflect, v51); } catch (e) {}
            let v86 = 0;
            class C87 {
                o(a89, a90, a91, a92) {
                    return v86;
                }
            }
            C87.b = C87;
            const v95 = new Int8Array(3938);
            let v96 = 3;
            let v98 = 0 >> 0;
            [...v96] = v95;
            try {
                let v99 = 0;
                do {
                    ({"c":v47,"d":v86,...v98} = v84);
                    v99++;
                } while (v99 < 5)
                const o103 = {
                };
                o103.e = o103;
            } catch(e104) {
            }
        },
    };
    const v106 = o105?.constructor;
    try { new v106(v19); } catch (e) {}
    try { o105.m(o105); } catch (e) {}
    class C110 {
    }
    try { new C110(); } catch (e) {}
    const v112 = new C110();
    const v113 = v112?.__defineSetter__;
    try { new v113(v53, v19); } catch (e) {}
    const v116 = new Float32Array(v112, "nt", Float32Array);
    const t144 = "nt";
    const v117 = delete t144[v116];
    let v118;
    try { v118 = v112.floor(v117); } catch (e) {}
    for (const v119 in v118) {
    }
}
const v120 = f48();
f48();
function f122(a123, a124, a125, a126) {
}
try { f122(v14, v31, v120, v120); } catch (e) {}
function f128(a129, a130) {
    const o133 = {
        set b(a132) {
        },
    };
}
function F134(a136, a137, a138) {
    if (!new.target) { throw 'must be called with new'; }
}
const v139 = F134.name;
try {
} catch(e140) {
}
function f141(a142, a143, a144, a145) {
    a142.e;
    a143.e = a143;
    a145.e;
    a142.e;
    const o160 = {
        "e": a145,
        [a145](a150, a151) {
            [2.0,-1.4136594990615852e+308,990839.6347160602];
            [1.7402501030817658e+308,0.4407518532850566];
            [-1000.0];
            const o158 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o158);
            return C3;
        },
    };
    return o160;
}
const v161 = f141(v14, v9, v14, v13);
v161.e = v161;
const v162 = f141(v161, v14, v161, v161);
v162.e = v162;
const v163 = v162?.__lookupGetter__;
try { new v163(v14); } catch (e) {}
f141(v162, v9, v9, v13);
function f166(a167, a168, a169) {
    const v170 = a168?.constructor;
    try { new v170(); } catch (e) {}
    a169.e = a169;
    a167.e = a167;
    a168.e = a168;
    for (let v172 = 0; v172 < 100; v172++) {
        f166(v139, F134, a167);
    }
    [a167,v32,v35,v41,[129]];
    [C3,a168,v37,F23,v46];
    try { a169.constructor(); } catch (e) {}
    const o182 = {
        get c() {
            const o179 = {
                "apply": f141,
                "call": f141,
                "construct": f141,
                "defineProperty": f141,
                "deleteProperty": f141,
                "getPrototypeOf": f141,
                "has": f141,
                "ownKeys": f141,
                "preventExtensions": f141,
            };
            new Proxy(this, o179);
            return v14;
        },
    };
    o182.__proto__;
    return o182;
}
f166.arguments;
const v185 = f166(v14, v9, v13);
v185.__proto__;
v185.h = v185;
const v187 = f166(C3, v161, v13);
v187.h = v187;
f166(C3, v9, v162);
function f189() {
    const o194 = {
        [-1000000.0]: 0.0,
        set e(a193) {
        },
    };
    o194.e;
    return f189;
}
f189.caller = f189;
f189.arguments;
f189();
const v198 = f189();
const v199 = /4VL[a-zA-Z0-9]/uimy;
const v200 = /ufoo(?!bar)baz/ums;
class C201 {
    static [f189] = v198;
}
v200[-2] &&= v199;
