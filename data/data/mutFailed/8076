function f4(a5, a6, a7) {
    const o15 = {
        n(a9, a10, a11) {
            return f4;
        },
        valueOf(a13, a14) {
            return a14;
        },
    };
    return o15;
}
new Uint8Array(1000);
function f21() {
    return -172798652;
}
const v25 = new Date(-9223372036854775807);
v25.setMonth(-3);
new Int8Array(195);
new BigUint64Array(0);
function f31(a32, a33, a34, a35) {
    const v36 = /(?:a*)+q(?<a>.)/guds;
    for (let i39 = 0, i40 = 10;
        (() => {
            const v41 = i39 < i40;
            function f42(a43, a44) {
                return v41;
            }
            return v41;
        })();
        i40--) {
        for (let v50 = 0; v50 < 25; v50++) {
            v36.hasIndices = v36;
        }
    }
    return f31;
}
%OptimizeFunctionOnNextCall(f31);
const v52 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v53 = 0; v53 < 25; v53++) {
    v52["p" + v53] = v53;
}
let v56 = Uint8Array;
v56--;
v56 ** 6;
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this.constructor;
    try { new v64(); } catch (e) {}
    try { this.constructor(); } catch (e) {}
}
const v68 = [601759695];
const o72 = {
    p(a70, a71) {
        return this;
    },
};
const v73 = [1073741824,1073741823,1376142744,1073741825];
function f74(a75, a76, a77, a78) {
    function f79() {
        const o80 = {
        };
        for (let v81 = 0; v81 < 5; v81++) {
            f74();
        }
        ("Vre")["concat"]("concat", a78);
        let v87 = Float64Array;
        v87 = a76;
        v52.length;
        try {
            v73.forEach();
        } catch(e90) {
        }
        Symbol.toPrimitive;
        const o97 = {
            toString(a94, a95) {
                a78 && v87;
                return this;
            },
        };
        const o98 = {
        };
        new Proxy(Uint8ClampedArray, o98);
        o97[9] = a75;
        const o106 = {
            [-4294967297n](a102, a103, a104, a105) {
            },
            ...v68,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f74;
    }
    f79();
    %OptimizeFunctionOnNextCall(f79);
    new BigUint64Array();
    const v110 = `
        function f111() {
            return f111;
        }
    `;
    return -4294967297n;
}
for (let v112 = 0; v112 < 10; v112++) {
    f74();
}
%OptimizeFunctionOnNextCall(f74);
f74();
