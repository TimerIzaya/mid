512 * 512;
const v10 = [-1000000000000.0,-0.0];
v10[1];
const v12 = [1.2377274659689605e+308,-1.0930717172148807e+308,2.0,-1000.0,-0.36254096525500223,1000000000000.0,4.0,1.1388063235565494e+308];
[-785754.2772814381,5.0,-2.2250738585072014e-308,-1.0181227647583118,5.9414403239601565,-1000000000.0,NaN,0.1461775187231249,0.3913779600268832,3.3640419485262747];
class C14 {
    f;
    constructor(a16, a17) {
        this.f = this;
        a17 | a17;
        v12[36501] ^= 9;
        super.d %= a17;
        [0.6388922951157134];
        ([7.416547168573346e+307,-2.2250738585072014e-308,-607741.9075014434,2.0,-1.5897297627800082e+308,1000000.0,NaN,0.707490007402094,-5.550632815166376])[3];
        [-1.7976931348623157e+308,-8.63383593033485,1000000.0,-1000.0,1000000.0,-1e-15,2.2250738585072014e-308,4.908941454039919];
    }
    static #o(a24, a25, a26, a27) {
        Object.defineProperty(this, 3, { configurable: true, value: this });
        v10[1071094817] = "symbol";
        function* f28(a29, a30, a31, a32) {
            %VerifyType(a30);
            const t21 = -4294967297;
            t21[9] = Math;
            new BigInt64Array(3335);
            new Uint8Array(9);
            new Int16Array(a31);
            Math.clz32(-1.0922735218010835e+308);
            const v46 = -1.0922735218010835e+308 / -1.0922735218010835e+308;
            a24.log2(-4294967297);
            Math.pow(a29, 1000000000.0);
            -1.0922735218010835e+308 + v46;
            yield "buffer";
            return 512;
        }
        return f28(9, v10, 3.0, a24);
    }
}
try { C14.apply(v10, 36501); } catch (e) {}
const v53 = new C14(512, 9);
v53.d = v53;
new C14(36501, 512);
new C14(512, 36501);
let v57;
try { v57 = new Symbol(); } catch (e) {}
const v60 = new Uint32Array();
Object.defineProperty(v60, "constructor", { writable: true, configurable: true, enumerable: true, value: Symbol });
let v61 = -4294967297n;
const v62 = v61--;
function f63(a64, a65, a66, a67) {
    const v68 = a64.keys;
    let v69;
    try { v69 = v68(); } catch (e) {}
    function f70() {
        return f70;
    }
    a64.constructor = f70;
    const t56 = a64?.constructor;
    const v72 = t56();
    const o80 = {
        [v61](a74, a75, a76, a77) {
            v69();
        },
    };
    const v82 = new Array(v72);
    try { v82.group("buffer"); } catch (e) {}
    new Int8Array();
    const v87 = v57.buffer.slice(a64, v10);
    try { v87.slice(1000000000.0, 3.0); } catch (e) {}
    try { v87.slice(v62); } catch (e) {}
    return a64;
}
for (let v90 = 0; v90 < 10; v90++) {
    v90 != v90;
    f63(v60);
}
%OptimizeFunctionOnNextCall(f63);
let v93 = v57(5);
v93++;
