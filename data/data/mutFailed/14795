function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(this); } catch (e) {}
    a5.d = a5;
    try {
        this.h = a5;
    } catch(e7) {
    }
    try {
        this.c = a5;
    } catch(e8) {
    }
}
try { new F3(-4.0); } catch (e) {}
new F3(F3);
const v11 = new F3(-1e-15);
const v12 = new F3(v11);
9007199254740991n << 9007199254740991n;
32952n << 32952n;
function f21(a22, a23, a24) {
    a24 > a24;
    const o40 = {
        "c": 9007199254740991n,
        "g": a24,
        [F3](a27, a28, a29) {
            return typeof a29 === "bigint";
        },
        p(a34, a35) {
            super.b = a34;
            let v36;
            try { v36 = v12.o(11n, this); } catch (e) {}
            v12.h;
            try {
                super.toString(v36, v12, 256n, a34);
            } catch(e39) {
            }
            return a23;
        },
    };
    return o40;
}
f21(695.0189445331848, 695.0189445331848, 256n);
f21(695.0189445331848, -1e-15, 9223372036854775807n);
const v43 = f21(-4.0, -1e-15, 11n);
v43.c = v43;
class C45 {
}
const v46 = new C45();
const v47 = v46?.constructor;
try { new v47(); } catch (e) {}
new C45();
const v50 = new C45();
const v51 = v50?.constructor;
try { new v51(); } catch (e) {}
class C53 extends C45 {
}
const v54 = new C53(C45, v50, C45);
const v55 = v54?.constructor;
try { new v55(); } catch (e) {}
new C53("b", v54, C45);
const v58 = new C53(C45, v50);
[-128,-204399241,1126169676,-39466,-37076,268435456,9223372036854775807,536870888,15798,-1632967117];
const v61 = "D2z" < v54;
/5*/gi;
const v64 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v65 = [601759695];
const v66 = [1073741824,1073741823,1376142744,1073741825];
const t67 = "b";
t67.e = "B";
function f69(a70, a71, a72, a73) {
    const v75 = arguments?.callee;
    try { new v75("D2z", arguments, arguments, "D2z"); } catch (e) {}
    function f77() {
        ~-4294967295;
        Float64Array.name;
        const v83 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.hasInstance = Symbol;
        const v85 = Symbol.toPrimitive;
        Symbol.for(v85.description);
        const o95 = {
            toString(a90, a91) {
                const v92 = a73 && Float64Array;
                function f93() {
                    a90 *= v85;
                    return Float64Array;
                }
                Object.defineProperty(v92, "valueOf", { value: f93 });
                v92 <= v83;
                return this;
            },
        };
        const o118 = {
            "c": -4294967297n,
            [522675525n](a98, a99) {
            },
            "c": v65,
            valueOf(a101, a102) {
            },
            "b": -4294967295,
            [-4294967297n](a104, a105, a106, a107) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v64,
            ...v65,
            "type": "Vre",
            ..."Vre",
            valueOf(a112, a113) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            __proto__: v54,
            "f": v61,
            "h": Symbol,
            192: 9007199254740991n,
            "d": Symbol,
            toString(a115, a116, a117) {
                return a70;
            },
            5: -4294967295,
            6: -268435456,
        };
        try { o118.valueOf(o95, v58); } catch (e) {}
    }
    try { f77.bind(arguments); } catch (e) {}
    f77();
    const v123 = new Int8Array();
    const v124 = v123.buffer;
    try { v124.slice(v123, a71); } catch (e) {}
    v124.slice(2147483648);
    %OptimizeFunctionOnNextCall(f77);
    let v129;
    try { v129 = v66["find"](..."find", a73, ...v65, ...v66, ...522675525n); } catch (e) {}
    v129 <= a72;
    return arguments;
}
for (let v131 = 0; v131 < 10; v131++) {
    const v133 = f69()?.__lookupGetter__;
    try { new v133(-4294967297n); } catch (e) {}
}
%OptimizeFunctionOnNextCall(f69);
f69();
function F136() {
    if (!new.target) { throw 'must be called with new'; }
}
