function f2() {
    const v8 = new Uint32Array(Promise.reject(Promise), 36002, 4);
    return v8;
}
Uint16Array.toString = f2;
new Uint16Array(0);
let v10 = 128;
function f12(a13) {
    a13?.[1814220230];
    const v17 = !-13;
    const v18 = !a13;
    const v20 = v17 | (v18 / v18);
    const v21 = v20 ** -13;
    v20 && v18;
    return v21;
}
Float64Array.toString = f12;
const v23 = new Float64Array(v10);
v23[21];
Uint8ClampedArray.g = 2;
Uint8ClampedArray.g = Uint8ClampedArray;
Uint8ClampedArray.name = Uint8ClampedArray;
const v27 = new Uint8ClampedArray(2);
function f28(a29, a30) {
    Date[-22872n] = Date;
    return Date;
}
v27[Symbol.toPrimitive] = f28;
class C35 {
    [Float64Array] = Uint16Array;
    static [v27];
    valueOf(a37, a38, a39) {
        function f40(a41, a42) {
            class C43 {
            }
            async function f44(a45, a46, a47, a48) {
                return (await C43).call();
            }
            return this;
        }
        this.constructor = f40;
        const v51 = this?.constructor;
        try { new v51(); } catch (e) {}
        const o56 = {
            "execution": "sync",
            "type": "minor",
        };
        return gc(o56);
    }
    static #a;
}
C35.name = C35;
const v58 = new C35();
const v59 = new C35();
const v60 = v59?.constructor;
try { new v60(); } catch (e) {}
const v62 = new C35();
try { v62.valueOf(0, v59, v10); } catch (e) {}
v10--;
-13207 & -13207;
965898099 - v58;
try { ("-792442332").toString(); } catch (e) {}
[-4.0,-3.0,-7.745906537435259,-1.2266228113922306e+308,-Infinity,-2.0,-2.0,1e-15,-694511.6819848374,-2.0];
Uint16Array ^ "-792442332";
