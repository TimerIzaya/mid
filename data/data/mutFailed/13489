function f0() {
    const o16 = {
        9: "byteLength",
        "d": "byteLength",
        4: "byteLength",
        "e": 1135542061,
        "f": "byteLength",
        "g": 1135542061,
        o(a5, a6) {
            a6[-9.078253798305205] = this;
            new Int8Array(5);
            new Uint32Array(189);
            new Float64Array(5);
            return 189;
        },
    };
    return o16;
}
f0();
f0();
const v19 = f0();
v19[9] = v19;
const v22 = ("1U8S")[1];
let v24 = 128;
v24++;
new Float32Array(v24);
255 - 255;
new Uint8Array(255);
new Int32Array(152);
for (let v35 = 0; v35 < 25; v35++) {
    const v36 = v35 % v35;
    [601759695];
    const v38 = [1073741824,1073741823,1376142744,1073741825];
    v38[0] = v22;
    function f39(a40, a41, a42, a43) {
        function f44() {
            return v36;
        }
        try { v38["find"](..."find", a43, ...a42); } catch (e) {}
        BigInt64Array.constructor;
        const v49 = a42.call(f44);
        v49.caller = v49;
        return 152;
    }
    for (let v50 = 0; v50 < 10; v50++) {
        f39();
    }
}
