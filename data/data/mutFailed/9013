const v3 = [-23799];
const v5 = [-9223372036854775807,[-23799,1635717467,1635717467],v3];
function f6() {
    return v5;
}
[-824.3820815738203,-1.0,1e-15,-721505.5368627033,750.9633024756731,-1.574714676779764e+308,74734.69641610538,-7.489948774341004,-177814.28793691867,0.7719179984685572];
[9.41304760131863e+307];
const v13 = [1000000.0,2.0];
const v17 = v3 << -9223372036854775807;
let v18 = v17 >> v17;
Math.exp(v18);
const v20 = -9223372036854775807 && -1073741824;
++v18;
Math.expm1(v20);
new Uint8Array(87);
new BigUint64Array(12);
new Float64Array(215);
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    let v40;
    try { v40 = new v39(this, a38, this); } catch (e) {}
    function f41(a42, a43) {
        Object.defineProperty(v13, 512, { writable: true, configurable: true, get: f6 });
        return 1635717467;
    }
    f41(v40, -1786965251n);
    a37++;
    a37 >>>= F33;
    const v48 = Int32Array - 127;
    v48 / 127;
    Math.atan2(v48, v48);
}
new F33();
new F33();
const v53 = new Int32Array(8);
try { Uint32Array.apply(v53, v53); } catch (e) {}
