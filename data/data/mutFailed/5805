const v0 = [];
class C1 {
    static #a;
    static set h(a3) {
        let v4 = 0;
        do {
            function f5() {
                return f5;
            }
            function F6(a8, a9, a10) {
                if (!new.target) { throw 'must be called with new'; }
                [8n] > 8n;
            }
            try {
                this.#a = this;
            } catch(e14) {
            }
            v4++;
        } while (v4 < 2)
    }
}
const v18 = new C1();
const v19 = new C1();
const v20 = new C1();
function f22() {
    return 256;
}
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.constructor;
    try { new v27(a25); } catch (e) {}
    -a25;
    a26--;
    this.h = f22;
}
function f31() {
    return v19;
}
const v32 = [v0,v18,v20];
const v33 = [v18,v18,C1];
[f31,v33,v33,C1,v32];
Math.log10(-9007199254740992);
[f22,f22];
class C39 {
}
new C39();
class C44 extends f31 {
    static #p(a46, a47, a48) {
        try {
            f31();
        } catch(e50) {
        }
        return a48;
    }
    #o(a52, a53, a54, a55) {
        class C57 extends Date {
        }
        const v58 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f59(a60, a61, a62, a63) {
            function f64() {
                const v65 = v58.length;
                v65 & v65;
                const v69 = new Float32Array(1334);
                v69[1283] = v69;
                return a60;
            }
            f64();
            %OptimizeFunctionOnNextCall(f64);
            return a61;
        }
        for (let v71 = 0; v71 < 5; v71++) {
            f59();
        }
        try {
            v0.f = this;
        } catch(e76) {
        }
        return a52;
    }
}
new C44();
new C44();
new C44();
class C80 {
}
const v81 = new C80();
ReferenceError(v81);
ReferenceError();
