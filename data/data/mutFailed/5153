const t0 = 3;
new t0(3);
const v5 = new Int32Array(183);
const v8 = new Uint16Array(256);
function f9() {
    [-0.23549034038133065];
    async function f11(a12, a13, a14, a15) {
        return await v5;
    }
    f11();
    return Int32Array;
}
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 3;
    } catch(e22) {
    }
    try {
        this.d = f9;
    } catch(e23) {
        const v24 = [];
        function f25(a26, a27) {
            a26 <= v24;
            return f25;
        }
    }
    try {
        this.a = a21;
    } catch(e29) {
    }
}
const v31 = new Uint16Array(f9);
v31["filter"](f9);
const v36 = new Uint8Array(183, 183, 128);
let v37;
try { v37 = v36.findLastIndex(v36, v36); } catch (e) {}
const o38 = {
    [v37]: Uint8Array,
};
new F18(3, 256);
new F18(183, BigUint64Array);
new F18(183, 183);
class C43 extends Date {
}
const v44 = [155533.8602852358,2.0];
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.__lookupGetter__;
    try { new v48(); } catch (e) {}
    const o78 = {
        valueOf(a60, a61) {
            const v62 = (a63, a64, a65, a66) => {
                function F67(a69, a70, a71, a72) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                return Int8Array;
            };
            const v73 = [1,4294967296,-9007199254740992,4,-4294967295,-9,-4294967297,255,536870888,255];
            Array(1102693041).slice(v44, v73);
            return 155;
        },
    };
    for (const v80 of Array(19793)) {
        v44[658291203] = null;
        Math.g = Math;
        let v83 = Math.cbrt();
        v83--;
        const v85 = Array || 0.4890055133608564;
        v85 + v85;
    }
    new BigInt64Array();
    const v91 = new Uint16Array(2);
    new Uint16Array(v91);
    const v93 = [];
    v93.g = v93;
    const v94 = [v8,C43];
    class C97 {
    }
    class C98 extends C97 {
        p(a100) {
            this.g ^= this[8];
        }
        static valueOf(a104, a105) {
            super[a105] = 1479696428;
        }
    }
    try { v94.fill(); } catch (e) {}
    const v107 = [Int32Array];
    try { v107.entries(); } catch (e) {}
}
new F46();
new F46();
