class C3 {
    #b = "A";
    p(a5, a6) {
        return "A";
        try {
            a5.toString = a6;
        } catch(e7) {
        }
        return a6;
    }
    #h = -693067049;
    h;
    2147483648;
    static [0.646980788625243];
}
const v8 = new C3();
const v9 = new C3();
new C3();
class C14 extends C3 {
    f = C3;
    12 = "A";
    static o(a16, a17) {
        a16 = -693067049;
        Object.defineProperty(a17, 8, { enumerable: true, value: 0.646980788625243 });
        return v8;
    }
    static {
        try {
            this.o(5903, "A", v9, 11729);
        } catch(e21) {
        }
    }
}
const v22 = new C14();
function f23(a24, a25) {
    let v26 = [-9223372036854775808,2067924475,-536870912,4294967296,46528,-13,2044244347,1024,2243,1073741823];
    class C29 extends Int16Array {
        constructor(a31, a32, a33, a34) {
            super();
            function f35(a36) {
                let v38 = 4.0;
                let v39 = 0;
                do {
                    typeof v39 === "string";
                    v39++;
                    class C44 {
                    }
                    function f45() {
                        return this;
                    }
                    f45();
                } while (v39 < 7)
                let v49 = 0;
                do {
                    v26 = v38;
                    v49++;
                } while (v49 < 10)
                const v55 = new Uint16Array(3327);
                const v56 = [-2038832922,-14];
                v55.set(v56);
                const v63 = new Uint16Array(6);
                const v66 = new Float64Array(127);
                gc();
                new Int16Array();
                const v71 = new Float32Array();
                new Uint8Array(v71, Uint8Array, Uint8Array);
                new Uint16Array(a33);
                new Uint16Array(v56, -9894, a33);
                f35(this);
                %PrepareFunctionForOptimization(f35);
                f35(this);
                f35(this);
                new Date(Uint32Array);
                const o86 = {
                    n(a84, a85) {
                    },
                };
                f35(this);
                function f88() {
                    const o89 = {
                        "b": v56,
                    };
                    return o89;
                }
                f88();
                v66[127] = 127;
                v63[536870888] = -1876875593;
                try {
                    v66.values();
                } catch(e92) {
                    const v93 = e92?.a;
                    try { v93(e92, v93, v93, v93); } catch (e) {}
                    function F95(a97, a98, a99, a100) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    new F95(F95, 8, 127, e92);
                    const v102 = new F95(52235, 6, -1876875593, Uint16Array);
                    F95(v102, 6, 1000);
                    for (const v105 of "some") {
                    }
                }
                v38 = -451445.2180572981;
                function f106(a107) {
                    return f106;
                }
                this.onmessage = f106;
            }
            const o110 = {
                "type": "function",
            };
            new Worker(f35, o110);
        }
    }
    return -693067049;
}
Object.defineProperty(v22, "toString", { enumerable: true, value: f23 });
const v112 = new C14();
new C14();
function f114() {
    const o117 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o117;
}
function F118() {
    if (!new.target) { throw 'must be called with new'; }
    function f120() {
        return f23;
    }
    function f121(a122) {
        try {
            const v123 = /eM7M/isy;
            const o124 = {
            };
            this.fuck(v123, a122, o124);
        } catch(e126) {
        }
    }
    Object.defineProperty(this, "constructor", { get: f120, set: f121 });
    const v127 = this?.constructor;
    try { new v127(); } catch (e) {}
}
const v129 = new F118();
v129.constructor = f23;
const v130 = v129?.constructor;
let v131;
try { v131 = v130(); } catch (e) {}
const v132 = v129.length;
const v133 = new F118();
const v134 = [v133,v133,v133,v133,v133];
const v137 = new Uint32Array(1000);
const v138 = delete v134.length;
("cbrt").toLocaleUpperCase(v131, v138);
try { v138["cbrt"](v137, Uint32Array, v129); } catch (e) {}
f114();
let v143 = f114();
const v144 = f114();
for (let v146 = 0; v146 < 42; v146++) {
    new Date();
}
536870888 * v22;
Number.isNaN(NaN);
65537 >> 65537;
const v157 = 536870912 + 536870912;
const v160 = [-42643,-2,-327102325,-1073741824,5];
function f161(a162, a163) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
    v143++;
    for (let v170 = 0; v170 < 32; v170++) {
        a163["p" + v170] = v170;
    }
}
Symbol.b = v143;
class C174 {
}
const v175 = new C174();
function f176(a177, a178) {
    a177.BYTES_PER_ELEMENT = a177;
    a178.BYTES_PER_ELEMENT = v157;
    let v179 = a177.BYTES_PER_ELEMENT;
    const v180 = v179++;
    class C181 {
    }
    const v182 = C181.length;
    v182 !== v182;
    try { ("0x2I").sup(); } catch (e) {}
    class C187 {
    }
    try { C187(); } catch (e) {}
    const v189 = C187?.call;
    v189.length;
    try { v189(null); } catch (e) {}
    class C192 extends C187 {
        constructor(a194, a195, a196, a197) {
        }
    }
    C192.e = C192;
    let v198;
    try { v198 = C192(NaN, v175, NaN, v144, Symbol, v132); } catch (e) {}
    const v199 = a178?.propertyIsEnumerable;
    try { v199(C187); } catch (e) {}
    let v201;
    try { v201 = v199(); } catch (e) {}
    class C202 {
    }
    C202.name = C202;
    try { C202.call(); } catch (e) {}
    const v204 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v204.includes(v201); } catch (e) {}
    class C206 {
    }
    function f207() {
        Math.log1p(-12);
        ~-12;
        -(-515317.1341773186);
        return -12;
    }
    Object.defineProperty(C206, Symbol.replace, { configurable: true, enumerable: true, value: f207 });
    try { C206(); } catch (e) {}
    try { C206.apply(1.7976931348623157e+308, f176); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C206[Symbol.replace] = v204;
    const v221 = [v180,v198,536870888];
    try { v221.findLast(1.7976931348623157e+308); } catch (e) {}
    let v226 = -25598;
    const v227 = v226--;
    -v226;
    f176 + 9;
    Math.tanh(v227);
    function f231(a232, a233) {
        const o234 = {
            "f": a233,
            [a232]: -12,
        };
        return o234;
    }
    try { f231.toString(); } catch (e) {}
    let v236;
    try { v236 = v221.with(v221, v221); } catch (e) {}
    const v238 = new Float64Array(v221, v236);
    const v239 = new Float64Array(v238, a177, v236);
    v239.values().next();
    return v239;
}
function f242() {
    function f243() {
        function f244() {
            return v112;
        }
        return f244;
    }
    return f243;
}
Object.defineProperty(f176, Symbol.toPrimitive, { writable: true, enumerable: true, get: f242 });
f176.name;
f176.length = f176;
%PrepareFunctionForOptimization(f176);
f176(Uint16Array, v175).length;
%OptimizeFunctionOnNextCall(f176);
f176(v175, v175);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v254 = undefined;
const o255 = {
    __proto__: undefined,
};
o255.h = o255;
v254 = v160;
let v257;
try { v257 = BigInt64Array(4.0, v254); } catch (e) {}
try { v257.lastIndexOf(BigInt64Array); } catch (e) {}
