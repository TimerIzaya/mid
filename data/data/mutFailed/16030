const v5 = new RangeError(5);
new Float32Array(5);
new Uint8Array(49965);
const v14 = new Uint8ClampedArray(4096, -1000000000.0, Uint8Array);
const v17 = new Int8Array(143);
function f19(a20, a21, a22) {
    v14[Symbol.split] = a21;
    return a20;
}
f19(143, 1.1877348477379996, -1000000000.0);
const v27 = new Int8Array(8, 49965, Int8Array);
const v29 = new Uint8Array(49965, 8, 5);
const v30 = v27.entries(4096, 2, ...v27, f19, 49965);
121.77853832628375 !== Uint8Array;
for (let v32 = 0; v32 < 32; v32++) {
    v29["p" + v32] = v32;
}
function f36(a37) {
    const o58 = {
        "c": 2,
        "e": 536870889,
        213: a37,
        ...a37,
        "g": 2,
        p(a39, a40) {
            let v38 = this;
            const v43 = --v38;
            Math.atanh(9);
            ([]).length;
            ([188439.8808918628,491144.33908044384,7.99804504476413,6.321598426193364e+307,-820860.9743012136,0.7234201729305241,-998514.8410675353,5.600912141333236]).toString();
            const v51 = new Uint8Array(64);
            new Int32Array(v51);
            9 % v43;
            9 - Int8Array;
            let v56 = v38 ^ Int8Array;
            v56--;
        },
    };
    return o58;
}
f36(536870889);
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    class C64 extends Float32Array {
        #f;
        f = 49965;
    }
    new C64();
    new C64();
    new C64();
    this.c = a63;
}
const v68 = new F60(536870889, 2);
%PrepareFunctionForOptimization(f36);
v30.concat(v68, [9223372036854775807,-9007199254740991,-1]);
const v73 = new Uint8Array(1);
const v75 = new Int32Array(v73);
const v76 = f36();
%VerifyType(v5);
const v77 = f36 >>> -1000000000.0;
Int8Array[6] = v77;
function f78(a79, a80) {
    return v75.toSorted();
}
new Promise(f78);
let v86 = 34119;
new Int8Array(268435456);
function f90() {
    const v92 = new Map();
    v92.clear();
    ([-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574]).slice();
    return f90;
}
%OptimizeFunctionOnNextCall(f90);
const v96 = v86++;
Math.clz32(v77);
v96 || v86;
const v99 = -v86;
let {"byteLength":v100,} = v17;
v29[6] = 143;
536870889 ^ v76;
f36();
%OptimizeFunctionOnNextCall(f36);
Object.defineProperty(v76, "b", { configurable: true, get: f19 });
let v103;
try { v103 = v27.toLocaleString(v99); } catch (e) {}
v103[1] = 133395200;
v30.length |= v86;
+5;
5 & 121.77853832628375;
0.8435316683385992 % 512;
0.8435316683385992 * 0.8435316683385992;
!0.8435316683385992;
Math.hypot(0.8435316683385992);
Date.parse();
6 >>> 1;
f36();
