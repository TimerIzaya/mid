const v0 = [];
class C5 {
    static a;
    static toString(a7, a8) {
        const v9 = [a7];
        [41543n,128n];
        [v9,v0,a8,v9];
        super[v9];
        super.h = 128n;
        return v0;
    }
    static o(a14) {
        a14 / a14;
        function F16(a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a18;
            } catch(e20) {
            }
            try {
                this.e = this;
            } catch(e21) {
            }
            try {
                this.h = this;
            } catch(e22) {
            }
        }
        F16.prototype = F16;
        new F16(128n, 41543n);
        new F16(41543n, 41543n);
        const v25 = new F16(128n, 128n);
        return v25;
    }
}
try { C5.toString(v0, v0); } catch (e) {}
let v27;
try { v27 = C5.o(268435440n); } catch (e) {}
const v28 = new C5();
const v29 = v28?.propertyIsEnumerable;
try { new v29(v27); } catch (e) {}
const v31 = v28?.constructor;
let v32;
try { v32 = new v31(); } catch (e) {}
const v33 = v32?.constructor;
try { new v33(); } catch (e) {}
const v35 = v28?.constructor;
let v36;
try { v36 = new v35(); } catch (e) {}
let v37;
try { v37 = new v36(); } catch (e) {}
let v38;
try { v38 = new v35(); } catch (e) {}
const v39 = v38?.constructor;
try { new v39(); } catch (e) {}
let v41;
try { v41 = v38.toString(); } catch (e) {}
try { v41.toWellFormed(); } catch (e) {}
const v43 = new C5();
const v44 = v27?.constructor;
try { new v44(); } catch (e) {}
const v46 = v43?.constructor;
try { new v46(); } catch (e) {}
try { v43.constructor(); } catch (e) {}
const v49 = new C5();
try { v49.propertyIsEnumerable(v28); } catch (e) {}
const v51 = v49?.constructor;
v51.d = v51;
let v52;
try { v52 = new v51(); } catch (e) {}
const v53 = v52?.constructor;
v53.g = v53;
let v54;
try { v54 = new v53(); } catch (e) {}
const v55 = v54?.constructor;
try { new v55(); } catch (e) {}
function f57() {
    return null;
}
f57.prototype;
try { f57(); } catch (e) {}
let v60;
try { v60 = f57.bind(41543n); } catch (e) {}
const v61 = [-1e-15,6.19535056850564e+307,2.220446049250313e-16,-9.911038761505868,-743.5178308830243,-1000000000.0,-32.58942581108613];
const v62 = [1.7976931348623157e+308,9.351692590460281];
let v63;
try { v63 = v62.unshift(null); } catch (e) {}
v63 * v63;
const v65 = [1.1324650048531066e+308,-2.220446049250313e-16,1000000.0];
try { v65.toLocaleString(); } catch (e) {}
v37++;
let v70;
try { v70 = new Uint8Array(3973, Uint8Array, Uint8Array); } catch (e) {}
const v71 = v70?.findLastIndex;
try { v71(f57); } catch (e) {}
try { new v71(v51); } catch (e) {}
const v74 = new Uint8Array(3973);
let v75;
try { v75 = v74.values(); } catch (e) {}
try { v75.next(); } catch (e) {}
Uint8ClampedArray.g = Uint8ClampedArray;
try { new Uint8ClampedArray(128n, v65, 128n); } catch (e) {}
new Uint8ClampedArray(9);
let v81 = 2701;
v81 / v33;
v81++;
const v85 = new Float32Array(v81);
try { v85.findIndex(v37); } catch (e) {}
const v87 = [];
v87.toJSON = v61;
function f88(a89, a90, a91) {
    return f88;
}
try { f88(v85, v65, v85); } catch (e) {}
try { ("function").match(Worker); } catch (e) {}
const v96 = [v87];
let v97;
try { v97 = v96.toReversed(); } catch (e) {}
try { v97.findIndex(v60); } catch (e) {}
const o99 = {
    "arguments": v96,
    "type": "function",
};
const v100 = new Worker(f88, o99);
const v101 = v100?.terminateAndWait;
try { new v101(); } catch (e) {}
try { v100.terminate(); } catch (e) {}
Uint8Array.b = Uint8Array;
try { new Uint8Array(f57, f57, v74); } catch (e) {}
const v107 = new Uint8Array(268435440);
v107.BYTES_PER_ELEMENT;
