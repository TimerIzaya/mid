[];
[-15,-414220368,1000,257,65537,10978,16,-53035];
[-9,128,4,8];
[-9007199254740990,536870888,-39768];
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
1000000.0 % 1000000.0;
const v24 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
new BigInt64Array(BigInt64Array, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v34 = new Uint8Array();
gc();
110 <= 110;
110 + 110;
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const v44 = new Date();
const v45 = v44.getUTCDay();
v45 >>> v45;
let v47 = 127;
v47 >> v47;
v47++;
function f50(a51, a52) {
    try { a51(f50); } catch (e) {}
    try { a51(BigInt64Array); } catch (e) {}
    a52.constructor(a52);
    return f50;
}
try { new Promise(4096); } catch (e) {}
const v58 = new Promise(f50, Uint8Array);
let v59;
try { v59 = v58.then(); } catch (e) {}
try { v59.then(v24, v34); } catch (e) {}
Uint8Array.length = Uint8Array;
const v62 = new Uint8Array(v47);
function f63(a64, a65) {
    const o66 = {
    };
    o66.g = o66;
    return o66;
}
let v67;
try { v67 = f63(v58, v58); } catch (e) {}
v67.g;
f63.arguments = f63;
for (let v69 = 0; v69 < 25; v69++) {
    v69 - v69;
    const v71 = f63();
    v71.g = v71;
    v71.d = v71;
    Object.defineProperty(v71, v69, { enumerable: true, get: f63, set: f63 });
    8 - 8;
    const v76 = new Int8Array(8);
    try { Reflect.preventExtensions(v71); } catch (e) {}
    Reflect.construct(Uint16Array, [v76]);
    v62[v71] = v71;
    gc.name = gc;
    !("sync" == "sync");
    const o85 = {
        "execution": "sync",
    };
    gc(o85);
}
