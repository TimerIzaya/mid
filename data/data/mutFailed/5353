const v3 = new Float64Array(1231);
const v4 = v3.indexOf(1231);
class C5 {
}
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    a8 >>> a8;
    a9 - a9;
    -a10;
    const v14 = this.constructor;
    try { new v14(a10, C5); } catch (e) {}
}
new F6(v4, C5, F6);
const t13 = 127;
new t13();
new BigUint64Array(127);
const v21 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f22(a23, a24) {
    const o26 = {
        ...a23,
        get d() {
            return this;
        },
    };
    return f22;
}
const v27 = f22();
f22(v21);
new BigUint64Array(4);
const v33 = new BigInt64Array();
v33.valueOf = v27;
function f34() {
    let v35 = 852.2904873570058;
    const o42 = {
        3: v21,
        "f": 1836424012,
        m(a39, a40) {
            v35++;
            return v35;
        },
        "d": 1836424012,
    };
    return o42;
}
new Float64Array(2109);
[-936145422,536870912,127,257,-36772,-15984,2];
v33.length = 6;
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float64Array(7);
const o57 = {
    valueOf() {
        try {
            this.toString = Int16Array;
        } catch(e56) {
        }
        return 4;
    },
};
new BigInt64Array(13);
with (v21) {
    length | length;
}
const v65 = new Float64Array(127);
new Uint8ClampedArray(v65);
new Int16Array(129);
const v71 = new BigInt64Array();
class C72 {
    constructor(a74, a75) {
        for (let v76 = 0; v76 < 10; v76++) {
            v71[-1];
            try {
                super.o();
                return o57;
                new Date();
                function F81(a83, a84) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            } catch(e85) {
            }
        }
    }
}
class C86 extends C72 {
}
new C86();
