let v0 = /a|b/vdy;
let v1 = /7Z(?:a?)+/gudsy;
const v2 = /\coQ/gdy;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v0;
    } catch(e6) {
    }
    try {
        this.g = a5;
    } catch(e7) {
        v2.dotAll >>= e7;
        let v8;
        try { v8 = e7(e7, v1); } catch (e) {}
        v1 = v0;
        return e7;
        v0 = v8;
    }
}
let v9 = new F3(v0);
const v10 = new F3(v1);
v9 -= v9;
v2[v2] = -9223372036854775808;
const v14 = new F3(v0);
class C15 extends F3 {
    static {
        super[v14] = v0;
        let v17;
        try { v17 = v1(F3); } catch (e) {}
        super.g |= v0;
        let v18;
        try { v18 = v2.exec(v17); } catch (e) {}
        const v19 = super[v18];
        try { v19(this, v19); } catch (e) {}
        v2[4];
        const v23 = v14 === v17 ? v14 : v17;
        try {
            v17.c = this;
        } catch(e24) {
            const o25 = {
                [e24]: this,
                "f": v23,
            };
            v10[Symbol.match];
        }
    }
    #h;
    static b;
    [-2147483648] = v1;
    static a = F3;
    [v2] = C15;
    #h;
    static #g;
    g = v9;
    #b;
}
const v29 = new C15();
const v30 = new C15();
const v31 = new C15();
const v32 = [-1077398797,2,1671415104,4294967297];
function f33(a34, a35, a36) {
    v14[a34] = a36;
    new Int16Array(4088);
    new BigUint64Array(1024);
    new Uint16Array(307);
    function f47(a48) {
        ++a48;
    }
    this.onmessage = f47;
    try {
        this.fuck(v14, a35);
    } catch(e51) {
    }
}
const v54 = [C15,v10,v0];
const o55 = {
    "arguments": v54,
    "type": "function",
    [v2]: "function",
    "d": v30,
    __proto__: v30,
    [f33]: v29,
    "e": v32,
};
new Worker(f33, o55);
const v57 = [10,-11,-311602405,26740,6,697968897,-6,-2110822617,-39657,1073741823];
const v58 = [-5,-65536,-65537,14311,14,255];
function f59(a60, a61) {
    const v64 = a60 % a60;
    Math.log(3);
    v58 / v64;
    Math.imul(3, v64);
    const v68 = Math.log(3);
    try { Math.sin(v68); } catch (e) {}
    try { a60(Math, v30); } catch (e) {}
    delete v57[v14];
    [v31];
    v58.length ||= v9;
    a61.constructor(a61);
    return f59;
}
new Promise(f59);
