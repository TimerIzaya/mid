const v3 = ["object","o"];
v3[58] = v3;
const v4 = ["object",v3,"o","o"];
v4.g = v4;
const v5 = ["o",v4,"o","entries",v4];
[512,8,722354287,536870912,9,2];
let v7;
try { v7 = v3.reduce(v5); } catch (e) {}
[64];
const v9 = [9,885416464,-2147483649,-256,-186914948,-9,12,-256];
function f12(a13) {
    return "object";
}
class C14 extends f12 {
    static e = 1024n;
    [-2] = 10000n;
}
class C17 extends Int8Array {
    #d;
    static #c;
    ["object"] = v7;
    static f;
    [v5] = v9;
}
Math.exp(9223372036854775807);
("object" - "object") && 10000n;
Math.sinh(10000n);
C17.BYTES_PER_ELEMENT = Int8Array;
new Int8Array();
for (const v25 in v7) {
}
