new Float64Array(85);
new Uint16Array(1000);
const v12 = new Set();
class C13 {
    valueOf(a15) {
        for (let v16 = 0; v16 < 32; v16++) {
            a15["p" + v16] = v16;
        }
        return this;
    }
    m(a20, a21) {
        Set ^ Set;
        new Int32Array(2917);
        %OptimizeFunctionOnNextCall(Date);
        let v28 = 3256989;
        v12 << a21;
        const v30 = a21 & v28;
        Math.cosh(v28);
        ++a21;
        ++v28;
        function f34() {
            return f34;
        }
        return f34;
        new Int32Array();
        Math.clz32(a21);
        return v30;
    }
}
const v38 = new C13();
v38?.constructor;
new Uint16Array(2780);
/Aabc|defmxyz{1,}?qMa{0,1}?/gvdis.exec();
(85)?.constructor;
const v46 = new Int8Array(3787);
const v47 = v46[1926];
const v50 = new Date();
v50.setUTCFullYear(v47, Int8Array, Float32Array);
/\u{12345}\u{23456}+/guimsy;
/a(?!b)+/gvdims;
/EXjM/gudiy;
for (let v55 = 0; v55 < 5; v55++) {
    function f56() {
        function F57() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                new F57(F57, this, -302142025);
                /Ckza\Wb?/vis;
                /((?=.)1a{}[(?<=a)a{1,2}?a(?=b)*])/gms;
                /Ma\W+/gudm;
                this.b = -302142025;
            } catch(e65) {
            }
        }
        let v67 = ("1073741824").constructor;
        const v70 = Symbol.toPrimitive;
        const v71 = v67 && Float64Array;
        function f72() {
            v67 *= v70;
            return Float64Array;
        }
        Object.defineProperty(v71, "valueOf", { value: f72 });
        const v74 = v67().replaceAll(f56, v55);
        return v74.toLowerCase(v74, "1073741824", v74);
    }
    f56();
    %OptimizeFunctionOnNextCall(f56);
}
function F78(a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a81;
    for (let v83 = 0; v83 < 5; v83++) {
    }
    this.g = 4;
}
