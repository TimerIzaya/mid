const o4 = {
    "maxByteLength": 1000,
};
const v6 = new ArrayBuffer(8, o4);
let v8 = new BigUint64Array(v6);
v8 *= v8;
const v9 = new Float64Array(0);
const v12 = new Uint8Array(1797);
const v15 = new Uint32Array(128);
const v22 = new Float64Array(127);
v22[127] = 127;
try {
    v22.values();
} catch(e26) {
    const v27 = e26?.a;
    try { v27(e26, v27, v27, v27); } catch (e) {}
    function F29(a31, a32, a33, a34) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = e26;
        } catch(e35) {
        }
    }
    new F29(F29, 8, 127, e26);
    const v37 = new F29(52235, 6, -1876875593, Uint16Array);
    new F29(v37, 6, 1000, Uint16Array);
    const v42 = new Int8Array(3816);
    for (const v43 of "some") {
        const v44 = v42[1];
        let [,,,...v45] = v42;
        const o46 = {
        };
        o46.a = v44;
        const o47 = {
        };
        o47.a = v44;
    }
}
class C48 extends Uint32Array {
    #a;
    static get c() {
        const v50 = `
        `;
        eval();
    }
    #a = 128;
    static 2 = 128;
    1;
    e;
    [128];
    6 = v15;
    static #d;
    toString(a54, a55, a56) {
        function f57(a58, a59) {
            return a58;
        }
        function f60() {
            /[a-zA-Z0-9]/gvisy;
            return f60;
        }
        for (let v62 = 0; v62 < 5; v62++) {
            f60();
            %OptimizeFunctionOnNextCall(f60);
        }
        let v64;
        try { v64 = a55(a54, this, a54, a55, v9); } catch (e) {}
        v64 += Uint8Array;
        super[a55];
        function f66() {
            return 0;
        }
        return v9;
    }
}
new C48();
class C68 {
}
const v69 = (a70, a71, a72, a73) => {
    v12[536870887] = 0;
    return a73;
};
new C48();
new C48();
class C76 {
}
const o78 = {
    0: "1ya",
    162: "1ya",
};
let v80;
try { v80 = Float32Array.bind(); } catch (e) {}
v80.length;
gc();
