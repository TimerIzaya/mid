class C3 {
    toString(a5, a6) {
        const v7 = this[this];
        try {
            this.fuck(/((?:a?)?a$+)/guisy, a6, v7, undefined);
        } catch(e11) {
        }
        return this;
    }
    ["toString"];
}
const v12 = new C3();
const v13 = new C3();
const v14 = new v12();
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a17;
    } catch(e19) {
    }
}
new F15(C3, v12);
new F15(v13, C3);
new F15(v13, v14);
0.29489550717955537 | 1.1660447917673544e+308;
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
const v37 = new C3();
const v38 = new F33();
const v41 = new C3();
v41[0.29489550717955537];
[v38,v37,"e"];
[-226.62978771750693,-6.95156271016547e+307,-2.1330291148611114,-552342.4510641485,1.0,-2.2250738585072014e-308];
const v2 = [-Infinity,1000.0];
const v3 = [5.0];
let v4;
try { v4 = v3.every(v2); } catch (e) {}
-Infinity;
/Oa{0,1}?/gisud;
/(Q[^123])/misd;
const v10 = /(?:a+){0,0}[x\dz]\u0034ha(?=bbb|bb)c/gsud;
v4.sticky;
const t5 = -618199.1371965441;
new t5();
-6n;
512 / 512;
try { new Float64Array(Float64Array, 512, v10); } catch (e) {}
Int32Array.e = Int32Array;
-57641.03148885199 >>> -57641.03148885199;
class C31 {
    constructor(a33) {
        !1030682646;
        let v40 = +1030682646 / 1030682646;
        ++v40;
    }
}
C31.name = C31;
