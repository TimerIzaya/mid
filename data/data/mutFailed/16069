const v0 = [-Infinity,-1e-15,0.6395717748350279,951720.8494733141];
const v1 = [0.2671111436523177,-0.0,664.0665586928742,1.7288067934528278e+308,81283.57643640414,-630.0711550682416,0.0];
function f2(a3, a4) {
    new Uint8ClampedArray(Uint8ClampedArray);
    return a3;
}
v1[Symbol.toPrimitive] = f2;
const v9 = [352.02467053816963,-1000000000.0,1.5727016057596526,-2.2250738585072014e-308,-1000000000.0,-246.34472810916668,908.5199325278948,-1.7976931348623157e+308,-1.7976931348623157e+308];
function f10(a11, a12) {
    function f13(a14) {
        const v17 = new BigUint64Array(4);
        Reflect.construct(BigInt64Array, [v17]);
        return v17;
    }
    a12.toString = f13;
    const o22 = {
        [v1]: a12,
        "d": a11,
        "g": v1,
        146: v1,
        [a11]: v1,
        [v0]: a12,
        "a": v1,
        1073741825: a11,
        __proto__: v9,
        [a12]: a11,
        7: a12,
        "b": f10,
        ...a11,
        8: v0,
        [f10]: v9,
    };
    return o22;
}
function f23(a24, a25) {
    return "-1210238113" - [];
}
Object.defineProperty(f10, "toString", { enumerable: true, value: f23 });
const v29 = f10(v9, v9);
const v30 = f10(v1, v1);
const v31 = f10(v1, v0);
try { v31.valueOf(); } catch (e) {}
class C33 extends f10 {
    #n(a35, a36) {
        function F37(a39, a40, a41, a42) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = f10;
            } catch(e43) {
            }
            try {
                this.b = a39;
            } catch(e44) {
            }
            try {
                this.h = a36;
            } catch(e45) {
            }
        }
        new F37(v9, this, v31, a36);
        new F37(v9, v29, v29, v0);
        new F37(a35, v30, v30, F37);
        return v1;
    }
}
new C33();
const v50 = new C33();
v50[8] = v50;
const v51 = new C33();
1073741823n ^ 1073741823n;
const v60 = Math.tanh(-1000.0);
function f61() {
}
const v62 = f61?.constructor;
try { new v62(v51); } catch (e) {}
function f65() {
    return f61;
}
f65.arguments = f65;
const o68 = {
    get d() {
        Object.defineProperty(this, 10000, { enumerable: true, get: f61 });
        return new.target;
    },
    __proto__: 1000000.0,
    "b": 1000000.0,
    "c": f65,
    ...268435439n,
    ...1000000.0,
    "g": 268435439n,
    ...f61,
    "d": -1010928051n,
    ...268435439n,
};
const v70 = [10,-2147483649,9,-27142121,9,-284891600];
const v72 = Symbol.toPrimitive;
Object.defineProperty(v70, v72, { writable: true, configurable: true, enumerable: true, value: f23 });
const v73 = [v70];
v73[3] = v50;
function f75() {
    return f61;
}
function f76(a77) {
    const v78 = v72.constructor;
    try { new v78(); } catch (e) {}
}
Object.defineProperty(Uint16Array, "toString", { configurable: true, enumerable: true, get: f75, set: f76 });
const v80 = v73 >= Uint16Array;
v80 || v80;
const v83 = [1073741823,701857267,63326];
v83[Symbol.isConcatSpreadable] = v83;
const v86 = [-4294967296];
class C87 {
    static [1073741823n];
    static valueOf(a89, a90, a91, a92) {
        let v88 = this;
        try { a90(a91, a89, v86, v88, a90); } catch (e) {}
        ++v88;
        return a90;
    }
    [v70];
    b;
    constructor(a96, a97) {
        v73.unshift("-6", a97, [this,this]);
    }
    static #p(a101, a102, a103, a104) {
        ["-6",Math];
    }
    #b;
    p(a107, a108, a109, a110) {
    }
}
C87.f = C87;
const v111 = /2a\sc/uds;
function f112() {
    try { v111.test(v111); } catch (e) {}
}
v111[Symbol.toPrimitive] = f112;
const o118 = {
    [v111](a117) {
    },
};
new C87();
new C87();
const v121 = new C87();
const v123 = new WeakMap();
v123.delete();
v83.concat(v83);
class C127 {
    n(a129) {
        this[a129] = 47457;
    }
}
Int8Array.toString = Symbol;
let v132 = 0;
do {
    try { v83.includes("-6"); } catch (e) {}
    %VerifyType(v121);
    v132++;
} while (v132 < 10)
try {
    Math.abs(Int8Array);
} catch(e139) {
}
o118[0] = v60;
new Uint32Array(257);
