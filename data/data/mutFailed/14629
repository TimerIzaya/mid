class C3 {
    static valueOf(a5) {
        %VerifyType(8n);
        function f8() {
            for (let [i12, i13] = (() => {
                    [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
                    return [0, 10];
                })();
                i12 < i12;
                ) {
            }
            return f8;
        }
        return this;
    }
    constructor(a21, a22) {
        function f23(a24) {
            const v25 = a22;
            a24[-16n] = -16n;
            return -16n;
        }
        Object.defineProperty(this, "toString", { value: f23 });
        function f27() {
            const o30 = {
                [null]() {
                    super.b;
                },
                "f": null,
            };
            return o30;
        }
        f27();
        %OptimizeFunctionOnNextCall(f27);
        let v32;
        try { v32 = this.valueOf(a22, 848739616n); } catch (e) {}
        v32.valueOf = f23;
        let v33;
        try { v33 = v32(this, -16n, a22, v32); } catch (e) {}
        const v34 = [this,v32,a21];
        const v35 = [v33,v34,-16n,v34,8n];
        v35[2360] = 8n;
        v35[2360] = v34;
        [a22,v32];
        this[a22] <<= v32;
        v35[2360];
        [-984503.961837067,-3.0,-984503.961837067];
        const o41 = {
            ...v35,
        };
    }
}
const v42 = new C3(848739616n, 8n);
const v43 = new C3(-16n, -16n);
new C3(8n, -16n);
function F46() {
    if (!new.target) { throw 'must be called with new'; }
}
const v50 = new Float32Array(7);
v50.join(F46);
("Vre").fixed();
function F57(a59, a60, a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    const v63 = this.constructor;
    try { new v63(0, F57, F57); } catch (e) {}
    const t64 = a61.constructor;
    new t64();
}
const v67 = [C3,848739616n,1.8667389706967334,1.8667389706967334];
[v42,v67,v67];
[8n,1.8667389706967334,v43,v67];
const v74 = Array(19793);
const v75 = [v74,v74,v74,v74];
[[v75,v75,v75]];
for (let v79 = 0; v79 < 5; v79++) {
    function f80() {
        const v81 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
        let v82 = -65536;
        v82--;
        v81.length >>>= v82;
        return f80;
    }
    f80();
    %OptimizeFunctionOnNextCall(f80);
}
