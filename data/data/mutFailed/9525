const v0 = /ia\nb\bc((((.).).).)/dimsy;
const v1 = /a*b/guimy;
/EMr/vdy;
const v3 = [v1];
let v4 = undefined;
const v5 = v4++;
const v6 = new v5();
const v7 = new v5();
const v8 = [v7,v6];
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    a11.unshift(v6);
}
new F9(v8);
[v1];
[v0,v3,v0,v3];
new Map();
[6,268435439,-536870912,-53755,-65537,536870912,-1073741824];
[-28386,64,-256,-11506];
[-4294967296,65535,9007199254740992,-128,2,-2,5,7];
function f24(a25, a26, a27, a28) {
    const v29 = /(?:a*)+q(?<a>.)/guds;
    function f30(a31) {
        a31.dotAll;
        a31.hasIndices = a31;
        const v33 = a31?.constructor;
        v33.$_;
        v33.lastParen;
        const o37 = {
            get d() {
            },
        };
        return v33;
    }
    for (let [i65, i66] = (() => {
            let v38 = 0;
            v38++;
            function f41(a42) {
                return a42;
            }
            [f41];
            const v45 = new Set();
            function F46(a48, a49) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a48;
                } catch(e50) {
                    for (let [v51,v52] of a48) {
                    }
                }
                try {
                    this.h = v45;
                } catch(e53) {
                }
                try {
                    v45[this];
                    ([WeakSet,WeakSet,WeakSet]).copyWithin();
                    function f58(a59, a60, a61) {
                        return f58;
                    }
                    try {
                        new F46();
                    } catch(e63) {
                    }
                    this.b = Set;
                } catch(e64) {
                }
            }
            return [v38, 10];
        })();
        (() => {
            function f68(a69, a70, a71) {
                return null;
            }
            return 36924;
            const v73 = i65 < i66;
            v73 || v73;
            return v73;
        })();
        i66--) {
        for (let v80 = 0; v80 < 25; v80++) {
            f30(v29);
            const v83 = new Float32Array(Float32Array, Float32Array, Float32Array);
            function f84() {
                v83.c = Float32Array;
                for (let v85 = 0; v85 < 5; v85++) {
                    const o88 = {
                    };
                    o88[Uint32Array] -= -2147483649;
                    class C89 {
                    }
                    new BigUint64Array(v85, v85, v85);
                }
                return f84;
            }
        }
    }
    return f24;
}
for (let v92 = 0; v92 < 10; v92++) {
    f24();
}
%OptimizeFunctionOnNextCall(f24);
f24();
