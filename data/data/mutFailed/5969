class C3 {
    static #g = 1.0;
    constructor(a5, a6) {
        function f8() {
            function f9() {
                new Float32Array();
                return Math;
            }
            return f9;
        }
        Object.defineProperty(Math, "toString", { get: f8 });
        Math.cos(Math);
        let v13 = 0;
        v13++;
        return arguments;
        try { this.hasOwnProperty(1.0); } catch (e) {}
        a5 == a5;
        try {
            this.#g = a6;
            function F18() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    let v20 = 0;
                    do {
                        v20++;
                    } while (v20 < 5)
                    new F18();
                } catch(e25) {
                }
            }
        } catch(e26) {
            e26.h = e26;
        }
        const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v30 = new Uint32Array(v28);
        let v31 = -4294967297n;
        v31--;
        const v33 = [601759695];
        const v34 = [1073741824,1073741823,1376142744,1073741825];
        function f35(a36, a37, a38, a39) {
            const v40 = a36?.constructor;
            try { v40(); } catch (e) {}
            function f42() {
                try { ("Vre").charAt(4096); } catch (e) {}
                const v45 = ("Vre").codePointAt();
                v45 ^ v45;
                let v47 = Float64Array;
                v47 = a37;
                b = v28;
                try {
                    v34.forEach();
                } catch(e49) {
                }
                const o60 = {
                    "c": v31,
                    valueOf(a51, a52) {
                        return v30;
                    },
                    1073741824: v30,
                    [v31](a54, a55, a56, a57) {
                        eval(a55);
                    },
                };
                return v31;
            }
            f42();
            const v64 = new Int32Array(1024);
            const v65 = v64[3];
            v65 + v65;
            1024 * v65;
            for (let v68 = 0; v68 < 5; v68++) {
            }
            %OptimizeFunctionOnNextCall(f42);
            try { v34["find"](..."find", a39, ...v33, ...v34); } catch (e) {}
            return f35;
        }
        f35();
    }
    static #e = 1.0;
    g = "number";
    #f = -9007199254740991;
    [-9007199254740991];
}
new C3("number", 1.0);
new C3(C3, -9007199254740991);
new C3(1.0, "number");
-14 - -14;
-2078225029 + -2078225029;
let v80 = 16;
v80--;
class C83 {
}
function f84(a85, a86) {
    return a85;
}
gc();
class C92 {
    static n(a94, a95) {
    }
    static [-4096];
}
const v96 = new C92();
function f97() {
    return f97;
}
const o99 = {
    ...-2,
    [v96]: -2,
    "e": C92,
    ...C92,
    "d": f97,
    get f() {
        C92[3] >>= 9;
        return -2;
    },
};
