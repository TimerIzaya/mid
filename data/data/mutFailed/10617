[-536870912,878724855,10,-11,65535,-781539425,717937481,2263];
[13,2,-4096,65535,-7,44700];
const v6 = [-11,-1];
function f16() {
}
class C17 extends f16 {
}
new C17();
new v6();
class C20 {
}
[1000];
let v23 = [];
[v23] = "2lZu";
const t14 = [-936145422,536870912,127,257,-36772,-15984,2];
t14.length = 6;
function f32() {
}
for (const v35 of Array(4087, Array, Array)) {
}
function f36() {
}
const v37 = /8[\cA]v/uisy;
const v38 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v38.length = v37;
} catch(e39) {
}
const o40 = {
};
function F41() {
    if (!new.target) { throw 'must be called with new'; }
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
Symbol.iterator;
const v51 = new Uint8Array(4087);
new Int32Array(v51);
function f54(a55, a56, a57, a58) {
    function f60() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
        do {
        } while (0 < 0)
    }
    f16();
    new Int8Array();
    ("setInt32").buffer.slice();
    %OptimizeFunctionOnNextCall(f60);
    let v78;
    try { v78 = v45["find"](..."find", a58, ...v44); } catch (e) {}
    v78 <= a57;
    return arguments;
}
for (let v80 = 0; v80 < 10; v80++) {
    f54();
}
%OptimizeFunctionOnNextCall(f54);
for (const v85 of Array(19793)) {
}
f54();
