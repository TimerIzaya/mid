const v0 = [5.643373291636237,0.0,-6.180238270917446,466416.5387968179,-Infinity,-54266.99121695];
const v1 = [-Infinity,1000000000.0,-217301.24857944122,-320359.6415600021];
let v2 = [1000.0];
class C3 {
    static #toString(a5) {
        v2 >> v1;
        return v2;
    }
    static f;
    set g(a8) {
        function f9() {
            return a8;
        }
        let v10;
        try { v10 = v0.includes(v1); } catch (e) {}
        try { v10(this, a8, Int8Array, v1, f9); } catch (e) {}
    }
    h = v0;
    static 536870888 = v2;
}
function f13() {
    v2 = v0;
    return C3;
}
Object.defineProperty(C3, "toString", { configurable: true, enumerable: true, value: f13 });
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    function f22(a23) {
        const v27 = 65535 && 1.0;
        Math.expm1(v27);
        Math.atanh(C3);
        Math.min(v27);
        -v27;
        return a21;
    }
    this.toString = f22;
    try {
        this.a = v0;
    } catch(e32) {
    }
}
const v33 = new F18(v1, v0);
const v34 = new F18(v1, v0);
function f35() {
    try {
        v17.g = v0;
    } catch(e36) {
    }
    return F18;
}
v34[Symbol.toPrimitive] = f35;
new F18(v2, v0);
class C40 {
    [v34];
    [C3] = F18;
    set a(a42) {
        %VerifyType(v33);
        new Array(1024);
    }
    static {
        function F47(a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a50;
            } catch(e51) {
            }
        }
        new F47(v15, this);
        new F47(this, v0);
        new F47(v16, v2);
    }
}
new C40();
new C40();
new C40();
const v58 = [];
const v59 = /a\w/gudsy;
const v60 = /ka{0}/guims;
class C61 {
}
function f62(a63, a64) {
    const o65 = {
        ...v60,
        "d": v58,
        "c": a64,
        "g": a64,
        "f": a63,
        "a": a64,
        7: C61,
        __proto__: C61,
        "e": v60,
        "b": v59,
    };
}
%PrepareFunctionForOptimization(f62);
f62();
f62();
%OptimizeFunctionOnNextCall(f62);
f62(C61, v58);
