function f0() {
}
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C8 extends 4096 {
        }
    } catch(e9) {
    }
}
new F4(4096, F4);
new Int8Array(3745);
new Uint8Array(4096);
new Uint8Array(10);
function f20() {
    const o31 = {
        "e": -1781241988,
        8: -1781241988,
        "c": -1781241988,
        ..."g",
        ..."g",
        [1](a25, a26) {
            Object.defineProperty("n", "d", { writable: true, value: "g" });
            let v30;
            try { v30 = ("construct").concat(f20, Uint8ClampedArray, this); } catch (e) {}
            v30["n"] = Uint8ClampedArray;
        },
    };
    return o31;
}
const v33 = [f20,f20()];
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = F34.constructor;
try { v40(v33); } catch (e) {}
class C44 {
}
Uint8Array.f = -4n;
new Uint16Array(3225);
new Int16Array();
for (const v51 of v40) {
    new BigUint64Array(3375);
}
