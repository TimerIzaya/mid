new Float32Array(1011);
const v5 = new Uint8Array(201);
const v8 = new Uint16Array(13);
function F9() {
    if (!new.target) { throw 'must be called with new'; }
}
class C12 extends F9 {
}
const o13 = {
    2: C12,
};
class C17 extends Uint8Array {
    #g = 13;
    constructor(a19, a20, a21) {
        super(13, a21);
        super.length = this;
        try {
            v8.#g;
        } catch(e23) {
        }
    }
    /*
    constructor(a25, a26, a27) {
        function f28(a29, a30) {
            return a29;
        }
        this[Symbol.toPrimitive] = f28;
        a26[4] = o13;
        for (let v33 = 0; v33 < 25; v33++) {
        }
    }
    */
    get g() {
        super.byteOffset ^= 28.71296673089114;
        let v36;
        try { v36 = v8.findLast(Float32Array, v5); } catch (e) {}
        this[257] = v36;
        Object.defineProperty(this, "b", { enumerable: true, value: Float32Array });
        const v37 = 1011 << 201;
        try {
            this.#g = v37;
            new Int32Array(4096);
            function f41() {
            }
        } catch(e42) {
        }
        return v37;
    }
}
new C17(28.71296673089114, 6.707994467284659e+307, 1011);
new C17(6.707994467284659e+307, 6.707994467284659e+307, 1011);
new C17(-1.064335248855798, 6.707994467284659e+307, 13);
const v46 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f47() {
    return f47;
}
function f48(a49) {
    return a49;
}
new Map();
new Int32Array(56885);
Object.defineProperty(v46, 1, { get: f47, set: f48 });
function f55() {
    return v46;
}
class C56 extends f55 {
}
const v59 = new SharedArrayBuffer(945);
v59.slice();
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
const v65 = new C56();
delete v65[1];
