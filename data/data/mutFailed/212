const o1 = {
};
o1 & /a+b|cu(?:foo)*/u;
const v7 = new Int8Array(7);
const t4 = 7;
new t4(v7);
const v10 = new Array(2236);
[1073741825];
const v12 = [-52243,-1381212950,8,-1024,3844];
const v13 = [-4294967295];
class C14 {
    toString(a16, a17, a18) {
        let v19;
        try { v19 = Array(...a18, ...v12, ...a16, ...v10, Array, ...2236); } catch (e) {}
        a18[a18] = a16;
        const v20 = this != 2236;
        v20 ? this : 2236;
        %VerifyType(v19);
        try {
            super.n(Array, v13, v12, v20, a16);
            const v23 = [10624,733951208,4294967296,5138,14];
            v10.toString();
            function F26() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    new F26(F26, this, -302142025);
                    /Ckza\Wb?/vis;
                    /((?=.)1a{}[(?<=a)a{1,2}?a(?=b)*])/gms;
                    /Ma\W+/gudm;
                    this.b = -302142025;
                } catch(e34) {
                }
            }
            1940694780n == v23;
            new Uint8Array();
            const v39 = new Date();
            function F40(a42) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = v39;
                this.g = Date;
            }
        } catch(e43) {
        }
        return C14;
    }
}
const v46 = new Float64Array(5);
new Float64Array(v46);
const v49 = new Int8Array(5);
const v51 = new Uint8ClampedArray();
const v52 = v51.toReversed();
const v54 = [v52,v52];
Reflect.apply(v49.includes, v49, v54);
const v58 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const o77 = {
    "c": 15135,
    "a": 15135,
    "d": Reflect,
    __proto__: v54,
    "g": -1628878962,
    "type": "boolean",
    "a": Reflect,
    set b(a65) {
    },
    "g": 15135,
    "b": v54,
    get f() {
        super[1000000.0] = this;
        try {
            new Int8Array(9);
            function f70() {
                return f70;
            }
            const o72 = {
                [f70]() {
                },
            };
            [o72];
            v58.copyWithin(8, -268435456, -256);
        } catch(e76) {
        }
        return this;
    },
};
C14.prototype = C14;
const t85 = 15135;
const v78 = new t85();
new C14();
const v80 = new C14();
127n * 127n;
let v84 = -9007199254740992n;
v84--;
function f86(a87, a88, a89) {
    const o111 = {
        toString(a91, a92, a93) {
            a88 < v78;
            const v95 = super[v80];
            function F96(a98, a99, a100, a101) {
                if (!new.target) { throw 'must be called with new'; }
                v7.c = a98;
            }
            new Int8Array();
            const o109 = {
                "execution": "async",
                "d": 1000000.0,
                toString(a105, a106, a107) {
                    try {
                        v84.f = 3n;
                    } catch(e108) {
                    }
                    return 3n;
                },
            };
            return v95;
        },
        get d() {
            return this;
        },
    };
    const v112 = Int8Array?.__lookupSetter__;
    ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
    const v116 = [-1539,1,12];
    function f117() {
        return f117;
    }
    function f118(a119, a120) {
        const o121 = {
            [a119]: v116,
        };
        return a119;
    }
    f118(f118);
    f118(f117);
    try { new v112(a87); } catch (e) {}
    return o111;
}
f86.e = f86;
%PrepareFunctionForOptimization(f86);
f86(f86, f86(), f86);
%OptimizeFunctionOnNextCall(f86);
function f127() {
    return f127;
}
const o128 = {
    __proto__: f127,
    "e": f127,
};
new Int16Array(127);
new Uint8ClampedArray(995);
f86();
function f1() {
    return true;
}
new Int16Array(1);
const v7 = new Float32Array(3);
try { v7.indexOf(Float32Array); } catch (e) {}
const v11 = new BigUint64Array(16);
v11[Symbol.toPrimitive] = f1;
class C14 extends BigUint64Array {
    static [v11] = v7;
    d;
    static #o(a16, a17, a18, a19) {
        let v23 = 89024.44770369632;
        Math.abs(a19);
        Math.sqrt(a19);
        const v26 = Math.imul(-720620535, v23);
        (a19 ^ -(-720620535)) - a19;
        --v23;
        return v26;
    }
}
new C14();
const v32 = new C14();
try { v32.filter(16); } catch (e) {}
new C14();
class C37 {
    e;
    constructor(a39) {
        function F40() {
            if (!new.target) { throw 'must be called with new'; }
            for (let i = 0; i < 5; i++) {
                Symbol.iterator;
                class C45 extends WeakSet {
                    [WeakSet];
                }
                function F46(a48, a49, a50) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
        }
        try {
        } catch(e51) {
        }
        try {
        } catch(e52) {
        }
    }
    c = -3;
}
const v53 = new C37(C37);
v53.c = v53;
const v54 = new C37(C37);
const v55 = new C37(-2.0);
const v56 = v55.c;
v56 + v56;
function F58() {
    if (!new.target) { throw 'must be called with new'; }
}
try { F58.toString(); } catch (e) {}
new BigInt64Array();
class C63 {
}
9n + 9n;
-65536n == -65536n;
const v70 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
v70[7] = v70;
function f71() {
    return -3;
}
try { new f71(); } catch (e) {}
1073741824 - 1073741824;
try { Uint32Array(9n, 4096, -65536n); } catch (e) {}
const v77 = new Uint32Array(4096);
try { Int32Array.from(Int16Array); } catch (e) {}
let v81 = Int32Array.length;
v81--;
new Int32Array(9);
Uint16Array.length = Uint16Array;
const v86 = new Uint16Array(120);
try { v86.reduceRight(v77); } catch (e) {}
try { Array.bind(v54); } catch (e) {}
Array();
485 - 485;
try { new Int8Array(Int8Array, Int8Array, v77); } catch (e) {}
const v96 = new Int8Array(Array, 92, 485);
function f97() {
    return Symbol.toPrimitive;
}
v96.toString = f97;
v96[277] = v96;
const v101 = 3666 - 3666;
v101 === v101;
const v103 = v101 + v101;
v103 !== v103;
let v105 = 0;
v105 <= v105;
v105++;
let v108 = 1;
v108--;
const v110 = v105 < v108;
v110 && v110;
const v112 = v105++;
v112 * v112;
let v114 = BigUint64Array;
let v116;
try {
const t0 = "K9qD";
v116 = t0(v114);
} catch (e) {}
Math.cosh(2147483649);
Math.imul(v116, 2147483649);
let v120 = v114.length;
const v121 = v120--;
v121 >> v121;
const v123 = v120--;
v123 / v123;
v123 | v123;
new v114(v112, 485, 3666);
const v127 = BigInt64Array.bind();
v127.name = v127;
try { v127(); } catch (e) {}
const v129 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
let v130;
try { v130 = v129.sort(); } catch (e) {}
v130[4];
try { v130.sort(-65536n); } catch (e) {}
function f133() {
    const o135 = {
        get d() {
            return this;
        },
    };
    return o135;
}
const t134 = "boolean";
t134.f = "boolean";
let v137 = ("boolean").toLocaleLowerCase();
[v114,v137] = [-5,-65535,2269];
