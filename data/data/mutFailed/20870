const v2 = new Uint32Array(1);
function f5(a6) {
    a6.is = a6;
    try { a6.is(1, a6, a6, 786, f5); } catch (e) {}
    return Set;
}
f5(Uint32Array);
new Uint16Array(786);
let v12 = 84 * 84;
new Uint8Array(84);
new Float32Array(390);
Int16Array.toString = f5;
let v20;
try { v20 = new Int16Array(786, v2, Float32Array); } catch (e) {}
Object.defineProperty(v20, "isConcatSpreadable", { writable: true, value: 1 });
const v21 = new Int16Array(257);
try { v21.join(Int16Array); } catch (e) {}
512 != 512;
try { new Uint32Array(512, Uint8Array, 390); } catch (e) {}
new Uint32Array(512);
const v28 = [1.7976931348623157e+308,2.2250738585072014e-308,928419.7587767004,-279.06139374957183,1000.0];
v28[v20.isConcatSpreadable] = v28;
const o31 = {
    __proto__: v28,
};
const v32 = o31.concat();
function f33() {
    return Symbol;
}
Object.defineProperty(v32, "constructor", { writable: true, configurable: true, get: f33 });
try { v32.map(Uint8Array); } catch (e) {}
for (let [i41, i42] = (() => {
        0.0 / v20;
        v12 += 10;
        return [0, 10];
    })();
    i42 & i42, i41 < i42;
    i42--) {
    i41 >>> i41;
}
