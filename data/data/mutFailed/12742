const o3 = {
    "maxByteLength": 1000,
};
function f4(a5) {
    try { a5(414353240, 256); } catch (e) {}
    const v8 = Math.cosh();
    const v9 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
    function F10(a12, a13, a14, a15) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v16 = 0; v16 < 100; v16++) {
            const o17 = {
            };
            function f18(a19, a20, a21) {
                const o22 = {
                    "a": o17,
                };
                let v23 = 0;
                while ((() => {
                        let v24 = 10;
                        v24++;
                        return v23 < v24;
                    })()) {
                    const v27 = v9.__proto__;
                    try { v27.findLastIndex(this, v23, v16); } catch (e) {}
                    delete v9[256];
                    v23++;
                }
            }
            const v31 = f18();
            ([0,2147483647,9223372036854775807,9007199254740990,9007199254740990]).concat(v8);
            f18(v16, v16, v31);
        }
    }
    new F10();
    return Math;
}
o3.constructor = f4;
try {
    o3.b = o3;
} catch(e36) {
}
function f39(a40, a41) {
    a41[Symbol.toPrimitive] = f4;
    const v44 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
    let v45 = gc;
    function f46() {
        function f47() {
            for (const v50 in "1024") {
            }
            return a41;
        }
        return f47;
    }
    function f51(a52) {
        try {
            o3.constructor = a52;
        } catch(e53) {
        }
    }
    Object.defineProperty(v45, "toString", { enumerable: true, get: f46, set: f51 });
    try { v45.bind(v44); } catch (e) {}
    v45 /= v45();
    const o109 = {
        4294967295: a40,
        [true]: 256,
        [a41](a57, a58, a59, a60) {
            let v61 = 0;
            while ((() => {
                    new Uint32Array(186);
                    let v66 = 9007199254740991n * 9007199254740991n;
                    v66--;
                    return v61 < 3;
                })()) {
                a60 = a40;
                const o100 = {
                    set a(a71) {
                        let v73 = ~1531487198;
                        const v74 = [748666.7832804511,3.0];
                        class C76 extends Float64Array {
                            [v74];
                        }
                        const v77 = v73++;
                        class C78 {
                            static #m(a80) {
                            }
                        }
                        const v81 = C78();
                        const v82 = C78();
                        const v83 = [];
                        const v84 = [v82];
                        class C85 extends C78 {
                            #n(a87, a88, a89, a90) {
                                function f91() {
                                }
                            }
                            #g;
                        }
                        const v92 = C85();
                        class C94 extends v84.constructor {
                        }
                        const v95 = new C94();
                        Object.defineProperty(v95, 65537, { value: v81 });
                        try { v92.m(v83); } catch (e) {}
                        !v77;
                        let v98;
                        try { v98 = a71(); } catch (e) {}
                        v98[414353240];
                    },
                };
                v61++;
            }
            function F102(a104, a105) {
                if (!new.target) { throw 'must be called with new'; }
                const v106 = this.constructor;
                try { new v106(this); } catch (e) {}
                a105++;
                this.g = a104;
            }
            return a60;
        },
    };
    return o109;
}
f39(-61220, f39);
f39(-61220, 414353240);
f39(256, 414353240);
new Uint16Array(6);
function f117() {
    const o121 = {
        [null]() {
            try { this.null(f117, this, this, f117); } catch (e) {}
            super.b;
        },
    };
    return o121.null();
}
new BigUint64Array(64);
new Uint8ClampedArray(3235);
o3.constructor;
const v132 = new BigInt64Array(256);
v132.includes(null);
delete v132?.h;
function F135() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = true;
}
const v137 = new F135();
function f138(a139, a140) {
    const o142 = {
        ...a140,
        get h() {
            return this;
        },
    };
    return a140;
}
f138();
f138(v137, v137);
