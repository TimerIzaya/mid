const v4 = new BigUint64Array(1486);
const o5 = {
    [3898]: Uint32Array,
    ...v4,
};
new Uint32Array(3898);
-2563;
new BigInt64Array(2563);
try { new BigUint64Array(3898, 3898, 2563); } catch (e) {}
new BigUint64Array(7);
function f15() {
    return Uint32Array;
}
const v16 = [1073741824,1073741823,1376142744,1073741825];
let v17 = Float64Array;
v16.forEach(v17 = 2563);
const v19 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const v21 = Symbol.toPrimitive;
const o28 = {
    toString(a23, a24) {
        const v25 = 1486 && v17;
        function f26() {
            a23 *= v21;
            return v17;
        }
        return v25 <= v19;
    },
};
try { f15(); } catch (e) {}
-7 << -7;
const v33 = new BigInt64Array();
v33[-1];
for (let v35 = 0; v35 < 25; v35++) {
    const v38 = new Int8Array();
    for (const v39 in v38) {
    }
}
Math.round();
v17.reduce;
const v50 = new Date();
Symbol.for(v50.description);
const v53 = new Uint8Array();
const v54 = [65535,9223372036854775807,2101773358,536870888,536870912,7];
const v55 = /[a-zA-Z0-9]/gvisy;
const t44 = /abc?/gvmy;
t44[-2] ^= v55;
const v58 = new BigInt64Array();
class C59 {
    constructor(a61, a62) {
        for (let v63 = 0; v63 < 10; v63++) {
            v58[-1];
            try {
                super.o();
            } catch(e66) {
            }
        }
    }
}
class C67 extends C59 {
}
v54.__proto__ = v53;
