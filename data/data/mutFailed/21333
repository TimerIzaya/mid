const v2 = new Int32Array(170);
const v5 = new Int32Array(257);
const v8 = new Uint8Array(215);
class C9 extends Int32Array {
    [Int32Array] = v2;
    static [Uint8Array];
    c;
    static [v8] = Int32Array;
    static 16;
    255 = v5;
    static #h = 215;
    10;
    #a = 215;
    #e;
    34 = 215;
    static [Int32Array] = Int32Array;
    [v5];
    static e = Uint8Array;
}
new C9();
new C9();
new C9();
const v17 = [[]];
class C19 extends Map {
}
const v20 = new C19(v8);
const v21 = new C19(v17);
const v22 = new C19(v21);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = new Uint32Array();
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    try { a33.p(); } catch (e) {}
    const v38 = a33?.constructor;
    let v39;
    try { v39 = v38(); } catch (e) {}
    try { v38(); } catch (e) {}
    const v42 = arguments.length;
    Object.defineProperty(v20, "e", { configurable: true, enumerable: true, value: f32 });
    const v44 = v21["entries"](a35, ...v22, BigUint64Array, ..."entries", a34, v42);
    new Float32Array();
    class C48 {
    }
    class C49 {
    }
    const v51 = Symbol.toStringTag;
    v21[v51] = v51;
    function f52() {
        let v54;
        try { v54 = ("Vre").charAt(4096); } catch (e) {}
        try { v54.lastIndexOf("Vre", a33); } catch (e) {}
        let v56;
        try { v56 = ("Vre").codePointAt(v25); } catch (e) {}
        v56 - v56;
        v56 ^ v56;
        let v59 = Float64Array;
        v59 = a34;
        let v60 = v25.length;
        const v61 = v60++;
        try {
        } catch(e62) {
        }
        const o90 = {
            268435439: v29,
            ..."e",
            n(a64, a65) {
                return a65;
            },
            m(a67) {
                return v61;
            },
            m(a69) {
                return Map;
            },
            [f52]() {
            },
            ["entries"](a72, a73) {
            },
            valueOf(a75, a76) {
                return a75;
            },
            get h() {
                return v25;
            },
            [v30](a79, a80, a81) {
            },
            "toPrimitive": v39,
            get f() {
                return this;
            },
            [-4294967297n](a84, a85, a86, a87) {
                eval(a86);
            },
        };
        return v21;
    }
    f52();
    const v93 = Array();
    let v94;
    try { v94 = v93.findLast(f32); } catch (e) {}
    v93.unshift("entries", v44, "entries", v94);
    let v97;
    try { v97 = Int8Array.of(); } catch (e) {}
    try { v97.join(v17, v97); } catch (e) {}
    const v99 = new Int8Array(v29);
    v99.c = v99;
    const v101 = v99.buffer.slice();
    try { Int32Array(v101, arguments, -4294967297n); } catch (e) {}
    function f104(a105, a106, a107, a108) {
        return a107;
    }
    const v109 = new Int32Array();
    const v110 = v109[3];
    v110 + v110;
    for (let v112 = 0; v112 < 5; v112++) {
    }
    try { v30["find"](..."find", a36, ...v29, ...v30, ...522675525n); } catch (e) {}
}
for (let v115 = 0; v115 < 10; v115++) {
    f32(v27);
}
%OptimizeFunctionOnNextCall(f32);
f32(Map, Map, v22, v22);
