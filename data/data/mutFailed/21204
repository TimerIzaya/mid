class C3 {
    e;
    static #f;
    constructor(a5, a6) {
        try { this.toJSON(); } catch (e) {}
        a5 ** a5;
        a5.b ^= 0.6166373540258894;
        [] = "n";
        try { new a6(); } catch (e) {}
    }
    ["n"] = 56121;
    static [0.6166373540258894];
    static ["n"] = 0.6166373540258894;
}
const v10 = new C3(0.6166373540258894, 0.6166373540258894);
const v11 = new C3(v10, 0.6166373540258894);
new C3(v11, v11);
[6,127,0,44027,4096,9007199254740992,-7,0,59218];
const v14 = [-65536,-1];
[7476,-4294967296,924,4096,268435456,1538521022,-5,-1024];
function f16() {
    return v14;
}
[-9223372036854775807,-65537];
let v22 = 10 << 10;
--v22;
--v22;
new BigUint64Array();
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v34 = v30.reduce(Date)[22];
    function f37() {
        function f39(a40) {
        }
        Object.defineProperty(v30, 16, { writable: true, enumerable: true, get: f39 });
    }
    const t38 = Worker.constructor;
    new t38(v34);
    const v45 = [];
    v45.lastIndexOf(v45);
    const o47 = {
        "type": "function",
    };
    o47.arguments;
    new Worker(f37, o47);
    const v50 = Array(19793);
    for (const v51 of v50) {
    }
    const v52 = [v50,v50,v50,v50];
    new BigUint64Array();
    const v56 = [[v52,v52]];
    try { Uint16Array.from(v45); } catch (e) {}
    const v59 = v56 >= Uint16Array;
    v59 || v59;
}
new F28();
new F28();
const t59 = "byteLength";
t59[7] = "byteLength";
[-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
[-9223372036854775808,-14879,512,58376];
[64,65420,1400117362];
const v70 = new Float32Array(1);
new Uint8ClampedArray(v70);
