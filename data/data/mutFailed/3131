const v2 = new Int32Array(190);
const v5 = new Int32Array(4005);
v5[1469] = v5;
0 % 0;
Uint8ClampedArray.b = Uint8ClampedArray;
new Uint8ClampedArray(0);
[-655.1667437722222,-0.0,280533.3402055623];
const v11 = [2.220446049250313e-16,2.2250738585072014e-308,-1000.0,525.3355535448425];
const v12 = [0.0];
v12[0] = v12;
v11[1000.0] = v2;
const v16 = [-4.312893526692423,[190]];
try { v16.sort(1000.0); } catch (e) {}
[v12];
let v22;
try { v22 = ("p").blink(); } catch (e) {}
const v24 = [-9223372036854775808];
[1000,9007199254740990,4,-4294967296,-1911934186,5,-1686];
new Uint8ClampedArray(5);
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(this, a32); } catch (e) {}
    this.c = a31;
}
const v35 = [-16,-2,-56243,65535,268435439,17491,-65535,4294967296];
["8r9Ql",v11,Int32Array,v24,1.3981468289383963e+307];
const v40 = [v2];
[Int32Array,v16];
-65535n << -65535n;
const v46 = [-65535n,-65535n,-10n];
try { v16.flatMap(v46); } catch (e) {}
const v48 = [v46,-10n,-65535n];
v48[1];
const v50 = [v35,-65535n,v40,-57761n];
const v51 = [-10n,-10n,-10n];
v51[1] = v51;
[[v50,-57761n,v24,v46,-65535n],v50,v48,v46];
const v54 = [3.836595330454784e+307,-1.1402235194805368e+308];
const v55 = [991.721527488573,-290835.2265090322];
let v56;
try { v56 = v55.slice(v50, v55); } catch (e) {}
function f57() {
    const o60 = {
        "execution": "async",
        "type": "major",
    };
    return "major";
}
v55.toString = v56;
try {
    v54.length = 2499;
} catch(e62) {
}
[-1.0,-1000000.0,-6.453134415503834e+307,-2.2250738585072014e-308,1e-15,-228003.00463890494,1.9400411482062907,-197.7029619198281,Infinity];
function f65() {
    const v68 = new Uint8Array(256);
    return v68[44610];
}
let v71;
try { v71 = f65(); } catch (e) {}
const v73 = Symbol.toPrimitive;
v22.for(v73.description);
WeakMap[v73] = f65;
const v77 = /(?:a*)+q(?<a>.)/guds;
v77.unicodeSets = v71;
function f78(a79) {
    a79.dotAll = a79;
    const o83 = {
        set b(a81) {
        },
        get d() {
            return a79;
        },
        __proto__: v77,
    };
    return o83;
}
const v85 = f78(v77)?.constructor;
try { new v85(190, 190); } catch (e) {}
new WeakMap();
9 & 9;
const v93 = ("-1723624938").slice(9, "g").normalize();
try { v93.substring(v55, WeakMap); } catch (e) {}
class C95 {
    constructor(a97, a98) {
        a98.sup(v93, "-1723624938").toLocaleLowerCase();
    }
}
v22.d = C95;
const v101 = /(x)(x)(x)\1/uis;
function f102(a103, a104, a105, a106) {
    const o112 = {
        [v101](a108, a109, a110, a111) {
        },
    };
}
f102.arguments = f102;
class C113 {
}
const v114 = [-1024,536870889,65536,65536];
try { v114.findLastIndex(Uint8ClampedArray); } catch (e) {}
const o116 = {
};
o116.b = o116;
function f117() {
    gc(256);
    function* f121(a122) {
    }
    const o125 = {
        toString() {
        },
        n() {
        },
    };
}
try { f117.toString(); } catch (e) {}
f117();
function f128() {
    function f129(a130) {
        try {
            const o131 = {
            };
        } catch(e132) {
        }
    }
    try {
    } catch(e133) {
    }
}
const v134 = (a135, a136, a137, a138) => {
    function F139(a141, a142, a143, a144) {
        if (!new.target) { throw 'must be called with new'; }
    }
};
