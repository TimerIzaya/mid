[-28543,9007199254740992,4294967296,536870888,-811910111,127,-65535,1073741824,2147483649,-4294967295];
[-1532517085,4294967296,-26632];
[9];
new Map();
/ND2/gds;
class C13 extends Map {
}
const v14 = new C13();
v14.isPrototypeOf();
let v17 = Date;
try {
    v17.parse("-4294967297");
} catch(e20) {
}
class C21 {
    static {
        for (let v23 = 0; v23 < 25; v23++) {
            const v24 = [601759695];
            const v25 = [1073741824,1073741823,1376142744,1073741825];
            function f27(a28, a29, a30, a31) {
                try { new a28(); } catch (e) {}
                a30 << a30;
                function f35() {
                    return a28;
                }
                const v37 = new Int8Array();
                const v40 = BigUint64Array * 536870887;
                v40 - v40;
                try {
                    v24.findLastIndex(f35, arguments);
                } catch(e43) {
                }
                try {
                    new v17();
                } catch(e45) {
                }
                Number.isNaN(v40 ** v40);
                function f49(a50, a51) {
                }
                try { f49(); } catch (e) {}
                const v53 = v37.buffer;
                const v54 = v53.__defineGetter__;
                try { v54(); } catch (e) {}
                Object.defineProperty(v53, "constructor", { writable: true, configurable: true, value: v17 });
                %OptimizeFunctionOnNextCall(f35);
                let v57;
                try { v57 = v25["find"](..."find", a31, ...v24); } catch (e) {}
                const o58 = {
                };
                o58.e = o58;
                v57 <= a30;
                return arguments;
            }
            for (let v60 = 0; v60 < 5; v60++) {
                f27(this, v60, v60);
            }
            v17 = this;
            +1;
            Math.tanh(C21);
            const v67 = C21--;
            const v68 = !v67;
            v67 % v67;
            Math.asin(1);
            1 ** v68;
        }
    }
}
