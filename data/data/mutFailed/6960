const v2 = new Float32Array(14);
284 >>> 284;
const v6 = new Int32Array(284);
1130 * 1130;
const v10 = new Int16Array(1130);
let v11 = 0.17590294148457908;
v11++;
const v16 = -6.896938883581846;
function f17(a18) {
    return f17;
}
const v21 = [];
const o22 = {
    "type": "function",
    "a": 2.0,
    "d": f17,
    "e": v21,
    "f": Worker,
    "g": v2,
};
o22.b = o22;
const v23 = new Worker(f17, o22);
const v26 = new Uint8Array(0);
%VerifyType(Uint8Array);
v6[v11] = 2.0;
let v27;
try { v27 = v23.postMessage(); } catch (e) {}
let v28 = new Int16Array(v27, 284, 14);
try {
    let v29 = 15;
    v29--;
    new Int16Array(v29);
} catch(e32) {
}
const o33 = {
};
o33.e = o33;
o33.e = v26;
const t38 = "PI";
t38[1] = "PI";
Object.defineProperty("function", v26, { configurable: true, enumerable: true, value: v16 });
v28 &&= v10;
try { v28.keys(); } catch (e) {}
v28.buffer &= 1130;
-Float32Array;
try {
    v26.length = 1130;
} catch(e39) {
}
