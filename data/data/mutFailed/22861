const v0 = /[^xxx$Fg(x)(x)(x)\1*]/gviy;
new Int8Array([1000.0,-1.7976931348623157e+308,1000000.0,1000000000000.0,-1000000000000.0,-863970.4344405974,1.7873969073744563e+308,0.0]);
class C6 {
    constructor(a8) {
        for (const v9 of "bigint") {
            this.c = v9;
        }
    }
    h = undefined;
}
class C10 extends C6 {
}
const v11 = /Ra$4/guiy;
const v12 = /(?=.)/udiy;
-((-1.4618325192014402e+308) ** -724330360);
const v18 = [268435456,-12,1073741825,-9007199254740990,-1024,10000,512,-3];
const v20 = new Int8Array();
const t17 = v20.constructor;
new t17(v18);
new Uint8ClampedArray();
const v26 = (a27, a28, a29, a30) => {
    'use strict';
    return a27;
};
function f32(a33, a34, a35) {
    const v39 = new Uint8ClampedArray(112);
    const v42 = new Uint8Array(64);
    try { v39(-85357.59116785484, ...v42, 64, 46, -3.383486186086852e+307, ...v39); } catch (e) {}
    const o48 = {
        set e(a47) {
        },
    };
    o48.e;
    return a33;
}
f32(f32, f32(f32, f32, f32), f32);
function F55(a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -18620n;
        return arguments;
        class C61 {
        }
        const v64 = new BigInt64Array(1073741824, BigInt64Array);
        v64["lastIndexOf"](-724330360, "lastIndexOf", "lastIndexOf");
    } catch(e67) {
    }
    const v70 = new Int32Array(4096);
    new Int8Array(v70);
}
new F55(v11, v11, -558.1967363092795);
new F55(v11, v12, -4.0);
new F55(v0, v11, -765.5068933964656);
new Date(-4.0);
