function f0() {
    const o7 = {
        get f() {
            try {
                super.sinh(this, this, 0);
            } catch(e6) {
            }
            return 0;
        },
        ..."constructor",
        ["constructor"]: "-70696297",
        "h": "constructor",
    };
    return o7;
}
f0();
const v9 = f0();
f0();
new BigInt64Array(3255);
new Uint16Array(4096);
new Uint16Array(116);
Float64Array.d = Float64Array;
const v25 = new Float64Array(257);
const v28 = new Float64Array(3609);
try { v28.filter(Float64Array); } catch (e) {}
Float32Array.BYTES_PER_ELEMENT;
new Float32Array(9);
function f34() {
}
const v35 = [601759695];
const v36 = v35?.groupToMap;
let v37;
try { v37 = new v36(257); } catch (e) {}
const v38 = [1073741824,1073741823,1376142744,1073741825];
try { v38.findLastIndex(v38); } catch (e) {}
let v40 = 522675525n;
v40--;
function f42(a43, a44, a45, a46) {
    a44 >>> a44;
    function f49() {
        return v40;
    }
    f34();
    try { new Int8Array(v25, v25, 3609); } catch (e) {}
    const v53 = new Int8Array();
    function f56(a57, a58) {
        const o64 = {
            "g": 1073741824,
            get d() {
                super[a57];
                return this;
            },
            "f": 3,
            ...a57,
            "getOwnPropertyDescriptor": f49,
            p(a62, a63) {
                return f49;
            },
            1: 257,
            10: 1073741824,
        };
        return o64;
    }
    const v65 = f56(f56);
    const v66 = [772665.0825286671,-262.4525935862765,1e-15,1e-15,1e-15,1.0,2.220446049250313e-16,9.028377432945593,379974.7819749671];
    class C67 {
        constructor(a69, a70) {
            try {
                delete v66.length;
            } catch(e72) {
            }
        }
    }
    new C67(C67, v66);
    f56(v65)[10];
    const v76 = v53.buffer;
    Int8Array.prototype = Int8Array;
    const v79 = new Int8Array();
    try { v79.set(-1024); } catch (e) {}
    let v81 = 1000000000000.0;
    -(v81--);
    v76.slice(2147483648);
    const t80 = [];
    t80.length += 1.0;
    try {
        v79.valueOf = f56;
    } catch(e87) {
    }
    let v88;
    try { v88 = v36(v37, v28); } catch (e) {}
    class C90 {
        ["resolve"] = "resolve";
    }
    %OptimizeFunctionOnNextCall(f49);
    ("6Ct").normalize();
    class C94 {
    }
    Symbol.search = Symbol;
    Date.toString = Symbol;
    class C97 extends v88 {
    }
    try { new C94(); } catch (e) {}
    const v99 = new C97();
    try { v99.setMonth(C94, C97); } catch (e) {}
    let v101;
    try { v101 = v38["find"](..."find", a46, ...v35, ...v38, ...v40); } catch (e) {}
    for (const v104 in "1024") {
    }
    const o105 = {
        "execution": "1024",
    };
    Symbol.iterator = Symbol;
    Symbol("bZ");
    new Uint8ClampedArray();
    const o110 = {
    };
    v101 <= a45;
    return arguments;
}
for (let v112 = 0; v112 < 10; v112++) {
    v112 % v112;
    const v114 = f42(v112, v112, f34, v40);
    v114[3] = v114;
    const v116 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v117 = [601759695];
    const v118 = [1073741824,1073741823,1376142744,1073741825];
    v118[3];
    function f121(a122, a123, a124, a125) {
        function f127() {
            b = Float64Array;
            v38.b = -302142025;
            function F134(a136, a137) {
                if (!new.target) { throw 'must be called with new'; }
            }
            try {
                v118.forEach(Float64Array);
            } catch(e139) {
            }
            const v140 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            Symbol.toPrimitive;
            const o148 = {
                toString(a144, a145) {
                    return (a125 && Float64Array) <= v140;
                },
            };
            const o177 = {
                "c": -4294967297n,
                [522675525n](a151, a152) {
                },
                "c": v117,
                valueOf(a154, a155) {
                    return a122;
                },
                [-4294967297n](a157, a158, a159, a160) {
                },
                "e": -4294967295,
                "f": 4096,
                "d": v9,
                10: v36,
                "g": a122,
                8: f127,
                "e": -268435456,
                "maxByteLength": a122,
                "arguments": v116,
                "type": "Vre",
                ...v37,
                valueOf(a162, a163) {
                    this + -2.0;
                    +7;
                    Math.asin(7);
                    !116;
                    Math.sinh(-2.0);
                    return v140;
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a174, a175, a176) {
                    return a125;
                },
                5: -4294967295,
                6: -268435456,
            };
        }
        f127();
        const v180 = new Int8Array();
        v180.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f127);
        let v185;
        try { v185 = v118["find"](..."find", a125, ...v117, ...v118, ...522675525n); } catch (e) {}
        v185 <= a124;
        return arguments;
    }
}
%OptimizeFunctionOnNextCall(f42);
f42();
