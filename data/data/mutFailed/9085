const v0 = [];
function f1(a2, a3) {
    new Float64Array();
    return v0;
}
v0[Symbol.toPrimitive] = f1;
class C8 {
    b;
    static a = v0;
    constructor() {
        const o10 = {
            [v0]: v0,
        };
        const o11 = {
        };
        o11.f = o11;
        new Proxy(o10, o11);
    }
    static [v0];
}
new C8();
const v15 = new C8();
v15[Symbol.toPrimitive] = Symbol;
new C8();
const v20 = new Set();
try { v20.entries(); } catch (e) {}
-(-59186);
let v24 = 10852;
v24--;
class C27 extends C8 {
    static 1;
    #m(a29, a30) {
        v0 || a30;
        return Set;
        function f32() {
            return v20;
        }
        return super[f32];
    }
    [v15] = v20;
    3 = v15;
}
C27[1];
new C27();
const v36 = new C27();
v36[3];
new C27();
let v42 = Math.sin(Math.asinh());
v42++;
