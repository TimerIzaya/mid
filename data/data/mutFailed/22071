const v6 = new Uint8Array(9);
v6.lastIndexOf(10);
class C8 {
    set g(a10) {
        let v9 = this;
        const v11 = super[a10];
        super[-25981] = -25981;
        let v12;
        try { v12 = v11(v9); } catch (e) {}
        Object.defineProperty(v11, v12, { writable: true, value: v9 });
        v9 = v12;
    }
    static get a() {
        this.b;
        this * this;
        new BigInt64Array(1000);
        new Uint8ClampedArray(303);
        new Int8Array(257);
        1.0 && "toString";
        this[v6];
        return 1000;
    }
}
new C8();
const v31 = new C8();
for (let i34 = 0, i35 = 10;
    (() => {
        const v36 = i34 < i35;
        v36 || v36;
        return v36;
    })();
    (() => {
        let v40 = i35 * i35;
        v40++;
        i35--;
    })()) {
    ("toString").__proto__;
}
const v46 = new C8();
-1073741824;
let v49 = -256;
v49++;
class C52 {
    static [1073741824];
    static #a;
    #toString(a54, a55) {
        let v56;
        try { v56 = a54(a54, a54, this, v46, a54); } catch (e) {}
        a55++;
        this[213] = v56;
        const o60 = {
            "maxByteLength": 16,
        };
        const v62 = new ArrayBuffer(8, o60);
        new Int16Array(v62);
        return -15344;
    }
}
try {
const t0 = -537414997;
new t0();
} catch (e) {}
const v66 = new C52();
try { v66.hasOwnProperty(-15344); } catch (e) {}
new C52();
const v69 = new C52();
class C71 {
    toString(a73, a74, a75) {
        const v76 = this?.constructor;
        try { new v76(); } catch (e) {}
        const o78 = {
        };
        o78.g = "f";
        const o79 = {
        };
        o79.h = o79;
        Int16Array.g = Int16Array;
        Int16Array[0] = -27833;
        o79.c = o79;
    }
}
try { C71.bind("toString"); } catch (e) {}
const v83 = new C71();
function F84() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v86 = 0; v86 < 1000; v86++) {
        v86[0];
        const v89 = -15344 + v86;
        try { v89.replaceAll(this, v89); } catch (e) {}
        const v91 = v89.fontcolor(v83, v86, this);
        try { v91.replace(v69, v31); } catch (e) {}
        let v93 = v91.localeCompare(v83);
        v93--;
    }
}
const v95 = new F84();
const v96 = v95?.constructor;
try { new v96(); } catch (e) {}
