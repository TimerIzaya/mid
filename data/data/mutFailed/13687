const v2 = new BigUint64Array(8);
new Uint16Array(1);
const v8 = new Float32Array(4);
try { v8.values(); } catch (e) {}
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    const v16 = this?.d;
    try { new v16(v2, a12, a15, a14); } catch (e) {}
    a12.d = a12;
    a13 - a13;
    a15 - a15;
    try {
        this.f = v2;
    } catch(e20) {
    }
    try {
        this.b = v2;
    } catch(e21) {
    }
}
F10.g = F10;
const v22 = new F10(BigUint64Array, 4, 1, 1);
v22.length;
new F10(Float32Array, 1, 4, 8);
const v25 = new F10(4, 1, 8, 4);
function f26(a27, a28, a29) {
    const o34 = {
        6: v25,
        get e() {
            return a28;
        },
        "h": 4,
        "a": 8,
        "g": v8,
        [v8]: 1,
        __proto__: v2,
        "e": a29,
        "b": F10,
        "c": Uint16Array,
    };
    return o34;
}
const v36 = f26(v25, 1, 1)?.with;
try { new v36(Float32Array, f26); } catch (e) {}
const v39 = f26(v25, 4, f26(v25, 8, v8));
v39[4] = v39;
class C41 {
}
const v42 = new C41();
function f43() {
    return -1.4618325192014402e+308;
}
v42.toString = f43;
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    try { a47.codePointAt(Uint16Array); } catch (e) {}
    const v52 = a48?.toString;
    try { new v52("m", BigUint64Array, a47); } catch (e) {}
    const v54 = a49.valueOf(a50, this, a49, this, a47);
    const v55 = v54?.constructor;
    try { new v55(); } catch (e) {}
    v54.setHours(v54);
}
new F45("m", C41, v42);
