let v0 = -1;
const v5 = --v0;
v5 >>> v5;
v0 = v5;
const v7 = BigUint64Array ** v0;
v5[92] = v0;
const t6 = -1;
t6[512] = v7;
const v8 = new BigUint64Array(6);
const v11 = new Uint8ClampedArray(2474);
let v12 = v11[84];
const v15 = new Float64Array(112);
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v16.map(v11); } catch (e) {}
const v18 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
let v19;
try { v19 = v18.push(112); } catch (e) {}
let v23 = Uint32Array;
delete v16?.length;
function f25() {
    v11[1073741824] = f25;
    let v27;
    try { v27 = v8.forEach(v19, v15); } catch (e) {}
    v23 = v27;
    try {
        f25();
    } catch(e29) {
    }
    return v7;
}
try {
    v8.c = v5;
} catch(e30) {
}
const v31 = new v23(v16, 0, 0);
try { v31.slice(112, f25); } catch (e) {}
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(a36, a35); } catch (e) {}
    a36 - a36;
}
const v40 = new F33(v18, 0);
const v41 = new F33();
const v42 = v41?.constructor;
try { new v42(Float64Array, Float64Array); } catch (e) {}
class C45 {
}
-4294967297n <= -4294967297n;
/5*/gi;
const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v51 = [601759695];
const v52 = [1073741824,1073741823,1376142744,1073741825];
const t53 = "b";
t53.e = "B";
~522675525n;
function f56(a57, a58, a59, a60) {
    function f61() {
        let v64 = Float64Array;
        v64 = a58;
        b = v51;
        let v65 = v16.length;
        v65--;
        try {
            v52.forEach(v64);
        } catch(e68) {
            a57 = arguments;
            v12 += v65;
            Object.defineProperty(arguments, 5, { writable: true, enumerable: true, set: f56 });
            e68.message;
        }
        const v72 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.hasInstance = Symbol;
        const v74 = Symbol.toPrimitive;
        Symbol.for(v74.description);
        const o84 = {
            toString(a79, a80) {
                const v81 = a60 && v64;
                function f82() {
                    a79 *= v74;
                    return v64;
                }
                return v81 <= v72;
            },
        };
        const o105 = {
            "c": -4294967297n,
            [522675525n](a87, a88) {
            },
            "c": v51,
            valueOf(a90, a91) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a93, a94, a95, a96) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v50,
            ...v51,
            "type": "Vre",
            ..."Vre",
            valueOf(a99, a100) {
                return a100;
            },
            ..."Vre",
            4: "Vre",
            [v40]: 2474,
            "a": v50,
            10: Float64Array,
            "d": a59,
            "g": f25,
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a102, a103, a104) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f61();
    try { new Int8Array(Int8Array, "b", "b"); } catch (e) {}
    const v109 = new Int8Array();
    const v110 = v109?.__defineSetter__;
    try { new v110(v50, v50); } catch (e) {}
    %OptimizeFunctionOnNextCall(f61);
    try { v52["find"]("find", a60, v51, v52, 522675525n); } catch (e) {}
}
for (let v114 = 0; v114 < 10; v114++) {
    f56();
}
%OptimizeFunctionOnNextCall(f56);
f56();
