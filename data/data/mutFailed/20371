function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1690866501;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const o7 = {
};
function f8(a9, a10, a11, a12) {
    class C13 {
    }
    C13.f = -4n;
    const v17 = Array(256);
    const o18 = {
        __proto__: v17,
    };
    a10++;
    class C20 {
    }
    return f8;
}
class C21 extends F0 {
    a = v6;
    static d;
    static {
        super.b = this;
        let {...v23} = this;
    }
    static #m(a25) {
    }
    static o(a27, a28) {
        const v32 = new Float32Array();
        for (let v33 = 0; v33 < 25; v33++) {
            function f34(a35, a36, a37, a38) {
                try { a35.lastIndexOf(Float64Array); } catch (e) {}
                let v40 = a35[1];
                v40 >> v40;
                v40--;
                a36--;
                const v46 = arguments.__lookupGetter__?.d;
                try { new v46(f34); } catch (e) {}
            }
            f34("o");
            for (let v49 = 0; v49 < 10; v49++) {
                f34(v32);
            }
        }
        try {
            a28.length = 0;
        } catch(e52) {
        }
        return v4;
    }
    [v5] = v4;
    static #d = v6;
    4294967296 = v6;
    static g;
}
const v53 = new C21();
const v54 = new C21();
const v55 = new C21();
v55[4294967296] = v55;
function F56() {
    if (!new.target) { throw 'must be called with new'; }
}
function f58() {
    return F0;
}
const v59 = [-0.0,-186612.660374881,0.3132713947483816,1000.0,-1000000000000.0];
let v60;
try { v60 = v59.fill(C21); } catch (e) {}
const v61 = [-1000000000.0,-8.908645824658006,-1000000.0,-2.220446049250313e-16,7.0385667175036275,0.0,-Infinity,8.24901669292099];
try { v61.entries(); } catch (e) {}
const v63 = [-5.0,-1.0,1e-15];
class C64 {
    #o(a66, a67, a68, a69) {
        const v70 = super.f;
        try { new v70(a67, v55, a67); } catch (e) {}
        return this;
    }
    toString(a73, a74) {
        const v75 = [v53,v6,a73,v4,v60];
        const v76 = [a74,v54,v59];
        v76.constructor;
        [v59,v59,v59,v59];
        function F81(a83) {
            if (!new.target) { throw 'must be called with new'; }
            const v84 = this.constructor;
            let v85;
            try { v85 = new v84(); } catch (e) {}
            try {
                function f86() {
                    return v85;
                }
                const v88 = "size" && "undefined";
                with ("undefined") {
                    length = v88;
                    f86();
                }
            } catch(e90) {
            }
        }
        const v91 = new F81("undefined");
        new F81(v91);
        async function f93(a94, a95) {
            class C96 {
                [C96] = 10000;
            }
            return a94;
        }
        [C21,v63,v76,v55,v76];
        this % v75;
        try { new a73(); } catch (e) {}
        return v54;
    }
    5 = v61;
    #a;
    [v63];
    [C21];
    o(a101, a102, a103) {
        for (let v109 = 0; v109 < 32; v109++) {
            break;
        }
    }
    static {
        const v112 = super[this];
        try { v112.join(v59, v59, v112); } catch (e) {}
    }
}
C64.prototype;
new BigUint64Array();
Date | BigUint64Array;
class C121 extends Int8Array {
    [12];
}
try { new C121(); } catch (e) {}
new C64();
new C64();
new C64();
const v128 = new Uint8Array(481);
try { v128.toSorted(C64); } catch (e) {}
v128.indexOf(Uint8Array, 481);
