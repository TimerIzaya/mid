const v0 = [-655016889,-4];
[988306590];
const v2 = [-64661,10000,9007199254740990,118738998,-671110212,3453,-9223372036854775807,1467676529,-8,9007199254740992];
v2.p26 = v2;
class C3 {
}
const v4 = new C3();
const v7 = new Uint16Array(3);
v7.reverse();
function f9() {
    return v0;
}
class C11 {
    constructor(a13, a14) {
        Date | a13;
    }
}
const v18 = new Uint32Array(1);
new Float64Array(0);
Math.cbrt(1073741824);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    function f28(a29, a30) {
        const o31 = {
        };
        return o31;
    }
    const v32 = f28();
    function f33() {
        return this;
    }
    const v36 = new Float32Array(218);
    for (const v37 of v36) {
        const v38 = v37 >>> v37;
        v38 <= v38;
        Object.defineProperty(v32, Float32Array, { configurable: true, enumerable: true, get: f28, set: f33 });
    }
}
new Int8Array(240);
function f42() {
}
const v43 = [601759695];
const v44 = [1073741824,1073741823,1376142744,1073741825];
function f46(a47, a48, a49, a50) {
    a49.valueOf = f42;
    function f52() {
        return a47;
    }
    const v53 = f42();
    const v55 = new Int8Array();
    function f56(a57, a58) {
        const o80 = {
            get d() {
                const v62 = new arguments();
                const v63 = new arguments();
                function f64(a65, a66) {
                    const o78 = {
                        "h": v62,
                        [v63](a68, a69, a70) {
                            super[-9223372036854775807];
                        },
                        set b(a73) {
                        },
                        [a66]: v62,
                        __proto__: arguments,
                        "c": 9,
                        set h(a75) {
                        },
                        o(a77) {
                            return v63;
                        },
                    };
                    return o78;
                }
                f64(f64, -9223372036854775807);
            },
        };
        return v53;
    }
    const v82 = f56(f56());
    const v83 = v55.buffer;
    function f84() {
        for (const v85 in C11) {
        }
        return v2;
    }
    Object.defineProperty(v83, "constructor", { writable: true, value: f84 });
    new Int8Array();
    function f88(a89, a90, a91, a92) {
        const o97 = {
            [f88](a94, a95, a96) {
            },
        };
        return a92;
    }
    let v98 = 1000000000000.0;
    v98--;
    new Uint32Array(9);
    class C104 {
    }
    const v105 = new C104();
    [C104,C104,C104];
    ("number").slice(v105, v105);
    v83.slice(2147483648);
    %OptimizeFunctionOnNextCall(f52);
    let v110;
    try { v110 = v44["find"](..."find", a50, ...v43, ...v44, ...522675525n); } catch (e) {}
    Symbol();
    new BigInt64Array(3);
    function F116() {
        if (!new.target) { throw 'must be called with new'; }
        const v118 = this?.constructor;
        v118.d = v118;
        try { new v118(); } catch (e) {}
    }
    F116.d = v18;
    const v120 = new F116();
    function f121(a122, a123) {
        const o140 = {
            n(a125, a126) {
                new Int8Array(1342);
                new Uint8ClampedArray(798);
                function F133(a135, a136) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.hasOwnProperty(F133);
                    const v138 = this.constructor;
                    try { new v138(); } catch (e) {}
                }
            },
            "a": v120,
        };
        return o140;
    }
    function f141(a142, a143) {
        a142.__proto__;
        for (let v145 = 0; v145 < 32; v145++) {
            a142["p" + v145] = v145;
        }
        return "find";
    }
    f141(v2, v82);
    class C149 {
    }
    let v150 = new C149();
    class C151 extends C149 {
        o(a153, a154) {
            v150 %= this;
            %VerifyType(super.g);
        }
    }
    const v162 = new C151();
    function f163(a164, a165, a166) {
        const o173 = {
            toString(a168, a169, a170, a171) {
                return v162 * a171;
            },
        };
        return f163;
    }
    f121();
    const v176 = new Uint8ClampedArray();
    const o177 = {
        ...v176,
    };
    v110 <= a49;
    return arguments;
}
function f179(a180, a181) {
    function f182() {
        ("1073741823").trimRight();
        return "1073741823";
    }
    %OptimizeFunctionOnNextCall(f182);
    return v4;
}
f46.toString = f179;
for (let v185 = 0; v185 < 10; v185++) {
    f46(v185, v185, f46, v44);
}
%OptimizeFunctionOnNextCall(f46);
Math.tanh("1");
new Date();
const v191 = [];
const v193 = new BigInt64Array(v191);
function f194() {
    return f194;
}
Object.defineProperty(v193, v191, { enumerable: true, get: f194 });
f46();
