const v7 = new Set();
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = "o";
    try {
        const v16 = new Float32Array(127);
        const t6 = "o";
        t6.f = v16;
        class C18 {
            static #c = "bigint";
            static valueOf(a20) {
                this.#c = "bigint";
            }
        }
        this.e = a10;
    } catch(e21) {
    }
    try {
        this.g = Set;
    } catch(e22) {
    }
    const t21 = [];
    t21.length = 65535;
    [a11,1000,1000,1000,1000];
    try {
        this.d = a12;
    } catch(e27) {
    }
}
const v28 = new F8("Tn", "o", v7, "m");
function f29() {
    const v30 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v31 = 0; v31 < 5; v31++) {
        function f32() {
            try {
                v30.forEach();
            } catch(e34) {
            }
            return F8;
        }
        class C38 {
            static get g() {
                try {
                    var a = super.subarray();
                } catch(e41) {
                }
            }
        }
        f32.f = f32;
        f29();
        %OptimizeFunctionOnNextCall(f32);
    }
    return v30;
}
new F8("assign", "m", v28, v7);
new F8(v7, "o", Set, "Tn");
[-805.5652713051786,Infinity,-5.242102037754934,-5.0,6.447490572675903,3.0,5.0,-3.0];
[112512.45168048167,-1.0,-5.0,8.102882803037389,591.1662578223268,0.0,0.6788490297935236,2.0,5.0,-643.4688502385864];
[Infinity,-5.0];
function F50() {
    if (!new.target) { throw 'must be called with new'; }
    function f52(a53) {
        const o54 = {
        };
        return o54;
    }
}
new Set();
const o56 = {
};
const o57 = {
};
const t72 = "9007199254740992";
t72["255"] &= 7;
const v63 = new Int32Array();
const v65 = new BigInt64Array();
const v66 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
try { v66.toLocaleString(); } catch (e) {}
const v68 = [-1.7976931348623157e+308];
function f69(a70, a71, a72, a73) {
    const o74 = {
    };
    function f75() {
        return f69;
    }
    function f76(a77) {
        const o81 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o81);
    }
    Object.defineProperty(o74, "toString", { writable: true, enumerable: true, get: f75, set: f76 });
    return o74;
}
const v83 = f69(v65, 129, v68);
const v84 = f69(v63, 129, v66);
function f85() {
    const v88 = new Uint8Array(481);
    return v88;
}
Object.defineProperty(v84, Symbol.toPrimitive, { writable: true, configurable: true, value: f85 });
for (let v91 = 0; v91 < 5; v91++) {
    v84 % v83;
}
class C93 {
    #p(a95, a96, a97, a98) {
    }
}
for (let v99 = 0; v99 < 24; v99++) {
}
function F100() {
    if (!new.target) { throw 'must be called with new'; }
}
const o102 = {
};
function F103(a105, a106, a107, a108) {
    if (!new.target) { throw 'must be called with new'; }
    Reflect.ownKeys();
    gc();
    function F113() {
        if (!new.target) { throw 'must be called with new'; }
        for (const v118 of Array(19793)) {
        }
        /8/vdiy;
    }
}
