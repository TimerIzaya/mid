const v0 = [-3,1423257552,-2];
const v1 = [-9007199254740990,-1655968524,-50382];
const v2 = [6,16,268435441,4,-49599,1073741824];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    function f6(a7) {
        v0[-2];
        new Float32Array(256);
        new Uint8ClampedArray(8);
        new BigInt64Array(13);
        return Uint8ClampedArray;
    }
    a5[Symbol.toPrimitive] = f6;
    const v20 = this?.constructor;
    try { new v20(v1); } catch (e) {}
    try {
        this.e = v0;
    } catch(e22) {
    }
    try {
        this.c = a5;
    } catch(e23) {
    }
    try {
        this.b = v1;
    } catch(e24) {
    }
}
const v25 = new F3(v1);
function f26() {
    function f27() {
        delete v0[delete v2?.length];
        return v1;
    }
    return f27;
}
function f30(a31) {
    const o32 = {
        "apply": f26,
        "call": f26,
        "construct": f26,
        "get": f26,
        "getOwnPropertyDescriptor": f26,
        "ownKeys": f26,
    };
    new Proxy(v0, o32);
}
Object.defineProperty(v25, Symbol.toPrimitive, { enumerable: true, get: f26, set: f30 });
const v37 = v25.e;
try { v37.map(v2); } catch (e) {}
const v39 = new F3(v25);
v39.b = v39;
const v40 = v39.e;
try { v40.sort(v37); } catch (e) {}
const v42 = new F3(v25);
function f43() {
    new BigUint64Array();
    return v37;
}
Object.defineProperty(v42, Symbol.toPrimitive, { configurable: true, value: f43 });
const v48 = v42?.valueOf;
let v49;
try { v49 = new v48(); } catch (e) {}
function f50(a51, a52, a53, a54) {
    a51[Symbol.toPrimitive] = f26;
    function f57() {
        return Symbol;
    }
    function f58(a59) {
        const v60 = [-9223372036854775808,4294967297,1524216812,1583265095,-6,4294967297];
        function f61(a62, a63) {
            return v60;
        }
        v60.then = f61;
    }
    Object.defineProperty(a53, Symbol.toPrimitive, { configurable: true, get: f57, set: f58 });
    a51.c;
    try { a54.reduce(a53); } catch (e) {}
    a51.c = a51;
    const v68 = a54?.findLast;
    try { new v68(a54); } catch (e) {}
    const o75 = {
        get g() {
            a53 = this;
            a51 = v25;
            v2 >> v39;
            return v2;
        },
        [a51]: a53,
        "g": a51,
        "c": a53,
    };
    function f76() {
        function f77(a78) {
            const v82 = a78++;
            Math.abs(63975);
            a78 && a78;
            ~v82;
            (63975 << v82) % 63975;
            return v49;
        }
        return f77;
    }
    Object.defineProperty(o75, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f76 });
    return o75;
}
f50(v39, v39, v25, v0);
f50(v42, v39, v42, v0);
f50(v25, v42, v42, v0).c;
[886.8355067666025,1000000000.0];
[-1.0,2.2250738585072014e-308,-649320.1638426211,0.08970489124525116,-4.49906203622864e+307,2.220446049250313e-16,2.220446049250313e-16,5.0,-5.0,1000000.0];
const v96 = [3.0,-Infinity,572.3923256908752,-3.9006984395706805,-3.0,0.36231158244973827];
try { v96.group(f50); } catch (e) {}
Math.cos(-1567809689);
