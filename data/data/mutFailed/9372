const v2 = new Uint32Array(168);
new Uint32Array(255);
const v8 = new Float64Array(4096);
function f9(a10, a11, a12) {
    -a10;
    const o18 = {
        ...v8,
        get e() {
            try {
                super.valueOf(a11, a12);
            } catch(e16) {
            }
            function f17() {
                return a11;
            }
            return 4096;
        },
        "c": a11,
        "b": v2,
    };
    return o18;
}
f9(255, 255, 255);
const v20 = f9(168, 4096, Float64Array);
v20.e = v20;
f9(168, 255, v8);
class C23 {
    static {
        try { this.bind(v8); } catch (e) {}
        const v27 = Symbol.hasInstance;
        Symbol.for(v27.description);
        this[v27].name;
    }
    #p() {
        let v34;
        try { v34 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v34.#p(undefined, v34, v34, undefined);
        } catch(e36) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v37 = new v8();
v37.g = v37;
const v38 = new C23();
v38.c;
const v40 = new C23();
const v41 = v40?.constructor;
try { new v41(); } catch (e) {}
function f43(a44) {
    a44.prototype = a44;
    const o50 = {
        15: a44,
        toString(a46, a47) {
            super.h = a47;
            try { C23.stringify(a44, a44, this); } catch (e) {}
            try {
                C23.c = v37;
            } catch(e49) {
            }
            return a46;
        },
        2147483647: f9,
        __proto__: v38,
        "c": a44,
        ...a44,
        "f": a44,
    };
    o50[15];
    return o50;
}
const v52 = f43(C23);
const t75 = f43(v40);
t75(v52);
-65536n !== -65536n;
[0.0,26.917886948179785];
[4.0,-6.418452896256084,1000000000.0,4.0,-2.220446049250313e-16,-1000000000.0];
const v61 = [883.1365358956336,-266.1024094651509,-5.0,1.4118854267221805e+308,-786614.3512895996];
try { v61.map(C23); } catch (e) {}
const v64 = v52 > C23 ? v52 : C23;
try { v64.call(4096); } catch (e) {}
for (let i67 = 0; i67 < 5; i67++) {
    try {
        const v73 = new f43(v52);
        try { v73.toString(Uint32Array, i67); } catch (e) {}
    } catch(e75) {
    }
}
