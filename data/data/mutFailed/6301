for (let v1 = 0; v1 < 5; v1++) {
    function f2() {
        class C3 {
        }
        const v4 = new C3();
        try { v4.isPrototypeOf(v4); } catch (e) {}
        return v4;
    }
    f2();
    %OptimizeFunctionOnNextCall(f2);
}
let v9 = 10000n;
v9--;
[false,false,[v9,false,v9],472982363n,64n];
[false];
const v15 = new Map();
-4294967295 << -12;
with (undefined) {
}
new Int16Array(207);
2041 + 2041;
const v27 = new Int16Array(2041);
v27[510];
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    function f33(a34, a35) {
        const o36 = {
            "b": a32,
        };
        return a35;
    }
    f33(f33, F29);
    const o44 = {
        n(a40, a41) {
            return Math.ceil(64n);
        },
    };
    try { o44.n(o44, o44, o44, o44); } catch (e) {}
    const v46 = this.constructor;
    try { new v46(f33); } catch (e) {}
    const v48 = ++a32;
    const v52 = new Uint16Array(["4294967296"]);
    const o53 = {
    };
    const o59 = {
        6: undefined,
        "d": undefined,
        [472982363n]: 2105444095n,
        __proto__: o53,
        "g": v48,
        "b": -4294967296n,
        "arguments": v52,
        valueOf(a58) {
            return 2041;
        },
    };
}
new F29(F29, F29);
const o66 = {
    [1.7976931348623157e+308](a65) {
    },
};
const v67 = new Int16Array(9);
v67[0];
const v69 = [];
try { v69.findLast(v15); } catch (e) {}
const v73 = new Float32Array(4061, 4061);
const v74 = v69.constructor;
try { new v74(v67); } catch (e) {}
class C76 extends v74 {
    [4061] = v73;
    3;
}
function F77() {
    if (!new.target) { throw 'must be called with new'; }
}
for (let [v80,...v81] of "atan2") {
}
const v82 = new C76();
v82.e = v82;
