function f0() {
    const o17 = {
        ["b"]: "-16",
        [214262.12571223802](a5, a6) {
            super.d = 214262.12571223802;
            let v7 = this.__proto__;
            a6 * (v7 = "b");
            super.a >>= a6;
            return "b";
        },
        valueOf(a10, a11) {
            const o15 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o15);
            return 214262.12571223802;
        },
        ..."b",
        ..."-16",
        [f0]: f0,
        "g": "b",
        __proto__: "b",
    };
    return o17;
}
f0();
const v19 = f0();
f0();
const v21 = [-5.0,-1.0,767.1383679518692,Infinity,799.70340449338];
v21 ^ v19;
const v23 = f0();
const v24 = v23.g;
for (let v25 = 0; v25 < 32; v25++) {
    v23["p" + v25] = v25;
}
[521334.4530494802,-6.344830248353625e+307,6.780630040633014,Infinity,-93138.62907756085,7.533907739081396e+307];
[-8.105896123611974e+307,NaN,-1000000.0];
try { v21.flat(v24); } catch (e) {}
const o37 = {
    "maxByteLength": 257,
};
const v39 = new SharedArrayBuffer(257, o37);
new Uint16Array(v39);
new Float32Array(100);
new Uint16Array(0);
new Int16Array(89);
class C53 {
    e = 1.263848426042065;
}
const v54 = new C53();
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    a57.e;
    Number.isFinite();
    const v62 = this.constructor;
    try { new v62(v54); } catch (e) {}
}
new F55(v54);
new F55(1.263848426042065);
