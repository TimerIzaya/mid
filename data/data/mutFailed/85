let v0 = 257;
let v1 = 109771003;
class C3 {
    constructor(a5, a6) {
        v0 >>>= (v1 = v0);
    }
    static {
        let v8;
        try { v8 = this.getSeconds(v1, v1, v1, -306.6584956817626, this); } catch (e) {}
        let v10;
        try { v10 = v8(); } catch (e) {}
        v10[48] >>= v8;
    }
    #c;
}
const v11 = new C3(v1, C3);
new C3(v11, v11);
new C3(v0, -306.6584956817626);
Math.exp(-Infinity);
function f18(a19, a20, a21) {
    return a21;
}
function f27() {
    Reflect.construct(Symbol, [Reflect,Reflect,Reflect,Reflect,Reflect]);
    return f27;
}
try { f27(); } catch (e) {}
new Uint32Array(253);
new Float64Array(1839);
let v6 = 242;
v6--;
const v9 = new BigInt64Array(v6);
v9.f = v9;
const v10 = /G?/vis;
/kj/iu;
/lxyz{0,1}?/mvgisyd;
class C13 {
    valueOf() {
    }
    o() {
        this.valueOf(this);
    }
}
new Uint8ClampedArray(1203);
let v25 = new BigInt64Array(8);
const v28 = new Float64Array(2);
v28[1] = v28;
function f30() {
    return "next";
}
const v32 = 16 ^ 16;
const v33 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
const v34 = v33.sort();
const v36 = new Float32Array();
v36.constructor;
const v39 = Symbol.toPrimitive;
const o41 = {
    [v39]() {
    },
};
try { v34.toSpliced(v10, Uint8ClampedArray); } catch (e) {}
const v44 = new Set(v33);
let v45 = undefined;
v45 = v44;
[-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456];
const v49 = ([])?.find;
let v50;
try { v50 = new v49(v44); } catch (e) {}
const v51 = v50.groupToMap;
let v52;
try { v52 = new v51(); } catch (e) {}
const v53 = [9007199254740992n,f30];
try { v53.entries(); } catch (e) {}
const v55 = [v32];
function f58() {
    const o59 = {
        "c": f58,
    };
    return o59;
}
-409.5445341345936 + -409.5445341345936;
2.220446049250313e-16 - 2.220446049250313e-16;
const v64 = [2.220446049250313e-16,4.276454155698374];
const v65 = [v64,v64,2.220446049250313e-16,v64];
const v66 = [2.220446049250313e-16,-409.5445341345936];
function f67(a68, a69, a70) {
    a69 !== a69;
    Date.now();
    9 ** [Date];
    const v77 = v25--;
    const o82 = {
        "h": Date,
        "a": v77,
        [a70](a79, a80, a81) {
        },
        "b": a70,
        1942: v66,
        "g": v66,
        ...v65,
    };
    return o82;
}
const v83 = f67(v65, -409.5445341345936, -409.5445341345936);
f67(v64, v66, 2.220446049250313e-16).b;
const o92 = {
    __proto__: v83,
    [Uint32Array]() {
    },
    "d": v52,
    "f": v39,
    valueOf(a89) {
        return f30;
    },
    126: undefined,
    ...v83,
    valueOf(a91) {
    },
    "type": "next",
    "h": v39,
    "a": 16,
};
o92.g;
-560.0308879674441 !== -560.0308879674441;
function F96() {
    if (!new.target) { throw 'must be called with new'; }
    const v98 = [1073741824,1756196835,536870889,256,6,58443];
    const v99 = [NaN,-5.161337834188833e+307,NaN,-984.7986985006023];
    class C100 {
        constructor(a102, a103, a104) {
            const v105 = v99.constructor;
            Object.defineProperty(v105, "g", { writable: true, configurable: true, enumerable: true, value: v98 });
            class C106 extends v105 {
            }
            C106.g = C106;
        }
    }
    const v107 = new C100();
    new C100(v107, v98, v99);
}
const v109 = v65.findIndex(f67);
v109 + v109;
Object.defineProperty(v55, 2081, { configurable: true, enumerable: true, value: 2056527154 });
