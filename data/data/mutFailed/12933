const v2 = new Float32Array(101);
try { new BigInt64Array(v2, BigInt64Array, Float32Array); } catch (e) {}
const v6 = new BigInt64Array(14);
-1000;
function f10() {
    function f11(a12, a13) {
        const v15 = new Uint32Array();
        v15[1];
        return v6;
    }
    return f11;
}
Object.defineProperty(Int32Array, Symbol.toPrimitive, { enumerable: true, get: f10 });
const v19 = new Int32Array(1000);
class C20 extends Int32Array {
    static #toString(a22, a23, a24) {
        const v27 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
        const v28 = [-1073741824,1665564361,16526,1805211777,10,-9007199254740990,4,-17063,-1];
        const v29 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
        const v30 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        const v31 = [-1.015259194643325e+308,-Infinity,-9.825391401141273,-2.2250738585072014e-308,5.0,-2.2250738585072014e-308];
        class C32 {
            constructor(a34, a35, a36, a37) {
                const v38 = this?.constructor;
                try { new v38(v30, a36, a36, v27); } catch (e) {}
                a35 >>> a35;
                -0.0 >>> -0.0;
            }
            /*
            constructor(a46, a47, a48, a49) {
                const o55 = {
                    "maxByteLength": 2240,
                };
                const v57 = new ArrayBuffer(2240, a47);
                new Uint8ClampedArray(v57);
                this[268435456];
                v29 && this;
                try {
                    v29.length = v31;
                } catch(e62) {
                }
            }
            */
            static 268435439 = v28;
            #c = -2.2250738585072014e-308;
            static 832209355 = 2.220446049250313e-16;
        }
        new Uint32Array(9);
        new Float32Array(1);
        new Int8Array(1000);
        return Int32Array;
    }
    static d = 101;
    static #p(a73) {
        function f74() {
            return a73;
        }
    }
    [Int32Array];
}
function f75() {
    return BigInt64Array;
}
function f76(a77) {
    a77 <= 1000;
}
Object.defineProperty(C20, "e", { writable: true, get: f75, set: f76 });
const v81 = "p" + 101;
const t68 = "undefined";
t68[v81] = 101;
const t70 = [1073741823,64,-192774235];
t70.length = 127;
C20.e = C20;
new C20();
new C20();
const v86 = new C20();
class C88 {
    toString(a90) {
        this.e *= 0.8199829542463926;
    }
}
function f92() {
    let v93 = -9223372036854775808n;
    const v94 = [-9007199254740991,536870888,52691,-1,-128,-196204265,0];
    function f96(a97, a98) {
        function F99(a101, a102, a103) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a102;
            } catch(e104) {
            }
        }
        new F99(1000, a97, v19);
        new F99(1000, f75, v19);
        new F99(v81, C88, v86);
        return Symbol;
    }
    Uint32Array[Symbol.iterator] = f96;
    new Uint32Array(v94);
    for (let v111 = 0; v111 < 10; v111++) {
        function* f112(a113, a114, a115) {
            return a114;
        }
        f112();
    }
    v93 %= 45725n;
    Uint32Array[1] = Uint32Array;
    new Uint32Array(159);
    new Int8Array(16);
    return 45725n;
}
for (let v124 = 0; v124 < 5; v124++) {
    v124 << v124;
    f92();
    %OptimizeFunctionOnNextCall(f92);
}
("async").toUpperCase();
Uint32Array[Symbol.iterator] = f10;
const v132 = new Uint32Array(Uint32Array, Uint32Array);
v132[0.8199829542463926];
