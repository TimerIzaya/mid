const v0 = [127];
const v1 = [57345,-319796809,-539201701,128,-65537,2,-7,-19224];
function f2() {
    return v0;
}
v1.toString = f2;
[-54070,-1073741824,-1024,-1062287736,4294967295];
function f7() {
    return v0;
}
try { Array.isArray(Array, Array, v0, v0); } catch (e) {}
new Array(94);
const v12 = [-9223372036854775807];
const v13 = [2147483649,10,2031886620,268435439];
const v14 = [1073741824,1073741823,127];
try { v14.reverse(); } catch (e) {}
const v16 = [-4944,-23528,536870912,2,128,7];
[-1980854493,-1073741824,129,512];
const v18 = [65536,-1543491052,2147483647,9007199254740991,7];
try { v18.flat(v1, v1); } catch (e) {}
function F20() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = v16;
    try {
        this.b = -1052649622;
        const v25 = -(-7);
        Math.tan(v25 ** v25);
    } catch(e28) {
    }
}
function f29(a30) {
    try { Array.isArray(f7); } catch (e) {}
}
Object.defineProperty(F20, "f", { writable: true, configurable: true, set: f29 });
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    function f36(a37) {
        try {
            this.length = 0;
        } catch(e39) {
        }
        return v13;
    }
    this.constructor = f36;
    try { this.toString(); } catch (e) {}
    a34.f = a34;
    const v41 = this.constructor;
    try { new v41(F20, a34, F20, v41); } catch (e) {}
    new F20();
}
try { F32(v14, v12); } catch (e) {}
new F32(F20, F32);
