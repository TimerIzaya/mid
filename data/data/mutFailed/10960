new Int16Array(-2);
const v5 = new Int16Array(3359);
const v8 = new Uint32Array(4);
v8[3] = v8;
[29029,946223868,32000,3,13,-3];
const v10 = [-12,11,-1024,127,9223372036854775807,-49675];
const v11 = v10?.find;
let v12;
try { v12 = new v11(3359); } catch (e) {}
if (v12 === Int16Array) {
    try { v11(v11, v5, Uint32Array, v5, 3359, 3359); } catch (e) {}
} else {
    try {
        v5.a = v8;
    } catch(e15) {
    }
}
const v16 = [1073741825,43957,2,2690];
let v17;
try { v17 = v16.group(v5); } catch (e) {}
function f18(a19, a20) {
    a20.prototype = a20;
    const o29 = {
        "a": Int16Array,
        "g": Uint32Array,
        "f": Int16Array,
        [v8](a22, a23, a24) {
            try { a22(a24, a22); } catch (e) {}
            return -2;
        },
        "e": 3359,
        ...v16,
        ...v10,
    };
    return o29;
}
f18(4, Int16Array);
function f31(a32, a33) {
    const o34 = {
        ...v8,
        __proto__: v17,
    };
    return o34;
}
f31(-2, Int16Array, Int16Array, Int16Array);
f31(3359, 3359);
f31(v11, v11, 4);
f18(-2, f18)[6];
f18(-2, v16);
let v41 = -128;
v41--;
-1986892121 >> -1986892121;
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toLocaleString(); } catch (e) {}
    a49 || a49;
}
const v52 = new F46(-1986892121, -1986892121);
let v53;
try {
const t0 = true;
v53 = t0(F46, -1986892121, v52, v41);
} catch (e) {}
const v54 = `
`;
try { v53(v54); } catch (e) {}
