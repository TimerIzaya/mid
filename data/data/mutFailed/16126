function f1(a2) {
    return a2;
}
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v6 = 0; v6 < 50; v6++) {
        const v7 = v6 << v6;
        for (let v8 = 0; v8 < 10; v8++) {
            v8 == v8;
            try { ("p").toWellFormed(); } catch (e) {}
            ("p").codePointAt(Uint8ClampedArray);
            ("p" + v8).localeCompare(v7);
        }
    }
}
new F4();
new Array(64);
[-1000000000000.0,6.955230001948216,-681319.8065144399,-576.6745271839719,NaN];
const v19 = [1.0,-1000000000000.0,1.7976931348623157e+308];
const v20 = [-1.0];
new Int16Array(116);
new BigUint64Array(3);
new Int16Array(3);
new Uint32Array(174);
new Float32Array(1018);
const o44 = {
    get e() {
        return "isConcatSpreadable";
    },
    "d": Float32Array,
    n(a42, a43) {
        return 3;
    },
};
class C45 {
}
const v46 = new C45();
v46 << -1557853178;
function F50(a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F50;
}
const v54 = F50?.bind;
try { new v54(o44); } catch (e) {}
const v56 = new F50();
new F50();
new F50("function", v56);
let v59 = 4096;
v59--;
new Float32Array();
class C62 {
    static {
        try { new this(); } catch (e) {}
        for (let v65 = 0; v65 < 10; v65++) {
            const v66 = [-65537,-24143,-1293542190,14907,3476,-65083];
            const v67 = [65537,3,-25535,268435440,-2,9007199254740990,1,-128,9007199254740990];
            const v68 = [6,-536870912];
            const v70 = new Date();
            function F71(a73) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = v70;
                this.g = Date;
            }
            new F71(v66);
            const v75 = new F71();
            class C76 {
                constructor(a78, a79) {
                    function f80(a81, a82, a83, a84) {
                        const o85 = {
                            "deleteProperty": Date,
                            "ownKeys": Date,
                        };
                        return v75;
                    }
                    f80(v67, Date);
                }
                [v68];
                g = v75;
            }
            new C76();
            new C76();
            const v90 = new Uint16Array();
            const v93 = new Float64Array(453);
            const v94 = v93.toSorted();
            const o95 = {
                "c": Float64Array,
                "f": v68,
                __proto__: v90,
            };
            Date();
            Date.valueOf = v94;
            v65 % v65;
            function f98() {
                return v65;
            }
            const v99 = [601759695];
            const v100 = [1073741824,1073741823,1376142744,1073741825];
            function f102(a103, a104, a105, a106) {
                f98();
                let v109;
                try { v109 = v100["find"](..."find", a106, ...v99, ...v100, ...522675525n); } catch (e) {}
                const v110 = v109 <= a105;
                v110 && v110;
            }
            for (let v112 = 0; v112 < 10; v112++) {
                f102();
            }
        }
        ("object").__proto__?.trimRight.shift();
        new Proxy(Uint32Array, v19);
        ([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(v20);
    }
}
