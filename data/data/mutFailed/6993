let v4 = Int16Array;
const v5 = new v4(38);
let v8 = new BigUint64Array(9);
let v10;
try { v10 = v8.forEach(...5, ...v5, 5, -7, ...v8, 5); } catch (e) {}
let v11;
try { v11 = v5.copyWithin(5, 5); } catch (e) {}
for (let v12 = 0; v12 < 32; v12++) {
    v10["p" + v12] = v12;
}
let v16 = new Uint32Array(5);
const t11 = "64";
t11[4] = v11;
({"buffer":v8,"byteOffset":v16,"length":v4,} = v16);
const v19 = new WeakMap();
const v24 = ([1.479450712344466]).join();
v10 = 9 instanceof WeakMap;
v8[v4] = v19;
v5[268435440] **= v4;
try {
    ("64").startsWith("64");
} catch(e27) {
}
for (let v28 = 0; v28 < 25; v28++) {
    v24.__proto__;
}
