const v0 = [];
function f1() {
    const o12 = {
        n() {
            return this;
        },
        "b": v0,
        __proto__: f1,
        "a": v0,
        "e": v0,
        ...f1,
        "arguments": v0,
        "arguments": v0,
        set g(a4) {
            v0.__proto__ < f1;
        },
        o() {
            this[this];
            for (let v9 = 0; v9 < 32; v9++) {
                v0["p" + v9] = v9;
            }
            return v0;
        },
    };
    return o12;
}
function f13() {
    const o14 = {
    };
    return o14;
}
f13();
const v16 = f1();
const v17 = f1();
f1();
function F19(a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a21;
    } catch(e22) {
    }
    try {
        this.d = v17;
    } catch(e23) {
    }
    try {
        this.b = v0;
    } catch(e24) {
    }
}
new F19(v16);
const v26 = [Infinity];
class C27 {
    [v26];
}
new BigInt64Array([63570]);
new F19(v17);
new F19(v16);
const v40 = new Set();
v40["delete"](839612.5677247904);
const v44 = new Float64Array(127);
(127).constructor;
new Int8Array(1073741823);
let v49 = 9223372036854775807;
v49 = 65536;
1024 >>> 1024;
try { new Uint32Array(1024, Uint32Array, 127); } catch (e) {}
new Uint32Array(1024);
Float64Array.e = Float64Array;
const v58 = new Float64Array(159);
try { v58.filter(Float64Array); } catch (e) {}
[v58];
[v44];
[Float64Array,Uint32Array,159,127];
[1000000000.0,-1000.0];
function F64(a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(a66); } catch (e) {}
    const v69 = this.constructor;
    try { new v69(); } catch (e) {}
    const o72 = {
        "maxByteLength": 201,
    };
    function F73(a75, a76, a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
        a75.lastIndexOf(a75, a76);
    }
    a66--;
    a66 & a66;
}
function f82(a83) {
    return a83;
}
class C84 extends f82 {
    [1024] = Float64Array;
    [1073741823];
}
new F64();
const o86 = {
};
gc();
const v89 = [-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308];
function F90(a92, a93) {
    if (!new.target) { throw 'must be called with new'; }
    const v94 = this.constructor;
    let v95;
    try { v95 = new v94(v89, v89, a93, v89); } catch (e) {}
    v89.fill(v95, v94);
    const o97 = {
    };
    const v98 = [F90,F90,F90];
    function f99() {
        return v89;
    }
    const o101 = {
        ...o97,
    };
    Reflect.apply(f99, v98, o101);
}
("29753").replaceAll("29753", "b").split("b");
("boolean").split("toString");
function f110(a111, a112, a113) {
}
function f114(a115, a116, a117, a118) {
}
const v121 = new Uint8ClampedArray(104);
v121.toLocaleString().toLocaleLowerCase();
