const v1 = new Map();
const v4 = 16 >>> 16;
const v6 = -268435456 % -268435456;
let v7 = -16;
const v12 = new Int16Array(129);
let v13;
try { v13 = v12.slice(v1, -1024); } catch (e) {}
let v14;
try { v14 = v13.fill(-268435456); } catch (e) {}
let v15 = 2087;
let v16 = 0;
while (v16 < 3) {
    v13.__proto__;
    v1[v12];
    v16++;
}
let v22 = v15--;
const v23 = v22++;
try { new BigUint64Array(BigUint64Array, -1024, -1024); } catch (e) {}
function f26(a27, a28) {
    [669267.2549003235,-4.0,-1000000000000.0,-1e-15,Infinity,-9.226627689020816,1.4095831054560664e+307];
    [-8.506900568998905e+307,1000000.0,Infinity,-5.111135460339604,7.4642246715086955,NaN,-1e-15,-546605.3338869923,4.0];
    [Infinity,5.0];
    return BigUint64Array;
}
f26(129, v23);
new BigUint64Array(v15);
v14[2147483649] = v1;
let v36 = 1.7976931348623157e+308;
let v37 = -(-256);
Math.atan(7);
v37--;
Math.acosh(7);
Math.atan2(v37, v37);
++v36;
7 | 7;
try { new BigInt64Array(Int16Array, Int16Array, 7); } catch (e) {}
const v47 = new BigInt64Array(7);
let v50;
try { v50 = new Symbol(); } catch (e) {}
const v51 = Symbol("bZ");
Object.defineProperty(v51, 3538031752, { writable: true, enumerable: true, value: v50 });
Symbol.split %= v4;
const v52 = 16 ^ v47;
const t44 = "bZ";
t44[v52] = v52;
v7 = v6;
Symbol.for(v51.description);
