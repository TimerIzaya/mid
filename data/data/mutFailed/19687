function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.match] = f0;
    try {
        this.a = f0;
    } catch(e5) {
    }
    try {
        this.h = f0;
    } catch(e6) {
    }
}
const v7 = new F1();
v7[Symbol.toPrimitive] = f0;
const v10 = new F1();
const v11 = new F1();
class C12 extends F1 {
    static #e;
    o(a14) {
        function F15(a17, a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = v7;
            } catch(e20) {
            }
            try {
                this.b = v10;
            } catch(e21) {
            }
            try {
                this.c = f0;
            } catch(e22) {
            }
        }
        new F15(this, v7, v11);
        const v24 = new F15(v7, v11, F15);
        new F15(v11, v24, F1);
        return a14;
    }
}
C12.length = C12;
const v26 = new C12();
v26.b = v26;
const v27 = new C12();
try { v27.a(); } catch (e) {}
const v29 = new C12();
[8,129,-2147483648,-9007199254740990,727069518,-6,786544465,-31805,-3,4294967297];
const v31 = [-12,4294967297,1073741823,-32556,-15,-29266];
const v32 = [2147483648,-1597389282,-824817917,50927,-2133077895];
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this?.__lookupSetter__;
    try { new v35(C12); } catch (e) {}
    this.g = 1469121131;
}
try { F33(); } catch (e) {}
const v39 = new F33();
function f40(a41, a42) {
    new Int16Array(174);
    new Int32Array(244);
    new BigUint64Array(62);
    return v10;
}
v39.constructor = f40;
const v52 = new F33();
v52.length = v29;
v52.length = v52;
const v53 = new F33();
v53.g = v53;
function f54(a55, a56) {
    a56.b = v26;
    const v57 = a56?.constructor;
    try { new v57(); } catch (e) {}
    a55.b = a55;
    const v59 = a56.g;
    v59 != v59;
    const o69 = {
        set c(a62) {
            new F33();
        },
        [-2]: a55,
        get h() {
            /[]ba{12,3bd(x)(x)(x)\4*/imsy;
            /\p{Script_Extensions=Greek}tA(?:a+)*/vdim;
            const v67 = /a{12,3b/disy;
            try {
                a55.f = v67;
            } catch(e68) {
            }
            return v39;
        },
        "d": F33,
        "b": v39,
        ...v52,
        "h": a55,
        "g": v52,
    };
    return o69;
}
function f70() {
    const v71 = [v52,v31];
    [v71,Symbol,v71,v71,v29];
    [v53,v11];
    return v71;
}
Object.defineProperty(f54, "valueOf", { writable: true, value: f70 });
try { new f54(v26, v32); } catch (e) {}
f54(v39, v39);
const v76 = f54(v53, v52);
f54(v39, v53);
let v79 = 10;
v79++;
const v81 = -v79;
let v83 = 1000000.0;
v83++;
const v87 = [F33];
const v88 = [v87,v87,v52,v79,-773569.6068609683];
const v89 = v88?.every;
try { new v89(v29); } catch (e) {}
v88.e = v88;
const v91 = [-773569.6068609683,v88];
try { v91.sort(f0); } catch (e) {}
function f93() {
}
const v94 = /a\sc?/gdi;
v94.b = v87;
v94.b = v94;
const v95 = /xe+/gudimsy;
v95.dotAll = v95;
const v96 = /i(?<a>(?<b>(?<c>(?<d>.).).).)/gvisy;
const v100 = -1582101658 | -1582101658;
-1582101658 / -1582101658;
try { ("object").trimLeft(); } catch (e) {}
try { ("YPzzJ").match(v7); } catch (e) {}
const t136 = "YPzzJ";
t136[2] = "YPzzJ";
let v106;
try { v106 = ("YPzzJ").toLocaleUpperCase(); } catch (e) {}
try { v106.match(v96); } catch (e) {}
let v108;
try { v108 = v106.normalize(); } catch (e) {}
let v109;
try { v109 = v108.fontsize(F33); } catch (e) {}
try { v109.sub(); } catch (e) {}
try { ("1").blink(); } catch (e) {}
let v113;
try { v113 = ("1").normalize(); } catch (e) {}
try { v113.trimLeft(); } catch (e) {}
const v115 = ("1")?.slice;
try { new v115(2, 2); } catch (e) {}
let v117 = 1236059864;
const v118 = v117--;
v118 > v118;
const v120 = v117 >>> v117;
v120 !== v120;
const v122 = v120 & v120;
const v123 = v117 + v117;
const v124 = [];
const t160 = [v124];
const v126 = delete t160[0];
!v126;
!(!v126);
let v130 = 129;
v130++;
const v132 = ("1")[0];
try { v132.search(v100); } catch (e) {}
let v134;
try { v134 = v132.sup(); } catch (e) {}
try { v134.fixed(); } catch (e) {}
const v136 = v132.substring(v130);
try { v136.trimEnd(); } catch (e) {}
try { v136.fontsize(v94); } catch (e) {}
let v139 = 9569;
v139++;
v139 ^ v139;
function f143() {
    function f144(a145) {
        return v139;
    }
    class C146 extends f144 {
    }
    try { C146(); } catch (e) {}
    C146.name = C146;
    let v149 = 268435440;
    v149--;
    try { ("cJ").charAt(f54); } catch (e) {}
    let v153;
    try { v153 = ("cJ").charAt(f143); } catch (e) {}
    try { v153.blink(); } catch (e) {}
    let v155;
    try { v155 = ("cJ").padStart(); } catch (e) {}
    try { v155.strike(); } catch (e) {}
    let v157;
    try { v157 = v155.codePointAt(); } catch (e) {}
    -v157;
    const o167 = {
        "d": v149,
        "a": 4.0,
        [v132](a160, a161, a162) {
            Object.defineProperty(v96, v126, { enumerable: true, value: -1707622606 });
            return 4.0;
        },
        "b": v136,
        __proto__: "cJ",
        "f": "cJ",
        ..."cJ",
        8: f143,
        "h": "cJ",
        valueOf(a164) {
            const o165 = {
                __proto__: this,
                2261555780: "cJ",
            };
            super.toStringTag;
            return this;
        },
        "c": "cJ",
    };
}
f143.length = f143;
const v168 = f143();
const v169 = f143();
const v170 = f143();
const v171 = [v170,v168,v169,v169];
try { v171.push(v130); } catch (e) {}
try { v171.shift(); } catch (e) {}
const v174 = [v124];
try { v174.reduceRight(v81); } catch (e) {}
let v176;
try { v176 = v174.reduce(v139); } catch (e) {}
const v177 = [v170,v174,v174,v171];
const v178 = v177?.reduce;
v178.d = v178;
v178.length = v178;
let v179;
try { v179 = new v178(-9007199254740990); } catch (e) {}
const v180 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
v180[4];
const v182 = [2033313755,-16,16,16,-24747,6,256];
const v183 = v182[5];
v183 / v183;
const v185 = v183 >> v183;
v185 << v185;
const v187 = [65535];
v187[1] = v123;
v187[0];
const v189 = v187[0];
v189 + v189;
const v192 = Set.prototype;
try { v192.add(v109); } catch (e) {}
const v194 = v192?.keys;
try { new v194(); } catch (e) {}
new Set();
function F197(a199, a200, a201) {
    if (!new.target) { throw 'must be called with new'; }
    function f202() {
        return f0;
    }
    function f203(a204) {
        function f205() {
            const o206 = {
            };
            return o206;
        }
        const v207 = f205();
        class C208 {
            toString(a210) {
                return v207;
            }
        }
        const v211 = new C208();
        function F212(a214, a215, a216) {
            if (!new.target) { throw 'must be called with new'; }
            const v217 = this.constructor;
            try { new v217(v211, f205, F212); } catch (e) {}
            a216.prototype = a216;
        }
    }
    Object.defineProperty(this, "length", { writable: true, configurable: true, get: f202, set: f203 });
    function f219() {
        return v122;
    }
    Object.defineProperty(a200, 1, { configurable: true, enumerable: true, get: f219 });
    const v220 = a201[1];
    this.length = this;
    const v221 = this?.__defineGetter__;
    try { new v221(v220, v76); } catch (e) {}
    try { v221(a200, F33); } catch (e) {}
    try { v221(v95, F197); } catch (e) {}
    let v225;
    try { v225 = a200.entries(); } catch (e) {}
    try { v225.next(); } catch (e) {}
    this.f = a200;
}
try { new F197(v120, v179, v176); } catch (e) {}
try { new F197("1", v130, "1"); } catch (e) {}
const v229 = F197.prototype;
try { v229.propertyIsEnumerable(v113); } catch (e) {}
const v231 = new F197(v171, v187, v177);
try { v231.hasOwnProperty(v171); } catch (e) {}
const v233 = new F197(v182, v171, v187);
v233.length = v180;
v233.length = v233;
try { v113(); } catch (e) {}
new f143();
-65535 ^ -65535;
-65535 & -65535;
-40695 === -40695;
4119 === 4119;
const v243 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v243.g = v243;
function F244(a246, a247) {
    if (!new.target) { throw 'must be called with new'; }
    const v248 = this.constructor;
    try { v248.toString(); } catch (e) {}
    try { new v248(v180, this); } catch (e) {}
}
F244.g = F244;
268435440 % 268435440;
