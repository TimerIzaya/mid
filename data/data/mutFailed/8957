function f0() {
}
class C1 extends f0 {
    static #a = f0;
    #n() {
        this[5] = 4;
        return 4;
    }
    e = f0;
    b;
    #e;
    static 2304 = f0;
}
const v9 = new C1();
new C1();
const v11 = new C1();
function f12(a13, a14) {
    class C15 {
    }
    return C1;
}
v11.toString = f12;
function f17(a18, a19, a20) {
    a19.toString = f12;
    const o38 = {
        "b": a19,
        "e": a19,
        ...C1,
        "a": a18,
        set g(a22) {
            /(?:ab)+(?<a>.)*/gui;
            /x+/umy;
            const v25 = /[R]/umsy;
            const v26 = [126.35858692635452,171.76053631394439,637722.086033537,-4.0,3.0,-1000000.0,1.3044045702886066e+308];
            const v27 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
            function f28() {
                return v27;
            }
            class C29 extends f28 {
            }
            const v30 = new C29();
            v30.length = v26.shift();
            v25 !== C1 ? v25 : C1;
        },
        ...v11,
        get f() {
            super.n();
        },
        "call": f0,
        __proto__: v11,
        "d": undefined,
        "a": C1,
        [undefined]() {
            super.b;
        },
        "c": f0,
        [a18]: v11,
    };
    o38.toString = f12;
    return o38;
}
const v39 = f17(v11, v9, v11);
function f40() {
    return f0;
}
function f41(a42) {
    function F44(a46) {
        if (!new.target) { throw 'must be called with new'; }
        const v47 = this.constructor;
        let v48;
        try { v48 = new v47(); } catch (e) {}
        try {
            function f49() {
                return v48;
            }
            const v51 = "size" && "undefined";
            with ("undefined") {
                length = v51;
                f49();
            }
        } catch(e53) {
        }
    }
}
Object.defineProperty(v39, Symbol.toPrimitive, { enumerable: true, get: f40, set: f41 });
f17(v39, f17(v39, v39, v11), v39);
class C58 extends f17 {
    #toString(a60, a61) {
        v9.b;
        const o69 = {
            "maxByteLength": 4294967295,
        };
        const v71 = new SharedArrayBuffer(1431, o69);
        const v73 = new Float64Array(v71);
        return v73;
    }
}
new C58();
new C58();
new C58();
function f82() {
    return 3585;
}
class C83 extends f82 {
    toString(a85, a86) {
        this.constructor(a85);
        -this;
    }
}
const v89 = new C83();
function f90(a91) {
    return 1024 <= 3585 ? 1024 : 3585;
}
v89.constructor = f90;
try { v89.toString(f82, 3585, 3585, f82, 1024); } catch (e) {}
