const v5 = new Uint16Array(9);
new Int32Array(3098);
12 + 12;
new Float32Array(12);
function f13(a14, a15) {
    a14 * a14;
    const o21 = {
        "h": a14,
        141: a15,
        "c": Uint16Array,
        "g": v5,
        get b() {
            super[this] = this;
            const v18 = super[a15];
            try {
                new Int32Array(this);
            } catch(e20) {
            }
            return v18;
        },
    };
    o21.d = v5;
    o21.d = o21;
    return o21;
}
f13(4096n, 3098);
f13(4096n, 12);
f13(4096n, 9)[141];
function f26() {
    try { ("constructor").trimStart(); } catch (e) {}
    0 << 0;
    const v33 = 0 < 9;
    v33 || v33;
    const v38 = new Int16Array(16);
    v38[5];
    v38[10] = -9007199254740992;
    const o81 = {
        ["constructor"]: "constructor",
        2: 4.0,
        ..."rN",
        "f": "rN",
        __proto__: "rN",
        "g": 4.0,
        "h": "rN",
        m(a42, a43) {
            const v46 = new BigUint64Array(1000);
            const o47 = {
                ...v46,
            };
            a42[this] = "constructor";
            Array();
            class C53 {
                static #a;
                static n(a55, a56) {
                    function f57(a58, a59) {
                    }
                    %OptimizeFunctionOnNextCall(f57);
                    new Int8Array(Int8Array);
                    const v62 = super.d;
                    try { v62(); } catch (e) {}
                    return a55;
                }
                [1];
                static [1] = 255;
                [255];
                f = -65536;
            }
            const v64 = new C53();
            const v65 = new C53();
            let v67 = -65536n;
            let v69;
            try { v69 = v64.m(1n, 10000n, 10000n, 1); } catch (e) {}
            function f70(a71, a72, a73) {
                let v74;
                try { v74 = v69(a72); } catch (e) {}
                v74 = a73;
                v67 >>= a73;
                v64[10] = 1n;
                v65.f;
                return v67;
            }
            const v78 = ("gYPHN").normalize("NFKD");
            try {
                ("constructor").localeCompare(v78);
            } catch(e80) {
            }
            return v78;
        },
    };
    o81[4] = o81;
    return o81;
}
f26.toString = f13;
f26.caller = f26;
const v82 = f26();
const v83 = f26();
v83[7] = v83;
v83.h = v83;
const v84 = f26();
class C85 {
    #h = v82;
    static #e;
    constructor(a87, a88) {
        this.b = v84;
        a87[4] = Uint16Array;
        const v89 = this?.__lookupSetter__;
        try { new v89(a87); } catch (e) {}
        a87[2];
        a88[2];
        for (let i94 = 0; i94 >>> i94, i94 < 9; i94 >= i94, i94++) {
            Object.defineProperty(v84, f26, { set: f26 });
            v83[i94] **= a87;
        }
    }
}
function f102(a103, a104) {
    "toString" == "toString";
    return "toString";
}
const v108 = Symbol.toPrimitive;
C85[v108] = f102;
C85.length = C85;
const v109 = new C85(v83, v82);
v109.b = v109;
const v110 = new C85(v84, v82);
v110.g = v108;
v110.g = v110;
new C85(C85, v84);
try {
const t0 = 0.44967380041772886;
t0();
} catch (e) {}
const v115 = /((?<=a))/gudm;
const v116 = /gk4b*/vmsy;
let v118;
try {
const t0 = -1.3832922122240728e+307;
v118 = t0(2);
} catch (e) {}
for (let v119 = 0; v119 < 5; v119++) {
    try { v118(v115, v119, v116); } catch (e) {}
}
