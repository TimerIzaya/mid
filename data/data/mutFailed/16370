class C5 {
    static #p(a7, a8) {
    }
    #valueOf(a10, a11) {
    }
}
const v12 = new C5();
[v12.b,-11,v12,9007199254740991,C5];
class C15 {
    static #e;
    static #d = "20381";
    ["function"];
    set d(a17) {
        function f18(a19, a20) {
            try { a19.toString("20381", this, a19, "function"); } catch (e) {}
            return "function";
        }
        class C24 extends -11 {
        }
        function f25(a26) {
            return -9007199254740991;
        }
        f18("20381", "20381");
    }
}
new C15();
new C15();
const v31 = new C15();
const v39 = new BigUint64Array();
const o49 = {
    [v39](a42, a43, a44) {
        class C46 {
            #d = 4096;
            static {
                this.#d;
            }
        }
    },
};
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    const v57 = /[a-zA-Z0-9]/gvisy;
    const v58 = /abc?/gvmy;
    v58[-2] ^= v57;
    v58.exec("Q8F");
    const v62 = new Int16Array();
    v62.reverse();
    function f64() {
    }
    const v65 = new Int16Array();
    const v66 = v65.lastIndexOf(F51, a53);
    function F67(a69, a70) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e71) {
        }
    }
    v66 ^ v66;
    try { new v55(this, v31); } catch (e) {}
    new Uint32Array(127);
    for (let v77 = 0; v77 < 5; v77++) {
    }
}
const v78 = new F51();
const t65 = v78.constructor;
new t65();
const v81 = [-20096,4294967296,-65537,-2];
const v82 = [-1947047520];
v81["slice"]([[-55494,v82,v82,v81]]);
