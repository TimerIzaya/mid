const v0 = /S\P{Decimal_Number}/gvdms;
/ROlL/gudimy;
/3a$JP(a)\1/gus;
new BigInt64Array(15);
const o19 = {
    m(a18) {
        return a18;
    },
    __proto__: 946.0676210033328,
};
const v21 = new Uint8ClampedArray(2147483648);
const v24 = new Int16Array(8);
for (const v25 in v21) {
    delete v24?.buffer;
    new Int16Array(7);
    new Float32Array(2801);
    new Uint8ClampedArray(3070);
}
const v38 = new Array(3457);
const v39 = [0.0,1000000000.0,-9.821086765219384e+307,-858.0794579951759];
const v40 = [-2.0,-1.5384788741465538,-2.0];
const v41 = [0.9388990264144315,-1e-15,-1.0,841561.2554243801];
class C42 {
    static a;
    n(a44, a45) {
        try { a45["push"](...v39, ...a45, ...v39, ...v40, ...this); } catch (e) {}
        return "push";
    }
    static b;
    static m(a49) {
        try { new a49(this, this, v39, this); } catch (e) {}
        v39 < v41;
        const o52 = {
        };
        new Proxy(this, o52);
        return v41;
    }
    static #a = 3457;
    static [v38];
    #h;
    static [v41] = BigInt64Array;
    static #g;
}
new C42();
let v56 = new C42();
const v57 = v56?.constructor;
try { new v57(v38, v0, 1104276741); } catch (e) {}
new C42();
const v63 = Array["of"](C42, C42);
try {
    v38.pop();
} catch(e65) {
}
Float64Array.e = Float64Array;
new Float64Array(257);
const v69 = new Uint32Array(-2);
function F72() {
    if (!new.target) { throw 'must be called with new'; }
}
const v74 = new F72();
const v75 = [F72,F72,F72];
function f76(a77) {
    try {
        v75.some();
    } catch(e79) {
        e79.stack;
    }
    return a77;
}
v75.toString = f76;
const o82 = {
    __proto__: v75,
    "e": v74,
    get a() {
        return this;
    },
};
const v83 = new Float32Array(706);
try { v83.every(Uint32Array); } catch (e) {}
class C85 {
}
const v87 = Symbol.toPrimitive;
C85[v87] = f76;
function F88() {
    if (!new.target) { throw 'must be called with new'; }
}
F88.a = F88;
const v90 = new F88();
v90.constructor = f76;
const o91 = {
};
try {
    const v94 = new FinalizationRegistry(12);
    for (const v95 in v94) {
    }
} catch(e96) {
}
const v97 = v90?.constructor;
v56 |= o82;
Symbol(v63);
try { v69.slice(2147483648, 257); } catch (e) {}
try { v87.o(2147483648, v74); } catch (e) {}
delete v21[56];
try { new v97(); } catch (e) {}
const v103 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v105 = 9007199254740991n * 9007199254740991n;
v105--;
for (let v107 = 0; v107 < 5; v107++) {
    function f108() {
        for (let v109 = 0; v109 < 5; v109++) {
            "p" == "p";
            try { ("p").substring(C85, C85); } catch (e) {}
        }
        try {
            function f113(a114, a115) {
                f76(o19);
                return v56;
            }
            f113(-2, 9007199254740991n);
            v103.forEach();
            const v120 = /efoo(?=bar)baz/usy;
            /\1112/d;
            /(ab)6a(?:b)/gvd;
            try { arguments["every"]("every", v120); } catch (e) {}
        } catch(e125) {
            e125.a = 706;
            e125.a = v90;
            [-14,13665,14];
            [-256,-59478,4294967296,1073741825,1000];
            const v128 = [-1];
            try {
                v128.valueOf = Symbol;
            } catch(e129) {
            }
            e125.a = e125;
        }
        const v131 = ("stack").trimStart();
        for (let v132 = 0; v132 < 5; v132++) {
            function f133() {
                v131.length;
                return v131;
            }
            f133.call();
            %OptimizeFunctionOnNextCall(f133);
        }
        const v137 = ("1073741824").constructor;
        v137.name = v137;
        function F138() {
            if (!new.target) { throw 'must be called with new'; }
            function f140(a141) {
                Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
            }
        }
        const v144 = v137(v105);
        try { v144.replaceAll(-2, v56); } catch (e) {}
        return "1073741824";
    }
    f108();
    %OptimizeFunctionOnNextCall(f108);
}
