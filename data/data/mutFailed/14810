const v2 = [];
function f3(a4, a5) {
    a4 <= v2;
    return f3;
}
const o14 = {
    "maxByteLength": 150,
};
new ArrayBuffer(127, o14);
c = -4294967295n;
function f20() {
    return "m";
}
const v25 = -1.7976931348623157e+308 | -256;
const v26 = Math.tan("m");
"m" * -256;
const v28 = v25 >>> -1.7976931348623157e+308;
v28 && v28;
const o32 = {
};
new BigInt64Array(1073741824);
f3 *= Symbol.toPrimitive;
const v39 = [1073741824,1073741823,1376142744,1073741825];
try {
    v39.findLast();
} catch(e41) {
    const t26 = e41?.constructor;
    t26();
}
let v46 = -4294967297n;
const v47 = v46--;
const v48 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v49 = [16,512,536870887,128,-6,10000,1073741824,-256,61003,-1];
const v50 = [1073741824,1073741823,1376142744,1073741825];
new Int8Array();
Reflect.construct(Uint8ClampedArray, [Uint8ClampedArray]).constructor;
for (let v58 = 0; v58 < 5; v58++) {
    function f59() {
        b = v49;
        try {
            v50.forEach(v46);
            const o62 = {
                "size": "async",
            };
            return o62;
        } catch(e63) {
        }
        const o102 = {
            p(a65, a66, a67) {
                NaN - (NaN | NaN);
                this && 8;
                8 & this;
                return -256;
            },
            "c": v49,
            valueOf(a76, a77) {
                f59 ^ f59;
                try { this["p"](this, v26, ...this, v58, -959483584, -1.7976931348623157e+308); } catch (e) {}
                new Int32Array(255);
                new Float64Array(6);
                new BigInt64Array(-51269);
                return v47;
            },
            [v46](a91, a92, a93, a94) {
                eval(a92);
            },
            "f": v48,
            [v47](a98, a99, a100, a101) {
            },
            "h": v58,
            10: "valueOf",
            ...v48,
            "b": 2147483647n,
            "a": 2147483647n,
        };
        return v49;
    }
    f59();
    %PrepareFunctionForOptimization(f59);
    f59();
    f59();
    %OptimizeMaglevOnNextCall(f59);
    f59();
    f59();
    %OptimizeFunctionOnNextCall(f59);
}
