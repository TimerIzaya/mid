const v0 = [];
class C4 {
    #h = -14n;
    static [-14n];
    static #c;
    8 = v0;
    static #n(a6) {
        super[a6] = this;
        this[this] &&= -9007199254740992n;
        var h = this;
        return a6;
    }
    #e = -14n;
    static h = v0;
    static 162;
}
const v7 = new C4();
v7[268435439] = v7;
function f8(a9) {
}
const v10 = f8?.constructor;
try { new v10(-104510071n); } catch (e) {}
class C12 {
}
C12.d = C12;
for (let v13 = 0; v13 < 5; v13++) {
    function f14() {
        parseInt(([v13,v13,v13,v13]).toSpliced());
    }
    f14.arguments = f14;
    f14();
    %OptimizeFunctionOnNextCall(f14);
}
const v20 = new C4();
v20[8];
new C4();
[126.55879943919308,NaN,1.684843571698217e+307];
const v24 = [750.8710796876694,-56358.34862921736,980098.2030124066,-4.0,3.0,-0.0,-5.0,Infinity,1000000000000.0];
try { v24.map(C4); } catch (e) {}
[-553843.7903878595];
[-1000.0,-1.0,0.12283005896386956,-1.5887469790798798e+308];
[-982.0632610155844,-868.8995339778478,8.207214646743165e+307,6.123487983902287,305024.4489613066,1.726800650875763,1.156448239417678e+307,1000000000000.0,1.1270263173770875e+308];
const v29 = [-1.0396765540637822e+308,629.1060408459382,3.273539870328584,-1000000.0,3.0];
try { v29.copyWithin(v29, -14n); } catch (e) {}
function f31() {
    const o33 = {
        get global() {
            return this;
        },
    };
    return o33;
}
try { f31(); } catch (e) {}
const v35 = f31();
class C36 extends f31 {
}
const v37 = new C36();
const v38 = v37?.constructor;
try { new v38(v37, f31); } catch (e) {}
const v41 = new Int32Array(v35, v37);
try { v41.some(v7); } catch (e) {}
try { Reflect.construct(v24, v24); } catch (e) {}
const v46 = new Set(C36);
v46.add();
new Uint8Array(268435440);
Reflect.defineProperty(v35, v41, v37);
