function f0() {
}
const v1 = [2147483647,8,-24567,-128,15,-8];
const v2 = [-8,7,-1352206215,-1073741824,44623,-37196,65537,1000];
const v3 = [10,268435440,268435439,128];
function f4() {
    return v1;
}
class C5 extends f4 {
    p(a7) {
        a = this;
        -Infinity;
        return f0;
    }
    268435440;
    static {
        f0();
        Object.defineProperty(this, "e", { configurable: true, set: f0 });
        function F15(a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            a17 % a17;
            a18 >>> a18;
            const v21 = this.constructor;
            try { new v21(0.8735699512350641); } catch (e) {}
            this.c = a17;
            this.g = a18;
        }
        new F15(F15, 0.941857606566444);
        const o32 = {
            valueOf(a27, a28) {
                return this;
            },
            n(a30, a31) {
            },
            "maxByteLength": 3733,
        };
        const v34 = new SharedArrayBuffer(3733, o32);
        new Int16Array(v34);
    }
}
const v37 = new C5();
const v38 = new C5();
const v39 = new C5();
function f40(a41, a42, a43, a44) {
    const o64 = {
        "c": v2,
        "h": f0,
        "a": a43,
        set b(a46) {
        },
        "f": f0,
        [f4]() {
        },
        "g": v1,
        "d": a43,
        valueOf(a49, a50) {
        },
        o(a52, a53) {
        },
        __proto__: a43,
        set b(a55) {
            class C56 {
            }
            const v58 = new Uint8Array();
            104 in v58;
            v37[Symbol.isConcatSpreadable];
        },
        2729: v37,
        "b": C5,
        ...v3,
        "d": v2,
        "f": v39,
    };
    return o64;
}
f40(f40(v37, v3, v38, v38), v39, v38, v37);
f40(v3, v38, v38, v37);
[-63.17853592516644,-2.2250738585072014e-308,2.220446049250313e-16,-1e-15,6.458830200566861e+307];
[-1.5591648163517697e+308,-1.3389446786429948e+308,-1.306528969455119,382.68087558586694,6.764399968468599];
[828771.1177641738,-471088.4350822875,2.869893115269342e+305];
class C72 {
    static {
        for (let v74 = 0; v74 < 25; v74++) {
            function f75() {
                return C72;
            }
            const v76 = [601759695];
            const v77 = [1073741824,1073741823,1376142744,1073741825];
            function f79(a80, a81, a82, a83) {
                function f85() {
                    return a80;
                }
                const v86 = f75();
                const v88 = new Int8Array();
                const v91 = new Uint32Array(4);
                [v91];
                const v95 = BigUint64Array * 536870887;
                v95 ** v95;
                function f97(a98, a99) {
                    return v86;
                }
                f97();
                const v101 = v88.buffer;
                Object.defineProperty(v101, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v101.slice(2147483648);
                %OptimizeFunctionOnNextCall(f85);
                let v106;
                try { v106 = v77["find"](..."find", a83, ...v76, ...v77, ...522675525n); } catch (e) {}
                Symbol("find");
                const v110 = new Uint8ClampedArray();
                const o111 = {
                    ...v110,
                };
                v106 <= a82;
                return arguments;
            }
            for (let v113 = 0; v113 < 5; v113++) {
                f79(this, v113, v113, v113);
            }
        }
    }
}
class C115 {
    constructor(a117, a118, a119) {
        function f120(a121, a122, a123) {
            function f125(a126) {
                return a123;
            }
            %PrepareFunctionForOptimization(f125);
            return this;
        }
        const v130 = new Date(Date);
        v130.setDate();
        const v132 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f133(a134, a135, a136, a137) {
            a135 & a135;
            try {
                v132.forEach(a135);
            } catch(e140) {
            }
            return f133;
        }
        for (let v141 = 0; v141 < 10; v141++) {
            f133(v141, v141);
        }
        %OptimizeFunctionOnNextCall(f133);
        Worker(f120);
    }
}
