const v0 = [-2.0,9.6055427992429e+307,-1.7976931348623157e+308,-825578.4685520038,1.46030336405352e+308,0.7082124879112613,-396.9878189841736,-647.0616552935919];
const v1 = [5.0,1000000000.0,-796.4720820307439,1.0,-2.2250738585072014e-308,0.39613884756197615,-0.9316441877593817,0.5521375894199617,-4.0];
const v2 = [79.81747708909666];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    this[4];
    try {
        this.c = a9;
    } catch(e11) {
    }
}
const v12 = new F6(v1, v2);
const v13 = new F6(v1, v2);
const v14 = new F6(v0, F6);
const v15 = v14?.constructor;
try { new v15(v13, v12); } catch (e) {}
("setBigInt64")[2];
const v24 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
const v25 = [101.2980265931285,-1.7177856293756712e+307,-1000000.0,-8.49664044843577];
const v26 = v25?.groupToMap;
try { new v26(Infinity); } catch (e) {}
const v29 = Set?.constructor;
let v30;
try { v30 = new v29(Infinity); } catch (e) {}
new Set();
const v32 = v30.values();
let v33;
try { v33 = v32.next(); } catch (e) {}
v33.h = v33;
function f34(a35, a36, a37, a38) {
    a35.shift();
    a35[3] = a35;
    const o40 = {
        __proto__: v25,
    };
    try { o40.with(Set, o40); } catch (e) {}
    return v32;
}
const v42 = f34(v24);
v42.d = v42;
f34(v1);
f34(v25);
gc.e = gc;
v30();
