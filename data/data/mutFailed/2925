class C3 {
    static b = -8n;
    [11n];
    static [-14n];
    static toString(a5) {
        let v6;
        try { v6 = new a5(); } catch (e) {}
        try { v6(); } catch (e) {}
        ~-14n;
        return 2.220446049250313e-16;
    }
    static #a;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
function f18(a19, a20, a21, a22) {
    const o29 = {
        "h": a20,
        "d": -14n,
        [v14]: C3,
        __proto__: a21,
        [a22]: a19,
        toString(a24, a25, a26, a27) {
            v12[11n];
            return 0.0;
        },
        [C3]: 11n,
        "a": 5.0,
        ...a19,
        [-8n]: v13,
    };
    this.DataView;
    class C32 {
    }
    new C32();
    return o29;
}
f18(f18(f18(v14, 5.0, -14n, C3), -3.0, 0.0, -8n), 0.0, 0.0, C3);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o43 = {
    };
} catch(e44) {
}
class C45 {
    static p(a47) {
        const o60 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f49() {
                        return this;
                    }
                    const v50 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e53) {
                }
                new Uint8Array(4061);
                new Int32Array(Int32Array);
                return -128;
            },
        };
        return o60;
    }
    g;
}
try { new C45(); } catch (e) {}
const v62 = new C45();
class C64 extends Map {
}
new C64();
new Float32Array();
v62.g;
const v69 = new C45();
new C45();
class C71 extends C45 {
    static n(a73, a74) {
        function F76(a78, a79, a80, a81) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        function f88() {
            const v90 = ("D")[0];
            v90.match();
            return v90;
        }
        const t93 = f88();
        t93();
        class C94 {
        }
        this[Symbol.matchAll] = a74;
        a73 += C64;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e99) {
        }
        return -128;
    }
    #c = C71;
    valueOf(a103, a104, a105) {
        super.f;
    }
    constructor(a108, a109, a110, a111) {
        super();
        function f112() {
            const v113 = [];
            const t112 = [-3.0];
            t112.length >>>= -128;
            try {
            } catch(e115) {
                eval("");
            }
            v113[6] = 4294967295;
            new Int32Array();
            const o133 = {
                get b() {
                    return Int32Array;
                },
                "c": C3,
                toString(a126, a127, a128) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a130) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a132) {
                },
            };
        }
        for (let v134 = 0; v134 < 5; v134++) {
            v134();
        }
    }
    set f(a137) {
        for (const v138 of a137) {
            try {
            } catch(e139) {
            }
        }
        class C141 extends SharedArrayBuffer {
        }
        const o142 = {
        };
        try {
            new Uint32Array();
            const v145 = /xyz{1,32}?/gusy;
            class C146 {
                268435440 = v145;
            }
        } catch(e147) {
            const o148 = {
            };
            new Uint32Array(1024);
        }
        try {
            const o152 = {
            };
        } catch(e153) {
        }
        try {
            const o154 = {
            };
            o154.c = -128;
            o154.e = this;
        } catch(e155) {
        }
        try {
            const o156 = {
            };
        } catch(e157) {
        }
    }
}
const v158 = new C71();
gc(v158);
class C161 {
}
const v163 = new Float64Array(Float64Array);
for (const v164 in v163) {
}
v69[5];
function f166(a167, a168, a169, a170) {
    const o175 = {
        p(a172, a173, a174) {
        },
    };
}
for (let v176 = 0; v176 < 25; v176++) {
}
const v178 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f179(a180, a181) {
    const o183 = {
        get d() {
        },
    };
}
f179();
const v185 = f179(v178);
try { v185(956206316, 956206316); } catch (e) {}
