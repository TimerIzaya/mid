function f3(a4, a5) {
    a4 / a4;
    function f7(a8, a9) {
        [129,16,1369206470,22652];
        function F18() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C21 extends F18 {
        }
        class C22 extends C21 {
            set d(a24) {
                function f25() {
                    let {"a":v27,"b":v28,"length":v29,} = this;
                    return C21;
                }
                Worker(f25);
            }
        }
        const v35 = new Int8Array();
        const v38 = new Int32Array(3);
        v38[a4](v35, ...v38, ..."keys");
        Math.pow(Math, f7);
    }
    const o60 = {
        "f": a4,
        toString(a44, a45) {
        },
        toString(a47, a48, a49) {
            return 1000000.0;
        },
        __proto__: a5,
        ...a5,
        [-1e-15]: -1e-15,
        "e": -640403.9477529116,
        "g": 1000000.0,
        ...a5,
        [-2]: 1000000.0,
        "c": a5,
        "d": 1000000.0,
        [a5]: a5,
        [a4]: a5,
        toString(a51, a52, a53) {
            return this;
        },
        get f() {
            function F55() {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F55();
            class C59 extends Uint16Array {
            }
            return this;
        },
        "h": -1e-15,
        [1000000.0]: 1000000.0,
        "b": a4,
    };
    class C61 {
    }
    try { C61.toString(); } catch (e) {}
    function f63() {
        const o67 = {
        };
        return "caller";
    }
    return o60;
}
const v68 = f3(-1e-15, 1000000.0);
v68.d = v68;
f3(-1e-15, -640403.9477529116);
f3(1000000.0, -1e-15);
const t69 = -640403.9477529116;
new t69(1000);
const t73 = 1000000.0;
const v76 = new t73(41);
try { v76.hasOwnProperty(Float64Array); } catch (e) {}
const v80 = new Int8Array(3);
v80.BYTES_PER_ELEMENT = v80;
Uint16Array.BYTES_PER_ELEMENT;
new Uint16Array();
function F85(a87, a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
}
15n ^ 15n;
for (let v93 = 0; v93 < 25; v93++) {
    v93 > v93;
    const v95 = [601759695];
    const v96 = v95.filter;
    try { v96(); } catch (e) {}
    const v98 = [1073741824,1073741823,1376142744,1073741825];
    function f99(a100, a101, a102, a103) {
        a102 + a101;
        const v105 = -a100;
        v105 / v105;
        a101 >>> a101;
        const v108 = a100 >>> a100;
        try { Array.isArray(Int8Array); } catch (e) {}
        class C111 extends Array {
        }
        const v112 = new C111();
        try { v112.fill(41); } catch (e) {}
        v112.push(Array);
        const v115 = v108 | v108;
        v115 - v115;
        const v117 = a102[3];
        const v118 = v117 + v117;
        v118 >>> v118;
        ("find").codePointAt(v98);
        try { v98["find"](..."find", a103, ...v95); } catch (e) {}
        return a103;
    }
    for (let v123 = 0; v123 < 10; v123++) {
        f99(v123, v123, v98);
    }
}
