new Float64Array(4);
const v8 = new Uint8Array(64);
new Uint16Array(256);
[-619649032,-6483,-1616002755];
[-31423,24306,1073741824,4];
[9007199254740992,55804,1834421238,-268435456,256,15];
let v15 = -2147483648n;
class C17 {
    static m(a19) {
        ({"a":C17,"h":v15,} = this);
    }
}
const v20 = new C17();
const v21 = new C17();
class C22 {
}
const o23 = {
};
o23.b = v20;
const o24 = {
};
Object.defineProperty(o24, "b", { writable: true, value: v21 });
const v25 = new C22();
let v26;
try { v26 = v25.constructor(); } catch (e) {}
const v27 = new C22();
const v28 = v27.__lookupGetter__;
let v29;
try { v29 = v28(); } catch (e) {}
const v30 = new C22();
const v31 = v30.constructor;
const v32 = new v31(C17, v26, C22, o23);
const v35 = new Float32Array();
try { v35.forEach(v29, v21); } catch (e) {}
const v39 = new BigUint64Array();
const t35 = "4uE6P";
t35[-1] = 246;
v32[1] = Uint16Array;
const t38 = "4uE6P";
delete t38[2600998808];
const v42 = Symbol.iterator;
const o51 = {
    [v42]() {
        let v44 = 10;
        const o50 = {
            next() {
                v44--;
                const v48 = v44 == 0;
                const o49 = {
                    "done": v48,
                    "value": v44,
                };
                return o49;
            },
        };
        return o50;
    },
};
let v52;
try { v52 = v39.filter(v31); } catch (e) {}
class C53 {
}
const v54 = new C53();
const v55 = v54.__lookupGetter__;
let v56;
try { v56 = v55(); } catch (e) {}
function f57(a58) {
    return a58;
}
const v59 = v54.constructor;
new v59(v29);
const v61 = new C53();
for (let [v62,v63,v64] of v31) {
    let v66 = 42539;
    C17 % C17;
    --v66;
    +v62;
    v62 - v62;
    Math.tan(v66);
}
v61.propertyIsEnumerable(v59, v52, o24);
const v73 = new C53();
const t82 = v73.constructor;
const v75 = new t82();
const v76 = /[\11]/gm;
v76.e = v76;
const v77 = /a(?!bbb|bb)c/vi;
Object.defineProperty(v77, "toString", { value: f57 });
const v78 = v77.toString;
const v79 = new v78(BigUint64Array, 246, C17, v77, v78);
const v80 = v79.__lookupGetter__;
try { v80(); } catch (e) {}
const v83 = new Uint16Array(C22);
const v84 = v83[1];
v84 & v84;
new Uint8Array(v30, v29, 64);
v20.b;
let {"buffer":v88,} = v8;
v15 = v35[v56];
const v92 = new Int32Array(v75, 31, 560);
v92[30];
function f94() {
    return Int32Array;
}
const v95 = f94();
v95.e = v95;
const t106 = f94().e;
new t106();
