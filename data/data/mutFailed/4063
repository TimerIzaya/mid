function F0() {
    if (!new.target) { throw 'must be called with new'; }
    c = F0;
    let v3;
    try { v3 = this.unshift(F0, F0, F0, F0, this); } catch (e) {}
    [F0,[[v3 in this,F0]],F0,v3];
    try {
        this.d = -6;
    } catch(e8) {
    }
    try {
        this.a = -6;
    } catch(e9) {
    }
    try {
        this.c = -6;
    } catch(e10) {
    }
}
const v11 = new F0();
function f12() {
    function f13() {
        [-4294967296];
        return -4294967296;
    }
    return f13;
}
Object.defineProperty(v11, "toString", { writable: true, get: f12 });
const v16 = new F0();
let v17 = new F0();
v17[Symbol.toPrimitive] = f12;
const v22 = new Uint32Array(3597);
new Float32Array(7);
new BigInt64Array(1848);
const v31 = Array(87);
if (Uint32Array) {
} else {
    try {
        let v34 = 0;
        while (v34 < 9) {
            Reflect.construct(Array, [v34], Float32Array);
            v34++;
        }
        Array(3597);
    } catch(e42) {
    }
}
const v43 = new Uint32Array();
function f44() {
    const v46 = new WeakSet();
    return v46.has(v46);
}
v43[Symbol.toPrimitive] = f44;
function f52() {
    function f55() {
        return 256;
    }
    function F56(a58, a59) {
        if (!new.target) { throw 'must be called with new'; }
        const v60 = this.constructor;
        try { new v60(a58); } catch (e) {}
        -a58;
        a59--;
        this.h = f55;
    }
    const v64 = new F56(65537, f55);
    return v64;
}
Float32Array.valueOf = f52;
function f66() {
    return Float32Array;
}
let v67;
try { v67 = v11.getOwnPropertyDescriptors(); } catch (e) {}
[v16,Math,87,Uint32Array];
[Float32Array,v22,87,v67];
[Array,BigInt64Array];
Math.acosh(v17);
Math.atanh(268435440);
const v75 = v17 % Float32Array;
Math.trunc(v17);
-9223372036854775808 & -9223372036854775808;
const v80 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v80);
const v83 = v17++;
268435440 - v43;
Float32Array % v83;
const v86 = new Float32Array(144);
const o87 = {
};
const v89 = new Proxy(Float32Array, o87);
v43.subarray();
const v91 = new Array(...v86, ...v31);
v91[v89] = Float32Array;
function f92(a93) {
    return v75;
}
class C94 extends f92 {
    constructor(a96, a97, a98, a99) {
        super();
        function f100() {
            const t101 = [];
            t101[6] = 4294967295;
            const o105 = {
                set b(a104) {
                },
                "arguments": v91,
            };
            return o105;
        }
        for (let v106 = 0; v106 < 5; v106++) {
            f100();
            %OptimizeFunctionOnNextCall(f100);
        }
    }
    1271221048 = 1848;
    b;
    static [v11] = v86;
}
