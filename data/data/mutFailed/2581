function f0() {
}
function f1() {
    return f0;
}
class C2 {
    #valueOf(a4, a5) {
        try {
            a5.#valueOf(a4, a4);
        } catch(e7) {
        }
        return 32485;
    }
    static g;
    static b;
}
const v11 = new C2();
const v12 = new C2();
new C2();
class C17 {
    static {
        this.b = v11;
        try {
            this.b = this;
        } catch(e19) {
        }
    }
    #m(a21, a22) {
        try {
            super.next(60570, a22, -65537, a22, 60570);
        } catch(e24) {
        }
        return a21;
    }
}
new C17();
new C17();
new C17();
const v30 = new BigInt64Array(205);
const v33 = new Uint16Array(256);
const v34 = v30[205];
const v38 = new Float64Array(255);
v38.b = f1;
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    function f45() {
        function f46() {
            return Int32Array;
        }
        return v12;
    }
    a42[Symbol.toPrimitive] = f45;
    a42 >> a42;
    a44 | a44;
    v38.b = a42;
    for (const v52 of v33) {
        v34?.h;
    }
}
new F39(255, 205, 255);
const v55 = new F39(255, 256, 255);
new F39(255, 205, 256, 255);
const v57 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
function f58(a59) {
    class C60 {
    }
    const v61 = new C60();
    const v62 = v38?.constructor;
    let v63;
    try { v63 = new v62(v61, 255, a59); } catch (e) {}
    return v63;
}
v57[Symbol.toPrimitive] = f58;
const v66 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v67 = [Infinity];
const v68 = [2.2250738585072014e-308,1.949684848262672,4.0];
v68[3] = -9007199254740991;
const v69 = v68.push(v66);
const v71 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0]).toStringTag;
let v72;
try { v72 = v67.every(v71, v55); } catch (e) {}
const v73 = new F39(v71, v72, v72, v69);
v73.constructor = Symbol;
const t83 = v73.constructor;
new t83(-9007199254740991, v57, v68);
class C76 {
}
const v77 = C76.toString;
try { v77(); } catch (e) {}
