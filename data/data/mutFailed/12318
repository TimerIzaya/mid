let v0 = "p";
let v2 = "-8";
class C3 {
    f = v2;
    static #b = v0;
    static #m(a5) {
        try {
            this.c = v0;
        } catch(e6) {
        }
        return v2;
    }
    valueOf(a8) {
        v0[2];
        ({"length":v2,...v0} = v2);
        const o12 = {
            "maxByteLength": 4294967296,
        };
        const v14 = new v0(1590, o12);
        new Float64Array(v14);
        return v0;
    }
}
const v17 = new C3();
let v18 = new C3();
const v19 = new C3();
class C23 {
    d;
    static get a() {
        const v27 = ++v18;
        const v28 = v18 || 536870887;
        (936.0016523148695).sign(v27);
        +v18;
        Math.tan(v19);
        536870887 >> v28;
        Math.asin(v18);
        return v19;
    }
    g;
    [NaN];
}
const v34 = new C23();
new C23();
const v36 = new C23();
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    function f41() {
        return this;
    }
    function f42(a43) {
        const o46 = {
            "maxByteLength": 3145,
        };
        const v48 = new SharedArrayBuffer(128, o46);
        new Float32Array(v48);
    }
    Object.defineProperty(this, "g", { writable: true, configurable: true, enumerable: true, get: f41, set: f42 });
    function f51() {
        return v17;
    }
    function f52(a53) {
        let {"a":v54,"f":v55,} = v18;
    }
    Object.defineProperty(v36, "e", { configurable: true, get: f51, set: f52 });
    try {
        this.g = a40;
    } catch(e56) {
    }
    try {
        this.e = a39;
    } catch(e57) {
    }
}
new F37(NaN, 4.631004623532926);
new F37(v0, v34);
new F37(C3, 4.631004623532926);
const v61 = [20785,4096,5];
Object.defineProperty(v61, 536870889, { configurable: true, value: v61 });
for (let v62 = 0; v62 < 25; v62++) {
}
v61[536870889];
