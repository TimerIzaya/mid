function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 10000;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
new BigInt64Array(890);
const v12 = [];
Object.defineProperty(v12, 1, { writable: true, enumerable: true, value: v12 });
const v13 = [536870887,-60324,23228695,26098,13,2];
class C14 {
}
const v15 = new C14();
v15.isPrototypeOf(v13);
new Uint16Array(3555);
this.write();
const v24 = new BigUint64Array(4096);
v24[3408] = this;
new Uint32Array(163);
const v27 = [601759695];
function f28(a29, a30, a31, a32) {
    arguments[2] = arguments;
    function f34() {
        Math.max(a31);
        +a29;
        return Math.ceil(a29);
    }
    f34();
    %OptimizeFunctionOnNextCall(f34);
    return f28;
}
for (let v40 = 0; v40 < 5; v40++) {
    f28(v27, v40, v40);
}
([1073741824,1073741823,1376142744,1073741825]).forEach(v24);
-[];
class C47 {
}
const v48 = new C47();
function f49(a50, a51) {
    const v52 = a51?.__lookupGetter__;
    a51?.constructor;
    return v52;
}
f49(Uint16Array, v48);
%OptimizeFunctionOnNextCall(f49);
const v56 = new Uint16Array(1657);
v56.reverse();
