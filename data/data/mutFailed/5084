const v2 = new Int8Array(3);
function f4() {
    return f4;
}
const o12 = {
    m(a6, a7, a8, a9) {
        a9[Symbol.toStringTag] = a9;
        return a9;
    },
};
new Float32Array(2842);
new BigUint64Array(64);
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    try { v2.constructor(); } catch (e) {}
    try {
    } catch(e26) {
    }
    function F27() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v29 = new F27();
    const v30 = v29?.__defineSetter__;
    try { v30(); } catch (e) {}
    function f32(a33, a34) {
        const o35 = {
        };
        return o35;
    }
    const v36 = f32(v30, f32);
    function f37() {
        return f37;
    }
    const v40 = new Float32Array(218);
    for (const v41 of v40) {
        v41 >>> v41;
        Object.defineProperty(v36, Float32Array, { configurable: true, enumerable: true, get: f32, set: v41 });
    }
}
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = f4;
    this.h = 1e-15;
    this.e = a46;
}
const v48 = new F44(1e-15);
%OptimizeFunctionOnNextCall(f4);
function f50(a51) {
    return 9569;
}
const v52 = new F44(-559.2515874252856);
function f53(a54) {
    class C56 {
    }
    const v57 = new C56();
    const v59 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v60 = [601759695];
    const v61 = [1073741824,1073741823,1376142744,1073741825];
    function f62(a63, a64, a65, a66) {
        function f68() {
            const v72 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const v74 = arguments.toPrimitive;
            const o81 = {
                toString(a76, a77) {
                    const v78 = a66 && Float64Array;
                    function f79() {
                        f79 *= v74;
                        return Float64Array;
                    }
                    Object.defineProperty(v78, "valueOf", { value: f79 });
                    v78 <= v72;
                    return this;
                },
            };
            const o104 = {
                "c": 449836243n,
                [-4294967297n](a84, a85) {
                },
                "c": v60,
                valueOf(a87, a88) {
                },
                "b": -4294967295,
                [-4294967297n](a90, a91, a92, a93) {
                    [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                    [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                    return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
                },
                "e": a63,
                "e": v57,
                "maxByteLength": -4294967295,
                "arguments": v59,
                ...C56,
                "type": "Vre",
                ..."Vre",
                valueOf(a98, a99) {
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a101, a102, a103) {
                    return a63;
                },
                5: -4294967295,
                6: -268435456,
            };
        }
        f4();
        const v107 = new Int8Array();
        v107.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f68);
        let v112;
        try { v112 = v61["find"](..."find", a66, ...v60, ...v61); } catch (e) {}
        v112 <= a65;
        return a63;
    }
    return -559.2515874252856;
}
v52[Symbol.toPrimitive] = f53;
const v116 = new F44(-559.2515874252856);
const v117 = [v52,-559.2515874252856,v116,v116];
([v117,v117,v117])[v117];
v48.__proto__ = v52;
function f120() {
    new Uint16Array(209);
}
