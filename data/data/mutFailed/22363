const v2 = new BigInt64Array(2798);
([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this.constructor;
    v12.bind(F8, a10, v12, a10);
    try { new v12(); } catch (e) {}
    a11 / a11;
}
try { new BigUint64Array(v2, 2798, 2798); } catch (e) {}
const v17 = new BigUint64Array(644);
try {
    new BigUint64Array(7);
} catch(e20) {
}
const v23 = new Uint8Array(1968);
const v24 = /(x)(x)(x)\1/uis;
function f25(a26, a27) {
    Array.__proto__ = this;
    return Array;
    return a27;
}
v24.toString = f25;
function f30(a31, a32, a33, a34) {
    const o41 = {
        2: a33,
        __proto__: a34,
        [v24](a36, a37, a38, a39) {
            super.test();
        },
    };
    return a31;
}
f30();
f30();
f30();
65535 ^ 65535;
function f49(a50, a51) {
    const o67 = {
        [v23]: a51,
        [268435441]: 644,
        0: 12,
        64: 65535,
        6: 65535,
        ...v23,
        [v17]: BigUint64Array,
        [v2](a53, a54, a55, a56) {
            for (let v57 = 0; v57 < 32; v57++) {
                let v59 = 0;
                do {
                    try {
                        this.toString = f49;
                    } catch(e60) {
                    }
                    v59++;
                } while (v59 < 2)
                this["p" + v57] = v57;
            }
            try {
                v2.length = 2;
            } catch(e66) {
            }
            return 2798;
        },
    };
    o67[1550];
    return o67;
}
const v69 = f49(2798, 1968);
f49(2798, 644);
f49(1968, 12);
Map.f = v17;
Map.f = Map;
const v73 = new Map();
try { v73.forEach(v69); } catch (e) {}
const v75 = v73.values();
try { v75.next(); } catch (e) {}
let v77;
try { v77 = v75.next(); } catch (e) {}
v77.value = v77;
268435440 & 268435440;
new Uint8Array(268435440);
