function f3(a4) {
    !(a4 !== a4);
    const o11 = {
        127: 9007199254740992,
        log1p(a8, a9) {
            a8?.e;
            return this;
        },
        __proto__: a4,
        "c": -8950,
        "d": a4,
        ...a4,
        "h": a4,
        ...a4,
        2: a4,
        "b": a4,
    };
    return o11;
}
f3.g = f3;
f3(256);
const v13 = f3(f3);
f3(v13);
const v15 = [-8950];
v15[0] = v15;
const v16 = v15[0];
v16 >> v16;
const v18 = [v15,v15,v15,9007199254740992,-8950];
let v19;
try { v19 = v18.toLocaleString(); } catch (e) {}
try { v19.toWellFormed(); } catch (e) {}
const v21 = [9007199254740992,v15,v13];
v21[0] = v21;
-10 >> -10;
let v24 = 1073741825;
const v25 = v24--;
v25 & v25;
const v28 = [4294967295,512];
try { v28.slice(v18, -3); } catch (e) {}
const v30 = [536870888,8];
const v32 = [5.0];
try { v32.valueOf(); } catch (e) {}
new Uint8ClampedArray(v32);
const v35 = [2147483649,2147483649,-65537,-268435456,10,9223372036854775807];
function f36(a37) {
    const o41 = {
        set g(a39) {
        },
        get g() {
            return a37;
        },
        __proto__: a37,
        ...v30,
        4096: v35,
    };
    return o41;
}
try { f36.bind(256); } catch (e) {}
const v43 = f36(v28);
v43[4096] = v43;
const v44 = f36(v28);
v44[1];
~1024;
const v48 = 1024 >>> 1024;
v48 + v48;
v48 >= v48;
512 - 512;
512 >>> 512;
Object.defineProperty(v43, 512, { configurable: true, get: f36 });
const o54 = {
    __proto__: v44,
    "d": f36,
};
o54[1];
Object.defineProperty(v28, 1024, { writable: true, configurable: true, enumerable: true, get: f36, set: f36 });
