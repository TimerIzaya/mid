let v1 = "c";
class C3 {
    static {
        this[v1];
        v1 /= v1;
    }
    get f() {
        const o10 = {
        };
        new Proxy("-256", o10);
        return "b";
    }
}
new C3();
new C3();
new C3();
class C22 {
    constructor(a24, a25) {
        function f26(a27) {
            class C30 extends Int8Array {
                [9];
            }
            try { new C30(); } catch (e) {}
            return this;
        }
        a24[Symbol.toPrimitive] = f26;
        this.f = this;
        -a25;
        let v35;
        try { v35 = new a24(-5.869943149384486, a25, a25, a25, ...0.2510089730549625); } catch (e) {}
        try {
        } catch(e36) {
            e36.stack;
        }
        a25 = v35;
        try { ("m").match(a24); } catch (e) {}
        try { v35["m"](v35, "m", a24); } catch (e) {}
        -(-2);
        Math.sign(0.8907211315752046);
        const v47 = -2 & 0.8907211315752046;
        Math.sqrt(0.8907211315752046);
        !-1;
        ~(v47 + v47);
        ~0.8907211315752046;
    }
    [-5.869943149384486];
    c;
    static e;
}
function f53(a54, a55) {
    const v58 = new Int8Array(1024);
    return [v58];
}
C22.toString = f53;
let v60;
try { v60 = C22.apply(C22, 0.2510089730549625); } catch (e) {}
const v62 = new WeakSet();
const v64 = Symbol.toPrimitive;
v62[v64] = f53;
const o65 = {
};
o65.defineProperty = o65;
Proxy[0] = v62;
const v67 = new Proxy(v62, o65);
const v68 = new C22(-5.869943149384486, 0.2510089730549625);
v68.h = v68;
const v69 = new C22(-5.869943149384486, 0.2510089730549625);
const v70 = v69?.constructor;
v70[Symbol.toPrimitive] = Symbol;
try { new v70(o65, v62); } catch (e) {}
const v74 = v69?.constructor;
v74[Symbol.match] = Symbol;
try { new v74(v60, C22); } catch (e) {}
let v78;
try { v78 = new v74(C22, C22); } catch (e) {}
function f79() {
    C22[7];
    return Symbol("-256");
}
v78[Symbol.toPrimitive] = f79;
const v84 = v78?.constructor;
function f85() {
    try { ("-1").includes(v64); } catch (e) {}
    function f87(a88, a89, a90, a91) {
        const o97 = {
            toString(a93, a94, a95) {
                try { this.toString(); } catch (e) {}
                a90[a89] = a88;
            },
        };
        return o97;
    }
    return 0.2510089730549625;
}
v84[Symbol.match] = f85;
try { new v84(v74, v67); } catch (e) {}
const v101 = new C22(512.29276402866);
v67[5] = v74;
try { v78(0.2510089730549625, Map, Map); } catch (e) {}
let v104;
try { v104 = v74(WeakSet); } catch (e) {}
v62.a |= v78;
let v105 = 75;
v105--;
const v108 = new Uint8Array(v105);
v108.toReversed();
try { new Uint8ClampedArray(Proxy, v104, 5); } catch (e) {}
new Uint8ClampedArray(5);
new Int32Array(127);
new Map();
const v119 = new WeakMap();
[v101,v119,v101,C22];
[-5.869943149384486,v69];
268435456 | 268435456;
function f125() {
}
