const v2 = new Float32Array(4);
const v5 = new Uint8Array(3);
const v8 = new Uint8ClampedArray(128);
new Uint32Array(2);
v8.length;
try { v2.filter(URIError, v2); } catch (e) {}
Object.defineProperty(v8, 16, { writable: true, enumerable: true, set: URIError });
[v5,URIError,10];
new Uint32Array(10);
new BigUint64Array(8);
class C22 {
}
const v23 = new C22();
const v24 = [5];
const v26 = [];
const v27 = v24.fill;
Reflect.apply(v27, v23, v26);
if (v27) {
    URIError();
} else {
    const v32 = -6 | Float32Array;
    -6 >> v32;
    Math.ceil(Float32Array);
    Math.acosh(v32);
}
