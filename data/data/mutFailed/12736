const v0 = [-2,4294967296];
const v1 = [-1422,-4294967297,255,65536,1257882689,1591727556,-6];
const v2 = [13,536870887,-20812,-2006948978];
class C3 {
    set c(a5) {
        ({"h":a5,...a5} = this);
        try { v2.toSpliced(v0, v2, this, v2, this); } catch (e) {}
    }
    static {
    }
    constructor(a12) {
        new Float32Array(127);
        new Uint32Array(5);
        new Uint8ClampedArray(4091);
    }
}
new C3(v2);
const v23 = new C3(v1);
new C3(v1);
[-536870912,-33592,22582,256,-12,257,16,536870912];
[536870889,58155,512,2064952958,9007199254740990];
[3,-1,-4294967296,-250220261,16,-59429,9007199254740991,9223372036854775807,4];
function f33() {
    return Uint32Array;
}
function f34(a35) {
    Array(4087);
}
Object.defineProperty(Uint32Array, 3, { configurable: true, get: f33, set: f34 });
new Uint32Array(9);
new Uint8ClampedArray(1);
new Uint32Array(126);
function f46(a47, a48, a49, a50) {
    for (let v51 = 0; v51 < 77; v51++) {
        const v52 = new C3(v51);
        for (let v53 = 0; v53 < 32; v53++) {
            v52["p" + v53] = v53;
        }
    }
    return a47;
}
f46[Symbol.iterator] = f33;
f46[1] = v0;
function f58(a59, a60, a61, a62) {
    function f63() {
        Uint8ClampedArray & Uint8ClampedArray;
        Uint8ClampedArray << f63;
        ~(f63 * v2);
        return f63;
    }
    const v70 = f63.length;
    const v71 = v70 + v70;
    const v73 = new Int8Array(a59);
    const v74 = v73.buffer;
    v74.constructor = f33;
    function f75(a76) {
        return a76;
    }
    f75.constructor = f46;
    f75.constructor;
    const v78 = v74.slice(v70, a60);
    function f79(a80) {
        v78.slice(a80, v71);
        return f58;
    }
    return v71;
}
f58[Symbol.toPrimitive] = f33;
%PrepareFunctionForOptimization(f58);
Uint32Array[3] = v23;
const o87 = {
    "execution": "async",
    "type": "major",
};
gc(o87);
f58(f46, f58, f58, f46);
%OptimizeFunctionOnNextCall(f58);
f58(f58, f58, f58, f46);
