const v2 = new Float32Array(129);
new Float32Array(129);
new Float32Array(129);
const v11 = new Uint8Array(Uint8Array);
const v14 = new Uint16Array(184);
const v16 = Symbol.replace;
v2[v16];
const o21 = {
    "execution": "async",
    "type": "minor",
};
gc(o21);
function f25(a26, a27) {
    a27.a **= a27;
    v14.buffer ^= a27;
    return v14;
}
f25(Float32Array, 256);
new Int16Array(766);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    o21[Symbol.split];
    for (let v37 = 0; v37 < 100; v37++) {
        f25(0, v14);
    }
    0 < 0;
}
new BigUint64Array(256, 2147483647, 2147483647);
const v43 = new Float32Array();
[] = v14;
const v49 = ["async"];
Reflect.apply(v11.toLocaleString, v16, v49);
const v54 = new Int32Array(268435441, 4, v43);
function f55(a56, a57, a58, a59) {
    return a57;
}
%OptimizeFunctionOnNextCall(f25);
f55(256, 2147483647, F30, v54);
