const v2 = new Float32Array(127);
new Uint32Array(64);
const v8 = new Float64Array(1000);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a12;
    this.g = v2;
    try {
        a13.b = a13;
    } catch(e14) {
    }
    try {
        this.c = a12;
        const v16 = v8.constructor;
        try { new v16(-15n); } catch (e) {}
        return ("Vre").fixed();
    } catch(e20) {
        if (this <= -4.092259470322528) {
        }
    }
    try {
        this.g = v8;
    } catch(e26) {
    }
}
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
}
const v34 = new F28(64, -1024, F28, F28);
const o38 = {
    "maxByteLength": 1814769353,
};
new SharedArrayBuffer(64, o38);
(64).grow(1073741824);
new F9(127, 64, v34);
new F9(127, 1000, 64);
new F9(127, 1000, 127);
eval();
