new Float64Array(184);
new Uint8Array(129);
new Int8Array(3287);
function F15(a17) {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = this.constructor;
    try { new v18(-143547321); } catch (e) {}
    a17 - a17;
    this.g = -1517929768;
    try {
        this.g = -1;
    } catch(e21) {
    }
    try {
        this.h = a17;
    } catch(e22) {
    }
}
try { F15.bind(-143547321); } catch (e) {}
const v24 = new F15(-1);
const t20 = 129;
const v25 = new t20(-143547321);
v25.d = v25;
new F15(-1);
class C27 extends F15 {
    #p(a29, a30) {
        const v31 = a29?.[32];
        Object.defineProperty(v25, v24, { writable: true, configurable: true, value: F15 });
        return v31;
    }
    [-1];
    static {
        let v34;
        try { v34 = this["n"](-1517929768); } catch (e) {}
        const o35 = {
        };
        const o36 = {
            "c": v24,
            ...v34,
            65537: o35,
            __proto__: this,
            "a": this,
            "g": this,
            ...this,
        };
    }
}
let v37;
try { v37 = C27(); } catch (e) {}
new v37();
const v39 = new C27();
v39.g;
new C27();
const v43 = new Map();
function f44(a45, a46, a47, a48) {
    a45 >>> -143547321;
    a48--;
    const o64 = {
        "c": -143547321,
        toString(a52, a53, a54, a55) {
            let v51 = this;
            a53 << -1557853178;
            let v59 = v51++;
            Math.log2(v59);
            const v61 = v59++;
            Math.pow(v59, -1557853178);
            F15 ^ v61;
            return a55;
        },
        "b": v39,
    };
    try { o64.toString(v43, a45, v25, v25); } catch (e) {}
    return o64;
}
f44(-1517929768, -1517929768, F15, -1);
const v67 = f44(-1517929768, -143547321, F15, -1517929768);
v67.f;
f44(-1517929768, -1517929768, v67);
("HEkWL").localeCompare("isArray", "isArray");
