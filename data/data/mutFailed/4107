class C3 {
    static #p(a5) {
        function f6() {
            return this;
        }
        return a5;
    }
    o(a8) {
        this[187] = 758.9371938038303;
        try {
            ("d").#p(a8, "d", this, a8, 4096);
        } catch(e10) {
        }
        return 758.9371938038303;
    }
}
try { C3.propertyIsEnumerable(C3); } catch (e) {}
new C3();
new C3();
new C3();
const v16 = new Map();
const v17 = v16?.constructor;
let v18;
try { v18 = new v17(); } catch (e) {}
2147483647 >>> 2147483647;
function f23() {
}
let v24;
try { v24 = f23(); } catch (e) {}
const v25 = [1073741824,1073741823,1376142744,1073741825];
function f26(a27, a28, a29, a30) {
    function f31() {
    }
    f23();
    const v34 = new v24();
    function f35(a36, a37) {
        const o41 = {
            p(a39, a40) {
                return this;
            },
        };
        const v42 = o41?.__defineSetter__;
        try { new v42(f35, f35); } catch (e) {}
    }
    v24();
    f35();
    v34.buffer;
    let v47 = 1000000000000.0;
    let v48 = v47--;
    v48--;
    let v50 = -2.0;
    v50--;
    function f53(a54, a55) {
        const o56 = {
            [10000n]: a55,
        };
        return o56;
    }
    function F58(a60, a61, a62, a63) {
        if (!new.target) { throw 'must be called with new'; }
        const v64 = C3?.constructor;
        try { new v64(758.9371938038303, this, v25, 758.9371938038303); } catch (e) {}
        this.c = a60;
    }
    const v66 = new F58(v50);
    const v67 = new F58(-1.093925554716035e+308);
    v67.length = v67;
    const v68 = v67 in v66;
    v68 || v68;
    const t68 = [];
    t68.length += -1.093925554716035e+308;
    %OptimizeFunctionOnNextCall(f31);
    try { ("find").matchAll(v18); } catch (e) {}
    try { a28(); } catch (e) {}
    try {
        new C3();
    } catch(e76) {
    }
    try { ("d").codePointAt(C3); } catch (e) {}
    const v79 = Date?.constructor;
    try { new v79(1.0); } catch (e) {}
    class C81 extends Date {
        static 2544510523 = 1.0;
        1855;
    }
    C81[2544510523] = C81;
    try { v25["find"](); } catch (e) {}
    for (const v84 in "1024") {
    }
}
for (let v85 = 0; v85 < 10; v85++) {
    f26();
}
%OptimizeFunctionOnNextCall(f26);
f26(f26, f26, v25, f23);
