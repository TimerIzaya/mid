const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(); } catch (e) {}
}
const v4 = new F1();
v0.preventExtensions(Worker);
class C8 {
    static n() {
        try {
            v0.f = C8;
        } catch(e10) {
        }
        return v0;
    }
    static [v0] = v0;
    d = v0;
    #a = v0;
    [v0] = v0;
    static #e;
    static d;
}
new F1();
new C8();
new C8();
[1000.0,0.17179672939271373,-1000000000.0,-2.2250738585072014e-308,2.5761791039901236e+307,-216.27810751124434,4.0,858284.4473710645,-0.0,-444771.26015365997];
[-2.220446049250313e-16,556587.8977194629,3.0802780795395854e+307,-777293.7497505668,1e-15,3.0,1000.0];
[2.0,-1e-15,-872814.5350301121,-689722.5324636351,-33.80039244876332,1000000.0,1.7133395621353957e+308,356.6632580294563];
let v17 = 1000.0;
const v18 = ++v17;
const v19 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
new Uint32Array();
let v22 = -4294967297n;
v22--;
const v24 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v25 = [601759695];
const v26 = [1073741824,1073741823,1376142744,1073741825];
function f28(a29, a30, a31, a32) {
    arguments.length;
    function f35() {
        try { ("Vre").codePointAt("Vre"); } catch (e) {}
        let v38 = Float64Array;
        v38 = a30;
        b = v25;
        v19.length;
        try {
            v26.forEach(a30);
        } catch(e41) {
        }
        const o55 = {
            "c": v22,
            "c": v25,
            valueOf(a43, a44) {
            },
            1073741824: v18,
            [v22](a46, a47, a48, a49) {
                class C51 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            "arguments": v24,
            256: a32,
        };
    }
    f35();
    try { Int8Array.of(); } catch (e) {}
    const v59 = new Int8Array();
    v59.buffer.slice(2147483648);
    const v65 = new Int32Array(1024);
    const v66 = v65[3];
    v66 * v66;
    for (let v68 = 0; v68 < 5; v68++) {
    }
    %OptimizeFunctionOnNextCall(f35);
    try { v26["find"](..."find", a32, ...v25, ...v26, ...522675525n); } catch (e) {}
    return arguments;
}
new Int8Array(212);
new Uint32Array(6);
new Uint16Array(12);
function F81() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v86 of v24(19793)) {
    }
    /8/vdiy;
}
const v89 = new BigInt64Array(v4);
v89[0] = v89;
