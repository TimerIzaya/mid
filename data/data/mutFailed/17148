class C3 {
    constructor(a5, a6, a7) {
        a6.constructor = gc;
        class C9 extends a6.constructor {
        }
        new C9();
    }
}
class C12 {
    static #p(a14) {
        return a14;
    }
}
class C15 {
    static {
        for (let v20 = 0; v20 < 32; v20++) {
        }
    }
    p(a23, a24) {
        super.e &= a23;
        function F25(a27, a28, a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = "at";
            } catch(e31) {
            }
        }
        new F25(-143.22286539225604, "at", "at", a24);
        new F25(-143.22286539225604, "at", F25, -14);
        const v34 = new F25(this, -143.22286539225604, -14, -143.22286539225604);
        return v34;
    }
    10;
}
const v35 = new C15();
const v36 = new C15();
const v38 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o39 = {
};
const v40 = new C15(v38, o39);
const o41 = {
    __proto__: v40,
    "e": -683470965n,
};
new C15();
[-1.0100496698545287e+308,1.7976931348623157e+308,3.433104476981315,1e-15,4.0,0.3999785879514307,4.0];
[-253.9866205338161,-3.3516048488071126,846632.9736542301,-Infinity,6.734974476310331,NaN,-1.997586991256588];
[0.8530555211114639,-950123.8943234882,-324.37919192079437,1000000000.0,-2.0,-1000000.0,-976.6958715908291,0.6052264490607462,98.86164977587327];
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a51;
    try {
        this.e = -4.0;
    } catch(e53) {
    }
    function f54(a55, a56, a57, a58) {
        function f59() {
            const v61 = new Float32Array();
            function f62() {
                function f63(a64) {
                    let v66 = -31278;
                    !-1000.0;
                    --v66;
                    ++v66;
                    !-14;
                    return C15;
                }
                return f63;
            }
            function f72(a73) {
                new Uint8ClampedArray(3186);
                new Uint8ClampedArray(1000);
                new BigInt64Array(751);
            }
            Object.defineProperty(v61, Symbol.toPrimitive, { configurable: true, get: f62, set: f72 });
            v61[1283] = v61;
        }
        f59();
    }
    f54();
}
new F49(v36, -143.22286539225604);
new F49(C15, -143.22286539225604);
new F49(v35, -4.0);
function f90() {
    const v92 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return v92;
}
%OptimizeFunctionOnNextCall(f90);
f90();
