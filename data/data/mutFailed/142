class C3 {
    m(a5, a6) {
        this[-2] = this;
        let v8 = 1439055396;
        const v9 = -533291.2342937093 && "setMilliseconds";
        const v10 = v9 + v8;
        Math.imul("setMilliseconds", -533291.2342937093);
        Math.expm1(v10, v10, "setMilliseconds", v9);
        Math.fround(-1092070487);
        Math.floor(-1092070487);
        --v8;
        return a6;
    }
}
new C3();
const v17 = new C3();
new C3();
const v21 = new Int8Array(-9007199254740991);
new Int8Array(116);
new Uint16Array(0);
const v29 = [,,v21];
[,v29,v29];
const v31 = [,v29];
v31[0] = v17;
class C32 {
    [v31] = undefined;
}
new C32(-9007199254740991);
new C32();
const v35 = [13,-3,1073741824,4294967295,-910142687];
[692069130,-8,-65208,65536,-48837,1766141532,256,-65537,32577,-24320];
const o39 = {
    "maxByteLength": 1073741825,
};
const v41 = new ArrayBuffer(512, o39);
new Int16Array(v41);
v41[v29] = v35;
const v0 = [];
const v3 = new Int32Array(249);
const v6 = new Uint8Array(1);
const v9 = new Uint8Array(1);
class C10 {
    9 = v0;
    toString(a12, a13) {
        try {
            v3.valueOf = v6;
        } catch(e14) {
        }
        try { Uint8Array(...v6, ...v9, this, ...v6, a13); } catch (e) {}
        delete v9[2];
        try {
            const v17 = [NaN,-5.161337834188833e+307,NaN,-984.7986985006023];
            class C18 {
                constructor(a20, a21, a22) {
                }
            }
            const v23 = v17.constructor;
            v23.from(C18);
            super[v6] = this;
            function F25() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = -12;
                } catch(e28) {
                }
                try {
                    this.h = -12;
                } catch(e29) {
                }
            }
            const v30 = new F25();
            new F25();
            const v32 = new F25();
            class C33 extends F25 {
                static a = F25;
                [v30] = v32;
                static 198 = F25;
                [a12];
                static #toString(a35) {
                    function f36(a37, a38) {
                        try { this["isFrozen"](v32, "isFrozen", "isFrozen", v30, a38); } catch (e) {}
                        try {
                            const t45 = "isFrozen";
                            t45.toString = a37;
                        } catch(e41) {
                        }
                    }
                    new Promise(f36);
                    return v32;
                }
            }
            new C33();
            new C33();
            new C33();
            new Date();
            new v23(2755);
            new Uint8Array(127);
            const v57 = new Int32Array(3644);
            let v59 = 2.220446049250313e-16;
            class C61 {
                constructor(a63) {
                    const o64 = {
                        ...this,
                    };
                    try {
                        v59 = -1.0;
                    } catch(e65) {
                    }
                }
                [v59];
                #e = -1.0;
            }
            const v66 = new C61(v59);
            const v67 = new C61(167.17964779139515);
            const v68 = new Int32Array(167.17964779139515);
            function F71(a73, a74, a75) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = a74;
                } catch(e76) {
                }
            }
            const v77 = new F71(F71, v57, v66);
            const v78 = new F71(v68, 2755);
            const v79 = new F71(v59, v66, v66);
            try {
                v67.fuck([v77,128,v79,v66,167.17964779139515], -2058640984);
            } catch(e82) {
            }
            function f83() {
                return v79;
            }
            try { v66["indexOf"](v79, v66, v78); } catch (e) {}
        } catch(e86) {
        }
        return this;
    }
}
new C10();
new C10();
new C10();
class C92 {
    constructor(a94, a95) {
        const v96 = this?.constructor;
        try { new v96(a94, a94); } catch (e) {}
        a94 | a94;
        v6.name;
        const v100 = super.d;
        Int32Array?.[a95];
        try {
            a94[6] = v100;
        } catch(e102) {
            e102.b = e102;
        }
    }
    #n(a104, a105) {
    }
}
const v106 = new C92(-4096, C92);
v106.length = v106;
const v107 = new C92(1000.0, v0);
const v108 = new v107(C92, v107);
function F109(a111, a112, a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    const t127 = a114.constructor;
    new t127(a111, v108);
}
const v117 = new F109(v108, C92, v107, v107);
const v118 = new F109(v117, v107, v117, v107);
new F109(v108, v107, v118, v106);
