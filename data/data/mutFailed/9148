function f2(a3) {
    [16716413,-16];
    [-1,825980008];
    [-757013209,9,4,64,536870888,268435441,-14,-25738];
    return 8;
}
BigUint64Array.toString = f2;
const v7 = new BigUint64Array(8);
const v10 = new BigInt64Array(6);
v10[2];
const v14 = new Uint32Array(12);
v14[1];
const v16 = [BigUint64Array,v10,8,v7];
function f17() {
    return f2;
}
function f18(a19) {
    const o20 = {
        "apply": f2,
        "call": f2,
        "construct": f2,
        "defineProperty": f2,
        "deleteProperty": f2,
        "getPrototypeOf": f2,
        "has": f17,
        "isExtensible": f17,
        "ownKeys": f17,
        "preventExtensions": f2,
        "set": f2,
    };
    new Proxy(v16, o20);
}
const v24 = Symbol.toPrimitive;
Object.defineProperty(v16, v24, { enumerable: true, get: f17, set: f18 });
const v25 = [v14,BigInt64Array];
const v26 = [BigInt64Array,v10,v10,8,12];
const v27 = v26?.every;
try { new v27(v7); } catch (e) {}
class C29 {
    constructor(a31, a32) {
        this.constructor = f18;
        const v33 = this?.__lookupGetter__;
        try { new v33(8); } catch (e) {}
        let v35 = 0;
        do {
            const v38 = 6 || v10;
            v10 << 12;
            const v40 = 12 || 6;
            v40 >> v40;
            v38 * -2;
            const v43 = v35++;
            v43 >>> v43;
        } while (v35 < 7)
    }
}
try { C29.__proto__(); } catch (e) {}
const v48 = new C29(v25, 6);
const v49 = new C29(v48, 8);
const v50 = v49?.constructor;
try { new v50(v49, BigInt64Array); } catch (e) {}
new C29(v26, 12);
function f54() {
    const o57 = {
        __proto__: 2,
        ...2,
    };
    o57.e = o57;
    o57.e = o57;
    const v58 = new Uint16Array(o57, 2, 2);
    v58.toString = Symbol;
    v58[1] = v58;
    return 2;
}
try { f54.bind(8); } catch (e) {}
const v62 = new BigInt64Array(218);
const v63 = v62.sort(f54);
function f64() {
    v24.a = v24;
    const v67 = new Uint32Array(4);
    v67.fill();
    return Uint32Array;
}
v63[Symbol.toPrimitive] = f64;
try { v63.slice(v63, v16); } catch (e) {}
