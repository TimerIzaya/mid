function f0() {
}
function f5() {
    function f6(a7) {
        const v8 = [1073741824,1073741823,1376142744,1073741825];
        function f9(a10, a11, a12, a13) {
            try { v8["find"](..."find"); } catch (e) {}
            return a13;
        }
        for (let v16 = 0; v16 < 10; v16++) {
            f9();
        }
        return BigUint64Array;
    }
    return f6;
}
function f18(a19) {
    const v20 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
    const o30 = {
        [null]() {
            for (let v23 = 0; v23 < 500; v23++) {
                v23++;
                const o29 = {
                    [v20](a26, a27, a28) {
                    },
                    ...v23,
                };
            }
        },
    };
    o30.null(null, v20, o30.null(), o30, o30.null());
}
Object.defineProperty(Uint8ClampedArray, "toString", { writable: true, configurable: true, get: f5, set: f18 });
"ex7" <= Uint8ClampedArray;
const v38 = new Uint32Array(64);
v38[45];
let v40 = v38.indexOf(v38, 64);
v40--;
const v42 = new BigUint64Array(149);
v42.toString = f18;
try { v42.find(v42); } catch (e) {}
const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v45.sort(BigUint64Array); } catch (e) {}
v45["p" + v40] = v40;
const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v51 = [601759695];
try { v51.groupToMap(v42); } catch (e) {}
const v53 = [1073741824,1073741823,1376142744,1073741825];
522675525n << 522675525n;
function f56(a57, a58, a59, a60) {
    function f61() {
        let v64 = Float64Array;
        v64 = a58;
        b = v51;
        v45.length;
        try {
            v53.forEach(v64);
        } catch(e67) {
        }
        const v68 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v70 = Symbol.toPrimitive;
        const o76 = {
            toString(a72, a73) {
                const v74 = a60 && v64;
                a72 *= v70;
                return v64;
                return v74 <= v68;
            },
        };
        const o96 = {
            "c": -4294967297n,
            [522675525n](a79, a80) {
            },
            "c": v51,
            valueOf(a82, a83) {
            },
            "b": -4294967295,
            [-4294967297n](a85, a86, a87, a88) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v50,
            ...v51,
            "type": "Vre",
            ..."Vre",
            valueOf(a90, a91) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a93, a94, a95) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f61();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f61);
    try { v53["find"]("find", a60, v51, v53); } catch (e) {}
}
const v103 = 6 | 6;
const v104 = v103 >>> v103;
let v106 = -4294967297n;
const v107 = v106++;
const v109 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v110 = [601759695];
v110.toString = f5;
const v111 = [1073741824,1073741823,1376142744,1073741825];
const v113 = 149 | 149;
function f114() {
    const v116 = ("Vre").toLocaleUpperCase;
    try { v116(v116, v106, 149, v111); } catch (e) {}
    const v118 = ("Vre").fixed();
    const v119 = v118?.toLocaleUpperCase;
    try { new v119(); } catch (e) {}
    v118[1] = v118;
    const v121 = v118.codePointAt();
    v121 != v121;
    ~-4294967295;
    let v125 = -268435456;
    const v126 = v125--;
    v126 >= v126;
    const o141 = {
        "c": v106,
        [522675525n](a129, a130) {
        },
        ..."Vre",
        "maxByteLength": -128,
        "c": v110,
        [v121]: -1547267477n,
        __proto__: 149,
        "d": v126,
        "e": -4294967295,
        "h": -128,
        valueOf(a132, a133) {
            return v118;
        },
        "e": v113,
        "e": v125,
        "maxByteLength": -4294967295,
        "arguments": v109,
        ...v110,
        "type": "Vre",
        ..."Vre",
        valueOf(a135, a136) {
            this.maxByteLength = this;
            return this;
        },
        ..."Vre",
        4: "Vre",
        "c": v125,
        "type": "Vre",
        "type": "Vre",
        toString(a138, a139, a140) {
            return v107;
        },
        5: -4294967295,
        6: v125,
    };
    function f142() {
        return v104;
    }
    function f143(a144) {
        function f145() {
            return f145;
        }
    }
    Object.defineProperty(o141, "length", { writable: true, configurable: true, get: f142, set: f143 });
    o141.length;
    o141[5] = o141;
    class C147 {
        e;
    }
    const v148 = C147?.constructor;
    try { new v148(v110); } catch (e) {}
    const v150 = new C147();
    v150.h = v150;
    const v151 = new C147();
    v151.e;
    const v153 = new C147();
    v153.e = v153;
    return o141.valueOf();
}
f114();
const v157 = BigInt64Array?.of;
try { new v157(); } catch (e) {}
BigInt64Array.name;
function f160(a161, a162, a163, a164) {
    const v166 = new Int32Array();
    try { v166.toLocaleString(); } catch (e) {}
    v166[492];
    v166[3];
    return a161;
}
for (let v170 = 0; v170 < 10; v170++) {
    f160();
}
const v172 = new BigInt64Array(6);
try { v172.at(v42); } catch (e) {}
new Int8Array(8);
const v179 = new Float64Array(453);
v179.valueOf = f5;
for (const v181 of "-4294967295") {
}
function F183(a185, a186) {
    if (!new.target) { throw 'must be called with new'; }
    const v187 = this?.constructor;
    try { new v187(a186, a186); } catch (e) {}
    this.b = "b";
    this.d = a186;
}
const v189 = new F183();
v189.b = v189;
v179[437] = v179;
const v190 = v179.toSorted();
v190[415];
v113[2] = v113;
function f192(a193) {
    return a193;
}
[f192];
v190[333];
