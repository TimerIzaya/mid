const v0 = /Cxyz{1,}?(?:a+)*/gvsy;
const v1 = /\ud808\udf45*/gvms;
const v2 = /4806/vs;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7() {
        function f8(a9) {
            Math.imul(a5, this);
            Math.cosh(a5);
            a5--;
            Math.random();
            this + a5;
            return v0;
        }
        return f8;
    }
    Object.defineProperty(a5, "toString", { enumerable: true, get: f7 });
    try { a5.exec(v2); } catch (e) {}
    a6.b = a6;
    try {
        this.b = a5;
    } catch(e18) {
    }
    const v19 = [126.35858692635452,171.76053631394439,637722.086033537,-4.0,3.0,-1000000.0,1.3044045702886066e+308];
    const v20 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
    v20[5];
    function f22() {
        return v20;
    }
    class C23 extends f22 {
    }
    const v24 = new C23();
    const v25 = v19.shift();
    try {
        v24.length = v25;
    } catch(e26) {
        e26.a = e26;
    }
    try {
        this.a = v0;
    } catch(e27) {
    }
}
new F3(v2, v1);
let v29 = 2;
-v29;
v29++;
function f32(a33) {
    a33 === a33;
    a33 <= a33;
    const o39 = {
        __proto__: v29,
        213: a33,
        ...a33,
        "g": v29,
        p(a37, a38) {
            return f32;
        },
    };
    o39[213];
}
f32(f32());
const v43 = new F3(v2, v1);
v43.b = v43;
const v44 = new F3(v1, v0);
[Infinity,2.220446049250313e-16,-1000000.0,-109441.54734560428,1.0,-7.453543526540869,415.5282600348862,2.60897073693097e+307,464145.03787129396,-835682.3447220458];
const v46 = [-1.7976931348623157e+308,-1000000000000.0];
[-563685.6316911796];
995 >>> 995;
new Uint8ClampedArray(995);
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    Array(19793);
    function F57() {
        if (!new.target) { throw 'must be called with new'; }
        class C59 {
        }
        for (let v60 = 0; v60 < 25; v60++) {
            const v61 = [1073741824,1073741823,1376142744,1073741825];
            function f62(a63, a64, a65, a66) {
                try { v61["find"](); } catch (e) {}
                return C59;
            }
            for (let v69 = 0; v69 < 5; v69++) {
                f62(v69, f62);
            }
        }
    }
    new F57();
    const o72 = {
    };
    for (let v73 = 0; v73 < 5; v73++) {
    }
    [];
    function f75(a76) {
        const o77 = {
        };
    }
    class C78 {
    }
}
function f79() {
    return v46;
}
try { f79(); } catch (e) {}
-9007199254740992 * -9007199254740992;
function F85(a87, a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a88;
    } catch(e90) {
    }
}
new F85(1073741825, F3, v1);
const v92 = new F85(-1, -9007199254740992, v0);
v92.constructor = f79;
const v93 = v92?.constructor;
try { new v93(v44, Uint8ClampedArray, Uint8ClampedArray); } catch (e) {}
new F85(-9007199254740992, -9007199254740992, v2);
let v96 = 305;
v96++;
const v99 = new Int16Array(v96);
try { Map.apply(v99, v99); } catch (e) {}
