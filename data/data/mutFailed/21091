new Uint8ClampedArray(214);
new Uint8ClampedArray(220);
new Float32Array(512);
new Set();
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F15();
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
}
class C27 {
}
const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = [601759695];
let v31 = 522675525n;
for (let v32 = 0; v32 < 5; v32++) {
    function f33() {
        Array().unshift();
        new Set();
        function F42(a44, a45) {
            if (!new.target) { throw 'must be called with new'; }
            F42(this, this);
        }
        try {
            F42.forEach(Float64Array);
        } catch(e48) {
        }
        class C50 {
        }
        const v51 = new C50();
        try {
            v51.__proto__ = F23;
        } catch(e52) {
        }
        const v53 = Symbol.toPrimitive;
        const o57 = {
            toString(a55, a56) {
                return C27;
            },
        };
        const o78 = {
            [v31](a60, a61) {
            },
            "c": v30,
            valueOf(a63, a64) {
            },
            [-4294967297n](a66, a67, a68, a69) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v29,
            ...v21,
            [v53]() {
            },
            "type": C27,
            valueOf(a72, a73) {
                return v31;
            },
            4: "Vre",
            toString(a75, a76, a77) {
                return Set;
            },
        };
        new Float32Array();
        const v84 = [272822757];
        const v85 = [-2.0,272822757,"function"];
        const o86 = {
            __proto__: v85,
        };
        v84[o86] &= 272822757;
        v31 %= -268435456;
        return v53;
    }
    f33();
    %OptimizeFunctionOnNextCall(f33);
}
