[-40537,-2147483647,1,1073741823,8,700516476];
const v10 = [129,-6,-268435456,1413091207,256,11,-20131,1614477644,-2123900542,4096];
const v11 = [9007199254740990,-1990276985,-63129,-6,-2,11118,0,9223372036854775807,-1,6];
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a14;
    } catch(e17) {
    }
    try {
        this.c = -1000000000000.0;
    } catch(e18) {
    }
    try {
        this.b = v10;
    } catch(e19) {
    }
}
for (let v20 = 0; v20 < 11; v20++) {
}
new F12(v10, -1000000000000.0, 2147483648);
new F12(v10, -3.0, -1000000000000.0);
new F12(v10, -3.0, v10);
for (let v28 = 0; v28 < 5; v28++) {
    function f29() {
        const v32 = ("Vre").charAt(v28).lastIndexOf();
        v32 >>> v32;
        const v35 = new Float32Array("Vre", v28, v28);
        const v36 = v35;
        v36[1] = v36;
        const v38 = Math.exp(v28);
        function f39() {
            return -1000000000000.0;
        }
        const v40 = v38 << f29;
        let v42 = v38 << v38;
        [[2147483648,107396.21944753965,v42,f29],v40,f29,v36];
        [v11,f29,f29,v35,f29];
        Object.defineProperty(v11, "Vre", { value: f29 });
        f29 >>> f29;
        v42++;
        const o55 = {
            [-4294967297n](a49, a50, a51, a52) {
                eval();
            },
        };
        return -4294967297n;
    }
    f29();
    %OptimizeFunctionOnNextCall(f29);
}
