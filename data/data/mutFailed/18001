const v0 = /(?:a*)+/uis;
function f1() {
    return f1;
}
const v2 = [155533.8602852358,2.0];
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v9 of f1(19793)) {
        v2[658291203] = null;
        Math.g = Array;
        f1--;
    }
}
const v12 = /(?:ab|cde)/gvdims;
const v13 = /a\s[-\xf0\x9f\x92\xa9]+/msy;
const v18 = new Float64Array(30315, v0);
function f19() {
    return v12;
}
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    -6 === -6;
    f19(19793);
    Array(2433);
    try {
        this.d = 128;
    } catch(e32) {
    }
    try {
        this.size = v18;
    } catch(e33) {
    }
}
const v34 = [];
function* f35(a36, a37) {
    yield* v34;
    return a36;
}
const v38 = new F20(v0, -6, v13);
new F20(v13, 30315, v12);
new F20(v12, 128, v12);
function f41() {
    return f41;
}
class C42 extends f41 {
}
for (const v44 in f41) {
    continue;
    v38[4];
}
new Int8Array(268435456);
function F49() {
    if (!new.target) { throw 'must be called with new'; }
}
class C51 {
}
const t56 = 30315;
const v52 = new t56();
ReferenceError.captureStackTrace(F49, v52);
try { v18.reduceRight(f19, v13); } catch (e) {}
const v58 = new Uint32Array(4096);
v58[6] = 35.31700069890553;
class C62 {
}
const o65 = {
    "execution": "async",
};
const v66 = gc(o65);
new Int32Array(Int32Array);
v13.h = 35.31700069890553;
for (const v69 in "async") {
}
v66.finally(4096);
