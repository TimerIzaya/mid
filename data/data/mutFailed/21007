function f0() {
}
const v1 = [-2147483649,129,127,-45363,-40292,1,1,42664,65536];
const v2 = [-47421,9223372036854775807,-918500167,1,-3,964144174,1000];
const v3 = [9,-1073741824,231505787,-42915,-9,-508763709];
const v5 = new Date();
new Int32Array(9);
for (let [v10,...v11] of "atan2") {
}
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a17;
    } catch(e20) {
    }
}
new F15(v2, v1, 739.4849141378031);
const v22 = new F15(v1, v1, F15);
new F15(v1, v1, v5);
const v25 = /Cs[\cz]*/vi;
function f27(a28, a29) {
    try {
        v3.__proto__ = v22;
    } catch(e30) {
    }
    return a28;
}
Object.defineProperty(Date, Symbol.species, { writable: true, configurable: true, enumerable: true, value: f27 });
class C33 {
    static {
    }
}
for (let v35 = 0; v35 < 25; v35++) {
    function f36(a37, a38) {
        const o40 = {
            get h() {
                return this;
            },
        };
        return o40;
    }
    for (let v41 = 0; v41 < 5; v41++) {
        const v42 = f36(f36, v41);
        Object.defineProperty(v42, v41, { enumerable: true, get: f36, set: f36 });
        Reflect.preventExtensions(v42);
    }
    [601759695];
    let v46 = /a|b/vdy;
    let v47 = /7Z(?:a?)+/gudsy;
    const v48 = /\coQ/gdy;
    function F49(a51) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = v46;
        } catch(e52) {
        }
        try {
            this.g = a51;
        } catch(e53) {
            v48.dotAll >>= e53;
            let v54;
            try { v54 = e53(e53, v47); } catch (e) {}
            v47 = v46;
            return e53;
            v46 = v54;
        }
    }
    const v55 = new F49(v46);
    let v56;
    try { v56 = v47(F49); } catch (e) {}
    const v58 = v55 === v56 ? v55 : v56;
    const o59 = {
        [v35]: v25,
        "f": v58,
    };
    const v60 = [1073741824,1073741823,1376142744,1073741825];
    function f62(a63, a64, a65, a66) {
        arguments.g = a63;
        for (let v69 = 0; v69 < 5; v69++) {
            v69 < 2;
            try {
                arguments.g = v69;
            } catch(e72) {
            }
            v69++;
        }
        function f74() {
            return a63;
        }
        const v76 = new Int8Array();
        function f77(a78, a79) {
        }
        f77();
        const v81 = v76.buffer;
        Object.defineProperty(v81, "constructor", { writable: true, configurable: true, value: Date });
        class C85 {
        }
        function f86(a87, a88, a89, a90) {
            let v91 = 10;
            for (; v91--;) {
            }
            try { a88.apply(a87); } catch (e) {}
        }
        f86(v35, C85);
        -(46598 / v25);
        Math.log1p(46598);
        v81.slice();
        try { v60["find"](); } catch (e) {}
        const v104 = new Uint8Array(2707, 2707, 128);
        let v105;
        try { v105 = v104.findLastIndex(v104, v104); } catch (e) {}
        const o106 = {
            [v105]: Uint8Array,
        };
    }
    for (let v107 = 0; v107 < 5; v107++) {
        f62();
    }
}
