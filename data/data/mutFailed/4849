const v0 = [];
let v3 = -65537n;
v3--;
const v5 = [-5.0,1.7976931348623157e+308,1000000.0,-1.3620188084703956e+307,1000000000000.0,-9.391278856282527,2.0,-5.5677252573786975e+306];
const v6 = [-9.07466978546611,0.0,8.0705002464302,-1.4989855867404028e+308,105227.0662186027];
v6[2] = v6;
const v7 = [-Infinity,-6.287750782825623,2.2250738585072014e-308,5.0,-1.0,NaN,-779629.1301722595,0.7992764606295677,4.0,0.0];
v7[6] = v7;
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    function f14(a15) {
        try {
            a15.b = v7;
        } catch(e16) {
        }
    }
    Object.defineProperty(this, "c", { writable: true, enumerable: true, set: f14 });
    try { a13.findLast(a13); } catch (e) {}
    try {
        this.c = a13;
    } catch(e18) {
    }
}
const v19 = new F8(v0, v5, F8, v0);
const v20 = v19?.constructor;
v20.findLast = v19;
try { new v20(v19, 7n, v19, F8); } catch (e) {}
new F8(v6, v7, v6, v5);
new F8(v5, v5, v0, v7);
const v24 = [2147483649,-2147483647,-975339484,15,15];
try { v24.map(v0); } catch (e) {}
const v26 = [-63689095,-16,5,1149231368];
const v27 = v26?.filter;
try { new v27(v26); } catch (e) {}
[-1129742882,-256,-2051114000,-2147483648,4294967295,268435441];
for (let [i33, i34] = (() => {
        10 >> 10;
        return [0, 10];
    })();
    i33 < i34;
    i33 - i33, i33++) {
}
