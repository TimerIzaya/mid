const v0 = [2.2250738585072014e-308,914.3712448875322,-76352.22326027718,-1.5152355581553257e+308,0.11544365564960413,1000000.0,-1.2377586936702844e+308];
const v1 = [511854.29866291606,5.115655194416311,Infinity,1.1690786234952735e+308,-4.0,5.0,2.2250738585072014e-308,-575.4800149324997,-1.0468619538519155e+308,2.2250738585072014e-308];
const v2 = [-2.220446049250313e-16,1.7976931348623157e+308,4.0,0.07508873909657798,1.2799712338083236];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a8;
    } catch(e10) {
    }
    try {
        this.d = v1;
    } catch(e11) {
    }
}
const v12 = new F6(v0, v0);
const v14 = Symbol.iterator;
v12[v14] = v14;
v1 % v1;
v2.length += -854416606;
const v16 = new F6(v2, -2147483647);
const v17 = new F6(v1, -854416606);
function f18(a19, a20, a21, a22) {
    try { a21.groupToMap(f18); } catch (e) {}
    a22.d = a22;
    const o43 = {
        [a19](a25, a26, a27, a28) {
            a26.length -= 41414;
            const v29 = 41414 ** F6;
            try {
                super.getTimezoneOffset(-2147483647, a26, v29, a19, this);
                super[a22];
                const o37 = {
                    "maxByteLength": 4076,
                };
                const v39 = new ArrayBuffer(4, o37);
                new DataView(v39);
            } catch(e42) {
            }
            return F6;
        },
        "a": a21,
        __proto__: a20,
        ...v17,
        4294967296: v0,
        [-1]: -2147483647,
        0: a20,
        "f": a20,
    };
    return o43;
}
const v44 = f18(v0, v16, v2, v12);
const v45 = f18(v1, v17, v0, v16);
v45.b = v45;
const v46 = f18(v1, v44, v0, v16);
v46.e = v46;
const v47 = [-646258.8006221732,5.0,-1000000.0,2.2250738585072014e-308,-2.2250738585072014e-308,1000000.0];
for (let i = 0; i < 5; i++) {
    29 >>> 29;
    v47.length = 29;
}
