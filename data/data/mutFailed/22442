function f1() {
    for (let v2 = 0; v2 < 5; v2++) {
        [v2,v2];
        const v4 = [1,6,-9,5,-10,-1024,657510145,12252,-2087182304,-4294967295];
        const v5 = [-1996357020];
        class C6 {
            constructor(a8, a9) {
                try { this.propertyIsEnumerable(); } catch (e) {}
                try { a9.findLastIndex(v5); } catch (e) {}
                super[a8] = v4;
                const v13 = new BigUint64Array();
                try { Int32Array.apply(v13); } catch (e) {}
                const v16 = new Int32Array();
                v16[7];
                Math.atan(Math);
                function F20(a22, a23, a24) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
        }
        new C6(v4, v5);
        function f26() {
            return v2;
        }
        eval();
        const v29 = new v2();
        function f30(a31, a32) {
            const o35 = {
                "h": v29,
                [a32]: v29,
                set h(a34) {
                },
            };
            return f30;
        }
        %PrepareFunctionForOptimization(f30);
        const v37 = new Float64Array();
        function f38() {
            for (let v39 = 0; v39 < 10; v39++) {
                const v41 = Math.expm1(v37);
                v41 >> v41;
            }
        }
        f38();
        %OptimizeFunctionOnNextCall(f38);
        f38();
    }
    const v47 = new Float32Array(5);
    v47.indexOf(6);
    function F51(a53) {
        if (!new.target) { throw 'must be called with new'; }
        const v54 = a53 ^ a53;
        v54 * v54;
        const v56 = this.constructor;
        v56.length = v56;
        try { new v56(3n); } catch (e) {}
    }
    new F51(0n);
    return f1;
}
new BigUint64Array(6);
new Float32Array(512);
const v66 = new Uint8Array(6);
class C67 {
    static 3157;
    static [v66];
    constructor(a69, a70) {
    }
    p(a72, a73, a74, a75) {
    }
    static 4 = 6;
    /*
    constructor(a77, a78) {
        for (let v79 = 0; v79 < 5; v79++) {
            const v81 = new Map();
            v81["p" + 6] = 6;
            const o84 = {
                ...v81,
            };
        }
    }
    */
    static [6] = Uint8Array;
    [512] = v66;
    [v66];
    /*
    constructor(a86, a87) {
        a86 | a86;
    }
    */
    get e() {
    }
    o(a92, a93, a94, a95) {
        this[v66] /= a92;
        this >> this;
        return this;
    }
    h = 512;
}
new C67();
class C98 {
}
new Date("2");
new C67();
try { Int8Array.of(); } catch (e) {}
new Uint16Array(Uint16Array);
function F107() {
    if (!new.target) { throw 'must be called with new'; }
}
new C67();
class C110 {
}
const v111 = new C110();
v111.constructor;
const v113 = [];
const v114 = [v113];
class C116 extends Map {
}
const v117 = new C116();
const v118 = new C116(v114);
const v119 = new C116(v118);
const v121 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v123 = new Uint32Array(v118, v113);
let v124 = -4294967297n;
v124--;
const v126 = [601759695];
const v127 = [1073741824,1073741823,1376142744,1073741825];
function f128(a129, a130, a131, a132) {
    const v133 = a129.constructor;
    v126["pop"]();
    try { v133(v133); } catch (e) {}
    try { v133(); } catch (e) {}
    const v139 = arguments.length;
    Object.defineProperty(v117, "e", { configurable: true, enumerable: true, value: f128 });
    v118["toString"](a131, ...v119, BigUint64Array, ..."toString", a130, v139);
    function f142() {
        const v144 = ("Vre").charAt();
        try { v144.lastIndexOf(); } catch (e) {}
        ("Vre").codePointAt();
        v121.length;
        try {
            v127.forEach();
        } catch(e149) {
        }
        const o162 = {
            "c": v124,
            "EPSILON": v126,
            valueOf(a151, a152) {
                return a129;
            },
            1073741824: v123,
            [v124](a154, a155, a156, a157) {
                eval();
            },
            o(a161) {
                return v124;
            },
            256: a132,
        };
        return a130;
    }
    f142();
    const v165 = Array();
    try { v165.findLast(f128); } catch (e) {}
    let v168;
    try { v168 = Int8Array.of(); } catch (e) {}
    try { v168.join(a130); } catch (e) {}
    for (let v170 = 0; v170 < 5; v170++) {
    }
    try { v127["find"](..."find", a132, ...v126, ...v127); } catch (e) {}
    return a132;
}
new Uint8Array(268435440);
function F176() {
    if (!new.target) { throw 'must be called with new'; }
}
class C178 extends F176 {
    toString(a180, a181) {
        const v182 = [a180,a180,a180,a180];
        const v184 = new Date();
        v184.getHours();
        for (let i188 = 0, i189 = 10; i188 < i189;) {
            const v199 = -25283n >> (-25283n && -25283n);
            v199 | v199;
        }
        a180[v182] >>>= a180;
    }
    constructor(a202) {
        ("2").localeCompare(a202, "2");
    }
}
[f1,f1(),[4,4294967295,-14,-2068970124,63345,9007199254740992,14312,-1300834415,59193]];
class C207 {
}
