const v2 = new Int16Array(4096);
215 ^ 215;
const v6 = new Int16Array(215);
try { new Int8Array(Int16Array, Int16Array, Int16Array); } catch (e) {}
const v10 = new Int8Array(3156);
const v13 = new Uint32Array(4096);
v13[6] = 35.31700069890553;
function f15(a16, a17) {
    ~Int16Array;
    const o56 = {
        ...v2,
        toString(a20, a21, a22) {
            a20[1] ^= 3156;
            const v24 = [a20,v6];
            Reflect.apply(v10.map, this, v24);
            return Int16Array;
        },
        "b": v6,
        get e() {
            this - v10;
            const v32 = [-6135,-37816,1634505153,-2147483649,10];
            const v33 = [0.23449681451060211,-1.3180974566102865e+308,-2.0,-1000000000.0,0.6107310765455765];
            const v35 = new Int16Array(v33);
            for (let i39 = 0, i40 = 0;
                (() => {
                    const v41 = i39 < i40;
                    !v41;
                    return v41;
                })();
                i40--) {
                for (let v48 = 0; v48 < 10; v48++) {
                    i40 - i40;
                    ("number")[i39];
                    "number" | v33;
                    v32.length;
                    v35.__proto__;
                }
            }
            const o54 = {
                "execution": "sync",
                "type": "number",
            };
            gc(o54);
            return Int16Array;
        },
    };
    o56[1413] = o56;
    return o56;
}
const v58 = f15(4096, f15(215, v13));
v58.b = v58;
const v59 = f15(4096, 215);
v59[2939] = v59;
-9 !== -9;
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    const v71 = F66++;
    v71 << v71;
}
function f73() {
    for (let v74 = 0; v74 < 5; v74++) {
        const v75 = new F66();
        const v76 = v75?.constructor;
        try { new v76(v10, v10, v74); } catch (e) {}
        v75.constructor = f15;
        function F78(a80, a81) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v82 = new F78();
        try { v82.constructor(f73, v2); } catch (e) {}
        const v85 = 9 ** 9;
        const v86 = !9;
        9007199254740991 * v85;
        const v88 = v86 % F66;
        v88 >>> v88;
        const v90 = v75.constructor;
        try { v90.call(4096); } catch (e) {}
        new v90();
    }
}
%PrepareFunctionForOptimization(f73);
function f93() {
    const v95 = Math.atan(Math);
    return v95 - v95;
}
f93.g = f93;
const t86 = -1;
t86();
%OptimizeFunctionOnNextCall(f73);
f73();
