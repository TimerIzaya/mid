function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 12;
    } catch(e3) {
    }
    try {
        this.c = 12;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
let v8 = 100910865;
v8--;
class C12 extends F0 {
    #h;
    #valueOf(a14, a15, a16) {
        try {
            this.h = v5;
        } catch(e17) {
            function f18() {
                for (let v19 = 0; v19 < 5; v19++) {
                    "p" + v19;
                }
                class C24 {
                }
                function F28(a30) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v31 = this.constructor;
                    try { new v31(); } catch (e) {}
                    this.g = -1517929768;
                    this.g = -1;
                    this.h = a30;
                }
                const o34 = {
                    "b": -1000000.0,
                    "h": -1540034480,
                };
            }
            f18();
        }
        return 536870912;
    }
    static #c = v8;
    [v5] = v6;
    [F0] = v5;
    static [v7] = v6;
}
new C12();
const v38 = Symbol();
Symbol.for(v38.description);
Symbol.keyFor(v38);
function f44() {
    return "function";
}
f44.caller;
const v46 = new C12();
const v47 = new C12();
v47.e = v47;
class C48 {
    static g;
    static {
        for (let v50 = 0; v50 < 25; v50++) {
            const v51 = [601759695];
            const v52 = [1073741824,1073741823,1376142744,1073741825];
            const v53 = v52?.values;
            try { new v53(); } catch (e) {}
            function f56(a57, a58, a59, a60) {
                a57.d = a57;
                a58++;
                try { new a57(); } catch (e) {}
                a59 << a59;
                arguments[2];
                function f66() {
                    return a57;
                }
                Int8Array.BYTES_PER_ELEMENT = Int8Array;
                const v68 = new Int8Array();
                let v71 = BigUint64Array * 536870887;
                v71++;
                const v73 = v71 - v71;
                v73 << v73;
                Number.isNaN(v71 ** v71);
                function f78(a79, a80) {
                }
                try { f78(); } catch (e) {}
                const v83 = v68.buffer.__defineGetter__;
                v83.e = v83;
                try { v83(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f66);
                let v86;
                try { v86 = v52["find"](..."find", a60, ...v51); } catch (e) {}
                const o87 = {
                };
                v86 <= a59;
            }
            for (let v89 = 0; v89 < 5; v89++) {
                f56(this, v89, v89);
            }
        }
    }
    static set a(a92) {
        for (const v93 of a92) {
            super.e = v93;
        }
        super.b = v46;
    }
    [F0] = 536870912;
    2147483649 = 536870912;
    static h = v6;
    3058268856 = C12;
}
const v95 = new C48();
v95[3058268856];
const v97 = new C48();
v97[3058268856];
new C48();
function F100() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    for (let v103 = 0; v103 < 1000; v103++) {
        const v105 = new WeakMap();
        const v106 = /8[\cA]v/uisy;
        function f107(a108, a109) {
            const v110 = [v106];
            v105.set(v110, v110);
            return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
        }
        try { ("p").strike(); } catch (e) {}
        const v119 = ("p" + v103).fontcolor();
        let v120;
        try { v120 = v119.trimLeft(this); } catch (e) {}
        try { v120.toUpperCase(); } catch (e) {}
        const v122 = v120[12];
        try { v122.blink(); } catch (e) {}
    }
}
const v124 = new F100();
const v125 = v124?.constructor;
try { new v125(); } catch (e) {}
new F100();
