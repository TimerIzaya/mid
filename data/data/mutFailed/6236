function f0() {
    const o8 = {
        "f": -1000.0,
        "h": 283.9753550024791,
        ...-1000.0,
        "d": 1000.0,
        "c": 1000.0,
        [1000.0]: 1000.0,
        set g(a5) {
            let v6;
            try { v6 = new a5(); } catch (e) {}
            try { v6.m(this, 283.9753550024791); } catch (e) {}
        },
        ...283.9753550024791,
    };
    const v9 = o8?.__lookupSetter__;
    try { new v9(f0); } catch (e) {}
    return o8;
}
f0();
const v12 = f0();
f0();
function f14() {
    return f0;
}
new Map();
let v17 = -2.0;
v17--;
-130.3747275167084 >> -130.3747275167084;
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    a25 != a25;
    try {
        this.g = Map;
    } catch(e27) {
    }
    try {
        this.e = a25;
    } catch(e28) {
    }
}
F22.name;
new F22(0.5166409650712772, -130.3747275167084);
new F22(-130.3747275167084, 0.5166409650712772);
const v32 = new F22(-130.3747275167084, -130.3747275167084);
const v33 = v32?.g;
try { new v33(); } catch (e) {}
const v35 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v38 = new Uint32Array(v35, 2684);
v38.g = v38;
const v40 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v41 = [601759695];
try { v41.at(0.5166409650712772); } catch (e) {}
const v43 = [1073741824,1073741823,1376142744,1073741825];
function f45(a46, a47, a48, a49) {
    let v50;
    try { v50 = a46.group(a48); } catch (e) {}
    v50 - a48;
    a49 >> a49;
    function f53() {
        try { ("Vre").search(a48); } catch (e) {}
        let v57 = Float64Array;
        v57 = a47;
        b = v41;
        const v58 = v43.length;
        try {
            v43.forEach(a47, v35);
        } catch(e60) {
            const t68 = -4294967295;
            t68.b = e60;
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        try { new a46(); } catch (e) {}
        const v64 = Symbol.toPrimitive;
        v64.description;
        Symbol.for(a48);
        const o71 = {
            toString(a69, a70) {
                a69 *= v64;
                return v57;
            },
        };
        const o88 = {
            [522675525n](a74, a75) {
            },
            "c": v41,
            valueOf(a77, a78) {
            },
            [v58](a80) {
            },
            [-1]: 2684,
            1073741824: v57,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "arguments": a47,
            [-4294967297n](a82, a83, a84, a85) {
                f53();
            },
            "e": 2684,
            "e": -268435456,
            "arguments": v40,
            256: a49,
            ...v41,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
        return o88;
    }
    v50();
    const v91 = new Int8Array();
    Object.defineProperty(v91.buffer, "constructor", { writable: true, enumerable: true, value: f14 });
    try { ("").replaceAll(v12, ""); } catch (e) {}
    const v97 = eval("");
    Uint32Array[2] = 1;
    v97.slice(2147483648);
    %OptimizeFunctionOnNextCall(f53);
    let v101;
    try { v101 = v43["find"](..."find", a49, ...v41, ...v43, ...522675525n); } catch (e) {}
    return v101 <= a48;
}
try { f45(f0, v41, f14, v41); } catch (e) {}
for (let v104 = 0; v104 < 10; v104++) {
    f45(v43, v104, v104, v104);
}
%OptimizeFunctionOnNextCall(f45);
f45(f45, v40, 2684, f45);
