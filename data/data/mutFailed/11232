const v0 = [];
function f1() {
    return v0;
}
class C2 {
    get g() {
        try {
            this.fuck("boolean", "boolean");
        } catch(e6) {
        }
        return this;
    }
    static 268435456;
    static 536870889 = v0;
    3453;
}
const v7 = new C2();
const v8 = new C2();
const v9 = new C2();
function f10(a11, a12, a13) {
    const o25 = {
        toString(a15, a16, a17) {
            const o20 = {
                "maxByteLength": 1121993811,
            };
            const v22 = new ArrayBuffer(5, o20);
            new Int8Array(v22);
            return f1;
        },
    };
    return o25;
}
f10(v9, v9, f10);
const v27 = f10(v8, v8, v9);
const v28 = f10(v27, v27, v27);
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a32;
        new a31(2081);
        new Uint32Array(949);
        new Uint8ClampedArray(241);
    } catch(e43) {
    }
    try {
        this.d = f10;
    } catch(e44) {
    }
    try {
        this.b = f1;
    } catch(e45) {
    }
}
const v46 = new F29(v28, v8, v9);
new F29(v28, v46, v9);
const v48 = new F29(v0, v8, v7);
function f49() {
    for (let v50 = 0; v50 < 10; v50++) {
        Math.atanh(v50);
        C2--;
    }
}
v48();
%OptimizeFunctionOnNextCall(f49);
f49();
