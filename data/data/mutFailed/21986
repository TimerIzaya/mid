const v0 = [];
const v3 = new BigInt64Array(16);
function f4(a5, a6) {
    for (let v7 = 0; v7 < 32; v7++) {
        a5["p" + v7] = v7;
    }
    return v3;
}
v3.valueOf = f4;
const v10 = [v0,...v0,16];
v10.valueOf = f4;
const v14 = v10 % 4.0;
-4.0;
v14 ** 4.0;
1073741824 + (v10 * v3);
function f21(a22) {
    -9513n != 1;
    return -9513n;
}
Uint32Array.valueOf = f21;
const v26 = new Uint32Array(354);
new Float32Array(9);
class C30 {
    [Float32Array] = 16;
    constructor(a32, a33, a34, a35) {
        function f36() {
            return f21;
        }
        Object.defineProperty(a35, Symbol.toPrimitive, { writable: true, get: f36 });
        a35 %= v26;
        class C40 {
            9 = 6;
        }
        class C41 {
            p(a43, a44, a45, a46) {
            }
        }
        ([C41])[Symbol.iterator];
        const o54 = {
            "execution": "sync",
            "type": "major",
        };
        const v55 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
        function f56() {
            function f57() {
                try {
                    new Float32Array(510069016);
                } catch(e60) {
                }
                return v3;
            }
            return f57;
        }
        function f61(a62) {
        }
        Object.defineProperty(v55, Symbol.toPrimitive, { writable: true, get: f56, set: f61 });
        new Date(-2, v55, v55, v55, -2);
        const v71 = new Map();
        const t58 = v71.set(Map, Array).values();
        t58.constructor = Array;
        gc(o54);
    }
    static #b = 354;
    static #d = v0;
}
new C30(16, 16, 354, Uint32Array);
const v76 = new C30(16, 16, 354, C30);
v76.toString = f4;
new C30(16, 9, 16, v76);
for (let v78 = 0; v78 < 5; v78++) {
    function f79() {
        for (let i82 = 0, i83 = 10; i82 < i83; i82++, i83--) {
        }
        return f79;
    }
    f79();
    %OptimizeFunctionOnNextCall(f79);
}
