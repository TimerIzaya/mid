const v2 = new Int32Array(8);
const o4 = {
};
const v6 = new Uint16Array(v2);
new Int32Array(v6);
new Float64Array(2630);
-25283n >> (-25283n && -25283n);
function f16(a17, a18, a19, a20) {
    const v21 = [1000000000000.0,-952.1538186148879,597175.6294050945,0.5606738113859926,787.1655584120176,-1.4391319355275538,972495.0958115859];
    class C24 extends Uint8Array {
        constructor(a26, a27) {
            a26[1] = Float64Array;
            super();
        }
    }
    new C24(v21);
    return f16;
}
for (let v29 = 0; v29 < 10; v29++) {
    f16(v29, v29, f16, f16);
}
f16();
new BigUint64Array(10);
[1389989774,257,-694671714,64,2147483649,-17939];
[871626903,1073741825,7779,57594,-2147483649];
[65537,-15,-15,268435439,4096,35755,4294967297,-54745,-878212603];
const v39 = new Uint8ClampedArray(10);
const t27 = 8;
const v42 = new t27(1450);
class C43 {
    [Uint8ClampedArray] = v42;
    static valueOf(a45, a46, a47) {
        new this();
    }
    static a = v39;
}
const v49 = new C43();
const v50 = new C43();
this.c = v49;
v50[2147483647] = v42 << this;
new Uint8ClampedArray(748);
class C55 {
    toString(a57, a58, a59, a60) {
        let [] = "undefined";
    }
}
new Int8Array(404);
class C67 extends Array {
    2 = 64;
}
new Uint32Array(12);
class C70 {
    static {
        class C72 {
        }
    }
    static #e;
    toString(a74) {
        function f75() {
            const o76 = {
            };
            const v77 = o76.constructor;
            v77();
            return v77;
        }
        f75();
        const t65 = this.constructor;
        new t65();
        const v82 = (404).__lookupSetter__;
        try { new v82(); } catch (e) {}
        super[this];
    }
}
const v85 = new C70();
function F86(a88, a89, a90) {
    if (!new.target) { throw 'must be called with new'; }
    function f91() {
        return Math.asin(Math);
    }
    %PrepareFunctionForOptimization(f91);
    f91();
    %OptimizeFunctionOnNextCall(f91);
    f91();
}
new F86(F86, F86, F86);
const v97 = [C70,C70,C70];
try {
    v97.length = v85;
} catch(e98) {
    new Int8Array([0.600959953156498,1.0,-Infinity]);
    function f102() {
        return f102;
    }
    const v103 = f102.arguments;
    for (let v104 = 0; v104 < 5; v104++) {
        Int8Array[2] = Array(36862, v103, v104 & v104);
    }
}
