const v0 = [-2.2250738585072014e-308,9.996930055560494,37995.24453874573,2.220446049250313e-16,0.9883316169172133,-4.0,-4.0];
const v1 = [1000.0];
const v2 = [-794727.1194998564,0.7926452381060185,-5.471158441263482e+307,1000000000.0,-1.0168531713301938e+308];
class C3 {
    constructor(a5, a6, a7) {
        super(a5);
    }
    /*
    constructor(a9) {
        v2[-2] = this;
        const v10 = v2 == v0;
        const v11 = v10 ? v2 : v0;
        try {
            let {"length":v12,} = v0;
            try { this.fround(a9, v12, v10, this, v12); } catch (e) {}
            v1["includes"](v12, v12);
            const t15 = "includes";
            t15[1] = a9;
            this.h = v11;
        } catch(e16) {
        }
    }
    */
    static [v1] = v2;
    [v1];
    9 = v0;
}
const v17 = new C3(v1);
new C3(v2);
const v19 = new C3(C3);
const v24 = new Uint16Array(Uint16Array);
class C25 {
    #p(a27, a28, a29, a30) {
    }
    constructor(a32, a33) {
        try {
            v24.#p();
        } catch(e35) {
        }
    }
}
const v36 = [4.316281544825209];
parseInt("pop");
new Int8Array(770);
[-834.2586529031325];
[-3.9006904590911135e+307,1.4101854561525012e+307,-693968.2795006186,0.0,-1000.0,-4.0,-6.75778491614214,-1.6496328747319024e+307];
[56170.52982279309,-1.1704102608914144e+307,-2.0,-Infinity,-2.0];
if ("log1p") {
}
-256n >> -256n;
v2.length;
C3[2735];
[v17,v19,v36,v1];
[v19,1000000000000.0,v2,v1,v0];
const o64 = {
    m(a54) {
        3938 & 3938;
        Int8Array.name = Int8Array;
        const v58 = new Int8Array(3938);
        let v59 = 3;
        let v60 = 0;
        v60 >> v60;
        for (let i = 0; i < 5; i++) {
            [...v59] = v58;
            v60++;
        }
        const o63 = {
        };
        o63.h = o63;
    },
};
([3.4890473589784586e+307 === Uint8Array]).constructor;
try { Float64Array.from(null); } catch (e) {}
