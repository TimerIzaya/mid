function f0() {
}
const v1 = [f0,f0,f0,f0,f0];
const v2 = [f0];
v2[Symbol.toPrimitive] = f0;
[v1,v2,v2,f0];
/s/im;
/gxyz{0,1}?/gvsy;
const v8 = /\P{scx=Greek}(NL[x\dz]+)/usy;
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this.constructor;
    try { new v13(); } catch (e) {}
    a11 & a11;
}
const v16 = new F9();
function f17() {
    try {
        v16.length = 2;
    } catch(e19) {
    }
    return Symbol;
}
v16.constructor = f17;
try { v8.test(v2); } catch (e) {}
v8.unicodeSets = v8;
const v23 = [];
try {
    v2.h = v23;
} catch(e25) {
    "XsWPw" ** e25;
}
class C28 {
    constructor(a30) {
    }
}
function f31() {
    const v32 = [];
    Math.atan2(v32, -40875);
    const v37 = new WeakSet();
    const o38 = {
        "e": v32,
        "b": v37,
    };
    let v39 = -9223372036854775808n;
    v39 %= 45725n;
    return 45725n;
}
f31();
try { ("536870889").codePointAt(v1); } catch (e) {}
try { ("e").toUpperCase(); } catch (e) {}
3045 ^ 3045;
3045 >> 3045;
const v51 = new Float64Array(3045);
1.0 & 1.0;
const v55 = v16.constructor;
try { new v55(); } catch (e) {}
new Int32Array(257);
try { ("toReversed").strike(); } catch (e) {}
const v61 = v51["toReversed"](1.0, ...v51, ..."toReversed");
class C62 {
}
Math.atan2(-Infinity, 536870887);
try { v61.slice(v1, v2); } catch (e) {}
const v69 = new Int32Array();
v69.toString = f31;
function f70() {
    return Math.acos(v69);
}
f70();
%OptimizeFunctionOnNextCall(f70);
for (let i = 0; i < 5; i++) {
    function F74(a76, a77) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f78() {
        return "POSITIVE_INFINITY";
    }
    function f79(a80) {
        for (let v81 = 0; v81 < 100; v81++) {
            Symbol("1073741824");
        }
    }
    Object.defineProperty(F74, "f", { writable: true, configurable: true, get: f78, set: f79 });
    F74.f = F74;
}
