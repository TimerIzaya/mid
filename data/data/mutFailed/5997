function f0() {
    const o11 = {
        get h() {
            this[218];
            try {
                super.replace(1000000.0, -57354, 1698749821, 127);
            } catch(e10) {
            }
            return 1000000.0;
        },
        [1000000.0]: -57354,
        "f": 1000000.0,
    };
    return o11;
}
const v12 = f0();
f0();
const v14 = f0();
const v19 = new v14();
class C20 {
    constructor(a22, a23, a24, a25) {
        let v26;
        try { v26 = v19.clear(); } catch (e) {}
        let v27;
        try { v27 = this.concat(v26, a23); } catch (e) {}
        for (let v28 = 0; v28 < 32; v28++) {
            v27[4.0 + v28] = v28;
        }
    }
    h;
    f;
    static 150 = v12;
    [-2];
}
const v31 = new C20(v14, -873736.0639682427, -6.694913198749424e+307, -6.694913198749424e+307);
new C20(C20, -873736.0639682427, -873736.0639682427, -6.694913198749424e+307);
new C20(v31, -873736.0639682427, -6.694913198749424e+307, 4.0);
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e39) {
    }
}
function f40(a41, a42) {
    function f44(a45) {
        a41 ^ a42;
        return a45;
    }
    this.onmessage = f44;
}
const o49 = {
    "type": "function",
};
new Worker(f40, o49);
new BigInt64Array(2147483649);
