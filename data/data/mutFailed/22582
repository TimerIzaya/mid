new Float32Array(115);
new BigInt64Array(128);
new Float64Array(555);
[5.0];
[0.2778729086001164,0.04567666645192592,4.0,851107.0814215029,-8.676858795659722];
[-1000000000.0,-844312.2987488118];
const v12 = /(J5a{0,1}?)/y;
class C13 {
    static {
        for (let v15 = 0; v15 < 25; v15++) {
            const v16 = [601759695];
            const v17 = [1073741824,1073741823,1376142744,1073741825];
            function f18(a19, a20, a21, a22) {
                ~a19;
                try { a19(); } catch (e) {}
                (a21 << a21) % this;
                function f27() {
                    return a19;
                }
                const v29 = new this();
                BigUint64Array.length;
                const v33 = BigUint64Array * 536870887;
                let v34 = v33 - v33;
                v34++;
                const v36 = v33 ** v33;
                try { Number(v12); } catch (e) {}
                Number.isNaN(v36);
                const v41 = v29.buffer.__defineGetter__;
                try { v41(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f27);
                let v44;
                try { v44 = v17["find"](..."find", a22, ...v16); } catch (e) {}
                return v44;
            }
            for (let v45 = 0; v45 < 5; v45++) {
                f18(this, v45);
            }
        }
    }
}
