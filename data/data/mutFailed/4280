const v2 = -Infinity;
class C3 {
    e;
    c;
    static {
        this.b = this;
        let v5;
        try { v5 = new this(); } catch (e) {}
        v5.f;
        let v8;
        try { v8 = Math.cos(C3); } catch (e) {}
        v8--;
        const v11 = -11 - -11;
        v11 != v11;
        1000000.0 % 1000000.0;
        Math.cos(1000000.0);
        const v15 = +this;
        v15 & v15;
    }
    f;
}
try { new C3(); } catch (e) {}
let v18;
try { v18 = C3.toString(); } catch (e) {}
const v19 = v18?.constructor;
try { new v19(C3); } catch (e) {}
const v21 = new C3();
const v22 = new C3();
v22.e;
const v24 = new C3();
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    a29--;
    a30.f = a30;
    a28.e = a28;
    a30.b = a30;
    a29 >>> a29;
    try {
        this.a = v22;
    } catch(e33) {
    }
    try {
        this.e = v22;
    } catch(e34) {
    }
    const t45 = "undefined";
    t45[8] = "undefined";
    class C37 {
        static {
            let v39;
            try { v39 = this.constructor(this); } catch (e) {}
            v39.arguments = v39;
            this.f += "MAX_SAFE_INTEGER";
        }
        static #a = "undefined";
    }
    for (let v40 = 0; v40 < 5; v40++) {
        v40 & v40;
        const v43 = "p" + v40;
        let v44;
        try { v44 = v43.toLocaleLowerCase(); } catch (e) {}
        v44[1] = v44;
        let v45;
        try { v45 = v43.replaceAll(v2, v24); } catch (e) {}
        let v46;
        try { v46 = v45.sup(); } catch (e) {}
        v46[2] = v46;
        const t67 = "undefined";
        t67[v43] = v40;
    }
    try {
        this.h = a28;
    } catch(e47) {
    }
}
const v48 = new F25(1000000.0, v22, 1000000.0, v22);
const v49 = v48.a;
new F25(1000000.0, F25, C3, v21);
const v51 = new F25(v2, v24, v24, v24);
v51.h = v51;
const v52 = v51.h;
v52.a = v52;
let v54;
try { v54 = ("oeom").includes(v22); } catch (e) {}
v54 && v54;
v54 || v54;
const t84 = "d";
t84[0] = "d";
const t88 = "d";
t88[0] = "d";
class C58 {
    static #e = "d";
    static 4;
    8;
    static h = "d";
    584 = "d";
    #a;
}
try { new C58(); } catch (e) {}
try { new C58(); } catch (e) {}
let v61;
try { v61 = new C58(); } catch (e) {}
v61[584];
const v63 = new C58();
v63[8] = v63;
const v64 = new C58();
v64[584] = v64;
let v65;
try { v65 = v64.toString(); } catch (e) {}
const v66 = v65?.slice;
try { new v66(v49, v49); } catch (e) {}
const v68 = new C58();
v68[584];
const v70 = v68[584];
!(v70 == v70);
Uint8ClampedArray.f = Uint8ClampedArray;
2308 != 2308;
Int16Array.name = Int16Array;
let v78;
try { v78 = new Int16Array(v52, 1000000000.0, Int16Array); } catch (e) {}
const v79 = v78?.constructor;
try { new v79(v18, v18, v2); } catch (e) {}
const v81 = new Int16Array(2308);
v81[1259];
const v86 = ("async")?.search;
try { new v86(v81); } catch (e) {}
const t126 = "async";
t126.e = "async";
const o88 = {
    "execution": "async",
    "type": "minor",
};
o88.type = o88;
gc(o88);
gc();
