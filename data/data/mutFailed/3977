class C3 {
    [-2.0];
    constructor(a5, a6) {
        function f7(a8, a9) {
            a5 = this;
            Set.__defineSetter__(Set, Set);
            return "asyncIterator";
        }
        this[Symbol.matchAll] = f7;
        Object.defineProperty(a5, "valueOf", { writable: true, value: f7 });
        function f14(a15, a16) {
            class C17 {
                static {
                    const v19 = super[this];
                    try { v19.join(C17, C17, v19); } catch (e) {}
                }
            }
            return a6;
        }
        a6[Symbol.match] = f14;
        a5 == a5;
        const v26 = [[a6 >>> a6,a5],a5,-2.0,5.0];
        [v26,v26,v26,5.0,a5];
        a6 & 5.0;
        try { ("asyncIterator").matchAll(a5); } catch (e) {}
        let v30;
        try { v30 = this.hasOwnProperty(-2.0); } catch (e) {}
        v30 || v30;
        super[-2.0];
    }
    static #e;
    static [-2.0];
    static #b = "asyncIterator";
    #h = 5.0;
    #p(a35) {
        const v36 = this.h;
        try {
            v36.#e;
        } catch(e38) {
        }
        return -2.0;
    }
    b;
    static #d;
}
try { new C3("asyncIterator", -2.0); } catch (e) {}
const v40 = new C3(C3, 5.0);
v40.b = v40;
const v41 = new C3(v40, v40);
function f42(a43, a44) {
    return "asyncIterator";
}
Object.defineProperty(v41, "constructor", { writable: true, configurable: true, enumerable: true, value: f42 });
const v48 = v41?.constructor;
try { new v48(v40, C3); } catch (e) {}
new C3(v40, C3);
541 >= 541;
541 - 541;
BigInt64Array.prototype = BigInt64Array;
new BigInt64Array(541);
const v58 = new Int8Array(2339);
v58.toString = f42;
v58[259] = v58;
-1000;
1000 >>> 1000;
new BigUint64Array(1000);
const v64 = -Infinity;
v64 - v64;
Math.exp(v64);
