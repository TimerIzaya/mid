const v2 = new Uint32Array(22);
new Int16Array(2467);
const v8 = new Float32Array(5);
try { v8.findIndex(2467); } catch (e) {}
const v11 = [null,Float32Array];
v11[1] = v11;
const v12 = [v11,v11,22];
v12[1];
const v14 = [v8,v12,v12,v2,5];
function f15(a16, a17) {
    try { a17.map(Float32Array); } catch (e) {}
    const o29 = {
        ...v12,
        "g": v2,
        toString(a20, a21) {
            let [v22] = a21;
            a16[v2] >>>= 2467;
            a21 && NaN;
            --v22;
            Math.sin(536870887);
            return a16;
        },
        "f": a16,
    };
    return o29;
}
try { f15(v14, 2467); } catch (e) {}
f15(v14, v12);
f15(v14, v12)[1];
const v34 = f15(v14, v11);
try { new Date(v14, v34, f15, v14, v34, 22, v14); } catch (e) {}
class C37 {
    static {
        for (let v39 = 0; v39 < 25; v39++) {
            function f40() {
            }
            const v41 = [601759695];
            try { v41.push(v41); } catch (e) {}
            const v43 = [1073741824,1073741823,1376142744,1073741825];
            function f45(a46, a47, a48, a49) {
                arguments.length;
                for (let i58 = (() => {
                        const v54 = new BigInt64Array(980);
                        !v54.includes(980);
                        return 0;
                    })();
                    i58 < 2;
                    i58 >>> i58, i58++) {
                    try {
                        arguments.g = i58;
                    } catch(e65) {
                    }
                }
                function f66() {
                    return a46;
                }
                const v67 = f40();
                const v69 = new Int8Array();
                4 + 4;
                const v73 = new Uint32Array(4);
                v73.BYTES_PER_ELEMENT = v73;
                [v73];
                const v77 = BigUint64Array * 536870887;
                v77 ** v77;
                function f79(a80, a81) {
                    return v67;
                }
                f79();
                const v83 = v69.buffer;
                v83.byteLength;
                Object.defineProperty(v83, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v83.slice(2147483648);
                %OptimizeFunctionOnNextCall(f66);
                let v89;
                try { v89 = v43["find"](..."find", a49, ...v41, ...v43, ...522675525n); } catch (e) {}
                Symbol("find");
                const v93 = new Uint8ClampedArray();
                const o94 = {
                    ...v93,
                };
                !(v89 <= a48);
                return arguments;
            }
            for (let v97 = 0; v97 < 5; v97++) {
                v97--;
                f45();
            }
        }
    }
}
