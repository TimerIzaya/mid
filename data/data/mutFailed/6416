[-414.530326617121,1e-15,0.5000771701400591,300.3797158736877,1.1364402865025865e+308,2.1795603688106997,-9.259997780927616,226.58493522396725,-5.0,356.518652259718];
const v1 = [-1000000.0,-476254.0736832259,-3.0,-633261.6998722272,-1000000.0,2.6366721852290417e+307,768.0893043206333,1000000.0,-3.126498967725233];
[-1000000000.0,-8.938984408615987e+306];
function F3() {
    if (!new.target) { throw 'must be called with new'; }
    const v5 = this.constructor;
    try { new v5(); } catch (e) {}
    let v7;
    try { v7 = this.valueOf(); } catch (e) {}
    v7.length = v7;
    try {
    } catch(e8) {
    }
}
gc();
const v14 = [-Infinity,0.32846642868810805,522897.9759496555,-Infinity,-1.7976931348623157e+308,Infinity,-91739.17504563625,-5.712078980390993,-4.0,-362.4687316307243];
function f15(a16, a17, a18) {
    a16[2];
    a17 << a17;
    let v21;
    try { v21 = a16.lastIndexOf(v14); } catch (e) {}
    v21 / v21;
    try { a18.toString(); } catch (e) {}
    const o30 = {
        [-4096]: -8717,
        "d": a17,
        __proto__: v14,
        "a": a16,
        "maxByteLength": -4096,
        ...a16,
        get d() {
            this[1] /= -8717;
            let v26 = -908890636;
            return Math.log(this & --v26);
        },
        "f": a16,
        "h": a18,
        "g": a18,
        "e": a17,
        1073741823: a17,
        "b": a16,
    };
    return o30;
}
const v32 = new Date(Date);
function F33(a35) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = this.constructor;
    try { new v36(); } catch (e) {}
    this.f = v32;
}
const v39 = [20785,4096,5];
v39[536870889];
const v41 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v42;
try { v42 = v41.some(); } catch (e) {}
function f43(a44, a45, a46, a47) {
    const o55 = {
        toString(a49, a50, a51) {
            try { this.toString(a50, v42, a50); } catch (e) {}
            a50++;
            a46[a45] = a44;
        },
    };
    return o55;
}
new Uint32Array(1);
new BigInt64Array(1);
const v64 = [9];
function f67() {
    const v68 = [f67,f67];
    function f69(a70) {
    }
    const v72 = [0];
    [[Reflect.construct(f69, v72, Uint8ClampedArray),v72],9];
    [v64,Reflect];
    try { v1.findIndex(); } catch (e) {}
    class C79 extends v68.constructor {
    }
    const v80 = new C79();
    v80?.constructor;
    return v68;
}
new Int8Array(8);
Reflect.construct(Uint16Array, [v32]);
new Uint8ClampedArray(339);
function f89() {
    class C91 extends Array {
    }
    new Float64Array(Float64Array);
    return f89;
}
function f94() {
    return f89 == f94;
}
function f97() {
    return 3906;
}
eval(v39);
%PrepareFunctionForOptimization(f94);
f94();
class C101 {
    static get b() {
    }
    static {
        for (let v104 = 0; v104 < 25; v104++) {
            function f105() {
            }
            const v106 = [601759695];
            const v107 = [1073741824,1073741823,1376142744,1073741825];
            function f109(a110, a111, a112, a113) {
                for (let i116 = 0; i116 < 2; i116++) {
                    try {
                        arguments.g = i116;
                    } catch(e122) {
                    }
                }
                function f123() {
                    return a110;
                }
                f105();
                const v126 = new Int8Array();
                new Uint32Array(4);
                [C101];
                const v133 = BigUint64Array * 536870887;
                v133 ** v133;
                function f135(a136, a137) {
                    return 1;
                }
                f135();
                Object.defineProperty(v126.buffer, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                (536870887).slice(2147483648);
                %OptimizeFunctionOnNextCall(f123);
                let v144;
                try { v144 = v107["find"](..."find", a113, ...v106, ...v107, ...522675525n); } catch (e) {}
                Symbol("find");
                const v148 = new Uint8ClampedArray();
                const o149 = {
                    ...v148,
                };
                v144 <= a112;
                return arguments;
            }
            for (let v151 = 0; v151 < 5; v151++) {
                f109();
            }
        }
    }
}
new C101();
const v156 = new Uint8Array(9);
v156.lastIndexOf(Math.cbrt(7));
%OptimizeFunctionOnNextCall(f94);
f94();
