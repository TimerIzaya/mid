function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = "toStringTag";
    } catch(e6) {
    }
    try {
        this.d = "toStringTag";
    } catch(e7) {
    }
    try {
        this.h = "unscopables";
    } catch(e8) {
    }
}
class C9 {
}
for (let i12 = 0, i13 = 10;
    i12 < i13;
    (() => {
        const v17 = [601759695];
        const v18 = [1073741824,1073741823,1376142744,1073741825];
        function f20(a21, a22, a23, a24) {
            function f25(a26, a27) {
                return i12;
            }
            f25(v18, C9);
            try { v18["find"](..."find", a24, ...v17, ...v18, ...522675525n); } catch (e) {}
            const v32 = new Date();
            const v34 = new Set();
            v34.add(v32);
            let [v36,,...v37] = v34;
            v36.setUTCMilliseconds();
            return a23;
        }
        for (let v39 = 0; v39 < 10; v39++) {
            f20(v39, f20, i12, v39);
        }
        i12++;
    })()) {
}
new F3("toStringTag");
new F3("toStringTag");
new F3("bigint");
[2,-555362455,-7,-40327,256,16,-4294967295,1684611216,-7,-65535];
[1553129872,0,-9,-53085,40055,-5388,-2147483648,1073741825,129,5];
[6];
new Uint16Array(2882);
new Uint8ClampedArray(6);
new Uint16Array(10);
function F61(a63) {
    if (!new.target) { throw 'must be called with new'; }
    function f64(a65, a66, a67) {
        function f69(a70) {
            return a65;
        }
        a66 > a63;
        const v72 = new f69();
        const v73 = v72.g;
        const v75 = new Uint16Array(209);
        v75[145] = v73;
        f69 && a65;
        return a63;
    }
    Worker(f64);
}
Uint16Array.trimLeft().strike();
BigInt(4.0);
