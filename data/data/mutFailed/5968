const v3 = [9007199254740992,-65537];
function f4() {
    function f5(a6) {
        a6 <<= -65537;
        let v7;
        try { v7 = v3.map(a6, v3); } catch (e) {}
        return v7;
    }
    return f5;
}
function f8(a9) {
    v3.length;
}
Object.defineProperty(v3, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f4, set: f8 });
const v13 = [v3,v3];
try { v13.entries(268435440, 268435440); } catch (e) {}
const v15 = [v13,v13,-65537,9007199254740992,9007199254740992];
v15[2499] = 268435440;
class C16 {
    constructor(a18, a19, a20) {
        a18 !== a18;
        a20[2499] = a20;
        try {
            v13.valueOf = this;
        } catch(e22) {
        }
    }
    [268435440];
    [v3] = v13;
    #b = v13;
    static e = v13;
    static 0;
    [9007199254740992];
    #g = 9007199254740992;
}
C16.length = C16;
const v23 = new C16(268435440, v13, v15);
new C16(268435440, v13, v3);
const v25 = new C16(9007199254740992, v3, v3);
const v26 = v25[268435440];
new Uint32Array(0, 268435440);
const v32 = new BigInt64Array(-38883);
v32[1448];
const v36 = new Uint8ClampedArray(3754);
v36.growable;
Uint16Array[1] = v26;
try { new Uint16Array(0, 0, v23); } catch (e) {}
const v40 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
this[Symbol.toPrimitive] = f8;
v40[10000] = this / this;
