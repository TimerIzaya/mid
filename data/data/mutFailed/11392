function f0() {
    ("byteLength").length;
    new BigUint64Array(7);
    const v10 = new BigInt64Array(155);
    const v13 = new Uint16Array(235);
    const o24 = {
        268435441: -10,
        "d": 235,
        [-1]: Uint16Array,
        1073741823: BigUint64Array,
        "a": v10,
        "e": v13,
        "h": "byteLength",
        get d() {
            let v15;
            try { v15 = this.getFloat64(this, this, "byteLength"); } catch (e) {}
            "1783912981" >>> v15;
            const o19 = {
                "maxByteLength": 3999,
            };
            const v21 = new SharedArrayBuffer(5, o19);
            new Float32Array(v21);
            return o19;
        },
    };
    return o24;
}
f0();
f0();
f0();
[-676286.6763690528,-1000000000.0,Infinity,-2.220446049250313e-16,8.891489214502208,-1000000000.0,1.7976931348623157e+308];
[NaN];
let v33 = 0;
while (v33 < 7) {
    v33++;
}
[-5.500719724132774,1000000.0,-160.0881662960403,-8.033276661721469e+307,Infinity,-88.77995919643001,-1.2688895349333678e+308,1000000000.0,-1.4579002774633952e+308];
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    function f46() {
        Math.toString = f46;
        return Math.asin(Math);
    }
    %PrepareFunctionForOptimization(f46);
    f46();
    %OptimizeFunctionOnNextCall(f46);
    f46();
}
new F41(F41, F41, F41);
