const v1 = new WeakMap();
NaN | NaN;
NaN + NaN;
class C7 extends WeakMap {
    static h = NaN;
    #g = v1;
    #valueOf(a9) {
        this[0.6307254829790634] = this;
        const o13 = {
            "execution": "sync",
            "type": "minor",
        };
        return gc(o13);
    }
}
let v15;
try { v15 = C7.call(NaN); } catch (e) {}
const v16 = new C7();
try { v16.has(0.6307254829790634); } catch (e) {}
new C7();
const v19 = new C7();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
class C22 extends C7 {
    o(a24, a25, a26, a27) {
        a24.prototype = a24;
        a25--;
        try { a27.set(C7, a27); } catch (e) {}
        a24 >>>= Infinity;
        /FQ[\ca]/gvisy;
        const t28 = /\P{sc=Greek}/is;
        t28.dotAll = NaN;
        /M(?:ab)|cde/gdmsy;
        return Infinity;
    }
    static [C7];
    [-2];
    [v16] = v19;
    #a;
}
C22.e = C22;
try { new C22(); } catch (e) {}
const v34 = new C22();
try { v34.constructor(); } catch (e) {}
const v36 = new C22();
const v37 = v15?.constructor;
try { new v37(); } catch (e) {}
try { v36.o(C22, 0.6307254829790634, C22, v34); } catch (e) {}
const v40 = new v16();
const v41 = v40?.constructor;
try { v41.toString(); } catch (e) {}
let v43;
try { v43 = new v41(); } catch (e) {}
try { v43.delete(0.6307254829790634); } catch (e) {}
function* f48(a49) {
    yield [9007199254740990,-4294967296,-1205995130,-12581,9];
    return -1.7570084557226905e+308;
}
try { new f48("object"); } catch (e) {}
512 >> 512;
512 ^ 512;
