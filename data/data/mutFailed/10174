function f3(a4) {
    const o5 = {
        ["o"]: a4,
        "c": "-1",
        "g": a4,
        __proto__: a4,
        234: "h",
        ..."o",
        "d": "-1",
        3: "h",
        "h": "-1",
        ["h"]: a4,
    };
    return o5;
}
f3("-1");
f3("-1");
f3("-1");
[-9785590,129,4294967295,-14,30556,12533,1073741824];
[-8040,-9223372036854775807,-637264941,868138400,11,27202,3,1287386041,0,1];
[-2147483647,1073741824,42618,1073741824,-13138];
const v21 = new Uint8ClampedArray(16);
v21[10] = v21;
const v23 = -1322;
const v25 = new Uint8ClampedArray(1322);
const v26 = v25[315];
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    function f33() {
        new Uint16Array(269);
        new Uint32Array(129);
        new Int8Array(0);
        return this;
    }
    this[Symbol.toPrimitive] = f33;
    try {
        this.a = "536870889";
    } catch(e45) {
    }
    try {
        this.b = a32;
    } catch(e46) {
    }
}
new F27(1073741824n, 1073741824n, 257n, "6");
const v48 = new F27(1073741824n, 257n, 257n, v23);
const v49 = new F27(v26, 257n, 257n, "536870889");
v49[Symbol.toPrimitive] = f3;
new BigUint64Array(6);
3768 >>> 3768;
true || true;
+-65537;
function F62(a64) {
    if (!new.target) { throw 'must be called with new'; }
}
const v66 = new BigInt64Array(4046);
v66[123];
-115;
function f71(a72, a73) {
    a72++;
    a73 + a73;
    const v76 = a72++;
    v76 >> v76;
    try {
        v48.toString = a73;
    } catch(e78) {
    }
    Object.defineProperty(v49, v49, { configurable: true, enumerable: true, get: f71 });
    let o80 = {
        "d": a72,
        ...a72,
        get e() {
            return a73;
        },
    };
    [,...o80] = v66;
    a73[4046];
    const o84 = {
        "maxByteLength": 3035,
    };
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f71(4046, 3768);
try { Uint8ClampedArray.bind(f71); } catch (e) {}
