const v3 = /a[a]/viy;
const v4 = /(?:ab){4,7}/gvdisy;
v4.c = v4;
const v5 = /(kE\c!)/gy;
~(-4096);
let v10;
try { v10 = new BigInt64Array(0.1403462290130345, v3, BigInt64Array); } catch (e) {}
try { v10.reduceRight(v3); } catch (e) {}
let v12;
try { v12 = new BigInt64Array(2.220446049250313e-16, v4, v4); } catch (e) {}
let v13;
try { v13 = v12.slice(BigInt64Array, v12); } catch (e) {}
try { v13.isPrototypeOf(v12); } catch (e) {}
let v15;
try { v15 = v12.entries(); } catch (e) {}
try { v15.next(); } catch (e) {}
let v17;
try { v17 = v15.next(); } catch (e) {}
const v18 = v17?.__lookupSetter__;
try { new v18(v4); } catch (e) {}
const v20 = new BigInt64Array(4096);
try { v20.slice(4096, v10); } catch (e) {}
let v22;
try { v22 = v20.join(0.1403462290130345); } catch (e) {}
v22[32220] = v22;
try { Uint32Array.bind(v15); } catch (e) {}
const v26 = new Uint32Array(128);
try { v26.indexOf(v12); } catch (e) {}
let v28 = 4;
const v29 = v28 !== v28;
v29 && v29;
let v31 = v28 * v28;
v31--;
const v33 = v28--;
const v34 = v33 + v33;
try { new Uint32Array(Uint32Array, Uint32Array, v5); } catch (e) {}
new Uint32Array(v28);
const v39 = /1(?:a?)?/gvdm;
v39.dotAll = v39;
v39.e = v39;
const v40 = /(\9Am)/dy;
let v41;
try { v41 = v40.toString(); } catch (e) {}
try { v41.slice(v34, v12); } catch (e) {}
9223372036854775807n << 9223372036854775807n;
