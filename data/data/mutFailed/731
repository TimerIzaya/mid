function f0() {
    const o15 = {
        ..."52805",
        1284: "52805",
        "h": -2,
        ..."52805",
        ["52805"]: "52805",
        ..."52805",
        129: 0.9652924775108548,
        ..."52805",
        "b": "52805",
        o(a5) {
            0.9652924775108548 & a5;
            Object.defineProperty(this, this, { configurable: true, enumerable: true, get: f0 });
            f0 === "52805";
            new WeakMap();
            try { a5.clz32(-65536, -2, 0.9652924775108548); } catch (e) {}
            return 0.9652924775108548;
        },
    };
    return o15;
}
f0();
const v17 = f0();
f0();
const v21 = new Uint8Array(512);
switch (v17) {
    default:
        try {
            v21.toString = f0;
        } catch(e23) {
        }
        break;
}
new Int8Array(0);
new Uint8Array(868);
Uint16Array[2] = Uint16Array;
function F30(a32) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a32;
}
const v33 = [];
const v34 = [v33,v33,v33,v33,v33];
try { v33.reduce(v34); } catch (e) {}
const v36 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
this.toString = f0;
v36[10000] = this - this;
