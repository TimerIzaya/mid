class C3 {
    #g;
    static #toString(a5, a6) {
        const o7 = {
        };
        try {
            a5.c = a5;
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.c = a5;
            o9.b = a5;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.c = a5;
            o11.b = a5;
            o11.a = this;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.c = a5;
            o13.b = a5;
            o13.d = -2.0;
        } catch(e14) {
        }
        return a5;
    }
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
const v18 = [507.82610548884395,4.0,-Infinity,2.0,1.7976931348623157e+308];
const v19 = [-507207.93457240274,1000.0,-1e-15,976.9516461411217,0.6441719825596224,5.435991988206233];
const v20 = [-1e-15,Infinity,NaN,1000000000000.0,1000000000.0,-7.509481095566075,1.0];
class C21 extends C3 {
    constructor(a23, a24, a25, a26) {
        super();
        let v27;
        try { v27 = v20.map(v16); } catch (e) {}
        super.f = v27;
    }
    static c = v20;
    static #a = v15;
    d = -2.0;
    #c;
    [-1] = C3;
    static [-2.0] = v16;
    [v16];
    1000 = v17;
}
new C21(v16, v16, 0.12920962333537533, v20);
new C21(v19, v20, 0.6754037778816107, v17);
const v30 = new C21(v18, v19, -2.0, v17);
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    function f34(a35, a36) {
        const o38 = {
            4294967296: 1733353236,
        };
        return v17;
    }
    this[Symbol.toPrimitive] = f34;
    try {
        this.g = F32;
    } catch(e41) {
    }
    try {
        this.f = false;
    } catch(e42) {
    }
    try {
        this.b = false;
    } catch(e43) {
    }
}
const v44 = new F32();
function f45(a46, a47) {
    v20.p;
    Math.acosh(65535);
    return v17;
}
v44[Symbol.toPrimitive] = f45;
const v54 = new F32();
const v55 = new F32();
v55[Symbol.toPrimitive] = Symbol;
const v58 = [5.627129677109545e+307,850582.6346538318,-2.0,-Infinity,289.0197571670685,187.7306401241658,1e-15];
[] != -2147483647n;
try { v58.join(F32); } catch (e) {}
const v63 = [0.6612384037511738,2.2940008033736596];
v63.valueOf = f45;
try { v63.push(v55); } catch (e) {}
const v65 = [1000000000000.0,-1000000000000.0,3.173585042601135e+307,-5.0,-1e-15];
v65[4];
function f67(a68, a69, a70, a71) {
    a70[Symbol.toPrimitive] = Symbol;
    const v74 = a68?.g;
    function f75() {
        function f76() {
            return f76;
        }
        const o77 = {
            __proto__: f76,
            "e": f76,
        };
        return F32;
    }
    v74[Symbol.toPrimitive] = f75;
    try { new v74(); } catch (e) {}
    a69[2] = a69;
    let v81 = a71?.g;
    v81.toString = Symbol;
    Object.defineProperty(v81, v55, { set: f67 });
    v81 %= v63;
    const o82 = {
        "apply": f67,
        "call": f67,
        "deleteProperty": f67,
        "get": f67,
        "getOwnPropertyDescriptor": f67,
        "has": f67,
        "isExtensible": f67,
        "preventExtensions": f67,
        "set": f67,
    };
    new Proxy(v44, o82);
    try { new v81(); } catch (e) {}
    const o93 = {
        __proto__: v63,
        "h": v65,
        ...a68,
        [a71](a87, a88) {
            try { new a87(a70, a69, a71, a88); } catch (e) {}
            return 0.12920962333537533;
        },
        "c": v54,
        268435439: a68,
    };
    return o93;
}
f67(v54, v65, v54, v44);
f67(v44, v58, v44, v54);
f67(v54, v58, v44, v55);
const v99 = 5 ^ 5;
try { new Int8Array(5, 182, false); } catch (e) {}
-22631;
function f105() {
}
function f106() {
    const o111 = {
        "b": f105,
        valueOf() {
            try { this.b(); } catch (e) {}
            try { v99.b(); } catch (e) {}
            [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        },
    };
    o111.constructor = f67;
    try { o111.b(); } catch (e) {}
    return o111;
}
const v113 = f106();
try { v113.b(); } catch (e) {}
const v115 = v113?.b;
try { v115(); } catch (e) {}
const v117 = new v115();
const v118 = v117?.toLocaleString;
try { new v118(); } catch (e) {}
new Uint8Array(268435440);
const v124 = ("function").length;
v124 == v124;
const v126 = f106();
v126.constructor = f105;
function F127(a129, a130) {
    if (!new.target) { throw 'must be called with new'; }
    a129.constructor = f105;
    try { a130.b(); } catch (e) {}
    try { v30.valueOf(); } catch (e) {}
    const v133 = a129?.constructor;
    try { new v133(a129, a129); } catch (e) {}
    new Uint16Array(v124);
}
new F127(v126);
