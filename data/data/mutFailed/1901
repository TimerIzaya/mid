function f3(a4) {
    a4.valueOf = f3;
    const v5 = a4--;
    a4 >>> a4;
    const o15 = {
        "a": -1.0,
        "e": v5,
        get h() {
            const o10 = {
                "maxByteLength": 512,
            };
            const v12 = new ArrayBuffer(ArrayBuffer, o10);
            new BigInt64Array(v12);
            return BigInt64Array;
        },
    };
    function f16(a17, a18) {
        Date[-22872n] = Date;
        return Date;
    }
    o15.toString = f16;
    const v21 = o15?.hasOwnProperty;
    try { new v21(a4); } catch (e) {}
    return o15;
}
const v23 = f3(2.0);
const v24 = v23?.hasOwnProperty;
let v25;
try { v25 = new v24(v23); } catch (e) {}
v23.b = v23;
const v26 = f3(v23);
v26.b = v23;
const v27 = v26?.hasOwnProperty;
try { new v27(f3); } catch (e) {}
v26.b = v25;
const v30 = f3(-1000000000.0)?.hasOwnProperty;
try { new v30(v23); } catch (e) {}
const v32 = [183.059980199321,-6.633535358111913,1000000.0,317541.3560852471,-1000000.0,3.0];
[0.4805619494501556,3.0,1.7976931348623157e+308,0.6615056109707235,2.0,0.41097943481710175,-1e-15,1.0,1659.856632613577,-2.220446049250313e-16];
const v34 = [-2.2250738585072014e-308,2.2250738585072014e-308,1000000000.0];
try { v34.includes(-1000000000.0); } catch (e) {}
Set.name = v34;
const v37 = new Set();
try { v37.forEach(v37); } catch (e) {}
function f40(a41) {
    v26.h;
    try {
        v24.length = 5;
    } catch(e44) {
    }
    return v32;
}
Date[Symbol.toPrimitive] = f40;
Date[Symbol.toPrimitive] = Date;
new Date(Date);
