function f0() {
    const o10 = {
        ["yu9W"]: "yu9W",
        "f": -311.7888371966626,
        set g(a5) {
            let v6;
            try { v6 = new a5(this, -311.7888371966626); } catch (e) {}
            let v7;
            try { v7 = new a5(v6, -311.7888371966626, "yu9W", a5); } catch (e) {}
            try {
                super.p(-9007199254740990, v7, v6);
            } catch(e9) {
            }
        },
        "e": "yu9W",
        "b": -311.7888371966626,
        "a": "yu9W",
        "d": "yu9W",
    };
    return o10;
}
f0[Symbol.toPrimitive] = f0;
const v13 = f0();
const v14 = f0();
const v15 = f0();
function f16(a17, a18) {
    function f19(a20) {
        let v23 = 469253.0018126506;
        ~a20;
        Math.expm1(Symbol);
        ++v23;
        a20++ >> 536870912;
        return a17;
    }
    a18.toString = f19;
    try { a17.isPrototypeOf(v14); } catch (e) {}
    const o48 = {
        [a18](a31, a32, a33, a34) {
            this && v13;
            [5537,1886948263,19547,1073741824,-4,2067,54977];
            [8];
            [1000,3,536870888];
            return a17;
        },
        "b": v13,
        "g": v15,
        valueOf(a40, a41, a42, a43) {
            f0();
            %PrepareFunctionForOptimization(f0);
            f0();
            f0();
            %OptimizeMaglevOnNextCall(f0);
            f0();
            return a42;
        },
    };
    return o48;
}
f16.name;
f16(f16(v14, f0), v13).b;
f16(v14, v13);
let v54 = 127;
v54--;
new Uint8ClampedArray(v54);
139 >>> 139;
new Uint8Array(139);
Float32Array.d = Float32Array;
new Float32Array(6);
function f66(a67, a68, a69, a70) {
    try { a68.toString(); } catch (e) {}
    -a70;
    return arguments;
}
function f74() {
    const v75 = [0.6962759092984843];
    let v76 = [4.55590263310031,1e-15,2.220446049250313e-16,4.0,3.0];
    class C77 {
        constructor(a79, a80, a81, a82) {
            v76 = a80;
        }
    }
    new C77(v75, v75);
    return v75;
}
f66.toString = f74;
const v84 = f66(118, f66, 118, 118);
v84[2] = v84;
const t87 = f66(v84, f66, v84, 118).constructor;
const v87 = t87(118);
v87.toString = f16;
try { v87.toString(Float32Array); } catch (e) {}
const v89 = v87.toExponential(v84);
try { v89.valueOf(); } catch (e) {}
