const o16 = {
    toString(a2, a3, a4) {
        function f5() {
            const o6 = {
            };
            try {
                o6.d = a2;
            } catch(e7) {
            }
            try {
                const o8 = {
                };
                o8.d = a2;
                o8.g = "a";
            } catch(e9) {
            }
            try {
                const o10 = {
                };
                o10.d = a2;
                o10.g = "a";
                o10.f = a4;
            } catch(e11) {
            }
            try {
                const o12 = {
                };
                o12.d = a2;
                o12.g = "a";
                o12.e = a4;
            } catch(e13) {
            }
            return a4;
        }
        Object.defineProperty(a2, Symbol.toPrimitive, { get: f5 });
        return Symbol;
    },
};
class C19 {
}
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this.constructor;
    try { new v23(); } catch (e) {}
    new BigInt64Array();
}
new F20();
let v30 = 1502976945;
const o31 = {
    "f": F20,
    "c": v30,
};
try { o31["endsWith"](C19, "getDay", 1884174237); } catch (e) {}
new Int32Array();
("-536870912").normalize;
class C38 {
    static #p(a40) {
        this.#p();
    }
}
[0,true,true,1884174237];
[true,["undefined"],"undefined","a",0];
new Set();
v30--;
function F51() {
    if (!new.target) { throw 'must be called with new'; }
}
F51.fuck = F51;
Worker.log10();
/[^q\P{scx=Greek}]/gs;
