-163537653n & -163537653n;
let v6 = -12n;
try { new Int8Array(-9223372036854775807n, -163537653n, -9007199254740992); } catch (e) {}
const v11 = new Int8Array(1392);
const v12 = v11.lastIndexOf(16);
function f14() {
    function F24(a26) {
        if (!new.target) { throw 'must be called with new'; }
    }
    ([0.021647043302781555,982.9822277058386,68.55386187204931,-3.6548181863708407e+307,0.20797002453168356,1000000.0,-569469.7761417266,-3.877892592640821,Infinity,5.0]).toLocaleString();
    return v12;
    const v30 = async (a31, a32, a33) => {
        return Uint32Array;
    };
    return 109;
}
try { f14(); } catch (e) {}
v6 = -9223372036854775807n;
-9223372036854775807n % -9223372036854775808;
new Int32Array(89);
Uint16Array.prototype = Uint16Array;
const v46 = new Uint16Array(1024);
v46[375];
let v50;
try { v50 = BigUint64Array.bind(BigUint64Array); } catch (e) {}
const v51 = new BigUint64Array(2);
v51[0];
for (let i55 = (() => {
        0 & 0;
        return 0;
    })();
    i55 < 9;
    i55++) {
}
const v62 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f63(a64, a65, a66, a67) {
    Reflect.construct(a65, [a66,a67,a66,2], a64);
    a64 **= v50;
    v50 && Reflect;
    try {
        f63(true, Int8Array, undefined, f63);
        class C75 extends f14 {
            static g;
        }
        new C75();
        new C75();
        new C75();
    } catch(e79) {
    }
    const v80 = /(?:a*)+q(?<a>.)/guds;
    function f81(a82) {
        v62.constructor.isArray(v80);
        return v62;
    }
    for (let i87 = 0, i88 = 10; i87 < i88; i88--) {
        f81();
        for (let v96 = 0; v96 < 20; v96++) {
            a67.valueOf = a67;
        }
    }
    return v62;
}
for (let v97 = 0; v97 < 5; v97++) {
    v97 - v97;
    f63(v97, v97, v62, v97);
}
f63(v62, v62, v62, v62);
