function f0() {
    const o10 = {
        "a": "setTime",
        "g": "-4294967295",
        "b": "-4294967295",
        [1.2240575399533414e+308]: "setTime",
        __proto__: "-4294967295",
        "h": "-4294967295",
        ["-4294967295"](a5) {
            const t9 = "-4294967295";
            t9[a5] = a5;
            a5 >> this;
            try {
                this.fuck("setTime", 9n);
            } catch(e9) {
            }
            return "-4294967295";
        },
    };
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
class C14 extends f0 {
    constructor(a16) {
        super();
        let v17 = v13.__proto__;
        v17 &= f0;
        v13.a %= a16;
        a16.__proto__;
    }
    get b() {
        this in v12;
        return v13 >>> this;
    }
    static [f0] = v12;
    static #d;
    static 823683687 = v13;
}
const v22 = new C14(C14);
new C14(v22);
class C30 {
    set h(a32) {
        a32[-12] = 536870888;
        0 instanceof a32;
        129 !== this;
        let v35 = ~536870888;
        v35 = 129;
        const t48 = this[5];
        const v37 = delete t48?.[12];
        try {
        } catch(e38) {
        }
        const v41 = new Int8Array(520);
        for (let v42 = 0; v42 < 5; v42++) {
            v41.indexOf(v42);
        }
        super.stack = v37;
    }
    h;
    6;
    #a;
    f = -4;
    8;
    [-12];
}
new C30(0);
new C30();
new C30();
gc(v22);
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e53) {
    }
}
class C54 extends C30 {
    static {
    }
}
const o56 = {
};
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
try {
    function f60() {
    }
} catch(e61) {
}
const o62 = {
};
try {
    const o63 = {
    };
} catch(e64) {
    function f65(a66, a67, a68, a69) {
        const o73 = {
            n(a71, a72) {
            },
        };
    }
}
try {
    const o74 = {
    };
} catch(e75) {
}
try {
} catch(e76) {
    function f77(a78, a79, a80, a81) {
    }
}
new C14(C14);
[9,4096,-9007199254740990];
[1356173486,-65536,9301,24551,536870887,6,5,129,4294967296,1000];
const v85 = [1030955321,8,4096,-43681,-4096,15];
function f86() {
    return v85;
}
new BigUint64Array(64);
new undefined(1024);
new Uint8Array(257);
const v105 = new Uint8Array(1455254995, 1455254995, 128);
let v106;
try { v106 = v105.findLastIndex(v105, v105); } catch (e) {}
const o107 = {
    [v106]: Uint8Array,
};
