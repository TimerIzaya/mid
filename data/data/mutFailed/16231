const v0 = [];
function f3(a4, a5) {
    a4[3846] = a4;
    for (let v6 = 0; v6 < 5; v6++) {
        function f8() {
            Math.cos(Math);
            return Math;
        }
        a4();
        %OptimizeFunctionOnNextCall(f8);
    }
    return Uint8Array;
}
Uint8Array[Symbol.toPrimitive] = f3;
const v13 = new Uint8Array(814);
const v16 = new Uint32Array(3548);
let v17;
try { v17 = v16.values(); } catch (e) {}
new Uint32Array(61);
v17[14];
const v22 = [Uint8Array,v13];
try { v22.toString(); } catch (e) {}
const v24 = [Uint32Array,v22,v0,v22,v16];
v24.f = v24;
[61,814];
function f27(a28, a29) {
    const o42 = {
        toString(a31, a32, a33) {
            try {
                a31.f = 536870888n;
            } catch(e34) {
                function f35(a36, a37) {
                    Symbol.toPrimitive;
                    return Symbol;
                }
                a28.toString = f35;
                const v40 = e34?.constructor;
                try { new v40(e34); } catch (e) {}
            }
            return 536870888n;
        },
    };
    return v22;
}
const v43 = f27();
try { v43.toString(v24, Uint32Array, v24); } catch (e) {}
const v46 = !f27(536870888n, v43);
v46 || v46;
v43 == v46;
