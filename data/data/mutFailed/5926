function f1(a2, a3) {
    a3(a2, a2, a3, f1);
}
const t3 = 14;
new t3(f1);
const v7 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
v7["findIndex"](gc);
Int8Array >= "findIndex" ? Int8Array : "findIndex";
const o14 = {
    "apply": f1,
    "defineProperty": gc,
    "getOwnPropertyDescriptor": f1,
    "has": f1,
    "ownKeys": f1,
    "set": f1,
    "h": "findIndex",
    "a": "findIndex",
    "setPrototypeOf": f1,
};
new Proxy(v7, o14);
const v17 = new Int8Array(14);
function f19(a20) {
    return a20;
}
class C21 extends f19 {
    1;
    static [f19];
    #g;
}
const v23 = new Float32Array(84);
const v26 = new Uint8ClampedArray(15);
class C27 {
    h = Float32Array;
    static 4 = Uint8ClampedArray;
    static d = v23;
    d = Float32Array;
    static o(a29, a30, a31) {
        v26[2038782682] = a29;
        v17[Uint8ClampedArray];
        return Float32Array;
    }
    e = v26;
    [14] = Proxy;
    static [15];
}
new C27();
new C27();
new C27();
const v38 = [1073741824,1073741823,1376142744,1073741825];
function f39(a40, a41, a42, a43) {
    for (let v45 = 0; v45 < 5; v45++) {
        try {
            arguments.g = v45;
        } catch(e46) {
        }
    }
    function f47() {
        return a40;
    }
    const v49 = new Int8Array();
    class C50 {
    }
    function f51(a52, a53) {
    }
    f51();
    v49.buffer;
    try { v38["find"](); } catch (e) {}
    const o60 = {
        valueOf() {
        },
        get d() {
        },
    };
}
for (let v61 = 0; v61 < 5; v61++) {
    f39();
}
const v63 = new Uint8Array(225);
for (const v64 in v63) {
}
