const v0 = /a??[xyz]/vdms;
const v1 = /abc|def|ghia{1,2}?/guisy;
const v2 = /\xe2\x81\xa3/guiy;
function f3() {
    return v2;
}
/abc+?/;
const v8 = /[k[\cA]*]/gudiy;
const v9 = /(bM)/i;
const v10 = [680.8158687826431,0.8336718380485162,-1e-15,-2.0,0.02959907146706131,3.0,8.471818261150596e+307,-0.0,-1.6340424883846456,-936.6553934206692];
const v11 = [-3.0,-2.220446049250313e-16,2.944456523402998,-2.0,-0.0,497647.5195374158,-129.97012697786033,1000000000000.0];
const v12 = [5.7093235232057165,951782.453527194,2.2250738585072014e-308];
class C16 {
    c = -261.99102172609366;
    ["localeCompare"];
    static [-1.0];
    toString(a18, a19) {
        const v21 = v11 + v0;
        Object.defineProperty(this, "g", { writable: true, configurable: true, enumerable: true, get: f3 });
        try {
            v9.f = this;
        } catch(e22) {
        }
        do {
            function F23(a25, a26, a27, a28) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = "localeCompare";
                } catch(e29) {
                }
            }
        } while ((() => {
                %VerifyType(a18);
                super[-1.0] = v21;
                const v31 = super.c;
                try { new v31(this, a19, v12, v2, f3); } catch (e) {}
                super[6];
                return 0 < 6;
            })())
    }
}
const v35 = new C16();
const v36 = new C16();
const v37 = [v10,v8,v36,v8];
[v37,v36,v35,C16];
[v11,v11,-1.0];
const v41 = [v1];
Reflect.apply(("localeCompare").matchAll, v37, v41);
const v44 = new C16();
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e49) {
    }
    try {
    } catch(e50) {
    }
}
const v51 = new F45(C16, v36);
const v54 = new Float64Array(147);
const o55 = {
};
try { new C16(...-1.0, v51, v35, v44, F45, ...v54); } catch (e) {}
const o57 = {
};
