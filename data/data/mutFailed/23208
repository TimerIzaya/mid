const v0 = [];
const v1 = /(?:ab)+uC/dmsy;
function f2(a3, a4) {
    return v0;
}
v1[Symbol.toPrimitive] = f2;
const v10 = /9/s;
const v11 = /L(x)(x)(x)\2/ms;
v11.dotAll = v11;
v11[v1] >>= 30 << 30;
try {
    const o15 = {
    };
    Object.defineProperty(o15, Symbol.iterator, { configurable: true, value: Symbol });
    new BigInt64Array(o15);
} catch(e19) {
}
const v20 = new BigInt64Array(30);
const v23 = new BigInt64Array(414);
const v26 = new Uint8Array(6);
v26[4] = v26;
const v27 = [Uint8Array,v20];
v27[1] = v27;
try { c(6); } catch (e) {}
try {
    new BigInt64Array(v11, 414);
} catch(e31) {
}
const v32 = [v23,Uint8Array,BigInt64Array,v11,v27];
const v33 = [BigInt64Array,v27,Uint8Array,v10];
let v35;
try { v35 = ("-2147483648").codePointAt(v0); } catch (e) {}
class C38 {
    static #o(a40) {
        this.g **= -1e-15;
        try {
            ("-2147483648").normalize();
        } catch(e42) {
        }
        return 268435456;
    }
    a = -1e-15;
    static 27 = 268435456;
    static f;
}
let v43;
try { v43 = new C38(); } catch (e) {}
v43.a = v43;
const v44 = new C38();
v44.a = v44;
new C38();
const v46 = new C38();
8 - 8;
8 - 8;
function f52(a53) {
    Reflect.preventExtensions(Worker);
    return Worker;
}
Math[Symbol.toPrimitive] = f52;
let v60 = -15;
v60 | v60;
const v63 = 344.61638667171496 | 344.61638667171496;
const v64 = 344.61638667171496 & -11;
const v65 = v64 << v63;
const v66 = Math.sqrt(-11);
v66 & v66;
const v68 = Math.floor(v64);
v68 << v68;
const v70 = v68 + v68;
const v71 = v60--;
v71 >> v71;
const v73 = new Int32Array(8);
v73.constructor = Symbol;
v73[2];
let v75;
try { v75 = v73.constructor(v46, -1e-15, 8); } catch (e) {}
const v78 = new Uint32Array(2950);
v78[1615] = v78;
const v80 = 28 | 28;
v80 >>> v80;
const v83 = new Uint32Array(28);
v83[0] = v83;
let v84 = 0;
let v85 = -56850;
v85++;
const v88 = 1.1408591040999836e+308 >>> v70;
class C89 {
    #b = v84;
    g = 1.1408591040999836e+308;
    static {
        function f91(a92) {
            const v93 = [155533.8602852358,2.0];
            function F95() {
                if (!new.target) { throw 'must be called with new'; }
                for (const v100 of Array(19793)) {
                    v93[658291203] = null;
                    Math.cbrt(19793);
                    Math.exp(0.4890055133608564 || 0.4890055133608564);
                }
                const v106 = [19793,19793,19793,19793];
                [v106,v106];
                [Array,Array,Array,Array] >= Uint16Array;
            }
            new F95();
        }
        Object.defineProperty(this, "e", { configurable: true, set: f91 });
        let v112;
        try { v112 = new this(); } catch (e) {}
        v112.e = v26;
        v112.e = v112;
        this.e = this;
        Math.toString = f91;
        let v114;
        try { v114 = Math.tan(Math); } catch (e) {}
        v114 / v114;
        2066950223 >>> 2066950223;
        let v118 = 44149;
        v118 << v118;
        -v118;
        v118--;
        const v122 = v84++;
        let v123 = v122 & v122;
        v123--;
        let v125 = -v122;
        v125 << v125;
        v125++;
        function f128() {
            return 2066950223;
        }
        try {
            this.#b = C89;
        } catch(e129) {
        }
        let v130 = ~v84;
        v130--;
        Math.log10(v118);
        const v133 = v118 + v84;
        const v134 = v78 + v123;
        v134 >>> v134;
        v133 >> v133;
        let v137 = Math.fround(v122);
        v137--;
        const v139 = v137 >> v137;
        v139 & v139;
    }
}
const v141 = C89?.e;
try { new v141(); } catch (e) {}
let v143;
try { v143 = new C89(); } catch (e) {}
v143.d = v143;
v143.d = v143;
const v144 = new C89();
const v145 = v144?.constructor;
function F146(a148, a149) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v35;
    try {
        this.f = c;
    } catch(e150) {
    }
    try {
        this.g = 268435456;
    } catch(e151) {
    }
}
const v153 = v10["exec"](v70);
new Uint16Array(228);
new Int8Array(255);
new Uint16Array(v75);
new F146(v84, v33);
new F146(v88, v33);
new F146(v65, v32);
try { new v145(); } catch (e) {}
v144.g;
const v169 = v144.g;
v169 >>> v169;
const v171 = new C89();
v171.g = v171;
const v172 = v171?.__defineGetter__;
function f173() {
    function f174() {
        const v175 = [v153];
        [v78,[v175,v175,v175,v175,v175]];
        return v144;
    }
    return f174;
}
Object.defineProperty(v172, "constructor", { configurable: true, get: f173 });
try { v172.constructor(v46); } catch (e) {}
try { new v172(v80, C89); } catch (e) {}
const o186 = {
    "execution": "async",
    set e(a184) {
        try {
        } catch(e185) {
        }
    },
};
o186.type = F146;
gc(o186);
