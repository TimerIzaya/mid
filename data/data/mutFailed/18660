new WeakSet();
const v2 = /\xf0\x9f\x92\xa9[\u{12345}\u{23456}]/guim;
const v3 = /(m\cj\cJ\ci\cI\ck\cK)/gudiy;
const v4 = /(x)(x)(x)\1/udmy;
class C5 extends WeakSet {
    1024 = WeakSet;
    static #d = v2;
    static {
        new BigInt64Array(4096);
        new Set(128);
        127 + 127;
        new Uint32Array(127);
    }
}
C5.name;
const v18 = new C5(C5, v4);
v18[1024];
const v20 = new C5();
const v21 = new C5();
class C22 extends C5 {
    static #n(a24, a25, a26, a27) {
        a27[Symbol.e] = v3;
        try { C5["p"]("p", a24, "p", v18, C5); } catch (e) {}
        return v20;
    }
    #a;
    static a = v20;
}
try { new C22(); } catch (e) {}
const v33 = new C22();
v33[1024];
new C22();
new C22();
class C38 {
}
+-4n;
C38.f = -4n;
try { new Uint16Array(Uint16Array, v21, v21); } catch (e) {}
const v44 = new Uint16Array(3225);
try { v44.reduceRight(-4n); } catch (e) {}
Int16Array.prototype = Int16Array;
new Int16Array();
for (const v48 of v44) {
    BigUint64Array.prototype = BigUint64Array;
    new BigUint64Array(3375);
}
