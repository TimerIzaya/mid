new Uint8ClampedArray(256);
if ("log1p") {
}
function F4() {
    if (!new.target) { throw 'must be called with new'; }
}
let v6 = 255;
v6++;
const v9 = new Float64Array(v6);
const v10 = v9?.constructor;
v10.length = v10;
try { new v10(v9, Uint8ClampedArray, 256); } catch (e) {}
987 % 987;
const v15 = new Int8Array(987);
try { v15.with(v9, v9); } catch (e) {}
28 - 28;
try { new Uint32Array(Uint32Array, Float64Array, Uint32Array); } catch (e) {}
const v21 = new Uint32Array(28);
v21[26] = v21;
new Uint8Array(1208);
const v27 = new Float64Array(290);
const v28 = v27?.constructor;
try { new v28(987, Uint32Array, Uint32Array); } catch (e) {}
const v31 = [9];
0 / 0;
function f35() {
    const v36 = [f35,f35];
    function f37(a38) {
        a38 / a38;
        ~a38;
    }
    try { Reflect.get(v36, Uint8Array); } catch (e) {}
    let v43;
    try { v43 = Reflect.deleteProperty(f37, f37); } catch (e) {}
    v43 || v43;
    const v45 = [0];
    v45[0];
    try { v45.groupToMap(1208); } catch (e) {}
    const v48 = Reflect.construct(f37, v45, Uint8ClampedArray);
    try { v48.reverse(); } catch (e) {}
    const v51 = [[v48,v45],9];
    try { v51.toString(); } catch (e) {}
    const v53 = [v31,Reflect];
    try { v53.findIndex(); } catch (e) {}
    const v55 = v36.constructor;
    v55.length = v55;
    let v56;
    try { v56 = v55.isArray(f37); } catch (e) {}
    v56 && v56;
    class C58 extends v55 {
        constructor(a60, a61) {
            /W(jy2)/udy.flags;
            let v66 = v31[v51];
            v66 **= Uint8Array;
            function f67(a68, a69, a70, a71) {
                return a70;
            }
            for (let v72 = 0; v72 < 625; v72++) {
                f67(Uint8Array, 2, v72);
                try {
                    a60 &= v36;
                } catch(e74) {
                }
            }
        }
    }
    try { C58.of(); } catch (e) {}
    const v76 = new C58();
    try { v76.fill(v56); } catch (e) {}
    const v78 = v76?.constructor;
    v78.name;
    try { new v78(); } catch (e) {}
    const v81 = v76?.constructor;
    try { new v81(); } catch (e) {}
    return v36;
}
f35.a = f35;
%PrepareFunctionForOptimization(f35);
const v83 = f35();
try { v83.map(987); } catch (e) {}
%OptimizeFunctionOnNextCall(f35);
f35();
