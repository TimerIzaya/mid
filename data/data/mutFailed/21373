function f0() {
}
function f4() {
    return 1073741823;
}
/I+/gumsy;
/ka(?!bbb|bb)cYz+/udm;
/[\1\2(a(?:\1(b\1\2))\2)\1]/gvy;
new BigUint64Array(1602);
new Float64Array(255);
new Int32Array(197);
class C20 {
    static #valueOf(a22) {
        const t13 = "boolean";
        t13[-8] = a22;
        a22[5] = -1.0654615543745536e+308;
        new Float32Array(9);
        new Float32Array(2823);
        new Uint16Array(512);
        return Float32Array;
    }
}
const v32 = new C20();
const v33 = v32?.constructor;
try { new v33(); } catch (e) {}
const v35 = new C20();
const v36 = new C20();
const v38 = Symbol.iterator;
const o47 = {
    [v38]() {
        let v40 = 10;
        const o46 = {
            next() {
                v40--;
                const v44 = v40 == 0;
                const o45 = {
                    "done": v44,
                    "value": v40,
                };
                return o45;
            },
        };
        return o46;
    },
};
class C48 {
    constructor(a50, a51, a52, a53) {
        const v54 = this?.__lookupGetter__;
        try { new v54(C48); } catch (e) {}
        try { a52.isPrototypeOf(a52); } catch (e) {}
        try { v36(); } catch (e) {}
        try {
            a53.b = a52;
        } catch(e58) {
        }
    }
    #g;
    valueOf(a60, a61, a62, a63) {
        0.6920828961713477 % 1;
        -8 && 0.6920828961713477;
        +v32;
        let v70 = -8 && -8;
        return v70++;
    }
}
try { C48.bind(-8); } catch (e) {}
new C48(C48, "boolean", v36, v36);
const v74 = new C48(v36, v35, C20, C20);
new C48(v36, C20, C48, v74);
[-4.0,5.0,1e-15,-1000000.0];
const v77 = [4.0,1.7976931348623157e+308,-1.6746280838181564e+308,Infinity,0.02995849684218521,8.253324943521243e+307,-4.753315469426976e+307,1000000.0];
v77[3] = v77;
[-1.5131061856231655e+308,0.9940081941996022,-1000000000.0,-9.722353359280868,9.968489719443777e+307,-5.0,-374352.7778849256,-Infinity,1000000000.0,0.05917465816222045];
const v80 = new Float32Array(Float32Array);
for (let v81 = 0; v81 < 25; v81++) {
    function f82(a83, a84, a85, a86) {
        let v87;
        try { v87 = a83.join(v81); } catch (e) {}
        const v88 = a84--;
        a84 <= a84;
        const v91 = arguments?.__lookupGetter__;
        new f82(v88, v88, v88, f82);
        v87[4] = a83;
        new Uint8Array(63);
        new Uint16Array(1004);
        new BigUint64Array(512);
        try { v91(v91, f82, a84, arguments); } catch (e) {}
        const v104 = "find" == "find";
        v104 && v104;
    }
    for (let v106 = 0; v106 < 10; v106++) {
        f82(v80, v81);
    }
}
