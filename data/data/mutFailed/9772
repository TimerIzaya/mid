function f0() {
}
const v3 = new Boolean(1849);
try { new Proxy(v3, v3, f0, v3); } catch (e) {}
const v7 = new Proxy(5, v3);
const v10 = BigInt64Array.e;
try { new BigInt64Array(Proxy, Proxy, v7); } catch (e) {}
const v12 = new BigInt64Array(127);
(-63971) ** -63971;
-(-65535);
class C18 {
    setUint8(a20, a21, a22, a23) {
        const v24 = f0();
        try { this.max(a22, a22); } catch (e) {}
        Proxy ^ v7;
        return v24;
    }
    #c = -5;
    valueOf(a28, a29, a30) {
        try {
            this.#c = -63971;
        } catch(e31) {
        }
        return a29;
    }
}
try { new C18(v12); } catch (e) {}
const v33 = new C18();
const v34 = v33?.n;
try { new v34(BigInt64Array, BigInt64Array, -5, v33); } catch (e) {}
const v36 = v33?.constructor;
try { new v36(); } catch (e) {}
new C18();
new C18();
class C40 {
    toString(a42, a43, a44) {
    }
}
let v45;
try { v45 = new C40(); } catch (e) {}
const v46 = v45?.constructor;
try { new v46(f0, v3, v10); } catch (e) {}
for (let v48 = 0; v48 < 25; v48++) {
    v48 * v48;
    const v51 = [];
    try { v51.includes(Promise); } catch (e) {}
    function F54(a56, a57, a58, a59) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v60 = 0; v60 < 100; v60++) {
            const o63 = {
                valueOf(a62) {
                    return v60;
                },
            };
            function f64(a65, a66, a67) {
                const o74 = {
                    toString(a69, a70, a71) {
                        super[a67];
                        return a66;
                    },
                    "a": o63,
                    "arguments": v51,
                    2: undefined,
                    get d() {
                        return F54;
                    },
                };
                return a65;
            }
            const v75 = f64(f64, undefined, F54);
            f64(undefined, v75, v75);
        }
    }
    Promise.reject(Promise);
}
const o78 = {
};
