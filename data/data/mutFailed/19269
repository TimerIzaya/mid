const v0 = [129,9,0,-501357132,2,1024,12706];
const v1 = [14,268435456,1609644822,-65537];
const v2 = [1157378918,-10,257];
function f3(a4, a5) {
    try { a4.toString(); } catch (e) {}
    a5[2];
    const o11 = {
        m(a9) {
            return v1;
        },
        198: a5,
        "e": a5,
        "d": a4,
        "a": a5,
        "b": a5,
        "f": v0,
    };
    return o11;
}
const v12 = f3(v2, v2);
v12[198] = v12;
const v13 = f3(v2, v0);
v13[198] = v13;
f3(v2, v2);
let v17 = 7;
v17 >>> v17;
class C19 {
    static {
        this.prototype = this;
        for (let i23 = 0, i24 = 10;
            -i23, i23 < i24;
            (() => {
                function f29() {
                    return f29;
                }
                const v30 = [601759695];
                const v31 = [1073741824,1073741823,1376142744,1073741825];
                function f33(a34, a35, a36, a37) {
                    function f39() {
                        return a34;
                    }
                    try { f39(); } catch (e) {}
                    f29();
                    const v43 = new Int8Array();
                    try { v43.copyWithin(v43, Int8Array); } catch (e) {}
                    function f45(a46, a47) {
                        return 5;
                    }
                    const v49 = f45(f45(v31, C19));
                    v49 / v49;
                    v43.buffer.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f39);
                    let v55;
                    try { v55 = v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
                    v55 <= a36;
                    return this;
                }
                for (let v57 = 0; v57 < 10; v57++) {
                    f33();
                }
                i23++;
            })()) {
            i23 >>> i23;
            i24 + i24;
        }
        333 - 333;
        const v66 = [1073741824,1073741823,1376142744,1073741825];
        try { v66.groupToMap(this); } catch (e) {}
        function f68(a69, a70, a71, a72) {
            let v73 = a71 && a71;
            arguments.h = arguments;
            arguments[3] = arguments;
            ({"h":v73,"length":a69,...v17} = v66);
            ("find").startsWith(a72);
            for (let v77 = 0; v77 < 5; v77++) {
            }
        }
        for (let v78 = 0; v78 < 5; v78++) {
            f68();
        }
        f68();
        %OptimizeFunctionOnNextCall(f68);
        f68();
    }
}
