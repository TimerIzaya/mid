function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1;
    } catch(e3) {
    }
    try {
        this.f = 1;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0(F0, F0);
const v7 = new F0();
class C8 extends F0 {
    static p(a10) {
        try {
            v6.m(this, v7);
        } catch(e12) {
        }
        return F0;
    }
    get h() {
        function f16(a17, a18, a19) {
            return F0;
        }
        const v22 = [Uint8Array,0,v6];
        const o23 = {
            "arguments": v22,
            "type": 0,
        };
        new Worker(f16, o23);
        class C25 extends 0 {
            #b;
            #c;
        }
        const v26 = new C25();
        new C25(v26, v26);
        new v6();
        return "function";
    }
}
new C8();
const v30 = new C8();
new C8(v30);
new BigUint64Array(64);
new BigUint64Array(3334);
new BigInt64Array(-9007199254740991);
1000000000.0 >> 1000000000.0;
