function f1() {
    0 == 268435440n;
    const v5 = new f1();
    new f1(f1, f1, v5, v5);
    const o15 = {
        [undefined]() {
            let v8 = 0;
            while (v8 < 10) {
                const v11 = [this,this,this];
                [this,this,v11,v8];
                [v11];
                v8++;
            }
            return v8;
        },
        "c": undefined,
    };
    return o15;
}
const v16 = f1();
const v17 = f1();
const v18 = f1();
const v19 = [v17,v16,v17,v18];
let v20 = [,];
[v18];
59817n < undefined;
class C25 {
}
const v26 = new C25();
class C27 extends C25 {
    [v26];
}
class C28 {
    3;
    static #toString(a30, a31, a32) {
        let v33;
        try { v33 = a30(a32, this, v20, f1, a30); } catch (e) {}
        a30[40] = v33;
        return v19;
    }
    #a;
    toString(a35, a36, a37, a38) {
        const o47 = {
            [-4294967297n](a41, a42, a43, a44) {
                eval(a44);
            },
        };
        eval();
    }
    static #p(a55, a56) {
    }
    a;
    constructor(a58, a59) {
        function F60(a62, a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
        }
        typeof arguments;
        for (let i = 0; i < 5; i++) {
            function f68(a69, a70, a71, a72) {
                function f73() {
                    return f73;
                }
                const v74 = f73();
                function f75(a76, a77) {
                    const o79 = {
                        get d() {
                            return this;
                        },
                    };
                    return v74;
                }
                f75(f75());
                return f68;
            }
            this[this];
        }
    }
    set e(a84) {
        const v85 = this;
        v16[16] *= ++v20;
        gc();
        v26.constructor;
        function f90() {
            const v92 = ("-536870912").g;
            const v94 = new Uint16Array();
            const v96 = ("async").toLocaleUpperCase;
            try { v96(); } catch (e) {}
            class C98 {
            }
            const v99 = new C98();
            const v100 = new C98();
            function F101(a103, a104) {
                if (!new.target) { throw 'must be called with new'; }
                a104--;
                const v106 = a103?.constructor;
                v106.MAX_SAFE_INTEGER;
                new v106();
                const v109 = this.constructor;
                try { v109(a103, v100); } catch (e) {}
            }
            new F101(v100, v99);
            v94[145] = v92;
            return v92;
        }
        %PrepareFunctionForOptimization(f90);
        const v114 = new Uint16Array(3327);
        v114.set([-2038832922,-14]);
        try {
            v18.#toString();
        } catch(e118) {
        }
    }
}
new C28();
new C28();
new C28();
[536870888];
[-1024,1025333892,-536870912,-4096,-28280,127,21622,1873786642];
[-3,1073741824,405275579,536870889,4356,21050];
16 >>> 16;
let v132 = -0n;
++v132;
function F134() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        for (let v136 = 0; v136 < 50; v136++) {
            for (let v137 = 0; v137 < 25; v137++) {
                function F138(a140, a141, a142) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.h = a142;
                    } catch(e143) {
                    }
                }
                this["p" + v137] = v137;
            }
        }
    } catch(e146) {
    }
}
[12];
for (let i = 0; i < 25; i++) {
    function F150() {
        if (!new.target) { throw 'must be called with new'; }
        this.g = this;
        try {
            this.g = -4294967295;
        } catch(e153) {
        }
    }
    const v154 = new F150();
    const v156 = new WeakSet();
    class C157 {
        static n(a159) {
            let v158 = this;
            --v158;
            v154.h = v156;
            function f162(a163, a164) {
                for (const v166 of "-4294967295") {
                }
                function f168() {
                    const o172 = {
                        [null]() {
                            try { this.null(f168, this, this, f168); } catch (e) {}
                            super.b;
                        },
                    };
                    return o172.null();
                }
                const o175 = {
                    get g() {
                        return a164;
                    },
                };
            }
            for (let v176 = 0; v176 < 60; v176++) {
            }
            return -9007199254740992n;
        }
        static #a;
        constructor(a180, a181) {
            try {
                a180.fuck(false, this);
            } catch(e184) {
            }
        }
        static #c = F150;
        #b = F150;
        #f;
        7 = v154;
        h;
    }
    new Uint32Array();
    function f193(a194, a195) {
        arguments[0] = arguments;
        return a195;
    }
    f193(undefined);
    new Uint8ClampedArray(129);
}
