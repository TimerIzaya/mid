const v0 = [];
const v4 = [531490.8002912265];
const v5 = [5.0,v4,v0,v0,v4];
const v6 = [884498.9648857887,v5,531490.8002912265,5.0];
new Uint8Array(1073741823);
const v14 = [0.0,1000000000.0,168.7956281727238,-575464.6142395872,-1000000000.0,938.6271876998214];
const v17 = new Float64Array(64);
v17[5] = v14;
[v17,v14];
class C19 {
    static [v0];
    [531490.8002912265];
    static [v6] = v5;
    toString(a21, a22) {
        v0[10000];
        [-186185415,1487714413,-2147483647];
        [-15973162,39966,-4294967296,1950487810,-9007199254740991];
        [-16,268435456,50544,62370,-25297,-15];
        return 531490.8002912265;
    }
}
new C19();
new C19();
new C19();
const v33 = [];
const v34 = [v33];
class C36 extends Map {
    constructor(a38, a39) {
        super(v34);
    }
}
const v40 = new C36(v33, v34);
const v41 = new C36(v34, v40);
const v42 = new C36(v41, v40);
function f46(a47) {
    const o51 = {
        "c": 2,
        "e": 536870889,
        213: a47,
        ...a47,
        "g": 2,
        p(a49, a50) {
        },
    };
    return o51;
}
f46(536870889);
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a56;
}
new F53(536870889, 2);
%PrepareFunctionForOptimization(f46);
f46();
f46();
%OptimizeFunctionOnNextCall(f46);
f46();
const v63 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v66 = new Float32Array(Float32Array, Float32Array, Float32Array);
const v69 = new BigInt64Array(10);
function f70() {
    return f70;
}
class C71 extends f70 {
    constructor(a73, a74, a75, a76) {
        const v78 = [a74];
        Reflect.apply(v66.toLocaleString, v69, v78);
    }
}
new C71(Int8Array, v33);
const v83 = new Uint32Array();
let v84 = -4294967297n;
const v85 = v84--;
const v86 = [601759695];
const v87 = [1073741824,1073741823,1376142744,1073741825];
function f89(a90, a91, a92, a93) {
    try { a90.toLocaleString(); } catch (e) {}
    const v95 = a90?.constructor;
    try { v95(); } catch (e) {}
    try { v95(); } catch (e) {}
    const v99 = arguments.length;
    Object.defineProperty(v40, "e", { configurable: true, enumerable: true, value: f89 });
    const v101 = v41["entries"](a92, ...v42, BigUint64Array, ..."entries", a91, v99);
    const v103 = Symbol.toStringTag;
    v41[v103] = v103;
    function f104() {
        let v106;
        try { v106 = ("Vre").charAt(4096); } catch (e) {}
        try { v106.lastIndexOf(); } catch (e) {}
        let v108;
        try { v108 = ("Vre").codePointAt(v63); } catch (e) {}
        v108 - v108;
        v108 ^ v108;
        let v111 = Float64Array;
        v111 = a91;
        let v112 = v63.length;
        v112++;
        try {
            v87.forEach(a91);
        } catch(e115) {
            e115.stack = e115;
        }
        const o126 = {
            "c": v84,
            "EPSILON": v86,
            valueOf(a117, a118) {
                return a117;
            },
            1073741824: v83,
            [v84](a120, a121, a122, a123) {
                eval();
            },
            "arguments": 5,
            256: a93,
        };
        return v112;
    }
    f104();
    const v129 = Array();
    let v130;
    try { v130 = v129.findLast(f89, v83); } catch (e) {}
    v129.unshift("entries", v101, "entries", v130);
    let v133;
    try { v133 = Int8Array.of(); } catch (e) {}
    try { v133.join(v95); } catch (e) {}
    const v135 = new Int8Array(v86);
    v135.c = v135;
    const v136 = v135.buffer;
    v136.maxByteLength;
    const v138 = v136.slice(v95);
    try { Int32Array(v138, arguments, v84); } catch (e) {}
    function f141(a142, a143, a144, a145) {
        return a145;
    }
    const v146 = new Int32Array();
    const v147 = v146[3];
    v147 + v147;
    for (let v149 = 0; v149 < 5; v149++) {
    }
    %OptimizeFunctionOnNextCall(f104);
    try { v87["find"](..."find", a93, ...v86, ...v87, ...522675525n); } catch (e) {}
    return a90;
}
for (let v152 = 0; v152 < 10; v152++) {
    f89(v83);
}
%OptimizeFunctionOnNextCall(f89);
f89(v86, v33, v85, f89);
