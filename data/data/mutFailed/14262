function f0() {
}
const v3 = new Uint16Array(128);
v3[66] = v3;
const v6 = new Float64Array(103);
v6.BYTES_PER_ELEMENT;
new f0();
v3.length ||= 128;
Object.defineProperty(v6, "b", { writable: true, configurable: true, enumerable: true, set: f0 });
const v12 = -v6;
-9007199254740992 & -9007199254740992;
-v12;
Math.asin(v12);
Math.log2(-9007199254740992);
Int8Array.name = Int8Array;
const v19 = new Int8Array(128);
try { v19.slice(Int8Array, Uint16Array); } catch (e) {}
const v21 = [-47080678];
const v22 = [268435439,1647377789,-1448040897,13235,65536,-875805490,-9223372036854775807];
const v23 = [5,-1940846734,1177911310,-2147483647,-730,-9007199254740990,2];
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(128); } catch (e) {}
    a26[0] = a26;
    try {
        this.f = 128;
    } catch(e30) {
    }
    try {
        this.a = v3;
    } catch(e31) {
    }
    try {
        this.g = v22;
    } catch(e32) {
    }
}
F24.caller = F24;
new F24(v21, v22, Uint16Array);
const v34 = new F24(v22, v23, v21);
const v35 = new F24(v23, v34, v23);
103 >> v35;
try {
    f0();
} catch(e38) {
}
const v46 = /[^a\ScwU*]/vdsy;
v46.h = v46;
