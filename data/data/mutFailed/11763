function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this[0] = this;
    let v2 = -268435456;
    try {
        this.d = v2;
    } catch(e3) {
    }
    try {
        this.h = v2;
    } catch(e4) {
    }
    try {
        this.c = v2;
    } catch(e5) {
    }
    v2 *= v2;
    this > this;
}
const v10 = new F0();
let v11 = new F0();
v11[0] = v10;
const v12 = new F0();
Object.defineProperty(v12, 1410, { writable: true, configurable: true, enumerable: true, value: F0 });
const v15 = new Int16Array(331);
new Date();
function f19() {
    function F20(a22) {
        if (!new.target) { throw 'must be called with new'; }
        this.constructor;
        try { new v12(); } catch (e) {}
    }
    class C25 extends F20 {
        #p(a27, a28) {
        }
    }
    try { new C25(); } catch (e) {}
    return f19;
}
new Int32Array(512);
const v34 = new Float32Array(9);
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
}
const v42 = new F36(164140152, F36, 164140152, 164140152);
v15[331] = Int16Array;
const v45 = [601759695];
const v46 = [1073741824,1073741823,1376142744,1073741825];
function f47(a48, a49, a50, a51) {
    function f53(a54) {
        function f55(a56, a57, a58, a59) {
            function f60() {
                return a58;
            }
            const v61 = f60.bind(a58, f55, a57, f55);
            v61.e = v61;
            return a58;
        }
        return v42;
    }
    BigUint64Array.toString = f53;
    let v62 = 536870887;
    v62++;
    BigUint64Array >> v62;
    let v66;
    try { v66 = v46["find"](..."find", a51, ...v45, ...v46); } catch (e) {}
    return v66;
}
for (let v67 = 0; v67 < 5; v67++) {
    f47(v46, v67, v67, v67);
}
v12[1410] = 5n;
("async").lastIndexOf();
function f73() {
    return f73;
}
for (let v74 = 0; v74 < 5; v74++) {
    function f75() {
        const v77 = ("Vre").strike();
        function f78() {
            const v81 = Array(4087);
            v81[4037] = v81;
            for (const v82 of v81) {
            }
            return Array;
        }
        %PrepareFunctionForOptimization(f78);
        const v83 = v77.link();
        v83[7] = v34;
        const v84 = v11[v74];
        try { v84(v34); } catch (e) {}
        v11 = v12;
        ("Vre")[65537];
        v83.includes(164140152);
        const v89 = Array();
        v89[0] = v89;
        v89.unshift(v42, v74, F36, v74, v89.pop());
        const v93 = new Set();
        v93.add().entries();
        class C96 {
        }
        const v97 = new C96();
        v97.hasOwnProperty(v83);
    }
    f75();
    %OptimizeFunctionOnNextCall(f75);
}
