new Uint8ClampedArray(10);
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f5(a6, a7, a8, a9) {
    try { v4["find"](..."find"); } catch (e) {}
    return a9;
}
for (let v12 = 0; v12 < 10; v12++) {
    f5();
}
new Worker(9);
new Uint16Array(1358);
new Uint8ClampedArray(3222, v4, Uint8ClampedArray);
new Int32Array(190);
class C26 {
    constructor(a28, a29) {
        const o31 = {
            84: arguments,
        };
    }
}
function f34() {
    ("D")[0].substring(129);
    return "D";
}
f34();
new Int16Array(16);
class C42 {
}
const v43 = new C42();
const v44 = new C42();
const v45 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v46 = [601759695];
const v47 = [1073741824,1073741823,1376142744,1073741825];
function f49(a50, a51, a52, a53) {
    function f55() {
        const o70 = {
            "g": -4294967295,
            ...v45,
            84: arguments,
            ..."Vre",
            "g": 190,
            toString(a59, a60) {
                f49 += f49;
                ++a53;
                a59[Symbol.iterator] = "Vre";
                return "Vre";
            },
            set b(a65) {
            },
            ["Vre"](a67, a68) {
                super[f55];
            },
        };
        return a50;
    }
    class C72 extends Float32Array {
        constructor(a74, a75, a76) {
        }
    }
    f55();
    %OptimizeFunctionOnNextCall(f55);
    let v79;
    try { v79 = v47[a52](..."find", a53, ...v46, ...v47, ...522675525n); } catch (e) {}
    v79 > a52;
    return arguments;
}
const t66 = "9007199254740992";
t66["255"] &= 7;
[1000,1000,1000,1000,1000];
for (let v86 = 0; v86 < 10; v86++) {
    f49();
    ("undefined").normalize("NFC");
    function F91() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F91();
}
%OptimizeFunctionOnNextCall(f49);
for (const v95 in v44) {
    const t79 = Int32Array();
    t79[257] = 9007199254740991;
    v43.p("m");
}
f49(v47, f49, 522675525n);
