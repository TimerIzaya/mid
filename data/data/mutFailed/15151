const v3 = [807791048];
try { v3.toString(268435456, 268435456, 807791048); } catch (e) {}
const v5 = [v3,807791048];
try { v5.sort(8); } catch (e) {}
[807791048,v5];
class C8 {
    static 6;
    constructor(a10, a11, a12) {
        a10 >>> a10;
        super.f = 8;
        function f16() {
            return f16;
        }
        const v17 = f16.arguments;
        function f18() {
            for (let v19 = 0; v19 < 5; v19++) {
                const v23 = Array(36862, v17, v19 & v19);
                v23[2] = v23;
            }
            return v17;
        }
        %PrepareFunctionForOptimization(f18);
        f18();
        %OptimizeFunctionOnNextCall(f18);
        f18();
        const v26 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
        let v29 = v26 & -2;
        v29++;
        Math.acosh(v29);
        const v32 = Symbol.iterator;
        const o41 = {
            [v32]() {
                const o40 = {
                    next() {
                        let v35 = this;
                        v35--;
                        const v38 = -6 == 0;
                        const o39 = {
                            "done": v38,
                            "value": -6,
                        };
                        return o39;
                    },
                };
                return o40;
            },
        };
        o41.f = o41;
    }
}
C8.length;
const v43 = new C8(807791048, 8, 268435456);
const v44 = new C8(8, 268435456, 807791048);
try { v44.hasOwnProperty(v43); } catch (e) {}
for (let v46 = 0; v46 < 5; v46++) {
    -v46;
    const v48 = [0.8307152163010869,1.0,0.0];
    v48[1];
    v48.length = v46;
}
Math.expm1(Math);
const v52 = new C8(8, 8, 807791048);
const v53 = v52?.constructor;
try { new v53(v44, Math, v43); } catch (e) {}
for (let v55 = 0; v55 < 25; v55++) {
    const v56 = [601759695];
    try { v56.map(v5); } catch (e) {}
    const v58 = [1073741824,1073741823,1376142744,1073741825];
    const v59 = v58?.entries;
    let v60;
    try { v60 = new v59(); } catch (e) {}
    new Float64Array(1000);
    class C64 {
    }
    function f65(a66, a67, a68, a69) {
        try { a66.lastIndexOf(a69); } catch (e) {}
        a69 != a69;
        try { new BigUint64Array(BigUint64Array, a66, BigUint64Array, v43, BigUint64Array, v60); } catch (e) {}
        let v74 = 536870887;
        v74++;
        BigUint64Array >> v74;
        let v78;
        try { v78 = v58["find"](..."find", a69, ...v56, ...v58); } catch (e) {}
        return v78;
    }
    for (let v79 = 0; v79 < 5; v79++) {
        f65(v58, v79, v79, v79);
    }
}
