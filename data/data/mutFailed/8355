const v1 = -Infinity;
class C3 {
    constructor(a5, a6) {
        const v7 = this?.constructor;
        try { new v7(v1, v1); } catch (e) {}
        a6.prototype = a6;
        ("toString").length;
    }
    #p(a14, a15) {
        function F16(a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = "toString";
            } catch(e20) {
            }
            try {
                this.d = a19;
            } catch(e21) {
            }
            try {
                this.e = a18;
            } catch(e22) {
            }
        }
        new F16(a14, v1);
        const v24 = new F16("9", "9");
        new F16(v24, "toString");
        return F16;
    }
}
C3.prototype = C3;
const v26 = new C3(C3, C3);
const v27 = new C3("9", v26);
v27.c = v27;
new C3(v26, "9");
-1265452014n + -1265452014n;
new Float32Array(16);
1408 + 1408;
const v42 = new Float32Array(1408);
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const v45 = new Uint32Array(256);
try { v45.join(129n); } catch (e) {}
function f49(a50, a51, a52) {
    const o60 = {
        n(a54, a55, a56) {
            return f49;
        },
        valueOf(a58, a59) {
            return a59;
        },
    };
    try { o60.__lookupGetter__(o60); } catch (e) {}
    return o60;
}
try { f49(v42, v42, v42); } catch (e) {}
const v63 = f49();
const t55 = f49();
t55[-2147483649] *= -13;
for (const v65 in v63) {
}
