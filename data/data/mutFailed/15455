class C3 {
    [268435439];
    m(a5, a6) {
        let v7 = Math;
        const v9 = +268435439;
        const v11 = +(v9 || -256);
        ({"h":C3,} = a6);
        let v12;
        try { v12 = C3.valueOf(1073741823, 496541597, -256, a5); } catch (e) {}
        v12 = v7;
        let v14 = 919707349;
        Math.log10(v7--);
        v14 && v14++;
        v7.cosh(v9);
        v11 << 496541597;
        1073741823 >> v11;
        return v9;
    }
}
const v22 = new C3();
function f23(a24) {
    const v25 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f26(a27, a28) {
        const v30 = a27 && 64;
        ++a27 * v30;
        return a27;
    }
    v25.constructor = f26;
    return f26;
}
v22[Symbol.toPrimitive] = f23;
v22[268435439] = v22;
const v35 = new C3();
v35[268435439];
const v37 = new C3();
function f38() {
    return v37;
}
function f39() {
    function F40(a42, a43, a44) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.h = v22;
        } catch(e45) {
        }
        try {
            this.c = v37;
        } catch(e46) {
        }
    }
    return F40;
}
f38.constructor = f39;
const v47 = f38?.constructor;
let v48;
try { v48 = new v47(v22); } catch (e) {}
-507821652 % -507821652;
65536 + 65536;
16 | 16;
try { Float32Array.from(1073741823); } catch (e) {}
const v58 = new Float32Array(16);
v58[11];
const v62 = Uint16Array.length;
v62 >>> v62;
const v64 = new Uint16Array(5);
const v67 = new Uint32Array(12);
function f68() {
    function f69() {
        const v74 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v75 = [601759695];
        const v76 = v75.splice(-128, -128, -1547267477n, v74);
        const v77 = [1073741824,1073741823,1376142744,1073741825];
        function f79() {
            const v81 = ("Vre").toLocaleUpperCase;
            try { v81(v81, -4294967297n, Float32Array, v77); } catch (e) {}
            const v83 = ("Vre").fixed();
            try { v83.replace(v81, "g"); } catch (e) {}
            const v85 = v83.codePointAt();
            const v86 = v85 * v85;
            let v88 = -268435456;
            const v89 = v88--;
            const o103 = {
                "c": -4294967297n,
                [522675525n](a91, a92) {
                },
                ..."Vre",
                "maxByteLength": -128,
                "c": v75,
                [-4294967297n]: -1547267477n,
                __proto__: Float32Array,
                "d": v89,
                "e": -4294967295,
                "h": v76,
                valueOf(a94, a95) {
                    return v83;
                },
                "e": -4294967295,
                "e": v88,
                "maxByteLength": -4294967295,
                "arguments": v74,
                ...v75,
                "type": "Vre",
                ..."Vre",
                valueOf(a97, a98) {
                    return this;
                },
                ..."Vre",
                4: "Vre",
                "c": v88,
                "type": "Vre",
                "type": "Vre",
                toString(a100, a101, a102) {
                    return this;
                },
                5: -4294967295,
                6: v88,
            };
            o103[60] = v86;
            o103[60] = o103;
            const t119 = "Vre";
            t119[5] = o103;
            const v104 = o103.valueOf();
            v104[60] = v104;
        }
        return 16;
    }
    return f69;
}
function f105(a106) {
    v64["forEach"](v22, ..."forEach", a106, v48, f38);
}
Object.defineProperty(v67, "constructor", { writable: true, configurable: true, get: f68, set: f105 });
let v109;
try { v109 = v67.subarray(268435439, -507821652); } catch (e) {}
v109.byteOffset;
const v113 = new Int8Array(127);
for (const v114 in v113) {
}
const v116 = this?.ReferenceError;
try { new v116(5); } catch (e) {}
const v118 = this.escape();
v118[1] = v118;
const v120 = ([16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9]).keys();
const v121 = v120?.next;
try { new v121(); } catch (e) {}
let v123;
try { v123 = v120.next(); } catch (e) {}
v123.value;
function f125(a126, a127) {
    const o128 = {
        "g": v120,
    };
    o128.g;
    return o128;
}
%OptimizeFunctionOnNextCall(f125);
const v131 = f125()?.__lookupGetter__;
try { new v131(496541597); } catch (e) {}
