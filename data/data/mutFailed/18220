const v0 = /izn[k]/isy;
const v1 = /xyz{1,32}{xyz??/gim;
const v2 = /a*b/dm;
const v3 = [483104271,3,177555607];
const v4 = [255,-27557];
const v5 = [-272243410];
v5[0] = v5;
function f6() {
    function f7(a8, a9) {
        257 - 257;
        const v13 = AggregateError?.constructor;
        try { new v13(v0); } catch (e) {}
        AggregateError.captureStackTrace(AggregateError, 257);
        return a8;
    }
    return v1;
}
function f16(a17) {
}
Object.defineProperty(v5, "toString", { configurable: true, enumerable: true, get: f6, set: f16 });
class C21 {
    static [v5];
    static {
        try { new this(); } catch (e) {}
        try { ("boolean").toLocaleLowerCase(); } catch (e) {}
        try { ("toLocaleString").slice(this, v4); } catch (e) {}
    }
    get g() {
        function f30(a31, a32) {
            [[this,[a32,a31,a31,v3],this,v0,a32]];
            return v3;
        }
        return f30(this, v2);
    }
}
new C21();
const v38 = new C21();
const v39 = new C21();
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = this?.constructor;
    try { new v44(F40, F40); } catch (e) {}
    a42.g;
    v1.g;
    try {
        this.g = v0;
    } catch(e48) {
    }
}
const v49 = new F40(v38, v39);
const v50 = new F40(v49, v49);
new F40(v50, v49);
const v55 = [-1000000000000.0,Infinity,1.0,-Infinity,1.7976931348623157e+308,5.968300367511291e+307,-2.220446049250313e-16,-3.0,9.510254036543073e+307,5.0];
const v56 = [1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
const v60 = [-131.14557671807358,v55,v55,v55];
v60[3] = v60;
[4.0,0.2037963153987472];
[v56,-131.14557671807358,4.0];
const v63 = [0.0,-1000.0,2.557943047142931];
const v64 = [-2.2250738585072014e-308,1e-15,0.0,-3.0,2.220446049250313e-16,1000000000000.0,-386.72889766700735,4.359327317391378];
v64[3];
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
-1000000000.0 + -1000000000.0;
948737.12760097 == 1e-15;
for (let v73 = 0; v73 < 5; v73++) {
    try {
        v63.valueOf = v73;
    } catch(e74) {
    }
}
let v76 = 2147483647;
v76--;
let v78 = 20655;
v78++;
const v83 = [256,54026];
("forEach")[2];
-2 | -2;
!-2;
Math.hypot(v83);
v76 - 135.68951961804942;
gc.length = gc;
const o96 = {
    "execution": "async",
    "type": v64,
};
const v98 = new Int16Array(2183);
255 % 255;
const v102 = new Uint8Array(255);
try { v102.keys(); } catch (e) {}
const v106 = new Int16Array(8);
const v108 = parseFloat?.constructor;
try { new v108(1000000000.0); } catch (e) {}
async function f110(a111, a112, a113) {
    delete v106[-1000000000.0];
    let [v115,v116,...v117] = v98;
    v98[5];
    await v116;
}
parseFloat("minor");
