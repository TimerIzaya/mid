const v0 = [-92488275,-2,5,-65537,129,2101926997,-9007199254740990,-9223372036854775808];
const v1 = [-4294967296,-51304,127,4294967295,512,55480,9007199254740990,10,1073741823];
const v2 = [2147483648,4,883435770];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v2;
    } catch(e6) {
    }
    try {
        this.g = v2;
    } catch(e7) {
    }
}
new F3(v0);
new F3(v2);
new F3(v2);
let v12 = 0;
do {
    const v14 = new WeakSet();
    v14[4];
    v12++;
} while (v12 < 3)
const v21 = new BigUint64Array(256);
let v24;
try { v24 = Int16Array.call(v1); } catch (e) {}
let [v25] = v2;
v24[256] >>= v24;
new Array(16);
new Int16Array(10);
try { new Uint8Array(v21, v21, v1); } catch (e) {}
const v33 = new Uint8Array(512);
try { v33.join(v21); } catch (e) {}
4 - 4;
const v39 = new BigUint64Array(4);
v39[1];
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    a44 >> a44;
    a45 ^ a45;
}
const v48 = new F41(BigUint64Array, 4, 241);
for (let v49 of v39) {
    v49 ^ v49;
    v49--;
    Object.defineProperty(v48, 241, { enumerable: true, value: v49 });
}
