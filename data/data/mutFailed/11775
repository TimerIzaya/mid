[1820383963,7,-2,0,-964500114,1073741824,-9007199254740992,-268435456,-617362068];
[536870889,128,-37413,1,-4];
[33681,1622925274,-1601982757,62954];
let v4 = 246;
v4++;
new Array(v4);
const v10 = [16,-268435456];
try { v10.fill("number"); } catch (e) {}
[1,7,-4294967297,256,-2,-6908,2,-46357];
[4294967296,-631780088,-9223372036854775807,-18908,-701141647,2,-188404871,-10302,7,9];
12204n >> 12204n;
class C18 extends Map {
}
const v19 = new C18();
const t14 = "uAKu";
const v20 = new t14();
const v21 = new C18();
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = new Uint32Array(5);
let v28 = -4294967297n;
v28--;
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    try { a34.toLocaleString(); } catch (e) {}
    const v39 = a34?.constructor;
    let v40;
    try { v40 = v39(); } catch (e) {}
    try { v39(); } catch (e) {}
    const v43 = arguments.length;
    Object.defineProperty(v19, "e", { configurable: true, enumerable: true, value: v43 });
    const v45 = v20["entries"](a36, ...v21, BigUint64Array, ..."entries", Map, v43);
    const v47 = Symbol.toStringTag;
    v20[v47] = v47;
    function f48() {
        let v50;
        try { v50 = ("Vre").charAt(4096); } catch (e) {}
        try { v50.lastIndexOf(f48); } catch (e) {}
        let v52;
        try { v52 = ("Vre").codePointAt(v25); } catch (e) {}
        v52 - v52;
        v52 ^ v52;
        let v55 = Float64Array;
        v55 = a35;
        v25.length;
        v55++;
        try {
            v31.forEach(a35);
        } catch(e59) {
            e59.stack = e59;
        }
        const o70 = {
            "c": v28,
            "c": v30,
            valueOf(a61, a62) {
                return a62;
            },
            1073741824: v27,
            [v28](a64, a65, a66, a67) {
                eval(v40);
            },
            "arguments": 5,
            256: a37,
        };
        ("entries")[256];
    }
    f48();
    const v74 = Array();
    let v75;
    try { v75 = v74.findLast(f33, v27); } catch (e) {}
    v74.unshift("entries", v45, "entries", v75);
    let v78;
    try { v78 = Int8Array.of(); } catch (e) {}
    try { v78.join(v39); } catch (e) {}
    const v80 = new Int8Array(v30);
    v80.c = v80;
    const v81 = v80.buffer;
    v81.maxByteLength;
    const v83 = v81.slice(v39);
    try { Int32Array(v83, arguments, v28); } catch (e) {}
    function f86(a87, a88, a89, a90) {
        return v19;
    }
    const v91 = new v47();
    const v92 = v91[3];
    v92 + v92;
    for (let v94 = 0; v94 < 5; v94++) {
    }
    %OptimizeFunctionOnNextCall(f48);
    try { v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
    return v39;
}
for (let v97 = 0; v97 < 10; v97++) {
    f33(v27);
}
%OptimizeFunctionOnNextCall(f33);
f33();
12204n <= -16;
