const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v0;
    } catch(e3) {
    }
}
new F1();
new F1();
new F1();
class C13 {
    static {
        let v14 = this;
        ({"length":v14,} = "function");
        const t15 = "getUTCHours";
        t15[1] /= v14;
        let v19 = 256;
        33256 ** "function";
        let v23 = ++v19;
        "size" >> "size";
        v23++;
        "function" + 33256;
    }
}
new C13(C13);
new C13();
new C13();
function f30() {
    const o37 = {
        toString(a35, a36) {
        },
        "b": "boolean",
        "c": "boolean",
        ["object"]: f30,
        ["boolean"]: 1000000000000.0,
        "h": 1000000000000.0,
    };
    return o37;
}
const v38 = f30();
f30();
const v40 = f30();
function F41(a43) {
    if (!new.target) { throw 'must be called with new'; }
}
const v44 = new F41();
function f45(a46, a47, a48) {
    const o53 = {
        get a() {
            const o51 = {
            };
            gc();
        },
    };
    return o53;
}
const v54 = f45();
f45();
function F56(a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this.constructor;
    try { new v61(F56, F56); } catch (e) {}
    a59.g = a59;
    this.a = a58;
}
new F56(v40, v38, v44);
new F56(v40, v54);
Math?.expm1;
