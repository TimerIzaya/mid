function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 4096;
    } catch(e3) {
    }
    new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
    const t7 = 4096;
    const v7 = new t7();
    function f8(a9) {
        const v10 = a9.toString(v7);
        class C11 extends Map {
            [v10] = f8;
        }
        const v12 = new C11();
        const o13 = {
            ...v7,
            "f": Map,
            "h": a9,
            [-2]: v7,
            ...v12,
        };
        return o13;
    }
    const v14 = Map(f8);
    const o15 = {
        __proto__: v14,
    };
    try {
        this.e = 4096;
    } catch(e16) {
    }
}
new F0();
new F0();
new F0();
function f23() {
    return 4.0;
}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
}
const v35 = new F33();
const v36 = v35.constructor;
let v37;
try { v37 = v36(); } catch (e) {}
("cbrt").toLocaleUpperCase(v37);
function f40(a41, a42) {
    class C43 {
    }
    const v44 = C43?.call;
    try { v44(v44, v37, a42); } catch (e) {}
    return a41;
}
%PrepareFunctionForOptimization(f40);
f40();
%OptimizeFunctionOnNextCall(v36);
f40(v37, f40);
