Symbol.toPrimitive;
const v3 = [1073741824,1073741823,1376142744,1073741825];
try { v3["find"](); } catch (e) {}
try {
    const v10 = new Uint8ClampedArray(2147483647);
    function f11(a12) {
        return f11;
    }
    const v15 = [v10];
    const o16 = {
        "arguments": v15,
        "type": "function",
    };
    Worker(f11, o16);
} catch(e18) {
}
class C19 {
    [2147483648n];
    constructor(a21, a22) {
        let v23;
        try { v23 = new this(a21, a22, this, a22); } catch (e) {}
        try { new v23(a21); } catch (e) {}
        const v28 = -1e-15 | -1e-15;
        Math.sign(2147483648n);
        const v30 = +v28;
        v30 * v28;
        v30 ** -1e-15;
        !9007199254740992;
        const v36 = new Date();
        v36.setUTCDate(0.1720098570652283);
        const v40 = new Uint32Array(Uint32Array, Uint32Array, 4);
        v40[2];
    }
}
new C19(1073741824n, 1073741824n);
new C19(1073741824n, 1073741824n);
new C19(65535n, 1073741824n);
new Uint8Array(3);
new Int32Array(256);
const v53 = new Uint32Array(3);
class C54 {
    constructor(a56, a57, a58, a59) {
        for (let v60 = 0; v60 < 5; v60++) {
            v53[v60] = a59;
        }
    }
}
new C54();
let v63 = Int16Array;
function f64() {
    return f64;
}
class C65 extends f64 {
}
try {
    v63 &= C65;
} catch(e66) {
}
new v63(10);
("entries").toUpperCase();
