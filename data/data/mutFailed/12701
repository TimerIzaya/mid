const v4 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
v4.constructor;
BigUint64Array <= 0.7221600461335677;
const t1 = 885.3697020072959;
new t1();
const o13 = {
    "execution": "async",
};
new Int16Array(129);
BigInt(BigInt);
function f21(a22, a23, a24, a25) {
    try { a22.findIndex(f21, f21); } catch (e) {}
    a23.toLocaleString();
    return arguments;
}
const v29 = new Uint32Array(5);
const v32 = new Uint32Array(6);
let v33;
try { v33 = v32.map(6); } catch (e) {}
v4.constructor;
6n | 6n;
new BigUint64Array(10);
v29.length &= 3.0;
for (let v42 = 0; v42 < 5; v42++) {
    function f43() {
        [Math.atanh(v42)];
        return Math;
    }
    const v47 = f43();
    v47.E ^= -1073741824;
    v47[3061] = f43;
    v42[8] = f43;
    try {
        new f43();
    } catch(e49) {
    }
    %OptimizeFunctionOnNextCall(f43);
}
[2.220446049250313e-16,3.0,1.714336995658801,-Infinity,-823877.1069671155];
[1.7976931348623157e+308,0.0,2.220446049250313e-16,4.0919717098790205,0.4710141183601818,-4.0,761521.5124095217];
[-8.205236587242256e+307,-1000000000.0,2.465131399703887e+307,2.502966766105788e+307,0.44299823975312114];
try { v33.some(); } catch (e) {}
5 | 129;
