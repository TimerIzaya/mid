const o3 = {
};
new Proxy("YJh", o3);
([Float32Array])["concat"]();
let v12 = 536870889;
let v13 = 10;
for (; v13--;) {
}
class C15 {
    static #p(a17, a18) {
        const o19 = {
        };
        const v21 = new Set(this, o19);
        return v21;
    }
    static ["symbol"] = "symbol";
    constructor(a23, a24) {
        function f25(a26, a27, a28, a29) {
            return arguments;
        }
        for (let v31 = 0; v31 < 5; v31++) {
            const v32 = f25();
            v32[1] = v32;
        }
    }
    /*
    constructor(a34, a35) {
        return a34;
        const o36 = {
            "d": a35,
        };
        const v38 = new BigUint64Array();
        const v39 = /anVXYFzN(x)(x)(x)\3/gvdms;
        try { v38.reduceRight(v39); } catch (e) {}
        function f41() {
            return v12;
        }
        f41--;
    }
    */
    9 = "symbol";
    static #d;
    7;
    d;
    static #a;
}
try {
    function F43() {
        if (!new.target) { throw 'must be called with new'; }
    }
    Array(127);
    function f47() {
    }
    function f48() {
        const o53 = {
            "b": f47,
            valueOf() {
                try { this.b(); } catch (e) {}
                try { this.b(); } catch (e) {}
                [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
            },
        };
        try { o53.b(); } catch (e) {}
        return o53;
    }
    const t65 = "gl";
    t65.growable = v12;
} catch(e55) {
}
try {
    new C15(false, 127);
} catch(e58) {
}
const v59 = new C15(-14889, 127, v12, C15, "YJh");
new C15(v12, v12);
new C15(v12, 127);
const v64 = new Float64Array(9);
new Uint32Array(1);
v64[v64] = "symbol";
v12 = 128;
[0.4171206632320579,-448.605606587426,-1.652899883917338e+308,-747.6184121372169,925.8343139278429,-1.5718229352561616e+308,4.107962156784133,0.5474527373289937];
[1000.0,9.491932517857482,0.6447817049792425];
[1000000000000.0,-1.0,-4.0,0.5535955008949255,NaN,-1000000000.0,-529.5963004927711,1.6046627461517218e+308,112133.59523367812];
new Int16Array(128);
const v76 = new BigUint64Array(1000, v64, v59);
function F77() {
    if (!new.target) { throw 'must be called with new'; }
    function f79(a80) {
        for (let i = 0; i < 10; i++) {
            ["object"];
        }
    }
    Object.defineProperty(this, "c", { enumerable: true, set: f79 });
    this.c = -28191;
}
const o84 = {
    ...v76,
};
let v86 = 5;
v86--;
([v86,v86]).join(v86).localeCompare(4096);
