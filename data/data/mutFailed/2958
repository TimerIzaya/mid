const v2 = new Uint32Array(Uint32Array);
v2.d = v2.__proto__;
const v8 = new Int32Array(512);
new Uint32Array(v8);
Int32Array.prototype = Int32Array;
const v11 = new Int32Array(7);
class C13 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v19;
        try { v19 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v19.#p(undefined, v19, v19, undefined);
        } catch(e21) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v22 = new C13();
const v23 = new C13();
function f24(a25) {
    const o31 = {
        15: a25,
        toString(a27, a28) {
            super.h = a28;
            try { C13.stringify(a25, a25, this); } catch (e) {}
            try {
                C13.c = v22;
            } catch(e30) {
            }
            return a27;
        },
        2147483647: undefined,
        __proto__: v23,
        "c": a25,
        ...a25,
        "f": a25,
    };
    return o31;
}
const v32 = f24(C13);
try {
    new f24(v32);
} catch(e34) {
}
const v37 = new BigInt64Array(6);
const v38 = /h\p{gc=Nd}/vdy;
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
}
const v47 = new F41(v38, F41, -23596, 1);
v47 | F41;
const v49 = [Uint32Array,Uint32Array,BigInt64Array];
("4294967296").toLocaleUpperCase();
-425087802 >>> -425087802;
([1073741824,1073741823,1376142744,1073741825]).forEach(Float64Array);
const v57 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
(v37 && Float64Array) <= v57;
const v60 = [Uint32Array,v49,v37,7,v2];
v60[3] = v60;
const v62 = ([v60,Int32Array,Int32Array,v60])?.toSpliced;
try { new v62(v37, BigInt64Array); } catch (e) {}
const v66 = new Date();
const v68 = new Uint16Array(-425087802);
try {
    const o69 = {
    };
    o69.e = v2;
    o69.c = v11;
    o69.g = v68;
} catch(e70) {
}
v66.setUTCDate(0.1720098570652283);
