class C3 {
    #n(a5, a6) {
        const v7 = super[this];
        const v8 = this[0];
        function F9(a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a12;
            } catch(e14) {
            }
        }
        const v15 = new F9(this, F9, 0.44892981811958366);
        const v16 = new F9(v15, this, this);
        new F9(v8, v7, C3);
        return v16;
    }
}
new C3();
new C3();
const t19 = 0.44892981811958366;
new t19();
[5,-58565,1741333220,4294967296,2061679482,256,4294967296,26576];
[-60108,1300819703,-2,5,-49843,19403,-40325,-2147483649,12,256];
[660023159,2083591543,-4096,-21898,11,54254,-1024,1024,7];
const v30 = [65537,268435441,63298,-5,1235122603];
const v31 = [128,215394418];
const v32 = [-2,-4294967296,4294967297];
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(1024, 1024, v30, this); } catch (e) {}
    a36.caller;
    a38[1];
    this.c = a37;
    [Reflect];
    const o45 = {
        __proto__: Reflect,
        "e": v39,
    };
    this.f = a36;
}
const v46 = new F33(-714582153, F33, -714582153, v31);
new F33(9, v46, 9, v32);
