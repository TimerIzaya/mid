const v2 = new Float32Array(91);
const v5 = new Float32Array(3666);
new Float32Array(3);
const v9 = Float32Array !== v2;
if (v9) {
    v9 in v2;
} else {
    v5 - v5;
    const v14 = 6013 - 6013;
    let v15 = v5 & v5;
    Math.cbrt(6013);
    const v17 = ++v15;
    ~6013;
    +v17;
    +v14;
}
new Uint8Array(512);
9 % 9;
Uint8ClampedArray.d = Uint8ClampedArray;
new Uint8ClampedArray(9);
const v30 = new BigInt64Array(10);
const v31 = v30[1];
const v33 = ("getOwnPropertySymbols")[11];
"setUint32" == "setUint32";
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this?.constructor;
    try { new v46(3666, a45, "toString", a45); } catch (e) {}
    -a45;
    try {
        this.h = -9;
    } catch(e49) {
    }
    try {
        this.b = 5;
    } catch(e50) {
    }
}
new F40(-9, 1073741824, "toString", 1073741824);
new F40(1073741824, 1073741824, F40, "setUint32");
function f53(a54, a55, a56, a57) {
    Object.defineProperty(a54, "e", { writable: true, configurable: true, value: v30 });
    try { v31(Uint8ClampedArray, BigInt64Array); } catch (e) {}
    a54[1073741824] ^= v33;
    return Uint8Array;
}
f53("getOwnPropertySymbols", v31, Float32Array, Float32Array);
const v60 = new F40(-9, 1073741824, 1073741824, "setUint32");
function f61(a62, a63) {
    a63[7];
    const o70 = {
        "f": -9,
        set e(a66) {
            Reflect.construct(a66, [a62,v60,Reflect,a63], a66);
        },
        ["getOwnPropertySymbols"]: v60,
        "e": "toString",
        9: "toString",
    };
    return o70;
}
const v71 = f61(v60, "toString");
v71[9] = v71;
const v72 = f61(v60, 1073741824);
v72[9];
let v74 = f61(v60, 5);
v74.__proto__;
class C76 {
    static #e = v72;
    m(a78, a79, a80) {
        try {
            a79.#e >>>= a78;
        } catch(e81) {
        }
        return v72;
    }
    #n(a83, a84) {
        Object.defineProperty(a83, "a", { writable: true, configurable: true, value: f61 });
    }
}
const v85 = new C76();
v74 = v85 && "getOwnPropertySymbols";
