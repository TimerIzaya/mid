new Array(82);
const v6 = 1000 + 1000;
const v7 = [551,-7,10000,16,4294967296,-2,257,25980];
const v8 = [65536,7,-153559401];
const v9 = [9,-11,-65287,-1715432078,65535];
const v11 = -23598;
const v14 = /[]\u0034jC\P{sc=Greek}/gusy;
const v16 = Array(-9007199254740992);
let v17;
try { v17 = ("EPSILON").trimStart(); } catch (e) {}
v17[3] = -9007199254740992;
let v18;
try { v18 = v17(v14); } catch (e) {}
v8[v11];
const t13 = "string";
t13[2] = "string";
const v23 = Array in v8;
const v24 = ["string",...v16,...v16,82];
try { v18.all(v24, v23, v11, v6, "string"); } catch (e) {}
Math.atanh(82);
const v32 = -414861.7528586192 * -414861.7528586192;
Math.max(v11);
Math.sinh(-(~v32 - 82));
try { new Int16Array(25424, v9, Int16Array); } catch (e) {}
v9[v7];
[-1.4054244737075372,1000.0,1000.0];
[748980.6648983017,-1000000.0,-464.2643375680801,1.8052252771591082,-5.034070887431199];
[631934.3133030725,-0.0,0.12167416690478206,0.0,1.3496556439249907e+308,159.6339727954903,-342.153326251619,-Infinity,9.887589854429255];
const o49 = {
    "maxByteLength": 4033,
};
const v51 = new SharedArrayBuffer(4033, o49);
new BigInt64Array(v51);
3545 >> 3545;
const v59 = new BigUint64Array(6);
function F61(a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this.constructor;
    try { new v64("toString"); } catch (e) {}
    a63[5];
}
new F61(v59);
new F61("toString");
-2059473125 - -2059473125;
const v72 = [];
class C76 {
    constructor(a78) {
        function* f79(a80, a81) {
            yield* v72;
            return a80;
        }
    }
}
