function f0() {
    const o12 = {
        __proto__: "n",
        "a": "CQoFh",
        get h() {
            try {
                this.g = "CQoFh";
            } catch(e5) {
            }
            return -12908;
        },
        "h": 8.761251996201509e+307,
        ["CQoFh"]: "CQoFh",
    };
    return o12;
}
const v13 = f0();
f0();
const v15 = f0();
-1349822283 % -1349822283;
1178983298 === 1178983298;
function f24(a25, a26, a27, a28) {
    return a25;
}
const v29 = new f24(-1349822283, v13, -1547267477n, -1349822283);
v29[257] = 1178983298;
try { f24(-1547267477n, v13, 1178983298, 1178983298); } catch (e) {}
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
}
const o38 = {
};
function f42(a43, a44) {
    const o47 = {
        968: a44,
        "d": a43,
        [268435439n]: 2105444095n,
        __proto__: o38,
        "g": F34,
        ...a44,
        "b": -4294967296n,
        "f": v15,
        valueOf(a46) {
            return a46;
        },
    };
    return a44;
}
for (let v48 = 0; v48 < 100; v48++) {
    f42(-4294967296n, v48);
}
const v50 = f24();
let v51 = -4294967297n;
const v52 = v51++;
-128 / -128;
const v55 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v56 = [601759695];
v56[0] = v56;
const v57 = [1073741824,1073741823,1376142744,1073741825];
function f59(a60, a61, a62, a63) {
    a61.toString = f0;
    a61 * a61;
    a62 == a62;
    arguments[2] = arguments;
    const v67 = arguments.toString();
    try { v67.fixed(); } catch (e) {}
    function f69() {
        const v71 = ("Vre").toLocaleUpperCase;
        try { new v71(v71, v51, a62, v57); } catch (e) {}
        const v73 = ("Vre").fixed(f59);
        let v74;
        try { v74 = v73.codePointAt(f59); } catch (e) {}
        let v76 = -268435456;
        const v77 = v76--;
        -(v76 + v76);
        const o93 = {
            "c": v51,
            [522675525n](a81, a82) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v56,
            [v74]: -1547267477n,
            __proto__: a62,
            "d": v77,
            "e": -4294967295,
            "h": -128,
            valueOf(a84, a85) {
                return a84;
            },
            "e": -4294967295,
            "e": v76,
            "maxByteLength": -4294967295,
            "arguments": v55,
            ...v56,
            "type": "Vre",
            ..."Vre",
            valueOf(a87, a88) {
                return -4294967295;
            },
            ..."Vre",
            4: "Vre",
            "c": v76,
            "type": "Vre",
            "type": "Vre",
            toString(a90, a91, a92) {
                return a90;
            },
            5: -4294967295,
            6: v76,
        };
        o93[5] = o93;
        const v94 = o93.valueOf();
        v94 * v94;
        return f59;
    }
    const v96 = f69.length;
    const v97 = f69();
    v97[Symbol.species] = f24;
    Object.defineProperty(Int8Array, "a", { writable: true, value: v52 });
    Int8Array.a = Int8Array;
    const v101 = new Int8Array();
    try { v101.findIndex(v50); } catch (e) {}
    const v103 = v101.buffer;
    v103.constructor = v97;
    const v104 = v103.slice();
    v104.constructor = v97;
    try { v104.slice(v96, v13); } catch (e) {}
    %OptimizeFunctionOnNextCall(f69);
    const v107 = ("find").strike();
    try { v107.toWellFormed(); } catch (e) {}
    try { v57["find"](..."find", a63, ...v56, ...v57, ...522675525n); } catch (e) {}
    return v57;
}
f59[Symbol.toPrimitive] = f59;
f59.arguments = f59;
for (let v112 = 0; v112 < 5; v112++) {
    const v113 = f59(v56, v112, v112, v57);
    v113[3] = v113;
}
%PrepareFunctionForOptimization(f59);
const v114 = f59();
%OptimizeFunctionOnNextCall(f59);
f59(v114, f59, -128, v50);
