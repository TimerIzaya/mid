Date.name;
const v5 = new Date();
const v7 = new Set();
const v8 = v7.size;
let v9;
try { v9 = v7.delete(-1); } catch (e) {}
const v10 = !v9;
const v11 = v9 && v9;
v11 || v11;
const v13 = [-23407];
v13.g = v10;
const v14 = [2147483648,1,-9900,-1833182768,-268435456,1073741824];
const v15 = v14[3];
const v16 = [-2147483649,16647,673332650,10894,12004173,-1];
class C17 extends Set {
    #e = Date;
    [v13] = v8;
    [Date] = -1;
    toString(a19, a20, a21, a22) {
        const v23 = a19?.call;
        try { new v23(v14); } catch (e) {}
        a22 >> a22;
        try {
            Date();
        } catch(e27) {
        }
        return this;
    }
    #b = v13;
    static 2296 = v16;
    f = v7;
    static h;
}
let v28;
try { v28 = new v15(); } catch (e) {}
const v29 = v28?.constructor;
let v30;
try { v30 = new v29(); } catch (e) {}
const v31 = new C17();
let v32;
try { v32 = v31.toString(Set, 512, v5, 7); } catch (e) {}
v32.b = v32;
const v33 = new v30();
let v34;
try { v34 = v33.values(); } catch (e) {}
try { v34.next(); } catch (e) {}
const v36 = v34?.__lookupSetter__;
v36.name;
try { new v36(-1); } catch (e) {}
const v39 = new C17();
try { v39.has(512); } catch (e) {}
try { Math.cos(v10); } catch (e) {}
const v44 = -1073741824 / -1073741824;
v44 >>> v44;
const v46 = -1073741824 !== -1073741824;
v46 && v46;
Math.cos(-1073741824);
