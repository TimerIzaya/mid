function f0() {
}
new Int8Array(1024);
const v6 = new Date();
v6.setFullYear(v6, Date, v6);
const v8 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
v8.includes(...v8);
new Uint16Array(3);
new Uint32Array(256);
function F18() {
    if (!new.target) { throw 'must be called with new'; }
}
class C20 {
}
const v21 = new C20();
function f22(a23, a24, a25) {
    const v29 = new Uint8ClampedArray(112);
    const v32 = new Uint8Array();
    try { v29(-85357.59116785484, ...v32, 64, 46, -3.383486186086852e+307, ...v29); } catch (e) {}
    const o36 = {
        __proto__: a24,
        1073741824: v21,
    };
    return f22;
}
class C37 extends F18 {
}
function f38() {
}
%OptimizeFunctionOnNextCall(f38);
new C37();
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    a43 === a43;
    const v47 = new BigUint64Array();
    const v48 = /anVXYFzN(x)(x)(x)\3/gvdms;
    try { v47.reduceRight(v48); } catch (e) {}
    9n >> 9n;
    function f52() {
        const v55 = ("D")[0].substring();
        v55 == v55;
        v55.charCodeAt();
        return "D";
    }
    f52();
    this.constructor;
    new Uint16Array(1657);
    const v64 = new Map();
    const v65 = [0.22765518540216179,1000000000000.0,95110.62484655366,1000000000.0,3.436859148069951,-0.0,2.0,-5.0];
    const v66 = [513779.5906574144,1.7409613810254415e+307,98.0881888203628,0.0];
    function f67(a68, a69) {
        a68[7];
        const o78 = {
            ...a68,
            ...v65,
            [v65](a72, a73) {
                a73[v64];
                const v75 = a69.length;
                a68 == v75 ? a68 : v75;
                return a69;
            },
            __proto__: v64,
            ...v66,
            "a": Map,
            "b": a69,
            [a69]: a69,
        };
        return o78;
    }
    f67(v8, v8);
    let v80 = 0;
    do {
        try {
            v8.toString = f67;
        } catch(e81) {
        }
        v80++;
    } while (v80 < 3)
}
function f85() {
    class C86 {
    }
    const v87 = new C86();
    for (let v88 = 0; v88 < 5; v88++) {
        new F40(undefined, v87);
        const v92 = new WeakSet();
        let v95 = -4294967297n;
        v95++;
        const v98 = [601759695];
        const v99 = v98.splice(-128, -128, -1547267477n, v8);
        const v100 = [1073741824,1073741823,1376142744,1073741825];
        function f102() {
            const v104 = ("Vre").toLocaleUpperCase;
            try { v104(v104, v95, v92, v100); } catch (e) {}
            const v106 = ("Vre").fixed();
            try { v106.replace(v104, "g"); } catch (e) {}
            const v108 = v106.codePointAt();
            const v109 = v108 * v108;
            let v111 = -268435456;
            const v112 = v111--;
            const o126 = {
                "c": v95,
                [522675525n](a114, a115) {
                },
                ..."Vre",
                "maxByteLength": -128,
                "c": v98,
                [v95]: -1547267477n,
                __proto__: v92,
                "d": v112,
                "e": -4294967295,
                "h": v99,
                valueOf(a117, a118) {
                    return v106;
                },
                "e": -4294967295,
                "e": v111,
                "maxByteLength": -4294967295,
                "arguments": v8,
                ...v98,
                "type": "Vre",
                ..."Vre",
                valueOf(a120, a121) {
                    return this;
                },
                ..."Vre",
                4: "Vre",
                "c": v111,
                "type": "Vre",
                "type": "Vre",
                toString(a123, a124, a125) {
                    return this;
                },
                5: -4294967295,
                6: v111,
            };
            o126[60] = v109;
            o126[60] = o126;
            const t138 = "Vre";
            t138[5] = o126;
            const v127 = o126.valueOf();
            v127[60] = v127;
        }
        f102();
    }
}
%PrepareFunctionForOptimization(f85);
f85();
function* f130(a131, a132, a133) {
    return a132;
}
f130();
function f136(a137, a138, a139, a140) {
    Object.defineProperty(a137, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f136 });
    const o147 = {
        toString(a144, a145) {
            new Date(a137);
            return this;
        },
    };
    return o147;
}
%OptimizeFunctionOnNextCall(f85);
f85();
