let v1 = BigUint64Array;
function f2(a3, a4) {
    a4[14] = a3;
    typeof a3 === "symbol";
    return "symbol";
}
v1.toString = f2;
const v8 = new v1(14);
const v11 = new Int8Array(1443);
function f12(a13, a14) {
    function F16(a18, a19) {
        if (!new.target) { throw 'must be called with new'; }
        const v20 = ("async").constructor;
        v20.raw(v20);
    }
    return 14;
}
v11[Symbol.toPrimitive] = f12;
function f24(a25, a26) {
    v1 <<= v1;
    Symbol.hasInstance.toString();
    return a26;
}
v11[Symbol.toPrimitive] = f24;
function f32() {
    function f33(a34, a35) {
        a35();
        return f33;
    }
    return 14;
}
const v37 = [0.00952483356421907,-3.0,2.220446049250313e-16];
v37[Symbol.toPrimitive] = f24;
function f40() {
    return v37;
}
function F41() {
    if (!new.target) { throw 'must be called with new'; }
}
v11.toString = f32;
new Float64Array(64);
function f49(a50, a51) {
    const o65 = {
        "e": v8,
        __proto__: v8,
        [v11]: v8,
        "a": v1,
        "b": v11,
        [-8]: Float64Array,
        "b": -4294967297,
        "defineProperty": f32,
        [v37]() {
        },
        "e": -4294967297,
        3785361866: 14,
        "d": a50,
        n(a54, a55) {
            const v58 = new BigUint64Array(16);
            try { Float32Array.apply(16, v58); } catch (e) {}
            Float64Array in v8;
            return Int8Array;
        },
    };
    return o65;
}
f49(-8, 64);
f49(1443, 14);
f49(-4294967297, 64);
class C72 {
}
new C72();
new C72();
for (let i80 = 0, i81 = 10;
    i80 < i81;
    (() => {
        i80++;
        const o88 = {
            "f": "k",
            get f() {
                return this;
            },
        };
        i81--;
    })()) {
    new C72();
}
