let v7 = 65536;
/a(?=b)c/g;
/foo(?<=bar)baz9a\nb\bcO/my;
const v11 = /l[a-zA-Z0-9]t/gumy;
function F12() {
    if (!new.target) { throw 'must be called with new'; }
}
new F12();
--v7;
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
function f21(a22, a23, a24, a25) {
    function f27() {
        const o35 = {
            84: arguments,
            set b(a30) {
            },
            ["Vre"](a32, a33) {
                super[f27];
            },
        };
        return f21;
    }
    f27();
    %OptimizeFunctionOnNextCall(f27);
    return a24;
}
for (let v37 = 0; v37 < 5; v37++) {
    f21();
}
const v39 = new F12();
const t32 = -65536;
const v40 = new t32();
const v41 = [v39];
const v42 = [v40,v39,v40,v40];
[v39,F12,v42,v42,v41];
[-6];
[15,1000,456510946,268435439,-4096,-1621925631,-536870912,4294967295,127,768050783];
class C46 {
}
new C46();
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    for (let [v51,v52,v53,v54] of F48) {
    }
}
[-30837,-2147483647,11,14];
const v59 = new Uint32Array(1000);
new BigUint64Array(154);
const v65 = v11.constructor.prototype;
for (let v66 = 0; v66 < 5; v66++) {
}
const v69 = new Float64Array(6);
new v65(v69);
eval();
new Int32Array(2);
new Uint8Array(134);
const v79 = delete v41?.length;
try { v79["cbrt"](v59, Uint32Array, v39, v40, v79); } catch (e) {}
const o82 = {
};
function f84(a85, a86) {
    return -588750793;
}
Float32Array.toString = f84;
new Proxy(Uint8Array, o82);
for (let v90 = 0; v90 < 5; v90++) {
}
