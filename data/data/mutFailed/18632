const v1 = /mLQO/vm;
const v2 = /\P{Any}?/gu;
function F5() {
    if (!new.target) { throw 'must be called with new'; }
}
const v7 = new F5();
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this?.constructor;
    try { new v12(a11, a11); } catch (e) {}
}
const v14 = new F8(F8, 2030);
const v17 = [];
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    const v24 = Date.toString(F19, 9223372036854775807);
    try { v24.match(v2); } catch (e) {}
    v24.replaceAll(v7, -37859n);
    v14.length;
    new Uint32Array(Uint32Array, Uint32Array, 4);
    const v32 = new Set(v17);
    const v33 = v32.add;
    try { v33.bind(); } catch (e) {}
    try { new v33(v24); } catch (e) {}
    const v37 = ("delete")?.slice;
    try { new v37(v1); } catch (e) {}
    const v40 = 256 || v32["delete"]();
    v40 || v40;
    const v42 = v40 && v40;
    const o44 = {
    };
    o44.g = o44;
    o44.b = o44;
    o44.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    let v48;
    try { v48 = ("getPrototypeOf").blink(); } catch (e) {}
    v48.f = v48;
    const v50 = v48[28].strike();
    try { v50.padEnd(this); } catch (e) {}
    const v53 = v48.strike(591114.0785999324).replace(19793, v14);
    let v54;
    try { v54 = v53.normalize(); } catch (e) {}
    v53[11] = v54;
    class C56 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C57 extends C56 {
        ["getPrototypeOf"] = v50;
    }
    try { new C57(); } catch (e) {}
    let v59;
    try {
    const t0 = 4;
    v59 = new t0();
    } catch (e) {}
    const v60 = v59?.getPrototypeOf;
    try { new v60(); } catch (e) {}
    v59.getPrototypeOf;
    let v63;
    try { v63 = new C57(); } catch (e) {}
    const v64 = v63?.getPrototypeOf;
    let v65;
    try { v65 = new v64(); } catch (e) {}
    v65.b = v65;
    const v66 = new C57();
    const v67 = v66.getPrototypeOf;
    try { new v67(); } catch (e) {}
    let v69;
    try { v69 = new v67(); } catch (e) {}
    v69.getPrototypeOf = v69;
    let v70;
    try { v70 = v69.propertyIsEnumerable(v53); } catch (e) {}
    v70 || v70;
    const v72 = v69?.constructor;
    let v73;
    try { v73 = new v72(v48, this, 4); } catch (e) {}
    v73.valueOf();
    try { v73.constructor(); } catch (e) {}
    const v76 = v66.constructor;
    let v77;
    try { v77 = new v76(F19, v42); } catch (e) {}
    const v78 = v77.getPrototypeOf;
    const v80 = v78?.apply?.apply;
    try { new v80(C56, v72); } catch (e) {}
    try { new v78(); } catch (e) {}
    const v83 = Array(19793);
    v83.pop();
    for (const v85 of v83) {
    }
}
const v90 = -(-7);
Math.tan(v90 ** v90);
for (let i96 = 0, i97 = 10; i96 < i97; i97--) {
}
const v105 = new Uint32Array(257);
new Float64Array(1296);
new BigInt64Array(2672);
new Int8Array(255);
new Int32Array(0);
const v119 = [1984879050,0,-8575,7,1073741825];
function f120(a121, a122, a123, a124) {
    a122 - a122;
    arguments[1] = arguments;
    function f127() {
        ("Vre").constructor;
        const v131 = new Uint8ClampedArray();
        for (const v134 in [[],v131]) {
        }
        ("Vre").fromCharCode(v119);
        const o136 = {
            84: arguments,
        };
    }
    try { f127(); } catch (e) {}
    f127();
}
for (let v139 = 0; v139 < 10; v139++) {
    f120();
}
new Int16Array(10);
new Int32Array(v105);
class C146 {
    o(a148, a149) {
    }
    static {
        class C151 {
        }
        new C151();
    }
}
for (const v155 in "1024") {
}
const v156 = [1000000000.0,1e-15,989016.9113359165,2.0,-3.0,-0.45082901916260454,-1.7976931348623157e+308,-0.0,0.44579722066888483];
try { Reflect.defineProperty(v156); } catch (e) {}
function f159() {
    return [f159];
    class C161 {
        536870887;
    }
    -601018.3320674116 + isFinite;
    return -601018.3320674116;
}
%PrepareFunctionForOptimization(f159);
f159();
%OptimizeFunctionOnNextCall(f159);
f159();
