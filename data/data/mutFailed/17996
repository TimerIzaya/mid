const v1 = new Date();
function f2() {
    return v1;
}
const v3 = [Date,v1];
v3[1] = v3;
const v4 = [v1,Date];
const v5 = [v3,v4,v4,v1];
new Set();
class C11 {
    #n(a13, a14, a15) {
        try { a13.copyWithin(a14, 16); } catch (e) {}
        Set / this;
        return a13;
    }
    static #toString(a22, a23, a24, a25) {
        f2 &&= f2;
        try {
            f2();
        } catch(e27) {
        }
        return f2;
    }
}
const v31 = new C11();
new C11();
new C11();
const v35 = [-56096,34474,268435440,1149411099,4096,-19981,257,-4294967296];
[-553818179,-1682442151,7,268435440,-1,15,-6797,-15,318788312];
const v37 = [257,-1765345453,10000,-25811,26341,1073741824,128];
const v38 = v37[v5];
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a42;
    } catch(e44) {
    }
    try {
        this.f = a43;
    } catch(e45) {
    }
}
new F39(v5, v37, -5411);
new F39(-4294967296, v35, 9007199254740992);
const v48 = new F39(v31, v35, 9007199254740992);
const v51 = Symbol.replace;
v37[v51] = 9007199254740992;
v5 & v4;
Date.prototype;
try { new Date(16, 16, v1, v1, v31, Date, v1); } catch (e) {}
class C55 extends Date {
}
const v56 = new C55(-4294967296);
const v57 = v56?.getDay;
try { new v57(); } catch (e) {}
v48.__proto__;
v3[4] = v38;
v1[1475923012];
Date(-5411);
-5411 >> v51;
Object.defineProperty(Date, v56, { get: Date, set: Date });
