new Uint8ClampedArray(1634);
new BigInt64Array(3684);
new BigUint64Array(257);
const v17 = new Int32Array(1);
new Int8Array(BigInt64Array);
const v21 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v22 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v23 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    try {
        this.d = a26;
    } catch(e29) {
    }
    try {
        this.b = v17;
    } catch(e30) {
    }
}
const v31 = new Int32Array(Int32Array, 12, v22);
new F24(v22, 5, v23);
new F24(v21, 12, v21);
const t23 = 3684;
t23[65536] = 5;
v31[65536];
const o36 = {
};
o36.type = 1634;
gc(o36);
const t29 = 12;
new t29(162);
function f41(a42, a43, a44, a45) {
    [-3.942521664036782e+307,-3.942521664036782e+307,[]];
    return -3.942521664036782e+307;
}
for (let v49 = 0; v49 < 10; v49++) {
    f41();
}
%OptimizeFunctionOnNextCall(f41);
f41(f41, f41, f41, f41);
