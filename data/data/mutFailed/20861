const v3 = new Int16Array();
v3[Symbol.unscopables] = v3;
with (v3) {
    -(byteLength || byteLength);
}
const v9 = new BigUint64Array(512);
let v12 = -1024;
function F13(a15, a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a15(a16, a16, a18, a16); } catch (e) {}
    try { a16.apply(a15, a15); } catch (e) {}
}
F13[1] = v12;
try { new F13(BigUint64Array, v3, Uint32Array, Uint32Array); } catch (e) {}
const v22 = new F13(F13, F13, v12, v12);
v22.constructor = Symbol;
const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v24 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
-4294967297n / -4294967297n;
const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = [601759695];
try { v30.values(); } catch (e) {}
function f33() {
    let v35 = -4294967295;
    v35--;
    let v37 = Float64Array;
    let v38;
    try { v38 = new v37(v9); } catch (e) {}
    v37 = Int16Array;
    b = v30;
    const v39 = v23.length;
    try {
        v23.forEach(v37);
    } catch(e41) {
        e41.message;
    }
    const v43 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    try { v43.lastIndexOf(512); } catch (e) {}
    let v45 = Symbol.toPrimitive;
    Symbol.for(v45.description);
    const o53 = {
        toString(a49, a50) {
            const v51 = v9 && v37;
            a49 *= v45;
            v51 <= v43;
            return v45;
        },
    };
    try { o53.toString("Vre", v38); } catch (e) {}
    const o75 = {
        "c": -4294967297n,
        [522675525n](a57, a58) {
        },
        "c": 254,
        valueOf(a60, a61) {
            return Int16Array;
        },
        "b": v35,
        [-4294967297n](a63, a64, a65, a66) {
        },
        "e": v38,
        "maxByteLength": v35,
        "arguments": v29,
        ...v22,
        [v45]() {
        },
        "type": Uint32Array,
        ..."Vre",
        valueOf(a69, a70) {
            return f33;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        toString(a72, a73, a74) {
        },
        5: v35,
        6: -268435456,
    };
    v45 = v37;
    Float32Array.BYTES_PER_ELEMENT = Float32Array;
    new Int16Array(1334);
    v12 %= -268435456;
    const v79 = new Uint32Array(v24, v39);
    v79.toString = Symbol;
    v79[2] = v79;
    return v22;
}
const v81 = f33()?.constructor;
try { new v81(v9, Int16Array, Int16Array, -4294967297n); } catch (e) {}
%OptimizeFunctionOnNextCall(f33);
new Uint32Array(254);
7 & 7;
function f87() {
    return WeakSet;
}
function f88(a89, a90) {
    function F97(a99, a100, a101) {
        if (!new.target) { throw 'must be called with new'; }
        const v102 = this.constructor;
        try { v102.call(-45095n); } catch (e) {}
        try { new v102("asinh", 9007199254740991n); } catch (e) {}
    }
    new F97(64n, -16458616, -2147483649);
    return v30;
}
f87.valueOf = f88;
f87 >= 7;
new Uint16Array(7);
class C109 {
    constructor(a111, a112) {
        const v113 = this.constructor;
        try { new v113(); } catch (e) {}
        let v115 = 0;
        for (let i = 0; i < 10; i++) {
            Math.atan();
            const v119 = v115++;
            v119 - v119;
        }
    }
}
const o125 = {
};
function f127(a128, a129) {
    const v130 = a128?.apply;
    try { new v130(254, Uint32Array); } catch (e) {}
    try { a129.bind(WeakSet); } catch (e) {}
    Object.defineProperty(o125, 564n, { writable: true, configurable: true, enumerable: true, set: Date });
    return a129;
}
new Promise(f127);
function f135() {
    59817n < undefined;
    return C109;
}
