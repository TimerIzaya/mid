const v0 = /Q/ds;
v0.p2 = v0;
const v1 = /(x)(x)(x)\4*/isy;
const v2 = /vHt(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10xyz{1,}?/gvdms;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a6;
    } catch(e7) {
    }
}
const v8 = new F3(v1, v1);
const v12 = [0.0,-2.220446049250313e-16];
let v13;
try {
const t0 = 16;
v13 = t0(16, 16);
} catch (e) {}
function f14() {
    return f14;
}
f14.toString = f14;
class C15 extends f14 {
}
class C16 {
    constructor(a18, a19) {
        let v22 = v12[v13];
        v22 **= 16;
        function f23(a24, a25, a26, a27) {
            return 2;
        }
        for (let v28 = 0; v28 < 625; v28++) {
            f23(Uint8Array, 2, v28);
            try {
                a18 &= C15;
            } catch(e30) {
            }
        }
    }
}
const v31 = new C16();
65537 == 4096n;
const v33 = /a\sc/gm;
function f34() {
    const v37 = 733186615 >>> 733186615;
    const v38 = v2 / 733186615;
    Math.trunc(v38);
    Math.tanh(v38 % v37);
    ~v37;
    return v2;
}
Object.defineProperty(v33, "toString", { writable: true, value: f34 });
function f43(a44) {
    class C45 {
    }
    const v46 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
    function f47() {
        const v49 = new BigUint64Array();
        v49 && BigUint64Array;
        return v31;
    }
    v46.valueOf = f47;
    const v53 = new Date(-2, v46);
    v53.getHours();
    const o57 = {
        n(a56) {
            return a56;
        },
        2778757984: v13,
        [a44]: a44,
    };
    return a44;
}
f43(v33);
const v59 = new F3(v1, v0);
const v60 = new F3(v1, v2);
Math.sinh();
Math.cos(2);
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
this.printErr();
function f72() {
    for (let [i75, i76] = (() => {
            switch (f72) {
            }
            return [0, 10];
        })();
        i75 - i75, i76 << i76, i75 < i76;
        i75++, i76--) {
    }
    return 16;
}
function F86(a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a89;
    } catch(e90) {
    }
    try {
        this.b = v60;
    } catch(e91) {
    }
}
const v92 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
(v59 && C16) <= v92;
function f95() {
}
const v96 = f95();
for (let v98 = 0; v98 < 25; v98++) {
    const v99 = [1073741824,1073741823,1376142744,1073741825];
    function f100(a101, a102, a103, a104) {
        function f105(a106, a107) {
            return v0[Symbol.hasInstance];
        }
        a102.toString = f105;
        function f112() {
            return f100;
        }
        let v113;
        try { v113 = v99.findIndex(a103, v0); } catch (e) {}
        try {
            v96.d = v99;
        } catch(e114) {
        }
        for (let v115 = 0; v115 < 5; v115++) {
            v0["p" + v115] = v115;
        }
        const v119 = new Int8Array();
        function f120(a121, a122) {
        }
        const v123 = f120(v113, Int8Array);
        const v124 = v119.buffer;
        try { v124.slice(a101, a102); } catch (e) {}
        Object.defineProperty(v124, "constructor", { writable: true, configurable: true, value: Date });
        try { v99["find"](); } catch (e) {}
        const o128 = {
            [v123]: v119,
            "g": v113,
            [f120]: f112,
        };
        return arguments;
    }
    f100.valueOf = f100;
    for (let v129 = 0; v129 < 5; v129++) {
        f100(v96, f100, f100, v99);
    }
}
new F86(v8, v8);
new F86(v59, v60);
new F86(v59, v8);
/xyz?T9E\c/gdmy;
for (let v139 = 0; v139 < 25; v139++) {
    Promise.reject(Promise);
}
800562525 & 800562525;
