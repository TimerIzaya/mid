function f0() {
    let v3 = 0.7525108592271276;
    const v4 = v3 ^ v3;
    const o8 = {
        __proto__: "hneN",
        get a() {
            ("hneN").length;
            v3 = -1000000000.0;
            const t8 = this.__proto__;
            t8.a **= v3;
            const t10 = "hneN";
            t10[268435456] = "hneN";
            return this;
        },
        ..."hneN",
        [v3]: -1000000000.0,
        "h": "hneN",
    };
    function f9() {
        function f10(a11, a12) {
            ~v4;
            const v15 = Symbol.iterator;
            const o24 = {
                [v15]() {
                    let v17 = 10;
                    const o23 = {
                        next() {
                            v17--;
                            const v21 = v17 == 0;
                            const o22 = {
                                "done": v21,
                                "value": v17,
                            };
                            return o22;
                        },
                    };
                    return o23;
                },
            };
            return v4;
        }
        return f10;
    }
    Object.defineProperty(o8, Symbol.toPrimitive, { writable: true, enumerable: true, get: f9 });
    return o8;
}
const v27 = f0();
let v29 = Symbol.toPrimitive;
v27[v29] = f0;
const v30 = f0();
const v31 = f0();
const v35 = -15n;
const v36 = [v27,15n,717075199n,v30,v30];
v36[1] = v30;
const v37 = [v36,v36,f0,-43944n,v36];
try { v37.slice(v27, v35); } catch (e) {}
const v39 = [v37,717075199n,-43944n];
const v41 = new Set();
try { v41.add(v31); } catch (e) {}
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = v36?.__lookupGetter__;
    try { new v48(a45); } catch (e) {}
    a45 === a46;
    try { new BigUint64Array(15n, v48, this); } catch (e) {}
    const v53 = new BigUint64Array();
    try { v53.entries(); } catch (e) {}
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
function f56() {
    for (let v57 = 0; v57 < 5; v57++) {
        v57 < v57;
        const v59 = new F43();
        function f60(a61) {
            ({"h":v29,} = v27);
            const o62 = {
            };
            return v57;
        }
        v59.constructor = f60;
        const v63 = v59?.constructor;
        try { new v63(v31, v39, v39); } catch (e) {}
        const v65 = v59.constructor;
        v41.arguments;
        class C67 {
        }
        C67.constructor = f56;
        try { C67.toString(); } catch (e) {}
        const v69 = new C67();
        function f70() {
            function f71(a72, a73) {
                new Int32Array(1);
                return v65;
            }
            return f71;
        }
        Object.defineProperty(v69, "constructor", { configurable: true, get: f70 });
        const v77 = v69?.constructor;
        const v79 = Symbol.toPrimitive;
        v77[v79] = f60;
        let v80;
        try { v80 = new v77(); } catch (e) {}
        const v81 = v69?.constructor;
        function f82(a83) {
            v79[16] = f0;
            return Symbol;
            return v80;
        }
        v81.toString = f82;
        try { v81.constructor(v81); } catch (e) {}
        let v86;
        try {
        const t0 = 15n;
        v86 = new t0();
        } catch (e) {}
        const v87 = v86?.constructor;
        try { new v87(); } catch (e) {}
        for (const v89 in v69) {
        }
        new v65(F43, f56);
    }
    return f56;
}
%PrepareFunctionForOptimization(f56);
const v91 = f56();
const v92 = v91?.toString;
try { new v92(); } catch (e) {}
try { new v91(); } catch (e) {}
%OptimizeFunctionOnNextCall(f56);
const v95 = f56();
v95.d = v95;
