function f3(a4) {
    a4--;
    const o21 = {
        [-948607867n]: a4,
        [a4](a7, a8) {
            super[this];
            try { new Array(9223372036854775807); } catch (e) {}
            const v15 = [1073741824,1073741823,1376142744,1073741825];
            try {
                v15.some();
            } catch(e17) {
            }
            try {
                super.getUTCDay();
            } catch(e20) {
            }
            return a4;
        },
    };
    return o21;
}
f3(-948607867n);
const v23 = f3(-948607867n);
v23.h = v23;
const v24 = f3(-2n);
v24.h = v24;
const v29 = [0.0,-2.220446049250313e-16];
let v30;
try {
const t0 = 16;
v30 = t0();
} catch (e) {}
function f31() {
    return f3;
}
class C32 extends f31 {
}
try { new C32(); } catch (e) {}
class C34 {
    constructor(a36, a37) {
        const v38 = /W(jy2)/udy;
        -10 * [0.00952483356421907,-3.0,2.220446049250313e-16];
        const v42 = [];
        function f43(a44) {
            try {
                v42.some(a44);
            } catch(e46) {
                e46.stack;
            }
        }
        v42.toString = f43;
        const o49 = {
            __proto__: v42,
            [v42]() {
            },
        };
        v38.flags;
        2 % 2;
        let v54 = v29[v30];
        v54 **= Uint8Array;
        function f55(a56, a57, a58, a59) {
            try { new a56(a36, v30, v54); } catch (e) {}
            function F61(a63, a64, a65) {
                if (!new.target) { throw 'must be called with new'; }
                const v68 = new Int32Array(257);
                function f69(a70, a71, a72, a73) {
                    let v75 = new a58();
                    [...v75] = v68;
                    let [...v76] = v68;
                }
                f69();
            }
            new F61();
            a58 >> a58;
            return a57;
        }
        for (let v80 = 0; v80 < 625; v80++) {
            function f81(a82, a83, a84, a85) {
                return a82;
            }
            const v86 = f81();
            const v89 = [601759695];
            v89[0] = v89;
            const v90 = [1073741824,1073741823,1376142744,1073741825];
            function f92(a93, a94, a95, a96) {
                let v98 = arguments.toString();
                function f99() {
                    const v101 = ("Vre").toLocaleUpperCase;
                    try { new v101(v101, -4294967297n, a95, v90); } catch (e) {}
                    ("Vre").fixed(f92);
                    v98--;
                    -(-268435456 + -268435456);
                    const o122 = {
                        "c": -4294967297n,
                        [522675525n](a110, a111) {
                        },
                        ..."Vre",
                        "maxByteLength": -128,
                        "c": v89,
                        valueOf(a113, a114) {
                            return a113;
                        },
                        "e": -4294967295,
                        "e": -268435456,
                        "maxByteLength": -4294967295,
                        "arguments": v29,
                        ...v89,
                        "type": "Vre",
                        ..."Vre",
                        valueOf(a116, a117) {
                            return -4294967295;
                        },
                        ..."Vre",
                        4: "Vre",
                        "c": -268435456,
                        "type": "Vre",
                        "type": "Vre",
                        toString(a119, a120, a121) {
                            return a119;
                        },
                        5: -4294967295,
                        6: -268435456,
                    };
                    o122.valueOf();
                    return f31;
                }
                f99.length;
                f99();
                Int8Array.a = Int8Array;
                const v127 = new Int8Array();
                try { v127.findIndex(v86); } catch (e) {}
                v127.buffer.slice();
                %OptimizeFunctionOnNextCall(f99);
                ("find").strike();
                try { v90["find"](..."find", a96, ...v89, ...v90, ...522675525n); } catch (e) {}
                return v90;
            }
            v80 + v80;
            const v135 = f55(Uint8Array, 2, v80);
            v135 + v135;
            try {
                a36 &= C32;
            } catch(e137) {
            }
        }
    }
}
const v138 = new C34();
const v139 = v138?.constructor;
try { new v139(C34, 16); } catch (e) {}
const v141 = new C34();
const v142 = v141?.constructor;
try { new v142(C34, v30); } catch (e) {}
