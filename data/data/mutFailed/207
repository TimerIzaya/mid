try {
} catch(e1) {
} finally {
}
class C3 {
    static [376363416];
    static {
        this.b = C3;
        super.b = this;
        let {...v5} = this;
    }
}
let v6 = 536870912n;
v6--;
[-9223372036854775807,45087,-268435456];
const v10 = [509174734,-30078599,-1953700757,-725509519,50139,1073741825];
[15,55234,268435441,0,9007199254740992,129];
/\p{Script=Greek}/ds;
/.\P{Decimal_Number}/gvds;
/xyz{1,32}?a\nb\bc/ums;
class C17 {
}
class C18 extends C17 {
}
const v19 = new C18();
const v21 = new Uint8Array();
function f22(a23) {
    const t27 = [-2.220446049250313e-16,0.4010936999061169];
    t27.length = -2;
    return Uint8Array;
}
v21.toString = f22;
v21.c = 1073741825;
delete v19[v21];
-1493064962 - -1493064962;
-4294967296 >>> -4294967296;
let v33 = 268435439;
v33--;
2 >>> 2;
class C38 {
}
const v39 = C38?.__defineSetter__;
try { new v39(v10, v10); } catch (e) {}
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    a43.lastIndexOf(a43, a44);
}
const v49 = new Int16Array(2);
new Uint16Array(v49);
const v4 = new Map();
class C5 {
    static set h(a7) {
        let v6 = this;
        try {
            v6 = a7;
        } catch(e8) {
        }
    }
    static toString(a10) {
        return Map;
    }
    static [v4];
    e = v4;
}
const v14 = new C5();
const v15 = new C5();
const v16 = new C5();
function f20() {
    return 13170;
}
class C21 extends Map {
    static #o(a23, a24) {
        a24--;
        for (let v26 = 0; v26 < 32; v26++) {
            Object.defineProperty(C21, 2, { writable: true, configurable: true, enumerable: true, get: f20, set: f20 });
            try {
                this.toString = a23;
            } catch(e27) {
            }
            v14["p" + v26] = v26;
        }
        return f20;
    }
    constructor(a31, a32, a33, a34) {
        super("r9se");
        for (const v35 of this) {
            function F36(a38, a39, a40, a41) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = f20;
                } catch(e42) {
                }
                try {
                    this.c = v35;
                } catch(e43) {
                }
                try {
                    this.g = a39;
                } catch(e44) {
                }
            }
            const v45 = new F36(f20, v14, this, v4);
            new F36(v45, v35, f20, v45);
            new F36(v4, v16, a33, f20);
        }
        function f48(a49, a50) {
            function f52(a53) {
                new Int8Array(2238);
                new Int8Array(4);
                new Float32Array(1000);
            }
            this.onmessage = f52;
            let v64 = -65537;
            f20--;
            const v67 = +-653891.5151603543;
            v64--;
            v67 << f20;
            Math.asinh(v64);
            !-653891.5151603543;
        }
        const v74 = ["function",a31];
        const o75 = {
            "arguments": v74,
            "type": "function",
        };
        new Worker(f48, o75);
    }
}
const v77 = new C21(f20, C21, 268435440, v16);
new C21(13170, v16, v4, C21);
new C21(2127601868, v15, "e", v16);
const o80 = {
    "b": v4,
};
C5[Map] *= f20;
try {
    new C21(v77, "r9se", NaN, v4);
} catch(e83) {
}
const v85 = [null];
const v86 = [v85,v85,v85];
const v87 = [v86,v86,v86,v86,v86];
const v90 = new Float32Array(512, 512, 512);
v90[268435441] -= 512;
v86.a = v87;
