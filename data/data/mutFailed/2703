%VerifyType(Float32Array);
let v5;
try { v5 = ("function").padEnd(257, "function"); } catch (e) {}
let {"g":v6,"length":v7,} = "valueOf";
try {
    ("function").indexOf(true, -256);
} catch(e11) {
}
new Float32Array(v6);
1346 + 1346;
const v16 = Float32Array?.constructor;
let v17;
try { v17 = new v16("valueOf"); } catch (e) {}
const v18 = new Float32Array(1346);
const v21 = ["bpkzx","bpkzx","bpkzx"];
"bpkzx" * [v21,v21,v21];
const v24 = /2a\sc/uds;
function f25() {
    try { v24.test(v5); } catch (e) {}
}
v24[Symbol.toPrimitive] = f25;
const o31 = {
    [v24](a30) {
    },
};
new Uint8Array(255);
try { v17.with(1346, Float32Array); } catch (e) {}
225 << 225;
new BigInt64Array(v7);
new Float64Array(v16);
new Uint8Array(v7);
127 * 127;
function f47(a48, a49) {
    a49();
    return f47;
}
const v54 = new Uint16Array(10);
class C56 {
    constructor(a58, a59) {
        const o60 = {
        };
        try {
            o60.e = a58;
        } catch(e61) {
        }
        try {
            const o62 = {
            };
            o62.e = a58;
            o62.c = a59;
        } catch(e63) {
        }
        try {
            const o64 = {
            };
            o64.e = a58;
            o64.c = a59;
            o64.b = o64;
        } catch(e65) {
        }
        try {
            const o66 = {
            };
            const t63 = "-54140";
            t63.e = a58;
            o66.c = "bpkzx";
            o66.g = v54;
        } catch(e67) {
        }
    }
}
new C56(-15n, 2);
let v70;
try { v70 = new Float64Array(v18, Float32Array, 225); } catch (e) {}
const v71 = new v17(127);
new v70(v71);
