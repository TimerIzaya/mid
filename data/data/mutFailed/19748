function f3(a4) {
    const o29 = {
        [0.7091355616475986]: a4,
        "h": 0.7091355616475986,
        "a": a4,
        ...f3,
        get d() {
            const v7 = Symbol.isConcatSpreadable;
            this[v7] = v7;
            try {
            const t0 = -1.0;
            t0();
            } catch (e) {}
            let v10 = -6;
            const v11 = Math.imul(this, this);
            v10--;
            -v11;
            try { v10(); } catch (e) {}
            const v17 = new Int32Array(1024);
            for (const v18 of v17) {
                const o21 = {
                    "maxByteLength": 1293466293,
                };
                new SharedArrayBuffer(1796, o21);
            }
            Math.sin(this);
            v10 ** this;
            v10 * v10;
            Math.cos(v10);
            v10++;
            return a4;
        },
    };
    return o29;
}
const v30 = f3(NaN);
f3(NaN);
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    a35 === a35;
    new BigUint64Array();
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
try { new F32(v30, 0.7091355616475986, -1.0); } catch (e) {}
function f42() {
    for (let v43 = 0; v43 < 5; v43++) {
        const v44 = new F32();
        const v45 = v44.constructor;
        class C46 {
        }
        new C46();
        for (const v48 in f3) {
        }
        new v45(F32, f42);
    }
    return f42;
}
%OptimizeFunctionOnNextCall(f42);
const v50 = f3(NaN);
const v51 = [v50,v50,f3];
[f3,0.7091355616475986];
const v53 = /[^7Y[a-zA-Z0-9]?]/vdmy;
for (let v54 = 0; v54 < 5; v54++) {
    ~v54;
    function f56() {
        const v58 = /a\s/vims;
        v58.e = v58;
        const v59 = v58[v54];
        v54();
        try { v51.reduceRight(v53); } catch (e) {}
        return v59;
    }
    f56();
}
const v63 = [-1.0,v50];
1094231234n | 1094231234n;
-15n >> -15n;
const v69 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
function f70(a71, a72) {
    function F74(a76) {
        if (!new.target) { throw 'must be called with new'; }
        this[139837843] = 139837843;
        const v77 = 139837843 in this;
        v77 || v77;
    }
    new F74(a71);
    new F74(v69);
    function f81() {
        Math.asin(Math);
        return f81;
    }
    const o84 = {
        __proto__: v69,
    };
    const v85 = [-8.423288404653653e+307,460.19811044552307,-1.7971213292687213e+308,-1e-15,0.8010499065604265,5.0,1.7976931348623157e+308,-4.0,0.8718051962313597];
    v85[8] = 16109n;
    const v87 = new Uint8ClampedArray(v85);
    v87[4] = v87;
    function f88() {
        return v85;
    }
    class C89 extends f88 {
        constructor(a91, a92, a93, a94) {
            super();
            function f95() {
                const t105 = [];
                t105[6] = a93;
                v85[3136390630];
                v87.byteOffset;
                return C89;
            }
            for (let v99 = 0; v99 < 5; v99++) {
                f95();
                %OptimizeFunctionOnNextCall(f95);
            }
        }
    }
    return o84;
}
const v101 = v50();
try { v101.splice(f70, v63); } catch (e) {}
v101.group(f70);
