const v2 = new Int8Array(1);
function f5() {
    function f6() {
        for (let v7 = 0; v7 < 5; v7++) {
            const v8 = [1073741824,1073741823,1376142744,1073741825];
            for (let v9 = 0; v9 < 5; v9++) {
                let v11;
                try { v11 = v8["find"](); } catch (e) {}
                v11 <= v9;
            }
        }
        return f6;
    }
    return Int8Array;
}
Uint32Array[Symbol.iterator] = f5;
new Uint32Array(2532);
new Uint8ClampedArray(14);
function f22() {
    return Int8Array;
}
new WeakMap();
const v26 = new Uint32Array();
v26.constructor = f5;
function F27() {
    if (!new.target) { throw 'must be called with new'; }
}
const v29 = new F27();
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
}
const v34 = new F30();
v34.toString = Symbol;
const v37 = [v26,v26,v26,v26,v2];
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    function f41() {
        return this;
    }
    function f42(a43) {
        Date();
        const t40 = 0n;
        const v47 = new t40(4221);
        Object.defineProperty(Date, v47, { get: Date, set: Date });
    }
    Object.defineProperty(this, "onmessage", { writable: true, configurable: true, enumerable: true, get: f41, set: f42 });
    const v50 = Date.toString(F39);
    v50[23];
    class C52 {
    }
    C52.m = F39;
    try { C52.m(); } catch (e) {}
    v26.constructor;
    const v57 = new Float32Array(6);
    const v58 = v57.fill();
    v50.replaceAll(v29, -37859n);
    const v60 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v60[2];
    const v64 = new Set(v37);
    for (let i67 = 0, i68 = 10;
        (() => {
            const v69 = [Float32Array,i67,i68];
            [i67,Set,Float32Array,v69];
            [Float32Array,i68];
            this[i68];
            Object.defineProperty(v69, 4, { configurable: true, value: 6 });
            const v73 = i67 < i68;
            class C74 extends Date {
            }
            return v73;
        })();
        i67++) {
    }
    const v80 = v64.add;
    v80.f = F39;
    v80.f = v80;
    try { v80(); } catch (e) {}
    const v83 = v64["delete"](839612.5677247904);
    const v84 = v83 || v83;
    const v85 = v84 || v84;
    v85 && v85;
    const v87 = v84 && v84;
    v87 || v87;
    const o90 = {
    };
    o90.b = o90;
    o90.b = o90;
    try { Array(9223372036854775807); } catch (e) {}
    const v94 = ("getPrototypeOf").blink();
    const v95 = v94[28];
    function f96() {
        return F30;
    }
    this.onmessage = 839612.5677247904;
    function f98(a99) {
        f96();
        return v83;
    }
    this.onmessage = f98;
    const v101 = v95.strike();
    v101[4] = v101;
    const v103 = v94.strike(591114.0785999324).replace(19793, v34);
    v103[11] = v103;
    class C105 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C106 extends C105 {
        static {
        }
        65537 = v58;
        ["getPrototypeOf"] = C105;
    }
    const v108 = new C106();
    const v109 = new C106();
    const t114 = v109.constructor;
    new t114(v60, v29, 839612.5677247904);
    const v112 = new C106();
    v112.getPrototypeOf;
    const v115 = BigUint64Array.of();
    new BigUint64Array(v108, v115, v115);
    new Int8Array();
    const v119 = new C106();
    const v120 = v119.getPrototypeOf;
    new v120(v120, F30);
    for (let v122 = 0; v122 < 32; v122++) {
        v60["p" + v122] = v122;
    }
    const v125 = v119.getPrototypeOf;
    let v126;
    try { v126 = new v125(-37859n); } catch (e) {}
    v126.getPrototypeOf = v126;
    new C106();
    const v129 = new String();
    Object.defineProperty(v129, 7, { configurable: true, enumerable: true, value: Int8Array });
    const v130 = Array(19793);
    v130[5935] = v130;
    for (const v131 of v130) {
    }
    class C132 {
        static get b() {
        }
    }
}
new F39();
new F39();
