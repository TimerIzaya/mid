const v1 = [65536,2147483649];
[-63127,9,255,-4294967297,1000,1024,13,-9223372036854775807,55756];
const v3 = [12,4];
const v4 = [-165479.2381612704,0.46671932276246775,NaN,4.845099402761568e+307,2.0,-189.05176846186373];
function f5() {
    function f6(a7) {
        a7 = v4;
        const o12 = {
            "b": 1e-15,
            [3](a11) {
            },
        };
        return null;
    }
    return f6;
}
Object.defineProperty(v4, "toString", { get: f5 });
const v13 = [-382853.1602297303,-1000000.0];
function f14() {
    return f5;
}
Object.defineProperty(v13, "constructor", { writable: true, configurable: true, enumerable: true, get: f14 });
[Infinity,2.2250738585072014e-308,-1.0,1000000.0,2.0,0.0,-4.475266135491813e+307,-2.220446049250313e-16,-1000000000000.0];
function f16() {
    return v3;
}
const v18 = [[v3,null,v4],null,v3];
try { v18.lastIndexOf(v18); } catch (e) {}
const v20 = [v18,v18,v18,f16];
try { v20.findLastIndex(v18); } catch (e) {}
-7631 >> -7631;
const v26 = [1000000000.0,-1000.0];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.__lookupGetter__;
    try { new v31(129); } catch (e) {}
    const v33 = v13.constructor;
    try { v33.isArray(v26); } catch (e) {}
    try { new this(); } catch (e) {}
    a29--;
    a29 & a29;
}
try { new F27(v4, v1); } catch (e) {}
new F27();
const v40 = new F27();
v40.length = v40;
