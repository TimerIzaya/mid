const v2 = new Uint32Array(484);
const v5 = new Uint8ClampedArray(11);
Int8Array.e = Int8Array;
const v8 = Int8Array.length;
v8 & v8;
const v10 = new Int8Array(3195);
class C11 {
    constructor(a13, a14, a15, a16) {
        this[536870912] = this;
        a13[135] = a13;
        a16[234];
        this[536870912] = this;
        const v18 = a13 % a13;
        v18 >>> v18;
        a15 / a15;
        this[a14] ||= a14;
        try { ("entries").substr(a16, v5); } catch (e) {}
        v10["entries"](11, ..."entries", Uint32Array, a13);
        const v24 = [1.9600488149280893e+306,468.9269702772963];
        try { v24.shift(); } catch (e) {}
        const v26 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
        try { v26.lastIndexOf(this); } catch (e) {}
        v26.includes(...v26);
        class C29 {
        }
        C29.e = C29;
        try { new C29(); } catch (e) {}
        const v31 = new C29();
        try { v31.propertyIsEnumerable(a14); } catch (e) {}
        v31[-2];
        +a15;
        try { ("257").trimLeft(); } catch (e) {}
    }
    g;
    static b = Int8Array;
    536870912 = 11;
    #e = v5;
    static 234 = 484;
}
let v39;
try { v39 = new C11(v2, C11, Uint32Array, C11); } catch (e) {}
v39[536870912] = v39;
const v40 = new C11(3195, 3195, 3195, Uint8ClampedArray);
const v41 = new C11(3195, 484, 3195, Uint8ClampedArray);
v41[536870912] = v41;
const v42 = new C11(11, 3195, 484, v40);
v42[3195] = v42;
v42[536870912] = v42;
function f43() {
    return v5;
}
f43.e = f43;
let v44;
try { v44 = f43(); } catch (e) {}
try { v44.set(v44); } catch (e) {}
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.constructor;
    try { new v48(); } catch (e) {}
    function F50() {
        if (!new.target) { throw 'must be called with new'; }
        const v52 = this?.constructor;
        try { new v52(); } catch (e) {}
    }
    const v54 = new F50();
    v54.b = v54;
    const v55 = v54.__defineSetter__;
    try { new v55(3195, v42); } catch (e) {}
    try { v55(); } catch (e) {}
    function f58(a59, a60) {
        const o61 = {
        };
        o61.h = o61;
        o61.h = o61;
        return o61;
    }
    try { f58(F46, F46); } catch (e) {}
    const v63 = f58();
    v63.h = v63;
    function f64() {
    }
    Float32Array.BYTES_PER_ELEMENT = Float32Array;
    const v67 = new Float32Array();
    for (const v68 of v67) {
        Object.defineProperty(v63, Float32Array, { configurable: true, enumerable: true, get: f58, set: f64 });
    }
}
const v69 = new F46();
try { v69.toLocaleString(); } catch (e) {}
const v71 = new F46();
v71.length;
try { v71.toLocaleString(); } catch (e) {}
const v74 = new F46();
v74.length = v74;
