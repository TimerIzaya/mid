const v2 = new Int32Array(3463);
const v5 = new Int32Array(102);
v5[32];
const v9 = new Uint16Array(128);
const v10 = [v9,v5,v9,Int32Array];
try { v10.fill(Uint16Array); } catch (e) {}
const v12 = [Int32Array,v2,128];
[v5,102];
function f14() {
    return Uint16Array;
}
const v15 = f14();
const v16 = f14();
const v17 = v2?.constructor;
try { new v17(v2); } catch (e) {}
const v19 = f14();
v19.length;
Date.length = Date;
class C22 extends Date {
}
try { new C22(); } catch (e) {}
function f24(a25, a26, a27, a28) {
    return f24;
}
const v29 = f24(v19, v16);
try { v29.bind(f24); } catch (e) {}
const v31 = f24(v19, v16);
v31.arguments = v31;
const v32 = /(\1a)/gums;
const v33 = /V(?:a{5,1000000}){3,1000000}/vims;
const v34 = /(?<a>.)\k<a>?/vdimsy;
let v35;
try { v35 = v34(); } catch (e) {}
const v36 = [v32,v32,v32,v32,v32];
const v37 = [v36,v33,v34,v36];
BigInt64Array.prototype;
const v40 = new BigInt64Array(v33, v32, v35);
function f41() {
    let v42 = 1000000000000.0;
    const v44 = -(v42--);
    const v46 = -v36 && v37;
    class C47 {
    }
    C47.d = C47;
    new C47(v46);
    const v50 = Symbol.constructor;
    try { v50(C47); } catch (e) {}
    const v52 = v50();
    v52.d = v52;
    let v53 = 0;
    v53++;
    const v55 = new C47();
    const v56 = v55?.constructor;
    try { new v56(); } catch (e) {}
    const t54 = v55.constructor;
    const v59 = new t54(v40, v55);
    const v60 = v59?.constructor;
    try { new v60(); } catch (e) {}
    const v62 = new C47();
    const v63 = v62.constructor;
    try { new v63(); } catch (e) {}
    new v63(v44);
    const v66 = [v34,v34,v34];
    class C67 extends C47 {
    }
    C67.length = C67;
    new C67();
    const v70 = Date.constructor?.apply;
    try { new v70(v12, v5); } catch (e) {}
    const v72 = v15.constructor;
    v72.name;
    v72.isArray(v66);
    try { ("test").strike(); } catch (e) {}
    const v77 = v34["test"]("test");
    v77 >> v77;
    try {
        v2.valueOf = Symbol;
    } catch(e79) {
    }
    let v80;
    try { v80 = v31.e(); } catch (e) {}
    return v80;
}
%PrepareFunctionForOptimization(f41);
f41();
%OptimizeFunctionOnNextCall(f41);
f41();
