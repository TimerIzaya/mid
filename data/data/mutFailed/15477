new Uint16Array(129);
class C4 {
}
class C5 extends C4 {
}
class C6 {
}
new Int32Array(16);
const o9 = {
};
this.encodeURIComponent("1073741824");
function f15(a16) {
    function f17(a18, a19, a20, a21) {
        function f23() {
            return arguments;
        }
        const v25 = new Int8Array();
        v25.buffer;
        %OptimizeFunctionOnNextCall(f23);
        ("find").codePointAt(f17);
        return arguments;
    }
    return a16;
}
Float64Array[Symbol.toPrimitive] = f15;
new Float64Array(16);
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = "b";
    this.d = a36;
}
const v37 = new F33();
const o38 = {
    ...v37,
};
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a43;
    } catch(e45) {
    }
}
new F39(129, 129, 16, 423);
new F39(16, 16, 129, 423);
Float64Array[Symbol.toPrimitive] = Symbol;
URIError(Float64Array);
const v53 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
class C54 {
    constructor(a56, a57, a58, a59) {
        const v60 = this?.constructor;
        try { new v60(v53, a58, a58); } catch (e) {}
        a57 >>> a57;
        0.061410412759498656 >>> 0.061410412759498656;
    }
}
function f65(a66) {
}
C54.valueOf = f65;
new F39(129, 16, 423, 16);
const v69 = new Uint16Array();
let {...v70} = v69;
