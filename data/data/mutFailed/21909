class C3 {
    2 = -2147483648;
    static {
        try { new this(); } catch (e) {}
        this[3411];
        this[12];
        class C10 {
            static [12825];
            static #b;
            static [2.0];
        }
        C10.length = C10;
        let v12 = -2147483648;
        v12--;
    }
    static c;
    static #a;
    static f;
}
C3.e = C3;
new C3();
const v15 = new C3();
const v16 = new C3();
v16[2] = v16;
-1.0 << -1.0;
-8.229782346675642e+307 >>> -8.229782346675642e+307;
0.0 - 0.0;
const v34 = Uint8ClampedArray?.constructor;
try { new v34(Uint8ClampedArray); } catch (e) {}
const v36 = new Uint8ClampedArray(16);
v36[10] = v36;
1322 >>> 1322;
const v39 = -v15;
const v41 = new Uint8ClampedArray(1322);
const v42 = v41[315];
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this?.constructor;
    try { new v49(F43, a46, a47, F43); } catch (e) {}
    a45 === a45;
    a48[0] = a48;
    try {
        this.a = "536870889";
        class C52 {
        }
        const v53 = new C52();
        const o60 = {
            valueOf(a55, a56, a57, a58) {
                const o59 = {
                    ["6"]: v53,
                };
                return "6";
            },
        };
        return o60;
    } catch(e61) {
    }
    try {
        for (let i64 = 0; i64 < 6;) {
            const t59 = -15n;
            var c = t59(this, i64);
        }
        this.b = a48;
    } catch(e73) {
    }
}
F43.arguments = F43;
new F43(1073741824n, 1073741824n, 257n, "6");
const v75 = new F43(1073741824n, 257n, 257n, v39);
const v76 = new F43(v42, 257n, 257n, "536870889");
new BigUint64Array(6);
3768 | 3768;
function f82() {
    for (let i84 = 0; i84 < 1;) {
        function F89(a91, a92, a93) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
    return "536870889";
}
3768 >>> 3768;
const v97 = new BigInt64Array(4046);
v97[123];
-115;
Int8Array.length = Int8Array;
function f102(a103, a104) {
    a104--;
    const v106 = a103++;
    v106 % v106;
    a104 + a104;
    const v109 = a103++;
    v109 >> v109;
    try {
        v75.toString = a104;
    } catch(e111) {
    }
    Object.defineProperty(v76, v76, { configurable: true, enumerable: true, get: f102 });
    let o113 = {
        "d": a103,
        ...a103,
        get e() {
            return a104;
        },
    };
    ("29753").replaceAll("b", "b").split("b");
    for (let v118 = 0; v118 < 25; v118++) {
        class C119 {
            constructor(a121) {
                function f122() {
                    return a121;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f122 });
            }
        }
        try { C119.call(v118); } catch (e) {}
        new C119(v118);
        new C119();
    }
    [,...o113] = v97;
    a104[4046];
    ArrayBuffer.h = ArrayBuffer;
    3035 >>> 3035;
    const o130 = {
        "maxByteLength": 3035,
    };
    3.0 ^ 3.0;
    try {
        o130.f = 3.0;
    } catch(e133) {
    }
    512 * 512;
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f102(4046, 3768);
let v141;
try { v141 = Uint8ClampedArray.bind(f102); } catch (e) {}
try { v141(-9223372036854775808n, -2147483648, -9223372036854775808n); } catch (e) {}
