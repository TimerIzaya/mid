const v3 = [-4.668199693226506e+307];
const v4 = v3[0];
[0.24266549707555707,4.0,3.7282350107912166,2.2250738585072014e-308,1.0829552824822089e+308,189.10308454552933,-5.0,-1.0948060154372096e+308];
const v6 = [-1.7976931348623157e+308,NaN];
try {
    v3.h = "reduce";
} catch(e9) {
}
v6 / 4;
for (let v15 = 0; v15 < 5; v15++) {
    v15 != v15;
    function f17() {
        const v19 = new v4();
        const v20 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f21(a22, a23, a24, a25) {
            function f26() {
                const v27 = v20.length;
                v27 & v27;
                const v31 = new Float32Array(-63163);
                v31[1283] = v31;
                return a22;
            }
            a24();
            %OptimizeFunctionOnNextCall(f26);
            return a23;
        }
        for (let v33 = 0; v33 < 5; v33++) {
            f21();
        }
        try { v19.copyWithin(2147483647, "reduce"); } catch (e) {}
        v19[2];
        const o37 = {
        };
        1842642860 % !o37;
        return v15;
    }
    try { f17(); } catch (e) {}
    for (const v45 of Array(4087)) {
    }
    f17();
    const t39 = [-554.3883745381902,874.2208688504531,0.0,1.7976931348623157e+308,1e-15];
    t39[8] ^= -297927.3051276769;
    new BigUint64Array(3375);
    let [v52,,v53,...v54] = v4;
    %OptimizeFunctionOnNextCall(f17);
}
