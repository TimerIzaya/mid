let v3 = -119590.8304926185;
v3++;
const v7 = 0.0 >>> v3;
const v8 = [-1099376999,-5,0.0];
([v8,0.0,v7,-643.8356595803718])[1];
[-1099376999,-5,-1099376999,v8,0.0];
let v17 = 9007199254740990;
v17++;
const v19 = [65536];
const v20 = [-694,-6,1073741824,-14,3,11,3,-7,5,-1214514770];
const v21 = [1073741824,-7,-1283755539,-726309105,10,13,-4294967295,12,512,40630];
const v22 = [];
let v23;
try { v23 = v22.flat(); } catch (e) {}
function f24() {
    -v22;
    return f24;
}
class C26 {
    static {
        try { new this(); } catch (e) {}
        const o29 = {
        };
        o29.b = o29;
        const v31 = new Proxy(this, o29);
        const v32 = v31?.constructor;
        try { new v32(-5); } catch (e) {}
    }
    p(a35, a36) {
        let v37;
        try { v37 = new this(a36, this, a35); } catch (e) {}
        super.g = v19;
        return Reflect.construct(v37, [v20,v21], v37);
    }
    a;
}
const v41 = new C26();
const v42 = new C26();
const v43 = new C26();
[-2.9700017742911022,795135.542646985,938.533418121023,-974148.680744386,-1.7976931348623157e+308,-300.6481185564369];
const v45 = [483707.38277358306];
const v46 = [2.220446049250313e-16,-Infinity,1.278332587799012,711290.6941419018,0.0,-Infinity,-1000.0,2.2250738585072014e-308];
const v47 = [v43,v21,v42];
[v46];
[v46,v45,v47,v42,v43];
65535 >> 65535;
function f53() {
    const v55 = 352326470 - 352326470;
    1261703539 * 1261703539;
    class C58 {
    }
    const v61 = `
        try {
            new f53(127);
        } catch(e63) {
        }
    `;
    let v64 = -65535;
    v64 * v64;
    const v66 = v64 / v64;
    v66 - v66;
    const o134 = {
        __proto__: 352326470,
        next() {
            v64--;
            const v71 = v64 == 0;
            const o72 = {
                "done": v71,
                "value": v64,
            };
            return o72;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v64,
        m(a74) {
            a74.h = a74;
            const o75 = {
            };
            function f76(a77, a78, a79) {
                function f81(a82) {
                    a78[5] ||= f53;
                }
                this.onmessage = f81;
                const v85 = new SharedArrayBuffer(35);
                new v55(v85);
            }
            try {
                o75.e = v64;
            } catch(e88) {
                const v92 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v92, o75);
            }
            try {
                const o94 = {
                };
                o94.e = 1261703539;
                o94.g = a74;
            } catch(e95) {
            }
            -9007199254740991 >> -9007199254740991;
            Math.sin(-9007199254740991);
            class C102 {
                o(a104, a105, a106, a107) {
                    class C108 {
                        static 44 = C108;
                    }
                    new C108();
                    const v110 = new C108();
                    new v110();
                    return 0;
                }
            }
            new C102();
            new Int8Array(3938);
            let v116 = 3;
            v116++;
            const v119 = 0 >> 0;
            for (let i = 0; i < 5; i++) {
                0 < 8;
            }
            const o122 = {
            };
            o122.e = 1261703539;
            try {
                const o123 = {
                };
            } catch(e124) {
                function F125(a127, a128, a129, a130) {
                    if (!new.target) { throw 'must be called with new'; }
                    a127.propertyIsEnumerable();
                }
                -3 ^ v119;
            }
        },
    };
    try { o134.next(); } catch (e) {}
    try { (127).m(o134); } catch (e) {}
    class C138 {
    }
    C138.a = C138;
    const v139 = new v23();
    const v140 = C138?.constructor;
    let v141;
    try { v141 = new v140(); } catch (e) {}
    try { Float32Array.apply(v141, 1261703539); } catch (e) {}
    const v144 = new Float32Array(v139, "nt", Float32Array);
    try { v144.with(v45, f24); } catch (e) {}
    const t150 = "nt";
    const v146 = delete t150[v41];
    try { v139.floor(v146); } catch (e) {}
    for (const v148 in Float32Array) {
    }
}
f53();
f53();
function f151(a152, a153, a154, a155) {
}
function f156(a157, a158) {
    const o161 = {
        set b(a160) {
        },
    };
}
function F162(a164, a165, a166) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e167) {
}
function F168(a170) {
    if (!new.target) { throw 'must be called with new'; }
}
