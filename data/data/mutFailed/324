let v0 = -0.0;
function f4(a5) {
    return f4;
}
for (let v7 = 0; v7 < 20; v7++) {
}
for (let [i24, i25] = (() => {
        v0 = 0.9078872092309338;
        function F16(a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a18;
            } catch(e20) {
            }
        }
        new F16(-761550.4941161583, 3.0);
        new F16(v0, -6.237199592721138);
        new F16(-761550.4941161583, -6.237199592721138);
        return [0, 10];
    })();
    (() => {
        const v26 = i24 < i25;
        class C27 extends Date {
        }
        return v26;
    })();
    i24++) {
}
const o39 = {
    o(a36, a37) {
        class C38 {
        }
        return C38;
    },
};
new Array(8);
function f45(a46, a47) {
    return f45;
}
const v50 = new Float32Array(6);
v50.fill();
function f53(a54, a55, a56, a57) {
    return a57;
}
let v58 = 0;
while (v58 < 7) {
    [1890146056,8,-1024,1535293054,-1313289994];
    [-40861,-778707136,7];
    const v63 = [31626,-536870912,7,61053,-51986,0,128];
    try {
        v63.includes(Array, -2147483648);
    } catch(e66) {
    }
    function f67(a68, a69, a70) {
    }
    v58++;
}
class C74 {
}
const v76 = new Number();
const v78 = new Uint8Array();
const v79 = v78[5];
let v80;
try { v80 = v79(); } catch (e) {}
v76.toString = v80;
const v81 = new parseInt(5);
new Float32Array(v81);
