function f0() {
}
let v5 = -6.37437380272763;
const v8 = new WeakMap();
function f9() {
    return 198776316;
}
const v11 = new WeakMap();
function f12(a13, a14) {
    const o20 = {
        "b": WeakMap,
        valueOf(a16, a17) {
            super[0.4464967113614948];
            v5 = 0.4464967113614948;
            const o19 = {
                __proto__: v11,
                [WeakMap]: a16,
                [this]: a14,
            };
            return a16;
        },
        "g": f9,
        "e": 5359,
    };
    return o20;
}
f12(v5, 1.4449410486037293e+308);
f12(v5, 0.4464967113614948);
f12(v5, v5);
class C25 extends Map {
}
const v26 = new C25();
const v27 = new C25();
const v28 = new C25();
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f34(a35) {
    try { v8.has(5); } catch (e) {}
    function f37() {
        return f37;
    }
    return f37;
}
Uint32Array[Symbol.toPrimitive] = f34;
const v40 = new Uint32Array(5);
let v41 = -4294967297n;
v41--;
const v43 = [601759695];
const v44 = [1073741824,1073741823,1376142744,1073741825];
function f46(a47, a48, a49, a50) {
    a47.constructor = f12;
    try { a47.toLocaleString(); } catch (e) {}
    const v52 = a47?.constructor;
    let v53;
    try { v53 = v52(); } catch (e) {}
    try { v52(); } catch (e) {}
    const v56 = arguments.length;
    Object.defineProperty(v26, "e", { configurable: true, enumerable: true, value: f46 });
    const v58 = v27["entries"](a49, ...v28, BigUint64Array, ..."entries", a48, v56);
    const v60 = Symbol.toStringTag;
    v27[v60] = v60;
    function f61() {
        let v63;
        try { v63 = ("Vre").charAt(4096); } catch (e) {}
        try { v63.lastIndexOf(f61); } catch (e) {}
        let v65;
        try { v65 = ("Vre").codePointAt(v32); } catch (e) {}
        v65 - v65;
        v65 ^ v65;
        let v68 = Float64Array;
        v68 = a48;
        let v69 = v32.length;
        v69++;
        try {
            v44.forEach(a48);
        } catch(e72) {
            e72.stack = e72;
        }
        const o83 = {
            "c": v41,
            "c": v43,
            valueOf(a74, a75) {
                return a75;
            },
            1073741824: v40,
            [v41](a77, a78, a79, a80) {
                eval(v53);
            },
            "arguments": 5,
            256: a50,
        };
        o83[256];
    }
    f61();
    const v87 = Array();
    let v88;
    try { v88 = v87.findLast(f46, v40); } catch (e) {}
    v87.unshift("entries", v58, "entries", v88);
    let v91;
    try { v91 = Int8Array.of(); } catch (e) {}
    try { v91.join(v52); } catch (e) {}
    const v93 = new Int8Array(v43);
    v93.c = v93;
    v93.c = v93;
    const v94 = v93.buffer;
    v94.maxByteLength;
    const v96 = v94.slice(v52);
    try { Int32Array(v96, arguments, v41); } catch (e) {}
    function f99(a100, a101, a102, a103) {
        return v26;
    }
    const v104 = new Int32Array();
    const v105 = v104[3];
    v105 + v105;
    for (let v107 = 0; v107 < 5; v107++) {
    }
    %OptimizeFunctionOnNextCall(f61);
    try { v44["find"](..."find", a50, ...v43, ...v44, ...522675525n); } catch (e) {}
    return v52;
}
for (let v110 = 0; v110 < 10; v110++) {
    f46(v40);
}
%OptimizeFunctionOnNextCall(f46);
f46();
