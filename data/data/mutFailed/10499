let v8 = "e";
const v9 = [-13063,230037640,0,-1717935321,257,0,1073741825];
const v10 = [-2051630605,509562611];
class C11 {
    0 = v10;
}
const v12 = new C11();
Object.defineProperty(v12, 7, { configurable: true, value: v9 });
class C13 {
    get h() {
        const t10 = "b";
        t10[3] = this;
        super[-9007199254740990] = this;
        return this;
    }
    static {
        let v15 = this;
        v15 ^= "b";
        v8 = "-21508";
        function f16(a17, a18) {
            const o21 = {
                set d(a20) {
                },
                "a": a17,
            };
            const v24 = new Int8Array(268435456);
            return v24;
        }
        const v27 = new Int8Array(7);
        try { v27.findLastIndex(-9007199254740990); } catch (e) {}
        new BigUint64Array(255);
        new Int32Array(1720);
    }
}
let v35;
try { v35 = new C13(); } catch (e) {}
new v35();
new C13();
const v38 = new C13();
const v39 = v38?.constructor;
try { new v39(); } catch (e) {}
function f41() {
    class C42 {
    }
    const v43 = new C42();
    const v44 = v43?.__defineGetter__;
    try { new v44(C42, C42); } catch (e) {}
    const v46 = [v43,v43,v43,v43,v43];
    const v47 = v46?.includes;
    try { new v47(C42); } catch (e) {}
    try {
        const o50 = {
        };
        o50.e = 1261703539;
    } catch(e51) {
    }
    const v52 = [f41,f41];
    v52[1] = v52;
    class C53 extends C42 {
        [v43];
    }
    try { new C53(); } catch (e) {}
    const v55 = new C53();
    try { v44.constructor(); } catch (e) {}
    v52.constructor;
    try { v55.m(v46); } catch (e) {}
    return f41;
}
try { f41.toString(); } catch (e) {}
%PrepareFunctionForOptimization(f41);
f41();
const v61 = f41();
function f62() {
    return f62;
}
const v64 = new v35();
v64.getMonth();
v61.caller = v61;
%OptimizeFunctionOnNextCall(f41);
f41();
