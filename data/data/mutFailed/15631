class C3 {
    static get e() {
        const o5 = {
        };
        new Proxy(this, o5);
        const v9 = Symbol.asyncIterator;
        o5[v9];
        return v9;
    }
    constructor(a12) {
        this.b = this;
        let v14 = 62436;
        const v15 = v14++;
        super[this] = -65536;
        try {
            Math.fround(a12);
        } catch(e19) {
        }
        let v20 = NaN >> NaN;
        function* f21(a22, a23, a24) {
            try {
                Math.log10(/()H/udy);
            } catch(e27) {
            }
            yield NaN;
            return -65536;
        }
        f21(v15, v20, 0.713366237253266);
        v20--;
        const v31 = a12--;
        const v32 = ~v14;
        v32 + v32;
        v31 && NaN;
        const v35 = -NaN;
        v35 >>> v35;
    }
    static g;
    toString(a38) {
        this.e;
        const v40 = this?.constructor;
        try { new v40(1000.0); } catch (e) {}
        a38--;
        try {
            true || true;
            true && true;
            this.fuck(true, a38, -1e-15);
        } catch(e48) {
            e48.message;
        }
        return C3;
    }
    [-65536];
    static d = -65536;
    e;
}
C3.prototype = C3;
const v50 = new C3();
v50.e;
const v52 = new C3();
const v53 = v52?.constructor;
try { new v53(v50); } catch (e) {}
const v55 = new C3();
try { Reflect.construct(1000.0, 1000.0); } catch (e) {}
const v58 = [1000.0];
let v59 = v52.toString;
v59.name = v59;
v59.length = v59;
const v60 = Reflect.apply(v59, v55, v58);
try { new v60(v59); } catch (e) {}
v59 ^= v59;
[1000.0,v55,v55];
const v63 = [-65536];
try { v63.push(Reflect); } catch (e) {}
const v65 = [v63,v50,v55,v55];
try { v65.entries(); } catch (e) {}
try { v65.toString(); } catch (e) {}
1024n <= 1024n;
const v75 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
const v76 = /[(?:a*)*]/u;
v76.e = v76;
v76.dotAll;
switch (v75) {
    default:
        let v78;
        try { v78 = v75(); } catch (e) {}
        try { v78(); } catch (e) {}
        break;
    case v76:
}
