function f1() {
    const o13 = {
        ...null,
        "a": null,
        "e": null,
        [null]() {
            let v3;
            try {
            const t0 = null;
            v3 = t0(null, this, null, this);
            } catch (e) {}
            function F4(a6, a7) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = a7;
                } catch(e8) {
                }
                try {
                    this.g = this;
                } catch(e9) {
                }
            }
            const v10 = new F4(null, this);
            new F4(v10, this);
            const v12 = new F4(F4, v3);
            return v12;
        },
    };
    return o13;
}
const v14 = f1();
const v15 = f1();
const v16 = f1();
const v17 = [null,v14,null,v14];
const v18 = [null,f1,f1,null,v15];
const v19 = [v18];
const v21 = [[v18,f1,v19,v16,v19],v15,f1];
[v15,v17];
function f23() {
    return v21;
}
class C28 {
    static #o() {
        const v30 = [-2147483648,-46456,1200954989,-4294967296,1];
        const v31 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
        const v32 = [23955,1426598775,2147483649];
        try {
            v31.#o(v31, v32, null, v31, v30);
        } catch(e34) {
        }
        return null;
    }
    #p() {
        const v36 = this[223];
        const v37 = super.g;
        let v38;
        try { v38 = v36.p(this, v37, v37, v37); } catch (e) {}
        this[null] = v38;
        new Map();
        return v37;
    }
}
const v41 = new C28();
const v42 = new C28();
new C28();
class C44 {
    p(a46) {
        const v47 = null - a46;
        %VerifyType(v41);
        super[v41] = v47;
        a46?.[1858] ^ v47;
        for (let i52 = 0; i52 < 7; i52++) {
            try { v42.valueOf(i52, a46, v41, i52, i52); } catch (e) {}
        }
        const v63 = new BigUint64Array();
        v63.buffer.slice();
        Math.cos(Math);
        return C28;
    }
}
const v68 = new C44();
const v69 = new C44();
const v70 = new C44();
let v71 = -15;
let v73 = -1024;
function F74(a76, a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = v41;
    this.e = a78;
    try {
        this.f = C28;
    } catch(e80) {
    }
    try {
        this.e = v70;
        function F81(a83, a84, a85, a86) {
            if (!new.target) { throw 'must be called with new'; }
            const v87 = this.constructor;
            v87.prototype = v87;
        }
        new F81(F81, F81, F81, F81);
    } catch(e89) {
    }
    try {
        this.a = a77;
    } catch(e90) {
    }
}
new F74(38767, v68, v41, v42);
new F74(38767, v70, C44, v68);
const v93 = new F74(v73, v69, v41, C28);
const v94 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v95 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
new Uint32Array(v94, 0, 0);
function F101(a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
}
const v105 = new F101(v95, 0);
v105[Symbol.toPrimitive] = f23;
new F101();
class C110 {
}
let v112 = 0;
while (v112 < 3) {
    const v116 = Symbol.iterator;
    const o125 = {
        [v116]() {
            let v118 = 10;
            const o124 = {
                next() {
                    v118--;
                    const v122 = v118 == 0;
                    const o123 = {
                        "done": v122,
                        "value": v118,
                    };
                    return o123;
                },
            };
            return o124;
        },
    };
    v112++;
}
const o131 = {
    valueOf() {
        return "D2z";
    },
};
const v133 = /5*/gi;
const v134 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v135 = [601759695];
const v136 = [1073741824,1073741823,1376142744,1073741825];
const t153 = "b";
t153.e = "B";
function f139(a140, a141, a142, a143) {
    function f144() {
        let v147 = Float64Array;
        v147 = a141;
        b = v135;
        const v148 = v94.length;
        try {
            v94.forEach(v147);
        } catch(e150) {
        }
        const v151 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v153 = Symbol.toPrimitive;
        const o171 = {
            toString(a155, a156) {
                const v157 = a143 && v147;
                function f158() {
                    a155 *= v153;
                    return v147;
                }
                f144();
                Symbol("D2z");
                new Uint16Array(6);
                new Float32Array(0);
                new Int32Array(153);
                return v157 <= v151;
            },
        };
        const o195 = {
            "c": -4294967297n,
            [522675525n](a174, a175) {
            },
            "c": v135,
            valueOf(a177, a178) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a180, a181, a182, a183) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v134,
            ...v93,
            [v153]() {
                const o187 = {
                    next() {
                        return v133;
                    },
                };
            },
            "type": C110,
            ..."Vre",
            valueOf(a189, a190) {
                return a190;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a192, a193, a194) {
            },
            5: -4294967295,
            6: -268435456,
        };
        v153 = v147;
        new Float32Array(1334);
        v73 %= -268435456;
        new Uint32Array(v95, v148, v153);
        v105 - f144;
        class C206 {
        }
        function F207(a209, a210) {
            if (!new.target) { throw 'must be called with new'; }
            a210 - a210;
            const v212 = this.constructor;
            v212.name = v212;
            const v214 = new Int16Array(a210);
            const v215 = v214.lastIndexOf(F207, a209);
            v215 ^ v215;
            try { new v212(this, a209); } catch (e) {}
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    function f222(a223) {
        try {
            new C44();
        } catch(e225) {
        }
        return v69;
    }
    f144.toString = f222;
    f144();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f144);
    try { v136["find"]("find", a143, v135, v136, 522675525n); } catch (e) {}
    v71++;
    const o233 = {
        [9007199254740992n]: 522675525n,
    };
}
for (let v234 = 0; v234 < 10; v234++) {
    f139();
}
%OptimizeFunctionOnNextCall(f139);
f139();
