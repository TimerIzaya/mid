function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 1073741824;
    } catch(e3) {
    }
    try {
        this.h = 1073741824;
    } catch(e4) {
        const o7 = {
            "maxByteLength": 2393,
        };
        const v9 = new SharedArrayBuffer(256, o7);
        new Int32Array(v9);
    }
    try {
        this.b = 1073741824;
    } catch(e12) {
    }
}
const v13 = new F0();
function f14(a15, a16) {
    a15?.[4294967295];
    let v20 = -891413.174792936;
    Math.tanh(32994);
    const v22 = !a16;
    --a16;
    const v24 = 32994 & a16;
    v22 << 32994;
    v20 >> v24;
    v20--;
    return v20;
}
v13.constructor = f14;
const v28 = new F0();
const v29 = new F0();
function f30() {
    return v28;
}
f30.length;
function f32(a33, a34) {
    let v36 = Symbol.toPrimitive;
    Object.defineProperty(a33, v36, { configurable: true, value: f32 });
    function f37() {
        function f38(a39, a40) {
            function F41(a43) {
                if (!new.target) { throw 'must be called with new'; }
            }
            return F0;
        }
        return f38;
    }
    function f44(a45) {
        v36 >>>= a45;
    }
    Object.defineProperty(a34, Symbol.toPrimitive, { writable: true, enumerable: true, get: f37, set: f44 });
    a33.c = a33;
    const v48 = a34?.constructor;
    try { new v48(); } catch (e) {}
    const o60 = {
        [f30]: f30,
        8: a34,
        toString(a51, a52, a53) {
            const v54 = v28.h;
            try { v28["toString"](a51, a52); } catch (e) {}
            Object.defineProperty(a53, "c", { configurable: true, enumerable: true, get: f30, set: f30 });
            try { a52.for(v13, a53, a33, this); } catch (e) {}
            this[3995132054] <<= v54;
            a33[a53] = a53;
            try {
                v13.valueOf = a52;
            } catch(e59) {
            }
            return v29;
        },
        ...a34,
        "e": a33,
        "g": v13,
        [a33]: f30,
    };
    return o60;
}
f32.length;
f32(v28, v13);
f32(v28, v28);
const v64 = f32(v28, v13);
v64[Symbol.toPrimitive] = f14;
v64.e = v64;
16 - 16;
[208110799,3,536870912,879614806,1662370678];
[-1024,-42353,9223372036854775807,-9007199254740991,-816532839,-9007199254740992,-44415,-60510,-5];
[4294967295,-8258,19087];
new Uint32Array(1205620854);
new Uint8Array(268435440);
function F80() {
    if (!new.target) { throw 'must be called with new'; }
}
class C82 {
    constructor(a84, a85, a86) {
        const v87 = a85?.constructor;
        try { new v87(v64); } catch (e) {}
        const v89 = a85.constructor;
        try { new v89(a85); } catch (e) {}
        class C91 extends v89 {
        }
        C91.length;
        new C91();
    }
}
C82[Symbol.toPrimitive] = f32;
new C82(F80, C82);
