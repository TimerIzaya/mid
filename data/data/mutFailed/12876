const v2 = new BigUint64Array(372);
const v5 = new Int16Array(129);
const v8 = new Uint8Array(4);
const v10 = new v2();
const v11 = [];
Uint8Array / 129;
4 ** v11;
const v14 = v8.copyWithin(v2, BigUint64Array, v5, Uint8Array, ...v8);
let v15;
try { v15 = v5(v14, 4, 129, v10); } catch (e) {}
const v17 = [372,v2,[v15,v2],Uint8Array];
[v11,v17,BigUint64Array,v17,v17];
class C19 {
    g = C19;
    #e = v5;
}
const v20 = new C19();
const v21 = new C19();
const v22 = [v20];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.constructor;
    try { new v27(v22, v27); } catch (e) {}
    a26[1073741823] = a26;
}
const v29 = new F23(v20, v21);
const o34 = {
    o(a31) {
        try { this.o(v29, v21, this, this); } catch (e) {}
        const v33 = new C19();
        return v33;
    },
};
o34["o"]();
