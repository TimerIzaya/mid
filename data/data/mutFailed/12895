new Uint8Array(4096);
const o8 = {
    "b": 1e-15,
    [3](a7) {
    },
};
let v9 = Uint8Array;
v9++;
class C12 {
}
const v13 = new C12();
[257828.6336153492,v13];
function f15() {
    async function f19(a20, a21, a22) {
        ("b")[a22];
        "c" ** f19;
        new BigInt64Array(4096);
        await 4056;
    }
    function f30() {
        const v31 = [f30,f30,f30,f30];
        try {
            v31.some(4096);
        } catch(e33) {
            const v34 = `
            `;
            eval(e33);
        }
        return v31;
    }
    %OptimizeFunctionOnNextCall(f30);
    return "c";
}
v9.valueOf = f15;
const v37 = new v9(4056);
try { v37.indexOf(4096); } catch (e) {}
const v41 = new BigUint64Array(257);
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F42;
    a44[Symbol.toPrimitive] = f15;
    a44 <= a44;
    a46 ^ a46;
    a47 ^ a47;
    try {
        this.e = a47;
    } catch(e53) {
    }
    try {
        this.h = a46;
    } catch(e54) {
    }
    try {
        this.c = a45;
    } catch(e55) {
    }
}
new F42(4096, v41, 4056, 257);
const v57 = new F42(4056, 4096, 257, 257);
v57.h;
new F42(Uint8Array, 257, 4096, 4096);
function f60() {
    59817n < undefined;
    try {
        ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new f60();
    } catch(e68) {
    }
    return 257;
}
try { f60(); } catch (e) {}
new Uint32Array(6);
6 - 6;
Uint32Array.prototype = Uint32Array;
new Uint32Array(6);
const v79 = new Uint32Array(1000);
v79.toString = f60;
v79[191] = v79;
const v81 = Date.toString(Date, Date, Date, Date);
async function* f82(a83, a84) {
    return Date;
}
const v85 = f82(v81, v37);
function f86(a87, a88) {
    try { a88.parse(v41); } catch (e) {}
    const o90 = {
        [a88]: v85,
    };
    return a88;
}
%OptimizeFunctionOnNextCall(f86);
const v91 = f86(f82, Date);
v91.d = v91;
