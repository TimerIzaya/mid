const v1 = new Date();
class C2 {
    0 = v1;
    valueOf(a4) {
        const v5 = delete v1[3436026535];
        const o8 = {
            "maxByteLength": 3905207448,
        };
        const v10 = new SharedArrayBuffer(-2, o8, v5, 3905207448);
        const v12 = new BigUint64Array(v10);
        return v12;
    }
}
("of").replaceAll("of");
Int16Array.g = Int16Array;
let v16 = 0;
const v17 = v16++;
function f18() {
    return v17;
}
new C2(v1, v1);
const v20 = new C2();
new C2();
[16,-8,1004854573,9007199254740992,-10,268435440,15346,-53018];
[43516,29050,512,-256];
[4,-1073741824,-256,-4294967297,-16,63025,-4294967296,-506096207,-65536,10];
v20.call(8, Uint16Array);
("HEkWL").localeCompare("isArray", "isArray");
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this?.constructor;
    try { new v43(this, this); } catch (e) {}
    try {
        function f46() {
            -601018.3320674116 + isFinite;
            return -601018.3320674116;
        }
        f46();
        this.c = 15;
    } catch(e50) {
    }
}
new F39(15);
const v52 = new F39(F39, 15);
class C53 extends F39 {
    [1073741823n];
    c = v52;
}
new C53();
new C53();
new C53();
