function f2(a3) {
    return Uint8ClampedArray;
}
const v5 = [Uint8ClampedArray];
const v6 = Reflect.construct(f2, v5, Uint8ClampedArray);
for (let v9 = 0; v9 < 160; v9++) {
    function f10() {
        if (v6) {
            try { v5.p(); } catch (e) {}
            for (let v12 = 0; v12 < 10; v12++) {
            }
            function F13(a15, a16, a17, a18) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F13(v5, v5, v6, v9);
        }
        return f10;
    }
    f10();
}
class C24 extends Array {
    268435440;
}
const v26 = new Uint8ClampedArray();
try { v26.reduceRight(v26); } catch (e) {}
new Int32Array(9);
new Uint8Array(6);
new Float32Array(295);
const o36 = {
    ..."boolean",
};
const v37 = [];
v37.push(-1336159725, v37, -12, 10);
try {
    /(M(?:ab|cde)VbD)/vdim;
} catch(e44) {
    13n >> 10;
    Math.PI;
}
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    function f56() {
        return F50;
    }
    class C57 extends f56 {
        constructor(a59) {
            super();
            for (let v60 = 0; v60 < 25; v60++) {
                const v62 = "p" + "p";
                Symbol.toPrimitive;
                ("Vre").constructor.fromCodePoint(undefined);
                this[v62] = v60;
            }
        }
        static 4294967296;
    }
    new C57();
}
function f70(a71) {
    Symbol.toPrimitive.description;
}
Object.defineProperty(F50, "pp", { configurable: true, set: f70 });
new F50();
