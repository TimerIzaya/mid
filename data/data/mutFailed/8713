try { new BigInt64Array(-832267.262043573); } catch (e) {}
function f4() {
    return f4;
}
const v5 = /(?:a*)+q(?<a>.)/guds;
function f6(a7) {
    class C8 {
    }
    const v9 = [155533.8602852358,2.0];
    function F11() {
        if (!new.target) { throw 'must be called with new'; }
        const v13 = this?.__defineSetter__;
        let v14;
        try { v14 = new v13(); } catch (e) {}
        for (const v18 of Array(19793)) {
            v9[658291203] = null;
            v14--;
        }
    }
    const v20 = a7.constructor;
    const v22 = new Uint8ClampedArray();
    const v24 = v22 ^ 3;
    try { v20(a7, f4); } catch (e) {}
    function F26(a28, a29, a30) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C31 {
    }
    function F32(a34, a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
        a34 >>> a34;
        a35 - a35;
        -a36;
        const v40 = this.constructor;
        try { new v40(a36, C31); } catch (e) {}
    }
    class C42 {
    }
    return v24;
}
for (let v43 = 0; v43 < 50; v43++) {
    f6(v5);
}
("MIN_VALUE")[Symbol.toStringTag];
class C49 {
}
class C51 {
    16 = "MIN_VALUE";
    static 127 = 9;
    o(a53, a54) {
        super.unscopables = a53;
        try {
            super.getUTCSeconds(9);
        } catch(e56) {
        }
        return 9;
    }
}
new C51(f6);
const v58 = new C51();
new C51(v5, v58);
function F67(a69, a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = a71.constructor;
    try { new v73(a70); } catch (e) {}
}
new F67(undefined, undefined, -128n);
const v77 = [-489438.2192946316,0.9060845133700562,653905.7470292451,-840351.5605714591,2.0330214359356185e+307,9.8815260133035,4.157539888800496,1.4885047144769007e+308,-475.44825279677866];
let v78 = -4294967297n;
v78++;
const v80 = [601759695];
function f82(a83, a84, a85, a86) {
    arguments[2] = arguments;
    function f88() {
        ("Vre").fixed();
        const o91 = {
            __proto__: a85,
            ..."Vre",
        };
        o91.length;
        return o91.valueOf();
    }
    const v94 = f88();
    v94[6] = v94;
    %OptimizeFunctionOnNextCall(f88);
}
for (let v95 = 0; v95 < 5; v95++) {
    f82(v80, v95, v95);
}
const v98 = [v77,v77,v77,v77,v77,"ceil"];
try { v77.reduce(v98); } catch (e) {}
C51.toPrimitive = v58;
const o100 = {
    ...undefined,
};
const o103 = {
    "execution": "async",
    "MIN_SAFE_INTEGER": "minor",
};
o103.a = o103;
v98[1] = v98;
const v106 = new Uint8ClampedArray(-9223372036854775807);
class C107 {
    constructor(a109, a110, a111, a112) {
        const v113 = this.constructor;
        try { new v113(3983, a112, this, this); } catch (e) {}
        for (let v115 = 0; v115 < 5; v115++) {
            v106[v115] = a112;
        }
    }
}
const v116 = [-8.56356646356005,-1000000.0,1.7425732341240199,5.61396859017832,0.7210174662462943,-245812.9717227295,1.5188574374967393e+308,7.8735763720173e+307,-2.220446049250313e-16];
try { v116.map(); } catch (e) {}
const v118 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
function f119(a120, a121, a122, a123) {
    try { a122(a123, a122, a121); } catch (e) {}
    function f125() {
        const v126 = v118.length;
        const v129 = new Int8Array(3938);
        const v131 = [1.0,141599.63044947106,730.845463907873,1000000.0,-4.2811873669589365e+307,0.0,3.0];
        try { v131.forEach(-5n); } catch (e) {}
        const v133 = [1073741824,1073741823,1376142744,1073741825];
        try {
            v133.forEach(Float64Array);
        } catch(e136) {
        }
        let v137 = 3;
        [...v137] = v129;
        const v138 = v126 >>> v126;
        Uint32Array[2] = 1;
        new BigInt64Array(5);
        const v144 = v138 % v138;
        v144 & v144;
    }
    return f125;
}
f119(v118, f119, f119, v118);
f119();
