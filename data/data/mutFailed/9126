function f0() {
}
const v2 = new Date();
Float32Array.prototype = Float32Array;
new Float32Array(2237);
const v8 = new Float32Array(255);
Uint8ClampedArray[0] = v8;
try { new Uint8ClampedArray(Uint8ClampedArray, v8, 3181); } catch (e) {}
new Uint8ClampedArray(3181);
try { WeakMap.call(Float32Array); } catch (e) {}
new WeakMap();
[2.0];
const v17 = [-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
const v21 = 1000000.0 % 1000000.0;
const v25 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
v25[1] = v25;
const v31 = new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = 536870887;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v35 = new Uint8Array();
try { v35.values(); } catch (e) {}
gc();
110 <= 110;
const v41 = 110 + 110;
try { new Int8Array(v8, v31, Int8Array); } catch (e) {}
let v44;
try { v44 = new Int8Array(); } catch (e) {}
try { v44.toLocaleString(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
Date[Symbol.species] = Date;
const v50 = new Date();
const v51 = v50.getUTCDay();
v51 * v51;
const v53 = v51 >>> v51;
let v54 = 127;
v54 >> v54;
const v56 = v54++;
v56 <= v56;
function f58(a59, a60) {
    function f61() {
        const v62 = -37370 & v41;
        f0(v41, v62, v62, a59);
        return a59;
    }
    try { f61(); } catch (e) {}
    a60.constructor = f61;
    try { a59(f58); } catch (e) {}
    try { a59(BigInt64Array); } catch (e) {}
    const v67 = a60.constructor(a60);
    v67.length = v67;
    return f58;
}
function f68(a69) {
    try { a69.n(v53); } catch (e) {}
    return Symbol(v54);
}
f58.then = f68;
try { Promise.all(v21); } catch (e) {}
try { new Promise(4096); } catch (e) {}
const v75 = new Promise(f58, Uint8Array);
v75.constructor = f58;
let v76;
try { v76 = v75.then(); } catch (e) {}
v76.constructor = f68;
try { v76.then(255, WeakMap); } catch (e) {}
Object.defineProperty(v76, "constructor", { writable: true, enumerable: true, value: Date });
let v78;
try { v78 = v76.then(v25, v35); } catch (e) {}
v78.constructor = gc;
try { v78.then(v50, v50); } catch (e) {}
Uint8Array.length = Uint8Array;
const v81 = new Uint8Array(v54);
function f82(a83, a84) {
    const o85 = {
    };
    o85.d = o85;
    o85.g = o85;
    return o85;
}
let v86;
try { v86 = f82(v75, v75); } catch (e) {}
const v87 = v86.g;
v87.d = v87;
f82.arguments = f82;
for (let v88 = 0; v88 < 25; v88++) {
    v88 === v88;
    v88 - v88;
    const v91 = f82();
    const v92 = v91?.constructor;
    try { new v92(v91); } catch (e) {}
    v91.g = v91;
    v91.d = v91;
    Object.defineProperty(v91, v88, { enumerable: true, get: f82, set: f82 });
    const v96 = 8 - 8;
    v96 != v96;
    const v99 = new Int8Array(8);
    v99.c = v17;
    v99.c = v99;
    try { Reflect.preventExtensions(v91); } catch (e) {}
    const v103 = Reflect.construct(Uint16Array, [v99]);
    try { v103.toSorted(110); } catch (e) {}
    v81[v91] = v91;
    gc.name = gc;
    try { ("sync").blink(); } catch (e) {}
    !("sync" == "sync");
    const o110 = {
        "execution": "sync",
    };
    o110.type = o110;
    o110.type = v2;
    gc(o110);
}
