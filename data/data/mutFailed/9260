const v2 = new Uint32Array(188);
Math.tanh(-1000.0);
function f6(a7, a8, a9, a10) {
    a7--;
    ("6Ct").codePointAt(1000000000000.0);
    for (const v16 in "1024") {
    }
    return f6;
}
f6(188);
BigInt64Array.d = BigInt64Array;
const v20 = new BigInt64Array(255);
const v23 = new Uint8Array(2, 2, 2);
function f24(a25, a26, a27, a28) {
    a26 * a26;
    const o42 = {
        "b": a25,
        "c": a28,
        ...v23,
        m(a31) {
            let v32 = -9007199254740991;
            v32++;
            v32 >> v32;
            const v37 = new Int8Array();
            let v38 = 3;
            for (let i = 0; i < 5; i++) {
                [...v38] = v37;
            }
            return v32;
        },
        n(a40, a41) {
        },
    };
    return o42;
}
for (let v43 = 0; v43 < 625; v43++) {
    f24(Uint8Array, 2);
}
new BigInt64Array(2562);
new Uint32Array();
URIError(Float64Array);
new Uint16Array(1475);
v20.constructor;
const v61 = new Float32Array(11);
v61.lastIndexOf();
let v64 = 1000000000000.0;
const v65 = v64--;
class C68 {
    static #m(a70) {
    }
    constructor(a72) {
        const v74 = new Float32Array();
        try { v74.entries(); } catch (e) {}
        const v76 = new Uint16Array(12, -4294967296, v65);
        new Float32Array(v76, -4294967296);
    }
}
const v78 = new C68(-4294967296);
const v79 = [v78];
const v80 = v79.constructor;
try { v80.isArray(v79); } catch (e) {}
class C82 extends v80 {
}
const v83 = new C82();
v83?.constructor;
const v85 = new Int16Array(7);
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
function f89() {
    return f89;
}
for (let i92 = 0, i93 = 10;
    (() => {
        const v94 = i92 < i93;
        class C95 {
        }
        C95[Symbol.toPrimitive] = f89;
        const v100 = new BigUint64Array(3375);
        let [v101,,v102,...v103] = v100;
        return v94;
    })();
    i92++) {
}
v85["reverse"]();
try { BigUint64Array.from(v2); } catch (e) {}
new BigUint64Array(2344);
536870887 << BigUint64Array;
function f118() {
}
class C119 extends f118 {
    toString(a121, a122) {
        const v123 = this.constructor;
        new v123(a122, v123, this, v123, C119);
        -this;
    }
}
const v127 = new Uint8ClampedArray(128);
let v128;
try { v128 = v127.forEach(v127); } catch (e) {}
function f129() {
    const o130 = {
    };
    o130.h = o130;
    return f129;
}
try { new f129(); } catch (e) {}
[31909n];
v128.dotAll = v128;
function f134() {
    const o138 = {
        ...1.0,
        set b(a137) {
        },
    };
    o138.b = o138;
    return o138;
}
%OptimizeFunctionOnNextCall(v128);
for (const v142 of Array(19793)) {
}
const v143 = f129();
try { v143(); } catch (e) {}
