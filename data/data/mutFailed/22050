const v3 = [65536];
[5,1141184731];
const v5 = [-26612];
v5[0] = v5;
new Uint16Array(8);
let v11;
try { v11 = Uint8Array.bind(16); } catch (e) {}
const v12 = new Uint8Array(512);
function f13(a14, a15) {
    Math.cbrt(512);
    let v19 = +a14;
    --v19;
    Math.asin(a14);
    Math.max(512);
    return Math.log(512);
}
v12[Symbol.toPrimitive] = f13;
v12[308] = v12;
BigInt64Array[0] = v11;
new BigInt64Array(6);
function f29() {
}
const v30 = f29();
let v32 = 5;
v32++;
const v34 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { new Uint32Array(BigInt64Array, v12, v3); } catch (e) {}
const v37 = new Uint32Array();
let v38 = -6n;
const v39 = v38--;
const v40 = [601759695];
const v41 = [1073741824,1073741823,1376142744,1073741825];
function f43(a44, a45, a46, a47) {
    function f48() {
        (a46 = Symbol) && v34;
        return f13;
    }
    a44.constructor = f48;
    a44.cause = f29;
    const v50 = a44.constructor;
    function f51() {
        return a44;
    }
    function f52(a53) {
        [Uint8Array,[Uint8Array,Uint8Array]];
    }
    Object.defineProperty(v50, "BYTES_PER_ELEMENT", { writable: true, enumerable: true, get: f51, set: f52 });
    try { v50.bind(a46); } catch (e) {}
    v50.BYTES_PER_ELEMENT = v50;
    try { v50(); } catch (e) {}
    arguments[0] = arguments;
    let v60 = arguments.length;
    let v61 = v60++;
    v61--;
    function f63() {
        let v65;
        try { v65 = ("Vre").toLocaleLowerCase(); } catch (e) {}
        try { v65.link(v61); } catch (e) {}
        let v67;
        try { v67 = v65.padStart(); } catch (e) {}
        try { v67.search("Vre"); } catch (e) {}
        const v69 = ("Vre").charAt();
        v69[0] = v69;
        let v70;
        try { v70 = ("Vre").codePointAt(); } catch (e) {}
        v70++;
        v70 === v70;
        Float64Array.prototype = Float64Array;
        v34.length;
        const o93 = {
            "c": v38,
            "a": v70,
            [v39](a76, a77) {
            },
            [v39](a79, a80, a81, a82) {
                eval();
            },
            "c": v40,
            valueOf(a86, a87) {
            },
            1073741824: v37,
            [v38](a89, a90, a91, a92) {
            },
            "arguments": v32,
            256: a47,
        };
    }
    try { new f63(); } catch (e) {}
    try { f63(); } catch (e) {}
    f63();
    try { Array(arguments); } catch (e) {}
    const v99 = Array(a47);
    v99.valueOf = f63;
    v99[0] = v99;
    try { v99.findLast(); } catch (e) {}
    try { new Uint8Array(a44, v38, arguments); } catch (e) {}
    const v103 = new Uint8Array();
    try { v103.copyWithin(v60, v103); } catch (e) {}
    let v105;
    try { v105 = v103.lastIndexOf(v32); } catch (e) {}
    v105 + v105;
    const t100 = v103.buffer;
    t100.constructor = f29;
    try { Int32Array(); } catch (e) {}
    const v110 = new Int32Array();
    try { v110.entries(); } catch (e) {}
    v110[3];
    for (let v113 = 0; v113 < 5; v113++) {
        const v114 = v113 !== v113;
        v114 || v114;
    }
    %OptimizeFunctionOnNextCall(f63);
    v103[0];
    function F117(a119, a120, a121, a122) {
        if (!new.target) { throw 'must be called with new'; }
        function f123() {
            function F124() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v126 = new F124();
            function f127(a128, a129) {
                const o136 = {
                    [a129](a131, a132, a133) {
                    },
                    set h(a135) {
                    },
                    "h": v126,
                };
                return F124;
            }
            return v11;
        }
        a119[Symbol.toPrimitive] = f123;
        ~a119;
    }
    try { new F117(v99, Array, a46, a46); } catch (e) {}
    new F117(65536, v30);
    ("find")[3];
    try { v41["find"](..."find", a47, ...v40, ...v41, ...522675525n); } catch (e) {}
}
for (let v145 = 0; v145 < 10; v145++) {
    v145 / v145;
    f43(v37);
}
%OptimizeFunctionOnNextCall(f43);
f43(v32);
