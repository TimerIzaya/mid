function f0() {
    const o16 = {
        ..."symbol",
        "h": f0,
        toString(a5) {
            function F6(a8, a9) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = a9;
                } catch(e10) {
                }
                try {
                    this.f = a5;
                } catch(e11) {
                }
                try {
                    this.c = "symbol";
                } catch(e12) {
                }
            }
            new F6("symbol", 6);
            const v14 = new F6(6, a5);
            new F6(v14, a5);
            return F6;
        },
    };
    return o16;
}
f0();
f0();
f0();
[344124.7463466122,1.7976931348623157e+308,-9.719359422587427e+305,-2.0,3.0,4.035595470666295e+307,6.189555977496465,-6.134521535345428,-488.7786997199617];
[1.7976931348623157e+308,-1.4212975733155012e+308,-7.341901082299267,0.49215497034090694,465.98443256767496];
[-683.5973295291135,-2.0,-699.8466946876272,0.15586967645078842,1000000000000.0,1000.0,-1000.0,3.3715443336447775e+306,1000.0,1000.0];
new BigInt64Array(0);
new Uint8ClampedArray(64);
new BigInt64Array(10);
let v32 = -1024;
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new F33(v32, v32, F33, F33);
const v40 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v41 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
}
const v47 = new F43();
class C48 {
}
const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v51 = [601759695];
function f53(a54, a55, a56, a57) {
    function f58() {
        let v61 = Float64Array;
        v61 = a55;
        const v62 = v40.length;
        try {
            v40.forEach(v61);
        } catch(e64) {
        }
        const v65 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v67 = Symbol.toPrimitive;
        const o73 = {
            toString(a69, a70) {
                const v71 = a57 && v61;
                a69 *= v67;
                v71 <= v65;
                return f58;
            },
        };
        const o94 = {
            "c": -4294967297n,
            [522675525n](a76, a77) {
            },
            "c": v51,
            valueOf(a79, a80) {
            },
            [-4294967297n](a82, a83, a84, a85) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v50,
            ...v39,
            [v67]() {
            },
            "type": C48,
            ..."Vre",
            valueOf(a88, a89) {
                return Symbol;
            },
            ..."Vre",
            4: "Vre",
            toString(a91, a92, a93) {
                return a91;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v32 %= -268435456;
        new RegExp(v41, v62, v67);
        v47 - f58;
        try {
            new Float64Array(127);
        } catch(e103) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    const v110 = f58();
    %OptimizeFunctionOnNextCall(f58);
    return v110;
}
for (let v111 = 0; v111 < 5; v111++) {
    f53(v47, F33, F43, v111);
}
