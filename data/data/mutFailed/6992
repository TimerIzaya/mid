function f0() {
    const v2 = new Int32Array();
    let {...v3} = v2;
    function F4() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = -65536;
        } catch(e7) {
        }
        try {
            this.b = -65536;
        } catch(e8) {
        }
        try {
            this.e = -65536;
        } catch(e9) {
        }
    }
    const v10 = [256,9007199254740991,-2147483649,2];
    class C11 {
        static e;
        16 = v10;
        e = F4;
        constructor(a13, a14) {
            try {
                a13.fuck(false, this);
            } catch(e17) {
            }
        }
    }
}
const v20 = new URIError();
const v25 = ("-1723624938").slice(9, "g").normalize();
class C26 {
    constructor(a28, a29) {
        a29.sup(v25, "-1723624938").toLocaleLowerCase();
    }
}
const v32 = [-1000.0,1000000000.0];
const v33 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
function f34() {
    return v20;
}
Object.defineProperty("-1723624938", "length", { configurable: true, enumerable: true, get: f34 });
const v35 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v37 = new Uint32Array();
let v38 = -4294967297n;
const v39 = v38--;
const v40 = [601759695];
function f41(a42, a43, a44, a45) {
    const v46 = a42.constructor;
    let v47;
    try { v47 = v46(); } catch (e) {}
    const v48 = v47?.constructor;
    let v49;
    try { v49 = v48(f41, a42, v35, Uint32Array, v46); } catch (e) {}
    function f50() {
        const v52 = ("Vre").charAt(v49);
        v52.blink();
        let v54;
        try { v54 = ("Vre").codePointAt(v35); } catch (e) {}
        v54 % v54;
        let v56 = Float64Array;
        v56 = a43;
        b = v35;
        let v57 = v35.length;
        v57++;
        try {
            v33.forEach(a43);
        } catch(e60) {
            e60.message = e60;
        }
        const o71 = {
            "c": v38,
            valueOf(a62, a63) {
                return v47;
            },
            1073741824: v37,
            [v38](a65, a66, a67, a68) {
                eval(v52);
            },
        };
        return v33;
    }
    f50();
    const v74 = Array(v48);
    try { v74.findLast(); } catch (e) {}
    const v77 = Int8Array.of();
    let v78;
    try { v78 = v77.every(v77, a42, v77, a43, Array); } catch (e) {}
    const v79 = new Int8Array(v78);
    const v81 = v79.buffer.slice();
    const v82 = v81.constructor;
    try { v82(v81, v78, v39, v77, a42); } catch (e) {}
    const v85 = new Int32Array(v82, v46, v46);
    v85.lastIndexOf(a42, a44);
    try { v33["find"](..."find", a45, ...v40, ...v33); } catch (e) {}
    return v38;
}
class C90 {
}
function f91(a92, a93) {
    return f91;
}
new Promise(f91);
~8n;
33062n & 33062n;
function f100(a101, a102) {
    const v103 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v105 = new Uint32Array();
    let v106 = -4294967297n;
    const v107 = v106--;
    const v108 = [1073741824,1073741823,1376142744,1073741825];
    function f109(a110, a111, a112, a113) {
        const v114 = a110.constructor;
        let v115;
        try { v115 = v114(); } catch (e) {}
        const v116 = v115?.constructor;
        let v117;
        try { v117 = v116(f109, a110, v103, Uint32Array, v114); } catch (e) {}
        function f118() {
            const v120 = ("Vre").charAt(v117);
            v120.blink();
            let v122;
            try { v122 = ("Vre").codePointAt(v103); } catch (e) {}
            v122 % v122;
            let v124 = Float64Array;
            v124 = a111;
            b = v103;
            let v125 = v103.length;
            v125++;
            try {
                v108.forEach(a111);
            } catch(e128) {
                e128.message = e128;
            }
            const o139 = {
                "c": v106,
                valueOf(a130, a131) {
                    return v115;
                },
                1073741824: v105,
                [v106](a133, a134, a135, a136) {
                    eval(v120);
                },
            };
            return v108;
        }
        f118();
        const v142 = Array(v116);
        try { v142.findLast(); } catch (e) {}
        const v145 = Int8Array.of();
        let v146;
        try { v146 = v145.every(v145, a110, v145, a111, Array); } catch (e) {}
        const v147 = new Int8Array(v146);
        const v149 = v147.buffer.slice();
        const v150 = v149.constructor;
        try { v150(v149, v146, v107, v145, a110); } catch (e) {}
        const v153 = new Int32Array(v150, v114, v114);
        v153.lastIndexOf(a110, a112);
        try { v108["find"](..."find", a113, ...v40, ...v108); } catch (e) {}
        return v106;
    }
    const o157 = {
        [33062n]: 8n,
        __proto__: v33,
        [37369]: a102,
        [a101]: a101,
        ...a101,
        5: v32,
        ...v32,
    };
    return o157;
}
-48905 & -48905;
class C161 extends f0 {
    [4096] = 64;
    f = 64;
    #h;
    [-48905] = f0;
    static #f = 4096;
    static d = f0;
    c = f0;
    #g = f0;
    10;
    #b;
}
try { new C161(); } catch (e) {}
new C161();
new C161();
function f165(a166, a167, a168) {
    return f165;
}
const o171 = {
    "arguments": v32,
    "type": "function",
};
new Worker(f165, o171);
const v173 = new C161();
v173[4096] = v173;
[4096,64,v173,v173];
const v175 = [v173];
new BigUint64Array();
function f178() {
}
const v182 = new Uint8ClampedArray(5);
new Float32Array(v182);
[v175,v175];
const v187 = Int8Array.prototype;
try { v187.hasOwnProperty(v187); } catch (e) {}
const v190 = new BigInt64Array(128);
v190[6];
const v193 = new Uint16Array();
try { v193.lastIndexOf(4096); } catch (e) {}
v190[14] = v190 > v193;
