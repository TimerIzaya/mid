const v0 = [65535,9007199254740990,-268435456,-642324227,55909,460244332,12];
const v1 = [-65536,-9007199254740992,9,128];
[2,9007199254740990,65536];
const v3 = [4];
try { v3.sort(v3); } catch (e) {}
([127,21515,-1,9007199254740991,268435439,-1,9007199254740992])[0];
const v7 = [-11,536870887,64,-15,-9007199254740991,257];
try { new Map(); } catch (e) {}
new Map();
const v11 = [678.282255768509,-Infinity,-9.871580796440373,0.3772372244906659,-0.0,1.1125387687322076e+308,271.54105552262854];
const v12 = [-2.220446049250313e-16,Infinity,4.274382189615567,-9.57391052979342,5.0,411509.5408762349,-792427.8763699166,-1.196457330634712e+308];
v11[1] = [563.8291119684302,0.27596175836735026,3.0,671.8239032073834,-2.2250738585072014e-308];
class C14 extends Map {
    p(a16, a17) {
        new Map(this);
        return Map;
    }
    #toString(a21, a22) {
        throw a22;
        v0[v7] |= v0;
        const v23 = new Map(v12);
        return v23;
    }
    static 46 = v1;
    static #h = v0;
}
C14[46];
new C14();
new v1();
new C14();
for (let v28 = 0; v28 < 25; v28++) {
    const v29 = [601759695];
    const v30 = [1073741824,1073741823,1376142744,1073741825];
    function f31(a32, a33, a34, a35) {
        ("find")[1];
        try { v30["find"](..."find", a35, ...v29, ...v30); } catch (e) {}
        const v41 = Symbol.isConcatSpreadable;
        const v42 = v29.description;
        const v43 = Array(a34);
        try { v43.groupToMap(v41, v42, f31, v43, v41); } catch (e) {}
        return v7;
    }
    for (let v45 = 0; v45 < 5; v45++) {
        f31();
    }
}
