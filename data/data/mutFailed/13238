[1000000000000.0,-1.7976931348623157e+308,-714.9744183030335,1e-15];
[-1000000000000.0,-0.6936899472908582,1.1744344584786521,0.0];
const v2 = [Infinity,-1000000000.0,-3.0,331.16775367084597,0.7534488410976417,-3.5806895237786866e+306,9.077319691574942,1.0];
const v3 = [1000000000.0,-1.3776452930532159e+308,4.460522900748446e+306,-378407.8124788648,1.0,5.0,984335.4344547552,6.088853439279905,-2.0];
[-2.2250738585072014e-308,-0.0,872402.722888567,0.0,7.530358919766389];
const v5 = [1000.0,2.220446049250313e-16,2.220446049250313e-16,4.0,3.2483455168367773e+307,7.54850253244237];
new Int32Array();
class C9 extends Set {
}
const v13 = [4294967296,v5];
const v14 = [-14,-14,v2,v13,v3];
new BigUint64Array(10);
function f18() {
    return f18;
}
const v19 = /{}(x)(x)(x)\4*a{0}a|b/msy;
const v21 = new BigUint64Array();
function F22(a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.constructor;
    try { new v27(BigUint64Array, v21, v21); } catch (e) {}
    a26[1];
    function f31(a32, a33) {
        a33 / a33;
        arguments[1];
        arguments.toString = a32;
    }
    try { f31(f18, v19); } catch (e) {}
    f31(v27, 8077n);
}
[5,v14,v13];
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C46 extends 4096 {
        }
    } catch(e47) {
        class C48 {
            constructor(a50, a51) {
                const o54 = {
                    "type": "minor",
                };
                o54.b = gc;
                o54.b = o54;
                gc(o54);
            }
        }
        const v56 = new C48();
        function f57(a58) {
            a58?.e;
            [987.0959523568474,0.5414113254776542,-1.0,1.7976931348623157e+308,-4.0,-1000000000000.0,-115.83724200617769,1.2616660490284733e+308,-3.0];
            const v61 = [-0.0,1000000000.0,5.0];
            [0.4078517423317227,0.17826247645173487,-1000000000000.0,1e-15,1000.0,0.0026174275654886614,4.0];
            return v61;
        }
        v56.constructor = f57;
        v56.constructor;
    }
}
const v64 = new F42(4096, F42);
Date();
const v68 = new Date();
v68[Symbol.iterator] = Date;
const o71 = {
    __proto__: v68,
};
try { o71.toUTCString(); } catch (e) {}
class C73 extends Date {
    static {
        try {
        } catch(e75) {
        }
    }
}
2147483649 & 10;
const v80 = new Float32Array(v68, v64, v64);
const v82 = new Uint8Array(268435440);
v82[6] = v80;
const v83 = new C73(4221);
v83.toTimeString();
Object.defineProperty(Date, v83, { get: Date, set: Date });
class C86 extends Date {
    static get c() {
        const v88 = `
        `;
        eval();
    }
}
