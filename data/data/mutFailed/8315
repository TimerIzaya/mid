try {
    BigInt.asUintN(-15843, 45011n);
} catch(e6) {
}
function F8(a10) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(this); } catch (e) {}
    const v12 = this?.constructor;
    try { new v12(a10); } catch (e) {}
    function f14() {
        for (let i17 = 0, i18 = 10; i17 < i18; i17++, i18--) {
        }
        return f14;
    }
    f14();
    -a10;
    try {
        this.d = a10;
    } catch(e28) {
    }
}
try { F8.bind(F8); } catch (e) {}
const v30 = new F8(5.0, 5.0, -1.0, -1.0);
const v31 = new F8(0.0);
const v32 = new F8(5.0, v31, v30, 0.0);
try { Uint8ClampedArray.from(v30); } catch (e) {}
const v36 = new Uint8ClampedArray(3);
1000 * 1000;
const v40 = new v30();
const v41 = new v30();
function f42(a43, a44, a45) {
    return v40 == v41 ? v40 : v41;
}
const v48 = new Uint16Array(1000);
const v50 = [65536,12220,268435456,-176972115,977653611];
for (const v51 in v50) {
    try { e(v50, e, v51, v51, e); } catch (e) {}
    function F54(a56, a57) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = a56;
    }
    new F54();
}
new BigInt64Array(10, 1000, 0.0, v32);
const v61 = [2.0,-1e-15,1.7976931348623157e+308];
v61[2] = v61;
try { new Int16Array(v36, v30, F8); } catch (e) {}
const v65 = new Int16Array(1371, v48, Int16Array, v48);
v61.flat(1351, 1351, v32)[1];
v65.lastIndexOf(1371, 1351);
