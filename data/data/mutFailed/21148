class C3 {
    16 = 9223372036854775807;
    static get h() {
        return 1024;
    }
    static #h;
    static #o(a9) {
        9223372036854775807 / this;
        return a9 & 9223372036854775807;
    }
    static 129 = -57018.83964345278;
    #e;
    static f = "__proto__";
}
const v12 = new C3();
const v13 = new C3();
new C3();
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a19;
    } catch(e21) {
    }
    try {
        this.f = "__proto__";
    } catch(e22) {
    }
    try {
        this.c = a17;
    } catch(e23) {
    }
}
const v24 = new F15(v12, F15, v12, "__proto__");
const v25 = new F15(v13, C3, v12, v13);
new F15(v24, F15, v25, v24);
const o27 = {
};
class C30 {
    [o27] = -522.1393553916671;
    #a = 1.185961373472971e+308;
}
const v31 = new C30();
const v32 = o27.constructor;
const v33 = v32.freeze(v31);
const v35 = 1922 % 1922;
const v36 = v35 == v35;
for (let v37 = 0; v37 < 25; v37++) {
    function f38() {
        return f38;
    }
    function f39(a40, a41, a42, a43) {
        function f44() {
            return v35;
        }
        f44.h = f44;
        const v45 = f44.length;
        const v46 = -v45;
        v45 | v45;
        const v48 = f38();
        const v49 = v48?.constructor;
        v49.d = v49;
        let v50;
        try { v50 = v49(); } catch (e) {}
        let v51;
        try { v51 = v50.bind(); } catch (e) {}
        C30.a;
        try {
            v31.toString = v49;
        } catch(e53) {
        }
        const v54 = v51.bind();
        v50.e = v50;
        const v55 = v49 * v36;
        v55 - v55;
        const v57 = typeof f44;
        try { v57.italics(v57, v46, v54, v37, o27); } catch (e) {}
        const v60 = v57 === "n";
        v50(v32, v33, v60);
        const v63 = new Int8Array(C30, a43, a42);
        const v64 = v63.entries();
        with (v49) {
            Object.defineProperty("n", "c", { configurable: true, enumerable: true, set: f44 });
        }
        v35[7] = v37;
        let v66;
        try { v66 = v64.next(); } catch (e) {}
        const v67 = v64.next(1.185961373472971e+308, f38, o27, v66, v66);
        try {
            a41.f = 1922;
        } catch(e68) {
            e68.b = e68;
        }
        const v69 = [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        v69[1] = v69;
        const v70 = [0.5067933585829714,1.0,-930004.7663294855,2.6834769420801777e+307,-0.0,0.8576192242870103,1000000.0,-3.341757808913002];
        v70[7] = v70;
        ([-2.2250738585072014e-308,-0.0,3.0,743.9950267369297]).sort(v50);
        const v74 = new Uint32Array(v63, v67, v37);
        const v75 = v74.subarray();
        v75.entries();
        v75.entries();
        ([v48]).toLocaleString().strike();
        let v83 = BigUint64Array * 536870887;
        const v85 = ("c").toLowerCase();
        try { v85.sub(); } catch (e) {}
        try { v85.toUpperCase(); } catch (e) {}
        v83 >>> v83;
        const v89 = v83--;
        v89 - v89;
        const v93 = ("find").blink().replaceAll;
        try { v93(v60); } catch (e) {}
        return f38;
    }
    for (let v95 = 0; v95 < 5; v95++) {
        f39(v95, v32, v32, 1922);
    }
}
