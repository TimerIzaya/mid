const v0 = [8,-2147483649,-10,2147483648,65537,-9417];
const v1 = [24395,536870888,129,256];
const v2 = [16,2147483647,4,1054378822,-2147483649,128,-65536];
class C3 {
    #toString(a5, a6, a7) {
    }
}
Reflect.construct(C3, v2, WeakSet);
[287.7851750795471,Infinity,2.2250738585072014e-308,-8.25025723040721e+307,-1e-15,-1000000.0];
[3.0,5.34790746150515e+307,-2.0];
const v13 = [2.2250738585072014e-308,2.220446049250313e-16,-1000.0,-1.0,504.154978256656,0.6752972653088739,1.2849637803716398e+308,0.4591176035143689,-170.70866144712227];
new Map();
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a20;
    } catch(e21) {
    }
    try {
        this.b = a19;
    } catch(e22) {
    }
}
new F16(v2, v13, v13);
new F16(v1, F16, v0);
const v25 = new F16(v0, v0, v1);
class C27 {
    static #valueOf(a29, a30, a31, a32) {
        function f34() {
            try {
                v2.forEach();
            } catch(e36) {
                e36.a = e36;
            }
            Symbol.for();
            return v2;
        }
        function f40(a41) {
        }
        const v42 = [1000];
        const v45 = new Int8Array(1342);
        Object.defineProperty(v45, v42, { writable: true, enumerable: true, value: v45 });
        const o52 = {
            "maxByteLength": a30,
            set c(a47) {
                super.c -= 1342;
            },
            o(a49, a50) {
                super[SharedArrayBuffer];
            },
        };
        const v54 = new SharedArrayBuffer(5, a32);
        new C27(v54);
        return a32;
    }
    2147483648 = v0;
    #f = Map;
}
Math.atan2(v25);
for (let v59 = 0; v59 < 5; v59++) {
    let v62 = -2147483649 * v59;
    ++v62;
    Math.tan(v62);
}
new Map();
const v66 = new C27();
new C27();
const t67 = false;
new t67();
try { ("getPrototypeOf").blink(); } catch (e) {}
class C73 {
    ["getPrototypeOf"] = -1.7976931348623157e+308;
}
new BigUint64Array(16);
try { Float32Array.apply(16, v66); } catch (e) {}
