new Map();
const v2 = [Infinity,1e-15,0.6796370123303789,-Infinity];
const v5 = new Uint8ClampedArray(1907);
v5[7] = 43464885;
const v7 = [-1000000000.0,-5.0];
function F8(a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    a11 === a11;
    new BigUint64Array();
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
const v17 = [4.0,-2.220446049250313e-16,-1e-15,0.04471428582287973,3.0,8.745758862704065,5.0,3.0];
const v18 = /(?:a*)+q(?<a>.)/guds;
function f19(a20) {
    a20.dotAll = a20;
    ([-3,47741,-16128,9007199254740992,-1024,-58567,268435439,-4294967296,1807295090,-9223372036854775808]).flat(a20);
    const v24 = new Uint8ClampedArray(v18, a20);
    -53409 % v24;
    const o28 = {
        get d() {
            return a20;
        },
    };
    return v18;
}
new Map();
class C31 {
    static b;
    constructor(a33, a34) {
        ++a33;
        const o38 = {
            "maxByteLength": 15,
        };
        const v40 = new ArrayBuffer(6, o38);
        new Float32Array(v40);
    }
}
const v43 = new C31(v2, v2);
new C31(v7, v43);
new C31(v17, v7);
let v46 = [-883936.0401947303,9.41640124927378e+307,0.060305085001335246];
v46 /= v46;
const v50 = new Set();
v50[C31];
function f52(a53) {
    Promise.race();
}
gc();
