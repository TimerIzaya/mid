class C3 {
    constructor(a5, a6, a7, a8) {
        this.#m();
    }
    e;
    static {
        for (let i14 = 0, i15 = 10;
            (() => {
                const v16 = i14 < i15;
                class C17 extends Date {
                }
                return v16;
            })();
            i14++) {
        }
    }
    static #b = -1634222783;
    static {
        async function f24(a25) {
            function f26(a27, a28) {
                a28.constructor(a28);
                return f26;
            }
            new Promise(f26);
            var a = this;
            const o33 = {
            };
            gc(o33);
            while (0 < 5) {
            }
            a25 > this;
            -2.2250738585072014e-308 - -2.2250738585072014e-308;
            const v47 = await 0.20432124675235397;
            v47 !== v47;
            return -2.2250738585072014e-308;
        }
        const v49 = f24(this);
        try { v49.then("toStringTag", f24); } catch (e) {}
    }
    static #g = "toStringTag";
    static get c() {
        const v52 = `
        `;
        eval();
    }
}
const v55 = new C3();
const v56 = new C3();
const v57 = new C3();
const v58 = v57?.__lookupGetter__;
try { new v58("toStringTag"); } catch (e) {}
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this?.constructor;
    try { new v64(a62, -1634222783); } catch (e) {}
    try { a62.propertyIsEnumerable(this); } catch (e) {}
    try {
        this.g = a63;
    } catch(e67) {
    }
    try {
        this.c = a62;
    } catch(e68) {
    }
    try {
        function F69(a71) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v72 = this?.constructor;
        try { new v72(); } catch (e) {}
        function F75(a77, a78, a79, a80) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a79;
            } catch(e81) {
            }
            try {
                this.h = -9223372036854775807;
            } catch(e82) {
            }
        }
        new F75(v72, a62, a62, a62);
        this.h = a62;
        const v86 = [1000.0,1000n];
        [v86,v86,v86];
        const o110 = {
            valueOf(a91, a92) {
                function f93() {
                    function f94(a95) {
                        new Float64Array(64);
                        new BigInt64Array(3481);
                    }
                    10 ^ f94(f94);
                    return 1987035518;
                }
                const v107 = [];
                const o108 = {
                    "arguments": v107,
                    "type": "function",
                };
                new Worker(f93, o108);
                return 1987035518;
            },
        };
    } catch(e111) {
    }
}
function f112(a113, a114) {
    function f115() {
        return f112;
    }
    Object.defineProperty(a113, "toString", { configurable: true, get: f115 });
    return a114;
}
f112(f112);
const v117 = new F60(v56, C3);
new F60(C3, C3);
new F60(v117, v55);
7 >> 7;
new BigInt64Array(7);
new Float32Array(693);
new BigUint64Array(235);
function F131() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
        const v136 = -(-7);
        Math.tan(v136 ** v136);
    } catch(e139) {
    }
}
function F140(a142, a143) {
    if (!new.target) { throw 'must be called with new'; }
    const v144 = this.constructor;
    try { new v144(F131, a142, F131, v144); } catch (e) {}
    new F131();
}
1 >>> 1;
Int16Array.name;
const v150 = new Int16Array();
const v151 = v150?.findLastIndex;
try { new v151(693); } catch (e) {}
try { BigUint64Array.apply(v150, 1); } catch (e) {}
