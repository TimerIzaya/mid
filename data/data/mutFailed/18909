const v0 = [-8.736430217306641e+307,1000000.0,-489732.20800014783,-184242.20455107337,-1000000000.0,1e-15,0.5200961913166134,5.457948793122718];
const v1 = [-1.0,-248997.68585925247,1000.0,-709.7502441609931,-0.43830177786731106,-1000000000000.0,3.0,-1000000000000.0,0.563498967435769];
const v2 = [0.9126235039864234,-1.0343664614553083e+308,-Infinity,-1000000.0,-611248.8487845426,919.1424306032225,4.0,0.1372627394255056];
function f3() {
    return v0;
}
class C4 extends f3 {
    static 5 = v2;
    b = v2;
    p(a6) {
        try {
            f3();
        } catch(e8) {
        }
        return v1;
    }
    #d;
}
new C4();
new C4();
new C4();
class C15 {
    static {
    }
}
const o18 = {
};
class C19 {
    constructor(a21, a22) {
    }
}
f3();
const v25 = o18.b;
[-4294967297,-582388462,42964,4,-10,536870887,14,-16,1024];
[4096,21327,-4,268435456,10,57622];
[-215799756,-256,-10];
const v29 = new C19();
const v31 = v29 << -1557853178;
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F33;
    try {
        this.b = "function";
    } catch(e37) {
    }
    try {
        this.h = "function";
    } catch(e38) {
    }
}
const v39 = new F33();
new F33();
new F33("function", v39);
const v44 = new Float32Array();
class C45 {
    set d(a47) {
    }
    #valueOf(a49, a50, a51) {
        function F52(a54, a55, a56) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a56;
            } catch(e57) {
            }
            try {
                this.g = a56;
            } catch(e58) {
            }
        }
        new F52(f3, v31, -4294967297n);
        new F52(v25, -1557853178, -34191n);
        new F52("function", a49, -34191n);
        return a50;
    }
    static #m(a63, a64, a65) {
    }
    static {
        for (let v67 = 0; v67 < 10; v67++) {
            function f68() {
                return v67;
            }
            const v69 = [601759695];
            const v70 = [1073741824,1073741823,1376142744,1073741825];
            function f72(a73, a74, a75, a76) {
                function f78() {
                    return a73;
                }
                f68();
                try { v69.slice(a73, 4096); } catch (e) {}
                this > v67;
                this[2];
                Object.defineProperty(this, "c", { enumerable: true, get: f72 });
                const v85 = new Int8Array();
                function f86(a87, a88) {
                    return a87;
                }
                f86(f86(v70, v44));
                v85.buffer.slice(2147483648);
                %OptimizeFunctionOnNextCall(f78);
                let v95;
                try { v95 = v70["find"](..."find", a76, ...v69, ...v70, ...522675525n); } catch (e) {}
                v95 <= a75;
                return arguments;
            }
            for (let v97 = 0; v97 < 10; v97++) {
                f72();
            }
        }
    }
}
