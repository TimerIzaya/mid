class C3 {
    m(a5, a6) {
        class C7 {
            static #f = 1073741825;
            a = a6;
        }
        new C7();
        new C7();
        new C7();
        return 1073741825;
    }
    static #a;
    static [1073741825];
    221 = 0.0;
}
C3[1073741825];
const v12 = C3.name;
v12[1] = v12;
const v13 = new C3();
v13[221] = v13;
const v14 = new C3();
const v15 = new C3();
let v16;
try { v16 = v15.toString(); } catch (e) {}
try { v16.search(v13); } catch (e) {}
const v19 = Set.length;
v19 & v19;
const v21 = new Set();
try { v21.add(v13); } catch (e) {}
const v23 = [v13,v14,v21,v21];
const v24 = [v15];
[v24,Set,v14,v24,1073741825];
class C26 {
    #f;
    #e;
    b = Set;
    65536;
    constructor(a28, a29) {
        a28[221] = a28;
        a29.length;
        const v31 = a28?.__lookupGetter__;
        try { new v31(a29); } catch (e) {}
        try { new v31(this); } catch (e) {}
        class C34 {
            static g;
        }
        C34.name = C34;
        new C34();
        new C34();
        const v37 = new C34();
        const v38 = v37?.__defineSetter__;
        try { new v38(v21, v37); } catch (e) {}
    }
    static g;
}
try { C26.call(C3); } catch (e) {}
const v41 = new C26(v14, C26);
const v42 = new C26(v15, v14);
v42[65536];
new C26(v13, v14);
const t60 = "I";
t60[0] = "I";
"set" + v23;
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = a50?.toLocaleUpperCase;
    try { new v52(); } catch (e) {}
    try {
        this.h = v12;
    } catch(e54) {
    }
}
new F48(v16, 1073741825);
const v56 = new F48(v24, v16);
v56.e = v56;
new F48(v16, v14);
const t76 = "I";
t76[0] = "I";
let v58 = ("I").localeCompare();
v58++;
const v60 = [1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691];
try { v60.findIndex(v15); } catch (e) {}
const v63 = [v58];
const v64 = v60.pop;
const v65 = v64?.call;
try { new v65(v41); } catch (e) {}
Reflect.apply(v64, v58, v63);
