function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        function f4() {
            return f4;
        }
    }
    Object.defineProperty(this, "a", { writable: true, configurable: true, set: f2 });
    try {
        this.a = 4294967295;
    } catch(e6) {
    }
    try {
        this.c = 4294967295;
    } catch(e7) {
    }
    try {
        this.e = 4294967295;
    } catch(e8) {
    }
}
function f9() {
    let v12 = NaN;
    let v13 = --v12;
    const v14 = v13++;
    v14 && v13;
    return v14;
}
F0[Symbol.toPrimitive] = f9;
const v18 = new F0();
const v19 = new F0();
const v20 = new F0();
let v22 = "object";
function f24(a25, a26, a27, a28) {
    const o42 = {
        "e": a25,
        "g": F0,
        "d": a27,
        [F0]: v20,
        ...v20,
        "b": a26,
        get h() {
            super.h;
            v22 = a26;
            const v32 = Symbol.iterator;
            const o41 = {
                [v32]() {
                    let v34 = 10;
                    const o40 = {
                        next() {
                            v34--;
                            const v38 = v34 == 0;
                            const o39 = {
                                "done": v38,
                                "value": v34,
                            };
                            return o39;
                        },
                    };
                    return o40;
                },
            };
            return a27;
        },
    };
    return o42;
}
f24(v19, "d", v20, "d");
f24(v22, v22, v18, "d");
f24(f24, "d", v20, "getOwnPropertySymbols");
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a52(); } catch (e) {}
    function f54(a55, a56, a57, a58) {
        a56[Symbol.toPrimitive] = Symbol;
        const v61 = /(?:a*)+q(?<a>.)/guds;
        for (let i64 = 0, i65 = 10; i64 < i65; i65--) {
            v61.compile(a56);
        }
        return F49;
    }
    for (let v73 = 0; v73 < 5; v73++) {
        f54(a51, f54, v73, a51);
    }
    %OptimizeFunctionOnNextCall(f54);
}
new F49(F49, F49);
