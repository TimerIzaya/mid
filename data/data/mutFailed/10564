const v2 = new Uint16Array(128);
new Uint8ClampedArray(10);
new Uint16Array(2464);
class C12 {
    static {
        try { this(); } catch (e) {}
        128 instanceof Uint16Array;
        v2[7];
        this || 1489760522n;
        this.b &= 128;
    }
    get g() {
        function f19(a20) {
            function f22(a23) {
                a20.f <<= a20;
                let v27;
                try {
                const t0 = 10000n;
                v27 = t0(2n, -536870912n);
                } catch (e) {}
                const t20 = [v27,v27,v27];
                delete t20[67];
            }
            this.onmessage = f22;
            try { a20(f22, this, this); } catch (e) {}
        }
        const v33 = [1489760522n];
        const o34 = {
            "arguments": v33,
            "type": "function",
        };
        Math.expm1(Math);
        const v37 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v38 = 0; v38 < 5; v38++) {
            function f39() {
                try {
                    v37.forEach();
                } catch(e41) {
                    e41.a = e41;
                }
                const v43 = Symbol.toPrimitive;
                Symbol.for(v43.description);
                ("function").description;
                Symbol.for();
                return v43;
            }
            f39();
            %OptimizeFunctionOnNextCall(f39);
        }
        new Worker(f19, o34);
        return Uint16Array;
    }
}
new C12();
new C12();
new C12();
let v54 = /a|b/vdy;
let v55 = /7Z(?:a?)+/gudsy;
const v56 = /\coQ/gdy;
function F57(a59) {
    if (!new.target) { throw 'must be called with new'; }
    let v61 = 1000000000000.0;
    const v66 = new Uint16Array(Float32Array, -4294967296, v61--);
    new Float32Array(v66, -4294967296);
    try {
        this.e = v54;
    } catch(e68) {
    }
    try {
        this.g = a59;
    } catch(e69) {
        v56.dotAll >>= e69;
        let v70;
        try { v70 = e69(e69, v55); } catch (e) {}
        v55 = v54;
        return e69;
        v54 = v70;
    }
}
const v71 = new F57(v54);
const v72 = new F57(v55);
const v73 = new F57(v54);
new Float64Array(2147483647);
const v77 = /ha$\P{Decimal_Number}+/vdisy;
v77.constructor.$7;
class C80 extends F57 {
    static {
        super[v73] = v54;
        let v82;
        try { v82 = v55(F57); } catch (e) {}
        super.g |= v54;
        const v83 = v56.exec(v82);
        const v84 = super[v83];
        try { v84(this, v84); } catch (e) {}
        v56[4];
        const v88 = v73 === v82 ? v73 : v82;
        try {
            v82.c = this;
        } catch(e89) {
            const o94 = {
                [e89]: this,
                "f": v88,
                m(a91) {
                    super[-4.0] = delete v77[2];
                    return -4.0;
                },
            };
            Symbol.match;
            v72[v83];
        }
    }
    #h;
    static #g;
    g = v71;
    #b;
}
const v98 = [4294967296,-57202,256,48562,333990054];
try { Uint32Array.apply(2464, v98); } catch (e) {}
Promise.reject(Promise);
const t118 = -5n;
const v103 = new t118();
const v104 = new C80();
const v106 = ("536870888")[3];
const o107 = {
};
const t125 = o107.constructor;
t125(128).toExponential(v106);
new C80();
const v112 = [-1077398797,2,1671415104,4294967297];
function f113(a114, a115, a116) {
    function f118(a119) {
        ++a119;
    }
    this.onmessage = f118;
    try {
        this.fuck(v73, a115);
    } catch(e122) {
    }
}
const v125 = [C80,v72,v54];
const o126 = {
    "arguments": v125,
    "type": "function",
    [v56]: "function",
    "d": v104,
    __proto__: v104,
    [f113]: v103,
    "e": v112,
};
[-5,-65536,-65537,14311,14,255];
function f128(a129, a130) {
    Math.imul(3, a129 % a129);
    Math.log(3);
    a130.constructor(a130);
    return f128;
}
const t156 = 1489760522n;
new t156(f128);
