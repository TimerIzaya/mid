let v4;
try { v4 = Map.apply(14, 15); } catch (e) {}
const v5 = new Map(15, v4, v4);
function f6(a7) {
    a7 >> a7;
    const o17 = {
        1073741824: 15,
        "g": Map,
        set b(a10) {
            function f11() {
                [965649.4743174384,-2.0,-1e-15,-429.69872852640356,-1000000000.0,-2.220446049250313e-16];
                [1000.0,1.0687428079353403e+308];
                [775355.3490906435,Infinity,-693.5745865933745,532.1897758239015,2.0,-252631.64497254102,1.7976931348623157e+308,-1000000000.0,5.928796702289572e+307,0.0025488345443194227];
                return arguments;
            }
            f11(v5);
        },
        __proto__: v5,
        3: v5,
    };
    o17[1073741824] = o17;
    return o17;
}
let v18 = f6(2147483649);
const v19 = f6(15);
const v20 = f6(2147483649);
const v22 = new WeakMap();
function f23() {
    return f6;
}
f23.caller = f23;
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this?.constructor;
    try { new v30(WeakMap, a27, a26, v20, v22, v30); } catch (e) {}
    a27 + a27;
    try {
        this.f = a29;
    } catch(e33) {
    }
    try {
        this.b = a29;
    } catch(e34) {
    }
}
const v35 = new F24(v18, 2147483649, v19, v18);
new F24(v19, 2147483649, v18, v18);
new F24(v22, 15, v22, v20);
let v39;
try { v39 = new BigUint64Array(F24, 14, F24); } catch (e) {}
try { v5.delete(v39); } catch (e) {}
const v41 = v35.NEGATIVE_INFINITY;
v18 += v18;
try {
    v4.b = v41;
} catch(e42) {
}
const v43 = [BigUint64Array];
try { v43.reverse(); } catch (e) {}
try {
    new BigUint64Array(v43, v4, v43, v20);
} catch(e46) {
    e46.e = e46;
    try {
        new f6(-4294967296n);
    } catch(e49) {
    }
}
