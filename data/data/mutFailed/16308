const v2 = new Int8Array(10);
210 === 210;
const v6 = new Int32Array(210);
try { v6.join(10); } catch (e) {}
try { new Float32Array(Int8Array, v6, 10); } catch (e) {}
const v11 = new Float32Array(5);
try { v11.slice(210, Int32Array); } catch (e) {}
/(\xed\xb0\x80)\x01/vdim;
const v14 = /}/gims;
const v15 = /1*/udisy;
class C16 {
    constructor(a18, a19, a20, a21) {
        try { this.propertyIsEnumerable(a19); } catch (e) {}
        a18.g = a18;
        const v23 = a19 >>> a19;
        a20 >>> a20;
        a21 >>> a21;
        v15[v15] = this;
        let v26 = a18[v11];
        a21.c -= 5;
        v26 = Int32Array;
        super[v23];
        Reflect.construct(Int32Array, [Reflect,210,5], v26);
    }
    static #toString(a32, a33, a34) {
        if (5 != a34) {
            const v38 = delete v11?.byteLength;
            [1744559643,15,512,-6];
            [2,8,65537,12,-49590,2147483649,-2];
            [14198,7];
            super[v38];
            let v44 = a33 - -12;
            Math.asin(v44);
            const v46 = -31324;
            Math.log(v46);
            ++v44;
            Math.floor(v46);
        } else {
            try {
                super.o(210, 210);
            } catch(e51) {
            }
        }
        return v2;
    }
}
new C16(v14, 5, 10, 210);
const v53 = new C16(v14, 5, 210, Int32Array);
new C16(v53, 10, 5, v14);
for (let v56 = 0; v56 < 5; v56++) {
    function f57() {
        const v59 = Array();
        try { v59.findLast(v11); } catch (e) {}
        v59[3] = 65535;
        const v61 = v59.pop();
        v61 > v61;
        return v61;
    }
    let v63 = f57();
    v63--;
    %OptimizeFunctionOnNextCall(f57);
}
