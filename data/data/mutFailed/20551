class C3 {
    static toString(a5, a6) {
        let v7;
        try { v7 = a6(a6, "symbol"); } catch (e) {}
        try {
            super.setInt16(v7, "symbol", 0.5062728748210361);
        } catch(e9) {
            let v10 = [601759695];
            const v11 = [1073741824,1073741823,1376142744,1073741825];
            function f12(a13, a14, a15, a16) {
                function f17() {
                    function f18() {
                    }
                    class C19 extends f18 {
                    }
                    const v20 = new C19();
                    let [,v21,...v22] = "symbol";
                    f18();
                    v10--;
                    C19[a5];
                    let [v26,v27,v28] = "symbol";
                    class C29 extends C19 {
                        #b = v20;
                        constructor(a31, a32) {
                            super();
                            let v33 = 0;
                            for (let i = 0; i < 5; i++) {
                                v33 < 7;
                                try {
                                    v20.#b;
                                } catch(e37) {
                                }
                                v33++;
                            }
                        }
                    }
                    f17 = C3;
                    const v41 = -Infinity;
                    Math.asinh(a14);
                    const v43 = !v41;
                    Math.sinh(a14 >>> v41);
                    Math.floor(v43);
                    v11.forEach(a14);
                }
                function F49() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                new F49();
                const v53 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
                const v54 = [601759695];
                const v55 = [1073741824,1073741823,1376142744,1073741825];
                function f56(a57, a58, a59, a60) {
                    const o68 = {
                        ...v53,
                        ..."Vre",
                        "c": a60,
                        84: arguments,
                        ..."Vre",
                        valueOf(a66, a67) {
                            return a59;
                        },
                        ..."Vre",
                        4: "-1073741824",
                        5: -4294967295,
                        6: -268435456,
                    };
                    %OptimizeFunctionOnNextCall(arguments);
                    try { v55["find"](..."find", a60, ...v54, ...v55); } catch (e) {}
                    return a58;
                }
                new Int8Array();
                for (let v72 = 0; v72 < 5; v72++) {
                }
                try { v11["find"](..."find", a16, ...v10, ...v11); } catch (e) {}
            }
            for (let v75 = 0; v75 < 5; v75++) {
                f12();
            }
        }
        return -1689481634;
    }
    137 = "symbol";
    [-1] = "symbol";
    129 = "symbol";
    #f;
    #c = 0.5062728748210361;
    static [0.5062728748210361];
    static d = "symbol";
    static 129;
    static get c() {
        const v78 = `
        `;
    }
    #a;
    d;
    #e = "symbol";
    static d;
    static #c;
}
const v79 = new C3();
const v80 = new C3(v79, v79, 0.5062728748210361);
new gc();
const v85 = new Float32Array(165);
v85[35] = v85;
const v86 = new C3();
const v87 = [-4529,-56036,4294967295,256,-256];
const v88 = /((?:ab){4,7}(?:a+){0,0})/gv;
const v89 = /a\bc/umsy;
for (let v90 = 0; v90 < 160; v90++) {
    function f91() {
        if (Float32Array) {
            function F92(a94, a95, a96, a97) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F92(v85, v85, Float32Array, v90);
            new F92(v89, v85, v88, v86);
            new F92(Float32Array, v87);
        } else {
            new f91();
        }
    }
    f91();
}
function* f103(a104, a105, a106) {
    v86[-2] = a106;
    v86 || a106;
    yield* "symbol";
    return a105;
}
f103(v80, v86, v80, 0.5062728748210361, C3);
[C3,"symbol",C3,[[-1689481634],-1689481634,"symbol"]];
const o113 = {
    "type": "symbol",
};
[] = "boolean";
function f116(a117, a118, a119, a120) {
    arguments[4] = arguments;
    return a119;
}
("-9223372036854775807").lastIndexOf(-7);
