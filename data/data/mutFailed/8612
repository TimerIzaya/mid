class C3 {
    h;
    1948 = -906.7402269214653;
    ["38584"] = 2.220446049250313e-16;
    1;
    static [C3] = -906.7402269214653;
    #h = "38584";
    #valueOf(a5, a6) {
        const v8 = Symbol.search;
        const t9 = "38584";
        t9[v8] = v8;
        function F9(a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a5;
            } catch(e14) {
            }
        }
        const v15 = new F9(a6, a5, "38584");
        const v16 = new F9(F9, -906.7402269214653, v15);
        new F9(-906.7402269214653, v16, F9);
        return v15;
    }
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
class C21 extends C3 {
    constructor(a23, a24, a25, a26) {
        super();
        new Uint8Array(512);
        new Float64Array(2824);
        new Int32Array(1);
    }
    static [-906.7402269214653];
}
const v36 = new C21(v19, "38584", v19, v20);
new C21(v20, "38584", C3, v18);
new C21(v36, -906.7402269214653, v19, v36);
new Int16Array(4096);
new Int32Array(10);
new BigUint64Array(1041);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o54 = {
    };
} catch(e55) {
}
class C56 {
    static p(a58) {
        const o65 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f60() {
                        return this;
                    }
                    const v61 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e64) {
                }
                return -128;
            },
        };
        return o65;
    }
    g;
}
try { new C56(); } catch (e) {}
const v67 = new C56();
class C69 extends Map {
}
new C69();
new Float32Array();
v67.g;
new C56();
new C56();
class C76 extends C56 {
    static n(a78, a79) {
        function F81(a83, a84, a85, a86) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C93 {
        }
        this[Symbol.matchAll] = a79;
        a78 += C69;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e98) {
        }
        return -128;
    }
    #c = C76;
    valueOf(a102, a103, a104) {
        super.f;
    }
    constructor(a107, a108, a109, a110) {
        super();
        function f111() {
            const t106 = [];
            t106[6] = 4294967295;
            new Int32Array();
            const o126 = {
                get b() {
                    return Int32Array;
                },
                "c": f111,
                toString(a119, a120, a121) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a123) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a125) {
                },
            };
        }
        for (let v127 = 0; v127 < 5; v127++) {
            f111();
        }
    }
    set f(a130) {
        for (const v131 of a130) {
            try {
            } catch(e132) {
            }
        }
        class C134 extends SharedArrayBuffer {
        }
        const o135 = {
        };
        try {
        } catch(e136) {
        }
        try {
            const o137 = {
            };
        } catch(e138) {
        }
        try {
            const o139 = {
            };
            o139.c = -128;
            o139.e = this;
        } catch(e140) {
        }
        try {
            const o141 = {
            };
        } catch(e142) {
        }
    }
}
const v143 = new C76();
gc(v143);
class C146 {
}
function f147(a148, a149, a150, a151) {
    const o156 = {
        p(a153, a154, a155) {
        },
    };
}
for (let v157 = 0; v157 < 25; v157++) {
}
const v159 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f160(a161, a162) {
    const o164 = {
        get d() {
        },
    };
}
f160();
const v166 = f160(v159);
try { v166(956206316, 956206316); } catch (e) {}
