function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try { ("undefined").lastIndexOf(0); } catch (e) {}
    function f5(a6, a7) {
        const o11 = {
            __proto__: a7,
            "byteOffset": a7,
            [a6]: a7,
            "c": a6,
            "e": a7,
            valueOf(a9, a10) {
                super[a9] = "undefined";
                return a10;
            },
        };
        return a6;
    }
    f5();
    try {
        this.a = 0;
        const v13 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
        v13[4] = v13;
        const v16 = new Uint32Array(8);
        v16[7];
        Uint8ClampedArray.BYTES_PER_ELEMENT;
        new Uint8ClampedArray(v16);
    } catch(e21) {
    }
}
const v22 = new F0();
new F0();
const v24 = new F0();
const v25 = [v24];
try { v25.at(v24); } catch (e) {}
const v27 = [-2.220446049250313e-16,0.4010936999061169];
try {
    v27.length = -2;
} catch(e29) {
}
[v25,v22,v25,F0,v25];
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v37 = 0; v37 < 5; v37++) {
    v37 <= v37;
    function f39() {
        const v41 = Array();
        let v42;
        try { v42 = v41.some(F31); } catch (e) {}
        v42 && v42;
        return ([]).includes();
    }
    !f39();
    %OptimizeFunctionOnNextCall(f39);
}
([v22,F0,v22])[2];
const v50 = [1.1822180693101283e+308,616.117380495235,0.6104928705827948,-4.0];
try { v50.sort(F0); } catch (e) {}
[-2.0,Infinity,-1000.0,-1000000000000.0];
[-1000000.0,-812118.6208527373,-549470.1021089487,-4.0,734.6278716910901,8.891346800842676,1.6336522021159558e+308];
class C55 extends Date {
}
new C55();
for (let v57 = 0; v57 < 5; v57++) {
    function f58(a59) {
    }
    try { ("function").normalize(); } catch (e) {}
    const o63 = {
        "type": "function",
    };
    new Infinity(f58, o63);
}
[-1];
const v66 = [16,-9007199254740990,-12,53161,-9007199254740990,64];
v66.g = v66;
[-9223372036854775808,-5,4294967297,16,7,-536870912];
const v69 = new Uint16Array(Uint16Array);
const v71 = new Uint8ClampedArray(v69);
const v72 = v71?.findLastIndex;
try { new v72(v25); } catch (e) {}
