let v0 = false;
class C1 {
    f = v0;
    static #p() {
        const v3 = [v0,this,v0,this];
        const v4 = [v3,v0,v3];
        v0 **= v0;
        (C1 & v3) in this;
        const v9 = Symbol.iterator;
        const o21 = {
            [v9]() {
                let v11 = 10;
                const o20 = {
                    next() {
                        v11--;
                        try {
                            Symbol("E");
                        } catch(e17) {
                        }
                        const v18 = v11 == 0;
                        const o19 = {
                            "done": v18,
                            "value": v11,
                        };
                        return o19;
                    },
                };
                return o20;
            },
        };
        [v3,v0,this,v4,v0];
        return this;
    }
    [v0] = v0;
    d = v0;
    static #h = v0;
    static n() {
        const v26 = typeof v0 === "undefined";
        this[Symbol.toPrimitive] = v0;
        [-5334,65333];
        [6,64];
        [5,-2147483649,-8,-57235,-41260,-65537,255,1108553519,1320895888];
        return v26;
    }
}
const v32 = new C1();
const v33 = new C1();
v33.d = v33;
const v34 = new C1();
v34.false;
v34.h = v34;
const v36 = /eGYp/gdimsy;
const v37 = /ta\bcNfoo(?<=bar)baz/gvimy;
v37.e = v37;
const v38 = /k/gvisy;
v38.sticky = v38;
const v39 = [v38,v0,v0];
v39.g = v39;
const v40 = [v37,v32,v32,v39,v0];
try { v40.toLocaleString(); } catch (e) {}
try { v40.splice(v0, v36); } catch (e) {}
const v43 = [v40];
v43[0] = v43;
2147483647n << 2147483647n;
1 - 1;
1 >>> 1;
Float32Array.d = Float32Array;
const v52 = new Float32Array(1);
801 === 801;
let v55 = 801 - 801;
v55--;
const v58 = new Int8Array(801);
v58[575] = v58;
6 >> 6;
const v62 = new Uint8ClampedArray(6);
v62[2] = v62;
Array.prototype = Array;
129 + 129;
function F66(a68) {
    if (!new.target) { throw 'must be called with new'; }
    function f69(a70, a71, a72) {
        function f74(a75) {
            return a70;
        }
        a71 > a68;
        f74 && a70;
        return a68;
    }
    Worker(f69);
}
let v82 = 1269;
v82++;
function f84() {
    return v52;
}
v58[v0] |= 6;
const v88 = 1 < 1;
v88 || v88;
let v90 = -767.9172626930058;
const v91 = 801 & C1;
let v92 = v91 ^ C1;
v92 ^ v92;
v92 / v92;
const v95 = v91 && 801;
v95 * v95;
let v97 = ++v90;
v97++;
!(2147483647n > !(v92--));
-894378.0273771395 >>> -894378.0273771395;
const v107 = -2.220446049250313e-16 * -2.220446049250313e-16;
v107 > v107;
8 - 8;
-2147483647 === -2147483647;
1000 + 1000;
const v118 = Int16Array?.constructor;
let v119;
try { v119 = new v118(v52); } catch (e) {}
v119.e = v119;
