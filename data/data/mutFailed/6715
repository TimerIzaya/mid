new BigUint64Array(2);
const o4 = {
};
const v6 = new Proxy(Uint8Array, o4);
v6.d = v6;
new Uint32Array(128);
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
}
const v15 = new F10(F10, F10, F10);
const o21 = {
    toString(a18, a19, a20) {
        Object.defineProperty(v15, a18, { writable: true, configurable: true, set: Array });
        return a18;
    },
};
("boolean").split("toString");
const v27 = Math.round();
async function f28(a29, a30, a31) {
    await v27;
    return a31;
}
f28(Math, "b", v27);
try { o21.toString(o21, Array); } catch (e) {}
const o62 = {
    set d(a38) {
        this.cos = a38;
        for (let v39 = 0; v39 < 25; v39++) {
        }
        function F40() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const o45 = {
                    "maxByteLength": Uint8Array,
                };
                new ArrayBuffer(10000, o45);
            } catch(e47) {
            }
        }
        new F40();
        try { this["cos"](); } catch (e) {}
        ("of").replaceAll("of");
        function f53() {
        }
        class C54 extends "of" {
        }
        const v55 = new C54();
        function f56() {
            const v59 = o21(4087);
            v59[351] = v55;
            for (const v60 of v59) {
            }
            return Array;
        }
        f56();
    },
};
o62.d = Int16Array;
new Int16Array(10);
function f64() {
    return BigUint64Array;
}
Array().unshift(2);
new Uint8Array();
function f69() {
}
new Uint8Array(904);
new Uint8Array(127);
class C78 {
    [null];
}
class C79 {
}
class C80 extends C79 {
    static set b(a82) {
        let v87 = 1000.0;
        class C88 {
            static {
                ++v87;
            }
        }
        class C98 {
            #a;
            constructor(a100, a101, a102) {
                a101.#a;
            }
        }
    }
}
new Uint32Array(255);
class C109 {
}
const v110 = new C109();
function f111() {
    return -1.4618325192014402e+308;
}
v110.toString = f111;
function F113(a115, a116, a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
    const v119 = a117.valueOf(a118, this, a117, this, a115);
    v119.__lookupSetter__(v119);
}
new F113("m", C109, v110);
const v123 = new Uint8ClampedArray();
v123.fill(Uint16Array, 127, 1073741824);
