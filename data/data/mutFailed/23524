let v0 = [2147483647,255];
const v1 = [16,0,-1745875800,-63629,-14,10,65537];
[268435440,-54345,268435456,9007199254740992,598659019,-9223372036854775808];
let v3 = -10902;
v3++;
257 * 257;
const v8 = [3,4096,536870887,536870889,584910079,-1342725944,4294967295];
const v9 = [-2147483649,65536,9,8,5,1,536870889,4294967297,-44510];
[-41224];
class C11 {
    10 = v3;
    e;
    static {
        v0 >>= this;
        const v15 = new Uint8Array(891);
        function F16() {
            if (!new.target) { throw 'must be called with new'; }
            for (let v18 = 0; v18 < 50; v18++) {
                v18 << v18;
                for (let v20 = 0; v20 < 25; v20++) {
                    try { ("p").strike(); } catch (e) {}
                    this["p" + v20] = v20;
                }
            }
        }
        const v24 = new F16();
        v24.d = v24;
        new F16();
        new Float64Array(3);
        129 + 129;
        new Float32Array(129);
        class C33 extends Float32Array {
            [v15];
            n(a35, a36, a37) {
                function F38(a40, a41, a42, a43) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.h = a43;
                    } catch(e44) {
                    }
                    try {
                        this.e = a41;
                    } catch(e45) {
                    }
                    try {
                        this.g = a42;
                    } catch(e46) {
                    }
                }
                new F38(a37, a37, 3, 129);
                new F38(129, a36, a36, 3);
                new F38(3, a36, 3, 891);
                return a37;
            }
        }
        C33.length = C33;
        new C33();
        const v51 = new C33();
        try { v51.includes(this); } catch (e) {}
        const v53 = new C33();
        v53.BYTES_PER_ELEMENT = v53;
        const v55 = new Float32Array(Float32Array);
        for (let v56 = 0; v56 < 25; v56++) {
            v56 << v56;
            function f58(a59, a60, a61, a62) {
                const v63 = a59[1];
                v63 / v63;
                for (let v66 = 0; v66 < 5; v66++) {
                }
                const v68 = arguments.__lookupGetter__;
                try { v68.constructor(); } catch (e) {}
            }
            for (let v70 = 0; v70 < 10; v70++) {
                v70 + v70;
                f58(v55);
            }
        }
        try { v9.findLastIndex(257, v8); } catch (e) {}
        this[8] = 257;
        super.d ^= 1;
        try {
            super.p();
        } catch(e75) {
        }
    }
}
C11[8] = C11;
new C11();
const v77 = new C11();
v77[10];
new C11();
for (let v80 = 0; v80 < 5; v80++) {
    const o84 = {
        "execution": "async",
        "type": "minor",
    };
    const v85 = gc(o84);
    try { v85.then("async", 257); } catch (e) {}
}
function F87(a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a89(v1, a91, a89); } catch (e) {}
    a91.length = a91;
    Int8Array.BYTES_PER_ELEMENT;
    1126838905 >>> 1126838905;
    Reflect.construct(Int8Array, [1126838905]);
}
new F87(F87, F87, F87);
