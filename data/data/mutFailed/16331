const v0 = [586142175,24028,814166548,25100,-4294967296,-16,2147483649];
const v1 = [-49359724,-1628775770,-810655782];
[v1,[-1882444642]];
const v4 = [v0,v0];
const v5 = v4?.values;
try { new v5(); } catch (e) {}
const v7 = v4[1];
try { v7.flatMap(v4); } catch (e) {}
const v9 = v7[0];
v9 >> v9;
const v11 = v7[2];
const v12 = [v1,v1,v4,v4,v4];
v12[4][1];
-1.0 << -1.0;
const v19 = 1000.0 + 1000.0;
function f20() {
    return v12;
}
-512;
const v24 = -512;
v24 >> v24;
~v24;
const v27 = 512 | 512;
let v29 = -4294967297 | -4294967297;
const v30 = v29--;
const v32 = 6 % 6;
v32 - v32;
const v34 = 6 + 6;
v34 - v34;
function F36(a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    -a39;
    a40 + a40;
    const v43 = this?.constructor;
    try { new v43(v19, f20, v19); } catch (e) {}
    let v45 = a38 + a38;
    v45--;
    a38[4294967295] = a38;
}
F36.d = F36;
const v47 = F36.prototype;
const v48 = v47?.constructor;
try { new v48(-1000000000.0, v7, v30); } catch (e) {}
const v50 = v47?.constructor;
v50.prototype = v50;
try { new v50(-4294967297, -4294967297, v11); } catch (e) {}
let v52;
try { v52 = v47.propertyIsEnumerable(v47); } catch (e) {}
const v53 = v47.constructor;
try { new v53(v27, v50, v27); } catch (e) {}
v53.arguments = v53;
let v55;
try { v55 = new v53(v12, v4, v53); } catch (e) {}
v55.length = v55;
const v56 = v55?.constructor;
v56.length = v56;
const v58 = v56.name?.includes;
try { new v58(v34); } catch (e) {}
let v60;
try { v60 = new v56(-4294967297, v52, v47); } catch (e) {}
v60.b = v60;
v60.length = v60;
const v61 = new v53(6);
const v62 = v61?.constructor;
try { v62.call(v29); } catch (e) {}
try { new v62(v52, 512, 10); } catch (e) {}
