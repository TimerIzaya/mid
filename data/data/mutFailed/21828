const v3 = [];
const o6 = {
    set b(a5) {
    },
    "arguments": v3,
};
let v10;
try { v10 = ("2R4dt").strike(); } catch (e) {}
try { ("1").toString(); } catch (e) {}
class C14 extends Int8Array {
}
const o15 = {
    ...o6,
};
class C16 {
    ["1"] = "2R4dt";
    e = 1000.0;
    [1000.0] = -2.3890993596755727;
    b = "bigint";
    [-31.076548388291712];
    set f(a18) {
        typeof 1000.0 === "boolean";
        const o22 = {
        };
        new Proxy("boolean", o22);
    }
}
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    class C29 {
        static {
            if (this) {
            }
        }
    }
}
new v10();
new Int32Array(5);
const v37 = new Int16Array(5);
new Int16Array(129);
class C44 {
    toString() {
        const v46 = [0.42610628000409834];
        [0.1916863927637561,5.0,-1000000.0,-1000000000000.0,-2.2250738585072014e-308,786167.582370504,221250.34918176057];
        const v49 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v51 = [601759695];
        function f52(a53, a54, a55, a56) {
            function f57() {
                let v60 = Float64Array;
                v60 = a54;
                v49.length;
                try {
                    v46.forEach();
                } catch(e63) {
                }
                Uint8ClampedArray.toPrimitive;
                const o70 = {
                    toString(a67, a68) {
                        return a56 && v60;
                    },
                };
                const o71 = {
                };
                new Proxy(f52, o71);
                o70[9] = v37;
                const o81 = {
                    [-4294967297n](a75, a76, a77, a78) {
                    },
                    ...v51,
                    "type": "Vre",
                    ..."Vre",
                    4: "Vre",
                    [1000.0]: a56,
                    set b(a80) {
                    },
                    5: -4294967295,
                };
                return f52;
            }
            f57();
            %OptimizeFunctionOnNextCall(f57);
            return -4294967297n;
        }
        [2.0,121972.82426161831,1.0,1000.0,1.586101720587471e+308,682084.812556563];
        return undefined;
    }
    #f;
    static [undefined] = undefined;
    536870887;
    static #d = Int16Array;
}
let v84 = new C44();
new C44();
const v86 = new C44();
class C87 {
    static #c;
    set c(a89) {
        try {
            v84.__proto__ = v86;
        } catch(e90) {
        }
    }
    c = C44;
    static #g;
    #b = undefined;
}
new C87();
new C87();
new C87();
new Int16Array(1659);
new Uint8Array(3);
new BigInt64Array(428);
try { C44.log10(); } catch (e) {}
try { v86.toString(Int16Array, BigInt64Array); } catch (e) {}
for (let i109 = 0; i109 < 7; i109++) {
    new Uint8Array(i109);
}
const v117 = [];
class C118 {
    g = C118;
    #e = v117;
}
const v119 = new C118();
const v120 = new C118();
const v121 = [v119];
function f125(a126, a127, a128, a129) {
    return a128;
}
for (let v130 = 0; v130 < 625; v130++) {
    f125(Uint8Array, 2, v130);
    try {
        v84 &= -5.160144283511562e+307;
    } catch(e132) {
    }
}
function F133(a135, a136) {
    if (!new.target) { throw 'must be called with new'; }
    const v137 = this.constructor;
    try { new v137(v121, v117); } catch (e) {}
    a136[1073741823] = a136;
}
const v139 = new F133(v119, v120);
const o175 = {
    o(a141) {
        try { this.o(v139, v120, this, this); } catch (e) {}
        const o144 = {
            "maxByteLength": 3145,
        };
        const v145 = [];
        const o146 = {
            __proto__: v145,
        };
        const v147 = new C118();
        return v147;
    },
    m(a149) {
        a149.f = a149;
        a149.c = a149;
        const o150 = {
        };
        o150.h = o150;
        try {
        } catch(e151) {
            const v155 = new Uint8ClampedArray(512);
            new Uint8ClampedArray(798, ...v155, o150, ...v3, ...v155);
        }
        try {
            const o157 = {
            };
            delete arguments?.length;
        } catch(e160) {
        }
        for (let v162 = 0; v162 < 5; v162++) {
        }
        class C163 {
            o(a165, a166, a167, a168) {
            }
        }
        const v171 = new Int8Array(3938);
        c = 0;
        super.f -= 3;
        try {
            super.copyWithin(0, 0, 0, -9007199254740991);
        } catch(e173) {
        }
        let v174 = 3;
        for (let i = 0; i < 5; i++) {
            [...v174] = v171;
        }
    },
};
o175["o"]();
