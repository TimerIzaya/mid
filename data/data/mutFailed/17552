const v1 = new Date();
function f5() {
    return -1000000000.0;
}
const v6 = [-5.0,Infinity,v1,Infinity,f5];
new WeakMap();
try { (-5.0).clear(-5.0, Map); } catch (e) {}
function f12(a13, a14, a15) {
    return a14;
}
const v18 = [10000n];
const o19 = {
    "arguments": v18,
    "type": "function",
};
Worker(f12, o19);
const v21 = [v6,f5,f5,v1,Date];
const v22 = [Infinity,Date,-5.0,-1000000000.0];
function f23(a24, a25) {
    const o39 = {
        "b": a25,
        9: -1000000000.0,
        get d() {
            return this;
        },
        "type": "function",
        __proto__: v6,
        toString(a28, a29) {
            class C30 {
            }
            -5.0 >>> -5.0;
            function F32(a34) {
                if (!new.target) { throw 'must be called with new'; }
                const v35 = this.constructor;
                v35.prototype;
                try { new v35(); } catch (e) {}
            }
            try {
                v6.c = a28;
            } catch(e38) {
            }
            return a24;
        },
        /*
        __proto__: a25,
        */
        8: v6,
        "f": v1,
        "d": a25,
    };
    return o39;
}
f23(Infinity, v22);
f23(-5.0, v21);
f23(-5.0, v6);
const v47 = ("toDateString")[9].toUpperCase().match();
for (let v48 = 0; v48 < 25; v48++) {
    const v49 = [601759695];
    gc();
    const v52 = [2147483648,-9223372036854775808,1073741823,-5827,17147,6507,0,255,61798];
    const v53 = [-10,2,536870888,-6,-10,-16,3090,-1132274585,-4612];
    class C54 {
        valueOf(a56, a57) {
            v49.length -= a56;
            return v53 % v52;
        }
        1 = v49;
        static #m(a60, a61) {
            return 5n;
        }
        2916208505 = v52;
    }
    const v65 = new C54();
    function F66(a68, a69, a70, a71) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = C54;
        } catch(e72) {
        }
    }
    new F66(v49, v52, v65, v52);
    const v74 = [1073741824,1073741823,1376142744,1073741825];
    function f75(a76, a77, a78, a79) {
        let [] = v74;
        ("find").normalize().link(v47);
        const v83 = ("find").toLocaleLowerCase();
        v83 == v83;
        try { v74["find"]("find", a79, v49); } catch (e) {}
    }
    for (let v86 = 0; v86 < 10; v86++) {
        class C88 {
            static 9 = 9.187362692894364;
        }
        for (const v89 in C88) {
        }
    }
}
