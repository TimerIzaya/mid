function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1074567861;
    } catch(e3) {
    }
}
new F0();
new F0();
const v6 = new F0();
const v7 = [-4.0,-7.312451314823189,-443.071819567318,-Infinity];
const v8 = [-968.1574694813839,-612.5195477685261,-1.0,1000000000000.0,5.0,34.69320111288994];
[5.0,1.001169893955753,-3.0,NaN,1000000.0,-4.336000730215462,-0.0,4.1424748922722525];
const v12 = new Int16Array(210);
v6[2217] = v6;
Math.sqrt(-4294967296);
~-524810.5696068017;
const v24 = ~-524810.5696068017;
Math.trunc(-4294967296);
~-524810.5696068017;
+-524810.5696068017;
-524810.5696068017 - v24;
const v29 = new BigInt64Array(2649);
new Uint8Array(512);
try {
    new F0();
} catch(e34) {
}
new WeakSet();
const v37 = /Cs[\cz]*/vi;
let v38;
try { v38 = ("z6wn").slice(2649); } catch (e) {}
v7[Uint8Array] = v8;
v29[-5] = v12;
try {
    v12.valueOf = v38;
} catch(e39) {
}
for (let v41 = 0; v41 < 25; v41++) {
    function f43(a44, a45, a46, a47) {
        for (let v49 = 0; v49 < 5; v49++) {
            v49 < 2;
            try {
                arguments.g = v49;
            } catch(e52) {
            }
            const v53 = v49++;
            v53 < v53;
        }
        Int8Array.BYTES_PER_ELEMENT = Int8Array;
        const v56 = new Int8Array();
        function f57(a58, a59) {
        }
        Object.defineProperty(v56.buffer, "constructor", { writable: true, configurable: true, value: Date });
        try { Math.expm1(522675525n); } catch (e) {}
        46598 / v37;
    }
    for (let v65 = 0; v65 < 5; v65++) {
        f43();
    }
}
