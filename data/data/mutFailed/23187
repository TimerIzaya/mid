const v1 = [65536,2147483649];
[-63127,9,255,-4294967297,1000,1024,13,-9223372036854775807,55756];
const v3 = [12,4];
const v4 = [-165479.2381612704,0.46671932276246775,NaN,4.845099402761568e+307,2.0,-189.05176846186373];
const v5 = [-382853.1602297303,-1000000.0];
[Infinity,2.2250738585072014e-308,-1.0,1000000.0,2.0,0.0,-4.475266135491813e+307,-2.220446049250313e-16,-1000000000000.0];
function f7() {
    return v3;
}
const v9 = [[v3,null,v4],v5,v3];
try { v9.lastIndexOf(v9); } catch (e) {}
const v11 = [v9,v9,v9,v4];
try { v11.findLastIndex(v9); } catch (e) {}
-7631 >> -7631;
const v17 = [1000000000.0,-1000.0];
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this?.__lookupGetter__;
    try { new v22(129); } catch (e) {}
    const v24 = v5.constructor;
    try { v24.isArray(v17); } catch (e) {}
    try { new this(); } catch (e) {}
    a20--;
    a20 & a20;
}
let v29;
try { v29 = new F18(v4, v1); } catch (e) {}
new v29();
const v31 = new F18();
F18.length = v31;
