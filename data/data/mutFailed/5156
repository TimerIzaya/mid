const v2 = new Float32Array(16);
const v3 = [];
function f4(a5, a6) {
    a5.name;
    a6.name = a6;
    const v8 = a5 <= v3;
    v8 || v8;
    return f4;
}
try { Promise.allSettled(16); } catch (e) {}
new Promise(f4);
const v15 = new BigUint64Array(13);
v15[7] = v15;
73 << 73;
const v19 = new Float32Array(73);
function f20(a21, a22, a23, a24) {
    a22 & a22;
    a24 % a24;
    const o37 = {
        get a() {
            const v28 = this.__proto__;
            function f29(a30, a31, a32) {
                const o33 = {
                    ...v19,
                    [this]: a21,
                    "e": Float32Array,
                };
                return o33;
            }
            const v34 = f29(Float32Array, 73, v28);
            f29(f29, a22, 16);
            f29(v34, a22, BigUint64Array);
            return v15;
        },
    };
    return o37;
}
const v38 = f20(13, 73, v19, 16);
const v39 = f20(16, 16, 73, f20);
v39.c = v39;
class C40 {
}
C40.d = C40;
Promise.reject(Promise);
new Int32Array(2);
let v46 = f20(13, 16, 13, f20);
function f47(a48, a49, a50) {
    a48 ^ a48;
    a49.c = a49;
    const o72 = {
        "d": a48,
        "h": 73,
        "f": f20,
        [73]: 13,
        "h": v3,
        "arguments": v3,
        ...73,
        "b": a49,
        m(a53) {
            const v56 = new Int8Array(3938);
            let v57 = 3;
            let v58 = 0;
            [...v57] = v56;
            -(v58++);
        },
        "c": f20,
        "maxByteLength": 73,
        "a": a49,
        valueOf(a62, a63) {
        },
        "g": 2,
        "b": f20,
        p(a65, a66, a67, a68) {
            v46 += a68;
            const o71 = {
                __proto__: this,
                "g": v2,
                [v19]: a67,
                get g() {
                    return 2;
                },
                "e": v3,
                get h() {
                    return v19;
                },
                [73]: Float32Array,
            };
            return a50;
        },
    };
    return o72;
}
f47(73, v38, v46);
f47(16, v39, v46);
f47(16, v38, v38);
const v77 = new Date();
const v78 = [];
class C79 {
    constructor(a81, a82, a83) {
        function f84(a85, a86, a87) {
            v78.copyWithin();
            try {
                f84(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e93) {
            }
            const v94 = this >> -268435456;
            v94 >> this;
            return -v94;
        }
        f84(this, this, a81);
    }
}
class C98 extends C79 {
}
~v77["getUTCMilliseconds"]();
gc();
class C106 {
}
C106.name = C106;
async function f107(a108, a109, a110, a111) {
    (await C106).call(8, Uint16Array);
    return a109;
}
