let v2 = -4294967297;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    a5 - a5;
    try {
        const o11 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o11);
        this.e = a6;
    } catch(e13) {
    }
}
const v14 = new F3(1954183374, 1954183374);
const v15 = new F3(-6, 1954183374);
new F3(1954183374, 1954183374);
try { Uint32Array.from(2465); } catch (e) {}
new Uint32Array(2465);
function f23(a24) {
    const o26 = {
        "maxByteLength": 1293466293,
    };
    return F3;
}
Uint8Array.valueOf = f23;
const v27 = new Uint8Array(3);
let v28;
try { v28 = v27.subarray(Uint8Array, Uint8Array); } catch (e) {}
const v31 = new Int16Array(10);
-17041 & -17041;
const v36 = [-3.0,8.688111356865875,-2.220446049250313e-16,0.3960904884964801,0.5863601312966836,1.0,7.530456257794057e+307,524.1863337358618];
v36[8] = v14;
const v37 = [1.6484091400965863e+308,-689078.0330961384,-1.7976931348623157e+308,-160341.63249327452,127.17765342927578,1000.0,2.0,614.081171374098,NaN,3.82514727368617];
let v38;
try { v38 = v37.fill(-6); } catch (e) {}
v38[Symbol.match] = f23;
const v41 = [-Infinity,0.32846642868810805,522897.9759496555,-Infinity,-1.7976931348623157e+308,Infinity,-91739.17504563625,-5.712078980390993,-4.0,-362.4687316307243];
function f42(a43, a44, a45) {
    function f46(a47, a48) {
        try {
            v15.fuck(false, 12, a47);
        } catch(e52) {
        }
        return v28;
    }
    a44[Symbol.match] = f46;
    a43[8] = a43;
    a44 & a44;
    a43[2];
    a44 << a44;
    let v58;
    try { v58 = a43.lastIndexOf(v41); } catch (e) {}
    v58 !== v58;
    v58 / v58;
    let v61;
    try { v61 = a45.toString(); } catch (e) {}
    try { v61.concat(v61); } catch (e) {}
    const o63 = {
        [-4096]: -8717,
        "d": a44,
        __proto__: v41,
        "a": a43,
        "f": a43,
        "h": a45,
        "g": a45,
        "e": a44,
        1073741823: a44,
        "b": a43,
    };
    o63.toString = f42;
    return o63;
}
f42.toString = f23;
const v64 = f42(v37, -8717, f42);
v64[1073741823];
let v66 = 0;
do {
    try {
        v31.length = 3571;
    } catch(e68) {
    }
    v66++;
} while (v66 < 8)
v64[9];
const v73 = f42(v37, -4096, -17041);
v73[1073741823] = v73;
f42(v36, -8717, -4096);
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    this.valueOf = f23;
    const v77 = this?.propertyIsEnumerable;
    try {
        f42(3, v38, Uint32Array);
    } catch(e79) {
    }
    v2 = 2465;
    try { new v77(v64); } catch (e) {}
    let v81;
    try { v81 = this.valueOf(); } catch (e) {}
    const v82 = v81?.__defineGetter__;
    try { new v82(F3, v82); } catch (e) {}
    try { new v82(-4096, v81); } catch (e) {}
    let v86 = 50765 + 50765;
    v86--;
}
F75.caller;
const v89 = new F75();
v89[Symbol.toPrimitive] = f42;
v89.e = v89;
const t110 = "gi0";
t110[1] = "gi0";
try { ("-39993").replaceAll(v37, "gi0"); } catch (e) {}
try { ("-39993").concat(-4096); } catch (e) {}
const o103 = {
    [v89](a98, a99, a100, a101) {
        "D2z" < a98;
    },
};
o103.c = o103;
o103.e = o103;
try { ("test").strike(); } catch (e) {}
let v106;
try { v106 = ("test").fontsize(v64); } catch (e) {}
try { v106.trimLeft(); } catch (e) {}
try { v106.charAt("-39993"); } catch (e) {}
