const v2 = new Int16Array(3);
3 == 268435440n;
const v5 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
v5[1] = v5;
function f8(a9, a10, a11) {
    const o13 = {
        [a11]: a10,
        "g": 65536n,
        get a() {
            return a9;
        },
        "a": a11,
    };
    return f8;
}
const v14 = f8(4096n, 4096n);
const v17 = new Float32Array(512);
const v20 = new Int32Array(8);
class C21 extends Float32Array {
    2;
    static #n(a23, a24) {
        try {
            new Int16Array(v2);
        } catch(e26) {
        }
        return v17;
    }
    static [v17];
    static {
        try {
            this.#n(this, v17, v20, v20);
        } catch(e29) {
        }
        const o32 = {
            "type": "function",
        };
        new Worker(v14, o32);
        [] = v17;
    }
}
new C21();
new C21();
new C21();
const v37 = [-6.672391061426152e+307];
v37[0] = v37;
new Int16Array(64);
function f40() {
}
for (let v43 = 0; v43 < 5; v43++) {
    function f44() {
        const v46 = new Float64Array();
        v46[2];
        return v43;
    }
    f44();
    %OptimizeFunctionOnNextCall(f44);
}
const v52 = new Int32Array(2890);
new Int8Array(1073741823);
gc();
v52.lastIndexOf();
