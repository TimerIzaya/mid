function f0() {
    const o10 = {
        "g": Infinity,
        m(a5) {
            let v6;
            try { v6 = ("boolean").substring(a5, a5); } catch (e) {}
            const v7 = `isArray${"toTimeString"}boolean${Infinity}symbol${a5}m`;
            if (v7 > v7) {
                super[v6];
            } else {
                v7["toTimeString"] = "toTimeString";
            }
            return v7;
        },
        "f": "boolean",
        "a": Infinity,
    };
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
function F14(a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a16;
    } catch(e17) {
    }
    try {
        this.b = a16;
    } catch(e18) {
    }
}
new F14(v12);
new F14(v12);
new F14(v13);
new WeakMap();
new Uint16Array(9);
new BigInt64Array(35);
new BigInt64Array(255);
class C34 {
    constructor(a36, a37) {
        let v38 = 10;
        for (let i = 0; i < 5; i++) {
            const v39 = v38--;
            class C40 extends BigInt64Array {
                static #e = v39;
                1938 = this;
            }
            new C40();
            new C40();
            new C40();
            function f44(a45, a46, a47, a48) {
                const v50 = new Int16Array();
                async function f52(a53, a54, a55) {
                    a54 = a55;
                    const v56 = a45;
                    const v58 = Symbol.iterator;
                    const o67 = {
                        [v58]() {
                            let v60 = 10;
                            const o66 = {
                                next() {
                                    v60--;
                                    const v64 = v60 == 0;
                                    const o65 = {
                                        "done": v64,
                                        "value": v60,
                                    };
                                    return o65;
                                },
                            };
                            return o66;
                        },
                    };
                    for (const v68 of a36) {
                        -740089575 ^ v38;
                    }
                    await v50[1];
                }
                const o73 = {
                };
                new Proxy(Uint8Array, o73);
                try { v50.findLastIndex(f52, a48); } catch (e) {}
                f52().finally(Uint8Array);
                return v39;
            }
            for (let v79 = 0; v79 < 5; v79++) {
                f44();
            }
            %OptimizeFunctionOnNextCall(f44);
        }
    }
}
new C34(C34, C34);
