const v2 = new Uint32Array(11);
new Int8Array(51);
function f8(a9) {
    return v2;
    const o11 = {
        ..."raw",
    };
    function f12() {
        return f12;
    }
    function f14() {
        Object.defineProperty(arguments, 13, { enumerable: true, set: f12 });
        return o11;
    }
    return "raw";
}
BigInt64Array.toString = f8;
const v16 = new BigInt64Array(255);
/[(?:ab){4,7}]/gudms;
/aU/vdmy;
const v19 = /(?:a?)+/udm;
v19.toString = f8;
const v21 = [357471.45846563345,0.21582392568769793,3.0,-1.1348218702588052e+308,0.18478957976241217,-2.2250738585072014e-308,349.8983619725575,2.0871072083459357e+307,0.5997765877443066,-1.0];
try { v21.map(v16); } catch (e) {}
[1000000000.0,5.0,-1.5907402499732012e+308,3.0,NaN];
const v24 = [-2.0];
try { v24.reduce(Uint32Array); } catch (e) {}
function f26() {
    return f26;
}
const v27 = [601759695];
const v28 = [1073741824,1073741823,1376142744,1073741825];
function f29(a30, a31, a32, a33) {
    function f34(a35, a36) {
        return Int32Array;
        return Int8Array;
    }
    Object.defineProperty(a30, Symbol.toPrimitive, { configurable: true, value: f34 });
    a32.valueOf = Symbol;
    arguments.length;
    function f42() {
        return a30;
    }
    const v43 = f26();
    const v45 = new Int8Array();
    const v46 = v45.buffer;
    v46.constructor = v43;
    try { v46.slice(a30, BigInt64Array); } catch (e) {}
    const v48 = v46.slice();
    try { v48.transfer(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f42);
    let v51;
    try { v51 = v28["find"](..."find", a33, ...v27); } catch (e) {}
    !(v51 <= a32);
    return arguments;
}
try { f29(v19, v19, Int8Array, f29); } catch (e) {}
for (let v55 = 0; v55 < 10; v55++) {
    v55 >>> v55;
    f29();
}
%OptimizeFunctionOnNextCall(f29);
f29();
