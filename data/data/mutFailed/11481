class C3 {
    a;
    m(a5) {
        Math.clz32(-13);
        ~-55311;
        return Math.exp(-55311);
    }
    #b = -13;
    static [-1.4275664057073798e+308] = -1.4275664057073798e+308;
    static h = -1.4275664057073798e+308;
    static 4;
}
const v11 = new C3();
const v12 = new C3();
const v13 = new C3();
const v14 = v13.a;
true && true;
function f18() {
    return true;
}
function f19() {
    return v13;
}
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.__defineSetter__;
    try { new v26(this, this); } catch (e) {}
    !true;
    const v29 = a24?.__defineSetter__;
    try { new v29(v12, this); } catch (e) {}
    try {
        this.h = a25;
    } catch(e31) {
    }
}
new F20(v11, true, v12, v12);
const v33 = new F20(v13, f18, v12, v13);
new F20(v11, v33, v12, v13);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(); } catch (e) {}
}
new f19();
const v40 = new v14();
const v41 = new F35();
C3.b = v41;
class C43 {
    static get b() {
    }
    static 182 = F35;
    static g;
    static #b = v40;
}
C43[182] = C43;
const v45 = new C43();
v45?.constructor;
let v47;
try { v47 = new f19(); } catch (e) {}
const v48 = new C43();
const v49 = new C43();
const v50 = v40?.constructor;
let v51;
try { v51 = new v50(); } catch (e) {}
try {
    v41.b = v49;
} catch(e52) {
}
const v53 = 6.921221993207333e+307 != C43;
try { Uint8Array.bind(v13); } catch (e) {}
new Uint8Array(v47);
function f57(a58, a59, a60, a61) {
    v51++;
    const v63 = a60++;
    v63 - v63;
    const v65 = v63 * v63;
    (v65 ** v65) % a60;
    const o68 = {
        ...v50,
    };
    o68[2] = o68;
    const v69 = v48[2];
    v69 >>> v69;
}
f57.d = f57;
for (let v71 = 0; v71 < 500; v71++) {
}
v53 ? 6.921221993207333e+307 : C43;
let v73;
try { v73 = C43(); } catch (e) {}
try { v73(); } catch (e) {}
