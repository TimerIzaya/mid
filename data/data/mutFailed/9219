const v0 = [-1000.0,-2.0,2.220446049250313e-16,-1.7976931348623157e+308,251.09816983726523];
let v2 = new Uint8ClampedArray();
for (let v3 = 0; v3 < 5; v3++) {
    v3 + v3;
    const v5 = ~v3;
    v5 - v5;
    v2[v3] = v0;
}
const v7 = [5.123755118405747,3.0];
function f9(a10) {
    return 1000.0;
}
function f11() {
    return f11;
}
const v12 = Uint8ClampedArray !== v7;
v7[170] = v2;
({"h":f11,"length":v2,} = v0);
const o15 = {
    "maxByteLength": 1073741824,
};
const v17 = new ArrayBuffer(354, o15);
new Uint8ClampedArray(v17);
f11.length;
const v21 = [-641194.611577804,29336.36309738038,2.0,2.2250738585072014e-308,-5.898513998260241e+307,2.0,Infinity,Infinity];
v21[5];
class C23 {
    e;
    set h(a25) {
        function f26() {
            return v7;
        }
    }
    static #o(a28, a29, a30, a31) {
        return v12;
    }
    [v0];
    static #e;
    h;
    static g = v7;
    15;
    f = v21;
}
new C23();
const v36 = new C23();
v36.h = v36;
new C23();
function f42() {
    new Int32Array();
    const o48 = {
        valueOf() {
            return true;
        },
    };
    async function f49(a50, a51, a52) {
        return a51;
    }
    function F53() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C56 extends F53 {
    }
    const o57 = {
        2: C56,
    };
    return f49;
}
f42.prototype = f42;
try {
    const o58 = {
    };
} catch(e59) {
}
268435440 & 268435440;
try { Math.expm1(6); } catch (e) {}
