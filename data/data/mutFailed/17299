function f2() {
    +257;
    2655 >> 2655;
    Uint8ClampedArray & 257;
    return 2655;
}
Uint8ClampedArray[Symbol.toPrimitive] = f2;
new Uint8ClampedArray(2655);
for (let v12 = 0; v12 < 25; v12++) {
}
function f13() {
}
function F14() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    const v19 = new Date();
    try { v19.setFullYear(f13, v19, F14); } catch (e) {}
    19793 + 19793;
    const o23 = {
    };
    o23.e = 19793;
    const v25 = Array(19793);
    const v26 = [-65535,452354247,-2,78479092,-2147483648,1073741823,5,6528,-1024,-261130286];
    const o28 = {
    };
    const v30 = new Proxy(v26, o28);
    new Int32Array(v30);
    for (const v32 of v25) {
    }
    for (let v33 = 0; v33 < 50; v33++) {
    }
}
new Uint32Array(64);
let v37 = 4;
const v39 = new Int8Array(v37);
v39.toString = f2;
class C40 extends Int8Array {
    static [Uint8ClampedArray] = 2655;
    [v39] = 64;
    static #n(a42, a43) {
        super.byteLength;
        return v37;
    }
    static d = Int8Array;
    d;
    static [Uint32Array];
    static #p(a46, a47) {
    }
    c = 64;
    f;
}
new C40();
new C40();
new C40();
const v54 = new Float64Array(255);
Object.defineProperty(v54, "toString", { enumerable: true, value: f2 });
Date.UTC(v54.join(v54));
for (let v57 = 0; v57 < 32; v57++) {
    break;
}
function f61() {
    const v63 = Array();
    v63[3] = 255;
    v63[3] = 65535;
    return v63.pop();
}
f61();
%OptimizeFunctionOnNextCall(f61);
v37--;
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 268435440;
}
class C71 {
    constructor(a73, a74) {
        Object.defineProperty(this, "constructor", { writable: true, configurable: true, enumerable: true, value: Date });
        const v75 = this.constructor;
        try { new v75(-15n); } catch (e) {}
    }
}
