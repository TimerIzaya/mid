const v1 = new Map();
[Map,Map];
const v3 = /(?!(a))\1*/vmy;
v3.b = v3;
const v5 = v3.compile(/k/gdsy);
const v6 = v5?.constructor;
try { new v6(v1, v3); } catch (e) {}
class C8 {
    o(a10, a11) {
    }
    static {
        this.length = this;
        class C13 {
        }
        try { C13.apply(v5, C8); } catch (e) {}
        const v15 = new C13();
        const v16 = v15?.constructor;
        try { new v16(); } catch (e) {}
    }
}
try { new C8(); } catch (e) {}
[Map,Map,Map];
[v1,Map,Map,v1,Map];
let v28 = 1073741823;
v28++;
const o31 = {
};
2.220446049250313e-16 < 2.220446049250313e-16;
-82.86062314585524 !== -82.86062314585524;
try {
const t0 = 1000000000.0;
t0(2.220446049250313e-16, Uint8ClampedArray, ...1000000000.0, -82.86062314585524);
} catch (e) {}
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v41 = 0; v41 < 50; v41++) {
        const v42 = v41 << v41;
        v42 << v42;
        for (let v44 = 0; v44 < 25; v44++) {
            const v46 = "p" + v44;
            try { v46.codePointAt(this); } catch (e) {}
            this[v46] = v44;
        }
    }
}
const v48 = new F39();
v48.p6;
function f50(a51, a52, a53) {
    const o54 = {
    };
    return o54;
}
new F39();
function f56(a57, a58, a59, a60) {
    const o61 = {
    };
    return o61;
}
