let v0 = 0;
const v2 = new BigUint64Array(v0);
let v4 = 3751 >> 3751;
v4++;
try { new Float64Array(v4, v4, v4); } catch (e) {}
const v8 = new Float64Array(3751);
if (BigInt64Array) {
    const v11 = v8[8];
    v11 >>> v11;
} else {
    v0 = 1660;
}
const v13 = new BigInt64Array(1660);
function f14(a15, a16, a17) {
    a15--;
    a16 == a16;
    const o26 = {
        [v8]: v2,
        p(a21, a22) {
            const v23 = a21?.b;
            try {
                super.m(v13, BigInt64Array, v23, v23, Float64Array);
            } catch(e25) {
            }
            return a22;
        },
        [a15]: a15,
        112: a15,
        __proto__: v2,
        256: a17,
        "a": a17,
        "e": BigUint64Array,
        /*
        __proto__: v13,
        */
        "c": a15,
        "a": BigUint64Array,
    };
    o26[256] = o26;
    const v27 = o26?.a;
    let v28;
    try { v28 = new v27(v0, a16, a16); } catch (e) {}
    try { v28.findLastIndex(1660); } catch (e) {}
    return o26;
}
f14(1660, v0, v0);
f14(3751, v0, v0);
const v33 = f14(3751, 1660, v0)[256];
v33 >>> v33;
try { ("4294967297").sup(); } catch (e) {}
let v38;
try { v38 = ("4294967297").anchor(Float64Array); } catch (e) {}
try { v38.strike(); } catch (e) {}
AggregateError("4294967297");
