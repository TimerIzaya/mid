const v1 = new Set();
const v2 = [5.0,-1000000.0,4.0];
const v3 = [-473.46234532332176,-1.480808564621364e+308,5.453193212416011,0.9106989764876714];
const v4 = [-6.779399361199043e+307,0.7081748685102554,3.0];
let [v7,,v8,v9] = v4;
const v10 = -1255642966;
let v12;
try { v12 = v9["setUTCMilliseconds"](v9, v7, v7, -1255642966); } catch (e) {}
const v13 = v1;
class C15 {
    static toString(a17) {
    }
    static c = v2;
    static #g = "setUTCMilliseconds";
    valueOf(a19, a20) {
        const v21 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
        function F22(a24, a25, a26) {
            if (!new.target) { throw 'must be called with new'; }
            const v27 = this.constructor;
            try { new v27(a25, a24, a26); } catch (e) {}
            a26 + a26;
            try {
                this.b = v21;
            } catch(e30) {
            }
        }
        class C31 extends F22 {
            512 = v4;
        }
        C31.prototype = C31;
        let v32;
        try { v32 = a19.splice(a20); } catch (e) {}
        try {
            super.valueOf(v3, 47825179, v32);
        } catch(e34) {
        }
        return v1;
    }
    9 = v1;
    [-1] = v12;
    static h;
    42;
}
new C15();
const v36 = new C15();
new C15();
const v38 = [v36];
const v39 = [47825179];
[v36,v39,v38,47825179,v39];
[Int8Array];
const o47 = {
    ...v9,
    set b(a46) {
    },
};
o47.b = o47;
const v50 = new Uint8ClampedArray(995);
new Int8Array(995);
const v55 = [9,127,9];
const v56 = v7.copyWithin;
v7.apply(v56, v50, v55);
try { v50.some(v56); } catch (e) {}
