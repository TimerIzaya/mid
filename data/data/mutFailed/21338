function f3() {
    return f3;
}
f3.length = f3;
6 << 6;
(773569054).length;
let v8;
try { v8 = new Int16Array(Int16Array, 773569054, f3); } catch (e) {}
try { v8.filter(v8); } catch (e) {}
const v10 = new Int16Array(6);
try { v10.findLast(6); } catch (e) {}
64 % 64;
BigUint64Array.prototype = BigUint64Array;
new BigUint64Array(64);
function F17() {
    if (!new.target) { throw 'must be called with new'; }
    function F19() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v21 = 0; v21 < 25; v21++) {
            const v22 = [601759695];
            const v23 = [1073741824,1073741823,1376142744,1073741825];
            function f24(a25, a26, a27, a28) {
                Math.cos(-1073741824);
                try { v23["find"](..."find", a28, ...v22, ...v23); } catch (e) {}
                return v21;
            }
            for (let v34 = 0; v34 < 5; v34++) {
                f24();
            }
        }
    }
    new F19();
}
new F17();
let v39;
try { v39 = new Uint8Array(64, 64, 64); } catch (e) {}
try { v39.set(v10); } catch (e) {}
const v41 = new Uint8Array(256);
class C42 {
}
const v43 = C42.name;
function f44(a45, a46, a47) {
    return f44;
}
class C48 {
}
v43[1] = v43;
const v49 = new C42();
const v50 = v49.__lookupGetter__;
function f51(a52) {
    return f51;
}
Math.log1p(268435456);
const v56 = v50?.constructor;
try { new v56(256); } catch (e) {}
let v58;
try { v58 = (64).bind(v41); } catch (e) {}
v58.name;
let v60;
try { v60 = new v50(C42); } catch (e) {}
const v61 = [-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036];
v61.toLocaleString(v60, v61);
for (let v63 = 0; v63 < 5; v63++) {
}
const v65 = new Int16Array();
[] = v65;
for (let [i69, i70] = (() => {
        0 - 0;
        return [v8, 10];
    })();
    (() => {
        i70 >> i70;
        i69 >> i69;
        const v74 = !(i70 > i70);
        v74 || v74;
        return i69 < i70;
    })();
    i69++) {
    i69 % i69;
}
