[0.7531682280847236,1000000000000.0,-762783.6980693934,-0.0,-0.2921237015425717,-Infinity,-221493.33469020436,-962118.1038283363,8.040658631806236e+307,-540.6425953883613];
let v1 = [-Infinity];
const v2 = [383342.6854992863,-7.6764080683946005,0.23722034413189075,-2.2250738585072014e-308,-1000000000000.0,-529.7773498904539,-70738.92317128356,5.0,5.582033374845441,5.0];
class C6 {
    #e = -51673;
    static #h = v1;
    d = v1;
    #a = v1;
    [-51673];
    3386 = -51673;
    static 2;
    a;
    static #g = v2;
    [v2];
    #d;
    o(a8, a9) {
        v1 %= this;
        %VerifyType(super.g);
    }
}
new C6();
new C6();
new C6();
const v22 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
let v25 = ("size").g?.[7];
[...v25] = "size";
function f26(a27, a28, a29) {
    return a29;
}
function F31() {
    if (!new.target) { throw 'must be called with new'; }
}
const v33 = new v22();
function f34(a35, a36) {
    const v37 = a36?.propertyIsEnumerable;
    try { v37(); } catch (e) {}
    const v39 = [];
    let v40;
    try { v40 = v39.with(v39, v39); } catch (e) {}
    const v42 = new Float64Array(v39, v40);
    const v43 = new Float64Array(v42, a35, v40);
    v43.values();
    return v43;
}
f34(v33, v33);
const v46 = new Uint8ClampedArray(v22);
v46.lastIndexOf(-1148418937);
