function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = F0;
    this.f = this;
    try {
        this.f = -16;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
class C7 extends F0 {
    static #d = v4;
    constructor(a9, a10) {
        super();
        try {
            super.toString(v6, v5);
        } catch(e12) {
        }
    }
    10 = v5;
    533421814 = v5;
    static 0;
}
const v13 = new C7(v6, v4);
new C7(v6, v6);
new C7(C7, v13);
class C20 {
    [-55801.39760616061];
}
const v21 = new C20();
function f22(a23) {
    function f24() {
        return f24;
    }
    const v25 = f24.arguments;
    function f26() {
        for (let v27 = 0; v27 < 5; v27++) {
            const v31 = Array(36862, v25, v27 & v27);
            v31[2] = v31;
        }
        return v25;
    }
    f26();
    return f26();
}
v21[Symbol.toPrimitive] = f22;
function f36(a37, a38) {
    return a37;
}
v21[Symbol.toPrimitive] = f36;
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
}
const o45 = {
};
class C47 {
    static #e = "d";
    static 4;
    8;
    static h = "d";
    584 = "d";
    #a;
}
new C47();
const o67 = {
    p(a50, a51) {
        function f53() {
            return C47;
        }
        function f54(a55) {
            const v56 = /(ab)\1foo(?!bar)bazPg/gdiy;
            function f57() {
                return v56;
            }
            [f57];
        }
        Object.defineProperty(Int32Array, 1, { writable: true, configurable: true, get: f53, set: f54 });
        const v59 = new Int32Array(Int32Array, Int32Array, Int32Array);
        function F60(a62, a63) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v64 = new F60(Int32Array, v59);
        v64.resize = F60;
        v64.resize = -55801.39760616061;
        try { v64.resize(v59, F60, Int32Array, a50); } catch (e) {}
        for (const v66 in v21) {
        }
        return C20;
    },
};
o67.p(C20, C20, -55801.39760616061);
