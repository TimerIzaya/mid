function f3() {
    return "c";
}
class C7 {
    constructor(a9, a10, a11, a12) {
        const t5 = "c";
        t5[127] = a11;
        let v13;
        try { v13 = ("9").slice(-6644n, a12); } catch (e) {}
        ("c").length;
        %VerifyType(v13);
    }
    static set h(a16) {
        try { new a16("9", this, a16, 26042n, "c"); } catch (e) {}
        super.f;
        function f19() {
            return a16;
        }
        Object.defineProperty("e", "h", { writable: true, configurable: true, enumerable: true, value: -4294967297n });
        try {
            new f3();
        } catch(e21) {
        }
    }
}
const v22 = new C7(-6644n, "c", -4294967297n, -6644n);
new C7(-4294967297n, "9", -6644n, -4294967297n);
const v24 = new C7(26042n, "c", -4294967297n, -6644n);
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -4294967297n;
    } catch(e30) {
    }
}
class C31 {
    constructor(a33) {
        function f34() {
            return a33;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f34 });
    }
}
new C31();
new F25("e", v22, v24);
new F25(F25, "c", v24);
new F25(F25, "c", "9");
const v39 = /\xed\xb0\x80+/uis;
/MZ{abc/gm;
const v41 = /(l{z})/s;
function F42(a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    try { new v45(v41); } catch (e) {}
    function F47() {
        if (!new.target) { throw 'must be called with new'; }
        this.h = 9007199254740991;
    }
    class C50 {
        constructor(a52, a53, a54) {
        }
    }
    a44.b = a44;
    a44.dotAll;
}
const v56 = new F42(v39);
const v57 = new F42(v41);
let v58 = "atan2";
v58++;
Float64Array[2] = v58;
new Float64Array(Float64Array);
new F42(v41);
const v63 = [128,5,268435456,127,4096];
const v64 = [-185039418,1565119373,33166,29980,-4294967296,1554841923,-1646058516,-15,1,255];
Uint8Array.h = Uint8Array;
const v68 = new Uint8Array();
const v69 = v68.constructor;
try { v69(v69, v56); } catch (e) {}
try { new v69(); } catch (e) {}
v68[44610];
function f74(a75, a76) {
    const v80 = Array();
    let v81 = 1000000000.0;
    function f82(a83) {
    }
    const v84 = f82();
    f82();
    class C88 {
        static 1 = f82;
        constructor(a90, a91) {
            const o94 = {
                "type": "minor",
            };
            o94.b = o94;
            gc(o94);
        }
        /*
        constructor(a97, a98) {
            const o101 = {
                "type": "minor",
            };
            o101.b = o101;
            gc(o101);
        }
        */
    }
    const v103 = new C88(v84, 655864.1717298129);
    const v104 = v103.__defineGetter__;
    try { v104(4, 4); } catch (e) {}
    new C88();
    const v107 = new C88();
    v81 /= -2.2250738585072014e-308;
    for (let i109 = 0;
        i109 < 7;
        (() => {
            i109 + i109;
            Math.round();
            function F116() {
                if (!new.target) { throw 'must be called with new'; }
                for (let [v119,v120,v121,v122] of F116) {
                }
            }
            i109++;
        })()) {
        const v126 = new C88();
        const t125 = v126.constructor;
        new t125(i109, v57);
    }
    function f129() {
        return 3;
    }
    function f130(a131) {
        let v133 = "major";
        v133 = v107;
        Object.defineProperty(v64, 75, { enumerable: true, get: f129 });
        const v136 = new Uint8ClampedArray(995);
        new Int8Array(v136);
        v63.pop().d;
        gc();
    }
    Object.defineProperty(v80, 0, { configurable: true, enumerable: true, get: f129, set: f130 });
    v80.unshift(3, a75);
}
f74.e = f74;
([1.479450712344466]).join().__proto__;
const v148 = new Int16Array();
[] = v148;
new Promise(f74);
