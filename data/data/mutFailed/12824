const v0 = [];
const v1 = [v0,v0,v0,v0];
const v2 = [v1,v1,v1];
const v3 = [v2,v2,v2];
let v4;
try { v4 = v3.sort(v0); } catch (e) {}
let v7;
try { v7 = v4.blink(); } catch (e) {}
const v8 = v7?.constructor;
try { new v8(v7); } catch (e) {}
let v11;
try { v11 = ("hasInstance").strike(); } catch (e) {}
/k5/gvdi;
const v13 = /{1z}/gis;
const v14 = /9Rba/disy;
const v16 = Symbol.toPrimitive;
let o19 = {
    [v16]() {
        try {
            v14.valueOf = v16;
        } catch(e18) {
        }
        return "hasInstance";
    },
};
v14.dotAll;
const v22 = 257 + 257;
try { Int32Array(v0, v0, v1, Int32Array); } catch (e) {}
const v25 = new Int32Array(257);
v11 = v7;
v8.asyncIterator;
Symbol[v1];
o19 >>= "undefined";
v25[17] = v25;
-121;
try { new Float32Array(v13, "function", "function"); } catch (e) {}
function f37(a38, a39, a40, a41) {
    a38.prototype = a38;
    try { new a38(a41, a40, f37); } catch (e) {}
    a40.BYTES_PER_ELEMENT = a40;
    let v44 = new v8();
    try { v44.__defineGetter__(v44, v22); } catch (e) {}
    [...v44] = v25;
    let [...v46] = v25;
    return v44;
}
const v47 = f37(Uint32Array, 121, v25, v4);
Int32Array[222] = v47;
let v48 = v47[146];
v48--;
let v51;
try { v51 = Uint8Array.from(-0.0); } catch (e) {}
try { v51.entries(); } catch (e) {}
