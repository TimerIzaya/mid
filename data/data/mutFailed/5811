function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const o2 = {
    };
    gc.a = gc;
    "async" == "async";
    const o7 = {
        "execution": "async",
        "type": "minor",
    };
    o7.execution;
    gc(o7);
    try { ("function").padEnd(o7); } catch (e) {}
    const o13 = {
        "type": "function",
    };
    let v14 = -1024;
    -268435456 & -268435456;
    v14 %= -268435456;
    try {
        this.h = 168155063;
    } catch(e17) {
    }
    try {
        function F18() {
            if (!new.target) { throw 'must be called with new'; }
        }
        F18.d = F18;
        Int8Array.prototype;
        new Int8Array(-45057);
        this.e = 168155063;
    } catch(e24) {
        e24.message = e24;
    }
    try {
        this.a = 168155063;
    } catch(e25) {
    }
}
const v26 = new F0();
new F0();
new F0();
function f29() {
    Math.atan(Math);
    return Math;
}
%OptimizeFunctionOnNextCall(f29);
new Uint8ClampedArray(1000);
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v37 = new Uint8ClampedArray(6);
v37[4] = v37;
const v45 = new Float64Array(127);
v45[75];
try {
    const v50 = v45.values()?.next;
    try { new v50(); } catch (e) {}
} catch(e52) {
    const v53 = e52?.a;
    try { v53(e52, v53, v53, v53); } catch (e) {}
    function F55(a57, a58, a59, a60) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = e52;
        } catch(e61) {
        }
    }
    new F55(F55, 8, 127, e52);
    const v63 = new F55(52235, 6, -1876875593, Uint16Array);
    new F55(v63, 6, 1000, Uint16Array);
    const v68 = new Int8Array(3816);
    for (const v69 of "some") {
        const v70 = v68[1];
        let [,,,...v71] = v68;
        const o72 = {
        };
        o72.a = v70;
        const o73 = {
        };
        o73.a = v70;
    }
}
try { Int32Array(6, v45, v26); } catch (e) {}
const v77 = new Int32Array(27);
v77[26] = v77;
const v79 = /\b[gW\x60]/vi;
class C80 {
    #a;
    constructor(a82, a83, a84) {
        const v85 = this?.constructor;
        try { new v85(a83, a83, a83); } catch (e) {}
        a82.dotAll = a82;
        a83 ^ a83;
        try {
            a83.#a;
            class C89 {
            }
            function F90(a92, a93) {
                if (!new.target) { throw 'must be called with new'; }
                const v94 = this.constructor;
                try { new v94(0n, a93); } catch (e) {}
                this.f = 0n;
            }
            const v96 = new F90();
            const v97 = new F90();
            let v98 = 65536;
            v98--;
            function f100(a101) {
                const o104 = {
                    ...v98,
                    5: v98,
                    valueOf(a103) {
                        return v96;
                    },
                    "g": v98,
                };
                return v97;
            }
            f100();
            -4294967296 >>> -4294967296;
            class C109 extends SharedArrayBuffer {
            }
        } catch(e110) {
        }
    }
}
C80.name = C80;
new C80(v79, 0n);
const v113 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v114 = [601759695];
const v115 = [1073741824,1073741823,1376142744,1073741825];
function f117(a118, a119, a120, a121) {
    function f123() {
        const o130 = {
            "e": -4294967295,
            ...v113,
            ..."Vre",
            "c": v115,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a128, a129) {
                return "-1073741824";
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        o130[8];
    }
    f123();
    %OptimizeFunctionOnNextCall(f123);
    let v134;
    try { v134 = v115["find"](..."find", a121, ...v114, ...v115, ...522675525n); } catch (e) {}
    v134 <= a120;
    return arguments;
}
f117.length;
for (let v137 = 0; v137 < 10; v137++) {
    v137 / v137;
    f117();
}
