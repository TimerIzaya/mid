const v3 = [-3411,11046,3268,-2,-1601844900,65536,12536,536870912,16,-10];
const v4 = [1073741823,-1642334376,-27976,55689];
try { v4.fill(v3); } catch (e) {}
const v6 = [257,-9223372036854775808,-256,2,8,-65536,3,1073741824,999,-1221265384];
new Uint16Array(512);
const v12 = new Float64Array(256);
const v13 = v12?.findLastIndex;
try { new v13(512); } catch (e) {}
const v17 = new Uint8ClampedArray(256);
v17[194] = v17;
268435440 - 268435440;
new Uint8ClampedArray(129, Uint8ClampedArray, 16);
722 >> 722;
Uint32Array.prototype;
Uint32Array.d = Uint32Array;
const v29 = new Uint32Array(722);
v29[7] = v29;
try { new BigInt64Array(v29, v6, 256); } catch (e) {}
new BigInt64Array(129);
let v35;
try { v35 = new Proxy(722, BigInt64Array); } catch (e) {}
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F36(v35, Proxy); } catch (e) {}
class C41 extends F36 {
    #d;
    static {
        const v44 = this.prototype?.constructor;
        try { new v44(); } catch (e) {}
        for (let v46 = 0; v46 < 25; v46++) {
            v46++;
            class C48 {
                static {
                }
            }
            C48.length;
            for (let v51 = 0; v51 < 25; v51++) {
                const v52 = [601759695];
                try { v52.entries(); } catch (e) {}
                [1073741824,1073741823,1376142744,1073741825];
                function f55(a56, a57, a58, a59) {
                    for (let v61 = 0; v61 < 5; v61++) {
                        try {
                        } catch(e62) {
                        }
                    }
                    function f63() {
                        return a56;
                    }
                    class C64 {
                    }
                    function f65(a66, a67) {
                    }
                    const o70 = {
                        valueOf() {
                        },
                        get d() {
                        },
                    };
                    function f71(a72) {
                        return a72;
                    }
                    class C73 extends f71 {
                        g;
                        static 257;
                    }
                    C73.name = C73;
                }
                for (let v74 = 0; v74 < 5; v74++) {
                    v74 ^ v74;
                    f55();
                }
            }
        }
        try {
        } catch(e77) {
        }
    }
}
try { C41.call(512); } catch (e) {}
