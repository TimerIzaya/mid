function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 1924095615;
    } catch(e3) {
    }
    try {
        this.d = 1924095615;
        new Float32Array(2522);
        new Int8Array(268435456);
    } catch(e10) {
    }
    try {
        this.g = 1924095615;
    } catch(e11) {
    }
}
let v12 = new F0();
function f13() {
    const v14 = [601759695];
    const v15 = [1073741824,1073741823,1376142744,1073741825];
    function f16(a17, a18, a19, a20) {
        function f22() {
            return a20;
        }
        arguments.c = 1163987790;
        -9223372036854775808n & -2147483647n;
        const v33 = new Int8Array();
        const v34 = v33.buffer;
        class C37 {
            static {
                for (const v39 of "-4294967295") {
                }
            }
        }
        v34.slice();
        %OptimizeFunctionOnNextCall(f22);
        let v42;
        try { v42 = v15["find"](..."find", a20, ...v14); } catch (e) {}
        v42 <= a19;
        return arguments;
    }
    return v12;
}
v12.toString = f13;
const v44 = new F0();
const v45 = new F0();
class C46 extends F0 {
    set c(a48) {
        const v56 = new Float32Array(165);
        v56[Symbol.toPrimitive] = f13;
        v56[35] = v56;
        new Uint16Array(v56);
    }
    static 79 = v44;
    static 5;
}
const v63 = new C46();
v63[1] = v63;
const v64 = new C46();
function f65() {
    return 10;
}
v64.toString = f65;
const v69 = new C46();
class C70 extends C46 {
    [v64] = v45;
    constructor(a72, a73) {
        super();
        for (let v74 = 0; v74 < 32; v74++) {
            v45["p" + v74] = v74;
        }
    }
    static #h;
    static g = v69;
}
new C70(v44, v63);
const v78 = new C70(v45, v69);
new C70(v45, v78);
const v81 = [-1];
-1 in v81;
new Int8Array(268435456);
function f87(a88, a89, a90, a91) {
    const o102 = {
        toString(a93, a94) {
            const v97 = new Int32Array(1024);
            for (const v98 of v97) {
                new SharedArrayBuffer();
                SharedArrayBuffer.e = v97;
                [1539012200,f87];
            }
        },
    };
    return o102;
}
const v103 = v81[226];
v63[1];
v69[v45] = v103;
let v109 = 9007199254740990 >>> v12;
const v110 = ++v109;
const v111 = !-567.3665601852178;
v12++;
!255;
Math.atanh(v110);
-567.3665601852178 + v111;
