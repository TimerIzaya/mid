const v0 = [];
class C1 {
    static #a;
    static set h(a3) {
        let v4 = 0;
        do {
            try {
                this.#a = this;
            } catch(e5) {
            }
            v4++;
        } while (v4 < 2)
    }
}
const v9 = new C1();
const v10 = new C1();
const v11 = new C1();
function f12() {
    new BigInt64Array();
    const t19 = 5;
    t19.constructor = f12;
    const v17 = new Set();
    for (let [v18,v19] of BigInt64Array) {
        try {
            v17.values();
        } catch(e21) {
        }
    }
    return v10;
}
const v22 = [v0,v9,v11];
const v23 = [v9,v9,C1];
[f12,v23,v23,C1,v22];
const v29 = new Date();
const v31 = new Set();
v31.add(v29);
class C33 extends f12 {
    static #p(a35, a36, a37) {
        try {
            f12();
        } catch(e39) {
        }
        return a37;
    }
    #o(a41, a42, a43, a44) {
        try {
            v0.f = this;
        } catch(e48) {
        }
        return a41;
    }
}
new C33();
new C33();
const v53 = new Uint16Array(3225);
for (const v54 of v53) {
    new BigUint64Array(3375);
}
new C33();
function F60() {
    if (!new.target) { throw 'must be called with new'; }
}
v0["p" + 3225] = 3225;
class C65 {
}
const v66 = new C65();
ReferenceError(v66);
ReferenceError();
