function f0() {
}
const v1 = [-4,0,-4096,-16,16,914222033,5,-9223372036854775808,64,-5387];
const v2 = [-2147483648,14814,32135,255,54326,2147483647,14,1073741824,-65535];
const v3 = [31316,-65537,-9,-2147483648,-2093977374];
1073741824n & 1073741824n;
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    a10 ^ a10;
    Object.defineProperty(this, "e", { enumerable: true, value: this });
    try {
        this.e = v3;
    } catch(e13) {
        let v15 = undefined;
        v15 = 3;
        const v16 = [1984879050,0,-8575,7,1073741825];
        function f17(a18, a19, a20, a21) {
            return ("Vre").constructor.fromCharCode(v16);
        }
        %OptimizeFunctionOnNextCall(f17);
    }
}
const v25 = new F8(391934146n, -4096n);
const v26 = new F8(391934146n, 1073741824n);
const v27 = new F8(391934146n, 1073741824n);
function f28(a29, a30) {
    a30 >> a30;
    const o37 = {
        [1073741824n]: v25,
        "a": v26,
        "h": v25,
        [f0](a33, a34, a35) {
            try {
                a29.__proto__ = a35;
            } catch(e36) {
            }
            return a33;
        },
        __proto__: v27,
        "g": v27,
        ...v26,
        ...v27,
    };
    return o37;
}
try { f28(1073741824n, v25); } catch (e) {}
([]).shift();
try { Worker(); } catch (e) {}
try { new v1(); } catch (e) {}
f28(v1, -4096n);
f28(v2, 1073741824n);
f28(v3, 391934146n);
class C48 {
    static #o() {
        const v50 = [-2147483648,-46456,1200954989,-4294967296,1];
        const v51 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
        const v52 = [23955,1426598775,2147483649];
        try {
            v51.#o(v51, v52, null, v51, v50);
        } catch(e54) {
        }
        return null;
    }
    #p() {
        const v56 = this[223];
        const v57 = super.g;
        let v58;
        try { v58 = v56.p(this, v57, v57, v57); } catch (e) {}
        this[null] = v58;
        new Int32Array(10);
        const v63 = new Uint32Array(10);
        v63.fill();
        new Map();
        return v57;
    }
}
try { new C48(); } catch (e) {}
const v68 = new C48();
const v69 = new C48();
const v70 = v69?.constructor;
try { new v70(); } catch (e) {}
const o86 = {
    set d(a73) {
        for (let v74 = 0; v74 < 10; v74++) {
            996195971n <= 996195971n;
            class C77 {
                4294967296 = 996195971n;
            }
            try { C77.apply(v74, v27); } catch (e) {}
            const v79 = new C77();
            v79[4294967296];
        }
    },
    set d(a82) {
        this["cos"]();
    },
    get d() {
        return F8;
    },
};
o86.d = o86;
o86.d = v69;
new C48();
class C88 {
    p(a90) {
        const v91 = null - a90;
        %VerifyType(v68);
        super[v68] = v91;
        a90?.[1858] ^ v91;
        for (let i96 = 0; i96 < 7; i96++) {
            try { v69.valueOf(i96, a90, v68, i96, i96); } catch (e) {}
        }
        const v107 = new BigUint64Array();
        v107.buffer.slice();
        Math.cos(Math);
        return C48;
    }
}
try { C88.call(F8); } catch (e) {}
const v113 = new C88();
const v114 = new C88();
const v115 = new C88();
let v118 = -1024;
function F119(a121, a122, a123, a124) {
    if (!new.target) { throw 'must be called with new'; }
    const v125 = this?.constructor;
    try { new v125(a123, a123, a124, a124); } catch (e) {}
    const v127 = a123?.constructor;
    try { new v127(); } catch (e) {}
    this.f = a124;
    this.e = a123;
    try {
        this.f = C48;
    } catch(e129) {
    }
    try {
        this.e = v115;
    } catch(e130) {
    }
    try {
        this.a = a122;
    } catch(e131) {
    }
}
const v132 = new F119(38767, v113, v68, v69);
const v133 = new F119(38767, v115, C88, v113);
try { v133.constructor(v133, v133, C88, v69); } catch (e) {}
const v135 = new F119(v118, v114, v68, C48);
const v136 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v137 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
try { v137.fill(v26); } catch (e) {}
~64;
-0;
new Uint32Array(v136, 0, 0);
function F146(a148, a149) {
    if (!new.target) { throw 'must be called with new'; }
    try { a148.filter(F8); } catch (e) {}
    a149 * a149;
}
const v152 = new F146(v137, 0);
const v153 = v152?.constructor;
try { new v153(v132, v132); } catch (e) {}
new F146();
try { ("b").strike(); } catch (e) {}
class C158 {
}
C158.name = C158;
let v160 = 0;
while (v160 < 3) {
    const v164 = Symbol.iterator;
    const o178 = {
        [v164]() {
            let v166 = 10;
            const o177 = {
                next() {
                    v166--;
                    const v170 = v166 == 0;
                    const v173 = new BigInt64Array(4096);
                    v173[1087];
                    class C175 {
                    }
                    const o176 = {
                        "done": v170,
                        "value": v166,
                    };
                    return o176;
                },
            };
            return o177;
        },
    };
    const v179 = v160++;
    v179 ^ v179;
}
const o185 = {
    valueOf() {
        return "D2z";
    },
};
const v187 = /5*/gi;
const v188 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v189 = [601759695];
const v190 = [1073741824,1073741823,1376142744,1073741825];
const t203 = "b";
t203.e = "B";
function f193(a194, a195, a196, a197) {
    function f198() {
        let v201 = Float64Array;
        v201 = a195;
        b = v189;
        const v202 = v136.length;
        -v202;
        try {
            v136.forEach(v201);
        } catch(e205) {
        }
        const v206 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.iterator;
        let v209 = Symbol.toPrimitive;
        Symbol.for(v209.description);
        const o230 = {
            toString(a214, a215) {
                const v216 = a197 && v201;
                function f217() {
                    a214 *= v209;
                    return v201;
                }
                f198();
                Symbol("D2z");
                new Uint16Array(6);
                new Float32Array(0);
                new Int32Array(153);
                return v216 <= v206;
            },
        };
        -(-268435456);
        const o258 = {
            "c": -4294967297n,
            [522675525n](a234, a235) {
            },
            "c": v189,
            valueOf(a237, a238) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a240, a241, a242, a243) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v188,
            ...v135,
            [v209]() {
                const o247 = {
                    next() {
                        return v187;
                    },
                };
            },
            "type": C158,
            ..."Vre",
            valueOf(a249, a250) {
                return a250;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a252, a253, a254) {
            },
            5: -4294967295,
            "arguments": v2,
            [f198]() {
            },
            set b(a257) {
            },
            6: -268435456,
        };
        o258.arguments = o258;
        v209 = v201;
        let v259 = 1334;
        v259--;
        const v262 = new Float32Array(v259);
        try { v262.set(a195); } catch (e) {}
        v118 %= -268435456;
        new Uint32Array(v137, v202, v209);
        v152 - f198;
        ~3;
        new Float64Array(3);
        -2;
        const v276 = new Uint16Array(2);
        try { v276.includes(Symbol); } catch (e) {}
    }
    f198();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f198);
    try { ("find").codePointAt(f0); } catch (e) {}
    try { v190["find"]("find", a197, v189, v190, 522675525n); } catch (e) {}
}
for (let v284 = 0; v284 < 10; v284++) {
    f193();
}
%OptimizeFunctionOnNextCall(f193);
f193();
