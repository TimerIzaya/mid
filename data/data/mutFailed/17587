let v1 = 2086125993;
let v2 = 2081808133;
class C3 {
    constructor(a5, a6) {
        a6?.[a5];
        (v1 = v2) * 536870887;
        v2 = v1;
        const o11 = {
            "maxByteLength": 231,
        };
        const v13 = new SharedArrayBuffer(6, o11);
        new Float32Array(v13);
        this[1];
    }
    static [v2] = v1;
    static 0 = v1;
    static set e(a18) {
        function f19() {
            return 536870887;
        }
    }
}
const v20 = new C3(v1, 536870887);
const v21 = new C3(v1, v1);
try { v21.constructor(v2, v20); } catch (e) {}
const v23 = new C3(536870887, v2);
const v24 = v23?.constructor;
try { new v24(v21, v20); } catch (e) {}
function f26() {
    return v2;
}
let v31;
try { v31 = ("p").padStart(C3); } catch (e) {}
BigUint64Array.name = BigUint64Array;
const v35 = (a36, a37, a38) => {
    let {"e":v39,...v40} = v20;
    return BigUint64Array;
};
v20.b += v31;
const v41 = new BigUint64Array();
try { ("copyWithin").strike(); } catch (e) {}
const v44 = v41["copyWithin"]();
try { v44.entries(); } catch (e) {}
