function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
    } catch(e6) {
    }
    try {
        this.b = 5.0;
    } catch(e7) {
    }
    if (a5) {
        try {
            const o8 = {
            };
            this.fuck(o8, 1000000.0, this, this);
        } catch(e10) {
        }
    } else {
    }
    try {
        this.g = 5.0;
    } catch(e12) {
    }
}
const v13 = new F3(1000000.0);
new F3(v13);
new F3(5.0);
class C16 {
    static {
        try {
            this.c = this;
        } catch(e18) {
        }
    }
    [v13];
    toString(a20, a21, a22) {
        [-119409139];
        [2147483648,364254693];
        [256,1640602682,2147483649,9223372036854775807,-683146825,54641];
        return F3;
    }
    [F3] = v13;
}
const v26 = new C16();
const v27 = new C16();
const t45 = 5.0;
new t45();
[8,1073741825,6,3,-16,2147483649,10099,2147483647,-1024];
[7,-9007199254740990,6,1,1];
[7,-18159,268435439,536870889,-2147483647];
class C32 {
}
const v33 = new C32();
const v34 = new C32();
const v35 = [v34,v33];
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    v13.unshift(v33);
}
new F36(v27);
new F36(v35);
try {
    new C16();
    let v46 = 0;
    while (v46 < 9) {
        break;
        v46++;
    }
} catch(e50) {
}
const v51 = ~v34;
try {
    C16.fuck(64n, 64n, [64n,v35,v26,v51,v27]);
} catch(e55) {
}
