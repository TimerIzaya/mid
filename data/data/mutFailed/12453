const v0 = [1000000000000.0,-2.0,1000.0,-8.346155238618344,-4.584558580166522,-1.7976931348623157e+308,-0.0];
const v1 = [-3.746918889915822,-1000.0,5.717834845863261e+307,2.2250738585072014e-308,631.2661025795796,-1000.0];
const v2 = [700092.9074151693,-1.5241431737995605e+307,2.0,2.2250738585072014e-308,-3.0,0.3043765665659228,3.0,8.29062414193709,-4.1629689020498954];
const v3 = /(a)\1/gvimy;
const v4 = /2a||bc/gui;
const v5 = /qM/is;
const v6 = [v0,v5];
try { v6.concat(v3); } catch (e) {}
const v8 = [v2,v6,v6];
const v9 = [v8,v1,v8];
try { v9.map(v3); } catch (e) {}
class C11 {
    [v2];
    static {
        function F13(a15, a16) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = this;
            try { a16(F13, a16); } catch (e) {}
            try {
                this.d = this;
            } catch(e18) {
            }
        }
        F13.MAX_VALUE = F13;
        new F13(v9, this);
        const v20 = new F13(v2, v9);
        v20[1] = v20;
        new F13(v8, v9);
    }
    [v4] = v5;
    static 3;
    d;
    constructor(a23, a24) {
        const v25 = this?.__defineSetter__;
        try { new v25(v4, a24); } catch (e) {}
        try {
            a23.a = this;
        } catch(e27) {
        }
    }
    static e = v4;
}
new C11(v6, v9);
const v29 = new C11(v1, v2);
const v30 = new C11(v1, v6);
function f31() {
}
f31.split = f31;
function f32() {
    const o58 = {
        "c": f31,
        "f": v6,
        "h": v5,
        [f31]: C11,
        "d": v29,
        "b": f31,
        [f31]: f31,
        valueOf() {
            let v35 = -(-1e-15);
            v35--;
            const t59 = /a\Sc?/giy;
            t59.valueOf = f31;
            try {
                v29(v4, v30);
            } catch(e39) {
                Symbol("bZ");
                const v43 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                class C44 {
                    constructor(a46, a47, a48, a49) {
                        const v50 = this?.constructor;
                        const v51 = this[Symbol];
                        let v52 = v1[452285543];
                        this[7] |= v35;
                        v51[711] = a48;
                        v52 = v50;
                        try { new v50(v43, a48, a48); } catch (e) {}
                        a47 >>> a47;
                        0.061410412759498656 >>> 0.061410412759498656;
                    }
                }
            }
            try {
                this.valueOf = f31;
            } catch(e57) {
            }
            return f31;
        },
    };
    return o58;
}
f32();
const v60 = f32();
const v61 = v60?.b;
let v62;
try { v62 = new v61(); } catch (e) {}
const v63 = v62?.constructor;
try { new v63(); } catch (e) {}
let v65 = 268435440;
v65 % v65;
const v68 = new v61(v65);
v68.__proto__;
function F70() {
    if (!new.target) { throw 'must be called with new'; }
}
class C72 extends F70 {
}
C72.prototype = C72;
v4[v61] = v0;
-v29;
[v1,C11,v30,v1];
[v8,v8];
[v30,v0,v6,v62];
Date[-22872n] = Date;
const v80 = ("function").length;
v80 % v80;
const v82 = f32();
function F83(a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    try { a85.c(); } catch (e) {}
    const v88 = this?.constructor;
    v88.length = v88;
    try { new v88(a85, a85); } catch (e) {}
    new DataView(v80);
    const v92 = [];
    const o93 = {
        ...v92,
    };
    try {
        this.b = a86;
    } catch(e94) {
    }
    try {
        this.c = a85;
    } catch(e95) {
    }
}
try { F83(v82, v82); } catch (e) {}
const v97 = new F83(v82, v82);
const v98 = new F83(v60, v97);
new F83(v82, v97);
-6n * -6n;
function f105(a106, a107) {
    Math.atan2(Math, f105);
    return f105;
}
v65 %= C11[v65];
"function" !== v98 ? "function" : v98;
d = F70;
new Promise(f105);
1713234876 === "function";
function f117(a118, a119) {
}
f117();
f117(-1748, 1713234876);
function F122(a124, a125) {
    if (!new.target) { throw 'must be called with new'; }
    const v126 = this.constructor;
    v126.f = v126;
    function f130() {
        return f130;
    }
}
