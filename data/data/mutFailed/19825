const v2 = new Float64Array(128);
const v5 = new Int16Array(1);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v8 = new Int16Array(1);
class C9 {
    constructor(a11, a12) {
        a11[0] = a11;
        try { a12.findIndex(C9); } catch (e) {}
        !(a12 === a12);
        a11 / a11;
        for (let v17 = 0; v17 < 32; v17++) {
            v17 << v17;
            const v20 = ("p")?.blink;
            try { new v20(); } catch (e) {}
            const v22 = "p" + v17;
            v22.length = v22;
            v5[v22] = v17;
        }
    }
    static 1073741824;
    static set h(a24) {
    }
    static c = 1;
}
C9[1073741824] = C9;
let v28;
try { v28 = new C9(v5, v8); } catch (e) {}
try { v28.propertyIsEnumerable(v5); } catch (e) {}
new C9(128, 128);
const v31 = new C9(1, 128);
const v32 = v31?.constructor;
try { new v32(Int16Array, 128); } catch (e) {}
v31.g = v31;
const v34 = new C9(1, 1);
v34.length = v34;
const v37 = [Int16Array,C9,[1,1,128,[1,v2]],Int16Array,Int16Array];
try { v37.toString(); } catch (e) {}
const v39 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v40 = 0; v40 < 5; v40++) {
    function f41() {
        try {
            v39.forEach();
        } catch(e43) {
        }
        const v45 = Symbol.toPrimitive;
        Symbol.for(v45.description);
        const v49 = v45.description;
        let v50;
        try { v50 = v49.fontcolor(v49); } catch (e) {}
        v50[7];
        let v52;
        try { v52 = v49.link(v49, v49, f41); } catch (e) {}
        let v53;
        try { v53 = v52.sup(); } catch (e) {}
        try { v53.valueOf(); } catch (e) {}
        Symbol.for();
        return v45;
    }
    f41.caller = f41;
    try { f41(); } catch (e) {}
    const v57 = f41();
    Symbol.for(v57.description);
    Symbol.for(v57.description);
    %OptimizeFunctionOnNextCall(f41);
}
