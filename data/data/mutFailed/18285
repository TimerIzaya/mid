function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    for (let i7 = 0; i7 < 1; i7++) {
    }
    function f13(a14, a15) {
        this in a15;
    }
    const v18 = new Promise(f13);
    try {
        this.d = 1000000000000.0;
    } catch(e19) {
        let v20;
        try { v20 = e19(a5, f13, e19, this, e19); } catch (e) {}
        e19[v20 << v20] = v20;
        try { v20(F3, -2.0, -2.0, ...e19); } catch (e) {}
        a5[Symbol.isConcatSpreadable] = v18;
    }
    try {
        this.c = a5;
    } catch(e25) {
    }
}
new F3(1000000000000.0);
new F3(-2.0);
const v28 = new F3(1000000000000.0);
const v29 = [1840677197,-43868];
const v32 = new Int8Array(6);
for (const v33 in v32) {
    Object.defineProperty(v29, v33, { configurable: true, value: v33 });
}
function f34() {
    const v35 = -v28;
    Math.trunc(9007199254740991);
    Math.atanh(v35);
    v35 / v35;
    Math.acosh(v35);
    -4.0 && -4.0;
    -4.0 - 9007199254740991;
    Math.cosh(v35);
    return -2.0;
}
function f46(a47, a48) {
    function f50(a51) {
        let {"b":v52,"f":v53,"g":v54,...v55} = Reflect;
        return v52;
    }
    this.onmessage = f50;
    return f46;
}
Worker(f46);
const v63 = new Uint8Array(1000);
new Float64Array(1002);
new Float64Array(256);
9n >> 9n;
Math.sinh(-1024);
const o79 = {
    ...v63,
    n(a77, a78) {
        return a77;
    },
};
const o82 = {
    "b": 1e-15,
    [3](a81) {
    },
};
delete o82.b;
