function f3() {
    Math.cos(Math);
    return Math;
}
f3();
%OptimizeFunctionOnNextCall(f3);
const v6 = new BigUint64Array(3597);
let v10 = -2.0;
v10++;
Math.log1p(v10);
const v15 = new Int16Array(3597);
async function f17(a18, a19, a20) {
    v15[0];
    const v22 = v15[1];
    let [,,...v23] = v15;
    await v22;
}
const v25 = f17(8, 8, 948737.12760097);
new BigInt64Array(2963);
const v27 = [-292.83735349768153,1000000.0,-Infinity];
Object.defineProperty(Float64Array, Symbol.toPrimitive, { writable: true, enumerable: true, value: f3 });
class C32 extends Uint8Array {
    constructor(a34, a35) {
        a34[1] = Float64Array;
        super(a34);
    }
}
const v36 = new C32(v27);
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = new BigInt64Array(11);
    v46.lastIndexOf(this);
}
const v49 = new Uint32Array(10);
let v50;
try { v50 = v49.values(); } catch (e) {}
const v51 = [-607634956,6,10];
try { v51.group(v6); } catch (e) {}
const v54 = new Uint32Array(2432);
const o55 = {
    ...v54,
};
const v56 = [6,5,4,65537,2,-4,-14428,1000,-14740,257];
let v57;
try { v57 = v56.group(BigUint64Array); } catch (e) {}
const v58 = [1090634070,1288638763,1073741824,-2147483647,-12];
v58[4] = v58;
v58[4];
function f61() {
    try { C32["return"](v50, v25, v36, "return", Uint8Array); } catch (e) {}
    return Uint8Array;
}
ReferenceError.toString = f61;
try { ReferenceError(v57); } catch (e) {}
const v65 = ReferenceError(ReferenceError);
Symbol.toPrimitive.description;
class C73 {
}
const v74 = new C73();
v74.f = v74;
const v75 = new C73();
function f76() {
    return Symbol;
}
function f77(a78) {
    try {
        a78.h = F38;
    } catch(e79) {
    }
}
Object.defineProperty(v75, "valueOf", { enumerable: true, get: f76, set: f77 });
const v80 = new C73();
function F81(a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    function f85() {
        for (let i = 0; i < 10; i++) {
            const o86 = {
            };
        }
        return 5;
    }
    a83.constructor = f85;
    function f87(a88, a89) {
        Array(19793);
        return this;
    }
    a84.valueOf = f87;
    a84--;
    const v94 = a83?.constructor;
    v94.MAX_SAFE_INTEGER = f76;
    v94.MAX_SAFE_INTEGER;
    new v94();
    const v97 = this.constructor;
    try { v97(a83, v80); } catch (e) {}
}
new F81(204, 2415);
new F81(v80, v75);
1073741824 ** 5;
v65.stack = v65;
