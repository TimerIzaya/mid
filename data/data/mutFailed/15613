function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -2147483648;
    } catch(e3) {
        function f4(a5) {
            return this;
        }
        class C6 extends f4 {
            g = this;
            static 7;
            #b = f4;
        }
    }
}
const v7 = new F0();
const v8 = new F0();
const v9 = new F0();
const v10 = [6,62068,-49097,-1,1995967110,-1024,6,-2,-9007199254740992,90083714];
try { v10.entries(); } catch (e) {}
const v12 = [-4,1,1456220474,65537];
const v13 = v12[1];
const v14 = [-48354];
v14[0];
function f16() {
    return v8;
}
f16(false, F0, v9, v7);
try {
    v12.reduceRight(f16);
} catch(e21) {
}
let v24 = new Int32Array(16);
129 !== 129;
Uint32Array.f = Uint32Array;
const v28 = new Uint32Array(v13);
v28[49];
let v32;
try { v32 = new Uint32Array(v7, v7, true); } catch (e) {}
new Uint32Array(2);
const v36 = new Int8Array(134);
~6;
Uint16Array.name = Uint16Array;
const v42 = [2.2250738585072014e-308,3.324626918577046,0.10900558944043404,0.28769735272701,0.7051945972986168,-2.0,0.7130787562117122,764813.2557938893];
const v43 = [1000000.0,-1000000000000.0,2.0,-2.2903444390159056,-0.0,Infinity,-1000.0,1.7976931348623157e+308];
try { v43.pop(); } catch (e) {}
[-1.0,-4.0,-8.535994148236361e+307];
Float32Array.length;
function F48(a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
}
const v53 = new F48();
const v54 = new F48(F48, F48, v53);
const v55 = v54?.constructor;
try { new v55(Uint16Array, v54, v42); } catch (e) {}
try { v7.toUTCString(); } catch (e) {}
const v65 = v53 || undefined;
10 - 10;
const v71 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
const o75 = {
    "maxByteLength": 16,
};
const v77 = new SharedArrayBuffer(8, o75);
new Uint8Array(v77);
class C81 {
    static #g;
    constructor(a83) {
        const v84 = this?.constructor;
        try { new v84(C81); } catch (e) {}
        let {"c":v86,"g":v87,"length":v88,} = v84;
        if (false) {
            try {
                v28.toString = C81;
            } catch(e89) {
            }
            Object.defineProperty(v28, Int16Array, { configurable: true, enumerable: true, value: Uint8Array });
            try {
                v71.values();
            } catch(e91) {
            }
        } else {
            v12 << 16;
            new Uint8Array(...v71, undefined, v32, v88, v84, 54);
            new Float64Array(234);
            new Uint16Array(2);
            new Int32Array(2371);
            const v106 = --v24;
            Math.expm1(1057);
            Math.log2(v106);
            v24 - 1057;
        }
        C81 & v86;
        let v111 = v87?.[7];
        [...v111] = "size";
        /a\D\c0zR(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10*/iy;
        /a\bc/vd;
        /(?:ab)|cde/uimy;
    }
    static #toString(a116) {
    }
    ["size"] = "size";
    static #e = 2.2250738585072014e-308;
    static #d;
}
const v117 = new C81(2.2250738585072014e-308);
try {
} catch(e118) {
}
const v119 = [10];
const v120 = v117.__proto__;
[5,255,256,-14801,268435439,4,8,-65537];
function f122(a123, a124, a125) {
}
"function" == "function";
class C128 extends Int16Array {
    [v71];
}
f16 + v120;
const t117 = "function";
t117[v14] = v65;
const v131 = Symbol.iterator;
v36 - -1725388734;
try { v24.p(2.2250738585072014e-308, v117, SyntaxError, 4); } catch (e) {}
v36 >= 10;
C128.__proto__;
v119[v131];
