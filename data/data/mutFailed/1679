const v0 = /(\1a)/gums;
const v1 = /V(?:a{5,1000000}){3,1000000}/vims;
function f2() {
    const v5 = new BigUint64Array(1000);
    return v5;
}
Object.defineProperty(v1, "toString", { enumerable: true, value: f2 });
const v6 = /(?<a>.)\k<a>?/vdimsy;
v6.toString = f2;
for (let v7 = 0; v7 < 27; v7++) {
    try { v0.compile(v1); } catch (e) {}
}
let v9;
try { v9 = v6(v0, v1, v1, v0); } catch (e) {}
%VerifyType(v9);
const v10 = [v6,v1,v0];
const v11 = [v10,v1,v6,v10,v10];
[v6,v0,v0];
const v15 = new BigInt64Array(8);
new BigUint64Array(10);
const v21 = new Uint8Array(7);
function f24() {
    let v26 = 1000000000000.0;
    const v27 = v26--;
    -v27;
    let v30 = 257828.6336153492;
    function f32(a33, a34) {
        for (let v35 = 0; v35 < 10; v35++) {
            class C36 {
                #f;
                [v35];
            }
            new C36();
        }
        return v11;
    }
    Math[Symbol.iterator] = f32;
    -(-v11 && v11);
    v30--;
    class C46 {
        static #m(a48) {
        }
        constructor(a50) {
            const v52 = new Float32Array();
            try { v52.entries(); } catch (e) {}
            const v54 = new Uint16Array(12, -4294967296, v27);
            new Float32Array(v54, -4294967296);
        }
    }
    try { new C46(12); } catch (e) {}
    const v58 = Symbol.iterator;
    Math[v58] = v58;
    try { v15.reduce(v9, 12); } catch (e) {}
    const v63 = new C46(v30);
    v63[Symbol.toPrimitive] = Symbol;
    const v66 = new C46();
    const v67 = new C46(-4294967296);
    const v68 = [v67,C46];
    [v30,v67,v63,v67,v68];
    const v70 = [v67];
    class C71 extends C46 {
        [v63];
        #n(a73, a74, a75, a76) {
            return v70;
        }
    }
    const v77 = new C71();
    v77.m = 8;
    const v78 = v70.constructor;
    Object.defineProperty(v78, "a", { configurable: true, enumerable: true, value: 12 });
    try { v78.isArray(v70); } catch (e) {}
    class C80 extends v78 {
    }
    C80.a = C80;
    const v81 = new C80();
    const v82 = v81?.constructor;
    try { new v82(); } catch (e) {}
    Object.defineProperty(v81, 65537, { value: v66 });
    try { v77.m(v68); } catch (e) {}
    const o85 = {
        "e": Uint16Array,
        "d": v81,
        __proto__: v10,
        "g": 11759,
        [v11]: v21,
        "h": v30,
        /*
        __proto__: 3.4890473589784586e+307,
        */
    };
    return Int32Array;
}
%PrepareFunctionForOptimization(f24);
f24();
f24();
%OptimizeFunctionOnNextCall(f24);
f24();
