[9007199254740992,0,9223372036854775807,10,4294967296];
[-11183,9,1134499379,-268435456,2147483649];
const v2 = /8[\cA]v/uisy;
const v3 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try { v3.concat(v3); } catch (e) {}
const v5 = v3[2];
try {
    v3.length = v2;
} catch(e6) {
    e6.message = e6;
}
const v7 = [-9007199254740992,40126,7,-4294967296,10,13,56258];
try { v7.pop(); } catch (e) {}
const v11 = new Float64Array(Float64Array);
const v12 = v11?.toString;
try { v12.apply(v5, Float64Array); } catch (e) {}
try { new v12(); } catch (e) {}
function f15(a16, a17) {
    const v18 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
    class C19 {
    }
    const v20 = C19.constructor;
    try { v18.some(v20); } catch (e) {}
}
f15.caller = f15;
const v22 = new WeakSet();
try { ("c").strike(); } catch (e) {}
const t27 = "c";
t27[0] = "c";
const v26 = ("M")?.toLocaleUpperCase;
let v27;
try { v27 = new v26(); } catch (e) {}
const v31 = new BigInt64Array(1250);
v31.BYTES_PER_ELEMENT = v31;
11 ^ 11;
new Int32Array(11);
const v39 = new Float64Array(65536, 65536, 65536);
let v40 = 4294967297;
v40++;
v39.copyWithin(65536, v40);
1776 + 1776;
128 + 128;
function f47() {
    const v49 = -65535 - -65535;
    v49 & v49;
    const o75 = {
        m(a52) {
            try { a52.propertyIsEnumerable(-65535); } catch (e) {}
            const v54 = this?.__defineGetter__;
            try { new v54("c", -65535); } catch (e) {}
            try { a52.m(128); } catch (e) {}
            let v57;
            try { v57 = a52.next(); } catch (e) {}
            a52.c = v27;
            const o58 = {
            };
            o58.c = o58;
            o58.e = o58;
            -9007199254740991 >>> -9007199254740991;
            try { WeakMap(); } catch (e) {}
            class C63 {
            }
            const v64 = v57.name;
            try { v64.big(); } catch (e) {}
            v64 == v64;
            3938 ^ 3938;
            const v70 = new Int8Array(3938);
            let v71 = v70[2620];
            v71 + v71;
            v71--;
            let v74 = 3;
            [...v74] = v70;
            return WeakMap;
        },
    };
    o75.m(o75);
    return 1776;
}
const v77 = f47();
v77 >>> v77;
const v79 = new Float64Array(2);
try { v79.findIndex(v11); } catch (e) {}
function F81(a83) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(a83); } catch (e) {}
    const v85 = this?.__lookupSetter__;
    try { v85.call("1000"); } catch (e) {}
    try { new v85(v7); } catch (e) {}
}
try { new F81(v26); } catch (e) {}
const v89 = new F81(F81);
const v90 = v89?.constructor;
try { new v90(F81); } catch (e) {}
const v92 = v89?.constructor;
v92.length = v92;
let v93;
try { v93 = new v92(Float64Array); } catch (e) {}
const v94 = v93?.constructor;
try { new v94(v93); } catch (e) {}
function f96(a97, a98, a99) {
    for (let i = 0; i < 5; i++) {
    }
    f96(a99, v89);
    return a98;
}
f96.arguments;
let v103 = 536870912;
v103--;
const v105 = [10,-2,256,-4294967295,6,-34566,804990459,-256,-1831978218];
let v106 = v105[1];
v106--;
try {
const t0 = 1073741824;
t0(-65535, v105, 1073741824);
} catch (e) {}
const v111 = v22.constructor;
try { v111.bind(v79); } catch (e) {}
-975.5698708633108;
class C115 {
}
let v116;
try { v116 = new C115(); } catch (e) {}
const v117 = v116?.constructor;
try { new v117(); } catch (e) {}
function F119(a121, a122, a123, a124) {
    if (!new.target) { throw 'must be called with new'; }
    new Float32Array([49197,268435456,-12,-5156,35920,-45892,-667,536870888,65537,-12]);
}
try { ("number").charAt(1073741824); } catch (e) {}
