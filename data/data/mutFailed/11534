class C3 {
    #c = 0.870344940915349;
    #toString(a5) {
        try {
            this.a = this;
        } catch(e6) {
        }
        const v7 = [-11747,12,37403,-256];
        [-1010947188,15,-2147483648];
        [5,10];
        return v7;
    }
    static {
        const v11 = this.name;
        function F15(a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            const v19 = this?.constructor;
            try { new v19(0.29489550717955537, a17); } catch (e) {}
            try { this.constructor(0.6822080711934364, this); } catch (e) {}
            try {
                this.f = 3.0;
            } catch(e22) {
            }
        }
        this.toString().lastIndexOf(v11);
    }
    static #d = 0.870344940915349;
    static #b = 1000.0;
    d = "isConcatSpreadable";
    static a;
}
const t31 = 1000.0;
const v25 = new t31();
const v26 = new C3();
const v27 = new C3();
class C29 extends C3 {
    constructor(a31, a32) {
        super();
        let v33 = 0;
        do {
            v33++;
        } while ((() => {
                const v39 = v33 < 10;
                const v41 = new Uint8Array();
                const v43 = new Uint32Array();
                function f44(a45, a46, a47, a48) {
                    a45.g = v43;
                    const v49 = a47 % a47;
                    const o55 = {
                        "b": a45,
                        ...v41,
                        n(a51, a52) {
                            const o54 = {
                                [a46]: Uint8Array,
                            };
                            v43[a45] = v43;
                            return v49;
                        },
                    };
                    const t17 = o55?.b;
                    const v57 = new t17(a47, v49);
                    return v57;
                }
                return v39;
            })())
    }
    #b = v25;
    #a;
}
const v58 = new C29(v26, v26);
const v59 = new C29(v27, v27);
new C29(v59, v59);
function F61(a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v25;
    } catch(e66) {
    }
    try {
        this.h = v59;
    } catch(e67) {
    }
}
new F61(C29, v25, F61);
const v69 = new F61(v58, v25, v59);
new F61(v25, v59, v69);
const v71 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v72 = /\c4a.[(x)(x)(x)\4*(x)(x)(x)\3*]/gmy;
const v73 = /G(a)\1a+8?/vdimsy;
const v74 = [Infinity];
try { v74.pop(); } catch (e) {}
const v76 = [2.2250738585072014e-308,1.949684848262672,4.0];
function f77() {
    return f77;
}
function f78(a79, a80) {
    a80.then = f77;
    return a80;
}
try { v76.push(v71); } catch (e) {}
const v83 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0])?.toStringTag;
let v84;
try { v84 = new v83(); } catch (e) {}
let v85 = -198895178;
v85 | v85;
24356 % 24356;
class C89 {
    static #n(a91, a92) {
        function F93(a95, a96, a97, a98) {
            if (!new.target) { throw 'must be called with new'; }
        }
        v73[243] -= v84;
        ++v85;
        F93(v72);
    }
}
