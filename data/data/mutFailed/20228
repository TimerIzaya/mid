class C3 {
    valueOf(a5) {
        try { ("description").charAt(this); } catch (e) {}
        const v7 = ("n")[5];
        try {
            super.toString("description", v7, v7);
        } catch(e9) {
        }
        return "description";
    }
    #e = "n";
    constructor(a11, a12) {
        if ("getOwnPropertyDescriptors" >= a12) {
            this.h;
        } else {
            try {
                a12.valueOf = "n";
            } catch(e15) {
            }
        }
    }
}
new C3("getOwnPropertyDescriptors", "getOwnPropertyDescriptors");
new C3("description", "description");
new C3("description", "description");
let v23 = 4294967297;
for (let v29 = 0; v29 < 5; v29++) {
    function f30() {
        const v32 = /X(?:a+){0,0}Ta|b/gvsy;
        const v33 = /z(ab)\1a\sc/uy;
        /xyz{1,}/dy;
        f = "9007199254740992";
        const v35 = v32.compile(v32, v33, v33, v29);
        ("Vre").charAt(v29).lastIndexOf();
        const v39 = new Float32Array();
        v39 & v35;
        Object.defineProperty(C3, 0, { configurable: true, enumerable: true, set: f30 });
        v23 /= 2088978784;
        new Set();
        function f43() {
            return v39;
        }
        const o51 = {
            [-4294967297n](a45, a46, a47, a48) {
                eval();
            },
        };
        return o51;
    }
    f30();
    %OptimizeFunctionOnNextCall(f30);
}
