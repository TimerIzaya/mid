const v2 = new Uint8Array(16);
const v5 = new Float32Array(0);
const v8 = new Uint16Array(15);
try {
    v8.length = 0;
} catch(e10) {
}
function f11(a12, a13, a14, a15) {
    const o36 = {
        set f(a17) {
            super.f = this;
            v2 < Float32Array ? v2 : Float32Array;
        },
        set d(a21) {
            function F22(a24, a25) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = 16;
                } catch(e26) {
                }
                try {
                    this.b = a13;
                } catch(e27) {
                }
                try {
                    this.c = Float32Array;
                } catch(e28) {
                }
                var b = 0;
                Uint8Array instanceof Float32Array;
            }
            new F22(a14, 15);
            new F22(a13, a13);
            new F22(a21, 0);
        },
    };
    return o36;
}
const v37 = f11(16, 0, 16, 16);
f11(15, 0, 16, 0);
const v39 = Uint8Array(16, 0, 15, 16);
0 - v37;
v5[3273205561] = 0;
Object.defineProperty(v39, "d", { configurable: true, enumerable: true, get: f11, set: v5 });
try {
    new Uint16Array(v5);
} catch(e42) {
}
new Array(1024);
function f46() {
    const o47 = {
    };
    const v48 = o47.constructor;
    v48();
    return v48;
}
%PrepareFunctionForOptimization(f46);
f46();
%OptimizeFunctionOnNextCall(f46);
f46();
