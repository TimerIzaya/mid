function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7() {
        const v9 = [];
        try { v9.flat(4096); } catch (e) {}
        return -24966;
    }
    this.toString = f7;
    try {
        this.g = a5;
    } catch(e11) {
    }
}
new F3(536870912, -51296);
const v13 = new F3(-51296, -51296);
new F3(536870912, 536870912);
const v17 = new Set();
class C18 {
    e;
    constructor(a20, a21, a22) {
        for (const v23 in this) {
            let v24;
            try { v24 = this.valueOf(a20, Set, -24966, v23, this); } catch (e) {}
            function f25(a26, a27) {
                return a26 && Float64Array;
            }
            v24.valueOf = f25;
            this & v24;
        }
    }
    [v13] = v17;
    static [-24966] = Set;
    static 14 = v13;
}
function f34(a35) {
    const o36 = {
    };
    return o36;
}
Object.defineProperty(C18, "toString", { writable: true, enumerable: true, value: f34 });
const v37 = new C18(-24966, 536870912, 536870912);
const v38 = new C18(-24966, -24966, v17);
new C18(536870912, -24966, null);
-24966 instanceof C18;
v37[2712034435];
Math.hypot(2);
const v49 = v38 / C18;
const v50 = Math.ceil(v49);
const v51 = -(-1.0);
~v38;
v49 ^ -v51;
const v55 = new Uint8Array(891);
function F56() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v58 = 0; v58 < 50; v58++) {
        v58 << v58;
        for (let v60 = 0; v60 < 25; v60++) {
            this["p" + v60] = v60;
        }
    }
}
new F56();
new F56();
let v65 = 3;
new Float64Array(v65);
Float32Array[0] = v37;
const v70 = new Float32Array(129);
class C71 extends Float32Array {
    [v55];
    n(a73, a74, a75) {
        function F76(a78, a79, a80, a81) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a81;
            } catch(e82) {
            }
            try {
                let v83 = v70[v50];
                v83 = a79;
                v65 = a79;
                Math.sign(-65535);
                Math.cosh(v83);
                let v89 = +v83;
                ++v89;
                this.e = a79;
            } catch(e91) {
            }
            try {
                this.g = a80;
            } catch(e92) {
            }
        }
        new F76(a75, a75, v65, 129);
        new F76(129, a74, a74, v65);
        new F76(v65, a74, v65, 891);
        return a75;
    }
}
new C71();
new C71();
new C71();
const v100 = new Float32Array(Float32Array);
for (let v101 = 0; v101 < 25; v101++) {
    function f102(a103, a104, a105, a106) {
        a103[1];
        for (let v109 = 0; v109 < 5; v109++) {
        }
        const v111 = arguments.__lookupGetter__;
        try { v111.constructor(); } catch (e) {}
    }
    for (let v113 = 0; v113 < 10; v113++) {
        f102(v100);
    }
}
