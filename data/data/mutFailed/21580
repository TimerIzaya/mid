function f3(a4, a5) {
    const o9 = {
        n(a7) {
            Object.defineProperty(this, a4, { configurable: true, value: a7 });
            try {
                a5.g = a4;
            } catch(e8) {
            }
            return this;
        },
        ...a5,
        "c": a5,
    };
    return o9;
}
const v11 = f3(50046n, f3(-1n, 50046n));
f3(10000n, 50046n);
const v17 = new BigInt64Array(-65536, v11);
let v18 = -1024;
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    function f25(a26) {
        return a21;
    }
    this.constructor = f25;
}
const v27 = new F19();
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v29 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
}
class C35 {
}
const v37 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v38 = [601759695];
for (let v40 = 0; v40 < 5; v40++) {
    function f41() {
        const v46 = Array();
        try { v46.findLast(v17); } catch (e) {}
        v46.unshift();
        Set.toString();
        const v51 = new Set();
        try { v51.add(v46); } catch (e) {}
        function F53(a55, a56) {
            if (!new.target) { throw 'must be called with new'; }
            F53();
        }
        try {
            v28.forEach(Float64Array);
        } catch(e59) {
        }
        try { new Symbol(v28, F19); } catch (e) {}
        class C62 {
        }
        try { new C62(); } catch (e) {}
        const v64 = new C62();
        const v65 = v64.e;
        try { new v65(); } catch (e) {}
        try {
            v64.__proto__ = F31;
        } catch(e67) {
        }
        const v68 = Symbol.toPrimitive;
        const o72 = {
            toString(a70, a71) {
                return F19;
            },
        };
        try { o72.toString(Float64Array, Float64Array); } catch (e) {}
        const o94 = {
            [522675525n](a76, a77) {
            },
            "c": v38,
            tan(a79, a80) {
                return Symbol;
            },
            [-4294967297n](a82, a83, a84, a85) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v37,
            ...v27,
            [v68]() {
            },
            "type": C35,
            valueOf(a88, a89) {
                return v37;
            },
            4: "Vre",
            toString(a91, a92, a93) {
                return BigInt64Array;
            },
        };
        new Float32Array();
        v18 %= -268435456;
        const v97 = new Uint32Array(v29);
        function f98(a99, a100) {
            o72.g /= v40;
            return v40;
        }
        v97.toString = f98;
        try { v97.join(v97); } catch (e) {}
    }
    f41();
    %OptimizeFunctionOnNextCall(f41);
}
