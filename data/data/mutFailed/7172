new Set();
function f3(a4, a5) {
    a5[1] = Set;
    return a4.lastIndexOf();
}
WeakMap[Symbol.toPrimitive] = f3;
function f10(a11) {
    try {
        a11.toString = a11;
    } catch(e12) {
    }
    return a11;
}
WeakMap.valueOf = f10;
const v13 = new WeakMap();
let v14;
try { v14 = v13.has(WeakMap); } catch (e) {}
new Uint8Array(3063);
const v20 = Uint8Array.length;
const v21 = new Uint8Array(129);
v21.toString = f10;
const v24 = new Int16Array(0);
function f25() {
    return Symbol;
}
Object.defineProperty(v24, "constructor", { configurable: true, get: f25 });
try { v24.subarray(0, 0); } catch (e) {}
const v29 = new Float32Array();
function f30(a31) {
    let v33 = -4096;
    let v34 = --v14;
    v34++;
    v33++;
    Math.sinh(v14);
    return Math.atan(v34);
}
v29[Symbol.toPrimitive] = f30;
v29.constructor = v20;
let v41;
try { v41 = v29.subarray(v14, v21); } catch (e) {}
Uint8Array.prototype = Uint8Array;
const v43 = new v41(268435440);
new Uint8ClampedArray(129);
v43[6] = v29;
