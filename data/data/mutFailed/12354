256 - 256;
new SharedArrayBuffer(256);
const v9 = new Float64Array(3547);
try { v9.fill(256); } catch (e) {}
try { BigUint64Array.bind(10); } catch (e) {}
new BigUint64Array(127);
[2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
class C16 {
    constructor(a18, a19) {
        const v20 = this?.h;
        try { new v20(a18, a18); } catch (e) {}
    }
}
let v23;
try { v23 = C16(256, Float64Array); } catch (e) {}
const v24 = new C16();
v24.length = v23;
v24.length = v24;
const v25 = new C16();
function f26(a27) {
    class C28 {
    }
    const v29 = new C28();
    const t23 = v29.constructor;
    new t23();
    return v29;
}
v25.toString = f26;
new C16();
[];
const v37 = [];
function f38() {
    const v39 = v37[f26];
    let v41;
    try { v41 = v39["normalize"]("normalize", "normalize", "normalize"); } catch (e) {}
    return v41;
}
v37.toString = f38;
-1557853178 - -1557853178;
v25 << -1557853178;
[3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f46(a47, a48) {
    return f46;
}
const v49 = f46();
const v52 = new Set();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = f46;
    try {
        this.__proto__ = a55;
    } catch(e57) {
        for (let [v58,v59] of a55) {
            class C60 {
            }
            const t55 = C60().g;
            t55.length = 1;
            v52.values();
        }
    }
    try {
        this.h = v52;
    } catch(e65) {
    }
    try {
        const v66 = v52[this];
        try {
            new F53(v66, -2046072084n);
        } catch(e69) {
        }
        this.b = Set;
    } catch(e70) {
    }
}
const v71 = F53?.constructor;
try { new v71(v37); } catch (e) {}
const v73 = new F53();
let [v74,,...v75] = v52;
v75[Symbol.toPrimitive] = v49;
v73.toString = v75[Symbol.toPrimitive];
new F53();
const v83 = new Float32Array();
for (const v84 of v83) {
    function F85(a87, a88) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v84;
        const v89 = [];
        v89.toString = [v89];
        const v92 = (2136873598).constructor;
        const v93 = v92(v92, v92);
        try { v93.toFixed(v89); } catch (e) {}
    }
    new F85();
}
Array();
