class C3 {
    set a(a5) {
        function f6(a7) {
            return a5;
        }
        class C8 extends f6 {
            static set e(a10) {
                Math.acos(C8);
                const v14 = -1909895234;
                Math.asin(C8);
                Math.sin(1909895234 / 1909895234);
                Math.tanh(v14);
            }
            [255];
        }
    }
    static [-65535] = 255;
    ["8P"];
}
C3.d = C3;
const v19 = new C3();
v19[7] = 255;
Object.defineProperty(v19, "length", { writable: true, value: C3 });
new C3();
new C3();
let v22 = 3646;
const v24 = [4096,4096,4096];
const v25 = new C3(4096, 4096, v24, v24);
const v26 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C27 {
}
const v28 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v29 = [601759695];
for (let v30 = 0; v30 < 5; v30++) {
    function f31() {
        Array().unshift();
        try {
            v26.forEach(Float64Array);
        } catch(e37) {
        }
        const o38 = {
            "c": v29,
            "arguments": v28,
            ...v25,
            "type": C27,
        };
        const v39 = [];
        function f40() {
        }
        v39[Symbol.toPrimitive] = f40;
        function F43(a45) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C46 extends F43 {
            valueOf(a48, a49, a50, a51) {
                super[this] = F43;
            }
        }
        const v52 = new C46();
        const o59 = {
            set g(a54) {
            },
            [v39](a56, a57, a58) {
            },
        };
        for (const v60 in o59) {
            try { v24.flat(4096); } catch (e) {}
            new C27();
            try { v52.valueOf(v60); } catch (e) {}
        }
    }
    f31();
    %OptimizeFunctionOnNextCall(f31);
}
v22++;
Symbol.length;
const v68 = Symbol.toPrimitive;
Symbol.for(v68.description);
const o92 = {
    [v68]() {
        const v73 = v19;
        -1000 ** 0.544190430081408;
        const v78 = [];
        class C79 {
        }
        const v80 = new C79();
        function F82(a84, a85, a86, a87) {
            if (!new.target) { throw 'must be called with new'; }
            const v88 = this?.constructor;
            try { new v88(a85, v78, -1263139894, a85); } catch (e) {}
            const v90 = a87?.constructor;
            try { new v90(v80); } catch (e) {}
        }
        return v22;
    },
};
const v94 = new Float32Array(v22);
const v97 = new Int8Array(1195);
v97[195];
new Int8Array(128);
try { new BigInt64Array(o92, o92, v94); } catch (e) {}
const v104 = new BigInt64Array();
Int16Array.length = Int16Array;
new Int16Array();
-124752769 >>> -124752769;
TypeError.length;
TypeError();
class C114 {
    toString(a116, a117, a118, a119) {
        try { this["throw"](); } catch (e) {}
        [-6.672391061426152e+307];
        const v126 = new Uint8Array(512);
        eval.bind();
        const v129 = eval();
        ("by").normalize();
        class C134 {
            #m(a136, a137) {
                class C138 {
                    e;
                }
            }
        }
        Math.atan(1653620084);
        Math.log();
        const v141 = [17452,4294967295,64,-8];
        try {
        const t0 = "throw";
        new t0(...v141, -1.6798118066934893e+307);
        } catch (e) {}
        new Uint8ClampedArray(798, ...v126, v129);
    }
    constructor(a146, a147) {
        const v149 = ["boolean","boolean"];
        function F150() {
            if (!new.target) { throw 'must be called with new'; }
            const v152 = this.constructor;
            try { new v152(v149, v152, "boolean", v152); } catch (e) {}
            try {
                this.d = v149;
            } catch(e154) {
                class C156 {
                    static [Set] = "boolean";
                }
            }
        }
        this.toString = Symbol;
        try { new a146(v104, TypeError); } catch (e) {}
        for (let i = 0; i < 5; i++) {
            this[this];
        }
        v19[7] ||= a146;
        try {
            v19.length = 235;
        } catch(e160) {
        }
    }
}
new C114(C114);
class C163 extends WeakMap {
}
try { new C163(); } catch (e) {}
class C165 {
}
C165.name = C165;
try { C165.call(); } catch (e) {}
function f168(a169, a170) {
    const o176 = {
        toString(a172, a173, a174) {
            try {
                a172.f = 536870888n;
            } catch(e175) {
            }
            return 536870888n;
        },
    };
    return o176;
}
