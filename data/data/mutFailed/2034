new Uint16Array(128);
new Float32Array(Uint16Array);
let v6 = 2690;
new Uint16Array(v6);
[0.9708993285586652,884328.0495979532];
[-8.794087486294885,1e-15,0.0,-7.087053224828324,-1e-15,1.3706550218008582e+308];
const v11 = [NaN,-1.7976931348623157e+308,1000000.0,333.4706571088532,-3.0];
class C15 {
    static {
        const v21 = [65537,268435441,63298,-5,1235122603];
        const v22 = [128,215394418];
        let v23;
        try { v23 = this.entries(); } catch (e) {}
        const v24 = [-2,-4294967296,4294967297];
        function F25(a27, a28, a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            const v31 = this.constructor;
            try { v31(1024, 1024, v21); } catch (e) {}
        }
        const v33 = new F25(-714582153, F25, -714582153, v22);
        v33.length;
        const v35 = new F25(9, v33, 9, v24);
        v11.b = v35;
        const v36 = new F25(1024, v35, v24, v24);
        let v44;
        try { v44 = ("string").trimStart(); } catch (e) {}
        let v45 = -1;
        -35417 - -35417;
        class C48 {
        }
        function f49(a50, a51, a52, a53) {
            return v36;
        }
        f49(-9007199254740991, v44);
        v23[v35] ||= ([1024,19026,1125846339]).length;
        const o61 = {
            set b(a60) {
                v45 <<= v45;
            },
        };
        while (0 < C15, 0) {
            v6++;
        }
    }
}
