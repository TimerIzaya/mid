const v2 = new Int8Array(8);
let v4 = Uint8ClampedArray;
new v4(129);
function f6() {
    function f7(a8, a9) {
        v4 >>= v4;
    }
    new Promise(f7);
}
const v15 = f6();
const v16 = v15();
function f17(a18, a19, a20) {
}
f17(f17(v16, v16, v15));
new v16(257);
const v27 = new Uint32Array(Uint32Array, Uint32Array);
try {
    Object.defineProperty(v27, -5.0, { enumerable: true, value: Array() });
} catch(e31) {
}
const v35 = new Set();
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a38;
    } catch(e40) {
        for (let [v41,v42] of a38) {
            try {
                try {
                    const o43 = {
                    };
                    v2.map(f17, o43);
                } catch(e45) {
                }
            } catch(e46) {
            }
        }
    }
    try {
    } catch(e47) {
    }
    const v48 = v35[this];
    try {
        new F36(v48);
    } catch(e50) {
    }
}
new F36();
class C54 {
    static [0.3898257234007898];
    static {
        super.b = this;
        class C57 {
            constructor(a59) {
                try {
                    const o61 = {
                        get a() {
                            return a59;
                        },
                    };
                    o61.a = "byteLength";
                } catch(e62) {
                }
            }
        }
        new C57(C57);
        let {...v64} = this;
    }
}
class C65 {
}
new C65();
try {
    Uint32Array.length = 129;
} catch(e67) {
}
