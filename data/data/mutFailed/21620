new BigInt64Array(2195);
const v5 = new Float64Array(60);
new Uint32Array(413);
const v10 = new WeakSet();
class C11 {
    static #d;
    constructor(a13, a14, a15, a16) {
        this[3440492572] = WeakSet;
        413 < v5;
    }
    [2195] = BigInt64Array;
    o(a19, a20) {
        try {
            super.o(a20);
        } catch(e22) {
        }
        return 2195;
    }
    static #c = v10;
}
new C11(413, 60, 413, 413);
new C11(60, 2195, 60, 60);
new C11(413, 2195, 2195, 2195);
function F26(a28) {
    if (!new.target) { throw 'must be called with new'; }
}
const v29 = new F26();
function f30(a31, a32) {
    return F26;
}
v29.toString = f30;
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    a36[Symbol.toPrimitive] = f30;
    function f40(a41) {
    }
    Object.defineProperty(this, "g", { set: f40 });
    function f43(a44, a45, a46, a47) {
    }
    for (let v48 = 0; v48 < 25; v48++) {
        f43();
    }
    try {
        this.g = a36;
        Object.defineProperty(Float64Array, "valueOf", { enumerable: true, value: f43 });
        const v51 = Array(a37);
        function f52(a53, a54) {
            return Array / 60;
        }
        Object.defineProperty(v51, Symbol.toPrimitive, { configurable: true, value: f52 });
        v51[v51];
    } catch(e60) {
    }
}
new F33(v29, v29, v29);
new F33();
class C64 {
    constructor(a66) {
        ("valueOf").localeCompare(a66, "valueOf");
    }
}
new C64();
Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
("I").localeCompare();
