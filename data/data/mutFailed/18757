function F1(a3, a4) {
    if (!new.target) { throw 'must be called with new'; }
}
class C6 {
    e = 1.263848426042065;
}
let v7 = new C6();
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    a10.e;
    Number.isFinite();
    const v15 = this.constructor;
    try { new v15(v7); } catch (e) {}
}
class C19 {
    o(a21, a22) {
        v7 %= this;
        %VerifyType(super.g);
    }
    get e() {
        this.h += -1000000000000.0;
        [536870888,940900016,-14];
        [268435439,-1,-2147483648,-4294967295,1024,-6,5,-15,14];
        [-268435456];
        super[38778];
        return -1000000000000.0;
    }
    constructor() {
        super.f >>= this;
    }
    /*
    constructor(a37, a38) {
        function f39(a40) {
            const v41 = [6,268435440,13,1073741825];
            const o42 = {
                "c": v41,
            };
            for (let v43 = 0; v43 < 25; v43++) {
                o42["p" + v43] = v43;
            }
            return 1.263848426042065;
        }
        const o48 = {
            "type": "function",
        };
        new Worker(f39, o48);
    }
    */
    static d;
    #c = -1000000000000.0;
}
new C19();
new C19();
const o53 = {
    "maxByteLength": 536870889,
};
const o55 = {
    "type": "function",
};
new C19();
let v59 = -4294967295n;
v59--;
const v61 = /(?<a>.)\k<a>?/vdimsy;
v61.unicode = v61;
class C62 {
    constructor(a64) {
        function f65() {
            return f65;
        }
        f65[Symbol.toPrimitive] = f65;
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f65 });
    }
}
const t73 = -1000000000000.0;
t73.e = C62;
const v68 = new C62();
try { v68.length(); } catch (e) {}
const v70 = v68.length;
try { new v68(); } catch (e) {}
v61.exec(v70);
const v74 = new Int32Array();
const v75 = [1000000000.0,4.0,5.0,-6.555298893133851e+307];
v75[11] = -65535;
v75[11] = v74;
const v76 = /T/udims;
function f77(a78) {
    Float32Array();
    return v76;
}
