let v1 = new Set();
function f2(a3) {
    const o9 = {
        [Set](a5, a6) {
            v1 <<= a3;
            try {
                new Set(this);
            } catch(e8) {
            }
            return this;
        },
        "b": Set,
        __proto__: v1,
    };
    return o9;
}
const v10 = f2(f2);
const v11 = f2(v10);
const v12 = f2(Set);
function f13(a14, a15, a16) {
    const o25 = {
        toString(a18, a19, a20, a21) {
            const v22 = new f2(a21, a20, a19, a18);
            const v23 = this % v22;
            let v24;
            try { v24 = new a18(a21, v23, v23, a14); } catch (e) {}
            a18[7] %= v23;
            v12[v1] = v24;
            return a15;
        },
        ...v12,
        __proto__: a14,
    };
    return o25;
}
f13(v10, v1, v11);
const v27 = f13(v10, v10, Set);
f13(v10, v27, f2);
const v32 = new Int8Array();
for (const v33 in v32) {
}
const v34 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v35 = [601759695];
const v36 = [1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    function f44() {
        const o53 = {
            "e": -4294967295,
            ...v34,
            84: arguments,
            ..."Vre",
            set b(a48) {
            },
            ["Vre"](a50, a51) {
                super[f44];
            },
        };
        return a39;
    }
    class C55 extends Float32Array {
        constructor(a57, a58, a59) {
        }
    }
    f13(v11, a39, v27);
    +v1;
    f44();
    %OptimizeFunctionOnNextCall(f44);
    let v67;
    try { v67 = v36[a41](..."find", a42, ...v35, ...v36, ...522675525n); } catch (e) {}
    v67 <= a41;
    return arguments;
}
try { f38(964598.6714444079, 964598.6714444079, 964598.6714444079, v35); } catch (e) {}
let v72 = 5;
-9 >>> -9;
const v75 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v76 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v76.map(1.0); } catch (e) {}
const v79 = Symbol.species;
v75[v79] = 8.580387257773513;
const v81 = ~268435440;
Uint8Array.length;
new Uint8Array(268435440);
v79.description = 964598.6714444079;
v72 = -15;
const v87 = new Int8Array(8);
[v87];
v35 - 522675525n;
Reflect.construct(Int8Array, [v35,v81,268435440], Int8Array);
try {
    v79.h = v27;
} catch(e94) {
}
995 | 995;
const v97 = new Uint8ClampedArray(995);
const v99 = new Int8Array(v97);
const v100 = v99.copyWithin;
v100.name = v100;
for (let v101 = 0; v101 < 32; v101++) {
    v75[-2] = -9 << v101;
    const v103 = v76[v79];
    try {
        v103.__proto__ = v103;
    } catch(e104) {
        e104.g = e104;
    }
    const v106 = new Uint8ClampedArray();
    v106.byteOffset;
    Math.sin(/c(?:ab)|cde/vdmy.exec());
    const v113 = "object" + v101;
    const v114 = v113?.trim;
    try { new v114(); } catch (e) {}
    v76[v113] = v101;
}
const v116 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F117(a119, a120, a121, a122) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a119;
}
const v123 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C125 {
    static #e;
    m(a127, a128, a129, a130) {
        v123.#e;
        a128.#e = -1;
    }
}
let v133 = 0;
v133 & v133;
do {
    break;
    v116[Symbol.asyncIterator] = v75;
    v133++;
} while (v133 < 9)
Uint8ClampedArray.name;
const v143 = new Uint8ClampedArray(995);
new Int8Array(v143);
const v148 = new Float64Array(Float64Array, Float64Array);
class C149 extends Int16Array {
}
const v150 = new C149();
const o151 = {
    __proto__: v150,
};
try { v148.every(o151); } catch (e) {}
