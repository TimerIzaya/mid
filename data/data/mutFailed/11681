[];
const v1 = [10000];
const v3 = new Float32Array(v1);
const v4 = [];
for (let v5 = 0; v5 < 25; v5++) {
    function f6(a7, a8, a9, a10) {
        const v13 = new Float32Array(v1, a10);
        v13.constructor = f6;
        function f15() {
            return a7;
        }
        try { new Date(v1, v5, 84, f6, v5); } catch (e) {}
        const v18 = new Date();
        Object.defineProperty(v18, "defineProperty", { writable: true, enumerable: true, value: v18 });
        const v19 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
        try { new Proxy(v4, a10); } catch (e) {}
        const v22 = new Proxy(v19, v18);
        v22[0] = v22;
        const o23 = {
            __proto__: v22,
        };
        o23[2] = o23;
        class C25 extends v13.constructor {
        }
        function f26(a27, a28) {
        }
        try { f26(f6, v5); } catch (e) {}
        %OptimizeFunctionOnNextCall(f15);
        const o30 = {
            __proto__: arguments,
        };
    }
    f6[Symbol.toPrimitive] = f6;
    for (let v33 = 0; v33 < 5; v33++) {
        f6();
    }
}
function f37(a38, a39) {
    const v40 = [];
    const v41 = [v40,v40,v40,v40];
    const t40 = [v40,v41,v41,v41];
    t40.length = 2;
    return v3;
}
Object.defineProperty(Float32Array, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f37 });
new Float32Array(2);
new Int32Array(1291);
new Uint16Array(512);
("setUTCMinutes").toUpperCase();
const v57 = ([927716.746385878]).indexOf;
try { v57(); } catch (e) {}
-2.220446049250313e-16 ^ -2.220446049250313e-16;
"number" == "number";
class C66 {
}
C66.prototype = C66;
const v67 = new C66();
const v68 = v67?.constructor;
Array(4087);
class C72 {
}
const v73 = new C72();
v73 << -1557853178;
try { new v68(); } catch (e) {}
const v77 = [v67,v67,v67];
try { v77.toString(); } catch (e) {}
const v79 = [C66,C66,C66];
v79.toString = Symbol;
const v80 = [-2.220446049250313e-16,v79];
Object.defineProperty(v80, "p1", { writable: true, configurable: true, enumerable: true, value: v80 });
v80[1];
const v82 = ("number").slice(v79, v67);
try { ("trimEnd").search(v77); } catch (e) {}
const v85 = ("1G")["trimEnd"]();
for (let v86 = 0; v86 < 5; v86++) {
    v80["p" + v86] = v86;
}
try { v85.at(Float32Array); } catch (e) {}
function f90(a91, a92, a93) {
    a91.toString = Array;
    try { a91.toString(); } catch (e) {}
    const o95 = {
        ...a93,
        268435441: v67,
    };
    return o95;
}
const v96 = f90(v77, v82, v80);
v96[268435441] = v96;
f90(v85, v85, v96);
