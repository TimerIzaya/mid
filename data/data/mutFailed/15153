class C5 {
    get e() {
        try {
            super.setHours(this, this, 2.9788133947234406e+306, this, "MV");
        } catch(e8) {
        }
        return ("MV").__proto__;
    }
    static #f = 2.9788133947234406e+306;
    static 8;
    static #b;
    e = 2.9788133947234406e+306;
    static 65535 = 1e-15;
}
const v10 = new C5();
try { (2.9788133947234406e+306).toLocaleString(); } catch (e) {}
const v12 = new C5();
const v13 = new C5();
v13.e = v13;
1024 + 1024;
const v18 = new Date(-4.0);
128 >> 128;
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = (5)?.constructor;
    try { new v27(-195224844, Date); } catch (e) {}
    -v10;
    a26 >> a26;
}
new F23(5, 5);
let v34;
try { v34 = Array.bind(-195224844); } catch (e) {}
const v36 = [1024];
const v37 = Reflect.construct(Date, v36, v34);
let v38;
try { v38 = v37.toJSON(1024); } catch (e) {}
const v39 = v18[v36];
const v42 = new Uint8Array(10);
let v43;
try { v43 = v42.reduce(129); } catch (e) {}
function f44() {
    let v47 = -65535;
    v47 >>> v47;
    const v49 = v47 / v47;
    v49 % v49;
    const o93 = {
        next() {
            try { v38.next(); } catch (e) {}
            const v53 = v47--;
            v53 | v53;
        },
        m(a56) {
            try { a56.next(); } catch (e) {}
            const o58 = {
            };
            try {
                o58.e = v47;
            } catch(e59) {
                const v63 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v63, o58);
            }
            try { v39["getDate"]("", Float64Array); } catch (e) {}
            try {
            } catch(e67) {
            }
            try { ("EV").search("symbol"); } catch (e) {}
            let v70;
            try { v70 = ("EV").link(v49); } catch (e) {}
            let v71 = 0;
            class C72 {
                o(a74, a75, a76, a77) {
                    return v71;
                }
            }
            v42.g = C72;
            const v80 = new Int8Array(3938);
            let v81 = 3;
            v81--;
            let v84 = 0 >> 0;
            ~v84;
            [...v81] = v80;
            try {
                let v86 = 0;
                v86 >>> v86;
                do {
                    ({"c":v43,"d":v71,...v84} = v70);
                    v86++;
                } while (v86 < 5)
                const o91 = {
                };
                o91.c = o91;
            } catch(e92) {
            }
        },
    };
    try { o93.m(o93); } catch (e) {}
    class C96 {
    }
    try { new C96(); } catch (e) {}
    const v98 = new C96();
    const v99 = v98?.constructor;
    try { new v99(); } catch (e) {}
    const v102 = new Float32Array(v98, "nt", Float32Array);
    const t103 = "nt";
    const v103 = delete t103[v102];
    let v104;
    try { v104 = v98.floor(v103); } catch (e) {}
    for (const v105 in v104) {
    }
}
f44.caller = f44;
f44();
f44();
function f108(a109, a110, a111, a112) {
}
function f113(a114, a115) {
    const o118 = {
        set b(a117) {
        },
    };
}
f113.arguments = f113;
function F119(a121, a122, a123) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e124) {
}
function f125(a126, a127, a128, a129) {
    a128.e = a128;
    const o138 = {
        "e": a129,
        [a129](a131, a132) {
            [2.0,-1.4136594990615852e+308,990839.6347160602];
            [1.7402501030817658e+308,0.4407518532850566];
            const o137 = {
                "execution": "async",
            };
        },
    };
    return o138;
}
f125.e = f125;
const v139 = f125(v13, v10, v13, v12);
v139.e = v139;
function f140(a141, a142, a143) {
    const o146 = {
        get c() {
            const o145 = {
            };
        },
    };
}
f140.length = f140;
function f147() {
    const o150 = {
        set e(a149) {
        },
    };
}
class C151 {
}
C151.prototype = C151;
function f153() {
    return "symbol";
}
[488377.59735962795,-1e-15,-2.0,-2.2250738585072014e-308,-2.2250738585072014e-308,3.6042447008365066];
[357912.78893197514,934.1194665621135,-5.0,4.503001149985243e+307,132.693026250324];
[918371.5681374874,203.7225333383035,-709.4772725465527,0.7671047739569937,1.6676510375963023,1000000.0,4.742632022863681,5.117168821240081e+307];
-(-11n);
let v164 = 333;
const v165 = [-9007199254740992,-9,268435441,-1294677798];
const v166 = [-54512,-2147483647,24944,7,268435439,4096,-6];
class C167 {
}
const o169 = {
};
gc(o169);
new C167();
new C167(v165, v166);
const v174 = [1073741824,1073741823,1376142744,1073741825];
function f175(a176, a177, a178, a179) {
    let v180 = a178 && a178;
    arguments[3] = arguments;
    ({"h":v180,"length":a176,...v164} = v174);
    !("find").startsWith(a179);
    for (let v185 = 0; v185 < 5; v185++) {
        v185++;
    }
}
try { f175.toString(); } catch (e) {}
for (let v188 = 0; v188 < 5; v188++) {
    f175();
}
f175();
%OptimizeFunctionOnNextCall(f175);
const t196 = -4.0;
t196();
