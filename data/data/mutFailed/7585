const v2 = new Array(256);
class C3 extends Array {
    static 4096;
    static #c;
    constructor(a5) {
        super(256);
        const v6 = this instanceof a5;
        super[256] = v6;
        const v7 = new Array(256);
        [v6,256];
        [[v7,Array,v7,v2],a5];
    }
    #d = Array;
    [256] = Array;
}
function F11() {
    if (!new.target) { throw 'must be called with new'; }
}
new Int8Array(256);
const v16 = new C3(v2);
const v17 = new C3(Array);
let v18 = new C3(C3);
function f19(a20, a21) {
    const o30 = {
        "c": C3,
        "d": a20,
        [a20](a23, a24, a25) {
            v18 = v17;
            for (let v26 = 0; v26 < 100; v26++) {
                Array(256);
            }
            try {
                super.catch(a24, a21);
            } catch(e29) {
            }
            return a21;
        },
    };
    return o30;
}
f19(v16, C3);
f19(v17, 256);
f19(v18, v16);
function f37() {
    for (const v41 of Array(4087, Array, Array)) {
    }
    return f37;
}
%PrepareFunctionForOptimization(f37);
f37();
%OptimizeFunctionOnNextCall(f37);
f37();
