const v6 = /7(?: foo )/gvdims;
const v7 = /m8B/imy;
const v8 = /1a\fb\nc\rd\te\vf/gdisy;
class C9 {
    h;
    static toString(a11, a12, a13, a14) {
        try {
            class C15 {
            }
            new C15();
            const v17 = [-392.0576825237305,0.3449869706009556,4.447039970507995e+307,-5.063798246562485e+307,-568.9796177589394,388231.4033702491,-3.5365646375454567,0.12172568971863451,-4.474791203319841e+307];
            const v20 = ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648],v17];
            const o21 = {
                "arguments": v20,
                "type": "function",
            };
            super.o(this, a12, a11, 1073741824n);
        } catch(e23) {
            const o24 = {
            };
            try {
                o24.g = 1073741824n;
            } catch(e25) {
            }
            try {
                const o26 = {
                };
                o26.g = 1073741824n;
                o26.e = e23;
            } catch(e27) {
            }
            try {
                const o29 = {
                    get d() {
                        return v7;
                    },
                };
                o29.g = 1073741824n;
                o29.e = e23;
                o29.b = -2n;
            } catch(e30) {
            }
            try {
                const o31 = {
                };
                o31.g = 1073741824n;
                o31.e = e23;
                o31.b = C9;
            } catch(e32) {
            }
        }
        return -2n;
    }
    g = v6;
    [-2n] = v7;
    constructor(a34, a35) {
        this.length = a34;
        this.g;
        try { ("").sup(); } catch (e) {}
        eval(a34);
    }
    static #c = 1073741824n;
    #a = 6n;
    static #h;
    toString(a44, a45) {
        function f46() {
            return [this];
            return 6n;
        }
        this.toString = f46;
        this.constructor(a44);
        -this;
    }
    static get c() {
    }
}
const v51 = new C9();
v51.length = v8;
const v52 = new C9();
const v53 = new C9();
function F54(a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    function f59() {
        let v62 = -1;
        0.8433920164332442 ^ 16;
        Math.cbrt(v62);
        Math.floor(0.8433920164332442);
        v62--;
        return Math.random();
    }
    a56.valueOf = f59;
    function f69() {
        return f59;
    }
    Object.defineProperty(a57, "toString", { writable: true, configurable: true, get: f69 });
    a56.length = a56;
    try { new Int8Array(v8, v8, v8); } catch (e) {}
    const v72 = new Int8Array();
    const v73 = v72.buffer;
    try { v73.slice(v52, v52); } catch (e) {}
    v73.slice(a57, a57).transferToFixedLength().byteLength;
}
const v78 = F54?.constructor;
try { new v78(v53); } catch (e) {}
const v80 = new F54(F54, F54, F54);
const v81 = v80?.constructor;
try { new v81(v51, 9n, v7); } catch (e) {}
