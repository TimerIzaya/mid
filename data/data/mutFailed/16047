const v0 = [];
const v1 = [-745115192,536870912,4,129,1364,-129771852,1073741825];
const v2 = [-536870912];
const v3 = [2,-3];
function f4() {
    return v0;
}
const v5 = [5,-1,4,9007199254740992,65537,-1,536870912];
const v6 = [16,-65536,-61881,16,268435441,12432,-12];
const v7 = [-60109,-811436913,2147483647];
function f8(a9) {
    function F10(a12, a13) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a12;
        } catch(e14) {
        }
        try {
            this.f = a12;
        } catch(e15) {
        }
    }
    new F10(v1, v6);
    new F10(v0, v3);
    new F10(v5, v5);
    return F10;
}
v7[Symbol.toPrimitive] = f8;
class C21 {
    [v7] = v2;
    5;
    toString(a23, a24) {
        try { v3.toReversed(); } catch (e) {}
        const o26 = {
        };
        try {
            o26.b = a23;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.b = a23;
            o28.e = a24;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.b = a23;
            o30.e = a24;
            o30.f = a24;
        } catch(e31) {
        }
        try {
            const o32 = {
            };
            o32.b = a23;
            o32.e = a24;
            o32.g = v1;
        } catch(e33) {
        }
        return a23;
    }
}
const v34 = new C21();
new C21();
const v36 = new C21();
function f37() {
    return v1;
}
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v34;
    } catch(e42) {
    }
    try {
        this.d = a41;
    } catch(e43) {
    }
    try {
        this.b = v0;
    } catch(e44) {
    }
}
new F38(v6, v0);
new F38(v6, v6);
new F38(v0, v36);
("by").normalize();
