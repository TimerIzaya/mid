9n >> 9n;
function f8(a9, a10, a11, a12) {
    const o13 = {
        "e": a10,
        [a11]: -58704,
    };
    return f8;
}
f8(-19647, -19647);
new Int8Array(10);
new BigUint64Array(4096);
new Int32Array(64);
class C23 extends BigUint64Array {
    static #f = BigUint64Array;
    static ["function"] = "function";
    static #a;
    static #m(a25, a26, a27, a28) {
        const o31 = {
            "maxByteLength": 2660,
        };
        Array(36862);
        [[1.0,-6.818981069405753e+307]];
        const v38 = new ArrayBuffer(2660, o31);
        new DataView(v38, 4096, a25);
        return v38;
    }
}
new C23();
new C23();
new C23();
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 5;
}
const v47 = new F44();
const v48 = new F44();
function f49(a50, a51) {
    const o53 = {
        "h": v48,
        6: v48,
        128: a51,
        "e": v47,
        0: "symbol",
        "type": "DrM3a",
        ...4096,
        get f() {
            return this;
        },
        __proto__: a50,
        "a": a50,
        ...a51,
    };
    return o53;
}
function f54() {
    return f54;
}
class C56 {
    ["DrM3a"] = "a";
}
new C56();
const v58 = f49();
const v59 = f49();
f49(v47, v59);
function f61() {
    return f49;
}
const v64 = new Float32Array(-37960);
const v66 = new Uint8Array();
for (const v67 of v64) {
    Object.defineProperty(v58, Float32Array, { configurable: true, enumerable: true, get: f49, set: f61 });
}
Object.defineProperty(v59, "e", { configurable: true, enumerable: true, set: f49 });
v66 instanceof f49;
