function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a5;
    } catch(e6) {
    }
    try {
        this.g = a5;
    } catch(e7) {
    }
}
const v8 = F3.prototype;
const v9 = new F3(1000000000000.0);
const v10 = new F3(-1000000000000.0);
function f11() {
    function f12(a13, a14) {
        try { v8(v10, v10, a14, 2.2250738585072014e-308, a13); } catch (e) {}
        return typeof 9007199254740990n === "object";
        return a14;
    }
    return f12;
}
function f20(a21) {
    new Int8Array(BigUint64Array);
}
Object.defineProperty(v10, Symbol.iterator, { enumerable: true, get: f11, set: f20 });
v10.h = v10;
const v27 = new F3(v9);
0n ^ 0n;
2372 >> 2372;
new Uint32Array(2372);
let v38;
try { v38 = new Float32Array(v10, 0n, 0n); } catch (e) {}
new Float32Array(257);
const v42 = Float64Array?.constructor;
try { new v42(Float64Array); } catch (e) {}
new Float64Array(58);
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    function f47() {
        return v38;
    }
    function f48(a49) {
        function f50() {
            const o51 = {
            };
            return o51;
        }
        f50();
    }
    Object.defineProperty(this, "h", { configurable: true, enumerable: true, get: f47, set: f48 });
    try {
        this.h = 268435439;
    } catch(e54) {
    }
}
const v55 = new F45();
const v56 = new F45();
const v57 = new F45();
function f58(a59) {
    const v60 = a59?.__defineSetter__;
    try { new v60(F45, f58); } catch (e) {}
    const o68 = {
        __proto__: a59,
        ...v57,
        valueOf(a63) {
            return v55;
        },
        ...a59,
        "a": a59,
        "b": F45,
    };
    return o68;
}
f58(v55);
const v70 = f58(v57);
try { v70.valueOf(F3); } catch (e) {}
const v72 = f58(v56);
/(ab)[U]/udmy;
const v74 = /2(?!(a))\18/giy;
v74.unicode = v74;
const v75 = /a[^a]/gms;
class C76 {
}
const v77 = new C76(v74);
function f78() {
    function f79() {
        return f79;
    }
    class C80 extends f79 {
    }
    class C81 extends C80 {
    }
    return v27;
}
v77.constructor = f78;
const v82 = v77?.constructor;
try { new v82(); } catch (e) {}
const v84 = new C76(v75);
const v85 = v84?.constructor;
try { new v85(); } catch (e) {}
4294967297n > 4294967297n;
3n >> 3n;
try { new Int8Array(8, 0n, F3); } catch (e) {}
new Int8Array(8);
Object.defineProperty(Float32Array, Symbol.toPrimitive, { value: f78 });
new Float32Array(3);
0 % 0;
const v104 = new BigInt64Array();
const o105 = {
    __proto__: v104,
};
try { o105.fill(o105, BigInt64Array); } catch (e) {}
Float32Array.toString = f20;
new Float32Array(0);
class C109 {
    constructor(a111) {
        this.constructor = f58;
        for (let v112 = 0; v112 < 32; v112++) {
            -v112;
            v112 === v112;
            for (let v115 = 0; v115 < 50; v115++) {
            }
            new Int8Array(520);
            for (let v119 = 0; v119 < 5; v119++) {
            }
            Math.PI;
            0 + 0;
            0 || Int8Array;
            Math.tanh();
            function f126() {
                return this;
            }
        }
    }
}
const o127 = {
};
o127.h = C76;
o127.h = o127;
const v128 = Float32Array & Float32Array;
v128 + v128;
const v130 = new C109();
const v131 = v130?.constructor;
try { new v131(3); } catch (e) {}
const v134 = async (a135, a136, a137) => {
    [v70,a135,F45,v72];
    return v77;
};
