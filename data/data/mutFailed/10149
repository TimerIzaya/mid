let v1 = -6.50438168344124;
v1 **= v1;
const v4 = Math.exp(10000);
new Uint16Array(0);
new Math(10);
try { Float64Array.bind(v4); } catch (e) {}
const v13 = new Float64Array(1220);
v13[527];
const v15 = [0.0,-1000000000000.0,-3.0,749126.7128474354,-3.0,-1e-15,1000000.0,5.0];
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    [[F16,F16,F16,F16,F16],1141300185,F16];
    [this];
    class C22 {
    }
    const v23 = [1.9600488149280893e+306,468.9269702772963];
    ([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(...v23);
    try {
        class C27 extends this.constructor {
            e = F16;
        }
        new C27();
    } catch(e29) {
    }
}
v15[1] = v15;
[1000000000000.0,1000000000.0,4.0,-1000.0,-905.1239196479155,1e-15,-1.0,-1000000000.0,0.0,1000000000000.0];
[3.0,-1000000.0];
0.8120722293718613 >>> 0.8120722293718613;
function f36(a37, a38, a39, a40) {
    a38 === a38;
}
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toLocaleString(); } catch (e) {}
    const v47 = this.constructor;
    let v48;
    try { v48 = new v47(); } catch (e) {}
    v48.constructor = f36;
    this.constructor;
    eval();
    class C52 {
    }
    new Int8Array(770);
    Int8Array();
}
new F42();
