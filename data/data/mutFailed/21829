const v8 = new Int8Array(1236);
const v11 = new Float64Array(1236);
const v16 = new Float32Array(9);
new Int8Array(v16);
const v19 = new Float32Array(2054);
new Date(Uint32Array);
("function").length;
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this.constructor;
    v31.e = v31;
    try { new v31(); } catch (e) {}
    this.g = -1;
    this.f = a30;
    this.h = Float64Array;
}
const t16 = -906893.3261047231;
const v34 = new t16();
function f35() {
    const v38 = new Uint16Array(3906);
    v38[1390] = v38;
    function f40(a41, a42) {
        const o48 = {
            "a": a42,
            [a41]: v34,
            [v34]: Map,
            ...v34,
            "b": a41,
            [a42]: Map,
            "h": a41,
            146: v34,
            valueOf(a44) {
                this || this;
                this.__proto__;
                new Map(this);
                return v8;
            },
        };
        return o48;
    }
    const v49 = f40(v34, f40);
    const v51 = f40(f40(v49, Map), v49);
    for (let v52 = 0; v52 < 79; v52++) {
        for (let v53 = 0; v53 < 100; v53++) {
            f40(v52, v52);
        }
        v51[512] = v52;
        [-0.0,1000000000000.0,737115.9869501861,NaN];
        [0.7909963851033462,-1000.0,0.6110844995665646,-0.0,-5.022618029066237,-113.75300559900211];
        [0.17979151957751893,-2.0,1000000000.0,1.0,-2.220446049250313e-16,-2.220446049250313e-16,1000000000000.0];
    }
    return Int32Array;
}
v34.constructor = f35;
try { F28(-143547321); } catch (e) {}
let v60;
try { v60 = F28.bind(-143547321); } catch (e) {}
let v61;
try { v61 = v60(-1517929768); } catch (e) {}
const v62 = new F28(-1);
const v63 = new F28();
v63.d = v63;
let v64 = new F28(-1);
v64.g = v64;
class C65 extends F28 {
    #p(a67, a68) {
        const v69 = v19?.[32];
        Object.defineProperty(v63, v62, { writable: true, configurable: true, value: F28 });
        a67.d = this;
        return v69;
    }
    [-1];
    static {
        this.n = F28;
        super[this];
        let v73;
        try { v73 = this["n"](); } catch (e) {}
        const o74 = {
        };
        v11.e = o74;
        function f75() {
            return f75;
        }
        const v77 = new Int16Array();
        v77.filter(f75);
        -1 | -1;
        try {
            const v83 = new Uint8ClampedArray(2147483647);
            function f84(a85) {
                return f84;
            }
            const v88 = [v83];
            const o89 = {
                "arguments": v88,
                "type": "function",
            };
            Worker(f84, o89);
        } catch(e91) {
        }
        const v92 = new Proxy(v64, o74);
        v92.f;
        v92.e = v92;
        for (let v94 = 0; v94 < 25; v94++) {
            const v95 = [601759695];
            const v96 = [1073741824,1073741823,1376142744,1073741825];
            function f97(a98, a99, a100, a101) {
                try { v96["find"](..."find", a101, ...v95, ...v96); } catch (e) {}
                const v106 = v61.isConcatSpreadable;
                const v107 = v106.description;
                const v108 = Array(a100);
                try { v108.groupToMap(v106, v107, f97, v108, v106); } catch (e) {}
                return v95;
            }
            for (let v110 = 0; v110 < 5; v110++) {
                f97();
            }
        }
        v64 = this;
        const o112 = {
            "e": v92,
            ...v73,
            65537: v62,
        };
    }
}
try { new v16(); } catch (e) {}
const v116 = new Int32Array(2);
v116.toSorted();
const v119 = ([-9007199254740992,9007199254740992,5,-65535,255,54003,-9007199254740991,4294967297,-55194,-110051879]).keys();
function f120(a121, a122, a123, a124) {
    function f125() {
        return a122;
    }
    const v127 = new Int8Array(a122, a121);
    const v128 = v127.entries;
    let v129;
    try { v129 = v128(); } catch (e) {}
    const v130 = [1840677197,-43868];
    const v132 = new Int8Array(6);
    for (const v133 in v132) {
        Object.defineProperty(v130, v133, { configurable: true, value: v119 });
    }
    return v129;
}
for (let v134 = 0; v134 < 5; v134++) {
    v134();
}
new C65();
const o138 = {
};
class C139 {
}
function f141(a142) {
}
Math.atan2(-0.0, -0.0);
Array(19793);
