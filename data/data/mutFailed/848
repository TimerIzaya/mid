const v1 = new Set();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    const o8 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o8);
    this.f = a4;
    try {
        this.f = a4;
    } catch(e10) {
    }
    try {
        this.e = a4;
    } catch(e11) {
    }
    try {
        this.c = a4;
    } catch(e12) {
    }
}
const v13 = new F2(v1);
const v14 = new F2(Set);
function f15(a16, a17) {
    const v19 = Symbol.iterator;
    const o28 = {
        [v19]() {
            let v21 = 10;
            const o27 = {
                next() {
                    v21--;
                    const v25 = v21 == 0;
                    const o26 = {
                        "done": v25,
                        "value": v21,
                    };
                    return o26;
                },
            };
            return o27;
        },
    };
    return F2;
}
v14.toString = f15;
const v29 = new F2(v14);
v29.toString = f15;
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    function f35(a36) {
        const o38 = {
            ..."1p",
        };
        const v40 = 28621 + 28621;
        const o41 = {
            ...o38,
        };
        o41.length = v40;
    }
    Object.defineProperty(this, "g", { set: f35 });
    const v43 = Symbol.toPrimitive;
    Object.defineProperty(a33, v43, { writable: true, value: f15 });
    a34.toString = f15;
    const v44 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
    const v48 = Array();
    function f49(a50, a51, a52, a53) {
        const o61 = {
            [-9007199254740991]: 512,
            [a52]: v44,
            [a53](a55, a56, a57) {
                return "cosh";
            },
            "b": a50,
        };
    }
    const v64 = new Uint32Array(2128);
    for (let v65 = 0; v65 < 100; v65++) {
        f49(512, v64, v64, v48);
    }
    try {
        this.g = a33;
        const o67 = {
        };
        Object.defineProperty(Float64Array, "valueOf", { enumerable: true, value: f49 });
        const v69 = Array(a34);
        let v70 = v69[v69];
        v70 = F30;
        512 !== a33;
        function f72() {
            return f72;
        }
        const o74 = {
        };
        o74.g = "max";
        v48 | Float64Array;
        const t95 = [Float64Array];
        t95.length = 2;
    } catch(e78) {
    }
    v14.f *= a32;
    v29.e;
    %VerifyType(v44);
    v13[v44] = Uint32Array;
    v43.description;
    try {
        Math.expm1(Math);
        Math.expm1(-366687.8544616379);
        this.e = a34;
    } catch(e86) {
        new Int32Array([-4563]);
        class C91 {
            [720972705n];
            #p(a93, a94, a95, a96) {
                super.m();
            }
        }
        new C91();
        function f99(a100, a101, a102) {
            return f99;
        }
    }
}
new F30(v14, v14, v14);
new F30(v13, v14, v14);
new F30(Set, v14, v29);
function F106(a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
}
const v110 = new F106();
const v113 = typeof v110 === "number";
-4294967296 >>> -4294967296;
const t130 = [];
t130[6] = 4294967295;
const v120 = new Int32Array(2890);
const v121 = [];
[v120,v121,v121,v121,v121];
Math.asinh(v113);
