const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    function f3(a4) {
        v0[F1];
    }
    Object.defineProperty(v0, "g", { configurable: true, set: f3 });
    try {
        this.a = v0;
    } catch(e6) {
    }
    try {
        this.f = v0;
    } catch(e7) {
    }
    try {
        Symbol.toStringTag;
        const v10 = [-6.078081144782104,3.0,-1000.0,4.739392359408212,-1.3763335971087312e+307,5.0,0.8267200417626637,276.24411996178765,2.2250738585072014e-308];
        v10.g = v10;
        for (let v11 = 0; v11 < 25; v11++) {
            v10["p" + v11] = v11;
        }
        this.g = f3;
    } catch(e14) {
    }
}
const v15 = new F1();
v15.length = F1;
new F1();
new F1();
new F1(v15);
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
try { ("bigint").match(v0); } catch (e) {}
const o27 = {
    __proto__: F20,
};
o27.d = o27;
const o31 = {
    set e(a29) {
    },
    get e() {
        return this;
    },
};
128n << "object";
4096n ^ 4096n;
7n / 7n;
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    a43.toString();
}
const v46 = F40?.constructor;
let v47;
try { v47 = new v46(F40); } catch (e) {}
new v47("p", 7n);
new Date(..."undefined");
class C52 {
    #valueOf(a54, a55, a56, a57) {
        this.#valueOf();
    }
}
try { C52.toString(); } catch (e) {}
