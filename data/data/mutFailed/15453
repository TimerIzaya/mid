const v0 = [];
let v1 = -268435456;
const v4 = [-9007199254740991,-36115,-521489454];
let v5;
try { v5 = v4.findLastIndex(8245); } catch (e) {}
const v6 = [-9,59401,14,9007199254740992,2,1000];
[-26176,-13292,1951020463,24566,670,129,56084,9007199254740992];
let v11 = v1 << 115394824;
Math.min(115394824);
const v13 = v11--;
--v1;
let v16 = -3.0;
v16--;
let v20 = Float32Array;
const v21 = new v20(1442);
v21.e = v21;
530 >>> 530;
v0.length;
v0.length;
v20 += v20;
v6[1073741824] >>>= -9007199254740990;
let v27 = 0;
while (v27 < 6) {
    let {"buffer":v30,"e":v31,"f":v32,} = v21;
    v32?.[5.2207847640247];
    v27++;
}
let [v35,v36,v37,v38] = v21;
const v39 = new Uint16Array(530);
const v42 = new Uint8ClampedArray(8);
try { v42.reverse(); } catch (e) {}
function f46(a47, a48, a49, a50) {
    try { a47.toString(); } catch (e) {}
    a47.prototype = a47;
    try { a47(a50); } catch (e) {}
    const v53 = a48 & Uint16Array;
    v53 / v53;
    const o58 = {
        n(a56, a57) {
            return a50;
        },
    };
    return Uint8Array;
}
v36 ^ v39;
v13 >>> v5;
const o63 = {
    "maxByteLength": 3473,
};
const v65 = new ArrayBuffer(3473, o63);
new Uint32Array(v65);
for (let v68 = 0; v68 < 500; v68++) {
    f46(Uint8Array);
}
