new Int16Array(3708);
~16;
const v6 = new Uint32Array(16);
4015 + 4015;
new Float64Array(4015);
function f11(a12, a13, a14, a15) {
    a12.length;
    a13 ^ a13;
    const o29 = {
        815: a15,
        "d": a14,
        [16](a19, a20, a21) {
            const o24 = {
                "maxByteLength": 1073741825,
            };
            const v26 = new SharedArrayBuffer(1024, o24);
            const v28 = new Uint8ClampedArray(v26);
            return v28;
        },
    };
    o29.valueOf = f11;
    return o29;
}
const v30 = f11(Uint32Array, 16, 3708, 3708);
f11(v6, 3708, 3708, 4015);
const v32 = f11(16, 3708, 16, 3708);
v32[815];
for (let v34 = 0; v34 < 14; v34++) {
    v32 << v34;
    -2070237581 - -2070237581;
}
function f40(a41, a42, a43, a44) {
    a41.valueOf = f40;
    function f45(a46) {
        try {
            v30.b = a41;
        } catch(e47) {
        }
    }
    Object.defineProperty(a42, "h", { enumerable: true, set: f45 });
    a42.h = a42;
    function f49(a50) {
        v32[8] = f45;
        return h;
    }
    arguments.valueOf = f49;
    function f52() {
        Math[Symbol.toPrimitive] = f45;
        try { Math.acos(a41); } catch (e) {}
        return Math.asin(Math);
    }
    %PrepareFunctionForOptimization(f52);
    f52();
    %OptimizeFunctionOnNextCall(f52);
    f52();
    return arguments;
}
f40.length;
const v61 = f40(f40, f40, f40, f40);
const v62 = v61.callee(v61, v61, v61);
v62[2] = v62;
