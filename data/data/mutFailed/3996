const v1 = new Map();
const v3 = new Set();
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a6;
    } catch(e7) {
    }
    try {
        this.c = Set;
    } catch(e8) {
    }
    try {
        this.d = a6;
    } catch(e9) {
    }
}
new F4(F4);
new F4(v3);
new F4(v1);
new Uint8Array(255);
const v18 = new Uint16Array(9);
new Uint8Array(182);
function F22() {
    if (!new.target) { throw 'must be called with new'; }
}
function f24(a25, a26) {
    139837843 in "deleteProperty";
    return v18;
}
const v31 = Symbol.toPrimitive;
F22[v31] = f24;
function f32(a33) {
    new BigUint64Array();
    const v36 = [-1.7976931348623157e+308,1.567547754457685];
    const v37 = /2a\sc/uds;
    Object.defineProperty(v37, 0, { configurable: true, enumerable: true, value: v36 });
    function f38() {
        try { v37.test(v37); } catch (e) {}
        const t39 = Array(11);
        t39.length |= 113;
        return 11;
    }
    v37[Symbol.toPrimitive] = f38;
    const v46 = /2(x)(x)(x)\3/dim;
    v46[Symbol.toPrimitive] = Symbol;
    function f49(a50) {
        v37[0];
        let v54;
        try { v54 = ("imul").padEnd(1073741824); } catch (e) {}
        return v54;
    }
    v46.valueOf = f49;
    /DIxJ0a[\cA]?/udy;
    const o60 = {
        [v37](a57) {
            try {
                super.m(this);
            } catch(e59) {
            }
            return v37;
        },
    };
    o60[Symbol.iterator] = Symbol;
    function f63(a64) {
        ("getBigInt64").normalize();
        return "getBigInt64";
    }
    o60[Symbol.iterator] = f63;
    Uint8ClampedArray.BYTES_PER_ELEMENT;
    const v72 = new Uint8ClampedArray(1000);
    v72[Symbol.toPrimitive] = Symbol;
    Object.defineProperty(v37, "g", { writable: true, enumerable: true, value: Uint8ClampedArray });
    -268435456;
    3 | 268435456;
    Math.ceil(v46);
    let v81 = v72 ^ 3;
    v81 == v81;
    v46 ^ 268435456;
    const v85 = new BigUint64Array(3);
    -14;
    const v89 = new Int8Array(14);
    v89.toString = f38;
    const v90 = v89?.constructor;
    try { new v90(o60, Math, 3); } catch (e) {}
    try { new Int16Array(v85, v85, Int16Array); } catch (e) {}
    new Int16Array(3912);
    const v96 = /9f8\xf0\x9f\x92\xa9/diy;
    function f97() {
        ++v81;
        return Uint8ClampedArray;
    }
    v96.constructor = f97;
    const v105 = +v81;
    v105 | v105;
    v81 >>> (v105 + -3.0);
    const v109 = v96["compile"]();
    v109.constructor = Symbol;
    v109?.constructor;
    new Uint32Array(v36, v36, Uint32Array);
    const v113 = [7.134431132944798e+307];
    function f114(a115) {
        a115[v31] = a115;
    }
    Object.defineProperty(v113, 4, { configurable: true, enumerable: true, set: f114 });
    v113[4] = WeakMap;
    return Map;
}
F22.valueOf = f32;
function f117(a118, a119) {
    return 3521;
}
F22.toString = f117;
const v122 = new Date();
v122.setDate(F22);
