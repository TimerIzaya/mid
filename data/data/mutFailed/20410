const v0 = -Infinity;
~0n;
-53817 + -53817;
const v10 = `
    15 - 15;
    new Float64Array(15);
    new Uint8ClampedArray(565);
    new Int16Array(266);
`;
eval(v10);
try { ("31552").charCodeAt(1750800936); } catch (e) {}
let v30 = 1000.0;
v30--;
-1547267477n >> -1547267477n;
function f38(a39, a40, a41, a42) {
    return a39;
}
f38.length = f38;
const v43 = f38();
-4294967297n <= -4294967297n;
-128 * -128;
try {
    v43.toString = f38;
} catch(e48) {
    e48.h = e48;
}
[495399.1179610712,-3.0,204062.4362779695,-34696.021586310584,-222494.0463396581,3.0,3.0,-1000000000000.0,1000000.0,9.539555030890564e+307];
const v51 = ([-6.008177075812907e+307,0.08985261354991114,-9.5755829530313e+307,9.094460054268962e+307,-1.0,Infinity,Infinity])?.flatMap;
try { new v51(-128); } catch (e) {}
[1000000000.0,-589.49547513898,1e-15,NaN,898.8365694406841,-268781.3461278054,-0.0];
-128 / -128;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v56 = [601759695];
try { v56.splice(eval, v30); } catch (e) {}
function f58(a59, a60, a61, a62) {
    a60 * a60;
    const v64 = a61 == a61;
    arguments[2] = arguments;
    arguments.toString(v56, -128);
    function f67() {
        for (let v69 = 0; v69 < 25; v69++) {
            function f70(a71, a72, a73, a74) {
                let v75 = 10;
                for (; v75--;) {
                }
            }
            for (let v77 = 0; v77 < 10; v77++) {
                f70();
            }
        }
        ("Vre").toLocaleUpperCase.fixed();
        const o86 = {
            "c": v56,
            valueOf(a84, a85) {
            },
            "e": -268435456,
        };
        const v87 = o86.valueOf();
        v87 * v87;
    }
    Int8Array.a = Int8Array;
    const o90 = {
        "apply": f58,
        "defineProperty": f67,
        "getOwnPropertyDescriptor": f38,
        "has": f67,
        "isExtensible": f38,
        "ownKeys": f38,
        "preventExtensions": f67,
        "set": f67,
        "setPrototypeOf": f58,
    };
    new Proxy(arguments, o90);
    new Int8Array();
    f38.buffer;
    %OptimizeFunctionOnNextCall(v64);
    ("find").strike();
}
%PrepareFunctionForOptimization(f58);
const v97 = f58();
%OptimizeFunctionOnNextCall(v0);
f58(v97, f58, -128, v43);
