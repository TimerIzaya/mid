function f3() {
    return 1934195179n;
}
f3.prototype = f3;
class C4 {
    #p(a6, a7) {
        Object.defineProperty(this, 10, { configurable: true, enumerable: true, value: 5n });
        super[this];
        super[8n];
        return this;
    }
    [f3] = f3;
    11;
    n(a11, a12) {
        super[f3] = 8n;
        2.0 & 0.5050925537936855;
        try {
            this.fuck(5n, 2.0, f3);
        } catch(e18) {
        }
        return 5n;
    }
}
const v19 = new C4();
const v20 = new C4();
v20?.constructor;
try { new v19(); } catch (e) {}
new C4();
-745.1405013256964 >> -745.1405013256964;
5 << 5;
new BigUint64Array(5);
3348 << 3348;
Int8Array.prototype = Int8Array;
new Int8Array(3348);
const v38 = new Uint8Array(255);
function f41(a42, a43, a44, a45) {
    a42 - a42;
    a43--;
    try { new a44(a44, -3.0, -3.0); } catch (e) {}
    function f50() {
        return -17353;
    }
    function f51(a52) {
        return a45;
    }
    Object.defineProperty(arguments, 7, { configurable: true, get: f50, set: f51 });
    arguments[2] = arguments;
    return Uint8Array;
}
const v53 = f41?.__lookupSetter__;
try { new v53(v38); } catch (e) {}
function F55(a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    const v60 = this?.__lookupGetter__;
    try { new v60(a58); } catch (e) {}
}
const v62 = new F55(-17353, -17353, f41);
v20.e = v62;
v62.constructor = -745.1405013256964;
const t59 = v62.constructor;
t59(-17353, -17353, Uint8Array);
