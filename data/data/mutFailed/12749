function f0() {
    gc();
    function F3() {
        if (!new.target) { throw 'must be called with new'; }
    }
    ("-1073741824").localeCompare(Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array));
}
[127,-961855727];
[128,1,1000,536870888,9,536870889];
[-50406,10000,1,3,-1370005032,1073741825,255,-4];
new f0();
for (let i16 = 0, i17 = 10;
    i16++, i16 < i17;
    (() => {
        [1073741824,1073741823,1376142744,1073741825];
        for (const v26 of Array(4087)) {
        }
        function f27(a28, a29, a30, a31) {
            function f32(a33, a34) {
            }
        }
        for (let v35 = 0; v35 < 5; v35++) {
            const v36 = [2.220446049250313e-16,-2.0,9.472378156545009,0.0,1e-15,0.3751557433004281,0.0,-474740.46049005154];
            const o42 = {
                set h(a38) {
                },
                __proto__: v36,
                o(a40, a41) {
                },
            };
            f27(v35, f27, i16);
        }
    })()) {
}
const v54 = new Float64Array(64);
const o58 = {
};
gc(o58);
const v61 = new Uint8ClampedArray();
v61.reverse();
new Int32Array(2289);
const v65 = new Uint8Array();
const o66 = {
    ...v65,
};
new BigUint64Array(Uint8ClampedArray);
function f70() {
    for (let v71 = 0; v71 < 5; v71++) {
        for (let v72 = 0; v72 < 5; v72++) {
            Math.atanh(v54);
        }
    }
    return f70;
}
const t54 = 64;
t54();
%OptimizeFunctionOnNextCall(f70);
f70();
