const v0 = [];
function f4() {
    return v0;
}
const v5 = [];
const o7 = {
    [v5]: v5,
    get h() {
        return this;
    },
};
/Yfoo|(bar|baz)|quux/gvim;
/a\nb\bc/uim;
const v11 = new Float64Array();
const v13 = new BigInt64Array();
try {
    v11.reduce(v13);
} catch(e15) {
}
const v16 = /a(?=)/gvd;
const v18 = new Date();
class C22 {
}
function f23(a24, a25) {
}
URIError();
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
}
const v31 = new F28();
const v32 = new v18();
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = [a36,a36,a36,a36,a36];
    class C38 {
        constructor(a40, a41, a42) {
            function f43(a44, a45, a46) {
                v37.copyWithin();
                let v49 = 0;
                for (let i = 0; i < 25; i++) {
                    try {
                        const o50 = {
                        };
                        o50.c = Float64Array;
                    } catch(e51) {
                    }
                    try {
                        const o52 = {
                        };
                        o52.h = v31;
                        o52.f = v32;
                    } catch(e53) {
                    }
                    v49++;
                }
                try {
                    f43(a41, a42, [-268435456]);
                } catch(e57) {
                }
                this >> -268435456;
                return -268435456;
            }
            f43();
        }
    }
    class C60 extends C38 {
    }
    new C60();
}
v16.prototype = f23;
%OptimizeFunctionOnNextCall(f23);
f23();
function f63() {
    let v65 = !257;
    -v65 | v65--;
    return BigInt64Array;
}
%OptimizeFunctionOnNextCall(f63);
function F69(a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = this.constructor;
    try { new v74(a73, C22); } catch (e) {}
    const o79 = {
        ..."44184",
        [-15]: -15,
        2480: 9,
        ..."44184",
    };
    a71 % a71;
}
const v81 = new F69(820, 121, 129);
new F69(820, v81);
const v84 = new WeakMap();
function F85(a87) {
    if (!new.target) { throw 'must be called with new'; }
    const v88 = this?.constructor;
    try { new v88(v84); } catch (e) {}
    try {
        this.c = WeakMap;
    } catch(e90) {
    }
}
[0.0,1000.0,0.8391725786640637];
[-887.0394762330989,740.311884580994,1.4744505268998922e+308,-1.7976931348623157e+308,1000.0,1000000.0,353828.10628384375,944821.1142084491,852041.0990175062,-Infinity];
[0.147679884997715,6.943499005527649,2.0,-1000000000.0,12408.60041136283,195.0276746700863];
5493 >>> 5493;
820 < 820;
do {
} while (0 < 0)
function f103(a104, a105) {
    return 256;
}
Uint32Array.valueOf = f103;
const v107 = new Date(Uint32Array);
v107.getSeconds();
