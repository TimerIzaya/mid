function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.a = 6;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function F7(a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v6;
    } catch(e10) {
    }
}
const v11 = new F7(v4);
const v12 = new F7(v5);
const v13 = new F7(v6);
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v6;
    } catch(e18) {
    }
    try {
        this.f = v11;
    } catch(e19) {
    }
    try {
        this.e = a17;
    } catch(e20) {
        function f24() {
            return 129;
        }
        const o26 = {
            [f24]() {
            },
        };
        const v31 = Symbol.iterator;
        const o33 = {
            [v31]() {
            },
        };
    }
}
new F14(v4, v4);
new F14(v4, v6);
const v36 = new F14(v5, v5);
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "e", { enumerable: true, value: F0 });
    try {
        this.b = a39;
    } catch(e43) {
    }
    try {
        this.e = a39;
    } catch(e44) {
    }
}
new F37(v36, F7, v12, v6);
new F37(v36, v36, v13, v5);
new F37(v36, F0, v13, F14);
const v48 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v50 = new Int16Array(v48, v48, v48);
const v52 = [1073741824,1073741823,1376142744,1073741825];
function f53(a54, a55, a56, a57) {
    function f58() {
        new Int32Array(v48, a57, v50);
        try {
            v52.forEach(a55);
        } catch(e62) {
            const v64 = new Float32Array();
            v64[Symbol.toPrimitive] = f58;
            v64[2] = v64;
            function f67() {
                return Float32Array;
            }
        }
        const o75 = {
            [-4294967297n](a69, a70, a71, a72) {
                eval();
            },
        };
        return o75;
    }
    f58();
    eval();
    %OptimizeFunctionOnNextCall(f58);
    return -4294967297n;
}
for (let v79 = 0; v79 < 5; v79++) {
    f53();
}
