try { (-12n).getTime(-12n, -816409267); } catch (e) {}
-253026077 % -816409267;
new Uint8Array(4);
class C9 {
}
new C9();
const o12 = {
    "execution": "sync",
};
new Int32Array(4);
-12n < undefined;
const v19 = new BigInt64Array();
try { v19.fill(v19, v19, v19); } catch (e) {}
new Float32Array(4096);
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
}
const v33 = new Uint8ClampedArray(([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937));
v33.lastIndexOf(-1148418937);
[2.0,683.9656738275967,-1.7516896423523533e+307,1.5948142245888746e+308,843299.8779772446,0.7728535788644176,1000000.0,-4.31375327374329,-1000000000000.0,0.0];
[2.0,-756.4806565348595,8.071733610131254,-600052.0566687131,-5.0];
class C37 {
}
class C38 extends C37 {
}
const v39 = new C38();
const v42 = new Uint8Array(2);
function f43(a44, a45, a46, a47) {
    let v48;
    try { v48 = a44(a47, a45, v39); } catch (e) {}
    const o52 = {
        ...v42,
        n(a50, a51) {
            return v48;
        },
    };
    o52[1] = o52;
    return a47;
}
f43(-1148418937, -1148418937, f43, -1148418937);
[8.045668918664565e+307];
const v55 = /(?:a*)+q(?<a>.)/guds;
function f56(a57) {
    a57.dotAll = a57;
    ([-3,47741,-16128,9007199254740992,-1024,-58567,268435439,-4294967296,1807295090,-9223372036854775808]).flat(a57);
    const v61 = new Uint8ClampedArray(v55, a57);
    -53409 % v61;
    const o65 = {
        get d() {
            return a57;
        },
    };
    return v55;
}
for (let v66 = 0; v66 < 50; v66++) {
    f56(v55);
}
const v70 = new Date(Uint32Array);
Math.atan(0.6146752851534484);
([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["sync"]();
v70.getSeconds();
