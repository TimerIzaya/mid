[];
new Uint8ClampedArray(0);
const v6 = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
for (let v7 = 0; v7 < 20; v7++) {
    let [,v8,...v9] = v6;
}
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
}
const v16 = new Uint8ClampedArray(5);
const v19 = new Uint32Array(35);
class C20 extends Uint32Array {
    get h() {
        let v22;
        try { v22 = this.values(); } catch (e) {}
        try {
            v19.reduceRight(v22, Uint8ClampedArray);
        } catch(e24) {
        }
        super.buffer;
        Array(4087).includes(4087);
        function F30(a32, a33, a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
            const v36 = this.constructor;
            try { new v36(a32, a32); } catch (e) {}
            a33.isPrototypeOf();
        }
        return v16;
    }
    [-2] = Uint8ClampedArray;
    268435440 = Uint8ClampedArray;
    static [Uint8ClampedArray];
}
new C20();
new C20();
new C20();
try {
    function f42(a43, a44, a45) {
        do {
        } while ((() => {
                new Map();
                function f49() {
                    return f49;
                }
                return f49.arguments;
                const v52 = 2147483648 < 7;
                const v53 = !v52;
                v53 && v53;
                return v52;
            })())
        f42(2147483648, f42, 2147483648);
        return 2147483648;
    }
    f42(f42, f42, f42);
} catch(e57) {
}
