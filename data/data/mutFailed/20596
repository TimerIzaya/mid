class C3 {
    get d() {
        const v5 = super[-2147483647n];
        super[45756n] = 45756n;
        let v6;
        try { v6 = v5.toString(-2147483647n); } catch (e) {}
        const v7 = v6?.[v5];
        try { v7(16n); } catch (e) {}
        return v5;
    }
    constructor(a10, a11) {
        let v12;
        try { v12 = new a11(a11, -2147483647n); } catch (e) {}
        try { a11.n(a10, v12, a11, this); } catch (e) {}
    }
}
const v17 = new C3(45756n, 45756n);
const v18 = new C3(-2147483647n, v17);
for (let v19 = 0; v19 < 75; v19++) {
    let v22 = 1.0;
    Math.sinh(v19);
    -45756n;
    const v25 = --v22;
    v22 && -32034;
    45756n ** v25;
}
const v28 = new C3(45756n, 45756n);
class C32 {
    valueOf(a34, a35, a36) {
        a36[9] = a34;
        try { a34.trimStart(); } catch (e) {}
        return 9223372036854775807n;
    }
    constructor(a42, a43, a44) {
        C32 % a44;
    }
    static #f;
    static f = C32;
    static ["iterator"] = 45756n;
    static ["WgZtU"];
    set g(a47) {
        function f49() {
            return arguments;
        }
    }
    c;
    [v18] = v28;
    static #f = -2147483647n;
}
new C32();
new C32();
const v52 = new C32();
let v53 = "function";
function f54() {
    return v53;
}
new f54();
const v59 = [v52];
Reflect.apply(("isExtensible").search, "isExtensible", v59);
const v63 = "size" && "boolean";
with ("boolean") {
    length = v63;
    ({"length":v53,} = "isExtensible");
    let v64 = 0;
    while ((() => {
            function f66() {
                return v64;
            }
            new C3(v28, f66);
            var e = 45756n;
            return v64 < 1;
        })()) {
        v64 <<= v64;
        try { v63.includes("size", v64); } catch (e) {}
        try {
            new C32();
        } catch(e71) {
        }
        v64++;
    }
    f54();
}
