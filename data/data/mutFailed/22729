function f0() {
    const o8 = {
        "g": 1000000000.0,
        [f0]: 0.4861589841440501,
        get f() {
            %VerifyType(1000000000.0);
            let v5;
            try { v5 = this.atan(); } catch (e) {}
            const v7 = Symbol.asyncIterator;
            v5[v7] = v7;
            return v7;
        },
    };
    return o8;
}
f0();
f0();
const v11 = f0();
new Int16Array(200);
new Uint8ClampedArray(5);
new v11(128);
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    Array(1000).indexOf();
}
new F21();
for (let i34 = 0, i35 = 10;
    i34 < i35;
    (() => {
        i35--;
        /ND2/gds;
        class C42 extends Map {
        }
        const v43 = new C42();
        v43.isPrototypeOf();
        class C47 {
            static {
                for (let v49 = 0; v49 < 25; v49++) {
                    const v50 = [601759695];
                    const v51 = [1073741824,1073741823,1376142744,1073741825];
                    function f53(a54, a55, a56, a57) {
                        try { new a54(); } catch (e) {}
                        a56 << a56;
                        function f61() {
                            return a54;
                        }
                        const v63 = new Int8Array();
                        const v66 = C47 * 536870887;
                        v66 - v66;
                        Number.isNaN(v66 ** v66);
                        function f71(a72, a73) {
                        }
                        try { f71(); } catch (e) {}
                        const v75 = v63.buffer;
                        const v76 = v75.__defineGetter__;
                        try { v76(); } catch (e) {}
                        Object.defineProperty(v75, "constructor", { writable: true, configurable: true, value: Date });
                        %OptimizeFunctionOnNextCall(f61);
                        let v79;
                        try { v79 = v51["find"](..."find", a57, ...v50); } catch (e) {}
                        const o80 = {
                        };
                        o80.e = o80;
                        o80.e = o80;
                        v79 <= a56;
                        return arguments;
                    }
                    for (let v82 = 0; v82 < 5; v82++) {
                        Date(this, v82, v82);
                    }
                }
            }
        }
    })()) {
}
