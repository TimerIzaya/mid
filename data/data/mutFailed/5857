[,];
const v4 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
const v5 = v4.length;
Object.defineProperty(("stack").normalize(), 0, { enumerable: true, value: v5 });
const v12 = new Int8Array(10);
try { v12.values(); } catch (e) {}
try { new Float64Array(11, Float64Array, -536870912); } catch (e) {}
const v18 = new WeakSet();
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.constructor;
    try { new v26(v18); } catch (e) {}
    a24 + a24;
    try {
        this.d = 1000;
    } catch(e29) {
    }
    try {
        this.c = 5;
    } catch(e30) {
    }
    try {
        this.b = undefined;
    } catch(e31) {
    }
}
new Float64Array(2114);
new Int16Array(127);
let v36 = 2639;
v36--;
new Uint8ClampedArray(v36);
[-25855,-25855,[-25855]];
new Uint8Array(481);
new Int32Array(2091);
10 >> 10;
Uint16Array.length;
new Uint16Array(10);
const v55 = new Uint8ClampedArray();
const o56 = {
    ...v55,
};
o56.f = o56;
const v58 = ("by").normalize();
try { v58.fixed(); } catch (e) {}
