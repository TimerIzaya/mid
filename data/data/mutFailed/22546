function f0() {
    const o17 = {
        "b": "global",
        set g(a5) {
            let {"b":v6,"d":v7,"f":v8,} = a5;
            let v10 = 60117646;
            Math.max(-1293365523);
            --v10;
            v10--;
            Math.exp("global");
        },
        "a": 195670.95555553958,
        [195670.95555553958]: 195670.95555553958,
    };
    return o17;
}
const v18 = f0();
f0();
function f20() {
    const o27 = {
        "e": -4294967295,
        ..."Vre",
        valueOf(a25, a26) {
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        5: -4294967295,
        6: -268435456,
    };
    return o27;
}
f0();
new Uint16Array(5);
const v34 = new Uint8ClampedArray(64);
new BigInt64Array(128);
[-0.0,-1.0,2.220446049250313e-16,NaN,-1.0615863015598559e+308,-0.04601552674434295,-1.5620152707395822e+307,-9.0636825377509e+307,-1000000000000.0];
[-2.2250738585072014e-308,NaN,-1.0,2.0,-7.957772682946082e+307,0.7275483492942798];
[-2.0,-2.2250738585072014e-308];
let v42 = -1e-15;
class C47 {
    static #n(a49, a50, a51, a52) {
        a51.e |= a51;
        super.d = a49;
        return this;
    }
    n(a54, a55) {
        const t47 = "9007199254740992";
        t47["255"] &= 7;
        class C61 {
            static #p(a63) {
                const v65 = new Uint16Array(255);
                v65.buffer;
                const v68 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
                const v70 = new Int16Array(v68);
                try { v68.find(v70); } catch (e) {}
                function f72(a73) {
                    return a73;
                }
                class C74 extends f72 {
                    static [-1] = 8;
                    static [a63];
                    static 268435441;
                }
                const v75 = [];
                const v77 = /[a-zA-Z0-9]/gvisy;
                const v78 = /abc?/gvmy;
                v78[-2] ^= v77;
                v78.exec("Q8F");
                const t68 = "Q8F";
                t68[2078209647] = v75;
                return a63;
            }
            [0.028957958839558873];
            static {
                for (let v84 = 0; v84 < 32; v84++) {
                }
            }
            static 2147483648 = C61;
            constructor(a87, a88, a89, a90) {
                const v91 = this.constructor;
                try { new v91(64, a90, this, this); } catch (e) {}
                for (let v93 = 0; v93 < 5; v93++) {
                    v34[v93] = a90;
                }
            }
            static #g;
            #a;
        }
        v42 = a55;
        const v95 = (a96, a97, a98, a99) => {
            'use strict';
            return a96;
        };
        function F100() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                new F100();
                /Ckza\Wb?/vis;
                /Ma\W+/gudm;
            } catch(e105) {
            }
        }
        v42[this] = 12;
        a55[2205312982] = 0.7899559058375023;
        super[this] = a55;
        return 0.7899559058375023;
    }
    constructor(a109, a110, a111, a112) {
        super();
        function f113() {
            const v114 = [];
            v114[6] = v114;
            const o117 = {
                set b(a116) {
                },
            };
            return a112;
        }
        for (let v118 = 0; v118 < 5; v118++) {
            f113();
            %OptimizeFunctionOnNextCall(f113);
        }
    }
    set g(a121) {
    }
    static 268435441;
    static #n(a123) {
        function f124(a125) {
            return a125;
        }
        class C126 extends f124 {
        }
    }
    static e;
    static 6;
}
const v127 = `
    255n || 255n;
`;
/[.ma\Sc]/vdimsy.exec(Int16Array);
gc();
eval(v127);
new C47();
const v137 = new C47();
v137.h = -1.2013590182343721e+308;
const v140 = new Int8Array(1000);
class C141 {
}
let v142 = new C141();
class C143 extends C141 {
    o(a145, a146) {
        v142 %= this;
        %VerifyType(super.g);
        function f149(a150, a151, a152) {
            for (let i = 0; i < 5; i++) {
            }
            try {
                f149(v140, a152, a152);
            } catch(e154) {
                function f155(a156, a157) {
                    return a156;
                }
                f155(v18, f149);
            }
        }
    }
}
const v164 = new C143();
function f165(a166, a167, a168) {
    const o175 = {
        toString(a170, a171, a172, a173) {
            return v164 * a173;
        },
    };
    return f165;
}
new C47();
v137.h;
for (let v180 = 0; v180 < 100; v180++) {
}
class C182 {
}
C182.constructor;
gc();
new Uint16Array(994);
const v190 = [];
Symbol.isConcatSpreadable;
v190["concat"]("concat");
