const v1 = new Set();
class C2 {
    2 = v1;
    #valueOf(a4, a5) {
        super[this] = v1;
        [Set];
        [Set];
        [a4];
        return v1;
    }
    static [v1] = Set;
    get g() {
        const v10 = `
            try {
                v1.size = this;
            } catch(e11) {
            }
        `;
        eval(v10);
        return eval;
    }
}
const v14 = new C2();
v14[2] = v14;
const v15 = new C2();
v15[2] = v15;
new C2();
const v20 = [1e-15,-85004.53463914909,-0.0,1000.0,0.0,285820.0759417536];
try { v20.pop(); } catch (e) {}
const v22 = [0.43807225393336147,0.044411310871543264,-5.534382052685323,114770.52814236982,5.623004493111184e+307,2.220446049250313e-16,1.587334803907158];
[-1.0,3.0,2.220446049250313e-16,0.6962187334892461,-4.0,-2.0,-1000000.0];
BigUint64Array.name = BigUint64Array;
const v26 = new BigUint64Array(3847);
v26[2185];
try { v20["forEach"](...65535n, ...-4096n, -268435456n, v14, ...C2, ..."forEach"); } catch (e) {}
new Float32Array(4);
2 | 2;
const v39 = new Int8Array(2);
class C40 {
}
const v41 = new C40();
try { v41.constructor(); } catch (e) {}
const v43 = [C40,C40,C40];
function f44() {
    return 65535n;
}
new Float32Array(v22, 3847);
try {
    v20.length = 10;
} catch(e47) {
}
v43[2] = v43;
try { new Date(-268435456n, -268435456n, v43, -268435456n, -268435456n, v43, C2); } catch (e) {}
const v50 = Date.parse(v43);
v50 << v50;
const v52 = -v50;
class C53 {
    static {
        try { this.bind(v39); } catch (e) {}
        for (let v56 = 0; v56 < 25; v56++) {
            const v57 = [];
            function F58() {
                if (!new.target) { throw 'must be called with new'; }
                [v57,[this,this,this,this],this,arguments];
            }
            function f65(a66, a67, a68, a69) {
                a66--;
                try { a66.call(a68, v41, a69, a67, this); } catch (e) {}
                const v72 = a67--;
                f65 >> v72;
                Number.isNaN(v72);
                let v77;
                try { v77 = Math.round(this); } catch (e) {}
                -v77;
                const v79 = a69.tan();
                v79 | v79;
                const v81 = new Date();
                const v82 = v81.setDate();
                v82 * v82;
                const v84 = a67 & a67;
                let v85;
                try { v85 = a66(v84); } catch (e) {}
                v85?.constructor;
                arguments[2];
                const v89 = arguments[2];
                v89 - v89;
                try { v89.findLast(); } catch (e) {}
                return v41;
            }
            const v92 = f65(v52, v41, v56);
            const v93 = v92?.constructor;
            let v94;
            try { v94 = new v93(); } catch (e) {}
            const v95 = f65(v56, v52, v43);
            let v96;
            try { v96 = v95.propertyIsEnumerable(this); } catch (e) {}
            v96 = this;
            %VerifyType(2);
            ++v94;
            v94++;
            v92[65535n];
            for (let v100 = 0; v100 < 5; v100++) {
                const v101 = f65(this, v100, v100);
                try { v101.constructor(); } catch (e) {}
            }
        }
    }
}
