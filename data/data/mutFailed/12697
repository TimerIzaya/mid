new Float64Array(257);
let v3 = 10;
v3++;
new Float32Array(v3);
const v9 = new Uint8Array(0);
180 + 180;
new BigInt64Array(180);
try { new BigInt64Array(v9, 0, Float64Array); } catch (e) {}
const v17 = new BigInt64Array(1866);
v17[701] = v17;
const v20 = new Uint32Array(3);
v20[1] = v20;
try { ("name").substring(BigInt64Array, v3); } catch (e) {}
class C25 {
    constructor(a27) {
        this[1762774961] = this;
        const v28 = a27 % a27;
        v28 | v28;
        function f30() {
            return a27;
        }
        let v31;
        try { v31 = f30.bind(this); } catch (e) {}
        try { v31(); } catch (e) {}
    }
    static [-1e-15] = 1000.0;
    ["name"] = -1e-15;
    f;
    [-1e-15];
    a;
    1762774961 = -1e-15;
    static ["name"];
}
C25.e = C25;
const v33 = new C25(1000.0);
const v34 = new C25(v33);
const v35 = v34?.__lookupSetter__;
try { v35.toString(); } catch (e) {}
try { new v35("name"); } catch (e) {}
new C25(-1e-15);
let v40;
try { v40 = new WeakSet(); } catch (e) {}
try { v40.add(Uint8Array); } catch (e) {}
new WeakSet();
new Set();
let v46 = undefined;
const o47 = {
};
o47.e = o47;
o47.c = o47;
v46 = o47;
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = this.constructor;
    try { new v50(); } catch (e) {}
    let v52 = -128;
    v52--;
    this.g = v52;
}
new F48();
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v56 = new Uint8Array();
try { v56.sort(Uint8Array); } catch (e) {}
