const v2 = new Float32Array(12);
const v4 = 8 === 8;
const v5 = v2[2572324904];
Float32Array !== 8;
const o10 = {
    "execution": "async",
    "type": "minor",
};
o10.execution = o10;
const v11 = o10.type;
v11[3] = v11;
const v12 = gc(o10);
let v13;
try { v13 = v12.then(8, v2); } catch (e) {}
const v14 = v13?.constructor;
try { new v14(v4); } catch (e) {}
const v17 = new Uint32Array(8);
v17[6];
const v19 = v17?.constructor;
try { new v19(v19, o10, v17); } catch (e) {}
let v21;
try { v21 = new v19(v2, Uint32Array, 12); } catch (e) {}
v21[0] = v21;
try { new Uint32Array(Uint32Array, Uint32Array, v5); } catch (e) {}
const v25 = new Uint32Array(431);
let v26 = 0;
v26--;
new Int32Array(v26);
7 === 7;
try { new Uint8Array(Uint8Array, o10, v12); } catch (e) {}
try { Uint8Array.toString(); } catch (e) {}
new Uint8Array(7);
const v38 = new Float64Array(2922);
v38[292] = v38;
v38[193];
const v40 = [Uint32Array,Uint32Array,Uint32Array,431,8];
const v41 = [Float32Array,Uint32Array,8,v25];
v41.g = v41;
try { v5(); } catch (e) {}
try {
    gc();
} catch(e44) {
}
[v40,Uint32Array,v41,v17];
-1171413232 >>> -1171413232;
for (let v50 = 0; v50 < 25; v50++) {
    v50 - v50;
    class C52 {
        constructor(a54) {
            const v55 = this?.constructor;
            try { new v55(Float32Array); } catch (e) {}
            a54 | a54;
            function f58() {
                return a54;
            }
            try { f58.toString(); } catch (e) {}
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f58 });
        }
    }
    const v60 = new C52(v50);
    v60.b = v60;
    const v61 = new C52();
    const v62 = v61?.constructor;
    try { new v62(v50); } catch (e) {}
}
