function f0() {
}
const v1 = /Y/vdimy;
const v2 = /ga\w/is;
const v3 = /DoAa*?/u;
let v4;
try { v4 = v3.toString(); } catch (e) {}
try { v4.link(v3); } catch (e) {}
const v8 = new Uint32Array(85);
const v10 = 2 - 2;
new Uint16Array(2);
3960 & 3960;
const v16 = new BigInt64Array(3960);
try { v16.entries(); } catch (e) {}
let {"prototype":v19,} = Date;
delete v3[Uint32Array];
v19[10] = 85;
Object.defineProperty(v3, "b", { configurable: true, get: Date, set: Date });
Object.defineProperty(v8, v10, { get: f0, set: Date });
const v21 = new Date();
try { v21.valueOf(); } catch (e) {}
Float32Array.prototype;
const v25 = new Float32Array(Float32Array);
try { v25.every(v21); } catch (e) {}
for (let v27 = 0; v27 < 25; v27++) {
    function f28(a29, a30, a31, a32) {
        -a29[0];
        Number.isNaN(a29[1]);
        for (let v38 = 0; v38 < 5; v38++) {
        }
        const v39 = a30--;
        a29[0] = a29;
        arguments[0] = arguments;
        const v41 = arguments?.__lookupGetter__;
        let v42;
        try { v42 = v41.constructor(f28, v41, v41); } catch (e) {}
        const v43 = new Float32Array(v27, v42, a30);
        Int32Array.e = Int32Array;
        try { new Int32Array(a29, v39, Uint32Array); } catch (e) {}
        const v46 = new Int32Array();
        new Uint16Array(v2, 2, 3960);
        new Array(13);
        [-8,-9223372036854775807,4,-2147483649,-65537,20995,-65536,-16,0,2];
        [1073741825,6,-3,-1879833422,34424,1024,16,51747,13];
        [-4294967296,2147483647,129];
        let v54;
        try { v54 = v46.join(v1); } catch (e) {}
        try { v54.toUpperCase(); } catch (e) {}
        const v56 = v43;
        try { v56.values(); } catch (e) {}
        v46.fill(...v56);
        return Float32Array;
    }
    f28.arguments;
    for (let v60 = 0; v60 < 10; v60++) {
        f28(v25);
    }
}
