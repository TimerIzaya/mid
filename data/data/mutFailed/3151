const v0 = [];
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 0.4962403185419135;
    } catch(e7) {
        const v8 = [];
        -v8 && v8;
        0 == 268435440n;
    }
}
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
class C17 {
}
("async").split(/[a-zA-Z0-9]BL[\cZ]/udsy, C17);
const o22 = {
    __proto__: null,
    valueOf() {
        return null;
    },
};
try { new F4(88737.96703106933); } catch (e) {}
new F4(867.4923740865347);
const v25 = new F4(88737.96703106933);
function f26() {
    const o28 = {
        __proto__: Set,
        ...Set,
    };
    return v25;
}
v25.constructor = f26;
const v29 = v25?.constructor;
try { new v29(v0); } catch (e) {}
v0.constructor;
const v32 = /8[\cA]v/uisy;
const v33 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v33.length = v32;
} catch(e34) {
}
const v35 = new F4(88737.96703106933);
try {
const t0 = 0.4962403185419135;
new t0();
} catch (e) {}
function f37() {
    const o43 = {
        0: 549538.9552070533,
        [-6.170254254244802e+307](a41, a42) {
        },
    };
    return o43;
}
f37();
try {
const t0 = 1000000000.0;
t0(2.220446049250313e-16, Uint8ClampedArray, ...1000000000.0, -82.86062314585524);
} catch (e) {}
v35.b = v35;
[4294967296,-9223372036854775807,4294967296,39146,9,-2136334298];
[-34115,-2,10,65537];
new Float32Array();
let v55 = 1000000.0 % 1000000.0;
try {
} catch(e56) {
}
[3,40899,1332304989,10000];
try { v35.constructor(); } catch (e) {}
class C60 {
    constructor(a62, a63, a64, a65) {
        let v67 = 268435439;
        v67--;
    }
}
const v71 = new Uint32Array(1024);
v71[Symbol.toPrimitive] = f37;
let v74 = ++v55;
++v74;
class C77 {
    constructor(a79, a80) {
        try {
            const o82 = {
                "maxByteLength": 201,
            };
            function F84(a86, a87) {
                if (!new.target) { throw 'must be called with new'; }
                const v88 = this.constructor;
                try { new v88(268435440n, a87); } catch (e) {}
                this.f = 268435440n;
            }
            new F84();
            super.n(1e-15);
        } catch(e92) {
        }
        try {
            super.getYear(a79, this);
        } catch(e94) {
        }
    }
}
try { v71.reduceRight(v71); } catch (e) {}
const v97 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v99 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v100 = [601759695];
function f102(a103, a104, a105, a106) {
    function f107() {
        try {
            v97.forEach(a104);
        } catch(e111) {
        }
        const v112 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o118 = {
            toString(a114, a115) {
                (a106 && a104) <= v112;
                return a105;
            },
        };
        const o139 = {
            get c() {
                return this;
            },
            "c": -4294967297n,
            [522675525n](a122, a123) {
            },
            "c": v100,
            valueOf(a125, a126) {
                return a126;
            },
            [-4294967297n](a128, a129, a130, a131) {
            },
            "maxByteLength": -4294967295,
            "arguments": v99,
            ..."Vre",
            valueOf(a133, a134) {
                return a133;
            },
            ..."Vre",
            4: "Vre",
            "type": "Vre",
            toString(a136, a137, a138) {
                return a138;
            },
            5: -4294967295,
            6: -268435456,
        };
        return a103;
    }
    f107();
    %OptimizeFunctionOnNextCall(f107);
    return v100;
}
const v141 = new BigInt64Array();
try { v141.with(v71, v71); } catch (e) {}
