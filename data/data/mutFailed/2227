class C4 {
    toString(a6, a7, a8, a9) {
        function f10(a11) {
        }
        class C12 extends C4 {
            a = -65535n;
        }
        return -2074262259n;
    }
}
const v13 = new C4();
for (let i = 0; i < 5; i++) {
    v13 + v13;
}
class C16 {
    set a(a18) {
        -Infinity;
    }
    static {
        this[6n] = this;
        try {
            this.length = 1;
        } catch(e24) {
            e24.d = e24;
        }
    }
}
const v25 = new C16();
const v26 = new v13();
new C16();
const v28 = C4?.constructor;
let v29;
try { v29 = new v25(); } catch (e) {}
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    -(-7) ** v28;
}
const v35 = v13.constructor;
try { new v35(F30, v29, F30, v35); } catch (e) {}
1.6690234716196748e+308 ^ 1.6690234716196748e+308;
let v39 = -2.2250738585072014e-308;
v39--;
[-9,-18424];
[268435456,1661418739,1692268137,1073741823,-4];
const v44 = [1090205054,255,-2390,1];
try { new Int32Array(v39, v26, 11n); } catch (e) {}
const v48 = new Int32Array();
try { v48.reduceRight(v44); } catch (e) {}
BigInt64Array.length = BigInt64Array;
const v51 = new BigInt64Array();
const v52 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v53;
try { v53 = v52.some(); } catch (e) {}
const v54 = [-1.7976931348623157e+308];
function f55(a56, a57, a58, a59) {
    try { (129).reduceRight(a57); } catch (e) {}
    a57++;
    const o69 = {
        toString(a63, a64, a65) {
            try { this.toString(a64, v53, a63); } catch (e) {}
            a64++;
            a58[a57] = a56;
        },
    };
    return a58;
}
const v70 = f55(v51, 129, v54);
const v71 = C4?.toString;
try { new v71(v70, v54, v70); } catch (e) {}
const v73 = f55(v48, 129, v52);
for (let v74 = 0; v74 < 5; v74++) {
    v73 % v70;
    v52.b = v48;
}
