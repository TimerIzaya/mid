Error[Symbol.toPrimitive] = Error;
const v5 = new Error(Error, Error, Error);
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
}
const v10 = new F6(Error, v5);
function f11(a12) {
    let v13;
    try { v13 = v10.resize(v5, F6, Error, a12); } catch (e) {}
    v5.length |= v13;
    return v13;
}
const v15 = ["a","ElQi","a"];
const v16 = ["ElQi","max","ElQi",v15];
const v17 = [v15,"a"];
new Float32Array(9);
class C24 {
    set e(a26) {
        ("max")[10];
        const v31 = ~-819000863;
        Uint8ClampedArray.sin(v31);
        !v31;
        +-1192114947;
        -v16;
    }
    b;
    static h;
}
new C24();
const v37 = new C24();
new C24(v37, v37);
function f39() {
    const o40 = {
    };
    function f41(a42) {
        try { v17.map(Symbol, v16); } catch (e) {}
        v37 * o40;
        return o40;
    }
    o40.valueOf = f41;
    return o40;
}
const v45 = f39();
const v46 = f39();
([Error,Error])["indexOf"](v45, v46);
function f51(a52) {
    return f51;
}
function f53(a54, a55, a56, a57) {
    let v58 = 10;
    for (; v58++;) {
    }
    try { a55.apply(a54); } catch (e) {}
}
