const v2 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
let v3 = 15135;
v3++;
const v8 = new BigInt64Array();
let v9;
try { v9 = v8.entries(); } catch (e) {}
const t6 = "toString";
t6[6] = "toString";
const v12 = ("boolean").split("toString");
function f14(a15, a16) {
    const o30 = {
        "c": 8,
        "a": v3,
        "d": a15,
        __proto__: v8,
        "g": -1628878962,
        "type": "boolean",
        "a": v8,
        set b(a18) {
        },
        "g": a15,
        "b": a16,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f23() {
                    return f23;
                }
                const o25 = {
                    [v9]() {
                    },
                };
                [o25];
                v2.copyWithin(8, -268435456, -256);
            } catch(e29) {
            }
            return this;
        },
    };
    return o30;
}
f14(1000000.0, v2);
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    try { new v37(); } catch (e) {}
    -a35;
}
F33.e = F33;
const v40 = new Array(10);
const v41 = v40.toString();
try { v41.replaceAll(v12, Array); } catch (e) {}
const v45 = Symbol.toPrimitive.description;
try { ("boolean").codePointAt(-1628878962); } catch (e) {}
v45.codePointAt();
const v51 = [601759695];
const v52 = [1073741824,1073741823,1376142744,1073741825];
function f53(a54, a55, a56, a57) {
    ~a54;
    try { a55.toString(); } catch (e) {}
    -a56;
    a56 >= a56;
    try { ("has").trimStart(); } catch (e) {}
    try { v52["has"](..."has", a57, ...v51, ...v52); } catch (e) {}
    WeakMap / 536870887;
    return v3;
}
const v66 = f53.prototype;
f53(v3, v51, 536870887);
new Uint8Array(1538);
Float64Array.length = Float64Array;
const v72 = new Float64Array(10);
BigUint64Array.length;
new BigUint64Array(7);
let v78 = 16;
const v79 = v78--;
class C80 {
    constructor(a82, a83) {
        const v84 = this.constructor;
        try { new v84(); } catch (e) {}
        v72[v78] >>>= v78;
    }
}
const v87 = `
`;
function F88(a90, a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
function f95() {
    return -9007199254740992n;
}
v66();
eval(v79);
const o99 = {
    "execution": "toString",
};
Symbol.prototype = Symbol;
Symbol.asyncIterator;
