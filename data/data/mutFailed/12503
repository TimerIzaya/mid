new Float32Array(255);
4096 - 4096;
try { Uint16Array.call(Float32Array); } catch (e) {}
const v7 = new Uint16Array(4096);
function f8(a9, a10) {
    function f11() {
        return f11;
    }
    const v14 = Symbol.isConcatSpreadable;
    Int16Array[v14] = f11;
    return v14;
}
v7.valueOf = f8;
v7[1858] = v7;
const v17 = new Float32Array(5);
try { v17.indexOf(255); } catch (e) {}
function f19() {
    return v7;
}
v17[v7] = 5;
const v21 = v7["values"](Float32Array, ..."values", f19, Float32Array, Uint16Array, ..."values");
Object.defineProperty(v21, "constructor", { writable: true, enumerable: true, value: f19 });
const v22 = v21?.constructor;
try { new v22(v21); } catch (e) {}
const v24 = [-2147483647,-21455,9007199254740991,2081096863,33449];
const v25 = [45341,11,627242622,2,1073741825,-2147135338,-9007199254740991,-2,10000,-256];
v25[11] = "values";
const v26 = [-63588,-5,257,15,47547,-65536,-19602,65536,-122184598];
v24[255] <<= 255;
try {
    const v33 = [v21,v24,Uint16Array,605575402,65536n];
    try { v33.reduce(v26); } catch (e) {}
    v25.push(65536n, v33);
} catch(e36) {
}
let v40 = -Infinity;
v40--;
try {
    const v42 = f19();
    v42[Symbol.toPrimitive] = f19;
    v42[2535] = v42;
} catch(e45) {
}
const v49 = new Date(127);
try { v49.setUTCFullYear(127, -8796n); } catch (e) {}
