const v2 = new Array(0);
-1 >> -1;
class C7 extends Array {
    get h() {
        const o10 = {
            "b": -49085,
        };
        this[5];
        super.a = 5;
        return 0;
    }
    m(a13, a14, a15, a16) {
        v2.#e;
        a14.#e = -1;
    }
    toString(a25, a26, a27, a28) {
        [924539.4038250442,-706556.031301155,0.05042469641090519,7.128534233415039,1.0,1.7232044264085091e+308,-3.0,-1e-15,1000.0];
        [0.038278165639203166,-1.0,-66.04671995465435,0.3248522892781516];
        [0.9548500658474508,-1e-15,320460.3781238871,1.7976931348623157e+308,-870.3507895499149,-1000000000000.0,-Infinity];
        return -1;
    }
}
C7.e = C7;
function F35() {
    if (!new.target) { throw 'must be called with new'; }
}
new F35();
const v39 = new Set();
class C40 {
    [v39];
    static {
    }
}
const v42 = new C7();
try { v42.unshift(v2); } catch (e) {}
new C7();
new C7();
const v46 = [-9223372036854775808,4294967297,1524216812,1583265095,-6,4294967297];
function f47(a48, a49) {
    return v46;
}
v46.then = f47;
v46["push"](v42);
-7;
Float64Array.prototype = Float64Array;
new Float64Array(7);
const v58 = new Float32Array(9);
v58[8];
class C62 {
}
class C64 extends Date {
}
const v65 = new C64();
v65.setMonth(C62, C64);
new Uint32Array(0);
const v70 = new Float32Array(9);
const v71 = v70?.findLastIndex;
try { new v71(Float64Array); } catch (e) {}
new Int8Array(v70);
