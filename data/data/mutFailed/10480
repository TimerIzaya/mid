new Float32Array(2287);
const v5 = new Int16Array(129);
new v5(3);
function f9(a10, a11, a12, a13) {
    const o26 = {
        "d": a11,
        [2287]: 3,
        "a": v5,
        get c() {
            return this;
        },
        "b": 129,
        ...129,
        10000: f9,
        set b(a16) {
        },
        "g": a12,
        ...v5,
        "f": 129,
        "c": 129,
        1000: 3,
        "f": a11,
        [a11](a18, a19, a20) {
            try {
                new Float32Array(1073741824);
            } catch(e25) {
            }
            return Uint8Array;
        },
    };
    return o26;
}
const v27 = f9(3, 2287, 3, 129);
const v28 = f9(3, 129, 129, 129);
const v29 = f9(2287, 2287, 3, 129);
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v29;
    } catch(e36) {
    }
}
const v37 = new F30(v27, 2287, 3, v29);
new F30(v37, 129, v28, v29);
new F30(v27, 129, F30, v27);
[-960.7381643354993];
[-671.3090150871242,-1.0];
[0.9173781206367507,5.233957886943719e+307,0.12662165959368632,-921947.547929243,743.1321381303028,2.220446049250313e-16,2.2250738585072014e-308];
const v46 = ("p")?.isPrototypeOf;
try { new v46("toString"); } catch (e) {}
class C51 extends Int32Array {
}
let v52;
try { v52 = new C51(); } catch (e) {}
const v53 = new C51();
Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
new Date(127);
Reflect.construct(Uint8Array, [v53,v53], C51);
[0.18372866515424147,461665.2775589656,2.6563672835372962,2.0,-Infinity,1e-15,273866.66349880304];
[0.1647584749770924,0.0,281189.4702332646,-640144.185384929,-9.96248851328583,-1000000000000.0,NaN,-9.185127476558462e+307,-588.058716110192];
[8.063065675598975e+307];
v52 >>> 51086;
[5,-1726645307,3,-22869,28097];
[-128,738741997,61681,1,-536870912,255,512];
[1326394077,3,-4096,-6,58642,8];
this.escape();
new Uint16Array([34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449]);
const v80 = [-20857,-1303616328,-1864740753,-1023402966,129,-20506,7,8229,-53914];
v80[536870912] = v80;
127 * 127;
new Uint8Array(127);
const o88 = {
    toString(a86, a87) {
    },
};
let v89 = undefined;
const o92 = {
    set b(a91) {
    },
};
v89 = o92;
o92.f = o92;
Uint8Array.prototype = Uint8Array;
const v95 = new Uint8Array(165);
v95[113] = v95;
function F96() {
    if (!new.target) { throw 'must be called with new'; }
    const v98 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F99(a101, a102, a103, a104) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v105 = new F99(v98, F96, v98, F99);
    const v107 = [F96,F96,F96,F96];
    Reflect.apply(v98.indexOf, v105, v107);
}
function F110() {
    if (!new.target) { throw 'must be called with new'; }
    function F112() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const v114 = new F110();
function f115(a116, a117) {
    const o125 = {
        n(a119, a120) {
            class C121 {
            }
            new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
        },
        "a": v114,
    };
    for (let v126 = 0; v126 < 100; v126++) {
        Math.random();
    }
    return o125;
}
new Uint16Array(257);
%PrepareFunctionForOptimization(f115);
f115().n();
%OptimizeFunctionOnNextCall(f115);
f115();
