function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a5;
    } catch(e6) {
    }
}
new F3(-4.0);
new F3(241937.60086404625);
new F3(-4.0);
/3xyz{0,1}+/vims;
/(M(?:a*)+)/gudim;
/a+L\1(a)abc+R(?:a?)*/gums;
new Int32Array(1589);
new Uint32Array(1930);
const v21 = [1073741824,1073741823,1376142744,1073741825];
function f22(a23, a24, a25, a26) {
    function f27() {
        const v29 = Math.expm1(a24);
        const v30 = Math.tanh();
        const v31 = Math.hypot(a25, Math);
        try {
            v21.findLast(a25);
        } catch(e33) {
        }
        const o34 = {
            [v30]: v29,
        };
        return v31;
    }
    f27();
    eval(a26);
    %OptimizeFunctionOnNextCall(f27);
    return f22;
}
for (let v38 = 0; v38 < 5; v38++) {
    f22();
}
new Int8Array(129);
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    try {
    } catch(e44) {
    }
    function F45() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v47 = new F45();
    const v48 = v47?.__defineSetter__;
    try { v48(); } catch (e) {}
    function f50(a51, a52) {
        const o53 = {
        };
        return o53;
    }
    const v54 = f50(v48, f50);
    function f55() {
        return f55;
    }
    const v58 = new Float32Array(218);
    for (const v59 of v58) {
        v59 >>> v59;
        Object.defineProperty(v54, Float32Array, { configurable: true, enumerable: true, get: f50, set: f55 });
    }
}
new F41();
new F41();
new F41();
