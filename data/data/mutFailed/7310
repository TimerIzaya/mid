const v0 = [-9007199254740992,-65537,841855796,1000,-2];
const v1 = [1000,536870912,-175232322];
const v2 = [-56695,9007199254740990,-9007199254740991,-4294967297];
let v3 = "number";
class C6 {
    constructor(a8, a9, a10, a11) {
        let v7 = this;
        v7[2] %= "toLowerCase";
        let v12 = super[v2];
        v7 = v1;
        const v13 = --v12;
        try {
            v7.toString = C6;
        } catch(e14) {
        }
        ([v2,...v0,...a9,v12]).__proto__;
        try {
            super.trimLeft(v13, a8, a10, v7);
        } catch(e18) {
        }
        v3 &= "toLowerCase";
    }
    static {
        function f20() {
            return this;
        }
        this[268435441];
        let [] = v3;
        super["o"];
    }
}
const v23 = new C6(v2, "toLowerCase", v3, v0);
const v24 = new C6(v1, v23, v23, v1);
let v25 = new C6(v23, v23, "o", v1);
class C26 extends C6 {
    ["toLowerCase"];
    set f(a28) {
        const v29 = v24 % v24;
        ("toLowerCase")[this];
        v24[v29] = "o";
        %VerifyType(v25);
        +v3;
        --v25;
    }
    [v2] = C6;
    82 = "toLowerCase";
    1;
    static 1079;
    2884466588;
    static g;
    static #a;
    static #b = v23;
    2147483649;
    g = v25;
    static ["toLowerCase"];
}
new C26();
new C26();
new C26();
[-4294967295,7,128,-5,-2,3,3,2,3,663869830];
[268435440,-11,268435441,-2147483648];
[416700078,3507,536870887,10];
for (let v39 = 0; v39 < 5; v39++) {
    const o43 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o43);
}
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    Reflect.construct(Int8Array, [1126838905]);
}
new F45(F45, F45, F45);
