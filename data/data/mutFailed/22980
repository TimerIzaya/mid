function f0() {
}
function f1() {
    const o10 = {
        toString() {
            try {
                super.then(this, f0, this, this, this);
            } catch(e4) {
                const v5 = e4?.[135];
                v5[v5 === this] = this;
                [-0.6157564647843206,-1000.0,-883.5844718364117,-1000000.0];
                [-2.0,-3.5762593016544315,-1.7976931348623157e+308,-920260.6532854905,5.0,NaN,-4.0];
                [1.0117841242549433e+308,0.7810069586842477,255833.3603867353,2.220446049250313e-16,-Infinity,5.110714058916875,6.334519172308902,2.2250738585072014e-308,-557.1686405175504];
            }
            return f0;
        },
        "e": f0,
        "species": f0,
        ...f0,
        ...f0,
        "g": f0,
        ...f0,
        "b": f0,
        "d": f0,
    };
    return o10;
}
f1(f1, f0, f0);
const v12 = f1();
f1();
const v16 = new BigUint64Array(257);
let v19 = new Float64Array(4096);
v19 %= v19;
new BigInt64Array(1);
const v25 = new Uint8ClampedArray(256);
new Uint32Array(2043);
new Float32Array(2118);
function f32() {
    return f1;
}
const v35 = new SharedArrayBuffer(1392);
const o37 = {
    "get": TypeError,
};
const v39 = new Proxy(v35, o37);
const v40 = [...v16,v39,v39,v19];
v25[2] = Uint8ClampedArray;
try { o37.charAt(); } catch (e) {}
let v43 = 1073741823;
switch (Float32Array) {
    case v12:
        v40[v12] = 2118;
        break;
}
+536870912;
v43-- & 536870912;
v39[4];
[516743.3158600263,-394.6317576197498];
[1e-15,1.3448164175705496e+308,-128.6753575792377];
[1000000000.0,216620.29322332842,147.39677752246575,1000000000000.0,-0.0,-419198.61983461387,0.8613340195360475,909608.994965909,1000000.0,691.1435908615108];
Math[193] = f32;
SharedArrayBuffer[v40];
