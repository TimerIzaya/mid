const v0 = /[^\p{Changes_When_NFKC_Casefolded}(\P{sc=Greek}ab|c?)]/gudms;
const v1 = /[](R)/gudisy;
const v2 = /(M)/gvdimy;
function f3(a4, a5) {
    a4.unicode = a4;
    const o14 = {
        set d(a7) {
            this ^ a7;
            super.a = a4;
            v0[a4];
            const v10 = a7;
            for (let v11 = 0; v11 < 32; v11++) {
                a7["p" + v11] = v11;
            }
        },
        [v2]: a5,
        __proto__: v2,
        "e": f3,
        ...v2,
        519: a4,
        "c": f3,
        "a": v0,
    };
    return o14;
}
f3(v0, v0);
const t25 = v0 || -1392880535;
t25.multiline = 5.9219403601461025;
const v20 = v0 / -1392880535;
v20 >>> v20;
const v22 = 5.9219403601461025 ** -1392880535;
v22.fround(v0);
let v24 = v0 / -1392880535;
v24--;
f3(v1, v0);
v1[519] = f3(v1, v0);
new Uint8ClampedArray(255);
new Int32Array(4096);
new Int8Array(1122);
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
try { new F37(v2, v2, v2); } catch (e) {}
const v45 = new F37();
v45.f = v45;
v45.e = Uint8ClampedArray;
v45.e = v22;
