%PrepareFunctionForOptimization("object");
function F3(a5, a6, a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    function f9() {
        return F3;
    }
    class C10 extends f9 {
        constructor(a12) {
            super();
            for (let v13 = 0; v13 < 25; v13++) {
                this["p" + "p"] = v13;
            }
        }
    }
    new C10();
}
new F3();
const v18 = new Int32Array(190);
const v21 = new Int32Array(4005);
v21[1469] = v21;
0 % 0;
Uint8ClampedArray.b = Uint8ClampedArray;
new Uint8ClampedArray(0);
[-655.1667437722222,-0.0,280533.3402055623];
const v27 = [2.220446049250313e-16,2.2250738585072014e-308,-1000.0,525.3355535448425];
const v28 = [0.0];
v28[0] = v28;
v27[1000.0] = v18;
const v31 = [190];
const v32 = [-4.312893526692423,v31];
try { v32.sort(1000.0); } catch (e) {}
[v31];
try { ("p").blink(); } catch (e) {}
const v40 = [-9223372036854775808];
[1000,9007199254740990,4,-4294967296,-1911934186,5,-1686];
new Uint8ClampedArray(5);
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this?.constructor;
    try { new v49(this, a48); } catch (e) {}
    this.c = a47;
}
const v51 = [-16,-2,-56243,65535,268435439,17491,-65535,4294967296];
["8r9Ql",v27,Int32Array,v40,1.3981468289383963e+307];
[v18];
[Int32Array,v32];
("c").toUpperCase();
class C63 {
}
const v64 = new C63();
Math.tanh(-v64);
-65535n << -65535n;
const v69 = [-65535n,-65535n,-10n];
try { v69.flatMap(v69); } catch (e) {}
const v71 = [v69,-10n,-65535n];
v71[1];
const v73 = [v51,-65535n,v51,-57761n];
const v74 = [-10n,-10n,-10n];
v74[1] = v74;
[[v73,-57761n,v40,v69,-65535n],v73,v71,v69];
const v77 = [3.836595330454784e+307,-1.1402235194805368e+308];
const v78 = [991.721527488573,-290835.2265090322];
try { v78.slice(v73, v78); } catch (e) {}
function f80() {
    const o83 = {
        "execution": "async",
        "type": "major",
    };
    return "major";
}
v78.toString = f80;
try {
    v77.length = 2499;
} catch(e85) {
}
[-1.0,-1000000.0,-6.453134415503834e+307,-2.2250738585072014e-308,1e-15,-228003.00463890494,1.9400411482062907,-197.7029619198281,Infinity];
function f88() {
    const v91 = new Uint8Array(256);
    return v91[44610];
}
try { f88(); } catch (e) {}
const v96 = Symbol.toPrimitive;
Symbol.for(v96.description);
WeakMap[v96] = f88;
const v100 = /(?:a*)+q(?<a>.)/guds;
v100.unicodeSets = v100;
function f101(a102) {
    a102.dotAll = a102;
    const o106 = {
        set b(a104) {
        },
        get d() {
            return a102;
        },
        __proto__: v100,
    };
    return o106;
}
const v107 = f101(v100);
const v108 = v107?.constructor;
try { new v108(190, 190); } catch (e) {}
new WeakMap();
9 & 9;
const v116 = ("-1723624938").slice(9, "g").normalize();
try { v116.substring(v78, WeakMap); } catch (e) {}
const t105 = 9;
new t105();
const o119 = {
};
for (let v120 = 0; v120 < 5; v120++) {
    let v123 = -2147483649 * v120;
    ++v123;
    Math.tan(v123);
}
class C126 {
    constructor(a128, a129) {
        a129.sup(v116, "-1723624938").toLocaleLowerCase();
    }
}
C126.d = C126;
const v132 = /(x)(x)(x)\1/uis;
function f133(a134, a135, a136, a137) {
    const o143 = {
        [v132](a139, a140, a141, a142) {
        },
    };
}
f133.arguments = f133;
class C144 {
}
const v145 = [-1024,536870889,65536,65536];
try { v145.findLastIndex(Uint8ClampedArray); } catch (e) {}
const o147 = {
};
o147.b = o147;
function f148() {
    gc(256);
    function* f152(a153) {
    }
    const o156 = {
        toString() {
        },
        n() {
        },
    };
}
try { f148.toString(); } catch (e) {}
f148();
function f159() {
    function f160(a161) {
        try {
            const o168 = {
                268435439: f160,
                get d() {
                    return this;
                },
                p(a164, a165) {
                    try {
                        this.fuck(0, v107);
                    } catch(e167) {
                    }
                    return this;
                },
            };
        } catch(e169) {
        }
    }
    try {
    } catch(e170) {
    }
}
const v171 = (a172, a173, a174, a175) => {
    function F176(a178, a179, a180, a181) {
        if (!new.target) { throw 'must be called with new'; }
    }
};
