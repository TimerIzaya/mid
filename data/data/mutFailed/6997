const v2 = new Uint8Array(4);
new Float32Array(10);
new Uint16Array(152);
new WeakMap(10);
[1540086764,2147483647,4096];
[-4294967297];
[-9,4,749772231,15,7379,10];
function F14() {
    if (!new.target) { throw 'must be called with new'; }
}
const v16 = new F14();
function f17(a18, a19) {
    const o20 = {
        "e": v16,
    };
    return o20;
}
f17();
f17();
function f23() {
    return WeakMap;
}
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v25 = -4294967297n;
const v26 = v25--;
const v27 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v28 = [601759695];
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f30(a31, a32, a33, a34) {
    function f35() {
        try { ("Vre").codePointAt(); } catch (e) {}
        const v41 = new BigInt64Array(257);
        new BigUint64Array(v41);
        let v43 = Float64Array;
        v43 = a32;
        b = v28;
        v24.matchAll;
        try {
            v29.forEach(a32);
            const o47 = {
                "execution": "async",
            };
            return o47;
        } catch(e48) {
        }
        const o79 = {
            "c": v25,
            "c": v28,
            valueOf(a50, a51) {
                return a50;
            },
            [v25](a53, a54, a55, a56) {
                ("boolean").split("toString");
                const v62 = /8[\cA]v/uisy;
                function f63(a64, a65) {
                    return 536870912;
                }
                v62[Symbol.toPrimitive] = f63;
                eval();
            },
            "arguments": v27,
            "c": Uint16Array,
            ...v2,
            "MIN_VALUE": "Vre",
            [v26](a70, a71, a72, a73) {
                class C75 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            256: a34,
        };
    }
    f35();
    %OptimizeFunctionOnNextCall(f35);
    return f30;
}
for (let v81 = 0; v81 < 5; v81++) {
    f30(v81, v25, v27, v81);
}
