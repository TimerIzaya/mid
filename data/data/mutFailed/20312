const v2 = new Uint32Array(4);
5 | 5;
let v5 = 5 & 5;
const v6 = ~v5;
v5++;
Uint8ClampedArray.e = Uint8ClampedArray;
const v9 = new Uint8ClampedArray(5);
try { v9.reduce(v9); } catch (e) {}
1503 / 1503;
Int8Array.prototype = Int8Array;
const v14 = new Int8Array(1503);
function f15(a16, a17, a18, a19) {
    a16 & a16;
    a17--;
    a18 & a18;
    ~a16;
    a19 | a19;
    let v25 = -a17;
    v25--;
    a19--;
    const o33 = {
        [Int8Array]: a17,
        [4]: a19,
        __proto__: v2,
        "e": a18,
        "g": 1503,
        "f": v2,
        [a16]: a17,
        "a": a17,
        "b": Uint8ClampedArray,
        get d() {
            const v30 = [this,a19];
            Reflect.apply(v2.reduceRight, v9, v30);
            return v14;
        },
    };
    try { o33.toLocaleString(); } catch (e) {}
    return o33;
}
f15(5, 4, 1503, 5);
const v36 = f15(4, 5, 4, 1503);
try { v36.toLocaleString(); } catch (e) {}
const v38 = f15(4, 4, 4, 5);
try { v38.toLocaleString(); } catch (e) {}
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    a42 != a42;
    a43 != a43;
    const v46 = this?.__lookupGetter__;
    try { v46.toString(); } catch (e) {}
    try { new v46(v38); } catch (e) {}
    -(a42 - a42);
    const v51 = this?.propertyIsEnumerable;
    try { new v51(1503); } catch (e) {}
    const v53 = a43 * a43;
    v53 !== v53;
    const v55 = v53 | v53;
    v55 + v55;
    try {
        this.e = a43;
    } catch(e57) {
    }
    try {
        this.h = Uint8ClampedArray;
    } catch(e58) {
    }
}
F40.caller = F40;
new F40(1503, 1503);
const v60 = new F40(v14, v9);
const v61 = v60?.constructor;
let v62;
try { v62 = new v61(v38, v38); } catch (e) {}
const v63 = new F40(v60, v60);
1783 - 1783;
const v66 = -1783;
let v70;
try { v70 = Int8Array.from(Int8Array); } catch (e) {}
v70.BYTES_PER_ELEMENT;
const v72 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v72[9] = v72;
const v73 = [601759695];
const v74 = [1073741824,1073741823,1376142744,1073741825];
try { v74.push(F40); } catch (e) {}
function f77(a78, a79, a80, a81) {
    function f83() {
        const o86 = {
        };
        return a78;
    }
    f83();
    try { v74[a80](); } catch (e) {}
}
try { new f77(1503, v74, 964598.6714444079, 964598.6714444079); } catch (e) {}
const v90 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v91 = v62?.filter;
v91.length = v91;
try { new v91(v63); } catch (e) {}
const v93 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
let v94;
try { v94 = v93.reduceRight(Uint32Array); } catch (e) {}
try { new Symbol(); } catch (e) {}
v62.species;
~268435440;
const v101 = Uint8Array.length;
v101 >>> v101;
let v103 = ~v101;
v103--;
const v105 = new Uint8Array(268435440);
const v106 = v105?.constructor;
let v107;
try { v107 = new v106(v2, v90, Float32Array); } catch (e) {}
v6[1];
v107[0];
Uint8ClampedArray.length;
Uint8ClampedArray.prototype = Uint8ClampedArray;
for (let v112 = 0; v112 < 32; v112++) {
    const v113 = v112 << v112;
    const v114 = v112 >> v112;
    const v116 = "object" + v112;
    let v117;
    try { v117 = v116.blink(); } catch (e) {}
    try { v117.matchAll(v114); } catch (e) {}
    const v119 = v116?.slice;
    v119.name = v113;
    const v120 = v119?.apply;
    try { new v120(v119, v116); } catch (e) {}
    try { new v119(v112, v112); } catch (e) {}
    const v123 = v116.trim;
    try { v123(); } catch (e) {}
    try { v123(); } catch (e) {}
    v123.name;
    try { v123(); } catch (e) {}
}
const v128 = [1000000.0,69.5407062634481,-1e-15,NaN];
let v129;
try { v129 = v128.push(v2); } catch (e) {}
v129++;
0 - 0;
const v134 = Int8Array.asyncIterator;
Symbol.for(v134.description);
v128[v134] = v90;
9 / 9;
const v141 = new Uint8ClampedArray();
let v142;
try { v142 = v141.entries(); } catch (e) {}
try { v142.next(); } catch (e) {}
const v144 = v142?.valueOf;
try { new v144(); } catch (e) {}
[-0.0,-1000.0,-1000000000.0,609397.4823424052,1000000000000.0,-609042.2531829935,1.7976931348623157e+308,-6.6169861811628e+307];
class C148 {
}
try { C148.toString(); } catch (e) {}
try { C148.toString(); } catch (e) {}
const v151 = new C148();
const v152 = v66?.constructor;
try { new v152(); } catch (e) {}
const v154 = v151.__defineSetter__;
try { new v154(v94, v94); } catch (e) {}
v154.e = v154;
try { new v154(v154, v73); } catch (e) {}
try { new v154(C148); } catch (e) {}
