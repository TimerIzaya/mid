const v3 = [65536];
[5,1141184731];
const v5 = [-26612];
v5[0] = v5;
new Uint16Array(8);
try { Uint8Array.bind(16); } catch (e) {}
const v12 = new Uint8Array(512);
v12[308] = v12;
new BigInt64Array(6);
function f16() {
}
const v17 = f16();
let v19 = 5;
v19++;
const v21 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { new Uint32Array(BigInt64Array, v12, v3); } catch (e) {}
const v24 = new Uint32Array();
let v25 = -6n;
const v26 = v25--;
const v27 = [601759695];
const v28 = [1073741824,1073741823,1376142744,1073741825];
function f30(a31, a32, a33, a34) {
    a31.cause = f16;
    const v35 = a31.constructor;
    try { v35.bind(a33); } catch (e) {}
    v35.BYTES_PER_ELEMENT = v35;
    try { v35(); } catch (e) {}
    arguments[0] = arguments;
    let v39 = arguments.length;
    let v40 = v39++;
    v40--;
    function f42() {
        let v44;
        try { v44 = ("Vre").toLocaleLowerCase(); } catch (e) {}
        try { v44.link(v40); } catch (e) {}
        let v46;
        try { v46 = v44.padStart(); } catch (e) {}
        try { v46.search("Vre"); } catch (e) {}
        const v48 = ("Vre").charAt();
        v48[0] = v48;
        let v49;
        try { v49 = ("Vre").codePointAt(); } catch (e) {}
        v49++;
        v49 === v49;
        Float64Array.prototype = Float64Array;
        v21.length;
        const o72 = {
            "c": v25,
            "a": v49,
            [v26](a55, a56) {
            },
            [v26](a58, a59, a60, a61) {
                eval();
            },
            "c": v27,
            valueOf(a65, a66) {
            },
            1073741824: v24,
            [v25](a68, a69, a70, a71) {
            },
            "arguments": 512,
            256: a34,
        };
    }
    try { new f42(); } catch (e) {}
    try { f42(); } catch (e) {}
    const v75 = f42();
    try { Array(arguments); } catch (e) {}
    const v78 = Array(a34);
    v75[0] = v78;
    try { v78.findLast(); } catch (e) {}
    try { new Uint8Array(a31, v25, arguments); } catch (e) {}
    const v82 = new Uint8Array();
    try { v82.copyWithin(v39, v82); } catch (e) {}
    let v84;
    try { v84 = v82.lastIndexOf(v19); } catch (e) {}
    v84 + v84;
    const t76 = v82.buffer;
    t76.constructor = f16;
    try { Int32Array(); } catch (e) {}
    const t80 = 522675525n;
    const v89 = new t80();
    try { v89.entries(); } catch (e) {}
    v78[3];
    for (let v92 = 0; v92 < 5; v92++) {
        const v93 = v92 !== v92;
        v93 || v93;
    }
    %OptimizeFunctionOnNextCall(f42);
    v82[0];
    function F96(a98, a99, a100, a101) {
        if (!new.target) { throw 'must be called with new'; }
        ~a98;
    }
    try { new F96(v78, Array, a33, a33); } catch (e) {}
    new F96(65536, v17);
    ("find")[3];
    try { v28["find"](..."find", a34, ...v27, ...v28, ...522675525n); } catch (e) {}
}
for (let v108 = 0; v108 < 10; v108++) {
    v108 / v108;
    f30(v24);
}
%OptimizeFunctionOnNextCall(f30);
f30(v26);
