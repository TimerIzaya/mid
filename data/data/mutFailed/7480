const o6 = {
    set b(a2) {
        function f3(a4) {
            return f3;
        }
        class C5 extends f3 {
        }
    },
};
new Int8Array(255);
new BigUint64Array(3);
let v14 = -1;
function f15(a16, a17) {
    0 < 5;
    const o29 = {
        [a16](a22, a23, a24, a25) {
            [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
        },
        "a": a16,
        set b(a28) {
            v14 <<= v14;
        },
    };
}
new BigInt64Array(2);
new Int8Array(9);
const v36 = new Set();
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a39;
    } catch(e41) {
        for (let [v42,v43] of a39) {
        }
    }
    this.h = v36;
    -256n >> -256n;
    try {
        v36[this];
        [WeakSet];
        new F37();
        this.b = Set;
    } catch(e50) {
    }
}
class C52 {
}
const v53 = new C52();
function f54(a55, a56, a57, a58) {
    function f59(a60, a61) {
        return f59;
    }
    const v62 = f59(v53, C52);
    new BigUint64Array(2147483647);
    const v70 = new Float32Array(4096);
    v70.lastIndexOf(1.3174607869926752e+308);
    Math.max(a56);
    class C75 extends Date {
        static [v62];
        static [0.0] = v53;
    }
    return v62;
}
for (let v76 = 0; v76 < 10; v76++) {
    f54();
}
%OptimizeFunctionOnNextCall(f54);
new Uint16Array([-2023,8,-5,-19182,268435441]);
([]).some();
f54();
