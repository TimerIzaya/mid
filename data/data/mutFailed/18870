function f3() {
    return 1934195179n;
}
class C4 {
    #p(a6, a7) {
        Object.defineProperty(this, 10, { configurable: true, enumerable: true, value: 5n });
        const o9 = {
        };
        gc(o9);
        const v14 = new BigUint64Array(10);
        for (const v16 in v14) {
            try { v16.blink(); } catch (e) {}
            new Float64Array(2147483647);
        }
        super[this];
        function f20() {
        }
        function f22(a23, a24, a25, a26) {
            const v27 = typeof 2147483647;
            const v29 = ("undefined").repeat;
            let v30;
            try { v30 = v29(v27); } catch (e) {}
            return v30;
        }
        super[8n];
        return this;
    }
    3;
    constructor(a33, a34, a35) {
        super();
    }
    static [f3] = f3;
    [8n] = f3;
    11;
    n(a37, a38) {
        super[f3] = a38;
        2.0 & 0.5050925537936855;
        try {
            -2147483648 ^ 2.0;
            [Symbol,Symbol,Symbol];
            function f47(a48, a49, a50) {
                return a50;
            }
            this.fuck(5n, 2.0, f3);
        } catch(e52) {
        }
        return 5n;
    }
}
new C4();
new C4();
new C4();
class C61 {
    constructor(a63) {
        function f64() {
        }
        const v65 = f64();
        const v66 = [];
        function F67(a69, a70, a71) {
            if (!new.target) { throw 'must be called with new'; }
            a69 === a70;
        }
        function f73() {
            const v74 = new F67();
            const t64 = v74.constructor;
            new t64(v65, v66);
            const t66 = v74.constructor;
            new t66();
        }
        f73();
        %OptimizeFunctionOnNextCall(f73);
        f73();
    }
}
new BigUint64Array(5);
const v84 = [];
function f85(a86, a87, a88, a89) {
    function f90() {
        return f85;
    }
    class C91 extends f90 {
    }
    const v92 = new C91();
    const v93 = v92.toString();
    for (let i = 0; i < 5; i++) {
        ["object",v93,"object",v84];
    }
    return v93;
}
new Int8Array(3348);
new Uint8Array(255);
function f102(a103, a104, a105, a106) {
    function f108() {
        return -17353;
    }
    function f109(a110) {
        return a106;
    }
    Object.defineProperty(arguments, 7, { configurable: true, get: f108, set: f109 });
    arguments[2] = arguments;
    return Uint8Array;
}
function F111(a113, a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
}
const v116 = new F111(-17353, -17353, f102);
v116.constructor = f102;
const t107 = v116.constructor;
t107(-17353, -17353, Uint8Array);
