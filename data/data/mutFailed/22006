const v1 = new Promise();
class C2 {
    static #a = Promise;
    constructor(a4) {
        typeof Promise === "974441731";
    }
    [v1] = Promise;
    static #o(a9) {
        function f10() {
            return this;
        }
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = f10;
            } catch(e15) {
            }
            try {
                this.h = v1;
            } catch(e16) {
            }
        }
        const v17 = new F11(this, this);
        new F11(this, v17);
        const v19 = new F11(v17, v1, v1, F11, this);
        return v19;
    }
}
const v20 = new C2(v1);
const v21 = new C2(Promise);
const v22 = new C2(v21);
class C23 {
    static [Promise];
    constructor(a25, a26, a27) {
        a26 <= a27 ? a26 : a27;
    }
    #a = v20;
    2147483649;
    get e() {
        return Promise.prototype;
    }
    #h = v21;
}
const v32 = new C23(C2, v22, v21);
const v33 = new C23(v22, v32, v32);
const v34 = new C23(v22, v1, v33);
function f35() {
    return v20;
}
function F36(a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v33;
    } catch(e41) {
    }
    try {
        this.f = Promise;
    } catch(e42) {
    }
}
new F36(v33, C23, v20);
new F36(v33, v34, v32);
new F36(v32, C2, v32);
const v46 = [];
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this.g;
    try { new v57(a56, v46); } catch (e) {}
    a54[2];
}
new F51("ceil", "pop", "ceil", "n");
new F51("ceil", "ceil");
