const v0 = [1000000000.0,1000000000000.0,710.3411579614699,6.89784368442837,Infinity,188.24829364957532,8.422699235371126e+307,-3.0,0.13019542613550594];
const v1 = [4.595408678590346,634.2520230005675,1.678658443574512e+308,0.03854419317902913];
const v2 = [97825.52764725592,0.0,2.2250738585072014e-308,0.598390972163264,-710.1582294554485];
const v3 = [-65535];
const v4 = [387831676];
([-22946,-7269,-1341863250,9007199254740990,-704961140])[v0];
new Set();
class C13 {
    static get a() {
        const t9 = 4;
        t9[2] = v1;
        v1["flat"](-1);
        return this;
    }
    constructor(a18, a19, a20) {
        class C21 extends Set {
            #h;
            static #b;
            d;
            static #valueOf(a23, a24, a25) {
            }
            #a;
            constructor(a27, a28) {
            }
        }
        new C21();
        new C21();
        new C21();
    }
    toString(a36, a37) {
        let v38 = undefined;
        const o39 = {
        };
        v38 = o39;
        function f40() {
            const v41 = [f40,f40,f40,f40];
            class C43 extends v41.constructor {
            }
            const v44 = new C43();
            const v45 = v44.constructor;
            const v46 = v45.bind();
            try { v46(v46, v41, f40, v46, v45); } catch (e) {}
            return C43;
        }
        f40();
        %OptimizeFunctionOnNextCall(f40);
        let v49;
        try { v49 = a37.values(); } catch (e) {}
        a = v49;
        return v2;
    }
    static #d = Set;
}
const v50 = new C13(v3, v0, v1);
new C13(v1, v4, v50);
new C13(v4, v4, v1);
new Int8Array(512);
new BigInt64Array(16);
new Uint8ClampedArray(15);
const v62 = `
    v4.__proto__;
`;
const v65 = eval(v62);
Math.cos(-1567809689);
new v3();
function f70(a71, a72, a73) {
    'use strict';
    return a71;
}
const v74 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v77 = new Uint32Array(v74, 2684);
const v79 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v80 = [601759695];
const v81 = [1073741824,1073741823,1376142744,1073741825];
function f83(a84, a85, a86, a87) {
    function f88() {
        let v91 = Float64Array;
        v91 = a85;
        try {
        const t0 = -4294967295;
        new t0("Vre", "Vre", -4294967295, -4294967295);
        } catch (e) {}
        function F93() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = 268435439;
            } catch(e96) {
            }
        }
        const v97 = new F93();
        return v97;
        b = v80;
        const v98 = v74.length;
        try {
            v81.forEach(a85, v74);
        } catch(e100) {
        }
        const v101 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v103 = Symbol.toPrimitive;
        const o107 = {
            toString(a105, a106) {
                a105 *= v103;
                return v91;
            },
        };
        const o130 = {
            [522675525n](a110, a111) {
            },
            "c": v80,
            valueOf(a113, a114) {
            },
            [v98](a116) {
            },
            [-1]: 2684,
            1073741824: v77,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "arguments": v101,
            [-4294967297n](a118, a119, a120, a121) {
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v79,
            256: a87,
            ...v80,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "apply": f88,
            "a": o107,
            "type": "Vre",
            ...v0,
            ...v65,
            "type": "Vre",
            "c": 522675525n,
            ["Vre"](a125, a126) {
            },
            __proto__: v101,
            n(a128, a129) {
            },
            6: -268435456,
        };
        return o130;
    }
    f88();
    const v133 = new Int8Array();
    const v134 = v133.buffer;
    eval("");
    Uint32Array[2] = 1;
    v134.slice(2147483648);
    %OptimizeFunctionOnNextCall(f88);
    let v142;
    try { v142 = v81["find"](..."find", a87, ...v80, ...v81, ...522675525n); } catch (e) {}
    const v143 = v142 <= a86;
    class C145 {
        [-2] = 31876;
    }
    new C145();
    return v143;
}
for (let v147 = 0; v147 < 10; v147++) {
    f83(v81, v147, v147, v147);
}
%OptimizeFunctionOnNextCall(f83);
f83(f83, v79, 2684, f83);
