const v3 = [-4294967296n,-4294967296n];
[-4294967296n];
const v5 = [v3];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -1n;
    } catch(e12) {
    }
}
const v13 = new F6(919030334n, -4294967296n, -1n, -4294967296n);
new F6(-4294967296n, -1n, 919030334n, F6);
const v15 = new F6(919030334n, 919030334n, 919030334n, v5);
F6 == F6;
const v20 = new Date();
throw v20;
const v22 = Symbol.iterator;
const o31 = {
    [v22]() {
        let v24 = 10;
        const o30 = {
            next() {
                v24--;
                const v28 = v24 == 0;
                const o29 = {
                    "done": v28,
                    "value": v24,
                };
                return o29;
            },
        };
        return o30;
    },
};
let v34;
try { v34 = (-12n).getTime(-12n, -816409267); } catch (e) {}
try {
    v13.valueOf = v34;
} catch(e35) {
}
const v37 = Symbol.iterator;
const o46 = {
    [v37]() {
        let v39 = 10;
        const o45 = {
            next() {
                v39--;
                const v43 = v39 == 0;
                const o44 = {
                    "done": v43,
                    "value": v39,
                };
                return o44;
            },
        };
        return o45;
    },
};
const o48 = {
    "type": "minor",
};
function f51(a52, a53) {
    const v54 = -a52;
    v54 >> v54;
    const o56 = {
    };
    return o56;
}
f51().propertyIsEnumerable;
class C61 {
}
const v62 = new C61();
const v63 = [5];
try {
    new C61();
} catch(e65) {
}
v15[Symbol.unscopables] = f51;
const v69 = [];
Reflect.apply(v63.fill, v62, v69);
