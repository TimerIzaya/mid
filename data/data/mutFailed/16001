function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const o4 = {
    };
    gc(o4);
    new Date();
    try {
        this.h = 536870888;
    } catch(e8) {
    }
    try {
        with (this) {
        }
        this.f = 536870888;
    } catch(e13) {
    }
}
const v14 = new F0();
const v15 = new F0();
const v16 = new F0();
[v15,[v16,[v15,v15,v14,v15]]];
const v22 = new Uint8Array(2);
new Float64Array(127);
new Uint16Array(197);
function f29() {
    class C31 {
        constructor(a33, a34) {
            try {
                a34.length = 5;
            } catch(e36) {
            }
        }
    }
    new C31("object", "object");
}
const v38 = [601759695];
class C39 {
}
const v40 = new C39();
const v41 = v40.__defineGetter__;
try { v41(v41, v40, C39, v41); } catch (e) {}
const v43 = [1073741824,1073741823,1376142744,1073741825];
new F0();
[4.0,-1.0,0.21593496069677376,3.0,2.0,2.220446049250313e-16];
[-5.461251115413148,-1.111567151153791e+308,0.21397369104337227,4.0];
[-8.806092170021778,4.126299882953223,-9.130894521468729e+307,0.9290600864953391,1.7976931348623157e+308,0.5472656262529462,9.983112971672128e+307,0.7646397561946229,-506942.1899473663];
Float64Array();
function F50(a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    a53 === a53;
    new BigUint64Array();
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
function f59() {
    for (let v60 = 0; v60 < 5; v60++) {
        const v61 = new F50(F50, f59, v60);
        const t56 = v61.constructor;
        new t56();
    }
    return f59;
}
let v64;
try { v64 = v22.lastIndexOf(v14, 197); } catch (e) {}
function f66(a67, a68, a69, a70) {
    function f72() {
        return 522675525n;
    }
    f29();
    const v76 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
    new Int16Array(v76);
    const v80 = Symbol.toPrimitive;
    const o84 = {
        [v80]() {
            Symbol.iterator;
        },
    };
    const v85 = new Int8Array();
    v85.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f72);
    let v90;
    try { v90 = v43["find"](..."find", a70, ...v38, ...v43, ...522675525n); } catch (e) {}
    v90 <= a69;
    return arguments;
}
for (let v92 = 0; v92 < 10; v92++) {
    Math.atan(5.134563044869008e+307);
    new Int8Array();
    f66(v92, v92, f29, 522675525n);
}
%VerifyType(Float64Array);
Int16Array[0] = -27833;
function F101(a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    f66(f66, v14, "cos", v64);
} catch(e107) {
}
%OptimizeFunctionOnNextCall(f66);
f66();
