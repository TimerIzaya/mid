class C3 extends Float32Array {
    constructor(a5, a6, a7) {
        super(a7);
    }
}
class C9 {
    static get c() {
        new Date();
        const t8 = "J0KW";
        t8[6] = this;
        return ("J0KW")["repeat"]("J0KW");
    }
    g = "J0KW";
    b;
}
new C9();
new C9();
new C9();
[52632,1024,-1073741824,1073741824,23464];
[-14,-4294967296,941020105,-1048746766,18937,-5,-4,-9007199254740991];
Promise.d = Promise;
class C22 extends SharedArrayBuffer {
}
new C22();
const v24 = [-4294967296,-33040,-64671,1024,-1073741824,907896365,-268435456];
function f25() {
    Promise.name;
    let v28 = -7;
    v28--;
    const v31 = f25("m", "m", f25);
    const v34 = [601759695];
    try { v34.sort(v34); } catch (e) {}
    const v36 = [1073741824,1073741823,1376142744,1073741825];
    function f38(a39, a40, a41, a42) {
        arguments.toString();
        function f45() {
            const v47 = ("Vre")?.toLocaleUpperCase;
            try { new v47(); } catch (e) {}
            try { ("Vre").fixed(); } catch (e) {}
            let v51 = -268435456;
            v51--;
            -(v51 + v51);
            const o68 = {
                "c": -4294967297n,
                [522675525n](a56, a57) {
                },
                ..."Vre",
                "maxByteLength": -128,
                "c": v34,
                valueOf(a59, a60) {
                },
                "e": -4294967295,
                "e": v51,
                "maxByteLength": -4294967295,
                "arguments": v24,
                ...v34,
                "type": "Vre",
                ..."Vre",
                valueOf(a62, a63) {
                },
                ..."Vre",
                4: "Vre",
                "c": v51,
                "type": "Vre",
                toString(a65, a66, a67) {
                },
                6: v51,
            };
            try { o68.valueOf(o68, -128); } catch (e) {}
            return "Vre";
        }
        f45.length;
        f45();
        const v73 = new Int8Array();
        try { v73.findIndex(v31); } catch (e) {}
        %OptimizeFunctionOnNextCall(f45);
        ("find").strike();
        try { v36["find"](..."find", a42, ...v34, ...v36, ...522675525n); } catch (e) {}
    }
    for (let v78 = 0; v78 < 5; v78++) {
        f38();
    }
    const v81 = Array(4087);
    const v83 = new WeakSet();
    const o88 = {
        set b(a85) {
            const v86 = v83.constructor;
            class C87 extends v86 {
                [Array] = Array;
                static #e = v86;
            }
        },
    };
    for (const v89 of v81) {
    }
    return 4087;
}
parseInt([-5.034735835956977e+307,-385.25474675985527], 127);
const o94 = {
};
try {
    o94.g = "J0KW";
} catch(e95) {
}
%PrepareFunctionForOptimization(f25);
f25();
%OptimizeFunctionOnNextCall(f25);
f25();
