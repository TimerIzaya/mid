const v3 = [16992,9007199254740991,-1997205507,16,-28177,2024601267];
const v4 = [2147483649,5,42155,102324193,45801,268435440,-15];
const v5 = [1073741825,-2147483649,-4294967296,-983,-9007199254740990,129,0];
-0.0 + -0.0;
class C10 {
    get e() {
        const o13 = {
        };
        const v15 = new Proxy(v3, v3);
        [-2];
        [-4.0,o13,-6.966107211667687,7,v15];
        [-0.0,-4.0,-2,v5,this];
        return o13;
    }
    #h = 9007199254740992;
    static [-0.0];
    static #e;
    static #d = v4;
}
const t19 = /QK/gvdimy;
t19.__proto__ = length;
const v22 = Date.constructor;
const v23 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
function f24(a25, a26, a27) {
    try { a26.groupToMap(v22); } catch (e) {}
    return a26;
}
f24(v3, v23).fill();
C10.length = C10;
new C10();
new C10();
const v33 = new C10();
function f34() {
    return v33;
}
try { new Uint8ClampedArray(-2, -4.0, -4.0); } catch (e) {}
const v38 = new Uint8ClampedArray(3144);
try { v38.reduce(-6.966107211667687); } catch (e) {}
try { new Int16Array(v3, 3144, C10); } catch (e) {}
new Int16Array(255);
new Uint8ClampedArray(6);
function F47() {
    if (!new.target) { throw 'must be called with new'; }
    1469121131 / 1469121131;
    this.g = 1469121131;
}
const v51 = new F47();
const v52 = new F47();
const v53 = new F47();
v53.e = v53;
v53.g = v53;
function f54(a55, a56) {
    a55.b = a55;
    const v57 = a56.g;
    const v58 = v57 != v57;
    v58 || v58;
    const o68 = {
        set c(a61) {
            new F47();
        },
        [-2]: a55,
        get h() {
            /[]ba{12,3bd(x)(x)(x)\4*/imsy;
            /\p{Script_Extensions=Greek}tA(?:a+)*/vdim;
            const v66 = /a{12,3b/disy;
            try {
                a55.f = v66;
            } catch(e67) {
            }
            return v51;
        },
        "d": F47,
        "b": v51,
        ...v52,
        "h": a55,
        "g": v52,
    };
    a56[6] = o68;
    let v69;
    try { v69 = v52.p(Int16Array, v33); } catch (e) {}
    9007199254740992 ** v69;
    Object.defineProperty(a55, 255, { configurable: true, enumerable: true, get: f54, set: f34 });
    return o68;
}
f54.length;
const v73 = f54(v51, v51);
const v74 = f54(v53, v52);
v74.g = v74;
const v75 = f54(v51, v53);
v75[6] = v75;
-10;
let v80 = 1000000.0;
const v81 = v80++;
v81 - v81;
const v85 = [F47];
const v86 = [v85,v85,v52,10,-773569.6068609683];
v86.e = v86;
const v87 = [-773569.6068609683,v86];
function f88() {
}
const v89 = /a\sc?/gdi;
v89.unicodeSets;
v89.b = v89;
const v91 = /xe+/gudimsy;
v91.dotAll = v91;
const o92 = {
};
function f93(a94) {
    return a94;
}
try { ("atan2").match(f93); } catch (e) {}
function F97(a99, a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    a100.prototype;
    try { a101.groupToMap(f93); } catch (e) {}
    this.a = a99;
    let v105 = 536870912;
    v105 = 210;
    function F106(a108, a109, a110) {
        if (!new.target) { throw 'must be called with new'; }
    }
    try {
        this.f = a101;
    } catch(e111) {
    }
}
const v112 = /i(?<a>(?<b>(?<c>(?<d>.).).).)/gvisy;
v112.b = v112;
-1707622606 + -1707622606;
-1582101658 + -1582101658;
-1582101658 | -1582101658;
-1582101658 / -1582101658;
const t128 = "YPzzJ";
t128[2] = "YPzzJ";
let v122;
try { v122 = ("YPzzJ").toLocaleUpperCase(); } catch (e) {}
try { v122.localeCompare(v122); } catch (e) {}
try { v122.match(v112); } catch (e) {}
try { v122.normalize(); } catch (e) {}
try { (9007199254740992).fontsize(F47); } catch (e) {}
let v128;
try { v128 = ("1").normalize(); } catch (e) {}
const v129 = ("1")?.slice;
try { v129.call(v87); } catch (e) {}
try { new v129(2, 2); } catch (e) {}
let v132 = 1236059864;
v132 < v132;
const v134 = v132--;
v134 * v134;
const v136 = v132 >>> v132;
v136 & v136;
v132 + v132;
const v139 = [];
const t153 = [v139];
const v141 = delete t153[0];
!(!v128);
let v144 = 129;
v144++;
const v146 = ("1")[0];
let v147;
try { v147 = v146.sup(); } catch (e) {}
v147[2];
const v149 = v146.substring(v144);
try { v149.trimEnd(); } catch (e) {}
try { v149.fontsize(v89); } catch (e) {}
new BigInt64Array(5);
/[.ma\Sc]/vdimsy.exec(Int16Array);
const v158 = 9569 ^ 9569;
v158 != v158;
function f161() {
    function f162(a163) {
        return 9569;
    }
    class C164 extends f162 {
    }
    try { new C164(); } catch (e) {}
    try { C164(); } catch (e) {}
    C164.name = C164;
    let v168 = 268435440;
    const v169 = v168--;
    const v170 = v169 | v169;
    try { ("1").charAt(f161); } catch (e) {}
    let v173;
    try { v173 = ("cJ").padStart(); } catch (e) {}
    try { v173.charAt(f162); } catch (e) {}
    let v175;
    try { v175 = v173.codePointAt(); } catch (e) {}
    v175--;
    const o203 = {
        "d": v168,
        "a": 4.0,
        "c": v175,
        "e": v169,
        __proto__: v112,
        ["cJ"]: Uint8ClampedArray,
        "f": F47,
        [v146](a178, a179, a180) {
            Object.defineProperty(v112, v141, { enumerable: true, value: -1707622606 });
            return 4.0;
        },
        "b": v149,
        /*
        __proto__: "cJ",
        */
        "f": "cJ",
        ..."cJ",
        8: f161,
        "h": "cJ",
        valueOf(a182) {
            const o183 = {
                __proto__: this,
                2261555780: "cJ",
            };
            const v185 = new Int8Array(v170);
            v185.indexOf();
            class C187 {
                constructor(a189) {
                    for (let v190 = 0; v190 < 32; v190++) {
                        v190 === v190;
                        for (let v192 = 0; v192 < 50; v192++) {
                        }
                        new Int8Array(520);
                        for (let v196 = 0; v196 < 5; v196++) {
                        }
                        0 || Int8Array;
                        Math.tanh();
                        function f201() {
                            return this;
                        }
                    }
                }
            }
            super.toStringTag;
            return this;
        },
        "c": "cJ",
    };
    o203[8] = o203;
}
f161.f = f161;
const v204 = f161();
const v205 = f161();
const v206 = f161();
const v207 = [v206,v204,v205,v205];
const v208 = v207?.flat;
try { new v208(); } catch (e) {}
let v210;
try { v210 = v5.shift(); } catch (e) {}
v210 - v210;
const v212 = [v139];
let v213;
try { v213 = v212.reduce(9569); } catch (e) {}
const v214 = [v206,v212,v212,v207];
const v215 = v214?.reduce;
try { new v215(10); } catch (e) {}
v215.length = v215;
let v217;
try { v217 = new v215(-9007199254740990); } catch (e) {}
const v218 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
const v219 = [2033313755,-16,16,16,-24747,6,256];
try { v219.map(9007199254740992); } catch (e) {}
const v221 = v219[5];
v221 % v221;
v221 >> v221;
const v224 = [65535];
const v225 = v224[0];
v225 - v225;
v225 + v225;
const v229 = Set.prototype;
try { v229.entries(); } catch (e) {}
const v231 = v73?.keys;
try { new v231(); } catch (e) {}
new Set();
function F234(a236, a237, a238) {
    if (!new.target) { throw 'must be called with new'; }
    a236 + a236;
    a238[1];
    this.length = this;
    const v241 = this?.__defineGetter__;
    try { v241(a237, F47); } catch (e) {}
    try { v241(v91, F234); } catch (e) {}
    let v244;
    try { v244 = a237.entries(); } catch (e) {}
    try { v244.next(); } catch (e) {}
    this.f = a237;
}
F234.arguments = F234;
try { new F234(v136, v217, v213); } catch (e) {}
try { new F234("1", v144, "1"); } catch (e) {}
const v248 = F234.prototype;
const v249 = v248?.constructor;
try { new v249(v53, Infinity, v248); } catch (e) {}
const v251 = new F234(v207, v224, v214);
try { v251.hasOwnProperty(v207); } catch (e) {}
const v253 = new F234(v219, v207, v224);
v253.length = v218;
v253.length = v253;
try { v128(); } catch (e) {}
new f161();
-65535 >>> -65535;
-65535 & -65535;
-40695 === -40695;
const v262 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
try { v262.reverse(); } catch (e) {}
v262.g = v262;
function F264(a266, a267) {
    if (!new.target) { throw 'must be called with new'; }
    const v268 = this.constructor;
    try { v268.toString(); } catch (e) {}
    try { new v268(v218, this); } catch (e) {}
}
F264.prototype;
F264.g = F264;
268435440 % 268435440;
