new BigInt64Array(256);
new Uint8Array(2);
new Int8Array();
function f8() {
}
%OptimizeFunctionOnNextCall(f8);
new Int8Array(9);
class C12 extends BigInt64Array {
    get h() {
        function f14() {
            for (let i17 = 0, i18 = 10;
                (() => {
                    const v19 = i17 < i18;
                    const v22 = new BigUint64Array(3375);
                    let [v23,,v24,...v25] = v22;
                    v23 << v23;
                    return v19;
                })();
                i17++) {
            }
            return this;
        }
        for (let v32 = 0; v32 < 68; v32++) {
            f14();
        }
        new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
        gc();
        return BigInt64Array;
    }
    valueOf(a46, a47, a48, a49) {
    }
    constructor(a51, a52) {
        function f53(a54) {
            return Uint8Array;
        }
        const o57 = {
            "type": "function",
        };
        new Worker(f53, o57);
    }
    static #e;
    static #d;
    static [2];
    #b;
}
new C12();
new C12();
new C12();
function F62() {
    if (!new.target) { throw 'must be called with new'; }
    [[this,this],1141300185,F62];
    let v67 = [this,1141300185];
    v67++;
    Math.asinh(536870887);
    +this;
    class C75 {
        #c = "toUpperCase";
        get a() {
            const v77 = this << "toUpperCase";
            const v78 = v77 ^ v77;
            let v79;
            try { v79 = v78(v78, this, v78, v78, v77, this); } catch (e) {}
            v79[v78] <<= 1.1922093890401552e+308;
            return "Tx";
        }
        static b;
    }
    const v81 = new C75();
    try { Float64Array(35530n, v81); } catch (e) {}
    Math.h = 1141300185;
    try {
        [v81,v81];
        const o95 = {
            toString(a87, a88) {
                new Int32Array(1024);
                new SharedArrayBuffer();
                this?.__lookupSetter__;
            },
        };
        o95.toLocaleString();
        class C98 extends this.constructor {
            e = F62;
        }
        new C98();
    } catch(e100) {
        function f101(a102) {
            return a102;
        }
        class C103 extends f101 {
            d;
            static #e;
        }
    }
}
new F62();
new F62();
new F62();
const o107 = {
};
function F108() {
    if (!new.target) { throw 'must be called with new'; }
    function f110(a111) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
}
const o115 = {
    get a() {
    },
};
function f116() {
    class C117 {
        #valueOf(a119, a120, a121, a122) {
        }
    }
    const o126 = {
        valueOf(a124, a125) {
        },
    };
}
