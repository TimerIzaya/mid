let v2 = 1.6622414960177991;
class C3 {
    static {
        const v6 = [[]];
        !(v6 >= Uint16Array);
        let v10 = 6;
        v10--;
        const v13 = new Uint8Array(v10);
        const v15 = ["function",v13];
        const o16 = {
            "arguments": v15,
            "type": "function",
        };
        this.d = this;
        this.g = -3.373476158640065;
        super.g += 2.8436846516343373;
        class C18 {
        }
        const v19 = new C18();
        const v20 = v19?.__defineGetter__;
        try { new v20(2.8436846516343373, v13); } catch (e) {}
        Date.e = Date;
        const v23 = new Date(Date);
        const v24 = v23?.setFullYear;
        try { new v24(v2, "function", v6); } catch (e) {}
        const v26 = v23.toLocaleTimeString();
        try { v26.valueOf(); } catch (e) {}
        function F29(a31, a32, a33, a34) {
            if (!new.target) { throw 'must be called with new'; }
            ("entries").toUpperCase();
            ~a32;
            const v38 = this.constructor;
            try { new v38(); } catch (e) {}
        }
        const v41 = this.constructor;
        v41.length = v41;
        let v42;
        try { v42 = v41.constructor(this); } catch (e) {}
        v42.length;
        gc();
        function f46() {
            const o50 = {
            };
            return "caller";
        }
        const v51 = --v2;
        v51 + v51;
        Math.asin(257);
        !v2;
        const v55 = Math.fround(v51);
        try {
            this.fuck(this);
        } catch(e57) {
        }
        let v58 = -206.79565552697056;
        v58--;
        const o62 = {
            [v58]: 352693014,
            get g() {
            },
            "g": v58,
        };
        v55 >> v55;
        Math.cbrt(v2);
        const v65 = Math.round(v51);
        v65 & v65;
    }
    5;
}
const v67 = C3.d;
try { new v67(); } catch (e) {}
const v69 = new C3();
try { Int16Array(C3, v69, 2.8436846516343373); } catch (e) {}
new Int16Array(7);
Int32Array.prototype;
const v77 = new Int32Array();
const v79 = new BigInt64Array();
const v80 = v79?.entries;
try { new v80(); } catch (e) {}
const v82 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v83 = [-1.7976931348623157e+308];
function f84(a85, a86, a87, a88) {
    try { a85.find(a87); } catch (e) {}
    try { a87.lastIndexOf(C3); } catch (e) {}
    const o99 = {
        toString(a92, a93, a94) {
            const v95 = this?.__defineSetter__;
            try { new v95(a92, this); } catch (e) {}
            let v97 = 255n;
            v97--;
            a87[a86] = a85;
            return v97;
        },
    };
    try { o99.isPrototypeOf(a87); } catch (e) {}
    return o99;
}
const v101 = f84(v79, 129, v83);
try { v101.toString(f84, f84, -3.373476158640065); } catch (e) {}
const v103 = f84(v77, 129, v82);
for (let v104 = 0; v104 < 5; v104++) {
    const v105 = v103 % v101;
    v105 ^ v105;
    v82.b = v77;
}
v69[5] = v69;
new C3();
new C3();
[2.220446049250313e-16,2.0,-926.1642502417411,4.0,0.08655362080997653,-5.0,-1000.0];
[2.220446049250313e-16,110101.54443283472,-3.0,2.220446049250313e-16,-4.0,-0.0,-511.7954694908937,-9.691586699656504,2.0];
const v111 = [1e-15,1.5707975748881087e+308,0.2413316514559355,-2.2250738585072014e-308,4.0,-1.6784195445265534e+308,-1.0,-3.0,4.953009950088347,-6.356625586900954e+306];
try { v111.reduceRight(v67); } catch (e) {}
v111.g = v111;
try { Set.call(f84); } catch (e) {}
new Set();
-16;
-4294967295 | -4294967295;
const v121 = [-3,47741,-16128,9007199254740992,-1024,-58567,268435439,-4294967296,1807295090,-9223372036854775808];
function f122() {
    const v124 = [];
    const v126 = [0.3012804967226079,85204.01188321039,653.7200248137515,0.7021499874307531,803753.7144966745,852811.0132933464,-9.957521439166277e+307,-2.2210475327078026e+307];
    const v127 = [0.16312007947772267];
    const v128 = [NaN,-1e-15];
    class C129 {
        [1802204217] = v128;
        static 3516;
        #h;
        static 0 = 1802204217;
        constructor(a131, a132) {
        }
        static [v126] = v127;
        static 13;
        static #c = v124;
    }
    const v133 = new C129(C129, v128);
    const v134 = new C129(v133, v133);
    new C129(v134, v127);
    new Int32Array();
    return C3;
}
v121.constructor = f122;
v121.flat();
