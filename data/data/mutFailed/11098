let v0 = 128;
new Float32Array(v0);
new Uint32Array(96);
new BigInt64Array(3965);
[-2044068709,9,1465810502,-9007199254740992];
const v10 = [113835426,268435441,536870888,1396049791,-1881,-9223372036854775807,10];
[-1327587012,51214];
new Uint8ClampedArray(9);
const v17 = new Float32Array(2);
new BigUint64Array(64);
const v22 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
function f23(a24, a25) {
    return f23;
}
const v28 = new Set(v22);
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a31;
    } catch(e33) {
        for (let [v34,v35] of a31) {
        }
    }
    try {
        const t24 = v28[this];
        let v37 = delete t24?.d;
        v37 = a31;
        Math.clz32();
        Math.acos(this);
        Math.max(255);
        new F29();
    } catch(e44) {
    }
}
const v45 = new F29();
let [v46,,...v47] = v28;
const v50 = v47[Symbol.toPrimitive];
v45.toString = v50;
let v51;
try { v51 = f23(...2, ...v10, BigInt64Array, v50, 64, v17); } catch (e) {}
v51[10] = F29;
Math.sign(v0);
const v57 = (-2147483647) ** -1000.0;
Math.clz32(-1000.0);
v0--;
v57 << -1073741824;
!v57;
new F29();
new Float32Array();
function F65(a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
}
