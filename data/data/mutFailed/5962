function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C3 {
        }
        new C3();
        function f5() {
            return f5;
        }
        this.a = -2004477119;
    } catch(e6) {
    }
    try {
        this.f = -2004477119;
    } catch(e7) {
    }
    try {
        this.e = -2004477119;
        const o8 = {
        };
        function f9(a10) {
        }
        const v11 = [-0.23549034038133065];
        async function f12(a13, a14, a15, a16) {
            return await v11;
        }
    } catch(e18) {
        const v19 = [5,1436918233,13,-9223372036854775808,12,10779,268435439,-350312267,536870912];
        function f20(a21, a22, a23) {
            function f24(a25) {
                return v19;
            }
            return f20;
        }
    }
}
new F0();
new F0();
new F0();
const v29 = [0.005577692444912685,-1000.0,5.0,-0.0,383.65327553950465,-5.739835736154159,9.870585078465243e+307];
[-Infinity,954124.4333116994,1000000000000.0];
for (const v32 of "-4294967295") {
}
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    const v38 = ~-2017259196;
    const v39 = v38 | this;
    try { new v37(v39, F34, v38, -2017259196); } catch (e) {}
}
const v41 = new F34(-2017259196);
new F34(v41);
const v43 = [-5.0,-1.144202778805174e+308,400.3770792934522,-2.0,-0.0,1000000.0,2.0,0.5707331881007723,Infinity];
const v46 = new Uint16Array(4);
URIError(Float64Array);
const v52 = new WeakMap();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this?.propertyIsEnumerable;
    v57.name = v57;
    try { new v57(v52); } catch (e) {}
    try {
        this.f = a56;
    } catch(e59) {
    }
    try {
        this.d = a56;
    } catch(e60) {
    }
    try {
        this.a = a56;
        -53190 << -53190;
        1073741823 % 1073741823;
    } catch(e69) {
    }
}
const v70 = new F53(v52, F53);
const v71 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v71.find(v70); } catch (e) {}
const v73 = [601759695];
const v74 = [1073741824,1073741823,1376142744,1073741825];
try { v74.sort(v71); } catch (e) {}
let v78;
try { v78 = v74["find"](..."find", v46, ...v73, ...v74, ...522675525n); } catch (e) {}
v78 <= v46;
new BigUint64Array(1);
function f84() {
    return f84;
}
const v85 = /(?:a*)+q(?<a>.)/guds;
function f86(a87) {
    const v88 = a87.constructor;
    let v89;
    try { v89 = v88(a87, f84); } catch (e) {}
    const o91 = {
        get d() {
            return this;
        },
    };
    return v89;
}
class C92 {
}
const v95 = new Float32Array(2);
new Int32Array(v95);
for (let i100 = 0, i101 = 10; i100 < i101; i101--) {
    for (let v108 = 0; v108 < 50; v108++) {
        f86(v85);
    }
    new i101();
    const v113 = Array();
    class C114 extends Array {
    }
    class C115 extends C114 {
        [1] = v113;
    }
}
new BigUint64Array(4096);
const v123 = ["bpkzx","bpkzx","bpkzx"];
try {
    v123.length = 4;
} catch(e124) {
}
const v125 = 5493 >>> 5493;
Math.atan2(v125, v125);
try {
} catch(e127) {
} finally {
}
class C128 {
    #d = v125;
    static get f() {
        v43[114] <<= v29;
        return v43;
    }
    constructor(a131, a132, a133, a134) {
        let v136 = 268435439;
        Reflect.construct(Int8Array, []);
        let v141 = 2;
        const v142 = v141++;
        function f143(a144) {
            const o148 = {
                __proto__: v141,
                213: a144,
                p(a146, a147) {
                    return v142;
                },
            };
            return o148[213];
        }
        %PrepareFunctionForOptimization(f143);
        v136--;
        const v152 = /xyz{1,32}?/gusy;
        class C153 {
            268435440 = v152;
        }
        new C153();
    }
    /*
    constructor(a156, a157, a158, a159) {
        super();
        -1.957356125052467 >= "-4294967295";
    }
    */
    static {
        for (let v162 = 0; v162 < 25; v162++) {
            const v163 = [601759695];
            const v164 = [1073741824,1073741823,1376142744,1073741825];
            function f166(a167, a168, a169, a170) {
                try { new a167(); } catch (e) {}
                a169 << a169;
                function f174() {
                    return a167;
                }
                const v176 = new Int8Array();
                const v179 = BigUint64Array * 536870887;
                v179 - v179;
                Number.isNaN(v179 ** v179);
                function f184(a185, a186) {
                }
                try { f184(); } catch (e) {}
                const v189 = v176.buffer.__defineGetter__;
                try { v189(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f174);
                let v192;
                try { v192 = v164["find"](..."find", a170, ...v163); } catch (e) {}
                const o193 = {
                };
                v192 <= a169;
            }
            for (let v195 = 0; v195 < 5; v195++) {
                f166(this, v195, v195);
            }
        }
    }
}
