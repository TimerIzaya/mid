gc();
for (let v3 = 0; v3 < 50; v3++) {
}
const v4 = [];
class C5 {
    constructor(a7, a8, a9) {
        function f10(a11, a12, a13) {
            v4.copyWithin();
            try {
                f10(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e19) {
            }
            const v20 = this >> -268435456;
            v20 >> this;
            return -v20;
        }
        f10(this, this, a7);
    }
}
class C26 {
    static [-2.220446049250313e-16];
    toString(a28, a29) {
        super.g = a29;
        function f30() {
            return -9007199254740992;
        }
        try {
            this.e = this;
        } catch(e31) {
        }
        return -2.220446049250313e-16;
    }
}
const v32 = new C26();
try { v32.isPrototypeOf(-9007199254740992); } catch (e) {}
new C26();
new C26();
-832072.2790010942 >> -832072.2790010942;
-2147483647 | -2147483647;
function f50(a51, a52, a53) {
    const v55 = Math.round();
    async function f56(a57, a58, a59) {
        await v55;
        return f56;
    }
    class C62 {
        constructor(a64) {
            for (let v66 = 0; v66 < 32; v66++) {
                "p" & v66;
                for (let v69 = 0; v69 < 5; v69++) {
                    function f70() {
                        return f70;
                    }
                }
                const o73 = {
                    "execution": "sync",
                };
                gc(o73);
            }
        }
    }
    if ("log1p") {
        try { C62.m(); } catch (e) {}
    }
    return Uint16Array;
}
64 - 64;
BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
const v87 = new Date();
const v89 = new Set();
let [v90,,...v91] = v89;
v90.getUTCMonth(v87, v87, v90, Date, v87);
BigInt64Array.prototype = BigInt64Array;
Symbol.name;
