function f0() {
    const o9 = {
        [536870887]: 0,
        n(a5, a6) {
            try {
                super.m(a5, "12", 0, this);
            } catch(e8) {
            }
            return this;
        },
        "h": 0,
        1: 0,
        0: 536870887,
        "b": 0,
        [0]: 536870887,
        "a": "12",
    };
    return o9;
}
const v10 = f0();
const v11 = f0();
const v12 = f0();
class C13 extends f0 {
    static [v10] = v11;
    constructor(a15) {
        super();
        try {
            this();
        } catch(e17) {
        }
    }
    toString(a19, a20) {
        super[a20] = v10;
        [0.05063541349617995,0.7978486682253144,-1000.0,-5.0];
        [1.0,0.05205346443637171,-3.0,6.4407191332945];
        [1e-15];
        super.a &= v10;
        return v10;
    }
}
const v24 = new C13(f0);
new C13(v11);
new C13(v12);
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a34;
    } catch(e36) {
    }
    try {
        this.c = -60932;
    } catch(e37) {
    }
}
new F30(v24, -60932, 3, v24);
new F30(F30, 3, 3, v10);
new F30(C13, -60932, -60932, v10);
function f41() {
    const o52 = {
        toString(a46, a47) {
            try {
                super.getMinutes(a47);
            } catch(e49) {
            }
            return "object";
        },
        "type": "boolean",
        set g(a51) {
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        ["object"]: f41,
        ..."object",
        ["boolean"]: 1000000000000.0,
        [f41]: f41,
        5: f41,
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o52;
}
Error.tan(-532550611);
const v56 = [8];
const v57 = [-1024,-2147483647,-37738,-2,21596,2147483649,9007199254740992,-2039218916];
class C58 {
    static #f;
    static set f(a60) {
        a60(this, this, a60, v56);
    }
    constructor(a63) {
        this.e = v56;
    }
}
try { Error.reduceRight(4294967295, v57, C58); } catch (e) {}
const v66 = f41();
const v67 = f41();
const v68 = f41();
%VerifyType(v67);
v67 ** f41;
Object.defineProperty(v68, "c", { configurable: true, enumerable: true, set: f41 });
function F70(a72) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v74 = /8/vdiy;
        class C75 {
            constructor(a77, a78) {
                try {
                    b = v74;
                } catch(e79) {
                } finally {
                }
            }
        }
        new C75(v74, C75);
        function f81(a82, a83) {
            const o87 = {
                [122188848n](a85, a86) {
                },
            };
            return o87;
        }
        %PrepareFunctionForOptimization(f81);
        this.b = a72;
    } catch(e88) {
    }
}
const v89 = new F70(v66);
new F70(v67);
new F70(v89);
v68[128];
function F94(a96) {
    if (!new.target) { throw 'must be called with new'; }
    a96[128] = a96;
    try {
        this.f = a96;
    } catch(e97) {
    }
    try {
        this.h = a96;
    } catch(e98) {
    }
    try {
        this.d = v66;
    } catch(e99) {
    }
}
F94.e = F94;
new F94(v67);
const v101 = new F94(v68);
v101.d = v101;
new F94(v67);
function f103(a104, a105, a106) {
    a105[128];
    a106[0] = a106;
    const o124 = {
        get d() {
            function f109(a110, a111, a112) {
                'use strict';
                return a110;
            }
            return this;
        },
        ...v101,
        2074850330: a104,
        get a() {
            const o117 = {
                "execution": "async",
                "type": "major",
            };
            const v118 = gc(o117);
            class C119 {
            }
            new C119();
            Array(36862);
            return v118;
        },
        "b": a105,
    };
    o124[2074850330] = o124;
    return o124;
}
const v125 = f103(v68, v68, v66);
const v126 = f103(v67, v67, v125);
v126[2074850330] = v126;
f103(v125, v126, v67);
function F128(a130, a131, a132) {
    if (!new.target) { throw 'must be called with new'; }
    const v133 = this?.constructor;
    try { new v133(F128, F128, f41); } catch (e) {}
    a131.g = a131;
    try {
        this.d = a132;
    } catch(e135) {
    }
    try {
        this.a = a130;
    } catch(e136) {
    }
}
new F128(v67, v68, v67);
try { Uint32Array.bind(F94); } catch (e) {}
function f142(a143, a144, a145, a146) {
    const o147 = {
    };
    return o147;
}
Math?.expm1;
