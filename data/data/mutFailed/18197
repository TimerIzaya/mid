const v0 = [-9223372036854775807,-256];
const v1 = [-8956,-20092,-65536,-1309960386,1755961208,537921544,8];
const v2 = [-38927,9007199254740990,21943,-2147483649,-4679,2147483647,31419,6];
const v5 = new BigInt64Array(7);
new Int8Array(3692);
new Uint16Array(2652);
class C12 extends Uint16Array {
    [2652];
    4 = 3692;
    static {
        let v14;
        try { v14 = this.getUTCDay(); } catch (e) {}
        const v16 = v14 === this ? v14 : this;
        v16.defineProperties = v14;
        try { this.defineProperties(v16, v0); } catch (e) {}
    }
    constructor(a19, a20, a21) {
        super(3692, 2652, 7);
        function f22(a23, a24) {
            a19 != Uint16Array;
            try { a21.findLastIndex(a23, a24); } catch (e) {}
        }
        new Promise(f22);
    }
}
new C12(v2, 7, v2);
new C12(v2, 7, v0);
new C12(v2, 7, v0);
const v32 = [0.23449681451060211,-1.3180974566102865e+308,-2.0,-1000000000.0,0.6107310765455765];
function f33(a34) {
    try { v5.copyWithin(3692, 2652, a34); } catch (e) {}
    function f36() {
        return v1;
    }
    return Int8Array;
}
v32.valueOf = f33;
function f37(a38, a39, a40, a41) {
    a40.toString = f37;
    for (let i45 = 0, i46 = 10;
        (() => {
            const v47 = i45 < i46;
            !v47;
            return v47;
        })();
        i46--) {
        for (let v54 = 0; v54 < 5; v54++) {
            ("number")[i45];
            "number" | v32;
        }
    }
    return a40;
}
f37(f37, v32, v32, v32);
%OptimizeFunctionOnNextCall(f37);
f37();
