const v2 = new Array(405);
const v3 = [-4294967295,-9223372036854775808,16,9223372036854775807];
v3.valueOf = Array;
const v4 = [6];
const v5 = [65535,-10,-22806,1000];
function f6(a7, a8, a9, a10) {
    Object.defineProperty(a8, 174, { writable: true, value: a9 });
    function f11(a12, a13) {
        a12 instanceof a12;
        -2 | -2;
        return a8;
    }
    a9.toString = f11;
    a10[289] = f11;
    try { a8.copyWithin(a7, v3); } catch (e) {}
    const v18 = a9?.filter;
    try { new v18(405); } catch (e) {}
    try { a10.entries(); } catch (e) {}
    const o25 = {
        "h": v4,
        "e": v4,
        __proto__: v2,
        set a(a22) {
            try {
                a10.length = 405;
            } catch(e23) {
            }
            a22[3] = 405;
            delete v2[6];
        },
        "d": a7,
        [v3]: a9,
        "g": Array,
    };
    o25[346] = a7;
    return o25;
}
const v26 = f6(v4, v3, v3, v5);
try { v26.includes(Array); } catch (e) {}
const v28 = f6(v2, v2, v5, v2);
try { v28.includes(v3); } catch (e) {}
const v30 = f6(v3, v4, v4, v2);
v30.g = v30;
class C31 extends Array {
    [405] = v5;
    static [405];
    static set a(a33) {
        Object.defineProperty(v4, 7, { configurable: true, value: v30 });
        %VerifyType(a33);
    }
    #d;
    static #toString(a36, a37, a38, a39) {
        for (let [v40,v41,v42] of v3) {
            v2[v30] -= v42;
        }
        const v43 = this[2669];
        try { a36.copyWithin(405, a39, 405); } catch (e) {}
        Array(v43);
        %PrepareFunctionForOptimization(Array);
        Array(v43);
        Array(v43);
        %OptimizeFunctionOnNextCall(Array);
        Array(v43);
        return f6;
    }
}
C31.length = C31;
new C31();
new C31();
const v51 = new C31();
try { v51.pop(); } catch (e) {}
try { Symbol.keyFor(Symbol); } catch (e) {}
