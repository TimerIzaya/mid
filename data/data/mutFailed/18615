new Uint8Array(64);
function f7() {
}
const v8 = [];
function f9() {
    const v10 = v8.constructor;
    v10.call();
    return v10;
}
const v12 = f9();
const v13 = -77;
const v15 = new BigUint64Array(77);
7 / 7;
BigInt64Array.name;
const v20 = new BigInt64Array(7);
function f21(a22, a23, a24, a25) {
    v13 >> a22;
    let v27;
    try { v27 = a25.codePointAt(a25); } catch (e) {}
    const o35 = {
        "e": a24,
        3437980390: "object",
        4: a25,
        [a25](a29, a30, a31) {
            const t24 = "object";
            t24[v27] += 7;
            a25 = a24;
            const v32 = ("cbrt").length;
            try {
                super.set(v32, a24, 7, v15);
            } catch(e34) {
            }
            return a22;
        },
        "type": "e",
        "type": v12,
        "arguments": v8,
        ...77,
        "f": v8,
        1239: 7,
    };
    return o35;
}
f21(77, 64, "cbrt", "cbrt");
f21(7, 64, "cbrt", "e");
const v38 = f21(7, 77, "e", "e");
const t43 = Float32Array.name;
const v41 = new t43(Float32Array);
for (let v42 = 0; v42 < 25; v42++) {
    const v43 = [1073741824,1073741823,1376142744,1073741825];
    function f44(a45, a46, a47, a48) {
        a45[2] = a45;
        a46 >>> a46;
        const v50 = a47 + a47;
        a48.name = a48;
        function f52() {
            return Float32Array;
        }
        try { undefined(); } catch (e) {}
        try { Int8Array.apply(Int8Array, v38); } catch (e) {}
        new Int8Array(v41, a47, v42);
        function f58(a59, a60) {
            return v41;
        }
        f58(v43, v41);
        const v62 = v50.buffer;
        try { v62.slice(v20, v42); } catch (e) {}
        %OptimizeFunctionOnNextCall(f52);
        try { v43["find"](); } catch (e) {}
        return arguments;
    }
    f44.length = f44;
    for (let v66 = 0; v66 < 10; v66++) {
        f44(v41, v42, v66, Float32Array);
    }
}
