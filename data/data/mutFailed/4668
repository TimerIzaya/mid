const v0 = [];
const v3 = new Set();
const v4 = [-4096,257,-4,-1919987511,-65537,-16,0,2,-7230,-4734];
const v5 = [-2,2147483649,-2147483649,-9223372036854775807,-11,-9];
const v6 = [-268435456,-4294967297];
function f7(a8, a9, a10) {
    const o36 = {
        get d() {
            function F12(a14, a15, a16) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = Set;
                } catch(e17) {
                }
                try {
                    this.f = a8;
                } catch(e18) {
                }
                try {
                    this.a = v6;
                } catch(e19) {
                }
            }
            new F12(this, v4, v5);
            [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
            let v22;
            try { v22 = a9.some(); } catch (e) {}
            const o30 = {
                toString(a24, a25, a26) {
                    try { this.toString(a25, v22, a24); } catch (e) {}
                    a25++;
                    a24[a8] = a8;
                },
            };
            return o30;
            new F12(v5, a10, v5);
            new F12(v5, v0, this);
            return v3;
        },
        "b": v0,
        set e(a34) {
            return;
        },
    };
    return o36;
}
f7(v5, Set, v0);
const v38 = f7(false, f7, v5);
f7(f7, v38, v4);
[v3,false,v3,[v5,Set,v4],v5];
[v38,v6];
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    a48[1][1];
}
const o53 = {
    __proto__: 2,
    ...2,
};
o53.log10();
