function f0() {
    const o8 = {
        "g": "race",
        "c": "name",
        4: "race",
        "h": "race",
        get e() {
            this[this] = "race";
            ("name")[Symbol.split];
            return 0.9604406093582539;
        },
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
const v11 = f0();
function F12(a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v11;
    } catch(e15) {
    }
}
const v16 = new F12(v9);
const v17 = new F12(v16);
const v18 = new F12(v10);
[f0,[v18,v16,F12,v18,v17]];
[v17];
function f22() {
    return f22;
}
const v23 = [f22,f22,f22,F12];
v23.flatMap(v23);
function f1() {
    return true;
}
new Int16Array(1);
const v7 = new Float32Array(3);
try { v7.indexOf(Float32Array); } catch (e) {}
const v11 = new BigUint64Array(16);
class C12 extends BigUint64Array {
    static [v11] = v7;
    d;
    static #o(a14, a15, a16, a17) {
        let v21 = 89024.44770369632;
        Math.abs(a17);
        Math.sqrt(a17);
        const v24 = Math.imul(-720620535, v21);
        (a17 ^ -(-720620535)) - a17;
        --v21;
        return v24;
    }
}
const v29 = new C12();
const v30 = new C12();
try { v30.filter(16); } catch (e) {}
new C12();
class C35 {
    e;
    static #e = 3;
    [v29] = C12;
    a;
    constructor(a37, a38, a39, a40) {
        super();
        const o42 = {
        };
        gc(o42);
    }
    /*
    constructor(a45) {
        function F46() {
            if (!new.target) { throw 'must be called with new'; }
            for (let i = 0; i < 5; i++) {
                Symbol.iterator;
                class C51 extends WeakSet {
                    [WeakSet];
                }
                function F52(a54, a55, a56) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
        }
        try {
        } catch(e57) {
        }
        try {
        } catch(e58) {
        }
    }
    */
    c = -3;
}
const v59 = new C35(C35);
v59.c = v59;
const v60 = new C35(C35);
const v61 = new C35(-2.0);
const v62 = v61.c;
v62 + v62;
function F64() {
    if (!new.target) { throw 'must be called with new'; }
}
try { F64.toString(); } catch (e) {}
new BigInt64Array();
class C69 {
}
9n + 9n;
-65536n == -65536n;
const v76 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
v76[7] = v76;
function f77() {
    return -3;
}
try { new f77(); } catch (e) {}
1073741824 - 1073741824;
try { Uint32Array(9n, 4096, -65536n); } catch (e) {}
const v83 = new Uint32Array(4096);
try { Int32Array.from(Int16Array); } catch (e) {}
const v87 = [-1000000000.0,1e-15,-9.803124315434264,-366.4099400694298,1000000000000.0,0.7347183727038488,-Infinity,2.0,0.3916117682859279,-461027.2128179858];
function f88() {
    return v87;
}
new Set();
let v91 = Int32Array.length;
v91--;
new Int32Array(9);
Uint16Array.length = Uint16Array;
const v96 = new Uint16Array(120);
try { v96.reduceRight(v83); } catch (e) {}
try { Array.bind(v60); } catch (e) {}
Array();
485 - 485;
try { new Int8Array(Int8Array, Int8Array, v83); } catch (e) {}
const v106 = new Int8Array(Array, 92, 485);
v106[277] = v106;
const v108 = 3666 - 3666;
v108 === v108;
const v110 = v108 + v108;
v110 !== v110;
let v112 = 0;
v112 <= v112;
v112++;
let v115 = 1;
v115--;
const v117 = v112 < v115;
v117 && v117;
const v119 = v112++;
v119 * v119;
let v121 = BigUint64Array;
let v123;
try {
const t0 = "K9qD";
v123 = t0(v121);
} catch (e) {}
Math.cosh(2147483649);
Math.imul(v123, 2147483649);
let v127 = v121.length;
class C128 {
    constructor(a130, a131) {
        const v132 = this.constructor;
        try { new v132(a130); } catch (e) {}
        super.d;
    }
}
const v135 = v127--;
v135 >> v135;
const v137 = v127--;
v137 / v137;
v137 | v137;
new v121(v119, 485, 3666);
const v141 = BigInt64Array.bind();
v141.name = v141;
try { v141(); } catch (e) {}
const v143 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
let v144;
try { v144 = v143.sort(); } catch (e) {}
v144[4];
try { v144.sort(-65536n); } catch (e) {}
function f147() {
    const o149 = {
        get d() {
            return this;
        },
    };
    return o149;
}
const t152 = "boolean";
t152.f = "boolean";
let v151 = ("boolean").toLocaleLowerCase();
[v121,v151] = [-5,-65535,2269];
