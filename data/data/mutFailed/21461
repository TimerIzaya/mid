new Int32Array(4096);
new Uint16Array(15);
const o8 = {
};
o8.e = o8;
const v9 = /(?:a*)+q(?<a>.)/guds;
function f10(a11) {
    a11.hasIndices = a11;
    a11?.constructor.lastParen;
    const o17 = {
        set b(a15) {
        },
        get d() {
            return this;
        },
    };
    return o17;
}
const v18 = Uint32Array(v9);
const v19 = new Uint32Array(833);
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = Int32Array;
    } catch(e24) {
    }
    try {
        this.h = a23;
    } catch(e25) {
    }
}
const v26 = new F20(4096, Uint16Array);
new F20(833, v26);
new F20(15, v19);
let v33 = 10 << 10;
--v33;
--v33;
new BigUint64Array();
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v45 = v41.reduce(Date)[22];
    function f48() {
        new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
        for (let v52 = 0; v52 < 5; v52++) {
            function f53() {
                const o54 = {
                    __proto__: 512,
                    4: v18,
                };
                return f53;
            }
            v19();
            %OptimizeFunctionOnNextCall(f53);
        }
        function f56(a57) {
        }
        Object.defineProperty(v41, 16, { writable: true, enumerable: true, get: f56 });
    }
    const t60 = Worker.constructor;
    new t60(v45);
    const v62 = [];
    v62.lastIndexOf(v62);
    const o64 = {
        "type": "function",
    };
    o64.arguments;
    new Worker(f48, o64);
    const v67 = Array(19793);
    for (const v68 of v67) {
        for (let v69 = 0; v69 < 5; v69++) {
        }
        const o70 = {
        };
        for (let v71 = 0; v71 < 50; v71++) {
        }
    }
    const v72 = [v67,v67,v67,v67];
    new BigUint64Array();
    const v75 = [v72,v72];
    class C76 {
    }
    const v77 = new C76();
    const o80 = {
        "g": v72,
        [-1]: C76,
        set b(a79) {
        },
        1025549261: v77,
    };
    const v81 = [v75];
    try { Uint16Array.from(v9); } catch (e) {}
    const v84 = v81 >= Uint16Array;
    v84 || v84;
}
new F39();
new F39();
const t98 = "byteLength";
t98[7] = "byteLength";
[-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
