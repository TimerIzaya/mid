function f5() {
    return f5;
}
const v6 = f5.arguments;
function f7() {
    for (let v8 = 0; v8 < 5; v8++) {
        Array(36862, v6, v8 & v8).reverse();
    }
    return f7;
}
%PrepareFunctionForOptimization(f7);
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -4096;
    } catch(e22) {
    }
}
new F18(-4294967296, -4294967296n);
new F18(-9223372036854775808, 9007199254740992n);
new F18(-9223372036854775808, 1000n);
const v26 = [-25552.232795396703,-1e-15,-4.0,4.0,-1000000000.0,Infinity,5.418706939384283e+306,3.0,-5.0,1.7434284636811316e+308];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
}
let {...v32} = [1000000000000.0,0.9960435535667199,1000.0,-1.6540773985510377e+308,0.3018853678306006,410.9648048644401,-6.0085450863810586,-529.8311372035074];
v32.fuck(v32);
const v36 = Math.round(Math);
async function f37(a38, a39, a40) {
    await v36;
    return 268435440;
}
function f42(a43, a44, a45) {
    return a45;
}
const v48 = [Worker,F27,v26];
const o49 = {
    "arguments": v48,
    "type": "function",
};
new Worker(f42, o49);
