function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "f", { configurable: true, value: F0 });
    try {
        this.f = 40406;
    } catch(e3) {
    }
    const v4 = [];
    v4[6] = this;
    v4[6] = 4294967295;
    ("minor").valueOf();
}
const v8 = new F0();
class C9 {
}
function f10(a11) {
    v8.__proto__;
    class C13 {
        static {
        }
    }
    return C9;
}
Object.defineProperty(C9, Symbol.iterator, { configurable: true, value: f10 });
const v17 = new C9();
function f18(a19, a20) {
    const v21 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
    const v25 = [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v21,v21]];
    const o26 = {
        "arguments": v25,
        "type": "function",
    };
    return v8;
}
v17[Symbol.toPrimitive] = f18;
const v30 = new Int16Array(C9);
class C31 {
    constructor(a33, a34, a35) {
        function f36(a37, a38) {
            return a37;
        }
        this[Symbol.toPrimitive] = f36;
        a34[4] = v17;
        for (let v41 = 0; v41 < 25; v41++) {
        }
    }
}
new C31(v17, v30);
const v44 = new F0();
new F0();
function f48(a49, a50) {
    return a50;
}
const v54 = new Int16Array(16);
v54[10] = -9007199254740992;
class C59 {
    g = "2115330920";
    get f() {
        -1.7976931348623157e+308 >> v8;
        try {
            const o62 = {
            };
            const o64 = {
            };
            gc(o64);
            new BigInt64Array(9);
            v44.fuck(v44, o62, o62, -2.0);
        } catch(e70) {
        }
        return this;
    }
    ["2115330920"];
}
new C59();
new C59();
new C59();
function f74(a75, a76) {
    return f74;
}
const v77 = f74.prototype;
v77.valueOf = f74;
const v78 = [v77];
([-4.0]).indexOf(v78, v77);
