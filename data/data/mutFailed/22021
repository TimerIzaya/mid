let v2 = 10;
for (; v2--;) {
}
const v4 = new BigUint64Array(9);
try { v4.find(v4); } catch (e) {}
const v8 = Int32Array.name;
try { v8.toWellFormed(); } catch (e) {}
const v10 = new Int32Array(0);
let v11;
try { v11 = v10.map(BigUint64Array); } catch (e) {}
const v12 = v11?.entries;
try { new v12(); } catch (e) {}
180 >>> 180;
const v17 = new Int32Array(180);
try { v17.entries(); } catch (e) {}
v17.includes(-1014545457);
const v20 = [1073741824,1073741823,1376142744,1073741825];
try { v20["find"](); } catch (e) {}
const v25 = new Int8Array(4);
try { v25.some(BigUint64Array); } catch (e) {}
const v29 = new Uint8ClampedArray(1000);
try { v29.some(Uint8ClampedArray); } catch (e) {}
Uint8ClampedArray.prototype;
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F34(Int32Array); } catch (e) {}
Array();
const v40 = [];
class C41 {
    constructor() {
        delete v40[1073741824];
    }
}
const v44 = new Uint8ClampedArray(3106);
v44[Symbol.toPrimitive] = Array;
try { new WeakMap(); } catch (e) {}
const v49 = new WeakMap();
v49.get();
class C51 {
}
C51.e = C51;
const v52 = new C51();
const v53 = v52?.__lookupGetter__;
try { new v53(v52); } catch (e) {}
const o55 = {
    [v44]: v52,
};
let v58;
try { v58 = Uint16Array.bind(0); } catch (e) {}
v58.length = v58;
new Uint16Array(158);
for (let v60 = 0; v60 < 5; v60++) {
    v60 >>> v60;
    const v62 = [1.479450712344466];
    try { v62.sort(v62); } catch (e) {}
    const v64 = v62.join();
    for (let v65 = 0; v65 < 25; v65++) {
        v64.__proto__;
    }
    function f67() {
        try { Math.acos(F34); } catch (e) {}
        Math.atan(Math);
        return Math;
    }
    f67();
    %OptimizeFunctionOnNextCall(f67);
}
