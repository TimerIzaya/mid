const v0 = [];
const v1 = [v0,v0,v0,v0,v0];
const v3 = [BigUint64Array];
try {
    new BigUint64Array(v3);
} catch(e5) {
}
const v6 = [v1,v1,v1,v0];
const v7 = [v6,v0,v6,v6];
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this.constructor;
    try { new v15(this, a14, this); } catch (e) {}
    a13++;
    a13 >>>= F9;
    const v20 = Int32Array - 127;
    v20 / 127;
    Math.atan2(v20, v20);
}
const v23 = [v0,v7];
[v1,v0,v1,v23];
[v6,v0];
let v28 = 10;
class C31 extends Array {
    2 = 64;
}
new C31();
for (; v28--;) {
    /xyz{1,32}\p{Script_Extensions=Greek}+/guims;
    /(?:ab)/dis;
    new v23();
    const v38 = ([]).constructor;
    const v40 = new Float32Array();
    v40.filter(v38);
    /r(?:a?)?/gudi;
}
const o47 = {
};
try {
    o47.g = 1000;
} catch(e48) {
    const v51 = new Float32Array(2);
    try {
        const o52 = {
        };
        v51.set(o52, 2147483647);
    } catch(e55) {
    }
}
try {
    const o56 = {
    };
    o56.g = 1000;
    o56.d = 9223372036854775807;
} catch(e57) {
}
try {
    const o58 = {
    };
    o58.g = 1000;
    o58.d = 9223372036854775807;
    o58.c = 268435439;
} catch(e59) {
}
try {
    const o69 = {
        set b(a61) {
        },
        set b(a63) {
        },
        o(a65) {
            const o67 = {
            };
            return gc(o67);
        },
    };
    o69.g = 1000;
    o69.d = 9223372036854775807;
    o69.c = v6;
} catch(e70) {
}
new Int8Array([0.600959953156498,1.0,-Infinity]);
