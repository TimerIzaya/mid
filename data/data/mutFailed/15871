let v1 = -60581;
class C3 {
    3 = v1;
    constructor(a5, a6) {
        Object.defineProperty(this, "g", { configurable: true, value: 29798 });
        const v7 = 29798 | 268435441;
        for (let v8 = 0; v8 < 100; v8++) {
            Math.random();
        }
        const v11 = [1073741824,1073741823,1376142744,1073741825];
        function f12(a13, a14, a15, a16) {
            function f18() {
                const o25 = {
                    "c": a16,
                    valueOf(a23, a24) {
                        return this;
                    },
                };
                return "Vre";
            }
            f18();
            try { v11["find"](..."find"); } catch (e) {}
        }
        try { a5(v1, v7); } catch (e) {}
        let v33 = !65537;
        const v34 = v33 ^ -9.563687734600714;
        function f35() {
            return f35;
        }
        new BigUint64Array(3375);
        ++v1;
        function f40() {
            for (let v41 = 0; v41 < 5; v41++) {
                +v41;
            }
        }
        class C43 extends f40 {
            toString(a45, a46) {
                const t38 = this.constructor;
                new t38(a46);
                +this;
            }
        }
        +v34;
        v33--;
    }
}
const v52 = new C3(29798, v1);
const v53 = new C3(v52, 29798);
const v54 = new C3(C3, 268435441);
function f55(a56, a57, a58) {
    const o68 = {
        "a": v1,
        set e(a60) {
            let v59 = this;
            v52 - v52;
            let v62;
            try { v62 = v53.isFinite(a60, 29798); } catch (e) {}
            super.a %= v62;
            v59 ^= v59;
        },
        "e": v53,
        n(a64, a65, a66) {
            super.g = a66;
            try {
                a65.e = a64;
            } catch(e67) {
            }
            return a65;
        },
    };
    return o68;
}
1545846986 - 2;
const v72 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f73() {
    try {
        v72.forEach();
    } catch(e75) {
        e75.a = e75;
        e75.a = e75;
        e75.a = e75;
    }
    return 268435441;
}
f73();
%OptimizeFunctionOnNextCall(f73);
const v77 = f55(C3, C3, v54);
function F78(a80, a81, a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    const v84 = this.constructor;
    try { new v84(); } catch (e) {}
    try {
        const v88 = a82 ** 268435456;
        a82 << 268435456;
        v88 | a82;
        Math.clz32();
    } catch(e92) {
    }
}
const v93 = f55(v54, v53, v77);
class C94 {
}
const v95 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f96(a97, a98, a99, a100) {
    const v101 = /(?:a*)+q(?<a>.)/guds;
    v101.dotAll = v101;
    function f102(a103) {
        const v104 = v95.constructor;
        try { v104.isArray(v101); } catch (e) {}
        a103.constructor.$2.replaceAll(C94, a97);
        return a98;
    }
    for (let [i114, i115] = (() => {
            function f110(a111, a112) {
                return a99;
            }
            return [0, 10];
        })();
        (() => {
            const v116 = i114 < i115;
            !v116;
            return v116;
        })();
        (() => {
            i115--;
            const v122 = Symbol.toPrimitive;
            const o126 = {
                [v122]() {
                    v122["isArray"]();
                },
            };
        })()) {
        for (let v129 = 0; v129 < 10; v129++) {
            f102(v101);
            function f131() {
                const o132 = {
                    "c": v129,
                };
                return v129;
            }
        }
    }
    return v93;
}
f55(v52, v52, v52);
class C138 {
    toString(a140, a141, a142, a143) {
        let [] = "undefined";
    }
}
Int8Array.b = Int8Array;
const v149 = -1322;
function F150(a152, a153, a154, a155) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "536870889";
    } catch(e156) {
    }
    try {
        this.b = a155;
    } catch(e157) {
    }
}
new F150(1073741824n, 257n, 257n, v149);
const v160 = new Int8Array();
const v161 = v160.buffer;
function f162() {
    return f73;
}
Object.defineProperty(v161, "constructor", { writable: true, configurable: true, get: f162 });
v161.slice();
new Uint8Array(268435440);
Array(36862);
function f171(a172, a173, a174, a175) {
    this instanceof Float32Array;
    const v181 = new BigInt64Array(4046);
    let v182 = undefined;
    const v183 = v182++;
    v183 >> v183;
    v183 + v183;
    v183 >> v183;
    let o187 = {
    };
    [,...o187] = v181;
    return f171;
}
new Uint32Array(186);
