const v2 = new Float64Array(256);
const v5 = new Uint8Array(152);
try { v5.set(v2); } catch (e) {}
function f9() {
    v2.keys(...v5, Uint8Array, Uint8Array, Float64Array);
    v2.byteOffset;
    return Uint8Array;
}
Uint8Array[Symbol.iterator] = f9;
try { Uint8Array.from(Uint8Array); } catch (e) {}
const v15 = new Uint8Array(133);
Object.defineProperty(v15, "valueOf", { writable: true, enumerable: true, value: Symbol });
v15[14] = v15;
class C16 extends Float64Array {
    set d(a18) {
        v5["includes"](a18 >>= Uint8Array == a18, 256);
    }
    static #b = Float64Array;
    static [Uint8Array];
    static h;
    static 7;
}
C16.length;
new C16();
new C16();
new C16();
const v28 = new Float32Array([10000]);
const v29 = v28?.lastIndexOf;
try { new v29(v2); } catch (e) {}
