let v0 = 127;
const v3 = [12,4294967296,22071,9007199254740991,268435456,-4294967296,1554367316,46186,-1175712717,-10];
const v4 = [8];
try { v4.entries(); } catch (e) {}
const v6 = [5];
try { v6.reduce(v6); } catch (e) {}
try { v6.find(-1445832447); } catch (e) {}
Uint16Array.prototype = Uint16Array;
const v12 = new Uint32Array();
try { v12.toReversed(); } catch (e) {}
v12.b = v12;
try { v12.map(v12); } catch (e) {}
const v15 = new Uint16Array(143);
v15[132] = v15;
-1;
try { new Uint32Array(Uint16Array, Uint16Array, v3); } catch (e) {}
[[143,Uint16Array,v0,Uint32Array,v6]];
const v22 = [Uint16Array,1,-65536,Uint32Array];
v22[1];
const v26 = -Uint16Array;
Math.acos(Uint16Array);
const v28 = v0--;
v28 + v28;
const v30 = Uint16Array - -65536;
v30 - v30;
const v32 = Math.expm1(v26);
v32 / v32;
v32 + v32;
new Uint32Array(1);
new v22(1864);
const v41 = -(-5.578168491779816);
let v43 = 8.515696609847051;
v43--;
var b = 1.6674435156012262e+308;
new v41();
let v47 = -0n;
const v48 = ++v47;
v48 * v48;
v0--;
64 >> 64;
const v54 = Float64Array?.from;
try { new v54(v6); } catch (e) {}
try { new v54(64); } catch (e) {}
new Float64Array(64);
new Float32Array(0);
Int32Array.e = Int32Array;
new Int32Array(3);
