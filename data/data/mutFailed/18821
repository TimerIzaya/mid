const v0 = [9007199254740991,-1073741824,-25026,1682919031];
const v1 = [-30985,28779,-29785,-16,10000,1584563098];
[515396001,-27392,-9007199254740992,268435440];
new Uint32Array(2523);
const v8 = new BigUint64Array(3756);
new Uint8ClampedArray(10);
class C12 extends Uint8ClampedArray {
    72;
    static #d = Uint8ClampedArray;
    static #valueOf(a14, a15, a16) {
        function F17(a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = this;
            } catch(e22) {
            }
            try {
                this.f = 3756;
            } catch(e23) {
            }
        }
        new F17(a16, a16, a14);
        new F17(v1, a16, 2523);
        new F17(a16, a15, 3756);
        class C29 {
            ["9007199254740991"] = "a";
        }
        new C29();
        return v0;
    }
}
new C12();
const v32 = new C12();
class C33 {
}
class C34 extends C33 {
}
const v35 = new C34();
const v37 = new Uint8Array(3756);
let v38;
try { v38 = BigUint64Array(v32, v8, v35); } catch (e) {}
const o42 = {
    ...v37,
    n(a40, a41) {
        return v38;
    },
};
new C12();
const v44 = [-Infinity];
class C45 {
}
const v46 = new C45();
function f48() {
    ("D")[0].substring(129);
    return "D";
}
f48();
%OptimizeFunctionOnNextCall(f48);
v44 << v46;
