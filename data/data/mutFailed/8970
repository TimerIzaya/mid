function f3() {
    return "number";
}
const v5 = new Date();
class C6 extends f3 {
    o(a8, a9, a10, a11) {
        new Date(-9223372036854775807, -9223372036854775807, Date, -9223372036854775807);
        const v16 = 35530n & 35530n;
        function f17(a18, a19) {
            a19.name;
            const v22 = Array?.of;
            try { new v22(); } catch (e) {}
            Symbol.toPrimitive;
            const v27 = Array();
            function f28() {
                return 3;
            }
            function f29(a30) {
                a30--;
                const t18 = "async";
                t18[0] = "async";
                const o35 = {
                    "execution": "async",
                };
                gc();
            }
            Object.defineProperty(v27, 0, { configurable: true, enumerable: true, get: f28, set: f29 });
            v27.unshift(3, a18, v16);
        }
        f17.name;
        for (let v39 = 0; v39 < 7; v39++) {
            const v42 = new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
            v42.constructor;
            function f44(a45, a46) {
                const o47 = {
                };
                return o47;
            }
            with (f44()) {
                new BigInt64Array(2147483649);
            }
            [-1.7976931348623157e+308,-613.7550152041111] ^ -1264607604;
            Array(1000);
        }
        this.h = 0;
        for (const v65 of Array(4087)) {
        }
        return "g";
    }
    static #a;
    h;
    #b;
    static [v5];
    b = v5;
}
new C6();
new C6();
const o68 = {
};
new Float32Array();
const t60 = [155533.8602852358,2.0];
t60[658291203] = null;
new C6();
("number").__proto__;
function F78() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v80 = 0; v80 < 500; v80++) {
        this["p" + v80] = v80;
    }
}
([188439.8808918628,491144.33908044384,7.99804504476413,6.321598426193364e+307,-820860.9743012136,0.7234201729305241,-998514.8410675353,5.600912141333236]).toString();
function f86(a87, a88, a89, a90) {
    const o91 = {
    };
    return o91;
}
f86();
const v93 = [];
function f94() {
    -v93;
    return f94;
}
%OptimizeFunctionOnNextCall(f94);
f94();
