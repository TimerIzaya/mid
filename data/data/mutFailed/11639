class C3 {
    constructor(a5) {
        const v6 = a5 - a5;
        this[this] = this;
        a5 ^ "-39700";
        function f8() {
            return this;
        }
        function F9(a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            a13[10] = a13;
            try {
                this.h = a12;
            } catch(e14) {
            }
            try {
                this.c = "-39700";
            } catch(e15) {
            }
        }
        const v16 = new F9(f8, f8, C3);
        try { v16.h(); } catch (e) {}
        const v18 = new F9(v16, this, -772296.8536668484);
        new F9(v18, v16, v6);
        function f20() {
            return this;
        }
    }
    #b;
    static 10;
    static f = "-39700";
    #g = "-39700";
}
C3[10] = C3;
const v21 = new C3(-772296.8536668484);
const v22 = v21?.constructor;
try { new v22(C3); } catch (e) {}
let v24;
try { v24 = v21.constructor("-39700"); } catch (e) {}
const v25 = new C3(-1);
const v26 = v25?.constructor;
try { new v26(v25); } catch (e) {}
const v28 = new C3(-1);
const v29 = v28?.__defineSetter__;
try { new v29(v24, v24); } catch (e) {}
let v32;
try { v32 = new Date(Date, v25, v25, v28, v28, v28, Date); } catch (e) {}
new Date();
const v35 = Set?.constructor;
try { new v35(Date); } catch (e) {}
const v37 = new Set();
try { v37.add(v32); } catch (e) {}
v37.f = v37;
const v40 = Math.cbrt(Math);
v40 + v40;
