const v2 = ([-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308]).toLocaleString();
const v3 = [-6.672391061426152e+307];
v3[0] = v3;
function f4() {
    return v3["pop"]();
}
f4();
function f10() {
    return 9;
}
class C16 extends Uint32Array {
}
const v19 = new BigUint64Array(3996);
[-1000000.0,0.833637538568884,1.520781145867405e+308];
[-1e-15,2.220446049250313e-16,-922826.8842691905,-5.737286290850815e+306,0.5666024869996918,241.16065259173206,3.1632668876967287,-396268.3523628161];
[0.5803803482231398,-2.0,0.0422558125976602,-1000000000000.0,-361.5952771090672,-2.0,-1000000000000.0,600.8231778872928,-8.347146118221039,123.9820276080361];
const v23 = -Infinity;
class C27 {
    static #a;
    static n(a29, a30) {
        const v31 = super.d;
        try { v31(); } catch (e) {}
        try { new BigInt64Array(v23); } catch (e) {}
        function f35() {
            return f35;
        }
        class C36 extends f35 {
            constructor() {
                super();
                Math.acosh();
            }
            [f35] = f35;
        }
        const v40 = new C36();
        v40?.constructor;
        return a29;
    }
    [1];
    static [1] = 255;
    [255];
    f = -65536;
}
const v42 = new C27();
try { v42.m(1n, 10000n, 10000n, 1); } catch (e) {}
f10(255, 255, 1n);
new v19();
for (const v51 in v2) {
}
try {
    Float64Array.__proto__ = Float64Array;
} catch(e53) {
    e53.stack;
}
function F57(a59) {
    if (!new.target) { throw 'must be called with new'; }
    class C60 {
        constructor() {
            const v62 = this.constructor;
            try { new v62(); } catch (e) {}
            super.f >>= this;
        }
    }
    new C60();
}
new F57(F57);
new F57();
