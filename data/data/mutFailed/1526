class C1 {
}
function f2() {
}
const v3 = [601759695];
try { v3.find(C1); } catch (e) {}
const v5 = [1073741824,1073741823,1376142744,1073741825];
try {
    v5.slice(9007199254740991);
} catch(e8) {
}
try { v5.values(); } catch (e) {}
~522675525n;
function f12(a13, a14, a15, a16) {
    a13 & a13;
    a15.name;
    a16 !== a16;
    function f21() {
        return 522675525n;
    }
    const v22 = f21?.constructor;
    try { new v22(0.4751714325390761); } catch (e) {}
    f2();
    const v26 = new Int8Array();
    try { v26.reverse(); } catch (e) {}
    const v28 = v26.buffer;
    v3.length -= 0.4751714325390761;
    [-538.4325919385517,-2.4715521757945673,3.0,1000000000.0,0.19448003062480912,1e-15,0.3324343912221027];
    [278809.61600623303,1e-15];
    [-802270.5170826501,2.2250738585072014e-308,1000000000.0,0.3524117621726516];
    try { v28.slice(C1, a16); } catch (e) {}
    v28.slice(2147483648);
    %OptimizeFunctionOnNextCall(f21);
    let v39;
    try { v39 = v5["find"](..."find", a16, ...v3, ...v5, ...522675525n); } catch (e) {}
    v39 <= a15;
    return arguments;
}
for (let v41 = 0; v41 < 10; v41++) {
    f12(v41, v41, f2, 522675525n);
}
class C45 {
    set e(a47) {
        const v48 = [this,a47,a47];
        [0.4751714325390761,a47,v48,v48,[-3,v48,0.4751714325390761,this]];
        class C54 {
            get b() {
                const v56 = ("B")[21];
                try {
                    this.e = "B";
                } catch(e57) {
                }
                return v56;
            }
            static [2.0];
            static #g;
            g = "d";
        }
        new C54();
    }
    static a;
    static #p(a60) {
        const v61 = delete a60?.a;
        try {
            ("O").#p(this);
        } catch(e63) {
        }
        return v61;
    }
}
new C45();
new C45();
new C45();
-2147483649 * -2147483649;
~10000;
-14 * -14;
new Map();
const v84 = ([5,5]).concat(5);
try { v84.some(C45); } catch (e) {}
try { new Float64Array(11, -508096505n, -508096505n); } catch (e) {}
-9;
/D5dq[\0]/gdmsy;
