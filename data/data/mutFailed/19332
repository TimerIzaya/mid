const v1 = -Infinity;
const v5 = new Uint8ClampedArray(257);
new Float32Array(2);
const v11 = new Uint16Array(129);
function f12() {
    return 1000000.0;
}
const v19 = [65537,268435441,63298,-5,1235122603];
const v20 = [128,215394418];
let v21;
try { v21 = v20.entries(); } catch (e) {}
let v22;
try { v22 = v21.next(); } catch (e) {}
new Float32Array(4096);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 3872;
    } catch(e29) {
    }
}
const v30 = new F26();
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a34;
    } catch(e36) {
    }
}
new F31(4096, F26, v30);
const v38 = [-2,-4294967296,4294967297];
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try { a44.valueOf(); } catch (e) {}
    const v46 = this?.constructor;
    try { new v46(1024, 1024, v19, this); } catch (e) {}
    a42.caller;
    a44[1];
    try {
        this.c = a43;
    } catch(e50) {
    }
    try {
        this.b = -714582153;
    } catch(e51) {
    }
    try {
        this.f = a42;
    } catch(e52) {
    }
}
const v53 = new F39(-714582153, F39, -714582153, v20);
F26.length;
const v55 = new F39(9, v53, 9, v38);
const v56 = new F39(1024, v55, v38, v38);
const o59 = {
    "deleteProperty": f12,
    "getPrototypeOf": f12,
    "has": f12,
    "setPrototypeOf": f12,
};
new Proxy(v56, o59);
Math.atan(Math);
let v67;
try { v67 = ("string").trimStart(); } catch (e) {}
-35417 - -35417;
class C70 {
    #n(a72) {
        const o74 = {
            "execution": "sync",
        };
    }
}
const v75 = new C70();
v1?.constructor;
function f77(a78, a79, a80, a81) {
    let v82;
    try { v82 = a78.filter("string", a78); } catch (e) {}
    class C84 extends v5.constructor {
        #a = v82;
        [a81] = v11;
    }
    new C84();
}
f77(-9007199254740991, v67, 1024, "string");
const o87 = {
};
const v88 = new v22();
const v89 = v88?.__defineGetter__;
try { new v89(v75, v20); } catch (e) {}
function f91(a92, a93) {
    do {
    } while ((() => {
            [a93,v22,a93] = v5;
            new Uint8ClampedArray(6);
            new Uint16Array(128);
            new Int8Array(2);
            return 0 < 5;
        })())
    const o118 = {
        [a92](a107, a108, a109, a110) {
            function f111(a112, a113) {
            }
            return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
        },
        set b(a116) {
            try {
            } catch(e117) {
            }
        },
    };
}
const v120 = new Float64Array();
v120.buffer;
try {
} catch(e122) {
}
