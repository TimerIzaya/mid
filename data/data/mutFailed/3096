const v1 = [true,true,true,true,true];
let v2 = [v1];
const v3 = [v2,true,v1,true,true];
function f4() {
    function f5(a6, a7) {
        v2 = a7;
        [10];
        return true;
    }
    return f5;
}
Object.defineProperty(v3, "toString", { writable: true, configurable: true, enumerable: true, get: f4 });
const v10 = [v1];
function f11() {
    Object.defineProperty(v1, true, { writable: true, configurable: true, enumerable: true, value: v3 });
    v1[4];
    return v10;
}
v10.constructor = f11;
let v13;
try { v13 = v10.map(v2); } catch (e) {}
const v14 = [v10];
v14.toString = f11;
const v15 = v14[0];
const v16 = [v1,v2,v1,v14,true];
v16.constructor = f11;
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    a20[Symbol.toPrimitive] = f11;
    function f25() {
        ["object"];
        return v14;
    }
    a22.valueOf = f25;
    try { this.constructor(v10, a21, a22, v10); } catch (e) {}
    try { a19.reduce(v16); } catch (e) {}
    const v31 = ["-3"];
    function f32(a33) {
        const v39 = Uint16Array();
        v39[7] = v39;
    }
    const o42 = {
        "arguments": v31,
        "type": "function",
    };
    new Worker(f32, o42);
    try { a22.slice(v14, v3); } catch (e) {}
    try {
        const v45 = [-0.0,3.5501749464532004,-0.0,-2.220446049250313e-16,0.7626441105891978,-585.9055525866645,1e-15,1000000.0];
        function f46(a47, a48) {
            a48 ** v45;
            new Uint8ClampedArray(255);
            return a20;
        }
        v45.valueOf = f46;
        v45 ** "function";
        Array(-12302);
        this.b = a20;
        0 < 6;
        if ("log1p") {
        }
    } catch(e61) {
    }
}
("deleteProperty").replace("deleteProperty");
const v64 = [8.42123894252574,2.2250738585072014e-308,1000000000000.0,1e-15,-1000.0,-5.0,1000000000.0,-3.636295005613261e+307,-3.0];
function f65() {
    return f4;
}
Object.defineProperty(v64, "toString", { get: f65 });
v64.toString();
v10.f = v10;
new F17(v16, v1, v10, v16);
const v68 = new F17(v1, v2, v1, v10);
const v69 = new F17(v68, v2, v14, v3);
const v70 = [v69,v16,F17,v10];
try { v70.map(v70); } catch (e) {}
const v72 = delete v15?.[536870887];
try { v13(-13, -13, v68, v72); } catch (e) {}
const v77 = [v2,v10,v16];
const v81 = new Uint8ClampedArray(9);
new Uint8Array(v81);
[v68,v77,true];
try { ("1866165091").localeCompare(v2); } catch (e) {}
("1866165091").normalize();
