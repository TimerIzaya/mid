/2ca|b/vdsy;
/(xyz?)/udis;
const v2 = /ea\D*/gvdisy;
let v7 = 12n;
v7--;
Uint8ClampedArray[0] = Uint8ClampedArray;
Uint8ClampedArray.name = Uint8ClampedArray;
new Uint8ClampedArray(3);
let v15;
try { v15 = new BigInt64Array(Uint8ClampedArray, BigInt64Array, v2); } catch (e) {}
new BigInt64Array(3996);
new Int8Array(257);
128 | 128;
class C24 extends v15 {
}
const v25 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C27 {
    static #e;
    m(a29, a30, a31, a32) {
        v25.#e;
        a30.#e = -1;
    }
}
("65535").lastIndexOf(128, 65536);
const v43 = new Uint8Array();
try { v43.toLocaleString(); } catch (e) {}
const v46 = Symbol.isConcatSpreadable;
Symbol.for(v46.description);
v43[v46] = BigInt64Array;
const v51 = Array();
const v52 = Array();
Object.defineProperty(v52, "constructor", { configurable: true, enumerable: true, value: Symbol });
try { ("concat").strike(); } catch (e) {}
const v55 = v52["concat"](v51, v43);
try { v55.findLast(v2); } catch (e) {}
