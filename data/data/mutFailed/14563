function f2(a3, a4) {
    return delete arguments[2];
}
-4 >> -4;
const v9 = [-3.0,1000000.0];
const v10 = [0.6873963467587522,0.0,-1.3399877133043564e+308,1.7976931348623157e+308,4.0];
const v11 = [2.220446049250313e-16,-155.44646104583774,-8.295360659472387e+307,-464890.8385846553,-1000000000.0];
v11[3] = v11;
try {
    v11.valueOf = 76;
} catch(e14) {
    const v18 = new Proxy([-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678], v9);
    const o19 = {
        __proto__: v18,
        "e": -683470965n,
    };
}
4096 >>> 4096;
const o23 = {
    "maxByteLength": 4096,
};
const v25 = new ArrayBuffer(4096, o23);
new Uint32Array(v25);
const v28 = new BigUint64Array(76);
try { new Float64Array(76, o23, 76); } catch (e) {}
new Float64Array(158);
60 >>> 60;
try { new BigUint64Array(Float64Array, 1073741824, 158); } catch (e) {}
const v37 = new BigUint64Array(60);
const o38 = {
    __proto__: o23,
    "a": v11,
    [v28]: 60,
};
function f39(a40, a41, a42, a43) {
    const o44 = {
        [a40]: a40,
    };
    return o44;
}
function f45(a46, a47, a48) {
    function f49(a50, a51) {
        for (let v52 = 0; v52 < 50; v52++) {
            const v54 = a51.slice;
            try { v54(a50); } catch (e) {}
            ("imul").codePointAt(a51);
            const v57 = ("imul").padEnd();
            const v58 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
            const v59 = [1073741824,1073741823,1376142744,1073741825];
            try { v59["find"](..."find", v57, ...v58); } catch (e) {}
        }
        return a50;
    }
    f49(f49, f49);
    f49(f49).apply();
    return a47;
}
try { new f45(60, v37, v11); } catch (e) {}
Worker.length;
Worker.toJSON = f39;
const o68 = {
};
o68.e = o68;
try { new Proxy(o23, Proxy); } catch (e) {}
new Proxy(v11, o68);
this[628786973] = BigUint64Array;
const v76 = [Worker];
const o77 = {
    "arguments": v76,
    "type": v10,
};
new Worker(f45, o77);
