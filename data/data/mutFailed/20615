class C3 {
    constructor(a5, a6) {
        super.c;
        super.c = -16828n;
    }
    1073741825 = C3;
    static [9007199254740992] = C3;
    static e = 9007199254740992;
    static ["b"];
    [C3];
    e;
    2112 = "replace";
    ["b"] = "replace";
}
const v11 = new C3(C3, 9007199254740992);
new C3(v11, "b");
const v13 = new C3("replace", v11);
7 < v13;
new Uint8Array(0);
new Uint8Array(5);
new BigUint64Array(13);
class C27 extends C3 {
    static #p(a29, a30, a31, a32) {
        new BigInt64Array(9);
        new Float32Array(212);
        new Float32Array(4096);
        return "replace";
    }
}
new C27();
new C27();
new C27();
new Int16Array();
[-4,-46650,2,3,-65535];
65537 == 4096n;
class C54 {
}
const v55 = new C54();
const v56 = new C54();
const v57 = new C54();
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const t42 = a63.constructor;
    new t42();
    const t44 = 4096n;
    t44[2147483648] = a61;
    a63[2147483648] = a63;
}
new F58(C54, v56, v55, v56);
new F58(v56, v56, v57, v55);
[-768382956,65537,10000,-268435456,-1815566166,-536870912,4];
[128,7,55834];
try { Uint8ClampedArray.pop(); } catch (e) {}
function F71() {
    if (!new.target) { throw 'must be called with new'; }
}
class C73 extends F71 {
}
class C74 {
    static {
        for (let v76 = 0; v76 < 25; v76++) {
            function f77() {
            }
            const v78 = [601759695];
            const v79 = [1073741824,1073741823,1376142744,1073741825];
            function f81(a82, a83, a84, a85) {
                function f87() {
                    return a82;
                }
                const v88 = f77();
                const v90 = new Int8Array();
                const v93 = new Uint32Array(4);
                [v93];
                const v97 = BigUint64Array * 536870887;
                v97 ** v97;
                function f99(a100, a101) {
                    return v88;
                }
                const v102 = f99();
                const v103 = v90.buffer;
                Object.defineProperty(v103, "constructor", { writable: true, configurable: true, value: Date });
                const v105 = new Int8Array();
                v103.slice(2147483648);
                %OptimizeFunctionOnNextCall(f87);
                let v108;
                try { v108 = v79["find"](..."find", a85, ...v78, ...v79, ...522675525n); } catch (e) {}
                Symbol("find");
                const o111 = {
                };
                v108 <= a84;
                this[v102] = v105;
                const o116 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o116);
                return arguments;
            }
            for (let v118 = 0; v118 < 5; v118++) {
                f81();
            }
        }
    }
}
