const v1 = new Map();
const v2 = [65536,15,21132,20013,-16842,2,18127];
[-15,-9007199254740991,-65535,0,1465,9007199254740991,0,4];
const v4 = [-65537,-2,8,51806,2147483647,4294967296];
class C11 extends Map {
    m(a13, a14) {
        super[a13] = Map;
        return a13;
    }
    static b;
    [-65536n] = -65536n;
    constructor(a19, a20) {
        try {
            a19.#b = -1073741824;
        } catch(e21) {
        }
    }
    static valueOf(a23, a24, a25) {
        function f26(a27, a28, a29) {
            try {
                v1.c = a27;
            } catch(e30) {
            }
            return a24;
        }
        f26(v2, 7, 8n);
        return Map;
    }
}
C11.prototype;
new C11();
const o34 = {
};
Array(19793);
new C11();
new C11();
const v40 = [];
const v41 = [v40,v40,v40,v40,v40];
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this?.constructor;
    try { new v46(v41, this); } catch (e) {}
    a45 ^ a45;
    this.b = v40;
}
3 * 3;
try { Uint8ClampedArray(v4, v4, -65536n); } catch (e) {}
let v55 = 59632;
v55++;
const v57 = /a\D[\cz]/giy;
v57.d = v57;
const v59 = new Uint8ClampedArray(995);
const v61 = new Int8Array(995);
const v62 = v61.copyWithin;
try { v59.some(v62); } catch (e) {}
try { new Int32Array(16, C11, -4294967296); } catch (e) {}
Number.e = Number;
const v72 = new Uint32Array();
v72[Symbol.toPrimitive] = Array;
const o78 = {
    n(a76, a77) {
        v72[2] = v72;
        return 2;
    },
};
let v79 = 5;
v79--;
