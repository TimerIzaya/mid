const v2 = new BigInt64Array(129);
257 >> 257;
Int16Array.name[2];
const v8 = new Int16Array(257);
const v9 = v8?.with;
try { new v9(v8, v8); } catch (e) {}
"sync" == "sync";
const o16 = {
    "execution": "sync",
    "type": "major",
};
gc(o16);
try { BigInt64Array(v2, 16, BigInt64Array); } catch (e) {}
const v20 = new BigInt64Array(16);
v20[5];
const v24 = new Uint32Array(262);
try { v24.reduceRight(16); } catch (e) {}
9007199254740992 + 9007199254740992;
Int32Array.e = Int32Array;
new Int32Array(9007199254740992);
function f31(a32) {
    return 16;
}
class C33 extends f31 {
    static g;
    static maxByteLength;
}
new Uint8ClampedArray(7);
class C37 extends Array {
}
try { C37.isArray(o16); } catch (e) {}
C37.e = C37;
const v39 = new C37();
1073741823n * 1073741823n;
const v42 = 1073741823n == v39;
v42 || v42;
