const v2 = new Array(1);
v2[Symbol.toPrimitive] = Array;
const v7 = new Int32Array(159);
try {
    v7.__proto__ = v2;
} catch(e8) {
}
v2 * 1;
const v12 = new Int16Array(10);
function f13(a14) {
    const v15 = [155533.8602852358,2.0];
    const v18 = Array();
    for (const v19 of v18) {
        v15[658291203] = null;
    }
    return v18;
}
v12.valueOf = f13;
let v21 = 0;
do {
    delete v12?.byteLength;
    Math.cos(-65537);
    const v27 = v12 || -65537;
    v27.toString = Symbol;
    -v27;
    Math.atan2(v12, v12);
    v21++;
} while (v21 < 5)
new Uint8Array(3242);
/(ab|cde)\1(\P{scx=Greek}?)/dim;
/xyz{1,32}?/vms;
/jL(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/udimsy;
const v39 = ["object"];
const v40 = [v39,v39,v39,v39,v39];
const v44 = new Float32Array(1750);
v44[Symbol.toPrimitive] = Symbol;
const v47 = v44 - 581587.2441596473;
try { v39.flatMap(581587.2441596473); } catch (e) {}
const t38 = v40[Symbol.iterator];
t38.c <<= v47;
var h = 1750;
