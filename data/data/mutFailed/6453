const v0 = [-8.023575744540347e+305,-975306.6370352916,0.0,215.4193745856894,1e-15];
[0.4048618645096739,1000000000000.0,1e-15,2.75254638125053e+307];
const v2 = [-1.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a5;
    } catch(e6) {
    }
    try {
        this.c = v2;
    } catch(e7) {
    }
}
new v2(v0);
new F3(v2);
new F3(v2);
[1324064311,65536];
[-12740,536870912,-65536,-65537];
[-9223372036854775807,-1,-1002723234,-9223372036854775807,34157,-497344552,4294967297,1089768587];
function f17() {
    return v2;
}
for (let v19 = 0; v19 < 25; v19++) {
    const v20 = [601759695];
    const v21 = [1073741824,1073741823,1376142744,1073741825];
    function f22(a23, a24, a25, a26) {
        try { v21["find"](..."find", a26, ...v20, ...v21); } catch (e) {}
        const v31 = Symbol.isConcatSpreadable;
        const v32 = (4n).description;
        const v33 = Array(a25);
        try { v33.groupToMap(v31, v32, f22, v33, v31); } catch (e) {}
        return v20;
    }
    for (let v35 = 0; v35 < 5; v35++) {
        f22();
    }
}
