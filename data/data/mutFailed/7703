function f3(a4, a5, a6, a7) {
    const o13 = {
        "d": a6,
        p(a9, a10, a11) {
        },
    };
}
new BigInt64Array(23);
new Uint16Array(4080);
new Int8Array(3454);
[1073741825,-14,15];
[-4294967295,-5190,1000,1073741824,-3,-65535,4294967296,2,-4294967295,10];
let v25 = 10;
for (; v25--;) {
}
const v27 = [268435456,2,-9007199254740991,16,128,65535,3,6,4,-362096143];
const v28 = [1073741824,1073741823,1376142744,1073741825];
function f29(a30, a31, a32, a33) {
    function f34() {
        const v36 = new a30();
        class C37 extends a30 {
            static #p(a39, a40, a41, a42) {
                [..."A",v36];
            }
        }
        function f45(a46, a47) {
            const v48 = v27[a47];
            const v50 = Float32Array.length;
            const v54 = new Array(228);
            class C55 {
                static {
                    function F57(a59, a60) {
                        if (!new.target) { throw 'must be called with new'; }
                        const v61 = this?.constructor;
                        try { new v61("yi", v50); } catch (e) {}
                    }
                    new F57(v54, this);
                    new F57(Array, F57);
                }
            }
            try { a46["n"](); } catch (e) {}
            return v48;
        }
        Math.valueOf = f45;
        class C68 extends Date {
        }
        new Int8Array(9);
        const v72 = Math.expm1(a31);
        const v73 = Math.tanh();
        const v74 = Math.hypot(a32, Math);
        try {
            class C76 extends Date {
            }
            new Int32Array(2917);
            v28.findLast(a32);
        } catch(e81) {
        }
        const o82 = {
            [v73]: v72,
        };
        return v74;
    }
    f34();
    eval(a33);
    %OptimizeFunctionOnNextCall(f34);
    return f29;
}
for (let v86 = 0; v86 < 5; v86++) {
    f29();
}
