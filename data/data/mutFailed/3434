function f0() {
    ([-Infinity,Infinity,959819.665748626])["concat"]([Uint32Array]);
    function F8(a10, a11, a12, a13) {
        if (!new.target) { throw 'must be called with new'; }
        function f14() {
            return F8;
        }
        class C15 extends f14 {
            constructor(a17) {
                super();
                function f19(a20, a21) {
                    const o22 = {
                        [a20]: a21,
                        [a21]: -65537,
                        65536: -65537,
                    };
                    return -65537;
                }
                for (let v23 = 0; v23 < 25; v23++) {
                    this["p" + "p"] = v23;
                }
            }
        }
        new C15();
    }
    const o54 = {
        "h": 1000.0,
        [-38483]: -38483,
        "f": 1000.0,
        ...6.022042147930608e+307,
        set a(a29) {
            super.d = a29;
            1000.0 >= -38483;
            try { this.sin(this, 6.022042147930608e+307, a29, this); } catch (e) {}
            super.g;
            const v34 = Symbol.iterator;
            const o53 = {
                [v34]() {
                    let v36 = 10;
                    const o52 = {
                        next() {
                            v36--;
                            const v40 = v36 == 0;
                            const o42 = {
                                get a() {
                                    return this;
                                },
                                __proto__: this,
                                5: -38483,
                                "done": v40,
                                "value": v36,
                            };
                            new Float32Array(10);
                            new Uint32Array(2369);
                            new Uint16Array(1024);
                            return o42;
                        },
                    };
                    return o52;
                },
            };
        },
    };
    o54[o54] = 6.022042147930608e+307;
    try {
        o54.g = -38483;
    } catch(e56) {
    }
    return o54;
}
gc();
function f63() {
    const t72 = [];
    t72[6] = 4294967295;
    new Int32Array();
    const o78 = {
        get b() {
            return Int32Array;
        },
        "c": f63,
        toString(a71, a72, a73) {
            return this;
        },
        4294967295: Uint8ClampedArray,
        m(a75) {
            return 4294967295;
        },
        "h": 9007199254740991,
        ...1.0,
        set b(a77) {
        },
    };
}
Math.exp(10000);
const v80 = f0();
const v81 = f0();
const v82 = f0();
function f83() {
    return f0;
}
function f84() {
    return f83;
}
new Float64Array(6);
const o89 = {
    "type": "minor",
};
function f90(a91, a92, a93, a94) {
    const o106 = {
        m(a96, a97) {
            a97[a96];
            return v80;
        },
        "c": v81,
        "h": a94,
        "e": f84,
        __proto__: v80,
        "g": f83,
        "b": a91,
        o(a100) {
            const o102 = {
            };
            gc(o102);
        },
        set h(a105) {
        },
        [a91]: a93,
    };
    return o106;
}
const v107 = f90(v82, v82, v80, v82);
f90(v80, v80, v80, v82);
class C109 {
}
const v110 = new C109();
const o112 = {
};
const v113 = new f63(v110, o112);
v113[v113] = 0.3050534209767637;
f90(v82, v82, v80, v81);
new BigUint64Array(1024);
new Int8Array(5);
new Int8Array(2);
class C125 {
}
class C126 extends C125 {
}
const v127 = new C126();
try {
    v81.g = -4;
} catch(e129) {
}
const v131 = new Uint8Array();
v131.c = 1073741825;
delete v127[v131];
for (let i = 0; i < 25; i++) {
    function f139(a140) {
        for (let v143 = 0; v143 < 100; v143++) {
        }
        return v107;
    }
    Worker(f139);
    new Uint8ClampedArray(129);
}
