new Float32Array(256);
new Uint8ClampedArray(9);
const v9 = new Uint32Array();
v9[Float32Array] = v9;
const o10 = {
};
new Float32Array(-28039);
let v12 = 255;
const v14 = new Float32Array(v12);
new Int16Array(129);
v12--;
function f19() {
    ("g").trimRight();
    return "g";
}
new BigInt64Array(255);
for (let i31 = (() => {
        class C25 {
        }
        new Uint16Array(209);
        0 >>> 0;
        return 0;
    })();
    (() => {
        function f33(a34, a35, a36, a37) {
            arguments.a = arguments;
            Math.atan2(257, 257);
            Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
            return -9524;
        }
        f33(f33, -9524, -9524, -9524);
        const v44 = i31 < 9;
        const v46 = Symbol.iterator;
        const o55 = {
            [v46]() {
                let v48 = 10;
                const o54 = {
                    next() {
                        v48--;
                        const v52 = v48 == 0;
                        const o53 = {
                            "done": v52,
                            "value": v48,
                        };
                        return o53;
                    },
                };
                return o54;
            },
        };
        !v44;
        const v58 = [65537,268435441,63298,-5,1235122603];
        function F59(a61, a62, a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
            const v65 = this.constructor;
            try { v65(1024, 1024, v58); } catch (e) {}
        }
        return v44;
    })();
    i31++) {
}
const o70 = {
    __proto__: -28039,
};
o70[-28039] = o70;
const o72 = {
    ...v14,
    6: 1073741823,
};
