const v2 = new SyntaxError(1);
new Int32Array(4096);
Uint8Array[1] = -65537;
let v8;
try { v8 = new Uint8Array(SyntaxError, v2, SyntaxError); } catch (e) {}
Object.defineProperty(Uint8Array, 2, { configurable: true, enumerable: true, value: v8 });
try { new Uint8Array(Uint8Array, Uint8Array, 1); } catch (e) {}
typeof Uint8Array;
class C12 {
}
C12.name;
class C15 {
    static ["name"];
}
new Uint8Array(-65537);
[24144,268435439,-16,37720,-1073741824];
[40954,-2,-18939,1206013779];
const v19 = [-777991947];
try { v19.sort(1); } catch (e) {}
[Infinity,1000.0,1.7976931348623157e+308,1000000.0,0.17590988628075865,Infinity,-1e-15,-1000.0];
[645303.9463702878,2.0,-9.569850857051085];
const v23 = [0.1735895564365154,-0.43880628735711724,5.0,-1000.0,-1000.0,9.294002337777708e+307,-4.0,-1.7976931348623157e+308];
16 * 16;
try { Float32Array.apply(v23, 4096); } catch (e) {}
const v28 = new Float32Array();
function f29(a30) {
    const v33 = new Float64Array(64);
    function f34(a35, a36, a37) {
        return v33;
    }
    return v8;
}
v28.constructor = f29;
try { v28.subarray(1, 1); } catch (e) {}
const v42 = new Infinity(-429.3290910931888);
v42.setMilliseconds(-429.3290910931888);
function f45(a46) {
    return -8.325849240047866e+307;
}
const v47 = new Float64Array(v28, 16);
try { v47.findLastIndex(v19); } catch (e) {}
Math.atanh();
Math.exp();
1000000.0 & 1000000.0;
-(1000000.0 % 1000000.0);
new Float64Array(256);
v28.buffer |= 16;
class C58 extends Float64Array {
    static 1;
    static #d = 256;
}
C58[124402837];
new C58();
const v61 = new C58();
try { v61(v28); } catch (e) {}
let {"buffer":v63,"byteLength":v64,"byteOffset":v65,} = v61;
v65 >>> v65;
