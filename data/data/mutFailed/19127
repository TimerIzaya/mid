class C3 {
    static p(a5, a6) {
        super.g;
        try { this.p("undefined", this, a6, a5); } catch (e) {}
        const v9 = [];
        new Int8Array(964446029);
        const v17 = new Uint32Array(16);
        function f18(a19, a20) {
            const o21 = {
            };
            o21.e = f18;
            const o22 = {
            };
            o22.e = f18;
            o22.b = a20;
            const o23 = {
            };
            o23.e = f18;
            o23.b = a20;
            o23.c = a19;
            const o26 = {
                "arguments": v9,
                valueOf(a25) {
                    return this;
                },
            };
            o26.e = f18;
            o26.b = a20;
            o26.d = a20;
            function f28(a29) {
                return 7;
            }
            this.onmessage = f28;
            v17.length = 1073741824;
            return o21;
        }
        const o32 = {
            "type": "function",
        };
        new Worker(f18, o32);
        new Uint8ClampedArray(7);
        new Uint32Array(4096);
        new BigInt64Array(118);
        return 4096;
    }
}
const v43 = new C3();
const v44 = new C3();
const v45 = new C3();
class C46 {
    constructor(a48, a49) {
        try {
            new C3();
        } catch(e51) {
        }
        [C3,a49,,a49] = a49;
    }
    [v43] = v43;
    #g;
    static #f = "function";
    g;
    #d = C3;
}
new C46(v43, v44);
const v53 = new C46("c", "undefined");
const v54 = new C46(v45, v43);
function f55(a56, a57) {
    const o65 = {
        "e": C3,
        n(a59, a60, a61) {
            super[v54] = v44;
            super.f += C3;
            let v62;
            try { v62 = new C3("function", v45); } catch (e) {}
            v62 >= a59 ? v62 : a59;
            return v43;
        },
        "a": a56,
        "d": "c",
        "h": "function",
    };
    return o65;
}
f55("function", C46);
f55(v45, v53);
f55(v45, v53);
const v69 = [1073741824,1073741823,1376142744,1073741825];
function f70(a71, a72, a73, a74) {
    a73 * a73;
    const o76 = {
    };
    o76.__proto__;
    return f70;
}
for (let v78 = 0; v78 < 10; v78++) {
    f70(v69, v78, v78);
}
%OptimizeFunctionOnNextCall(f70);
f70();
