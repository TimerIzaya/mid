function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1027;
    } catch(e3) {
    }
    try {
        this.e = 1027;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
const v7 = new F0();
let v9 = 10;
const v15 = new WeakSet();
class C16 {
    static #m(a18, a19, a20, a21) {
        v9 **= v15;
        try {
            v7.__proto__ = a19;
        } catch(e22) {
        }
        return a19;
    }
    constructor(a24, a25, a26, a27) {
        a27 = 200.19641252369956;
        for (let v28 = 0; v28 < 32; v28++) {
            v28["p" + v28] = v28;
        }
    }
}
new C16(v6, v7, -1e-15, 200.19641252369956);
new C16(-1e-15, v7, -1e-15, -2.0);
new C16(200.19641252369956, 200.19641252369956, v7, 200.19641252369956);
const t35 = "g";
t35[14] &&= 14;
[-4294967296,-1805354844,-4,256,32123,9,8,6,4];
const v1 = [3,-1370177657,1203565088,2147483649,1707590053,-65535,44199,4294967295,787673130,45952];
[-16,-9007199254740990,5,-27825502,-9223372036854775808,12,11,-2];
("-9223372036854775807")[12];
const v9 = BigInt64Array?.constructor;
try { new v9("-9223372036854775807", v1); } catch (e) {}
new BigInt64Array(-15875);
const v15 = new RegExp(5, "-9223372036854775807", 5 & 5);
try { new Uint8ClampedArray(-15875, BigInt64Array, 8); } catch (e) {}
new Uint8ClampedArray(8, v15);
function f20() {
    ("a")[0];
    const o27 = {
        "c": "a",
        [0.43223002794581145]: 0.43223002794581145,
        "g": 1.0,
        [1.0](a26) {
        },
        [-1]: "a",
    };
    return o27;
}
const v28 = f20();
class C29 extends f20 {
    #toString(a31) {
    }
    a;
    [f20] = C29;
}
C29.prototype = C29;
new C29();
const o33 = {
    __proto__: v28,
    "toPrimitive": f20,
};
