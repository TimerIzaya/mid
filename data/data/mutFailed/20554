function f1() {
    function f2() {
        new Map(Map);
        let v4 = 6;
        v4--;
        return v4;
        return Map;
    }
    return f2;
}
function f6(a7) {
    [1.5340415543558148e+308];
}
Object.defineProperty(Map, "toString", { writable: true, get: f1, set: f6 });
const v10 = new Map();
for (let v12 = 0; v12 < 5; v12++) {
    const v15 = v12 >> -18321;
    Math.log1p(v12);
    Math.tan(v15);
}
function f20(a21) {
    const o31 = {
        "g": 9n,
        3856088300: 4n,
        [Map](a23, a24, a25) {
            this.g ^= a25;
            v10.size;
            return 4.2784495709586245;
        },
        [-14n]: Map,
    };
    return o31;
}
const v32 = f20(4n);
const v33 = f20(-14n);
const v34 = f20(9n);
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a37;
    try {
        this.a = v34;
    } catch(e40) {
    }
}
new F35(9n, F35, v32);
new F35(-14n, 4n, v32);
new F35(9n, 4n, v33);
function f44(a45, a46, a47, a48) {
    return -14n;
}
(536870887).toFixed();
function f51() {
    return f51;
}
const v54 = ([-38686,-6,10000,-53904,-65535,48017,257,536870889]).includes;
try { v54(); } catch (e) {}
[1126838905];
const v58 = new BigUint64Array();
v58.constructor = f51;
function f59(a60, a61) {
    a61.then = f51;
    return a61;
}
new Promise(f59);
