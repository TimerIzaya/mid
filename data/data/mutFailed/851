new Uint8ClampedArray(2423, 2423, 2423);
new Float32Array(3879);
const v8 = new isNaN(2587);
[318.978844056021,0.908982011002301,8.426978543264244,-1e-15,549157.8707626129];
[-697.1912751107483,3.0,5.899738971061873e+307,-3.0,-2.0,-2.2250738585072014e-308,-1000000.0];
const v11 = [624.8632651807038,605270.6592500363];
function f12() {
    return isNaN;
}
const v14 = typeof v8;
new BigUint64Array(208);
const v19 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v20 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
class C21 {
    constructor(a23) {
        function f24(a25, a26) {
            return a25;
        }
        f24(v20);
        f24(v19);
    }
}
v11["lastIndexOf"](v14 === "symbol", 3879);
new Float32Array(255);
const v36 = [-0.0,4.0,-5.0];
for (let v37 = 0; v37 < 5; v37++) {
    v36 | v37;
}
function f41(a42) {
    const v46 = 1073741824 ** 5;
    Math.clz32(2089625166);
    2089625166 >> v46;
}
this.onmessage = f41;
new Int8Array(1937);
const v52 = new Uint8ClampedArray(2834);
for (let v53 = 0; v53 < 5; v53++) {
    const o57 = {
        set b(a55) {
            this.b;
        },
    };
    d = Uint8ClampedArray;
    new BigUint64Array(5, 2587, BigUint64Array, o57);
    new BigUint64Array(64);
    new Int8Array(10);
    o57.b = o57;
    let v67;
    try { v67 = v52.toReversed(); } catch (e) {}
    function F68(a70, a71) {
        if (!new.target) { throw 'must be called with new'; }
        f12();
        %PrepareFunctionForOptimization(f12);
        f12();
        f12();
        %OptimizeMaglevOnNextCall(f12);
        f12();
        try {
            this.h = a70;
        } catch(e77) {
        }
        try {
            this.g = a71;
        } catch(e78) {
        }
    }
    new F68(2587, 3879);
    new F68(v67, 2834);
    new F68(3879, 3879);
    o57.b = o57;
}
