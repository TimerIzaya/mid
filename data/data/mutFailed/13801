function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 617445047;
    } catch(e3) {
    }
    try {
        this.f = 617445047;
    } catch(e4) {
    }
    function f5() {
        -4294967296 <= -4294967296;
        class C8 {
            set d(a10) {
            }
        }
        class C11 extends C8 {
        }
        const v12 = new C11();
        return v12.d;
    }
}
([1073741824,1073741823,1376142744,1073741825]).forEach();
function f16(a17, a18) {
    function f19(a20, a21) {
    }
    let v23;
    try { v23 = Set.apply(a17, f19); } catch (e) {}
    return v23;
}
new F0();
const v25 = [];
class C26 {
}
const v27 = new C26();
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a31;
}
new F28(v27, v25);
new F0();
new F0();
const v38 = Math.hypot(Symbol, 2.220446049250313e-16, 2.220446049250313e-16);
const o44 = {
    valueOf(a40, a41, a42, a43) {
        super.c **= v38;
        return a43;
    },
};
new Array(11);
function F55(a57) {
    if (!new.target) { throw 'must be called with new'; }
}
const v58 = new F55();
v58.constructor;
const o62 = {
    set g(a61) {
    },
};
Object.defineProperty(o62, Symbol.toStringTag, { enumerable: true, value: o62 });
Array.__proto__ = this;
