const v0 = [2147483649,-6,-4294967297,498053731,-65535,2,9,16,-12,-1];
const v1 = [-210059557,64,2062891567,-1394555385,9,1350465950,256,4294967297,-31574,49638];
const v2 = [50257,1,52271,1,16,116347412];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a8;
    } catch(e12) {
    }
    try {
        this.a = 1.7010029312345237e+308;
    } catch(e13) {
    }
    try {
        this.d = a9;
    } catch(e14) {
        function f15() {
            const o26 = {
                m(a18) {
                    const v21 = new Int8Array(3938);
                    let v22 = 3;
                    let v23 = 0;
                    [...v22] = v21;
                    -(v23++);
                },
            };
            o26.m();
        }
    }
}
const v28 = new F6(v0, v2, v2, -4.888079504665814);
const v29 = new F6(v1, v1, v0, v0);
const v30 = new F6(v0, v1, v2, v2);
function f34(a35, a36, a37, a38) {
}
class C40 {
    static {
        for (let v42 = 0; v42 < 25; v42++) {
            const v43 = [601759695];
            const v44 = [1073741824,1073741823,1376142744,1073741825];
            function f45(a46, a47, a48, a49) {
                try { v44.toSorted(f34); } catch (e) {}
                const v54 = new Float32Array(this, a49, a46);
                function f56() {
                    return a46;
                }
                class C58 extends v54.constructor {
                    #c = 84;
                }
                function f59(a60, a61) {
                    return C40;
                }
                try { f59(f45, a49); } catch (e) {}
                %OptimizeFunctionOnNextCall(f56);
                try { v44["find"](..."find", a49, ...v43); } catch (e) {}
                const o65 = {
                    [Date]: 128,
                    __proto__: arguments,
                };
                return f56;
            }
            for (let v66 = 0; v66 < 5; v66++) {
                f45();
            }
        }
    }
}
function f68(a69, a70, a71, a72) {
    const o95 = {
        "g": -1000000000000.0,
        "a": v2,
        "f": v0,
        set c(a74) {
            let v76;
            try { v76 = a71["charCodeAt"](-1000000000000.0, a72); } catch (e) {}
            undefined?.values;
            const v79 = v2.constructor;
            function f80(a81, a82) {
                let v83 = a81[5];
                v83++;
                return v79;
            }
            f80(undefined);
            v28[v76];
            try { v76(); } catch (e) {}
            [a72,F6,-1000000000000.0];
            const v89 = [-65535,452354247,-2,78479092,-2147483648,1073741823,5,6528,-1024,-261130286];
            const o90 = {
            };
            new Proxy(v89, o90);
            [-4.888079504665814];
            [1.7010029312345237e+308];
        },
        "d": -1000000000000.0,
        "h": -1000000000000.0,
    };
    return o95;
}
f68(NaN, v29, v29, v30);
f68(-337.04821476627194, v30, v30, v28);
f68(NaN, v30, v30, v28);
new BigUint64Array(10);
function f102() {
    59817n < undefined;
    return 59817n;
}
f102();
f102();
const v110 = [601759695];
const v111 = [1073741824,1073741823,1376142744,1073741825];
function f112(a113, a114, a115, a116) {
    function f117() {
        const o121 = {
            toString(a119, a120) {
                return a113;
            },
        };
        o121.toString();
        const o130 = {
            [-4294967297n](a124, a125, a126, a127) {
                eval();
            },
        };
        return o130;
    }
    f117();
    try { ("").charCodeAt(Map); } catch (e) {}
    eval(a116);
    %OptimizeFunctionOnNextCall(f117);
    try { v111["find"](..."find", a116, ...v110, ...v111); } catch (e) {}
    return a115;
}
for (let v138 = 0; v138 < 10; v138++) {
    f112(-4294967297n, -4294967297n, v138, v138);
    const v141 = new Float32Array(10);
    const v144 = new Int32Array(8);
    v144.set(v141);
}
%OptimizeFunctionOnNextCall(f112);
f112();
