const v0 = [0.8716424212688589,-3.7914496980259704,952.958014405247,3.0,-2.220446049250313e-16,523651.55502753635];
const v1 = [-387830.60125307855,0.38366855886456186,5.0,403813.47904422786,NaN,0.16103309617705808,-4.0,1000.0,1000000000000.0];
function f2(a3) {
    return Symbol;
    return v0;
}
v1[Symbol.toPrimitive] = f2;
const v7 = [NaN,0.032178694121342666,-366446.2020441119];
class C8 {
    [v1] = v0;
    constructor(a10, a11) {
        if (a11) {
        } else {
            this || a11;
            [65537,-22156,9,127,2,-15,16];
            [5,-31767,-11009,-12,51048,8,-1085568395];
            [-711731544,536870887,-1,-3];
        }
    }
}
new C8(v7, v7);
const v20 = new C8(v7, v1);
new C8(v1, v20);
function f24(a25, a26) {
    const o29 = {
        set b(a28) {
        },
    };
    return o29;
}
let v35 = 116;
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f39(a40, a41, a42, a43) {
    function f45() {
        const o52 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a50, a51) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        return o52;
    }
    f45();
    %OptimizeFunctionOnNextCall(f45);
    let v55;
    try { v55 = v37["find"](..."find", a43, ...v36, ...v37, ...522675525n); } catch (e) {}
    v55 <= a42;
    return arguments;
}
v35--;
const v60 = new Uint8Array(165);
v60.lastIndexOf();
new Float32Array(v35);
class C65 extends Float64Array {
    get e() {
    }
}
new C65();
new C65();
new Uint8Array();
gc();
new Int32Array(2890);
new C65();
let v79 = 0;
v79 >>> v79;
do {
    const o82 = {
    };
    o82.c = o82;
    o82.c = o82;
    gc();
    v79++;
} while (v79 < 5)
