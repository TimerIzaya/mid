function f3(a4, a5) {
    const o9 = {
        get h() {
            try {
                this.g = this;
            } catch(e7) {
            }
            let v8;
            try {
            const t0 = "0";
            v8 = t0("boolean");
            } catch (e) {}
            return v8;
        },
        "h": a5,
        "d": "boolean",
        "g": a5,
        "b": a4,
        "c": "boolean",
    };
    return o9;
}
const v10 = f3("valueOf", "valueOf");
f3("valueOf", "boolean");
f3("valueOf", "boolean");
let v16 = new Proxy([-1.0], "0");
++v16;
function f18() {
    Int8Array.b = Int8Array;
    return f18;
}
new Set();
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 4294967296;
    } catch(e28) {
    }
    const v29 = [601759695];
    function f30(a31, a32, a33, a34) {
        function f35() {
            return ([-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0]).push(v29);
        }
        f35();
        eval(a33);
        %OptimizeFunctionOnNextCall(f35);
        return f35;
    }
    try {
        function F41() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v43 = new F41();
        const v44 = new F41();
        class C46 extends Array {
        }
        for (let v47 = 0; v47 < 5; v47++) {
            function f48() {
                return v47;
            }
        }
        function f49(a50, a51) {
            const o52 = {
                "h": v44,
                "e": v43,
            };
            return o52;
        }
        const v53 = f49();
        f49(F25, v53);
        function f55() {
            return f49;
        }
        const v58 = new Float32Array(218);
        for (const v59 of v58) {
            Object.defineProperty(v53, Float32Array, { configurable: true, enumerable: true, get: f49, set: f55 });
        }
        class C63 {
            #b = 26507;
            static [26507];
            static get a() {
                super[this] = 26507;
                try {
                    arguments.#b <<= arguments;
                } catch(e67) {
                }
                return SharedArrayBuffer;
            }
        }
        const v68 = new C63();
        const v69 = v68?.constructor;
        v69.name = v69;
        let v70;
        try { v70 = new v69(); } catch (e) {}
        const v71 = v70?.constructor;
        try { new v71(); } catch (e) {}
        gc();
        class C75 {
        }
        new C75();
        new C63();
        const v78 = new C63();
        try { v78.constructor(); } catch (e) {}
        const v80 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
        try { v80.findLastIndex(C63); } catch (e) {}
        [-9007199254740991,22341,65537];
        const v83 = [9007199254740990,2147483647,-9223372036854775808];
        const v85 = new Date();
        const v86 = v85?.getHours;
        try { new v86(); } catch (e) {}
        let v88;
        try { v88 = v85.setUTCSeconds(v80, v78); } catch (e) {}
        v88++;
        for (let v90 = 0; v90 < 5; v90++) {
            v10.constructor;
            const v94 = Array(4087);
            return Array;
            const v99 = new BigInt64Array(4046);
            let v100 = undefined;
            const v101 = v100++;
            v101 + v101;
            %VerifyType(4046);
            v78[v83];
            v78[undefined] = v85;
            try {
                v99.g = v100;
            } catch(e104) {
            }
            let v105 = [1073741824,1073741823,1376142744,1073741825];
            function f106() {
                return v94;
            }
            class C107 extends f106 {
            }
            try {
                v105 &= C107;
            } catch(e108) {
            }
            const v109 = v101 >> v101;
            v109 >> v109;
            const v111 = v109 >>> v109;
            let v112 = v111 % v111;
            v112--;
            const o114 = {
            };
            o114.e = o114;
            for (let i117 = 0, i118 = 10; i117 < i118; i117++) {
            }
        }
        this.g = 4294967296;
    } catch(e127) {
    }
    try {
        this.f = 4294967296;
    } catch(e128) {
    }
}
new F25();
new F25();
new F25();
