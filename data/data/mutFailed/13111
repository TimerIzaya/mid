const v0 = [8,1000,3,64,14,15,5];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    const v4 = [F1,F1];
    [v4,1141300185,F1];
    const t4 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
    delete t4[2.0];
    function f9(a10) {
        return a10;
    }
    let v11 = [this];
    Math.log2(v4);
    const v15 = v11++;
    v15 ^ v15;
    Math.asinh(536870887);
    try {
        class C19 extends this.constructor {
            e = F1;
        }
        C19.caller;
        new C19();
    } catch(e22) {
    }
}
const v23 = [5,2147483647,31378,-34049];
Symbol("bZ");
function f27() {
    return f27;
}
const v28 = [601759695];
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f30(a31, a32, a33, a34) {
    function f36() {
        return a31;
    }
    f27();
    const v39 = new Int8Array();
    const v40 = v39.buffer;
    function f41() {
        return f30;
    }
    function f42(a43) {
        const v44 = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
        class C45 {
            constructor(a47, a48) {
                let {...v49} = v44;
            }
        }
    }
    Object.defineProperty(v40, "constructor", { writable: true, configurable: true, get: f41, set: f42 });
    v40.slice();
    %OptimizeFunctionOnNextCall(f36);
    let v52;
    try { v52 = v29["find"](..."find", a34, ...v28); } catch (e) {}
    v52 <= a33;
    return arguments;
}
for (let v54 = 0; v54 < 10; v54++) {
    f30();
}
const v56 = [-38846,4,1970022789,-429681411,-4096,65535,-1,18795,-2122178771];
function f57(a58, a59) {
    function f60(a61, a62) {
        Math.imul(3, a61 % a61);
        Math.log(3);
        a62.constructor(a62);
        return f60;
    }
    const o73 = {
        "d": v0,
        "b": a59,
        "c": a58,
        1073741825: v0,
        get a() {
            v56.length;
            v0 | this;
            return v23;
        },
        64: a58,
        2344: a58,
    };
    return o73;
}
f57(v23, v0);
f57(v56, v23);
f57(v56, v0);
class C77 extends f57 {
    #toString(a79, a80, a81, a82) {
        const o83 = {
            "call": f57,
            "defineProperty": f57,
            "getOwnPropertyDescriptor": f57,
            "has": f57,
            "ownKeys": f57,
            "set": f57,
            "setPrototypeOf": f57,
        };
        new Proxy(this, o83);
        for (let v86 = 0; v86 < 25; v86++) {
            function f87() {
                return v86;
            }
            function f88(a89, a90, a91, a92) {
                [-3.942521664036782e+307,-3.942521664036782e+307,[]];
                return -3.942521664036782e+307;
            }
            const v96 = [601759695];
            const v97 = [1073741824,1073741823,1376142744,1073741825];
            function f98(a99, a100, a101, a102) {
                f87();
                try { v97["find"]("find", a102, v96); } catch (e) {}
            }
            for (let v106 = 0; v106 < 10; v106++) {
                f98(v106, v106, v97, f98);
            }
        }
        return a82;
    }
}
new C77();
new C77();
new C77();
new Int16Array(873);
function f116() {
    const v117 = [];
    function f118(a119) {
        function f121() {
            const o124 = {
                __proto__: 2,
                ...2,
            };
            const v125 = new Uint16Array(o124, 2, 2);
            v125[1] = v125;
            return 2;
        }
        return v117;
    }
    v117[Symbol.toPrimitive] = f118;
    Math.atan2(v117, -40875);
    const v132 = new WeakSet();
    const o133 = {
        "e": v117,
        "b": v132,
    };
    let v134 = -9223372036854775808n;
    v134 %= 45725n;
    return 45725n;
}
for (let v136 = 0; v136 < 5; v136++) {
    f116();
    for (let v139 = 0; v139 < 5; v139++) {
        Array(36862);
    }
    %OptimizeFunctionOnNextCall(f116);
}
new Float64Array(16);
new BigUint64Array(1024);
for (let v146 = 0; v146 < 5; v146++) {
    const v149 = new BigInt64Array(4046);
    function f150(a151, a152) {
        a151++;
        const v154 = [];
        function F155(a157) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C158 extends F155 {
        }
        const v159 = new C158();
        const v160 = v159.constructor;
        const o161 = {
        };
        v154.length = 65535;
        for (const v163 in o161) {
        }
        let o164 = {
        };
        [,...o164] = v149;
        return v160;
    }
    f150();
}
