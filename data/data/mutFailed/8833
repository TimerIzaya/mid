function f0() {
}
[255,536870888,65537,268435441,5,129,268435439];
const v2 = [961992357];
[1970,-1104043311,4294967296,1120852804,4];
function f4() {
    return v2;
}
new Float64Array(3341);
("stack").trimStart().length;
-1000000000000.0 >>> -1000000000000.0;
function F14() {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = Array(19793);
    try { v18.reduce(); } catch (e) {}
    for (const v20 of v18) {
        function f21() {
            return f21;
        }
        const v22 = new this();
        class C23 {
            constructor(a25, a26, a27) {
                function f28(a29, a30) {
                    return a29;
                }
                this[Symbol.toPrimitive] = f28;
                a26[4] = v22;
                for (let v33 = 0; v33 < 25; v33++) {
                }
            }
        }
    }
    const v35 = [v18,v18];
    ("entries").toUpperCase();
    const o40 = {
        "execution": "async",
        "type": "minor",
    };
    [v35];
    ("function")[0];
    new Set();
    const v46 = [];
    v46.toSpliced();
    v46 >= Uint16Array;
}
const v50 = new F14();
v50.constructor;
class C52 {
}
const v55 = new Uint8ClampedArray(v2);
new Int32Array(v55);
new Uint8ClampedArray(1776);
const v63 = ("D")[0];
v63.lastIndexOf(v63);
