const v3 = [1000000.0,570753.1295927579];
function f4() {
    const o7 = {
        "maxByteLength": 536870888,
    };
    const v9 = new ArrayBuffer(340, o7);
    new Uint8ClampedArray(v9);
    return Uint8ClampedArray;
}
v3.toString = f4;
const v12 = [1000000.0,1000.0,1000.0];
const v13 = [v12,1000.0,v3,1000.0];
class C17 {
    [570753.1295927579] = v12;
    static 1;
    #o(a19, a20, a21, a22) {
        let v23;
        try { v23 = this.p(a21, a20, this, a22, this); } catch (e) {}
        delete v3?.length;
        return v23;
    }
    #c = 65536;
    constructor(a26, a27) {
        function f28() {
            const v29 = v13 & v13;
            try { a26.o(v29); } catch (e) {}
            return v29;
        }
        this.valueOf = f28;
        delete this[a26];
        -1898470667 / this;
    }
}
new C17(51503, -1898470667);
new C17(51503, 570753.1295927579);
new C17(65536, 1000000.0);
new Map();
const v42 = new Map();
function f43() {
    Int32Array.constructor = f43;
    return Int32Array;
}
v42.constructor = f43;
const t43 = v42.constructor;
const v46 = t43();
function f47(a48) {
    return 7;
}
v46.constructor = f47;
const o52 = {
    __proto__: v46,
};
Object.defineProperty(o52, "constructor", { writable: true, enumerable: true, value: f47 });
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = o52.constructor;
    try { v58(268435440n, a57); } catch (e) {}
}
new F54(Map, 268435440n);
