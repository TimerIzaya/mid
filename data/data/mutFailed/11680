const v0 = [];
const v1 = [10000];
new Float32Array(v1);
const v4 = [];
for (let v5 = 0; v5 < 25; v5++) {
    function f6(a7, a8, a9, a10) {
        const v13 = new Float32Array(v1, a10);
        function f15() {
            return a7;
        }
        let v17;
        try { v17 = new Date(v1, v5, 84, f6, v5); } catch (e) {}
        const v18 = new Date();
        const v19 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
        let v21;
        try { v21 = new Proxy(v4, a10); } catch (e) {}
        const v22 = new v21(v19, v18);
        v22[0] = v22;
        const o23 = {
            __proto__: v22,
        };
        v19[2] = o23;
        class C25 extends v13.constructor {
        }
        function f26(a27, a28) {
        }
        try { f26(f6, v5); } catch (e) {}
        %OptimizeFunctionOnNextCall(v17);
        const o30 = {
            __proto__: arguments,
        };
    }
    for (let v31 = 0; v31 < 5; v31++) {
        f6();
    }
}
new Float32Array(2);
new Int32Array(1291);
new Uint16Array(512);
("setUTCMinutes").toUpperCase();
const v46 = ([927716.746385878]).indexOf;
try { v46(); } catch (e) {}
-2.220446049250313e-16 ^ -2.220446049250313e-16;
"number" == "number";
class C55 {
}
C55.prototype = Float32Array;
const v56 = new C55();
const v57 = v1?.constructor;
Array(4087);
class C61 {
}
const v62 = new C61();
v62 << -1557853178;
try { new v57(); } catch (e) {}
const v66 = [v56,v56,v56];
let v67;
try { v67 = v0.toString(); } catch (e) {}
const v68 = [C55,C55,C55];
const v69 = [-2.220446049250313e-16,v68];
v69[1];
const v71 = ("number").slice(v68, v56);
let v73;
try { v73 = ("trimEnd").search(v66); } catch (e) {}
const v74 = ("1G")["trimEnd"]();
for (let v75 = 0; v75 < 5; v75++) {
    v69["p" + v75] = v73;
}
try { v74.at(Float32Array); } catch (e) {}
function f79(a80, a81, a82) {
    try { a80.toString(); } catch (e) {}
    const o84 = {
        ...a82,
        268435441: "trimEnd",
    };
    return o84;
}
const v85 = v67(v66, v71, v69);
v85[268435441] = v85;
f79(v74, v74, v85);
