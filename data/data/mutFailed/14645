255 >> 255;
const v7 = [255,1.7976931348623157e+308,255];
const v8 = [255,v7,1073741824,-1000000000000.0];
const v9 = (255)?.find;
let v10;
try { v10 = new v9(1.7976931348623157e+308); } catch (e) {}
const v11 = [v7,255,v8,939663.5552481946,v7];
v11.g = v11;
const v12 = [-460.307183313349,116746.1734742194,2.0,0.7612507062467385,-1.7352454748688924e+308];
function f13(a14) {
    Reflect.preventExtensions(Reflect);
    return a14;
}
const v17 = [];
function f18() {
    const o22 = {
        toString() {
            super[this];
        },
        ...v17,
        n() {
            return this;
        },
    };
    try { o22.n(); } catch (e) {}
    return v17;
}
%PrepareFunctionForOptimization(f13);
const v24 = f18();
f18();
%OptimizeFunctionOnNextCall(f18);
f18();
v12[v24.toPrimitive] = f13;
function f29(a30, a31) {
    function f32(a33, a34) {
        return a33;
    }
    return a31;
}
f29.d = f29;
f29.d = f29;
const v36 = Symbol.toPrimitive;
gc();
const o43 = {
    [122188848n](a41, a42) {
    },
};
const v45 = v36.description;
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 2;
}
4294967296 & 4294967296;
Symbol.for(v45);
v12[v36] = f29;
try { new o43(); } catch (e) {}
let [] = [];
[Int32Array,Int32Array,Int32Array,Int32Array];
const v56 = [618.1593022982238,-670.4331556988014,-598.8215888934105,1e-15,0.6439103075146282,996419.0616454568,-1.0,-1000000000.0,1e-15,-566.0187654378863];
v56[Symbol.toPrimitive] = Symbol;
v56.toString = Symbol;
const v59 = [0.38491475396310426,1.7976931348623157e+308,-1e-15,924251.5567374192,NaN,1.5098751561946018e+308,-1.1124820518145282e+308,-3.0,-0.0,-467.0550866857337];
v59[5];
class C61 {
    valueOf(a63) {
        let v64;
        try { v64 = v59(a63, this, this, this, this); } catch (e) {}
        try { v64(v56, v64, v64); } catch (e) {}
        return v12;
    }
    1000;
    static #d = v56;
    static [v12] = v59;
    static #a;
    [v12] = v59;
    static [v56];
    static #e = v59;
}
new C61();
new v10();
new C61();
const v70 = new WeakMap();
try { v70.has(WeakMap); } catch (e) {}
new Date();
for (const v77 of Array(4087)) {
}
1371215815n == 1371215815n;
[,,,,,];
let v84 = -869487989;
v84++;
function f92(a93, a94) {
    return -588750793;
}
Float32Array.toString = f92;
function f96(a97, a98, a99) {
    return f96;
}
class C100 extends f96 {
}
try { new C100(); } catch (e) {}
Object.defineProperty(C100, Float32Array, { enumerable: true, get: f96 });
