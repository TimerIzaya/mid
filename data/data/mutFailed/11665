function f2() {
    const o5 = {
        [null]() {
            super.b;
        },
        "f": null,
    };
    return o5;
}
f2();
f2();
const v9 = new Array(1593);
function f10(a11, a12) {
    const o26 = {
        "f": Array,
        "a": a12,
        [v9](a14) {
            a14?.a;
            function F16() {
                if (!new.target) { throw 'must be called with new'; }
                this.d = 2;
            }
            let v19 = Boolean;
            v19--;
            function f21() {
                const v22 = v19--;
                class C23 {
                }
                class C24 extends C23 {
                }
                const v25 = new C24();
                v25.m = v22;
                return v22;
            }
            %PrepareFunctionForOptimization(f21);
            return a12;
        },
        2648945849: 1593,
        ...a12,
        "h": a12,
        "c": v9,
    };
    return o26;
}
f10(f10, 1593);
const v28 = f10(v9, f10);
v28[2648945849];
f10(v28, v28);
class C31 {
    #m(a33, a34, a35) {
        const v38 = 257 - 257;
        function f39(a40, a41, a42, a43) {
            const v44 = /(?:a*)+q(?<a>.)/guds;
            function f45(a46) {
                a46.hasIndices = a46;
                a46.constructor;
            }
            for (let i50 = 0, i51 = 10; i50 < i51; i51--) {
                for (let v58 = 0; v58 < 25; v58++) {
                    f45(v44);
                }
            }
            function f60() {
                let v61 = Float64Array;
                v61 = a41;
                return f39;
            }
            return f60;
        }
        -257;
        const v64 = (v38 >> v38) ** 257;
        let v65 = ~257;
        --v65;
        return v64;
    }
    #n(a68, a69) {
        Object.defineProperty(a68, "a", { writable: true, configurable: true, value: f2 });
    }
    constructor(a71, a72, a73, a74) {
        super();
        function f75() {
            const t81 = [];
            t81[6] = 4294967295;
            const o80 = {
                set b(a79) {
                },
                "arguments": v9,
            };
            return o80;
        }
        for (let v81 = 0; v81 < 5; v81++) {
            f75();
            %OptimizeFunctionOnNextCall(f75);
        }
    }
}
const v83 = new C31();
let v84 = new C31();
try { v84.propertyIsEnumerable(v83); } catch (e) {}
const v86 = new C31();
const o92 = {
    o(a89, a90) {
        class C91 {
        }
        return "p";
    },
};
const v93 = v86?.__lookupGetter__;
try { new v93(C31); } catch (e) {}
function F98(a100) {
    if (!new.target) { throw 'must be called with new'; }
    const v101 = this?.constructor;
    try { new v101(F98); } catch (e) {}
    a100--;
    this.h = a100;
}
F98.caller = F98;
const v104 = new F98(-2);
const v107 = [899592207];
let v108 = 14047n;
let v111 = 2 < Uint8Array;
[v108,...v111] = v107;
Array(1000);
function F116(a118) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
v83[f10] = Array;
const v126 = v84--;
v126 - v126;
[-65537,9,-1597344959,4294967296,1,-1251,536870912,-37543,36816];
const v129 = [2,536870887,-33539,28672,59537,-268435456];
v129.g = v129;
[536870889,1024,11,512,-1222209117,-2147483649,-57412,13,8,-44667];
1539 / 1539;
with (v104) {
    h = Uint16Array;
}
