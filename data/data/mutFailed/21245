const v2 = new Float64Array(0);
v2[delete v2[Uint16Array]] = 870;
const v6 = v2[v2];
[-536870912,179334958,7889,10000,129];
[-4294967297,2098579133,33424];
[-4294967297,512,268435439,16,1073741825,9,260076816];
const v11 = new Uint16Array(870);
const v14 = new BigInt64Array(10);
const v18 = v14 === -1.0;
const v20 = Symbol.iterator;
const o29 = {
    [v20]() {
        let v22 = 10;
        const o28 = {
            next() {
                const v24 = v22--;
                v22 == 0;
                const o27 = {
                    "done": v24,
                    "value": v6,
                };
                return o27;
            },
        };
        return o28;
    },
};
function f33(a34, a35, a36, a37) {
    const o43 = {
        "e": 10,
        5: v20,
        get a() {
            try { v11.forEach(a34, a34); } catch (e) {}
            return -877987270;
        },
        "f": v6,
        [22039n]: a36,
        [a35]: a36,
        "a": a35,
        [f33]: v18,
        [-1.7976931348623157e+308]: a36,
        "g": a35,
        "b": a37,
        "d": 870,
    };
    return o43;
}
f33(BigInt64Array, 10, 10, 0);
f33(Float64Array, 10, BigInt64Array, 870);
f33(v2, 10, BigInt64Array, 10);
for (let v47 = 0; v47 < 5; v47++) {
    function f48() {
        ("Vre").fixed("Vre");
        const v51 = f48.codePointAt();
        const v52 = v51 * v51;
        v52 >= v52;
        return f48;
    }
    f48();
    %OptimizeFunctionOnNextCall(f48);
}
