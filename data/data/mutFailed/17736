let v6;
try { v6 = ("1073741824").codePointAt("string"); } catch (e) {}
const v7 = [1370n,536870912n,536870912n,"1073741824","-32967"];
const v8 = ["1073741824",v7,536870912n,"-32967"];
[536870912n,1370n,v8,"1073741824"];
7 >> 7;
let v14 = -1024;
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.__defineGetter__;
    try { new v21(51494, 51494); } catch (e) {}
    try { new a20(v7, "1073741824", "string", "1073741824"); } catch (e) {}
}
const v24 = new F15(v14, F15, F15, F15);
const v25 = v24?.__defineGetter__;
try { new v25(v8, v14); } catch (e) {}
const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v28 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
const v30 = Uint32Array.BYTES_PER_ELEMENT;
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    a33.caller;
    a34.d = a34;
}
F31.arguments = F31;
const v36 = new F31(F31, F31);
try { v36.constructor(v14, v36); } catch (e) {}
let v38;
try { v38 = v6(v25, 536870912n, -15n); } catch (e) {}
try {
    new F31([v38,1370n,v6,v30,"string"], -7713);
} catch(e41) {
}
class C42 {
}
C42.d = C42;
const v44 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v44.find(v24); } catch (e) {}
const v46 = [601759695];
for (let v48 = 0; v48 < 5; v48++) {
    function f49() {
        let v52 = Float64Array;
        const v54 = Array();
        function f55() {
            return v52;
        }
        function f56(a57) {
            return -4294967297n;
        }
        Object.defineProperty(v54, 0, { configurable: true, enumerable: true, get: f55, set: f56 });
        const v58 = v54.unshift(v14);
        const v60 = new Set();
        function F61(a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
            F61(a64, v60);
        }
        v52 = F15;
        v27.length;
        try {
            v27.forEach(v52);
        } catch(e68) {
        }
        const v69 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C71 {
        }
        const v72 = new C71();
        try {
            v72.__proto__ = F31;
            const v73 = ["Vre","Vre","Vre","Vre"];
            class C74 {
            }
            C74.length;
            function* f76(a77, a78) {
                yield* v73;
                return F31;
            }
            try { f76(f49, C74); } catch (e) {}
        } catch(e80) {
        }
        const v81 = Symbol.toPrimitive;
        v81 << v81;
        function f83() {
            return v48;
        }
        7 < 536870912n ? 7 : 536870912n;
        Symbol.for(v81.description);
        try {
            Symbol();
        } catch(e90) {
        }
        Symbol.for(Symbol.match.description);
        const o101 = {
            toString(a97, a98) {
                const v99 = v48 && v52;
                a97 *= v81;
                v99 <= v69;
                return a98;
            },
        };
        try { o101.toString(o101, v48); } catch (e) {}
        const o129 = {
            "c": -4294967297n,
            [522675525n](a105, a106) {
                new Date(..."undefined");
                const o111 = {
                    "type": "function",
                };
            },
            "c": v46,
            valueOf(a113, a114) {
                return this;
            },
            [-4294967297n](a116, a117, a118, a119) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v44,
            ...v24,
            [v81]() {
            },
            "type": C42,
            ..."Vre",
            valueOf(a122, a123) {
                return a123;
            },
            ..."Vre",
            get h() {
                return f49;
            },
            4: "Vre",
            toString(a126, a127, a128) {
                return v48;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(v72, v14, v48);
        v14 %= -268435456;
        const v132 = new Uint32Array(v28);
        const v133 = v132?.constructor;
        try { new v133(f49, Set, Set); } catch (e) {}
        v36 - f49;
        try {
            const v137 = new Float64Array();
            try { v137.entries(); } catch (e) {}
        } catch(e139) {
        }
        new Float64Array(v58, v58);
        try { new Uint16Array(Uint16Array, Uint16Array, Uint16Array); } catch (e) {}
        new Uint16Array(Symbol, -268435456, -268435456);
        return f56;
    }
    f49().caller;
    %OptimizeFunctionOnNextCall(f49);
}
