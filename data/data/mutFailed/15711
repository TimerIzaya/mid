[1198354870,4294967296,-4294967295,-934147352,31508,2,-794403135,1073741824];
const v1 = [12,-9223372036854775807,1073741823,-4096,2147483649,64,-62066];
[65536,-1768426635,925950344];
14n << 14n;
const v8 = [1073741824,1073741823,1376142744,1073741825];
function f9(a10, a11, a12, a13) {
    try { v8["find"](..."find"); } catch (e) {}
    return a13;
}
f9(v8, f9, f9, f9);
2147483649n >> 2147483649n;
function f18(a19) {
    return a19;
}
function f22() {
    const v23 = [];
    v23[6] = 4294967295;
    const v26 = new Int32Array();
    const o38 = {
        get b() {
            return Int32Array;
        },
        "c": f22,
        toString(a30, a31, a32) {
            return this;
        },
        4294967295: Uint8ClampedArray,
        m(a34) {
            v23[1] = a34;
            v23[10] = a34;
            try {
                v26.valueOf = a34;
            } catch(e35) {
            }
            return 4294967295;
        },
        "h": 9007199254740991,
        ...1.0,
        set b(a37) {
        },
    };
}
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F41(F41, F41, F41);
const o52 = {
    toString(a49, a50, a51) {
        Object.defineProperty(v46, a49, { writable: true, configurable: true, set: Array });
        return a49;
    },
};
const v53 = [8];
const v54 = [129,-1024,-940537796,2,12,16495,-574,64,-182438089,-60338];
const v55 = [2,-853938099,4,20539];
v55[1];
try { new BigUint64Array(14n, v53, v55); } catch (e) {}
new BigUint64Array(512);
const v63 = new Uint16Array();
const t59 = 3955;
t59.e = v63;
const v64 = BigUint64Array >>> BigUint64Array;
const v65 = v64 >>> v64;
const v67 = new Int32Array(3955);
try { v67.findIndex(512); } catch (e) {}
class C70 {
    #m(a72, a73, a74) {
        for (const v75 in this) {
            (delete this?.h).__proto__;
        }
    }
}
class C78 extends C70 {
    static set e(a80) {
        this > a80;
    }
}
("valueOf").localeCompare(v54, "valueOf");
const v87 = new Uint8ClampedArray(9);
Object.defineProperty("valueOf", 8, { configurable: true, value: v87 });
typeof v1 === "string";
try {
    new f22();
} catch(e92) {
}
new Float32Array(174);
let v95 = 1e-15;
Math.atan2(v95, v65);
Math.expm1(v95);
const o104 = {
    3: "setDate",
    "f": 1836424012,
    m(a101, a102) {
        v95++;
        return v95;
    },
    "d": 1836424012,
};
function f105() {
    return f105;
}
function f107() {
    const v109 = ("c").toLowerCase();
    let v110 = 1864489360 << v109;
    Object.defineProperty(v109, v110, { writable: true, enumerable: true, value: "c" });
    [0.0,-3.0,-1e-15,-2.2250738585072014e-308,1e-15,-3.008556315643565];
    [0.8836936560544139,-65.827184002129,0.38035895869663905,-2.2250738585072014e-308,5.9434573521704,-1.7048257216701155e+308,-2.220446049250313e-16];
    const v113 = [-1000000000.0,0.9555737312233749,1.7976931348623157e+308,187397.2488221391,-1e-15,NaN,1000000000000.0,0.0];
    try {
        v113.length = v110;
    } catch(e114) {
    }
    return v110--;
}
const v116 = /C/gumy;
9007199254740990 | v65;
const v119 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
new Date(-2, v119, v119, v119, -2);
v116.constructor = f105;
