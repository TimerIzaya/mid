const v2 = new BigUint64Array(255);
const v5 = new Int32Array(8);
new Uint32Array(53);
function f9(a10, a11, a12) {
    const o50 = {
        3: a11,
        "maxByteLength": 255,
        set g(a14) {
            function F15(a17, a18, a19) {
                if (!new.target) { throw 'must be called with new'; }
            }
        },
        set b(a21) {
        },
        __proto__: v2,
        "d": a10,
        "e": v2,
        get f() {
            try {
                return /2a\sc/uds;
            } catch(e27) {
            }
            let v29;
            try { v29 = this["n"](BigUint64Array); } catch (e) {}
            new BigUint64Array(this, v29, a10);
            new BigUint64Array();
            Reflect.preventExtensions(Reflect);
            "n" + 53;
            const v37 = new Int32Array(1024);
            for (const v38 of v37) {
                const o41 = {
                    "maxByteLength": 1293466293,
                };
                new SharedArrayBuffer(1796, o41);
            }
            v5.buffer;
            try {
                this.fuck(true, /(\2)(\1)/gudis, -1000.0, v5);
            } catch(e49) {
            }
            return v29;
        },
    };
    return o50;
}
f9(8, 8, 8);
const v52 = f9(53, 53, 53);
f9(53, 255, 8);
function f54() {
    -4294967295 << -12;
    function F58() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v60 = new F58();
    const v62 = v60.d;
    Array[v60] = v62;
    try { v62(Array); } catch (e) {}
    const o64 = {
        "construct": Array,
        "defineProperty": Array,
        "getPrototypeOf": Array,
        "preventExtensions": Array,
        "set": Array,
    };
    return 53;
}
8 >>> 8;
Math.log1p(2.220446049250313e-16);
function f70(a71, a72) {
    const v74 = new Uint8Array(47108);
    for (const v75 in v74) {
    }
}
class C76 extends f54 {
    static get e() {
        super.c;
        Object.defineProperty(v5, "buffer", { writable: true, get: f9, set: f54 });
        const o82 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o82);
        return o82;
    }
    static #h;
    [v52];
}
new C76();
new C76();
new C76();
function F87() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v89 = 0; v89 < 500; v89++) {
        const v91 = ("p").localeCompare();
        ("p" + v89).fontcolor(v89, v91, F87).trimLeft()[12].substring(F87, this);
    }
}
new F87();
new F87();
