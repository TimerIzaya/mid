new Uint16Array(127);
95 + 95;
new Int8Array(95);
try { Int16Array(127, 127, 0); } catch (e) {}
const v10 = new Int16Array(0);
function f11(a12, a13, a14) {
    a13 + a13;
    a14 >= a14;
    const o25 = {
        "f": Int16Array,
        "g": Int16Array,
        "h": Int8Array,
        7: v10,
        get d() {
            Math.atan2(257, 257);
            257 + 257;
            const v22 = 257 || this;
            v22 % this;
            return -v22;
        },
    };
    return o25;
}
f11.name = f11;
f11(0, 0, 127);
f11(0, 95, 0);
f11(0, 95, 95);
const v29 = [-5,2147483649,-4294967295,1,8,-4331,52354,15231];
v29[6] = v29;
-418967591n <= -418967591n;
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.__defineGetter__(127, 127); } catch (e) {}
    a34.prototype;
    const v38 = this.constructor;
    v38.d = v38;
    try { new v38(a35, -418967591n); } catch (e) {}
    a35 == a35;
    a34 !== a34;
    this.g = a35;
}
const v42 = new F32(F32, -418967591n);
v42.g;
const v44 = new F32(v42);
const t44 = v44.constructor;
new t44();
new Int32Array();
257 >> 257;
257 + 257;
const v54 = new Float64Array();
let v55 = 0n;
v55--;
class C57 {
    #a;
    constructor(a59, a60, a61) {
        const v62 = this.constructor;
        try { new v62(this, v54, a59); } catch (e) {}
        try {
            a60.#a;
        } catch(e65) {
        }
    }
}
const v66 = new C57();
v66.toString();
v29["unshift"]();
