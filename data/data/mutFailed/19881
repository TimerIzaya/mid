const v2 = new Int16Array(1);
new Int16Array(8);
let v8 = new Int8Array(181);
class C9 extends Int8Array {
    constructor(a11, a12, a13) {
        super(8, a11, a12);
        const o14 = {
        };
        try {
            o14.c = 1;
        } catch(e15) {
        }
        try {
            const o16 = {
            };
            o16.c = 1;
            o16.d = 8;
        } catch(e17) {
        }
        try {
            const o18 = {
            };
            v8 = this;
            o18[163] ^= 181;
            o18.c = 1;
            for (let v23 = 0; v23 < 32; v23++) {
                a13["p" + v23] = v23;
            }
            o18.d = 8;
            try { new C9(v2, 8, true, o18); } catch (e) {}
            const v29 = new Float32Array(Float32Array, Float32Array, Float32Array);
            function f30() {
                v29.c = Float32Array;
                for (let v31 = 0; v31 < 5; v31++) {
                    const o34 = {
                    };
                    o34[Uint32Array] -= -2147483649;
                    class C35 {
                    }
                    new BigUint64Array(v31, v31, BigUint64Array);
                }
                return f30;
            }
            %PrepareFunctionForOptimization(f30);
            f30();
            %OptimizeFunctionOnNextCall(f30);
            f30();
            for (let v42 = 0; v42 < 32; v42++) {
                o18["p" + v42] = v42;
            }
            o18.b = 181;
        } catch(e45) {
        }
        try {
            const o46 = {
            };
            o46.c = 1;
            o46.d = 8;
            o46.a = o14;
        } catch(e47) {
        }
    }
}
new C9(8, 181, 8);
const v49 = new C9(181, 1, 1);
new C9(8, 8, 8);
class C52 {
    constructor(a54, a55) {
        function f56(a57) {
            return this;
        }
        const o60 = {
            "type": "function",
        };
        new Worker(v49, o60);
    }
}
const v62 = new C52(C52, C52);
new C52();
new C52(-50865, v62);
