const v0 = [341.8021934752742];
const v1 = [0.9557856444519325,1000000.0,-6.70231343497856,1.295243328510863e+307];
const v2 = [2.220446049250313e-16,NaN,544914.7339597389,223.1130440400873,0.7390403787303734,335.7221038316113,4.0,6.922849577373305e+307];
const v5 = new BigInt64Array(9, BigInt64Array, v0);
const v8 = new Int8Array([0.600959953156498,1.0,-Infinity]);
const t5 = 9;
t5[String.toStringTag] = 9;
const v13 = new WeakMap();
const v14 = /8[\cA]v/uisy;
function f15(a16) {
    let v17;
    try { v17 = a16(BigInt64Array); } catch (e) {}
    function F18(a20, a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = v5;
        } catch(e23) {
        }
        try {
            this.buffer = String;
        } catch(e24) {
        }
        try {
            this.c = a22;
        } catch(e25) {
        }
    }
    const v26 = new F18(v8, v1, v1);
    new F18(v26, a16, v17);
    new F18(v26, v17, v17);
    return a16;
}
v14[Symbol.toPrimitive] = f15;
function f31(a32, a33) {
    v13.set([a33,a33,a33,a33,a33]);
    ([0.9283609666082229,-1e-15,2.0,-1e-15,-8.610168314359667e+307,-7.616993381071983e+307,1.3083629745309384,302423.6657833278])["findIndex"](gc);
}
v14[Symbol.toPrimitive] = f31;
const v42 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v42.length = v14;
} catch(e43) {
}
new Int32Array(245);
function f48() {
    let v49 = -9223372036854775808n;
    v49 %= 45725n;
    return 45725n;
}
for (let v51 = 0; v51 < 5; v51++) {
    f48();
    %OptimizeFunctionOnNextCall(f48);
}
new Uint16Array(2824);
const v56 = new Int8Array(257);
new Float64Array(2570);
class C60 extends Uint16Array {
    static #o(a62, a63) {
        var h = Int8Array;
        new Uint16Array(v1, 2824, 257);
        v56[3500] = 2824;
        return this;
    }
    [Float64Array];
    static p(a66, a67) {
        v56[0] = a67;
        super[this];
        return v2;
    }
    static #h = 2824;
}
const v71 = new Float32Array(6);
v71.fill();
("vZa2U").normalize("Dk");
new C60();
new C60();
new C60();
"boolean" == "boolean";
