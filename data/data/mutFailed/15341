const v0 = /Iabc|def|ghi/vims;
const v1 = /abc|defnka?/vm;
const v2 = /GX1a8+/udiy;
function f3() {
    return v2;
}
let v7 = 670;
Array(v7);
function f10(a11, a12, a13, a14) {
    const v17 = new Date(a11);
    const v19 = new Set();
    const v20 = v19.add(v17);
    let [v21,,...v22] = v19;
    let v23;
    try { v23 = v22.findLast(); } catch (e) {}
    const v24 = v21.setUTCHours(v20, Float64Array, v22);
    const o26 = {
        __proto__: v19,
    };
    function f27() {
        return v23;
    }
    const v28 = f27();
    class C29 extends f27 {
    }
    const v31 = new Int32Array(v28);
    Number.isNaN(v24);
    return v21.setUTCFullYear(v31, f10, f10, v21);
}
function f34(a35, a36) {
    const o51 = {
        ...a36,
        "e": a35,
        "a": v2,
        ...v0,
        [f3]: -4.0,
        valueOf(a38, a39, a40) {
            function f41(a42, a43) {
            }
            f41();
            ("Vre").toLocaleUpperCase;
            const v47 = this[-2];
            const v48 = [a39,a36,f3];
            let v49;
            try { v49 = v47(v48, a38); } catch (e) {}
            return 0.7843752680668801 ^ v49;
        },
    };
    return o51;
}
f34(v0, v0);
f34(v0, v0);
f34(v1, v1);
let v56 = "max";
const v58 = [601759695];
const v59 = [1073741824,1073741823,1376142744,1073741825];
function f61(a62, a63, a64, a65) {
    const v68 = new Uint8ClampedArray();
    Math.acosh(v68 & -2);
    let v73;
    try { v73 = v59["find"](..."find", a65, ...v58, ...v59, ...522675525n); } catch (e) {}
    return v73;
}
f61();
class C77 {
    set a(a79) {
        v56 = this;
        v7--;
        function f82(a83, a84, a85, a86) {
            with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                length | length;
            }
            new Int8Array();
            const v92 = new Int8Array();
            for (const v93 in v92) {
            }
            function F94(a96) {
                if (!new.target) { throw 'must be called with new'; }
                const v97 = this.b;
                try { v97(v92); } catch (e) {}
            }
            new F94();
        }
        for (let v100 = 0; v100 < 10; v100++) {
            f82();
        }
        %OptimizeFunctionOnNextCall(f82);
        f82();
        new Uint8ClampedArray();
        -5 == 0n;
        const o107 = {
        };
        o107.g = v56;
        const o108 = {
        };
        new Int32Array(-5);
        const v111 = [4.0];
        try { v111.some(a); } catch (e) {}
        o108.g = v56;
        const o114 = {
        };
        o114.g = v56;
        const o115 = {
        };
        o115.g = v56;
    }
}
const v116 = new C77();
const v117 = new C77(v116, v56, 0.7843752680668801);
new C77();
function F119(a121, a122, a123) {
    if (!new.target) { throw 'must be called with new'; }
}
new BigUint64Array();
const v127 = new Uint8Array();
const v128 = v117 ^ v117;
const o132 = {
    "b": F119,
    ...v127,
    n(a130, a131) {
        return v128;
    },
};
new F119(1073741824, F119, v116);
const v134 = new F119(1073741824, v56, v56);
new F119(65536, "NapmW", v116);
const t126 = "NapmW";
t126[v134] = "h";
try {
    v117.fuck(v56, "h");
} catch(e137) {
}
C77 += v56;
new F119(65536, F119, v116);
[-1.0,-2.2250738585072014e-308,2.0,-3.0,5.832977280432409,1e-15];
[1000000000000.0,-213862.531301692,3.0,242.58489644386714,-Infinity,-8.01478763060209,-4.3475874202234617e+307,NaN,-1000000.0];
[6.578674051799194e+307,-1e-15,-3.0,0.6097660113731397,-1000.0,-1000000000000.0,1000.0,Infinity];
