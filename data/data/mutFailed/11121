function f0() {
    const o4 = {
        "a": 1000000.0,
        ..."-13",
        "h": "-13",
        104: 1000000.0,
        "g": "-13",
        __proto__: "-13",
        ["-13"]: "-13",
        "f": 1000000.0,
        ..."-13",
        ..."-13",
        "e": 1000000.0,
        [1000000.0]: "-13",
        "b": "-13",
        "d": -7265,
    };
    o4.e = o4;
    return o4;
}
const v5 = f0();
const v6 = f0();
const v7 = f0();
function f8(a9) {
    a9[104] = a9;
    const o49 = {
        "f": a9,
        ...v7,
        toString(a11, a12) {
            function F13(a15, a16, a17, a18) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = v5;
                } catch(e19) {
                }
                try {
                    this.d = this;
                } catch(e20) {
                }
                try {
                    this.a = a17;
                } catch(e21) {
                }
                function F25(a27, a28, a29, a30) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v31 = this?.constructor;
                    try { new v31(this, a28, this, this); } catch (e) {}
                    const v35 = new Int16Array(2183);
                    v35[5];
                    function f37() {
                        const o41 = {
                            __proto__: 3.4890473589784586e+307,
                            o(a40) {
                            },
                        };
                    }
                    f37();
                    f37();
                    f37();
                }
                new F25(-34744, -2.2250738585072014e-308, 5, 5);
            }
            new F13(this, this, a11, v6);
            const v47 = new F13(v6, f0, a11, a9);
            new F13(v47, a9, v47, a9);
            return v47;
        },
    };
    o49[104] = o49;
    return o49;
}
f8.caller = f8;
const v50 = f8(v5);
v50[1];
v50[2] = v50;
const v53 = f8(f8(v50));
[0,-48991,7,-841958652,1073741824,9007199254740991,-9,32148,1073741823,-7];
const v55 = [-51309,-2147483649,-1797671396,-2147483648];
try { v55.find(v7); } catch (e) {}
const v57 = [23587515,-65537,9007199254740990,268435441,1024,4294967295,1709831236,268435456];
try { v57.fill(f0); } catch (e) {}
-2 | -2;
58052 | 58052;
const v64 = /(J5a{0,1}?)/y;
class C65 {
    static {
        try { this.apply(v53, v7); } catch (e) {}
        for (let v68 = 0; v68 < 25; v68++) {
            v68 >> v68;
            const v70 = [601759695];
            const v71 = [1073741824,1073741823,1376142744,1073741825];
            function f72(a73, a74, a75, a76) {
                a73.prototype;
                ~a74;
                try { a73(); } catch (e) {}
                const v80 = a75 << a75;
                const v81 = v80 % v80;
                ~v81;
                v81 - v81;
                function f84() {
                }
                try { f84.toString(); } catch (e) {}
                const v86 = f84.length;
                v86 >>> v86;
                class C88 {
                    #valueOf(a90, a91, a92) {
                    }
                }
                try { new C88(); } catch (e) {}
                class C94 extends f0 {
                }
                const v96 = new Int8Array();
                let v98 = BigUint64Array.length;
                v98++;
                v98 === v98;
                const v102 = 536870887 + 536870887;
                v102 + v102;
                const v104 = BigUint64Array * 536870887;
                let v105 = v104 - v104;
                v105++;
                v104 ** v104;
                let v109;
                try { v109 = Number(v64); } catch (e) {}
                v109 - v109;
                -v109;
                const v112 = v96.buffer;
                try { v112.slice(f8, v70); } catch (e) {}
                const v114 = v112.__defineGetter__;
                try { v114.bind(C94); } catch (e) {}
                try { v114(); } catch (e) {}
                try { ("find").split(f72, v109); } catch (e) {}
                let v119;
                try { v119 = ("find").fixed(); } catch (e) {}
                v119[11] = v119;
                try { v71["find"](..."find", a76, ...v70); } catch (e) {}
            }
            for (let v121 = 0; v121 < 5; v121++) {
                f72(this);
            }
        }
    }
}
