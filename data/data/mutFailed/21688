function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 751430727;
    } catch(e3) {
    }
    try {
        this.c = 751430727;
    } catch(e4) {
    }
    try {
        this.g = 751430727;
    } catch(e5) {
    }
}
const v6 = new F0();
new v6();
new F0();
class C11 extends Date {
}
const v12 = new C11();
const v13 = v12.toGMTString();
[155533.8602852358,2.0];
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    const t25 = Array(19793);
    t25[658291203] = null;
    v13[1073741824];
}
new F16();
new F16();
function f24() {
}
const o25 = {
};
const v26 = o25[o25];
try {
    for (const v27 of v26) {
        v26();
    }
} catch(e29) {
}
new Set();
class C35 {
}
const v36 = new C35();
const o37 = {
};
const v38 = o37.__proto__;
for (let v39 = 0; v39 < 5; v39++) {
    const t50 = (2136873598).constructor;
    t50();
    function F43() {
        if (!new.target) { throw 'must be called with new'; }
    }
    v38["p" + v39] = v39;
    const v47 = [];
    v47.f = v47;
    [31909n];
    Symbol.toPrimitive;
}
o37.g = v36;
new Int16Array(8);
new Uint8ClampedArray(2744);
new BigUint64Array(2);
for (let [i74, i75] = (() => {
        function* f64(a65, a66, a67) {
            return a66;
        }
        function f68() {
            const v69 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
            new Uint8Array(v69, 0, 0);
            v69.length >>>= -65536;
            return -65536;
        }
        return [0, 10];
    })();
    i74 < i75;
    (() => {
        i75--;
        let v81 = BigInt64Array;
        const v82 = new v81(3768);
        let v83 = undefined;
        const v84 = v81++;
        const v85 = v84 >> v84;
        let o86 = {
        };
        new Uint8Array();
        const v90 = (44610)[44610];
        try { v90(); } catch (e) {}
        [,...o86] = v82;
        v83 = v85;
    })()) {
}
