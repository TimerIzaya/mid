function f1(a2, a3, a4, a5) {
    return arguments;
}
for (let v7 = 0; v7 < 5; v7++) {
}
let v10;
try { v10 = Symbol.keyFor(Symbol); } catch (e) {}
Symbol.e = v10;
function f11() {
    Array.__proto__ = this;
    const v15 = [this];
    Reflect.apply(Symbol.keyFor, Array, v15);
    try {
        this.c = Array;
    } catch(e18) {
    }
    return Array;
}
const v19 = f11();
function f21() {
    return -8.011899050543597;
}
let v22 = [-2107733634,4];
[256,-58191,257,1421220115,1073741824,4294967297,-1995991055,-65536,-47650];
const v24 = [-65537,1875154844,16,10,1302554851];
class C25 extends f21 {
    static set d(a27) {
        function f28(a29, a30, a31, a32) {
            try {
                f28(a29, a30, a32, a32);
            } catch(e34) {
            }
            for (let v35 = 0; v35 < 5; v35++) {
                a32--;
            }
            return a30;
        }
        v22 = v24;
        const v38 = v19["isArray"](a27);
        f11 ^ v19;
        try { new v38(); } catch (e) {}
        f28(f28, f28, f28, f28);
        const v44 = new Int32Array();
        const t43 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
        t43.b = v44;
        try {
            const t46 = null;
            t46.valueOf = v22;
        } catch(e47) {
            e47.stack;
        }
        const o51 = {
            "maxByteLength": 13,
        };
        const o53 = {
        };
        const v55 = Symbol.isConcatSpreadable;
        o53[v55] = v55;
        const v56 = new ArrayBuffer(13, o51);
        Promise.reject(Promise);
        function f60(a61, a62, a63, a64) {
            const v67 = new Int32Array(a62);
            v67[0] %= -1073741824;
            return v67;
        }
        f60();
        %OptimizeFunctionOnNextCall(f60);
        new DataView(v56);
    }
}
new C25();
const v71 = [-9007199254740991,256,5,4294967297,1,-38452,9223372036854775807,2147483649];
class C72 {
    constructor(a74, a75) {
        const v76 = a75[this];
        try { v76(v76, ...a75, ...v71); } catch (e) {}
    }
}
new C25();
new C25();
("h").split(65535);
