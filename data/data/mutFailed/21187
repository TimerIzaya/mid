const v5 = new BigUint64Array(127);
new Uint32Array(43);
const v11 = new Uint8ClampedArray(7);
function f12(a13, a14) {
    const o31 = {
        [-12]: v11,
        o(a16, a17, a18) {
            let v15 = this;
            v15 -= v5[a14.toPrimitive];
            function F22(a24, a25) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = a25;
                } catch(e26) {
                }
                try {
                    this.h = v11;
                } catch(e27) {
                }
            }
            new F22(a13, a16);
            new F22(7, a16);
            new F22(127, v15);
            return v11;
        },
    };
    return o31;
}
f12(-12, 43);
f12(127, 7);
let v34 = f12(-12, 43);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
}
new BigUint64Array();
[-38686,-6,10000,-53904,-65535,48017,257,536870889];
const v39 = [-67583095,16,64];
[-16,268435456,53406];
class C41 extends F35 {
    d = v39;
    constructor(a43, a44, a45) {
        super();
        for (let v46 = 0; v46 < 10; v46++) {
            a44 + v46;
            const v49 = v39.includes;
            try { v49(); } catch (e) {}
            const v53 = new BigInt64Array(2325);
            for (const v54 in v53) {
            }
        }
    }
}
const v55 = new C41();
new C41();
let v57 = 0;
do {
    Object.defineProperty(C41, "c", { writable: true, configurable: true, enumerable: true, get: f12 });
    v34 %= v55;
    v57++;
} while (v57 < 0)
new C41();
class C62 extends C41 {
}
new C62();
new C62();
