const v3 = ["Oa","Oa","Oa"];
const v4 = ["e","Oa","e","Oa"];
const v5 = ["LRI",v4];
const v6 = [-9223372036854775807,7,-1,2147483647,-4096];
try { v6.map(v4); } catch (e) {}
const v8 = [65537,-2147483649,-1,65536,1904063518,128,1,11,9007199254740990,1392907098];
const v9 = [-1566577270,-3];
try { v9.group(v3); } catch (e) {}
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toLocaleString(); } catch (e) {}
    try { a13.italics(); } catch (e) {}
    try {
        this.c = a14;
    } catch(e17) {
    }
}
new F11("LRI", v8);
const v19 = new F11("LRI", v8);
v19.d = v19;
const v20 = new F11("LRI", v5);
const v21 = v20?.constructor;
try { new v21(v9, "LRI"); } catch (e) {}
function f23() {
    const o27 = {
        __proto__: "S3KT",
        [-5900]: "S3KT",
        "f": 760977347,
        4147259639: 760977347,
        659269453: "S3KT",
        "g": 760977347,
        "h": -5900,
        [760977347]: "S3KT",
        "e": -5900,
        "c": "S3KT",
    };
    return o27;
}
function f28() {
    return f28;
}
const o30 = {
    [f28]() {
    },
};
const v31 = f23();
const v32 = f23();
const v33 = f23();
v33[4147259639] = v33;
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e38) {
    }
}
try { F34.toString(); } catch (e) {}
const v40 = new F34(v32, v32);
new F34(v32, v31);
const v42 = new F34(v33, v31);
const v43 = v42?.constructor;
try { new v43(v32, v42); } catch (e) {}
let v46 = -1024;
v46--;
let v51 = Int16Array;
try { new v51(v20, v46, v20); } catch (e) {}
let v55 = -1024;
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    a58 ^ a58;
    a59.caller = a59;
    a60.length;
    try { new a61(this, a61, a61, "e"); } catch (e) {}
}
F56.arguments = F56;
const v65 = new F56(v55, F56, F56, F56);
const v66 = v65?.constructor;
try { new v66(v20, v4, v65, Int8Array); } catch (e) {}
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this?.constructor;
    try { new v73(a72, this); } catch (e) {}
    a71.e = a71;
}
new F69(F69);
class C76 {
}
try { new C76(); } catch (e) {}
const v79 = [601759695];
v79[0] = v79;
function f80() {
    class C81 {
        set d(a83) {
        }
    }
    class C84 extends C81 {
    }
}
for (let v86 = 0; v86 < 5; v86++) {
    v86++;
    function f88() {
        let v91 = Float64Array;
        const v93 = Array();
        function f94() {
        }
        function f95(a96) {
        }
        f95.e = f95;
        Object.defineProperty(v93, 0, { configurable: true, enumerable: true, get: f94, set: f95 });
        const v97 = v93.unshift(v55);
        function F98(a100, a101) {
            if (!new.target) { throw 'must be called with new'; }
        }
        v91 = F56;
        const v102 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C104 {
        }
        C104.name = C104;
        const v105 = new C104();
        const v106 = v105?.toLocaleString;
        try { new v106(); } catch (e) {}
        v105.__proto__ = F69;
        const v108 = ["Vre","Vre","Vre","Vre"];
        class C109 {
        }
        try { new C109(); } catch (e) {}
        function* f111(a112, a113) {
            yield* v108;
        }
        const v114 = Symbol.toPrimitive;
        Symbol.match;
        const o122 = {
            toString(a118, a119) {
                const v120 = v86 && v91;
                v51 *= v114;
                v120 <= v102;
            },
        };
        try { o122.toString(Array, 2662); } catch (e) {}
        const o146 = {
            [522675525n](a126, a127) {
                new Int32Array(Int32Array);
            },
            valueOf(a133, a134) {
                return this;
            },
            [-4294967297n](a136, a137, a138, a139) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            ...v65,
            [v114]() {
            },
            "type": C76,
            ...v40,
            ..."Vre",
            get h() {
            },
            4: "Vre",
            toString(a143, a144, a145) {
            },
            6: -268435456,
        };
        const v148 = new Float32Array();
        try { v148.subarray(522675525n, -268435456); } catch (e) {}
        v55 %= -268435456;
        new Float64Array(v97, v97);
        try { Uint16Array.from(v91); } catch (e) {}
        new Uint16Array(Symbol, -268435456, -268435456);
    }
    f88();
    %OptimizeFunctionOnNextCall(f88);
    function f157() {
    }
}
function f158(a159, a160, a161, a162) {
    const o163 = {
        [a159]: a159,
    };
    o163.h = o163;
    return o163;
}
function f164(a165, a166, a167) {
    return a166;
}
try { f164(252, 252, v55); } catch (e) {}
Worker.toJSON = f158;
const v171 = [Worker];
const o172 = {
    "arguments": v171,
    "type": "function",
};
const v173 = new Worker(f164, o172);
try { v173.terminateAndWait(); } catch (e) {}
