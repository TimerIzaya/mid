const v3 = [1.0,2.0,9.662014753377843,8.525536279489867e+307,0.7734548477760984,-5.41794071007633,2.2250738585072014e-308,-1000000000.0,-244.7216400466749];
let v4;
try { v4 = v3.map(4.966791944785493); } catch (e) {}
const v5 = [-766.0283010075575,1.1864003392694823e+308,1.7976931348623157e+308];
[-1000000000000.0,-571.371255576531,-3.0,1000000000.0,-1.66368469981288e+305,-587.6077434412781];
function f7() {
    return v5;
}
const t8 = "-16";
t8[2] = "-16";
[-65536];
const v12 = [-65535,-45162267,536870912];
const v13 = [15,714473997,-4096,-11,268646010,2,6,65535,-32660579,536870887];
v13[7] = v5;
function F14() {
    if (!new.target) { throw 'must be called with new'; }
}
const v16 = new f7();
const v17 = [F14,f7,F14];
function f18(a19, a20) {
    let v21;
    try {
    const t0 = "h";
    v21 = new t0();
    } catch (e) {}
    try { new a20("h", v5, a20, a20, v21); } catch (e) {}
    return "h";
}
f18.caller = f18;
v17.toString = f18;
function f26(a27) {
    try {
        v4.some();
    } catch(e29) {
        e29.stack;
    }
    return v16;
}
v13.toString = f26;
const o32 = {
    __proto__: v12,
    "e": v16,
    get a() {
        return this;
    },
};
o32.toString = v4;
const v33 = o32.toString(F14, v4);
try { v33.codePointAt(f26); } catch (e) {}
