function f0() {
}
const v1 = [4.0,0.33870004724581404,-380450.22316207853,947245.4536295086];
const v2 = [4.0,-Infinity,8.949526573911903,262.601007798075,942.8420069065892,-0.0,3.0,378.92135388698034];
const v3 = [-4.918227892975958e+307,-159753.3665014872,-7.894028670101665,1000.0,-1000.0,235517.70027802465,-1.7538415764506343e+308,1000000000.0];
let v5 = new WeakMap();
class C6 extends WeakMap {
    static #n(a8, a9, a10) {
        Object.defineProperty(v1, 10, { writable: true, configurable: true, enumerable: true, set: f0 });
    }
    p(a12, a13) {
        v2.toReversed();
    }
    static [v5];
    constructor(a16, a17, a18) {
        super(a17);
        const v19 = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
        for (let v20 = 0; v20 < 20; v20++) {
            let [,v21,...v22] = v19;
        }
        let v23 = 0.015096032885781985;
        const v24 = v23++;
        v24 ** v24;
        a18.length %= this;
    }
    static get c() {
        try {
            v3.__proto__ = v1;
            function f30() {
                const o31 = {
                };
                return o31;
            }
            const v33 = new Uint32Array(Uint32Array, Uint32Array);
            v33[Symbol.toPrimitive] = f30;
        } catch(e36) {
        }
        return this;
    }
}
new C6(v3, v1, v2);
new C6(v2, v1, v1);
const v39 = new C6(v3, v1, v1);
class C40 extends C6 {
    static n(a42, a43, a44) {
        try {
            function f47(a48, a49, a50) {
                return a50;
            }
            const v52 = [f47,4294967297,,];
            const o53 = {
                "arguments": v52,
                "type": "function",
            };
            C6.c = a43;
        } catch(e54) {
        }
        ({"b":C6,"e":C6,...v5} = v39);
        return this;
    }
    o(a56, a57) {
        new BigInt64Array(1048);
        v3[256] = BigUint64Array;
        for (let v65 = 0; v65 < 50; v65++) {
            v65 << v65;
            for (let v67 = 0; v67 < 25; v67++) {
                v3["p" + v67] = v67;
            }
        }
        new Uint8ClampedArray(128);
        new Uint8Array(14);
        return v3;
    }
}
new C40();
new C40();
new C40();
function F77() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v79 = 0; v79 < 500; v79++) {
        const v81 = ("p").localeCompare();
        ("p" + v79).fontcolor(v79, v81, F77).trimLeft()[12].substring(F77, this);
    }
}
new F77();
const v91 = [-4];
try {
    new BigUint64Array(v91);
} catch(e94) {
}
