function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 2147483647;
    } catch(e3) {
    }
    try {
        this.c = 2147483647;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
class C8 {
    get f() {
        v5 <= v5;
        for (let v11 = 0; v11 < 32; v11++) {
            v6["p" + v11] = v5;
        }
        return v7;
    }
    5;
    static 1;
    1642 = F0;
    d = v6;
}
const v16 = -25283n >> (-25283n && -25283n);
v16 | v16;
const v18 = new C8();
new C8();
new C8();
function f24(a25, a26) {
    const o32 = {
        ...a26,
        __proto__: a25,
        [v6]: a25,
        ...v5,
        "d": F0,
        "a": C8,
        "b": a25,
        [v18]: v6,
        [F0](a28, a29) {
            try {
                super.values(a26, v5, a29, a29);
            } catch(e31) {
            }
            return this;
        },
    };
    return o32;
}
f24("4096", v6);
f24("FNLdZ", v7);
const v35 = f24("MAX_VALUE", v7);
const v36 = [];
const v37 = [v36,v36];
function F38(a40) {
    if (!new.target) { throw 'must be called with new'; }
}
class C41 extends F38 {
    valueOf(a43, a44, a45, a46) {
        super[this] = F38;
        const v49 = new SharedArrayBuffer(945);
        new Int16Array(v49);
    }
}
const v52 = new v35();
const o59 = {
    set g(a54) {
    },
    [v37](a56, a57, a58) {
    },
};
v36.length = 65535;
for (const v61 in o59) {
    try { v52.valueOf(); } catch (e) {}
}
