new Float64Array(177);
new Date();
class C11 {
    static #m(a13) {
    }
    constructor(a15) {
        function f16() {
            return 9007199254740992;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f16 });
        const v17 = this?.__defineSetter__;
        try { new v17(22227, 22227); } catch (e) {}
        new Float32Array();
        try { Uint16Array.apply(Uint16Array, "2147483649"); } catch (e) {}
        const v23 = new Uint16Array();
        const v24 = new Float32Array(v23, -4294967296, a15);
        v24.f = v24;
    }
}
const v26 = new Uint16Array(16);
new BigInt64Array(1947);
class C30 extends Uint16Array {
    static #valueOf(a32, a33, a34) {
        const v35 = super.buffer;
        super.byteLength;
        this + 16;
        const v39 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
        class C40 extends Int16Array {
            [v39];
        }
        try {
            v26.toString = a32;
        } catch(e41) {
        }
        function f42(a43, a44, a45) {
            const o46 = {
                "h": a45,
            };
            return o46;
        }
        return v35;
    }
    static 127;
    #b;
    [1947];
}
new Int8Array(268435456);
const v51 = new Float64Array();
function f52() {
    for (let v53 = 0; v53 < 10; v53++) {
        const v55 = Math.expm1(v51);
        v55 >> v55;
    }
}
f52();
new C30();
new C30();
new C30();
async function f61(a62, a63, a64) {
    return a63;
}
const v65 = f61.constructor;
const v68 = new Uint8ClampedArray(1947);
const v71 = new Uint8Array(64);
try { v68(-85357.59116785484, ...v71, 64, 46, -3.383486186086852e+307, ...v68); } catch (e) {}
v65().bind();
