-11 != -11;
class C7 {
    static {
        try { this.call(-11); } catch (e) {}
        try {
        const t0 = -51613;
        t0(-9007199254740991, this, -51613, -2147483648);
        } catch (e) {}
        const v14 = -2147483648;
        Math.h = 2.0;
        Math.h = Math;
        let v16 = -2147483649;
        let v17 = -8.117683426573176;
        --v17;
        Math.abs(v16);
        Math.sin(this);
        const v21 = v16++;
        v21 & v21;
    }
    static 1 = Infinity;
}
const v23 = new C7();
const v24 = v23?.__defineGetter__;
try { new v24(9, -11); } catch (e) {}
const v26 = new C7();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
new C7();
1073741824 - 1073741824;
const v35 = new Map();
try { v35.forEach(Infinity); } catch (e) {}
function f37(a38) {
    return a38;
}
function f39() {
    return 18789;
}
function f40(a41) {
}
Object.defineProperty(f37, "d", { writable: true, enumerable: true, get: f39, set: f40 });
f37.d = f37;
const o45 = {
    "type": "function",
};
const v46 = new Worker(f37, o45);
v46.terminateAndWait();
function f2() {
    function f3(a4) {
        let v6 = 2.220446049250313e-16;
        try {
            v6 = -1.0;
        } catch(e7) {
        }
        return Uint8ClampedArray;
    }
    return f3;
}
function f8(a9) {
    function f10() {
        return f10;
    }
}
Object.defineProperty(Uint8ClampedArray, "toString", { writable: true, configurable: true, enumerable: true, get: f2, set: f8 });
new Uint8ClampedArray(6);
new Int8Array(2326);
Int16Array[Symbol.iterator] = f2;
try { new Int16Array(Int16Array, Uint8ClampedArray, Uint8ClampedArray); } catch (e) {}
const v20 = new Int16Array(3275);
try { v20.filter(3275); } catch (e) {}
function f22(a23, a24, a25, a26) {
    a23.toString = f22;
    a24--;
    a25--;
    const o40 = {
        [Uint8ClampedArray](a30, a31, a32) {
            const o35 = {
                "maxByteLength": 536870888,
            };
            const v37 = new ArrayBuffer(4066, o35);
            new Uint16Array(v37);
            return v37;
        },
        [2326]: a23,
        10000: Int16Array,
    };
    return o40;
}
f22.e = f22;
f22(2326, 6, 6, 2326);
const v42 = f22(Uint8ClampedArray, 3275, 3275, 3275);
v42[10000] = v42;
f22(v42, 2326, 3275, 6)[10000];
const v47 = new Int32Array(255);
v47[230];
new Int8Array(8);
const v54 = new Int16Array(0);
try { v54.entries(); } catch (e) {}
try { BigInt64Array(Uint8ClampedArray, Uint8ClampedArray, Int8Array); } catch (e) {}
const v58 = new BigInt64Array();
v58.b = Int8Array;
v58.b = v58;
try { v58.reduce(v58); } catch (e) {}
