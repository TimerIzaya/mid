[];
9007199254740991 & 9007199254740991;
170 >>> 170;
new BigInt64Array(170);
const v17 = new BigInt64Array(16);
const v20 = new Int16Array(40);
v20[10] = v20;
const v21 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f22(a23, a24) {
    Math.atanh(BigInt64Array);
    const v30 = a24--;
    const v31 = -2147483648 & 15245;
    --a24;
    15245 >> v31;
    v30 >>> a24;
    return 16;
}
v21[Symbol.toPrimitive] = f22;
Uint32Array.d = Uint32Array;
const v38 = new Uint32Array();
v38.constructor = Symbol;
let v39 = -4294967297n;
const v40 = v39--;
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
v42.g = v42;
function f43(a44, a45, a46, a47) {
    let v48 = a44.constructor;
    v48[Symbol.toPrimitive] = f43;
    let v51;
    try { v51 = v48(); } catch (e) {}
    const v52 = v51?.constructor;
    let v53;
    try { v53 = v52(f43, a44, v21, Uint32Array, v48); } catch (e) {}
    function f54() {
        ("Vre")[1];
        const v57 = ("Vre").charAt(v53);
        v57.blink();
        let v59;
        try { v59 = ("Vre").codePointAt(v21); } catch (e) {}
        v59 % v59;
        let v61 = Float64Array;
        v61 = a45;
        b = v21;
        let v62 = v21.length;
        const v63 = v62++;
        v63 + v63;
        try {
            v42.forEach(a45);
        } catch(e66) {
            e66.message = e66;
        }
        const o77 = {
            "c": v39,
            valueOf(a68, a69) {
                return v51;
            },
            1073741824: v38,
            [v39](a71, a72, a73, a74) {
                eval(v57);
            },
        };
        o77[1073741824];
        return v42;
    }
    const v79 = f54();
    const v80 = v79?.values;
    let v81;
    try { v81 = new v80(); } catch (e) {}
    const v83 = Array(v52);
    try { v83.findLast(); } catch (e) {}
    const v86 = Int8Array.of();
    let v87;
    try { v87 = v86.every(v86, a44, v86, a45, Array); } catch (e) {}
    const v88 = new Int8Array(v87);
    const v89 = v88.buffer;
    v89.constructor = Array;
    const v90 = v89.slice();
    v90.constructor = f43;
    v48 = v90;
    v17["toSorted"](v51, v80, ..."toSorted", v81, 40, "toSorted");
    v90[v79];
    Math.log1p(Int8Array);
    (-1.0044068345672166) ** Uint32Array;
    Math.abs(-898178986);
    +(!Uint32Array);
    const v102 = v90.constructor;
    try { v102(v90, v87, v40, v86, a44); } catch (e) {}
    const v105 = new Int32Array(v102, v48, v48);
    v105.lastIndexOf(a44, a46);
    try { v42["find"](..."find", a47, ...v41, ...v42); } catch (e) {}
    return v39;
}
f43.toString = f22;
try { f43(536870889, 8464, 536870889, v40); } catch (e) {}
for (let v110 = 0; v110 < 10; v110++) {
    let v111 = f43(v38);
    v111--;
}
%OptimizeFunctionOnNextCall(f43);
const v113 = f43(Uint32Array);
v113 * v113;
