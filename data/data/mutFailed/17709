class C3 {
    constructor(a5) {
        let v4 = this;
        v4 += v4;
        try {
        const t0 = -400381.5565961945;
        t0(v4, C3);
        } catch (e) {}
        super[a5];
        const v9 = a5 && super.h;
        for (let v10 = 0; v10 < 32; v10++) {
            v9["p" + v10] = v10;
        }
    }
    static #b = 1000000.0;
    a;
}
const v13 = new C3(1000000.0);
const v14 = new C3(-1.7976931348623157e+308);
new C3(1000000.0);
class C16 extends C3 {
    m(a18, a19, a20) {
        new BigInt64Array(10);
        new Uint16Array(127);
        new Uint32Array(83);
        return v13;
    }
    #f;
    static [1000000.0] = C3;
}
const v30 = new C16();
const v31 = new C16();
const v32 = new C16();
function f33(a34, a35, a36, a37) {
    const o54 = {
        toString(a39, a40, a41) {
            try {
                v30.__proto__ = v14;
            } catch(e42) {
            }
            return v14;
        },
        o(a44, a45, a46) {
            if (a37 !== a35) {
                v32[v13];
                [-982506867,-256,64,2147483647];
                [10,5,268435441,-2147483649,-1074601583];
                [9,1000,1700421583,-128,-2147483649,46451,9];
            } else {
                try {
                    super.padStart(v14);
                } catch(e53) {
                }
            }
            return a34;
        },
    };
    return o54;
}
f33(-400381.5565961945, v31, -400381.5565961945, v30);
f33(-400381.5565961945, v13, -400381.5565961945, v13);
f33(-1.7976931348623157e+308, C3, -1.7976931348623157e+308, v31);
function f58() {
}
function f59() {
    return f58;
}
-520531413 << -520531413;
-65536n + -65536n;
Map.prototype;
const v70 = new Map();
let v71;
try { v71 = v70.set(Map, 512n); } catch (e) {}
try { new BigInt64Array(-9513n, f58, -9513n, BigInt64Array); } catch (e) {}
const v75 = new BigInt64Array(0);
let v76 = 1024;
let v77 = v76--;
v77++;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v76);
const v83 = -9513n != 1;
v83 || v83;
if (!v83) {
    try {
        new BigInt64Array(127, v32, v71, 127);
    } catch(e87) {
    }
} else {
    var h = v83;
}
5 ^ 5;
const v94 = new BigUint64Array(5);
let v95;
try { v95 = v94.join(v76); } catch (e) {}
try { v95.replace(Int32Array, f58); } catch (e) {}
Int32Array.length;
-f58;
try {
    v75.f = 0;
} catch(e101) {
}
const v102 = new Int32Array(1);
v102[0];
v102[0] = v102;
new Int8Array(12);
const v107 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v108 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v109 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v109.join(-65536n); } catch (e) {}
function F111(a113, a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
    const v116 = this?.__lookupGetter__;
    try { new v116(12); } catch (e) {}
    a114 + a114;
    try { a115.find(a113); } catch (e) {}
    try {
        this.d = a113;
    } catch(e120) {
    }
    try {
        this.b = a115;
    } catch(e121) {
    }
}
const v122 = F111?.constructor;
v122.length = v122;
let v123;
try { v123 = new v122(12); } catch (e) {}
v123.arguments;
new F111(Int32Array, 12, v108);
const v126 = new F111(v108, 5, v109);
v126.length;
const v128 = new F111(v107, 12, v107);
v128[65536];
const o131 = {
};
for (let v132 = 0; v132 < 25; v132++) {
}
