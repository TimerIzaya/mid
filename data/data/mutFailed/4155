let v2 = -2.1657623955247987e+306;
class C3 {
    get b() {
        try {
            const t4 = "c";
            t4.__proto__ = this;
        } catch(e5) {
            super[e5] = "d";
            super[this] = e5;
            super.c;
            try {
                const t11 = "d";
                t11.g = C3;
            } catch(e7) {
            }
        }
        v2 **= v2;
        return this;
    }
    10;
    b = v2;
    h;
    a;
}
const v8 = C3?.constructor;
try { new v8("d"); } catch (e) {}
const v10 = new C3();
const v11 = new v2();
const v12 = v11?.__lookupSetter__;
try { new v12("c"); } catch (e) {}
const v14 = new C3();
function f15(a16, a17, a18, a19) {
    a19[10] = a19;
    const o40 = {
        [v14](a21, a22, a23, a24) {
            function f25() {
                return v2;
            }
            return a24;
        },
        [v11](a27, a28, a29) {
            Object.defineProperty(a16, "e", { enumerable: true, get: eval });
            new BigInt64Array(1);
            new BigUint64Array(90);
            new Uint8Array(9);
            return eval;
        },
    };
    return o40;
}
try { f15.bind(v11); } catch (e) {}
f15(C3, f15(v11, C3, C3, v14), C3, v10);
const v44 = f15(v11, v11, v11, C3);
v44.h = v44;
-4761 - -4761;
function f49() {
    let v51 = ("-536870912").normalize;
    v51.a = v51;
    ("-536870912").g;
    try { new Uint16Array(v2, Uint16Array, v2); } catch (e) {}
    const v56 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    v56.length;
    for (let v58 = 0; v58 < 5; v58++) {
        function f59() {
            try {
                v56.forEach();
            } catch(e61) {
                e61.name;
                e61.a = e61;
            }
            const v64 = Symbol.toPrimitive;
            const v66 = v64.description;
            v66[15];
            Symbol.for(v66);
            v64.description;
            Symbol.for();
            return v64;
        }
        const t78 = 12;
        Symbol.for(t78().description);
        %OptimizeFunctionOnNextCall(f59);
    }
    v51 = v56;
    try {
        ("c").repeat(209);
    } catch(e76) {
    }
    new Uint16Array(209);
}
try { f49(); } catch (e) {}
const v79 = [140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
v79[3] = v79;
[0.0,2.439947332797196];
const v81 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
Object.defineProperty(v81, "valueOf", { writable: true, value: f49 });
const v83 = v81 <= "Z";
v83 && v83;
36002 % 36002;
const v87 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
v87.g = v87;
function f88(a89) {
    a89 ^ a89;
    return 36002;
}
function f91(a92, a93) {
    a92.length;
    a93.length;
    let v96 = a93.length;
    v96--;
    return f88;
}
f91.g = f91;
const v99 = new Promise(f91);
v99[v87] += 36002;
const v102 = new BigInt64Array();
new BigUint64Array(127);
1000 >>> -9007199254740992;
class C109 extends f49 {
}
try { new C109(); } catch (e) {}
for (const v111 in C109) {
}
try { Int16Array.bind(254067393); } catch (e) {}
new Int16Array(3);
268435456 >> 268435456;
let v117 = 10;
for (; v117--;) {
}
Int8Array.g = Int8Array;
const v120 = [];
function* f121(a122, a123) {
    yield* v120;
    return a122;
}
const v124 = new Int8Array();
let v125;
try { v125 = v124.entries(); } catch (e) {}
const v126 = v125?.__lookupGetter__;
try { new v126(v125); } catch (e) {}
try { new Array(v102); } catch (e) {}
for (let v130 = 0; v130 < 10; v130++) {
    const v132 = 3811 >>> 3811;
    v132 | v132;
    const v135 = Float64Array.of();
    v135.buffer;
    const v137 = v135?.set;
    try { new v137(3811); } catch (e) {}
    v135.toString = f49;
    const v140 = new Date();
    const v141 = v140?.toGMTString;
    try { new v141(); } catch (e) {}
    const v144 = Array(36862);
    try { v144.sort(36862); } catch (e) {}
}
