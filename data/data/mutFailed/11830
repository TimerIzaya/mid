new Uint32Array(7);
const v5 = new Int32Array(6);
try { new Uint8Array(6, Uint8Array, Int32Array); } catch (e) {}
new Uint8Array(11);
[4096,536870912,268435439,2147483649,10000,-9007199254740992,2147483647,256,-9007199254740991];
const v11 = [65537,-2,52470,-1088619203,-65535,-1854235579,2147483647];
try { v11.reduce(v11); } catch (e) {}
[1128019522,22996,9223372036854775807,4294967297,-1893407632];
function f14() {
}
const v15 = Uint32Array();
let v16 = -1024;
v16--;
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
}
const v24 = new F18();
const v25 = v24?.__lookupGetter__;
try { new v25(f14); } catch (e) {}
const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
}
try { F28.bind(F28); } catch (e) {}
class C33 {
}
C33.prototype = C33;
const v35 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v36 = [601759695];
v36.g = v36;
for (let v38 = 0; v38 < 5; v38++) {
    function f39() {
        const v41 = ("Vre")?.toLocaleUpperCase;
        try { new v41(); } catch (e) {}
        let v43;
        try { v43 = ("Vre").strike(); } catch (e) {}
        try { v43.localeCompare("Vre"); } catch (e) {}
        let v48;
        try { v48 = Array.from(Array); } catch (e) {}
        v48[0];
        const v50 = Array();
        try { v50.findLast(v50); } catch (e) {}
        let v52 = v50.unshift();
        v52 - v52;
        const v55 = new Set();
        let v56;
        try { v56 = v55.add(-4294967297n); } catch (e) {}
        function F57(a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            F57();
        }
        try {
            v27.forEach(Float64Array);
        } catch(e63) {
            e63.b = e63;
        }
        class C65 {
        }
        try { new C65(); } catch (e) {}
        const v67 = new C65();
        try {
            v67.__proto__ = F28;
        } catch(e68) {
        }
        const v69 = Symbol.toPrimitive;
        const o74 = {
            toString(a71, a72) {
                try { this.toString(a72, v56); } catch (e) {}
            },
        };
        try { o74.toString(f39, v56); } catch (e) {}
        try { o74.toString(v52, v15); } catch (e) {}
        let v77 = -268435456;
        v77--;
        const o98 = {
            [522675525n](a80, a81) {
            },
            "c": v36,
            valueOf(a83, a84) {
            },
            [-4294967297n](a86, a87, a88, a89) {
            },
            "e": v77,
            "maxByteLength": v5,
            "arguments": v35,
            ...v24,
            [v69]() {
            },
            "type": C33,
            valueOf(a92, a93) {
            },
            4: "Vre",
            toString(a95, a96, a97) {
            },
        };
        const v99 = o98[522675525];
        try { v99.toString(); } catch (e) {}
        new Float32Array();
        const v105 = [272822757];
        try { v105.toLocaleString(); } catch (e) {}
        [-2.0,272822757];
        const o108 = {
            __proto__: F28,
        };
        o108[1] = o108;
        v52 %= v77;
        return v69;
    }
    try { f39(); } catch (e) {}
    f39();
    Symbol.for(v35.description);
    try { this.parseFloat(v35); } catch (e) {}
    %OptimizeFunctionOnNextCall(f39);
}
