class C3 {
    constructor(a5) {
        const v6 = this.d;
        let v7;
        try { v7 = ("atan").replace(v6, v6); } catch (e) {}
        const t5 = "atan";
        t5[this] = "m";
        for (let v8 = 0; v8 < 32; v8++) {
            const v10 = "p" + v8;
            const v11 = v10 >>> v6;
            let v12;
            try { v12 = ("p").slice(v10, v11); } catch (e) {}
            const t12 = "atan";
            t12[this] = v12;
            ("p")[v7];
            const t14 = "p";
            t14[6] |= v6;
            const t17 = "atan";
            t17[v10] = v8;
            let v14 = 0;
            while (v14 < 0) {
                super.b;
                v14++;
            }
        }
    }
    static #d = "m";
    12 = "atan";
    #e;
    #c;
}
const v19 = new C3("atan");
const v20 = new C3(-591.0366507574852);
const v21 = new C3(C3);
class C22 extends C3 {
    constructor(a24, a25, a26, a27) {
        super(a25);
        function f28(a29, a30, a31, a32) {
            const o33 = {
                "e": this,
                "b": a26,
                ...a32,
            };
            return o33;
        }
        const v34 = f28("m", v20, a26, v20);
        f28(v34, v34, this, v34);
        f28(this, v21, a26, a24);
    }
}
const v37 = new C22(v20, v20, v19, v19);
const v38 = new C22(C22, "m", v37, v37);
new C22(v19, v20, v19, v38);
for (let v43 = 0; v43 < 5; v43++) {
    function f44() {
        const v45 = [-1.5424212036356715e+308];
        try { v45.findIndex(); } catch (e) {}
        ~v45.shift();
        return v43;
    }
    f44();
    %OptimizeFunctionOnNextCall(f44);
}
