function f0() {
}
const v1 = /Y/vdimy;
/ga\w/is;
const v3 = /DoAa*?/u;
let v4;
try { v4 = v3.toString(); } catch (e) {}
try { v4.link(v3); } catch (e) {}
new Uint32Array(85);
2 - 2;
new Uint16Array(2);
3960 & 3960;
const v16 = new BigInt64Array(3960);
try { v16.entries(); } catch (e) {}
const v19 = new Date();
try { v19.valueOf(); } catch (e) {}
Float32Array.prototype;
const v23 = new Float32Array(Float32Array);
try { v23.every(v19); } catch (e) {}
for (let v25 = 0; v25 < 25; v25++) {
    function f26(a27, a28, a29, a30) {
        -a30[0];
        Number.isNaN(a27[1]);
        for (let v36 = 0; v36 < 5; v36++) {
        }
        const v37 = a28--;
        a27[0] = a27;
        arguments[0] = arguments;
        const v39 = arguments?.__lookupGetter__;
        let v40;
        try { v40 = v39.constructor(f26, a29, v39); } catch (e) {}
        new Float32Array(v25, v40, a28);
        Int32Array.e = Int32Array;
        try { new Int32Array(a27, v37, Uint32Array); } catch (e) {}
        const v44 = new Int32Array();
        let v45;
        try { v45 = v44.join(v1); } catch (e) {}
        try { v45.toUpperCase(); } catch (e) {}
        const v47 = a29;
        try { v47.values(); } catch (e) {}
        v44.fill(...v47);
        return Float32Array;
    }
    f26.arguments;
    for (let v51 = 0; v51 < 10; v51++) {
        f26(v23);
    }
}
