let v0 = 3.558914652769996;
const v3 = [13,-1073741824,64,-799387076,10000,-1906643582];
function f4(a5, a6) {
    return v3;
}
v3.then = f4;
const v7 = [6,1000,-505700133];
const v9 = v3["push"](v7);
class C10 {
    static e = v0;
    b = "push";
    static d = v3;
    static #a;
    #d = v9;
    static 5 = f4;
    constructor(a12) {
        for (const v13 of "push") {
        }
    }
    toString(a15, a16) {
        const v17 = async (a18, a19, a20, a21) => {
            const v22 = a20?.[2511958252];
            %VerifyType(a21);
            await a15;
            return v22;
        };
        return v17;
    }
    /*
    constructor(a25, a26) {
        const v29 = new Uint8Array(268435440);
        class C30 extends v29 {
            constructor(a32, a33, a34) {
                super();
                const o38 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o38);
                let v41 = -7;
                let v42 = -1.7976931348623157e+308;
                "minor" && v42;
                v0--;
                v41++;
                v42--;
                +v41;
            }
            n(a49, a50, a51) {
                try { v7["join"](...a25, 4, ..."push", a51, a25); } catch (e) {}
                return this;
            }
        }
        a25?.h;
        super.g;
        const v56 = this.constructor;
        try { new v56(a25); } catch (e) {}
        Math.atan2(this, this);
    }
    */
    static #b;
    [9007199254740991] = 4;
    [4];
    0 = v7;
    static [4];
    static #a;
}
new C10();
new C10();
new C10();
[-2.2250738585072014e-308,3.0,0.5312627955100762,660960.8485664343,NaN,-1e-15,4.0];
const v67 = [836.688992394565,220.32322178251457,-51.804550654434706,0.34814030049251343,16735.187097366666,-2.2250738585072014e-308,3.4755059097167136e+307,-98766.82504113019,1000000000.0,207.3726114427409];
[0.7781726990610969,1e-15,0.16727242506197904];
new Uint32Array(5);
const v74 = [-9007199254740991,256,5,4294967297,1,-38452,9223372036854775807,2147483649];
const v75 = [-4564,-541496027,-554545361,536870888];
class C76 {
    constructor(a78, a79) {
        const v80 = a79[this];
        try { v80(v80, ...a79, ...v74); } catch (e) {}
    }
}
new C76(v75, v75);
class C84 {
}
const v85 = new C84();
v67 >> -1073741824;
new Uint8ClampedArray();
class C91 {
    [8077n];
}
new C91();
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    const v100 = a98?.__lookupSetter__;
    try { new v100(a98, ...v100, -534568.6902183883, this); } catch (e) {}
    ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"](v67, -534568.6902183883);
    const v107 = new Uint16Array(93);
    v107.includes(93);
    function f109() {
        return f109;
    }
    function f110(a111) {
        const v112 = a111?.constructor;
        let v113;
        try { v113 = v112(a111, f109); } catch (e) {}
        const o115 = {
            get d() {
                return this;
            },
        };
        return v113;
    }
    try {
        v85.__proto__ = a98;
    } catch(e116) {
        arguments[4] = arguments;
        function f118(a119, a120) {
            const v122 = new Int8Array();
            const v125 = new Int32Array(3);
            class C127 {
            }
            let v128 = new C127();
            const v129 = new C127();
            function F130() {
                if (!new.target) { throw 'must be called with new'; }
                const v132 = this * this;
                v128 = this;
                v132 <= v129;
                try {
                    for (let i = 0; i < 5; i++) {
                    }
                    new F130();
                } catch(e135) {
                }
            }
            v125["keys"](v122, ...v125, ..."keys");
            Math.pow(Math, f118);
        }
    }
    try { v100(6); } catch (e) {}
    a99[2147483648] = a99;
    const v141 = new Symbol();
    for (const v142 in v141) {
    }
}
