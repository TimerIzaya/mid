Math.log(4096);
function f4(a5, a6, a7, a8) {
    arguments.toString();
    return f4;
}
%OptimizeFunctionOnNextCall(f4);
const v11 = new Int32Array(4096);
-4 * -4;
let v16 = -16n;
function f17() {
    v16 *= -1911645276n;
    return -1911645276n;
}
f17();
new Float64Array(135);
new Float64Array(6);
class C24 {
    912405933;
    valueOf(a26, a27) {
        /h/v;
        /a+b|ca||bc/udis;
        return /[qabc+UZ(?=.)]/gvds;
    }
    static p(a32, a33, a34, a35) {
        super[4096];
        new Uint16Array(3);
        for (let v40 = 0; v40 < 5; v40++) {
            function f41() {
                const v42 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                new Uint8Array(v42, v40, v40);
                v42.length >>>= -65536;
                return -65536;
            }
            f41();
            %OptimizeFunctionOnNextCall(f41);
        }
        a32 !== v11;
        return v11;
    }
}
new C24();
new C24();
const v54 = /a$\P{Decimal_Number}/gvdims;
const v55 = v54[v54];
for (let i = 0; i < 5; i++) {
    const v56 = v54.source;
    try { v55(true, v56, v56, v56); } catch (e) {}
    Math.log(true + true);
}
new C24();
function f64() {
    let v65 = 852.2904873570058;
    function f66() {
        const v67 = [];
        v67[6] = v67;
        const o70 = {
            set b(a69) {
            },
        };
        return v65;
    }
    for (let v71 = 0; v71 < 5; v71++) {
        f66();
        %OptimizeFunctionOnNextCall(f66);
    }
    const o77 = {
        m(a74, a75) {
            return v65++;
        },
    };
    return o77;
}
f64();
%OptimizeFunctionOnNextCall(f64);
new Int8Array(1024);
new Int16Array(16);
new Uint16Array(256);
const v88 = new Uint16Array(255);
v88.buffer.slice().transfer();
