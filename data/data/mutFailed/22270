const v2 = new Uint32Array(2318);
const v5 = new Int16Array(3);
new Int8Array(3775);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a13;
    } catch(e15) {
    }
    try {
        this.h = v5;
    } catch(e16) {
    }
    try {
        this.a = v5;
    } catch(e17) {
    }
}
new F9(3775, 3775, 3, 2318);
const v19 = new F9(3775, 3775, 3, 2318);
const v20 = new F9(2318, 3, 2318, 2318);
class C21 {
    static #n(a23, a24) {
        this[a23] = v5;
        super[3775] = 2318;
        return a24;
    }
    static b;
    a;
    #h;
    static #m(a26, a27, a28, a29) {
        try {
            v2.__proto__ = this;
        } catch(e30) {
            try {
                v19.#h;
            } catch(e32) {
            }
        }
        return a27;
    }
}
new C21();
new C21();
new C21();
for (let v39 = 0; v39 < 5; v39++) {
    function f40() {
        f40();
        v20[Symbol.match];
        ("p").normalize("NFKD");
        const v50 = ("Vre").fixed("Vre").codePointAt();
        const v51 = v50 * v50;
        v51 >= v51;
        return f40;
    }
    f40();
    %OptimizeFunctionOnNextCall(f40);
}
