new Array(5);
const v8 = new BigInt64Array(257);
new BigInt64Array(1590);
new v8(9);
function f18() {
    return Array;
}
function F19(a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 145253519;
    } catch(e22) {
    }
}
new f18();
new F19(-2147483648);
[7,-2147483647,268435456,9007199254740991,-4096];
[268435441,268435439];
new Uint16Array(6);
const o36 = {
    "execution": "async",
};
gc(o36);
let v0 = 2147483648n;
let v2 = 1n;
const v3 = [-4.0,-2.2250738585072014e-308,-765197.015522522,-1.0,198398.92370344675,61920.114995772485,Infinity];
const v4 = new v2();
const o8 = {
    "c": "c",
    [0.8270476620027499]: 0.43223002794581145,
    "g": 0.8270476620027499,
    [-1]: "c",
};
let v9 = [206.2916870271772,-2.2250738585072014e-308];
const v10 = [-5.0,-0.0,-7.028336586956381,0.4253704171971935];
try { v10.groupToMap(v0); } catch (e) {}
class C12 {
    p(a14, a15) {
        if (64n !== v2) {
            -64n;
            const o18 = {
            };
            o18.execution = C12;
            class C20 {
                static #m(a22) {
                    for (let v23 = 0; v23 < 5; v23++) {
                        const t23 = "h";
                        t23["p" + v23] = v23;
                    }
                }
            }
            try {
                const v26 = [43048,0,536870912,5,52530,9223372036854775807,-65537,-65536];
                let v27;
                try { v27 = v4.p(v26, v4, v4, 0.43223002794581145); } catch (e) {}
                try {
                    a15.length = v27;
                } catch(e28) {
                }
                v0 |= 64n;
            } catch(e29) {
            }
        } else {
            try {
                v9 = v10;
            } catch(e30) {
            }
        }
        return v9;
    }
    constructor(a32, a33) {
        let v34;
        try { v34 = this.p(v9, this, this, a33); } catch (e) {}
        try {
            a32.length = v34;
        } catch(e35) {
        }
    }
}
const v36 = new C12();
const v37 = v36?.constructor;
for (let i40 = 0, i41 = 10; i40 < i41; i40++, i41--) {
    v10.length;
    try {
        v10[2147483647] = i40;
    } catch(e50) {
    }
}
let v51;
try { v51 = new v37(); } catch (e) {}
const v52 = new C12();
const v53 = new C12();
[v10,v9,v3,v53];
[v52,v36,C12,v3];
[v9,v9,v52,v9];
function f57() {
    const o64 = {
        [0.43223002794581145]: -8.233575780020734,
        [64n]: 64n,
        get b() {
            this.a = this;
            try {
                super[this] = -8.233575780020734;
            } catch(e60) {
                e60.h = e60;
            }
            return this;
        },
        toString(a62, a63) {
            return this;
        },
        ...v10,
        ...v9,
    };
    let v66;
    try { v66 = new Symbol(); } catch (e) {}
    const v67 = Symbol.toPrimitive;
    const v69 = v67.description;
    try {
        v2 = v51;
    } catch(e70) {
    }
    try {
        v66 &= o64;
    } catch(e71) {
    }
    Symbol.for(v69);
    o64[v67] = f57;
    return o64;
}
f57.arguments = f57;
const v73 = f57();
const o74 = {
    ...v73,
};
