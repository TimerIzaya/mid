const v2 = new Int32Array(16);
10 * 10;
const v6 = new Int8Array(v2);
1000 !== 1000;
const v10 = new Uint32Array(1000);
class C11 {
    static #valueOf(a13, a14, a15, a16) {
        this[a13] ||= a16;
        super[a14] = this;
        [-10518,-65536,853724848,-4294967295,9223372036854775807];
        [4294967296,-65536,257,-65537,29523,-30367,127,1928535750];
        const v19 = [272514340,1009368210,-1,-7,-1238126923,-2,-61464];
        try {
            super.min(Int8Array);
        } catch(e21) {
        }
        return v19;
    }
    [Int8Array] = 16;
    static h;
}
C11.prototype = Int8Array;
let v22 = new C11();
try { v22.constructor(); } catch (e) {}
const v24 = new C11();
const v25 = v24?.constructor;
try { new v22(); } catch (e) {}
const v27 = new C11();
function f28(a29, a30) {
    a29 + f28;
    const v32 = a30?.constructor;
    try { new v32(); } catch (e) {}
    const o45 = {
        "d": v2,
        "b": Int8Array,
        2724: 16,
        "e": v6,
        4: Int32Array,
        "h": a29,
        "g": a29,
        set f(a35) {
            v22++;
            const o37 = {
            };
            try {
                o37.b = v24;
            } catch(e38) {
            }
            try {
                const o39 = {
                };
                o39.b = v24;
                o39.f = Uint32Array;
            } catch(e40) {
            }
            try {
                const o41 = {
                };
                o41.b = v24;
                o41.f = Uint32Array;
                o41.h = a35;
            } catch(e42) {
            }
            try {
                const o43 = {
                };
                o43.b = v24;
                o43.f = Uint32Array;
                o43.d = o43;
            } catch(e44) {
            }
        },
    };
    return o45;
}
f28.length = f28;
const v46 = f28(10, v27);
const v48 = f28(v46, f28(v46, v10));
try { v48.b(C11, v48, C11); } catch (e) {}
Uint8ClampedArray.g = Uint8ClampedArray;
const v53 = new Date();
const v56 = new v25();
v56.add(v53);
let [v58,,...v59] = v56;
try { v58.setFullYear(10, Uint8ClampedArray, Int32Array); } catch (e) {}
const v61 = v58.setUTCFullYear(v59, Set, -256);
v61 >>> v61;
const v63 = new Uint8ClampedArray(255);
v63[3] = Uint32Array;
