const v0 = [];
function f1() {
    v0 >= v0;
    new Int16Array(305);
    return 305;
}
v0.toString = f1;
const v6 = [387087.75447523757,1.7976931348623157e+308,-868.4216401905778,2.1303949340212025,6.363307610326775,-92089.20121816488,-198.86274141142815];
const v7 = [525194.5215581332,Infinity,947.88128870132,1000.0,0.11239019108330994,Infinity,0.40325732261229563,900273.6441613145,-0.0];
const v8 = [-898.6293688129621,-112.11922657195578,1.2319564380514938e+308,-2.220446049250313e-16,3.0,104.8416342064479,0.29310687276236125,-873343.3689023607,915394.752398452];
function F9(a11) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v0); } catch (e) {}
    try { a11.findLast(this); } catch (e) {}
    try { a11.findLast(this); } catch (e) {}
    try {
        this.h = a11;
    } catch(e15) {
    }
}
F9.arguments = F9;
const v16 = new F9(v0);
v16.h;
new F9(v8);
new F9(v6);
const v22 = new Uint8ClampedArray(3016);
Uint32Array.name;
const v26 = new Uint32Array(128);
Object.defineProperty(v26, "toString", { value: f1 });
try { Float32Array.apply(3016, v22); } catch (e) {}
const v30 = new Float32Array(10);
try { v30.reduce(v7); } catch (e) {}
const v32 = [-1000000.0,-3.1923473210656557,-1.721355656202141e+308,4.0,0.3955838142797843,-3.0,1.1463753586867827e+308];
v32.constructor = f1;
try { v32.fill(v22); } catch (e) {}
function f34(a35) {
    try { a35.sort(v16); } catch (e) {}
    a35[3] = a35;
    const o37 = {
    };
    o37.h = o37;
    o37[213] = v32;
    const v38 = o37[213];
    function f39() {
        return f34;
    }
    Object.defineProperty(v38, "constructor", { writable: true, configurable: true, get: f39 });
    try { v38.splice(o37, v26); } catch (e) {}
    return v38;
}
f34.length;
f34.caller = f34;
%PrepareFunctionForOptimization(f34);
const v42 = f34(v32);
v42[6] = v42;
%OptimizeFunctionOnNextCall(f34);
f34(v32);
