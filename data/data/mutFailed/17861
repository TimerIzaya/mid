const v0 = [-2147483647,9007199254740991,-2147483649,-536870912,-2147483649,-11,-9007199254740992,-4294967297,-4294967297,-50004];
new BigUint64Array(BigUint64Array);
const v4 = /(x)(x)(x)\1/uis;
function f5(a6, a7, a8, a9) {
    const o16 = {
        2: a8,
        __proto__: a9,
        [v4](a11, a12, a13, a14) {
            super.test();
        },
    };
    return a6;
}
%OptimizeFunctionOnNextCall(f5());
const v18 = [-44159,2147483647,-1186663574,-7524,1,-1073741824,-9007199254740990,256,-4096];
const v19 = [-256,-65537,1073741823,1024,255,-4294967295,6,-1124535752];
const v21 = [512,v0,Map,Map];
function f22(a23, a24) {
    const v25 = a24?.__lookupGetter__;
    a24?.constructor;
    return v25;
}
%OptimizeFunctionOnNextCall(f22);
const v27 = [v21,v0];
[v21,v19,v19,v27,v27];
const o29 = {
};
new Proxy(v18, o29);
const v32 = new Map();
function F33(a35) {
    if (!new.target) { throw 'must be called with new'; }
    function F36(a38, a39) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v40 = new F36();
    function f41() {
        const o47 = {
            [1836424012](a44, a45, a46) {
            },
            "e": v40,
        };
        return F36;
    }
    f41();
    try {
        v4.e = a35;
        let v50;
        try { v50 = this["m"]("m", v32, this); } catch (e) {}
        const t48 = "m";
        t48.length /= v50;
        typeof v50 === "symbol";
    } catch(e54) {
    }
    try {
        this.d = Map;
    } catch(e55) {
        for (let v56 = 0; v56 < 790; v56++) {
            f41();
        }
        new BigUint64Array();
    }
    const v64 = ["-536870912",v40,[/D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy]];
    const v66 = [];
    Reflect.apply(("-536870912").normalize, v64, v66);
}
const v69 = new F33(v32);
new F33(v69);
new F33(v32);
new BigUint64Array(2582);
function f75() {
    return f75;
}
const v76 = [-3,257];
class C77 extends f75 {
    static #n(a79, a80, a81) {
        Object.defineProperty(v76, 10, { writable: true, configurable: true, enumerable: true, set: f75 });
    }
}
const v82 = new C77();
try { v82.finally(v76, f75, f75); } catch (e) {}
const t80 = Array(257);
t80.length = 257;
