const v0 = [-11,-39256,9,-978048137,25507];
[-4720];
const v2 = [1329323527,-1724164176,65195,-61211,39294,10,10,3,65536];
function f3() {
    return v0;
}
const v4 = /j\ud808\udf45*TK/vdimy;
v4.ignoreCase = v4;
const v5 = /O/guim;
const v7 = /A\ud808\udf45*/uy.dotAll;
v7 && v7;
function f9() {
    return v2;
}
Uint32Array.b = Uint32Array;
const v12 = [290511.96857215906,0.3003673637544756,-458526.71260649094,0.8333335605081266,16682.170944584184,0.12597720350931985];
const v13 = [2.220446049250313e-16,-3.0,-3.117457405711452,Infinity,2.220446049250313e-16];
const v14 = [-2.220446049250313e-16,8.380618196344006];
class C15 {
    g;
    static charCodeAt(a17, a18) {
        return this;
    }
    static get f() {
        v14[114] <<= v12;
        return v13;
    }
}
C15.e = C15;
new C15();
const v21 = new C15();
const v22 = new C15();
class C23 {
    static #b;
    static get matchAll() {
        v14.toString = v22;
        v12.#b = this;
        return this;
    }
}
try { C23.call(v7); } catch (e) {}
C23.b = C23;
const v26 = new C23();
const v27 = v26?.__lookupGetter__;
let v28;
try { v28 = v27(v14); } catch (e) {}
const v29 = new C23();
const v30 = v29?.__lookupGetter__;
try { new v30(v28); } catch (e) {}
try { new v30(); } catch (e) {}
const v33 = new C23(v5);
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
const v36 = v33?.constructor;
try { v36(); } catch (e) {}
let v38;
try { v38 = new v36(); } catch (e) {}
const v39 = v38?.__defineGetter__;
try { new v39(v29, v5); } catch (e) {}
[v14,[v26,[v26,v33]],v21];
65537 - 65537;
65537 + 65537;
256 >>> 256;
-256;
-2720;
function f52() {
    return 2720;
}
let v53;
try { v53 = f52.bind(v26); } catch (e) {}
f52.arguments = f52;
f52.valueOf = f52;
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    ~a56;
    a56 * a56;
    const v60 = this.constructor;
    v60.arguments = v60;
    try { new v60(a56, 256); } catch (e) {}
    -a56;
    a57--;
}
const v64 = F54.name;
try { v64.substr(v5, v64); } catch (e) {}
new F54(65537, f52);
new F54();
class C68 extends F54 {
}
new C68(v12, 256);
new C68();
const v71 = new Uint32Array(256);
v71[63];
new Int32Array(206);
135 >> 135;
Int8Array.e = Int8Array;
new Int8Array(135);
for (let v80 = 0; v80 < 50; v80++) {
}
const v81 = [4.0];
delete C15[Int8Array];
v53?.[v30];
try {
    v22.fuck("bigint", /Dfoo[z]*f[]\p{Nd}^?/udmsy);
} catch(e87) {
}
try { v81.some(a); } catch (e) {}
