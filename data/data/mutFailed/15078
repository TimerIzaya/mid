Math.atan2(-0.0, -0.0);
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1073741824;
    } catch(e7) {
    }
    try {
        this.f = 1073741824;
        const v8 = [-1.5645136499685964e+308,-4.455146091404086e+307,-6.885938370216613,-Infinity];
        const v9 = [-8.594679214373069e+306,-1000.0];
        const v10 = [-1.0,-3.0,1000000000000.0,0.4992460480015034,-1000000000000.0,-1.7976931348623157e+308,0.8138769867150808];
        try {
        const t0 = 1073741824;
        t0(F4, v8, v10, 1073741824, F4);
        } catch (e) {}
        [1073741824,this,1073741824,v9];
        [this,v8,[v10,F4,v9],F4];
        function F16() {
            if (!new.target) { throw 'must be called with new'; }
            function F18(a20, a21) {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C22 {
                static get g() {
                    super.subarray();
                }
            }
        }
    } catch(e25) {
    }
}
let v26 = -4096;
/[xyz]/gvimy;
const v29 = /foo(?!bar)baz/gvimsy;
/\cj\cJ\ci\cI\ck\cK/dimsy;
function f31(a32, a33, a34, a35) {
    function f37(a38) {
        return arguments;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f37 });
    arguments.toString(a33, f31, f31);
    function f40() {
        ("Vre").fixed().normalize();
        let v44 = -268435456;
        const v45 = v44--;
        v45 << v45;
        return a34;
    }
    f40();
    %OptimizeFunctionOnNextCall(f40);
    return arguments;
}
f31();
class C52 {
    static ["h"];
    d = v29;
    static c = 11857;
    static {
        Math.cos(this);
        Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
        const v62 = new Uint16Array(2);
        const v63 = new Uint16Array(v62);
        for (const v64 in v63) {
        }
        let v65 = ++v26;
        ++v65;
        !-1785054919;
    }
}
for (let v68 = 0; v68 < 5; v68++) {
    v68 >>> v68;
}
const v71 = [];
for (let v72 = 0; v72 < 5; v72++) {
    function f73() {
        Math.atanh(v72);
        return Math;
    }
    const v76 = f73();
    v76.E ^= -1073741824;
    v76[3061] = f73;
    v72[8] = f73;
    try {
        f73();
    } catch(e78) {
        const v79 = `
            delete v71.length;
        `;
    }
}
new C52();
new C52();
new C52();
/a\fb\nc\rd\te\vf/gvms;
Reflect.construct(Int8Array, []);
class C91 {
}
const v93 = new Float32Array(-1073741824);
v93.includes(C91, -1073741824);
