const v0 = [];
function f1() {
    return v0;
}
const v3 = new WeakMap();
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v3;
    } catch(e8) {
    }
    try {
        this.h = a6;
        new Uint16Array(Uint16Array);
        const t14 = (2136873598).constructor;
        const v14 = new t14();
        try { v14.toFixed(1030); } catch (e) {}
    } catch(e16) {
    }
}
const v17 = new F4(WeakMap, F4);
const v18 = new F4(v17, v17);
new F4(v17, v18);
new Float64Array(64);
new Uint8Array(8);
new Uint32Array(4096);
function f29() {
}
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    function f36() {
    }
    f29();
    const v39 = new Int8Array();
    function f40(a41, a42) {
        const o46 = {
            p(a44, a45) {
                return this;
            },
        };
    }
    f40();
    f40();
    v39.buffer;
    let v50 = 1000000000000.0;
    v50--;
    function F54(a56, a57, a58, a59) {
        if (!new.target) { throw 'must be called with new'; }
        this.print(this, this);
        class C62 {
        }
        const v63 = new C62();
        function f64(a65, a66) {
            const o67 = {
                [a66]: v63,
            };
            return o67;
        }
        this.c = a56;
    }
    const v68 = new F54(-2.0);
    const v69 = new F54(-1.093925554716035e+308);
    new Float64Array();
    class C74 extends Float64Array {
        static 1;
        static #d = 256;
    }
    v69 in v68;
    const t67 = [];
    t67.length += 1.0;
    %OptimizeFunctionOnNextCall(f36);
    class C80 extends Date {
        static 2544510523 = 1.0;
        1855;
    }
    try { v30["find"](); } catch (e) {}
    for (const v83 in "1024") {
    }
}
for (let v84 = 0; v84 < 10; v84++) {
    f31();
}
%OptimizeFunctionOnNextCall(f31);
f31(f31, f31, v30, f29);
let v87 = 0;
while (v87 < 10) {
    const v91 = new Set();
    v91["add"]("add");
    v87++;
}
