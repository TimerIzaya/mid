let v0 = 0;
class C2 {
}
const v3 = new C2();
const v6 = [-2099226038,1000000000.0,v3,Array];
class C9 {
    h;
    constructor(a11) {
        function f12(a13, a14) {
            a13[5];
        }
        f12(v6);
        f12(v6);
        f12(a11);
    }
    static #o(a20, a21) {
        const v22 = ("-4322").length;
        super[v0] = v22;
        const t18 = v0 != v22;
        t18[1] = a21;
        function f25(a26) {
            return Date;
        }
        0 || Int8Array;
        try { new a21(this, this, v22, -1000000.0, a20); } catch (e) {}
        super["-4322"] = "-4322";
        return a21;
    }
    static #h;
    #a;
}
new C9();
new C9();
Array.__proto__ = this;
new Uint16Array(Uint16Array);
new C9();
[1097294679,16,-1073741824,-2147483648,9007199254740990,1,314147092,536870889,-1024,1625231920];
[-10,15,-9223372036854775807,-128,4592,8,19182,-43055,-268435456,1906658853];
[-5,-11,5,-5,2147483649,-2147483649,4096,257,-7402,662499802];
function F44(a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = [1073741824,1073741823,1376142744,1073741825];
    function f50(a51, a52, a53, a54) {
        let v55 = a53 && a53;
        arguments[3] = arguments;
        ({"h":v55,"length":a51,...v0} = v49);
        ("find").startsWith(a54);
        for (let v59 = 0; v59 < 5; v59++) {
        }
    }
    f50();
}
const v61 = new F44();
const o73 = {
    o(a64) {
        try { a64.o(); } catch (e) {}
        const o67 = {
        };
        gc(o67);
        return o67;
    },
    toString(a70, a71, a72) {
        Object.defineProperty(v61, a70, { writable: true, configurable: true, set: Array });
        return Array;
    },
};
try { o73.toString(o73); } catch (e) {}
