function f0() {
}
const v1 = [0.3155465003777649,0.31679505248401973,8.375744302386586,-6.695356925116207,9.446048796772686,-2.2250738585072014e-308,-5.0,-1.0,NaN,1.0];
const v2 = [1000.0,-Infinity,1.0,342809.21100716735,1.0,0.7737861331598631,5.0,-680.6034101792158,-2.220446049250313e-16];
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](f0);
function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    v9.bind();
    try { new v9(); } catch (e) {}
}
new F6();
[1.4027328673094983e+308,-1000.0];
function F14(a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a16;
    } catch(e17) {
    }
    try {
        const v22 = [Array(4)];
        const o23 = {
            "arguments": v22,
            "type": "function",
        };
        this.c = a16;
    } catch(e24) {
    }
}
new F14(v2);
const v26 = new F14(v2);
new F14(v1);
function f32() {
    return f32;
}
class C33 extends f32 {
    constructor() {
        super();
        class C36 {
        }
        WeakMap.constructor = f0;
        return WeakMap;
        new Int32Array([-4563]);
        Math.acosh();
    }
    [f32] = f32;
}
const v42 = new C33();
function f43() {
    return f32;
}
Object.defineProperty(v42, "constructor", { enumerable: true, get: f43 });
const v44 = new C33();
function f45(a46, a47) {
    const v48 = v1.constructor;
    const v53 = +a46;
    (-59616) ** v48;
    v53 << 5.0;
    const v56 = -5.0;
    a47 << a46;
    Math.atan(v56);
    Math.cosh(5.0);
    return v26;
}
v44.constructor = f45;
const v60 = v44?.constructor;
try { v60(); } catch (e) {}
const v62 = new C33();
const v63 = v62?.__defineGetter__;
Uint32Array[2] = 1;
const v68 = new BigUint64Array(512);
const v70 = new Int16Array();
v68.includes(v70);
try { v63(v42, v44); } catch (e) {}
const v76 = new Int16Array();
const v78 = new BigUint64Array(2, 256);
v78.valueOf = f43;
v76["fill"](v78, 256, 2);
12204n <= -16;
