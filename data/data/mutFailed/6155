const v0 = [-1e-15,0.3999878131076561,-2.2250738585072014e-308,0.5742067077316981];
const v1 = [-707485.7745320073,7.680938783178043,-4.970923007683804e+306];
const v2 = [1.3345516762243508e+308,1e-15,-2.220446049250313e-16,0.6274927882026303,4.0,2.2250738585072014e-308,-1000.0,-1.0,738.4080771260276,-3.0];
const v3 = [1.9068702496021004,-1.5245269725618496e+308,-1.7285064681641834e+308,2.0];
try { v3.sort(v2); } catch (e) {}
const v5 = [1000000000.0,-1000000000000.0,-1000000.0,2.7276266819222097e+307,1.0,-Infinity,1.6853799642958422e+308];
try { v5.sort(v2); } catch (e) {}
const v7 = [717.5008463543074,0.7566699491691615,0.0,2.2250738585072014e-308,NaN,0.20712784017751218];
let v8;
try { v8 = v7.map(v2); } catch (e) {}
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this?.constructor;
    try { new v13(v1, a12); } catch (e) {}
    try {
        this.b = v2;
    } catch(e15) {
    }
}
try { new F9(v7, v0); } catch (e) {}
new F9(v0, v5);
new F9(v2, v7);
new F9(v8, v0);
let v26 = -1024;
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
}
F27.c = F27;
const v33 = new v7();
const v34 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v34.map("EPSILON"); } catch (e) {}
[2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
}
class C42 {
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v45 = [601759695];
for (let v47 = 0; v47 < 5; v47++) {
    function f49() {
        -4294967295 | -4294967295;
        const v56 = Array().unshift();
        v56 + v56;
        new Set();
        function F60(a62, a63) {
            if (!new.target) { throw 'must be called with new'; }
            F60();
        }
        F60.g = F60;
        try {
            v34.forEach(Float64Array);
        } catch(e66) {
            const v67 = e66?.constructor;
            try { new v67("EPSILON"); } catch (e) {}
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C71 {
        }
        try { new C71(); } catch (e) {}
        const v73 = new C71();
        try { v73.isPrototypeOf(v73); } catch (e) {}
        try {
            v73.__proto__ = F38;
        } catch(e75) {
        }
        const v76 = Symbol.toPrimitive;
        Symbol.for(v76.description);
        const o83 = {
            toString(a81, a82) {
            },
        };
        try { o83.toString(F60, "EPSILON"); } catch (e) {}
        const o105 = {
            [522675525n](a87, a88) {
            },
            "c": v45,
            valueOf(a90, a91) {
                return a91;
            },
            ["EPSILON"](a93, a94, a95, a96) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": "-33698",
            ...v33,
            [v76]() {
            },
            "type": C42,
            valueOf(a99, a100) {
                return Symbol;
            },
            4: "Vre",
            toString(a102, a103, a104) {
                return a103;
            },
        };
        const t97 = -4294967297n;
        new t97();
        v26 %= -268435456;
        const v109 = new Uint32Array(undefined);
        try { v109.reduceRight(522675525n); } catch (e) {}
        return undefined;
    }
    f49();
    %OptimizeFunctionOnNextCall(f49);
}
