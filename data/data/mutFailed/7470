function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -128;
    } catch(e3) {
    }
    try {
        this.d = -128;
    } catch(e4) {
    }
}
const v5 = new F0();
function f6() {
    v5[F0];
    const v8 = [1073741824,1073741823,1376142744,1073741825];
    try {
        v8.forEach();
    } catch(e10) {
    }
    return F0;
}
v5[Symbol.toPrimitive] = f6;
const v13 = [-20096,4294967296,-65537,-2];
Object.defineProperty(v13, Symbol.toPrimitive, { writable: true, value: Symbol });
const v16 = [-1947047520];
v16[Symbol.toPrimitive] = Symbol;
const v19 = [v16,v16,v16,v13];
Object.defineProperty(v19, Symbol.toPrimitive, { writable: true, value: Symbol });
v13["slice"]([v19]);
const v25 = new F0();
function f26(a27, a28) {
    class C29 {
    }
    return v19;
}
v25.toString = f26;
new F0();
-5.509784037137093;
-8.10207344744462e+307 >> -8.10207344744462e+307;
function f36() {
    return -8.10207344744462e+307;
}
let v38 = 147282.56888809358;
v38++;
/EN8/ums;
/(a)\1/iy;
/abc|def/gvdmy;
try { ("toString").split(v25, v5); } catch (e) {}
("undefined").localeCompare("undefined", "toString");
