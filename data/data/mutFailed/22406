function f3() {
    const v4 = f3 % f3;
    v4[v4] |= v4;
    try {
        f3.length = 2;
    } catch(e6) {
    }
    return -14n;
}
new Date();
[];
const v14 = new Float64Array(2402);
v14[2367] = v14;
v14[22] = -14n;
const v17 = new Uint8ClampedArray(480);
try { v17.find(2402); } catch (e) {}
const v20 = -1;
new Uint32Array(1);
-1073741824 - -1073741824;
-1073741824 >> -1073741824;
const v28 = [];
try { v28.some(Uint32Array); } catch (e) {}
const v30 = [v28];
class C32 extends Map {
}
const v33 = C32.length;
const v34 = C32.length;
v34 >> v34;
const v36 = new C32();
const v37 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
class C41 extends Int32Array {
    [Set] = true;
    [v37];
}
const v42 = new C41();
try { v36.get(v28); } catch (e) {}
const v44 = new C32(v30);
const v45 = new C32(v44);
v45.size = v45;
const v48 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v33.name;
try { v42.trimRight(); } catch (e) {}
const v52 = new Uint32Array();
const v54 = [601759695];
v54.g = v54;
const v55 = [1073741824,1073741823,1376142744,1073741825];
function f57(a58, a59, a60, a61) {
    try { a58.toLocaleString(); } catch (e) {}
    const v63 = v44?.constructor;
    v63.prototype = v63;
    let v64;
    try { v64 = v63(); } catch (e) {}
    try { v63(); } catch (e) {}
    arguments[0];
    const v68 = arguments.length;
    -v68;
    Object.defineProperty(v36, "e", { configurable: true, enumerable: true, value: f57 });
    v44["entries"](a60, ...v45, BigUint64Array, ..."entries", a59, v68);
    const v73 = new Float32Array();
    try { v73.subarray(Uint8ClampedArray, v20); } catch (e) {}
    new BigUint64Array();
    const v78 = new Date();
    v78.setSeconds(v78, "jFd1");
    const v80 = v73?.entries;
    try { new v80(); } catch (e) {}
    try { ("e").codePointAt(v30); } catch (e) {}
    class C84 {
    }
    C84.e = C84;
    class C85 {
    }
    const v86 = C85.name;
    try { v86.anchor(v86); } catch (e) {}
    Symbol.match = Symbol;
    const v89 = Symbol.toStringTag;
    v44[v89] = v89;
    function f90() {
        let v92;
        try { v92 = ("Vre").charAt(4096); } catch (e) {}
        let v93;
        try { v93 = v92.lastIndexOf("Vre", a58); } catch (e) {}
        const v94 = v93 !== v93;
        v94 || v94;
        let v96;
        try { v96 = ("Vre").codePointAt(v48); } catch (e) {}
        const v97 = v96 - v96;
        v97 == v97;
        v96 ^ v96;
        let v100 = Float64Array;
        try { v100(v92, v94, v100); } catch (e) {}
        let v102;
        try { v102 = v100.from("e"); } catch (e) {}
        const t92 = [-3.0];
        t92.length >>>= 213;
        new Uint8ClampedArray(129);
        try { v102.with(-4294967297n, -4294967297n); } catch (e) {}
        v100 = a59;
        let v109 = v48.length;
        v109 | v109;
        new Int8Array();
        const o113 = {
        };
        class C114 {
            constructor(a116, a117, a118) {
                for (let v119 = 0; v119 < 5; v119++) {
                    function f121() {
                        const o129 = {
                            [-4294967297n](a123, a124, a125, a126) {
                                eval(C114);
                            },
                        };
                        return f121;
                    }
                    f121();
                    %OptimizeFunctionOnNextCall(f121);
                }
            }
        }
        const v131 = v109++;
        function F132(a134, a135, a136) {
            if (!new.target) { throw 'must be called with new'; }
            const v137 = this.constructor;
            try { new v137(); } catch (e) {}
            this.e = a136;
        }
        class C139 {
        }
        let v140;
        try { v140 = C139(); } catch (e) {}
        for (let v141 = 0; v141 < 5; v141++) {
            new F132(undefined, v140);
        }
        try {
        } catch(e144) {
        }
        const o172 = {
            268435439: v54,
            ..."e",
            n(a146, a147) {
                return a147;
            },
            m(a149) {
                return v131;
            },
            m(a151) {
                return Map;
            },
            [f90]() {
            },
            ["entries"](a154, a155) {
            },
            valueOf(a157, a158) {
                return a157;
            },
            get h() {
                return v48;
            },
            [v55](a161, a162, a163) {
            },
            "toPrimitive": v64,
            get f() {
                return this;
            },
            [-4294967297n](a166, a167, a168, a169) {
                eval(a168);
            },
        };
        return v44;
    }
    function f173() {
        function F175() {
            if (!new.target) { throw 'must be called with new'; }
            const v177 = this.constructor;
            try { v177(v177, v177); } catch (e) {}
            try { new v177(); } catch (e) {}
        }
        new F175();
        new Int8Array(1073741823);
        return 1073741823;
    }
    try { new f90(); } catch (e) {}
    const v184 = f90();
    try { v184.get(a59); } catch (e) {}
    const v187 = Array();
    try { v187.findLast(f57); } catch (e) {}
    function f189(a190, a191, a192, a193) {
    }
    const o194 = {
    };
    for (let v195 = 0; v195 < 5; v195++) {
    }
}
for (let v196 = 0; v196 < 10; v196++) {
    f57(v52);
}
function f208(a209, a210, a211, a212) {
    3 | a210;
    const v214 = a209 / a209;
    const v215 = a210 < a209;
    let v216 = a211 >>> a211;
    v216++;
    const o221 = {
        n(a219, a220) {
            return v215;
        },
    };
    return v214;
}
for (let v222 = 0; v222 < 625; v222++) {
    f208(Uint8Array, 2);
}
