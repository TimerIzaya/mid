for (let v3 = 0; v3 < 25; v3++) {
    const t1 = 1000;
    t1["p" + v3] = v3;
}
const o6 = {
    "maxByteLength": 1000,
};
try {
    o6.b = o6;
} catch(e7) {
}
function f10(a11, a12) {
    const v13 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
    let v14 = gc;
    try { v14.bind(v13); } catch (e) {}
    v14 /= v14();
    const o88 = {
        4294967295: a11,
        [true]: 256,
        [a12](a18, a19, a20, a21) {
            let v22 = 0;
            while ((() => {
                    const t0 = Array(11);
                    t0[212] -= 3774;
                    new Uint32Array(186);
                    let v30 = [601759695];
                    v30++;
                    const v33 = [65537,268435441,63298,-5,1235122603];
                    function F34(a36, a37, a38, a39) {
                        if (!new.target) { throw 'must be called with new'; }
                        try { a39.valueOf(); } catch (e) {}
                        const v41 = this.constructor;
                        try { new v41(1024, 1024, v33, this); } catch (e) {}
                        a37.caller;
                        this.c = a38;
                        this.f = a37;
                    }
                    let v45 = 9007199254740991n * 9007199254740991n;
                    v45--;
                    return v22 < 3;
                })()) {
                a21 = a11;
                const o79 = {
                    set a(a50) {
                        let v52 = ~1531487198;
                        const v53 = [748666.7832804511,3.0];
                        class C55 extends Float64Array {
                            [v53];
                        }
                        const v56 = v52++;
                        class C57 {
                            static #m(a59) {
                            }
                        }
                        const v60 = C57();
                        const v61 = C57();
                        const v62 = [];
                        const v63 = [v61];
                        class C64 extends C57 {
                            #n(a66, a67, a68, a69) {
                                function f70() {
                                }
                            }
                            #g;
                        }
                        const v71 = C64();
                        class C73 extends v63.constructor {
                        }
                        const v74 = new C73();
                        Object.defineProperty(v74, 65537, { value: v60 });
                        try { v71.m(v62); } catch (e) {}
                        !v56;
                        let v77;
                        try { v77 = a50(); } catch (e) {}
                        v77[414353240];
                    },
                };
                v22++;
            }
            function F81(a83, a84) {
                if (!new.target) { throw 'must be called with new'; }
                const v85 = this.constructor;
                try { new v85(this); } catch (e) {}
                a84++;
                this.g = a83;
            }
            return a21;
        },
    };
    return o88;
}
f10(-61220, f10);
f10(-61220, 414353240);
f10(256, 414353240);
new Uint16Array(6);
function f96() {
    const o100 = {
        [null]() {
            try { this.null(f96, this, this, f96); } catch (e) {}
            super.b;
        },
    };
    return o100.null();
}
new BigUint64Array(64);
new Uint8ClampedArray(3235);
o6.constructor;
function F111() {
    if (!new.target) { throw 'must be called with new'; }
}
new F111();
function F114(a116, a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
}
const v119 = new BigInt64Array(256);
v119.includes(null);
delete v119?.h;
function F122() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = true;
}
const v124 = new F122();
null.stack;
const v128 = new Float32Array(4061);
v128.indexOf();
function f130(a131, a132) {
    const o134 = {
        ...a132,
        get h() {
            return this;
        },
    };
    return a132;
}
f130();
f130(v124, v124);
