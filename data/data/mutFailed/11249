[9007199254740990,-65537,-33114,15];
const v1 = [0];
[-4096,-65537,536870887,-59441,-964550468,-9223372036854775808,257,18433,-85638445,62669];
try { ("setMinutes").link("unscopables"); } catch (e) {}
class C7 {
    0;
    #a = "setMinutes";
    static {
        this.name;
        new C7(10);
        try {
            const t11 = "unscopables";
            t11.#a = this;
        } catch(e13) {
        }
        try {
            super.call(this, BigUint64Array);
        } catch(e15) {
        }
        new Uint32Array(256);
        BigUint64Array.length = BigUint64Array;
        new BigUint64Array(15);
        function f22(a23) {
            return v1;
        }
        class C24 extends f22 {
            static #f;
            static #e = 256;
        }
    }
}
C7.e = C7;
const v25 = new C7();
v25[0];
const v27 = new C7();
const v28 = new C7();
v28[0] = v28;
const v31 = new Uint16Array(256);
v31[194] = v31;
new Int32Array(16);
const v37 = new Int8Array(256);
try { v37.with(v27, v27); } catch (e) {}
const v39 = [-9223372036854775807,-31958,-437619447,54990,9007199254740992,-9223372036854775807,8,128];
function F40() {
    if (!new.target) { throw 'must be called with new'; }
}
F40.prototype = F40;
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v46 = 0; v46 < 25; v46++) {
        try { ("p").search(F42); } catch (e) {}
        const v49 = "p" + v46;
        try { v49.trimStart(); } catch (e) {}
    }
    const v51 = v39.constructor;
    try { v51.isArray(v28); } catch (e) {}
    const v53 = new v51(v51, a44);
    try { v53.fill(F40); } catch (e) {}
}
const v55 = new F42();
const v56 = v55?.constructor;
try { new v56("unscopables", F42); } catch (e) {}
