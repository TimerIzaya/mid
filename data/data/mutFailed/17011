const v6 = /\xf0\x9f\x92\xa9/gusy;
/l8TXX\xf0\x9f\x92\xa9/gvdm;
const v8 = /O\u0034tab\b\d\bcd[^fhFh[a(?!bbb|bb)cq?]]/gu;
let v10;
try {
const t0 = -4294967297n;
v10 = t0(0.1643077294615204, -1112229628n, v8, ...-1611664727, v8, v6);
} catch (e) {}
v8[205608425];
v8[v8] = v10;
try {
    v8.__proto__ = v8;
} catch(e12) {
}
const v19 = new Float32Array(Float32Array);
for (let v20 = 0; v20 < 25; v20++) {
    function f21(a22, a23, a24, a25) {
        a22[0] = a22;
        a23 <= a23;
        const v28 = arguments?.__lookupGetter__;
        try { v28(v28, f21, a23, arguments); } catch (e) {}
        try { undefined(); } catch (e) {}
        new Int8Array(v19);
        "find" == "find";
        return v19;
    }
    for (let v36 = 0; v36 < 10; v36++) {
        f21(v19, v20);
        const v38 = /D(\2)(\1)\p{General_Category=Decimal_Number}+/gum;
        /xyz{0,1}?ABL?/guims;
        /[[\p{Script_Extensions=Mongolian}&&\p{Number}](x)(x)(x)\19BA+]/vdmy;
        f21 >>> f21;
        Object.defineProperty(v38, "multiline", { writable: true, enumerable: true, get: f21, set: f21 });
    }
}
