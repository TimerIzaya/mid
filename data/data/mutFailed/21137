[1073741825,9,1792588130,-1073741824,6,32822];
[3,11,512,1,-9007199254740991,-12,-5493,268435456,1073741824,-6];
const v2 = [-1295736750,5,-36093,9,4,347,65536];
1024 + 1024;
const v6 = new Int32Array(1024);
try { v6.find(v2); } catch (e) {}
let v8 = this;
const v9 = v8?.Number;
try { new v9(v8); } catch (e) {}
const v12 = [v6];
try { v12.groupToMap(v12); } catch (e) {}
Reflect.construct(Int32Array, v12);
v8 >>>= v9;
[2798,-12,268435440,-16,1073741824,512,-13,13,-4096];
[268435440,268435440,-6,-2,0,-9007199254740991,1];
[12,-5,4,-4,128,8,29833,-9223372036854775807,15,-272937849];
let v21 = 1000;
v21--;
Uint16Array.BYTES_PER_ELEMENT;
new Uint16Array(v21);
new Int16Array(256);
new Int8Array(83);
let v32 = 10;
for (; v32--;) {
    function f34() {
        return f34;
    }
}
class C36 {
}
const v37 = new v8();
const v38 = v37?.constructor;
try { new v38(); } catch (e) {}
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this.constructor;
    v46.d = v46;
    let v47;
    try { v47 = new v46(); } catch (e) {}
    this.b = 4.0;
    try {
        v47.c = v37;
    } catch(e48) {
    }
}
try { new F40(1024, 1024, Int32Array, 1024); } catch (e) {}
new F40();
new F40();
