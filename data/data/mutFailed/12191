const v2 = new Float64Array(0);
let v5 = gc;
try { ("major").toString(); } catch (e) {}
try { ("async").blink(); } catch (e) {}
const o10 = {
    "execution": "async",
    "type": "major",
};
const v11 = v5(o10);
try { v11.catch(o10); } catch (e) {}
let v13 = new Uint8Array(132);
Float64Array.e = Float64Array;
const v16 = new Float64Array(3142);
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toLocaleString(); } catch (e) {}
    a20 >>> a20;
    a21 + a21;
    try {
        try {
            const v28 = Array?.of;
            try { new v28(); } catch (e) {}
            const v30 = Array(19793);
            for (const v31 of v30) {
            }
            const v32 = [v30,v30,v30,v30,v30];
            [[v32,v32,v32]];
        } catch(e36) {
            [e36,this];
        }
        this.a = a19;
    } catch(e38) {
    }
    try {
        function F39(a41, a42) {
            if (!new.target) { throw 'must be called with new'; }
            try { this.valueOf(); } catch (e) {}
            try {
                this.g = v11;
            } catch(e44) {
            }
            try {
                this.b = a20;
            } catch(e45) {
            }
            try {
                this.d = a42;
            } catch(e46) {
            }
        }
        const v47 = new F39(a22, 132);
        new F39(v47, a21);
        new F39(a21, a22);
        this.e = 0;
    } catch(e50) {
    }
}
const v51 = new F17(v16, 0, 0, Float64Array);
const v52 = new F17(v51, 132, 3142, v2);
v52.length;
let v54 = new F17(Float64Array, 3142, 132, v2);
({"buffer":v54,"byteLength":v13,"byteOffset":v5,} = v16);
const v55 = delete v51[v16];
!v55;
try { v52["call"](v11, "major", v55, 0, v55); } catch (e) {}
"sync" == "sync";
const o63 = {
    "execution": "sync",
    "type": "major",
};
o63.execution;
gc(o63);
class C66 {
    static {
        const v68 = this.name;
        v68[1];
        const v70 = this.toString();
        v70[141] = v70;
        v70.lastIndexOf(v68);
    }
}
