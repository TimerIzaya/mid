const v0 = [-4,-39794,134663664,4];
let v1 = [536870912,5];
const v2 = [1000,-1073741824,-62405];
const v5 = new Array(12);
class C6 extends Array {
    h;
    static {
        this.f -= 12;
        const v8 = Array(12);
        super[v2] = v8;
        v0 + (v1 ** v8);
        v1 = v5;
        super.every(Array, this);
        const o20 = {
            "f": "k",
            set e(a19) {
            },
            2147483647: "__proto__",
            "g": "SXJb",
            "h": "__proto__",
        };
        for (const v21 in o20) {
        }
        Array(12);
        ([257])[12];
        try {
            Array(-12302);
        } catch(e28) {
        }
    }
    constructor(a30, a31) {
        super(12);
        function F32(a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v2;
            } catch(e36) {
            }
            try {
                this.d = a31;
                let v37;
                try { v37 = a35.log10(a34); } catch (e) {}
                try { a34.set(v37); } catch (e) {}
            } catch(e42) {
            }
            try {
                this.a = a31;
                const v43 = a35 % this;
                try { a34(this, ...this, v43, this, v43); } catch (e) {}
                try {
                    new F32(a35, F32);
                } catch(e46) {
                }
                c = v43;
                Array(a30);
                %PrepareFunctionForOptimization(Array);
                Array(a30);
                Array(a30);
                %OptimizeFunctionOnNextCall(Array);
                Array(a30);
            } catch(e51) {
            }
        }
        class C54 {
            constructor(a56, a57) {
                Object.defineProperty(this, "constructor", { writable: true, configurable: true, enumerable: true, value: Date });
                const v58 = this.constructor;
                try { new v58(-15n); } catch (e) {}
            }
        }
        new F32(a30, a30);
        new F32(a30, a30);
        new F32(v0, v0);
        function f63() {
            const o67 = {
                m(a66) {
                    return a66;
                },
                __proto__: 946.0676210033328,
            };
        }
        f63();
        %OptimizeFunctionOnNextCall(f63);
    }
}
new C6(v5, v5);
new C6(v2, v0);
new C6(v1, v2);
const v78 = [];
const v80 = v78.entries;
let v81;
try { v81 = new v80(v80, v78, v80, v80, null); } catch (e) {}
v81 = null;
const v82 = [601759695];
const v83 = [1073741824,1073741823,1376142744,1073741825];
function f85(a86, a87, a88, a89) {
    let v92;
    try { v92 = v83["find"](..."find", a89, ...v82, ...v83, ...522675525n); } catch (e) {}
    v92 <= a88;
    return arguments;
}
const v96 = new BigInt64Array(3216);
const v99 = new BigUint64Array(3216, 3216, 3331);
for (let v100 = 0; v100 < 5; v100++) {
    f85(v82, v100, false, v100);
}
f85(v99, 3331, v96, 3216);
