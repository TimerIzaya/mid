[268435456,268435456,536870889,-866.5907146142495];
[536870889];
const v8 = [536870889,268435456,0.5129061848127305];
v8[2] = v8;
try { new BigUint64Array(BigUint64Array, -5741, v8); } catch (e) {}
const v12 = [];
257 | 257;
3 >>> 3;
class C18 {
    constructor(a20) {
        function* f21(a22, a23) {
            yield* a23;
            return this;
        }
    }
}
Map.length;
new BigUint64Array(748);
const v33 = new Uint16Array(9);
Float32Array.d = Float32Array;
new Float32Array(v8);
class C38 {
}
const v39 = new C38();
const t24 = [v39,"add"];
t24.length &= 1;
function f42(a43, a44, a45, a46) {
    const v47 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
    const v48 = /QK/gvdimy;
    with (v47) {
        length | length;
        v48.__proto__ = length;
    }
    try { new Int8Array(v47, Int8Array, v47); } catch (e) {}
    const v53 = new Int8Array();
    for (const v54 in v53) {
    }
    function F55(a57) {
        if (!new.target) { throw 'must be called with new'; }
        const v58 = this?.constructor;
        try { new v58(v53); } catch (e) {}
        this.h = a57;
    }
    F55.length;
    new v33();
}
for (let v62 = 0; v62 < 10; v62++) {
    f42();
}
%OptimizeFunctionOnNextCall(f42);
v12();
