const v1 = new Map();
function f2(a3, a4) {
    const o17 = {
        toString(a6, a7) {
            const v8 = new Map(a3, a4, a3, a6);
            const v10 = [];
            return Reflect.apply(v8.values, v8, v10);
        },
        [a3]: a4,
        __proto__: a4,
        valueOf(a14) {
            const v15 = this ** Map;
            try {
                v1.size = v15;
            } catch(e16) {
            }
            return Map;
        },
        [a4]: v1,
        "h": Map,
        "d": a3,
        [v1]: Map,
        "f": Map,
    };
    return o17;
}
const v18 = f2(v1, v1);
const v19 = f2(v18, v1);
const v20 = f2(v19, v18);
function f21() {
    return v19;
}
const v22 = [Map,f2,v1];
const v23 = [v19];
const v24 = [v20,v20];
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a29;
    } catch(e30) {
    }
    try {
        this.g = Map;
    } catch(e31) {
    }
    try {
        this.h = a28;
    } catch(e32) {
        let v34;
        try { v34 = e32["setUint16"](); } catch (e) {}
        const v35 = v34?.[a29];
        const v36 = v23.length;
        [f2,a29,v35,[a27,Map,[v36,v20,v36],a29]];
    }
}
new F25(f21, v24, v24);
new F25(Map, v22, v22);
new F25(v22, v23, v23);
[-1.7976931348623157e+308,-3.0,-3.0,363.8138396999086,Infinity,612.3486694343287,1.7976931348623157e+308,1000000000.0];
[NaN,-139.41140470336723,9.77499234576472,420.6073825280855,1000000000000.0,776.2819047660907,0.07357195689559204,3.779577825846644,-1.0];
[5.0,215.46537503132595,5.0,-2.220446049250313e-16,Infinity,NaN,1e-15];
const v47 = new Uint8ClampedArray();
for (const v50 in [[v47,v47],v47]) {
}
const v0 = [414203384];
const v1 = [334836911,-10940,-13,2147483649,1];
v1[2671] = v1;
const v2 = [-4294967295,268435440,14205];
function f3() {
    return v2;
}
Float64Array.e = v0;
Float64Array.e = Float64Array;
new Float64Array(255);
BigUint64Array[Symbol.toPrimitive] = f3;
const v11 = f3();
%PrepareFunctionForOptimization(f3);
f3();
const v13 = f3();
v13.toString = Symbol;
%OptimizeFunctionOnNextCall(f3);
const v14 = f3();
const v15 = new BigUint64Array(5);
const v18 = new BigInt64Array(2526);
try { v18.entries(); } catch (e) {}
-1.3904084392675011e+308;
function f27(a28, a29, a30) {
    const v31 = a29 >> a29;
    const o35 = {
        ...a30,
        ...v2,
        [BigUint64Array]: a30,
        2224740813: -1000000.0,
        [Float64Array]: a29,
        set b(a33) {
            ({"a":a28,"d":a29,} = this);
            a33?.[1024];
        },
        [v31]: 10,
        __proto__: a30,
        ...a30,
    };
    return f27;
}
const v36 = f27(1237380504, -1000000.0, f27);
v36.caller = v36;
Uint16Array.a = Uint16Array;
2 >= 2;
const v43 = new f27(v15, v11, Uint8Array);
f27(Uint8Array, v14, BigUint64Array);
try { v14.entries(); } catch (e) {}
v13.find(v36, BigInt64Array, 2526, v36, v43);
Object.defineProperty(v14, -2, { writable: true, configurable: true, value: BigUint64Array });
1073741824 >> 1073741824;
let v53 = v1[2671];
try {
    v53 = 1.3904084392675011e+308;
} catch(e54) {
}
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    a60 != a60;
}
