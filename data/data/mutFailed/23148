function f3() {
    return -328838900;
}
const v4 = [-256,-24530,58267,-8,-128,7,-536870912,-4294967297,-65536,-575163144];
const v5 = [-765050809,-1970838521,-1799646840,16,-4294967296,-24354];
const v6 = [-1252717522,4294967295,255,-65537,62271,662555143];
[v6,v4,f3,-536870912,-536870912];
[-536870912,f3,v5,1024,v4];
const v9 = [v4,-328838900,1024,-328838900];
const v13 = [-1000.0,-108.49775384960196];
[-3.347656656647122,Infinity,-1.1123955323503386e+308,-3.0];
[-0.0];
function f16() {
    return v13;
}
[-960.7381643354993];
[-671.3090150871242,-1.0];
[0.9173781206367507,5.233957886943719e+307,0.12662165959368632,-921947.547929243,743.1321381303028,2.220446049250313e-16,2.2250738585072014e-308];
const v23 = ("p")?.isPrototypeOf;
try { new v23("toString"); } catch (e) {}
class C28 extends Int32Array {
}
let v29;
try { v29 = new C28(); } catch (e) {}
const v30 = new v23();
C28.construct(Uint8Array, [v30,v6], C28);
[0.18372866515424147,461665.2775589656,2.6563672835372962,2.0,-Infinity,1e-15,273866.66349880304];
[0.1647584749770924,0.0,281189.4702332646,-640144.185384929,-9.96248851328583,-1000000000000.0,NaN,-9.185127476558462e+307,-588.058716110192];
[8.063065675598975e+307];
51086 >>> 51086;
[5,-1726645307,3,-22869,28097];
[-128,738741997,61681,1,-536870912,255,512];
[1326394077,3,-4096,-6,58642,8];
const v47 = [-20857,-1303616328,-1864740753,-1023402966,129,-20506,7,8229,-53914];
v47[536870912] = v47;
v47[536870912] = v47;
127 * 127;
new Uint8Array(127);
const o55 = {
    toString(a53, a54) {
    },
};
let v56 = undefined;
const o59 = {
    set b(a58) {
    },
};
Object.defineProperty(o59, "f", { writable: true, configurable: true, enumerable: true, value: v9 });
v56 = o59;
o59.f = o59;
Uint8Array.prototype = Uint8Array;
const v62 = new Uint8Array(165);
v62[113] = v62;
function F63() {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F66(a68, a69, a70, a71) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v72 = new F66(v65, F63, v65, F66);
    const v74 = [F63,F63,Int32Array,F63];
    Reflect.apply(v65.indexOf, v72, v74);
}
function F77() {
    if (!new.target) { throw 'must be called with new'; }
    function F79() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const v81 = new C28();
function f82(a83, a84) {
    const o92 = {
        n(a86, a87) {
            class C88 {
            }
            new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
        },
        "a": v81,
    };
    for (let v93 = 0; v93 < 100; v93++) {
        Math.random();
    }
    return o92;
}
new Uint16Array(257);
%PrepareFunctionForOptimization(v29);
const v100 = v29().n();
%OptimizeFunctionOnNextCall(f82);
v100();
function f102() {
    return f16;
}
[-50831,9];
[4,1073741824,9007199254740991,-530699479,-19344,-9223372036854775807,-44517,512];
[7042,-869101924,-39229,-1365928473,1073741825,9,16,1073741823];
new BigInt64Array(256);
new BigUint64Array(129);
new Int16Array(129);
const v115 = [];
function F117(a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    const v121 = this?.constructor;
    try { new v121(); } catch (e) {}
    this.c = Map;
    try {
        this.e = v115;
    } catch(e123) {
    }
    try {
    } catch(e124) {
    }
    const v127 = new Int32Array(9);
    v127.reverse();
}
new F117();
new F117();
