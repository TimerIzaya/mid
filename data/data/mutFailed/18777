let v0 = [];
class C1 {
    static #c;
    static #m() {
        let v2 = this;
        v0[254713983] = v2;
        let v3 = delete v2[4294967295];
        ({"f":v3,...v2} = v0 = v2);
        const o7 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o7);
        return o7;
    }
}
const v9 = new v0();
const v10 = new C1();
const v11 = new C1();
const v14 = new Int16Array(411);
const v17 = new BigUint64Array(128);
const v20 = new Int16Array(2622);
function f22(a23, a24, a25, a26) {
    const o27 = {
        "d": Array,
    };
    return o27;
}
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
}
const t31 = [0.8307152163010869,1.0,0.0];
t31.length = v11;
12 << 9007199254740991;
const v36 = f22(v20, v14, v0, v9);
function f37() {
    return f37;
}
function f39() {
    return f39;
}
function f40() {
    const v41 = Array();
    v41[2358] = f39;
    for (const v42 of f37) {
        v42 - v42;
    }
    return v41;
}
f22(v36, v10, f22(v17, v17, v14, v9), v17);
new Array(56);
for (let v48 = 0; v48 < 5; v48++) {
    const v51 = v48 >> -18321;
    Int16Array & Math.log1p(v48);
    let [,v54,v55,v56] = v20;
    Math.asin();
    function F59(a61, a62) {
        if (!new.target) { throw 'must be called with new'; }
        this.propertyIsEnumerable(v9);
        const v64 = this.constructor;
        try { new v64(); } catch (e) {}
        try { this.constructor(); } catch (e) {}
    }
    try {
        const o67 = {
        };
        v0.fuck(v11, o67, v55, -18321);
    } catch(e69) {
    }
    Math.tan(v51);
}
