[-2.2250738585072014e-308,-48725,-2.2250738585072014e-308,-5.0];
const o17 = {
};
1000000000.0 >> 350652.13367310516;
const v20 = new Uint32Array(Uint32Array);
new Int16Array(v20);
Math.asinh();
Math.sin(3.862600614459211e+307);
class C27 {
    [257];
    ["string"];
    3164398692 = v20;
    static {
        try {
        const t0 = -5.0;
        t0();
        } catch (e) {}
    }
}
const v30 = [4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886];
("-9223372036854775807").lastIndexOf(-7);
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this.constructor;
    let v41;
    try { v41 = new Math(v40, a39); } catch (e) {}
    const v42 = typeof v41;
    const o45 = {
        get b() {
            return v40;
        },
    };
    v42 === "symbol";
}
const v47 = new F34();
new F34(F34, F34, v47, v47);
v30.toLocaleString();
function f50() {
    const o55 = {
        "c": -2083306117,
        210: "valueOf",
        ..."replace",
        get c() {
            super[this] = -4.0;
        },
        12: "replace",
    };
    return o55;
}
let v60 = -314.9391272852571;
Math.log2(--v60);
function F63() {
    if (!new.target) { throw 'must be called with new'; }
}
function F65() {
    if (!new.target) { throw 'must be called with new'; }
    function f67(a68) {
        for (let i = 0; i < 10; i++) {
            ["object"];
        }
    }
    Object.defineProperty(this, "c", { enumerable: true, set: f67 });
    this.c = -28191;
}
class C75 {
    #valueOf(a77, a78, a79) {
    }
}
new BigUint64Array(10);
for (const v85 in 3.862600614459211e+307) {
    new Float64Array(2147483647);
}
f50();
function f88() {
    return f88;
}
(-532550611).tan(-532550611);
