new Uint8Array(1981);
const v8 = new Uint8ClampedArray(3);
try { v8.lastIndexOf(Uint8Array); } catch (e) {}
("match").__proto__;
const v14 = new WeakMap();
const v15 = /8[\cA]v/uisy;
function f16(a17, a18) {
    const v19 = [v14,v14,v14];
    Date();
    v14.set(v19);
    return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
}
v15[Symbol.toPrimitive] = f16;
const t13 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
t13.length = v15;
const v32 = new BigUint64Array();
v32.byteLength;
function f34(a35, a36, a37, a38) {
    return Reflect.construct(Uint8ClampedArray, []);
}
for (let v43 = 0; v43 < 10; v43++) {
    f34();
}
BigInt64Array.e = BigInt64Array;
new BigInt64Array(55780);
function f46(a47) {
    return 1981;
}
let v49 = 1000000000000.0;
const v50 = v49--;
class C53 {
    static #m(a55) {
    }
    constructor(a57) {
        const v59 = new Float32Array();
        v59.entries().next();
        const v62 = new Uint16Array(12, -4294967296, v50);
        new Float32Array(v62);
    }
}
const v64 = new C53();
function f66(a67, a68, a69, a70) {
    arguments[2] = arguments;
    function f72() {
        const o73 = {
            __proto__: a69,
        };
        o73.f;
        o73[0] = o73;
        return o73.valueOf(a70);
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
    return a68;
}
const o84 = {
    get d() {
        const v80 = Symbol.toPrimitive;
        const o83 = {
            [v80]() {
                [v64];
            },
        };
    },
    "type": BigInt64Array,
};
const v85 = o84?.type;
try { new v85(129, 3, Worker); } catch (e) {}
const v87 = new Uint8ClampedArray(f46, o84);
try { v87.set(f46); } catch (e) {}
