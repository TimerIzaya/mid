function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v3 = new F0();
        const v5 = [this,v3,1000,[v3,1000,this]];
        Math.atan2(-Infinity, 1000);
        const v11 = new BigInt64Array(8);
        const v14 = new Uint16Array(255);
        const v15 = v14?.constructor;
        try { v15(v11, v14, 255); } catch (e) {}
        [v14,Uint16Array,512,Int32Array];
        ([this,v5,v5,v3])[3123645590];
        this.b = 1000;
    } catch(e22) {
        function F23() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = -65537;
            } catch(e26) {
            }
            try {
                this.g = -65537;
            } catch(e27) {
            }
        }
        const v28 = new F23();
        function F29(a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v28;
            } catch(e33) {
            }
            try {
                this.e = v28;
            } catch(e34) {
            }
        }
    }
    try {
        this.d = 1000;
    } catch(e35) {
    }
    try {
        this.a = 1000;
    } catch(e36) {
    }
}
let v39 = new Int8Array(1024);
v39 %= v39;
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
new F0();
new F0();
new F0();
[65536,8,-65535,-65537,-52899];
const v46 = [-15,-372341353];
[536870887,56442,-65537];
new Int16Array(2);
new BigInt64Array(12);
new Uint8ClampedArray(5);
function f58() {
    function f59(a60, a61) {
        return f58;
    }
    const v63 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function f64(a65, a66, a67, a68) {
        function f69() {
            let v71 = Float64Array;
            v71.toString();
            v71 = a66;
            const v73 = v63.length;
            const v74 = v73 >>> v73;
            v74 / v74;
            const o80 = {
                toString(a77, a78) {
                    a68 && v71;
                    return a66;
                },
            };
            o80.toString();
            let v82 = -268435456;
            v82--;
            const o84 = {
                "e": -4294967295,
                "e": v82,
            };
            return a66;
        }
        const v85 = f69();
        %OptimizeFunctionOnNextCall(f69);
        return v85;
    }
    const v86 = Promise.resolve(f59);
    const v87 = new Promise(f59);
    const v88 = v87.constructor;
    try { new v88(-30285); } catch (e) {}
    return v86;
}
%PrepareFunctionForOptimization(f58);
f58();
try {
    new Date();
    const o96 = {
        "maxByteLength": 1073741824,
    };
    const v98 = new ArrayBuffer(4, o96);
    const v100 = new Int8Array(v98);
    for (const v101 in v100) {
    }
    v46.length = 1;
} catch(e102) {
}
%OptimizeFunctionOnNextCall(f58);
f58();
