const v1 = new WeakSet();
const v5 = v1["add"]("add");
let v7 = -480131804;
const v8 = !v7;
let v9 = v1 || v7;
const v10 = v9--;
const v11 = v7 + v1;
const v12 = v10 >>> v9;
const v13 = +v7;
v7--;
const v16 = [v11,v8,0.013125818742233175,1e-15];
try { new v5(v5, 1e-15, v16, 0.013125818742233175); } catch (e) {}
v1[0] = v13;
try { v5(v8, v12, -1000000000.0); } catch (e) {}
function f19() {
    return v10;
}
[-1000000000.0,0.013125818742233175,1e-15,v1,WeakSet];
[[v1,1e-15],1e-15,-1000000000.0];
function f23(a24, a25, a26, a27) {
}
2147483649 << 2147483649;
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this.constructor;
    v34.name = v34;
    const v36 = new Int16Array();
    const v37 = v36.lastIndexOf(v36, a33);
    const v38 = v37 ^ v37;
    try { new v34(v38); } catch (e) {}
}
new Uint32Array(10);
const v44 = Math.log2();
const v45 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v52 = 0; v52 < 100; v52++) {
        function f53(a54, a55, a56) {
            const o58 = {
                get d() {
                    return a55;
                },
            };
            for (let i = 0; i < 10; i++) {
                0 < 10;
                delete v45[v44];
            }
            return o58;
        }
        f53(a51, f53, f53);
    }
}
new F46();
new Int8Array(2292);
new Uint8ClampedArray(4);
const v72 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
try {
    v72.__proto__ = v72;
} catch(e73) {
}
