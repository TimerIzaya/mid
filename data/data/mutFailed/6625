const v0 = [];
for (let v3 = 0; v3 < 27; v3++) {
    v3 - v3;
    let v6 = 1;
    v6 >>> v6;
    +7;
    Math[Math] = v3;
    28467 | 28467;
    const v14 = -7;
    Math.log(7);
    ~v14;
    !(!7);
    Math.asin(7);
    7 >> 7;
    Uint32Array >> v3;
    v6++;
}
const v23 = new Uint32Array(7);
const v26 = new BigInt64Array(5);
try { v26.filter(BigInt64Array); } catch (e) {}
2922 * 2922;
new Int32Array(2922);
try { new ArrayBuffer(v0); } catch (e) {}
let v34 = 3936;
v34--;
const o36 = {
    "maxByteLength": v34,
};
const v38 = new ArrayBuffer(3936, o36);
try { Float64Array.bind(v23); } catch (e) {}
new Float64Array(v38);
let v42 = -333690153;
-35990 ^ -35990;
Math.hypot(v42);
const v50 = --v42;
--v42;
const v53 = (32532 << v50) / -536870912;
v53 % v53;
try { new Int8Array(32532, Int8Array, Int8Array); } catch (e) {}
const v57 = new Int8Array();
v57.buffer.slice(-9726);
