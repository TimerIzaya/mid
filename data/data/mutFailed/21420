function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -5821;
    } catch(e3) {
    }
    try {
        this.b = -5821;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
[7,-1637483365,3,257658766,8,-306787425,-9007199254740991];
const v9 = [11,97066328];
[10000,647750547,-1073741824,0,257,1838028,65006];
new URIError(729);
new Promise(217);
new Uint16Array(32);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "Rh";
    } catch(e27) {
    }
}
let v28 = new F23("m", "Rh");
const v29 = new F23();
function f30(a31, a32) {
    const v33 = [155533.8602852358,2.0];
    for (const v35 of v9) {
        v33[658291203] = null;
    }
    return "Rh";
}
v29[Symbol.toPrimitive] = f30;
v28 = v29;
v28[536870887] = "jP";
v28[v28] = "jP";
const v41 = new Uint32Array();
const o58 = {
    o(a43) {
        const v44 = delete v41[5];
        const v45 = new Uint8ClampedArray();
        function f46() {
            v9.c = Date;
            return Date;
        }
        v45[Symbol.toPrimitive] = f46;
        v45[Symbol.toPrimitive];
        const o54 = {
        };
        o54.execution = v44;
        gc(o54);
        a43 <<= "m";
    },
};
const o60 = {
};
o60.getPrototypeOf = 217;
o60.getPrototypeOf = o60;
const v62 = new Proxy(Uint32Array, o60);
o58["o"](o58, Uint32Array, "o", "o", v62);
new BigUint64Array(1);
const t65 = Array(3398);
t65.length = 1;
