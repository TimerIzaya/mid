const v2 = new Float32Array(255);
4096 - 4096;
try { Uint16Array.call(Float32Array); } catch (e) {}
const v7 = new Uint16Array(4096);
function f8() {
    function f9(a10) {
        let v11 = 0;
        v11++;
        v11 < 5;
        return v2;
    }
    return f9;
}
Object.defineProperty(v7, "toString", { writable: true, get: f8 });
v7[1858] = v7;
const v17 = new Float32Array(5);
try { v17.indexOf(255); } catch (e) {}
function f19() {
    return v7;
}
v17[v7] = 5;
const v21 = v7["values"](Float32Array, ..."values", f19, Float32Array, Uint16Array, ..."values");
const v22 = v21?.constructor;
let v23;
try { v23 = new v22(v21); } catch (e) {}
const v24 = [-2147483647,-21455,9007199254740991,2081096863,33449];
function f25() {
    return v23;
}
function f26(a27) {
    const v28 = [155533.8602852358,2.0];
    function F30() {
        if (!new.target) { throw 'must be called with new'; }
        for (const v35 of Array(19793)) {
            v28[658291203] = null;
            Math.g = Math;
            Math.cbrt();
            const v39 = Array || 0.4890055133608564;
            v39 + v39;
        }
        const v41 = [19793];
        v41.g = v41;
    }
}
Object.defineProperty(v24, 255, { writable: true, enumerable: true, get: f25, set: f26 });
const v42 = [45341,11,627242622,2,1073741825,-2147135338,-9007199254740991,-2,10000,-256];
Object.defineProperty(v42, 10, { enumerable: true, value: 4096 });
const v43 = [-63588,-5,257,15,47547,-65536,-19602,65536,-122184598];
v24[255] <<= 255;
try {
    const v50 = [v21,v24,Uint16Array,605575402,65536n];
    try { v50.reduce(v43); } catch (e) {}
    v42.push(65536n, v50);
} catch(e53) {
}
let v57 = -Infinity;
v57--;
try {
    const v59 = f19();
    v59[2535] = v59;
} catch(e60) {
}
const v64 = new Date(127);
try { v64.setUTCFullYear(127, -8796n); } catch (e) {}
