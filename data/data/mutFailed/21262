const v3 = new Uint16Array(3225);
for (const v4 of v3) {
    const v6 = 9007199254740991 * v4;
    v6 | v6;
}
const v9 = new Uint32Array(2);
v9[1] = v9;
let v13;
try { v13 = v9.includes(-2110447397, -2110447397, ...-8, 2, 3225, -838257926); } catch (e) {}
for (let v14 = 0; v14 < 32; v14++) {
    v13["p" + v14] = v14;
}
const v19 = new Uint32Array(3627);
try { v19.at(Uint16Array); } catch (e) {}
try { BigUint64Array.bind(v3); } catch (e) {}
new BigUint64Array(1000);
try { Int32Array.from(Int32Array); } catch (e) {}
new Int32Array();
class C29 extends Date {
}
try { new C29(); } catch (e) {}
const v31 = new C29();
const v32 = v31.getDay();
v32 >>> v32;
new BigUint64Array(5);
function f38() {
    return 2147483648n;
}
class C39 {
}
const v42 = new Int16Array(1512);
v42[374] = v42;
129 * 129;
new Uint32Array(129);
const v47 = [257];
const v48 = [256,-4294967297,536870912,-8,255,-2670];
0 - 0;
v42[2147483648n] = C39;
const v52 = new Date();
try { v52.getUTCMilliseconds(); } catch (e) {}
let v54 = -6.50438168344124;
v54 **= v54;
v48.length = 0;
const v55 = v47[0];
v55 + v55;
class C57 {
}
try { C57.toString(); } catch (e) {}
function f59() {
    const o61 = {
    };
    gc(o61);
}
const v63 = new C57();
const t54 = v63.constructor;
t54[Symbol.toPrimitive] = f59;
try { v55(...v47, v55); } catch (e) {}
