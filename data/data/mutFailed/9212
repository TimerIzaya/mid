const v0 = [1418029334];
const v1 = [-402447484,25143,-65535,268435439];
const v2 = [-1928917136,5];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = Infinity;
    } catch(e12) {
    }
}
new F6(F6, 1.0885880417398024, v0, v2);
new F6(v1, F6, v2, v1);
new F6(1.0885880417398024, F6, v1, v1);
new Date(v1, v2);
for (let v18 = 0; v18 < 5; v18++) {
    function f19() {
        new Int8Array(16);
        new BigInt64Array(9007199254740990);
        new Uint32Array(3);
        const v32 = Symbol.toPrimitive.description.codePointAt();
        return v32 >> v32;
    }
    f19();
    %OptimizeFunctionOnNextCall(f19);
}
const o35 = {
    "defineProperty": Date,
};
new SharedArrayBuffer(Date, o35);
