class C1 {
    static a;
    set g(a3) {
        for (let v4 = 0; v4 < 71; v4++) {
            try { a3(v4, null, v4); } catch (e) {}
            /(?:a*)+/udsy;
            function F7() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v9 = [F7,F7,F7];
            function f10(a11) {
                try {
                    v9.some();
                } catch(e13) {
                    e13.stack;
                }
                return a11;
            }
            /Ca[a](o(x)(x)(x)\3)/us;
            /Cxyz{93}/gdims;
            function f18(a19, a20) {
                const v21 = -a19;
                v21 >> v21;
                const o23 = {
                };
                return o23;
            }
            const v24 = f18(2n);
            const v26 = f18().propertyIsEnumerable;
            const v28 = new Uint8Array(v24);
            function f29(a30, a31, a32, a33) {
                a32++;
                a32 % a32;
                const o39 = {
                    "b": a30,
                    ...v28,
                    n(a37, a38) {
                        return a38;
                    },
                };
                return v26;
            }
        }
    }
    static h = null;
    225;
    static n(a41, a42) {
    }
    constructor(a44, a45, a46) {
        class C48 extends a45.constructor {
        }
        new C48();
    }
    [null];
    static [null] = null;
    e = null;
}
new C1();
new C1();
new C1();
new Uint32Array(171);
Proxy();
3768 !== 3768;
Symbol.toPrimitive;
new Uint8ClampedArray(257);
new BigUint64Array(0);
const v70 = new Map();
function f71(a72) {
    const o79 = {
        __proto__: v70,
        "f": v70,
        ...v70,
        [v70]: -6n,
        [-6n](a74, a75, a76, a77) {
            delete v70?.size;
        },
    };
    return a72;
}
class C80 {
}
const v81 = new C80();
with (v81) {
    h = C80;
    function F82(a84, a85) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const o89 = {
        toString(a87, a88) {
        },
    };
}
