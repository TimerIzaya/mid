[-3794,-6,4294967295,658378497,64,65536];
const v4 = [268435440,4,2147483648,9007199254740991,-33890,13];
const v5 = [1813924424,16130,1377,13505,-65536,268435440,1024,-191348724];
class C6 {
    constructor(a8, a9) {
        for (let i11 = 0; i11 < 8; i11++) {
            a9[257] = a8;
        }
    }
}
new C6(v4, "string");
new C6(v4, "zjs");
const v19 = new C6(v5, "toString");
function f20() {
    return v19;
}
new WeakSet();
[-4.0];
const v24 = [1000000000000.0,0.6858063114396735,9.402658714628796,5.708362025005593,328.74991470076725,-753579.4826756514,-Infinity,693.2280935866736,-994017.5539127504];
const v25 = [2.0,1000000000.0,-483.6712274705866,1000.0,4.088063908694613];
class C26 {
    static {
        this.f = this;
        const v28 = [-848370.7489683867,1.7976931348623157e+308,-0.0,Infinity,-939644.2877334312,709.4714121839102,1000000.0,-607265.92864471,-1000000000.0,2.2250738585072014e-308];
        try { v28.entries(); } catch (e) {}
        [4.0];
        ([249883.5685712006,1.2407412478935857e+308,NaN,-311.22582434168794,-2.220446049250313e-16])[4];
        8 + 8;
        const v37 = ~8;
        const v38 = v37 + 8;
        v38 - v38;
        Math.atan2(v24, v37);
        const v41 = -345830.36113995407 >> v37;
        new Float64Array();
        const v45 = 1922 % 1922;
        const v46 = v45 == v45;
        function f47() {
            return f47;
        }
        function f48(a49, a50, a51, a52) {
            a49 - a49;
            const v54 = a50.freeze(f47);
            a52 + a52;
            function f56() {
            }
            const v57 = f56.length;
            v57 <= v41;
            const v59 = -v57;
            const v61 = f47().constructor;
            let v62;
            try { v62 = v61(); } catch (e) {}
            v62.caller;
            const v64 = v62.bind();
            try {
                /9/uis;
            } catch(e67) {
            }
            v64.length;
            const v69 = v64.bind();
            v61 * v46;
            const v71 = typeof f56;
            v71.italics(v71, v59, v69);
            const v73 = v71 === v54;
            v73 || v73;
            function f75() {
            }
            const v76 = f75();
            const v77 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
            function f79(a80, a81, a82) {
                const v84 = [Array,a82];
                const v86 = Reflect.apply(v77.filter, v76, v84);
                try {
                } catch(e87) {
                }
                const o88 = {
                };
                try {
                } catch(e89) {
                }
                try {
                    const o90 = {
                    };
                } catch(e91) {
                }
                try {
                    const o92 = {
                    };
                } catch(e93) {
                }
                try {
                    const o94 = {
                    };
                } catch(e95) {
                }
                v86.find(v62);
            }
            const v99 = ("find").blink().replaceAll;
            try { v99(v73); } catch (e) {}
        }
    }
}
try { new C26(); } catch (e) {}
const v102 = new C26();
function f103() {
    new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return f103;
}
try { v102.propertyIsEnumerable(v24); } catch (e) {}
const v107 = new C26();
const v108 = new C26();
const v109 = v108?.constructor;
try { new v109(); } catch (e) {}
const v112 = new WeakMap();
try { v112.delete(C26); } catch (e) {}
class C114 {
    #d = v102;
    p(a116, a117, a118, a119) {
        const o122 = {
            "maxByteLength": 3729857442,
        };
        const v124 = new ArrayBuffer(6, o122);
        new BigInt64Array(v124);
        return v107;
    }
}
new C114();
new C114();
new C114();
try { Map.apply(v102, v25); } catch (e) {}
const v135 = ["-3"];
try { v135.splice(C26, C26); } catch (e) {}
try { new Uint8ClampedArray(C26, v112, C26); } catch (e) {}
BigUint64Array.prototype;
class C145 {
    constructor(a147, a148) {
        const v149 = this?.constructor;
        try { new v149(this, a147); } catch (e) {}
    }
}
function f151(a152) {
    const v158 = new Uint32Array(1024);
    [v158];
    function f160(a161, a162, a163, a164) {
        a161[1];
        for (let v167 = 0; v167 < 5; v167++) {
        }
        const v169 = arguments.__lookupGetter__;
        try { v169.constructor(); } catch (e) {}
    }
    const v172 = Uint16Array();
    v172[7] = v172;
}
const o175 = {
    "arguments": v135,
    "type": "function",
};
new Worker(f151, o175);
new C145();
const v178 = new C145();
const v179 = v178?.hasOwnProperty;
try { new v179(BigUint64Array); } catch (e) {}
52 ^ 52;
for (let v187 = 0; v187 < 25; v187++) {
}
for (let v189 = 0; v189 < 5; v189++) {
    class C192 {
        static {
            try {
                const t168 = null;
                t168.valueOf = this;
            } catch(e194) {
            }
        }
    }
    try { ("-26733").trimLeft(); } catch (e) {}
    for (const v200 of "m") {
    }
}
