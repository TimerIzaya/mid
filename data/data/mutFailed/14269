function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = F1;
    try {
        this.g = f0;
    } catch(e3) {
    }
}
new F1();
const v5 = new F1();
try { v5.g(); } catch (e) {}
new F1();
new Uint32Array(146);
const v13 = new Float64Array(64);
v13[10] = v13;
2551 == 2551;
new Int8Array(2551);
let v19 = Array.length;
v19++;
const v21 = Array(v19);
let v22;
try { v22 = v21.sort(v21); } catch (e) {}
const v23 = /lZ\1(a)/gvm;
v23.c = Uint32Array;
v23.c = v23;
const v24 = /a\sh/gums;
try { v24.test(v24); } catch (e) {}
const v26 = /(p(?:ab))/gdis;
v26[Symbol.iterator] = Array;
v26.unicodeSets = v26;
v26.b = v26;
const v30 = new Int8Array();
Object.defineProperty(v30, "c", { value: Symbol });
const v32 = new Uint8Array();
let v33 = 128;
v33 >>> v33;
v33++;
const v37 = Uint8Array == 248;
const v38 = v37 && v37;
!v38;
const v40 = v38 || v38;
const v41 = new Int8Array(v32);
try { v41.entries(); } catch (e) {}
v21.valueOf = Array;
const v44 = new Uint16Array();
v44[171];
let v46 = 0;
v46++;
const v48 = new Int8Array(v26);
const v49 = v48.byteOffset;
v49 >> v49;
const v53 = -6.515712503710309e+307 >>> -6.515712503710309e+307;
v53 === v53;
function f55(a56, a57, a58, a59) {
    a57.reduceRight = 248;
    try { a57.reduceRight(a58); } catch (e) {}
    const v61 = a58?.__defineGetter__;
    try { new v61(a57, a59); } catch (e) {}
    !a59;
    v30.c = a57;
    return 248;
}
const v64 = f55(Int8Array, v48, Uint16Array, v40);
v64 >>> v64;
v64 >> v64;
const v67 = f55(v46, v24);
try { v67.compile(v33, v19); } catch (e) {}
let v71 = -5.0;
v71 > v71;
const v73 = 0.41428636270946406 ^ v71;
v73 - v73;
let v75 = ++v71;
v75--;
let v78 = 2551 + (-197236662 && 0.41428636270946406);
const v79 = v78--;
v79 >>> v79;
const v81 = Math.round();
v81 % v81;
let v83 = 6;
const v84 = v83++;
function f86(a87, a88) {
    delete a87?.[v67];
    function f90() {
        for (let v91 = 0; v91 < 5; v91++) {
            v91++;
            v91 / v91;
            function f94() {
                return f90;
            }
        }
        return f90;
    }
    f90();
    f90();
    return v22;
}
Map.toString = f86;
const v97 = new Map();
class C99 extends v97.constructor {
}
C99[Symbol.toPrimitive] = Array;
class C102 {
}
Object.defineProperty(C102, "constructor", { enumerable: true, value: Array });
const v103 = C102?.constructor;
try { new v103(C99); } catch (e) {}
const o105 = {
};
o105.c = v38;
o105.c = o105;
const v106 = new C102();
v106.toString = Symbol;
new C102();
const v108 = (-197236662).constructor;
let v109;
try { v109 = v108(); } catch (e) {}
function f110(a111, a112) {
    a111 != a111;
    const v115 = new Float64Array(v109);
    const o120 = {
        [v106](a117, a118, a119) {
        },
    };
    o120.c = v30;
    o120.c = o120;
    return v115;
}
try { f110(248, v40); } catch (e) {}
%OptimizeFunctionOnNextCall(v83);
f110(v84, Int8Array);
