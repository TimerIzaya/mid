const v0 = [-7.758956458046439e+306,-1.0,-2.2250738585072014e-308,0.0,0.7388383731967221];
const v1 = [5.0,0.9321231321365272,1.0,-1.0,Infinity,5.0,1e-15,200159.40675783483,-1000000000.0,-792391.4698498906];
[-1000000000000.0,-813924.5606427991,-1000000000.0,-8.703850217656556e+307,-Infinity,-4.0,-5.110235538347312,-1000000000.0];
function f5(a6, a7) {
    const v9 = new Set();
    function F10(a12, a13) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = a12;
        } catch(e14) {
            for (let [v15,v16] of a12) {
                class C17 {
                }
                const t13 = C17().g;
                t13.length = 1;
                v9.values();
            }
        }
        try {
            this.h = v9;
        } catch(e22) {
        }
        try {
            const v23 = v9[this];
            try {
                new F10(v23, -2046072084n);
            } catch(e26) {
            }
            this.b = Set;
        } catch(e27) {
        }
    }
    return v0;
}
Uint32Array[Symbol.toPrimitive] = f5;
try { new Uint32Array(v0, Uint32Array, v0); } catch (e) {}
const v31 = new Uint32Array(240);
1 & 1;
new Int16Array(1);
let v36 = 3526;
v36--;
const v39 = new Uint8ClampedArray(v36);
v39.valueOf = Symbol;
v39[174] = v39;
class C40 extends Uint8ClampedArray {
    static #valueOf(a42, a43) {
        a42[31] = Uint8ClampedArray;
        v39[a43] = v31;
        new Int32Array(1000);
        new Uint16Array(160);
        const v52 = new Uint16Array(10);
        return v52;
    }
    static #h = v1;
}
function f53() {
    return f5;
}
Object.defineProperty(C40, Symbol.iterator, { writable: true, enumerable: true, get: f53 });
new C40();
const v57 = new C40();
new C40();
const v59 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { Uint32Array.from(C40); } catch (e) {}
const v63 = new Uint32Array();
const v65 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v66 = [601759695];
const v67 = [1073741824,1073741823,1376142744,1073741825];
function f69(a70, a71, a72, a73) {
    a71.toString = f53;
    function f74() {
        new Uint8Array(1024);
        new Int8Array(4);
        new Float64Array(0);
        return v31;
    }
    a72[Symbol.toPrimitive] = f74;
    function f87() {
        let v90 = Float64Array;
        try { new v90("Vre", v57, arguments); } catch (e) {}
        v90 = a71;
        b = v66;
        const v92 = v59.length;
        try {
            v67.forEach(a71);
        } catch(e94) {
        }
        const v95 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        try { new Symbol(); } catch (e) {}
        const v98 = Symbol.toPrimitive;
        const o104 = {
            toString(a100, a101) {
                const v102 = a73 && a71;
                a100 *= v98;
                v102 <= v95;
            },
        };
        const o129 = {
            "c": -4294967297n,
            [522675525n](a107, a108) {
            },
            "c": v66,
            valueOf(a110, a111) {
            },
            [v92](a113) {
            },
            [-1]: 2684,
            1073741824: v63,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [-4294967297n](a115, a116, a117, a118) {
                class C120 extends Date {
                    static get c() {
                        eval();
                    }
                }
                for (let v124 = 0; v124 < 5; v124++) {
                    continue;
                }
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v65,
            set b(a126) {
            },
            256: a73,
            m(a128) {
            },
            ...v66,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            5: -4294967295,
            6: -268435456,
        };
    }
    f87();
    const v132 = new Int8Array();
    try { v132.values(); } catch (e) {}
    const v134 = v132.buffer;
    v134.constructor = f69;
    v134.slice(2147483648);
    %OptimizeFunctionOnNextCall(f87);
    let v138;
    try { v138 = v67["find"](..."find", a73, ...v66, ...v67, ...522675525n); } catch (e) {}
    v138 <= a72;
    return arguments;
}
for (let v140 = 0; v140 < 10; v140++) {
    f69();
}
%OptimizeFunctionOnNextCall(f69);
const v142 = f69();
try { v142.callee(2684, Uint32Array, Uint32Array, f69); } catch (e) {}
