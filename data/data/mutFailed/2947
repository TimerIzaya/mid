new Uint8Array(64);
const v5 = new Uint8Array(3);
const v8 = new Int8Array(10);
class C9 extends v5 {
    #toString(a11, a12, a13) {
        super[Int8Array] = 64;
        [[v8,a13,a11],this,v5,v5];
        [v5,v8,a11,10];
        [2069578788,-45525,-9007199254740991,9,1];
        [9007199254740991,512,65537,-4096,7,-1332880888,1024,256];
        [20605,1,-65536];
        try { a12(a13, a13, ...v5, 10, ...a11); } catch (e) {}
        ~a12;
        return v5.byteOffset;
    }
    constructor(a24, a25) {
        super(a25, a25, 64);
        let v27 = this["toReversed"](a24, Uint32Array, ...v5, ..."toReversed", ..."toReversed", ...this);
        function f28(a29, a30) {
            v27 = Uint32Array;
            return a30;
        }
        f28(v5, 10);
    }
}
const v32 = new C9(10, 3);
new C9(v32, 3);
new C9(Uint32Array, 64);
const v38 = [-6.672391061426152e+307];
try { DataView.call(DataView); } catch (e) {}
function f41() {
    -(~v38["pop"]());
    return DataView;
}
%PrepareFunctionForOptimization(f41);
f41();
%OptimizeFunctionOnNextCall(v5);
f41();
