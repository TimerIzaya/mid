function f0() {
    const t1 = "MIN_VALUE";
    t1[1] = "MIN_VALUE";
    const o22 = {
        m(a5, a6) {
            !-2.220446049250313e-16;
            return a6;
        },
        toString(a9, a10) {
            let v14 = 611354.0070094182;
            const v15 = !4;
            v15 ^ -2.220446049250313e-16;
            -(~v15);
            a10 ** v14;
            -(-2.220446049250313e-16);
            return --v14;
        },
    };
    return o22;
}
const v23 = f0();
const v24 = f0();
const v25 = f0();
const v26 = [-Infinity,-2.2250738585072014e-308,-545978.0233242215,0.0,-20091.590778681333,5.0,-1000000.0,-1.7024192306371884,373706.4165684371,1000000.0];
try { v26.push(v23); } catch (e) {}
const v28 = [4.0];
const v29 = [0.0];
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = v25?.hasOwnProperty;
    try { new v35(f0); } catch (e) {}
    a32.g = a32;
    const v37 = a34?.__lookupSetter__;
    try { new v37(a34); } catch (e) {}
    try {
        this.d = v24;
    } catch(e39) {
    }
}
const v40 = new F30(v29, v29, v23);
new F30(v29, v29, v23);
const v42 = new F30(v26, v28, F30);
v42.e = v42;
class C46 {
    toString(a48) {
        const o49 = {
            ..."raw",
        };
        try { o49.hasOwnProperty(v26); } catch (e) {}
        try {
            function f51() {
                return f51;
            }
            function f53() {
                Object.defineProperty(arguments, 13, { enumerable: true, set: f51 });
                return o49;
            }
            C46();
        } catch(e56) {
        }
    }
}
const v57 = new v40();
try { v57.toString("object"); } catch (e) {}
const v59 = [f0];
try { v59.reduceRight(v29); } catch (e) {}
try {
    v59.length = v57;
} catch(e61) {
}
