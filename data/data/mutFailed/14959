class C3 {
    get f() {
        const v5 = this.f;
        Object.defineProperty(this, 1000, { configurable: true, value: 2 });
        v5[Symbol.toStringTag] = 7;
        function f8() {
            return -1599710707;
        }
        return v5;
    }
    a;
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
function f12(a13, a14) {
    const o18 = {
        __proto__: v11,
        set e(a16) {
            function f17() {
                return 7;
            }
        },
        ...a13,
        "g": a13,
        "b": v11,
        "h": a14,
        "iterator": a13,
        [a14]: -1599710707,
    };
    return o18;
}
const v19 = f12(v10, v10);
const v20 = f12(2, v9);
const v21 = f12(7, v11);
class C22 {
    constructor(a24, a25, a26, a27) {
        a25[4] = a25;
        super[a27];
        try {
            v9.EPSILON = 2;
        } catch(e29) {
        }
    }
    static #d = 7;
    static e = v20;
    static [C3] = 7;
    static #b = v9;
}
new C22(v11, 7, v21, v21, 2, v21, v19);
const v31 = new C22(v11, 7, v20, C22);
new C22(v10, 7, v20, v31);
const v33 = [-4294967297,360567055,-1,1073741824,268435440,9,1073741824];
const v34 = [-4294967296,-63504,-9223372036854775807,512,24559,2];
const v35 = [-40264,13,549206593,-7,4294967296,-1823408865];
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = a40[1];
    try {
        with (a38) {
            F36(v42, a41);
        }
    } catch(e44) {
    }
}
new F36(v35, v34, v33);
