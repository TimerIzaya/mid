const v3 = new Float64Array(Float64Array, Float64Array);
class C4 extends Int16Array {
}
const v5 = new C4();
const o6 = {
    __proto__: v5,
};
try { v3.every(o6); } catch (e) {}
new Float32Array(8);
Uint8ClampedArray.prototype;
const v12 = /(?:a*)+q(?<a>.)/guds;
function f13(a14) {
    a14.hasIndices = a14;
    a14?.constructor.lastParen;
    const o20 = {
        set b(a18) {
        },
        get d() {
            return this;
        },
    };
    return o20;
}
for (let i23 = 0, i24 = 10; i23 < i24; i24--) {
    for (let v31 = 0; v31 < 50; v31++) {
        f13(v12);
    }
}
const v35 = new Uint8Array(9);
Math.exp(-1697 | -1982743944);
new Uint16Array(257);
/[](?:a?)+/gum;
const v46 = 4294967296 & 4294967296;
4294967296 & 4294967296;
class C49 {
    #a;
    valueOf(a51, a52) {
    }
    toString(a54) {
    }
    static f;
}
const v55 = new C49();
class C58 extends C49 {
    #n(a60, a61, a62, a63) {
        super[403343340n];
    }
    static #toString(a66, a67) {
        v55[-2126520711n] = this;
    }
}
/\P{sc=Greek}*/gvdmsy;
/jZa\fb\nc\rd\te\vfP^xxx$/gdi;
const v72 = [-65535,452354247,-2,78479092,-2147483648,1073741823,5,6528,-1024,-261130286];
new Uint16Array(6);
const o77 = {
    [v35]: v35,
};
const o78 = {
};
function F79() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v81 = 0;
        do {
            v81++;
        } while (v81 < 5)
        new F79();
    } catch(e86) {
    }
}
function f88(a89) {
    return Uint8Array;
}
new v46();
const v93 = new Uint8ClampedArray(3);
class C94 {
    constructor(a96, a97, a98, a99) {
        for (let v100 = 0; v100 < 5; v100++) {
            v93[v100] = a99;
        }
    }
}
const v101 = new Proxy(v72, o78);
new Int32Array(v101);
