function f0() {
}
const v2 = new Map();
function f3(a4) {
    return "536870889";
    return Map;
}
v2[Symbol.toPrimitive] = f3;
function f8() {
    return v2;
}
const v12 = v2 < v2;
const v13 = [-1000000.0,-3.1923473210656557,-1.721355656202141e+308,4.0,0.3955838142797843,-3.0,1.1463753586867827e+308];
function f14(a15) {
    const o16 = {
    };
    function f17(a18) {
        return a18;
    }
    Object.defineProperty(o16, 213, { writable: true, set: f17 });
    o16[213] = v13;
    return o16[213];
}
const v20 = [-3.0,Infinity,f8,4.0];
[Map,v20,v20,[Map,f0,f8,Map,f8],f0];
new Set();
Uint8Array.e = Uint8Array;
const v27 = new Uint8Array(1000);
Array.o = 1000;
Array();
Array(1000);
const v35 = new BigUint64Array(257);
v35.d = v12;
const v36 = Uint8Array in v35;
v36 && v36;
try {
    v35.d = v27;
} catch(e38) {
}
for (let v43 = 0; v43 < 10; v43++) {
    const t40 = "f";
    t40[1073741824] = 4294967296;
}
const v44 = new Float32Array(4);
function f45() {
    return Symbol;
}
function f46(a47) {
    function f48(a49, a50) {
        return a50;
    }
}
Object.defineProperty(v44, "valueOf", { get: f45, set: f46 });
v44[3] = v44;
const o52 = {
};
o52.e = f14;
const v55 = new Float64Array(10);
v55[1] = v55;
Uint8Array.e = Uint8Array;
new Uint8Array(4096);
Float32Array.name;
new Float32Array(141);
7 + 7;
new f14();
try { Array.o(); } catch (e) {}
function f67(a68, a69) {
    return f67;
}
f67.prototype;
5 + 5;
new Uint16Array(5);
function f75() {
    return f75;
}
new BigInt64Array(7);
let v77 = -2n;
v77--;
function f81() {
    return 536870887n;
}
try { f81(); } catch (e) {}
let v83;
try { v83 = f81(); } catch (e) {}
v83 * v83;
Map.prototype;
new Map();
24560 ^ 24560;
-1000000000000.0 >>> -1000000000000.0;
Uint8Array.prototype = Uint8Array;
function F99() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    const v104 = Date();
    let v105;
    try { v105 = v104.small(); } catch (e) {}
    const v108 = Array(19793);
    v108[3261] = v105;
    for (const v109 of v108) {
    }
    try {
    } catch(e110) {
    }
}
const v112 = new F99();
const v113 = v112?.constructor;
try { new v113(); } catch (e) {}
function F115(a117, a118, a119) {
    if (!new.target) { throw 'must be called with new'; }
    const v120 = this?.__defineGetter__;
    try { new v120(v35, v35); } catch (e) {}
}
class C123 {
    constructor(a125) {
        try {
        } catch(e126) {
        }
        try {
            new Date(127);
            super.n(1e-15);
        } catch(e132) {
        }
        for (const v133 of "bigint") {
        }
    }
}
class C134 extends C123 {
}
const o135 = {
};
