function f0() {
    class C4 {
        constructor(a6) {
            for (const v7 of "bigint") {
                this.c = v7;
            }
        }
        h = undefined;
    }
    new C4();
    const o24 = {
        [1000000000.0](a12, a13) {
            const v19 = new Int8Array(8);
            Reflect.construct(Uint16Array, [v19]);
            return a12;
        },
        ...-25075,
        __proto__: 1000000000.0,
        ...-25075,
        "a": 1000000000.0,
    };
    return o24;
}
const v25 = f0();
const v26 = f0();
const v27 = f0();
v27[1000000000] = v27;
[771832.729322108,0.8798463348363657,2.220446049250313e-16,122650.06670033,-1000.0,342288.2993868373,1.0];
const v29 = [-1.7976931348623157e+308];
[0.0];
8 % 8;
const v34 = new Uint8ClampedArray(8);
v34[2] = v34;
try { new Uint8ClampedArray(v25, f0, v25); } catch (e) {}
new Uint8ClampedArray(200);
for (let v40 = 0; v40 < 25; v40++) {
    v29["p" + v40] = v40;
}
new BigInt64Array(512);
for (let i = 0; i < 10; i++) {
    class C46 {
        constructor(a48) {
            this.constructor;
            const o51 = {
                "maxByteLength": 1000,
            };
            Float64Array.of();
            try { new C46(); } catch (e) {}
            ("size").g?.[7];
            function f57() {
                const v59 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
                return v59;
            }
            [...a48] = "size";
        }
    }
    function f62(a63) {
        const o64 = {
            3677: -128n,
        };
        return o64;
    }
    f62();
    const v66 = f62(-1024n);
    function F67(a69, a70, a71, a72) {
        if (!new.target) { throw 'must be called with new'; }
        const v73 = this?.constructor;
        try { new v73(this, a72, a72, this); } catch (e) {}
        a70[3677];
        a71 << a71;
        a72.e = a72;
        try {
            this.e = a69;
        } catch(e77) {
        }
        try {
            this.d = f62;
        } catch(e78) {
        }
    }
    try { C46.bind(v26); } catch (e) {}
    Symbol.toStringTag;
    F67.strike().codePointAt(F67);
    -v66;
    new C46("size");
}
