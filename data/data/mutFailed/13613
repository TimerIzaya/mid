const v0 = /fxyz{1,}?((?:a?)?A(ab|cde)\1*)/vdsy;
const v1 = /bC/gdimsy;
v1[1] = v1;
const v2 = /mfoo(?<=bar)baz/g;
function f3() {
    new Map();
    return v1;
}
v2.toString = f3;
function f9(a10, a11, a12) {
    Object.defineProperty(a10, 1, { enumerable: true, value: a12 });
    function f13() {
        return f9;
    }
    function f14(a15) {
        b = a15;
    }
    Object.defineProperty(a11, "toString", { writable: true, configurable: true, enumerable: true, get: f13, set: f14 });
    const o105 = {
        "d": 10000,
        get h() {
            function F17(a19, a20, a21) {
                if (!new.target) { throw 'must be called with new'; }
                for (let i24 = 0; i24 < 2; i24++) {
                    try {
                        arguments.g = i24;
                    } catch(e30) {
                    }
                }
                try {
                    this.a = a19;
                    function f31(a32, a33, a34, a35) {
                        const v37 = new Int8Array(a34);
                        for (const v41 in arguments) {
                            try {
                                const v42 = [a12,a10,v41,a11,Int32Array];
                                const o44 = {
                                };
                                f31(v42, 10n, o44, this);
                            } catch(e46) {
                            }
                        }
                        const v47 = new Int32Array(2528);
                        v47[0] %= -1073741824;
                        return v37.buffer;
                    }
                } catch(e49) {
                }
                try {
                    this.e = a21;
                } catch(e50) {
                }
                try {
                    this.g = a21;
                } catch(e51) {
                }
                a10.a /= 9;
                try {
                    this.c = 9;
                } catch(e54) {
                }
                function f55(a56, a57, a58) {
                    const o59 = {
                    };
                    return o59;
                }
                f55(9, 9, 9);
                function f61(a62, a63, a64, a65) {
                    const v66 = /(?:a*)+q(?<a>.)/guds;
                    function f67(a68) {
                        a68.dotAll;
                        a68.hasIndices = a68;
                        const v70 = a68?.constructor;
                        v70.$_;
                        v70.lastParen;
                        const o74 = {
                            get d() {
                            },
                        };
                        return v66;
                    }
                    for (let [i78, i79] = (() => {
                            let v75 = 0;
                            v75++;
                            return [v75, 10];
                        })();
                        (() => {
                            const v80 = 9 < i79;
                            v80 || v80;
                            return v80;
                        })();
                        (() => {
                            i79--;
                            a62 == a64;
                            const t0 = f67(a65);
                            t0[8] = F17;
                            [f61,a12];
                            [i79,a19];
                            [f55,10,a63];
                        })()) {
                        f67(v66);
                    }
                    return f61;
                }
                f61();
            }
            new F17(10000, v0, v2);
            new F17(512, v0, a11);
            const v96 = new F17(10000, v0, a10);
            function F97(a99, a100) {
                if (!new.target) { throw 'must be called with new'; }
                const v101 = this.constructor;
                try { new v101(); } catch (e) {}
                -a99;
            }
            class C104 extends F97 {
                3120 = F97;
            }
            return v96;
        },
    };
    return o105;
}
let v106 = f9(v2, v2, 512);
const v107 = f9(v2, v2, 512);
const v109 = [v2,v106,10,f9(v1, v1, 10)];
v109.toString = f3;
v1[1] ^= 10000;
const v111 = new Set();
v111.undefined = v0;
f9(v111, 512, ...v111, v1);
v106 = v107;
const v113 = [v109,v109,v1,10];
[v113,f9,v2,v2,v113];
Array(12, -10);
function f119(a120, a121, a122) {
    function f123() {
        return v106;
    }
    function f124(a125) {
        const v127 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v128 = [601759695];
        const v129 = [1073741824,1073741823,1376142744,1073741825];
        function f130(a131, a132, a133, a134) {
            const o142 = {
                ...v127,
                ..."Vre",
                "c": a134,
                84: arguments,
                ..."Vre",
                valueOf(a140, a141) {
                    return a133;
                },
                ..."Vre",
                4: "-1073741824",
                5: -4294967295,
                6: -268435456,
            };
            %OptimizeFunctionOnNextCall(arguments);
            try { v129["find"](..."find", a134, ...v128, ...v129); } catch (e) {}
            return a132;
        }
        for (let v145 = 0; v145 < 10; v145++) {
            f130();
        }
    }
    Object.defineProperty(a121, 3851200120, { configurable: true, get: f123, set: f124 });
    Math.tanh(-1024);
    ~v109;
    Math.max(10);
    const v154 = a121[3851200120];
    const v155 = v111[v154];
    const v156 = [];
    try { v156.with(v156, v156); } catch (e) {}
    let v159 = ("c").toUpperCase();
    function F161(a163, a164, a165) {
        if (!new.target) { throw 'must be called with new'; }
        const v166 = this?.__lookupGetter__;
        try { new v166(12); } catch (e) {}
        a164 + a164;
        try { a165.find(a163); } catch (e) {}
        try {
            const v170 = new Array(v154);
            let v171;
            try { v171 = this.fill(v170, Array, v155, v170, v170); } catch (e) {}
            v159 = v171;
            let [] = v109;
            this[1] = v154;
            this.d = a163;
        } catch(e172) {
        }
        try {
            this.b = a165;
        } catch(e173) {
        }
    }
    return a121;
}
f119(-10, v0, v109);
