class C2 extends Int32Array {
}
const v3 = [10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163];
function f4() {
    return Math.abs(v3);
}
v3[Symbol.toPrimitive] = f4;
Date.parse(v3);
const o12 = {
};
o12.propertyIsEnumerable;
const v14 = /8[\cA]v/uisy;
const v15 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v15.length = v14;
} catch(e16) {
}
function f18(a19) {
    function f20() {
        return f20;
    }
    function f21() {
        return f21;
    }
    const o25 = {
        "e": -256,
        "h": a19,
        [-256]: a19,
        "f": 3,
        toString(a23) {
            let v24;
            try { v24 = new a19(a23, a19, this); } catch (e) {}
            return v24;
        },
        [-2]: 3,
        ...a19,
        "d": a19,
    };
    return o25;
}
const v26 = f18(3);
const o34 = {
    get a() {
        class C28 {
            constructor(a30, a31) {
            }
        }
        eval();
    },
};
const v35 = f18(v26);
function f36(a37, a38, a39) {
    const o62 = {
        n(a41, a42) {
            class C51 extends Int32Array {
            }
            function F57() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C60 {
                static get b() {
                }
            }
            return a38;
        },
    };
    return a39;
}
f18(v35);
class C70 {
    constructor(a72, a73, a74) {
    }
    [-15];
    #valueOf(a76, a77) {
    }
    static {
        try {
        const t0 = "boolean";
        t0(this);
        } catch (e) {}
    }
}
