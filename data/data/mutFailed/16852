function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = this;
    this.g = this;
    this.e = F0;
    try {
        this.g = 8;
    } catch(e3) {
    }
    try {
        this.e = 8;
    } catch(e4) {
    }
    try {
        this.f = 8;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
new Int32Array(5);
new Float64Array(512);
new Uint8ClampedArray(257);
const v27 = new Int32Array();
v27.p512 = Uint8ClampedArray;
function f28() {
    let v30 = -8 && -8;
    return v30++;
    return 1.7138098126660215e+308;
}
Object.defineProperty(v27, (512).toPrimitive, { writable: true, configurable: true, enumerable: true, value: f28 });
const v36 = new NaN();
const v39 = new Float64Array();
function f40(a41, a42, a43, a44) {
    a41 - a41;
    const v46 = a41 >> a42;
    const v47 = a42 | a43;
    a44 >>> a44;
    const v49 = a42 - a42;
    v49 >>> v49;
    try {
        for (let v51 = 0; v51 < 50; v51++) {
            for (let v52 = 0; v52 < 25; v52++) {
                v27["p" + 512] = v52;
            }
        }
    } catch(e55) {
    }
    a43 & a43;
    a44 >> v46;
    const o68 = {
        [616]: Int32Array,
        "b": 5,
        10: v36,
        "g": v47,
        [v27]: a43,
        "d": Int32Array,
        n(a59, a60) {
            4096 | v39;
            v39[110];
            let v64 = -1440192970;
            v64--;
        },
    };
    return o68;
}
f40();
f40(4096, 4096);
