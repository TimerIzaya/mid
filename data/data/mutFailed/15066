[-65535];
[43105,-2147483649,-536870912,-4294967296,325309714];
[-1276995897,7,-2,268435439,12,1846041506];
new WeakSet();
function f20() {
    return 831364659;
}
class C21 extends f20 {
    static get c() {
        const v24 = 831364659 | f20;
        this[10] = v24;
        return v24 instanceof f20;
    }
    [-48110];
    static c = 2147483647;
    static #c;
    185 = 4.0;
    static 536870887 = 0.0;
}
const t19 = -48110;
new t19();
new C21();
new C21();
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v35 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f39(a40, a41, a42, a43) {
    function f44() {
        const v47 = v32.length;
        try {
            v37.forEach(a41);
        } catch(e49) {
        }
        const v50 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v52 = Symbol.toPrimitive;
        const o58 = {
            toString(a54, a55) {
                const v56 = a43 && a41;
                a54 *= v52;
                return v56 <= v50;
            },
        };
        const o79 = {
            "c": -4294967297n,
            [522675525n](a61, a62) {
            },
            "c": v36,
            valueOf(a64, a65) {
                return a64;
            },
            [v47](a67) {
            },
            [-1]: a40,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [522675525n](a69, a70, a71, a72) {
                eval();
            },
            "e": -4294967295,
            "arguments": v35,
            set b(a76) {
            },
            256: a43,
            m(a78) {
                return a78;
            },
            ...v36,
            "type": a40,
            ...a40,
            4: "Vre",
            "c": a42,
        };
        return Symbol;
    }
    f44();
    %OptimizeFunctionOnNextCall(f44);
    return v35;
}
for (let v81 = 0; v81 < 5; v81++) {
    f39();
}
