const v2 = new Uint8Array(6);
BigInt64Array[0] = 64 == 64;
const v6 = new BigInt64Array(64);
v6[61];
try { new Uint8Array(BigInt64Array, 1000, 6); } catch (e) {}
const v11 = new Uint8Array(1000);
v2.d = -65536;
const v14 = new Int16Array(1000);
const v16 = new Int32Array(v14);
[-13,-433697540,10,257,-2111566107];
const v18 = [6,52965,1073741824,4,65536,-261831435,1073741825,536870887];
try { v18.filter(1000); } catch (e) {}
const v20 = [42071];
function f21() {
    return v6;
}
f21.arguments = f21;
try { ("-2").toLocaleLowerCase(); } catch (e) {}
try { ("4X").fixed(); } catch (e) {}
class C27 {
    static 3143;
    static ["-2"];
    #f = "-2";
    static #a;
    #c;
    #valueOf(a29, a30) {
        const v31 = a30 == a30;
        v31 ? a30 : a30;
        const v33 = ["-2",this,"setMonth",a29,"-2"];
        [v33,v33,this,this];
        [v31,"-2","4X",a29];
        return a29;
    }
    10 = "4X";
    #g = "-2";
}
C27[3143] = C27;
const v36 = new C27();
v36[10] = v36;
new C27();
new C27();
let v42 = 1000000000000.0;
const v47 = new Uint16Array(12, -4294967296, v42--);
new Float32Array(v47, -4294967296, 268435439, v42, v47);
try { new WeakSet(); } catch (e) {}
new WeakSet();
const v54 = -536870912 != -536870912;
-536870912 ^ -536870912;
const v56 = [v20];
class C58 extends Map {
}
const v59 = new C58(v56);
const v60 = new C58(v59);
const v62 = [601759695];
const v64 = v59["toString"](v54, ...v60, BigUint64Array, ..."toString", -536870912);
try { v64.italics(); } catch (e) {}
try {
    v20.forEach(v64, v62);
} catch(e67) {
    const v68 = e67.message;
    try { v68.italics(); } catch (e) {}
    e67.stack = e67;
}
const v70 = [-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
[35577,123452243,-2,65305,268435441,11,-58686];
const v72 = [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
try { v72.sort("-2"); } catch (e) {}
const v76 = 6 | 6;
v76 >>> v76;
Int16Array.length = Int16Array;
function F82(a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v88 = this.constructor;
    try { new v88(); } catch (e) {}
}
new F82();
new F82();
function F92() {
    if (!new.target) { throw 'must be called with new'; }
}
const v94 = new F92();
const v95 = [F92,F92,F92];
function f96(a97) {
    try {
        v95.some();
    } catch(e99) {
        e99.stack;
    }
    return a97;
}
v95.toString = f96;
const o102 = {
    __proto__: v95,
    "e": v94,
    get a() {
        return this;
    },
};
try { new Uint32Array(1024, Uint32Array, 127); } catch (e) {}
function f107() {
    const o109 = {
        get b() {
            return f107;
        },
    };
    return o109;
}
class C110 extends f107 {
    constructor(a112) {
        super();
        for (let v113 = 0; v113 < 25; v113++) {
            this["p" + v113] = v113;
        }
    }
}
const v116 = o102.toString(F92, o102);
class C118 {
    constructor(a120) {
        const v121 = this.constructor;
        v121.d = v121;
        try { new v121(); } catch (e) {}
        ("size").c;
        const v124 = ("size").g;
        ("size").length;
        let v126 = v124?.[7];
        [...v126] = "size";
        /a\bc/vd;
    }
}
function f128(a129, a130, a131) {
}
const o132 = {
};
class C133 {
    static #n(a135) {
    }
}
new C133();
new C133();
let v138 = Int16Array;
try {
} catch(e139) {
}
v138 = v138;
Object.defineProperty(v11, 10000, { configurable: true, enumerable: true, value: v70 });
f128(C133, v54, Int32Array);
const t146 = "setMonth";
delete t146[v116];
for (let v142 = 0; v142 < 32; v142++) {
    v16["p" + v142] = v142;
}
