const v0 = [];
class C2 {
    constructor(a4, a5) {
        this[a4];
        try {
            undefined.d = undefined;
        } catch(e7) {
            e7.message = e7;
        }
    }
    static #valueOf(a9) {
        let [,v10] = v0;
        undefined[0] = undefined;
        v0[Symbol.split] = v10;
        return v10;
    }
}
const v13 = new C2(v0, C2);
function f14(a15) {
    new C2(v13, a15);
    let v19 = -1e-15;
    Math.atan2(v19++, -175950080);
    return v19;
}
v13.constructor = f14;
try { v13.constructor(C2, v0); } catch (e) {}
const v23 = new C2(v0, undefined);
const v24 = new C2(v23, v0);
const v25 = v24?.constructor;
function f26() {
    function f27(a28, a29) {
        return a28;
    }
    return f27;
}
function f33(a34) {
    const t36 = "matchAll";
    t36[9] = 128;
}
Object.defineProperty(v25, Symbol.toPrimitive, { writable: true, enumerable: true, get: f26, set: f33 });
try { new v25(v23, v23); } catch (e) {}
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    this.findLast = this;
    a42.findLast = a45;
    a43.findLast = Symbol;
    a45.toString = f14;
    a42.length = a42;
    try { a43.findLast(v24); } catch (e) {}
    const v47 = a45?.constructor;
    v47[Symbol.toPrimitive] = f33;
    try { new v47(a42, a45); } catch (e) {}
    try {
        this.f = a45;
    } catch(e51) {
    }
    try {
        this.c = v13;
    } catch(e52) {
    }
}
F40.f = f14;
F40.f = F40;
const v53 = new F40(C2, v0, v23, v13);
const v54 = new F40(v53, v0, v24, v53);
const v55 = new F40(v13, C2, v54, v13);
v55.f = v55;
512 != 512;
new BigUint64Array(512);
127 >>> 127;
new Uint32Array(127);
Uint32Array.g = F40;
Uint32Array.g = Uint32Array;
new Uint32Array(1);
[BigUint64Array];
try {
    new BigUint64Array(v24);
} catch(e70) {
}
