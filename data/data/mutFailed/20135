new Float64Array(76);
127 + 127;
new Float32Array(127);
2 >> 2;
const v10 = new BigUint64Array(2);
try { v10.reduce(Float32Array); } catch (e) {}
let v12 = 530;
v12--;
const v15 = new Uint16Array(v12);
v15[341] = v15;
let v18;
try { v18 = new BigUint64Array(2870, v10, v10); } catch (e) {}
try { v18.slice(v18, 127); } catch (e) {}
const v20 = new BigUint64Array(2870);
const v21 = v20?.constructor;
try { new v21(2, BigUint64Array, BigUint64Array); } catch (e) {}
let v23 = 55;
v23++;
new Float64Array(v23);
522675525n % v21;
const v30 = v18();
try { v30.flatMap(127); } catch (e) {}
Object.defineProperty(v30, 1262, { value: 522675525n });
try { v30.fill(522675525n); } catch (e) {}
