Math.log1p(0.04879611221991542);
function f4() {
}
const v9 = new Uint8ClampedArray(995);
try { v9.indexOf(Uint8ClampedArray); } catch (e) {}
try { Int8Array.from(Int8Array); } catch (e) {}
new Int8Array(v9);
4096 - 4096;
new Float32Array(4096);
try { ("-536870912").strike(); } catch (e) {}
const v21 = ("-536870912").normalize;
v21.name = v21;
const v22 = [];
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    [v22,[this,this,this,this],this,arguments];
}
F23.arguments;
new Float32Array(1);
try { new Int16Array(Uint8ClampedArray, F23, F23); } catch (e) {}
new Int16Array(256);
function f37() {
    return -1000.0;
}
const v40 = new Int8Array(1392);
for (let v41 = 0; v41 < 5; v41++) {
    function f42() {
        const t27 = "Vre";
        t27[1] = "Vre";
        let v44 = ("Vre").codePointAt(v41);
        const v45 = v44--;
        v45 ^ v45;
        const v47 = v44 * v45;
        v47 / v47;
        return f42;
    }
    const v49 = f42();
    v49.arguments = v49;
    %OptimizeFunctionOnNextCall(f42);
}
let v51 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
let v52 = Uint8ClampedArray;
const v53 = new v52(v51, Uint16Array, v52);
const v54 = v53?.constructor;
try { new v54(v22, f4, v40); } catch (e) {}
let v57 = "g";
({"d":v57,"length":v52,...v51} = "unscopables");
Uint32Array[1] = f37;
const v59 = new Uint32Array(Uint32Array);
v59[1];
new Int8Array();
const v64 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
class C65 {
    #p(a67, a68, a69, a70) {
    }
    constructor(a72, a73) {
        const v74 = this?.constructor;
        try { new v74(a72, v57); } catch (e) {}
        const v76 = this.constructor;
        v76.name = v76;
        try { new v76(); } catch (e) {}
        try {
            v64.#p();
        } catch(e79) {
        }
    }
}
new C65(Uint16Array, v64);
const o81 = {
};
o81.setPrototypeOf = o81;
const v83 = new Proxy(v53, o81);
v83.__proto__;
