const v0 = [5,-3,3,1940506048,-10,35085,4294967296,14,38416,1859296681];
const v1 = [9007199254740991,-256,1282034598];
const v2 = [-4294967297,268435456,-1839084205,536870887,128];
class C3 {
    get b() {
        function F5(a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a8;
            } catch(e9) {
            }
        }
        new F5(this, v0);
        new F5(this, v1);
        new F5(v2, this);
        return F5;
    }
}
const v13 = new C3();
function f14(a15, a16) {
    const v18 = new Date();
    v18.getTimezoneOffset();
    return Date;
}
v13.constructor = f14;
const v20 = v13?.constructor;
try { new v20(); } catch (e) {}
new C3();
new C3();
new BigUint64Array(2154);
new Uint8ClampedArray(956);
const v32 = new Uint32Array(1);
const v33 = [];
const v35 = Symbol.toPrimitive;
Object.defineProperty(v33, v35, { writable: true, configurable: true, value: f14 });
class C36 {
    [v33];
    set a(a38) {
        a38 === v33 ? a38 : v33;
        [v33,a38,a38,v33];
        [v33];
        [a38,v33,v33,v33,v33];
    }
    static [v33];
    #f;
    h = v33;
}
const v44 = new C36();
function f45(a46, a47) {
    v35.Realm;
    return Uint8ClampedArray;
}
v44.toString = f45;
new C36();
const v53 = new C36();
Object.defineProperty(v53, "constructor", { writable: true, enumerable: true, value: f14 });
try { v53.constructor(); } catch (e) {}
const v58 = -56455 !== -56455;
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    function f65() {
        const v67 = new gc();
        eval(v67);
        return v67;
    }
    Object.defineProperty(this, Symbol.toPrimitive, { configurable: true, value: f65 });
    function f72(a73, a74) {
        a74 * Symbol;
        for (const v79 of Array(19793)) {
        }
        return a73;
    }
    a61.toString = f72;
    a63.toString = Symbol;
    function f80() {
        function f81(a82) {
            const v84 = new Uint8ClampedArray();
            for (let v85 = 0; v85 < 5; v85++) {
                v84[v85] = a82;
            }
            return v58;
        }
        return f81;
    }
    function f86(a87) {
        let v90 = 4096;
        Math.ceil(a62);
        256 || 256;
        v44 >>> 256;
        ++v90;
    }
    Object.defineProperty(a64, "valueOf", { get: f80, set: f86 });
    try { this.constructor(a64, this, a63, a63); } catch (e) {}
    a61++;
    a63.h = a63;
    try { a64.findLast(a63); } catch (e) {}
}
const v99 = new F59(-12, -56455, v53, v33);
const v100 = new F59(v44, -14, v44, v53);
const v101 = new F59(v44, -14, v53, C36);
const v102 = v101?.constructor;
try { new v102(v32, v32, v101, v32); } catch (e) {}
const v105 = Math?.expm1;
try { new v105(Uint8ClampedArray); } catch (e) {}
-1.0 + -1.0;
const v109 = v101 - -12;
v109 | v109;
Math.round();
let v112 = v99 << -1.0;
v112++;
try { v100(); } catch (e) {}
