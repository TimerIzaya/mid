function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        return this;
    }
    function f3(a4) {
        let v6 = 47512;
        let v8 = ++v6;
        a4--;
        --v8;
    }
    Object.defineProperty(this, "b", { configurable: true, enumerable: true, get: f2, set: f3 });
    try {
        this.b = 4294967296;
    } catch(e12) {
        const o14 = {
            "execution": "async",
        };
        const o15 = {
        };
    }
    try {
        function F16() {
            if (!new.target) { throw 'must be called with new'; }
            Object.defineProperty(this, "c", { writable: true, value: this });
            this.c = 5;
        }
        const v19 = new F16();
        const v20 = new F16();
        function f21(a22, a23) {
            const o24 = {
                "h": v20,
                6: v20,
                128: a23,
                "e": v19,
                __proto__: a22,
                "a": a22,
                ...a23,
            };
            return o24;
        }
        const v25 = f21();
        f21();
        function f27() {
            return f21;
        }
        Object.defineProperty(Float32Array, "toString", { value: f3 });
        const v30 = new Float32Array(218);
        for (const v31 of v30) {
            Object.defineProperty(v25, Float32Array, { configurable: true, enumerable: true, get: f21, set: f27 });
        }
        this.g = 4294967296;
    } catch(e32) {
    }
    try {
        this.f = 4294967296;
    } catch(e33) {
    }
}
const v34 = new F0();
const v35 = new F0();
function f36(a37, a38) {
    const v39 = [-13063,230037640,0,-1717935321,257,0,1073741825];
    const v40 = [-2051630605,509562611];
    const v42 = new Float32Array(v39);
    try { v40.sort(v42); } catch (e) {}
    return v34;
}
v35.toString = f36;
const v44 = new F0();
function f45() {
    v44[f36] >>= v44;
    try {
        v34.f = v34;
    } catch(e46) {
    }
    return v44;
}
v44.valueOf = f45;
function F47(a49) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a49;
    } catch(e50) {
    }
}
const v51 = new F47(v34);
const v52 = new F47(v35);
const v53 = new F47(v35);
const v54 = [-4,-347972790,-1715872727,9007199254740990,-1070817963,4294967296,65535,3,14];
const v55 = [12833];
const v56 = [1073741823,-1369355431];
class C57 {
    constructor(a59, a60, a61, a62) {
        v44 >>> a62;
        const o64 = {
        };
        new Proxy(v54, o64);
    }
    #m(a68, a69, a70) {
        function F71(a73, a74, a75, a76) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a70;
            } catch(e77) {
                class C78 {
                }
                6 >>> 1;
            }
            try {
                class C83 {
                }
                const v84 = new C83();
                for (let v85 = 0; v85 < 5; v85++) {
                    v84["p" + v85] = v85;
                }
                new Uint16Array(821);
                function f90() {
                    return f90;
                }
                try { Uint16Array["n"]("n", Map, f90, Map, f90); } catch (e) {}
                const v94 = Map.name;
                try { v94.trimLeft(); } catch (e) {}
                this.d = v51;
            } catch(e96) {
                class C98 {
                    constructor(a100, a101) {
                        const v104 = new Int32Array(127);
                        v104.toSorted();
                        const v108 = new Uint32Array(127);
                        v108[1] = 716884141;
                        try {
                            super.n(1e-15);
                        } catch(e110) {
                        }
                        try {
                            super.getYear(a100, v35);
                        } catch(e112) {
                        }
                    }
                }
                new C98(C98, C98);
            }
        }
        new F71(v35, v35, a70, v55);
        new F71(v35, v44, v52, a68);
        new F71(v44, this, a70, v54);
        return this;
    }
}
new C57(v52, v54, v56, v35);
new C57(v53, v55, v54, v35);
new C57(v51, v55, v54, C57);
const v120 = /v*/vdms;
class C121 {
    1855;
    [v120];
}
const v122 = new C121();
function f124(a125, a126, a127, a128) {
    const o129 = {
        [a126]: a128,
        ...a128,
    };
    return a127;
}
f124(3706, v120, f124(3706, 3706, C121, v122), v122);
