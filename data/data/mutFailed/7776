const v0 = [-6.448780682207646,2.220446049250313e-16,-1.0518480029654992e+308,177.75771577602677,-Infinity,-1e-15,0.13776538184619647,-2.2250738585072014e-308];
const v1 = [632869.8629169699,975.5227345208318,2.2250738585072014e-308,319.89595464690524,-4.0568158765375974e+307,1e-15];
const v2 = [2.2250738585072014e-308,951.902656325927,-1.6628050226042527e+308,-4.0,-1.3671947464993392e+308,0.04588484994222919,NaN,2.0];
class C6 {
    static {
        this.length;
        let v9 = 0;
        v9 === v9;
        do {
            try { this.p(7n, v9); } catch (e) {}
            v9++;
        } while (4 > 4, v9 < 4)
    }
    static e = -7n;
    static [7n] = v0;
}
const v19 = new C6();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
const v22 = new C6();
const v23 = new C6();
v23.__proto__;
const t21 = "u";
t21.a = "u";
class C28 {
    m(a30, a31, a32) {
        typeof v22 === "undefined";
        let [v36,v37] = a32;
        const v39 = new Set();
        class C40 {
            valueOf(a42) {
                for (let v43 = 0; v43 < 32; v43++) {
                    a42["p" + v43] = v43;
                }
                return this;
            }
            m(a47, a48) {
                Set ^ Set;
                new Int32Array(2917);
                %OptimizeFunctionOnNextCall(Date);
                let v55 = 3256989;
                v39 << a48;
                const v57 = a48 & v55;
                Math.cosh(v55);
                ++a48;
                ++v55;
                function f61() {
                    return f61;
                }
                return f61;
                new Int32Array();
                Math.clz32(a48);
                return v57;
            }
        }
        new C40();
        class C66 {
        }
        class C67 extends C66 {
        }
        function f68() {
        }
        class C69 extends f68 {
            constructor(a71, a72, a73) {
                super();
                super.f = a71;
            }
        }
        new C69();
        const v75 = new C40();
        const v76 = v75?.constructor;
        const v77 = v76.length;
        let v78;
        try { v78 = new v76(); } catch (e) {}
        try { v78.constructor(v39, v77, v78, v39, v39); } catch (e) {}
        new Int8Array(1024);
        class C84 {
            constructor(a86, a87) {
                try {
                    super.n(1e-15);
                } catch(e89) {
                }
                try {
                    super.getYear(a86, this);
                } catch(e91) {
                }
            }
        }
        const v93 = new Float64Array(Float64Array);
        const v94 = [601759695];
        function f95(a96, a97, a98, a99) {
            Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: v93 });
            arguments[4] = arguments;
            return v94;
        }
        f95(v94);
        const v104 = -Infinity;
        const o105 = {
            "a": v104,
            "d": v104,
        };
        class C107 extends o105.constructor {
            d;
            10000 = f68;
            constructor(a109, a110, a111) {
            }
            #p(a113, a114, a115, a116) {
                super.m();
            }
        }
        5 >> 5;
        const v122 = new Uint8ClampedArray();
        const o123 = {
            ...v122,
        };
        -1.4367919238310544e+308;
        -614278.5721791903 / -614278.5721791903;
        const v127 = /LD/vds;
        const v128 = /a\s/vims;
        /SO/uis;
        [v127,1000.0,v128];
        super[v1] = v37;
        return this;
    }
    static #o(a133, a134, a135) {
        [this,a135,...v2,this,a133];
        v19 >>> this;
        function F138(a140, a141, a142, a143) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a142;
            } catch(e144) {
            }
            try {
                this.b = this;
            } catch(e145) {
            }
        }
        new F138("getUTCMonth", v2, a135, "I9r");
        new F138(a134, "getUTCMonth", v2, "u");
        new F138("getUTCMonth", v23, v2, "getUTCMonth");
        return a134;
    }
}
C28.name = C28;
new C28();
const t146 = "u";
const v150 = new t146();
try { v150.m(v1, v1, v1); } catch (e) {}
const v152 = new C28();
const v153 = v152?.constructor;
try { new v153(); } catch (e) {}
try { ("Xkz0W").italics(); } catch (e) {}
class C157 {
    static #d;
    set b(a159) {
        Symbol.search;
    }
    static ["Xkz0W"] = "Xkz0W";
    8;
    d;
}
const v162 = C157?.apply;
try { new v162("getUTCMonth", v1); } catch (e) {}
const v164 = new C157();
v164[8] = v164;
const v165 = new C157();
const v166 = new C157();
class C167 extends C157 {
    n(a169, a170) {
        v166[10] = v164;
        SharedArrayBuffer();
        Float64Array(10);
    }
}
const v176 = new C167();
v176[8] = v176;
new C167();
new C167();
const v179 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v179(v165); } catch (e) {}
class C211 {
}
function F212(a214, a215, a216) {
    if (!new.target) { throw 'must be called with new'; }
    a214 - a214;
    a215 == a215;
    5 >>> a214;
    a215 - a215;
    const v221 = v150.constructor;
    try { new v221(a216, C211); } catch (e) {}
    a214 % a214;
}
new F212(F212);
new F212(820, 121);
