class C3 {
    constructor(a5) {
        function f6(a7) {
            return "indexOf";
        }
        a5.toString = f6;
        try { this.constructor(this); } catch (e) {}
        a5 | a5;
        const v13 = this[this];
        let v14;
        try { v14 = v13(); } catch (e) {}
        try { v14(0.7351136748708499, v13, v14, 0.80691070543188, 544.471098550566); } catch (e) {}
    }
    static 107 = 544.471098550566;
    static o(a17) {
        let v18;
        try {
        const t0 = 0.80691070543188;
        v18 = t0();
        } catch (e) {}
        v18 /= 544.471098550566;
        try {
            super.trunc(544.471098550566, this, 544.471098550566, v18, 0.7351136748708499);
        } catch(e20) {
        }
        return v18;
    }
}
function f21(a22, a23) {
    Math.max(4294967297);
    Math.log10(268435440);
    0.23816200109958707 && 4294967297;
    ~0.23816200109958707;
    return 0.7351136748708499;
}
C3[Symbol.toPrimitive] = f21;
const v34 = new C3(544.471098550566);
function f35(a36) {
    Object.defineProperty(C3, 8, { configurable: true, set: f21 });
    const v40 = 257 || 257;
    Math.floor(257);
    Math.log10(257);
    -(257 - a36);
    v40 / 257;
    return v40;
}
v34[Symbol.toPrimitive] = f35;
const v48 = v34?.constructor;
try { new v48(0.7351136748708499); } catch (e) {}
const v50 = new C3(C3);
const v51 = new C3(v34);
const v52 = [v50,v34];
[C3,544.471098550566,v34,0.80691070543188,v34];
[v51,0.80691070543188,v50,v50];
class C55 extends C3 {
    static get c() {
        this[1457] <<= 544.471098550566;
        Object.defineProperty(v52, 6, { writable: true, configurable: true, value: this });
        return `5NcQ4${v51}642627809${this}-15${0.7351136748708499}Q7t`;
    }
    #m(a59, a60, a61, a62) {
        const o65 = {
            "maxByteLength": 268435456,
        };
        const v67 = new ArrayBuffer(257, o65);
        const v69 = new Int32Array(v67);
        return v69;
    }
}
try { C55.toString(); } catch (e) {}
const v71 = new C55();
v71.constructor = Symbol;
const v72 = v71?.constructor;
try { new v72(); } catch (e) {}
const v74 = new C55();
function f75(a76) {
    function f77() {
        return f77;
    }
    const v78 = f77();
    function F79(a81, a82) {
        if (!new.target) { throw 'must be called with new'; }
        const v83 = f77.constructor;
        try { v83(this, v78); } catch (e) {}
    }
    new F79();
    return F79;
}
v74.constructor = f75;
const v86 = v74?.constructor;
try { new v86(); } catch (e) {}
const v88 = new C55();
class C89 {
}
const v90 = new C89();
try { v90.isPrototypeOf(v88); } catch (e) {}
function f92(a93, a94) {
    a93.toString = f92;
    a94.constructor = Symbol;
    try { a94.constructor(C89, a93); } catch (e) {}
    function f96() {
        return f92;
    }
    class C97 extends f96 {
    }
    class C98 extends C97 {
    }
    function f99(a100, a101, a102, a103) {
        try { a100(C98); } catch (e) {}
        let v105 = a101 & a101;
        v105 % v105;
        new Map();
        -(v105++);
        const o114 = {
            n(a112, a113) {
                return this;
            },
        };
        return v90;
    }
    f99.length;
    for (let v116 = 0; v116 < 500; v116++) {
        f99();
    }
    return C89;
}
Object.defineProperty(f92, "toString", { writable: true, value: f35 });
f92.constructor = Symbol;
Object.defineProperty(v90, "constructor", { value: f92 });
const v118 = v90.constructor;
v118.length = v118;
v118(v118, v90);
