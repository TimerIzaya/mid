const v1 = new Set();
const v3 = new Set();
function f4() {
    return v1;
}
class C5 extends Set {
    [v1];
    static valueOf(a7, a8) {
        let v9;
        try { v9 = this.min(v1, Set, v1, a8, Set); } catch (e) {}
        v9 << v9;
        v3[f4] = Set;
        super.forEach(a7, v1);
        return v3;
    }
    constructor(a13) {
        super(a13);
        const v14 = delete v1?.size;
        super[v14] = this;
        const v15 = [a13,v14];
        const v16 = [a13,a13,this,a13,v15];
        const v18 = [v14,v15,[v16,v3],v15];
        [this,v18,v18,a13,v18];
        [f4];
        try { v16.entries(); } catch (e) {}
        new Uint8ClampedArray(8);
        new Int16Array(128);
        new Float32Array(2656);
    }
}
const v31 = new C5(C5);
const v32 = new C5(C5);
new C5(v32);
[Set,Set,v32,v1,Set];
[v3,C5,f4];
const v36 = [Set];
function f37(a38, a39, a40, a41) {
    const o49 = {
        "a": v36,
        __proto__: a41,
        n(a43, a44, a45) {
            const o46 = {
                "apply": f4,
                "getPrototypeOf": f4,
                "has": f4,
                "ownKeys": f4,
                "preventExtensions": f4,
                "set": f4,
            };
            new Proxy(a45, o46);
            return a44;
        },
    };
    return o49;
}
f37(v32, f37(v3, v32, v36, v32), v36, v31);
f37(v32, v31, v36, v3);
const v54 = new Int8Array();
v54.buffer.slice(2147483648);
