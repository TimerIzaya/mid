[16,65063,129];
[-1774508493,-5,1024,-1026572511,0];
for (let v3 = 0; v3 < 25; v3++) {
    function f4(a5, a6, a7, a8) {
        return -261.99102172609366;
    }
}
const v12 = [-45359,17850,127,3,268435456];
function f13(a14) {
    var a = a14;
    720972705n | 720972705n;
    return -261.99102172609366;
}
v12[Symbol.toPrimitive] = f13;
const o21 = {
    [v12]: v12,
};
const v22 = [];
function f23() {
    return v22;
}
function f24() {
    f23();
    256 << -65535;
    return -261.99102172609366;
}
f23.toString = f24;
const o52 = {
    valueOf(a39, a40) {
        const v41 = (a42, a43, a44, a45) => {
            function F46(a48, a49, a50, a51) {
                if (!new.target) { throw 'must be called with new'; }
            }
            return Int8Array;
        };
        return 155;
    },
};
let v53 = new Uint8ClampedArray(256);
function f54() {
    return [Int8Array];
}
f54.valueOf = Symbol;
v53.valueOf = f54;
Uint8Array.e = Int8Array;
Uint8Array.e = Uint8Array;
const v58 = 10 - 10;
let v59 = BigUint64Array;
class C60 {
    static c = 256;
    static e;
    constructor(a62, a63, a64) {
        const v65 = this?.constructor;
        try { new v65(v58, a63, C60); } catch (e) {}
        a62 % a62;
        let v68;
        try { v68 = a63.indexOf(Uint8Array); } catch (e) {}
        v68 << v68;
        a64 + a64;
        try { Math.expm1(v22); } catch (e) {}
        try { Math.sign(f23); } catch (e) {}
        let v75 = 1073741824;
        const v76 = v75--;
        v76 | v76;
        let v78 = --v53;
        v78--;
        v78--;
        let v81 = ~Infinity;
        const v82 = v81--;
        v82 + v82;
        --v75;
        -Infinity;
        v81++;
        --v59;
    }
}
new Uint16Array(10);
o21[6];
const v92 = new Int16Array();
const v95 = new Int16Array(8);
async function f96(a97, a98, a99) {
    delete v95[-261.99102172609366];
    v92[0];
    const v102 = v92[1];
    let [,,...v103] = v92;
    await v102;
}
new Uint8ClampedArray(739);
v12 <= f54;
f23()[f23];
new BigInt64Array(2);
function F117(a119) {
    if (!new.target) { throw 'must be called with new'; }
    const v121 = this.constructor.bind(F117, F117, F117, F117);
    try { v121(); } catch (e) {}
    try { new a119(); } catch (e) {}
}
([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
function f128(a129, a130, a131, a132) {
    return arguments;
}
("c").charAt(-4294967295).toUpperCase();
