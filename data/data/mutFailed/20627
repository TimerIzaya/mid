const v0 = [16,2147483649,-59154,12256,-65537,60551,536870887,-1885954424,-18717];
[536870887,-1026255765,12165,2147483649,3,-46004,-16,8];
const v2 = [-65537,-2144736766,2147483648];
function f3() {
    return v2;
}
const v6 = new Int16Array();
const v9 = new BigUint64Array(2, 256);
let v10 = "fill";
const v11 = v6[v10](v9, 256, 2);
for (let i13 = 0; i13 < 10; i13++) {
    /a(?=bbb|bb)c/gvims;
    /otj/gvim;
    /a{0}/gumsy;
}
const v25 = [1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691];
const v26 = v25.pop;
let v27;
try { v27 = v26(v25); } catch (e) {}
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this.constructor;
    let v33;
    try { v33 = new v32(F28, v32, F28, F28); } catch (e) {}
    const v35 = v33 >>> 38445;
    38445 >> v33;
    let v37 = v35 * v35;
    v37--;
}
new F28(F28, F28);
[2.2250738585072014e-308,6.426513725151445,1.7337742120688803e+308];
[-2.0,-822678.0797735376,-1.8931827505405643,1000000000000.0,-312.21615291918386,0.63616168021895,-498.25959187847957,-5.575552150086596];
function f46(a47, a48, a49) {
    const o50 = {
        "toPrimitive": a49,
    };
    return o50;
}
const v51 = f46(-3.9870582640049523, -3.9870582640049523, 1000000.0);
v51.h = v51;
f46(-3.9870582640049523, -2.2250738585072014e-308, -3.9870582640049523);
v51[127] = -3.9870582640049523;
[2.0,-1000000000000.0,1.7976931348623157e+308,1.5905118405904591e+308,489.0765196653979,2.2250738585072014e-308,32271.307476398768,-1.4996853534492494e+308];
for (let v55 = 0; v55 < 25; v55++) {
}
function f56() {
}
if (v11 != v27) {
    --v10;
} else {
    delete v25[v9];
}
async function* f60(a61, a62) {
    return a61;
}
function f63(a64, a65) {
    Reflect.construct(f3, [], v27);
    return a64;
}
f63(v10, v25);
const v73 = [601759695];
([Reflect,Reflect])[1];
const v77 = [601759695];
const v78 = [1073741824,1073741823,1376142744,1073741825];
function f79(a80, a81) {
    return a80;
}
f79(v78, BigUint64Array);
try { v78["find"](..."find", f60, ...v77, ...v78); } catch (e) {}
v0[0] = v73;
const v85 = [-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity];
v85.includes(...v85);
