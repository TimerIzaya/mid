const v0 = [];
function f1() {
    const o2 = {
        __proto__: v0,
        [v0]: v0,
        ...v0,
        "e": v0,
        "d": v0,
        3: v0,
        "h": v0,
        ...v0,
        ...v0,
        ...v0,
        2: v0,
    };
    return o2;
}
const v3 = f1();
const v4 = f1();
const v5 = f1();
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a8;
    } catch(e10) {
    }
    try {
        this.f = v5;
    } catch(e11) {
    }
}
let v12 = new F6(v5, F6);
const v13 = new F6(v5, v12);
const v14 = new F6(v3, F6);
function f15() {
    return v4;
}
class C16 extends F6 {
    constructor(a18, a19, a20) {
        super(a18, a20);
        let v21;
        try { v21 = v14.setUint8(v3); } catch (e) {}
        function F22(a24, a25) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a20;
            } catch(e26) {
            }
            try {
                this.b = v14;
            } catch(e27) {
            }
        }
        new F22(v14, v14);
        new F22(v14, this);
        new F22(v21, this);
        try {
            this.__proto__ = a18;
        } catch(e31) {
        }
    }
    [v0] = f15;
    #b = v12;
    [v13] = v4;
    static #f;
}
const v32 = new C16(C16, v14, v12);
const v33 = new C16(v4, v32, v12);
const v34 = new C16(v3, v13, v33);
v33 / v13;
v14.c;
try {
    new f15();
} catch(e41) {
}
v33[Symbol.replace] = v13;
new f1();
const o46 = {
    __proto__: v12,
};
Object.defineProperty(o46, v34, { enumerable: true, get: f15 });
v13[v12];
const v48 = new v3(6);
let v49 = 12;
const v50 = v49--;
const v52 = new Int8Array(v49);
for (const v55 of v48) {
    break;
    v12 /= v14;
    try {
        new F6(false, false);
    } catch(e58) {
    }
}
try { new Uint8Array("GItt", v49, Uint8Array); } catch (e) {}
const v60 = new Uint8Array(135);
let v62 = 10;
v62--;
for (const v65 of v52) {
    v65 || v65;
}
new BigUint64Array(v62);
try { new Float64Array(v60, Float64Array, "g"); } catch (e) {}
new Int8Array(v50);
for (const v75 in "GItt") {
    new Float64Array(2147483647);
    /TI\u{12345}\u{23456}ab|c/uim;
    const v78 = /k/vdis;
    v78.a = v78;
}
const v80 = /a\sHa*?/v?.toString;
try { new v80(); } catch (e) {}
/(?:ab)|cde/gvis;
