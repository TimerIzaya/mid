function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        typeof F0 === "boolean";
        return F0;
    }
    this.toString = f2;
    try {
        this.c = -5821;
    } catch(e7) {
    }
    try {
        this.b = -5821;
    } catch(e8) {
    }
}
const v9 = new F0();
const v10 = new F0();
const v11 = new F0();
function f12(a13) {
    Array[8] = this;
    Array.__proto__ = this;
    return this;
}
v11[Symbol.toPrimitive] = f12;
[7,-1637483365,3,257658766,8,-306787425,-9007199254740991];
const v20 = [11,97066328];
const v21 = [10000,647750547,-1073741824,0,257,1838028,65006];
new BigUint64Array(729);
new Uint8Array(217);
const v30 = new Uint16Array(32);
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        for (let i39 = 0; i39 < 6; i39++) {
            v9[BigUint64Array] = v30;
            try { v10.setUTCMonth(i39, v11); } catch (e) {}
        }
        this.a = "Rh";
    } catch(e46) {
    }
    try {
        v21.__proto__ = v20;
    } catch(e47) {
    }
    ~v11;
}
let v49 = new F34("m", "Rh");
const v50 = new F34();
function f51(a52, a53) {
    const v54 = [155533.8602852358,2.0];
    v54[658291203] = a52;
    for (const v56 of v20) {
        v54[658291203] = null;
    }
    return "Rh";
}
v50[Symbol.toPrimitive] = f51;
v49 = v50;
v49[536870887] = "jP";
v49[v49] = "jP";
const v62 = new Uint32Array();
const o99 = {
    o(a64) {
        function f65(a66) {
            -10 ^ -10;
            return this;
        }
        a64.toString = f65;
        const v69 = delete v62[5];
        const v70 = new Uint8ClampedArray();
        function f71(a72, a73) {
            v50[536870888] = f65;
            const o76 = {
                "maxByteLength": 10000,
            };
            new ArrayBuffer(8, o76);
            return f12;
        }
        v70[Symbol.toPrimitive] = f71;
        function f80() {
            v20.c = Date;
            return Date;
        }
        const v83 = Symbol.toPrimitive;
        try {
            const o84 = {
            };
            o84[Symbol.iterator] = Symbol;
            new Uint8ClampedArray(o84, -9523, -5);
        } catch(e90) {
        }
        v70[v83] = f80;
        v70[Symbol.toPrimitive];
        const o95 = {
        };
        o95.execution = v69;
        gc(o95);
        a64 <<= "m";
    },
};
o99.toString = f51;
const o101 = {
};
o101.getPrototypeOf = 217;
o101.getPrototypeOf = o101;
const v103 = new Proxy(Uint32Array, o101);
o99["o"](o99, Uint32Array, "o", "o", v103);
new BigUint64Array(1);
const t109 = Array(3398);
t109.length = 1;
