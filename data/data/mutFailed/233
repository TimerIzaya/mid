new Uint32Array(129);
let v5;
try { v5 = new Uint8Array(Uint8Array, Uint8Array, 129); } catch (e) {}
const v6 = new v5(8);
v6[1] = v6;
const v9 = new BigUint64Array(3844);
function f10(a11, a12) {
    v9.byteOffset <<= 8;
    a11?.[0];
    return a12;
}
v9.toString = f10;
/[\xe2\x81\xa3]/vis;
const v15 = /o(\xed\xb0\x80)\x01/gudims;
v15[v5.toPrimitive] = f10;
v15.dotAll = 8;
const v18 = /(xyz{93})/gusy;
try { v18.compile(v9, v15); } catch (e) {}
const v22 = new Uint8Array(481);
v22.indexOf(Uint8Array, 481);
const v3 = [12];
const v4 = [-7];
([-53853,v3])[1];
class C10 {
    2147483647;
    static set c(a12) {
        const v13 = [a12];
        [v13,this];
        const v15 = [12,v13];
        try {
            super.slice(v15);
        } catch(e17) {
        }
    }
    static ["subarray"];
    static e;
    static #a = v3;
    512;
}
const v18 = new C10();
new C10();
const v20 = new v18();
v20[512];
class C22 extends C10 {
    ["valueOf"] = v18;
    129 = v4;
    m(a24, a25, a26) {
        try {
            super[a26] = this;
        } catch(e27) {
        }
        typeof -7 === "symbol";
        return a25;
    }
    static [-53853] = -7;
    d;
}
let v31;
try { v31 = C22(); } catch (e) {}
new C22();
new v31();
const v34 = new C22();
v34.d = v34;
function f36(a37, a38) {
    const o39 = {
        268435456: a37,
    };
    o39[268435456] = o39;
    return o39;
}
v18 != f36()[268435456];
