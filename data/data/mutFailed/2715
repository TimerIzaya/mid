let v2 = 1073741824;
const v3 = [253466.70007617283,-1000.0,-1.965958571723661,0.3100171809979866];
try { v3.toString(); } catch (e) {}
v3.length;
const v6 = v3[10];
const v7 = v6?.[5];
const v11 = [-184955.0058023528,1.895999984664165,1000000.0,-1000000.0,8.071087240288652,1000.0,-1000.0,0.03399044328853584];
let v12;
try { v12 = v11.map(4); } catch (e) {}
const v13 = [1000000000000.0];
let v14;
try { v14 = v3.shift(); } catch (e) {}
try { v7("-542013158", v13, v12, v3, v14); } catch (e) {}
let {"length":v17,...v18} = v11;
/xyz??/iy;
const v20 = /F/gvms;
/da*?/gvims;
function F22(a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(F22); } catch (e) {}
    a24--;
    a26 + a26;
    try {
        this.d = a26;
        try {
            v7.h = F22;
        } catch(e30) {
        }
        let v31 = a25 >> a26;
        v31--;
    } catch(e33) {
    }
    try {
        this.g = a25;
    } catch(e34) {
    }
}
let v35 = new F22(v2, -1073741824, -1073741824);
new F22(v2, 4, v2);
new F22(-1073741824, -1073741824, v2);
class C38 {
    static #n(a40, a41) {
        [,...v35] = v3;
        try {
            v6.valueOf = v35;
        } catch(e44) {
        }
        let [v46] = v13;
        return a40;
    }
    toString(a48, a49) {
        super.f = v3;
        return;
        a49 ^= this;
        try {
            new F22(974389067, 974389067, -1073741824);
        } catch(e52) {
        }
        return v2;
    }
}
new C38();
new C38();
new C38();
6 & 6;
v11 + v12;
[v2] = "-542013158";
v13 / BigInt(F22, v20, v20, v13 / Float64Array);
try {
} catch(e67) {
} finally {
}
