class C3 {
    #toString(a5) {
        new Set();
        const v8 = ("charCodeAt").length;
        try {
            super.copyWithin(this, 1073741824, v8);
        } catch(e10) {
        }
        return this;
    }
    static #h;
    static 268435456 = 1073741824;
    constructor(a12, a13, a14, a15) {
        super(a12);
    }
    static #e = "charCodeAt";
    set g(a17) {
        const t17 = 1073741824;
        super.d = t17();
    }
}
C3[268435456] = C3;
const v19 = C3[268435456];
v19 > v19;
const v21 = new C3();
const v22 = v21?.constructor;
try { new v22(); } catch (e) {}
const v24 = new C3();
const v25 = v24?.constructor;
"e" < "e";
([]).entries;
function f30() {
    return -9007199254740992n;
}
f30();
%OptimizeFunctionOnNextCall(f30);
try { new v25(); } catch (e) {}
const v33 = v24?.constructor;
function f34() {
    const o42 = {
        "d": 268435440,
        "a": 4.0,
        __proto__: "cJ",
        "f": "cJ",
        ..."cJ",
        8: f34,
        "g": 268435440,
        "e": f34,
        "h": "cJ",
        valueOf(a39) {
            const o40 = {
                __proto__: this,
                2261555780: "cJ",
            };
            super.a;
            return this;
        },
        "c": "cJ",
    };
}
let v43;
try { v43 = new v33(); } catch (e) {}
const v44 = v43?.constructor;
try { new v44(); } catch (e) {}
const v46 = new C3();
const v47 = v46?.constructor;
v47.length = v47;
const o49 = {
    ..."boolean",
};
function f50(a51, a52) {
    return a51;
}
Object.defineProperty(o49, 1, { configurable: true, get: f50 });
try { new v47(); } catch (e) {}
const v54 = [-536870912];
try { v54.copyWithin(v21, v46); } catch (e) {}
const v56 = [129,4294967295,-4096,127];
try { v56.findLastIndex("e"); } catch (e) {}
let v58;
try { v58 = v56.group(C3); } catch (e) {}
const v59 = [-1371902958,-4294967295,1073741825,129];
try { v59.find(v58); } catch (e) {}
try { v59.map(v59); } catch (e) {}
let v63 = 6.9397033102283885;
v63--;
function f68() {
    const o69 = {
    };
    o69.f = o69;
    return o69;
}
f68();
Uint8ClampedArray.d = Uint8ClampedArray;
const v71 = new Uint8ClampedArray(1000);
v71.includes(undefined);
