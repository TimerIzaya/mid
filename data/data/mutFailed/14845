new BigInt64Array(64);
new Uint8ClampedArray(7);
function f11() {
    return f11;
}
const o12 = {
    __proto__: f11,
    "e": f11,
};
new Float32Array(64);
class C14 extends Uint8ClampedArray {
    [127] = -65536;
    m(a16, a17, a18) {
        new WeakSet();
        ([Float32Array])["concat"]();
        f11();
        return 127;
    }
    static #e = -65536;
    get f() {
        const v29 = Symbol.iterator;
        const v30 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f31() {
            return v30.length;
        }
        const o48 = {
            [v29]() {
                let v34 = 10;
                new BigUint64Array(64);
                const o39 = {
                    "execution": "async",
                };
                const o47 = {
                    "f": 7,
                    "h": 64,
                    set b(a41) {
                    },
                    __proto__: v30,
                    next() {
                        v34--;
                        const v45 = v34 == 0;
                        const o46 = {
                            "done": v45,
                            "value": v34,
                        };
                        return o46;
                    },
                };
                return o47;
            },
        };
        return o48;
    }
}
new C14();
new C14();
function f51(a52, a53) {
    function f54(a55, a56) {
        a56?.__lookupGetter__;
        a56?.constructor;
        return f54;
    }
    f54(f54, a52);
    %OptimizeFunctionOnNextCall(f54);
    return f51;
}
f51();
new C14();
Math.atan(5.134563044869008e+307);
