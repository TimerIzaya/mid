function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -9007199254740990;
    } catch(e3) {
    }
    try {
        this.b = -9007199254740990;
    } catch(e4) {
    }
    try {
        this.f = -9007199254740990;
    } catch(e5) {
    }
}
let v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 {
    n(a11, a12) {
        return a12;
    }
    static [F0];
    static #a = v8;
    static #valueOf(a17, a18) {
        v6 = a18;
        const v19 = this / a17;
        a18 >> v19;
        try {
            v6.#valueOf();
        } catch(e22) {
        }
        return v19;
    }
}
const v23 = new C9();
new C9();
const v25 = new C9();
[v7,v25,[[v8,v6,F0,F0]]];
class C29 extends F0 {
    p(a31, a32, a33) {
        function f34(a35, a36, a37) {
            let v38;
            try { v38 = v23(); } catch (e) {}
            a35 === v38;
            const o42 = {
                "maxByteLength": 2027,
            };
            const v44 = new ArrayBuffer(512, o42);
            new Float32Array(v44);
            return a33;
        }
        f34(a32, a33, this);
        return f34;
    }
}
new C29();
new C29();
new C29();
[-515617499,9007199254740990,1794867738,-2147483647,4,8];
[1073741824,1155028686,-4,1022797559];
class C53 {
}
[];
const v55 = [];
new Map();
function F58(a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this.constructor;
    try { new v62(); } catch (e) {}
    const o65 = {
        0: v55,
        162: "1ya",
    };
}
const v66 = new F58();
const v68 = new C53();
const v72 = new Uint8ClampedArray();
const v73 = new Int32Array(3208);
const t79 = v68.constructor;
new t79(v72);
Int32Array.from(v73);
const v77 = new F58(Map, Map);
new F58(v66, v77);
let v79 = 16;
v79--;
new Int8Array(v79);
v68.toSorted();
