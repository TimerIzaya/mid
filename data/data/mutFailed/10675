const v0 = [256,255,-16,257];
const v1 = [-41640,1918071405,64,-65537,16,129];
[268435456,7,-2,9007199254740991,-50815,-9007199254740992,965021288];
new Int8Array(0);
const v7 = 241 - 241;
function f9(a10, a11) {
    Object.defineProperty(v1, a11, { configurable: true, enumerable: true, value: a11 });
    return a11?.[v7];
}
Uint16Array[Symbol.iterator] = f9;
const v15 = new Uint16Array(241);
try { v15.filter(v0); } catch (e) {}
219 >>> 219;
try { new BigInt64Array(Uint16Array, 241, 0); } catch (e) {}
const v21 = new BigInt64Array(219);
v21[101];
1 & 1;
new Int16Array(1);
new Int16Array(12);
new Float32Array(0);
class C33 {
    static toString(a35, a36) {
        this.d = this;
        const v38 = super[a36];
        try {
            delete this[v38];
            this[C33];
        } catch(e41) {
        }
    }
}
C33.d = 219;
const v42 = new C33();
function f43(a44) {
    const v46 = new WeakMap();
    return v46;
}
v42.constructor = f43;
const v48 = new Uint8ClampedArray(v42, C33, C33);
v48[Symbol.toPrimitive] = Symbol;
function f51() {
    function f52(a53, a54) {
        const v55 = v42.constructor;
        Object.defineProperty(v55, "d", { configurable: true, value: v55 });
        try { v55(); } catch (e) {}
        return v55 + v55;
    }
    return f52;
}
Object.defineProperty(v48, "valueOf", { get: f51 });
v48[5] = v48;
