class C4 {
    constructor(a6) {
        function f7(a8, a9) {
            try { a6.n(a9, this, this, a8); } catch (e) {}
            const o11 = {
            };
            return -15574;
        }
        this.valueOf = f7;
        let v15;
        try { v15 = this.valueOf(); } catch (e) {}
        v15 >>= undefined;
    }
    static 1073741824 = -15574;
    [-5779];
    a = -15574;
}
new C4(-5779);
new C4(-4);
new C4(-5779);
class C19 extends C4 {
    #m(a21, a22, a23) {
        const v24 = [-1.0,0.40820397006218245,0.5910690252029605,-0.0,-1000000000000.0,-2.2250738585072014e-308,62293.470973746385];
        [-5.0,-1.2616377789605518e+308,1000000.0,-2.2250738585072014e-308];
        [9.059612943724595,-1000000000.0,-120383.0483784572,7.520923475864521,1000000000000.0];
        try {
            C4.b = this;
        } catch(e27) {
        }
        return v24;
    }
}
new C19();
new C19();
new C19();
function F32(a34) {
    if (!new.target) { throw 'must be called with new'; }
}
const v36 = new F32("4294967297");
const v37 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Array(19793);
        const v43 = [];
        function f44(a45) {
            try { v36.m(a45); } catch (e) {}
        }
        Object.defineProperty(v43, "p10", { writable: true, configurable: true, set: f44 });
        function f47(a48) {
            for (let v49 = 0; v49 < 32; v49++) {
                v43["p" + v49] = v49;
            }
            return 19793;
        }
        v43[Symbol.toPrimitive] = f47;
        [v43] >= Uint16Array;
    } catch(e57) {
        v37.findLastIndex;
    }
}
const v59 = new F38();
let v61;
try { v61 = Set.bind(v36); } catch (e) {}
new Set();
1000 - 1000;
function f66() {
    v37[1] %= v61;
    for (let i = 0; i < 25; i++) {
        new Uint8ClampedArray(129);
    }
    return -4;
}
Uint8Array.toString = f66;
const v75 = new Uint8Array(1000);
const v79 = Array();
try { v79.findLast(v79); } catch (e) {}
const v83 = Array(1000);
let v84;
try { v84 = v83.push(1000); } catch (e) {}
const v85 = new BigUint64Array(257);
v85.d = BigUint64Array;
const v86 = Uint8Array in v85;
v86 && v86;
try {
    for (let v89 = 0; v89 < 100; v89++) {
        Array(v84);
    }
    v85.d = v75;
} catch(e91) {
}
Float32Array.constructor = f66;
const v94 = new Float32Array(4);
function f95() {
    return Array;
}
function f96(a97) {
    var c = 1000;
}
Object.defineProperty(v94, Symbol.toPrimitive, { enumerable: true, get: f95, set: f96 });
v94.toString = f66;
v94[3] = v94;
~4096;
Uint8Array.e = v59;
Uint8Array.e = v59;
Uint8Array.name;
Uint8Array.e = Uint8Array;
function f106() {
    return Array;
}
Object.defineProperty(Float32Array, "constructor", { configurable: true, enumerable: true, get: f106 });
const v107 = Float32Array?.constructor;
try { new v107(v83); } catch (e) {}
Float32Array.name?.toLocaleUpperCase;
function f112() {
    return f112;
}
let v113 = -2n;
v113--;
function f116() {
    return 536870887n;
}
try { f116(); } catch (e) {}
let v118;
try { v118 = f116(); } catch (e) {}
v118 * v118;
let v120 = 2;
v120++;
Map.prototype;
Uint8Array.prototype = Uint8Array;
function F127() {
    if (!new.target) { throw 'must be called with new'; }
    const v130 = Date();
    try { v130.small(); } catch (e) {}
    for (const v135 of Array(19793)) {
    }
    try {
    } catch(e136) {
    }
}
const v137 = new F127();
v137.constructor = Array;
const v138 = v137?.constructor;
try { new v138(); } catch (e) {}
function F140(a142, a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
    for (let i147 = 0, i148 = 10;
        (() => {
            const v149 = i147 < i148;
            const v150 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
            try {
            } catch(e151) {
            }
            const v152 = v150.toSpliced();
            v152[3] = v152;
            return v149;
        })();
        ) {
    }
}
for (const v161 of Array(4087)) {
}
class C162 {
    constructor(a164) {
        try {
        } catch(e165) {
        }
        try {
        } catch(e166) {
            class C167 extends Map {
            }
        }
        for (const v168 of "bigint") {
        }
    }
}
C162.toString = f112;
const v169 = C162?.toString;
try { new v169(); } catch (e) {}
class C171 extends C162 {
}
const o172 = {
};
