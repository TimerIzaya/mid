const v3 = Array(11);
v3.length |= 113;
const v7 = new Int16Array(255);
new BigInt64Array();
class C11 {
}
class C12 extends C11 {
}
const v13 = new C12();
const v16 = new Uint8Array(2);
let v17;
try {
const t0 = 3;
v17 = t0(BigInt64Array, v3, v13);
} catch (e) {}
const o21 = {
    ...v16,
    n(a19, a20) {
        return v17;
    },
};
o21[1] = o21;
Uint16Array[Symbol.iterator] = Array;
new Uint16Array(3);
Uint16Array[Symbol.iterator] = Symbol;
new Uint16Array(Uint16Array);
function f30(a31, a32, a33, a34) {
    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
        length | length;
    }
    new Int8Array();
    const v40 = new Int8Array();
    for (const v41 in v40) {
    }
    function F42(a44) {
        if (!new.target) { throw 'must be called with new'; }
        const v45 = this.b;
        try { v45(v40); } catch (e) {}
    }
    new F42();
}
class C50 extends Float64Array {
}
function f51() {
    return f51;
}
const v52 = f51.arguments;
function f53() {
    for (let v54 = 0; v54 < 5; v54++) {
        Array(36862, v52, v54 & v54);
    }
    return f51;
}
const v59 = new Float64Array(15);
[v59,Float64Array];
[Float64Array];
const v62 = [v7];
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = true;
}
const v66 = new F64();
function f67(a68, a69) {
    const o84 = {
        ...a69,
        get h() {
            return v7;
        },
        ...v3,
        "e": Uint16Array,
        toString(a72, a73, a74) {
            let v75;
            try { v75 = this.toString(a73, Array, a72); } catch (e) {}
            function f77(a78, a79, a80) {
                return C11 == v62 ? C11 : v62;
            }
            f77(255n, v75);
            a68[C12] = a68;
            return Array;
        },
    };
    return o84;
}
f67();
f67(v66, v66);
