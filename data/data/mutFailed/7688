new Int32Array(7);
let v3 = 4;
v3--;
try { new Int32Array(Int32Array, Int32Array, 7); } catch (e) {}
new Int32Array(v3);
-12;
function F12() {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this?.propertyIsEnumerable;
    try { new v14(-30326n); } catch (e) {}
    this.a = this;
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e18) {
    }
}
let v19 = new Int16Array(12);
class C20 extends Int32Array {
    static {
        try { new this(); } catch (e) {}
        v19 = this;
        v19[9] = Int16Array;
        this[this];
        function F27(a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            const v31 = this.constructor;
            try { new v31(a30); } catch (e) {}
            a30 == a30;
            a29 !== a29;
            this.g = a30;
        }
    }
    e = Int16Array;
    h;
    [-30326n] = -30326n;
    constructor(a36, a37) {
        const v38 = this.constructor;
        try { new v38(); } catch (e) {}
        const v41 = Math.atan2(this);
        v41 ** v41;
    }
}
C20[9];
const v44 = new C20();
try { v44.constructor(); } catch (e) {}
new C20();
new C20();
try {
    const o51 = {
        "type": "function",
    };
    Date.prototype;
    139837843 in "deleteProperty";
} catch(e55) {
}
