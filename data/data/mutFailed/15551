-1000 ** 0.544190430081408;
function f10() {
    return f10;
}
function f11() {
    return f10 == f11;
}
16n ^ 16n;
let v15 = 10646n;
v15--;
329329729 - 329329729;
-12;
const v23 = [12,16n,12,-9007199254740992n,12];
[12,7.183506719232078,v23,v23];
[-1e-15,v23,3078,7.183506719232078,v23];
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
1000000.0 % 1000000.0;
536870887 % 536870887;
const v36 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
try { v36.lastIndexOf(v15); } catch (e) {}
-37370 & -37370;
new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v48 = new Uint8Array();
gc();
const v52 = 110 <= 110;
v52 && v52;
let v54 = 110 + 110;
v54++;
let v57;
try { v57 = new Int8Array(); } catch (e) {}
const v58 = v57?.toString;
try { new v58(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const v62 = new Date();
const v63 = v62.getUTCDay();
v63 >>> v63;
let v65 = 127;
v65 >> v65;
v65++;
function f68(a69, a70) {
    a70.length = a70;
    try { a69(f68); } catch (e) {}
    try { a69(BigInt64Array); } catch (e) {}
    a70.constructor(a70);
    return f68;
}
try { Promise.resolve(1354389810); } catch (e) {}
try { new Promise(4096); } catch (e) {}
const v77 = new Promise(f68, Uint8Array);
try { v77.then(v23, 16n); } catch (e) {}
let v79;
try { v79 = v77.then(); } catch (e) {}
let v80;
try { v80 = v79.then(v36, v48); } catch (e) {}
try { v80.finally(-1.5264047652530307e+308); } catch (e) {}
Uint8Array.length = Uint8Array;
const v83 = new Uint8Array(v65);
try { v83.reduce(v57); } catch (e) {}
function f85(a86, a87) {
    const o88 = {
    };
    o88.a = o88;
    o88.g = o88;
    return o88;
}
let v89;
try { v89 = f85(v77, v77); } catch (e) {}
v89.g = v89;
v89.g;
f85.arguments = f85;
for (let v91 = 0; v91 < 25; v91++) {
    v91 - v91;
    const v93 = f85();
    v93.g = v93;
    v93.d = v93;
    Object.defineProperty(v93, v91, { enumerable: true, get: f85, set: f85 });
    Uint16Array.prototype = Uint16Array;
    8 - 8;
    const v98 = new Int8Array(8);
    try { Reflect.construct(v98, v91); } catch (e) {}
    try { Reflect.preventExtensions(v93); } catch (e) {}
    const v103 = new BigInt64Array();
    const o104 = {
        __proto__: v103,
    };
    try { o104.indexOf(); } catch (e) {}
    const v106 = [v98];
    v106.b = v106;
    Reflect.construct(Uint16Array, v106);
    v83[v93] = v93;
    gc.name = gc;
    const v110 = ("sync")?.italics;
    try { new v110(); } catch (e) {}
    !("sync" == "sync");
    const o120 = {
        "execution": "sync",
        "a": -1e-15,
        valueOf(a115, a116, a117, a118) {
            const o119 = {
                [Uint8Array]: "sync",
            };
            return Uint8Array;
        },
    };
    gc(o120);
}
