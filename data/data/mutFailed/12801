function f0() {
}
function f1() {
    const o12 = {
        "b": f0,
        "h": f0,
        [f0]: f0,
        __proto__: f0,
        536870888: f0,
        "g": f0,
        "c": f0,
        "a": f0,
        get d() {
            this[this] >>>= this;
            class C3 extends f1 {
                [this];
                static 66 = this;
            }
            new C3();
            new C3();
            new C3();
            try {
                new f0();
            } catch(e8) {
            }
            const v10 = Symbol.replace;
            this[v10] = f0;
            try {
                v10.description = f1;
            } catch(e11) {
            }
            return this;
        },
    };
    return o12;
}
const v13 = f1();
const v14 = f1();
v14[536870888] = v14;
const v15 = f1();
v15[536870888] = v15;
function F16(a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(this); } catch (e) {}
    try {
        this.h = a18;
    } catch(e21) {
    }
}
const v22 = new F16(v14);
new F16(v22);
const v24 = new F16(v13);
v24.e = v24;
[-536870912,-51256,4294967296,-19518];
const v26 = [1073741824,-21216134,752973794,257,1839853727,-1576711674,1738059493,2116739039,-582607837];
const v27 = [536870888,10,-53782,-2147483647];
let v28;
try { v28 = v27.slice(v27, F16); } catch (e) {}
const v30 = [8,-38284,-33133,64,7,9007199254740992];
const v31 = [];
const v32 = /((((.).).).)?/gvdimy;
const v33 = /C/gudm;
const v34 = /w/gmy;
v34.b = v34;
Object.defineProperty(v33, "dotAll", { writable: true, get: f1, set: f0 });
let v37;
try { v37 = v31.pop(); } catch (e) {}
f1 << v15;
v37--;
v26[5];
let v41;
try { v41 = Uint32Array(Uint32Array, 1391, v32); } catch (e) {}
new Uint32Array(1391);
for (let i45 = 0; i45 < 6; i45++) {
    try {
        [[v30],v37];
        [v28,i45,v27];
        continue;
        v33.dotAll = v41;
    } catch(e55) {
    }
}
const v56 = ~3398;
Uint32Array.name = v34;
const v58 = new Uint32Array(3398);
let v60 = 255 * 255;
v60 += v56;
const v62 = v31[1];
try {
    v58.forEach(v62, v62);
} catch(e65) {
}
const v76 = [-4294967296,64,268435440];
try { v76.splice(v15, f0); } catch (e) {}
[393780632,10,536870889,-65537,-2147483647,-15,27638,-9223372036854775808];
const v81 = Array(6);
const v82 = [1825031854,1506666665,0,6,536870887,-128,1];
const o83 = {
    __proto__: v81,
};
try { o83.findLast(v82); } catch (e) {}
class C85 {
    static [o83] = v82;
}
new Float32Array(15);
new Int16Array(2);
new Float64Array(4089);
try { new C85(); } catch (e) {}
