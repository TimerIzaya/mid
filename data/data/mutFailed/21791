const v2 = new Int16Array(1728);
const v4 = 127 * 127;
try { Uint8Array.bind(v2); } catch (e) {}
const v7 = new Uint8Array(127);
const v8 = v7[49];
v8 >> v8;
12 >>> 12;
let v13;
try { v13 = Int8Array.of(); } catch (e) {}
let v14;
try { v14 = v13.entries(); } catch (e) {}
const v15 = new Int8Array(12);
class C16 {
    static #g = 127;
    f;
    #valueOf(a18, a19, a20) {
        try {
            v15.__proto__ = a20;
        } catch(e21) {
        }
        return a19;
    }
    #a = 12;
    c;
    g;
}
const v22 = C16.prototype;
new C16();
const v24 = new C16();
const v25 = new C16();
v25.g = v25;
class C26 {
}
try { new C26(); } catch (e) {}
try { C26.call(v24); } catch (e) {}
function f29(a30, a31, a32, a33) {
    1269 >>> 1269;
    for (let v36 = 0; v36 < 100; v36++) {
        f29(a32, v4, Int8Array, v14);
    }
    try {
        const o41 = {
        };
        f29(undefined, "35950", o41, f29);
    } catch(e43) {
    }
    const v45 = new Int16Array(1269);
    v45[50];
    function F47(a49, a50, a51, a52) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.propertyIsEnumerable(a50); } catch (e) {}
    }
    const v54 = new F47();
    const v55 = v54?.constructor;
    try { new v55(12, 12, F47, v22); } catch (e) {}
    let v57;
    try { v57 = C26.n(f29, a30); } catch (e) {}
    for (const v58 in v45) {
    }
    return v57;
}
try { f29(f29, f29, Int8Array, f29); } catch (e) {}
f29();
f29();
f29();
