function f0() {
    const o8 = {
        ..."indexOf",
        [-65535]: "indexOf",
        "e": 2.900405405992294e+307,
        30: "indexOf",
        "b": "indexOf",
        get e() {
            super[this] = 2.900405405992294e+307;
            try {
                this.fuck(undefined, undefined, undefined, 2.900405405992294e+307);
            } catch(e7) {
            }
            return "indexOf";
        },
    };
    return o8;
}
const v9 = f0();
f0();
f0();
const v12 = [6];
const v13 = [-1];
const v14 = [-14,65536,536870912,-54906,-1979601921,-9223372036854775807];
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a17;
    } catch(e19) {
    }
    try {
        this.f = a17;
    } catch(e20) {
    }
    try {
        this.h = v14;
    } catch(e21) {
    }
}
new F15(v14, v13, v14, F15, v9);
new F15(v12, v13);
new F15(v12, v13);
function f25() {
    const o30 = {
        8: 0.043152456200264866,
        get a() {
            Map.acos(0.043152456200264866);
        },
    };
    return o30;
}
const v31 = f25();
const v32 = f25();
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 257;
    this.h = a37;
}
const v40 = new F34(v32, v31, v14);
function f42(a43, a44, a45) {
    function f47(a48) {
    }
    a43[1] = a45;
}
const v51 = [v40];
const o52 = {
    "arguments": v51,
    "type": "function",
};
new Worker(f42, o52);
