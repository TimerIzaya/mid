try {
} finally {
}
const v5 = [0.40942238360349337,9.405201967735488e+306,-914.634335773701,5.134124740041841,-1.0,1000000000000.0,-5.0,-298.5783868000192,1000000.0];
const v7 = new Int32Array(v5, Int32Array, Int32Array);
Date.UTC(268435456, v7, v5);
/\xf0\x9f\x92\xa9/gusy;
/l8TXX\xf0\x9f\x92\xa9/gvdm;
/O\u0034tab\b\d\bcd[^fhFh[a(?!bbb|bb)cq?]]/gu;
const v19 = new Uint32Array();
v19[6];
const v22 = new Int16Array(-128);
class C23 {
    constructor(a25, a26, a27, a28) {
        let [v29,v30,,...v31] = v22;
        try {
            class C32 {
                #n(a34, a35, a36, a37) {
                    super[this] = this;
                }
            }
        } catch(e38) {
        }
    }
}
function f42() {
    function f43(a44) {
        return Uint8ClampedArray;
    }
    Reflect.construct(f43, [Uint8ClampedArray], Uint8ClampedArray);
    return Uint8ClampedArray;
}
f42();
const v51 = new Float32Array(Float32Array);
for (let v52 = 0; v52 < 25; v52++) {
    function f53(a54, a55, a56, a57) {
        a54[0] = a54;
        a55 <= a55;
        const v60 = arguments?.__lookupGetter__;
        try { v60(v60, f53, a55, arguments); } catch (e) {}
        try { undefined(); } catch (e) {}
        new Int8Array(v51);
        "find" == "find";
        return v51;
    }
    for (let v68 = 0; v68 < 10; v68++) {
        f53(v51, v52);
    }
}
