const v0 = [-2.0,-340288.1247584282,402523.12020139117,-1.6014667336799066e+308,59.10447183988276,0.7727360494567658,-3.0];
const v1 = [466.490935965222,-8.629107572797798];
const v4 = new BigInt64Array(255);
let v5 = 10;
v5--;
v4.length;
const o8 = {
};
const v10 = o8.constructor;
const v12 = BigInt64Array % 1922;
const v13 = v12 == v12;
for (let v14 = 0; v14 < 25; v14++) {
    function f15() {
        return f15;
    }
    function f16(a17, a18, a19, a20) {
        a20 + a20;
        function f22() {
        }
        const v24 = -f22.length;
        const v26 = f15().constructor;
        let v27;
        try { v27 = v26(); } catch (e) {}
        const o30 = {
            "maxByteLength": 1269,
        };
        const v32 = new SharedArrayBuffer(64, o30);
        new Int32Array(v32);
        const v35 = v27.bind();
        const v36 = v35.bind(v35, 1269, v10);
        v26 * v13;
        const v38 = typeof f22;
        v38.italics(v38, v24, v36);
        const v41 = v38 === "n";
        const v43 = new Int8Array();
        const v44 = v43.entries();
        v44.next(v44, a18, f15, o8);
        v44.next(1.185961373472971e+308);
        function f47() {
            return v12;
        }
        f47();
        const v49 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
        function f51(a52, a53, a54) {
            [Array,a54];
            v49.filter;
            return SharedArrayBuffer;
        }
        f51.caller = f51;
        const v59 = BigInt64Array.blink().replaceAll;
        let v60;
        try { v60 = v59(v41); } catch (e) {}
        return v60;
    }
    for (let v61 = 0; v61 < 5; v61++) {
        v61(v61, v10, v10, 1922);
    }
}
[-508303.6835335404];
-1.7976931348623157e+308 + -1.7976931348623157e+308;
const v68 = [v0,0.23755378696371365,-1.7976931348623157e+308,0.03175068784610702,0.03175068784610702];
try { v68.push(-1.7976931348623157e+308); } catch (e) {}
[v68,0.03175068784610702,v1];
[v68,0.23755378696371365,0.23755378696371365];
const v76 = new Int16Array(Int16Array, Int16Array, Int16Array);
try { v76.includes(v76); } catch (e) {}
class C78 {
}
with (C78) {
    try { ("subarray").sub(); } catch (e) {}
    const v81 = v76["subarray"]();
    v81[1];
    function f83() {
        return v81;
    }
}
