let v1 = 2.0;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    try {
        this.h = v1;
    } catch(e6) {
    }
}
const v7 = new F3(4.19917266110566);
function f8(a9, a10) {
    v1 >>>= 4.19917266110566;
    delete v7[1];
    return a10;
}
v7.toString = f8;
const v12 = new F3(-851101.1324581436);
const v13 = new F3(-851101.1324581436);
const v14 = [2.2250738585072014e-308,-1.0,0.0,4.0,353.85308771596897];
[0.6893482471016221,599.2502662170923,-1000000000000.0,2.2250738585072014e-308,1000000.0,1.7976931348623157e+308];
[9.04511276339959,1000000000.0,-Infinity];
class C17 {
    536870912 = 4.19917266110566;
    static #h;
    static 138 = v14;
    get f() {
        try {
            this.g = v13;
        } catch(e19) {
        }
        return v12[64];
    }
}
new C17();
new C17();
const t35 = 4.19917266110566;
const v23 = new t35();
v23[536870912];
function f26() {
}
const v27 = [27124,2147483649,9007199254740991];
try { v27.slice(v7, v27); } catch (e) {}
/(?:a+){0,0}u(?:a+)+a\s(a\1)abc+?/gvdm;
let v31 = undefined;
const o32 = {
};
o32.f = o32;
o32.f = o32;
v31 = o32;
try { new Int32Array(-851101.1324581436, -851101.1324581436, -851101.1324581436); } catch (e) {}
const v37 = new BigInt64Array();
const v40 = new Uint16Array(256);
const v42 = v37[205];
255 - 255;
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    function f51(a52, a53) {
        let v56 = Math.tanh("1");
        v56--;
    }
    f51();
    %OptimizeFunctionOnNextCall(f51);
    -a49;
    for (let v60 of v40) {
        -v60;
        const v62 = v60++;
        v62 - v62;
        v42?.h;
    }
}
new F45();
const t71 = 205;
const v66 = new t71(255, 256, 255);
v66.constructor = f26;
const v67 = v66?.constructor;
try { new v67(-851101.1324581436, Int32Array, v27, -851101.1324581436); } catch (e) {}
const v69 = new F45(255, 205, 256);
try { v69.constructor(v27, v69, v40, v12); } catch (e) {}
const v71 = v69.constructor;
v71.length = v71;
new v71(f26, o32);
