const v0 = [];
class C1 {
    454916003;
    static #valueOf() {
        try {
            this.#valueOf(this, v0, v0, this);
        } catch(e4) {
        }
        return v0;
    }
    p() {
        new Int8Array(6);
        const v11 = new Uint8ClampedArray(16);
        new BigInt64Array(2498);
        return v11;
    }
}
const v15 = new C1();
const v16 = new C1();
v16[Symbol.toStringTag] = C1;
const v19 = new C1();
function f20(a21) {
    const v24 = new Uint16Array(255);
    v24.buffer;
    return C1;
}
v19[Symbol.toPrimitive] = f20;
function f28(a29, a30) {
    a29[454916003];
    a30[454916003];
    const o40 = {
        [a30](a34, a35, a36) {
            delete C1[2147483648];
            v19[980907997];
            try { a36(v15, a35, v0, a29, v15); } catch (e) {}
            return v16;
        },
        "b": v16,
        268435439: v0,
        __proto__: v16,
        3: C1,
        "a": v0,
        "f": C1,
        "c": v0,
    };
    o40.toString = f28;
    return o40;
}
f28(v16, v16);
const v42 = f28(v15, v19);
v42[454916003] = v42;
const v43 = f28(v15, v42);
[v19,v43];
const v45 = [v0,v16,v16];
const v47 = ([f28,v19,v45])?.findIndex;
try { new v47(f28); } catch (e) {}
[257,-268435456,9929,3,908474310,1000,65537,5];
const v50 = [5,-6,8,-12,-1,268435456,49283,-1073741824];
const v51 = [9007199254740990,-4294967297,255,59714];
function f53() {
    v45.copyWithin(v43, v47, ...v50, Math, ...v51);
    -4294967296 >>> -4294967296;
    return v16;
}
Math.toString = f53;
try { Math.imul(v0, Math); } catch (e) {}
const v58 = Math.round();
for (let v59 = 0; v59 < 10; v59++) {
    async function f60(a61, a62, a63) {
        try { a61.round(v16); } catch (e) {}
        await v58;
        return f60;
    }
    f60.length;
    f60(Math, f60, v58);
    const o69 = {
    };
    o69.execution = v19;
    gc(o69);
}
