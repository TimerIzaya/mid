function f0() {
}
class C1 extends f0 {
    n() {
        function f3() {
            return C1;
        }
        try { this.throw(f3, this, f0); } catch (e) {}
        const v8 = f3 << 965361778;
        Math.pow(-536870912, -536870912);
        const v10 = -536870912 && 965361778;
        const v11 = f3--;
        Math.tanh(-536870912);
        v8 >>> v11;
        return ~v10;
    }
}
new C1();
const v16 = new C1();
const v17 = new C1();
class C18 {
    [v16];
    p(a20, a21) {
        v16[C1] /= this[4096].f;
        const o27 = {
            "maxByteLength": 1600116154,
        };
        const v29 = new SharedArrayBuffer(14, o27);
        new Uint8Array(v29);
        return this;
    }
}
new C18();
new v17();
new C18();
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    0.12250776379343475 ** -(-7);
}
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this.constructor;
    try { new v47(v47, F38, F43, this, v47); } catch (e) {}
    new F38();
}
new F43(F38, F38);
