function f0() {
}
let v2 = 54888;
let v3 = 268435440;
v3--;
let v5 = 49368n;
v5--;
new Map();
const v14 = [1000,5,-2,-861691532,442432927,-1347321596,-65537];
try { v14.fill(v3); } catch (e) {}
[-9007199254740992,10,4294967295,-1678890766,268435439,-65536];
function f17() {
    return f17;
}
-16 / -16;
Infinity - Infinity;
const o23 = {
    [Infinity]: -0.0,
    [9007199254740990]: Infinity,
    "h": -16,
    ...-0.0,
    "c": Infinity,
    "e": -0.0,
};
const v24 = [28658,-65536,0,2147483648,30150,-1,-1,-82644773,10000,10000];
const v27 = -4.380315352541508e+307 >> 129;
v27 === v27;
class C29 {
}
C29.prototype = C29;
const v30 = new C29();
function f31(a32, a33, a34) {
    const o42 = {
        toString(a36, a37, a38) {
            a33 < v24;
            super[v30];
            return a37;
        },
        get d() {
            return v2;
        },
    };
    return o42;
}
let v43;
try { v43 = f31(129, Infinity, 129); } catch (e) {}
f31();
const v47 = v43.prototype;
Symbol.isConcatSpreadable;
const v49 = v30();
try { v49.toReversed(); } catch (e) {}
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    try { new v55(v55, f17, F51, this, v55); } catch (e) {}
    new a53();
}
v49[267] = v47;
for (; v2--;) {
}
v49["concat"]();
