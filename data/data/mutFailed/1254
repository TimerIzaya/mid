const v3 = Math.tan();
const v4 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
parseInt(v4);
class C8 {
    [v3] = "MAX_VALUE";
    8;
    static #d = -1;
    constructor(a10, a11) {
        try {
            a10.fuck(false, this);
        } catch(e14) {
        }
    }
    set e(a16) {
        super.h = this;
        ("MAX_VALUE").length;
        const o22 = {
            "execution": "async",
        };
        const v24 = new Uint8ClampedArray();
        const v26 = new Float32Array();
        for (let v27 = 0; v27 < 25; v27++) {
            Float32Array[6] = v24;
            v26[9];
        }
        new Float32Array(2);
        new Uint32Array(v3);
        new Float32Array(3);
        new Int16Array(512);
        new Uint8ClampedArray(8);
    }
}
new C8();
const v43 = new C8();
new v43();
const v48 = [v4,v4,v4,v4];
[v4,v48,v48,v48];
class C50 {
}
const v53 = new Float32Array(99);
for (const v54 of v53) {
    function F55(a57, a58) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v54;
    }
    new C50();
}
new Array(128);
class C66 {
}
async function f67(a68, a69, a70, a71) {
    await C66;
    return a70;
}
f67();
