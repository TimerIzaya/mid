function f0() {
    const o26 = {
        "e": -1e-15,
        toString(a5, a6) {
            const v7 = a6?.[257];
            try { a5.o(v7, v7, a6, a5); } catch (e) {}
            new Infinity(2, this, this);
            const v14 = new Uint16Array(6);
            new Int8Array(127, 4294967295);
            function F18(a20, a21, a22, a23) {
                if (!new.target) { throw 'must be called with new'; }
                let {"c":v24,} = f0;
            }
            const v25 = new F18();
            return v25;
            return v14;
        },
    };
    return o26;
}
const v27 = f0();
const v28 = f0();
const v29 = f0();
[v28,f0,v28,v28];
[v29,v27,v28,v29,v29];
const v32 = new f0();
class C33 {
    static [v32];
}
function F34() {
    if (!new.target) { throw 'must be called with new'; }
}
[v27];
-(536870912n << 536870912n);
const v41 = -(-7);
v41 ** v41;
new Date();
new BigInt64Array(1024);
new Uint8ClampedArray(818);
Math.log1p(2.220446049250313e-16);
new Date(Date);
new Float64Array(13);
class C60 {
    static {
        super.b = this;
        let {...v62} = this;
    }
    constructor(a64, a65, a66, a67) {
        --a67;
        try {
            this.#m();
        } catch(e70) {
        }
    }
}
function F71(a73) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
`b${Uint8ClampedArray}hpz${"ih"}-128`;
try { C60.m(); } catch (e) {}
