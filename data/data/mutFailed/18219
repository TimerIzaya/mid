const v0 = /izn[k]/isy;
const v1 = /xyz{1,32}{xyz??/gim;
const v2 = /a*b/dm;
const v3 = [483104271,3,177555607];
const v4 = [255,-27557];
const v5 = [-272243410];
try { v5.concat(v0); } catch (e) {}
v5[0] = v5;
function f7() {
    function f8(a9, a10) {
        let v11 = 257;
        v11--;
        v11 - v11;
        const v15 = AggregateError?.constructor;
        v15.name = v15;
        let v16;
        try { v16 = new v15(v0); } catch (e) {}
        v16.arguments;
        AggregateError.captureStackTrace(AggregateError, v11);
        return a9;
    }
    return f8;
}
function f19(a20) {
}
try { f19(v1); } catch (e) {}
Object.defineProperty(v5, "toString", { configurable: true, enumerable: true, get: f7, set: f19 });
class C25 {
    static [v5];
    static {
        let v27;
        try { v27 = new this(); } catch (e) {}
        v27.g = v27;
        try { ("2").fontsize(f7); } catch (e) {}
        let v31;
        try { v31 = ("boolean").toLocaleLowerCase(); } catch (e) {}
        try { v31.big(); } catch (e) {}
        try { ("toLocaleString").localeCompare(v31); } catch (e) {}
        let v35;
        try { v35 = ("toLocaleString").slice(this, v4); } catch (e) {}
        try { v35.localeCompare(this); } catch (e) {}
    }
    get g() {
        function f38(a39, a40) {
            [[this,[a40,a39,a39,v3],this,v0,a40]];
            return v3;
        }
        return f38(this, v2);
    }
}
try { C25.toString(); } catch (e) {}
new C25();
const v47 = new C25();
const v48 = new C25();
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this?.__defineGetter__;
    try { new v53(v5, v3); } catch (e) {}
    const v55 = this?.constructor;
    try { new v55(F49, F49); } catch (e) {}
    a51.g;
    a52.g;
    try {
        this.g = v0;
    } catch(e59) {
    }
}
const v60 = new F49(v47, v48);
const v61 = new F49(v60, v60);
new F49(v61, v60);
const v66 = [-1000000000000.0,Infinity,1.0,-Infinity,1.7976931348623157e+308,5.968300367511291e+307,-2.220446049250313e-16,-3.0,9.510254036543073e+307,5.0];
const v67 = [1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
const v71 = [-131.14557671807358,v66,v66,1e-15];
v71[3] = v71;
[4.0,0.2037963153987472];
[v67,-131.14557671807358,4.0];
const v74 = [0.0,-1000.0,2.557943047142931];
([-2.2250738585072014e-308,1e-15,0.0,-3.0,2.220446049250313e-16,1000000000000.0,-386.72889766700735,4.359327317391378])[3];
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
-1000000000.0 + -1000000000.0;
948737.12760097 == 948737.12760097;
for (let v84 = 0; v84 < 5; v84++) {
    try {
        v74.valueOf = v84;
    } catch(e85) {
    }
}
let v87 = 2147483647;
v87--;
let v89 = 20655;
v89++;
const v94 = [256,54026];
("forEach")[2];
-2 | -2;
!-2;
Math.hypot(v94);
135.68951961804942 - 135.68951961804942;
gc.length = gc;
const o107 = {
    "execution": "async",
    "type": "minor",
};
const v109 = new Int16Array(2183);
255 % 255;
const v113 = new Uint8Array(255);
try { v113.keys(); } catch (e) {}
const v117 = new Int16Array(8);
const v119 = parseFloat?.constructor;
try { new v119(1000000000.0); } catch (e) {}
async function f121(a122, a123, a124) {
    delete v117[-1000000000.0];
    let [v126,v127,...v128] = v109;
    v109[5];
    await v127;
}
parseFloat("minor");
