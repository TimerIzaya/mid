gc();
function f6(a7, a8, a9, a10) {
    const o11 = {
        "d": a10,
    };
    return o11;
}
const v12 = f6(-11, 2147483648, 2147483648, 16);
v12.toString = f6;
let v13 = v12[v12];
const v17 = 3 & 3;
const v19 = /(ab|cde)\118\P{sc=Greek}+/gdims;
function f20() {
    return f6;
}
function f21(a22) {
    v13 = 2147483648;
}
Object.defineProperty(v19, Symbol.toPrimitive, { writable: true, get: f20, set: f21 });
v19.exec(v19);
-2147483648 ^ 8.868704382732872e+307;
new Uint16Array(3);
const v32 = new Float64Array(209);
Uint32Array[Symbol.iterator] = f6;
new Proxy(Uint32Array, v32);
const v40 = new Uint32Array();
v40[40];
try { v32.toString(); } catch (e) {}
Uint32Array[0] = -9223372036854775807n;
const v44 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const o45 = {
};
new Proxy(v44, o45);
function f49(a50, a51, a52) {
    return f49;
}
class C56 {
    static 7;
    static [-1] = "string";
    #n(a58) {
        a58 = this;
        a58.e >>>= -35417;
        const o62 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o62);
        return this;
    }
}
let v64 = new C56();
function f65() {
    try {
        Symbol("string");
    } catch(e67) {
    }
    return v17;
}
v64.toString = f65;
const v68 = new C56();
let v69 = 0;
do {
    v64 -= v68;
    v69++;
} while (v69 < 5)
new Uint16Array(968);
-9007199254740991 * -9007199254740991;
Math.sin(-9007199254740991);
[1,-4294967295,-2147483648,4294967297,6];
[257,268435456,-38711,-65535,20450,9223372036854775807,3,-2,2];
const v8 = [1,14,12578,268435441,-418482690];
function f9() {
    return v8;
}
[17975,6,-2147483648];
[-32247,-991952578];
[10,10,34460,-28806,61070,9007199254740991,-1884018065];
class C14 extends WeakSet {
    [C14];
}
new C14();
