function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 6;
    } catch(e3) {
    }
    try {
        this.b = this;
    } catch(e4) {
    }
    try {
        this.h = 6;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
new BigUint64Array(3478);
const v14 = new Float32Array(1000);
const v17 = new BigInt64Array(255);
const v18 = [];
const v19 = /a\q5(?:(?=a))a\11\P{gc=Decimal_Number}/gis;
function f21(a22, a23, a24, a25) {
    if (a22 !== a22) {
        [-1.4337090214856766e+308,-159535.87886831607,-3.293882058527256,3.0211653564744285e+307,0.7805275672281347,1000000000000.0,1000000.0,660.4544007415145];
        [-2.220446049250313e-16];
        [-2.2250738585072014e-308,-5.0,-1.6334397712196508e+308,-9.82870114610006,759.9795284113711,913108.0254934581,342505.70482373284,-0.4515930802950372,-1.0];
    } else {
        Object.defineProperty(v14, 4, { configurable: true, enumerable: true, set: f21 });
    }
    function F32(a34) {
        if (!new.target) { throw 'must be called with new'; }
        a34 ^ a34;
        const t33 = this.constructor;
        t33.length = BigUint64Array;
        try {
        const t0 = 4046;
        new t0(3n);
        } catch (e) {}
    }
    const v39 = new BigInt64Array(v17);
    let v40 = undefined;
    const v41 = v40++;
    const v42 = v41 + v41;
    const v43 = v41 >> v41;
    const v44 = v43 >>> v43;
    for (let v45 = 0; v45 < 5; v45++) {
    }
    v18.constructor;
    try { v42(); } catch (e) {}
    new Float32Array();
    function F49(a51, a52, a53) {
        if (!new.target) { throw 'must be called with new'; }
        F0.f = v19;
    }
    const v54 = new F49(v42, 4096, v44);
    v54.f = v54;
    new F49(a23, v41);
    let o56 = {
    };
    [,...o56] = v39;
    return v19;
}
for (let v57 = 0; v57 < 5; v57++) {
    f21();
}
