const v2 = Symbol.iterator;
const o4 = {
    [v2]() {
    },
};
function f8() {
    return true;
}
function f9() {
    return f8;
}
class C10 extends f9 {
    static g = f8;
    [f9];
    static #valueOf(a12, a13) {
        super[f8];
        const v17 = new Int8Array();
        v17.buffer;
        const v19 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
        const o20 = {
            __proto__: v19,
        };
        return 3;
    }
    #f = 3;
    static c;
    o(a22, a23, a24, a25) {
        return 3;
    }
    [Symbol];
    static #g;
    static {
    }
    static get c() {
        let v28 = 10;
        for (; v28--;) {
            super.c = this;
            Symbol.isConcatSpreadable;
        }
    }
    #c = f8;
}
new C10();
new C10();
const v34 = [];
function f35() {
    return v34;
}
let v38 = new Uint8ClampedArray(256);
Uint8Array.e = Uint8Array;
const v41 = 14 - 14;
let v42 = BigUint64Array;
class C43 {
    static c = 256;
    static e;
    constructor(a45, a46, a47) {
        const v48 = this?.constructor;
        try { new v48(v41, a46, C43); } catch (e) {}
        a45 % a45;
        let v51;
        try { v51 = a46.indexOf(Uint8Array); } catch (e) {}
        v51 << v51;
        a47 + a47;
        try { Math.expm1(v34); } catch (e) {}
        try { Math.sign(f35); } catch (e) {}
        let v58 = 1073741824;
        const v59 = v58--;
        v59 | v59;
        let v61 = --v38;
        v61--;
        v61--;
        let v64 = ~Infinity;
        const v65 = v64--;
        v65 + v65;
        --v58;
        -Infinity;
        v64++;
        --v42;
    }
}
new C10();
const v73 = ("minor").valueOf();
v73.split(v73);
const v75 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v75.concat(v75);
const v78 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
const v79 = [1000000000.0,4.0,5.0,-6.555298893133851e+307];
for (let v80 = 0; v80 < 5; v80++) {
    v79.unshift(-463330.04816285486, v78.values());
}
