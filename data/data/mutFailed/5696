new Array(255);
new Uint16Array(128);
new Int16Array(128);
const v12 = new Float64Array(257);
[532.6535718132814,-468974.45950627374,2.0,-1000000000.0,4.0,0.30330718983073945,-390502.57275154593,-561.4053913758523,0.7362251973460605];
[5.0,1.7976931348623157e+308,-994.7201757963197,-344804.0578683069,3.0,190687.5560550217,-2.9793057066397726,0.6630217806112427,-9.557816396179781,-0.0];
[2.0];
let v16 = -1024;
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
}
const v23 = new F17();
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v25 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
}
class C31 {
}
const v33 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v34 = [601759695];
for (let v36 = 0; v36 < 5; v36++) {
    function f38() {
        new BigUint64Array(64);
        function f42(a43, a44) {
            const o45 = {
            };
            return o45;
        }
        f42();
        Array(Array, f38, Array).unshift();
        new BigInt();
        function F55(a57, a58) {
            if (!new.target) { throw 'must be called with new'; }
            F55();
        }
        try {
            v24.reverse(Float64Array);
        } catch(e61) {
        }
        const v62 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C64 {
        }
        const v65 = new C64(v12, 255);
        try {
            v65.__proto__ = F27;
        } catch(e66) {
            const v68 = -425087802 >>> -425087802;
            class C70 extends Array {
            }
            const v71 = new C70();
            try { v71.group(v68); } catch (e) {}
        }
        const v73 = Symbol.toPrimitive;
        const o77 = {
            toString(a75, a76) {
            },
        };
        const o103 = {
            [522675525n](a80, a81) {
            },
            "c": v34,
            162: "Vre",
            "type": "Vre",
            get a() {
                v36 %= v36;
                return f38;
            },
            valueOf(a84, a85) {
                return a85;
            },
            [-4294967297n](a87, a88, a89, a90) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v33,
            ...v23,
            [v73]() {
            },
            "type": C31,
            valueOf(a93, a94) {
                return Symbol;
            },
            4: "Vre",
            [v25]() {
            },
            n(a97, a98) {
                return false;
            },
            toString(a100, a101, a102) {
                return a101;
            },
        };
        try { v62.with(); } catch (e) {}
        const v106 = [1073741824,1073741823,1376142744,1073741825];
        try {
            v106.findLast(v33);
        } catch(e108) {
        }
        new Float32Array();
        v16 %= -268435456;
        new Uint32Array(v25);
        return undefined;
    }
    f38();
    %OptimizeFunctionOnNextCall(f38);
}
