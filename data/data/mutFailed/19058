new Int32Array(1965);
new Uint8Array(1449);
new Uint8Array(2351);
[268435439,33701,-2147483647,-815788859];
[56718,3,10000,3,63268,-738621355,-1242154793,-2136638553,5];
[692670820,-65537];
const v13 = [4294967296,-57202,256,48562,333990054];
v13.length = 1957281702;
let v14 = 2;
try { Uint32Array.apply(v14, v13); } catch (e) {}
class C17 {
}
const v18 = new C17();
for (const v20 of `match${v18}-20124`) {
    class C21 {
        static {
            Object.defineProperty(this, 1449, { writable: true, enumerable: true, value: this });
        }
        static {
            const v27 = v14++;
            ~v14;
            Math.log10(44149);
            44149 + v14;
            Math.fround(v27);
        }
    }
    function F32() {
        if (!new.target) { throw 'must be called with new'; }
        const o34 = {
        };
        const v36 = new Proxy(this, o34);
        try {
            with (v36) {
                o34[b];
            }
        } catch(e39) {
        }
    }
    const v40 = new C21();
    const v42 = new Int8Array(Int8Array);
    const v43 = new Int8Array();
    v43.find(v42);
    const o45 = {
    };
    const v47 = [Infinity,2.2250738585072014e-308,-9.73859520784204e+307,6.018050590208222];
    const t45 = (2136873598).constructor;
    t45(v47);
    -1965;
    this.__proto__ = v40;
}
