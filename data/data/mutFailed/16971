[];
function f4(a5, a6) {
    return 256;
}
try { Reflect.set(); } catch (e) {}
function F11(a13) {
    if (!new.target) { throw 'must be called with new'; }
}
const v14 = new F11();
const v16 = new Reflect();
const o17 = {
};
const v18 = new Reflect();
function f19(a20, a21) {
    new Float64Array(1073741825);
    new Uint8Array();
    new Uint8ClampedArray();
    const v28 = [];
    try { v28.with(); } catch (e) {}
    const o37 = {
        [v18](a31, a32, a33) {
            super[-9223372036854775807];
        },
        set b(a36) {
        },
        [a21]: v16,
        "d": v14,
        [-9223372036854775807]: o17,
    };
    return v16;
}
new Uint16Array(111);
new BigInt64Array(2887);
new Uint8ClampedArray(1);
function F47() {
    if (!new.target) { throw 'must be called with new'; }
    function F49() {
        if (!new.target) { throw 'must be called with new'; }
        const v53 = new Uint32Array(186);
        const v58 = new Float64Array(186, 186, 16);
        const v59 = [Float64Array,v58];
        class C60 {
            constructor(a62, a63) {
                if (Float64Array > v53) {
                    new Uint32Array(v59);
                } else {
                    function F66(a68, a69, a70) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                }
            }
        }
        new C60(Float64Array, 15);
        for (let v72 = 0; v72 < 25; v72++) {
            const v73 = [601759695];
            const v74 = [1073741824,1073741823,1376142744,1073741825];
            function f75(a76, a77, a78, a79) {
                Math.cos(-1073741824);
                try { v74["find"](..."find", a79, ...v73, ...v74); } catch (e) {}
                return v72;
            }
            for (let v85 = 0; v85 < 5; v85++) {
                f75();
                try { (-9007199254740992).log2(-9007199254740992); } catch (e) {}
                function f89(a90, a91) {
                    for (let v93 in [-65535,536870889,4096]) {
                        v93--;
                    }
                    for (let v95 = 0; v95 < 25; v95++) {
                    }
                }
            }
        }
    }
    new F49();
}
new F47();
