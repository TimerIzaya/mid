const v1 = [0.0,1.0,-6.743702675363474,400.9902683003188];
let v2 = "string";
for (let [i6, i7] = (() => {
        10 - 10;
        return [0, 10];
    })();
    (() => {
        i7--;
        const v9 = i6 < i7;
        v9 || v9;
        return v9;
    })();
    (() => {
        const v13 = i6++;
        v13 >> v13;
    })()) {
    i7 - i7;
    for (const v18 in v1) {
        v2 *= v2;
    }
}
for (let v21 = 0; v21 < 5; v21++) {
    function f22() {
        return Promise.reject(Promise);
    }
    f22().constructor;
    Reflect.defineProperty(Reflect, undefined, [1073741824,1073741823,1376142744,1073741825]);
    %OptimizeFunctionOnNextCall(f22);
}
new Int8Array(112);
new Uint32Array(187);
new Int16Array(2559);
const v42 = [-48288,15,-63536,268435456];
class C43 extends Array {
    constructor(a45, a46, a47) {
        const v49 = new Uint32Array();
        let v50;
        try { v50 = v49.map(v49); } catch (e) {}
        ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach(v50);
        super(a45);
    }
}
new C43(178);
const v54 = new C43();
const v55 = new C43();
for (let i = 0; i < 5; i++) {
    v54[v42] = v55;
}
