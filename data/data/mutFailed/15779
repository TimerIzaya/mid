function f0() {
}
class C4 extends f0 {
    constructor(a6) {
        super(this, f0, f0);
        function f7() {
            try {
                this.fuck([6,a6,-486766647,f0,this], a6);
            } catch(e11) {
            }
            return arguments;
        }
        f7(-536870912, this, 6, -536870912, C4, this, a6);
    }
}
const v13 = new C4(6);
new C4(-486766647);
new C4(v13);
new Int16Array(92);
new Uint32Array(14, -486766647, 0n);
const v25 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v26 = [6,268435440,13,1073741825];
const v27 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
v27.reverse();
class C29 {
    constructor(a31) {
        function f32(a33, a34) {
            a33[5];
        }
        f32(v27);
        f32(v25);
        f32(a31);
    }
}
const v39 = C29.constructor;
const v40 = new C29(v26);
const v41 = new C29(v25);
const t37 = v41.constructor;
new t37(v40);
const v44 = new C29(C29);
try { v44.__defineGetter__(); } catch (e) {}
function f46(a47, a48, a49, a50) {
    try { a48.some(v39); } catch (e) {}
    const o52 = {
        __proto__: a47,
    };
    try { o52.groupToMap(v25); } catch (e) {}
    return o52;
}
const v55 = f46(v26).findLast();
const v56 = f46(v27, v25);
try { v56.m(v55); } catch (e) {}
f46(v27, v27);
const o60 = {
};
gc(o60);
new BigUint64Array(5);
function f65() {
}
f65.toString = f65;
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.f] = f65;
    this.a = f65;
}
new F66();
const v73 = new f65();
v73[Symbol.toPrimitive] = f65;
