function f0() {
    let v3 = 5;
    v3--;
    const o20 = {
        set f(a6) {
            try { a6(); } catch (e) {}
            let v9 = -5;
            ++v9;
            -861681.629479431 >>> -861681.629479431;
            const v15 = Array(19793);
            const v16 = [v15,v15,v15,v15,v15];
            [v16,v16,v16];
            Math.acosh(v9);
            v3 + this;
        },
        ...-879215.0695414196,
        65536: 536870888,
        "a": v3,
        __proto__: 536870888,
    };
    undefined.fuck();
    const v24 = new Set();
    function F25(a27, a28) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a27;
        } catch(e29) {
            for (let [v30,v31] of a27) {
            }
        }
        try {
            this.h = v24;
        } catch(e32) {
        }
        try {
            v24[this];
            ([WeakSet,WeakSet,WeakSet]).copyWithin();
            function f37(a38, a39, a40) {
                return f37;
            }
            try {
                new F25();
            } catch(e42) {
            }
            this.b = Set;
        } catch(e43) {
        }
    }
    o20[65536] = o20;
    return o20;
}
f0();
const v45 = f0();
f0().a;
[268435441,-2137175295,-256,0];
[-3,536870888,-36992,2,536870889];
[1014424117,-2463,9007199254740990,-2147483647,1];
5n << 5n;
let v54 = -23602n;
class C55 {
    static #h;
    static #toString(a57, a58, a59) {
        super.g ||= a57;
        v45[Symbol.isConcatSpreadable];
        return v45;
    }
    static o(a64, a65, a66) {
        for (const v67 of a64) {
            super[v67];
            v54 = 5n;
        }
        try {
            a64.toString = a66;
        } catch(e69) {
        }
        return a66;
    }
}
for (let i = 0; i < 25; i++) {
    const o73 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o73);
}
const v75 = new C55();
const v76 = v75?.constructor;
try { new v76(); } catch (e) {}
new C55();
("h").split(65535);
function F82(a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
new C55();
class C90 {
    #n() {
    }
}
const v92 = new C90();
const v93 = v92?.constructor;
try { new v93(); } catch (e) {}
new C90();
const v96 = [];
const v97 = [];
const v98 = [v96];
class C100 {
}
function f102(a103) {
    const o104 = {
        ...a103,
        9: 255,
        5: 65535,
        536870889: a103,
        6: a103,
        [a103]: a103,
    };
    return o104;
}
f102(f102(255));
11 & 11;
const v112 = new Int16Array(16);
const v113 = v112?.constructor;
try { new v113(64n, v75, v75); } catch (e) {}
v112.buffer;
const v116 = v112.length;
function f117(a118, a119, a120, a121) {
    const v122 = a118?.constructor;
    try { new v122(); } catch (e) {}
    const o146 = {
        0: v98,
        n(a125, a126) {
            class C135 extends Int32Array {
            }
            function F141() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C144 {
                static get b() {
                }
            }
            return a119;
        },
    };
    try { o146.hasOwnProperty(a119); } catch (e) {}
}
f117(v92, v97, v116);
