const v0 = [-9007199254740990,36844,2147483649,-1483935543,-4294967296,-65536,10000,128,9007199254740990];
[-9223372036854775808,65536,10];
const v2 = [856870117,-256,16,141302800,2];
BigUint64Array.f = BigUint64Array;
BigUint64Array.f = v2;
4 ^ v0;
const v8 = new Float32Array(4061, 4061);
class C9 extends 4 {
    [4061] = v8;
    3;
}
const v10 = new C9();
try { BigUint64Array.from(v2); } catch (e) {}
new BigUint64Array(4);
146 >>> 146;
const o19 = {
    [v8](a16, a17, a18) {
        switch (v2) {
            default:
                break;
        }
    },
};
BigUint64Array.f = 4;
BigUint64Array.f = BigUint64Array;
new BigUint64Array(146);
new Int8Array(81);
const v27 = new Int8Array(2509);
v27[1297];
for (let v29 = 0; v29 < 250; v29++) {
    Date.a = v27;
    Date.a = Date;
    const t32 = Date.now();
    new t32();
    v10.constructor;
    function F34(a36, a37, a38, a39) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C40 {
    }
    new C40();
    new Date(..."undefined", "undefined", ...v27);
}
