[];
[9];
const v2 = [536870887,0,-719886792,-14];
const v3 = [-1012997528,-17342,1024,847628195,-9119,11208,2147483648,5];
const v4 = [v2,v2,v3];
class C5 {
}
const v6 = new C5();
function f7(a8, a9) {
    const o10 = {
        [a9]: v6,
    };
    return v3;
}
const v11 = [f7];
const v12 = [v4,v3,v3,v2,v11];
new Map();
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this.constructor;
    try { new v21(); } catch (e) {}
    this.e = a20;
}
class C23 {
}
let v24;
try { v24 = C23(); } catch (e) {}
for (let v25 = 0; v25 < 5; v25++) {
    new F16(undefined, v24);
}
const v31 = new Int32Array(12);
for (const v32 in v31) {
}
function f35() {
    Object.defineProperty(v12, 83, { configurable: true, enumerable: true, value: [] });
    const v38 = BigInt64Array + BigInt64Array;
    return v38 > v38;
    const o56 = {
        [null]() {
            super.b;
        },
        "type": "isConcatSpreadable",
        valueOf(a43, a44) {
            function F45(a47, a48) {
                if (!new.target) { throw 'must be called with new'; }
                this.hasOwnProperty(a43, a48, a43);
                a44 >= a47;
                const v51 = this.constructor;
                try { new v51(); } catch (e) {}
            }
            class C53 extends F45 {
            }
            new C53();
            new C23();
            return F45;
        },
        "f": null,
    };
    function F57(a59, a60, a61) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const o62 = {
    };
    ["4294967296"];
    return o56;
}
new BigUint64Array(v11);
new Int8Array();
f35();
f35();
%OptimizeFunctionOnNextCall(f35);
f35();
