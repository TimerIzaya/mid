const v2 = -Infinity;
class C3 {
    e;
    c;
    static {
        try { new this(); } catch (e) {}
        try { Math.cos(C3); } catch (e) {}
        1000000.0 % 1000000.0;
        Math.cos(1000000.0);
        +this;
    }
    f;
}
let v12;
try { v12 = C3.toString(); } catch (e) {}
const v13 = new C3();
const v14 = new C3();
function f15(a16, a17) {
    ("of").replaceAll("of");
    return 1000000.0;
}
const v21 = Symbol.match;
Object.defineProperty(v14, v21, { writable: true, value: f15 });
const v22 = new C3();
function f23(a24) {
    v12 + v21;
    const o29 = {
        "execution": "async",
        "type": "minor",
    };
    return gc(o29);
}
Object.defineProperty(v22, "toString", { writable: true, configurable: true, value: f23 });
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    function f37() {
        return f15;
    }
    Object.defineProperty(a34, Symbol.match, { configurable: true, enumerable: true, get: f37 });
    a35 >>> a35;
    try {
        this.a = v14;
    } catch(e41) {
    }
    try {
        this.e = v14;
    } catch(e42) {
    }
    class C45 {
        static {
            this.f += "MAX_SAFE_INTEGER";
        }
        static #a = "undefined";
    }
    for (let v47 = 0; v47 < 5; v47++) {
        const v49 = "p" + v47;
        try { v49.replaceAll(v2, v22); } catch (e) {}
        const t57 = "undefined";
        t57[v49] = v47;
    }
    try {
        this.h = a34;
    } catch(e51) {
    }
}
new F31(1000000.0, v14, 1000000.0, v14);
new F31(1000000.0, F31, C3, v13);
const v54 = new F31(v2, v22, v22, v22);
v54.h;
try { ("oeom").includes(v14); } catch (e) {}
const t70 = "d";
t70[0] = "d";
class C59 {
    static #e = "d";
    static 4;
    8;
    static h = "d";
    584 = "d";
    #a;
}
try { new C59(); } catch (e) {}
new C59();
const v62 = new C59();
v62.toString = Symbol;
try { v62.toString(); } catch (e) {}
const v64 = new C59();
v64[584];
Uint8ClampedArray.f = Uint8ClampedArray;
new Int16Array(2308);
const t89 = "async";
t89.e = "async";
const o74 = {
    "execution": "async",
    "type": "minor",
};
o74.type = o74;
gc(o74);
gc();
