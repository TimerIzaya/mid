let v8 = 4.0;
function f14() {
    return 831364659;
}
class C15 extends f14 {
    static get c() {
        const v18 = 831364659 | f14;
        this[10] = v18;
        return v18 instanceof f14;
    }
    [-48110];
    static c = 2147483647;
    static #c;
    185 = v8;
    static 536870887 = 0.0;
}
new C15();
new C15();
const v23 = [0.8307152163010869,1.0,0.0];
v23.length = 831364659;
v23 instanceof -24894;
const v25 = [];
const v26 = [v25];
class C28 extends Map {
    constructor(a30, a31) {
        super(v26);
    }
}
const v32 = new C28(v25, v26);
const v33 = new C28(v26, v32);
const v34 = new C28(v33, v32);
const v38 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v40 = new Uint32Array();
const v42 = [601759695];
const v43 = [1073741824,1073741823,1376142744,1073741825];
function f45(a46, a47, a48, a49) {
    try { a46.toLocaleString(); } catch (e) {}
    const v51 = a46?.constructor;
    try { v51(); } catch (e) {}
    try { v51(); } catch (e) {}
    const v55 = arguments.length;
    Object.defineProperty(v32, "e", { configurable: true, enumerable: true, value: f45 });
    const v57 = v33["entries"](a48, ...v34, BigUint64Array, ..."entries", a47, v55);
    const v59 = Symbol.toStringTag;
    v33[v59] = v59;
    function f60() {
        let v62;
        try { v62 = ("Vre").charAt(4096); } catch (e) {}
        try { v62.lastIndexOf(); } catch (e) {}
        let v64;
        try { v64 = ("Vre").codePointAt(v38); } catch (e) {}
        v64 - v64;
        v64 ^ v64;
        let v67 = Float64Array;
        v67 = a47;
        let v68 = v38.length;
        v68++;
        try {
            v43.forEach(a47);
        } catch(e71) {
            e71.stack = e71;
        }
        const o82 = {
            "c": -4294967297n,
            "EPSILON": v42,
            valueOf(a73, a74) {
                return a73;
            },
            1073741824: v40,
            [-4294967297n](a76, a77, a78, a79) {
                eval();
            },
            "arguments": 5,
            256: a49,
        };
        return v68;
    }
    f60();
    const v85 = Array();
    let v86;
    try { v86 = v85.findLast(f45, v40); } catch (e) {}
    v85.unshift("entries", v57, "entries", v86);
    let v89;
    try { v89 = Int8Array.of(); } catch (e) {}
    try { v89.join(v51); } catch (e) {}
    const v91 = new Int8Array(v42);
    v91.c = v91;
    const v92 = v91.buffer;
    v92.maxByteLength;
    const v94 = v92.slice(v51);
    try { Int32Array(v94, arguments, -4294967297n); } catch (e) {}
    function f97(a98, a99, a100, a101) {
        return a101;
    }
    const v102 = new Int32Array();
    const v103 = v102[3];
    v103 + v103;
    for (let v105 = 0; v105 < 5; v105++) {
    }
    %OptimizeFunctionOnNextCall(f60);
    try { v43["find"](..."find", a49, ...v42, ...v43, ...522675525n); } catch (e) {}
    return a46;
}
for (let v108 = 0; v108 < 10; v108++) {
    f45(v40);
}
const v110 = new C15();
const v114 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v117 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v118 = [601759695];
const v119 = [1073741824,1073741823,1376142744,1073741825];
function f121(a122, a123, a124, a125) {
    function f126() {
        const v129 = v114.length;
        try {
            v119.forEach(a123);
            const v133 = new Map();
            v133[1221986653] >>= 1024;
            function f134(a135, a136) {
                return f134;
            }
        } catch(e137) {
        }
        const v138 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v140 = Symbol.toPrimitive;
        const o146 = {
            toString(a142, a143) {
                const v144 = a125 && a123;
                a142 *= v140;
                return v144 <= v138;
            },
        };
        const o187 = {
            4: "undefined",
            n(a149, a150) {
                return a149;
            },
            "e": -4294967295,
            "c": -4294967297n,
            [522675525n](a152, a153) {
            },
            "c": v118,
            valueOf(a155, a156) {
                return "Vre";
            },
            [v129](a158) {
            },
            [-1]: 2684,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "type": "MPfu",
            toString(a160) {
                class C161 {
                    static [this] = a160;
                }
                return C161;
            },
            [-4294967297n](a163, a164, a165, a166) {
                eval();
            },
            "e": -4294967295,
            "arguments": v117,
            set b(a170) {
            },
            256: a125,
            m(a172) {
                return a172;
            },
            ...v118,
            "type": "Vre",
            "execution": "Vre",
            [522675525n](a174, a175, a176, a177) {
                eval(a177);
            },
            ..."Vre",
            "maxByteLength": -29583,
            "c": v110,
            o(a181, a182) {
                function f183(a184, a185, a186) {
                    v8 |= a182;
                }
            },
            4: "Vre",
            "c": -268435456,
        };
        return a122;
    }
    f126();
    %OptimizeFunctionOnNextCall(f126);
    return 2684;
}
for (let v189 = 0; v189 < 5; v189++) {
    f121();
}
new Int16Array(2552);
new Int32Array(16);
new BigInt64Array(3403);
function F198(a200, a201, a202) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
const v205 = new F198();
v205.e = Uint8ClampedArray;
v205.e = v205;
