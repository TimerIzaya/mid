const v0 = [0.37690856615251433,4.0,9.295161480971672];
function f1(a2, a3) {
    const o4 = {
    };
    return o4;
}
v0(f1, f1)[213];
const v7 = [-2.220446049250313e-16,2.3225856828440017e+307];
[NaN,-2.2250738585072014e-308,8.042535796323358e+307];
Math.g = Math;
Math[536870887] = v7;
Symbol.toPrimitive.description.codePointAt();
const v14 = [-1.0,-326740.0432039731,-665423.6582835851,0.9783093855503386];
const v15 = [0.5984399141306782];
v15[0] = v15;
const v16 = [0.8753871831254504,1000000000.0,-2.0,-2.2250738585072014e-308,NaN];
v16[4];
const v19 = v16.constructor;
try { new v19(); } catch (e) {}
let v21 = 16;
new Int8Array(v21);
class C26 {
    static toString(a28, a29) {
        for (let v30 = 0; v30 < 32; v30++) {
            Math.c = this;
            return v16;
            class C33 {
                static #o(a35) {
                    this.g **= -1e-15;
                    try {
                        ("-2147483648").normalize();
                    } catch(e37) {
                    }
                    return v21;
                }
                a = -1e-15;
                static 27 = v21;
                static f;
            }
            try { new C33(); } catch (e) {}
            v14["p" + v30] = v30;
            Math.sinh(Math);
            for (let i = 0; i < 10; i++) {
                v21--;
                Reflect.construct(Array, [v21], Uint8ClampedArray);
            }
        }
        return v14;
    }
    static #e;
    static [v15] = v14;
}
const v49 = new C26();
const v50 = v49?.constructor;
try { new v50(); } catch (e) {}
const v52 = new C26();
const o57 = {
    [122188848n](a55, a56) {
    },
};
const v58 = v52?.constructor;
try { new v58(); } catch (e) {}
new C26();
const v62 = ("6Ct").normalize();
try { v62.strike(); } catch (e) {}
const v64 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
class C65 {
}
const v66 = new C65();
for (let v67 = 0; v67 < 25; v67++) {
    v64[4294967295] = v66;
}
