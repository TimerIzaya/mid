/lL4K[xyz{93}(?<=)*]/guds;
const v1 = /(Ch)/gudms;
const v2 = /Gabc+/gus;
let v3 = [-1000000000.0,-1000000000000.0,4.0,0.08783700931552052,1.7976931348623157e+308,-1e-15,-9.387549095982559e+307,1e-15,1000000.0,-3.0];
let v4;
try { v4 = v3.reduce(v3); } catch (e) {}
const v5 = [2.2250738585072014e-308,-1.1152160087306389e+308];
const v6 = [2.270528578891966,-Infinity,NaN,1000000.0,-Infinity,2.220446049250313e-16];
v6[2];
const v8 = [1845326823,536870887,255,1000,-1108810669,-16,9,-1779712423,65536];
const v9 = [-11838];
const v10 = [-1024,1000,-9223372036854775808,-2147483649,-7,9007199254740992,410049948,7,64];
try { v10.map(v6); } catch (e) {}
class C12 {
    static [v6] = v1;
    #n(a14, a15, a16, a17) {
        const o18 = {
        };
        new Proxy(v9, o18);
        return v8;
    }
    static #e = v10;
    static g;
}
let v21;
try { v21 = new C12(); } catch (e) {}
const v22 = new C12();
const v23 = new C12();
try { v23.toLocaleString(); } catch (e) {}
v2[v6] = v22;
v3 = v23;
(v23 || v6).__proto__;
v10.length *= v21;
const v27 = v23?.constructor;
try { v27.call(v27); } catch (e) {}
let v29;
try { v29 = new v27(); } catch (e) {}
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
const v32 = new C12();
const v33 = v32?.propertyIsEnumerable;
try { new v33(v8); } catch (e) {}
function f36(a37, a38, a39) {
    const v40 = a38?.constructor;
    try { new v40(); } catch (e) {}
    try { a39.concat(a37); } catch (e) {}
    const v43 = a38?.constructor;
    v43.name = v43;
    try { new v43(); } catch (e) {}
    return null;
}
let v48 = 1785735859;
v48--;
v48 === v48;
Uint32Array.name = Uint32Array;
v4 = v5;
v9[512];
[] = v9;
try {
    const t59 = "function";
    t59.toString = v21;
} catch(e53) {
}
("function")[388516993];
const v56 = Symbol.split;
v4[v56] = v56;
const v58 = BigInt64Array?.constructor;
C12[16] = v3;
f36(v27, C12, v5);
%PrepareFunctionForOptimization(f36);
f36(v27, C12, v5);
f36(v27, C12, v5);
%OptimizeFunctionOnNextCall(f36);
f36(v27, C12, v5);
try { new v58(v4); } catch (e) {}
f36(Worker, v22, v6);
try {
    v22.toString = f36;
} catch(e65) {
}
const v67 = Int32Array?.constructor;
try { new v67(v8); } catch (e) {}
