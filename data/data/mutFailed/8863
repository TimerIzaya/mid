class C3 {
    [-591.6377156838155];
    static #p(a5, a6) {
        var g = -1.7976931348623157e+308;
        const v7 = a5 !== a6;
        if (v7) {
        } else {
            Math.hypot(a6);
            let v15 = !v7;
            --v15;
        }
        return this;
    }
}
const v17 = C3.name;
const v18 = new C3();
const v19 = new C3();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
const v22 = new v17();
const v23 = v22?.constructor;
v23.prototype = v23;
let v24;
try { v24 = new v23(); } catch (e) {}
const v25 = v24?.constructor;
try { new v25(); } catch (e) {}
let v29 = Uint32Array.length;
const v30 = v29--;
const t27 = "-9007199254740992";
new t27(8);
let v32 = 3647;
v32++;
const v35 = new Int32Array(v32);
try { v35.findLastIndex(v18); } catch (e) {}
let v39 = Uint16Array.length;
v39++;
new Uint16Array(1431);
try { new Set(); } catch (e) {}
class C45 {
}
try { new C45(); } catch (e) {}
try { C45.bind(C3); } catch (e) {}
const v48 = new C45();
const v49 = v48?.constructor;
try { new v49(); } catch (e) {}
const v53 = v48[v22.unscopables];
class C54 extends C45 {
    ["next"] = v53;
}
try { new v30(); } catch (e) {}
const v56 = new C54();
v56.next = v56;
const v57 = v56?.constructor;
let v58;
try { v58 = new v57(); } catch (e) {}
const v59 = v58?.constructor;
try { new v59(); } catch (e) {}
