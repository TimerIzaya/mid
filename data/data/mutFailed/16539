let v1 = -60736;
class C3 {
    set c(a5) {
        const v6 = [a5,this,this,v1];
        [this,v1,[a5,-1.0,v6],v1];
        v6["toSorted"](this, Infinity, a5, -1.0, Infinity, a5);
    }
    #b;
    valueOf(a12) {
        try { new a12(a12, -1.0, this); } catch (e) {}
        /\p{gc=Nd}/gvmy;
        /(a\1)/gdm;
        return /bEnpxyz{1,32}?/gud;
    }
}
try { new C3(); } catch (e) {}
try { new C3(); } catch (e) {}
const v22 = new C3();
const v23 = new C3();
const v24 = v23?.constructor;
function f25(a26, a27) {
    const v28 = [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
    try {
    const t0 = 1073741825n;
    t0(v28);
    } catch (e) {}
    return v24;
}
v24.constructor = f25;
let v31;
try { v31 = new v24(); } catch (e) {}
const v32 = v31?.constructor;
try { new v32(); } catch (e) {}
const v34 = new C3();
class C38 {
    static 7 = Infinity;
    static get f() {
        function f40() {
            return C3;
        }
        return f40;
    }
    constructor(a42, a43) {
        a43.constructor = f25;
        const v44 = a43?.constructor;
        try { new v44(); } catch (e) {}
        const v46 = a43?.constructor;
        const v47 = v46?.constructor;
        try { new v47(v1); } catch (e) {}
        try { new v46(); } catch (e) {}
        if (a43) {
            a43 = C3;
        } else {
            v1 <<= v1;
        }
        try { a43(); } catch (e) {}
    }
}
C38.name = C38;
new C38("boolean", v34);
const v52 = new C38("boolean", v23);
v52.length = v52;
const v53 = new C38("boolean", v22);
v53.constructor = f25;
const v54 = v53?.constructor;
try { new v54(v1, Infinity); } catch (e) {}
10 & 10;
Uint8Array.BYTES_PER_ELEMENT;
Uint8Array.length = Uint8Array;
new Uint8Array(10);
const v63 = new BigInt64Array(153);
let v66;
try { v66 = new Uint16Array(16, v52, 16); } catch (e) {}
function f67() {
    new C3(v66, ...v63, v23, ...v63, v23);
    v24 != 153;
    return v32;
}
v66.constructor = f67;
const v70 = v66?.constructor;
try { new v70(v66, Uint8Array, 10); } catch (e) {}
const v72 = new Uint16Array(16);
v72[Symbol.toPrimitive] = f25;
v72[10] = v72;
5 !== 5;
const v78 = new Int8Array(5);
try { v78.entries(); } catch (e) {}
200 - 200;
200 >>> 200;
Int8Array.g = v70;
Int8Array.g = Int8Array;
let v84;
try { v84 = new Int8Array(v34, 16, 16); } catch (e) {}
try { v84.entries(); } catch (e) {}
const v88 = new BigUint64Array(127);
v88.toString = f25;
-2147483648 << -2147483648;
-2147483648 >> -2147483648;
const v93 = -4294967295 << -4294967295;
v93 < v93;
let v96 = 127;
v96++;
v96 >> v96;
BigInt64Array.length = BigInt64Array;
3685 != 3685;
try { new Uint32Array(10, 10, Int8Array); } catch (e) {}
v78[v88];
324308659 - 324308659;
const v111 = Math.sin();
v111 << v111;
const v113 = 324308659 + 324308659;
v113 - v113;
v113 <= v113;
