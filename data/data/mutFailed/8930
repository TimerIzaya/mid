try {
    const t1 = -9.093773311457795;
    t1.length = 5;
} catch(e2) {
}
const v5 = [7.038599288790304e+307,-1000.0];
const v6 = [-1000.0];
const v7 = [-9.093773311457795];
function f8(a9, a10) {
    !-512.5016983400177;
    v6 - v6;
    -128 ^ -128;
    v6 + 6;
    6 && v6;
    return a10;
}
v7[Symbol.toPrimitive] = f8;
v5[2];
class C24 extends Date {
    constructor(a26, a27, a28, a29) {
        super(a26);
    }
}
class C30 extends C24 {
}
function f34(a35, a36) {
    a35.toString = Symbol;
    const o59 = {
        [a35](a38, a39, a40) {
            function f45(a46) {
                const o52 = {
                    __proto__: 2,
                    "c": 2,
                    "e": 536870889,
                    213: a46,
                    ...a46,
                    "g": 2,
                    p(a48, a49) {
                        try {
                            this.fuck(536870889, a46);
                        } catch(e51) {
                        }
                        return this;
                    },
                };
                return o52;
            }
            f45(536870889);
            f45();
            f45(536870889);
            f45();
            return v6;
        },
        "g": a35,
        "b": -9.093773311457795,
        "h": v7,
    };
    return 7.038599288790304e+307;
}
f34(v7, -1000.0);
const v61 = f34(v7, -1000.0);
function F63(a65) {
    if (!new.target) { throw 'must be called with new'; }
    a65 | a65;
    const v67 = this?.constructor;
    try { new v67(3n); } catch (e) {}
}
f34(v5, -1.0);
class C72 {
}
class C73 extends C72 {
    constructor(a75, a76, a77, a78) {
        super();
        NaN >= "0x2I";
    }
}
let v80 = Int32Array;
v80.valueOf = f8;
const v81 = v80--;
for (let v82 = 0; v82 < 5; v82++) {
    function f83() {
        const t81 = ("1073741824").constructor;
        const v87 = t81().replaceAll(f83, v82);
        return v87.toLowerCase(v87, "1073741824", v87);
    }
    function f89(a90, a91) {
        [C30];
        [v82,v5,v81,v61,[f8]];
        return f83;
    }
    f83[Symbol.match] = f89;
    f83();
    %OptimizeFunctionOnNextCall(f83);
}
new C73();
