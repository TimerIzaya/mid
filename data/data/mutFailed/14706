function f1(a2, a3) {
    a2[12] = a3;
    const v4 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
    class C6 {
        static #e;
        m(a8, a9, a10, a11) {
            v4.#e;
            a9.#e = -1;
        }
    }
    return C6;
}
WeakMap[Symbol.iterator] = f1;
const v21 = new WeakMap();
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a26;
}
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 6;
    } catch(e30) {
    }
}
function f31(a32, a33) {
    const o48 = {
        [F27](a35, a36, a37, a38) {
            let v39 = 0;
            do {
                const o43 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o43);
                v39++;
            } while (v39 < 1)
            return a37;
        },
    };
    return o48;
}
const v50 = [44371,2,-65536,9,-5128,-9223372036854775808,-7,10];
v50.toString = Symbol;
try { v50.groupToMap(v21); } catch (e) {}
const o54 = {
    "maxByteLength": 1073741824,
};
new ArrayBuffer(4, o54);
const v57 = [14,-11,1];
const v58 = [-49581,0,-128];
function f59() {
    return f31;
}
Object.defineProperty(v58, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f59 });
let v62;
try { v62 = v58.map(-481.43858792169976); } catch (e) {}
class C66 {
    #valueOf(a68, a69, a70, a71) {
        WeakMap ^ a70;
        a68[WeakMap] = WeakMap;
        const v73 = new a68();
        const v74 = v73[16];
        try { v74["valueOf"](); } catch (e) {}
        new Map();
        return -481.43858792169976;
    }
    constructor(a80, a81) {
        try { this.propertyIsEnumerable(v57); } catch (e) {}
        a80.d = a80;
        try { new a80(WeakMap, ...WeakMap, v21, 135971.42055658018, WeakMap, ..."f"); } catch (e) {}
        try { Math.expm1(v62); } catch (e) {}
        135971.42055658018 / -47251;
        Math.sqrt(-47251);
        !a81;
        const v92 = new Uint8Array(4, 4, 4);
        function f93(a94, a95, a96, a97) {
            a95 * a95;
            const o102 = {
                "b": a94,
                "c": a97,
                ...v92,
                n(a100, a101) {
                },
            };
            return o102;
        }
        for (let v103 = 0; v103 < 625; v103++) {
            f93(Uint8Array, 4);
        }
        const v105 = Symbol.iterator;
        const o123 = {
            [v105]() {
                let v107 = 10;
                const o122 = {
                    next() {
                        v107--;
                        function f111(a112, a113) {
                            const o119 = {
                                __proto__: a112,
                                p(a115, a116) {
                                    48752008 ^ this;
                                    return this;
                                },
                            };
                            return o119;
                        }
                        const v120 = v107 == 0;
                        const o121 = {
                            "done": v120,
                            "value": v107,
                        };
                        return o121;
                    },
                };
                return o122;
            },
        };
        a81 | -4.0;
    }
}
const v125 = new C66(C66, v57);
const v126 = v125?.constructor;
try { new v126(-481.43858792169976, "T"); } catch (e) {}
const v128 = new C66(v58, v50);
v128.constructor = Symbol;
const v129 = v128?.constructor;
try { new v129("f", "object"); } catch (e) {}
new C66(v125, v58);
127 - 127;
const v135 = new Uint8ClampedArray(127);
const v136 = [-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity];
v136.constructor = Symbol;
try { v136.constructor(Uint8ClampedArray); } catch (e) {}
v135.includes(...v136);
