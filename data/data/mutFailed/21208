let v0 = "bigint";
class C3 {
    toString(a5, a6) {
        let v4 = this;
        v0 = v4;
        const v8 = v4--;
        C3.fround(-1873523846);
        -1000000000.0 / a5;
        -1873523846 ^ -1873523846;
        Math.sign(C3);
        Math.atanh(-1873523846);
        return v8;
    }
}
try { new C3(); } catch (e) {}
new C3();
const v19 = new C3();
v19.g = v19;
new C3();
const v21 = [-1e-15,0.538468371944529,1e-15,0.5211416027821635,0.0,-1000000000000.0,-2.0];
const v22 = [-4.673500699374156,1000000.0,0.04967962783278468,0.2717440169933293,8.277108106434895,0.1879875507005373];
const v23 = [-1000000.0,-1000000000000.0,785.0071292007447,-194.7935643044143];
const v24 = [1.0736288754154956e+308];
const v25 = [-290400.5285948892,-340.58981240658954,-689.4100672541059,865.5375203990159,-2.0];
const v26 = [1000000000.0,NaN,992.3215387739892,1.0,1e-15,-1000000000000.0,3.069342152154951e+306];
try { v26.findLastIndex(v21); } catch (e) {}
function f35() {
    new BigInt64Array(3216);
    return 3216;
}
Uint8ClampedArray[Symbol.iterator] = f35;
try { new Uint8ClampedArray(Uint8ClampedArray, v24, v26); } catch (e) {}
const v42 = new Uint8ClampedArray();
v42[Symbol.toPrimitive] = Symbol;
v42?.includes;
let v46;
try {
const t0 = 6;
v46 = new t0(Float64Array);
} catch (e) {}
function f47(a48, a49) {
    const v50 = f47 >> a48;
    const o55 = {
        [v23]: v50,
        ...v0,
        [v42]: Uint8ClampedArray,
        __proto__: v22,
        [0.06006298390262976]: v25,
        [a48]: Float64Array,
        4: 6,
        "b": a48,
        [v42](a52, a53, a54) {
        },
    };
    return o55;
}
Object.defineProperty(f47, Symbol.toPrimitive, { configurable: true, value: f47 });
try { f47.apply(v26, Float64Array); } catch (e) {}
%PrepareFunctionForOptimization(f47);
f47(2)[4];
f47(v46);
%OptimizeFunctionOnNextCall(f47);
f47();
