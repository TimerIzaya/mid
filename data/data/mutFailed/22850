const v6 = new Uint8ClampedArray(129);
const v9 = new Uint16Array(1587);
new Int32Array(8);
null || 5.422771101938704;
v9[-218708.49678132264] = null;
let v15 = v6[256];
v6 < v15 ? v6 : v15;
const v22 = new BigInt64Array(205);
let v25;
try { v25 = Uint16Array(205, BigInt64Array, 256); } catch (e) {}
new Uint16Array(256);
const v27 = v22[205];
0 >> 0;
try {
    v27.toString = v27;
    let v30 = 0;
    while (v30 < 2) {
        v15 = Uint16Array;
        v30++;
    }
} catch(e34) {
    e34.message = e34;
}
255 - 255;
Float64Array.BYTES_PER_ELEMENT;
const v39 = new Float64Array(255);
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    a43 >> a43;
    a45 | a45;
    try {
        v39.b = a43;
    } catch(e48) {
    }
    try {
        this.h = a42;
    } catch(e49) {
    }
}
const v50 = F40?.constructor;
try { new v50(v39); } catch (e) {}
const v52 = new F40(255, 205, 255, 205);
const v53 = new F40(255, 256, 255, 256);
new F40(255, 205, 256, 255);
const v56 = ([-Infinity,-5.577012134541006])?.filter;
try { new v56(Uint16Array); } catch (e) {}
const v58 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
[-2.220446049250313e-16,-171953.22769972356,2.220446049250313e-16,Infinity,-3.0,-4.368087235127776];
const v60 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v61 = [Infinity];
const v63 = ([2.2250738585072014e-308,1.949684848262672,4.0]).push(v60);
const v65 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0]).toStringTag;
try { v61.every(v65, v53); } catch (e) {}
v52.h >>>= v63;
v58.length;
function f68() {
    for (let v69 = 0; v69 < 5; v69++) {
        let v74 = ~13;
        ++v74;
        v25 && -1614446440;
        Math.log1p(-29719n);
        function f78() {
            return f78;
        }
        f78.d = v69;
        f78.d = f78;
    }
    return f68;
}
%PrepareFunctionForOptimization(f68);
f68();
%OptimizeFunctionOnNextCall(f68);
f68();
