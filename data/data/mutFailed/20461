[268435439,-5,129,9007199254740990,-14623,-7967,-35538,-256,-437647221,43681];
const o1 = {
};
function f2() {
    return o1;
}
function f3(a4, a5) {
    a5.length;
    Object.defineProperty(o1, "h", { writable: true, configurable: true, enumerable: true, get: f2, set: f2 });
    return o1;
}
const v8 = new Promise(f3);
const v9 = v8?.catch;
let v10;
try { v10 = new v9(v8); } catch (e) {}
const v11 = [-48509,-128,-12,7,627370401,2147483647,9418,-3,1051007267];
const v12 = [536870912,40877,55202,-536870912,-1,268435439,-4294967297];
let v15;
try { v15 = ("e").strike(); } catch (e) {}
const v16 = ("e")?.asyncIterator;
try { new v16(v11, v11); } catch (e) {}
const t21 = "function";
t21[4] = "function";
const v19 = ["setUint32","function","function"];
const v20 = ["setUint32","setUint32",v12,"e"];
[v12,v11,"e",v19,v20];
let v23;
try { v23 = ("any").trimStart(); } catch (e) {}
v23[2];
("toSpliced").length;
class C30 {
}
let v31;
try { v31 = new v15(); } catch (e) {}
const v32 = new C30();
function f33(a34, a35, a36, a37) {
    const o40 = {
        "e": v32,
        ...a34,
        "d": a34,
        [v32]: a37,
        "g": 579720983,
        256: "getInt32",
        set b(a39) {
        },
        "b": a36,
        ...v32,
        "f": v9,
        "c": C30,
    };
    return o40;
}
f33.length = f33;
const v42 = f33(v31());
v42[256] = v10;
v42.e = v42;
%PrepareFunctionForOptimization(f33);
const v43 = f33(v20);
const v44 = f33(v12);
const v45 = v42?.c;
let v46;
try { v46 = new v45(); } catch (e) {}
const v47 = v46?.__defineGetter__;
try { new v47("any", v47); } catch (e) {}
%OptimizeFunctionOnNextCall(f33);
f33(C30, v43, v44, v43, "getInt32", "e");
