const v2 = new Uint16Array(256);
const v5 = new Int32Array(4096);
new Uint8Array(1024);
class C9 extends Int32Array {
    d = 4096;
    constructor(a11, a12, a13) {
        super(v5, 1024);
        try {
            v2.keys();
            Math.log1p(2.220446049250313e-16);
            for (let v18 = 0; v18 < 5; v18++) {
                function f19() {
                    Math.ceil();
                    return v18;
                }
                f19();
                %OptimizeFunctionOnNextCall(f19);
            }
        } catch(e23) {
        }
    }
    static [v5] = 1024;
    1636919526 = Uint8Array;
    129 = 256;
}
new C9(256, 1024, 1024);
new C9(256, 4096, 1024);
new C9(256, 1024, 256);
class C27 {
}
const v28 = new C27();
function f29(a30, a31) {
    const v35 = new String();
    Object.defineProperty(v35, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
    for (let v36 = 0; v36 < 5; v36++) {
        function f38() {
            Math.cos(Math);
            return Math;
        }
        f38();
        %OptimizeFunctionOnNextCall(f38);
    }
    function f41(a42, a43) {
        return f41;
    }
    const o46 = {
        "type": "function",
    };
    new Worker(f41, o46);
    const v49 = [601759695];
    let v50 = -4294967297n;
    const v51 = v50--;
    for (let v52 = 0; v52 < 5; v52++) {
        function f53() {
            b = v49;
            const o60 = {
                [v51](a56, a57, a58, a59) {
                },
            };
            return Date;
        }
    }
}
try {
    new Map("268435441");
} catch(e64) {
}
v28.constructor;
const v66 = [];
v66.toString = f29;
v66.toString();
