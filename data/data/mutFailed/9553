const v2 = new Uint8ClampedArray(Uint8ClampedArray);
const v5 = new Uint32Array(Uint8ClampedArray);
v5[2] = v5;
const v8 = new Uint32Array(2);
const v9 = v8.byteLength;
new Int8Array(5);
const o28 = {
    valueOf() {
        this < this;
        function F17(a19, a20, a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = 77;
            } catch(e23) {
            }
            try {
                this.c = a20;
            } catch(e24) {
            }
        }
        new F17(2, 3052, 2, 3052);
        new F17(7, 3052, 2, v9);
        new F17(5, 77, 77, 7);
        return 3052;
    },
};
try { new Uint8ClampedArray(Uint32Array, v2, v2); } catch (e) {}
const v30 = new Uint8ClampedArray(3052);
v30[2543] = v30;
const v33 = new BigUint64Array(255);
for (let [v34,v35,v36] of v33) {
}
const v42 = Math.tan(-1);
Uint8Array.BYTES_PER_ELEMENT;
const v46 = new Uint8Array(127);
v46.indexOf(v42);
