class C3 {
    static #f;
    static {
        const v5 = ("undefined").__proto__;
        function f6() {
            const v7 = [10,-9007199254740991,512,7];
            const v8 = v7?.find;
            try { new v8("RKBrT"); } catch (e) {}
            function f10(a11) {
                const o12 = {
                    ...v7,
                };
                return f10;
            }
            return "RKBrT";
        }
        v5[Symbol.toPrimitive] = f6;
        let v15;
        try { v15 = v5(); } catch (e) {}
        const t19 = "localeCompare";
        t19[11] = "localeCompare";
        const v17 = ("RKBrT")["localeCompare"](v15, v5);
        v17 / v17;
        v5 < v15;
        /[^123]+/gudims;
        /\p{Nd}[^[\cz]]/vdisy;
        const v22 = /amuJ/dm;
        v22.e = v22;
    }
    f;
    [1000];
}
const v23 = new C3();
const v24 = new C3();
const v25 = new C3();
const v26 = v25?.__defineGetter__;
try { new v26(v25, v24); } catch (e) {}
class C31 extends C3 {
    e;
    set c(a33) {
        const v34 = (a35, a36, a37) => {
            -a36;
            return this;
        };
        function f39() {
            return v23;
        }
    }
    #c;
    static b = 1000;
    [234.3965285824761] = v25;
}
const v40 = new C31();
v40[1000] = v40;
new C31();
new C31();
let v43 = -1024;
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = this?.constructor;
    try { new v50(-1e-15, v43, v43, 1000); } catch (e) {}
}
F44.length;
const v53 = new F44();
v53.length = v53;
const v54 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v55 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
}
class C61 {
}
let v62 = -4294967297n;
v62--;
const v64 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v64[5];
const v66 = [601759695];
const v67 = v66?.toString;
try { new v67(); } catch (e) {}
for (let v70 = 0; v70 < 5; v70++) {
    function f72() {
        Array.d = Array;
        Array().unshift();
        new Set();
        function F81(a83, a84) {
            if (!new.target) { throw 'must be called with new'; }
            F81();
        }
        try {
            v54.forEach(Float64Array);
        } catch(e87) {
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C90 {
        }
        try { new C90(); } catch (e) {}
        const v92 = new C90();
        const v93 = v92?.constructor;
        try { new v93(); } catch (e) {}
        try {
            v92.__proto__ = F57;
        } catch(e95) {
        }
        const v96 = Symbol.toPrimitive;
        const o100 = {
            toString(a98, a99) {
            },
        };
        const o121 = {
            [522675525n](a103, a104) {
            },
            "c": v66,
            valueOf(a106, a107) {
                return a107;
            },
            [v62](a109, a110, a111, a112) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v64,
            ...v53,
            [v96]() {
            },
            "type": C61,
            valueOf(a115, a116) {
                return Symbol;
            },
            4: "Vre",
            toString(a118, a119, a120) {
                return a119;
            },
        };
        new Float32Array();
        v43 %= -268435456;
        const v125 = new Uint32Array(v55);
        v125[0];
        return undefined;
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
}
