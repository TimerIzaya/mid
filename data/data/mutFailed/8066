function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 65536;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
let v6 = new F0();
v6.e = v6;
function f7(a8, a9) {
    a8.b = a8;
    const v10 = a8.f;
    v10 & v10;
    a9.f;
    const o26 = {
        get f() {
            const v14 = this?.f;
            try { new v14(); } catch (e) {}
            try { this.asin(this, this, a9, v5); } catch (e) {}
            return F0;
        },
        [a8]: F0,
        "c": F0,
        p(a18, a19, a20) {
            let v21 = a9[4];
            ({"c":v6,"f":v21,} = v5);
            a8[9];
            return a9;
        },
    };
    const v27 = o26?.f;
    try { new v27(); } catch (e) {}
    const v29 = o26?.c;
    try { new v29(); } catch (e) {}
    try { new v29(); } catch (e) {}
    return o26;
}
const v32 = f7(v5, v6);
const v33 = v32?.f;
try { new v33(); } catch (e) {}
try { new v33(); } catch (e) {}
const v36 = v32?.f;
try { new v36(); } catch (e) {}
v36.prototype = v36;
try { new v36(); } catch (e) {}
f7(v32, v32);
const v40 = f7(v6, v4);
const v41 = v40?.f;
try { new v41(); } catch (e) {}
try { new v41(); } catch (e) {}
const v47 = 9 - 9;
const v48 = v47 ^ v47;
v48 < v48;
const v51 = Map.prototype;
try { v51.has(v32); } catch (e) {}
try { v51.clear(); } catch (e) {}
new Map();
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this?.constructor;
    try { new v57(); } catch (e) {}
    const v59 = this?.__defineGetter__;
    try { new v59(v40, v32); } catch (e) {}
}
const v61 = new F55();
try { v61.toString(); } catch (e) {}
v61.b = v61;
function f63(a64) {
    try { a64.call(a64); } catch (e) {}
    a64.d = a64;
    const o66 = {
    };
    return o66;
}
try { f63.call(v48); } catch (e) {}
const v68 = f63(f63);
v68.d = v68;
v68.g = v68;
v68.e = v68;
v68.__defineGetter__(v61, f63);
