new BigInt64Array(1692);
new Uint32Array(256);
new Int16Array(3);
[-1000.0,-2.2250738585072014e-308,2.6842528765189027,-4.428362832992621];
[-7.739899200475284,-2.220446049250313e-16,-2.0,-488936.0340294464,4.0,4.107597206884808,-4.3305351616160686e+307,17.090905373756414];
[-1.4263645959304283e+308];
const v12 = [];
const v13 = [v12];
class C15 extends Map {
    constructor(a17, a18) {
        super(v13);
    }
}
const v19 = new C15(v12, v13);
const v20 = new C15(v13, v19);
const v21 = new C15(v20, v19);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f26() {
    function f27(a28, a29) {
        const v34 = 317057.46349944477 % 4096;
        v34 >>> 2147483649;
        let v36 = a28 << -7;
        317057.46349944477 + 2147483649;
        const v38 = ~v34;
        ++v36;
        v38 << v36;
        return v34;
    }
    return f27;
}
Object.defineProperty(v25, "toString", { writable: true, configurable: true, get: f26 });
function f42(a43, a44) {
    new BigUint64Array(2, 3);
    return 2;
}
Uint32Array.valueOf = f42;
const v48 = new Uint32Array();
function f49() {
    function f50() {
        const o53 = {
            "g": -132626040,
            6: "-641657515",
        };
        return -132626040;
    }
    return Uint32Array;
}
v48.constructor = f49;
let v54 = -4294967297n;
const v55 = v54--;
const v56 = [601759695];
const v57 = [1073741824,1073741823,1376142744,1073741825];
function f59(a60, a61, a62, a63) {
    try { a60.toLocaleString(); } catch (e) {}
    const v65 = a60?.constructor;
    try { v65(); } catch (e) {}
    try { v65(); } catch (e) {}
    const v69 = arguments.length;
    Object.defineProperty(v19, "e", { configurable: true, enumerable: true, value: f59 });
    const v71 = v20["entries"](a62, ...v21, BigUint64Array, ..."entries", a61, v69);
    const v73 = Symbol.toStringTag;
    v20[v73] = v73;
    new Uint32Array(Symbol);
    try {
        v25.b = 5;
    } catch(e75) {
    }
    function f76() {
        let v78;
        try { v78 = ("Vre").charAt(4096); } catch (e) {}
        try { v78.lastIndexOf(); } catch (e) {}
        let v80;
        try { v80 = ("Vre").codePointAt(v25); } catch (e) {}
        v80 - v80;
        v80 ^ v80;
        let v83 = Float64Array;
        v83 = a61;
        let v84 = v25.length;
        v84++;
        try {
            v57.forEach(a61);
        } catch(e87) {
            e87.stack = e87;
        }
        const o98 = {
            "c": v54,
            "EPSILON": v56,
            valueOf(a89, a90) {
                return a89;
            },
            1073741824: v48,
            [v54](a92, a93, a94, a95) {
                eval();
            },
            "arguments": 5,
            256: a63,
        };
        return v84;
    }
    f76();
    const v101 = Array();
    let v102;
    try { v102 = v101.findLast(f59, v48); } catch (e) {}
    v101.unshift("entries", v71, "entries", v102);
    let v105;
    try { v105 = Int8Array.of(); } catch (e) {}
    try { v105.join(v65); } catch (e) {}
    const v107 = new Int8Array(v56);
    v107.c = a62;
    v107.c = v107;
    const v108 = v107.buffer;
    v108.constructor = Symbol;
    v108.maxByteLength;
    const v110 = v108.slice(v65);
    try { Int32Array(v110, arguments, v54); } catch (e) {}
    function f113(a114, a115, a116, a117) {
        return a117;
    }
    const v118 = new Int32Array();
    const v119 = v118[3];
    v119 + v119;
    for (let v121 = 0; v121 < 5; v121++) {
    }
    %OptimizeFunctionOnNextCall(f76);
    try { v57["find"](..."find", a63, ...v56, ...v57, ...522675525n); } catch (e) {}
    return a60;
}
for (let v124 = 0; v124 < 10; v124++) {
    f59(v48);
}
%OptimizeFunctionOnNextCall(f59);
f59(v56, v12, v55, f59);
