let v1 = 3768n;
let v3 = -4096;
const v4 = v3--;
let v5 = 2147483647;
const v7 = [v5,-7,9n,-7,v5];
let v9 = 1024;
[v9,...v9] = v7;
v7.__proto__;
try { new v9(9n, v1); } catch (e) {}
const v13 = new Date();
Math.min(v9);
v1 + v1;
v1--;
const v17 = v7[1];
[9n];
const v19 = [v1];
const v20 = [-3.0,874.0987878761755,288.2642160994669,5.940585883281705e+307,1.7976931348623157e+308];
const v21 = [5.0,-186169.40466921858,5.457445879511874e+307,-899.3540543254009,NaN,2.220446049250313e-16,8.874813344330924,1000000000000.0,-5.0];
new Float64Array(4096);
v9 in v7;
const v27 = v13.__proto__;
v21.length;
try { v20.toLocaleString(v9, v17); } catch (e) {}
new WeakSet();
new Uint8ClampedArray(127);
new BigUint64Array(6);
const v37 = v21?.values;
let v38;
try { v38 = new v37(); } catch (e) {}
[2.0,-1.0,4.9667272354322005,2.0];
function f40() {
    for (let v41 = 0; v41 < 5; v41++) {
        v5 = v41;
        %VerifyType(-v13);
        v9[v27] <<= v5;
        new Float64Array(v19);
        const v44 = v41 & f40;
        v44 - v44;
    }
    return f40;
}
%PrepareFunctionForOptimization(f40);
f40();
%OptimizeFunctionOnNextCall(f40);
f40();
try { new v38(); } catch (e) {}
v4 >> v19;
try {
    const o50 = {
    };
    new BigUint64Array(o50);
} catch(e52) {
}
