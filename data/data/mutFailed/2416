const v2 = new Uint8ClampedArray(256);
const v4 = new Uint8ClampedArray();
("async").lastIndexOf();
const v9 = new String();
Object.defineProperty(v9, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
const v12 = new Int16Array(13);
const v15 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
const v16 = [v15];
function F19(a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = this.constructor;
    try { new v24(a22, a21, a23); } catch (e) {}
    a23 + a23;
    try {
        this.b = v15;
    } catch(e27) {
    }
}
const v28 = new F19(1000000000000.0, v16, 0.0746389278020293);
new v28(453);
class C30 extends Int16Array {
    #d;
    get g() {
        v12 == this;
        try {
            Math.tanh(-1000.0);
            const v37 = [-2.220446049250313e-16,0.4010936999061169];
            try {
                v37.length = -2;
            } catch(e39) {
            }
            new Uint8ClampedArray(861340938, 453);
        } catch(e41) {
        }
        return this;
    }
    static #b;
}
new C30();
new C30();
new v15();
for (let v45 = 0; v45 < 25; v45++) {
}
const v46 = [1000000.0,-1.7976931348623157e+308];
const o47 = {
    ...v46,
};
const o49 = {
};
const v51 = new v4();
delete v51[-1.5286188982640463e+308];
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a63;
    } catch(e64) {
    }
}
new F60(257, v2);
class C72 extends SharedArrayBuffer {
}
class C73 {
}
9007199254740990 | -9007199254740990;
