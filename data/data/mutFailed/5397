function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -633718605;
    } catch(e3) {
    }
    try {
        this.d = -633718605;
    } catch(e4) {
        class C5 {
        }
        new F0(-1073741824, -268435456, -1073741824, -1073741824, ...F0);
    }
    try {
        this.c = -633718605;
    } catch(e9) {
    }
}
const v10 = new F0();
const v11 = new F0();
const v12 = new F0();
const v13 = [-4294967297,2,268435456,1935324185];
const v14 = [129770239,5,1,2147483649,4294967295,-2,60070];
const v15 = [-256,-65537,-647358455,-10,-1389121828];
-536870912 >> -536870912;
6 + 6;
function f21(a22, a23, a24, a25) {
    const o38 = {
        ...v14,
        "arguments": v15,
        "maxByteLength": 2,
        "arguments": v15,
        128: v12,
        __proto__: a23,
        "h": v12,
        4: v14,
        get c() {
            /\P{sc=Greek}/guiy;
            /b/vdmsy;
            /n/vds;
            function f30(a31) {
                return -9007199254740991;
            }
            const v35 = new Float32Array(2);
            new Int32Array(v35, 2);
            return this;
        },
        "a": v13,
    };
    return o38;
}
f21(v14, v11, v10, v12)[3];
const v41 = f21(-536870912, v11, v11, F0);
f21(v11, v11, v11, v41)[3];
const v45 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
class C46 {
    #p(a48, a49, a50, a51) {
    }
    constructor(a53, a54) {
        a54[2];
        this.constructor = f21;
        const v56 = this.constructor;
        v56.length = v56;
        try { new v56(); } catch (e) {}
        try {
            v45.#p();
        } catch(e59) {
        }
    }
}
try { C46.call(v12); } catch (e) {}
const v61 = new C46(Uint16Array, v45);
const v62 = v61?.constructor;
try { new v62(F0, v45, 2, v41); } catch (e) {}
