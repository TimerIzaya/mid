([-7,-18455])["pop"]();
const v6 = [];
const v9 = new Array(228);
gc(v9);
function f14(a15) {
    const o18 = {
        ...65536,
        5: 65536,
        __proto__: a15,
        valueOf(a17) {
        },
        "d": 4,
        "g": 65536,
        163: 4,
    };
}
f14();
class C20 {
    static {
        [];
        try {
            super.setInt8();
        } catch(e24) {
        }
    }
    [Array] = v6;
    static {
        function F26(a28, a29) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a29;
            } catch(e30) {
            }
        }
        const v31 = new F26(v9, this);
        new F26(Array, F26);
        new F26(v31, v9);
    }
}
Math.atan2(-0.0, -0.0);
const t39 = 228;
new t39();
const v39 = new Uint8Array(58091);
class C41 extends Uint16Array {
    constructor(a43, a44, a45) {
        super(v39);
    }
}
const v46 = new C20();
const v47 = new C20();
class C48 {
    constructor(a50, a51, a52, a53) {
        let v55 = 268435439;
        v55--;
    }
}
let v60;
try { v60 = v46.o(C20, v47, -1n, v9); } catch (e) {}
try {
    const t59 = "7MU";
    t59.valueOf = v60;
} catch(e61) {
}
new Uint8ClampedArray(4096);
const v70 = new Uint16Array(257, 58091, 1073741824);
const v73 = [-13063,230037640,0,-1717935321,257,0,1073741825];
const v74 = [-2051630605,509562611];
const v76 = new Float32Array(v73);
try { v74.sort(v76); } catch (e) {}
const v78 = new Float64Array(2998);
const v81 = new Uint8Array(6);
const v82 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
v82["findIndex"](gc);
(-1n).constructor;
function f87(a88, a89) {
    return f87;
}
const v92 = ["function",v81];
const o100 = {
    ...v70,
    __proto__: v78,
    "f": Uint8Array,
    "b": v82,
    m(a94, a95, a96, a97) {
        ("ignoreCase").normalize();
        return this;
    },
    4: Uint8Array,
    ...v70,
    "arguments": v92,
    "type": "function",
};
new Worker(f87, o100);
/((?:a+)?)/miuyd;
const v1 = /k/mvis;
/(?<a>.)\k<a>/vyd;
function f3() {
    return v1;
}
new WeakSet();
new Float64Array(47);
const v13 = new Int16Array(5, 5);
new Int16Array(1949);
function f17(a18, a19, a20) {
    const o21 = {
        __proto__: v13,
        6: 5,
        "e": a18,
    };
    return o21;
}
const v22 = f17();
const v23 = f17(v13, 5, Int8Array);
let v24 = f17();
try {
    v24 >>>= v24;
} catch(e25) {
}
v13[1729093431] = Int16Array;
const v26 = v22[8];
for (let v27 = 0; v27 < 25; v27++) {
    "p" + v27;
    v23[1949] = v27;
}
new v26(127);
new BigUint64Array(14);
(-13545).constructor;
const t33 = 1949;
const v37 = new t33();
try { v37.toExponential(129n); } catch (e) {}
