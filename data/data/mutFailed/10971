let v1 = -9223372036854775807;
class C3 {
    static set c(a5) {
        v1 = C3;
    }
    static h = -2147483649;
    static #b;
    [-2147483649] = v1;
    toString(a7, a8) {
        try {
            this.c = a8;
        } catch(e9) {
        }
        new Float32Array(3193);
        const v15 = new Float64Array(129);
        new Uint8Array(2359);
        return v15;
    }
}
const v19 = new C3();
const v20 = new C3();
const v21 = new C3();
const v22 = new C3();
let v23 = v20.c;
try { v23(v21, v1, v21, v1); } catch (e) {}
v23 = -32660;
/a\S+/vim;
const v26 = /E?/gudm;
const v27 = /l(?:ab)|cde/uy;
[2.0,-1000.0,-0.0,0.019813091002293337,-4.0,-5.91661660037079,-1000000000000.0,-3.6539751187289444e+307,-375.08220777112024,-1000000000.0];
[6.025943444207434e+307,1.0,-3.901473022058406,-938836.3901776768,3.0,868.5585044368313,1000.0,0.08234163854879839,2.0,2.2250738585072014e-308];
const v30 = v19.d;
C3.f;
const v32 = -2147483649 > v26;
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this.a?.[9];
    v20[268435441];
    const v40 = v22 ** v32;
    try {
        const o41 = {
        };
        this.fuck(F33, v27, o41, [v38,v40,C3,-32660,v23]);
    } catch(e44) {
    }
    try {
        this.c = a35;
    } catch(e45) {
    }
    try {
        this.h = a36;
    } catch(e46) {
    }
    try {
        this.d = v1;
    } catch(e47) {
    }
}
new F33(v30, v20);
new F33(v26, v19);
new F33(v26, v19);
[286649.6474688845];
new Int32Array(240);
new Uint32Array(2837);
new Int32Array(4);
function F64(a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    const v68 = this?.constructor;
    try { new v68("a", "a"); } catch (e) {}
    try {
    } catch(e70) {
    }
    try {
    } catch(e71) {
    }
    try {
    } catch(e72) {
    }
}
new F64("a", "-2147483648");
new F64("-2147483648", "yRMy");
function F75(a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e80) {
    }
}
function F81(a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
}
