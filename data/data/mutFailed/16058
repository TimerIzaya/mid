const v5 = new BigInt64Array(989);
let v6;
try {
const t0 = 9223372036854775807;
v6 = t0(BigInt64Array, 9223372036854775807);
} catch (e) {}
let {"f":v7,} = v6;
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a12;
    } catch(e14) {
    }
    try {
        this.e = a13;
    } catch(e15) {
    }
    try {
        this.g = a11;
    } catch(e16) {
    }
}
new F8(9223372036854775807, 9223372036854775807, -1708487161, -1708487161);
new F8(-1708487161, 9223372036854775807, 268435439, -1708487161);
new F8(v7, 268435439, 9223372036854775807, 989);
const v22 = new Int32Array(65);
new Uint16Array(128);
const v31 = new Uint16Array(209);
const v32 = 209 > Uint16Array;
try {
    v31.__proto__ = v31;
    for (let v33 = 0; v33 < 32; v33++) {
        v5["p" + v33] = v33;
    }
} catch(e36) {
}
let v37 = 1829;
const v39 = new Uint8Array(v37);
Object.defineProperty(v39, v32, { writable: true, configurable: true, enumerable: true, value: v37 = 209 });
v39[8] = Uint16Array;
let v40;
try { v40 = v37(); } catch (e) {}
try { v31.forEach(v40, v40); } catch (e) {}
const v44 = new Float64Array(3916);
/(\xed\xb0\x80)\x01/vdsy;
/a[a-z]/vim;
let v47;
try { v47 = v40(F8, 209, v32); } catch (e) {}
~209;
try { v7(); } catch (e) {}
const v50 = v40 / v22;
v39.find(v50, v50, Int32Array, v47, ...v44, Float64Array);
