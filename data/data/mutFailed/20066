const v0 = [-2.7678884624380107,1000.0,-627.6698710319579,5.0,-4.880417279154299,5.0];
const v2 = Int8Array.prototype;
let v3;
try { v3 = v2.hasOwnProperty(v2); } catch (e) {}
const v7 = new Uint32Array(381);
const v8 = new Float32Array(v7);
try { v8.toSorted(v8); } catch (e) {}
const v10 = [-1.0,6.385085541194329,-322.71743955033276,1000000000000.0,-5.0,17.179689393894932,1000.0];
const v12 = ([5.0,-2.220446049250313e-16,0.8684949334615093])?.filter;
try { new v12(v3); } catch (e) {}
try { Uint32Array.from(v10); } catch (e) {}
new Uint32Array(13);
function f18(a19, a20) {
    const o23 = {
        set b(a22) {
        },
    };
    return o23;
}
const v27 = new Set();
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a30;
    } catch(e32) {
        for (let [v33,v34] of a30) {
        }
    }
    this.h = v27;
    v27.constructor;
    class C39 {
        constructor(a41) {
            ("buffer")["search"](..."buffer", ..."search", ..."search", a41, ..."search", 52021);
            super.d = arguments;
        }
        static h;
        static #a;
        [-5.0] = -5.0;
        #g = "buffer";
        static #c;
        static #e = C39;
    }
    const v45 = new C39(C39);
    const v46 = new C39(v45);
    new C39(v46);
    -256n >> -256n;
    try {
        v27[this];
        [WeakSet];
        let v53 = 0;
        v53--;
        [v53];
        const v57 = new BigInt64Array();
        class C59 extends Uint16Array {
        }
        const v60 = new C59();
        function f61(a62, a63) {
            a63[1] = a63;
        }
        f61(v57, v60);
        new F28();
        this.b = Set;
    } catch(e66) {
    }
}
11290 >> 11290;
const v69 = [-1274164195,9007199254740992,1504853157,-9223372036854775807,268435439,-1024,9223372036854775807,11173,127,13];
gc();
const v73 = /a\w/gudsy;
const v74 = /ka{0}/guims;
v74.g = v74;
class C75 {
}
C75.d = C75;
const v76 = new C75();
const v77 = v76?.__lookupSetter__;
try { new v77(v2); } catch (e) {}
function f79() {
    gc();
    return v74;
}
v76.constructor = f79;
const v82 = new C75();
v82.constructor = f79;
const v83 = v82?.constructor;
try { new v83(); } catch (e) {}
function f85(a86, a87) {
    a86.sticky;
    const o89 = {
        ...v74,
        "d": v82,
        "c": a87,
        "g": a87,
        "f": a86,
        "a": v76,
        7: C75,
        "e": v74,
        "b": v73,
    };
    return o89;
}
f85.caller = f85;
%OptimizeFunctionOnNextCall(f85);
(-8n).constructor;
const v92 = -1024;
const v94 = new Int32Array(1024);
SharedArrayBuffer.e = v92;
function f96(a97, a98) {
}
class C100 {
    constructor(a102, a103) {
        const v104 = this?.__defineSetter__;
        try { new v104(Int32Array, a103); } catch (e) {}
        const o106 = {
            __proto__: a103,
        };
        function f107(a108) {
            try {
                v27.add(o106);
            } catch(e110) {
            }
        }
        Object.defineProperty(o106, "undefined", { writable: true, set: f107 });
        o106.h = o106;
        o106[a103] = o106;
    }
}
const v111 = new C100();
function f112() {
    return Float32Array;
}
function f113(a114) {
    v10[f79];
}
Object.defineProperty(v111, "h", { get: f112, set: f113 });
new C100(-1000000000.0, v111);
SharedArrayBuffer.e = v94;
[2,-65537,-4096,-991120897,4416,255,512];
const o118 = {
};
o118.e = o118;
const o119 = {
};
o119.b = Float32Array;
o119.b = o119;
class C120 {
    #d;
}
try { new C120(); } catch (e) {}
const v122 = new C120();
function f123() {
    Int8Array.b = Int8Array;
    return f123;
}
const o125 = {
    __proto__: v122,
    ...v122,
};
function f126() {
    function F127(a129, a130) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v131 = new F127();
    function f132() {
        const o138 = {
            [1836424012](a135, a136, a137) {
            },
            "e": v131,
        };
        return F127;
    }
    f132();
    return v74;
}
o125.constructor = f126;
const v140 = o125?.constructor;
try { new v140(); } catch (e) {}
[v69,[1,-46352,4294967296,57124,-52162,-14,1073741823,-2147483649,12],11290];
const v144 = [v0];
const v147 = new Uint16Array(3327);
const v148 = [-2038832922,-14];
v147.set(v148);
let v151 = 946.0676210033328;
v151--;
const o159 = {
    1: 8,
    n(a154, a155) {
        return a154;
    },
    get e() {
    },
    "b": v148,
    m(a158) {
        return a158;
    },
    __proto__: v151,
};
const v160 = [v69,v144];
try { v160.slice(-8n, f123); } catch (e) {}
class C162 {
}
try { C162.apply(Uint32Array, f85); } catch (e) {}
const v164 = new C162();
const v165 = v164?.constructor;
try { new v165(); } catch (e) {}
class C167 {
    set b(a169) {
    }
}
let v170 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
function f171() {
    return f112;
}
function f172(a173) {
    function f174(a175) {
        return f174;
    }
}
Object.defineProperty(v170, "valueOf", { enumerable: true, get: f171, set: f172 });
v170 &= v170;
for (const v176 in v164) {
}
