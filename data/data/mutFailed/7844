Array(-12302);
function f4() {
    function F5(a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v8 = this.constructor;
        const v9 = v8.bind(F5, F5, F5);
        try { v9(); } catch (e) {}
        try { new v8(); } catch (e) {}
    }
    const v12 = new F5();
    return v12;
}
f4();
class C16 {
    #valueOf(a18, a19) {
        for (let v20 = 0; v20 < 32; v20++) {
            this["p" + v20] = v20;
        }
        return -14;
    }
    static d = -14;
    [9] = -14;
    static 3;
    static c;
}
C16.d = C16;
const v23 = new C16();
v23[9] = v23;
const v24 = v23[9];
v24 - v24;
new C16();
const v27 = new C16();
let v28 = v27[9];
v28++;
1000000.0 ^ 1000000.0;
1000000.0 >>> 1000000.0;
-2.9702076467547567 - -2.9702076467547567;
1126838905 - 1126838905;
1126838905 - 1126838905;
Reflect.construct(Int8Array, [1126838905]);
class C47 {
    [-2] = 31876;
}
try { new C47(); } catch (e) {}
C47.name = C47;
const v49 = new C47();
const v50 = v49?.constructor;
try { new v50(); } catch (e) {}
Math.acos(-450746.69945373747 ^ -450746.69945373747);
const v58 = new Uint8Array(3521);
v58.includes(false);
const v61 = v49?.constructor;
try { new v61(); } catch (e) {}
const v63 = [-20096,4294967296,-65537,-2];
const v64 = [-1947047520];
function F65() {
    if (!new.target) { throw 'must be called with new'; }
}
class C67 extends F65 {
}
const o68 = {
};
o68.c = C67;
const v69 = [v64,v64,v64,v63];
v69[1];
v69[3][2];
const v73 = [v69];
try { v73.map(v69); } catch (e) {}
const v75 = v73?.filter;
v75.length;
try { new v75(v49); } catch (e) {}
("slice")[0];
const v80 = v63["slice"](v73);
const v81 = v80?.findIndex;
try { new v81(-2.9702076467547567); } catch (e) {}
try { v80.fill(v80); } catch (e) {}
