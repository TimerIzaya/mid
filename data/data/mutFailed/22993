let v3 = "acosh";
class C5 {
}
const v7 = String.f;
v3 **= "S9TGf";
C5[7] <<= v7;
const v11 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
const v12 = [45780,127,284677781,1640504839,7,10000,0];
function f13(a14, a15, a16) {
    try { a15.groupToMap(v7); } catch (e) {}
    return a15;
}
const v18 = f13(v12, v11);
function f19() {
    function f21(a22) {
        a22?.[this];
        [-821423662,-62440,-4096,268435441,-9223372036854775808,2147483649,-4096,9223372036854775807];
        [-9223372036854775807,-1024,1564897736];
        [26753,256,-4];
    }
    this.onmessage = f21;
    this[1024] &= v7;
}
const v29 = [];
const o30 = {
    "arguments": v29,
    "type": "function",
};
new Worker(f19, "function");
v18.fill();
const v34 = ["function","function","o"];
[v34,"o",[v34,v34,"-12","o"],v3];
[-256];
[4,1141437290,-2147483649,15,1832067047,576558488,129,-9007199254740990,1];
[-390709130,-39302,268435439,7,-128,-2070650414,268435439,-7,7];
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
}
new Uint32Array(DataView);
class C48 {
}
const v49 = new F40();
const v50 = new F40(F40, F40, v49);
function f51() {
    class C54 extends ([f51]).constructor {
    }
    const v55 = new C54();
    const v56 = v55.fill();
    try { v56.map(); } catch (e) {}
    return f51;
}
for (let v59 = 0; v59 < 5; v59++) {
    function f60() {
        const v62 = ("1073741824").constructor;
        return v62(f60, v59, v62, "1073741824", v62);
    }
    %OptimizeFunctionOnNextCall(v3);
    const v64 = v49 || undefined;
    -1000000000000.0 >= v64;
    try { new v64(); } catch (e) {}
    const v71 = new Int8Array(1392);
    v71.lastIndexOf(16);
    Object.defineProperty(v64, v50, { value: v49 });
}
