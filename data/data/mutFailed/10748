new Float64Array(8);
const v5 = new Int8Array(0);
let v6 = 4;
v6--;
new Uint16Array(v6);
const v10 = [1988697722,1,257,4294967297,51895,35016];
const v11 = [9223372036854775807,-20901,2147483649];
0.0 << 0.0;
const v14 = -Infinity;
for (let v16 = 0; v16 < 25; v16++) {
    Array(36862);
}
Math.pow(-1073741824, v14);
const v24 = new Int8Array(964446029);
const v25 = v24?.constructor;
try { new v25(v10, v24, v24); } catch (e) {}
const v27 = [65536,11873];
try { v27.sort(v11); } catch (e) {}
new Float32Array(2);
new Float32Array(10);
try { Int16Array.from(v5); } catch (e) {}
const v38 = new Int16Array(127);
v38[125];
v10.constructor;
try { v5.apply(); } catch (e) {}
Math.sqrt(1024);
~1000;
const v48 = new Uint16Array(257);
const v49 = [v48,v48,v48,v48];
function f50() {
    return v49;
}
const v52 = new Int16Array();
const v53 = v52?.entries;
const v54 = [601759695];
const v55 = [1073741824,1073741823,1376142744,1073741825];
v55.forEach(1000);
try { v55["find"](..."find", v53, ...v54, ...v55); } catch (e) {}
try { new v53(); } catch (e) {}
let v60 = -14;
class C61 {
}
function f62(a63, a64, a65, a66) {
    return a66;
}
({"b":f62,"f":v60,} = C61);
Object.defineProperty(v52, Symbol.unscopables, { writable: true, configurable: true, enumerable: true, value: 1000 });
with (v52) {
    byteLength % byteLength;
    byteLength || byteLength;
}
