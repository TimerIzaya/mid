const v3 = [-2147483647,333595822,-65536];
try { v3.fill(-1); } catch (e) {}
const v5 = [1106348117,-924784047];
v5[1];
const v7 = [14,-6,4294967297,2143345678,68292031,-2147483649,6,1073741825,10000];
try { v7.lastIndexOf(-1); } catch (e) {}
function f9(a10, a11, a12) {
    a10 >>> a10;
    const v14 = a10 * a10;
    v14 - v14;
    ~a12;
    const o28 = {
        toString(a18, a19, a20, a21) {
            d = a10;
            this[a10] <<= 783562419;
            super[a10] = v7;
            try {
                const t17 = "toString";
                t17.length = 3;
            } catch(e26) {
            }
            try {
                a19.__proto__ = "toString";
            } catch(e27) {
            }
            return "-562260042";
        },
        [v5]: v5,
        ...v3,
        [a11]: a12,
    };
    return o28;
}
f9(1374916379, v5, 783562419);
f9(783562419, v5, 1374916379);
const v31 = f9(-1, v7, 783562419);
class C32 extends f9 {
    get f() {
        let v37 = -1000.0;
        Math.log(-31210);
        -31210 << -3;
        Math.acos(v37);
        v37--;
        Math.acosh(-3);
        Math.sin(v31);
        return Math.random();
    }
}
new C32();
const v46 = new C32();
v46[2];
const v48 = v46[2];
v48 <= v48;
new C32();
const v53 = new Int32Array(3743);
try { new Uint8ClampedArray(v48, v53, v46); } catch (e) {}
const v57 = new Uint8ClampedArray(3776);
const v60 = new BigInt64Array(10);
127 - 127;
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
const v64 = new Uint16Array(127);
v64[44] = v64;
v64[49];
Uint8Array.name;
const v69 = new Uint8Array(255);
v69[21];
let v71 = 179;
v71--;
BigInt64Array.g = BigInt64Array;
new BigInt64Array(v71);
const v75 = [];
let v76;
try { v76 = v75.toSpliced(v60, v57); } catch (e) {}
try { v76.findLast(v5); } catch (e) {}
let v78 = 16;
const v79 = v78--;
v79 >>> v79;
const v82 = new Int8Array(v78);
v82[13] = v82;
v82.toSorted();
function f84() {
}
class C85 {
    o(a87, a88) {
        for (const v90 of "bigint") {
        }
        f84();
    }
}
try { new C85(); } catch (e) {}
const v93 = [f84];
try { v93.reduceRight(v3); } catch (e) {}
const v95 = [f84,v93,C85];
try { v95.groupToMap(Uint8ClampedArray); } catch (e) {}
v95[1] = v95;
1000.0 + 1000.0;
let v100 = 8.806760127177498;
v100++;
const v102 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
205 - 205;
const v106 = new BigInt64Array(205);
try { v106.toSorted(v106); } catch (e) {}
const v108 = v106[205];
try {
    v108.toString = v108;
} catch(e109) {
    e109.b = e109;
}
const v110 = [-1803975943,57715,-9007199254740992];
const v111 = [2147483647,13,536870912,-13,-1024,536870887];
try { v111.toString(); } catch (e) {}
const v116 = new Uint8ClampedArray(1000);
const v120 = +(v116 ^ 3);
const v121 = v120 + -3.0;
v121 | v121;
v121 | v121;
try { ("p").localeCompare(v3); } catch (e) {}
try { ("undefined").fontsize("undefined"); } catch (e) {}
try { ("undefined").trim(); } catch (e) {}
const v129 = ["undefined",v100,v110,345168.6487633812,"undefined"];
[1000.0,v100,v129,v102,v110];
[v129];
const v135 = (a136, a137, a138) => {
    try { ("function")["toUpperCase"](); } catch (e) {}
    "-268435456" ^ a136;
    class C143 {
        9 = 6;
    }
    return a138;
};
Symbol.d = Symbol;
Symbol.for(Symbol.unscopables.description);
class C149 {
}
1468 >>> 1468;
const o153 = {
};
o153.d = o153;
const v155 = new ArrayBuffer(2, o153);
const v157 = new Int8Array(v155);
v157[1];
const v160 = [-4096,13,16,6] + v157;
let v162;
try { v162 = ("string").link("string"); } catch (e) {}
try { v162.valueOf(); } catch (e) {}
Symbol.for(Symbol.iterator.description);
const v169 = [];
try { v169.findLast(v5); } catch (e) {}
function f171() {
    const o175 = {
        toString() {
            super[this];
        },
        ...v169,
        n() {
            return this;
        },
    };
    try { o175.n(); } catch (e) {}
}
try { f171(); } catch (e) {}
f171.g = f171;
f171();
new Uint16Array(4294967295, 4294967295);
const v182 = this?.BigInt;
try { new v182(v78); } catch (e) {}
Float32Array.e = Float32Array;
let v185 = 256;
v185++;
const o189 = {
    m() {
        const o188 = {
        };
    },
};
function F190(a192) {
    if (!new.target) { throw 'must be called with new'; }
    const v193 = [-0.685155357392599,5.0];
    try { v193.reduceRight(this); } catch (e) {}
    function F195(a197, a198, a199, a200) {
        if (!new.target) { throw 'must be called with new'; }
        a198[7] = a198;
        try { a199.valueOf(); } catch (e) {}
        const v202 = this.constructor;
        try { new v202(a198, F190, v202); } catch (e) {}
        v193.length &= 1;
    }
    try { F195.bind(v3); } catch (e) {}
    try { new F195(v120, v160, v160, v160); } catch (e) {}
    new F195();
}
const v208 = new F190();
new F190(v208);
const v211 = new Int32Array();
function F212(a214, a215, a216) {
    if (!new.target) { throw 'must be called with new'; }
    const v217 = this?.constructor;
    try { new v217(Uint16Array, a216, a216); } catch (e) {}
    a214 * a214;
    a216++;
    this.d = a214;
    this.g = Int32Array;
}
new F212(v185, v211, 4294967295);
class C223 {
    constructor(a225, a226, a227) {
    }
}
Math.asinh();
new Float32Array(Float32Array, Float32Array);
