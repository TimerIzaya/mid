class C3 {
    h;
    static p(a5, a6) {
        const v8 = Symbol.isConcatSpreadable;
        const t4 = "2115972667";
        t4[v8] = -4.0;
        v8 - v8;
        super.h = a6;
        try { a6(this, 0.0, "2115972667", this); } catch (e) {}
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a13;
            } catch(e15) {
            }
            try {
                this.b = a5;
            } catch(e16) {
            }
        }
        new F11(a6, v8);
        new F11(-4.0, this);
        new F11(-4.0, "2115972667");
        return "2115972667";
    }
}
function f20() {
    const t27 = "2115972667";
    t27[-4.0] &&= 0.0;
    try {
        const t30 = "2115972667";
        t30.toString = C3;
    } catch(e21) {
    }
    return 0.0;
}
C3.toString = f20;
const v22 = new C3();
const v23 = new C3();
new C3();
function f25() {
    return -4.0;
}
class C29 extends f25 {
    constructor(a31, a32, a33, a34) {
        function f35() {
            return f25;
        }
        Object.defineProperty(a32, "toString", { enumerable: true, get: f35 });
        super();
        Math.random();
        ++a33;
        Math.atanh(1e-15);
        try { ("2115972667").concat(a31, 0.0, a32, a34); } catch (e) {}
    }
    [-1000000000000.0] = 0.0;
    g;
    [f25] = f25;
    #e = v23;
}
new C29(1000000000.0, -4.0, -4.0, -1000000000000.0);
const v45 = new C29(-1000000000000.0, C3, 0.0, 0.0, -1000000000000.0, v22, v23);
new C29(0.0, v45, -1000000000000.0, -1000000000000.0);
for (let v50 = 0; v50 < 5; v50++) {
    v50 < v50;
    v50++;
}
for (let v53 = 0; v53 < 10; v53++) {
    const o65 = {
        m(a57) {
            let v58 = -9007199254740991;
            v58++;
            v58 >> v58;
            const v63 = new Int8Array();
            let v64 = 3;
            for (let i = 0; i < 5; i++) {
                [...v64] = v63;
            }
            return v58;
        },
    };
    o65.m(o65);
}
