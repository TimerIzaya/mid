class C3 {
    constructor(a5) {
        function f6() {
            return a5;
        }
        a5.toString = f6;
        this.FPw = this;
        a5 ^ a5;
        const v11 = this.g;
        v11 >>> v11;
        try {
            const o13 = {
            };
            const o14 = {
            };
            o14.f = o14;
            this.fuck(-1.0, o13, o14);
        } catch(e16) {
            e16.message = e16;
        }
    }
    ["FPw"];
    [-429.653561808935] = "FPw";
    g = -429.653561808935;
}
C3.prototype;
try { new C3(-1.0); } catch (e) {}
const v19 = new C3(-429.653561808935);
function f20(a21) {
    -(536870912n << 536870912n);
    return -1.0;
}
v19.toString = f20;
const v25 = new C3(-1.0);
const v26 = new C3(C3);
v26.a = v26;
const v27 = [v19,v19];
v27[1];
try { v27.toString(); } catch (e) {}
const v30 = [v27,v25,v27,v27,v27];
const v31 = [v30,"FPw",v19];
let v32;
try { v32 = v31.copyWithin(v30, v31); } catch (e) {}
try { new BigInt64Array(v27, v32, C3); } catch (e) {}
const v36 = new BigInt64Array(256);
try { v36.entries(); } catch (e) {}
let v40;
try { v40 = Int16Array.from(-429.653561808935); } catch (e) {}
try { v40.entries(); } catch (e) {}
new Int16Array(50);
new Int32Array(105);
function f47(a48, a49, a50, a51) {
    -a49;
    a51 >>> a51;
    a48 + a48;
    a51 === a51;
    try { arguments.hasOwnProperty(arguments); } catch (e) {}
    arguments[50608] = arguments;
    arguments[4] = arguments;
    return a51;
}
function f58() {
    const o59 = {
    };
    o59.h = o59;
    return f58;
}
try { f58(); } catch (e) {}
%OptimizeFunctionOnNextCall(f58);
f58();
56885 % 56885;
56885 * 56885;
const v66 = new Int32Array(56885);
v66[10244];
~f47(...v66, 127);
