function f0() {
}
const v3 = new Float32Array(14);
let v5 = Float64Array;
v5.BYTES_PER_ELEMENT = v5;
v5.valueOf = f0;
const v6 = new v5(7);
const v9 = new Int32Array(5);
try { v9.join(v5); } catch (e) {}
const v11 = [-65535,574647448,1073741825,4294967296,1000,-10,14847035];
const v12 = v11[4];
v11[343] = 5;
Object.defineProperty(v11, 355, { configurable: true, enumerable: true, set: f0 });
const v13 = v12();
v3[v11] = 14;
try { v11.reduceRight(f0); } catch (e) {}
v5++;
[6,1073741823,1073741823,536870888,10];
[-1073741824,-7332,1226249935,9,512,1073741823,-1];
function F18() {
    if (!new.target) { throw 'must be called with new'; }
}
const v20 = new F18();
const v21 = v20?.constructor;
try { new v21(); } catch (e) {}
const v23 = new F18();
const v24 = v23?.__defineGetter__;
let v25;
try { v25 = new v24(v23, v23); } catch (e) {}
function f26(a27) {
}
try { new f26(v13); } catch (e) {}
const v29 = f26(v23);
f26(v20);
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v32.p16 = 5;
function f33() {
    return v21;
}
f33.g = f33;
function f34(a35) {
    a35 >>> a35;
    let v37;
    try { v37 = v6.reverse(); } catch (e) {}
    const v38 = v37?.constructor;
    try { new v38(v37, 5, v37); } catch (e) {}
}
Object.defineProperty(v32, "p13", { configurable: true, get: f33, set: f34 });
const v40 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
for (let v42 = 0; v42 < 25; v42++) {
    v32["p" + v42] = v42;
}
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this?.constructor;
    try { new v49(this, v29); } catch (e) {}
}
try { new F45(7, 7); } catch (e) {}
new F45(v40);
class C53 {
}
-v13;
const v56 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v57 = [601759695];
v57[0] = v57;
const v58 = [1073741824,1073741823,1376142744,1073741825];
522675525n >= 522675525n;
function f61(a62, a63, a64, a65) {
    function f66() {
        let v69 = Float64Array;
        v69 = a63;
        b = v57;
        const v70 = v56.length;
        try {
            v58.forEach(v69);
        } catch(e72) {
        }
        const v73 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v75 = Symbol.toPrimitive;
        const o81 = {
            toString(a77, a78) {
                const v79 = a65 && v69;
                a77 *= v75;
                return v69;
                v79 <= v73;
                return v5;
            },
        };
        const o101 = {
            "c": a64,
            [522675525n](a84, a85) {
            },
            "c": v57,
            valueOf(a87, a88) {
            },
            "b": -4294967295,
            [-4294967297n](a90, a91, a92, a93) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v56,
            "a": v70,
            "d": -4294967295,
            "h": Symbol,
            "f": a63,
            __proto__: Symbol,
            ...v57,
            "type": "Vre",
            ...v25,
            valueOf(a95, a96) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a98, a99, a100) {
            },
            5: -4294967295,
            6: a62,
        };
    }
    a64();
    try { Int8Array.toString(); } catch (e) {}
    new Int8Array();
    %OptimizeFunctionOnNextCall(f66);
    try { v58["find"]("find", a65, v57, v58); } catch (e) {}
}
for (let v108 = 0; v108 < 10; v108++) {
    f34();
}
%OptimizeFunctionOnNextCall(f61);
const v110 = new C53();
const v111 = v110?.constructor;
try { new v111(); } catch (e) {}
try {
    new F18();
} catch(e114) {
}
f61();
