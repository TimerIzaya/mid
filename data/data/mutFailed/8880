const v0 = [];
class C7 {
    #valueOf(a9, a10) {
        const v12 = Symbol.match;
        this[v12] = -5.605869200168339e+307;
        const v13 = super.c;
        let v14;
        try { v14 = v0.includes(v12, v13); } catch (e) {}
        v0[4] = v0;
        v14 ** a9;
        return this;
    }
    4;
    9 = -5.605869200168339e+307;
    [-2];
    c = v0;
}
new C7();
const v17 = new C7();
new C7();
const v19 = /dC/vdsy;
/[{12,[\d-z](?!a)?a]/gy;
const v21 = /(Y(?<=a)?)/vdims;
function f22() {
    const v24 = [8n,8n,8n,8n];
    /.a\bc/gvdimsy;
    /[]\w|\dPt+/gud;
    /(ya\n)/uimy;
    v19.sticky;
    [-4096,-10,536870889,9647,16,-6];
    [-38789];
    const v31 = [226840225,9007199254740991,268435441,-9];
    const v32 = v24 > 8n;
    let v33 = 0;
    for (let v34 = 0; v34 < 5; v34++) {
        Array(36862);
    }
    while ((() => {
            C7[193] = 539181.8062793713;
            const v38 = new C7(8n, v17, v21, 539181.8062793713, v33);
            delete v38?.c;
            v31[539181.8062793713];
            typeof v24 === "function";
            return v33 < 10;
        })()) {
        for (let v46 = 0; v46 < 5; v46++) {
            "n" + v46;
        }
        v33++;
    }
    return v32;
}
%PrepareFunctionForOptimization(f22);
f22();
%OptimizeFunctionOnNextCall(f22);
f22();
