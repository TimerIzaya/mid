function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    function f10(a11, a12, a13, a14) {
        a11.length;
        a13++;
        const o17 = {
        };
        return o17;
    }
    try {
        this.b = 640741.1207165401;
    } catch(e18) {
        function F19(a21) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Array.__proto__ = this;
    }
}
const o27 = {
    "execution": "async",
    "type": "major",
};
gc(o27);
new F6(-2.220446049250313e-16, -2.6699922389590274);
new F6(8.128563001201364, 0.15776430581889267);
new F6(640741.1207165401, 640741.1207165401);
function f32(a33) {
    return a33;
}
Worker(f32);
const v40 = new Int32Array(1024);
for (const v41 of v40) {
    const o43 = {
    };
    gc(o43);
    new SharedArrayBuffer(1024);
}
new Uint32Array(256);
new Uint8ClampedArray(2762);
new Uint16Array(2);
const o65 = {
    toString(a55) {
        function f57(a58, a59, a60, a61) {
            arguments.toString();
            return f57;
        }
        %OptimizeFunctionOnNextCall(f57);
        f57(-4294967297n, f57);
        return a55;
    },
};
o65.toString();
function F67(a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C72 extends [this,this,this,this,this] {
        }
    } catch(e73) {
    }
}
new F67();
