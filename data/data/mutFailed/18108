new Int32Array(257);
function f5(a6, a7) {
    function F8(a10, a11) {
        if (!new.target) { throw 'must be called with new'; }
        a11 * a11;
        const v13 = this.constructor;
        2 >= 2;
        try { new v13(this); } catch (e) {}
    }
    return Float32Array;
}
Float32Array.toString = f5;
const v17 = new Float32Array(241);
function f18() {
    function f19(a20, a21) {
        return f19;
    }
    const v23 = new Promise(f19);
    v23.then(f19);
    v23.then();
    return f18;
}
f18();
const v29 = new Float32Array(10);
class C30 {
    static valueOf(a32, a33, a34, a35) {
        return 1073741823;
    }
    m(a43, a44, a45) {
        super.e |= a45;
        const v47 = Symbol.unscopables;
        v29[v47];
        [612.5672093852802,1.6961647209918268e+308,-1.3271680910094439,-1000.0,304368.7701575381];
        [1000000.0];
        [-284118.9807223616,-962747.2907613097,1000000000.0,-1.4854735554152907e+308,-3.6650521620830556,294.4110655724253,-1000000.0,1.1439719683263443e+308,-326436.26535461866];
        return v47;
    }
}
function f52(a53, a54) {
    try { a54["setUTCDate"]("setUTCDate", "setUTCDate", "setUTCDate", "setUTCDate", a54); } catch (e) {}
    return a53;
}
C30[Symbol.iterator] = f52;
let v59 = new C30();
const v60 = new C30();
new C30();
class C62 extends Float32Array {
    [v17] = 241;
    static #f = v29;
    [Float32Array];
    constructor(a64, a65, a66, a67) {
        super(C30, a65);
        [5.0,2.0,279420.22278184025,4.0,0.6549430135303121,1000.0,1.7976931348623157e+308,2.7544424459141227e+307,5.0];
        let v69 = [0.3093389203423924,NaN,-0.0,-2.0,-2.0,1e-15];
        ({"b":v69,"length":v59,} = [-4.0,-1.4627124253409995e+308,3.0,-1.0,-0.014066298578033098]);
        const v71 = super.fill(257, 10, 241);
        Object.defineProperty(v71, Symbol.toPrimitive, { writable: true, enumerable: true, value: f18 });
        super[v71];
        const v76 = Symbol.iterator;
        const o85 = {
            [v76]() {
                let v78 = 10;
                const o84 = {
                    next() {
                        v78--;
                        const v82 = v78 == 0;
                        const o83 = {
                            "done": v82,
                            "value": v78,
                        };
                        return o83;
                    },
                };
                return o84;
            },
        };
    }
}
new C62(257, 241, v59, v59);
new C62(241, 241, v59, v60);
new C62(257, v59, C62, v59);
const v89 = [-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757];
function f90(a91) {
    new Date();
    return Symbol;
}
v89[Symbol.toPrimitive] = f90;
const v97 = new Uint32Array(v89, Uint32Array, v89);
const v99 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const o103 = {
    [-206.79565552697056]: 352693014,
    get g() {
    },
    "g": -206.79565552697056,
};
const v104 = v99.fill(v99, v89);
const v105 = [601759695];
const v106 = [1073741824,1073741823,1376142744,1073741825];
function f108(a109, a110, a111, a112) {
    function f113() {
        let v114 = Float64Array;
        v114.e = f18;
        v114.e = v114;
        v114 = a110;
        b = v105;
        function F115(a117, a118, a119, a120) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v121 = new F115();
        const v122 = v89.length;
        try {
            v106.forEach(a110);
        } catch(e124) {
            e124.e = e124;
        }
        const v125 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.e = v121;
        Symbol.e = Symbol;
        const v127 = Symbol.toPrimitive;
        const o131 = {
            toString(a129, a130) {
                a129 *= v127;
                return v89;
            },
        };
        const o163 = {
            "c": -4294967297n,
            [522675525n](a133, a134) {
            },
            "c": v105,
            valueOf(a136, a137) {
                return this;
            },
            [v122](a139) {
            },
            [-1]: v104,
            1073741824: v97,
            "arguments": v125,
            [-4294967297n](a141, a142, a143, a144) {
                class C146 extends Date {
                    static get c() {
                        eval();
                    }
                }
                function F150(a152, a153, a154, a155) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v156 = this.constructor;
                    try { new v156(); } catch (e) {}
                    this.d = f18;
                }
            },
            256: a112,
            ...v105,
            n(a159) {
                const o161 = {
                };
                return Worker(o161);
            },
        };
        return v99;
    }
    f113();
    eval();
    %OptimizeFunctionOnNextCall(f113);
    return eval;
}
for (let v167 = 0; v167 < 5; v167++) {
    f108(Uint32Array, 522675525n, v167, v104);
}
