function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        try {
            this.f = this;
        } catch(e3) {
        }
        return F0;
    }
    this[Symbol.toPrimitive] = f2;
    try {
        this.g = 59068;
    } catch(e7) {
    }
}
const v8 = new F0();
const v9 = new F0();
const v10 = new F0();
function f11() {
    try { v10(v8, v9, v9, F0); } catch (e) {}
    const v18 = new Int32Array(7);
    const v19 = v18.buffer;
    try { v19(Uint8ClampedArray, Int8Array, 129, v19); } catch (e) {}
    return v18;
}
v10.toString = f11;
const v21 = [32845];
const v22 = [65537,10000,3,-1837310228,1000];
[1636917354];
class C27 {
    static toString(a29, a30, a31, a32) {
        v21.length instanceof F0;
        super.c;
        return a32;
    }
    toString(a37, a38, a39) {
        const o40 = {
            ...a39,
            [v8]: F0,
        };
        C27?.[-1];
    }
}
for (let v42 = 0; v42 < 25; v42++) {
    Promise.reject(Promise);
}
C27[v10];
v9[13];
try { v10["imul"](C27, 9); } catch (e) {}
try { v22.shift(); } catch (e) {}
const o50 = {
};
