function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(128, this); } catch (e) {}
    a6 + a6;
    try {
        this.a = 5;
    } catch(e9) {
    }
    try {
        this.b = 5;
    } catch(e10) {
    }
    try {
        this.d = a6;
    } catch(e11) {
    }
}
new F3(F3, -195224844);
const v13 = new F3(5, 5);
const v14 = new F3(-195224844, 128);
v14.a = v14;
237 & 237;
new Array(237);
new Int32Array(182);
const v27 = new Uint8Array(10);
let v30;
try { v30 = new BigInt64Array(BigInt64Array, v14, v27); } catch (e) {}
const v31 = new BigInt64Array(3);
function f32() {
    1261703539 / 1261703539;
    class C36 {
    }
    const v39 = `
        try {
            new Float64Array(127);
        } catch(e41) {
        }
    `;
    let v42 = -65535;
    const o45 = {
        valueOf() {
            v13[15] = C36;
            try {
                v31.toString = v30;
            } catch(e44) {
            }
            return v42;
        },
    };
    v42 * v42;
    const v47 = v42 / v42;
    const o120 = {
        __proto__: 352326470,
        next() {
            v42--;
            const v51 = v42 == 0;
            const o52 = {
                "done": v51,
                "value": v42,
            };
            return o52;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v42,
        m(a54) {
            a54.c = a54;
            a54.h = a54;
            const o55 = {
            };
            o55.h = o55;
            function f56(a57, a58, a59) {
                function f61(a62) {
                    a58[5] ||= f32;
                }
                this.onmessage = f61;
                const v65 = new SharedArrayBuffer(35);
                new BigUint64Array(v65);
            }
            f56.caller = f56;
            try {
                o55.e = v42;
            } catch(e68) {
                let v73 = 16;
                const v74 = ++v73;
                Math.random();
                v74 * v74;
                const v78 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v78, o55);
            }
            try {
                const o80 = {
                };
                o80.e = 1261703539;
                o80.g = a54;
            } catch(e81) {
            }
            try { Math.expm1(128); } catch (e) {}
            const v85 = -9007199254740991 >> -9007199254740991;
            v85 - v85;
            Math.sin(-9007199254740991);
            try { ("EV").link(v47); } catch (e) {}
            0 != 0;
            class C92 {
                o(a94, a95, a96, a97) {
                    class C98 {
                        static 44 = "EV";
                    }
                    new C98();
                    new C98();
                    new C98();
                    return 0;
                }
            }
            C92.name = C92;
            new C92();
            3938 & 3938;
            const v106 = new Int8Array(3938);
            let v107 = 3;
            const v108 = v107++;
            v108 + v108;
            let v110 = 0;
            const v111 = v110 >> v110;
            v111 - v111;
            for (let i = 0; i < 5; i++) {
                v110 < 8;
                [...v107] = v106;
                const v115 = v110++;
                v115 % v115;
            }
            const o117 = {
            };
            o117.c = o117;
            o117.e = 1261703539;
            o117.g = a54;
            try {
                const o118 = {
                };
                o118.g = a54;
                o118.h = 352326470;
            } catch(e119) {
            }
            return this;
        },
    };
    let v121;
    try { v121 = o120.m(o120); } catch (e) {}
    v121.b = v121;
    class C123 {
    }
    C123.length = C123;
    const v124 = new C123();
    Float32Array.a = Float32Array;
    const v126 = new Float32Array(v124, "nt", Float32Array);
    const t156 = "nt";
    const v127 = delete t156[v126];
    let v128;
    try { v128 = v124.floor(v127); } catch (e) {}
    for (const v129 in v128) {
    }
    v121.e = v121;
}
const v130 = f32();
const v131 = f32();
const v132 = f32();
const v135 = Uint8Array.prototype;
try { v135.reverse(); } catch (e) {}
let v137;
try { v137 = new Uint8Array(v131, v132, v130); } catch (e) {}
try { v137.join(f32); } catch (e) {}
function f140(a141, a142, a143, a144) {
}
let v147 = Symbol.toPrimitive;
("lastIndexOf")[v147];
function f149(a150, a151) {
    const o154 = {
        set b(a153) {
        },
    };
}
f149();
7 >>> 7;
BigUint64Array.prototype = BigUint64Array;
const v162 = new BigUint64Array(257);
let v163 = 1412;
v163++;
Uint16Array.prototype;
new Uint16Array(v163);
gc(256);
function F172(a174, a175, a176) {
    if (!new.target) { throw 'must be called with new'; }
}
8 + 8;
const v178 = 8 >>> 8;
const v179 = v178 >>> v178;
const v181 = new Uint8Array(8);
v181[7] = v181;
v162[v179] ||= 8;
v147 += v147;
let [] = "lastIndexOf";
237 < 10;
try { v137["valueOf"](257, undefined, "valueOf", f140, Uint8Array); } catch (e) {}
try {
    v181.h = -9223372036854775807;
} catch(e187) {
}
const v188 = [-223.21974199729607,0.6826909196761026,-7.610543209781418e+307,1000000000.0,-2.2250738585072014e-308,0.4672319347741436,-1000000.0,-3.0,-5.0,6.966874548897];
9007199254740990 + 9007199254740990;
let v191 = -9007199254740990n;
v191--;
const v193 = v188.fill(v191, 9007199254740990);
let v194;
try { v194 = v193.toString(); } catch (e) {}
try { v194.bold(); } catch (e) {}
let v196;
try { v196 = v194.strike(); } catch (e) {}
try { v196.strike(); } catch (e) {}
