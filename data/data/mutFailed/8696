const v2 = new Int16Array(255);
Float32Array.length;
let v6;
try { v6 = new Float32Array(255, Int16Array, v2); } catch (e) {}
function f7() {
    function f8() {
        const v10 = 256 < 256;
        function f11(a12) {
            return v10;
        }
        return v10;
    }
    return f8;
}
Object.defineProperty(v6, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f7 });
v6[62] = v6;
const v15 = new Float32Array(128);
v15[34];
try { v15.at(128); } catch (e) {}
1192 | 1192;
const v21 = new Int8Array(1192);
function f22(a23, a24) {
    ~a24;
    const v26 = a24 & a24;
    v26 - v26;
    const o37 = {
        "b": Int16Array,
        __proto__: v15,
        "a": 1192,
        ...v2,
        "g": v21,
        [128]: 1192,
        [a24](a29, a30, a31, a32) {
            this[268435439];
            a30 = a31;
            for (let v34 = 0; v34 < 32; v34++) {
                v2["p" + v34] = v34;
            }
            return v21;
        },
    };
    return o37;
}
const v38 = f22(128, 255);
f22(1192, 255);
const v40 = f22(128, 1192);
function f41() {
    return v38;
}
function f43() {
    const o54 = {
        m() {
            const v45 = this?.__defineSetter__;
            try { new v45(Int8Array, Int8Array); } catch (e) {}
            try { gc(); } catch (e) {}
            try { ("minor").codePointAt("minor"); } catch (e) {}
            const o52 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o52);
        },
    };
    return o54;
}
function f55(a56) {
    return v40[Symbol.match];
}
f43.toString = f55;
const v60 = f43();
try { v60.propertyIsEnumerable(1192); } catch (e) {}
const v62 = f43();
try { v62.m(); } catch (e) {}
class C64 {
}
C64.length = C64;
v60.m();
Object.defineProperty(C64, v62[f43], { enumerable: true, set: f43 });
