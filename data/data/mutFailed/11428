const v0 = [];
const v1 = [-806.8740960751977,-428422.70579250227,-754.6797945565986,-1.0,4.2181254534703056e+307,-2.2250738585072014e-308,-5.981275600631255,-0.46248025066662635,0.6395499666035118,2.2250738585072014e-308];
const v2 = [1000000000000.0];
const v3 = [8.17440508534063,124.11868583604405,3.9642876834744903e+307,1000000.0,1000000000.0,8.731571999361819,-Infinity,1.0,-3.0,1000.0];
const v4 = [1603842647,-1868583948,14,-60702];
v4[1];
const v6 = [9];
try { v6.entries(); } catch (e) {}
const v8 = [-9007199254740991,64,736774964,-15049,65536,-65535,617326416,4294967295,3];
[v4,v8,v2,v8];
[v6,v4,[v1,v0,v3,v2,v8],v8];
new Map();
function f14() {
    for (let v15 = 0; v15 < 5; v15++) {
        for (let v16 = 0; v16 < 5; v16++) {
            v16 + v16;
            Math.atanh(v16);
        }
    }
    return f14;
}
f14.arguments = f14;
f14();
%OptimizeFunctionOnNextCall(f14);
class C21 {
    #m(a23, a24) {
    }
    [-1];
}
const v25 = new C21();
class C26 {
    2 = v25;
}
const v27 = new C26();
function f28(a29, a30) {
    return f28;
}
const v33 = [v27];
const o34 = {
    "arguments": v33,
    "type": "function",
};
new Worker(f28, o34);
C21();
