const v1 = new Set();
const v2 = [536870887];
const v3 = [4294967297,-4294967295,-2147483649];
for (const v4 in v1) {
    try { v2.slice(v3, v1); } catch (e) {}
}
Math.random();
const v11 = 3.0 && 3.0;
let v13 = -2147483647 >> Set;
++v13;
let v15;
try { v15 = v3.reduceRight(v1); } catch (e) {}
const v16 = [-995451306,5,12];
let v17;
try { v17 = v16.fill(v2); } catch (e) {}
const v18 = [v1,v2,v2,v2,v16];
v18[3] = v18;
const v19 = [Set,Set,v2];
v19[1];
const v21 = [v1,v2,v2,v19];
const v22 = +v11;
throw v15;
const v25 = 1000 || 1000;
Math.ceil(-9007199254740992);
Math.log2(1000);
Math.log1p(v22 - v25);
+1000;
function f31(a32, a33) {
    try { a32.push(f31); } catch (e) {}
    a33[3] = a33;
    const o53 = {
        ...v1,
        "c": v18,
        "e": v3,
        "d": Set,
        toString(a36, a37, a38) {
            try { v17(); } catch (e) {}
            new Uint8Array(64);
            new Uint8ClampedArray(5);
            new Float32Array(1092);
            try { a36.entries(); } catch (e) {}
            return Set;
        },
        "a": v1,
        "h": v2,
        2147483649: a32,
    };
    return o53;
}
const v54 = f31(v2, v21);
const v55 = f31(v18, v18);
v55[2147483649];
const v57 = f31(v3, v55);
function f58(a59, a60, a61, a62) {
    const o76 = {
        get a() {
            function f64() {
                function f66(a67) {
                    a67 >>= this;
                }
                this.onmessage = f66;
                for (let v68 = 0; v68 < 32; v68++) {
                    a60["p" + v68] = v68;
                }
            }
            const v73 = [];
            const o74 = {
                "arguments": v73,
                "type": "function",
            };
            new Worker(f64, o74);
            return this;
        },
    };
    return o76;
}
f58(v57, v2, Set, v54);
f58(v2, v16, Set, v55);
f58(v57, v3, v21, v55);
const v80 = [-65535,452354247,-2,78479092,-2147483648,1073741823,5,6528,-1024,-261130286];
try { v80.entries(); } catch (e) {}
const o83 = {
};
o83.e = o83;
const v85 = new Proxy(v80, o83);
try { v85.groupToMap(v57); } catch (e) {}
new Int32Array(v85);
