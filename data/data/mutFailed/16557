class C3 {
    static {
        const v7 = new BigInt64Array(128);
        v7.indexOf(-11907, 4294967296);
        try {
            super.toDateString(164.39550152860738);
        } catch(e12) {
        }
    }
    5;
    [-20.324590442755607];
    #h = 0.44612219808330933;
    constructor(a14) {
        this[5] = this;
        const v16 = Symbol.iterator;
        Symbol.for(v16.description);
        const o34 = {
            [v16]() {
                let v21 = 10;
                const o33 = {
                    next() {
                        v21--;
                        Math.atan2(164.39550152860738, 164.39550152860738);
                        class C28 {
                            #a = 1453;
                            1073741825;
                        }
                        for (let v29 = 0; v29 < 10; v29++) {
                            new C28();
                        }
                        const v31 = v21 == 0;
                        const o32 = {
                            "done": v31,
                            "value": v21,
                        };
                        return o32;
                    },
                };
                return o33;
            },
        };
        for (let i37 = 0, i38 = 10;
            i37 < i38;
            (() => {
                const v42 = i37++;
                v42 >> v42;
            })()) {
        }
    }
}
const v46 = new C3(164.39550152860738);
v46[5] = v46;
const v47 = new C3(-20.324590442755607);
const v48 = new C3(164.39550152860738);
v48[5];
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    const v56 = this?.constructor;
    try { new v56(a54, a54, this, 0.44612219808330933); } catch (e) {}
    a52[5];
    a54 >>> a54;
    try {
        this.e = 164.39550152860738;
    } catch(e60) {
        function f61() {
        }
        f61.toString = f61;
        function F62(a64, a65) {
            if (!new.target) { throw 'must be called with new'; }
            this[Symbol.toPrimitive] = f61;
            this.a = f61;
        }
        new F62();
    }
    try {
        this.f = a54;
    } catch(e69) {
    }
    const v70 = /dAza[a][\cZ]*/guims;
    function f71(a72, a73, a74, a75) {
        with (v70) {
            a75 %= a72;
        }
        return a72;
    }
}
const v76 = new F50(v48, -20.324590442755607, -20.324590442755607, C3);
const v77 = new F50(v76, 164.39550152860738, v46, v47);
const v78 = new F50(v76, 0.44612219808330933, -20.324590442755607, v48);
v78.g = v78;
function F79(a81, a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    const v85 = this?.constructor;
    const v86 = [];
    class C87 {
        constructor() {
            super.f >>= this;
        }
        static #o() {
            super[v86];
            super.a;
            return v86;
        }
    }
    /\p{Script=Greek}/vdimy * C87();
    try { new v85(this, v48, a82, this); } catch (e) {}
    a81[5];
    a82.e = a82;
    a84.d = a84;
    try {
        this.h = C3;
    } catch(e97) {
    }
    try {
        this.b = -20.324590442755607;
    } catch(e98) {
    }
    try {
        this.e = a83;
    } catch(e99) {
    }
}
const v100 = new F79(v47, v77, v78, v77);
v100.d = v100;
new F79(v76, C3, v78, v46);
new F79(v76, v47, v47, C3);
const v104 = ["bpkzx","bpkzx","bpkzx"];
const v106 = "bpkzx" * [v104,v104,v104];
try {
    v104.length = v106;
} catch(e107) {
}
