const v0 = [-2.360375525870994];
[0.6575048119287539,-Infinity,1.4699971977763391e+308,540068.7617580341];
const v2 = [NaN];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = v2;
    try {
        this.d = a5;
    } catch(e6) {
    }
    try {
        this.h = a5;
    } catch(e7) {
    }
}
new F3(F3);
const v9 = new F3(v0);
new F3(v9);
[868.9592243659533,3.405345120202566e+307];
[0.004146092790233147,1.7976931348623157e+308,3.1762201161487967e+307,0.5086170979723167];
[-1.0,-3.0,Infinity,570.2004095199529,2.220446049250313e-16,-3.0,-817.9644502626102,329498.2340530241,-Infinity,-1.7976931348623157e+308];
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    function F22(a24, a25, a26, a27) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v28 = new F22();
    function f29(a30) {
        function F31(a33) {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = [-0.685155357392599,5.0];
            function F35(a37, a38, a39, a40) {
                if (!new.target) { throw 'must be called with new'; }
                const v41 = this.constructor;
                try { new v41(a38, F31, v41); } catch (e) {}
                v34.length &= 1;
            }
            new F35();
        }
        new F31();
        return F31;
    }
    v28.toString = f29;
    const v48 = new BigInt64Array(4046);
    function f49(a50, a51) {
        Object.defineProperty(v28, v28, { configurable: true, enumerable: true, get: f49 });
        let o53 = {
            get e() {
                return a19;
            },
        };
        [,...o53] = v48;
        return a50;
    }
    f49();
}
new F17(F17, F17, F17);
new F17();
