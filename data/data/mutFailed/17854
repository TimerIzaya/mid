new Int16Array(0);
2991 | 2991;
new Uint8ClampedArray(2991);
7 - 7;
new Int8Array(7);
function f11() {
    return 0;
}
const v15 = [];
try { v15.toString(); } catch (e) {}
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = ~Int16Array;
    new Int8Array(v23, v23);
    a22 * a22;
    const v29 = this.constructor;
    try { new v29(); } catch (e) {}
    f11();
    %PrepareFunctionForOptimization(f11);
    f11();
    f11();
    %OptimizeFunctionOnNextCall(f11);
    f11();
    a22 % a22;
    try {
        this.c = v15;
    } catch(e36) {
        function f37(a38, a39, a40, a41) {
            function f43() {
                return a41;
            }
            ("number").slice([a38,a38]);
            %OptimizeFunctionOnNextCall(f43);
            function F47() {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F47();
            return arguments;
        }
        for (let v50 = 0; v50 < 10; v50++) {
            f37(f37, f37, v50, v50);
        }
        %OptimizeFunctionOnNextCall(f37);
        f37(f37, f37, f37, f37);
        -Infinity;
        const o54 = {
        };
        o54.constructor;
    }
}
new F20(536870887n);
new F20(536870887n);
