class C3 {
    get c() {
        new Int32Array(8);
        function F8(a10, a11, a12) {
            if (!new.target) { throw 'must be called with new'; }
        }
        function f15() {
            const o23 = {
                ..."Y4",
                "f": 4294967297,
                ["m"]: "Y4",
                valueOf(a20, a21) {
                    a20 instanceof a21;
                    const t12 = "m";
                    t12.valueOf = a20;
                },
            };
            return o23;
        }
        const v25 = ([4294967297,-63891,1709132610,1708438519,9007199254740992,-2,4294967295,-58883,-1024,-547736751]).constructor;
        try { new v25(f15); } catch (e) {}
        return 8.527083587254425e+307;
    }
    toString(a29, a30) {
        return 828432200;
    }
    static #b;
}
new C3();
new C3();
new C3();
for (let v37 = 0; v37 < 5; v37++) {
    for (let [i46, i47] = (() => {
            const v40 = eval(v37);
            function f41() {
                for (let v42 = 0; v42 < 5; v42++) {
                    [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                }
                return v40;
            }
            f41();
            %OptimizeFunctionOnNextCall(f41);
            return [0, 10];
        })();
        i46 < i47;
        i47--) {
    }
}
const v58 = new BigUint64Array();
function F59() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v61 = 0;
        for (let i = 0; i < 5; i++) {
            v58.entries();
            const v63 = v61++;
            v63 + v63;
            v63 ^ v63;
            const v67 = v61 < 5;
            v67 || v67;
        }
        new F59();
    } catch(e70) {
    }
}
new F59();
function F74() {
    if (!new.target) { throw 'must be called with new'; }
}
const v76 = new F74();
const o78 = {
    [-1]: v76,
    get b() {
        return F74;
    },
};
function F81() {
    if (!new.target) { throw 'must be called with new'; }
    function f83() {
        new Int8Array([-4,-4]);
        return this;
    }
    this.toString = f83;
    for (let i89 = 0, i90 = 10; i89 < i90; i89++) {
    }
    const v97 = this.toString();
    const v99 = new Set();
    const v100 = v99.add;
    try { v100(); } catch (e) {}
    -253026077 % -816409267;
    const v107 = new BigUint64Array();
    const v108 = v107.buffer;
    function f109(a110) {
    }
    v108.constructor = f109;
    v108.slice();
    const v114 = new WeakSet();
    const o118 = {
        "g": v114,
        "h": v100,
        __proto__: v100,
        "a": v114,
        "f": WeakSet,
        m(a116, a117) {
            return a116;
        },
    };
    const v119 = new Int16Array(2183);
    4087 > v97;
    let [,,...v121] = v119;
    function f122(a123) {
        function f125(a126) {
            this[1] >>= 4087;
            return F81;
        }
        this.onmessage = f125;
    }
    const o129 = {
        "type": "function",
    };
    o129.arguments = 65535;
    new Worker(f122, o129);
    class C131 {
    }
    new C131();
    function f133() {
        for (const v137 of Array(4087)) {
        }
        return Array;
    }
    f133();
}
new F81();
new F81();
