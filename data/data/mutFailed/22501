let v0 = [-2.220446049250313e-16,-0.0,0.6318643630548395,-2.2250738585072014e-308,1.2756890595799657,963726.0144357455,2.0];
const v1 = [-832.7716104315007,1.0,2.0783488091442811e+307,0.5314709435877607,2.220446049250313e-16,-1.0,0.6362321956343128,-3.0,-5.436567554376753e+307];
const v2 = [-1.7622316576513783e+308,-1000000000000.0];
new Int8Array();
const v6 = new Float32Array(Float32Array, Float32Array, Float32Array);
function f7() {
    v6.c = Float32Array;
    for (let v8 = 0; v8 < 5; v8++) {
        const o11 = {
        };
        o11[Uint32Array] -= -2147483649;
        class C12 {
        }
        new BigUint64Array(v8, v8, v8);
    }
    return f7;
}
%PrepareFunctionForOptimization(f7);
function f15() {
    return v0;
}
new Uint8ClampedArray(5);
new Int16Array(-4294967295);
class C24 {
    g = v0;
    #h;
    o(a26, a27, a28) {
        try {
            async function f30(a31, a32) {
                return f30;
            }
            const v33 = f30.constructor;
            try { v33(Uint8Array); } catch (e) {}
            v0.#h;
        } catch(e36) {
        }
        return v0;
    }
    constructor(a38, a39) {
    }
    static 6;
    [v2];
    #a = v0;
}
const v41 = new C24();
const v42 = new C24();
new C24();
let v44 = 0;
do {
    for (let v45 = 0; v45 < 5; v45++) {
        function f47() {
            "Vre" - (undefined << 0.28963498121041586);
            return f47;
        }
        f47();
        %OptimizeFunctionOnNextCall(f47);
    }
    for (let v53 = 0; v53 < 32; v53++) {
        v41["p" + v53] = v53;
    }
    v44++;
} while ((() => {
        class C58 extends Date {
        }
        class C59 extends f7 {
        }
        new C59();
        return v44 < 10;
    })())
v0 = v1;
let v64 = -4294967297n;
const v65 = v64--;
function f66(a67, a68, a69, a70) {
    const v71 = a67.keys;
    try { v71(); } catch (e) {}
    function f73() {
        return f73;
    }
    a67.constructor = f73;
    const t79 = a67?.constructor;
    const v75 = t79();
    const o83 = {
        [v64](a77, a78, a79, a80) {
            eval();
        },
    };
    new Array(v75);
    const v87 = new Int8Array();
    const v89 = v87.buffer.slice(v71, v75);
    try { v89.slice(v65); } catch (e) {}
    return f73;
}
delete v42?.g;
new WeakMap();
for (let v96 = 0; v96 < 25; v96++) {
    Math.sin(v96 ** 2);
}
Math.tan();
const v103 = [-8.423288404653653e+307,460.19811044552307,-1.7971213292687213e+308,-1e-15,0.8010499065604265,5.0,1.7976931348623157e+308,-4.0,0.8718051962313597];
function f104() {
    return v103;
}
function F105(a107, a108, a109, a110) {
    if (!new.target) { throw 'must be called with new'; }
}
const v112 = Array();
try { v112.some(F105); } catch (e) {}
