/I/gudis;
const v3 = new SharedArrayBuffer(945);
v3.slice();
/a\w[x]S(?<!a)\P{sc=Greek}*/gvy;
/Y4\x60+/um;
BigInt64Array.e = BigInt64Array;
new BigInt64Array(203);
const v11 = -0;
v11 >>> v11;
new Float32Array(SharedArrayBuffer);
let v15 = 6;
v15--;
v15 >>> v15;
Int16Array.f = Int16Array;
new Int16Array(v15);
512n | 512n;
512n ^ 512n;
const v25 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v25.map(-1713583531n); } catch (e) {}
const v27 = [601759695];
function f29(a30, a31, a32, a33) {
    a30[0];
    try { a30.map(a31); } catch (e) {}
    a32++;
    const v37 = a33?.groupToMap;
    try { v37.call(v25); } catch (e) {}
    try { new v37(Float32Array); } catch (e) {}
    arguments[4] = arguments;
    return a32;
}
v15.arguments = f29;
const t31 = -1713583531n;
t31(v27, v25, 522675525n, v25, 522675525n);
f29(v27);
