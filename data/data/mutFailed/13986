function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 13;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
class C7 extends F0 {
    toString(a9, a10) {
        const v11 = `
        `;
        eval(v11);
        return v6;
    }
    0 = F0;
}
const v17 = new C7();
const v18 = new C7();
const v19 = new C7();
function f20(a21, a22, a23, a24) {
    const v26 = new Uint32Array(Uint32Array);
    new Int16Array(v26);
    const o36 = {
        "h": a24,
        "c": a22,
        set a(a30) {
            this in this;
            delete v18[a24];
        },
        "d": v18,
        [a22]: a22,
    };
    return o36;
}
const v37 = f20(v17, v19, v6, v18);
f20(v18, v37, v5, v37);
f20(C7, v18, v6, v17);
for (let [i47, i48] = (() => {
        const v43 = new Uint32Array(0, 0, 10);
        const t1 = v43.constructor;
        const v45 = new t1();
        v45.reverse();
        return [0, 10];
    })();
    i47 < i48;
    i48--) {
}
