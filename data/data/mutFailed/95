new BigInt64Array(0);
const v5 = new BigUint64Array(3);
const o7 = {
};
new Proxy(v5, o7);
new Int16Array(179);
new Int32Array(6);
new Uint32Array(121);
const v20 = new Int8Array(512);
new Uint32Array(1356);
new Float32Array(8);
new Uint32Array(v5, 8);
const v29 = new Int32Array(v20);
try {
const t0 = 512;
t0(v20, v29, v29, Int32Array);
} catch (e) {}
const o31 = {
};
new Proxy(v29, o31);
new BigUint64Array(4096);
1940694780n == [10624,733951208,4294967296,5138,14];
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 9223372036854775807;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a9;
    } catch(e11) {
    }
}
const v12 = new F7(v6, v5);
new F7(v4, v12);
new F7(v6, v6);
[1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
function f23() {
}
const v24 = f23.constructor;
v24(-21059);
f23();
f23();
!(-1600745002 % -1600745002);
new Int8Array();
const v34 = new Int8Array();
v34[92];
let v36 = v34[161];
v36--;
const v38 = [-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456];
let v39 = v38.push();
const v40 = v39++;
v40 / v40;
const v42 = [-21059];
const v43 = v24.groupToMap;
try { v43(); } catch (e) {}
Object.defineProperty(v43, "d", { writable: true, enumerable: true, value: "e35" });
v43.d = v43;
try { v43(); } catch (e) {}
const v49 = [];
v38.includes();
const v51 = [];
try { v51.find(); } catch (e) {}
let v54 = undefined;
try { v49.flatMap(); } catch (e) {}
v51[2] = v51;
2.220446049250313e-16 ^ 2.220446049250313e-16;
v54 = v49;
Date.parse();
const v59 = Date.now();
v59 ^ v59;
const v61 = new Date();
v61.getUTCMinutes();
v61.setFullYear(-409.5445341345936, 288.9075242979261, v42);
v61.setMonth();
const v73 = new Float32Array(1652);
v73 <= Float32Array;
