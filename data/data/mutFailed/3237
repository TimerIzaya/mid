Object.defineProperty("bZ", "undefined" == "undefined", { configurable: true, value: "undefined" });
Symbol("bZ");
%PrepareFunctionForOptimization(Symbol);
Symbol("bZ");
const v9 = Symbol("bZ");
%OptimizeMaglevOnNextCall(Symbol);
Symbol("bZ");
Symbol("bZ");
function F12() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    -9223372036854775808 - -9223372036854775808;
}
try { new F12(); } catch (e) {}
const v17 = new F12();
v17.c = v17;
const t16 = "-34092";
t16[1] = "-34092";
new BigUint64Array(9);
new Uint8Array(2717);
Object.defineProperty(v9, 5, { writable: true, configurable: true, get: Symbol });
const o30 = {
    "execution": "async",
    "type": "minor",
};
gc(o30);
try { new Float64Array(10, "setFullYear", F12); } catch (e) {}
new Float64Array(10);
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    a38.e = a38;
    const v40 = this?.constructor;
    v40.e = v40;
    try { new v40(this); } catch (e) {}
    this.c = a38;
}
new F36(18074);
const v43 = [-50.96907394271625,3.0,-570016.204056581,0.7917375798188904,5.844526521291116e+307,-1.7976931348623157e+308,-2.2250738585072014e-308,0.0,1.0];
const v44 = [-2.220446049250313e-16];
class C45 {
    static [-2];
    static {
        function f47(a48, a49) {
            return a48;
        }
        const o55 = {
            o(a51) {
                const o53 = {
                };
                return gc(o53);
            },
        };
        try {
            const t53 = "undefined";
            t53.length = 2;
        } catch(e57) {
        }
        const o59 = {
        };
        const v61 = new Proxy(Uint32Array, o59);
        o55["o"](o55, Uint32Array, "o", "o", v61);
        const v64 = super[this];
        try { v64.join(10, 10, v64); } catch (e) {}
        const o66 = {
        };
        [/LD/vds,1000.0];
    }
    constructor(a71, a72) {
        function f73() {
            function f75(a76) {
                a76 !== v44;
            }
            this.onmessage = f75;
        }
        const v81 = [];
        const o85 = {
            "arguments": v81,
            "type": "function",
            get f() {
                return this;
            },
            get e() {
                try {
                } catch(e84) {
                }
            },
        };
        new Worker(f73, o85);
    }
}
new C45(v43, v44);
