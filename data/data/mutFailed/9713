/KcqYTa{0,1}?a{0}a(?:b)*/vm;
/a\Wl*/vdisy;
/a(?!bbb|bb)c+/udsy;
let v3 = 2864;
v3--;
new Uint8Array(v3);
Float64Array.prototype = Float64Array;
const v9 = new Float64Array(8);
v9.g = v9;
const v12 = new Uint8ClampedArray(12);
try { v12.join(v12); } catch (e) {}
2119294231 | 2119294231;
class C21 {
}
try { C21.bind(v12); } catch (e) {}
const v23 = new C21();
const v24 = new C21();
const t17 = 8;
const v25 = new t17();
const v26 = [-1.0,v25,-48725,2119294231];
[v24,v23,v26,C21];
[-2.2250738585072014e-308,-48725,-2.2250738585072014e-308,-5.0];
const t20 = -2.2250738585072014e-308;
new t20();
new Float32Array(1000);
try { new Uint8Array(-48725, -2.2250738585072014e-308, v24); } catch (e) {}
new Uint8Array(58);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.__defineGetter__(v26, -1.0); } catch (e) {}
    try {
        Array.prototype = Array;
        const v44 = Array(19793);
        try { v44.find(v44); } catch (e) {}
        for (const v46 of v44) {
        }
        const v47 = [v44];
        const v49 = new BigUint64Array();
        try { v49.map(Array); } catch (e) {}
        256 - 256;
        const v53 = [];
        function F54() {
            if (!new.target) { throw 'must be called with new'; }
            class C56 {
            }
            for (let [i61, i62] = (() => {
                    0 * 0;
                    10 | 10;
                    return [0, 10];
                })();
                i61++, i61 < i62;
                (() => {
                    const v67 = [601759695];
                    try { v67.some(12); } catch (e) {}
                    const v69 = [1073741824,1073741823,1376142744,1073741825];
                    function f70(a71, a72, a73, a74) {
                        a74 ^ a74;
                        function f76() {
                            return a71;
                        }
                        function f77(a78, a79) {
                            return a78;
                        }
                        try { f77(); } catch (e) {}
                        f77(v69, C56)[1];
                        try { v69["find"](..."find", a74, ...v67, ...v69); } catch (e) {}
                        return v53;
                    }
                    for (let v85 = 0; v85 < 10; v85++) {
                        f70(v85, f70, i61, v85);
                    }
                })()) {
                i61 | i61;
            }
        }
        const v90 = new F54();
        const v91 = v90?.constructor;
        try { new v91(); } catch (e) {}
        new F54();
        v53[65536] = v47;
        for (let v94 = 0; v94 < 50; v94++) {
        }
        v53[65536] %= 256;
        [19793,v47,v47];
        const v96 = [];
        Uint16Array.valueOf = Array;
        class C99 {
            static [376363416];
            static {
                try { new this(); } catch (e) {}
                super.b = this;
                let {...v102} = this;
                v102[376363416] = v102;
            }
        }
        try {
        const t0 = 1000;
        new t0();
        } catch (e) {}
        let v104 = 536870912n;
        v104--;
        const v106 = [-9223372036854775807,45087,-268435456];
        v106[1] = v106;
        const v107 = [509174734,-30078599,-1953700757,-725509519,50139,1073741825];
        v107[3] = v107;
        [15,55234,268435441,0,9007199254740992,129];
        /\p{Script=Greek}/ds;
        /.\P{Decimal_Number}/gvds;
        const v111 = /xyz{1,32}?a\nb\bc/ums;
        v111.dotAll = v111;
        class C112 {
        }
        try { new C112(); } catch (e) {}
        const v114 = C112.__defineSetter__;
        try { new v114(19793, Uint8Array); } catch (e) {}
        try { v114(); } catch (e) {}
        const v117 = v96 >= Uint16Array;
        v117 || v117;
    } catch(e119) {
    }
}
const v120 = new F39();
v120.length;
new F39();
