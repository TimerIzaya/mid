function f3(a4, a5) {
    const o12 = {
        "b": 31683,
        "a": -8,
        [a4]: -65537,
        "e": -65537,
        "h": -65537,
        3112: -8,
        [-2]: a5,
        "f": -8,
        "c": 31683,
        ...a5,
        [31683](a7, a8) {
            let v9;
            try { v9 = a5(31683, 31683, -8, a7); } catch (e) {}
            try {
                super.o(v9);
            } catch(e11) {
            }
            return a8;
        },
    };
    return o12;
}
const v13 = f3(-65537, 31683);
f3(-8, -8);
f3(31683, v13);
/(?:ab)/ms;
/(y\u{12345}\u{23456})/gudim;
/K(?=)\p{General_Category=Decimal_Number}+/vmsy;
[2147483647,46495,-128,-34866,65535,5,56624,10000];
[-128,-55687,-65535,-2245,14,4294967296,1,-25694,8];
[-450342492,4,8,255];
let v25 = [-9223372036854775808,2067924475,-536870912,4294967296,46528,-13,2044244347,1024,2243,1073741823];
class C28 extends Int16Array {
    constructor(a30, a31, a32, a33) {
        super();
        function f34(a35) {
            let v37 = 4.0;
            let v38 = 0;
            do {
                typeof v38 === "string";
                v38++;
                class C43 {
                }
                function f44() {
                    return this;
                }
                f44();
            } while ((() => {
                    function F47(a49) {
                        if (!new.target) { throw 'must be called with new'; }
                        const v50 = this.constructor;
                        let v51;
                        try { v51 = new v50(); } catch (e) {}
                        try {
                            function f52() {
                                return v51;
                            }
                            const v54 = "size" && "undefined";
                            with ("undefined") {
                                length = v54;
                                f52();
                            }
                        } catch(e56) {
                        }
                    }
                    return v38 < 7;
                })())
            let v59 = 0;
            do {
                v25 = v37;
                v59++;
            } while (v59 < 10)
            const v65 = new Uint16Array(-9894);
            const v66 = [-2038832922,-14];
            v65.set(v66);
            const v73 = new Uint16Array(6);
            const v76 = new Float64Array(127);
            gc();
            new f34();
            const v81 = new Float32Array();
            new Uint8Array(v81, Uint8Array, Uint8Array);
            new Uint16Array(a32);
            new Uint16Array(v66, -9894, a32);
            f34(this);
            %PrepareFunctionForOptimization(f34);
            f34(this);
            f34(this);
            new Date(Uint32Array);
            const o96 = {
                n(a94, a95) {
                },
            };
            function F97() {
                if (!new.target) { throw 'must be called with new'; }
                new Array(19793);
                for (const v103 of Array(19793)) {
                }
            }
            f34(this);
            function f105() {
                const o106 = {
                    "b": v66,
                };
                return o106;
            }
            f105();
            v76[127] = 127;
            v73[536870888] = -1876875593;
            try {
                v76.values();
            } catch(e109) {
                const v110 = e109?.a;
                try { v110(e109, v110, v110, v110); } catch (e) {}
                function F112(a114, a115, a116, a117) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                new F112(F112, 8, 127, e109);
                const v119 = new F112(52235, 6, -1876875593, Uint16Array);
                F112(v119, 6, 1000);
                for (const v122 of "some") {
                }
            }
            v37 = -451445.2180572981;
            function f123() {
                let v124 = 6;
                v124 % v124;
                v124--;
                return v124;
            }
            function f127(a128) {
                return f127;
            }
            this.onmessage = f127;
        }
        const o131 = {
            "type": "function",
        };
        new Worker(f34, o131);
    }
}
new C28();
new C28();
