new Int32Array(1061);
const v5 = new BigInt64Array(257);
v5[151];
const v9 = new Float64Array(0);
try { v9.findLast(0); } catch (e) {}
const v13 = -NaN;
let v14 = -2.117312831702087;
const v15 = v14++;
function f16() {
    return Float64Array;
}
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = v13?.__defineSetter__;
    try { new v23(a21, this); } catch (e) {}
    a19 << v13;
    a22 >> a22;
    try {
        new Uint8Array([9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038]);
        const v30 = [];
        -v30 && v30;
        this.g = a21;
    } catch(e33) {
    }
    try {
        this.f = NaN;
    } catch(e34) {
    }
    try {
        this.a = Float64Array;
    } catch(e35) {
    }
}
new F17(v14, 257, 0, -9.714875229451892e+307);
new F17(NaN, 0, 257, -9.714875229451892e+307);
new F17(NaN, 1061, 0, -9.714875229451892e+307);
let v40 = 256;
v40 >> v15;
function f43() {
    return 2720;
}
f43.valueOf = v14;
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    v48.length = v48;
    try { new v48(a46, v40); } catch (e) {}
    -a47;
    v40--;
    this.h = f43;
}
const v52 = new F44(65537, f43);
const v53 = new v52();
v53.toString = f43;
class C54 extends F44 {
    #h;
    3120 = F44;
    #g = v53;
    valueOf(a56, a57, a58) {
    }
    [v53] = v40;
}
new C54();
new C54();
new NaN();
