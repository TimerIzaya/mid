const v3 = new Uint32Array();
Float64Array > v3;
function f6(a7) {
    return a7;
}
function F13() {
    if (!new.target) { throw 'must be called with new'; }
    function F17(a19, a20, a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v23 = new F17();
    typeof v23 === "string";
    for (const v28 of Array()) {
    }
}
new Int32Array(16);
const v33 = new Uint32Array(51);
v33.indexOf(51);
([1073741824,1073741823,1376142744,1073741825]).forEach();
new Uint32Array(3103);
new Int8Array(128);
function f43(a44, a45, a46, a47) {
    ("HEkWL").localeCompare("isArray", "isArray");
    for (let v51 = 0; v51 < 5; v51++) {
    }
    return a47;
}
for (let v52 = 0; v52 < 5; v52++) {
    const v54 = [BigUint64Array];
    new Float32Array(Float32Array, Float32Array, Float32Array);
    RegExp(RegExp);
    const o59 = {
    };
    try {
        new BigUint64Array(v54);
    } catch(e61) {
    }
    f43();
}
%OptimizeFunctionOnNextCall(f43);
f43();
class C65 {
    static {
        for (let v67 = 0; v67 < 25; v67++) {
            function f68() {
                return C65;
            }
            const v69 = [601759695];
            const v70 = [1073741824,1073741823,1376142744,1073741825];
            function f72(a73, a74, a75, a76) {
                function f78() {
                    return a73;
                }
                const v79 = f68();
                const v81 = new Int8Array();
                const v84 = new Uint32Array(4);
                [v84];
                const v88 = BigUint64Array * 536870887;
                v88 ** v88;
                function f90(a91, a92) {
                    return v79;
                }
                f90();
                const v94 = v81.buffer;
                Object.defineProperty(v94, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v94.slice(2147483648);
                %OptimizeFunctionOnNextCall(f78);
                let v99;
                try { v99 = v70["find"](..."find", a76, ...v69, ...v70, ...522675525n); } catch (e) {}
                Symbol("find");
                const v103 = new Uint8ClampedArray();
                const o104 = {
                    ...v103,
                };
                v99 <= a75;
                return arguments;
            }
            for (let v106 = 0; v106 < 5; v106++) {
                f72(this, v106, v106, v106);
            }
        }
    }
}
