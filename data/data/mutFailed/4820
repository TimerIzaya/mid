const v2 = new Float32Array(7);
const v5 = new BigUint64Array(512);
const o8 = {
    "a": v2,
    ...v2,
    get g() {
        return this;
    },
    [BigUint64Array]: v5,
    __proto__: v2,
};
try {
    const v9 = /(?:a*)+/udimy;
    const v10 = /Ja+?/vim;
    const o11 = {
    };
    o8.fuck(v9, o8, v10, o11);
} catch(e13) {
}
const v14 = [];
try { v14.with(v14, v14); } catch (e) {}
const v16 = [-Infinity,6.480988017773699e+306,573910.463011838,1e-15,0.3229651369155768,2.437804697941676,-4.0,-Infinity];
const v19 = new BigUint64Array(3);
v19["indexOf"](v16);
const v23 = new Float32Array(2);
function f27(a28, a29, a30) {
    const o44 = {
        2147483647: v5,
        "c": 512,
        p(a32, a33, a34) {
            const v36 = [a30,7,v2,v2];
            for (let v37 = 0; v37 < 25; v37++) {
            }
            class C39 {
                static {
                    this.f += "indexOf";
                }
                static #a = "undefined";
            }
            Reflect.construct(a32, v36, BigUint64Array);
            return 512;
        },
        ...v23,
        ..."indexOf",
        "e": v16,
        set b(a43) {
        },
        "d": v5,
        "g": v23,
        [60581n]: 2,
        __proto__: v5,
        "b": a29,
    };
    return o44;
}
f27(4n, 60581n, 4n);
f27(4n, 4n, -268435456n);
f27(4n, 60581n, -268435456n);
("string").normalize("indexOf");
Math.tan(9007199254740992);
const v62 = Promise.reject(Promise);
function F73(a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
}
const v77 = new F73(512, 10000);
const v78 = new F73();
const v80 = new Uint32Array(v62, 36002, 4);
([v78,v77,v80[0.29489550717955537]])[2];
