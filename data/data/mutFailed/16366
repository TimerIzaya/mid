new Uint8ClampedArray(4);
const v5 = new BigUint64Array(4096);
new Uint32Array(277);
const v10 = new WeakMap();
const v11 = v10?.has;
try { v11(v5); } catch (e) {}
try { new v11(4); } catch (e) {}
-1 - -1;
try { new Uint8ClampedArray(-2147483647, v11, 277); } catch (e) {}
let v22;
try { v22 = Int16Array.from(Uint8ClampedArray); } catch (e) {}
v22[1];
const v24 = new Int16Array();
let v25;
try { v25 = v24.subarray(-1, Int16Array); } catch (e) {}
try { v25.entries(); } catch (e) {}
const v27 = [-4,-46650,2,3,-65535];
let v28;
try { v28 = v27.push(-2147483647); } catch (e) {}
v28 - v28;
65537 == 4096n;
try { Date.parse(Uint8ClampedArray); } catch (e) {}
class C35 {
}
C35.e = C35;
const v36 = new C35();
const v37 = v36?.constructor;
try { new v37(); } catch (e) {}
const v39 = new C35();
const v40 = v39?.constructor;
try { new v40(); } catch (e) {}
const v42 = new C35();
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
const v45 = v42?.constructor;
try { new v45(); } catch (e) {}
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = a50?.constructor;
    try { new v53(); } catch (e) {}
    const v55 = a52?.constructor;
    try { new v55(); } catch (e) {}
    const v57 = a49.length;
    v57 | v57;
    const v59 = a51?.constructor;
    let v60;
    try { v60 = new v59(); } catch (e) {}
    const v61 = v60?.constructor;
    try { new v61(); } catch (e) {}
    /Ckza\Wb?/vis;
    const v68 = a52?.__lookupGetter__;
    v68.a = v68;
    try { new v68(v27); } catch (e) {}
    const v70 = a52.constructor;
    v70.c = v70;
    const v71 = new v70();
    const v72 = v71?.constructor;
    try { new v72(); } catch (e) {}
    const t58 = 4096n;
    t58[2147483648] = a50;
    a52[2147483648] = a52;
}
new F47(C35, v39, v36, v39);
new F47(v39, v39, v42, v36);
const v76 = [-768382956,65537,10000,-268435456,-1815566166,-536870912,4];
try { v76.lastIndexOf(WeakMap); } catch (e) {}
const v78 = v76?.find;
try { v78(v78); } catch (e) {}
try { new v78(v10); } catch (e) {}
[128,7,55834];
try { Uint8ClampedArray.pop(); } catch (e) {}
function F83() {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F83(); } catch (e) {}
class C86 extends F83 {
}
try { new C86(); } catch (e) {}
C86.arguments;
class C89 {
    static {
        const v91 = this?.constructor;
        try { new v91(BigUint64Array); } catch (e) {}
        this.d = this;
        for (let v93 = 0; v93 < 25; v93++) {
            v93 + v93;
            function f95() {
            }
            const v96 = [601759695];
            const v97 = [1073741824,1073741823,1376142744,1073741825];
            522675525n / 522675525n;
            function f100(a101, a102, a103, a104) {
                arguments.length = arguments;
                arguments.length;
                function f107() {
                    return a101;
                }
                f107.prototype = f107;
                let v108;
                try { v108 = f107.constructor(this); } catch (e) {}
                v108.caller = v108;
                const v109 = f95();
                try { Int8Array.bind(v109); } catch (e) {}
                Int8Array.a = Int8Array;
                const v112 = new Int8Array();
                let v113 = 4;
                v113 << v113;
                v113++;
                const v117 = new Uint32Array(v113);
                const v118 = [v117];
                try { v118.entries(); } catch (e) {}
                const v122 = BigUint64Array * 536870887;
                const v123 = v122 / v122;
                v123 >> v123;
                v122 ** v122;
                function f126(a127, a128) {
                    return v109;
                }
                f126();
                const v130 = v112.buffer;
                try { v130.resize(536870887); } catch (e) {}
                Object.defineProperty(v130, "constructor", { writable: true, configurable: true, value: Date });
                2147483648 === 2147483648;
                2147483648 != 2147483648;
                new Int8Array();
                v130.slice(2147483648);
                %OptimizeFunctionOnNextCall(f107);
                let v138;
                try { v138 = v97["find"](..."find", a104, ...v96, ...v97, ...522675525n); } catch (e) {}
                const v140 = Symbol("find");
                try { new Symbol(); } catch (e) {}
                const v143 = v140.description;
                try { v143.strike(); } catch (e) {}
                Symbol.for(v143);
                const o146 = {
                };
                o146.c = o146;
                v138 <= a103;
                return arguments;
            }
            for (let v148 = 0; v148 < 5; v148++) {
                f100();
            }
        }
    }
}
try { new C89(); } catch (e) {}
