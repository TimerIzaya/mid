function f0() {
    const o11 = {
        "g": NaN,
        "f": 0.99728709190749,
        [0.99728709190749](a5, a6) {
            let v7;
            try { v7 = NaN(0.99728709190749, a5, a6, a5, 0.99728709190749); } catch (e) {}
            return v7[Symbol.match];
        },
        ...-1.0,
    };
    return o11;
}
const v12 = f0();
const v13 = f0();
const v14 = f0();
class C15 {
    #toString(a17, a18) {
        a18 == a17 ? a18 : a17;
        try { a18(v14); } catch (e) {}
        Object.defineProperty(this, -2, { enumerable: true, get: f0 });
        return v13;
    }
    static [v14] = f0;
    static [f0];
    0 = v13;
    b = C15;
    static g;
    static #h = v12;
    static 3263;
    [f0] = f0;
}
new C15();
new C15();
const v24 = new v14();
new Date();
let v27 = 1024;
for (let i31 = 0, i32 = 10;
    (() => {
        const v33 = i31 < v27;
        class C34 extends v24 {
        }
        return v33;
    })();
    i31++) {
}
Int32Array[2] = Int32Array;
new Int32Array(v27);
new Uint8ClampedArray(2698);
new Uint32Array(2698);
class C48 {
    static #m(a50, a51, a52) {
    }
    constructor(a54, a55, a56, a57) {
        this.#m();
    }
}
[-6.672391061426152e+307];
new Int32Array(Int32Array);
function f65(a66, a67, a68, a69) {
    const o70 = {
    };
}
class C71 {
    static get c() {
        const v73 = `
        `;
    }
}
function F75(a77, a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    a80[1];
}
for (let v83 = 0; v83 < 10; v83++) {
}
for (let v84 = 0; v84 < 25; v84++) {
    Array(36862);
    v27++;
    ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
}
