Date[Symbol.toPrimitive] = Date;
new Date();
[-2.220446049250313e-16,-189102.58008396672,-3.5065048194853096e+307,-1.7976931348623157e+308,1.0,0.3815086759189378];
[1.7976931348623157e+308,0.8431785227693137];
[1.5490146200941268,232.59232252355287,-2.220446049250313e-16,900989.4762728123,0.5607478212304542,455.57529965815297,667502.7941610089];
[65537,-3,-4294967295,268435440,-31464,4,9,46114,13,3];
[31774,1073741824,9007199254740990,2147483649,16,-213672035,7,4];
[0,-1179422201,3,-21413,40789,268435440,65536,10,9,536870889];
Object.defineProperty(Float64Array, "d", { configurable: true, enumerable: true, value: Float64Array });
Float64Array.d = Float64Array;
const v20 = new Float64Array(257);
const v23 = new Float64Array(3609);
try { v23.filter(Float64Array); } catch (e) {}
Float32Array.BYTES_PER_ELEMENT;
new Float32Array(9);
function f29() {
}
f29.valueOf = f29;
const v30 = [601759695];
const v31 = v30?.groupToMap;
try { new v31(257); } catch (e) {}
const v33 = [1073741824,1073741823,1376142744,1073741825];
let v34;
try { v34 = v33.findLastIndex(v33); } catch (e) {}
let v35 = 522675525n;
v35--;
function f37(a38, a39, a40, a41) {
    a40.toString = Date;
    a39 >>> a39;
    function f44() {
        return v35;
    }
    f29();
    try { new Int8Array(v20, v20, 3609); } catch (e) {}
    const v48 = new Int8Array();
    function f51(a52, a53) {
        const o59 = {
            "g": 1073741824,
            get d() {
                super[a52];
                return this;
            },
            "f": 3,
            ...a52,
            "getOwnPropertyDescriptor": f44,
            p(a57, a58) {
                return f44;
            },
            1: 257,
            10: 1073741824,
        };
        return o59;
    }
    function f60() {
        v34 <<= v23;
        function F61(a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = a64;
        }
        new F61(F61, F61);
        return 3;
    }
    f51.toString = f60;
    f51(f51(f51))[10];
    const v69 = v48.buffer;
    Int8Array.prototype = Int8Array;
    const v72 = new Int8Array();
    try { v72.set(-1024); } catch (e) {}
    let v74 = 1000000000000.0;
    -(v74--);
    v69.slice(2147483648);
    const t69 = [];
    t69.length += 1.0;
    class C81 {
        ["resolve"] = "resolve";
    }
    %OptimizeFunctionOnNextCall(f44);
    ("6Ct").normalize();
    class C85 {
    }
    function f86(a87, a88) {
        try {
            a88.e = a88;
        } catch(e89) {
        }
        return C85;
    }
    C85.valueOf = f86;
    Symbol.search = Symbol;
    Date.toString = Symbol;
    class C92 extends Date {
    }
    C92.valueOf = f51;
    try { new C92(); } catch (e) {}
    const v94 = new C92();
    try { v94.setMonth(C85, C92); } catch (e) {}
    let v96;
    try { v96 = v33["find"](..."find", a41, ...v30, ...v33, ...v35); } catch (e) {}
    for (const v99 in "1024") {
    }
    const o100 = {
        "execution": "1024",
    };
    Symbol.iterator = Symbol;
    Symbol("bZ");
    new Uint8ClampedArray();
    const o105 = {
    };
    v96 <= a40;
    return arguments;
}
for (let v107 = 0; v107 < 10; v107++) {
    v107 % v107;
    const v109 = f37(v107, v107, f29, v35);
    v109[3] = v109;
    const v111 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v112 = [601759695];
    const v113 = [1073741824,1073741823,1376142744,1073741825];
    v113[3];
    function f116(a117, a118, a119, a120) {
        function f122() {
            b = Float64Array;
            v33.b = -302142025;
            function F129(a131, a132) {
                if (!new.target) { throw 'must be called with new'; }
            }
            try {
                v113.forEach(Float64Array);
            } catch(e134) {
            }
            const v135 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            Symbol.toPrimitive;
            const o143 = {
                toString(a139, a140) {
                    return (a120 && Float64Array) <= v135;
                },
            };
            const o163 = {
                "c": -4294967297n,
                [522675525n](a146, a147) {
                },
                "c": v112,
                valueOf(a149, a150) {
                    return a117;
                },
                [-4294967297n](a152, a153, a154, a155) {
                },
                "e": -4294967295,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v111,
                "type": "Vre",
                ..."Vre",
                valueOf(a157, a158) {
                    return v135;
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a160, a161, a162) {
                    return a120;
                },
                5: -4294967295,
                6: -268435456,
            };
        }
        f122();
        const v166 = new Int8Array();
        v166.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f122);
        let v171;
        try { v171 = v113["find"](..."find", a120, ...v112, ...v113, ...522675525n); } catch (e) {}
        v171 <= a119;
        return arguments;
    }
}
%OptimizeFunctionOnNextCall(f37);
f37();
