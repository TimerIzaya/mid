const v3 = ["__proto__"];
const v6 = ([[v3,v3,"bigint",v3,"oY4"]])[0];
[6.873414183967199];
const v8 = [-339906.4811411048,452.41095316561496,200.02213983113302,-2.220446049250313e-16,-8.530990680672145e+307,NaN,-2.2250738585072014e-308,347.9459112861166];
[0.5109155498612239,1000000000000.0,-0.0];
class C10 {
    get e() {
        this["__proto__"];
        this == v8 ? this : v8;
        return this;
    }
    static ["oY4"];
    #f;
    static 1518;
    f;
}
let v16;
try { v16 = C10.toLocaleString(); } catch (e) {}
const v17 = new C10();
v17.f = v17;
const v18 = new C10();
v18.f = v18;
new C10();
for (let v20 = 0; v20 < 5; v20++) {
    v20 & v20;
    function f23() {
        const v25 = ("c").toLowerCase();
        v25[0] = v25;
        let v26 = 1864489360 << v25;
        return v26--;
    }
    f23.prototype = f23;
    1073741824n % 1073741824n;
    Uint8ClampedArray.g = Uint8ClampedArray;
    const v37 = new Uint8ClampedArray(16);
    let v38;
    try { v38 = v37.join(v37); } catch (e) {}
    v37[10] = v37;
    const v40 = -1322;
    const v42 = new Uint8ClampedArray(v6);
    let v43;
    try { v43 = v42.join(1322); } catch (e) {}
    const v44 = v42[315];
    function F45(a47, a48, a49, a50) {
        if (!new.target) { throw 'must be called with new'; }
        a47--;
        try {
            v8.a = "536870889";
        } catch(e52) {
        }
        try {
            this.b = a47;
        } catch(e53) {
        }
    }
    const v54 = v38?.constructor;
    try { new v54("6"); } catch (e) {}
    const v56 = new F45(1073741824n, 1073741824n, 257n, "6");
    try { v56.constructor(v56, v56, "oY4", v44); } catch (e) {}
    const v58 = new F45(1073741824n, 257n, 257n, v40);
    v58.a = v58;
    const v59 = new F45(v44, 257n, 257n, "536870889");
    v59.b = v59;
    new BigUint64Array(6);
    3768 >>> 3768;
    const v67 = new BigInt64Array(4046);
    const v68 = v38[123];
    v68 | v68;
    -115;
    function f73(a74, a75) {
        -a74;
        a75 >> a75;
        a74++;
        a75 + a75;
        const v80 = a74++;
        v80 >> v80;
        -6;
        try {
            v58.toString = a75;
        } catch(e83) {
        }
        Object.defineProperty(v59, v59, { configurable: true, enumerable: true, get: a75 });
        let o85 = {
            "d": v80,
            ...a74,
            get e() {
                return a75;
            },
        };
        v43.e = o85;
        [,...o85] = v67;
        a75[4046];
        const o89 = {
            "maxByteLength": 3035,
        };
        new ArrayBuffer();
        const v93 = new v16();
        try { v93.entries(); } catch (e) {}
        return 115;
    }
    f73(4046, 3768);
    URIError(Float64Array);
    function f100(a101) {
        return a101;
    }
    let v102;
    try { v102 = Uint8ClampedArray.bind(f73); } catch (e) {}
    v102.length = v102;
    f23();
    %OptimizeFunctionOnNextCall(f23);
}
