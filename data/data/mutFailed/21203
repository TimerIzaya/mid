class C3 {
    e;
    static #f;
    constructor(a5, a6) {
        try { this.toJSON(); } catch (e) {}
        a5 ** a5;
        a5.b ^= 0.6166373540258894;
        [] = "n";
        try { new a6(); } catch (e) {}
    }
    ["n"] = 56121;
    static [0.6166373540258894];
    static ["n"] = 0.6166373540258894;
}
const v10 = new C3(0.6166373540258894, 0.6166373540258894);
const v11 = new C3(v10, 0.6166373540258894);
new C3(v11, v11);
[6,127,0,44027,4096,9007199254740992,-7,0,59218];
const v14 = [-65536,-1];
[7476,-4294967296,924,4096,268435456,1538521022,-5,-1024];
function f16() {
    return v14;
}
[-9223372036854775807,-65537];
[-9223372036854775808,-14879,512,58376];
[64,65420,1400117362];
const v22 = new Float32Array(1);
const v26 = new Int8Array();
for (const v27 in v26) {
}
const v28 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    function f38() {
        const o47 = {
            "e": -4294967295,
            ...v28,
            84: arguments,
            ..."Vre",
            set b(a42) {
            },
            ["Vre"](a44, a45) {
                super[f38];
            },
        };
        return a33;
    }
    class C49 extends Float32Array {
        constructor(a51, a52, a53) {
        }
    }
    f38();
    %OptimizeFunctionOnNextCall(f38);
    let v56;
    try { v56 = v30[a35](..."find", a36, ...v29, ...v30, ...522675525n); } catch (e) {}
    v56 <= a35;
    return arguments;
}
try { f32(964598.6714444079, 964598.6714444079, 964598.6714444079, v29); } catch (e) {}
let v61 = 5;
-9 >>> -9;
const v64 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v65 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v65.map(1.0); } catch (e) {}
const v68 = Symbol.species;
v64[v68] = 8.580387257773513;
~268435440;
Uint8Array.length;
new Uint8Array(268435440);
v68.description = 964598.6714444079;
v61 = -15;
const v76 = new Int8Array(8);
[v76];
995 | 995;
const v81 = new Uint8ClampedArray(995);
const v83 = new Int8Array(v81);
const v84 = v83.copyWithin;
v84.name = v84;
for (let v85 = 0; v85 < 32; v85++) {
    v64[-2] = -9 << v85;
    const v87 = v65[v68];
    try {
        v87.__proto__ = v87;
    } catch(e88) {
        e88.g = e88;
    }
    const v90 = new Uint8ClampedArray();
    v90.byteOffset;
    Math.sin(/c(?:ab)|cde/vdmy.exec());
    const v97 = "object" + v85;
    const v98 = v97?.trim;
    try { new v98(); } catch (e) {}
    v65[v97] = v85;
}
const v100 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F101(a103, a104, a105, a106) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a103;
}
const v107 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C109 {
    static #e;
    m(a111, a112, a113, a114) {
        v107.#e;
        a112.#e = -1;
    }
}
let v117 = 0;
v117 & v117;
do {
    break;
    v100[Symbol.asyncIterator] = v64;
    v117++;
} while (v117 < 9)
Uint8ClampedArray.name;
const v127 = new Uint8ClampedArray(995);
new Int8Array(v127);
new Uint8ClampedArray(v22);
