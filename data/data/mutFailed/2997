let v0 = 40738;
class C3 {
    constructor(a5) {
        this[1189673815] = this;
        a5++;
        this[702504421] = 9007199254740991;
        2 | 2;
        try {
            this.length = 2;
        } catch(e9) {
        }
        let v10 = 0;
        do {
            let v11;
            try { v11 = C3.setUint8(-12); } catch (e) {}
            try { v11["o"](); } catch (e) {}
            v10++;
        } while (v10 < 4)
    }
    1189673815 = v0;
    static set d(a18) {
        new Float32Array(3872);
        new BigInt64Array(6);
        new Uint32Array(2554);
    }
}
C3.length = C3;
const v28 = new C3(9007199254740991);
const v29 = v28[1189673815];
new C3(9007199254740991);
throw 9007199254740991;
v0 = 9007199254740991;
v28.b;
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a35;
    } catch(e37) {
    }
    try {
        this.h = -12;
    } catch(e38) {
    }
}
new F32(v29, v0, v29);
new F32(-12, v0, v29);
new F32(9007199254740991, 9007199254740991, 9007199254740991);
new C3(-12);
const v43 = [-1.0,-1.1354790285406136,1000000000.0,5.0,0.8711944675655096,0.3255770122288484,-1.4523381789688923e+308];
[-1000000000000.0,-839.7698978534496,-3.0];
[-2.2250738585072014e-308,-709.5784742096912,9.877213488244563e+307];
const v47 = new Date();
let v48;
try { v48 = v47.setFullYear(-12, v43, v43); } catch (e) {}
const v51 = new Int32Array(332);
const v54 = new Uint8Array(127);
let v55;
try { v55 = v54.fill(C3); } catch (e) {}
const o56 = {
    __proto__: v28,
};
/5x/vdim;
/[\cA]/v;
/\P{Decimal_Number}/gudms;
new BigUint64Array(1);
new Int16Array(8);
new BigUint64Array(2770);
const v72 = new Float64Array(3577);
-4 - -4;
-1073741824 + -1073741824;
for (let v78 of v48) {
    --v78;
}
+1;
try { o56.at(v28, v51, v47); } catch (e) {}
try { new BigUint64Array(BigUint64Array, v28, BigUint64Array); } catch (e) {}
170.79545126331868 != 170.79545126331868;
Date(-3.0 | -9007199254740992);
v54 !== 8;
!"copyWithin";
try {
    v72.toString = v55;
} catch(e94) {
}
