class C3 {
    c;
    #m(a5, a6) {
        let v4 = this;
        a6[2] = a5;
        let v7;
        try { v7 = a6(987.3913765451775, 0.14922916512017514, 0.14922916512017514, v4, v4); } catch (e) {}
        v4 = v7;
        const t7 = 783123970;
        const v8 = delete t7?.[10];
        try { v8(v8, a5); } catch (e) {}
        return 783123970;
    }
    [0.14922916512017514] = 987.3913765451775;
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
class C13 extends C3 {
    d = v11;
    #p(a15, a16, a17, a18) {
        let v14 = this;
        v14--;
        super.a = a17;
        return a18;
    }
    #a = v12;
    static 257 = 783123970;
    static #b;
    static [v10] = C3;
}
new C13();
new C13();
new C13();
class C26 {
    static #m(a28, a29) {
        return a29;
        ("QQcMj").normalize("NFKD");
        return a28?.[179];
    }
    ["valueOf"] = "valueOf";
    b;
    13;
}
C26.name = C26;
const v34 = new C26();
const v35 = new C26();
const v36 = new C26();
v36[13] = v36;
const v37 = [0.602038268284836,-1.7976931348623157e+308,-4.211494269917182,-939259.7989376923,0.02623941368615268];
const v38 = [2.220446049250313e-16,-2.220446049250313e-16,-1000.0];
let v39;
try { v39 = v38.entries(); } catch (e) {}
const v40 = [-1000000000.0,4.0,-9.792130726362629];
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
    try { a43.toString(); } catch (e) {}
    a46[1];
    try {
        this.b = v35;
    } catch(e50) {
    }
    try {
        this.h = a45;
    } catch(e51) {
    }
    try {
        this.c = v37;
    } catch(e52) {
    }
}
C3.e = F41;
new v39(v40, v38, -1.7560623034267127e+308, v40);
const v54 = new F41(v37, v38, -1.7560623034267127e+308, v35);
v54.e = v54;
new F41(v37, v40, v34, -1.7560623034267127e+308);
const v57 = new BigUint64Array();
function F58() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v60 = 0;
        let v61 = 0;
        while (0 - 0, v61 < 0) {
            for (let v65 = 0; v65 < 5; v65++) {
            }
            v61++;
        }
        do {
            try { v57.entries(); } catch (e) {}
            const v69 = v60++;
            v69 >>> v69;
        } while (v60 < 5)
    } catch(e73) {
    }
}
try { new F58(); } catch (e) {}
new F58();
