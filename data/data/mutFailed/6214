class C3 {
    constructor(a5, a6) {
        /[x]d[^(?:a+){0,0}]?/gvim;
        /M/gudsy;
        /f\p{General_Category=Decimal_Number}a|b+/gum;
    }
    toString(a11, a12) {
        const t7 = "number";
        t7[a12] = this;
        let v13 = 0;
        do {
            let v14;
            try { v14 = a12(-968954084); } catch (e) {}
            try { v14(v14, v14, v13, this); } catch (e) {}
            v13++;
        } while (v13 < 6)
        return v13;
    }
}
new C3(1000000000000.0, C3);
const v20 = new C3("number", 1000000000000.0);
new C3("number", v20);
for (const v22 in "number") {
    C3 = v20;
    const o25 = {
        "maxByteLength": 6,
    };
    const v27 = new SharedArrayBuffer(0, o25);
    new Int8Array(v27);
}
/(?<=)/guimy;
const v31 = /[a-zA-Z0-9]/gvdims;
/a??a{0}foo(?<=bar)baz+/vim;
new Array(5);
[0.4011189249997249];
[-0.6837508401846577,-1.7976931348623157e+308];
[-195141.55497202475,0.0452235209359082];
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f45() {
    let v47 = 1000000000000.0;
    const v48 = v47--;
    -v48;
    class C53 {
        constructor(a55) {
            const v57 = new Float32Array();
            try { v57.entries(); } catch (e) {}
            const v59 = new Uint16Array(12, -4294967296, v48);
            new Float32Array(v59, -4294967296, 268435439, v47, v59);
        }
    }
    try { new C53(12); } catch (e) {}
    const v62 = new C53(257828.6336153492);
    const v63 = new C53();
    const v64 = new C53(-4294967296);
    const v65 = [v64,C53];
    [257828.6336153492,v64,v62,v64,v65];
    const v67 = [v64];
    class C68 extends C53 {
        [v62];
    }
    const v69 = new C68();
    const v70 = v67.constructor;
    try { v70.isArray(v67); } catch (e) {}
    class C72 extends v70 {
    }
    C72.a = C72;
    const v73 = new C72();
    const v74 = v73?.constructor;
    try { new v74(); } catch (e) {}
    Object.defineProperty(v73, 65537, { value: v63 });
    try { v69.m(v65); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f45);
f45();
%OptimizeFunctionOnNextCall(f45);
try {
    C3.b = v31;
} catch(e78) {
}
for (let v79 = 0; v79 < 32; v79++) {
    const t83 = "number";
    t83["p" + v79] = v79;
}
f45();
