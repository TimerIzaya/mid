[43379.9339824121];
[1e-15];
const v2 = [1000000.0,-1.6233230355124384,-1.0,4.0,2.0];
new RegExp(v2, v2, RegExp);
new WeakMap();
function f10() {
    return -33157;
}
const v11 = [-1e-15,0.0];
[-664815.8018387095,-7.82197432602635e+307,-762089.2863067989,0.33910881846425134];
[-1.0,0.7608826231933395,2.2250738585072014e-308,-656.552035602637,-1000000.0,-1.7976931348623157e+308,8.65225892878798,757.4612441046415,1.1882914039396098e+308,NaN];
function f14() {
    const o22 = {
        3: "n",
        "f": 1836424012,
        m(a19, a20) {
            a19++;
            return a19;
        },
        "d": 1836424012,
    };
    Date.parse([10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163]);
    function F26(a28, a29) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return o22;
}
%PrepareFunctionForOptimization(f14);
f14(v2, v11);
const v31 = f14();
%OptimizeFunctionOnNextCall(f14);
class C32 {
}
for (let v34 = 0; v34 < 25; v34++) {
    function f35() {
        return f35;
    }
    const v36 = [601759695];
    const v37 = [1073741824,1073741823,1376142744,1073741825];
    function f39(a40, a41, a42, a43) {
        function f45() {
            return a40;
        }
        for (let v46 = 0; v46 < 5; v46++) {
            try {
                C32.__proto__ = Date;
            } catch(e47) {
            }
        }
        const v49 = new Int8Array();
        const v51 = new Uint32Array();
        const v52 = [v51];
        function f54(a55, a56) {
            return v31;
        }
        f54(v34, Uint32Array);
        const v58 = v49.buffer;
        new Int8Array(v52);
        v58.slice(a40, a42);
        %OptimizeFunctionOnNextCall(f45);
        try { v37["unscopables"](..."unscopables", a43, ...v36, ...v37, ...522675525n); } catch (e) {}
        f35(Symbol, BigUint64Array, v31);
        return arguments;
    }
    for (let v65 = 0; v65 < 5; v65++) {
        f39();
    }
}
f14();
