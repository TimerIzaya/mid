function f1() {
    const o13 = {
        1: true,
        "e": true,
        "h": true,
        [true]: true,
        valueOf() {
            const v6 = -1.0;
            Math.asin(-1657288936);
            v6 % 1.0;
            Math.hypot(-1657288936);
            !-1657288936;
            ~1.0;
            !this;
            return v6;
        },
    };
    return o13;
}
f1();
const v15 = f1();
f1();
function f20() {
    return 65536;
}
class C21 {
    [v15] = -256;
    static o(a23, a24, a25, a26) {
        a25[-4294967297] = 1073741824;
        return a25;
    }
    static #f;
    static {
        f1();
        [7.697552900743264e+307,305.000685607939,-704.412348077831,1000000000.0,6.554259522894446e+307,-1.0,-2.0,906.6112416862254,8.221013022338245e+307];
        [0.0966020329124676,-0.0];
        [320.3386936840259,0.568439911374667,-5.304549772854208,0.7240644981600686,0.30764219022498507,1.7976931348623157e+308,-2.220446049250313e-16,-4.0,4.0];
        ([974836.255416306,7.54270135293536,0.0,0.35539841926815563,1.385396251341163,-1000000000000.0,NaN,-1.7976931348623157e+308]).toLocaleString();
        function f38() {
            return f38;
        }
        const t41 = 5;
        t41.constructor = f38;
    }
}
const v39 = new C21();
new C21();
const v41 = new C21();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -256;
    } catch(e46) {
    }
    try {
        this.g = a45;
    } catch(e47) {
    }
    try {
        this.d = a44;
    } catch(e48) {
    }
}
const v49 = new F42(v41, v39);
const v50 = new F42(v39, v49);
new F42(v15, v50);
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v54 = 0; v54 < 1000; v54++) {
        const v56 = "p" + v54;
        v56.fontcolor();
        this[v56] = 65536;
    }
}
new F52();
new F52();
