class C1 {
    static {
        function F3(a5, a6) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            const v8 = this.constructor;
            try { new v8(); } catch (e) {}
            try { this.constructor(); } catch (e) {}
        }
        new F3(C1, C1);
    }
}
new Float32Array(1);
8 / 8;
try { new Int32Array(2.2250738585072014e-308, 2.2250738585072014e-308, 8); } catch (e) {}
const v21 = new Int32Array(8);
const v24 = new Uint16Array(309);
("29753").replaceAll("29753");
Symbol.iterator;
const v30 = new Int8Array();
v21["keys"](v30, ...v21, ..."keys");
class C35 {
    static #p(a37) {
        function f38() {
            return a37;
        }
    }
}
try { new C35(); } catch (e) {}
new Int32Array(Int32Array);
const v43 = new Int16Array(Int16Array, Int16Array, Int16Array);
const o44 = {
    "g": Uint16Array,
    ...v43,
};
Map.length;
const v47 = new Map();
const v48 = v47?.constructor;
let v49;
try { v49 = new v48(); } catch (e) {}
try { v49.keys(); } catch (e) {}
[1073741824,1073741823,1376142744,1073741825];
function f54(a55, a56) {
    const o57 = {
    };
    o57.h = o57;
    const v58 = o57?.__defineSetter__;
    let v59;
    try { v59 = new v58(v24, 8); } catch (e) {}
    let v61 = 12;
    v61--;
    Uint16Array(v61);
    const v64 = o57.constructor;
    try { new v64(v59); } catch (e) {}
}
const v66 = f54?.constructor;
try { new v66(C35); } catch (e) {}
f54();
function f69(a70, a71, a72, a73) {
    const o74 = {
    };
    return o74;
}
const v75 = f69(f69, f69, f69, f69);
const v78 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v79 = [601759695];
const v80 = [1073741824,1073741823,1376142744,1073741825];
function f82(a83, a84, a85, a86) {
    function f88(a89) {
        return a84;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f88 });
    try { arguments.toString(); } catch (e) {}
    function f91() {
        const v93 = ("Vre")?.toLocaleUpperCase;
        try { new v93(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v97 = -268435456;
        v97--;
        -(v97 + v97);
        const o114 = {
            "c": -4294967297n,
            [522675525n](a102, a103) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v79,
            valueOf(a105, a106) {
            },
            "e": v97,
            "maxByteLength": -4294967295,
            "arguments": v78,
            ...v79,
            "type": "Vre",
            ..."Vre",
            valueOf(a108, a109) {
                return a108;
            },
            ..."Vre",
            4: "Vre",
            "c": v97,
            "type": "Vre",
            "type": "Vre",
            toString(a111, a112, a113) {
                return -4294967297n;
            },
            5: -4294967295,
            6: v97,
        };
        try { o114.valueOf(); } catch (e) {}
        return "Vre";
    }
    f91.length;
    f91();
    Int8Array.a = Int8Array;
    const v119 = new Int8Array();
    try { v119.findIndex(v75); } catch (e) {}
    const v121 = v119.buffer;
    function f122(a123) {
        return a123;
    }
    v121.constructor = f122;
    const v125 = v121.slice(2147483648);
    %OptimizeFunctionOnNextCall(f91);
    try { ("find").strike(); } catch (e) {}
    const o128 = {
    };
    try {
        o128.e = a84;
    } catch(e129) {
    }
    try {
        const o130 = {
        };
        o130.e = a84;
        o130.g = -4294967297n;
    } catch(e131) {
    }
    try {
        let o132 = {
        };
        function f133(a134) {
            o132 = a134;
            return a134;
        }
        Object.defineProperty(o132, "g", { set: f133 });
        o132.e = a84;
        o132.g = -4294967297n;
    } catch(e135) {
    }
    try {
        const o136 = {
        };
        o136.e = a84;
        o136.g = -4294967297n;
        o136.c = v125;
    } catch(e137) {
    }
    let v138;
    try { v138 = v80["find"](..."find", a86, ...v79, ...v80, ...522675525n); } catch (e) {}
    v138 <= a85;
    return arguments;
}
f54();
let v141 = 1000000000000.0;
v141--;
-2.0 < -2.0;
function f146(a147, a148) {
    const o149 = {
        [10000n]: a148,
    };
}
~-1.093925554716035e+308;
function F152(a154, a155, a156, a157) {
    if (!new.target) { throw 'must be called with new'; }
    a154 >>> a154;
    const v159 = this.constructor;
    try { new v159(758.9371938038303, this); } catch (e) {}
    this.c = a154;
}
const v161 = new F152(-2.0);
v161.c = v161;
const v162 = new F152(-1.093925554716035e+308);
const v163 = v162 in v161;
v163 || v163;
const v167 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f168(a169) {
    return 512;
}
v167.toString = f168;
function f170(a171, a172) {
    return 512;
}
const v174 = new Promise(f170);
v174[v167] += 36002;
v163 || v163;
const t195 = [];
t195.length += 1.0;
try { undefined(); } catch (e) {}
try { ("1024").endsWith(v49); } catch (e) {}
for (const v182 in "1024") {
}
