function f0() {
}
class C1 {
    static #a;
    get c() {
        ++f0;
        (2 ** this) || (2 - this);
        Math.cos(2 ^ this);
        f0++;
        return this;
    }
}
const v13 = new C1();
const v14 = new C1();
v14.c;
const v16 = new C1();
const v18 = new Map();
const v19 = v18?.set;
try { new v19(C1, v14); } catch (e) {}
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    a24.c;
    a25.c;
    try {
        this.b = Map;
    } catch(e29) {
    }
    try {
        this.a = a23;
    } catch(e30) {
    }
}
new F21(f0, v16, v13, v13);
const v32 = new F21(v18, v14, v14, v16);
new F21(C1, v16, v14, v14);
[536870887];
[39248];
[-9,507706829,7];
new BigUint64Array(2864);
let v42 = 2549;
v42--;
[-25855];
try { ("toString").fontsize(2864); } catch (e) {}
const v50 = ("boolean").split("toString");
new BigInt64Array(v42);
const v52 = [];
parseInt(v52.toSpliced(v52));
try { Float32Array(v42, v42, undefined); } catch (e) {}
new Float32Array(3);
const v60 = /(J5a{0,1}?)/y;
/u?/udms;
const v62 = /bf/gvms;
v62.lastIndex = v62;
32 >>> 32;
let v65 = 32 + 32;
const v66 = v65--;
new Uint8ClampedArray(32);
4096 & 4096;
const v71 = 4096 & 4096;
v71 * v71;
let v74;
try { v74 = new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
const v75 = v74?.toString;
try { new v75(); } catch (e) {}
new Uint8Array(4096);
1582 % 1582;
let v80 = 1582 >> 1582;
v80--;
const v83 = new Int8Array(1582);
4 >>> 4;
4 - 4;
-54813 - -54813;
8 | 8;
8 & 8;
const v92 = [-54813,1582,-54813,8];
const v93 = [-54813];
const v94 = [v50];
try { v94.map(4); } catch (e) {}
function f96(a97, a98, a99, a100) {
    try { a97.fill(v83); } catch (e) {}
    a100 >>> a100;
    let v103;
    try { v103 = a97.toString(); } catch (e) {}
    try { v103.anchor(v66); } catch (e) {}
    try { a98.groupToMap(v16); } catch (e) {}
    a99[0] = a99;
    try { a97.copyWithin(undefined, a98); } catch (e) {}
    const o115 = {
        n(a108, a109, a110, a111) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return v32;
        },
        ...v94,
        "b": v92,
        ...a99,
        ...v94,
        129: 4,
        ...a97,
    };
    o115[2] = o115;
    return o115;
}
f96.caller = f96;
const v117 = f96(v93, 8, f96(v93, v94, v92, 4), 4);
v117[129] = v117;
const v118 = f96(v94, 4, 4, 4);
v118.d = v118;
const v120 = -26206 - -26206;
let v122 = 129;
v122--;
let v125;
try { v125 = new Map(); } catch (e) {}
try { v125.set(v50, v120); } catch (e) {}
const v127 = /ND2/gds;
v127.b = v127;
class C128 extends Map {
}
C128.length;
const v130 = new C128();
try { v130.get(Uint8Array); } catch (e) {}
const v132 = v130.isPrototypeOf();
!(v132 && v132);
!(v132 && v132);
Date.name;
let v140;
try { v140 = Map.parse(4); } catch (e) {}
v140++;
const v142 = -v140;
class C143 {
    static {
        let v144 = this;
        v144.e = v144;
        for (let v145 = 0; v145 < 25; v145++) {
            v145 >>> v145;
            const v147 = [601759695];
            try { v147.toString(); } catch (e) {}
            const v149 = [1073741824,1073741823,1376142744,1073741825];
            function f151(a152, a153, a154, a155) {
                try { a152.call(a152); } catch (e) {}
                a153--;
                try { Math.round(v144); } catch (e) {}
                const v161 = Math.tan(-532550611);
                v161 === v161;
                const v164 = new Date(Date);
                try { v164.setDate(v145); } catch (e) {}
                try { new a152(); } catch (e) {}
                a153 & a153;
                ~a153;
                let v169;
                try { v169 = new a152(); } catch (e) {}
                const v170 = v169?.constructor;
                try { new v170(); } catch (e) {}
                const v172 = a154 << a154;
                v172 % v172;
                arguments[2];
                function f176() {
                }
                f176.d = f176;
                const v178 = new v147();
                const v181 = BigUint64Array * 536870887;
                const v182 = v181 - v181;
                v182 - v182;
                v144++;
                const v185 = v181 ** v181;
                v185 >> v185;
                let v188;
                try { v188 = Number.parseInt(v182, v182); } catch (e) {}
                v188 >>> v188;
                let v190;
                try { v190 = new Number(v60); } catch (e) {}
                let v191;
                try { v191 = v190.valueOf(); } catch (e) {}
                Number.isNaN(v191);
                Number.isNaN(v185);
                function f195(a196, a197) {
                    return Number;
                }
                try { f195(); } catch (e) {}
                v178.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f176);
                try { ("find").codePointAt(522675525n); } catch (e) {}
                try { v149["find"](..."find", a155, ...v147); } catch (e) {}
                const o204 = {
                };
                o204.a = o204;
            }
            try { f151(v145, v142, v94, v94); } catch (e) {}
            for (let v206 = 0; v206 < 5; v206++) {
                f151(v144, v206, v206);
            }
        }
    }
}
C143.prototype = C143;
