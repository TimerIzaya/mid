function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = this;
    } catch(e3) {
    }
    try {
        this.b = 1709787445;
    } catch(e4) {
        new BigInt64Array(10);
        new Int8Array(3);
        new BigInt64Array(this);
    }
    try {
        const t14 = 1709787445;
        t14.d = 1709787445;
    } catch(e14) {
    }
}
const v15 = new F0();
new F0();
new v15();
const v18 = [4.0,-639.3657678173222,0.33894236715021,4.0,-5.0,Infinity];
[0.36581433379078543,-1.0782074067971646e+308,-1000.0,0.28412199418248163,1.0];
const v20 = [384978.3732530533,0.07190727491006399,0.11028441920734278];
const v21 = v20[1];
function f25() {
    return v21;
}
const v26 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
v26[5] = v26;
v26.flat(v26);
try { Uint8ClampedArray(F0, v26, v18); } catch (e) {}
new Uint8ClampedArray(2);
try { new Uint8ClampedArray(1073741825n, Uint8ClampedArray, v20); } catch (e) {}
new Uint8ClampedArray(256);
5 - 5;
const v39 = new Uint16Array(5);
v39[1];
const o43 = {
    "maxByteLength": 1468,
};
o43.b = o43;
let v44 = 2;
v44++;
const v46 = new ArrayBuffer(v44, 1073741825n);
new Int8Array(v46);
[-4096,13,16,6] + v20;
