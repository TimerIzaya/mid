function f1() {
    new Uint8Array(64);
    return Set;
}
Set.toString = f1;
const v5 = [1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164];
function f6() {
    return f6;
}
v5.constructor = f6;
const v7 = new Set();
class C11 extends Set {
    static {
        let v13 = this ^ -8.430852580184701e+307;
        v13 **= v13;
    }
    valueOf(a15, a16) {
        const v18 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
        class C19 {
            constructor(a21, a22, a23, a24) {
                const v25 = this.constructor;
                try { new v25(); } catch (e) {}
                for (let v27 = 0; v27 < 5; v27++) {
                    v18[v27] = a24;
                }
            }
        }
        v7[Set](a16);
        return -218.1268094132289;
    }
    1 = -8.430852580184701e+307;
}
new C11();
BigInt.valueOf = f1;
BigInt.toString = BigInt;
try {
    BigInt(BigInt);
} catch(e36) {
}
new C11();
const v38 = /8/vdiy;
class C39 {
    constructor(a41, a42) {
        const v43 = this.constructor;
        try { new v43(); } catch (e) {}
        try {
            b = v38;
        } catch(e45) {
        } finally {
        }
    }
}
new C11();
[,];
const v52 = new Float32Array(Float32Array, Float32Array, Float32Array);
async function f54(a55, a56, a57) {
    v52.h = v52;
    await 160;
    return f54;
}
new Int32Array(8);
new Float32Array(1020);
new Uint8ClampedArray(9);
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
}
const v71 = new F66();
const o77 = {
    toString(a74, a75, a76) {
        Object.defineProperty(v71, a74, { writable: true, configurable: true, set: Array });
        return Array;
    },
};
const v80 = new Uint8Array(165);
v80.lastIndexOf();
