[-1e-15,-4.0];
const v1 = [-2.220446049250313e-16,-3.0,-1.0,-6.768651523014772e+307,2.2250738585072014e-308,0.08280988855676807,-1.1788174109380533e+308,-24911.069751249393,-375.8193784211943];
const v2 = [9.64246076776908,2.220446049250313e-16,-2.220446049250313e-16,-5.0,4.0,-0.0,1000.0,-1.0];
const v5 = new Int8Array(0);
try { v5.entries(); } catch (e) {}
const v9 = new Reflect(3393);
v9[66] = 3393;
new Int8Array(64);
-261.99102172609366 >>> v5;
class C17 {
    c = -261.99102172609366;
    ["localeCompare"];
    static [v2];
    toString(a19, a20) {
        do {
            function F22(a24, a25, a26, a27) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = "localeCompare";
                } catch(e28) {
                }
            }
        } while (0 < 6)
    }
}
C17.e = C17;
const v31 = new C17();
const v32 = new C17();
v32.c = v32;
const v33 = new C17();
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try { a36.apply(0, v1); } catch (e) {}
    try {
    } catch(e39) {
    }
    try {
    } catch(e40) {
    }
}
const v41 = new F34(C17, v32);
const v44 = new Float64Array(147);
v44[51];
const o46 = {
};
try { new C17(...-1.0, v41, v31, v33, F34, ...v44); } catch (e) {}
const o48 = {
};
o48.h = o48;
class C3 {
    static {
        try { this.bind(-56327); } catch (e) {}
        class C6 {
            static 3;
        }
        C6.name = C6;
        new C6();
        const v8 = new C6();
        const v9 = v8?.constructor;
        try { new v9(); } catch (e) {}
        const v11 = new C6();
        const v12 = v11?.propertyIsEnumerable;
        try { new v12(C6); } catch (e) {}
    }
    set e(a15) {
        const o19 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o19);
    }
}
C3.b = C3;
const v21 = new C3();
const v22 = new C3();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
const v25 = new C3();
class C26 {
    n(a28, a29) {
        try { new a29(36590, a28, a29, this, -10); } catch (e) {}
        function F31(a33, a34, a35, a36) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = C3;
            } catch(e37) {
            }
            try {
                this.f = -10;
            } catch(e38) {
            }
        }
        const v39 = new F31(-56327, a29, -10, C3);
        new F31(-56327, a28, 36590, v39);
        new F31(36590, a28, 36590, v21);
        return v25;
    }
}
try { C26.toString(); } catch (e) {}
new C26();
const v44 = new C26();
const v45 = new C26();
try { v45.n(v21, 36590); } catch (e) {}
class C47 extends C3 {
    static set d(a49) {
        try {
            super[v44] = v21;
        } catch(e50) {
        }
    }
    n(a52, a53, a54, a55) {
        const o58 = {
            "maxByteLength": 646,
        };
        const v60 = new ArrayBuffer(646, o58);
        new Int32Array(v60);
        return -56327;
    }
}
new C47();
new C47();
const v65 = new C47();
const v66 = v65?.constructor;
try { new v66(); } catch (e) {}
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 10270;
    } catch(e71) {
    }
    try {
        this.e = 10270;
    } catch(e72) {
    }
}
new F68();
new F68();
new F68();
1.7976931348623157e+308 !== 1.7976931348623157e+308;
2147483647 + 2147483647;
const o84 = {
    230: 3,
};
o84[230] = o84;
let v85 = 0;
while ((() => {
        6 - 6;
        const v88 = v85 < 6;
        v88 || v88;
        return v88;
    })()) {
    let v90;
    try { v90 = o84.repeat(); } catch (e) {}
    o84[v90];
    v85++;
}
