const v0 = [552557.8049072935,-2.4716918718139538e+306,242374.64688726468,-1000000000000.0];
const v1 = [0.7275418479701242,-1.7976931348623157e+308];
const v2 = [-127.76152277562858,0.0,-9.99672512603919,0.29240024128037256,1.2982163122385402e+308,-3.0,0.5138007072594551];
class C3 {
    4096;
    f;
    static a = v1;
    h;
    static #f = v2;
    static #toString(a5, a6) {
        return -4.0;
    }
    static 536870887 = v2;
    #b;
    static #f = v2;
    a;
}
new C3();
new C3();
new C3();
const v13 = v0.length;
Object.defineProperty(v0, v13, { configurable: true, value: C3 });
let v15 = 1073741823;
Math.atan2(v13, 1024);
++v15;
const v20 = v13 && C3;
const v21 = v15++;
~v13;
~1024;
~v21;
[-4096,-1274739618,-9007199254740991,-11];
[-4294967295,-9,4294967297,1077371854,1073741824];
[2298];
const v28 = [];
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(a38, v28); } catch (e) {}
    new Set();
    const v43 = new C3();
    v43[Symbol.unscopables] = v20;
    a36[2];
}
new F33("ceil", "pop", "ceil", "isConcatSpreadable");
new F33("ceil", "ceil");
