const v0 = [-1651373258,2147483647,1073741825,-909082613,9,-48613,-256,-27294,11];
[19214,1073741824,15,6];
const v2 = [-5711,12,212979920,16,3,10000];
const v5 = new BigUint64Array(-2028731328);
async function* f8(a9, a10) {
    return Date;
}
const v13 = BigUint64Array * 536870887;
const v14 = v13 ** v13;
~v14;
new BigUint64Array(3582, 536870887, v14, BigUint64Array);
const v20 = new Int32Array(1024);
class C21 {
    static toString(a23, a24, a25, a26) {
        -2028731328 / v20;
        a25 = v2;
        super.h = v5;
        let [] = v5;
        let v29 = 10;
        (v29 & 1.0) - v29;
        v0 || v29;
        +a23;
        Math.tan(a24);
        return --v29;
    }
}
new C21();
new C21();
new C21();
class C41 {
    static 9 = 9.187362692894364;
}
for (const v42 in C41) {
}
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F43();
const v47 = new F43();
const v48 = new F43();
function F50(a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    try { new v55(this, F50, a54); } catch (e) {}
    a52.c = a52;
    const v57 = a54?.constructor;
    try { new v57(); } catch (e) {}
    this.b = a54;
}
new F50(v48, v47, v48);
new F50(v47, v48, v46);
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    function f65() {
        const v67 = [];
        class C68 {
        }
        const v70 = Array();
        v70.unshift();
        const v72 = [v70,v70];
        function F73(a75) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C76 extends F73 {
            valueOf(a78, a79, a80, a81) {
            }
        }
        const v82 = new C76();
        const o89 = {
            set g(a84) {
            },
            [v72](a86, a87, a88) {
            },
        };
        for (const v90 in o89) {
            try { v67.flat(); } catch (e) {}
            new C68();
            try { v82.valueOf(v90); } catch (e) {}
        }
        new Int8Array(628786973);
        return F61;
    }
    this.constructor = f65;
    const v96 = this.constructor;
    try { v96(); } catch (e) {}
}
const v99 = new Float64Array();
function F100(a102, a103) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a102;
    } catch(e104) {
        for (let [v105,v106] of a102) {
        }
    }
    try {
        const v107 = v99[this];
        const v108 = [];
        new Float32Array(7);
        v108[1];
        new F100(v107, -268435456n);
    } catch(e115) {
    }
}
new F61();
