const v0 = [-1073741824,-4096,956436042,536870889,1791491987];
const v1 = [536870912,2887,-42703,-3,268435456,9007199254740991];
const v2 = [256,-1073741824,-13,268435439,65536,-8,13,9007199254740991,0,-4294967296];
const v5 = new BigUint64Array(4);
v5.reverse();
Promise.reject(Promise);
function f9() {
    return v2;
}
const v10 = [f9,v0,f9,v1];
[f9,v0,v10,v10];
const v12 = [v1,v1,v10];
function f13(a14, a15, a16) {
    const o30 = {
        set c(a18) {
            Math.sinh(0);
            try { ("NaN").startsWith(h); } catch (e) {}
            const o28 = {
                "execution": "async",
                "type": "major",
            };
            gc(o28);
        },
    };
    function F31() {
        if (!new.target) { throw 'must be called with new'; }
        typeof arguments;
        gc();
    }
    return o30;
}
f13(v12, v10, v1);
f13(v0, v12, v12);
f13(v0, v0, v2);
function f43() {
    return 2720;
}
f43.valueOf = f43;
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(a46, 256); } catch (e) {}
    -a46;
    a47--;
    this.h = f43;
}
new F44(65537, f43);
const v53 = new F44();
v53.toString = f43;
class C54 extends F44 {
    #h;
    3120 = F44;
    #g = v53;
    valueOf(a56, a57, a58) {
    }
    512 = v2;
    #e;
    constructor(a60, a61, a62) {
    }
    static {
        function f64(a65, a66, a67) {
            function f68(a69) {
                return v12;
            }
            return f64;
        }
        const v72 = ["function",v12,"function"];
        const o73 = {
            "arguments": v72,
            "type": "function",
        };
        new Worker(f64, o73);
    }
    [v53] = 256;
}
new C54();
new Uint8ClampedArray(Date);
const v81 = -25283n >> (-25283n && -25283n);
v81 | v81;
new C54();
new C54();
