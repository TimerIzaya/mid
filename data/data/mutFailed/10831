function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -14189;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
Object.defineProperty(Symbol, 116, { writable: true, configurable: true, get: Symbol, set: Symbol });
v4.h;
for (let v8 = 0; v8 < 32; v8++) {
    v4["p" + v8] = v8;
}
let v11 = new F0();
class C15 extends F0 {
    constructor(a17, a18) {
        super();
        v11[-2];
        const o23 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o23);
    }
}
const v25 = new C15(v4, "cXax");
const v26 = new C15(v25, "cXax");
const v27 = new C15(v26, "cXax");
v11[256];
v11 = C15;
try {
    const v29 = /(\2)(\1)/vdis;
    v4.fuck(v29, v29, v27, 1991692779);
} catch(e32) {
}
function f34(a35) {
    const o39 = {
        __proto__: 2,
        213: a35,
        ...a35,
        "g": 2,
        p(a37, a38) {
            return 2;
        },
    };
    return o39;
}
f34(f34);
%PrepareFunctionForOptimization(f34);
const v41 = f34();
%OptimizeFunctionOnNextCall(f34);
f34(v41);
