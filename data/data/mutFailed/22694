new Int32Array(16);
Float64Array.prototype = Float64Array;
const v8 = new Float64Array(3087);
v8[2612] = v8;
new Float64Array(4);
new WeakMap();
const v15 = new WeakSet();
class C16 {
    #c;
    static #n(a18) {
        try { a18(this, this, a18, Int32Array); } catch (e) {}
        try {
            const v20 = [-5,-1620925613,5];
            function F21(a23) {
                if (!new.target) { throw 'must be called with new'; }
                try { a23.groupToMap(a23, F21, v20, this, F21); } catch (e) {}
                try {
                    this.prototype = v20;
                } catch(e25) {
                    for (let v26 = 0; v26 < 5; v26++) {
                    }
                    const o27 = {
                    };
                    for (let i = 0; i < 5; i++) {
                        v20[v20];
                    }
                }
            }
            try { ("number").match(F21, "number"); } catch (e) {}
            const o31 = {
            };
            const v33 = new Uint8Array(Uint8Array, Uint8Array);
            v33[Math.atan2(-988.8649474800335, 10000)] = 10000;
            new WeakSet(o31);
        } catch(e39) {
        }
        return v15;
    }
    static e = WeakSet;
    [WeakSet];
    static #b;
}
new C16();
const v41 = new C16();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
new C16();
const v45 = [C16];
[WeakSet];
const v47 = [v45];
const v48 = [WeakSet,v47,v47,v15];
const v49 = [v48,C16,WeakSet,v47,v48];
Float32Array[2147483648] = v8;
const v51 = [Float32Array];
v51.g = v51;
v51["concat"]().includes(Float32Array);
[v49,v41,v47,v41,v15];
Float32Array[2147483648] = Float32Array;
/(?:a*)+q(?<a>.)/guds;
function f57(a58) {
    a58.dotAll;
    a58.hasIndices = a58;
    const v60 = a58?.constructor;
    v60.$_;
    v60.lastParen;
    const o64 = {
        get d() {
        },
    };
    return v60;
}
f57.arguments = f57;
for (let [i68, i69] = (() => {
        let v65 = 0;
        v65++;
        return [v65, 10];
    })();
    (() => {
        i68 >>> i68;
        const v71 = i68 == i69;
        const v72 = v71 || v71;
        v72 || v72;
        return v71;
    })();
    i68 <= i68, i69--, i69--) {
    for (let v81 = 0; v81 < 25; v81++) {
    }
}
class C83 extends NaN {
}
C83.prototype;
