function f0() {
    const o9 = {
        ..."-4",
        get f() {
            const t4 = "-4";
            t4[Symbol.asyncIterator] = this;
            const v7 = -921083.587183985 * -921083.587183985;
            v7 * v7;
            return -1024;
        },
        "c": "-4",
        "g": -1024,
        "d": -921083.587183985,
        6: "-4",
        "e": -921083.587183985,
    };
    return o9;
}
f0();
f0();
f0();
new BigInt64Array(5);
new Int16Array(-9797);
new Int32Array(2772);
class C29 {
    #valueOf(a31, a32) {
        const v34 = WeakMap();
        "m" > v34 ? "m" : v34;
        return this;
    }
    static set f(a38) {
        const o41 = {
            "maxByteLength": 129,
        };
        SharedArrayBuffer();
        const t34 = "m";
        t34();
    }
}
const v45 = new C29();
const v46 = new C29();
const t41 = v46.constructor;
new t41();
const v49 = v46.__lookupGetter__;
try { v49(); } catch (e) {}
const v51 = new C29();
function f52() {
    return v51;
}
f52.d = f52;
function F53(a55, a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    a57.valueOf();
    a58.e = a58;
    const v60 = this?.constructor;
    try { new v60(v46, a57, a55, F53); } catch (e) {}
    a58.toLocaleString();
}
new F53("m", C29, v51, C29);
const v64 = new F53(v45, v46, "m", v45);
new F53(v64, v64, v46, v64);
