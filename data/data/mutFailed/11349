let v2 = -4n;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    function f6(a7, a8) {
        try {
        } catch(e9) {
            eval("");
        }
        return F3;
    }
    this.toString = f6;
    try { this.propertyIsEnumerable(this); } catch (e) {}
    try {
        this.f = a5;
    } catch(e15) {
    }
    try {
        this.a = a5;
    } catch(e16) {
    }
    try {
        this.g = a5;
    } catch(e17) {
    }
}
const v18 = new F3(v2);
v18.f;
const v20 = new F3(268435440n);
const v21 = new F3(129n);
function f22(a23, a24) {
    const v26 = new Uint16Array();
    return v26[124];
}
const v29 = Symbol.toPrimitive;
v21[v29] = f22;
class C30 {
    constructor(a32, a33, a34, a35) {
        const v36 = this?.f;
        try { new v36(a32); } catch (e) {}
        a33 * a33;
        a34--;
        a35++;
        v2 = 268435440n;
        const v41 = 129n;
        try {
            this.valueOf = v18;
        } catch(e42) {
        }
        try {
            this.valueOf = this;
        } catch(e43) {
        }
    }
    static b;
    static [v21] = v2;
    f = F3;
}
C30.g = C30;
const v44 = new C30(v20, v2, 129n, 129n);
const v45 = new C30(v18, 129n, 129n, 268435440n);
new C30(v18, v2, 268435440n, v2);
-1171692007 >> -1171692007;
const v51 = [268435441,v45];
const v52 = [v44];
v52[0] = v52;
const v53 = [v21,-1171692007,-1171692007,v52,v51];
try { v53.fill(v21); } catch (e) {}
class C56 {
}
const v57 = new C56();
const v59 = [v57,"add"];
v59.hasInstance = v29;
try { v59.groupToMap(1); } catch (e) {}
v59.hasInstance %= 1;
