class C3 {
    [-1.3266522790944002];
    static #m(a5) {
        return -1.3266522790944002;
    }
    constructor(a10) {
        const v14 = -8.290461192848784e+307 && a10;
        const v15 = v14 >>> v14;
        -8.290461192848784e+307 | v14;
        v15 >>> v14;
    }
}
const v18 = new C3(1073741823);
function f19(a20) {
    const v22 = new Int8Array(Int8Array);
    const v24 = new Float32Array(v22, Int8Array, Float32Array);
    v24.toLocaleString;
    return Float32Array;
}
v18[Symbol.toPrimitive] = f19;
const v28 = new C3(v18);
const v29 = new C3(v28);
[-2147483647,9007199254740992,-1,129,8,1073741824,21939,1756514470,42055,1024];
const v31 = [0,65536,-51819,10000,9,2141248639];
const v32 = [1024,-9007199254740990,-6,-9223372036854775807,-1465528305,6,2147483648,9223372036854775807,536870889];
function f33() {
    return v32;
}
class C34 {
    #toString(a36, a37, a38, a39) {
        try {
            this.valueOf = f33;
        } catch(e40) {
        }
        return v18;
    }
    c = v29;
    9;
    268435456;
    static [-7] = C3;
    static #e = v31;
}
new C34();
new C34();
new C34();
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e48) {
        for (let [v49,v50] of a46) {
        }
    }
    ~(-256n >> -256n);
    try {
        new F44();
    } catch(e55) {
    }
}
new F44(F44, F44);
new F44();
