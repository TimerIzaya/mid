function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a5;
    } catch(e6) {
        new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
        ([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
    }
}
F3.caller = F3;
const o18 = {
    [-352741132]: -352741132,
    set b(a16) {
    },
    get c() {
        return this;
    },
    "b": 2.220446049250313e-16,
};
o18.c = o18;
const v19 = new F3("bigint");
const v20 = new F3("bigint");
const v21 = v20?.constructor;
try { new v21("bigint"); } catch (e) {}
const v23 = new F3("268435441");
class C24 extends F3 {
    ["268435441"];
    1704848766 = v19;
    #p(a26, a27, a28, a29) {
        function f30(a31, a32) {
            const v33 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
            class C34 {
            }
            C34[Symbol.replace] = v33;
            return f30;
        }
        f30();
        f30();
        let v40;
        try { v40 = this["valueOf"](a26, v23); } catch (e) {}
        v40 / v19;
        new Uint16Array(2190);
        const v47 = new Float64Array(2235);
        const v49 = [1000000000000.0];
        v49[1] = v49;
        const v50 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f51() {
            const v52 = v50.length;
            v52 & v52;
            const v56 = new Float32Array(1334);
            v56[1283] = v56;
            return v47;
        }
        try {
            Math.clz32();
            new f30();
        } catch(e62) {
        }
        new BigInt64Array(127);
        return this;
    }
}
try { new C24(); } catch (e) {}
let v65;
try { v65 = C24.bind(F3); } catch (e) {}
const v66 = v65?.constructor;
try { new v66(v65); } catch (e) {}
const v68 = new C24();
v68[1704848766] = v68;
const v69 = new C24();
165 >>> 165;
const v73 = new Uint8Array(165);
const v74 = v73.lastIndexOf();
v74 >>> v74;
const o84 = {
    toString(a77, a78, a79) {
        try { this.toString(a77, v20, a78); } catch (e) {}
        a77[1704848766];
        a78[1704848766];
        C24["valueOf"] = v73;
        return 255n;
    },
};
const v85 = o84?.toString;
try { new v85(v19, v19, o84); } catch (e) {}
try { o84.toString(v69, v69, v19); } catch (e) {}
new C24();
const v89 = v20.toString();
try { v89.toUpperCase(); } catch (e) {}
let v91;
try { v91 = v89(); } catch (e) {}
const v94 = new Float64Array(200);
const v95 = [v23,C24,v19,"valueOf","268435441"];
try { v95.map(v91); } catch (e) {}
const v97 = [F3,v95,v95,v23];
[v97,v97,v97,v23];
const v100 = ArrayBuffer?.constructor;
try { new v100("bigint"); } catch (e) {}
1000 & 1000;
const o108 = {
    p(a105, a106) {
        for (const v107 in v97) {
        }
        return v94;
    },
    "maxByteLength": 1000,
};
try { o108.toString(); } catch (e) {}
new ArrayBuffer(2, o108);
const v113 = 2147483648n ^ 2147483648n;
v113 / v113;
function f115() {
    const v116 = [-882453.1668433619,-2.0];
    const v119 = new BigInt64Array(9);
    try { v119.toSorted(v119); } catch (e) {}
    try { v116.toLocaleString(v119); } catch (e) {}
    return 2147483648n;
}
%OptimizeFunctionOnNextCall(f115);
let v122 = f115();
v122--;
