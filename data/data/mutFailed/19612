const v0 = [257,-2147483649,0];
[806708344,-128,9,7,1514143929,1967254376];
[-868692135,-41843,12,-525202295];
const v3 = [536870887,-1314597871,1247685076,1007727974,268435456,2147483649];
[-644778719,37573,-1332496471,-14231,-48693,1073741824,16,65535,4096,-1];
const v5 = [-2,4];
class C6 {
    static {
        v0 && v0;
        const v9 = this[0];
        try { v9(v3); } catch (e) {}
        const o13 = {
            "maxByteLength": 3516,
        };
        v5.constructor;
        const t14 = [-536870912,3,4294967296,4984,1000,826602670,4,4];
        t14.length = 3516;
        const v18 = new Int16Array(12);
        v18.fill();
        const v21 = new SharedArrayBuffer(3516, o13);
        new BigUint64Array(v21);
    }
}
const v24 = new C6();
const v25 = new C6();
const v26 = new C6();
[C6,v5,v26,v25,v3];
[v26,v24,v0,v5];
const v31 = new Int32Array(11);
function f32(a33, a34) {
    return v31;
}
f32()[5];
[v3];
new Date();
function f40(a41) {
}
const v42 = f40(f40);
f40();
new Set();
function F46(a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
}
new F46(v42);
for (let v52 = 0; v52 < 25; v52++) {
    const v53 = [601759695];
    const v54 = [1073741824,1073741823,1376142744,1073741825];
    function f55(a56, a57, a58, a59) {
        const v62 = new Float64Array(255);
        function F63(a65, a66, a67, a68) {
            if (!new.target) { throw 'must be called with new'; }
            a66 >> a66;
            a68 | a68;
            try {
                v62.b = a66;
            } catch(e71) {
            }
            try {
                this.h = a65;
            } catch(e72) {
            }
        }
        try { v54["find"](..."find", a59, ...v53); } catch (e) {}
        const v75 = [Set];
        [v75,v75,v52];
        v53 || f40;
    }
    for (let v78 = 0; v78 < 5; v78++) {
        f55();
    }
}
