let v0 = Map;
let v1 = new v0();
class C2 {
    constructor(a4) {
        this.fuck = this;
        function f5(a6) {
            class C7 {
            }
            return v1;
        }
        a4.toString = f5;
        try { this.toString(); } catch (e) {}
        const v9 = a4?.constructor;
        try { new v9(C2); } catch (e) {}
        v0 = a4;
        try {
            this.fuck(a4, undefined, true);
        } catch(e14) {
        }
        v1[a4] = this;
        let v17 = 4;
        v17--;
        a4.__proto__;
    }
    #toString(a21) {
        const v22 = v0 ** v0;
        function f23(a24) {
            return a21;
        }
        class C25 extends f23 {
            static 3595;
            static #g = C2;
        }
        const v26 = v22 === a21;
        v1 = v26 ? v22 : a21;
        return v26;
    }
}
function f28(a29) {
    new Uint8Array(252);
    new BigUint64Array(3943);
    const v38 = new Uint8ClampedArray(1143);
    return v38;
}
C2[Symbol.toPrimitive] = f28;
const v41 = new C2(C2);
v41.length;
const v43 = new C2(v1);
const v44 = new C2(v0);
2.0 === 2.0;
~16;
[16,v44];
[[2.0,v43,2.0],v0,16,-5.317479710939518e+307,v0];
const v57 = new Map();
function f58(a59) {
    return a59;
}
Object.defineProperty(v57, "g", { configurable: true, enumerable: true, get: f58, set: f58 });
Math.f = f58;
Math.f = Math;
const v61 = Math.log1p();
v61 - v61;
