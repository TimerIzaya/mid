const v1 = new Map();
let v3 = 8;
function f5() {
    return 35069;
}
const o7 = {
    "getOwnPropertyDescriptor": f5,
    "ownKeys": f5,
};
new Proxy(v1, o7);
Uint8Array.prototype = Uint8Array;
const v11 = new Uint8Array(1);
let v12 = v11?.toString;
let v13;
try { v13 = new v12(); } catch (e) {}
v3 = 8;
v13 |= v12;
Object.defineProperty(v11, v3, { writable: true, enumerable: true, get: f5, set: f5 });
v1[16] = v3;
const v17 = Reflect.construct(Uint8Array, [v1,8,v3], f5);
const v19 = new Float64Array(8);
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v12;
    } catch(e26) {
    }
    try {
        this.f = 8;
    } catch(e27) {
    }
}
new F21(35069, 7, v17);
new F21(54323, 7, 35069);
new F21(7, f5, 7);
try {
    v11.c = v1;
} catch(e31) {
}
v12 = Uint8Array;
try { new Uint8ClampedArray(Uint8ClampedArray, 54323, 8); } catch (e) {}
const v34 = new Uint8ClampedArray(7);
new Float64Array(1, 7, v13);
const v37 = [];
Reflect.apply(v19.reverse, v11, v37);
v34[4];
const v45 = new BigUint64Array(4);
function F46(a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
}
const v51 = new F46(BigUint64Array, 4, 241);
for (let v52 of v45) {
    v52--;
    Object.defineProperty(v51, 241, { enumerable: true, value: v52 });
}
("6Ct").normalize();
