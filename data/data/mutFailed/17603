const v1 = new WeakSet();
class C2 extends WeakSet {
    static d = v1;
    static c = v1;
    [WeakSet] = v1;
    static valueOf(a4, a5) {
        const v6 = super.has(a5);
        const o7 = {
        };
        new Proxy(this, o7);
        new Array(532);
        return v6;
    }
    static #a;
}
new C2();
const v14 = new C2();
try { v14.toLocaleString(); } catch (e) {}
new C2();
-1.0 >>> -1.0;
2.0 + 2.0;
const v23 = Symbol.toPrimitive;
const o27 = {
    toString(a25, a26) {
        a25 *= v23;
        return a26;
    },
};
/cGM(a\1)(?:ab|cde)o+/vdi;
/0[\c!]\p{Script=Greek}/gs;
/4a[bc]d/udis;
-1n / -1n;
class C38 {
    static #a;
    static {
        this.length = this;
        const o40 = {
        };
        o40.f = o40;
        new Proxy(this, o40);
    }
    static n(a44, a45) {
        const v46 = super.d;
        Math.atan2([-256,13351,5138,2,-4294967295,1000,268435440], -4294967297);
        function f51() {
            ([-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574]).slice();
            return f51;
        }
        %OptimizeFunctionOnNextCall(f51);
        try { v46(); } catch (e) {}
        return a44;
    }
    [1];
    static [1] = 255;
    [255];
    f = -65536;
}
C38[1] = C38;
const o55 = {
};
o55.h = o55;
try { Math.expm1(-65536); } catch (e) {}
let v58 = Math.atanh(1);
v58--;
const v60 = new C38();
new C38();
const v62 = new C38();
let v63 = 1n;
v63--;
let v65 = -65536n;
let v67;
try { v67 = v60.m(v63, 10000n, 10000n, 1); } catch (e) {}
function f68(a69, a70, a71) {
    a69 * a69;
    let v73;
    try { v73 = v67(a70); } catch (e) {}
    const v76 = Symbol.toPrimitive.description;
    try { v76.link(v76); } catch (e) {}
    Symbol.for(Symbol.for(v76).description);
    function f82(a83, a84, a85) {
        const o93 = {
            toString(a87, a88, a89) {
                a84 < this;
                return super[a85];
            },
            get d() {
                return this;
            },
        };
        const v94 = o93?.toString;
        try { new v94(a83, 10000n, a85); } catch (e) {}
        return o93;
    }
    f82(f82, f82(), Symbol);
    f82();
    v73 = a71;
    v65 >>= a71;
    v60[10] = v63;
    const v99 = v62.f;
    v99 | v99;
    return v65;
}
const v101 = f68(255, 255, v63);
v101 ^ v101;
