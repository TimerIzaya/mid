[494.6631854129191,-2.2250738585072014e-308,0.5547342226420514,1000000.0,2.796321605611944e+307];
for (let v1 = 0; v1 < 5; v1++) {
    function F4(a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v8 = this.constructor;
        const v10 = /[a-zA-Z0-9]/gvisy;
        const v11 = /abc?/gvmy;
        v11[-2] ^= v10;
        v11.exec("Q8F");
        const v14 = new Int16Array();
        const v15 = v14.lastIndexOf(F4, a6);
        v15 ^ v15;
        try { new v8(this, a6); } catch (e) {}
        new Uint32Array(127);
        for (let v21 = 0; v21 < 5; v21++) {
        }
    }
    const v22 = new BigInt64Array(4046);
    const v23 = [4,60362,23763,-7,536870888,4,-1073741824,4,-63340];
    const v24 = [64068,-4294967295,-7450,37275,9];
    v23.unshift(v24, typeof /(foo(?!bar)baz)/gis === "undefined", 4046);
    function f30(a31, a32) {
        function F33(a35) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C36 extends F33 {
            static {
            }
            constructor(a39, a40) {
                try { this.propertyIsEnumerable(); } catch (e) {}
                try { a40.findLastIndex(v24); } catch (e) {}
                super[a39] = v23;
                const v44 = new BigUint64Array();
                try { Int32Array.apply(v44); } catch (e) {}
                const v47 = new Int32Array();
                v47[7];
                Math.atan(Math);
                function F51(a53, a54, a55) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
        }
        const v56 = new C36();
        v56.constructor;
        const o58 = {
        };
        for (const v59 in o58) {
        }
        let o60 = {
        };
        [,...o60] = v22;
        function f61(a62, a63) {
            function f64() {
                for (let v65 = 0; v65 < 5; v65++) {
                    function f66() {
                        for (let v68 = 0; v68 < 5; v68++) {
                        }
                        eval(eval);
                        return f64;
                    }
                    f66();
                    %OptimizeFunctionOnNextCall(f66);
                }
                eval(f64);
                return f64;
            }
            f64();
            class C74 {
                constructor(a76, a77) {
                    const o79 = {
                    };
                    gc(o79);
                }
            }
            for (let v81 = 0; v81 < 25; v81++) {
                new C74(a62, a31);
                const o83 = {
                };
                return -38329;
                function F86(a88, a89) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v90 = this.constructor;
                    try { new v90(); } catch (e) {}
                    this.a = Uint16Array;
                }
            }
            return C74;
        }
        new Promise(f61);
        return o60;
    }
    f30();
}
const v95 = [4.0,-182999.38972146634,-2.2250738585072014e-308,1.0,-1000000000.0,-2.220446049250313e-16,-469909.6677389614,0.8811799721061648];
const v96 = [-5.0,-7.737536967346945];
[v95,v96,v95,v95];
[[v96]];
const o113 = {
    [236929505n](a107, a108, a109, a110) {
        eval(a110);
    },
};
const v116 = new BigUint64Array(255);
v116.buffer.slice();
