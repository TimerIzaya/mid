function f0() {
    const o10 = {
        "e": "toString",
        "c": 64,
        "g": 64,
        set h(a5) {
            const t6 = "toString";
            t6["toString"] = Reflect.construct(a5, [a5,"toString" - a5,"toString"], a5);
            a5 = this;
        },
        ["toString"]: "toString",
        5: "toString",
        "b": 64,
    };
    return o10;
}
f0();
function f13() {
    return -9007199254740992n;
}
f13();
f0();
const v16 = f0();
new WeakMap();
const v20 = [];
function f21() {
    return v16;
}
function f22(a23) {
    function F24() {
        if (!new.target) { throw 'must be called with new'; }
        const v26 = this.constructor;
        try { v26(); } catch (e) {}
        try { new v26(v26); } catch (e) {}
    }
    const v29 = new F24();
    const v30 = v29.constructor;
    new v30(v30, v29);
}
Object.defineProperty(v20, "b", { enumerable: true, get: f21, set: f22 });
for (let v32 = 0; v32 < 10; v32++) {
    const v33 = delete v20.length;
    let v34;
    try { v34 = v33(); } catch (e) {}
    const t44 = "J";
    t44.length += v34;
}
const v35 = f0();
class C36 extends f0 {
    set h(a38) {
        const o42 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o42);
        for (const v45 of this[a38]) {
        }
    }
    #n(a50) {
        function f51() {
            return a50;
        }
        delete a50[this];
        const o53 = {
            "apply": f0,
            "call": f51,
            "defineProperty": f0,
            "deleteProperty": f0,
            "get": f0,
            "getOwnPropertyDescriptor": f51,
            "isExtensible": f51,
            "preventExtensions": f51,
            "set": f0,
        };
        const v55 = new Proxy(v35, o53);
        return v55;
    }
}
Math.acos(-450746.69945373747 ^ -450746.69945373747);
try {
    v20.b = 3;
} catch(e61) {
}
new C36();
new C36();
const v64 = new C36();
const o65 = {
};
class C66 {
    constructor(a68, a69) {
        const o71 = {
            84: arguments,
        };
    }
}
[229.92254856473232,2.2250738585072014e-308];
[Infinity,0.5225723752543432,-539232.3536743477,2.1195208702871504,3.0,-1000000000000.0,-1000.0];
[0.1493699495909856,-0.0,-2.3189489188500723,4.0,-951542.5792015843,-476.49306165486485,-1000.0];
class C75 extends C36 {
    static b;
    #valueOf(a77, a78, a79, a80) {
        try {
            new C36();
        } catch(e82) {
        }
        return v64;
    }
    static e;
    static #n(a84, a85, a86) {
        /[.ma\Sc]/vdimsy.exec(Int16Array);
        for (let v90 = 0; v90 < 25; v90++) {
        }
        return a85;
    }
}
new C75();
new C75();
new C75();
function f100(a101, a102, a103, a104) {
    const o105 = {
    };
    return o105;
}
const v106 = f100();
class C107 {
    static get b() {
    }
}
new Float32Array();
let v111 = "jER";
const v112 = [17452,4294967295,64,-8];
[v111] = v112;
class C114 {
    constructor(a116, a117) {
        new Uint16Array(a116);
    }
}
const v119 = f100(1n, v106, f100, 1n);
const v120 = f100(v119, v119, -2087552367, f100);
const v122 = new WeakMap();
function F123() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
for (const v129 of Array(19793)) {
    const v131 = Math.cbrt();
    v131 % v131;
}
new Int8Array(964446029);
function F136() {
    if (!new.target) { throw 'must be called with new'; }
}
Math.log1p(0.04879611221991542);
function f143() {
}
function F144() {
    if (!new.target) { throw 'must be called with new'; }
}
const v146 = new F144();
Array(5);
const v150 = v146.d;
try { v150(Array); } catch (e) {}
const o152 = {
    "construct": Array,
    "defineProperty": Array,
    "getPrototypeOf": Array,
    "preventExtensions": Array,
    "set": Array,
};
("async").toLocaleUpperCase;
[WeakSet,WeakSet,WeakSet,WeakSet];
const v156 = [];
function f157() {
    function f158(a159, a160) {
        [f143,v112,a159,a160];
        const v163 = new Uint8ClampedArray();
        for (const v166 in [[v163,v163],v163]) {
        }
        return 1n;
    }
    return f158;
}
Object.defineProperty(v156, "valueOf", { configurable: true, enumerable: true, get: f157 });
Math.atan2(v156, 964446029);
new Uint32Array(257);
function f170(a171, a172, a173, a174) {
    const o183 = {
        __proto__: a174,
        get e() {
            v122.get(a171);
            function f177(a178, a179) {
                return f177;
            }
            new Uint8ClampedArray(16);
            return Uint32Array;
        },
    };
    return a172;
}
f170(1n, v119, 14875, v106);
f170(v119, v120, 14875, v119);
f170(v120, v119, -2087552367, v120);
