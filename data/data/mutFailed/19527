const v0 = [0.9293185735284208,2.7209749138129417e+306,0.3483187975515727,-3.220177979672134,32505.35732942715,-0.7310081432062194];
const v1 = [-1000000.0,737.1429360922041,487217.4369639929,5.0,-579.5694638546379];
const v2 = [-1.1309886838335034e+308,0.6508914303056326];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v0;
    } catch(e6) {
    }
    try {
        this.b = v2;
    } catch(e7) {
    }
    try {
        this.a = a5;
    } catch(e8) {
    }
}
const v9 = new F3(v1);
const v10 = new F3(v1);
const v11 = new F3(v0);
[v11,v0,v11,F3];
const v13 = [v0,v9,v0];
const v16 = new Uint16Array(10);
delete v16[v0];
37948 | -31319;
Math.atan(37948);
-31319 && 37948;
new Float64Array(10);
new Uint8Array(3833);
[v0,v13,v13];
v10[64];
v0 instanceof Float64Array;
[0.7895262133083832,-518.5680625940032,-7.318745416418728e+307,-4.0,-472.0016405061857,-1.0,-1.2084959137255102e+308,-3.0,-4.0];
[-829.817679211807];
[-595479.6221095258,0.7813183066698652];
const v43 = new Int16Array(4096);
function f44() {
}
class C45 {
    [Int16Array];
}
new C45();
const o47 = {
};
const v49 = new Proxy(f44, o47);
v49();
%PrepareFunctionForOptimization(v49);
v49();
v49();
%OptimizeFunctionOnNextCall(v49);
v49();
new C45(f44, 4096, 256, 64);
let v55 = 0;
do {
    v43.buffer["transfer"]();
    v55++;
} while ((() => {
        let v60 = 1;
        ++v60 & delete v16?.buffer;
        C45[9];
        try {
            new Int16Array(129, 10);
        } catch(e67) {
        }
        return v55 < v60;
    })())
