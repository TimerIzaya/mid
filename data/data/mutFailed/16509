11 >>> 11;
Uint16Array.name = Uint16Array;
const v6 = new Uint16Array(11);
6 << 6;
let v9 = Float64Array;
v9.prototype = v9;
new v9(6);
const v13 = new Uint32Array(1024);
class C14 {
    constructor(a16, a17) {
        const v18 = this?.constructor;
        try { new v18(a17, a17); } catch (e) {}
        a16 >>> a16;
        v9 %= v9;
        1024 & this;
    }
    n(a23, a24, a25, a26) {
        a23 !== 9;
        try {
            v6.sort(a25);
        } catch(e29) {
        }
        return 11;
    }
    static h;
    #b = -13;
}
const v30 = new C14(6, -7);
const v31 = new C14(-13, 11);
const v32 = v31?.constructor;
try { new v32(-7, v30); } catch (e) {}
new C14(-13, -13);
const v35 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { new Uint32Array(6, v6, Uint32Array); } catch (e) {}
const v38 = new Uint32Array();
let v39 = -4294967297n;
const v40 = v39--;
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f43(a44, a45, a46, a47) {
    const v48 = a44.constructor;
    v48.BYTES_PER_ELEMENT = v48;
    let v49;
    try { v49 = v48(); } catch (e) {}
    const v50 = v49?.constructor;
    let v51;
    try { v51 = v50(f43, a44, v35, Uint32Array, v48); } catch (e) {}
    function f52() {
        const v54 = ("Vre").charAt(v51);
        const v55 = v54.blink();
        try { v55.codePointAt(v35); } catch (e) {}
        let v57;
        try { v57 = ("Vre").codePointAt(v35); } catch (e) {}
        v57 <= v57;
        const v59 = v57 % v57;
        v59 >>> v59;
        let v61 = Float64Array;
        v61.length;
        v61 = a45;
        b = v35;
        let v63 = v35.length;
        v63++;
        try {
            v42.forEach(a45);
        } catch(e66) {
            e66.message = e66;
        }
        const o77 = {
            "c": v39,
            valueOf(a68, a69) {
                return v49;
            },
            1073741824: v38,
            [v39](a71, a72, a73, a74) {
                eval(v54);
            },
        };
        o77.e = o77;
        return v42;
    }
    const v78 = f52();
    v78[0] = v78;
    const v80 = Array(v50);
    try { v80.findLast(); } catch (e) {}
    const v83 = Int8Array.of();
    let v84;
    try { v84 = v83.every(v83, a44, v83, a45, Array); } catch (e) {}
    %PrepareFunctionForOptimization(2);
    268435441n << 268435441n;
    const v90 = Array(19793);
    [v90,v90,v90,v90];
    const v92 = new Int8Array(v84);
    const v94 = v92.buffer.slice();
    let v95;
    try { v95 = v94.transfer(); } catch (e) {}
    function F96(a98, a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v101 = new F96();
    Object.defineProperty(v101, v95, { writable: true, configurable: true, set: Array });
    const v103 = v94.constructor;
    try { v103.call(v13); } catch (e) {}
    new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
    4294967296 & 4294967296;
    try { v103(v94, v84, v40, v83, a44); } catch (e) {}
    try { new Int32Array(v49, v94, v94); } catch (e) {}
    const v113 = new Int32Array(v103, v48, v48);
    try { v113.indexOf(v30); } catch (e) {}
    v113.lastIndexOf(a44, a46);
    try { v42["find"](..."find", a47, ...v41, ...v42); } catch (e) {}
    return v39;
}
for (let v118 = 0; v118 < 10; v118++) {
    f43(v38);
}
%OptimizeFunctionOnNextCall(f43);
f43(Uint32Array);
