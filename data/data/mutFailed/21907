function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a5;
    } catch(e6) {
    }
    try {
        this.e = -12;
    } catch(e7) {
    }
}
const v8 = new F3(-12);
const v9 = new F3(4);
const v10 = new F3(-12);
const v11 = /FA*/gdisy;
let v12;
try { v12 = v11.compile(4, v11); } catch (e) {}
/a*b|c/guy;
const v14 = /(?:ab|cde)/d;
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    const v20 = v9?.constructor;
    try { new v20(v14, v14, a17); } catch (e) {}
    try { a18.valueOf(); } catch (e) {}
    a19 + a19;
    try {
        v11.d = a19;
    } catch(e24) {
    }
    try {
        this.e = a17;
    } catch(e25) {
    }
    try {
        this.a = a17;
    } catch(e26) {
    }
}
new F15(-12, v10, -65537);
const v28 = new F15(-12, v8, -65537);
try { v28.toLocaleString(); } catch (e) {}
const v30 = new F15(-12, v9, v28);
v30.a;
const v36 = new Int8Array(Int8Array);
function f38() {
    v36.byteLength;
    return Float32Array;
}
const v40 = [2.0,-6.960023737052075e+307,-4.0,8.029794072582337,7.746552816432569,-1.1185662281427522,1.0,-817058.1432225703,-2.220446049250313e-16,-3.0983960340303662];
try { v40.fill(v10); } catch (e) {}
const v42 = [-3.0,-602137.6017503033,-1000.0,-1000.0,0.03362828502937343,1.0,0.12829138745343527,0.18584278384725883,-1.7976931348623157e+308];
try { v42.push(v30); } catch (e) {}
[[0.9641255517341948,-5.0,-4.0,0.9671808891640824,-Infinity,2.0],v40,v40,v42];
const v47 = new v12(Uint8Array);
function f48(a49, a50, a51, a52) {
    const v53 = a51++;
    v53 << v53;
    const v55 = ++a51;
    const v58 = Number.isNaN(v55 - v55);
    const v59 = v58 || v58;
    let v60 = v55 * v55;
    let v61 = v60--;
    v61--;
    v61 % v61;
    let v64 = a51 || a51;
    v64--;
    v64 + v64;
    const o67 = {
        ...v47,
    };
    Number[1];
    o67[2] = o67;
    const v69 = v28[1];
    v69 + v36;
    v69 * v69;
    o67[2] = o67;
    a49[2];
    let v73 = v59[1];
    -v73;
    v73--;
    return v73;
}
f48.caller = f48;
for (let v76 = 0; v76 < 500; v76++) {
    -f48();
}
