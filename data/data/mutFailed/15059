function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -53736;
    } catch(e3) {
        function f4() {
            return e3;
        }
        const o5 = {
            "call": f4,
            "getOwnPropertyDescriptor": f4,
            "isExtensible": f4,
            "ownKeys": f4,
            "preventExtensions": f4,
            "setPrototypeOf": f4,
        };
        new Proxy(this, o5);
    }
    try {
        this.a = -53736;
    } catch(e8) {
    }
}
const v9 = new F0();
const v10 = new F0();
const v11 = new F0();
function f12() {
    return v9;
}
class C13 extends f12 {
    valueOf(a15) {
        const v16 = f12();
        try {
            super.all(f12, v11, v16, this);
        } catch(e18) {
        }
        super.f |= v16;
        this in v11;
        return f12;
    }
    static #d;
    #c = v9;
    static e;
    static 9 = f12;
}
const v20 = new C13();
const v21 = new C13();
new C13();
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a25;
    } catch(e27) {
    }
    try {
        this.g = a26;
    } catch(e28) {
    }
}
new F23(v11, v20);
new F23(v20, v10);
new Float64Array(411);
new Uint32Array(3);
new Int32Array(11);
new F23(v21, v20);
[-3.0,0.45659751000498894,-1000000.0,3.0,0.7977175822592876,-1000000000000.0];
[0.32263210525704633,0.9348771008971412];
[174.873066708343,-3.841395818816469e+307,-861085.6233315285,Infinity,1.773022318924495];
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = this.constructor;
    let v51;
    try { v51 = new v50(a47); } catch (e) {}
    typeof v51 === "symbol";
}
new F44(F44, F44, F44, F44);
new F44();
