const v2 = new BigInt64Array(257);
const v5 = new Int16Array(1123);
const v8 = new Uint32Array(6);
class C9 extends Int16Array {
    static a;
    #valueOf(a11, a12, a13, a14) {
        let v15;
        try { v15 = this.includes(...this, Uint32Array, a11, v5, ...Uint32Array, ...v5); } catch (e) {}
        const v16 = v15?.[1];
        let v17;
        try { v17 = new v16(v5, a13, v16); } catch (e) {}
        [...this,a14];
        try { C9.some(v17, h); } catch (e) {}
        return v5;
    }
    13 = 6;
    [v8] = Int16Array;
    static 580;
    #e;
}
new C9();
new Int16Array();
new C9();
function f25() {
    return v2;
}
new Uint8ClampedArray(2314);
new Uint16Array(1);
new Uint8ClampedArray(2267);
class C36 {
    set h(a38) {
    }
    b;
}
new C36();
let v40 = undefined;
try { C36(); } catch (e) {}
v40 = 3;
