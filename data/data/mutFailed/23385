const v0 = [91327286,2,-25770,9007199254740991,10000,-128,1428734515,-4890,10];
const v1 = [256,65536,-1,-477777717,442629814,-34745,1073741825,-268435456];
const v2 = [65537,1620061629,14];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(a5); } catch (e) {}
    try { a5.reduceRight(v0); } catch (e) {}
    try {
        this.d = v1;
    } catch(e8) {
    }
}
const v9 = new F3(v1);
new F3(F3);
const v11 = new F3(v1);
const v12 = v9.d;
const v13 = [26100,-2,-4096,12559,1024,256];
[-1587007845,2147483648,9,268435456];
[65536,-2147483647,0,2147483647];
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F19(a21, a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        a23[3] = v12;
    }
    const v25 = new F19(v18, F16, v18, F19);
    const v26 = v18?.constructor;
    try { new v26(v13, v25, v18, v18); } catch (e) {}
    try { Reflect.isExtensible(v2); } catch (e) {}
    const v30 = [F16,F16,F16,F16];
    const v31 = v25.indexOf;
    try { v31(v11); } catch (e) {}
    ~Reflect.apply(v31, v25, v30);
}
try { new F3(); } catch (e) {}
const v36 = new F16();
v36.length = v1;
