class C4 {
    static valueOf(a6, a7) {
        Reflect.construct(a7, [4096n,a6,-5,a7], a7);
        this | -1553n;
        return a7;
    }
    static 536870889 = 64n;
    static c = 4096n;
    4096 = 64n;
}
function F15(a17) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
const v25 = new C4();
const v26 = new C4();
const v27 = new C4();
class C31 {
    static [-256];
    2 = v27;
    static 206;
    get f() {
        const v33 = [this,C4,this,this];
        [-256,v26];
        [-1553n,-1553n];
        return v33;
    }
    c;
    static #a;
    [v25];
    [v27] = -256;
}
new C31();
new C31();
const v38 = new C31();
function f39() {
}
class C40 extends v38 {
}
new v25();
new C40();
class C43 {
}
function f48() {
}
const o49 = {
};
function F50() {
    if (!new.target) { throw 'must be called with new'; }
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v53 = [601759695];
const v54 = [1073741824,1073741823,1376142744,1073741825];
function f57(a58, a59, a60, a61) {
    function f63() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
    }
    f39();
    new Int8Array();
    C43.buffer.slice();
    %OptimizeFunctionOnNextCall(f63);
    let v78;
    try { v78 = v54["find"](..."find", a61, ...v53); } catch (e) {}
    return v78 <= a60;
}
for (let v80 = 0; v80 < 10; v80++) {
    f57();
}
%OptimizeFunctionOnNextCall(F50);
f57();
