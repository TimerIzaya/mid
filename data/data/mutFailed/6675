-Infinity;
const v3 = [-1.1084504423046873e+308,0.0];
v3.g = v3;
[3.0,1e-15,6.083139931666908e+307,599.6615126454658,0.8715856639487428,2.0,-3.8405920205895154e+307,-1.0];
const v5 = [-1000000000000.0,1.5919877212754336e+307,-4.127926299880325,3.379180525980587,-5.0,-7.004773564004719];
try { v5.lastIndexOf(v3); } catch (e) {}
new Set();
new Float64Array(1024);
Uint8Array.length = Uint8Array;
const v14 = new Uint8Array(3957);
try { v14.set(Set); } catch (e) {}
new Uint16Array(512);
class C23 {
    n(a25, a26) {
        super[-8n] = this;
        const o29 = {
            "maxByteLength": 47,
        };
        SharedArrayBuffer(3, o29);
        new Int8Array();
    }
}
let v35;
try { v35 = Map.bind(Map, 6, Map, Map); } catch (e) {}
try { v35(); } catch (e) {}
new Int32Array(3957);
for (const v42 of 1024) {
    const o45 = {
        "maxByteLength": 1293466293,
    };
    1796 | 1796;
    const v48 = new SharedArrayBuffer(1796, o45);
    v48.byteLength = v48;
    Uint32Array.prototype = Uint32Array;
}
