function f0() {
    const o14 = {
        854981087: -55541,
        "a": -1.5564371948036044e+308,
        "d": -1.5564371948036044e+308,
        "e": -55541,
        __proto__: -55541,
        ...-1.0,
        set c(a5) {
            function f6() {
                const v7 = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
                class C8 {
                    constructor(a10, a11) {
                        let {...v12} = v7;
                    }
                }
                return this;
            }
            (-1.5564371948036044e+308)?.[f6];
        },
    };
    new Uint32Array();
    new SharedArrayBuffer(945);
    return o14;
}
const v20 = f0();
const v21 = f0();
let v22 = f0();
let v23 = 9007199254740991;
536870912n << 536870912n;
const v27 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
const v28 = /QK/gvdimy;
with (v27) {
    v28.__proto__ = length;
}
class C31 extends f0 {
    constructor(a33, a34) {
        super();
        v23 *= -9223372036854775808;
        class C36 {
        }
        try {
            new Float64Array(-9223372036854775808);
        } catch(e39) {
        }
        v22 /= this;
        for (let v43 = 0; v43 < 10; v43++) {
            const t47 = "f";
            t47[1073741824] = 4294967296;
        }
        let v46 = 7 >>> v21;
        --v46;
        -35151 && v46;
    }
    static #h = v22;
}
new C31(7, v20);
new C31(v22, v23);
new C31(1000, C31);
const v54 = new Int8Array(7);
-10 instanceof WeakMap;
const v58 = [];
const v62 = [296261129,-1,3,2];
const v63 = [-268435456,1000];
class C64 {
    constructor(a66, a67, a68, a69) {
        let v70 = 0;
        do {
            let v72 = 30918;
            const v73 = v72--;
            let v74 = v63 ^ v63;
            Math.random();
            Math.exp(v63);
            v73 >> v63;
            Math.ceil(v73);
            ++v74;
            v70++;
        } while (v70 < 2)
    }
}
const v83 = new C64(2, v58, 2, -1);
const v84 = new C64(2, -1, 2, 1000);
const v85 = new C31(v58, v83, 2, v62);
const v86 = new C31(v62, v85, 1000, v85);
if (Int8Array) {
    const v87 = v84[1073741825];
    try {
        v58.toString = v87;
    } catch(e88) {
    }
} else {
    try { v86.assign(); } catch (e) {}
}
for (let v90 = 0; v90 < 10; v90++) {
    class C91 {
        #f;
        [v90];
    }
    new C91();
}
v54.fill();
const v95 = new Float64Array(Float64Array);
v95.indexOf(Int8Array, 7);
