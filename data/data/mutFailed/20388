const v3 = [-38114.35204837867,1e-15,1.7976931348623157e+308,-6.271703941633447e+307,-16087.669837770984,0.18958031697505795,5.0,211.77843732585757,1000.0];
try { v3.reverse(); } catch (e) {}
const v5 = [1.2297485749193287e+308,NaN,-9.92723227247682e+307,-2.0,0.23922404982985568,-3.320451284946313,-819751.2483150415,-1.5472703102342858e+308,-3.754173596276977e+307,-4.0];
let v6;
try { v6 = v5.flat(); } catch (e) {}
const v7 = [Infinity,1.4219693190824483,578.7610077680667,-0.5158569327942342,NaN];
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this?.constructor;
    try { new v13(v7, v7); } catch (e) {}
    this.b = "b";
    this.d = a12;
}
F9.prototype;
const v16 = new F9();
v16.h = v16;
const t16 = -118141442n;
const v17 = new t16(v16, v16);
const o18 = {
    ...v17,
    __proto__: v16,
};
for (const v19 in o18) {
}
class C20 {
    #m(a22, a23) {
        const v25 = new Set();
        try {
            v25.#m(v3, Set, -16n, v5);
        } catch(e27) {
        }
        return Set;
    }
    static valueOf(a29, a30, a31, a32) {
        let v33;
        try { v33 = a31(11n); } catch (e) {}
        try { v33(); } catch (e) {}
        [16,-2,65537,-3,-276920110,8,800361004,654328725,1,-23411];
        [127,4294967296,10];
        return [-54331,268435439,27174,51165,-6];
    }
}
const v38 = new C20();
const v39 = v38?.constructor;
try { new v39(); } catch (e) {}
let v41;
try { v41 = new v39(); } catch (e) {}
const v42 = new C20();
let v43;
try { v43 = v42.toString(); } catch (e) {}
v43[9];
const v45 = new C20();
const v46 = v45?.constructor;
v46.h = v46;
try { new v46(); } catch (e) {}
Float64Array.name = Float64Array;
Float64Array.prototype = Float64Array;
const v50 = new Float64Array(127);
Float32Array.length;
const v54 = new Float32Array(256);
v54.c = v54;
let v55 = 9;
v55--;
let v58;
try { v58 = new Int8Array(v55, v50, v45); } catch (e) {}
v58[5] = v58;
const v59 = new Int8Array(v55);
v59[7];
const v62 = Symbol.toPrimitive;
try { v6(v62); } catch (e) {}
const v65 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v65.map(v41); } catch (e) {}
try { new String(v3); } catch (e) {}
class C69 extends String {
    6 = String;
    5;
}
-4294967297n / -4294967297n;
BigInt64Array.prototype = BigInt64Array;
const v74 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v75 = v74[1];
let v76 = v75 === v75;
const v77 = [601759695];
try { v77.forEach(Symbol); } catch (e) {}
-522675525n;
for (let v81 = 0; v81 < 5; v81++) {
    function f83() {
        try {
            v65.forEach();
        } catch(e87) {
            e87.message;
            const v89 = /a\sc/gm;
            v89.h = v89;
            try { v89.compile(v89, e87); } catch (e) {}
            e87.f = e87;
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        -268435456 | -268435456;
        v76++;
        function F95() {
            if (!new.target) { throw 'must be called with new'; }
            const v97 = this?.constructor;
            try { new v97(); } catch (e) {}
        }
        const v99 = new F95();
        try { v99.hasOwnProperty(undefined); } catch (e) {}
        const v101 = v99?.constructor;
        try { new v101(); } catch (e) {}
        const t108 = [];
        const v104 = delete t108.length;
        v104 || v104;
        v104 && v104;
        new Uint32Array();
        const v109 = F95.constructor;
        let v110;
        try { v110 = v109(); } catch (e) {}
        v110.caller;
        const v112 = v110?.constructor;
        let v113;
        try { v113 = v112(); } catch (e) {}
        v113.name;
        v113.length = v113;
        const v117 = ("Vre").charAt(v113).blink();
        v117[9] = v117;
        const v118 = v117[11];
        try { v118.strike(); } catch (e) {}
        const o126 = {
            "c": -4294967297n,
            [522675525n](a121, a122) {
            },
            "c": v77,
            valueOf(a124, a125) {
            },
            "maxByteLength": -4294967295,
            "arguments": v74,
            ..."Vre",
        };
        o126[0] = o126;
    }
    const v127 = f83?.constructor;
    try { new v127(v127); } catch (e) {}
    let v129;
    try { v129 = new v127(f83); } catch (e) {}
    try { v129(); } catch (e) {}
    f83();
    %OptimizeFunctionOnNextCall(f83);
}
