new Float64Array(3105);
10 | 10;
const v6 = new BigInt64Array(10);
const v7 = v6[0];
v7 >> v7;
const v10 = 4 - 4;
v10 - v10;
4 <= 4;
let v14;
try { v14 = new Uint32Array(3105, 4, v6); } catch (e) {}
const v15 = v14[2097];
new Uint32Array(4);
const v17 = [6,-55856];
function f18(a19) {
    new BigUint64Array();
    return BigUint64Array;
}
v17.toString = f18;
let v22;
try { v22 = v17.toLocaleString(); } catch (e) {}
try { v22.sup(); } catch (e) {}
let v24;
try { v24 = v17.toReversed(); } catch (e) {}
v24[1] = v24;
const v25 = [129,1065764072,16,9223372036854775807,-5];
v25.toString = f18;
([14,28201])[1];
class C28 extends Uint32Array {
    [v17];
    static [v25];
    p(a30, a31) {
        super.reduceRight(4, this);
        delete this[230];
        const o40 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o40);
        return 10;
    }
}
C28.d = v22;
C28.BYTES_PER_ELEMENT = C28;
C28.d = C28;
const v42 = new C28();
v15.BYTES_PER_ELEMENT = v42;
const v43 = new C28();
try { v43.reduce(v43); } catch (e) {}
const v45 = new C28();
C28.BYTES_PER_ELEMENT = v45;
let v48 = -450746.69945373747 ^ -450746.69945373747;
v48--;
Math.acos(v48);
