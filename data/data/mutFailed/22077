new BigUint64Array(1000);
let v3 = 8;
new Uint32Array(v3);
try { Int32Array.bind(1658); } catch (e) {}
new Int32Array(1658);
class C10 extends Int32Array {
    static #n(a12, a13, a14) {
        Math.asin(-1910858610);
        -1910858610 / -19757;
        ++v3;
        a13 % -19757;
        return -1910858610 & -1910858610;
    }
}
new C10();
const v24 = new C10();
v24.byteLength;
const v26 = new C10();
const v30 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
try { v30.reverse(); } catch (e) {}
class C32 {
    constructor(a34, a35) {
        let v36 = /W(jy2)/udy;
        const v37 = /(u4(?:a?)*)/gudimsy;
        const v39 = Uint8Array(v37, C32);
        const v41 = Uint32Array(4294967296, a34, a35);
        function f42(a43, a44, a45, a46) {
            const o50 = {
                ...v39,
                n(a48, a49) {
                    v41[a43] = v41;
                    return 4294967296;
                },
            };
            return a43;
        }
        for (let v51 = 0; v51 < 5; v51++) {
            f42(Uint8Array);
        }
        v36 = v37;
        for (let v53 = 0; v53 < 5; v53++) {
            v30["p" + v53] = v53;
        }
    }
}
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    -a59;
    a60 << a60;
    const o63 = {
    };
    try {
    } catch(e64) {
    }
    try {
        const o65 = {
        };
    } catch(e66) {
    }
    try {
        const o67 = {
        };
        o67.c = o67;
    } catch(e68) {
    }
    try {
        const o69 = {
        };
        o69.a = o69;
    } catch(e70) {
        function f71(a72, a73) {
            const o77 = {
                o(a75) {
                    super.c;
                    return 9007199254740990;
                },
            };
            return o77;
        }
    }
    try {
    } catch(e78) {
    }
    try {
    } catch(e79) {
        const o80 = {
        };
    }
    try {
    } catch(e81) {
    }
}
const v82 = F57?.constructor;
try { new v82(4294967296); } catch (e) {}
const v84 = new F57(-1066825740, 4294967296);
const v85 = BigUint64Array?.constructor;
try { new v85(v26, v26); } catch (e) {}
const v87 = new v82(9007199254740990, 4294967296);
try { v84.getYear(F57, v87, 9007199254740990, v87, 9007199254740990); } catch (e) {}
/8foo(?=bar)baz*/vdisy.unicodeSets;
const v91 = /([x]a[a]+)/gdisy;
/(\2)(\1)/gudimsy;
v91[F57];
