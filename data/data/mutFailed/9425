class C3 {
    static get a() {
        function* f5(a6) {
            let v7;
            try { v7 = a6(this, this, a6, 0.0, a6); } catch (e) {}
            v7 >>> this;
            return yield 0.0;
        }
        const v10 = f5(f5);
        v10.b = v10;
        return f5;
    }
    a = 4555;
}
const v11 = new C3();
function f12(a13) {
    try { new a13(v11, 0.0, a13, a13, v11); } catch (e) {}
    const v16 = new Int32Array();
    try { v16.forEach(v16); } catch (e) {}
    return a13;
}
v11[Symbol.toPrimitive] = f12;
const v20 = new C3();
let v21;
try { v21 = v20.hasOwnProperty(C3); } catch (e) {}
v21 && v21;
const v23 = new C3();
const v24 = [-504.4194077883046,-1.7917813040376127e+308];
v24.g = v24;
function f25() {
    -8n;
    const v28 = [8n];
    v28[0];
    return v28;
}
const v30 = f25();
const v31 = [1000000000.0,-2.220446049250313e-16,1.7976931348623157e+308,0.2627335636320439,7.399246492378893,3.8345595248281997e+307,4.197664007290742e+307];
function f32() {
    function f33(a34) {
        const v36 = ([134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439]).length;
        const v37 = v36 >>> v36;
        const v38 = v37 % v37;
        v38 & v38;
        return v36;
    }
    return f33;
}
function f40(a41) {
    Math.hypot(2.2250738585072014e-308);
    Math.acosh(2.2250738585072014e-308);
    v30 / 2.2250738585072014e-308;
    -2 >>> 2.2250738585072014e-308;
    v30 && 2.2250738585072014e-308;
}
const v51 = Symbol.toPrimitive;
Object.defineProperty(v31, v51, { configurable: true, get: f32, set: f40 });
try { v31.map(v11); } catch (e) {}
const v53 = [604996.0588761426,2.220446049250313e-16,Infinity,-Infinity,-7.570880432158308e+307];
v53[Symbol.isConcatSpreadable] = Symbol;
v53.length;
Object.defineProperty(eval, "toString", { writable: true, value: f32 });
const v58 = eval?.call;
try { new v58(v11); } catch (e) {}
const v60 = eval(eval);
function f61() {
    new WeakSet();
    return 0.0;
}
v60[Symbol.toPrimitive] = f61;
try { v60(eval); } catch (e) {}
try { new v60(eval); } catch (e) {}
let v68;
try { v68 = v60(v60); } catch (e) {}
try { v68(v30); } catch (e) {}
v68.d = v68;
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v72 = 0; v72 < 500; v72++) {
        const v74 = ("p").localeCompare();
        ("p" + v72).fontcolor(v72, v74, F70).trimLeft()[12].substring(F70, this);
    }
}
function f80(a81, a82, a83) {
    a81[1] = a81;
    a82.a;
    a83.g;
    a82.a;
    a81[3] = a81;
    let v87;
    try { v87 = a83.concat(a83); } catch (e) {}
    const v88 = v87[2];
    v88 >>> v88;
    const o101 = {
        "f": a83,
        set b(a91) {
            function f92(a93) {
                return f92;
            }
            class C94 extends f92 {
            }
        },
        "e": a83,
        [v11]: v23,
        "d": a83,
        o(a96, a97, a98) {
            this.d = this;
            if (a97) {
                let v99;
                try { v99 = C3.valueOf(v24); } catch (e) {}
                v99.b = v99;
                const t110 = 2;
                t110[2] = a82;
            } else {
                this[1073741824] |= 0.0;
                new C3();
            }
            return v31;
        },
    };
    const v102 = o101.d;
    function f103(a104) {
        delete v58?.[a104];
        return v51 < v51;
    }
    v102[Symbol.toPrimitive] = f103;
    v102.g = v102;
    try { v102.copyWithin(a81, v68); } catch (e) {}
    return o101;
}
const v110 = f80?.bind;
const v111 = v110?.apply;
try { new v111(v110, v23); } catch (e) {}
try { new v110(v21); } catch (e) {}
const v114 = f80(v53, v23, v24);
v114.e;
v114.d = v114;
const v116 = f80(v31, C3, v53);
try { v116.o(v116, 4555, v116); } catch (e) {}
const v118 = v116?.__lookupSetter__;
v118.name;
try { v118.constructor(v118); } catch (e) {}
try { new v118(v116); } catch (e) {}
f80(v24, v20, v31);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
Int16Array.name = Int16Array;
const v126 = new Int16Array(2);
Object.defineProperty(v126, "toString", { writable: true, value: Symbol });
v126[1] = v126;
const v127 = v126[1];
v127 - v127;
let v129 = v126.lastIndexOf(2.220446049250313e-16);
v129++;
