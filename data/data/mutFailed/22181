const v0 = [1,268435441,65535,11845];
[9,1519705062,-1,65536];
const v2 = [3,512,1024,-49396,-58309,12380,-4294967296,65537,1969480408];
function f3() {
    return v2;
}
const v4 = [f3];
const v5 = [v0,v0,v0];
const v6 = [f3,v5,v4,f3,v5];
const v7 = [];
v7.some(v6);
function f9() {
    const o11 = {
        __proto__: v7,
        [v7]() {
        },
    };
    return o11;
}
new f9();
function f13() {
    return v6;
}
new Uint32Array(390);
new BigUint64Array(2);
new Int16Array(3134);
const v25 = new Int8Array(2);
v25[Int8Array] = v25;
new Float64Array(571);
const v31 = new Uint8Array(10);
new Float64Array(2713);
new Int32Array(16);
const v40 = new Uint8Array(9);
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v40;
    } catch(e46) {
    }
    try {
        this.e = 2;
        const v55 = new Uint8ClampedArray(16);
        v55[10] = v55;
        const v57 = -1322;
        v55["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v31);
        } catch(e59) {
        }
        const v61 = new Uint8ClampedArray(1322);
        let v62 = v61[315];
        function F63(a65, a66, a67, a68) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = "536870889";
            } catch(e69) {
            }
            try {
                this.b = a68;
            } catch(e70) {
            }
        }
        new F63(1073741824n, 1073741824n, 257n, "6");
        const v72 = new F63(1073741824n, 257n, 257n, v57);
        const v73 = new F63(v62, 257n, 257n, "536870889");
        new BigUint64Array(6);
        1322 >>> 3768;
        const v81 = new BigInt64Array(4046);
        v81[123];
        -115;
        function f86(a87, a88) {
            a87++;
            a88 + a88;
            const v91 = a87++;
            v91 >> v91;
            try {
                v72.toString = a88;
            } catch(e93) {
            }
            Object.defineProperty(v73, v73, { configurable: true, enumerable: true, get: f86 });
            let o95 = {
                "d": a87,
                ...a87,
                get e() {
                    return this;
                },
            };
            [,...o95] = v81;
            a88[4046];
            const o99 = {
                "maxByteLength": 3035,
            };
            function f101(a102, a103, a104, a105) {
                return 45725n;
            }
            let v107 = -268435456;
            v107--;
            const v109 = v62--;
            v61[v109] ||= v109;
            try { o99.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return a87;
        }
        f86(4046, 3768);
        try { Uint8ClampedArray.bind(f86); } catch (e) {}
    } catch(e118) {
    }
}
new F41(9, 16, 16);
const t110 = 2;
const v120 = new t110();
const v121 = [-5.0];
const v122 = v25.constructor;
try { new v122(v120, v121); } catch (e) {}
const v124 = [15,52917,-9223372036854775807,-647320912,1463936330,-11132,-65537,1005084643,16,1073741823];
for (let v125 = 0; v125 < 5; v125++) {
    function f126() {
        return ("Vre").fixed("Vre").concat(v124);
    }
    f126();
    %OptimizeFunctionOnNextCall(f126);
}
new F41(16, 2, 2);
