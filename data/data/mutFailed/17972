let v2 = "8MU";
class C3 {
    get h() {
        this[4294967296];
        const o8 = {
            "maxByteLength": 1708913726,
        };
        const v10 = new ArrayBuffer(0, o8);
        new Float32Array(v10);
        return v10;
    }
    #e = "n";
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
function f16(a17, a18) {
    const o35 = {
        __proto__: v14,
        n(a20, a21, a22, a23) {
            super.g -= a17;
            function F24(a26, a27, a28) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = a17;
                } catch(e29) {
                }
                try {
                    this.f = a21;
                } catch(e30) {
                }
                try {
                    this.c = C3;
                } catch(e31) {
                }
            }
            const v32 = new F24(v14, v15, v14);
            const v33 = new F24(v32, a21, v32);
            new F24(a23, v14, v33);
            return a17;
        },
    };
    return o35;
}
f16("n", "n");
const v37 = f16(f16, "n");
const v38 = f16(v37, v37);
class C39 {
    [v14];
    65537 = 169057.0080169898;
    static #n(a41, a42, a43, a44) {
        d = a42;
        try { ("n").replace(v2, v2); } catch (e) {}
        try { v13["toString"](v37, 169057.0080169898, v2, this, "toString"); } catch (e) {}
        return 169057.0080169898;
    }
    static {
        let v48 = this;
        let v49 = ("n").length;
        ({"length":v49,} = "n");
        ({"a":v2,"d":v48,"length":C3,} = "n");
        try {
            v38.#n(v48);
        } catch(e51) {
        }
    }
}
new C39();
const v53 = new C39();
new C39();
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f16;
    this.c = F55;
    try {
        this.h = -2;
    } catch(e60) {
    }
    try {
        this.c = -2;
    } catch(e61) {
    }
    try {
        this.f = -2;
    } catch(e62) {
    }
}
const v63 = new F55();
new F55(v63, v63, v53);
new F55();
new Uint32Array(16, F55);
Int8Array.toString = f16;
const v71 = new Int8Array(2);
v71[Int8Array] = v71;
new Float64Array(571);
const v77 = new Uint8Array(10);
new Float64Array(7);
const v83 = new Int32Array(16);
const v86 = new Uint8Array(9);
const v89 = v2 - -47811;
+v89 || v89;
function F92(a94, a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v86;
    } catch(e97) {
    }
    try {
        this.e = v83;
        const v106 = new Uint8ClampedArray(16);
        g = v15;
        Object.defineProperty(this, v63, { writable: true, configurable: true, get: f16, set: f16 });
        delete this[Uint8Array];
        try { a94(); } catch (e) {}
        for (let v109 = 0; v109 < 32; v109++) {
            v13["p" + v109] = v109;
        }
        v106[10] = v106;
        const v113 = -1322;
        v106["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v77);
        } catch(e115) {
        }
        const v117 = new Uint8ClampedArray(1322);
        let v118 = v117[315];
        function F119(a121, a122, a123, a124) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = this;
            try {
                this.sticky = "536870889";
            } catch(e125) {
            }
            try {
                this.b = a124;
            } catch(e126) {
            }
        }
        new F119(1073741824n, 1073741824n, 257n, "6");
        const v128 = new F119(1073741824n, 257n, 257n, v113);
        const v129 = new F119(v118, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 >>> 3768;
        function f137() {
            const o146 = {
                ["1073741824"]: 268435441,
                874720287: 268435441,
                get d() {
                    try { this.m(268435441, this, this); } catch (e) {}
                    const o143 = {
                    };
                    return Proxy("1073741824", o143);
                },
                ["species"]: "1073741824",
            };
            return o146;
        }
        const v147 = f137(f137);
        const v148 = f137();
        const v149 = f137();
        v149[1073741824] = v149;
        function F150(a152, a153) {
            if (!new.target) { throw 'must be called with new'; }
            const v154 = this?.constructor;
            try { new v154(a152, v147); } catch (e) {}
            a152[1073741824] = a152;
            try {
                this.g = a153;
            } catch(e156) {
            }
        }
        F150.length;
        const v158 = new F150(v149, v147);
        const v159 = new F150(v149, v148);
        const v160 = new F150(v147, v148);
        function f161(a162, a163, a164) {
            a164.g = a164;
            const o170 = {
                "a": a163,
                get e() {
                    v149 & this;
                    return (a163 == a163 ? a163 : a163)[15];
                },
                ...a164,
                "c": v159,
                "f": v160,
            };
            return o170;
        }
        const v171 = f161(v158, v158, v159);
        v171.c = v171;
        f161(v158, v160, v160, v171, f137, v171);
        f161(v159, v158, v158);
        58091 >> 58091;
        Uint8ClampedArray.length;
        try { Uint16Array.from(v159); } catch (e) {}
        const v187 = new Uint16Array();
        try { v187.entries(); } catch (e) {}
        try { ("minor").anchor(v158); } catch (e) {}
        const o194 = {
            "type": "minor",
        };
        gc(o194);
        Array(228);
        class C197 {
        }
        const v198 = new C197();
        const v199 = v198?.constructor;
        try { new v199(); } catch (e) {}
        const v201 = new C197();
        const v202 = v201?.constructor;
        try { new v202(); } catch (e) {}
        new Float64Array(Float64Array, Float64Array, gc);
        Float32Array.e = Float32Array;
        new Uint8Array(6);
        function F215() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C217 {
        }
        const v218 = new C217();
        ReferenceError.captureStackTrace(F215, v218);
        const v221 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
        gc.caller = gc;
        v221["findIndex"](gc);
        const v225 = new BigInt64Array(4046);
        v225[123];
        -115;
        function f230(a231, a232) {
            a231++;
            a232 + a232;
            const v235 = a231++;
            v235 >> v235;
            try {
                v128.toString = a232;
            } catch(e237) {
            }
            Object.defineProperty(v129, v129, { configurable: true, enumerable: true, get: f230 });
            let o239 = {
                "d": a231,
                ...a231,
                get e() {
                    return a232;
                },
            };
            [,...o239] = v225;
            a232[4046];
            const o243 = {
                "maxByteLength": 3035,
            };
            o243.n = v129;
            const v245 = v118--;
            v117[v245] ||= v245;
            try { o243.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f230(4046, 3768);
        try { Uint8ClampedArray.bind(f230); } catch (e) {}
    } catch(e254) {
    }
}
new F92(9, 16, 16);
const v259 = new Int16Array(2);
v259.lastIndexOf(2.220446049250313e-16);
