const v2 = new Array(1336);
let v3 = [1748548631,1000,-37389,-1940075144,1954646719,8,-65537,-10];
const v4 = [1574854108];
try { v4.values(); } catch (e) {}
const v6 = [1279218511,536870888];
function f7() {
    return Array;
}
Object.defineProperty(v6, "toString", { enumerable: true, get: f7 });
function f8(a9, a10, a11) {
    function f12(a13) {
        try {
            a13.length = 1;
        } catch(e15) {
        }
        return a10;
    }
    a10.valueOf = f12;
    a11[526] = v4;
    a11[1];
    const o17 = {
        "g": a9,
        "a": a10,
        "d": v2,
        ...a9,
        "f": a11,
        [v2]: v4,
        "h": a9,
        ...v2,
        "b": v6,
        [a11]: a11,
        ...a11,
        "e": a10,
    };
    return o17;
}
const v18 = f8(v4, v6, v6);
const v19 = f8(v4, v6, v2);
const v20 = f8(v4, v4, v3);
function f21() {
    function f22(a23) {
        v3 = a23;
        function f24() {
            return f24;
        }
        class C25 {
        }
        const v26 = C25.length;
        function f27(a28, a29, a30) {
            const t49 = a29.constructor;
            return t49().toPrecision(f24);
        }
        let v34;
        try { v34 = f27(v26, v26); } catch (e) {}
        return v34;
    }
    return f22;
}
Object.defineProperty(v20, "toString", { writable: true, configurable: true, get: f21 });
v20[1];
function f36(a37, a38, a39) {
    Object.defineProperty(a37, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f36 });
    a39.valueOf = Symbol;
    a37 - a37;
    a38.g = a38;
    const o48 = {
        get h() {
            this.a ||= a37;
            const v44 = v2;
            /abc+?/gum;
            /a\Sc+/udmsy;
            /a\scfo7a[a]/guims;
            return v2;
        },
        ...v18,
        [v20]: v20,
        "g": a39,
        "c": v2,
    };
    return o48;
}
f36(1336, v20, v6);
f36(v6, v19, v6);
f36(1336, v19, v3);
for (let [i56, i57] = (() => {
        let v54 = 10;
        v54--;
        return [0, v54];
    })();
    (() => {
        i56 + i56;
        i57 >> i57;
        const v60 = i56 < i57;
        class C61 extends Date {
        }
        try { new C61(); } catch (e) {}
        return v60;
    })();
    i56 | i56, i56++) {
}
let v70 = Infinity;
v70++;
let v73 = -4;
v73--;
5 / 5;
class C77 {
    static #valueOf(a79, a80, a81) {
    }
}
