const v0 = [-4.0,1000000000000.0,1.450461895369127e+308,7.675917850796949,1000000000.0,24.12822766005138,1000000000.0,1.7976931348623157e+308];
[Infinity,-4.5871504619460435,-685645.3920683025,-5.0,2.0,5.0,2.220446049250313e-16,8.840742312898364,-778941.394565233];
[4.0,-412.42030777614616,2.2250738585072014e-308];
try { ("b").bold(); } catch (e) {}
const v8 = v0 / 0;
v8 ^ v8;
function f10(a11, a12, a13, a14) {
    [-3.942521664036782e+307,-3.942521664036782e+307,[]];
    return -3.942521664036782e+307;
}
const o20 = {
};
"bigint" + 0;
class C24 {
    static [0];
    static #b;
    static [2.0];
}
9 - 9;
const v28 = new Uint32Array(9);
try { v28.slice(o20, v28); } catch (e) {}
const v30 = [1868255996,1,2,9007199254740992];
v30[3] = v30;
let v33;
try { v33 = v30.includes(undefined, -4934n); } catch (e) {}
function f34(a35) {
    return a35;
}
new Uint8Array(1229);
let v39 = 257;
v39++;
const v42 = new Int32Array(v39);
function f43(a44, a45, a46, a47) {
    let v49 = new a47();
    [...v49] = v42;
    let [...v50] = v42;
    try { v50.entries(); } catch (e) {}
}
f43();
try { Int8Array.from(v33); } catch (e) {}
new Int8Array(16);
[-268435456,65536,-7,-12906,268435440,65535,626223839,-44318,4,-50388];
[65535,1689418438,-9,65535,4294967296,-9007199254740991];
const v62 = new BigUint64Array(16);
v62[9];
try { Float32Array.apply(16, v62); } catch (e) {}
[-1474025075,9007199254740990,7,-1659153040,-256,6,1463524180,-47876,9007199254740990,9007199254740991];
-706152110 % -706152110;
9 + 9;
const v72 = new Uint16Array(9);
const v74 = v72.includes(true, -706152110);
v74 || v74;
