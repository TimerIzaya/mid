const v0 = /vs\u0034/dmsy;
/va*b|c/vms;
/T(?:ab)/um;
const v6 = [64,-128,10,536870912,268435439,567937342,-14,1000,4294967297];
const v7 = [-2147483647];
[1030088854,-25077,1223716672,4];
[[284758.5888486223,v7,v7,v6,v0]];
[v7];
const t5 = "m";
new t5();
try { Map(); } catch (e) {}
const v20 = new Map();
function f21(a22, a23, a24, a25) {
    a24.arguments = a24;
    a22[3];
    a24.caller = a24;
    const o33 = {
        n(a28, a29, a30, a31) {
            for (let v32 = 0; v32 < 10; v32++) {
            }
        },
        16: a22,
        ...v20,
    };
    return o33;
}
const v34 = f21("m", "m", f21);
new Float64Array();
let v37 = 16;
v37++;
try { BigInt64Array(); } catch (e) {}
new BigInt64Array();
const v43 = ~f21;
v43 ^ v43;
const v46 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v47 = [601759695];
try { v47.sort(v47); } catch (e) {}
v47[0] = v47;
const v49 = [1073741824,1073741823,1376142744,1073741825];
function f51(a52, a53, a54, a55) {
    arguments.toString();
    function f58() {
        const v60 = (1000000000.0)?.toLocaleUpperCase;
        try { new v60(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v64 = -268435456;
        v64--;
        -(v64 + v64);
        const o81 = {
            "c": v49,
            [522675525n](a69, a70) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v47,
            valueOf(a72, a73) {
            },
            "e": -4294967295,
            "callee": v64,
            "maxByteLength": -4294967295,
            "arguments": v46,
            ...v47,
            "byteLength": "Vre",
            ..."Vre",
            valueOf(a75, a76) {
            },
            ..."Vre",
            4: "Vre",
            "c": v64,
            "type": "Vre",
            toString(a78, a79, a80) {
            },
            3: v64,
        };
        try { o81.valueOf(o81, -128); } catch (e) {}
        return "Vre";
    }
    f58.length;
    f58();
    const v86 = new RegExp();
    try { v86.findIndex(v34); } catch (e) {}
    %OptimizeFunctionOnNextCall(v49);
    ("find").strike();
    try { v49["find"](..."find", a55, v47, ...v49, ...522675525n); } catch (e) {}
}
for (let v91 = 0; v91 < 5; v91++) {
    f51();
}
f51();
%OptimizeFunctionOnNextCall(f51);
f51();
