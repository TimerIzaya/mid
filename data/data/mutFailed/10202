function f0() {
    const o9 = {
        [-683.5890154816067]: "MAX_SAFE_INTEGER",
        "f": -1488682120,
        6: -683.5890154816067,
        "e": "MAX_SAFE_INTEGER",
        __proto__: "MAX_SAFE_INTEGER",
        [-1488682120](a5) {
            let v6 = this;
            super.c = a5;
            const v7 = this ^ "MAX_SAFE_INTEGER";
            v6 = "MAX_SAFE_INTEGER";
            ("MAX_SAFE_INTEGER").length;
            return v7;
        },
    };
    return o9;
}
const v10 = f0();
const v11 = f0();
const v12 = f0();
class C13 {
    static #h;
    valueOf(a15, a16) {
        try { v12.allSettled(this, a15); } catch (e) {}
        try {
            this.fuck(-5.0, true, true, -5.0);
        } catch(e21) {
        }
        return this;
    }
}
C13.e = C13;
const v22 = new C13();
const v23 = new C13();
const v24 = new C13();
v22.g >>>= 57486;
for (let v27 = 0; v27 < 32; v27++) {
    const v29 = ("p")[0];
    const v30 = "p" + v27;
    try { v30.toLocaleLowerCase(); } catch (e) {}
    v10[Symbol.hasInstance] = "p";
    v27[3] = v29;
    v12[v12] -= 57486;
    v23[v30] = v27;
}
-2147483649 + -2147483649;
const v36 = [];
function f37() {
    const o39 = {
        p() {
            return f37;
        },
        [v36]: v36,
        "a": v36,
    };
    return v36;
}
try { f37.bind(v11); } catch (e) {}
const v41 = f37();
const v42 = f37();
const v43 = f37();
try { v43.find(f37); } catch (e) {}
const v46 = ([65536])?.find;
try { new v46(v24); } catch (e) {}
([-267,-4,-32045,-4])[1];
[14,268435441,-9223372036854775807];
for (const v51 in v10) {
    new Int8Array(8);
    new Uint8Array(2262);
    new Float32Array(257);
}
const v63 = new Float64Array(14);
try { new Uint8ClampedArray(v42, v41, 14); } catch (e) {}
const v67 = new Uint8ClampedArray(0);
try { v67.slice(v24, C13); } catch (e) {}
const v71 = new BigInt64Array(218);
v71[51];
let v73;
try { v73 = v71.sort(f37); } catch (e) {}
try { v73(v42, v73, v73, ...v67, v41, ...v41); } catch (e) {}
const v75 = (a76, a77) => {
    return v43 * a77;
};
Object.defineProperty(v63, 123, { writable: true, configurable: true, get: f37, set: f0 });
try {
    f37();
} catch(e82) {
}
