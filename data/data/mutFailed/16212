class C3 {
    static #a;
    constructor(a5) {
        const v6 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
        function f7(a8) {
        }
        const v11 = ("-9223372036854775807").lastIndexOf(-7);
        function f12(a13, a14) {
            const o15 = {
                __proto__: v6,
            };
            return o15;
        }
        const v16 = f12();
        v16.group(f12);
        new Float32Array(255);
        new BigUint64Array(2);
        const v25 = (a26, a27, a28, a29) => {
            a27[10] = v11;
            return -5.0;
        };
        Object.defineProperty(v16, v6, { writable: true, configurable: true, set: f7 });
        new Int8Array(2);
        const v33 = new Float32Array();
        function f35(a36) {
        }
        function F37(a39, a40) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = this;
            } catch(e41) {
                for (let [v42,v43] of v33) {
                }
            }
            f35--;
            Math.asin();
            this.h = "-185650492";
            try {
                new F37();
            } catch(e49) {
            }
        }
        new F37();
    }
    ["-62665"];
}
const v51 = new C3("-62665");
let v52 = Int8Array;
try {
const t0 = "-62665";
t0(-5.0, C3, "-62665");
} catch (e) {}
let v54;
try { v54 = ("-62665").toLowerCase(); } catch (e) {}
C3 >> ++C3;
const v57 = new C3(v51);
const v58 = new C3(C3);
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a62;
    } catch(e65) {
    }
    try {
        this.e = v58;
    } catch(e66) {
    }
}
const v67 = new F59("-62665", v51, v58, v58);
const v68 = new F59(v67, -5.0, v51, "c");
new F59(v67, v68, v58, v57);
-1000000000000.0 + -5.0;
Math.tan(-9007199254740992);
-v52;
++v52;
-v54;
const v83 = new Int16Array(12);
v83.fill();
