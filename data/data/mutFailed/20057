new Uint8Array(5);
new Float64Array(16);
new parseInt(3479);
class C17 {
    static 3143;
    static ["-2"];
    #f = "-2";
    static #a;
    #c;
    #valueOf(a19, a20) {
        const v21 = a20 == a20;
        v21 ? a20 : a20;
        const v23 = ["-2",this,"setMonth",a19,"-2"];
        [v23,v23,this,this];
        [v21,"-2","4X",a19];
        return a19;
    }
    10 = "4X";
    #g = "-2";
}
new C17();
new C17();
new C17();
try { new WeakSet(); } catch (e) {}
new WeakSet();
-536870912 ^ -536870912;
[-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
[35577,123452243,-2,65305,268435441,11,-58686];
const v38 = [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
try { v38.sort("-2"); } catch (e) {}
6 | 6;
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v53 = this.constructor;
    try { new v53(); } catch (e) {}
}
new F47();
new F47();
class C58 {
    constructor(a60) {
        const v61 = this.constructor;
        v61.d = v61;
        try { new v61(); } catch (e) {}
        ("size").c;
        const v64 = ("size").g;
        ("size").length;
        let v66 = v64?.[7];
        [...v66] = "size";
        /a\bc/vd;
    }
}
function f68(a69, a70, a71) {
}
const o72 = {
};
class C73 {
    static #n(a75) {
    }
}
new C73();
new C73();
let v78 = Int16Array;
try {
} catch(e79) {
}
v78 = v78;
