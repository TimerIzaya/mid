const v2 = new SharedArrayBuffer();
function f3() {
    try {
        new SharedArrayBuffer(2160);
    } catch(e5) {
    }
    return SharedArrayBuffer;
}
Object.defineProperty(v2, "constructor", { writable: true, configurable: true, enumerable: true, value: f3 });
const v6 = v2.constructor;
let v7;
try { v7 = new v6(2160); } catch (e) {}
v7.maxByteLength = v7;
let v8 = 3239;
const v10 = new Int32Array(v8);
Float64Array.name;
new Float64Array(v10);
const v15 = new Uint32Array(2160);
try { v15.entries(); } catch (e) {}
const o18 = {
    get c() {
    },
};
new Int16Array(4);
Uint16Array(12);
class C26 {
    constructor(a28, a29) {
        this.constructor = f3;
        const v30 = this.constructor;
        try { new v30(v30); } catch (e) {}
        this[-2147483648] >>>= v8;
        let v32 = 0;
        while (v32 < 1) {
            const v37 = v8--;
            Math.atan();
            Math.d = v30;
            f3++;
            Math.sinh(0);
            v8 * 7;
            Math.floor();
            const v45 = v37 + 7;
            v45 * v45;
            const v47 = v32++;
            v47 - v47;
        }
    }
}
try { new C26(-2147483648, Uint32Array); } catch (e) {}
new Int32Array(1897);
const v56 = new Uint8ClampedArray(104);
v56.toLocaleString();
class C59 {
    constructor(a61, a62, a63) {
        function f64(a65, a66, a67) {
            try {
                delete this[undefined];
            } catch(e69) {
            }
            return C59;
        }
        f64();
    }
}
class C71 extends C59 {
}
new C71();
Int8Array.d = Int8Array;
function F74(a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F74(F74, a77);
        const v82 = -1000000.0 | -32070;
        (-32070) ** v82;
        Math.log10(Math);
        -v82;
    } catch(e86) {
    }
}
const v87 = new Int8Array(9);
try { v87.with(v87, v87); } catch (e) {}
[Int8Array,Uint32Array,Int32Array,Int8Array];
[v15,1897,9,2160];
function f91(a92, a93) {
    return a93;
}
const v94 = [2.0,-2.2250738585072014e-308,2.4617128810201834,0.8777478192033997,4.0,5.13369912480738,-0.6793749535317453];
Uint32Array.BYTES_PER_ELEMENT;
const v97 = new Uint32Array(v94);
Uint16Array.name;
new Uint16Array(v97);
[Int8Array,Int32Array,Int32Array];
const v102 = /[^7Y[a-zA-Z0-9]?]/vdmy;
for (let v103 = 0; v103 < 5; v103++) {
    function f104() {
        return f104;
    }
    function f106(a107, a108, a109, a110) {
        return a110 >= a110;
    }
    for (let v112 = 0; v112 < 10; v112++) {
        f106(v112, v112, f104, 522675525n);
    }
    function f114() {
        class C115 {
        }
        class C116 {
        }
        function f117(a118, a119, a120, a121) {
            const v124 = new Int16Array(1269);
            try { C116.n(f117); } catch (e) {}
            for (const v126 in v124) {
            }
            return a119;
        }
        const v128 = Array();
        const v129 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        v129[1];
        for (let v131 = 0; v131 < 5; v131++) {
            v131 >> v131;
            v129 | v131;
        }
        v128[v6] = 47457;
        function f135() {
            return 47457;
        }
        for (let v136 = 0; v136 < 5; v136++) {
            f135();
            %OptimizeFunctionOnNextCall(f135);
        }
        for (let v138 = 0; v138 < 25; v138++) {
        }
        try { v128.reduceRight(v102); } catch (e) {}
        return v128;
    }
    try { f114(); } catch (e) {}
    f114();
    %OptimizeFunctionOnNextCall(f114);
}
