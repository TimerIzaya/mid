/ksfoo(?<=bar)baz/gudimsy;
-(536870912n << 536870912n);
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    a6 % a6;
    const v9 = this.constructor;
    v9.bind(a6, F4, this, F4);
    try { new v9(); } catch (e) {}
}
const v12 = /(?:ab){4,7}((\xed\xa0\x80))\x02/gum;
for (const v16 of Array(4087, Array, Array)) {
}
/MaH2(?:a*)+/gvs;
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
}
const v26 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v28 = new Uint32Array();
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f32() {
    let v34;
    try { v34 = ("Vre").charAt(4087); } catch (e) {}
    try { v34.lastIndexOf(); } catch (e) {}
    let v36;
    try { v36 = ("Vre").codePointAt(v26); } catch (e) {}
    v36 - v36;
    v36 ^ v36;
    let v39 = Float64Array;
    v39 = 4087;
    let v40 = v26.length;
    v40++;
    try {
        v31.forEach(4087);
    } catch(e43) {
        e43.stack = e43;
    }
    const o54 = {
        "c": -4294967297n,
        "EPSILON": v30,
        valueOf(a45, a46) {
            return a45;
        },
        1073741824: v28,
        [-4294967297n](a48, a49, a50, a51) {
            eval();
        },
        "arguments": 5,
        256: v12,
    };
    return v40;
}
%OptimizeFunctionOnNextCall(f32);
const o56 = {
};
const v58 = new Date();
const v59 = [-1000.0,2.0,6.498411136794167e+307,1.5301115680028905e+308,-1.0240581174585665e+308,-73553.73579822388,-474.34134439650745,2.300981674378132,-816063.8647013834,-1.2620665326245469e+308];
const v60 = [];
const v61 = [];
function f62(a63, a64) {
    const o96 = {
        129: v60,
        n(a66, a67) {
            class C76 extends Int32Array {
            }
            function F82() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C85 {
                static get b() {
                }
            }
            return v61;
        },
        __proto__: v59,
        o(a88, a89, a90, a91) {
            [a63];
            Reflect.apply(a89.reduce, a64);
            return a64;
        },
        "f": v61,
        "e": v58,
        ...a64,
    };
    const v100 = new BigUint64Array(10);
    for (const v102 in v100) {
        let v103 = 10;
        for (let i = 0; i < 5; i++) {
            const v104 = v103--;
            v104 > v104;
        }
        new Float64Array(2147483647);
    }
    return o96;
}
new Set();
[-1000.0,-2.2250738585072014e-308,0.5295820918783507,-1.4070783578335598e+308,1.7649696657695718e+308,-0.0];
[-5.0,-4.0,1.522231543402639e+308,2.220446049250313e-16,0.4354055472501167,-5.0,840.7575181548134,-1000000000.0];
[5.295362332273118,1000.0,-9.44410241964431,-4.924685180459656e+307,784.9974287349535,-2.0];
function f111() {
    const o120 = {
        toString(a113, a114) {
            try { this.toString(); } catch (e) {}
            const o116 = {
            };
            o116.g = a113;
            try {
                const o117 = {
                    ...o116,
                };
                super.g;
            } catch(e119) {
            }
        },
    };
    return o120;
}
function F121() {
    if (!new.target) { throw 'must be called with new'; }
}
class C123 {
    static {
        for (let v125 = 0; v125 < 25; v125++) {
            for (let v130 = 0; v130 < 25; v130++) {
                eval();
                const v133 = v130 < v130;
                class C135 {
                }
                new Set();
                function f137(a138, a139) {
                    return a139;
                }
                v133.toString = f137;
                new BigUint64Array(3375);
            }
        }
    }
}
