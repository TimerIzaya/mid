[-2,1024,-18115,-65537,-268435456];
[-16,-7195,-4294967296,-536870912,-47556,-47456,-2108876995,-4294967295,-32380];
const v2 = [-6,1073741825,4,7,64,16,-9007199254740990,221190236,55286,268435440];
Float32Array.prototype = Float32Array;
new Float32Array(3642);
const v7 = 0 >> 0;
new Float32Array(0);
const v11 = 1072 - 1072;
v11 | v11;
const v14 = new Float32Array(1072);
const v15 = v14[177];
v15 * v15;
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    function f21(a22) {
        this[a20] >>= v7;
        for (let v23 = 0; v23 < 5; v23++) {
            v23 % v23;
        }
        return v14;
    }
    this[Symbol.toPrimitive] = f21;
    a20 >>> a20;
    ~a20;
    this.g = a19;
    try {
        this.h = Float32Array;
    } catch(e29) {
    }
    try {
        this.g = a19;
    } catch(e30) {
    }
}
const v31 = new F17(Float32Array, 1072);
const v32 = new F17(v31, v31);
function f33() {
    function f34() {
        ([315.3838771878211,0.8321654879979539,1.0,-813011.8421276518]).__proto__;
        return v2;
    }
    return f34;
}
function f37(a38) {
    [-9223372036854775807,-536870912,-613974952,-53939,148430126,4096,-2,-4294967295];
    [1,8];
    [10000,268435456,268435439];
}
Object.defineProperty(v32, Symbol.toPrimitive, { writable: true, get: f33, set: f37 });
const v44 = new F17(Float32Array, v32);
const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v46 = -4294967297n;
v46 | v46;
const v48 = v46--;
v48 != v48;
const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v50.reduceRight(Float32Array); } catch (e) {}
const v52 = [601759695];
const v53 = [1073741824,1073741823,1376142744,1073741825];
v53[3];
function f55(a56, a57, a58, a59) {
    a57[Symbol.toPrimitive] = f33;
    a58.toString = Symbol;
    a57[3];
    a56 >>> a56;
    const v64 = a58.length;
    v64 === v64;
    a59 & a59;
    function f67() {
        let v69;
        try { v69 = ("Vre").codePointAt(); } catch (e) {}
        v69 - v69;
        v69 < v69;
        let v72 = Float64Array;
        v72 = a57;
        b = v52;
        v45.length;
        try {
            v53.forEach(a57);
        } catch(e75) {
            e75.b = e75;
        }
        const o86 = {
            "c": v46,
            "c": v52,
            valueOf(a77, a78) {
                return a77;
            },
            [v46](a80, a81, a82, a83) {
                eval();
            },
            "arguments": v50,
            256: a59,
        };
    }
    f67.caller = f67;
    f67();
    %OptimizeFunctionOnNextCall(f67);
    return f55;
}
function f88() {
    function f89() {
        const v91 = [65537,268435441,63298,-5,1235122603];
        function F92(a94, a95, a96, a97) {
            if (!new.target) { throw 'must be called with new'; }
            const v98 = this.constructor;
            try { new v98(1024, 1024, v91, this); } catch (e) {}
            a95.caller;
            a97[1];
            this.c = a96;
            const v103 = [Reflect];
            const o104 = {
                __proto__: Reflect,
                "e": v103,
            };
            this.f = a95;
        }
        return 1024;
    }
    return f89;
}
Object.defineProperty(f55, "constructor", { configurable: true, get: f88 });
const v105 = f55?.constructor;
try { new v105(v44); } catch (e) {}
let v107;
try { v107 = f55(v48, v53, Float32Array, Float32Array); } catch (e) {}
for (let v108 = 0; v108 < 5; v108++) {
    v108++;
    const v110 = f55(v108, v46, v50, v108);
    v110.caller;
    let v112;
    try { v112 = new v110(v110, v110, 0, v110); } catch (e) {}
    try { v112(v108, v107, v112, v11); } catch (e) {}
}
