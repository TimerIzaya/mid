const o4 = {
    4294967296: 1733353236,
};
const o6 = {
    get h() {
        return o4;
    },
    ...o4,
};
class C7 {
    [-1000000000000.0] = -1000000000000.0;
    n(a9) {
        const v11 = new Map();
        return v11;
    }
    static d = -1000000000000.0;
    static #g = 1.0;
    [0.0];
    #d;
}
try { new C7(); } catch (e) {}
const v13 = new C7();
const v14 = new C7();
v14[0];
const v16 = new C7();
function f17() {
    const o21 = {
        "h": BigUint64Array,
        __proto__: "number",
        "type": "number",
        10: 3853,
    };
    return C7;
}
class C22 {
    toString(a24, a25, a26) {
        return 36924;
        this.DataView;
        const o31 = {
            "execution": "async",
        };
        return this;
    }
    e = 0.0;
    g = -1000000000000.0;
    static b;
    static #f = v13;
}
C22.prototype = C22;
new C22();
const v36 = new C22();
v36.h = v36;
const v37 = new C22();
v37.g;
try { ("m").codePointAt(-1000000000000.0); } catch (e) {}
class C41 {
}
C41.prototype = C41;
const v42 = new C41();
try { v42.constructor(); } catch (e) {}
const v44 = v42?.constructor;
try { new v44(); } catch (e) {}
function f46() {
    return -1.4618325192014402e+308;
}
try { f46(); } catch (e) {}
v42.toString = f46;
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this?.constructor;
    try { ("imul").padEnd(1073741824); } catch (e) {}
    const v60 = new Date();
    v60.getUTCDate();
    try { new v55(a53, a53, a54, "m"); } catch (e) {}
    try { a53.toString(); } catch (e) {}
    try { a51.replaceAll(a51, a53); } catch (e) {}
    try { a53.toString(); } catch (e) {}
    const v66 = a53.valueOf(a54, this, a53, this, a51);
    v66.__lookupSetter__(v66);
}
const v68 = new F49("m", C41, v42);
const v69 = v68?.constructor;
v69.d = v69;
const v71 = new Map();
const t84 = v71.constructor;
const v73 = t84();
const o74 = {
    __proto__: v73,
};
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    const v80 = o74.constructor;
    try { v80(268435440n, a79); } catch (e) {}
}
let v82;
try { v82 = new v69(v16, v16, v13, v37); } catch (e) {}
function f84() {
    return 3.0;
}
[[256],o4,BigUint64Array,Uint8Array];
v82.length = v82;
function F90(a92, a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = this.constructor;
    try { new v96(); } catch (e) {}
    typeof Float32Array;
}
const v100 = new F90();
new F90(F90, v100, F90, v100);
