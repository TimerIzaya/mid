function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a5;
    } catch(e7) {
        new Date(512, this, this);
        const v12 = new BigUint64Array(1486);
        return v12;
    }
    const v14 = new undefined();
    delete v14[-1.5286188982640463e+308];
    new BigInt64Array(1091060517);
    try {
        class C20 {
        }
        try {
            const t16 = -1447598099;
            t16.__proto__ = C20;
        } catch(e21) {
        }
        this.g = -1447598099;
    } catch(e22) {
    }
}
const v23 = new F3(512, -1447598099, -1447598099);
const v24 = new F3(0, 0, v23, F3);
const v25 = new F3(0, -1447598099, 512, F3, v24, 512, F3);
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = F3;
    } catch(e34) {
    }
}
new F29(0, -1447598099, v25);
new F29(0, 0, v23);
new F29(0, 0, v25);
class C39 {
}
const v40 = Array(0, Array);
const v41 = new C39();
function f42(a43, a44, a45) {
    const o53 = {
        toString(a47, a48, a49) {
            a44 < v40;
            super[v41];
            return a44;
        },
        get d() {
            return a44;
        },
    };
    return o53;
}
f42(v40, v41, f42());
%OptimizeFunctionOnNextCall(f42);
function f56() {
    ("D")[0].substring().charCodeAt();
    return "D";
}
%PrepareFunctionForOptimization(f56);
f56();
%OptimizeFunctionOnNextCall(f56);
f56();
