function f0() {
}
typeof 1024n === "undefined";
Object.defineProperty("undefined", "a", { enumerable: true, set: f0 });
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a13;
    } catch(e14) {
    }
}
const v15 = new F10(20088n, -1763311037n);
new F10(3n, 3n);
new F10(-11n, 3n);
class C18 {
    constructor(a20, a21) {
        this[f0] = 20088n;
        const v22 = [];
        try {
            super[v15];
            0.2169269795390082 === 0.2169269795390082;
            v22.flatMap(f0, -11n);
        } catch(e30) {
        }
        new Float64Array(127);
        new Uint16Array(128);
        new Int32Array(509);
    }
    [20088n];
    a = 3n;
    [-11n] = -1763311037n;
    static [f0];
    257;
}
new C18(-1763311037n, 65536n);
new C18(3n, 65536n);
new C18(3n, -11n);
[729.7086180904632,608661.4923667633,-274534.88452231616,955073.7643913324,2.220446049250313e-16,-713439.8516915839,-2.220446049250313e-16,-3.089184906694409,-1000000.0];
[1000000.0,-3.0];
[2.220446049250313e-16];
function F46() {
    if (!new.target) { throw 'must be called with new'; }
}
const v49 = new F46();
const v50 = new F46();
const v51 = new F46();
function F53(a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this.constructor;
    try { new v58(this, F53, a57); } catch (e) {}
    a55.c = a55;
    const v60 = a57?.constructor;
    try { new v60(); } catch (e) {}
    this.b = a57;
}
new F53(v51, v50, v51);
new F53(v50, v51, v49);
function F64(a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    function f68() {
        new Int8Array(628786973);
        return F64;
    }
    this.constructor = f68;
    const v72 = this.constructor;
    try { v72(); } catch (e) {}
}
new F64();
