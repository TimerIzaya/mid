const t0 = "g";
t0[14] &&= 14;
function f7(a8, a9) {
    const o13 = {
        [122188848n](a11, a12) {
        },
    };
    return o13;
}
new Map();
function f17(a18) {
    return "g";
}
const o21 = {
    "type": "function",
};
const v22 = new Worker(f17, o21);
new Int32Array(189);
let v24 = 64;
v24.h = 189;
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e30) {
        for (let [v31,v32] of a28) {
        }
    }
    const v35 = ~(-256n >> -256n);
    v24 = 189;
    delete v22?.b;
    this[2];
    const v42 = Symbol.toPrimitive;
    const o44 = {
        [v42]() {
        },
    };
    v35 + v35;
    try {
        new F26();
    } catch(e47) {
    }
}
const v48 = new Uint8ClampedArray(v24);
let v50 = Uint32Array;
new v50(127);
function f53() {
    return 10000;
}
class C55 extends String {
    6 = C55;
    5;
}
new C55();
const t53 = 6;
t53[9] = F26;
Object.defineProperty(v48, "g", { writable: true, enumerable: true, get: String, set: f17 });
v50 >> v50;
Math.sqrt(v50);
Math.sqrt(Uint8ClampedArray);
0 ^ v50++;
const v66 = new BigUint64Array(10);
function F67() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Object.defineProperty(v66, 0, { writable: true, value: 4096 });
    } catch(e70) {
    }
}
new F67();
