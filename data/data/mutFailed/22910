const v5 = new Uint32Array(255);
v5.length;
[2.220446049250313e-16,-2.2250738585072014e-308,1e-15];
[-3.0,-591161.3173875981];
[2.0,-2.220446049250313e-16,468.5960133273559,3.0];
new Uint32Array(512);
new Int16Array(3726);
function F18() {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F18();
Math.log2(0);
const v33 = [-2.220446049250313e-16,-2.220446049250313e-16];
const v34 = [v33];
const v35 = [0.3083488057663979,0.3083488057663979];
v35.push(0.3083488057663979);
class C37 {
    constructor(a39, a40) {
        const v41 = this.__lookupGetter__;
        try { new v41(); } catch (e) {}
        const v44 = ~a40[2];
        function f48(a49, a50, a51, a52) {
            a49.length;
            a51++;
            const o58 = {
                n(a56, a57) {
                    return v44;
                },
            };
            return o58;
        }
        const t31 = 95;
        t31(v21, Uint8Array, f48);
        for (let v60 = 0; v60 < 625; v60++) {
            v60 >>> v60;
            f48(Uint8Array);
        }
    }
}
const v64 = new C37(v33, v33);
const v65 = new C37(v34, v35);
const t41 = v65.constructor;
new t41(604.4479109019192, 0.3083488057663979);
const t43 = 255;
new t43(95);
new Int32Array(36);
new Float64Array(256);
function F75(a77, a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 256;
    } catch(e81) {
        [4,57442,16,-1001832273,-1876792745,-9223372036854775808,2147483648,-9875,10000,-256];
        [268435439,-6,-2,-9223372036854775807,-9223372036854775807,-2,255,1073741824,-451215955,500955386];
        [-142824074,7,-254794720];
    }
    try {
        this.h = a79;
    } catch(e89) {
    }
    try {
        this.g = a80;
    } catch(e90) {
    }
}
new F75(256, v64, 255, -1805270378n);
new F75(36, 255, 36, -1024n);
new F75(256, 36, 255, -4096n);
/(x)(x)(x)\3*/gvi;
const v98 = /((?<=a))/gudm;
const v99 = /gk4b*/vmsy;
[v99,v99,v99];
[-6,1e-15,v98];
[-4,2];
let v105;
try {
const t0 = -1.3832922122240728e+307;
v105 = t0(2);
} catch (e) {}
for (let v106 = 0; v106 < 5; v106++) {
    v106 < 1;
    try { v105(v98, v106, v99, v106, -4); } catch (e) {}
    const v111 = Symbol.iterator;
    const o115 = {
        [v111]() {
            const o114 = {
                next() {
                    return v99;
                },
            };
        },
    };
}
