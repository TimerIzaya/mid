const v0 = [];
const v1 = [v0,v0];
const v2 = [v0,v1,v0];
new Int8Array(1392);
const t4 = "NEGATIVE_INFINITY";
t4.toString = -256;
[v1,v2,v1,v1,v2];
new BigInt64Array(1091060517);
const v14 = new Float32Array(-256, -256);
v14.at(-256);
const v16 = v14;
v16[1] = v16;
const v17 = [-333.854019331373,-1000000.0,1e-15,2.0];
const v18 = [-1.0,0.9137601234289481,0.6909817693977112,-369.7247168724365,532431.7755608733,1e-15,1000.0];
const v19 = [-4.0,-646.9946930623084,764.2328553867208,1000000000.0];
const v23 = !(369263011 ^ "grow");
v19["pop"]() <= v23;
new Date(5);
class C32 {
    constructor(a34) {
        typeof arguments;
    }
}
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a41;
    } catch(e43) {
    }
    new Int16Array();
    const v47 = new BigUint64Array();
    let v48 = 0;
    for (let i = 0; i < 5; i++) {
        v47.entries();
        const v50 = v48++;
        v50 + v50;
        v50 ^ v50;
        const v54 = v48 < 5;
        v54 || v54;
    }
    try {
        this.h = v19;
    } catch(e56) {
    }
}
new F39(F39, -16n);
new F39(v17, -666835979n);
new F39(v18, -666835979n);
try { (-12n).getTime(-12n, -816409267); } catch (e) {}
-253026077 % -816409267;
