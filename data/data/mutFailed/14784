const v2 = [];
function f3() {
    try { v2("AaZw", "CD1", v2, "CD1", "AaZw"); } catch (e) {}
    new Float64Array();
    return "CD1";
}
v2.constructor = f3;
v2["concat"]("concat");
const t7 = [-65317,-58155,536870889,976,536870889];
t7[2] = 13;
new WeakSet();
("concat").constructor;
function f20(a21, a22) {
    const o23 = {
    };
    return o23;
}
function F28() {
    if (!new.target) { throw 'must be called with new'; }
}
class C30 {
    constructor(a32, a33, a34) {
        class C36 extends a33.constructor {
        }
        new C36();
    }
}
C30.constructor = f3;
new C30(F28, C30);
class C39 {
    static {
        function f41() {
            function f42(a43, a44) {
                let v49 = 7 & 5;
                Math.expm1(7);
                const v51 = Math.imul(-1000000.0, a43);
                --v49 >>> 7;
                return v51;
            }
            return f42;
        }
        Object.defineProperty(this, "toString", { writable: true, configurable: true, enumerable: true, get: f41 });
        const v54 = this.name;
        this.toString().lastIndexOf(v54);
    }
}
function F57() {
    if (!new.target) { throw 'must be called with new'; }
}
function f61(a62) {
    function f64(a65) {
        try { a62.valueOf(a65, Uint32Array, WeakSet, a65, this); } catch (e) {}
    }
    this.onmessage = f64;
}
const v69 = ["function"];
const o70 = {
    "arguments": v69,
    "type": "function",
};
new Worker(f61, o70);
