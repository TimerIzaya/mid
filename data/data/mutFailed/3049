const v0 = [];
function f1() {
    const o10 = {
        "g": v0,
        ...v0,
        "c": v0,
        [v0]: v0,
        "f": v0,
        toString() {
            function F3(a5) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = v0;
                } catch(e6) {
                }
            }
            const v7 = new F3(this);
            new F3(v7);
            const v9 = new F3(F3);
            return v9;
        },
    };
    return o10;
}
f1();
f1();
const v13 = f1();
const v15 = new WeakSet();
const v19 = /a\bc^(?:ab)|cde(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\106q?/v;
/a?E(?:a+)?7(?<!a)/vdimsy;
const v21 = /27/vs;
class C22 extends WeakSet {
    constructor(a24, a25, a26, a27) {
        super(a25);
        try {
            new f1();
        } catch(e29) {
        }
    }
    static h;
    [v0] = v13;
    e = WeakSet;
    #c = -2147483648;
    214;
    static #b;
    static f = v21;
    set b(a34) {
        try { C22(); } catch (e) {}
    }
    #a;
    static 2 = v0;
    static #g;
    static #h;
    d;
}
const v36 = new C22(-2147483648, v21, -880634351, v21);
new C22(-880634351, -881251668, v36, v19);
new C22(-2147483648, v36, v15, v19);
const v40 = new Set();
v40[Symbol.isConcatSpreadable] = WeakSet;
class C46 {
    [v40];
    static {
    }
}
function f48(a49) {
}
new C46();
