class C3 {
    static set c(a5) {
        function f9(a10, a11) {
            ("DaoN3").startsWith(0, 8);
            return f9;
        }
        f9();
        %OptimizeFunctionOnNextCall(f9);
        let v14 = 0;
        do {
            try { a5(v14, a5, v14, this, v14); } catch (e) {}
            super.c;
            v14++;
        } while (v14 < 2)
    }
    static #e;
    constructor(a21, a22, a23) {
        for (let v24 = 0; v24 < 25; v24++) {
            const o28 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o28);
        }
    }
    static ["function"];
}
C3.c;
const v31 = new C3();
const v32 = v31?.constructor;
try { new v32(); } catch (e) {}
const v34 = v31?.__defineGetter__;
v34.d = v34;
let v35;
try { v35 = new v34("ignoreCase", v31); } catch (e) {}
new C3();
const v37 = new C3();
const v38 = /dGi/gvimy;
let v39;
try { v39 = v38.test(C3); } catch (e) {}
v39 && v39;
/IX\xed\xa0\x80Em/di;
const v42 = /VJ\u{12345}\u{23456}/vdis;
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const o49 = {
        "maxByteLength": 1293466293,
    };
    const v50 = new SharedArrayBuffer(-1, o49);
    function f52(a53, a54, a55, a56) {
        function f58(a59, a60) {
            for (let [i64, i65] = (() => {
                    0 + 0;
                    return [0, 10];
                })();
                i64 < i65;
                i64++) {
            }
            return a60;
        }
        arguments.constructor = f58;
        const t61 = arguments.constructor;
        t61();
        const v74 = new Uint32Array(a56, a56);
        v74[1];
        const v76 = [f52,f52,f52];
        [v76,[v76,v76,v76,v76]];
        Object.defineProperty(v76, "d", { writable: true, configurable: true, enumerable: true, value: Uint32Array });
        return v50;
    }
    const v79 = a45?.constructor;
    function F80(a82, a83, a84, a85) {
        if (!new.target) { throw 'must be called with new'; }
        a85[1][1];
    }
    let v88 = -65535;
    v88--;
    v88 == 0;
    try { new v79(); } catch (e) {}
    a46.unicodeSets = a46;
    try {
        this.g = C3;
    } catch(e93) {
    }
    try {
        this.a = a46;
    } catch(e94) {
    }
    try {
        this.c = a45;
    } catch(e95) {
    }
}
const v96 = new F43(v37, v42);
const v97 = new F43(v38, v31);
new F43(v97, v37);
Date.length;
const o107 = {
    toString(a102, a103) {
        try { this.toString(this, v96); } catch (e) {}
        const v105 = new Date(Date);
        try { v105.getDay(); } catch (e) {}
        return Date;
    },
};
const v108 = o107?.toString;
try { new v108("function", v35); } catch (e) {}
const v110 = o107.toString();
try { v110.now(); } catch (e) {}
