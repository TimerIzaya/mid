const v1 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
const v2 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
function f3(a4) {
    const v7 = [3.0,3.0];
    class C8 {
        constructor(a10) {
            const v11 = this.constructor;
            try { new v11(v7); } catch (e) {}
            function f13(a14, a15) {
                let v16 = a14[5];
                v16++;
                return v11;
            }
            f13(1);
            f13(a10);
        }
    }
    return v1;
}
v2.toString = f3;
class C20 {
    constructor(a22, a23) {
        super[v2] = v1;
    }
}
const v24 = new C20(v1, v2);
[v24];
Int8Array[Symbol.iterator] = f3;
new Int8Array(3772);
try { Uint32Array.bind(3772); } catch (e) {}
new Uint32Array(1024);
Int8Array[0] = v2;
new Int8Array(6);
function f37(a38, a39) {
    function f40(a41) {
        return arguments;
    }
    const v43 = f40(f37, a38, a38, a39);
    const o44 = {
        ...v43,
    };
    return o44;
}
const v45 = [-1e-15,867356.4739121424];
try { v45.fill(6); } catch (e) {}
[-152.63948351258148];
[3.0136886979777675e+306,-0.0,-1.3423217198244545e+308];
let v49 = 3;
v49--;
try { new Int8Array(Int8Array, Int8Array, v45); } catch (e) {}
new Int8Array(v49);
Uint8ClampedArray.prototype = Uint8ClampedArray;
new Uint8ClampedArray(134);
new BigUint64Array(1);
function f60(a61, a62, a63, a64) {
    a61 & a61;
    a64 + a64;
    class C68 extends Date {
    }
    try { new C68(); } catch (e) {}
    const v70 = new C68();
    v70.getDay();
    return f60;
}
f60.prototype;
for (let v73 = 0; v73 < 10; v73++) {
    -v73;
    f60(v73, v73, v73, v73);
}
%OptimizeFunctionOnNextCall(f60);
f60();
