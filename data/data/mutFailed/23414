const v0 = [35519,257,1513338611,21584];
[127,2147483649,41522,65536];
const v2 = [65536,48320,-1147445081,7,152083216,-628323879];
v0.e = Uint8Array;
const v4 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const v9 = new Uint32Array(2128);
const o10 = {
    [-9007199254740991]: 512,
    [v9]: v4,
};
WeakSet.prototype = WeakSet;
const v12 = new WeakSet();
function F13(a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a15;
    } catch(e16) {
    }
    try {
        this.d = v0;
    } catch(e17) {
    }
}
const v18 = new F13(v2);
const v19 = new F13(v2);
const v20 = new F13(v0);
function f21() {
    function f22() {
        return f22;
    }
    const v23 = f22.arguments;
    for (let v24 = 0; v24 < 5; v24++) {
        Array(36862, v23, v24 & v24).reverse();
    }
    function f30() {
        v12.length;
        var h = F13;
        return v19;
    }
    [Int8Array];
    class C34 {
        static {
            const t42 = this.__proto__;
            t42();
        }
    }
    return f30;
}
function f38(a39) {
    typeof a39 === "boolean";
}
Object.defineProperty(v20, "constructor", { configurable: true, get: v9, set: f38 });
const v43 = v20?.constructor;
try { new v43(v19); } catch (e) {}
class C45 {
    #f = v18;
    static #h;
    c = v18;
    #toString(a47, a48, a49) {
        let v52 = -268435456;
        const v53 = v52++;
        WeakSet - v18;
        const v55 = 1 || 1;
        const v56 = 1 && v53;
        Math.atan2(v2, F13);
        v55 / 1;
        v56 >>> 1;
        return v20;
    }
}
new C45();
new C45();
const v63 = -4294967297n ^ -4294967297n;
const o70 = {
    [-4294967297n](a65, a66, a67, a68) {
        super[v63];
    },
};
new C45();
function f72() {
    return f72;
}
try { f72(); } catch (e) {}
function f74() {
    Uint8Array.prototype = Uint8Array;
    function f78(a79, a80) {
        try { a79(f78); } catch (e) {}
        let v82;
        try { v82 = a79(BigInt64Array); } catch (e) {}
        v82.constructor(a80);
        return f78;
    }
    const v85 = new Promise(f78, Uint8Array);
    function f86(a87, a88) {
        const o89 = {
        };
        o89.g = o89;
        return o89;
    }
    try { f86(v85, v85); } catch (e) {}
    f86();
    Object.defineProperty(arguments, 13, { enumerable: true, set: f72 });
    for (let v92 = 0; v92 < 5; v92++) {
        function f93() {
            let v95 = ("Vre").codePointAt(v92);
            const v97 = v95 * v95--;
            const v98 = v97 / v97;
            return v98 ^ v98;
        }
        f93();
        %OptimizeFunctionOnNextCall(f93);
    }
    return arguments;
}
f74();
