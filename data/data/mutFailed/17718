function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    a5 + a5;
    this.b = 1073741825;
    try {
        this.b = a5;
    } catch(e7) {
    }
}
try { new F3(F3); } catch (e) {}
const v9 = new F3(1073741825);
const v10 = new F3(1963110044);
const v11 = new F3(-65535);
const v12 = [1963110044];
const v13 = [1963110044,v12,-65535,v10];
[v13,F3,v13,v12,1073741825];
const v15 = [F3,1963110044,-65535];
const v16 = v15?.groupToMap;
try { new v16(v15); } catch (e) {}
const v18 = [F3];
[1073741825,v9,v15];
const t19 = 1073741825;
const v21 = new t19();
try { v21.delete(v11); } catch (e) {}
const v23 = [];
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.__lookupSetter__;
    try { new v26(v12); } catch (e) {}
    this.d = this;
    this[5] = this;
    const v28 = [-1066,-128,65535,256];
    v28[1] = v28;
    [-177371250,-8,-9223372036854775807];
    const v31 = ([2147483647,9,-3931,6,268435440,-65535,-25005,-860022410,6,268435441])?.filter;
    try { new v31(v28); } catch (e) {}
    [0,937453483,-3,-13,10000,-2147483649,823557449];
    [4294967297,129];
    [268435439,65537,256,-271940851];
    this.d = v23;
}
try { F24.toString(); } catch (e) {}
new F24();
const v38 = new F24();
const v39 = new F24();
v39[5];
2.0 != 2.0;
v10 >>> (v23 >>> 2.0);
const v46 = 5.0 >>> 5.0;
let v47 = 65536n;
~(v47--);
~(-2147483649n / -2147483649n);
let v53 = 536870888n;
v53 ^ v53;
v53++;
const v56 = [-3.5650322397951273,1000.0,0.802460520523592,5.641883312396217e+306];
const v57 = [431.4791340196293,-3.0,125159.99825031101,21.6056810036589,1.6160148855763925e+308,1.7462069791264565e+308,5.0,1e-15,-1000.0];
v57[2] = v57;
try { v57.toString(); } catch (e) {}
const v59 = [-1.238631182886351e+308,1.9411414401127767e+306,5.0,-276.83656814954304,830049.9402099303,-4.0901138213923866e+307,-5.0,300.38437393340564];
let v60;
try { v60 = v59.lastIndexOf(v56); } catch (e) {}
v60 >>> v60;
class C62 {
}
try { C62.constructor(v18); } catch (e) {}
const v64 = C62.__lookupGetter__;
const v65 = v64?.constructor;
try { new v65(5.0); } catch (e) {}
try { v64(v38); } catch (e) {}
const v68 = new C62();
v68.isPrototypeOf(v46);
