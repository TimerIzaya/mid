const v0 = [];
class C1 {
    [v0] = v0;
    constructor() {
        const v3 = super[v0];
        const v5 = v0["copyWithin"](...v0, ..."copyWithin", v3, v3);
        try { v5.toString(); } catch (e) {}
        super[this] = v3;
        try {
            const v7 = [v3,"copyWithin",this,v5,v0];
            -16n ^ -16n;
            ("copyWithin").concat(v7, -16n, v0, v3);
        } catch(e11) {
        }
    }
}
const v12 = new C1();
const v13 = new C1();
const v14 = new C1();
class C15 extends C1 {
    #f;
    static h = v12;
    b = v0;
    static e;
    static g;
    static a;
    #d;
    #a;
    [C1] = v0;
    static [v0] = v0;
}
new C15();
const v17 = new C15();
new C15();
try { new BigInt64Array(v13, v13, C1); } catch (e) {}
const v22 = new BigInt64Array(3);
v22.e = v22;
3 | 3;
try { new Uint8ClampedArray(3, 3, v14); } catch (e) {}
const v27 = new Uint8ClampedArray(3);
v27[2] = v27;
BigUint64Array.length;
const v31 = new BigUint64Array(3159);
v31[1567];
-4096 & -4096;
class C38 {
    static 7;
    static [-1] = "string";
    #n(a40) {
        a40 = this;
        a40.e >>>= -35417;
        const o44 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o44);
        return this;
    }
}
try { new C38(); } catch (e) {}
const v47 = new C38();
const v48 = v47?.toLocaleString;
try { new v48(); } catch (e) {}
Array();
const v54 = Array();
class C56 {
    static 9 = 9.187362692894364;
}
for (const v57 in C56) {
}
class C58 {
    #e;
    static {
        function f60(a61, a62) {
            return a61;
        }
        const o68 = {
            o(a64) {
                const o66 = {
                };
                return gc(o66);
            },
        };
        const v69 = o68?.__defineGetter__;
        try { new v69(this, v17); } catch (e) {}
        const o72 = {
        };
        const v74 = new Proxy(Uint32Array, o72);
        try { new v74(v74, o72, o72); } catch (e) {}
        o68["o"](o68, Uint32Array, "o", "o", v74);
        const v78 = super[this];
        try { v78.join(-4096, -4096, v78); } catch (e) {}
        const o80 = {
        };
        const v81 = /LD/vds;
        v81.dotAll = v81;
        ~1000.0;
        [v81,1000.0];
    }
    static f;
    m(a86, a87) {
        const o88 = {
        };
        const o91 = {
        };
        const v93 = new Proxy(Uint8Array, o91);
        v93.d = v93;
        new Proxy(this, o88);
        class C99 {
        }
        function f100() {
            let v101 = 1000000000000.0;
            v101--;
            class C104 {
            }
            new C104();
            const v106 = new C104();
            [C99,C104];
            [257828.6336153492,v106];
            [v106];
            class C110 extends C38 {
            }
            function f111(a112, a113) {
                return -4096;
            }
            Set.toString = f111;
            Set.constructor(Set);
            v54.constructor;
        }
        const v117 = "string" && -4096;
        +a87;
        Math.sqrt(v117);
        a86--;
        -509886178 << -509886178;
        return this;
    }
}
const v122 = new C38();
const v123 = v122?.constructor;
try { new v123(); } catch (e) {}
new C58();
const v126 = new C58();
const v127 = v126?.constructor;
try { new v127(); } catch (e) {}
try { new WeakSet(); } catch (e) {}
const v136 = new WeakSet();
const v137 = v136.constructor;
try { v137.call(Uint8ClampedArray); } catch (e) {}
class C139 extends v137 {
}
const v142 = new Uint16Array(512);
v142[319];
class C145 {
}
try { C145.apply(-7, 268435456n); } catch (e) {}
function F147(a149, a150) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(v142);
