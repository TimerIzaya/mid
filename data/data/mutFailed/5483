new Uint16Array(3341, 3341);
new Float64Array(257);
new Float64Array(99);
function f12() {
}
class C13 {
    o(a15, a16) {
        for (const v18 of "bigint") {
        }
        f12();
    }
}
new C13();
const v21 = new C13();
/(x)(x)(x)\1/uis;
[f12,[f12],C13];
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    const o30 = {
    };
}
const o31 = {
};
new Float32Array(260330366);
const v34 = new F27();
new Float64Array();
function f39(a40, a41, a42) {
    function f44(a45) {
        return a40;
    }
    a41 > v21;
    f44 && a40;
    return v21;
}
Worker(f39);
const v51 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
[NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
class C53 {
}
new C53(v51, 659.0540372978887);
class C56 {
    #valueOf(a58, a59) {
        return a59;
    }
    #b = 6;
}
const v60 = new C56();
const v61 = new C56();
const v62 = [v60];
function f63(a64, a65, a66) {
    v62.copyWithin();
    new Int32Array([Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849]);
    ([1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164]).concat();
    try {
        function f75() {
            0 < 10;
            for (let v81 = 0; v81 < 5; v81++) {
            }
            return v61;
        }
        %PrepareFunctionForOptimization(f75);
        [];
        f63(252859902);
    } catch(e84) {
    }
    return -(v34 >> 252859902);
}
("valueOf").localeCompare();
new Float32Array();
