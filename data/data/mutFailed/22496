[11911,-12,536870912,-1908304355,1578089979,10];
const v1 = [-12,11,-7,28125,15,9108,1095840941,127];
[16,-2,-10,-2,10000,9007199254740990,1073741825];
new Uint8Array(2114);
new Uint8ClampedArray(109);
new Int8Array(9);
function f18() {
}
const v19 = [601759695];
const v20 = [1073741824,1073741823,1376142744,1073741825];
function f22(a23, a24, a25, a26) {
    function f28() {
        return a23;
    }
    a26();
    new Int8Array();
    function f32(a33, a34) {
        const o36 = {
            get d() {
            },
        };
        return 522675525n;
    }
    const v39 = f32(f32()).buffer;
    new v1();
    let v42 = 1000000000000.0;
    v42--;
    v39.slice(2147483648);
    %OptimizeFunctionOnNextCall(f28);
    let v46;
    try { v46 = v20["find"](..."find", a26, ...v19, ...v20, ...522675525n); } catch (e) {}
    Symbol();
    new Uint8ClampedArray();
    const o51 = {
        ...-268435456,
    };
    v46 <= a25;
    return arguments;
}
for (let v53 = 0; v53 < 10; v53++) {
    f22(v53, v53, f22, v20);
}
%OptimizeFunctionOnNextCall(f22);
f22();
