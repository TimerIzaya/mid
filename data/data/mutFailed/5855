let v1 = Int16Array;
function f2(a3) {
    const v4 = a3.__proto__;
    v1 %= v4;
    return v4;
}
Object.defineProperty(v1, "toString", { configurable: true, value: f2 });
new v1(6);
const v8 = new BigInt64Array(2104);
new Float32Array(128);
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v8;
        const v17 = [1073741824,1073741823,1376142744,1073741825];
        function f18(a19, a20, a21, a22) {
            arguments.g = a14;
            for (let v24 = 0; v24 < 5; v24++) {
                try {
                    arguments.g = v24;
                } catch(e25) {
                }
            }
            function f26() {
                return a19;
            }
            const v28 = new Int8Array();
            class C29 {
            }
            function f30(a31, a32) {
            }
            f30();
            v28.buffer;
            try { v17["find"](); } catch (e) {}
            const o39 = {
                valueOf() {
                },
                get d() {
                },
            };
        }
        for (let v40 = 0; v40 < 5; v40++) {
            f18();
        }
    } catch(e42) {
    }
    try {
        this.h = a15;
    } catch(e43) {
    }
}
new F12(2104, 128, 128);
const v45 = new F12(2104, 128, 2104);
const v47 = new Map();
v47 >>> v47;
const v50 = new Float64Array(Float64Array);
for (const v51 in v50) {
}
new F12(6, 6, 128);
new Int16Array(1000);
Int16Array[Symbol.toPrimitive] = f2;
new Int16Array(4096);
v45[128] = BigUint64Array;
const v66 = new Uint32Array(3);
class C67 {
    constructor(a69, a70, a71, a72) {
        for (let v73 = 0; v73 < 5; v73++) {
            v66[v73] = a72;
        }
    }
}
new C67();
new Int16Array(13);
const v76 = [-65536,-432658450,256];
const v77 = /[.ma\Sc]/vdimsy;
function f79(a80) {
    try { a80["toUpperCase"](v50, "toUpperCase"); } catch (e) {}
    return v8;
}
Int16Array.toString = f79;
v77.exec(Int16Array);
class C84 {
    toString(a86, a87, a88) {
    }
}
new Float64Array(v76);
function f93(a94, a95) {
    const o96 = {
        [a94]: a95,
        [a95]: -65537,
        65536: -65537,
    };
    return -65537;
}
f93(9223372036854775807, -65537);
