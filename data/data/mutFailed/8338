function f0() {
    const o17 = {
        [0.04164549690094366](a5, a6) {
            class C7 {
                static #e = -0.7129939460289769;
                static #c;
                constructor(a9, a10, a11) {
                    try {
                        a10.#a;
                    } catch(e13) {
                    }
                }
            }
            new C7();
            new C7();
            const v16 = new C7();
            return v16;
        },
        __proto__: "boolean",
    };
    return o17;
}
f0();
const v19 = f0();
f0();
class C21 extends f0 {
    p(a23) {
        super.e = a23;
        try {
            const v25 = [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
            const v27 = [-2,-2,-2,-2,-2];
            const v28 = [v25,-2];
            -4096;
            const v33 = new BigInt64Array(3);
            try { Float32Array.from(v33); } catch (e) {}
            v25.concat(v27, v28, true);
            v19.fuck(true, -2147483648);
        } catch(e40) {
        }
        return this;
    }
    #c;
}
new C21();
new C21();
new C21();
const v45 = new BigUint64Array();
try { v45.fill(); } catch (e) {}
[8n];
function f53(a54) {
    return f53;
}
class C55 extends f53 {
}
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
}
const v62 = new F56(164140152, F56, 164140152, 164140152);
for (let v64 = 0; v64 < 5; v64++) {
    function f65() {
        const v68 = ("Vre").strike().link();
        v68.includes(164140152);
        const v71 = Array();
        v71[3] = 65535;
        class C73 extends Date {
        }
        new C73();
        function F75(a77, a78) {
            if (!new.target) { throw 'must be called with new'; }
        }
        v71.unshift(v62, v64, F56, v64, v71.pop());
        const v82 = new Set();
        v82.add().entries();
        class C85 {
        }
        const v86 = new C85();
        v86.hasOwnProperty(v68);
    }
    f65();
    %OptimizeFunctionOnNextCall(f65);
}
