class C6 {
    7 = "boolean";
    get f() {
        const o10 = {
            "maxByteLength": -1806283680,
        };
        const v12 = new ArrayBuffer("boolean", o10);
        new DataView(v12);
        return v12;
    }
}
class C15 {
}
new C15();
const o17 = {
    __proto__: C15,
};
const v18 = new C6();
const v19 = new C6();
const v20 = new C6();
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = o17;
    try {
        this.f = a26;
    } catch(e27) {
    }
    try {
        a24.e = C6;
    } catch(e28) {
    }
    try {
        this.a = C6;
        new Int8Array(7);
        ([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(-1073741824, -27205);
    } catch(e36) {
    }
}
const v37 = new F21(-13, v18, v20, "-1070811373");
new F21(2, v20, v19, "-1070811373");
new F21(2, v20, v37, "-1070811373");
const v41 = new C15();
const v44 = new Uint32Array(-1806283680);
for (const v45 in v44) {
    104 in v41;
    typeof Uint8Array;
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v4 = [[-560.0308879674441,-560.0308879674441]];
    try {
        v4[v4] = v4;
    } catch(e5) {
    }
    try {
        this.a = -2177;
    } catch(e7) {
    }
    try {
        this.b = -2177;
    } catch(e8) {
    }
    try {
        class C9 {
            constructor(a11) {
                this.fuck(true);
            }
        }
        this.g = -2177;
    } catch(e15) {
    }
}
const v16 = new F0();
const v17 = new F0();
new F0();
const v21 = new Uint32Array(144);
new Uint16Array(35);
function f26(a27, a28, a29, a30) {
    try {
        v16.toString = 3;
    } catch(e31) {
        function f33() {
            return "next";
        }
        let v35 = 0;
        do {
            Object.defineProperty(v17, 8, { writable: true, get: f33 });
            v35++;
        } while (v35 < 4)
        [9007199254740992n,f33];
    }
    return a29;
}
f26(144, 35, v16, v17);
new Uint16Array(3);
const v43 = /(?<a>.)\k<a>/vyd;
function f44() {
    const v45 = [4.0];
    const v46 = [5.0,-1.3133021192985452e+308,-5.255877635093345,-1.1220589919386441e+308];
    const t52 = v45[v46];
    t52.e &&= 35;
    v45[4] += 144;
    try {
        f26(-3.0, -7, -3.0, v46);
    } catch(e51) {
    }
    let v53 = -7.126405354429849e+307;
    const o56 = {
        toString(a55) {
            v53 **= 2.0;
            return 2.0;
        },
    };
    return f44;
}
const v58 = new Float64Array(v43);
for (const v59 in v43) {
}
function f60(a61, a62, a63) {
    return a63;
}
new f44(2.404273109449802, f44(v21), ...v58, f60);
