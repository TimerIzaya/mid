new Date();
function f2() {
    return Date;
}
const v5 = new Float64Array(2);
const v8 = new Uint8ClampedArray(11);
new Int16Array(19);
function f15() {
}
new Int8Array();
const v21 = new Float32Array(1000);
new v8(58);
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v29 = Array(19793);
        for (const v30 of 19793) {
            const v34 = +-1000.0;
            [v34,-1.7976931348623157e+308,-1.387656788001198e+307];
            [v34,v30,v5];
            [this,Array,v29];
            Math.tanh(-1000.0);
            function f41() {
                let v42 = 946.0676210033328;
                v42++;
                const o44 = {
                    __proto__: v42,
                };
                return Float64Array;
            }
            f41();
            %OptimizeFunctionOnNextCall(11);
        }
        const v46 = [v29,v29,v29];
        new BigUint64Array();
        const v50 = [];
        for (let v51 = 0; v51 < 50; v51++) {
        }
        v50[65536] %= 256;
        [v46,v46,v46];
        [] >= Uint16Array;
    } catch(e56) {
    }
}
delete v8[8];
Reflect.construct(Uint8Array, [v21,19,1000], f2);
v8.byteOffset += -1000.0;
new F25();
new F25();
