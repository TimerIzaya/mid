const v0 = /[^\p{Changes_When_NFKC_Casefolded}(\P{sc=Greek}ab|c?)]/gudms;
const v1 = /[](R)/gudisy;
const v2 = /(M)/gvdimy;
function f3(a4, a5) {
    a4.unicode = a4;
    const o27 = {
        set d(a7) {
            v1 ^ a7;
            super.a = a4;
            v0[a4];
            const v10 = v2;
            for (let v11 = 0; v11 < 32; v11++) {
                a7["p" + v11] = v11;
                async function* f14(a15, a16) {
                    return f14;
                }
                function f17(a18, a19, a20, a21) {
                    return f17;
                }
            }
            function f22() {
                new ArrayBuffer(ArrayBuffer, ArrayBuffer);
                return f22;
            }
        },
        [v2]: a5,
        __proto__: v2,
        "e": f3,
        ...v2,
        519: a4,
        o(a26) {
            return a26;
        },
        /*
        __proto__: v2,
        */
        ...v1,
        "c": f3,
        "a": v0,
    };
    return o27;
}
f3(v0, v0);
function f32(a33) {
    for (let v34 = 0; v34 < 5; v34++) {
    }
    return a33;
}
Uint32Array[Symbol.iterator] = f32;
const v37 = new Uint32Array(Uint32Array, Uint32Array);
v37[0.29489550717955537];
new BigUint64Array(10);
const v44 = v0 || -1392880535;
v44.multiline = v44;
const v45 = v0 / -1392880535;
v45 >>> v45;
5.9219403601461025 ** -1392880535;
Math.fround(v0);
let v49 = v0 / -1392880535;
v49--;
f3(v1, v0);
const v52 = f3(v1, v0);
v52[519] = v52;
try {
    Reflect.ownKeys();
} catch(e56) {
}
new Uint8ClampedArray(255);
new Int32Array(4096);
new Int8Array(1122);
function F65(a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    arguments.e = a67;
    return arguments;
}
try { new F65(v2, v2, v2); } catch (e) {}
const v73 = new F65();
function f74() {
    return Reflect;
}
function f75(a76) {
    new BigInt64Array();
}
Object.defineProperty(v73, "e", { configurable: true, enumerable: true, get: f74, set: f75 });
v73.f = v73;
v73.e = Uint8ClampedArray;
v73.e = v73;
