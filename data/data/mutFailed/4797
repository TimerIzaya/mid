function f0() {
    const o20 = {
        "e": "imul",
        "type": "o",
        __proto__: "1073741824",
        ["imul"](a5, a6, a7, a8) {
            "imul" < a5;
        },
        "b": "imul",
        "g": "imul",
        "f": "o",
        n(a11) {
            Math.log2(a11);
            const v16 = -4294967297;
            Math.acosh(8);
            v16 >>> 8;
            return Math.tanh(8);
        },
    };
    return o20;
}
const v21 = f0();
f0();
f0();
[9.016773639808676,1.0,0.0];
[-2.0,-4.0];
[0.20758780292068246,-1.1847234102273576e+308,5.0,1000000000000.0,-7.333131137124944,-5.0];
new Float64Array(110);
new Float64Array(1700);
new Uint8Array(655);
const v39 = Float32Array.length;
class C41 {
}
const v42 = new C41();
const o43 = {
};
class C44 {
    constructor(a46) {
        const v47 = this.constructor;
        try { new v47(); } catch (e) {}
        const v50 = new Float32Array();
        v50.entries();
    }
}
function f52() {
    Symbol.toPrimitive.description.codePointAt(C44);
    return Symbol;
}
f52();
%OptimizeFunctionOnNextCall(f52);
class C58 {
    static g = v42;
    static {
        delete v21.g;
    }
    constructor(a62, a63, a64, a65) {
        super();
        function f66(a67, a68, a69) {
            function f71(a72) {
                a68[5] ||= a62;
            }
            this.onmessage = f71;
            const v75 = new SharedArrayBuffer(35);
            new BigUint64Array(v75);
        }
        const v79 = [1,40880,1,-65535,3109,268435456,0,-47552,1073741823];
        function f80() {
            class C81 {
            }
            const v82 = new C81();
            const v83 = [v82,v82,v82,v82,v82];
            const v84 = [f80,f80];
            class C85 extends C81 {
                [v82];
            }
            const v86 = new C85();
            v84.constructor;
            try { v86.m(v83); } catch (e) {}
            return f80;
        }
        const v90 = new BigUint64Array();
        try { v79.map(v90); } catch (e) {}
        const v92 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
        function F93() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const v97 = Array(19793);
                for (const v98 of v97) {
                    function f99() {
                        return f99;
                    }
                    const v100 = /{}(x)(x)(x)\4*a{0}a|b/msy;
                    const v102 = new BigUint64Array();
                    function F103(a105, a106, a107) {
                        if (!new.target) { throw 'must be called with new'; }
                        const v108 = this.constructor;
                        try { new v108(BigUint64Array, v102, v102); } catch (e) {}
                        a107[1];
                        function f112(a113, a114) {
                            a114 / a114;
                            arguments[1];
                            arguments.toString = a113;
                        }
                        try { f112(f99, v100); } catch (e) {}
                        f112(v108, 8077n);
                    }
                }
                [v97,v97,v97];
                [[]] >= Uint16Array;
            } catch(e125) {
                [];
                v92.findLastIndex;
            }
        }
        const v130 = [Array,Array];
        class C131 {
            #e;
            static 3;
        }
        function f132() {
            const o136 = {
                m(a135) {
                    return this;
                },
                __proto__: 946.0676210033328,
            };
            return 946.0676210033328;
        }
        const v139 = -(-7);
        Math.tan(v139 ** v139);
        Reflect.apply(Array.of, v130, v92);
        const v145 = [110,"function",this];
        const o146 = {
            "arguments": v145,
            "type": "function",
        };
        new Worker(f66, o146);
    }
}
try { C58.bind(v42); } catch (e) {}
const v152 = Symbol("bZ");
[Float32Array];
function f155() {
}
[f155,v39];
[v39,f155];
try { ("5").split(1700, v152); } catch (e) {}
const v166 = new Array(228);
class C167 {
    static {
        function F169(a171, a172) {
            if (!new.target) { throw 'must be called with new'; }
            const v173 = this?.constructor;
            try { new v173(v173, v39); } catch (e) {}
        }
        new F169(v166, this);
        new F169(Array, F169);
    }
}
try {
} catch(e177) {
}
let v178 = 0;
do {
    v178++;
} while (v178 < 9)
