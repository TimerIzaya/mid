[-789.4029752130427,0.0,1.5860482838063103e+308];
[-1000000000000.0,-1.6023671870362022e+308,3.612724278583076e+307,-8.572552822954835,377868.06762097357,0.35752124726168266];
[-1000000.0,-196222.97204934375,1.7976931348623157e+308,1000.0];
[2.220446049250313e-16,1000000000.0,0.26463766865744276,-1.0,-49941.50618894317,-7.068571761785226e+307,2.220446049250313e-16,-1.4116174346816625e+308];
[-1.7976931348623157e+308,1.0,2.2250738585072014e-308,1.4838203978070273e+307,-101579.79476956953,1000000.0];
[-325.9621121871836,1000000000000.0,2.0,5.837282765645966,-1.7976931348623157e+308,-5.0];
new Uint8Array(Uint8Array);
new Uint32Array(9);
new Uint8ClampedArray(4);
const t9 = 4;
const v20 = new t9(Int32Array, Int32Array, Int32Array);
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
}
const v25 = new F21(Int32Array, v20);
function f26(a27) {
    let v28;
    try { v28 = v25.resize(v20, F21, Int32Array, a27); } catch (e) {}
    v20.length |= v28;
    return v28;
}
%PrepareFunctionForOptimization(f26);
f26();
%OptimizeFunctionOnNextCall(f26);
f26();
