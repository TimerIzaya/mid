class C3 {
    get g() {
        class C6 extends this.constructor {
            static #g;
            #f;
        }
        new C6();
        return -4;
    }
    [-4];
    static f;
    #e;
    set e(a9) {
        Math.fround();
        Math.ceil();
    }
}
C3.name = C3;
new C3();
const v14 = new C3();
let v16;
try { v16 = v14["toString"](); } catch (e) {}
Reflect.construct(C3, [], v16);
const v20 = new C3();
1155658358 >> 1155658358;
function f25() {
    return C3;
}
f25.h = f25;
class C26 {
    #d = v14;
    set c(a28) {
        new BigInt64Array(548);
        try {
            super.valueOf(0.6619114152749827, C3, 548);
        } catch(e34) {
        }
        this << 518142756;
        new Int16Array(255);
        new BigInt64Array(127);
    }
}
v14[10];
try {
    C26.fuck(0.6619114152749827, /of/gv);
} catch(e44) {
}
const v45 = new C26();
const v46 = v45?.constructor;
try { new v46(); } catch (e) {}
new C26();
const v49 = new C26();
v49.c;
const v52 = [2.220446049250313e-16,4.688311165693396,-4.0];
const v53 = v52?.find;
try { new v53(v20); } catch (e) {}
const v55 = [12];
const v56 = v55.constructor;
try { new v56(v49); } catch (e) {}
new WeakSet();
Object.defineProperty("f", 65535, { configurable: true, get: f25, set: f25 });
0.6619114152749827 != 518142756;
C3.name += 0.6619114152749827;
const v63 = Math.atan(1155658358);
class C64 {
}
const v65 = v63 >>> v63;
v65 >>> v65;
const v68 = Symbol.isConcatSpreadable;
const v69 = Array(v52, 12, v56);
Object.defineProperty(v69, 83, { configurable: true, enumerable: true, value: v55 });
v69[267] = v68;
const v71 = v69["concat"]();
try { v71.every(v49); } catch (e) {}
