function f0() {
}
const v5 = new Int8Array(242);
try { Int16Array.apply(128, v5); } catch (e) {}
/7^xxx$+/gvdms;
function f9() {
    const o17 = {
        ...1.7976931348623157e+308,
        [-2]: 1.7976931348623157e+308,
        __proto__: 256,
        [1.7976931348623157e+308](a13) {
            0 < 10;
        },
    };
    return o17;
}
const v18 = f9();
class C19 extends f9 {
    3164398692 = v18;
    10000 = f9;
}
const v20 = /{,}(?:ab)+{+/g;
const v23 = new Uint32Array(3);
class C24 {
    constructor(a26, a27, a28, a29) {
        try { a28(); } catch (e) {}
        for (let i32 = 0; i32 < 9; i32++) {
            v23[i32] = a29;
        }
    }
    c;
}
/a*?(x)(x)(x)\1/gdis;
[/J/vds,[f0,[f0,/a(?!bbb|bb)c/vims,/[\cj\cJ\ci\cI\ck\cK]/uimy]],v20];
("stack").trimStart().length;
const v51 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v52 = [601759695];
const v53 = [1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    function f61() {
        const o78 = {
            "c": -4294967297n,
            [522675525n](a66, a67) {
            },
            "c": v52,
            valueOf(a69, a70) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v51,
            ...v52,
            "type": "Vre",
            ..."Vre",
            valueOf(a72, a73) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a75, a76, a77) {
                return a56;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f61();
    const v81 = new Int8Array();
    v81.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f61);
    let v86;
    try { v86 = v53["find"](..."find", a59, ...v52, ...v53, ...522675525n); } catch (e) {}
    v86 <= a58;
    return arguments;
}
function f89(a90) {
}
const v93 = new Int16Array(2183);
async function f94(a95, a96, a97) {
    let [v98,v99,...v100] = v93;
    const v101 = await v99;
    v101 | v101;
    return v98;
}
f94();
const v105 = -425087802 >>> -425087802;
new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
const o111 = {
    get g() {
        return this;
    },
    set g(a110) {
    },
};
class C113 extends Array {
}
const v114 = new C113();
try { v114.group(v105); } catch (e) {}
