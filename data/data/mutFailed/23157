let v1 = 3768n;
let v3 = -4096;
let v4 = v3--;
let v7 = [2147483647,-7,9n,-7,2147483647];
const v10 = Math.min(1024);
let v11 = v1 + v1;
v1--;
const v13 = v7[1];
const v14 = [9n];
const v15 = [v1];
[-3.0,874.0987878761755,288.2642160994669,5.940585883281705e+307,1.7976931348623157e+308];
try { v13(10000, -16, v3, 2147483647, v15); } catch (e) {}
[v4,v11,v11,...v7] = v14;
const v21 = [5.0,-186169.40466921858,5.457445879511874e+307,-899.3540543254009,NaN,2.220446049250313e-16,8.874813344330924,1000000000000.0,-5.0];
v21.__proto__;
delete v10?.e;
new Float64Array(4096);
new Uint8ClampedArray(127);
new BigUint64Array(6);
const v36 = v21?.values;
let v37;
try { v37 = new v36(); } catch (e) {}
[2.0,-1.0,4.9667272354322005,2.0];
function f39() {
    for (let v40 = 0; v40 < 5; v40++) {
        const v41 = v40 & f39;
        v41 - v41;
    }
    return f39;
}
%PrepareFunctionForOptimization(f39);
f39();
%OptimizeFunctionOnNextCall(f39);
f39();
try { new v37(); } catch (e) {}
v4 >> v15;
try {
    const o47 = {
    };
    new BigUint64Array(o47);
} catch(e49) {
}
