const v2 = [-4294967296];
function f3() {
    return Math.round(f3);
}
%OptimizeFunctionOnNextCall(f3);
65537 < 4096n;
let v14 = -6;
const v15 = [NaN,52.65298068517177,-4.0];
try { v15.group(0.94273883766791); } catch (e) {}
("includes")[3];
v15["includes"](v14, -9223372036854775807);
class C22 {
    static {
        try { new this(); } catch (e) {}
    }
    constructor(a26, a27) {
        this[65537] = a27;
        const v28 = this.constructor;
        try { new v28(v28); } catch (e) {}
        this[65537] >>>= v14;
        let v30 = 0;
        while (v30 < 1) {
            const v35 = v14--;
            Math.atan();
            v14 * 7;
            Math.floor();
            const v39 = v35 + 7;
            v39 * v39;
            const v41 = v30++;
            v41 - v41;
        }
    }
}
268435439 & 268435439;
function f45() {
    class C47 {
    }
    const v48 = new C47();
    v48[3.4890473589784586e+307] = 268435439;
    const o68 = {
        "call": f45,
        [4096n](a50, a51, a52, a53) {
            eval();
        },
        valueOf(a57, a58, a59) {
            function f60(a61) {
                for (let v64 = 0; v64 < 100; v64++) {
                }
                return this;
            }
            Worker(f60);
            return Worker;
        },
    };
    class C69 extends C47 {
        #a;
    }
    for (let i = 0; i < 5; i++) {
        new Date();
    }
    return 268435439;
}
const o78 = {
    get c() {
        return this;
    },
    "d": Array,
    __proto__: 65537,
    ["string"](a75, a76) {
        super[f45];
    },
};
function F79() {
    if (!new.target) { throw 'must be called with new'; }
    function f81() {
        const o82 = {
        };
        return o82;
    }
    const v83 = f81();
    const v84 = f81();
    ([Uint8Array])["indexOf"](v83, v84);
    const v89 = this.constructor;
    try { new v89(); } catch (e) {}
}
const v91 = new Array(1024);
try { v91.forEach(4096n); } catch (e) {}
const v94 = -472334998 * -472334998;
-4294967296 >>> -4294967296;
("entries").toUpperCase();
Math.cos(-1073741824);
Uint8ClampedArray.length;
function f106(a107, a108) {
    try { a107.apply(v15, -1024); } catch (e) {}
    class C110 {
        constructor(a112, a113) {
            const o115 = {
            };
            o115.e = o115;
            gc(o115);
        }
        /*
        constructor(a118, a119) {
            function f120(a121) {
                Math.acos(1);
                1000000000.0 >> 1000000000.0;
                function f128(a129) {
                    return a129;
                }
                this.onmessage = f128;
            }
            const o132 = {
                "type": "function",
            };
            new Worker(f120, o132);
        }
        */
    }
    try { C110.apply(C110, -9223372036854775807); } catch (e) {}
    for (let v135 = 0; v135 < 50; v135++) {
        new C110();
    }
    return a107;
}
new Promise(f106);
const v139 = new Uint8ClampedArray(5);
v139.toString = f3;
v139[3] = v139;
new Float32Array(16);
512 >> 512;
try { new Int32Array(v15, Uint8ClampedArray, v15); } catch (e) {}
new Int32Array(512);
const v149 = new Float64Array(Float64Array);
4096n << 4096n;
const t133 = 0.94273883766791;
delete t133[268435456];
v2.toLocaleString();
const v155 = new Float64Array();
v155.toString = f106;
("p").lastIndexOf(v155);
Date.parse(4294967296);
function f161(a162) {
    a162 - v149;
    a162 += a162;
    return v94;
}
Object.defineProperty(Uint8Array, Symbol.iterator, { configurable: true, enumerable: true, value: f161 });
new Uint8Array(Uint8Array);
class C167 {
}
function F169(a171, a172, a173, a174) {
    if (!new.target) { throw 'must be called with new'; }
    const v175 = this?.__defineGetter__;
    try { v175(undefined, undefined); } catch (e) {}
    try { a171.unshift(a172); } catch (e) {}
    a173 != a173;
    let v179;
    try { v179 = a171.toSpliced(a172, a172); } catch (e) {}
    const v180 = v179?.__defineSetter__;
    try { v180(); } catch (e) {}
}
for (const v182 in v149) {
}
