class C3 {
    #o(a5, a6) {
        for (let v7 = 0; v7 < 32; v7++) {
            this["p" + v7] = v7;
        }
        return this;
    }
    o(a11, a12) {
        let v14;
        try { v14 = ("findLast").lastIndexOf("codePointAt", d); } catch (e) {}
        function F17(a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
            const v21 = this.constructor;
            try { new v21(this, a20); } catch (e) {}
            this.c = a19;
        }
        const v23 = new F17(18074, 28602970);
        v23.b = v23;
        super.d = v14;
        const v26 = new v23();
        v26.length >>>= 16;
        class C29 extends Float64Array {
            static 1;
            static #d = 256;
        }
        const v30 = new C29();
        try { v30(v26); } catch (e) {}
        let {"buffer":v32,"byteLength":v33,"byteOffset":v34,} = v30;
        return d;
    }
}
new C3();
const t32 = "findLast";
new t32();
const v37 = new C3();
function f38() {
    return v37;
}
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = "string";
    } catch(e44) {
    }
    try {
        this.g = a43;
    } catch(e45) {
    }
    try {
        const v46 = [];
        v46[6] = a41;
        v46[6] = 4294967295;
        class C48 {
        }
        this.a = a41;
    } catch(e49) {
    }
}
const v50 = new F39(v37, "codePointAt", v37);
const v51 = new F39(v50, "codePointAt", "string");
new F39(C3, "string", v51);
new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
[[]];
