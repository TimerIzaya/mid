[-5.0,2.220446049250313e-16,-1.5612483901889037e+307,-1.0,-1.6661551768199761e+308,-2.2250738585072014e-308];
[-470133.04882549995,Infinity,540120.4908215683,-5.0,9.288468939396278,1000000000.0,-5.0,839650.7929993402];
[-5.0,-0.0,-1.0,0.09875242996410727,-8.30460943479606,935.0005883130686,-2.0];
new Uint8ClampedArray(303);
/9f8\xf0\x9f\x92\xa9/diy["compile"]();
const v16 = -698162.0562706811 % 4294967296;
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -9;
    } catch(e27) {
    }
    try {
        this.b = 1552;
    } catch(e28) {
    }
}
const v29 = new F21(-9, 1073741824, 1073741824, "setUint32");
function f30(a31, a32) {
    const o38 = {
        "f": -9,
        set e(a34) {
            Reflect.construct(a34, [a31,v29,Reflect,a32], a34);
        },
        ["number"]: v29,
        "e": "toString",
        9: "toString",
    };
    return o38;
}
f30(v29, "toString");
Object.defineProperty(v16, "a", { writable: true, configurable: true, value: f30 });
new Uint16Array(1552);
new Int32Array(5);
const v46 = [];
class C47 {
}
const v48 = new C47();
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a52;
}
const v53 = new F49(v48, v46);
[v53];
new Uint16Array(14);
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let [v62] of "Opx24") {
}
function f65() {
    const o71 = {
        "e": 12,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a70) {
            return a70;
        },
        ...1000000000000.0,
    };
    return o71;
}
f65();
const v74 = [1000000.0,-1.7976931348623157e+308];
const o75 = {
    ...v74,
};
const v0 = [];
class C1 {
    toString() {
        v0 ** this;
        [-2041380650,-14,-1824436191,-128,-9007199254740991,4294967296,-13,9];
        [430289204,26852,10];
        return [-9007199254740991,9,1024,-9223372036854775807,9007199254740991,60473,1];
    }
    d = v0;
    static #b;
    static #c = v0;
    static 1322 = v0;
    #e;
    static 268435456;
}
const v7 = new C1();
const v8 = new C1();
v8.d = v8;
new C1();
class C10 {
    static #n(a12, a13) {
        v7 >>> this;
        try {
            C1[4] = this;
        } catch(e15) {
        }
        return a13;
    }
    set g(a17) {
        super.a;
        try {
            v8[v0] = v7;
        } catch(e19) {
        }
    }
}
C10.prototype;
const v21 = new C10();
new C10();
const v23 = new C10();
let v25 = 0.8127581755016274;
v25--;
function f28(a29, a30) {
    a30--;
    const o43 = {
        [a30]: C1,
        "e": v25,
        toString(a33, a34) {
            const v35 = a33 < v23;
            if (v35) {
                %VerifyType(C1);
            } else {
                v25 / a30;
                const v38 = new Int8Array();
                ([v38]).flat();
                gc();
            }
            return v35;
        },
        "a": v21,
        268435456: -1.0562658600507314e+308,
    };
    return o43;
}
f28(4.0, v25);
const v45 = f28(v23, v25);
v45[268435456] = v45;
f28(v7, -1.0562658600507314e+308);
const v47 = /(?<a>.)\k<a>/vyd;
v47[Symbol.iterator] = f28;
function f50() {
    return f50;
}
f50.prototype;
const v53 = new Float64Array(v47);
try { v53.reduceRight(v7); } catch (e) {}
for (const v55 in v47) {
}
function f56(a57, a58, a59) {
    return a59;
}
new f50(2.404273109449802, f50(), ...v53, f56);
