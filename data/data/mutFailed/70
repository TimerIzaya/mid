new Uint8ClampedArray(256);
const t1 = 256;
new t1(24);
const v8 = Uint8Array?.constructor;
try { new v8(Uint8ClampedArray); } catch (e) {}
const v10 = new Uint8Array(4);
-9223372036854775807n | -9223372036854775807n;
-v10;
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.propertyIsEnumerable;
    try { new v21(-30326n); } catch (e) {}
    this.a = this;
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e25) {
    }
}
const t19 = 4;
const v26 = new t19();
const v27 = new v26();
v27.length;
new F19();
62324 & 62324;
4294967295 * 4294967295;
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a38(); } catch (e) {}
    a39.f = a39;
    try {
        this.b = a38;
    } catch(e41) {
    }
}
new F35(4294967295, F19, v26);
new F35(62324, F35, v27);
Symbol.toPrimitive;
const o47 = {
    [v26]() {
    },
};
/((?:a+)?)/miuyd;
const v1 = /k/mvis;
const v2 = /(?<a>.)\k<a>/vyd;
function f3() {
    return v1;
}
new WeakSet();
const v8 = new Float64Array(47);
const v13 = new Int16Array(5, 5);
function f14() {
    function f15(a16) {
        const v17 = [-3.0,-507692.08854089223,758.8477593546504,1.4000733653645518e+308];
        const v19 = new WeakMap();
        [5,5,-1080874019,v17,v19];
        return WeakMap;
    }
    return f15;
}
Object.defineProperty(v13, "toString", { writable: true, get: f14 });
const v23 = new Int16Array(1949);
for (const v24 in v2) {
    [-986573896,12,-151963132,2,356664962,-9007199254740991,3,-1222714698];
    [-9007199254740992,0,-9223372036854775808,-65535,-27146,1214411587];
    [268435456,0,-9223372036854775807,-7,-9007199254740992,-256,-2100433837,-31797,-48232,-1024];
}
function f29(a30, a31, a32) {
    const o33 = {
        __proto__: v13,
        6: 5,
        "e": Int8Array,
    };
    o33.p17 = a30;
    return o33;
}
const v34 = f29();
const v35 = f29(v13, 5, Int8Array);
v35.p11 = v35;
let v36 = f29();
v36.valueOf = f29;
try {
    const v37 = new f3();
    new f3(2.404273109449802, v37, ...v8, f29);
    v36 >>>= v36;
} catch(e42) {
}
v23[1729093431] = Int16Array;
v34[8];
for (let v44 = 0; v44 < 25; v44++) {
    v35["p" + v44] = v44;
}
new Float32Array(127);
new BigUint64Array(14);
const t52 = (-13545).constructor;
const v54 = new t52();
try { v54.toExponential(129n); } catch (e) {}
