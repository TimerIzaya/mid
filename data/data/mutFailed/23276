const v0 = [-1.0,610.0712499398785,1.0];
[85.9376186605034,0.020892139908054497,0.21272187172082324,-3.4239199634458934,-346579.9242801006,1.7976931348623157e+308,0.8073262790900985];
function f2() {
    class C3 {
        #a;
        constructor(a5, a6) {
            super();
            for (let v7 = 0; v7 < 10; v7++) {
                function f8(a9, a10, a11) {
                    return a11;
                }
            }
            [,a5 % v0];
        }
    }
    const v15 = new C3();
    const v16 = v15?.constructor;
    try { new v16(); } catch (e) {}
    const v18 = [v15,v15,v15,v15,v15];
    const v19 = [f2,f2];
    class C20 extends C3 {
        [v15];
    }
    const v21 = new C20();
    const v22 = v21?.constructor;
    try { new v22(); } catch (e) {}
    const v24 = v19.constructor;
    try { v24.from(v19); } catch (e) {}
    try { v21.m(v18); } catch (e) {}
    return f2;
}
f2().prototype;
[-1000000000.0,-875.923064410159,-1.0,0.29652511227204226];
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v32.pop(); } catch (e) {}
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f35(a36, a37, a38, a39) {
    try { v34["throw"](); } catch (e) {}
    12 << 9007199254740991;
    function f45() {
        try {
            v34.forEach(a37, v32);
        } catch(e47) {
        }
        return a37;
    }
    new Uint8Array(12);
    for (let v50 = 0; v50 < 5; v50++) {
    }
    function f51(a52, a53, a54) {
        return a54;
    }
    f45();
    eval();
    %OptimizeFunctionOnNextCall(f45);
    return v34;
}
class C59 {
    constructor(a61, a62) {
        const v63 = a62[2];
        const v65 = new Uint8Array();
        for (let v66 = 0; v66 < 500; v66++) {
            const o70 = {
                ...v65,
                n(a68, a69) {
                    return a68;
                },
            };
        }
        for (let v71 = 0; v71 < 5; v71++) {
            v32[v63];
        }
    }
}
const v73 = new C59();
const v74 = v73.constructor;
[-65536];
const v78 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v79 = [601759695];
const v80 = [1073741824,1073741823,1376142744,1073741825];
function f82(a83, a84, a85, a86) {
    function f87() {
        v78.constructor;
        const o91 = {
            ..."toStringTag",
        };
        o91[1] = o91;
        try {
            v80.forEach(a84);
        } catch(e93) {
        }
        const v95 = Symbol.toPrimitive;
        const o99 = {
            toString(a97, a98) {
                a97 *= v95;
                return a98;
            },
        };
        const o121 = {
            get f() {
                return -268435456;
            },
            [v95]() {
            },
            [522675525n](a104, a105) {
            },
            "c": v79,
            valueOf(a107, a108) {
                return a84;
            },
            "b": -4294967295,
            [-4294967297n](a110, a111, a112, a113) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            valueOf(a115, a116) {
                return -4294967297n;
            },
            toString(a118, a119, a120) {
                return v80;
            },
        };
        return o121;
    }
    f87();
    %OptimizeFunctionOnNextCall(f87);
    ("find").substr(a84, Reflect);
    return v78;
}
for (let v126 = 0; v126 < 10; v126++) {
    f82();
}
v74.c = v74;
function f128(a129, a130, a131, a132) {
    return arguments;
}
let v134 = 3888;
~v134;
Float32Array.name;
new Float32Array(v134);
const o140 = {
    "deleteProperty": Date,
    "ownKeys": Date,
};
const v141 = o140?.deleteProperty;
try { new v141(f128, Float32Array, f128, C59, C59, C59, f128); } catch (e) {}
class C144 {
}
C144.d = C144;
class C145 {
    static n(a147, a148) {
    }
    static [v134];
}
try { C145(); } catch (e) {}
class C150 extends C144 {
    static valueOf(a152, a153) {
    }
}
C150.g = C150;
new BigUint64Array(3190);
Uint32Array.length;
new Uint32Array(8);
function F161() {
    if (!new.target) { throw 'must be called with new'; }
}
F161.fuck = F161;
const v164 = [1073741824,1073741823,1376142744,1073741825];
try { v164.reduceRight(C150); } catch (e) {}
function f166(a167, a168, a169, a170) {
    try {
        v164.forEach(a170, a167);
    } catch(e172) {
        class C173 {
        }
        function f174() {
            return f174;
        }
        class C175 extends f174 {
        }
        try {
            a170 &= C175;
        } catch(e176) {
        }
    }
    const o178 = {
    };
    const v180 = new Proxy(Uint8ClampedArray, o178);
    try { v180.apply(Symbol, f166); } catch (e) {}
    v134++;
    const v184 = [44371,2,-65536,9,-5128,-9223372036854775808,-7,10];
    const v186 = [14,-11,1];
    const v187 = [-49581,0,-128];
    class C188 {
        constructor(a190, a191) {
            try { this.propertyIsEnumerable(v186); } catch (e) {}
            const v195 = new Uint8Array(4, 4, 4);
            function f196(a197, a198, a199, a200) {
                const o201 = {
                    ...v195,
                };
            }
            f196(Uint8Array, 4);
            const v203 = Symbol.iterator;
            const o215 = {
                [v203]() {
                    const o214 = {
                        next() {
                            function f206(a207, a208) {
                                const o212 = {
                                    p(a210, a211) {
                                    },
                                };
                            }
                            const o213 = {
                            };
                        },
                    };
                },
            };
            a191 | -4.0;
        }
    }
    new C188(v187, v184);
    return o178;
}
const v219 = new Int8Array(180);
const v221 = /(xyz??)/vm;
class C222 {
    get e() {
    }
    #c = v221;
}
C222.d = C222;
const v224 = v219.byteOffset;
v224 !== v224;
v219[v224] = 5;
