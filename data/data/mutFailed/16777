class C3 {
    static e = -236935.90243192262;
    constructor(a5, a6) {
        function f7(a8, a9) {
            const v12 = new BigUint64Array(4096);
            v12[3408] = "object";
            return C3;
        }
        a6.constructor = f7;
        try { this.hasOwnProperty(-236935.90243192262); } catch (e) {}
        const v14 = a6?.constructor;
        try { new v14("with"); } catch (e) {}
        try { ("minor").trim(); } catch (e) {}
        const o24 = {
            "execution": "sync",
            "type": "minor",
            valueOf(a21, a22) {
            },
            get f() {
                return this;
            },
        };
        gc(o24);
    }
    h = "with";
    b;
    #g;
    toString(a27, a28, a29, a30) {
        try { this["throw"](); } catch (e) {}
        const v36 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v36, eval());
    }
}
const v40 = /2a\sc/uds;
function f41() {
    return v40;
}
function f42(a43) {
    try {
        new C3(a43, -58678);
    } catch(e46) {
    }
}
Object.defineProperty(v40, 0, { configurable: true, get: f41, set: f42 });
v40[0];
function f48(a49, a50, a51, a52) {
}
function f53() {
    delete arguments.callee;
    return arguments;
}
f53();
new C3("object", C3);
const v58 = new C3(-236935.90243192262, "object");
new C3(v58, C3);
[268435439,4,-9223372036854775808,-1];
const v61 = [16,1121658517,-548393345,1717993171,-1904393590,-43006,268435456,-9007199254740992];
v61[2] = v61;
[1146514266,-4096,0,-631225628,4294967295,268435439,-2];
let v63 = 9;
v63--;
new Int32Array(v63);
new Uint32Array(9);
Uint16Array.d = Uint16Array;
const v72 = new Uint16Array(8);
try { v72.join(v72); } catch (e) {}
const v75 = 9007199254740991n * 9007199254740991n;
v75 + v75;
