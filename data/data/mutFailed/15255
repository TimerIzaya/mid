class C3 {
    3551120651;
    constructor(a5) {
        function f6() {
            function f7(a8, a9) {
                try {
                    this.fuck(a8, undefined);
                } catch(e12) {
                }
                return a5;
            }
            return f7;
        }
        Object.defineProperty(this, "toString", { writable: true, get: f6 });
        this[3551120651];
        this[3551120651] = this;
        super.d;
        function f16(a17, a18) {
            return Symbol.toPrimitive;
        }
        SharedArrayBuffer.toString = f16;
        try { new SharedArrayBuffer(SharedArrayBuffer); } catch (e) {}
        const o23 = {
            "maxByteLength": 268435439,
        };
        o23.a = o23;
        255 / 255;
        const v26 = new SharedArrayBuffer(255, o23);
        try { v26.grow(-2.2250738585072014e-308); } catch (e) {}
        const v29 = new Uint8Array(v26);
        try { v29.join(this); } catch (e) {}
        v29[75] = v29;
    }
    [1669513877];
    static [-2.2250738585072014e-308];
}
try { C3.bind(C3); } catch (e) {}
new C3("setInt32");
const v33 = new C3(C3);
const v34 = v33[3551120651];
const v35 = new C3(-2.2250738585072014e-308);
v35[3551120651];
v35[3551120651];
const v40 = new Uint32Array(104);
function f41(a42, a43) {
    new Int32Array(3);
    new Uint8ClampedArray(1571);
    new Uint32Array(0);
    return v34;
}
v40[Symbol.toPrimitive] = f41;
Uint8Array.name;
const v58 = new Uint8Array(2);
v58[1];
391 - 391;
const v63 = new Uint32Array(391);
try { v63.join(v40); } catch (e) {}
let v65 = -14;
class C66 {
}
function f67(a68, a69, a70, a71) {
    return a71;
}
({"b":f67,"f":v65,} = C66);
