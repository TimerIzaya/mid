const v4 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
new Int16Array(v4);
const v7 = [-2];
function f8(a9) {
    return v7;
}
class C10 {
    #f;
    #h;
    constructor(a12, a13) {
        function F16(a18, a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F16(v4, Set, 3, -5.882822328814255);
        const o26 = {
            ...this,
            "g": a13,
            "c": v7,
            toString(a24) {
                class C25 {
                    static [this] = a24;
                }
                return Uint32Array;
            },
        };
        new Proxy(this, o26);
    }
    #a;
    65537;
    static #a;
    #g;
    /*
    constructor(a30, a31) {
        const v32 = this.__lookupGetter__;
        try { new v32(); } catch (e) {}
        const v35 = ~a31[2];
        function f39(a40, a41, a42, a43) {
            a40.length;
            a42++;
            const o49 = {
                n(a47, a48) {
                    return v35;
                },
            };
            return o49;
        }
        f39(v7, Uint8Array, f39);
        for (let v51 = 0; v51 < 625; v51++) {
            v51 >>> v51;
            f39(Uint8Array);
        }
    }
    */
}
const v55 = new C10(-5.882822328814255, 0.032981747674016404);
new C10(-0.0, -5.882822328814255);
new C10(-5.882822328814255, Uint32Array);
const v60 = new Set();
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a63;
    } catch(e65) {
    }
    try {
    } catch(e66) {
    }
    if (a64 >= Uint8ClampedArray) {
    }
    try {
    } catch(e68) {
    }
    try {
        const v69 = v60[this];
        try {
            new F61(v69, -268435456n);
        } catch(e72) {
        }
        this.b = Set;
    } catch(e73) {
    }
}
for (let v77 = 0; v77 < 5; v77++) {
    function f78() {
        const v82 = Symbol.toPrimitive.description.codePointAt();
        class C84 {
            #d = 0.032981747674016404;
            static {
                try {
                    (0.032981747674016404).#d;
                } catch(e87) {
                }
            }
        }
        v82 >> v82;
        return v77;
    }
    f78();
    function f90(a91, a92, a93, a94) {
        let v95 = 10;
        for (; v95--;) {
        }
    }
    for (let v97 = 0; v97 < 10; v97++) {
        f90();
    }
    %OptimizeFunctionOnNextCall(v55);
}
