function f6(a7, a8) {
    const o18 = {
        [a8]: 627594191,
        o(a10, a11) {
            this[Symbol.match] = a11;
            return 627594191;
        },
        set g(a15) {
            let v16;
            try { v16 = a15.transfer(a15, this, -4.0, 0.5150090042676098, 4294967296); } catch (e) {}
            try { new a7(a15, 4294967296, -4.0, a8, this, v16); } catch (e) {}
        },
        ...a7,
        "a": 512,
    };
    return o18;
}
f6(4294967296, 4294967296);
f6(f6(4294967296, 4294967296), 4294967296);
[-Infinity,-7.230945278929126,2.220446049250313e-16,-1.7976931348623157e+308,-1000.0,-1.0,5.002169598915335,1e-15,-5.0,-4.0];
[2.0];
class C28 {
    constructor(a30, a31) {
        a31.c = a30;
        const o32 = {
            __proto__: a31,
        };
        o32[a31] = o32;
    }
}
const v33 = new C28();
const v34 = new C28(-1000000000.0, v33);
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new F35(-1000000000.0, v34);
v33.c = v39;
const v41 = new Date();
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
1000000.0 % 1000000.0;
const v54 = ([-698004.1950483839,2.2250738585072014e-308,-658.5488403472419,1.7976931348623157e+308])?.groupToMap;
try { new v54(-8516); } catch (e) {}
const v56 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
v56.g = v56;
[1.4550120056683328e+308,-1.0772967663163728e+308,186061.78370046848,-1.7976931348623157e+308,-5.0,-Infinity,0.03200553966660591];
const v63 = new BigInt64Array(14);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v67 = new Uint8Array(4096);
const v70 = [-2.216170140955498,-2.2250738585072014e-308,-643865.3403199288,NaN];
this.decodeURIComponent(v70);
let v73 = 127;
const v74 = v73++;
function f75(a76, a77) {
    return a76;
}
const v79 = new Promise(f75);
v79.constructor = gc;
let v80;
try { v80 = v79.then(v63, v74); } catch (e) {}
try { v80.then(v56, v67); } catch (e) {}
function f82(a83, a84) {
    const o85 = {
    };
    return o85;
}
f75 != v41;
v70[BigInt64Array] %= v80;
const v89 = 5865 / 5865;
Math.ceil(-8516);
Math.cosh(-8516);
Math.max(5865);
Math.imul(v89, v89);
for (let v94 = 0; v94 < 25; v94++) {
    const v95 = f82();
    Object.defineProperty(v95, v94, { enumerable: true, get: f82, set: f82 });
    try { Reflect.preventExtensions(v95); } catch (e) {}
    const o99 = {
    };
    o99.type = v95;
    gc(o99);
}
