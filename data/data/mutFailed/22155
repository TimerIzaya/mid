function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(-512192965); } catch (e) {}
    try {
        this.d = a5;
    } catch(e7) {
    }
    try {
        this.e = a5;
    } catch(e8) {
    }
}
let v9;
try {
const t0 = 4096;
v9 = new t0(4096);
} catch (e) {}
const v10 = new F3(-512192965);
const v11 = new F3(v9);
const v12 = new F3(-512192965);
function F13(a15, a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(a17, a17, a16, a17); } catch (e) {}
    a16 * a16;
    try {
        this.c = a15;
    } catch(e22) {
    }
    try {
        this.e = 4096;
    } catch(e23) {
    }
}
F13.length;
const v25 = new F13(v10, 4096, 4096, 312211061);
new v25(v11, 312211061, 312211061, 312211061);
new F13(v12, 4096, -512192965, 4096);
new Uint8ClampedArray(7);
try { new Uint8ClampedArray(4, 4, Uint8ClampedArray); } catch (e) {}
const v34 = new Uint8ClampedArray(4);
try { v34.keys(); } catch (e) {}
new Float64Array(2514);
for (let v39 = 0; v39 < 5; v39++) {
    function f40() {
        const o46 = {
            toString(a42, a43, a44) {
                try { this.toString(a43, 4096, 4096); } catch (e) {}
            },
        };
        let v47;
        try { v47 = o46.toString(F13, v39, -512192965); } catch (e) {}
        const v48 = [o46,v47,o46,o46,o46];
        const v49 = v48.toLocaleString();
        try { (-512192965).normalize(); } catch (e) {}
        ("4294967296").toLocaleUpperCase();
        v49.codePointAt(o46);
        return v48;
    }
    f40();
    %OptimizeFunctionOnNextCall(f40);
}
