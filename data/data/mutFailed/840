function F0() {
    if (!new.target) { throw 'must be called with new'; }
    arguments[this] = F0;
    const o6 = {
        "maxByteLength": 3656,
    };
    const v8 = new SharedArrayBuffer(3656, o6);
    new Float64Array(v8);
    try {
        this.g = 9223372036854775807;
    } catch(e11) {
    }
}
new F0();
const v13 = new F0();
const v14 = new F0();
function f15(a16, a17) {
    function f18(a19, a20) {
        const o24 = {
            p(a22, a23) {
                super.a = F0;
                return a19;
            },
        };
        return a19;
    }
    return f18;
}
Object.defineProperty(v14, Symbol.toPrimitive, { value: f15 });
v14.e = v14;
v14.a = v14;
class C27 extends F0 {
    [v14] = v14;
    static {
        let v29;
        try { v29 = new this(); } catch (e) {}
        v29[1073741825];
        let v31;
        try { v31 = v13.toString(this, this, F0); } catch (e) {}
        try { v31.italics(); } catch (e) {}
        3129 / 3129;
        Object.defineProperty(Uint16Array, "d", { writable: true, enumerable: true, value: F0 });
        Uint16Array.d = Uint16Array;
        new Uint16Array(3129);
        468 - 468;
        const v39 = 468 - 468;
        v39 * v39;
        Uint8ClampedArray.name;
        const v43 = new Uint8ClampedArray(468);
        const v46 = new BigInt64Array(128);
        function f47() {
            return Symbol;
        }
        function f48(a49) {
            class C51 {
            }
            class C52 {
                constructor(a54, a55, a56, a57) {
                    try { a56(...a54, "e", a57, a57, ...C51); } catch (e) {}
                    return arguments;
                }
            }
            new C52();
        }
        Object.defineProperty(v46, "constructor", { configurable: true, enumerable: true, get: f47, set: f48 });
        const v61 = v46?.constructor;
        try { new v61(v43, v46, this); } catch (e) {}
    }
    1073741825 = F0;
}
class C64 extends v14.constructor {
    static h = v13;
    [v14];
    c;
}
new C64();
const v67 = C27.prototype?.constructor;
try { new v67(); } catch (e) {}
new C27();
new C27();
new C27();
try { ("unscopables").strike(); } catch (e) {}
13n / 13n;
const v80 = 26448n + 26448n;
v80 & v80;
const v84 = new Float64Array(5);
v84[Symbol.toPrimitive] = Symbol;
const v87 = new Float64Array(v84);
v84 ** v87;
