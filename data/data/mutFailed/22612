const v0 = [];
const v1 = /S/i;
const v2 = /a(?=b)c(?:ab)?4X\u0060[xyz][xyz]?/vim;
const v3 = /\p{Script=Greek}xxyz?/udmy;
const v4 = [v2,v2];
const v5 = [v4,v2,v1,v3,v0];
v5[1];
const v7 = [v3,v5,v2,v0,v5];
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    a10[2];
    a11[4];
    try {
        this.b = a11;
    } catch(e16) {
    }
}
const v17 = new F8(v5, v7, F8, v2);
new F8(v4, v7, v17, v3);
const v19 = new F8(v5, v4, v4, v1);
function f20(a21, a22, a23) {
    let v24;
    try { v24 = a21.call(a21); } catch (e) {}
    a21.e = v24;
    const o43 = {
        [a22](a26, a27, a28, a29) {
            let v30 = 0;
            do {
                v19 ^ v7;
                try { new a21(v30); } catch (e) {}
                let v35 = 808051.002427279;
                a21 & v24;
                ++v35;
                Math.asinh(v2);
                v35 + v2;
                v30++;
            } while (v30 < 2)
            return a29;
        },
    };
    o43.a = o43;
    return o43;
}
let v44;
try { v44 = new v4(F8, F8, v19); } catch (e) {}
f20.d = f20;
const v45 = f20(f20, v17, v4);
v45.f = v45;
const t48 = v44(v45, v19, v5);
t48.h = v3;
f20(v7, v45, v0).a;
for (let v49 = 0; v49 < 5; v49++) {
    function f50() {
        try {
            return /2a\sc/uds;
        } catch(e52) {
        }
        return v49;
    }
    f50.arguments = f50;
    const v53 = f50.call();
    v53.d = v53;
    v53.a = v53;
    %OptimizeFunctionOnNextCall(f50);
}
