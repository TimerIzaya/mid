function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 8;
    } catch(e3) {
    }
    try {
        this.e = 8;
    } catch(e4) {
    }
    try {
        this.a = 8;
    } catch(e5) {
    }
}
const v6 = new F0();
function f7(a8, a9) {
    a9.b **= a8;
    return Math.cos(Math);
}
v6[Symbol.toPrimitive] = f7;
new F0();
const v15 = new F0();
const v16 = [-983.565586595168];
const v17 = [-3.0,-4.720257523687128,-2.2250738585072014e-308];
function f18() {
    return f7;
}
Object.defineProperty(v17, "toString", { writable: true, configurable: true, enumerable: true, get: f18 });
try { v17.groupToMap(v15); } catch (e) {}
[1.1720622283791133,Infinity];
1000000000.0 / 1000000000.0;
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "length", { value: this });
    const v29 = this?.__defineGetter__;
    try { new v29(a27, v16); } catch (e) {}
    a28 / a28;
    try {
        this.a = a28;
    } catch(e32) {
    }
}
new F25(v6, 0.8490921730771821);
const v34 = new F25(v6, v17);
v34.length = 1000000000.0;
v34.length;
new F25(v15, v6);
[-1e-15,-3.5730022420306433,-1.7976931348623157e+308,-2.1576909405108546,-2.0,583438.9032117634,-3.0];
[-2.220446049250313e-16];
[-967.2078107937161,0.8755240562711689,5.0,-1.0,Infinity,-555331.058791541,426264.5150050877];
const v40 = [536870888,8];
try { v40.reverse(); } catch (e) {}
v40.concat(v40);
