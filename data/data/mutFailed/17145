function f5(a6, a7) {
    const v9 = new Uint32Array();
    try { v9.subarray(v9, 6); } catch (e) {}
    function f11(a12, a13) {
        const o21 = {
            [v9](a15, a16, a17) {
                a13?.[a15].__proto__;
            },
        };
        return a12;
    }
    return a7;
}
Uint8ClampedArray.valueOf = f5;
const v22 = new Uint8ClampedArray(6);
new BigUint64Array(122);
function f28(a29) {
    ("10000").constructor;
    function f31(a32, a33, a34, a35) {
        function f36() {
            let v38 = Math.expm1(a33);
            v38--;
            const v40 = Math.tanh(Math);
            const o41 = {
                [v40]: v38,
            };
            o41.NaN = o41;
            return f31;
        }
        f36();
        eval(a35);
        %OptimizeFunctionOnNextCall(f36);
        return eval;
    }
    return 6;
}
Float32Array.toString = f28;
new Float32Array(8);
-39052 >> -39052;
class C51 {
    #m(a53, a54) {
        function f55() {
            return a54;
        }
        super[a54] = "f";
        %VerifyType(a54);
        return f55;
    }
    static c;
}
const v56 = new C51();
const v57 = v56?.constructor;
try { new v57(); } catch (e) {}
const v59 = new C51();
const v60 = new C51();
const v61 = v60?.constructor;
try { new v61(); } catch (e) {}
class C63 {
    p(a65) {
        this.g ^= this[8];
    }
    static #n(a68, a69, a70, a71) {
        try { new a70(); } catch (e) {}
        ("f")[v22];
        ("m").normalize("NFKC");
        class C77 {
            4;
            static a;
        }
        C77(v22);
        C77();
        C77();
    }
    7 = v60;
    #a = v59;
}
try { C63.toLocaleString(); } catch (e) {}
new C63();
new C63();
const v84 = new C63();
[v60];
[v56];
function F87() {
    if (!new.target) { throw 'must be called with new'; }
}
try { F87.bind(8); } catch (e) {}
const v90 = new F87();
const v91 = v90?.constructor;
try { new v91(); } catch (e) {}
v90[Symbol.toPrimitive] = f5;
const v95 = new F87();
const v96 = new F87();
function F97(a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    const v101 = this?.constructor;
    try { new v101(a100, F97); } catch (e) {}
    const v103 = a99?.constructor;
    try { new v103(); } catch (e) {}
    this.constructor = Symbol;
    this.e = this;
    function f105() {
        return v60;
    }
    function f106(a107) {
        a107.e = a107;
        a107.o = f105;
        let v108;
        try { v108 = v96.o("f", a107, this); } catch (e) {}
        const v109 = v108?.constructor;
        try { new v109(); } catch (e) {}
    }
    Object.defineProperty(a99, "e", { get: f105, set: f106 });
    const v111 = a100?.__lookupGetter__;
    try { v111(a99); } catch (e) {}
    let v113;
    try { v113 = this.constructor(F97, this); } catch (e) {}
    Symbol.for(v113.description);
    a99.e = a99;
}
F97.arguments = F97;
const v117 = new F97(v96);
const v118 = new F97(v117, v95);
v118.e = v118;
try { ("Hyo9").charAt("-248473447"); } catch (e) {}
("Hyo9")[1];
const t124 = "at";
t124[1] = "at";
const v124 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap;
try { v124.bind(C63); } catch (e) {}
function f126() {
    const v127 = delete v84[Float32Array];
    v127 && v127;
    const v129 = v90 ^ Uint8ClampedArray;
    v129 + v129;
    return v129;
}
f126.g = f126;
v124.constructor = f126;
const v131 = v124?.constructor;
v131.g = v131;
let v132;
try { v132 = v131("Hyo9"); } catch (e) {}
const v133 = [-4.202468609045087];
try { v133.map(C63); } catch (e) {}
const v135 = [0.8434386161503777];
try { v135.toLocaleString(); } catch (e) {}
try { v135.findLastIndex(v135); } catch (e) {}
try { ("4i").trimLeft(); } catch (e) {}
const t148 = "4i";
t148[1] = "4i";
const t150 = "RpXR";
t150[1] = "RpXR";
try { ("c").split(6, v132); } catch (e) {}
("c")?.toLocaleUpperCase;
try { ("valueOf").codePointAt(-9223372036854775807); } catch (e) {}
class C146 {
    constructor(a148) {
        ("valueOf").localeCompare(a148, "valueOf");
    }
}
try { C146.toString(); } catch (e) {}
const v151 = new C146();
const v152 = v151?.constructor;
try { new v152(-9223372036854775807); } catch (e) {}
function f154() {
    return f126;
}
Object.defineProperty(v151, "constructor", { get: f154 });
const v155 = v151.constructor;
try { v155(); } catch (e) {}
function f157(a158) {
    class C160 {
        n(a162, a163) {
            Object.defineProperty(this, "e", { enumerable: true, value: super[1000] });
        }
    }
    return "at";
}
f157.caller = f157;
v155.toString = f157;
new v155(C146);
