function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = false;
    } catch(e8) {
    }
}
new F4(7956n, 7956n);
new F4(7956n, -2n);
new F4(-2n, 7956n);
[0.35510912894985625];
const v14 = new gc();
class C15 {
    constructor(a17, a18, a19) {
        for (let v20 = 0; v20 < 5; v20++) {
            function f22() {
                const o30 = {
                    [-4294967297n](a24, a25, a26, a27) {
                        eval(C15);
                    },
                };
                return f22;
            }
            gc();
            %OptimizeFunctionOnNextCall(f22);
        }
    }
}
[-1e-15,-1e-15,-1.1026128120473983e+308,2.2250738585072014e-308,111559.53530368861];
[4.0,8.509110106865336,0.0];
const o36 = {
};
gc(o36);
let v38 = "jER";
[17452,4294967295,64,-8];
[v38] = v14;
const o98 = {
    [null]() {
        try { this.null(this, null); } catch (e) {}
        const v46 = Array(Array);
        for (let v47 = 0; v47 < 5; v47++) {
            const v48 = v47 || v46;
            v48 ** v48;
        }
        const v52 = Array(-6, -2.220446049250313e-16);
        try {
            v52.g = v46;
        } catch(e53) {
            function f54(a55) {
            }
            let v56 = 10;
            for (; v56--;) {
                new Int16Array(127, 127, 127);
                new v56();
            }
            for (let v63 = 0; v63 < 5; v63++) {
                function f64() {
                    let v66 = ("Vre").codePointAt(v63);
                    const v67 = v66--;
                    class C68 {
                    }
                    return v66 ^ v67;
                }
                f64();
                %OptimizeFunctionOnNextCall(f64);
            }
        }
        Array.constructor;
        (-2.220446049250313e-16) ** -2.220446049250313e-16;
        function F73(a75) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v76 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
        function f77(a78, a79, a80, a81) {
            try {
                f77(true);
            } catch(e84) {
            }
            const v85 = /(?:a*)+q(?<a>.)/guds;
            for (let i88 = 0, i89 = 10; i89 < i89; i89--) {
                v76.constructor.isArray(v85);
            }
            return v85;
        }
    },
};
const v99 = o98.null(null, null);
o98.null(v99, v99, o98, o98);
