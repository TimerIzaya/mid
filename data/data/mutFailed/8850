[-16020,4294967297,-1908411780,12,9007199254740992,-4294967296,-9223372036854775807];
[4294967296,16,-8,4294967296];
[-4294967297,1,-17682,-716547609,-24803,1603195052,-1545035578,64];
const v3 = [884.462790358536,-4.0];
[0.7575872251967867,1000000000000.0,3.0,1e-15,4.471760689148072,0.0,2.2250738585072014e-308,-1.8388057572201628,696.5120209812235,-2.220446049250313e-16];
const v5 = [-1000000000000.0,-157.6369138511211,1.0,-162249.56374992034,-1.0,1.479817250431466e+308,3.0,-1.0,-5.680143804568511e+305];
const v11 = new Uint8Array(4);
let v12 = v11[3];
new Uint16Array(630);
6 < 6;
const v19 = new Uint32Array(6);
v19[2] = v12;
function f20(a21, a22, a23, a24) {
    const v25 = /(?:a*)+q(?<a>.)/guds;
    for (let [i29, i30] = (() => {
            0 - 0;
            return [0, 10];
        })();
        (() => {
            const v31 = i29 < i30;
            function f32(a33, a34) {
                return v31;
            }
            return v31;
        })();
        v12--) {
        ~i29;
        i30 >>> i30;
        for (let v42 = 0; v42 < 25; v42++) {
            v42 | v42;
            v25.hasIndices = v25;
        }
    }
    return v12;
}
for (let v44 = 0; v44 < 10; v44++) {
    v12();
}
%OptimizeFunctionOnNextCall(v12);
const v46 = f20();
try { v46(-1.7976931348623157e+308, v5, v3, Uint8Array); } catch (e) {}
