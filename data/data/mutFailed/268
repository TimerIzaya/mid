const v2 = new BigInt64Array(10);
const v4 = 3967 / 3967;
const v6 = Float32Array.length;
const v7 = new Float32Array(3967);
try { v7.slice(Float32Array, 3967); } catch (e) {}
v7[23] = v7;
const v10 = 127 * 127;
class C11 {
}
C11.prototype;
const v13 = new C11();
const v14 = v13?.constructor;
try { new v14(); } catch (e) {}
class C16 {
    static #a = C11;
    static g = v13;
    static {
        try { new this(); } catch (e) {}
        !(delete this.g);
    }
}
try { C16.bind(v13); } catch (e) {}
const v23 = new BigInt64Array(127);
const o24 = {
};
const v26 = ("bZ")?.dotAll;
try { new v26(Float32Array); } catch (e) {}
try { new Symbol(); } catch (e) {}
const v30 = Symbol("bZ");
Symbol.for(v30.description);
[127,v2,v23];
const v35 = [Float32Array];
function f36() {
}
const v38 = [[f36,f36],f36];
function F39() {
    if (!new.target) { throw 'must be called with new'; }
}
const v41 = new F39();
try { new Array(v4); } catch (e) {}
const v44 = v41.d;
let v45;
try { v45 = v44(Array); } catch (e) {}
try { v45(F39); } catch (e) {}
[BigInt64Array];
const v48 = [1e-15,395833.8744809434,1000000.0,1.4833232607524508e+308,-597725.5054648793];
try { v48.slice(v38, v38); } catch (e) {}
const v50 = [-1000000000.0,0.007564657698543642];
let v51;
try { v51 = v50.toLocaleString(); } catch (e) {}
try { v51.link(v4); } catch (e) {}
const v53 = [-1000000000000.0,-974369.4481080713,-487337.25578581466,-479.12403330333757,1.7976931348623157e+308,0.3293969077783455,-5.0,1000000000000.0,783.9936120328941];
try { v53.pop(); } catch (e) {}
try { ("o").trimStart(); } catch (e) {}
[10,-1012881949];
[11,-146405100,536870912,-65535,-9,-1042500765,9];
const v61 = [-1,1108545007,-2,-536870912,24425,1397095361,-153132480];
try { v61.copyWithin(v10, v10); } catch (e) {}
try { v61.reduceRight(127); } catch (e) {}
try { ("5").split(127, v30); } catch (e) {}
const t60 = "5";
t60[0] = "5";
try { ("getUint32").toLocaleLowerCase(); } catch (e) {}
const v71 = new Math(228);
v71.h = v71;
class C72 {
    [Math] = v35;
    static {
        function F74(a76, a77) {
            if (!new.target) { throw 'must be called with new'; }
            const v78 = this?.constructor;
            try { new v78("yi", v6); } catch (e) {}
            try {
                this.b = a77;
            } catch(e80) {
            }
        }
        const v81 = new F74(v71, this);
        new F74(Math, F74);
        new F74(v81, v71);
    }
}
new Uint32Array(54);
const v89 = new Uint16Array(129);
let v90 = 2;
v90++;
new Uint8ClampedArray(v90);
v89[Uint8ClampedArray] %= v90;
try {
    new Uint16Array(v48, 54);
} catch(e95) {
}
let v96 = -128;
do {
    -4294967296 <= -4294967296;
    -65537 >>> -65537;
    const v102 = v96++;
    v102 % v102;
} while (v96 < 9)
class C3 {
    static {
        class C5 {
            static 3;
        }
        new C5();
        new C5();
        new C5();
    }
    constructor(a10, a11) {
        C3 = 4294967296;
    }
    a;
    set e(a14) {
        const o18 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o18);
    }
}
const v20 = new C3();
new C3();
const v22 = new C3();
class C23 {
    n(a25, a26) {
        try { new a26(36590, a25, a26, this, -10); } catch (e) {}
        function F28(a30, a31, a32, a33) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = C3;
            } catch(e34) {
            }
            try {
                this.f = -10;
                for (let v35 = 0; v35 < 5; v35++) {
                }
                [1000,"nfN"];
            } catch(e39) {
            }
        }
        const v40 = new F28(-56327, a26, -10, C3);
        new F28(-56327, a25, 36590, v40);
        new F28(36590, a25, 36590, v20);
        return v22;
    }
}
new C23();
const v44 = new C23();
new C23();
class C46 extends C3 {
    static set d(a48) {
        try {
            super[v44] = v20;
        } catch(e49) {
        }
    }
    n(a51, a52, a53, a54) {
        new Uint16Array();
        const v59 = new Float32Array(1429);
        v59[2] = BigInt64Array;
        const o63 = {
            "maxByteLength": 646,
        };
        const v65 = new ArrayBuffer(646, o63);
        const o67 = {
            __proto__: -56327,
        };
        return o67;
        function f71(a72) {
            const o73 = {
                "c": a72,
                ..."65535",
                "a": a72,
                ["m"]: "m",
            };
            return o73;
        }
        f71("e");
        const v76 = [["65535",f71,"e",f71,"65535"]];
        function f77(a78) {
            for (let v79 = 0; v79 < 32; v79++) {
                v76["p" + v79] = v79;
            }
        }
        new Int32Array(v65);
        return -56327;
    }
}
new C46();
new C46();
new C46();
function F86() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 10270;
    } catch(e89) {
    }
    try {
        this.e = 10270;
    } catch(e90) {
    }
}
new F86();
new F86();
new F86();
const v96 = new Float64Array(1861);
Array(2590, 1861, v96);
const o106 = {
    230: 3,
};
let v107 = 0;
while (v107 < 6) {
    let v110;
    try { v110 = o106.repeat(); } catch (e) {}
    o106[v110];
    v107++;
}
