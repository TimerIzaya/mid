class C3 {
    static #o(a5) {
        return -3.0;
    }
    ["function"] = "maxByteLength";
    static ["maxByteLength"] = "Pc";
    6;
    static 9 = "function";
    #d;
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
v11[6] = v11;
const v12 = /l/vdmy;
const v13 = v12?.test;
try { new v13(v9); } catch (e) {}
const v15 = /HT(?:ab)+/gvdm;
const v16 = /Nxn\P{Decimal_Number}/gumsy;
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.propertyIsEnumerable;
    try { new v23("maxByteLength"); } catch (e) {}
    a21.c = a21;
    a22 == a22;
    try {
        this.b = a19;
    } catch(e26) {
    }
}
const v27 = new F17("maxByteLength", "maxByteLength", "Pc", "Pc");
try { v27.constructor(v15, v15, "Pc", v12); } catch (e) {}
const v29 = new F17(v16, v10, "maxByteLength", "Pc");
new F17(v29, v11, v9, "function");
const v32 = [];
try { v32.findLast("maxByteLength"); } catch (e) {}
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.constructor;
    try { new v40(a38, a39, v9, a38); } catch (e) {}
}
const v42 = new F34();
v42.b = v42;
const v43 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C44 {
}
const v45 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v46 = [601759695];
for (let v47 = 0; v47 < 5; v47++) {
    function f48() {
        const v51 = Array();
        try { v51.findLast(v47); } catch (e) {}
        v51.unshift();
        try {
            v43.forEach(Float64Array);
        } catch(e55) {
            e55.b = e55;
        }
        const o56 = {
            "c": v46,
            "arguments": v45,
            ...v42,
            "type": C44,
        };
        const v57 = [];
        function f58() {
        }
        v57[Symbol.toPrimitive] = f58;
        function F61(a63) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F61.g = F61;
        class C64 extends F61 {
            valueOf(a66, a67, a68, a69) {
                a66[0] = a66;
                super[this] = F61;
            }
        }
        try { new C64(); } catch (e) {}
        const v71 = new C64();
        try { v71.valueOf(o56, f48, o56, f48); } catch (e) {}
        const o75 = {
            set g(a74) {
            },
        };
        for (const v76 in o75) {
            let v77;
            try { v77 = v32.flat(4096); } catch (e) {}
            v77.length;
            v77[1];
            const v80 = new C44();
            const v81 = v80?.constructor;
            try { new v81(); } catch (e) {}
            v71.valueOf(v76);
        }
        return Array;
    }
    try { f48(); } catch (e) {}
    f48();
    %OptimizeFunctionOnNextCall(f48);
}
