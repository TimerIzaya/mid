new Int32Array(1024);
const v5 = /(?:a*)+q(?<a>.)/guds;
function f6(a7) {
    a7.dotAll = a7;
    const o39 = {
        set b(a9) {
            function f10(a11) {
                return arguments;
            }
            class C14 {
                m(a16, a17) {
                    0.0 ** this;
                }
                static get c() {
                    let v20 = 10;
                    for (; v20--;) {
                        super.MAX_VALUE = this;
                        Symbol.isConcatSpreadable;
                    }
                }
            }
            const v24 = new C14();
            const v25 = [0.41400040521582504,-2.2250738585072014e-308,1000000000.0,1.0,-7.840812307817487,0.8468093444532201];
            const v26 = [0.7320309079988974,-2.0,474241.4698858885];
            class C28 extends C14 {
                o(a30, a31, a32) {
                    Math.abs();
                    Math.round(a32);
                    Math.acosh();
                    Math.sinh();
                    return v25;
                }
                #g = C14;
                [9007199254740990n];
                245 = 9007199254740990n;
                [v26] = v24;
            }
        },
        get d() {
            return a7;
        },
        __proto__: v5,
    };
    return o39;
}
const v40 = new BigUint64Array(6);
const v43 = new BigUint64Array(257);
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    function f51(a52, a53) {
        const o57 = {
            __proto__: a53,
            "b": a53,
            [a52]: a53,
            "c": a52,
            "e": a53,
            valueOf(a55, a56) {
                super[a55] = "undefined";
                return a56;
            },
        };
        return a52;
    }
    f51();
    %OptimizeFunctionOnNextCall(f51);
    try {
        this.f = a46;
    } catch(e59) {
    }
    try {
        this.b = v43;
    } catch(e60) {
    }
}
const v61 = new F44(257, 257, 1024, 6, Int32Array, Int32Array, F44);
new F44(v40, 6, 257, 257);
new F44(v61, 1024, 257, 6);
let v65 = Int16Array;
v65[Symbol.toPrimitive] = f6;
function f68() {
    v65--;
    function F71(a73, a74, a75, a76) {
        if (!new.target) { throw 'must be called with new'; }
        const v77 = this.constructor;
        let v78;
        try { v78 = new v77(v77, a76); } catch (e) {}
        const v79 = typeof v78;
        const o82 = {
            get b() {
                return v77;
            },
        };
        v79 === "symbol";
    }
    class C84 {
        static #m(a86) {
        }
        set d(a88) {
            this.#m();
        }
        constructor(a91) {
            this[Symbol.toPrimitive] = f6;
            function f94() {
                return f94;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f94 });
        }
    }
    const v95 = new C84(-4294967296);
    v95.f = v95;
    const v96 = new C84("string");
    v96.length = -4294967296;
    v96.length;
    let v98 = 0;
    while (v98 < 10) {
        for (let v101 = 0; v101 < 5; v101++) {
            const t116 = "string";
            t116["p" + v101] = v101;
        }
        v98++;
        const v106 = new Int16Array();
        const v109 = new Int8Array(1);
        v106[v109] = v109;
    }
    const v110 = new C84();
    const v111 = [v110,v110,v110,v110,v110];
    const v112 = [v110];
    class C113 extends C84 {
        [v95];
        #n(a115, a116, a117, a118) {
            function f121(a122, a123) {
                const o131 = {
                    toString(a125, a126, a127, a128) {
                        return "preventExtensions";
                    },
                    get e() {
                        return "-1865512128";
                    },
                };
                return "preventExtensions";
            }
        }
        #g;
    }
    const v132 = new C113();
    v132.m = v95;
    v112.constructor;
    try { v132.m(v111); } catch (e) {}
    return v96;
}
%PrepareFunctionForOptimization(f68);
f68();
%OptimizeFunctionOnNextCall(f68);
f68();
