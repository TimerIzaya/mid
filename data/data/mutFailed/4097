const v0 = [-1000000000000.0,1000000000.0,2.0,725.3781554564489,Infinity];
Object.defineProperty(Int8Array, 1, { writable: true, configurable: true, value: v0 });
new Int8Array();
const v4 = new Map();
let v5;
try { v5 = v4.keys(); } catch (e) {}
v5.__lookupGetter__;
new Int8Array();
const v10 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
function f11() {
    const t10 = "g";
    t10[14] &&= 14;
    return "g";
}
v10.valueOf = f11;
for (let v14 = 0; v14 < 5; v14++) {
    v10 | v14;
}
const o17 = {
    valueOf() {
        return true;
    },
};
const v18 = [-2.0,335.2869756030814,-1000000000000.0,2.2250738585072014e-308];
try { v18.entries(); } catch (e) {}
const v20 = [1000000000.0,-535.2643911843572,-953945.7018489861];
Int8Array[Symbol.iterator] = f11;
const v24 = new Int8Array(Int8Array, Int8Array);
[1000,1000,1000,1000,1000];
class C27 {
}
v24.__proto__ = C27;
function f28() {
    Math.asin();
    try {
        const v33 = new Uint8ClampedArray(2147483647);
        function f34(a35) {
            return f34;
        }
        const v38 = [v33];
        const o39 = {
            "arguments": v38,
            "type": "function",
        };
        Worker(f34, o39);
    } catch(e41) {
    }
    return f28;
}
class C42 {
    static #valueOf(a44, a45, a46) {
        f28("-354330605");
        function F49() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F49();
        this.f;
        try {
            f28();
        } catch(e54) {
        }
        return o17;
    }
    get f() {
        try {
            f28();
        } catch(e57) {
        }
    }
}
function f58(a59) {
    const v60 = [-1000.0,1000000.0,2.220446049250313e-16,614071.3005355855,-1.0,2.220446049250313e-16];
    const o61 = {
    };
    new Proxy(v60, o61);
}
Object.defineProperty(C42, "e", { writable: true, enumerable: true, set: f58 });
C42.e = C42;
const v64 = new C42();
const v65 = [-1073741824,-1024,268435439,5,1024,0,-14,6,-29803];
const v66 = [-2109576551,-40703];
v66[1];
const v68 = [-26027,876830090,65537,4096,8,8];
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a73;
    const v75 = this?.__lookupGetter__;
    try { new v75(f28); } catch (e) {}
    try {
        this.b = v18;
    } catch(e77) {
    }
    try {
        this.d = v65;
    } catch(e78) {
    }
    const v79 = [0.00952483356421907,-3.0,2.220446049250313e-16];
    function f80(a81, a82) {
        const o86 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o86);
        return v75;
    }
    v79.valueOf = f80;
    function f88() {
        return v79;
    }
    class C89 extends f88 {
        a;
    }
    const v90 = new C89();
    v90 + (-10 * v79);
    try {
        this.g = o17;
    } catch(e94) {
    }
}
new F69(v66, v0, v66, v0);
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a99;
}
const v102 = new Uint8Array(16);
const v106 = new Uint8ClampedArray();
class C107 extends Uint8ClampedArray {
    constructor(a109, a110, a111, a112) {
        super(v102);
        try { a110(); } catch (e) {}
        `1073741824${8}c`;
        super[v106] = 520;
    }
}
new F69(v66, v66, v66, v20);
new F69(v18, v68, v20, v0);
536870887 >>> 536870887;
function F119(a121) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toLocaleString(); } catch (e) {}
    function f123(a124, a125) {
        return this == this ? this : this;
    }
}
F119.valueOf = f28;
const v129 = new F119();
const v130 = F119 >>> true;
with (v129) {
    const v131 = typeof v130;
    v131[1] = v131;
    try { Uint8ClampedArray.from(v64); } catch (e) {}
    const v135 = new Uint8ClampedArray(104);
    v135.toLocaleString().toLocaleLowerCase();
}
