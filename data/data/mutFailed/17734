const v2 = new Float64Array(257);
103 >> 103;
103 + 103;
const v7 = new BigInt64Array(103);
v7[65];
let v9 = 256;
v9++;
const v12 = new Float32Array(v9);
Int32Array.b = Int32Array;
const v15 = new Int32Array(239);
let v16 = 2588;
v16--;
const v19 = new Uint8ClampedArray(v16);
try { v19.reduce(v9); } catch (e) {}
v7.g = 103;
Float64Array.name;
const v24 = new Float64Array(1);
class C25 {
    static b;
    n(a27, a28, a29, a30) {
        try {
            this.fuck(Float64Array, BigInt64Array, a27, 1);
        } catch(e32) {
        }
        return 257;
    }
    constructor(a34, a35) {
        const v36 = this?.__lookupSetter__;
        try { new v36(1); } catch (e) {}
        const v38 = 1 ^ a34;
        const v40 = [a34,103,257];
        const v41 = Reflect.construct(BigInt64Array, v40, Float64Array);
        v41.BYTES_PER_ELEMENT = v41;
        let v42 = v41[22];
        v42--;
        ({"a":v42,"c":v42,} = Reflect);
        v12[4] = v24;
        let v45 = 268435441;
        Math.asinh(v38);
        v42 - v38;
        Math.cos(v24);
        let v50 = v24 ^ v42;
        v50--;
        +v38;
        Math.atanh(v42);
        v45--;
        super.c = v40;
        const v55 = v2 << 257;
        const v56 = v55 << v55;
        v56 % v56;
        v7[Float64Array] = v2;
    }
}
C25.b;
try { new C25(Float64Array, v24); } catch (e) {}
new C25(103, 1);
const v61 = new C25(103, 1);
v61.c = C25;
for (let v62 = 0; v62 < 13; v62++) {
    v15.byteLength;
}
try {
    v7.a = BigInt64Array;
} catch(e64) {
}
const v65 = new C25(1, 257);
v65.length;
1n <= 1n;
let v72 = -25283n && -25283n;
v72++;
const v74 = -25283n >> v72;
v74 & v74;
