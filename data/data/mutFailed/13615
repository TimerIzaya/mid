function F1() {
    if (!new.target) { throw 'must be called with new'; }
}
let v3 = "string";
class C7 extends F1 {
    set h(a9) {
        ({"h":v3,} = this);
    }
}
const v11 = new isFinite(12);
const v12 = [v11,v11,isFinite,v11];
const v13 = [v12];
[isFinite,v11,v13];
const v21 = [v12,"gZ",-15];
let v23 = -56632;
Math.log10("gZ", "gZ", -1000.0, -1000.0);
-8217 * v23;
"gZ" + "gZ";
v23--;
const v30 = ["PI",v21,v21];
const v31 = [1024,"PI",v13];
class C32 extends isFinite {
    #e;
    [v11] = -15;
    static #a;
    a = v3;
    [-1] = "PI";
    #f = "sw";
    static [v3] = 12;
    static get e() {
        try {
            v31.#e = "PI";
        } catch(e34) {
        }
        return "PI";
    }
    static get g() {
        this !== this;
        try {
            const t39 = "PI";
            t39.#e = v30;
        } catch(e37) {
        }
        return v31;
    }
}
new C32();
new C32();
new C32();
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    function F46(a48, a49, a50, a51) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v52 = new F46();
    const v55 = new BigInt64Array(4046);
    function f56(a57, a58) {
        Object.defineProperty(v52, v52, { configurable: true, enumerable: true, get: f56 });
        let o60 = {
            get e() {
                return a43;
            },
        };
        [,...o60] = v55;
        return a57;
    }
    f56();
}
new F41(F41, F41, F41);
new F41();
