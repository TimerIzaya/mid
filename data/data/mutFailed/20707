const v0 = [];
const v2 = new Date(Date);
const v3 = v2.setDate();
const o4 = {
};
const v6 = new Proxy(v2, o4);
with (v6) {
    o4[b];
}
const v11 = new Uint8Array(581);
new Int8Array(v11);
v2.constructor;
const v16 = new Int16Array(581);
if (Int16Array) {
    delete v0?.length;
} else {
    v16[v16] = v16;
}
const v20 = new Uint8Array(8);
Date();
const o23 = {
};
Symbol.species;
new Int16Array(581, 581);
try { v16.reverse(); } catch (e) {}
const v32 = new Int32Array(8);
class C33 extends Uint8Array {
    #valueOf(a35, a36) {
        let {"buffer":v37,...v38} = v16;
        try {
        const t0 = 8;
        t0();
        } catch (e) {}
        new Int16Array(7);
        const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v46 = 0; v46 < 5; v46++) {
            function f47() {
                try {
                    v45.forEach();
                } catch(e49) {
                    e49.constructor(e49, v46, f47, f47, f47);
                    e49.a = e49;
                    e49.a = e49;
                }
                return f47;
            }
            f47();
            %OptimizeFunctionOnNextCall(f47);
        }
        return Int16Array;
    }
    #d = 581;
    #b = Int16Array;
    static [v20];
    o(a54, a55, a56, a57) {
        class C58 {
        }
    }
    static get c() {
        eval();
    }
    [v16];
    [v2] = v32;
    static toString(a63, a64) {
        const v66 = super[a64];
        try {
            const v67 = delete this[v66];
            v67 && v67;
            this[v3];
        } catch(e70) {
        }
    }
    static [8] = 581;
    static 7;
    static 2147483648 = v32;
    #g;
    static a;
}
new C33(v0);
new C33();
new C33();
for (let v74 = 0; v74 < 5; v74++) {
    Math.atan2(-256, v74);
}
