[-33992,617065436,-13];
[-10,65537,402335413,-128,1974779910,-13,-2147483647,13,11];
[-1877,-1,8];
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a11;
    } catch(e14) {
    }
}
new F9(-34893n, -58639n, -34893n);
new F9(-34893n, 9007199254740992n, 9007199254740992n);
new F9(-58639n, -58639n, -34893n);
const v18 = [1.0663730977141727e+308,NaN,-1.1534060997380896e+308,-9.26829361922416e+307];
function f19(a20, a21) {
    function F23(a25) {
        if (!new.target) { throw 'must be called with new'; }
        const v26 = a25 ^ a25;
        let v27 = v26 * v26;
        const v29 = (v27--).constructor;
        v29.length = v29;
        try { new v29(3n); } catch (e) {}
    }
    return a21;
}
v18.constructor = f19;
["function",/xEz\xe2\x81\xa3/gumy];
class C34 {
}
const v35 = new C34();
function f36() {
    return ([134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439]).length;
}
v35[Symbol.toPrimitive] = f36;
ReferenceError(v35);
const v43 = [0.3588640203078587,-1e-15,0.5938791097479088,-1000000000.0];
v18.constructor;
function f45(a46, a47) {
    return Math.tanh("1");
}
%PrepareFunctionForOptimization(f45);
const v51 = [5.453486096719857];
function F52(a54) {
    if (!new.target) { throw 'must be called with new'; }
    this.push = this;
    this.a = a54;
    try { this.push(F52); } catch (e) {}
    try {
        a54.d = a54;
    } catch(e56) {
        let v58 = new Date();
        v58 **= v58;
    }
}
new F52(v18);
new F52(v43);
const v62 = new F52(v51);
v62.a = v62;
let v64 = 2086125797;
v64++;
const o67 = {
};
Math.cos(-1567809689);
256 === 256;
const v74 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v74);
function f77() {
}
class C78 extends v43 {
}
new C78();
function f81(a82, a83) {
    const o84 = {
    };
    return o84;
}
const v85 = new Set();
function F86(a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "b", { enumerable: true, value: o67 });
    try {
        const o95 = {
            o(a91) {
                const o93 = {
                };
                return gc(o93);
            },
        };
        this.d = a88;
    } catch(e96) {
        for (let [v97,v98] of a88) {
        }
    }
    const t93 = 4294967296;
    t93.h = v85;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v105 = [WeakSet];
        v105[4294967296] = a88;
        const v106 = new F86();
        this.b = v105;
        const v108 = new Map();
        v105[4294967296] = Set;
        const v109 = [v106];
        const v110 = [v109,v109,v106,v108];
        [-256n,v110,-256n,v108,v110];
    } catch(e112) {
    }
}
F86.arguments;
new F86();
