new Uint16Array(129);
new Uint16Array(8);
const v8 = new BigInt64Array(256);
class C9 {
    static m(a11, a12, a13) {
        this[Symbol.replace];
        return a13;
    }
    static toString(a18, a19, a20) {
        new Uint16Array(v8, a18, a18);
        return 8;
    }
    h = Uint16Array;
}
new Float64Array(1);
("65535").lastIndexOf(128, 65536);
new C9();
new C9();
function f32() {
    return Uint32Array;
}
Object.defineProperty(Uint32Array, 0, { configurable: true, enumerable: true, get: f32 });
const v33 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v35 = new Float64Array(8);
const v37 = new Int8Array();
const o38 = {
    __proto__: v33,
    "g": Float64Array,
    ...v35,
    2147483647: v37,
};
new C9();
const v43 = new Uint8ClampedArray(112);
const v46 = new Uint8Array();
new BigUint64Array(10);
new Float64Array(2147483647);
const v53 = [Infinity,-1e-15,-5.383093003658099,-232599.5850816276];
let v56;
try { v56 = v43(-85357.59116785484, ...v46, 64, 46, -3.383486186086852e+307, ...v43); } catch (e) {}
v53.length = 64;
class C60 {
    constructor(a62) {
        ("buffer")["search"](..."buffer", ..."search", ..."search", a62, ..."search", 52021);
        super.d = arguments;
    }
    /*
    constructor(a67, a68, a69) {
        const v70 = a69.concat();
        v70[1] = v70;
    }
    */
    /*
    constructor(a72) {
        const v73 = (a74, a75, a76, a77) => {
            this[536870887] = a72;
            return a77;
        };
    }
    */
    static h;
    static #a;
    [-5.0] = -5.0;
    #g = "buffer";
    /*
    constructor(a79) {
        "atan2" ** "65535";
    }
    */
    b;
    static #c;
    static #e = C60;
}
const v82 = new C60(C60);
const v83 = new C60(v82);
new C60(v83);
new Date();
const o89 = {
    "execution": "async",
};
o89.type = v43;
o89.type = BigInt64Array;
gc(o89).then();
new BigInt64Array(129);
const v97 = new Int8Array(12);
const v100 = new Uint32Array(1024);
const v101 = /1xyz{1,}?/gims;
const v102 = /h\p{gc=Nd}/vdy;
const v103 = /\xf0\x9f\x92\xa9a*/us;
class C107 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v113;
        try { v113 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v113.#p(undefined, v113, v113, undefined);
        } catch(e115) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v116 = new C107();
const v117 = new C107();
const v118 = new C107();
function f119(a120) {
    const o126 = {
        15: a120,
        toString(a122, a123) {
            super.h = a123;
            try { C107.stringify(a120, a120, this); } catch (e) {}
            try {
                C107.c = v116;
            } catch(e125) {
            }
            return a123;
        },
        2147483647: undefined,
        __proto__: v117,
        "c": a120,
        ...a120,
        "f": a120,
    };
    return o126;
}
const v127 = f119(v100);
f119(v118);
f119(v127);
for (let i131 = 0; i131 < 5; i131++) {
    try {
        function F139(a141, a142, a143) {
            if (!new.target) { throw 'must be called with new'; }
            a142.toString();
        }
        new F139("p", 7n);
    } catch(e146) {
    }
}
function F148(a150, a151, a152, a153) {
    if (!new.target) { throw 'must be called with new'; }
}
function f154(a155, a156) {
    const v157 = [a156,v56,v8,v97,a155];
    [[v157,Float64Array,Uint8ClampedArray],v103,v118];
    return v157;
}
F148[Symbol.toPrimitive] = f154;
F148.valueOf = gc;
const v162 = new F148(v103, 1, -1263139894, F148);
const v163 = new F148(v101, v103, -23596, v162);
const v164 = new F148(v102, F148, -23596, 1);
function f165() {
    new Int32Array(512);
    return 512;
}
v164[Symbol.toPrimitive] = f165;
const v171 = v164 | F148;
let v172;
try { v172 = v163(v103, v171, v171); } catch (e) {}
if (v172) {
} else {
}
