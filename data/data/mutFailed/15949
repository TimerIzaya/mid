function f3(a4, a5) {
    const o13 = {
        "c": 1,
        set d(a7) {
            a4 >>>= this;
            try { a7.setUTCDate(a4); } catch (e) {}
        },
        "f": 1,
        __proto__: a4,
        [1]: 2,
        "a": 2,
        9: a5,
        "maxByteLength": -330627564,
        get d() {
        },
        [2](a11, a12) {
        },
    };
    class C14 {
    }
    const v16 = new Float32Array(Float32Array);
    class C17 {
    }
    try { C17.apply(C14, v16); } catch (e) {}
    return o13;
}
f3(2, -330627564);
f3(2, f3(2, 2));
const v22 = [3.0,-2.0];
[740585.0163876761,2.220446049250313e-16];
[-622828.1774120072,1.0,9.994203343791273,-934862.5032094977,-1.7472846477904351e+308,-130.89932476412548];
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    Symbol.toPrimitive;
}
const v29 = new F25();
const v30 = new F25();
for (let i34 = 0, i35 = 10;
    (() => {
        const v36 = i34 < i35;
        new Uint16Array(3);
        i35.indexOf();
        function f41(a42, a43, a44, a45) {
            function f46() {
                Math.expm1();
                return f41;
            }
            const v50 = 4294967296n * 4294967296n;
            const t9 = v50 | v50;
            t9();
            eval();
            %OptimizeFunctionOnNextCall(f46);
            return f41;
        }
        const t15 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
        t15[3] = v29;
        let v58 = 3375;
        function f59() {
            try {
                v22.forEach();
            } catch(e61) {
                e61.constructor(e61, v58, f59, f59, f59);
                e61.a = e61;
                e61.a = e61;
            }
            return f59;
        }
        f59();
        const v64 = v58++;
        v64 / v64;
        const v66 = new BigUint64Array();
        let [v67,,v68,...v69] = v66;
        return v36;
    })();
    i34++) {
}
for (let v75 = 0; v75 < 10; v75++) {
    const v76 = [601759695];
    const v77 = [1073741824,1073741823,1376142744,1073741825];
    try { v77["find"]("find", undefined, v76, v75); } catch (e) {}
}
+v30;
