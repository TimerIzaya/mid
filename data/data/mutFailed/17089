const v2 = [1073741824,1073741823,1376142744,1073741825];
let v3 = Float64Array;
v3 = BigUint64Array;
try {
    v2.forEach(v3);
} catch(e5) {
}
const v6 = new BigUint64Array(10);
new BigInt64Array(188);
const v14 = new Float64Array(1);
v14["indexOf"](4, 4);
new Float64Array(0);
const v20 = new Int16Array(Int16Array, Int16Array, Int16Array);
v20.length = 2499;
eval("boolean");
function f25() {
    return BigInt64Array;
}
function F26() {
    if (!new.target) { throw 'must be called with new'; }
}
const v28 = new F26();
const v30 = new Date();
try { Reflect.set(v30, v28); } catch (e) {}
class C33 {
    static 1000;
    static #n(a35, a36, a37, a38) {
        this[257] *= 2499;
    }
    #c;
    n(a42, a43, a44, a45) {
        const v46 = 188 || a45;
        f25 << v6;
        v6[Symbol.toPrimitive];
        return v46;
    }
    1 = f25;
    #h;
}
new C33();
new C33();
Math.atan2(-Infinity, 536870887);
const v57 = /2a\sc/uds;
try { v57.test(v57); } catch (e) {}
new C33();
const v61 = new Map();
function f62(a63, a64) {
    const o65 = {
        [a63]: v61,
        146: v61,
    };
    o65[146];
    function f67() {
        return ("D")[0].substring();
    }
    %PrepareFunctionForOptimization(f67);
    return Map;
}
for (let v71 = 0; v71 < 790; v71++) {
    f62();
}
