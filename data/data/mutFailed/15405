function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
const v4 = new F1();
const o7 = {
    set h(a6) {
    },
    __proto__: v4,
};
class C10 {
    constructor(a12, a13) {
        const t12 = "function";
        t12[4] &= a12;
        const v14 = super.h;
        try {
            v14.toString = a12;
        } catch(e15) {
        }
    }
    c;
    static #c;
    static #h = -9007199254740990;
    g;
}
const v16 = new C10("function", C10);
new C10("function", v16);
new C10(C10, -3096);
const v21 = new Float32Array(Float32Array);
for (let v22 = 0; v22 < 25; v22++) {
    function f23(a24, a25, a26, a27) {
        a24[1];
        for (let v29 = 0; v29 < 5; v29++) {
        }
        a25--;
        a24[0] = a24;
        const v32 = arguments?.__lookupGetter__;
        let v33;
        try { v33 = v32.constructor(f23, v32, v32); } catch (e) {}
        const v34 = new Float32Array(v22, v33, a25);
        const v36 = new Int32Array();
        const v37 = v34;
        v36.fill(...v37);
        return Float32Array;
    }
    for (let v39 = 0; v39 < 10; v39++) {
        f23(v21);
    }
}
new Float64Array(4096);
new Uint8ClampedArray(4);
class C48 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v54;
        try { v54 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v54.#p(undefined, v54, v54, undefined);
        } catch(e56) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
new C48();
new Uint8Array(6);
const v60 = /(x)(x)(x)\1/uis;
function f61(a62, a63, a64, a65) {
    const o72 = {
        2: a64,
        __proto__: a65,
        [v60](a67, a68, a69, a70) {
            super.test();
        },
    };
    return a62;
}
%PrepareFunctionForOptimization(f61);
f61();
f61();
%OptimizeFunctionOnNextCall(f61);
f61();
