class C3 {
    127;
    static [-2147483647n] = 8n;
    static #c = 8n;
    static #g = -2147483647n;
    static [-9223372036854775808n];
    static o(a5, a6) {
        try { a6(a6); } catch (e) {}
        function f11(a12, a13, a14, a15) {
            function f16() {
            }
            class C17 extends f16 {
                toString(a19, a20) {
                    const t13 = this.constructor;
                    new t13();
                    -this;
                }
            }
            const v24 = new C17();
            function f25() {
                const o29 = {
                    [3](a28) {
                    },
                };
            }
            try { v24.toString(); } catch (e) {}
            for (let i = 0; i < 5; i++) {
                ["object"];
            }
        }
        f11();
        let v34 = ~a6;
        Math.sign(v34);
        v34--;
        -1024 / -9223372036854775808n;
        return 8n;
    }
}
let v38;
try { v38 = new C3(); } catch (e) {}
const v39 = new v38();
v39[127];
const v41 = new C3();
v41[127] = v41;
const v42 = new C3();
-854882636 >>> -854882636;
let v46 = 2147483647;
v46++;
4 * 4;
new Float64Array(4);
try { new Float64Array(-43422, v39, v42); } catch (e) {}
new Float64Array(129);
new Float64Array(1000);
function f59() {
    const v63 = new Float32Array(-7);
    v63.includes(1234, 1000);
    ["toString","toString","toString","toString","toString"];
    try { new Int32Array(C3, C3, C3); } catch (e) {}
    const v72 = new Int32Array(Int32Array);
    const v73 = v72?.constructor;
    try { new v73(-9223372036854775808n, Float64Array, Float64Array); } catch (e) {}
    new Uint8Array(v72, v72, Int32Array);
    class C77 {
        constructor(a79, a80) {
            try { this.valueOf(); } catch (e) {}
            const v82 = this.constructor;
            v82.f = v82;
            try { new v82(f59, C77, -7); } catch (e) {}
            this[-2147483648] >>>= -7;
            for (let v84 = 0; v84 < 5; v84++) {
            }
        }
    }
    C77.d = C77;
    new C77();
    return 1000;
}
const v89 = Array(12, -10);
try {
    new Int8Array(9);
    function f95() {
        return f95;
    }
    const o97 = {
        [f95]() {
        },
    };
    [o97];
    v89.copyWithin(8, -268435456, -256);
} catch(e101) {
}
f59();
f59();
f59();
