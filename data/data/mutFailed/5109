class C3 {
    static 257 = -10;
    4;
    p(a5, a6) {
        const o7 = {
        };
        const v9 = new Proxy(this, o7);
        return super[v9];
    }
}
C3[257];
new C3();
new C3();
const t13 = -4294967295;
new t13();
147 - 147;
new Int32Array(147);
-206;
try { new BigUint64Array(-10, BigUint64Array, -10); } catch (e) {}
const v23 = new BigUint64Array(206);
1024 != 1024;
const v27 = Uint32Array?.constructor;
try { new v27(BigUint64Array); } catch (e) {}
new Uint32Array(1024);
const v31 = new BigUint64Array();
4096 - 4096;
const v35 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f36(a37, a38) {
    v23 < 206 ? v23 : 206;
    return a37;
}
v35[Symbol.toPrimitive] = f36;
Uint32Array.BYTES_PER_ELEMENT;
const v45 = new Uint32Array();
let v46 = -4294967297n;
const v47 = v46--;
const v48 = [601759695];
try { v48.toReversed(); } catch (e) {}
const v50 = [1073741824,1073741823,1376142744,1073741825];
function f52(a53, a54, a55, a56) {
    const v57 = a53?.keys;
    let v58;
    try { v58 = new v57(); } catch (e) {}
    function f59() {
        const v60 = [a53,f59];
        [a54,a55,[v60,a55,v60],a54];
        return a55;
    }
    try { new f59(); } catch (e) {}
    a53.constructor = f59;
    const v64 = a53?.constructor;
    v64.g = v64;
    let v65;
    try { v65 = new v64(a53, a56, v50); } catch (e) {}
    arguments.length;
    function f68() {
        try { ("Vre").charAt(4096); } catch (e) {}
        let v71;
        try { v71 = ("Vre").codePointAt(v35); } catch (e) {}
        v71 >> v71;
        v71 ^ v71;
        let v74 = Float64Array;
        try { new v74(f36, f36, f36); } catch (e) {}
        v74 = v58;
        b = v35;
        let v76 = v35.length;
        v76++;
        try {
            v50.forEach(a54);
        } catch(e79) {
            e79.message;
        }
        const o91 = {
            "c": v46,
            "c": v48,
            valueOf(a82, a83) {
                return a82;
            },
            1073741824: v45,
            [v46](a85, a86, a87, a88) {
                eval();
            },
            "arguments": v71,
            256: a56,
        };
        o91[1073741824] = o91;
        o91[256];
    }
    f68.e = f68;
    f68();
    try { new Array(v65); } catch (e) {}
    const v96 = Array();
    try { v96.findLast(v31); } catch (e) {}
    v96.unshift();
    let v100;
    try { v100 = Int8Array.of(); } catch (e) {}
    try { v100.entries(); } catch (e) {}
    const v102 = new Int8Array();
    const v103 = v102.buffer;
    v103.constructor = v103;
    const v105 = v103.slice(2147483648);
    try { v105.slice(v47, Int8Array); } catch (e) {}
    const v109 = new Int32Array(1024);
    const v110 = v109[3];
    v110 - v110;
    v110 + v110;
    1024 * v110;
    for (let v114 = 0; v114 < 5; v114++) {
    }
    %OptimizeFunctionOnNextCall(f68);
    try { v50["find"](..."find", a56, ...v48, ...v50, ...522675525n); } catch (e) {}
}
f52.arguments;
for (let v118 = 0; v118 < 10; v118++) {
    f52(v45);
}
%OptimizeFunctionOnNextCall(Uint32Array);
f52(5, v31, 522675525n, f52);
