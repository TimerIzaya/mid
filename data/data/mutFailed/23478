new Uint32Array(12);
const v8 = new Uint32Array(3, 3, Uint32Array);
new Int32Array(10);
for (let v14 = 0; v14 < 88; v14++) {
    new Int32Array(h, v14, v14);
}
v8[268435439];
const v19 = [16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9];
const v20 = v19.keys();
function f21(a22, a23) {
    const o24 = {
        "g": v20,
    };
    return a22;
}
%PrepareFunctionForOptimization(f21);
const v25 = f21();
%OptimizeFunctionOnNextCall(f21);
const v26 = f21();
const o30 = {
};
let v31 = 1000;
const v33 = new Uint32Array();
[o30,12,Symbol,[o30,v20,4294967296,v25,[3,v19,Float32Array]],v33];
Symbol(v26);
%PrepareFunctionForOptimization(Symbol);
Symbol(v26);
Symbol(v26);
%OptimizeFunctionOnNextCall(Symbol);
Symbol(v26);
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "d", { configurable: true, enumerable: true, value: v33 });
    try {
        this.d = a53;
    } catch(e54) {
    }
    ~F49;
    Uint32Array << a53;
    [,...v31] = v33;
}
new F49(426155202, -5, Uint8ClampedArray, F49, v31);
new F49(426155202, -5, 2305);
new F49(4294967296, v25, v31);
function f60() {
}
class C61 extends f60 {
    toString(a63, a64) {
        -this;
    }
}
const v66 = new C61();
try { v66.toString(); } catch (e) {}
