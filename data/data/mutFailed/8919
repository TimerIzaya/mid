new Worker(2);
const v5 = new Uint16Array(2);
const v8 = new Uint16Array(128);
class C9 {
    #toString(a11, a12, a13, a14) {
        try {
            this.a = a14;
        } catch(e15) {
        }
        return this;
    }
    static g = 2;
    [-1] = v8;
    constructor(a17, a18, a19) {
        const v20 = async (a21, a22, a23) => {
            v5[1634121300];
            v5[Symbol.split] = v8;
            return await a17;
        };
    }
}
new C9(2, v5, 2, 2, C9, 2);
new C9(128, v8, 128);
new C9(2, C9, 128);
const v34 = [];
class C35 {
}
const v36 = new C35();
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a40;
}
const v41 = new F37(v36, v34);
function f42(a43, a44) {
    return a44;
}
const v47 = [v41];
const o48 = {
    "arguments": v47,
    "type": "function",
};
new Worker(f42, o48);
