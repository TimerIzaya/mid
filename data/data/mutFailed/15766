function f0() {
    const t1 = "IkX";
    t1["IkX"] = "IkX";
    function f4() {
    }
    class C5 extends f4 {
        toString(a7, a8) {
            const t7 = this.constructor;
            new t7();
            -a8;
        }
    }
    const v12 = new f0();
    try { v12.toString(); } catch (e) {}
    let v15 = -2147483648;
    const v18 = new Uint32Array(Uint32Array, Uint32Array);
    v18[0.29489550717955537];
    class C21 extends TypeError {
    }
    const v23 = ++v15;
    const v24 = Math.abs(v23);
    v23 | Math;
    const v26 = +-1000000.0;
    const o36 = {
        [-4.796944398585419]: -4.796944398585419,
        get b() {
            let v28;
            try {
            const t0 = "IkX";
            v28 = t0(-4.796944398585419, -4.796944398585419, this);
            } catch (e) {}
            const t31 = "undefined";
            t31["IkX"] = "undefined";
            try {
                const t34 = "IkX";
                t34.length = v28;
            } catch(e29) {
            }
            const v30 = super.g;
            super.f += -4.796944398585419;
            [v26];
            v30.h >>= v24;
            [[-9007199254740990,49004,536870889,1000,257,65536,-9007199254740990,-9007199254740992]];
            const o35 = {
                "type": "function",
            };
            super.e &&= o35;
            return -4.796944398585419;
        },
    };
    return o36;
}
const v37 = f0();
const v38 = f0();
const v40 = [v37(),f0,f0];
function F41() {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    v40.fuck(v40, v40, F41);
} catch(e44) {
}
[[v38,f0],f0];
const v50 = [];
[Map,Map];
const o53 = {
    ...v40,
};
let [] = v50;
function f54(a55) {
    return a55;
}
if (v37 >= Uint8ClampedArray) {
}
