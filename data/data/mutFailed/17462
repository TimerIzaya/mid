const v0 = [];
const v1 = [3.7399689810084737,0.08525441994643856,1.2898810658728823e+308];
[0.8674152553943205];
let v3 = [-1e-15,-1e-15,-9.207491700217316,321.21224411457524,-2.0,1000000.0,4.0,-1000000000000.0];
let v4;
try { v4 = v3.findLast(v1); } catch (e) {}
let v6 = BigUint64Array;
const v7 = new v6(1209);
try { new v4(1209, v7); } catch (e) {}
v7[-1] = v3;
({"a":v6,"b":v3,} = v4);
const v10 = v0["indexOf"](v4, v6);
new Float64Array(3);
let v16;
try { v16 = Int16Array.from(Int16Array); } catch (e) {}
const v17 = new Int16Array(6);
try { v17.reduce(3); } catch (e) {}
function f19() {
    try { new ArrayBuffer(6); } catch (e) {}
    function F22(a24, a25) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a24;
        } catch(e26) {
        }
        try {
            this.h = a25;
        } catch(e27) {
        }
        try {
            this.g = v16;
        } catch(e28) {
        }
    }
    const v29 = new F22(v3, v10);
    const v30 = new F22(ArrayBuffer, Float64Array);
    new F22(v30, v29);
    const v32 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return v32;
}
%OptimizeFunctionOnNextCall(f19);
f19();
