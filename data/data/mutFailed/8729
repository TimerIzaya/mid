new BigInt64Array(89);
new Uint8ClampedArray(210);
new BigInt64Array(0);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.constructor;
    try { new v21(-827.9313408818487); } catch (e) {}
    let v23 = a19.length;
    v23--;
    try { this.constructor(); } catch (e) {}
}
new F17(F17);
function f27() {
    let v28 = -65535;
    v28 * v28;
    const o79 = {
        next() {
            v28--;
        },
        m(a33) {
            let v32 = this;
            a33.c = v32;
            a33.f = a33;
            try { a33.next(f27); } catch (e) {}
            a33.c = a33;
            a33.h = a33;
            const o35 = {
            };
            o35.e = BigInt64Array;
            o35.h = o35;
            o35.h = o35;
            function f36(a37, a38, a39) {
                return a37;
            }
            f36.caller = f36;
            try {
                o35.e = v28;
            } catch(e40) {
                const v44 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v44, o35);
            }
            try {
                const o46 = {
                };
                o46.h = a33;
                o46.h = o46;
            } catch(e47) {
            }
            function f49() {
                return f27;
            }
            function f50(a51) {
                Symbol.toPrimitive;
            }
            Object.defineProperty(Math, "valueOf", { writable: true, get: f49, set: f50 });
            const v54 = Math?.expm1;
            try { new v54(f36); } catch (e) {}
            try { Math.expm1(128); } catch (e) {}
            let v57 = -9007199254740991;
            v57++;
            const v59 = v57 >> 1.7047100695894155e+308;
            v59 - v59;
            class C61 {
                o(a63, a64, a65, a66) {
                }
            }
            const v67 = C61.name;
            try { v67.codePointAt(Math); } catch (e) {}
            const v71 = new Int8Array(3938);
            let v72 = 3;
            let v73 = 0;
            v32++;
            for (let i = 0; i < 5; i++) {
                [...v72] = v71;
                v73++;
            }
            const o76 = {
            };
            try {
                const o77 = {
                };
            } catch(e78) {
            }
        },
    };
    o79.f = 128;
    o79.m(o79);
    const v83 = new Float32Array();
    const t88 = "nt";
    return delete t88[v83];
}
f27();
f27();
