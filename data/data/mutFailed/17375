function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -65057;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
new F0();
[3.645654953756248e+307,-1000000.0,-418303.8874476779,-718788.9126855988,-2.2250738585072014e-308,-3.0,NaN];
[-273466.88630652544];
const v9 = [-1000000000000.0,7.12786784712161,-92.02670130462081];
const v10 = [795.7608624778068,0.8886417026416902,-3.464944199705222,2.220446049250313e-16,0.6436551307325292,1.0,-2.2250738585072014e-308,313749.9677641704,4.662361894403729e+307];
try { v10.fill(v10); } catch (e) {}
[0.8685172177882149,-223454.7697528206,-1000000.0,7.994184466311594];
[5.0];
new Uint8Array(14);
new v9(232);
try { Int16Array.bind(v9); } catch (e) {}
const v23 = new Int16Array(6);
try { v23.subarray(v5, v5); } catch (e) {}
const v26 = new Float32Array(Float32Array);
for (let v27 = 0; v27 < 10; v27++) {
    function f28() {
        return f28;
    }
    const v29 = [601759695];
    try { v29.filter(v5); } catch (e) {}
    const v31 = [1073741824,1073741823,1376142744,1073741825];
    try { v31.copyWithin(v31, Float32Array); } catch (e) {}
    function f34(a35, a36, a37, a38) {
        const v39 = a35?.toLocaleString;
        try { new v39(); } catch (e) {}
        try { a37.groupToMap(a37); } catch (e) {}
        function f43() {
            return v26;
        }
        f28().arguments;
        const v47 = new Int8Array();
        function f48(a49, a50) {
            a50[1] = a50;
            return a49;
        }
        try { f48(f43, a36); } catch (e) {}
        const v52 = f48(v31, v26);
        try { v52.findLastIndex(Uint8Array); } catch (e) {}
        const v56 = v47.buffer.slice(2147483648);
        try { v56.slice(v52, a36); } catch (e) {}
        %OptimizeFunctionOnNextCall(f43);
        try { ("find").blink(); } catch (e) {}
        let v60;
        try { v60 = v31["find"](..."find", a38, ...v29, ...v31, ...522675525n); } catch (e) {}
        v60 <= a37;
        return arguments;
    }
    for (let v62 = 0; v62 < 10; v62++) {
        f34(v31, v62, v29, v62)[2];
    }
}
Uint8Array.length = Uint8Array;
function f66(a67, a68, a69, a70) {
    a67.length;
    const v72 = new Float32Array();
    try { v72.entries(); } catch (e) {}
    const v75 = new Float32Array(2);
    const v77 = new Int32Array(v75);
    const v78 = v75;
    v77.fill(...v78);
    return v72;
}
for (let v80 = 0; v80 < 625; v80++) {
    f66(Uint8Array);
}
