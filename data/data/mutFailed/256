const v0 = [-2.220446049250313e-16,-8.152449721169504,0.26001520076910944,0.0,-0.3336081564604658,1000000.0,-1.0];
const v1 = [1.7976931348623157e+308];
const v2 = [6.738320225107468e+307,2.220446049250313e-16,0.7184993519566372,-Infinity];
function f3(a4) {
    a4[v2] /= a4;
    try {
        v1.indexOf(v2);
    } catch(e6) {
    }
    return v1;
}
v2.toString = f3;
function F7(a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v2;
    } catch(e10) {
    }
    for (let v11 = 0; v11 < 10; v11++) {
        class C12 {
            #f;
            [v11];
        }
        new C12();
    }
    try {
        this.a = v2;
    } catch(e14) {
    }
    try {
        this.d = v1;
    } catch(e15) {
    }
}
try {
    v1.__proto__ = v2;
} catch(e16) {
}
v0.length <<= v2;
const v17 = new F7(v2);
let v18 = new F7(v2);
const v19 = new F7(v2);
function f20(a21, a22) {
    3 / +v18;
    v18--;
    Math.tanh(v1);
    return v19;
}
v19.toString = f20;
try {
    new Int8Array(-45057);
} catch(e36) {
}
const v37 = [v17,-4294967296n,F7];
const o38 = {
};
new Proxy(v18, o38);
v19 % o38;
const v42 = [F7,v1,v18,v19,v37];
[v42,v42];
const v44 = -Infinity;
class C46 {
}
v1.__proto__ = C46;
class C51 {
    9;
    [-4294967295n] = -4294967296n;
    get g() {
        this.f >>>= 1;
        const v53 = this[3360579767];
        try {
            super.toSpliced(v53, -4294967296n, v53, 2, -1771000438);
        } catch(e55) {
        }
        return -1771000438;
    }
}
new C51();
Math.exp(v44);
const v7 = new Map();
const v8 = [-8n];
[v8,v7,v8,-3.0];
const v10 = [v7,45071n];
const v11 = [5.0,-1e-15,-198000.8035743439,-989814.3120582907,-Infinity,0.7872883752678705,1.383742607202418e+308];
[136.17162009893582,5.0,906792.2540561245,-6.394239209639033e+307,-1e-15,-1.0,5.0,-1.2786456207217185];
[1000000000.0,-2.071713807311561e+307,0.9292605839197996];
class C14 {
    256;
    constructor(a16, a17, a18) {
        this instanceof Map;
        try { v10.with(a16, this); } catch (e) {}
    }
    static 1073741825;
    f = Map;
    p(a25, a26, a27, a28) {
        try {
            a28 **= a25;
        } catch(e29) {
        }
        let v35 = -258662.7345257731;
        const v36 = v35++;
        429269009 ** (v35 || v35);
        return v36;
    }
}
new C14(-3.0, -3.0, v8);
const v40 = new C14(-3.0, 17351.673033695086, v11);
new C14(17351.673033695086, -3.0, v10);
const v44 = [-256n];
Object.defineProperty(v44, Symbol.isConcatSpreadable, { writable: true, value: v8 });
const v47 = v44.concat(-4294967297n);
function f49() {
    const o50 = {
        "c": f49,
    };
    return o50;
}
const v53 = v40().c.prototype;
try { v53.__defineSetter__(v47, v44); } catch (e) {}
const v56 = new Int8Array();
function f57(a58, a59) {
    return a58.normalize();
}
v56[Symbol.toPrimitive] = f57;
const v64 = new Int32Array();
v64.slice("object", v56);
