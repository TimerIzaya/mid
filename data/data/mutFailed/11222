let v0 = 1024;
let [...v1] = v0;
v0++;
function f3() {
    return f3;
}
const v5 = new BigUint64Array();
v5.constructor = f3;
("string").normalize("NFKD");
try {
} catch(e10) {
}
new Int16Array(v0);
const v14 = new Uint8Array(4);
new Uint32Array(926);
class C21 extends Int16Array {
    p(a23, a24) {
        super.c = Int16Array;
        try { this.at(a23); } catch (e) {}
        function f26() {
            const o31 = {
                8: 0.043152456200264866,
                get a() {
                    Math.acos(0.043152456200264866);
                },
            };
            return o31;
        }
        const v32 = f26();
        const v33 = f26();
        function F35(a37, a38, a39, a40) {
            if (!new.target) { throw 'must be called with new'; }
            this.d = 257;
            this.h = a38;
        }
        const v41 = new F35(v33, v32);
        const v43 = [v41];
        const o44 = {
            "arguments": v43,
            "type": "function",
        };
        [...this];
        return 4;
    }
    o(a47, a48, a49, a50) {
        try {
            v14.__proto__ = v14;
        } catch(e51) {
        }
        [-Infinity,1e-15,0.9491134546158522,417182.7311575229,-1.0442879372986582e+308,2.220446049250313e-16,-4.0,1.4926938269317284e+308];
        const t49 = "HN4";
        t49.b = "b";
        [-946345318n] > 8n;
        [421.5825550671925,-1.6409378370837184e+308];
        return [2.0,-1000000000.0,0.35398157931754914];
    }
    constructor(a61, a62, a63) {
    }
    static #p(a65) {
        function f66() {
            return a65;
        }
    }
}
new C21();
new C21();
new C21();
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = new Uint8ClampedArray(995);
    const v76 = new Int8Array(995);
    const v77 = v76.copyWithin;
    try { v74.some(v77); } catch (e) {}
}
const v80 = new Int32Array(Int32Array);
Reflect.setPrototypeOf(v80, F70);
