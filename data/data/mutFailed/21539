function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v4 = ("boolean").trimLeft;
    let v5;
    try { v5 = v4(); } catch (e) {}
    let v9 = -65535;
    const v10 = v9 / v9;
    const o69 = {
        next() {
            v9--;
        },
        m(a14) {
            a14.c = a14;
            a14.h = a14;
            const o15 = {
            };
            o15.h = o15;
            function f16(a17, a18, a19) {
            }
            f16.caller = f16;
            try {
                o15.e = v9;
            } catch(e20) {
                const v24 = new Uint8ClampedArray(512);
                Uint8ClampedArray(798, v24, o15);
            }
            const o26 = {
            };
            o26.g = o26;
            o26.e = 1261703539;
            let v28;
            try { v28 = Math.expm1(15); } catch (e) {}
            -v28;
            const v31 = -9007199254740991 / -9007199254740991;
            const v32 = v31 - v31;
            const v33 = v32 >> v32;
            v33 - v33;
            Math.sin(-9007199254740991);
            "EV" == "EV";
            try { ("EV").link(v10); } catch (e) {}
            const v40 = 0 != 0;
            v40 || v40;
            class C42 {
                o(a44, a45, a46, a47) {
                }
            }
            C42.e = C42;
            C42.name = C42;
            const v48 = new C42(v5);
            const v49 = v48?.constructor;
            try { new v49(); } catch (e) {}
            const v51 = v48?.constructor;
            try { v51(); } catch (e) {}
            try { v51(); } catch (e) {}
            const v56 = new Int8Array(3938);
            v56[268] = v56;
            try { v56.every(o26); } catch (e) {}
            let v58 = 3;
            const v59 = v58++;
            v59 << v59;
            const v62 = 0 >> 0;
            v62 - v62;
            for (let i = 0; i < 5; i++) {
                const v65 = 0 < 8;
                v65 && v65;
                [...v58] = v56;
            }
            const o67 = {
            };
            const o68 = {
            };
            o68.h = 352326470;
            return this;
        },
    };
    const v70 = o69.m(o69);
    v70.m(v70);
    class C72 {
    }
    new C72(C72, v4, v70);
    try {
        this.a = 268435440;
    } catch(e74) {
    }
    new Set();
    function f77() {
        const o108 = {
            m(a80) {
                a80.f = a80;
                try { a80.next(); } catch (e) {}
                a80.c = a80;
                a80.h = a80;
                const o82 = {
                };
                o82.h = o82;
                o82.h = o82;
                function f83(a84, a85, a86) {
                }
                f83.caller = f83;
                try {
                } catch(e88) {
                }
                try {
                    const o90 = {
                    };
                    o90.h = o90;
                } catch(e91) {
                }
                Math?.expm1;
                const v95 = -9007199254740991 >> -9007199254740991;
                v95 - v95;
                class C97 {
                    o(a99, a100, a101, a102) {
                    }
                }
                C97.name;
                const v106 = new Int8Array(3938);
                let v107 = 3;
                [...v107] = v106;
            },
        };
        o108.m(o108);
    }
    try {
        class C110 {
        }
        ("boolean").__lookupGetter__;
        function f112() {
        }
        this.b = 268435440;
    } catch(e113) {
    }
    try {
        this.f = 268435440;
    } catch(e114) {
    }
}
const v115 = new F0();
const v116 = new F0();
const v117 = new F0();
const v118 = [v117];
const v119 = [v115,v117,v117,F0,v115];
const v120 = [v119];
class C124 extends F0 {
    constructor(a126, a127, a128) {
        super();
        const v130 = v120["forEach"](v115, a128);
        super.g = a126;
        this.constructor;
        const v134 = new Int16Array();
        try { BigUint64Array.apply(v134, 1); } catch (e) {}
        try { v119.slice(v130, v130); } catch (e) {}
        try { ("forEach").startsWith("forEach", v130); } catch (e) {}
        v119 % "a";
    }
    static #g;
    static ["a"] = v116;
    a;
    230;
    /*
    constructor(a142, a143, a144) {
        const v145 = a144.concat();
        v145[1] = v145;
    }
    */
    #f = v117;
}
new C124(v120, v118, v119);
new C124(v120, v120, v119);
new C124(v120, v120, v119);
const v152 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F153(a155, a156, a157, a158) {
    if (!new.target) { throw 'must be called with new'; }
    v152.__proto__.push(F153, a155, a155);
}
new F153();
