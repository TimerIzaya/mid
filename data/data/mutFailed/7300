new Int32Array(157);
1283 ^ 1283;
const v6 = new Float64Array(1283);
v6[1213] = v6;
Uint16Array.b = Uint16Array;
new Uint16Array(1);
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(a13); } catch (e) {}
    const v15 = a13 >> a13;
    v15 >>> v15;
    try {
        this.b = 1;
    } catch(e17) {
    }
    try {
        this.f = v6;
    } catch(e18) {
    }
    try {
        this.c = a12;
    } catch(e19) {
    }
}
const v20 = F10?.constructor;
try { new v20(Int32Array); } catch (e) {}
F10.e = F10;
new F10(157, 1283);
new F10(157, 1283);
const v24 = new F10(1, 1);
v24.b = v24;
function f26() {
    return undefined;
}
const v27 = [,];
try { v27.findLast(Int32Array); } catch (e) {}
try { v27.findLast(v27); } catch (e) {}
const v30 = v27.group(f26);
const v31 = v30.undefined;
v30.b = v30;
const v32 = /(\1a)/gums;
const v33 = /V(?:a{5,1000000}){3,1000000}/vims;
let v34;
try { v34 = v33.compile(undefined, undefined); } catch (e) {}
const v35 = /(?<a>.)\k<a>?/vdimsy;
v35.d = v35;
for (let v36 = 0; v36 < 27; v36++) {
    let v38 = v32.compile(v33).lastIndex;
    v38++;
}
let v40;
try { v40 = v35(v32, v33, v33, v32); } catch (e) {}
%VerifyType(v40);
const v41 = [v35,v33,v32];
v41[1] = v41;
v41[2] = v41;
const v42 = [v41,v33,v35,v41,v41];
v42[4] = v42;
v42[2] = v42;
[v35,v32,v32];
let v44 = 8;
const v45 = v44--;
v45 / v45;
const v48 = new BigInt64Array(v33, v32, v40);
try { v48.subarray(v27, v48); } catch (e) {}
let v50;
try { v50 = v48.copyWithin(v6, v33); } catch (e) {}
const v51 = v50?.entries;
let v52;
try { v52 = new v51(); } catch (e) {}
const v53 = new BigInt64Array(v44);
try { v53.findLastIndex(v35); } catch (e) {}
new v52(10);
let v58 = 7;
v58--;
const v61 = new v31(v58);
const v62 = v61.constructor;
try { new v62(v62, v35, v62); } catch (e) {}
const v64 = new v62(Uint8Array, v53, v53);
v64[1];
Uint16Array.BYTES_PER_ELEMENT;
let v69;
try { v69 = Int32Array.bind(v41); } catch (e) {}
v69.name = v69;
function f70() {
    const v72 = 3.4890473589784586e+307 === 3.4890473589784586e+307;
    const v73 = v72 || v72;
    !v73;
    let v75 = 1000000000000.0;
    const v76 = v75--;
    const v77 = -v76;
    -v77;
    257828.6336153492 >>> v34;
    const v82 = -v42;
    const v83 = v82 && v42;
    v83 - v83;
    -4294967296 << -4294967296;
    class C87 {
        static #m(a89) {
        }
        constructor(a91) {
            const v93 = new Float32Array();
            let v94;
            try { v94 = v93.entries(); } catch (e) {}
            const v95 = v94.next();
            v95.value;
            v95.b = v95;
            const v97 = new Uint16Array(12, -4294967296, v76);
            const v98 = new Float32Array(v97);
            try { v98.findIndex(v77); } catch (e) {}
        }
    }
    try { new C87(Float64Array); } catch (e) {}
    C87.g = C87;
    const v101 = new C87();
    const v102 = v101?.constructor;
    try { new v102(v101); } catch (e) {}
    const v104 = v101?.__defineSetter__;
    v104.e = v104;
    try { new v104(v44, v101); } catch (e) {}
    const v106 = new C87();
    const v107 = v106?.constructor;
    try { new v107(v42); } catch (e) {}
    const v109 = v106?.constructor;
    let v110;
    try { v110 = new v109(v44); } catch (e) {}
    const v111 = v110?.constructor;
    try { new v111(v111); } catch (e) {}
    let v114;
    try { v114 = new Symbol(); } catch (e) {}
    Symbol.hasInstance;
    Symbol.iterator;
    try { v53.reduce(Int32Array, 12); } catch (e) {}
    let v118 = 0;
    v118++;
    const v120 = new C87();
    const v121 = v120?.constructor;
    try { new v121(v120); } catch (e) {}
    new C87();
    const v124 = new C87(-4294967296);
    try { v124.constructor(v30); } catch (e) {}
    [];
    [257828.6336153492,v124,v120,v124];
    const v128 = [];
    const v129 = v128?.constructor;
    try { new v129(Uint8Array); } catch (e) {}
    v128[0];
    class C132 extends C87 {
    }
    try { new C132(); } catch (e) {}
    const v134 = new v114();
    try { v134.constructor(); } catch (e) {}
    const v136 = v128.constructor;
    const v137 = v136?.constructor;
    try { new v137(v73); } catch (e) {}
    let v139;
    try { v139 = v136.isArray(v128); } catch (e) {}
    !v139;
    class C141 extends v136 {
    }
    C141.g = C141;
    try { new C141(); } catch (e) {}
    C141.a = C141;
    const v143 = new C141();
    const v144 = v143.constructor;
    try { v144.bind(); } catch (e) {}
    const o146 = {
        "e": v128,
        __proto__: v41,
        [v42]: v61,
        "h": 257828.6336153492,
    };
    const v148 = o146[0]?.constructor;
    try { new v148(257828.6336153492, v82); } catch (e) {}
    try { o146.e(BigUint64Array); } catch (e) {}
    return Int32Array;
}
let v151;
try { v151 = f70(); } catch (e) {}
v151.name = v151;
%PrepareFunctionForOptimization(f70);
const v152 = f70();
v152.BYTES_PER_ELEMENT = v152;
%OptimizeFunctionOnNextCall(f70);
f70();
