function f3() {
    return 4294967297;
}
2.368633034661169e+307 ^ 2.368633034661169e+307;
function f8() {
    return -5.0;
}
[536870912];
const v10 = [f8,f8,-4294967297];
try { v10.fill(815525.8811962535); } catch (e) {}
const v12 = [2.368633034661169e+307,2.368633034661169e+307,f3,4294967297,-5.0];
try { v12.toLocaleString(); } catch (e) {}
class C14 {
}
new C14();
const v16 = new C14();
const v17 = v16?.constructor;
try { new v17(); } catch (e) {}
const v19 = new C14();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
class C22 {
}
const v23 = new C22();
const v24 = v23?.constructor;
try { new v24(); } catch (e) {}
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F27(4294967297, 4294967297); } catch (e) {}
const v34 = new Date();
Object.defineProperty(v34, v10, { writable: true, configurable: true, enumerable: true, get: f3 });
v23[v17];
let v37 = -1034556879;
const v39 = (v20 % v37) ** v20;
let v40 = v20 >>> v20;
Math.asin(v39);
++v37;
const v43 = new SharedArrayBuffer();
new DataView(v43);
for (let v46 = 0; v46 < 5; v46++) {
    v46 + v46;
    try {
        v24.h = v20;
    } catch(e48) {
    }
    v40 = v17;
    const o50 = {
    };
    o50.e = o50;
    gc(o50);
}
