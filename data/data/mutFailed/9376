const v0 = [4.0,1000000.0,-8.863716444883141e+307,-7.051358581573066,3.738967773003271,1000000000.0,-1000000000000.0,919632.5343997248];
const v1 = [1.7133488282343096e+307,-1000000000000.0,-452.58254709698394,2.220446049250313e-16,Infinity,2.220446049250313e-16,2.2250738585072014e-308,-1.0,5.994838928136312];
const v2 = [547.895445450237,1000000.0,2.2250738585072014e-308,-8.542354855790935e+307,-508.2816281249165,-1.106938193654006e+308,-2.2250738585072014e-308,-896333.3108367804,-1000000000000.0,-0.0];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "a", { enumerable: true, value: a6 });
    try {
        this.a = a5;
    } catch(e7) {
    }
}
const v8 = new F3(v1, v0, v2, v2, F3);
new F3(v1, v2, v1, F3, v8);
new F3(v2, v0);
const v13 = new Array(8);
new Uint32Array(15);
new EvalError(1107);
new Uint16Array(0, v13, v0, Array);
class C23 {
    constructor(a25) {
        const v26 = this.constructor;
        try { new v26(this, v26); } catch (e) {}
        const v29 = new Float32Array();
        v29.entries();
    }
}
C23[Symbol.toPrimitive] = EvalError;
new C23(C23);
new C23(C23);
for (let v35 = 0; v35 < 5; v35++) {
    function f36() {
        Symbol.search.description.codePointAt(C23);
        return Symbol;
    }
    f36();
    %OptimizeFunctionOnNextCall(f36);
}
