function f0() {
}
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
1000000.0 % 1000000.0;
const v12 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
const v18 = new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = -1.5264047652530307e+308;
const v22 = new Uint8Array();
gc();
-846555954 <= -846555954;
-846555954 + 536870887;
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const v32 = new Date();
const v33 = v32.getUTCDay(-953280260, v18);
v33 >>> v33;
let v35 = 127;
v35 >> v35;
v35++;
function f38(a39, a40) {
    try { a39(f38); } catch (e) {}
    try { a39(BigInt64Array); } catch (e) {}
    a40.constructor(a40);
    return f38;
}
try { new Promise(4096); } catch (e) {}
const v46 = new Promise(f38, Uint8Array);
let v47;
try { v47 = v22.then(); } catch (e) {}
try { v47.then(v12, v22); } catch (e) {}
Uint8Array.length = Uint8Array;
const v50 = new Uint8Array(v35);
function f51(a52, a53) {
    const o54 = {
    };
    o54.g = o54;
    return o54;
}
let v55;
try { v55 = f51(v46, v46); } catch (e) {}
v55.g;
f51.e = f51;
for (let v57 = 0; v57 < 25; v57++) {
    BigInt64Array - v57;
    const v59 = f51();
    v59.g = v59;
    v59.d = Uint8Array;
    Object.defineProperty(v59, v57, { enumerable: true, get: f51, set: f51 });
    8 - 8;
    const v64 = new Int8Array(8);
    try { gc.preventExtensions(v59); } catch (e) {}
    gc.construct(Uint16Array, [v64]);
    v50[v59] = v59;
    gc.name = gc;
    !("sync" == "sync");
    const o73 = {
        "execution": "sync",
    };
    gc(o73);
}
new Uint16Array(102);
new gc(5);
new Float32Array(7);
Math.tanh();
