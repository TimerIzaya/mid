const v6 = [-1900796653,16];
try { v6.toLocaleString(); } catch (e) {}
const v8 = [129n,16,v6,v6];
let v9;
try { v9 = v8.reverse(); } catch (e) {}
[-1900796653,-5n,-1156960280];
Uint8Array.e = 129n;
Uint8Array.e = Uint8Array;
const v13 = new Uint8Array(1000);
function f14(a15, a16) {
    Symbol.iterator;
    const o27 = {
        [a16]() {
            let v20 = 10;
            const o26 = {
                next() {
                    v20--;
                    const v24 = v20 == 0;
                    const o25 = {
                        "done": v24,
                        "value": v20,
                    };
                    return o25;
                },
            };
            return o26;
        },
    };
    return a15;
}
v13.constructor = f14;
try { v9.slice(-1900796653, Uint8Array); } catch (e) {}
new v9(4096);
1024 * 1024;
new BigInt64Array(1024);
class C37 {
    [-55801.39760616061];
}
const v38 = new C37();
v38[Symbol.toPrimitive] = f14;
try { v38.hasOwnProperty(-5n); } catch (e) {}
function f42(a43, a44) {
    return a43;
}
f42.length = f42;
v38[Symbol.toPrimitive] = f42;
const o51 = {
    p(a48, a49) {
        for (const v50 in Symbol) {
        }
        return C37;
    },
};
o51.p(C37, C37, -55801.39760616061);
try { (1000).bind(v8); } catch (e) {}
