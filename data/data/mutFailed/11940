function f0() {
}
const v4 = [-1e-15,2.0,257.2753728308546,536363.0633430232,7.623942542929859e+307,0.31176778201339683,6.716264938794062,-95.43778488143789,162180.7882297351,9.548646479442578];
const v5 = [-1000000000000.0,-980330.7626617283,-1000000000000.0,1000000.0,9.193163825865434e+307,-1.7976931348623157e+308,0.21199428245665475];
try { v5.with(639287160, v5); } catch (e) {}
const v7 = [88.82035943699316,-4.0,1.9469493689542645,5.0,0.5984339415662385,1.0,NaN];
let v8;
try { v8 = v7.groupToMap(-128); } catch (e) {}
class C9 {
    set e(a11) {
        const v12 = this?.constructor;
        try { new v12(); } catch (e) {}
        const v14 = delete a11?.[this];
        v14 || v14;
        const o18 = {
            "maxByteLength": 6,
        };
        o18.maxByteLength;
        const v21 = new SharedArrayBuffer(4, o18);
        DataView.name = DataView;
        new DataView(v21, v21, a11);
    }
}
const v24 = C9.length;
v24 / v24;
const v26 = new C9();
const v27 = v26?.constructor;
let v28;
try { v28 = new v27(); } catch (e) {}
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
const v31 = new C9();
v31.e = v31;
new C9();
const v33 = /(?<=)(?:a+)?A[z-\d]?/i;
v33.b = v33;
v33.e = v33;
const v36 = new Uint8Array(127, 7063, v4, v33);
try { v36.slice(-128, 127); } catch (e) {}
const v39 = 6 % 6;
const v40 = v39 | v39;
v40 << v40;
let v43;
try { v43 = Float64Array.from(v26); } catch (e) {}
if (v43) {
    try {
        v4.toString = v8;
    } catch(e44) {
    }
} else {
    v26 >> v7;
}
Uint32Array.g = Uint32Array;
function f48(a49, a50, a51, a52) {
    try { a49.apply(Uint32Array, Uint32Array); } catch (e) {}
    a49.name = a49;
    let v54;
    try { v54 = a51.toString(); } catch (e) {}
    try { v54.localeCompare(v54); } catch (e) {}
    const o56 = {
        "f": 7063,
        "c": -128,
        1012695029: v31,
    };
    return o56;
}
f48.d = f48;
const v57 = f48(f48, 6, v5, Uint8Array);
v57[1012695029] = v57;
const v58 = f48(6, 127, v43, v8);
v58[1012695029];
const v60 = f48(-128, v8, v7, Float64Array);
try { v60.isPrototypeOf(v58); } catch (e) {}
new Uint32Array(v36);
