const v3 = [-54813,8,-54813,8];
const v4 = [-54813];
const v5 = [-54813];
function f6(a7, a8, a9, a10) {
    a7[0];
    const o20 = {
        n(a13, a14, a15, a16) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a10;
        },
        ...v5,
        "b": v3,
        ...a9,
        ...v5,
        129: 4,
        ...a7,
    };
    o20[129] = o20;
    return o20;
}
const v22 = f6(v4, 8, f6(v4, v5, v3, 4), 4);
f6(v5, 4, 4, 4);
const v28 = /ND2/gds;
v28.dotAll = v28;
class C29 extends Map {
}
C29.name;
const v31 = new C29();
const v32 = v31.isPrototypeOf();
v32 && v32;
class C36 {
    static {
        for (let v38 = 0; v38 < 25; v38++) {
            v38 != v38;
            const v40 = [601759695];
            const v41 = [1073741824,1073741823,1376142744,1073741825];
            try { v41.group(f6); } catch (e) {}
            function f44(a45, a46, a47, a48) {
                try { new a45(); } catch (e) {}
                a46 | a46;
                let v51;
                try { v51 = new a45(); } catch (e) {}
                try { v51.valueOf(); } catch (e) {}
                a47 << a47;
                try { v41.toSorted(f6); } catch (e) {}
                const v58 = new Int32Array(128);
                v58[72];
                const v62 = new Float32Array(1000);
                84 >>> 84;
                BigInt64Array.prototype = BigInt64Array;
                new BigInt64Array(84);
                function f67() {
                    return a45;
                }
                const v68 = v62.constructor;
                try { v68.from(BigInt64Array); } catch (e) {}
                class C70 extends v68 {
                    static d = 522675525n;
                    #c = 84;
                    static 8;
                }
                new C70();
                try { Int8Array.bind(this); } catch (e) {}
                const v74 = new Int8Array();
                try { v74.entries(); } catch (e) {}
                const v78 = BigUint64Array * 536870887;
                v78 - v78;
                Number.isNaN(v78 ** v78);
                function f83(a84, a85) {
                }
                try { f83.__defineSetter__(v40, v41); } catch (e) {}
                try { f83(); } catch (e) {}
                const v88 = v74.buffer;
                const v89 = v88.__defineGetter__;
                v89.name;
                try { v89(); } catch (e) {}
                Object.defineProperty(v88, "constructor", { writable: true, configurable: true, value: a47 });
                %OptimizeFunctionOnNextCall(f67);
                let v93;
                try { v93 = v41["find"](..."find", a48, ...v40); } catch (e) {}
                const o94 = {
                    "h": 128,
                    [Date]: 128,
                    [v22]: f67,
                    __proto__: arguments,
                    ...this,
                };
                o94.e = o94;
                v93 <= a47;
                return arguments;
            }
            for (let v96 = 0; v96 < 5; v96++) {
                f44(this, v96, v96);
            }
        }
    }
}
