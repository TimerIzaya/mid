let v0 = Date;
function f1(a2, a3) {
    v0[4] = a3;
    function f4() {
    }
    return a2;
}
v0[Symbol.toPrimitive] = f1;
const v7 = new v0();
class C8 extends v0 {
    #o(a10) {
        a10 = this;
        return "c";
    }
    c;
    constructor(a15) {
        Object.defineProperty(a15, "NaN", { configurable: true, value: v7 });
        super(a15);
        Math.expm1(-366687.8544616379);
        let v19 = 10;
        for (;
            (() => {
                const v20 = v19--;
                v20 - v20;
                return v20;
            })();
            ) {
            try {
            } catch(e22) {
            }
        }
        v7[v0];
        v0++;
        super.e = v7;
        const v26 = [];
        try { v26.findLast(this); } catch (e) {}
        Reflect.apply(this.getUTCMilliseconds, this, v26);
    }
}
const v30 = new C8(v0);
function f31() {
    return Symbol;
}
Object.defineProperty(v30, "valueOf", { writable: true, configurable: true, enumerable: true, get: f31 });
const v32 = new C8(v7);
new C8(v32);
const v39 = new Int32Array(1000);
try { v39.toSorted(Int32Array); } catch (e) {}
try { Uint16Array.call(-9007199254740991); } catch (e) {}
const v44 = new Uint16Array(1);
v44.constructor = f31;
try { v44.slice(v30, 1); } catch (e) {}
3375 * 3375;
const v50 = new BigUint64Array(3375);
let [v51,,v52,...v53] = v50;
v52 >> v52;
const v56 = [65537,268435441,63298,-5,1235122603];
try { v56.toString(); } catch (e) {}
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this.constructor;
    try { new v64(1024, 1024, v56, this); } catch (e) {}
    a61.caller;
    a63[1];
    this.c = a62;
    const v69 = [Reflect];
    const o70 = {
        __proto__: Reflect,
        "e": v69,
    };
    this.f = a61;
}
new Float32Array(703);
const v75 = new Int8Array(9);
const v76 = v75.reverse();
try { v76.join(512); } catch (e) {}
