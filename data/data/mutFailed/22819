const v0 = [0.27688975566811347];
let v1 = [-5.038702835884548,1000000000000.0,-9.439487550631336e+306,1.0,0.28485298107918255,-1.1213039603560046e+308,-1.2725422868438922e+308,0.5529281738379678,-981769.7978084763];
const v2 = [-1e-15,-861422.1954457142,-3.0,-7.497144550182952,-1e-15,-104.45587154260386,-5.482228954072223,2.220446049250313e-16,-2.2250738585072014e-308];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { a5.map(this); } catch (e) {}
    try { a6.toSpliced(a5, this); } catch (e) {}
    try {
        this.b = a5;
    } catch(e9) {
    }
}
function f10(a11) {
    return v0;
}
class C12 extends f10 {
    static a;
    #a = f10;
}
const v13 = new F3(v1, v0);
v13.b = v13;
const v14 = new F3(v2, v2);
v14.b = v14;
const o15 = {
    "apply": f10,
    "call": f10,
    "defineProperty": f10,
    "deleteProperty": f10,
    "get": f10,
    "has": f10,
    "isExtensible": f10,
    "setPrototypeOf": f10,
};
const v17 = new Proxy(v14, o15);
const v18 = new F3(v1, v1);
let v19 = 6;
v18[6] = F3;
const v20 = v17 >>> v18;
o15[v20] = v0;
v1 += v0;
f10(v20);
const v22 = v19--;
const v25 = -128 + -128;
const v27 = [-128,v2,F3,[v18,v0,v1,-128,v2]];
try { v27.flatMap(v19); } catch (e) {}
function f29(a30, a31, a32) {
    f10(a30, a30, v22, ...a31, v25);
    return a31;
}
f29(v25, v17, -128);
[-128];
for (let v36 = 0; v36 < 25; v36++) {
    const v38 = Math.round();
    for (let v39 = 0; v39 < 10; v39++) {
        async function f40(a41, a42, a43) {
            const v44 = await v38;
            v44 ^ v44;
            Number.isNaN();
            const t56 = [0.8307152163010869,1.0,0.0];
            t56.length = v39;
        }
        f40();
    }
}
