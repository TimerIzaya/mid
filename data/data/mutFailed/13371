new Uint16Array(1000);
new Int8Array(72);
new Uint16Array(2);
new Uint32Array(5);
const v17 = new BigInt64Array(7);
new Float32Array(163);
const v23 = new Uint16Array(9);
new BigInt64Array();
const v29 = new Int32Array(182);
[Int32Array,v23,v29,BigInt64Array];
[2086,[9,Int32Array,v29],Uint16Array,v29];
class C34 {
    static c;
}
const v35 = new C34();
const v36 = new C34();
const v37 = new C34();
class C38 {
    static #n(a40, a41, a42, a43) {
        class C44 {
            4;
            static a;
        }
        C44();
        C44();
        C44();
    }
    7 = v37;
    #a = v36;
}
new C38();
new C38();
new C38();
[v37];
[v35];
function F53() {
    if (!new.target) { throw 'must be called with new'; }
}
new F53();
const v56 = new F53();
const v57 = new F53();
function F58(a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = 182;
    const v62 = a61?.__lookupGetter__;
    try { v62(a60); } catch (e) {}
    try { this.constructor(F58, this); } catch (e) {}
    a60.e = a60;
}
F58.arguments = F58;
const v65 = new F58(v57);
function f66() {
    return v17;
}
function f67(a68) {
    Math.tanh(-1000.0);
}
Object.defineProperty(v65, "e", { writable: true, configurable: true, get: f66, set: f67 });
const v72 = new F58(v65, v56);
v72.e = v72;
("Hyo9")[1];
const t60 = "at";
t60[1] = "at";
const v77 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap;
v77.constructor = f66;
const v78 = v77?.constructor;
try { v78("Hyo9"); } catch (e) {}
[-4.202468609045087];
const v81 = [0.8434386161503777];
try { v81.findLastIndex(v81); } catch (e) {}
const t70 = "4i";
t70[1] = "4i";
const v84 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f85(a86, a87, a88, a89) {
    function f90() {
        let v92 = Float64Array;
        v92 = a87;
        const v93 = v84.length;
        const v94 = v93 >>> v93;
        v94 / v94;
        const o96 = {
        };
        const v97 = [];
        v97[Symbol.isConcatSpreadable] = "at";
        v97["concat"]();
        new Uint8Array(105);
        let v105 = -268435456;
        v105--;
        const o107 = {
            "e": -4294967295,
            "e": v105,
        };
    }
    const v108 = f90();
    %OptimizeFunctionOnNextCall(f90);
    return v108;
}
f85();
f85();
const t97 = "RpXR";
t97[1] = "RpXR";
("c")?.toLocaleUpperCase;
class C115 {
    constructor(a117) {
        ("valueOf").localeCompare(a117, "valueOf");
    }
}
function f119(a120, a121) {
    for (let v122 = 0; v122 < 32; v122++) {
        v57["p" + v122] = v122;
    }
    return a120;
}
C115.toString = f119;
const v125 = new C115();
function f126(a127) {
    (a127 | v77) === f67;
    return a127;
}
Object.defineProperty(v125, "constructor", { writable: true, configurable: true, enumerable: true, value: f126 });
const v130 = v125.constructor;
v130[Symbol.toPrimitive] = f119;
new v130(C115);
