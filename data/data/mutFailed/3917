let v2 = 10;
for (; v2--;) {
}
const v5 = [-18343,10,-9223372036854775808,7,-2,1266834198];
[65536,8,12,-2];
const v7 = [431667931];
class C8 {
    e;
    static get g() {
        try {
            var a = super.subarray();
        } catch(e11) {
        }
    }
    5 = -65536n;
    constructor(a13, a14, a15, a16) {
        v7[-2] %= a16;
        a16 && this;
        for (const v23 of Array(19793)) {
        }
    }
    1 = -65536n;
    [-4n] = v7;
    static b = v5;
}
const v25 = new C8(v7, -65536n, -65536n, -381137624n);
new C8(v5, -4n, -65536n, -65536n);
const v27 = new C8(v5, -4n, -4n, -4n);
function f28() {
    return v7;
}
const o29 = {
};
const v32 = new BigInt64Array(5);
const v35 = v32.toLocaleString(3088, [-536870912,8,9007199254740992,-461574414,3,-268435456,-536870912,65535,-1713660255,128]);
class C36 extends C8 {
    o(a38, a39, a40) {
        try {
            v5.map(a39);
        } catch(e42) {
        }
        return v27;
    }
    constructor(a44, a45, a46, a47) {
        let v43 = this;
        super(v5, a46, a45, a45);
        v43 = a47;
        function F48(a50, a51, a52) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a51;
            } catch(e53) {
            }
            try {
                this.g = -381137624n;
            } catch(e54) {
            }
        }
        class C57 {
            o(a59, a60, a61, a62) {
                class C63 {
                    static 44 = "EV";
                }
                new C63();
                new C63();
                new C63();
                return 0;
            }
            static #f = 0;
        }
        new C57();
        new F48(-381137624n, -381137624n, a46);
        new F48(-65536n, a46, a46);
        new F48(a46, a46, a46);
    }
}
new C36(v25, -4n, -381137624n, C36);
const v72 = new C36(v27, -65536n, -65536n, v27);
new C36(C36, -4n, -381137624n, v72);
const v76 = new Uint8ClampedArray(995);
new BigUint64Array(1690);
const v81 = ["268435441","268435441","268435441"];
let v82;
try { v82 = v35.propertyIsEnumerable(v81); } catch (e) {}
v82[2];
const v85 = new Int8Array(v76);
const v86 = v85.copyWithin;
try { v76.some(v86); } catch (e) {}
