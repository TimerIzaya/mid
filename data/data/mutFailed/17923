function f0() {
}
[-4294967297,-2147483647,1073741824,-58311,512,-128,-34208];
[-256,-57113,-9223372036854775807,-9007199254740991,1,-817364012,7];
[28556,12,-14,-1,257,1,-2147483649];
const v13 = /kQc+/gvm;
/[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/vdiy;
/GivF/gvdy;
const v20 = new BigInt(0);
const v21 = v20?.entries;
try { new v21(); } catch (e) {}
try { v20.map(v20); } catch (e) {}
function f26() {
}
class C27 extends f26 {
}
try {
const t0 = "bigint";
t0();
} catch (e) {}
const t20 = "-1073741824";
t20[8] = "-1073741824";
const v30 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v30[8] = v30;
const v31 = [601759695];
try { v31.toString(); } catch (e) {}
const v33 = [1073741824,1073741823,1376142744,1073741825];
let v34;
try { v34 = v33.map(0); } catch (e) {}
function f35(a36, a37, a38, a39) {
    const o44 = {
        ...v30,
        ..."Vre",
        "c": a39,
        84: arguments,
        ..."Vre",
        ..."Vre",
        4: "-1073741824",
        5: -4294967295,
        6: -268435456,
    };
    %OptimizeFunctionOnNextCall(o44);
    try { v33["find"](..."find", a39, ...v31, ...v33); } catch (e) {}
    return a37;
}
try { f35(8998, BigInt, v33, v34); } catch (e) {}
%OptimizeFunctionOnNextCall(f35);
new Float32Array(1);
1031 + 1031;
function f51(a52, a53) {
    return a52;
}
Int8Array.byteLength = Int8Array;
const v56 = new Int8Array(7);
v56[2] = v56;
v56[4] = v56;
Uint16Array.h = Uint16Array;
const v58 = new Uint16Array(1031);
v58[28] = v58;
function f59() {
    const v61 = ("1073741823").trimRight();
    try { v61.padStart(v61); } catch (e) {}
    const o63 = {
    };
    o63.h = o63;
    o63.e = o63;
    const v64 = o63.constructor;
    try { v64.getOwnPropertyDescriptors(f35); } catch (e) {}
    const v68 = (1922 >> 1922) % 1922;
    v68 - v68;
    (v68 == v68) || v13;
    for (let v72 = 0; v72 < 25; v72++) {
        v72 >>> v72;
        function f74() {
            return f74;
        }
        f74.e = f74;
        function f75(a76, a77, a78, a79) {
            a76 != a76;
            a77.name;
            let v82;
            try { v82 = a77(a79); } catch (e) {}
            try { new a78(); } catch (e) {}
            const v84 = a79 + a79;
            function f85() {
                return v82;
            }
            const v87 = -(4096).length;
            const v89 = f74().constructor;
            try { new v89(a77); } catch (e) {}
            let v91;
            try { v91 = v89(); } catch (e) {}
            v91.bind(v87, v89, v91);
            function f93() {
            }
            f93.description = f93;
            const v95 = new Int8Array();
            let v97;
            try { v97 = v89.setUTCMilliseconds(); } catch (e) {}
            try { v97.codePointAt(a76); } catch (e) {}
            const v100 = ("find").blink("find", v95, v72).replaceAll;
            try { v100(f75, v84); } catch (e) {}
        }
        for (let v102 = 0; v102 < 5; v102++) {
            f75(v102, v64, v64, 1922);
        }
    }
}
function f104() {
    const o105 = {
    };
}
