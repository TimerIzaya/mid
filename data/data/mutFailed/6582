class C3 {
    [0.5321008482462977];
    constructor(a5) {
        a5.h = a5;
        try { new Symbol(); } catch (e) {}
        const v8 = Symbol.iterator;
        const o17 = {
            [v8]() {
                let v10 = 10;
                const o16 = {
                    next() {
                        v10--;
                        const v14 = v10 == 0;
                        const o15 = {
                            "done": v14,
                            "value": v10,
                        };
                        return o15;
                    },
                };
                return o16;
            },
        };
    }
}
const v18 = new C3(C3);
try { v18.constructor(v18); } catch (e) {}
const v20 = new C3(v18);
const v21 = new C3(v18);
function f22(a23, a24) {
    a23.d = a23;
    const o25 = {
        ...v20,
        "h": v20,
        "c": a23,
        ...v20,
        "e": v21,
        256: -3,
        "d": 65536,
        __proto__: a24,
        ...a24,
        "b": a23,
    };
    return o25;
}
const v26 = f22(C3, v21);
f22(v20, v26);
f22(v20, v26);
function F29(a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this?.constructor;
    try { new v32(a31); } catch (e) {}
    a31.arguments = a31;
}
F29.caller;
const v35 = new F29(F29);
gc.arguments = gc;
const v37 = gc();
let v38 = -1024;
const v39 = v38--;
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = a43?.hasOwnProperty;
    try { new v46(0.5321008482462977); } catch (e) {}
}
const v48 = new F40(v37, v35, v35, v39);
const v49 = v48?.constructor;
try { new v49(v48, v48, v26, 65536); } catch (e) {}
const v51 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
}
class C56 {
}
try { C56(); } catch (e) {}
let v58 = -4294967297n;
const v59 = v58--;
v59 >> v59;
const v61 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
for (let v63 = 0; v63 < 5; v63++) {
    function f64() {
        let v66 = Float64Array;
        const v68 = Array();
        function f69() {
        }
        function f70(a71) {
            a71 / a71;
        }
        Object.defineProperty(v68, 0, { configurable: true, enumerable: true, get: f69, set: f70 });
        const v73 = v68.unshift(v38);
        const v75 = new Set();
        function F76(a78, a79) {
            if (!new.target) { throw 'must be called with new'; }
            F76(a79, v75);
        }
        F76.arguments;
        v66 = F40;
        let v82 = v51.length;
        v82++;
        const v84 = v82 >>> v82;
        try {
            v84.forEach();
        } catch(e86) {
        }
        const v87 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.for(Symbol.unscopables.description);
        class C93 {
        }
        const v94 = new C93();
        try {
            v94.__proto__ = F52;
            const v95 = ["Vre"];
            class C96 {
            }
            function* f97(a98, a99) {
                yield* v95;
                return "Vre";
            }
            try { f97.call(v39); } catch (e) {}
        } catch(e101) {
        }
        const v102 = Symbol.toPrimitive;
        Symbol.for(v102.description);
        try {
            Symbol.for(Symbol().description);
        } catch(e110) {
        }
        Symbol.length;
        try { new Symbol(); } catch (e) {}
        const o119 = {
            toString(a115, a116) {
                const v117 = v63 && v66;
                a115 *= v102;
                return v117 <= v87;
            },
        };
        try { o119.toString(522675525n, v82); } catch (e) {}
        const o142 = {
            "c": v58,
            [522675525n](a123, a124) {
            },
            valueOf(a126, a127) {
                return a127;
            },
            [v58](a129, a130, a131, a132) {
            },
            "e": -268435456,
            "arguments": v61,
            ...v48,
            [v102]() {
            },
            "type": C56,
            ..."Vre",
            valueOf(a135, a136) {
                return v59;
            },
            ..."Vre",
            get h() {
                return f64;
            },
            4: "Vre",
            toString(a139, a140, a141) {
                return this;
            },
        };
        o142.c = o142;
        new Float32Array(Array, v73, v82);
        const v146 = new Float64Array(v73);
        v146[1] = v146;
        const v148 = new Uint16Array();
        const v149 = v148?.entries;
        try { new v149("Vre", v149, v149, v149); } catch (e) {}
        return f70;
    }
    const v151 = f64();
    try { v151.apply(f64, v63); } catch (e) {}
    %OptimizeFunctionOnNextCall(f64);
}
