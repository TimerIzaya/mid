const v0 = [];
class C1 {
    p() {
        function f3(a4, a5) {
            const o6 = {
                127: this,
                "b": a5,
            };
            return o6;
        }
        f3(v0, f3);
        f3(f3, this);
        f3(v0, v0);
        return v0;
    }
    static #f = v0;
}
const v10 = new C1();
const v11 = new C1();
const v12 = new C1();
C1[v10] %= -333.26313105702957;
const v14 = v0 instanceof C1;
try { v0.forEach(v10, v10); } catch (e) {}
v12[Symbol.toPrimitive];
const v21 = [-333.26313105702957,6.549187787970766e+307,v12,v11,6.549187787970766e+307];
[v11,[-333.26313105702957,6.549187787970766e+307,v21,v21,v21],v11,v10];
v21 ^ -333.26313105702957;
const v31 = -2.8680029749404046 - 536870887;
Math.asin(-2.8680029749404046);
Math.ceil(536870887);
Math.log10(v31);
536870887 << 6.549187787970766e+307;
Math.hypot(-2.8680029749404046);
/I\P{Decimal_Number}/vms;
/xyz{1,}/gvdi;
/0(?:a+)*/gds;
Float32Array[1] = -1e-15;
const v42 = new Float32Array();
const v44 = new Uint8Array(v42, Uint8Array, Uint8Array);
v42[-1e-15] = Uint8ClampedArray;
class C47 extends Float32Array {
    constructor(a49, a50, a51) {
        super[a51] = v14;
        [4.0,-2.220446049250313e-16,0.7626016632703356];
        [1.0,7.133203261622171,-0.0,-1.7976931348623157e+308,-1.2542384541778762e+308,-6.457437382142652,-6.054448672130091e+307,-4.0];
        [828.8501546461348,-1.7976931348623157e+308,1000000000000.0,2.220446049250313e-16,-1e-15];
        this["toReversed"](..."toReversed", 536870887, ..."toReversed", 536870887);
        a51[1] = v42;
        super(a51);
    }
}
new C47(1, v44, Float32Array);
