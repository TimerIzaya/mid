let v2 = "8MU";
class C3 {
    get h() {
        this[4294967296];
        const o8 = {
            "maxByteLength": 1708913726,
        };
        const v10 = new ArrayBuffer(0, o8);
        new Float32Array(v10);
        return v10;
    }
    #e = "n";
}
const v13 = new C3();
const v14 = new C3();
function f15() {
    let v17 = 128;
    v14 - v14;
    --v2;
    return v2 & --v17;
}
Object.defineProperty(v14, Symbol.toPrimitive, { value: f15 });
const v26 = new C3();
function f27(a28, a29) {
    const o46 = {
        __proto__: v14,
        n(a31, a32, a33, a34) {
            super.g -= a28;
            function F35(a37, a38, a39) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = a28;
                } catch(e40) {
                }
                try {
                    this.f = a32;
                } catch(e41) {
                }
                try {
                    this.c = C3;
                } catch(e42) {
                }
            }
            const v43 = new F35(v14, v26, v14);
            const v44 = new F35(v43, a32, v43);
            new F35(a34, v14, v44);
            return a28;
        },
    };
    return o46;
}
f27("n", "n");
const v48 = f27(f27, "n");
const v49 = f27(v48, v48);
class C50 {
    [v14];
    65537 = 169057.0080169898;
    static #n(a52, a53, a54, a55) {
        d = a53;
        try { ("n").replace(v2, v2); } catch (e) {}
        try { v13["toString"](v48, 169057.0080169898, v2, this, "toString"); } catch (e) {}
        return 169057.0080169898;
    }
    static {
        let v59 = this;
        let v60 = ("n").length;
        ({"length":v60,} = "n");
        ({"a":v2,"d":v59,"length":C3,} = "n");
        try {
            v49.#n(v59);
        } catch(e62) {
        }
    }
}
new C50();
const v64 = new C50();
new C50();
function F66() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F66;
    try {
        this.h = -2;
    } catch(e69) {
    }
    try {
        this.c = -2;
    } catch(e70) {
    }
    try {
        this.f = -2;
    } catch(e71) {
    }
}
const v72 = new F66();
new F66(v72, v72, v64);
new F66();
new Uint32Array(16, F66);
const v80 = new Int8Array(2);
v80[Int8Array] = v80;
new Float64Array(571);
const v86 = new Uint8Array(10);
new Float64Array(7);
const v92 = new Int32Array(16);
const v95 = new Uint8Array(9);
const v98 = v2 - -47811;
+v98 || v98;
function F101(a103, a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = Math;
    try {
        this.c = v95;
    } catch(e106) {
    }
    try {
        this.e = v92;
        const v115 = new Uint8ClampedArray(16);
        g = v26;
        Object.defineProperty(this, v72, { writable: true, configurable: true, get: f27, set: f27 });
        delete this[Uint8Array];
        try { a103(); } catch (e) {}
        for (let v118 = 0; v118 < 32; v118++) {
            v13["p" + v118] = v118;
        }
        v115[10] = v115;
        const v122 = -1322;
        v115["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v86);
        } catch(e124) {
        }
        const v126 = new Uint8ClampedArray(1322);
        let v127 = v126[315];
        function F128(a130, a131, a132, a133) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = this;
            try {
                this.sticky = "536870889";
            } catch(e134) {
            }
            try {
                this.b = a133;
            } catch(e135) {
            }
        }
        new F128(1073741824n, 1073741824n, 257n, "6");
        const v137 = new F128(1073741824n, 257n, 257n, v122);
        const v138 = new F128(v127, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 >>> 3768;
        function f146() {
            const o155 = {
                ["1073741824"]: 268435441,
                874720287: 268435441,
                get d() {
                    try { this.m(268435441, this, this); } catch (e) {}
                    const o152 = {
                    };
                    return Proxy("1073741824", o152);
                },
                ["species"]: "1073741824",
            };
            return o155;
        }
        const v156 = f146(f146);
        const v157 = f146();
        const v158 = f146();
        v158[1073741824] = v158;
        function F159(a161, a162) {
            if (!new.target) { throw 'must be called with new'; }
            const v163 = this?.constructor;
            try { new v163(a161, v156); } catch (e) {}
            a161[1073741824] = a161;
            try {
                this.g = a162;
            } catch(e165) {
            }
        }
        F159.length;
        const v167 = new F159(v158, v156);
        const v168 = new F159(v158, v157);
        const v169 = new F159(v156, v157);
        function f170(a171, a172, a173) {
            a173.g = a173;
            const o179 = {
                "a": a172,
                get e() {
                    v158 & this;
                    return (a172 == a172 ? a172 : a172)[15];
                },
                ...a173,
                "c": v168,
                "f": v169,
            };
            return o179;
        }
        const v180 = f170(v167, v167, v168);
        v180.c = v180;
        f170(v167, v169, v169, v180, f146, v180);
        f170(v168, v167, v167);
        58091 >> 58091;
        Uint8ClampedArray.length;
        try { Uint16Array.from(v168); } catch (e) {}
        const v196 = new Uint16Array();
        try { v196.entries(); } catch (e) {}
        try { ("minor").anchor(v167); } catch (e) {}
        const o203 = {
            "type": "minor",
        };
        gc(o203);
        Array(228);
        class C206 {
        }
        const v207 = new C206();
        const v208 = v207?.constructor;
        try { new v208(); } catch (e) {}
        const v210 = new C206();
        const v211 = v210?.constructor;
        try { new v211(); } catch (e) {}
        new Float64Array(Float64Array, Float64Array, gc);
        Float32Array.e = Float32Array;
        new Uint8Array(6);
        function F224() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C226 {
        }
        const v227 = new C226();
        ReferenceError.captureStackTrace(F224, v227);
        const v230 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
        gc.caller = gc;
        v230["findIndex"](gc);
        const v234 = new BigInt64Array(4046);
        v234[123];
        -115;
        function f239(a240, a241) {
            a240++;
            a241 + a241;
            const v244 = a240++;
            v244 >> v244;
            try {
                v137.toString = a241;
            } catch(e246) {
            }
            Object.defineProperty(v138, v138, { configurable: true, enumerable: true, get: f239 });
            let o248 = {
                "d": a240,
                ...a240,
                get e() {
                    return a241;
                },
            };
            [,...o248] = v234;
            a241[4046];
            const o252 = {
                "maxByteLength": 3035,
            };
            o252.n = v138;
            const v254 = v127--;
            v126[v254] ||= v254;
            try { o252.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f239(4046, 3768);
        try { Uint8ClampedArray.bind(f239); } catch (e) {}
    } catch(e263) {
    }
}
new F101(9, 16, 16);
const v268 = new Int16Array(2);
v268.lastIndexOf(2.220446049250313e-16);
