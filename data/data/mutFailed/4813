new WeakSet();
Uint8Array.e = Uint8Array;
const v7 = new Uint8Array(209);
127 & 127;
function f10() {
    const t5 = ("match").__proto__;
    t5[1478] = f10;
    return "match";
}
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
new Uint32Array(127);
-1024;
const v17 = 1024 >> 1024;
v17 - v17;
Uint8ClampedArray.e = Uint8ClampedArray;
new Uint8ClampedArray(1024);
1660 / 1660;
const t16 = [1000.0,-1000000000000.0,-7.943810730626244,-1.7976931348623157e+308,1.0,4.0];
t16.length = -9223372036854775808;
const o27 = {
    "execution": "async",
};
gc(o27).then();
BigUint64Array.length = BigUint64Array;
const v31 = new BigUint64Array(1660);
try { v31.toSorted(7); } catch (e) {}
new BigInt64Array(1024);
1000 != 1000;
new Uint8ClampedArray(1000);
const o40 = {
};
v7.lastIndexOf(Math.cbrt(7));
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = a48 * a48;
    o40.constructor;
    class C52 extends Int32Array {
    }
    v49();
    const v54 = this.constructor;
    const v56 = 2 >= 2;
    class C57 {
        constructor(a59, a60) {
            try {
                this.fuck(a60, "function");
            } catch(e63) {
            }
        }
    }
    v56 && v56;
    this.length = 2;
    0 ^ 9;
    function F68(a70) {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new v54(this); } catch (e) {}
}
F45.e = F45;
const v72 = new F45();
const v73 = v72.constructor;
v73.caller;
new v73();
