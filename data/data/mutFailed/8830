const v2 = new Uint8Array(220);
const v5 = new BigUint64Array(3930);
const v9 = new Date(-4.0);
try { v9.getSeconds(); } catch (e) {}
new Int16Array(1024);
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(this, 220); } catch (e) {}
    a21.length;
    try { this.constructor(128, this); } catch (e) {}
    a22 + a22;
    try {
        this.a = 5;
    } catch(e28) {
    }
    try {
        this.b = 5;
    } catch(e29) {
    }
    try {
        this.d = a22;
    } catch(e30) {
    }
}
const v31 = new F19(F19, -195224844);
v31.b = v31;
const v32 = new F19(5, 5);
const v33 = new F19(-195224844, 128);
v33.a = v33;
v33.a = v33;
const v36 = 129 === 129;
v36 || v36;
try { new Array(v32); } catch (e) {}
let v41;
try { v41 = Array.bind(-195224844); } catch (e) {}
try { Reflect.getPrototypeOf(237); } catch (e) {}
const v45 = [1024];
v45.length = v45;
const v46 = Reflect.construct(Date, v45, v41);
const v47 = v9[v45];
v2[Date];
237 ^ 237;
~(237 & 237);
try {
    v9.valueOf = v46;
} catch(e52) {
}
try {
    Array.c = v41;
} catch(e53) {
}
const v54 = new Array(237);
try { v54.map(220); } catch (e) {}
Int32Array.g = Int32Array;
const v58 = new Int32Array(182);
const v59 = v58?.toString;
try { new v59(); } catch (e) {}
const v63 = new Uint8Array(10);
let v64;
try { v64 = v63.reduce(129); } catch (e) {}
try { new BigInt64Array(BigInt64Array, v33, v63); } catch (e) {}
new BigInt64Array(3);
function f69() {
    const v72 = 1261703539 === 1261703539;
    v72 && v72;
    1261703539 / 1261703539;
    class C75 {
    }
    C75.e = C75;
    C75.length = C75;
    -127;
    const v79 = `
        try {
            new Float64Array(127);
        } catch(e81) {
        }
    `;
    let v82 = -65535;
    v82 * v82;
    const v84 = v82 / v82;
    const v85 = ~v84;
    v85 - v85;
    const o187 = {
        __proto__: 352326470,
        next() {
            v82--;
            const v90 = v82 == 0;
            const o91 = {
                "done": v90,
                "value": v82,
            };
            return o91;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v82,
        m(a93) {
            this.__proto__ = this;
            let v94;
            try { v94 = a93.next(); } catch (e) {}
            const v95 = v94?.__defineGetter__;
            try { new v95("g", v5); } catch (e) {}
            a93.c = a93;
            a93.h = a93;
            const o97 = {
            };
            o97.h = o97;
            o97.h = o97;
            o97.h = o97;
            function f98(a99, a100, a101) {
                function f103(a104) {
                    a100[5] ||= f69;
                }
                this.onmessage = f103;
                const v107 = new SharedArrayBuffer(35);
                new BigUint64Array(v107);
            }
            f98.caller = f98;
            try {
                o97.e = v82;
            } catch(e110) {
                const v114 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v114, o97);
            }
            super[v32];
            try { v47["getDate"](v79, Float64Array); } catch (e) {}
            v31.a;
            const v120 = [50792,-62509,-1848965217,0,536870889,536870888,512,2147483649,3];
            try { v120.lastIndexOf(f98); } catch (e) {}
            [-54870,-36851,255,-11,512,43878,536870912,2147483648,-16];
            [8,14,-62243,10,-736345411,-9223372036854775808];
            try {
                const o124 = {
                };
                o124.e = 1261703539;
                o124.g = a93;
            } catch(e125) {
            }
            try { Math.expm1(v72); } catch (e) {}
            let v128;
            try { v128 = Math.expm1(128); } catch (e) {}
            ~v128;
            const v131 = -9007199254740991 === -9007199254740991;
            v131 || v131;
            let v133 = -9007199254740991 >> -9007199254740991;
            v133++;
            const v135 = v133 - v133;
            v135 === v135;
            let v137 = Math.sin(-9007199254740991);
            v137--;
            let v140;
            try { v140 = ("EV").link(v84); } catch (e) {}
            let v141 = 0;
            v141 != v141;
            class C143 {
                o(a145, a146, a147, a148) {
                    class C149 {
                        static 44 = "EV";
                    }
                    new C149();
                    new C149();
                    new C149();
                    return v141;
                }
            }
            try { C143(); } catch (e) {}
            const v154 = C143.name;
            try { v154.charCodeAt(1024); } catch (e) {}
            3938 << 3938;
            try { new Int8Array(v133, Int8Array, 127); } catch (e) {}
            const v160 = new Int8Array(3938);
            try { v160.findIndex(v31); } catch (e) {}
            let v162 = 3;
            v162 - v162;
            const v164 = v162++;
            v164 !== v164;
            v164 + v164;
            let v167 = 0;
            v167--;
            v167 >>> v167;
            let v170 = v167 >> v167;
            v170 - v170;
            for (let i = 0; i < 5; i++) {
                v167 < 8;
                [...v162] = v160;
                const v174 = v167++;
                const v175 = v174 % v174;
                v175 >> v175;
            }
            const o177 = {
            };
            o177.h = o177;
            o177.e = 1261703539;
            try {
                let v178 = 0;
                do {
                    ({"c":v64,"d":v141,...v170} = v140);
                    try {
                        o97.fuck(128, a93);
                    } catch(e180) {
                        e180.message = e180;
                    }
                    let v181 = v178++;
                    v181--;
                } while (v178 < 5)
                const o185 = {
                };
                o185.c = o185;
                o185.g = a93;
                o185.h = 352326470;
            } catch(e186) {
            }
            return this;
        },
    };
    let v188;
    try { v188 = o187.m(o187); } catch (e) {}
    try { v188.next(); } catch (e) {}
    class C191 {
    }
    try { new C191(); } catch (e) {}
    C191.length = C191;
    const v193 = new C191();
    v193?.constructor;
    Float32Array.length = Float32Array;
    const v196 = Float32Array.name;
    try { v196.startsWith(v196); } catch (e) {}
    const v198 = new Float32Array(v193, "nt", Float32Array);
    const t231 = "nt";
    const v199 = delete t231[v198];
    let v200;
    try { v200 = v193.floor(v199); } catch (e) {}
    for (const v201 in v200) {
    }
    v188.e = v188;
}
try { new f69(); } catch (e) {}
f69();
f69();
function f206(a207, a208, a209, a210) {
}
const v213 = Symbol.toPrimitive;
Symbol.for(v213.description);
v213.description;
("lastIndexOf")[v213];
function f219(a220, a221) {
    const o224 = {
        set b(a223) {
        },
    };
}
f219();
256 >>> 256;
256 >>> 256;
function F231(a233, a234, a235) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new Uint8Array(v213, v54, v213); } catch (e) {}
const v238 = new Uint8Array(8);
v238[7] = v238;
try {
} catch(e239) {
}
const v240 = [-223.21974199729607,0.6826909196761026,-7.610543209781418e+307,1000000000.0,-2.2250738585072014e-308,0.4672319347741436,-1000000.0,-3.0,-5.0,6.966874548897];
v240[4];
const v244 = v240.fill(-9007199254740990n, 9007199254740990);
let v245;
try { v245 = v244.toString(); } catch (e) {}
try { v245.big(); } catch (e) {}
let v247;
try { v247 = v245.includes(v31); } catch (e) {}
v247 && v247;
