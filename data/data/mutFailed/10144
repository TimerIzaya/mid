let v2 = -4294967296;
class C3 {
    constructor(a5, a6) {
        try {
            a5.b = this;
            [-1073741824,-9007199254740990,-2,26462,-1421988441,1787,65535,-20319099];
            [8,4294967296,1,536870889,1914491753,-4,127];
            [-10694,-12820,-13,512];
            a5 -= 8780;
            this[10];
        } catch(e11) {
        }
    }
    static 1073741824;
    e;
    #valueOf(a13, a14) {
        do {
            let v19 = "-2";
            v19++;
        } while (0 < 7)
        return this;
    }
}
const v23 = new C3(v2, 8780);
const v24 = new C3(v23, C3);
const v25 = new C3(8780, v24);
[v24,v2,v2,C3];
[8780,8780,8780];
[v24];
class C29 extends C3 {
    get e() {
        const v33 = [4096,4096,4096];
        function F34(a36, a37, a38, a39) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v40 = new F34(4096, 4096, v33, v33);
        const v41 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        class C42 {
        }
        const v43 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v44 = [601759695];
        for (let v45 = 0; v45 < 5; v45++) {
            function f46() {
                const v50 = new Uint32Array(51);
                v50.indexOf(51);
                const o52 = {
                };
                Array().unshift();
                try {
                    v41.forEach(Float64Array);
                } catch(e57) {
                }
                const o58 = {
                    "c": v44,
                    "arguments": v43,
                    ...v23,
                    "type": C42,
                };
                const v59 = [];
                function f60() {
                }
                const v62 = new Uint8ClampedArray();
                class C63 {
                    constructor(a65, a66, a67, a68) {
                        const v69 = this.constructor;
                        try { new v69(a67, a68, a65, v69); } catch (e) {}
                        for (let v71 = 0; v71 < 5; v71++) {
                            v62[v71] = a68;
                        }
                    }
                }
                new C63(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray, C63);
                v41[Symbol.toPrimitive] = f60;
                function F75(a77) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                class C78 extends F75 {
                    valueOf(a80, a81, a82, a83) {
                        super[this] = F75;
                    }
                }
                const v84 = new v40();
                const o91 = {
                    set g(a86) {
                    },
                    [v59](a88, a89, a90) {
                    },
                };
                for (const v92 in C78) {
                    try { v33.flat(4096); } catch (e) {}
                    new C42();
                    try { v84.valueOf(v92); } catch (e) {}
                }
            }
            f46();
            %OptimizeFunctionOnNextCall(f46);
        }
        try {
            super.o();
        } catch(e99) {
        }
        this[-128] = v2;
        Math.expm1(-128);
        Math.sin(-5.0);
        const v103 = v24 ** -5.0;
        Math.atan2(v2, this);
        Math.asin(v103);
        !-128;
        v2++;
        return 8780;
    }
    #d = v25;
}
const v108 = new C29();
new C29();
new v108();
function f111() {
    for (const v115 of Array(4087, Array, Array)) {
    }
    return f111;
}
%PrepareFunctionForOptimization(f111);
f111();
%OptimizeFunctionOnNextCall(f111);
f111();
