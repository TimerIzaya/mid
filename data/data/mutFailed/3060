function f2(a3) {
    const o4 = {
    };
    return o4;
}
f2();
class C6 extends f2 {
}
function f10() {
    return f10;
}
const v11 = /(?:a*)+q(?<a>.)/guds;
function f12(a13) {
    const v14 = a13?.constructor;
    let v15;
    try { v15 = v14(a13, f10); } catch (e) {}
    const o26 = {
        get d() {
            const v17 = [727957804,7,49072,-63418,-4,-52120,127,1273312700,-128];
            function f18() {
                return v17;
            }
            class C19 {
                constructor(a21, a22, a23, a24) {
                    arguments[0] = arguments;
                }
            }
            return this;
        },
    };
    return v15;
}
for (let v27 = 0; v27 < 50; v27++) {
    f12(v11);
}
class C30 {
    n(a32, a33) {
        const v35 = new Int16Array();
        v35[1];
        f12.tan(9007199254740992);
        [a33,2147483647,a32,"TSKp","object"];
        const v41 = [a32,f2,2147483647];
        [2147483647,v41,a33,v41];
        return "object";
    }
    #b;
    static set e(a44) {
        function F45() {
            if (!new.target) { throw 'must be called with new'; }
            const v47 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
            function F48(a50, a51, a52, a53) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v54 = new F48(v47, F45, v47, F48);
            const v56 = [F45,F45,F45,F45];
            Reflect.apply(v47.indexOf, v54, v56);
        }
        super.b;
    }
    static [-39158];
    static b = "TSKp";
}
new C30();
new C30();
const v62 = new C30();
function f65(a66, a67) {
}
class C71 {
    constructor(a73, a74) {
        function f75(a76) {
            function f78(a79) {
                a79 & a79;
            }
            this.onmessage = f78;
            v62.__proto__;
        }
        const v86 = [f75];
        const o87 = {
            "arguments": v86,
            "type": "m",
        };
        new Worker(f75, o87);
    }
}
const v89 = new C71(-4.0, -4.0);
new C71(9007199254740992, -1024);
const v92 = new Uint8Array(227929340);
try {
const t0 = 1024;
t0(v92, 1024, v89);
} catch (e) {}
let v94;
try { v94 = v92.m(227929340, v92); } catch (e) {}
try {
    const o95 = {
    };
    o95.h = v94;
    const v96 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
    const v97 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
    try { v97.concat(v96); } catch (e) {}
    try { gc.bind(v97); } catch (e) {}
    o95.d = 512;
} catch(e101) {
}
class C103 {
}
const v104 = [-1e-15,-2.0,4.0];
const v105 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
const v106 = [-5.0,-2.0,-1.5942587568933252e+308,1.0730723170600494e+307,0.0,-2.2250738585072014e-308,-446.9921213911738];
class C107 {
    [v106] = v105;
    static #c;
    #o(a109, a110) {
        Symbol.search;
    }
    set e(a114) {
        this[this] = v104;
        SharedArrayBuffer();
        const v120 = Uint8ClampedArray();
        class C121 {
        }
        const o122 = {
            "c": v120,
            __proto__: C121,
        };
    }
}
const v123 = new C107();
class C124 extends C107 {
    constructor(a126, a127, a128) {
        super();
        class C130 extends v123.constructor {
            static #a = this;
            static [v105] = this;
        }
    }
    4294967295;
}
const v131 = new C103();
const v134 = new Int16Array(C103);
class C139 {
    constructor(a141, a142, a143) {
        function f144(a145, a146) {
            return a145;
        }
        this[Symbol.toPrimitive] = f144;
        a142[4] = v131;
        for (let v149 = 0; v149 < 25; v149++) {
        }
    }
}
new C139(v131, v134);
const v152 = new C139(C30, Uint32Array);
new C139(v152, C103);
