function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    try { new v9(-143547321); } catch (e) {}
    a8 - a8;
    this.g = -1517929768;
    try {
        this.g = -1;
    } catch(e12) {
    }
    try {
        this.h = a8;
    } catch(e13) {
    }
}
const v14 = new F6(-1);
const v15 = new F6(-143547321);
v15.d = v15;
class C16 extends F6 {
    #p(a18, a19) {
        const v20 = a18?.[32];
        Object.defineProperty(v15, v14, { writable: true, configurable: true, value: F6 });
        return v20;
    }
    [-1];
    static {
        let v23;
        try { v23 = this["n"](-1517929768); } catch (e) {}
        const o24 = {
        };
        const o25 = {
            "c": v14,
            ...v23,
            65537: o24,
            __proto__: this,
            "a": this,
            "g": this,
            ...this,
        };
    }
}
try { C16(); } catch (e) {}
const v27 = new C16();
const v29 = new Map();
function f30(a31, a32, a33, a34) {
    a31 >>> a31;
    a34--;
    const o50 = {
        "c": -143547321,
        toString(a38, a39, a40, a41) {
            let v37 = this;
            a39 << -1557853178;
            let v45 = v37++;
            Math.log2(v45);
            const v47 = v45++;
            Math.pow(v45, -1557853178);
            F6 ^ v47;
            return a41;
        },
        "b": v27,
    };
    try { o50.toString(v29, a31, v15, v15); } catch (e) {}
    return o50;
}
function f52() {
    return 710.9629368614128;
}
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.a = 710.9629368614128;
    } catch(e57) {
    }
}
new F53(2.220446049250313e-16, 2.220446049250313e-16);
const v59 = new F53(2.220446049250313e-16, -2.0);
const v60 = new F53(2.220446049250313e-16, v59);
const v62 = [-1.5424212036356715e+308];
v62[536870887n] = v62;
function f65() {
    const o75 = {
        [-2147483649](a67, a68) {
        },
        valueOf(a70, a71) {
            return 12;
        },
        valueOf(a73, a74) {
            return a74;
        },
    };
    return -1517929768;
}
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    const t95 = null;
    t95.valueOf = v27;
    const v83 = new BigUint64Array(256);
    try {
        v83.length = 16;
    } catch(e85) {
    }
    try {
        const v88 = new Float32Array(2);
        const v90 = new Int32Array(v88);
        v90.fill();
        this.c = a79;
    } catch(e92) {
    }
    try {
        this.e = a78;
    } catch(e93) {
    }
    try {
        this.g = v60;
        const v95 = v15.constructor;
        try { new v95(WeakSet); } catch (e) {}
        const v98 = new Uint8Array(Uint8Array);
        const o99 = {
            ...v98,
        };
        let v100;
        try { v100 = o99.n(this); } catch (e) {}
        return v100;
    } catch(e101) {
    }
}
new F76(710.9629368614128, v59);
new F76(-2.0, f52);
new F76(710.9629368614128, 2.220446049250313e-16);
function f105() {
    const v107 = new Uint16Array();
    function f108(a109, a110, a111, a112) {
        Math.round();
        return Math;
    }
    f108(f108, f108, f108, f108);
    const v116 = v107.fill(f105, Uint16Array, f105);
    v116.entries(f105, v116, v107, v116, v107).next();
    return Uint16Array;
}
f105.toString = f52;
%PrepareFunctionForOptimization(f105);
function F119() {
    if (!new.target) { throw 'must be called with new'; }
}
Symbol.for(Symbol);
const v125 = new Date(5);
v125.setMilliseconds(5);
f105();
%OptimizeFunctionOnNextCall(f105);
f105();
