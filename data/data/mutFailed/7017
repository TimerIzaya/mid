class C2 extends Int32Array {
}
Date.parse([10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163]);
const o7 = {
};
const v8 = o7.propertyIsEnumerable;
const v9 = /8[\cA]v/uisy;
const v10 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v10.length = v9;
} catch(e11) {
}
function f13(a14) {
    function f15() {
        return f15;
    }
    function f16() {
        return f16;
    }
    const o20 = {
        "e": -256,
        "h": a14,
        [-256]: a14,
        "f": a14,
        toString(a18) {
            let v19;
            try { v19 = new a14(a18, a14, this); } catch (e) {}
            return v19;
        },
        [-2]: 3,
        ...a14,
        "d": a14,
    };
    return o20;
}
const v21 = f13(3);
const o29 = {
    get a() {
        class C23 {
            constructor(a25, a26) {
            }
        }
        eval();
    },
};
const v30 = f13(v21);
function f31(a32, a33, a34) {
    const o70 = {
        n(a36, a37) {
            class C46 extends Int32Array {
            }
            function F52() {
                if (!new.target) { throw 'must be called with new'; }
            }
            super.e = Int8Array;
            let v55;
            try { v55 = a34(a34); } catch (e) {}
            function F56(a58, a59, a60, a61) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = a58;
                } catch(e62) {
                }
                try {
                    this.g = f13;
                } catch(e63) {
                }
                try {
                    this.b = a59;
                } catch(e64) {
                }
            }
            new F56(v55, -7, 0.26481039032190734, 6.921221993207333e+307);
            new F56(3, -15, a33, 0.26481039032190734);
            new F56(-7, -15, 534036.2673704436, 534036.2673704436);
            class C68 {
                static get b() {
                }
            }
            return a33;
        },
    };
    return a34;
}
v8(v30);
class C78 {
    constructor(a80, a81, a82) {
    }
    [-15];
    #valueOf(a84, a85) {
    }
    static {
        try {
        const t0 = "boolean";
        t0(this);
        } catch (e) {}
    }
}
