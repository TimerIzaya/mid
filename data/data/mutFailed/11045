class C3 {
    constructor(a5) {
        for (let v6 = 0; v6 < 32; v6++) {
            this["p" + v6] = v6;
        }
        const v11 = new Float32Array(7);
        [6];
        [7,-6,-1426731691,536870888,5725,-10,-8051,513389565,268435440,-1073741824];
        [-648705431,-1306863618,-1273721992,4458];
        -35521 / C3;
        a5?.g;
        v11.includes(1234, 1000);
    }
    static valueOf(a21, a22) {
        try { this.valueOf(48946, this, a22, this); } catch (e) {}
        try {
            this.h = 48946;
        } catch(e24) {
        }
        return -35521;
    }
}
const v25 = new C3(-14);
const v26 = new C3(48946);
new C3(48946);
const v30 = new Int32Array(2837);
new Float64Array(5);
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a39;
    } catch(e42) {
    }
    try {
        this.d = v25;
    } catch(e43) {
    }
    try {
        this.h = v30;
    } catch(e44) {
    }
}
const v45 = new F36(5, Int32Array, -35521, 5);
const v46 = new F36(5, v45, -14, 48946);
new F36(5, v46, 2837, 48946);
new Uint16Array(512);
class C52 {
    m(a54, a55) {
        super[a55];
        a55?.[11];
        return 5.0;
    }
    toString(a59, a60, a61) {
        let v58 = this;
        ({"d":v58,} = v26);
        a59[4294967296] = Int32Array;
        return a61;
    }
    constructor(a63) {
        class C64 {
            static [11] = this;
            static d = 11;
            static [this] = this;
        }
        new C64();
        new C64();
        new C64();
    }
}
const v68 = new C52(11);
const v69 = new C52(11);
const v70 = new C52(-5.0);
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a73;
    } catch(e75) {
    }
}
const v76 = new F71(v68, v70);
const v77 = new F71(v69, v70);
new F71(v76, v70);
function f79() {
    return v68;
}
new Map();
class C86 {
    constructor(a88) {
        ("buffer")["search"](..."buffer", ..."search", ..."search", a88, ..."search", 52021);
        super.d = arguments;
    }
    static h;
    static #a;
    [-5.0] = -5.0;
    #g = "buffer";
    static #c;
    static #e = C86;
}
const v92 = new C86(C86);
const v93 = new C86(v92);
new C86(v93);
const v96 = new WeakMap();
new BigInt64Array(129, v77, BigInt64Array, v96);
new Int8Array(12);
const v105 = new Uint32Array(1024);
const v106 = /1xyz{1,}?/gims;
const v107 = /h\p{gc=Nd}/vdy;
const v108 = /\xf0\x9f\x92\xa9a*/us;
class C112 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v118;
        try { v118 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v118.#p(undefined, v118, v118, undefined);
        } catch(e120) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v121 = new C112();
const v122 = new C112();
const v123 = new C112();
function f124(a125) {
    const o131 = {
        15: a125,
        valueOf(a127, a128) {
            super.h = a128;
            try { C112.stringify(a125, a125, this); } catch (e) {}
            try {
                C112.c = v121;
            } catch(e130) {
            }
            return a128;
        },
        2147483647: undefined,
        __proto__: v122,
        "c": a125,
        ...a125,
        "f": a125,
    };
    return o131;
}
const v132 = f124(v105);
f124(v123);
f124(v132);
for (let i136 = 0; i136 < 5; i136++) {
    try {
    } catch(e142) {
    }
}
function F144(a146, a147, a148, a149) {
    if (!new.target) { throw 'must be called with new'; }
}
const v150 = new F144(v108, 1, -1263139894, F144);
const v151 = new F144(v106, v108, -23596, v150);
const v152 = new F144(v107, F144, -23596, 1);
const v153 = v152 | F144;
let v154;
try { v154 = v151(v108, v153, v153); } catch (e) {}
if (v154) {
} else {
}
