const v0 = [-365244.3061316457,-567.2838629043431,-2.2250738585072014e-308,0.0];
const v1 = [0.478267043566344];
const v2 = [0.573695458926373,0.40132983189211846,-1.492279046310362e+307,1.2239380394631734e+308,1.0,8.33749198658139,0.3743597666917885,6.868676328765218,1000000.0];
class C3 {
    static 3641;
    static d;
    e = v1;
    get h() {
        return this;
    }
    static #b = v2;
}
const v8 = v0?.constructor;
try { new v8(v0); } catch (e) {}
new C3();
new C3();
new C3();
try { ("c").valueOf(); } catch (e) {}
const o17 = {
};
o17.c = o17;
class C19 {
}
const v20 = o17.constructor;
try { v20.defineProperties(v1, C3); } catch (e) {}
1922 != 1922;
const v24 = 1922 % 1922;
v24 & v24;
const v26 = v24 == v24;
for (let v27 = 0; v27 < 25; v27++) {
    function f28() {
        return f28;
    }
    function f29(a30, a31, a32, a33) {
        function f34() {
        }
        let v36 = -f34.length;
        v36--;
        const v38 = f28();
        try { v38(); } catch (e) {}
        const v40 = v38.constructor;
        try { new v40(v40); } catch (e) {}
        const v42 = v2();
        let v43;
        try { v43 = v42.bind(); } catch (e) {}
        try { v43(); } catch (e) {}
        const v45 = v43.bind();
        const v46 = v40 * v26;
        v46 - v46;
        const v48 = typeof f34;
        let v49;
        try { v49 = v48.italics(v48, v36, v45, v27, o17); } catch (e) {}
        try { v49.strike(); } catch (e) {}
        v48 === "n";
        const v54 = new Int8Array();
        const v55 = v54.entries();
        let v56;
        try { v56 = v55.next(); } catch (e) {}
        const v57 = v55.next(1.185961373472971e+308, f28, o17, v56);
        v57.value = v57;
        ([-2.2250738585072014e-308,-0.0,3.0,743.9950267369297]).sort(v42);
        C19.name;
        const v62 = new Uint32Array(v54, v57, v27);
        v62.subarray();
        const v65 = v0.entries()?.__lookupGetter__;
        try { new v65("n"); } catch (e) {}
        ([]).toLocaleString();
        BigUint64Array * 536870887;
        const v74 = ("find").blink().replaceAll;
        v74.d = v74;
        try { v74(); } catch (e) {}
    }
    for (let v76 = 0; v76 < 5; v76++) {
        f29();
    }
}
