class C1 {
    #n() {
        class C3 {
            [this] = true;
            #d = this;
            #h;
        }
        new C3();
        new C3();
        new C3();
        return C3;
    }
    8;
    268435456 = true;
    #b = true;
}
const v7 = new C1();
const v8 = new C1();
v8[268435456];
const v10 = new C1();
-37383 % -37383;
const v16 = [-13,v7,true,[-37383,-13,true,v10,-13],C1];
[true,C1,v16,-37383,4294967296];
578 << 578;
new BigUint64Array(578);
let v22 = 0;
v22--;
const v25 = new Int32Array(v22);
try { v25.lastIndexOf(v7); } catch (e) {}
try { Int8Array(-37383, Int8Array, v16); } catch (e) {}
new Int8Array(3);
class C31 {
}
C31.length;
for (let v33 = 0; v33 < 5; v33++) {
    v33 >>> v33;
    function f35() {
        try { new Symbol(); } catch (e) {}
        const v38 = Symbol.toPrimitive;
        Symbol.for(v38.description);
        try { Symbol.bind(v33); } catch (e) {}
        Symbol.for(Symbol.for(v38.description).description);
        let v46;
        try { v46 = Symbol.toString(); } catch (e) {}
        try { v46.match(578); } catch (e) {}
        Symbol.for(Symbol.for(v38.description).description);
        function f53() {
            const o56 = {
                m(a55) {
                    return f53;
                },
            };
        }
        try { f53(); } catch (e) {}
        try { f53(); } catch (e) {}
        const v60 = v38.description.codePointAt(C31);
        v60 - v60;
        v60 & v60;
        v60 + v60;
        return Symbol;
    }
    const v64 = f35();
    v64.split = v64;
    %OptimizeFunctionOnNextCall(f35);
}
