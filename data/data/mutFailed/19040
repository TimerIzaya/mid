const v2 = new Uint8Array(94);
new WeakMap(189);
const v8 = new Uint32Array(1000);
const v9 = [v2,WeakMap,Uint8Array];
[v2,[94,v8,WeakMap,189,94]];
const v16 = new Set();
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a19;
    } catch(e21) {
        for (let [v22,v23] of a19) {
            class C24 {
            }
            function f25(a26, a27, a28) {
                this[Symbol.match] = C24;
                return 2147483647;
            }
            f25(v9, v9, v23);
            const v32 = new C24(e21, this);
            const v33 = v32.g;
            try {
                v33.length = 1;
            } catch(e35) {
            }
            try {
                v16.values();
            } catch(e37) {
            }
        }
    }
    try {
        this.h = v16;
    } catch(e38) {
    }
    try {
        const v39 = v16[this];
        try {
            new F17(v39, -268435456n);
        } catch(e42) {
        }
        this.b = Set;
    } catch(e43) {
    }
}
try { v2.subarray(); } catch (e) {}
const v47 = ~v8;
const v48 = Set ^ v8;
BigInt.ceil(v47);
!v48;
const v51 = new F17(Set, Set);
let [v52,,...v53] = v16;
const v56 = v53[Symbol.toPrimitive];
try {
    v51.toString = v56;
} catch(e57) {
}
new F17(Set, F17);
const v59 = new F17(v51, F17);
[28.464807941936897,0.6876471799475875,-4.024971662372387,-1000000000.0,-982.6382193743566,Infinity,0.0,-4.0,-821.2850284587798];
[0.27109226904944717,-4.9641037907328345,0.0,2.220446049250313e-16];
[-0.0,1.0,Infinity,609.6267739945692,0.5061350985708035];
const v66 = [65537,268435441,63298,-5,1235122603];
const v67 = [128,215394418];
let v68;
try { v68 = v67.entries(); } catch (e) {}
const v69 = [-2,-4294967296,4294967297];
function F70(a72, a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    const v76 = this.constructor;
    try { v76(1024, 1024, v66, Symbol, a73); } catch (e) {}
}
const v78 = new F70(-714582153, F70, -714582153, v67);
const v80 = new F17(v59, null);
new Float32Array(16);
new BigUint64Array(0);
new Int32Array(1519);
v78.length;
let v91 = -891.6978980561577;
v91 = 1e-15;
v59[368387631];
const v95 = new F70(9, v78, 9, v69);
v95.b = v95;
const v96 = new F70(1024, v95, v69, v69);
let v102;
try { v102 = ("string").trimStart(); } catch (e) {}
let v103 = -1;
v68?.[3];
let v106;
try { v106 = v102(); } catch (e) {}
v66[v106] = v67;
-2147483647 ^ 9;
const v111 = -1000;
~9;
v111 >>> v111;
a = ("string").length - F70;
v16[v95];
v80.__proto__;
-35417 - -35417;
class C119 {
}
function f120(a121, a122, a123, a124) {
    return v96;
}
f120(-9007199254740991, v102);
v68[v95] ||= ([1024,19026,1125846339]).length;
Math.tan(-1);
function f131() {
    const o139 = {
        ...1.7976931348623157e+308,
        [-2]: 1.7976931348623157e+308,
        __proto__: 256,
        [1.7976931348623157e+308](a135) {
            0 < 10;
        },
    };
    return o139;
}
const v140 = f131();
class C141 extends f131 {
    3164398692 = v140;
    10000 = f131;
}
C141[741] %= 13;
const o145 = {
    set b(a144) {
        v103 <<= v103;
    },
};
