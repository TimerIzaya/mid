class C3 {
    constructor(a5) {
        function f6() {
            try { a5(a5, 62601, C3, this, this); } catch (e) {}
            Symbol.toPrimitive;
            return Symbol;
        }
        this[Symbol.toPrimitive] = f6;
        Symbol.for(Symbol.toPrimitive.description);
        const o21 = {
            [this]() {
                return -2;
            },
        };
    }
    [-2] = -3.0771895411888313;
    f = -2;
}
C3.length;
const v23 = new C3(C3);
new C3(v23);
new C3(62601);
const v28 = new Float32Array(2516);
v28[2502] = v28;
BigInt64Array.BYTES_PER_ELEMENT;
const v32 = new BigInt64Array(6);
try { Int32Array(v32, v32, Int32Array); } catch (e) {}
const v36 = new Int32Array(2516);
v36[1607];
Number.isNaN(Math.log2());
const v42 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v49 = 0; v49 < 100; v49++) {
        function f50(a51, a52, a53) {
            const o55 = {
                get d() {
                    return a52;
                },
            };
            for (let i = 0; i < 10; i++) {
                0 < 10;
                delete v42[10];
            }
            return o55;
        }
        F43(a48, f50, f50);
    }
}
new C3();
