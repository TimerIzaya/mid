let v4 = BigInt64Array;
function f5(a6, a7) {
    new SharedArrayBuffer();
    return 0.8728135850700557;
}
v4.toString = f5;
let v10;
try { v10 = new v4(-2.2250738585072014e-308, 2895, v4); } catch (e) {}
const v11 = new v4(2895);
let v13 = 1073741824;
const v16 = 51531 * 51531;
Math.log2(51531);
-2.2250738585072014e-308 + v16;
--v13 / Infinity;
v11[1880];
class C23 {
    408;
    #b;
}
new C23();
new C23();
new C23();
new Int8Array(64);
new BigUint64Array(8);
function f32() {
    return f32;
}
Object.defineProperty(f32, Symbol.toPrimitive, { writable: true, configurable: true, value: f32 });
try {
    v4 &= v4;
} finally {
    new Int8Array(3);
    new Uint32Array(9);
    const v44 = [-1000000000.0,1000000.0,1000000000000.0,-2.220446049250313e-16,386061.05926601076,5.0,1.5127877009765018e+308,-2.220446049250313e-16];
    Object.defineProperty(v44, "toString", { writable: true, enumerable: true, value: f5 });
    [562568.235261441,535651.2050754391,5.0,5.189894474667007,0.3854805183883444,-2.6871736558927857e+306,-3.0,2.220446049250313e-16,-3.0];
    [1e-15,-1.8907225965298858e+307,-3.0,1000000000.0,4.0];
    v44 ^ v10;
    const o51 = {
        "execution": "sync",
        "type": "major",
    };
    gc(o51);
    new Float64Array(512);
}
!(f32 <= 8n);
