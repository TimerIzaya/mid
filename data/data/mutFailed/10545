new Uint16Array(164);
const v5 = new Uint8ClampedArray(7);
const v8 = new Uint32Array(678);
class C9 extends Uint32Array {
    61164178 = Uint32Array;
    valueOf(a11, a12, a13) {
        try { a11(a13, v5); } catch (e) {}
        const v15 = [Uint32Array,Uint32Array];
        [a11,[v8],v8,this];
        return v15;
    }
    static get h() {
        const o19 = {
        };
        try {
            o19.g = this;
        } catch(e20) {
        }
        try {
            const o21 = {
                "e": Uint16Array,
                __proto__: this,
                "b": Uint8ClampedArray,
                5: 164,
                "c": 678,
            };
            o21.g = this;
            o21.f = v5;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.g = this;
            o23.f = v5;
            o23.d = 164;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.g = this;
            o25.f = v5;
            o25.d = v5;
        } catch(e26) {
        }
        return this;
    }
}
new C9();
new C9();
new C9();
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    const o39 = {
        toString(a33, a34, a35) {
            return this;
        },
    };
    const v40 = o39[o39];
    const v41 = [this,678,v40,v5];
    const v42 = [7,v8];
    [v42,v41,o39];
    %VerifyType(678);
    v42 <= Uint16Array;
    try {
        for (const v45 of v40) {
            v40();
        }
    } catch(e47) {
    }
}
new F30();
