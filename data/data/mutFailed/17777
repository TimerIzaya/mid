new Uint8ClampedArray(256);
127 <= 127;
const v6 = new BigInt64Array(127);
v6.g = v6;
const v9 = new Float32Array(1005);
v9[221] = v9;
let v12 = -1646928160n;
v12 >> v12;
v12--;
Int32Array.BYTES_PER_ELEMENT = Int32Array;
let v17;
try { v17 = new Int32Array(Uint8ClampedArray, v9, Int32Array); } catch (e) {}
v17[2] = v17;
new Int32Array(13);
try { Int8Array.of(); } catch (e) {}
Int8Array.prototype;
const v23 = new Int8Array(3910);
v23[505];
64 * 64;
BigInt64Array.e = BigInt64Array;
new BigInt64Array(64);
const v30 = ("stack").trimStart();
for (let v31 = 0; v31 < 5; v31++) {
    function f32() {
        v30.length;
        return v30;
    }
    f32.d = f32;
    const v34 = f32.call();
    v34 == v34;
    let v36;
    try { v36 = v34.codePointAt(v34); } catch (e) {}
    v36 / v36;
    %OptimizeFunctionOnNextCall(f32);
}
