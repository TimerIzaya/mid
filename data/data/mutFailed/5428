const v6 = /abc+Z*/vdmy;
/a*b|c1(ab)((?:ab|cde))/uims;
const v8 = /(0Y)/vmsy;
Int32Array[0] = v6;
new Int32Array(3007);
const v14 = new Float64Array(232);
new Int16Array(6);
const v18 = [-1727815353,-9007199254740991];
function f19(a20, a21) {
    try { v8.exec(a21); } catch (e) {}
    let v23 = Map;
    const v24 = new v23();
    class C25 {
        set d(a27) {
            a27[this] = v23 >>>= a27;
        }
        #m(a29, a30) {
            let v31 = "jER";
            const v32 = [17452,4294967295,64,-8];
            [v31] = v32;
            try { new v31(...v32, -1.6798118066934893e+307); } catch (e) {}
            (a30 ^ a29) * this;
            const t21 = -1.6798118066934893e+307;
            new t21(1433);
            const v42 = new Uint8Array(255);
            new v14(299);
            return v42;
        }
    }
    const v46 = new C25();
    const v47 = new C25();
    function F48(a50, a51) {
        if (!new.target) { throw 'must be called with new'; }
        const v52 = this?.constructor;
        try { new v52(a50, v47); } catch (e) {}
        try {
            this.c = v24;
        } catch(e54) {
        }
    }
    const v55 = new F48(v47, v46);
    return v55;
}
const v57 = Symbol.split;
v18[v57] = f19;
[4,13];
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v63 = new Int16Array(16);
try { v63.find(v63); } catch (e) {}
0.6822080711934364 / 0.6822080711934364;
function F70(a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    function f74(a75) {
        a73[256] = a72;
        try {
            f19(f19, a73);
        } catch(e77) {
        }
        return v57;
    }
    this.constructor = f74;
    const v78 = a73?.constructor;
    const v79 = v78?.constructor;
    try { new v79(v78); } catch (e) {}
    try { new v78(0.29489550717955537, a72); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e83) {
    }
}
function f84() {
    function F85(a87, a88, a89, a90) {
        if (!new.target) { throw 'must be called with new'; }
        const v93 = new BigInt64Array(11);
        v93.lastIndexOf(this);
    }
    new F85(F85, F85, F85, F85);
    return Int32Array;
}
F70.constructor = f84;
const v96 = F70?.constructor;
let v97;
try { v97 = new v96(F70); } catch (e) {}
const v98 = new F70("string");
v98.f = v97;
let v100 = 127;
v100++;
const v102 = v100 != v100;
const v105 = new Int32Array(Int32Array);
const v106 = [];
function f107() {
    const o109 = {
        p() {
            return f107;
        },
        [v106]: v106,
        "a": v106,
    };
    const v110 = o109?.constructor;
    try { new v110(v102); } catch (e) {}
    return v106;
}
const t103 = 0.5524869504199039;
t103();
f107();
const v114 = f107();
const v115 = (a116, a117) => {
    return v114 * a117;
};
0.6058227007604853 | 0.6058227007604853;
let v121 = -Infinity;
v121++;
const v125 = new Float64Array(129);
let v126;
try { v126 = v125.entries(); } catch (e) {}
try { v126.next(); } catch (e) {}
255 - 255;
class C130 {
    static [v105] = 0.29489550717955537;
}
true || true;
const v133 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o135 = {
    valueOf() {
        return true;
    },
};
v133.length = o135;
class C136 {
}
const o137 = {
};
try { ("Xkz0W").split(v18, -536870912); } catch (e) {}
class C140 {
    set b(a142) {
    }
}
const v143 = new C140();
const v144 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v144(v143); } catch (e) {}
function f146(a147, a148) {
}
for (const v149 in v121) {
    function F150(a152, a153) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e154) {
} finally {
}
