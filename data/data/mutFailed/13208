class C3 {
    constructor(a5, a6) {
        let v7;
        try { v7 = new a6(this, a6, a6, "MIN_SAFE_INTEGER"); } catch (e) {}
        a6[2147483648] >>>= v7;
        const v9 = Symbol.iterator;
        const o18 = {
            [v9]() {
                let v10 = this;
                const o17 = {
                    next() {
                        v10--;
                        const v15 = 10 == 0;
                        const o16 = {
                            "done": v15,
                            "value": 10,
                        };
                        return o16;
                    },
                };
                return a5;
            },
        };
    }
}
const v19 = new C3("MIN_SAFE_INTEGER", -16);
const v20 = new C3("MIN_SAFE_INTEGER", -16);
new C3(v19, v20);
class C22 {
    #g = v20;
    #f = -16;
    m(a24, a25, a26, a27) {
        super[this] = "MIN_SAFE_INTEGER";
        return a26 | a26;
    }
    b = v19;
    [v20] = -16;
    static [-16];
}
new C3();
new C22();
new C22();
const v34 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f35(a36) {
    return 512;
}
v34.toString = f35;
function f37(a38, a39) {
    return 512;
}
const v41 = new Promise(f37);
v41[v34] += 36002;
