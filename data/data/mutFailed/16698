const v0 = [0.14678733590931525,-5.0,1000000000000.0];
[1000.0,-415959.22306659736,-2.0,9.815924246425816e+307,1000000.0,-1.7976931348623157e+308,601099.0185735386,-8.618822461314103e+307,-4.0];
const v2 = [0.64974936197918,-756.9782769132121];
let v4 = -270971445;
class C6 {
    static {
        for (let v8 = 0; v8 < 25; v8++) {
            function f9() {
                return C6;
            }
            const v10 = [601759695];
            const v11 = [1073741824,1073741823,1376142744,1073741825];
            function f13(a14, a15, a16, a17) {
                function f19() {
                    return a14;
                }
                const v20 = f9();
                const v22 = new Int8Array();
                const v25 = new Uint32Array(4);
                [v25];
                const v29 = BigUint64Array * 536870887;
                v29 ** v29;
                function f31(a32, a33) {
                    return v20;
                }
                f31();
                const v35 = v22.buffer;
                Object.defineProperty(v35, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v35.slice(2147483648);
                %OptimizeFunctionOnNextCall(f19);
                let v40;
                try { v40 = v11["find"](..."find", a17, ...v10, ...v11, ...522675525n); } catch (e) {}
                Symbol("find");
                class C44 extends Date {
                }
                try {
                    BigInt(-0.9475779989772164);
                } catch(e48) {
                }
                const v50 = new Uint8ClampedArray();
                const o51 = {
                    ...v50,
                };
                const v52 = 2147483648 < 536870887;
                function f53(a54, a55) {
                    return v52;
                }
                this.constructor.caller;
                v40 <= a16;
                return arguments;
            }
            function F59() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    const t55 = 19793;
                    for (const v63 of t55()) {
                    }
                } catch(e64) {
                }
            }
            for (let v65 = 0; v65 < 5; v65++) {
                f13(this, v65, v65, v65);
            }
        }
    }
}
let v67 = -268435456;
v4 >> v4;
Math.min(v4);
v67--;
[-4294967297n];
for (let i76 = 0, i77 = 10;
    (() => {
        const v78 = i76 < i77;
        class C79 {
        }
        function f80(a81, a82, a83, a84) {
            let v85 = 10;
            for (; v85--;) {
            }
            try { a82.apply(a81); } catch (e) {}
        }
        f80(i77, C79);
        %OptimizeFunctionOnNextCall(f80);
        return v78;
    })();
    i77--) {
}
const v94 = Map.prototype;
try { v94.clear(v94, Map); } catch (e) {}
Math.atan(v0);
!v67;
const v98 = ~v4;
v4--;
function f103() {
    return 6033;
}
const v106 = /(\1a)/gums;
const v107 = /V(?:a{5,1000000}){3,1000000}/vims;
const v108 = /(?<a>.)\k<a>?/vdimsy;
const v109 = [v108,v107,v106];
v109[2] = v109;
const v110 = [v109,v107,v108,v109,v109];
v110[2] = v110;
let v111 = 8;
v111--;
const v114 = new BigInt64Array(v111);
const v118 = new Uint8Array(7);
try { Int32Array.bind(v109); } catch (e) {}
function f122() {
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v125 = 1000000000000.0;
    const v126 = v125--;
    -v126;
    -v110 && v110;
    class C133 {
        static #m(a135) {
        }
        constructor(a137) {
            const v139 = new Float32Array();
            let v140;
            try { v140 = v139.entries(); } catch (e) {}
            v140.next();
            const v142 = new Uint16Array(12, -4294967296, v126);
            new Float32Array(v142);
        }
    }
    new C133();
    new C133();
    Symbol.iterator;
    try { v114.reduce(Int32Array, 12); } catch (e) {}
    let v149 = 0;
    v149++;
    const v151 = new C133();
    new C133();
    const v153 = new C133(-4294967296);
    [];
    [257828.6336153492,v153,v151,v153];
    const v156 = [];
    v156[0];
    class C158 extends C133 {
    }
    new C158();
    const v160 = v156.constructor;
    try { v160.isArray(v156); } catch (e) {}
    class C162 extends v160 {
    }
    C162.a = C162;
    const v163 = new C162();
    const v164 = v163.constructor;
    try { v164.bind(); } catch (e) {}
    const o166 = {
        "d": -4294967296,
        "maxByteLength": 7,
        "execution": "object",
        "a": v98,
        "type": "object",
        "e": v156,
        __proto__: v109,
        [v110]: v118,
        "h": 257828.6336153492,
    };
    try { o166.e(BigUint64Array); } catch (e) {}
    return Int32Array;
}
f122();
let v170 = 0;
while ((() => {
        ("function").normalize();
        const t0 = (2136873598).constructor;
        t0();
        return v170 < 4;
    })()) {
    [9007199254740991,-4,-59008,-17286,-34806,4,7,268435440,-13,536870912];
    const v180 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f181(a182, a183, a184, a185) {
        try {
            f181(true, Int8Array, undefined, f181);
        } catch(e189) {
        }
        function f190(a191) {
            v180.constructor;
            return f181;
        }
        for (let i195 = 0, i196 = 10; i195 < i196; i196--) {
            f190();
            a185.valueOf = a185;
        }
        return v180;
    }
    [-949936803];
    [7,0,-128,255,268435441];
    v170++;
}
const v207 = [2.1379532185728323];
const v208 = [-4.0,6.832898967790197,-4.0,0.7500864309406913,-1000.0,3.0,-1000000000000.0,0.043265059617089374,635735.7306304954];
[4.0];
const v210 = [-8,"-25178",f103,"h"];
[v2,v210,v207,[v210,f103,v210,-8]];
const o214 = {
    "maxByteLength": 3952309630,
};
new Float32Array(1000);
new Float64Array(6);
function f222() {
    return f222;
}
/nfoo|(bar|baz)|quux[a.a\qVk[\cZ]]/di;
let v225 = 0;
function f226(a227, a228, a229, a230) {
    const o240 = {
        __proto__: a229,
        ...a229,
        [a229](a232, a233, a234) {
            function f236() {
                return f236;
            }
            return "function";
        },
    };
    return o240;
}
do {
    Object.defineProperty(v208, 6, { configurable: true, enumerable: true, value: v4 });
    v225++;
} while (v225 < 9)
