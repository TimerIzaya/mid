const v3 = [-15,324053870,-49081,324053870,324053870];
[-15,-49081,[v3,324053870,-15,-49081],-15,v3];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const o14 = {
        [-352741132]: -352741132,
        set b(a13) {
        },
        "b": 2.220446049250313e-16,
    };
    try {
        new a9(Float64Array);
        Symbol.toPrimitive;
        function f19() {
            return Symbol;
        }
        this.g = a8;
    } catch(e20) {
    }
    try {
        this.h = -49081;
    } catch(e21) {
    }
}
new F6(-15, -49081);
new F6(324053870, -49081);
new F6(324053870, -15);
const v27 = new Int8Array(11);
new BigUint64Array(127);
new Int8Array(3);
function f34() {
    const o45 = {
        "d": 268435440,
        n(a39, a40) {
            return a39;
        },
        get c() {
        },
        "a": 4.0,
        __proto__: "cJ",
        "h": "cJ",
        "f": Int8Array,
        "c": 4.0,
        [v27]: 3,
        4: 4.0,
        ...v27,
        valueOf(a43) {
            const o44 = {
                __proto__: this,
            };
        },
        "c": "cJ",
    };
    return o45;
}
const v46 = f34();
const v47 = f34();
const v48 = f34();
const v50 = new Uint16Array();
const v53 = new Int32Array();
class C54 {
    static #d = -2;
    constructor(a56, a57) {
        try {
            v50.#d += v53;
        } catch(e58) {
            e58.toString();
        }
    }
}
C54.constructor;
[v48,v46,v47,v47];
const o64 = {
    "maxByteLength": 4096,
};
const v66 = new SharedArrayBuffer(8, o64);
new Int8Array(v66);
new Float32Array(4061);
(8).indexOf();
gc();
[];
const v76 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
const v77 = [65535];
new Set();
function F80(a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e85) {
    }
    try {
        function f86(a87, a88, a89) {
            function f91(a92) {
                a92 instanceof F80;
            }
            this.onmessage = f91;
            v53[Float32Array];
        }
        const v97 = ["function",v77,"function"];
        const o98 = {
            "arguments": v97,
            "type": "function",
        };
        new Worker(f86, o98);
    } catch(e100) {
    }
    this.a = a83;
}
function F101(a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    const v105 = this.constructor;
    try { new v105(v76, this); } catch (e) {}
    ++a104;
}
new F101(F101);
