function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 4294967297;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
new Float32Array(128);
new Uint16Array(433);
new Int8Array(0);
class C17 {
    m(a19, a20) {
        0.0 ** this;
    }
    static get c() {
        let v23 = 10;
        for (;
            (() => {
                const v24 = v23--;
                class C25 {
                }
                async function f26(a27, a28, a29, a30) {
                    (await C25).call(C25, f26, f26, C25);
                    return f26;
                }
                return v24;
            })();
            ) {
            super.c = this;
            Symbol.isConcatSpreadable;
        }
    }
}
new C17();
new C17();
const v37 = new C17();
const v38 = [0.41400040521582504,-2.2250738585072014e-308,1000000000.0,1.0,-7.840812307817487,0.8468093444532201];
const v39 = [0.7320309079988974,-2.0,474241.4698858885];
[-2.220446049250313e-16,-49.43730904135202,1000000000000.0];
class C42 extends C17 {
    o(a44, a45, a46) {
        Math.abs();
        Math.round(a46);
        Math.acosh();
        Math.sinh();
        6 >>> 1;
        try {
            ("MAX_SAFE_INTEGER").#valueOf();
        } catch(e57) {
        }
        return v38;
    }
    #g = C17;
    [9007199254740990n];
    245 = 9007199254740990n;
    [v39] = v37;
}
new C42();
const v59 = new C42();
const v61 = new Float64Array(Float64Array, Float64Array, Float64Array);
function f62() {
    v61.length = 0;
    return 0;
}
%PrepareFunctionForOptimization(f62);
const v64 = v59.m();
-(C17 >> 0);
const o68 = {
};
new ArrayBuffer(o68, 0);
try { new v64(...v59, 9007199254740990n); } catch (e) {}
