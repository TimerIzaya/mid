function f0() {
    const o17 = {
        "b": 5,
        __proto__: "hasInstance",
        n(a5, a6) {
            a6?.[142];
            new Float32Array(256);
            new Int32Array(64);
            new Int32Array(16);
            return 256;
        },
    };
    class C18 {
        constructor(a20) {
            for (let i = 0; i < 10; i++) {
                /[xyz{1,}(O)]/udis;
            }
        }
    }
    new C18();
    return o17;
}
const v23 = f0();
const v24 = f0();
const v25 = f0();
const v26 = [512,2054523761,268435439,128,536870889,12,-24580,-4096,16];
const v27 = [2147483649,24504];
const v28 = [5,1593837297,13];
const v29 = [v23];
[v27,v25,v24,v29];
const v31 = [v27,v24,v26];
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a36;
    } catch(e37) {
    }
    Array();
    function F40(a42) {
        if (!new.target) { throw 'must be called with new'; }
        const v43 = this.constructor;
        try { new v43(); } catch (e) {}
        try {
            const v47 = new Int32Array(12);
            for (const v48 in v47) {
            }
        } catch(e49) {
        }
    }
}
new F32(v29, v28, v26);
new F32(v31, v23, v29);
new F32(v31, v24, v27);
const v55 = new Int8Array(64);
new Int8Array(128);
let v59 = 1662;
new Uint32Array(v59);
function f63() {
    ("filter")["startsWith"]();
    const v67 = Math.cosh(Math);
    v67 / v67;
    return "startsWith";
}
%PrepareFunctionForOptimization(f63);
false.fuck();
const v71 = v59 % v59;
const v72 = v71 == v71;
const v73 = v59++;
let v74;
try { v74 = v55.entries(); } catch (e) {}
let v75;
try { v75 = v74.next(); } catch (e) {}
const v77 = ("c")?.search;
try { new v77(v75, v72, v59, v73); } catch (e) {}
f63();
%OptimizeFunctionOnNextCall(f63);
f63();
