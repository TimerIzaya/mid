class C3 {
    constructor(a5, a6) {
        this[256] = this;
        a5[1];
        this[256] = this;
        class C8 {
            constructor(a10) {
                const v11 = this.constructor;
                v11.bind();
                try { new v11(); } catch (e) {}
            }
        }
        C8.length = C8;
        class C14 extends C8 {
        }
        a5[1];
        for (let v16 = 0; v16 < 32; v16++) {
            v16 % v16;
            try { ("p").blink(); } catch (e) {}
            [-1.7976931348623157e+308,-613.7550152041111] ^ -1264607604;
            return a6;
            const v24 = [0.8307152163010869,1.0,0.0];
            v24.length = 1494907924;
            %VerifyType(v24 instanceof -24894);
            try { ("p").strike(); } catch (e) {}
            const v28 = "p" + v16;
            try { v28.codePointAt(v28); } catch (e) {}
            this[v28] = v16;
        }
    }
    ["-2"] = "-2";
    #f;
    e = "boolean";
    static a = "boolean";
    #e;
    static 256;
    [256] = "boolean";
}
const v30 = new C3("-2", "boolean");
const v31 = new C3(v30, C3);
const v32 = new C3(C3, C3);
const v33 = [v31,"-2",v32,v30,"-2"];
[v33,C3,v32,v33,"-2"];
const v35 = [v32];
new Set();
const v41 = [-1.7976931348623157e+308,1000000000.0];
const v42 = [4.0902151973711183e+307,-758.964951148866,1e-15,-5.261122784521454];
const v43 = [-2.2250738585072014e-308,-3.0,1000000000.0,-6.987156890700151,4.0];
try { v43.sort(v41); } catch (e) {}
let v45;
try { v45 = v43.reduce(8n); } catch (e) {}
function f46() {
}
let v47;
try { v47 = new f46(); } catch (e) {}
try { v47.constructor(); } catch (e) {}
"EV" == "EV";
let v51;
try { v51 = ("EV").indexOf(C3); } catch (e) {}
-v51;
for (let v53 = 0; v53 < 5; v53++) {
    function f54() {
        const v55 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
        try { v55.forEach(v45); } catch (e) {}
        let v57 = -65536;
        const v58 = v57--;
        v58 >> v58;
        v55.length >>>= v57;
        return f54;
    }
    f54.length;
    f54();
    %OptimizeFunctionOnNextCall(f54);
}
class C63 {
}
function f65(a66, a67, a68, a69) {
    const o73 = {
        toString(a71, a72) {
        },
    };
    try { o73.valueOf(); } catch (e) {}
}
const v75 = f65(Date);
try { v75.toString(); } catch (e) {}
C63.prototype = C63;
const v77 = new C63();
const v78 = v77?.constructor;
try { new v78(); } catch (e) {}
const v80 = v77?.__lookupGetter__;
try { new v80(-65535n); } catch (e) {}
function f82(a83, a84) {
    const o99 = {
        "a": v42,
        "d": a84,
        "type": "EV",
        p(a86, a87) {
        },
        get c() {
            a84[1];
            a83[v42];
            const o91 = {
            };
            ("undefined").localeCompare("undefined", o91);
            return v43;
        },
        "c": v35,
        valueOf(a97, a98) {
            return v35;
        },
        "defineProperty": f46,
    };
    const v100 = /\xf0\x9f\x92\xa9a*/us;
    try { v100.exec(o99); } catch (e) {}
    1 >>> 1;
    function F105(a107, a108, a109, a110) {
        if (!new.target) { throw 'must be called with new'; }
        a109 | a109;
        class C112 {
            constructor(a114, a115, a116, a117) {
                for (const v118 in a115) {
                }
            }
        }
        const v119 = this?.constructor;
        try { new v119(a107, a107, a109, a109); } catch (e) {}
        ~a109;
    }
    try { F105(a84, a84, o99, "boolean"); } catch (e) {}
    const v123 = new F105(v100, 1, -1263139894, F105);
    v123.length;
    return o99;
}
try { f82(v80, 8n); } catch (e) {}
f82(v41, v41);
const v127 = f82(v43, v43);
class C129 extends f82 {
    static #f = v127;
}
C129.name;
const v132 = new Uint8Array();
const v133 = v132?.findLast;
try { new v133(v132); } catch (e) {}
function f135(a136, a137, a138, a139) {
    a136.arguments = a136;
    a137--;
    const o141 = {
    };
    function f142() {
    }
    const o154 = {
        n(a144, a145) {
            function f147(a148, a149, a150, a151) {
                Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
                return a149;
            }
            f147();
        },
    };
}
f135.caller = f135;
for (let v155 = 0; v155 < 625; v155++) {
    f135(f135, v155, v132, v155);
}
