[4.1234333569388134e+307,-0.19663564201436223,Infinity,-0.0,9.455107280487943e+307,-602011.6525080402,NaN,0.8177091371722885];
const v4 = [-1.7976931348623157e+308,1.0075234604494463e+308,1000000.0,-0.22482609498575812,4.0,-3.4496073122325788,6.2758061558306295,-Infinity];
const v5 = [-0.7092812495681127,-8.13695673296108e+307,0.07803749608915345];
[v4,[-4.0,[46882],v5,46882,v4]];
class C18 {
    constructor(a20, a21) {
        function f22(a23) {
            const v25 = new Uint32Array();
            function f26(a27, a28, a29, a30) {
                const o34 = {
                    n(a32, a33) {
                        v25[a27] = v25;
                    },
                };
                new Int8Array(16);
                new Date();
            }
            function f42(a43) {
                new Int8Array(Int8Array);
                Math.cos(0.8497483139616006);
                new Uint16Array([34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449]);
                class C52 {
                }
                const v55 = new Float32Array(1024);
                v55.includes(C52, 1024);
                function F57() {
                    if (!new.target) { throw 'must be called with new'; }
                    for (let [v60,v61,v62,v63] of F57) {
                    }
                }
                a43 & a43;
            }
            this.onmessage = f42;
            this.__proto__;
        }
        class C72 extends Array {
        }
        f22();
        const o75 = {
            get h() {
            },
        };
        const v76 = [f22];
        try { new Worker(); } catch (e) {}
        for (let v78 = 0; v78 < 5; v78++) {
            %OptimizeFunctionOnNextCall(v78);
        }
        const o80 = {
            0: "1ya",
            162: "1ya",
        };
        const o81 = {
            "arguments": v76,
            "type": "function",
        };
        new Worker(f22, o81);
    }
}
new C18(C18, -4.0);
const v84 = new C18(-4.0, -4.0);
const v85 = new C18(9007199254740992, 512);
const v89 = /Az/gdmsy;
try {
    gc(256);
    const v96 = /((?<=a))/gudm;
    v96.b = v96;
    const v97 = /gk4b*/vmsy;
    let v99;
    try {
    const t0 = -1.3832922122240728e+307;
    v99 = t0(2);
    } catch (e) {}
    for (let v100 = 0; v100 < 5; v100++) {
        const v101 = v100++;
        Object.defineProperty(v97, -9223372036854775808, { enumerable: true, set: gc });
        v89["test"](v101);
        v100 < 1;
        try { v99(v96, v100, v97, v100, 256); } catch (e) {}
        const v111 = Symbol.iterator;
        const o115 = {
            [v111]() {
                const o114 = {
                    next() {
                        return v97;
                    },
                };
            },
        };
    }
    new Map("268435441");
} catch(e117) {
}
("29753").replaceAll("29753");
new Uint8Array(268435440);
new BigUint64Array(127);
function f125() {
    new Int8Array(1073741823);
    class C129 {
        #valueOf(a131, a132, a133, a134) {
        }
    }
    const o138 = {
        valueOf(a136, a137) {
        },
    };
}
const v139 = new Uint8Array(0);
const v142 = new Uint8Array(4096);
function f145() {
}
const v147 = ([9007199254740990,-16,376821973,268435456])[1];
function F148() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f145;
    try { this.constructor(); } catch (e) {}
    this.b = 4294967296;
    try {
        function F152() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v154 = new F152();
        const v155 = new F152();
        const v156 = v155.__defineSetter__;
        try { v156(); } catch (e) {}
        function f158(a159, a160) {
            const o161 = {
                "e": v154,
            };
            return o161;
        }
        const v162 = f158();
        f158();
        function f164() {
            return f158;
        }
        f164.b = v147;
        f164.b = f164;
        const v167 = new Float32Array();
        for (const v168 of v167) {
            v168 >>> v168;
            Object.defineProperty(v162, Float32Array, { configurable: true, enumerable: true, get: f158, set: f164 });
        }
        this.g = 4294967296;
    } catch(e170) {
    }
    this.f = 4294967296;
}
const v171 = new Uint8Array(255);
let v172;
try { v172 = v142(); } catch (e) {}
try { v172(v139, v172, v84); } catch (e) {}
C18[v171];
let v178;
try { v178 = v85.m(0, v139); } catch (e) {}
const o179 = {
};
try {
    o179.h = v178;
} catch(e180) {
}
try {
    const o181 = {
    };
    o181.h = v178;
    o181.d = 512;
} catch(e182) {
}
try {
    const o183 = {
    };
    function F184() {
        if (!new.target) { throw 'must be called with new'; }
        this.h = 9007199254740991;
    }
    const v187 = new F184();
    const o193 = {
        set h(a189) {
            const o192 = {
                "execution": "async",
                "type": "minor",
            };
        },
        __proto__: v187,
    };
    o183.h = v178;
    try { ("string").trimStart(); } catch (e) {}
    class C198 {
        static 7;
        static [-1] = "string";
        #n(a200) {
            a200 = this;
            a200.e >>>= -35417;
            const o204 = {
                "execution": "sync",
                "type": "major",
            };
            gc(o204);
            return this;
        }
    }
    new C198();
    o183.d = 512;
    o183.e = v139;
} catch(e207) {
}
try {
    const o208 = {
    };
    o208.h = v178;
    o208.d = 512;
    o208.e = 255;
} catch(e209) {
    const v211 = new Map();
    const o222 = {
        set d(a213) {
            let v214;
            try {
            const t0 = -1073741824;
            v214 = new t0(1073741824);
            } catch (e) {}
            typeof v214 === "29753";
            function F217(a219, a220) {
                if (!new.target) { throw 'must be called with new'; }
            }
            v211.delete();
        },
    };
}
const v224 = new Date();
v224.setUTCMonth(2015);
class C228 extends Array {
}
new C228();
