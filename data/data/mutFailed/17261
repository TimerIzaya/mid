function f0() {
}
function f2(a3) {
    const o13 = {
        1024: f0,
        set h(a5) {
            a5 = this;
        },
        set e(a7) {
            const v8 = delete a7?.[a7];
            a3[9] = null;
            Object.defineProperty(this, "f", { value: v8 });
        },
        "c": f0,
        ...a3,
        __proto__: a3,
        toString(a10, a11) {
            return f0;
        },
        get c() {
            return this;
        },
        "a": null,
        "b": a3,
        ...a3,
    };
    return o13;
}
f2(f2);
const v15 = f2(f2);
const v16 = f2(v15);
class C17 extends f2 {
    static m(a19, a20, a21) {
        function F22() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = -65536;
            } catch(e25) {
            }
            try {
                this.b = -65536;
            } catch(e26) {
            }
            try {
                this.e = -65536;
            } catch(e27) {
            }
        }
        const v28 = new F22();
        const v29 = new F22();
        const v30 = [256,9007199254740991,-2147483649,2];
        class C31 {
            static e;
            16 = v30;
            e = F22;
            constructor(a33, a34) {
                try {
                    a33.fuck(false, this);
                } catch(e37) {
                }
            }
        }
        const v38 = new C31(v29, v28);
        const v40 = new WeakSet();
        v40[v38];
        try {
            const v43 = new Float32Array();
            for (let v44 = 0; v44 < 25; v44++) {
                function f45(a46, a47, a48, a49) {
                    a46[1];
                    a47--;
                    a46[0] = a46;
                    a47 <= a47;
                    arguments[1] = arguments;
                    const v54 = arguments?.__lookupGetter__;
                    try { v54.constructor(v43, a48, v44, f45); } catch (e) {}
                    let v56;
                    try { v56 = v54(v54, f45, a47); } catch (e) {}
                    return v56;
                }
                for (let v57 = 0; v57 < 10; v57++) {
                    f45(v43);
                }
            }
            f2(f2);
        } catch(e60) {
        }
        return a20;
    }
    n(a63, a64, a65) {
        return f2;
    }
    static #e = v16;
    static [f2] = v15;
    static [-2];
    static f;
    constructor(a68, a69) {
        function f70(a71, a72, a73, a74) {
            return arguments;
        }
        for (let v76 = 0; v76 < 5; v76++) {
            const v77 = f70();
            v77[1] = v77;
        }
    }
}
new C17();
C17.constructor;
function f80(a81, a82, a83, a84) {
    function f85() {
        Math.expm1();
        return f80;
    }
    f85();
    eval();
    %OptimizeFunctionOnNextCall(f85);
    return f80;
}
new C17();
new C17();
new WeakMap();
new BigInt64Array(3);
new Float64Array(256);
new Int8Array(1945);
function F104(a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    function f108() {
        try { ("NFKD").localeCompare(this); } catch (e) {}
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f108 });
}
let v113 = -13050;
v113--;
function F115(a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
}
function f120(a121, a122, a123, a124) {
    Uint8Array / a121;
    a122 < F115;
    const o130 = {
        "b": a121,
        ...a121,
        n(a128, a129) {
            return Uint8Array;
        },
    };
    return o130;
}
const v131 = new F104(F104, F104);
class C132 {
    static [v131];
}
