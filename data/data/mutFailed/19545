const v0 = [-9.72066490246206e+307,592200.5404978003];
[-1000.0,-1e-15,-890.4547514983736,-1000000000000.0,-1.269408365194862e+308,0.9448474917275587,-620.5133632456934];
const v2 = [0.8617018938624295,1.0281340867551963e+308,-734978.0242944688,-3.958724922697458,1.0580868792554183e+307];
const v3 = [v0,v0];
[v2,v3,v3,[v3,v2]];
new Set();
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = "MAX_VALUE";
    } catch(e16) {
    }
    try {
        this.d = Set;
    } catch(e17) {
    }
    try {
        this.g = Set;
    } catch(e18) {
    }
}
new F11("MAX_VALUE", "h", "m");
new F11("h", "h", "MAX_VALUE");
new F11("m", "m", "h");
const o23 = {
    "b": 256,
};
function f26(a27, a28, a29, a30) {
    const o38 = {
        [-4294967297n](a32, a33, a34, a35) {
            eval(a35);
        },
    };
    const v40 = new Int8Array();
    const v41 = v40.buffer;
    a27.slice(a28);
    function f43(a44) {
        const v45 = [601759695];
        const v46 = [1073741824,1073741823,1376142744,1073741825];
        let v49;
        try { v49 = v46["find"](..."find", undefined, ...v45, ...undefined); } catch (e) {}
        return v49;
    }
    f43(v41);
    v41.constructor = Int8Array;
    v41.slice();
    return f43;
}
for (let v52 = 0; v52 < 10; v52++) {
    f26();
}
%OptimizeFunctionOnNextCall(f26);
f26(-4294967297n, f26, f26, f26);
const o59 = {
    [-4](a57, a58) {
    },
    __proto__: o23,
    ...o23,
    "b": 9007199254740991,
};
