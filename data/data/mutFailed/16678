const v0 = [4.0,-352.7544681692714,-2.220446049250313e-16,6.19969771843172e+307,-1000.0,-1.0,-244.874801240456,0.8993426342186264];
const v1 = [-2.2250738585072014e-308,-6.054301779528797,-687.3611883264732];
[-1.264347388644218,-1.7976931348623157e+308,921254.3165253133,-107.28318863958907,3.0,-0.0];
const v3 = [1e-15,1000000000000.0];
function f4() {
    function* f5(a6, a7) {
    }
    return f5;
}
Object.defineProperty(v3, Symbol.toPrimitive, { configurable: true, value: f4 });
[-1.6755167706505046e+308,-748712.5307105719,1.7976931348623157e+308];
const v11 = [-3.0,-1000000000000.0,1000000000.0,76.5894098108879,-351413.5426396878,1.4915752126742486e+308,803941.2711306689];
function f13() {
    return v3;
}
try {
    v0.__proto__ = v11;
} catch(e15) {
}
const v18 = v1 ** 2147483649;
const v19 = v3 * v18;
v18 ^ v19;
new Int32Array(329);
new Uint16Array(10);
new Int32Array(679);
new Uint8Array(197);
new Uint8ClampedArray(10);
new Float32Array(116);
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = -(-7);
    v41 ** v41;
}
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    function f47(a48) {
        function f50(a51, a52, a53, a54) {
            const v55 = a52 >>> a52;
            (v55 >>> v55) != -256;
            for (let v58 = 0; v58 < 5; v58++) {
            }
            return -256;
        }
        return v19;
    }
    Object.defineProperty(this, "constructor", { configurable: true, value: f47 });
    const v59 = this.constructor;
    try { new v59(F38, a45, this, v59); } catch (e) {}
    new F38();
}
new F43();
const o63 = {
};
