let v0 = null;
const v1 = /(?<=)/udims;
function f2() {
    function f3() {
        Math.asin(13);
        ~v0;
        !v0;
        v0 >> v0;
        --v0;
        return v1;
    }
    return f3;
}
function f11(a12) {
    try { a12.toString(); } catch (e) {}
}
Object.defineProperty(v1, "constructor", { writable: true, configurable: true, get: f2, set: f11 });
const v14 = /a|b(a)\1(a\1)/vdmsy;
function f15(a16) {
    const v17 = a16?.e;
    function F18(a20, a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = v17;
        } catch(e23) {
        }
        try {
            this.g = v17;
        } catch(e24) {
        }
    }
    const v25 = new F18(a16, F18, F18);
    new F18(v25, v25, v1);
    new F18(v0, f11, v25);
    return v0;
}
v14.toString = f15;
const v28 = /NW+/gv;
v28.b = v28;
let v30;
try { v30 = new WeakMap(); } catch (e) {}
try { v30.delete(v14); } catch (e) {}
const v32 = new WeakMap();
try { v32.delete(v1); } catch (e) {}
class C34 extends WeakMap {
    get h() {
        try {
            v32.has(false);
        } catch(e38) {
        }
        return v14;
    }
    static [-1];
    #g = WeakMap;
    [v1] = v0;
    static [v0];
    static #c;
}
const v39 = C34.length;
v39 >> v39;
const v41 = new C34();
const v42 = new C34();
const v43 = new C34();
const v44 = v43?.has;
try { new v44(v43); } catch (e) {}
function f46(a47, a48, a49) {
    a47.toString = f2;
    a48[Symbol.toPrimitive] = f11;
    const v52 = a47?.constructor;
    let v53;
    try { v53 = new v52(v43, a48); } catch (e) {}
    const v54 = a49?.constructor;
    let v55;
    try { v55 = new v54(a49, a47); } catch (e) {}
    a47.dotAll = a47;
    a49.multiline;
    a49.sticky = a49;
    const o71 = {
        __proto__: v43,
        "a": a47,
        "g": a48,
        p(a58, a59, a60) {
            function f61() {
                v53 = v52;
                const v64 = new Float32Array(2);
                new Int32Array(v64, 2);
                return Float32Array;
            }
            a58.toString = f61;
            a59.prototype = v55;
            const v67 = this?.g;
            try { new v67(); } catch (e) {}
            a58.e = a58;
            a59.prototype = a59;
            a59 = v42;
            const v70 = v41["set"](C34, "set");
            v70.g = v70;
            return v70;
        },
        [v32]: v43,
        "h": a47,
        "c": v43,
        "d": v42,
    };
    o71.d;
    try { o71.p(v32, v41, o71); } catch (e) {}
    let v74;
    try { v74 = o71.p(v28, C34, o71); } catch (e) {}
    try { v74.set(v39, a47); } catch (e) {}
    v74.g = v74;
    return o71;
}
f46.prototype = f46;
f46(v28, WeakMap, v28);
f46(v14, v0, v28);
f46(v1, v42, v1);
try { Reflect.isExtensible(v28); } catch (e) {}
try { Reflect.set(); } catch (e) {}
