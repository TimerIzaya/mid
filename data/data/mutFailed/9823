const v3 = new Int8Array();
for (const v4 in v3) {
}
function f5(a6) {
}
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this.constructor;
    try { new v13(); } catch (e) {}
    this.d = f5;
}
const v15 = new BigInt64Array(3);
v15[BigInt64Array] = BigInt64Array;
const v17 = new BigInt64Array(512, 3, 512);
const o18 = {
};
try { new Proxy(3, Proxy); } catch (e) {}
const v21 = new Proxy(v15, o18);
const t18 = Array(9);
t18.length = 3;
try { v21.reduce(o18); } catch (e) {}
new Float32Array(512);
new Int32Array(4096);
124 & 124;
Float32Array.prototype = Float32Array;
const v35 = new Float32Array(124);
v35[67];
new BigInt64Array(15);
try { Int32Array.from(3); } catch (e) {}
new Int32Array(9);
const v44 = [672764770];
try { v44.lastIndexOf(v17); } catch (e) {}
class C46 {
}
C46.prototype = C46;
class C47 extends C46 {
    9 = 9;
    static #m(a49) {
    }
    constructor(a51, a52) {
        const v53 = this?.constructor;
        try { new v53(); } catch (e) {}
        const v55 = /(?<!)/gv;
        v55.e = v55;
        const v56 = /(\xed\xb0\x80)\x01/gudmy;
        v56.c = v56;
        const v58 = Symbol.iterator;
        const o60 = {
            [v58]() {
            },
        };
    }
}
C47.length = C47;
const v61 = new C47();
const v62 = v61?.__defineSetter__;
try { new v62(Proxy, Float32Array); } catch (e) {}
Reflect.isExtensible(v61);
class C66 {
}
const v67 = new C66();
const t61 = v67.constructor;
new t61();
const v71 = ([Reflect,Reflect])[1];
class C72 {
}
for (let i75 = 0, i76 = 10; i75 < i76; i75++, i76--) {
    new C72();
}
v71.set(v71, v44);
