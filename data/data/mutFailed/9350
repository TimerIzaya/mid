let v2 = 0n;
class C3 {
    set f(a5) {
        try { a5(a5, this, this); } catch (e) {}
        this[-2] = v2;
    }
    static {
        super.b;
        Math.cbrt(9223372036854775807n);
        let v13 = v2 / 9223372036854775807n;
        v13--;
        v2--;
    }
}
new C3();
const v17 = new C3();
new C3();
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a22;
    } catch(e23) {
    }
    try {
        this.d = a21;
    } catch(e24) {
        try {
            BigInt.asUintN(-15843, 45011n);
        } catch(e29) {
        }
    }
    try {
        this.c = -9223372036854775808n;
    } catch(e30) {
    }
}
new F19(v17, 9223372036854775807n);
new F19(C3, -9223372036854775808n);
new F19(v17, -9223372036854775808n);
new Float32Array(1);
new BigUint64Array(16);
new Int8Array(339);
const v44 = 1073741824 & 1073741824;
const v45 = [6.621588498634488e+307,1.0,3.0,-5.0,-1.7976931348623157e+308,-1.7976931348623157e+308,257.7405098162435,-136018.55674827856];
const v46 = [v45,v45];
v45.concat(v46, v46, true, v44);
