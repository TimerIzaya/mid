class C3 {
    #valueOf(a5, a6) {
    }
    constructor(a8, a9) {
        a8 | a8;
        arguments.length;
    }
    toString(a14, a15) {
        this.printErr();
        const v19 = new Date();
        v19.setFullYear(-12);
        try {
            this.e = a14;
        } catch(e21) {
        }
        return 257n;
    }
    static 5 = 128n;
    static [128n] = 257n;
    static 8 = 128n;
}
C3.length;
new C3();
new C3();
new C3();
[1,2,-13,512,-6,127,-65535,13757,-8];
[-1,-202192074,65536,-1773075466,5,2147483649,15];
[9,9,-9223372036854775808,-10,16,1024];
const v29 = [-50.96907394271625,3.0,-570016.204056581,0.7917375798188904,5.844526521291116e+307,-1.7976931348623157e+308,-2.2250738585072014e-308,0.0,1.0];
try { v29.values(); } catch (e) {}
const v31 = [-2.220446049250313e-16];
class C32 {
    static [-2];
    constructor(a34, a35) {
        try { a34.values(); } catch (e) {}
        try { a35.findIndex(a34); } catch (e) {}
        function f38() {
            function f40(a41) {
                a41 !== v31;
            }
            this.onmessage = f40;
        }
        Worker.length = Worker;
        for (let v45 = 0; v45 < 32; v45++) {
            let v46 = v45 - v45;
            v46++;
            for (let v48 = 0; v48 < 5; v48++) {
            }
            try { f38(); } catch (e) {}
        }
        try { ("function").blink(); } catch (e) {}
        const v52 = [];
        v52.length;
        const o54 = {
            "arguments": v52,
            "type": "function",
        };
        new Worker(f38, o54);
    }
}
C32.length;
new C32(v29, v31);
