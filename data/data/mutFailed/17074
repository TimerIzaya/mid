function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = true;
        try { Reflect.ownKeys(-4.0); } catch (e) {}
        const v7 = [];
        const o8 = {
            "arguments": v7,
            "type": "function",
        };
    } catch(e9) {
    }
    try {
        this.g = true;
    } catch(e10) {
    }
    try {
        this.d = true;
    } catch(e11) {
    }
    const v13 = new Int16Array();
    -1.7976931348623157e+308 - -1.7976931348623157e+308;
    function f16(a17, a18) {
        arguments.__proto__ = arguments;
        return delete arguments[2];
    }
    f16(v13, v13, -1.7976931348623157e+308, v13);
}
new F1();
const v23 = new F1();
v23.b = v23;
new F1();
536870887n << 536870887n;
const v27 = [-1.5424212036356715e+308];
v27[536870887n] = v27;
let v28 = 2147483647;
const v30 = new Float64Array(v28);
v30.byteLength;
const t37 = "h";
t37[0] = "h";
16 != 16;
try { Float32Array.from(v28); } catch (e) {}
const v42 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v42.every(v23); } catch (e) {}
function f44() {
    const v46 = -v42.length;
    const o47 = {
        5: v46,
    };
    return v42;
}
const v48 = new Float32Array();
try { v48.entries(); } catch (e) {}
Float64Array.prototype = Float64Array;
new Float64Array(v48, 16);
new Float64Array(256);
const o54 = {
};
const v55 = [-6.695596969959072];
function f56(a57) {
    return v55;
}
v48.length >>>= 16;
class C58 extends Float64Array {
    static 1;
    static #d = 256;
}
new C58();
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = this.valueOf().constructor;
    try { new v65(v65, v65, v65, a63); } catch (e) {}
    Math.imul();
}
const v69 = new C58();
v28++;
f56.message;
new Float32Array();
class C74 {
}
const v75 = new C74();
const v76 = v75?.constructor;
try { new v76(); } catch (e) {}
const v78 = [-0.42703791448452577,-9.174109027962913,-1.7976931348623157e+308,-3.06318157624919,1000000000000.0,-2.2250738585072014e-308,-515.183479844324,0.20435565392355481,616564.7515082213,-3.0];
const o79 = {
    [v78]: v75,
};
try { v69(v48); } catch (e) {}
let {"buffer":v81,"byteLength":v82,"byteOffset":v83,} = v69;
try { v81.transfer(); } catch (e) {}
v83 | v83;
