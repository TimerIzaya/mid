const v2 = -Infinity;
class C3 {
    h = v2;
    static #p(a5) {
        let {"c":v6,} = a5;
        let v8;
        try { v8 = a5["toString"](v6); } catch (e) {}
        return v8;
    }
    constructor(a10) {
        this.b = this;
        a10 + a10;
        const v12 = this !== a10;
        v12 && v12;
        for (let v14 = 0; v14 < 32; v14++) {
            this["p" + v14] = v14;
        }
    }
}
try { new C3(v2); } catch (e) {}
const v18 = new C3(-7.989192840233765e+307);
v18.p27 = v18;
const v19 = new C3(v2);
v19.d = v19;
const v20 = new C3(-7.989192840233765e+307);
v20.g = v20;
class C21 {
    #b = v2;
    constructor(a23, a24, a25, a26) {
        a23.p6 = a23;
        try {
            this.b = C3;
        } catch(e27) {
        }
        try { a25(-7.989192840233765e+307, this, this, v18); } catch (e) {}
        function F29(a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
            try { this.toString(); } catch (e) {}
            try {
                this.f = a32;
            } catch(e34) {
            }
        }
        try { new F29(a24, C3); } catch (e) {}
        new F29(a26, v2);
        new F29(a26, -7.989192840233765e+307);
        new F29(v18, a23);
    }
}
const v39 = new C21(v18, -7.989192840233765e+307, C3, v19);
const v40 = new C21(v19, v2, -7.989192840233765e+307, v19);
const v41 = v40?.__defineSetter__;
try { new v41(697889.420219769, 697889.420219769); } catch (e) {}
new C21(v18, 697889.420219769, v19, v19);
const v50 = [7,128];
const v51 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v52 = v51[4];
const v53 = v52 | v52;
v53 & v53;
const v55 = [40213,422333454,47387,65536,-51830];
v55[2] = v55;
0 - 0;
15135 >>> 15135;
8 >> 8;
try { gc(); } catch (e) {}
gc();
const v68 = new BigInt64Array();
try { v68.subarray(v20, 2147483647); } catch (e) {}
let v71;
try { v71 = ("boolean").repeat(1000000.0); } catch (e) {}
try { v71.strike(); } catch (e) {}
const t71 = "toString";
t71[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
-256 >> -256;
function f78(a79, a80) {
    a79 - a79;
    a80++;
    a80--;
    a79 | a79;
    const o98 = {
        "c": 15135,
        "a": 15135,
        "d": a79,
        __proto__: a80,
        "g": -1628878962,
        "type": "boolean",
        "a": a79,
        set b(a86) {
        },
        "g": 15135,
        "b": a80,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f91() {
                    return f91;
                }
                const o93 = {
                    [f91]() {
                    },
                };
                [o93];
                v51.copyWithin(8, -268435456, -256);
            } catch(e97) {
            }
            return this;
        },
    };
    o98.g = o98;
    return o98;
}
let v99;
try { v99 = f78(15135, 15135); } catch (e) {}
v99.g = v99;
const v100 = v99[1000000];
v100[1000000] = v100;
f78(925.1427495594241, v50);
const v102 = f78(317008.8127941969, -4);
v102.g = v102;
f78(1000000.0, v51);
268435441n ^ 268435441n;
const v106 = 268435441n - 268435441n;
v106 | v106;
const v109 = new BigUint64Array();
class C111 {
    static {
        try { this.bind(v39); } catch (e) {}
        try {
            const t131 = null;
            t131.valueOf = this;
        } catch(e114) {
            e114.b = e114;
        }
    }
}
try { C111(); } catch (e) {}
v109[2445191368] = 268435441n;
