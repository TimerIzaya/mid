const v0 = [-3.5834043152193633,0.9358039441389655,1e-15,-1e-15];
const v1 = [-6.684149249887298e+307,0.6312370005753681,-1.7976931348623157e+308];
const v2 = [-5.0,-502.10957961804417,0.7265403185731781,-2.0,-3.0,Infinity,-376.9571651640771];
function f3(a4, a5) {
    Object.defineProperty(v2, "h", { enumerable: true, value: v2 });
    [a5,a4] = v1;
    return v1;
}
Object.defineProperty(v2, "toString", { writable: true, configurable: true, value: f3 });
function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v2;
    } catch(e9) {
    }
}
const v10 = new F6(v1);
const v11 = new F6(v1);
const v12 = new F6(v1);
class C13 {
    constructor(a15, a16) {
        [348459484,1073741825,8,268435439];
        [332468068,-4,536870912,-1,-1033198671,-27682];
        [-536870912,2];
    }
    get g() {
        try {
            this.g = this;
        } catch(e21) {
        }
        return v10;
    }
    static [v2] = v11;
    e = v12;
}
let v22 = new C13(v2, v11);
const v23 = new C13(v2, v12);
const v24 = new C13(v0, v10);
class C25 extends F6 {
    [v22];
    toString(a27, a28, a29) {
        let v30 = v2[2552307079];
        [a27,...v30] = a27;
        super.e = this;
        function f31() {
            return v22;
        }
        const v32 = C13 >= v0;
        Object.defineProperty(v1, "length", { enumerable: true, get: f31, set: f31 });
        v22 &= v24;
        [-1.7976931348623157e+308,7.50433519433059,4.4120420171513395,576.35867045284,2.2250738585072014e-308];
        [0.08764536249569355,1.0,-732229.4673361711,546.5851661214633,-995482.0571057965,-2.220446049250313e-16,-1000.0,-1000000000000.0,1000000.0];
        [-2.421327877654229];
        v32 ? C13 : v0;
        return this;
    }
    set d(a38) {
        super[this] = v11;
    }
    static 9 = v24;
    static f = F6;
    3899784921;
    static [-1] = v23;
}
new C25();
new C25();
new C25();
let v42 = -1024;
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
}
const v49 = new F43(v42, v42, F43, F43);
const v50 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v51 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = new F53();
class C58 {
}
const v60 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
let v61 = [601759695];
function f63(a64, a65, a66, a67) {
    function f68() {
        let v71 = Float64Array;
        v71 = a65;
        const v72 = v50.length;
        try {
            v50.forEach(v71);
        } catch(e74) {
        }
        const v75 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v77 = Symbol.toPrimitive;
        const o86 = {
            toString(a79, a80) {
                try {
                    this.fuck(a66, 268435440);
                } catch(e83) {
                }
                const v84 = a67 && v71;
                a79 *= v77;
                v84 <= v75;
                return F53;
            },
        };
        const o107 = {
            "c": -4294967297n,
            [522675525n](a89, a90) {
            },
            "c": v61,
            valueOf(a92, a93) {
            },
            [-4294967297n](a95, a96, a97, a98) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v60,
            ...v49,
            [v77]() {
            },
            "type": C58,
            ..."Vre",
            valueOf(a101, a102) {
                return Symbol;
            },
            ..."Vre",
            4: "Vre",
            toString(a104, a105, a106) {
                return a104;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v42 %= -268435456;
        new Uint32Array(v51, v72, v77);
        v57 - f68;
        try {
            new Float64Array(127);
        } catch(e116) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    function f123() {
        v61 = a65;
        const v125 = new Set();
        return v125;
    }
    f68.valueOf = f123;
    const v126 = f68();
    %OptimizeFunctionOnNextCall(f68);
    return v126;
}
for (let v127 = 0; v127 < 5; v127++) {
    f63(v57, F43, F53, v127);
}
