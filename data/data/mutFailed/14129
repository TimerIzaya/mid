const v0 = [8.777560937535142,-1000000000.0,0.29319563975950313,5.0,-Infinity,1000000.0,975114.495684966,NaN,0.5675476101365111];
const v1 = [1e-15,-263.7225691083212,-1.7126087413252521e+308];
const v2 = [-2.0456370118089246e+307,-3.697160212362312e+307];
class C3 {
    static {
        const v6 = [v2,v2,Reflect,v1,v2];
        const v7 = Reflect.construct(this, v6, this);
        function f8(a9) {
            new Uint8Array([749138.7740098275,-413.55890355139604,-2.0,5.0,4.0,1.7976931348623157e+308,1.0,5.956393081352694]);
            return Reflect;
        }
        v7.toString = f8;
        super[v7] = this;
        super[v2] = v6;
        const o16 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o16);
    }
}
const v18 = new C3();
const v19 = new C3();
new C3();
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a23;
    try {
        this.f = v19;
    } catch(e27) {
    }
}
new F21(v2, v1, v0, v18);
new F21(v1, v1, v0, v1);
new F21(v0, v0, v0, v2);
class C38 {
}
function f40() {
    return f40;
}
class C41 extends f40 {
}
C41.valueOf = f40;
class C42 extends C41 {
}
function f45(a46, a47, a48, a49) {
    try { a46(); } catch (e) {}
    a47 & a47;
    const v52 = 3 | C42;
    v52 * v52;
    const v54 = a46 / a46;
    const v55 = a47 < a47;
    const o59 = {
        n(a57, a58) {
            return v55;
        },
    };
    return v54;
}
for (let v60 = 0; v60 < 500; v60++) {
    f45(Uint8Array);
}
let v64 = undefined;
const o65 = {
};
v64 = o65;
