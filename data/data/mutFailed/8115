try { new BigInt64Array(BigInt64Array); } catch (e) {}
function f3() {
}
const v4 = [601759695];
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    function f12() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
    }
    f3();
    const v22 = new Int8Array();
    v22.buffer.slice();
    %OptimizeFunctionOnNextCall(f12);
    let v27;
    try { v27 = v5["find"](..."find", a10, ...v4); } catch (e) {}
    v27 <= a9;
    return arguments;
}
Int8Array.a = Int8Array;
const v31 = [257];
v31[0];
const v37 = new Int8Array(10);
v37.g = v37;
try { new Uint8Array(10, 10000, 10); } catch (e) {}
const v41 = new Uint8Array(4);
try { v41.entries(); } catch (e) {}
new BigUint64Array(9);
function f46() {
    Symbol.hasInstance;
    const v49 = [601759695];
    const v50 = [1073741824,1073741823,1376142744,1073741825];
    function f51(a52, a53, a54, a55) {
        function f57() {
            return a55;
        }
        arguments.c = 1163987790;
        -9223372036854775808n & -2147483647n;
        const v68 = new Int8Array();
        const v69 = v68.buffer;
        class C72 {
            static {
                for (const v74 of "-4294967295") {
                }
            }
        }
        v69.slice();
        %OptimizeFunctionOnNextCall(f57);
        let v77;
        try { v77 = v50["find"](..."find", a55, ...v49); } catch (e) {}
        v77 <= a54;
        return arguments;
    }
    const v80 = ([f46,f46]).constructor;
    const v81 = v80?.constructor;
    try { new v81(10000); } catch (e) {}
    const v83 = new v80();
    try { v83.findLast(v83); } catch (e) {}
    class C85 extends v80 {
    }
    const v86 = new C85();
    new v31();
    const v89 = new Uint8Array();
    function f90(a91, a92, a93, a94) {
        a93 ^ a93;
        const o100 = {
            "b": a91,
            ...v89,
            n(a97, a98) {
                return a94;
            },
            get g() {
                return this;
            },
        };
        return a92;
    }
    try { v86.fill(v37); } catch (e) {}
    try { v86.reduceRight(); } catch (e) {}
    return v83;
}
%PrepareFunctionForOptimization(f46);
f46();
0 - 0;
class C107 {
    #m(a109, a110) {
        function f111() {
            return a110;
        }
        super[a110] = "f";
        %VerifyType(a110);
        return f111;
    }
    static c;
}
const v112 = new C107();
class C113 {
    p(a115) {
        this.g ^= this[8];
    }
    static #n(a118, a119, a120, a121) {
        class C122 {
            4;
            static a;
        }
        C122();
        C122();
        C122();
    }
    7 = v112;
    #a = v41;
}
new C113();
%OptimizeFunctionOnNextCall(f46);
const v127 = f46();
try { v127.concat(Int8Array); } catch (e) {}
