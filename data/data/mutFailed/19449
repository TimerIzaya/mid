const v0 = [-1.8755451458014676,-7.390425071447828];
const v1 = [-3.0,2.2250738585072014e-308,0.9579636150577108,169.1220174030277,-4.0548333023283897e+307,-5.0,5.0,1.0,0.19007158707995842];
const v2 = [77625.02126852935,3.0,1000000.0,-2.2250738585072014e-308,1000.0,-3.971152910786757,594604.8335051702];
function f3(a4) {
    const o12 = {
        __proto__: v1,
        "a": a4,
        1242260390: v1,
        "b": a4,
        "f": a4,
        "f": a4,
        n(a6, a7) {
            super.h;
            return typeof a4 === "symbol";
        },
        /*
        __proto__: v1,
        */
        6: a4,
        7: v0,
        "b": a4,
    };
    return o12;
}
try { f3(v0); } catch (e) {}
f3(v0);
f3(v1);
f3(v1);
const v19 = new Uint16Array(0);
try { v19.entries(); } catch (e) {}
const v23 = new Int8Array(4);
v23[3] = v23;
new Float32Array(10);
const v27 = [-4529,-56036,4294967295,256,-256];
/\p{Nd}/isy;
const v29 = /((?:ab){4,7}(?:a+){0,0})/gv;
const v30 = /a\bc/umsy;
try { v30.toString(); } catch (e) {}
class C32 {
    constructor(a34) {
        try { a34.propertyIsEnumerable(this); } catch (e) {}
        for (let v36 = 0; v36 < 160; v36++) {
            function f37() {
                if (a34) {
                    v2[Symbol.search] = 0;
                    function f40() {
                        return C32;
                    }
                    function F41(a43, a44, a45, a46) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    const v47 = new F41(this, this, a34, v36);
                    const v48 = v47?.constructor;
                    try { new v48(v36, 10, Symbol, v36); } catch (e) {}
                    const v50 = new F41(v30, this, v29, C32);
                    const v51 = v50?.constructor;
                    try { new v51(v36, v36, v50, v36); } catch (e) {}
                    const v53 = new F41(a34, v27);
                    const v54 = v53?.constructor;
                    try { new v54(Symbol, f40, v53, Symbol); } catch (e) {}
                } else {
                    new f37();
                }
            }
            f37.length = f37;
            f37();
        }
    }
}
new C32(C32);
const v59 = new C32(C32);
const v60 = v59?.constructor;
try { new v60(v0); } catch (e) {}
