[];
1939 ^ 1939;
[-15,-414220368,1000,257,65537,10978,16,-53035];
const v11 = [-9,128,4,8];
try { v11.entries(); } catch (e) {}
const v13 = [-9007199254740990,536870888,-39768];
v13.length = v13;
[2.0];
const v18 = [-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
try { v18.findLastIndex(116.4107768963147); } catch (e) {}
1000000.0 % 1000000.0;
536870887 + 536870887;
const v28 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
let v29 = -953280260;
v29--;
let v32 = -37370;
v32--;
new BigInt64Array(14, BigInt64Array);
4096 >>> 4096;
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v41 = new Uint8Array();
gc();
const v45 = 110 <= 110;
v45 || v45;
const v47 = 110 + 110;
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
const v50 = new Int8Array();
try { v50.lastIndexOf(v47); } catch (e) {}
const v53 = new Date();
try { v53.setFullYear(v18, Int8Array, v18); } catch (e) {}
const v55 = v53.getUTCDay();
v55 >>> v55;
v55 >>> v55;
let v58 = 127;
v58 >> v58;
v58++;
function f61(a62, a63) {
    try { a62(f61); } catch (e) {}
    try { a62(BigInt64Array); } catch (e) {}
    a63.constructor(a63);
    return f61;
}
try { new Promise(4096); } catch (e) {}
const v69 = new Promise(f61, Uint8Array);
let v70;
try { v70 = v69.then(); } catch (e) {}
try { v70.hasOwnProperty(116.4107768963147); } catch (e) {}
let v72;
try { v72 = v70.then(v28, v41); } catch (e) {}
try { v72.then(3, v32); } catch (e) {}
Uint8Array.length = Uint8Array;
const v75 = new Uint8Array(v58);
try { v75.join(Date); } catch (e) {}
function f77(a78, a79) {
    const o80 = {
    };
    o80.g = o80;
    return o80;
}
let v81;
try { v81 = f77(v69, v69); } catch (e) {}
const v82 = v81.g;
try { v82.toString(); } catch (e) {}
f77.arguments = f77;
for (let v84 = 0; v84 < 25; v84++) {
    const v85 = v84 - v84;
    v85 % v85;
    const v87 = f77();
    v87.c = v87;
    v87.g = v87;
    v87.d = v87;
    Object.defineProperty(v87, v84, { enumerable: true, get: f77, set: f77 });
    Uint16Array.prototype = Uint16Array;
    let v90 = 8 - 8;
    v90--;
    const v93 = new Int8Array(8);
    let v95;
    try { v95 = Reflect.preventExtensions(v87); } catch (e) {}
    !v95;
    const v98 = Reflect.construct(Uint16Array, [v93]);
    v98[2] = v98;
    v75[v87] = v87;
    gc.name = gc;
    !("sync" == "sync");
    const o103 = {
        "execution": "sync",
    };
    gc(o103);
}
