const v3 = [636.0619904743435,-1.0,1.02880264701966e+308,-656.9941137140671,-29.012861243904695,1000000000000.0];
const v5 = v3["flat"]();
class C11 {
    9;
    [-4294967295n] = 13n;
    get g() {
        this.f >>>= 1;
        const v13 = this[3360579767];
        try {
            super.toSpliced(v13, 13n, v13, 2, -1771000438);
        } catch(e15) {
        }
        return 13n;
    }
}
const v16 = new C11();
class C17 {
    static toString(a19, a20) {
        this.__proto__;
        const v24 = Math.atan(this);
        super.a = v24;
        function F25(a27, a28) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a28;
            } catch(e29) {
            }
        }
        new F25(v5, v24);
        new F25(this, v16);
        new F25(v24, 65537n);
        let v33 = --a19;
        const v34 = -8 - v33;
        ++v33;
        Math.expm1(Math);
        function f38(a39) {
            const o40 = {
            };
            return Math;
        }
        const v41 = v33 ** a19;
        ++v33;
        Math.log2(v34);
        return v41;
    }
}
new C17();
new C17();
new C17();
new Float64Array(3349);
new Int8Array(2534);
const t51 = 65537n;
new t51(14);
const v58 = new BigUint64Array(2);
const o154 = {
    [v58](a62, a63, a64) {
        class C65 {
        }
        try { WeakMap.apply(Int32Array, Date); } catch (e) {}
        class C70 {
            constructor(a72, a73) {
            }
            static {
                for (let i81 = 0, i82 = 10;
                    (() => {
                        const v83 = this < i82;
                        class C84 extends Date {
                        }
                        const v85 = [1557591051,8137,536870888,-9223372036854775808];
                        v85 * v85;
                        BigUint64Array * 536870887;
                        const v91 = new Int16Array(4096);
                        class C92 {
                            constructor(a94, a95, a96, a97) {
                                let [v98,v99,,...v100] = v91;
                                try {
                                    class C101 {
                                        #n(a103, a104, a105, a106) {
                                            super[this] = this;
                                        }
                                    }
                                } catch(e107) {
                                }
                            }
                        }
                        return v83;
                    })();
                    i81++) {
                }
                function F114() {
                    if (!new.target) { throw 'must be called with new'; }
                    const o117 = {
                    };
                    o117.e = 19793;
                    const o118 = {
                    };
                    o118.h = 58;
                    const v120 = Array(19793);
                    for (const v121 of v120) {
                    }
                    const v122 = [v120,v120,v120,v120,v120];
                    const v124 = new BigUint64Array();
                    const v126 = [v124];
                    for (let v127 = 0; v127 < 50; v127++) {
                    }
                    v126[65536] %= 256;
                    [[v122,v122,this]] >= Uint16Array;
                    const v132 = [1178537094,10,-1679472472];
                    [-16980,536870888];
                    v3[[-14,26189,536870888,268435440,-65536,1914946345,127,-43185,1,-2]] <<= 1045;
                    [this,C17];
                    [58,[Date,v132,Int8Array,-4294967295n],Int8Array,BigUint64Array];
                }
                new F114();
            }
        }
        for (let i140 = 0;
            (() => {
                function F143(a145, a146) {
                    if (!new.target) { throw 'must be called with new'; }
                    a145.trimLeft().strike();
                    const v149 = this.constructor;
                    try { new v149("a"); } catch (e) {}
                }
                return i140 < 10;
            })();
            ) {
        }
    },
};
