const v2 = new Uint8ClampedArray(9);
new Uint32Array(0);
const v8 = new Int32Array(2);
const v10 = [[Int32Array,Uint32Array,2,v8,v2],2,Int32Array];
[Int32Array,v10,9,Uint8ClampedArray];
const v12 = [0.0,0.9918424765153329,Infinity,1.4507953842433291e+308,-0.0,-1000.0,2.2250738585072014e-308,0.0,911008.7901636127,-4.0];
[Infinity,1000000000.0,743.8010469497517,NaN];
[NaN,0.040685666209241744,3.6796496346931165e+307,5.0,-0.0];
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 2;
}
new F15();
new Int32Array();
new Float64Array(256);
const v30 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
const v31 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
function f32(a33) {
    %VerifyType(a33);
    const o34 = {
        [a33]: v12,
    };
    return a33;
}
v31.valueOf = f32;
const v35 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
function f36() {
    return v10;
    return Math.tan(256 ** 256);
}
v35.toString = f36;
class C40 {
    constructor(a42, a43, a44, a45) {
        function f46() {
            return f36;
        }
        Object.defineProperty(a44, "valueOf", { writable: true, configurable: true, get: f46 });
        const v47 = a44.constructor;
        try { new v47(v35, F15); } catch (e) {}
        v35 >>> a43;
        a44 >>> -0.0;
    }
}
new C40(v30, 659.0540372978887, v30);
new C40(14, 2.220446049250313e-16, v31, v35);
