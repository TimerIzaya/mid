const v0 = [];
const v1 = [v0,v0,v0,v0];
const v2 = [v1,v1,v1,v1];
const v3 = [v2,v2,v2,v2];
function f4() {
    return v3;
}
function f5() {
    9007199254740991n * 9007199254740991n;
    for (let i11 = 0, i12 = 10;
        (() => {
            const v13 = i11 < i12;
            class C14 extends Date {
            }
            return v13;
        })();
        i11++) {
    }
    return v3;
}
function f20(a21, a22) {
    const v25 = new Int32Array(2);
    v25.toSorted();
    new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
    try { a21.sort(f20); } catch (e) {}
    try { a22.groupToMap(a21); } catch (e) {}
    const o49 = {
        __proto__: a21,
        m(a33, a34, a35, a36) {
            f5();
            try {
                new f5();
            } catch(e39) {
            }
            new Uint8ClampedArray([515943.2030917471,-1e-15,1.7976931348623157e+308,0.19475803117559898,-546414.0415788401,285129.04068811354]);
            class C44 extends Int32Array {
            }
            const v45 = new C44();
            const v46 = new C44();
            v45["includes"](v46);
            return v3;
        },
        "b": f5,
    };
    try { o49.findLast(v2); } catch (e) {}
    return o49;
}
try { f20(v2, f20); } catch (e) {}
v2.fill;
new Int32Array(2528);
function f56(a57, a58) {
    const o61 = {
        set d(a60) {
        },
        "a": a57,
    };
    const v64 = new Int8Array(268435456);
    return v64;
}
f20(v2, v1);
const v66 = f20(v1, v2);
const v67 = f20(v1, v1);
try { v67.find(v66); } catch (e) {}
function f69() {
    const v72 = new BigUint64Array(4083);
    new v72();
    !(2528 < 9);
    return f69;
}
f69.finally = v66;
const v77 = [-3,257];
class C78 extends f69 {
    static #n(a80, a81, a82) {
        Object.defineProperty(v77, 10, { writable: true, configurable: true, enumerable: true, set: f69 });
    }
}
const v83 = new C78();
v83.finally = v66;
try { v83.finally(v77, f69, f69); } catch (e) {}
