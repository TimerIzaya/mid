[206.5640138243989,2.409752218908798,9.698359553506062e+306,5.0,-515.4594407930833,-3.985954715673552,4.0,3.64612218084493e+307];
const v1 = [-2.2250738585072014e-308,-3.0,366.3322779498119,-5.0,-1.2208516016042065e+308,0.9810105026327549];
[572150.019631604,-3.0];
new Uint8Array(9);
new Uint8ClampedArray(1024);
new BigUint64Array(3663);
[-1.0,-1000000000000.0,2.0,-2.220446049250313e-16,3.0,892957.9567980885,0.2999888516989929];
[1.1755672759661712e+308,1e-15,Infinity,456399.3361407176,328.28070990075366];
const v16 = Math.expm1(257);
const v17 = [536870887,-536870912];
let v18 = "p";
const v20 = new Float64Array();
function f21() {
    [Uint8Array,v18,...v1];
    function f23(a24, a25) {
        const o26 = {
            ...a24,
        };
        o26.d;
        return f23;
    }
    f23.d = f23;
    return f23;
}
v20[Symbol.toPrimitive] = f21;
const v30 = v18.lastIndexOf(v20);
class C32 {
    constructor(a34, a35, a36) {
    }
}
try { new C32(-1000000000000.0, v30, v17); } catch (e) {}
[-5.0,0.1400061117894662,-1000000.0,1000000000.0,-1000000000.0,290.36544866291433,-811772.7007786212,-293.6942631780777,1000000000000.0];
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this.constructor;
    const v54 = [1630629478,9,2034969337];
    for (let v55 = 0; v55 < 10; v55++) {
        v54.__proto__;
    }
    Math.log2(0);
    try { new v53(a49, -1.0, a52, a52); } catch (e) {}
    a50 - a50;
    a52 ^ a52;
    try {
        this.g = a51;
    } catch(e62) {
        function f63(a64) {
        }
        let v65 = 10;
        for (; v65--;) {
        }
    }
    try {
        -1 in [-1];
        this.b = -65537n;
    } catch(e70) {
    }
}
function f86() {
    ("D")[0].substring(2);
    return "D";
}
%OptimizeFunctionOnNextCall(f86);
const o96 = {
};
o96.e = v16;
const v97 = [-6.672391061426152e+307];
const v98 = [1,-15];
function f99() {
    v98.splice(v97, f99, v97);
    v97["pop"]();
    const v105 = new Float32Array(64);
    for (let v106 = 0; v106 < 5; v106++) {
        Array(36862);
    }
    v105.toSorted();
    return f99;
}
function f111(a112, a113, a114, a115) {
    return f111;
}
new Uint8ClampedArray(268);
function f119() {
    return f119;
}
Math.log2(++v18);
function f124() {
    return f124;
}
f86(Math, Math, 4096, Date);
class C129 {
}
function F130(a132, a133, a134) {
    if (!new.target) { throw 'must be called with new'; }
    a132 - a132;
    a133 == a133;
    5 >>> a132;
    a133 - a133;
    const v139 = this.constructor;
    try { new v139(a134, C129); } catch (e) {}
    a132 % a132;
}
F130.toString = f21;
new F130(F130);
new F130(820, 121);
