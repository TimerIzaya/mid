let v0 = "undefined";
function F3() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = true;
    } catch(e5) {
    }
    try {
        this.b = true;
    } catch(e6) {
    }
}
const v7 = new F3();
new F3();
const v9 = new F3();
const v10 = [1e-15,0.09547881173263595,1.7976931348623157e+308,0.6658730271969261,-1000.0];
const v11 = [-8.040080448070657e+307,3.8894071891937223,0.7715929616276889];
let v12;
try { v12 = v11.with(v9, v9); } catch (e) {}
v12[2] = v12;
const v13 = [1.6621172782957435e+308,937862.0109722319];
let v14;
try { v14 = v13.find(v11); } catch (e) {}
const v16 = v14 >>> 3154;
const v18 = new Int32Array(3154);
v18[1700] = v18;
try { BigInt64Array.bind(v16); } catch (e) {}
const v22 = new BigInt64Array(v12);
const v24 = 198 === 198;
v24 && v24;
const v27 = new Int32Array(3154);
let v28;
try { v28 = v27.entries(); } catch (e) {}
try { Uint16Array.bind(v9); } catch (e) {}
const v32 = new Uint16Array();
Uint8ClampedArray.BYTES_PER_ELEMENT;
const v36 = new Uint8ClampedArray(3, v10);
class C37 {
    constructor(a39, a40, a41, a42) {
        this.e = this;
        const v43 = a41?.constructor;
        try { new v43(a42); } catch (e) {}
        try {
        const t0 = 128;
        t0();
        } catch (e) {}
        for (let i47 = 0;
            (() => {
                9 != 9;
                const v50 = -9;
                v50 + v50;
                return i47 < 9;
            })();
            i47++) {
            v36[i47] = a42;
        }
    }
    c;
}
try { new C37(3, Uint8ClampedArray, Uint8ClampedArray, v32); } catch (e) {}
let v57;
try { v57 = new C37(v28, v22, Uint16Array, C37); } catch (e) {}
v57.h = v57;
const v58 = new C37(v36, Uint8ClampedArray);
const v59 = v12.c;
const v60 = new C37(v58, BigInt64Array);
try { v60.constructor(v7, v7, 198, v27); } catch (e) {}
v60.c;
const v64 = [65537,1073741825,7841,-12,13];
const v65 = [1073741823,4294967295];
v65[1] = v65;
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    const v71 = this.constructor;
    try { new v71(a68, a69, a69); } catch (e) {}
}
const v73 = new F66(v64, v65, WeakSet);
new F66(v65, v65, v73);
class C76 {
    valueOf(a78) {
        +a78;
        return -5;
    }
    p(a81) {
        for (let v82 = 0; v82 < 32; v82++) {
            function f84() {
                function f86(a87) {
                    [a81];
                    [v82];
                    [v82];
                }
                this.onmessage = f86;
                v0 = "p";
            }
            const v93 = [];
            const o94 = {
                "arguments": v93,
                "type": "function",
            };
            new Worker(f84, o94);
            this["p" + v82] = v82;
        }
        try { this.valueOf(a81, this); } catch (e) {}
        return -5;
    }
}
const v98 = new F3();
const v99 = new C76();
const v100 = new C76();
C76 ||= v98;
v100[1] &&= -5;
let v101;
try { v101 = v99(v99); } catch (e) {}
try { new v101(v0); } catch (e) {}
C76.h;
class C104 {
    static {
        new Float32Array(9);
        new Uint8ClampedArray(1024);
        new Uint16Array(677);
    }
    16 = v99;
}
try {
    v99.e = -5;
} catch(e115) {
}
v0++;
new v59();
const v118 = new C104();
new C104();
class C120 {
    constructor(a122, a123, a124) {
        a122 / v99[a124];
    }
    static #valueOf(a128, a129) {
        try { C104["race"](); } catch (e) {}
        return a128;
    }
    [v0];
    static #h = v0;
    #f = v99;
}
const v132 = new C120(v118, C104, v98);
const v133 = new C120(v100, v132, v100);
new C120(v133, v98, v100);
0 == 268435440n;
