new WeakSet();
new Int16Array(0);
new BigUint64Array(2);
new Uint8Array(257);
new WeakMap();
function f13() {
    return f13;
}
for (let i16 = 0, i17 = 10;
    (() => {
        const v18 = i16 < i17;
        class C19 {
        }
        %PrepareFunctionForOptimization(Date);
        function f22() {
            return f22;
        }
        function f23(a24) {
            return a24;
        }
        Object.defineProperty(Uint32Array, 0, { enumerable: true, get: f22, set: f23 });
        class C25 {
        }
        C25[Symbol.toPrimitive] = f13;
        const v30 = new BigUint64Array(3375);
        let [v31,,v32,...v33] = v30;
        return v18;
    })();
    (() => {
        class C39 {
            c = -261.99102172609366;
            ["localeCompare"];
            static [-1.0];
            toString(a41, a42) {
                do {
                    function F44(a46, a47, a48, a49) {
                        if (!new.target) { throw 'must be called with new'; }
                        try {
                            this.a = "localeCompare";
                        } catch(e50) {
                        }
                    }
                } while (0 < 6)
            }
        }
        new C39();
        i16++;
    })()) {
}
for (let v57 = 0; v57 < 25; v57++) {
}
const v58 = [];
function f61() {
    return -4294967296;
}
function F63(a65, a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    const v69 = this?.constructor;
    try { new v69(a65, -1.0, a68, a68); } catch (e) {}
    a66 - a66;
    a68 ^ a68;
    try {
        this.g = a67;
    } catch(e73) {
    }
    try {
        try {
            new f61();
        } catch(e75) {
        }
        try {
            v58.fill(-65537n);
        } catch(e77) {
        }
        this.b = -65537n;
    } catch(e78) {
    }
}
