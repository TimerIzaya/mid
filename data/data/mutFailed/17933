class C3 {
    #valueOf(a5) {
        const o8 = {
            "maxByteLength": 543,
        };
        const v10 = new ArrayBuffer(5, o8);
        new Int16Array(v10);
        return o8;
    }
}
new C3();
const v14 = new C3();
const v15 = new C3();
const v16 = [v15,v15,"iYlxF",v15];
const v17 = ["getTime"];
const v18 = [v17,"number"];
function f19(a20, a21, a22) {
    for (let i25 = 0, i26 = 10; i25 < i26; i26--) {
    }
    const o50 = {
        "h": "number",
        toString(a34, a35) {
            const v36 = super[a21];
            function f37() {
                new Int8Array(1073741823);
            }
            function F41(a43, a44) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = v15;
                } catch(e45) {
                }
                try {
                    this.d = a44;
                } catch(e46) {
                }
            }
            new F41(a21, v17);
            new F41(v36, a20);
            new F41(a20, v14);
            return this;
        },
    };
    return o50;
}
class C54 {
    static #e;
    static [-2];
    static f;
    static #e = -5.0;
    static set d(a56) {
    }
    m(a58, a59) {
        (-5.0) ** this;
    }
    static {
        try { this(this, -5.0, this, ...this); } catch (e) {}
    }
    #g;
    static #toString(a64, a65) {
        ("minor").split("toString");
        const v73 = new Date();
        try { v73.setFullYear(26578n); } catch (e) {}
        const o75 = {
            __proto__: a65,
            "a": "async",
            "b": "async",
            "e": 1073741823,
            "f": "async",
            "execution": "async",
            "type": "minor",
        };
        gc(o75);
        function F77(a79, a80) {
            if (!new.target) { throw 'must be called with new'; }
            const v81 = this.constructor;
            try { new v81(); } catch (e) {}
            ([NaN,52.65298068517177,-4.0])["includes"]();
        }
        new F77();
        return "async";
    }
    static c;
}
function F88(a90) {
    if (!new.target) { throw 'must be called with new'; }
    const v91 = this.constructor;
    v91.bind();
    try { new v91(); } catch (e) {}
    function F94(a96, a97) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F94();
    const v100 = new Uint32Array(1073741823);
    let v101 = v100.byteOffset;
    const v103 = new Set(v100);
    function F104(a106, a107) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            v101 >>= 1073741823;
        } catch(e108) {
            for (let [v109,v110] of a106) {
            }
        }
        try {
            new F104(1073741823, v103[this]);
        } catch(e113) {
        }
    }
}
const v114 = new F88();
function f115(a116, a117) {
    %VerifyType(a117);
    Object.defineProperty(v114, 2147483648, { writable: true, enumerable: true, value: v114 });
    return a116;
}
const v119 = f115(v114, 145253519);
new C54();
const v121 = new C54();
const v122 = new C54();
Math.atan2([], -40875);
class C131 extends WeakMap {
    536870887;
}
new C131();
const v137 = 536870912n << 536870912n;
-v137;
class C139 {
    static #a;
}
try { v122.getUint16(-16, v119, 16, 6, v137); } catch (e) {}
const v141 = v121[f115];
try { v122.m(v141, 1073741823, C139, v122, v141); } catch (e) {}
v141 >>> v122;
-5.0 < 1073741823;
f19(v17, C3, v17);
f19(v18, v18, v18);
f19(v16, v15, v14);
new Uint8ClampedArray([-1000000000000.0,-1.6023671870362022e+308,3.612724278583076e+307,-8.572552822954835,377868.06762097357,0.35752124726168266]);
