const v5 = -1 + null;
v5 + v5;
const v7 = Math.fround(-1);
const v8 = null & v5;
const v9 = v5 ^ -1;
const v10 = v9 ^ v9;
const v11 = v8 - v10;
const v12 = v10 | v10;
12 - 12;
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    a18--;
    for (const v20 of a17) {
        try {
            this.valueOf = a17;
        } catch(e21) {
        }
    }
    const v22 = this?.constructor;
    try { new v22(a17, a17); } catch (e) {}
    try {
        this.f = 12;
    } catch(e24) {
    }
}
const v25 = new F15(-1, -107236156);
const v26 = new F15(-1, 12);
const v27 = v25[2789644252];
%VerifyType(v7);
try {
    v25.valueOf = v27;
} catch(e28) {
}
v26.length = v26;
new F15(-1, 12);
[v12,v10,2n,57091,F15];
[v8,[v5,v11,9n]];
v7 || ((v7 || v8) | v5);
v8 - v8;
const v42 = [2147483647,-2147483649,27792,1,-377392057,65536,-128];
v42.g = v42;
[9007199254740991,9007199254740992,1168191908,4294967297];
const v44 = [-2030100832,772027189,4294967296,-39174,-3,536870887];
try { v44.splice(12, 2n); } catch (e) {}
Float32Array.prototype = Float32Array;
const v47 = new Float32Array(Float32Array, Float32Array);
delete v47[536870888];
new Int16Array(1024);
new Uint8ClampedArray(14);
/(?:a+){0,0}[x\dz]\u0034ha(?=bbb|bb)c/gsud.sticky;
try {
} catch(e8) {
}
function f14(a15) {
    const o16 = {
        "c": a15,
        ..."65535",
        "a": a15,
        ["m"]: "m",
    };
    return o16;
}
const v17 = f14("m");
const v18 = f14("65535");
const v19 = f14("e");
const v20 = ["65535",f14,"e",f14,"65535"];
const v21 = ["65535",v20,v20];
const v22 = [v20];
function f23(a24, a25, a26, a27) {
    const o38 = {
        get e() {
            super[a27] = a26;
            function F29(a31, a32, a33, a34) {
                if (!new.target) { throw 'must be called with new'; }
                this.g = a34;
            }
            new F29(this, v18, v20, a27);
            new F29(a27, v19, v21, "65535");
            new F29(v17, a25, v21, a25);
            return v22;
        },
    };
    return o38;
}
f23(v17, v17, f23(v18, "65535", "e", v17), v17);
new Int8Array(0);
class C47 {
    get e() {
    }
    static [38567] = -57641.03148885199;
    #toString(a50) {
    }
    constructor(a52, a53, a54, a55) {
        super();
        const o57 = {
        };
        gc(o57);
    }
}
const v59 = new C47();
const v60 = new C47();
const v61 = [-2.0,-Infinity,1.762696690706525e+307,4.561012756948999e+307];
const v62 = [4.0,6.789772630191657e+307,1.7976931348623157e+308,1.7976931348623157e+308,-2.0,0.06136428089954615,1000000.0,-1.4205107913505,-1.730047930360128e+308,-7.329935897040107];
const v63 = [6.929526887701016,-252289.71684125415,0.0,-5.0,1000000000000.0,-1000.0];
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a68;
}
new F64(v60, v62, 38567);
const v71 = new F64(v59, v63, v59);
try { v61.findLastIndex(v59); } catch (e) {}
[1000,"65535"];
const v76 = Symbol.iterator;
const o78 = {
    [v76]() {
    },
};
v62.__proto__ = v60.toString(-57641.03148885199, v71);
