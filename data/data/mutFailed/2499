function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = F0;
    this.d = F0;
    try {
        this.d = 0;
    } catch(e3) {
    }
    try {
        this.f = 0;
    } catch(e4) {
    }
}
function f5() {
    try {
        F0.c = F0;
    } catch(e6) {
    }
    return F0;
}
Object.defineProperty(F0, "toString", { writable: true, configurable: true, value: f5 });
const v7 = new F0();
const v8 = new F0();
new F0();
const v10 = [-4.959604695687455e+307,1e-15,1000.0,-2.220446049250313e-16,-3.0,393.4209557653578,-2.220446049250313e-16,-2.2632774493180507,1000000000000.0,-2.695616264294052e+307];
const v11 = /Q?/gud;
v11.dotAll = v11;
new Int32Array(2917);
const v15 = [-3.0,915753.9863913173,9.267057560824046,1.7976931348623157e+308,9.922900090272805e+307,0.13933627364379486];
const v16 = [-788990.859725192,0.21160541238801112,-292.48294370818155,-276.64450635079095,0.9135884772689935,12.124180048393328];
new Date(-9223372036854775807, -9223372036854775807, Date, -9223372036854775807);
let v20 = 1000000000000.0;
-(v20--);
class C23 {
    constructor(a25, a26) {
        this[Symbol.toPrimitive] = f5;
        this[Symbol.toPrimitive] = Date;
        this < this;
        try {
            this.valueOf = a25;
        } catch(e32) {
        }
    }
    static 2 = v7;
    [F0] = v16;
    static valueOf(a34, a35) {
        const v36 = super[this];
        a35 |= v8;
        return v36;
    }
    /*
    constructor(a38, a39) {
        const v40 = this.constructor;
        try { new v40(); } catch (e) {}
        this.propertyIsEnumerable(v15);
    }
    */
}
const v43 = new C23(F0, v16);
class C44 {
}
new C44();
for (let v46 = 0; v46 < 5; v46++) {
    delete v10[v46];
}
new C23(C23, v43);
new C23(v43, v16);
function F50(a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a53;
    } catch(e55) {
    }
}
new F50(v7, v15, v8);
class C57 {
    static #p(a59) {
        this.#p();
    }
}
const v61 = new F50(v7, C23, v7);
new F50(v8, v61, v16);
try {
const t0 = 8;
t0();
} catch (e) {}
try {
    function f65() {
        return f65;
    }
} finally {
    parseInt(v16);
    class C68 {
    }
    const o70 = {
        "execution": "async",
    };
}
