const t0 = (2136873598).constructor;
t0();
const v6 = new Float64Array(2136873598 * 2136873598);
v6[47] = v6;
const v8 = new Int16Array(136);
Int32Array.prototype = Int32Array;
Uint8Array.f = Uint8Array;
const v12 = new Uint8Array(Uint8Array);
const o13 = {
    ...v12,
};
o13[1] = o13;
const v14 = o13[2];
v14 >>> v14;
const v16 = new Int32Array(2490);
v16[74] = v16;
let v19 = new Uint8ClampedArray(6);
class C20 {
    constructor(a22, a23, a24) {
        a23 + a23;
        a24 >>> a24;
        Math.sinh(v19);
        Math.log(v19);
        const v31 = -536870912;
        const v33 = Math.ceil(v19--);
        v33 >> v33;
        new Uint8Array(268435440);
        class C38 {
        }
        new C38();
        Math.tan(536870912);
        -v31;
    }
    c;
    0;
    1 = 6;
    170229271;
    [Uint8ClampedArray] = v8;
    static [2490];
    static 10;
}
new C20(v19, 6, 136);
const v43 = new C20(6, 6, 2490);
new C20(136, 6, 2490);
function f45() {
    function f47(a48) {
        try {
            a48.e = ArrayBuffer;
        } catch(e49) {
            const v50 = e49?.constructor;
            try { new v50(2490); } catch (e) {}
        }
        return 6;
    }
    class C52 {
    }
    try { new C52(); } catch (e) {}
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    new Uint32Array(64);
    ArrayBuffer.valueOf = f47;
    const v57 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    try { BigUint64Array.from("-2"); } catch (e) {}
    class C61 {
        static {
            [];
            try {
                super.setInt8();
            } catch(e65) {
            }
        }
    }
    const v66 = new C61();
    [v66];
    return v57;
}
try { new Float64Array(o13, v43, 136); } catch (e) {}
const v71 = new Float64Array(256);
v71[3] = v71;
try { ("sync").italics(); } catch (e) {}
const o74 = {
    "execution": "sync",
};
o74.b = o74;
%OptimizeFunctionOnNextCall(f45);
f45();
