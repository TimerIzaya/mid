function f0() {
    const o8 = {
        1: -368802162,
        [-368802162]: -2147483649,
        ...1e-15,
        2480: -2147483649,
        toString(a5, a6, a7) {
            f0[f0] = f0;
        },
        "g": 1e-15,
        "h": 1e-15,
        __proto__: -2147483649,
        "c": 1e-15,
        "b": -2147483649,
        [1e-15]: 1e-15,
        "a": 1e-15,
        [-2147483649]: 1e-15,
    };
    return o8;
}
const v9 = f0();
f0();
f0();
const v12 = [-4.0,2.0,5.302580751923289,-0.0,0.9007131241233983,7.605230147207227,2.220446049250313e-16,-1000000.0,-0.0];
const v13 = [-213.29435657648958,4.840174249025576,4.0,-4.140014624659985];
const v14 = [-1000000.0,0.8772139452722184];
function f15(a16, a17, a18) {
    return a16.fill();
}
[,[,]];
f15.fill();
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a28;
        new Uint16Array(3);
        new BigInt64Array(1073741824);
        const v35 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
        v35.push(v35);
        new Int8Array(v35);
    } catch(e39) {
    }
    try {
        this.h = a26;
    } catch(e40) {
    }
}
new F24(v13, v9, v12);
new F24(v14, v9, v12);
new F24(v12, v9, v14);
function f44(a45, a46, a47, a48) {
    const o53 = {
        [f44](a50, a51, a52) {
        },
        "apply": f0,
    };
    return a48;
}
Array.__proto__ = this;
!-2;
%OptimizeFunctionOnNextCall(f44);
f44();
