function f0() {
    const o9 = {
        toString(a5, a6) {
            try {
                super.getMinutes(a6);
            } catch(e8) {
            }
            return "object";
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o9;
}
const v10 = f0();
const v11 = [1000000.0,-1.7976931348623157e+308];
const o12 = {
    ...v11,
};
for (const v14 of o12()) {
}
const v15 = f0();
const v16 = f0();
v16[128];
function F19(a21) {
    if (!new.target) { throw 'must be called with new'; }
    a21[128] = a21;
    try {
        this.f = a21;
    } catch(e22) {
    }
    try {
        this.h = a21;
    } catch(e23) {
    }
    try {
        this.d = v10;
    } catch(e24) {
    }
}
F19.e = F19;
new F19(v15);
const v26 = new F19(v16);
v26.d = v26;
const v27 = new F19(v15);
function f28(a29, a30, a31) {
    a30[128];
    a31[128] = a31;
    const o39 = {
        ...v26,
        2074850330: a29,
        get a() {
            const o37 = {
                "execution": "async",
                "type": "major",
            };
            return gc(o37);
        },
        "b": a30,
    };
    o39[2074850330] = o39;
    return o39;
}
const v40 = f28(v16, v16, v10);
Symbol.iterator;
class C43 {
    set h(a45) {
    }
    b;
}
new C43();
const v47 = f28(v15, v15, v40);
v47[2074850330] = v47;
f28(v40, v47, v15);
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    function f54() {
    }
    const v55 = [3,1024,490145092,10,-9223372036854775807,-9223372036854775807,1441684544,-1572996615];
    const v56 = [127,-65535,64,343690887,-2123787437,2,2147483649,-53151,1];
    const v57 = [1342014474];
    class C58 {
        toString(a60) {
            const v61 = f54();
            try { this["any"](v61); } catch (e) {}
            return v57;
        }
        o(a65) {
            return v55["findLastIndex"](f54, this);
        }
        static 10000 = v56;
        static [v56];
    }
    function f69(a70) {
        function f72(a73) {
            a70 ||= -47530;
        }
        this.onmessage = f72;
        C58 ^ v56;
        [47245,4294967296,1213575163,536870889,-15,536870888,-1855227439,2130791141];
        [129,-205176918,127,9007199254740992,-9007199254740990,-60329,-278065414];
        [-9007199254740990,-16,-536870912,10000,-2,16,1278783829,4294967297];
    }
    const v79 = this?.constructor;
    try { new v79(F49, F49, f0); } catch (e) {}
    a52.g = a52;
    try {
        this.d = a53;
    } catch(e81) {
    }
    try {
        this.a = a51;
    } catch(e82) {
    }
}
new F49(v15, v16, v15);
const v84 = new F49(v16, v10, v27);
new F49(v16, v40, v84);
new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
const t124 = /P[x\dz]*/gudmy;
t124.multiline **= 1000;
try { Uint32Array.bind(F19); } catch (e) {}
Float64Array.length = Float64Array;
Uint32Array.d = Uint32Array;
const v103 = Math?.expm1;
try { new v103(Date); } catch (e) {}
Math.log1p(4294967295);
(-1.4618325192014402e+308) ** -724330360;
Date.UTC(2, 2);
const v2 = new Uint16Array(20);
new WeakMap(10);
const v8 = new Int32Array(1000);
const v11 = new isNaN(4);
class C12 extends Uint16Array {
    get e() {
        try {
            isNaN(-1);
        } catch(e16) {
        }
        return 20;
    }
    1;
    static #c;
    constructor(a18, a19, a20) {
        super(1000, 20, a19);
        try {
            isNaN(-9007199254740990);
        } catch(e23) {
        }
    }
    static #h;
    16 = v8;
    #f;
}
new C12();
new C12(v11, v2);
isNaN(10);
%PrepareFunctionForOptimization(isNaN);
isNaN(10);
isNaN(10);
%OptimizeMaglevOnNextCall(isNaN);
isNaN(10);
new C12();
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
}
ArrayBuffer.construct(F31, [ArrayBuffer,ArrayBuffer,ArrayBuffer,ArrayBuffer], Map);
