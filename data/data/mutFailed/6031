function f1() {
    Set[9] = Set;
    const o3 = {
    };
    new Proxy(Uint8Array, o3);
    return Set;
}
Set.toString = f1;
const v6 = new Set();
class C7 {
    #m(a9, a10) {
        a10[a10] = a9;
        super[Set] = a10;
        return v6;
    }
    h = v6;
    static #n(a12, a13) {
        try {
            a13.length = 2;
        } catch(e15) {
        }
        this[Set] = a12;
        return Set;
    }
}
new C7();
new C7();
new C7();
let v19 = -141472847;
v19--;
-1615959423 % -1615959423;
new WeakMap();
[1000.0,NaN,137.7115222382622,-1000000000.0,-8.074718279536873e+307,-3.0,2.220446049250313e-16,-372.1166525529642];
[-4.2104783286241565,-939129.928670659,1.0];
const v28 = [9.904141177520284e+307,-2.220446049250313e-16,-4.0,-2.0,1.3159462676138283,2.2250738585072014e-308,-1.7976931348623157e+308,-0.028714398568915556,-2.0];
try { v28.reduce(v6); } catch (e) {}
const v31 = [-8n];
try { v31.fill(Set); } catch (e) {}
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    let v38;
    try { v38 = new v37(F33, v37, F33, F33); } catch (e) {}
    const v40 = v38 >>> 38445;
    38445 >> v38;
    let v42 = v40 * v40;
    v42--;
}
new F33(F33, F33);
v31.toLocaleString();
