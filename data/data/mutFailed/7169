const v1 = new WeakSet();
class C3 {
    static #p(a5) {
        this.#p();
    }
}
try { ("9g9Ak").concat(536870912, "9g9Ak", 24005, 15n, 15n); } catch (e) {}
v1[208] = "9g9Ak";
let [v13,,v14,v15] = "9g9Ak";
try { v15(v14, WeakSet, v15, v15); } catch (e) {}
v13.unshift("valueOf");
for (let v19 = 0; v19 < 25; v19++) {
    const v20 = [601759695];
    const v21 = [1073741824,1073741823,1376142744,1073741825];
    function f22(a23, a24, a25, a26) {
        function f27() {
            return a25;
        }
        try { v21["find"](..."find", a26, ...v20); } catch (e) {}
        BigInt64Array.constructor.call(f27);
        return a25;
    }
    for (let v33 = 0; v33 < 10; v33++) {
        f22();
    }
}
class C39 extends Set {
}
const v40 = new C39();
v40["delete"](129n);
const v44 = Math.acosh("9g9Ak");
Math.cbrt("9g9Ak");
for (let i48 = 0;
    i48 < 9;
    (() => {
        with (undefined) {
        }
        const v56 = new Float32Array(5);
        const v59 = new Uint8Array(1759);
        const o60 = {
            ...v56,
            ...v59,
        };
        i48++;
    })()) {
    Math.pow(-65535, 1);
    -65535 + (v1 & 24005);
}
["-6",Math];
const v73 = [1073741825];
const v74 = [-5,6,-5,9,-11,1366174116,-1405268025,256,-3,0];
const v75 = [-14,5,65537];
try { v75.findLastIndex(8n); } catch (e) {}
function f77(a78, a79) {
    try { a78.toLocaleString(); } catch (e) {}
    a79.g = a79;
    const o94 = {
        "b": v44,
        "g": 536870912,
        get f() {
            return this;
        },
        [24005]: 24005,
        set g(a83) {
            324308659 + 324308659;
            const v89 = new Int16Array(2);
            new Uint16Array(v89);
            v74[1024] = v73;
        },
        ...v74,
        "g": v75,
        "b": a78,
        __proto__: a79,
        "a": a78,
        "c": a79,
        5: v73,
    };
    return o94;
}
const v95 = f77(v75, v75);
const v96 = f77(v73, v73);
try { v96.some(v96); } catch (e) {}
f77(v73, v75);
const v100 = /\b[gW\x60]/vi;
v100.dotAll = v100;
class C101 {
    #a;
    constructor(a103, a104, a105) {
        a104 - a104;
        try {
            const v107 = [];
            class C108 {
                static get b() {
                    try {
                        super.getOwnPropertyNames();
                    } catch(e111) {
                    }
                    return v107;
                }
                constructor() {
                    this[v107] = this;
                    this[v107] %= this;
                }
                static e;
                [v107];
            }
            a104.#a;
        } catch(e114) {
            e114.g = e114;
        }
    }
}
try { new C101(v95, v95, v95); } catch (e) {}
new C101(v100, 0n);
