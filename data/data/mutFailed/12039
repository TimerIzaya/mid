const v2 = new BigUint64Array();
function f3() {
    const o4 = {
    };
    return o4;
}
const v5 = f3();
v5.g = v5;
const v9 = Int16Array?.constructor;
try { new v9(v5); } catch (e) {}
const v11 = new Int16Array();
try { BigUint64Array.apply(v11, 1); } catch (e) {}
const v14 = new Int32Array(2889);
let v15 = 16;
v15--;
Uint8ClampedArray.name;
new Uint8ClampedArray(v15);
const v20 = /(?:a?)?U*/dim;
function f21() {
    return v20;
}
new Int8Array([2.220446049250313e-16,0.1888142230970381,-7.031087770233782e+307], Int8Array);
try { Uint32Array.from(v5); } catch (e) {}
const v28 = new Uint32Array(7);
function F29(a31, a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    a31 | a31;
    a32++;
    a33 === a33;
    try {
        this.a = v28;
    } catch(e38) {
    }
}
const v39 = new F29(v2, 2889, v15, 2889);
const v40 = new F29(v39, v15, v15, Uint8ClampedArray);
new F29(v40, 2889, v15, v14);
const v42 = [v39,v14];
const v43 = [Uint32Array,v28,2889];
v43[2] = v43;
[v28,2889,v15,v42];
const v48 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v48.pop(); } catch (e) {}
const v50 = [601759695];
function f52(a53, a54, a55, a56) {
    const v58 = arguments.toString();
    function f59() {
        const t47 = "Vre";
        t47[2] = "Vre";
        const v61 = ("Vre")?.toLocaleUpperCase;
        v61.g = v61;
        try { new v61(); } catch (e) {}
        let v63;
        try { v63 = ("Vre").fixed(); } catch (e) {}
        let v64;
        try { v64 = v63.localeCompare(v58); } catch (e) {}
        ~v64;
        let v67 = -268435456;
        v67 - v67;
        const v69 = v67--;
        v69 - v69;
        -(v67 + v67);
        const o90 = {
            "c": -4294967297n,
            [522675525n](a74, a75) {
                super.b = v69;
                const t66 = "Vre";
                t66[4] = a55;
                [-958673.5954177042];
                [5.0];
                [-5.245029411262204e+307,412.0611056798143,9.796530918238467,1000000000.0];
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v50,
            valueOf(a80, a81) {
            },
            "e": -4294967295,
            "e": v67,
            "maxByteLength": -4294967295,
            "arguments": v48,
            ...v50,
            "type": "Vre",
            ..."Vre",
            valueOf(a83, a84) {
                a84--;
                return a84;
            },
            ..."Vre",
            4: "Vre",
            "c": v67,
            "type": "Vre",
            toString(a87, a88, a89) {
                return a89;
            },
            6: v67,
        };
        o90.c;
        let v92;
        try { v92 = o90.valueOf(o90, -128); } catch (e) {}
        -v92;
    }
    f59();
    %OptimizeFunctionOnNextCall(f59);
    return -4294967297n;
}
const v95 = f52?.__lookupSetter__;
try { new v95(v50); } catch (e) {}
let v97 = f52();
v97++;
function f99(a100) {
    return WeakMap;
}
const v101 = new v14();
const v102 = [-9223372036854775807,50426,-61371];
v102[1];
class C104 {
    constructor(a106, a107, a108) {
        function f109() {
            return f109;
        }
        const v110 = f109?.constructor;
        try { new v110(a108); } catch (e) {}
        class C112 {
            #toString(a114, a115, a116) {
            }
        }
        const v117 = C112?.call;
        try { new v117(v117); } catch (e) {}
        for (let v120 = 0; v120 < 10; v120++) {
            Reflect.construct(C112, [Reflect,Reflect,Reflect,Reflect], WeakSet);
        }
        return f109;
    }
}
C104.length = C104;
const v124 = new C104();
v124.prototype;
v124.toString = f99;
const v126 = v124.constructor;
v126.name = v126;
try { v126(v101, v124, v102); } catch (e) {}
