const v5 = new Uint16Array(821);
const v6 = new Uint8Array(v5);
new Uint8ClampedArray(35);
Float64Array.name = Float64Array;
new Float64Array(129);
const v13 = new BigUint64Array(1331);
const v17 = [295968041,[-1024,536870889,65536,65536]];
const o18 = {
    "arguments": v17,
    "type": "function",
};
v13[251];
[-7.630015309888012,-2.175761857574628];
[-1.3766918350037874e+307];
[-4.0,247.09371581404298];
const v23 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
function f24(a25, a26) {
    const v28 = new Int16Array();
    try {
        v6.b = -128;
    } catch(e30) {
    }
    v28.lastIndexOf();
    class C32 {
    }
    ("vZa2U").normalize("function");
    const v35 = [10,-2,256,-4294967295,6,-34566,804990459,-256,-1831978218];
    try {
    const t0 = 1073741824;
    t0(-65535, v35, 1073741824);
    } catch (e) {}
    return a26;
}
v23.toString = f24;
v23[2] = v23;
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a42;
}
class C46 {
    n(a48) {
        this[a48] = 47457;
    }
}
v23.g = v23;
const v49 = v23.push(v23);
v49 + v49;
new Int8Array(v23);
