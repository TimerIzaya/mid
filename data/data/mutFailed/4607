new Int16Array(128);
const v8 = new Float32Array(127);
new Int16Array(7);
new BigInt64Array(0);
new Int8Array(1754);
new Uint8ClampedArray(83);
const v23 = new BigInt64Array(205);
new Uint16Array(256);
const v27 = v23[v8];
const v31 = new Float64Array(255);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    a35 >> a35;
    a37 | a37;
    v31.b = a35;
    for (const v40 of a36) {
        v27?.h;
    }
}
new F32(255, 205, 255);
const v43 = new F32(255, 256, 255);
new F32(255, 205, 256, 255);
const v45 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
function f46(a47) {
    class C48 {
    }
    const v49 = new C48();
    const v50 = v49.g;
    try {
        v50.length = 1;
    } catch(e52) {
    }
    return v50;
}
Object.defineProperty(v45, "toString", { configurable: true, enumerable: true, value: f46 });
const v53 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v54 = [Infinity];
const v55 = [2.2250738585072014e-308,1.949684848262672,4.0];
Object.defineProperty(v55, 3, { writable: true, configurable: true, enumerable: true, value: Int16Array });
const v56 = v55.push(v53);
[342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0];
const v58 = (1754).toStringTag;
let v59;
try { v59 = v54.every(v58, v43); } catch (e) {}
const v60 = new v56(v58, v59, v59, v56);
const t45 = v60.constructor;
new t45(-9007199254740991, v45, v55);
class C63 {
}
const v64 = C63.toString;
try { v64(); } catch (e) {}
