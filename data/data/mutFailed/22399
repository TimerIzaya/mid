class C3 {
    static get f() {
        Object.defineProperty(this, 5, { value: 0.2495348794712292 });
        super[this];
        this[this];
        return "function";
    }
    static o(a9, a10) {
        "wb5QY" || a10;
        "function" >> a10;
        return 0.2495348794712292;
    }
    ["function"] = 0.2495348794712292;
    4 = "wb5QY";
    static 8;
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v13;
    try {
        this.d = "wb5QY";
    } catch(e21) {
    }
    try {
        this.e = a18;
    } catch(e22) {
    }
    try {
        this.b = "wb5QY";
    } catch(e23) {
    }
}
const v24 = new F16(v15, v13, "wb5QY");
new F16(v15, v13, "wb5QY");
new F16(C3, v24, v14);
new WeakSet();
new Uint32Array(1000);
new BigUint64Array(1024);
new Int8Array(3638);
let v39 = 4.0;
function f41(a42, a43) {
    let v44;
    try { v44 = new a43(); } catch (e) {}
    var d = v13;
    return v44;
}
Date[Symbol.species] = f41;
const v48 = new Date("undefined");
v48.getYear();
v39 **= v39;
const o56 = {
    set d(a52) {
        for (let v53 = 0; v53 < 5; v53++) {
        }
        this["cos"]();
    },
};
class C57 {
    constructor(a59) {
        o56.d = a59;
    }
}
const v61 = new WeakSet();
v61[4] = -8.576381465737261e+307;
new Map();
class C67 {
    e;
    constructor(a69, a70, a71, a72) {
        super[a70] = this;
        const o73 = {
        };
        function f74(a75, a76) {
            return BigInt64Array;
        }
        o73.set = f74;
        function F79() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C82 extends F79 {
        }
        this[Symbol.match];
        v61[Symbol.asyncIterator];
    }
    [v48];
    #e;
    a;
    #g;
    static {
        for (let i92 = 0, i93 = 10;
            i92 < i93;
            (() => {
                function f97() {
                    return f97;
                }
                const v98 = [601759695];
                const v99 = [1073741824,1073741823,1376142744,1073741825];
                function f101(a102, a103, a104, a105) {
                    function f107() {
                        return a102;
                    }
                    const v108 = f97();
                    const v110 = new Int8Array();
                    function f111(a112, a113) {
                        return v108;
                    }
                    f111();
                    f111();
                    const v116 = v110.buffer;
                    Object.defineProperty(v116, "constructor", { writable: true, configurable: true, value: Date });
                    new Int8Array();
                    let v119 = 1000000000000.0;
                    v119--;
                    v116.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f107);
                    let v123;
                    try { v123 = v99["find"](..."find", a105, ...v98, ...v99, ...522675525n); } catch (e) {}
                    Symbol("find");
                    const v127 = new Uint8ClampedArray();
                    const o128 = {
                        ...v127,
                    };
                    v123 <= a104;
                    return arguments;
                }
                for (let v130 = 0; v130 < 10; v130++) {
                    f101();
                }
                i92++;
            })()) {
        }
    }
}
