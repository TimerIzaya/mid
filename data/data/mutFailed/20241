[-22725,31995];
[11,59734,1000];
[-473971238,-46633,268435439,27100,6,21400,15,31860,3];
("boolean").split("toString");
class C11 {
    ["toString"];
    static #n(a13, a14) {
    }
    static p(a16, a17) {
        super.b = 536870889;
        function f18() {
            return C11;
        }
    }
}
[-1.7976931348623157e+308,-5.0,-8.837343320721076e+307];
const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v24 = new Uint32Array();
const v26 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v27 = [601759695];
const v28 = [1073741824,1073741823,1376142744,1073741825];
function f29(a30, a31, a32, a33) {
    function f34() {
        v23.length;
        try {
        } catch(e36) {
        }
        const o37 = {
        };
        const o57 = {
            valueOf(a39, a40) {
            },
            1073741824: v24,
            [-4294967297n](a42, a43, a44, a45) {
                class C47 extends Date {
                    static get c() {
                    }
                }
                eval();
                class C51 {
                    constructor(a53, a54, a55, a56) {
                    }
                }
            },
            "arguments": v26,
        };
    }
    const v59 = new Int8Array();
    v59.buffer;
    const v63 = new Int32Array();
    v63[3];
    for (let v65 = 0; v65 < 10; v65++) {
    }
    let v67;
    try { v67 = v28["find"]("find", a33, v27); } catch (e) {}
    v67 <= a32;
}
[1.7976931348623157e+308,-501.87098955567143,1.7976931348623157e+308,-1000000000.0,-8.055323040261091e+307,3.0,596506.3419508853,0.5689462332485808,-646985.7076274226];
[1000000.0,421623.9987138491,0.3040586659872251,1000000000000.0,534260.0653408659,4.381829056074551,1000.0,2.220446049250313e-16];
const v71 = /a\scK(ab|cde)\1/gvdmy;
const v72 = new Uint32Array();
try { v72.entries(); } catch (e) {}
for (let v76 = 0; v76 < 10; v76++) {
    const t63 = "f";
    t63[1073741824] = 4294967296;
}
/s/usy;
/[foo(?<=bar)baz]/gvsy;
new Uint8Array(9);
new Int8Array(2018);
new BigUint64Array(16);
function f89() {
    const v91 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    new Int8Array(v91);
    return f89;
}
f89();
%OptimizeFunctionOnNextCall(f89);
class C95 {
    static {
        for (let v97 = 0; v97 < 25; v97++) {
            v97 >>> v97;
            const v99 = [601759695];
            const v100 = [1073741824,1073741823,1376142744,1073741825];
            function f102(a103, a104, a105, a106) {
                try { new a103(); } catch (e) {}
                a104 & a104;
                ~a104;
                try { new a103(); } catch (e) {}
                const v111 = a105 << a105;
                v111 % v111;
                function f114() {
                }
                const v116 = new Int8Array();
                const v119 = BigUint64Array * 536870887;
                let v120 = v119 - v119;
                v120++;
                const v122 = v119 ** v119;
                try { Number.parseInt(v120, v120); } catch (e) {}
                let v125;
                try { v125 = new Number(v71); } catch (e) {}
                try { v125.valueOf(); } catch (e) {}
                Number.isNaN(v122);
                function f128(a129, a130) {
                    return Number;
                }
                try { f128(); } catch (e) {}
                v116.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f114);
                try { v100["find"](..."find", a106, ...v99); } catch (e) {}
                const o136 = {
                };
            }
            for (let v137 = 0; v137 < 5; v137++) {
                f102(this, v137, v137);
            }
        }
    }
    static {
        try {
            const t120 = null;
            t120.valueOf = this;
        } catch(e140) {
        }
    }
}
