let v0 = "2147483648";
let v3;
try { v3 = ("number").includes("number"); } catch (e) {}
!v3;
const v5 = v3?.h;
let v6;
try { v6 = v5.sort("number", "h", "number", v3); } catch (e) {}
let v7;
try { v7 = new v5(v6, v5, v6, v6, v3, "number", "h"); } catch (e) {}
v0 = v7;
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try { a10.toWellFormed(); } catch (e) {}
    this.a = v0;
    try {
        this.a = a11;
    } catch(e13) {
    }
}
new F8("number", "h");
const v15 = new F8("h", "number");
const v16 = v15?.e;
try { new v16(v3, v3); } catch (e) {}
new F8("number", v0);
try { new Int8Array(v3, v7, 1.4021203885189858e+307); } catch (e) {}
new Int8Array(64);
const v28 = new Uint32Array(1024);
Int16Array.length;
new Int16Array(-13);
const v33 = [2,-10];
function f35(a36) {
    return a36;
}
f35.caller = f35;
class C37 extends f35 {
    static 268435456 = v28;
}
const v38 = new Uint8Array(v33);
v38[1] = v38;
