class C3 {
    3 = -1000000.0;
    p(a5) {
        a5 & super[this];
        return a5;
    }
    static {
        try {
            this.c = -1000000.0;
        } catch(e9) {
        }
    }
    [-1000000.0] = -1000000.0;
    [C3];
    1991429332 = -1000000.0;
}
new C3();
new C3();
const v12 = new C3();
const v13 = /3(?:a+)*1a\WU\u0034/gms;
function f14(a15, a16) {
    delete a16?.[13];
    function F21(a23) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C24 extends v12 {
    }
    try {
        C24.length = 2499;
    } catch(e26) {
    }
    const v27 = new Int8Array(F21);
    new Uint32Array(v27);
    return "G";
}
v13.toString = f14;
const v29 = v13?.toString;
try { new v29(); } catch (e) {}
const v31 = /LE/vm;
Object.defineProperty(v31, "g", { writable: true, value: v12 });
v31.g = v31;
/Z(?<a>(?<b>(?<c>(?<d>.).).).)[^\xed\xb0\x80]/udimsy;
[-3793233,-15,-1242911160,-2019406127,10000,15,255,41129,3];
[-2147483647,-9223372036854775808,9,9,1073741825,8,9,12060,6258,512];
[-2147483648,9223372036854775807,-2147483648,512,-65535,1024,-536870912,22985];
let v36 = -5;
v36++;
/0\P{Any}/uimsy;
for (let [i75, i76] = (() => {
        const v43 = [];
        function f45(a46, a47, a48, a49) {
            function F52(a54) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v56 = new BigInt64Array(4046);
            let v57 = undefined;
            const v58 = v57++;
            -v58;
            v58 & v58;
            const v61 = f45 + v58;
            const v62 = v58 >> v58;
            const v63 = v62 >>> v62;
            const v64 = v43.constructor;
            try { v64.isArray(); } catch (e) {}
            try { v64(); } catch (e) {}
            new F52();
            function F68(a70, a71, a72) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F68(v61, 4096, v63);
            let o74 = {
            };
            [,...o74] = v56;
        }
        return [0, 10];
    })();
    i75 != i75, i75 < i76;
    i75 % i75, i76 + i76, i75++) {
}
