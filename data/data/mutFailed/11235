class C3 {
    [C3];
    constructor(a5) {
        this.length = 9007199254740991;
        try {
            %VerifyType(this);
            const v6 = a5?.[268435456];
            const o7 = {
            };
            try {
                o7.g = -17838;
            } catch(e8) {
            }
            try {
                const o9 = {
                };
                o9.g = -17838;
                o9.f = this;
            } catch(e10) {
            }
            try {
                const o11 = {
                };
                o11.g = -17838;
                o11.f = this;
                o11.a = 9007199254740991;
            } catch(e12) {
            }
            try {
                const o13 = {
                };
                o13.g = -17838;
                o13.f = this;
                o13.b = v6;
            } catch(e14) {
            }
            this[-17838] += v6;
            this.__proto__ = this;
            for (let v18 = 0; v18 < 32; v18++) {
                v6["p" + v18] = v18;
            }
        } catch(e21) {
        }
    }
    [C3];
    129 = 44042;
    get c() {
        const o25 = {
            "maxByteLength": 3870,
        };
        const v27 = new SharedArrayBuffer(4, o25);
        new BigUint64Array(v27);
        return o25;
    }
    f;
}
const v30 = new C3(-17838);
const v31 = new C3(9007199254740991);
new C3(9007199254740991);
class C33 {
    static toString(a35, a36, a37, a38) {
        v30[1024];
        this[-1] = 1073741824;
        function F43(a45, a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a46;
            } catch(e49) {
            }
            try {
                this.f = a35;
            } catch(e50) {
            }
        }
        new F43(a35, 1073741824, 9007199254740991, 255);
        new F43(v30, C3, C3, 1073741824);
        new F43(a38, this, v31, 1073741824);
        return C3;
    }
    static {
        try {
            v31.length = 2;
        } catch(e56) {
        }
    }
}
new C33();
new C33();
new C33();
const v61 = 3 != 3;
function f62(a63, a64, a65) {
    return f62;
}
const v68 = [C3];
v68[1] = v31;
v68.unshift(v61);
const o70 = {
    "arguments": v68,
    "type": "function",
};
new Worker(f62, o70);
