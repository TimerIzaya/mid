function f0() {
}
new Date();
new Set();
new BigUint64Array(1000);
new Float32Array(1246);
const t6 = f0();
t6(f0);
Date[Date] = 817905185;
const v14 = [];
const o15 = {
    __proto__: v14,
};
new Float64Array(127);
new Int8Array(210);
new Uint16Array(636);
let v28 = 536870912;
const v31 = Symbol.iterator;
const o40 = {
    [v31]() {
        let v33 = 10;
        const o39 = {
            next() {
                v33--;
                v33 == 0;
                const o38 = {
                };
            },
        };
    },
};
Math.atan2(v28, -9);
const v43 = [-20096,4294967296,-65537,-2];
const v44 = [-1947047520];
[v44,v44,v44,v43];
const v46 = new Float32Array(false);
[424894.2409816319];
[674.2147392757822,-1.0,-1.099030429183971,595.0883640349539,776556.7579932055];
const v49 = [-3.658340648235961e+307,448383.7005262254,1e-15,1e-15,-194.61930619535894,-89393.11449571606,-719215.112220642,694.9417266491937];
[-599.310060923955,1000000.0,-9.460648890677907];
const v51 = [2.0,556.2622738010164,-1e-15,249331.33231149008,0.21855077137819667,1.7976931348623157e+308,1.014925745350093e+308];
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this?.constructor;
    try { new v58(4.0, 4.0); } catch (e) {}
    a56 < a56;
    const v61 = a57 << a57;
    v61 != v61;
    try {
        this.h = a57;
    } catch(e63) {
    }
    try {
        this.a = a56;
    } catch(e64) {
    }
    try {
        this.e = a57;
    } catch(e65) {
    }
}
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
}
const v75 = new F71(Float32Array, 1000.0);
let v76 = new F71(-6.427538385859785, v46);
v76 = v75;
const o77 = {
    __proto__: v51,
};
class C78 {
}
class C79 {
}
const v80 = new C79();
function f82(a83, a84, a85, a86) {
    const v87 = a84 >>> a84;
    const v88 = v87 >>> v87;
    v88 != v88;
    for (let v90 = 0; v90 < 5; v90++) {
        try { new C78(v80, v90, Float32Array, ...v90, a84); } catch (e) {}
    }
    const v93 = Math.max(a84);
    v93 - v93;
    return v88;
}
f82(636, 636);
v28 = 210;
gc in v51;
try {
    v75.fuck("flags", "flags", "flags", Float32Array);
} catch(e100) {
}
const o104 = {
    "execution": -9,
    "type": v49,
    get e() {
    },
    "b": Math,
};
