function f0() {
    const o8 = {
        10000: 5.0,
        "d": -22127,
        n(a5) {
            try { a5.setMilliseconds(this, -22127, a5, "cosh", this); } catch (e) {}
            ("cosh")[a5];
            return this;
        },
        ["cosh"]: -22127,
        "b": -22127,
        3: 5.0,
        "h": 5.0,
        "c": "cosh",
        ..."cosh",
    };
    return o8;
}
const v9 = f0();
f0();
f0();
const v13 = [-1000000000000.0,8.346648726726723,-2.853961546897292,7.043703611459062,-3.0,1000.0,1000.0,-1000.0];
const v14 = [Infinity,-1.3532321389775508e+308];
const v15 = [-4.3274990904940193e+307];
function f16(a17, a18) {
    const o25 = {
        valueOf(a20, a21) {
            const v22 = a20.constructor;
            class C23 extends v22 {
                #f;
            }
            new C23();
            return v22;
        },
        2: v9,
        81623536: v13,
        1073741824: a17,
        [a17]: v9,
        64: f0,
    };
    return o25;
}
const v26 = f16(v14, v13);
f16(v14, v14);
f16(v15, v13);
function f29() {
    return v26;
}
new Int16Array();
[-4,-46650,2,3,-65535];
65537 == 4096n;
class C39 {
}
const v40 = new C39();
const v41 = new C39();
const v42 = new C39();
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const t58 = a48.constructor;
    new t58();
    const t60 = 4096n;
    t60[2147483648] = a46;
    a48[2147483648] = a48;
}
new v9(C39, v41, v40, v41);
new F43(v41, v41, v42, v40);
[-768382956,65537,10000,-268435456,-1815566166,-536870912,4];
[128,7,55834];
try { Uint8ClampedArray.pop(); } catch (e) {}
function F56() {
    if (!new.target) { throw 'must be called with new'; }
}
class C58 extends F56 {
}
class C59 {
    static {
        for (let v61 = 0; v61 < 25; v61++) {
            function f62() {
            }
            const v63 = [601759695];
            const v64 = [1073741824,1073741823,1376142744,1073741825];
            function f66(a67, a68, a69, a70) {
                function f72() {
                    return a67;
                }
                const v73 = f62();
                new Int8Array();
                new Uint32Array(4);
                [a67];
                const v82 = BigUint64Array * 536870887;
                v82 ** v82;
                function f84(a85, a86) {
                    return v73;
                }
                f84();
                const v88 = v64.buffer;
                Object.defineProperty(v88, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v88.slice(2147483648);
                %OptimizeFunctionOnNextCall(f72);
                let v93;
                try { v93 = v64["find"](..."find", a70, ...v63, ...v64, ...522675525n); } catch (e) {}
                Symbol("find");
                const o96 = {
                };
                v93 <= this;
                return arguments;
            }
            for (let v98 = 0; v98 < 5; v98++) {
                f66();
            }
        }
    }
}
