class C3 {
    268435439;
    #f;
    #d = -1.5138132804562897e+308;
    constructor(a5, a6) {
        const v7 = super[-1.5138132804562897e+308];
        v7[1] = v7;
        this[4];
    }
    a = -1000000000000.0;
    [-1.5138132804562897e+308];
}
new C3(C3, -1.5138132804562897e+308);
new C3(0.49345306031820024, -1.5138132804562897e+308);
new C3(0.49345306031820024, -1000000000000.0);
function f13(a14, a15, a16, a17) {
    const t16 = arguments.constructor;
    new t16(a16);
    return f13;
}
%OptimizeFunctionOnNextCall(f13);
const v23 = [5,1436918233,13,-9223372036854775808,12,10779,268435439,-350312267,536870912];
class C24 {
    static {
        function f26(a27, a28, a29) {
            function f30(a31) {
                const v34 = new BigInt64Array(3768);
                return v34;
                class C35 {
                }
                class C36 {
                }
                const v37 = new C36();
                for (let v39 = 0; v39 < 5; v39++) {
                    try { new C35(v37, v39, Float32Array, ...v39, f30); } catch (e) {}
                }
                return v23;
            }
            return f26;
        }
        const v43 = ["function",v23,"function"];
        const o55 = {
            "arguments": v43,
            "type": "function",
            "d": "function",
            toString(a45, a46) {
                function F47(a49, a50, a51, a52) {
                    if (!new.target) { throw 'must be called with new'; }
                    let {"c":v53,} = a46;
                }
                const v54 = new F47();
                return v54;
            },
        };
        new Worker(f26, o55);
    }
}
