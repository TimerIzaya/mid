function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = F0;
    try {
        this.g = 820212525;
    } catch(e3) {
    }
    try {
        this.f = 820212525;
    } catch(e4) {
    }
}
const v5 = new F0();
function f6(a7, a8) {
    new Uint8Array(130);
    new Float64Array(2006);
    new Uint16Array(6);
    return v5;
}
v5[Symbol.toPrimitive] = f6;
const v20 = new F0();
function f21(a22) {
    const v24 = new Float64Array(Float64Array);
    for (const v25 in v24) {
    }
    return Float64Array;
}
v20.toString = f21;
let v26 = new F0();
v26.toString = f6;
class C27 extends F0 {
    p(a29) {
        function f30() {
            return a29;
        }
        return this[a29];
    }
    [F0] = F0;
    [v26] = v20;
    static #e;
    [v5];
    [v20] = v5;
    static [v5];
}
C27.toString = Symbol;
new C27();
const v33 = new C27();
const v34 = new C27();
class C35 {
    m(a37, a38) {
        if (a37) {
            C27[F0] >>= a37;
        } else {
            v26 >>>= v20;
        }
        return a38;
    }
    static f;
    0;
    static [v34];
    static 15;
    g = v33;
}
new C35();
const v40 = new C35();
new C35();
class C42 {
    static {
        new F0();
        C35 = F0;
        const v45 = this[v26];
        try { C27.toString(v45, v26, this); } catch (e) {}
    }
    p(a48, a49, a50) {
        super[F0];
        function F52(a54, a55, a56, a57) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = F0;
            } catch(e58) {
            }
            try {
                this.a = C27;
            } catch(e59) {
            }
        }
        const v60 = new F52(a49, a49, a49, v40);
        new F52(v33, v20, v20, v60);
        new F52(a49, a49, a50, v40);
        return v34;
    }
}
new C42();
new C42();
new C42();
const v68 = new Float64Array(3045);
v68["toReversed"](1.0, ...v68, ..."toReversed");
for (let i = 0; i < 5; i++) {
    function F72(a74, a75) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
