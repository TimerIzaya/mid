const o3 = {
    "maxByteLength": 1000,
};
try {
    o3.b = o3;
} catch(e4) {
}
function f7(a8, a9) {
    function f10() {
        return ("D")[0].substring();
        return a9;
    }
    Object.defineProperty(a9, Symbol.toPrimitive, { configurable: true, value: f10 });
    const v16 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
    let v17 = gc;
    v17.toString = v17;
    try { v17.bind(v16); } catch (e) {}
    v17 /= v17();
    const o73 = {
        4294967295: a8,
        [true]: 256,
        [a9](a21, a22, a23, a24) {
            let v25 = 0;
            while ((() => {
                    new Uint32Array(186);
                    let v30 = 9007199254740991n * 9007199254740991n;
                    v30--;
                    return v25 < 3;
                })()) {
                a24 = a8;
                const o64 = {
                    set a(a35) {
                        let v37 = ~1531487198;
                        const v38 = [748666.7832804511,3.0];
                        class C40 extends Float64Array {
                            [v38];
                        }
                        const v41 = v37++;
                        class C42 {
                            static #m(a44) {
                            }
                        }
                        const v45 = C42();
                        const v46 = C42();
                        const v47 = [];
                        const v48 = [v46];
                        class C49 extends C42 {
                            #n(a51, a52, a53, a54) {
                                function f55() {
                                }
                            }
                            #g;
                        }
                        const v56 = C49();
                        class C58 extends v48.constructor {
                        }
                        const v59 = new C58();
                        Object.defineProperty(v59, 65537, { value: v45 });
                        try { v56.m(v47); } catch (e) {}
                        !v41;
                        let v62;
                        try { v62 = a35(); } catch (e) {}
                        v62[414353240];
                    },
                };
                v25++;
            }
            function F66(a68, a69) {
                if (!new.target) { throw 'must be called with new'; }
                const v70 = this.constructor;
                try { new v70(this); } catch (e) {}
                a69++;
                this.g = a68;
            }
            return a24;
        },
    };
    return o73;
}
f7(-61220, f7);
const v75 = f7(-61220, 414353240);
f7(256, 414353240);
new Uint16Array(6);
function f81() {
    const o85 = {
        [null]() {
            try { this.null(f81, this, this, f81); } catch (e) {}
            super.b;
        },
    };
    return o85.null();
}
new BigUint64Array(64);
new Uint8ClampedArray(3235);
o3.constructor;
const v96 = new BigInt64Array(256);
v96.includes(null);
delete v96?.h;
function F99() {
    if (!new.target) { throw 'must be called with new'; }
    function f101(a102) {
        v75.length = v75;
    }
    Object.defineProperty(this, "h", { configurable: true, enumerable: true, set: f101 });
    this.h = true;
}
const v103 = new F99();
function f104(a105, a106) {
    const o108 = {
        ...a106,
        get h() {
            return this;
        },
    };
    return a106;
}
f104();
f104(v103, v103);
