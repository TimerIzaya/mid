const v1 = new Map();
let v3 = 2;
const v4 = new Array(v3);
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a7;
    } catch(e8) {
    }
}
const v9 = new F5(v4);
let v10 = new F5(Map);
const v11 = new F5(v10);
let v12;
try { v12 = v1.forEach(Array, v9); } catch (e) {}
const v13 = --v10;
v10 |= (v3 = v13);
[Array,Array,v9,v9,Array];
[v3,v12,v9,v4,v13];
const v16 = [v4];
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a19;
    } catch(e23) {
    }
}
new F17(v11, v11, v3, v9);
const v25 = new F17(v11, v11, v4, v9);
function f26(a27) {
    return a27;
}
class C28 extends f26 {
    3 = v16;
}
new F17(v11, v11, v25, v11);
function f30() {
    return f30;
}
class C31 extends f30 {
}
try {
    F5 &= C31;
} catch(e32) {
    for (let v33 = 0; v33 < 5; v33++) {
        function f34() {
            return e32;
        }
    }
}
new Uint8ClampedArray(237);
new Int32Array(128);
function F43(a45) {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F43(F43);
function f47(a48, a49, a50) {
    let v51 = 0;
    do {
        const o52 = {
        };
        o52.h = v46;
        const o53 = {
        };
        v51++;
    } while ((() => {
            a50 === 7;
            try {
                a49.toString = f47;
            } catch(e57) {
            }
            return v51 < 7;
        })())
    return f47(a50, v46);
}
new Float64Array(4);
new Int16Array(4096);
new BigUint64Array(0);
new BigUint64Array(6);
class C73 {
    constructor(a75, a76) {
        let v77 = 0;
        for (let i = 0; i < 5; i++) {
            const v78 = v77++;
            v78 + v78;
        }
        a76 - a76;
        let v81;
        try { v81 = new a75(-5.869943149384486, a76, a76, a76, ...0.2510089730549625, 512.29276402866); } catch (e) {}
        try {
            super.m(this);
        } catch(e83) {
        }
        a76 = v81;
        try { ("m").match(a75); } catch (e) {}
        try { v81["m"](v81, "m", a75, this, v81); } catch (e) {}
        Math.sign(0.8907211315752046);
        const v92 = -2 & 0.8907211315752046;
        const v94 = new Uint8ClampedArray();
        new v94();
        new Uint8Array(268435440);
        Math.sqrt(0.8907211315752046);
        !-1;
        v92 + v92;
        ~0.8907211315752046;
    }
    [-5.869943149384486];
    c;
    static e;
    h = -5.869943149384486;
}
try { C73.apply(C73); } catch (e) {}
const v105 = new WeakSet();
const o106 = {
};
const v108 = new Proxy(v105, o106);
new C73(-5.869943149384486, 0.2510089730549625);
const v110 = new C73();
const v111 = v110?.constructor;
let v112;
try { v112 = new v111(C73, C73); } catch (e) {}
const v113 = new C73(512.29276402866, 512.29276402866);
v108[5] = v111;
try { v112(0.2510089730549625, Map, Map); } catch (e) {}
v105.a |= v112;
new Uint8Array(75);
new Uint8ClampedArray(5);
new Int32Array(127);
new Map();
const v127 = new WeakMap();
[v113,v127,v113,C73];
const v129 = [-5.869943149384486,v110];
try { v129.sort(Map); } catch (e) {}
function f133() {
}
