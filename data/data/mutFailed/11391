const v0 = /m/gvdim;
const v1 = /a\s/im;
const v2 = /Cah23(?<!a)/gumy;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a5;
    } catch(e6) {
        const v8 = new F3();
        class C9 {
            [v8];
            constructor(a11, a12) {
                const v13 = this?.constructor;
                try { new v13(); } catch (e) {}
                const v15 = /(?<!)/gv;
                v15.e = v15;
                const v16 = /(\xed\xb0\x80)\x01/gudmy;
                v16.c = v16;
                const v18 = Symbol.iterator;
                const o20 = {
                    [v18]() {
                    },
                };
            }
        }
        const v21 = new C9(Map, Map);
        const t26 = v21.constructor;
        new t26();
    }
}
const v24 = new F3(v2);
new F3(v0);
new F3(v2);
[-268435456,4,1,2];
[268435441];
[1073741824,-702439684,-5,9007199254740992,-9223372036854775808,4,-21450,-9,4294967296,-4294967295];
class C30 extends F3 {
    get c() {
        class C33 extends v1.constructor {
            static f = v2;
            [v24];
            static 5;
        }
        new C33();
        return C33;
    }
    p(a36, a37, a38, a39) {
        this[a37] = F3;
        try {
            v0.source = a37;
        } catch(e40) {
        }
        return v1;
    }
}
new C30();
new C30();
new v24();
new Float64Array(732429391);
new Int8Array(106);
new Number(1000);
function f56() {
    function F57(a59) {
        if (!new.target) { throw 'must be called with new'; }
        const v60 = this.constructor;
        const v61 = v60.bind(F57, F57, F57, F57);
        try { v61(v61, F57, f56, f56, a59); } catch (e) {}
        try { new v60(); } catch (e) {}
    }
    const v65 = new Float64Array(Float64Array);
    const v66 = [601759695];
    function f67(a68, a69, a70, a71) {
        Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: v65 });
        arguments[4] = arguments;
        return v66;
    }
    f67(v66);
    new F57();
}
const v75 = [f56];
const v76 = [v75];
const v77 = [v75,f56,v75];
new BigInt64Array(3444);
class C82 {
}
new C82();
const v85 = [];
function f86() {
    const o87 = {
        __proto__: v85,
    };
}
new Uint8Array();
new Uint8ClampedArray();
const v93 = new Date();
new BigUint64Array();
F3[v93] = v93;
f56(BigInt64Array, f56, ...v76, 3444, 1024, ...v77);
f56();
f56();
[0.9830880735406903,-0.6660198851192867,729.1589343121786,6.490727458123557e+307,-1.2538779643386477e+308,-1000000000.0];
[638.8226705123661,3.0,-2.2250738585072014e-308,771474.4832247959,816263.8956170448,2.220446049250313e-16,5.0];
const v101 = [8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
[-904.0521533639978,-2.220446049250313e-16];
[692.912813481568,126686.58689393173];
function f105(a106, a107) {
    const o111 = {
        [a106](a109, a110) {
        },
    };
}
const v112 = f105(v101, 128);
/j(x)(x)(x)\2/gud;
/[\0](?:ab|cde)/vimsy;
/^xxx$/uisy;
try { v112.p(); } catch (e) {}
