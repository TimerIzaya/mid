new Uint8ClampedArray(512);
new BigUint64Array(1486);
class C6 {
}
const v7 = new C6();
const v10 = Symbol.iterator;
function f11() {
    for (const v13 in [-65535,536870889,4096]) {
    }
    try {
        f11();
    } catch(e15) {
    }
    return f11;
}
new Float64Array(2642);
let v18 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
const v19 = /[(?:a*)*]/u;
v10 >= v19 ? v10 : v19;
v18 = v7;
function f22() {
    return v10;
}
switch (v18) {
    default:
        let v23;
        try { v23 = v18(); } catch (e) {}
        try { v23(); } catch (e) {}
        break;
    case v19:
}
new Int16Array(3734);
function f33(a34, a35, a36, a37) {
    2147483649 << 2147483649;
    class C41 {
        toString() {
            [0.42610628000409834];
            [0.1916863927637561,5.0,-1000000.0,-1000000000000.0,-2.2250738585072014e-308,786167.582370504,221250.34918176057];
            [2.0,121972.82426161831,1.0,1000.0,1.586101720587471e+308,682084.812556563];
            return undefined;
        }
        #f;
        static [undefined] = undefined;
        536870887;
        static #d = undefined;
    }
    const v46 = new C41();
    const v47 = new C41();
    try {
        v46.__proto__ = v47;
    } catch(e48) {
        const v49 = -Infinity;
        const v51 = new Int32Array();
        v51.copyWithin(v49);
    }
    function f54() {
        return -17353;
    }
    function f55(a56) {
        return a37;
    }
    Object.defineProperty(arguments, 7, { configurable: true, get: f54, set: f55 });
    arguments[2] = arguments;
    return Uint8Array;
}
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
}
const v62 = new F57(-17353, -17353, f33);
v62.constructor = f33;
function F63(a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    a65--;
    a67 / a67;
    const v70 = this.constructor;
    try { new v70(a66, a66, a67); } catch (e) {}
}
const t77 = v62.constructor;
t77(-17353, -17353, Uint8Array);
function F74(a76) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f11;
    this.constructor.bind(F74, F74).length;
}
new F74(F74);
v19.unicode;
v19[Symbol.match];
