const v0 = /foo|(bar|baz)|quux/gumy;
const v1 = /P/umy;
let v2 = /D/s;
function f3(a4, a5) {
    function F6() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C9 extends F6 {
    }
    class C10 extends C9 {
        set d(a12) {
            super.d = this;
        }
    }
    return v1;
}
v2.valueOf = f3;
try {
    v2.exec("268435439");
} catch(e18) {
}
const v19 = [-143.44872583310655,947.5099183735754,691.3901350165302,-1.5191777615162074,-3.0,1000000.0,0.8909078070854055,-4.0,0.7658517104884689,1000.0];
function f20() {
    function f21(a22) {
        v2 = v0;
        return v2;
    }
    return f21;
}
function f26(a27) {
    a27 = f20;
}
Object.defineProperty(v19, "toString", { configurable: true, enumerable: true, get: f20, set: f26 });
const v28 = [-2.220446049250313e-16];
[4.87509447638293,-4.179601794104135,0.0,2.446421736254873,2.2250738585072014e-308];
const v32 = v2 / TypeError;
v28[v2] = v32;
Math.asin(v2);
const v38 = v32 || v2;
const v39 = Math.tan(-4.0);
v2 - v0;
++v2;
Math.imul(v38, v19);
Math.sinh(v1);
class C52 {
}
const v53 = new C52();
Object.defineProperty(v53, "length", { configurable: true, enumerable: true, value: v39 });
[5];
const v56 = [];
Reflect.apply(v56.fill, v53, v56);
