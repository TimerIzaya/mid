class C3 {
    static toString(a5) {
        const v6 = delete this?.e;
        try {
            v6.__proto__ = this;
        } catch(e7) {
        }
        return -12;
    }
    static get h() {
        try {
            C3.toString(-1322886077, false);
        } catch(e11) {
        }
        return C3;
    }
}
const v12 = new C3();
const v13 = new C3();
new C3();
const v18 = new v13(119);
function F19(a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a22;
    } catch(e24) {
    }
    try {
        this.g = v12;
    } catch(e25) {
    }
    try {
        this.f = a23;
    } catch(e26) {
    }
}
new F19(119, v13, -1322886077);
new F19(-1322886077, C3, -1322886077);
new F19(null, v18, 8);
const v30 = [];
let v33 = 2;
!F19;
5 - 119;
Math.max(-1000000000000.0);
const v40 = v33++;
5 || 119;
const v42 = [65537,-61752];
const v43 = [296261129,-1,3,2];
const v44 = [-268435456,1000];
let v47 = 2.1987256958863437;
v47 + 1487451380;
Math.max(v47);
const v50 = v12 && -1000000000000.0;
Math.clz32(-1000000000000.0);
-1000000000000.0 % v50;
--v47;
class C54 {
    constructor(a56, a57, a58, a59) {
        let v60 = 0;
        do {
            let v62 = 30918;
            const v63 = v62--;
            let v64 = v44 ^ v44;
            Math.random();
            Math.exp(v44);
            v63 >> v44;
            a56 instanceof Array;
            let [] = v44;
            Math.ceil(v63);
            ++v64;
            v60++;
        } while (v60 < 2)
        try {
            Array(-1073741824);
        } catch(e79) {
        }
    }
}
new C54(1000, v42, 1000, -1);
const v81 = new C54(v33, v30, v33, -1);
const v82 = new C54(v33, -1, v33, 1000);
function F83(a85, a86, a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a88;
    } catch(e89) {
    }
    try {
        this[v30] = v30;
        try {
            this.e = v43;
        } catch(e90) {
        }
        this.f = -1;
    } catch(e91) {
    }
}
const v92 = new F83(v30, v81, v33, v43);
const v93 = new F83(v43, v92, 1000, v92);
const v94 = new F83(v81, v93, 1000, v44);
v94[v40];
if (Array) {
    const v96 = v82[1073741825];
    try {
        v30.toString = v96;
    } catch(e97) {
    }
} else {
    try { v81.assign(); } catch (e) {}
}
new Float64Array(9);
new Uint32Array(1024, 1024, Uint32Array, 9007199254740992n);
new Uint16Array(219);
new Set(5867);
new Int32Array();
new EvalError();
const v28 = new Date();
[-4294967296,2147483648,59550,-110129571,7,-13,37327,268435456,12,4294967295];
[-7,1000,4,-1,-9007199254740991,10000,1721529741,-1,268435439,-2];
[3];
function f32(a33, a34) {
    new BigUint64Array(128);
}
f32(128, v28);
