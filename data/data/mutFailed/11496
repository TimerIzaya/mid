const t0 = 4058;
const v2 = new t0(4058);
const v5 = /(J5a{0,1}?)/y;
class C6 {
    static {
        for (let v8 = 0; v8 < 25; v8++) {
            0 ^ 0;
            URIError(Float64Array);
            const v15 = new Uint8ClampedArray(this);
            const v17 = v15["reverse"]();
            const v18 = [601759695];
            const v19 = [1073741824,1073741823,1376142744,1073741825];
            function f20(a21, a22, a23, a24) {
                ~a22;
                try { v17(); } catch (e) {}
                const v27 = a23 << a23;
                v27 % v27;
                function f29() {
                    return a21;
                }
                const v31 = new Int8Array();
                BigUint64Array.length;
                ("setUTCMinutes").toUpperCase();
                const v38 = new Date();
                v38.getFullYear();
                const v40 = BigUint64Array * 536870887;
                let v41 = v40 - v40;
                v41++;
                const v43 = v40 ** v40;
                try { Number(v5); } catch (e) {}
                Number.isNaN(v43);
                const v48 = v31.buffer.__defineGetter__;
                try { v48(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f29);
                let v51;
                try { v51 = v19["find"](..."find", a24, ...v18); } catch (e) {}
                return v51;
            }
            4294967296 & 4294967296;
            Symbol.for(Symbol.toPrimitive.description);
            for (let v59 = 0; v59 < 5; v59++) {
                f20(this, v59);
            }
        }
    }
}
const v61 = new BigInt64Array(0);
function f63() {
    return f63;
}
const v64 = [-9223372036854775808,58777,2];
Int16Array[Symbol.isConcatSpreadable] = f63;
new Int16Array(v64, 8, 8);
new Int32Array(2085);
new Uint8Array(2);
let v75 = 4096;
new Float32Array(v75);
v75--;
new Uint32Array(2);
new Uint8ClampedArray(4);
class C88 {
    static {
        if (this) {
        }
    }
    9 = 6;
}
let v90 = -9223372036854775808n;
v90 %= 45725n;
Math.expm1(-366687.8544616379);
delete v2[9];
delete v61?.byteOffset;
new Int32Array(64);
new BigInt64Array(255);
new Uint16Array(129);
const v106 = new C88();
const v107 = new C88();
function F108(a110, a111, a112, a113) {
    if (!new.target) { throw 'must be called with new'; }
    const v114 = this?.constructor;
    try { new v114(v107, 6, 6, a110); } catch (e) {}
    a110[9];
    a113--;
    try {
        this.c = -578828680;
    } catch(e118) {
    }
}
const v119 = new F108(v106);
new F108(v119);
