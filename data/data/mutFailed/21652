-Infinity;
new Float32Array(127);
const v21 = Uint8Array.name;
const v22 = new Uint8Array(1);
v22[0] = v22;
const v25 = new Float64Array(v21);
const v26 = v25?.constructor;
try { new v26(1, v22, Float32Array); } catch (e) {}
+"31639";
1 << "31639";
~-63113;
let v34 = 1089314970;
v34--;
const v38 = -2 != -2;
new WeakSet();
new BigUint64Array(4096);
new BigUint64Array(3655);
new Float32Array(129);
function f50() {
    let v51 = -65535;
    const o88 = {
        next() {
            v51--;
            return this;
        },
        m(a55) {
            try { this.next(); } catch (e) {}
            const o57 = {
            };
            o57.b = o57;
            try {
                o57.e = v51;
            } catch(e58) {
                const v62 = new BigUint64Array();
                const v64 = v62.__proto__;
                v64[512] %= v64;
                const v66 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v66, o57);
            }
            3938 + 3938;
            Int8Array.e = Int8Array;
            const v71 = new Int8Array(3938);
            let v72 = 3;
            let v73 = 0;
            for (let i = 0; i < 5; i++) {
                [...v72] = v71;
                -(v73++);
            }
            const o76 = {
            };
            o76.b = o76;
            super.a = super[v38];
            super.f;
            const o81 = {
                "maxByteLength": 9,
            };
            const v83 = new SharedArrayBuffer(9, o81);
            new BigUint64Array(v83);
            try {
                const o86 = {
                };
                o86.h = o86;
            } catch(e87) {
            }
        },
    };
    return o88.m(f50, v51, v51);
}
f50();
const v93 = new Uint16Array(1412);
v93.lastIndexOf();
