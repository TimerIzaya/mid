let v3 = ["number","number","b"];
let v4;
try { v4 = ("b").entries(); } catch (e) {}
const v5 = ["number"];
let v6;
try { v6 = v5.toString(); } catch (e) {}
const v7 = [v5,"b"];
function f8(a9, a10, a11, a12) {
    function f13(a14, a15) {
        v5 << a14;
        class C17 {
        }
        const v18 = new C17();
        const v19 = [5];
        const v21 = [];
        Reflect.apply(v19.fill, v18, v21);
        return v3;
    }
    a9.toString = f13;
    let v24;
    try { v24 = a9.copyWithin("object", a10); } catch (e) {}
    a11[0] = f8;
    a12.length = a12;
    const o41 = {
        [v7](a26, a27) {
            const v28 = a12[a27];
            v3 = a9;
            this * a10;
            try {
                a27.split();
            } catch(e31) {
                for (let v32 = 0; v32 < 5; v32++) {
                    function f33() {
                        const v34 = [f33,f33,v24,f33];
                        try {
                            v34.some(v32);
                        } catch(e36) {
                            const v37 = `
                            `;
                            eval(e36);
                        }
                        return v34;
                    }
                    f33();
                    %OptimizeFunctionOnNextCall(f33);
                }
            }
            return v28;
        },
        __proto__: a11,
        [v4]: a10,
    };
    o41.b = o41;
    return o41;
}
const v43 = f8(v3, v7, "b", f8(v5, v3, "b", "b"));
v43.b = v43;
f8(v3, v3, "b", "object");
[1357226021,65537,64,17318,-9007199254740992,36218,1,33320,128,-14];
[1000,-4294967296,-1094789524,16047,9007199254740991,10000,-2094427559];
[-9223372036854775808,23560,13,10000,536870912];
const v48 = [9.64246076776908,2.220446049250313e-16,-2.220446049250313e-16,-5.0,4.0,-0.0,1000.0,-1.0];
v48[6] = v48;
class C49 {
    static [v6];
}
