const v0 = [4294967296,1140343207,4294967295];
const v1 = [6,-2147483647,9007199254740990,268435440,-2,-5115,2147483647];
const v2 = [-4294967295,-8,1416,10000,13,-917378236,9223372036854775807,8];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v1;
    } catch(e6) {
    }
}
const v7 = new F3(v1);
const v8 = new F3(v1);
const v9 = new F3(v8);
const o11 = {
    "arguments": v2,
    "type": "function",
};
function f12(a13) {
    v8[a13] = v7;
    function F15(a17) {
        if (!new.target) { throw 'must be called with new'; }
        const v18 = this.constructor;
        try { v18("function"); } catch (e) {}
        a17[5];
        this.d = "message";
    }
    const v21 = new F15("function");
    const v24 = new Int8Array(7);
    const t28 = v24?.constructor;
    new t28(7, v21, v21);
    return F15;
}
o11.toString = f12;
const v27 = [v9,v0,v8,v0,v7];
[v9];
const v31 = new Uint8Array(165);
o11 % o11;
const v35 = new Uint8Array(6);
const v37 = ["function",v35];
const o38 = {
    "arguments": v37,
    "type": "function",
};
[v27,v7,v9,v9,F3];
[-1.0,426.77975744325886,-Infinity,-1000000.0,-954301.3886935441,-2.2709753031964595e+307,-5.0,-5.0,3.0];
[1000000000000.0,1.4657976588257456e+308,864.8658784513918,0.0,1000000000.0,902.7456610731738,-6.935437465993806e+307];
const v43 = async (a44, a45, a46) => {
    return Uint32Array;
};
new Set();
[-1.0509677738969931e+308,3.8546103657956827,-1000000.0,-808.864194312303,-1e-15,-2.0];
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
class C53 extends Map {
}
class C55 {
    static {
        const v57 = [601759695];
        const v58 = [1073741824,1073741823,1376142744,1073741825];
        function f59(a60, a61, a62, a63) {
            try { new a60(); } catch (e) {}
            a62 << a62;
            function f66() {
                return a60;
            }
            const v68 = new Int8Array();
            BigUint64Array.valueOf = f59;
            function F71(a73) {
                if (!new.target) { throw 'must be called with new'; }
                for (const v77 of Array(4087)) {
                }
            }
            const v78 = BigUint64Array * 536870887;
            function f79(a80, a81, a82, a83) {
                a82++;
                const v85 = a82++;
                const v86 = a82 % a82;
                const o87 = {
                    ...v31,
                };
                let v88;
                try { v88 = o87.n(v86, v85); } catch (e) {}
                return v88;
            }
            Number.isNaN(v78 ** v78);
            function f92(a93, a94) {
            }
            try { f92(); } catch (e) {}
            const v96 = v68.buffer;
            const v97 = v96.__defineGetter__;
            try { v97(); } catch (e) {}
            Object.defineProperty(v96, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f66);
            let v100;
            try { v100 = v58["find"](..."find", a63, ...v57); } catch (e) {}
            const o101 = {
            };
            o101.e = v78;
            o101.e = this;
            o101.e = o101;
            v100 <= a62;
            function f103(a104, a105) {
                const o106 = {
                };
                return o106;
            }
            f103();
        }
        for (let v108 = 0; v108 < 5; v108++) {
            f59(this, v108, v108);
        }
    }
}
