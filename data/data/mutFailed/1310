const v2 = new Int8Array(5);
const o15 = {
    "f": "k",
    get f() {
        return this;
    },
};
new Uint8Array(10);
new Int8Array(12);
const v21 = [1000000000.0,-5.0,625.7403399479574,-942.0485124766018];
const v22 = [-1e-15,3.0,-490340.0450974547,-4.681312917566405,5.0,-8.681947153988407];
let v23 = [-1e-15,0.9650050566904838,-729117.8220138293];
class C24 extends Uint8Array {
    n(a26, a27, a28, a29) {
        ({"f":a27,"length":v23,} = a29);
        a28?.[64];
        10 > Int8Array;
        try { v2.copyWithin(a27, v23, v23); } catch (e) {}
        const v34 = [];
        Reflect.apply(a29.reverse, v21, v34);
        return v34;
    }
    static 257 = v23;
    [12] = v22;
}
new C24();
new C24();
new C24();
Math.cbrt(11 - 11);
