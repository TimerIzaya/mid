const v2 = new Array(15);
let v3 = 4294967297;
const v8 = Math.round(-442.14985482196664);
!24103;
Math.atan2(24103 && 24103, Array);
15 << 24103;
!-712839282;
const v14 = Math.min(-712839282);
v3--;
new Array(1186);
new Float64Array(14);
BigInt64Array.e = BigInt64Array;
new BigInt64Array(127);
new BigUint64Array(64);
for (let v31 = 0; v31 < 32; v31++) {
    "p" + v31;
    v2[14] = v31;
}
const t18 = -2147483649;
t18.d = v14;
const v35 = new Uint8Array(Array);
let v36;
try { v36 = v35.join(v35); } catch (e) {}
function f37(a38, a39) {
    const o40 = {
    };
    o40.c = o40;
    return a39;
}
let v41;
try { v41 = v36(15, Array); } catch (e) {}
for (let v42 = 0; v42 < 25; v42++) {
    const v43 = v14();
    const v44 = (759956410)?.__defineGetter__;
    try { new v44(759956410, v41); } catch (e) {}
    Object.defineProperty(v43, v42, { enumerable: true, get: f37, set: f37 });
    async function f46(a47, a48, a49) {
        const o50 = {
            "apply": a49,
            "call": Array,
            "construct": f37,
            "deleteProperty": f37,
            "getOwnPropertyDescriptor": Array,
            "isExtensible": v14,
            "ownKeys": f37,
            "preventExtensions": v43,
            "setPrototypeOf": Array,
        };
        new Proxy(v43, o50);
        await v8;
        return a49;
    }
    f46(-442.14985482196664, 1186, 24103);
    v35[BigUint64Array] = v43;
    const o57 = {
        "execution": "sync",
    };
    gc(o57);
}
[1.5349310938518386,1000.0];
const o5 = {
    "maxByteLength": 3,
};
const v7 = new SharedArrayBuffer(3, o5);
new BigUint64Array(v7);
let v12 = 128;
let v14 = 4;
const v17 = [-1359476291,8,536870912,478271363,-9223372036854775807,4096,536870888,-1193938476,-65535];
const v18 = [-4294967297,5,-14];
[-15695,-4];
const v20 = [339220.6328561967,911358.6181931046,-5.0];
v20[1] = v20;
const v21 = [-1000000.0,8.679879842107336e+307,-5.0,1.0,1000000000.0,-1.0];
v21.g = v21;
[-2.220446049250313e-16,-1e-15,2.0,3.738599362175618,0.07498296521872194,0.2885798208156063,-635620.1646720967,-1.7976931348623157e+308];
const v24 = [5.0];
let v26 = -618199.1371965441;
-v26;
async function* f28(a29, a30, a31) {
    'use strict';
    4.387531868078238 | v21;
    await Math.atan2(v26, false);
    yield* v24;
    return v26;
}
f28(4.387531868078238, 4.387531868078238, false);
let v44 = 3908;
v44++;
try { v17.entries(); } catch (e) {}
const v47 = 127n + 3;
[v12,v14,,...v26] = v18;
const v50 = !4.387531868078238;
+4.387531868078238;
v50 ** v50;
512 == 512;
Int32Array.prototype = Int32Array;
const v60 = [-1000000000.0,1e-15,-9.803124315434264,-366.4099400694298,1000000000000.0,0.7347183727038488,-Infinity,2.0,0.3916117682859279,-461027.2128179858];
const v61 = [1000000000000.0,-1.7976931348623157e+308,6.570844083183324,3.0,-2.0,961.6011183149949,634.9606529678199,1.6712831869744128e+308,1000000000000.0];
const v62 = [-1.0,1e-15,NaN,5.0,-1.390593919008634e+308,2.2250738585072014e-308,-3.6891891067725497e+307];
function f63() {
    return v60;
}
const v68 = 0.6855491065584247 * 128;
128 / 128;
Math.asinh(v68);
Math.acos(v47);
-(-9007199254740990);
v47 / 128;
Math.trunc(-9007199254740990);
f63.valueOf = Date;
class C78 extends f63 {
    constructor(a80, a81, a82, a83) {
        super();
        const o85 = {
        };
        o85.execution = a81;
        gc(o85);
    }
}
const v87 = new C78();
new C78(v87, C78, -2147483647n, v62);
new C78(-2147483647n, 0n, C78, v61);
class C90 extends f63 {
    [f63] = f63;
}
function f91(a92, a93) {
    class C94 extends v62 {
    }
    return 12938n;
}
C90.toString = f91;
new C90();
const v96 = new C90();
h = v96;
C90 << v62;
for (let v98 = 0; v98 < 8; v98++) {
    v87.length = v98;
}
const o101 = {
    "maxByteLength": 65535,
};
new SharedArrayBuffer(16, o101);
const v105 = [1000000.0,1.7976931348623157e+308,-37.10125895907777,-353.1167935473842,-3.0,-4.0,NaN,-86450.63126464805,-2.2250738585072014e-308];
[1.3408169087376933,1000000000000.0,-5.0,2.220446049250313e-16,-Infinity,4.943630624820415,1000000.0,443886.25784128485,3.0];
const v109 = new Float64Array(257);
const v112 = new Int8Array(5);
[v109,v112,Float64Array,...v105];
[-65536,-1455,1486555091];
[1671616942];
const v118 = [-16478,-55579,-9223372036854775808,1000,9];
try { v118(v118, 12, Float64Array, v112, Int8Array); } catch (e) {}
new BigInt64Array(12);
const v121 = [255,-33812,65535,-2,-9,536870889,452232014];
[-9007199254740990,1,1419167331,7,-9223372036854775808];
[1491818538,0,-4923,1944349290,-674559669,30710,536870889,56795,64,-1983711998];
[-1,-411170227,-1075826559,9007199254740990,-2147483648,-834789827,907075529,1142740827];
let v126 = 202248641;
const v127 = v126--;
Math.clz32(12);
12 && v126;
!v127;
v126++;
class C132 {
    get e() {
        v121 && this;
    }
}
