function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = -2131847605;
    try {
        this.d = a5;
    } catch(e6) {
    }
    try {
        this.h = a5;
    } catch(e7) {
    }
    try {
        this.f = a5;
    } catch(e8) {
    }
}
new F3(3);
new F3(3);
new F3(3);
const v15 = /(?<a>.)\k<a>?/vdimsy;
let v16;
try { v16 = v15(); } catch (e) {}
const v17 = [v16,v16,v16,v16];
const v19 = new BigInt64Array();
function f21() {
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v24 = 1000000000000.0;
    const v25 = v24--;
    let v27 = 257828.6336153492;
    const v29 = -v17;
    -(v29 && v17);
    v27--;
    class C34 {
        static #m(a36) {
        }
        constructor(a38) {
            const v40 = new Float32Array();
            v40.entries().next();
            const v43 = new Uint16Array(12, -4294967296, v25);
            new Float32Array(v43);
        }
    }
    try { new C34(); } catch (e) {}
    try { new C34(); } catch (e) {}
    let v48 = Symbol.iterator;
    Math[v48] = v48;
    try { v19.reduce(v16); } catch (e) {}
    const v50 = new C34();
    function f51() {
        return Symbol;
    }
    function f52(a53) {
        v48 = a53;
    }
    Object.defineProperty(v50, "toString", { writable: true, configurable: true, enumerable: true, get: f51, set: f52 });
    const v54 = new C34();
    try { v54.propertyIsEnumerable(v29); } catch (e) {}
    const v56 = new C34();
    const v57 = [];
    const v58 = [v56];
    v58[0];
    class C60 extends C34 {
        [v50];
        #n(a62, a63, a64, a65) {
            return v58;
        }
    }
    const v66 = new C60();
    v66.m = v54;
    const v67 = v58.constructor;
    new v67();
    class C69 extends v67 {
    }
    const v70 = new C69();
    v70.constructor = f21;
    v70.constructor.bind(v27);
    Object.defineProperty(v70, 65537, { value: v54 });
    try { v66.m(v57); } catch (e) {}
    return v16;
}
%PrepareFunctionForOptimization(f21);
f21();
f21();
%OptimizeFunctionOnNextCall(f21);
f21();
