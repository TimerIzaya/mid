new BigUint64Array(650, BigUint64Array, BigUint64Array);
1332 >> 1332;
Float32Array.length;
const v7 = new Float32Array(1332);
v7[588] = v7;
Int16Array.length;
new Int16Array(4);
let v13 = 256;
v13++;
class C16 {
    static {
        this.__proto__;
        const v19 = [];
        try { v19.toString(); } catch (e) {}
        try {
            super.setInt8();
        } catch(e22) {
            e22.g = e22;
        }
    }
}
C16.b = C16;
const v23 = new C16();
const v24 = v23?.constructor;
try { new v24(); } catch (e) {}
[v23];
const v29 = BigUint64Array.length;
v29 << v29;
const v31 = new BigUint64Array(1184);
const v32 = v31?.findLastIndex;
try { new v32(BigUint64Array); } catch (e) {}
const v34 = v31[1111];
v34 / v34;
3 << 3;
const v39 = 3 - 3;
v39 >> v39;
function f41(a42, a43, a44, a45) {
    try { new a42(); } catch (e) {}
    a43 & a43;
    const v48 = 3 | a43;
    v48 * v48;
    a42 / a42;
    const v51 = a43 < a42;
    a44 >>> a44;
    const o56 = {
        o(a54, a55) {
            return v51;
        },
    };
}
const v57 = f41?.__lookupSetter__;
try { new v57(v29); } catch (e) {}
4294967296 + 4294967296;
4294967296 & 4294967296;
const v63 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
try { v63.map(Float32Array); } catch (e) {}
const v67 = new Date(-2, v63);
try { v67.getUTCMonth(); } catch (e) {}
const v69 = v67.toTimeString();
try { v69.normalize(); } catch (e) {}
const v71 = new Uint16Array(3039);
v71[1495] = v71;
v71[1118] = v71;
let v72 = 4096;
v72++;
try { new Uint8ClampedArray(1332, Uint8ClampedArray, Uint8ClampedArray, 5, BigUint64Array, 3); } catch (e) {}
const v76 = new Uint8ClampedArray(v72);
try { v76.reduce(C16); } catch (e) {}
1000 >> 1000;
1000 + 1000;
const v82 = new Uint8ClampedArray(1000);
v82.includes(undefined);
function f86() {
    return "function";
}
([[2.220446049250313e-16,1000000.0,-832083.505850983,0.4718386381385684,1000.0,-5.0,9.814259698721895e+307,-659970.7982908424,-5.0]]).flat(3);
