const v6 = [57120n,-128,57120n];
const v7 = [-4529,-56036,4294967295,256,-256];
const v8 = /((?:ab){4,7}(?:a+){0,0})/gv;
const v9 = /a\bc/umsy;
class C10 {
    constructor(a12) {
        for (let v13 = 0; v13 < 160; v13++) {
            function f14() {
                if (a12) {
                    function F15(a17, a18, a19, a20) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    new F15(this, this, a12, v13);
                    new F15(v9, this, v8, C10);
                    new F15(a12, v7);
                } else {
                    new f14();
                }
            }
            f14();
        }
    }
}
const v26 = [v6];
const v27 = [785416711n];
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this.constructor;
    try { new v33(); } catch (e) {}
}
Object.defineProperty(C10, v7, { writable: true, configurable: true, set: Array });
function f36(a37, a38, a39, a40) {
    this.parseFloat([-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1]);
    function F44(a46) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const o58 = {
        4096: a40,
        "b": 57120n,
        "f": 57120n,
        [a40]: v26,
        "g": v27,
        set h(a48) {
            this.b;
            try {
                a39.d = 785416711n;
                function f50(a51, a52) {
                }
                -9007199254740991 >>> -9007199254740991;
                function f55(a56) {
                    return a56;
                }
            } catch(e57) {
            }
        },
    };
    return f36;
}
f36(f36(57120n, v27, v27, 31341), v27, v26, -128);
function f64(a65) {
    try { C10.valueOf(a65, Uint32Array, WeakSet, a65, this); } catch (e) {}
}
f36(v27, v27, v6, 10);
class C68 {
}
async function f69(a70, a71, a72, a73) {
    return (await C68).call();
}
f69.call(C68, C68, f69, f69, f69);
function f83(a84, a85, a86, a87) {
    return arguments;
}
