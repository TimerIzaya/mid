const v2 = new Uint32Array(4096);
const v5 = new Int8Array(127);
const v8 = new Int8Array(15);
function f9() {
    return v5;
}
const v10 = [-4.177961183959658,1.6309292683179403e+308,-0.0,1.0,-1000.0,-Infinity,-5.0,-1.5264988415621623];
[-0.0,1e-15,-2.220446049250313e-16,NaN,457219.5973681847,792803.8922391385,0.3428276861381524,-157473.30196591513];
let v12 = [v8,f9,v5,f9];
const v13 = [127,v8,v12,Uint32Array,v5];
const v14 = [Uint32Array,15,v13,v2];
v12 **= v13;
try { v10.indexOf(v14, 15); } catch (e) {}
let v16 = 0;
while (v16 < 1) {
    new Float32Array(127);
    const v24 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v25 = [601759695];
    const v26 = [1073741824,1073741823,1376142744,1073741825];
    function f28(a29, a30, a31, a32) {
        function f34() {
            const o51 = {
                "c": -4294967297n,
                [522675525n](a39, a40) {
                },
                "c": v25,
                valueOf(a42, a43) {
                },
                "e": -4294967295,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v24,
                ...v25,
                "type": "Vre",
                ..."Vre",
                valueOf(a45, a46) {
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a48, a49, a50) {
                    return a29;
                },
                5: -4294967295,
                6: -268435456,
            };
        }
        f34();
        const v54 = new Int8Array();
        v54.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f34);
        let v59;
        try { v59 = v26["find"](..."find", a32, ...v25, ...v26, ...522675525n); } catch (e) {}
        v59 <= a31;
        return arguments;
    }
    new Uint8ClampedArray(11);
    new Float64Array(1);
    v16++;
}
const t62 = /P[x\dz]*/gudmy;
t62.multiline **= 1000;
function F69() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v74 of Array(19793)) {
        const v76 = Math.cbrt();
        v76 % v76;
    }
}
[2.0,-265.4490871863104,-2.0,-1.0,2.0,5.0,-885.2534388916021,-1000.0,-6.926897854055243,1.0];
class C80 extends Float32Array {
    #p(a82, a83, a84) {
        const v85 = new Float32Array(this, a84);
        const v86 = v85 * a82;
        const o88 = {
            "g": v86,
            "h": "a",
        };
        return v2;
    }
    constructor(a90) {
        const v92 = new Uint16Array();
        function f93() {
            class C94 {
            }
            const v95 = new C94();
            const v96 = [v95];
            try { v96.map(v92); } catch (e) {}
            return C94;
        }
        %PrepareFunctionForOptimization(f93);
        f93();
        %OptimizeFunctionOnNextCall(f93);
    }
}
const v99 = new C80();
const v101 = [v99,v99];
gc();
function f105(a106, a107) {
    const o113 = {
        toString(a109, a110, a111) {
            try {
                a109.f = 536870888n;
            } catch(e112) {
            }
            return 536870888n;
        },
    };
    return o113;
}
const v114 = v99.reverse;
class C116 {
    static {
        try {
            const t116 = null;
            t116.valueOf = this;
        } catch(e118) {
            e118.stack;
        }
    }
}
const v120 = [null,null];
function f121() {
    const v122 = -v120;
    new Float32Array();
    -(v122 && v120);
    return C116;
}
f121();
f121();
Reflect.apply(v114, v99, v101);
