new BigInt64Array(0);
const t1 = 3;
const v5 = new t1(3);
const v8 = new Int8Array(512);
new Uint32Array(Uint32Array);
new v5(8);
new BigUint64Array(v8);
1940694780n == [10624,733951208,4294967296,5138,14];
class C3 {
    valueOf(a5) {
        const v6 = (-13)?.[a5];
        ("valueOf")[-13];
        super.g;
        [-5.046271343915603,9.863109723473777,-3.0,-906515.6071094702,-2.220446049250313e-16,770964.3667593673,-4.421666277721165,0.7298260833449974,0.0,-151.0717219942219];
        [-6.797758004903778,0.11698586043477233,-1e-15,-48.72972050638907];
        [799.6916658529615,Infinity,5.0,29.974371204771842,-2.0,-6.663031035770784e+307,-1.7976931348623157e+308,-1.0,1000000.0];
        return v6;
    }
    static d = -1;
    1390008880 = "valueOf";
    d;
    static #m(a13) {
        for (let v14 = 0; v14 < 5; v14++) {
            const t15 = "valueOf";
            t15[C3 + v14] = v14;
        }
    }
    c;
    #h;
}
let v17 = new C3();
new C3();
const v22 = [2.220446049250313e-16,4.276454155698374];
const v23 = [v22,v22,2.220446049250313e-16,v22];
const v24 = [2.220446049250313e-16,-409.5445341345936];
function f25(a26, a27, a28) {
    const o33 = {
        "h": a28,
        "a": a27,
        [f25](a30, a31, a32) {
        },
        [a28]: -409.5445341345936,
        "b": a28,
        1942: v24,
        "g": v24,
        ...v23,
    };
    return o33;
}
f25(v23, -409.5445341345936, -409.5445341345936);
new C3();
new Float64Array(1500);
const v41 = new Int16Array(1000);
new Int32Array(1);
try { ("p").toLocaleUpperCase(); } catch (e) {}
function f47() {
    return f47;
}
16 >> 16;
let v50 = 16 ^ 16;
v50 & v50;
Math.cbrt(--v50);
const v55 = /[\cZ]r2foo(?<!bar)baz?/mgsud;
const v56 = `
    let {"multiline":v57,} = v55;
    v56 >>> v41;
`;
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
}
([1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10]).sort();
new Set();
function f69() {
    return f69;
}
try { f69(); } catch (e) {}
f69();
-1600745002 % -1600745002;
const v76 = new Int8Array(485);
v76[161];
const v78 = [-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456];
try { v78.push(); } catch (e) {}
v17++;
const v81 = [-21059];
const v82 = v81.groupToMap;
v82.d = v82;
try {
const t0 = 2.220446049250313e-16;
new t0();
} catch (e) {}
const v87 = [v76,v76,v76];
const v88 = [-409.5445341345936,-409.5445341345936,2.220446049250313e-16];
function f89(a90, a91, a92) {
    const o93 = {
        [a92]: -409.5445341345936,
    };
    return v87;
}
f89(v87, v88, 2.220446049250313e-16);
Date.parse(v82);
const v97 = Date.now();
v97 ^ v97;
const v99 = new Date();
v99.setFullYear(-409.5445341345936, v82, v81);
const v101 = v99.setMonth();
const v102 = v101 - v101;
function F103(a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
}
const v110 = new Int16Array(5, 5);
function f112(a113, a114, a115) {
    const o116 = {
        __proto__: v110,
        6: 16,
        "e": Int8Array,
    };
    return o116;
}
-1 * v102;
const v118 = [];
const v121 = new v82();
v121.toString = Date;
Date();
Object.defineProperty(v118, 2081, { configurable: true, enumerable: true, value: 2056527154 });
v121.setMonth(1);
