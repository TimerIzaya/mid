BigInt64Array[1] = BigInt64Array;
const v2 = new BigInt64Array(257);
function f3() {
    try { BigInt64Array(v2, 257, 257); } catch (e) {}
    class C5 {
        constructor(a7) {
            for (let i = 0; i < 10; i++) {
                /[xyz{1,}(O)]/udis;
            }
        }
    }
    new C5();
    return BigInt64Array;
}
v2.toString = f3;
new Float32Array(3);
try { new Uint16Array(BigInt64Array, 9, Uint16Array); } catch (e) {}
new Uint16Array(9);
const v19 = new BigUint64Array(2029);
function f20() {
    return f3;
}
Object.defineProperty(v19, "toString", { writable: true, configurable: true, get: f20 });
function f21() {
    const v24 = ["function",[5,1436918233,13,-9223372036854775808,12,10779,268435439,-350312267,536870912],"function"];
    const o25 = {
        "arguments": v24,
        "type": "function",
    };
    return v24;
}
v19.valueOf = f21;
new Int8Array(6);
64 ^ 64;
Uint32Array.g = Uint32Array;
Uint32Array.g = Uint32Array;
const v32 = new Uint32Array(64);
try { v32.with(v19, v2); } catch (e) {}
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v38 = [9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648];
        try { ("function").strike(); } catch (e) {}
        ["function",v38];
        new F34();
    } catch(e43) {
    }
}
new F34();
