new Uint16Array(0);
function f5(a6, a7) {
    return ~-754089042n;
}
Int8Array[Symbol.toPrimitive] = f5;
new Int8Array(2705);
const v15 = new Int16Array(26);
class C16 {
    static p(a18, a19, a20, a21) {
        try {
            new Int8Array(a18, 2705, v15);
        } catch(e23) {
        }
        return a18;
    }
    g;
    256 = Uint16Array;
    [Int8Array];
}
new C16();
new v15();
new C16();
const v29 = new Int8Array(520);
const v31 = new Uint8ClampedArray();
const v32 = v31.toReversed();
const v34 = [v32,v32];
Reflect.apply(Int8Array.includes, v29, v34);
