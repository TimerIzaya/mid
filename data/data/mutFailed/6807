const v0 = [-977.8523969500012,-637.9395290818459];
const v1 = [0.14399103579666583,575846.4932875675,1.409587234122086e+308,-2.0,-7.4772382831915785,-4.244644787467471,-356.772646513833,-5.0,990.3376148315983,1e-15];
[950.2203235542092,-0.0];
const v4 = 1024 < 1024;
v4 && v4;
16 >> 16;
const v9 = [2,2,1024,v1];
const v10 = [v9,v9,v9,v9];
try { v10.filter(v4); } catch (e) {}
v10.g = v10;
const v12 = [v10,2,v0,v0,2];
let v13 = 1024 | 1024;
v13--;
const v16 = new Date(v13);
const v17 = v16.setFullYear(Date, v16, v13);
const v20 = Math.log10(1073741825);
v20 - v20;
let v24;
try { v24 = ("o").strike(); } catch (e) {}
try { v24.padEnd(Math); } catch (e) {}
try { new Uint16Array(Uint16Array, v13, v13); } catch (e) {}
const v29 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
v29[1] = v29;
10 >>> 10;
try { new Int32Array(Int32Array, Int32Array, 16); } catch (e) {}
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try { a37.bind(this); } catch (e) {}
}
let v40;
try { v40 = new F34(Date, Uint16Array, 1024); } catch (e) {}
const v41 = v40?.constructor;
try { new v41(Math, 1073741825, v10); } catch (e) {}
~3398;
class C45 {
    static a;
    static {
        const v47 = this >> this;
        this[6];
        const v49 = [];
        Float32Array.BYTES_PER_ELEMENT = Float32Array;
        let v51;
        try { v51 = new Float32Array(Uint16Array, "o", v47); } catch (e) {}
        try { v51.reduce(v51); } catch (e) {}
        const v53 = new Float32Array();
        const v56 = v49["indexOf"](v53, Uint8ClampedArray);
        !(v56 === v56);
    }
    static m(a60) {
        gc();
    }
}
C45.g = C45;
const v63 = new C45();
const v64 = v63?.constructor;
try { new v64(); } catch (e) {}
const v66 = new Int32Array(v29, 10);
v66[1];
class C68 {
    static #d = 10;
    constructor(a70, a71) {
        a70[2];
        a71[2] = a71;
        try {
            function F73(a75, a76, a77) {
                if (!new.target) { throw 'must be called with new'; }
                const v78 = this?.constructor;
                try { new v78(F73, F73, "o"); } catch (e) {}
                a77 + a77;
            }
            try { new F73(C45, C45, 2); } catch (e) {}
            class C82 {
            }
            function F83(a85, a86) {
                if (!new.target) { throw 'must be called with new'; }
                this.hasOwnProperty();
                const v88 = this.constructor;
                try { new v88(); } catch (e) {}
            }
            F83.length;
            v29.#d += v66;
        } catch(e91) {
        }
    }
}
try { new C68(Int32Array, v17); } catch (e) {}
const v93 = new C68(v66, v29);
const v94 = v93?.constructor;
try { new v94(v12, v12); } catch (e) {}
const v96 = v93?.constructor;
let v97;
try { v97 = new v96(v93, v93); } catch (e) {}
const v98 = v97?.__defineGetter__;
try { new v98(v97, Math); } catch (e) {}
