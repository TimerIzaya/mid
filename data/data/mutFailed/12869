function f1() {
    return f1;
}
([-536870912,-3592,61205]).constructor;
new Date();
try {
    const v20 = -(-7);
    v20 ** v20;
} catch(e22) {
}
const v24 = [-2,-13,-56984,-56984];
v24[Symbol.toPrimitive] = f1;
[-2,v24];
const v28 = [v24];
try { v28.map(-56984); } catch (e) {}
function f30() {
}
function f31(a32, a33, a34, a35) {
    const o40 = {
        ...v28,
        n(a37, a38) {
            class C39 {
            }
        },
        __proto__: v24,
    };
    return o40;
}
const v41 = f31(v24, -13, -2, -2);
class C42 {
    static m(a44, a45, a46, a47) {
        try {
        } catch(e48) {
        }
    }
    [v41];
}
class C49 {
}
const v51 = Array(C49);
const v52 = new C49();
function f53(a54, a55, a56, a57) {
    return a56;
}
class C58 extends f53 {
    constructor(a60, a61, a62) {
        super(v52);
        for (let v63 = 0; v63 < 25; v63++) {
            "p" + v63;
            const v66 = v51.includes;
            try { v66(); } catch (e) {}
            function F69(a71, a72) {
                if (!new.target) { throw 'must be called with new'; }
                this.b = "b";
                this.d = a72;
            }
            const v75 = new BigInt64Array(2325);
            for (const v76 in v75) {
            }
        }
    }
}
new C58(v51, f53, C58);
new C58();
function f79(a80, a81, a82, a83) {
}
new C42();
for (let v85 = 0; v85 < 50; v85++) {
    for (let v86 = 0; v86 < 25; v86++) {
    }
}
