[];
const v9 = [-15,-414220368,1000,257,65537,10978,16,-53035];
[-9,128,4,8];
const v11 = [-9007199254740990,536870888,-39768];
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
1000000.0 % 1000000.0;
const v24 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
const v30 = new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v34 = new Uint8Array();
gc();
110 <= 110;
110 + 110;
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const v44 = new Date();
const v45 = v44.getUTCDay();
v45 >>> v45;
let v47 = 127;
v47 >> v47;
v47++;
function f50(a51, a52) {
    a52.constructor = f50;
    try { a51(f50); } catch (e) {}
    try { a51(BigInt64Array); } catch (e) {}
    a52.constructor(a52);
    return f50;
}
function f56(a57) {
    return a57;
}
class C58 extends f56 {
    static [v45] = -953280260;
    static [v30] = 268435456;
}
C58.e = v11;
try { new Promise(4096); } catch (e) {}
const v61 = new Promise(f50, Uint8Array);
function f62() {
    function f63(a64, a65) {
        C58 **= a64;
        const v67 = new Uint32Array();
        function f68(a69, a70, a71, a72) {
            for (let i75 = 0, i76 = 10;
                (() => {
                    const v77 = i75 < i76;
                    v67[v77];
                    return v77;
                })();
                i76--) {
            }
            return f68;
        }
        return true;
    }
    return f63;
}
Object.defineProperty(v61, "constructor", { writable: true, enumerable: true, get: f62 });
let v84;
try { v84 = v61.then(); } catch (e) {}
v84.constructor = gc;
try { v84.then(v24, v34); } catch (e) {}
Uint8Array.length = Uint8Array;
const v87 = new Uint8Array(v47);
function f88(a89, a90) {
    const o91 = {
    };
    o91.d = f62;
    o91.g = o91;
    return o91;
}
let v92;
try { v92 = f88(v61, v61); } catch (e) {}
v92.g;
f88.arguments = f88;
v9 instanceof Int8Array;
C58.e;
const o99 = {
    "execution": "async",
    "type": "major",
};
gc(o99);
for (let v101 = 0; v101 < 25; v101++) {
    const v102 = v101 - v101;
    const v103 = f88();
    v103.d = v101;
    v103.g = v103;
    v103.d = v103;
    Object.defineProperty(v103, v101, { enumerable: true, get: f88, set: f88 });
    8 - 8;
    const v108 = new Int8Array(8);
    let v110;
    try { v110 = Reflect.preventExtensions(v103); } catch (e) {}
    Reflect.construct(Uint16Array, [v108]);
    v87[v103] = v103;
    gc.name = gc;
    !("sync" == "sync");
    const o117 = {
        "f": Uint16Array,
        ...v87,
        "d": v102,
        ...v110,
        10: f56,
        "execution": "sync",
    };
    o117.type = true;
    gc(o117);
}
