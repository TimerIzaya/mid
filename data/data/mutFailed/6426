function f0() {
}
function f4(a5) {
    const o34 = {
        set e(a7) {
            function f8(a9, a10) {
                Symbol.toPrimitive;
                const v15 = Array();
                function f16() {
                    return 3;
                }
                function f17(a18) {
                    const o22 = {
                        "execution": "async",
                    };
                    gc();
                }
                Object.defineProperty(v15, 0, { configurable: true, enumerable: true, get: f16, set: f17 });
                v15.unshift(3, a9);
            }
            new Promise(f8);
            const o29 = {
                "maxByteLength": 28,
            };
            const v31 = new ArrayBuffer(28, o29);
            new DataView(v31);
        },
    };
    return o34;
}
f4(1000.0);
f4(-295222.2950861427);
f4(1000.0);
[711358228,13,16,1470166656];
const v39 = [9007199254740990];
12 << 9007199254740991;
class C44 extends 4096 {
}
const v45 = [0,9007199254740990,1000,-7,33302,9,16];
function f46(a47, a48) {
    const o50 = {
        ...a47,
        get d() {
            return this;
        },
    };
    return f46;
}
class C51 {
}
try { C51.__proto__(); } catch (e) {}
const v54 = new WeakMap();
try { v54.delete(f0); } catch (e) {}
const v57 = /0j/vds;
try { v57.compile("Di0", "Di0"); } catch (e) {}
const v61 = new Int8Array(1342);
Object.defineProperty(v61, v39, { writable: true, enumerable: true, value: v61 });
class C62 extends C51 {
    static 1 = v54;
    10000;
}
C62.length = C62;
const v63 = new C62();
v63[10000] = v63;
const v68 = new Uint16Array(2);
function f69() {
    const v70 = [f69,f69,f69,f69];
    class C72 extends v70.constructor {
    }
    const v73 = new C72();
    const v74 = v73.constructor;
    const v75 = v74.bind();
    try { v75(v75, v70, f69, v75, v74); } catch (e) {}
    return C72;
}
const v77 = new Uint16Array(v68);
for (const v78 in v77) {
}
try { ("minor").split(C51, v45); } catch (e) {}
function f82() {
    return undefined;
}
new Date(9223372036854775807);
const o86 = {
    "execution": "async",
    "type": "minor",
};
const v87 = gc(o86);
try { v87.then(1.087793513230407e+307, 1.087793513230407e+307); } catch (e) {}
new Uint8ClampedArray(9007199254740991);
class C91 {
    static #m(a93) {
    }
}
gc();
