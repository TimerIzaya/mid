const v2 = new BigInt64Array(257);
const v5 = new Int16Array(1123);
const v8 = new Uint32Array(6);
class C9 extends Int16Array {
    static a;
    #valueOf(a11, a12, a13, a14) {
        let v15;
        try { v15 = this.includes(...this, Uint32Array, a11, a12, ...Uint32Array, ...v5); } catch (e) {}
        const o17 = {
            "type": "function",
        };
        new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
        const v21 = v15?.[1];
        let v22;
        try { v22 = new v21(v5, a13, v21); } catch (e) {}
        [...this,a14];
        new Float64Array([-25855,-25855,[-25855]]);
        try { v2.some(v22, h); } catch (e) {}
        const v35 = [65537,268435441,63298,-5,1235122603];
        const v36 = [128,215394418];
        const v37 = [-2,-4294967296,4294967297];
        function F38(a40, a41, a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
            const v44 = this.constructor;
            try { new v44(1024, 1024, v35, this); } catch (e) {}
            a41.caller;
            a43[1];
            this.c = a42;
            const v49 = [Reflect];
            const o50 = {
                __proto__: Reflect,
                "e": v49,
            };
            this.f = a41;
        }
        const v51 = new F38(-714582153, F38, -714582153, v36);
        new F38(9, v51, 9, v37);
        return v5;
    }
    13 = 6;
    [v8] = Int16Array;
    static 580;
    #e;
}
new C9();
new C9();
new C9();
function f56() {
    return v2;
}
new Uint32Array(2128);
function F63(a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this.constructor;
    try { new v66(); } catch (e) {}
    this.g = -1517929768;
    this.g = -1;
    this.h = a65;
}
new Uint8ClampedArray(2314);
class C70 {
    #d;
}
const v71 = new C70();
v71.constructor;
new Uint16Array(1);
new Uint8ClampedArray(2267);
class C80 {
    set h(a82) {
    }
    b;
}
new C80();
let v84 = undefined;
try { C80(); } catch (e) {}
v84 = 3;
