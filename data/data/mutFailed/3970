const v0 = [-1103718379];
const v1 = [52647,65536,1];
const v2 = [255,4294967295,3];
const v3 = [v0,v2,v2];
new v2([]);
function f6(a7, a8, a9, a10) {
    return arguments;
}
const v12 = [v3];
const v13 = [v3];
BigUint64Array <= 0.7221600461335677;
gc();
function F19(a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = F19;
    } catch(e24) {
    }
}
new F19(v0, v13, v1);
new F19(v1, v3, v12);
new F19(v1, v1, v13);
new Int8Array(3551);
function F32() {
    if (!new.target) { throw 'must be called with new'; }
}
const v34 = new F32();
const v35 = new F32();
function f36(a37, a38) {
    const o39 = {
        "h": v35,
        "e": v34,
    };
    return o39;
}
const v40 = f36();
function f41() {
    return f36;
}
const v44 = new Float32Array(218);
for (const v45 of v44) {
    Object.defineProperty(v40, Float32Array, { configurable: true, enumerable: true, get: f36, set: f41 });
}
new Int8Array(10);
class C51 {
    static n(a53, a54) {
    }
    static [-4096];
}
const v55 = new C51();
function f56() {
    return f56;
}
function f57(a58, a59) {
    const o61 = {
        ...a58,
        [v55]: a58,
        "e": C51,
        ...C51,
        "d": f56,
        get f() {
            C51[3] >>= 9;
            return a58;
        },
    };
    return o61;
}
new Uint8Array(2989);
const v64 = [237.40427484073666,938352.7862596414];
function f65() {
}
new Uint32Array(Uint32Array, Uint32Array);
function f70() {
    const v73 = Array(4087, -2.220446049250313e-16);
    v73[4037] = v73;
    return Array;
}
f70();
f70();
function f77(a78) {
}
v64.toString = 10;
Object.defineProperty([1000000.0,33167.16811277636,2.0,1000000000000.0,1.0,508380.22731887666,5.2899925432974335], "toString", { configurable: true, enumerable: true, value: f65 });
