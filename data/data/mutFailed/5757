const v2 = new Uint16Array(1000);
Uint8ClampedArray[1] = Uint8ClampedArray;
try { new Uint8ClampedArray(Uint8ClampedArray, Uint16Array, Uint16Array); } catch (e) {}
new Uint8ClampedArray(255);
const v9 = new Uint8ClampedArray(127);
v9.BYTES_PER_ELEMENT;
function f13() {
    function f14(a15, a16) {
        function f19(a20) {
            return Uint8ClampedArray;
        }
        return a16;
    }
    return f14;
}
function f21(a22) {
    const v23 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
    function f24() {
        return v23;
    }
    class C25 extends f24 {
    }
}
Object.defineProperty(Int32Array, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f13, set: f21 });
const v28 = new Int32Array(v2);
try { v28.indexOf(v2); } catch (e) {}
let v30 = 1663;
v30--;
new Float64Array(v30);
const v36 = new Float32Array(1604);
try { v36.find(v36); } catch (e) {}
const v38 = [];
class C40 {
    constructor(a42, a43) {
        try { a42.toReversed(); } catch (e) {}
        Date | a42;
    }
}
const v46 = new C40(v38);
try { v46.hasOwnProperty(Int32Array); } catch (e) {}
