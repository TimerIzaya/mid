function f5() {
    return -65537;
}
function f6(a7) {
    [-4];
    [-1024,-4294967297,21544,512];
    [4294967296,2147483647,1,1580495911,-128];
}
Object.defineProperty(Uint8Array, 1, { enumerable: true, get: f5, set: f6 });
try { new Uint8Array(Uint8Array, 59015, 4096); } catch (e) {}
const v12 = new Uint8Array(4096);
function f13() {
    return f6;
}
function f14(a15) {
    typeof v12 === "boolean";
}
Object.defineProperty(v12, "constructor", { configurable: true, enumerable: true, get: f13, set: f14 });
try { v12.slice(-47979, Uint8Array); } catch (e) {}
const v22 = new Uint8Array(4);
try { new Float32Array(59015, 4096, Uint8Array); } catch (e) {}
new Float32Array(6);
new Int32Array(196);
const v32 = new Uint8Array(2001);
v32[56] = v32;
1 - 1;
new BigInt64Array(1);
function f38() {
    const o39 = {
    };
    return v22;
}
Object.defineProperty(Math, Symbol.toPrimitive, { writable: true, value: f38 });
Math.cbrt(Math);
