const v2 = new Uint16Array(232);
new Int32Array(0);
const v8 = new Int32Array(4096);
/Sta\s[\xe2\x81\xa3]a+b|cYHk(?:ab)+/guimsy;
/s(?<a>(?<b>(?<c>(?<d>.).).).)/vdy;
/a(?=b)c/uimsy;
function f15() {
    let v16 = -65535;
    const o45 = {
        next() {
            v16--;
            return this;
        },
        m(a20) {
            super[-2] = this;
            try {
                const o21 = {
                };
                new Int32Array(o21);
            } catch(e23) {
            }
            const o24 = {
            };
            try {
                o24.e = v16;
            } catch(e25) {
                new Int32Array(512, 798, -2);
                const v29 = super[o24];
                [v29,o24];
                const v31 = [Uint16Array,Int32Array,v29,e25];
                [o24,v31,v31];
                const v34 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v34, o24);
            }
            const v38 = new Int8Array(3938);
            let v39 = 3;
            let v40 = 0;
            for (let i = 0; i < 5; i++) {
                [...v39] = v38;
                v40++;
            }
            const o42 = {
            };
            try {
                const o43 = {
                };
            } catch(e44) {
            }
        },
    };
    return o45.m(f15, v16, v16);
}
f15();
f15();
let v50;
try {
const t0 = 6;
v50 = t0();
} catch (e) {}
v8[982] = v2;
new Int32Array(4096, 1412, 257);
Object.defineProperty(v2, "c", { writable: true, configurable: true, get: f15, set: f15 });
try { v2.map(v50); } catch (e) {}
f15();
%PrepareFunctionForOptimization(f15);
f15();
f15();
%OptimizeMaglevOnNextCall(f15);
f15();
const v60 = new Uint16Array(1412);
v60.lastIndexOf();
