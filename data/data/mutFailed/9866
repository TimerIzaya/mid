new Int8Array(4077);
new Uint8ClampedArray(10);
new BigInt64Array(801);
new Map();
class C14 {
}
const v17 = Array(4087);
v17[1180] = v17;
for (const v18 of v17) {
}
const v19 = new C14();
new C14();
new C14();
function f22() {
    return f22;
}
function F23(a25, a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
}
function f29(a30, a31, a32, a33) {
    const o43 = {
        get f() {
            const v36 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
            const o38 = {
                valueOf() {
                    return true;
                },
            };
            o38[Symbol.toPrimitive] = f22;
            v36.length = o38;
            new a31();
            return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
        },
        ...a31,
    };
    return o43;
}
const v44 = f29();
const v45 = [-1.7976931348623157e+308,-613.7550152041111];
v45.valueOf = f29;
v45 ^ -1264607604;
class C49 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
const v52 = f29();
class C53 extends f29 {
    constructor(a55, a56, a57) {
        super(v19, a57);
        const v58 = new C14();
        for (let v59 = 0; v59 < 25; v59++) {
            v58["p" + v59] = v59;
            [Uint8ClampedArray,Uint8ClampedArray];
            const v64 = v17.includes;
            try { v64(); } catch (e) {}
            const v68 = new BigInt64Array(2325);
            for (const v69 in v68) {
            }
        }
    }
}
new C53();
const v71 = new C53(v44, v44, C14);
new C53(v52, v52, v71);
