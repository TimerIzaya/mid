const v0 = /[^123][\c!]/giy;
const v1 = /X58[x\dz]a\w/gdms;
const v2 = /V(x)(x)(x)\2/gdisy;
const v4 = 128 + 128;
v4 % v4;
const v7 = new Uint8ClampedArray(128);
246 / 246;
246 - 246;
const v12 = new Float32Array(246);
const v13 = v12[89];
v13 + v13;
const v17 = new Uint16Array(29);
const v18 = v17[24];
function f19(a20, a21, a22, a23) {
    a22.dotAll = a22;
    a20 + a20;
    const o35 = {
        ...v17,
        toString(a26, a27, a28) {
            128 ** Uint8ClampedArray;
            Reflect.construct(Float32Array, [Reflect], Uint16Array);
            ("test")["test"]("test");
            return "test";
        },
        [v7]: v1,
        "e": a22,
        "g": v2,
    };
    o35[0] = o35;
    return o35;
}
f19.f = f19;
const v36 = f19(246, v2, v1, 29);
f19(128, v2, v2, 128);
f19(29, v0, v0, 246);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
}
F39.length = F39;
const v41 = new F39();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
const v44 = v41?.constructor;
try { new v44(); } catch (e) {}
let v46;
try { v46 = new v44(); } catch (e) {}
const v47 = v46?.__defineGetter__;
try { new v47(v36, v18); } catch (e) {}
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this?.propertyIsEnumerable;
    v53.length;
    try { new v53(F39); } catch (e) {}
}
const v56 = new F49();
const v57 = v56?.constructor;
let v58;
try { v58 = new v57(v17, F49); } catch (e) {}
v56.length;
-37859n / -37859n;
591114.0785999324 % 591114.0785999324;
const v64 = [];
-4;
function F67() {
    if (!new.target) { throw 'must be called with new'; }
    const v69 = this.toString(this, F67, F67, this);
    try { v69.localeCompare(-37859n); } catch (e) {}
    try { v69.blink(); } catch (e) {}
    Date.name;
    const v75 = Date.toString(F67, 9223372036854775807);
    try { v75.toLocaleUpperCase(); } catch (e) {}
    const v77 = v75.replaceAll(v41, -37859n);
    try { v77.match(9223372036854775807); } catch (e) {}
    const v80 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v80[1] = v80;
    let v81 = 839612.5677247904;
    v81--;
    try { new Set(); } catch (e) {}
    const v85 = new Set(v64);
    const v86 = v85.add;
    try { new v86(v80); } catch (e) {}
    const t81 = "delete";
    t81[4] = "delete";
    const v89 = v85["delete"](v81);
    v89 && v89;
    const v91 = v89 || v89;
    v91 && v91;
    v91 && v91;
    !(v91 || v91);
    const v96 = v91 && v91;
    v96 || v96;
    v96 || v96;
    const o100 = {
    };
    o100.e = o100;
    o100.b = o100;
    o100.e = 19793;
    let v102;
    try { v102 = new Array(v12); } catch (e) {}
    v102.g = v102;
    try { new Array(9223372036854775807); } catch (e) {}
    let v105;
    try { v105 = ("getPrototypeOf").blink(); } catch (e) {}
    v58[28].strike();
    const v108 = v105.strike(591114.0785999324);
    v108[34];
    try { v108.charAt(128); } catch (e) {}
    let v111;
    try { v111 = v108.replace(19793, v56); } catch (e) {}
    let v112;
    try { v112 = v111.codePointAt(v85); } catch (e) {}
    v112 << v112;
    v111[11] = v111;
    -1.7976931348623157e+308 ^ v58;
    class C116 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    v41.g = C116;
    try { C116(); } catch (e) {}
    class C118 extends C116 {
        ["getPrototypeOf"] = C116;
    }
    try { new C118(); } catch (e) {}
    let v120;
    try { v120 = new C118(); } catch (e) {}
    const v121 = v120?.getPrototypeOf;
    try { new v121(); } catch (e) {}
    let v123;
    try { v123 = new C118(); } catch (e) {}
    const v124 = f19?.getPrototypeOf;
    try { new v124(); } catch (e) {}
    const v126 = v123?.getPrototypeOf;
    v126.e = v126;
    let v127;
    try { v127 = new v126(); } catch (e) {}
    v123.getPrototypeOf;
    let v129;
    try { v129 = new C118(); } catch (e) {}
    const v130 = v129?.getPrototypeOf;
    try { new v130(); } catch (e) {}
    const v132 = v129?.getPrototypeOf;
    try { new v132(); } catch (e) {}
    let v134;
    try { v134 = new v132(); } catch (e) {}
    v134.getPrototypeOf;
    const v136 = v129?.getPrototypeOf;
    let v137;
    try { v137 = new v136(); } catch (e) {}
    v137.getPrototypeOf = v137;
    const v138 = v36.getPrototypeOf;
    try { v138.apply(Array, v41); } catch (e) {}
    const v140 = new C118();
    const v141 = v140?.getPrototypeOf;
    try { new v141(); } catch (e) {}
    const v143 = v140.getPrototypeOf;
    try { v143(v123); } catch (e) {}
    let v145;
    try { v145 = new v143(); } catch (e) {}
    let v146;
    try { v146 = v145.propertyIsEnumerable(v111); } catch (e) {}
    !(v146 && v146);
    const v149 = v145?.constructor;
    let v150;
    try { v150 = new v149(v105, this, 4); } catch (e) {}
    try { v150.constructor(); } catch (e) {}
    const v152 = v140.constructor;
    try { v152.call(v152); } catch (e) {}
    let v154;
    try { v154 = new v152(F67, v96); } catch (e) {}
    const v155 = v154?.getPrototypeOf;
    try { new v155(); } catch (e) {}
    const v157 = v154?.getPrototypeOf;
    try { v157.bind(v127); } catch (e) {}
    v157?.apply.name;
    try { new v157(); } catch (e) {}
    const v162 = Array(19793);
    const v163 = v162?.groupToMap;
    try { v163.constructor(v163); } catch (e) {}
    try { new v163("delete"); } catch (e) {}
    for (const v166 of v162) {
    }
}
new F67();
const v168 = new F67();
v168.b = v168;
v168.b = v168;
v168.constructor;
const v170 = v168.constructor;
try { new v170(); } catch (e) {}
let v172;
try { v172 = new v170(); } catch (e) {}
v172.length = v172;
const v173 = new v170();
const v174 = v173?.constructor;
let v175;
try { v175 = new v174(); } catch (e) {}
v175.b = v2;
