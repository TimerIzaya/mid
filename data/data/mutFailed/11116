1 % 1;
function f10(a11, a12, a13) {
    try { a12.search(a13); } catch (e) {}
    const o22 = {
        "a": "o",
        "g": -8257110,
        __proto__: "boolean",
        ...a12,
        "f": a12,
        set d(a16) {
            if (1 !== this) {
                let [...v18] = a12;
            } else {
                Reflect.construct(a16, [], a16);
            }
        },
    };
    o22[2] = o22;
    return o22;
}
f10(-8257110, "boolean", 1);
f10(1, "o", f10(2, "o", 2));
20947 & 20947;
const v31 = ([-2.220446049250313e-16,-2.0,-4.926552391544163,0.4191996832717132,1.0,-455962.3271780333,-1000000000000.0,-4.0,446489.561411778])[1];
const v34 = new Float32Array(4061);
v34.indexOf();
v31 - v31;
const v37 = [5.0,-2.342856725751538e+307,1000000000.0];
try { v37.reduce(268435441); } catch (e) {}
[5.731799136885705,-8.861193309290517,-186.94205592339722,-1.0,-2.0,569.1323592186607];
function f40() {
    return 20947;
}
f40.d = f40;
const v41 = f40.length;
v41 - v41;
let v43 = 1129447093;
const v44 = v43--;
v44 ^ v44;
const v46 = f40();
v46 - v46;
%PrepareFunctionForOptimization(f40);
f40();
-v31();
%OptimizeFunctionOnNextCall(f40);
f40();
-1166767713 & -1166767713;
const v55 = -1166767713 !== -1166767713;
v55 && v55;
const v58 = new BigUint64Array();
function F59() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v61 = 0;
        let v62 = 0;
        while ((() => {
                let v63 = 0;
                v63--;
                const v65 = 1 < v63;
                !(!v65);
                return v65;
            })()) {
            for (let v68 = 0; v68 < 5; v68++) {
            }
            v62++;
        }
        do {
            let v70;
            try { v70 = v58.entries(); } catch (e) {}
            try { v70.next(); } catch (e) {}
            v61++;
        } while (v61 < 5)
        new F59();
    } catch(e77) {
    }
}
new F59();
