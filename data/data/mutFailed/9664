class C9 {
    constructor(a11, a12) {
        const t2 = 0.6567258340573041;
        t2[4] = "boolean" >> a11;
        try { a11.setFloat64(1073741825, this, a11); } catch (e) {}
        new Set();
    }
    ["dI62W"] = "dI62W";
    [-613383237];
    static #g;
}
new C9(-923778.7670036282, 1073741825);
new C9(1073741825, 1073741825);
function F19() {
    if (!new.target) { throw 'must be called with new'; }
}
new F19();
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
        const v27 = -(-7);
        Math.tan(v27 ** v27);
    } catch(e30) {
    }
}
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.constructor;
    try { new v35(F22, a33, F22, v35); } catch (e) {}
    new F22();
}
const v38 = new C9(C9, 1073741825);
new Set();
function F41(a43) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a43;
}
const v44 = new F41();
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
    function f51() {
    }
    const v52 = /(?:a*)+q(?<a>.)/guds;
    function f53(a54) {
        const v55 = a54.constructor;
        new Uint8ClampedArray(1000);
        try { v55(a54, f51); } catch (e) {}
        class C60 {
        }
        return f53;
    }
    for (let i63 = 0, i64 = 10; i63 < i64; i64--) {
        for (let v71 = 0; v71 < 50; v71++) {
            f53(v52);
        }
    }
    const v74 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v76 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v77 = [601759695];
    const v78 = [1073741824,1073741823,1376142744,1073741825];
    function f80() {
        let v83 = Float64Array;
        v83 = v38;
        b = v77;
        v74.length;
        try {
            v78.forEach(v83);
        } catch(e86) {
        }
        const v87 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v89 = Symbol.toPrimitive;
        const o96 = {
            toString(a91, a92) {
                const v93 = a48 && v83;
                function f94() {
                    a91 *= v89;
                    return v83;
                }
                return v93 <= v87;
            },
        };
        const o117 = {
            "c": -4294967297n,
            [522675525n](a99, a100) {
            },
            "c": v77,
            valueOf(a102, a103) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a105, a106, a107, a108) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v76,
            ...v77,
            "type": "Vre",
            ..."Vre",
            valueOf(a111, a112) {
                return a112;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a114, a115, a116) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    const v122 = new Uint32Array(2128);
    1073741823 & 1073741823;
    function F125(a127) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v128 = new F125(F125);
    try {
        function f129(a130, a131, a132) {
            let v133 = 0;
            do {
                const o134 = {
                };
                o134.h = v128;
                const o135 = {
                };
                v133++;
            } while (v133 < 7)
            return f129(a132, v128);
        }
        f129();
    } catch(e141) {
    }
    for (let v142 = 0; v142 < 100; v142++) {
        const o144 = {
            [-9007199254740991]: 512,
            [v122]: v50,
        };
    }
    class C146 {
    }
    for (let v147 = 0; v147 < 5; v147++) {
        const v148 = v147 < v147;
        class C149 {
        }
        const v150 = C149.constructor;
        try { v150(v148, v148, v147, v150, v150); } catch (e) {}
    }
    [];
    [-4563];
    class C155 {
    }
    function F156(a158, a159, a160) {
        if (!new.target) { throw 'must be called with new'; }
        const v161 = a158 - a158;
        [-9007199254740991,536870888,52691,-1,-128,-196204265,0];
        new Uint32Array();
        v161 >>> v161;
        const v166 = this.constructor;
        try { new v166(a160, C155); } catch (e) {}
    }
}
new F45(v44);
