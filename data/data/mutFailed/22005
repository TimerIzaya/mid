const v2 = [];
function f3() {
    const o5 = {
        p() {
            return f3;
        },
        [v2]: v2,
        "a": v2,
    };
    return v2;
}
const v6 = new Int32Array(2533);
v6[366];
let v8 = 10;
const v10 = new Int16Array(v8);
178 + 178;
function f13() {
    return f13;
}
f13.toString = f13;
class C14 extends f13 {
}
function f16(a17, a18, a19, a20) {
    a17.name;
    a18 % a18;
    a19 << a19;
    return a18;
}
f16.arguments = f16;
for (let v24 = 0; v24 < 625; v24++) {
    v24 - v24;
    const v26 = f16(Uint8Array, 178, v24);
    v26 <= v26;
    try {
        v8 &= C14;
    } catch(e28) {
        e28.message = e28;
        const v29 = e28?.constructor;
        const v30 = v29?.constructor;
        try { new v30(v26); } catch (e) {}
        let v32;
        try { v32 = new v29(e28); } catch (e) {}
        v32.message;
    }
}
try { new Uint32Array(v2, Uint32Array, v10); } catch (e) {}
new Uint32Array(178);
Date.length = Date;
const v39 = new Date();
try { v39.setFullYear(2533, Date, Date); } catch (e) {}
function f42(a43, a44, a45, a46) {
    const o57 = {
        toString(a48, a49) {
            const v52 = new Int32Array(1024);
            for (const v53 of v52) {
                new SharedArrayBuffer();
                SharedArrayBuffer.e = v52;
                [1539012200,f42];
            }
        },
    };
    return o57;
}
f42.g = f42;
2.0 - 2.0;
for (let v61 = 0; v61 < 250; v61++) {
    v61 <= v61;
}
const v65 = new BigInt64Array();
function f66() {
    const v68 = v65[undefined] instanceof f66;
    const o69 = {
    };
    v65.h = o69;
    o69.h = v68;
    return o69;
}
const o70 = {
    "apply": f66,
};
const v72 = o70.apply?.bind;
try { v72(v39); } catch (e) {}
try { new v72(v6); } catch (e) {}
const v75 = /Ma[a]\1(a)/vsy;
v75.b = v75;
v75.h = v75;
/(?<a>(?<b>(?<c>(?<d>.).).).)(x)(x)(x)\2+/vdim;
/d/gudim;
for (let v78 = 0; v78 < 5; v78++) {
    const v79 = -v78;
    v79 >>> v79;
    function f81() {
        let v83 = ("Vre").codePointAt(v78);
        v83 >>> v83;
        const v85 = v83--;
        const v86 = v85 % v85;
        v86 - v86;
        let v88 = v83 * v85;
        const v89 = v88 + v88;
        v89 == v89;
        const v91 = v88--;
        v91 ^ v91;
        return v88 / v88;
    }
    f81();
    %OptimizeFunctionOnNextCall(f81);
}
