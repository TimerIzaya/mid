class C3 {
    #f = -9223372036854775808n;
    static #n(a5) {
        let v6 = 0;
        do {
            let v7;
            try {
            const t0 = 10000n;
            v7 = new t0(268435441n, 10000n, 268435441n, 268435441n, this);
            } catch (e) {}
            this[4236628169] = v6;
            %VerifyType(a5);
            v7 = this;
            try {
                this.h = C3;
            } catch(e8) {
            }
            v6++;
        } while (v6 < 6)
        return this;
    }
    #g;
}
const v12 = new C3();
const v13 = v12?.constructor;
try { new v13(); } catch (e) {}
const v15 = new C3();
const v16 = v15?.constructor;
try { new v16(); } catch (e) {}
new C3();
BigUint64Array.name = BigUint64Array;
const v21 = new BigUint64Array(8);
v21[2];
const v25 = new Float64Array(255);
try { v25.filter(v21); } catch (e) {}
new Int32Array(10);
[1.7976931348623157e+308,-413892.0889157214,1.3273338355683957e+308];
const v32 = [2.6106058781874725e+307,1.0,285529.63794448716];
[8.054972930120389,0.5017077090516519,-Infinity,-4.0,-6.00897007142827,1.0,-6.545477670141786e+307,-3.0,1000000000000.0,-1.4537848745596893e+308];
class C34 {
    constructor(a36, a37) {
        try { this.constructor(this, a37); } catch (e) {}
        2 + 2;
        Uint8Array.e = Uint8Array;
        function f42(a43, a44, a45, a46) {
        }
        f42.length = f42;
        for (let v47 = 0; v47 < 500; v47++) {
            f42();
            try {
                a36 &= -5.160144283511562e+307;
            } catch(e49) {
                const v51 = new Uint32Array();
                const o56 = {
                    [v51](a53, a54, a55) {
                    },
                };
            }
        }
        try {
            this.fuck(Uint8Array, true, /\p{gc=Nd}/gvm);
        } catch(e60) {
        }
    }
}
try { C34(-9223372036854775808n, v32); } catch (e) {}
const v62 = new C34();
const v63 = v62?.constructor;
try { new v63(v32, v15); } catch (e) {}
let v65 = 208;
v65++;
try { new Uint8Array(v12, v12, 268435441n); } catch (e) {}
const v69 = new Uint8Array(v65);
for (const v70 of v69) {
    for (let v71 = 0; v71 < 5; v71++) {
        v70["p" + v71] = v71;
    }
}
for (let v74 = 0; v74 < 5; v74++) {
}
