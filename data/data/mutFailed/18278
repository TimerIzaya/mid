function f0() {
    const o19 = {
        [-1241478252](a5) {
            for (let v6 = 0; v6 < 32; v6++) {
                this["p" + v6] = v6;
            }
            const v9 = delete this[1555446456];
            super.c ||= -1241478252;
            try {
                super.getUTCMinutes(-25157, this, v9, 1555446456, a5);
            } catch(e11) {
            }
            return a5;
        },
        toString(a13, a14) {
            const v15 = [-240.42845435063873,-1.3161813454883428e+308,-304336.4631024536,-5.0,2.1227847562837,1e-15,7.377949577790531e+307];
            [3.174654515355529e+307,5.0,0.08400603611595203];
            [2.220446049250313e-16,-2.0,-641.8097097111843,436657.0984425652,760.6697627490446,-813170.4747283641,1000000000000.0];
            v15 === a14;
            return -25157;
        },
    };
    return o19;
}
const v20 = f0();
f0();
const v22 = f0();
try { v22.toString(v22, f0); } catch (e) {}
const v25 = [-65536,36070,1127379847,-9007199254740990,-16,256];
[-9,64,-1073741824,23129,46124,-282941796,-14,-128];
const v27 = [1557563806,-4];
v27[1];
try { new Uint32Array(v25, f0, Uint32Array); } catch (e) {}
new Uint32Array(3192);
let v33 = 0;
v33--;
new Uint8ClampedArray(v33);
const v39 = new BigUint64Array(512);
class C43 {
    m(a45, a46) {
        super[a46];
        a46?.[11];
        return 5.0;
    }
    constructor(a50) {
        class C51 {
            static [11] = this;
            static d = 11;
            static [this] = this;
        }
        try { new C51(); } catch (e) {}
        const v53 = new C51();
        const v54 = v53?.constructor;
        try { new v54(); } catch (e) {}
        new C51();
        new C51();
    }
}
try { new C43(undefined); } catch (e) {}
const v59 = new C43(11);
v59.g = v59;
const v60 = new C43(11);
const v61 = new C43(-5.0);
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this?.constructor;
    try { new v66(a65, this); } catch (e) {}
    a64.e = a64;
    try {
        this.h = a64;
    } catch(e68) {
    }
}
const v69 = new F62(v59, v61);
const v70 = v69?.__defineGetter__;
try { new v70(v39, v20); } catch (e) {}
const v72 = new F62(v60, v61);
const v73 = new F62(v69, v61);
v73.b = v73;
function f74() {
    return v59;
}
try { new Map(); } catch (e) {}
new Map();
let v80 = 52021;
v80++;
class C83 {
    constructor(a85) {
        a85.name = a85;
        ("buffer")["search"](..."buffer", ..."search", ..."search", a85, ..."search", v80);
        super.d = arguments;
    }
    static h;
    static #a;
    [-5.0] = -5.0;
    #g = "buffer";
    static #c;
    static #e = C83;
}
const v89 = new C83(C83);
const v90 = new C83(v89);
const v91 = new C83(v90);
v91.d = v91;
const v93 = new WeakMap();
~129;
new BigInt64Array(129, v72, BigInt64Array, v93);
let v98 = 12;
v98++;
new Int8Array(v98);
try { new Uint32Array(v27, 3192, v73); } catch (e) {}
const v105 = new Uint32Array(1024);
v105[881];
const v107 = /1xyz{1,}?/gims;
const v108 = /h\p{gc=Nd}/vdy;
v108.hasIndices;
const v110 = /\xf0\x9f\x92\xa9a*/us;
1 & 1;
class C115 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v121;
        try { v121 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v121.#p(undefined, v121, v121, undefined);
        } catch(e123) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v124 = new C115();
const v125 = new C115();
const v126 = new C115();
function f127(a128) {
    a128[45] = a128;
    const o134 = {
        15: a128,
        valueOf(a130, a131) {
            super.h = a131;
            try { C115.stringify(a128, a128, this); } catch (e) {}
            try {
                C115.c = v124;
            } catch(e133) {
            }
            return a131;
        },
        2147483647: undefined,
        __proto__: v125,
        "c": a128,
        ...a128,
        "f": a128,
    };
    return o134;
}
const v135 = f127(v105);
const v136 = f127(v126);
v136[2147483647] = v136;
f127(v135);
for (let i139 = 0; 5 * 5, i139 < 5; i139 + i139, i139++) {
    try {
    } catch(e147) {
    }
}
function F149(a151, a152, a153, a154) {
    if (!new.target) { throw 'must be called with new'; }
    try { a151.toString(); } catch (e) {}
    a153 % a153;
}
F149.arguments = F149;
const v157 = new F149(v110, 1, -1263139894, F149);
const v158 = v157?.constructor;
try { new v158(v73, C83, 1024, v73); } catch (e) {}
const v160 = new F149(v107, v110, -23596, v157);
try { v160.propertyIsEnumerable(v136); } catch (e) {}
const v162 = new F149(v108, F149, -23596, 1);
const v163 = v162 | F149;
let v164;
try { v164 = v160(v110, v163, v163); } catch (e) {}
if (v164) {
} else {
}
