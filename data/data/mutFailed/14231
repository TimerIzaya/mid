const v3 = [-9007199254740991n,-9007199254740991n,2n];
class C4 {
}
class C5 {
}
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    a8 >>> a8;
    a9 - a9;
    -a10;
    const v14 = this.constructor;
    try { new v14(a10, C5); } catch (e) {}
}
[-9007199254740991n,2n,2n,-9007199254740991n];
[v3,v3,16n];
function f18() {
    const v22 = Symbol.toPrimitive.description.codePointAt();
    return v22 >> v22;
}
new BigInt64Array(4);
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = ("async").constructor;
    v32.raw(v32);
}
Math.cos(0.8497483139616006);
class C39 {
    #a;
    valueOf(a41, a42) {
    }
    toString(a44) {
    }
    static f;
    constructor(a46, a47, a48, a49) {
        arguments[0] = arguments;
    }
    #valueOf(a52, a53, a54) {
    }
}
new Uint8Array(133);
const v59 = new Date();
const v61 = [-1024,536870889,65536,65536];
function f62(a63, a64) {
    return a63;
}
const v67 = [295968041,v61];
const o68 = {
    "arguments": v67,
    "type": "function",
};
new Worker(f62, o68);
v59.setUTCFullYear(Date, v59, Date);
const o75 = {
    get b() {
        delete this[this];
        this[this] = 817905185;
        super[817905185] = "object";
        return 817905185;
    },
};
function F76() {
    if (!new.target) { throw 'must be called with new'; }
    C4.constructor;
    const v81 = this.Realm.dispose;
    try { v81(); } catch (e) {}
    const o83 = {
    };
    this.c = 1163987790;
}
const v84 = new F76();
("async").lastIndexOf();
function f87() {
    return f87;
}
([]).groupToMap(f87);
const o90 = {
    __proto__: v84,
    "c": v84,
};
new BigInt64Array(0);
try { (1).__defineSetter__(); } catch (e) {}
