function f0() {
}
function f1(a2, a3) {
    a2[a2] |= a3;
    a3.c <<= a2;
    return a3;
}
f0.toString = f1;
class C4 {
    static set d(a6) {
        try { a6.getOwnPropertySymbols(); } catch (e) {}
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeMaglevOnNextCall(f0);
        f0();
    }
    h;
    #c = f0;
    static h = f0;
    static [f0];
}
new C4();
new C4();
const v14 = new C4();
const v15 = [-42937,9,-9007199254740990,2147483647];
const v18 = new Float64Array(257);
v18.lastIndexOf(4);
[-8,0,18167,1000,-14,-32308,1024];
const v22 = [8,2,64,2];
function f23(a24) {
    class C25 {
    }
    const v26 = new C25();
    Math.tanh(-v26);
    return a24;
}
v22.constructor = f23;
new BigInt64Array(2957);
new Uint8Array(4);
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
for (let i = 0; i < 10; i++) {
    const v39 = v22.constructor;
    class C40 extends v39 {
        constructor(a42, a43, a44, a45) {
            a44[5];
            const v47 = this.constructor;
            try { new v47(v15, F36, a44); } catch (e) {}
            v15 >>> a43;
        }
        static 1 = v39;
    }
}
const v52 = new Uint8Array(4096);
const v53 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f54(a55, a56, a57, a58) {
    function f59() {
        const v60 = v53.length;
        v60 & v60;
        const v64 = new Float32Array(1334);
        v64[1283] = v64;
        return a55;
    }
    f59();
    %OptimizeFunctionOnNextCall(f59);
    return a56;
}
function f66() {
    return f66;
}
let v67 = "42776";
function f68(a69, a70, a71, a72) {
    const o76 = {
        [v67](a74, a75) {
        },
    };
    return a69;
}
f68[Symbol.toPrimitive] = f23;
("function").search(f68);
for (let v81 = 0; v81 < 5; v81++) {
    f54();
}
const v83 = [5.065712489635526,-4.0,-1.078367651051927e+308,-1.7976931348623157e+308,0.0,-1000000000.0];
function f84() {
    let v87 = -1000000000000.0;
    Math.round(v87);
    Math.acos(v87);
    ++v87;
    ++v67;
    return v52;
}
v83[Symbol.search] = f84;
const v95 = Symbol.search;
f54(v95, v52, Uint8Array, 4096);
const o98 = {
    m() {
        return f0;
    },
    ...v83,
    "b": v15,
    "ownKeys": f0,
    "set": f54,
};
new Proxy(v14, o98);
v83[v95] = f54;
const v102 = Symbol.toPrimitive;
class C106 {
    [1.7976931348623157e+308] = 23354;
    #h;
    1;
    [23354];
    [-4.055130549492246];
}
const v107 = new C106();
for (const v108 in v107) {
}
v83[v102] = f54;
("dXSrM").search(v83);
