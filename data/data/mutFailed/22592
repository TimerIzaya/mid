function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a5;
    } catch(e6) {
        class C7 {
        }
        const v8 = new C7();
        const o10 = {
            get b() {
                return C7;
            },
            127: v8,
        };
    }
}
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
}
1000000000.0 >> 1000000000.0;
Math.sinh(0);
new F3(1000);
const v21 = new F3(1668012732);
const v22 = new F3(1668012732);
const t24 = 0;
new t24();
[4,9,553295762,-49607];
function f26(a27, a28) {
    const o29 = {
        "f": a28,
    };
    return o29;
}
const v30 = [6,-2,2147483647,7,-2147483649,1073741824,268435456,-42057,-128];
const v31 = [-2147483648];
const v32 = [-4.0,-187.33463400009316,266767.34688113444,551749.9695726107];
function f33() {
    return v32;
}
v32.constructor = f33;
class C35 {
    constructor(a37, a38, a39) {
        Uint32Array[2] = 1;
        Math.cos(v22);
    }
}
new Uint32Array(v31);
%VerifyType(v30 instanceof -24894);
const v48 = [-8.423288404653653e+307,460.19811044552307,-1.7971213292687213e+308,-1e-15,0.8010499065604265,5.0,1.7976931348623157e+308,-4.0,0.8718051962313597];
const v50 = new Uint8ClampedArray(v21);
function f52() {
    return v48;
}
class C53 extends f52 {
    constructor(a55, a56, a57, a58) {
        super();
        function f59() {
            const t57 = [];
            t57[6] = a57;
            v48[3136390630];
            v50.byteOffset;
            return C53;
        }
        for (let v63 = 0; v63 < 5; v63++) {
            f59();
            %OptimizeFunctionOnNextCall(f59);
        }
    }
}
new C53(Uint8ClampedArray, Uint8ClampedArray, 9007199254740991);
