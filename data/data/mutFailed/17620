new Uint8ClampedArray(256);
let v3 = 255;
v3++;
const v6 = new Float64Array(v3);
const v7 = v6?.constructor;
v7.length = v7;
try { new v7(v6, Uint8ClampedArray, 256); } catch (e) {}
987 % 987;
const v12 = new Int8Array(987);
try { v12.with(v6, v6); } catch (e) {}
const v15 = 28 - 28;
try { new Uint32Array(Uint32Array, Float64Array, Uint32Array); } catch (e) {}
const v18 = new Uint32Array(28);
v18[26] = v18;
new Uint8Array(1208);
const v24 = new Float64Array(290);
const v25 = v24?.constructor;
try { new v25(987, Uint32Array, Uint32Array); } catch (e) {}
const v28 = [9];
0 / 0;
function f32() {
    const v33 = [f32,f32];
    function f34(a35) {
        a35 / a35;
        ~a35;
    }
    try { Reflect.get(v33, Uint8Array); } catch (e) {}
    let v40;
    try { v40 = Reflect.deleteProperty(f34, f34); } catch (e) {}
    v40 || v40;
    const v42 = [0];
    v42[0];
    try { v42.groupToMap(1208); } catch (e) {}
    const v45 = Reflect.construct(f34, v42, Uint8ClampedArray);
    try { v45.reverse(); } catch (e) {}
    const v48 = [[v45,v42],9];
    try { v48.toString(); } catch (e) {}
    const v50 = [v28,Reflect];
    new v48(-1073741824, 0, -1073741824, -1073741824, ...v15);
    for (let v53 = 0; v53 < 500; v53++) {
        const v58 = ("p" + v53).fontcolor(v53).trimLeft()[12];
        ("p")[v58.substring(v58, v58)];
    }
    try { v50.findIndex(); } catch (e) {}
    const v62 = v33.constructor;
    v62.length = v62;
    let v63;
    try { v63 = v62.isArray(f34); } catch (e) {}
    v63 && v63;
    class C65 extends v62 {
    }
    try { C65.of(); } catch (e) {}
    const v67 = new C65();
    try { v67.fill(v63); } catch (e) {}
    const v69 = v67?.constructor;
    v69.name;
    try { new v69(); } catch (e) {}
    const v72 = v67?.constructor;
    try { new v72(); } catch (e) {}
    return v33;
}
f32.a = f32;
%PrepareFunctionForOptimization(f32);
const v74 = f32();
try { v74.map(987); } catch (e) {}
%OptimizeFunctionOnNextCall(f32);
f32();
