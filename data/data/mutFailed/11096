[1000000000.0,6.961759317789145,7.602922045343282e+307,1000000000000.0,1000000.0,-1000.0,0.22176329408407902,-5.0,452071.5461585254];
const v7 = [1000000.0,-3.0,140.9415362456091,1.0,NaN,-5.0,-2.0,-1.0];
const v8 = [9.011547731829616];
const v9 = v8[v8];
let v10;
try { v10 = v8.flatMap(v9); } catch (e) {}
const v12 = [-353875768n,v10];
const v13 = Reflect.construct(v10, v12, v10);
-3n || 536870912n;
for (let v20 = 0; v20 < 32; v20++) {
    Reflect["p" + v20] = v20;
}
function f24() {
    const o27 = {
        get c() {
            super.m();
        },
    };
}
const v28 = f24();
const v31 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v33 = new Uint32Array();
v33.constructor = f24;
let v34 = -4294967297n;
const v35 = v34--;
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f39(a40, a41, a42, a43) {
    a40.constructor = f24;
    function f44(a45, a46, a47) {
        const o48 = {
            "e": a40,
            ...v12,
            "g": a46,
        };
        return o48;
    }
    f44(v10, v13, f44(v7, v31, f44(v36, a43, f39)));
    const v52 = a40.constructor;
    try { new v52(); } catch (e) {}
    arguments.length;
    function f56() {
        ("Vre").charAt();
        let v59;
        try { v59 = ("Vre").codePointAt(); } catch (e) {}
        let v60 = Float64Array;
        v60 = a41;
        let v61 = v31.length;
        v61++;
        const o81 = {
            "c": v34,
            "a": v59,
            [v35](a64, a65) {
            },
            [v35](a67, a68, a69, a70) {
                eval();
            },
            "c": v36,
            valueOf(a74, a75) {
            },
            1073741824: v33,
            [v34](a77, a78, a79, a80) {
            },
            "arguments": 5,
            256: a43,
        };
    }
    f56();
    const v84 = Array();
    try { v84.findLast(); } catch (e) {}
    v84.unshift();
    const v88 = new Int8Array();
    const t72 = v88.buffer;
    t72.constructor = f24;
    const v91 = new Int32Array();
    v91[3];
    for (let v93 = 0; v93 < 5; v93++) {
    }
    %OptimizeFunctionOnNextCall(f56);
    let [v94] = v88;
    function F95(a97, a98, a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F95();
    new F95(65536, v28);
    try { v37["find"](..."find", a43, ...v36, ...v37, ...522675525n); } catch (e) {}
}
for (let v105 = 0; v105 < 10; v105++) {
    f39(v33);
}
%OptimizeFunctionOnNextCall(f39);
f39(5);
