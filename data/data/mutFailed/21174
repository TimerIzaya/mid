function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function F3(a5, a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v10 = new Float32Array(this, a7, a7);
        v10.byteOffset;
        const v13 = new Uint8Array(268435440);
        new Uint8ClampedArray(129);
        v13[6] = v10;
    }
    const v17 = new F3();
    const v18 = v17?.constructor;
    try { new v18(F0, this, 5); } catch (e) {}
    try {
        this.h = 5;
    } catch(e20) {
    }
    try {
        this.g = 5;
    } catch(e21) {
    }
    try {
        this.a = 5;
    } catch(e22) {
    }
}
new F0();
new F0();
new F0();
new BigUint64Array(2517);
let v29 = 2826;
v29++;
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this?.__lookupGetter__;
    try { new v38(BigUint64Array); } catch (e) {}
}
const v40 = F32?.constructor;
try { new v40(F32); } catch (e) {}
const v42 = new F32();
const v43 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v43.group(BigUint64Array); } catch (e) {}
class C45 {
}
const v47 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v48 = [601759695];
v48[0];
let v50 = 522675525n;
v50--;
function f52() {
    let v55 = Float64Array;
    v55 = BigUint64Array;
    b = v48;
    v43.length;
    try {
        v43.forEach(BigUint64Array);
    } catch(e58) {
    }
    const v59 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    let v61 = Symbol.toPrimitive;
    const o67 = {
        toString(a63, a64) {
            const v65 = F0 && BigUint64Array;
            a63 *= v61;
            v65 <= v59;
            return f52;
        },
    };
    const o88 = {
        "c": -4294967297n,
        [v50](a70, a71) {
        },
        "c": v48,
        valueOf(a73, a74) {
            return a73;
        },
        "b": -4294967295,
        [-4294967297n](a76, a77, a78, a79) {
        },
        "e": -268435456,
        "maxByteLength": -4294967295,
        "arguments": v47,
        ...v42,
        [v61]() {
        },
        "type": C45,
        ..."Vre",
        valueOf(a82, a83) {
            return 2517;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        toString(a85, a86, a87) {
            return C45;
        },
        5: -4294967295,
        6: -268435456,
    };
    v61 = v55;
    new Float32Array(1334);
    new Float64Array(3);
    new Uint16Array(2);
}
const v98 = new BigUint64Array(v29);
v98[950] = v98;
new Uint32Array(9);
function F104() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
    for (const v110 of Array(19793)) {
    }
    const v112 = new Uint32Array(Uint32Array);
    v112.g = v112;
    for (let v113 = 0; v113 < 5; v113++) {
        v112[v113] = this;
    }
}
new F104();
function F116() {
    if (!new.target) { throw 'must be called with new'; }
    const o120 = {
        "maxByteLength": 1073741824,
    };
    function F121() {
        if (!new.target) { throw 'must be called with new'; }
        const v123 = this.constructor;
        let v125 = -16n;
        function f126() {
            v125 *= -1911645276n;
            return F121;
        }
        f126();
        new v123(f126, f126());
    }
}
[F116];
const v138 = [1557591051,8137,536870888,-9223372036854775808];
const v139 = v138 * v138;
const v140 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
v140[4];
function f142() {
    const o147 = {
        __proto__: v140,
        [v139](a144, a145, a146) {
        },
    };
    const v148 = o147.copyWithin(o147, o147);
    v148[4] = v148;
    return o147;
}
f142();
const v150 = new BigInt64Array(6);
try {
    v150.findLast(F116);
} catch(e152) {
}
