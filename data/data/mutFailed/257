WeakSet[9] = WeakSet;
new WeakSet();
function f3(a4, a5) {
    const o9 = {
        [122188848n](a7, a8) {
        },
    };
    return o9;
}
f3();
const v13 = new Uint16Array();
Date[-22872] = 64;
Date[-22872n] = Date;
new Uint32Array(64);
const v18 = [];
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    a21.lastIndexOf(a21, a22);
}
new F19(v18);
new Float32Array(255);
WeakSet[9] = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
class C34 extends ([-1941710058,1389675721,-50560,-20231,1311353951,-1024,128,-25926]).constructor {
    #g;
    7 = -1823362111n;
}
new BigUint64Array(0);
function f38() {
    Reflect.construct(Uint8ClampedArray, [[1.0,-6.818981069405753e+307]]);
    return Uint32Array;
}
("HEkWL").localeCompare("isArray", "isArray");
const v48 = [-1539,1,12];
function f49(a50, a51) {
    a50[Symbol.toPrimitive] = f38;
    const o54 = {
        [a50]: v48,
        "type": "HEkWL",
        2: v13,
    };
    return a50;
}
f49();
f49(Date);
const o57 = {
    __proto__: Set,
    ...Set,
};
class C60 {
    static ["22307"] = "AanB8";
    b;
}
new C60();
const v7 = new Map();
const v8 = [17351.673033695086];
const v10 = [v7,45071n,45071n,[v8,v7,v8,-3.0]];
const v11 = [5.0,-1e-15,-198000.8035743439,-989814.3120582907,-Infinity,0.7872883752678705,1.383742607202418e+308];
const v12 = [136.17162009893582,5.0,906792.2540561245,-6.394239209639033e+307,-1e-15,-1.0,5.0,-1.2786456207217185];
[1000000000.0,-2.071713807311561e+307,0.9292605839197996];
class C14 {
    256;
    constructor(a16, a17, a18) {
        this instanceof v7;
        try { v10.with(a16, this); } catch (e) {}
    }
    static 1073741825;
    f = Map;
    p(a25, a26, a27, a28) {
        try {
            a28 **= a25;
        } catch(e29) {
        }
        let v35 = -258662.7345257731;
        v35++;
        429269009 ** (v35 || v35);
        return v12;
    }
}
new C14(-3.0, -3.0, v11);
const t26 = -3.0;
new t26(-3.0, 17351.673033695086, v11);
new C14(17351.673033695086, -3.0, v10);
const v44 = [-256n];
Object.defineProperty(v44, Symbol.isConcatSpreadable, { writable: true, value: v8 });
const v47 = v44.concat(-4294967297n);
function f49() {
    const o50 = {
        "c": f49,
    };
    return o50;
}
const v53 = f49().c.prototype;
try { v53.__defineSetter__(v47, v44); } catch (e) {}
const v56 = new Int8Array();
function f57(a58, a59) {
    return a58.normalize();
}
v56[Symbol.toPrimitive] = f57;
const v64 = new f49();
v64.slice("object", v56);
