const v1 = [6,-15,4,1,288656709,64];
const v2 = [-695800749,15,255,-27147];
function f3(a4, a5) {
    new Float32Array([798019179,-9007199254740992,-8195,-4294967297,1420574578,9007199254740991,-1493424054,-2147483649,8,47842]);
    return false;
}
v2.toString = f3;
[-1];
class C10 {
    m(a12, a13) {
        try {
            v2.length = 2563826855;
        } catch(e15) {
        }
        return v1;
    }
    valueOf(a17, a18) {
        a17 >> false;
        let v20;
        try { v20 = a17(a18); } catch (e) {}
        function F21(a23, a24) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a23;
            } catch(e25) {
            }
        }
        const v26 = new F21(v20, a18);
        const v27 = new F21(a18, v26);
        const v28 = new F21(v20, v27);
        return v28;
    }
}
try { C10.constructor(v2); } catch (e) {}
const v30 = new C10();
function f31(a32, a33) {
    new Date();
    return v1;
}
v30.toString = f31;
try { v30.hasOwnProperty(v30); } catch (e) {}
new C10();
const v38 = new C10();
function f39() {
    return v38;
}
[NaN,917261.6807695399,-1.3863595244872041e+308,661.8146933200601];
const v41 = [-724.3212489898896,4.4765749417019096e+307];
try { v41.values(); } catch (e) {}
[0.3306120672687034,1.7976931348623157e+308,-998.3193919745938,-1000000000.0,-4.0,361375.8199839243,906.9666576407408,-729385.3198482185];
new Uint16Array(512);
let v47 = 21;
v47++;
new Uint8ClampedArray(v47);
Float64Array.name = Float64Array;
new Float64Array(16);
let v55 = 128;
v55--;
function f57() {
    const o89 = {
        next() {
        },
        m(a61) {
            let v60 = this;
            a61.toString = f39;
            try { v60.next(); } catch (e) {}
            a61.f = a61;
            const o63 = {
            };
            o63.d = v47;
            o63.d = o63;
            function f64(a65, a66, a67) {
            }
            try {
            } catch(e68) {
            }
            try {
                const o69 = {
                };
            } catch(e70) {
            }
            let v72;
            try { v72 = Math.expm1(); } catch (e) {}
            Number.isNaN(v72);
            let v75 = -9007199254740991;
            v75++;
            const v77 = v75 >> 1.7047100695894155e+308;
            v77 * v77;
            class C79 {
            }
            const v80 = C79.name;
            v80[1] = v80;
            const v81 = v80.codePointAt();
            v81 >>> v81;
            const v85 = new Int8Array(3938);
            v85.g = v85;
            v85.g = v85;
            let v86 = 3;
            v60++;
            [...v86] = v85;
            const o88 = {
            };
            o88.h = C79;
            o88.h = o88;
        },
    };
    o89.m(o89);
}
f57.arguments = f57;
f57();
f57();
