function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = F0;
    try {
        this.e = -52072;
        for (let v3 = 0; v3 < 64; v3++) {
            [-0.0437815448122123,52531.297637078445,477.0609772484354];
            [7.286266381096885e+307,-4.396812729849118,8.692188824780782,7.249489283042337,890.339745750359,0.5812724200174794,231.1110507212145,-4.0,-2.220446049250313e-16];
            [1000.0];
        }
    } catch(e7) {
    }
    try {
        this.d = -52072;
    } catch(e8) {
    }
}
const v9 = new F0();
const v10 = new F0();
("symbol").normalize("NFKD");
new BigUint64Array(4);
const v19 = new BigUint64Array(2084);
const v22 = new Uint8ClampedArray(127);
const v23 = new F0();
const v24 = [-1660667832,129,256,512,-9007199254740990,48167];
const v25 = [536870912,-6650];
[14,-3,5,10,13,2,-2,-65536];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a30;
    } catch(e31) {
        a30 && a29;
        try {
            v9.length = 2;
        } catch(e35) {
        }
    }
    try {
        this.g = v23;
    } catch(e36) {
    }
    try {
        this.f = v10;
    } catch(e37) {
    }
}
new F27(v24, v23);
new F27(v24, v25);
new F27(v24, v9);
const v44 = new BigInt64Array(9);
const v46 = new Date();
v9[v46] = v22;
Date[Date(...v19, BigInt64Array, F27, BigUint64Array, F27, ...v22)] = "symbol";
const v48 = [-0.0,-2.0,-1e-15,2.0,-Infinity,2.220446049250313e-16];
v48.notation = v48;
const v49 = [0.7413321115775521,436298.36999994353,-547.5300741212703,1.0,-1e-15,8.397732840452793,-1000000000.0,6.84258291941704];
v44["lastIndexOf"](4096);
v49.toLocaleString(("lastIndexOf")[Symbol.toPrimitive], v48);
