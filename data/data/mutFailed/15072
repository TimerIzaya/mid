function f0() {
    const o19 = {
        __proto__: "2",
        [1000000.0](a5) {
            try { a5(this, a5, 647.7728172411248); } catch (e) {}
            try {
                super.n(this, 1000000.0, this, 1000000.0);
            } catch(e8) {
            }
            return 1000000.0;
        },
        get h() {
            function F10(a12) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = "2";
                } catch(e13) {
                }
                try {
                    this.d = 647.7728172411248;
                } catch(e14) {
                }
                try {
                    this.g = "2";
                } catch(e15) {
                }
            }
            const v16 = new F10(f0);
            const v17 = new F10(v16);
            new F10(v17);
            return v16;
        },
        ["2"]: 1000000.0,
    };
    const v20 = o19[0];
    class C21 {
        4 = f0;
    }
    new C21();
    new C21();
    new v20();
    return o19;
}
const v25 = f0();
const v26 = f0(v25, f0);
const v27 = f0();
v27[1000000] = v27;
class C28 extends f0 {
    static e;
    c = f0;
    o(a30, a31) {
        a31 &= v26;
        const v32 = f0();
        a31[7] = v26;
        v32[268435441] = v26;
        return a31;
    }
    b;
}
new C28();
new C28();
new C28();
new Uint8ClampedArray(3);
-3516;
const v42 = new BigUint64Array(3516);
try { v42.set(3516); } catch (e) {}
591 >>> 591;
new BigInt64Array(591);
try { new Int32Array(3516, 591, 591); } catch (e) {}
class C50 extends Int32Array {
}
const v51 = new v25();
const v52 = new v26();
try { ("includes").replaceAll(v42, 591); } catch (e) {}
v51["includes"](v52);
