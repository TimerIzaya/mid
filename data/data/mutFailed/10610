const v2 = new Uint16Array();
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
function f5(a6, a7) {
    try { a6(f5); } catch (e) {}
    try { a6(BigInt64Array); } catch (e) {}
    a7.constructor(a7);
    return f5;
}
const v12 = new Promise(f5, Uint8Array);
try { v12.then(); } catch (e) {}
class C15 {
}
Math.asinh();
Math.sin(3.862600614459211e+307);
for (let v21 of "-65537") {
    Uint8Array.cbrt(v2);
    +v21;
    const v27 = --v21;
    v27.fround(v27);
    ~Infinity;
    --v21;
    Math.clz32(v21);
}
function f32() {
    return "-52059449";
}
[9007199254740992n,-2n];
const v41 = [[-9007199254740990,49004,536870889,1000,257,65536,-9007199254740990,-9007199254740992]];
try { v41.toLocaleString(v41); } catch (e) {}
2 < 2;
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this?.constructor;
    try { new v47(); } catch (e) {}
}
const v49 = new F45();
function f50(a51, a52) {
    const o56 = {
        "b": "-65537",
        n(a54, a55) {
            return a51;
        },
        "a": v49,
    };
    return o56;
}
f50();
-25283n && -25283n;
const v64 = [604.4479109019192,-2.220446049250313e-16,0.3083488057663979,0.3083488057663979];
const v65 = [0.3083488057663979,0.3083488057663979,0.3083488057663979,0.3083488057663979];
class C66 {
    constructor(a68, a69) {
        (-2n)[2];
        /Ia[a]/uims;
        let v72 = /W(jy2)/udy;
        v72.flags;
        const v74 = /(u4(?:a?)*)/gudimsy;
        const v77 = new Uint8Array(v74, C66);
        const v79 = new Uint32Array();
        function f80(a81, a82, a83, a84) {
            const o88 = {
                ...v77,
                n(a86, a87) {
                    v79[a81] = v79;
                },
            };
            return o88;
        }
        for (let v89 = 0; v89 < 625; v89++) {
            f80(Uint8Array, 2, v89);
        }
        v72 = v74;
        for (let v91 = 0; v91 < 25; v91++) {
            v41["p" + v91] = v91;
        }
    }
}
const v94 = new C66(v64, v65);
v94.constructor;
const v96 = new Uint8Array();
function f97(a98, a99, a100, a101) {
    const v102 = a100 ^ a100;
    const o106 = {
        "b": a98,
        "c": a101,
        ...v96,
        n(a104, a105) {
            return v102;
        },
    };
    return a101;
}
for (let v107 = 0; v107 < 625; v107++) {
    f97(Uint8Array, 2, v107);
}
["-52059449",9007199254740992n,"-65537","-52059449"];
const v110 = [256n,9007199254740992n,-2n,"-65537"];
const v111 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
function f112(a113, a114, a115, a116) {
    try { a115(a116, a115, a114); } catch (e) {}
    function f118() {
        const v119 = v111.length;
        const v120 = v119 >>> v119;
        const v121 = v120 % v120;
        v121 & v121;
    }
    return f118;
}
const o123 = {
};
class C124 {
}
function F125() {
    if (!new.target) { throw 'must be called with new'; }
    const v127 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F128(a130, a131, a132, a133) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v134 = new F128(v127, F125, v127, F128);
    const v136 = [F125,F125,F125,F125];
    Reflect.apply(v127.indexOf, v134, v136);
}
let v139 = 144;
const v140 = v139++;
function F141(a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v145 = new F141(F141, a144);
        const v149 = -1000000.0 | -32070;
        const o175 = {
            n(a151, a152) {
                class C161 extends Int32Array {
                }
                try {
                    super.getUTCDay(BigUint64Array);
                } catch(e168) {
                }
                try { v145.m("-65537"); } catch (e) {}
                function F170() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                class C173 {
                    static get b() {
                    }
                }
                return v149;
            },
        };
        (-32070) ** v149;
        Math.log10(Math);
        -v149;
    } catch(e179) {
    }
}
class C180 {
    static #m(a182) {
    }
    static #d = 2;
    valueOf(a184, a185, a186, a187) {
        try {
            a184.#d &= "-65537";
        } catch(e188) {
        }
        return a185;
    }
    #g = -2n;
    [2];
    constructor(a190, a191) {
        return 64;
        const v194 = new Uint32Array();
        for (const v195 in v194) {
        }
        ["object"];
        const o199 = {
            "maxByteLength": 1000,
        };
        this.propertyIsEnumerable(C180);
    }
}
function f201(a202) {
    v110.includes;
    [[65535,268435439,-9007199254740990,268435440,1024,19743,5,4]];
    ("boolean").split("toString");
    return v140;
}
("-52059449").normalize("NFKD");
class C213 extends Date {
}
C180[Symbol.toPrimitive] = f201;
new C180();
