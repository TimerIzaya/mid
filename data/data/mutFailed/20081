const v2 = new String(4);
new BigUint64Array(4, 4, v2, String);
new Uint8Array(1000);
[-4.0,0.0,924088.1268969947,-1.324231975501173e+308,-743.30408712836];
[-1000.0,0.36241001393480954,3.846708076807896e+307,-5.813098241515238,-1e-15,-5.0,-1000000000.0];
[0.24445495696411068,1e-15,-5.681929574396478,-988.6348073199945,-9.37113361983269,3.0];
const v16 = new Float32Array();
for (let v17 = 0; v17 < 25; v17++) {
    function f18(a19, a20, a21, a22) {
        a19[1];
        a20--;
        v17[0] = a19;
        const v25 = `
            for (let v26 = 0; v26 < 5; v26++) {
                class C27 {
                }
                const v28 = new C27();
                function f29(a30, a31) {
                    const o36 = {
                        [v28](a33, a34, a35) {
                        },
                    };
                }
            }
        `;
        const o45 = {
            1073741825: "MIN_VALUE",
        };
        const o50 = {
            __proto__: o45,
            get d() {
                return this;
            },
            p(a48, a49) {
                return a49;
            },
        };
        const v51 = arguments.__lookupGetter__;
        try { v51.constructor(v16, a21, v17); } catch (e) {}
        const v54 = new Date();
        ([v54]).toLocaleString();
        class C59 extends [BigUint64Array,BigUint64Array,BigUint64Array,BigUint64Array] {
        }
        return v51;
    }
    for (let v60 = 0; v60 < 10; v60++) {
        f18(v16);
    }
}
const v62 = [];
const v63 = [v62,v62,v62,v62];
const t51 = [v62,v63,v63,v63];
t51.length = 2;
function f66(a67, a68, a69) {
    let v70 = [1073741824,1073741823,1376142744,1073741825];
    function f71(a72, a73, a74, a75) {
        function f76() {
            return a75;
        }
        class C77 extends f76 {
        }
        for (let v78 = 0; v78 < 5; v78++) {
            function f79() {
                for (let v80 = 0; v80 < 5; v80++) {
                    for (let v81 = 0; v81 < 5; v81++) {
                        Math.atanh(v81);
                    }
                }
                return f79;
            }
            try {
                v70 &= C77;
            } catch(e84) {
            }
        }
        return Float32Array;
    }
    for (let v85 = 0; v85 < 5; v85++) {
        f71(f66, v70, v85, v70);
    }
    %OptimizeFunctionOnNextCall(f71);
    return a68;
}
const v87 = f66(Float32Array, v16, v16);
const v89 = new Int8Array(Int8Array);
v89.buffer.slice(Int8Array, Int8Array).transfer();
f66(f66, f66, v87);
