/[p]/guy;
const v1 = /h\x01/gmy;
const v2 = /Mabc/guds;
class C3 {
    p(a5, a6) {
        try { a6.test(this); } catch (e) {}
        a6.sticky **= super.h;
        try {
            super.o(v1);
        } catch(e10) {
        }
        return a5;
    }
}
const v11 = new C3();
new C3();
new C3();
/y/guimsy;
const v15 = /[xyz??]/s;
/a?F(?<a>)/udim;
let v17 = /a|b/vdy;
let v18 = /7Z(?:a?)+/gudsy;
const v19 = /\coQ/gdy;
function f20(a21) {
    const v22 = [601759695];
    const v23 = [1073741824,1073741823,1376142744,1073741825];
    function f25(a26, a27, a28, a29) {
        function f30() {
            return a26;
        }
        const v32 = new Int8Array();
        const v35 = BigUint64Array * 536870887;
        v32.buffer;
        const v37 = new Int8Array();
        try { v37.entries(); } catch (e) {}
        try { v23["find"](..."find", a29, ...v22, ...v23, ...522675525n); } catch (e) {}
        const v42 = new Uint8ClampedArray(v22, v35, 536870887);
        try { v42.findLast(v35); } catch (e) {}
        const o44 = {
            ...v42,
        };
        return f25;
    }
    return v2;
}
v19[Symbol.toPrimitive] = f20;
function F47(a49) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a49, "toString", { enumerable: true, value: f20 });
    try {
        this.e = v17;
    } catch(e50) {
    }
    try {
        this.g = a49;
    } catch(e51) {
        v19.dotAll >>= e51;
        let v52;
        try { v52 = e51(e51, v18); } catch (e) {}
        v18 = v17;
        return e51;
        v17 = v52;
    }
}
F47.null = v11;
const v53 = new F47(v17);
const v54 = new F47(v18);
function f55(a56, a57) {
    new Uint16Array(129);
    return 129;
}
v54[Symbol.match] = f55;
const v63 = new F47(v17);
v63.toString = f55;
class C64 extends F47 {
    static {
        super[v63] = v17;
        let v66;
        try { v66 = v18(F47); } catch (e) {}
        super.g |= v17;
        const v68 = super[v19.exec(v66)];
        let v69;
        try { v69 = v68(this, v68); } catch (e) {}
        v19[4];
        const v71 = v63 === v66;
        function F75(a77, a78, a79) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = v54;
            try {
                this.h = a79;
            } catch(e80) {
            }
            v18["test"](v69);
            try {
                new C3();
            } catch(e84) {
            }
        }
        v15[13];
        [-1000000000.0,1000000000.0,5.39966266398946,2.0,-0.0,1000.0,-6.599295566240979e+307,Infinity,-7.296901196705294];
        [-2.220446049250313e-16,1000000000.0,-1.2876885117440418e+308,9.066191582678339e+307,-Infinity,-2.0,1000.0,-6.203469259039629];
        [0.6946382168164164,5.341904876919701e+307,5.0];
        new F75(-49955, 56954, 2147483649);
        const v91 = v71 ? v63 : v66;
        try {
            v66.c = this;
        } catch(e92) {
            function f93() {
                return f55;
            }
            function f94(a95) {
                a95[v69] = a95;
            }
            Object.defineProperty(e92, Symbol.toPrimitive, { configurable: true, get: f93, set: f94 });
            const o98 = {
                [e92]: this,
                "f": v91,
            };
            v54[Symbol.match];
        }
    }
    #h;
    static #g;
    g = v53;
    #b;
}
const v102 = new C64();
const v103 = new C64();
new C64();
const v105 = [-1077398797,2,1671415104,4294967297];
function f106(a107, a108, a109) {
    function f111(a112) {
        const v113 = ++a112;
        try {
            v105.h = v113;
        } catch(e114) {
        }
        const v115 = [];
        function f116(a117) {
            return v115;
        }
        const v119 = new Int8Array(v115);
        v119[Symbol.toPrimitive] = f116;
    }
    this.onmessage = f111;
    try {
        this.fuck(v63, a108);
    } catch(e123) {
    }
    let v124 = -2.0;
    v124++;
    [[1.0,-6.818981069405753e+307]];
    ("D")[0].substring();
}
const v133 = [C64,v54,v17];
const o134 = {
    "arguments": v133,
    "type": "function",
    [v19]: "function",
    "d": v103,
    __proto__: v103,
    [f106]: v102,
    "e": v105,
};
[-5,-65536,-65537,14311,14,255];
function f136(a137, a138) {
    a138[Symbol.toPrimitive] = f136;
    Math.imul(3, a137 % a137);
    Math.log(3);
    a138.constructor(a138);
    return f136;
}
new Promise(f136);
