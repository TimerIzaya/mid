const v0 = [16,-1930027645,-65535,-27015];
const v1 = [2147483647,45119,4294967297,1,51530,65009,-64818];
[9,512,-937018974,-9007199254740990,-547529716,1073741824,-1015653514,-256,-1024];
const v5 = [Reflect,Reflect];
const v8 = new Array(1);
let v11 = -56168;
const v14 = Math.clz32(v0 / 1073741824);
const v15 = !v0;
Math.abs(v15);
1073741824 >> v1;
--v11;
const v19 = Math.max(v15);
const v20 = v5[1];
function f21() {
    function f22(a23, a24) {
    }
    new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
    const v30 = new Float64Array(1);
    [v30];
    const v33 = new Promise(f22);
    v33.constructor = f21;
    const v34 = v33.constructor;
    let v35;
    try { v35 = v34(v33, v34, v34, f21, v34); } catch (e) {}
    return v35;
}
const v37 = new Int16Array(26);
new Uint8Array(1000);
function f41() {
}
const v42 = v20();
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = f21.constructor;
    try { v47(this, v42); } catch (e) {}
}
for (let v50 = 0; v50 < 25; v50++) {
    function f51() {
        return v50;
    }
    const v52 = [601759695];
    const v53 = [1073741824,1073741823,1376142744,1073741825];
    function f54(a55, a56, a57, a58) {
        f51();
        try { v53["find"]("find", a58, v52); } catch (e) {}
    }
    for (let v62 = 0; v62 < 10; v62++) {
        f54(v62, v62, v52, f54);
    }
}
function f64() {
    return Math.fround(Math);
}
function f68() {
    function f69() {
        return f69;
    }
    function f70() {
        return f69 == f70;
    }
    f70();
    Object.defineProperty(v19, 3, { writable: true, configurable: true, set: f41 });
    f41();
    try {
        v0.__proto__ = v5;
    } catch(e74) {
    }
}
function f75() {
    const o103 = {
        valueOf() {
            try {
                for (let v80 = 0; v80 < 10; v80++) {
                    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                        function f85() {
                            return f85;
                        }
                        const v87 = new Map();
                        v87.set(f85);
                        v87.constructor = f85;
                        v87.constructor;
                        length | length;
                    }
                    function F92(a94) {
                        if (!new.target) { throw 'must be called with new'; }
                        this.b;
                    }
                    new F92();
                }
                this.valueOf = f68;
            } catch(e97) {
                [-538.6860716488644,82.35285637304924,8.736115542443198,-122.40033331919915,1.5024636752720426e+307,-7.665816620280557];
                [-3.0,-1000000.0,145252.1765525469,3.0,NaN,0.3404901540268397,-502.1566976156959];
                [-938002.9216775812,-4.940361526634673,-583333.7464816592,-1.7976931348623157e+308,1000000.0,0.6705153809077681];
                new Map();
            }
        },
    };
    return o103;
}
const v105 = new Int16Array(Int16Array, f21, Int16Array);
const o106 = {
    "g": v8,
    ...v105,
};
const v107 = f75();
function F108(a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    a110.valueOf();
    const v113 = this.constructor;
    try { new v113(a110); } catch (e) {}
}
new F108(v107);
new Uint32Array(40);
function f118() {
    const o121 = {
        get c() {
            super.m();
        },
    };
}
const v123 = new Int8Array();
try { v0.keys(); } catch (e) {}
const v125 = delete v1[1000];
try { v20(f75, f21, v125, ...v14, v125); } catch (e) {}
v37.byteOffset;
const t125 = v123.buffer;
t125.constructor = f118;
new Uint16Array([34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449]);
