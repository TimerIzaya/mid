let v2 = -10;
0.7727722334449542 % 0.7727722334449542;
14 >>> 14;
v2 = -256;
const v13 = [];
try {
    v13.fill(-65537n);
} catch(e16) {
}
let v18 = Infinity;
v18++;
const v20 = !6;
Math.log2(-3.8665416534587934e+307);
const v22 = !v18;
const o25 = {
    "execution": "async",
    "type": "minor",
};
v22 && v22;
function f27() {
    return f27;
}
const t22 = /C/gumy;
t22.constructor = f27;
Math.atanh(6);
function f30(a31, a32, a33) {
}
new Proxy(Uint8Array, ([4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886]).toLocaleString());
const v39 = 63741 || v18;
function f41(a42, a43) {
    const o47 = {
        "f": a43,
        [a42]: -12,
        set e(a45) {
        },
    };
    return o47;
}
const v49 = f41(f41(10000, 10000), 10000);
class C50 extends f41 {
    static valueOf(a52, a53, a54) {
        async function* f55(a56, a57, a58, a59) {
            await f41();
            yield* [];
            return a58;
        }
    }
}
const v63 = new C50();
Object.defineProperty(v49, 4294967296, { writable: true, configurable: true, enumerable: true, value: v63 });
v39 >>> v39;
Math.sign(v22);
new Uint8ClampedArray(4);
function F71(a73) {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = this.constructor;
    try { v74.apply(a73); } catch (e) {}
    try { new v74(); } catch (e) {}
}
new F71();
const v79 = /(?!(a))\1*/vmy;
try { v79.exec(v22); } catch (e) {}
try {
    v79.a = v20;
} catch(e81) {
}
const v85 = /k/gdsy;
const v86 = v85.compile(v85);
v86.b = v86;
const v89 = Symbol.toStringTag?.constructor;
try { new v89(); } catch (e) {}
parseInt("pop");
