new String(4096);
new Uint8ClampedArray(256);
new Float64Array(1);
new BigUint64Array(4096);
new Object(2586);
class C19 {
    [1073741824] = 1073741824;
    #o(a21, a22) {
        const v23 = super.h;
        a21 <= 1073741824;
        return v23;
    }
    #p(a26) {
        const v27 = super[-1276341520];
        function f28() {
            return v27;
        }
        return 1073741824;
    }
}
new C19();
const v30 = new C19();
new Map("m", v30);
try { Map(); } catch (e) {}
const v36 = new Map();
function f37(a38, a39, a40, a41) {
    a40.arguments = a40;
    a38[3];
    a40.caller = a40;
    const o49 = {
        n(a44, a45, a46, a47) {
            for (let v48 = 0; v48 < 10; v48++) {
            }
        },
        16: a38,
        ...v36,
    };
    return o49;
}
const v50 = f37("m", "m", f37);
new Float64Array();
let v53 = 16;
v53++;
try { BigInt64Array(); } catch (e) {}
new BigInt64Array();
const v59 = ~-4294967297n;
v59 ^ v59;
const v62 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v63 = [601759695];
try { v63.sort(v63); } catch (e) {}
v63[0] = v63;
const v65 = [1073741824,1073741823,1376142744,1073741825];
function f67(a68, a69, a70, a71) {
    arguments.toString();
    function f74() {
        const v76 = ("Vre")?.toLocaleUpperCase;
        try { new v76(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v80 = -268435456;
        v80--;
        -(v80 + v80);
        const o97 = {
            "c": -4294967297n,
            [522675525n](a85, a86) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v63,
            valueOf(a88, a89) {
            },
            "e": -4294967295,
            "e": v80,
            "maxByteLength": -4294967295,
            "arguments": v62,
            ...v63,
            "type": "Vre",
            ..."Vre",
            valueOf(a91, a92) {
            },
            ..."Vre",
            4: "Vre",
            "c": v80,
            "type": "Vre",
            toString(a94, a95, a96) {
            },
            6: v80,
        };
        try { o97.valueOf(o97, -128); } catch (e) {}
        return "Vre";
    }
    f74.length;
    f74(Uint32Array, Float64Array);
    const v102 = new parseInt();
    try { v102.findIndex(v50); } catch (e) {}
    %OptimizeFunctionOnNextCall(f74);
    ("find").strike();
    try { v65["find"](..."find", a71, ...v63, ...v65, ...522675525n); } catch (e) {}
}
for (let v107 = 0; v107 < 5; v107++) {
    f67();
}
f67();
%OptimizeFunctionOnNextCall(f67);
f67();
new Uint32Array(1024);
function F112(a114, a115, a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
    ("entries").toUpperCase();
    ~a115;
    const v121 = this.constructor;
    try { new v121(); } catch (e) {}
}
const v123 = new F112();
new F112(v123, F112, v123, v123);
