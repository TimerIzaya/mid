new Uint16Array(2443);
const v5 = new Uint8ClampedArray(88);
const v7 = [-8617,3];
function f8(a9, a10, a11, a12) {
    const o13 = {
        "h": a9,
        "b": v7,
    };
    return o13;
}
const v15 = new BigInt64Array(8);
let v16 = -2.0;
v16++;
new Uint16Array(96);
class C21 extends Uint8ClampedArray {
    static set b(a23) {
        try {
            v5.buffer = this;
        } catch(e24) {
        }
        let [v25,,,v26] = v15;
        v25 in v5;
        Object.defineProperty(Uint8ClampedArray, 1, { value: [7.554475698528474] });
        class C30 {
        }
        -253026077 % -816409267;
        Math.log();
        function F36() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = 3;
            } catch(e39) {
            }
            try {
                this.f = 3;
            } catch(e40) {
            }
            try {
                this.h = 3;
            } catch(e41) {
            }
        }
        const v42 = new F36();
        const v43 = new F36();
        const v45 = new Uint32Array();
        class C46 {
        }
        const v47 = new C46();
        const v48 = new C46();
        const v49 = [v48,v47,v42];
        function F50(a52, a53, a54, a55) {
            if (!new.target) { throw 'must be called with new'; }
            try { a52.entries(); } catch (e) {}
            const v57 = a53?.constructor;
            try { new v57(); } catch (e) {}
            const v59 = a52.unshift();
            v59 === v59;
            const v62 = new Set();
            function F63(a65, a66) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a65;
                } catch(e67) {
                    for (let [v68,v69] of a65) {
                        try {
                            v62.values();
                        } catch(e71) {
                            const v72 = e71?.[4];
                            Object.defineProperty(v62, 16, { writable: true, enumerable: true, get: f8, set: f8 });
                            const v73 = new Uint16Array(v72, 88, v68);
                            Object.defineProperty(v73, "byteOffset", { configurable: true, get: f8, set: f8 });
                            const o74 = {
                            };
                            try {
                                o74.d = v69;
                            } catch(e75) {
                            }
                            try {
                                const o76 = {
                                };
                                o76.d = v69;
                                o76.c = a23;
                            } catch(e77) {
                            }
                            try {
                                const o78 = {
                                };
                                o78.d = v69;
                                o78.c = a23;
                                o78.f = v69;
                            } catch(e79) {
                            }
                            try {
                                const o80 = {
                                };
                                o80.d = v69;
                                o80.c = a23;
                                o80.f = v16;
                            } catch(e81) {
                            }
                        }
                    }
                }
                try {
                    this.h = v62;
                } catch(e82) {
                }
                try {
                    const v83 = v62[this];
                    try {
                        new a66(v83, -268435456n);
                    } catch(e86) {
                    }
                    this.b = Set;
                } catch(e87) {
                }
            }
            const v88 = new F63(Set, Set);
            new F63(Set, F63);
            const v90 = new F63(v88, F63);
            const v94 = [65537,268435441,63298,-5,1235122603];
            const v95 = [128,215394418];
            const v96 = v95.entries();
            const v97 = [-2,-4294967296,4294967297];
            function F98(a100, a101, a102, a103) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v104 = new F98(-714582153, F98, -714582153, v95);
            const v106 = new F63(v90, null);
            const v109 = new BigUint64Array(0);
            new Int32Array(1519);
            v104.length;
            const v114 = new F98(9, v104, 9, v97);
            v114.b = v114;
            new F98(v109, v114, v97, v97);
            const v123 = ("string").trimStart();
            v96[3];
            let v127;
            try { v127 = v123(); } catch (e) {}
            v94[v127] = v95;
            0 ^ 9;
            const v132 = -1000;
            ~9;
            v132 >>> v132;
            a = ("string").length - F98;
            v62[v114];
            v106.__proto__;
            -35417 - -35417;
        }
        const v141 = new F50(v49, v43);
        new F50(v49, v45, v45, v141);
    }
    c = 8;
    static 163 = v5;
    static [Uint16Array];
}
new C21();
const v144 = new C21();
new Uint16Array();
new BigUint64Array(256);
function f151(a152, a153, a154) {
    return f151;
}
function f155(a156) {
    return Symbol.toPrimitive;
}
const v159 = new Uint8Array(3513);
const v162 = new BigUint64Array(16);
[v159,256,256];
([])[1];
const v166 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
const v168 = [[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v166,BigUint64Array];
const v170 = [WeakSet,WeakSet,WeakSet,WeakSet];
v170.copyWithin();
for (let v172 = 0; v172 < 24; v172++) {
}
const v174 = [v168];
const o175 = {
    "arguments": v174,
    "type": "function",
};
const v176 = [256];
[v162,16,v176];
const v179 = v176 === BigUint64Array ? v176 : BigUint64Array;
h = v144;
v170[268435456] *= 3513;
const v180 = new BigUint64Array(v159);
v180["fill"](v144, 16, 2443);
const v183 = [256];
const o186 = {
    "execution": "async",
};
gc(o186).finally();
[v183,[v183,v179,BigUint64Array,Uint8Array]];
function f191() {
    function f193(a194) {
        try { a194.p(v183); } catch (e) {}
    }
    this.onmessage = f193;
    try {
        v144.length = 16;
    } catch(e197) {
        try {
            f193("async");
        } catch(e199) {
        }
        try { this["any"](WeakSet, f191); } catch (e) {}
    }
}
const v204 = [];
const o205 = {
    "arguments": v204,
    "type": "function",
};
