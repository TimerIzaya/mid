const v0 = [-421294683,-186608953,-2147483648,5,0,11,64522,2147483648,-10078,-4294967295];
const v1 = [1356211820,-65536,-127541105,51283,-65535,19038,14,512,1,3];
[1073741824,-256];
const v8 = new Uint8ClampedArray(48);
v8[15];
const v12 = new Int8Array([0.600959953156498,1.0,-Infinity]);
v12[1] = v12;
const v15 = new Int32Array(9);
v15[0] = v15;
const v18 = new Int32Array(15);
const v23 = new BigUint64Array(6);
let v24 = 2549;
v24--;
new BigInt64Array(v24);
let v30;
try { v30 = Float32Array(v24, v24, undefined); } catch (e) {}
new Float32Array(3);
const v32 = /(J5a{0,1}?)/y;
v32.b = v32;
const v33 = /u?/udms;
const v34 = /bf/gvms;
v34.e = v34;
32 >>> 32;
let v37 = 32 + 32;
v37--;
const v40 = new Uint8ClampedArray(32);
try { v40.slice(v18, v40); } catch (e) {}
4096 * 4096;
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
const v47 = new Uint8Array(4096);
v47[597];
-1582;
let v51 = 1582 >> 1582;
v51 !== v51;
v51--;
const v55 = new Int8Array(1582);
const v57 = 4 - 4;
-54813 - -54813;
const v61 = 8 & 8;
const v62 = [-54813,1582,-54813,8];
const v63 = v62?.find;
try { new v63(Uint8Array); } catch (e) {}
const v65 = [-54813];
const v66 = [-54813];
try { v66.map(4); } catch (e) {}
function f68(a69, a70, a71, a72) {
    try { a71.toString(); } catch (e) {}
    try { v57.groupToMap(a71); } catch (e) {}
    a71[0] = a71;
    try { a69.copyWithin(undefined, a70); } catch (e) {}
    const o84 = {
        n(a77, a78, a79, a80) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a72;
        },
        ...v66,
        "b": v62,
        ...a71,
        ...v66,
        129: 4,
        ...a69,
    };
    o84[2] = o84;
    return o84;
}
%VerifyType(v23);
v66[2];
try {
    v55.__proto__ = v0;
} catch(e86) {
}
const v87 = f68(v65, v66, v62, 4);
v87[2] = v87;
const v88 = f68(v65, 8, v87, 4);
v88[129] = v88;
const v89 = f68(v66, 4, 4, 4);
v89.d = v89;
-26206 !== -26206;
const v92 = -26206 - -26206;
v92 >> v92;
let v97;
try { v97 = new Map(); } catch (e) {}
const v98 = v97?.delete;
try { new v98(v12); } catch (e) {}
/ND2/gds;
class C101 extends Map {
}
C101.prototype = C101;
const v102 = new Map();
try { v102.get(Uint8Array); } catch (e) {}
const v104 = v102.isPrototypeOf();
!v104;
v104 && v104;
!(v104 && v104);
7 !== 7;
Date.name;
let v113;
try { v113 = Date.parse(v61); } catch (e) {}
-v113;
class C115 {
    static {
        for (let v117 = 0; v117 < 25; v117++) {
            v117 * v117;
            const v119 = v117 >>> v117;
            const v120 = [601759695];
            try { v120.reduceRight(v117); } catch (e) {}
            const v122 = [1073741824,1073741823,1376142744,1073741825];
            v122[3] = v122;
            function f124(a125, a126, a127, a128) {
                a125.name = a125;
                a126 >>> a126;
                a127 % a127;
                try { new a125(); } catch (e) {}
                a126 & a126;
                ~a126;
                try { new a125(); } catch (e) {}
                const v135 = a127 << a127;
                v135 % v135;
                function f138() {
                }
                const v139 = v33 ^ v15;
                v139 >> v139;
                8 * C115;
                try {
                    v1.length = v117;
                } catch(e142) {
                }
                const v144 = new Int8Array();
                try { v144.entries(); } catch (e) {}
                BigUint64Array.prototype = BigUint64Array;
                let v148 = BigUint64Array * 536870887;
                v148++;
                let v150 = v148 - v148;
                v150++;
                const v152 = v148 ** v148;
                try { new Number(Number); } catch (e) {}
                try { Number.parseInt(v150, v150); } catch (e) {}
                let v156;
                try { v156 = new Number(v32); } catch (e) {}
                try { v156.toExponential(v139); } catch (e) {}
                try { v156.valueOf(); } catch (e) {}
                Number.isNaN(v152);
                function f160(a161, a162) {
                    return Number;
                }
                let v163;
                try { v163 = f160(); } catch (e) {}
                try { new v163(v30); } catch (e) {}
                const v166 = v144.buffer.__defineGetter__;
                try { v166.apply(v119, v166); } catch (e) {}
                %OptimizeFunctionOnNextCall(f138);
                try { v122["find"](..."find", a128, ...v120); } catch (e) {}
                const o170 = {
                };
                o170.d = o170;
            }
            for (let v171 = 0; v171 < 5; v171++) {
                f124(this, v171, v171);
            }
        }
    }
}
