class C3 {
    p(a5, a6) {
        Math.random();
        const v10 = --a6;
        Math.expm1(a6);
        14 || 14;
        Math.round(this);
        Math.log10(v10);
        Math.pow(this, v10);
        return v10;
    }
}
const v16 = new C3();
new C3(-14139, C3, v16);
const v18 = new C3();
function f19() {
    return 1972969684;
}
class C20 extends f19 {
    static #b = v16;
    constructor(a22, a23, a24) {
        super();
        a24 = -1024;
        this[this];
    }
    [C3] = -14139;
    static #g;
    hasInstance;
    static a = C3;
}
const v26 = new C20(1972969684, v16, -14139);
const v27 = new C20(v26, 1972969684, v18);
new C20(v27, v27, v18);
let v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
C3 << 268435441n;
Map.prototype;
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    C3.d = v37;
    try { new v37(); } catch (e) {}
}
const v39 = new F35();
function f40(a41, a42) {
    const o49 = {
        n(a44, a45) {
            new Int8Array(1342);
        },
        "a": v39,
    };
    return o49;
}
const v50 = v29++;
function f51(a52, a53, a54, a55) {
    function f56() {
        b = v29;
        const o57 = {
            "c": v29,
        };
        return o57;
    }
    f56();
    %OptimizeFunctionOnNextCall(a53);
    try { v30["find"](..."find", ...a55, ...v29); } catch (e) {}
    return "find";
}
for (let v61 = 0; v61 < 10; v61++) {
    f51(v61, v29, v50, v61);
}
function f63(a64, a65, a66, a67) {
    this.decodeURIComponent(a64, f63, a66);
    return f63;
}
for (let v70 = 0; v70 < 10; v70++) {
    f63();
}
%OptimizeFunctionOnNextCall(f63);
f63();
%OptimizeFunctionOnNextCall(f51);
f51();
