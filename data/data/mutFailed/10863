function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 5.204368247851782;
    } catch(e6) {
    }
}
let v7;
try { v7 = F3.toString(); } catch (e) {}
new F3(0.0);
const v9 = new F3(0.0);
const v10 = new F3(5.204368247851782);
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.constructor;
    try { new v17(0.0, F3, 0.0, a13); } catch (e) {}
    a16 - a16;
    try {
        this.e = v10;
    } catch(e20) {
    }
    try {
        this.h = 5.204368247851782;
    } catch(e21) {
    }
    try {
        this.a = a13;
    } catch(e22) {
    }
}
const v23 = new F11(F11, v9, 5.204368247851782, 5.204368247851782);
const v24 = new F11(F3, v23, 5.204368247851782, 5.204368247851782);
v24.h = v24;
new F11(5.204368247851782, v9, 170.41323289707702, 0.0);
const v28 = new Uint8ClampedArray(94);
v28[47] = v28;
BigInt64Array.name = BigInt64Array;
const v31 = new BigInt64Array(9);
const v32 = v31?.constructor;
v31[9] = v32;
try { v7(5.204368247851782, v10, v9); } catch (e) {}
170.41323289707702 ** v9;
try { new v32(v24, BigInt64Array, v24); } catch (e) {}
new Int16Array(2);
let v42 = 63570;
v42++;
const v44 = [v42];
try {
    new NaN(v44);
} catch(e47) {
    e47.d = e47;
}
