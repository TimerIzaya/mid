const t0 = 321769382;
const v1 = new t0();
const t2 = 321769382;
const v2 = new t2();
const t4 = 321769382;
const v3 = new t4();
try { v1(v2, v1, v3); } catch (e) {}
const v7 = new Uint8ClampedArray(129);
const v10 = new Int32Array(1450);
class C11 {
    [Uint8ClampedArray] = v10;
    static valueOf(a13, a14, a15) {
        new a15();
    }
    static a = v7;
}
const v17 = new C11();
function f19(a20) {
    this.c = v17;
}
const v24 = new Uint8Array(1);
Float32Array.from(v24);
class C29 {
    static #e;
    constructor(a31, a32) {
        try {
            a32.#e = Date;
        } catch(e33) {
        }
    }
}
const v34 = [4,16,0,-65535,1676,851163402,268435439,1945895023,-61519];
const v35 = [13,-2,536870912,1073741824,2,476075221];
try { v35.find(117148166); } catch (e) {}
[-268435456,15,-3,4096];
let v39 = -2147483647;
const t36 = "9007199254740992";
t36["255"] &= 7;
const v45 = Array();
class C46 extends Array {
}
class C47 extends C46 {
    [1] = v45;
}
v39++;
-127;
const t44 = "async";
t44[0] = "async";
const o52 = {
    "execution": "async",
};
function f55() {
    const o62 = {
        "e": -4294967295,
        ..."Vre",
        valueOf(a60, a61) {
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        5: -4294967295,
        6: -268435456,
    };
    return o62;
}
f55();
class C64 {
    constructor(a66, a67) {
        try {
            super.n(1e-15);
        } catch(e69) {
        }
        try {
            super.getYear(a66, this);
        } catch(e71) {
        }
    }
}
new Int32Array(16);
const o76 = {
};
const o82 = {
    get g() {
        Math.acosh(-877499.5260373768 * -877499.5260373768);
        return Math;
    },
};
new Uint8Array(4096);
try { new BigInt64Array(v34, v34, v34); } catch (e) {}
new BigInt64Array(84);
class C89 extends SharedArrayBuffer {
}
try { (-12n).getTime(-12n, -816409267); } catch (e) {}
const v93 = [9223372036854775807,-9007199254740991,-1];
const v94 = [4294967297,-4096,3];
class C95 {
    static #c;
    constructor(a97, a98) {
        a98 ||= this;
        try {
            v94.concat(this, v93);
        } catch(e100) {
        }
    }
    o(a102) {
        try {
            this.#c = v94;
        } catch(e106) {
        }
    }
}
try { new C89(); } catch (e) {}
new C89();
