const v0 = [0.0,-2.2250738585072014e-308,1e-15,3.3021631543231655e+307,-1e-15,595597.9021364127,0.28761565924260835];
const v1 = [-411.70090675657866,2.2250738585072014e-308,-1.3713178833665552e+308,-1000000.0,NaN,-85.63451124892367,0.35258364859811175,0.9229814832143979,1.7976931348623157e+308];
const v2 = [-814601.8613494375,-6.286600803257407e+307,354.4230017864852,6.78581597660548e+307,-797905.0829871311];
function f3(a4, a5) {
    const v7 = [-1];
    Promise.race();
    Reflect.preventExtensions(Reflect);
    const o31 = {
        __proto__: v2,
        set b(a13) {
        },
        /*
        __proto__: v1,
        */
        ...v7,
        "g": -1,
        ...a4,
        "c": v2,
        "arguments": v0,
        "d": a5,
        ...a4,
        "h": a4,
        ...v0,
        [a5]: v1,
        "a": a5,
        104: v1,
        15: v1,
        "c": a4,
        "a": a4,
        [v1]: a4,
        set b(a15) {
        },
        "arguments": v7,
        n(a17, a18) {
            return -1;
        },
        set d(a20) {
            for (let v21 = 0; v21 < 25; v21++) {
            }
        },
        toString(a23, a24, a25) {
            f3 < v0;
            super[v1];
            return f3;
        },
        ...a4,
        valueOf(a29, a30) {
            return a29;
        },
        "b": -1,
    };
    return o31;
}
const v32 = f3(v2, v1);
const v33 = f3(v0, f3);
v33[4];
f3(v2, v2);
0 % 0;
1207147467 + 1207147467;
function f41() {
    return v33;
}
const v42 = [v2,v1,v33,0,-13174];
try { v42.map(v32); } catch (e) {}
try {
} catch(e44) {
}
const v47 = [,[,]];
class C48 {
    [v47] = undefined;
}
C48.length;
new C48();
[v32,v2,f3,-13174,v42];
[v42,v1];
const v54 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f55() {
    const v56 = new f55();
    f55.unshift(v56);
    const v60 = new Uint8ClampedArray(129);
    v60.lastIndexOf();
}
class C62 extends f55 {
}
const v63 = new C62();
const v64 = v63?.constructor;
try { new v64(); } catch (e) {}
const v67 = new BigInt64Array();
const v68 = [-1.7976931348623157e+308];
function f69(a70, a71, a72, a73) {
    const o79 = {
        toString(a75, a76, a77) {
            a72[a71] = a70;
            return 255n;
        },
    };
    return o79;
}
f69(v67, 1207147467, v68);
Int32Array.name;
function F85() {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F85(); } catch (e) {}
-10 * v54;
function f89(a90, a91, a92) {
}
const v93 = [2147483649,-62399];
v93[Symbol.unscopables] = v93;
