const v1 = new Map();
const v2 = [Map];
const v3 = [v2,v1,v2,v2,v2];
const v4 = [Map,v3,Map,v1,v3];
class C5 {
    toString(a7) {
        const v10 = new BigUint64Array(831);
        new Int16Array(v10);
        new Float32Array(8);
        return a7;
    }
    [Map];
    static #b;
    #e;
    268435441;
    #a;
    static e = Map;
    [v3] = v4;
}
new C5();
new v1();
new C5();
let v21 = -35797;
v21 = -53795;
try {
    C5.f = v1;
} catch(e24) {
}
new WeakMap();
const v27 = [104762.14753807266,-279097.1642774454,5.0,1.0];
const v28 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
const v33 = new v1(22);
const v36 = new Int32Array(3289);
const v38 = [v36];
Reflect.apply(v27.join, v33, v38);
class C41 extends Int32Array {
    [Set] = true;
    [v28];
}
new v28();
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = false;
    } catch(e3) {
    }
}
new F1();
const v5 = new F1();
new F1();
class C7 {
    valueOf(a9) {
        for (let v10 = 0; v10 < 32; v10++) {
            a9["p" + v10] = v10;
        }
        try {
            super.toString(a9);
        } catch(e14) {
        }
        return a9;
    }
    static [F1];
    static c = v5;
}
const v15 = new C7();
const t25 = false;
const v16 = new t25();
const v17 = new C7();
Uint32Array.name;
const v31 = new Uint32Array();
async function f32(a33, a34, a35) {
    const v36 = await v31;
    let v37;
    try { v37 = v36.lastIndexOf(7, 59769, v36); } catch (e) {}
    return v37;
}
f32(-4294967295, 59769, 4);
Float64Array.prototype;
const v42 = new Float64Array(11);
v42[8] = v42;
new Uint8ClampedArray(9);
new Int8Array(1810);
new Int16Array(15);
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "a", { enumerable: true, value: F51 });
    try {
        this.a = -22189;
        for (let v54 = 0; v54 < 32; v54++) {
            this["p" + v54] = v54;
        }
    } catch(e57) {
    }
}
const v58 = new F51();
const v59 = new F51();
const v60 = new F51();
class C64 {
    constructor(a66, a67, a68) {
        a68.m = a68;
        %VerifyType(a68);
        try { v58.m(32236, -2147483647, v15); } catch (e) {}
    }
    static set d(a71) {
        let v70 = this;
        (32236)?.[v70];
        try {
            v70 = F51;
        } catch(e73) {
        }
    }
    static h;
    #a = v59;
    [v58] = -2147483647;
    static set g(a75) {
        try { v15.valueOf(v5, v16, this, this); } catch (e) {}
        try {
            this[198] = v17;
        } catch(e77) {
        }
    }
}
new C64(-2147483647, 32236, v60);
new C64(-2147483647, 32236, v58);
-1600745002 % -1600745002;
class C84 extends ([NaN,-5.161337834188833e+307,NaN,-984.7986985006023]).constructor {
}
new C64(32236, 13231, v60);
function f86(a87, a88) {
    const o111 = {
        p(a90, a91) {
            Array(1572);
            function f96(a97, a98) {
                const o99 = {
                    268435456: Float32Array,
                };
                return o99;
            }
            const v100 = a91 ^ a90;
            super[a88];
            new Uint8Array(v100);
            new Int16Array(3859);
            const v110 = new Int8Array(3047);
            return v110;
        },
    };
    return o111;
}
f86(-2147483647, f86(32236, v59));
f86(-2147483647, v59);
for (let v115 = 0; v115 < 50; v115++) {
    268435439n >> 268435439n;
    const v121 = [2.220446049250313e-16,4.276454155698374];
    const v122 = [v121,v121,2.220446049250313e-16,v121];
    const v123 = [2.220446049250313e-16,-409.5445341345936];
    function f124(a125, a126, a127) {
        const o132 = {
            "h": a127,
            "a": a126,
            [a127](a129, a130, a131) {
            },
            "b": a127,
            1942: v123,
            "g": v123,
            ...v122,
        };
        return o132;
    }
    const v133 = f124(v122, -409.5445341345936, -409.5445341345936);
    const o135 = {
        __proto__: v133,
        126: v123,
        ...v133,
    };
}
new Float32Array(1652);
const v139 = [1,14,12578,268435441,-418482690];
function f140() {
    return v139;
}
const o145 = {
    ...v5,
    get g() {
        const v143 = /\c~y*/id;
        v143.compile(v143);
        return v5;
    },
};
class C146 extends WeakSet {
    constructor(a148, a149, a150, a151) {
        super();
        const o153 = {
        };
        gc();
        try {
            gc();
        } catch(e157) {
        }
        o153.execution = a151;
        gc(o153);
    }
}
new C146();
