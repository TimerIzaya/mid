const v1 = new Map();
function f2(a3, a4) {
    const o17 = {
        toString(a6, a7) {
            const v8 = new Map(a3, a4, a3, a6);
            const v10 = [];
            return Reflect.apply(v8.values, v8, v10);
        },
        [a3]: a4,
        __proto__: a3,
        valueOf(a14) {
            const v15 = this ** Map;
            try {
                v1.size = v15;
            } catch(e16) {
            }
            return Map;
        },
    };
    return o17;
}
const v18 = f2(v1, v1);
const v19 = f2(v18, v1);
const v20 = f2(v19, v18);
function f21() {
    return v18;
}
const v22 = [Map,f2,v1];
const v23 = [v19];
const v24 = [v20,v19];
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a29;
    } catch(e30) {
    }
    try {
        this.g = Map;
    } catch(e31) {
    }
    try {
        this.h = a28;
    } catch(e32) {
    }
}
new F25(f21, v24, v24);
new F25(Map, v22, v22);
new F25(v22, v23, v23);
[-1.7976931348623157e+308,-3.0,-3.0,363.8138396999086,Infinity,612.3486694343287,1.7976931348623157e+308,1000000000.0];
[NaN,-139.41140470336723,9.77499234576472,420.6073825280855,1000000000000.0,776.2819047660907,0.07357195689559204,3.779577825846644,-1.0];
const v38 = [5.0,215.46537503132595,5.0,-2.220446049250313e-16,Infinity,NaN,1e-15];
const v40 = new Uint8ClampedArray();
[[v40,v40],v40];
for (const v43 in v38) {
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 9007199254740990;
    } catch(e3) {
    }
}
const v4 = new F0();
const v7 = new Int32Array("sinh");
for (let v8 = 0; v8 < 5; v8++) {
    v7.length <<= v8;
}
const v9 = new F0();
try { v9.hasOwnProperty(v9); } catch (e) {}
const v11 = new F0();
function f12() {
    const o14 = {
        __proto__: f12,
        [f12]: -410.8373818683839,
        "c": f12,
    };
    return o14;
}
new Uint16Array(f12().c);
const v22 = [2.220446049250313e-16,4.276454155698374];
const v23 = [v22,v22,2.220446049250313e-16,v22];
const v24 = [2.220446049250313e-16,-409.5445341345936];
function f25(a26, a27, a28) {
    a28--;
    const o34 = {
        "h": a28,
        "a": a27,
        [a28](a31, a32, a33) {
        },
        "b": a28,
        1942: v24,
        "g": v24,
        ...v23,
    };
    return o34;
}
const v35 = f25(v23, -409.5445341345936, -409.5445341345936);
v35.b;
const o38 = {
    __proto__: v35,
    126: undefined,
    ...v35,
};
o38.f = o38;
class C39 extends F0 {
    [v9];
    g;
    static {
        this.d = this;
        try {
            F0 &= F0;
        } catch(e41) {
        }
    }
    f = v4;
    static get a() {
        [this,this];
        [this,v4];
        [v9];
        [-2.775006358294279,415107.076926725,0.3008616043322886,-4.0,486156.59821420535,0.19903748333915627,-2.2250738585072014e-308,200256.17927956698];
        [1.7976931348623157e+308,1.6134429050007646e+308,-1000000.0,-277.35385020194485,0.7036758121172078,-2.220446049250313e-16,327279.8401523591,2.220446049250313e-16,1.0203912425277007e+308,541947.0305862708];
        [559.044559780747,-1000000000000.0,-1.060814059720605e+308,4.36727978354992,3.42110072516243e+307,2.0];
        return v4;
    }
}
const v49 = new C39();
try { v49.constructor(); } catch (e) {}
new C39();
new C39();
new Set();
F0++;
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    a58.arguments;
}
F56.length = F56;
const v64 = new Int16Array();
v64.__proto__;
("length")[2];
class C70 {
    toString(a72, a73, a74) {
        C70();
        super.b = -2;
    }
}
const v77 = [758472092,9007199254740992,9007199254740992];
try { v77.reverse(); } catch (e) {}
const v80 = ([7992,4294967295,2147483649,2,9,-6,-65536,536870912])[2];
const v81 = [-65537,59335,-9223372036854775807];
v81.g = v81;
0.8270476620027499 / 0.8270476620027499;
const v85 = 1646732670 * 1646732670;
function f86() {
    return v80;
}
const o90 = {
    "maxByteLength": 2921,
};
const v92 = new ArrayBuffer(1738, o90);
new Int32Array(v92);
v85 !== v85;
let v96 = -256n;
v96--;
const t107 = (-13545).constructor;
const v100 = new t107();
const v101 = v100?.__lookupGetter__;
try { new v101(v100); } catch (e) {}
v100.toLocaleString();
const t112 = [-10458,-2,2147483648];
t112[512] = 512;
const v107 = ("65535").match();
try { v107.with(v11, v11); } catch (e) {}
