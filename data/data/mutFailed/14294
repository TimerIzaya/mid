const v2 = new Float32Array(5);
const v5 = new Float64Array(128);
new Uint8Array(1);
class C12 extends Float64Array {
    [v5];
    constructor(a14, a15, a16, a17) {
        super(128, a17);
        const o22 = {
            "execution": "async",
            "type": C12,
        };
        gc(o22);
        let v28 = +(a17++);
        v28 >> v28;
        Math.asin(a17);
        v28--;
        ++v28;
    }
}
const v33 = new C12(5, Float64Array, 1, 128);
new C12(5, "string", 1, 1);
new C12(v33, "function", 5, 1);
v2 ^ "function";
const t22 = "function";
t22[Float64Array] = v33;
new Map();
new Int16Array(12);
function f47(a48, a49, a50) {
}
const v51 = f47(Float64Array, 512, 14);
class C54 {
    static {
        for (let v56 = 0; v56 < 25; v56++) {
            const v57 = [601759695];
            const v58 = [1073741824,1073741823,1376142744,1073741825];
            for (let v59 = 0; v59 < 5; v59++) {
                try { new v51(); } catch (e) {}
                function f63() {
                    return this;
                }
                const v65 = new v57();
                const v68 = BigUint64Array * 536870887;
                const v69 = v68 - v68;
                v56 ** v68;
                Number.isNaN(v69);
                const v74 = /ha$\P{Decimal_Number}+/vdisy.constructor;
                v74.$7;
                function f76(a77, a78) {
                }
                %VerifyType("function");
                Date[v74] = f47;
                [-892604085,-1359639310,-4201,8,536870912,5];
                [2735,-268435456,2147483648,4294967295,4096,7,-536870912,-1763008061];
                [-1419001300,-128,-6,-4294967295,3,9,-2,65537,13];
                f76();
                v65.buffer.__defineGetter__;
                Object.defineProperty(4396, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f63);
                try { v58["find"](..."find", undefined, ...v57); } catch (e) {}
                const o87 = {
                };
            }
        }
    }
}
