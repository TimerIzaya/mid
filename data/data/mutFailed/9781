function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = undefined;
    } catch(e8) {
    }
}
const v9 = new F4(1000.0, Infinity);
new F4(1000.0, Infinity);
const v11 = new F4(Infinity, 1.7976931348623157e+308);
class C15 {
    get c() {
        let v20;
        try { v20 = v11.p(65537); } catch (e) {}
        return v20;
    }
    4;
    static #e;
    static #valueOf(a22, a23, a24, a25) {
        try {
            a24.g = v9;
        } catch(e26) {
        }
        class C28 {
        }
        super(-4.0);
        const v33 = new BigUint64Array(10);
        for (const v35 in v33) {
            new Float64Array(2147483647);
        }
        const o39 = {
            "execution": a24,
            "type": "minor",
        };
        return gc(o39);
    }
}
new C15();
new C15();
new C15();
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v50 = 0; v50 < 25; v50++) {
    function f51() {
        const o66 = {
            toString(a56, a57) {
                try {
                    super.getMinutes();
                } catch(e59) {
                }
                return "object";
            },
            "b": "boolean",
            "g": "object",
            128: "boolean",
            "a": 1000000000000.0,
            "c": "boolean",
            __proto__: "boolean",
            "h": 1000000000000.0,
            n(a61, a62) {
                return v50;
            },
            valueOf(a64, a65) {
            },
        };
        return o66;
    }
    const v67 = f51();
    const v68 = f51();
    const v69 = f51();
    const v70 = v69[128];
    function F72(a74) {
        if (!new.target) { throw 'must be called with new'; }
        a74[128] = a74;
        try {
            this.f = a74;
        } catch(e75) {
            class C77 {
                #m(a79, a80) {
                    function f81() {
                        return a80;
                    }
                    super[a80] = "f";
                    %VerifyType(a80);
                    return f81;
                }
                static c;
            }
            new C77();
        }
        try {
            class C84 {
                static 9 = 9.187362692894364;
            }
            const o87 = {
                set g(a86) {
                },
            };
        } catch(e88) {
        }
        try {
            let v89 = [-883936.0401947303,9.41640124927378e+307,0.060305085001335246];
            v89 /= v89;
            const v90 = this.constructor;
            v90.d = v90;
            const v91 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            for (let v92 = 0; v92 < 5; v92++) {
                function f93() {
                    try {
                        v91.forEach();
                    } catch(e95) {
                        e95.constructor().constructor.stackTraceLimit;
                    }
                    return v92;
                }
                f93.call();
                %OptimizeFunctionOnNextCall(f93);
            }
        } catch(e100) {
        }
    }
    F45.e = F72;
    new F72(v68);
    new F72(v69);
    const v103 = new F72(v68);
    function f104(a105, a106, a107) {
        const o114 = {
            get a() {
                const o112 = {
                    "execution": "async",
                    "type": "major",
                };
                gc(o112);
            },
        };
        o114[2074850330] = o114;
        Math.asin(2.220446049250313e-16);
        for (let i120 = 0, i121 = 10; i120 < i121; i120++) {
        }
        return o114;
    }
    const v128 = f104(v69, v69, v67);
    f104(v128, f104(v68, v68, v128), v68);
    function F131(a133, a134, a135) {
        if (!new.target) { throw 'must be called with new'; }
        const v136 = this?.constructor;
        try { new v136(F131, F131, f51); } catch (e) {}
        a134.g = a134;
        try {
            this.d = a135;
        } catch(e138) {
        }
        try {
        } catch(e139) {
        }
    }
    const v140 = new F131(v69, v67, v103);
    new F131(v69, v128, v140);
    try { v70.bind(F72); } catch (e) {}
    function f144() {
        return f144;
    }
    const v145 = [601759695];
    const v146 = [1073741824,1073741823,1376142744,1073741825];
    function f148(a149, a150, a151, a152) {
        function f154() {
            return a150;
        }
        let v155;
        try { v155 = new f154(); } catch (e) {}
        f144();
        const v158 = new Int8Array();
        const v160 = new Uint32Array();
        v160.c = v160;
        const v161 = [v160];
        const v164 = BigUint64Array * 536870887;
        v164 ** v164;
        ~Infinity;
        const v169 = [Uint32Array];
        const o170 = {
            "arguments": v169,
            "type": "function",
        };
        function f171(a172, a173) {
            return f154;
        }
        f171();
        const v175 = v158.buffer;
        try { v155.slice(F45, F45); } catch (e) {}
        Object.defineProperty(v175, "constructor", { writable: true, configurable: true, value: Date });
        const v178 = new Int8Array();
        try { v178.lastIndexOf(-1073741824); } catch (e) {}
        v175.slice(2147483648);
        %OptimizeFunctionOnNextCall(f154);
        try { v161["find"](..."find", a152, ...v145, ...v146, ...522675525n); } catch (e) {}
        Symbol(a152);
        const o185 = {
        };
        C15 <= a151;
        return arguments;
    }
    for (let v187 = 0; v187 < 5; v187++) {
        f148(f144, v187, v187, v146);
    }
}
