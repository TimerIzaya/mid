[[5n,10n,10n],-4n,-4n,5n,-4n];
[-4n,-4n,10n,10n];
new Int32Array(2001);
new Uint32Array(3897);
new BigUint64Array(8);
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1489843090;
    } catch(e21) {
    }
}
const v22 = new F18();
new F18();
const v24 = new F18();
v24.g = v24;
function F25(a27) {
    if (!new.target) { throw 'must be called with new'; }
    a27.g;
    try {
        this.a = v22;
    } catch(e29) {
    }
}
let v30;
try { v30 = new F25(F25); } catch (e) {}
const v31 = new F25(v24);
v31.a = v31;
const v32 = new F25(v24);
v32.a = v32;
const v33 = [-1335654396,-2,-9,-4294967295,-15,-16];
try { v33.reduce(v33); } catch (e) {}
const v35 = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
const o38 = {
    "maxByteLength": 5,
};
const v40 = new SharedArrayBuffer(5, o38);
new BigInt64Array(v40);
let [,...v43] = v35;
try { v30.unshift(F25); } catch (e) {}
try { ("-268435456").codePointAt(F18); } catch (e) {}
try { (10n)["-268435456"](); } catch (e) {}
[2147483647,4294967296,-7,-277691152,-616812028,-788936298];
[38857,-4294967296,1073741824,-4096,33257,2];
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    const v56 = this.constructor;
    try { new v56("-268435456", a55); } catch (e) {}
    a54.prototype;
    a55.arguments = a55;
}
const v59 = new F52(F52, F52);
const v60 = v59?.toLocaleString;
try { new v60(); } catch (e) {}
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
function f63() {
    return 3.5885237423067196;
}
1042950492 >> 1042950492;
function f66(a67, a68) {
    return f66;
}
const v69 = f66(f66, f63);
class C70 extends f66 {
    constructor(a72, a73, a74) {
        super();
        const v75 = `
            try { a72(a74, v69); } catch (e) {}
        `;
        eval();
    }
}
