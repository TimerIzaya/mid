653429722 ^ 653429722;
let v6 = 8;
v6++;
const v8 = v6 >>> v6;
v8 + v8;
let v11 = 1502 >> 1502;
v11--;
const v14 = new Float32Array(1502);
129 << 129;
const v18 = new Uint32Array(129);
try { new Uint8Array(1502, v14, v8); } catch (e) {}
new Uint8Array(8);
for (let v26 = 0; v26 < 5; v26++) {
    v26 >>> v26;
    v26 ^ v26;
    function f29() {
        for (let [i33, i34] = (() => {
                10 < 10;
                return [0, 10];
            })();
            i33 < i34;
            (() => {
                const v38 = i33++;
                v38 & v38;
                v38 - v38;
                const v41 = i34--;
                ~(v41 + v41);
            })()) {
            -i33;
        }
        return f29;
    }
    BigUint64Array();
    %OptimizeFunctionOnNextCall(f29);
}
const v48 = new BigUint64Array(4);
let v49;
try { v49 = v48.reverse(); } catch (e) {}
v49[1];
function F51(a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    const v56 = this?.__defineGetter__;
    try { new v56(v11, a54); } catch (e) {}
    a53 <= a53;
}
const v59 = F51?.bind;
try { new v59(Uint8Array); } catch (e) {}
let v61;
try { v61 = new F51(v6, Uint32Array, "toStringTag"); } catch (e) {}
v61.e = v61;
const v62 = new F51(BigUint64Array, 4, 241);
const v63 = v62?.constructor;
try { new v63(8, v18, 8); } catch (e) {}
for (let v65 of v48) {
    v65 == v65;
    const v67 = v65--;
    v67 <= v67;
    const v69 = v65--;
    function f70(a71, a72) {
        a71.e = a71;
        a72.length = a72;
        return f70;
    }
    const v73 = f70(f70, f70);
    try { v69(Uint32Array, v73); } catch (e) {}
    Object.defineProperty(v62, 241, { enumerable: true, value: v65 });
}
