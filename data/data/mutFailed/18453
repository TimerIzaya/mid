class C3 {
    get b() {
        const o5 = {
            __proto__: this,
            5: -45355,
            "d": this,
        };
        return -3.0;
    }
    #toString(a7, a8) {
        a7 >>= 65535;
        delete this[-1];
        return 65535;
    }
}
new C3();
new C3();
const v12 = new C3();
[-65535,-536870912,-9223372036854775807,-51324,1860968494,2091744929,-55617];
[-7048,-15,-51904,2124992940,-21761,128,-1];
[0,-9223372036854775808,0,47353,-797481128,-9223372036854775807,-9007199254740991,-1669286711,536870888];
[7.598273490295501,4.0,-454792.4290031948,6.614196587203736,0.13708609549316653];
[-3.0,-2.2250738585072014e-308,2.0,2.220446049250313e-16,0.4984927768178047,-278736.25032817735,0.17878578171991544];
[-1000.0,-1000000000.0,-1.0,2.7565395252719824,-5.227602232247012e+307,1000000000.0,-2.220446049250313e-16];
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
}
const v24 = new F20("4294967297");
const v25 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Array(19793);
        const v32 = [[]];
        function f33(a34, a35) {
            try {
                Array(-1189550450);
            } catch(e38) {
            }
            return -45355;
        }
        v32.toString = f33;
        function f40(a41) {
            return Uint16Array;
            try {
                Array(-522555981);
            } catch(e44) {
            }
            return a41;
        }
        Uint16Array[Symbol.toPrimitive] = f40;
        v32 >= Uint16Array;
    } catch(e48) {
        v25.findLastIndex;
    }
}
new F26();
try { Set.bind(v24); } catch (e) {}
new Set();
1000 - 1000;
const v57 = new Uint8Array(1000);
const v61 = Array();
try { v61.findLast(v61); } catch (e) {}
const v65 = Array(1000);
function f66(a67) {
    function F69(a71) {
        if (!new.target) { throw 'must be called with new'; }
        const v72 = a71 ^ a71;
        v72 * v72;
        const v74 = this.constructor;
        v74.length = v74;
        try { new v74(3n); } catch (e) {}
    }
}
Object.defineProperty(v65, 1000, { writable: true, configurable: true, enumerable: true, set: f66 });
v65[708] = -45355;
let v76;
try { v76 = v65.push(1000); } catch (e) {}
const v77 = new BigUint64Array(257);
const v78 = Uint8Array in v77;
v78 && v78;
try {
    for (let v81 = 0; v81 < 100; v81++) {
        Array(v76);
    }
    v77.d = v57;
} catch(e83) {
}
const v86 = new Float32Array(4);
Object.defineProperty(v86, "valueOf", { configurable: true, value: Array });
v86[3] = v86;
~4096;
Object.defineProperty(Uint8Array, "e", { enumerable: true, value: v12 });
Uint8Array.name;
Uint8Array.e = Uint8Array;
Float32Array.constructor = Array;
const v93 = Float32Array?.constructor;
try { new v93(v65); } catch (e) {}
Float32Array.name?.toLocaleUpperCase;
function f98() {
    return f98;
}
let v99 = -2n;
v99--;
function f102() {
    return 536870887n;
}
try { f102(); } catch (e) {}
let v104;
try { v104 = f102(); } catch (e) {}
v104 * v104;
let v106 = 2;
v106++;
Map.prototype;
Uint8Array.prototype = Uint8Array;
function F113() {
    if (!new.target) { throw 'must be called with new'; }
    const v116 = Date();
    try { v116.small(); } catch (e) {}
    const v120 = Array(19793);
    v120[15600] = v76;
    for (const v121 of v120) {
    }
    try {
    } catch(e122) {
    }
}
const v123 = new F113();
const v124 = v123?.constructor;
try { new v124(); } catch (e) {}
function F126(a128, a129, a130) {
    if (!new.target) { throw 'must be called with new'; }
    for (let i133 = 0, i134 = 10;
        (() => {
            const v135 = i133 < i134;
            const v136 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
            try {
            } catch(e137) {
            }
            const v138 = v136.toSpliced();
            v138[3] = v138;
            return v135;
        })();
        ) {
    }
}
const v146 = Array(4087);
v146[1055] = v146;
v146[936] = Uint16Array;
for (const v147 of v146) {
}
class C148 {
    constructor(a150) {
        try {
        } catch(e151) {
        }
        try {
        } catch(e152) {
            class C153 extends Map {
            }
        }
        for (const v154 of "bigint") {
        }
    }
}
const v155 = C148?.toString;
try { new v155(); } catch (e) {}
class C157 extends C148 {
}
const o158 = {
};
