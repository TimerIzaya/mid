const v0 = [];
new Float64Array(144);
let v5 = 2.220446049250313e-16;
try { Float64Array["atan2"](v5, 30492, 30492); } catch (e) {}
function f8() {
    return Promise.reject(Promise);
}
new Int32Array(64);
new Float64Array(3426);
class C17 {
    constructor(a19, a20) {
    }
    d;
    static 57190432 = v0;
    /*
    constructor(a25, a26, a27) {
        const v28 = [4.0902151973711183e+307,-758.964951148866,1e-15,-5.261122784521454];
        const v29 = [-2.2250738585072014e-308,-3.0,1000000000.0,-6.987156890700151,4.0];
        function f31(a32, a33) {
            const o42 = {
                "a": v28,
                "d": a33,
                "type": "EV",
                p(a35, a36) {
                },
                get c() {
                    a33[1];
                    a32[v28];
                    return v29;
                },
            };
            const v43 = /\xf0\x9f\x92\xa9a*/us;
            function F46(a48, a49, a50, a51) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F46(v43, 1, -1263139894, F46);
            return o42;
        }
        if (this < this) {
            super[this];
            function F55(a57, a58) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v59 = /ea(?=a){1,10}a+/gdsy;
            v59.test(v59);
            for (let i64 = 0;
                i64 < 2;
                (() => {
                    const o71 = {
                        "arguments": arguments,
                    };
                })()) {
            }
        } else {
            /a\Wfoo(?<!bar)bazTm(x)(x)(x)\3ab|c+/guim;
            /\u0034[V2xyz{1,}\u0034*]*/vis;
            /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/vdms;
            function f76() {
                return f76;
            }
            const v80 = new BigUint64Array(1000);
            v80.indexOf(-3.0);
        }
    }
    */
    #e = Int32Array;
    [64];
}
let v83 = 0.0;
function f84(a85) {
    return a85;
}
try { ("atan2").match(f84); } catch (e) {}
class C87 {
    static g = 2.2250738585072014e-308;
    #c = v83;
    #e;
    static set a(a89) {
        v83 ^= 2.2250738585072014e-308;
        ({"b":v83,"c":a89,"g":v5,} = a89);
    }
    get f() {
        const v91 = v5 % v83;
        const v93 = Symbol.replace;
        2.2250738585072014e-308 || 2.2250738585072014e-308;
        try {
            v93.#e;
        } catch(e96) {
            return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            ([134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439]).length;
        }
        return v91;
    }
}
const v100 = new C87();
const v101 = new C87();
const v102 = [v101,v101,v100];
const v103 = [v101,v102];
const v104 = [2.2250738585072014e-308];
function F105(a107, a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    a108.prototype;
    try { a109.groupToMap(f84); } catch (e) {}
    this.a = a107;
    let v113 = 536870912;
    v113 = 210;
    function F114(a116, a117, a118) {
        if (!new.target) { throw 'must be called with new'; }
    }
    try {
        this.f = a109;
    } catch(e119) {
    }
}
const v120 = new F105(2.2250738585072014e-308, F105, v103);
v120.a = v120;
const v121 = new F105(v102, v120, v104);
v121.__proto__;
new C17(144, 3426, 64);
new C17(Int32Array, 144, 144);
new C17(v0, 3426, 3426);
const v128 = -25283n >> (-25283n && -25283n);
v128 | v128;
