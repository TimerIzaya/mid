function f0() {
    const o17 = {
        [-926136.4177981104]: -9007199254740991,
        [-9007199254740991]: -9007199254740991,
        "d": -2147483648,
        valueOf(a5, a6) {
            try {
                a5.__proto__ = a6;
            } catch(e7) {
            }
            const o8 = {
            };
            Symbol.iterator;
            new Uint8Array();
            try {
                this.fuck(1.3113057631007745, [1.3113057631007745,a5,-9007199254740991,-2147483648,a6], -2147483648, this);
            } catch(e16) {
            }
            return this;
        },
    };
    return o17;
}
const v18 = f0();
let v19 = f0();
f0();
function f21(a22) {
    const o28 = {
        toString(a24) {
            const v25 = a24 && v19;
            v25 & v25;
            this[v18] = a24;
            return v25[4096];
        },
        [a22]: v18,
        __proto__: v19,
        6: v19,
        "b": a22,
        "h": a22,
        "d": a22,
        ...v19,
    };
    return o28;
}
f21(f21(f21));
f21(v19);
[-1.7976931348623157e+308,-798.1331098461952,811.8312748615715,4.0,-211.22813935368572,4.0,-9.083275689592961e+307,107336.02559891925,-6.3701554209668165,3.1573834053196865];
[6.379420748309273e+307,-1.3683608657676444e+308,Infinity,-4.0];
[0.9762562845783719,5.0,-2.4663995677124584,0.0];
class C35 {
    static m(a37, a38, a39) {
        for (let [v40,v41] of a37) {
            v19--;
            v19 << ~v19;
            Math.cos(-3828);
        }
        return a37;
    }
    static #e;
}
new C35();
new C35();
new C35();
new Uint8ClampedArray(256);
new BigInt64Array(24);
const v60 = Uint8Array?.constructor;
try { new v60(Uint8ClampedArray); } catch (e) {}
new Uint8Array(4);
-9223372036854775807n | -9223372036854775807n;
-(-30326n);
function F71() {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this?.propertyIsEnumerable;
    try { new v73(-30326n); } catch (e) {}
    this.a = this;
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e77) {
    }
}
const v78 = new F71();
const v79 = new F71();
v79.length;
new F71();
62324 & 62324;
4294967295 * 4294967295;
function F87(a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a90(); } catch (e) {}
    a91.f = a91;
    try {
        this.b = a90;
    } catch(e93) {
    }
}
new F87(4294967295, F71, v78);
new F87(62324, F87, v79);
const v97 = Symbol.toPrimitive;
const o99 = {
    [v97]() {
    },
};
