try { ("g").italics(); } catch (e) {}
new Map();
function F10() {
    if (!new.target) { throw 'must be called with new'; }
}
class C12 {
}
const v14 = new C12();
v14[Symbol.toPrimitive] = Symbol;
v14.toString = Symbol;
const o21 = {
    [v14](a18, a19, a20) {
    },
};
-1000.0 >>> -1000.0;
function f25() {
    try {
        const o26 = {
        };
    } catch(e27) {
    }
    ArrayBuffer[Symbol.toPrimitive] = Symbol;
    try { new ArrayBuffer(9007199254740991); } catch (e) {}
    new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return f25;
}
const v33 = [636.0619904743435,-1.0,1.02880264701966e+308,-656.9941137140671,-29.012861243904695,1000000000000.0];
v33.constructor = Symbol;
v33["flat"]();
function f36() {
    const v39 = new Int32Array(1024);
    for (const v40 of v39) {
        new SharedArrayBuffer();
    }
}
%OptimizeFunctionOnNextCall(f25);
const v43 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
const o44 = {
    __proto__: v43,
};
(-1.4618325192014402e+308) ** -724330360;
f25();
