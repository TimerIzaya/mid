class C3 {
    static toString(a5) {
        try { a5(714.0676985057119, "byteOffset", "f", "f"); } catch (e) {}
        const v11 = Symbol.iterator;
        const o29 = {
            [v11]() {
                let v13 = 10;
                const o23 = {
                    next() {
                        v13--;
                        const v17 = this == 0;
                        const o18 = {
                            "done": v17,
                            "value": v13,
                        };
                        const v21 = new this();
                        const o22 = {
                            __proto__: Date,
                            [3.0]: v21,
                        };
                        return o18;
                    },
                };
                const v26 = new Float32Array(256);
                v26[5] ||= 6;
                return o23;
            },
            "h": 5.0,
            "execution": "byteOffset",
            get e() {
                return v11;
            },
        };
        return "object";
    }
}
const v30 = new C3();
const v31 = new v30();
const v32 = new C3();
/(HXa(?=bbb|bb)ca[a-z])/gudsy;
/[a{z}a(?=b)c(wa(?=b)*)*]/gds;
/\u0034J/uims;
try { (1).__defineSetter__(); } catch (e) {}
for (let v39 = 0; v39 < 25; v39++) {
    Math.cosh(v39);
}
new Uint8ClampedArray(2684);
new Uint32Array(129);
const v47 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
v47[4] = v47;
const v48 = /a\sc/gm;
function f49(a50) {
    const o53 = {
        n(a52) {
            return a52;
        },
        [a50]: a50,
    };
    return v31;
}
f49(v48);
f49();
new BigInt64Array(2);
const v59 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v60 = -4294967297n;
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = Array(19793);
    try { v65.reduce(); } catch (e) {}
    for (const v67 of v65) {
    }
    [[v65,v65]];
    ("function")[0];
    new Set();
    const v74 = [];
    v74.toSpliced();
    v74 >= Uint16Array;
}
v60--;
const v79 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v80 = [601759695];
const v81 = [1073741824,1073741823,1376142744,1073741825];
function f82(a83, a84, a85, a86) {
    function f87() {
        try { ("Vre").codePointAt(); } catch (e) {}
        let v90 = Float64Array;
        v90 = a84;
        b = v80;
        ("Vre").length;
        try {
            v81.forEach(a84);
        } catch(e93) {
        }
        const o104 = {
            "c": v60,
            "c": F61,
            valueOf(a95, a96) {
                return a95;
            },
            [v60](a98, a99, a100, a101) {
                eval();
            },
            "arguments": v59,
            256: a86,
        };
    }
    f87();
    function F106(a108, a109, a110, a111) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f113(a114) {
        return a114;
    }
    class C115 extends f113 {
        static [-1] = 8;
        static [a85];
        static 268435441;
    }
    %OptimizeFunctionOnNextCall(f87);
    return f82;
}
for (let v116 = 0; v116 < 5; v116++) {
    f82(v116, v32, v79, v116);
}
