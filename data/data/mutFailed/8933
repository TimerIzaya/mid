function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -9223372036854775808;
    } catch(e3) {
    }
    try {
        this.h = -9223372036854775808;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
function f7(a8) {
    a8 ||= F0;
    new Proxy(Uint8Array, v6);
    return a8;
}
v6.toString = f7;
const v12 = new F0();
v12[Symbol.toPrimitive] = f7;
function f15(a16) {
    a16[Symbol.toPrimitive] = f15;
    const o24 = {
        ...v6,
        "c": a16,
        "g": F0,
        [-1]: v5,
        [a16]: a16,
        256: a16,
        n(a20, a21) {
            const v22 = v12 <= a20;
            if (v22) {
                v6[v22] = a21;
            } else {
                v12 < v22;
            }
            return a20;
        },
    };
    return o24;
}
f15(v12);
f15(v5);
f15(v6);
new Uint8ClampedArray(6);
new Int32Array(10);
new Float64Array(128);
function f40() {
    return f40;
}
const v41 = /(?:a*)+q(?<a>.)/guds;
function f42(a43) {
    const v44 = a43.constructor;
    let v45;
    try { v45 = v44(a43, f40); } catch (e) {}
    const o47 = {
        get d() {
            return this;
        },
    };
    return v45;
}
for (let i50 = 0, i51 = 10; i50 < i51; i51--) {
    for (let v58 = 0; v58 < 50; v58++) {
        f42(v41);
    }
}
