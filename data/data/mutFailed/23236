const v0 = [-1,-4294967297,-191060958,2,1788206462,-13,-818421650];
const v1 = [5,902681894,-39283];
const v2 = [10,-1096656125,-1073741824,2147483647,64,-8];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a5;
    } catch(e6) {
    }
    try {
        this.f = v2;
    } catch(e7) {
    }
}
const v8 = new F3(v2);
new F3(v0);
const v10 = new F3(v1);
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a13.g = v0;
    } catch(e16) {
    }
    try {
        this.h = a14;
    } catch(e17) {
    }
}
const v18 = new F11(v2, v2, v1);
const v19 = new F11(v0, v1, F3);
new F11(v19, v2, v1);
const v21 = [v0,v18,v18];
const v23 = [v10,[F3,v10,v18],v21];
const v25 = [];
function f26() {
    const o28 = {
        p() {
            return f26;
        },
        [v25]: v25,
        "a": v8,
    };
    return v25;
}
const v29 = v23();
const v30 = f26();
const v31 = f26();
[65536];
[-267,-4,-32045,-4];
[14,268435441,-9223372036854775807];
new Float64Array(14);
const v40 = new Uint8ClampedArray(0);
const v43 = new BigInt64Array(218);
let v44;
try { v44 = v43.sort(f26); } catch (e) {}
let v45;
try { v45 = v44(v30, v44, v44, ...v40, v29, ...v29); } catch (e) {}
try {
    v30.valueOf = v45;
} catch(e46) {
}
v8[v45];
const v48 = (a49, a50) => {
    return v31 * a50;
};
