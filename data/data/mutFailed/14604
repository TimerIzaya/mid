let v4 = -665845797;
v4--;
11664 * 11664;
let v9;
try { v9 = ("stringify").replaceAll(v4, -1.675759971306812e+308); } catch (e) {}
new Int8Array(4);
2689 >> 2689;
new Uint16Array(2689);
function f21() {
    return Int8Array;
}
function f22(a23) {
    Array(19793);
}
Object.defineProperty(Float64Array, "h", { writable: true, configurable: true, get: f21, set: f22 });
new Float64Array(84);
try { ("symbol").blink(); } catch (e) {}
try { Int16Array.from("valueOf"); } catch (e) {}
const v32 = [Int16Array,Int16Array,Int16Array,Int16Array];
const v33 = [v32];
v33[0];
let v36;
try { v36 = Map.call(2.220446049250313e-16); } catch (e) {}
class C37 extends Map {
}
try { new C37(); } catch (e) {}
const v39 = new C37();
const v40 = new C37(v33);
try { v40.set(Uint16Array, Uint16Array); } catch (e) {}
const v42 = new C37(v40);
const v46 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f47() {
    return f21;
}
function f48(a49) {
    a49 % 4096;
}
Object.defineProperty(v46, "valueOf", { writable: true, configurable: true, get: f47, set: f48 });
const v52 = new Uint32Array();
const v54 = [601759695];
try { v54.reverse(); } catch (e) {}
const v56 = [1073741824,1073741823,1376142744,1073741825];
function f57() {
    for (let v58 = 0; v58 < 32; v58++) {
        v36["p" + v58] = v58;
    }
    return v9;
}
v56[Symbol.toPrimitive] = f57;
try { v56.sort(-1.468374381037114e+308); } catch (e) {}
function f65(a66, a67, a68, a69) {
    try { a66.toLocaleString(); } catch (e) {}
    const v71 = a66?.constructor;
    v71.toString = f21;
    try { v71(); } catch (e) {}
    try { v71(); } catch (e) {}
    const v75 = arguments.length;
    Object.defineProperty(v39, "e", { configurable: true, enumerable: true, value: f65 });
    try { ("entries").trimLeft(); } catch (e) {}
    const v78 = v40["entries"](a68, ...v42, BigUint64Array, ..."entries", a67, v75);
    v78[Symbol.match] = f47;
    Float32Array.e = v75;
    Float32Array.e = Float32Array;
    new Float32Array(5, 5, v75);
    const t64 = "e";
    t64[0] = "e";
    class C84 {
    }
    class C85 {
    }
    const v87 = Symbol.toStringTag;
    v40[v87] = v87;
    function f88() {
        let v90;
        try { v90 = ("Vre").charAt(4096); } catch (e) {}
        try { v90.bold(); } catch (e) {}
        let v92;
        try { v92 = v90.lastIndexOf("Vre", a66); } catch (e) {}
        let v93;
        try { v93 = ("Vre").codePointAt(v46); } catch (e) {}
        v93++;
        v93 - v93;
        v93 ^ v93;
        let v97 = Float64Array;
        v97.h = v92;
        v97.h = v97;
        v97 = a67;
        let v98 = v46.length;
        const v99 = v98++;
        v99 - v99;
        try {
            v56.forEach(a67);
        } catch(e102) {
            e102.stack = e102;
        }
        const o120 = {
            268435439: v54,
            ..."e",
            m(a104) {
                return C85;
            },
            "c": -4294967297n,
            "EPSILON": v54,
            valueOf(a106, a107) {
                return Uint32Array;
            },
            1073741824: v52,
            "arguments": v32,
            get h() {
                return v90;
            },
            [v56](a110, a111, a112) {
            },
            [-4294967297n](a114, a115, a116, a117) {
                eval();
            },
            "arguments": 5,
        };
        return Int16Array;
    }
    f88[Symbol.toPrimitive] = f88;
    const v123 = f88?.apply;
    try { new v123(v78, "e"); } catch (e) {}
    f88();
    const v127 = Array();
    let v128;
    try { v128 = v127.findLast(f65); } catch (e) {}
    v127.unshift("entries", v78, "entries", v128);
    let v131;
    try { v131 = Int8Array.of(); } catch (e) {}
    let v132;
    try { v132 = v131.join(v71); } catch (e) {}
    try { v132.includes(v78); } catch (e) {}
    const v134 = new Int8Array(v54);
    v134.c = v134;
    const v135 = v134.buffer;
    v135.constructor = Symbol;
    const v136 = v135.slice(v71);
    try { Int32Array(v136, arguments, -4294967297n); } catch (e) {}
    function f139(a140, a141, a142, a143) {
        return C84;
    }
    const v144 = new Int32Array();
    const v145 = v144[3];
    v145 + v145;
    for (let v147 = 0; v147 < 5; v147++) {
    }
    try { ("find").indexOf(f88); } catch (e) {}
    try { v56["find"](..."find", a69, ...v54, ...v56, ...522675525n); } catch (e) {}
    return v144;
}
for (let v151 = 0; v151 < 10; v151++) {
    f65(v52);
}
%OptimizeFunctionOnNextCall(f65);
f65();
