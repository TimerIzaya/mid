const v0 = [10,536870912,-908723154,-1024,3154,16,4];
const v1 = [-65537,-12,-2147483649,5,10032,17229,-2,-39674];
const v2 = [2,536870888];
const v7 = [Reflect,Reflect,Reflect];
const v8 = Reflect.construct(-0.2499639502034796, v7, 0.6594118996517957);
try { v8(v1, 0.6594118996517957, v0); } catch (e) {}
try { v8.getMonth(v7); } catch (e) {}
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v0.g = 0.6594118996517957;
        let [,...v15] = v2;
        v0[a13] = this;
        this[3902997727];
        return v7;
        new Date();
    } catch(e19) {
    }
    try {
        v2.f = v1;
    } catch(e20) {
    }
}
const v21 = new F11(v2, 0.6594118996517957);
const v22 = new F11(v21, v2);
new F11(v22, 172.87142829897243);
new BigInt64Array(4);
new Uint32Array(913);
new BigInt64Array(9);
new Int8Array(2300);
new Int32Array(7);
new BigUint64Array(6);
const v43 = new Float32Array();
for (let v44 = 0; v44 < 25; v44++) {
    function f45(a46, a47, a48, a49) {
        a46[1];
        a47--;
        v44[0] = a46;
        v44 <= a47;
        arguments[1] = arguments;
        const v54 = arguments?.__lookupGetter__;
        try { v54.constructor(v43, v0, v44, f45); } catch (e) {}
        try {
        const t0 = 6;
        t0(v54, f45, a47);
        } catch (e) {}
        return v43;
    }
    for (let v57 = 0; v57 < 10; v57++) {
        f45(v43);
    }
}
