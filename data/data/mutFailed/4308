Math.cos(Math);
Math.sup();
const v6 = [3.0];
for (let v7 = 0; v7 < 10; v7++) {
    function F8(a10, a11, a12) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v13 = new F8(-725.0347156854516);
    new F8(v13, v6);
}
new Date();
[127,-1493985385,268435440,16,574217464,7,9];
function f19(a20, a21, a22) {
    new Date();
    class C24 {
    }
    const v25 = [1073741824,1073741823,1376142744,1073741825];
    function f26(a27, a28) {
    }
    try { f26(); } catch (e) {}
    f26(v25, C24);
    a20.fill();
    return a21;
}
try { ("string").trimStart(); } catch (e) {}
class C36 {
    static 7;
    constructor(a38, a39, a40) {
    }
    /*
    constructor(a42, a43) {
        const v44 = this.constructor;
        try { new v44("string"); } catch (e) {}
        function f46(a47, a48) {
            return a48[3];
        }
        f46(a43, a42);
        f46("string", "string");
    }
    */
    static [-1] = "string";
    /*
    constructor(a53, a54) {
        function f55(a56) {
            function f58(a59) {
                a59 & a59;
            }
            this.onmessage = f58;
            this.__proto__;
        }
        const v66 = [f55];
        const o67 = {
            "arguments": v66,
            "type": "function",
        };
        new Worker(f55, o67);
    }
    */
    #n(a70) {
        a70 = this;
        a70.e >>>= -35417;
        const o74 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o74);
        return this;
    }
}
const v76 = new C36();
const v77 = v76?.constructor;
try { new v77(); } catch (e) {}
[-831909253,-16,-536870912];
[1932603323,9007199254740992,1,274193243,-9007199254740990];
[-4294967296,48673,1073741824,10,2147483647,257,2002311413,-32052,255,2147483648];
const v82 = [3,9223372036854775807,54600,747830232,268435440,-9007199254740992,-2,1499636004,-13181];
[-9007199254740992,2147483649,-65537];
function f84() {
    with (undefined) {
    }
    function f88() {
        return -2.220446049250313e-16;
    }
    return f84;
}
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
[WeakSet,WeakSet,WeakSet,WeakSet];
class C94 extends SharedArrayBuffer {
}
new C94();
for (let v96 = 0; v96 < 5; v96++) {
    function f98() {
        const v102 = (a103, a104, a105) => {
            try { ("function")["toUpperCase"](); } catch (e) {}
            "Vre" ^ a103;
            return a103;
        };
        ("Vre").codePointAt("Vre");
        return v102;
        const v111 = new Uint16Array();
        v111.lastIndexOf();
        const v113 = v82.length;
        const v114 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.toPrimitive;
        const o122 = {
            toString(a118, a119) {
                const v120 = undefined && a118;
                a118 *= a118;
                return v120 <= v114;
            },
        };
        class C123 {
        }
        const o133 = {
            [v113](a125) {
            },
            [-4294967297n](a127, a128, a129, a130) {
                eval();
            },
        };
        function f134(a135, a136, a137, a138) {
            return a137;
        }
        return v96;
    }
    f98();
    %OptimizeFunctionOnNextCall(f98);
}
