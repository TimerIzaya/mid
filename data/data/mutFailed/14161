const v0 = [];
class C1 {
    #d;
}
const v3 = ("function").length;
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try { a7.b(); } catch (e) {}
    try { a6.valueOf(); } catch (e) {}
    const v10 = this?.constructor;
    try { new v10(a6, a6); } catch (e) {}
    new Uint16Array(v3);
}
class C14 {
    [v0];
    static #n() {
        let v16;
        try { v16 = new v0(v0, v0, v0, v0); } catch (e) {}
        let v17;
        try { v17 = v16(v16, this, v0, v16); } catch (e) {}
        new BigInt64Array();
        const v22 = ["db",6];
        let v23;
        try { v23 = v0.splice(v17); } catch (e) {}
        super.d = v23;
        v0 * v0;
        const o33 = {
            "maxByteLength": v3,
            "c": v22,
            set d(a29) {
                for (let v30 = 0; v30 < 5; v30++) {
                }
                this["cos"]();
            },
            "execution": "sync",
            "type": "minor",
        };
        return gc(o33);
    }
}
const v35 = new C14();
const v36 = new C14();
const v37 = new C14();
new Date();
function f42(a43, a44, a45, a46) {
    for (let v47 = 0; v47 < 25; v47++) {
    }
    let v48 = Date || 6.326915942338088e+307;
    !Date;
    v48--;
}
[v35,C14,[v37,v37,v37]];
[v37,v37,v36];
const v58 = new Int8Array(v3);
const t54 = v58[14n];
t54.__proto__ = v58;
[-733322572,-1008538186,-452443964,-9007199254740990];
[16027,-65537,808318465];
[1073741823];
function f64() {
    for (let v65 = 0; v65 < 5; v65++) {
        v65 & v65;
    }
    try {
        f64();
    } catch(e68) {
    }
    return f64;
}
f64();
