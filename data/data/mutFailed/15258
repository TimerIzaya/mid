for (let v1 = 0; v1 < 5; v1++) {
    function f2() {
        try { ("Vre").fontcolor("Vre"); } catch (e) {}
        let v5 = ("Vre").codePointAt(v1);
        const v7 = v5 * v5--;
        v7 >> v7;
        const v9 = v7 / v7;
        v9 ^ v9;
        return f2;
    }
    f2();
    %OptimizeFunctionOnNextCall(f2);
}
9007199254740991 / 9007199254740991;
1 >>> 1;
5n != 5n;
class C25 {
    static #a = 5n;
    toString(a27) {
        super[this];
    }
    static #e;
    static #m(a30) {
    }
    [3n];
    static c = 3n;
}
const v31 = new C25();
v31[3] = v31;
const v32 = new C25();
v32[3];
const v34 = new C25();
v34[3];
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v42 = 0; v42 < 5; v42++) {
        function f43() {
            for (let [i47, i48] = (() => {
                    [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
                    return [0, 10];
                })();
                i47 < i47;
                ) {
            }
            return f43;
        }
        f43();
        %OptimizeFunctionOnNextCall(f43);
    }
    this.e = a41;
    this.c = a41;
}
const v55 = new F36(41372n, v34, v31, v34);
const v56 = new F36(v34, v34, v31, v34);
const v57 = new F36(v34, v32, 41372n, v55);
class C58 {
    a = v56;
    static #c;
    static #e = C25;
    static [v34];
    h = v57;
    #f;
    6 = v55;
}
try { new C58(); } catch (e) {}
const v60 = new C58();
const v63 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v64 = [601759695];
const v66 = [];
const v67 = [1073741824,1073741823,1376142744,1073741825];
function f69(a70, a71, a72, a73) {
    function f75() {
        const t72 = "Vre";
        t72[2] = "Vre";
        -4294967295 << -4294967295;
        -268435456 % -268435456;
        const o100 = {
            "c": -4294967297n,
            "arguments": v64,
            [v66]: v60,
            "h": "Vre",
            ...-4294967295,
            "c": -4294967295,
            [522675525n](a82, a83) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v64,
            valueOf(a85, a86) {
                return a72;
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v63,
            ...v64,
            "type": "Vre",
            ..."Vre",
            valueOf(a88, a89) {
                return a70;
            },
            get d() {
                Symbol.toPrimitive;
                const o93 = {
                };
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a95, a96, a97) {
                return a70;
            },
            m(a99) {
                return a99;
            },
            "execution": "UHH",
            "execution": "UHH",
            5: -4294967295,
            6: -268435456,
        };
    }
    f75();
    const v103 = new Int8Array();
    const v104 = v103.buffer;
    2147483648 / 2147483648;
    v104.slice(2147483648);
    %OptimizeFunctionOnNextCall(f75);
    try { v67["find"](..."find", a73, ...v64, ...v67, ...522675525n); } catch (e) {}
}
for (let v110 = 0; v110 < 5; v110++) {
    f69();
    Reflect.construct(Int8Array, []);
    function F117() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C119 {
        constructor(a121, a122, a123) {
            a122.constructor = gc;
            class C125 extends a122.constructor {
            }
            new C125();
        }
    }
    new C119(F117, C119);
}
Int32Array.prototype;
new Int32Array(1);
let v130 = 9;
v130--;
new Int8Array(v130);
const v135 = 127 | 127;
v135 >> v135;
try { new Uint8Array(Uint8Array, "UHH", C25); } catch (e) {}
const v139 = new Uint8Array(127);
try { v139.fill(-128); } catch (e) {}
for (let v141 = 0; v141 < 25; v141++) {
    v141 + v141;
}
try { Math.round(41372n); } catch (e) {}
Math.LOG10E = Math;
