const v5 = new Uint8ClampedArray(3892);
new Uint16Array(2126);
new Int8Array(10);
const v15 = 536870888 / 536870888;
const v17 = new Set();
try {
    v5.e = v15;
} catch(e18) {
    for (let [v19,v20] of v15) {
        class C21 {
        }
        const v22 = new C21();
        const v23 = v22.g;
        try {
            v23.length = 1;
        } catch(e25) {
        }
        try {
            v17.values();
        } catch(e27) {
        }
    }
}
new Float64Array(65536, 65536, 65536);
function f29() {
    return f29;
}
for (let [i41, i42] = (() => {
        new BigInt64Array();
        ("D")[0];
        const v35 = [1868255996,1,2,9007199254740992];
        try { v35.includes(undefined, -4934n); } catch (e) {}
        return [0, 10];
    })();
    (() => {
        const v43 = i41 < i42;
        class C44 {
        }
        const t3 = -31643n;
        const v45 = new t3();
        v45.toExponential(C44);
        class C47 {
            static {
                const v49 = super[this];
                try { v49.join(C47, C47, v49); } catch (e) {}
            }
        }
        class C51 extends Date {
        }
        return v43;
    })();
    i41++) {
}
class C62 {
    static #valueOf(a64, a65, a66) {
    }
}
