function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 4;
        this[this] = this;
        this[F0] = F0;
    } catch(e6) {
    }
}
const v7 = new F0();
const v8 = new F0();
const v9 = new F0();
function f10() {
    function f11(a12, a13) {
        return v9.valueOf().constructor;
    }
    return f11;
}
Object.defineProperty(v9, "toString", { enumerable: true, get: f10 });
class C16 {
    get d() {
        const v19 = Symbol.iterator;
        const o28 = {
            [v19]() {
                let v21 = 10;
                const o27 = {
                    next() {
                        v21--;
                        const v25 = v21 == 0;
                        const o26 = {
                            "done": v25,
                            "value": v21,
                        };
                        return o26;
                    },
                };
                return o27;
            },
        };
        return C16;
    }
    static #d;
    g = F0;
    static #a;
    a = F0;
    constructor(a30) {
        this.toString = f10;
        const o31 = {
            __proto__: this,
            15: v9,
        };
        function f32() {
            return f10;
        }
        function f33(a34) {
            Array(4087);
        }
        Object.defineProperty(o31, Symbol.toPrimitive, { writable: true, get: f32, set: f33 });
        const v40 = super[o31];
        try {
            super.getOwnPropertySymbols(a30, F0, o31, v40, this);
        } catch(e42) {
        }
    }
}
const v43 = new C16(v8);
new C16(v7);
const v45 = new C16(v9);
function f47(a48, a49, a50, a51) {
    function f52() {
        v43 ^ -4017;
        return v9?.constructor;
    }
    a50[Symbol.toPrimitive] = f52;
    a50 >>>= a50;
    return a48;
}
f47(v7, C16, v9, v45);
new Int8Array(3);
new Int16Array(127);
new Uint16Array(4096);
Symbol.replace;
function F73() {
    if (!new.target) { throw 'must be called with new'; }
}
new F73();
new F73();
