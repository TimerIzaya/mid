function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -18632;
    } catch(e3) {
    }
}
new F0();
new F0();
const v6 = new F0();
v6.g;
const v10 = -Infinity;
v10 - v10;
-10n << -10n;
let v16 = 65535n;
const v17 = v16--;
try { Int32Array.of(); } catch (e) {}
new Int32Array(1206);
const v25 = new Int8Array(7);
new Uint32Array(v25);
new BigUint64Array(656);
const t21 = 127;
t21[2] = v17;
const o33 = {
    "maxByteLength": 536870912,
};
const v35 = new ArrayBuffer(396, o33);
new BigUint64Array(v35);
try { new Uint8ClampedArray(4294967295n, 4294967295n, 4294967295n); } catch (e) {}
new Uint8ClampedArray(127);
function f42(a43) {
}
["P61J","P61J","P61J","P61J","P61J"];
const o47 = {
    "type": "function",
};
new Worker(f42, o47);
new Array(92);
const v5 = new Int8Array(485);
3666 >>> 3666;
3666 - 3666;
try { new BigUint64Array(Int8Array, Int8Array, 3666); } catch (e) {}
const v11 = BigUint64Array.length;
new BigUint64Array(3666);
try { BigInt64Array.bind(14); } catch (e) {}
const v16 = new BigInt64Array(14);
const v17 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
try { v17.groupToMap(v11); } catch (e) {}
const v19 = [-2,-391505046,1239387087,-37770,536870888,8,-9007199254740991,-16204,-65536,3];
const v20 = [-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456];
try { v20.reduceRight(v20); } catch (e) {}
let v22;
try { v22 = v20.push(v5); } catch (e) {}
v22 | v22;
let v26;
try { v26 = ("boolean").toLocaleLowerCase(); } catch (e) {}
try { v26.fixed(); } catch (e) {}
class C29 {
    static c;
    static #m(a31) {
        try {
            this.valueOf = a31;
        } catch(e32) {
        }
        for (let v33 = 0; v33 < 32; v33++) {
            const t28 = "h";
            t28["p" + v33] = v33;
        }
        return this;
    }
    static 4;
    static 8 = -844856491;
}
try { new C29(); } catch (e) {}
const v37 = new C29();
const v38 = v37?.constructor;
try { new v38(); } catch (e) {}
const v40 = new C29();
const v41 = v40?.__lookupGetter__;
try { new v41(3666); } catch (e) {}
const v43 = v40?.__lookupGetter__;
v43.e = v43;
try { new v43(v16); } catch (e) {}
const v45 = new C29();
const v46 = v45?.constructor;
try { new v46(); } catch (e) {}
try { new v46(); } catch (e) {}
const v49 = [-5,-65535,2269];
try { v49.keys(); } catch (e) {}
v49[1];
const v52 = [-61034,4,30207,-40010,9007199254740991];
let v53;
try { v53 = v52.copyWithin(v52, v19); } catch (e) {}
v53.length = v53;
new Uint8Array(256);
let v57 = 16;
v57--;
new Uint16Array(v57);
const v62 = 255 / 255;
v62 >>> v62;
new Int32Array(255);
function f66(a67, a68, a69) {
    try {
    } catch(e70) {
    }
}
f66.caller;
