const v0 = [];
[-11127,-1355288134,1768968710,-12,-4294967295,28873,64,-7,-19179,49710];
[8,1073741825,0,2147483648,8,268435456,25051,65536,-1347059872];
const v9 = [4096,-24402,-377611864,16,-10,268435440,-2,301919140,-1571506606];
["65535",["string","dotAll",[v9,v9,v0,"dotAll"]]];
new Array(5);
BigInt64Array.BYTES_PER_ELEMENT;
const v22 = new BigInt64Array(257);
try { v22.join(64); } catch (e) {}
257 != 1590;
new BigInt64Array(1590);
Reflect.name = Reflect;
new Reflect(9);
536870888 / 536870888;
function f35() {
    return -2147483648;
}
function F36(a38) {
    if (!new.target) { throw 'must be called with new'; }
    function f39() {
        return f35;
    }
    function f40(a41) {
        a41?.[16];
    }
    Object.defineProperty(this, "constructor", { writable: true, enumerable: true, get: f39, set: f40 });
    const v43 = this?.source;
    try { new v43(a38); } catch (e) {}
    try {
        this.f = 145253519;
    } catch(e45) {
    }
}
new F36();
10000n ^ 10000n;
Int8Array.d = 257;
Int8Array.d = Int8Array;
const o52 = {
    "execution": "async",
};
o52.execution;
gc(o52);
