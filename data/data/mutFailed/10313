const v0 = [-1.7976931348623157e+308,5.072405040967226,-7.1381519462314325,7.61264686808237e+307,2.220446049250313e-16,1000000000.0,183882.84210859425];
const v1 = [-123.77166742013742,-9.733024688251398,1000000000.0,0.1058809815391748,-738.9553729483918,1000000.0];
const v2 = [-Infinity,8.816847827783593e+307,6.514691402805153e+306,-3.0,-468911.29507157987,0.7161400296580227,-5.887314275724713,733743.5437105456,1.2759669401455919e+308];
class C3 {
    static set f(a5) {
        try {
            v2.fill(v0, this);
        } catch(e8) {
        }
        a5[3018440330] <<= a5;
        return this;
    }
    constructor(a10) {
        const v11 = this?.constructor;
        try { new v11(v0); } catch (e) {}
        v0.__proto__;
        const v14 = v2 > v1;
        v14 || v14;
        (v14 ? v2 : v1)[3];
    }
}
const v18 = new C3(v2);
const v19 = new C3(v0);
v19.length = v19;
const v20 = new C3(v0);
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    a23[7];
    try { a24.toString(); } catch (e) {}
    try { a26.at(v18); } catch (e) {}
    try {
        this.g = v18;
    } catch(e30) {
    }
    try {
        this.h = a26;
    } catch(e31) {
    }
}
F21.prototype = F21;
new F21(v2, v2, v18, v2);
new F21(v2, v1, v18, v1);
new F21(v2, v18, v20, v1);
try { WeakMap.call(F21); } catch (e) {}
new WeakMap();
const v39 = new Map();
const v40 = v39?.constructor;
try { new v40(); } catch (e) {}
function f42() {
}
const v47 = new BigUint64Array(0);
try { v47.entries(); } catch (e) {}
const v51 = new BigInt64Array(257);
~3983;
for (let v54 = 0; v54 < 8; v54++) {
    new BigUint64Array(0);
    new Uint8Array(v54);
    new Float32Array(255);
}
try {
    const t61 = "function";
    t61.valueOf = f42;
} catch(e66) {
}
C3 >>>= Map;
3 >>> 3;
const v72 = new Uint8ClampedArray(3);
v72[1];
class C74 {
    constructor(a76, a77, a78, a79) {
        try { this.constructor(a79, BigInt64Array, a79, WeakMap); } catch (e) {}
        const v81 = this.constructor;
        v81.name = v81;
        try { new v81(3983, a79, this, this); } catch (e) {}
        for (let v83 = 0; v83 < 5; v83++) {
            v72[v83] = v83;
        }
    }
}
const v84 = new C74();
const v85 = v84?.constructor;
try { new v85(v51, v18, WeakMap, v51); } catch (e) {}
