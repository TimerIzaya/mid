function f0() {
}
const v3 = new BigUint64Array(251);
const v6 = new Int32Array(16);
new Uint8Array(3417);
class C10 {
    constructor(a12, a13, a14) {
        function f15() {
            return a14;
        }
        super.b;
        a13 === this ? a13 : this;
        new f15();
        const o22 = {
            "maxByteLength": 444677045,
        };
        const v24 = new ArrayBuffer(10, o22);
        new BigInt64Array(v24);
    }
}
const v27 = new C10(251, 16, 3417);
new C10(v27, 3417, 3417);
const v29 = new C10(251, 3417, 251);
[251,v29,v27];
[BigUint64Array,Int32Array,C10,v3];
[v6,16];
const v33 = [];
const v34 = [v33];
class C36 extends Map {
    constructor(a38, a39) {
        super(v34);
    }
}
const v40 = new C36(v33, v34);
const v41 = new C36(v34, v40);
const v42 = new C36(v41, v40);
const v46 = [-9.251164206543135e+307,309475.38258999935,5.0,-849047.5131956823,7.376576332682223,-2.0,8.349809302995563];
const v48 = new Uint32Array();
let v49 = -4294967297n;
const v50 = v49--;
const v51 = [601759695];
const v52 = [1073741824,1073741823,1376142744,1073741825];
function f54(a55, a56, a57, a58) {
    try { a55.toLocaleString(); } catch (e) {}
    const v60 = a55?.constructor;
    try { v60(); } catch (e) {}
    try { v60(); } catch (e) {}
    const v64 = arguments.length;
    Object.defineProperty(v40, "e", { configurable: true, enumerable: true, value: f54 });
    const v66 = v41["entries"](a57, ...v42, BigUint64Array, ..."entries", a56, v64);
    const v68 = Symbol.toStringTag;
    v41[v68] = v68;
    function f69() {
        let v71;
        try { v71 = ("Vre").charAt(1073741824); } catch (e) {}
        try { v71.lastIndexOf(); } catch (e) {}
        let v73;
        try { v73 = ("Vre").codePointAt(v46); } catch (e) {}
        v73 - v73;
        v73 ^ v73;
        let v76 = Float64Array;
        v76 = a56;
        const v77 = v46.length;
        -v77;
        try {
            v52.forEach(a56);
        } catch(e80) {
            e80.stack = e80;
        }
        const o91 = {
            "c": v49,
            "EPSILON": v51,
            valueOf(a82, a83) {
                return a82;
            },
            1073741824: v48,
            [v49](a85, a86, a87, a88) {
                eval();
            },
            "arguments": 5,
            256: a58,
        };
        return v77;
    }
    f69();
    const v94 = Array();
    let v95;
    try { v95 = v94.findLast(f54, v48); } catch (e) {}
    v94.unshift("entries", v66, "entries", v95);
    let v98;
    try { v98 = Int8Array.of(); } catch (e) {}
    try { v98.join(v60); } catch (e) {}
    const v100 = new Int8Array(v51);
    v100.c = v100;
    const v101 = v100.buffer;
    v101.maxByteLength;
    const v103 = v101.slice(v60);
    try { Int32Array(v103, arguments, v49); } catch (e) {}
    function f106(a107, a108, a109, a110) {
        return a110;
    }
    const v111 = new Int32Array();
    const v112 = v111[3];
    v112 + v112;
    for (let v114 = 0; v114 < 5; v114++) {
    }
    %OptimizeFunctionOnNextCall(f69);
    try { v52["find"](..."find", a58, ...v51, ...v52, ...522675525n); } catch (e) {}
    return a55;
}
for (let v117 = 0; v117 < 10; v117++) {
    f54(v48);
}
%OptimizeFunctionOnNextCall(f54);
f54(v51, v33, v50, f54);
