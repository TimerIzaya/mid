const v1 = new Map();
let v4;
try { v4 = new BigInt64Array(v1, 15, Map); } catch (e) {}
new BigInt64Array(15);
new Float32Array(1033);
new BigInt64Array(2564);
class C15 {
    b = "c";
    static #h;
    268435439;
    static #c;
}
const v16 = new v4();
v16[268435439];
const v18 = new C15();
new C15();
2.220446049250313e-16 >> 2.220446049250313e-16;
[2.220446049250313e-16,1.7976931348623157e+308,1.7976931348623157e+308];
const v25 = [-788.7260290236088,1.7976931348623157e+308,"c"];
try { v25.splice(v18, v25); } catch (e) {}
[-788.7260290236088,C15];
Math.E = Math;
const v29 = Math.round();
v29 / v29;
for (let v31 = 0; v31 < 10; v31++) {
    v31 / v31;
    async function f33(a34, a35, a36) {
        a34 - a34;
        a36--;
        const v39 = a36 >>> a36;
        v39 === v39;
        const v41 = await v29;
        v41 + v41;
        try { Number.bind(2.220446049250313e-16); } catch (e) {}
        const v45 = Number.isNaN(v41);
        v45 && v45;
        const v48 = [0.8307152163010869,1.0,0.0];
        v48[2] = v48;
        v48.length = v31;
        %VerifyType(v48 instanceof -24894);
        return f33;
    }
    try { f33(-788.7260290236088, -1000000000.0, -1000000000.0); } catch (e) {}
    const v51 = f33(Math, "b", v29);
    let v52;
    try { v52 = v51.hasOwnProperty(-788.7260290236088); } catch (e) {}
    !v52;
}
