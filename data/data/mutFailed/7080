const v0 = [65536];
const v1 = [-694,-6,1073741824,-14,3,11,3,-7,5,-1214514770];
const v2 = [1073741824,-7,-1283755539,-726309105,10,13,-4294967295,12,512,40630];
const v3 = [];
function f4() {
    -v3;
    return f4;
}
class C6 {
    static {
        const o8 = {
        };
        new Proxy(this, o8);
    }
    p(a12, a13) {
        let v14;
        try { v14 = new this(a13, this, a12); } catch (e) {}
        super.g = v1;
        return Reflect.construct(v14, [v1,v2], v14);
    }
    a;
}
new C6();
const v19 = new C6();
const v20 = new C6();
[-2.9700017742911022,795135.542646985,938.533418121023,-974148.680744386,-1.7976931348623157e+308,-300.6481185564369];
const v22 = [483707.38277358306];
const v23 = [2.220446049250313e-16,-Infinity,1.278332587799012,711290.6941419018,0.0,-Infinity,-1000.0,2.2250738585072014e-308];
const v24 = [v20,v2,v19];
[v23];
[v23,v22,v24,v19,v20];
let v27 = 2147483648;
function f29() {
    class C32 {
    }
    class C35 {
        get b() {
            delete this?.e;
            v27 = 1664606158;
            const o39 = {
                valueOf() {
                    return this;
                },
            };
        }
    }
    const v41 = `
        try {
            new Float64Array(127);
        } catch(e43) {
        }
    `;
    let v44 = -65535;
    v44 * v44;
    v44 / v44;
    const o122 = {
        __proto__: 352326470,
        next() {
            v44--;
            const v50 = v44 == 0;
            const o51 = {
                "done": v50,
                "value": v44,
            };
            return o51;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v44,
        m(a53) {
            a53.h = a53;
            class C57 extends Int32Array {
                [Set] = true;
                [v0];
            }
            const o58 = {
            };
            function f59(a60, a61, a62) {
                function f64(a65) {
                    a61[5] ||= f29;
                }
                this.onmessage = f64;
                const v68 = new SharedArrayBuffer(35);
                new BigUint64Array(v68);
            }
            try {
                o58.e = v44;
            } catch(e71) {
                const v75 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v75, o58);
            }
            try {
                const o77 = {
                };
                o77.e = 1261703539;
                o77.g = a53;
            } catch(e78) {
            }
            -9007199254740991 >> -9007199254740991;
            Math.sin(-9007199254740991);
            class C85 {
                o(a87, a88, a89, a90) {
                    class C91 {
                        static 44 = "EV";
                    }
                    new C91();
                    new C91();
                    new C91();
                    return 0;
                }
            }
            new C85();
            const v98 = new Int8Array(3938);
            let v99 = 3;
            v99++;
            const v101 = [-6.078081144782104,3.0,-1000.0,4.739392359408212,-1.3763335971087312e+307,5.0,0.8267200417626637,276.24411996178765,2.2250738585072014e-308];
            for (let v102 = 0; v102 < 25; v102++) {
                v101["p" + v102] = v102;
            }
            let v105 = 0;
            const v106 = v105 >> v105;
            for (let i = 0; i < 5; i++) {
                v105 < 8;
                [...v99] = v98;
                v105++;
            }
            const o110 = {
            };
            o110.e = 1261703539;
            o110.g = a53;
            try {
                const o111 = {
                };
                o111.g = a53;
                o111.h = 352326470;
            } catch(e112) {
                function F113(a115, a116, a117, a118) {
                    if (!new.target) { throw 'must be called with new'; }
                    a115.propertyIsEnumerable();
                }
                -3 ^ v106;
            }
            return this;
        },
    };
    function F123(a125, a126) {
        if (!new.target) { throw 'must be called with new'; }
    }
    let v130;
    try { v130 = o122.m(o122); } catch (e) {}
    class C132 {
    }
    new v22();
    const v134 = [601759695];
    const v135 = [1073741824,1073741823,1376142744,1073741825];
    function f136(a137, a138, a139, a140) {
        try {
            v135.forEach(a138);
        } catch(e142) {
        }
        const v144 = new Int8Array();
        const v147 = new Int32Array(1024);
        v147[3];
        let [v149] = v144;
        try { v135["find"](..."find", a140, ...v134); } catch (e) {}
    }
    const v152 = new C132();
    const v154 = new Float32Array(v152, "nt", Float32Array);
    const t170 = "nt";
    const v155 = delete t170[v154];
    let v156;
    try { v156 = v152.floor(v155); } catch (e) {}
    for (const v157 in v156) {
    }
    v130.e = v130;
}
const v158 = f29();
const v159 = f29();
const v160 = f29();
Uint8Array.prototype;
try { new Uint8Array(v159, v160, v158); } catch (e) {}
function f166(a167, a168, a169, a170) {
}
("lastIndexOf")[Symbol.toPrimitive];
function f175(a176, a177) {
    const o180 = {
        set b(a179) {
        },
    };
}
f175();
new BigUint64Array(257);
new Uint16Array(1412);
gc(256);
function F195(a197, a198, a199) {
    if (!new.target) { throw 'must be called with new'; }
}
8 + 8;
8 >>> 8;
const v203 = new Uint8Array(8);
try {
    v203.h = -9223372036854775807;
} catch(e206) {
}
const v207 = [-223.21974199729607,0.6826909196761026,-7.610543209781418e+307,1000000000.0,-2.2250738585072014e-308,0.4672319347741436,-1000000.0,-3.0,-5.0,6.966874548897];
9007199254740990 + 9007199254740990;
const v211 = v207.fill(-9007199254740990n, 9007199254740990);
let v212;
try { v212 = v211.toString(); } catch (e) {}
("n").split("n", 2147483647);
Math.log2(0);
try { v212.strike(); } catch (e) {}
4.0 - 4.0;
function F227(a229) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
    class C233 {
        #toString(a235, a236) {
            new Int8Array(2);
            new BigInt64Array(56);
            new Float32Array(257);
            return 257;
        }
    }
    new C233();
}
BigUint64Array <= 0.7221600461335677;
