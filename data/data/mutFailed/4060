let v0 = false;
new Map();
const v5 = new Float32Array(3626);
function f7(a8, a9) {
    const o13 = {
        __proto__: a9,
        "b": a9,
        [a8]: a9,
        "c": a8,
        "e": a9,
        valueOf(a11, a12) {
            super[a11] = "undefined";
            return a12;
        },
    };
    return a8;
}
%PrepareFunctionForOptimization(f7);
const v16 = new Float32Array(129);
let [] = v16;
let v17 = Math;
let v20 = new Set();
[v0,v20,...v17] = v16;
const v22 = Symbol.asyncIterator;
v17[v22] = v22;
const v24 = v17.min(129);
v17.log1p(129);
const v26 = v17.log10(129);
-v26;
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a33;
    } catch(e34) {
    }
    try {
        this.d = a30;
    } catch(e35) {
    }
    try {
        this.b = v26;
    } catch(e36) {
    }
}
const v37 = new F28(256, Float32Array, 10, 256);
const v38 = new F28(v37, v37, 3626, 10);
const v39 = new F28(v16, v26, 129, 3626);
new Float64Array(1);
const o43 = {
};
v17.random();
const v47 = new BigInt64Array(192);
v5[0] = v24;
const v51 = ("valueOf").normalize("NFD");
v16[v47] = v0;
function f53(a54) {
    const o61 = {
        __proto__: 2,
        213: a54,
        ...a54,
        "g": 2,
        p(a56, a57) {
            switch (v39) {
                case a56:
                    const v58 = [v26,BigInt64Array,Float32Array];
                    [2,"NFD",v51,[v38,v58,v58],"undefined"];
                    break;
            }
            return 2;
        },
    };
    return o61;
}
const v62 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v63 = [Uint32Array,Uint32Array,Uint32Array,Uint32Array];
const v64 = v63.push();
v63.__proto__ = v64;
try { v62.every(v64, v62); } catch (e) {}
