[0.09407012589500496,-1.0,1000000000000.0];
[1000000000000.0,625.6458428640376,NaN,NaN,-2.220446049250313e-16,-3.0,-637.3710977882712,0.39560036828009015,1.2846018983383448e+308,1.0445561422901864e+308];
[-6.716054032034675e+307];
class C4 {
}
function f5() {
    for (let v6 = 0; v6 < 10; v6++) {
        let v8 = Math.atanh(v6);
        v8--;
    }
}
const v10 = f5();
function f12() {
    const o14 = {
        get c() {
            return this;
        },
    };
    return o14;
}
class C15 extends f12 {
    #toString(a17, a18, a19, a20) {
    }
}
const v21 = new C15();
new Float32Array(3788);
new Uint8ClampedArray(683);
new Int32Array(1841);
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e34) {
    }
}
function f35(a36, a37) {
    class C41 {
        get b() {
        }
        #e;
        c = 3.2255150730772826;
    }
    const v43 = new v21();
    function f44(a45, a46) {
        return a46;
    }
    v43.toString = f44;
    const v47 = new C41();
    v47.toString = f44;
    const v48 = new C41();
    v48.c = v48;
    class C49 {
        [v47];
        #toString(a51, a52, a53) {
        }
        [3.2255150730772826] = v43;
        188 = C41;
        static 3865;
        4 = v43;
        #g = C49;
    }
    try { C49.call(v43); } catch (e) {}
    const v55 = new C49();
    const v56 = v55?.__lookupGetter__;
    const v58 = new Float32Array();
    let {...v59} = v58;
    function F60(a62, a63, a64) {
        if (!new.target) { throw 'must be called with new'; }
        a63 === a63;
        const v67 = new BigUint64Array();
        const v68 = /anVXYFzN(x)(x)(x)\3/gvdms;
        try { v67.reduceRight(v68); } catch (e) {}
        9n >> 9n;
        this.constructor;
    }
    class C73 {
    }
    const v74 = new C73();
    for (let v75 = 0; v75 < 5; v75++) {
        new F60(undefined, v74);
    }
    try { v56(C49); } catch (e) {}
    const v79 = new C49();
    const v80 = v79?.constructor;
    try { v80(); } catch (e) {}
    const v82 = new C49();
    class C83 {
        constructor(a85, a86) {
            function f87(a88) {
                return this;
            }
            const o91 = {
                "type": "function",
            };
            new Worker(f87, o91);
        }
    }
    const v93 = new C83(C83, C83);
    new C83(1000, v93);
    function f95() {
        [-0.0,3.5501749464532004,-0.0,-2.220446049250313e-16,0.7626441105891978,-585.9055525866645,1e-15,1000000.0] ** "IxTD";
        [Float32Array];
        const t99 = "symbol";
        t99[v43] = v48;
        class C102 {
        }
        const v103 = C102();
        const v104 = C102();
        function f105(a106, a107) {
            const o116 = {
                [-943.3768400471749]: v104,
                [a107](a109, a110, a111) {
                },
                p(a113, a114) {
                    this.toString(a114, this, v103);
                    return -943.3768400471749;
                },
            };
            return o116;
        }
        return v55;
    }
    v82.constructor = f95;
    const v117 = v82?.constructor;
    try { v117(); } catch (e) {}
    class C119 {
        static {
            try { this(); } catch (e) {}
            let v122 = 0;
            while ((() => {
                    const v124 = v122 < 6;
                    !v124;
                    return v124;
                })()) {
                v122++;
            }
        }
    }
    function f127(a128) {
        return a36 ^ a37;
    }
    this.onmessage = f127;
    const v133 = new Uint16Array(821);
    new Uint8Array(v133);
}
const o137 = {
    "type": "function",
};
new Worker(f35, o137);
const v140 = new v10();
function f141(a142, a143) {
    const o144 = {
        __proto__: a142,
    };
    return v140;
}
new BigInt64Array(2147483649);
