function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        9007199254740991 - 9007199254740991;
        -4096 / -4096;
        const v8 = [-4,65536,-1,5];
        try { v8.map(this); } catch (e) {}
        const v10 = [9007199254740990,4294967295,6,-1835262761,1433213920,-65535];
        v10[5] = v10;
        [1274272447,-15,536870888,-1159286428,18079,536870912,29735,3,8];
        this.g = -9007199254740992;
    } catch(e12) {
    }
    try {
        this.h = -9007199254740992;
    } catch(e13) {
    }
}
new F0();
new F0();
new F0();
try { new Map(); } catch (e) {}
const v19 = new Map();
const v20 = [-17521,-1040305450,-149089066,9007199254740990,-2147483648,-1];
[-720043310,-1035197730,7,64,-1260526030,58872];
[-49460];
try { new Uint8ClampedArray(v20, 10, F0); } catch (e) {}
new Uint8ClampedArray(10);
new Uint16Array(1336);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
new Int16Array(30);
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this?.constructor;
    try { new v35(); } catch (e) {}
}
const v37 = new F33();
const v38 = new F33();
v38.length;
function f40(a41) {
}
f40(v38);
f40(v37);
const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v45.length = v45;
const v46 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
Int32Array.prototype;
for (let v49 = 0; v49 < 25; v49++) {
    v45["p" + v49] = v49;
}
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
}
const v56 = F52?.constructor;
try { new v56(v19); } catch (e) {}
const v58 = new F52(v46);
class C59 {
}
try { C59.call(1336); } catch (e) {}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v63 = [601759695];
const v64 = [1073741824,1073741823,1376142744,1073741825];
function f66(a67, a68, a69, a70) {
    function f71() {
        let v74 = Float64Array;
        v74 = a68;
        b = v63;
        v45.length;
        try {
            v64.forEach(v74);
        } catch(e77) {
        }
        const v78 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v80 = Symbol.toPrimitive;
        const o95 = {
            toString(a82, a83) {
                const v84 = a70 && v74;
                new Float64Array(4);
                new Uint32Array(3418);
                new Float64Array(127);
                a82 *= v80;
                return v74;
                return v84 <= v78;
            },
        };
        let v96 = -268435456;
        v96--;
        const o116 = {
            "c": -4294967297n,
            [522675525n](a99, a100) {
            },
            "c": v63,
            valueOf(a102, a103) {
            },
            "b": -4294967295,
            [-4294967297n](a105, a106, a107, a108) {
            },
            "e": -4294967295,
            "e": v96,
            "maxByteLength": -4294967295,
            "arguments": v58,
            ...v63,
            "type": "Vre",
            ..."Vre",
            valueOf(a110, a111) {
            },
            ..."Vre",
            4: "Vre",
            "c": v80,
            "type": "Vre",
            "type": v96,
            toString(a113, a114, a115) {
            },
            5: -4294967295,
            6: v96,
        };
    }
    try { f71(); } catch (e) {}
    f71();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f71);
    try { v64["find"]("find", a70, v63, v64); } catch (e) {}
}
for (let v123 = 0; v123 < 10; v123++) {
    f66();
}
%OptimizeFunctionOnNextCall(f66);
f66();
