function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -13072;
    } catch(e3) {
    }
    try {
        this.e = -13072;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
let v7 = new v5();
class C11 extends 127 {
    static n(a13, a14, a15) {
        try {
            const v16 = /[\cA]/gdiy;
            a15.fuck(v16, v16);
        } catch(e18) {
        }
        return v6;
    }
    536870887 = v6;
    [v6];
    static [127];
    a = v6;
    static 256;
    f;
}
C11[256] = C11;
const v19 = new C11();
const v20 = new C11();
try { v20.hasOwnProperty(v5); } catch (e) {}
v7 = C11;
const v24 = new Uint32Array(1024);
const v27 = new Uint32Array(2003);
const v30 = new Int32Array(2636);
const v31 = new C11();
function f32(a33, a34) {
    const v35 = a33[536870887];
    a34[536870887];
    %VerifyType(Uint32Array);
    delete v24?.buffer;
    try {
        f32(v35, a33);
    } catch(e39) {
    }
    const o49 = {
        8: a33,
        set g(a41) {
            let v43 = -1;
            v43 - a34;
            --v43;
            Math.atan(127);
        },
        "d": a33,
        [v5]: v19,
        __proto__: v27,
        "b": 127,
        ...v5,
        ...v30,
        /*
        __proto__: C11,
        */
        "g": v6,
        3: v31,
    };
    return o49;
}
f32(v31, v19)[8];
f32(v19, f32(v19, 2636));
class C54 {
}
function f55() {
    return f55;
}
let [] = v24;
v19[5] = v6;
f55();
%PrepareFunctionForOptimization(f55);
f55();
f55();
%OptimizeMaglevOnNextCall(f55);
f55();
C54.constructor = f55;
