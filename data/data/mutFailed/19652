new BigInt64Array(-2147483649);
try { ("-26733").sup(8); } catch (e) {}
let v7 = 1535195999;
v7--;
function f10(a11, a12, a13, a14) {
    a12 < a12;
    a13 !== a13;
    const o19 = {
        get b() {
            a14[3] = "-26733";
            for (let v18 = 0; v18 < 24; v18++) {
            }
            return a12;
        },
        "e": a14,
        "f": 8,
        "a": 8,
    };
    return o19;
}
const v20 = f10(257, v7, v7, "9007199254740991");
const v21 = v20[1];
f10(8, v21, v7);
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a27(a29, a29, a26, this); } catch (e) {}
    try { new a28(this, "-26733", 8, 257); } catch (e) {}
    function f33() {
        return ("Vre").constructor.fromCodePoint(undefined);
    }
    try { f33(v21); } catch (e) {}
}
const v38 = new F24(F24, F24, F24, F24);
const v39 = new BigUint64Array(8);
v39.BYTES_PER_ELEMENT = v39;
let v40 = 255;
v40--;
try { new Array(v38, F24, v39, Array); } catch (e) {}
const v45 = Array(19793);
let v46;
try { v46 = v45.reduce(); } catch (e) {}
for (const v47 of v45) {
}
Uint32Array.BYTES_PER_ELEMENT;
function F50() {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    try { v52(); } catch (e) {}
    try { new v52(v52); } catch (e) {}
}
const v55 = new Uint32Array(v40);
-4294967296 === -4294967296;
[-4294967296];
async function* f60(a61, a62) {
    return -9223372036854775807;
}
v55[247];
for (let v67 = 0; v67 < 5; v67++) {
    function f68() {
        try { ("Vre").codePointAt(v46); } catch (e) {}
        let v71 = ("Vre").codePointAt(v67, f68, v20, f68);
        const v72 = v71--;
        v72 / v72;
        -9223372036854775807 * v72;
        return f68;
    }
    f68();
    %OptimizeFunctionOnNextCall(f68);
}
const v77 = [-65536,-432658450,256];
const v78 = v77?.map;
try { new v78("9007199254740991"); } catch (e) {}
const v80 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
try { v80.reduce(248604123n); } catch (e) {}
v80.length >>>= -65536;
const v84 = Math.max();
v84 + v84;
v84 & v84;
Float64Array.d = Float64Array;
const v88 = new Float64Array(v77);
try { v88.filter(v40); } catch (e) {}
