let v1 = 9;
Date.toString = Date;
const v4 = [601759695];
const v5 = [1073741824,1073741823,1376142744,1073741825];
let v6 = 522675525n;
try { v5[Date](..."find", Date, ...v4, ...v5, ...v6); } catch (e) {}
class C10 extends Array {
}
new C10();
/abc?/gvmy.exec("Q8F");
const v15 = new Date();
Object.defineProperty(v15, "d", { value: v15 });
let v16 = 6;
new Int8Array(v16);
new Float32Array(64);
new BigUint64Array(235);
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    v1++;
    const v33 = new Uint32Array(4);
    new Float64Array(v33);
    a28 === a28;
    new BigUint64Array();
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
F25[Symbol.toPrimitive] = Array;
function f42() {
    for (let v43 = 0; v43 < 5; v43++) {
        const v44 = new F25(F25, f42, v43);
        new Uint16Array(3327);
        const v49 = new Int32Array(Int32Array, Int32Array, Int32Array);
        function F50(a52, a53) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v54 = new F50(Int32Array, v49);
        function f55(a56) {
            let v57;
            try { v57 = v54.resize(v49, F50, Int32Array, a56); } catch (e) {}
            v49.length |= v57;
            const v58 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            const v61 = new Uint32Array();
            const v63 = [601759695];
            const v64 = [1073741824,1073741823,1376142744,1073741825];
            function f66(a67, a68, a69, a70) {
                function f72() {
                    let v75 = Float64Array;
                    v75 = a68;
                    b = v63;
                    const v76 = v58.length;
                    try {
                        v64.forEach(a68);
                    } catch(e78) {
                    }
                    const v79 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                    const v81 = Symbol.toPrimitive;
                    const o87 = {
                        toString(a83, a84) {
                            const v85 = a70 && a68;
                            a83 *= v81;
                            v85 <= v79;
                        },
                    };
                    const o112 = {
                        "c": -4294967297n,
                        [522675525n](a90, a91) {
                        },
                        "c": v63,
                        valueOf(a93, a94) {
                        },
                        [v76](a96) {
                        },
                        [-1]: 2684,
                        1073741824: v61,
                        "maxByteLength": -268435456,
                        "b": -4294967295,
                        [-4294967297n](a98, a99, a100, a101) {
                            class C103 extends Date {
                                static get c() {
                                    eval();
                                }
                            }
                            for (let v107 = 0; v107 < 5; v107++) {
                                continue;
                            }
                        },
                        "e": -4294967295,
                        "e": -268435456,
                        "arguments": v4,
                        set b(a109) {
                        },
                        256: a70,
                        m(a111) {
                        },
                        ...v63,
                        "type": "Vre",
                        ..."Vre",
                        4: "Vre",
                        "c": -268435456,
                        "type": "Vre",
                        "type": "Vre",
                        5: -4294967295,
                        6: -268435456,
                    };
                }
                f72();
                const v115 = new Int8Array();
                v115.buffer.slice(2147483648);
                %OptimizeFunctionOnNextCall(f72);
                let v120;
                try { v120 = v64["find"](..."find", a70, ...v63, ...v64, ...522675525n); } catch (e) {}
                v120 <= a69;
                return arguments;
            }
            return v57;
        }
        %OptimizeFunctionOnNextCall(f55);
        const v125 = v1 ** v1;
        Math.sqrt(-45334);
        const v127 = !v1;
        9007199254740991 * v125;
        v127 % F25;
        Math.sin(v1);
        let {...v131} = v4;
        for (let v132 = 0; v132 < 25; v132++) {
        }
        function f133() {
            const o136 = {
                get c() {
                    super.m();
                },
            };
        }
        const v137 = v44.constructor;
        function f138(a139, a140) {
            class C141 {
            }
            new C141();
            return v5;
        }
        v137[Symbol.toPrimitive] = f138;
        new v137();
        v6--;
        new Uint8ClampedArray(268435440);
        new Uint32Array(5);
    }
    return f42;
}
%PrepareFunctionForOptimization(f42);
const v153 = f42();
try {
    v15.d = v153;
} catch(e154) {
}
v16 = 536870889;
%OptimizeFunctionOnNextCall(f42);
f42();
