new WeakMap();
const v5 = new Uint8Array(9);
v5.lastIndexOf(Math.cbrt(7));
class C12 {
    constructor(a14) {
        0.5542704670840308 !== 0.5542704670840308 ? 0.5542704670840308 : 0.5542704670840308;
    }
    static #g = -20903;
    p(a18, a19) {
        for (let v20 = 0; v20 < 5; v20++) {
            function f21() {
                let v28 = -3.0;
                Math.fround(10000);
                Math.sinh(v28++);
                f21 % v20;
                [WeakSet,WeakSet];
                return v20;
            }
            const t18 = 9;
            t18();
            %OptimizeFunctionOnNextCall(f21);
        }
        a19[65535] = a18;
        new Int8Array(268435456);
        const v39 = [];
        function f40() {
            const v41 = v39.constructor;
            v41.call();
            return v41;
        }
        let v45 = -12782;
        Math.log(v45);
        ++v45;
        v45--;
        a18--;
        Math.imul(!"2147483649", "2147483649");
        return v45;
    }
    static {
        const v54 = super[this];
        ("2147483649").substring(v54, this, v54, "2147483649", "2147483649", this);
        super.c;
        try {
            v5.f = v54;
        } catch(e57) {
        }
    }
}
const v58 = new C12(0.5542704670840308);
const v59 = new C12("2147483649");
new C12("2147483649");
new BigInt64Array(8);
new Uint16Array(79);
const v69 = new Float32Array(4);
function f71(a72) {
    return f71;
}
function f73(a74, a75, a76) {
    new BigInt64Array(a74, 7, a75);
    Reflect.construct(WeakMap, [v69], Float32Array);
    return 7;
}
f73(v59, 79, v58);
new Float64Array(Float64Array);
class C84 {
}
function f85() {
    const v87 = Symbol.toPrimitive;
    function f88() {
        const o91 = {
            m(a90) {
                return f88;
            },
        };
    }
    v87.description.codePointAt(C84);
    return Symbol;
}
%OptimizeFunctionOnNextCall(f85);
class C94 {
}
class C95 extends C94 {
    static #f;
}
new C95();
new C95();
new C95();
const v99 = new C94();
const v100 = [C94,C94];
const v101 = [v99,v100,v100];
const v102 = [2.2250738585072014e-308];
function F103(a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    a107.groupToMap(f71);
}
const v109 = new F103(2.2250738585072014e-308, F103, v101);
new F103(v100, v109, v102);
