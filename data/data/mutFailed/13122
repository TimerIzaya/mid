function f0() {
}
function f1() {
    const o8 = {
        __proto__: f0,
        "d": f0,
        p() {
            Object.defineProperty(this, "h", { configurable: true, enumerable: true, get: f0 });
            const o6 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o6);
            return "async";
        },
    };
    for (let v9 = 0; v9 < 25; v9++) {
        const v10 = [601759695];
        const v11 = [1073741824,1073741823,1376142744,1073741825];
        function f12(a13, a14, a15, a16) {
            a13 >>> a13;
            a15[3];
            ("find").codePointAt(v11);
            try { v11["find"](..."find", a16, ...v10); } catch (e) {}
            return a16;
        }
        for (let v22 = 0; v22 < 10; v22++) {
            f12(v22, v22, v11);
        }
    }
    return o8;
}
const v24 = f1();
const v25 = f1();
let v26 = f1();
const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try {
    v27.forEach();
} catch(e29) {
    e29.message;
    const v31 = e29.constructor();
    const o32 = {
        "execution": v31,
    };
}
class C36 {
    constructor(a38, a39) {
    }
    static {
        try {
            this.toString = f1;
        } catch(e44) {
        }
        v26 = v25;
        v24[6];
    }
    static [v25];
}
const v46 = new C36(-1641, -1641);
new C36(255, v46);
new C36(255, v46);
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a53;
    } catch(e54) {
        const v55 = [1073741824,1073741823,1376142744,1073741825];
        try {
            v55.forEach();
        } catch(e57) {
        }
    }
    try {
        this.a = v46;
    } catch(e58) {
    }
    try {
        this.b = -1641;
    } catch(e59) {
    }
}
new F49(-1641, v25, 38932);
new F49(38932, -1641, 255);
new F49(38932, v25, 255);
/ND2/gds;
class C65 extends Map {
}
const v66 = new C65();
v66.isPrototypeOf();
class C70 {
    static {
        for (let v72 = 0; v72 < 25; v72++) {
            const v73 = [601759695];
            const v74 = [1073741824,1073741823,1376142744,1073741825];
            function f76(a77, a78, a79, a80) {
                try { new a77(); } catch (e) {}
                a79 << a79;
                function f84() {
                    return a77;
                }
                const v86 = new Int8Array();
                function f89(a90) {
                    const o91 = {
                        [a90]: a90,
                    };
                    return a90;
                }
                f89();
                const v93 = BigUint64Array * 536870887;
                v93 - v93;
                const v95 = v93 ** v93;
                new WeakMap();
                return f0;
                const v99 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
                let v100;
                try { v100 = v99.some(); } catch (e) {}
                function f101(a102, a103, a104, a105) {
                    const o113 = {
                        toString(a107, a108, a109) {
                            try { this.toString(a108, v100, a107); } catch (e) {}
                            a108++;
                            a104[a103] = a102;
                        },
                    };
                    return o113;
                }
                Number.isNaN(v95);
                function f115(a116, a117) {
                }
                try { f115(); } catch (e) {}
                const v119 = v86.buffer;
                const v120 = v119.__defineGetter__;
                try { v120(); } catch (e) {}
                Object.defineProperty(v119, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f84);
                let v123;
                try { v123 = v74["find"](..."find", a80, ...v73); } catch (e) {}
                const o124 = {
                };
                o124.e = o124;
                v123 <= a79;
                return arguments;
            }
            for (let v126 = 0; v126 < 5; v126++) {
                f76(this, v126, v126);
            }
        }
    }
}
