const v0 = [];
const v1 = [v0,v0,v0,v0,v0,v0,v0];
const v2 = [v1,v0];
const v3 = [v2,v2];
function f4() {
    return v1;
}
const v7 = new Uint32Array(1205620854);
new Uint32Array(v3);
Object.defineProperty(v1, 2721, { configurable: true, value: v3 });
function f11() {
    return 2721;
}
let v12;
try { v12 = v3.sort(f4); } catch (e) {}
new v12();
const v15 = f4()[v1];
v7.byteOffset;
new Int8Array(2721);
new Uint32Array(192);
new Map();
new v12(268435440, 1205620854);
try {
    v12.toString = v15;
} catch(e26) {
}
v15[-2] = v3;
function F27() {
    if (!new.target) { throw 'must be called with new'; }
}
class C29 {
    constructor(a31, a32, a33) {
        class C35 extends v12.constructor {
        }
        new C35();
    }
}
new C29(F27, C29);
