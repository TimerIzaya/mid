const v1 = new WeakSet();
class C2 extends WeakSet {
    g = WeakSet;
    [v1];
    [WeakSet] = WeakSet;
    constructor(a4, a5) {
        super(a5);
        let v6 = 0;
        while ((() => {
                function f7(a8, a9) {
                    function f11(a12, a13) {
                        return f11;
                    }
                    const o16 = {
                        "type": "function",
                    };
                    new Worker(f11, o16);
                }
                return v6 < 9;
            })()) {
            try {
                this.valueOf = a4;
            } catch(e20) {
            }
            v6++;
        }
    }
}
new C2(v1, C2);
const v23 = new C2(C2, WeakSet);
try {
    -35199 % (v1 / -1478256740);
} catch(e28) {
}
new C2(WeakSet, v23);
new Int32Array(1904);
new Int16Array(0);
new Float32Array(0);
new BigInt64Array(2149);
new Uint16Array(3412);
new BigUint64Array(129);
function F54() {
    if (!new.target) { throw 'must be called with new'; }
    function f57() {
        return -9007199254740992n;
    }
    class C58 {
    }
    new C58();
    this.c = 1073741823;
    const o61 = {
    };
    class C62 {
    }
    const v64 = new Set();
    function F65(a67, a68) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a67;
        } catch(e69) {
        }
        v64[this];
        try {
            new F65(a68, v64);
        } catch(e72) {
        }
    }
}
new F54();
new F54();
new F54();
new Float32Array(4);
([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
const v85 = [1073741824,1073741823,1376142744,1073741825];
function f86(a87, a88, a89, a90) {
    a89 * a89;
    const o92 = {
    };
    o92.__proto__;
    return f86;
}
for (let v94 = 0; v94 < 10; v94++) {
    f86(v85, v94, v94);
}
new Uint32Array(2);
function F99(a101, a102, a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
}
const v105 = new F99(F99, F99, F99, F99);
for (let v106 = 0; v106 < 25; v106++) {
    v105["p" + v106] = v106;
}
class C109 {
    constructor(a111, a112) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new C109();
function F115(a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
    const t102 = Array(11);
    t102[212] -= 3774;
    this.constructor;
    a117++;
}
const v125 = new F115();
const v126 = v125.constructor;
function f127(a128, a129, a130, a131) {
    function f133() {
        return Math.asin(Math);
    }
    %PrepareFunctionForOptimization(f133);
    f133();
    %OptimizeFunctionOnNextCall(f133);
    f133();
    return arguments;
}
f127(f127, f127, f127, f127);
new v126();
