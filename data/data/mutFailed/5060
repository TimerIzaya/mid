function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -38456;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
class C7 extends v4 {
    #f;
    #m(a9, a10) {
        v5[13];
        try {
            this.#f |= v6;
        } catch(e12) {
        }
        return a10;
    }
    b;
    [F0];
    static #c = v6;
    239 = v4;
}
new C7();
new C7();
new C7();
[13423,35364,-9007199254740992,4096,1073741824,-4294967297,-10,-22119,2147483648,13];
const v17 = [4294967295,129,61060,-13,49940];
[-5,-9007199254740992,3,2147483648,-4294967297,16,10569,10];
class C19 {
    set f(a21) {
        try {
            const t34 = "undefined";
            t34.h = v17;
        } catch(e25) {
        }
    }
    static #d;
    2690 = v5;
    static [C7] = v5;
    [v6];
}
new C19();
new C19();
const v28 = new C19();
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    function f31(a32) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f31 });
    let v35 = 1073741825;
    try {
        v35++;
        let v39 = -1e-15;
        v28.atan2(v39++, -175950080);
        this.b = v35;
    } catch(e42) {
    }
}
let v43 = new F29();
let v44 = new F29();
({"a":v44,"b":v44,...v43} = v44);
const o49 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o49);
new F29();
new Uint8ClampedArray(16);
function f56() {
    new Int8Array(1073741823);
    class C60 {
        #valueOf(a62, a63, a64, a65) {
        }
    }
    const o69 = {
        valueOf(a67, a68) {
        },
    };
}
v5();
%OptimizeFunctionOnNextCall(f56);
f56();
