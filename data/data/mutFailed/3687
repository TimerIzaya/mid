/SMZ/gvdmy;
const v2 = new Array();
let [,v3,v4] = v2;
try { v4(); } catch (e) {}
for (let i8 = 0; i8 < 10; i8++) {
    try {
    const t0 = -44394n;
    t0();
    } catch (e) {}
    !-1802551371;
}
/f[x]/udiy;
const v18 = /[a-zA-Z0-9]91/udis;
new Int16Array(916);
try {
} catch(e23) {
}
const o25 = {
};
const v27 = new Int32Array(Int32Array);
new Uint8Array(v27);
const v32 = Map?.constructor;
try { new v32(Map); } catch (e) {}
new Map();
const v35 = [-10];
try { v35.fill(v18); } catch (e) {}
const v37 = [268435439,16653,1073741825,536870888];
try { v37.unshift("4294967296"); } catch (e) {}
[52669,4294967297];
function f40() {
    return v35;
}
function f41() {
    return Map;
}
f41.arguments = f41;
class C42 {
    4;
}
Math.log1p(2.220446049250313e-16);
const v47 = new Int16Array();
v47.getUTCHours();
const v49 = new C42();
function f51(a52) {
    a52 ^ a52;
    return 36002;
}
function f54(a55, a56) {
    return f51;
}
new Promise(f54);
const v59 = v49?.constructor;
try { new v59(); } catch (e) {}
class C62 {
    static {
        if (-4.092259470322528 <= -4.092259470322528) {
        }
    }
}
new C42();
const v69 = new C42();
v69[4];
const t61 = [-936145422,536870912,127,257,-36772,-15984,2];
t61.length = -1748659246;
