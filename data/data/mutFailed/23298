[];
new Uint8ClampedArray(0);
class C5 {
}
new C5();
class C7 {
    static {
        [];
        try {
            super.setInt8();
        } catch(e11) {
        }
    }
}
const v12 = new C7();
[v12];
const v15 = new Uint8ClampedArray(5);
class C17 extends String {
    6 = String;
    5;
}
const v20 = new Uint32Array(35);
class C21 extends Uint32Array {
    get h() {
        let v23;
        try { v23 = this.values(); } catch (e) {}
        try {
            v20.reduceRight(v23, Uint8ClampedArray);
        } catch(e25) {
        }
        super.buffer;
        return v15;
    }
    [-2] = Uint8ClampedArray;
    268435440 = Uint8ClampedArray;
    static [Uint8ClampedArray];
}
new C21();
new C21();
new C21();
try {
    function f30(a31, a32, a33) {
        do {
        } while ((() => {
                class C36 extends Map {
                }
                ("sync")[-5.0];
                Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[C36,C36]]);
                const v46 = 2147483648 < 7;
                const v47 = !v46;
                v47 && v47;
                const v49 = /(?:a*)+q(?<a>.)/guds;
                function f50(a51) {
                    a51.dotAll;
                    a51.hasIndices = a51;
                    const v53 = a51?.constructor;
                    v53.$_;
                    v53.lastParen;
                    const o57 = {
                        get d() {
                        },
                    };
                    return v49;
                }
                return v46;
            })())
        f30(2147483648, f30, 2147483648);
        return 2147483648;
    }
    f30(f30, f30, f30);
    const v61 = new Date();
    v61[3];
    const v64 = new Float32Array();
    v64[4294967295] = v64;
} catch(e65) {
    class C66 {
    }
    new C66();
    function f70(a71) {
        const o77 = {
            __proto__: 2,
            "c": 2,
            "e": 536870889,
            213: a71,
            ...a71,
            "g": 2,
            p(a73, a74) {
                try {
                    this.fuck(536870889, a71);
                } catch(e76) {
                }
                return this;
            },
        };
        return o77;
    }
}
