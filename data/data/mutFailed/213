[7,65537,356317368,0,-9007199254740992];
const v1 = [-4294967295,-13];
function f2() {
    new Uint8ClampedArray(Date);
    return Date;
}
v1[Symbol.toPrimitive] = f2;
[-925152019,-9223372036854775808,-4294967295,-5,1073741824,6,-536870912,536870888,-9007199254740992,-468263647];
[-7.955650851178797,719.7443501235152];
const v10 = [1.7976931348623157e+308,-482768.16335022345];
function f11(a12) {
    const v14 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    const v16 = new Uint8ClampedArray(v14, Uint16Array, Uint8ClampedArray);
    return v16;
}
v10.toString = f11;
[-1e-15,-338329.79718767887,1.1942833403719957e+308,3.0,Infinity,4.0,1000.0,-2.220446049250313e-16,387.2383393698922];
new Int16Array(64);
const v31 = Promise.reject(Promise);
function f33(a34, a35, a36) {
    function f37() {
        return f33;
    }
    Object.defineProperty(a36, "toString", { get: f37 });
    const o38 = {
        [a36]: a34,
        "e": 8,
        "c": a35,
    };
    return o38;
}
f33(v10, -1704973223, v1);
f33(8, 4, v10);
f33(36002, Promise, v1);
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
}
const v55 = new F51(512, 10000);
const v56 = new F51();
function f59(a60, a61) {
    const o62 = {
        ...a60,
    };
    return a61;
}
%PrepareFunctionForOptimization(f59);
f59("65536");
const v64 = new Uint32Array(v31, 36002, 4);
([v56,v55,v64[0.29489550717955537]])[2];
new Int32Array(74);
new BigUint64Array(80);
Math.cos(-1073741824);
class C77 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
function f1() {
    return true;
}
new Int16Array(f1);
const v7 = new Float32Array(3);
try { v7.indexOf(Float32Array); } catch (e) {}
const v11 = new BigUint64Array(16);
class C12 extends BigUint64Array {
    static [v11] = v7;
    d;
    static #o(a14, a15, a16, a17) {
        let v21 = 89024.44770369632;
        Math.abs(a17);
        Math.sqrt(a17);
        const v24 = Math.imul(-720620535, v21);
        (a17 ^ -(-720620535)) - a17;
        --v21;
        return v24;
    }
}
new C12();
const v30 = new C12();
try { v30.filter(16); } catch (e) {}
new C12();
class C35 {
    e;
    constructor(a37) {
        function F38() {
            if (!new.target) { throw 'must be called with new'; }
            for (let i = 0; i < 5; i++) {
                Symbol.iterator;
                class C43 extends WeakSet {
                    [WeakSet];
                }
                function F44(a46, a47, a48) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
        }
        try {
        } catch(e49) {
        }
        try {
        } catch(e50) {
        }
    }
    c = -3;
}
const v51 = new C35(C35);
v51.c = v51;
const v52 = new C35(v11);
const v53 = new C35(-2.0);
const v54 = v53.c;
v54 + v54;
function F56() {
    if (!new.target) { throw 'must be called with new'; }
}
try { F56.toString(); } catch (e) {}
const t58 = 1;
new t58();
class C61 {
}
9n + 9n;
-65536n == -65536n;
const v68 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
v68[7] = v68;
function f69() {
    return -3;
}
try { new f69(); } catch (e) {}
1073741824 - 1073741824;
try { Uint32Array(9n, 4096, -65536n); } catch (e) {}
const v75 = new Uint32Array(4096);
try { Int32Array.from(Int16Array); } catch (e) {}
let v79 = Int32Array.length;
v79--;
new Int32Array(9);
v52.length = Uint16Array;
const v84 = new Uint16Array(120);
try { v84.reduceRight(v75); } catch (e) {}
try { Array.bind(v52); } catch (e) {}
f1();
485 - 485;
try { new Int8Array(Int8Array, Int8Array, v75); } catch (e) {}
const v94 = new Int8Array(Array, 92, 485);
v94[277] = v94;
const v96 = 3666 - 3666;
v96 === v96;
const v98 = v96 + v96;
v98 !== v98;
let v100 = 0;
v100 <= v100;
let v102 = v100++;
v102--;
const v105 = v100 < 1;
v105 && v105;
const v107 = v100++;
v107 * v107;
let v109 = BigUint64Array;
let v111;
try {
const t0 = "K9qD";
v111 = t0(v109);
} catch (e) {}
Math.cosh(2147483649);
Math.imul(v111, 2147483649);
let v115 = v109.length;
const v116 = v115--;
v116 >> v116;
const v118 = v115--;
v118 / v118;
v118 | v118;
new v109(v107, 485, 3666);
const v122 = BigInt64Array.bind();
v122.name = v122;
try { v122(); } catch (e) {}
const v124 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
let v125;
try { v125 = v124.sort(); } catch (e) {}
v125[4];
try { v125.sort(-65536n); } catch (e) {}
function f128() {
    const o130 = {
        get d() {
            return this;
        },
    };
    return o130;
}
const t129 = "boolean";
t129.f = "boolean";
let v132 = ("boolean").toLocaleLowerCase();
[v109,v132] = [-5,-65535,2269];
