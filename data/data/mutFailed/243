function f0() {
}
function f4() {
    return f0;
}
try { f4(); } catch (e) {}
class C6 {
    b;
    m(a8) {
        const v9 = this[a8];
        this.b *= v9;
        function F10(a12, a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = -5.775806595266917;
            } catch(e16) {
            }
        }
        new F10(a8, v9, v9, 760.9076097190296);
        new F10(-5.775806595266917, F10, a8, a8);
        const v19 = new F10(a8, 1000.0, a8, a8);
        return v19;
    }
}
let v20;
try { v20 = C6(); } catch (e) {}
const v21 = new C6();
v21.b = v21;
new C6();
new C6();
-826154263n ^ -826154263n;
class C28 {
    static e;
    #valueOf(a30, a31, a32) {
        function f33(a34, a35, a36, a37) {
            const o48 = {
                4294967296: 760.9076097190296,
                [a31](a39, a40) {
                    super[f0];
                    (268435456 >>> (268435456 % 268435456)) ^ -3.0;
                },
                [v21]: a30,
            };
            return o48;
        }
        const v50 = f33(-5.775806595266917, a30, f33(1000.0, 760.9076097190296, f0, v21), a31);
        f33(a30, 1000.0, 3n, v50, v50, v20, a31);
        return a31;
    }
}
const v53 = [10,v20];
let v54 = 0.0;
v54 **= v54;
v53.length = 1297910058;
C28.e = C28;
const t55 = -826154263n;
t55.g = -826154263n;
new Float64Array(1073741824);
const v59 = [];
const v60 = [v59,v59,v59,v59];
const v61 = [v60,v60,v60];
function f62() {
    return v61;
}
f62(v21, 1073741824);
const v64 = new C28();
-2.241327492701015 & 9007199254740991;
const o70 = {
    "maxByteLength": 1000,
};
const v72 = new Worker(2, o70);
v72.resize(1297910058);
const v74 = v64?.constructor;
try { new v74(); } catch (e) {}
new C28();
new C28();
class C79 extends Infinity {
}
C79.growable = C79;
new C79();
new Array(257);
class C6 extends BigUint64Array {
    static #o(a8, a9, a10, a11) {
        (a11 << -(-720620535)) - a11;
    }
}
new Uint32Array(-168312868);
class C22 {
}
Symbol.EPSILON;
function f27() {
}
const v28 = f27.constructor;
try { BigUint64Array(v28); } catch (e) {}
let v30 = -268435456;
v30--;
const t15 = (-13545).constructor;
const v38 = new t15();
v38.toLocaleString();
-57641.03148885199 ^ -57641.03148885199;
const v42 = new Array();
try { v42(); } catch (e) {}
new Int16Array(Int16Array);
