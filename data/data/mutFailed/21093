function f3() {
    return -1304099999;
}
try { f3.toString(); } catch (e) {}
function F8(a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this?.constructor;
    try { new v13(this, 2155n, 2155n); } catch (e) {}
    a11 + a11;
    try {
        this.d = 7;
    } catch(e16) {
    }
    try {
        this.b = a11;
    } catch(e17) {
    }
}
let v18;
try { v18 = new F8(7, f3, F8); } catch (e) {}
const v19 = new F8(f3, 7, -1304099999);
const v20 = new F8(11n, v19, -1304099999);
const v21 = new F8(F8, 7, -1304099999);
const v22 = v21?.constructor;
try { new v22(v19, -1304099999, -1304099999); } catch (e) {}
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    -a27;
    try {
        this.a = 2155n;
    } catch(e29) {
    }
    try {
        this.e = a27;
    } catch(e30) {
    }
}
new F24(7, v20);
new F24(7, 2155n);
new F24(7, 11n);
const v34 = /(xyz??)/vm;
const v35 = /}[a-b-c]/gdimy;
v35.sticky = v35;
class C36 {
    get e() {
        for (let i = 0; i < 25; i++) {
            new Uint8ClampedArray(129);
        }
    }
    #c = v34;
}
try { new C36(); } catch (e) {}
new C36();
class C48 {
}
v18.length;
try { C48.call(); } catch (e) {}
new C48();
(1 + 1) >>> v19;
class C55 {
}
try { C55.toString(); } catch (e) {}
let v58 = 10;
v58++;
const v61 = new BigUint64Array(v58);
const v62 = v61?.findLastIndex;
try { new v62(v21); } catch (e) {}
for (const v65 in v61) {
    let v66 = 10;
    for (let i = 0; i < 5; i++) {
        const v67 = v66--;
        v67 > v67;
    }
    new Infinity(2147483647);
}
