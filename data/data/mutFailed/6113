new Int16Array(2279);
const v5 = new Uint8Array(3509);
new Uint32Array(1024);
function f9() {
    return v5;
}
function f10(a11) {
    a11 === a11;
    a11 <= a11;
    const o17 = {
        __proto__: 3509,
        213: a11,
        ...a11,
        "g": 3509,
        p(a15, a16) {
            return f10;
        },
    };
    const v19 = new Int16Array(Int16Array, Int16Array, Int16Array);
    function f20() {
        return f20;
    }
    class C21 extends f20 {
        constructor(a23, a24, a25, a26) {
            super();
            function f27() {
                const o28 = {
                    "g": a24,
                    ...v19,
                };
                return C21;
            }
            for (let v29 = 0; v29 < 5; v29++) {
                f27();
                %OptimizeFunctionOnNextCall(f27);
            }
        }
    }
}
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    function f33(a34) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f33 });
    const v38 = 3 != 3;
    const v40 = [Worker];
    Object.defineProperty(v40, 1, { configurable: true, value: v40 });
    v40.unshift(v38);
    let v42 = 1073741825;
    try {
        v42++;
        let v46 = -1e-15;
        Math.atan2(v46++, -175950080);
        this.b = 1024;
    } catch(e49) {
    }
}
let v50 = new F31();
let v51 = new F31();
v51.a = f10;
({"a":v51,"b":v51,...v50} = v51);
const o56 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o56);
new F31();
new Uint8ClampedArray(16);
function f63() {
    new Int8Array(1073741823);
    class C67 {
        constructor(a69, a70, a71, a72) {
            try { a71(...a69, "async", a72, a72, ...Uint32Array); } catch (e) {}
            const v75 = [601759695];
            const v76 = [1073741824,1073741823,1376142744,1073741825];
            function f77(a78, a79, a80, a81) {
                try { new a78(); } catch (e) {}
                a80 << a80;
                function f85() {
                    return a78;
                }
                const v87 = new Int8Array();
                const v90 = BigUint64Array * 536870887;
                v90 - v90;
                Number.isNaN(v90 ** v90);
                function f95(a96, a97) {
                }
                try { f95(); } catch (e) {}
                const v99 = v87.buffer;
                const v100 = f85.__defineGetter__;
                try { v100(); } catch (e) {}
                Object.defineProperty(v99, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f85);
                let v103;
                try { v103 = v76["find"](..."find", a81, ...v75); } catch (e) {}
                const o104 = {
                };
                o104.e = o104;
                v103 <= a80;
                return arguments;
            }
            return arguments;
        }
        #valueOf(a108, a109, a110, a111) {
        }
    }
    const o115 = {
        valueOf(a113, a114) {
        },
    };
}
f63();
%OptimizeFunctionOnNextCall(f63);
f63();
