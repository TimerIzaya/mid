const v3 = [16,-12553,1098839706,-43132,7,-65537];
const v4 = [65536,-1];
const v5 = [4096,27585,-128,16,-4294967295,11,0];
const v6 = v5?.findIndex;
try { new v6(v3); } catch (e) {}
function f8() {
    return v5;
}
[1711276229,401000343];
[-409783669,-1977176101,30051215,10,1,536870889,65536,29750,376715617];
[4294967295,156382706,-25104388,-9007199254740992];
0.4104291846788197 !== 0.4104291846788197;
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    a18 / a18;
    function f23(a24) {
        const o30 = {
            __proto__: 2,
            "c": 2,
            "e": -11,
            213: a24,
            ...a24,
            "g": 2,
            p(a26, a27) {
                try {
                    this.fuck(-11, a24);
                } catch(e29) {
                }
                return this;
            },
        };
        return o30;
    }
    f23(-11);
    try {
        this.f = a20;
    } catch(e32) {
    }
    new Uint8ClampedArray(127);
    const v37 = [-3.0];
    v37[2] = 3.0;
    try {
        const v40 = new Uint32Array(4);
        const v43 = new Uint32Array(-11);
        const v45 = /[(?:a*)+]/gudisy;
        function f46() {
            const v49 = new Uint16Array(209);
            const v51 = [delete v43[v40],Uint16Array,v45,"o"];
            [v49];
            [v51];
            Object.defineProperty(v51, "d", { writable: true, configurable: true, enumerable: true, value: Uint32Array });
        }
        this.h = v4;
    } catch(e54) {
    }
    new Int16Array(-11);
    try {
        v37.length = 2499;
    } catch(e58) {
    }
}
new F16(-11, -683.4349974914404, -65535);
const v60 = new F16(-65535, -683.4349974914404, -9007199254740992);
v60.b = v60;
new F16(-65535, 2.0, -9007199254740992);
Float32Array.d = Float32Array;
const v63 = new Float32Array(Float32Array);
class C65 {
}
try { new C65(); } catch (e) {}
const v67 = new C65();
const v68 = [-5.0];
try { v68.includes(v68); } catch (e) {}
-2.220446049250313e-16 + -2.220446049250313e-16;
function F73(a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = a75?.constructor;
    try { new v77(F73, v68, v68); } catch (e) {}
    const v79 = this.constructor;
    v79.length = v79;
    try { new v79(v67, v79); } catch (e) {}
    (-11).__proto__;
}
new F73(v63, Uint16Array);
new F73(-2.220446049250313e-16, 1000000000.0);
