class C3 {
    p(a5, a6) {
        a5 = 10;
        function F7(a9, a10, a11) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = 0.366189942569514;
            } catch(e12) {
            }
            try {
                new Uint32Array();
                class C15 {
                }
                function F16() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                this.e = a10;
            } catch(e18) {
            }
            try {
                this.h = a9;
            } catch(e19) {
            }
        }
        const v20 = new F7(1.028447444621325e+307, 1.028447444621325e+307, a6);
        const v21 = new F7(v20, 0.366189942569514, 0.366189942569514);
        new F7(v21, a6, v21);
        return v21;
    }
}
const v23 = new C3();
const t31 = 1.028447444621325e+307;
new t31();
new v23();
[2.6414916109440953e+307];
[-0.7820573330627276,5.0,0.17064415478426553,-Infinity];
[893919.0960020532,-8.42432399469567,1.5393832802010472,Infinity,-555549.1748894679,NaN,7.9896497304875];
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    new Float32Array([49197,268435456,-12,-5156,35920,-45892,-667,536870888,65537,-12]);
}
const v43 = new Uint8Array(4061);
const v45 = [4061];
Reflect.apply((4061).fill, v43, v45);
