const v0 = [-1.7976931348623157e+308,1000000.0,-6.915611394355537,1.3526714764546773e+308,-547904.5365605006,-9.995503205713113];
const v1 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v2 = [1.2064853884308828,389.29316056577704,0.4093535166309349,0.2957852566307807,-1000000000000.0,-1000000000000.0,-1.7976931348623157e+308];
function f3(a4, a5) {
    a4[4];
    try { a5.slice(a5, f3); } catch (e) {}
    const o18 = {
        "c": a5,
        __proto__: v0,
        [a4](a9, a10) {
            let v11;
            try { v11 = a4.values(); } catch (e) {}
            try { this.o(a10, v11, a9); } catch (e) {}
            super.f = v11;
            return a9;
        },
        "g": a4,
        "arguments": v0,
        set b(a14) {
        },
        get f() {
            super.n();
            return isFinite;
        },
        "f": a4,
        "d": a5,
        ...v2,
        "a": v1,
    };
    return o18;
}
f3(v0, v1);
f3(v0, v1);
f3(v1, v0).a;
const v25 = new Float32Array(14);
const v28 = new Int16Array(257);
v28[34] = v28;
const v31 = new Int8Array(3709);
v31[3040];
const v33 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v33.includes(v25); } catch (e) {}
Uint32Array.prototype;
const v38 = new Uint32Array(v33, 2684);
const v40 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    a45[3] = a45;
    a47 * a47;
    function f50() {
        let v54;
        try { v54 = new Int32Array(v1, a48, v28); } catch (e) {}
        new Int32Array(3, 114, 3);
        function F56(a58) {
            if (!new.target) { throw 'must be called with new'; }
            const v59 = [-0.685155357392599,5.0];
            function F60(a62, a63, a64, a65) {
                if (!new.target) { throw 'must be called with new'; }
                const v66 = this.constructor;
                try { new v66(a63, F56, v66); } catch (e) {}
                v59.length &= 1;
            }
            new F60();
        }
        let v71 = -4294967295;
        v71--;
        let v73 = Float64Array;
        v73 = a46;
        b = v41;
        -4294967297n & Int32Array.length;
        try {
            v42.forEach(a46, v33);
        } catch(e77) {
            e77.name = e77;
            const v79 = new Float32Array(Float32Array, Float32Array, Float32Array);
            function f81() {
                return 160;
            }
            Object.defineProperty(v79, "h", { configurable: true, enumerable: true, get: f81 });
        }
        const v82 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v84 = Symbol.toPrimitive;
        const o88 = {
            toString(a86, a87) {
                a86 *= v84;
                return a46;
            },
        };
        o88.__proto__;
        const o106 = {
            [522675525n](a92, a93) {
            },
            "c": v41,
            valueOf(a95, a96) {
            },
            [v82](a98) {
            },
            [-1]: 2684,
            1073741824: v38,
            "maxByteLength": -268435456,
            "b": v71,
            "arguments": v82,
            [-4294967297n](a100, a101, a102, a103) {
                eval();
            },
            "e": v71,
            "e": v54,
            "arguments": v40,
            256: a48,
            ...v41,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: a47,
        };
        return o106;
    }
    const v107 = f50();
    v107.e = v107;
    try { Int8Array(3709, v42, a45); } catch (e) {}
    const v110 = new Int8Array();
    try { v110.find(v110); } catch (e) {}
    const v112 = v110.buffer;
    2147483648 - 2147483648;
    eval(eval);
    Uint32Array[2] = 1;
    const v120 = v112.slice(2147483648)?.constructor;
    try { new v120(""); } catch (e) {}
    %OptimizeFunctionOnNextCall(f50);
    const t132 = "find";
    t132[1] = "find";
    let v123;
    try { v123 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
    return v123 <= a47;
}
for (let v125 = 0; v125 < 10; v125++) {
    const v126 = f44(v42, v125, v125, v125);
    v126 || v126;
}
%OptimizeFunctionOnNextCall(f44);
f44(f44, v40, 2684, f44);
