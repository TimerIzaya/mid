const v5 = -65537 & -65537;
v5 >> v5;
let v7 = 14366;
v7 >>> v7;
const v9 = v7++;
v9 + v9;
15 >>> 15;
const v13 = 15 >>> 15;
v13 | v13;
v13 >>> v13;
const v17 = new Uint8Array(15);
let v18;
try { v18 = v17.entries(); } catch (e) {}
try { v18.next(); } catch (e) {}
try { new Uint32Array(-65537, v9, -65537); } catch (e) {}
new Uint32Array(16);
try { new BigUint64Array(-65537, Uint8Array, BigUint64Array); } catch (e) {}
let v27;
try { v27 = new BigUint64Array(16, 16, BigUint64Array); } catch (e) {}
try { v27.indexOf(v27); } catch (e) {}
try { v27.reduce(-4.0); } catch (e) {}
const v30 = new BigUint64Array(127);
try { v30.fill(v30); } catch (e) {}
function f32() {
    let v34 = 1.0 % 1.0;
    let v35 = -v34;
    v34--;
    v35++;
    const o42 = {
        ...1.0,
        set b(a39) {
            a39.b.b;
        },
    };
    o42.b;
    return o42;
}
try { f32.bind(5); } catch (e) {}
let v45;
try { v45 = f32(); } catch (e) {}
v45.b = v45;
const v46 = v45?.__defineGetter__;
try { new v46(5, 5); } catch (e) {}
for (let v48 = 0; v48 < 5; v48++) {
    v48 % v48;
    const v50 = f32();
    v50.b = v50;
    %OptimizeFunctionOnNextCall(f32);
}
