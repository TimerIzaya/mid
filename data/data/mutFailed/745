function f1(a2) {
    const o3 = {
        [a2]: a2,
    };
    return a2;
}
const v4 = new Set();
let v5 = [v4,Set,v4,v4,Set];
const v6 = [v5,v5,Set,Set];
const v7 = [v6,Set,v4,Set,Set];
v7.g = v7;
class C8 extends Set {
    n(a10, a11) {
        let v12;
        try { v12 = this(Set, v7, v5, Set); } catch (e) {}
        const v14 = Symbol.toStringTag;
        v4[v14] = v5;
        let [v15,,v16] = a10;
        try {
            new Int16Array(512);
            let v22;
            try { v22 = new a10(v12, Uint16Array, Uint16Array, v7); } catch (e) {}
            v14.__proto__;
            Symbol.split;
            const o25 = {
            };
            try {
                o25.h = v14;
            } catch(e26) {
            }
            try {
                const o27 = {
                };
                o27.h = v14;
                o27.b = v16;
            } catch(e28) {
            }
            try {
                const o29 = {
                };
                o29.h = v14;
                o29.b = v16;
                o29.d = v22;
            } catch(e30) {
            }
            try {
                const o31 = {
                };
                o31.h = v14;
                o31.b = v16;
                o31.d = Set;
            } catch(e32) {
            }
            const v33 = new Uint16Array(3);
            v33.indexOf();
            const o35 = {
            };
            v5.findLast(v12, o35);
        } catch(e37) {
        }
        return v12;
    }
    static {
        super.size;
        let v41 = -8;
        const v42 = --v41;
        v42 % v42;
        const v44 = Math.hypot(v42);
        v44 - v44;
        Math.sin(v41);
        const v49 = this[Symbol.hasInstance];
        v49.d = v49;
    }
}
const v50 = new C8();
try { v50.n(v50, v7); } catch (e) {}
new C8();
const v53 = new C8();
try { v53.keys(); } catch (e) {}
function f55() {
    return v7;
}
const v56 = f55?.constructor;
try { new v56(v53); } catch (e) {}
function f58() {
    return v4;
}
class C59 extends C8 {
    static {
        this.name = this;
        v5 += v5;
        const v61 = C8 % v6;
        v61 / v61;
        v61 && v61;
        f55 ^= f55;
    }
    static get a() {
        super.size &&= Set * f55;
        e = f58();
        try {
            this.fuck(this, v6, f55, "-256");
        } catch(e69) {
        }
        return Set;
    }
}
C59.d = C59;
const v70 = new C59();
new C59();
const v72 = new C59();
try { v72.add(v70); } catch (e) {}
5 / 5;
try { new Uint16Array(Uint16Array, v7, Set); } catch (e) {}
const v78 = new Uint16Array(5);
const o82 = {
    "c": Uint16Array,
    set g(a80) {
    },
    39: v78,
};
function F83() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
    } catch(e86) {
    }
}
class C87 {
    n(a89, a90) {
        let v91 = 10;
        for (;
            v91--;
            (() => {
                f58 >> v91;
                try {
                    v78.valueOf = f58;
                } catch(e94) {
                }
            })()) {
            try {
            } catch(e95) {
            }
        }
    }
}
C87.name;
const o99 = {
    "execution": "async",
};
gc(o99);
