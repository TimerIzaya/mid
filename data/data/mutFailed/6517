function f0() {
}
const v1 = /Q[^W]/s;
let v2 = /a(a\1)/umsy;
const v3 = /vVaa(?=bbb|bb)c\p{gc=Nd}*/gvdmsy;
class C5 extends f0 {
    #d;
    b = f0;
}
new C5();
new C5();
const t11 = -3;
new t11();
let v10 = 972897365;
class C11 extends f0 {
    [v2];
    toString(a13, a14, a15) {
        if (a14) {
            return;
        } else {
            v10 += -3;
        }
        return typeof v2 === "string";
    }
    [-1];
    10;
    [f0];
    #d;
    #g = C5;
    64 = v1;
    a = v1;
    static h;
}
const v19 = new f0();
const v20 = new C11();
const v21 = new C11();
function f22(a23, a24, a25) {
    const o37 = {
        "e": -1508324747,
        "a": a23,
        ...v19,
        "h": C5,
        ...a24,
        [-1508324747]: a23,
        ...v2,
        set d(a27) {
            if (a27) {
                try { new a27(a27, this, a23, a25, v3); } catch (e) {}
                super.f;
            } else {
                v2 &&= v2;
            }
            a23 = a25;
            let v30 = 0;
            while (v30 < 4) {
                v30++;
            }
        },
    };
    return o37;
}
f22(v1, v20, v3);
f22(v2, f22(v3, v21, v1), v2);
function f42() {
    function F43(a45, a46) {
        if (!new.target) { throw 'must be called with new'; }
        const v47 = this.constructor;
        try { new v47(); } catch (e) {}
        this.c = Float32Array;
    }
    new F43(f42, F43);
    new F43();
}
Float32Array.toString = f42;
class C52 {
    static [Float32Array] = undefined;
}
