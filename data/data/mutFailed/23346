[1.2125544156978305e+308,-1000000000000.0,2.0,-2.0,-4.0,983.694754009661,-1.6657421671177897e+308,-2.0];
const v1 = [-Infinity,0.0,-Infinity];
[1e-15,6.227091625069065,44112.28596078383,1.7976931348623157e+308,2.1856570736286685,0.7626247022073152];
function f3() {
    return v1;
}
const v5 = new WeakMap();
const v11 = new Int32Array(3552);
new Float64Array(211);
const v17 = new Uint8Array(127);
const v19 = [-1024];
for (let v20 = 0; v20 < 5; v20++) {
    delete v19[v20];
}
const v23 = new BigInt64Array();
let v24 = 10;
v24++;
Float64Array.length;
const v28 = new Float64Array();
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    a32 - a32;
    const v34 = this.constructor;
    v34.name = v34;
    const v36 = new Int16Array();
    const v37 = v36.lastIndexOf();
    v37 ^ v37;
    try { new v34(); } catch (e) {}
}
const v40 = new F29();
v40.constructor = f3;
const t31 = v40.constructor;
new t31();
const v43 = v28?.constructor;
try { new v43(); } catch (e) {}
new Float64Array(3);
function f54() {
    const o68 = {
        m(a56) {
            this.c = this;
            3938 & 3938;
            super.c = a56;
            v40[this] = v5;
            a56?.d;
            return v17;
            v11[BigInt64Array];
            Int8Array.name = Int8Array;
            const v62 = new Int8Array(3938);
            let v63 = 3;
            let v64 = 0;
            v64 >> v64;
            for (let i = 0; i < 5; i++) {
                [...v63] = v62;
                v64++;
            }
            const o67 = {
            };
            o67.h = o67;
        },
    };
    o68[Symbol.toPrimitive] = f54;
    o68.m(o68, o68, o68, f54, f54);
    return o68;
}
const v73 = f54()?.m;
try { new v73(v23); } catch (e) {}
try {
const t0 = 6;
t0(6, 6);
} catch (e) {}
