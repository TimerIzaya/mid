function f0() {
    function f2() {
        return 3.5885237423067196;
    }
    const v6 = new Uint32Array(16);
    function f7(a8, a9) {
        function f11(a12) {
            try {
                new f2();
            } catch(e14) {
            }
        }
        this.onmessage = f11;
        try {
            v6.length = 1073741824;
        } catch(e15) {
        }
    }
    const v18 = [Uint32Array,3.5885237423067196];
    const o19 = {
        "arguments": v18,
        "type": "function",
    };
    new Worker(f7, o19);
}
const v23 = /a$\P{Decimal_Number}/gvdims;
const v24 = v23[v23];
for (let i = 0; i < 5; i++) {
    const v25 = v23.source;
    try { v24(true, v25, v25, v25); } catch (e) {}
    Math.log(true + true);
}
new Uint8ClampedArray(6);
new Int8Array(Int8Array);
let v38 = 21370;
--v38 | 15;
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
const v45 = new F43();
Array(5);
Array[v45] = v45.d;
const o50 = {
    "construct": Array,
    "defineProperty": Array,
    "getPrototypeOf": Array,
    "preventExtensions": Array,
    "set": Array,
};
new Int8Array(122);
new Uint16Array(10);
function f55() {
    for (let i = 0; i < 5; i++) {
        for (let v56 = 0; v56 < 5; v56++) {
            class C57 {
            }
            for (let v58 = 0; v58 < 5; v58++) {
                v58 > v58;
            }
        }
    }
    return f55;
}
f55();
%OptimizeFunctionOnNextCall(f55);
const v61 = [-11,-9223372036854775807,-817733745,9007199254740991,16,12,-16238,536870912,-4294967297,65536];
new WeakMap();
for (let v64 = 0; v64 < 5; v64++) {
    function f65() {
        const v67 = ("1073741824").constructor;
        return v67(f65, v64, v67, "1073741824", v67);
    }
    f65();
    %OptimizeFunctionOnNextCall(f65);
}
const v70 = /[^7Y[a-zA-Z0-9]?]/vdmy;
for (let v71 = 0; v71 < 5; v71++) {
    function f72() {
        const v74 = isFinite(v61);
        try { v74.reduceRight(v70); } catch (e) {}
        v71(v71).toFixed();
        -10 ^ -10;
        class C80 {
        }
        return v61;
    }
    const v81 = f72();
    %OptimizeFunctionOnNextCall(f72);
    break;
    const v83 = Symbol.unscopables;
    v81[v83] = v83;
    ("zm")[1];
}
