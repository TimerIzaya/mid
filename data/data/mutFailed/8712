try { new BigInt64Array(-832267.262043573); } catch (e) {}
function f4() {
    return f4;
}
const v5 = /(?:a*)+q(?<a>.)/guds;
function f6(a7) {
    const v8 = a7.constructor;
    const v10 = new Uint8ClampedArray();
    const v12 = v10 ^ 3;
    try { v8(a7, f4); } catch (e) {}
    class C14 {
    }
    return v12;
}
for (let v15 = 0; v15 < 50; v15++) {
    f6(v5);
}
("MIN_VALUE")[Symbol.toStringTag];
class C21 {
}
class C23 {
    16 = "MIN_VALUE";
    static 127 = 9;
    o(a25, a26) {
        super.unscopables = a26;
        try {
            super.getUTCSeconds(9);
        } catch(e28) {
        }
        return 9;
    }
}
new C23(f6);
const v30 = new C23();
new C23(v5, v30);
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = a43.constructor;
    try { new v45(a42); } catch (e) {}
}
new F39(undefined, undefined, -128n);
const v49 = [-489438.2192946316,0.9060845133700562,653905.7470292451,-840351.5605714591,2.0330214359356185e+307,9.8815260133035,4.157539888800496,1.4885047144769007e+308,-475.44825279677866];
let v50 = -4294967297n;
v50++;
const v52 = [601759695];
function f54(a55, a56, a57, a58) {
    arguments[2] = arguments;
    function f60() {
        ("Vre").fixed();
        const o63 = {
            __proto__: a57,
            ..."Vre",
        };
        o63.length;
        return o63.valueOf();
    }
    const v66 = a57();
    v66[6] = v66;
    %OptimizeFunctionOnNextCall(f60);
}
for (let v67 = 0; v67 < 5; v67++) {
    f54(v52, v67, v67);
}
const v70 = [v49,v49,v49,v49,v49,"ceil"];
try { v49.reduce(v70); } catch (e) {}
C23.toPrimitive = v30;
const o72 = {
    ...undefined,
};
const o75 = {
    "execution": "async",
    "MIN_SAFE_INTEGER": "minor",
};
o75.a = o75;
const v76 = [-8.56356646356005,-1000000.0,1.7425732341240199,5.61396859017832,0.7210174662462943,-245812.9717227295,1.5188574374967393e+308,7.8735763720173e+307,-2.220446049250313e-16];
try { v76.map(); } catch (e) {}
const v78 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
function f79(a80, a81, a82, a83) {
    try { a82(a83, a82, a81); } catch (e) {}
    function f85() {
        const v86 = (522675525n).length;
        const v89 = new Int8Array(3938);
        let v90 = 3;
        [...v90] = v89;
        const v91 = v86 >>> v86;
        Uint32Array[2] = 1;
        new BigInt64Array(5);
        (v91 % v91) & "minor";
    }
    return f85;
}
f79(v78, f79, f79, v78);
f79();
