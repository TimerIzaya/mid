new Float32Array(8);
new Uint8Array(27);
let v8 = new Uint32Array(941);
Math.tanh(Float32Array);
+(--v8);
const v15 = Math.sign(v8);
[10000,65536,-10,7];
with ([-1,-9,4294967296,-4294967296,-1299887679,129,9007199254740990]) {
    length = -471496886;
    [-1.0,-548.2252459473251,-1000.0,0.4825759111945691];
    [1e-15,-651.7518749858689,-232314.5575934014,-582.2179897578177,1000.0,1000000000.0,800.3320946309093,822593.6084305479];
    [-1.7976931348623157e+308,-202.8261712216912,0.9165680168869597,443137.0234509064];
}
[-2147483647,15,-8,8,268435439,42808,-21536,-9007199254740992,10508];
const v25 = [-292.83735349768153,1000000.0,-Infinity];
function f27(a28) {
    try { a28(64, Uint32Array); } catch (e) {}
    g = Promise;
    Promise.prototype ||= v15;
    const v35 = ++a28;
    Math.clz32(v35);
    +(27 ** (10 % v35));
    a28 ** 27;
    +v35;
    const v42 = new Uint32Array(64);
    return v42.indexOf(v42, 64);
}
Object.defineProperty(Float64Array, "valueOf", { writable: true, value: f27 });
class C45 extends Uint8Array {
    constructor(a47, a48) {
        a47[1] = Float64Array;
        super(a47);
    }
}
new C45(v25);
