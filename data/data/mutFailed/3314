class C3 {
    static #p(a5) {
        ~-64168;
        -64168 - -64168;
        !a5;
        return "19";
    }
    static [-0.8818178904739575] = "19";
}
new C3();
new C3();
new C3();
new BigUint64Array(11);
new Uint8ClampedArray(4);
new Uint8ClampedArray(115);
let v25 = 4.0;
const v28 = new Date("undefined");
v28.getYear();
v25 **= v25;
const o36 = {
    set d(a32) {
        for (let v33 = 0; v33 < 5; v33++) {
        }
        this["cos"]();
    },
};
class C37 {
    constructor(a39) {
        o36.d = a39;
    }
}
const v41 = new WeakSet();
v41[4] = -8.576381465737261e+307;
new Map();
class C47 {
    e;
    constructor(a49, a50, a51, a52) {
        super[a50] = this;
        const o53 = {
        };
        function f54(a55, a56) {
            return BigInt64Array;
        }
        const o59 = {
            0: "1ya",
            162: "1ya",
        };
        o53.set = f54;
        function F61() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C64 extends F61 {
        }
        Symbol.match;
        this[this];
        v41[Symbol.asyncIterator];
    }
    [v28];
    #e;
    a;
    #g;
    static {
        for (let i74 = 0, i75 = 10;
            i74 < i75;
            (() => {
                function f79() {
                    return f79;
                }
                [601759695];
                const v81 = [1073741824,1073741823,1376142744,1073741825];
                function f83(a84, a85, a86, a87) {
                    function f89() {
                        return a84;
                    }
                    const v90 = f79();
                    const v92 = new Int8Array();
                    const v95 = new Uint32Array(4);
                    [v95];
                    const v99 = BigUint64Array * 536870887;
                    v99 ** v99;
                    function f101(a102, a103) {
                        return v90;
                    }
                    f101();
                    f101();
                    const v106 = v92.buffer;
                    Object.defineProperty(v106, "constructor", { writable: true, configurable: true, value: Date });
                    const v108 = new v41();
                    let v109 = 1000000000000.0;
                    v109--;
                    v106.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f89);
                    let v113;
                    try { v113 = v81["find"](..."find", a87, ...i75, ...v81, ...522675525n); } catch (e) {}
                    Symbol("find");
                    const v117 = new C37();
                    const o118 = {
                        ...v117,
                    };
                    v113 <= a86;
                    return v108;
                }
                for (let v120 = 0; v120 < 10; v120++) {
                    f83();
                    [5,5];
                    function F124() {
                        if (!new.target) { throw 'must be called with new'; }
                        this.c = 1163987790;
                    }
                    const v127 = new F124();
                    F124.c = v127;
                }
                i74++;
            })()) {
        }
    }
}
