const v1 = new Date();
function f2(a3, a4) {
    const o9 = {
        "e": a4,
        ...v1,
        get h() {
            this >> Date;
            Date[f2] = Date;
            return v1["getDate"]();
        },
        "f": a4,
        "b": a4,
        "c": a3,
        "h": v1,
        "a": a4,
        "g": v1,
    };
    return o9;
}
const v10 = f2(f2, Date);
const v11 = v10(Date, Date);
const v12 = f2(f2, v1);
function f13() {
    return v11;
}
new Uint16Array(8);
new Float32Array(226);
new Uint8ClampedArray(257);
let v26;
try { v26 = ("function")["-268435456"](); } catch (e) {}
const v27 = v26 + v26;
v27 >> v27;
class C31 {
    static toString(a33) {
    }
}
try { new C31(); } catch (e) {}
const v38 = f2.constructor;
try { v38(); } catch (e) {}
const v40 = new C31();
v40.f;
const v42 = new C31();
const t42 = v42.constructor;
new t42();
try { v42.constructor(); } catch (e) {}
const v46 = new C31(v40, v12);
const v47 = v12.constructor;
let v48;
try { v48 = new v47(); } catch (e) {}
const v49 = v48?.__defineGetter__;
try { new v49("toStringTag", "toStringTag"); } catch (e) {}
const v51 = v48?.constructor;
new v51(v10, v51);
const v53 = new C31();
v53.constructor;
v53.__defineGetter__;
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this?.constructor;
    let v63;
    try { v63 = new v62(a58, a58, a58); } catch (e) {}
    try { a59.isPrototypeOf(C31, v63); } catch (e) {}
}
const v65 = F56?.bind;
try { v65(); } catch (e) {}
new F56("toStringTag", v46);
new F56(v42, "flags");
const v69 = new F56("HkAXC", "toStringTag", "toStringTag", "HkAXC");
let v72 = -128 % -128;
v72++;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v75 = [601759695];
const v76 = [1073741824,1073741823,1376142744,1073741825];
function f78(a79, a80, a81, a82) {
    function f84() {
        const o99 = {
            [522675525n](a87, a88) {
                Int16Array[0] = -27833;
            },
            get d() {
                return this;
            },
            "maxByteLength": -128,
            "c": v75,
            valueOf(a93, a94) {
            },
            toString(a96, a97, a98) {
            },
        };
        o99.toString(v69, v69, v69);
    }
    f84();
    const v103 = new Int8Array();
    v103.buffer;
    %OptimizeFunctionOnNextCall(f84);
    let v106;
    try { v106 = v76["find"]("find", a82, v75, v76); } catch (e) {}
    v106 <= a81;
    return arguments;
}
try { f78("HkAXC", v75, "flags", "HkAXC"); } catch (e) {}
for (let v109 = 0; v109 < 5; v109++) {
    f78();
}
