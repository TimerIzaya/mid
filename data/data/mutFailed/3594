function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1073741824;
    } catch(e3) {
    }
    try {
        this.d = 1073741824;
    } catch(e4) {
    }
    try {
        this.e = 1073741824;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 extends F0 {
    constructor(a11) {
        super();
        for (let v12 = 0; v12 < 32; v12++) {
            const v14 = "p" + "p";
            v14[v14] = v12;
        }
    }
    static n(a16, a17) {
        this * F0;
        const v19 = super[v8];
        const v20 = v6;
        try {
            v20.toString = v19;
        } catch(e21) {
        }
        return this;
    }
}
const v22 = new C9(v7);
new v7(C9);
new C9(v6);
new Float32Array(4096);
new Uint16Array(1);
async function* f32(a33, a34) {
    return -9223372036854775807;
}
const v35 = v22.DataView;
try { new v35(); } catch (e) {}
new Uint32Array(214);
class C40 {
    #m(a42, a43) {
        class C44 {
            e;
        }
    }
}
const o50 = {
    "maxByteLength": 536870889,
};
class C51 {
}
