function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(this, this); } catch (e) {}
    try {
        this.c = 15;
    } catch(e8) {
    }
}
-2053573105 || -2053573105;
class C12 {
}
new Date();
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a19;
    } catch(e20) {
    }
    const v22 = new Uint16Array(-2053573105);
    new Int16Array(v22);
    class C25 {
        static {
            const v27 = this.name;
            this.toString().lastIndexOf(v27);
        }
    }
    try {
        this.d = a19;
    } catch(e30) {
    }
}
new BigInt64Array(1073741824);
const o36 = {
    "maxByteLength": 1814769353,
};
new SharedArrayBuffer(12, o36);
const v39 = new F16(-4294967295n, -1340096485n);
const v40 = new F16(-1340096485n, -21660n);
const v41 = new F16(-21660n, -1340096485n);
function f43(a44, a45, a46) {
    const o67 = {
        p(a48, a49) {
            function f50() {
                return a48;
            }
            function F56(a58, a59) {
                if (!new.target) { throw 'must be called with new'; }
                this.h = -1.0458776802029855e+308;
                this.e = a58;
            }
            const v60 = new F56(1e-15);
            const v61 = new F56(-559.2515874252856);
            v60.__proto__ = v61;
            const o62 = {
                "maxByteLength": 2672,
            };
            const v64 = new ArrayBuffer(4, o62);
            new AggregateError(v64);
            return F16;
        },
    };
    return o67;
}
const v68 = f43(v40, v41, -1340096485n);
f43(v39, v41, -4294967295n);
const v70 = f43(v39, v41, -1340096485n);
BigUint64Array.d = -1340096485n;
const v72 = new BigUint64Array();
v72.d = v68;
function F74(a76, a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    function f80(a81) {
        function F82(a84, a85, a86, a87) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = Float32Array;
            } catch(e88) {
            }
            try {
                this.g = F74;
            } catch(e89) {
            }
        }
        new F82(v41, v39, v40, -1340096485n);
        new F82(v40, v70, v40, -4294967295n);
        new F82(v39, F82, v40, -21660n);
        return a77;
    }
    this.constructor = f80;
    const v93 = this.constructor;
    try { new v93(v72); } catch (e) {}
    function F95(a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
    }
    Math.asin();
    new Date(-9223372036854775807);
    a76.d = a76;
}
new F74(BigUint64Array);
