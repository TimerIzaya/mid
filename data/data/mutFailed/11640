const v2 = new BigInt64Array(1568);
const v5 = new Int32Array(4);
const v8 = new BigUint64Array(1890);
class C9 extends BigInt64Array {
    772 = v8;
    #m(a11, a12, a13) {
        function f14(a15, a16, a17, a18) {
        }
    }
    set g(a20) {
        const t10 = 4;
        super.d = t10();
    }
    #valueOf(a23, a24) {
        try { a23(a23, this, a24, a23, this); } catch (e) {}
        try {
            v5.b = v8;
        } catch(e26) {
        }
        return v8;
    }
    [v2] = v2;
}
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = -(-7);
    v30 ** v30;
}
new C9();
new C9();
function f34() {
}
const v35 = [601759695];
const v36 = [1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    function f44() {
        return a39;
    }
    const v45 = f34();
    const v47 = new Int8Array();
    function f48(a49, a50) {
        const o52 = {
            get d() {
            },
        };
        return v45;
    }
    f48(f48());
    const v55 = v47.buffer;
    new Int8Array();
    let v58 = 1000000000000.0;
    v58--;
    v55.slice(2147483648);
    %OptimizeFunctionOnNextCall(f44);
    let v62;
    try { v62 = v36["find"](..."find", a42, ...v35, ...v36, ...522675525n); } catch (e) {}
    Symbol();
    const v66 = new Uint8ClampedArray();
    const o67 = {
        ...v66,
    };
    v62 <= a41;
    return arguments;
}
new C9();
function f71() {
    const o74 = {
    };
    gc(o74);
    function f76() {
    }
    const v78 = ([9007199254740990,-16,376821973,268435456])[1];
    function F79() {
        if (!new.target) { throw 'must be called with new'; }
        this.constructor = f76;
        try { this.constructor(); } catch (e) {}
        this.b = 4294967296;
        try {
            function F83() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v85 = new F83();
            const v86 = new F83();
            const v87 = v86.__defineSetter__;
            try { v87(); } catch (e) {}
            function f89(a90, a91) {
                const o92 = {
                    "e": v85,
                };
                return o92;
            }
            const v93 = f89();
            f89();
            function f95() {
                return f89;
            }
            f95.b = v78;
            f95.b = f95;
            const v98 = new Float32Array();
            for (const v99 of v98) {
                v99 >>> v99;
                Object.defineProperty(v93, Float32Array, { configurable: true, enumerable: true, get: f89, set: f95 });
            }
            this.g = 4294967296;
        } catch(e101) {
        }
        this.f = 4294967296;
    }
    const v103 = Array(4087, -2.220446049250313e-16);
    const v106 = new Int8Array(3);
    const v109 = new Float32Array(127);
    v106.f = v109;
    v103[4037] = v103;
    return Array;
}
%PrepareFunctionForOptimization(f71);
Math.sinh(-3.3474037991793697);
function F113() {
    if (!new.target) { throw 'must be called with new'; }
    class C115 {
    }
    for (let v116 = 0; v116 < 25; v116++) {
        const v117 = [1073741824,1073741823,1376142744,1073741825];
        function f118(a119, a120, a121, a122) {
            try { v117["find"](); } catch (e) {}
            return C115;
        }
        for (let v125 = 0; v125 < 5; v125++) {
            f118(v125, f118);
        }
    }
}
f71();
%OptimizeFunctionOnNextCall(f71);
function f128() {
    const o133 = {
        ["8"](a131, a132) {
        },
    };
    return o133;
}
f128();
f71();
