function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 2147483649;
    } catch(e3) {
    }
    try {
        this.f = 2147483649;
    } catch(e4) {
    }
    const v5 = [601759695];
    const v6 = [1073741824,1073741823,1376142744,1073741825];
    try { v6["find"](..."find", F0, ...v5, ...v6, ...522675525n); } catch (e) {}
    try {
        this.c = 2147483649;
    } catch(e10) {
    }
}
new F0();
new F0();
new F0();
new Uint8Array(15);
81 - 81;
function f19() {
    return f19;
}
Object.defineProperty([-3,257], 10, { writable: true, configurable: true, enumerable: true, set: f19 });
class C22 {
    #valueOf(a24, a25, a26, a27) {
        this.#valueOf();
    }
}
BigUint64Array.length;
const v30 = new BigUint64Array(81);
81 >> 81;
eval("");
const v36 = [512,2147483649,-4294967296,4455,2147483648,-5];
try { v36.groupToMap(Uint32Array); } catch (e) {}
const v39 = -2;
const v43 = new Int16Array(2183);
const v46 = new Int16Array(8);
async function f47(a48, a49, a50) {
    a49 >> a49;
    a50++;
    delete v46[-1000000000.0];
    let [v54,v55,...v56] = v43;
    v54 >> v54;
    let v58 = v43[5];
    v58--;
    v36.length;
    f47++;
    try { Math.atan2(Math, Uint8Array); } catch (e) {}
    14 ^ Uint8Array;
    const v66 = -v39;
    v66 - v66;
    Math.log(v66);
    Math.pow(14, 14);
    await v55;
    return Uint8Array;
}
new Float32Array(1000);
for (let v74 = 0; v74 < 10; v74++) {
    function F76(a78, a79) {
        if (!new.target) { throw 'must be called with new'; }
        const v80 = this?.constructor;
        try { new v80(v30, Uint8Array); } catch (e) {}
        this.b = "b";
        this.d = a79;
    }
    try { new F76(F76, 15); } catch (e) {}
    const v83 = new F76();
    const v84 = v83?.constructor;
    try { new v84(F76, 1000); } catch (e) {}
    const o86 = {
        ...v83,
    };
}
