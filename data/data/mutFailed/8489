let v5 = 4;
v5--;
const v9 = 3n ^ 3n;
const v11 = [4.0,-1.7976931348623157e+308];
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F12(F12, v11, F12);
const v18 = new F12(v17, v17, v17);
v18.__proto__ = v11;
const v20 = ([-1.5261244710738749e+308,-2.0,4.6649866423845054])?.__defineSetter__;
try { new v20(51690, v5); } catch (e) {}
[0.9223231824639553,9.23892535206402e+307,1000000.0,-5.0,-1.9839036445705673,0.16080810963808856,1.2684686255264315e+308,-1.3645747131608907e+308,Infinity];
function f23(a24, a25, a26) {
    a24.fill();
    return a25;
}
new F12();
const v30 = [-2.220446049250313e-16,1000.0,0.2541576321120541,0.35339924195428585,-563.0331850930861,-5.0,-4.0,-2.908360686084947];
function f31(a32) {
    const o33 = {
        9: v9,
        "f": a32,
    };
    return o33;
}
const v34 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
~2.220446049250313e-16;
v34[16] = 2.220446049250313e-16;
delete v34[2.0];
const v39 = f23();
v39[9] = v39;
const v40 = f31();
v40[9] = v40;
v40[9] = v40;
f31()[9];
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    let v46;
    try { v46 = Array.from(v30); } catch (e) {}
    try { v46.reverse(); } catch (e) {}
    const v49 = 51690 % -12302;
    v49 / v49;
    Array(-12302);
} catch(e52) {
    const v53 = e52.stack;
    let v54;
    try { v54 = v53.fontcolor(v53); } catch (e) {}
    v54[106];
}
