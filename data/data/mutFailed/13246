const o7 = {
    o(a3) {
        const o5 = {
        };
        gc(o5);
        return BigUint64Array;
    },
};
new Int16Array(1026);
Uint32Array.d = Uint32Array;
const v13 = new Uint32Array();
-4294967297n << -4294967297n;
function f16(a17, a18, a19, a20) {
    const v21 = o7.keys;
    try { v21.constructor(a18); } catch (e) {}
    try { v21(); } catch (e) {}
    function f24() {
        return Uint32Array;
    }
    const t19 = "4294967296";
    t19.constructor = f24;
    const v25 = (-4294967297n).constructor;
    v25.arguments = v25;
    if (a17 > v25) {
        const t24 = "4294967296";
        t24.toString = a19;
    }
    const o34 = {
        [-4294967297n](a28, a29, a30, a31) {
            eval();
        },
    };
    return -4294967297n;
}
f16.length = v13;
f16(v13);
Int32Array.name = Int32Array;
new Int32Array(2972);
const v39 = -512;
const v40 = v39 === v39;
new Float64Array(512);
([268435439,1073741824,129,9007199254740990,1679410669,-8,536870888,739124317,-1024,536870889])[5];
const v45 = [4294967295,-12,15,5,536870888,1073741825,9,45851,-9007199254740992];
const v47 = new Float32Array();
v47.fill();
const o53 = {
    "h": BigUint64Array,
    ...v40,
    get c() {
        return this;
    },
    set d(a52) {
    },
    "d": Uint32Array,
};
o53.h;
const v55 = [-2147483648,-5,-8,1024,1,16,-1073741824];
try { v55.fill(v45); } catch (e) {}
const v58 = this.Atomics;
try { v58.sub(-4294967297n, v58, v58); } catch (e) {}
const v60 = this.Realm;
try { v60.owner(); } catch (e) {}
try { v60.owner(); } catch (e) {}
