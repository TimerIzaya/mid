function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 547981373;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
try { new Float32Array(Float32Array, 7, v4); } catch (e) {}
new Float32Array(7);
1 & 1;
new Uint16Array(1);
let v15 = 75;
v15++;
const v18 = new Uint8ClampedArray(v15);
v18[4] = v18;
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    a21.c;
    try {
        this.b = a21;
    } catch(e24) {
    }
    try {
        this.a = a21;
    } catch(e25) {
    }
    try {
        this.g = a21;
    } catch(e26) {
    }
}
const v27 = new F19(v5, 7);
new F19(v6, 1);
new F19(v6, 1);
class C31 extends Float32Array {
    9;
}
new C31();
new C31();
new C31();
const o37 = {
    "maxByteLength": 536870889,
};
const v39 = new SharedArrayBuffer(217, o37);
try { v39.grow(); } catch (e) {}
Uint8ClampedArray.name = Uint8ClampedArray;
-1304034723 - -1304034723;
4 / 4;
try { new Uint8ClampedArray(1024, Float32Array, 7); } catch (e) {}
try { ("puWUt").codePointAt(v27); } catch (e) {}
function F62(a64) {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = this?.constructor;
    try { new v65(2.220446049250313e-16); } catch (e) {}
    a64 * a64;
}
F62.prototype;
const v69 = new F62(536870889);
v69.length = v69;
with (v69) {
    function F70(a72, a73, a74) {
        if (!new.target) { throw 'must be called with new'; }
        const t65 = this.__lookupSetter__;
        t65(Float64Array);
    }
    let v77 = 10;
    v77 ^ v77;
    for (;
        (() => {
            const v79 = v77--;
            v79 >>> v79;
            return v79;
        })();
        ) {
    }
}
