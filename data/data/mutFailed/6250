Array(-12302);
function f4() {
    return f4;
}
f4();
f4.constructor;
let v9 = 257;
v9--;
new Float32Array(v9);
new Uint16Array(57);
BigUint64Array.e = BigUint64Array;
const v18 = new BigUint64Array(16);
try { v18.some(Uint16Array); } catch (e) {}
const v21 = [-1.7976931348623157e+308,-0.0,-1000000000000.0,18.192610755442843,-7.676824412389783,1000000000.0,-3.0];
const o22 = {
    __proto__: v21,
};
try { o22.find(-4096); } catch (e) {}
o22.unshift();
function f25(a26, a27, a28) {
    const o29 = {
        "toPrimitive": a28,
    };
    return o29;
}
const v32 = Symbol.toPrimitive;
function F34() {
    if (!new.target) { throw 'must be called with new'; }
}
const v36 = new F34();
const v37 = [F34,F34,F34];
v37.some();
const o40 = {
    __proto__: v37,
    "e": v36,
    get a() {
        return this;
    },
};
Symbol.for(v32.description);
const v44 = new BigUint64Array();
const v45 = /o(\xed\xb0\x80)\x01/gudims;
const v47 = Symbol.toPrimitive;
9007199254740991n * 9007199254740991n;
const v53 = new Int32Array(8);
v53[3] = 57;
Symbol.for(v47.description);
v45[v47] = v47;
const v56 = /(xyz{93})/gusy;
try { v56.compile(v44, v45); } catch (e) {}
function F59(a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    const v63 = this.constructor;
    function f65(a66) {
        return Uint8ClampedArray;
    }
    Reflect.construct(f65, [Uint8ClampedArray], Uint8ClampedArray);
    return Uint8ClampedArray;
    try { new v63(); } catch (e) {}
    const o72 = {
        ..."boolean",
    };
    function f73() {
        return ("D")[0];
    }
    f73();
    f73();
    a61 & a61;
    function F79() {
        if (!new.target) { throw 'must be called with new'; }
        this.h = 9007199254740991;
    }
    const v82 = new F79();
    const o85 = {
        set h(a84) {
        },
        __proto__: v82,
    };
    for (const v86 in o85) {
    }
}
const v87 = new F59();
try { v87.of(); } catch (e) {}
new F59();
const v92 = new Uint32Array(2091);
for (const v94 in v92[0]) {
}
const v95 = new F59();
v95.a = v95;
