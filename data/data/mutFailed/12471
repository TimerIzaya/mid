class C3 {
    [0.2628886694781333];
    static #o(a5) {
        try {
            this.g = 0.2628886694781333;
        } catch(e6) {
        }
        const v20 = `
            try {
                new Float64Array(127);
            } catch(e22) {
            }
        `;
        return 0.2628886694781333;
    }
    #f = -363287.55266704876;
    2 = 0.2628886694781333;
    static #b;
    [0.7003039480076092] = 0.7003039480076092;
    static {
        try {
            this.#b -= 0.7003039480076092;
        } catch(e24) {
        }
    }
}
new C3();
new C3();
new C3();
/P*/gvdis;
/K/gdms;
/xyz{1,32}?5a\ScB/disy;
function f35() {
    return WeakMap;
}
("getFloat32")["search"](..."getFloat32", ..."search", ..."search", "getFloat32", ..."search");
const v41 = new Set();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o51 = {
            o(a47) {
                const o49 = {
                };
                return gc(o49);
            },
        };
        this.d = a44;
    } catch(e52) {
        for (let [v53,v54] of a44) {
        }
    }
    const t52 = 4294967296;
    t52.h = v41;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v61 = [WeakSet];
        const v62 = new F42();
        this.b = v61;
        const v64 = new Map();
        v61[4294967296] = Set;
        const v65 = [v62];
        const v66 = [v65,v65,v62,v64];
        [-256n,v66,-41535,v64,v66];
    } catch(e68) {
    }
}
F42.arguments;
%PrepareFunctionForOptimization(f35);
const v70 = f35();
class C71 extends v70 {
    d;
    static {
    }
    constructor(a74, a75) {
        const v76 = this.constructor;
        try { new v76(); } catch (e) {}
        const v79 = Math.atan2(this);
        v79 ** v79;
    }
    static [v70];
    [0.7003039480076092];
    [0.2628886694781333] = "e";
}
new C71();
new C71();
new C71();
%OptimizeFunctionOnNextCall(f35);
f35();
