const v1 = new Date();
async function* f4(a5, a6) {
    const o7 = {
    };
    try {
        o7.h = a6;
    } catch(e8) {
    }
    try {
        const o9 = {
        };
        o9.h = a6;
        o9.c = Date;
    } catch(e10) {
    }
    try {
        const o11 = {
        };
        o11.h = a6;
        o11.c = Date;
        o11.b = v1;
    } catch(e12) {
    }
    try {
        const o13 = {
        };
        o13.h = -2;
        o13.c = Date;
        o13.b = -16257;
    } catch(e14) {
    }
    await a5;
    try {
        yield* [Date,v1,a6];
    } catch(e17) {
    }
    return -16257;
}
f4(-16257, f4);
-16257 * -16257;
try { ("tXMOV").indexOf(v1); } catch (e) {}
1532 >> 1532;
let v28;
try { v28 = new Uint16Array(1532, Uint16Array, v1); } catch (e) {}
const v29 = new Uint16Array(1532);
const v30 = v29[1135];
let v31 = 5;
new BigInt64Array(v28);
const v36 = new Uint16Array(138);
let v41 = Math.cbrt(v31--);
v41--;
Math.asinh(8);
Math.atan(4.568015807751923);
const v46 = Math.atanh(!4.568015807751923);
v36[95] = v36;
const v47 = /(xyz??)/vm;
const v48 = /}[a-b-c]/gdimy;
class C49 {
    get e() {
    }
    #c = v47;
}
const o51 = {
    "h": 8,
    __proto__: v48,
};
try { new v30(v46, Uint16Array); } catch (e) {}
C49.d = C49;
new C49();
class C54 {
}
let v55;
try { v55 = C54.call(); } catch (e) {}
new C54();
1 + 1;
class C59 {
}
try { C59.bind(C59); } catch (e) {}
new BigUint64Array(10);
Float64Array.e = Float64Array;
for (const v66 in v55) {
    let v67 = 10;
    for (let i = 0; i < 5; i++) {
        const v68 = v67--;
        !(v68 > v68);
    }
    new Float64Array(2147483647);
}
