function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a5;
    } catch(e6) {
    }
    try {
        this.e = a5;
    } catch(e7) {
    }
}
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty();
    const v13 = this.constructor;
    try { new v13(); } catch (e) {}
}
new F8();
const v16 = new F3(49757n);
const v17 = new F3(49757n);
const v18 = new F3(49757n);
class C19 extends F3 {
    valueOf(a21, a22) {
        let v25 = 536870887;
        const v27 = v25++;
        Math.random();
        Math.cos(a22);
        Math.min(3);
        Math.asin(v27 >> this);
        return 49757n;
    }
    d = v18;
    [49757n];
}
new C19();
const v34 = new C19();
const v35 = new C19();
class C37 {
    toString(a39) {
        this.e *= 0.8199829542463926;
    }
}
function f41(a42, a43) {
    const o57 = {
        [a43](a45, a46, a47) {
            a46[Symbol.iterator] = a45;
            super.f;
            return this;
        },
        3: a43,
        [49757n]: F3,
        2: v35,
        p(a52, a53, a54) {
            a54 = a43;
            super[a53] = a42;
            a43 in a54;
            return a54;
        },
    };
    return o57;
}
C19[v18] = F8;
function f58() {
    return v34;
}
const o61 = {
    "maxByteLength": 247,
};
const v63 = new SharedArrayBuffer(34, o61);
new BigUint64Array(v63);
f41(v35, v18);
const v67 = f41(v16, v17);
for (let v68 = 0; v68 < 32; v68++) {
    v67["p" + v68] = v68;
}
f41(v35, v16);
class C72 {
}
const v73 = new C72();
const v74 = new C72();
const v77 = new Int32Array(C72, 129, 129);
const v79 = new BigInt64Array(129);
const v80 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v81;
try { v81 = v80.some(); } catch (e) {}
const v82 = [-1.7976931348623157e+308];
function f83(a84, a85, a86, a87) {
    const o106 = {
        toString(a89, a90, a91) {
            let v92;
            try { v92 = this.toString(a90, v81, a89); } catch (e) {}
            a89 = v92;
            a91 = v73;
            let {"f":v93,"g":v94,"maxByteLength":v95,} = o61;
            delete v17[v81];
            this.__proto__;
            function f99(a100, a101, a102) {
                return v73 == v74 ? v73 : v74;
            }
            f99(255n, v92);
            a86[a85] = a84;
            return v81;
        },
    };
    return o106;
}
const v107 = f83(v79, 129, v82);
const v108 = f83(v77, 129, v80);
for (let v109 = 0; v109 < 5; v109++) {
    16 | 16;
    function F112(a114, a115) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = a115;
    }
    new F112(F112, F112);
    v108 % v107;
}
