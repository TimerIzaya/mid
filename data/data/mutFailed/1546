[-4294967295,-65537];
[9007199254740990];
[-771327193,-2147483649,-9007199254740992,-4294967297,352071658,-2119247804];
[692.4931323249295];
[-253.8156585054627,-108.73783525118358,1.7976931348623157e+308,0.4755650529001437,0.8998791710652877,-3.0,692785.7833415887];
for (let v5 = 0; v5 < 5; v5++) {
    Math.asin(-3 ^ v5);
}
[0.006041031126737928,1000000.0,-9.063156732184442,1.0,1e-15,910.5590680618188,-5.0,-676.8280581101062,-702721.5843741694,2.0];
new BigInt64Array(15);
function f14() {
    const o23 = {
        toString(a19, a20) {
            try {
                super.getMinutes();
            } catch(e22) {
            }
            return "object";
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o23;
}
f14();
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this?.constructor;
    try { new v30(F25, F25, f14); } catch (e) {}
    a28.g = a28;
    try {
        this.d = a29;
    } catch(e32) {
    }
    try {
    } catch(e33) {
    }
}
new Uint8ClampedArray(9);
function f38() {
    Reflect.construct(Symbol, [Reflect,Reflect,Reflect,Reflect,Reflect]);
    return f38;
}
new BigInt64Array(3211);
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 2;
}
new F45();
new Int32Array();
new Float64Array(256);
const v60 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
const v61 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
const v62 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
class C63 {
    constructor(a65, a66, a67, a68) {
        const v69 = this.constructor;
        try { new v69(v62, F45); } catch (e) {}
        v62 >>> a66;
        a67 >>> -0.0;
        const v74 = new f38();
        const o80 = {
            toString(a77, a78, a79) {
                Object.defineProperty(v74, a77, { writable: true, configurable: true, set: Array });
                return Array;
            },
        };
        try { o80.toString(o80); } catch (e) {}
    }
}
const v82 = new C63(v60, 659.0540372978887, v60);
new C63(v82, 2.220446049250313e-16, v61, v62);
