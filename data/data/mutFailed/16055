const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = this;
    } catch(e3) {
    }
    try {
        this.g = v0;
    } catch(e4) {
    }
}
const v5 = new F1();
new F1();
const v7 = new F1();
class C8 extends F1 {
    static set e(a10) {
        super[a10] = a10;
        super[a10] = this;
        const v11 = v5.__proto__;
        function f12() {
            return v11;
        }
    }
    [v5];
    static #a = v5;
    static #e = v7;
    #g;
    e = v5;
}
new C8();
const v14 = new C8();
new v14();
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
}
const v24 = new F20();
function f25() {
    return f25;
}
const v26 = /{}(x)(x)(x)\4*a{0}a|b/msy;
const v29 = new BigUint64Array();
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = a32.constructor;
    try { new a33(BigUint64Array, v29, v29); } catch (e) {}
    a34[1];
    function f39(a40, a41) {
        a41 / a41;
        BigUint64Array[1];
        arguments.toString = a40;
    }
    try { f39(f25, v26); } catch (e) {}
    f39(v35, 8077n);
}
const v47 = new F30(BigUint64Array, 4, v29);
const t56 = v47.constructor;
new t56(v24, v24, v26);
