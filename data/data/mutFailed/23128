const v0 = [];
try { ("-6").indexOf(v0); } catch (e) {}
let v5 = 15;
v5--;
let v7 = 536870887;
v7 >> v7;
v7--;
let v10 = 1986265769;
v10--;
const v12 = [-2.2250738585072014e-308,34401.33749437414,412.23987385351643,-1.0,-312949.42394553125,-9.628861803264861,1.7976931348623157e+308];
v12[4] = v12;
[1000000000.0,-1.4070715520443671e+308,-2.220446049250313e-16,2.220446049250313e-16,-1000000000000.0,6.8572596979016645,-7.480114596767122];
const v14 = [-576.3996116734731,-94528.19684385892,-1.5337293914182249e+308,0.8345938079571347,-508664.4671897571,-130.68510951005783,-226.30682885416502];
try { v14.some(v7); } catch (e) {}
const v17 = new WeakSet();
164140152 !== 164140152;
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(a25); } catch (e) {}
    a24--;
    a25--;
    ~a22;
    a24++;
}
F20.length;
const v32 = new F20(164140152, F20, 164140152, 164140152);
const v33 = v32?.propertyIsEnumerable;
try { new v33(v0); } catch (e) {}
const v35 = v32?.constructor;
let v36;
try { v36 = new v35(WeakSet, WeakSet, v5, v17); } catch (e) {}
const v37 = v36?.constructor;
let v38;
try { v38 = new v37("setUTCSeconds", v12, v0, v12); } catch (e) {}
522675525n ^ 522675525n;
for (let v41 = 0; v41 < 5; v41++) {
    function f42() {
        const v44 = ("Vre").strike();
        try { v44.toLocaleLowerCase(); } catch (e) {}
        let v46;
        try { v46 = v44.toWellFormed(); } catch (e) {}
        const v47 = v44.link();
        try { v47.trimLeft(); } catch (e) {}
        const v50 = v47.includes(164140152) || 164140152;
        v50 || v50;
        const v53 = Array();
        const v55 = v53.unshift(v32, v41, F20, v41, v53.pop());
        v55 & v55;
        let v58;
        try { v58 = new Set(); } catch (e) {}
        try { v58.values(); } catch (e) {}
        const v60 = new Set();
        const v61 = v60.add();
        let v62;
        try { v62 = v61.add(v14); } catch (e) {}
        v62.size = v62;
        v61.entries();
        class C64 {
        }
        const v65 = new C64();
        const v66 = v65?.constructor;
        try { new v66(); } catch (e) {}
        let v68;
        try { v68 = v46(v47); } catch (e) {}
        function f69() {
            return v68;
        }
        const v70 = f69?.constructor;
        try { new v70(v41); } catch (e) {}
        Math.c = Math;
        Math.expm1(v41);
        const v75 = -388931552 & -388931552;
        v32 | v41;
        Math.exp(-388931552);
        v32 << -388931552;
        Math.imul(v75 & v75, v68);
        v65.hasOwnProperty(v47);
    }
    v38();
    %OptimizeFunctionOnNextCall(f42);
}
