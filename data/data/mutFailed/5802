function f0() {
    const o13 = {
        p(a5, a6) {
            try { a6(-256, 0.0); } catch (e) {}
            let v9;
            try { v9 = this["getInt32"](); } catch (e) {}
            try {
                this.fuck(1000000000.0, [this,"getInt32",a6,v9,0.0]);
            } catch(e12) {
            }
            return this;
        },
    };
    return o13;
}
const v14 = f0();
const v15 = f0();
function f16(a17, a18) {
    function f20(a21) {
    }
    this.onmessage = f20;
    let v26 = 128;
    let v27 = 536870888;
    Math.asinh(f0);
    +v27;
    ++v26;
    !v26;
    v27++;
    Math.log10(v26);
    ++v26;
}
[v14,v14];
const o39 = {
    "arguments": v15,
    "type": "function",
};
new Worker(f16, o39);
const v41 = f0();
class C42 {
    g = f0;
    static #e = f0;
    [v14];
    static #p(a44) {
        try {
            a44.h = v15;
        } catch(e45) {
        }
        return v41;
    }
    static #g;
}
const v46 = new C42();
const v47 = new C42();
const v48 = new C42();
function f49() {
    return v48;
}
function f50() {
    return v48;
}
function f51(a52, a53, a54) {
    const o61 = {
        "b": a53,
        "h": f49,
        "f": v46,
        set d(a56) {
            const v57 = a53.g;
            super.f;
            function f59() {
                return v57;
            }
            new f0();
        },
    };
    return o61;
}
f51(v48, v46, v46);
try {
    o39.fuck(C42, 49654n, -731.130667594698);
} catch(e66) {
}
f51(f0, C42, v47);
f51(C42, v46, v46);
function f69() {
    for (let v70 = 0; v70 < 5; v70++) {
        v47 & v70;
    }
    return f69;
}
%OptimizeFunctionOnNextCall(f69);
f69();
