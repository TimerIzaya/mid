const v0 = [1000.0,2.220446049250313e-16];
[-0.0,-0.0,-7.995435761953422,0.5740649974581443,1.0,-0.5265255391257746,-505796.4926297194,-1000000000000.0,0.7617196846565899,-1.6107160611253022e+308];
[1.0,1.7976931348623157e+308,6.792142029193748,5.136224626187971];
const o4 = {
};
const v5 = (0).toString();
let v6 = 0;
do {
    const o10 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o10);
    v6++;
} while (v6 < 2)
new Int16Array(0);
new v5(1635);
new Uint8ClampedArray(0);
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = new F24(F24, F24, F24, F24);
const v31 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v31[1] = v31;
class C32 {
}
const v34 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v35 = [601759695];
function f37(a38, a39, a40, a41) {
    a41 & a41;
    function f43() {
        try {
            v31.forEach(a39);
        } catch(e47) {
        }
        const v48 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v50 = Symbol.toPrimitive;
        Symbol.for(v50.description);
        const o58 = {
            toString(a54, a55) {
                const v56 = a54 && a39;
                a54 *= v50;
                return v56 <= v48;
            },
        };
        const o78 = {
            "c": -4294967297n,
            [a41](a61, a62) {
            },
            "c": v35,
            valueOf(a64, a65) {
                return -4294967295;
            },
            [-4294967297n](a67, a68, a69, a70) {
            },
            "maxByteLength": -4294967295,
            "arguments": v34,
            ...a38,
            "type": C32,
            ..."h",
            valueOf(a72, a73) {
                return this;
            },
            ..."h",
            4: v30,
            "c": -268435456,
            "type": "h",
            toString(a75, a76, a77) {
                return v48;
            },
            5: -268435456,
            6: -268435456,
        };
        o78[5] = o78;
    }
    f43(v0, f43);
    %OptimizeFunctionOnNextCall(f43);
    return f43;
}
for (let v80 = 0; v80 < 10; v80++) {
    f37(v80, v34, v31, v80);
}
function f83(a84, a85, a86, a87) {
    return arguments;
}
v31.name;
function f90(a91) {
}
const o96 = {
    ["8"](a94, a95) {
    },
};
const v97 = f83(64, 118, 64, 118);
const v98 = f83(v97, f83);
const v99 = v97.constructor;
v99.values(v98);
v99(118).toExponential(64);
function f103(a104, a105, a106) {
}
Math.acosh(1073741825);
