const v3 = [1e-15,38.36302046002356,657.530347887315];
try { v3.sort(9007199254740991); } catch (e) {}
[-1000.0,-3.0,2.7633449491768403];
const v7 = [[NaN,-4.0]];
function f8() {
    function f9() {
        class C10 {
            static {
                this < this;
            }
        }
        return C10;
    }
    return f9;
}
Object.defineProperty(v7, Symbol.toPrimitive, { writable: true, configurable: true, get: f8 });
const v15 = [1630094530,v3,v3];
const v16 = [1630094530,v15,1630094530,v15,9007199254740991];
4 !== 4;
const v20 = new Uint16Array(4);
function f23() {
    return Math.sinh(0);
}
Float64Array[Symbol.toPrimitive] = f23;
let v29;
try { v29 = new Float64Array(v20, v16, 9007199254740991); } catch (e) {}
v29[Symbol.toPrimitive] = f23;
const v34 = new Int8Array(1073741823);
("minor").fontcolor([]);
new Float64Array(137);
v34[1] = 1024;
Float64Array >> v7;
let v41 = ("minor")[182];
--v41;
v15 ** v29;
new Float32Array(Uint16Array);
const v48 = new Int8Array(12);
class C51 extends Uint16Array {
}
function f53(a54, a55) {
    const o66 = {
        set e(a57) {
            delete a57?.a;
        },
        __proto__: v48,
        [a54]: v3,
        set g(a60) {
            function F61(a63, a64, a65) {
                if (!new.target) { throw 'must be called with new'; }
            }
        },
    };
    return 536870912n;
}
const v68 = new Float64Array(4);
function f69() {
    return Symbol;
}
Object.defineProperty(v68, "toString", { get: f69 });
v68[3] = v68;
class C71 {
    static 9 = 9.187362692894364;
}
try { new C71(); } catch (e) {}
for (const v73 in C71) {
    try { v73.fixed(); } catch (e) {}
}
