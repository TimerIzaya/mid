const v0 = [-10,-2147483648,1073741824,3,-48328];
function f1(a2) {
    try { v0.reverse(); } catch (e) {}
    class C6 {
        #c = "toUpperCase";
        get a() {
            const v8 = this << "toUpperCase";
            const v9 = v8 ^ v8;
            let v10;
            try { v10 = v9(v9, this, v9, v9, v8, this); } catch (e) {}
            v10[v9] <<= 1.1922093890401552e+308;
            return "Tx";
        }
        static b;
    }
    return "toUpperCase";
}
Object.defineProperty(v0, "toString", { enumerable: true, value: f1 });
let v12 = 12;
let v13 = Array;
let v15 = v13(v12, -10);
let v17;
try { v17 = Date.parse(v12); } catch (e) {}
let v18 = Date.now();
v18++;
let v20 = [1073741824,24235,9007199254740990,1949686436,9007199254740992,9007199254740991,4,1,927172108];
v20 = v17;
({"a":v13,"b":v15,"length":v12,} = v15);
const o21 = {
};
try {
    o21.f = v17;
} catch(e22) {
    class C24 extends Int32Array {
    }
    const v25 = new C24();
    for (let v26 = 0; v26 < 5; v26++) {
        v25["p" + v26] = v26;
    }
}
try {
    const o29 = {
    };
    Object.defineProperty(o29, "a", { configurable: true, enumerable: true, value: o29 });
    o29.f = v17;
    o29.a = Date;
} catch(e30) {
}
try {
    const o31 = {
    };
    o31.f = v17;
    o31.a = Date;
    o31.g = v15;
} catch(e32) {
}
try {
    const o33 = {
    };
    o33.f = v17;
    o33.a = Date;
    const v36 = new BigUint64Array(3375);
    v36[3];
    const v39 = new Date();
    v39.toJSON();
    o33.d = v12;
} catch(e41) {
}
const v42 = [536870889,1073741824,-2147483647,127,268435441,-65535,127];
Int8Array.g = v18;
Int8Array.g = Int8Array;
const v45 = new Int8Array(2289);
Uint8ClampedArray[2] = v42;
Uint8ClampedArray.length;
const v49 = new Uint8ClampedArray(1);
3542 >> 3542;
function f53() {
    return v42;
}
Object.defineProperty(Uint8ClampedArray, 1, { configurable: true, get: f53 });
new Uint8ClampedArray(3542);
function f55(a56, a57, a58, a59) {
    function f60(a61, a62) {
        Date(a62);
        %PrepareFunctionForOptimization(Date);
        Date(a62);
        Date(a62);
        %OptimizeFunctionOnNextCall(Date);
        Date(a62);
        return v49;
    }
    a56.toString = f60;
    function f67() {
        const o68 = {
        };
        return o68.constructor;
    }
    a59[Symbol.toPrimitive] = f67;
    const v72 = a56--;
    a57.BYTES_PER_ELEMENT;
    a58 & a58;
    a59[2] = a59;
    const o96 = {
        "b": v42,
        "g": 2289,
        [v72]: Uint8ClampedArray,
        __proto__: a59,
        get h() {
            return this;
        },
        "f": a56,
        "h": a58,
        [v0](a77, a78, a79, a80) {
            let v81 = 0;
            do {
                try {
                    v20.length = 3542;
                } catch(e82) {
                }
                v81++;
                new Int8Array(964446029);
                class C87 {
                }
                const v88 = new C87();
                const v92 = a57(9007199254740991n * 9007199254740991n);
                try { v92.replaceAll(6, v88); } catch (e) {}
            } while (v81 < 4)
            return a56;
        },
    };
    return o96;
}
f55(3542, Uint8ClampedArray, 2289, v42);
const v98 = f55(1, 1, 2289, v0);
v98.b = v98;
f55(v45, 1, 2289, v20);
delete v42[3];
new Uint8ClampedArray(Uint8ClampedArray);
eval("");
v13?.[-0.199767182655199];
try {
    new Uint8ClampedArray(10);
} catch(e119) {
}
try { ("byteLength").toUpperCase(); } catch (e) {}
class C122 {
    n(a124) {
        this[a124] = 47457;
    }
}
~-4294967295;
