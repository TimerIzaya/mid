function f3() {
    return 1149797658n;
}
const v4 = [1.0,0.8290698774995446,-1000000000000.0,2.2250738585072014e-308,9.388961922912209,4.299198925616825];
const v5 = [1e-15,1000000.0,369.0578720309675,1000000.0,1000.0,1.7207032368219263e+308,1000000000.0,9.578145652307676];
[-566.5748839705054,-3.0,-1.4313525724866979e+308,-2.6677659555940154e+307,1000.0,-0.0,0.2128750401063313,1.6680178138320098e+308,-4.0,-5.0];
class C7 extends f3 {
    static {
        f3();
    }
    h = v5;
    2433;
    c;
    257;
}
new f3();
new C7();
new C7();
const v17 = [];
const v18 = [v17];
class C20 extends Map {
}
const t22 = -1425229962n;
const v21 = new t22();
const v22 = new C20(v18);
const v23 = new C20(v22);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = new Uint32Array(v22, v17);
let v28 = -4294967297n;
v28--;
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    const v37 = a33.constructor;
    v30["pop"]();
    try { v37(v37); } catch (e) {}
    try { v37(); } catch (e) {}
    const v43 = arguments.length;
    Object.defineProperty(v21, "e", { configurable: true, enumerable: true, value: f32 });
    v22["toString"](a35, ...v23, BigUint64Array, ..."toString", a34, v43);
    function f46() {
        const v48 = ("Vre").charAt();
        try { v48.lastIndexOf(); } catch (e) {}
        ("Vre").codePointAt();
        v25.length;
        try {
            v17.forEach();
        } catch(e53) {
        }
        const o66 = {
            "c": v28,
            "EPSILON": v30,
            valueOf(a55, a56) {
                return a33;
            },
            1073741824: v27,
            [v4](a58, a59, a60, a61) {
                a59();
            },
            o(a65) {
                return v28;
            },
            256: a36,
        };
        return a34;
    }
    f46();
    const v69 = Array();
    try { v69.findLast(f32); } catch (e) {}
    let v72;
    try { v72 = Int8Array.of(); } catch (e) {}
    try { v72.join(a34); } catch (e) {}
    for (let v74 = 0; v74 < 5; v74++) {
    }
    try { v31["find"](..."find", a36, ...v30, ...v31); } catch (e) {}
    return Array;
}
for (let v77 = 0; v77 < 10; v77++) {
    f32(v27);
}
%OptimizeFunctionOnNextCall(f32);
f32(v30);
