const o1 = {
};
const v3 = [Float32Array];
const o5 = {
    "arguments": v3,
    "type": "function",
};
new Int8Array(1664);
for (let v8 = 0; v8 < 500; v8++) {
}
new BigInt64Array();
("function").normalize();
const v14 = new Uint16Array(7);
new Float64Array(127);
const t14 = 4;
const v20 = new t14();
v20?.__defineSetter__;
const v22 = new Uint8Array(4);
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a26;
    } catch(e28) {
    }
    try {
        a27.b = 7;
    } catch(e29) {
    }
}
const v30 = new F23(7, 7, v22);
new F23(1664, 1664, v14);
const v34 = new Uint16Array(231);
new Int8Array(v34);
new F23(1664, 4, v30);
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    const o43 = {
    };
    const v45 = new Proxy(this, o43);
    Object.defineProperty(v45, "o24", { configurable: true, value: F41 });
    try {
        with (v45) {
            Math.exp(-Infinity);
            let v49 = 1000000000000.0;
            -(v49--);
            o43[b];
        }
    } catch(e54) {
    }
}
new Int8Array();
