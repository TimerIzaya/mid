function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.constructor;
    try { new v7(a6, a6); } catch (e) {}
    a5 + a5;
    try {
        this.g = a5;
    } catch(e10) {
    }
}
const v11 = new F3(-9007199254740992n, 20941n);
const v12 = new F3(F3, 20941n);
new F3(v12, -418967591n);
6 >>> 6;
new Int32Array(6);
new Float64Array(9);
257 + 257;
Float64Array.length;
new Float64Array(257);
0n ^ 0n;
const v28 = /\b[gW\x60]/vi;
class C29 {
    #a;
    constructor(a31, a32, a33) {
        a31.source = a31;
        try {
            a32.#a;
        } catch(e35) {
        }
    }
}
try { C29(Int32Array, Int32Array, v11); } catch (e) {}
new C29(v28, 0n);
-1998025689n ^ -2143477444;
const v11 = Math.sinh(-2147483649);
const v12 = -2147483649 + -2143477444;
Math.log10(-2147483649);
Math.random();
const v20 = /[\ca]a(?=b)+/gisuy;
/(?:a+){0,0}Va\qna(?!bbb|bb)c0*/s;
/a+ba{0,1}?/gd;
try {
    const t9 = "toString";
    t9[3465053967] = v12;
} catch(e23) {
}
const t13 = "object";
t13[v12] ||= -1.7976931348623157e+308;
class C25 {
    static #e = NaN;
}
const v27 = [2147483649n];
try { v27.toSpliced(2147483649n, ...-2143477444, NaN, ...-1998025689n, -2147483649, NaN); } catch (e) {}
var e = -2147483649;
v20.sticky &= v11;
const o29 = {
};
new Proxy("seal", o29);
