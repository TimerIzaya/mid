Int8Array();
for (let v7 = 0; v7 < 5; v7++) {
    const o11 = {
        set b(a9) {
            this.b;
        },
    };
    o11.b = o11;
    o11.b = o11;
}
new Uint8ClampedArray(172);
let v14 = Uint8ClampedArray;
new v14(4096);
new Int8Array(64);
const v20 = new Uint16Array(Uint16Array);
class C21 {
    #p(a23, a24, a25, a26) {
    }
    constructor(a28, a29) {
        try {
            v20.#p();
        } catch(e31) {
        }
    }
}
const v33 = new Float32Array(Float32Array);
for (let v34 = 0; v34 < 25; v34++) {
    const v35 = [1073741824,1073741823,1376142744,1073741825];
    function f36(a37, a38, a39, a40) {
        function f42() {
            return Float32Array;
        }
        try { undefined(); } catch (e) {}
        let v45 = -Infinity;
        v45 = -4.057627999724119;
        const v47 = v33?.constructor;
        try { new v47(); } catch (e) {}
        const v50 = new Int8Array(v33, a39, v34);
        function f51(a52, a53) {
            return v33;
        }
        f51(v35, v33);
        v50.buffer;
        ("sync")[-5.0];
        const v62 = new Int16Array(41);
        v62.fill(725);
        %OptimizeFunctionOnNextCall(f42);
        try { v35["find"](); } catch (e) {}
        return arguments;
    }
    for (let v66 = 0; v66 < 10; v66++) {
        f36(v33, v34, 4096, Float32Array);
        v14--;
        Math.tanh();
        [494233.9782540172,494233.9782540172,494233.9782540172,494233.9782540172];
        gc();
    }
}
