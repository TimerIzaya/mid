const v3 = new Uint8ClampedArray(995);
new Int8Array(v3);
const v7 = new Array(219);
class C8 {
    static set h(a10) {
        const v11 = this.f;
        let v12 = Math;
        v11 | this;
        this & a10;
        v12.asin(this);
        268435441 - v11;
        --v12;
    }
    static 1024;
    #d;
}
new C8();
new C8();
new C8();
class C22 {
    static #valueOf(a24, a25) {
        super.d;
        [-1584081673,-312849087,-15,11361,-9007199254740990,-56778,-256,-5];
        [241374503,-13,1073741825,65537,-2147483648,-4,-268435456,512];
        [-1024,9007199254740991,1073741824,6,-986140355,-9007199254740992,64,-28656,64];
        return C8;
    }
    static #f = v7;
    static h;
    static #c;
    static 65536;
    constructor(a31) {
        function f32() {
            return a31;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f32 });
    }
    f = C22;
    #g = Array;
}
new C22();
new Array();
new C22();
[-13632,-413075763,7];
[1024,-830807986,4,-9007199254740991,9007199254740991];
[16,13,1073741824,-9223372036854775807,-1,6,47722,14,6,59618];
for (let v39 = 0; v39 < 250; v39++) {
    function f40() {
        return f40;
    }
    class C41 extends f40 {
        a;
        constructor(a43) {
            for (let v44 = 0; v44 < 32; v44++) {
                "p" & v44;
                for (let v47 = 0; v47 < 5; v47++) {
                    function f48() {
                        return f48;
                    }
                }
                this.p16;
                try { a43(); } catch (e) {}
            }
        }
        /*
        constructor(a52) {
            super();
            for (let v53 = 0; v53 < 5; v53++) {
            }
        }
        */
    }
    new C41();
    function f55(a56) {
    }
    function F58(a60, a61) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.constructor(); } catch (e) {}
        a61--;
        const v64 = this.constructor;
        try { new v64(8, a60); } catch (e) {}
        -a61;
    }
}
