function f0() {
    const o12 = {
        "d": "bigint",
        9: 8,
        "b": 8,
        [-2]: -1.580311059508462e+308,
        5: 8,
        [8]: "bigint",
        ..."bigint",
        set f(a5) {
            const t10 = "bigint";
            t10[1] = -1.580311059508462e+308;
            super.h = this;
            a5 * this;
        },
        "a": 8,
        [-1.580311059508462e+308]: "bigint",
        "c": "bigint",
        n(a8, a9) {
            return a8;
        },
        "type": f0,
        toString(a11) {
            return "bigint";
        },
    };
    o12[1] = o12;
    return o12;
}
f0();
const v14 = f0();
f0()[4];
const v17 = [1000000000.0,-4.0,9.644211680225045e+307,0.2997038722580537];
const v18 = [-1e-15,0.17023116791292148];
try { v18.toString(); } catch (e) {}
v18[1] = v18;
const v20 = [1000.0];
v20[1] = v17;
[[9],Reflect];
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this.constructor;
    try { new v33(); } catch (e) {}
    typeof Float32Array;
}
new F27(F27, 536870889, F27, 536870889);
const v38 = new WeakSet();
try { v38.delete(v17); } catch (e) {}
function f40() {
    return f0;
}
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    function f46() {
        return this;
    }
    function f47(a48) {
        a48 = a44;
    }
    Object.defineProperty(this, "d", { writable: true, get: f46, set: f47 });
    try { this.constructor(a43, a43, v17); } catch (e) {}
    try { a43.push(f40); } catch (e) {}
    const v51 = a44?.filter;
    try { new v51(a43); } catch (e) {}
    try { a43.toLocaleString(); } catch (e) {}
    a44[1];
    try {
        function F55() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F57(a59) {
            if (!new.target) { throw 'must be called with new'; }
            const v60 = [-0.685155357392599,5.0];
            function F61(a63, a64, a65, a66) {
                if (!new.target) { throw 'must be called with new'; }
                const v67 = this.constructor;
                try { new v67(a64, F57, v67); } catch (e) {}
                v60.length &= 1;
            }
            new F61();
        }
        this.source = v20;
    } catch(e71) {
    }
}
F41.caller = F41;
const v72 = new F41(v18, v17, v38);
const v73 = v72.d;
const v74 = new F41(v18, v20, v14);
const v75 = v74?.constructor;
let v76;
try { v76 = new v75(v74, v72, v74); } catch (e) {}
const v77 = new F41(v18, v20, v14);
v77.length = v76;
v77.length;
~(1595199032 >>> 1595199032);
const v84 = [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
v84[Symbol.isConcatSpreadable] = v73;
v84.concat([-2,-2,-2,-2,-2], [v84,-2], true);
