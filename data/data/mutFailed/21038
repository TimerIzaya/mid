new BigInt64Array(1692);
new Uint32Array(256);
new Int16Array(3);
const v9 = [-1000.0,-2.2250738585072014e-308,2.6842528765189027,-4.428362832992621];
[-7.739899200475284,-2.220446049250313e-16,-2.0,-488936.0340294464,4.0,4.107597206884808,-4.3305351616160686e+307,17.090905373756414];
[-1.4263645959304283e+308];
const v12 = [];
const v13 = [v12];
class C15 extends Map {
    constructor(a17, a18) {
        super(v13);
    }
}
const v19 = new C15(v12, v13);
const v20 = new C15(v13, v19);
const v21 = new C15(v20, v19);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = new Uint32Array();
let v28 = -4294967297n;
const v29 = v28--;
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    try { a34.toLocaleString(); } catch (e) {}
    const v39 = a34?.constructor;
    try { v39(); } catch (e) {}
    try { v39(); } catch (e) {}
    const v43 = arguments.length;
    Object.defineProperty(v19, "e", { configurable: true, enumerable: true, value: f33 });
    const v45 = v20["entries"](a36, ...v21, BigUint64Array, ..."entries", a35, v43);
    const v47 = Symbol.toStringTag;
    v20[v47] = v47;
    new Uint32Array(Symbol);
    try {
        v25.b = 5;
    } catch(e49) {
    }
    function f50() {
        let v52;
        try { v52 = ("Vre").charAt(4096); } catch (e) {}
        try { v52.lastIndexOf(); } catch (e) {}
        let v54;
        try { v54 = ("Vre").codePointAt(v25); } catch (e) {}
        v54 - v54;
        v54 ^ v54;
        let v57 = Float64Array;
        v57 = a35;
        let v58 = v25.length;
        v58++;
        try {
            v31.forEach(a35);
        } catch(e61) {
            e61.stack = e61;
        }
        const o72 = {
            "c": v28,
            "EPSILON": v30,
            valueOf(a63, a64) {
                return a63;
            },
            1073741824: v27,
            [v28](a66, a67, a68, a69) {
                eval();
            },
            "arguments": 5,
            256: a37,
        };
        return v58;
    }
    f50();
    const v75 = Array();
    function f76(a77, a78, a79) {
        a79 = 256;
        a35[Array] = a36;
        return v9;
    }
    f76(v43, v9, v27);
    let v81;
    try { v81 = v75.findLast(f33, v27); } catch (e) {}
    v75.unshift("entries", v45, "entries", v81);
    let v84;
    try { v84 = Int8Array.of(); } catch (e) {}
    try { v84.join(v39); } catch (e) {}
    const v86 = new Int8Array(v30);
    v86.c = v86;
    const v87 = v86.buffer;
    v87.maxByteLength;
    const v89 = v87.slice(v39);
    try { Int32Array(v89, arguments, v28); } catch (e) {}
    function f92(a93, a94, a95, a96) {
        return a96;
    }
    const v97 = new Int32Array();
    const v98 = v97[3];
    v98 + v98;
    for (let v100 = 0; v100 < 5; v100++) {
    }
    %OptimizeFunctionOnNextCall(f50);
    try { v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
    return a34;
}
for (let v103 = 0; v103 < 10; v103++) {
    f33(v27);
}
%OptimizeFunctionOnNextCall(f33);
f33(v30, v12, v29, f33);
