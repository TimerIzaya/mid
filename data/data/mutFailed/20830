const v1 = new Set();
let v2 = -1073741824;
class C5 extends Set {
    static get h() {
        return e;
    }
    static {
        this[v1] = v2;
        super.entries();
    }
    static #f;
    #a;
    #c;
}
new C5();
const v14 = new C5();
const v15 = new C5();
class C16 extends Set {
    toString(a18, a19, a20, a21) {
        Object.defineProperty(v1, a19, { configurable: true, value: a19 });
        const v23 = v14["keys"]();
        v2 << a19;
        Math.atan2(v2, a19);
        Math.sign(-2147483647);
        const v30 = (a19 || a19) * v23;
        v2++;
        v30 & v30;
        return this;
    }
}
new C16();
const v34 = new C16();
const v35 = new C16();
function f36(a37, a38) {
    const o66 = {
        __proto__: a37,
        "g": v1,
        set d(a40) {
            [this,a40,this,v15];
            [v14];
            [a38,v15,a38,v15];
            function F44() {
                if (!new.target) { throw 'must be called with new'; }
            }
            Symbol.for(Symbol);
            function f48(a49, a50, a51, a52) {
                ("find").substr(a50);
                return f48;
            }
            const v56 = Symbol.iterator;
            const o65 = {
                [v56]() {
                    let v58 = 10;
                    const o64 = {
                        next() {
                            v58--;
                            const v62 = v58 == 0;
                            const o63 = {
                                "done": v62,
                                "value": v58,
                            };
                            return o63;
                        },
                    };
                    return o64;
                },
            };
        },
    };
    return o66;
}
f36(v35, v34);
f36(v35, v35);
f36(v15, C5);
const v70 = [-20096,4294967296,-65537,-2];
const v71 = [-1947047520];
function f72() {
    for (const v76 of Array(4087)) {
        v76 - v76;
    }
    return Array;
}
v70["slice"]([[v71,v71,v71,v70]]);
