function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 65537;
    } catch(e3) {
    }
    try {
        this.h = 65537;
    } catch(e4) {
        Date();
        const v8 = new Date();
        function f9(a10) {
            return a10;
        }
        Object.defineProperty(v8, "g", { configurable: true, enumerable: true, get: f9, set: f9 });
    }
}
function f11() {
    const o15 = {
        ...1.0,
        set b(a14) {
        },
    };
    return o15;
}
const v16 = new F0();
const v17 = new F0();
const v18 = new F0();
const v19 = v18?.constructor;
try { new v19(); } catch (e) {}
[-25855];
const v23 = [-25855,-25855,v19];
try { v23.map(v23); } catch (e) {}
const v27 = new Float32Array(1899);
class C28 {
    static {
        try { this.apply(Float32Array, 1899); } catch (e) {}
        v27[5] = this[6];
    }
}
("1609372519")[2];
gc(v17);
class C37 extends v16 {
}
C37.length = C37;
new C37();
const t46 = "symbol";
t46[1] = "symbol";
function F41() {
    if (!new.target) { throw 'must be called with new'; }
}
const v43 = new F41();
const v44 = v43?.__defineGetter__;
try { new v44(v16, v27); } catch (e) {}
function F46(a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this.constructor;
    try { new v51(v43); } catch (e) {}
    a48[3] = a48;
}
function f53() {
    return F0;
}
let v56 = -1e-15;
v56--;
const v60 = [,[,]];
try { v60.toLocaleString(); } catch (e) {}
v60.fill();
