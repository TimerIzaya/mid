function f0() {
    700240.7988350873 >= 700240.7988350873;
    const o23 = {
        toString(a6, a7) {
            try { a6(-536870912, a7, a6); } catch (e) {}
            new Int8Array(6);
            new Uint8ClampedArray(2329);
            const v17 = new Float32Array(6);
            return v17;
        },
        o(a19) {
            const o21 = {
            };
            return gc(o21);
        },
        [-536870912]: -536870912,
        "h": -536870912,
    };
    return "-12";
}
const v24 = f0();
const v25 = f0();
const v26 = f0();
const v27 = [v25,f0,v24,v25,v24];
const v28 = [f0];
try { v28.entries(); } catch (e) {}
[v26,v25,v24,v27,v27];
0 >> 0;
new Float64Array(0);
const v36 = [1321234440,-2012385285,503280511,-65535,-50525,1929142229];
try {
    v36.sort(-5);
} catch(e38) {
}
new Uint8Array(512);
733 !== 733;
class C44 {
}
const v46 = this.Realm;
try { v46.owner(); } catch (e) {}
const v49 = new Int16Array(733);
v28[646];
let v52 = v49 * -4294967296n;
const v53 = v52--;
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    -a57;
    class C60 {
    }
    new C60();
    function F62(a64, a65, a66, a67) {
        if (!new.target) { throw 'must be called with new'; }
        const v68 = this.constructor;
        try { new v68(); } catch (e) {}
        try {
        } catch(e70) {
            const v72 = Float32Array();
            class C74 extends Float64Array {
            }
            const v75 = C74();
            try { v75(v72); } catch (e) {}
        }
    }
    new F62();
    a58 * v53;
    a58--;
}
new F55(35994, v52);
