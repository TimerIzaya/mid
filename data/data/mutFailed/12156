let v1 = 0;
try {
    const t2 = 7;
    t2.toString = 15;
} catch(e4) {
}
v1 = -1073741824;
1965589717 / 1965589717;
const v13 = new BigInt64Array(3);
const v16 = new Int16Array(5);
v16[3];
class C22 {
    get b() {
    }
    #e;
    c = 3.2255150730772826;
}
try { new C22(); } catch (e) {}
const v25 = new C22();
Math.log2(255);
Math.abs(5);
+v16;
Symbol.replace;
const v33 = [1073741824,1073741823,1376142744,1073741825];
function f34(a35, a36, a37, a38) {
    function f39() {
        try {
            v33.forEach();
            v16.length;
            v13.buffer;
            v13[65535];
        } catch(e47) {
            const v49 = new Float32Array(a35, a37);
            function f50() {
                return v33;
            }
            Object.defineProperty(v49, "h", { configurable: true, enumerable: true, get: f50 });
        }
        return f39;
    }
    f39();
    eval();
    %OptimizeFunctionOnNextCall(f39);
    return a38;
}
const v54 = Math.acosh(5);
v54 * v54;
const v56 = v16 >>> 40015;
v56 === v56;
const v58 = 255 ** v16;
v58 - v58;
Math.b = Math;
const v61 = Math.atan(Math);
v61 - v61;
const v63 = v61 - v61;
v63 - v63;
const o65 = {
};
const v66 = v16 ^ 40015;
v66 <= v66;
new BigUint64Array(6);
function f69() {
    let v70 = 6;
    v70 % v70;
    v70--;
    return v70;
}
for (let v73 = 0; v73 < 5; v73++) {
    v73 | v73;
    const v75 = f69();
    v75 ^ v75;
    %OptimizeFunctionOnNextCall(f69);
    function F77(a79, a80) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            class C82 extends [this,this,this,this,this] {
            }
        } catch(e83) {
        }
    }
    [v75,v75];
    const v86 = [1073741823,701857267,63326];
    v86.concat(v86);
    class C90 {
        static #p(a92) {
            function f93(a94) {
                return a94;
            }
            class C95 extends f93 {
                static [-1] = 8;
                static [a92];
                static 268435441;
            }
            const v96 = [];
            const v98 = /[a-zA-Z0-9]/gvisy;
            const v99 = /abc?/gvmy;
            v99[-2] ^= v98;
            v99.exec("Q8F");
            const t97 = "Q8F";
            t97[2078209647] = v96;
            return a92;
        }
        [0.028957958839558873];
        static {
            this.a = this;
            let v104 = -346648683;
            v104--;
            for (let v106 = 0; v106 < 32; v106++) {
                const t108 = "p";
                t108[0] = "p";
            }
        }
        static 2147483648 = C90;
        static #g;
        #a;
    }
    const v108 = C90?.__lookupGetter__;
    try { new v108(-256); } catch (e) {}
    function f110() {
        const v112 = gc?.toString;
        try { new v112(); } catch (e) {}
        const o114 = {
        };
        return gc(o114);
    }
    try {
        v25.c = f69;
    } catch(e116) {
    }
    SharedArrayBuffer.length = SharedArrayBuffer;
    const o119 = {
        "maxByteLength": 2147483648,
    };
    const v121 = new SharedArrayBuffer(137, o119);
    v121.maxByteLength;
    Int8Array.g = Int8Array;
    new Int8Array(v121);
    try { C90(); } catch (e) {}
    const v126 = new C90();
    v126.h = v126;
    v126.constructor = f110;
    const v127 = v126?.constructor;
    v127[Symbol.toPrimitive] = f110;
    let v129;
    try { v129 = new v127(); } catch (e) {}
    v129.length;
    const v131 = v129?.constructor;
    v131.e = v131;
    try { new v131(); } catch (e) {}
    const o135 = {
        "apply": f69,
        "defineProperty": f69,
        ...f110,
        ...v33,
        "deleteProperty": f69,
        "get": f69,
        "getOwnPropertyDescriptor": f69,
        "getPrototypeOf": f69,
        "has": f69,
        "isExtensible": f69,
        "ownKeys": f69,
        "setPrototypeOf": f69,
    };
    new Proxy(v16, o135);
}
