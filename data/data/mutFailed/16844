function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 60639;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
class C7 {
    get e() {
        this.d ||= C7;
        return C7 &&= this;
    }
    static [F0];
    static [v5];
    static #toString(a10, a11) {
        try {
            C7.__proto__ = v6;
        } catch(e12) {
        }
        return C7;
    }
    f;
    [v5];
    [-2];
    constructor(a14) {
        function f16(a17) {
            return v4;
        }
        class C18 extends f16 {
            static #a = v5;
            g = a14;
            static [C7] = v4;
        }
        const v19 = C18?.apply;
        try { new v19(v4, F0); } catch (e) {}
        const v21 = new WeakSet();
        try { v21.delete(v21); } catch (e) {}
    }
    h;
    3138042056;
    1491 = v5;
    static #c;
}
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a26;
    } catch(e27) {
    }
    try {
        this.e = v5;
    } catch(e28) {
    }
}
new F23(v4, v6);
new F23(C7, v6);
new F23(v4, v4);
const v32 = new C7(v4);
v32[1491];
const v34 = new C7(v32);
new C7(C7);
const v36 = /(?<a>)/visy;
const v37 = /L/gvis;
const v38 = /\p{Script=Greek}/gvmy;
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = this?.__defineGetter__;
    try { new v44(a42, this); } catch (e) {}
    a41[3138042056] = a41;
    a43[3138042056];
    try {
        this.h = C7;
    } catch(e47) {
    }
}
F39.e = F39;
let v51 = F39 >> -11;
+v51;
v37 || F39;
++v51;
F39++;
Math.min(v51);
++v51;
new F39(v32, v34, v32);
const v59 = new F39(v32, v38, v6);
v59.length;
const v61 = new F39(v32, F0, C7);
const v62 = v61.__proto__;
29791 + 29791;
try { v62(29791, v38, 29791, v37, v36); } catch (e) {}
Promise.d = Promise;
