new Uint8ClampedArray(256);
new BigInt64Array(127);
const v8 = new Float32Array(1005);
let v11 = -1646928160n;
v11--;
let v15;
try { v15 = new Int32Array(Uint8ClampedArray, v8, Int32Array); } catch (e) {}
new Int32Array(13);
v15.prototype;
const v20 = new v15(3910);
v20[505];
64 * 64;
BigInt64Array.e = BigInt64Array;
new BigInt64Array(64);
const v27 = ("stack").trimStart();
for (let v28 = 0; v28 < 5; v28++) {
    function f29() {
        v27.length;
        return v27;
    }
    const v31 = f29.call();
    try { v31.codePointAt(v31); } catch (e) {}
    %OptimizeFunctionOnNextCall(f29);
}
