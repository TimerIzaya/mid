let v1 = 5.0;
class C3 {
    static 65535 = v1;
    p(a5, a6) {
        const o15 = {
            valueOf() {
                4294967297 ^ 4294967297;
                Math.cbrt(v1);
                v1++;
                return a5;
            },
        };
        return 5.0;
    }
}
const v16 = new C3();
let v17;
try { v17 = v16.p(5.0, 5.0); } catch (e) {}
const v18 = new C3();
const v19 = new v17();
class C20 {
    n(a22, a23) {
        try {
            a23.toString = this;
        } catch(e24) {
        }
        const v26 = new Set();
        return v26;
    }
    constructor(a28, a29) {
        const v30 = this?.constructor;
        try { new v30(a28, v1); } catch (e) {}
        const v32 = v19.b;
        new C3();
        try {
            this.toString = v32;
        } catch(e34) {
        }
    }
}
try { C20.bind(1000.0); } catch (e) {}
const v36 = new C20(v18, 5.0);
try { v36.n(v18, C3); } catch (e) {}
const v38 = new C20(v19, v1);
new C20(v16, v38);
try { ("c").normalize(); } catch (e) {}
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    function F46() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v48 = 0; v48 < 25; v48++) {
            const v49 = [601759695];
            const v50 = [1073741824,1073741823,1376142744,1073741825];
            function f51(a52, a53, a54, a55) {
                -(-1073741824);
                Math.cos(-1073741824);
                try { v50["find"](..."find", a55, ...v49, ...v50); } catch (e) {}
                return v48;
            }
            f51.f = f51;
            for (let v62 = 0; v62 < 5; v62++) {
                v62 % v62;
                f51();
            }
        }
    }
    try { F46.bind(v18); } catch (e) {}
    new F46();
}
const v67 = new F44();
const v68 = v67?.constructor;
try { new v68(); } catch (e) {}
