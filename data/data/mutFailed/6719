const v0 = [512];
const v1 = [-9,-14490,-12];
const v2 = [-2147483647,1,-13,128,378324107,-9007199254740991,-65535];
function f3(a4, a5) {
    v1[v0] **= a4;
    function f6(a7, a8) {
        return f6;
    }
    return v1;
}
v2[Symbol.toPrimitive] = f3;
class C11 {
    e = v2;
    1000;
    static g;
    static h;
    n(a13) {
        try { a13(v1); } catch (e) {}
        /(a\1)tl8ab\b\d\bcd/vsy;
        /\xf0\x9f\x92\xa9*/guds;
        return /[\cZ](?:foo)[\xe2\x81\xa3]+/vy;
    }
    static d;
    static [v1];
    [v2];
    static #f = v1;
}
new C11();
const v19 = new C11();
const v20 = new C11();
v20[1000];
-6130n >> -6130n;
Uint32Array[2] = v19;
try { Uint32Array.from(Uint32Array); } catch (e) {}
new Uint32Array(257);
new BigInt64Array(8);
Uint8ClampedArray.prototype = Uint8ClampedArray;
new Uint8ClampedArray(176);
class C40 {
    static {
        try {
            this.length = 2499;
        } catch(e43) {
            e43.message;
        }
    }
    set e(a46) {
    }
}
