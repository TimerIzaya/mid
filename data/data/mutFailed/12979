new Uint32Array(128);
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    eval();
    new SharedArrayBuffer(945);
    try {
        new F4();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e14) {
    }
}
new F4();
new F4();
new SharedArrayBuffer(4096, F4);
const v20 = [];
function f21(a22, a23) {
    class C24 {
    }
}
v20.constructor = f21;
class C26 {
}
const v27 = new C26();
const t24 = v27.constructor;
let v29 = new t24();
const v30 = /[\11]/gm;
function f31() {
    return v29 >>>= f31 != v30;
}
f31();
const v35 = [-8,127,65535];
const v36 = [-1e-15,0.20747719464528913,-5.0];
const v37 = delete v35?.length;
parseInt.min(v37);
const v41 = parseInt.acos(v36 * v37);
v20["concat"]();
const v45 = new Int32Array(1659);
const v48 = new BigInt64Array(3957, v41, F4);
const v49 = [v48,Uint32Array];
function f50() {
    return Math.asin(Math);
}
f50();
[v48,BigInt64Array,v45,[1659,3957,v49,3957]];
let v57 = 3375;
const v59 = new BigUint64Array(v57);
const o60 = {
};
o60.constructor;
const v62 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v63 = [20998,9007199254740991,-4105,4];
const v64 = [1073741824,1073741823,1376142744,1073741825];
function f66(a67, a68, a69, a70) {
    function f72() {
        const o79 = {
            "e": -4294967295,
            ...v62,
            ..."Vre",
            "c": v64,
            "f": "concat",
            84: arguments,
            ..."Vre",
            valueOf(a77, a78) {
                return "concat";
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
    let v82;
    try { v82 = v64["find"](..."find", a70, ...v63, ...v64, ...522675525n); } catch (e) {}
    v82 <= a69;
    return arguments;
}
for (let v84 = 0; v84 < 10; v84++) {
    f66();
}
Math.expm1(v57);
Math.tan(--v57);
for (let v90 = 0; v90 < 32; v90++) {
    v90 === v90;
    for (let v92 = 0; v92 < 50; v92++) {
    }
    new Int8Array(520);
    for (let v96 = 0; v96 < 5; v96++) {
    }
    0 || Int8Array;
    Math.tanh();
    function f101() {
        return v63;
    }
}
let [v102,,v103,...v104] = v59;
var c = 255;
