let v0 = 1;
new Int8Array(v0);
try { ("minor").trim(); } catch (e) {}
const o7 = {
    "execution": "async",
    "type": "minor",
};
o7.type;
Int16Array.b = Int16Array;
new Int16Array(126);
-206;
try { ("function")["-268435456"](); } catch (e) {}
v0--;
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
}
const v23 = new Uint16Array(206);
let v24 = -0.0;
v24--;
class C29 {
    static 268435439;
    [206] = -1.529633245546124e+308;
    constructor(a31, a32) {
        const v33 = this.constructor;
        try { new v33(); } catch (e) {}
        try {
            v23.#p();
        } catch(e36) {
        }
    }
}
function f38() {
    const o49 = {
        toString(a43, a44) {
            try {
                super.getMinutes(a44);
            } catch(e46) {
            }
            return "object";
        },
        "type": "boolean",
        set g(a48) {
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        ["object"]: f38,
        ..."object",
        ["boolean"]: 1000000000000.0,
        [f38]: f38,
        5: f38,
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o49;
}
const v50 = f38();
function F51(a53) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f55(a56, a57) {
            const o61 = {
                [122188848n](a59, a60) {
                },
            };
            return o61;
        }
        %PrepareFunctionForOptimization(f55);
        this.b = a53;
    } catch(e62) {
    }
}
new F51(v50);
`b${Uint8ClampedArray}hpz${"ih"}-128`;
try { C29.m(); } catch (e) {}
