const v2 = new Array(257);
Int8Array.b = Int8Array;
const v5 = new Int8Array(254);
v5.BYTES_PER_ELEMENT = v5;
let v8;
try { v8 = new Int16Array(Int16Array, 257, 5); } catch (e) {}
v8 instanceof Array;
Object.defineProperty(v2, "f", { writable: true, configurable: true, set: Array });
const v13 = new Int16Array(5);
const v16 = new Uint16Array(3285);
v16[1016] = v16;
function f17() {
    return v13;
}
[v16];
const v19 = [Int8Array];
[v19,Int8Array,v5];
try { ("nt").codePointAt(v2); } catch (e) {}
class C23 {
}
const v24 = new C23();
const v25 = v24?.constructor;
let v26;
try { v26 = new v25(); } catch (e) {}
const v28 = new Float32Array(v24, "nt", Float32Array);
v19[2586] = v26;
const v30 = Symbol.iterator;
const o39 = {
    [v30]() {
        let v32 = 10;
        const o38 = {
            next() {
                v32--;
                const v36 = v32 == 0;
                const o37 = {
                    "done": v36,
                    "value": v32,
                };
                return o37;
            },
        };
        return o38;
    },
};
const t44 = "nt";
const v40 = delete t44[v28];
let v41;
try { v41 = v24.floor(v40); } catch (e) {}
for (const v42 in v41) {
}
