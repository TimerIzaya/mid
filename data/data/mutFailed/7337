const v0 = [924.4565500059427,-4.0,-1000.0,0.0,136555.1851692067];
const v1 = [-194.13547200281255,0.5867740563546658,-2.0,-1000000.0,1000000.0,4.707024526000197,0.7976963821176162,-3.0,0.8114158070510648];
const v2 = [0.33175223493528894];
function f3(a4) {
    const v7 = new Set();
    v7["delete"](839612.5677247904);
    return v1;
}
v2.toString = f3;
const v10 = [-10,268435441];
v10.toString = f3;
const v11 = [-11,-76454662,9007199254740990,257,-48291,53830];
const v12 = [-9223372036854775808];
function f13() {
    const v14 = v1 >>> v0;
    class C15 {
        #m(a17, a18) {
            class C19 {
                e;
            }
        }
    }
    return v14;
}
v12.toString = f13;
if (v12 == v11) {
    try {
        v0.valueOf = v11;
    } catch(e21) {
    }
} else {
    v10[5];
}
const v23 = [v0,v2,v12,v11];
v23.toString = f3;
[v11,v11,v0,v11,v12,v23];
const v25 = [v23,v2,v23];
v25[1] = v25;
try { ("match").search(v11); } catch (e) {}
function f30(a31, a32, a33, a34) {
    function f35(a36) {
        class C37 {
        }
        async function f38(a39, a40, a41, a42) {
            (await C37).call(C37, f38, f38, C37);
            return f38;
        }
        return f38.call(C37, C37, f38);
    }
    a31[Symbol.toPrimitive] = f35;
    a34[0];
    const o62 = {
        ...a33,
        "c": v23,
        "e": v12,
        __proto__: v1,
        [v23]: "match",
        "a": v25,
        ["match"](a50, a51, a52) {
            v0[a50];
            const v54 = a51[2];
            for (let v55 = 0; v55 < 32; v55++) {
                for (const v56 in v0) {
                    try { v25.findIndex(a31); } catch (e) {}
                    try {
                        super.getInt32();
                    } catch(e59) {
                    }
                }
                a52["p" + v55] = v55;
            }
            return v54;
        },
        "g": a32,
        ...a32,
        [a32]: v11,
    };
    return o62;
}
f30(f30("cause", "Qq", v0, v2), "match", v10, v1);
f30(v11, "Qq", v25, v25);
try { ("toString").replaceAll(v11, v10, v23, "toString", v23); } catch (e) {}
const v69 = ("symbol").split("toString");
try { v69.find("Qq"); } catch (e) {}
