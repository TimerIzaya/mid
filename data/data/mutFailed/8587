class C3 {
    constructor(a5, a6) {
        function f7(a8, a9) {
            Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
            return a6;
        }
        a6.valueOf = f7;
        a6 <= a6;
        2 != 2;
        try {
            a5.length = 2;
        } catch(e15) {
        }
    }
    get e() {
        let v17;
        try {
        const t0 = "valueOf";
        v17 = t0();
        } catch (e) {}
        const v19 = v17?.[-2];
        let v20;
        try { v20 = new v19(); } catch (e) {}
        return v20;
    }
}
function f21(a22, a23) {
    ("valueOf").length;
    function f25(a26) {
        return f25;
    }
    return f25;
}
C3[Symbol.toPrimitive] = f21;
C3.length;
const v30 = new C3(1.0, 0.9518103789395754);
const v31 = v30?.constructor;
try { new v31("valueOf", C3); } catch (e) {}
new C3(0.9518103789395754, C3);
const v34 = new C3(C3, "valueOf");
268435456n + 268435456n;
7n & 7n;
-(-3.0);
let v43 = 5.0;
const v44 = [15,3,-9066,-7];
const v45 = v44[2];
[1,-1643840771,4,1111495904,-9007199254740992,-268435456,255,-403790861,268435439];
[21431,50,2015939235,-30775,-9223372036854775808,4294967296,15,-5512,-1711043381];
501822767n % 501822767n;
v43--;
function f52() {
    return 501822767n;
}
f52[Symbol.toPrimitive] = f52;
try { new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, v34); } catch (e) {}
new Uint8ClampedArray();
new BigUint64Array(4);
function f63(a64, a65) {
    return [4294967297];
    return Uint8ClampedArray;
}
Uint32Array[Symbol.iterator] = f63;
const v69 = new Uint32Array();
v69[Symbol.toPrimitive] = f21;
class C74 {
    b = "c";
    static {
        try { new this(); } catch (e) {}
        function F77(a79, a80) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            this.constructor;
        }
    }
    static #h;
    268435439;
}
try { C74.bind("c"); } catch (e) {}
const v84 = new C74();
v84[268435439] = v84;
new C74();
([607.0076449847468,-818.8860494127688])[2];
function F89() {
    if (!new.target) { throw 'must be called with new'; }
}
new F89();
Uint32Array[Symbol.iterator] = Symbol;
const v95 = new Uint32Array(Uint32Array, Uint32Array);
for (let v96 = 0; v96 < 5; v96++) {
    const v98 = new BigInt64Array();
    v98.entries();
    v96.caller;
    const v102 = new BigInt64Array();
    class C103 {
        constructor(a105, a106) {
            for (let v107 = 0; v107 < 10; v107++) {
                v102[-1];
                try {
                    super.o();
                } catch(e110) {
                }
            }
        }
    }
    class C111 extends C103 {
    }
    v95[v96] = v69;
}
-v45;
-788.7260290236088 * -788.7260290236088;
[2.220446049250313e-16,1.7976931348623157e+308];
[v44,1.7976931348623157e+308,"c"];
[-788.7260290236088,C74];
try { Math.expm1(f52); } catch (e) {}
const t114 = "boolean";
t114[4] = "boolean";
class C124 {
}
const v125 = new C124(C124);
const v126 = Math.round();
for (let v127 = 0; v127 < 10; v127++) {
    async function f128(a129, a130, a131) {
        a129 | a129;
        a131 - a131;
        const v134 = await v126;
        v134 - v134;
        Number.isNaN();
        [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v140 = [601759695];
        [1073741824,1073741823,1376142744,1073741825];
        function f142(a143, a144, a145, a146) {
            function f147() {
                let v149 = Float64Array;
                v149 = a144;
                b = v140;
                f128.length;
                const v151 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                const v153 = Symbol.toPrimitive;
                const o165 = {
                    toString(a155, a156) {
                        const v157 = a146 && a144;
                        function f158() {
                        }
                        [Date];
                        Float64Array.toString = Date;
                        URIError(Float64Array);
                        function f163() {
                            a155 *= v153;
                        }
                        return v157 <= v151;
                    },
                };
                -268435456 & -268435456;
            }
            f147();
            %OptimizeFunctionOnNextCall(f147);
        }
        for (let v170 = 0; v170 < 10; v170++) {
            v170 !== v170;
            f142();
        }
        const v174 = [0.8307152163010869,1.0,0.0];
        function f178(a179, a180) {
            return 3521;
        }
        const o182 = {
        };
        function f183() {
            return o182;
        }
        const v184 = new WeakSet();
        const o185 = {
            "g": v184,
            __proto__: v125,
            "a": v184,
        };
        v174[2] = v174;
        v174.length = v127;
        %VerifyType(v174 instanceof -24894);
    }
    f128(-788.7260290236088, -1000000000.0, -1000000000.0);
}
