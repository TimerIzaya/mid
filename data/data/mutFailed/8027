const v4 = new Set();
try { v4.add(Set); } catch (e) {}
class C6 {
    o(a8, a9) {
        509002051 && v4.size;
        try { this["log10"](40278); } catch (e) {}
        try {
            v4.size = a8;
        } catch(e14) {
        }
        return a9;
    }
    static get f() {
        this.b;
        return this;
    }
    [Set];
    11;
    f = 3;
    static 3 = 509002051;
    static 89;
}
C6[89] = C6;
const v17 = new C6();
const v18 = new C6();
v18[11];
const v20 = new C6();
const v22 = 127 ^ Set;
try { v20.o(3, ...v20, 3, 127, v22, v17); } catch (e) {}
3 + 3;
const v27 = new Array(3);
v27.length = v27;
new Float32Array(127);
2977 === 2977;
const v33 = Uint8Array?.call;
try { new v33(3); } catch (e) {}
new Uint8Array(2977);
try {
    new Array(3);
} catch(e38) {
}
try {
    new Array(-10);
} catch(e41) {
}
const v43 = new BigInt64Array(64);
v43.g = v43;
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this.constructor;
    try { v46(); } catch (e) {}
    try { new v46(v46); } catch (e) {}
}
const v49 = new F44();
const v50 = v49?.constructor;
try { new v50(); } catch (e) {}
const v52 = v49.constructor;
v52.e = v52;
const v53 = new v52(v52, v49);
const v54 = v53?.constructor;
try { new v54(); } catch (e) {}
