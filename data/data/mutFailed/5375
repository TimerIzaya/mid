const v3 = new Uint8Array(6);
class C5 {
}
const v6 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v6.concat(v6);
let v9 = new Date();
v9 **= v9;
new Int8Array(v3);
const o13 = {
};
gc(o13);
try {
    v6.e = 170.79545126331868;
} catch(e16) {
}
const v17 = new eval(1024);
function f18() {
    return f18;
}
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.constructor;
    try { new v21(); } catch (e) {}
    try {
        new v3(v21);
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e26) {
    }
}
class C27 extends F19 {
    4;
}
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    class C32 {
    }
    return C32;
    const v35 = [0.48879817238347556,2.2250738585072014e-308,1000.0,1000.0,-681.8004556870678,-1000.0,-1.5737380958439236e+306];
    function F36(a38, a39, a40) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = 4411;
        const v41 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
        const v42 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
        class C43 {
            constructor(a45, a46) {
                super[v42] = v41;
            }
        }
        const v47 = new C43(v41, v42);
        function f48(a49) {
        }
        const v52 = [v47];
        const o53 = {
            "arguments": v52,
            "type": "function",
        };
        new Worker(f48, o53);
    }
    new F36(531531810, v35, 531531810);
    try {
        this.e = a30;
    } catch(e56) {
    }
}
new URIError();
class C59 {
}
function f60() {
    return f60;
}
new F28(1024, v17);
const v62 = new F28(F28, v17);
new F28(v62, v17);
function F64() {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new Int32Array(2);
new Uint32Array();
Float64Array > v69;
Object.defineProperty(v62, "e", { enumerable: true, value: Int8Array });
new Set();
class C81 {
    constructor(a83, a84) {
        let {...v85} = v17;
    }
}
const v86 = new Uint8ClampedArray(4);
function f88(a89, a90) {
    return f88;
}
class C91 {
    constructor(a93, a94, a95, a96) {
        const o98 = {
        };
        gc(o98);
    }
}
const v100 = new Int8Array(v86);
v100.lastIndexOf();
