const v2 = new Int32Array(170);
const v5 = new Int32Array(257);
const v8 = new Uint8Array(215);
class C9 extends Int32Array {
    [Int32Array] = v2;
    static [Uint8Array];
    c;
    static [v8] = Int32Array;
    static 16;
    255 = v5;
    static #h = 215;
    10;
    #a = 215;
    #e;
    34 = 215;
    static [Int32Array] = Int32Array;
    [v5];
    static e = Uint8Array;
}
new C9();
new C9();
new C9();
const v17 = [[]];
class C19 extends Map {
}
const v20 = new C19();
const v21 = new C19(v17);
const v22 = new C19(v21);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = new Uint32Array();
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    try { a33.toLocaleString(); } catch (e) {}
    const v38 = a33?.constructor;
    let v39;
    try { v39 = v38(); } catch (e) {}
    try { v38(); } catch (e) {}
    const v42 = arguments.length;
    Object.defineProperty(v20, "e", { configurable: true, enumerable: true, value: f32 });
    const v44 = v21["entries"](a35, ...v22, BigUint64Array, ..."entries", a34, v42);
    new Float32Array();
    class C48 {
    }
    class C49 {
    }
    Math.log10(1073741825);
    function f54(a55) {
        const o56 = {
        };
        return o56;
    }
    const v57 = Symbol.toStringTag;
    v21[v57] = v57;
    function f58() {
        let v60;
        try { v60 = ("Vre").charAt(4096); } catch (e) {}
        try { v60.lastIndexOf("Vre", a33); } catch (e) {}
        let v62;
        try { v62 = ("Vre").codePointAt(v25); } catch (e) {}
        v62 - v62;
        v62 ^ v62;
        let v65 = Float64Array;
        v65 = a34;
        let v66 = v25.length;
        const v67 = v66++;
        try {
        } catch(e68) {
        }
        const o96 = {
            268435439: v29,
            ..."e",
            n(a70, a71) {
                return a71;
            },
            m(a73) {
                return v67;
            },
            m(a75) {
                return Map;
            },
            [f58]() {
            },
            ["entries"](a78, a79) {
            },
            valueOf(a81, a82) {
                return a81;
            },
            get h() {
                return v25;
            },
            [v30](a85, a86, a87) {
            },
            "toPrimitive": v39,
            get f() {
                return this;
            },
            [-4294967297n](a90, a91, a92, a93) {
                eval(a92);
            },
        };
        return v21;
    }
    f58();
    const v99 = Array();
    let v100;
    try { v100 = v99.findLast(f32); } catch (e) {}
    v99.unshift("entries", v44, "entries", v100);
    let v103;
    try { v103 = Int8Array.of(); } catch (e) {}
    try { v103.join(v17, v103); } catch (e) {}
    const v105 = new Int8Array(v29);
    v105.c = v105;
    const v107 = v105.buffer.slice();
    try { Int32Array(v107, arguments, -4294967297n); } catch (e) {}
    Int8Array?.h;
    let {"b":v112,"f":v113,"g":v114,...v115} = Reflect;
    return v112;
    class C116 {
    }
    function f117(a118, a119, a120, a121) {
        function f122(a123, a124, a125, a126) {
            const v127 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
            let v128;
            try { v128 = v127.filter(); } catch (e) {}
            return v128;
        }
        for (let v129 = 0; v129 < 10; v129++) {
            f122(v129, f122, v129, v129);
        }
        return a120;
    }
    const v131 = new Int32Array();
    const v132 = v131[3];
    v132 + v132;
    for (let v134 = 0; v134 < 5; v134++) {
    }
    try { v30["find"](..."find", a36, ...v29, ...v30, ...522675525n); } catch (e) {}
}
for (let v137 = 0; v137 < 10; v137++) {
    f32(v27);
}
%OptimizeFunctionOnNextCall(f32);
f32(Map, Map, v22, v22);
