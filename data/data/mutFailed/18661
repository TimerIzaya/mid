new WeakSet();
const v2 = /\xf0\x9f\x92\xa9[\u{12345}\u{23456}]/guim;
const v3 = /(m\cj\cJ\ci\cI\ck\cK)/gudiy;
/(x)(x)(x)\1/udmy;
class C5 extends WeakSet {
    1024 = WeakSet;
    static #d = v2;
    static {
        this.g = this;
        try { new BigInt64Array(this, this, this); } catch (e) {}
        new BigInt64Array(4096);
        Float32Array.a = Float32Array;
        new Float32Array(128);
        let v14 = 127;
        v14--;
        v14 + v14;
        const v18 = new Uint32Array(v14);
        v18[27] = v18;
    }
}
try { new C5(); } catch (e) {}
C5.name[1];
const v22 = new C5();
const v23 = v22?.add;
try { new v23(v2); } catch (e) {}
const v25 = v22[1024];
try { v25.apply(C5, v3); } catch (e) {}
const v27 = new C5();
const v28 = new C5();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
class C31 extends C5 {
    static #n(a33, a34, a35, a36) {
        a36[Symbol.replace] = v3;
        try { C5["p"]("p", a33, "p", v22, C5); } catch (e) {}
        return v27;
    }
    #a;
    static a = v27;
}
try { new C31(); } catch (e) {}
v23[1024];
const v43 = new C31();
v43[1024] = v43;
v43[1024];
new C31();
new C31();
BigInt64Array.prototype = BigInt64Array;
class C48 {
}
C48.f = C31;
let v49 = -4n;
v49 != v49;
const v51 = v49--;
C48.f = v49;
let v54;
try { v54 = new v51(Uint16Array, v28, v28); } catch (e) {}
v54[2];
const v56 = new Uint16Array(3225);
try { v43.reduceRight(v49); } catch (e) {}
Int16Array.prototype = Int16Array;
new Int16Array();
for (const v60 of v56) {
    v60 / v60;
    BigUint64Array.prototype = BigUint64Array;
    new BigUint64Array(3375);
}
