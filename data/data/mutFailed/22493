class C3 {
    static c = 1037403886;
    constructor(a5, a6) {
        try { a5.strike(1037403886); } catch (e) {}
        try { this.atan("number", 1037403886); } catch (e) {}
        super.unscopables;
    }
    1 = "setYear";
    static 536870888 = "number";
    [-2] = 1037403886;
    ["number"];
    static #h = "number";
    [1037403886] = "setYear";
    1000;
}
try { new C3("number", "setYear"); } catch (e) {}
const v11 = new C3("number", C3, C3, C3);
v11[1] = v11;
const v12 = new C3("number", v11);
new C3("number", 1037403886, 1037403886, 1037403886, "number", v12);
function f17() {
    return "0";
}
10 - 10;
Int32Array.BYTES_PER_ELEMENT;
new Int32Array(10);
try { new RegExp("-2147483649", "-2147483649", f17); } catch (e) {}
const v26 = new RegExp(512);
try { v26.test("setYear"); } catch (e) {}
680 % 680;
const v32 = Array();
class C33 extends Array {
}
class C34 extends C33 {
    [1] = v32;
}
new C34();
new Map(680);
const v38 = [15,52917,-9223372036854775807,-647320912,1463936330,-11132,-65537,1005084643,16,1073741823];
for (let v39 = 0; v39 < 5; v39++) {
    function f40() {
        const v42 = ("Vre").fixed("Vre", "Vre", v26);
        try { v42.o(f17); } catch (e) {}
        const v44 = v42.concat(v38, f40, "Vre");
        try { v44.replace(v38, v38); } catch (e) {}
        return v44;
    }
    f40();
    %OptimizeFunctionOnNextCall(f40);
}
