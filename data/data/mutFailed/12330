new Int8Array(256);
const v5 = new Int8Array(7);
new Float32Array(5);
function f9() {
    return f9;
}
const v10 = [601759695];
const v11 = [1073741824,1073741823,1376142744,1073741825];
function f14() {
    for (let v15 = 0; v15 < 32; v15++) {
        v10["p" + v15] = v15;
    }
    return v5;
}
Math.toString = f14;
const v18 = Math.round(Math);
async function f19(a20, a21, a22) {
    await v18;
    return 268435440;
}
f19();
new Uint8Array(268435440);
function f27(a28, a29, a30, a31) {
    function f33() {
        return a28;
    }
    f9();
    const v36 = new Int8Array();
    v36.buffer.slice();
    %OptimizeFunctionOnNextCall(f33);
    let v40;
    try { v40 = v11["find"](..."find", a31, ...v10); } catch (e) {}
    v40 <= a30;
    return arguments;
}
for (let v42 = 0; v42 < 10; v42++) {
    f27();
}
new BigUint64Array();
const v52 = new Uint8ClampedArray();
function f53(a54, a55) {
    const o60 = {
        [a54]: Float64Array,
        4: 6,
        "b": a54,
        [v52](a57, a58, a59) {
        },
    };
    return o60;
}
for (let i63 = 0, i64 = 10;
    (() => {
        const v65 = i63 < i64;
        const v67 = [-4.0,-1e-15];
        v67[2] = i63;
        v67[2] = 54004;
        const v70 = new BigUint64Array(3375);
        let [v71,,v72,...v73] = v70;
        return v65;
    })();
    i63++) {
}
