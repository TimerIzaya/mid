const v2 = new Uint8Array(3);
new BigInt64Array(106);
const v8 = new Uint32Array(27, BigInt64Array);
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = BigInt64Array;
    } catch(e13) {
    }
    try {
        this.h = 27;
    } catch(e14) {
    }
    try {
        this.MIN_SAFE_INTEGER = Uint32Array;
    } catch(e15) {
    }
}
const v16 = new F9(v2, 3);
new F9(v16, 3);
new F9(F9, 106);
const v21 = new BigInt64Array(127, BigInt64Array);
for (const v22 in v21) {
}
this.escape();
const v25 = [-185939478,-2064,4,2];
const v26 = v25.keys(v8, v25, 27);
function f27(a28, a29) {
    const o30 = {
        "g": v26,
    };
    return o30;
}
%OptimizeFunctionOnNextCall(f27);
const t34 = 127;
t34();
