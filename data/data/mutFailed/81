const v0 = [];
const v1 = [v0,v0,v0,v0];
const v2 = [v1];
[v0,v1,v2,v2];
const v4 = [-9223372036854775807,7];
[2,-256,3];
[-14,-803213058,-256,-1501197711,129,2008562098,1094738072,10,-256];
function f7() {
    return v1;
}
const v11 = /a\w/gudsy;
const v12 = /ka{0}/guims;
const v13 = /ab|c/udmy;
class C14 {
}
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v23 = new Uint8Array(16);
const v27 = new Uint8ClampedArray();
class C28 extends Uint8ClampedArray {
    2895846047 = f7;
    [v13];
    4096;
    4097;
    #g = v4;
    constructor(a30, a31, a32, a33) {
        super(v23);
        try { a31(); } catch (e) {}
        `1073741824${8}c`;
        super[v27] = 520;
    }
}
new C28();
const v37 = new C14();
const v38 = new C14();
function f39(a40, a41) {
    const o42 = {
        ...v12,
        "d": v38,
        "c": a41,
        "g": a41,
        "f": a40,
        "a": v37,
        7: C14,
        __proto__: C14,
        "e": v12,
        "b": v11,
    };
    return o42;
}
%PrepareFunctionForOptimization(f39);
f39(v13);
const v44 = f39(v13);
%OptimizeFunctionOnNextCall(f39);
f39(v44, v13);
/4/syd;
const v1 = /^xxx$/iuyd;
const v2 = /0fma+b/mvg;
const v6 = [918502315,-1073741824,-2046321892,9007199254740992,-14543,-9007199254740992,-2];
[-774070317,5,257,11];
const v8 = [-586821801,-8,-1340897576,16,-839832499,4096];
function f9(a10) {
    const v14 = new Uint8ClampedArray(512);
    v14.sort(BigInt64Array);
    return v8;
}
v8.toString = f9;
class C17 {
    static a = "co2jE";
    static n(a19, a20, a21) {
        const v22 = [];
        const v23 = v1 >> "co2jE";
        try {
            super.assign(v23, v22, "65536", a19, v2);
        } catch(e25) {
        }
        try { a21(..."65536", a20, a21, v1, ...v22, ...v8); } catch (e) {}
        return v6;
    }
    static [v8];
    375 = v6;
    #b = v2;
}
new C17();
new C17();
const v31 = [2.220446049250313e-16,-409.5445341345936];
function f32(a33, a34, a35) {
    const o40 = {
        "h": a35,
        "a": a34,
        [a35](a37, a38, a39) {
        },
        "b": a35,
        1942: v31,
        "g": v31,
        ...v6,
    };
    return o40;
}
const v41 = f32(v6, -409.5445341345936, -409.5445341345936);
const o43 = {
    __proto__: v41,
    126: undefined,
    ...v41,
};
new C17();
function f45() {
    return C17;
}
class C50 {
    static [-8.662521944722695];
    m(a52) {
        function f53() {
            return 1073741823;
        }
        Object.defineProperty("trim", 5, { enumerable: true, set: f53 });
    }
    o(a55, a56) {
        const t63 = a55(-8, "trim", -8, this);
        t63.f = -8 == a55;
    }
}
C50.g = C50;
class C59 extends C50 {
    static #a;
    5;
    4 = C50;
}
const v60 = new C59();
v60[5] = v60;
const v61 = new C59();
v61[5] = v61;
const v62 = new C59();
const v63 = new C50();
const v64 = v63?.toLocaleString;
try { new v64(); } catch (e) {}
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
function f71(a72) {
    const o75 = {
        [9007199254740992](a74) {
        },
    };
    return "trim";
}
f71(1073741823);
f71(1073741823);
f71(-8);
try { Set(); } catch (e) {}
new Set();
Uint8ClampedArray.e = Uint8ClampedArray;
new Uint8ClampedArray(1944);
const v87 = new Uint8Array(7);
-850789.2132591 | -850789.2132591;
function f93() {
    return v64;
}
f93.f = f93;
const v94 = new Float32Array(6);
function f95() {
    try { ("c").startsWith(); } catch (e) {}
    try { ("1").trimLeft(); } catch (e) {}
    let v100 = -560.0308879674441;
    const o136 = {
        __proto__: "co2jE",
        [1944]: "defineProperty",
        /*
        __proto__: v94,
        */
        [v100](a102, a103) {
            new Uint16Array(8);
            new Float64Array(33);
        },
        [v100](a111, a112) {
            super.getYear();
        },
        ...v62,
        /*
        __proto__: "1",
        */
        ["1"](a115) {
            /s1(\1a)/mviy;
            /a\S\xf0\x9f\x92\xa9/msuyd;
            const o118 = {
            };
            v100 = -2.0;
            let v119 = BigUint64Array;
            let v121 = ("boolean").toLocaleLowerCase(v61, f95);
            class C122 {
            }
            [v119,v121] = [-5,-65535,2269];
            let v126 = -(-5);
            !-5;
            ++v126;
            const v129 = 6.0789167093475385 % -5;
            [268435439,-1080874019,268435439];
            try { BigInt64Array.bind(BigInt64Array); } catch (e) {}
            v129 ^ 6.0789167093475385;
        },
    };
    o136.a = v100;
    return o136;
}
const v137 = f95();
v137.a = v137;
function F138(a140, a141, a142) {
    if (!new.target) { throw 'must be called with new'; }
    this?.set;
    try { a142.construct(); } catch (e) {}
}
F138.arguments = F138;
const v147 = [Reflect,Reflect,Reflect];
v147[1];
Reflect.construct(F138, v147, Map);
const v152 = new BigInt64Array(301);
v152[216];
new BigUint64Array(6);
const v159 = new Int16Array(1024);
const v160 = f95();
const v161 = f95();
function F162(a164, a165) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C166 {
            static c;
            static #m(a168) {
            }
        }
        const v169 = new C166();
        v169.constructor = f45;
        const v170 = v169.constructor;
        v170.prototype = v170;
    } catch(e171) {
        function f172() {
            return f172;
        }
        class C173 {
            #e;
            [v159];
            static 268435440 = e171;
            #a;
        }
    }
}
new F162(v137, v137);
const v175 = new F162(v161, v160);
const v176 = v175?.constructor;
try { v176(F162, v87); } catch (e) {}
try {
} catch(e178) {
}
const v181 = Array(2590);
class C182 {
    [2590] = v181;
    h = 2590;
}
new F162(v137, v160);
const t203 = (-13545).constructor;
const v187 = new t203();
try { v187.toExponential(129n); } catch (e) {}
new BigUint64Array(1024);
let v191 = 0;
do {
    const o192 = {
    };
    v191++;
} while ((() => {
        const v195 = v191 < 3;
        !v195;
        return v195;
    })())
