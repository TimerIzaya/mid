const v2 = new Uint16Array(3377);
4096 > 4096;
const o8 = {
    "maxByteLength": 124,
};
const v10 = new SharedArrayBuffer(5, o8);
new BigInt64Array(v10);
const v13 = new Uint8ClampedArray(4096);
try { v13.slice(v2, v13); } catch (e) {}
BigInt64Array.BYTES_PER_ELEMENT;
new BigInt64Array(538);
/[\c!]/dms;
/Slv3/gdiy;
/\P{Any}/vi;
function F22(a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.constructor;
    let v28;
    try { v28 = new v27(); } catch (e) {}
    this.e = v28;
}
function f29() {
    for (let v30 = 0; v30 < 5; v30++) {
        new F22();
    }
    return F22;
}
%PrepareFunctionForOptimization(f29);
f29();
%OptimizeFunctionOnNextCall(f29);
f29();
