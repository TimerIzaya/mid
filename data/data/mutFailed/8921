function f3() {
    return "B";
}
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try { a7.indexOf(a6); } catch (e) {}
    this.c = F4;
    const v9 = ("number").constructor;
    try { new v9(F4); } catch (e) {}
    const v13 = Int8Array?.constructor;
    try { new v13("number"); } catch (e) {}
    new Int8Array(1000);
    function F17(a19, a20) {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { F17("B", f3); } catch (e) {}
    class C22 extends F17 {
        #d;
        static {
            this.prototype = this;
            for (let v24 = 0; v24 < 25; v24++) {
            }
            try {
                this.#d = Proxy;
            } catch(e25) {
                e25.message;
            }
        }
    }
    try {
        this.c = f3;
    } catch(e27) {
    }
    try {
        const t34 = "number";
        t34.d = "B";
    } catch(e28) {
    }
}
new F4("b", "B");
new F4(f3, "b");
new F4("B", "number");
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this?.constructor;
    try { new v34(); } catch (e) {}
    this.g = this;
    -4294967295 | -4294967295;
}
const v38 = new F32();
const v40 = new WeakSet();
v38.h = v40;
const v41 = [-50041,1073741823];
v41[1] = v41;
const v42 = [-1289924662,162,15,1763607136,559809667,755995302,12,268435439,1073741823];
[10,9007199254740991,257,-13,1073741825,-536870912,-16723,-4294967296];
try { ("-9223372036854775808").strike(); } catch (e) {}
class C48 {
    toString(a50, a51) {
        super.g = f3;
    }
    n(a53) {
    }
}
const v54 = new C48();
function f55(a56, a57, a58) {
    function F59(a61, a62, a63) {
        if (!new.target) { throw 'must be called with new'; }
        function F64(a66, a67) {
            if (!new.target) { throw 'must be called with new'; }
            function f68(a69, a70, a71) {
                for (let i = 0; i < 5; i++) {
                }
                try {
                    f68(this, a71, a71);
                } catch(e73) {
                    function f74(a75, a76) {
                        return a75;
                    }
                    f74(this, f68);
                }
            }
            f68(a66, a66, F59);
        }
        new F64(F59, this);
    }
}
f55.g = f55;
const v80 = /(?: foo )/vdm;
const v81 = /zP/gud;
2698 * 2698;
try { new Uint8ClampedArray(Uint8ClampedArray, v42, v80); } catch (e) {}
new Uint8ClampedArray(2698);
("29753").replaceAll("29753", "b").split("b");
const v91 = v54 > "-9223372036854775808";
v91 && v91;
Object.defineProperty(v54, 129, { configurable: true, set: f55 });
v80.__proto__ = v81;
Object.defineProperty(v81, "source", { configurable: true, enumerable: true, get: f55, set: f55 });
gc.prototype;
const t99 = "async";
t99.g = "async";
const o97 = {
    "execution": "async",
    "type": "major",
};
const v98 = [-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297];
try { new Int16Array(v38, "async", Int16Array); } catch (e) {}
new Int16Array(v98);
-3.0 | -9007199254740992;
const v106 = gc(o97)?.constructor;
try { new v106(v41); } catch (e) {}
const o108 = {
};
o108.d = o108;
const v109 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
Float64Array.e = Float64Array;
try {
    v109.forEach(Float64Array);
} catch(e112) {
}
