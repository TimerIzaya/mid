function f3() {
    function f4(a5) {
        const o8 = {
            "maxByteLength": 129,
        };
        const v10 = new SharedArrayBuffer(129, o8);
        new Float32Array(v10);
        return Uint16Array;
    }
    return f4;
}
function f13(a14) {
    new WeakMap();
}
Object.defineProperty(Uint16Array, Symbol.match, { writable: true, configurable: true, get: f3, set: f13 });
new Uint16Array(209);
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v25 = [2105803616n];
const v26 = [v25,1073741823n,v25,1073741823n,v25];
const v27 = [2105803616n,v25,1073741823n];
const v28 = v27?.forEach;
try { new v28(42959n); } catch (e) {}
v27[1];
64 >>> 64;
const v34 = new Array(64);
v34[11] = 42959n;
let v35;
try { v35 = v34.slice(Array, Array); } catch (e) {}
try { v35.includes(2105803616n); } catch (e) {}
/a[a-z]/vdim;
const v38 = /a\w/gvdsy;
v38.constructor = Array;
const v39 = v38?.constructor;
try { new v39(Uint16Array, 2105803616n); } catch (e) {}
/([\xe2\x81\xa3])/gvds;
const v42 = [64,v34];
try { v42.toString(); } catch (e) {}
try { v42.sort(v26); } catch (e) {}
const v45 = [v25,v27];
function f46(a47) {
    try {
        f13(v28);
    } catch(e49) {
    }
    return 2105803616n;
}
v45.constructor = f46;
try { v45.splice(209, v42); } catch (e) {}
([v26,v45,2105803616n,v38,1073741823n])[4];
function f54(a55) {
    let v56 = 6;
    class C58 {
        get b() {
            delete this?.e;
            v56 = 1664606158;
            const o62 = {
                valueOf() {
                    return this;
                },
            };
        }
    }
    return f3;
}
Uint8Array.valueOf = f54;
Uint8Array.length;
function f64(a65, a66, a67, a68) {
    Object.defineProperty(a65, "g", { value: v26 });
    a65 % a67;
    const o72 = {
        set b(a71) {
        },
    };
    const v73 = o72?.__lookupGetter__;
    try { v73.call(a68); } catch (e) {}
    function F75(a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = a78;
    }
    function f79(a80) {
        a80[4] = a80;
        return a80;
    }
    try { new v73(o72); } catch (e) {}
    return v73;
}
for (let v82 = 0; v82 < 500; v82++) {
    f64(Uint8Array);
}
