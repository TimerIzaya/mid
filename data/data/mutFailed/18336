const v6 = [383.41574189291464,-128n,-60278n,-60278n];
const v7 = [-6.303084849413462,554.2245131304933,-6.303084849413462,-6.303084849413462,268435456n];
v7[3] = v7;
v7[1] = v7;
[-60278n,v7,v6,v7,-128n];
try { new Uint32Array(268435456n, -6.303084849413462, 268435456n); } catch (e) {}
const v12 = new Uint32Array(1000);
let v13 = 64;
v13--;
try { new NaN(383.41574189291464, v7, v7); } catch (e) {}
NaN.prototype = NaN;
new NaN(v13);
Float32Array.prototype = Float32Array;
const v20 = new Float32Array(11);
try { v20.slice(v12, -60278n); } catch (e) {}
1102693041 / 1102693041;
const v25 = Array(1102693041);
try { v25.find(NaN); } catch (e) {}
