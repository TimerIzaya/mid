const v2 = new Array(2800);
function f3(a4) {
    const o21 = {
        [v2](a6, a7, a8) {
        },
        ...f3,
        9: f3,
        set b(a10) {
        },
        1073741825: Array,
        ...a4,
        [a4](a12, a13) {
            try {
                Array.__proto__ = this;
            } catch(e14) {
                function F15() {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.a = 12;
                    } catch(e18) {
                    }
                    try {
                        this.c = 12;
                    } catch(e19) {
                    }
                }
                const v20 = new F15();
                a4.h = v20;
            }
            return Array;
        },
        "h": v2,
        __proto__: a4,
        "c": a4,
        [a4]: v2,
    };
    return o21;
}
const v22 = f3(v2);
const v23 = f3(v22);
const v24 = f3(f3);
class C25 extends Array {
    [v23] = f3;
    static {
        Object.defineProperty(Array, super.length, { enumerable: true, get: Array });
        new WeakSet();
    }
    #m(a31, a32, a33) {
        function f34(a35, a36, a37, a38) {
        }
    }
    static {
        super.b = this;
    }
    static h = v23;
    constructor(a41, a42) {
        a42[this];
    }
    set g(a45) {
        super.d = v22();
    }
    static d;
    static [v22];
    static #a;
    /*
    constructor(a48, a49) {
        eval(a48);
    }
    */
    [v2] = Array;
    set g(a56) {
        let v55 = this;
        ({"c":a56,"d":v55,} = Array);
    }
    /*
    constructor(a58, a59) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
    */
    static #b;
    1073741824;
    [v24];
}
new C25();
new C25();
new C25();
[-20883,-6,1073741824,16,1102516353,65536,13,-9007199254740992];
[-1,-65537,-128,1073741823,127,47944,2,4096];
[-981472156,49259,9007199254740990,6460,-7539,9007199254740991,-4096,2147483647];
const v69 = new Int8Array(1159);
const v71 = new Uint8ClampedArray();
const o74 = {
    set g(a73) {
    },
};
class C76 extends Array {
}
new C76();
for (const v78 in v69) {
    const v79 = v69[1];
    const v80 = v69[2];
    try { v71["forEach"](...v80, v79, ..."forEach"); } catch (e) {}
}
