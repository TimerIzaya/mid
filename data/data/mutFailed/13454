const v5 = new Array(117);
const v6 = [1000000.0,-1.7976931348623157e+308];
const o7 = {
    ...v6,
};
const o12 = {
    toString(a10, a11) {
        Object.defineProperty("-884841883", a10, { configurable: true, value: a11 });
        return "-884841883";
    },
};
try { ("").lastIndexOf(o12); } catch (e) {}
const v15 = [13135,-3,0,-1024,-9223372036854775808];
const v16 = [-119405563,9223372036854775807,7811,7];
[-256,16,2147483649,-27275,128];
class C18 extends Array {
    static #e;
    get c() {
        Object.defineProperty(Array, v16, { set: Array });
        !765819875;
        try {
            v5.#e;
        } catch(e22) {
        }
        return v15;
    }
    constructor(a24, a25, a26, a27) {
        super(765819875);
        try {
            v15.map(Array);
        } catch(e29) {
        }
        super.f = a26;
        for (let v30 = 0; v30 < 32; v30++) {
            function f31(a32, a33) {
                return a33;
            }
            class C34 {
            }
            v15["p" + v30] = v30;
        }
    }
}
new BigInt64Array([63570]);
v6 + v6;
const v42 = new C18(v16, 765819875, 58446, v5);
const v43 = new C18(v42, 58446, 765819875, v42);
new C18(v16, 765819875, 117, v43);
new BigInt64Array(2992);
new Int16Array(19);
const v51 = [0.36865488864674667,-5.0,972.8964403791567];
function f52(a53, a54) {
    return v51;
}
v51[Symbol.toPrimitive] = f52;
function f57(a58) {
    return a58 % v51;
}
v42[Symbol.toPrimitive] = f57;
const v63 = [601759695];
const v64 = [427812215,61195,-2147483647,4096,-2147483647,30905];
function f65(a66, a67, a68, a69) {
    try { a68.find(a66, a68, a67, v64, a67); } catch (e) {}
    try { v64["find"](..."find", a69, ...v63, ...v64); } catch (e) {}
    return a66;
}
const v73 = new Int32Array(1024);
const o81 = {
    "type": "",
    toString(a76, a77, a78) {
        try { this.toString(); } catch (e) {}
        [v73,v73,v73,v73,v73];
        v6[58446] = f52;
    },
};
gc(o81);
