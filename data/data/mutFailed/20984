class C3 {
    p(a5, a6) {
        let v9 = 2147483648;
        --v9;
        -this;
        v9 >> 34408;
        let v14 = "aEiiO" + this;
        v14++;
        return Math.cbrt(a5);
    }
    p(a18, a19, a20, a21) {
    }
    constructor(a23) {
        function f24() {
            return f24;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f24 });
    }
}
C3.prototype = C3;
new C3();
const v28 = new SharedArrayBuffer(945);
function f29() {
    function f30(a31, a32) {
        Symbol.isConcatSpreadable.description.fontsize(Uint8Array);
        return -308.5357502763504;
    }
    return f30;
}
Object.defineProperty(v28, "constructor", { writable: true, configurable: true, enumerable: true, get: f29 });
v28.slice();
const v39 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v40 = [6,268435440,13,1073741825];
const v41 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
v41.reverse();
class C43 {
    constructor(a45) {
        function f46(a47, a48) {
            a47[5];
        }
        f46(v41);
        f46(v39);
        f46(a45);
    }
}
C43.constructor = f29;
const v53 = C43.constructor;
function f54(a55, a56, a57, a58) {
    try { a56.some(v53); } catch (e) {}
    const o60 = {
        __proto__: a55,
    };
    try { o60.groupToMap(); } catch (e) {}
    return o60;
}
f54(v40).indexOf();
let v64 = new C3();
function f65(a66) {
    const o67 = {
    };
    return v28;
}
v64[Symbol.toPrimitive] = f65;
const v70 = new C3();
[806.4188302276375,-2.2250738585072014e-308,3.1082597221436465,-3.0,1.4418499937576449e+308,1e-15,-5.0,1.0];
[-2.0,4.0,642.2403240510562,NaN,1000.0,1000000000.0];
Object.defineProperty(Uint8ClampedArray, Symbol.iterator, { writable: true, value: f29 });
const v76 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
for (let v77 = 0; v77 < 5; v77++) {
    function f78() {
        const o79 = {
            __proto__: v76,
            4: v77,
        };
        return f78;
    }
    f78();
    %OptimizeFunctionOnNextCall(f78);
}
const v81 = [957.8552009886719,-1.2199983623639617e+308,-1000000000000.0,-1000000000.0,-3.0,2.0];
v81[3];
[-14839,9007199254740991,1073741824,1000];
[4294967296,-9007199254740992,16,268435439,9007199254740992,257,512,-1689066314,2147];
const v85 = [4096,129];
[-9007199254740990,268435441];
[-37207,127,-4,-2147483649,65535,-1024,-536870912];
const v88 = [4294967297,-256,8,1204244361,536870887];
try { v88.groupToMap(v88); } catch (e) {}
const v90 = [4,268435456,-1988579072,-9007199254740991,-31917];
try { v90.every(v90); } catch (e) {}
function f92() {
    return f92;
}
class C93 {
}
const v94 = C93.length;
v64--;
function f96(a97, a98, a99) {
    const v100 = a97 !== a97;
    a98.constructor;
    let v102;
    try { v102 = v100.parseFloat(v81); } catch (e) {}
    const v105 = new Uint8ClampedArray();
    try { Float32Array.apply(0, v105); } catch (e) {}
    const v108 = v102();
    v108 * v108;
    return v108.toPrecision(f92);
}
f96.g = SharedArrayBuffer;
f96.g = f96;
try { v70(v94, v94); } catch (e) {}
[-1257322457,8,127,-14,39653,128,9007199254740990];
function f113(a114) {
    const v115 = [9007199254740991,10,56647,-29200,-9223372036854775807];
    return v115 & v115;
}
const v120 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
const v121 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
try { v121.group(127); } catch (e) {}
const v123 = [];
Object.defineProperty(v123, 1, { writable: true, enumerable: true, value: v123 });
function f124(a125, a126, a127, a128) {
    const v131 = new BigInt64Array(4046);
    let v132 = undefined;
    const v133 = v132++;
    v133 >> v133;
    v133 + v133;
    v133 >> v133;
    let o137 = {
    };
    [,...o137] = v131;
    return f124;
}
for (let v138 = 0; v138 < 5; v138++) {
    f124(v138, v138, v138, v138);
}
let v140;
try { v140 = v121.concat(v120); } catch (e) {}
try { v140.push(v85); } catch (e) {}
