class C3 {
    static #n(a5) {
        let v4 = this;
        v4 = "m";
        return a5;
    }
    static 11 = Infinity;
    static #toString(a7, a8) {
        let v10;
        try { v10 = new a7(new.target, 1000000000000.0, "m"); } catch (e) {}
        try {
            ("m").trim();
        } catch(e12) {
        }
        return v10;
    }
}
new C3();
const v14 = new C3();
new C3();
class C19 extends C3 {
    3951 = "setUTCMinutes";
    static #f = "m";
    static d = "m";
    #o(a21, a22, a23) {
        let v24;
        try { v24 = a23.toUpperCase(); } catch (e) {}
        try { v24["fromCodePoint"]("setUTCMinutes", v14); } catch (e) {}
        try {
            const t29 = "fromCodePoint";
            t29.__proto__ = "setUTCMinutes";
        } catch(e27) {
        }
        super.b = v24;
        super.h = a22;
        super.d;
        +v24;
        return "m";
    }
}
new C19();
new C19();
new C19();
class C33 {
}
const v34 = new C33();
[-5105,-65536,512,536870887,128,1108608188,60880,12,5];
const o36 = {
};
const v37 = o36.constructor;
const v39 = 1922 % 1922;
const v40 = v39 == v39;
for (let v41 = 0; v41 < 25; v41++) {
    function f42() {
        return f42;
    }
    function f43(a44, a45, a46, a47) {
        let v48;
        try { v48 = a45(a47); } catch (e) {}
        try { new a46(); } catch (e) {}
        a45.freeze();
        const v51 = a47 + a47;
        function f52() {
            return v48;
        }
        const v53 = f52.length;
        const v54 = -v53;
        const v56 = f42().constructor;
        let v57;
        try { v57 = v56(); } catch (e) {}
        const v58 = v57.bind(v54, v56, v57);
        function f59() {
            return v57;
        }
        const v60 = f59();
        try { v60.null(); } catch (e) {}
        f59();
        %OptimizeFunctionOnNextCall(f59);
        f59();
        const v66 = new BigUint64Array();
        v66[2445191368] = 268435441n;
        v58.bind();
        v56 * v40;
        const v69 = typeof f52;
        const v70 = v69.italics(v69, v54);
        Object.defineProperty(v34, 6, { writable: true, enumerable: true, set: f52 });
        new Uint16Array(1024);
        new Int8Array(8);
        new Int16Array(2152);
        try { v70.match(f59); } catch (e) {}
        const v82 = new Int8Array();
        v82.entries().next(v53);
        [];
        const v88 = ("find").blink("find", v82, v41).replaceAll;
        try { v88(f43, v51); } catch (e) {}
        return f42;
    }
    for (let v90 = 0; v90 < 5; v90++) {
        f43(v90, v37, v37, 1922);
    }
}
