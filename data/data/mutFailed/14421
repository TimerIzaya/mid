let v0 = "string";
try {
    v0.b = -9007199254740991;
} catch(e4) {
}
class C5 {
    get d() {
        try {
            this.length = 1;
        } catch(e8) {
        }
        v0 -= this;
        const t11 = "asyncIterator";
        t11[87] = 1;
        return 1;
    }
    static d = "asyncIterator";
    static [v0];
    static g = v0;
    static 5;
    [0.0];
}
const v9 = new C5();
const v10 = new C5();
const v11 = new C5();
function f12(a13, a14, a15) {
    const o16 = {
        __proto__: v0,
        ...v11,
        9: "asyncIterator",
        "f": v0,
        "c": a15,
        [-1]: "asyncIterator",
        "caller": v0,
        "MAX_VALUE": "asyncIterator",
        "b": a14,
        [0.0]: a15,
        "e": a15,
        "h": "asyncIterator",
        9: a15,
        ...a13,
        [a13]: v10,
    };
    return o16;
}
const v17 = f12(v11, v9, v11);
const v18 = f12(v9, v11, v11);
f12(v11, v17, C5);
new WeakSet();
[536870888,-1,4294967295,362268157,9007199254740991];
[9007199254740991,127,5,4,1000,255,512];
[6,-2147483648,-163552433,-5];
function f25() {
}
f25();
%PrepareFunctionForOptimization(f25);
f25();
f25();
%OptimizeFunctionOnNextCall(f25);
f25();
const v31 = ([-65535,14,-4294967295,8,9,-1195111240,8,4,-9223372036854775808])[1];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f25;
    try { this.constructor(); } catch (e) {}
    this.b = 4294967296;
    try {
        function F36() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v38 = new F36();
        const v39 = new F36();
        const v40 = v39.__defineSetter__;
        try { v40(); } catch (e) {}
        function f42(a43, a44) {
            const o45 = {
                "e": v38,
            };
            return o45;
        }
        const v46 = F36();
        f42();
        function f48() {
            return f48;
        }
        f48.b = v31;
        f48.b = f48;
        new Uint32Array(51);
        new Uint16Array(636);
        const v57 = new Float32Array();
        for (const v58 of v57) {
            v58 & v58;
            new Uint8Array(127);
            function F63() {
                if (!new.target) { throw 'must be called with new'; }
                const v65 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
                Date();
                v65.reduce(Date)[22];
                const v73 = Array(19793);
                for (const v74 of v73) {
                }
                const v75 = [v73,v73,v73,v73];
                const v77 = new BigUint64Array();
                const v78 = v77.constructor;
                try { v78(); } catch (e) {}
                const v81 = [[v65,v75,v75]];
                v81.toSpliced(v81);
                v81 >= Uint16Array;
            }
            Object.defineProperty(v46, Float32Array, { configurable: true, enumerable: true, get: f42, set: f48 });
        }
        this.g = 4294967296;
    } catch(e85) {
    }
    this.f = 4294967296;
}
new F32();
new v31();
new F32(v17, 0.0, v18);
