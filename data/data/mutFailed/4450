const v0 = [-2147483647,-9007199254740990,-11,127,-65536,-2001510920];
const v1 = [-2,-71307493,536870912,7,1493538905,-4096,-9984];
const v2 = [1073741823,-30042,61135,536870889,2,-6];
const v3 = /a*?Z\u{12345}/us;
let v4;
try { v4 = v2.sort(v3); } catch (e) {}
const v5 = v1.length;
v5 * v5;
const v7 = v2[v0];
for (let v8 = 0; v8 < 32; v8++) {
    /[^[\d-z](?:a?)+[\cA]]/gdimy;
    /((x)(x)(x)\1*)/my;
    v1["p" + v8] = v8;
}
const v22 = v3 << v4;
let v23;
try { v23 = new v7(v5, v22, v22, v7, v3, v4); } catch (e) {}
Reflect.construct(v23, [v0,v5,v0,Reflect], v4);
const v27 = /\p{gc=Nd}/gdi;
const v28 = v27.lastIndex;
const v29 = /a+/gudiy;
v29.global;
const v32 = -2n ^ -2n;
-1931983422n + -1931983422n;
class C36 {
    #toString(a38, a39, a40, a41) {
        function F42(a44, a45) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a45;
            } catch(e46) {
            }
            try {
                this.c = a44;
            } catch(e47) {
            }
            f = v5;
            function f48() {
                %VerifyType(v32);
                try {
                    f48();
                } catch(e50) {
                }
                return -2n;
            }
            this[F42];
            try {
                this.h = a39;
            } catch(e52) {
            }
        }
        new F42(v27, v29);
        new F42(v0, a39);
        new F42(v1, v27);
        return this;
    }
}
new C36();
const v57 = new C36();
new C36();
v57.h;
try { Reflect.preventExtensions(v1); } catch (e) {}
v28?.g;
try { v57.concat(v1, v27); } catch (e) {}
new Uint8Array(16);
new BigInt64Array(1024);
new Uint8ClampedArray(0);
try { ("function")["-268435456"](); } catch (e) {}
