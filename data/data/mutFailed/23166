const v2 = new ArrayBuffer(64544);
new Uint8Array(129);
16 % 16;
const v9 = new Int8Array(16);
function f10(a11, a12) {
    function f13(a14, a15, a16, a17) {
        function F18(a20, a21, a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v24 = new F18();
        const v25 = new F18(f13, f13, a15, v24);
        v25 in v24;
        return f13;
    }
    return f13;
}
v9.toString = f10;
try { v9.set(Int8Array); } catch (e) {}
let v28;
try { v28 = v9.find(v9); } catch (e) {}
const v29 = [v28];
let v30 = [16];
v30.valueOf = f10;
[v9,v30];
[v29,v30,ArrayBuffer,129,ArrayBuffer];
[Uint8Array];
const v34 = [v9,16,Uint8Array,v30];
const v36 = [null];
const v37 = [v36,Uint8Array,129,16];
try { v37.entries(); } catch (e) {}
[Int8Array,v2,Uint8Array,v9,129];
const v40 = /[^7Y[a-zA-Z0-9]?]/gvdi;
try { v28(v40); } catch (e) {}
v34 >= 129;
255 | 255;
v30--;
v36 || Int8Array;
const v49 = +v30;
v49 % v49;
Math.exp(v49);
for (let v52 = 0; v52 < 5; v52++) {
    v52++;
    function f54() {
        Array.prototype;
        const v57 = Array();
        try { v57.reduceRight(v40); } catch (e) {}
        return v57;
    }
    f54.arguments = f54;
    f54();
    %OptimizeFunctionOnNextCall(f54);
}
