const v3 = [-2.220446049250313e-16,-Infinity,-8.168493296931409];
[103177.53861788404,670478.9538122141,0.6392524732776472,0.5423275350077572,0.8561071530617079,-739182.3550185126];
const v5 = [0.8293052943931807,-1000000.0,2.447068026398485,5.485210037943174e+307,-1e-15];
try { v5(v3, 1.0, v5, 1.0); } catch (e) {}
const o9 = {
    "maxByteLength": 4294967295,
};
let v10 = 11;
const v11 = new SharedArrayBuffer(v10, o9);
new Int16Array(v11);
class C14 {
    get e() {
        const v16 = super[1000000.0];
        let v19 = 9223372036854775807 >> 1.0;
        Math.tanh(this);
        Math.asin(this);
        v19--;
        +v19;
        v16 || 9223372036854775807;
        return v19;
    }
    h = v10;
    #h;
    static [4294967295];
    static [1000000.0];
    static 1198;
    static #a = 1000000.0;
    #b;
}
new C14();
new C14();
new C14();
new Float32Array(2078);
new Int8Array(206);
for (const v36 of v5) {
    ++v10;
}
const o41 = {
    "maxByteLength": 1808583996,
};
const v43 = new ArrayBuffer(3276, o41);
new Uint32Array(v43);
new Int16Array(3958);
class C48 extends Date {
}
const v49 = new C48();
const v50 = v49.toGMTString();
const v51 = [155533.8602852358,2.0];
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    Array(19793);
    v51[658291203] = null;
    v50[1073741824];
}
new F53();
new F53();
