const v0 = [];
function f1() {
    const o20 = {
        [v0]() {
            try {
                const o6 = {
                };
                const v7 = /Qa[a-z]/vdimy;
                this.fuck(o6, v7, v0, v7);
                function f9() {
                    Array.__proto__ = this;
                    return Array;
                }
                function F12(a14, a15) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v16 = this.constructor;
                    try { new v16(); } catch (e) {}
                    f9();
                }
            } catch(e19) {
            }
            return -371196515;
        },
    };
    return o20;
}
f1();
function f23(a24) {
    try {
        new f1();
    } catch(e26) {
    }
    return a24;
}
Object.defineProperty(Math, "valueOf", { writable: true, configurable: true, value: f23 });
const v27 = Math.atan(Math);
const v28 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
const v29 = v0?.constructor;
try { new v29(v28, Math, Math); } catch (e) {}
f1();
f1();
new Float64Array(1073741824);
class C41 {
    static 44 = "EV";
}
new C41();
for (let v45 = 0; v45 < 10; v45++) {
    function F47(a49, a50) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = v27;
        this.b = "b";
        this.d = a50;
    }
    const v51 = new F47();
    const o52 = {
        ...v51,
    };
}
const v56 = [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
function f57(a58) {
    const v60 = new Int32Array(0);
    new Int8Array(v60);
    return v0;
}
v56[Symbol.toPrimitive] = f57;
const v67 = new Uint8ClampedArray(3);
class C68 {
    constructor(a70, a71, a72, a73) {
        for (let v74 = 0; v74 < 5; v74++) {
            v67[v74] = a73;
        }
    }
}
const v75 = [1073741824,-46456,536870888];
const v78 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
class C79 extends Int16Array {
    [v78];
}
Math.exp(v56 | v75);
function f83() {
    return f83;
}
const v84 = [601759695];
const v85 = [1073741824,1073741823,1376142744,1073741825];
function f87(a88, a89, a90, a91) {
    function f93() {
        return a88;
    }
    const v94 = f83();
    const v96 = new Int8Array();
    function f97(a98, a99) {
        return v94;
    }
    f97();
    f97();
    const v102 = v96.buffer;
    Object.defineProperty(v102, "constructor", { writable: true, configurable: true, value: Date });
    new Int8Array();
    let v105 = 1000000000000.0;
    v105--;
    v102.slice(2147483648);
    %OptimizeFunctionOnNextCall(f93);
    let v109;
    try { v109 = v85["find"](..."find", a91, ...v84, ...v85, ...522675525n); } catch (e) {}
    Symbol("find");
    const v113 = new Uint8ClampedArray();
    const o114 = {
        ...v113,
    };
    v109 <= a90;
    return arguments;
}
