function F2() {
    if (!new.target) { throw 'must be called with new'; }
    const v4 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v6 = new Uint32Array();
    const v8 = [601759695];
    const v9 = [1073741824,1073741823,1376142744,1073741825];
    function f10(a11, a12, a13, a14) {
        const v15 = a11.constructor;
        let v16;
        try { v16 = v15(); } catch (e) {}
        const v17 = v16?.constructor;
        let v18;
        try { v18 = v17(f10, a11, v4, Uint32Array, v15); } catch (e) {}
        function f19() {
            const v21 = ("Vre").charAt(v18);
            v21.blink();
            let v23;
            try { v23 = ("Vre").codePointAt(v4); } catch (e) {}
            v23 % v23;
            let v25 = Float64Array;
            v25 = a12;
            b = v4;
            let v26 = v4.length;
            v26++;
            try {
                v9.forEach(a12);
            } catch(e29) {
                e29.message = e29;
            }
            const o40 = {
                "c": -4294967297n,
                valueOf(a31, a32) {
                    return v16;
                },
                1073741824: v6,
                [-4294967297n](a34, a35, a36, a37) {
                    eval(v21);
                },
            };
            return v9;
        }
        f19();
        const v43 = Array(v17);
        try { v43.findLast(); } catch (e) {}
        const v46 = Int8Array.of();
        let v47;
        try { v47 = v46.every(v46, a11, v46, a12, Array); } catch (e) {}
        const v48 = new Int8Array(v47);
        const v50 = v48.buffer.slice();
        const v51 = v50.constructor;
        try { v51(v50, v47, -30326n, v46, a11); } catch (e) {}
        const v54 = new Int32Array(v51, v15, v15);
        v54.lastIndexOf(a11, a13);
        try { v9["find"](..."find", a14, ...v8, ...v9); } catch (e) {}
        return -4294967297n;
    }
    const v58 = this?.propertyIsEnumerable;
    try { new v58(-30326n); } catch (e) {}
    this.a = this;
    for (let v60 = 0; v60 < 25; v60++) {
    }
    const v62 = new Float64Array(Float64Array, Float64Array, Float64Array);
    function f63() {
        v62.length = 0;
        return 0;
    }
    f63();
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e68) {
    }
}
class C71 {
    constructor(a73) {
        function f74() {
            return "object";
        }
        new Uint8ClampedArray(231);
        function f79() {
            return 3;
        }
        new Int8Array(3);
        new Uint16Array(2);
        new Int8Array(3926);
    }
}
const v88 = new C71("object");
const v89 = new C71(C71);
try {
const t0 = 1000000000.0;
t0(2.220446049250313e-16, Uint8ClampedArray, ...1000000000.0, -82.86062314585524);
} catch (e) {}
new C71(-65536);
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    this[145] = F96;
    try {
        this.h = a98;
    } catch(e100) {
    }
    try {
        this.c = -371270.78262848395;
    } catch(e101) {
    }
}
const v102 = new F96(v89, -371270.78262848395);
v102[145] = 2.220446049250313e-16;
new F96("object", v88);
new F96(-371270.78262848395, -371270.78262848395);
let v105 = 144;
const v106 = v105++;
class C107 {
    constructor(a109, a110) {
        function f111(a112) {
            v102[a109] = this;
            function F113(a115, a116) {
                if (!new.target) { throw 'must be called with new'; }
                const v117 = this.constructor;
                let v118;
                try { v118 = new v117(F113, v117, F113, F113); } catch (e) {}
                0 * 0;
                const v122 = [-5.313470018522258e+306];
                function F123(a125, a126, a127, a128) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v129 = this.constructor;
                    try { new v129(); } catch (e) {}
                    try {
                        v122 & 12620;
                    } catch(e133) {
                    }
                }
                new F123();
                const v135 = v118 >>> 38445;
                38445 >> v118;
                let v137 = v135 * v135;
                v137--;
            }
            return a112;
        }
        this.constructor = f111;
        const v139 = this.constructor;
        try { new v139(); } catch (e) {}
        this.propertyIsEnumerable(C107);
    }
}
function f142() {
    function f143(a144, a145) {
        function f147() {
            const o162 = {
                get d() {
                    const v152 = this != 2.220446049250313e-16;
                    function F153(a155, a156) {
                        if (!new.target) { throw 'must be called with new'; }
                        try {
                            this.c = "dXSrM";
                        } catch(e157) {
                        }
                        try {
                            this.d = v152;
                        } catch(e158) {
                        }
                    }
                    const v159 = new F153("82428790", 2.220446049250313e-16);
                    new F153(v159, F153);
                    new F153(this, 2.220446049250313e-16);
                    return "82428790";
                },
            };
            return o162;
        }
        const v163 = f147();
        const v164 = f147();
        const v165 = [2.0,41.95718811499455,-1000000000.0,441.87475467945524,5.0];
        function f166(a167, a168, a169) {
            const o174 = {
                __proto__: v163,
                p(a171, a172) {
                    delete this?.e;
                    return this;
                },
            };
            return a167;
        }
        f166(v164, v165);
        return C71;
    }
    return f143;
}
function f176(a177) {
    %VerifyType(a177);
}
Object.defineProperty(C107, Symbol.toPrimitive, { configurable: true, get: f142, set: f176 });
function f180(a181) {
    a181[4];
    return v106;
}
C107[Symbol.toPrimitive] = f180;
new C107(v105, v106);
