Int8Array.d = 257;
new Int8Array(257);
Object.defineProperty(Uint16Array, 0, { configurable: true, enumerable: true, value: Uint16Array });
Uint16Array.length;
const v5 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
const v8 = new Int32Array(v5, 10);
function f9() {
    return Uint16Array;
}
function f10(a11) {
    a11[9] -= 10;
}
Object.defineProperty(v8, "f", { writable: true, configurable: true, get: f9, set: f10 });
class C12 {
    static #d = 10;
    constructor(a14, a15) {
        a14.f = f9;
        try { a14.keys(); } catch (e) {}
        a15[1];
        try {
            v5.#d += v8;
        } catch(e18) {
        }
    }
}
const v19 = new C12(v8, v5);
const v20 = v19?.__lookupGetter__;
try { new v20(v19); } catch (e) {}
Int8Array.d = Int8Array;
Int8Array.d = Int8Array;
new Int8Array(9);
new Float64Array(3631);
11109 >>> 11109;
const v35 = Math.cosh(Math);
v35 ^ v35;
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    a39.e = a39;
    const v41 = this?.constructor;
    try { new v41(this); } catch (e) {}
    this.c = a39;
}
const v43 = new Uint8ClampedArray(255);
v43.valueOf = f10;
v43[20] = v43;
Object.defineProperty(Float32Array, Symbol.iterator, { writable: true, value: f9 });
try { new Float32Array(Float32Array, Float32Array, 65536); } catch (e) {}
const v50 = new Float32Array(127);
v50.g = v50;
v50.g = v50;
try {
    v8.f = v50;
} catch(e51) {
}
new Int8Array(1024);
10 | 10;
new Int8Array(10);
function f61() {
    Math.asin(Math);
    return f61;
}
const v64 = f61?.constructor;
try { new v64(9); } catch (e) {}
const v66 = new Uint16Array(9);
v66.includes(true, -706152110);
