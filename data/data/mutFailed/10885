const v2 = new RangeError(-6071, -6071, -6071, RangeError);
new Float32Array(257, v2, RangeError);
let v6 = 4;
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try { a10.valueOf(); } catch (e) {}
    const v13 = this.constructor;
    try { new v13(a10); } catch (e) {}
}
const v15 = new Uint16Array(v6, Uint16Array, -6071);
for (let v16 = 0; v16 < 25; v16++) {
    const v17 = [601759695];
    const v18 = [1073741824,1073741823,1376142744,1073741825];
    function f19(a20, a21, a22, a23) {
        v6++;
        a21 >> 536870887;
        let v29;
        try { v29 = v18["find"](..."find", a23, ...v17, ...v18); } catch (e) {}
        return v29;
    }
    for (let v30 = 0; v30 < 5; v30++) {
        f19(v18, v30, v30, v30);
    }
}
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    function f37() {
        return Float32Array;
    }
    const v40 = new Uint32Array();
    function f42(a43, a44, a45, a46) {
        const v47 = a43.keys;
        try { v47(a34); } catch (e) {}
        function f49() {
            return Uint32Array;
        }
        a43.constructor = f49;
        a43.constructor;
        a43 > v40;
        if (a36) {
            const t40 = "4294967296";
            t40.toString = v15;
        }
        const o59 = {
            [-4294967297n](a53, a54, a55, a56) {
                eval();
            },
        };
        return -4294967297n;
    }
    for (let v60 = 0; v60 < 10; v60++) {
        f42(this);
    }
    try {
        this.e = -6071;
    } catch(e62) {
    }
    try {
        ~1e-15;
        class C66 {
            #m(a68, a69) {
                function f70() {
                    return a69;
                }
                super[f70] = "f";
                %VerifyType(a69);
                return f70;
            }
            static c;
        }
        try { C66(); } catch (e) {}
        const v72 = new C66();
        v72?.constructor;
        this.f = a35;
    } catch(e74) {
    }
    try {
        this.NaN = a35;
    } catch(e75) {
    }
}
new F32(-6071, v6, v6);
new F32(-6071, v6, v6, Uint16Array, F32);
new F32(-6071, -6071, v6);
class C80 extends Date {
}
const v81 = new F32();
v81.setUTCSeconds();
