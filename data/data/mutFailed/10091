const v0 = [-439.0417226432761,348.35476297883247,1.6638503369829857e+308,959.6899660820604,-2.2250738585072014e-308];
[-1.8675974395934674];
const v2 = [1000000000.0,0.15512099322920747,-3.7994445094625817,-2.2250738585072014e-308,1000000000000.0,-1.0];
function f3() {
    return v2;
}
function f4(a5, a6) {
    const o19 = {
        5: f3,
        ...a6,
        "h": v0,
        [a5](a8, a9, a10) {
            const o11 = {
            };
            try {
                o11.c = a6;
            } catch(e12) {
            }
            try {
                const o13 = {
                };
                o13.c = a6;
                o13.e = v0;
            } catch(e14) {
            }
            try {
                const o15 = {
                };
                o15.c = a6;
                o15.e = a10;
                o15.b = a10;
            } catch(e16) {
            }
            try {
                const o17 = {
                };
                o17.c = a6;
                o17.e = v0;
                o17.b = a9;
            } catch(e18) {
            }
            return this;
        },
    };
    return o19;
}
v2(f4(f3, v0), v0);
f4(v0, v0);
new Float64Array(15);
new BigUint64Array(331);
new Uint8ClampedArray(3908);
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Uint8ClampedArray in this;
        new F32();
    } catch(e40) {
        try {
            this.fuck(1000.0, false);
        } catch(e44) {
        }
    }
}
new F32();
new Uint8ClampedArray();
