[];
const v3 = new BigInt64Array(16);
512 >> 512;
new Uint32Array(512);
-64;
64 ^ 64;
new Float32Array(64);
([-1.7976931348623157e+308])[0];
const v15 = [-4.60423711974015e+307,1000.0,-489855.8464681144,2.8468686959569857e+307,1e-15,1e-15,246.78761467748836,-7.271112795539382e+307,-0.0];
[-1e-15,-1000.0];
0.028957958839558873 >>> 0.028957958839558873;
-0.028957958839558873;
("2147483649")[7];
class C23 {
    static #p(a25) {
        function f26(a27) {
            return a27;
        }
        class C28 extends f26 {
            static [-1] = 8;
            static [a25];
            static 268435441;
        }
        return a25;
    }
    [0.028957958839558873];
    static 2147483648 = C23;
    static #g;
    #a;
}
C23[2147483648] = C23;
const v29 = new C23();
const v30 = v29?.constructor;
v30[2147483648] = v30;
let v31;
try { v31 = new v30(); } catch (e) {}
const v32 = v31?.constructor;
try { new v32(); } catch (e) {}
let v34;
try { v34 = new v30(); } catch (e) {}
const v35 = new C23();
let v36;
try { v36 = v35.propertyIsEnumerable(C23); } catch (e) {}
!v36;
!v36;
new C23();
const v40 = /[\11]/gm;
const v41 = /(?:a*)*/gudm;
const v42 = /a(?!bbb|bb)c/vi;
const v43 = v42?.toString;
try { v43.toString(); } catch (e) {}
v43.g = v43;
let v45;
try { v45 = new v43(); } catch (e) {}
function f46(a47, a48, a49) {
    a47 / a47;
    const o51 = {
        [a47]: a47,
    };
    o51[512] = o51;
    Object.defineProperty(o51, 6, { writable: true, set: f46 });
    o51[v41];
    try { v32.construct(o51); } catch (e) {}
    new Uint32Array(a48, delete a48?.[65537]);
    return o51;
}
const v56 = f46(512, v45, v42);
v56[512];
const v58 = f46(64, v56, v40);
v58[512] = v58;
f46(16, v34, v42);
let v60 = 117;
v60++;
const v62 = ~v60;
const v63 = v62 / v62;
v63 & v63;
Uint16Array.length = Uint16Array;
const v66 = new Uint16Array(Uint16Array);
const v67 = v66[1];
v67 + v67;
31 / 31;
const v72 = new Int32Array(31);
v72[23];
const v75 = 128 / 128;
v75 >= v75;
Uint32Array.BYTES_PER_ELEMENT;
let v79;
try { v79 = Uint32Array.toString(); } catch (e) {}
v79[3];
const v81 = new Uint32Array(128);
try { v81.findIndex(f46); } catch (e) {}
function f83() {
    const v84 = f83 != v40;
    if (v84) {
        v31 >>>= v84;
        try { v15.with(v60, v3); } catch (e) {}
    } else {
        for (let v86 = 0; v86 < 100; v86++) {
            f83();
        }
    }
    let v89 = 1000000000000.0;
    v89 >> v89;
    const v91 = v89--;
    v91 - v91;
    const o96 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a95) {
            return a95;
        },
        ...v89,
    };
    o96.g;
    return Int32Array;
}
f83.prototype;
%PrepareFunctionForOptimization(f83);
f83();
f83();
%OptimizeFunctionOnNextCall(f83);
f83();
