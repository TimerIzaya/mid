[-15158,1232403993,21830,-4096,5,-1604833700,1];
class C4 {
}
const v5 = new C4();
function f6() {
    return -1.4618325192014402e+308;
}
v5.toString = f6;
[0,5,-5];
[-2147483648,-65535,-49618,10000,4294967295,-1089949402];
[1.7976931348623157e+308,1.046232255740605e+308,3.0,1.7849965826923358e+307,1.0,-5.0];
[2.220446049250313e-16,-2.220446049250313e-16,-2.0,0.7466799232270164,9.455379365803282,-Infinity];
[-674264.8766274909,0.0,1000000.0,1000000000000.0,1.0,-1.7976931348623157e+308,2.7384502623737598e+306,6.350898558050375];
new Set();
new Int32Array(156);
new Uint16Array(93);
function F23(a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.constructor;
    try { new v26(); } catch (e) {}
    try {
        this.f = 145253519;
    } catch(e28) {
    }
}
const v29 = new F23();
new F23(v29);
new Int32Array(2);
/[8a(?=bbb|bb)c]/gums;
/a[a]/vdsy;
const v35 = /M/gus;
const v39 = new Int8Array(180);
v39.byteOffset;
const v43 = new Uint8Array(16);
const v47 = new Uint8ClampedArray();
const v48 = [748666.7832804511,3.0];
class C50 extends Float64Array {
    [v48];
}
new C50();
class C52 extends Uint8ClampedArray {
    constructor(a54, a55, a56, a57) {
        super(v43);
        try { a55(); } catch (e) {}
        `1073741824${8}c`;
        super[v47] = 520;
    }
}
new C52();
class C63 {
    #h = 1e-15;
    static get e() {
        function f65() {
            return 1e-15;
        }
        return this;
    }
    static [v35];
    set f(a67) {
        const v68 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        for (let v69 = 0; v69 < 5; v69++) {
            v68 | v69;
        }
        this != a67;
    }
    #g = 3.7122420217608383;
    static 65536;
}
new C63();
new C63();
new C63();
const v76 = new Set();
class C78 extends [v76,v76,v76,v76,v76] {
}
Symbol.iterator;
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
ReferenceError();
("1000")["toUpperCase"]();
const v96 = new BigInt64Array();
const o97 = {
    __proto__: v96,
};
const v99 = new Int16Array(12);
v99.fill();
function f102() {
    let v104 = 1000000000000.0;
    const v105 = v104--;
    -v105;
    function F110(a112, a113, a114) {
        if (!new.target) { throw 'must be called with new'; }
    }
    -4294967296 >>> -4294967296;
    function f117() {
        class C120 {
            constructor(a122, a123) {
                const v124 = this.constructor;
                try { new v124(f117, C120, -7); } catch (e) {}
                this[-2147483648] >>>= -7;
                for (let v126 = 0; v126 < 5; v126++) {
                }
            }
        }
        new C120();
        return -7;
    }
    f117();
    class C129 {
        constructor(a131) {
            const v133 = new Float32Array();
            try { v133.entries(); } catch (e) {}
            const v135 = new Uint16Array(12, -4294967296, v105);
            new Float32Array(v135, -4294967296, 268435439, v104, v135);
        }
    }
    try { new C129(12); } catch (e) {}
    const v138 = new C129(257828.6336153492);
    const v139 = new C129();
    const v140 = new C129(-4294967296);
    const v141 = [v140,C129];
    [257828.6336153492,v140,v138,v140,v141];
    const v143 = [v140];
    class C144 extends C129 {
        [v138];
    }
    const v145 = new C144();
    const v146 = v143.constructor;
    try { v146.isArray(v143); } catch (e) {}
    class C148 extends v146 {
    }
    C148.a = C148;
    const v149 = new C148();
    const v150 = v149?.constructor;
    try { new v150(); } catch (e) {}
    Object.defineProperty(v149, 65537, { value: v139 });
    try { v145.m(v141); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f102);
f102();
%OptimizeFunctionOnNextCall(f102);
f102();
