function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1073741823;
    } catch(e3) {
    }
    try {
        this.g = 1073741823;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function F8(a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a10;
    } catch(e11) {
    }
    try {
        this.f = v5;
        [[-9007199254740990,49004,536870889,1000,257,65536,-9007199254740990,-9007199254740992]];
        const v15 = new BigInt64Array();
        v15.copyWithin(-9223372036854775808);
    } catch(e18) {
    }
    try {
        this.e = a10;
    } catch(e19) {
    }
}
const v20 = new F8(v5);
const v21 = new F8(v5);
const v22 = new F8(v7);
class C23 {
    static get a() {
        function f25(a26, a27, a28, a29) {
            a29 %= a29;
            return this;
        }
        super[this] = f25(F8, this, v5, v22);
        try {
            super.m(v20, v5, v20);
        } catch(e32) {
        }
        return F0;
    }
    536870887;
    constructor(a34, a35) {
        let v36 = 10;
        for (let i = 0; i < 5; i++) {
            const v37 = v36--;
            function f38(a39, a40, a41, a42) {
                const v44 = new Int16Array();
                async function f46(a47, a48, a49) {
                    for (const v50 of a34) {
                        -740089575 ^ v36;
                    }
                    await v44[1];
                }
                f46().finally(Uint8Array);
                return v37;
            }
            for (let v57 = 0; v57 < 5; v57++) {
                f38();
            }
            %OptimizeFunctionOnNextCall(f38);
        }
    }
    static [v6];
    static [F0] = F8;
}
const v59 = new C23();
const v60 = new C23();
new C23();
function f62() {
    return v59;
}
class C63 extends C23 {
    constructor(a65, a66) {
        a65 | a65;
    }
    static #d;
    #e = v21;
    static d = f62;
    toString(a70, a71) {
        a71 = v59;
        try {
            super.setMonth(F8, F8);
        } catch(e73) {
        }
        return this;
    }
    /*
    constructor(a75, a76, a77) {
        super();
        const v78 = super.d;
        try {
            v78.toString = a75;
        } catch(e79) {
        }
    }
    */
}
new C63(v5, v5, v21);
const v81 = new C63(v7, v5, v20);
new C63(v81, v7, v20);
const v91 = new Uint8ClampedArray(16);
v91[10] = v91;
const v93 = -1322;
const v95 = new Uint8ClampedArray(1322);
const v96 = v95[315];
function F97(a99, a100, a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "536870889";
    } catch(e103) {
    }
    try {
        this.b = a102;
    } catch(e104) {
    }
}
new F97(1073741824n, 1073741824n, 257n, "6");
const v106 = new F97(1073741824n, 257n, 257n, v93);
const v107 = new F97(v96, 257n, 257n, "536870889");
new BigUint64Array(6);
3768 >>> 3768;
const v115 = new BigInt64Array(4046);
v115[123];
-115;
function f120(a121, a122) {
    function F125(a127, a128) {
        if (!new.target) { throw 'must be called with new'; }
        a127.trimLeft().strike();
        const v131 = this.constructor;
        try { new v131("a", "a"); } catch (e) {}
    }
    new F125("a", "-2147483648");
    a121++;
    a122 + a122;
    const v136 = a121++;
    v136 >> v136;
    try {
        v106.toString = a122;
    } catch(e138) {
    }
    Object.defineProperty(v107, v107, { configurable: true, enumerable: true, get: f120 });
    let o140 = {
        "d": a121,
        ...a121,
        get e() {
            return a122;
        },
    };
    [,...o140] = v115;
    a122[4046];
    const o144 = {
        "maxByteLength": 3035,
    };
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f120(4046, 3768);
let v151 = 0;
while (v151 < 1) {
    const o154 = {
    };
    try {
        o154.f = 3768;
    } catch(e155) {
    }
    try {
        const o156 = {
        };
        o156.f = 3768;
        o156.a = 6;
    } catch(e157) {
    }
    try {
        const o158 = {
        };
        o158.f = 3768;
        o158.a = 6;
        o158.d = v91;
    } catch(e159) {
    }
    try {
        const o160 = {
        };
        o160.f = 3768;
        o160.a = 6;
        o160.g = v60;
    } catch(e161) {
    }
    v151++;
}
try { Uint8ClampedArray.bind(f120); } catch (e) {}
