new BigUint64Array(2011);
const o6 = {
    "maxByteLength": 65537,
};
const v8 = new SharedArrayBuffer(978, o6);
new Uint32Array(v8);
const v12 = new Uint8Array(512);
const v15 = new Int16Array(7);
const v16 = [65537,2147483649,2,-256,-4294967296];
[53174,-128,1408237939,-1];
[30590,2,-15419,10,-1099073303,1203928436,-7];
class C19 {
    static {
    }
    #e;
    static #valueOf(a25, a26, a27) {
        try { a26.forEach(a27, this, a27, ...a25, ...a26); } catch (e) {}
        const v31 = new Array(6);
        return v31;
    }
    #f = Uint8Array;
    [v16];
}
const v32 = new C19();
new C19();
new C19();
class C35 {
}
const v36 = new C35();
const v37 = new C35();
let v38 = 0;
do {
    v15 && v12;
    v32[4] **= 512;
    v38++;
} while (v38 < 1)
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    a45[4] = a45;
    const v48 = this.valueOf().constructor;
    try { new v48(); } catch (e) {}
    a45[4];
}
new F43(v36);
new F43(v37);
