[];
const v3 = new Float32Array(412);
try { new BigInt64Array(BigInt64Array, 412, v3); } catch (e) {}
const v7 = new BigInt64Array(95);
v7[44];
const v10 = -2223;
function f12(a13) {
    class C15 {
        #d = 4096;
        static {
            try {
                this.#d;
            } catch(e18) {
            }
        }
    }
    return Uint32Array;
}
Uint32Array[Symbol.toPrimitive] = f12;
const v21 = new Uint32Array(2223);
v21[332];
function f23() {
    return v21;
}
const v26 = new Uint32Array(1000);
v26[Symbol.toPrimitive] = f12;
new Int16Array(1024);
b = 8;
v26 % Uint32Array;
const o34 = {
};
o34.a = o34;
try {
    o34.a = v3;
} catch(e35) {
}
try {
    const o36 = {
    };
    o36.a = v3;
    o36.c = v10;
} catch(e37) {
}
try {
    const o38 = {
    };
    o38.g = o38;
    o38.a = v3;
    o38.c = v10;
    o38.g = 2223;
} catch(e39) {
}
try {
    const o40 = {
    };
    o40.b = v10;
    o40.a = v3;
    o40.c = v10;
    o40.b = Int8Array;
} catch(e41) {
}
new Int8Array(8);
const v44 = [];
try { v44.join(412); } catch (e) {}
const v46 = [v44,v44,v44];
const o47 = {
};
o47.e = o47;
const v49 = new Proxy(v46, o47);
Object.defineProperty(v49, -1, { configurable: true, value: v44 });
