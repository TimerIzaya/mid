let v0 = 168;
const v2 = new Uint8ClampedArray(v0);
const v5 = Uint32Array?.call;
try { new v5(v2); } catch (e) {}
const v7 = new Uint32Array(7);
v7[2];
const v10 = ([974836.255416306,7.54270135293536,0.0,0.35539841926815563,1.385396251341163,-1000000000000.0,NaN,-1.7976931348623157e+308]).toLocaleString();
v7[4] = v7;
let v11 = v7[v2];
v7[v7] = Uint32Array;
try { v2.lastIndexOf(v10, v0); } catch (e) {}
++v0;
v11 >>= Uint8ClampedArray;
const v16 = new Int16Array(1024);
try { v16.reduceRight(Uint8ClampedArray); } catch (e) {}
function f18() {
    return 7;
}
let v19;
try { v19 = f18(); } catch (e) {}
const v20 = v19 >> v19;
const v21 = /l5a\s(?<a>.)\k<a>+/gudy;
try {
    v21.b = Int16Array;
} catch(e23) {
}
Object.defineProperty(v10, v0, { configurable: true, enumerable: true, value: v20 });
-6 % -6;
10000 >>> 10000;
10000 + 10000;
