const v3 = ["toString"];
function f4() {
    const o6 = {
        ..."1p",
    };
    const v7 = [o6,o6,o6,o6];
    function f8() {
        return v7;
    }
    Reflect.apply(f8, v7, "Z");
    return Reflect;
}
v3[Symbol.toPrimitive] = f4;
const v13 = [v3];
const v14 = ["Z",v13,"Z","toString"];
new Map();
function f20(a21, a22) {
    const o38 = {
        "h": a21,
        [v13]: Map,
        set a(a24) {
            Math.abs(-1864620856);
            const v32 = a24 << -1864620856;
            !2;
            Math.fround(v32);
            v32 ** v32;
            a21 + v32;
            !a21;
        },
    };
    return o38;
}
f20("-1", v3);
f20("1826253172", v14);
f20("stack", v14);
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
        const v51 = -(-7);
        Math.tan(v51 ** v51);
    } catch(e54) {
    }
}
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    const v59 = this.constructor;
    v59.length = v59;
    try { new v59(F46, -17857, F46, v59); } catch (e) {}
    new F46();
}
function f62(a63, a64, a65, a66) {
    const o67 = {
    };
}
f62(-9007199254740992);
