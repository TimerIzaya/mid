const v0 = [1039325739,-4322];
const v1 = [14,536870887,4,-2147483647,-1680,2039667208];
const v2 = [-734288228,5796,-19381,256,5,-77087082,2,-9007199254740991];
const v3 = [v2,v2,v1,v2,v1];
const v4 = [v0,v1];
let v5 = [v1];
class C6 {
    n(a8, a9) {
        try {
            this.d = v3;
        } catch(e10) {
        }
        super[v1]?.[v3];
        [v5] = v0;
        this[14];
        try { v3.unshift(v1, v0); } catch (e) {}
        return a8;
    }
    2 = v1;
    #f = v1;
    static b = v2;
    static [-2] = v2;
}
try { new C6(); } catch (e) {}
new C6();
const v17 = new C6();
const v18 = new C6();
v17[247] = v18;
v1[v4];
8n ^ 8n;
const v27 = [142026.36415256164,-1000000000000.0,160593.91457975493,-1.9364523595671663,0.10652337324779793,0.4591098029687508,0.2689630899972745];
const v29 = new WeakMap();
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
function f32(a33, a34, a35) {
    return a34;
}
Worker.arguments = Worker;
const v38 = [f32,v29,v27];
v38[2] = v38;
const o39 = {
    "arguments": v38,
    "type": "function",
};
const v40 = o39?.__lookupGetter__;
try { new v40(v0); } catch (e) {}
const v42 = new Worker(f32, o39);
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
