const v0 = [-2147483649,64,4096,22612,-38412,-268435456,-2147483649];
[-1073741824,-48822,-2,-9007199254740991,7,-65536];
[10,-536870912,1168809707];
[64804];
[1413497357,-1237412994,-9223372036854775807,843237590,-4294967297,-1,9007199254740992];
[10,-20910,1073741824,6,268435441,14,268435440,9,-6];
[3,-33385,38380,-65535,4294967295];
const v7 = [-60301,-128,-65537,-15,-407556703,-1751494334,-9223372036854775808,1655729615];
[997287315,65535,2049574883,13,-28784,-1,128,-1,-396922757,7];
let v10 = -65537;
v10++;
function f13() {
    return 143752543;
}
256 + 256;
Int8Array.d = Int8Array;
const v17 = new Int8Array(256);
try { v17.slice(143752543, v17); } catch (e) {}
const v21 = new Int8Array(205);
new Float64Array(2786);
let v28 = 15;
const v29 = v28--;
v29 + v29;
try { Int16Array(v21, v21, v29); } catch (e) {}
const v33 = new Int16Array(v28);
v33[6];
let v35 = 6;
v35++;
new Uint8ClampedArray(v35);
try { new Int16Array(Int16Array, v0, Int8Array); } catch (e) {}
const v42 = new Int16Array(3699);
v42[1383] = v42;
"2147483649" == "2147483649";
class C47 {
    static #p(a49) {
        function f50(a51) {
            return a51;
        }
        class C52 extends f50 {
            static [-1] = 8;
            static [a49];
            static 268435441;
        }
        const v53 = [];
        const v55 = /[a-zA-Z0-9]/gvisy;
        const v56 = /abc?/gvmy;
        v56[-2] ^= v55;
        v56.exec("Q8F");
        const t47 = "Q8F";
        t47[2078209647] = v53;
        return a49;
    }
    [0.028957958839558873];
    static {
        this.name = this;
        -346648683 << -346648683;
        for (let v63 = 0; v63 < 32; v63++) {
            try { ("p").toLocaleLowerCase(); } catch (e) {}
        }
    }
    static 2147483648 = C47;
    static #g;
    #a;
}
function f66() {
    const o68 = {
    };
    o68.h = o68;
    return gc(o68);
}
C47[Symbol.toPrimitive] = f66;
try { C47(); } catch (e) {}
const v73 = new C47();
v73.constructor = f66;
try { new BigInt64Array(v35, 2786, 2786); } catch (e) {}
try { BigInt64Array(BigInt64Array); } catch (e) {}
function F78(a80) {
    if (!new.target) { throw 'must be called with new'; }
    const v81 = this?.constructor;
    try { new v81(a80); } catch (e) {}
    a80 >>> a80;
    this.h = a80;
}
F78.arguments = F78;
const v84 = new F78(-2);
try { Uint16Array.bind(Int16Array); } catch (e) {}
with (v84) {
    h = Uint16Array;
}
const v87 = v73?.constructor;
const v89 = Symbol.toPrimitive;
Symbol.for(v89.description);
v87[v89] = f66;
let v93;
try { v93 = new v87(); } catch (e) {}
const v94 = v93?.constructor;
v94.prototype;
let v96;
try { v96 = new v94(); } catch (e) {}
try { v96.constructor(); } catch (e) {}
const v98 = new C47();
let v99;
try { v99 = v98.propertyIsEnumerable(C47); } catch (e) {}
!v99;
new C47();
/[\11]/gm.flags;
const v104 = /(?:a*)*/gudm;
const v105 = /a(?!bbb|bb)c/vi;
v105.toString = Symbol;
const v106 = v105?.toString;
v106.length = v106;
try { new v106(); } catch (e) {}
([4096])[0];
const o114 = {
    "execution": "async",
    "type": "minor",
};
o114.h = o114;
const v115 = ~117;
v115 | v115;
Uint16Array[0] = v87;
const v118 = new Uint16Array(Uint16Array);
let v119 = v118[1];
v119--;
let v121 = v119--;
v121--;
Int32Array.d = Int32Array;
Int32Array.name;
const v126 = new Int32Array(31);
v126[26];
let v130;
try { v130 = Uint32Array.toString(); } catch (e) {}
try { v130.small(); } catch (e) {}
const v132 = new Uint32Array(128);
v132[72];
function f134() {
    3.4890473589784586e+307 > 3.4890473589784586e+307;
    let v137 = 1000000000000.0;
    v137--;
    257828.6336153492 - 257828.6336153492;
    -4294967296 >> -4294967296;
    class C144 {
        static #m(a146) {
        }
        constructor(a148) {
            const v149 = this?.constructor;
            try { new v149(v104); } catch (e) {}
            function f151() {
                return 9007199254740992;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f151 });
            const v152 = this?.__defineSetter__;
            try { new v152(22227, 22227); } catch (e) {}
            new Float32Array();
            try { Uint16Array.apply(Uint16Array, "2147483649"); } catch (e) {}
            const v158 = new Uint16Array();
            try { v158.findIndex(v158); } catch (e) {}
            const v160 = new Float32Array(v158, -4294967296, a148);
            v160.f = v160;
        }
    }
    const v161 = new C144(C144);
    v161.g = v161;
    const v162 = new C144(C144);
    const v163 = v162?.constructor;
    try { new v163(v7); } catch (e) {}
    v162.length = -4294967296;
    const v165 = v162.length;
    v165 + v165;
    const v167 = new C144(-4294967296);
    const v168 = [v167,C144];
    const v169 = [257828.6336153492,v167,v161,v167,v168];
    try { v169.pop(); } catch (e) {}
    const v171 = [v167];
    class C172 extends C144 {
        [v161];
        #n(a174, a175, a176, a177) {
            function f178() {
            }
        }
    }
    C172.g = C172;
    C172.name = C172;
    const v179 = new C172();
    v179.length;
    class C182 extends v171.constructor {
    }
    try { v179.m(v168); } catch (e) {}
    const o186 = {
        "e": Uint16Array,
        o(a185) {
        },
        ...v137,
    };
    try { o186.o(BigInt64Array); } catch (e) {}
    return Int32Array;
}
let v188;
try { v188 = f134.bind(-7); } catch (e) {}
try { v188(); } catch (e) {}
%PrepareFunctionForOptimization(f134);
const v190 = f134();
v190.prototype = v190;
f134();
%OptimizeFunctionOnNextCall(f134);
const v192 = f134();
v192.prototype = v192;
