const v2 = new Array(168);
const v3 = Array[Array];
const v5 = new Array(5);
v5.length;
new BigUint64Array(5);
8 <= 8;
new Float64Array(8);
-255;
new Uint32Array(255);
const v20 = [203947.94676389406,-682.7911897151273,-174424.84064991423,-5.0,-1000000000000.0,8.397350608505526,-1000000.0,1.4241165922392207e+308];
const v21 = [-2.2250738585072014e-308,929.3729636228047,-321861.43948198936,0.5466813592813448,-8.661423461136541,NaN,-Infinity,-504.5088283712358,-9.20476263245996,-1e-15];
([1000.0,0.12142201517804552,834742.7458832532,-2.0,-353863.3755435551,-9.654381084659162,-1000000000.0,1.7976931348623157e+308,51.671797584555634,-1000.0])[0];
-2147483647 >>> -2147483647;
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
    a30 * a30;
    a31 >>> a31;
    a32 % a32;
    function f38(a39, a40) {
        const o41 = {
            ...a39,
        };
        o41.d;
        return f38;
    }
    const t26 = f38();
    t26(f38);
    try {
        this.e = a30;
    } catch(e45) {
    }
}
try { new F28(BigUint64Array, 255, v3, BigUint64Array); } catch (e) {}
const v47 = new F28(-2147483647, 4096, 168, -2147483647);
const o53 = {
    "maxByteLength": 3404,
};
const v55 = new ArrayBuffer(193, o53);
new Float32Array(v55);
try { v47.hasOwnProperty(v2); } catch (e) {}
const v59 = new F28(v47, 65536, v20, 168);
v59.e;
new F28(-2147483647, 168, v21, 4096);
/a|ba[a-z]Ra*b|c/gvs;
/{/gdiy;
/v/uimsy;
const v67 = new BigUint64Array(512);
const v68 = v67?.constructor;
try { new v68(v2, v67, v67); } catch (e) {}
const v71 = new Int16Array();
v67.includes(v71);
