function f0() {
}
const v1 = [f0,f0,f0,f0,f0];
const v2 = [f0,f0,f0];
const v3 = [f0,v1];
function f4() {
    return v2;
}
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = f4;
    } catch(e9) {
    }
}
new F5(v2, v3);
const v12 = new BigUint64Array();
function F13() {
    if (!new.target) { throw 'must be called with new'; }
}
const v15 = new F13();
let v20;
try {
const t0 = "object";
v20 = t0(v15, "number", F13);
} catch (e) {}
function f21(a22) {
    return v20;
}
class C23 extends f21 {
    [v12] = "E";
    [v15] = -14n;
    268435441 = -14n;
}
new F5(v3, v2);
new F5(v2, v1);
[-9223372036854775808,1073741825,1073741825,0,-46212,-1,-495736478];
function f28() {
    let v31 = 1864489360 << ("c").toLowerCase();
    v31--;
    const v34 = new Date();
    const o35 = {
        "g": v34,
    };
    function f37() {
    }
    let v39 = 7;
    new Int8Array(964446029);
    v1[36] = Uint32Array;
    Int8Array % BigUint64Array;
    v39 &= f0;
    try {
        Date.d = v39;
    } catch(e47) {
    }
    let v48 = 0;
    v48++;
    v48 < 3;
    const v52 = new Uint32Array(16);
    new Uint32Array(257);
    v39 &&= 1073741824;
    function f56(a57, a58) {
        const o59 = {
        };
        o59.e = f56;
        const o60 = {
        };
        f37.e = f56;
        o60.b = a58;
        const o61 = {
        };
        o61.e = f56;
        o61.b = a58;
        o61.c = a57;
        const o62 = {
        };
        o62.e = f56;
        o62.b = a58;
        o62.d = a58;
        function f64(a65) {
            new f37();
        }
        this.onmessage = f64;
        v52.length = 1073741824;
    }
    const v69 = [Uint32Array,3.5885237423067196];
    const o70 = {
        "arguments": v69,
        "type": "function",
    };
    new Worker(f56, o70);
    return a;
}
f28();
[-1003451090,13,4];
[4,1073741824,1,143370726];
try {
    function f75(a76, a77, a78) {
        const v80 = [601759695];
        const v81 = [1073741824,1073741823,1376142744,1073741825];
        function f82(a83, a84, a85, a86) {
            let [] = v81;
            try { C23["find"](..."find", a86, ...v80); } catch (e) {}
            return a85;
        }
        do {
        } while ((() => {
                const v90 = 2147483648 < 7;
                const v91 = !v90;
                v91 && v91;
                return v90;
            })())
        f75(2147483648, f75, 2147483648);
        return 2147483648;
    }
    f75(f75, f75, f75);
} catch(e95) {
}
