const v2 = new Array(129);
v2.p21 = Array;
class C3 extends Array {
    set d(a5) {
        let v6;
        try { v6 = this.flatMap(a5, a5); } catch (e) {}
        function f7() {
            return v6;
        }
    }
    static h;
    static {
        try { new this(); } catch (e) {}
        v2.__proto__;
        for (let v11 = 0; v11 < 32; v11++) {
            v2["p" + v11] = v11;
        }
    }
}
try { new C3(); } catch (e) {}
const v15 = new C3();
new C3();
const v17 = new C3();
const v21 = [-14,v17,-760521532];
v21[1] = v21;
[v21,v17,v15];
const v23 = [-1];
try { v23.find(v15); } catch (e) {}
new Float64Array();
Uint16Array.d = v17;
new Uint16Array();
const v31 = new Float32Array(3764);
v31[Symbol.toPrimitive] = Array;
v31[1309] = v31;
let v35 = 3225;
v35++;
Uint16Array.d = v21;
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
Uint16Array.d = Uint16Array;
const v38 = new Uint16Array(v35);
const v39 = v38?.toString;
try { new v39(); } catch (e) {}
let v41;
try { v41 = v38.entries(); } catch (e) {}
try { v41.next(); } catch (e) {}
for (const v43 of v38) {
    v43 >> v43;
    3375 >>> 3375;
    let v48;
    try { v48 = new BigUint64Array(3375, BigUint64Array, BigInt64Array); } catch (e) {}
    v48[2497];
    new BigUint64Array(3375);
}
