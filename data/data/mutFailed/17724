let v0 = 536870912;
new BigUint64Array(6, BigUint64Array);
const v8 = new Int16Array(256);
let v9 = 9;
function f10() {
    return v8;
}
v9 %= v9;
2147483649 || v0;
const v13 = new BigUint64Array(v9);
function f14() {
    return v13;
}
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v0;
    } catch(e21) {
    }
}
new f10(-15094, -15094, 6, 6, f10, 2147483649);
new F15(2147483649, v9, 6, f14);
v0 = 6;
new Int16Array(968);
const v29 = new BigInt64Array(9007199254740991);
new Uint8ClampedArray(10, v29, 256, v8, 9007199254740991);
new F15(2147483649, 2147483649, 2147483649, v0, 9007199254740991, v0);
for (let i35 = 0; i35 < 9; i35++) {
}
const v42 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f43(a44, a45, a46, a47) {
    try {
        f43(true, Math, undefined, f43);
    } catch(e51) {
    }
    const v52 = /(?:a*)+q(?<a>.)/guds;
    function f53(a54) {
        v42.constructor.isArray(v52);
        return v42;
    }
    for (let i59 = 0, i60 = 10; i59 < i60; i60--) {
        f53();
        for (let v68 = 0; v68 < 20; v68++) {
            a47.valueOf = a47;
        }
    }
    return v42;
}
for (let v69 = 0; v69 < 5; v69++) {
    f43(v69, v69, v42, v69);
}
f10();
%PrepareFunctionForOptimization(f10);
f10();
f10();
%OptimizeMaglevOnNextCall(f10);
f10();
f43(v42, v42, v42, v42);
