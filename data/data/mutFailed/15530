function f0() {
    function f1() {
        const o2 = {
        };
        return o2;
    }
    f1.toString = f1;
    const o14 = {
        "f": "valueOf",
        "b": 11,
        [11]: 11,
        get a() {
            this instanceof "number";
            const v11 = +"valueOf";
            this || -9223372036854775808;
            v11 / 1000000.0;
            return -9223372036854775808;
        },
    };
    return o14;
}
const v15 = f0();
const v16 = f0();
const v17 = f0();
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = f0;
    } catch(e22) {
    }
}
const v23 = new F18(v17, F18);
const v24 = new F18(v16, v15);
const v25 = new F18(v17, v16);
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a29;
    } catch(e30) {
    }
    try {
        this.g = v15;
    } catch(e31) {
    }
}
new F26(v16, v23);
const v33 = new F26(v15, v25);
const v34 = new F26(v15, v23);
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f41() {
            return f41;
        }
        class C42 extends f41 {
        }
        new C42();
        this.f = v17;
    } catch(e44) {
    }
}
const v45 = new F35(v17, v24, v33, v16);
new F35(v45, v25, v34, v45);
new F35(v16, v23, v34, F26);
class C51 {
    static #e;
    static [-2];
    static {
        try { this(this, -5.0, this, ...this); } catch (e) {}
    }
    constructor(a55, a56, a57, a58) {
        super();
        function f59(a60, a61, a62) {
            return a60;
        }
        const v65 = new BigUint64Array();
        const v67 = [-10,"function",this,v34,v65];
        const o68 = {
            "arguments": v67,
            "type": "function",
        };
        new Worker(f59, o68);
    }
    #g;
    static #toString(a71, a72) {
        ("minor").split("toString");
        Reflect.construct(a71, [v15,v45], Set);
        try {
            v45.#g <<= a71;
        } catch(e83) {
        }
        function F84() {
            if (!new.target) { throw 'must be called with new'; }
            function f86(a87, a88, a89, a90) {
                try { Set.apply(a87, a90, a87, Set, a88); } catch (e) {}
                const v94 = new BigInt64Array(4046);
                [,...a90] = v94;
                return a90;
            }
            for (let v95 = 0; v95 < 5; v95++) {
                f86();
            }
        }
        new F84();
        const o105 = {
            set g(a99) {
                function F100(a102, a103, a104) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            },
        };
        const v108 = new Date();
        try { v108.setFullYear(26578n); } catch (e) {}
        const o110 = {
            __proto__: a72,
            "a": "async",
            "b": "async",
            "e": 1073741823,
            "f": "async",
            "execution": "async",
            "h": v15,
            "c": -10,
            [C51]: v45,
            219: 26578n,
            10: F84,
            "type": "minor",
        };
        gc(o110);
        return a72;
    }
    static c;
}
function F113(a115) {
    if (!new.target) { throw 'must be called with new'; }
    const v116 = /8/vdiy;
    try {
        b = v116;
    } catch(e117) {
    } finally {
    }
    const v118 = this.constructor;
    v118.bind();
    try { new v118(); } catch (e) {}
}
function f121(a122, a123) {
    for (let v124 = 0; v124 < 50; v124++) {
        const v126 = ("imul").padEnd();
        const v127 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
        [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
        const v129 = [1073741824,1073741823,1376142744,1073741825];
        try { v129["find"](..."find", v126, ...v127); } catch (e) {}
    }
    return a122;
}
f121(f121, f121);
const v133 = new F113();
function f134(a135, a136) {
    %VerifyType(a136);
    Object.defineProperty(v133, 2147483648, { writable: true, enumerable: true, value: v133 });
    return a135;
}
const v138 = f134(v133, 145253519);
function f139() {
    const v142 = new Int32Array(1024);
    for (const v143 of v142) {
        new SharedArrayBuffer();
    }
}
f139();
f139();
new C51();
const v149 = new C51();
f0();
%PrepareFunctionForOptimization(f0);
f0();
f0();
%OptimizeMaglevOnNextCall(f0);
f0();
const v154 = new C51();
Math.atan2([], -40875);
class C163 extends WeakMap {
    536870887;
}
new C163();
const v169 = 536870912n << 536870912n;
-v169;
class C171 {
    static #a;
}
try { v154.getUint16(-16, v138, 16, 6, v169); } catch (e) {}
const v173 = v149[f134];
try { v154.m(v173, 1073741823, C171, v154, v173); } catch (e) {}
v173 >>> v154;
-5.0 < 1073741823;
