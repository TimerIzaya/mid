function f0() {
}
const v6 = new Uint8ClampedArray(1000);
new Uint8Array(215);
const v12 = new Uint16Array(512);
for (let i14 = 0; i14 < 4; i14++) {
    let [v20] = v12;
}
const o23 = {
    "execution": "async",
};
[[v12,v6],f0,-9007199254740991];
[433714664,v12,"async"];
new Uint8Array(v6);
1000 && Uint16Array;
const v30 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v31 = [601759695];
const v32 = [1073741824,1073741823,1376142744,1073741825];
function f34(a35, a36, a37, a38) {
    function f39() {
        const v41 = v30.constructor;
        const o43 = {
            ..."toStringTag",
        };
        o43[1] = o43;
        try {
            v32.forEach(a36);
        } catch(e45) {
        }
        522675525n | Symbol;
        [] = "toStringTag";
        f0[8] = a37;
        try { v41.o(Symbol, 522675525n, a37, gc); } catch (e) {}
        const v51 = a35++;
        const v52 = v51 >> 9;
        Math.round(v51);
        const v54 = -a35;
        const v55 = ~v52;
        9 ^ v54;
        ~v55;
        const v58 = Symbol.toPrimitive;
        const o62 = {
            toString(a60, a61) {
                a60 *= v58;
                return a61;
            },
        };
        const o84 = {
            get f() {
                return -268435456;
            },
            [v58]() {
            },
            [522675525n](a67, a68) {
            },
            "c": v31,
            valueOf(a70, a71) {
                return a36;
            },
            "b": -4294967295,
            [-4294967297n](a73, a74, a75, a76) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            valueOf(a78, a79) {
                return -4294967297n;
            },
            toString(a81, a82, a83) {
                return v32;
            },
        };
        return o84;
    }
    const v85 = f39();
    %OptimizeFunctionOnNextCall(f39);
    function f87(a88, a89) {
        const v90 = Reflect.g;
        v85.constructor;
        return v90;
    }
    Reflect.valueOf = f87;
    ("find").substr(a36, Reflect);
    return v30;
}
for (let v94 = 0; v94 < 10; v94++) {
    f34();
}
%OptimizeFunctionOnNextCall(f34);
const v96 = f34();
function f97(a98, a99) {
    let {"byteLength":v100,"length":v101,} = v12;
    return v30;
}
f97(v96, v96);
const t94 = gc(o23);
t94.constructor = gc;
