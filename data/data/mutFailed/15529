const v0 = [];
let v1 = 0;
function f3(a4, a5) {
    -9 ^ v1;
    const v10 = --v1;
    371871.6000881528 || v0;
    Math.cbrt(v0);
    v1 + v10;
    v1 && v10;
    return v0;
}
Uint32Array.valueOf = f3;
const v15 = new Uint32Array(v1);
const v20 = new Uint8Array(10);
Float32Array.from(v20);
const v23 = new Float32Array(9);
Object.defineProperty(v23, Symbol.toPrimitive, { writable: true, value: f3 });
v23[8] = v23;
3 ^ 3;
new BigUint64Array(3);
function f30(a31, a32) {
    a32 - a32;
    const o39 = {
        "f": a31,
        "a": 9,
        __proto__: v23,
        "g": v0,
        [a31](a35, a36) {
            v1 = 9;
            return a32;
        },
        ...v0,
        [Uint32Array]: v15,
        5: Uint32Array,
        "b": v0,
        o(a38) {
            return a38;
        },
        [9]: 10,
        "c": 3,
    };
    return o39;
}
f30(3, 9);
f30(v1, 3);
f30(v1, Uint32Array);
function f43(a44, a45, a46, a47) {
    4046 !== 4046;
    try { new BigInt64Array(a46, v23, BigUint64Array); } catch (e) {}
    const v52 = new BigInt64Array(4046);
    let o53 = {
    };
    o53.e = 3;
    o53.e = o53;
    try { Math.sign(a44); } catch (e) {}
    Math.g = Math;
    Math.acosh();
    [,...o53] = v52;
    return a44;
}
for (let v57 = 0; v57 < 5; v57++) {
    f43();
}
