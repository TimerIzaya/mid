const v3 = ["toString","toString","toString"];
const v5 = [v3,["kQRFI",v3,v3]];
[2.220446049250313e-16,-1.0461999170067871e+307];
[-8.65217899461791e+307,0.6534690893138138,4.995128230700754,1000000000.0,262.82416915807994,0.9793553511120182,-9.013692648921703,2.2250738585072014e-308,-741163.5430332533];
[4.0,1.7286309892665938e+308,-3.0,280.16714204437835,-2.220446049250313e-16,3.0,-2.2250738585072014e-308,-1.5246253949403927e+308,-545.8716581193219,-5.724754485408068];
class C15 {
    static #p(a17) {
        function f18(a19) {
            return a19;
        }
        class C20 extends f18 {
            static [-1] = 8;
            static [a17];
            static 268435441;
        }
        return a17;
    }
    [0.028957958839558873];
    static 2147483648 = C15;
    static #g;
    #a;
}
function f21() {
    function f22(a23, a24) {
        3596 + 3596;
        const v29 = a23--;
        const v30 = -4.0 || a23;
        const v31 = (-4.0) ** v29;
        const v32 = ~a23;
        v30 & v31;
        return -v32;
    }
    return f22;
}
function f35(a36) {
    try {
        v3.slice();
    } catch(e38) {
    }
}
Object.defineProperty(C15, "toString", { writable: true, configurable: true, enumerable: true, get: f21, set: f35 });
const v39 = new C15();
const v40 = v39?.constructor;
try { new v40(); } catch (e) {}
const v42 = new C15();
try { v42.propertyIsEnumerable(C15); } catch (e) {}
new C15();
/[\11]/gm;
/(?:a*)*/gudm;
const v48 = /a(?!bbb|bb)c/vi?.toString;
try { new v48(); } catch (e) {}
~117;
function f53() {
    return v5;
}
function f54(a55) {
    return a55;
}
Object.defineProperty(Uint16Array, 0, { writable: true, enumerable: true, get: f53, set: f54 });
const v56 = new Uint16Array(Uint16Array);
v56[1];
new Int32Array(31);
function f63() {
    function f64() {
        const o65 = {
        };
        const v66 = o65.p;
        try { v66(); } catch (e) {}
        return Int32Array;
    }
    return f64;
}
function f68(a69) {
    const t73 = 117;
    new t73("object", "object");
}
Object.defineProperty(Uint32Array, "toString", { configurable: true, enumerable: true, get: f63, set: f68 });
try { Uint32Array.toString(); } catch (e) {}
new Uint32Array(128);
function f74() {
    let v76 = 1000000000000.0;
    v76--;
    class C81 {
        static #m(a83) {
        }
        constructor(a85) {
            new Float32Array();
            const v89 = new Uint16Array();
            new Float32Array(v89, -4294967296, a85);
        }
    }
    const v91 = new C81(C81);
    v91[Symbol.toPrimitive] = f21;
    const v94 = new C81(C81);
    const v95 = new C81(-4294967296);
    const v96 = [v95,C81];
    [257828.6336153492,v95,v91,v95,v96];
    const v98 = [v95];
    v98.constructor = f68;
    class C99 extends C81 {
        [v91];
        #n(a101, a102, a103, a104) {
            function f105() {
                return v98;
            }
        }
        #g;
    }
    const v106 = new C99();
    v106.m = 257828.6336153492;
    class C108 extends v98.constructor {
    }
    const v109 = new C108();
    Object.defineProperty(v109, 65537, { value: v94 });
    try { v106.m(v96); } catch (e) {}
    const o113 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a112) {
            return a112;
        },
        ...v76,
    };
    return Int32Array;
}
%PrepareFunctionForOptimization(f74);
f74();
f74();
%OptimizeFunctionOnNextCall(f74);
f74();
