const v0 = [];
const v6 = new Int32Array(12);
let v7;
try { v7 = v6.join(-4.0); } catch (e) {}
const v10 = new Float64Array(3406);
function f11(a12, a13) {
    v7 = Int32Array;
    return 12;
    return v6;
}
v10[Symbol.toPrimitive] = f11;
v10[2854] = v10;
const v18 = new Uint32Array(3406);
function f19() {
    return Symbol;
}
function f20(a21) {
    new Float64Array(v0);
}
Object.defineProperty(v18, "constructor", { writable: true, configurable: true, enumerable: true, get: f19, set: f20 });
try { new Map(); } catch (e) {}
const v26 = new Map();
function f27(a28, a29) {
    try { a28.trim(); } catch (e) {}
    let v31;
    try { v31 = a28.valueOf(a29, v26, a29, a28); } catch (e) {}
    v31 == v31;
    class C34 extends v18.constructor {
    }
    new C34();
    return v31;
}
const v37 = Symbol.toPrimitive;
Symbol.for(v37.description);
v26[v37] = f27;
function f41(a42, a43) {
    const o50 = {
        "a": v26,
        [a42]: 2.220446049250313e-16,
        [v26]: a42,
        [3.0](a45, a46, a47) {
        },
        ...v26,
        "b": Int32Array,
        [a43]: Map,
        "h": a42,
        valueOf(a49) {
            return a49;
        },
    };
    return a43;
}
for (let v51 = 0; v51 < 395; v51++) {
    f41();
}
