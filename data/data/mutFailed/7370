let v1 = 914291.4395985664;
class C3 {
    static o(a5) {
        ++v1;
        super.h;
        super.d = "-9007199254740992";
        const v15 = -5 ^ 448879.7300896677;
        ~v15;
        a5.log(448879.7300896677);
        Math.atan(v15);
        v15 ** 833.0228910839348;
        return v15 ** v15;
    }
}
new C3("-9007199254740992");
const v22 = new C3();
let v23 = new C3(v22);
[16122,-2147483648,56225,-128,-842782398,65536];
const v25 = [-2,8,11,9,1073741825,9,664334871,-55102,-1653598397];
const v26 = [10827,1073741824,257,268435441,-256,10000,-52007,521268601,-2147483649,12];
const v27 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v27.concat(v27);
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a31;
    } catch(e34) {
    }
    try {
        this.b = a33;
    } catch(e35) {
    }
}
[4096,-40668,-7,-9,9007199254740991,1910757543,-1];
const v37 = [9223372036854775807];
new v27();
v23 -= v37;
v25 & v26;
Math.fround(1.0);
Math.random();
4294967297 % 4294967297;
[65536,-7731,-35306,10];
new BigUint64Array(3307);
function F50() {
    if (!new.target) { throw 'must be called with new'; }
    function F52(a54, a55) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C56 {
        static get f() {
            super.subarray();
        }
    }
}
new Int8Array(64);
class C63 {
    536870887;
}
for (let v64 = 0; v64 < 10; v64++) {
    new C63();
}
new Uint8Array(98);
class C71 {
    #o(a73) {
    }
}
