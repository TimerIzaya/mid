class C3 {
    7 = 1e-15;
    #toString(a5, a6) {
        for (let v7 = 0; v7 < 32; v7++) {
            a5["p" + v7] = v7;
        }
        a5 in this;
        new Float64Array(16);
        new Int8Array(1330);
        const v19 = new Int32Array(47);
        return v19;
    }
}
const v20 = C3?.constructor;
try { new v20(64); } catch (e) {}
const v22 = new C3();
v22[7] = v22;
const v23 = new C3();
v23[7] = v23;
const v24 = new C3();
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    a29?.[a30];
    a30?.[3952];
    v24[Symbol.asyncIterator] = this;
    const v35 = this?.constructor;
    try { new v35(v23, this, this, v23); } catch (e) {}
    a30[7];
    try {
        this.a = a30;
    } catch(e38) {
        const v41 = new a30();
        const v43 = new BigInt64Array();
        const v44 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
        const v45 = [-1.7976931348623157e+308];
        function f46(a47, a48, a49, a50) {
            const o56 = {
                toString(a52, a53, a54) {
                    a49[a48] = a47;
                    return 255n;
                },
            };
            return o56;
        }
        const v57 = f46(v43, 129, v45);
        const v58 = f46(v41, 129, v44);
        for (let v59 = 0; v59 < 5; v59++) {
            v58 % v57;
            v44.b = v41;
        }
    }
    try {
        this.d = a29;
    } catch(e61) {
    }
}
const v62 = new F25(C3, v22, v23, v22);
const v63 = new F25(v62, v62, v23, v24);
new F25(v63, v62, v62, v63);
const v66 = new Set();
let v67;
try { v67 = v66.add(v66); } catch (e) {}
function f68() {
    return -800.0228878730564;
}
const v71 = new v66(4096);
v71[2175];
new Int32Array(v67);
new Uint32Array(128);
Float64Array.g = Float64Array;
class C80 extends Float64Array {
}
const v81 = new C80();
v81.reverse();
