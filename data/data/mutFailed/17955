let v1 = "symbol";
v1[2147483649] = "vh";
let [] = "e";
const v3 = ("vh")[255];
const v5 = Symbol.iterator;
const o14 = {
    [v5]() {
        let v7 = 10;
        const o13 = {
            next() {
                v7--;
                const v11 = v7 == 0;
                const o12 = {
                    "done": v11,
                    "value": v7,
                };
                return o12;
            },
        };
        return o13;
    },
};
v1 = "e";
if ("vh" <= "trim") {
    [2.2250738585072014e-308,-283931.4079221586,Infinity,-671.8335319026608,-0.0,-0.0,5.393491877319859];
    [1000000000000.0,362504.28039920307];
    [-858791.6098236663,-891372.8672060091,510.82688977929706,1000000000000.0,-1.7976931348623157e+308];
} else {
    o14[7];
}
const v21 = ("e")["trim"]();
const o24 = {
};
new Proxy(o14, o24);
Reflect.construct(v3, [Reflect,"e",v3,"trim","vh"], v21);
new Int8Array(129);
let v31 = 3202;
v31 * v31;
v31--;
Uint8ClampedArray.name;
const v36 = new Uint8ClampedArray(v31);
const v37 = v36[1149];
v37 >> v37;
BigInt64Array.BYTES_PER_ELEMENT;
new BigInt64Array(5);
const v43 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
const v44 = v43.includes(...v43);
v44 || v44;
!v44;
