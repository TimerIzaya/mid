const v2 = new Int32Array(2, Int32Array, Int32Array);
v2.expm1(~v2);
const v7 = new Int16Array(2);
new Int16Array(1024);
new BigUint64Array(3);
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = Int16Array;
    } catch(e19) {
    }
    try {
        this.c = Int16Array;
    } catch(e20) {
    }
}
const v21 = new F14(3, v7, 3);
new F14(v7, F14, 1024);
new F14(v21, F14, 1024);
const v28 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
try { v28.filter(59890n); } catch (e) {}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -2;
    } catch(e3) {
    }
    try {
        this.d = -2;
    } catch(e4) {
    }
}
new F0();
new F0();
const v7 = new F0();
try { ("VG").strike(); } catch (e) {}
const v12 = [-9007199254740992,1,-17388,536870887,-59525,5];
[4,-1383987908,2147483647];
const v14 = [129,22711];
let v15;
try { v15 = v14.toReversed(); } catch (e) {}
-(-4.0);
35294n / 35294n;
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try { a27.toString(); } catch (e) {}
    a26 ^ a26;
    a26 >> a26;
    try {
        this.h = 628n;
    } catch(e31) {
    }
    try {
        this.f = 3n;
    } catch(e32) {
    }
    try {
        this.d = a27;
    } catch(e33) {
    }
}
F24.length = F24;
let v34;
try { v34 = new F24(3n, F24); } catch (e) {}
try { v34.constructor(v7, v7); } catch (e) {}
v34.f = v34;
const v36 = new F24(3n, 35294n);
const v37 = new F24(3n, v36);
new F24(35294n, v36);
let v39 = 6;
-(v39--);
Int16Array.prototype = Int16Array;
const v43 = new Int16Array(v39);
let v44;
try { v44 = v43.entries(); } catch (e) {}
16 / 16;
16 >>> 16;
Uint8ClampedArray.d = Uint8ClampedArray;
new Uint8ClampedArray(16);
Int32Array.d = Int32Array;
const v52 = new Int32Array(2614);
const v53 = v52[1709];
const v55 = ([1000000000.0,-1000.0,-690.3798026183179,8.153290522672417e+306,2.0,-1000000.0,-1000000000.0]).toSpliced;
v55.length = v55;
try { v44.min(); } catch (e) {}
try {
    v37.valueOf = v53;
} catch(e57) {
}
try { new v55(3n, v34); } catch (e) {}
const v59 = [172808.41555842035,6961.648758031544,-1000000000.0,-3.0,-3.473146185040173e+307,-421.3362201856155,-879.0794661120945,-5.0,-2.4710773994464814e+307,1000000000000.0];
const v60 = [2.0,67588.71976092551,987444.2991633068,0.4770197645753065,1000000.0,-212679.8858953634,-1e-15,-3.0];
try { v60.groupToMap(); } catch (e) {}
const v63 = 10 >> 10;
v63 * v63;
const v67 = Uint32Array.length;
new Uint32Array();
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const v70 = [1.0,-7.897761779739891];
try { v70.shift(); } catch (e) {}
const v72 = new Uint32Array();
try { v72.find(v12); } catch (e) {}
const v74 = v72?.findLastIndex;
const v75 = v74?.constructor;
try { new v75(2614); } catch (e) {}
try { v74(v59); } catch (e) {}
const v78 = new Uint32Array();
v78 & v14;
Reflect.construct(v15, ["VG",v39,1024,v67], F24);
v78[6] = v78;
try { gc(); } catch (e) {}
const o88 = {
};
gc(o88);
