const v7 = new Date();
const o8 = {
    __proto__: Date,
    [3.0]: v7,
};
5n + 5n;
function f11() {
    Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
    new Uint8ClampedArray(4);
    class C18 {
    }
    const v19 = new C18();
    const t12 = v19.constructor;
    let v21 = new t12();
    const v22 = /[\11]/gm;
    function f23() {
        return v21 >>>= f23 != v22;
    }
    return 1000n;
}
f11.length = f11;
const v28 = [-9223372036854775807n];
[f11,[v28,2147483648n,v28,1000n,1000n]];
const v32 = [-65535,536870889,4096];
try { v32.pop(); } catch (e) {}
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this.constructor;
    try { new v38(a37); } catch (e) {}
    a37 == a37;
    a36 !== a36;
    this.g = a37;
}
new F34();
for (const v43 in v32) {
    Math.log10(v43) ** 1000000000000.0;
}
const v49 = new Float64Array(453);
v49.valueOf = Date;
v49[437] = v49;
225 !== 225;
let v52 = Uint8Array;
function f53(a54, a55) {
    v52 = a54;
    try {
        f11();
    } catch(e57) {
    }
    return a54;
}
v52.constructor = f53;
const o59 = {
    "type": "function",
};
const v61 = [Set];
[v61,v61,225];
try { v52.constructor(2147483648n); } catch (e) {}
const v64 = new v52(225);
v64[131] = v64;
const v66 = new Date();
class C67 {
}
const v68 = [];
const o69 = {
    __proto__: v68,
};
try { v66.setFullYear(5n, v52, v66); } catch (e) {}
new Float64Array(3341);
function f74(a75, a76) {
    const v77 = [a75,a75];
    v77.at(a75);
    return v77;
}
const v80 = new Set();
v80.add(v66);
let [v82,,...v83] = v80;
v83.length;
v49.toSorted();
