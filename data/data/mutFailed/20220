const v1 = new Set();
function f2() {
    return Set;
}
class C3 extends f2 {
    10;
    o(a5, a6) {
        const v7 = Set % v1;
        try { a6(); } catch (e) {}
        v7 >= v7;
        try {
            v1.entries();
        } catch(e11) {
        }
        return this;
    }
    static #e;
    65535 = f2;
}
const v12 = C3?.constructor;
try { new v12(C3); } catch (e) {}
C3.f = C3;
new C3(f2);
new C3();
const v16 = new C3();
v16[8] = v16;
Object.defineProperty(v16, 1000000000000.0, { writable: true, set: f2 });
"RQNv" >= "RQNv";
try { ("RQNv").toLocaleLowerCase(); } catch (e) {}
try { ("10").substring("RQNv", "RQNv"); } catch (e) {}
const t30 = "-15";
t30.a = "-15";
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    function f33() {
        Int16Array.length = Int16Array;
        Int16Array[0] = 1756930060;
        const v36 = new Int16Array(Int16Array);
        return v36;
    }
    try { f33.call(a32); } catch (e) {}
    this.constructor = f33;
    const v38 = this?.__defineGetter__;
    const v39 = v38?.toString;
    try { new v39(); } catch (e) {}
    try { new v38(a32, this); } catch (e) {}
    try {
        const v42 = `
        `;
    } catch(e43) {
    }
}
F29.arguments;
F29.d = F29;
for (let i46 = 0;
    i46 | i46, i46 + i46, i46 < -57668;
    (() => {
        new f2();
        const t1 = "of";
        t1.length ^= i46;
        i46 - i46;
        i46++;
    })()) {
}
