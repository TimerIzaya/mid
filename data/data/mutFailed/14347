new Set();
const v6 = new WeakSet();
new Array(129);
function f14() {
    return 1.2883635659108662e+308;
}
const t6 = null;
t6.valueOf = v6;
-3.0 | -9007199254740992;
class C20 {
    e = 1.263848426042065;
}
const v21 = new C20();
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    a24.e;
    Number.isFinite();
    const v29 = this.constructor;
    class C30 {
        static {
            for (let i34 = 0, i35 = 10;
                i34 < i35;
                (() => {
                    function f39() {
                        return f39;
                    }
                    const v40 = [601759695];
                    const v41 = [1073741824,1073741823,1376142744,1073741825];
                    function f43(a44, a45, a46, a47) {
                        function f49() {
                            return a44;
                        }
                        f39();
                        const v52 = new Int8Array();
                        function f53(a54, a55) {
                            return i35;
                        }
                        f53(f53(v41, C30));
                        v52.buffer.slice(2147483648);
                        %OptimizeFunctionOnNextCall(f49);
                        let v62;
                        try { v62 = v41["find"](..."find", a47, ...v40, ...v41, ...522675525n); } catch (e) {}
                        v62 <= a46;
                        return arguments;
                    }
                    for (let v64 = 0; v64 < 10; v64++) {
                        f43();
                    }
                    i34++;
                })()) {
            }
        }
    }
    try { new v29(v21); } catch (e) {}
}
new F22(v21);
new F22(1.263848426042065);
