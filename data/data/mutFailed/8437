/(?<=a)/vsy;
const v1 = /qT/gu;
const v2 = /\p{Script=Greek}a$ab\b\d\bcd/uis;
class C6 {
    constructor(a8, a9, a10, a11) {
        super();
        function f12() {
            const v13 = [];
            v13[6] = v13;
            const o16 = {
                set b(a15) {
                },
            };
            return a11;
        }
        for (let v17 = 0; v17 < 5; v17++) {
            f12();
            %OptimizeFunctionOnNextCall(f12);
        }
    }
    static get a() {
        -1000000000.0 + v1;
        return v1;
    }
    m(a22, a23) {
        v2[679589764] ^= -4.6835644205631315;
        try {
            this.g = -1000000000.0;
        } catch(e24) {
        }
        [-14,-2147483648,-128,31543,536870889,-1947,65536,-9007199254740990,-65536,4294967295];
        [-2,-128,12];
        return [-4294967295,268435441,-1073741824,-10];
    }
}
const v28 = new C6(C6, -1000000000.0, -1000000000.0);
const v29 = new C6();
function f30() {
    return v29;
}
const t40 = [1073741823,64,-192774235];
t40.length = 127;
const v33 = new C6();
function f34() {
    return -4.6835644205631315;
}
const v35 = [v33,v33];
const v36 = [-1000000000.0,v1,v28,v29,v35];
[v33,v36,v36,v35,v2];
function f38() {
    class C40 {
        static 9 = 9.187362692894364;
    }
    for (const v41 in C40) {
    }
    const o90 = {
        m(a43) {
            a43.f = a43;
            try { a43.next(f38); } catch (e) {}
            a43.c = a43;
            a43.h = a43;
            const o45 = {
            };
            function f46(a47, a48, a49) {
                return f38;
            }
            try {
            } catch(e50) {
                const v54 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(536870912, ...v54, o45);
            }
            try {
                const o56 = {
                };
            } catch(e57) {
                const v58 = [];
                const v60 = v58.entries;
                try { new v60(v60, v58, v60, v60, null); } catch (e) {}
                let v62 = 1000000000000.0;
                v62--;
            }
            const v65 = Math?.expm1;
            try { new v65(f46); } catch (e) {}
            let v67 = -9007199254740991;
            v67++;
            const v69 = v67 >> v67;
            function f70() {
                return f70;
            }
            for (let v71 = 0; v71 < 5; v71++) {
            }
            arguments.f = f34;
            const v73 = arguments.MIN_VALUE;
            const v74 = [];
            Object.defineProperty(v74, "constructor", { enumerable: true, value: f46 });
            v74["concat"]("concat");
            class C77 {
            }
            const v78 = C77.name;
            try { v78.codePointAt(Math); } catch (e) {}
            const v82 = new Int8Array(3938);
            let v83 = 3;
            for (let i = 0; i < 5; i++) {
                [...v83] = v82;
            }
            const o87 = {
                "type": "concat",
                268435441: arguments,
                p(a85, a86) {
                    super.a = f30;
                    return v73;
                },
            };
            try {
                const o88 = {
                };
            } catch(e89) {
            }
            return v69;
        },
    };
    o90.f = o90;
    o90.m(o90);
    return o90;
}
v28.constructor;
const o94 = {
    "execution": "async",
};
f38();
f38();
