class C3 {
    static {
        try {
        const t0 = -1394625885;
        t0(this, this, this, this);
        } catch (e) {}
        function F9() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v11 = [65536,12220,268435456,-176972115,977653611];
        for (const v12 in v11) {
            try { e(v11, e, v12, v12, e); } catch (e) {}
            function F15(a17, a18) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = a17;
            }
            new F15();
        }
    }
    get f() {
        let v20 = this;
        const o21 = {
        };
        new Proxy("2147483647", o21);
        Math.sqrt(v20);
        let v28 = -(v20++);
        Math.hypot(v20);
        v20++;
        ++v20;
        return ++v28;
    }
}
const v33 = new C3();
const v34 = new C3();
const v35 = new C3();
const v36 = [v33];
const v37 = [v34,C3,C3,-1394625885];
const v38 = [v34,v35,"2147483647"];
class C39 extends C3 {
    n(a41, a42) {
        let v43;
        try { v43 = v33.p(a42, this, this, 5798); } catch (e) {}
        const v44 = a42 ^ v43;
        try {
            this.fuck(v43, v33, v37);
        } catch(e46) {
        }
        return v44;
    }
    1123;
    constructor(a48, a49, a50, a51) {
        super();
        try { new a50(); } catch (e) {}
        delete a49?.length;
        const v55 = Symbol.iterator;
        const o64 = {
            [v55]() {
                let v57 = 10;
                const o63 = {
                    next() {
                        v57--;
                        const v61 = v57 == 0;
                        const o62 = {
                            "done": v61,
                            "value": v57,
                        };
                        return o62;
                    },
                };
                return o63;
            },
        };
    }
}
const v65 = new C39(v38, v38, C3, v35);
const v66 = new C39(v36, v38, "2147483647", v34);
const v67 = new C39(v37, v38, v66, C39);
class C68 {
    static #e = v65;
    b = -1394625885;
    #c;
    #p(a70, a71, a72, a73) {
        switch (v37) {
            case a71:
                c = C3;
                break;
        }
        return 5798;
    }
    536870887;
    4;
    static #m(a75) {
    }
    toString(a77, a78, a79, a80) {
        const o89 = {
            [-4294967297n](a83, a84, a85, a86) {
                eval(a86);
            },
        };
        eval();
    }
    static #g = v34;
    #h = v67;
    static a;
    static 268435439 = v66;
}
new C68();
new C68();
new C68();
const v101 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
function f102(a103, a104) {
    return a104;
}
Object.defineProperty(v101, Symbol.toPrimitive, { configurable: true, value: f102 });
const v107 = [-1.0,1.0,-875790.5323034594,0.22501948637268132,-0.0,-0.0];
function f108(a109, a110, a111, a112) {
    const v113 = Symbol.toPrimitive;
    Object.defineProperty(a109, v113, { configurable: true, enumerable: true, value: f108 });
    const o120 = {
        toString(a115, a116) {
            const v117 = a109 && Float64Array;
            function f118() {
                a115 *= v113;
                return Float64Array;
            }
            Object.defineProperty(v117, "valueOf", { value: f118 });
            v117 <= v101;
            return this;
        },
    };
    return o120;
}
f108(v107);
const v122 = f108(Date);
try { v122.toString(f108, v101); } catch (e) {}
