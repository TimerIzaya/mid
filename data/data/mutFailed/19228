/Nr/vdiy;
const v1 = /(a|bc)/disy;
function F2() {
    if (!new.target) { throw 'must be called with new'; }
}
1073741823 & 1073741823;
-1000;
/4Y\u0034/gvdimy;
const v12 = new Int16Array();
for (let v13 = 0; v13 < 25; v13++) {
    const v14 = [601759695];
    const v15 = [1073741824,1073741823,1376142744,1073741825];
    function f16(a17, a18, a19, a20) {
        a17 >>> v12;
        ("find").codePointAt();
        try { v15["find"](..."find", a20, ...v14); } catch (e) {}
    }
    for (let v25 = 0; v25 < 10; v25++) {
    }
}
new Uint8Array(1930);
const v29 = new BigUint64Array(1910);
gc();
class C32 {
    constructor(a34, a35) {
        try {
            this.fuck(a35, "function");
        } catch(e38) {
        }
    }
}
const v39 = new C32();
!v39;
function f43(a44, a45, a46, a47) {
    const v48 = /(?:a*)+q(?<a>.)/guds;
    for (let [i52, i53] = (() => {
            0 >>> 0;
            return [0, 10];
        })();
        (() => {
            const v54 = i52 < i53;
            function f55(a56, a57) {
                return f43;
            }
            return v54;
        })();
        i53--) {
        for (let v63 = 0; v63 < 25; v63++) {
            v48.hasIndices = v48;
        }
    }
    return f43;
}
f43();
new Uint16Array(3102);
function f66() {
    const v67 = [286977509,536870889,-380982641,1073741825,-14496,-9223372036854775807];
    const v68 = [64918,-21903,65536,-65537,-9007199254740991,268435440];
    function f69(a70, a71, a72, a73) {
        const v74 = /(?:a*)+q(?<a>.)/guds;
        function f75(a76) {
            return a70;
        }
        for (let [i84, i85] = (() => {
                v67.toLocaleString(f75);
                for (let v79 = 0; v79 < 5; v79++) {
                    v68[a71];
                    v74["exec"]();
                }
                return [0, 10];
            })();
            (() => {
                const v86 = i84 < i85;
                !v86;
                return v86;
            })();
            (() => {
                i85--;
                const v92 = Symbol.toPrimitive;
                const o94 = {
                    [v92]() {
                    },
                };
            })()) {
            for (let v97 = 0; v97 < 5; v97++) {
            }
        }
        return a71;
    }
    return 1910;
}
class C98 extends BigUint64Array {
    static b = Int16Array;
    set g(a100) {
        super.buffer = v1;
        const o104 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o104);
        function F106(a108, a109) {
            if (!new.target) { throw 'must be called with new'; }
            for (let v110 = 0; v110 < 5; v110++) {
            }
            const v111 = this.constructor;
            const t104 = "9007199254740992";
            t104["255"] &= 7;
            const v117 = new Float32Array(2);
            v117[1] = v117;
            try { new v111(); } catch (e) {}
        }
    }
    static #h = v29;
    268435439;
    g;
    128 = BigUint64Array;
}
new C98();
new C98();
new C98();
Math.cos(0.8497483139616006);
