class C3 {
    constructor(a5, a6) {
        const v7 = this?.constructor;
        try { new v7(a6, a5); } catch (e) {}
        a6 >>> a6;
        128 != 128;
    }
    static #toString(a15) {
        try {
            const t9 = "16";
            t9.e = a15;
        } catch(e16) {
        }
        return 0.0;
    }
    static #a = 0.0;
    #g = 4096;
}
const v17 = (0.0).name;
v17 == v17;
const v19 = new C3("16", 4096);
const v20 = new C3("16", 4096);
const v21 = new C3(C3, v20, C3);
class C22 {
    536870887 = v20;
    f;
    set c(a24) {
        this.f;
        this / "16";
    }
    7;
    constructor(a28, a29, a30) {
        a30.length;
        function f32() {
            return a30;
        }
        try {
            super.valueOf(4096, this, a29, f32);
        } catch(e34) {
        }
    }
}
try { C22.constructor(4096); } catch (e) {}
const v36 = new C22(v21, C3, v21);
const t44 = "16";
new t44(v20, "16", v19);
const v38 = new C22(v20, C3, v36);
/[](ab)\1+/gvdms.ignoreCase;
/[foo[z]*]/vms;
/W(ab|cde)\1+/gudmsy;
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v38); } catch (e) {}
    try {
        this.h = 268435439;
    } catch(e47) {
    }
}
const v48 = F43?.toLocaleString;
try { new v48(); } catch (e) {}
const v50 = new F43();
const v51 = new F43();
const v52 = new F43();
v52.h = v52;
function f53(a54) {
    a54.h = a54;
    const o61 = {
        __proto__: a54,
        ...v52,
        valueOf(a56) {
            return v50;
        },
        ...a54,
        "a": a54,
        "b": F43,
    };
    const v62 = o61?.__lookupSetter__;
    try { new v62(o61); } catch (e) {}
    return o61;
}
const v64 = f53(v50);
try { v64.valueOf(f53); } catch (e) {}
const v66 = f53(v52);
const v67 = f53(v51);
const v68 = v67?.b;
try { new v68(); } catch (e) {}
/((\xed\xa0\x80))\x02[\p{Script_Extensions=Mongolian}&&\p{Number}]/udmy;
const v71 = /2(?!(a))\18/giy;
const v72 = /a[^a]/gms;
class C73 {
}
C73.matchAll;
const v75 = new C73(v71);
const v76 = new C73(v72);
try { v76.hasOwnProperty(v51); } catch (e) {}
const v79 = async (a80, a81, a82) => {
    [v66,a80,F43,v67];
    return v75;
};
