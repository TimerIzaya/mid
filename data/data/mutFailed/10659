try {
} catch(e1) {
}
Math.tan(-23394);
129 >>> 129;
new Array(129);
const v8 = [0.0,-1000000000.0,0.1545024563657521,-4.615507573042619,380099.9493347546,-2.220446049250313e-16,-1.0,-1000000000000.0];
const v9 = [601759695];
function f10() {
    b = v9;
    const o11 = {
        "c": v9,
    };
    return o11;
}
const v12 = [-1.7976931348623157e+308,-3.4834203442492347e+306,1000000000.0,5838.734335443587,-7.823687565015199,-336.5235485188549,-Infinity,-2.2250738585072014e-308];
const v13 = [4.916432125489578,1000000.0,0.0,-1.7976931348623157e+308];
const t15 = "a";
t15[5] = "undefined";
new Int16Array(9);
class C20 {
}
let v21;
try { v21 = C20.toString(); } catch (e) {}
const v23 = new Int8Array(C20, Int8Array, Int8Array);
const v24 = v23.buffer;
let v25 = 16;
v25++;
v23["forEach"](Array, Array);
for (let v30 = 0; v30 < 32; v30++) {
    Math["p" + v30] = v30;
}
const v33 = new Float64Array(v25);
try { v24.transfer(); } catch (e) {}
[v12,C20,...v13];
10 / 10;
Int32Array.length = Int32Array;
const v42 = new Int32Array(10);
2.111350901209242 + 2.111350901209242;
let v48 = -256;
const v49 = v48--;
-23394 - 1000;
let v57 = -450746.69945373747 ^ -450746.69945373747;
v57++;
Math.acos(v57);
class C61 {
    o(a63, a64, a65, a66) {
        return 0;
    }
}
v42[1] = ("number")[0];
v8.join(v49, -450746.69945373747, v48, ...v33);
const t51 = "-40859";
t51[1] = "-40859";
new BigUint64Array(5);
new Uint32Array(9);
new v21(4089);
function F88(a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    this.__proto__;
    a90[4] = a90;
    a91 == Int32Array;
    const v94 = this?.constructor;
    try { new v94(a90, F88); } catch (e) {}
    try {
        this.g = a90;
    } catch(e96) {
    }
    try {
        this.b = "WwTV";
        ("D")[0].substring();
    } catch(e101) {
    }
}
new F88("9g9Ak", "WwTV");
new F88("-40859", "9g9Ak");
class C104 extends F88 {
    #m(a106, a107, a108) {
        function f109(a110, a111, a112, a113) {
        }
    }
}
function f114(a115, a116, a117) {
    const o118 = {
    };
}
const o119 = {
};
function f120(a121) {
    try {
    } catch(e122) {
    }
}
function F123(a125, a126, a127) {
    if (!new.target) { throw 'must be called with new'; }
}
class C128 extends f10 {
}
