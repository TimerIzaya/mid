function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -906169364;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
new F0();
v4.fuck(v5, "function");
Object.defineProperty([1840677197,-43868], "function", { configurable: true, value: "function" });
const v13 = new Int8Array(8);
Reflect.construct(Uint16Array, [v13]);
("async").toUpperCase();
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    function f24(a25) {
        return F21;
    }
    this.onmessage = f24;
    const o28 = {
        "type": "function",
    };
    new Worker(F21, o28);
}
function f33(a34, a35, a36) {
    return null;
}
function f37(a38, a39, a40) {
    try { a38(); } catch (e) {}
    return a38;
}
%OptimizeFunctionOnNextCall(f37);
const v48 = [4.0,-1.7976931348623157e+308];
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
}
const v54 = new F49(F49, v48, F49);
const v55 = new F49(v54, v54, v54);
v55.__proto__ = v48;
const v56 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
const t41 = 45960n;
const v57 = new t41();
class C58 extends 45960n {
    constructor(a60, a61, a62) {
        super();
        class C64 extends v57.constructor {
            static #a = this;
            static [v56] = this;
        }
    }
    4294967295;
}
const v66 = Symbol.replace;
v54[v66] = v66;
