const v0 = [];
class C1 {
    static #c;
    static {
        let v3;
        try { v3 = this(...v0, this, this, this, this); } catch (e) {}
        v3[Symbol.hasInstance];
    }
    [v0] = v0;
    8;
    d;
}
const v7 = new C1();
const v8 = new C1();
const v9 = new C1();
class C10 {
    constructor(a12, a13) {
        function f14() {
            return v0;
        }
    }
    n(a16) {
        super.f = a16;
        let v18;
        try { v18 = a16["toLocaleString"](); } catch (e) {}
        super.h = v18;
        return a16;
    }
}
const v19 = new C10(v7, v8);
const v20 = new C10(v7, v8);
[0.8529082842893027,-9.829422737316222e+306];
const v22 = [0.3610181643548258];
const v23 = [-2.2250738585072014e-308,1000000.0,-8.629549701282597e+307,-4.955863792943003,-1.0,-2.220446049250313e-16,-1000000.0];
new Set();
new C10(v20, v20);
new Float64Array(10);
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a40;
    } catch(e41) {
    }
    try {
        this.f = 5n;
    } catch(e42) {
    }
    try {
        this.d = a40;
    } catch(e43) {
    }
}
new F35(v22, v19, v9, v23);
new F35(v22, v9, v7, v0);
new F35(v0, v20, v19, Set);
new Float64Array(7);
new BigUint64Array(4);
const v51 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v52 = 0; v52 < 5; v52++) {
    function f53() {
        try {
            v51.forEach();
        } catch(e55) {
            e55.message;
            const v57 = e55.constructor();
            const o58 = {
                "execution": v57,
            };
        }
        return f53;
    }
    for (let i60 = 0; i60 < 10; i60++) {
        const o66 = {
        };
        try {
            o66.c = i60;
        } catch(e67) {
        }
        try {
            const o68 = {
            };
            o68.c = i60;
            o68.b = i60;
        } catch(e69) {
        }
        try {
            const o70 = {
            };
            o70.c = i60;
            o70.b = i60;
            o70.f = -4n;
        } catch(e71) {
        }
        try {
            const o72 = {
            };
            o72.c = i60;
            o72.b = i60;
            o72.f = i60;
        } catch(e73) {
        }
    }
    f53.call(v51, f53, v51, f53);
    %OptimizeFunctionOnNextCall(f53);
}
