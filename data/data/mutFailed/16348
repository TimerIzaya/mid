const v0 = [];
try { new v0(16); } catch (e) {}
const v8 = new Float64Array(2741);
new Uint8Array(0);
const v14 = new Float64Array(14);
new Uint32Array(16);
const v19 = v14.__proto__;
function f20(a21, a22) {
    return 4294967295;
}
v19[Symbol.toPrimitive] = f20;
try { v19(v8, v8, -4n, v8, 0); } catch (e) {}
function f29() {
    return BigUint64Array;
}
const v31 = Math.log2();
const v32 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function f33(a34, a35, a36) {
    const o38 = {
        get d() {
            return a35;
        },
    };
    for (let i = 0; i < 10; i++) {
        delete v32[v31];
    }
    return v0;
}
f33();
new BigUint64Array(256);
this.print(this, this);
const v47 = new Uint8ClampedArray(995);
const v49 = new Int8Array(v47);
const v50 = v49.copyWithin;
try { v47.some(v50); } catch (e) {}
new BigUint64Array(3563);
new BigUint64Array(3);
const v59 = 1922 % 1922;
v59 == v59;
class C62 {
    static 44 = "EV";
}
new C62();
new Uint32Array(8);
new Uint8ClampedArray(257);
Symbol[Symbol.toPrimitive] = f33;
new Date();
const v76 = new Float64Array(255);
v76.toString = Symbol;
v76.join(v76);
Symbol.for(Symbol);
