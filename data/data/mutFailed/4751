const v3 = [9,256];
const v4 = [v3,v3,9];
v4[1] = v4;
const v5 = [v3,v3];
v5[0] = v5;
0.917209783982164 | 0.917209783982164;
let v9 = 0.09248216113291807;
const v10 = ~v9;
v10 | v10;
const v12 = v9++;
const v13 = v12 & v12;
let v14 = 3;
v14 - v14;
v14++;
const v18 = new Uint16Array(v14);
v18[1] = v18;
5 | 5;
v18[6] = v13;
Object.defineProperty(v4, 9, { configurable: true, value: v4 });
try { v12(this, 0.917209783982164, -9); } catch (e) {}
new BigUint64Array(5);
let v29 = 10 * 10;
v29++;
try { new Float64Array(v12, 0.917209783982164, v5); } catch (e) {}
Float64Array.d = Float64Array;
Float64Array.length = Float64Array;
const v33 = new Float64Array(10);
v33[6] = v33;
const o36 = {
    "maxByteLength": 14,
};
const v38 = new SharedArrayBuffer(14, o36);
new Float64Array(v38);
new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
