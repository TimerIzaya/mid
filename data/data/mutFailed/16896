const v0 = [1743942862,268435456,-341696435,65535,-3010,8];
const v1 = [536870912,-536870912,-128,65537,6,-2147483649,-246987678,-3,-12,-906631445];
function f2() {
    return [-4294967296];
}
v1.valueOf = f2;
const v5 = [1505570984,-4,-9007199254740991,16,-1,-5,16,-65537,-1918759500];
Object.defineProperty(v5, Symbol.toPrimitive, { writable: true, value: f2 });
64 & v1;
v0[-11];
const v15 = new BigInt64Array(195);
class C17 {
    #d;
    static #a;
    static g = v15;
    constructor(a19, a20, a21, a22) {
        C17 - v5;
        try {
            v0.toString();
        } catch(e25) {
        }
    }
}
function f26() {
    function f27(a28, a29) {
        %VerifyType(a29);
        return a29;
    }
    return f27;
}
function f31(a32) {
    Math.tanh(f2);
    a32 ** f2;
    !(a32 + 2047460679);
    !2047460679;
}
Object.defineProperty(C17, "toString", { get: f26, set: f31 });
new C17();
new C17();
new C17();
new Int16Array(6);
let v45 = 10;
v45--;
try { Int8Array.of(); } catch (e) {}
new Int8Array(v45);
const v50 = [58584,15,9007199254740990,2146023485];
try { v50.entries(); } catch (e) {}
Object.defineProperty(v50, 65537, { writable: true, value: [46733,-268435456] });
const o56 = {
    "execution": "sync",
    "type": "minor",
};
gc(o56);
