const v2 = new Float64Array(6);
const v4 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
class C5 extends Float64Array {
    2 = v2;
    f = Float64Array;
}
new C5();
new C5();
new C5();
try { v4.filter(59890n); } catch (e) {}
const v11 = /a$\P{Decimal_Number}/gvdims;
const v12 = v11[v11];
const v13 = v11.source;
try { v12(true, v13, v13, v13); } catch (e) {}
Math.log(true + true);
new Int8Array(5);
const v23 = new Int8Array(1628);
const v24 = [5,v23];
const v25 = [Int8Array,6,v2];
[Float64Array,v24,5,Float64Array,5];
function f27() {
    return v25;
}
function f29() {
}
const v31 = new Uint16Array(Uint16Array);
function f33() {
    const o39 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a38) {
            return v31;
        },
        ...1000000000000.0,
    };
    return Int32Array;
}
f33();
let v45 = 0;
do {
    const o47 = {
    };
    gc(o47);
    const o55 = {
        n(a51, a52) {
            return Math.ceil(64n);
        },
    };
    v45++;
} while ((() => {
        try {
            Math.d = 5;
        } catch(e58) {
        }
        return v45 < 5;
    })())
