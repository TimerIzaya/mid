new Uint32Array(160);
let v3 = 4;
v3--;
let v6;
try { v6 = new Float32Array(Uint32Array, v3, 160); } catch (e) {}
new Float32Array(v3);
16 | 16;
new Int16Array(127, 127, 127);
function f13(a14, a15, a16) {
    return v6;
}
new Int16Array(16);
new v6(148);
function f22() {
    function f23() {
        return 16;
    }
    return f23.call(16);
}
let v25 = f22();
const v28 = new BigUint64Array();
try { Math.cos(v28); } catch (e) {}
function f31(a32, a33, a34) {
    a32.fill();
    return a33;
}
v25--;
new Int16Array(4096);
function f46(a47) {
    return f46;
}
const v50 = [4096];
const o51 = {
    "arguments": v50,
    "type": "function",
};
new Worker(f46, o51);
function f53() {
}
class C54 {
    [Int16Array];
}
try { new C54(); } catch (e) {}
new C54();
const v57 = new C54(f53, 4096, 256, 64);
v50.includes;
Symbol.species;
"p" & v3;
const v63 = v57?.constructor;
try { new v63(); } catch (e) {}
