new BigUint64Array(64);
let v5;
try { v5 = Int16Array.from(580); } catch (e) {}
const v6 = new Int16Array(580);
try { v6.find(v6); } catch (e) {}
const v10 = new Int16Array(2);
let v11;
try { v11 = v10.reduce(v5, Int16Array); } catch (e) {}
b = v11;
Reflect.construct(Int16Array, [2,580], Int16Array);
v10[1];
[Int16Array,2,[2],2];
const v18 = [Int16Array,Int16Array];
const v20 = new BigInt64Array();
v20["p" + 2] = 2;
try { v18.toString(); } catch (e) {}
const v24 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
const t17 = "f";
t17[1073741824] = 4294967296;
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const o32 = {
    };
    o32.e = 19793;
    const o33 = {
    };
    o33.h = 58;
    const v35 = Array(19793);
    for (const v36 of v35) {
    }
    const v37 = [v35,v35,v35,v35,v35];
    const v39 = new BigUint64Array();
    const v41 = [v39];
    for (let v42 = 0; v42 < 50; v42++) {
    }
    v41[65536] %= 256;
    [[v37,v37,v37]] >= Uint16Array;
}
function f49() {
    const v52 = Array(4087, -2.220446049250313e-16);
    v52[4037] = v52;
    return Array;
}
const v53 = new Date(-2, v24, v24, v24, -2);
const v54 = new Reflect();
try { v54.__defineSetter__(Reflect, v54, v54, Reflect, Reflect); } catch (e) {}
class C56 {
    static {
        const v58 = super[this];
        try { v58.join(C56, C56, v58); } catch (e) {}
    }
}
try { v53.getHours(); } catch (e) {}
const v63 = Symbol.toPrimitive.description;
function f64() {
}
function f67() {
    return f64;
}
function f68(a69, a70) {
    const o73 = {
        get d() {
            Object.defineProperty(this, 10000, { enumerable: true, get: f64 });
            return new.target;
        },
        __proto__: a70,
        "b": a69,
        "c": f67,
        ...9007199254740991n,
        ...a70,
        "g": 9007199254740991n,
        ...f64,
        "d": -1010928051n,
        ...9007199254740991n,
    };
    return o73;
}
const v74 = f68(-1010928051n, -1010928051n);
f68(-1010928051n, 9007199254740991n);
class C76 extends f64 {
    [9007199254740991n];
    static get b() {
        const o80 = {
            "maxByteLength": 2559,
        };
        const v82 = new ArrayBuffer(2559, o80);
        new Uint8Array(v82);
        return v82;
    }
    static b = v74;
}
let v85 = new C76();
++v85;
Symbol.for(v63);
