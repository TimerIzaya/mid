class C3 {
    ["MAX_SAFE_INTEGER"] = -1000000000000.0;
    static 71;
    #h;
    static 5 = -1000000000000.0;
    static [0.0] = 0.0;
    static a = -1000000000000.0;
    static ["MAX_SAFE_INTEGER"] = "MAX_SAFE_INTEGER";
    a;
    static [-1000000000000.0];
    #a = -1000000000000.0;
}
try { C3.apply(0.0, -1000000000000.0); } catch (e) {}
const v5 = new C3();
const v6 = new C3();
v6.MAX_SAFE_INTEGER = v6;
const v7 = new C3();
class C8 extends C3 {
    #valueOf(a10, a11, a12) {
        [a11,a12];
        const v14 = [v7];
        [a11,v6,-1000000000000.0];
        return v14;
    }
    #g;
}
C8[5];
const v20 = new C8();
const v21 = new C8();
new C8();
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 3;
    } catch(e26) {
    }
    try {
        this.f = 3;
    } catch(e27) {
    }
    try {
        this.h = 3;
    } catch(e28) {
    }
}
const v29 = new F23();
const v30 = new F23();
const v31 = new F23();
const o32 = {
};
o32.e = o32;
const v34 = new Proxy(v31, o32);
v34.h;
const o39 = {
    "execution": "async",
    "type": "minor",
};
gc(o39);
v31.b = v31;
const v43 = new Uint32Array();
try { v43.lastIndexOf(v21); } catch (e) {}
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const v47 = new Uint32Array();
try { v47.constructor(Uint32Array, v34, v34); } catch (e) {}
10 ^ 10;
const v52 = new Float64Array(10);
v52[9] = v52;
v52[1] = v52;
class C53 {
}
try { C53.bind(o39); } catch (e) {}
const v55 = new C53();
const v56 = new C53();
try { v56.constructor(); } catch (e) {}
const v58 = [v56,v55,v29];
try { v58.lastIndexOf(v5); } catch (e) {}
function F60(a62, a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    a63.b = a63;
    let v66;
    try { v66 = a62.entries(); } catch (e) {}
    try { v66.next(); } catch (e) {}
    const v68 = a63?.constructor;
    try { new v68(); } catch (e) {}
    const v70 = a62.unshift();
    v70 === v70;
    Set.d = Set;
    const v73 = new Set();
    try { v73.add(v20); } catch (e) {}
    function F75(a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.constructor(a78, v56); } catch (e) {}
        a78.prototype = a78;
        try {
            this.d = a77;
        } catch(e80) {
            for (let [v81,v82] of a77) {
                try {
                    v73.values();
                } catch(e84) {
                }
            }
        }
        try {
            this.h = v73;
        } catch(e85) {
        }
        try {
            const v86 = v73[this];
            try {
                new F75(v86, -268435456n);
            } catch(e89) {
            }
            this.b = Set;
        } catch(e90) {
        }
    }
    const v91 = new F75(Set, Set);
    new F75(Set, F75);
    const v93 = new F75(v91, F75);
    const v97 = [65537,268435441,63298,-5,1235122603];
    const v98 = [128,215394418];
    const v99 = v98.entries();
    const v100 = [-2,-4294967296,4294967297];
    function F101(a103, a104, a105, a106) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v107 = new F101(-714582153, F101, -714582153, v98);
    const v109 = new F75(v93, null);
    new BigUint64Array(0);
    new Int32Array(1519);
    v107.length;
    const v117 = new F101(9, v107, 9, v100);
    v117.b = v117;
    new F101(1024, v117, v100, v100);
    const v126 = ("string").trimStart();
    v99[3];
    let v130;
    try { v130 = v126(); } catch (e) {}
    v97[v130] = v98;
    0 ^ 9;
    const v135 = -1000;
    ~9;
    v135 >>> v135;
    a = ("string").length - F101;
    v73[v117];
    v109.__proto__;
    -35417 - -35417;
}
const v144 = new F60(v58, v30);
new F60(v58, v47, v47, v144);
