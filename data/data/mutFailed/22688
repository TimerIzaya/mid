[-3794,-6,4294967295,658378497,64,65536];
const v4 = [268435440,4,2147483648,9007199254740991,-33890,13];
const v5 = [1813924424,16130,1377,13505,-65536,268435440,1024,-191348724];
class C6 {
    constructor(a8, a9) {
        for (let i11 = 0; i11 < 8; i11++) {
            a9[257] = a8;
        }
    }
}
new C6(v4, "string");
new C6(v4, "zjs");
const v19 = new C6(v5, "toString");
function f20() {
    return v19;
}
new WeakSet();
const v23 = [-4.0];
const v24 = [1000000000000.0,0.6858063114396735,9.402658714628796,5.708362025005593,328.74991470076725,-753579.4826756514,-Infinity,693.2280935866736,-994017.5539127504];
const v25 = [2.0,1000000000.0,-483.6712274705866,1000.0,4.088063908694613];
class C26 {
    static {
        this.f = this;
        const v28 = [-848370.7489683867,1.7976931348623157e+308,-0.0,Infinity,-939644.2877334312,709.4714121839102,1000000.0,-607265.92864471,-1000000000.0,2.2250738585072014e-308];
        try { v28.entries(); } catch (e) {}
        [4.0];
        ([249883.5685712006,1.2407412478935857e+308,NaN,-311.22582434168794,-2.220446049250313e-16])[4];
        8 + 8;
        const v37 = ~8;
        const v38 = v37 + 8;
        v38 - v38;
        Math.atan2(v24, v37);
        -345830.36113995407 >> v37;
    }
}
try { new C26(); } catch (e) {}
const v43 = new C26();
try { v43.propertyIsEnumerable(v24); } catch (e) {}
const v45 = new C26();
const v46 = new C26();
const v47 = v46?.constructor;
try { new v47(); } catch (e) {}
const v50 = new WeakMap();
try { v50.delete(C26); } catch (e) {}
class C52 {
    #d = v43;
    p(a54, a55, a56, a57) {
        const o60 = {
            "maxByteLength": 3729857442,
        };
        const v62 = new ArrayBuffer(6, o60);
        new BigInt64Array(v62);
        return v45;
    }
}
new C52();
new C52();
new C52();
try { Map.apply(v43, v25); } catch (e) {}
const v73 = ["-3"];
try { v73.splice(C26, C26); } catch (e) {}
try { new Uint8ClampedArray(C26, v50, C26); } catch (e) {}
BigUint64Array.prototype;
class C83 {
    constructor(a85, a86) {
        const v87 = this?.constructor;
        try { new v87(this, a85); } catch (e) {}
    }
}
function f89(a90) {
    const v96 = Uint16Array();
    new Uint16Array(Math);
    v23[Uint8Array];
    v96[7] = v96;
}
const o104 = {
    "arguments": v73,
    "type": "function",
};
new Worker(f89, o104);
new C83();
const v107 = new C83();
const v108 = v107?.hasOwnProperty;
try { new v108(BigUint64Array); } catch (e) {}
52 ^ 52;
for (let v116 = 0; v116 < 25; v116++) {
}
for (let v118 = 0; v118 < 5; v118++) {
    try { ("-26733").trimLeft(); } catch (e) {}
    for (const v125 of "m") {
    }
}
