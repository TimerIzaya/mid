let v0 = 255;
function f2() {
    const v4 = Math?.cbrt;
    try { new v4(Float64Array); } catch (e) {}
    const v9 = v0 + 77.95700650248591;
    -256 >> v9;
    Math.sin(77.95700650248591);
    const v12 = ~-256;
    v12 - v12;
    !v9;
    const v15 = v0 >> -256;
    v15 * v15;
    const v17 = !v12;
    v17 || v17;
    return 256;
}
Float64Array.toString = f2;
const v19 = new Float64Array(v0);
const v22 = new Float32Array(4);
try { v22.keys(); } catch (e) {}
Float64Array.prototype = Float64Array;
Float64Array[Symbol.toPrimitive] = f2;
const v28 = new Float64Array(1367);
const v30 = Symbol.toPrimitive;
v28[v30] = Symbol;
class C31 {
    static #b = Float32Array;
    get d() {
        [v0] = v19;
        try {
            this.e = 1367;
        } catch(e33) {
        }
        return this;
    }
    static a;
    [1367];
    [Float64Array];
    static [v30] = Float64Array;
}
new C31();
const v35 = new C31();
const v36 = new C31();
v36[1367];
const v40 = new Int32Array(7);
const v42 = new v35(v40);
try { v42.join(v30); } catch (e) {}
