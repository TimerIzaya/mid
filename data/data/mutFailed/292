const v0 = [-1.1660776947697242e+308,0.2977635103517431,-1000.0,2.0,Infinity,-1.7976931348623157e+308,-388.1934196462631,460.87256336989685,1.6193273512733374e+308,0.5179155436427904];
[NaN,-1.7976931348623157e+308,4.236733455359319e+307];
[3.3136631292119727,-0.0,NaN,-9.129237880053952e+307,652957.6034317545];
new Date();
let v5 = WeakMap;
let v6;
try { v6 = v5(); } catch (e) {}
const v7 = new v5();
[NaN,382239.42175114923,1000.0,6.706575851762341e+307,0.0];
[0.6098948580811658];
const v10 = [1000000000.0,-1000000.0,1000.0,0.9930125125264603,-9.951837187566075e+307,1e-15,Infinity,-1000000000000.0,NaN,1.0];
v7[128];
try { v0.toReversed(); } catch (e) {}
const o17 = {
    "maxByteLength": 1073741825,
};
const v19 = new ArrayBuffer(1, o17);
new v5(v19);
Uint8Array.length = Uint8Array;
let v25 = 0.5430760373116464;
const v26 = Math.cosh(Math);
const v27 = v5++;
v27 % v27;
~v27;
++v25;
new this(1024);
v10.reverse();
const v33 = v10?.constructor;
if (v33 >= v6) {
    new Date();
} else {
    -v26;
    -v26;
    Math.log10(v7);
}
try { new v33(1024, Uint8Array, Uint8Array); } catch (e) {}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 0;
    } catch(e3) {
    }
}
new F0();
new F0();
const v6 = new F0();
function f16() {
    const o20 = {
        257: 268435439,
        "b": "o",
        "a": "v1I",
        __proto__: "o",
    };
    return o20;
}
const v21 = f16();
f16();
const v23 = f16();
const v24 = [1000.0,-5.016087683444805,NaN,-1000.0];
const v25 = [-745.7220723324123,0.21018301473003975,1.7976931348623157e+308,0.3859496770590838,-2.220446049250313e-16,-1.6133346593342317,-4.0,NaN,7.9252585356615874,-Infinity];
function f26(a27, a28, a29) {
    const o30 = {
        __proto__: v25,
    };
}
f26(v21, v21, v24);
f26(v21, v23);
f26(v23, v21);
const v35 = new Set();
const v36 = [-4294967297,-4096,512,-3,-256,-12,-55546,-1279933634,-4294967295];
const v37 = [-2147483649,-536870912,48907,-2147483647];
[-2147483647,-574757603,-41008,1073741824];
const v40 = Date.constructor;
Date.now();
class C42 {
    c = v35;
}
new v6();
v35[Symbol.species] = C42;
Date();
new Uint16Array();
new Int8Array();
new Float64Array();
Float32Array.name = Float32Array;
const v54 = new C42();
let v56 = 0.610266531079643;
v56--;
class C60 {
    [-1248835410n] = 268435456n;
}
C60.name = C60;
function f61(a62, a63, a64) {
    const o65 = {
        "a": Date,
        [v40]: v24,
        ...Symbol,
    };
    o65[1];
}
f61(v37, v54, 0.34535591904858587);
f61(v36);
-57641.03148885199 ^ -57641.03148885199;
class C72 {
    static [38567] = -57641.03148885199;
}
const v73 = new C72();
const v74 = new C72();
[-2.0,-Infinity,1.762696690706525e+307,4.561012756948999e+307];
const v77 = [4.0,6.789772630191657e+307,1.7976931348623157e+308,1.7976931348623157e+308,-2.0,0.06136428089954615,1000000.0,-1.4205107913505,-1.730047930360128e+308,-7.329935897040107];
const v78 = [6.929526887701016,-252289.71684125415,0.0,-5.0,1000000000000.0,-1000.0];
try { v78.map(); } catch (e) {}
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    const v86 = this.constructor;
    try { new v86(-57641.03148885199, a83); } catch (e) {}
    a84 ^ a84;
}
new F80(v74, v77);
new F80(v73, v78, v73);
const o95 = {
};
Symbol(o95);
new Int16Array();
