function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -2147483648;
    } catch(e3) {
    }
    try {
        this.d = -2147483648;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
v6.e = v5;
const v7 = new F0();
class C8 {
    constructor(a10) {
        let {"d":v11,"e":v12,"f":v13,...v14} = v6;
        let v16 = 64;
        const v17 = v16--;
        ~v16;
        v17 << F0;
    }
    static [v6];
    static #p(a21) {
        new BigInt64Array(3859);
        new Uint32Array(4);
        const v30 = new Uint32Array(1024);
        return v30;
    }
}
function f31() {
    Symbol.for(Symbol);
    return v6;
}
C8[Symbol.toPrimitive] = f31;
new C8(v6);
const v37 = new C8(C8);
const v38 = new C8(v6);
let v41 = -43583414;
function f42(a43, a44, a45, a46) {
    const o67 = {
        4096: v37,
        [C8]: -4096,
        __proto__: C8,
        ...v5,
        set g(a48) {
            super.h &&= a44;
        },
        m(a52, a53, a54, a55) {
            let v56;
            try { v56 = v6.valueOf(-4096, a44); } catch (e) {}
            let v60 = 174.94412681516405;
            const v61 = --v60;
            v61 >>> v61;
            536870888 * a53;
            v41 % -24873;
            v41++;
            Math.fround(-24873);
            return v56;
        },
    };
    return o67;
}
f42(v7, f42(f42(v6, -4096, -4096, -4096), v38, -4294967297, -4096), -4096, v41);
const v73 = new Uint32Array(127);
new Uint8Array(v73);
