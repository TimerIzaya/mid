gc();
for (let i9 = (() => {
        function f6() {
            return f6;
        }
        const o8 = {
            [f6]() {
            },
        };
        return 0.8037056182165817;
    })();
    i9 < 10;
    (() => {
        const v15 = new Uint16Array(1657);
        v15.reverse();
        function f17(a18, a19, a20, a21) {
            const t3 = arguments.constructor;
            new t3(a20);
            return f17;
        }
        const v25 = i9++;
        v25 - v25;
    })()) {
}
2147483649 + 2147483649;
const v34 = new Uint8ClampedArray(4096);
v34.h = v34;
12 - 12;
new Uint16Array(12);
function f41() {
    const v42 = /(?:a*)+q(?<a>.)/guds;
    for (let v43 = 0; v43 < 32; v43++) {
        "p" & v43;
        for (let v46 = 0; v46 < 5; v46++) {
            function f47() {
                return f47;
            }
        }
        const o50 = {
            "execution": "sync",
        };
        gc(o50);
    }
    for (let [i57, i58] = (() => {
            [536870912n,536870912n,536870912n,536870912n,536870912n];
            const o55 = {
            };
            return o55;
            return [0, 10];
        })();
        (() => {
            function F59(a61, a62) {
                if (!new.target) { throw 'must be called with new'; }
                const v63 = this.constructor;
                try { new v63(this, a62); } catch (e) {}
                this.c = a61;
            }
            new F59();
            i57 + i57;
            return i57 < i58;
        })();
        (() => {
            i58 + i58;
            const v71 = i58--;
            v71 >>> v71;
        })()) {
        v42.test(v42);
    }
    return v42;
}
const v76 = f41();
v76.a = v76;
("minor").valueOf();
function F79(a81) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor.arguments;
}
new BigInt64Array(8);
const v87 = new Uint8Array([2,-10]);
class C90 extends Int8Array {
    [12];
}
v87[1] = v87;
function f91() {
    function f92(a93) {
        const o96 = {
            n(a95) {
                return a95;
            },
            [a93]: a93,
        };
        return a93;
    }
    let v97 = -9223372036854775808n;
    v97 %= 45725n;
    return 45725n;
}
%OptimizeFunctionOnNextCall(f91);
