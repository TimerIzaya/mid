class C3 {
    static {
        const o5 = {
        };
        try {
            o5.f = -3.0;
        } catch(e6) {
        }
        try {
            const o7 = {
            };
            o7.f = -3.0;
            o7.b = this;
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.f = -3.0;
            o9.b = this;
            o9.a = this;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.f = -3.0;
            o11.b = this;
            o11.a = -3.0;
            new Float64Array(3575);
            const v17 = new Int16Array(5);
            new Float32Array(v17);
        } catch(e20) {
        }
        this == this ? this : this;
        function f25() {
            try { o5.getMinutes(arguments); } catch (e) {}
            arguments[arguments] = o5;
            return 65535;
        }
    }
}
const v28 = new C3();
const v29 = new C3();
const v30 = new C3();
const v32 = new Map();
new Map();
function f35() {
    -0n;
    const t48 = "Bl4";
    t48["Bl4"] = 3;
    return v28;
}
const v42 = new Uint16Array(8);
const o43 = {
    ...v42,
};
class C44 {
    static 2;
    constructor(a46, a47, a48) {
        Object.defineProperty(a47, "a", { writable: true, configurable: true, enumerable: true, get: f35, set: f35 });
        let v50;
        try { v50 = v32["entries"](..."entries", v29, ...a48, a48, f35); } catch (e) {}
        var f = -1989198876;
        const o51 = {
        };
        function f52(a53) {
            return f52;
        }
        try {
            a48.valueOf = v50;
        } catch(e54) {
        }
    }
    static {
        this[Symbol.hasInstance];
    }
    static #h;
    #c = "bigint";
    static 3967 = "bigint";
}
("6Ct").normalize();
const o62 = {
    "c": 2.0,
};
new C44(v29, C44, v32);
const v64 = new C44("bigint", v32, v30);
new C44(v64, C44, v64);
function f67() {
    return 2147483648n;
}
%OptimizeFunctionOnNextCall(f67);
f67();
class C3 {
    static p(a5) {
        for (const v6 in "callee") {
            try {
                super["callee"] = a5;
            } catch(e7) {
            }
        }
        ("boolean").length;
        return "boolean";
    }
    set d(a10) {
        const o13 = {
            "maxByteLength": 95,
        };
        const v15 = new ArrayBuffer(255, o13);
        new BigUint64Array(v15);
    }
}
const v18 = new C3();
new C3();
new C3();
[828705.2102230175,9.782512527258554,-497749.8302422023,2.2250738585072014e-308,1.780864044343074e+308,-0.0,3.0,-1000000000.0,-926279.4305257334,-921.4523400888568];
[1.7976931348623157e+308,312920.01533012814,-2.0,1.1983521468628719e+308,-1.0,-2.2250738585072014e-308,1000000000.0,4.060050178666639,1000000.0,1e-15];
[958.8808400202181];
[64,268435456,-65536,11,536870889,255,13508,-1500979228,7,129];
[-2102271705,49581,-751862503,9,512];
[4,-1853532376,127];
let v32 = "163558485";
const v33 = [-7,127,13,-2];
[-1238491077];
-3 >> -3;
const v38 = v32--;
class C40 {
    e;
    constructor(a42) {
        try {
            a42.toString = a42;
        } catch(e43) {
        }
        try {
            a42[a42] = a42;
        } catch(e44) {
        }
    }
    c = v38;
}
C40.prototype;
new C40(C40);
const v47 = new C40(C40);
const v48 = new C40(-2.0);
v48.c;
9n | 9n;
65537n + 65537n;
const v54 = [-781727972,-2,10,-14,268435456,16,341131571,-1535576263,-45048,10000];
const v55 = [-5280];
function f58(a59, a60) {
    const o61 = {
        "e": v54,
        "a": a59,
        [a60]: a59,
        [v55]: 1405977585,
    };
    return a60;
}
f58(1405977585);
f58(-41022, v55);
~-768129381n;
-65536n == -65536n;
2147483649 >>> 2147483649;
const v74 = 1073741824 - 1073741824;
const v75 = v74 >>> v74;
Uint32Array.name;
try { new Uint32Array(9n, 4096, -65536n); } catch (e) {}
const v80 = new Uint32Array(4096);
let v81 = 9;
v81--;
try { new Int32Array(v80, v80, -2.0); } catch (e) {}
const v85 = Int32Array.length;
v85 - v85;
new Int32Array(v81);
try { new Uint16Array(C40, Uint32Array, 2147483649); } catch (e) {}
new Uint16Array(120);
Array[Symbol.iterator] = Array;
let v95;
try { v95 = Array.bind(v47); } catch (e) {}
try { v95(Int32Array); } catch (e) {}
const v98 = Array();
v98.a = v18;
v98.a = v98;
const v101 = new Int8Array(Array, 92, 485);
function f102(a103) {
    let v104;
    try { v104 = new a103(v75, -768129381n, a103, 19986, a103); } catch (e) {}
    return v104 instanceof Uint16Array;
}
v101[Symbol.toPrimitive] = f102;
v101[277] = v101;
const v109 = 3666 - 3666;
const v110 = v109 + v109;
v110 >>> v110;
const v114 = 0 < 1;
v114 || v114;
v114 && v114;
BigInt64Array.name;
const v122 = ([1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10]).sort();
try { v122.sort(-65536n); } catch (e) {}
BigInt64Array.g = BigInt64Array;
[-65535,2147483648,257,255,-25075,2403];
-2.0 | -2.0;
["p",4.260409396049164e+307,v33,1000000.0];
[v32,[1000000.0],v33,v32,"function"];
new Uint8Array(1);
class C140 {
    constructor(a142, a143) {
        a142 << a142;
        const v145 = this.constructor;
        try { new v145(); } catch (e) {}
        a142?.[a143];
    }
    #n(a149, a150) {
    }
}
const v151 = new C140(-65536n);
new C140(1000.0, v151);
new C140();
