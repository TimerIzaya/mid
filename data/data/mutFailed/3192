let v2 = -2;
const v3 = [856188205,5];
const v4 = v3[1];
let v5 = 0;
do {
    v3[v5] = v4;
    -536870912 && -536870912;
    const v9 = v2--;
    1891637746 + v9;
    v2 << (v2 & -536870912);
    v9 / 1891637746;
    v5++;
} while (v5 < 5)
[1073741824,-47697,2,-9007199254740992,256];
[11,-9,255,4294967297,65535,-9223372036854775808,-64214,1700838500];
~65536;
let v22 = 9007199254740992;
v22--;
v22 >>> v22;
const v27 = new BigUint64Array(-536870912);
v27[1];
0 & 0;
try { new Int8Array(v22, v2, Int8Array); } catch (e) {}
new Int8Array(0);
4 >>> 4;
Float32Array.b = Float32Array;
new Float32Array(4);
function F38() {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = new F38();
const v41 = v40?.constructor;
try { new v41(); } catch (e) {}
const v43 = [F38,F38,F38];
function f44(a45) {
    a45.d = a45;
    try {
        v43.some();
    } catch(e47) {
        e47.g = e47;
        const v48 = e47.stack;
        try { v48.bold(); } catch (e) {}
        let v50;
        try { v50 = v48.isWellFormed(); } catch (e) {}
        v50 && v50;
    }
    return a45;
}
try { f44.toLocaleString(); } catch (e) {}
v43.toString = f44;
const o54 = {
    __proto__: v43,
    "e": v40,
    get a() {
        return this;
    },
};
o54.a = 2;
const v55 = o54.toString(F38, o54);
try { new v55(); } catch (e) {}
