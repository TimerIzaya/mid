const v2 = new Int32Array(2430);
const v5 = new BigUint64Array(218);
new BigUint64Array(5);
const v10 = [Int32Array,[v2],Int32Array,5,v2];
try { v10.sort(218); } catch (e) {}
[v10,v5];
9n + 9n;
const v19 = new Int32Array();
const v21 = new BigInt64Array();
const v22 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v23 = [-1.7976931348623157e+308];
let v24;
try { v24 = v23.concat(Int32Array); } catch (e) {}
function f25(a26, a27, a28, a29) {
    a28.g = a28;
    const o36 = {
        toString(a31, a32, a33) {
            try { this.toString(a32, -2147483648n, this); } catch (e) {}
            a28[a27] = a26;
            return 255n;
        },
    };
    return a28;
}
try { f25(v10, 9n, v24, 5); } catch (e) {}
const v38 = Int32Array(v21, 129, v23);
const v39 = v38?.__defineGetter__;
try { new v39(9n, v10); } catch (e) {}
const v41 = f25(v19, 129, v22);
for (let v42 = 0; v42 < 5; v42++) {
    v42 + v42;
    const v44 = v41 % v38;
    v44 < v44;
    v22.b = v19;
}
