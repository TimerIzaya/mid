const o3 = {
};
/W(jy2)/udy.flags;
const o7 = {
    "maxByteLength": 47,
};
class C8 {
    static get b() {
        const v10 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
        const v11 = /QK/gvdimy;
        with (v10) {
            v11.__proto__ = length;
        }
        let v13 = this * -12;
        for (const v15 in C8) {
            ({"b":v13,} = this);
        }
        try {
            this.e = -12;
        } catch(e16) {
        }
        let v17;
        try {
        const t0 = 1000;
        v17 = t0(1000, this);
        } catch (e) {}
        const v20 = new Uint8ClampedArray(16);
        new Uint32Array(v20);
        Math.cos(v17);
        v17 ** v17;
        Math.floor(-957.3206927268667);
        return this;
    }
    15;
}
const v29 = new C8();
C8[1073741825] = -12;
try {
    v29.toString = -12;
} catch(e30) {
}
const v31 = new C8();
const v32 = new C8();
class C33 extends C8 {
    static #b;
    constructor(a35, a36, a37, a38) {
        super();
        try {
            this.#b >>= a38;
        } catch(e39) {
        }
    }
    static #toString(a41, a42) {
        v29[a42];
        const o44 = {
        };
        const v46 = new Proxy(v29, o44);
        try {
            v46.__proto__ = v46;
        } catch(e47) {
            e47 = a41;
            try {
                super.join(a42, this, a41, o44, C8);
            } catch(e49) {
            }
        }
        v32[a42] = o44;
        return v46;
    }
}
new C33(v31, v29, C8, v32);
new C33(v32, v32, C8, C33);
new C33(v29, C33, v32, v29);
new Int32Array(257);
const v58 = new Uint16Array(2982);
const v62 = new Float64Array();
v62.buffer.resize(Float64Array);
class C65 {
}
new Float32Array(129);
class C68 {
}
const v69 = (a70, a71, a72) => {
    const v73 = Uint16Array;
    -v58;
    const v78 = 9 & 0.4884088289937445;
    Math.atan(-12);
    Math.asinh(v78);
    1073741825 & 0.4884088289937445;
    return Math.expm1(1073741825);
};
let v83;
try {
const t0 = 1073741825;
v83 = t0();
} catch (e) {}
v83?.[126349911];
