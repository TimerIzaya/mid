function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 256;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new v4();
const v6 = new F0();
v6.f = v6;
let v7 = Array;
const v9 = v5[0];
let v10;
try { v10 = new v9(v4); } catch (e) {}
Math.log10(2.220446049250313e-16);
const v15 = ~-1;
Math.acosh(v5);
const v17 = v15 & v5;
2.220446049250313e-16 - v9;
const v19 = Math.log2(v17);
let v20 = new v7(68);
60 ^ 60;
try { Int16Array.bind(v19); } catch (e) {}
const v26 = new Int16Array(60);
let v27 = 16;
const v29 = new Int8Array(v27);
v29[3];
const v33 = new Uint8ClampedArray(10);
v33[Uint8ClampedArray] = v29;
try { v10(...v20, v9, ...v26, v15, v7); } catch (e) {}
({"byteLength":v7,"byteOffset":v27,"g":v20,} = v33);
const o35 = {
};
o35.d = o35;
try {
    o35.h = v7;
} catch(e36) {
}
try {
    const o37 = {
    };
    o37.h = o37;
    o37.h = v7;
    o37.g = 68;
} catch(e38) {
}
try {
    const o39 = {
    };
    o39.d = o39;
    o39.h = v7;
    o39.g = 68;
    o39.b = v15;
} catch(e40) {
}
try {
    const o41 = {
    };
    o41.h = v7;
    o41.g = 68;
    o41.b = null;
} catch(e42) {
}
33384326 & 33384326;
try { Uint8ClampedArray(Math, v7, Math); } catch (e) {}
const v50 = new Uint8ClampedArray(104);
Float64Array.length;
[];
const v54 = v50.toLocaleString();
try { v54.toLocaleLowerCase(); } catch (e) {}
