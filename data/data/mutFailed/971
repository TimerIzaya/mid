new Int16Array(8);
7 + 7;
try { new Float64Array(Int16Array, Int16Array, Int16Array); } catch (e) {}
class C9 {
    static get e() {
        return 1n;
    }
    h = -1000000000.0;
    constructor(a13, a14) {
        Math.exp(0.611254903366946);
        a13 + a13;
        let v20 = +17469;
        17469 && v20;
        v20++;
    }
}
const v23 = new C9(884274.129238598, -1000000000.0);
v23.b = v23;
const v24 = new Float64Array(7);
16 + 16;
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
const v28 = new Uint8ClampedArray(16);
v28[11];
const v30 = [16,v24,Uint8ClampedArray];
try { v30.reduce(7); } catch (e) {}
const v32 = [v30,v24,16,v30];
v32[3] = v32;
const v33 = [16,v30];
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.__defineSetter__;
    class C41 {
    }
    function F42(a44, a45, a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v48 = new F42();
    new F42(v48, F42, F42, v48);
    try { new v40(8, 8); } catch (e) {}
    try { a36.map(a38); } catch (e) {}
    a38 << a38;
    const v53 = [-1.0];
    const o54 = {
    };
    let v56 = new Proxy(v53, o54);
    ++v56;
    try { a39.every(F34); } catch (e) {}
    a36[2] = a36;
    try { a37.map(v28); } catch (e) {}
    try {
        new Float32Array(5);
        class C64 {
            constructor(a66, a67) {
                try {
                    super.n(1e-15);
                } catch(e69) {
                }
                try {
                    super.getYear(a66, this);
                } catch(e71) {
                }
            }
            static #p(a73, a74) {
                try {
                    this.#e;
                } catch(e76) {
                }
                this.b;
                %VerifyType(a74);
                return v24;
            }
        }
        this.d = 16;
    } catch(e78) {
    }
    try {
        this.e = 16;
    } catch(e79) {
    }
}
const v80 = new F34(v32, v30, 8, v30);
v80.e = v80;
const v81 = [142026.36415256164,-1000000000000.0,160593.91457975493,-1.9364523595671663,0.10652337324779793,0.4591098029687508,0.2689630899972745];
const v83 = new WeakMap();
function f84(a85, a86, a87) {
    return a86;
}
const v89 = [f84,v83,v81];
const o90 = {
    "arguments": v89,
    "type": "function",
};
new F34(v33, v80, 16, Int16Array);
new F34(v32, Int16Array, 8, v28);
-(-724330360);
for (const v97 in "5amlK") {
    ("5amlK")[v97];
}
for (const v100 in "1024") {
}
-21764 >> -21764;
Uint32Array.length = Uint32Array;
function f106() {
    const o111 = {
        ["8"](a109, a110) {
        },
    };
    o111[8] = o111;
    return o111;
}
("-1723624938").slice(7, "g").normalize();
function f117() {
    const o120 = {
        [null]() {
            super.b;
        },
        "f": null,
    };
    return o120;
}
f117();
f117();
f106();
f106();
let v125 = 10;
v125++;
const v133 = -1.4618325192014402e+308 >> -1.4618325192014402e+308;
v133 >>> v133;
Math.log1p(4294967295);
Math.cbrt(Math);
new Date();
class C139 {
}
C139.__proto__;
class C141 {
}
class C142 {
}
class C143 extends C142 {
    constructor(a145, a146) {
        super();
        try {
            a145.__proto__ = C142;
        } catch(e147) {
        }
        new C142();
    }
}
const v149 = (-1.4618325192014402e+308) ** -724330360;
const v151 = /0j/vds;
try { v151.compile("Di0", "Di0"); } catch (e) {}
const v154 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
const v155 = [-1073741824,1665564361,16526,1805211777,10,-9007199254740990,4,-17063,-1];
const v156 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
const v157 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
const v158 = [-1.015259194643325e+308,-Infinity,-9.825391401141273,-2.2250738585072014e-308,5.0,-2.2250738585072014e-308];
class C159 {
    constructor(a161, a162, a163, a164) {
        const v165 = this?.constructor;
        try { new v165(v157, a163, a163, v154); } catch (e) {}
        a162 >>> a162;
        -0.0 >>> -0.0;
    }
    /*
    constructor(a173, a174, a175, a176) {
        const o182 = {
            "maxByteLength": 2240,
        };
        const v184 = new ArrayBuffer(2240, a174);
        new Uint8ClampedArray(v184);
        this[268435456];
        v156 && this;
        try {
            v156.length = v158;
        } catch(e189) {
        }
    }
    */
    static 268435439 = v155;
    #c = -2.2250738585072014e-308;
    static 832209355 = -1000000000.0;
}
function f190(a191) {
    new C159(...v155, a191, ...v157, ...v158);
    new Float64Array();
    return -2.2250738585072014e-308;
}
C159.valueOf = f190;
const v195 = v149 >> v149;
v195 >>> v195;
-Date.UTC(3, 3);
