let v2 = 45478;
class C3 {
    static #h = -2.1662003903347156;
    #c;
    constructor(a5, a6, a7) {
    }
    static set e(a9) {
        BigUint64Array.p(this);
        const v15 = -(-8);
        BigUint64Array.expm1(this);
        v2--;
        const v20 = new Uint8ClampedArray(1907);
        let v21 = 66;
        v20[7] = 43464885;
        [] = v20;
        super.h /= v21;
        --v21;
        new Uint8Array(2);
        new Int16Array(64);
        new Uint16Array(3);
        v20.fill(512, v21);
        v15 >>> this;
        v2 + 36575;
        v15 & 0.0;
    }
}
const v38 = new C3();
let v39 = 0;
do {
    C3[v38] = v2;
    throw v39;
    try {
    const t0 = -2.1662003903347156;
    t0(438.2240504128406, ...C3, C3, v38, -2.1662003903347156);
    } catch (e) {}
    v39++;
} while (v39 < 8)
new C3();
new C3();
new Uint8Array(16);
function f51() {
    return f51;
}
const v52 = [f51,f51,f51,f51];
const o56 = {
    "execution": "async",
    "type": "minor",
};
gc(o56);
[f51,v52];
class C67 {
}
const v68 = new C67();
const v69 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o70 = {
};
const v72 = new Proxy(v69, o70);
v72.unshift(v68, C67, 464227.1824305169);
new Date(Date);
new Set();
const v78 = new C67();
const v79 = v78.__defineSetter__;
try { v79(); } catch (e) {}
try {
} catch(e83) {
    const v85 = new Uint32Array(Uint32Array);
    new Int16Array(v85);
    16 << 16;
    function F90() {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f92() {
        return e83;
    }
}
