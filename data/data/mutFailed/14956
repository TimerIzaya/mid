function f3(a4) {
    const o22 = {
        p(a6) {
            const v7 = super.a;
            try { new v7(this, v7, a4, this); } catch (e) {}
            [Array(4)];
            !-9932;
            --a4;
            Math.expm1(-257604840);
            Math.sinh(-257604840);
            return this;
        },
    };
    return o22;
}
const v25 = new BigInt64Array(128);
for (const v26 in v25) {
}
f3(4294967295n);
f3(-599974756n);
const v29 = [-4529,-56036,4294967295,256,-256];
const v30 = /((?:ab){4,7}(?:a+){0,0})/gv;
const v31 = /a\bc/umsy;
class C32 {
    constructor(a34) {
        for (let v35 = 0; v35 < 160; v35++) {
            function f36() {
                if (a34) {
                    function F37(a39, a40, a41, a42) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    new F37(this, this, a34, v35);
                    new F37(v31, this, v30, C32);
                    new F37(a34, v29);
                } else {
                    new f36();
                }
            }
            f36();
        }
    }
}
f3(55274n);
function f54() {
    return 3585;
}
class C55 extends f54 {
    toString(a57, a58) {
        this.constructor(a57);
        -this;
    }
    [4294967295n];
    1855;
    constructor(a62, a63) {
        const v64 = this.constructor;
        try { new v64(); } catch (e) {}
        16 & !this;
    }
}
class C69 extends f54 {
}
new C69();
class C71 {
}
const v72 = new C55();
function f73(a74) {
    return 1024 <= 3585 ? 1024 : 3585;
}
v72.constructor = f73;
try { v72.toString(f54, 3585, 3585, f54, 1024); } catch (e) {}
