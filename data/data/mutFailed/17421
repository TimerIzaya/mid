class C3 {
    get d() {
        this.constructor;
        class C6 extends -9007199254740990 {
            a;
            #b;
        }
        const v7 = new C6();
        return v7;
    }
    get c() {
        "boolean" & this;
        try {
            this.__proto__ = "boolean";
        } catch(e10) {
        }
        return C3;
    }
}
const v11 = new C3();
const v12 = new v11();
const v13 = new C3();
function f14(a15, a16) {
    const o29 = {
        "f": -256,
        __proto__: "boolean",
        ...C3,
        ..."boolean",
        "d": a16,
        o(a18, a19, a20) {
            const v21 = async (a22, a23, a24) => {
                a20 && this;
                let {"c":v26,"d":v27,} = v11;
                await v27;
                return v27;
            };
            return a19;
        },
    };
    return o29;
}
f14(v12, v11);
f14(v13, C3);
f14(v12, v12);
const v36 = [-9223372036854775808];
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    try { a39.groupToMap(a39, F37, v36, this, F37); } catch (e) {}
    try {
        this.d = v36;
    } catch(e41) {
        for (let v42 = 0; v42 < 5; v42++) {
        }
    }
}
try { ("number").match(F37); } catch (e) {}
