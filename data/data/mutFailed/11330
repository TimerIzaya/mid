new WeakMap();
[2,-2147483647,-1219217613,-65535,-1888876425,-4294967295];
const v6 = [-30848,15,6,-57818,12,1606394468,1073741823,536870887];
const v7 = [4882,9223372036854775807,1373799135,24656,-65535,-9007199254740992,268435456,-4096,31005755,3];
function f8() {
    return 0.6126036194021377;
}
const v18 = [3.3260889228666723,-3.0,2.6799670580890673,-7.864904233713634e+307];
function f19(a20) {
    function f21(a22) {
    }
    return f8;
}
v6.valueOf = f19;
v18[1] = v18;
const v23 = [-576.2374837362427,-0.11904838829139841,-2.220446049250313e-16,-3.0,-7.390443754016368e+307,5.0];
const v24 = [1000000000.0,5.0,1000000000.0,-1.0,-195466.27982473024,-0.0];
function f25() {
    const o26 = {
        ...v24,
        "c": v7,
        "e": v24,
        "f": v24,
        "arguments": v6,
        __proto__: WeakMap,
    };
    v18.e = o26;
    65537 == 4096n;
    const v32 = new Uint8ClampedArray(1024);
    for (const v33 of v32) {
        const o36 = {
            "maxByteLength": 65537,
        };
        new SharedArrayBuffer(1796, o36);
    }
    return v24;
}
2147483647n % 2147483647n;
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a45;
    this.h = F43;
    const v50 = 9007199254740991n * a47;
    v50 * v50;
    const v54 = new BigUint64Array(255);
    v54.buffer.slice();
    try { a46.fill(v24); } catch (e) {}
    a47[0] = a47;
    try {
        this.e = a48;
    } catch(e58) {
    }
    try {
        this.h = a46;
    } catch(e59) {
    }
    for (const v61 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
        ("-2").normalize("NFKC");
    }
}
function F65(a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
}
function f69() {
    const v71 = -v18 && v18;
    +v71;
    return v71;
}
const v73 = new F43(2147483647n, v24, v23, 2n);
new Uint32Array(v18, v18, Uint32Array);
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    let v80;
    try { v80 = this.propertyIsEnumerable(v18); } catch (e) {}
    v80[2];
    const v83 = this.valueOf().constructor;
    try { new v83(a78); } catch (e) {}
    a78.lastIndexOf();
}
new F43(v73, v18, v23, 0n);
new F43(v73, v18, v23, 0n);
Math.stack = v7;
Math.stack = 8798;
Math.stack = Math;
Math.pow(-15 >> 8798, -3.0) !== -15;
