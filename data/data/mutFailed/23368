const v0 = [];
let v5 = 2;
v5++;
(235368823).call();
for (let v12 = 0; v12 < 5; v12++) {
    const v13 = [1073741824,1073741823,1376142744,1073741825];
    function f14(a15, a16, a17, a18) {
        const v19 = a16.e;
        v19(a18, v19, v12);
        v13["find"]();
        return v13;
    }
    for (let v23 = 0; v23 < 5; v23++) {
    }
}
const v25 = new BigUint64Array();
try { v25.entries(); } catch (e) {}
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    try { new v31(a29, F27); } catch (e) {}
    function f33() {
        try { v25.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
        return a29;
    }
    const o42 = {
        get b() {
            eval("");
            return 16;
        },
    };
    Symbol.e = Symbol;
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f33 });
    const o58 = {
        next() {
        },
        m(a47) {
            const o48 = {
            };
            function f49(a50, a51, a52) {
            }
            try {
            } catch(e53) {
            }
            try {
                const o54 = {
                };
            } catch(e55) {
            }
            class C56 {
            }
            const o57 = {
            };
        },
    };
}
try { new F27(v5, v0); } catch (e) {}
const v60 = new F27();
class C61 {
    static [v60];
}
const v62 = C61?.apply;
try { new v62(v5, -4096); } catch (e) {}
