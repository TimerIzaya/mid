class C3 {
    #valueOf(a5, a6) {
        try {
            this.g = this;
        } catch(e7) {
        }
        return a6;
    }
    static 2920647479;
    #a;
    static ["bigint"] = -5.0;
}
const t12 = "bigint";
new t12();
const t14 = "bigint";
new t14();
new C3();
[-4294967297,1073741824,10000,-65535,536870887,51805,4294967295,255];
[-2,-8];
[-2147483648,2147483647,65536,-1579491349];
function f14() {
    for (let i17 = -5.0, i18 = 10; i17 < i18;) {
    }
}
for (const v25 in [1000.0,-1000.0,0.4309916776051478,1000000.0,-1.0,-560.6262021777798,NaN,3.0]) {
    const o26 = {
    };
}
function F27(a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e30) {
        function f31() {
            const o34 = {
                toString() {
                },
                n() {
                },
            };
        }
    }
}
function f35() {
}
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    function f42(a43) {
    }
    try {
    } catch(e44) {
    }
}
const v45 = new F38(10000, 579501296);
const v48 = new Float32Array(Float32Array, Float32Array);
for (let v49 = 0; v49 < 25; v49++) {
    function f50(a51, a52, a53, a54) {
        a51[0] = a51;
        a52 <= 10000;
        const v57 = arguments?.__lookupGetter__;
        try { v57(v57, f50, a52); } catch (e) {}
        let v59 = -1073741824n;
        v59--;
        function F61(a63, a64, a65, a66) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a64;
        }
        try { undefined(); } catch (e) {}
    }
    for (let v69 = 0; v69 < 10; v69++) {
        f50(v48);
    }
}
%VerifyType(v45 instanceof -24894);
