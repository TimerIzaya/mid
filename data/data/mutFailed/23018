let v0 = 1993;
const v2 = new Int32Array(v0);
const v5 = new Uint32Array(10);
const v8 = Int16Array.length;
const v9 = new Int16Array(64);
function f10() {
    return v9;
}
[55844,65536,49995];
[-9007199254740990,606831780,-11768,31807,65535,-9223372036854775808];
const v13 = [-17354,536870912,-2147483648,9007199254740991,1024,-340091649,-1245471713];
v13.g = v13;
const v15 = 6.431523409869634 < v8;
if (v15) {
    v5[v15];
} else {
    ({"buffer":v0,} = v5);
}
const v18 = -2.9425541304922547;
([1000000000.0,110768.51867496711,-5.0,908.9131999023468,0.0,-4.800519851737313,0.024008316580823696,-1.7976931348623157e+308,1000000.0,-4.060607847520088])[5];
[-2.2250738585072014e-308,2.2250738585072014e-308,-1000.0,-1000000.0,-0.0,664456.2809931459,0.30808750950753905];
[0.0];
const v23 = f10();
v23.byteOffset = v23;
new Float32Array(86);
/s\1\2(a(?:\1(b\1\2))\2)\1a(?=b)c+/vdy;
/[B(\2)(\1)]/vd;
/foo|(bar|baz)|quux/diy;
try { v9.sort(f10); } catch (e) {}
new Uint32Array(2923);
512 - 512;
new Float64Array(512);
const v43 = 9n >> 9n;
v43 ^ v43;
delete v23[10];
try {
    const v46 = new Float32Array(v5);
    v46.g = v46;
} catch(e47) {
    try { v8(v2, v18, e47); } catch (e) {}
    try {
        v9.length = 9;
    } catch(e50) {
    }
}
