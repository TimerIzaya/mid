[9007199254740991,740764774];
[-49708,34676,268435439,127];
const v3 = Array();
let v5 = 0;
v5++;
class C7 {
}
new Uint8Array(268435440);
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    class C15 {
    }
    const v18 = [65537,268435441,63298,-5,1235122603];
    const v19 = [128,215394418];
    try { v19.entries(); } catch (e) {}
    function F21(a23, a24, a25, a26) {
        if (!new.target) { throw 'must be called with new'; }
        const v27 = this.constructor;
        try { v27(1024, 1024, v18); } catch (e) {}
        const v30 = new a13();
        v30.buffer.slice(2147483648);
    }
    new F21(-714582153, F21, -714582153, v19);
    this.b = "b";
    this.d = a14;
}
const v35 = [-1024,-1289383281,63049,-265925748,268435439,37720,128,-8,8,2074156330];
class C36 {
    valueOf(a38, a39) {
        const o42 = {
            "maxByteLength": 2365,
        };
        const v44 = new ArrayBuffer(94, o42);
        for (let v46 = 0; v46 < 25; v46++) {
            Math.cosh(v46);
        }
        class C50 {
            static #c = "bigint";
            static valueOf(a52) {
                this.#c = "bigint";
            }
        }
        new Int32Array(v44);
        Int32Array.bind(Int32Array, Int32Array, Int32Array);
        Math.cos(0.8497483139616006);
        new Uint8Array(268435440);
        for (let v61 = 0; v61 < 25; v61++) {
        }
        const v62 = [0.5690334337241484,-1.0,-Infinity,-6.831251836501173,-5.039519767346096,-2.0,0.6826335106801482,1000000000000.0];
        try { v62(); } catch (e) {}
        Uint8ClampedArray.prototype;
        return a38;
    }
    b = v35;
    231;
    constructor(a67, a68) {
        this.propertyIsEnumerable(v3);
        function F73(a75, a76) {
            if (!new.target) { throw 'must be called with new'; }
            const v77 = this?.constructor;
            try { new v77(0.29489550717955537, a75); } catch (e) {}
            try { this.constructor(0.6822080711934364, this); } catch (e) {}
            try {
                this.f = 3.0;
            } catch(e80) {
            }
        }
    }
    /*
    constructor(a82, a83) {
        const v84 = this.constructor;
        try { new v84(); } catch (e) {}
        let v86 = 0;
        for (let i = 0; i < 10; i++) {
            Math.atan();
            const v90 = v86++;
            v90 - v90;
        }
    }
    */
    [v35];
}
new C36();
new C36();
new C36();
function F95(a97, a98) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float64Array(2);
new C7(159);
new Int8Array(10);
const v113 = [[]];
function f115(a116) {
    const o120 = {
        "c": 2,
        "e": 268435440,
        213: a116,
        ...a116,
        "g": 2,
        p(a118, a119) {
        },
    };
    return o120;
}
F95(2);
try { v113.reduce(9569); } catch (e) {}
Math.atan2(536870912, -9);
const v129 = ([1.479450712344466]).join();
for (let v130 = 0; v130 < 25; v130++) {
    v129.__proto__;
}
new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
("b").match();
function f136(a137, a138, a139, a140) {
    arguments[2] = arguments;
    function f142() {
        const o143 = {
            __proto__: a139,
        };
        o143.f;
        o143[0] = o143;
        return o143.valueOf(a140);
    }
    f142();
    %OptimizeFunctionOnNextCall(f142);
    return a138;
}
class C147 {
}
C147.__lookupGetter__.apply(Float32Array);
