new Float32Array(1011);
const v5 = new Uint8Array(201);
function f7() {
    return 10000;
}
function F8() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 268435440;
}
new BigUint64Array(512);
class C16 {
    static a;
    static {
        this >> this;
        this[6];
    }
    static m(a21) {
        gc();
    }
}
new C16();
const v25 = new Uint16Array(13);
class C29 extends Uint8Array {
    #g = 13;
    constructor(a31, a32, a33) {
        super(13, a33);
        super.length = this;
        try {
            v25.#g;
        } catch(e35) {
        }
    }
    get g() {
        super.byteOffset ^= 28.71296673089114;
        let v37;
        try { v37 = v25.findLast(Float32Array, v5); } catch (e) {}
        this[257] = v37;
        Object.defineProperty(this, "b", { enumerable: true, value: Float32Array });
        const v38 = 1011 << 201;
        try {
            this.#g = v38;
        } catch(e39) {
        }
        return v38;
    }
}
new C29(28.71296673089114, 6.707994467284659e+307, 1011);
new C29(6.707994467284659e+307, 6.707994467284659e+307, 1011);
new C29(-1.064335248855798, 6.707994467284659e+307, 13);
const v43 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f44() {
    return f44;
}
function f45(a46) {
    return a46;
}
Object.defineProperty(v43, 1, { get: f44, set: f45 });
function f47() {
    return v43;
}
class C48 extends f47 {
}
const v49 = new C48();
new Uint16Array(Uint16Array);
function f52(a53, a54) {
    Math.atan2(Math, f52);
    return f52;
}
delete v49[1];
