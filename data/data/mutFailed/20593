class C4 {
}
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    try { v5["find"](); } catch (e) {}
    return C4;
}
const t7 = -42916131;
t7(8, f6);
const v15 = new BigInt64Array(8);
try { v15.slice(268435439, -42916131); } catch (e) {}
Float32Array.b = Float32Array;
const v19 = new Float32Array(129);
const v22 = new Uint16Array(11);
const v23 = v22?.with;
try { new v23(-42916131, -42916131); } catch (e) {}
[-65537,-2,-1,2147483648,915585142,42692,437172662,-25759,-128];
[1073741825,-165725493,-33801];
const v27 = [-13,4294967296,1000,-12,32532,23901];
v27[5] = v27;
4087 !== 4087;
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this?.isPrototypeOf;
    const v33 = /X/uimsy;
    class C35 {
        constructor(a37, a38) {
            const o39 = {
                __proto__: a38,
            };
            o39[a38] = o39;
        }
    }
    const v40 = new C35(-1000000000.0, -1000000000.0);
    const t34 = v40.constructor;
    const v42 = new t34();
    const v43 = new C35(-1000000000.0, v40);
    const v44 = v43.constructor;
    new v44(v33, v43);
    function F46(a48, a49) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v50 = new F46(v40, v44);
    v42.length = v50;
    try { new v32(this); } catch (e) {}
    const v52 = v27.toString();
    try { v52.isWellFormed(); } catch (e) {}
    Set.length = Set;
    const v55 = new v19();
    const v56 = v55.add;
    try { v56(); } catch (e) {}
    const v60 = new Int16Array(2183);
    4087 > v40;
    let [,,...v62] = v60;
    v62[1679];
    function f64(a65) {
        function f67(a68) {
            this[1] >>= 4087;
            return v33;
        }
        this.onmessage = f67;
    }
    f64.arguments;
    const o72 = {
        "type": "function",
    };
    function f73() {
    }
    const v74 = [1073741824,1073741823,1376142744,1073741825];
    function f75(a76, a77, a78, a79) {
        function f81() {
        }
        f73();
        const v84 = new Int8Array();
        function f86(a87, a88) {
            const o92 = {
                p(a90, a91) {
                },
                10: 1073741824,
            };
            return o92;
        }
        f86();
        f86();
        v84.buffer;
        a77--;
        const t82 = [];
        t82.length += 1.0;
        %OptimizeFunctionOnNextCall(f81);
        class C105 extends Date {
        }
        try { v74["find"](); } catch (e) {}
        for (const v108 in "1024") {
        }
    }
    new Worker(f64, o72);
}
new F30();
const v111 = new F30();
const v112 = v111?.constructor;
try { new v112(); } catch (e) {}
