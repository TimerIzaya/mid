function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -268435456;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
v6.unicode = v6;
let v9;
try { v9 = Uint16Array.from(F0); } catch (e) {}
try { v5.m(v9, Uint16Array); } catch (e) {}
Math.trunc(712919074);
const v15 = v6 * -0.0;
--0.0;
-0.0 % v15;
-0.0 && -0.0;
const v19 = new Uint16Array(128);
v19[63];
1024 >>> 1024;
const v24 = new Uint8Array(1024);
try { v24.__defineGetter__(v19, Uint16Array); } catch (e) {}
v24[740] = v24;
Uint32Array.prototype = Uint32Array;
const v28 = new Uint32Array(257);
v28[139];
[232686.3645233307,-1000000.0,-533481.3723080459,1000000.0,-833.7210303461529,-4.0,311909.32273606886];
[-3.0,-2.150534595556195,1000.0,181.36440964778376];
[0.04798178047611934,0.4141282290909274,Infinity,1.7976931348623157e+308,131574.89074718533,-2.0];
const v33 = [];
function f34() {
    const v36 = -v33 && v33;
    const v37 = -v36;
    v37 % v37;
    return v36;
}
%PrepareFunctionForOptimization(f34);
let v39 = f34();
v39--;
%OptimizeFunctionOnNextCall(f34);
const v41 = f34();
v41 - v41;
