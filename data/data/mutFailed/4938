[-1073741824,127,-2147483647,687331041,564892552,-65535,15928,31002,2];
const v1 = [-1855572791,-1,-273299434,9223372036854775807,-256,-9007199254740990,129,1011439294,65537,2];
const v2 = [4294967295,-10014,13,10000,65535,-65536,8];
const v5 = new Int8Array(8);
const v7 = 935 % 935;
Float64Array.name = Float64Array;
const v9 = new Float64Array(935);
function f10() {
    function f11(a12) {
        Math.tanh("1");
        return v7;
    }
    return f11;
}
function f16(a17) {
    v7 / v1;
}
Object.defineProperty(v9, "constructor", { writable: true, configurable: true, get: f10, set: f16 });
const v19 = v9?.constructor;
try { new v19(Int8Array, v2, v2); } catch (e) {}
try { new BigUint64Array(v2, v5, Int8Array); } catch (e) {}
const v24 = new BigUint64Array(4);
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    function f27() {
        return f16;
    }
    Object.defineProperty(this, "constructor", { configurable: true, get: f27 });
    const v28 = this?.constructor;
    try { new v28(); } catch (e) {}
}
new F25();
const v31 = new F25();
v31.e = v31;
const v32 = new F25(8, 935);
v32.e = v32;
v32.b = 935;
class C34 {
    static get b() {
    }
    static 182 = F25;
    static g;
    static #b = v31;
}
new C34(8, v24, v31);
new C34();
const v38 = new C34();
const v39 = v38?.constructor;
v39.toString = f16;
try { new v39(); } catch (e) {}
try {
    v32.b = v38;
} catch(e41) {
}
const v43 = 6.921221993207333e+307 <= C34 ? 6.921221993207333e+307 : C34;
let v44;
try { v44 = C34(4, v43); } catch (e) {}
try { v44(); } catch (e) {}
