new Int8Array(7);
3 >>> 3;
const v6 = new Uint16Array(3);
const v7 = v6.reverse();
const v9 = 4.0 - 4.0;
v9 + v9;
56 | 56;
const v14 = new BigUint64Array(56);
try { v14.set(v7); } catch (e) {}
class C16 {
    constructor(a18, a19, a20, a21) {
        let v23 = 268435439;
        v23--;
    }
}
const v28 = new Uint8Array(255);
v28[247];
class C30 extends Uint8Array {
    #n(a32, a33) {
        function F36(a38, a39, a40) {
            if (!new.target) { throw 'must be called with new'; }
            const v42 = new Int8Array();
            v42.buffer.slice(a39, a39).transferToFixedLength();
        }
        new F36(F36, F36, F36);
        new Uint8ClampedArray(552);
        new Int32Array(3550);
        new BigInt64Array(165);
        return a33;
    }
}
try { new C30(); } catch (e) {}
new C30();
const v56 = new C30();
v56.byteLength = v56;
let v57 = 2.174525112539174e+307;
v57++;
%VerifyType(v57);
let v59 = 352693014;
v59++;
const o62 = {
    [v57]: v59,
    get g() {
    },
    "g": v57,
};
const v63 = new C30();
function f64() {
}
class C65 {
}
C65.d = C65;
const v66 = new C65();
const v67 = v66?.constructor;
try { new v67(); } catch (e) {}
class C70 {
    static {
        try { new this(); } catch (e) {}
        let v73;
        try { v73 = this.bind(56); } catch (e) {}
        try { v73(); } catch (e) {}
        for (let v75 = 0; v75 < 25; v75++) {
            function f76(a77, a78, a79, a80) {
                for (let v81 = 0; v81 < 10; v81++) {
                    v81 * v81;
                    C65.__proto__ = Date;
                }
            }
            try { f76(BigUint64Array, v66, f76, f76); } catch (e) {}
            try { ("atan2").match(2.220446049250313e-16); } catch (e) {}
            try { v63["atan2"](2.220446049250313e-16, 30492, 30492); } catch (e) {}
            let v90 = "atan2" ** "-176972982";
            --v90;
            const v92 = f76?.constructor;
            v92.length = v92;
            let v93;
            try { v93 = new v92(255); } catch (e) {}
            try { v93.toString(); } catch (e) {}
            for (let v95 = 0; v95 < 5; v95++) {
                v95 + v95;
                f76();
                Int8Array.e = Int8Array;
                const v100 = new Int8Array(3);
                new Uint8ClampedArray(v100);
            }
        }
    }
}
try { C70(); } catch (e) {}
