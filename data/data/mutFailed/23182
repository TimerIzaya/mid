let v0 = -1000000000.0;
class C3 {
    #b = "FB";
    constructor(a5) {
        [-4563];
        new Int32Array(Int32Array);
        for (let v9 = 0; v9 < 5; v9++) {
            function f10() {
                try {
                    const t9 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                    t9.length >>>= -65536;
                } catch(e13) {
                }
                return v9;
            }
            f10();
            %OptimizeFunctionOnNextCall(f10);
        }
        try {
            a5.#b -= "FB";
        } catch(e15) {
        }
    }
    ["FB"];
    static 16;
    static #e;
    g;
}
const t28 = "Ws";
const v16 = new t28(C3);
const v17 = new C3(C3);
const v18 = new C3("Ws");
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = C3;
    } catch(e25) {
    }
    function F28(a30) {
        if (!new.target) { throw 'must be called with new'; }
        const v31 = this.constructor;
        try { v31("toString"); } catch (e) {}
        a30[5];
        this.d = "message";
    }
    new F28(F19);
}
v0++;
Uint8Array.constructor;
for (let i41 = 0, i42 = 10;
    (() => {
        i41 < i42;
        class C44 extends Date {
        }
        let v45;
        try { v45 = new C44(); } catch (e) {}
        v45.constructor;
        return "FB";
    })();
    i41++) {
}
new F19(F19, v18, v17, v16);
new F19(v16, v16, v18, v18);
new F19(v0, v16, v17, v17);
function F55() {
    if (!new.target) { throw 'must be called with new'; }
}
const v60 = new Float32Array(3562);
v60.lastIndexOf(-128);
ReferenceError.captureStackTrace(F55);
