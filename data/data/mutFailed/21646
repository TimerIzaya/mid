const v0 = [];
class C1 {
    #c = C1;
    static 2706;
    valueOf() {
        function F3(a5) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a5;
            } catch(e6) {
            }
        }
        new F3(C1);
        new F3(v0);
        new F3(F3);
        let v10;
        try { v10 = this(this, this, this, this); } catch (e) {}
        try {
            v10.#c = this;
        } catch(e11) {
        }
        return v10;
    }
    static [v0];
}
const v12 = new C1();
const v13 = (a14, a15) => {
    a14 |= a15;
    return v12;
};
v0(v13, v0);
new C1();
const v18 = new v0();
class C22 {
    constructor(a24, a25, a26) {
        delete v18?.b;
        const v28 = [-1,257,-1007368077];
        const v30 = v0.__proto__?.[4];
        let v31;
        try { v31 = a24.n(v30, 65535, v30); } catch (e) {}
        v28[0];
        v31[Symbol.split];
        [15,536870887,-6250,-14004,33311,8,0,-11,36364,62543];
        [-9007199254740991];
        try { a26(a24); } catch (e) {}
    }
    static [-1929982347];
    #b = -1929982347;
    static #d;
    static [C1];
}
const v39 = new C22(65535, -1929982347, v18);
const v40 = new v39(65535, 65535, v0);
new C22(65535, 65535, v40);
const o53 = {
    toString(a43, a44) {
        function F45(a47, a48, a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
            let {"c":v51,} = a44;
        }
        const v52 = new F45();
        return v52;
    },
};
try { o53.toString(); } catch (e) {}
