const v2 = new Uint16Array(128);
10 == 10;
const v6 = new Uint8ClampedArray(10);
new Uint16Array(2464);
class C13 {
    static {
        try { this(); } catch (e) {}
        const v16 = 128 instanceof Uint16Array;
        v16 || v16;
        const v18 = v2[7];
        v18 - v18;
        const v20 = this || 1489760522n;
        try { new v20(); } catch (e) {}
        this.b &= 128;
    }
    get g() {
        function f23(a24) {
            function f26(a27) {
                a24.f <<= a24;
                let v31;
                try {
                const t0 = 10000n;
                v31 = t0(2n, -536870912n);
                } catch (e) {}
                const t24 = [v31,v31,v31];
                delete t24[67];
            }
            this.onmessage = f26;
            try { a24(f26, this, this); } catch (e) {}
        }
        const v37 = [1489760522n];
        const o38 = {
            "arguments": v37,
            "type": "function",
        };
        Math.expm1(Math);
        const v41 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v42 = 0; v42 < 5; v42++) {
            function f43() {
                try {
                    v41.forEach();
                } catch(e45) {
                    e45.a = e45;
                }
                const v47 = Symbol.toPrimitive;
                Symbol.for(v47.description);
                v47.description;
                Symbol.for();
                return v47;
            }
            f43();
            %OptimizeFunctionOnNextCall(f43);
        }
        new Worker(f23, o38);
        return Uint16Array;
    }
}
new C13();
new C13();
new C13();
let v58 = /a|b/vdy;
let v59 = /7Z(?:a?)+/gudsy;
v59.dotAll;
const v61 = /\coQ/gdy;
function F62(a64) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(F62); } catch (e) {}
    let v67 = 1000000000000.0;
    v67++;
    const v69 = v67--;
    12 / 12;
    -4294967296 * -4294967296;
    const v75 = new Uint16Array(12, -4294967296, v69);
    v75[5] = v75;
    const v76 = new Float32Array(v75, -4294967296);
    try { v76.with(Float32Array, Float32Array); } catch (e) {}
    try {
        this.e = v58;
    } catch(e78) {
    }
    try {
        this.g = a64;
    } catch(e79) {
        v61.dotAll >>= e79;
        let v80;
        try { v80 = e79(e79, v59); } catch (e) {}
        v59 = v58;
        return e79;
        v58 = v80;
    }
}
const v81 = new F62(v58);
const v82 = new F62(v59);
const v83 = new F62(v58);
2147483647 % 2147483647;
Float64Array.BYTES_PER_ELEMENT = Float64Array;
new Float64Array(2147483647);
const v88 = /ha$\P{Decimal_Number}+/vdisy;
const v89 = v88.constructor;
try { new v89(v58, v81); } catch (e) {}
const v91 = v89.$7;
try { v91.trimStart(); } catch (e) {}
class C93 extends F62 {
    static {
        super[v83] = v58;
        let v95;
        try { v95 = v59(F62); } catch (e) {}
        super.g |= v58;
        const v97 = super[v61.exec(v95)];
        try { v97(this, v97); } catch (e) {}
        v61[4];
        const v101 = v83 === v95 ? v83 : v95;
        try {
            v95.c = this;
        } catch(e102) {
            e102.message = e102;
            const o107 = {
                [e102]: this,
                "f": v101,
                m(a104) {
                    super[-4.0] = delete v88[2];
                    return -4.0;
                },
            };
            v82[Symbol.match];
        }
    }
    #h;
    static #g;
    g = v81;
    #b;
}
try { new C93(); } catch (e) {}
const v112 = [4294967296,-57202,256,48562,333990054];
try { Uint32Array.apply(2464, v112); } catch (e) {}
const v116 = Promise.reject(Promise);
const v117 = new C93();
const v118 = new C93();
try { ("536870888").normalize(); } catch (e) {}
const v121 = ("536870888")[3];
v121 == v121;
const o123 = {
};
const v124 = o123.constructor;
try { v124.getOwnPropertyDescriptors(v116); } catch (e) {}
const v126 = v124(128);
try { v126.toString(2464); } catch (e) {}
v126.toExponential(v121);
new C93();
const v130 = [-1077398797,2,1671415104,4294967297];
function f131(a132, a133, a134) {
    function f136(a137) {
        ++a137;
    }
    this.onmessage = f136;
    try {
        this.fuck(v83, a133);
    } catch(e140) {
    }
}
f131.caller = f131;
const v143 = [C93,v82,v58];
const o144 = {
    "arguments": v143,
    "type": "function",
    [v61]: "function",
    "d": v118,
    __proto__: v118,
    [f131]: v117,
    "e": v130,
};
[-5,-65536,-65537,14311,14,255];
function f146(a147, a148) {
    3 >>> 3;
    const v153 = Math.imul(3, a147 % a147);
    v153 != v153;
    Math.log(3);
    a148.constructor(a148);
    return f146;
}
const v157 = f146?.constructor;
try { new v157(v6); } catch (e) {}
new Promise(f146);
