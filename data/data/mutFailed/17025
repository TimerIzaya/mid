new BigUint64Array(11);
1024 - 1024;
Float64Array.length;
const v7 = new Float64Array(1024);
const v10 = new Int16Array(10, Int16Array, v7);
function f11() {
    function F12(a14, a15) {
        if (!new.target) { throw 'must be called with new'; }
        function f16() {
            try { ("NFKD").localeCompare(this); } catch (e) {}
        }
        Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f16 });
    }
    const v21 = new F12(F12, F12);
    class C22 {
        static [v21];
    }
    return C22;
}
v10[Symbol.toPrimitive] = f11;
v10[0] = v10;
/(?:ab)|cde+/g;
/gHfoo(?<!bar)baz/guims;
const v27 = /(?:a*)+/udy;
2 | 2;
let v34 = 14;
v34++;
Float32Array.name = Float32Array;
9007199254740991 / 9007199254740991;
try { ("p").fontcolor(2); } catch (e) {}
"p" + -13;
for (let v50 = 0; v50 < 5; v50++) {
    function f51() {
        function f53(a54, a55, a56, a57) {
            const o61 = {
                n(a59, a60) {
                    return v50;
                },
            };
            o61.n(a57, o61, o61, a54, v50);
            return v50;
        }
        for (let v63 = 0; v63 < 25; v63++) {
            f53(v63, f51, eval, v63);
        }
        eval();
        return f51;
    }
    f51();
    %OptimizeFunctionOnNextCall(f51);
}
10 | 10;
-([-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1]).pop(Date, v27);
