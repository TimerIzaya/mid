const v0 = [];
function f1(a2) {
    let [...v3] = v0;
    const v7 = new Uint8ClampedArray();
    const o12 = {
        [v0]: Float64Array,
        4: 6,
        "b": v0,
        [v7](a9, a10, a11) {
        },
    };
    return 6;
}
v0.toString = f1;
function f13() {
    const o19 = {
        ...v0,
        65537: v0,
        3: v0,
        [v0]: v0,
        get f() {
            const v15 = super[this];
            v15 + v0["some"](v15, this);
            return "some";
        },
    };
    return o19;
}
f13.valueOf = f13;
const v20 = f13();
function f21() {
    class C23 extends Int16Array {
    }
    return f13;
}
v20.valueOf = f21;
f13();
const v25 = f13();
function f26(a27, a28) {
    const v29 = [];
    try {
        v29.some();
    } catch(e31) {
        e31.stack;
    }
    return f21;
}
v25[Symbol.iterator] = f26;
try { new Int32Array(v25, 127, v25); } catch (e) {}
const v38 = new Int32Array(127);
try { v38.values(); } catch (e) {}
13 !== 13;
13 >> 13;
Object.defineProperty(Int16Array, 2, { writable: true, configurable: true, enumerable: true, value: v0 });
let v44;
try { v44 = new Int16Array(Int16Array, 13, Int16Array); } catch (e) {}
v44[2] = v44;
Int16Array.prototype = Int16Array;
new Int16Array(13);
let v46 = 3628;
v46 === v46;
v46++;
Float64Array.prototype;
const v51 = new Float64Array(v46);
try { v51.with(f13, v20); } catch (e) {}
let v54;
try { v54 = Math.clz32(v0); } catch (e) {}
v54 - v54;
let v56;
try { v56 = Math.exp(Int16Array); } catch (e) {}
v56 - v56;
-1000.0 < -1000.0;
-1000.0 + -1000.0;
Math.tanh(-1000.0);
