[204.58242707483032,3.6253236485159874,1.6707310945522735e+308,1000.0,-7.501585587231549e+307,1000000.0,-1.0,1.7976931348623157e+308];
const v1 = [-0.0];
[NaN,-2.220446049250313e-16,0.3477248553287563,1.0504887225780646,267620.1810306052];
new Uint8Array(1);
[] = 1;
("p").normalize("NFD");
try { ("p").normalize(); } catch (e) {}
new BigUint64Array(3443);
new Uint32Array(16);
const v16 = [520126.03439582814,827116.4087908485,-3.0];
const v18 = new Int16Array();
for (let v20 = 0; v20 < 25; v20++) {
    function f21() {
    }
    function f22(a23, a24, a25, a26) {
        const v27 = f21();
        const v29 = new Int8Array(v18);
        class C30 {
        }
        [-1024];
        for (let v32 = 0; v32 < 5; v32++) {
        }
        a25 in v18;
        const v36 = 0 <= 0;
        const v37 = new Int8Array(v16, v20, v20);
        for (const v38 in v37) {
            0 ^ v36;
        }
        BigUint64Array * 536870887;
        function f43(a44, a45) {
            return v27;
        }
        Object.defineProperty(v29.buffer, "constructor", { writable: true, configurable: true, value: f43 });
        new Int8Array();
        return v1;
    }
    for (let v48 = 0; v48 < 5; v48++) {
        f22();
    }
}
const v52 = [601759695];
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F55);
    const v60 = this.constructor;
    try { new v60(); } catch (e) {}
}
function f62() {
}
Object.defineProperty(F55, Symbol.toPrimitive, { enumerable: true, get: f62 });
new v52();
new Uint8Array();
