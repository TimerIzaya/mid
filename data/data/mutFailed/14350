new BigInt64Array(29);
const v4 = 436 & 436;
new BigUint64Array(436);
-254;
const v10 = new Uint8ClampedArray(254);
v10[179];
class C13 {
    static n(a15, a16, a17, a18) {
        c = a17;
        const o21 = {
            "maxByteLength": 25,
        };
        const v23 = new SharedArrayBuffer(25, o21);
        new Int32Array(v23);
        return a15;
    }
}
C13.b = C13;
const v26 = new C13();
const v27 = v26.__defineGetter__;
try { new v27(29, C13); } catch (e) {}
try { v27(v27, v26, C13, v27); } catch (e) {}
const v30 = [436,29,29];
const v31 = Reflect.construct(BigInt64Array, v30, BigInt64Array);
v30.length;
const v33 = [-4,1264442531,1073741824,1];
const v34 = [14,1611258384,1415164835,-5,850329669,9007199254740991,256];
[255,4,-9007199254740991,10000,2001855342,46271];
const v37 = 2147483648 >>> 2147483648;
const v41 = [Reflect,Reflect,Reflect,2147483648,v33];
Reflect.construct(v31, v41, BigUint64Array);
Reflect[-2];
function F44(a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -18258;
    } catch(e49) {
    }
}
const v50 = new F44(v41, v41, 436);
new F44(v50, v31, v37);
new F44(v4, v34, 16);
65536 !== 65536;
const v57 = [];
for (let v58 = 0; v58 < 25; v58++) {
}
for (let v59 = 0; v59 < 5; v59++) {
    const t47 = "p";
    t47[0] = "p";
    v57["p" || v59] = v59;
}
