function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = undefined;
    } catch(e3) {
    }
    try {
        this.f = undefined;
    } catch(e4) {
    }
}
const v5 = new F1();
new v5();
new F1();
[1.7199173331222077e+308,-8.477231850471515,-326.5657634251353,-948.2645400726233,1000000000.0,542.468309472705,Infinity,1.0,5.0];
[1.0,182.85782615647008,-5.0,-1.4597178032841622e+308,887750.4199285181,0.5567963867851168,-0.0,NaN,-4.0,0.7281260625078178];
[NaN,-5.0,-Infinity,2.220446049250313e-16];
~-9007199254740992;
function f4(a5, a6, a7) {
    const o8 = {
        __proto__: a7,
        ...a7,
    };
    return f4;
}
const v10 = new Float64Array(127);
v10[54];
new Uint8Array(64);
BigUint64Array.b = BigUint64Array;
const v17 = new BigUint64Array(2551);
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a20;
    try { this.propertyIsEnumerable(127); } catch (e) {}
    a20 >>> a20;
    a21 / a21;
    a22 << a22;
    -a23;
    try {
        this.g = 64;
    } catch(e29) {
    }
    try {
        this.f = 64;
    } catch(e30) {
    }
}
new F18(64, 64, 2551, 3.0);
const v32 = new F18(127, 2551, 64, Infinity);
const v33 = new F18(64, 2551, 64, 1.0);
let v34 = 253;
v34 | v34;
new Uint32Array(v34);
new Float64Array(1839);
let v41 = 242;
~v41;
const v43 = v41--;
v43 >> v43;
let v46;
try { v46 = BigInt64Array.apply(Float64Array, v32); } catch (e) {}
const v47 = new BigInt64Array(v41);
Object.defineProperty(v47, "f", { configurable: true, value: 3.0 });
v47.f = v47;
const v48 = /G?/vis;
let v49;
try { v49 = v48.toString(); } catch (e) {}
/kj/iu;
const v51 = /lxyz{0,1}?/mvgisyd;
v51.b = v43;
v51.b = v51;
class C52 {
    valueOf() {
    }
    o() {
        this.valueOf(this);
    }
}
Uint8ClampedArray.e = Uint8ClampedArray;
new Uint8ClampedArray(1203);
const v60 = new BigInt64Array(8);
v60[6];
const v63 = new Float64Array(2);
v63[1] = v63;
function f65() {
    return "next";
}
try { new f65(); } catch (e) {}
16 / 16;
const v69 = 16 ^ 16;
const v70 = -v69;
const v71 = [1000,-14,16,-11,-1413918991,-16,-374255446,-14,1000,10];
v71[Symbol.toPrimitive] = f4;
const v74 = v71.sort();
v74[Symbol.toPrimitive] = f4;
const v78 = new Float32Array();
const v79 = v78.constructor;
try { v79(v48, v48, v79); } catch (e) {}
const v82 = Symbol.toPrimitive;
const o84 = {
    [v82]() {
    },
};
o84.e = v49;
o84.e = o84;
let v85;
try { v85 = v74.toSpliced(v48, Uint8ClampedArray); } catch (e) {}
function f86(a87) {
    1203 >>> 1203;
}
Object.defineProperty(v85, "g", { writable: true, set: f86 });
v85.g = v85;
Set.e = v46;
Set.e = Set;
const v90 = new Set(v71);
let v91 = undefined;
v91 = v90;
[-9223372036854775807,1073741824,-65535,1945375758,4294967295,-9,-65537,1,-268435456];
9007199254740992n / 9007199254740992n;
const v95 = [];
const v96 = v95?.find;
try { v96.bind(f65); } catch (e) {}
try { new v96(v90); } catch (e) {}
const v99 = v95.groupToMap;
let v100;
try { v100 = new v99(); } catch (e) {}
const v101 = [9007199254740992n,f65];
let v102;
try { v102 = v101.entries(); } catch (e) {}
try { v102.next(); } catch (e) {}
const v104 = [v69];
try { v104.reverse(); } catch (e) {}
function f108() {
    const o109 = {
        "c": f108,
    };
    return o109;
}
-409.5445341345936 + -409.5445341345936;
const v113 = 2.220446049250313e-16 - 2.220446049250313e-16;
v113 >> v113;
const v115 = [2.220446049250313e-16,4.276454155698374];
const v116 = [v115,v115,2.220446049250313e-16,v115];
const v117 = [2.220446049250313e-16,-409.5445341345936];
function f118(a119, a120) {
    for (let v123 = 0; v123 < 10; v123++) {
        const v125 = 12306 ** 9007199254740991;
        Math.hypot(12306);
        Math.sqrt(v125);
        Math.sin(v125);
    }
    return Infinity;
}
v117.toString = f118;
function f129(a130, a131, a132) {
    a130[1] = a130;
    a132 / a132;
    new Int16Array(171);
    let v138 = 3666 - 3666;
    v138++;
    a131 !== a131;
    Date.toString = Symbol;
    Date.now();
    const v143 = [Date];
    Object.defineProperty(v143, "valueOf", { writable: true, configurable: true, value: f129 });
    v143[0];
    const v146 = 9 ** v143;
    v146 ^ v146;
    a132--;
    const o157 = {
        "h": a132,
        "a": a131,
        [a132](a150, a151, a152) {
        },
        "b": a132,
        "f": Infinity,
        ...Symbol,
        "a": "next",
        [a132](a154, a155, a156) {
        },
        1942: v117,
        "g": v117,
        ...v116,
    };
    return o157;
}
function f158(a159, a160) {
    try { v33.toString(2056527154, "next"); } catch (e) {}
    const v163 = [5.0];
    async function* f166(a167, a168, a169) {
        'use strict';
        const v174 = 4.387531868078238 | a167;
        await Math.atan2(-618199.1371965441, false);
        yield* v163;
        return v174;
    }
    return v70;
}
Object.defineProperty(f129, "constructor", { writable: true, enumerable: true, value: f158 });
const v177 = f129?.constructor;
try { new v177(v117); } catch (e) {}
const v179 = f129(v116, -409.5445341345936, -409.5445341345936);
const v181 = f129(v115, v117, 2.220446049250313e-16).b;
v181 & v181;
const o199 = {
    __proto__: v179,
    [Uint32Array]() {
    },
    "d": v100,
    "f": v82,
    valueOf(a186) {
        return f65;
    },
    [8]: 2.220446049250313e-16,
    [v71]: 2,
    "c": 3.0,
    ...v101,
    [v34](a188, a189, a190) {
        v78 > v17 ? v78 : v17;
        typeof v17 === "object";
        try {
            v34 = 2056527154;
        } catch(e196) {
        }
        return this;
    },
    126: undefined,
    ...v179,
    valueOf(a198) {
    },
    "type": "next",
    "h": v82,
    "a": "next",
};
o199.g;
function f202() {
    const o207 = {
        valueOf(a206) {
            return f202;
        },
        __proto__: f202,
        [-52276]: -410.8373818683839,
    };
    return o207;
}
const v208 = -560.0308879674441 !== -560.0308879674441;
v208 && v208;
function F210() {
    if (!new.target) { throw 'must be called with new'; }
    class C212 {
        constructor(a214, a215, a216) {
        }
    }
}
Object.defineProperty(v104, 2081, { configurable: true, enumerable: true, value: 2056527154 });
