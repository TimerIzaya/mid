const v0 = [-1578154478];
const v1 = [-536870912,540045297,24624,-2147483649,-16,10,1339250122,12];
[-2059199476,0,-3,-1];
const v3 = /R/umsy;
const v4 = /a\b!/gv;
const v5 = /\x60/gd;
function f9() {
    return v3;
}
function f13(a14, a15, a16, a17) {
    const o23 = {
        "f": v4,
        get g() {
            f9();
            %PrepareFunctionForOptimization(f9);
            this();
            f9();
            %OptimizeMaglevOnNextCall(f9);
            f9();
            return v1;
        },
        ...a14,
        "d": a17,
        "toPrimitive": a15,
        ...a17,
    };
    return o23;
}
const v24 = f13(7996, v3, v1, f9);
f13(7996, v5, v0, v0);
f13(44286, v4, v0, 44286);
for (let v27 = 0; v27 < 25; v27++) {
    const v28 = [601759695];
    const v29 = [1073741824,1073741823,1376142744,1073741825];
    function f30(a31, a32, a33, a34) {
        try { v29["4duf"](..."4duf", a34, ...v28, ...v29); } catch (e) {}
        const v39 = Symbol.isConcatSpreadable;
        const v40 = v39.description;
        const v41 = Array(a33);
        try { v41.groupToMap(v39, v40, f30, v41, v39); } catch (e) {}
        return v28;
    }
    for (let v43 = 0; v43 < 5; v43++) {
        v24();
    }
}
