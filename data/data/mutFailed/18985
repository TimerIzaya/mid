const v1 = new WeakSet();
class C2 {
    get g() {
        try {
            this.h = v1;
        } catch(e4) {
        }
        return v1;
    }
    1116 = WeakSet;
    static o(a6, a7) {
        let v5 = this;
        v5 = WeakSet;
        function F8() {
            if (!new.target) { throw 'must be called with new'; }
            for (let v10 = 0; v10 < 50; v10++) {
                v10 << v10;
                for (let v12 = 0; v12 < 25; v12++) {
                    this["p" + v12] = v12;
                }
            }
        }
        for (let i17 = -4294967297, i18 = 10;
            i17 < i17;
            (() => {
                i17++;
                i18--;
                Uint8ClampedArray.prototype;
                function F27(a29) {
                    if (!new.target) { throw 'must be called with new'; }
                    a29 ^ a29;
                    const v31 = this?.constructor;
                    try { new v31(3n); } catch (e) {}
                }
            })()) {
            a7[i17] = v5;
        }
        return a6;
    }
}
const v35 = new C2();
const v36 = new v35();
const v37 = new C2();
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a44;
    } catch(e47) {
        const o48 = {
        };
        const o49 = {
            [o48]: o48,
        };
    }
}
new F41(v37, -24041, C2, -3);
new F41(C2, -24041, v36, -24041);
const v52 = new F41(WeakSet, -24041, v36, -3);
[0.544359965054656,-2.2250738585072014e-308,-6.307326348903168e+307,1000000.0,-2.0,-961322.0826999993,3.0,-187653.58271354332,-44.415716787339306];
[1000000000000.0,735734.1600279629,1.4875324132940643e+308,-1.0];
[809.2610454317248,-82718.84566770552,-1.7976931348623157e+308,1.621483722889636e+308,3.839629145125187];
class C56 {
}
const v58 = 127 & 127;
(127).constructor;
class C60 extends C56 {
}
new v52();
const v64 = new Int8Array(16);
v64.toSorted();
new Int8Array(3663);
function f68() {
}
v58.toString().toLocaleLowerCase();
function f72(a73, a74, a75, a76) {
    const v77 = typeof a74;
    const v79 = a73.repeat;
    let v80;
    try { v80 = v79(v77, v79, f72); } catch (e) {}
    return v80;
}
%OptimizeFunctionOnNextCall(F41);
