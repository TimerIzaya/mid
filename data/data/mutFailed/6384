let v1 = -13;
class C3 {
    p(a5, a6) {
        try { a5(9007199254740991, a5, a5, 9007199254740991, v1); } catch (e) {}
        v1 *= (a5 = -9);
        typeof a5 === "function";
        return 9007199254740991;
    }
    static [9007199254740991] = -9;
    static h;
}
const v11 = new C3();
const t12 = -9;
new t12();
const v13 = new C3();
class C14 extends C3 {
    static g;
    [-9];
    #n(a16, a17, a18, a19) {
        const v20 = super[9007199254740991];
        v13[6] = C3;
        const v22 = [a19,a19,a17,[v20,v11,a16]];
        [v22,v11,v22,v22,v20];
        return 9007199254740991;
    }
    f = v1;
}
new C14();
new C14();
new C14();
class C27 {
}
const v28 = new C27();
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    class C35 {
    }
    const v36 = new C35();
    const v37 = new C35();
    const v38 = new C35(C14);
    function F39(a41, a42, a43, a44) {
        if (!new.target) { throw 'must be called with new'; }
        const v45 = this.constructor;
        try { new v45(Date, Date, a41, Date); } catch (e) {}
        a42[2147483648] = a42;
        a44[2147483648] = a44;
    }
    new F39(C35, v37, v36, v37);
    new F39(v37, v37, v38, v36);
    new Int8Array(1159);
    const v53 = new Uint8ClampedArray();
    for (const v54 in 1159) {
        const v55 = a31[1];
        const v56 = v28[2];
        try { v53["forEach"](...v56, v55, ..."forEach"); } catch (e) {}
    }
}
new F29();
