let v3 = -1000.0;
v3--;
1000000000.0 + 1000000000.0;
~536870912;
~128;
let v14 = 5.0;
v14 + v14;
const v16 = v14--;
v16 + v16;
-4.542304792320118e+307 - -4.542304792320118e+307;
class C20 {
    c = -65535;
    d = v3;
    constructor(a22, a23) {
        const v24 = this?.__defineSetter__;
        try { new v24(-4.542304792320118e+307, C20); } catch (e) {}
        a22 + a22;
        a23 >> a23;
        a22 + a22;
        this | a23;
        SharedArrayBuffer.prototype = SharedArrayBuffer;
        const v32 = 2791 - 2791;
        v32 % v32;
        const o34 = {
            "maxByteLength": 2791,
        };
        const v36 = new SharedArrayBuffer(127, o34);
        Float64Array.e = Float64Array;
        for (const v38 in this) {
            try { v38.trimStart(); } catch (e) {}
        }
        Array(4087);
        return 4087;
        new Float64Array(v36);
    }
    static #f;
}
const v44 = new C20(-2507, -4.542304792320118e+307);
v44.c = v44;
const v45 = new C20(9007199254740990, v3);
v45.c = v45;
new C20(536870912, 1.0386484651595691e+308);
9 % 9;
9 ^ 9;
const v55 = /a[^a]/vim;
v55.dotAll = v55;
/[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/uisy;
const v57 = /[[\ca]+]/gvisy;
function f58(a59, a60) {
    try { a60.constructor(a59, a59); } catch (e) {}
    function F62(a64, a65, a66, a67) {
        if (!new.target) { throw 'must be called with new'; }
        function f68() {
            return F62;
        }
        class C69 extends f68 {
            constructor(a71) {
                super();
                for (let v72 = 0; v72 < 25; v72++) {
                    this["p" + "p"] = v72;
                }
            }
        }
        new C69();
    }
    return F62;
}
v57.constructor = f58;
const v76 = v57?.constructor;
try { v76(536870912, v76); } catch (e) {}
let v78;
try { v78 = new v76(-4.542304792320118e+307, v57); } catch (e) {}
v78.arguments = v78;
try { ("1238837921").toLocaleUpperCase(); } catch (e) {}
try { ("byteOffset").toLocaleLowerCase(); } catch (e) {}
for (let [v84] of "Opx24") {
    try { v84.charAt("Uq"); } catch (e) {}
    try { Set.toString(); } catch (e) {}
    const v88 = new Set();
    function F89(a91, a92) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a91;
        } catch(e93) {
            for (let [v94,v95] of a91) {
            }
        }
        try {
            this.h = v88;
        } catch(e96) {
        }
        try {
            v88[this];
            ([WeakSet,WeakSet,WeakSet]).copyWithin();
            function f101(a102, a103, a104) {
                return f101;
            }
            try {
                new F89();
            } catch(e106) {
            }
            this.b = f101;
        } catch(e107) {
        }
    }
}
