function f0() {
    function F1() {
        if (!new.target) { throw 'must be called with new'; }
    }
    [F1,F1,F1];
    class C4 {
    }
    new C4();
}
const v8 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v9 = [601759695];
const v10 = [1073741824,1073741823,1376142744,1073741825];
function f11(a12, a13, a14, a15) {
    ~-4294967295;
    const o25 = {
        ...v9,
        ..."Vre",
        "c": v9,
        84: arguments,
        ..."Vre",
        valueOf(a22, a23) {
            return a23;
        },
        __proto__: f0,
        [v9]() {
        },
        ..."Vre",
        4: "-1073741824",
        5: -4294967295,
        6: -268435456,
    };
    o25[6] = o25;
    %OptimizeFunctionOnNextCall(arguments);
    try { v10["find"](..."find", a15, ...v9, ...v10); } catch (e) {}
    return a13;
}
for (let v28 = 0; v28 < 10; v28++) {
    f11();
    [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
    v9.includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
    try { new Uint8ClampedArray(f11, f11, Uint8ClampedArray); } catch (e) {}
    const v36 = new Float32Array(Uint8ClampedArray, Uint8ClampedArray, Float32Array);
    v36[0] = v36;
}
const v40 = new WeakSet();
const v42 = new Date();
class C43 {
    static 3143;
    constructor(a45, a46) {
        this.b = this;
        const o47 = {
        };
        Proxy.e = Proxy;
        const v49 = new Proxy(this, "e");
        v49.h;
        v49[31876] = v49;
    }
    h;
    #c;
    /*
    constructor(a52, a53) {
        f0?.h;
        super.g;
        const v56 = this.constructor;
        try { new v56(a52); } catch (e) {}
        Math.atan2(this, this);
    }
    */
    toString(a61, a62, a63) {
        for (let v64 = 0; v64 < 32; v64++) {
            v42["p" + v64] = v64;
        }
        return f0;
    }
    #g = "m";
    b = v40;
    static #e = Date;
}
new C43();
new C43();
new C43();
~-128;
let v75 = 2136873598;
v75--;
const t83 = v75.constructor;
const v79 = t83().toExponential();
try { v79.link(v8); } catch (e) {}
function f81() {
    const o82 = {
        6: -128,
        "maxByteLength": 11,
        "type": "-1073741824",
        "type": "-1073741824",
        ...v8,
    };
    o82.f = o82;
    return o82;
}
f81.caller = f81;
new URIError();
