const v0 = [];
function f1() {
    return v0;
}
const v4 = 2n ^ 2n;
v4 % v4;
const v6 = 2n % 2n;
const v8 = [v6,f1,2n];
try { v8.map(v0); } catch (e) {}
const v10 = [v8,f1,v8];
v10[1] = v10;
let v11 = [-13n,-13n,f1,v10,-13n];
try { v11.map(v0); } catch (e) {}
function f13() {
    return v8;
}
const v15 = ([9,3,2147483649,-59840,4])?.find;
try { new v15(v6); } catch (e) {}
const v17 = [-324153,0,-16261,14];
Math.LN10;
let v22 = !f13;
v22 && v22;
Math.atan(v22);
--v22;
const v26 = v11--;
const v27 = v22 >>> v10;
const v28 = Math.cosh(v27);
v26 ** v27;
v17[3] = v17;
const v30 = [-8559,10000,10,49230,-12,-16,-268435456];
let v31;
try { v31 = v30.entries(); } catch (e) {}
try { v31.next(); } catch (e) {}
const v33 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
class C35 extends Array {
}
const v36 = C35.prototype;
try { v36.findLast(v6); } catch (e) {}
async function f38(a39, a40) {
    a39 >>> a39;
    try { ("NFKC").codePointAt("NFKC"); } catch (e) {}
    ("function").normalize("NFKC");
    return await a40;
}
f38(v28, v36);
const v48 = new C35();
let v49;
try { v49 = v48.fill(-13n); } catch (e) {}
try { v49.fill(4.129102406633553); } catch (e) {}
function f51(a52) {
    return a52;
}
f51.g = f51;
let v53;
try { v53 = f51(Array); } catch (e) {}
try { new v53(v10); } catch (e) {}
f51.d = f51;
v48.constructor = f51;
v48.concat(v33);
