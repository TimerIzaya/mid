const v1 = new Map();
const v4 = ~1715789124;
v4 - v4;
const v7 = new v1(1715789124);
try { Float32Array.from(Int32Array); } catch (e) {}
Float32Array.name = Float32Array;
const v11 = new Float32Array(3);
3465 | 3465;
try { BigUint64Array.of(); } catch (e) {}
new BigUint64Array(3465, v11, v7, Float32Array);
const v17 = [];
function f18(a19) {
    try {
        v17.some();
    } catch(e21) {
        e21.b = a19;
        const v22 = e21?.constructor;
        let v23;
        try { v23 = new v22(3465); } catch (e) {}
        try { new v22(1715789124); } catch (e) {}
        e21.stack;
        try { v23.bold(); } catch (e) {}
    }
    return a19;
}
const v27 = f18(f18);
try { v27.a(Map); } catch (e) {}
v27.e = v27;
v17.toString = f18;
const o30 = {
    __proto__: 3465,
    [v17]() {
    },
};
try { o30.pop(); } catch (e) {}
o30.toString(f18);
