new Uint8Array(2769);
const o6 = {
    "type": "function",
};
function F7() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v9 = 0; v9 < 50; v9++) {
        v9 << v9;
        for (let v11 = 0; v11 < 25; v11++) {
            this["p" + v11] = v11;
        }
    }
}
new F7();
new Uint8Array(811);
new Float64Array(231);
class C21 {
}
const v22 = new Uint8ClampedArray(14);
class C26 {
    static get b() {
        const o28 = {
        };
        new Proxy(v22, o28);
        return v22;
    }
    static #o(a32, a33, a34) {
        super[Uint8ClampedArray];
        delete v22[8];
        new Uint8Array(811, 2769, a34);
        const v38 = [536870912,-128,-9007199254740991,-1786345199,9007199254740992,4096,4096,211693692,46722,1687567383];
        v38[5] = v38;
        const t32 = [];
        t32[Symbol.toPrimitive] = Array;
        try {
            const o46 = {
            };
            new Uint8Array(o46);
        } catch(e48) {
        }
        return a33;
    }
}
new C26();
new C26();
new C26();
const v53 = [155533.8602852358,2.0];
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = /2a\sc/uds;
    function f58() {
        try { v57.test(v57); } catch (e) {}
    }
    this[2769597849] = this;
    this.constructor = Date;
    this.__lookupGetter__.bind();
    const v64 = Array(19793);
    function f65() {
        return Uint8Array;
    }
    function F66() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F66();
    const v69 = [1929306256,-35796];
    try { v69["36049"](); } catch (e) {}
    Object.defineProperty(v64, 15029, { configurable: true, get: f65 });
    for (const v72 of v64) {
        v53[658291203] = null;
        return v72;
        function F73(a75, a76) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(Date);
            const v78 = this.constructor;
            try { new v78(); } catch (e) {}
            try { this.constructor(); } catch (e) {}
        }
    }
}
const v81 = new F55();
const t80 = v81.constructor;
new t80();
function f86(a87) {
    const o93 = {
        __proto__: 2,
        "c": 2,
        "e": 536870889,
        213: a87,
        ...v81,
        "g": 2,
        p(a89, a90) {
            try {
                this.fuck(536870889, a87);
            } catch(e92) {
            }
            return this;
        },
    };
    return o93;
}
f86();
const t100 = "function";
t100();
%OptimizeFunctionOnNextCall(f86);
