const v0 = [0.43059375751373663,-910194.6826075858,-1.7976931348623157e+308,5.0,0.8254689289757148,0.19730866417905157];
const v1 = [-1.1210559017181097e+308,0.4662125620705868];
function f2() {
    return v1;
}
function f3(a4) {
    function F5(a7) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a7;
        } catch(e8) {
        }
        try {
            this.f = a4;
        } catch(e9) {
        }
        try {
            this.g = v1;
        } catch(e10) {
        }
    }
    const v11 = new F5(F5);
    new F5(v1);
    new F5(v11);
}
Object.defineProperty(v1, 3, { writable: true, configurable: true, get: f2, set: f3 });
const v14 = [1000000000000.0,586.9142070592266,1.0224608783688343e+308,0.013389575275177257,-337.5035051976183,1.0,763740.196809435,0.004733733532072737,-1000000000000.0];
function F15(a17) {
    if (!new.target) { throw 'must be called with new'; }
    a17[3] = a17;
    try {
        this.a = v14;
    } catch(e18) {
    }
    try {
        this.f = v14;
    } catch(e19) {
    }
}
new F15(v0);
let v21 = new F15(v1);
const v22 = new F15(v1);
v22.find = v22;
v22.a;
function f24(a25, a26) {
    try { a25.find(a25); } catch (e) {}
    const o35 = {
        10: a26,
        [v22]: v0,
        set g(a29) {
            ++v21;
            this + a25;
        },
        536870889: v14,
    };
    o35[536870889];
    return o35;
}
const v37 = f24(v0, v1);
f24(v22, v1);
f24(v21, v21);
const v42 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v42.valueOf = f3;
try { v42.map(F15); } catch (e) {}
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
try { v45.toLocaleString(); } catch (e) {}
function f48(a49, a50, a51, a52) {
    function f53(a54, a55) {
        function F56() {
            if (!new.target) { throw 'must be called with new'; }
            function f58(a59, a60) {
                const o61 = {
                };
                return o61;
            }
            const v62 = f58();
            function f63() {
                return this;
            }
            const v66 = new Float32Array(218);
            for (const v67 of v66) {
                const v68 = v67 >>> v67;
                v68 <= v68;
                Object.defineProperty(v62, Float32Array, { configurable: true, enumerable: true, get: f58, set: f63 });
            }
        }
        new F56();
        return a50;
    }
    a51.valueOf = f53;
    arguments.b = a52;
    const v72 = arguments?.constructor;
    try { new v72(a52); } catch (e) {}
    function f74() {
        -4294967295 & -4294967295;
        const o92 = {
            "c": -4294967297n,
            [522675525n](a80, a81) {
                try {
                } finally {
                }
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v44,
            valueOf(a83, a84) {
                return a51;
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v42,
            ...v44,
            "type": "Vre",
            ..."Vre",
            valueOf(a86, a87) {
                return a49;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a89, a90, a91) {
                return a49;
            },
            5: -4294967295,
            6: -268435456,
        };
        return "Vre";
    }
    f74();
    const v95 = new Int8Array();
    try { v95.toSorted(f24); } catch (e) {}
    const v97 = v95.buffer;
    v97.constructor = f53;
    v97.slice(2147483648);
    %OptimizeFunctionOnNextCall(f74);
    let v101;
    try { v101 = v45["find"](..."find", a52, ...v44, ...v45, ...522675525n); } catch (e) {}
    const v102 = v101 <= a51;
    v102 || v102;
    return arguments;
}
try { f48(-128, v37, v42, v45); } catch (e) {}
for (let v105 = 0; v105 < 5; v105++) {
    const v106 = f48();
    v106.b = 522675525n;
    v106.b = v106;
}
%PrepareFunctionForOptimization(f48);
f48();
%OptimizeFunctionOnNextCall(f48);
f48();
