new WeakMap();
const v8 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v9 = -4294967297n;
v9--;
const v11 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v12 = [601759695];
const v13 = [1073741824,1073741823,1376142744,1073741825];
function f14(a15, a16, a17, a18) {
    function f19() {
        try { ("Vre").codePointAt(); } catch (e) {}
        let v22 = Float64Array;
        v22 = a16;
        b = v12;
        v8.length;
        try {
            v13.forEach(a16);
        } catch(e25) {
        }
        const o36 = {
            "c": v9,
            "c": v12,
            valueOf(a27, a28) {
                return a27;
            },
            [v9](a30, a31, a32, a33) {
                eval();
            },
            "arguments": v11,
            256: a18,
        };
    }
    f19();
    %OptimizeFunctionOnNextCall(f19);
    return f14;
}
let v43 = new Uint8Array(130);
new BigInt64Array(1024);
new Uint8Array(153);
class C53 {
}
("vZa2U").normalize("z");
"ex7" <= Uint8ClampedArray;
const v59 = "boolean" + v43;
v43++;
v43 / v59;
BigInt64Array ^ v43;
const v64 = new Uint8ClampedArray(4096);
function f65(a66) {
    return f65;
}
const v69 = [v64];
const o70 = {
    "arguments": v69,
    "type": "function",
};
new Worker(f65, o70);
