class C3 {
    static g = -1789592791;
    n(a5, a6) {
        const o7 = {
        };
        try {
            o7.h = a6;
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.h = a6;
            o9.f = this;
        } catch(e10) {
        }
        for (let i = 0; i < 10; i++) {
            /[xyz{1,}(O)]/udis;
        }
        Symbol.toPrimitive;
        try {
            const o14 = {
            };
            o14.h = a6;
            o14.f = this;
            o14.b = -1789592791;
        } catch(e15) {
        }
        try {
            const o16 = {
            };
            const v17 = [];
            [v17,v17];
            new Uint8ClampedArray(Date);
            o16.h = a6;
            o16.f = this;
            o16.g = -1789592791;
        } catch(e22) {
        }
        return 1000000.0;
    }
}
new C3();
new C3();
new C3();
const v28 = new Float64Array(1073741824);
for (let v31 = 0; v31 < 5; v31++) {
}
let v35;
try {
const t0 = 10000n;
v35 = t0(2n, -536870912n);
} catch (e) {}
const v37 = [v35,v35,v35];
v37.length &= 2;
const v38 = delete v37[67];
this.onmessage = v28;
function f40(a41) {
    return v38;
}
this.onmessage = f40;
class C48 {
    toString(a50, a51, a52) {
    }
}
class C54 {
}
const v55 = new C54();
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F56;
    const v62 = this.constructor;
    let v63;
    try { v63 = new v62(); } catch (e) {}
    this.b = 4.0;
    try {
        v63.c = v55;
    } catch(e64) {
    }
}
new F56();
const v66 = new Uint32Array(4);
function f67(a68) {
    for (let v69 = 0; v69 < 5; v69++) {
        const o73 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o73);
    }
    return -5;
}
v66[Symbol.toPrimitive] = f67;
new Uint16Array(12);
const v82 = new Uint32Array(26);
function f86() {
    return Math.asin(Math);
}
f86();
const v90 = /[(?:a*)+]/gudisy;
/O[\cz]/gvdi;
/xyz{1,32}?S\x60+/vs;
function f93() {
    const v96 = new Uint16Array(209);
    const v98 = [delete v82[v66],Uint16Array,v90,"o"];
    [v98,[v96]];
    class C102 {
        static #p(a104) {
            return a104;
        }
    }
    const v105 = new C102();
    const v106 = new C102();
    const v107 = [v105,v106];
    const v111 = [v105,[[1828032293,[]]],v107];
    function f112() {
        return v111;
    }
    Object.defineProperty(v98, "d", { writable: true, configurable: true, enumerable: true, value: Uint32Array });
    function F113(a115, a116) {
        if (!new.target) { throw 'must be called with new'; }
        function f117(a118, a119) {
            const v121 = ("0x2I").sup(F113, "0x2I", "0x2I", a119, f117);
            v121.toString(F113, v121, a118, this);
            return f117;
        }
        %PrepareFunctionForOptimization(f117);
        f117(F113, F113);
        %OptimizeFunctionOnNextCall(f117);
        f117(a116, a116);
    }
}
function f125(a126) {
}
function f127(a128, a129) {
}
v90.flags ^= 4;
try {
    new Int32Array([-4563]);
    const v133 = [601759695];
    const v134 = [427812215,61195,-2147483647,4096,-2147483647,30905];
    function f136(a137, a138, a139, a140) {
        Object.defineProperty(a139, "toString", { writable: true, configurable: true, enumerable: true, value: f136 });
        function f141() {
            const o155 = {
                "h": -1073741824,
                ..."Vre",
                valueOf(a146, a147) {
                    return 522675525n;
                },
                ..."Vre",
                "c": a140,
                5: -1073741824,
                6: -268435456,
                "b": v37,
                n(a149, a150) {
                    class C151 {
                    }
                    new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
                },
            };
            return a140;
        }
        f141();
        %OptimizeFunctionOnNextCall(f141);
        let v158;
        try { v158 = v134["find"](..."find", a140, ...v133, ...v134, ...522675525n); } catch (e) {}
        v158 <= a139;
        return a139;
    }
    f136(v134, v134, v133, 522675525n);
    for (let v161 = 0; v161 < 5; v161++) {
        f136(v133, v161, false, v161);
    }
    v90.exec("valueOf");
} catch(e165) {
}
class C166 extends f93 {
}
for (const v167 in C166) {
}
let v169 = 10;
v66 == !f125(536870888n, v66);
for (let v174 = 0; v174 < 50; v174++) {
}
for ((() => {
        ("5amlK")["o"];
        new Int8Array(3);
        const v181 = [601759695];
        const v182 = [1073741824,1073741823,1376142744,1073741825];
        function f184(a185, a186, a187, a188) {
            function f189() {
                return a185;
            }
            const v191 = new Int8Array();
            function f193() {
                const v196 = new Int32Array(47);
                return v196;
                return a187;
            }
            BigUint64Array.toString = f193;
            const v198 = BigUint64Array * 536870887;
            v191.buffer;
            const v200 = new Int8Array();
            try { v200.entries(); } catch (e) {}
            try { v182["find"](..."find", a188, ...v181, ...v182, ...522675525n); } catch (e) {}
            const v205 = new Uint8ClampedArray(v181, v198, 536870887);
            try { v205.findLast(v198); } catch (e) {}
            const o207 = {
                ...v205,
            };
            return f184;
        }
        for (let v208 = 0; v208 < 5; v208++) {
            f184();
        }
        const v210 = Math.round();
        v210 % v210;
    })();
    v169--;
    ) {
    [1000];
    const v215 = new f40();
    v215.constructor = f127;
    v215.constructor;
    function f217(a218, a219, a220) {
        function f222(a223) {
            a219[5] ||= Uint16Array;
        }
        this.onmessage = f222;
        const v226 = new SharedArrayBuffer(35);
        new BigUint64Array(v226);
    }
}
class C230 {
}
for (let v231 = 0; v231 < 10; v231++) {
    for (let v232 = 0; v232 < 32; v232++) {
    }
}
