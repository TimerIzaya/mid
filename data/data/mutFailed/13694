function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 268435441;
    } catch(e3) {
    }
    this[this] = F0;
    const v4 = this[this];
    try { v4(); } catch (e) {}
    Symbol.matchAll;
    this[Symbol.matchAll] = this;
    try {
        this.g = 268435441;
    } catch(e9) {
    }
}
new F0();
const v11 = new F0();
new F0();
let v14 = 856664.0260927186;
v14--;
let v19 = 10;
for (; v19--;) {
    v11[5];
}
/v(?:ab)|cdeVJPfoo(?<=bar)baz/iy;
const v27 = /X\cA/uimsy;
try { v27.compile("15", 9n); } catch (e) {}
/Z/gvdimy;
const v30 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
const v31 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
try { v31.entries(); } catch (e) {}
class C33 {
    constructor(a35, a36) {
        const v37 = this?.constructor;
        try { new v37(F0, 0.1112475754756389); } catch (e) {}
        super[v31] = v30;
    }
}
C33.f = C33;
try {
    const t41 = "c";
    t41.toString = v31;
} catch(e39) {
}
let v42 = 2.220446049250313e-16;
v42--;
const v44 = new C33(v30, v31);
v44.b = v44;
function f45(a46) {
    return C33;
}
try { new f45(f45); } catch (e) {}
const v50 = [v44];
v50[0];
const o52 = {
    "arguments": v50,
    "type": "function",
};
new Worker(f45, o52);
