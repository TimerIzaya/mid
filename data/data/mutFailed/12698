new Float64Array(257);
const v5 = new Float32Array(10);
Uint8Array.b = Uint8Array;
const v8 = new Uint8Array(0);
try { v8.copyWithin(v5, Float64Array); } catch (e) {}
180 + 180;
const v13 = new BigInt64Array(180);
v13[44] = v13;
let v14 = 1866;
v14--;
new BigInt64Array(v14);
Uint32Array.length;
new Uint32Array(3);
1000.0 >> 1000.0;
class C26 {
    constructor(a28) {
        a28 + a28;
        this[1762774961] = this;
        a28 % a28;
        function f31() {
            return a28;
        }
        let v32;
        try { v32 = f31.bind(this); } catch (e) {}
        v32.name = v32;
    }
    static [-1e-15] = 1000.0;
    ["name"] = -1e-15;
    f;
    [-1e-15];
    a;
    1762774961 = -1e-15;
    static ["name"];
}
C26.e = C26;
const v33 = new C26(1000.0);
const v34 = new C26(v33);
const v35 = v34?.__lookupSetter__;
try { new v35("name"); } catch (e) {}
new C26(-1e-15);
try { new WeakSet(); } catch (e) {}
new WeakSet();
new Set();
let v44 = undefined;
const o45 = {
};
o45.c = o45;
v44 = o45;
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.__lookupGetter__;
    try { new v48(this); } catch (e) {}
    const v50 = this.constructor;
    v50.caller;
    try { new v50(); } catch (e) {}
    let v53 = -128;
    v53--;
    this.g = v53;
}
new F46();
new Uint8Array();
