new Uint16Array(230);
new Uint8Array(12);
new BigUint64Array(57);
/[eg(?<=a)]/gi;
/aW/vms;
/[w(x)(x)(x)\3*]/gvdmsy;
const v12 = [-65537,-24143,-1293542190,14907,3476,-65083];
const v13 = [65537,3,-25535,268435440,-2,9007199254740990,1,-128,9007199254740990];
const v14 = [6,-536870912];
new Date();
function F17(a19) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a19;
    this.g = Date;
}
new F17(v12);
const v21 = new F17();
class C22 {
    constructor(a24, a25) {
        function f26(a27, a28, a29, a30) {
            const o31 = {
                "deleteProperty": Date,
                "ownKeys": a25,
            };
            return a24;
        }
        f26(v13, C22);
    }
    [C22];
    g = v21;
}
new F17();
new C22();
const v36 = new Uint16Array();
const v39 = new Float64Array(453);
const v40 = v39.toSorted();
const o41 = {
    "c": Float64Array,
    "f": v14,
    __proto__: v36,
};
Date();
Date.valueOf = v40;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3, a4) {
        function f5() {
            const o12 = {
                "h": -2.0,
                __proto__: 0.0,
                [-103121776]: -2.0,
                [0.0]: -103121776,
                "f": -103121776,
                257: -103121776,
                get d() {
                    BigUint64Array();
                },
            };
            return o12;
        }
        f5();
        const v14 = f5();
        function F15(a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = a17;
            this.e = v14;
        }
        new F15();
        return v14;
    }
    this[Symbol.toPrimitive] = f2;
    try {
        this.a = -12;
    } catch(e23) {
    }
    try {
        this.h = -12;
    } catch(e24) {
    }
}
function f25(a26, a27) {
    let v29 = 9n;
    const v30 = v29--;
    class C31 {
    }
    const v32 = new C31();
    function F33(a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
        this.__lookupSetter__();
        const v38 = a35.__lookupGetter__;
        try { new v38(v32, a35, v30, v38, a36); } catch (e) {}
        this.a = a36;
    }
    return v30;
}
F0[Symbol.toPrimitive] = f25;
const v42 = new F0();
new F0();
const v44 = new F0();
class C45 extends F0 {
    static a = F0;
    [v42] = v44;
    static 198 = F0;
    [F0];
    static #toString(a47) {
        function f48(a49, a50) {
            try { this["isFrozen"]("isFrozen", "isFrozen", "isFrozen", v42, a50); } catch (e) {}
            try {
                const t65 = "isFrozen";
                t65.toString = a49;
            } catch(e53) {
            }
        }
        new Promise(f48);
        return v44;
    }
}
new C45();
new C45();
new C45();
new Date();
new Int8Array(2755);
new Uint8Array(127);
new Int32Array(3644);
let v71 = 2.220446049250313e-16;
class C73 {
    constructor(a75) {
        this.fuck = a75;
        const o76 = {
            ...this,
        };
        try {
            v71 = -1.0;
        } catch(e77) {
        }
    }
    [v71];
    #e = -1.0;
}
const v78 = new C73(v71);
const v79 = new C73(167.17964779139515);
const v80 = new C73(167.17964779139515);
function F83(a85, a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
    a86.indexOf = a85;
    try {
        this.e = a86;
    } catch(e88) {
    }
}
const v89 = new F83(F83, v80, v78);
const v90 = new F83(v80, 2755);
const v91 = new F83(v71, v78, v78);
try {
    const v92 = [v89,128,v91,v78,167.17964779139515];
    v79.fuck(v92, -2058640984);
    class C94 {
    }
    new v92();
} catch(e97) {
}
function f98() {
    return v91;
}
try { v78["indexOf"](v91, v78, v90); } catch (e) {}
