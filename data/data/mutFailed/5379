function f3() {
    return 0.9643129199965627;
}
class C4 extends Infinity {
    set g(a6) {
        /foo(?=bar)baz/gvdms;
        /(a|b+)/dy;
        const v9 = /Zmk/udms;
        const o13 = {
            set b(a11) {
            },
            get d() {
                return this;
            },
        };
        this[this] = v9;
    }
    static [-94.1182619243408] = f3;
    static 128;
}
const v17 = new C4();
new C4();
if (-94.1182619243408 <= 0.9643129199965627) {
    ~-2147483648;
    const v25 = -(-2147483648);
    Math.sinh(0.9643129199965627);
    Math.asinh(-2147483648);
    -2147483648 + v25;
    Math.asinh(v25);
} else {
    let v32 = -65535;
    -C4;
    const v36 = [155533.8602852358,2.0];
    function F38() {
        if (!new.target) { throw 'must be called with new'; }
        this.__lookupGetter__.bind();
        for (const v45 of Array(19793)) {
            v36[658291203] = null;
        }
    }
    const v46 = new F38();
    const v47 = v46.constructor;
    new v47();
    class C51 {
        static 7;
        static [v47] = "string";
        #n(a53) {
            a53 = this;
            a53.e >>>= -35417;
            const o57 = {
                "execution": "sync",
                "type": this,
            };
            gc(o57);
            return this;
        }
    }
    let v59 = new C51();
    const v60 = new C51();
    let v61 = 0;
    do {
        v59 -= v60;
        v61++;
    } while (v61 < 5)
    ~-35417;
    --v32;
    -1 >> C4;
}
new C4();
class C71 extends SharedArrayBuffer {
}
new C71();
const v75 = new BigUint64Array(255);
v75.buffer.slice();
const v79 = new Float64Array(2277);
new Uint8ClampedArray([5.0]);
const v85 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const t76 = "toString";
t76[6] = "toString";
("boolean").split("toString");
function f93(a94, a95) {
    a95--;
    v79 | a94;
    const o111 = {
        "c": 15135,
        "a": 15135,
        "d": a94,
        __proto__: a95,
        "g": -1628878962,
        "type": "boolean",
        "a": a94,
        set b(a99) {
        },
        "g": 15135,
        "b": a95,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(v17);
                function f104() {
                    return f93;
                }
                const o106 = {
                    [f104]() {
                    },
                };
                [o106];
                v85.copyWithin(8, -268435456, -256);
            } catch(e110) {
            }
            return this;
        },
    };
    o111.g = o111;
    return o111;
}
new Float32Array(8);
new BigUint64Array(255);
const o135 = {
    set g(a118) {
        Math.sin(-268435456);
        function F123(a125, a126, a127, a128) {
            if (!new.target) { throw 'must be called with new'; }
            this.c = a125;
        }
        new F123(-2.0);
        const o133 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o133);
    },
};
Object.defineProperty(o135, Symbol.toStringTag, { enumerable: true, value: o135 });
