const v0 = /[ja\sc?]/u;
const v1 = /7N1wR?/guim;
const v2 = /a(?!b)/gdiy;
new BigInt64Array(13);
129 + 129;
try { Uint16Array.from(v0); } catch (e) {}
const v10 = new Uint16Array(129);
try { v10.slice(v2, v1); } catch (e) {}
-11 >> -11;
const v15 = new Uint8ClampedArray(-11);
try { v15.some(v15); } catch (e) {}
function f17(a18, a19, a20, a21) {
    a18 != a18;
    a19.a = a19;
    const o26 = {
        get g() {
            super.h = v2;
            this[Symbol.matchAll] = BigInt64Array;
            return this;
        },
        "e": a20,
        __proto__: v2,
        [v2]: a19,
        ...a21,
        "a": a20,
        "c": v0,
        "h": a20,
        "b": a20,
    };
    return o26;
}
f17(13, v1, v0, v2);
f17(13, f17, v1, v2);
f17(-11, v0, v1, v0);
const v30 = [601759695];
function f31(a32, a33, a34, a35) {
    a33 + a33;
    a34 !== a34;
    arguments[2] = arguments;
    function f39() {
        const o40 = {
            __proto__: a34,
        };
        o40[0] = o40;
        return f31;
    }
    const v41 = f39();
    %OptimizeFunctionOnNextCall(f39);
    return v41;
}
try { f31.toString(v1); } catch (e) {}
for (let v43 = 0; v43 < 5; v43++) {
    f31(v30, v43, v43);
}
