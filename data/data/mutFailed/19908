const v0 = [-88.83830040480836,-1000.0,-235.94036235389933,612109.8796272252,1.0927281907511203e+308,2.0,321410.7768492764,1.7976931348623157e+308,680657.7883940514];
[1000000000.0,7.537889039905519e+307,4.001134329047108,-8.680908518716515e+305,5.380956761166125,1000000.0];
const v2 = [-2.2250738585072014e-308,-1.072785420916429e+308,-117.12894567893397,-1000000.0,8.61601954663439,-1e-15,-1000.0];
const v4 = new WeakSet();
let v7 = new Array(255);
const v9 = new WeakSet();
class C10 extends WeakSet {
    static n(a12, a13) {
        !v9;
        function f15() {
            function f16(a17, a18, a19) {
                return a19;
            }
            const o22 = {
                "type": "function",
            };
            const v23 = new Worker(f16, o22);
            v23.terminateAndWait();
            v23.terminate();
            return o22;
        }
        v4[1024] || a12;
        let v28;
        try { v28 = v7.keys(); } catch (e) {}
        Object.defineProperty(v2, "g", { writable: true, get: Array, set: Array });
        class C29 {
            static toString(a31, a32) {
                const v34 = super[a32];
                try {
                    delete this[v34];
                    this[C29];
                } catch(e37) {
                }
            }
        }
        const v38 = new C29();
        function f40() {
            function f41(a42, a43) {
                const v44 = v38.constructor;
                v44 + v44;
                return f41;
            }
            f41(Uint8ClampedArray, Uint8ClampedArray);
            return f41;
        }
        v7 = v0;
        try { v28(this, v0, v7, v0, a13); } catch (e) {}
        return a12;
    }
    static c = WeakSet;
    e = v4;
    constructor(a49, a50) {
        const v51 = this.constructor;
        try { new v51(); } catch (e) {}
        this[255] >>>= 255;
    }
    static [-1] = v7;
    8;
}
new C10();
new C10();
new C10();
function f56() {
    const v59 = [8n,8n,8n,8n] > 255;
    let v60 = 0;
    for (let v61 = 0; v61 < 5; v61++) {
        return v0;
        function f62() {
            class C63 {
            }
            return C63.bind();
        }
        f62();
        f62();
        %OptimizeFunctionOnNextCall(f62);
        Array(36862);
        new Int8Array(Array(2048));
    }
    while ((() => {
            const v77 = [65537,1073741825,7841,-12,13];
            const v78 = [1073741823,4294967295];
            v78[1] = v78;
            function F79(a81, a82, a83) {
                if (!new.target) { throw 'must be called with new'; }
                const v84 = this.constructor;
                try { new v84(a81, a82, a82); } catch (e) {}
                const o86 = {
                };
                new gc();
                const v91 = Array(19793);
                const v92 = [v91,v91,v91,v91,v91];
                [[v92,v92,v92]];
                a81.pop();
                a83.g = a83;
            }
            new F79(v77, v78, v77);
            const v97 = new F79(v77, v78, WeakSet);
            new F79(v78, v78, v97);
            return v60 < 10;
        })()) {
        for (let v100 = 0; v100 < 5; v100++) {
            "n" + v100;
        }
        v60++;
    }
    return v59;
}
%PrepareFunctionForOptimization(f56);
function f104(a105, a106, a107, a108) {
    const v109 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
    const v110 = /QK/gvdimy;
    with (v109) {
        v110.__proto__ = length;
    }
    const v113 = new Int8Array();
    for (const v114 in v113) {
    }
    function F115(a117) {
        if (!new.target) { throw 'must be called with new'; }
        this.h = a117;
    }
    new F115();
}
f56();
%OptimizeFunctionOnNextCall(f56);
f56();
