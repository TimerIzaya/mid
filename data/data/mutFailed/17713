class C3 {
    constructor(a5) {
        let v4 = this;
        v4 += v4;
        try {
        const t0 = -400381.5565961945;
        t0(v4);
        } catch (e) {}
        super[a5];
        const v9 = a5 && super.h;
        for (let v10 = 0; v10 < 32; v10++) {
            v9["p" + v10] = v10;
        }
    }
    static #b = 1000000.0;
    a;
}
const v13 = new C3(1000000.0);
const v14 = new C3(-1.7976931348623157e+308);
new C3(1000000.0);
class C16 extends C3 {
    m(a18, a19, a20) {
        new BigInt64Array(10);
        new Uint16Array(127);
        new Uint32Array(83);
        return v13;
    }
    #f;
    static [1000000.0] = C3;
}
const v30 = new C16();
const v31 = new C16();
const v32 = new C16();
function f33(a34, a35, a36, a37) {
    const o66 = {
        toString(a39, a40, a41) {
            try {
                v30.__proto__ = v14;
            } catch(e42) {
            }
            return v14;
        },
        o(a44, a45, a46) {
            if (a37 !== a35) {
                v32[v13];
                [-982506867,-256,64,2147483647];
                Promise.d = Promise;
                function F51(a53, a54, a55, a56) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v57 = this.constructor;
                    let v58;
                    try { v58 = new v57(a53, a56); } catch (e) {}
                    typeof v58 === "symbol";
                }
                [10,5,268435441,-2147483649,-1074601583];
                [9,1000,1700421583,-128,-2147483649,46451,9];
            } else {
                try {
                    super.padStart(v14);
                } catch(e65) {
                }
            }
            return a34;
        },
    };
    return o66;
}
f33(-400381.5565961945, v31, -400381.5565961945, v30);
f33(-400381.5565961945, v13, -400381.5565961945, v13);
f33(-1.7976931348623157e+308, C3, -1.7976931348623157e+308, v31);
function f70() {
}
function f71() {
    return f70;
}
-520531413 >> -520531413;
-65536n + -65536n;
Map.prototype;
const v82 = new Map();
try { v82.set(Map, 512n); } catch (e) {}
try { new BigInt64Array(-9513n, f70, -9513n); } catch (e) {}
const v87 = new BigInt64Array(0);
let v88 = 1024;
let v89 = v88--;
v89++;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v88);
function F94() {
    if (!new.target) { throw 'must be called with new'; }
}
const v96 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try {
    v96.forEach(Float64Array);
} catch(e99) {
}
const v101 = -9513n != 1;
v101 || v101;
if (v101) {
    try {
        new BigInt64Array(127);
        Int16Array.name;
        let v107 = 10;
        v107--;
        new Uint8Array(64);
    } catch(e112) {
    }
} else {
    var h = v101;
}
5 ^ 5;
const v119 = new BigUint64Array(5);
let v120;
try { v120 = v119.join(v88); } catch (e) {}
try { v120.replace(Int32Array, f70); } catch (e) {}
Int32Array.length;
-f70;
try {
    v87.f = 0;
} catch(e126) {
    let v127 = 1000000000000.0;
    v127--;
    function f130() {
        return undefined;
    }
}
const v131 = new Int32Array(1);
v131[0];
v131[0] = v131;
new Int8Array(12);
const v136 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v137 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v138 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v138.join(-65536n); } catch (e) {}
function F140(a142, a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
    const v145 = this?.__lookupGetter__;
    try { new v145(12); } catch (e) {}
    a143 + a143;
    try { a144.find(a142); } catch (e) {}
    try {
        this.d = a142;
    } catch(e149) {
    }
    try {
        this.b = a144;
    } catch(e150) {
        const v152 = ("1866165091").normalize();
        class C155 {
            static #p(a157, a158) {
            }
            #h;
        }
        const v159 = new C155();
        const o160 = {
            "c": -922911.6474995338,
            242: -922911.6474995338,
            "g": v159,
            [v131]: v131,
            [C155]: v131,
            "a": -747634.1081113975,
            "h": v152,
            "f": v131,
        };
    }
}
const v161 = F140?.constructor;
v161.length = v161;
let v162;
try { v162 = new v161(12); } catch (e) {}
v162.arguments;
new F140(Int32Array, 12, v137);
const v165 = new F140(v137, 5, v138);
v165.length;
const v167 = new F140(v136, 12, v136);
v167[65536];
const o170 = {
};
for (let v171 = 0; v171 < 25; v171++) {
}
