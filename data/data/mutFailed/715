[-34,536870887,268435440,14525];
const v1 = [6,127,-128,13,65537,-13];
const v2 = [-536870912,-4608,-9223372036854775808,15];
let v4;
try { v4 = ("object").substring(v1, v2); } catch (e) {}
try { ("has").matchAll("object"); } catch (e) {}
new Int8Array(2);
8 & 8;
new Int16Array(8);
const v18 = new Uint16Array(3225);
v18[877];
for (const v20 of v4) {
    v20 ^ v20;
    v20[3] = 5n;
    const v23 = 9007199254740991 * v20;
    v23 | v23;
}
const v27 = new Int32Array(23);
v27[1];
1000000.0 >>> 1000000.0;
const v33 = [7,128];
const v34 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
v34[4];
const v36 = v34[4];
const v37 = v36 | v36;
const v38 = v37 / v37;
const v39 = [40213,422333454,47387,65536,-51830];
v39[2] = v39;
0 - 2;
0 - 0;
let v43 = 15135;
v43--;
try { gc(); } catch (e) {}
gc();
const v52 = new BigInt64Array();
try { v52.entries(); } catch (e) {}
try { ("boolean").slice(v18, v4); } catch (e) {}
let v56;
try { v56 = ("boolean").repeat(1000000.0); } catch (e) {}
v56[1322328];
const t39 = "toString";
t39[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
const v62 = -256 >> v38;
v62 ^ v62;
function f64(a65, a66) {
    a66++;
    const v68 = a66--;
    v68 | v68;
    a65 | a65;
    const o84 = {
        "c": v43,
        "a": v43,
        "d": a65,
        __proto__: a66,
        "g": -1628878962,
        "type": "boolean",
        "a": a65,
        set b(a72) {
        },
        "g": v43,
        "b": a66,
        get f() {
            super[1000000.0] = this;
            try {
                const v76 = new Int8Array(9);
                function f77() {
                    return f77;
                }
                const o79 = {
                    [f77]() {
                    },
                };
                [v76];
                v34.copyWithin(8, -268435456, -256);
            } catch(e83) {
            }
            return this;
        },
    };
    o84.g = o84;
    return o84;
}
let v85;
try { v85 = f64(v43, v43); } catch (e) {}
const v86 = v85[1000000];
f64(925.1427495594241, v33);
f64(317008.8127941969, -4);
f64(1000000.0, v34);
268435441n ^ 268435441n;
268435441n - 268435441n;
new BigUint64Array();
v86[2445191368] = 268435441n;
