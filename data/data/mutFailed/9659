const v2 = new Int32Array(64);
let v3 = 5;
const v4 = v3--;
const v6 = new Int8Array(v3);
let v9;
try { v9 = new Int8Array(v4, v4, v4); } catch (e) {}
try { v9(Int8Array, Int32Array, Int8Array, 9); } catch (e) {}
v3 << v9;
~-2245;
v9 ^ v4;
Math.sqrt(v4);
const v18 = new Int8Array(9);
try {
} catch(e19) {
} finally {
}
class C20 {
}
/(?<a>.)7Z(9q*)*/viy;
/\p{Nd}/gdims;
const v23 = /E[^123]/udy;
const v24 = [64,Int32Array,v3];
try { v24.concat(Int8Array); } catch (e) {}
let v26;
try { v26 = v24.toString(); } catch (e) {}
try { v26.link(v6); } catch (e) {}
const v28 = [Int8Array,v23,v24];
let v29;
try { v29 = v28.toString(); } catch (e) {}
[v2,v6,v24,Int32Array,v28];
const o33 = {
    "maxByteLength": 3952309630,
};
4294967296 | 4294967296;
let v36;
try { v36 = BigUint64Array(v23, v6, BigUint64Array); } catch (e) {}
BigUint64Array.name = BigUint64Array;
let v40;
try { v40 = v36(v3, v29); } catch (e) {}
try { v18.entries(...v40, v3, 64, ...v36); } catch (e) {}
const v42 = new BigUint64Array();
try { v42.entries(); } catch (e) {}
const v44 = v42.buffer;
function f45(a46) {
}
f45.arguments = f45;
const v47 = f45?.apply;
v47.length;
v44[1073741824];
new Uint8Array(81);
new Uint16Array(1000);
const v57 = [WeakSet,WeakSet];
v57[1];
try { new v57(); } catch (e) {}
class C62 {
}
const v63 = new C62();
const v66 = v63[Symbol.unscopables];
class C67 extends Set {
    ["next"] = v66;
}
new BigUint64Array(2941);
try { new v47(64, v23); } catch (e) {}
v44.constructor = f45;
class C72 {
}
const v73 = v63.__defineGetter__;
let v74;
try { v74 = v73(); } catch (e) {}
let v75 = C72.g;
let {"c":v76,"g":v77,...v78} = v75 = v74;
v44.slice();
gc();
-2245 < 1689609233;
new Int16Array(1000);
const v86 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v88 = new Uint32Array();
const v90 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v91 = [1073741824,1073741823,1376142744,1073741825];
function f93(a94, a95, a96, a97) {
    function f99() {
        let v102 = Float64Array;
        v102 = a95;
        b = v57;
        v86.length;
        try {
            v91.forEach(a95);
        } catch(e105) {
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o107 = {
        };
        const o122 = {
            "c": -4294967297n,
            "c": v57,
            valueOf(a110, a111) {
            },
            1073741824: v88,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [-4294967297n](a113, a114, a115, a116) {
                class C118 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v90,
            256: a97,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
    }
    f99();
    const v125 = new Int8Array();
    v125.buffer.slice(2147483648);
    const v131 = new Int32Array(1024);
    v131[3];
    for (let v133 = 0; v133 < 10; v133++) {
    }
    %OptimizeFunctionOnNextCall(f99);
    let v135;
    try { v135 = v91["find"](..."find", a97, ...v57, ...v91, ...522675525n); } catch (e) {}
    v135 <= a96;
    return arguments;
}
f93();
%OptimizeFunctionOnNextCall(f93);
