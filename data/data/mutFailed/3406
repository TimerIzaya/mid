916304492n & 916304492n;
try { Array.of(); } catch (e) {}
let v15 = 5;
v15--;
new Array(v15);
-256 === -256;
const t5 = 129n;
t5.dotAll = 129n;
const v21 = [65535,268435439,-9007199254740990,268435440,1024,19743,5,4];
try { v21.map(Array); } catch (e) {}
[v21];
(64).toLocaleString();
function F25() {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = BigInt64Array.BYTES_PER_ELEMENT;
v30 * v30;
const v32 = new BigInt64Array(257);
let v33;
try { v33 = v32.join(64); } catch (e) {}
const v34 = v33?.toLowerCase;
try { new v34(); } catch (e) {}
1590 / 1590;
!(257 != 1590);
new BigInt64Array(1590);
BigInt64Array.name = BigInt64Array;
const v44 = new BigInt64Array(9);
v44[8] = v44;
536870888 / 536870888;
function f49() {
    return -2147483648;
}
function F50(a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this?.constructor;
    try { new v53(a52); } catch (e) {}
    try {
        this.f = 145253519;
    } catch(e55) {
    }
}
const v56 = new F50();
v56.a = v56;
const v58 = [536870888,8];
v58.concat(v58);
function f62(a63, a64) {
    a63--;
    const o66 = {
        __proto__: a64,
    };
    o66.e = o66;
    return a63;
}
f62(1340360056, null);
-65106n ^ -65106n;
Int8Array.BYTES_PER_ELEMENT;
Int8Array.d = Int8Array;
const t57 = "async";
t57[4] = "async";
const o73 = {
    "execution": v44,
};
o73.execution;
gc(o73);
