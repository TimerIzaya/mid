[];
function f1() {
    const o10 = {
        n() {
            function F3(a5) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a5;
                } catch(e6) {
                }
            }
            const v7 = new F3(this);
            new F3(this);
            new F3(F3);
            return v7;
        },
    };
    return o10;
}
f1();
const v12 = f1();
const v13 = f1();
function f14() {
    return v13;
}
f14.arguments - 789.9551725409153;
const v20 = -1.7976931348623157e+308 - -1.7976931348623157e+308;
-245;
new Int32Array(245);
new BigUint64Array(10);
1024 <= 1024;
new Float32Array(1024);
function f32() {
    2147483649 + 2147483649;
    const o54 = {
        valueOf(a38) {
            let v39;
            try { v39 = ("split").padEnd(a38, a38); } catch (e) {}
            function f40(a41, a42) {
                v39.g = v12;
                return f40;
            }
            try {
            } catch(e43) {
                const v45 = this.isConcatSpreadable;
                try { e43(v45); } catch (e) {}
            }
            function f53() {
                return a38;
            }
            return f32;
        },
    };
    return f32;
}
f32().length;
const t55 = -9.680807670242743;
t55();
const v58 = f32();
v58.length = v58;
const v62 = -v20;
f32();
~(++f1);
f32[v62];
c = 536870888;
/(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10[Ca\nb\bc?]/vim;
let v68 = 3425;
v68++;
try {
    v58.length = v68;
} catch(e70) {
}
