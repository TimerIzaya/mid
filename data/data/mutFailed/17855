new Int16Array(0);
2991 | 2991;
new Uint8ClampedArray(2991);
7 - 7;
new Int8Array(7);
function f11() {
    return 0;
}
const v15 = [];
let v16;
try { v16 = v15.toString(); } catch (e) {}
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
    a22 * a22;
    const v24 = this.constructor;
    let v25;
    try { v25 = this.getOwnPropertySymbols(536870887n); } catch (e) {}
    try { v16(v25, F20, "1KJ", v24); } catch (e) {}
    Object.defineProperty(this, "f", { writable: true, configurable: true, enumerable: true, get: f11 });
    v16 = "QeW9C";
    try {
        f11();
    } catch(e28) {
    }
    try { new v24(); } catch (e) {}
    a22 % a22;
    try {
        this.c = v15;
    } catch(e31) {
        function f32(a33, a34, a35, a36) {
            try {
                arguments.e = arguments;
            } catch(e38) {
            }
            f11 = v25;
            function f39() {
                return a36;
            }
            ("number").slice([a33,a33]);
            %OptimizeFunctionOnNextCall(f39);
            function F43() {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F43();
            return arguments;
        }
        for (let v46 = 0; v46 < 10; v46++) {
            f32(f32, f32, v46, v46);
        }
        %OptimizeFunctionOnNextCall(f32);
        f32(f32, f32, f32, f32);
        -Infinity;
        const o50 = {
        };
        o50.constructor;
    }
}
new F20(536870887n);
new F20(536870887n);
