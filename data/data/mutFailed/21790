class C3 {
    #o(a5) {
        let v6;
        try { v6 = a5(a5, a5, 1.0, Infinity, 1.0); } catch (e) {}
        let v7;
        try { v7 = a5.valueOf(a5); } catch (e) {}
        try {
            v7.#o(1.0, 1.0);
        } catch(e10) {
        }
        return v6;
    }
    e;
    static #g = "3";
    static #b;
    #f = "3";
}
const v11 = new C3();
const v12 = new C3();
const v13 = new C3();
function f14() {
    return v12;
}
function f15() {
    return f14;
}
const v16 = [-1e-15,-3.306274718990161,0.7861082174932749,1.4217310099706607e+307,4.0,3.0,-1.780209788725518,-6.666455032152929,-5.1221160153148615];
const v17 = [2.4639364280344047,0.27935892026406783,-546.7564936282423,-1.1189732203334489e+308,-1000000000.0,-0.0,0.1952028416502174];
const v18 = [1.0,-4.354453237751404,576939.0759352611,-3.469180904092684e+306,0.013557417950834094,0.19004111889117936,-197074.22691264958,-1000000.0,0.472763599019402,1.6460120180752664];
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    with (v18) {
        length = v17;
        try { new C3(C3, 1.0, a22, ...a22); } catch (e) {}
        [] = v16;
    }
    try {
        this.b = a21;
    } catch(e24) {
    }
    try {
        this.f = 1.0;
    } catch(e25) {
    }
}
new F19(v17, v13);
try { v13.m("3", v17, v17); } catch (e) {}
v17[3.0];
new F19(v18, v11);
new F19(v18, v11);
const v35 = new Int8Array();
const o36 = {
    ...v35,
};
Object.defineProperty(o36, o36, { set: f14 });
F19 >= 3.0 ? F19 : 3.0;
new Uint8ClampedArray(999);
new Int8Array(9);
new Float64Array(2858);
