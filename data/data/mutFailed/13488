[0.7429973622544824,-3.0,1.374993701352176e+308,1000.0,0.2390428444501992,0.0,-984984.5310424952,1.5054773772616622e+308];
[-5.0,-2.505032557792142e+307,1000000.0,-9.930273760394385,-734.3063298481425];
[1.3466984285779703e+307];
const v4 = new WeakMap();
!true;
new Uint8ClampedArray(11);
129 + 129;
const v16 = new BigUint64Array(129);
3 | 129;
Uint16Array.a = Uint16Array;
new Uint16Array(3);
4087 - 4087;
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    let v25;
    try { v25 = this.propertyIsEnumerable(true); } catch (e) {}
    const v26 = this.toString();
    let v27;
    try { v27 = v26.match(this); } catch (e) {}
    const v29 = new v27();
    try { v29.add(Uint16Array); } catch (e) {}
    const v31 = v29.add;
    try { v31(); } catch (e) {}
    const v35 = new Int16Array(2183);
    !(4087 > v26);
    let [,,...v38] = v35;
    try { v25.reduce(v38); } catch (e) {}
    function f40(a41) {
        function f43(a44) {
            this[1] >>= 4087;
            return a44;
        }
        const t32 = "function";
        t32.onmessage = f43;
    }
    try { f40(v16); } catch (e) {}
    const o48 = {
        "type": "function",
    };
    new Worker(f40, o48);
}
const v50 = new F23();
try { v50.onmessage(v4); } catch (e) {}
new F23();
