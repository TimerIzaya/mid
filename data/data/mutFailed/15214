let v3 = [0.887974715688851,6.118327147623296e+306,-6.206300696715673e+307];
const v4 = [0.8305818989752101,78.71169814693599];
const v5 = [1.0905234889745081,-3.181985354779215,NaN,-5.0,-1.266512655198614e+308];
try { v5.toLocaleString(); } catch (e) {}
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    function f12() {
        v3 = a11;
        F7 = a9;
        return a9;
    }
    a9[Symbol.toPrimitive] = f12;
    try { a9.with(v3, v3); } catch (e) {}
    function f16() {
        const o21 = {
            "b": 1e-15,
            [3](a20) {
            },
        };
        return o21;
    }
    try {
        this.c = v3;
    } catch(e22) {
    }
    try {
        function f23(a24, a25, a26, a27) {
            const v29 = new Int8Array(a26);
            const v33 = new Int32Array(2528);
            v33[0] %= -1073741824;
            return v29.buffer;
        }
        f23.d = f23;
        this.b = a11;
        try {
            v5.iterator = v5;
        } catch(e35) {
        }
        function f36() {
            return f36;
        }
    } catch(e38) {
    }
    try { ("NFKD").sup(); } catch (e) {}
    ("string").codePointAt("NFKD");
    new Uint8ClampedArray(798);
    try {
        this.h = a11;
    } catch(e46) {
    }
}
F7.caller = F7;
const v47 = new F7(v4, 127, v5);
const v48 = new F7(v5, 0, v47);
v48.h = v48;
const v49 = new F7(v3, 0, 14660);
v49.a = v49;
const t57 = "function";
t57[5] = "function";
const o51 = {
    "type": "function",
};
function F52() {
    if (!new.target) { throw 'must be called with new'; }
}
F52.d = v47;
F52.d = F52;
new F52();
const v57 = new Float32Array(Float32Array);
v57.valueOf = Date;
for (let v58 = 0; v58 < 25; v58++) {
    function f59(a60, a61, a62, a63) {
        try { a60.slice(f59, a61); } catch (e) {}
        a60[1];
        let v66 = a61--;
        v66++;
        a60[0] = a60;
        a61 <= a61;
        arguments[1] = v4;
        arguments[1] = arguments;
        const v70 = arguments?.__lookupGetter__;
        try { v70.constructor(); } catch (e) {}
        let v72;
        try { v72 = v70(v70, f59, a61, arguments); } catch (e) {}
        return v72;
    }
    for (let v73 = 0; v73 < 10; v73++) {
        f59(v57);
    }
}
new Date();
const v76 = /QZRD?/gms;
v76.a = v76;
/ig(a)[g5g+]/usy;
const v78 = /(?!(a))\1(p(?!(a))\1)/gvms;
v78.dotAll = v78;
const v80 = new WeakSet();
try { v80.delete(v4); } catch (e) {}
const v83 = [[WeakSet,WeakSet,WeakSet,WeakSet],v80];
v83[1] = v83;
function f86(a87) {
    for (let v88 = 0; v88 < 32; v88++) {
        v78["p" + v88] = v88;
    }
    return F52;
}
undefined.valueOf = f86;
const v91 = new undefined(2917);
const v95 = v91["lastIndexOf"](~undefined, undefined, ..."lastIndexOf", 10);
v95 >> v95;
("catch")["1073741823"];
v83[65537] *= ("1073741823").trimRight();
