new Date();
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 14;
    const v9 = [];
    const v11 = ("d").strike(v9, "d");
    try {
        v9.length = v11;
    } catch(e12) {
    }
    a7 >> a7;
    try {
        this.h = a7;
    } catch(e14) {
    }
    try {
        this.b = a7;
    } catch(e15) {
    }
}
const v16 = new F5(14, -15542);
v16.h = v16;
const v17 = new F5(-15542, -15542);
new F5(-15542, 9007199254740992);
function f21(a22) {
    let v23 = a22 || a22;
    v23 = a22;
    return Uint32Array;
}
Uint32Array[Symbol.iterator] = f21;
const v26 = new Uint32Array(Uint32Array, Uint32Array);
try {
    Object.defineProperty(v26, -5.0, { enumerable: true, value: Array() });
} catch(e30) {
}
new Set();
128 << 128;
class C36 {
    static #a;
    static h;
    a;
    c;
    a = v17;
    d;
    toString(a38, a39, a40) {
        a39[a40] = a40;
        new BigUint64Array(512);
        const v46 = new Uint32Array(3283);
        new BigUint64Array(1024);
        return v46;
    }
}
new C36();
new C36();
const v52 = new C36();
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(F53); } catch (e) {}
    const v57 = 1922 % 1922;
    v57 == v57;
    const v59 = [0.0,1000000000.0,168.7956281727238,-575464.6142395872,-1000000000.0,938.6271876998214];
    v59[Symbol.toPrimitive] = Date;
    const v64 = new Float64Array(64);
    v64[5] = v59;
    for (let v65 = 0; v65 < 50; v65++) {
        v65 << v65;
        for (let v67 = 0; v67 < 25; v67++) {
            v67 - v67;
            this["p" + v67] = v67;
        }
    }
}
F53.toString = f21;
F53.e = F53;
new F53();
function f72(a73, a74) {
    const o76 = {
        get h() {
            return this;
        },
    };
    return o76;
}
const v77 = new F53();
v77.c = v52;
v77.c = v77;
