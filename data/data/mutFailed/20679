function f0() {
}
const v1 = [f0,f0,f0,f0];
const v2 = [f0,f0];
const v4 = new Uint8Array(Uint8Array, Uint8Array, Uint8Array);
const o5 = {
    "construct": f0,
    "deleteProperty": f0,
    "has": f0,
    "isExtensible": f0,
    "setPrototypeOf": f0,
};
new Proxy(v2, o5);
function f8(a9, a10, a11, a12) {
    a11++;
    const v14 = a11++;
    const v15 = a11 % a11;
    const o16 = {
        ...a9,
    };
    let v17;
    try { v17 = o16.n(v15, v14); } catch (e) {}
    return v17;
}
[v2,v2,v2,v1];
const v21 = /c(?:ab)|cde/vdmy;
const v22 = v21.exec();
let o23 = {
};
new BigInt64Array(12);
new Uint32Array(3);
new BigInt64Array(140);
new Int16Array(1);
const v45 = new BigInt64Array(2149);
new Uint16Array(3412);
new BigUint64Array(129);
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    function f55() {
        return -9007199254740992n;
    }
    class C56 {
        [v2];
    }
    new C56();
    this.c = 1073741823;
    const o59 = {
    };
    class C60 {
    }
    let v62 = Int16Array;
    function f63() {
        v62--;
        class C66 {
            static #m(a68) {
            }
            set d(a70) {
                this.#m();
            }
            constructor(a73) {
                function f74() {
                    return this;
                }
                Object.defineProperty(C60, "length", { configurable: true, enumerable: true, get: f74 });
            }
        }
        const v75 = new C66();
        v75.g = v75;
        const v76 = new C66();
        v76.length = -4294967296;
        v1.length;
        let v78 = 0;
        function f97(a98, a99, a100, a101) {
            function f102() {
                Math.expm1();
                return a101;
            }
            return eval();
        }
        for (let i = 0; i < 5; i++) {
            for (let v117 = 0; v117 < 5; v117++) {
                const t81 = "string";
                t81["p" + v117] = v117;
            }
            v78++;
        }
        const v121 = new C66(v78);
        [v121,v121,v121,v121,v121];
        const v123 = [v121];
        class C124 extends C66 {
            [v75];
            #n(a126, a127, a128, a129) {
            }
            #g;
        }
        new C124();
        v123.constructor;
        let v132;
        try { v132 = v76.m(); } catch (e) {}
        return v132;
    }
    f63();
    const v135 = new Set();
    function F136(a138, a139) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a138;
        } catch(e140) {
        }
        v135[this];
        try {
            new F136(a139, v135);
        } catch(e143) {
        }
    }
}
const v144 = new F52();
new F52();
new F52();
v45[v22] ||= 3412;
v144.__proto__;
o23 = v4;
o5.__proto__;
new Int32Array(1000);
new BigUint64Array(4096);
new Int8Array(2167);
new Float32Array(4);
new Uint32Array(2);
function F167(a169, a170, a171, a172) {
    if (!new.target) { throw 'must be called with new'; }
}
const v173 = new F167(F167, F167, F167, F167);
for (let v174 = 0; v174 < 25; v174++) {
    function f175(a176, a177, a178, a179) {
        arguments.toString();
        return f175;
    }
    v173[v173 + v174] = v174;
}
class C184 {
    constructor(a186, a187) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new F167();
function F190(a192, a193) {
    if (!new.target) { throw 'must be called with new'; }
    const v197 = new Uint8ClampedArray(11);
    v197.includes(11);
    const o199 = {
    };
    const t153 = Array(11);
    t153[212] -= 3774;
    this.constructor;
    Uint32Array ^ a192++;
    const v207 = v21["exec"](v1[0]);
    Object.defineProperty(v207, v207, { writable: true, enumerable: true, set: f0 });
}
const v208 = new F190();
const v209 = v208.constructor;
([-3,47741,-16128,9007199254740992,-1024,-58567,268435439,-4294967296,1807295090,-9223372036854775808]).flat();
class C213 extends Array {
}
new v209();
