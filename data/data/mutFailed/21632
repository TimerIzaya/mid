let v0 = [-9007199254740992,-6,6,10000,-128,-11,53907,1671830537,10];
const v1 = [536870912,-1073741824,1000];
const v2 = [-5,-24486,-8,8,128,64,6,57225,-4294967296,9223372036854775807];
const o6 = {
    "type": "function",
};
new Int16Array(305);
new Int32Array(1903);
const v13 = new Uint8Array(1);
const t9 = 305;
const v16 = new t9(434);
function f17(a18, a19, a20) {
    const o25 = {
        get g() {
            super.c += a18;
            const v22 = a19[10];
            v0 = a19;
            try {
                super.reject(v2, v22, this);
            } catch(e24) {
            }
            return v13;
        },
        [a19]: v16,
        "a": Uint8Array,
        "g": Int16Array,
    };
    return o25;
}
f17(v0, v1, 1903);
f17(Uint8ClampedArray, v2, 1);
f17(v16, v0, 1);
for (let i31 = 0, i32 = 10; i31 < i32; i32--) {
    function f39() {
        return Math.asin(o6);
    }
}
const v42 = /Cs[\cz]*/vi;
for (let v43 = 0; v43 < 25; v43++) {
    const v44 = [1073741824,1073741823,1376142744,1073741825];
    function f45(a46, a47, a48, a49) {
        for (let v51 = 0; v51 < 5; v51++) {
            try {
                const o54 = {
                    "execution": 1,
                    "type": "minor",
                };
                function f55() {
                }
            } catch(e56) {
                arguments.callee;
                arguments.g;
                arguments.length;
                v44.__proto__ = v44;
            }
            const v60 = [-6.741855211610779,553.594505585577,1.0637276618206825e+308];
            const o64 = {
                set c(a62) {
                    class C63 {
                        static [v60];
                    }
                },
            };
        }
        const v66 = new Int8Array();
        try { arguments.entries(); } catch (e) {}
        const v68 = v66.buffer;
        Math.log1p(-(46598 / v42));
        return v68.slice();
    }
    for (let v75 = 0; v75 < 5; v75++) {
        f45();
    }
    const o78 = {
        __proto__: null,
    };
    class C80 extends Array {
    }
    function F81(a83, a84, a85, a86) {
        if (!new.target) { throw 'must be called with new'; }
        const v89 = new Float64Array(C80);
        v89.reverse();
    }
    try { o78.valueOf(v42, v44); } catch (e) {}
}
