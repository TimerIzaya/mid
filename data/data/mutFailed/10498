let v8 = "e";
const v9 = [-13063,230037640,0,-1717935321,257,0,1073741825];
const v10 = [-2051630605,509562611];
class C11 {
    0 = v10;
}
const v12 = new C11();
Object.defineProperty(v12, 7, { configurable: true, value: v9 });
class C13 {
    get h() {
        const t10 = "b";
        t10[3] = this;
        super[-9007199254740990] = this;
        return this;
    }
    static {
        let v15 = this;
        function f16(a17, a18) {
            const v20 = new Uint8ClampedArray(268435456);
            return v20;
        }
        v15[Symbol.toPrimitive] = f16;
        v15 ^= "b";
        v8 = "-21508";
        function f23(a24, a25) {
            const o28 = {
                set d(a27) {
                },
                "a": a24,
            };
            const v31 = new Int8Array(268435456);
            return v31;
        }
        const v34 = new Int8Array(7);
        try { v34.findLastIndex(-9007199254740990); } catch (e) {}
        new BigUint64Array(255);
        new Int32Array(1720);
    }
}
try { new C13(); } catch (e) {}
new C13();
new C13();
const v45 = new C13();
function f46(a47) {
    function F48(a50, a51) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F48();
    return F48;
}
Object.defineProperty(v45, "constructor", { writable: true, enumerable: true, value: f46 });
const v53 = v45?.constructor;
try { new v53(); } catch (e) {}
function f55() {
    class C56 {
    }
    const v57 = new C56();
    const v58 = v57?.__defineGetter__;
    try { new v58(C56, C56); } catch (e) {}
    const v60 = [v57,v57,v57,v57,v57];
    const v61 = v60?.includes;
    try { new v61(C56); } catch (e) {}
    try {
        const o64 = {
        };
        o64.e = "number";
        o64.e = 1261703539;
    } catch(e65) {
    }
    const v66 = [f55,f55];
    function f67() {
        return f46;
    }
    function f68(a69) {
        ([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
    }
    Object.defineProperty(v66, "constructor", { writable: true, configurable: true, enumerable: true, get: f67, set: f68 });
    v66[1] = v66;
    class C74 extends C56 {
        [v57];
    }
    try { new C74(); } catch (e) {}
    const v76 = new C74();
    Object.defineProperty(v76, "constructor", { enumerable: true, value: f67 });
    try { v76.constructor(); } catch (e) {}
    v66.constructor;
    try { v76.m(v60); } catch (e) {}
    return f55;
}
f55.toString = f46;
try { f55.toString(); } catch (e) {}
%PrepareFunctionForOptimization(f55);
f55();
const v82 = f55();
function f83() {
    return f83;
}
const v85 = new Date();
v85.getMonth();
v82.caller = v82;
%OptimizeFunctionOnNextCall(f55);
f55();
