Uint8ClampedArray * Uint8ClampedArray;
const v3 = [];
class C4 {
    constructor(a6, a7, a8) {
        function f9(a10, a11, a12) {
            v3.copyWithin();
            try {
                f9(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e18) {
            }
            return -((this >> -268435456) >> this);
        }
        f9(this, this, a6);
    }
}
try { C4.call(Uint8ClampedArray); } catch (e) {}
new Uint8ClampedArray(2302);
0 * 0;
const v28 = new Int8Array(0);
try { v28.entries(); } catch (e) {}
new BigUint64Array(7);
-1.3874695914798123e+308 & -1.3874695914798123e+308;
const v37 = [0.09625845130830724,-1e-15,0.40226168662621953];
const v38 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const v39 = [-1.7976931348623157e+308,585278.7631767453,-1.0,-2.0];
try { v39.toString(); } catch (e) {}
4294967297 - 4294967297;
Array.e = Array;
2124 >> 2124;
const v48 = Array();
function f49(a50, a51, a52, a53) {
    a50 - a50;
    a51.g = a51;
    a52 / a52;
    const o56 = {
        [a50]: 512,
        [a52]: v38,
        "b": a50,
    };
    o56[4294967297] = o56;
}
f49(4294967297, f49, 4294967297, 2124);
v48(2124, v39, v37, v39);
new Uint16Array(52);
const v64 = new Uint32Array(2128);
for (let v65 = 0; v65 < 100; v65++) {
    f49(512, v64, v64, v48);
}
for (let v67 = 0; v67 < 32; v67++) {
    v67 + v67;
}
