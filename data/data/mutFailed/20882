function f0() {
    const o16 = {
        ...9,
        "defineProperty": f0,
        n(a5, a6, a7, a8) {
            for (let v9 = 0; v9 < 10; v9++) {
            }
        },
        n(a11) {
            a11?.[a11];
            super.e &= 2.2250738585072014e-308;
            const v14 = 2.2250738585072014e-308 < 9 ? 2.2250738585072014e-308 : 9;
            function f15() {
                return v14;
            }
            return -4294967297;
        },
        ...9,
    };
    return o16;
}
const v17 = f0();
f0();
const v19 = f0();
function* f21(a22) {
    yield [9007199254740990,-4294967296,-1205995130,-12581,9];
    return -1.7570084557226905e+308;
}
191 * 191;
try { Float64Array(v19, Float64Array, v19); } catch (e) {}
const v29 = new Float64Array(191);
const v32 = (a33, a34, a35, a36) => {
    function F37(a39, a40, a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return Int8Array;
};
let v44;
try { v44 = new Uint8Array(Float64Array, 191, v32); } catch (e) {}
const v45 = new Uint8Array(1925, 1925, v44);
v45[1858];
3 >> 3;
f0();
let v50 = Int32Array;
try { v50(v29, v17, v45); } catch (e) {}
v50++;
for (let i55 = 255, i56 = 10;
    (() => {
        i55 >> i55;
        const v58 = i55 < i56;
        const o59 = {
        };
        class C60 {
            #p() {
            }
        }
        C60.g = C60;
        let v62 = 3375;
        const v64 = new BigUint64Array(v62);
        Worker.tan(--v62);
        const v68 = [-256,13351,5138,2,-4294967295,1000,268435440];
        class C69 {
            constructor(a71, a72) {
                Worker.atan2(v68);
            }
        }
        let [v74,,v75,...v76] = v64;
        v74 & v74;
        return v58;
    })();
    (() => {
        let v80 = i55++;
        v80--;
    })()) {
}
const v85 = new Int16Array(3);
v85[1] = v85;
function F86() {
    if (!new.target) { throw 'must be called with new'; }
}
const v93 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
v93[8] = v93;
new Float64Array(65536, 65536, 65536);
const v99 = new Uint8Array(3);
v99[2] = v99;
function f100(a101, a102, a103, a104) {
    Set(a101);
    return v99;
}
f100.name;
const v108 = [1073741824,1073741823,1376142744,1073741825];
function f109(a110, a111, a112, a113) {
    try { v108.toSorted(f100); } catch (e) {}
    return v99;
}
f109.name;
for (let v116 = 0; v116 < 5; v116++) {
    f109();
}
class C119 extends F86 {
}
C119.prototype = C119;
for (let v120 = 0; v120 < 5; v120++) {
    function f122() {
        let v126 = "Vre" ^ (undefined * 1.5571715624647169);
        v126--;
        return f122;
    }
    f122.length = f122;
    const v128 = f122();
    v128.arguments = v128;
    %OptimizeFunctionOnNextCall(f122);
}
const v129 = new C119();
const v130 = v129?.constructor;
try { new v130(); } catch (e) {}
Uint32Array.log2(65536 | "undefined");
const v137 = ["function"];
v137.length;
Reflect.apply(("b").localeCompare, v129, v137);
