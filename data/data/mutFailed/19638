[-536870912,-459675655,242513042,10000,2,-2147483648,-536870912,268435441];
const v1 = [1885667114,256,-36368,-4294967296];
const v2 = [17636];
class C3 {
    static #toString(a5) {
        try {
            const o7 = {
            };
            v2.concat(v1, "6", o7);
        } catch(e9) {
        }
        return this;
    }
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f17() {
    function f18(a19) {
        let v20;
        try { v20 = new a19(a19, v11, v11, a19); } catch (e) {}
        try { new v20(a19, v20, a19); } catch (e) {}
        return v12;
    }
    return f18;
}
function f22(a23) {
    [[v16,a23],v10,v2];
    [v10,v12];
}
Object.defineProperty(v16, Symbol.toPrimitive, { writable: true, enumerable: true, get: f17, set: f22 });
const v30 = new Uint32Array();
let v31 = -4294967297n;
const v32 = v31--;
const v33 = [601759695];
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f35(a36, a37, a38, a39) {
    const v40 = a36.constructor;
    function f41(a42, a43) {
        v12[0] = v40;
        [536870887,42346,256,-2147483649];
        [9007199254740992,8,-9007199254740991,1024,-2147483647,268435439,3,6];
        [65537,957124927];
        return a37;
    }
    v40.constructor = f41;
    let v47;
    try { v47 = v40(); } catch (e) {}
    const v48 = v47?.constructor;
    Object.defineProperty(v48, "toString", { writable: true, enumerable: true, value: f41 });
    let v49;
    try { v49 = v48(f35, a36, v16, Uint32Array, v40); } catch (e) {}
    function f50() {
        const v52 = ("Vre").charAt(v49);
        v52.blink();
        let v54;
        try { v54 = ("Vre").codePointAt(v16); } catch (e) {}
        v54 % v54;
        let v56 = Float64Array;
        v56 = a37;
        b = v16;
        let v57 = v16.length;
        v57++;
        try {
            v34.forEach(a37);
        } catch(e60) {
            e60.message = e60;
        }
        const o71 = {
            "c": v31,
            valueOf(a62, a63) {
                return v47;
            },
            1073741824: v30,
            [v31](a65, a66, a67, a68) {
                eval(v52);
            },
        };
        return v34;
    }
    f50();
    const v74 = Array(v48);
    try { v74.findLast(); } catch (e) {}
    const v77 = Int8Array.of();
    let v78;
    try { v78 = v77.every(v77, a36, v77, a37, Array); } catch (e) {}
    const v79 = new Int8Array(v78);
    const v81 = v79.buffer.slice();
    const v82 = v81.constructor;
    v82[Symbol.iterator] = Symbol;
    try { v82(v81, v78, v32, v77, a36); } catch (e) {}
    const v87 = new Int32Array(v82, v40, v40);
    v87.lastIndexOf(a36, a38);
    try { v34["find"](..."find", a39, ...v33, ...v34); } catch (e) {}
    return v31;
}
for (let v91 = 0; v91 < 10; v91++) {
    f35(v30);
}
%OptimizeFunctionOnNextCall(f35);
f35(Uint32Array);
