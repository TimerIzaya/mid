const v1 = [null,null,null];
class C4 extends Uint16Array {
}
class C5 extends C4 {
    constructor(a7, a8, a9, a10) {
        super();
        function f11(a12, a13, a14) {
            return a7;
        }
        const v17 = new BigUint64Array();
        const v19 = [2082,"function",this,C4,v17];
        const o20 = {
            "arguments": v19,
            "type": "function",
        };
        new Worker(f11, o20);
    }
}
[v1];
const v23 = [-268435456,1000];
let v25 = 30918;
const v26 = v25--;
Math.exp(v23);
Math.ceil(v26);
const v29 = [null];
new Set();
/(?:ab|cde)H[^123]*/vsy;
/a|bGxyz{93}a{0}\p{Script=Greek}/udis;
/(?:a+){0,0}/vdimy;
const v39 = new BigInt64Array();
Math.log1p(268435456);
function f44(a45, a46) {
    return -4096;
}
const o47 = {
    __proto__: v39,
};
const v56 = [];
let v57;
try { v57 = v56.flat(4096); } catch (e) {}
v57[1];
function F59(a61) {
    if (!new.target) { throw 'must be called with new'; }
}
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v69 = this.constructor;
    ([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(268435456, -27205);
    let v73 = 0;
    do {
        typeof v73 === "string";
        v73++;
    } while (v73 < 7)
    try { new v69(); } catch (e) {}
}
const v81 = new Int16Array(2183);
new v23(Uint8Array);
const v87 = new Int16Array(-4096);
async function f89(a90, a91, a92) {
    delete v87[-1000000000.0];
    function F95(a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = "b";
        this.d = a98;
    }
    const v99 = new a90();
    const v100 = new F95(v99, v99);
    const o101 = {
        ...v100,
        __proto__: v99,
    };
    for (const v102 in o101) {
    }
    let [v103,v104,...v105] = v81;
    v81[5];
    const o107 = {
    };
    for (let v109 = 0; v109 < 500; v109++) {
        class C111 {
        }
        const v114 = new Int32Array(v109, v109, 257);
        let v116 = new Map();
        [...v116] = v114;
    }
    const v119 = new Uint16Array(5);
    function f120(a121, a122) {
        const o126 = {
            "c": v105,
            set g(a124) {
            },
            39: v119,
        };
    }
    f120("message", 5);
    await "message";
    return Uint8Array;
}
const o129 = {
};
const v131 = new Proxy(v29, o129);
try {
    with (v131) {
        o129[v131];
    }
} catch(e134) {
}
f89(8, 8, 948737.12760097);
+-36313 || (135.68951961804942 / (-36313 + 135.68951961804942));
