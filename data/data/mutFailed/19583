new Int32Array(16);
const v5 = new Int16Array(64);
const v7 = 3250 | 3250;
const v9 = new Float64Array(3250);
function f10(a11) {
    let [v12,v13,,v14] = v5;
    const t6 = [4294967296,-256];
    const v19 = delete t6.length;
    function f20(a21, a22, a23, a24) {
        function f25(a26, a27, a28, a29) {
            try { a27(Uint8Array, Uint8Array, a24); } catch (e) {}
            return a26;
        }
        f25(2);
        const o32 = {
        };
        try { o32.cos(BigUint64Array, v19); } catch (e) {}
        return f25;
    }
    f20();
    return f20;
}
v9.toString = f10;
v9[1094] = v9;
const v36 = [[3250,Float64Array,Float64Array,Float64Array,3250],Int16Array,16];
function f37(a38, a39) {
    function F40(a42, a43) {
        if (!new.target) { throw 'must be called with new'; }
        this.h = F40;
    }
    new F40();
    return v7;
}
v36.constructor = f37;
try { v36.flat(); } catch (e) {}
[Int16Array];
const v47 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
function f48() {
    new Date(Date);
    return v9;
}
v47.toString = f48;
const v53 = ("h").split();
const o150 = {
    [null]() {
        function f58(a59) {
            a59 >> a59;
            const o68 = {
                [12298n](a62) {
                    const v63 = delete this?.e;
                    v63 instanceof v63;
                    v63[this] = 2025423814n;
                    return this;
                },
                __proto__: 2025423814n,
                ...a59,
                "a": 12298n,
                "b": 2025423814n,
                "f": 2025423814n,
                ...a59,
            };
            return o68;
        }
        try { f58(12298n); } catch (e) {}
        const v70 = f58(-22903n);
        v70[12298] = v70;
        try { this.toString(); } catch (e) {}
        const v72 = [];
        Object.defineProperty(v72, 2, { writable: true, configurable: true, enumerable: true, value: 2025423814n });
        v72[2] = this;
        class C73 {
            constructor(a75, a76) {
                a75[2];
                const v79 = v53?.groupToMap;
                try { new v79(-8516); } catch (e) {}
                function f81() {
                }
                try { a75.findLast(); } catch (e) {}
                a75[2];
                const v84 = /W(jy2)/udy;
                function f85() {
                    class C86 {
                    }
                    C86.prototype;
                    class C88 extends C86 {
                    }
                    return C73;
                }
                f85.length;
                v84.valueOf = f85;
                function f90(a91, a92, a93, a94) {
                }
                f90();
                function F96() {
                    if (!new.target) { throw 'must be called with new'; }
                    Symbol.toPrimitive;
                }
                const v100 = new F96();
                for (let i104 = 0, i105 = 10;
                    (() => {
                        const v106 = i104 < i105;
                        const t0 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
                        t0[3] = v100;
                        let v110 = 3375;
                        const v111 = v110++;
                        v111 / v111;
                        const v113 = new BigUint64Array();
                        let [v114,,v115,...v116] = v113;
                        return v106;
                    })();
                    i104++) {
                }
                const v123 = new Uint8Array();
                try { v123.reduceRight(); } catch (e) {}
                for (let v125 = 0; v125 < 250; v125++) {
                    v125++;
                    const o141 = {
                        ...v123,
                        [v47](a128, a129, a130) {
                            const o134 = {
                                "maxByteLength": 150,
                            };
                            const v136 = new ArrayBuffer(127, o134);
                            const v138 = new Uint8ClampedArray(v136);
                            v138[-65536n] = v138;
                        },
                        get f() {
                            super.n();
                        },
                    };
                }
                for (let v142 = 0; v142 < 5; v142++) {
                    -v142;
                    ("p")[0];
                    v53["p" + v84] = v142;
                }
            }
        }
        const v147 = new C73(v72);
        const v148 = v147?.__lookupGetter__;
        try { new v148(v36); } catch (e) {}
    },
};
try { o150.null(); } catch (e) {}
o150.null();
o150.null();
