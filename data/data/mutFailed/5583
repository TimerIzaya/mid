const v0 = [290511.96857215906,0.3003673637544756,-458526.71260649094,0.8333335605081266,16682.170944584184,0.12597720350931985];
const v1 = [2.220446049250313e-16,-3.0,-3.117457405711452,Infinity,2.220446049250313e-16];
const v2 = [-2.220446049250313e-16,8.380618196344006];
class C3 {
    g;
    static charCodeAt(a5, a6) {
        return this;
    }
    static get f() {
        v2[114] <<= v0;
        try {
            this.a = this;
        } catch(e11) {
        }
        return v1;
    }
}
C3.e = C3;
C3.e = C3;
new C3();
const v13 = new C3();
const v14 = new C3();
v14.d = v14;
class C15 {
    static #b;
    static get matchAll() {
        try {
            v2.toString = v14;
        } catch(e17) {
        }
        try {
            v0.#b = this;
        } catch(e18) {
        }
        return this;
    }
}
C15.b = C15;
const v19 = new C15();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
const v22 = v19?.__lookupGetter__;
try { new v22(v22); } catch (e) {}
try { new v22(v2); } catch (e) {}
const v25 = new C15();
const v26 = v25?.__lookupGetter__;
try { v26(v26); } catch (e) {}
try { new v26(v25); } catch (e) {}
const v29 = new C15();
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
const v32 = v29?.constructor;
try { new v32(); } catch (e) {}
let v34;
try { v34 = new v32(); } catch (e) {}
const v35 = v34?.constructor;
try { new v35(); } catch (e) {}
[v2,[v19,[v19,v29,v19,v29]],v13];
65537 + 65537;
const v43 = -256;
v43 - v43;
function f46() {
    return 2720;
}
f46.arguments = f46;
f46.valueOf = f46;
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    a49 == a49;
    a50.d = a50;
    a49 * a49;
    const v53 = this.constructor;
    v53.length;
    try { new v53(a49, 256); } catch (e) {}
    -a49;
    a50--;
    this.h = f46;
}
try { new F47(65537, 2720); } catch (e) {}
const v60 = F47.name?.toLocaleUpperCase;
try { new v60(); } catch (e) {}
new F47(65537, f46);
const v63 = new F47();
v63.toString = f46;
class C64 extends F47 {
    #h;
    3120 = F47;
    #g = v63;
    valueOf(a66, a67, a68) {
        class C70 {
        }
        const v72 = new C70();
        Object.defineProperty(v72, "valueOf", { enumerable: true, value: Symbol });
        new C70();
        const v74 = [v72];
        35530n & 35530n;
        new Float64Array();
        try { Uint8Array.from(v74); } catch (e) {}
        function f81(a82, a83) {
            a83.name;
            const v87 = Array();
            function f88() {
            }
            function f89(a90) {
                gc();
            }
            Object.defineProperty(v87, 0, { configurable: true, enumerable: true, get: f88, set: f89 });
            v87.unshift(3);
        }
        new Promise(f81);
    }
    [v63] = 256;
}
new C64(v0, 256);
new C64();
new C64();
