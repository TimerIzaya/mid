class C3 {
    constructor(a5) {
        this[1073741823] = this;
        super.c;
        new Int16Array(2939);
        let v10 = 128;
        v10++;
        Int32Array.name = Int32Array;
        new Int32Array(v10);
        1463 << 1463;
        Int8Array.name;
        const v18 = new Int8Array(1463);
        v18[1094];
    }
    1073741823 = 2.0;
}
const v20 = new C3(C3);
const v21 = new C3(19401);
v21[1073741823] = v21;
const v22 = new C3(v21);
v22[1073741823] = v22;
function f26(a27, a28, a29, a30) {
    a29[1073741823] = a29;
    const o38 = {
        m(a32, a33, a34) {
            this[a34] >>>= a33;
            a33?.[9];
            a32?.[a29];
            super.g = a33;
            a30?.b;
            return 2.0;
        },
        __proto__: v20,
        3: 2.0,
        ...v20,
        "c": a27,
        "g": v21,
    };
    return o38;
}
const v39 = f26("trunc", v22, v21, 19401);
v39.g = v39;
const v40 = f26(v20, "trunc", v22, v39);
f26(v39, v40, v40, v39);
function f42() {
    function f43() {
        const v46 = Symbol.iterator;
        Math[v46] = v46;
        return Symbol;
    }
    %PrepareFunctionForOptimization(f43);
    return f42;
}
f42.caller;
class C48 extends f42 {
}
C48.prototype = C48;
class C49 extends C48 {
}
function f52(a53, a54, a55, a56) {
    const t60 = "bigint";
    t60[5] = "bigint";
    function F60(a62, a63, a64, a65) {
        if (!new.target) { throw 'must be called with new'; }
        const v66 = this?.constructor;
        try { new v66(a65, v20, a62, a54); } catch (e) {}
        a62 == a62;
        try {
            this.d = f26;
        } catch(e69) {
        }
    }
    const v70 = new F60("trunc", v40, C49, a56);
    const v71 = v70?.constructor;
    try { new v71("p", "bigint", "p", a56); } catch (e) {}
    const v73 = new F60("trunc", "d", v70, 3.0);
    const v74 = new F60("p", v73, v73, a56);
    let v75;
    try { v75 = a53(a56, 3, 3); } catch (e) {}
    const v76 = a54 & a54;
    const v77 = 3 | C49;
    const v78 = v73.constructor;
    try { new v78(v76, -1000000.0, -1000000.0, v75); } catch (e) {}
    for (let [i82, i83] = (() => {
            0 ^ 0;
            return [0, v78];
        })();
        (() => {
            i82 * i82;
            i83.f = i83;
            return i82 < i83;
        })();
        ) {
    }
    v77 * v77;
    function f91() {
        let v92 = 0;
        while (v92 < 10) {
            for (let v95 = 0; v95 < 5; v95++) {
                const v96 = [-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036];
                v96.toLocaleString(f91, v96);
                for (let [i101, i102] = (() => {
                        10 >>> 10;
                        return [0, 10];
                    })();
                    i101 < i102;
                    i101++) {
                }
            }
            v92++;
        }
    }
    f91.g = f91;
    a53 / a53;
    a54 < a53;
    const o115 = {
        n(a113, a114) {
            return a56;
        },
    };
    try { o115.n(v74, "bigint"); } catch (e) {}
    return v75;
}
try { f52(v20, Uint8Array, v40, -1000000.0); } catch (e) {}
for (let v118 = 0; v118 < 500; v118++) {
    v118 === v118;
    f52(Uint8Array);
}
26507 !== 26507;
class C125 {
    constructor(a127, a128) {
        C48[-1000000.0];
        super.a;
    }
    #f = C3;
    #b = 26507;
    static [26507];
    static get a() {
        super[this] = 26507;
        try {
            arguments.#b <<= arguments;
        } catch(e134) {
        }
        return SharedArrayBuffer;
    }
}
C125[26507] = C125;
const v135 = new C125();
const v136 = v135?.constructor;
try { new v136(v40, v40); } catch (e) {}
const v138 = v135?.constructor;
v138.name = v138;
let v139;
try { v139 = new v138(); } catch (e) {}
const v140 = v139?.toString;
try { new v140(); } catch (e) {}
const v142 = v139?.constructor;
v142[26507] = v142;
let v143;
try { v143 = new v142(); } catch (e) {}
const v144 = v143?.propertyIsEnumerable;
try { new v144(v143); } catch (e) {}
new C125();
const v147 = new C125();
try { v147.constructor(); } catch (e) {}
const v149 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
let v150;
try { v150 = v149.findLastIndex(C125); } catch (e) {}
const v151 = [-9007199254740991,22341,65537];
const v152 = [9007199254740990,2147483647,-9223372036854775808];
const v154 = new Date();
const v155 = v154?.getHours;
try { new v155(); } catch (e) {}
const v157 = v154?.getHours;
v157.length;
try { new v157(); } catch (e) {}
let v160;
try { v160 = v154.setUTCSeconds(v149, v147); } catch (e) {}
v160++;
for (let v162 = 0; v162 < 5; v162++) {
    const v167 = new BigInt64Array(4046);
    let v168 = undefined;
    const v169 = v168++;
    v169 + v169;
    %VerifyType(4046);
    v147[v152];
    v147[undefined] = v154;
    try {
        v167.g = v168;
    } catch(e172) {
    }
    const v173 = v169 >> v169;
    v173 >> v173;
    const v175 = v173 >>> v173;
    function f176() {
        return f176;
    }
    -30285 >> -30285;
    function f179() {
        function f180(a181, a182) {
            return f179;
        }
        const v184 = Promise.resolve(f180);
        const v185 = new Promise(f180);
        const v186 = v185.constructor;
        try { new v186(-30285); } catch (e) {}
        return v184;
    }
    let v188 = v175 % v175;
    v188++;
    let v191;
    try { v191 = v150["search"](v151, v22); } catch (e) {}
    v191 &= 2.0;
    for (let v192 = 0; v192 < 32; v192++) {
        const t214 = "search";
        t214["p" + v192] = v192;
    }
    v188--;
    const o196 = {
    };
    o196.e = o196;
    for (let i199 = 0, i200 = 10; i199 < i200; i199 & i199, i200 ^ i200, i199++) {
    }
}
