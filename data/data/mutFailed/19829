const v0 = [-1000.0,5.0,858303.998853228,4.0,-7.730137683086749,-6.638904979872993,670088.833943052,-268.48749499147755,-1.0];
const v1 = [8.180922012437019e+307,-2.6128117962504094,-43671.319862324395,-1e-15,-1e-15,-551385.5848208324,-2.220446049250313e-16];
const v2 = [6.056188511315316,0.6845155000831696,1000000000000.0,640.349816810822,-Infinity,0.8791203184564138,-0.8961048405934449];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a5;
    } catch(e7) {
    }
    try {
        this.a = a5;
    } catch(e8) {
    }
    try {
        this.b = v0;
    } catch(e9) {
    }
}
new F3(v1, v1);
class C12 {
}
function f14() {
    for (let v15 = 0; v15 < 5; v15++) {
    }
    return typeof 522675525n === "undefined";
}
const v19 = new C12();
with (v19) {
    Math.asin();
    const v25 = new Uint32Array(8);
    v25.lastIndexOf(8);
    try { ("NaN").startsWith(h); } catch (e) {}
}
new F3(v2, v2);
new F3(v1, v2);
async function f31(a32, a33, a34) {
    for (let v35 = 0; v35 < 10; v35++) {
    }
    return "symbol";
}
new Int8Array(210);
new Uint8ClampedArray(10);
new Uint16Array(1);
const v48 = [-6135,-37816,1634505153,-2147483649,10];
const v49 = [0.23449681451060211,-1.3180974566102865e+308,-2.0,-1000000000.0,0.6107310765455765];
const v51 = new Int16Array(v49);
function f52(a53, a54, a55, a56) {
    const v57 = new Int8Array(Int8Array);
    v57.buffer;
    a56.slice(Int8Array, Int8Array).transfer();
    const o62 = {
        get e() {
            return this;
        },
    };
    function f63() {
        return o62;
    }
    Object.defineProperty(o62, Symbol.toPrimitive, { enumerable: true, get: a55 });
    for (let i69 = 0, i70 = 10;
        (() => {
            const v71 = i69 < i70;
            !v71;
            return v71;
        })();
        i70--) {
        for (let v78 = 0; v78 < 10; v78++) {
            i70 - i70;
            ("number")[i69];
            "number" | v49;
            v48.length;
            v51.__proto__;
        }
    }
    return a54;
}
for (let v84 = 0; v84 < 10; v84++) {
    f52(v84, v84, v84, v84);
}
%OptimizeFunctionOnNextCall(f52);
f52();
