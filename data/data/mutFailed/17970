const v2 = new Int8Array(10);
Uint32Array.d = v2;
const v5 = new Uint32Array(1477);
3309 | 3309;
Object.defineProperty(Uint32Array, "d", { writable: true, configurable: true, enumerable: true, value: Int8Array });
Uint32Array.d = Uint32Array;
new Uint32Array(3309);
function f10() {
    return v5;
}
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    -a14;
    try {
        this.h = a15;
    } catch(e17) {
    }
    try {
        this.c = 1477;
    } catch(e18) {
    }
    try {
        this.d = v5;
    } catch(e19) {
    }
}
const v20 = new F11(3309, 10, 1477);
Object.defineProperty(v20, "e", { enumerable: true, value: Uint32Array });
v20.e = v20;
new F11(3309, 3309, 10);
new F11(10, 3309, 1477);
try { ("number").strike(); } catch (e) {}
class C27 {
    constructor(a29, a30) {
        this.toString = f10;
        function f31(a32, a33) {
            try {
                new Uint32Array(v5);
            } catch(e35) {
            }
            return a32;
        }
        a30.constructor = f31;
        const v36 = a30.constructor;
        try { new v36(); } catch (e) {}
        const v39 = Math.atan2(this);
        v39 ** v39;
    }
}
C27.prototype = C27;
new C27(C27, C27);
new F11();
