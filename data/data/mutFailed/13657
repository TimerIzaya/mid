const v5 = new Int16Array(1);
new Uint16Array(2030);
const v11 = new Uint32Array(512);
function f13() {
    return -172798652;
}
const v16 = new BigInt64Array(5);
v16.toLocaleString(3088, [-536870912,8,9007199254740992,-461574414,3,-268435456,-536870912,65535,-1713660255,128]);
%OptimizeFunctionOnNextCall(f13);
f13();
class C21 extends Uint16Array {
    constructor(a23, a24, a25, a26) {
        super(33061);
        this[a23] ^= a25;
        function f27() {
            return 8;
        }
        delete v11[this];
    }
    10;
    static [512] = Int16Array;
    1444263538;
    [1] = Int16Array;
    static #h = v11;
}
new C21(Uint32Array, v5, -65537, 8);
new C21(-65537, 512, 1, 2030);
new C21(C21, C21, 1, 2030);
function F34() {
    if (!new.target) { throw 'must be called with new'; }
}
function f36(a37, a38) {
    function f39() {
    }
    const v43 = new Uint8Array(/(u4(?:a?)*)/gudimsy, f39);
    const v45 = new Uint32Array();
    for (let v46 = 0; v46 < 625; v46++) {
        const o54 = {
            ...v43,
            n(a50, a51) {
                v45[Uint8Array] = v45;
            },
            "b": 64,
            "maxByteLength": 10000,
            "g": Uint8Array,
            toString(a53) {
            },
        };
    }
    const o55 = {
    };
}
async function f57(a58, a59) {
    function F60() {
        if (!new.target) { throw 'must be called with new'; }
    }
    /2a\sc/uds;
    f36();
}
f57(F34, 4294967296);
