new Uint32Array(128);
const v5 = new Int8Array(164);
new Int8Array(682);
const v11 = new Int16Array(Int16Array);
v11[127];
const v15 = new Float32Array(1000);
const v16 = v15?.constructor;
try { new v16(160, v15, Int8Array); } catch (e) {}
new Int8Array(64);
1000 ^ 1000;
const v24 = new Int16Array();
try { v24.isPrototypeOf(Uint32Array); } catch (e) {}
const v27 = Symbol.unscopables;
v5.for(v27.description);
Object.defineProperty(v24, v27, { writable: true, configurable: true, enumerable: true, value: 1000 });
with (Symbol) {
    const v32 = byteLength || byteLength;
    v32 & v32;
}
