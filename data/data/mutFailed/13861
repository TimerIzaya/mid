[1121047618];
const v1 = [536870888];
const v2 = [0.0,1000000000.0,168.7956281727238,-575464.6142395872,-1000000000.0,938.6271876998214];
const v5 = new Float64Array(64);
v5[5] = v5;
const v6 = [v5,v2];
const v7 = [71599852,0,-11,268435439,512];
[-2147483649,1024,-15];
[-7,-4096,-1781035208,16,9223372036854775807,2147483649,51011,-4096];
[871616650,-32817,10,11,268435439,29418,-1,1000,257,5];
[14,4,-1843,8,8,-2147483649,-1259152651,5080,10000];
[33647,512,-9338,-1073741824,64,4294967297,536870889,-5];
function f13(a14, a15, a16, a17) {
    function f18() {
        -4294967295 === -4294967295;
        return -4294967295;
    }
    v6();
    %OptimizeFunctionOnNextCall(f18);
    return a14;
}
f13(f13, f13, f13, f13);
[-1024];
new BigInt64Array(64);
Math.atan2(v7);
const v30 = [0.0,1.0,-6.743702675363474,400.9902683003188];
let v31 = "string";
for (let v32 = 0; v32 < 5; v32++) {
    function f33() {
        for (let [i37, i38] = (() => {
                10 - 10;
                return [0, 10];
            })();
            (() => {
                i38--;
                const v40 = i37 < i38;
                v40 || v40;
                return v40;
            })();
            (() => {
                const v44 = i37++;
                v44 >> v44;
            })()) {
            i38 - i38;
            for (const v49 in v30) {
                v31 *= v31;
            }
        }
        return v30;
    }
    v32();
    %OptimizeFunctionOnNextCall(v2);
}
class C52 {
    static g = v1;
}
new C52();
new C52();
new C52();
const v58 = new Int8Array();
const v59 = v58.buffer;
v59.slice(v31);
function f61(a62) {
    const v63 = [601759695];
    const v64 = [1073741824,1073741823,1376142744,1073741825];
    try { v64["find"](..."find", undefined, ...v63, ...undefined); } catch (e) {}
    return v31;
}
f61(v59);
v59.constructor = f61;
new v58(128, 1000.0);
