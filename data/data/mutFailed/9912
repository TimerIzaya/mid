const v4 = new Map();
try { v4.set(5n, 5n); } catch (e) {}
const v6 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
v6.g = v6;
class C7 {
}
const v8 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C10 {
    static #e;
    m(a12, a13, a14, a15) {
        v8.#e;
        a13.#e = -1;
    }
}
class C23 {
    static [-5n];
    static p(a25, a26) {
        ([257])[0];
        new Int32Array(3);
        return 18529;
    }
    m(a37, a38) {
        const v39 = this?.constructor;
        try { new v39(); } catch (e) {}
        this[this] = a38;
        function F41(a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            try { this.propertyIsEnumerable(this); } catch (e) {}
            a43 & a43;
            function f48() {
                return -2.220446049250313e-16;
            }
            const o52 = {
                set e(a50) {
                    return;
                },
            };
            a44.g = a44;
            try {
                this.a = this;
            } catch(e53) {
                const o56 = {
                    [57144]: 4294967296,
                };
                o56.__lookupSetter__(57144);
            }
        }
        new F41(5n, this);
        const v59 = new F41(-5n, 5n);
        const v60 = new F41(-5n, v59);
        class C61 {
        }
        new C61();
        function f63() {
            const v65 = ("Vre").toLocaleUpperCase;
            let v66;
            try { v66 = new v65(); } catch (e) {}
            return v66;
        }
        f63();
        %OptimizeFunctionOnNextCall(f63);
        return v60;
    }
}
for (let v68 = 0; v68 < 5; v68++) {
    function f69() {
        for (let [i72, i73] = (() => {
                switch (f69) {
                }
                return [0, 10];
            })();
            i73--, i72 < i73;
            (() => {
                const v78 = i73--;
                v78 + v78;
            })()) {
        }
        return f69;
    }
    f69();
    %OptimizeFunctionOnNextCall(f69);
}
const v83 = new C23();
const v84 = new C23();
const v85 = new C23();
function f86(a87, a88, a89) {
    a87 % a87;
    a88--;
    try { a89.m(a88, a88); } catch (e) {}
    const o101 = {
        "d": a89,
        "h": v85,
        [5n]: C23,
        4: 1073741824n,
        o(a94, a95, a96, a97) {
            try {
                const o98 = {
                };
                new Map(o98);
            } catch(e100) {
            }
            return a89;
        },
    };
    class C103 {
        static ["name"];
    }
    const v105 = new Uint8ClampedArray(-1);
    v105.includes(undefined);
    o101[5] = o101;
    o101[4] = o101;
    return o101;
}
f86.e = f86;
const v108 = f86(5n, 5n, v83);
try { v108.o(f86, C23, v84, v108); } catch (e) {}
f86(5n, 1073741824n, v84);
const v111 = f86(5n, 1073741824n, v83);
v111[5] = v111;
let v112 = 10;
const v113 = v112--;
v113 | v113;
BigUint64Array.name;
const v117 = new BigUint64Array(v112);
function F118() {
    if (!new.target) { throw 'must be called with new'; }
    const v120 = this?.constructor;
    try { new v120(); } catch (e) {}
    try {
        Object.defineProperty(v117, 0, { writable: true, value: 4096 });
    } catch(e123) {
        e123.h = e123;
    }
}
let v124 = F118.length;
v124--;
const v126 = new F118();
v126.b = v126;
