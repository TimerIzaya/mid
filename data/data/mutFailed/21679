const v0 = /^xxx$a(x)(x)(x)\2+/guimy;
const v1 = /(?:ab){4,7}(ab)\1^xxx$+/gudisy;
const v2 = /[\p{Script_Extensions=Mongolian}&&\p{Number}][\ca](\ud808\udf45*)/vmy;
class C3 {
    [v1];
    static e;
    static valueOf(a5) {
        const o6 = {
        };
        new Proxy(this, o6);
        super[v2] = v2;
        super.c = a5;
        return v0;
    }
    static a;
    static #b;
    static c = v1;
}
let v9 = new C3();
new C3();
const v11 = new C3();
class C12 {
    constructor(a14, a15) {
        try { this(v1, a15, this, this, v9); } catch (e) {}
        [-46898,256,-1024,9,536870889,1,23466];
        [23725,9223372036854775807,-465343782,-59348,-4294967296,1073741823];
        [11,-1679124210,-1073741824,-4294967297,1060399963,-2,5,5,536870888,63623];
        const o20 = {
        };
        new Proxy(v2, o20);
    }
    1073741824;
    static #h = C3;
    b;
    0;
}
new C12(v0, v2);
const v24 = new C12(v2, v1);
new C12(v1, v0);
v9 = v24;
C3 = v11;
v0[8];
new Uint32Array(2);
new Int8Array(231);
new Float32Array(6);
const v42 = new Int8Array(268435456);
const v44 = new Float32Array();
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this.constructor;
    try { new v51(v44, a49, 2); } catch (e) {}
    this.h = a48;
}
const v53 = new F45(v42, Int8Array, F45, v44);
function f54(a55, a56, a57) {
}
const v60 = [v53];
const o61 = {
    "arguments": v60,
    "type": "function",
};
new Worker(f54, o61);
