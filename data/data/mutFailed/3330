const v1 = /(x)(x)(x)\1/uis;
function f2(a3, a4, a5, a6) {
    const o13 = {
        2: a5,
        __proto__: a6,
        [v1](a8, a9, a10, a11) {
            super.test();
        },
    };
    return a3;
}
f2();
%OptimizeFunctionOnNextCall(f2);
const o16 = {
};
class C17 {
    constructor(a19, a20) {
        const o34 = {
            84: arguments,
        };
    }
}
let v40 = 1.2557225835067876e+308;
v40 ^ v40;
v40++;
let v44 = 846.3193819892806;
v44 * v44;
v44++;
const v47 = [1000000000.0,-1000.0];
v47[1] = v47;
[1000000.0,2.2250738585072014e-308,5.0,-4010.489191372646,0.5133586631499465,1000000000000.0,1.0,0.869829224804143,-2.0,-0.6328581906313957];
const t30 = [Infinity];
const v51 = new t30();
const v53 = new Float32Array(v51, "nt", Float32Array);
const t34 = "nt";
const v54 = delete t34[v53];
let v55;
try { v55 = v51.floor(v54); } catch (e) {}
for (const v56 in v55) {
}
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this?.constructor;
    try { new v61(v47, v47); } catch (e) {}
    const o63 = {
    };
    ("vZa2U").normalize("NFKC");
    a59--;
    a60--;
    a59 & a59;
    try {
        this.b = -458533.0016034916;
    } catch(e70) {
    }
    try {
        this.d = a59;
    } catch(e71) {
    }
}
new F57(1546385780, -458533.0016034916);
new F57(-63755, v44);
new F57(-63755, v44);
try { ("ex7").codePointAt(v47); } catch (e) {}
const v78 = "ex7" <= Uint8ClampedArray;
v78 || v78;
