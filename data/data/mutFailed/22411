class C3 {
    #e;
    static #b;
    b;
    static 10;
    constructor(a5, a6) {
        for (let i = 0; i < 5; i++) {
            this[this];
        }
    }
    static {
        new WeakSet();
        async function* f11(a12, a13, a14) {
            return this;
        }
        f11.name;
        try {
            this.#e = this;
            function f17(a18, a19) {
                const o20 = {
                    [a18]: a19,
                    [a19]: -65537,
                    65536: -65537,
                };
                return -65537;
            }
        } catch(e21) {
            const t27 = -9007199254740992n;
            t27.e = e21;
        }
    }
    static 79 = 4n;
    static h;
    [-9007199254740992n] = 4n;
    static #d;
    static #f;
    [4n];
    #valueOf(a23, a24, a25, a26) {
    }
    #g;
    set g(a28) {
        super.d = C3();
    }
}
const v30 = new C3();
const v31 = new C3();
new C3();
let v33 = 1;
v33++;
11 > 11;
const v41 = new Int16Array(Array(11));
v41[2] = v41;
new v31(Int32Array, Int32Array, Int32Array);
class C45 {
    toString(a47, a48, a49, a50) {
        try { this["throw"](); } catch (e) {}
        const v56 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v56, eval());
    }
    constructor(a61, a62) {
        function F63(a65, a66, a67) {
            if (!new.target) { throw 'must be called with new'; }
        }
        typeof arguments;
        for (let i = 0; i < 5; i++) {
            this[this];
        }
    }
}
try { new C45(v30, -1024); } catch (e) {}
Array >>> 6;
const t70 = 11;
new t70(6);
function f78(a79, a80, a81, a82) {
    try { Set.apply(a79, a82, a79, Set, a80); } catch (e) {}
    const v86 = new BigInt64Array(4046);
    [,...a82] = v86;
    return a82;
}
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v89 = new Uint8ClampedArray(4057);
v89[3469];
new Int16Array(47);
const o97 = {
    "maxByteLength": 1000,
};
o97.b = o97;
const v99 = new ArrayBuffer(2, o97);
v99.resize(9);
