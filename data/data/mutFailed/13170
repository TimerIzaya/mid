class C3 {
    4;
    static #o(a5, a6) {
        try { this.toString(); } catch (e) {}
        ("5H").__proto__;
        return a5;
    }
    #m(a10, a11) {
        this["function"] = a10;
        let v12 = 0;
        return -65537;
        class C15 extends Array {
        }
        const v16 = new C15();
        1073741823n == v16;
        do {
            super.b;
            const o24 = {
                [122188848n](a22, a23) {
                },
            };
            v12++;
        } while ((() => {
                let v29 = 144;
                const v30 = v29++;
                function f31(a32) {
                    return v30;
                }
                return v12 < 8;
            })())
        return v12;
    }
}
C3.d = C3;
const v35 = new C3();
v35[4] = v35;
new C3();
new C3();
[0,16,407180691];
[2147483648,-1,-5,-2,536870889,-29045,-14];
for (let v40 = 0; v40 < 5; v40++) {
    function f41() {
        function f42() {
            return v40;
        }
        return f42.call(v40);
    }
    ~f41();
    %OptimizeFunctionOnNextCall(f41);
}
[-2147483648];
15 >>> 15;
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F54(a56, a57, a58, a59) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v60 = new F54(v53, F51, v53, F54);
    const v62 = [F51,F51,F51,F51];
    Reflect.apply(v53.indexOf, v60, v62);
}
69862390n / 69862390n;
-25283n << -25283n;
const v72 = -25283n >> (-25283n && -25283n);
v72 >> v72;
v72 | v72;
