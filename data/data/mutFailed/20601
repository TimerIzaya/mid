const v2 = new Uint8ClampedArray(203);
127 >>> 127;
const v6 = new Int16Array(127);
const v9 = new Uint32Array(0);
try { v9.lastIndexOf(Uint32Array); } catch (e) {}
function f11(a12, a13) {
    a12 === a12;
    const o21 = {
        ...v6,
        "e": Int16Array,
        __proto__: v9,
        [-2]: a13,
        "f": v9,
        valueOf(a16, a17, a18) {
            try {
                v6.every(a13);
            } catch(e20) {
            }
            return a16;
        },
        [203]: 127,
        "h": 203,
        "c": Int16Array,
    };
    return o21;
}
const v22 = f11?.constructor;
try { new v22(Uint32Array); } catch (e) {}
f11(0, Uint32Array);
f11(0, Uint32Array);
f11(0, Int16Array);
/(NdOj[x\dz]^xxx$)/gum;
const v28 = /\xed\xb0\x80/gudisy;
v28.lastIndex;
const v30 = /(ab|cde)\1a[a-z]?/udy;
const v31 = [-1727815353,-9007199254740991];
const v32 = v31?.keys;
let v33 = -7;
let v34 = 0;
while (v34 < 1) {
    const v39 = v33--;
    Math.atan(v39);
    v33 * 7;
    Math.floor(7);
    const v43 = v39 + 7;
    v43 * v43;
    v34++;
}
try { new v32(); } catch (e) {}
const v47 = [4,13];
try { v47.lastIndexOf(Uint8ClampedArray); } catch (e) {}
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v53 = new Int16Array(16);
try { v53.find(v53); } catch (e) {}
-0.29489550717955537;
0.6822080711934364 / 0.6822080711934364;
const t54 = "string";
t54[1] = "string";
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    a63[5];
    const v66 = this?.constructor;
    const v67 = v66?.constructor;
    try { new v67(v66); } catch (e) {}
    try { new v66(0.29489550717955537, a63); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e71) {
        const v74 = new Uint16Array(231);
        new Int8Array(v74);
    }
}
const v77 = F61?.constructor;
try { new v77(v2); } catch (e) {}
let v79;
try { v79 = new v77(F61); } catch (e) {}
const v80 = v79?.__lookupSetter__;
try { new v80(v30); } catch (e) {}
const v82 = new F61("string");
v82.f = v82;
let v84 = 127;
v84 == v84;
v84++;
const v87 = v84 != v84;
const v90 = new Int32Array(Int32Array);
const v91 = [];
function f92() {
    const o94 = {
        p() {
            return f92;
        },
        [v91]: v91,
        "a": v91,
    };
    const v95 = o94?.constructor;
    let v96;
    try { v96 = new v95(v87); } catch (e) {}
    const v97 = v96?.constructor;
    try { new v97(v96); } catch (e) {}
    return v91;
}
f92();
const v100 = f92();
try { v100.findLast(0.29489550717955537); } catch (e) {}
const v102 = f92();
try { v102.findLast(v102); } catch (e) {}
const v104 = (a105, a106) => {
    return v102 * a106;
};
0.6058227007604853 | 0.6058227007604853;
let v110 = -Infinity;
v110++;
129 >>> 129;
try { new Float64Array(v28, v28, v47); } catch (e) {}
const v116 = new Float64Array(129);
let v117;
try { v117 = v116.entries(); } catch (e) {}
const v118 = v117?.__lookupSetter__;
try { new v118(0.6822080711934364); } catch (e) {}
try { v117.next(); } catch (e) {}
255 - 255;
class C123 {
    static [v90] = 0.29489550717955537;
}
true || true;
const v126 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
v126[4] = v126;
const o128 = {
    valueOf() {
        return true;
    },
};
v126.length = o128;
class C129 {
}
try { new C129(); } catch (e) {}
const o131 = {
};
("Xkz0W")[1];
class C134 {
}
Uint32Array.toString();
const v139 = new v33();
const v140 = new BigUint64Array();
function F141(a143, a144, a145, a146) {
    if (!new.target) { throw 'must be called with new'; }
    const v147 = this.constructor;
    try { new v147(v140, 6, 6); } catch (e) {}
    a143[9];
    a146--;
}
const v151 = new F141(v139);
new F141(v151);
let v153;
try { v153 = ("Xkz0W").split(v31, -536870912); } catch (e) {}
try { v153.reduce(v153); } catch (e) {}
class C155 {
    set b(a157) {
    }
}
const v158 = new C155();
const v159 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v159(v158); } catch (e) {}
function f161(a162, a163) {
}
for (const v164 in v110) {
    function F165(a167, a168) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e169) {
} finally {
}
