const v2 = [];
const t0 = 256;
const v3 = new t0();
function F5(a7, a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    const v11 = this?.constructor;
    try { new v11(a8, v2, -1263139894, a8); } catch (e) {}
    const v13 = a10?.constructor;
    try { new v13(v3); } catch (e) {}
}
const v15 = new Int8Array(256);
const v19 = new WeakMap();
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(v19); } catch (e) {}
    try {
        this.c = WeakMap;
    } catch(e25) {
    }
}
const v26 = new Uint32Array(4096);
const v29 = new Uint16Array(41);
function f30(a31, a32) {
    const o47 = {
        "b": 256,
        "a": v29,
        "e": Int8Array,
        set d(a34) {
            Math.cos(-197199362);
            let {...v40} = [];
            const o42 = {
                "maxByteLength": 1741,
            };
            const v44 = new ArrayBuffer(16, o42);
            new Float32Array(v44);
        },
    };
    return o47;
}
const v48 = f30(41, v26);
const v49 = f30(256, v29);
const v50 = f30(4096, v48);
class C51 {
    static b = 41;
    #m(a53, a54, a55, a56) {
        super.f = v49;
        try {
            super.valueOf(this, a53, v50, a56, a54);
        } catch(e58) {
        }
        super.b = C51;
        try {
            v49.#m(a55, a54);
        } catch(e60) {
        }
        return f30;
    }
    static #h;
    static [4096] = v50;
    h;
    268435439;
    static 1073741825;
    c = Uint16Array;
    static {
        this[Symbol.hasInstance];
    }
    b = Int8Array;
    [v15];
    static #g = v48;
    [Uint16Array];
}
new C51();
new C51();
new C51();
const v70 = new Uint8Array(1);
Float32Array.from(v70);
