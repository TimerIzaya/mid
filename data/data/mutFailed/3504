const v2 = new Float64Array(5);
const v5 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
new Set(v5);
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a10;
    } catch(e12) {
        for (let [v13,v14] of a10) {
        }
    }
    try {
        const t12 = v5[this];
        let v16 = delete t12?.d;
        v16 = a10;
        Math.clz32();
        Math.acos(this);
        const t14 = Math.max(255);
        new t14();
    } catch(e23) {
    }
}
Int8Array.name = Int8Array;
new Int8Array(256, v2, Int8Array);
const v28 = new String();
Object.defineProperty(v28, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
const t26 = [0.0,-1000.0,2.557943047142931];
t26.valueOf = 5;
const v32 = /(?:a*)+q(?<a>.)/guds;
function f33(a34) {
    a34.dotAll = a34;
    const o38 = {
        set b(a36) {
        },
        get d() {
            return a34;
        },
        __proto__: v32,
    };
    return o38;
}
const v39 = [];
function F40() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = this;
    } catch(e42) {
    }
}
new F40();
new v2();
const v45 = new F40();
function f46(a47, a48) {
    const o57 = {
        "h": v45,
        199: a47,
        "b": F40,
        "a": v39,
        n(a50, a51, a52) {
            try {
            } catch(e56) {
            }
        },
    };
}
new Int8Array(1000);
new Uint32Array(127, 5, 256, Uint32Array);
25148n & 25148n;
function F67(a69, a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
}
class C73 {
}
new Uint8Array(268435440);
const v77 = v45.reject(Promise);
try { v77.catch(Uint32Array); } catch (e) {}
