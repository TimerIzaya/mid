[0.09407012589500496,-1.0,1000000000000.0];
[1000000000000.0,625.6458428640376,NaN,NaN,-2.220446049250313e-16,-3.0,-637.3710977882712,0.39560036828009015,1.2846018983383448e+308,1.0445561422901864e+308];
[-6.716054032034675e+307];
function f5() {
    const o7 = {
        get c() {
            return this;
        },
    };
    return o7;
}
class C8 extends f5 {
    #toString(a10, a11, a12, a13) {
    }
}
const v14 = new C8();
new Float32Array(3788);
new Uint8ClampedArray(683);
const v21 = new Int32Array(1841);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e27) {
    }
}
function f28(a29, a30) {
    class C34 {
        get b() {
        }
        #e;
        c = 3.2255150730772826;
    }
    const v36 = new v14();
    function f37(a38, a39) {
        return a39;
    }
    v36.toString = f37;
    const v40 = new C34();
    v40.toString = f37;
    const v41 = new C34();
    v41.c = v41;
    class C42 {
        [v40];
        #toString(a44, a45, a46) {
        }
        [3.2255150730772826] = v36;
        188 = C34;
        static 3865;
        4 = v36;
        #g = C42;
    }
    try { C42.call(v36); } catch (e) {}
    const v48 = new C42();
    const v49 = v48?.__lookupGetter__;
    try { v49(C42); } catch (e) {}
    const v51 = new C42();
    const v52 = v51?.constructor;
    try { v52(); } catch (e) {}
    const v54 = new C42();
    function f55() {
        const t60 = "symbol";
        t60[v36] = v41;
        class C57 {
        }
        const v58 = C57();
        const v59 = C57();
        function f60(a61, a62) {
            const o71 = {
                [-943.3768400471749]: v59,
                [a62](a64, a65, a66) {
                },
                p(a68, a69) {
                    this.toString(a69, this, v58);
                    return -943.3768400471749;
                },
            };
            return o71;
        }
        return v48;
    }
    v54.constructor = f55;
    const v72 = v54?.constructor;
    try { v72(); } catch (e) {}
    class C74 {
        static {
            try { this(); } catch (e) {}
            let v77 = 0;
            while ((() => {
                    const v79 = v77 < 6;
                    !v79;
                    return v79;
                })()) {
                v77++;
            }
        }
    }
    function f82(a83) {
        return a29 ^ a30;
    }
    this.onmessage = f82;
}
const o87 = {
    "type": "function",
};
function f88() {
    return v21;
}
function f89(a90) {
    ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach(o87);
}
Object.defineProperty(o87, "arguments", { enumerable: true, get: f88, set: f89 });
new Worker(f28, o87);
new BigInt64Array(2147483649);
