const v1 = [3.0902824605435875,1.036424495075876e+308,-1.0,263859.0064649093,-982.3172807027809];
const v2 = [-434208.6558949752,-1.1068305236107812e+307,-230625.81079230388,5.0,1e-15,-1.0,-7.667156992018455e+307,-662.802749163073,1.6916058244400326e+308];
const v3 = [0.6502778943924992,-5.092049271387503e+307,-1.7976931348623157e+308,-7.5656233208495e+307,Infinity,-240.50115684991272,-5.0,268091.85819458123];
class C4 {
    constructor(a6) {
        function f8(a9) {
            a9 ^ a9;
            return 36002;
        }
        function f11(a12, a13) {
            return f8;
        }
        new Promise(f11);
        try { this["valueOf"]("valueOf", "valueOf", v3, "valueOf"); } catch (e) {}
    }
    p(a19) {
        const o20 = {
            11: this,
            "c": v2,
        };
        function F23(a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            function F28(a30, a31, a32, a33) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v34 = new F28();
            const v37 = new BigInt64Array(4046);
            function f38(a39, a40) {
                Object.defineProperty(v34, v34, { configurable: true, enumerable: true, get: f38 });
                let o42 = {
                    get e() {
                        return a25;
                    },
                };
                [,...o42] = v37;
                return a39;
            }
            f38();
        }
        const v45 = Uint8ClampedArray.prototype;
        const v46 = super.b;
        v1[v1] = C4;
        v3["splice"](v46, v46, v46, a19);
        o20[9] = v1;
        try { v45.at(Uint8ClampedArray, Uint8ClampedArray, v45, Uint8ClampedArray); } catch (e) {}
        return v2;
    }
}
let v51 = new C4(v3);
const v52 = new C4(v51);
const v54 = [0n,0n,0n,0n];
class C55 {
    constructor(a57, a58) {
        function F59(a61, a62) {
            if (!new.target) { throw 'must be called with new'; }
            const v63 = this?.constructor;
            try { new v63(v54, this); } catch (e) {}
            a62 ^ a62;
            this.b = v3;
        }
        new F59();
        new F59();
        new F59();
    }
}
const v69 = new C4(v52);
try { SharedArrayBuffer.apply(); } catch (e) {}
const v74 = new SharedArrayBuffer(217);
v74.slice(v74, 16);
let v77 = 333;
const v78 = [1073741824,1073741823,1376142744,1073741825];
let v79 = 217 && 217;
({"h":v79,"length":v51,...v77} = v78);
this == this ? this : this;
v51["p"](v3, C4, v69, C4, ...v1, v52);
v51[v69] = undefined;
-Infinity;
new Date();
function F93(a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    const v97 = this.constructor;
    try { new v97(this); } catch (e) {}
    a96 >>> a96;
}
new F93();
new F93();
