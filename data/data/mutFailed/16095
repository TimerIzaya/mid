class C3 {
    toString(a5, a6) {
        switch (a5) {
            case a6:
                a5 == -1000000.0 ? a5 : -1000000.0;
                break;
        }
        return -38127;
    }
    static 16 = -1000000.0;
    #e = -1000000.0;
    static [-38127];
}
const v9 = new C3();
new C3();
const v11 = new C3();
class C12 {
    static p(a14, a15, a16) {
        a15[v9] = this;
        Math.sign(268435456);
        let v22 = 268435456 / 254816.21397192264;
        Math.asin(v22);
        Math.sqrt(254816.21397192264);
        268435456 >> -251.55638049515085;
        254816.21397192264 >>> 254816.21397192264;
        v22--;
        return C3;
    }
}
const v28 = [];
v28[6] = C12;
v28[6] = 4294967295;
const o42 = {
    get d() {
        function f33(a34) {
            a34 > this;
            let v36;
            try { v36 = v11.toString(0); } catch (e) {}
            return v36;
        }
        this.toString = f33;
        this[0] /= 4294967296;
        let v38 = -908890636;
        return Math.log(this & --v38);
    },
};
function f43() {
    new BigUint64Array(3375);
    return -1000000.0;
}
o42.toString = f43;
for (let i = 0; i < 10; i++) {
    o42.d;
}
new C12();
new C12();
new C12();
new BigUint64Array(2);
new Uint32Array(1000);
new Float32Array(1000);
const v60 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v62 = new Int16Array(v60, v60, v60);
const v64 = [1073741824,1073741823,1376142744,1073741825];
function f65(a66, a67, a68, a69) {
    try {
        const v71 = Symbol.iterator;
        const o73 = {
            [v71]() {
            },
        };
    } catch(e74) {
    }
    function f75() {
        new Int32Array(v60, a69, v62);
        try {
            v64.forEach(a67);
        } catch(e79) {
            const v81 = /xyz{1,32}?/gusy;
            class C82 {
                268435440 = v81;
            }
            new C82();
            const v84 = new Float32Array();
            const v85 = [];
            [v85,v85,v85,v85];
            let v87 = -3n;
            v87--;
            let v89 = "-185650492";
            const v92 = new BigUint64Array();
            const v94 = new Set();
            function F95(a97, a98) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = a97;
                } catch(e99) {
                    for (let [v100,v101] of a97) {
                        class C102 {
                        }
                        v89 = e99;
                        v100 ^= v92;
                        C102 != a97;
                        const v104 = new C102();
                        const t102 = v104.g;
                        t102.length = 1;
                    }
                }
                try {
                    this.h = v94;
                } catch(e107) {
                    this.toString();
                    ("E")[2555];
                }
                try {
                    const v110 = v94[this];
                    try {
                        new F95(v110, -2046072084n);
                    } catch(e113) {
                    }
                    const o115 = {
                    };
                    const v117 = new SharedArrayBuffer(1024, o115);
                    new BigInt64Array(v117);
                    this.b = Set;
                } catch(e120) {
                }
            }
            v84[2] = v84;
            function f121() {
                const o127 = {
                    "e": -38127,
                    ..."Vre",
                    valueOf(a125, a126) {
                    },
                    ..."Vre",
                    "c": f65,
                    5: -38127,
                    6: -268435456,
                };
                return Float32Array;
            }
        }
        const o135 = {
            [-4294967297n](a129, a130, a131, a132) {
                eval();
            },
        };
        return o135;
    }
    f75();
    eval();
    %OptimizeFunctionOnNextCall(f75);
    return -4294967297n;
}
for (let v139 = 0; v139 < 5; v139++) {
    f65();
}
