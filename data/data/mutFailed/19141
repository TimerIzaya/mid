function f3(a4, a5) {
    a4[3];
    const v7 = a5[2];
    const o27 = {
        "h": a4,
        "g": a5,
        o(a9, a10) {
            super["species"];
        },
        162: "species",
        "type": "8Aj",
        __proto__: "d",
        o(a13) {
            let v14;
            try { v14 = new a4(a13); } catch (e) {}
            try {
                super.push(v14, "species", v14);
            } catch(e16) {
                const v17 = this[9];
                const t18 = "8Aj";
                t18[5] = a4;
                const v18 = super.c;
                const o19 = {
                };
                try {
                    o19.h = v18;
                } catch(e20) {
                }
                try {
                    const o21 = {
                    };
                    o21.h = v18;
                    o21.a = v18;
                } catch(e22) {
                }
                try {
                    const o23 = {
                    };
                    o23.h = v18;
                    o23.a = v18;
                    o23.f = this;
                } catch(e24) {
                }
                try {
                    const o25 = {
                    };
                    o25.h = v18;
                    o25.a = v18;
                    o25.b = v17;
                } catch(e26) {
                }
            }
            return "species";
        },
    };
    const v28 = o27?.toLocaleString;
    try { v28.bind(v7); } catch (e) {}
    try { new v28(); } catch (e) {}
    return o27;
}
let v31;
try { v31 = f3("8Aj", f3); } catch (e) {}
const v32 = f3("species", "species");
v32.h = v32;
const v33 = f3("species", "species");
const v34 = f3("8Aj", "8Aj");
v34.b = "species";
v34.b = v34;
Object.defineProperty("8Aj", "b", { writable: true, configurable: true, value: "species" });
("8Aj").__proto__;
new BigUint64Array(2122);
const v44 = new Float32Array(3);
try { v44.join(v44); } catch (e) {}
1000 - 1000;
new Int16Array(1000);
try { v31(Int8Array); } catch (e) {}
Float32Array[9] = 255n;
const v56 = BigUint64Array?.constructor;
try { new v56(Float32Array); } catch (e) {}
BigUint64Array[0] = f3;
try { BigUint64Array.bind(v33); } catch (e) {}
new Int8Array(BigUint64Array);
