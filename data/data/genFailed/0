const v0 = [9007199254740992];
[536870912,-2147483649,-567785549,1162102218,268435440];
const v2 = [1073741823,6,-9007199254740990,1073741825,9,5];
let v4 = -2n;
const v7 = new Map();
[2n,2n,[v7,v7,v2],v2];
[v0,v2,v7,v2,v2];
new BigInt64Array(64);
new BigUint64Array(127);
new Uint8Array(218);
Math.acos(v4);
2147483647 + 2147483647;
Math.max(v4);
v4++;
Math.acosh(v4);
const o30 = {
    "maxByteLength": 536870912,
};
const v32 = new SharedArrayBuffer(241, o30);
new BigUint64Array(v32);
class C3 {
    set c(a5) {
        let v6 = 0;
        while (v6 < 5) {
            16n << v6;
            v6++;
        }
    }
    a = 16n;
    static a;
    static 1411743802;
    static 2;
}
new C3();
new C3();
const v13 = new C3();
const v17 = [9007199254740990n,-65537,-65537,-65537,v13];
const v18 = [v17,v17,16n];
const v19 = [v18,-1196757660,v13,v18,v13];
function f23(a24, a25, a26) {
    function f28(a29) {
        delete a29?.[v19];
        try { v19.indexOf(a29, a29); } catch (e) {}
    }
    this.onmessage = f28;
}
const v37 = ["function",f23,v17];
const o38 = {
    "arguments": v37,
    "type": "function",
};
new Worker(f23, o38);
