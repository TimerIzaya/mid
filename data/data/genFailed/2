function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -4056;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
class C7 extends F0 {
    static h = v4;
    256;
    static set b(a9) {
        v4 ^ this;
        try {
            const o11 = {
            };
            v5.fuck(o11, o11);
        } catch(e13) {
        }
    }
    static [v6] = v4;
    static #h;
    static [F0];
}
const v14 = new C7();
new C7();
new C7();
class C20 {
    set h(a22) {
        const o24 = {
            "b": 1000n,
            ...v4,
        };
        try {
            v14[this] = this;
        } catch(e25) {
        }
    }
    [F0] = -61024n;
    static #d;
    #c;
}
new C20();
new C20();
const v28 = new C20();
let v31 = 566915935;
const v32 = -Infinity;
v32 << v6;
v32 ^ v31;
++v31;
v32 >> 1000n;
try {
    v28.toString = v28;
} catch(e37) {
}
const v1 = new WeakSet();
class C2 extends WeakSet {
    static #h = WeakSet;
    toString(a4) {
        const v5 = this[WeakSet];
        a4.f ^= a4;
        try {
            a4.toString = v5;
        } catch(e6) {
        }
        return this;
    }
    [WeakSet] = WeakSet;
}
const v7 = new C2();
const v8 = new C2();
const v9 = new C2();
[-9007199254740992,-4294967297,43214,1581472182,268435440,268435456,536870887,268435456,-1,-1073741824];
const v11 = [129,1262132466,43350,55017];
[4294967295,-1,2,536870889,1807348448];
const v13 = [WeakSet,v9,v8,v7,v8];
const v14 = [WeakSet,v11,v13,v8];
[v1,v14];
const o16 = {
    __proto__: v1,
    1: v13,
    [v14]: v8,
    "d": v8,
};
[5.024769602355946,-9.895851858575446e+307,-2.220446049250313e-16,2.2250738585072014e-308,2.0,-1.7615237754191131e+308,-3.0,-2.220446049250313e-16];
[-4.0,-564.6768441733375,-1.7976931348623157e+308,-2.845758901775497,1.7976931348623157e+308];
[0.6945800223200672,7.8189368473103755,1000000000000.0,-0.24996684140770853,NaN,1.4959202947746245e+308,-609.5430592497717,-5.0];
for (let v20 = 0; v20 < 32; v20++) {
    v14["p" + v20] = v20;
}
