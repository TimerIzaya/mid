[-1000000000.0,8.881363515798572,-2.2250738585072014e-308,0.9565605682468605,2.925251672585084,-1.5075569613813833e+308,152.7417923354369];
[9.243565745015655,-63.48377862014854,5.663386653492507e+307,-3.0,-1.0,0.9464692076677362,-1.3868784638238132e+308];
[0.9178229807931475,7.24589725482104e+307,0.9689024130322295,-2.2250738585072014e-308,-7.126746620604026,-911.119375823424,0.4301238459785901,7.022925959135896e+307,0.0,-5.766098499152855e+307];
[1.7976931348623157e+308,NaN,911380.3041381952,-4.1300261333581547e+307,0.31421789027787517,2.220446049250313e-16,-1000000000.0,886.6658762393847];
[1.0,2.220446049250313e-16,-860.6313182097254,1.7545338889538193,2.2250738585072014e-308,1000000000000.0,-5.0,873.0622239326538];
for (let v8 = 0; v8 < 10; v8++) {
}
const o12 = {
    set c(a11) {
    },
    [9007199254740991]: 9007199254740991,
};
class C14 extends o12.constructor {
}
[37.81244158979075,8.9939949014526e+307,1.7976931348623157e+308,3.828650062480918,2.9010489721387227,535927.0948935326,-975.134651365764];
new Float32Array(16);
function f19() {
    const o24 = {
        ..."MAX_SAFE_INTEGER",
        "h": 45147,
        "g": 45147,
        "f": "MAX_SAFE_INTEGER",
        m(a23) {
            super[a23] = a23;
            return 45147;
        },
    };
    return f19;
}
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    function F33(a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
        const v37 = this.constructor;
        try { new v37(); } catch (e) {}
        a35.sticky;
    }
}
const v40 = new F31();
const v41 = new F31();
const v42 = new F31();
Int16Array > "push";
try { this(); } catch (e) {}
const v49 = new WeakMap();
const v50 = [v49];
const v52 = /vs(?:a+)?/mgsi;
new Symbol(v52, /G(?:ab)Xa*b/sdv, Symbol, Symbol, Symbol, v52);
const v57 = [0,"push","n"];
[v57,17,v57,v57];
const v59 = [v49,v40,F31];
const v60 = [F31,v42,v41,v49,v59];
try {
    Int32Array(9);
} catch(e64) {
}
try {
    Int16Array(4096);
} catch(e68) {
    try {
        new Uint8Array();
    } catch(e71) {
    }
}
try {
    SharedArrayBuffer(19);
} catch(e75) {
}
v59[8] = SharedArrayBuffer;
try { v60(); } catch (e) {}
try {
    v50[-1];
    for (let v78 = 0; v78 < 5; v78++) {
        var g = v78;
    }
    Math.tan(-2.0);
} finally {
    /[\0]/gd;
}
