let v5 = -65537n;
function f7() {
}
function f8() {
    function f9() {
        for (let v11 = 0; v11 < 10; v11++) {
            new BigInt64Array(2147483648);
        }
        return "undefined";
    }
    return f9;
}
function f14(a15) {
    function f16() {
        return a15;
    }
}
Object.defineProperty(f7, Symbol.toPrimitive, { writable: true, get: f8, set: f14 });
class C19 {
    [f7] = f7;
    3;
}
const v20 = new C19();
function F21(a23) {
    if (!new.target) { throw 'must be called with new'; }
    a23[3];
    const v25 = this.constructor;
    try { new v25(a23); } catch (e) {}
    a23[3];
}
new F21(v20);
class C31 {
    static set b(a33) {
        try {
            super.defineProperties("toString", "toString");
        } catch(e35) {
        }
        const o40 = {
            toString(a37, a38) {
                this <= a38;
                return a37;
            },
        };
    }
    static {
        try {
            v5 *= v5;
        } catch(e42) {
        }
        class C44 {
            constructor(a46, a47) {
                a47.valueOf = 1000000.0;
            }
        }
    }
    #f;
}
new C31();
Math.tan(-3.0);
Math.log1p(0.22069489609198067);
new C31();
new C31();
class C58 extends Int32Array {
}
const v59 = new C58();
v59.buffer;
let {...v61} = v59;
const o64 = {
    [Int8Array]: 1,
};
[o64];
