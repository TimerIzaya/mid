const v0 = [257,-1919414564,-1335642808,-863842013,-536870912,192629251,-169637599,-44699,-41276];
const v1 = [1,62063,1024,-1296038250,12,-7,4294967297,2033,-58448];
const v2 = [536870889,512,-1,536870888,5,-229372023,-9223372036854775807,9007199254740991];
Set.prototype = Set;
const v4 = new v2();
class C5 extends Set {
    static #valueOf(a7, a8) {
        let v6 = this;
        try {
            v6 = v1;
        } catch(e9) {
        }
        return a7;
    }
    #b;
    static 65537 = v1;
    [v0];
    [v1];
    [Set];
    #c = v1;
}
const v10 = new C5();
const v11 = new C5();
const v12 = new C5();
const v13 = v12?.constructor;
let v14;
try { v14 = new v13(); } catch (e) {}
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = v14?.constructor;
    try { new v21(this, F15, a17, this); } catch (e) {}
    a17.size;
    try {
        this.a = a17;
    } catch(e24) {
    }
    try {
        this.h = a19;
    } catch(e25) {
    }
    try {
        this.f = v10;
    } catch(e26) {
    }
}
new F15(v11, v4, v4, v11);
new F15(v12, v4, v12, v4);
new F15(v12, v12, v1, v11);
0.06684357880435932 & 0.06684357880435932;
function f32(a33, a34, a35) {
    return a34;
}
[0.06684357880435932];
const o39 = {
    "arguments": v13,
    "type": "function",
};
new Worker(f32, o39);
try { v13.terminateAndWait(); } catch (e) {}
