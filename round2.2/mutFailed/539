class C3 {
    static set b(a5) {
        try {
            this.fuck(a5, -1.7976931348623157e+308, -1073741824, this);
        } catch(e7) {
        }
    }
    [-1073741824];
    static get a() {
        try {
        const t0 = "sqrt";
        t0(this, this, this);
        } catch (e) {}
        let v11 = 4;
        --v11;
        v11--;
        !-536870912;
        return -536870912;
    }
    constructor(a18, a19, a20, a21) {
        super();
        try {
            this.buffer = a19;
        } catch(e22) {
        }
    }
}
let v23;
try { v23 = new C3(); } catch (e) {}
const v24 = new C3();
const v25 = v24?.constructor;
function f26(a27, a28, a29, a30) {
    const o31 = {
        ...v23,
        [-1]: a27,
    };
    return o31;
}
const v32 = f26(C3, v24, v24, v25);
const v33 = f26(v24, -1073741824, v32, "sqrt");
f26(v24, v33, C3, v33);
try { new v25(); } catch (e) {}
const v36 = new C3();
const v37 = new C3();
function f38() {
    ("b").fontsize("b", "b", "b");
    return "sqrt";
}
v37.constructor = f38;
const v41 = v37?.constructor;
try { new v41(); } catch (e) {}
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v32;
    } catch(e48) {
    }
    try {
        this.h = v36;
    } catch(e49) {
    }
    try {
        this.f = a46;
    } catch(e50) {
    }
}
new F43("sqrt", v41, C3);
const v52 = new F43(C3, "sqrt", C3);
new F43(v33, v33, v52);
[true,-1073741824,v36,[v37,"sqrt",v37,-1073741824]];
const v57 = [-1073741824];
try { v57.reduceRight(v24); } catch (e) {}
257 & 257;
function f64(a65) {
}
class C66 {
}
const v67 = new C66();
const v68 = new C66();
class C70 extends C66 {
}
const v71 = new C70();
function f72(a73, a74, a75) {
    v67 instanceof C70;
    a75[a74] = a74;
    return a75;
}
for (let v77 = 0; v77 < 10; v77++) {
    f72(v71, 8, v68);
}
-1850789415 >>> -1850789415;
const o85 = {
    set b(a84) {
    },
};
