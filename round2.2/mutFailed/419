class C6 {
    9 = -1024;
    static #d;
    n(a8, a9, a10, a11) {
        try {
            a8?.a;
            try {
                super[4] = 257;
            } catch(e16) {
            }
            this.__proto__ = this;
            Math.cbrt(-1485457903);
            gc();
        } catch(e22) {
        }
        return a9;
    }
    static #f = 257;
}
for (let v23 = 0; v23 < 5; v23++) {
    ([-65536,268435456,9,-57818,-55405,6,-729204423,5]).fill([0,2147483649,1024,255,-268435456,10000,5,4096,7], 268435440);
    Math.acosh(268435440);
    for (let i33 = 0, i34 = 10; i33 < i34; i33++, i34--) {
        const t23 = ([1.7976931348623157e+308]).values();
        t23.c |= -47441;
        class C47 extends Array {
            constructor(a49, a50, a51, a52) {
                super(890);
            }
        }
        const v53 = [257];
        [v23,i34,i33,v53,v53];
        [i33];
    }
    function f56() {
        return f56;
    }
}
const v57 = new C6();
function F59() {
    if (!new.target) { throw 'must be called with new'; }
}
const v61 = F59 >= Uint16Array;
function* f63(a64, a65, a66) {
    return f63;
}
new v61();
new v57();
class C69 {
}
new v61();
function f71(a72, a73) {
    const o74 = {
        __proto__: a73,
    };
    return a72;
}
class C75 {
}
class C77 {
    p(a79, a80, a81, a82) {
        [a80,..."bigint",this];
    }
}
const v84 = new C75();
function f85(a86, a87, a88) {
    return a88;
}
const v89 = delete v84[f85];
let v90 = "g";
const o92 = {
};
class C93 {
    constructor(a95, a96, a97, a98) {
        for (let i = 0; i < 5; i++) {
            try {
                super.n();
            } catch(e100) {
            }
        }
    }
}
new C93();
const v102 = (a103, a104, a105, a106) => {
    try {
        a104[Set] = v90;
    } catch(e107) {
    }
    return a104;
};
function f110(a111, a112, a113) {
    const o119 = {
        p(a115, a116, a117) {
            let v114 = this;
            [a115,v114,a115,...v90] = a115;
            return typeof a112;
        },
    };
    return o119;
}
const v120 = f110(-500611223, -500611223, v84);
try { v120.p(); } catch (e) {}
Math.tan(+v89);
