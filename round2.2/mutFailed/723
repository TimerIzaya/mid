const v0 = [];
let v1 = 37061;
delete v0[14];
try {
    new Uint32Array(2848);
} catch(e8) {
}
try {
    new Uint32Array(4);
} catch(e12) {
}
try {
    new BigUint64Array(4096);
} catch(e16) {
}
new Map();
class C19 {
    a = v1;
    n(a21, a22, a23) {
        const v27 = -1156599857 & -44133;
        Math.atan2(v1, -1156599857);
        Math.fround(-1156599857);
        --v1;
        Math.round(v1);
        v1 ^ ((-44133) ** v27);
        return v1;
    }
}
new C19();
const v35 = new C19();
const v36 = new C19();
class C37 extends Map {
    constructor(a39, a40) {
        super(C19);
        const v42 = v0.findIndex(...v0, c, c, v1, Map, v35);
        let v44 = -4096;
        Math.cbrt(v44);
        const v47 = v44 || v44;
        Math.atanh(v42);
        Math.imul(v47, v47);
        v44 % 268435456;
        ++v44;
        v42 >>> this;
    }
}
new C37(v36, v1);
new C37(C19, v1);
new C37(v35, Map);
class C56 {
}
const v57 = new C56();
v57.hasOwnProperty(C56) % 484720148n;
try {
    C56 ||= BigUint64Array;
} catch(e63) {
}
