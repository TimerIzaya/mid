function f0() {
}
function f1(a2, a3) {
    const v6 = new Int16Array(11);
    return delete v6[v6];
}
Object.defineProperty(f0, Symbol.toPrimitive, { enumerable: true, value: f1 });
class C10 {
    valueOf() {
        try {
            const v12 = [this,f0];
            v12.fuck(v12, f0, v12);
        } catch(e14) {
        }
        return f0;
    }
    #c = f0;
    static #g = f0;
    static #h;
    h = f0;
    g = f0;
}
const v15 = new C10();
const v16 = new C10();
Object.defineProperty(v16, Symbol.toPrimitive, { value: Symbol });
const v19 = new C10();
function f20() {
    return Symbol;
}
Object.defineProperty(v19, "toString", { configurable: true, get: f20 });
[C10,f0];
const v22 = [f0,v16,v19];
const v23 = [v15,f0];
function f24(a25, a26, a27, a28) {
    function f29(a30, a31) {
        delete a26?.[a31];
        return DataView;
    }
    a28.valueOf = f29;
    try { a27.h(); } catch (e) {}
    const o44 = {
        "e": v23,
        __proto__: a28,
        [v22]: v16,
        ...v19,
        get a() {
            const o38 = {
                "maxByteLength": a28,
            };
            const v40 = new ArrayBuffer(1327, o38);
            try {
                new a27(v40);
            } catch(e43) {
            }
            return 1327;
        },
    };
    function f45(a46) {
        try { new a46(a46, a46, a46, f29); } catch (e) {}
        class C49 {
            o(a51, a52) {
                a52();
            }
        }
        class C54 extends C49 {
            c = 1.7476236565473412e+308;
        }
        const v55 = new C54();
        return v55;
    }
    o44[Symbol.toPrimitive] = f45;
    return o44;
}
f24.valueOf = f0;
const v58 = f24(v16, v16, v15, v22);
v58[2] = v58;
f24(v16, C10, v15, v23);
const v60 = f24(v16, v16, v15, v22);
try { v60.splice(v58, f24); } catch (e) {}
const v62 = [2126604769,179729844,-256,-9,65535,-46093,6,128,2];
v62.constructor = f24;
try { v62.map(f0); } catch (e) {}
[-65537,50890049];
const v65 = [1146169860,64];
try { v65.map(v23); } catch (e) {}
~157;
851564510 + 851564510;
Symbol.name;
const v75 = Symbol.hasInstance.description;
new Int32Array(851564510);
v75.length;
