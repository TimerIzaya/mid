try {
    new Uint8ClampedArray(3512);
} catch(e3) {
}
try {
    new Uint16Array(127);
} catch(e7) {
}
try {
    function F10() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try {
        new Float64Array(7);
    } catch(e16) {
    }
    new Int16Array(2);
} catch(e18) {
}
class C19 {
    static m(a21, a22) {
        const v23 = new Int16Array(a21, a21);
        const o24 = {
        };
        try {
            o24.e = a21;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.e = a21;
            o26.b = v23;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.e = a21;
            o28.b = v23;
            o28.f = Int16Array;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.e = a21;
            o30.b = v23;
            o30.g = Int16Array;
        } catch(e31) {
        }
        return o24;
    }
}
new C19();
new C19();
const v34 = new C19();
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 2;
    } catch(e39) {
    }
    try {
        this.a = a38;
    } catch(e40) {
    }
    try {
        this.g = 127;
    } catch(e41) {
    }
}
new F35(127, 2);
const v43 = new F35(C19, Uint16Array);
new F35(v34, Uint8ClampedArray);
function f45() {
}
new WeakSet();
function f49() {
}
function f50() {
    return f45;
}
function f51(a52) {
    try {
        v43.fuck("9223372036854775807", 1083566674, "object");
    } catch(e57) {
    }
}
Object.defineProperty(f49, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f50, set: f51 });
try { f49(); } catch (e) {}
class C61 extends f49 {
    constructor() {
        super();
        function f63() {
            return f49;
        }
    }
    static 189;
    #f;
    static [f49];
    3;
    d;
    179;
    #c = f49;
}
const v64 = new C61();
const v65 = v64[179];
Object.defineProperty(v64, "f", { configurable: true, set: f49 });
let v68 = 513355.8447510137;
v68--;
const v72 = 1.6250968645626418e+308 + 1.6250968645626418e+308;
function f73() {
    return WeakSet;
}
const v74 = f73?.bind;
try { v74.bind(WeakSet); } catch (e) {}
try { new v74(v68); } catch (e) {}
2052 % 2052;
try {
    new Uint8Array(2052);
} catch(e81) {
}
5 - 5;
"async" == "async";
const o87 = {
    "execution": "async",
    "type": "minor",
};
5 % 5;
Int16Array.length;
function F91() {
    if (!new.target) { throw 'must be called with new'; }
    function f93(a94, a95) {
        this.constructor;
        return v65;
    }
    this.constructor = f93;
    const v100 = this?.constructor;
    try { new v100(); } catch (e) {}
    try {
        this.c = 822223171;
    } catch(e103) {
    }
}
const v104 = new F91();
const v105 = new F91();
v105.toString = f73;
const v106 = new F91();
function f107(a108, a109) {
    try { a108.toLocaleString(); } catch (e) {}
    const o120 = {
        "f": v104,
        p(a112, a113, a114, a115) {
            class C116 extends F91 {
                5;
            }
            new C116();
            new C116();
            const v119 = new C116();
            return v119;
        },
    };
    o120.d = o120;
    return o120;
}
f107(v106, v105);
f107(v105, v104);
Int16Array.name;
try {
    const v124 = new Int16Array(5);
    v124.g = v124;
} catch(e125) {
}
16 & 16;
try {
    new Uint8ClampedArray(16);
} catch(e130) {
    new Uint8Array([[["function","function","function","function"],"function"],2371]);
}
const v138 = /\x01?/gy;
function f139() {
    return f45;
}
function f140(a141) {
    try {
        new F35(v72, "28168");
    } catch(e144) {
    }
}
Object.defineProperty(v138, Symbol.toPrimitive, { configurable: true, get: f139, set: f140 });
const v147 = [v138];
v147.valueOf = f51;
try { v147.toLocaleString(); } catch (e) {}
v147 & 268435456;
const v151 = 2052 * 2052;
v151 * v151;
-2147483648 >>> -2147483648;
const v155 = /8\p{General_Category=Decimal_Number}(a\1)/mgsdvi;
function f156() {
    function f157(a158) {
        const o161 = {
            "maxByteLength": 1198,
        };
        const v163 = new SharedArrayBuffer(64, o161);
        try {
            new Int8Array(v163);
        } catch(e166) {
        }
        return 64;
    }
    return f157;
}
Object.defineProperty(v155, "toString", { writable: true, configurable: true, enumerable: true, get: f156 });
const v167 = v155?.toString;
try { new v167(); } catch (e) {}
const v171 = new Int32Array(949287958);
v171[726475987];
-1.0 + -1.0;
const o176 = {
    [5.161624552045739]: 5.161624552045739,
    [5.161624552045739]: -1.0,
};
gc();
async function f179(a180, a181, a182, a183) {
    await a181;
    return a181;
}
f179();
o176.h = o176;
