const v1 = new Map();
129 * 129;
1073741823n % 1073741823n;
const v11 = new Date();
try { v11.setMilliseconds(v1); } catch (e) {}
let v13;
try { v13 = v11.setUTCMinutes(v11, 536870888, -65537n); } catch (e) {}
v13 - v13;
true || true;
-9007199254740992 - -9007199254740992;
class C21 extends Array {
}
const v22 = [536870887,-2147483648,38638,4294967295];
const t13 = [1,268435456,-17443,-32622,512,255,-7880468,3];
t13[3702013189] = v22;
[1000000000.0,691.0681218696409,-823.8719554513834,-5.0,1000.0,200.99619740396702,-1000000000000.0,-1.0006145945680835e+308,1000000000000.0,-348.49256910694066];
const v26 = [NaN,7.295016864447467e+307,-2.0,0.9915591279937898,-4.0];
try { v26.copyWithin(1073741823n, 1073741823n); } catch (e) {}
const v28 = [1.7976931348623157e+308,2.2250738585072014e-308,-2.220446049250313e-16,345.98033146540115,0.13934292693778494,1.4199695375620927,0.2665243708364201];
C21.fuck(v1, C21, [v1,C21,-4294967295n,63325465n]);
const o37 = {
    set f(a34) {
    },
    set d(a36) {
    },
};
try { v28.map(536870888); } catch (e) {}
const v39 = [9,-1024];
const o42 = {
    "execution": "async",
    "type": "minor",
};
Int8Array.d = Int8Array;
const v45 = [1.7976931348623157e+308,0.0,-1.0,0.7028480917097402,-1000000.0,-3.0,1.7326769223440202e+308];
for (const v47 of [6.060902793297089,-5.910399253908014e+306,1.5428511080641105e+308]) {
    v45.unshift(v47, Array);
}
const v49 = new Int8Array(v39);
const v50 = v49?.constructor;
function F51() {
    if (!new.target) { throw 'must be called with new'; }
}
let v54 = new F51();
var d = --v54;
try { new v50(true, v49, v1); } catch (e) {}
v49[128] >>= 128;
