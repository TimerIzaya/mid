class C3 {
    #m(a5) {
        Object.defineProperty(this, -685833.6542640468, { writable: true, configurable: true, value: this });
        super[-685833.6542640468];
        return a5;
    }
    a = -685833.6542640468;
    o(a8) {
        const o11 = {
            valueOf() {
                let v9 = this;
                try {
                    v9 <<= v9;
                } catch(e10) {
                }
                return -685833.6542640468;
            },
        };
        return -1976630681;
    }
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
class C15 extends C3 {
    o(a17, a18, a19) {
        const o20 = {
            __proto__: a17,
            7: v12,
            "d": C3,
        };
        v13 <= -1976630681;
        return this;
    }
    #b = C15;
    constructor(a23, a24, a25, a26) {
        super();
        const v28 = [a24];
        Reflect.construct(a24, v28, C3);
        Math.max(2147483648);
        const v34 = 2147483648 % 2147483648;
        v28 - v28;
        v34 - v12;
        -1073741825;
    }
}
const v38 = new C15(C15, -685833.6542640468, -685833.6542640468, v14);
const v39 = new C15(v13, -1976630681, v12, v12);
new C15(v39, -1976630681, v38, v38);
try {
    new Float32Array(2991);
} catch(e47) {
}
try {
    new Uint8ClampedArray(16);
} catch(e51) {
}
try {
    const t58 = -2;
    new t58(16);
} catch(e55) {
}
class C58 extends Set {
    a = false;
    constructor(a60) {
        super();
        for (const v61 in -850934516) {
            try {
                super.size = v61;
            } catch(e62) {
            }
        }
    }
}
new C58();
