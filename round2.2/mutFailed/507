const v0 = [];
class C1 {
    0;
    static get h() {
        let v3 = 10;
        for (; v3--;) {
            try {
                super.slice();
            } catch(e6) {
            }
        }
        const v7 = this >= v0;
        this.f;
        return v7;
    }
    #o() {
        let v9 = this;
        const v12 = --v9;
        16 / v12;
        Math.floor(v12 || v12);
        return 16;
    }
}
const v16 = new C1();
new C1();
const v18 = new C1();
function f25() {
    return v18;
}
const v31 = -Infinity;
class C32 {
    static #d = v31;
    get h() {
        this[6] = -1564488561;
        try {
            super.c = this;
        } catch(e34) {
        }
        return v31;
    }
    get c() {
        new Date();
        return v16;
    }
    #g;
    #h = v31;
    #f;
    0;
    #b = -1564488561;
    2542;
}
const v38 = new C32();
v38.p = v18;
new C32();
const v40 = new C32();
function f41() {
    return f25;
}
function f42(a43) {
    function F44() {
        if (!new.target) { throw 'must be called with new'; }
    }
    switch (23895) {
        case F44:
            break;
    }
}
Object.defineProperty(v40, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f41, set: f42 });
class C50 {
    set d(a52) {
        [65535,-1024,268435456,-1,-65536,8,64,-1];
        const v54 = [536870889,-51104];
        [-4,2147483647,-9,168216825];
        %VerifyType(v54);
        try {
            v54.__proto__ = v54;
        } catch(e56) {
        }
    }
    static a = -1564488561;
    e;
    6;
    static #a;
    static [v40];
}
new C50();
const v58 = new C50();
new C50();
try {
    new BigInt64Array(9);
} catch(e63) {
}
try {
    new Int16Array(48);
} catch(e67) {
}
try {
    new BigInt64Array(3);
} catch(e70) {
}
delete v40?.h;
let v72;
try { v72 = v38.p(v40, v38, 9, v40); } catch (e) {}
let o73 = {
    __proto__: v58,
    8: 3,
    "f": v72,
    536870912: -268435456,
};
try {
    o73 &&= o73;
} catch(e74) {
}
