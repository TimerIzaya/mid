const v0 = [536870912];
const v1 = [536870887,-4294967295,-1073741824,2147483647,0,-12,-9007199254740992,1];
const v2 = [27213,-536870912,-277785060,-14,255,1000,-1073741824,2147483648];
const v4 = 1732712128 >>> 1732712128;
256 < 256;
Uint8Array << Uint8Array.BYTES_PER_ELEMENT;
1 - 1;
5n * 5n;
try { new Map(); } catch (e) {}
new Map();
const v20 = Array(2108127998);
const o22 = {
    [v20]: 552566561,
};
function f23(a24, a25, a26) {
    const o33 = {
        ...v2,
        5: 5n,
        __proto__: f23,
        "g": 5n,
        toString(a28, a29, a30) {
            super.d;
            a25 & a26;
            return v2;
        },
    };
    return o33;
}
%PrepareFunctionForOptimization(f23);
const v34 = new Set();
function f35() {
    function F38(a40, a41) {
        if (!new.target) { throw 'must be called with new'; }
        const v42 = this?.constructor;
        try { new v42(v1, this); } catch (e) {}
        try { this.__defineGetter__(a41, this); } catch (e) {}
        try {
            this.a = a41;
        } catch(e45) {
        }
        try {
            this.h = -19.33004984485433;
        } catch(e46) {
        }
        try {
            this.e = -19.33004984485433;
        } catch(e47) {
        }
    }
    const v48 = arguments in arguments;
    arguments[2960] = v48;
    return v48;
}
f35();
function f50(a51, a52, a53, a54) {
    const v55 = a51[0];
    try { a52.forEach(5n); } catch (e) {}
    ~a53;
    try { a54.reverse(); } catch (e) {}
    const o59 = {
        "e": a53,
        268435439: a51,
        "b": f50,
        6: a51,
        "c": a51,
        [v1]: 1,
        "a": 1732712128,
        __proto__: a52,
        "g": a51,
        [-2]: v55,
    };
    return o59;
}
const v60 = f50(v0, v34, 256, v0);
v60[268435439];
f50(v34, f50(v60, v34, 1, v1), 256, v2);
v4[268435439];
new Uint8ClampedArray([536870888,6,65535]);
