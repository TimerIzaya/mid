function f6(a7, a8) {
    const o47 = {
        [a8]: "lDp",
        "f": a8,
        set g(a10) {
            const o13 = {
                "maxByteLength": 2758,
            };
            const v15 = -1.7459090458278523e+308 >>> -1.7459090458278523e+308;
            const v18 = new Array(7);
            function F19(a21) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = v18;
                } catch(e22) {
                }
                try {
                    this.d = a21;
                } catch(e23) {
                }
                try {
                    this.b = 7;
                } catch(e24) {
                }
            }
            const v25 = new F19(F19);
            const v26 = new F19(v18);
            const v27 = new F19(v25);
            const v28 = [v27,v18,F19,Array,F19];
            const v29 = [v18,Array];
            const v30 = [v28,v26];
            for (const v31 of v29) {
                const v32 = v15 % v30;
                try { new v31(7, v32, v27, v32); } catch (e) {}
                /(ab)/guyi;
                /Sfoo(?<=bar)baz/mdui;
                /a\w0/svy;
            }
            const v38 = new SharedArrayBuffer(2758, o13);
            for (const v41 in [-276394158,-31465]) {
            }
            ("unicode")[8n];
            try {
                new Uint32Array(v38);
            } catch(e46) {
            }
        },
    };
    return o47;
}
f6("6i6TJ", "lDp");
const v49 = f6("6i6TJ", "toString");
f6("6i6TJ", "lDp");
function f51() {
    return f51;
}
const v52 = [9,-1024];
new Int8Array(v52);
class C56 extends Date {
    constructor(a58, a59, a60, a61) {
        super[2147483648] = a60;
    }
    [v52] = v49;
    /*
    constructor(a63) {
        for (let v64 = 0; v64 < 25; v64++) {
            this["p" + v64] = v64;
        }
    }
    */
}
new C56();
