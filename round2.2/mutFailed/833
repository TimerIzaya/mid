[-5,-14];
const o3 = {
    set b(a2) {
    },
};
function f5(a6, a7, a8) {
    return a6;
}
const v11 = [Worker,"function",-946.8643548427116];
v11[2] = v11;
const o12 = {
    "arguments": v11,
    "type": "function",
};
new Worker(f5, o12);
const v15 = ([-2064206137,-54494,16,14,16])?.findIndex;
try { new v15(o12); } catch (e) {}
[257,2147483649,10,57306,-65537,127,-13,-4294967297,9007199254740992,509746625];
[-2.0,2.220446049250313e-16,-0.0,0.38619745818784357,1.7437901202489794e+308,6.774409009041011e+307,0.6640907792587815,944.4407336092049];
[408814.49508548924,0.3984783888714687,0.9558423054737553,-774.4624887607195,-3.0,4.0,-2.220446049250313e-16,1.2109233613762412e+308];
const v20 = [-0.0,-1000000000.0,-1.7976931348623157e+308,1.2030295384633328e+308,0.0,2.220446049250313e-16,1.182885174504087e+308,-1000.0];
try { v20.map(v20); } catch (e) {}
-0.6571709241573953;
function f26() {
    return f26;
}
const v29 = new Int8Array(BigInt64Array);
v29[2] = v29;
[-968183083,4294967296,536870912];
[2147483647,10,-13,-6,-2147483647,3,-192787100,875106548,-32065,-13];
[1073741823,-1372886118,-65536,-1606882113,6,11,2147483649,1858453118];
function F36(a38) {
    if (!new.target) { throw 'must be called with new'; }
    class C39 {
        static h;
        constructor(a41, a42, a43, a44) {
            let v45;
            try { v45 = new this(this, this, ...a43, ...a43, this, ...a41, ...a42, ...9.710969026694386); } catch (e) {}
            try {
                v45.__proto__ = a42;
            } catch(e46) {
            }
        }
        static {
            for (let v52 = 0; v52 < 25; v52++) {
            }
            class C53 {
            }
            function F54(a56, a57) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const t51 = [-11,4294967297,536870887,268435456];
            t51.length = F54 % v11;
        }
    }
    gc();
    for (let v64 = 0; v64 < 10; v64++) {
    }
    class C65 {
        static set f(a67) {
            this.b *= a67;
            const o70 = {
                "maxByteLength": 599376662,
            };
            const v72 = new SharedArrayBuffer(1024, o70);
            try {
                new Uint8ClampedArray(v72);
            } catch(e75) {
            }
        }
    }
}
