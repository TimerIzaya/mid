function f0() {
    try { ("K9e4N").replace("K9e4N", 14700); } catch (e) {}
    const o9 = {
        __proto__: "wORNB",
        get h() {
            try {
                super.valueOf(14700);
            } catch(e8) {
            }
            return false;
        },
        536870912: "wORNB",
    };
    o9[536870912] = o9;
    return o9;
}
const v10 = f0();
const v11 = f0();
const v12 = f0();
v12[536870912] = v12;
function f14() {
    return v11;
}
let v15;
try { v15 = f14.toString(); } catch (e) {}
try { v15.sup(); } catch (e) {}
const v17 = [-0.0,1000000000000.0,5.0,-5.0,1000.0,-661.5188581234609,1.0,-2.0,-69.83925610666279];
try { v17.reduce(v11); } catch (e) {}
const v19 = [-3.0,NaN];
const v20 = [1.6398527514958765e+308,-1000.0,0.31773715817476966,0.8547109593569513,-5.91840409899986e+307,0.35968376730360774,-2.2250738585072014e-308,-825.6893181032606,1e-15];
const v21 = v20?.values;
try { new v21(); } catch (e) {}
let v23;
try { v23 = v20.with(v12, v12); } catch (e) {}
v23[2] = v23;
class C24 {
    a = v19;
    [undefined] = v10;
    get c() {
        Object.defineProperty(v17, "f", { get: f0, set: f0 });
        return v10;
    }
    [v10] = v17;
    static toString(a27) {
        super[this];
    }
    5;
    static f = v20;
    #e = f14;
    #d;
    [v20];
}
const v29 = new C24();
const v30 = new C24();
v30.c = v30;
new C24();
let v32 = -13;
v32--;
const v36 = -9223372036854775808 >> -9223372036854775808;
let v39;
try { v39 = ("fD").localeCompare("fD"); } catch (e) {}
~v39;
try { ("AZf").search(v10); } catch (e) {}
const v43 = ["string","string"];
try { v43.map(v43); } catch (e) {}
f14(52);
Array(v36);
new v21();
const v50 = [v32,v32];
try { v50.groupToMap(-9223372036854775808); } catch (e) {}
const v52 = ["string"];
function f55() {
    return Float32Array;
}
f55();
1242487909n ^ 1242487909n;
~14;
const o63 = {
    "f": undefined,
    set f(a62) {
    },
};
const v66 = v43 >> v52;
let v69 = 256;
v69++;
const v71 = v69--;
const v73 = this?.SyntaxError;
try { new v73(this); } catch (e) {}
const v75 = this?.SyntaxError;
let v76;
try { v76 = new v75(v19); } catch (e) {}
v76.message = v76;
const v77 = [this];
try { v77.toString(); } catch (e) {}
const v79 = [v32,v77];
try { v79.pop(); } catch (e) {}
let v82 = 1000000000000.0;
v82--;
function F86(a88) {
    if (!new.target) { throw 'must be called with new'; }
    const v89 = this?.constructor;
    v89.length;
    try { new v89(v32); } catch (e) {}
}
const v92 = new F86();
function f93(a94, a95) {
    const v96 = a95?.constructor;
    try { new v96(a94); } catch (e) {}
    try { a94.apply(-9223372036854775807n, f14); } catch (e) {}
    a95.h = a95;
    const o99 = {
        [v66]: 13,
    };
    o99[0] = o99;
    const v101 = o99[0]?.constructor;
    try { new v101(v29); } catch (e) {}
    return -64988n;
}
%PrepareFunctionForOptimization(f93);
let v103 = f93(F86, v92);
v103 / v103;
try {
    Uint8Array[4] = -842.3978944315194;
} catch(e108) {
}
v103--;
f93(v71, v50);
f93(v71, v50);
Date.now();
function F114(a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
}
const v118 = new F114();
for (let v119 = 0; v119 < 25; v119++) {
    v118["p" + v119] = v119;
}
%OptimizeFunctionOnNextCall(f93);
f93(F86, v92);
