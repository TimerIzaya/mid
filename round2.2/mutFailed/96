let v0 = -0.0;
class C3 {
    #p(a5, a6) {
        a5.a += -9.254766827132215;
        function f7(a8, a9) {
            try {
                a5.length = 191;
            } catch(e11) {
            }
        }
        new Promise(f7);
        return 268435456;
    }
    374 = -9.254766827132215;
    536870889 = -9.254766827132215;
}
const v14 = new C3();
Math.exp(65537);
try {
    this.__proto__ = this;
} catch(e19) {
}
const v20 = new C3();
const v21 = new C3();
class C22 {
    [-9.254766827132215];
    static [C3];
    n(a24, a25, a26) {
        ({"d":C3,"g":v0,} = C3);
        return this;
    }
    [v0] = v14;
    constructor(a31, a32) {
        try {
            C3.a = a32;
        } catch(e33) {
        }
        super[v0][Symbol.toStringTag];
    }
}
new C22(v14, v20);
new C22(v20, C22);
new C22(v20, v21);
try {
    new Int8Array(257);
    function f44(a45, a46) {
        const o47 = {
            __proto__: a46,
        };
        return o47;
    }
} catch(e48) {
}
try {
    new Int16Array(11);
} catch(e52) {
}
try {
    new Uint16Array(8);
} catch(e56) {
}
const v57 = [831718659,-265172310,55689,268435439,4273,-61632,1024,-5];
try { v57(); } catch (e) {}
function F61() {
    if (!new.target) { throw 'must be called with new'; }
}
F61 >= Uint16Array;
class C64 extends Uint16Array {
}
new C64(v57);
