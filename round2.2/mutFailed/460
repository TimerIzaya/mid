function f3(a4) {
    const o38 = {
        0: 536870887n,
        n(a6) {
            function f7(a8) {
                function f10(a11) {
                    try {
                        for (let v12 = 0; v12 < 32; v12++) {
                            a11[f10 + v12] = v12;
                        }
                        a8.toString = a11;
                    } catch(e15) {
                    }
                    const v16 = (a17, a18, a19) => {
                        try { new a19(v16, a6); } catch (e) {}
                        /[a-zA-Z0-9]/mu;
                        /\u003z/sdyi;
                        /(x)(x)(x)\1/mgsdv;
                        %VerifyType(a8);
                        try { a11["findLast"](f10, this, a8, 536870887n, a11); } catch (e) {}
                        return -40415n;
                    };
                }
                this.onmessage = f10;
                const o26 = {
                };
                try {
                    new Uint8ClampedArray(this, o26);
                } catch(e29) {
                }
            }
            const v32 = [f7];
            const o33 = {
                "arguments": v32,
                "type": "function",
            };
            new Worker(f7, o33);
            try {
                new a6(undefined);
            } catch(e37) {
            }
            return 536870887n;
        },
    };
    o38[0];
    const o40 = {
        "e": -40415n,
        1073741824: a4,
    };
    return o38;
}
const v44 = f3(536870887n, f3);
v44[0] = v44;
const v45 = f3(f3);
const v46 = f3(6n);
new Map();
class C52 {
    n(a54, a55) {
        try {
            a55.message = v46;
        } catch(e56) {
        }
        return Map;
    }
    static #n(a58, a59, a60, a61) {
        a61["1000"] |= a61;
        super["1000"];
        let v63;
        try { v63 = new a59(); } catch (e) {}
        return v63;
    }
    constructor(a65, a66, a67, a68) {
        const v69 = this?.constructor;
        try { new v69(a66, this, v44, v44); } catch (e) {}
        try { a67.isPrototypeOf(-40415n); } catch (e) {}
        -a68;
        const t75 = "dotAll";
        t75.length ||= a66;
        try {
            a67[a67] = v45;
        } catch(e74) {
        }
    }
}
const v75 = new C52(6n, "function", v46, -40415n);
new v75(6n, v44, C52, 536870887n);
const v77 = new C52(6n, v75, C52, 536870887n);
const v78 = v77?.constructor;
try { new v78(v75, v75, "1000", "1000"); } catch (e) {}
let v80 = [Infinity];
++v80;
