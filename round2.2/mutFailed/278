let v2 = -1e-15;
class C3 {
    #m(a5) {
        try {
            this.#toString();
        } catch(e7) {
        }
        try {
        } catch(e8) {
        }
        Object.defineProperty(this, a5, { writable: true, configurable: true, value: this });
        super[-685833.6542640468];
        return a5;
    }
    a = -685833.6542640468;
    o(a11) {
        const o14 = {
            valueOf() {
                let v12 = this;
                try {
                    v12 <<= this;
                } catch(e13) {
                }
                return -685833.6542640468;
            },
        };
        return -1976630681;
    }
}
const v15 = new C3();
const v16 = new C3();
v2--;
let v19 = new Date();
new Uint8ClampedArray(64);
const v23 = new C3();
class C24 extends C3 {
    o(a26, a27, a28) {
        const o29 = {
            __proto__: a26,
            7: v15,
            "d": C3,
        };
        v16 <= -1976630681;
        return this;
    }
    #b = v16;
    constructor(a32, a33, a34, a35) {
        for (const v37 of "0") {
            v19 |= v37;
        }
        new Int8Array([-536870912,143360463,10000,-2147483649,58790,536870888]);
        super();
        const v42 = [a33];
        Reflect.construct(a33, v42, C3);
        Math.max(2147483648);
        const v48 = 2147483648 % 2147483648;
        v42 - v42;
        v48 - v15;
        do {
            const t59 = "I";
            delete t59["0"];
        } while (0 < 0)
        -1073741825;
    }
}
Math.atan2(-11, -11);
try { Symbol.keyFor(Symbol); } catch (e) {}
const v62 = new C24(C24, -685833.6542640468, v15, v23);
const v63 = new C24(v16, -1976630681, v15, v15);
try {
    new Uint8Array(4096);
} catch(e67) {
}
new C24(v63, -1976630681, v23, v62);
try {
    new Float32Array(2991);
} catch(e75) {
}
try {
    new Uint8ClampedArray(16);
} catch(e79) {
    try {
        const v82 = new Int8Array(64);
        v82[12] = v82;
    } catch(e83) {
    }
}
try {
    new Uint8ClampedArray(16);
} catch(e87) {
}
class C90 extends Set {
    a = false;
    constructor(a92) {
        super();
        for (const v93 in this) {
            try {
                super.size = v93;
            } catch(e94) {
            }
        }
    }
}
new C90();
