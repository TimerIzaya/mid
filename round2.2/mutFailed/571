const v3 = [1e-15,-1.791424368674983e+308,-3.3512091585926367,-256667.28075132577];
const v4 = [-221329.9189703199,2.2250738585072014e-308,566.6566545834232,8.207326010118216e+307,5.0,1.5381562196441992e+308,-6.275593335295964,2.2250738585072014e-308,3.8434395705884433e+307];
v4[2] = v4;
const v5 = [1000000.0,-1.4429480089962999e+308,1.7925133824935385e+308,0.566875540387634,1000000000.0,0.49643699562123156];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const v10 = this?.__lookupSetter__;
    try { new v10(a9); } catch (e) {}
    try { a9.reduce(v4); } catch (e) {}
    try {
        this.f = 1219899177;
    } catch(e13) {
    }
    try {
        this.e = v3;
    } catch(e14) {
    }
}
const v15 = new F6(F6, v4);
const v16 = new F6(1219899177, v5);
v16.length = v16;
new F6(v4, v4);
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    this?.__defineGetter__;
    try { new a21(F6, F6); } catch (e) {}
    a20[4];
    try {
        this.b = v5;
    } catch(e25) {
    }
    try {
        this.e = a21;
    } catch(e26) {
    }
    try {
        this.f = 1219899177;
    } catch(e27) {
    }
}
const v28 = new F18(v5, v16);
const v29 = new F18(v4, v28);
v29.b = v29;
const v30 = new F18(v4, v29);
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(a35, this, a35, this); } catch (e) {}
    a34 ^ a34;
    a36.h = v16;
    try {
        this.b = a35;
    } catch(e40) {
    }
    try {
        this.d = v16;
    } catch(e41) {
    }
}
new F31(v28, 1219899177, v28, v29);
new F31(v16, v3, F31, v30);
new F31(v30, v3, 129, v29);
const v46 = [[-732247010,10136,-65536,-536870912,1073741824]];
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(a52); } catch (e) {}
    this.a = a49;
}
const v54 = new F47(v46);
const v55 = v54?.__defineGetter__;
try { new v55(v46, F31); } catch (e) {}
function f57(a58) {
    return f57;
}
let v59;
try { v59 = new f57(129); } catch (e) {}
try { ("function").localeCompare(v3); } catch (e) {}
const v63 = [v54];
const o64 = {
    "arguments": v63,
    "type": "function",
};
const v65 = v59?.constructor;
let v66;
try { v66 = new v65(v15); } catch (e) {}
new Worker(f57, v66);
