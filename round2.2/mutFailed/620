try {
    new Int32Array(1000);
    [/\x01?/gy];
    function F8() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v10 = new F8();
    const v12 = new WeakMap();
    const v13 = [v12,v10,F8];
    Uint16Array(-9007199254740990);
    v13[8] = Uint16Array;
} catch(e16) {
}
928 * 928;
const v19 = [-128,-56702,268435439,64833,8,4294967297,268435440,-2048587379,257,16];
for (const v20 in v19) {
    v19.indexOf(v20, v20);
}
class C22 {
}
try {
    const v24 = new Float64Array(928);
    new Function("getUTCSeconds");
    class C28 {
        constructor(a30, a31) {
            this[this] = a31;
        }
    }
    try { v24.toSorted(v24); } catch (e) {}
} catch(e33) {
}
try {
    let v38 = -103274796;
    Math.fround(v19);
    v19 && v38--;
    new Uint32Array(96);
} catch(e43) {
}
try {
    class C48 {
        constructor(a50, a51, a52, a53) {
            7 ^ Int16Array;
        }
    }
    new BigInt64Array(1000);
} catch(e57) {
}
let v58 = 2;
v58--;
([-65536,268435456,9,-57818,-55405,6,-729204423,5]).fill([0,2147483649,1024,255,-268435456,10000,5,4096,7], 268435440);
const v65 = /(?:a*)*/gsdui;
for (let v66 = 0; v66 < 10; v66++) {
    const v69 = ("p")["trimRight"]();
    const v70 = +v69;
    try {
        const t55 = "p";
        t55[2546] = v70;
    } catch(e71) {
    }
    const v72 = "p" + v66;
    try { v69(268435439, v72); } catch (e) {}
    Math.sqrt(127);
    const v78 = "trimRight" && "trimRight";
    Math.clz32(127);
    Math.ceil("trimRight");
    Math.clz32(v78);
    g || 928;
    "trimRight" || "trimRight";
    v65[v72] = v66;
}
try {
    new BigInt64Array(v58);
} catch(e85) {
}
new Uint32Array();
const o91 = {
    3294873877: "1A",
    2147483648: "-268435456",
};
const o92 = {
    ...o91,
};
try {
    new BigInt64Array(2);
} catch(e94) {
}
function f95() {
    for (let v96 = 0; v96 < 10; v96++) {
        v96 & v96;
        const v98 = ~2;
        v98 / v98;
    }
}
f95();
%OptimizeFunctionOnNextCall(f95);
f95();
