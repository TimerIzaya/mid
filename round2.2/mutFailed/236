const v0 = [];
const v1 = [-2.2250738585072014e-308,-1.7843806676284284e+308,-1.3303335005865188e+308,1.0,-6.729915085247602,NaN,-1e-15];
const v2 = [-163510.87120872014,0.26674842478966776];
[3.3764896930699884,-5.162800082431454e+307,647.1166583457839,667.0171740907645];
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v2;
    } catch(e8) {
    }
}
new F4(v0, v1);
let v12 = 24504 >>> 255;
--v12;
function F14() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -4;
    } catch(e17) {
    }
    try {
        this.h = -4;
    } catch(e18) {
    }
}
const v19 = new F14();
[v19,3,[-2.2250738585072014e-308,-1.0,0.4390028680080095,1.8367661179633004,-1.7328655287296314e+308]];
const v23 = new F4(v1, v1);
new F4(v1, v1);
new WeakMap();
new Date();
const v29 = [-1,4294967296,-9007199254740992,1155918588,47119];
[2,536870889,-12,1024];
[-4294967296,1073741823,6,268435441,-1];
const v34 = new String();
const o35 = {
    __proto__: v34,
    "e": -59945n,
};
const v36 = [-0.0,-1000000000.0,991998.0418321821,3.0,1.7013505193620964e+308,0.0,-17868.964753441396];
const v37 = [-5.0,752.3813494122871,-852877.870933423,467.0178608759047,1.0,811434.1369388318];
const v38 = [708.1226436173899,Infinity,-1.750984632870916e+308,8.853907863697838,-2.0,-1000000000000.0,-1.6309857582367659e+308,1000000000000.0,-Infinity];
function f40(a41, a42) {
}
try { ("multiline").charAt(7); } catch (e) {}
for (let [,,...v45] of "multiline") {
    const v46 = v45?.every;
    try { new v46(v45); } catch (e) {}
    try { v45(); } catch (e) {}
}
try {
    new Float32Array(7);
    [/\x01?/gy];
    gc();
    const o60 = {
        ..."NaN",
        [Infinity](a58, a59) {
        },
    };
} catch(e61) {
}
Float64Array.length;
try {
    new Float64Array(1267);
} catch(e66) {
    class C67 {
        static {
            class C70 extends this.constructor {
            }
            new C70();
        }
    }
}
function F74(a76) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
    try {
        this.h = a76;
    } catch(e78) {
    }
    try {
        for (let v79 = 0; v79 < 10; v79++) {
            /[x\dz]((x)(x)(x)\3\xed\xa0\x80\p{Script=Greek}a*?lA7)/mgduy;
        }
        return "zFAcr";
        this.b = a76;
    } catch(e82) {
    }
    [Reflect];
    class C85 {
        #g;
    }
    try {
        this.f = 1073741825;
    } catch(e86) {
    }
    for (let i = 0; i < 5; i++) {
        Date.parse("number");
    }
    class C91 extends Uint8ClampedArray {
        h;
        g;
        #valueOf(a93, a94) {
        }
    }
    new C91();
}
new F74(-1);
const t108 = [-660897945,9,-50991,128,-268435456];
t108.length = 1000n;
const v100 = [];
class C101 {
    #e = v100;
    constructor(a103) {
        super[a103] = v29;
    }
}
new C101(v23);
try { Float32Array.of(); } catch (e) {}
try {
    const v107 = new Float32Array(1543);
    v107[768] = v107;
} catch(e108) {
}
const o121 = {
    toString(a111, a112) {
        async function f113(a114, a115, a116, a117) {
            await a115;
            return a115;
        }
        try { e(); } catch (e) {}
        return this;
    },
};
function f122(a123) {
    return a123;
}
f122.caller = f122;
function f125(a126, a127, a128) {
    const o140 = {
        12: a128,
        "a": a127,
        n(a130, a131, a132, a133) {
            return a130["trim"](this, "multiline", -1024n, "trim", a127);
        },
        m(a137, a138, a139) {
            return a139;
        },
    };
    o140[12];
    return o140;
}
f125();
%PrepareFunctionForOptimization(f125);
class C145 {
    static #d;
    constructor() {
        let v147 = v100(Worker, Worker);
        --v147;
    }
}
try { new C145(); } catch (e) {}
const o162 = {
    toString(a152, a153) {
        return this;
    },
    valueOf() {
        return super[7];
    },
    p(a157, a158, a159, a160) {
        class C161 extends C145 {
        }
    },
    "h": 7,
    "type": "function",
    "arguments": v36,
    [v38]: v37,
    2983458584: v37,
};
function f168() {
    return -30664;
}
try { new f168(255, BigInt64Array, ...Uint16Array, -30664); } catch (e) {}
let v174 = (-4096 >>> -16743) + -16743;
Math.sin(v174++);
const v177 = [o162];
const o178 = {
    "arguments": v177,
    "type": "function",
};
const v179 = [o121];
const o180 = {
    "arguments": v179,
    "type": "function",
};
function f181() {
}
for (let v182 = 0; v182 < 5; v182++) {
    function f183() {
    }
}
[-1,268435439,-9.611530381865985e+307];
