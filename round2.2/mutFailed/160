class C3 {
    [1];
    #h = NaN;
    constructor(a5) {
        this[1];
        this[1] = this;
        const v7 = this[1];
        v7[1] = v7;
        v7.name = v7;
        const v8 = a5 == a5;
        v8 || v8;
        3612 >>> 3612;
        try {
            const v13 = new Uint16Array(3612);
            const v14 = v13?.findLastIndex;
            try { new v14(this); } catch (e) {}
        } catch(e16) {
        }
        try { Int32Array.apply(v7, Int32Array); } catch (e) {}
        const o20 = {
        };
        o20.e = o20;
        new BigUint64Array(3612);
        try { Int32Array.from(1); } catch (e) {}
        class C25 extends Int32Array {
        }
        new C25();
        try {
            const v27 = new Int32Array(3766);
            const v28 = v27?.toString;
            try { new v28(); } catch (e) {}
            const v30 = v27[1350];
            v30 >>> v30;
            try { v27.join(3766); } catch (e) {}
        } catch(e33) {
        }
        3 !== 3;
        Int16Array.BYTES_PER_ELEMENT = Int16Array;
        try {
            const v37 = new Int16Array(3);
            v37[1] = v37;
        } catch(e38) {
        }
    }
}
try { new C3(NaN); } catch (e) {}
try { new C3("E"); } catch (e) {}
const v41 = new C3("E");
v41[1] = v41;
v41[1] = v41;
new C3(v41);
const v43 = new C3(C3);
v43[1];
const v45 = v43[1];
v45[1] = v45;
try { v45.bind(1); } catch (e) {}
let v47 = 1e-15;
v47--;
let v49 = -1.9685862887119605e+306;
v49++;
let v51 = -1000000.0;
v51++;
const v54 = 255 + 255;
try {
    new Uint8ClampedArray(255);
} catch(e57) {
}
let v58 = 3;
const v59 = v58++;
v59 / v59;
const v61 = v59 / v59;
try { new Float64Array(v43, C3, v41); } catch (e) {}
const v64 = Float64Array.prototype;
try { v64.at(v61); } catch (e) {}
try { v64.includes(v58); } catch (e) {}
try {
    const v67 = new Float64Array(v58);
    let v68;
    try { v68 = v67.toLocaleString(); } catch (e) {}
    try { v68.anchor(v68); } catch (e) {}
    let v70;
    try { v70 = v68.toUpperCase(); } catch (e) {}
    try { v70.strike(); } catch (e) {}
} catch(e72) {
}
4 != 4;
try {
    const v76 = new Float64Array(4);
    const v77 = v76[1];
    v77 <= v77;
} catch(e79) {
}
class C81 {
    #p(a83, a84) {
    }
    static set e(a86) {
    }
    static #g = -2147483649;
}
C81.e;
const v88 = C81?.constructor;
let v89;
try { v89 = new v88(v54); } catch (e) {}
v89.b = v89;
-1e-15 >>> -1e-15;
const v92 = new C81();
const v93 = v92?.constructor;
const v94 = v93?.constructor;
let v95;
try { v95 = new v94(v93); } catch (e) {}
v95.caller = v95;
let v96 = -4294967297n;
let v97 = -6n;
function F98(a100) {
    if (!new.target) { throw 'must be called with new'; }
}
F98.length = F98;
const v101 = new F98();
class C102 {
    static #d = v101;
    set c(a104) {
        let v103 = this;
        const v106 = Math.sinh();
        ~(v103-- | v103);
        Math.acosh(v106);
    }
    10;
}
const v111 = new C102();
v111[10] = v111;
({"c":v97,...v96} = v111);
try { new v93(); } catch (e) {}
new C81();
const v114 = new C81();
const v115 = v114?.constructor;
let v116;
try { v116 = new v115(); } catch (e) {}
const v117 = v116?.constructor;
try { new v117(); } catch (e) {}
let v119;
try { v119 = new v115(); } catch (e) {}
const v120 = v119?.__lookupGetter__;
try { v120.bind(v88); } catch (e) {}
try { new v120(v43); } catch (e) {}
[1986755410,127,9007199254740992,2147483648,13,2038176256,-539888916,1,-65537,4294967296];
class C124 {
    get e() {
    }
}
C124.name = C124;
try { C124.constructor(Uint8ClampedArray); } catch (e) {}
new C124();
