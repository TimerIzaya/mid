try {
    new Promise(0, Promise, Promise);
} catch(e3) {
}
Uint8Array[1] = Uint8Array;
try { new Uint8Array(Uint8Array, 14, Promise); } catch (e) {}
try {
    new Uint8Array(14);
} catch(e8) {
}
try {
    new Uint16Array(3636);
} catch(e12) {
}
const v13 = [9007199254740992,604585093];
let v14;
try { v14 = Promise.all(...Promise, 0, ...v13, Promise); } catch (e) {}
v14?.[1];
v14[Symbol.split];
const v19 = [-65536,-63424,14186,9];
try { v19.entries(); } catch (e) {}
const v21 = [65535,-50406,-9,-1734297422,5,-17111,21715,6539,2147483649];
function f22() {
    return v21;
}
~-17677;
676477760 << 676477760;
const v31 = [0.8682352355386721,-1000.0,-1000000000.0,2.6975535945133196,1.6766969202230514e+308];
const v32 = [-214554.00235772948,7.908741436180332,225410.7163732145,-1.0,Infinity];
const v33 = [-Infinity,3.0,0.10380448288345501,1.1934313070200913e+308,1000000000000.0];
const v34 = v33?.reduceRight;
try { new v34(v13); } catch (e) {}
function f36() {
    return v33;
}
Float32Array.prototype = Float32Array;
try {
    Float32Array();
} catch(e43) {
    e43.stack;
}
try {
    new Int8Array();
} catch(e48) {
}
Int32Array.name = Int32Array;
function f51(a52, a53, a54, a55) {
    try { a53.includes(a52); } catch (e) {}
    a55[2] = a55;
    const o60 = {
        "execution": "async",
        "type": "minor",
    };
    o60.e = a52;
    o60.e = o60;
    gc(o60);
}
try { f51.call(f36); } catch (e) {}
f51(v32, v33, Infinity, v31);
