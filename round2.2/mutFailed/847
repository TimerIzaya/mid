function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 1;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
try {
    new Float64Array(64);
} catch(e10) {
}
try {
    const v13 = new Float64Array(1);
    try { v13.entries(); } catch (e) {}
} catch(e15) {
}
512 >> 512;
try {
    new Int8Array(512);
} catch(e20) {
}
const v21 = [Int8Array,Int8Array,v5,1,F0];
try { v21.fill(Float64Array); } catch (e) {}
const v23 = [v21,v6,Int8Array,v6,Int8Array];
v23[1] = v23;
[Float64Array,512,Float64Array,Float64Array,v21];
-412790669n === -412790669n;
try { Int32Array.toString(); } catch (e) {}
new Int32Array(741889455);
[4.0,4.0,9.332498388236435e+306,1.0079923952040574e+308,-1000.0,3.0];
1073741823 >> 1073741823;
function f42() {
    return f42;
}
gc.length;
const o46 = {
};
gc(o46);
class C48 extends f42 {
    static {
        this.prototype = this;
    }
}
Math.expm1();
const v56 = C48.prototype.constructor;
try { new v56(); } catch (e) {}
try { v56(); } catch (e) {}
try { ("Pk").fontcolor("Pk"); } catch (e) {}
class C63 {
}
try { C63.constructor(Int32Array); } catch (e) {}
gc();
let v67 = 10496;
v67--;
-(-v67);
