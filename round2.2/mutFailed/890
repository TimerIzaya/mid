const v3 = [-135427025,981941549,9,9,-135427025,9,981941549,-135427025];
const v4 = [v3,-135427025,v3,981941549];
[v3,9,v4,9,v4];
class C6 {
    static #valueOf(a8, a9) {
        try {
            new Int32Array(4096, 981941549, this, C6);
        } catch(e13) {
        }
        try {
            new Uint8Array(1160);
        } catch(e17) {
        }
        try {
            new Infinity(3097);
        } catch(e21) {
        }
        return 1160;
    }
}
const v22 = new C6();
new C6(C6);
new C6();
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = v22;
    try {
        this.h = -65536;
    } catch(e31) {
    }
    try {
        this.f = -65536;
        const o32 = {
        };
        o32.a = o32;
        function F33() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v35 = new F33();
        function f36() {
            [0,-2147483649,-11,-8,39903,-1073741824];
            [1073741824,8,8,-11,22222];
            return [9007199254740990,800006486,536870889,-1679072548,0,52483,18881,-1024,6];
        }
        v35.valueOf = f36;
        const v40 = [3.0,728.7710136286514,7.58009139855735];
        function f41(a42, a43, a44, a45) {
            const o48 = {
                "h": a42,
                get d() {
                    v40.length += a42;
                    let v47 = this;
                    ({"length":a43,...v47} = v40);
                    a44[127] = a45;
                    return v47;
                },
                "g": v35,
            };
            return o48;
        }
        Math.tanh(v35);
        %PrepareFunctionForOptimization(f41);
        const v51 = f41();
        const v52 = f41();
        %OptimizeFunctionOnNextCall(f41);
        f41(Math, v52, v51, v40);
        Int32Array.toString = f41;
        class C56 extends Int32Array {
            [Int32Array];
            #h = Int16Array;
            static [Int16Array];
        }
    } catch(e57) {
    }
}
const v58 = new F28();
function f59(a60) {
    v4.every();
    const o62 = {
    };
    return o62;
}
v58.toString = f59;
const v63 = new F28();
function f64() {
    1.7976931348623157e+308 >> 1.7976931348623157e+308;
    const o72 = {
        [1.7976931348623157e+308]: 1.7976931348623157e+308,
        8: "E",
        [10000](a70, a71) {
        },
    };
    o72[10000];
    return o72;
}
%PrepareFunctionForOptimization(f64);
const v74 = f64(9, v3);
v74[8] = v74;
const v75 = f64(v74, v63, F28);
%OptimizeFunctionOnNextCall(f64);
Date.valueOf = f59;
const v78 = 7 ^ Date;
v78 * v78;
const v81 = Math.acosh(v75);
v81 >> v81;
f64(7, v58, v74);
const v84 = new F28();
class C85 extends F28 {
    constructor(a87) {
        super();
        -268435456 | -268435456;
    }
    /*
    constructor(a93, a94, a95) {
    }
    */
    static #g;
    valueOf(a97, a98, a99, a100) {
        let v101 = 9007199254740992;
        -246938961 - -246938961;
        v101++;
        return a100;
    }
    3063155631 = v84;
    static #f = v63;
    3045982067;
    static [v58];
}
C85.e = C85;
const v105 = new C85(v63);
const v106 = new C85(v105);
new C85(v106, Math);
475821593 + 475821593;
255 + 255;
const v113 = [];
class C114 {
    constructor() {
        let v116 = v113(C114, C114, this, this);
        --v116;
    }
}
