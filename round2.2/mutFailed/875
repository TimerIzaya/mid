try {
    new Float64Array(1964);
} catch(e6) {
}
try {
    new Uint32Array(64);
} catch(e10) {
}
function f13() {
    return BigUint64Array;
}
for (const v15 in /(g)/gvyi) {
    const v17 = new Set();
    Object.defineProperty(v17, "a", { writable: true, configurable: true, enumerable: true, value: f13() });
}
try {
    new Uint32Array(8);
} catch(e21) {
}
const v22 = [5686];
[[v22,1073741824]];
class C25 extends Float64Array {
    [1073741824];
    [8];
    #n(a27, a28, a29, a30) {
        try {
            a28.length = 11;
        } catch(e32) {
        }
        return a28;
    }
    static #h = 64;
    static #b = v22;
    static 7 = v22;
}
new C25();
new C25();
new C25();
class C39 {
    constructor(a41, a42) {
        const v43 = this.constructor;
        try { new v43(this); } catch (e) {}
        const v45 = a41.a;
        function f46(a47, a48) {
            a48 - a48;
            const o50 = {
                "f": a47,
            };
            return v45;
        }
        f46(a42, a41);
        f46();
        f46(128, 128);
    }
}
new C39(-1000658926);
new C39(0.0);
new C39(-1000658926);
("CPd").match(C39);
[-65537,536870888,24399,129,111446355,9,268435456,31980];
