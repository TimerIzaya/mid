const v0 = [1.076153357454018,-1.7976931348623157e+308,0.0,-575261.1299929955,554244.5562663812,0.76960701835548,-1.7976931348623157e+308,-1000000000000.0,-696680.8030138039,1.7976931348623157e+308];
let v1 = [9.77205979850622,1.520192524552722e+308,-3.6943577586563293e+306,-5.823029375270462e+307,321740.6360334924,-1.0,-685.0475912244713,1.0,-2.2250738585072014e-308,1.1432962277239728e+305];
function f2(a3) {
    ({"a":a3,"e":a3,"h":a3,} = a3);
    function f4() {
    }
    return v0;
}
Object.defineProperty(v1, "valueOf", { writable: true, value: f2 });
const v5 = [Infinity,1.386976256658318e+308,-2.220446049250313e-16,-255753.67125797737,2.2250738585072014e-308];
v5[Symbol.toPrimitive] = f2;
const v8 = [-4.0,Infinity,1e-15,-1000000.0,1000000000.0,2.220446049250313e-16,NaN,1000000000000.0,6.141941718520094];
let v9;
try { v9 = v8.group(v1); } catch (e) {}
const v10 = [0.0,-1000000000000.0,-861714.7788497299,-2.2250738585072014e-308,-919211.3609393365,-621.3692612986376,1e-15,1.3747057703964125e+308,-2.4715455008419145];
function f11() {
    function f12(a13) {
        const v14 = [739824.355713533,-5.0];
        ([v14,v14]).length;
        return a13;
    }
    return f12;
}
function f17(a18) {
    const o21 = {
        "maxByteLength": 2346,
    };
    const v23 = new ArrayBuffer(2346, o21);
    try {
        new Int32Array(v23);
    } catch(e26) {
    }
}
Object.defineProperty(v10, Symbol.toPrimitive, { configurable: true, get: f11, set: f17 });
const v29 = [-2.220446049250313e-16,525.8424164362916,7.598691220736708,342.95122319823645,1.0020455544264098e+308,-756.5745346811974,0.2921907601292645];
const v30 = [v5,v1,v8,v5];
const v32 = -246938961 - -246938961;
function* f34(a35, a36, a37) {
    return -256;
}
const v38 = [v5];
v38[Symbol.toPrimitive] = f34;
const v41 = v38[0];
const v42 = [v38,v8,v0,v38];
function f43(a44, a45) {
    a45.toString = f43;
    const v48 = AggregateError("d");
    Math.atan2(-246938961, 5.430720508079137);
    const v52 = v48[512];
    try { new a44(v52, AggregateError, v9); } catch (e) {}
    const o56 = {
        "maxByteLength": 2565,
    };
    const v58 = new SharedArrayBuffer(2565, o56);
    try {
        new Float64Array(v58);
    } catch(e61) {
    }
    try { a45.fill(a44); } catch (e) {}
    const o81 = {
        "h": v30,
        get c() {
            Object.defineProperty(v10, 257, { writable: true, configurable: true, enumerable: true, value: this });
            let v66 = 268435456;
            const v67 = v66 >>> v1;
            Math.abs(v1);
            v67 || v1;
            Object.defineProperty(v5, 58, { writable: true, configurable: true, value: -60419 });
            const o72 = {
                "maxByteLength": 2766081454,
            };
            const v74 = new SharedArrayBuffer(127, o72);
            try {
                new Uint16Array(v74);
            } catch(e77) {
            }
            --v66;
            v67 >>> -60419;
            Math.cbrt(v67);
            return a45;
        },
        "f": v30,
    };
    try { o81.hasOwnProperty(v38); } catch (e) {}
    return o81;
}
f43.name;
f43(v0, v8);
for (const v85 in v38) {
    function F86(a88, a89, a90, a91) {
        if (!new.target) { throw 'must be called with new'; }
        let v87 = this;
        function f92() {
            function f93(a94, a95) {
                Math.imul(-9223372036854775808, -9223372036854775808);
                let v100 = !1000000000000.0;
                Math.log1p(v87);
                v87++;
                v100--;
                Math.trunc(1000000000000.0);
                v87 & v87;
                return v30;
            }
            return f93;
        }
        function f106(a107) {
            Object.defineProperty(v38, 65535, { enumerable: true, get: f17 });
        }
        Object.defineProperty(a89, "toString", { writable: true, configurable: true, enumerable: true, get: f92, set: f106 });
        try {
            v87.c = a89;
        } catch(e108) {
        }
        try {
            v87.d = a89;
        } catch(e109) {
        }
    }
    new F86(v29, v5, v1, v41);
    new F86(v0, v10, F86, v1);
    new F86(v30, v42, v32, v8);
}
f43(v1, v8);
f43(v10, v38);
Set.d = Set;
new Set();
0 < 9;
v1++;
