try {
    new Uint16Array(3);
} catch(e6) {
}
try {
    new Int16Array(3215);
} catch(e10) {
}
try {
    new BigUint64Array(128);
} catch(e14) {
}
[];
const v23 = [];
function f24(a25, a26, a27) {
    Object.defineProperty(a26, 0, { writable: true, configurable: true, value: 3 });
    a26[0] = f24;
    a26[0] = a26;
    const o28 = {
    };
    return o28;
}
f24(2, v23);
f24(-1067114837, 3);
[3.0,-433.4423649065495,-2.0,-4.0,667.8899163013198,0.8405951434022986,-4.0,-2.2250738585072014e-308,1e-15,0.6894856098930002];
const o37 = {
    get b() {
        /\p{Script_Extensions=Greek}/d;
    },
};
function f39(a40, a41, a42) {
    const o43 = {
    };
}
f39();
f39();
try { ("string").substr("16", "p"); } catch (e) {}
class C50 {
}
Object.defineProperty(C50, 268435441, { writable: true, enumerable: true, value: Int16Array });
const v52 = [2147483647,-51611,41438,257,240493485,256,268435456,15];
for (let v53 = 0; v53 < 5; v53++) {
    delete v52[v53];
}
new BigInt64Array("16", null);
function f59(a60, a61, a62, a63) {
}
const v65 = 536870889n << 536870889n;
v65 ^ v65;
6 + 6;
class C70 {
}
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = this.__defineGetter__;
    try { new v75(F71); } catch (e) {}
}
new F71();
[Infinity,1.0,-3.0,463.5026556089931,2.2250738585072014e-308,-0.0,1000000000.0];
Math.sin();
