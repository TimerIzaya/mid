const v0 = [];
const v2 = new WeakMap();
const o9 = {
    get e() {
        const v7 = v0 && -4096;
        let v8;
        try { v8 = v7.o(); } catch (e) {}
        return v8;
    },
};
try {
    new Float64Array(64);
} catch(e11) {
}
const o13 = {
    "arguments": v0,
    "type": "function",
};
try {
    new Uint8ClampedArray(5);
} catch(e17) {
}
try {
    new Int32Array(256);
} catch(e21) {
    function f23(a24, a25, a26) {
        return a26;
    }
    const v29 = [-75.38657871987402];
    const o30 = {
        "arguments": v29,
        "type": "function",
    };
    new Worker(f23, o30);
}
function f32(a33, a34, a35, a36) {
    const o76 = {
        [-1]: WeakMap,
        178: Uint8ClampedArray,
        [a34]: a34,
        __proto__: a35,
        "c": WeakMap,
        p(a38, a39) {
            const v42 = [-680147.9390065788];
            v42.fill(v42, 2147483648, -17600);
            function F44(a46, a47, a48, a49) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = a46;
            }
            new F44();
            super.e *= a39;
            try { a35(a38, a35, a38, a33, a34); } catch (e) {}
            class C56 {
                static [6];
                [9] = Int32Array;
                static m(a58, a59, a60, a61) {
                    function f62(a63, a64, a65) {
                        const o70 = {
                            toString(a67, a68) {
                                return 597703108;
                            },
                        };
                        return o70;
                    }
                    f62(f62, f62, f62);
                    f62();
                }
                [Float64Array];
                [Int32Array] = Float64Array;
            }
            new C56();
            try {
                new Map(v2);
            } catch(e75) {
            }
            return a39;
        },
    };
    return o76;
}
f32(64, 64, v0, 256);
const v78 = f32(256, 256, Float64Array, 5);
([-2.8731541840283477,2.8958930218537855,-3.0,1000000000000.0])["filter"](v78);
Math.asinh([-1000.0]);
f32(256, 256, v2, 5);
const v86 = [];
function f87(a88, a89, a90) {
    return f87;
}
const o94 = {
    ...1087439364,
};
const v96 = [659557.894443576,659557.894443576,659557.894443576];
const v97 = [v96];
const o100 = {
    set c(a99) {
    },
    [f87]: 659557.894443576,
    __proto__: v97,
    "f": v96,
};
const v101 = [v86];
class C102 {
}
Array(255)[781];
const o107 = {
    "arguments": v101,
    "type": "function",
};
Symbol.for(5);
function F110(a112, a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a114;
}
new Worker(f87, o107);
