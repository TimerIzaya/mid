const v1 = new Date();
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(a5, this); } catch (e) {}
    try {
        this.e = v1;
    } catch(e8) {
    }
    try {
        this.a = v1;
    } catch(e9) {
    }
}
const v10 = new F2(F2, v1);
const v11 = new F2(v1, Date);
v11.d = v11;
new F2(v1, v11);
function f13(a14, a15, a16, a17) {
    const v18 = a16?.constructor;
    try { new v18(a17, a15); } catch (e) {}
    a17.a = a17;
    a14.a = a14;
    a15.e;
    const v21 = a17?.a;
    v21.a = a17;
    try { new v21(a16, a17); } catch (e) {}
    const o38 = {
        m(a24, a25) {
            function f26(a27, a28, a29) {
                const v30 = Date(a16);
                Math.log10(5.837108622688205e+307);
                %PrepareFunctionForOptimization(Date);
                Date(a16);
                Date(a16);
                %OptimizeMaglevOnNextCall(Date);
                Date(a16);
                return v30;
            }
            f26(v1, F2, a17);
            return v10;
        },
        "h": a14,
    };
    return o38;
}
const v39 = f13(v10, v10, v1, v10);
f13(v11, v10, Date, v11);
f13(f13, v10, v39, v10);
4.0 - 4.0;
4.0 - 4.0;
-6122n >= -3.0;
512n + -3.0;
("getUTCSeconds")[11];
try { ("getUTCSeconds").italics(); } catch (e) {}
Float64Array.prototype = Float64Array;
class C59 {
}
-4294967296 !== -4294967296;
const v62 = [-4294967296,-4294967296,-4294967296,-4294967296,-4294967296];
const v63 = [v62];
try { v63.groupToMap(C59); } catch (e) {}
1 >>> 1;
~((-9223372036854775807 + -9223372036854775807) >>> -9223372036854775807);
let v73 = 1966866471n;
v73--;
try { Date(C59, C59, C59, v62, Set, Set, v62); } catch (e) {}
"getUTCSeconds" >= (-4294967295 * -4294967295);
Map.length;
