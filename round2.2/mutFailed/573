let v0 = [-3.0,-4.0,-1000000000000.0];
const v1 = [55.612615682370006,-1000.0,-5.0];
const v2 = [7.548796732363122,-592657.7960941668,-1e-15,2.2250738585072014e-308,-137.63908526615467,1000000.0,-766369.4704374581,343.3692792454119,7.5984269571441025,4.903931447699577];
function f3(a4) {
    const v6 = [-5.0];
    [1,11,6,255,2,4,-2147483647,255];
    for (const v8 of a4) {
        v6.length = 227;
    }
    return a4;
}
v2[Symbol.toPrimitive] = f3;
class C11 {
    constructor(a13, a14) {
        function f15() {
            const v17 = new Int32Array();
            try { v17.reduce(v17); } catch (e) {}
            return a13;
        }
        a13.toString = f15;
        try {
            a13[a14] = this;
        } catch(e19) {
        }
    }
    static #a = f3;
    static n(a21, a22) {
        Math.cbrt(Math);
        const v28 = [1.7976931348623157e+308];
        class C29 extends Uint32Array {
            constructor(a31, a32, a33) {
                super(v28);
            }
        }
        new C29(v28, C29, C29);
        ~(++v0);
        v2 || v2;
        return a22;
    }
}
const v38 = new C11(v0, v2);
const v39 = new C11(v0, v2);
new C11(v2, v2);
new WeakMap();
try {
    new Float32Array(9);
} catch(e46) {
    try {
        v1.d = v39;
    } catch(e47) {
    }
    const v49 = new v38();
    /TV\1111(?:a*)+/msy.test(v49);
}
try {
    new Float32Array(3);
} catch(e55) {
}
try {
    new Int32Array(143);
} catch(e59) {
}
class C62 extends BigUint64Array {
    constructor(a64, a65, a66) {
        super(this);
    }
}
const v67 = new C62(BigUint64Array, C62, C62);
for (const v68 of v67) {
}
v67[0];
