const v0 = [1000000000000.0,-331501.1638982545,-1000.0,-1.7976931348623157e+308,405692.98640605947,-6.477064496945488,530062.0095213081];
const v1 = [3.826237806139234e+307,0.613335826078603,-2.220446049250313e-16,NaN,5.869586685397463];
const v2 = [5.0,NaN,555.2295222637827,76.34832261081624,1.0,1.0,-6.516764607365941,-0.0,0.5220548066636554,6.470627622925019];
try {
    new BigInt64Array(6);
} catch(e6) {
}
try {
    new Int32Array(1926);
} catch(e10) {
}
try {
    new Uint8ClampedArray(4096);
} catch(e14) {
    function F18(a20, a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a22;
        } catch(e23) {
        }
        try {
            this.c = 1355886755;
        } catch(e24) {
        }
    }
    new F18(v1, e14, e14);
    new F18(v2, e14, 6);
    new F18(v0, e14, 1926);
}
class C28 extends Int32Array {
    static d = Uint8ClampedArray;
    static [Int32Array];
    static {
        try {
            v0.toString();
        } catch(e31) {
        }
    }
    [1926];
    static #c = v0;
    static [v0] = v2;
    g;
    2;
    static [1926];
}
new C28();
const v33 = new C28();
const v34 = new C28();
class C35 extends BigInt64Array {
    #g = v33;
    static #e;
    #b = Uint8ClampedArray;
    static c = Uint8ClampedArray;
    static [Uint8ClampedArray] = v1;
    static 5 = v34;
    n(a37, a38) {
        let v36 = this;
        C28 << a38;
        try {
            v36 ||= v36;
        } catch(e40) {
        }
        return C28;
    }
    static g = v0;
    0;
    #b;
    static b;
    a;
}
new C35();
new C35();
new C35();
([0.7701751546226815,997125.4572624811,5.993688823759161e+307]).shift();
