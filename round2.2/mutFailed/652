function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = F0;
    try {
        this.a = -9007199254740990;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v7 = [-1.689990375539516e+307,-2.0,1000.0,-1.0707341096585194e+308,0.2092656383682251];
const v8 = [-62284.612765051774,8.146853533372287,203.62376762466602,0.9881072040390593,-2.0,1.0];
v8[15] = v7;
class C12 {
    #b;
    [3681] = Int8Array;
    static [v6];
    static a;
    [v5] = v6;
    g;
    static #g;
    #e = 127;
    h;
    #g;
}
[1000000000000.0,-704.4429042084569];
let v16 = -65537;
[37197];
%VerifyType(v8);
const o18 = {
};
try {
    new Proxy(v4, o18);
} catch(e21) {
}
const v22 = [1,1017558273];
[536870889,-1096244770,322568499,0,-53254,65537,1603869883];
class C24 {
}
class C25 extends C24 {
    constructor(a27, a28, a29, a30) {
        super();
        class C32 {
            #p(a34, a35) {
            }
            static set e(a37) {
            }
            static #g = -2147483649;
        }
        new C32();
        try {
            const v39 = super.o();
            try {
                v16 = v39;
                new Int32Array(-2147483649);
                const o43 = {
                    "maxByteLength": 1435,
                };
            } catch(e44) {
            }
            v8 <= this;
        } catch(e46) {
        }
        class C47 {
        }
        const v48 = new C47();
        function f49(a50, a51, a52) {
            const o61 = {
                m(a54, a55, a56) {
                },
                [v22](a58, a59, a60) {
                },
                ...v8,
                16: v48,
            };
        }
        for (let i = 0; i < 10; i++) {
            const v65 = v8[15];
            try { a27(C24, a27, v65, v65, -3.0); } catch (e) {}
            function F67(a69, a70, a71) {
                if (!new.target) { throw 'must be called with new'; }
            }
            Math.asinh([-1000.0]);
            f49();
        }
    }
}
new C25(C25, C25, C25, C24);
