try {
    new Uint32Array(629);
} catch(e3) {
}
const v7 = [49522];
new Uint8ClampedArray(v7);
v7[Symbol.toPrimitive] = Symbol;
try {
    new Uint8Array(244);
} catch(e12) {
    function f13(a14) {
        return f13;
    }
    function f15() {
        return f13;
    }
}
const v17 = [-660897945,9,-50991,128,-268435456];
try {
    v17.length = 1000n;
} catch(e18) {
}
try {
    const o26 = {
        set d(a22) {
        },
        "d": 244,
    };
    new BigInt64Array(6);
} catch(e28) {
}
class C32 extends Uint8Array {
    [6];
    constructor(a34, a35, a36, a37) {
        super(a36, a34, a36);
        try { a37.toString(); } catch (e) {}
        try {
        } catch(e39) {
        }
        const v41 = [-27318,-1753087948,65536,-4294967296,536870887,257];
        const v42 = [-536870912,-10018,-2111829144,-39628,536870912,4294967295];
        const v43 = [10,-25124,-2147483648,536870889,-598158478,0];
        const v44 = [v41,,v42];
        const v46 = [,,];
        Reflect.apply(v43.toLocaleString, v44, v46);
        try {
            super[244] = 1073741824;
        } catch(e49) {
        }
        super.with(1073741824, a35);
    }
    static d;
    static 4294967296;
    #b;
}
const v51 = new C32(6, 6, -1, -1);
const v52 = new C32(Uint8Array, 1073741824, 244, v51);
new C32(Uint32Array, 1073741824, -1, v52);
([NaN,1000.0,2.2250738585072014e-308,4.563977870137233,1000.0,1000000000000.0,0.439572514002633])["sort"](Array);
