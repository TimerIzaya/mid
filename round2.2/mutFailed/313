const v0 = [];
gc();
class C6 {
}
gc();
[] = v0;
new Int32Array(949287958);
class C12 {
}
const v15 = v0 | 459664872;
const v16 = Math.cosh(v0);
Math.fround(v0);
459664872 << v0;
(v15 - v15) ^ -2147483649;
function F21(a23) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "h", { writable: true, configurable: true, value: a23 });
    try {
        this.h = a23;
    } catch(e24) {
    }
    class C25 {
        set e(a27) {
            super.cbrt();
        }
    }
}
const v29 = new F21(-2147483649);
function f30() {
    return gc;
}
Object.defineProperty(v29, "toString", { writable: true, enumerable: true, get: f30 });
new F21(-4294967296);
new F21(-4294967296);
const v33 = [0.4957559106778876,1000000.0,Infinity,0.09206648472610712,1.1634868190768017,-6.697648245237533e+306];
const v34 = [1000000000.0,1000000.0,-1000000000.0,0.9951804227565408];
[2.242610464329575,-8.169338599844693,-9.433230878638586e+307];
class C37 {
    set f(a39) {
    }
}
Math.atan(-1.433014417295086e+308);
-9007199254740992 & 788;
typeof v34 === "function";
v29[v15];
delete v33[v29];
try {
    new BigUint64Array(8);
    function F54(a56, a57, a58) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = a57;
        } catch(e59) {
        }
    }
} catch(e60) {
}
try {
    new Float64Array(6);
} catch(e64) {
}
const v66 = new Date();
const o67 = {
    __proto__: v66,
};
try {
    o67[o67] = 802;
} catch(e69) {
}
try {
    class C72 extends Int32Array {
        constructor(a74) {
            eval(C72);
        }
    }
    new C72("valueOf");
} catch(e78) {
}
const v80 = async (a81, a82, a83, a84) => {
    const o85 = {
    };
    try {
        o85.c = a84;
    } catch(e86) {
    }
    try {
        const o87 = {
        };
        o87.c = a84;
        o87.b = Float64Array;
    } catch(e88) {
    }
    try {
        class C91 {
            constructor(a93, a94, a95, a96) {
                7 ^ Int16Array;
            }
        }
        const o99 = {
        };
        o99.c = a84;
        o99.b = Float64Array;
        o99.e = v16;
    } catch(e100) {
    }
    try {
        const o101 = {
        };
        o101.c = a84;
        o101.b = Float64Array;
        o101.e = v29;
    } catch(e102) {
    }
    new Uint8Array(119);
    const o110 = {
        toString(a107, a108) {
            this <= a108;
            return a107;
        },
    };
    try { o110.toString(); } catch (e) {}
    return await 459664872;
};
try {
    new Int16Array(1000);
} catch(e115) {
}
let v117 = 256;
Math.expm1(v117--);
