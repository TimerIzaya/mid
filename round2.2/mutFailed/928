/[n\u003z]/mgsdy;
const v1 = /^xyz{0,1}?/mgsuy;
const v2 = /5NX(?:a{5,1000000}){3,1000000}/gvy;
const v3 = [-465839.36844238255,-2.220446049250313e-16,-1.3844193608244538e+308,-2.2250738585072014e-308,-791.6736446940016,0.3382667370873177,-4.0,1000000000.0,-0.0,1000000000.0];
[0.0,6.691192429672064,1e-15];
const v7 = new Float32Array(v1);
v7[1750] = v7;
const v8 = [1000.0,751.067745408965,-2.9737434327290055e+307,0.9973384899821353,-1.0,-1.7976931348623157e+308,-568.8653861615824,-4.0,-4.06878678695509e+306,0.0];
function f9() {
    return v8;
}
const t11 = 1790;
new t11();
class C15 {
    static {
        Object.defineProperty(v2, "d", { get: f9, set: this });
        async function* f17(a18, a19, a20) {
            Object.defineProperty(a19(), v3, { configurable: true, get: f9 });
            await this;
            try {
                yield 1073741824;
            } catch(e24) {
            }
            return v1;
        }
        f17(9, v2, 1073741824);
    }
}
new C15();
const t29 = 9;
new t29();
new C15();
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    v8.d = "function";
    const v40 = this.constructor;
    try { new v40(a38, 4096); } catch (e) {}
    a39.d = a39;
}
const v42 = new F35("p", "b", Int32Array);
new F35("g", "function", v42);
