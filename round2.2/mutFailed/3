function f0() {
}
const v2 = new WeakSet();
function f4() {
}
function f5() {
    new WeakSet(v2);
    function F7(a9, a10) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C12 extends F7 {
        65536 = Float32Array;
        35 = Float32Array;
    }
    return f4;
}
f4.toString = f5;
try { f4(); } catch (e) {}
class C14 extends f4 {
    constructor() {
        super();
        function f16() {
            return f4;
        }
    }
    static 189;
    #f;
    static [f4];
    3;
    d;
    179;
    #c = f4;
}
const v17 = new C14();
v17[179];
Object.defineProperty(v17, "f", { configurable: true, set: f4 });
let v21 = 513355.8447510137;
const v22 = v21--;
1.6250968645626418e+308 + 1.6250968645626418e+308;
function f26() {
    return WeakSet;
}
const v27 = f26?.bind;
try { v27.bind(WeakSet); } catch (e) {}
try { new v27(v21); } catch (e) {}
2052 % 2052;
try {
    new Uint8Array(2052);
} catch(e34) {
}
5 - 5;
"async" == "async";
const o40 = {
    "execution": "async",
    "type": "minor",
};
5 % 5;
Int16Array.length;
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this?.constructor;
    try { new v46(); } catch (e) {}
    try {
        this.c = 822223171;
    } catch(e49) {
    }
}
const v50 = new F44();
const v51 = new F44();
v51.toString = f4;
const v52 = new F44();
function f53(a54, a55) {
    for (let v56 = 0; v56 < 32; v56++) {
        v50["p" + v56] = v56;
    }
    return a54;
}
Object.defineProperty(v52, "toString", { writable: true, enumerable: true, value: f53 });
function f59(a60, a61) {
    try { a60.toLocaleString(); } catch (e) {}
    const o72 = {
        "f": v50,
        p(a64, a65, a66, a67) {
            class C68 extends F44 {
                5;
            }
            new C68();
            new C68();
            const v71 = new C68();
            return v71;
        },
    };
    o72.d = o72;
    o72.d = o72;
    return o72;
}
f59(v52, v51);
f59(v51, v50);
Int16Array.name;
try {
    const v76 = new Int16Array(5);
    v76.g = v22;
    v76.g = v76;
} catch(e77) {
}
16 & 16;
try {
    new Uint8ClampedArray(16);
} catch(e82) {
    new Uint8Array([[["function","function","function","function"],"function"],2371]);
}
const v91 = [/\x01?/gy];
function f92() {
    return f5;
}
function f93(a94) {
    function F95() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
Object.defineProperty(v91, "toString", { get: f92, set: f93 });
try { v91.toLocaleString(); } catch (e) {}
v91 & 268435456;
const v100 = 2052 * 2052;
v100 * v100;
-2147483648 >>> -2147483648;
const v104 = /8\p{General_Category=Decimal_Number}(a\1)/mgsdvi;
function f105() {
    function f106() {
        f53(Uint8Array, f53);
        const v109 = Symbol.iterator;
        const o113 = {
            [v109]() {
                const o112 = {
                    next() {
                        return Symbol;
                    },
                };
            },
        };
        return f26;
    }
    return f106;
}
function f114(a115) {
    function f116(a117) {
    }
    f116(f116);
}
Object.defineProperty(v104, "toString", { writable: true, get: f105, set: f114 });
const v119 = v104?.toString;
try { new v119(); } catch (e) {}
const v123 = new Int32Array(949287958);
v123[726475987];
-1.0 + -1.0;
const o128 = {
    [5.161624552045739]: 5.161624552045739,
    [5.161624552045739]: -1.0,
};
o128.h = o128;
o128.h = o128;
