function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -43364;
    } catch(e3) {
    }
    try {
        this.e = -43364;
        class C4 {
        }
        const v7 = new Set();
        [v7,v7,4.742654329717853];
    } catch(e9) {
    }
}
new F0();
new F0();
new F0();
function f15() {
    function F16() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C18 extends F16 {
        b;
        constructor(a20) {
            try {
                Promise.prototype = this;
            } catch(e22) {
            }
        }
    }
    return f15;
}
const v23 = f15();
const v24 = f15();
v24[Symbol.iterator] = v24;
const v27 = /xla\n/gdv;
switch ("Uz") {
    case "Uz":
        try { new f15(v23, v27, v24, ...f15); } catch (e) {}
    case v23:
        break;
}
try {
    new Int16Array(7);
} catch(e32) {
}
try {
    new Uint32Array(992);
} catch(e36) {
}
let v39 = Uint8Array;
v39.toString = Symbol;
try {
    v39(2122);
} catch(e41) {
}
try {
    new Uint8ClampedArray(42);
    Array(40778);
    const v47 = [];
    function f48(a49, a50) {
        for (let v51 = 0; v51 < 32; v51++) {
            a50["p" + v51] = v51;
        }
        return 7;
    }
    v47[Symbol.toPrimitive] = f48;
    Math.cosh(3);
    Math.cosh(v47);
} catch(e60) {
}
new Set([-6,22324,-9018,-1989873926,2147483648,-37294297,-11,-1525610275,5,-4]);
function F66() {
    if (!new.target) { throw 'must be called with new'; }
}
let v68 = new F66();
const v70 = --v68;
let v71;
try { v71 = v70(); } catch (e) {}
[v71,v71,..."f",v71];
try {
    Uint16Array(4096);
    const v77 = [16,1073741823,7,-9126,65535,-65537];
    const v79 = ["Uz","Uz"];
    ([NaN,1000.0,2.2250738585072014e-308,4.563977870137233,1000.0,1000000000000.0,0.439572514002633])["sort"](Array);
    class C84 {
    }
    C84.__proto__;
    Reflect.apply(("Uz").toLowerCase, v77, v79);
} catch(e88) {
}
new BigUint64Array(255);
class C93 {
    valueOf(a95, a96, a97) {
        while (0 < 7) {
        }
    }
}
const v101 = new C93();
function f102() {
    return Symbol;
}
Object.defineProperty(v101, "toString", { writable: true, configurable: true, enumerable: true, get: f102 });
let v103 = C93[v101];
function f105() {
    return f105;
}
try {
    v103 = BigUint64Array;
} catch(e109) {
}
const v113 = ++v39;
-v113;
Math.expm1(1564763783);
v113 ^ v39;
try {
    BigUint64Array(4);
} catch(e118) {
}
try {
    Int16Array(4);
} catch(e122) {
}
class C123 {
    8 = -60862n;
    static [1n];
    [1n];
    get g() {
        Map();
    }
    f = Int16Array;
    static b = -2n;
    static f;
    valueOf(a128, a129) {
        const o132 = {
            "maxByteLength": 7,
        };
        const v134 = new ArrayBuffer(3, o132);
        new Uint32Array(v134);
    }
}
