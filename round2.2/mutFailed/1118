let v0 = [-4.741740869989048,3.3667469982802967,1.7976931348623157e+308];
function f1(a2, a3) {
    new Date();
    return v0;
}
v0[Symbol.toPrimitive] = f1;
const v8 = [364251.35543686384,-Infinity,8.227597855546831e+307,1000000000000.0,-4.0,-9.544167975993464,1000000000.0,-408.9735305728897];
function f9(a10) {
    let v11 = "o";
    function f13(a14, a15, a16) {
        const o22 = {
            p(a18, a19, a20) {
                let v17 = this;
                [a18,v17,a18,...v11] = a18;
                return typeof a15;
            },
        };
        return o22;
    }
    const v23 = f13(-500611223, -500611223, v11);
    let v24;
    try { v24 = v23.p(); } catch (e) {}
    return v24;
}
v8.valueOf = f9;
const v25 = [5.029279758887082,-1.7976931348623157e+308,-2.2250738585072014e-308,1000000000.0];
class C26 {
    constructor(a28, a29) {
        a29[15] = a28;
        try { this.resolve(a28, a28, v8, a29); } catch (e) {}
        v25["push"](a28, a29);
        try {
            v0 *= v8;
            class C33 {
                set c(a35) {
                    const v36 = (a37, a38, a39) => {
                        function F40(a42, a43, a44, a45) {
                            if (!new.target) { throw 'must be called with new'; }
                        }
                        return this;
                    };
                }
            }
        } catch(e46) {
        }
    }
    3024 = v8;
    static #a = v8;
    b = v25;
    static [v0] = v0;
}
new C26(v0, v25);
const v48 = new C26(v8, v25);
new C26(v25, v8);
class C50 extends C26 {
    0 = v0;
    static 2418 = v8;
    static #a;
    static #h;
    static #p(a52, a53) {
        let v54 = 0;
        do {
            Reflect.construct(C26, [v25,v25], C26);
            v54++;
        } while (v54 < 8)
        return v54;
    }
}
const v61 = new C50();
new C50();
new C50();
class C64 extends C50 {
    static #m(a66, a67) {
        function F69(a71, a72, a73) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = Uint32Array;
        }
        const v74 = new F69(Uint32Array, Uint32Array, Uint32Array);
        for (const v75 in v74) {
        }
        Math.tan(this);
        Math.expm1(C26);
        -12 >>> this;
        Math.cbrt(this);
        return v8;
    }
    2 = C50;
    b = v61;
    #g;
    #c = v48;
}
new C64();
new C64();
new C64();
const v85 = [3];
v85[Symbol.toPrimitive] = Symbol;
const t96 = [-16,4294967297,-1728414155,-65536,16,-49207,536870889];
t96.length = v85;
