class C3 {
    constructor(a5, a6) {
        const v7 = a5?.[3813917074];
        let v8;
        try { v8 = v7.valueOf(a5, a5); } catch (e) {}
        try {
            v8 = a5;
        } catch(e9) {
        }
    }
    static 5;
    #m(a11) {
        function F13(a15, a16) {
            if (!new.target) { throw 'must be called with new'; }
            const v17 = a15.constructor;
            const o26 = {
                "h": v17,
                ...v17,
                "d": this,
                o(a22, a23, a24, a25) {
                },
                "a": "4",
                65536: -4096n,
                ..."p",
            };
            try { v17(-4, a15); } catch (e) {}
        }
        async function f28(a29) {
            [1000.0,1e-15,3.0,0.0,-1000.0,-5.0,-171.6474406920845,773743.2442981941,-7.833056006592987e+307,Infinity];
            [-2.2250738585072014e-308];
            const v33 = await [-554020.2862032448,-242.7077391501267,-468.12703602601505,0.49022652557559654,-1000000000000.0,1.0976764391590361e+308,910.725764547486,1.0];
            class C34 {
                static 2147483648;
            }
            for (let v37 = 0; v37 < 5; v37++) {
                new a29(..."-1109824449", ..."bigint");
            }
            return v33;
        }
        return f28(f28);
    }
}
const v40 = new C3("-1660812193", C3);
new C3(1.0, v40);
const v42 = new C3(v40, v40);
Math.cbrt(Math);
const v51 = [1000000000000.0];
let v52 = Int16Array;
new v52(v51);
function f58(a59, a60, a61, a62) {
    return f58;
}
let v63 = WeakMap;
const v64 = new v63();
class C65 extends v63 {
    1000 = v64;
    constructor(a67, a68, a69, a70) {
        function f71(a72, a73, a74) {
            function f76(a77) {
                Math.sqrt();
                a69 + a70;
                a70 ^ 573;
            }
            this.onmessage = f76;
            ({"c":a70,"f":v52,"onmessage":v63,} = this);
            a67.b;
        }
        const v87 = [a67,a69];
        const o88 = {
            "arguments": v87,
            "type": "function",
        };
        new Worker(f71, o88);
    }
}
const v90 = new C65();
for (const v91 in v90) {
    C65[6] %= -331471934;
    Array(4);
    %PrepareFunctionForOptimization(Array);
    Array(4);
    Array(4);
    %OptimizeFunctionOnNextCall(Array);
    Array(4);
    const v97 = v91 + 0.5621094656484138;
    const v98 = [2981,-9,9007199254740992,1471562126,-1066554261,-8,-52499,-65536,7];
    const v99 = [-268435456];
    const o104 = {
        __proto__: v98,
        ...v99,
        1699559352: v99,
        [v99](a101, a102, a103) {
        },
    };
    0.5621094656484138 - v97;
}
new Array(9);
new Int8Array(257);
try {
} catch(e118) {
}
const v119 = v42 ** 1e-15;
Math.log1p(304496762);
v119 ^ 304496762;
-2147483648 | 1e-15;
Math.round(v42);
304496762 ** 592879346;
function f125() {
    function F127(a129, a130, a131, a132) {
        if (!new.target) { throw 'must be called with new'; }
        a129 < a129;
        a130--;
        a131++;
        ~a132;
        const v137 = this?.constructor;
        try { new v137(7, a131, 7, a129); } catch (e) {}
        a131 >>> a131;
        a132 & a132;
        try {
            this.d = a129;
        } catch(e141) {
        }
        try {
            this.h = a130;
        } catch(e142) {
        }
    }
}
function f144() {
}
new Int8Array(BigInt64Array);
v51.constructor;
Object.defineProperty(f144(), 4, { get: f144, set: f144 });
try {
} catch(e150) {
}
try {
    new Float32Array(2711);
} catch(e154) {
}
try {
} catch(e155) {
}
const v156 = `
    const o158 = {
    };
    gc(o158);
`;
eval(v156);
