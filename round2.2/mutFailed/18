function f0() {
}
let v1 = Map;
const v2 = new v1();
function f6() {
    return f6;
}
class C7 {
    static {
        super.f;
        this << v1;
    }
    #e = f0;
    constructor(a12, a13, a14) {
        1 && f0;
        try {
            v1 &&= this;
        } catch(e16) {
        }
    }
}
const v17 = new C7(-461684584, 255, -461684584);
v17.setMonth = v2;
new C7(255, 255, -461684584);
new C7(255, -461684584, 255);
Object.defineProperty(v17, "d", { configurable: true, get: f6, set: f0 });
try { v17["setMonth"](-461684584, -1000000000.0, f6, "setMonth"); } catch (e) {}
try {
    new Float64Array(256);
} catch(e27) {
}
try {
    new Int32Array(855);
} catch(e31) {
}
try {
    new Uint16Array(2);
} catch(e35) {
}
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1;
    } catch(e40) {
    }
    try {
        this.e = 1;
    } catch(e41) {
    }
}
F37.subarray = -1000000000.0;
new C7();
new F37();
const v44 = new F37();
v44[Symbol.toStringTag] = -1000000000.0;
const v49 = -Infinity;
class C53 extends F37 {
    constructor(a55, a56) {
        super();
        try {
            this.__proto__ = v44;
        } catch(e57) {
        }
    }
    static {
        if (F37 >= Uint16Array) {
            try {
                C7.length = 4294967296;
            } catch(e61) {
            }
        } else {
            try {
                v17[14] = F37;
            } catch(e62) {
            }
        }
        function f63() {
            return f63;
        }
    }
    #a = F37;
    [v49] = v1;
    static #b = v49;
}
new C53(-2.0, 9);
const v65 = new C53(-2.0, v44);
v65[Symbol.toPrimitive] = f6;
new C53(9.851541757629626, -16);
try {
    new Uint8Array(245);
} catch(e72) {
}
try {
    new Uint32Array(129);
} catch(e76) {
}
try {
    new Int8Array(7);
} catch(e80) {
}
-2 >> v44;
v65 in C53;
try { C53.subarray(); } catch (e) {}
