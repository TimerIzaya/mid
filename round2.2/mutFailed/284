function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -536870912;
    } catch(e3) {
    }
    try {
        this.e = -536870912;
    } catch(e4) {
    }
    try {
        this.h = -536870912;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
class C10 {
    constructor(a12, a13, a14) {
        super();
        try { this(); } catch (e) {}
    }
    /*
    constructor(a17, a18) {
    }
    */
    /*
    constructor(a20, a21) {
        -7.551397036598003e+307 in this;
    }
    */
}
[-4294967296,-4294967296,-4294967296,-4294967296,-4294967296];
("-1959905820").normalize("NFD");
for (let i = 0; i < 10; i++) {
    new C10(-7.551397036598003e+307, C10);
}
class C32 extends BigUint64Array {
    constructor(a34, a35, a36) {
        super(1925);
    }
}
const o37 = {
};
class C39 extends Int8Array {
}
const v40 = new C32();
for (const v41 of v40) {
    typeof Uint8ClampedArray === "undefined";
    let v46 = 1n;
    --v46;
    for (let i = 0; i < 5; i++) {
        C32[268435441] *= 0;
    }
}
const v50 = new Map();
function* f51(a52, a53) {
    return a52;
}
class C54 {
}
[-2.220446049250313e-16];
[-706260.3007901198,344.4005164893392];
[-6.754223639110089e+307,535814.5355802283,1.7976931348623157e+308,-1.7976931348623157e+308,-0.0,2.2250738585072014e-308];
[-1.7976931348623157e+308,1000.0,-1000000000000.0,1.1050339825537279,-1000.0,2.2250738585072014e-308,1000000.0,1.926842174911032,1000000.0];
[-300860.4839574412,1000.0];
function f62(a63, a64) {
    const o65 = {
    };
    return o65;
}
const v66 = f62();
for (let v67 = 0; v67 < 25; v67++) {
    function f68() {
        return f62;
    }
    Object.defineProperty(v66, 5, { configurable: true, get: f62, set: f68 });
}
[1.0,2.2250738585072014e-308,4.0,1.0,3.0,1e-15,0.0,5.0,-8.909028823821199e+305,1.6787380089097326];
[5.0];
class C71 {
}
new Map();
with (v50) {
    try { f(f, f, f); } catch (e) {}
}
