let v1 = -7.903089673616625;
class C3 {
    constructor(a5, a6) {
        function F8(a10, a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a11;
            } catch(e14) {
            }
        }
        const v15 = new F8(this, v1, C3, a6);
        const v16 = new F8(C3, v15, 8, v15);
        const v17 = new F8(v16, v15, a5, this);
        try {
            [65536,4294967297,55507,536870889,536870912,-4294967296,65535,11262,-1024,967062108];
            [-10482,65537,1885482598,1000,2147483648,-1885282116];
            const v20 = [-359805226,-45194,337589540,-9007199254740990,-257368014,-1205501922,-56799,4096,33973];
            try {
                v20[4] = v1;
            } catch(e21) {
            }
            v1 = a6;
        } catch(e22) {
            function F23(a25, a26, a27, a28) {
                if (!new.target) { throw 'must be called with new'; }
                this.a = a25;
            }
            function F29(a31, a32) {
                if (!new.target) { throw 'must be called with new'; }
                with (v17) {
                    c = 8;
                }
                try {
                    a6 ||= F23;
                } catch(e34) {
                }
            }
            const v35 = new F29(F29, F29);
            class C36 extends F29 {
                #e;
                1024 = v35;
            }
            new C36();
        }
        function F38(a40, a41, a42) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a6;
            } catch(e43) {
            }
        }
        const v44 = new F38(a6, v1, "object");
        new F38(8, a6, a5);
        new F38(v44, a6, v1);
    }
}
const v47 = new C3(v1, v1);
const v48 = new C3(v1, v1);
new C3(8, v48);
try { v47.valueOf(Int8Array, "object"); } catch (e) {}
try {
    C3 = v47;
} catch(e53) {
}
try {
    new Int8Array(3927);
} catch(e55) {
}
try {
    new BigInt64Array(0);
} catch(e59) {
}
0 < 3927;
const o69 = {
    [1.7976931348623157e+308]: 1.7976931348623157e+308,
    8: "E",
    [10000](a67, a68) {
    },
};
try {
    new Uint16Array(122);
} catch(e71) {
}
function F75() {
    if (!new.target) { throw 'must be called with new'; }
}
const v77 = new F75();
const v78 = new F75();
const v79 = new F75();
function F80(a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
}
const v85 = F80 !== v77;
try { v79(v77, ...v85, v78); } catch (e) {}
Promise.prototype;
