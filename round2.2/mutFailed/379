try {
    new Int16Array(3);
    const v3 = [4.641649318850067,0.37400148924652876,-816545.7805143001,-3.0,NaN,-1.0,1000000000.0,0.35126267915247544,Infinity,-Infinity];
    class C4 {
        static #d = v3;
    }
    function f5() {
        const o7 = {
            "f": 2.470622729181178,
        };
    }
    for (let i = 0; i < 10; i++) {
        f5();
    }
} catch(e9) {
}
try {
    new Float64Array(24);
} catch(e13) {
}
try {
    new Float64Array(64);
} catch(e17) {
}
class C18 {
    b;
    static m(a20, a21, a22, a23) {
        let v24;
        try { v24 = a23(...Int16Array, Float64Array, 24, this, ...Float64Array, a22); } catch (e) {}
        try {
            v24[10] = 64;
        } catch(e25) {
        }
        class C26 {
            static c;
            constructor(a28) {
                function f29(a30) {
                    function f32(a33) {
                        a28.__proto__;
                    }
                    this.onmessage = f32;
                }
                const v38 = ["function"];
                const o39 = {
                    "arguments": v38,
                    "type": "function",
                };
                new Worker(f29, o39);
            }
        }
        new a23();
        return a21;
    }
    static #o(a43, a44, a45, a46) {
        Float64Array[1];
        Float64Array && 64;
        return a45;
    }
    static b;
}
new C18();
const v50 = new C18();
new C18();
const o52 = {
};
try {
    class C55 extends Int32Array {
        constructor(a57) {
            eval(64);
        }
    }
    new C55("valueOf");
} catch(e61) {
}
const v62 = [-8.175332802545041,-3.0,-1.0987655366055671e+308,3.0];
[-1000.0,-4.0,-1000000000.0,1e-15,-412732.89160617697,-1000.0,3.135700936620111];
const v64 = [-1000000000.0,3.0,0.9242694723889988,3.9524942850152485,5.0];
function F65(a67, a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a70;
    } catch(e71) {
    }
}
new F65(Int16Array, v50, 64, 64);
new F65(v64, C18, 3, 64);
new F65(v62, C18, 3, 3);
Math.sin();
class C80 extends WeakMap {
}
function f82() {
    const v83 = [];
    let v84 = [v83,v83,v83,v83];
    ({"length":v84,} = [v83,v83,v83,v83,v83]);
    return WeakMap;
}
Reflect[Symbol.toPrimitive] = f82;
function f88() {
}
([]).splice(-18774, -18774, Set);
const v93 = [Reflect];
Reflect.apply(("async").localeCompare, "async", v93);
