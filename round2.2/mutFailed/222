function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -29474;
    } catch(e3) {
    }
    try {
        this.c = -29474;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
const v8 = /a{0}/msuyi;
const v9 = /(?!\1(a\1)\1)\1ta$?/msv;
const v10 = /v/sduy;
const v11 = [F0,v8,v10,F0];
const v12 = [v11,v9,v11,v6];
[v12,v8];
class C14 {
    h = v11;
    0 = v6;
    static #f;
    get b() {
        v7[1] = super[v11];
        try {
            super.c = v12;
        } catch(e17) {
        }
        return F0;
    }
}
new C14();
new C14();
new C14();
function F21(a23) {
    if (!new.target) { throw 'must be called with new'; }
}
class C24 extends F21 {
}
const v25 = v5.f;
try { v25.at(v11, v25); } catch (e) {}
v9 | v9;
v10.multiline ^= v25;
const v29 = new C24();
for (let v30 = 0; v30 < 25; v30++) {
    const v31 = v29.b;
    try { v31["toString"](); } catch (e) {}
}
