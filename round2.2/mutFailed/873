try {
    const t1 = 536870887;
    new t1(3);
} catch(e6) {
}
try {
    new Int16Array(3215);
} catch(e10) {
}
try {
    new BigUint64Array(128);
} catch(e14) {
}
[];
const v23 = [];
Object.defineProperty(v23, 0, { writable: true, configurable: true, enumerable: true, value: v23 });
function f24(a25, a26, a27) {
    a26[0] = BigUint64Array;
    a26[0] = f24;
    a26[0] = a26;
    const o28 = {
    };
    return o28;
}
f24(2, v23);
("127")["-9007199254740991"]();
function f32() {
    const o36 = {
        ..."toString",
        ..."toString",
        __proto__: "toString",
        ..."toString",
        "f": 8,
        "g": "vDn",
        ..."toString",
        "b": "toString",
        "d": 8,
        "c": "toString",
        "h": "toString",
    };
    return o36;
}
f32();
const v38 = f24(-1067114837, 3);
[3.0,-433.4423649065495,-2.0,-4.0,667.8899163013198,0.8405951434022986,-4.0,-2.2250738585072014e-308,1e-15,0.6894856098930002];
const o45 = {
    get b() {
        /\p{Script_Extensions=Greek}/d;
    },
};
function f47(a48, a49, a50) {
    const o51 = {
    };
}
try {
    BigInt64Array();
} catch(e54) {
    e54.stack = e54;
}
f47();
f47();
try { ("string").substr("16", "p"); } catch (e) {}
class C61 {
}
Object.defineProperty(C61, 268435441, { writable: true, enumerable: true, value: Int16Array });
const v63 = [2147483647,-51611,41438,257,240493485,256,268435456,15];
Math.log2(1);
gc(v38);
for (let v69 = 0; v69 < 5; v69++) {
    delete v63[v69];
}
new BigInt64Array("16", null);
function f75(a76, a77, a78, a79) {
}
const v81 = 536870889n << 536870889n;
v81 ^ v81;
6 + 6;
class C86 {
}
class C87 {
}
const v88 = [-1.9051759137413093e+307,524838.8464725164,1.0];
const v91 = Reflect.construct(C87, [v88,v88,v88,v88]);
Reflect.getPrototypeOf(v91, v91, v91, ...v88, Reflect);
function F93(a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    const v97 = this.__defineGetter__;
    try { new v97(F93); } catch (e) {}
}
new F93();
gc();
("boolean").__proto__;
const v106 = /1tD/msdu;
function F107(a109, a110) {
    if (!new.target) { throw 'must be called with new'; }
    const v111 = this.constructor;
    try { new v111(); } catch (e) {}
    a109.sticky;
}
new F107(v106);
[Infinity,1.0,-3.0,463.5026556089931,2.2250738585072014e-308,-0.0,1000000000.0];
Math.sin();
