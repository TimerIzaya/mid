const v2 = [];
try { v2.with(v2, v2); } catch (e) {}
const o4 = {
};
class C8 extends Uint32Array {
}
const v9 = new C8(2);
const v11 = [Uint16Array,"function",v9];
const o12 = {
    "arguments": v11,
    "type": "function",
};
class C14 {
    static {
        try {
            Proxy();
        } catch(e18) {
        }
        this.a /= -25756;
        ("a").normalize("NFC");
    }
    o(a23, a24) {
        try {
            function F25(a27) {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C28 extends F25 {
                static {
                    switch (3.3874380681132408) {
                        case undefined:
                            break;
                    }
                }
            }
            a23[2.386538712480382] = C28;
        } catch(e33) {
        }
        try {
            super.g = this;
        } catch(e34) {
        }
        return 2.386538712480382;
    }
}
new C14();
new C14();
const t46 = "function";
new t46();
const v39 = new WeakSet();
[-536870912];
[120172572,6,-50687,7,-761212613,633936937];
[5,-9007199254740990,-9007199254740991];
new Array(8);
class C49 extends Int16Array {
    constructor(a51, a52, a53) {
        super();
        this.copyWithin(a53, a52);
    }
}
new C49(4096, 4096, v39);
