const v0 = [];
try {
    v0.h = 1000;
} catch(e3) {
}
v0["with"](1000, "with");
try {
    const v6 = new BigInt64Array(1000, BigInt64Array, v0);
    try { v6.reverse(); } catch (e) {}
} catch(e8) {
}
const v11 = Float64Array.name;
try {
    new Float64Array(v11);
} catch(e13) {
}
d8.test = d8;
try {
    new d8(1);
} catch(e17) {
    e17.d = e17;
}
try {
    const v20 = new Int16Array(64);
    v20[28];
} catch(e22) {
    const o23 = {
    };
    try {
        new Proxy(v0, o23);
    } catch(e26) {
    }
}
try { Uint16Array(Uint16Array, Int16Array, 64); } catch (e) {}
try {
    new Uint16Array(1000);
} catch(e31) {
}
try {
    new Float64Array(1000, 9, 129, Int16Array);
} catch(e35) {
}
const v36 = [0.7701751546226815,997125.4572624811,5.993688823759161e+307];
const v38 = [1000,1,64];
const v39 = Reflect.construct(BigInt64Array, v38, BigInt64Array);
[Uint16Array,v39,v38,Int16Array];
[v11,d8,v0,1000,[v39]];
const v43 = v36.shift();
v43 >> v43;
