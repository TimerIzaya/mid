const v1 = new WeakMap();
class C2 extends WeakMap {
    b = v1;
    set a(a4) {
        super.c &&= a4;
        const o5 = {
        };
        try {
            new isNaN(v1, o5, C2, this);
        } catch(e8) {
        }
    }
}
const v9 = new C2();
new C2(v1, v9);
const v11 = new C2();
class C12 {
    get a() {
        this.g >>= WeakMap;
        try {
            super[v9] = this;
        } catch(e14) {
        }
        return v1;
    }
    [v9] = WeakMap;
    h = C2;
    a = WeakMap;
}
const v15 = new C12();
new C12();
const v17 = new C12();
const v19 = [C2,v1,[v9,v17,v11],v15];
[v15,v19,v17,v11,v19];
try { new BigInt64Array(...Uint32Array, ...2147483649n); } catch (e) {}
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        return f26;
    }
}
