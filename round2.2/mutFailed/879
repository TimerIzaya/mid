function f2(a3, a4) {
    class C5 {
    }
    function F6() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            function f8(a9, a10) {
                return this;
            }
            const o13 = {
                "arguments": C5,
                "type": "function",
            };
            Worker(f8, o13);
        } catch(e15) {
        }
    }
    return F6;
}
const v17 = Symbol.toPrimitive;
Float32Array[v17] = f2;
try {
    new Float32Array(681747715);
    -4294967297 >>> -4294967297;
    Array(-4294967297);
    class C23 {
    }
} catch(e24) {
}
function f27() {
    return 681747715;
}
function f28(a29) {
    try {
        Symbol[-1] = a29;
    } catch(e30) {
    }
}
Object.defineProperty(Int16Array, "e", { writable: true, configurable: true, enumerable: true, get: f27, set: f28 });
Int16Array.e = Int16Array;
try {
    new Int16Array(257, 681747715, Int16Array);
    const v33 = new Map(681747715, Map);
    function F34(a36, a37) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = v33;
    }
    const v38 = new F34();
    function f39(a40, a41, a42, a43) {
        const o52 = {
            3753723190: v38,
            ...a41,
            "f": F34,
            ...a42,
            valueOf(a45, a46, a47, a48) {
                a40[Symbol.toStringTag];
                return this;
            },
            "g": a42,
            "e": a41,
            "d": a42,
        };
        return o52;
    }
} catch(e53) {
}
const v56 = [-2147483648,16,32276];
function f57(a58) {
    f2(a58, a58);
    v17[Symbol];
    return Float32Array;
}
v56.toString = f57;
const v61 = v56?.find;
let v62;
try { v62 = new v61(v56); } catch (e) {}
class C63 {
    static [v56];
    get e() {
    }
    set g(a66) {
        const v68 = Symbol.iterator;
        const o74 = {
            [v68]() {
                let v70 = 10;
                const o73 = {
                    next() {
                        return v70--;
                    },
                };
            },
        };
    }
}
const v75 = C63?.constructor;
let v76;
try { v76 = new v75(v56, Float32Array, v56, 6); } catch (e) {}
try {
    new Float32Array(6);
} catch(e78) {
    new Int32Array(949287958);
    class C82 {
        static valueOf(a84, a85) {
        }
    }
}
[Float32Array,v62,v76,[Float32Array]];
[Float32Array,681747715,6,6];
45760n > 45760n;
const o93 = {
};
function f94(a95, a96, a97) {
    const o100 = {
        set f(a99) {
        },
    };
    return o100;
}
const v101 = f94();
const v104 = f94(f94, f94(v101, f94, v101), v101)?.__lookupGetter__;
try { new v104(Int16Array); } catch (e) {}
let v109 = Math.atan(-1.433014417295086e+308);
v109--;
class C111 {
}
try { new C111(); } catch (e) {}
class C113 extends Uint16Array {
}
