const v1 = ["n","n","n"];
const v2 = [-4.0,1.0,-1.7976931348623157e+308,0.6175352379554376,218339.60799626866];
Date.now();
Math.tan(1188195176);
const v9 = [v2,v2,v2,v2];
const v11 = new Map(v1);
function f12(a13, a14, a15) {
    try { a14.toString(); } catch (e) {}
    a15[0] = a15;
    try { a15.map(v2); } catch (e) {}
    a15.e = a15;
    const o30 = {
        ...v9,
        5: 5n,
        __proto__: v11,
        "g": 5n,
        toString(a19, a20, a21) {
            class C23 extends Float64Array {
            }
            for (const v26 of "buffer") {
                ("function").match(v26);
            }
            super.d;
            a14 & a13;
        },
    };
    o30.map = a13;
    const v31 = o30[5];
    v31 << v31;
    o30[30] = o30;
    return o30;
}
f12(f12, v1, v9);
const v34 = f12(5n, f12, Map);
%PrepareFunctionForOptimization(f12);
f12(f12, v9, v34);
%OptimizeFunctionOnNextCall(f12);
f12(5n, 5n, Map);
[1e-15,8.923313567235107e+307,-828.911118710548,981012.991104543,0.20571567789585676,201.56172747673236,1.0];
[-9.835701209938076,-6.37292109632294e+307,-1000000000000.0];
[0.8185124301700448,-2.2250738585072014e-308,-3.0,7.78671016167938,5.406115740342967,NaN,-1e-15];
try {
    new Uint8ClampedArray(3185);
} catch(e45) {
}
try {
    new Int16Array(1);
} catch(e49) {
}
try {
    async function f53(a54, a55) {
        function F56(a58, a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            this.g = a60;
            this.a = a58;
        }
        new F56(1);
        return await 1000;
    }
    f53();
    gc();
    new Int32Array(0);
} catch(e67) {
}
try {
    new Float64Array(257);
} catch(e71) {
}
try {
    new Uint16Array(255);
} catch(e75) {
}
try {
    new Uint32Array(2406);
} catch(e79) {
}
const v80 = [];
const v84 = [-9223372036854775807,-302628906,2,-41919];
const v85 = [9007199254740992,9007199254740990,64,8,64060,17831,-12,4294967297,-40453];
const v86 = [1132285667,-7,8,59802,1073741824,-128];
class C89 extends BigUint64Array {
}
const v90 = new C89();
try {
    v90[10] = 105;
} catch(e91) {
}
function f92(a93, a94, a95) {
    const o107 = {
        "a": a95,
        set f(a97) {
        },
        "type": "findLast",
        toString(a99, a100, a101) {
            super.d;
            Date & a95;
        },
        [a95](a105, a106) {
        },
    };
    return a95;
}
f92(v80, v80, -9);
f92(v84, 1073741824, -25278);
f92(v85, v86, 1073741824);
