function f0() {
}
[-538.8537612348966,4.0,4.262499669033273,1000000000.0,-463568.4575642159];
const v5 = [-1000000000000.0,-Infinity,0.12991994665321183,Infinity,8.287390385031198,-1.0663190223166552,1000000000000.0,1000000000.0];
const v6 = [-402207.7266101056,-1000000.0,-0.0,0.8779783546839593,7.016038596762767e+307,2.654560281881766];
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "b", { enumerable: true, value: a9 });
    try {
        this.b = a9;
    } catch(e12) {
    }
}
new F7(v6, "P22", "4");
new F7(F7, "4", "number");
new F7(v5, "number", "P22");
function f16() {
}
f16[Symbol.toPrimitive] = f16;
function f19(a20) {
    new Date(Date.UTC().constructor);
    Math.sqrt("number");
    Math.floor("number");
    const v30 = !-1600134085;
    -1600134085 % -695.9216940639839;
    return Math.acos(v30);
}
f16[Symbol.toPrimitive] = f19;
class C35 {
    [C35] = f16;
    3;
}
new C35();
const v37 = new C35();
function F38(a40) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = a40;
    a40[3];
    const v42 = this.constructor;
    try { new v42(a40); } catch (e) {}
    a40[3];
}
new F38(v37);
new F38(v37);
const v47 = [51641,9,1100370343];
try { v47.groupToMap(); } catch (e) {}
Int32Array.__proto__ = Float32Array;
