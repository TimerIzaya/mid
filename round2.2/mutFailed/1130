function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(this); } catch (e) {}
    a5 >> a5;
    try {
        this.c = a5;
    } catch(e9) {
    }
}
const t10 = 13n;
const v10 = new t10(13n);
const t12 = -290453956n;
const v11 = new t12(v10);
new F3(v11);
let v17 = 256;
v17++;
const v19 = [-2147483649,-873356626];
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
}
const v25 = new F20();
const v26 = v25?.constructor;
try { new v26(v25, F3, "symbol"); } catch (e) {}
v25.length = v17;
try { Reflect.getOwnPropertyDescriptor(Reflect, Reflect); } catch (e) {}
const v30 = [Reflect,Reflect];
const v32 = Reflect.apply(v19.indexOf, v25, v30);
v32 !== v32;
const v34 = [v25,v25,v25,v25,v25];
try { v34.lastIndexOf(F20); } catch (e) {}
function f36(a37, a38) {
    return a38;
}
v34.constructor = f36;
const v39 = v34.slice(v32);
try { v39.groupToMap(v39); } catch (e) {}
