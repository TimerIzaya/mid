const v0 = [];
try {
    const v6 = new Uint32Array(2311);
    v6[2237];
    let v8;
    try { v8 = v0.join(2311); } catch (e) {}
    if (v8) {
        try { v0.some(v8, 2311); } catch (e) {}
    } else {
        try { ("object").link(v0); } catch (e) {}
        function f13() {
            const o20 = {
                4: 4.505209889442958e+307,
                set h(a17) {
                },
                ..."T",
                set g(a19) {
                },
                [4.505209889442958e+307]: "T",
                __proto__: "T",
                "a": "T",
            };
        }
        f13();
        %OptimizeFunctionOnNextCall(f13);
        try { ("-9223372036854775808").codePointAt(v8); } catch (e) {}
    }
} catch(e24) {
}
const v25 = [-202193421,129,-9223372036854775807,753131745,4294967296,1039954491,1561637483,25306,1];
[-41343,65535];
const v27 = [15,64,4294967296,8,-9007199254740991,10,512,-2147483649];
try { v27.push(v27); } catch (e) {}
let v29;
try { v29 = v25.forEach(v27); } catch (e) {}
v0[v29];
BigUint64Array.prototype;
try {
    new BigUint64Array(8);
} catch(e35) {
}
v0[2311]?.[v29];
v25.length;
try { Math.sqrt(v29); } catch (e) {}
let v41 = 241559050;
v41 >> v41;
1.7976931348623157e+308 | 1.7976931348623157e+308;
let v46 = v41++;
v46--;
Math.cosh(1.7976931348623157e+308);
38001 == -536870912n;
Proxy();
Math.trunc(v41 & -2147483647);
1.7976931348623157e+308 ^ -2147483647;
1000 / 1000;
try {
    new BigInt64Array(1000);
} catch(e61) {
}
const v63 = new Set();
try { v63.add(v63); } catch (e) {}
let v65 = -2147483648n;
v65 ^ v65;
v65 != BigUint64Array;
const v69 = [536870889,268435440,-8,115969482,283498361,-9223372036854775808];
try { v69.flat(-1539777981n); } catch (e) {}
v65 <<= 5074n;
