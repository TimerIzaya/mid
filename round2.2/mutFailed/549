const v2 = new Array(257);
class C3 {
    static #n(a5) {
        [] = v2;
        let v7;
        try { v7 = this["getMinutes"](this, v2, 257, "getMinutes"); } catch (e) {}
        let v8;
        try { v8 = new a5(v2, v7, v7); } catch (e) {}
        try { v8(...this, Array, this, 257); } catch (e) {}
        for (let v10 = 0; v10 < 32; v10++) {
            function F11() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = -65536;
                } catch(e14) {
                }
                try {
                    this.g = -65536;
                } catch(e15) {
                }
                try {
                    this.e = -65536;
                } catch(e16) {
                }
            }
            const v17 = new F11();
            new F11();
            const v19 = new F11();
            const v20 = [v17];
            const v21 = [v19,F11,v17,v20];
            const v22 = [v21,v21,v19,v17,v17];
            const v28 = [v19,1073741824,v19,[[v17,51428,v21,v20,v20],v19]];
            try {
                new F11();
            } catch(e31) {
            }
            let v32;
            try { v32 = v20.splice(...-13, v19, ...v22, ...v22, ...v28, -1366042045n); } catch (e) {}
            try {
                v20.__proto__ = v32;
            } catch(e33) {
            }
            e = v20;
            const t43 = "getMinutes";
            t43["p" + v10] = v10;
        }
        return v2;
    }
    g;
}
C3.toString = Array;
const v36 = new C3();
const v37 = new C3();
const v38 = new C3();
const v40 = new Set();
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a44;
    try {
        this.b = Array;
    } catch(e45) {
    }
    try {
        this.c = v38;
    } catch(e46) {
    }
    try {
        this.e = a43;
    } catch(e47) {
    }
}
const v48 = new F41(v36, v37);
function f49(a50) {
    const v52 = [64584,-65536,-4,23049,20286];
    function f53(a54, a55) {
        return 512;
    }
    v52[Symbol.toPrimitive] = f53;
    return v52;
}
v48.toString = f49;
const v58 = new F41(v37, v36);
function f59(a60) {
    try {
        Uint32Array();
    } catch(e63) {
    }
    return v40;
}
v58[Symbol.toPrimitive] = f59;
const v66 = new F41(v38, v38);
class C67 {
    constructor(a69, a70, a71) {
        function f72(a73) {
            for (let i76 = 0, i77 = 10;
                (() => {
                    const v78 = i76 < i77;
                    v78 && v78;
                    return v78;
                })();
                i76++) {
            }
            return 257;
        }
        this.toString = f72;
        Math.sin(a71);
        const v89 = a69 >> a71;
        Math.pow(3, v89);
        Math.acosh(this << v89);
        3 >> a69;
        +3;
    }
    static 8;
    static 65536 = v38;
}
const v95 = new C67(C3, 257, v48);
const v96 = new C67(v66, v95, v58);
new C67(v66, v40, v96);
function F98() {
    if (!new.target) { throw 'must be called with new'; }
}
const v100 = new F98();
function f101(a102, a103, a104) {
    const o105 = {
        [v100]: a102,
        __proto__: a104,
    };
    return F98;
}
function F109(a111, a112, a113) {
    if (!new.target) { throw 'must be called with new'; }
}
const v114 = new F109();
const o120 = {
    n(a116, a117) {
        class C119 extends v114.constructor {
        }
    },
};
new BigInt64Array(2147483648);
eval();
class C129 extends Int32Array {
    constructor(a131) {
        eval();
    }
}
for (let i136 = 0; i136 < 0;) {
}
