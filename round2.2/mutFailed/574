let v0 = [-3.0,-4.0,-1000000000000.0];
const v1 = [0.0,3.407067969851685e-05,-840.1992752718559,Infinity,1000000.0,1000000000000.0,9.829045143282032e+307,-0.0,3.885830252038984,-7.57990828363321];
const v2 = [7.548796732363122,-592657.7960941668,-1e-15,2.2250738585072014e-308,-137.63908526615467,1000000.0,-766369.4704374581,343.3692792454119,7.5984269571441025,4.903931447699577];
function f3(a4) {
    const v6 = [-5.0];
    for (const v8 of [1,11,6,255,2,4,-2147483647,255]) {
        v6.length = 227;
    }
    return a4;
}
const v10 = Symbol.toPrimitive;
v2[v10] = f3;
class C11 {
    constructor(a13, a14) {
        function f15() {
            const v17 = new Int32Array();
            try { v17.reduce(v17); } catch (e) {}
            return a13;
        }
        a13.PI = f15;
        try {
            a13[a14] = this;
        } catch(e19) {
        }
    }
    static #a = v0;
    static n(a21, a22) {
        Math.cbrt(Math);
        a22 + a22;
        Math.floor(-58027);
        Math.atanh(-58027);
        --a22 - -58027;
        const v35 = [1.7976931348623157e+308];
        class C36 extends Uint32Array {
            constructor(a38, a39, a40) {
                super(v35);
            }
        }
        new C36(v35, C36, C36);
        let v42 = ++v0;
        v42++;
        v2 || v2;
        return a22;
    }
}
new C11(v0, v2);
const v46 = new C11(v0, v2);
new C11(v2, v2);
const v49 = new WeakMap();
try {
    new Float32Array(9);
} catch(e53) {
    try {
        v1.d = v46;
    } catch(e54) {
    }
    const v56 = new Date();
    /TV\1111(?:a*)+/msy.test(v56);
}
try {
    function F61(a63, a64) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = Float32Array;
        } catch(e65) {
        }
        try {
            this.a = C11;
        } catch(e66) {
        }
    }
    const v67 = new F61(F61, v10);
    new F61(v49, v67);
    new F61(v1, v67);
    new Float32Array(3);
} catch(e71) {
}
try {
    new Int32Array(143);
} catch(e75) {
}
class C78 extends BigUint64Array {
    constructor(a80, a81, a82) {
        super(1925);
        if (a81) {
            /^xxx$/mi;
            /(?:ab|cde)Pa(?=b)?/duy;
            /[\c!]ab|c/mgi;
        } else {
            super.length;
            const o89 = {
                "maxByteLength": 4096,
            };
            const v91 = new ArrayBuffer(132, o89);
            try {
                new Uint8ClampedArray(v91);
            } catch(e94) {
            }
        }
    }
}
const v95 = new C78(BigUint64Array, C78, C78);
for (const v96 of v95) {
}
v95[0];
