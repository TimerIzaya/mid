try {
    new Int16Array(1024, 1024);
} catch(e3) {
    class C4 {
    }
    7 ^ Int16Array;
}
try {
    new Uint32Array(59);
} catch(e11) {
    ([[-5n,-5n,-5n,-5n],-5n,1485003564n])["toLocaleString"]();
}
try {
    [BigUint64Array,9];
    const o26 = {
        "c": BigInt64Array,
        ...Uint32Array,
        get d() {
            return BigUint64Array;
        },
    };
    new Uint8ClampedArray(127);
} catch(e28) {
}
!true;
const v31 = [-1.54756129235335e+307,-1000000000.0,-7.758673090750888,-2.0,5.0,-2.220446049250313e-16,-4.0];
try { v31.concat(1024); } catch (e) {}
const v33 = [-8.834152380846048];
try { v33.map(59); } catch (e) {}
[0.591288938169086,-361.2243454629462,0.8888016688940137,-188.22653717602145,664206.7110247549,982901.2064913192];
class C36 {
    constructor(a38) {
        function f39(a40) {
            try {
                v31.__proto__ = a40;
            } catch(e41) {
            }
            return true;
        }
        this.constructor = f39;
        let v42;
        try { v42 = a38(this); } catch (e) {}
        try { v42.toString(v42, C36, v42, a38, v42); } catch (e) {}
    }
}
const v44 = new C36();
function f45() {
    function f46(a47) {
        function F49(a51) {
            if (!new.target) { throw 'must be called with new'; }
            this.b = -884.8569550565801;
            const v52 = this?.constructor;
            try { new v52(a51, a51); } catch (e) {}
            if (a51) {
                [4096,-14,-678686963,-9007199254740991,-2,1000];
                [-282476864,2083526231,4294967295,-45128,-128];
            }
        }
        return Uint32Array;
    }
    return f46;
}
Object.defineProperty(v44, "constructor", { writable: true, get: f45 });
const v56 = v44?.constructor;
try { new v56(127); } catch (e) {}
function f58(a59, a60) {
    a59();
    return f58;
}
new Promise(f58);
