try {
    new BigUint64Array(512);
} catch(e3) {
}
try {
    new BigInt64Array(7);
} catch(e7) {
}
try {
    new Uint32Array(255);
} catch(e11) {
}
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a15;
    } catch(e17) {
    }
    try {
        this.g = BigUint64Array;
    } catch(e18) {
    }
}
const v19 = new F12(512, 255, BigUint64Array);
const v20 = new F12(255, 7, 255);
new F12(255, 512, 255);
try {
    new Int16Array(3);
} catch(e25) {
}
try {
    let v29;
    try { v29 = v20.o(undefined, undefined, v20, Uint32Array, 512); } catch (e) {}
    v20[741853529] += v29;
    const v30 = 7 + 2903;
    try { v29(Int16Array, Uint32Array, v30, 3, v29); } catch (e) {}
    new Uint32Array(2903);
} catch(e33) {
}
try {
    new BigUint64Array(16);
} catch(e37) {
}
let v39 = -65537;
v39 <<= -10;
function f41(a42, a43, a44, a45) {
    const o49 = {
        p(a47, a48) {
            return -10;
        },
    };
    return o49;
}
const v50 = f41();
[f41];
const v52 = new WeakMap();
class C53 extends v50 {
    b = v52;
    set a(a55) {
        super.c &&= a55;
        const o56 = {
        };
        try {
            Proxy(v52);
            class C59 {
                valueOf(a61, a62) {
                }
            }
        } catch(e63) {
        }
    }
    static valueOf(a65, a66) {
    }
    d;
    constructor(a68, a69, a70, a71) {
        super();
    }
    #e;
    static 268435441;
}
const v73 = [-5.0];
const v74 = [1,11,6,255,2,4,-2147483647,255];
for (const v75 of v74) {
    v73.length = 227;
}
const v76 = new C53();
new C53();
const v78 = new C53();
class C79 {
    get a() {
        this.g >>= WeakMap;
        super[v76] = this;
        const t92 = Int8Array.of(Uint8ClampedArray);
        t92[-1000.0] = Uint8ClampedArray;
        return v52;
    }
    [v19] = WeakMap;
    h = C53;
    a = WeakMap;
}
const v85 = new C79();
function F86() {
    if (!new.target) { throw 'must be called with new'; }
}
const v88 = new F86();
const v89 = [3.0,728.7710136286514,7.58009139855735];
function f90(a91, a92, a93, a94) {
    const o96 = {
        get d() {
            v89.length += a91;
            return a91;
        },
        "g": v88,
    };
    return o96;
}
new C79();
const v98 = new C79();
const v100 = [C53,v52,[v76,v98,v78],v85];
[v85,v100,v98,v78,v100];
try { new BigInt64Array(v20, ...2147483649n); } catch (e) {}
for (let v106 = 0; v106 < 5; v106++) {
    function f107() {
        return f107;
    }
}
const v108 = [6.4540458206582905,-312.2364355002594,0.3894069019876403,3.0,-2.0,-1.0,1000000000.0,2.0,-418.3680545017014];
for (let v109 = 0; v109 < 5; v109++) {
    v108["p" + v109] = v109;
}
v76[83];
Object.defineProperty(v74, 6, { configurable: true, enumerable: true, set: f41 });
const v114 = Symbol.iterator;
const o123 = {
    [v114]() {
        let v116 = 10;
        const o122 = {
            next() {
                v116--;
                const v120 = v116 == 0;
                const o121 = {
                    "done": v120,
                    "value": v116,
                };
                return o121;
            },
        };
        return o122;
    },
};
