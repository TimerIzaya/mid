/nI/sdvy;
const v4 = /\1(a)/gvyi;
v4.sticky = v4;
/a$I/sdvi;
try {
    new Uint16Array(218);
} catch(e9) {
}
10 - 10;
try {
    new BigInt64Array(10);
} catch(e14) {
}
221 + 221;
try {
    new Float32Array(221);
} catch(e19) {
}
const v22 = new Array(7);
try { v22.indexOf(v22); } catch (e) {}
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = Array;
    a26[3] = Float32Array;
    try {
        this.f = v22;
    } catch(e27) {
    }
    try {
        this.d = a26;
    } catch(e28) {
    }
    try {
        this.b = 7;
    } catch(e29) {
    }
}
const v30 = new F24(F24);
const v31 = new F24(v22);
const v32 = new F24(v30);
const v33 = [v32,v22,F24,Array,F24];
function f34() {
    function f35() {
        return f35;
    }
    return F24;
}
Object.defineProperty(v33, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f34 });
v33[1];
const v39 = [v22,Array];
const v40 = [v33,v31];
function f41(a42) {
    function f43(a44) {
        const o47 = {
            "maxByteLength": 217281547,
        };
        const v49 = new ArrayBuffer(170, o47);
        new Float32Array(v49);
    }
    return 10;
}
v40[Symbol.toPrimitive] = f41;
try { v40.find(218); } catch (e) {}
class C55 extends F24 {
    get f() {
        Object.defineProperty(this, this, { writable: true, value: this });
        try {
            try {
                v22.length = 7;
            } catch(e57) {
            }
        } catch(e58) {
            new F24(e58);
        } finally {
            try {
                Array[this] = v40;
            } catch(e60) {
            }
        }
        return v39;
    }
}
try { new C55(); } catch (e) {}
const v62 = new C55();
v62.e = v62;
new C55();
new C55();
for (const v65 of v39) {
    Object.defineProperty(v65, 2, { value: v65 });
    try { v65.findLast(Uint16Array); } catch (e) {}
    const v67 = C55 % v40;
    try { new v65(7, v67, v32, v67); } catch (e) {}
    /(ab)/guyi;
    const v70 = /Sfoo(?<=bar)baz/mdui;
    const v71 = /a\w0/svy;
    try { v71.compile(v70, Uint16Array); } catch (e) {}
}
