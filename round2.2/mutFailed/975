class C3 {
    static f;
    static #valueOf(a5) {
        Object.defineProperty(this, 194, { enumerable: true, value: 4.23969211063191e+307 });
        const o6 = {
        };
        try {
            o6.b = -9007199254740991;
        } catch(e7) {
        }
        try {
            const o8 = {
            };
            o8.b = -9007199254740991;
            o8.h = this;
        } catch(e9) {
        }
        try {
            for (let i12 = 0; i12 < 0;) {
            }
            let o17 = {
            };
            o17.b = -9007199254740991;
            for (const v18 of C3) {
                try {
                    o17 = v18;
                } catch(e19) {
                }
            }
            o17.h = this;
            o17.e = this;
        } catch(e20) {
        }
        try {
            const o21 = {
            };
            o21.b = -9007199254740991;
            o21.h = this;
            o21.a = 4.23969211063191e+307;
        } catch(e22) {
        }
        return o6;
    }
}
const v23 = new C3();
const v24 = new v23();
new C3();
class C26 extends C3 {
    toString(a28, a29) {
        try { v24["setYear"]("setYear", "setYear"); } catch (e) {}
        return FinalizationRegistry;
    }
    set b(a34) {
        const v35 = C3 % a34;
        const v36 = [202103923,268435456,-4096,7,1465268244,1995401832];
        [-268435456,-2,742618609,1474538627];
        [-9223372036854775807,1000,16];
        const o39 = {
            [v35]: a34,
            "a": 1000000.0,
        };
        try {
            super[a34] = v36;
        } catch(e40) {
        }
        let {"h":v41,"length":v42,...v43} = v36;
        const v47 = [1,-4096,3765,127,-15563,10000,-7];
        class C48 extends Uint32Array {
        }
        const v49 = new C48(v47);
        v49.findLastIndex(Symbol);
        try {
            super.m(v36, 4.23969211063191e+307, 4096, C3);
        } catch(e53) {
        }
        ArrayBuffer[711566462] **= 4.23969211063191e+307;
        const o54 = {
            "maxByteLength": 4096,
        };
        const v56 = new ArrayBuffer(4096, o54);
        try {
            new Uint8ClampedArray(v56);
        } catch(e59) {
            try {
            } finally {
            }
            function f60(a61, a62) {
                ({"f":e59,} = C3);
                return a61;
            }
        }
    }
    m(a64, a65) {
        new C3();
        return v23;
    }
    static [1000000.0] = v24;
}
new C26();
new C26();
new C26();
try {
    new Uint8Array(13);
} catch(e73) {
}
const o74 = {
};
let v75 = 1n;
try {
    v75 **= -295689100n;
} catch(e77) {
}
try {
    new BigInt64Array(16);
} catch(e81) {
}
try {
    new Float32Array(3084);
} catch(e85) {
    const o86 = {
    };
    class C88 extends Float64Array {
        constructor(a90, a91, a92, a93) {
        }
    }
    if (-295689100n === C88) {
        const o98 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o98);
    } else {
        let v101 = -2147483648;
        v101++;
        Math.abs(v101);
        Math.tan(v101);
    }
}
const v107 = new Map();
const v108 = [v107,v107,v107];
const v110 = new Set(v108);
[v107,Map,v108,v110];
gc();
