try {
    new Int8Array(7);
} catch(e6) {
}
try {
    new BigUint64Array(2915);
} catch(e10) {
}
try {
    /L\p{Script_Extensions=Greek}*/dvi;
    const v14 = /a*b(?<a>.)\k<a>/gui;
    /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10?/gsu.unicode;
    v14.multiline -= 2827;
    new Uint16Array(2827);
} catch(e18) {
}
/[abc|def|ghi*]/mgdui;
const v20 = /h\p{gc=Nd}CU/mduyi;
let v21 = /(a)\1/mi;
try {
    v20.__proto__ = v20;
} catch(e23) {
}
v21++;
class C30 {
    constructor(a32, a33) {
        a32--;
        a33 + a33;
        class C36 {
        }
        function f37() {
            return f37;
        }
        const v38 = this?.constructor;
        v38.length;
        const v41 = Array.name;
        const v43 = Array(255);
        for (let v44 = 0; v44 < 25; v44++) {
            v44 + v44;
            v43[781];
        }
        try { new v38(this, this); } catch (e) {}
        a32?.a;
        function f49(a50, a51) {
            a51 - a51;
        }
        try {
            Array.f = v41;
        } catch(e53) {
        }
        const v56 = ~-2147483647n;
        Math.exp(-2147483647n);
        let v58 = -(-65535);
        const v59 = v56 >>> -2147483647n;
        v58--;
        -2147483647n * v59;
        Math.min(v59);
        const v63 = f49(a33, a32);
        f49(v63, v63);
        f49(128, 128);
    }
}
C30.name = C30;
new C30(0.0, C30);
new C30(-1000658926);
try { ("CPd").match(C30); } catch (e) {}
[];
[];
([]).toReversed();
class C77 {
}
let v78 = new C77();
let v79 = -9007199254740990;
const v80 = [-65537,536870888,24399,129,111446355,9,268435456,31980];
let v81 = Uint8ClampedArray;
v81.d = v81;
[];
({"h":v78,"length":v81,...v79} = v80);
