try {
    const o5 = {
        [Int32Array]: 7,
        "e": 7,
        [7](a3, a4) {
        },
    };
    new Int32Array(7);
} catch(e7) {
}
const t10 = 7;
new t10();
let v11 = 1073741825;
v11 *= 9007199254740992;
Math.log10(/n/du >>> 1.5953770657178907);
try {
    new BigInt64Array(255);
} catch(e19) {
    ("1073741825").normalize();
    "HqF" >> "1073741825";
    /n/du >>> 1.5953770657178907;
}
try {
    new BigInt64Array(1315);
} catch(e30) {
}
let v31 = 1919218961;
class C37 extends BigInt64Array {
    p(a39, a40, a41, a42) {
        try {
            v31 &&= 255;
            function F43(a45, a46) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v47 = new F43(F43, F43);
            v47[Symbol.isConcatSpreadable] = -5.0;
        } catch(e51) {
        }
        return Int32Array;
    }
    1 = 1.0;
    static #toString(a53, a54, a55, a56) {
        delete this[1894767853];
        for (let v58 = 0; v58 < 32; v58++) {
            this["p" + v58] = v58;
            function f63(a64, a65) {
                const o70 = {
                    __proto__: 7,
                    p(a67, a68, a69) {
                        a65 = 2147483649;
                        return a68;
                    },
                };
                return f63;
            }
        }
        return -3.0;
    }
}
new C37();
new C37();
new C37();
function f74() {
}
f74();
const v76 = f74();
function F80(a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    const v85 = [-0.0,0.563638035138707,2.220446049250313e-16,443790.5075190137,1000000000000.0,-5.0,664.5660379058452,1000000000.0,4.0,-689.5442717348067];
    try { ("flags").padStart(v85); } catch (e) {}
    class C88 {
    }
    const v89 = this.constructor;
    try { new v89(); } catch (e) {}
    new Int16Array(4096);
    new Uint16Array();
    new Uint32Array();
}
new F80();
new F80(v76, -4096);
