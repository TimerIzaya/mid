function f0() {
}
f0.o = f0;
function f4(a5, a6) {
    const o55 = {
        "b": 597.5831799227135,
        "g": 756652.1470016595,
        n(a8, a9) {
            try {
                new Uint8ClampedArray(130);
            } catch(e13) {
            }
            let v16;
            try { v16 = new Int16Array(9, Uint8ClampedArray, 130); } catch (e) {}
            try {
                new Int16Array(9);
            } catch(e18) {
            }
            try {
                new Int8Array(4096);
            } catch(e22) {
            }
            a5[9];
            let v25;
            try { v25 = ("constructor").normalize(); } catch (e) {}
            const v28 = ("o")?.toLocaleUpperCase;
            try { new v28(); } catch (e) {}
            function F30(a32, a33) {
                if (!new.target) { throw 'must be called with new'; }
                a32 * a32;
                a33 + a33;
                const v36 = this?.constructor;
                try { new v36(a32, "string"); } catch (e) {}
                -a32;
                try {
                    this.c = "o";
                } catch(e39) {
                }
                try {
                    a6.h = a32;
                } catch(e40) {
                }
                try {
                    this.d = "constructor";
                } catch(e41) {
                }
            }
            new v25(4096, 9);
            new a9(9, 130);
            const v45 = gc();
            this[2] %= a8;
            const v46 = this ^ 756652.1470016595;
            const o47 = {
            };
            try {
                o47.h = a9;
            } catch(e48) {
            }
            try {
                const o49 = {
                    "d": "o",
                    "e": a6,
                    __proto__: a6,
                    [v45]: v16,
                    2147483649: v16,
                };
                o49.h = v46;
                o49.b = a5;
            } catch(e50) {
            }
            try {
                const o51 = {
                };
                const t73 = "o";
                t73.h = v46;
                const t75 = "constructor";
                t75.b = f0;
                o51.e = a9;
            } catch(e52) {
            }
            try {
                const o53 = {
                };
                o53.h = v46;
                o53.b = a5;
                o53.c = a9;
            } catch(e54) {
            }
            return o47;
        },
    };
    return o55;
}
const v56 = f4(597.5831799227135, 1.4189745713756816e+308);
for (let i58 = 0; i58 < 10; i58++) {
    i58 >= i58 ? i58 : i58;
    Object.defineProperty(v56, 8, { enumerable: true, get: f0 });
}
f4(597.5831799227135, 756652.1470016595);
const v67 = f4(1.4189745713756816e+308, 756652.1470016595);
class C68 {
    f = C68;
    get d() {
        try {
            super.apply(this, C68, v67);
        } catch(e71) {
        }
        return this;
    }
    g = 597.5831799227135;
    static #h;
    static d;
    [f0] = 756652.1470016595;
}
new C68();
new C68();
new C68();
function f77() {
    class C80 {
        #f = 1000.0;
        constructor(a82, a83) {
            const v84 = this?.constructor;
            try { new v84(C80, a83); } catch (e) {}
            a83--;
            try {
                a82[1000000000.0] = this;
            } catch(e87) {
            }
        }
    }
    new C80();
    return C80;
}
Int8Array.toString = f77;
try {
const t0 = 4;
t0(Int8Array, Int8Array, Int8Array, Int8Array);
} catch (e) {}
switch (Int8Array) {
    default:
        let v90;
        try { v90 = f0.o(); } catch (e) {}
        Int8Array <= v90;
        break;
}
