function f3() {
    return 1449569530;
}
class C4 extends f3 {
    o(a6, a7) {
        const v8 = this[this];
        function F9(a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = a13;
            } catch(e14) {
            }
            try {
                this.d = a7;
            } catch(e15) {
            }
        }
        new F9(a7, a7, -4303);
        new F9(-9, -4303, v8);
        new F9(a6, a7, -9);
        return v8;
    }
}
const v19 = new C4();
const v20 = new C4();
new C4();
/[y(\1a)]/mgdv;
const v23 = /N/;
try {
    C4.fuck(-9, 1449569530, v20, f3);
} catch(e25) {
}
try {
    f3();
} catch(e27) {
}
const v28 = /7Y/mi;
try {
    new Uint8Array(5);
} catch(e32) {
}
try {
    new Int32Array(12);
} catch(e36) {
}
try {
    new BigUint64Array(1);
} catch(e40) {
}
Object.defineProperty(v20, -2, { writable: true, enumerable: true, value: -9223372036854775807 });
try {
    v19.o(v19, BigUint64Array, v19, false);
} catch(e47) {
}
class C52 {
    static [6];
    toString(a54, a55, a56, a57) {
        delete a57[7];
        Object.defineProperty(v28, 5, { configurable: true, enumerable: true, get: f3 });
        try {
            v23[7] = a54;
        } catch(e59) {
        }
        return a55;
    }
    [9] = Int32Array;
    static m(a61, a62, a63, a64) {
    }
    [Float64Array];
    [Int32Array] = Float64Array;
}
const v65 = new C52();
let v66;
try { v66 = v65.n(); } catch (e) {}
const v68 = v66 >= Uint8Array ? v66 : Uint8Array;
v68[268435439] = v68;
v68.a = C52;
