const v1 = new Map();
129 * 129;
const o13 = {
    [302.2233462307022](a9, a10, a11, a12) {
    },
};
1073741823n % 1073741823n;
const v18 = new Date();
try { v18.setMilliseconds(v1); } catch (e) {}
function f20() {
}
const t11 = f20();
const v22 = new t11();
[v22];
let v24;
try { v24 = v18.setUTCMinutes(v18, 536870888, -65537n); } catch (e) {}
try { f20(f20, f20, f20); } catch (e) {}
new Float32Array(16);
class C30 extends Uint32Array {
}
v24 - v24;
class C34 extends Date {
    constructor(a36, a37, a38, a39) {
        super("boolean");
    }
}
true || true;
class C44 {
    p(a46, a47, a48, a49) {
        [a47,..."bigint",this];
    }
}
-9007199254740992 - -9007199254740992;
[1000000000.0,691.0681218696409,-823.8719554513834,-5.0,1000.0,200.99619740396702,-1000000000000.0,-1.0006145945680835e+308,1000000000000.0,-348.49256910694066];
const v55 = [NaN,7.295016864447467e+307,-2.0,0.9915591279937898,-4.0];
try { v55.copyWithin(1073741823n, 1073741823n); } catch (e) {}
const v57 = [1.7976931348623157e+308,2.2250738585072014e-308,-2.220446049250313e-16,345.98033146540115,0.13934292693778494,1.4199695375620927,0.2665243708364201];
try { v57.map(536870888); } catch (e) {}
const v59 = [9,-1024];
Int8Array.d = Int8Array;
const v62 = new Int8Array(v59);
const v63 = v62?.constructor;
try { new v63(true, v62, v1); } catch (e) {}
v62[128] >>= 128;
