function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 257;
    } catch(e3) {
    }
    try {
        this.f = 257;
    } catch(e4) {
    }
    try {
        this.e = 257;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v9 = [1000,6,1361362552];
Array.constructor = Array;
function f13(a14, a15, a16) {
    a15.constructor = Array;
    a15.constructor(f13);
    class C19 extends Date {
    }
    C19.parse(3665);
    return f13;
}
f13[Symbol.toPrimitive] = Array;
const v23 = f13(1, Array);
const v24 = [-1859246775,6,2,2501,-15,1000,8,-1642672611,8424,-1402982530];
const v25 = [127,5,512,268435440,256];
function f26() {
    ("0")[0];
}
f26();
v23();
const v32 = [];
const t38 = Reflect.construct(f26, v32);
t38();
function f38(a39, a40, a41) {
    const o48 = {
        m(a43, a44) {
            [a40];
            const v46 = [a41,v24,-60215,v6];
            [F0,v46,v46];
            return v7;
        },
        "d": -60215,
        "c": a40,
        ...v25,
        "a": F0,
        "e": v7,
        "f": a41,
        "g": -60215,
        __proto__: v25,
        "h": -4167,
    };
    return o48;
}
f38(f38(v32, v9, -60215), v25, -4167);
class C51 {
}
try { C51.apply(C51, C51, C51, C51, C51); } catch (e) {}
try {
    Uint8Array();
} catch(e55) {
}
f38(v9, v9, -9007199254740991);
[-44161,1137250346,2147483648];
[-9223372036854775808,-112,9007199254740992,128,-4294967296,255,65537,129,536870912];
[-4,268435439,2147483649,4294967297,39754,-4799,257,-16,-2451,255];
function F60(a62) {
    if (!new.target) { throw 'must be called with new'; }
}
class C63 extends F60 {
}
const v64 = new v8();
for (let v65 = 0; v65 < 25; v65++) {
    const v66 = v64.b;
    try { v66["toString"](); } catch (e) {}
}
