function f0() {
}
function f1() {
    const o23 = {
        ...f0,
        "e": f0,
        "h": f0,
        "g": f0,
        [f0]() {
            let v2 = this;
            try {
                v2 &&= v2;
            } catch(e3) {
            }
            try {
                super.c = f0;
            } catch(e5) {
            }
            let v7 = 4294967296;
            Math.acos(f0);
            const v10 = [-729.7653684712886];
            switch (-268435456) {
                case v10:
                    break;
                default:
                    break;
            }
            !-1000.0;
            v7--;
            try { v2["asin"]("asin", "asin"); } catch (e) {}
            BigInt64Array[Uint16Array] = 127;
            const v19 = /BP1()Af/mdyi;
            const v20 = /Pa\9\118\c!/msd;
            const v21 = v19.exec(v20);
            try {
                v21.a = v20;
            } catch(e22) {
            }
            return f0;
        },
    };
    function f24() {
        return o23;
    }
    Object.defineProperty(o23, "o", { writable: true, configurable: true, get: f24 });
    return o23;
}
const v25 = f1();
const v26 = f1();
const v27 = f1();
class C30 {
    constructor(a32, a33) {
        a32--;
        a33 + a33;
        class C36 {
        }
        function f37() {
            return f37;
        }
        const v38 = this?.constructor;
        v38.length;
        Array.name;
        const v43 = Array(255);
        for (let v44 = 0; v44 < 25; v44++) {
            v44 + v44;
            v43[781];
        }
        try { new v38(this, this); } catch (e) {}
        a32?.a;
        function f49(a50, a51) {
            a51 - a51;
        }
        const v53 = f49(a33, a32);
        f49(v53, v53);
        f49(128, 128);
    }
}
function f58(a59, a60) {
    let v61;
    try { v61 = v26.o(a59, 2147483649, a60, a59); } catch (e) {}
    function F62(a64, a65, a66) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = 3;
        } catch(e67) {
        }
        try {
            this.d = a64;
        } catch(e68) {
        }
        try {
            this.e = a59;
        } catch(e69) {
        }
    }
    new F62(a60, 3, v26);
    new F62(v61, a60, v25);
    new F62(2147483649, 3, v61);
}
const v74 = new Promise(f58);
function f75(a76, a77, a78, a79) {
    a77 * a77;
    try { a79.g(); } catch (e) {}
    const o105 = {
        m(a83, a84) {
            try {
                this.fuck(-464670.7944295043, undefined, 4294967297, /Y+/gsdui);
            } catch(e92) {
            }
            f0();
            %PrepareFunctionForOptimization(f0);
            f0();
            f0();
            const v98 = [-50174,-9223372036854775807,2147483647,31110,-7];
            let v99 = /BAE/mgu;
            [...v99] = v98;
            const t116 = 2147483649;
            const v101 = new t116();
            const v102 = v101?.__defineSetter__;
            try { v102(2147483649, Int16Array); } catch (e) {}
            %OptimizeMaglevOnNextCall(f0);
            f0();
            return -15;
        },
        "f": a77,
    };
    function f106(a107, a108, a109) {
        return a107;
    }
    Object.defineProperty(f106, Symbol.toPrimitive, { writable: true, configurable: true, value: f106 });
    const o113 = {
    };
    URIError(f106, o113);
    return o105;
}
let v115 = f75(v25, 3, v26, v26);
const v116 = f75(v26, 3, v27, v25);
try { v116.m(v27, v27); } catch (e) {}
f75(v26, -65535, v26, v25);
function f119() {
    return 3;
}
const v120 = [];
function f121() {
    let v122;
    try { v122 = v74.finally(f119); } catch (e) {}
    0.5462456485819654 * v115;
    -(v115 ^ v115);
    Math.acosh(f1);
    --v115 ** v122;
    Math.random();
    return v122;
}
v120[Symbol.toPrimitive] = f121;
-1.0 - -1.0;
v120.toString = -26016;
try {
    v120[v120] = -1.0;
} catch(e138) {
}
