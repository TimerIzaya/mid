let v1 = -7.903089673616625;
class C3 {
    constructor(a5, a6) {
        try {
            v1 = a6;
        } catch(e7) {
            function F8(a10, a11, a12, a13) {
                if (!new.target) { throw 'must be called with new'; }
                this.a = a10;
            }
            function F14(a16, a17) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v18 = new F14(F14, F14);
            class C19 extends F14 {
                #e;
                1024 = v18;
            }
            new C19();
        }
        function F21(a23, a24, a25) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a6;
            } catch(e26) {
            }
            try {
                a5 **= a24;
            } catch(e27) {
            }
            a6[1] = a5;
        }
        const v28 = new F21(a6, v1, "object");
        new F21(8, a6, a5);
        new F21(v28, a6, v1);
    }
}
new C3(v1, v1);
const v32 = new C3(v1, v1);
new C3(8, v32);
const o42 = {
    valueOf() {
        C3 != 3927;
        const o40 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o40);
        return "object";
    },
};
try {
    new Int8Array(3927);
} catch(e45) {
}
try {
    new BigInt64Array(0);
} catch(e49) {
    const v50 = v32[3];
    Object.defineProperty("object", 9, { writable: true, configurable: true, value: 3927 });
    function F51(a53, a54, a55) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = v50;
        } catch(e56) {
        }
    }
    const v57 = new F51(o42, Int8Array, e49);
    const v58 = new F51(C3, e49, "object");
    new F51(v57, v58, BigInt64Array);
}
0 < 3927;
const o69 = {
    [1.7976931348623157e+308]: 1.7976931348623157e+308,
    8: "E",
    [10000](a67, a68) {
    },
};
try {
    new Uint16Array(122);
} catch(e71) {
}
function F75() {
    if (!new.target) { throw 'must be called with new'; }
}
const v77 = new F75();
const v78 = new F75();
const v79 = new F75();
function F80(a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
}
const v85 = F80 !== v77;
try { v79(v77, ...v85, v78); } catch (e) {}
Promise.prototype;
