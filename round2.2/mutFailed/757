class C3 {
    static a;
    #toString(a5, a6) {
        new Int8Array(8);
        const v10 = [-47303,-1515330264,8,16,-50807,9903,-1629421902,536870888,8975211,1073741824];
        const v13 = /NN/mgsui;
        const v14 = /rMP+/gsdv;
        let v15;
        try { v15 = v14.test(v13); } catch (e) {}
        v10.lastIndexOf(/^xxx$/gsdv, -1);
        try { v15(v10, 30602); } catch (e) {}
        const o21 = {
            "maxByteLength": 1024,
        };
        [Int32Array,Int32Array,Int32Array,Int32Array];
        class C25 extends Date {
        }
        const v27 = new SharedArrayBuffer(1024, o21);
        try {
            try {
            } catch(e29) {
            }
            function F31(a33, a34) {
                if (!new.target) { throw 'must be called with new'; }
                this.c = Float64Array;
            }
            new Int16Array(v27);
        } catch(e36) {
        }
        return v27;
    }
}
C3.d = C3;
const t33 = C3.a;
const v38 = new t33();
const v39 = v38?.__lookupGetter__;
try { new v39(v38); } catch (e) {}
const v41 = new C3();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
const v44 = new C3();
try { v44.isPrototypeOf(v44); } catch (e) {}
try { WeakSet.propertyIsEnumerable(WeakSet); } catch (e) {}
const v48 = new WeakSet();
let v50 = Symbol.replace;
try {
    v50 += v50;
} catch(e51) {
}
try { v48.delete(v48); } catch (e) {}
const v54 = -(-4.0);
-9.735153783770109 >> -9.735153783770109;
let v59;
try { v59 = ("1073741823").localeCompare(v48); } catch (e) {}
v59 >> v59;
try { v54.substring(v54, v54); } catch (e) {}
try { ("q6t2h").match(C3); } catch (e) {}
let v65 = -4294967296n;
v65--;
const v67 = [12,4,-65536,-1024,-11,-1934425457];
try { v67.reduceRight(v65); } catch (e) {}
v67[3] = v67;
try {
    v67.map(v65);
} catch(e70) {
}
