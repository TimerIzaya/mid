try {
    new Float32Array(207);
} catch(e3) {
}
try {
    new BigUint64Array(4);
} catch(e7) {
}
try {
    new Float64Array(4096);
} catch(e11) {
}
class C12 {
    constructor(a14, a15, a16) {
        a15 ** a15;
        Reflect.construct(this[this], [a16,4096], Float64Array);
    }
    0;
    [BigUint64Array] = BigUint64Array;
    static [Float32Array] = 4096;
    static d;
    [Float32Array];
}
new C12(4, 4, 4);
new C12(4, 207, 4096);
var d = 2;
Array.from([1000000000000.0,1.3368057463734657e+307,-231.63216380614244,-807429.563730756,0.536075209246202,-967813.2829232133,0.0,1000000000.0,1000000000000.0,4.0], Array);
new C12(4096, 4, 207);
try {
    new Int32Array(16);
} catch(e32) {
}
try {
    new Int32Array(254);
} catch(e36) {
}
try {
    new Int16Array(3586);
} catch(e40) {
}
const v41 = [];
function f42(a43, a44, a45) {
    return f42;
}
const v48 = [v41];
const o49 = {
    "arguments": v48,
    "type": "function",
};
const t49 = Math.random();
t49.arguments = o49;
let v53 = 256;
Math.expm1(v53--);
new Worker(f42, o49);
