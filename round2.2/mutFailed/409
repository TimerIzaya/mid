function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 4550;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
try {
    F0[v5] = F0;
} catch(e6) {
}
try { v5(v5, v4, v4, v5); } catch (e) {}
const v8 = new F0();
class C9 {
    static #d = v5;
    set b(a11) {
        try {
            const v13 = new BigUint64Array();
            try { v13.with(v13, BigUint64Array); } catch (e) {}
            gc();
            super.toString(v8);
        } catch(e18) {
        }
        try {
            this.__proto__ = this;
            function f19(a20) {
                return f19;
            }
            return f19;
            Math.tanh(-1000000.0).tanh(8);
        } catch(e26) {
        }
        let v27;
        try { v27 = a11(this); } catch (e) {}
        try { a11["catch"](v27); } catch (e) {}
    }
    static [v5] = v4;
    #e;
    15 = F0;
    10;
    [v8] = v8;
    g;
}
const v30 = new v8();
v30[15] = v30;
try {
    v8[1000000000.0] = v30;
} catch(e32) {
}
new C9();
const v34 = new C9();
class C35 {
    10 = v8;
    set e(a37) {
        +v34;
        const v39 = this;
        [9007199254740990,9007199254740990,9007199254740990,9007199254740990];
        function f42() {
            return f42;
        }
        let v43 = 0;
        while (v43 < 1) {
            Math.atanh(1000000000.0 instanceof f42);
            v43++;
        }
        try {
            const o50 = {
            };
            v5.fuck(a37, o50, o50);
        } catch(e52) {
        }
    }
    #c = v30;
}
new C35();
new C35();
new C35();
const v56 = [-2.2250738585072014e-308,1.5867612318974208e+308,-1.5401430863213223e+308,-66487.31988072337,-8.274702295136258,-3.0,1000000.0];
const v57 = [0.0,1000000000000.0,5.871102751589657,-2.0,-2.2250738585072014e-308,-311.5750106328277,1.0];
const v58 = v57?.constructor;
try { new v58(v34); } catch (e) {}
-(-9223372036854775808);
let v64 = -256;
let v65 = -9223372036854775808 << v64;
const v68 = Math.atan(-1.433014417295086e+308);
function f69() {
    try {
    } catch(e70) {
        class C72 extends Float64Array {
            constructor(a74, a75, a76, a77) {
            }
        }
        const v78 = /A\ud808\udf45*Lh?/mgsdvy;
        function F80(a82, a83, a84, a85) {
            if (!new.target) { throw 'must be called with new'; }
            Object.defineProperty("jTR", 1, { get: f69, set: f69 });
            a82 ^ v68;
            this.f = v78;
        }
    }
    return v8;
}
const o89 = {
    "type": "function",
};
new Worker(f69, o89);
v65 + v65;
++v65;
-(++v64);
v56.__proto__ = Reflect;
v56.f = v57;
