const v1 = new Set();
let v4 = 2n;
try {
    v1.size **= 15;
    try {
        v4 = 1906411945n;
    } catch(e8) {
    }
    const t8 = 15;
    const v10 = delete t8?.f;
    try { v10.getMinutes(9); } catch (e) {}
    function f12(a13) {
    }
    new Uint16Array(3);
} catch(e15) {
}
function f18() {
    function f19(a20) {
        new Map();
        return -9119n;
    }
    return f19;
}
function f23(a24) {
    gc();
}
Object.defineProperty(BigUint64Array, "toString", { writable: true, get: f18, set: f23 });
try {
    new BigUint64Array(3122);
} catch(e28) {
}
function f29() {
}
class C30 {
    8 = f29;
    set d(a32) {
        const v33 = this.__proto__;
        try { v33["n"](); } catch (e) {}
    }
    static #c;
    static #h = f29;
    f = f29;
    3110 = f29;
}
const v36 = new C30();
new C30();
const v38 = new C30();
function F39(a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = this;
    try {
        this.g = C30;
    } catch(e42) {
    }
    try {
        this.d = a41;
    } catch(e43) {
        const v45 = new WeakSet();
        [v45[4]];
        const o48 = {
        };
    }
    try {
        this.f = v36;
    } catch(e49) {
    }
}
new F39(v38);
new F39(v36);
new F39(v36);
class C53 extends C30 {
    static valueOf(a55, a56, a57) {
        const o60 = {
            "maxByteLength": 133,
        };
        const v62 = new SharedArrayBuffer(133, o60);
        Math.sin(-352500.6925442775);
        class C68 extends Date {
        }
        try {
            new Uint32Array(v62);
        } catch(e70) {
        }
        return this;
    }
}
let v71 = new C53();
v71.toString = f23;
new C53();
new C53();
const v75 = new WeakSet();
function f76() {
    return v75;
}
f76();
class C78 extends f76 {
    3;
    g;
    409785783;
    #c = f76;
}
C78.toString = f29;
const v79 = new C78();
v79[179];
Object.defineProperty(v79, "f", { configurable: true, set: f76 });
let v81 = 513355.8447510137;
v81--;
class C86 {
    static [-1.4404853420329662];
    get h() {
    }
}
const v88 = new C86();
const v89 = new C86();
const v90 = new C86();
class C91 extends C86 {
    static [C78];
    e;
    [BigUint64Array] = C91;
    static 1073741825;
    [-9119n];
    constructor(a93, a94, a95, a96) {
        super();
        super[v90];
        gc();
    }
}
const v100 = new C91(-2.2250738585072014e-308);
const v101 = new C91();
const v102 = new C91(v101, C91, v88);
try { C91(-2.2250738585072014e-308, v89, v102, v100); } catch (e) {}
try {
} catch(e104) {
}
const o105 = {
};
1.6250968645626418e+308 + 1.6250968645626418e+308;
function f107() {
}
const v108 = f107?.bind;
v108.bind(WeakSet);
try { new v108(); } catch (e) {}
2052 % 2052;
new Uint8Array();
5 - 5;
"async" == "async";
Math.sin(v71);
v71--;
Math.log(v71);
v71 >>> 3;
const o126 = {
};
5 % 5;
Int16Array.length;
function F130() {
    if (!new.target) { throw 'must be called with new'; }
    const v132 = this?.constructor;
    try { new v132(); } catch (e) {}
    this.c = 822223171;
}
new F130();
function f136(a137, a138) {
}
const o139 = {
};
function f140() {
}
class C141 extends f140 {
}
const v144 = new Int32Array(949287958);
v144[726475987];
const o146 = {
};
try {
    new Uint16Array(2085);
} catch(e150) {
}
try {
    new Int16Array(1000);
} catch(e162) {
}
try {
    new Int32Array(1360);
} catch(e166) {
}
try {
    new Int32Array(5);
} catch(e170) {
}
new WeakSet();
try {
} catch(e177) {
}
1 >> 3;
