const v0 = [-4.0];
const v1 = [1e-15,-1000.0,-26755.48270841106,0.1733546032534653,819153.4724197842,-7.7401465559564535,1.7419616488662394e+308];
const v2 = [8.364089229159617,219.48927822891005];
try {
    v0.toString = v0;
} catch(e3) {
}
try {
    v2[26] = v2;
} catch(e4) {
}
const v5 = [v1,v2,v2,v0,v1];
const v6 = [v1];
let v7;
try { v7 = v6.findLastIndex(v5); } catch (e) {}
const v8 = [v6,v6,v1,v6,v6];
try { new v7(v7, v7, v0, 15880); } catch (e) {}
Object.defineProperty(v8, 53, { writable: true, value: v5 });
try {
    new BigInt64Array(2121);
} catch(e14) {
}
function f15(a16, a17, a18, a19) {
    return a16 / a18;
}
f15(v0, v1, v5, v5);
try {
    new Int8Array(3973);
} catch(e25) {
}
try {
    new Uint16Array(512);
} catch(e29) {
}
1073741824 - 1073741824;
function f32(a33) {
    return BigInt64Array;
}
class C34 extends f32 {
    static #c = v1;
    #g = f32;
}
v2.length <<= 15880;
const o42 = {
    "execution": "sync",
    "type": "minor",
};
gc(o42);
const v45 = new Set();
try { v45.add(v45); } catch (e) {}
this[0] = v5;
this[0] = v8;
for (let v48 = 0; v48 < 10; v48++) {
    this[0];
}
