class C3 {
}
new Int16Array();
function F6() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -2147483647;
    } catch(e9) {
    }
    try {
        this.f = -2147483647;
    } catch(e10) {
    }
    try {
        this.h = -2147483647;
    } catch(e11) {
    }
}
new F6();
class C13 {
    static {
        ("symbol")["slice"](-1.7976931348623157e+308, "slice");
    }
    set h(a18) {
        a18?.[2147483648];
        [-42795,8,4096];
        [-19512,268435439,2147483649,28674,-1167091488,1691732387,56203,2147483647];
        [1289683078];
    }
    static n(a24) {
    }
    [0.2516863756742135] = -1.7976931348623157e+308;
}
C13.name = C13;
const v25 = new C13();
const o26 = {
};
function F27() {
    if (!new.target) { throw 'must be called with new'; }
}
const v29 = new F27();
v29.fuck(C3, v29, F27);
function f31() {
    try {
        v25.fuck(v25, v25, 0.2516863756742135, 0.2516863756742135);
    } catch(e33) {
    }
    return 0.2516863756742135;
}
class C35 extends Int16Array {
    constructor(a37, a38, a39) {
        super();
        this.copyWithin(a39, a38);
    }
}
v25.constructor = f31;
const v41 = v25?.constructor;
try { new v41(); } catch (e) {}
new C13();
new C13();
try { null.flat(null); } catch (e) {}
new Map();
const v50 = /[a\Sc]/gyi;
delete v50[v50];
128 >>> 128;
1000000000.0 === 1000000000.0;
let v59 = 1n;
try {
    v59 **= -295689100n;
} catch(e61) {
}
