function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const o10 = {
    };
    function f11() {
        return -4294967296;
    }
    function f12(a13) {
        new WeakMap();
    }
    Object.defineProperty(o10, "f", { configurable: true, enumerable: true, get: f11, set: f12 });
    function f16() {
        return a6;
    }
    with (o10) {
        f = f16;
    }
}
class C17 {
    static #g;
    static toString(a19) {
        const v20 = this[9];
        const o21 = {
        };
        try {
            o21.g = v20;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.g = v20;
            o23.c = v20;
        } catch(e24) {
        }
        Math.log10(991.6833873568894);
        function f28(a29, a30, a31) {
            return f28;
        }
        try {
            function f32() {
                ~-15;
                +-1073741824;
                Math.sin();
                Object.defineProperty("jTR", 1, { get: f32, set: f32 });
                return 991.6833873568894;
            }
            const o82 = {
            };
            o82.g = -4294967295;
            o82.c = v20;
            o82.e = v20;
        } catch(e83) {
        }
        try {
            const o84 = {
            };
            o84.g = v20;
            o84.c = v20;
            o84.b = a19;
        } catch(e85) {
        }
        return this;
    }
}
new C17();
new C17();
new F3();
new Set();
class C91 {
    static toString(a93, a94) {
        this.length = 2;
    }
}
try { C91.toString(); } catch (e) {}
const o97 = {
};
const v98 = new F3(C91, o97);
try { v98.toString(); } catch (e) {}
class C104 extends WeakSet {
}
new v98();
