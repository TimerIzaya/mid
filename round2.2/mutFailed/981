class C3 {
    static #toString(a5) {
        function f6() {
            try {
                new Int32Array(1000);
            } catch(e10) {
            }
            try {
                new BigInt64Array(C3);
            } catch(e14) {
            }
            try {
                new Uint8Array(1000);
            } catch(e18) {
                const v19 = [];
                const v20 = [16,50418,-1024,1597066917];
                const v21 = /1tD/msdu;
                function F22(a24, a25) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v26 = this?.constructor;
                    let [] = "undefined";
                    function f32(a33, a34, a35, a36) {
                        const o38 = {
                            9: 4,
                            "b": a36,
                            get e() {
                            },
                        };
                        return o38;
                    }
                    const v39 = f32(4, 536870887, 1816591506, 64);
                    f32(v39, 1816591506, 1816591506, v39);
                    try { new v26(this, v19); } catch (e) {}
                    a24.sticky;
                    try {
                        this.h = a24;
                    } catch(e43) {
                    }
                }
                new F22(v21);
                new F22(v20);
            }
            return a5;
        }
        return a5;
    }
    constructor(a47) {
        try { this["finally"]("finally"); } catch (e) {}
    }
    [-1] = -12;
    #b;
    #f;
    #h;
    static #c = 13129;
}
const v50 = new C3(-12);
new C3(13129);
new C3(-12);
class C53 {
    [13129];
    static 10;
    #valueOf(a55, a56, a57) {
        try {
            new Float32Array(2);
        } catch(e61) {
        }
        try {
            new Float32Array(128);
        } catch(e65) {
        }
        try {
            new Uint16Array(5);
        } catch(e69) {
        }
        return this;
    }
}
const v70 = new C53();
v70.p = 13129;
let v71 = new C53();
const v72 = new C53();
let v75;
try { v75 = v70.p(); } catch (e) {}
try {
    v71 = v72;
} catch(e76) {
}
try {
    const v77 = new BigUint64Array(175);
    const o78 = {
    };
    try {
        o78.a = 175;
    } catch(e79) {
    }
    try {
        const o80 = {
        };
        function f81(a82) {
            o80.constructor;
        }
        Object.defineProperty(o80, "g", { writable: true, configurable: true, enumerable: true, set: f81 });
        o80.a = 175;
        o80.g = BigUint64Array;
    } catch(e84) {
    }
    try {
        const o85 = {
        };
        o85.a = o78;
        o85.a = 175;
        o85.g = BigUint64Array;
        o85.h = v72;
    } catch(e86) {
    }
    try {
        const o87 = {
        };
        o87.g = o87;
        o87.a = 175;
        o87.g = BigUint64Array;
        o87.h = v77;
    } catch(e88) {
    }
} catch(e89) {
}
function f92() {
    function f93(a94) {
        C3 instanceof Uint32Array;
        function f96() {
        }
        return v50;
    }
    return f93;
}
function f97(a98) {
    Object.defineProperty(v72, -1, { set: f92 });
}
Object.defineProperty(Uint32Array, Symbol.toPrimitive, { writable: true, get: f92, set: f97 });
try {
    new v75(0);
} catch(e102) {
}
try {
    new Uint16Array(7);
} catch(e106) {
}
const v107 = /I/gsui;
const v110 = [Uint32Array];
for (const v111 in "boolean") {
    try { v107["compile"](v111, v110); } catch (e) {}
}
