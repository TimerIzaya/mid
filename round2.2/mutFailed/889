function f0() {
}
let v1 = WeakSet;
const v2 = new v1();
class C3 {
    static d;
    static {
        const v9 = v1 && 0.8620960773109678;
        --C3;
        v9 - v1;
    }
    [v2] = f0;
    h = v1;
    249;
    #g;
    [v1];
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
const v15 = [v2];
const v16 = [v15,v1];
[v16];
class C18 {
    [v14] = v13;
    #valueOf(a20, a21, a22, a23) {
        %VerifyType(this);
        try {
            f0();
        } catch(e25) {
        }
        return v12;
    }
    #b = C3;
    constructor(a27, a28, a29) {
        Math.clz32(-2.220446049250313e-16);
        ~v1;
        Math.log1p(C18 / this);
        Math.acosh(--v1);
    }
}
const v39 = new C18(C18, v13, v14);
new C18(v12, v39, v39);
const v41 = new C18(v12, v13, v13);
class C42 extends C3 {
    valueOf(a44, a45) {
        try {
            super.toString(a45, v15, a45);
        } catch(e47) {
        }
        return v41;
    }
    static [v12] = C3;
    m(a49, a50, a51, a52) {
        try {
            super[a49] = v16;
        } catch(e53) {
        }
        delete v2?.a;
        try {
            new f0();
        } catch(e56) {
        }
        return a49;
    }
}
new C42(f0);
new C42();
new C42();
try {
    new v1(7);
} catch(e63) {
}
try {
    new Uint8ClampedArray(7);
} catch(e67) {
}
try {
    new Int32Array(7);
} catch(e71) {
}
/\P{scx=Greek}/mvy;
const v73 = /a[a]/gsvi;
const v74 = /(?:a+)+/gy;
try {
    new BigUint64Array(4096);
} catch(e78) {
}
let v79 = 2054;
try {
    new Float32Array(v79);
} catch(e82) {
}
try {
    new BigUint64Array(1000);
} catch(e86) {
}
let v90;
try {
const t0 = 7;
v90 = t0("268435441", BigUint64Array, "-624792606", v74);
} catch (e) {}
v79--;
new Int32Array("268435441", v90);
const t104 = "268435441";
t104.f = v73;
