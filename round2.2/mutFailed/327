class C3 {
    static valueOf(a5) {
        super.e *= -1.0;
        try {
            a5[5] = this;
        } catch(e6) {
        }
        return 1000000000.0;
    }
    static b = -1.0;
    h = 1000000000.0;
    #b;
}
C3.prototype;
const v8 = new C3();
function f9() {
    const o13 = {
        valueOf() {
            super.a;
            return Uint8Array;
        },
    };
    return o13;
}
v8[Symbol.iterator] = f9;
new C3();
const v17 = new C3();
function f18() {
    return 1000000000.0;
}
const v19 = [14,-4294967296,-33069,1043696494,4,8189,536870887,1024];
v19[5] = v19;
const v20 = [1442495620,-800615073,53227,-8,9,4294967296,2071425321,10];
try { v20.push(-1.0); } catch (e) {}
[-256,18459,13,-4294967297,-1938702490,6];
const v23 = [-4294967295,-65537,47394,12365,4,12,1808887880];
const v24 = [4294967297,4096,1162203747,-2119685703,1273796039,9007199254740991,1000,65536];
v24[Symbol.toPrimitive] = f9;
[11,129,9007199254740992,-256,-4096,-65535];
1.7976931348623157e+308 & 1.7976931348623157e+308;
try { new Uint8Array(v8, v20, -1.0); } catch (e) {}
try {
    new Uint8Array();
} catch(e33) {
}
let v34 = 1600;
v34--;
try {
    new Uint8ClampedArray(v34);
} catch(e38) {
}
Float64Array.length;
try {
    new Float64Array(64);
    const o43 = {
        "apply": f18,
        "call": f18,
        "construct": f18,
        "defineProperty": f18,
        "deleteProperty": f18,
        "get": f18,
        "getOwnPropertyDescriptor": f18,
        "has": f18,
        "isExtensible": f18,
        "ownKeys": f18,
        "preventExtensions": f18,
        "set": f18,
        "setPrototypeOf": f18,
    };
    try {
        new Proxy(v23, o43);
    } catch(e46) {
    }
} catch(e47) {
    const v48 = 1.7976931348623157e+308;
    try { ("i")["padStart"](v48, ..."padStart", v48, ...v17, f18, e47); } catch (e) {}
    Object.defineProperty("padStart", v8, { get: f18 });
    e47.__proto__;
}
try {
    try { v34(Float64Array, 64); } catch (e) {}
} catch(e53) {
    /xyz{1,32}?/sv;
    /(x)(x)(x)\4*/sd;
    for (let i57 = 0; i57 < 4; i57++) {
        try {
            i57 >>= 64;
        } catch(e63) {
        }
    }
    /[aEAs[\xe2\x81\xa3]?]/msvyi;
} finally {
    v23[v24] = 1.7976931348623157e+308;
}
