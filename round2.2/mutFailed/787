const v3 = [-6.654402254185316e+307,671.759878619175,-913.6978829673748,0.8984778205485342];
try { v3.copyWithin(9n, -2147483648n); } catch (e) {}
[-838271.284994536,3.0,-1e-15,-1.3883902581252133e+308,57.65618441110428];
const v6 = [-1000000000000.0,0.5552874636640893,2.0,1000000000.0];
class C7 {
    #toString(a9, a10, a11, a12) {
        !9n;
        let v15 = -65536;
        +(a11 * v15);
        const v18 = --v15;
        Math.log(-2147483648n);
        !v15;
        return !v18;
    }
    c = -2147483648n;
    6;
    1531;
}
C7.e = C7;
const v22 = new C7();
const v23 = new C7();
const v24 = new C7();
const v25 = v24[1531];
function f26(a27, a28) {
    const o37 = {
        "h": a27,
        valueOf(a30, a31) {
            -2147483648n >> a31;
            const v33 = `
                try { v3.reverse(); } catch (e) {}
            `;
            eval(v33);
            v3.c &&= v23;
            return v6;
        },
        "e": -2147483648n,
        [v6]: v22,
        "f": a27,
        503: a27,
    };
    return o37;
}
v25.d = f26;
const v38 = f26(v23, v23);
f26(f26(v24, v22), f26);
let v41 = 6;
v41--;
try {
    const v44 = new Uint16Array(v41);
    try { v44.set(v44); } catch (e) {}
} catch(e46) {
}
try {
    new Uint32Array(Uint32Array);
} catch(e50) {
}
Uint16Array.prototype = Uint16Array;
try {
    const v53 = new Uint16Array(3371);
    v53.BYTES_PER_ELEMENT = v53;
} catch(e54) {
}
function F55() {
    if (!new.target) { throw 'must be called with new'; }
}
class C57 extends F55 {
    b;
}
try { new C57(); } catch (e) {}
new v38();
delete Uint16Array.b;
