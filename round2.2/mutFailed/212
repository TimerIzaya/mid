function f0() {
    let v1 = Uint8ClampedArray;
    v1--;
    const v4 = [-1e-15,94277.11390418652,-1000000000.0,1.0];
    let v5;
    try { v5 = v4.groupToMap(-1000.0); } catch (e) {}
    const v6 = [4294967295,12,-1073741824,-28740,65536,4096,-65536,-4294967297,10];
    const v7 = [-1029387026,1141371614,42469,-1073741824,1945326222,1073741823,9007199254740991,563,1,5];
    class C8 {
        constructor(a10) {
            this.b = this;
            this?.constructor;
        }
        static #d = v6;
        [-2] = v5;
        static g;
    }
    C8.name = C8;
    const v12 = new C8(v7);
    class C13 extends C8 {
        static #b;
        get g() {
            try { this(); } catch (e) {}
            for (let v16 = 0; v16 < 9; v16++) {
            }
            return this;
        }
        [v6] = v12;
    }
    new C13();
    const o21 = {
        "b": -450145.96434685146,
        ..."m",
        "d": -450145.96434685146,
        __proto__: "m",
        [-268435456]: "m",
        [v1]: -450145.96434685146,
        "a": "m",
        "h": -268435456,
        ..."m",
        "e": -268435456,
        "g": -268435456,
    };
    return o21;
}
const v22 = f0();
const v23 = f0();
const v24 = f0();
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    const o30 = {
    };
    f0(o30);
    const o32 = {
    };
    gc(o32);
    try {
        this.a = a28;
    } catch(e34) {
    }
    try {
        this.c = f0;
    } catch(e35) {
        ("-1959905820").normalize("NFD");
        class C39 {
        }
        const v40 = [-1.9051759137413093e+307,524838.8464725164,1.0];
        const v42 = [v40,v40,v40,v40];
        v42.flat(Reflect.construct(C39, v42));
    }
    try {
        this.e = v24;
    } catch(e45) {
    }
    let v46 = -65536;
    v46++;
    const o49 = {
        "execution": "async",
    };
}
new F25(v22, v23);
new F25(v22, v24);
new F25(v24, v23);
class C57 extends Int16Array {
    constructor(a59, a60, a61, a62) {
        super();
        let v63;
        try { v63 = this.subarray(); } catch (e) {}
        delete v63.byteLength;
    }
}
new C57(Int16Array, Int16Array, Int16Array, Int16Array);
new C57();
