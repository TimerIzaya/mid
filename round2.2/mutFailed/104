function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 57136;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
new F0();
try { Uint32Array(7, Uint32Array, F0); } catch (e) {}
try {
    new Uint32Array(7);
} catch(e11) {
}
127 === 127;
BigInt64Array.g = BigInt64Array;
try {
    new BigInt64Array(127);
} catch(e16) {
}
2436 / 2436;
try {
    const v20 = new Int16Array(2436);
    v20[1411];
} catch(e22) {
}
class C23 {
    static #c = Uint32Array;
    static #valueOf(a25, a26, a27, a28) {
        [1000.0,Infinity,0.4145419549558861,-0.007427845232596653];
        return v4;
    }
    static #e;
    #b = F0;
    e = 127;
    static g = Int16Array;
}
C23.length;
new C23();
const v44 = new C23();
v44.e = v44;
new C23();
("setInt8")[2];
class C48 {
    constructor(a50) {
        const v51 = this?.constructor;
        try { new v51(C48); } catch (e) {}
        a50.e = a50;
        1 >> 1;
        try {
            a50.length = 1;
        } catch(e55) {
        }
    }
}
try { new C48(Uint32Array); } catch (e) {}
const v57 = new C48("setInt8");
function f58() {
    return C48;
}
class C59 extends f58 {
    [f58] = v57;
}
C59.e = C59;
try { new C59(); } catch (e) {}
const v61 = new C59();
try { v61.bind(BigInt64Array); } catch (e) {}
const v63 = new C59();
let v64 = v63.length;
v64++;
