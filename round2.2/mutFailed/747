const v2 = -Infinity;
let v5 = 1000000000000.0;
v5 **= v5;
[[]];
let v9 = Symbol.replace;
v9 += v9;
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function F17(a19) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const o23 = {
            ["m"]: "m",
            get g() {
                return "m";
            },
            "g": "object",
        };
        this.b = 1000000000000.0;
        let v24;
        try { v24 = a16(); } catch (e) {}
        d = a16;
        function F26(a28, a29, a30, a31) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a14;
            } catch(e32) {
            }
            try {
                this.f = 29955;
            } catch(e33) {
            }
        }
        const v34 = new F26(v2, v24, a13, a14);
        new F26(a14, v34, v24, v2);
        new F26(v2, 1000000000000.0, -4096, -8.678256660887653e+307);
    } catch(e37) {
    }
    try {
        this.a = a16;
    } catch(e38) {
    }
}
const v39 = new F11(1000000000000.0, -8.678256660887653e+307, 2, -4096);
const v40 = new F11(v39, -8.678256660887653e+307, -4096, 29955);
const v41 = new F11(v40, -8.678256660887653e+307, 2, 2);
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    ([0.7701751546226815,997125.4572624811,5.993688823759161e+307]).shift();
    function F48(a50, a51, a52, a53) {
        if (!new.target) { throw 'must be called with new'; }
    }
    ([64,3,10,14,268435441,-321778196,33616,65536,-9007199254740991]).unshift(255);
    try {
        this.c = a45;
    } catch(e57) {
    }
    try {
        this.e = a44;
    } catch(e58) {
    }
}
new F42(v39, v40);
new F42(v39, v41);
function f61(a62) {
}
const v63 = [255];
const t68 = 1000000000000.0;
t68[Symbol.matchAll] = v63;
new F42(v41, v40);
class C67 {
}
const v68 = new C67();
function f70() {
    g = Int8Array;
    for (let v72 = 0; v72 < 10; v72++) {
        v68["p" + v72] = v72;
    }
    const o84 = {
        [10000](a76, a77) {
            try {
                1760718952 <= 1760718952;
                const v81 = new Uint8ClampedArray(1760718952);
                v81[1540613681];
            } catch(e83) {
            }
        },
    };
}
f70();
f70();
%OptimizeFunctionOnNextCall(f70);
f70();
