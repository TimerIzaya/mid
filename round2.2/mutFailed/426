try {
    new BigUint64Array(512);
} catch(e3) {
}
try {
    new BigInt64Array(7);
} catch(e7) {
}
try {
    new Uint32Array(255);
} catch(e11) {
}
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a15;
    } catch(e17) {
    }
    try {
        this.g = BigUint64Array;
    } catch(e18) {
    }
}
new F12(512, 255, 255);
const v20 = new F12(255, 7, 255);
v20[741853529] = 7;
new F12(255, 512, 255);
try {
    new Int16Array(3);
} catch(e25) {
}
try {
    let v29;
    try { v29 = v20.o(undefined, undefined, v20, Uint32Array, 512); } catch (e) {}
    v20[741853529] += v29;
    const v30 = 7 + 2903;
    try { v29(Int16Array, Uint32Array, v30, 3, v29); } catch (e) {}
    new Uint32Array(2903);
} catch(e33) {
}
try {
    new BigUint64Array(16);
} catch(e37) {
}
let v39 = -65537;
v39 <<= -10;
function f41(a42, a43, a44, a45) {
    const o49 = {
        p(a47, a48) {
            return -10;
        },
    };
    return o49;
}
f41();
[f41];
const v52 = new WeakMap();
class C53 extends WeakMap {
    b = v52;
    set a(a55) {
        super.c &&= a55;
        const o56 = {
        };
        try {
            Proxy(v52);
            class C59 {
                valueOf(a61, a62) {
                }
            }
        } catch(e63) {
        }
    }
    static valueOf(a65, a66) {
    }
    d;
    constructor(a68, a69, a70, a71) {
        super();
    }
    #e;
    static 268435441;
}
const v73 = [-5.0];
const v74 = [1,11,6,255,2,4,-2147483647,255];
for (const v75 of v74) {
    v73.length = 227;
}
const v76 = new C53();
v76[Symbol.toPrimitive] = f41;
new C53();
const v80 = new C53();
class C81 {
    get a() {
        this.g >>= WeakMap;
        super[v76] = this;
        const t94 = Int8Array.of(Uint8ClampedArray);
        t94[-1000.0] = Uint8ClampedArray;
        return v52;
    }
    [v76] = WeakMap;
    h = C53;
    a = WeakMap;
}
const v87 = new C81();
function F88() {
    if (!new.target) { throw 'must be called with new'; }
}
const v90 = new F88();
const v91 = [3.0,728.7710136286514,7.58009139855735];
function f92(a93, a94, a95, a96) {
    const o98 = {
        get d() {
            v91.length += a93;
            return a93;
        },
        "g": v90,
    };
    return o98;
}
new C81();
const v100 = new C81();
const v102 = [C53,v52,[v76,v100,v80],v87];
[v87,v102,v100,v80,v102];
try { new BigInt64Array(Uint32Array, ...2147483649n); } catch (e) {}
for (let v108 = 0; v108 < 5; v108++) {
    function f109() {
        return f109;
    }
}
const v110 = [6.4540458206582905,-312.2364355002594,0.3894069019876403,3.0,-2.0,-1.0,1000000000.0,2.0,-418.3680545017014];
v110.p1 = BigUint64Array;
for (let v111 = 0; v111 < 5; v111++) {
    v110["p" + v111] = v111;
}
v76[83];
Object.defineProperty(v74, 6, { configurable: true, enumerable: true, set: f41 });
const v116 = Symbol.iterator;
const o125 = {
    [v116]() {
        let v118 = 10;
        const o124 = {
            next() {
                v118--;
                const v122 = v118 == 0;
                const o123 = {
                    "done": v122,
                    "value": v118,
                };
                return o123;
            },
        };
        return o124;
    },
};
