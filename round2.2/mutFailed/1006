const v1 = new Date();
const v2 = [-839944.4576305395,1000000000.0,1.7976931348623157e+308,-0.0,1000000000.0,-1000000000.0,-2.0,0.4047521797644045,0.0566382786579791];
const v3 = [132803.4716193315,-898.8906964969243,1.7976931348623157e+308,2.0,7.144150507940937e+307,4.0];
function f4(a5) {
    class C8 {
        [-65535] = 31625;
        constructor(a10) {
            const o11 = {
            };
        }
    }
    new C8(-65535);
    return C8;
}
v3[Symbol.toPrimitive] = f4;
try { v3.group(Date); } catch (e) {}
const v16 = [7.787624035170537e+307,-4.0,-0.0];
v16[Symbol.toPrimitive] = Symbol;
v16.toString = Date;
const v19 = [v1];
const v20 = [v19,v19,v19,v19,v19];
v20.toString = Date;
const v21 = [v3,v20,v16];
v21.valueOf = Symbol;
class C22 extends Date {
    static 1236978192 = v1;
    static #c = v2;
    constructor(a24, a25, a26, a27) {
        super(v21);
        const v28 = this.__proto__;
        Object.defineProperty(v28, "valueOf", { configurable: true, enumerable: true, value: f4 });
        try { v28.setDate(v28); } catch (e) {}
        try { v28(); } catch (e) {}
    }
    e;
    set a(a32) {
        [-2.0,1.0];
        [0.0,-5.373658545239229e+307,0.6265565520517817];
        [Infinity,0.005272352746069853,-650043.3602475];
    }
    static b;
}
new C22(v19, v2, v20, v19);
const v37 = new C22(v16, v16, v19, v16);
v37.valueOf = Date;
function f38(a39) {
    function f40(a41, a42, a43) {
        class C45 {
        }
        let v46 = new C45();
        v46.valueOf = Date;
        return v46 ^= "2147483647";
    }
    f40(f40, f40, f40);
    return v3;
}
v37.toString = f38;
try { v37.getSeconds(); } catch (e) {}
const v49 = new C22(v19, v19, v2, v16);
try { v49.toUTCString(); } catch (e) {}
class C55 {
}
function f56(a57) {
    function f58() {
        return a57;
    }
    return a57;
}
C55.toString = f56;
try { new C55(); } catch (e) {}
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    function f64(a65) {
        class C67 {
            #p(a69, a70) {
            }
            static set e(a72) {
            }
            static #g = -2147483649;
        }
        return a65;
    }
    a62[Symbol.toPrimitive] = f64;
    try { this.constructor(a63, a63); } catch (e) {}
    try { new a62(); } catch (e) {}
    const v77 = a62.constructor;
    try { new v77(v37); } catch (e) {}
    try { v77(-4, a62); } catch (e) {}
}
new F60(C55);
