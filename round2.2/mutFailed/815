try {
    new BigInt64Array(125);
} catch(e3) {
}
try {
    new Float32Array(550);
} catch(e7) {
}
try {
    new BigInt64Array(2480);
} catch(e11) {
}
function f12() {
    return Float32Array;
}
1.7976931348623157e+308 ^ 1.7976931348623157e+308;
-0.0 / -0.0;
let v20 = 60987;
v20++;
try {
    const t20 = 2480;
    new t20();
} catch(e25) {
}
BigInt64Array.f = BigInt64Array;
7 % 7;
const v30 = 7 % 7;
const v31 = v30 | v30;
v31 >> v31;
try { new Int16Array(v30, BigInt64Array, 128); } catch (e) {}
const v35 = new Int16Array(Int16Array, Int16Array);
class C36 {
    #a;
    constructor(a38, a39, a40, a41) {
        this[2];
        a38 !== a38;
        const v44 = a39 != a39;
        const v45 = a39 % a39;
        v45 / v45;
        const v47 = -a41;
        a38 >> a38;
        const v49 = a39--;
        -a40;
        const v51 = a41--;
        Object.defineProperty(this, "e", { configurable: true, value: this });
        const v53 = C36();
        for (let v55 = 0; v55 < 25; v55++) {
            2480 / v44;
            super.c <<= v55;
            %VerifyType(v51);
        }
        ("async").blink();
        (1.7976931348623157e+308)[12];
        const o60 = {
            "execution": v47,
            "type": v49,
        };
        o60.b = o60;
        const v61 = o60.execution;
        try { v61.codePointAt(v53); } catch (e) {}
        const v63 = o60.__lookupGetter__;
        try { new v63(); } catch (e) {}
        gc(o60);
    }
    #f = BigInt64Array;
    2;
    c = BigInt64Array;
}
let v66;
try { v66 = C36.call(BigInt64Array); } catch (e) {}
new C36(7, 6, 23, 7);
const v68 = new C36(C36, v31, 6, 23);
v68[7] = v68;
new v66(23, 7, 6, 6);
Map.d = Map;
const v71 = new Map();
try { v71.set(6, -0.0); } catch (e) {}
v71.delete(BigUint64Array);
try { new Uint8ClampedArray(v35, Uint8ClampedArray, Uint8ClampedArray); } catch (e) {}
Uint8ClampedArray.BYTES_PER_ELEMENT;
new Uint8ClampedArray([49522]);
