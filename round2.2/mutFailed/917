function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = this;
    try {
        this.c = f0;
    } catch(e3) {
    }
    try {
        this.a = f0;
    } catch(e4) {
    }
    try {
        this.f = f0;
    } catch(e5) {
    }
}
const v6 = new F1();
const v7 = new F1();
let v8 = new F1();
try { v8.c(); } catch (e) {}
const v11 = new WeakMap();
function f12(a13, a14, a15, a16) {
    const o30 = {
        n(a18, a19, a20, a21) {
            try {
                v8 = a14;
            } catch(e22) {
            }
            return a19;
        },
        __proto__: a14,
        set d(a24) {
            const o28 = {
                "execution": "sync",
                "type": "minor",
            };
            gc(o28);
        },
    };
    o30[Symbol.toPrimitive] = f0;
    return o30;
}
try { f12(v6, f12, f12, v7); } catch (e) {}
const v34 = f12(f12, v11, v8, v8);
try { v34.n(v6, v8, f12, F1); } catch (e) {}
const v36 = f12(v6, v8, v11, v7);
const v37 = f12(v34, v11, v7, v7);
function f38(a39, a40) {
    a39[Symbol.toPrimitive] = f12;
    function f43(a44) {
        const v45 = [];
        const v46 = new f0();
        const v47 = new f0();
        const v48 = new f0();
        const v49 = [0.0,-1000000000000.0,0.9775217991865414];
        const v50 = [v49,v47,v46];
        const v51 = [v48,v45,v50,v49,f0];
        function F52(a54, a55) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = a55;
            } catch(e56) {
            }
        }
        new F52(v50, v51);
        return Symbol;
    }
    a40.toString = f43;
    const o67 = {
        "h": a39,
        "e": WeakMap,
        "d": v36,
        [v36](a59, a60, a61, a62) {
            try {
                a61.fuck(127n, a60, true);
            } catch(e66) {
            }
            return a60;
        },
        "f": v11,
        [v7]: a40,
        [v6]: v37,
    };
    return o67;
}
f38(v34, v36);
f38(v36, v34);
const v71 = f38(v36, v34)?.e;
try { new v71(); } catch (e) {}
function f73() {
    return f73;
}
try { new Uint8ClampedArray(f12, v6, f12); } catch (e) {}
Object.defineProperty([512,257,[257,257],Uint8ClampedArray], 2147483649, { get: f73 });
