const v1 = new WeakSet();
const v4 = 597208621 >>> 597208621;
try { Uint8ClampedArray.of(); } catch (e) {}
try {
    const v9 = new Uint8ClampedArray(255);
    function f10() {
        function f12() {
            return 257n;
        }
        return v9;
    }
    v9.valueOf = f10;
    v9[81] = v9;
} catch(e13) {
}
9 - 9;
try {
    new Uint8ClampedArray(9);
} catch(e18) {
}
Int16Array.prototype = Int16Array;
Int16Array.length;
try {
    new Int16Array(12);
} catch(e23) {
}
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    -65536 >>> -65536;
    try {
        this.h = -65536;
    } catch(e28) {
    }
    try {
        this.f = -65536;
        const o29 = {
        };
        o29.a = v1;
        o29.a = o29;
        function f32(a33) {
            try {
                const v37 = new Uint8Array(256);
                try { v37.join("fD"); } catch (e) {}
            } catch(e39) {
            }
            return Int16Array;
        }
        Int16Array.valueOf = f32;
        class C40 extends Int32Array {
            [Int32Array];
            #h = Int16Array;
            static [Int16Array];
        }
        C40.e = v1;
        C40.e = C40;
    } catch(e41) {
    }
}
F24.f = v4;
const v42 = new F24();
const v43 = new F24();
function f44() {
    const o51 = {
        [1.7976931348623157e+308]: 1.7976931348623157e+308,
        8: "E",
        [10000](a49, a50) {
        },
    };
    try { o51.isPrototypeOf("E"); } catch (e) {}
    const v53 = o51[8];
    try { v53.replaceAll(10000, Uint8ClampedArray); } catch (e) {}
    return o51;
}
let v55;
try { v55 = f44(); } catch (e) {}
v55[8] = v55;
%PrepareFunctionForOptimization(f44);
const v57 = f44()[10000];
try { new v57(Uint8ClampedArray, v57); } catch (e) {}
const v59 = f44();
function f60(a61, a62) {
    v42.__proto__;
    function f64(a65) {
    }
    return v43;
}
v59.toString = f60;
%OptimizeFunctionOnNextCall(f44);
7 <= 7;
Int16Array.toString = f44;
~(7 ^ Int16Array);
const v72 = Math.asin(v59);
v72 - v72;
v72 >> v72;
f44();
const v76 = new F24();
v76.f;
class C78 extends F24 {
    constructor(a80) {
        super();
    }
    /*
    constructor(a85, a86, a87) {
    }
    */
    static #g;
    p(a89, a90, a91, a92) {
        let v93 = 9007199254740992;
        -246938961 - -246938961;
        v93++;
        return a92;
    }
    3063155631 = v76;
    static #f = v43;
    3045982067;
}
C78.f = C78;
class C97 {
    constructor() {
    }
}
try { C97.call(Uint8ClampedArray); } catch (e) {}
