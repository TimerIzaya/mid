try {
    new Float64Array(1964);
} catch(e6) {
}
try {
    new Uint32Array(64);
} catch(e10) {
}
try {
    new Uint32Array(8);
} catch(e14) {
}
const v15 = [5686];
const v16 = [v15,1073741824];
[v16];
class C18 extends Float64Array {
    [1073741824];
    [8];
    #n(a20, a21, a22, a23) {
        try {
            a21.length = 11;
        } catch(e25) {
        }
        return a21;
    }
    [v16] = C18;
    #b;
    6;
    #e;
    static e;
    static #h = 64;
    static #b = v15;
    static 7 = v15;
}
new C18();
new C18();
const v28 = new C18();
class C32 {
    static get a() {
        v15.length;
        return this;
    }
    [8];
    constructor(a36, a37) {
        const v38 = this.constructor;
        try { new v38(this); } catch (e) {}
        const v40 = a36.a;
        function f41(a42, a43) {
            a43 - a43;
            const o45 = {
                "f": a42,
            };
            return v40;
        }
        f41(a37, a36);
        f41();
        f41(128, 128);
    }
}
new C32(-1000658926);
new C32(0.0);
new C32(-1000658926);
("CPd").match(C32);
[-65537,536870888,24399,129,111446355,9,268435456,31980];
Math.cbrt(37581);
37581 && v16;
v28 ^ v16;
