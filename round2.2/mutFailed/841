const v0 = [0.3291267165262023,-5.0,-1000000000000.0,4.434794789151081,189.40706387745445];
const v1 = [0.730779942513424,4.0,-0.0,0.3648660685713888,53.2458093480966,1.7976931348623157e+308];
const v2 = [-5.159154336140972e+307,498.66699159488667,-1.7976931348623157e+308,1000.0,-3.0,2.0,-0.0];
function f3(a4, a5) {
    /xyz{0,1}?Bdx((\xed\xa0\x80))\x02/gu;
    /(a)\1/gdv;
    /(csTv(a\1))/gdui;
    return a4;
}
v2[Symbol.toPrimitive] = f3;
const v11 = [-1903130533,-353534865,53616,257,255,1063172531,65537,10,12,-1576880881];
const v12 = [2147483649,-4294967295,-332817609,3,9223372036854775807,3,-1,2147483647,4096];
const v13 = [1073741825,3,-536870912,127,11,2147483648,-2147483649,-9];
v13.toString = Symbol;
const v14 = v13?.filter;
try { new v14(v12); } catch (e) {}
[-7.977556135114707,-8.69819861397045e+307,5.0,-847893.1060289232];
[-1000.0,6.021738975600055e+307,1e-15];
let v18 = [1.3881074216435092e+307,8.454629948806009];
v18[1] = v18;
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    a22[Symbol.toPrimitive] = Symbol;
    function f27() {
        return this;
    }
    Object.defineProperty(a23, "sort", { writable: true, enumerable: true, get: f27 });
    try { this.hasOwnProperty(v2); } catch (e) {}
    const v29 = a21?.toString;
    try { new v29(); } catch (e) {}
    try { a23.sort(v12); } catch (e) {}
    try {
        this.h = a22;
    } catch(e32) {
    }
    try {
        this.g = v18;
    } catch(e33) {
    }
    try {
        this.e = v12;
    } catch(e34) {
    }
}
new F19(v18, v11, v1, v0);
const v36 = new F19(v13, v13, v18, v12);
try {
    v18 = v2;
} catch(e37) {
}
const v41 = new F19(v11, v18, v36, v2);
v41.h = v41;
Set.length;
const v44 = new Set();
v44.size;
function f46() {
    return f46;
}
let v47 = 0;
do {
    v47++;
} while (v47 < 10)
const v55 = [/a(?=bbb|bb)c/mgd];
new f46(1247877905, ...v55, v55);
