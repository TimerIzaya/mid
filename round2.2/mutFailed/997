const v1 = [false,false,false];
const v2 = [v1];
function f3() {
    try {
        v1[268435456] = v2;
    } catch(e4) {
    }
    return v1;
}
v2.toString = f3;
const v5 = [false,v2];
-8 >> -8;
const v10 = -8 - -8;
const v12 = 2035 >>> 2035;
try { Uint32Array.of(); } catch (e) {}
try {
    new Uint32Array(2035);
} catch(e16) {
}
const v18 = 12 >= 12;
Uint8Array[0] = Uint8Array;
class C20 {
}
f3();
function F22(a24) {
    if (!new.target) { throw 'must be called with new'; }
}
[Worker,"function",-946.8643548427116];
6.103764749301017e+306 | -1452318574;
try {
    const v32 = new Uint8Array(12);
    try { v32.includes(v32); } catch (e) {}
} catch(e34) {
}
~67;
const o39 = {
    set b(a38) {
    },
};
function f40() {
    return f40;
}
class C42 {
}
function f43(a44, a45) {
    return v1;
}
const o47 = {
    "arguments": C42,
    "type": "function",
};
Worker(f43, o47);
try {
    new Uint32Array(67);
} catch(e50) {
}
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "valueOf", { writable: true, configurable: true, enumerable: true, value: f3 });
    const v53 = this?.constructor;
    try { new v53(); } catch (e) {}
    -9 >> -9;
}
const v57 = new F51();
const v58 = [-999.2156924021388,338259.32189272996,0.0];
try {
    new BigInt64Array(v58);
} catch(e61) {
}
function f62(a63, a64) {
    class C65 {
    }
    const v66 = new C65();
    const o67 = {
        ...v12,
        __proto__: v66,
    };
    return v18;
}
const v70 = new Set();
function f71() {
    return v70;
}
v57[Symbol.toPrimitive] = f62;
v57.h = v57;
function f78() {
    return v10;
}
Object.defineProperty(Uint8Array, 0, { get: f78 });
Uint8Array.prototype = Uint8Array;
256 * 256;
Int8Array.prototype = Int8Array;
try { new Int8Array(Uint8Array, v18, Int8Array); } catch (e) {}
try { new Int8Array(v5, F51, 81520457); } catch (e) {}
v57[4294967295] |= 256;
const v86 = v57 < 4730;
const v87 = v86 || v86;
v87 || v87;
if (v86) {
    try {
    } catch(e91) {
    }
    try {
    } catch(e94) {
    }
    try {
    } catch(e97) {
    }
}
Symbol("bigint");
const o101 = {
};
