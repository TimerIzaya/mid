class C3 {
    static ["boolean"];
    set h(a5) {
        try {
            new BigUint64Array(1725);
        } catch(e9) {
        }
        try {
            new Float64Array(391);
        } catch(e13) {
        }
        try {
            new Uint8ClampedArray(450);
        } catch(e17) {
        }
    }
}
new C3();
new C3();
const v20 = new C3();
[-1371429789,39362,32571];
[-1024,9,-61259,9835,13,-2147483647];
[3];
const v30 = [];
class C31 {
    valueOf() {
        function f33(a34) {
            Math.log1p(9007199254740992);
            return 9007199254740992;
        }
        this[Symbol.toPrimitive] = f33;
        %VerifyType(this);
        try {
            Int32Array(887);
        } catch(e43) {
        }
        let v44 = 2;
        v44--;
        new Int32Array(221);
        return 887;
    }
}
function f50() {
    class C51 {
    }
    const v52 = new C51();
    class C54 extends C51 {
    }
    const v55 = new C54();
    function f56(a57, a58, a59) {
        v20 instanceof C54;
        a59[a58] = a58;
        return a59;
    }
    f56(v55, 8, v52);
    return C51;
}
C31.valueOf = f50;
new C31();
const v63 = new C31();
v63[Symbol.toPrimitive] = f50;
function f66() {
    function f67(a68) {
        const v69 = /NN/mgsui;
        v69.c = v69;
        const v70 = /rMP+/gsdv;
        try { v70.test(v69); } catch (e) {}
        return v30;
    }
    return f67;
}
Object.defineProperty(f66, Symbol.toPrimitive, { value: f66 });
function f74(a75) {
    class C77 extends f66 {
        static f = v63;
    }
    new C77();
    new C77();
    C77();
    -65535 | -1.5876749514476599e+308;
}
Object.defineProperty(v63, "toString", { get: f66, set: f74 });
class C85 {
    #f = 481.18917876604246;
    constructor(a87, a88) {
        this.constructor = f74;
        const v89 = this?.constructor;
        v89[1000000000] = v89;
        try { new v89(C85, a88); } catch (e) {}
        a88--;
    }
}
C85[1000000000] = f74;
new C85();
const v93 = new C31();
try { new Date(v63, f66, v93, v63, f66, C31, v63); } catch (e) {}
new Date();
class C97 {
    [v63] = Date;
    a;
    #f;
    e;
}
new C97();
new C97();
new C97();
let v101 = -1000.0;
v101--;
const v103 = [-1e-15,0.05394196410500551,1000.0,-5.0,585299.8328042016,Infinity];
const v104 = [2.2250738585072014e-308,0.12004125653619546,0.2632771561876589,143847.09445406147,0.3865903452538286,-1.7760864233222768e+308,-0.005230145368461336,-0.0,3.1016465509548414,-1.0061115275161033e+308];
const v105 = [5,15,-1,-14,1,-11,-128,-1308524206,3,1891930221];
v104[v103.toLocaleString()] = v105;
Reflect.toString = Symbol;
try { Reflect.isExtensible(v101); } catch (e) {}
const v110 = [v101];
Reflect.construct(Date, v110, f74);
({"prototype":f66,} = Date);
const v113 = [-1000000000.0,-474543.5428367342,-2.0,-1.5059691624765054e+308,-508962.78678965976,757.7053565895317,0.0,790.2898938093756,2.2250738585072014e-308,-1.0945802631095708e+308];
const v114 = [3.396269082693733,0.0918823468018174];
v114[1];
function F116(a118, a119, a120, a121) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "length", { value: v110 });
    const v122 = this?.constructor;
    try { new v122(this, Reflect, f66, this); } catch (e) {}
    let v125;
    try { v125 = a119.toLocaleString(); } catch (e) {}
    try { v125.toWellFormed(); } catch (e) {}
}
const v128 = new F116(v114, v113);
v128.length;
new F116(v114, v101);
try { Float32Array(v128, f74, C31); } catch (e) {}
new Float32Array();
const v134 = [4294967295,12,-1073741824,-28740,65536,4096,-65536,-4294967297,10];
v134[Symbol.toPrimitive] = Date;
const v137 = [-268435456,52156,8,268435456];
v137.keys();
class C139 {
    constructor(a141) {
        this.b = this;
        const v142 = this?.constructor;
        try { new v142(); } catch (e) {}
    }
    f;
    [-2] = v137;
}
C139.prototype = C139;
const v144 = new C139();
new C139();
class C146 extends C139 {
    static #o(a148, a149, a150) {
        try {
            new WeakMap();
            a150 ^= a150;
            [12451,-4294967295,2];
            [9223372036854775807,21385,7,-630691097,3,4294967295,4096,-256];
        } catch(e156) {
        }
        return a148;
    }
    [v134] = v144;
}
try { C146(); } catch (e) {}
new C146();
for (let i = 0; i < 25; i++) {
    const v161 = 0 < 5;
    v161 || v161;
    new C139(v134);
    let [...v164] = v113;
    function f165() {
        return Symbol;
    }
    Object.defineProperty(v164, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f165 });
    Symbol(v164)[Symbol.split];
}
