let v4;
try { v4 = (-6n)["isExtensible"](36296n); } catch (e) {}
const v6 = ("isExtensible")["endsWith"]("isExtensible", v4);
let v7;
try { v7 = v6(16n, -6n, v6, ...36296n, 16n, 36296n); } catch (e) {}
[16n,v4];
const v9 = [-6n];
[16n,36296n,v9,-6n,16n];
let v12 = Int8Array;
try {
    new v12(7);
} catch(e14) {
}
try {
    new Float64Array(v4);
} catch(e18) {
}
try {
    new v7(5);
    let v23 = 0;
    v23 || 255;
    Math.cosh(v12);
    v23--;
    v12 - 36296n;
    v12--;
} catch(e30) {
}
new Array(0);
const v36 = new v4();
for (let i39 = 0; i39 < 9; i39++) {
    let v45;
    try { v45 = new v7(36296n, i39, i39, i39, ...147); } catch (e) {}
    try { v45(v9, i39, "endsWith"); } catch (e) {}
}
const v47 = [];
("NaN").normalize;
Reflect.apply(147, v36, v47);
