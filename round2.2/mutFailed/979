try {
    new Uint8Array(3);
} catch(e3) {
}
try {
    new Int8Array(2163);
} catch(e7) {
}
try {
    new Int16Array(5);
} catch(e11) {
}
class C15 extends Int16Array {
    #h;
    set d(a17) {
        let v18;
        try { v18 = a17(-15n, this, this); } catch (e) {}
        for (const v19 in v18) {
            try {
                new Int16Array(9);
            } catch(e23) {
            }
            try {
                new Uint16Array(4);
            } catch(e27) {
            }
            try {
                new BigInt64Array(2);
            } catch(e31) {
            }
        }
    }
}
function f32() {
    return f32;
}
const v36 = f32();
f32();
class C38 extends f32 {
    constructor(a40, a41, a42, a43) {
        super();
        class C45 extends v36.constructor {
            [-1];
            static 512;
            6 = this;
        }
    }
}
const v46 = new C15();
new C15();
new C15();
class C49 extends Int8Array {
    1 = 2163;
    [-15n] = Int16Array;
    h;
    constructor(a51, a52) {
        const v53 = 5 * 5;
        v53 ^ v53;
        const o56 = {
        };
        gc(o56);
        super(C15, 3, 2163);
        let v59 = -4294967295;
        const v61 = --v59;
        v46 && this;
        Math.cos(8);
        let v64 = !8;
        v61 ** v64;
        v64--;
    }
}
new C49(-65536n, 16n);
new C49(-65536n, -65536n);
new C49(16n, -65536n);
function F70(a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
}
const v75 = new F70();
const v76 = new F70();
Object.defineProperty(v75, "b", { writable: true, enumerable: true, value: F70 });
const v79 = Symbol.match;
([132688923,9007199254740992,-1579071578,1,16,-65536,536870888,1652455917]).__proto__;
([-0.0,3.0,120676.89384249458,1.7976931348623157e+308,-1e-15,1.2964006943719914e+308,4.128902681801254,-255371.8902466948,-8.79116351869374,-8.523254223472916e+307]).toLocaleString();
function f84() {
    return f84;
}
let v85 = 0;
while (v85 < 3) {
    let v88 = 0;
    while (v88 < 1) {
        Math.atanh(-1.0 instanceof f84);
        v88++;
    }
    v85++;
}
v76[v79] = -1.0;
