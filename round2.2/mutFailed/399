function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
    } catch(e6) {
    }
}
const v7 = new F3(0.869702942121087);
const v8 = new F3(-1000000000.0);
const v9 = new F3(-1000000000.0);
class C10 {
    set c(a12) {
        this.e;
        let v14 = -9007199254740991;
        try {
            v14 = 44842;
        } catch(e17) {
        }
    }
    d;
    [v9];
    static #g;
    #a;
}
new v8();
new C10();
const v20 = new C10();
try {
    new Uint8Array(256);
} catch(e24) {
}
try {
    const v28 = new WeakSet();
    v20[7] &&= 0.869702942121087;
    let v29;
    try {
    const t0 = 22;
    v29 = t0(v28, v28, v28);
    } catch (e) {}
    try {
        const o30 = {
        };
        new WeakSet(o30);
    } catch(e32) {
    }
    new v29(22);
} catch(e34) {
}
try {
    new Int8Array(10);
} catch(e38) {
}
const v39 = [0.3343841240548131,NaN,107231.99854644295,-8.670493485273367,-609.0464973976407,1.7976931348623157e+308];
const v40 = [-2.220446049250313e-16,-1.0529078696659998e+307];
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    let [...v43] = this;
    try {
        v7.fuck(v43, this, false, this);
    } catch(e46) {
    }
}
const v47 = new F41();
v40.length;
function f51(a52) {
    const o55 = {
        2: a52,
        268435440: 256,
        "e": a52,
        ...v39,
        [a52](a54) {
        },
    };
    if (!(f51 <= BigInt64Array)) {
        Math.expm1(Uint8Array);
        let v59 = F41++;
        ~Uint8Array;
        function f61(a62, a63) {
        }
        ++v59;
    }
    return o55;
}
%PrepareFunctionForOptimization(f51);
f51();
f51(v47);
%OptimizeFunctionOnNextCall(f51);
f51();
