try {
    new BigUint64Array(8);
} catch(e3) {
}
try {
    new Uint16Array(211);
} catch(e7) {
}
try {
    new Float32Array(306);
} catch(e11) {
}
class C12 {
    valueOf(a14, a15) {
        this | this;
        try {
            a14.e = this;
        } catch(e17) {
            const v19 = Symbol.replace;
            e17[v19] = v19;
            try {
                v19[7] = v19;
            } catch(e20) {
            }
        }
        return 211;
    }
    static 9;
    268435440 = BigUint64Array;
}
new C12();
new C12();
const v23 = new C12();
let v24 = 8 != 211;
if (v24) {
    let v27 = -6.915531014791685;
    Math.imul(2147483649, 2147483649);
    ~v23;
    --v27;
} else {
    v24++;
}
class C32 {
}
const v33 = new C32();
const t45 = [8];
t45[2296556146] = v33;
new BigUint64Array(v23, 306, 306);
const v38 = Reflect.construct(Uint16Array, [Reflect,8,306], BigUint64Array);
try { C32.p(v23, v38, v38, 8, v38); } catch (e) {}
