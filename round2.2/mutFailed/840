if ("59418" === "5do") {
    try {
    const t0 = "59418";
    t0(Uint32Array, Uint32Array);
    } catch (e) {}
} else {
    const t6 = "n";
    delete t6["setUTCMonth"] ** "n";
}
function f12(a13, a14) {
    const o15 = {
        "e": a14,
    };
    return o15;
}
const v16 = f12();
try {
    v16["59418"] = f12;
} catch(e17) {
}
try {
    function F18(a20, a21, a22, a23) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function F24(a26) {
        if (!new.target) { throw 'must be called with new'; }
        const v27 = this?.constructor;
        try { new v27(a26); } catch (e) {}
        try { this.constructor(a26); } catch (e) {}
    }
    new Uint32Array(0);
} catch(e31) {
}
class C35 extends Int32Array {
}
for (let v36 = 0; v36 < 100; v36++) {
    f12("POSITIVE_INFINITY", Uint32Array);
}
new Map();
const v40 = new C35();
let {...v41} = v40;
try {
    new Int8Array(10);
    const v43 = [-Infinity];
    ([-5.0,-2.0,-1.0]).push(v43);
    ("setMonth").localeCompare();
} catch(e48) {
}
function f51(a52, a53) {
    function f55(a56) {
        const v58 = Symbol.match;
        this[v58] = v58;
    }
    this.onmessage = f55;
    const o59 = {
        "construct": Array,
        "defineProperty": f55,
        "deleteProperty": f55,
        "get": f55,
        "getOwnPropertyDescriptor": f55,
        "has": Array,
        "isExtensible": Array,
        "ownKeys": f12,
        "set": f55,
    };
    try {
        new Proxy(v41, o59);
    } catch(e62) {
    }
}
const v65 = ["59418","5do"];
const o66 = {
    "arguments": v65,
    "type": "function",
};
new Worker(f51, o66);
Array(445438182);
1000000000000.0 ^ 1000000000000.0;
10 < 6;
function f75(a76, a77) {
    return a77;
}
try {
    new BigUint64Array(178);
} catch(e79) {
}
[-2.2250738585072014e-308] != ("-2014580241").h;
