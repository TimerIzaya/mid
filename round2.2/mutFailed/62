let v5;
try { v5 = ("o").blink(); } catch (e) {}
try { ("MAX_VALUE").toLocaleLowerCase(); } catch (e) {}
const v9 = new Float64Array(Float64Array, Float64Array, Float64Array);
function f10(a11, a12) {
    const t5 = "o";
    t5[-2] >>>= v5;
    const v14 = [4294967295];
    1966866471n >= v14;
    return v14;
}
Object.defineProperty(v9, Symbol.toPrimitive, { writable: true, enumerable: true, value: f10 });
v9[7] = v9;
class C18 {
    static {
        this.toString = f10;
        Math.asin(this);
    }
}
new C18();
let v25 = [-8];
const v26 = [1607,-65535,268435441,-477772645,1073741823,10,-568852408,1511875330];
v26[2] = v26;
const v27 = [-1,-128,-1073741824,-4294967296,918166487,9007199254740990,9007199254740990];
try {
    v25 = v27;
} catch(e28) {
}
class C30 {
    get h() {
        try { this.findLastIndex(); } catch (e) {}
        %VerifyType(this);
        const v34 = [1e-15,-5.0,-1000000000000.0,-5.972686936111036e+307,-1.275814996674151e+308];
        v34.unshift(v34, undefined);
        for (let v37 = 0; v37 < 100; v37++) {
        }
        function F39(a41, a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v44 = new F39();
        new Uint32Array(Uint32Array);
        const o53 = {
            "maxByteLength": 1712,
            toString(a48, a49, a50) {
                super.d;
                "o" & v44;
                return v25;
            },
        };
        const v55 = new SharedArrayBuffer(1712, o53);
        try {
            new Int16Array(v55);
        } catch(e58) {
        }
        return Int16Array;
    }
    a = 1073741825;
    static #g = 412782144;
    h = C30;
    [v27];
    static valueOf(a60, a61) {
        let v62 = 10;
        for (; v62--;) {
        }
    }
    #b;
    d = "fromEntries";
}
-24654n >> 1073741823n;
typeof "f";
new C30();
const v70 = new C30();
v70.toString = f10;
const v71 = v70?.constructor;
try { new v71(); } catch (e) {}
new C30();
("y6u")["1129094614"];
1073741825 << "MAX_VALUE";
let v79 = -2 / v27;
const v80 = -2 | v70;
++v79;
Math.fround(v79);
v27 | v80;
const v84 = !v80;
v84 || v84;
function F86(a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
}
const v90 = new F86();
const v91 = v90?.constructor;
try { new v91(v80, v90); } catch (e) {}
const v93 = [F86,F86,F86,F86];
try { v93.reduce("MAX_VALUE"); } catch (e) {}
with (v93) {
    const v95 = typeof v90;
    try { v95.toUpperCase(); } catch (e) {}
}
