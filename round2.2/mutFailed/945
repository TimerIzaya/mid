const v1 = new Date();
function f2(a3, a4) {
    try { a3.bind(v1); } catch (e) {}
    const o6 = {
        "c": Date,
        "a": v1,
        "g": v1,
        "f": Date,
        4: a4,
        "e": a4,
        "b": a4,
        __proto__: Date,
        "h": a4,
        "d": v1,
        [-1]: a4,
    };
    const v7 = o6?.f;
    try { new v7(v1, a4, f2, v1, a3, o6, o6); } catch (e) {}
    return o6;
}
const v9 = f2(f2, f2);
const v10 = f2(Date, Date);
try { new Uint8ClampedArray(v9, v9, v9); } catch (e) {}
class C13 extends v1 {
}
const v14 = new C13();
v14.byteLength = v14;
-(-758370.4741002044);
const v17 = typeof -758370.4741002044;
f2(Date, v10);
v17 + 536870888;
try {
    new Float64Array(512);
} catch(e26) {
}
class C29 {
    constructor(a31, a32) {
        try { new a31(v1, Uint8ClampedArray); } catch (e) {}
        try { new a32(v1, this); } catch (e) {}
        this[this] = a32;
    }
}
C29.d = C29;
const v35 = new C29(C29, C29);
const v36 = v35.constructor;
try { new v36(C29, Date); } catch (e) {}
try {
    new v10(2445);
} catch(e39) {
}
try {
    new Int8Array(2648);
} catch(e43) {
}
class C44 {
    constructor(a46) {
        eval("");
    }
}
function f50(a51) {
    function f53(a54) {
        function F55() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v57 = new F55();
        const v58 = [3.0,728.7710136286514,7.58009139855735];
        const o61 = {
            "h": a54,
            get d() {
                v58.length += a54;
                let v60 = this;
                ({"length":a54,...v60} = v58);
                Uint8ClampedArray[127] = Float64Array;
                return v60;
            },
            "g": v57,
        };
        return o61;
    }
    this.onmessage = f53;
    try { a51.setFloat64(a51); } catch (e) {}
    Int8Array ^ f53;
    Date.prototype *= 512;
    Math.sinh(-694342116);
    Math.cbrt(512);
    const v74 = !512;
    Math.atan2(-694342116, 512);
    -694342116 + v74;
}
try { f50(13); } catch (e) {}
try { new Worker(); } catch (e) {}
[Date];
const o82 = {
    "arguments": v9,
    "type": "function",
};
new Worker(f50, o82);
new C44();
const v85 = new C44();
v85?.constructor;
try {
const t0 = "function";
new t0(13);
} catch (e) {}
