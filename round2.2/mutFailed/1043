const v0 = [];
function f1() {
    return v0;
}
try {
    new Uint8Array(308);
} catch(e5) {
}
try {
    new Uint8ClampedArray(4);
} catch(e9) {
}
try {
    new Int16Array(16);
} catch(e13) {
}
try {
    new Uint32Array(4096);
} catch(e17) {
}
try {
    new Int8Array(255);
} catch(e21) {
}
try {
    new Uint32Array(1172);
} catch(e25) {
}
class C28 {
    toString(a30) {
        return Math.min(0.0 ** 16);
    }
}
const v34 = new C28();
const v35 = new C28();
v35.toString = f1;
v0.length += 4096;
try {
    v0.values();
} catch(e38) {
}
const v39 = new C28();
Object.defineProperty(v39, Symbol.toPrimitive, { writable: true, configurable: true, value: f1 });
function f42(a43, a44) {
    a43[Symbol.toPrimitive] = f42;
    const o52 = {
        __proto__: a43,
        valueOf(a48, a49, a50, a51) {
            return a43;
        },
    };
    return o52;
}
const v53 = f42();
v53[Symbol.toPrimitive] = Symbol;
const v56 = f42(v35);
const v58 = [f42(v39),v56];
v58[Symbol.toPrimitive] = f42;
const v61 = [v58,v58,v58,v58,v58];
function f62(a63) {
    a63 != a63;
    try { new Symbol(); } catch (e) {}
    return a63;
}
Object.defineProperty(v61, Symbol.toPrimitive, { value: f62 });
for (const v70 of [v53,v61,v61,v58]) {
    v53[v70] = v39;
    Reflect.construct(f42, [v34]);
}
