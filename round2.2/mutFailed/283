class C6 {
    static {
        for (const v8 in this) {
        }
    }
}
try {
    new Int16Array(3489);
} catch(e12) {
}
const v16 = ["-268435456",-65537n];
([-65537n,-65537n,-65537n,-65537n])[v16];
const v21 = new Int8Array(257);
v21[97];
try {
    new Int8Array(240);
} catch(e24) {
}
try {
    new Int16Array(3);
} catch(e28) {
}
function f29() {
    return "11";
}
Math.asin(~Float32Array);
const v38 = [-1,-1073741824,4294967295];
const v39 = [1480653349,-256,-10,1073741825,55342959];
const v41 = new Set();
class C42 extends Set {
    static 216 = v39;
    #b;
    a = v38;
    static #m(a44) {
        try {
            v39.toString = Set;
        } catch(e45) {
        }
        try {
            super[this] = this;
        } catch(e46) {
        }
        return v41;
    }
}
class C49 {
    constructor(a51, a52, a53, a54) {
        super();
        f29();
        f29("11");
    }
    #f = 481.18917876604246;
    /*
    constructor(a58, a59) {
        a58 >>> a58;
        const v61 = this?.constructor;
        v61[1000000000] = v61;
        try { new v61(C49, a59); } catch (e) {}
        const v63 = [9007199254740990,7,-5509,-1024,65537,9223372036854775807,-5];
        v63.flat(v63);
        class C65 {
        }
        const v66 = new C65();
        v66.constructor;
        a59--;
        try {
            a58[1000000000.0] = this;
        } catch(e69) {
            const v70 = [-3.52327426596522e+307,-609470.5883068476,1000.0,8.80060954064286,-0.0,0.7693769713154471];
            v70.concat(v70);
            function F72(a74, a75, a76) {
                if (!new.target) { throw 'must be called with new'; }
            }
            function F77(a79, a80) {
                if (!new.target) { throw 'must be called with new'; }
                const o84 = {
                };
                function f85() {
                    return a80;
                }
                with (o84) {
                    f = f85;
                }
            }
        }
    }
    */
}
new C49();
new C49(C49, C49);
new C49();
