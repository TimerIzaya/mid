function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
        const o9 = {
            set d(a7) {
            },
            get h() {
                return this;
            },
        };
        for (const v10 in o9) {
        }
    } catch(e11) {
    }
    try {
        this.g = 2147483647;
    } catch(e12) {
    }
    try {
        this.f = a5;
    } catch(e13) {
    }
}
const v15 = [4096];
v15[0] = v15;
v15.toLocaleString("setTime");
const v17 = new F3(352992623);
const v18 = new F3(352992623);
function f19() {
    f19();
}
class C22 extends Array {
}
const v23 = new C22();
v23[178] &= -3.7041991932668994;
v18.e = v18;
const v25 = new F3(3457);
function f26(a27, a28, a29) {
    function f32(a33) {
        Reflect.construct(a27, [Reflect,Reflect,a33,Uint8ClampedArray], Uint32Array);
    }
    a28 >> a28;
    a29.b = a29;
    const o39 = {
        268435441: 268435439n,
        ..."setTime",
    };
    const o40 = {
        "h": a29,
        [2147483647]: a27,
        268435440: a29,
        [v25]: F3,
        "d": a29,
        168: a28,
        [a27]: v17,
        "f": F3,
        [v18]: a28,
        "e": a27,
        ...a27,
    };
    return o40;
}
f26(v18, 352992623, v18);
const v42 = f26(v17, 3457, v25);
v42.a = v42;
f26(v18, 2147483647, v18);
try {
    Uint16Array(196);
    function f47() {
        const o52 = {
            o(a51) {
                return 199137.32986689056;
            },
            [4.0]: 199137.32986689056,
        };
        return 199137.32986689056;
    }
} catch(e53) {
}
try {
    Int8Array(13);
} catch(e57) {
}
const v59 = JSON?.stringify;
class C60 {
}
C60["n"]();
function f63(a64) {
    const o66 = {
        ...a64,
        get e() {
            return this;
        },
        "g": a64,
        __proto__: a64,
    };
    return o66;
}
f63();
try { new v59(v18, v18, v15); } catch (e) {}
try {
    JSON(Uint16Array);
} catch(e70) {
    e70.message;
}
const v72 = [JSON,196,13];
const v73 = [JSON,13,Uint16Array];
const v74 = [v73,196,v73];
const v75 = [v72,v73,196,Uint16Array];
const v76 = [v75,v75];
try { v76.groupToMap(v74); } catch (e) {}
const v78 = [196,v74,JSON,196,v74,v74,JSON,v72];
123 | 123;
Array(123);
try { new Int32Array("setTime", v75, v75); } catch (e) {}
try {
    class C85 extends Int32Array {
    }
    C85(v78);
} catch(e87) {
    e87.message = e87;
}
