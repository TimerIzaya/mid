function f2() {
    const o6 = {
        get g() {
            const v4 = /\p{Script_Extensions=Greek}/d;
            /[[\ca]?]/mi;
            return v4;
        },
    };
    return f2;
}
const v7 = f2();
class C8 extends f2 {
    constructor(a10) {
        delete v7[4];
    }
}
function f14(a15, a16, a17) {
    const o18 = {
        "e": a17,
    };
    return o18;
}
const v19 = f14();
with (f14()) {
    v19[undefined] = e;
}
try { ("o").substr("16", "p"); } catch (e) {}
class C25 {
}
Object.defineProperty(C25, 268435441, { writable: true, enumerable: true, value: Int16Array });
const v27 = [9007199254740990,5,12,256,-6168,-15,2,-4294967297,-2,1];
for (let v28 = 0; v28 < 5; v28++) {
    delete v27[v28];
}
("Cz7")[1];
function f33() {
    return "p";
}
try { new Proxy("16", null, "Fha"); } catch (e) {}
try {
    function f37(a38, a39, a40, a41) {
        return a38;
    }
    536870889n << 536870889n;
    new Proxy(50);
} catch(e45) {
}
try {
    new Uint16Array(6);
    class C49 {
    }
    [C49,C49,C49];
    function F51(a53, a54) {
        if (!new.target) { throw 'must be called with new'; }
        const v55 = this.constructor;
        try { new v55(a54); } catch (e) {}
        a54 > a54;
    }
    new F51();
} catch(e59) {
}
try {
    const v62 = new BigUint64Array(9);
    try { v62.fill(v62); } catch (e) {}
} catch(e64) {
}
gc(JSON.sin());
