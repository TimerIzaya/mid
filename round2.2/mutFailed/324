/nI/sdvy;
const v4 = /\1(a)/gvyi;
v4.sticky = v4;
/a$I/sdvi;
try {
    new Uint16Array(218);
} catch(e9) {
}
10 - 10;
try {
    new BigInt64Array(10);
} catch(e14) {
}
221 + 221;
try {
    new Float32Array(9007199254740991);
} catch(e19) {
}
const v22 = new Array(7);
let v23;
try { v23 = v22.indexOf(v22); } catch (e) {}
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v22;
    } catch(e27) {
    }
    try {
        v23.d = a26;
    } catch(e28) {
    }
    try {
        this.b = 7;
    } catch(e29) {
    }
}
const v30 = new F24(F24);
const v31 = new F24(v22);
const v32 = new F24(v30);
const v33 = [v32,v22,F24,v23,F24];
const v34 = v33[1];
const v35 = [v22,Array];
const v36 = [v33,v31];
try { v36.find(218); } catch (e) {}
class C38 extends v34 {
    get f() {
        Object.defineProperty(this, this, { writable: true, value: this });
        try {
            try {
                v22.length = 7;
            } catch(e40) {
            }
        } catch(e41) {
            new e41(e41);
        } finally {
            try {
                C38[this] = v36;
            } catch(e43) {
            }
        }
        return v35;
    }
}
try { new v31(); } catch (e) {}
const v45 = new C38();
v45.e = v45;
new C38();
new C38();
for (const v48 of v36) {
    try { v48.findLast(Uint16Array); } catch (e) {}
    const v50 = C38 % v36;
    try { new v48(7, 9007199254740991, v32, v50); } catch (e) {}
    /(ab)/guyi;
    const v53 = /Sfoo(?<=bar)baz/mdui;
    const v54 = /a\w0/svy;
    try { v54.compile(v53, v23); } catch (e) {}
}
