function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    try {
        this.e = -9007199254740992;
    } catch(e3) {
    }
    try {
        this.h = -9007199254740992;
        "indexOf" >>> "8";
        class C7 {
        }
    } catch(e8) {
    }
}
new F0();
new F0();
const v11 = new F0();
v11.h = v11;
-9223372036854775808 % -9223372036854775808;
const v16 = 1472390148 - 1472390148;
v16 >> v16;
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this.constructor;
    try { new v22(); } catch (e) {}
    a20.sticky;
}
1320765959n - 1320765959n;
let v30;
try { v30 = ("symbol").blink(); } catch (e) {}
v30[4] = v30;
function f34() {
    Math.log1p(-2.220446049250313e-16);
    return -2.220446049250313e-16;
}
Int32Array.toString = f34;
try { new Int32Array(v11, 1320765959n, "symbol"); } catch (e) {}
function f40(a41, a42, a43) {
    const o44 = {
    };
    -2147483647 << 636668136;
    const o48 = {
    };
    o44.e = o44;
    o44.e = o44;
    return o44;
}
const v49 = f40();
v49.h = v49;
const v50 = f40(Int32Array, v49, v49);
v50.toString = f40;
const v51 = [v50];
const v52 = v51?.reverse;
try { new v52(); } catch (e) {}
let v54;
try { v54 = v51.fill(v50); } catch (e) {}
("b").match("b");
const t57 = null;
t57[-2] = BigInt64Array;
try { v54.map(v50); } catch (e) {}
const v61 = [Int32Array,v49,[Int32Array,Int32Array,Int32Array,Int32Array],2];
try { v61.toLocaleString(v51); } catch (e) {}
