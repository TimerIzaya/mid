const v0 = [-1000.0,-2.6950415627203385e+307,793243.922656117,2.220446049250313e-16,-2.220446049250313e-16];
const v1 = [34.83558981827446,-1000000000.0,5.0,-816.1111774452584,823.4470435171686,-1.334117836725514e+307,1e-15,720070.575491145];
const v2 = [-3.0];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.constructor;
    try { new v7(a5, this); } catch (e) {}
    a5[0];
    try {
        this.e = v1;
    } catch(e10) {
    }
    try {
        this.d = v1;
    } catch(e11) {
    }
}
const v12 = new v1(v2, v2);
new F3(v12, v0);
const v14 = new F3(v2, v1);
v14.b = v14;
let v15 = 257;
v15--;
-2.2250738585072014e-308 - -2.2250738585072014e-308;
v2 >> 1000000000000.0;
class C25 {
    g;
    1 = v14;
    static {
        try {
        const t0 = 0.5791918210462771;
        new t0();
        } catch (e) {}
        -1.7976931348623157e+308 !== this;
        try {
            this.e = this;
        } catch(e30) {
        }
    }
}
const v31 = C25.prototype;
const v32 = new C25();
const v33 = new C25();
class C35 {
    static {
        this?.constructor;
        try { new this(this); } catch (e) {}
        class C39 extends C25 {
            [v33] = "e";
        }
    }
}
try { new v31(); } catch (e) {}
try {
    v32.fuck();
} catch(e42) {
    e42.message;
}
