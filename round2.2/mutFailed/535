class C3 {
    toString(a5) {
        const v6 = "toString" & a5;
        v6 > v6 ? v6 : v6;
        try { a5(); } catch (e) {}
        const v10 = this.f;
        v10 > v10 ? v10 : v10;
        return v10;
    }
    5;
    static {
        try { this.o(this, this); } catch (e) {}
    }
    valueOf(a16, a17) {
    }
    3;
    536870888;
    6 = "toString";
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
class C21 extends C3 {
    constructor(a23, a24, a25, a26) {
        super();
        try {
            this[a26] = this;
        } catch(e27) {
        }
        -1511481902 == Int16Array;
        function F32(a34) {
            if (!new.target) { throw 'must be called with new'; }
            this[Symbol.toPrimitive] = gc;
        }
        const v37 = new F32(gc);
        const t35 = [0.4957559106778876,1000000.0,Infinity,0.09206648472610712,1.1634868190768017,-6.697648245237533e+306];
        delete t35[v37];
        a25.b;
        new WeakMap();
    }
    static f;
    1073741824;
    2147483649;
    [v18] = v18;
}
const v43 = new C21(v18, v20, v18, -1426935986);
const v44 = new C21(v19, v19, v20, v43);
new C21(C3, v44, C21, v43);
class C47 extends WeakMap {
}
const o50 = {
    get a() {
        return 963.510974665131;
    },
    4294967295: 963.510974665131,
};
class C57 {
    valueOf(a59) {
        arguments[a59] = 655720442;
    }
}
function F62() {
    if (!new.target) { throw 'must be called with new'; }
}
let v65 = WeakMap;
v65 += v65;
const t66 = [1.903382935928013,-2.2250738585072014e-308,-5.0,-421604.82323050185];
t66.length = v65;
