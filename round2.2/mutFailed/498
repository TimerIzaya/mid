const v0 = [];
function f1(a2) {
    [Reflect];
    return v0;
}
v0[Symbol.toPrimitive] = f1;
class C7 {
    static #o() {
        f = this;
        this[8] = 11;
        v0[11];
        return v0;
    }
    static 39;
    #a;
    static 2147483648 = v0;
    [v0];
}
const v13 = new C7();
new C7();
const v15 = new C7();
3.0 >>> 3.0;
BigUint64Array.BYTES_PER_ELEMENT;
try {
    new BigUint64Array(5);
} catch(e24) {
}
1000 >>> 1000;
try {
    new Int32Array(1000);
} catch(e29) {
}
try {
    new Uint32Array(884);
} catch(e33) {
}
function f34() {
    let v35 = 268435441;
    v35--;
    const o44 = {
        65537: v35,
        ...15,
        m(a40, a41) {
            let v42;
            try { v42 = a41(); } catch (e) {}
            super[v42];
            return -2.220446049250313e-16;
        },
        "c": -2.220446049250313e-16,
        "a": f34,
        __proto__: -2.220446049250313e-16,
        "b": -2.220446049250313e-16,
        ...v35,
        /*
        __proto__: v35,
        */
        "g": C7,
        "a": v35,
        "e": v35,
        "d": -2.220446049250313e-16,
    };
    function f45(a46) {
        delete o44[a46];
        return v13[o44];
    }
    o44.toString = f45;
    o44[65537];
    return o44;
}
f34.toString = f1;
f34();
const v51 = f34();
v51[-1000] = v15;
const v52 = f34();
-(-2046010351);
-35140380 / -35140380;
~-4096;
-4096 + -4096;
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = Symbol;
    function f65() {
        return f34;
    }
    function f66(a67) {
        1.7779584531239176e+308 === a67 ? 1.7779584531239176e+308 : a67;
    }
    Object.defineProperty(a63, Symbol.toPrimitive, { writable: true, enumerable: true, get: f65, set: f66 });
    a63 & a63;
    a64 & a64;
    const v74 = F60?.constructor;
    v74.length = v74;
    try { new v74(f34, f34, v51); } catch (e) {}
    try {
        this.b = f34;
    } catch(e76) {
    }
    try {
        this.f = -4096;
    } catch(e77) {
    }
}
const v78 = new F60(v51, -2046010351, -35140380);
function f79() {
    Math.tan(1188195176);
    return BigUint64Array;
}
Object.defineProperty(v78, "constructor", { enumerable: true, value: f79 });
const v83 = v78?.constructor;
try { new v83(v52, C7, 1.7779584531239176e+308); } catch (e) {}
function f85() {
}
v51[-1000.0] = Uint8ClampedArray;
