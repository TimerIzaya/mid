try {
    new Int32Array(7);
} catch(e3) {
}
const v7 = Symbol.toPrimitive;
const o9 = {
    [v7]() {
        Object.defineProperty(v7, "h", { enumerable: true, set: Symbol });
    },
};
try {
    Math.sinh(-410.19692591178796);
    536870889n << 536870889n;
    new BigInt64Array(255);
} catch(e16) {
}
function f18() {
    const o23 = {
        "c": "n",
        ..."n",
        get f() {
            return this;
        },
        11: -1581306778,
        "e": "n",
        [536870888]: "n",
        ..."n",
        "g": -1581306778,
        "f": -1581306778,
    };
    return o23;
}
try {
    new BigInt64Array(1315);
} catch(e26) {
}
let v27 = 1919218961;
class C33 extends BigInt64Array {
    p(a35, a36, a37, a38) {
        try {
            v27 &&= 255;
        } catch(e39) {
        }
        return Int32Array;
    }
    1 = 1.0;
    static #toString(a41, a42, a43, a44) {
        delete this[1894767853];
        new Uint32Array();
        function f48() {
        }
        ("unicode")[8n];
        for (let v52 = 0; v52 < 32; v52++) {
            const v54 = "p" + v52;
            this[v54] = v52;
            const o58 = {
                n(a56, a57) {
                    return v54;
                    super.e = this;
                    return this;
                },
            };
            return o58;
        }
        return -3.0;
    }
}
new C33();
new C33();
new C33();
function f62() {
}
f62();
const v64 = f62();
function F68(a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this.constructor;
    try { new v73(); } catch (e) {}
    new Int16Array(4096);
    new Uint16Array();
    new Uint32Array();
}
const v83 = new Int32Array();
try { v83.reduce(v83); } catch (e) {}
function f85() {
    return f85;
}
new F68();
new F68(v64, -4096);
