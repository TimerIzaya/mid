class C3 {
    static {
        let v5;
        try { v5 = this.n(-9007199254740990, this, -60247); } catch (e) {}
        try { new v5(this, v5, -60247, v5, v5); } catch (e) {}
    }
    static {
        const t7 = "bigint";
        t7[3] = super.b;
    }
    static [-9007199254740990] = "bigint";
    get b() {
        try {
            this.toString = this;
        } catch(e10) {
        }
        return -60247;
    }
}
const v11 = new C3();
const v12 = new C3();
let v14;
try { v14 = v12["toString"]("toString"); } catch (e) {}
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a18;
    } catch(e19) {
    }
    try {
        this.c = a17;
    } catch(e20) {
    }
}
new F15(v12, v14);
const v22 = new F15(-60247, "toString");
new F15(v11, F15);
new C3();
try {
    new BigInt64Array(2);
} catch(e28) {
}
try {
    new Uint8ClampedArray(1);
} catch(e32) {
    let v33 = 15;
    v33 <<= v33;
    try { Boolean.n(BigInt64Array, v22, "boolean", v33); } catch (e) {}
    delete v12[3];
    const t48 = "bigint";
    t48[9] = -9007199254740990;
    [536870888,62478];
    [2147483647,43648,65536,65537];
    [-3,-3,-128,-4294967296,-58715,-723002846,3,65537,536870912];
    class C42 extends Boolean {
        constructor(a44, a45, a46, a47) {
            super("boolean", e32, a45);
        }
    }
}
try {
    new Uint16Array(2465);
} catch(e51) {
    Math.expm1(-Infinity);
    const v57 = new Set();
    [v57,v57,4.742654329717853];
}
("function").normalize();
function f61() {
    class C63 {
        constructor(a65, a66) {
            const v67 = this.constructor;
            try { new v67(-2147483649); } catch (e) {}
        }
    }
    new C63();
}
f61();
