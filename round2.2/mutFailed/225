function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -29474;
    } catch(e3) {
    }
    try {
        this.c = -29474;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
const v7 = new F0();
const v8 = /a{0}/msuyi;
const v9 = /(?!\1(a\1)\1)\1ta$?/msv;
const v11 = [F0,v8,/v/sduy,F0];
const v12 = [v11,v9,v11,v6];
const v13 = [v12,v8];
class C14 {
    h = v11;
    0 = v6;
    static #f;
    get b() {
        v7[1] = super[v11];
        try {
            super.c = v12;
        } catch(e17) {
        }
        return F0;
    }
    static #toString(a19, a20, a21) {
        [255,6,-318789793,10000,1073741824,-4];
        [8,0,2,255,65535,-4294967296,-536870912];
        [268435440];
        return C14;
    }
}
let v25 = new C14();
const v26 = new C14();
const v27 = new C14();
try {
    v25 -= v27;
} catch(e28) {
}
try { v9.test(v26, v25, v6, ...v7, ...v13); } catch (e) {}
function F30(a32) {
    if (!new.target) { throw 'must be called with new'; }
}
class C33 extends F30 {
}
const v34 = new C33();
for (let v35 = 0; v35 < 25; v35++) {
    const v36 = v34.b;
    try { v36["toString"](); } catch (e) {}
}
