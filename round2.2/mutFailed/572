const v3 = [1e-15,-1.791424368674983e+308,-3.3512091585926367,-256667.28075132577];
function f4(a5, a6) {
    const o9 = {
        "maxByteLength": 3371,
    };
    const v11 = new ArrayBuffer(3371, o9);
    try {
        new Int32Array(v11);
    } catch(e14) {
    }
    return v11;
}
v3[Symbol.toPrimitive] = f4;
const v17 = [-221329.9189703199,2.2250738585072014e-308,566.6566545834232,8.207326010118216e+307,5.0,1.5381562196441992e+308,-6.275593335295964,2.2250738585072014e-308,3.8434395705884433e+307];
v17[2] = v17;
const v18 = [1000000.0,-1.4429480089962999e+308,1.7925133824935385e+308,0.566875540387634,1000000000.0,0.49643699562123156];
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.__lookupSetter__;
    try { new v23(a22); } catch (e) {}
    try { a22.reduce(v17); } catch (e) {}
    try {
        this.f = 1219899177;
    } catch(e26) {
    }
    try {
        this.e = v3;
    } catch(e27) {
    }
}
const v28 = new F19(F19, v17);
const v29 = new F19(1219899177, v18);
v29.length = v17;
v29.length = v29;
const v30 = new F19(v17, v17);
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this?.__defineGetter__;
    try { new v35(F19, F19); } catch (e) {}
    a33[4];
    try {
        this.b = a34;
    } catch(e38) {
    }
    try {
        this.e = a34;
        class C43 {
        }
        const v44 = new C43();
        BigInt64Array[Symbol.toPrimitive] = f4;
        delete v44[BigInt64Array];
    } catch(e54) {
    }
    try {
        this.f = 1219899177;
    } catch(e55) {
    }
}
const v56 = new F31(v18, v29);
const v57 = new F31(v17, v56);
v57.h = v30;
v57.b = v57;
const v58 = new F31(v17, v57);
v58.h = F19;
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    function f65(a66, a67) {
        const t67 = [-32299,5];
        t67.__proto__ = [-12];
        return a66;
    }
    this.valueOf = f65;
    const v70 = this?.constructor;
    try { new v70(a63, this, a63, this); } catch (e) {}
    a62 ^ a62;
    a64.h = a64;
    try {
        this.b = a63;
    } catch(e73) {
    }
    try {
        this.d = v29;
    } catch(e74) {
    }
}
new F59(v56, 1219899177, v56, v57);
new F59(v29, v3, F59, v58);
new F59(v58, v3, 129, v57);
const v78 = [-732247010,10136,-65536,-536870912,1073741824];
v78.toString = f4;
const v79 = [v78];
v79.toJSON = v79;
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(a85); } catch (e) {}
    this.a = a82;
}
const v87 = new F80(v79);
const v88 = v87?.__defineGetter__;
try { new v88(v79, F59); } catch (e) {}
function f90(a91) {
    return a91;
}
try { new f90(129); } catch (e) {}
try { ("function").localeCompare(v79); } catch (e) {}
const v96 = [v87];
const o97 = {
    "arguments": v96,
    "type": "function",
};
const v98 = o97?.constructor;
try { new v98(v28); } catch (e) {}
new Worker(f90, o97);
