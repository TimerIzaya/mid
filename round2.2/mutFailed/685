const v0 = [10];
class C1 {
    constructor(a3) {
        super[a3] = this;
    }
}
[-5,-4294967296,64082,-2147483649,257,61261];
[-4294967297,14,0,4294967295];
let v6 = 4096;
try {
    function F8() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v10 = new F8();
    const v12 = new Proxy(v10, v0);
    v12.b = v12;
    new Float64Array(v6);
} catch(e14) {
}
let v17 = -4294967295n;
++v17;
function f19(a20, a21) {
    const o22 = {
        __proto__: a21,
    };
    return o22;
}
const v24 = f19(f19(), f19);
const t28 = [-Infinity,-507.25926960893685,398.0348813664666];
t28.length = v24;
try {
    new Uint32Array(3715);
} catch(e27) {
    AggregateError("d");
    function f31() {
        return f31;
    }
    while (v6 < 3) {
        let v35 = 0;
        while (v35 < 1) {
            Math.atanh(-995.6225140096815 instanceof f31);
            v35++;
        }
        v6++;
    }
}
class C44 {
}
const v45 = new C44();
class C47 {
}
const v48 = new C47();
const v50 = [[v45,v45,v45,v45,v45],1.0,1.0];
for (let v51 = 0; v51 < 100; v51++) {
    f19(v50, v48);
}
function F54() {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    const v57 = new BigUint64Array();
    Object.defineProperty(v57, -1, { configurable: true, enumerable: true, value: v57 });
} catch(e58) {
}
try {
    new Int8Array(1000);
} catch(e60) {
}
function f61() {
    return Uint32Array;
}
const v62 = [600722822,7,0];
class C63 {
    [v62];
}
new C63();
