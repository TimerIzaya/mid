("species").normalize();
const v6 = [-17187,-268435456,-1467519467,12912,65535,11,-14,-9007199254740990,281638100,1];
function f7(a8, a9, a10) {
    const o18 = {
        __proto__: a9,
        valueOf(a12, a13, a14, a15) {
            -536870912 ^ a8;
            return v6;
        },
        "g": a9,
        get e() {
        },
    };
    return o18;
}
f7(-536870912, v6);
f7(-536870912, v6);
class C21 {
    o(a23) {
        let v22 = this;
        const o26 = {
            valueOf() {
                try {
                    v22 = "object";
                } catch(e25) {
                }
                return "getHours";
            },
        };
        return "object";
    }
    ["getHours"];
}
class C27 {
    static valueOf(a29, a30) {
    }
}
let v32 = Symbol.replace;
v32 += v32;
new C21();
new C21();
new C21();
const v44 = new Array(512);
class C45 extends Array {
    o(a47) {
        const o48 = {
        };
        try {
            o48.g = v44;
        } catch(e49) {
            function f50() {
                return f50;
            }
            class C53 extends BigUint64Array {
                constructor(a55, a56, a57) {
                    super(1925);
                }
            }
            const v58 = new C53();
            for (const v59 of v58) {
                for (let i = 0; i < 5; i++) {
                }
            }
        }
        try {
            const o60 = {
            };
            o60.g = v44;
            o60.e = this;
        } catch(e61) {
        }
        try {
            const o62 = {
            };
            o62.g = v44;
            o62.e = this;
            o62.c = a47;
        } catch(e63) {
        }
        try {
            const o64 = {
            };
            o64.g = v44;
            o64.e = this;
            o64.h = a47;
        } catch(e65) {
        }
        return Array;
    }
}
new C45();
new C45();
new C45();
const o71 = {
    "maxByteLength": 4294967296,
};
const v72 = [-3.52327426596522e+307,-609470.5883068476,1000.0,8.80060954064286,-0.0,0.7693769713154471];
v72.concat(v72);
new WeakMap();
try {
    new Uint8ClampedArray(11);
} catch(e78) {
}
try {
    new Int8Array(129);
} catch(e82) {
}
try {
    new BigInt64Array(6);
} catch(e86) {
}
let v87 = 0;
while (v87 < 10) {
    const v91 = [1.7976931348623157e+308];
    class C92 extends Uint32Array {
        constructor(a94, a95, a96) {
            super(v91);
        }
    }
    try {
        new Uint8ClampedArray(1760718952);
    } catch(e99) {
    }
    v87++;
}
