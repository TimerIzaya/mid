try {
    new Int8Array(1);
} catch(e3) {
}
try {
    new Float64Array(512);
} catch(e7) {
    for (const v8 of e7) {
        try { e7["m"](1, 1, e7, e7, v8); } catch (e) {}
        try {
            v8.__proto__ = e7;
        } catch(e11) {
        }
    }
}
try {
    new Uint16Array(129);
} catch(e15) {
}
class C16 extends Float64Array {
    #c = 129;
    f = Int8Array;
    static #d = 129;
    static #h;
    [129];
    get d() {
        let v19 = -8499;
        Math.log(1.0);
        Math.hypot(536870888);
        v19--;
        return v19--;
    }
}
new C16();
new C16();
new C16();
try {
    new Int8Array(7);
    const o34 = {
        "maxByteLength": 1073741825,
    };
    const v36 = new ArrayBuffer(7, o34);
    try {
        new Int16Array(v36);
    } catch(e39) {
    }
} catch(e40) {
}
try {
    new Float32Array(0);
} catch(e44) {
}
try {
    new Int16Array(1669);
} catch(e48) {
}
try {
    const v51 = new Int8Array(16);
    function f52(a53, a54) {
        return v51;
    }
    v51[Symbol.toPrimitive] = f52;
    v51[8] = v51;
} catch(e57) {
}
let v58 = 0;
while (v58 < 9) {
    v58++;
}
