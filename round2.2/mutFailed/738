const v1 = new Set();
class C2 extends Set {
    #valueOf(a4) {
        try { a4(a4, a4, a4, a4); } catch (e) {}
        a4[2541] *= ("-9223372036854775808").length;
        const v10 = /a\sc5n/gdvyi;
        /[x]d/mgsvi;
        /o+/g;
        return v10;
    }
    #h = Set;
    static #e = Set;
}
const v13 = new C2();
function f14(a15, a16) {
    return Set;
}
v13[Symbol.toPrimitive] = f14;
let v22;
try { v22 = v13.values(); } catch (e) {}
function f23(a24, a25) {
    -3.8583983045322756e+307 >> -3.8583983045322756e+307;
    let v28 = -3.8583983045322756e+307 << -3.8583983045322756e+307;
    v28--;
    return a25;
}
v13[Symbol.toPrimitive] = f23;
new C2();
new C2();
function f34() {
    return v1;
}
try {
    new BigUint64Array(7);
} catch(e38) {
}
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
try {
    new Uint16Array(197);
} catch(e42) {
}
6 >>> 6;
try {
    new Int32Array(6);
} catch(e47) {
}
class C48 {
    #n(a50, a51, a52, a53) {
        try { this.o(a50, a52, a50, this); } catch (e) {}
        [Date(0.10496304936808387) ** 716706.7843920034,0.10496304936808387,716706.7843920034];
        -a50;
        const v65 = !a50;
        Math.expm1(-18443);
        const v67 = -this;
        Math.min(v65);
        Math.acosh(6);
        return v67;
    }
    [v13] = BigUint64Array;
}
const v70 = new BigUint64Array();
const v71 = new C48();
v71.constructor = f14;
try { v71.constructor(); } catch (e) {}
new C48();
const v74 = v70?.undefined;
try { new v74(6, 6, Set); } catch (e) {}
try { v22.strike(); } catch (e) {}
class C79 {
}
C79.length;
const v81 = new C79();
const v82 = v81?.constructor;
try { new v82(); } catch (e) {}
function f85() {
    return f23;
}
function f86(a87) {
    function f88(a89, a90, a91) {
        const o96 = {
            [a90](a93, a94, a95) {
            },
            __proto__: a89,
        };
        return o96;
    }
}
Object.defineProperty(Int16Array, "valueOf", { writable: true, enumerable: true, get: f85, set: f86 });
C48.valueOf = Symbol;
const v97 = new C79();
const v98 = -1511481902 == Int16Array;
v98 && v98;
const v101 = ("f")["substring"]();
try { new v101(v101, v101, v81, v97, ...v98, v101); } catch (e) {}
