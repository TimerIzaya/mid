function f6(a7, a8) {
    const o9 = {
    };
    return o9;
}
f6();
function f11() {
    return f6;
}
const v15 = Math.atan(-2);
const v16 = [255];
v15[Symbol.matchAll] = v16;
("665815241").normalize();
Map.name = Map;
const v22 = new Map();
try { v22.entries(); } catch (e) {}
new BigInt64Array(-5);
Worker.constructor;
function f30(a31) {
    return a31;
}
["undefined"];
["Pfmt"];
try {
    new Uint8Array(4);
} catch(e37) {
}
const v40 = new Float32Array(33);
try {
    BigInt64Array();
} catch(e43) {
    e43.message = e43;
    const v44 = e43.constructor;
    try { v44(e43); } catch (e) {}
}
v40.copyWithin();
Array.from([1000000000000.0,1.3368057463734657e+307,-231.63216380614244,-807429.563730756,0.536075209246202,-967813.2829232133,0.0,1000000000.0,1000000000000.0,4.0], Array);
const v50 = [0.4876409988948992,-1.6894924211567516e+308,0.4876409988948992,-1.6894924211567516e+308];
const v53 = [-7.793626082995357e+306,-1000000000.0,-1.0,-4.020366852164246,1.1139435684982857,0.059757566514858196];
const v54 = Symbol.toPrimitive;
for (let v56 = 0; v56 < 32; v56++) {
    const t41 = "object";
    t41["p" + v56] = v56;
}
v53[v54] = Symbol;
function f59(a60, a61) {
    a60 & a60;
    return a61;
}
f59();
%OptimizeFunctionOnNextCall(f59);
let [] = "undefined";
try {
    const t53 = "Pfmt";
    t53.b = v50;
} catch(e65) {
}
Date.UTC();
("-1344988452").toUpperCase();
function f70(a71, a72) {
    return a71;
}
function f75(a76, a77, a78) {
    return a78;
}
const o79 = {
};
try {
    Float32Array();
    function f81(a82) {
    }
    Float32Array(/\1(a)(a\1)*/svy);
} catch(e86) {
    e86.stack;
}
