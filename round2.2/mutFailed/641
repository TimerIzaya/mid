new Set();
const t1 = -1000.0;
t1[15] = 1548;
function f12(a13) {
    const o15 = {
        9: "reduce",
        "d": "m",
        1843285832: "h",
        ...a13,
        "g": "reduce",
        "e": "m",
        "h": "reduce",
        get c() {
            return this;
        },
    };
    return o15;
}
const t18 = -436943075n;
t18("h");
[536870888,6,65535];
new Uint8ClampedArray(-1000.0);
class C24 {
    static #c;
    static get c() {
        const v26 = ("number").length;
        const v27 = v26(C24, v26);
        %VerifyType(3);
        v27.#c = 3;
    }
}
try {
    new Float64Array(257);
} catch(e30) {
}
try {
    new BigInt64Array(3267);
} catch(e34) {
}
const v37 = [2.220446049250313e-16,0.0,2.3348944610543576,2.220446049250313e-16,0.07765677740421906];
function F38(a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = v37;
}
new F38();
try {
    new Int32Array(2026);
} catch(e45) {
}
function F46() {
    if (!new.target) { throw 'must be called with new'; }
}
let v49 = new F46();
class C53 {
}
const v55 = gc.bind();
try { v55(); } catch (e) {}
const v59 = [-1000000.0,NaN,-Infinity,1000000000.0,4.0,0.6454623723660227,-639484.2592792367,-1.222260547575251e+307];
[v59,v59,v59];
new Float32Array(1790);
for (let v65 = 0; v65 < 86; v65++) {
    var d = --v49;
}
