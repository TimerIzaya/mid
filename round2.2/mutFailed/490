const v2 = [];
v2.toString = -26016;
try {
    v2[v2] = -1.0;
} catch(e5) {
}
function f7() {
    return 1449569530;
}
class C8 extends f7 {
    o(a10, a11) {
        class C13 extends Int32Array {
        }
        new C13();
        let v15 = 0;
        v15++;
        const v17 = this[this];
        function F18(a20, a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
            Math.acosh();
            ("sync").replace("sync");
            SharedArrayBuffer();
            try {
                this.a = a22;
            } catch(e29) {
            }
            try {
                this.d = a11;
            } catch(e30) {
            }
        }
        new F18(a11, a11, -4303);
        function F32(a34) {
            if (!new.target) { throw 'must be called with new'; }
            const v35 = this?.constructor;
            try { new v35(a34); } catch (e) {}
            try { this.constructor(a34); } catch (e) {}
        }
        new F18(-9, -4303, v17);
        new F18(a10, a11, -9);
        return v17;
    }
}
new C8();
new C8();
new C8();
/[y(\1a)]/mgdv;
function f44(a45, a46) {
    const o47 = {
    };
    return o47;
}
f44();
/N/;
/7Y/mi;
try {
    new Uint8Array(5);
} catch(e54) {
}
try {
    new Int32Array(12);
} catch(e58) {
}
try {
    new BigUint64Array(1);
} catch(e62) {
}
class C68 {
    static [6];
    [9] = Int32Array;
    static m(a70, a71, a72, a73) {
        const v74 = [-1000000000000.0,1000000000000.0,Infinity,-4.0,-2.0];
        const v75 = [0.2931855719055986,-1.7976931348623157e+308,866622.9350670795,-1000000.0,0.6944640487917515,1e-15,-Infinity];
        function f76(a77, a78) {
            const o86 = {
                630697212: a77,
                "g": v74,
                [a78]: v74,
                ...a77,
                get h() {
                    function f80(a81, a82, a83) {
                        'use strict';
                        try { a83(a82, this, v75, v75); } catch (e) {}
                        [0,-14,536870887,-15,1,2147483647];
                    }
                },
            };
        }
        const o88 = {
        };
        Array.from(o88, f76, o88);
        f76(v74, v74);
    }
    [Float64Array];
    [Int32Array] = Float64Array;
}
const v91 = new C68();
let v92;
try { v92 = v91.n(); } catch (e) {}
const v94 = v92 >= Uint8Array ? v92 : Uint8Array;
[Float64Array,Float64Array,Float64Array];
const v99 = [-680147.9390065788];
v99.fill(v99, 2147483648, -17600);
v94[268435439] = v94;
v94.a = C68;
