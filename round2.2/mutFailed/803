try {
    new Uint8ClampedArray(3);
} catch(e3) {
}
function f6(a7) {
    function f9(a10) {
    }
    this.onmessage = f9;
    try {
        a7 &&= this;
    } catch(e14) {
    }
}
const v17 = [f6];
const o18 = {
    "arguments": v17,
    "type": "function",
};
new Worker(f6, o18);
try {
    new Uint8ClampedArray(2100);
} catch(e21) {
}
try {
    new Float64Array(3);
} catch(e25) {
}
function f29() {
    return f29;
}
class C31 {
    constructor(a33, a34) {
        this[a33] = a34;
    }
}
function f35(a36, a37, a38) {
    const v39 = a37.toString();
    v39.length;
    return v39;
}
const v41 = [-0.0,-1000000000.0,991998.0418321821,3.0,1.7013505193620964e+308,0.0,-17868.964753441396];
const v42 = [-5.0,752.3813494122871,-852877.870933423,467.0178608759047,1.0,811434.1369388318];
const v43 = [708.1226436173899,Infinity,-1.750984632870916e+308,8.853907863697838,-2.0,-1000000000000.0,-1.6309857582367659e+308,1000000000000.0,-Infinity];
function f45(a46, a47) {
}
try { ("multiline").charAt(7); } catch (e) {}
for (let [,,...v50] of "multiline") {
    const v51 = v50?.every;
    try { new v51(v50); } catch (e) {}
    try { v50(); } catch (e) {}
}
try {
    new Float32Array(7);
    [/\x01?/gy];
    gc();
    class C62 {
    }
    new f45(C62);
    for (let v64 = 0; v64 < 50; v64++) {
    }
    const o68 = {
        ..."NaN",
        [Infinity](a66, a67) {
        },
    };
} catch(e69) {
}
const v72 = Float64Array.length;
try {
    new Float64Array(1267);
} catch(e74) {
    class C75 {
        static {
            class C78 extends this.constructor {
            }
            new C78();
        }
    }
}
function F82(a84) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
    try {
        this.h = a84;
    } catch(e86) {
    }
    try {
        for (let v87 = 0; v87 < 10; v87++) {
            /[x\dz]((x)(x)(x)\3\xed\xa0\x80\p{Script=Greek}a*?lA7)/mgduy;
        }
        return "zFAcr";
        this.b = a84;
    } catch(e90) {
    }
    [Reflect];
    class C93 {
        #g;
    }
    try {
        this.f = 1073741825;
    } catch(e94) {
    }
    class C96 extends Uint8ClampedArray {
        h;
        g;
        #valueOf(a98, a99) {
        }
    }
    new C96();
}
new F82(-1);
try { Float32Array.of(); } catch (e) {}
try {
    const v105 = new Float32Array(1543);
    v105[768] = v105;
} catch(e106) {
}
const o119 = {
    toString(a109, a110) {
        async function f111(a112, a113, a114, a115) {
            await a113;
            return a113;
        }
        try { e(); } catch (e) {}
        return this;
    },
    __proto__: v72,
    "g": v72,
    1073741823: f35,
    "a": 1267,
    255: 1543,
};
function f120(a121) {
    return a121;
}
f120.caller = f120;
function f123(a124, a125, a126) {
    const o138 = {
        "a": a125,
        n(a128, a129, a130, a131) {
            return a128["trim"](this, "multiline", -1024n, "trim", a125);
        },
        m(a135, a136, a137) {
            return a137;
        },
    };
    o138[12];
}
const v140 = f123();
%PrepareFunctionForOptimization(f123);
class C143 {
}
try { new C143(); } catch (e) {}
const o148 = {
    toString(a146, a147) {
        return this;
    },
    "h": 7,
    "type": "function",
    "arguments": v41,
    [v43]: v42,
    2983458584: v42,
};
const v150 = [o148];
const o151 = {
    "arguments": v150,
    "type": "function",
};
const v152 = [o119];
const o153 = {
    "arguments": v152,
    "type": "function",
};
new Worker(f120, o153);
function f157() {
    return v41;
}
try { f157(); } catch (e) {}
try { BigInt64Array.from(f123); } catch (e) {}
try { new BigInt64Array(Uint32Array, ...2147483649n); } catch (e) {}
const v164 = [];
function F165() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v164;
        try { v150.includes(7, 1267); } catch (e) {}
        536870889 * -5;
        -536870889;
        ~-5;
        Math.floor(7);
    } catch(e176) {
    }
    try {
        this.f = v164;
    } catch(e177) {
    }
    try {
        this.a = v164;
    } catch(e178) {
    }
}
const v179 = new F165();
const v180 = new F165();
const v181 = new v140();
const v182 = [9007199254740991,64290,-9007199254740991,1073741825,32414,129,5,880547930,628,2147483649];
const v183 = [0.736410139350908,2.220446049250313e-16,-2.0,-5.0,630.4538578848853,-2.0,-7.771867375697383,-1000000.0];
function F185(a187, a188, a189, a190) {
    if (!new.target) { throw 'must be called with new'; }
}
const v191 = new F185(v183, "464", v181);
new F185(v182, v191, v179, v180);
for (let v193 = 0; v193 < 5; v193++) {
    function f194() {
        return f194;
    }
    try { f194(); } catch (e) {}
}
const v199 = [Worker,"function",-946.8643548427116];
try { v199.slice(2147483649n, f123); } catch (e) {}
let v202 = 268435439;
v202++;
[-1,v202,-9.611530381865985e+307];
const v205 = new C31(C31, C31);
class C207 extends v205.constructor {
    h = 3;
}
new C207();
