const v1 = new WeakMap();
const v2 = [v1,v1,v1];
const v3 = [v2,v1];
const v4 = [v1];
let v6 = 2137143259;
function f8() {
    return v6;
}
class C9 {
    #b = f8;
    static get b() {
        try { v3.copyWithin(v6, v6, 303772425); } catch (e) {}
        class C14 {
        }
        new C14();
        const v16 = [3];
        const t16 = [-16,4294967297,-1728414155,-65536,16,-49207,536870889];
        t16.length = v16;
        const v19 = -24906 * 6.38427703877987e+307;
        --v6;
        Math.trunc(v19);
        const v22 = Math.imul(v19, 6.38427703877987e+307);
        Math.acosh(v19);
        Math.expm1(v19);
        return v22;
    }
    4096;
}
let v25 = new C9();
new C9();
new C9();
try {
    new BigInt64Array(13);
} catch(e31) {
}
try {
    new Float32Array(512);
} catch(e35) {
}
try {
    new Int16Array(3049);
} catch(e39) {
}
const v40 = [0.8709348737940914,726.5220338649585];
v40[Symbol.toPrimitive] = f8;
function f43(a44, a45) {
    %VerifyType(a45);
    return /BP1()Af/mdyi.exec(/Pa\9\118\c!/msd);
}
v40[Symbol.toPrimitive] = f43;
const v51 = [-1e-15,1e-15,-2.0,-625.0246966318889,405.6753440231114];
v51.constructor = Symbol;
const v52 = [5.0];
function f53(a54, a55) {
    const v58 = new BigUint64Array(1);
    v58[v58] = v58;
    return v52;
}
v52[Symbol.toPrimitive] = f53;
v52[Symbol.toPrimitive] = f43;
function f62(a63, a64) {
    function f65() {
        new Float32Array(Array(1639));
        try {
            Math.h = -65536;
        } catch(e74) {
        }
        v25++;
        v4 % v25;
        v25 >>> 255;
        return a63;
    }
    a63.constructor = f65;
    try { a63.map(f62); } catch (e) {}
    const o90 = {
        "arguments": v2,
        valueOf() {
        },
        "d": v1,
        "a": v40,
        ...v51,
        "b": a64,
        __proto__: a63,
        [a64]: v51,
        268435441: v40,
        ...a64,
        "d": a63,
        "e": v52,
        set g(a82) {
            [1e-15,0.42910311427000813,0.0,866.0612006138062];
            const v84 = [-0.0,-1000000000000.0];
            [784.0051522163478,-1000000000.0,3.2417869715692045e+307,-1000000000.0,706673.1140600892];
            -v52;
            for (let v87 = 0; v87 < 10; v87++) {
                v84["p" + v87] = v87;
            }
        },
    };
    o90[268435441];
    return o90;
}
const v92 = f62(v51, v51);
v92[268435441] = v92;
f62(v51, v40);
const v94 = f62(v52, v52);
[2.2250738585072014e-308,40136.53136108711,-1000000000000.0,-2.3906311860363016e+306,1.3928493589546562,1.0,-576943.842317109];
let v96 = [0.2806722000065328];
v96[Symbol.toPrimitive] = f43;
([-2.2250738585072014e-308,-5.625060103723023,-1000000.0,-278135.61216475733,1.0])[4];
class C100 {
    static {
        try {
            super.c = v52;
        } catch(e102) {
        }
        ++v96;
        const v104 = Symbol.iterator;
        Symbol.for(v104.description);
        const o123 = {
            [v104]() {
                let v108 = 10;
                const o122 = {
                    next() {
                        let v110 = v108--;
                        const v112 = v108 == 0;
                        const o121 = {
                            __proto__: Int16Array,
                            "arguments": v40,
                            get e() {
                            },
                            valueOf(a115, a116) {
                            },
                            "description": v112,
                            "value": v108,
                            /*
                            __proto__: f8,
                            */
                            "f": this,
                            p(a118, a119, a120) {
                                v110 = 3049;
                                return f62;
                            },
                        };
                        return o121;
                    },
                };
                return o122;
            },
        };
    }
}
const v124 = new C100();
const v125 = v124?.__lookupGetter__;
try { new v125(v124); } catch (e) {}
const v127 = new C100();
Object.defineProperty(v127, "constructor", { configurable: true, value: Symbol });
const v128 = v127?.constructor;
let v129;
try { v129 = new v128(); } catch (e) {}
new C100();
function f131() {
    return v94;
}
function f132(a133, a134) {
    a133.length;
    const o136 = {
        __proto__: a134,
    };
    o136.arguments = o136;
    return o136;
}
const v138 = f132(f132(f132, f132), f132);
function f139() {
    v52.length /= v129;
    return f131;
}
Float32Array(/\1(a)(a\1)*/svy);
async function f144(a145, a146, a147) {
    return "zFAcr";
}
v138.valueOf = f139;
const v148 = [-Infinity,-507.25926960893685,398.0348813664666];
try {
    v148.length = v138;
} catch(e149) {
    e149.stack;
}
