const v0 = [1000000000000.0,-331501.1638982545,-1000.0,-1.7976931348623157e+308,405692.98640605947,-6.477064496945488,530062.0095213081];
[3.826237806139234e+307,0.613335826078603,-2.220446049250313e-16,NaN,5.869586685397463];
const v2 = [5.0,NaN,555.2295222637827,76.34832261081624,1.0,1.0,-6.516764607365941,-0.0,0.5220548066636554,6.470627622925019];
try {
    new BigInt64Array(6);
} catch(e6) {
}
try {
    new Int32Array(1926);
} catch(e10) {
}
try {
    new Uint8ClampedArray(4096);
} catch(e14) {
}
class C15 extends Int32Array {
    static d = Uint8ClampedArray;
    static [Int32Array];
    static {
        try {
            v0.toString();
        } catch(e18) {
        }
    }
    [1926];
    static #c = v0;
    static [v0] = v2;
    g;
    2;
    static [1926];
}
new C15();
new C15();
const v21 = new C15();
class C22 extends BigInt64Array {
    static 5 = v21;
    n(a24, a25) {
        let v23 = this;
        const v26 = C15 << a25;
        try {
            v23 ||= v23;
            if (a25 !== a25) {
                const v32 = 5 & v26;
                v32 << 5;
                Math.sinh(v32);
                const v35 = !v26;
                v2 ^ v32;
                v2 / v35;
            } else {
                try {
                    v2[4] = a24;
                } catch(e38) {
                }
            }
        } catch(e39) {
        }
        return C15;
    }
    static g = v0;
    0;
    #b;
    static b;
    a;
}
new C22();
new C22();
new C22();
([0.7701751546226815,997125.4572624811,5.993688823759161e+307]).shift();
