let v0 = 1695;
try {
    new Uint32Array(v0);
} catch(e3) {
}
try {
    new Uint16Array(3459);
} catch(e7) {
}
(3459)[Uint16Array];
const v10 = [-0.0,8.89835973297862,-1.0331188227941132e+308,-618411.8741241085,-4.0,-4.0];
const v11 = [-701.4456881018202,521715.4739906539];
[-1000000.0,0.02073825717856348,-860885.6535148955];
const v13 = v10[1073741824];
let v14 = BigUint64Array;
try {
    new v14(68);
} catch(e16) {
}
let v17 = 693;
try {
    new BigInt64Array(v17);
} catch(e20) {
}
try {
    new BigUint64Array(76);
} catch(e24) {
}
try {
    new Int8Array(5);
} catch(e28) {
}
({"f":v0,"length":v14,} = v11);
try {
    v17 ||= v13;
} catch(e29) {
}
class C30 extends BigUint64Array {
    static {
        try {
            this[1] = this;
        } catch(e32) {
        }
    }
    constructor(a34, a35) {
        super(a34);
        const v37 = [3459];
        Reflect.construct(Int8Array, v37, v14);
        [NaN,-8.986672490213357e+307,548216.2262909622,1000000.0,-3.0];
        [NaN,1e-15];
        [-1000000000.0,1000000.0,4.0,4.8452011862774995,-918.08883930381,NaN,-2.220446049250313e-16,1114.8789572963724,-0.0,9.307449214228633];
        new BigUint64Array(v37, v17, 76);
    }
}
const v43 = new C30(76, v17);
try { new v13(v10, v43); } catch (e) {}
new BigUint64Array(76, 3459);
Math.tan(v43);
!0;
Math.expm1(v43);
~v43;
Math.abs(Uint16Array);
new C30(76, v0);
new C30(5, 3459);
class C56 extends Int8Array {
}
const v57 = new C56();
const o58 = {
    ...v57,
};
