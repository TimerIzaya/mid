const o3 = {
    "execution": "sync",
};
("665815241").normalize();
Object.defineProperty(Float64Array, 1, { writable: true, value: 134 });
try {
    const v8 = [3028];
    const v9 = [Int8Array,Int8Array];
    new Int8Array();
    class C12 extends Uint16Array {
    }
    function f13(a14) {
        "sync" >> a14;
    }
    function F19(a21, a22, a23) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e24) {
        }
    }
    const v25 = new F19(v8);
    try { v25.m(v9); } catch (e) {}
    new Float64Array(134);
} catch(e28) {
}
try { new Uint8Array(Float64Array, Uint8Array, 134); } catch (e) {}
const v32 = [36.672551722454045,-2.220446049250313e-16,-2.0,2.0,265.7401490824768,0.8681647091345572,396.04974613216586];
async function f33(a34, a35) {
    await v32;
    return v32;
}
f33();
try {
    const v39 = ("e").normalize();
    const v41 = Date();
    const o45 = {
        __proto__: 134,
        "b": v41,
        "g": Date,
        ..."e",
        p(a43, a44) {
            return v39;
        },
    };
    const v46 = new Uint8Array(2510);
    function F48(a50, a51) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v52 = new F48();
    function f54(a55, a56, a57) {
        const o69 = {
            12: a57,
            "a": a56,
            n(a59, a60, a61, a62) {
                return a59["trim"](this, v52, -1024n, "trim", a56);
            },
            m(a66, a67, a68) {
                return a68;
            },
        };
        return o69;
    }
    const v70 = f54();
    Object.defineProperty(v70, "c", { writable: true, value: v70 });
    ~1357473856;
    function f73(a74, a75, a76, a77) {
        const o81 = {
            p(a79, a80) {
                return -10;
            },
        };
        return o81;
    }
    v46[1645];
} catch(e83) {
}
const v85 = /BP1()Af/mdyi;
const v86 = /Pa\9\118\c!/msd;
const t78 = v85.exec(v86);
t78.a = v86;
new Int32Array(823);
function F91(a93) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v32;
}
for (let v94 = 0; v94 < 25; v94++) {
    continue;
}
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
let v95;
try { v95 = new Uint32Array(Uint32Array, Uint8Array, 134); } catch (e) {}
v95.valueOf = f33;
v95[2] = v95;
try {
    const v96 = new Uint32Array(823);
    function f97() {
        return v96;
    }
    class C98 {
    }
    const v99 = new C98();
    function f101() {
        return -9;
    }
    const o103 = {
        1073741823: undefined,
        7: v99,
        536870888: f101,
        0: -9,
    };
    const o104 = {
        ...o103,
    };
    Math.tan(1188195176);
} catch(e108) {
}
1000.0 >> 1000.0;
-615.8231615489947 - -615.8231615489947;
-(-615.8231615489947 >> -615.8231615489947);
new SharedArrayBuffer(512);
