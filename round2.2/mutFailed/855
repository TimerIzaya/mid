try {
    new BigInt64Array(10);
} catch(e3) {
}
try {
    new BigInt64Array(4);
} catch(e7) {
}
const v9 = -128 & -128;
try { new Int8Array(-128, 4, v9); } catch (e) {}
try {
    new Int8Array(-128);
} catch(e13) {
}
function F14(a16, a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    const v20 = this?.constructor;
    try { new v20(a18, a18, a19, this); } catch (e) {}
    a17 !== a17;
    a19 > a19;
    try {
        this.h = 4;
    } catch(e24) {
    }
}
const v25 = new F14(4, 10, BigInt64Array, 10);
const v26 = new F14(4, -128, BigInt64Array, -128);
new F14(-128, 4, v26, v26);
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(2, F31, a35, -114270477); } catch (e) {}
    a35 !== a35;
    this.b = 4;
    try {
        this.b = a35;
    } catch(e39) {
    }
}
F31.MAX_SAFE_INTEGER = Int8Array;
new F31(v26, 10, 4, v26);
new F31(v25, 4, -128, v26);
const v42 = new F31(v26, BigInt64Array, 4, v26);
v42.b = -13;
const v44 = [-0.0];
v44[0];
function f46(a47, a48) {
    ({"length":a48,} = v44);
    const o53 = {
        set f(a50) {
        },
        set d(a52) {
        },
    };
    return o53;
}
v44.toString = f46;
const v54 = [9011n];
try { v54.every(F14); } catch (e) {}
const v56 = [v44,v44,v44,v44];
const v57 = F14[v44];
try { v56.find(v57); } catch (e) {}
