4 == 4;
try {
    const v6 = new Int8Array(2);
    try { v6.toSorted(v6); } catch (e) {}
} catch(e8) {
}
512 ^ 512;
let v11 = 512 & 512;
v11 & v11;
const v13 = v11++;
try {
    const v15 = new Int16Array(512);
    v15[480] = v15;
} catch(e16) {
}
function f19(a20, a21) {
    let v22 = Int8Array;
    let v23 = 128;
    let v25 = new Set();
    const v28 = new Int32Array(2290);
    let v29 = Boolean;
    ({"b":v25,"byteLength":v23,"byteOffset":v22,...v29} = v28);
    return a20;
}
Uint16Array.toString = f19;
try {
    const v30 = new Uint16Array(3948);
    let v31;
    try { v31 = v30.reduceRight(v13); } catch (e) {}
    const v32 = v30?.toString;
    function f33() {
        return v31;
    }
    function f34(a35) {
        new WeakSet();
    }
    Object.defineProperty(v32, "e", { get: f33, set: f34 });
    v32.e = v32;
    try { new v32(); } catch (e) {}
} catch(e39) {
}
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    a42.toString = f19;
    Object.defineProperty(a43, "valueOf", { configurable: true, enumerable: true, value: f19 });
    a42 % a42;
    a44 >> a44;
    a45 >= a45;
    a43.prototype = a43;
    a44 >>> a44;
    const v50 = a42 + a42;
    v50 ^ v50;
    const v52 = a43.length;
    v52 >>> v52;
    v52 / v52;
    const v55 = a44 - a44;
    v55 - v55;
    try {
        this.c = Uint16Array;
    } catch(e57) {
    }
    try {
        this.h = 512;
    } catch(e58) {
    }
    try {
        this.d = 512;
    } catch(e59) {
    }
}
const v60 = new F40(3948, Int16Array, 2, -2);
const v61 = v60?.c;
v61[Symbol.toPrimitive] = f19;
try { new v61(v13, 2, v60); } catch (e) {}
const v65 = new F40(871786454, 3948, 2, v60);
const v66 = v65?.c;
try { new v66(v66, F40, v60); } catch (e) {}
let v68;
try { v68 = new v66(871786454, -2, 871786454); } catch (e) {}
v68.c = v60;
v68.c = v68;
new F40(F40, F40, 3948, Uint16Array);
const v70 = [5,38477,-9007199254740991,-1,256];
try { v70.copyWithin(v70, v70); } catch (e) {}
const v72 = v70.pop();
v72 ^ v72;
v72 + v72;
const v75 = v72 + v72;
v75 - v75;
