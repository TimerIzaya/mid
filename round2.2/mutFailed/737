const v7 = [-5.0,-2.0,-1.0];
new Int16Array(256 <= v7 ? 256 : v7);
const v13 = new Map();
const o16 = {
    get e() {
        return this;
    },
    "e": -40687n,
};
Date.UTC();
const o21 = {
    [2.2250738585072014e-308]: 2.2250738585072014e-308,
    set d(a20) {
    },
    "d": 2.2250738585072014e-308,
};
new WeakMap();
new Int32Array(949287958);
function f28() {
    return "setSeconds";
}
f28();
for (let v30 = 0; v30 < 25; v30++) {
    const o31 = {
    };
    try {
        o31.b = v13;
    } catch(e32) {
    }
    try {
        const o33 = {
        };
        o33.b = v13;
        o33.d = v30;
    } catch(e34) {
    }
    try {
        const o35 = {
        };
        o35.b = v13;
        o35.d = v30;
        const v36 = 268435441 && o35;
        v36[v30] |= v36;
        const v37 = v36[2667745267];
        try { v37(); } catch (e) {}
        continue;
        o35.g = v13;
    } catch(e39) {
    }
    try {
        const o40 = {
        };
        o40.b = v13;
        o40.d = v30;
        o40.g = Map;
    } catch(e41) {
    }
}
const v42 = [-Infinity];
[186.3492337993987,-186.09605509016842,1.0];
const v44 = [-0.0,-648192.6704695655,-1.7976931348623157e+308,1000.0];
o16.h = v13;
const v47 = [51641,9,1100370343];
try { v47.groupToMap(); } catch (e) {}
try {
    Uint8ClampedArray(5);
} catch(e52) {
}
try { v44.toReversed(); } catch (e) {}
const o58 = {
    __proto__: v13,
    [5]: 8,
    get b() {
        return Uint8ClampedArray;
    },
};
new WeakMap();
const v61 = [64,3,10,14,268435441,-321778196,33616,65536,-9007199254740991];
("object").split("function");
class C69 extends Int16Array {
    constructor(a71, a72, a73) {
        for (let v74 = 0; v74 < 32; v74++) {
            this["p" + v74] = v74;
        }
        super();
        this.copyWithin(a73, a72);
    }
}
new C69(4096, 4096, 3116);
v61.unshift(255);
const t89 = 0n;
t89[0n] = 268435456;
("object").link([]);
try {
    new Proxy(v42, o58);
} catch(e87) {
    const t96 = Date.bind();
    t96();
    class C90 {
        static p(a92, a93, a94) {
            const v96 = Symbol.iterator;
            const o105 = {
                [v96]() {
                    let v98 = 10;
                    const o104 = {
                        next() {
                            v98--;
                            const v102 = v98 == 0;
                            const o103 = {
                                "done": v102,
                                "value": v98,
                            };
                            return o103;
                        },
                    };
                    return o104;
                },
            };
            return v61;
        }
    }
    function f106() {
        return f106;
    }
}
let v107 = 10 % 8;
8 ** v107--;
