try {
    new BigUint64Array(4096);
} catch(e3) {
}
Int32Array.BYTES_PER_ELEMENT;
try {
    const v7 = new Int32Array(2);
    let v8;
    try { v8 = v7.join(Int32Array); } catch (e) {}
    try { v8.strike(); } catch (e) {}
} catch(e10) {
}
let v11 = 678;
v11++;
const v13 = v11 <= v11;
v13 && v13;
try {
    new Int16Array(v11);
} catch(e17) {
}
function f18(a19, a20, a21, a22) {
    a22 - a22;
    a20++;
    a21.length = a21;
    const o25 = {
        ...a21,
        "f": 4096,
        "e": 2,
        "b": a20,
        ...a20,
        "d": BigUint64Array,
        ...a20,
        [BigUint64Array]: a21,
        "g": Int16Array,
        "h": v11,
    };
    o25.e = o25;
    return o25;
}
f18.caller = f18;
const v26 = f18(4096, v11, Int16Array, v11);
const v27 = f18(4096, Int32Array, v11, v11);
v27.e = v27;
f18(4096, v11, v26, 4096);
-1024;
try { Uint8Array.bind(1024); } catch (e) {}
class C37 {
    static {
        try { new this(); } catch (e) {}
        const v40 = this.name;
        v40[1] = v40;
        for (const v41 in this) {
        }
    }
}
C37.prototype = C37;
let v42;
try { v42 = new C37(); } catch (e) {}
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
