try {
    new Int32Array(7);
} catch(e3) {
}
let v4 = 255;
try {
    new BigInt64Array(v4);
} catch(e7) {
}
try {
    new BigInt64Array(1315);
} catch(e11) {
}
class C18 extends BigInt64Array {
    p(a20, a21, a22, a23) {
        try {
            v4 &&= v4;
        } catch(e24) {
        }
        return Int32Array;
    }
    1 = 1.0;
    static #toString(a26, a27, a28, a29) {
        delete this[1894767853];
        for (let v31 = 0; v31 < 32; v31++) {
            this["p" + v31] = v31;
        }
        return -3.0;
    }
}
new C18();
new C18();
new C18();
function f37() {
}
f37();
const v39 = f37();
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(); } catch (e) {}
    new Int16Array(4096);
    new Uint16Array();
    new F43();
}
const v57 = new F43();
new v57(v39, -4096);
