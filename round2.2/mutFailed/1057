function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        class C3 {
        }
        return C3;
    }
    this.toString = f2;
    try {
        this.d = 1969058686;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
Object.defineProperty(v8, "h", { writable: true, configurable: true, value: v8 });
v8.h = v8;
class C9 {
    b;
    static #c;
    static n(a11) {
        try {
            new F0();
        } catch(e13) {
        }
        return v7;
    }
    static #b;
    [v6] = v7;
    static #f = F0;
}
C9.length = C9;
new C9();
new C9();
new C9();
9 >>> 9;
try {
    const v20 = new Uint8ClampedArray(9);
    try { v20.lastIndexOf(C9); } catch (e) {}
} catch(e22) {
}
let v23 = 2;
v23--;
try {
    new Uint16Array(v23);
} catch(e27) {
}
Int8Array.name;
try {
    new Int8Array(2);
} catch(e32) {
}
new Uint8ClampedArray(1760718952);
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    function f40(a41) {
        return -848.4493815107203;
    }
    this.constructor = f40;
    try { this.constructor(a39, Int8Array); } catch (e) {}
    const v46 = this.constructor;
    try { new v46(v46, v46, v46, a38, Uint8ClampedArray); } catch (e) {}
    try { this.__defineGetter__(); } catch (e) {}
}
const v49 = new F36();
const v50 = v49?.toLocaleString;
try { new v50(); } catch (e) {}
