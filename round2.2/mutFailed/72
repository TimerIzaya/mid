BigUint64Array < BigUint64Array;
function f4(a5, a6, a7, a8) {
    const o14 = {
        valueOf(a10, a11, a12) {
            arguments[536870887] = -9223372036854775807;
            return f4;
        },
    };
    return o14;
}
const v15 = f4(f4, -9223372036854775807, f4, f4);
let v16 = f4(v15, v15, -9223372036854775807, v15);
v16 %= v15;
Int16Array();
gc();
class C23 {
}
function f24() {
    return 8n;
}
const o28 = {
};
6475n << 10n;
class C35 {
}
const v36 = [-57523,2];
try {
    Float64Array(v36, 39, 138);
} catch(e41) {
}
[15n];
["length","length",8n,"length"];
Math.atan2(-1999, 5.430720508079137);
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a52;
}
["-9",15n,f24];
function f56() {
}
class C57 {
    set c(a59) {
        let v60 = g;
        try {
            v60 = a59;
        } catch(e61) {
        }
    }
    static 3434762103 = f56;
    [f56] = f56;
    3;
    static e = f56;
    static 2097426201;
    #c = f56;
    d;
}
const v62 = new C57();
const v63 = new C57();
const v64 = new f24(v62);
const v65 = new f24(v63);
const v66 = [53026,4294967296,-3,-34947,10,6,10000];
const v67 = [51641,9,1100370343];
let v68;
try { v68 = v67.groupToMap(v64); } catch (e) {}
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    this?.__lookupGetter__;
    new f24(a71);
    const v75 = a71.__defineSetter__;
    try { v75(this, v68); } catch (e) {}
    const t70 = a71.constructor;
    new t70(v62);
}
new F69(v65, v66);
new Float64Array([-16,268435440,4096,10,-39568]);
const t75 = "4qJjo";
t75["-9007199254740992" + 4294967297] = 4294967297;
function F87() {
    if (!new.target) { throw 'must be called with new'; }
}
if (F87 >= Uint16Array) {
}
