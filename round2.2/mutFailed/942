const v3 = [0.5429402889330733,0.5429402889330733,1000000000000.0];
const v4 = [0.5429402889330733];
[1000000000000.0,v4,v3,v4,v3];
let v7 = 2;
v7 >>> v7;
const v9 = v7--;
10212 != 10212;
try {
    const v14 = new Float64Array(14);
    v14[3];
} catch(e16) {
}
3416 & 3416;
BigUint64Array.g = BigUint64Array;
try {
    const v20 = new BigUint64Array(3416);
    const v21 = v20[3305];
    v21 % v21;
    v20[v21];
    try {
        v4.length = 0;
    } catch(e25) {
    }
    const o31 = {
        ..."function",
        ..."resizable",
        get c() {
            return this;
        },
        set c(a30) {
        },
    };
} catch(e32) {
}
const o36 = {
    "maxByteLength": 512,
};
const v38 = new ArrayBuffer(1, o36);
try {
    new BigInt64Array(v38);
} catch(e41) {
}
try { BigUint64Array.bind(v7); } catch (e) {}
try {
    new BigUint64Array(8);
} catch(e46) {
}
-(-7n);
const v50 = -7n ^ -7n;
v50 % v50;
-2147483648n + -2147483648n;
-2147483648n != -2147483648n;
let v55 = 4294967295n;
v55--;
WeakMap.prototype = WeakMap;
const v58 = /[^a\DQnb*]/mgsyi;
try { v58.compile(v9); } catch (e) {}
try {
    new Uint8Array(4);
} catch(e63) {
}
try {
    new Int32Array(1000);
} catch(e67) {
}
try { new Uint32Array(Float64Array, BigInt64Array, -256); } catch (e) {}
try {
    new Uint32Array(1024);
} catch(e72) {
}
