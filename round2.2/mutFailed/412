function f2(a3, a4) {
    new Date(-1.0, 1.2810869768167568e+308, -1.0);
    return 903;
}
Object.defineProperty(Int16Array, "toString", { configurable: true, value: Int16Array });
try {
    new Int16Array(903);
} catch(e10) {
}
try {
    new Int32Array(194);
} catch(e14) {
}
let v16 = Uint16Array;
Object.defineProperty(v16, Symbol.toPrimitive, { value: 903 });
const v20 = Int16Array & Int16Array.f;
v20 >= v20;
Symbol?.[1];
try {
    v16 += 903;
} catch(e23) {
}
try {
    new v16(1);
} catch(e25) {
    const v26 = [57303,536870912];
    v26[255] = v26;
    for (let v27 = 0; v27 < 25; v27++) {
    }
    v26[255];
}
[2147483649,5,1,268435456,1826480646];
[65536,2147483649,-60516,9007199254740992,65536,25849];
[-39497,2,-2147483648];
[-1e-15,-Infinity,1.7976931348623157e+308,-0.0,5214.892501421738,154411.50031382125,-1000000000000.0];
[135702.95244831895,0.36019437750828276,-4.0,NaN,3.095540437253014];
const v34 = [-689847.4676442582,2.0,0.877156948723454,NaN,869204.6789249575,-1.2253953368215058e+306,3.8955596076365566];
class C39 extends Int16Array {
    constructor(a41, a42, a43) {
        super();
        this.copyWithin(4096, a42);
    }
}
new C39(4096, 4096, v34);
Math.pow(128, 128);
Math.atanh(128);
