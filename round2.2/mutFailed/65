let v2 = "-5";
class C3 {
    p(a5) {
        ({"b":a5,"f":a5,} = a5);
        Object.defineProperty(v2, "b", { configurable: true, value: a5 });
        try {
            v2 += a5;
        } catch(e6) {
        }
        return -794113989;
    }
    static 255;
    static [v2] = v2;
    #a = -4;
    static 1024 = -794113989;
}
C3.prototype = -4;
const v7 = new C3();
v7?.constructor;
try { new v7(); } catch (e) {}
new C3(v2, -4, -794113989);
new v2();
class C15 extends C3 {
    #valueOf(a17, a18, a19, a20) {
        const v21 = a20[5];
        try {
            v21.__proto__ = C3;
        } catch(e22) {
        }
        Math.abs(a17);
        a17--;
        a17 | -4294967296;
        return a18;
    }
}
C15.prototype = C15;
new C15();
new C15();
const v32 = new C15();
const v33 = v32?.constructor;
try { new v33(); } catch (e) {}
const v35 = [-2.2250738585072014e-308,1.5867612318974208e+308,-1.5401430863213223e+308,-66487.31988072337,-8.274702295136258,-3.0,1000000.0];
try { v35.toString(); } catch (e) {}
[0.0,1000000000000.0,5.871102751589657,-2.0,-2.2250738585072014e-308,-311.5750106328277,1.0];
v35.__proto__ = Reflect;
v35.f = v7;
