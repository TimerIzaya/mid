let v0 = [-4.741740869989048,3.3667469982802967,1.7976931348623157e+308];
const v1 = [364251.35543686384,-Infinity,8.227597855546831e+307,1000000000000.0,-4.0,-9.544167975993464,1000000000.0,-408.9735305728897];
const v2 = [5.029279758887082,-1.7976931348623157e+308,-2.2250738585072014e-308,1000000000.0];
class C3 {
    constructor(a5, a6) {
        try { this.resolve(a5, a5, v1, a6); } catch (e) {}
        const v9 = v2["push"](a5, a6);
        v9 >> v9;
        try {
            v0 *= v1;
            class C11 {
                set c(a13) {
                    for (const v17 in Array(16)) {
                    }
                    const v18 = (a19, a20, a21) => {
                        function F22(a24, a25, a26, a27) {
                            if (!new.target) { throw 'must be called with new'; }
                        }
                        return this;
                    };
                }
            }
            const v28 = C11?.constructor;
            try { new v28(this); } catch (e) {}
        } catch(e30) {
        }
    }
    3024 = v1;
    static p(a32, a33) {
        switch (a33) {
            default:
                break;
        }
    }
    static #a = v1;
    b = v2;
    static [v0] = v0;
}
new C3(v0, v2);
const v35 = new C3(v1, v2);
const v36 = v35?.constructor;
try { new v36(C3, C3); } catch (e) {}
const v38 = new C3(v2, v1);
v38[3024] = v38;
class C39 extends C3 {
    0 = v0;
    static 2418 = v1;
    static #a;
    get a() {
    }
    constructor(a42) {
        try {
        } catch(e43) {
        }
    }
    static #h;
    static #p(a45, a46) {
        let v47 = 0;
        do {
            Reflect.construct(C3, [v2,v2], C3);
            v47++;
        } while (v47 < 8)
        return v47;
    }
}
C39[2418] = C39;
const v54 = new C39();
new C39();
const v56 = new C39();
v56[3024];
class C58 extends C39 {
    static #m(a60, a61) {
        function F63(a65, a66, a67) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = Uint32Array;
        }
        const v68 = new F63(Uint32Array, Uint32Array, Uint32Array);
        for (const v69 in v68) {
        }
        Math.tan(this);
        Math.expm1(C3);
        -12 >>> this;
        Math.cbrt(this);
        return v1;
    }
    2 = C39;
    b = v54;
    #g;
    #c = v35;
    constructor(a77, a78, a79, a80) {
        super();
        try {
            super.o();
        } catch(e82) {
        }
    }
}
try { new C58(); } catch (e) {}
const v84 = new C58();
v84[2];
new C58();
new C58();
const v88 = [3];
const v89 = v88?.filter;
try { new v89(v38); } catch (e) {}
const v91 = [-16,4294967297,-1728414155,-65536,16,-49207,536870889];
v91[6] = v91;
v91.length = v88;
