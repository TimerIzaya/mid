let v2 = "bigint";
class C3 {
    static h;
    m(a5, a6) {
        return a6;
        const v7 = a6 & this;
        try {
            v2 = this;
        } catch(e8) {
        }
        return v7;
    }
    h = 5.97233380129458;
    ["undefined"];
    c = "undefined";
}
const v9 = new C3(5.97233380129458, v2);
const v10 = new C3();
const v11 = new C3();
const v12 = v11?.constructor;
try { new v12(); } catch (e) {}
Map.name = Map;
new Map();
Array.length = Array;
const v18 = new Array(-6);
const v19 = [1000000000.0,910007.0410135388,186549.7701476633,0.9729401674706774,456.343564504057,-5.965402839398157,348.52581428984513];
v19[3] = v19;
const v20 = [0.44411536418095454,-7.944598685196036e+307,-2.220446049250313e-16,2.2250738585072014e-308,-648.542911719821,240665.43383913464,979.1027738019498];
const v21 = [-346.8826951088413,2.0,3.821943895966655e+307,-5.0,-1000000000.0,9.778791642394062];
function f22() {
    function f27() {
        return "POSITIVE_INFINITY";
    }
    let v29 = -3;
    v29--;
    const o35 = {
        __proto__: 1000,
        [v29](a32) {
            this.fuck(false);
        },
    };
    o35.e = o35;
    return 3;
}
function F36(a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this?.constructor;
    try { new v39(v9); } catch (e) {}
    try { a38(v10); } catch (e) {}
}
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this?.__defineGetter__;
    try { new v47(F42, a44); } catch (e) {}
    const v49 = a46?.groupToMap;
    try { new v49(a44); } catch (e) {}
    try {
        this.d = v21;
    } catch(e51) {
    }
    try {
        this.hasInstance = a44;
    } catch(e52) {
    }
}
try { new F42(v21, v18, 5.97233380129458); } catch (e) {}
new F42(v20, v19, v20, -6, "undefined");
const v55 = new F42(v21, v19, v21);
v55.length = v55;
new F42(v20, v19, v2);
const v57 = new F36(F36);
class C58 extends f22 {
    static get f() {
        f22();
    }
}
const v61 = new C58();
const v62 = v61?.constructor;
try { new v62(); } catch (e) {}
let v64;
try { v64 = v61.getUint8(); } catch (e) {}
v57.a /= v57 === v64 ? v57 : v64;
