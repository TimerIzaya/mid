const v0 = [];
const v1 = [5,-9223372036854775807,268435456,-189238032,1073741825];
[10,-17057,536870887,2147483649,129,932071944,1042888912,7,257,536870887];
[2147483647,-6,-536870912,-1,4294967296,2147483649,2,268435440];
function f4() {
    return v0;
}
const v5 = /[A+]/gvi;
const v6 = /a|bc/mgsdv;
v6[Symbol.toPrimitive] = f4;
let v9 = /a\s/sdvy;
v9[Symbol.toPrimitive] = Symbol;
try {
    new Uint8Array(3);
} catch(e15) {
}
let v16 = 0;
do {
    -v6;
    new f4();
    v16++;
} while (v16 < 3)
try {
    new Uint8ClampedArray(3);
} catch(e25) {
}
try {
    new BigInt64Array(127);
    f4();
    v9 | v0;
    (-802131.1369220776) ** 4294967297;
    v9++;
} catch(e37) {
}
const v39 = [[f4,BigInt64Array],f4,v1];
const v40 = [BigInt64Array,3,3];
class C44 {
    constructor(a46) {
        function F47(a49) {
            if (!new.target) { throw 'must be called with new'; }
            this.g = v39;
            this.g = a46;
        }
        const v50 = new F47();
        new F47(v50);
        new F47(this);
    }
    static #n(a54, a55) {
        f4();
        a55 ** this;
        for (let v58 = 0; v58 < 32; v58++) {
            v5["p" + v58] = v58;
        }
        return v40;
    }
}
new C44();
new C44(32906);
new C44();
class C64 extends C44 {
}
new C64();
