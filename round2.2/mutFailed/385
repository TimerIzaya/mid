const v0 = [-0.0,-8.525389179569794e+307,1e-15];
const v1 = [-4.0,0.130602811578581,0.24512436825304817,Infinity,348399.27272230084,273.4955187480009,1.7976931348623157e+308,-3.0,136.4693810585252];
const v2 = [1.320611307259355e+308,3.0,Infinity,577.4814122082109,-2.0,-5.0,-5.096236189398136,0.0,NaN,0.8945374734026872];
const o4 = {
    ..."copyWithin",
};
let v5;
try { v5 = o4.hasOwnProperty(v1); } catch (e) {}
delete o4[3];
let v7 = 16;
const o8 = {
};
try {
    o8.f = v7;
} catch(e9) {
}
try {
    const o10 = {
    };
    o10.f = v7;
    o10.b = "copyWithin";
} catch(e11) {
}
try {
    const o12 = {
    };
    o12.f = v7;
    o12.b = "copyWithin";
    o12.h = v7;
} catch(e13) {
}
try {
    const o14 = {
    };
    o14.f = v7;
    o14.b = "copyWithin";
    o14.c = v5;
} catch(e15) {
}
v7++;
function f19() {
    return v0;
}
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    a22 - a22;
    a23--;
    a25 / a25;
    this.f = a22;
    try {
        this.f = a22;
    } catch(e29) {
    }
}
const v30 = new F20(v7, 732004718, v1, v7);
const v31 = v30?.constructor;
try { new v31(v30, v30, f19, v30); } catch (e) {}
new F20(v7, v7, v2, v7);
const v34 = new F20(-7, -7, v2, v7);
v34.b = v34;
function f35() {
    return f35;
}
const v36 = /Fa(?=bbb|bb)c/msdu;
v36.hasIndices = v36;
const v38 = Symbol.iterator;
class C40 extends v38.constructor {
    79 = "copyWithin";
    [v31];
}
new C40();
v36[v38] = f35;
Object.defineProperty(v36, 2147483647, { enumerable: true, set: f35 });
