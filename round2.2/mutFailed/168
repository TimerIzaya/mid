class C3 {
    static o(a5, a6) {
        try {
            super[7.5963838984453105] = a6;
        } catch(e7) {
        }
        try {
            this[255] = a5;
        } catch(e8) {
        }
        return 7.5963838984453105;
    }
    h = -22641;
    static #b;
}
function f9(a10, a11) {
    a11?.[268435441];
    const o16 = {
        "execution": "async",
        "type": "minor",
    };
    return gc(o16);
}
C3.toString = f9;
const v18 = new C3();
const v19 = new C3();
new C3();
const v23 = new Array(2);
class C24 {
    78;
    7 = C3;
    static #h = v23;
    static [C3];
    o(a26, a27, a28) {
        function F29(a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a32;
            } catch(e33) {
            }
            try {
                this.a = this;
            } catch(e34) {
            }
        }
        const v35 = new F29(v18, a27);
        new F29(v35, a27);
        new F29(7.5963838984453105, v19);
        return 63273;
    }
}
new C24();
new C24();
new C24();
function f41() {
}
%OptimizeFunctionOnNextCall(f41);
f41();
