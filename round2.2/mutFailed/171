const v0 = /abc/gsuyi;
const v1 = /4c?/syi;
const v2 = /[\c~]/gi;
function f3() {
    return v2;
}
const v4 = [6,-4294967296,257,-1073741824,6,14318,4294967295,1818805358];
const v5 = [268435441,9,1073741824,745329945,-268435456,-35951,-20864];
const v6 = [-950,-46020,13,9833,65536,1024,-9007199254740990,268435439,-787320083];
function f7() {
    return v4;
}
("number")[-1];
const v10 = [50026,4294967296,-7,-4294967296,-10344,12];
const v11 = [1,-2147483649,-9007199254740991,-16529,255,9];
class C12 {
    constructor(a14, a15, a16, a17) {
        for (let v18 = 0; v18 < 25; v18++) {
            a15["p" + v18] = v18;
        }
        a15.__proto__ = this;
    }
}
new C12(v10, v11);
function f22(a23, a24, a25, a26) {
    a23 >= f22 ? a23 : f22;
    const o54 = {
        "d": v4,
        "a": v6,
        __proto__: v4,
        "e": a23,
        set c(a33) {
            function f34(a35, a36, a37, a38) {
                const o39 = {
                    2147483649: a35,
                    [this]: f3,
                };
                return v2;
            }
            function F40(a42, a43) {
                if (!new.target) { throw 'must be called with new'; }
            }
            [3870,268435439,Uint8ClampedArray];
            f22(v2, f34(v0, v0, v0, a33), f3, super.a);
            try {
                v5.valueOf = f34;
            } catch(e51) {
            }
            f34(v1, a23, a23, a24);
            f34(v1, v1, v1, a23);
        },
    };
    return o54;
}
f22(f7, v5, v6, f22);
f22(v5, v5, v4, v5);
f22(v4, v6, v5, v2);
BigInt64Array % 9317n;
class C64 {
    [2n];
    409785783;
}
new C64();
for (let v67 = 0; v67 < 25; v67++) {
    const o70 = {
        "execution": "undefined",
    };
    %OptimizeFunctionOnNextCall(129);
    v5["includes"](1476267710n, "valueOf");
    gc(o70);
}
