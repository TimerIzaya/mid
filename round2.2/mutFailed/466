function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 2147483647;
        class C4 extends BigUint64Array {
        }
        try {
            Proxy();
        } catch(e7) {
            e7.c = e7;
        }
    } catch(e8) {
        [/\x01?/gy] & 2147483647;
        new Set();
    }
    try {
        this.a = 2147483647;
    } catch(e14) {
    }
}
try {
    new BigInt64Array(BigInt64Array);
} catch(e17) {
}
const v18 = new F0();
for (const v19 of BigInt64Array) {
    v18.f;
}
let v21;
try { v21 = BigInt64Array(v18, v18, v18); } catch (e) {}
try { v21.toString(); } catch (e) {}
const v23 = new F0();
const v24 = new F0();
v24.b = v24;
function f25(a26, a27) {
    const v28 = a27?.constructor;
    try { new v28(); } catch (e) {}
    const o68 = {
        [a27](a31, a32) {
            let v33 = 0;
            while (v33 < 3) {
                [NaN,-624.8912330709209,-2.2250738585072014e-308];
                function F37() {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.g = -478330941;
                        let v41 = Symbol.replace;
                        try {
                            v41 += v41;
                        } catch(e42) {
                        }
                    } catch(e43) {
                    }
                    try {
                        ~-15;
                        function f48(a49) {
                            const o57 = {
                                "h": "56495",
                                "e": a49,
                                get a() {
                                    Object.defineProperty(a49, a49, { configurable: true, value: this });
                                    let {"e":v51,"h":v52,...v53} = this;
                                    for (let v54 = 0; v54 < 5; v54++) {
                                        const t63 = "object";
                                        t63["p" + v54] = v54;
                                    }
                                    return v53;
                                },
                                __proto__: "object",
                                ["56495"]: "56495",
                                "a": a49,
                            };
                            return o57;
                        }
                        const v59 = f48(f48("56495"));
                        const o60 = {
                            "e": "object",
                            ...v59,
                        };
                        this.f = -478330941;
                    } catch(e61) {
                    }
                    try {
                        this.e = -478330941;
                        try {
                            v24.g = this;
                        } catch(e62) {
                        }
                        delete this[6];
                    } catch(e64) {
                    }
                }
                [-2.2250738585072014e-308,4.0,-7.944223214571247,-741.9046288699169];
                [125.51886437584312,-574828.4361693297,0.7975948620813016,NaN,-2.0];
                v33++;
            }
            return v23;
        },
    };
    o68.c = o68;
    return o68;
}
const v70 = f25(v24, f25(v23, v24));
const v71 = v70?.__lookupGetter__;
try { new v71(v70); } catch (e) {}
const v75 = ("o").lastIndexOf(-9223372036854775808);
for (let i = 0; i < 5; i++) {
    ("4").length;
    for (let v78 = 0; v78 < 5; v78++) {
        v78 + v78;
    }
}
-2036353315 * -2036353315;
const v83 = -2036353315 % v75;
const v85 = [v83];
try { v85.pop(); } catch (e) {}
const v87 = Reflect.construct(Date, v85);
try { v87.setFullYear("4", v83, v83); } catch (e) {}
f25(F0, F0);
const v90 = /u(?:a*)+/v;
v90.f = v90;
const v91 = /pja{1,2}?/gsuyi;
v91.e = v91;
const v92 = /p/dv;
function f93() {
    return v92;
}
const v95 = Map?.constructor;
const o98 = {
    "maxByteLength": 8,
};
const v100 = new SharedArrayBuffer(8, o98);
try {
    new DataView(v100);
} catch(e103) {
}
try { new v95(Reflect); } catch (e) {}
new Map();
const v106 = [-298.1668328507119,-843.0302065352809,-2.0,-4.0,-4.0];
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v109 = new Float32Array(v106);
const v110 = new Float32Array();
const v111 = v110.join(v109);
try { v111.padEnd(f25); } catch (e) {}
