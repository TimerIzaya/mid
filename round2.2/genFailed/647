const v0 = [-33512,12,9];
const v1 = [1451529637,13,536870888];
const v2 = [1730666741,57319];
new WeakMap();
class C8 extends WeakMap {
    constructor(a10, a11, a12) {
        super(v2);
        try {
            super.a = -1.1106966387991027e+308;
        } catch(e13) {
        }
        let v15 = -33456;
        Math.atan2(v15, this);
        --v15;
        WeakMap && WeakMap;
        Math.cosh(WeakMap);
    }
    [WeakMap] = -1.1106966387991027e+308;
    #d;
}
const v20 = new C8(-1000000.0, v0, v2);
new C8(-1.1106966387991027e+308, v1, v1);
new C8(WeakMap, v0, v1);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a25;
    } catch(e27) {
    }
    try {
        this.a = a25;
    } catch(e28) {
    }
    try {
        this.g = v20;
    } catch(e29) {
    }
}
new F23(-1.1106966387991027e+308, v0);
const v31 = new F23(-1.1106966387991027e+308, v2);
new F23(-1.0076504698944842e+308, v0);
function f33(a34) {
    function f36(a37) {
        try {
            C8[8] = a37;
        } catch(e38) {
        }
    }
    this.onmessage = f36;
    new WeakMap(v31);
    delete v20[10];
    this[Symbol.toPrimitive] = v2;
}
const v45 = [f33];
const o46 = {
    "arguments": v45,
    "type": "function",
};
new Worker(f33, o46);
