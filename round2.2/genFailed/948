function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1;
    } catch(e3) {
    }
    try {
        this.e = 1;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f11() {
    return 10000n;
}
const v12 = [v5];
const v14 = [[v6,v12,f11,257n]];
class C18 {
    d = v14;
    94;
    #p(a20, a21, a22, a23) {
        const o27 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o27);
        return 1736040465;
    }
    static 536870912 = f11;
    12;
}
const v29 = new C18();
new C18();
new C18();
let [] = v14;
try {
    v7.fuck(v29, -1424360170);
} catch(e33) {
}
10000n >> -4294967296;
try { f11(...-4294967296, v7, ...v6, C18); } catch (e) {}
Object.defineProperty(v12, "f", { configurable: true, enumerable: true, get: f11, set: f11 });
const o36 = {
    "call": f11,
    "construct": f11,
    "defineProperty": f11,
    "deleteProperty": f11,
    "get": f11,
    "getOwnPropertyDescriptor": f11,
    "isExtensible": f11,
    "ownKeys": f11,
    "preventExtensions": f11,
    "set": f11,
    "setPrototypeOf": f11,
};
try {
    new Proxy(v6, o36);
} catch(e39) {
}
