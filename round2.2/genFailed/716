class C3 {
    constructor(a5) {
        this["f"];
        Object.defineProperty("5", a5, { writable: true, configurable: true, enumerable: true, value: "5" });
        try {
            this[-2] = -3;
        } catch(e10) {
        }
    }
    9;
    e = -9223372036854775807;
    ["5"] = "f";
    3 = -9223372036854775807;
}
const v11 = new C3("5");
const v12 = new C3(v11);
const v13 = new C3(-9223372036854775807);
class C17 extends C3 {
    static set f(a19) {
        this && a19;
        const o21 = {
        };
        try {
            new Proxy("f", o21);
        } catch(e24) {
        }
    }
    h;
    static 127;
    [C3];
    #b = -9223372036854775807;
    ["UP"] = "UP";
}
const v25 = new C17();
const v26 = new C17();
const v27 = new C17();
/x(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/mguyi;
const v29 = /8sa{0}/dyi;
const v30 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\11/di;
function f31(a32, a33, a34) {
    function f36(a37) {
        try { a37.toString(v25, a37); } catch (e) {}
        try { new a34(v12); } catch (e) {}
    }
    this.onmessage = f36;
    v30[v27] ^= a33;
    try {
        v13[v13] = a32;
    } catch(e40) {
    }
}
const v43 = [v29,"function",v26];
const o44 = {
    "arguments": v43,
    "type": "function",
};
new Worker(f31, o44);
