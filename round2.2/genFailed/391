const v0 = /a?\xe2\x81\xa3?/mgsi;
let v1 = /0(\1a)b/gsuy;
const v2 = /Fk+/mi;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v0;
    } catch(e6) {
    }
    try {
        this.e = v0;
    } catch(e7) {
    }
}
const v8 = new F3(v0);
new F3(v2);
const v10 = new F3(v2);
let v13 = 247965.69659125828;
class C14 extends F3 {
    #n(a16, a17) {
        let v21 = a17[-1];
        ({"dotAll":v21,"source":v1,"unicode":v21,...v13} = a16);
        return v0;
    }
    get b() {
        try {
            v1[3105414164] = v8;
        } catch(e23) {
        }
        v8 / 662876.2711727377;
        return F3;
    }
}
const v25 = new C14();
new C14();
const v27 = new C14();
class C28 {
    e = F3;
    static set b(a30) {
        delete this[4096];
        try {
            super.acosh(v13);
        } catch(e33) {
        }
    }
    get c() {
        const v35 = [-Infinity];
        const v36 = [-7.826482598714259e+306];
        [1.0];
        try { v13["toString"]("toString", this, v35); } catch (e) {}
        try {
            v36["toString"] = "toString";
        } catch(e40) {
        }
        return v10;
    }
}
const v41 = new C28();
new C28();
new C28();
for (const v44 of v25) {
    Object.defineProperty(v27, v44, { value: v41 });
    v25.b |= 662876.2711727377;
    for (let v45 = 0; v45 < 32; v45++) {
        v25["p" + v45] = v45;
    }
}
try {
    v8.fuck(undefined, v0);
} catch(e50) {
}
