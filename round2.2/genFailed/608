const v0 = [0.0,-1.7976931348623157e+308,-1.621238124131103e+308,-125.0025960828674];
const v1 = [-1000.0,0.8001788671396035,854821.8911972116,-4.0,0.47706517682925165];
const v2 = [NaN];
class C3 {
    static o(a5, a6) {
        try {
            super.f = v2;
        } catch(e7) {
        }
        return a6;
    }
    static #e = v0;
    #b;
    3 = v1;
}
const v8 = new C3();
const v9 = new C3();
new C3();
const v12 = new Map();
class C13 {
    static 15 = v0;
    [v8] = v0;
    m(a15, a16, a17, a18) {
        function f19(a20) {
            function f22(a23) {
                try {
                    v1.f = Map;
                } catch(e24) {
                }
            }
            this.onmessage = f22;
            try {
                f22(a18);
            } catch(e26) {
            }
        }
        const v29 = ["function"];
        const o30 = {
            "arguments": v29,
            "type": "function",
        };
        new Worker(f19, o30);
        return v29;
    }
}
let v32 = new C13();
const v33 = new C13();
const v34 = new C13();
try {
    v32 = v33;
} catch(e35) {
}
const v36 = v2;
if (v12 == v9) {
    const v39 = [C3,v2,C13];
    Reflect.apply(v34.m, v9, v39);
} else {
    v33[3];
    new Map(v9);
}
