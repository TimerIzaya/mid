try {
    new Int8Array(3871);
} catch(e3) {
}
try {
    new Uint8ClampedArray(3698);
} catch(e7) {
}
try {
    new BigUint64Array(1024);
} catch(e11) {
}
class C15 extends Int8Array {
    static #n(a17, a18) {
        this[5];
        4n >> -1827508002n;
        return 4n;
    }
    constructor(a22, a23, a24, a25) {
        super(a23, 1024, 3698);
        try {
            this[9] = a25;
        } catch(e26) {
        }
    }
    [Int8Array] = 268435439n;
    static 6 = 3698;
}
const v27 = new C15(-1827508002n, 1024, -1827508002n, 3698);
const v28 = new C15(268435439n, 3871, 4n, 3698);
const v29 = new C15(-1827508002n, 3871, 268435439n, 3698);
class C30 extends Int8Array {
    d;
    static #g;
    constructor(a32, a33, a34) {
        super(a33, 3698, 3698);
        try {
            v29.#g;
        } catch(e36) {
        }
    }
    9;
    [-1827508002n];
    3147 = v27;
    c = v28;
    255 = v28;
}
const v37 = new C30(-1827508002n, v28, 4n);
new C30(-1827508002n, v27, -1827508002n);
new C30(268435439n, v37, -1827508002n);
const v40 = [1308399157,328925543,7];
const v41 = [10,1000,-5,-4294967296,-32541,-2147483648];
const v42 = [-1979759780,1080781369,1021367504,-1379094181,9,-14,4294967296,109803597,536870888,1000];
let v43;
try { v43 = v42(v40); } catch (e) {}
let v44 = 0;
while (v44 < 1) {
    const v47 = v27 < 268435439n;
    if (v47) {
        3698 << v41;
    } else {
        try {
            v43[9] = v47;
        } catch(e49) {
        }
    }
    v44++;
}
