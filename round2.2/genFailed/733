function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1073741824;
    } catch(e3) {
    }
    try {
        this.b = 1073741824;
    } catch(e4) {
    }
    try {
        this.g = 1073741824;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 extends F0 {
    e;
    139;
    d = v7;
    static #f = v6;
    static e;
    static set b(a11) {
        try {
            v8.fuck(129, 129);
        } catch(e14) {
        }
    }
}
new C9();
const v16 = new C9();
const v17 = new C9();
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a22;
    } catch(e24) {
    }
    try {
        this.f = v17;
    } catch(e25) {
    }
    try {
        this.b = C9;
    } catch(e26) {
    }
}
new F18(v7, v8, v16, v16);
new F18(v7, v8, v17, C9);
new F18(v17, v8, v16, C9);
for (const v30 of v6) {
    const v32 = Symbol.iterator;
    const o41 = {
        [v32]() {
            let v34 = 10;
            const o40 = {
                next() {
                    v34--;
                    const v38 = v34 == 0;
                    const o39 = {
                        "done": v38,
                        "value": v34,
                    };
                    return o39;
                },
            };
            return o40;
        },
    };
}
