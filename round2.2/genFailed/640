try {
    new BigInt64Array(0);
} catch(e3) {
}
try {
    new Int32Array(127);
} catch(e7) {
}
try {
    new Uint16Array(1771);
} catch(e11) {
}
const v12 = [-4.0,5.0,0.8512283272721154,446.9745404237681,1.0900411507052701e+308,-5.0,0.6709865201993334,-Infinity,-1000000000000.0,1000000000.0];
const v13 = [-4.0,-1000000000.0,-290385.71046946826,5.0,736.241065247898,-1.1443663568459232,-6.360185524304693,1.7976931348623157e+308,-9.555828230483229];
[-0.0,-8.441155561757662e+307,-3.0];
class C15 extends BigInt64Array {
    constructor(a17, a18, a19, a20) {
        super(v13, a17, a17);
        const v25 = ~a19;
        Math.sqrt(a18);
        const v27 = -24021 || a19;
        a17 * v25;
        1.0 && v27;
    }
    static #h;
    static #g = Int32Array;
}
const v30 = new C15(0, 1771, v12, 1771);
const v31 = new C15(127, 127, v12, C15);
const v32 = new C15(1771, v31, v13, BigInt64Array);
class C33 {
    static {
        class C35 extends Int32Array {
            a;
            c;
        }
        new C35();
        new C35();
        new C35();
    }
    valueOf(a40, a41, a42) {
        function f43(a44, a45, a46) {
            'use strict';
            --a45;
            1.7976931348623157e+308 | 1.7976931348623157e+308;
            const v52 = a45 >>> 268435441;
            Math.ceil(268435441);
            a45 || v52;
            return v30;
        }
        f43(a41, a42, BigInt64Array);
        return v32;
    }
}
new C33();
const v57 = new C33();
new C33();
const v59 = v32;
try {
    new C33();
} catch(e61) {
}
const v62 = v57[7];
const o63 = {
};
try {
    o63.e = v62;
} catch(e64) {
}
try {
    const o65 = {
    };
    o65.e = v62;
    o65.h = Uint16Array;
} catch(e66) {
}
try {
    const o67 = {
    };
    o67.e = v62;
    o67.h = Uint16Array;
    o67.f = v32;
} catch(e68) {
}
try {
    const o69 = {
    };
    o69.e = v62;
    o69.h = Uint16Array;
    o69.f = 127;
} catch(e70) {
}
