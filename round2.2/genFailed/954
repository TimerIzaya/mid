const v0 = [10000];
const v1 = [-536870912,2570,1024,-7];
const v2 = [2042070753,1631255839,14,-9007199254740991,-872,5426,501842873];
try {
    new BigInt64Array(3952);
} catch(e6) {
}
try {
    new Uint32Array(19);
} catch(e10) {
}
try {
    new BigInt64Array(2315);
} catch(e14) {
}
function f15(a16, a17, a18) {
    const o24 = {
        [v0](a20, a21, a22) {
            try {
                super[this] = a17;
            } catch(e23) {
            }
            return a21;
        },
        4285158595: 3952,
        ...a18,
        "h": BigInt64Array,
        "a": a16,
        ...v2,
    };
    return o24;
}
const v25 = f15(v2, v1, v0);
f15(v0, v1, v0);
const v27 = f15(v0, v0, v1);
try { v1.toSorted(f15); } catch (e) {}
const v32 = v25 == v0;
if (v32) {
    Object.defineProperty(v1, 2315, { configurable: true, get: f15, set: f15 });
    try {
        v27[v32] = 3952;
    } catch(e33) {
    }
} else {
    const v35 = [19,BigInt64Array];
    Reflect.apply(v1.with, v2, v35);
}
