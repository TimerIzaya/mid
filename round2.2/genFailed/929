try {
    new Float32Array(7);
} catch(e3) {
}
try {
    new Int32Array(3376);
} catch(e7) {
}
try {
    new Uint16Array(282);
} catch(e11) {
}
class C12 extends Int32Array {
    6 = 7;
    static #e;
    static [Uint16Array] = 282;
    [7];
    toString(a14, a15) {
        const v16 = 282 ^ a15;
        function F17(a19, a20, a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = 7;
            } catch(e23) {
            }
            try {
                this.d = a20;
            } catch(e24) {
            }
            try {
                this.e = v16;
            } catch(e25) {
            }
        }
        new F17(a14, 7, a15, F17);
        new F17(a15, v16, v16, 282);
        new F17(a15, a14, 7, this);
        return Float32Array;
    }
}
const v29 = new C12();
new C12();
const v31 = new C12();
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v29;
    } catch(e38) {
    }
}
const v39 = new F32(v31, Uint16Array, 7, 282);
new F32(v29, v39, 7, 3376);
const v41 = new F32(v29, Int32Array, 282, 7);
for (const v43 of v29) {
    function f44() {
        return v41;
    }
}
try {
    v41[3376] = v39;
} catch(e45) {
}
