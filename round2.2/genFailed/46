class C3 {
    static #b = -4.0;
    constructor(a5) {
        this.f *= -4.0;
        try {
            this.valueOf = a5;
        } catch(e6) {
        }
    }
    #toString(a8, a9) {
        let v11 = 10;
        for (; v11--;) {
            a9 >>> 6;
            try {
                a9[6] = arguments;
            } catch(e14) {
            }
        }
        return 6;
    }
}
const v15 = new C3(C3);
const v16 = new C3(v15);
const v17 = new C3(-4.0);
let v18 = -1e-15;
const v19 = -Infinity;
class C21 extends C3 {
    get g() {
        try {
            this.a = this;
        } catch(e23) {
        }
        return v17;
    }
    static [6] = v16;
    n(a25, a26, a27) {
        let v24 = this;
        if (a26) {
            ++v24;
            Math.sin(v24);
            Math.exp(58090);
            Math.abs(v16);
            58090 ^ v24;
            -58090 >>> 58090;
        } else {
            const v39 = v15 - v15;
            (v15 ** v15) * v39;
        }
        return v17;
    }
}
const v42 = new C21();
new C21();
new C21();
const v45 = v15 >>> C3;
try {
    v18 = -2.220446049250313e-16;
} catch(e46) {
}
const v47 = v42[226];
function F48(a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v45;
    } catch(e53) {
    }
    try {
        this.c = a52;
    } catch(e54) {
    }
}
new F48(-4.0, -4.0, v19);
new F48(v47, v18, -4.0);
new F48(-4.0, -2.220446049250313e-16, -2.220446049250313e-16);
