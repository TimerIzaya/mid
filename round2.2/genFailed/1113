const v0 = [];
class C4 {
    static #valueOf(a6) {
        v0[4115774750] ^= -2.220446049250313e-16;
        const v7 = [v0,this,this,v0];
        const v8 = [v0,this,-2.220446049250313e-16];
        [v8,v8];
        return v7;
    }
    static n(a11) {
        try { a11(a11, a11); } catch (e) {}
        try {
            new Int8Array(4);
        } catch(e16) {
        }
        try {
            new Uint8ClampedArray(172);
        } catch(e20) {
        }
        try {
            new Float32Array(10);
        } catch(e24) {
        }
        return Float32Array;
    }
}
const v25 = new C4();
const v26 = new C4();
new C4();
const v28 = [-7.067128645905439e+307,636173.2021945736,4.0,-516.4830427498266,2.2250738585072014e-308,-0.0];
let v29 = [1000000.0];
[-5.0,-583.6071840356074,2.0,5.797985518936729e+307,535186.3045329829,5.0,-220281.6235062828,-824734.3020993179,-2.0149338682422986];
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 9007199254740991;
    } catch(e39) {
    }
    try {
        this.h = v26;
    } catch(e40) {
    }
    try {
        this.g = a37;
    } catch(e41) {
    }
}
const v42 = new F34(-2.220446049250313e-16, -9223372036854775808, v29);
new F34(-5.0, 787338591, v42);
new F34(-2.220446049250313e-16, 9007199254740991, v0);
try {
    v29 <<= v28;
} catch(e46) {
}
%VerifyType(F34);
let v47;
try { v47 = F34(v25, v28, v26, this, v42); } catch (e) {}
const v48 = v47?.d;
let v49;
try { v49 = v28.findLastIndex(v48, C4); } catch (e) {}
v49[4] = v49;
