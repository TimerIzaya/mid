function f6(a7, a8, a9) {
    const o17 = {
        "f": a8,
        get h() {
            try { a9(a9); } catch (e) {}
            const o15 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o15);
            return a7;
        },
    };
    return o17;
}
const v18 = f6("object", "object", -7.798235275389976e+307);
const v19 = f6("object", v18, v18);
f6("object", v19, f6);
[v19];
["-6",v18,4.0,-7.798235275389976e+307];
["-6"];
let v27 = 0;
do {
    const v28 = v19.h;
    Reflect.construct(v28, [], v28);
    v27++;
} while (v27 < 4)
