[1.0,-977.9993230301495,2.220446049250313e-16,-2.0,-513344.88059291797,-1.7405279723869307e+308,-5.982681256117434];
[0.0,-4.0,0.06413535627137645];
const v2 = [-79.3152110430591,-1000000.0,1.6690062414904823];
const v3 = [1051749807,268435439,2147483647];
const v4 = [5,-588585452,5672735,15];
const v5 = [52427,65537,-17023,-65535,2051670304,-55837,-1571,-2];
try {
    new Float64Array(256);
} catch(e9) {
}
try {
    new Uint32Array(1082);
} catch(e13) {
}
try {
    new Uint8ClampedArray(13);
} catch(e17) {
}
const v22 = v5["reduce"](1082, "reduce");
-3n === v3;
v2[4] = "reduce";
function f24(a25, a26, a27, a28) {
    a28 ^ a25;
    a26 < a28;
    const v31 = v22 >>> 256;
    let v32;
    try { v32 = v5.filter(v22); } catch (e) {}
    try { v32(a25, v31, v31, v2); } catch (e) {}
    return v31;
}
f24(1082, 65537n, 256, v4);
