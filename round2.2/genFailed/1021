try {
    new Uint16Array(1853);
} catch(e6) {
}
try {
    new Float32Array(10);
} catch(e10) {
}
try {
    new Float32Array(256);
} catch(e14) {
}
function f15() {
    return -1000000.0;
}
class C16 {
    n(a18, a19, a20, a21) {
        let {"b":v22,"g":v23,...v24} = this;
        try { v22(a18, a21); } catch (e) {}
        return a18;
    }
    static get d() {
        for (const v27 of -1000000.0) {
            [-1.0157346335919557e+308,-450956.2713815465,-1000000000.0,1.7976931348623157e+308,1.6760110624361583e+307,518.9692181276343,6.126100293666627e+307];
            [1000000000000.0,2.0,2.0,0.22997400436083038,-12442.750972498208,-1e-15,2.220446049250313e-16,436474.26935877977];
            [0.4036327392302502,717.3988355846625,0.41525435150384327,-3.0,-979.903568101072,-9.489768987579228e+307];
        }
        return 256;
    }
    0;
    g;
}
new C16();
new C16();
new C16();
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a38;
    } catch(e39) {
    }
    try {
        this.f = a38;
    } catch(e40) {
    }
}
new F34(10, 256, 1853);
new F34(1853, 1853, 10);
const v43 = new F34(256, 1853, 10);
v43[1073741823] &&= 256;
C16.d;
new F34(256, 256, 1853);
let v46 = 0;
while (v46 < 7) {
    try {
        new f15();
    } catch(e50) {
    }
    v46++;
}
