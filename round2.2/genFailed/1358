function f0() {
}
function f1() {
    const o11 = {
        "h": f0,
        "f": f0,
        "g": f0,
        "c": f0,
        get d() {
            const v3 = this[f0];
            f0 + v3;
            Math.min(f0);
            Math.log2(-27132 >> v3);
            return f0;
        },
    };
    return o11;
}
f1();
f1();
f1();
[4.1635761135677644e+307,0.9173753422569249];
[-1.7976931348623157e+308,-267523.05490911275,698118.6080494504,0.285914797855933,-1000000000000.0];
[-0.0,1000000.0,-909148.4479346261,2.2250738585072014e-308,4.0,NaN,1.0,0.6134000119806378,4.983952889364767e+307,-3.0];
try {
    new Uint16Array(4096);
} catch(e24) {
}
try {
    new Uint8Array(3180);
} catch(e28) {
}
try {
    new Int16Array(3);
} catch(e32) {
}
for (let i35 = 0; i35 < 1; i35++) {
    Reflect.construct(h, [Reflect,i35], Uint16Array);
    -1e-15 || -1e-15;
    ~i35;
    Math.atan(1073741824);
    -268435456 ^ -268435456;
}
