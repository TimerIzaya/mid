try {
    new BigUint64Array(129);
} catch(e6) {
}
try {
    new Float32Array(1000);
} catch(e10) {
}
try {
    new BigUint64Array(3339);
} catch(e14) {
}
class C15 extends Float32Array {
    #h = BigUint64Array;
    static [3339];
    static #m(a17, a18, a19) {
        this[-128];
        /xyz{0,1}?a|bc*/gduyi;
        /(x)(x)(x)\3*iYw*/gyi;
        /6a(?=bbb|bb)c/mgsvi;
        return BigUint64Array;
    }
    10000 = 1000;
    65536 = 1000;
}
const v27 = new C15();
const v28 = new C15();
const v29 = new C15();
class C30 {
    toString(a32, a33) {
        try {
            this[5] = a32;
        } catch(e34) {
        }
        return Float32Array;
    }
    p(a36, a37, a38, a39) {
        const v43 = -5.0 | 16;
        Math.sinh(16);
        Math.sqrt(-5.0 * v43);
        return BigUint64Array;
    }
}
const v47 = new C30();
const v48 = new C30();
new C30();
v29.length;
try { v47.toString(-128, v28, 3339, v27, 3339); } catch (e) {}
new WeakMap();
const v55 = [];
Reflect.apply(v29.keys, C15, v55);
try {
    C15[1000] = v48;
} catch(e58) {
}
