class C3 {
    static 7 = -128;
    get f() {
        const v5 = this || this;
        const v6 = [v5,v5,v5,1,-4294967296];
        const v7 = [1,v5,v6,1,v6];
        [v6,v6,1,v7,v7];
        return -4294967296;
    }
    [-128];
    toString(a10, a11) {
        let v9 = this;
        v9[v9];
        [-1000000000000.0,0.5848398555235118,1.7819829713000236e+308,8.565854786211297e+307,-308.86610824680156];
        const v14 = [1000.0,-887917.6080925071,0.15639000184267193,1000000000000.0,-1.6531624275149338e+308,628557.3974823195,2.2250738585072014e-308,-3.0,-Infinity];
        [1000000000000.0,2.2250738585072014e-308,-5.0,-1e-15,-6.76608560238667e+307,5.0,-4.0,-1.0,-1000000.0];
        try {
            v9 = a11;
        } catch(e16) {
        }
        return v14;
    }
}
const v17 = new C3();
new C3();
const v19 = new C3();
class C20 extends C3 {
    static #o(a22, a23, a24, a25) {
        const v26 = delete this?.b;
        try {
            a22.#o(-128, C3);
        } catch(e28) {
        }
        Reflect.construct(v26, [C3,-128,v26], v26);
        return v19;
    }
    b = v17;
    1057;
    d;
    static d;
}
new C20();
new C20();
new C20();
try {
    new Float32Array(2707);
} catch(e41) {
}
try {
    new Int8Array(512);
} catch(e45) {
}
try {
    new Uint8Array(127);
} catch(e49) {
}
new Int8Array(-4294967296, 512);
try {
    C20 /= C20;
} catch(e51) {
}
try {
    C3[-128] = v19;
} catch(e52) {
}
try {
    new BigInt64Array(3);
} catch(e56) {
}
try {
    new Float32Array(256);
} catch(e60) {
}
try {
    new Uint8ClampedArray(127);
} catch(e64) {
}
