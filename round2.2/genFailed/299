try {
    new Float64Array(778);
} catch(e3) {
}
try {
    new Int32Array(0);
} catch(e7) {
}
try {
    new Uint16Array(3);
} catch(e11) {
}
class C12 extends Int32Array {
    static #c = Uint16Array;
    constructor(a14, a15) {
        super(a15, a15, a15);
        const v16 = super.length;
        try {
        const t0 = 0;
        t0(v16, v16, v16, Uint16Array);
        } catch (e) {}
        try {
            super.buffer = a15;
        } catch(e18) {
        }
    }
    static set h(a20) {
        try {
            a20.__proto__ = h;
        } catch(e22) {
        }
    }
}
new C12(0, 3);
new C12(0, 3);
new C12(0, 778);
C12[-4.0];
/z(?:a+)*/mgsdy;
/xyz{1,}*/mgsdu;
/(\u0034)/di;
Math.acos(-17641);
-4.0 * 255;
255 - -17641;
