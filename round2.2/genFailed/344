function f1() {
    const o8 = {
        "e": true,
        toString() {
            const v4 = Symbol.toPrimitive;
            const o7 = {
                [v4]() {
                    let v5 = this;
                    try {
                        v5 <<= Symbol;
                    } catch(e6) {
                    }
                    return true;
                },
            };
            return o7;
        },
    };
    return o8;
}
const v9 = f1();
const v10 = f1();
const v11 = f1();
class C12 extends f1 {
    constructor(a14) {
        super();
        super.e &&= f1;
        a14.e /= a14[v9];
    }
    valueOf(a17) {
        class C18 {
            d;
        }
        new C18();
        new C18();
        new C18();
        return this;
    }
}
const v22 = new C12(v9);
const v23 = new C12(v10);
const v24 = new C12(v10);
class C25 {
    constructor(a27, a28, a29, a30) {
        e = v22;
        C12[56];
        Object.defineProperty(a28, "d", { enumerable: true, set: f1 });
        try {
            new BigInt64Array(257);
        } catch(e35) {
        }
        try {
            new Float64Array(16);
        } catch(e39) {
        }
        try {
            new Uint8ClampedArray(9);
        } catch(e43) {
        }
    }
}
new C25(v23, v22, v24, v22);
const v45 = new C25(v22, v11, v22, v24);
new C25(C25, v45, v45, v11);
const o53 = {
    "execution": "async",
    "type": "minor",
};
gc(o53);
