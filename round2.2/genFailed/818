const v0 = [5.6931205587984675,-9.338499249942702,1.7976931348623157e+308,0.45876246058491765,7.527087493194333];
const v1 = [0.08585147107552127,-826731.8527879312,-6.789567784282699,952.3129653372564,-1000.0,-2.0,-9.006991603141463,0.20878774213623186,-6.02983342820115];
const v2 = [-448530.477342485,3.0,-1000000000000.0,-6.93750001055871,0.4202352126727119,15439.798013985972,-1.7976931348623157e+308,1000000000.0,-1000000000.0];
try {
    new BigInt64Array(223);
} catch(e9) {
}
let v10 = 16;
try {
    new Float32Array(v10);
} catch(e13) {
}
try {
    new Uint32Array(5);
} catch(e17) {
}
class C18 extends BigInt64Array {
    m(a20, a21, a22) {
        +v2;
        try {
            v10 /= 5;
        } catch(e24) {
        }
        return a20;
    }
    a = 1073741824n;
    static #c;
    [BigInt64Array] = Float32Array;
    [Uint32Array] = v1;
    [0n];
}
new C18();
const v26 = new C18();
new C18();
v0 instanceof C18;
v26.a /= 223;
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = C18;
    } catch(e34) {
    }
}
const v35 = new F29(0n, 0n, 0n);
new F29(v35, 1073741824n, 1073741824n);
new F29(BigInt64Array, 1073741824n, 1046528533n);
