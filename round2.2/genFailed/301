try {
    new Float64Array(114);
} catch(e3) {
}
try {
    new Float32Array(1);
} catch(e7) {
}
try {
    new Uint32Array(3);
} catch(e11) {
}
class C12 extends Float32Array {
    static toString(a14, a15, a16) {
        try {
            super[1] = 3;
        } catch(e17) {
        }
        ({"b":a14,} = this);
        return 114;
    }
    2881691466 = 114;
    [1] = 1;
    static [-2];
}
const v18 = new C12();
const v19 = new C12();
const v20 = new C12();
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a26;
    } catch(e27) {
    }
}
new F21(v19, v20, v20, v19);
new F21(v18, v20, v18, Float64Array);
const v30 = new F21(v18, v18, v18, v18);
new F21(v20, v18, v18, v30);
const v33 = v18 == F21 ? v18 : F21;
try {
    v33.toString = 3;
} catch(e34) {
}
new F21(v18, v33, v20, v20);
try {
    new Float64Array(6);
} catch(e39) {
}
try {
    new Int32Array(131);
} catch(e43) {
}
try {
    new Int8Array(92);
} catch(e47) {
}
