function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -749019935;
    } catch(e3) {
    }
    try {
        this.d = -749019935;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f8() {
    return v5;
}
class C9 extends f8 {
    static #b = F0;
    9;
    [v6];
    d;
    [F0] = F0;
    constructor(a11) {
        super();
    }
    #n(a14, a15) {
        const v16 = f8 instanceof f8;
        try {
            super[F0] = v16;
        } catch(e17) {
        }
        return a15;
    }
}
let v18 = new C9(v6);
const v19 = new C9(v18);
const v20 = new C9(v7);
class C21 {
    toString(a23, a24, a25, a26) {
        const v27 = super[a26];
        try { new v27(this, F0, F0, v27, a24); } catch (e) {}
        return a25;
    }
    7;
    get c() {
        let v32 = this;
        Object.defineProperty(v5, "f", { get: f8, set: f8 });
        ({"h":v18,...v32} = C9);
        let v33 = 0;
        do {
            try {
                v18[v18] = v19;
            } catch(e34) {
            }
            v33++;
        } while (v33 < 2)
        return v32;
    }
}
new C21();
new C21();
new C21();
try {
    v20["toString"] = "undefined";
} catch(e44) {
}
const o47 = {
    "maxByteLength": 2041,
};
const v49 = new SharedArrayBuffer(2041, o47);
try {
    new Int16Array(v49);
} catch(e52) {
}
