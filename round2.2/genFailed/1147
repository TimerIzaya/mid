const v1 = new WeakMap();
class C3 extends WeakMap {
    static 10;
    static d = v1;
    [WeakMap];
    [false] = false;
    constructor(a5) {
        super(v1);
        delete v1[1791];
        v1[Symbol.matchAll] = this;
    }
    1 = WeakMap;
}
const v9 = new C3(v1);
const v10 = new C3(C3);
const v11 = new C3(C3);
class C12 {
    h = v11;
    static get b() {
        super.e >>>= WeakMap;
        try {
            super.a = this;
        } catch(e14) {
        }
        return v10;
    }
    static d = C3;
    [C3];
    g = v1;
}
new C12();
new C12();
new C12();
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v1;
    } catch(e24) {
    }
}
const v25 = new F18(C3, v9, v10, v9);
const v26 = new F18(F18, C12, v1, v25);
new F18(v10, C12, v26, v11);
try {
    new Int16Array(255);
} catch(e31) {
}
try {
    new Uint8Array(6);
} catch(e35) {
}
try {
    new BigUint64Array(6);
} catch(e39) {
}
