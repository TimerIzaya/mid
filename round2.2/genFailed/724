try {
    new Uint32Array(629);
} catch(e3) {
}
try {
    new Int16Array(1);
} catch(e7) {
}
try {
    new Int32Array(203);
} catch(e11) {
}
class C12 extends Uint32Array {
    static [629];
    e = Int32Array;
    [1] = 203;
    #m(a14, a15, a16, a17) {
        typeof Int16Array === "symbol";
        return Int16Array;
    }
    #d;
    b;
    9 = Int32Array;
    #e = 629;
    [203] = Uint32Array;
}
const v21 = new C12();
const v22 = new C12();
const v23 = new C12();
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1;
    } catch(e29) {
    }
}
new F24(v23, Uint32Array, v23);
new F24(v22, v23, v22);
new F24(v21, 203, v23);
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a37;
    } catch(e38) {
    }
    try {
        this.e = 203;
    } catch(e39) {
    }
}
new F33(1, v22, 1);
new F33(629, v23, 1);
new F33(629, v22, 203);
