const v0 = /[(?:ab|cde)]/mdv;
const v1 = /(?: foo )/gd;
const v2 = /G/gdvy;
class C3 {
    static get c() {
        try {
            super[v0] = v2;
        } catch(e5) {
        }
        return v2;
    }
    [v0] = v0;
    static #a = v1;
    #g = v2;
    static 352 = v1;
    static #b = v1;
}
new C3();
const v7 = new C3();
const v8 = new C3();
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v1;
    } catch(e17) {
    }
    try {
        this.g = C3;
    } catch(e18) {
    }
    try {
        this.b = "has";
    } catch(e19) {
    }
}
const v20 = new F12("transfer", v8, v1);
const v21 = new F12("transfer", v20, v1);
new F12("function", "has", v2);
throw v2;
let v23 = ("has")[v7];
[-1024,-2147483648,25298,-22684,1024,-3,14613,34752,8,268435440];
[8,-52230,4096,-7417,-9007199254740992,3,-256];
[1000,2062297487,-1584409067,1874106734,-4096,-1315558877,-268435456,1640250226,3];
let {"sticky":v27,} = v1;
const v28 = v21.c;
try { new v28(v23, v1, v2, ..."has"); } catch (e) {}
v23--;
-C3;
Math.tanh(C3);
const v37 = v23 % v23;
v23 / -5.900169661729556e+307;
Math.pow(v37, v23);
Math.min(C3);
