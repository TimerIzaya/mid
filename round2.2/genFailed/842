function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 268435441;
    } catch(e3) {
    }
    try {
        this.e = 268435441;
    } catch(e4) {
    }
    try {
        this.b = 268435441;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
function f9(a10, a11) {
    const o18 = {
        536594124: a10,
        ...v7,
        __proto__: a11,
        1: a11,
        p(a13, a14, a15, a16) {
            try {
                super.f = a15;
            } catch(e17) {
            }
            return v7;
        },
    };
    return o18;
}
const v19 = f9(v8, v8);
const v20 = f9(v7, v6);
f9(v20, v6);
class C22 extends F0 {
    toString(a24, a25, a26) {
        const o27 = {
            "has": f9,
            "preventExtensions": f9,
            "set": f9,
        };
        try {
            new Proxy(v20, o27);
        } catch(e30) {
        }
        return a25;
    }
}
new C22();
let v32 = new C22();
const v33 = new C22();
try {
    v32 **= v33;
} catch(e34) {
}
C22.c -= v32;
for (const v35 of v7) {
    if (v35) {
        v20[v8];
    } else {
        Math.acosh(v19);
        Math.log2(-65537);
        let v41 = v19 * -65537;
        v41++;
    }
}
