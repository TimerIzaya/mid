try {
    new Float32Array(10);
} catch(e3) {
}
try {
    new Uint16Array(9);
} catch(e7) {
}
try {
    new Uint8ClampedArray(0);
} catch(e11) {
}
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a14;
    } catch(e18) {
    }
}
new F12(9, 0, 10, 10);
const v20 = new F12(9, 9, 10, 9);
new F12(9, 9, 0, 10);
function f22() {
    return v20;
}
Object.defineProperty("every", 9, { set: f22 });
const o28 = {
    "maxByteLength": 1024,
};
const v30 = new SharedArrayBuffer(0, o28);
try {
    new Float32Array(v30);
} catch(e33) {
}
