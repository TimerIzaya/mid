class C3 {
    static #o(a5, a6) {
        try {
            this[2785] = a5;
        } catch(e7) {
        }
        return "boolean";
    }
    #f = "valueOf";
    constructor(a9, a10) {
        const t10 = "Rx";
        delete t10[11];
        super.g *= "valueOf";
    }
    #e = "Rx";
    static ["valueOf"];
    [-2] = "boolean";
}
const v12 = new C3("Rx", "valueOf");
const v13 = new C3("Rx", "Rx");
const v14 = new C3("Rx", "valueOf");
class C15 extends C3 {
    constructor(a17, a18, a19, a20) {
        super(a17, "boolean");
        const t24 = "boolean";
        t24.length |= a19;
        try {
            a18 = a17;
        } catch(e21) {
        }
    }
    696 = v14;
    n(a23, a24, a25, a26) {
        try {
            super[v13] = a23;
        } catch(e27) {
        }
        return a25;
    }
}
const v28 = new C15("boolean", v14, "boolean", "Rx");
new C15(v14, v28, "valueOf", v12);
new C15("Rx", C15, "boolean", "boolean");
const v34 = [31018,512];
[C3,1227771938,v34,v14];
[v34];
if (512) {
    const v38 = Symbol.iterator;
    const o47 = {
        [v38]() {
            let v40 = 10;
            const o46 = {
                next() {
                    v40--;
                    const v44 = v40 == 0;
                    const o45 = {
                        "done": v44,
                        "value": v40,
                    };
                    return o45;
                },
            };
            return o46;
        },
    };
} else {
    ("number").normalize("NFKD");
}
