const v0 = [1073741825,1,2144628836];
[13,-1024];
const v2 = [-9007199254740992,12,-1572407576,512,65537];
const v3 = [669040337,-4294967296,127,-1125267045,-536870912,63100,-10,255,65536];
const v4 = [10];
const v5 = [536870888,-11975];
try {
    new Uint32Array(131);
} catch(e9) {
}
try {
    new BigUint64Array(7);
} catch(e13) {
}
try {
    new Int16Array(6);
} catch(e17) {
}
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = Int16Array;
    } catch(e22) {
    }
    try {
        this.h = v4;
    } catch(e23) {
    }
    try {
        this.a = Int16Array;
    } catch(e24) {
    }
}
const v25 = new F18(Int16Array, 131);
new F18(v25, 6);
new F18(Int16Array, 7);
v3 * v0;
const v30 = v5["concat"]();
[] = v2;
let v34;
try { v34 = v30(Uint32Array, 6, BigUint64Array); } catch (e) {}
v34[Symbol.match] = Uint32Array;
