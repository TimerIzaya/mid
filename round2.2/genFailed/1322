try {
    new Int16Array(2139);
} catch(e3) {
}
let v4 = 16;
try {
    new Float64Array(v4);
} catch(e7) {
}
try {
    new BigInt64Array(2483);
} catch(e11) {
}
const v12 = [1144702045,-14,-9007199254740990,16,8,59780,4];
const v13 = [256,1087428710,9,3,-9,1000,-9,11439334];
const v14 = [-4294967296,512,52341,9007199254740992,-536870912,-65535,748839305];
class C18 extends BigInt64Array {
    [-1] = v14;
    static #m(a20, a21, a22) {
        try {
            v4 |= v4;
        } catch(e23) {
        }
        return this;
    }
    d = 1451528064;
    a;
    static [1451528064];
    [1451528064] = v4;
    e;
}
new C18();
const v25 = new C18();
const v26 = new C18();
for (const v30 in "z") {
    if (v25 === v30) {
        v13 ^ v12;
        v26[Symbol.split];
    } else {
        try {
            v26[3547] = "-1217901646";
        } catch(e36) {
        }
    }
}
