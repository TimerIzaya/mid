try {
    new Int8Array(2);
} catch(e3) {
}
try {
    new Int8Array(6);
} catch(e7) {
}
try {
    new Int16Array(129);
} catch(e11) {
}
const v12 = [268435439,1661959941,5,-65535,2147483647,9223372036854775807,512,-890194384,1073741825,811647811];
const v13 = [512,512,-10,-4294967297,6,6,4294967295];
const v14 = [-1473981421,0,36928,4762,-1339317670];
class C15 extends Int16Array {
    set c(a17) {
        this["findLast"](a17, Int8Array, Int8Array, Int8Array, ..."findLast");
    }
    #f;
    static h;
    12 = v14;
    static #m(a21, a22, a23, a24) {
        return v13.length;
    }
    [Int16Array];
    [Int8Array];
}
const v26 = new C15();
new C15();
const v28 = new C15();
var b = v26;
const v29 = v12[Int8Array];
delete v28[v29];
try { v12.map(v29, v29); } catch (e) {}
let v32 = v26 << v28;
try {
    v32 -= v29;
} catch(e33) {
}
[] = v13;
