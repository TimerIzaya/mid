try {
    new Int8Array(4);
} catch(e3) {
}
try {
    new Int32Array(442);
} catch(e7) {
}
try {
    new Int32Array(0);
} catch(e11) {
}
class C15 extends Int32Array {
    [Int8Array];
    static b = 442;
    static #m(a17, a18, a19) {
        try { a19(a18); } catch (e) {}
        Object.defineProperty(this, 442, { value: 442 });
        this[a18] **= 442;
        const o23 = {
            "maxByteLength": 536870887,
        };
        const v25 = new ArrayBuffer(256, o23);
        try {
            new BigInt64Array(v25);
        } catch(e28) {
        }
        return Int32Array;
    }
}
const v29 = new C15();
const v30 = new C15();
new C15();
const v33 = Symbol.matchAll;
v29[v33] = v33;
const v34 = v30 * v33;
function f35(a36, a37, a38) {
    !413953083;
    Math.log1p(a37);
    Math.hypot(0);
    a38 + a36;
    return Math.clz32(a36);
}
f35(v34, 1.1654903442254789e+308, -1000000.0);
