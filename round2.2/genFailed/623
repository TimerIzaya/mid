function f0() {
    const o10 = {
        set f(a5) {
            try {
            } finally {
                try {
                    a5 >>>= a5;
                } catch(e9) {
                }
            }
        },
        "d": 515109.72173034307,
    };
    return o10;
}
const v11 = f0();
const v12 = f0();
const v13 = f0();
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a17;
    } catch(e18) {
    }
    try {
        this.d = v12;
    } catch(e19) {
    }
}
const v20 = new F14(F14, v13);
new F14(v20, v13);
new F14(v20, v12);
const v23 = [10,-9223372036854775807,-2046,-35445,10,-4];
const v24 = [-4096,1073741823,4294967296];
[64,-256,1,1073741823,51078,128,212698937,-15];
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a29;
    } catch(e30) {
    }
    try {
        this.g = v13;
    } catch(e31) {
    }
    try {
        this.d = v20;
    } catch(e32) {
    }
}
new F26(v12, v24);
new F26(v11, v23);
new F26(v13, v23);
const o36 = {
    "set": f0,
};
try {
    new Proxy(v23, o36);
} catch(e39) {
}
Object.defineProperty(v24, "length", { configurable: true, enumerable: true, get: f0 });
const v41 = Symbol.iterator;
const o50 = {
    [v41]() {
        let v43 = 10;
        const o49 = {
            next() {
                v43--;
                const v47 = v43 == 0;
                const o48 = {
                    "done": v47,
                    "value": v43,
                };
                return o48;
            },
        };
        return o49;
    },
};
