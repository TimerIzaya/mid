try {
    new Uint16Array(0);
} catch(e3) {
}
try {
    new BigInt64Array(8);
} catch(e7) {
}
try {
    new Uint8Array(7);
} catch(e11) {
}
class C12 extends BigInt64Array {
    536870889;
    p(a14, a15) {
        function f16(a17, a18, a19) {
            try { a17.assign(8, a17, this, a18, a17); } catch (e) {}
            return Uint8Array;
        }
        f16(0, a15, 0);
        return a15;
    }
    #b = 7;
    static #e = 7;
    static [BigInt64Array] = Uint8Array;
}
const v22 = new C12();
new C12();
const v24 = new C12();
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a29;
    } catch(e31) {
    }
    try {
        this.e = a29;
    } catch(e32) {
    }
}
const v33 = new F25(v22, v24, v22, v22);
let v34 = new F25(v24, v22, v22, v22);
new F25(v24, v24, v24, v24);
v34.e;
Object.defineProperty(v34, v33, { writable: true, configurable: true, value: v24 });
try {
    Object.defineProperty(C12, 10, { writable: true, value: v34 });
} catch(e37) {
    try {
        v34 >>>= e37;
    } catch(e38) {
    }
}
