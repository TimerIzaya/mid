class C3 {
    static #o(a5) {
        try {
            this.d = this;
        } catch(e6) {
        }
        return a5;
    }
    [-419.32988137359973];
    static #toString(a8) {
        a8[Symbol.asyncIterator];
        return -419.32988137359973;
    }
}
const v12 = new C3();
new C3();
const v14 = new C3();
const v15 = /a\nb\bc[^exyz{0,1}?]?/msdv;
const v16 = /aa$a[^a]/mgsv;
const v17 = /abc+?/vi;
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a21;
    } catch(e22) {
    }
}
const v23 = new F18(v12, v17);
const v24 = new F18(v16, v15);
const v25 = new F18(v16, v17);
const v26 = -3.0 >= v14;
if (v26) {
    const v27 = v23[-419.32988137359973];
    let v28;
    try { v28 = v27(); } catch (e) {}
    v28 in v25;
} else {
    const v30 = [-3.0];
    [v30,v30];
    [F18,v26,v24,v30,v12];
}
