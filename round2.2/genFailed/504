const v0 = [496.425223494703,2.220446049250313e-16,5.654935625945079,-1.4609523743372476e+308,-5.760968470181824,6.85637200536162e+307,8.221250087372393,-3.0,0.6095371168952969];
const v1 = [1.0629311590289068e+308];
const v2 = [-4.2257615139349786e+307,1.6797626675742452e+308,-1.5220798676050529e+308,8.731788961179596,8.49365735873588,0.9205234438235468];
class C3 {
    m(a5, a6) {
        try {
            super.preventExtensions(a5, v2, this, a5, v2);
        } catch(e8) {
        }
        a6[this] &= a5;
        return a5;
    }
    [v0];
    [v1] = v2;
}
const v9 = new C3();
let v10 = new C3();
new C3();
let v17 = -9007199254740992;
({"length":v10,...v17} = v0);
for (const v18 in v9) {
    let v19;
    try { v19 = v1.some(v18, 787); } catch (e) {}
    v19[v18] &= 787;
}
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a23;
    } catch(e25) {
    }
    try {
        this.a = a24;
    } catch(e26) {
    }
}
new F20(v10, -4294967295, v10);
new F20(-4294967295, -5, 787);
new F20(-5, 787, -4294967295);
