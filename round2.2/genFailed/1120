const v0 = [];
try {
    new Int8Array(11);
} catch(e4) {
}
try {
    new BigUint64Array(1);
} catch(e8) {
}
try {
    new Uint8ClampedArray(7);
} catch(e12) {
}
class C16 extends Int8Array {
    m(a18, a19, a20) {
        const o21 = {
        };
        try {
            new Proxy(v0, o21);
        } catch(e24) {
        }
        return a19;
    }
    d;
    b;
    0;
}
const v25 = new C16();
const v26 = new C16();
const v27 = new C16();
try {
    C16[127] = v27;
} catch(e28) {
}
if (536870889n > Uint8ClampedArray) {
    v25[v27];
    Int8Array ^ Int8Array;
    (256n >> -9007199254740990) ** -1.0;
} else {
    function F38(a40, a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = 256n;
        } catch(e43) {
        }
        try {
            this.b = a40;
        } catch(e44) {
        }
    }
    new F38(v25, v0, v26);
    new F38(v27, F38, v27);
    new F38(v27, F38, v25);
}
