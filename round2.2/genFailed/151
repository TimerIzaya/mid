try {
    new Float32Array(512);
} catch(e3) {
}
try {
    new Int8Array(4096);
} catch(e7) {
}
try {
    new Float64Array(289);
} catch(e11) {
}
class C12 {
    p(a14, a15) {
        try { this["toDateString"]("toDateString"); } catch (e) {}
        super[Int8Array];
        return 4096;
    }
    static #valueOf(a20, a21, a22) {
        try {
            this[1000] = this;
        } catch(e23) {
        }
        return 289;
    }
    #g;
    h = Int8Array;
}
const v24 = new C12();
const v25 = new C12();
new C12();
class C27 {
    #valueOf(a29, a30, a31) {
        a31[512];
        try {
            a30.#valueOf(C12, v25, v24);
        } catch(e34) {
        }
        return Int8Array;
    }
    static get f() {
        try {
            C12.toString = this;
        } catch(e36) {
        }
        try {
            this.__proto__ = v24;
        } catch(e37) {
        }
        return this;
    }
}
const v38 = new C27();
const v39 = new C27();
new C27();
class C41 extends Float32Array {
    static d;
    static #toString(a43, a44) {
        try {
            this.fuck(512, Int8Array, 961054851n, /(0{z}?)/d);
        } catch(e48) {
        }
        return this;
    }
    [512];
    static 7 = 512;
    #e;
    static #a = v39;
    [4096];
}
new C41();
new C41();
new C41();
for (let v52 = 0; v52 < 32; v52++) {
    v38["p" + v52] = v52;
}
let v55;
try { v55 = v24.p(Float64Array, 512, C41, v39); } catch (e) {}
let v58 = new Array(4024);
try {
    v58 = v55;
} catch(e59) {
}
