function f0() {
    const o17 = {
        ...12,
        get f() {
            const v5 = /esI(?:a*)+a+/mvyi;
            /(W+)/mgy;
            let v7 = /foo|(bar|baz)|quux/mgdv;
            super[-65535];
            Math.expm1(8);
            ++v7 >>> v5;
            Math.trunc(v7);
            Math.fround(!8);
            return -65535;
        },
    };
    return o17;
}
const v18 = f0();
const v19 = f0();
const v20 = f0();
[2147483647,-65537,-4294967297,1073741825,-4,-12,-4096,9007199254740992,-9007199254740990];
const v22 = [-10,-4294967295,5,2147483647,-1,8,1608128696];
const v23 = [-1,-1506312415,4294967297,9223372036854775807,-268435456,10,9223372036854775807,9007199254740992,335828684,1038642456];
function f24() {
    return v19;
}
new Map();
const v29 = new Array(1124);
new Map(v20);
let v31;
try { v31 = v22.toSpliced(1124, 1124); } catch (e) {}
try {
    new Map(v29);
} catch(e33) {
}
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a37;
    } catch(e39) {
    }
    try {
        this.a = v19;
    } catch(e40) {
    }
    try {
        this.g = v22;
    } catch(e41) {
    }
}
new F34(v20, v19, v23);
new F34(v19, v20, v22);
new F34(v18, v31, v29);
