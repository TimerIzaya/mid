try {
    new BigUint64Array(40);
} catch(e3) {
}
try {
    new Int8Array(9);
} catch(e7) {
}
try {
    new Uint8ClampedArray(133);
} catch(e11) {
}
const v12 = [0.9409304490273708,1.292127163463907e+308,1000000000000.0,-151.05858075572826,1000000.0,-1000.0,144.65305046239087,0.10375088169837854,5.0,-1.3369405235576404e+308];
const v13 = [-8.044175096360318e+306,-1000000000.0,1000000000.0,-5.0,-1.0,-395.26778275964534];
const v14 = [-3.0,1e-15,-1.6715847142128884e+307,-1e-15,0.0,3.0303354033213132];
class C18 {
    o(a20, a21) {
        try { a21(v14, 133, Int8Array, a20); } catch (e) {}
        v13.length ^= 133;
        return BigUint64Array;
    }
    constructor(a27, a28, a29) {
        let v30 = 0;
        do {
            try {
                super.isExtensible();
            } catch(e32) {
            }
            v30++;
        } while (v30 < 10)
    }
}
new C18(9, 133, v12);
new C18(133, 9, v13);
const v38 = new C18(40, 133, 4294967295n);
Object.defineProperty(v12, "c", { writable: true, configurable: true, enumerable: true, value: 133 });
try {
    v38.b = 9;
} catch(e39) {
}
let v42 = 3;
15970 >>> (4294967295n - 15970);
Math.asin(4294967295n);
let v46 = +133;
v42--;
~v46;
++v46;
