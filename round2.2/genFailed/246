const v1 = new Map();
class C2 extends Map {
    constructor(a4, a5) {
        super(a4);
        a5[10] |= a4;
        const v7 = [a4];
        Reflect.apply(v1.forEach, v1, v7);
    }
    static #e;
    static #h;
}
const v10 = new C2(C2, v1);
const v11 = new C2(v10, v1);
let v12 = new C2(v11, v11);
class C13 {
    #n(a15, a16, a17) {
        try {
            v1.size = a17;
        } catch(e18) {
        }
        try {
            v11.size = a17;
        } catch(e19) {
        }
        return a17;
    }
}
const v20 = new C13();
new C13();
const v22 = new C13();
try {
    v12 = v22;
} catch(e23) {
}
v20 + v20;
let v27 = v12 >>> Map;
Math.ceil(v11);
v11 | v12;
const v30 = v27++;
Math.log(v30);
Math.atan(v30);
++v12;
