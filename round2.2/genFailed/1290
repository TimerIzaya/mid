const v0 = [];
class C1 {
    #h;
    set g(a3) {
        try { a3(a3, a3, a3); } catch (e) {}
        let v5 = v0[this];
        try {
            v5 = v0;
        } catch(e6) {
        }
    }
    [v0];
    static #d = v0;
    static 6;
    #f = v0;
    257 = v0;
}
const v7 = new C1();
const v8 = new C1();
const v9 = new C1();
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a17;
    } catch(e18) {
    }
    try {
        this.e = -11070;
    } catch(e19) {
    }
    try {
        this.a = a16;
    } catch(e20) {
    }
}
new F13(2, v7, v8);
const v22 = new F13(2, v7, v8);
new F13(-11070, v9, C1);
const v27 = v22[v0];
const v29 = Symbol.matchAll;
const v30 = ("1073741824")[v29];
Object.defineProperty(v9, v30, { enumerable: true, value: 1000 });
Reflect.construct(v30, [v0,2], v27);
let v34;
try { v34 = new v27(v22); } catch (e) {}
const o35 = {
};
try {
    o35.h = v9;
} catch(e36) {
}
try {
    const o37 = {
    };
    o37.h = v9;
    o37.b = v34;
} catch(e38) {
}
try {
    const o39 = {
    };
    o39.h = v9;
    o39.b = v34;
    o39.e = v29;
} catch(e40) {
}
try {
    const o41 = {
    };
    o41.h = v9;
    o41.b = v34;
    o41.a = "1073741824";
} catch(e42) {
}
