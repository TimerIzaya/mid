let v1 = BigUint64Array;
try {
    new v1(2);
} catch(e3) {
}
try {
    new Uint8ClampedArray(2);
} catch(e7) {
}
try {
    new Float32Array(235);
} catch(e11) {
}
class C12 extends Float32Array {
    toString(a14, a15) {
        try {
            super[a15] = Uint8ClampedArray;
        } catch(e16) {
        }
        v1--;
        this[1] += a14;
        return this;
    }
    static 1421 = 2;
    1024;
    static 65537 = 2;
    #a = Float32Array;
}
const v18 = new C12();
new C12();
const v20 = new C12();
try {
    const t32 = "toString";
    t32.toString = 2;
} catch(e24) {
}
const v25 = [v20,v18,C12];
const v26 = [v25];
[v18,v20];
Object.defineProperty(v26, 111, { value: v25 });
C12.h &&= 235;
