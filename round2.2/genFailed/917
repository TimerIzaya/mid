try {
    new Uint8ClampedArray(6);
} catch(e3) {
}
try {
    new Uint32Array(8);
} catch(e7) {
}
try {
    new Uint8Array(6);
} catch(e11) {
}
class C12 extends Uint32Array {
    [-1] = Uint32Array;
    static get d() {
        super.buffer;
        return super.length;
    }
    valueOf(a17, a18) {
        this["join"](..."join", a17, ..."join", ...this);
        return "qWv";
    }
}
const v24 = new C12();
const v25 = new C12();
const v26 = new C12();
function f27(a28, a29, a30, a31) {
    const o54 = {
        set d(a33) {
            try {
                super.grow(6, a30);
            } catch(e35) {
            }
        },
        [Uint8Array](a37, a38, a39) {
            const v47 = a38 && 11;
            const v48 = ~v47;
            4294967295 % v47;
            ~-4294967295;
            !-4294967295;
            Math.pow(11, v48);
            v47 | -4294967295;
            return a29;
        },
    };
    return o54;
}
const v55 = f27(v26, v25, 8, v25);
const v56 = f27(v24, v25, 6, v26);
const v57 = f27(v24, v24, 8, v25);
v55[Symbol.toPrimitive] = v25;
Object.defineProperty(v56, "c", { configurable: true, enumerable: true, set: f27 });
function f61(a62) {
    return v57;
}
class C63 extends f61 {
    #h = Uint8ClampedArray;
    256;
}
