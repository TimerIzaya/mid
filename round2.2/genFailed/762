function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 13;
    } catch(e3) {
    }
    try {
        this.a = 13;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
const v7 = new F0();
class C8 {
    n(a10, a11) {
        try {
            new Float32Array(2745);
        } catch(e15) {
        }
        try {
            new BigUint64Array(181);
        } catch(e19) {
        }
        try {
            new Int16Array(256);
        } catch(e23) {
        }
        return v7;
    }
}
const v24 = new C8();
const v25 = new C8();
const v26 = new C8();
function f27(a28, a29, a30) {
    const o36 = {
        "a": a30,
        __proto__: C8,
        1: a29,
        n(a32, a33, a34) {
            try {
                a34 = a33;
            } catch(e35) {
            }
            return v7;
        },
        [a29]: v24,
        ...v6,
    };
    return o36;
}
const v37 = f27(v26, v6, v24);
const v38 = f27(C8, v25, v37);
const v39 = f27(v7, C8, v26);
const v41 = v39["n"](v38, F0, v39);
v7 >>> v38;
v37[C8];
Object.defineProperty("isInteger", "length", { enumerable: true, value: "symbol" });
try { v41(v37, v25, v38, F0); } catch (e) {}
Object.defineProperty(v24, "c", { configurable: true, get: f27 });
