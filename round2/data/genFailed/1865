function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 255;
    this.f = 255;
}
const v3 = new F0();
const v4 = new F0();
const v5 = new F0();
const v8 = new Array(2259);
function f9() {
    return v8;
}
function f13(a14, a15) {
    const o24 = {
        "d": f9,
        "a": a15,
        [Array]: 1n,
        "e": v5,
        "h": 2259,
        [v4]: a15,
        set f(a17) {
            try { a15["toString"](a17); } catch (e) {}
            a15 ^ a15;
            super.e = 4.0;
        },
    };
    return o24;
}
const v25 = f13(-1024n, f9);
f13(-1024n, v25);
v5[f13(1n, v4)] = v25.e;
try {
    Array(-9);
} catch(e31) {
}
try { Array.isArray(f13); } catch (e) {}
Object.defineProperty(v3, f9, { writable: true, configurable: true, enumerable: true, get: f13, set: f9 });
let {"c":v33,} = v3;
