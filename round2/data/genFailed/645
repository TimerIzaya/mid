[];
[4294967297,1295874430,1156613805,-3,-4,-2,257,31508,268435456];
[3,6,65537,536870912,268435439,-1073741824,-1248190299,-7,-53188];
const v3 = [-256];
[-60856,398726716,-4294967297,-1,12900,-44491,-52195,4];
[-65535,-13,1073741825,-59603,10000];
[-21972,13,13,-2147483649,16];
new Int16Array(10);
new Int16Array(0);
new Uint32Array(9);
const v19 = (a20, a21, a22) => {
    try { a20(); } catch (e) {}
    function f24() {
        return a20;
    }
    return Int16Array;
};
Math.atan2(10, v3);
Math.sinh(10);
const v30 = --0.0;
Math.log(10);
Math.hypot(v30);
try {
    new Float32Array(128);
} catch(e6) {
}
try {
    new BigInt64Array(1993);
} catch(e10) {
}
try {
    new Uint32Array(16);
} catch(e14) {
}
function f15() {
    return BigInt64Array;
}
function f16() {
    return f15;
}
class C17 extends BigInt64Array {
    [128] = BigInt64Array;
    constructor(a19, a20, a21) {
        super(16);
        try {
            super.byteLength = 127n;
        } catch(e22) {
        }
        const o25 = {
            "maxByteLength": 536870889,
        };
        const v27 = new ArrayBuffer(188, o25);
        try {
            new Uint8ClampedArray(v27);
        } catch(e30) {
        }
    }
}
const v31 = new C17(45756n, 1993, 16);
new C17(9223372036854775807n, v31, 1993);
const v33 = new C17(127n, f15, 16);
new f15();
async function f35(a36, a37, a38, a39) {
    'use strict';
    const v40 = f15();
    const v41 = delete a37[1980];
    await v40;
    return v41;
}
const v43 = f35(9223372036854775807n, v33, 45756n, 9223372036854775807n);
try {
    v43.catch(f15);
} catch(e45) {
}
