/a\nb\bc/gyv;
const v4 = /l/mdv;
const v5 = /\u0060/mv;
const v6 = [2.7374303147986415e+306,1.5125033528522138,0.8548023016108985,1.0,-Infinity,-1.7976931348623157e+308,-1e-15,0.3983865000157846];
[0.0,3.2528676622063593,0.654324967579152,-4.0,0.7452685817521427,0.7837426820504582,0.7157404860646017,-1.7976931348623157e+308,-1000000000.0,1000.0];
const v8 = [-993563.4936508359,-728.0255992519456,1e-15,761088.3609094995,7.536579069304416,-6.677606944402617e+307,1000.0,-6.03816905127144,-8.841665901527184e+307];
class C9 {
    set b(a11) {
        new Int32Array(1819);
        new Uint8ClampedArray(7);
        new Float64Array(3007);
    }
    [v8] = v4;
    static #d;
    [-2] = v6;
    #h;
}
new C9();
const v22 = new C9();
const v23 = new C9();
function f24(a25, a26, a27, a28) {
    const o32 = {
        3422919645: a25,
        "c": v8,
        __proto__: "o",
        "g": "setDate",
        "e": v5,
        9: "o",
        ...v4,
        set h(a30) {
            let v29 = this;
            v29 = a30;
            a26[4] = a30;
            try { v29(); } catch (e) {}
        },
        "h": v6,
        "f": "o",
        "a": "o",
    };
    return o32;
}
f24(f24, "o", "o", v22);
f24(v4, "o", "o", v22);
const v35 = f24(v4, "4", "setDate", v23);
v35[v35] = "o";
const v36 = v5 & "o";
const v38 = ["setDate"];
const v39 = v4.compile;
const v40 = Reflect.apply(v39, "o", v38);
v8.length *= v36;
v6[0] = C9;
v5 instanceof v39;
f24(v40, "o", "4", C9);
%PrepareFunctionForOptimization(f24);
f24(v40, "o", "4", C9);
f24(v40, "o", "4", C9);
%OptimizeMaglevOnNextCall(f24);
f24(v40, "o", "4", C9);
function f0() {
}
class C1 extends f0 {
    #toString() {
        try {
            f0();
        } catch(e4) {
        }
        return f0;
    }
    static #e;
    #f;
    static #c = f0;
    [f0] = f0;
}
const v5 = new C1();
const v6 = new C1();
const v7 = new C1();
class C8 extends f0 {
    toString(a10, a11) {
        /Pa+b|c/simyv;
        /W\xe2\x81\xa3/sgyv;
        /\11a*/d;
        return v6;
    }
    static #h = v5;
    1024 = f0;
    static 2078;
    [v7];
}
new C8();
const v17 = new C8();
new C8();
new Array(255);
if (v17 > Array) {
    try {
        C8.e = v7;
    } catch(e23) {
    }
} else {
    Math.sin(255);
    -131196791 >> -131196791;
    -255;
}
