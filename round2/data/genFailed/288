class C3 {
    static #o(a5, a6) {
        a5.b = 0.0;
        try { a6["exec"]("exec", "av8", 0.0); } catch (e) {}
        super[-4096] = a5;
        [1073741824,-1024,1024,53748,55338,-44621,-27972,536870912];
        const v10 = [127,4294967295,9,28545];
        [9223372036854775807,26836,5];
        return v10;
    }
    static [-4096];
    static c;
    [-4096] = "av8";
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = 0.0;
}
const v20 = new F15(-4096, v12, C3);
const v21 = new F15(F15, v14, v14);
const v22 = new F15(v21, v13, v21);
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a29;
}
new F24(v13, v22, C3, v12);
new F24(v22, v14, v12, v13);
new F24(v22, "av8", v12, C3);
const v33 = v20[F15];
v33[v20] = F24;
let v37 = 0;
while (v37 < 9) {
    try { new v33(); } catch (e) {}
    Math.atan(v13);
    -(-321.7901909319669 || -321.7901909319669);
    v37++;
}
try {
    new Int32Array(223);
} catch(e3) {
}
try {
    new Uint16Array(131);
} catch(e7) {
}
try {
    new Uint8Array(255);
} catch(e11) {
}
class C12 extends Uint16Array {
    6 = Uint16Array;
    constructor(a14, a15, a16, a17) {
        super(a15);
        this[223];
        super.filter(a15, this);
        try {
            super[223] = 223;
        } catch(e20) {
        }
    }
    1073741824;
    static [Uint8Array] = Uint16Array;
}
const v21 = new C12(223, Uint16Array, 131, 255);
const v22 = new C12(131, v21, 131, 255);
const v23 = new C12(131, 131, 255, 223);
const v24 = /xha\fb\nc\rd\te\vf*/idmy;
/[2\xf0\x9f\x92\xa9]/gy;
/(?:a+)?hf1?/sigmyv;
const v28 = [223,255];
Reflect.apply(v23.slice, v22, v28);
let v31 = 10;
for (; v31--;) {
    Reflect[4];
    v24[Symbol.hasInstance];
}
