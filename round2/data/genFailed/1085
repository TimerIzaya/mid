function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = 1477378280;
    this.a = 1477378280;
    this.f = 1477378280;
}
const v3 = new F0();
new F0();
const v5 = new F0();
const v7 = new Date();
const v8 = /X7N/gu;
const v9 = /P(?:ab)|cde/yiu;
const v10 = /4/mydu;
class C14 extends Date {
    [10n];
    7 = F0;
    static m(a16, a17, a18, a19) {
        Date(a19);
        a16.length = 0;
        return a17;
    }
    constructor(a23, a24, a25, a26) {
        super();
        try { a25(v8, a23, v10, 10n); } catch (e) {}
    }
    static 2;
    static 70 = v9;
}
new C14(v9, v8, v7, v7);
const v29 = new C14(v8, v9, 4096n, C14);
const v30 = new C14(v10, v9, v5, v3);
let v31 = new Date(v30, v29, 4096n, C14);
++v31;
try { v29.setMilliseconds(v31); } catch (e) {}
if (10n === F0) {
    C14[v5];
} else {
    v10.__proto__ = v29;
}
new F0();
try {
    new Uint8Array(4);
} catch(e6) {
}
try {
    new Int8Array(180);
} catch(e10) {
}
try {
    new Int8Array(208);
} catch(e14) {
}
try {
    new Uint8Array(257);
} catch(e18) {
}
try {
    new Uint32Array(2);
} catch(e22) {
}
try {
    new Uint16Array(2153);
} catch(e26) {
}
129 | 2;
const v30 = new Map();
let v31;
try { v31 = c.m(2153, 2153); } catch (e) {}
function f32(a33, a34) {
    const v36 = [];
    return Reflect.apply(v30.entries, c, v36);
}
f32(129, v31);
