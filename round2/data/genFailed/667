function f0() {
}
function f4(a5) {
    const o11 = {
        "b": a5,
        ["KThlW"]: f0,
        "d": "number",
        get c() {
            function f7(a8, a9) {
                Object.defineProperty(a8, "c", { configurable: true, get: f0 });
                ({"c":a5,"d":a9,} = a8);
                return this;
            }
            return f7("489428446", "number");
        },
        ...a5,
        12: "KThlW",
    };
    return o11;
}
const v12 = f4("489428446");
const v13 = f4("number");
const v14 = f4("489428446");
class C15 {
    get c() {
        [-758847.3867392618];
        [Infinity];
        const v19 = [1.0];
        Object.defineProperty(v19, v13, { configurable: true, value: v19 });
        return v14;
    }
    static #m(a21, a22, a23) {
        const o27 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o27);
        return this;
    }
}
new C15();
new C15();
new C15();
function f35(a36, a37, a38) {
    function f40(a41) {
        try {
            new C15();
        } catch(e43) {
        }
    }
    this.onmessage = f40;
    a36 /= a36;
}
const v47 = [v13,v12,"number"];
const o48 = {
    "arguments": v47,
    "type": "function",
};
new Worker(f35, o48);
class C3 {
    static 170;
    set a(a5) {
        try {
            a5 = "p";
        } catch(e6) {
        }
    }
    set c(a8) {
        try {
            a8.c = "p";
        } catch(e9) {
        }
        try {
            a8.g = 12859;
        } catch(e10) {
        }
    }
}
const v11 = new C3();
const v12 = new C3();
let v13 = new C3();
class C14 extends C3 {
    d;
    set e(a16) {
        new C3();
        let v18 = 0;
        while (v18 < 5) {
            try {
                this.fuck(v12, /(?=)/idmv, true, v11);
            } catch(e24) {
            }
            v18++;
        }
    }
}
new C14();
new C14();
new C14();
try {
    new BigUint64Array(119);
} catch(e32) {
}
try {
    new BigUint64Array(16);
} catch(e36) {
}
try {
    new Uint16Array(129);
} catch(e40) {
}
typeof 859101.0059165282 === "symbol";
%VerifyType(129);
({"a":v13,} = v12);
const t54 = "symbol";
delete t54["symbol"];
/a(?=bbb|bb)c(?:ab)/idmyv;
/((\xed\xa0\x80))\x02/imyv;
/a.q[(x)(x)(x)\1*IK]/simyv;
const o50 = {
    "maxByteLength": 1000,
};
const v52 = new SharedArrayBuffer(30, o50);
try {
    new Float32Array(v52);
} catch(e55) {
}
