let v1 = 1073741824;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = 16082;
    this.c = 16082;
    this.f = 16082;
}
let v6 = new F3(2);
const v7 = new F3(16082);
new F3(F3);
const v12 = [4.0,-2.3686307987011235,1000.0,1000000.0,3.0,-1.7976931348623157e+308];
const v13 = [3.0,2.1383017572466034,-1e-15,-472456.8253363655,-1000000000000.0,-2.220446049250313e-16,1.0,-83.77729274475689];
for (let [...v15] of [-1.0,-3.0,-623.1983379011101,2.0,2.989797789199119e+307,163305.63837046293,-1.7716803538928462e+308]) {
    v7[v15] += 2;
    v13.toString = v15;
}
for (const v16 of v12) {
    Math.clz32(257);
    Math.acos(v1);
    -38615 | F3;
    v6++;
    Math.sqrt(F3);
    ++v1;
    Math.min(F3);
}
class C1 {
    #g;
    static #f = true;
    static toString() {
        for (let v3 = 0; v3 < 76; v3++) {
            try {
                this.e = v3;
            } catch(e4) {
            }
        }
        return this;
    }
    [true];
    static 8 = true;
}
new C1();
new C1();
new C1();
function f11() {
    return C1;
}
function f15(a16, a17, a18, a19) {
    const o23 = {
        get e() {
            if (a18) {
                try {
                    new C1();
                } catch(e22) {
                }
            } else {
                Object.defineProperty(C1, "flags", { set: f11 });
            }
            return this;
        },
        "d": a18,
        "f": a17,
    };
    return o23;
}
const v25 = f15(-1169880984, "flags", f15(-1169880984, "9223372036854775807", C1, 1086759475), 4);
f15(-1169880984, "-1231633778", v25, 4);
let v29 = -7;
let v30 = 948236.6742150651;
let v31 = v30 | v25;
Math.min(v29);
Math.atan2(C1, f15);
~v30;
--v29;
v31++;
v30++;
