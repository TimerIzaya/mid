const v2 = new BigInt64Array(164);
new Int32Array(7);
const v8 = new Uint32Array(255);
let v12;
try { v12 = v8.map(0.03418429111470944, v2); } catch (e) {}
Object.defineProperty(v8, 667795704, { writable: true, value: BigInt64Array });
for (let v13 = 0; v13 < 59; v13++) {
    Math.cos(-8627);
    const v19 = 0.10586862282260101 + 56543;
    Math.cos(v12);
    Math.log(v13);
    56543 | v19;
}
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = "m";
    } catch(e7) {
    }
    try {
        this.e = a5;
    } catch(e8) {
    }
}
new F3("function", "m");
new F3("function", "fnwa");
const v11 = new F3("fnwa", "fnwa");
const v12 = /[a??]/dgv;
const v13 = /a\W(?<a>.)\k<a>/simuy;
/aa+b|c/idgyv;
if (F3 > v12) {
    try {
        new F3("function", "m");
    } catch(e17) {
    }
} else {
    v11 === v13 ? v11 : v13;
}
