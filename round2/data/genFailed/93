const v2 = new Float64Array(661);
const v5 = new BigInt64Array(3004);
new BigInt64Array(9);
new Uint32Array(1024);
const v14 = new Uint8ClampedArray(4096);
const v17 = new Uint8Array(762);
const v18 = [Float64Array,Float64Array];
let v19;
try { v19 = Float64Array(v18); } catch (e) {}
for (let [,v20,v21] of v17) {
    ({"c":v21,} = v21);
    [v17];
    [3004,3004,v20];
    [v18,v17,v19];
}
const v25 = v2[v5];
try {
    v14.includes(v25, -65537);
} catch(e28) {
}
[47654,2147483648,21269,1073741823];
const v1 = [1269815016];
const v2 = [1849219378,-2147483648,15,-256];
const v7 = new WeakMap();
[-13,65537,4294967297,268435440,-4,13955,2,-1983495044,-1024];
const v9 = [165967983];
const v10 = [-9007199254740990,-10,7];
try {
    new Int32Array(92);
} catch(e14) {
}
try {
    new Uint16Array(3);
} catch(e18) {
}
try {
    new BigUint64Array(119);
} catch(e22) {
}
let v23;
try { v23 = v7(119, v1, "species"); } catch (e) {}
Object.defineProperty("species", "h", { enumerable: true, value: v10 });
class C24 extends BigUint64Array {
    [Int32Array] = 119;
    static [v23] = v2;
}
new C24();
new C24();
new C24();
!v9;
