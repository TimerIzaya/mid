let v0 = -65536;
let v6 = [149.41264400967748];
const v7 = [0.7200354152643437,-2.0,7.279734201288133e+307,73.63053274979848,0.7323181748915555,6.20280579549031e+307,-542.0463245805342,1000000.0,-1000.0,-441.4792971558934];
const v8 = [0.04374894535488005,0.5566910125210304,913.6380511761167,1.322345050028491e+308,-170533.31225628534];
class C9 {
    toString(a11, a12) {
        const v13 = this;
        super.d -= 1.5817183368260785;
        v8.length %= a11;
        return 1.5817183368260785;
    }
    constructor(a15, a16) {
        class C17 {
            static #d;
            #b = 0.9996505233495352;
        }
        new C17();
        new C17();
        new C17();
    }
}
const v21 = new C9(v8, 4294967295);
const v22 = new C9(v7, 4294967295);
const v23 = new C9(v22, 4294967295);
const v24 = [935.8466725729809,-9.267587268387993e+307,-1000000000.0,Infinity,1.7976931348623157e+308,1.2263852969896183e+308,1.3425907763355949e+308,-2.2250738585072014e-308];
[0.6751594474514232,-1e-15,1.0191929089746725e+308,1.0500299562928627e+308,4.0,-0.7285255231893668,0.8780387358811578];
let v26 = [-Infinity,-2.2250738585072014e-308,-1.7976931348623157e+308,0.8451098464245334,-2.2250738585072014e-308,0.0];
if (v26 > v23) {
    v6 = v21;
} else {
    v26 = v24;
    v0 = 4294967295;
}
v22.b = v23;
[v7,[v23,[-1073741824,0.4868482175434389,4294967295]],v26,v24,v6];
try {
    new Uint8Array(64);
} catch(e3) {
}
try {
    new Float64Array(129);
} catch(e7) {
}
try {
    new Uint32Array(1000);
} catch(e11) {
}
const v12 = [-5.0,-5.0];
const v13 = [-1000000000.0,-146.51787388966534,461.6907880694853,986435.3244720022,197.66828063733738,1000000.0,2.0,1000000.0,-1.7976931348623157e+308,-229.5417151000172];
[-3.0,-5.935444539994296e+307,Infinity,0.0,2.2250738585072014e-308,-0.4334120589727668,-2.4225049726528063];
[9.28730796213556,1000000000000.0,-7.9627438348827955,0.07904889238114654,-452.4043446833459,580545.627547303];
[-1000000.0,2.220446049250313e-16,672697.041242202,0.5879842395040491,-1.0132362971895777e+304,-1.7976931348623157e+308,1.0];
const v18 = [6.311181509596144e+307,4.0,4.30782563717673e+307,-276.4506830138489];
v13 % v13;
try { v12.concat(v12, -1e-15, v13, -1e-15); } catch (e) {}
new Array(127);
for (let i29 = 0, i30 = 10; i29 < i30; i29++, i30--) {
    const v39 = [1000,i30];
    Reflect.apply(v18.with, v12, v39);
}
