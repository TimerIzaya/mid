const v5 = new Uint16Array(2);
new Uint8ClampedArray(3);
const v11 = new Int16Array(11);
/a(?=b)/mydv;
const v13 = /h/gmv;
const v14 = /a|bc/gidv;
v13.unicode;
v5[9] = v5;
Object.defineProperty(v5, -2, { enumerable: true, value: 33933 });
let v16 = 0;
do {
    v11[Int16Array] = v14;
    -2 < Uint16Array;
    v16++;
} while (v16 < 3)
try {
    new Int8Array(1024);
} catch(e6) {
}
try {
    new Float32Array(257);
} catch(e10) {
}
try {
    new Float32Array(3);
} catch(e14) {
}
try {
    new Int32Array(2);
} catch(e18) {
}
try {
    new BigInt64Array(16);
} catch(e22) {
}
try {
    new Uint8Array(128);
} catch(e26) {
}
const v28 = ["-14",3,128];
const v29 = Reflect.construct(Float32Array, v28, Float32Array);
v29.__proto__;
("-14").length;
try {
    const t29 = "tw";
    t29[Reflect] = v28;
} catch(e32) {
}
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = Int32Array;
    } catch(e37) {
    }
}
new F33(v29, "-14");
new F33(v29, "tw");
new F33("jgW", "jgW");
