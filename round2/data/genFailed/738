[];
let v3 = new Int32Array(64);
const v6 = new BigUint64Array(127);
const v9 = new Uint8ClampedArray(1448);
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a12;
    this.g = a13;
}
const v14 = new F10(64, 64);
const v15 = new F10(127, 127);
let v16 = new F10(127, 1448);
v16 <<= v14;
v3 *= v3;
v9[v9] = BigUint64Array;
for (let [v17,v18,v19] of v9) {
    v6.__proto__;
    for (let v21 = 0; v21 < 32; v21++) {
        v15["p" + v21] = v21;
    }
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 2;
    } catch(e3) {
    }
    try {
        this.b = 2;
    } catch(e4) {
    }
    try {
        this.h = 2;
    } catch(e5) {
    }
}
new F0();
const v7 = new F0();
const v8 = new F0();
class C9 extends F0 {
    128;
    o(a11) {
        new F0();
        super.c <<= a11;
        return v8;
    }
    [v7];
    static {
        this << this;
        try {
            this.__proto__ = this;
        } catch(e15) {
        }
    }
}
const v16 = new C9();
new C9();
const v18 = new C9();
function f22() {
    return 536870912n;
}
const v26 = C9[10];
268435440 in v26;
const v29 = new Map();
try { v16.o(v29, -4096, v29, -427537917n, v26); } catch (e) {}
v18.h;
