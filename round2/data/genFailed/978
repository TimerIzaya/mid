const v2 = new Uint8ClampedArray(255);
const v5 = new Int32Array(9);
const v8 = new Int32Array(1);
[Int32Array,v8,255,v5,1];
const v10 = [Int32Array];
const v11 = [v5];
class C12 {
    static set e(a14) {
        const v15 = `
            v8.length = 4294967295;
            this[4294967295];
        `;
        eval(v15);
    }
    get e() {
        v11["some"](...v2, ..."some", Int32Array, ...v10, this, Int32Array);
        const o24 = {
        };
        o24.a = 9;
        const o25 = {
        };
        o25.a = 9;
        o25.e = v8;
        const o26 = {
        };
        o26.a = 9;
        o26.e = v8;
        o26.f = this;
        const o27 = {
        };
        o27.a = 9;
        o27.e = v8;
        o27.f = 255;
        return o27;
    }
}
new C12();
new C12();
new C12();
new WeakMap();
[536870889,-65537,-268435456,-6,1353792144,-9223372036854775808,9007199254740990];
const v34 = [-9007199254740990,-36522,9007199254740991,12,536870889];
[-9007199254740991,536870889,256,745456904,1702034260,-17012];
for (let v36 = 0; v36 < 46; v36++) {
    try {
    const t0 = 255;
    t0();
    } catch (e) {}
    new WeakMap(v11);
    v10[4] = v34;
    new Int32Array(129);
    new Uint16Array(1000);
    new Int8Array(3);
}
class C3 {
    valueOf(a5) {
        for (const v6 of a5) {
            let {"b":v7,"e":v8,"length":v9,} = "JL";
            /(?=)?/dgu;
            /l[\cZ]?/dy;
            /i/gv;
        }
        return 45510;
    }
    c = "JL";
    d = 45510;
    static #f = 129;
    #h = 45510;
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 129;
    } catch(e22) {
    }
}
new F16(C3, v13, v14, v13);
new F16(C3, v13, v14, v15);
new F16(C3, v15, C3, v15);
try {
    new BigInt64Array(230);
} catch(e29) {
}
try {
    new Uint16Array(10);
} catch(e33) {
}
try {
    new Uint16Array(0);
} catch(e37) {
}
for (let i40 = 0, i41 = 10; i40 < i41; i40++, i41--) {
    const v50 = Symbol.iterator;
    const o59 = {
        [v50]() {
            let v52 = 10;
            const o58 = {
                next() {
                    v52--;
                    const v56 = v52 == 0;
                    const o57 = {
                        "done": v56,
                        "value": v52,
                    };
                    return o57;
                },
            };
            return o58;
        },
    };
}
