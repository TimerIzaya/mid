const v0 = /V[\cA]7/myisdv;
const v1 = /[^(?:ab)|cde[^(?<=)]]/gmyv;
const v2 = /X/gmisd;
class C3 {
    static set d(a5) {
        --a5;
    }
    n(a11, a12) {
        let v13;
        try { v13 = this(a12, v2, a11, v1, v2); } catch (e) {}
        let v14;
        try { v14 = v1.test(v13); } catch (e) {}
        const v15 = v1 || a12;
        const v16 = [v14,v1,v14,v14,v15];
        [v0,[v13,v2,v13,a12,v15]];
        return v16;
    }
}
const v19 = new C3();
const v20 = new C3();
const v21 = new C3();
function F22(a24, a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a25;
}
new F22(v2, v2, v20, v20);
new F22(v1, v0, v20, v19);
let v30 = new F22(v2, v2, v21, v21);
const v31 = [4.0,-2.0,7.896162918695143,-1000000000.0,1000000000.0];
[1.0,-1.6632596024197979e+308,2.220446049250313e-16,-1.8109094771290587e+307,0.0,-6.304561652230843e+307,-9.1556652721791,-Infinity];
[-1.0,-1.3576053169818594e+308,1000000.0,1.597763898722223e+308,0.0,-2.0,-444.77139904015496,-Infinity,-680.5715414185418];
try {
    new Float32Array(46929, -1, -16139);
} catch(e39) {
}
try { v21(v1, v31, F22, v20); } catch (e) {}
let v43 = -4294967297;
let v45 = --v30;
Math.tan(78762.76789362589);
Math.exp(78762.76789362589);
const v48 = v45++;
v43--;
Math.log2(v48);
[65295];
let v1 = [-1627310942,97598070];
[268435441,65537,-4096,-2147483647,-5,65535,-9007199254740992,1,14,46852];
const v3 = [-1.725318911541091e+308];
const v4 = [4.0,0.0,-1000000.0];
const v5 = [-1.7976931348623157e+308,1000000000000.0,-4.8809623830406785,456.64495382245605,-288135.601037586,-2.2250738585072014e-308,828420.1383377453];
try {
    new Uint8ClampedArray(5);
} catch(e9) {
}
let v11 = Int8Array;
try {
    new v11(112);
} catch(e13) {
}
try {
    new Float32Array(7);
} catch(e17) {
}
const v19 = new WeakMap();
class C20 extends Float32Array {
    n(a22, a23) {
        try { new a23(); } catch (e) {}
        try { v19.set(a23, v11); } catch (e) {}
        this[129];
        return -6;
    }
    static #p(a31, a32) {
        delete v5[5];
        return a32;
    }
    2184 = v3;
    [v5] = Uint8ClampedArray;
}
new C20();
new C20();
let v36 = new C20();
({"f":v1,"length":v36,...v11} = v1);
let {"d":v37,"length":v38,} = v4;
v19 / v19;
const v42 = v11 & v11;
v11 + v19;
Math.floor(v42);
const o47 = {
    "maxByteLength": 3256974255,
};
const v49 = new SharedArrayBuffer(3558, o47);
try {
    new BigUint64Array(v49);
} catch(e52) {
}
