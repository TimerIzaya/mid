function f6() {
    return "i";
}
const v8 = ["i",[-1750682552,2147483648,"getUTCDate",f6,"getUTCDate"]];
const v9 = [-1750682552,1104131247,2147483648,"i"];
const v13 = f6();
new f6(...v13, ...v8, v13, ...v13, -65537n, ..."i");
v9[0] %= 2147483648;
const t8 = "bigint";
t8.__proto__ = "bigint";
const o15 = {
    "has": f6,
    "isExtensible": f6,
};
new Proxy("getUTCDate", o15);
new Map();
const v2 = /e426[\x01]*/idyv;
const v3 = /u(a)\1?/sgv;
const v4 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/siy;
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v4;
    } catch(e9) {
    }
    try {
        this.h = a8;
    } catch(e10) {
    }
    try {
        this.c = Map;
    } catch(e11) {
    }
}
new F5(v3, v3);
const v13 = new F5(v4, v2);
const v14 = new F5(v4, v13);
const v15 = [128,128,1073741824,-9007199254740990,53244,-273018907];
const v16 = [-65535,-4294967296,4096,128];
[64,268435441,-54567,536870889,-746746335,-7499,9007199254740990,-2147483649,10];
v16.slice(65536n, ...v15, v3, v14);
try {
    new Float64Array(137);
} catch(e25) {
}
try {
    new Float64Array(183);
} catch(e29) {
}
try {
    new Uint8Array(1000);
} catch(e33) {
}
