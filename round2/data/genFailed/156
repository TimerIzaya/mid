let v3 = [-3.0,-1.0,-5.0];
[-1.7468508128353558e+308,-1000000.0,9.157349388993945e+307,-1000000.0,3.0,-1.7976931348623157e+308,-1000000000000.0,3.0];
const v5 = [-3.0,2.220446049250313e-16];
[-2.0,1.7976931348623157e+308,5.0,500.36398269055303,-1e-15];
const v8 = [0.0,-5.0,-99184.86411882017,1e-15,-204.12650883777883,915845.0266211368,-1.5490000925812035e+308,3.093049779088209e+307];
const v9 = [0.8704532505835215,-132.11192160751614,666724.5357291526,-1000000000.0,Infinity,1000000000000.0,-1000.0,-359990.1644650983,502257.2690056886,-6.193748043888634];
class C10 {
    #f = v9;
    static #n(a12, a13, a14, a15) {
        this[3] >>>= 3;
        return a12;
    }
    set f(a17) {
        super.a;
        super.f = -2015863347;
        g = v3;
        v9.length;
    }
}
new C10();
new C10();
const v23 = new C10();
let v24 = v23 >> v23;
v24 = 3;
let v25 = 2n;
v3 >>>= v5;
Math.cbrt(v8);
const v33 = !(++v25);
Math.exp(v25);
Math.asin(v33);
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a5;
    } catch(e7) {
    }
}
new F3("1006580983", "-41271");
const v9 = new F3("b", "b");
const v10 = new F3("1006580983", F3);
try {
    new BigUint64Array(16);
} catch(e14) {
}
try {
    new Int32Array(3561);
} catch(e18) {
}
try {
    new Uint32Array(2);
} catch(e22) {
}
let v27;
try { v27 = v9(F3, "-41271", false); } catch (e) {}
v27.e >>= v27;
BigUint64Array || 16;
try { v27(); } catch (e) {}
const v31 = [v27,v27];
Reflect.apply(("-41271").padStart, v10, v31);
let v37 = 2.046078578922458;
++v37;
const v39 = 4294967295 && 4294967295;
Math.abs(BigUint64Array);
v39 * v37;
