new Set();
const v5 = /\u{12345}\x0f+/misv;
const v6 = /[PE[\p{Script_Extensions=Mongolian}&&\p{Number}]]/gmyu;
const v7 = /j\P{scx=Greek}/md;
class C8 {
    static set a(a10) {
        -v7;
        try {
            const o12 = {
            };
            new Set(o12);
        } catch(e14) {
        }
    }
    constructor(a16, a17, a18, a19) {
        v6 % a19;
        new Uint32Array(2);
        new BigUint64Array(3611);
        new Uint32Array(1024);
    }
}
const v30 = new C8(v5, v5, v5, v5);
const v31 = new C8(v7, v5, v7, v7);
new C8(v6, v6, v7, v31);
let v36;
try { v36 = v30.o(4n); } catch (e) {}
for (const v37 in v36) {
    v30[-2] = v37;
    4n instanceof C8;
}
v30 / v31;
delete C8[-1];
v7[Set];
v31.e = v36;
const v0 = /(?:a?)+/sdgmy;
/((x)(x)(x)\2*)/sgmuy;
const v2 = /01\w|\d[(?:a{5,1000000}){3,1000000}Gxyz{1,}?a[a]btm]/sgmu;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v2;
    } catch(e6) {
    }
}
const v7 = new F3(F3);
const v8 = new F3(v2);
const v9 = new F3(v7);
try {
    new Float64Array(129);
} catch(e13) {
}
try {
    new Float32Array(1189);
} catch(e17) {
}
try {
    new BigUint64Array(3368);
} catch(e21) {
}
delete v9[v0];
try { BigUint64Array(v9); } catch (e) {}
v7[v8];
try {
    new Uint8ClampedArray(11);
} catch(e28) {
}
try {
    new Uint8Array(15);
} catch(e32) {
}
try {
    new Int8Array(3443);
} catch(e36) {
}
