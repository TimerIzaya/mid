class C3 {
    static #h;
    constructor(a5, a6) {
        for (let v7 = 0; v7 < 32; v7++) {
            a5["p" + v7] = v7;
        }
    }
    static {
        let v11 = 10;
        for (; v11--;) {
            const t10 = "a";
            t10[-1000.0] = -4.681234491254267;
            this[1000];
            let [] = "a";
        }
    }
}
const v14 = new C3("a", -1000.0);
const v15 = new C3(v14, v14);
const v16 = new C3(v15, -4.681234491254267);
const v20 = [-109338278,9,-2,257,2147483649,-9007199254740991,-2336];
[-32091,1];
const v22 = [44115,-2,223794626,128,49674];
if (v20 > 1000000.0) {
    v16.e /= -1000.0;
} else {
    const v31 = v22 >> 1135891907;
    Math.asinh(v22);
    let v33 = -v31;
    1135891907 >> 1135891907;
    --v33;
}
function f3(a4, a5) {
    const o26 = {
        p(a7) {
            [this];
            [this,[a7,-2.0,-2.0],a5];
            return a7;
        },
        m(a12, a13) {
            function F14(a16, a17, a18, a19) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a18;
                } catch(e20) {
                }
                try {
                    this.b = -1.4080688115862806e+308;
                } catch(e21) {
                }
                try {
                    this.e = -1.4080688115862806e+308;
                } catch(e22) {
                }
            }
            new F14(a13, a12, 1000000000.0, a13);
            new F14(a13, a13, a5, a4);
            const v25 = new F14(a12, a12, a12, -1.4080688115862806e+308);
            return v25;
        },
    };
    return o26;
}
const v27 = f3(1000000000.0, -1.4080688115862806e+308);
f3(-2.0, -1.4080688115862806e+308);
const v29 = f3(-2.0, -2.0);
class C33 extends f3 {
    constructor(a35, a36, a37) {
        super(a36, -1.4080688115862806e+308);
        throw -2.0;
        try {
            new Int32Array(128);
        } catch(e41) {
        }
        try {
            new Uint32Array(255);
        } catch(e45) {
        }
        try {
            new Int16Array(127);
        } catch(e49) {
        }
    }
}
const v50 = new C33(v29, -2.0, "size");
new C33(v50, 1000000000.0, "string");
const v52 = new C33(v29, 1000000000.0, "size");
const v54 = [];
Reflect.apply(v52.p, v52, v54);
"string" >>> Error;
function F59(a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a61;
    } catch(e63) {
    }
    try {
        this.d = a62;
    } catch(e64) {
    }
    try {
        this.h = v27;
    } catch(e65) {
    }
}
new F59(-2.0, -1.4080688115862806e+308);
new F59(-1.4080688115862806e+308, -2.0);
new F59(-2.0, -2.0);
