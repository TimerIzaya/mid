[255,-2147483647,256,-625470032,-13505,-21043];
[9,-459101265,50374];
[-4294967295,2112400520,3,11208,-4,11596,-1615350394];
[434080.8588948671,0.9530789681565153,4.0,-2.2250738585072014e-308,-1000000000.0,-0.3906626311185555,2.2250738585072014e-308,1.0,-3.0,462326.79972124496];
[-2.7666520513912192e+306,0.8780313152845847,1000000.0,NaN];
[-1.0];
/[xyz{1,32}?(?:ab)|cdeF?]/gmiv;
/mG/gdu;
/\b/gyidv;
[-2147483648,255];
[-784026580,-49241,1302064895,4940,4,-14,1647166631,-9223372036854775807,-399331655,-42164];
[65537,-10,848411480,-4294967296,11,8,12,257];
new Float64Array(3007);
new BigInt64Array(16);
new Uint8ClampedArray(127);
const v0 = /[\p{Script_Extensions=Mongolian}&&\p{Number}]/v;
const v1 = /y.(?=.)/sdguy;
const v2 = /(?<=a)/suy;
class C3 {
    static #f;
    [v0] = v2;
    static #a = v0;
    static {
        Object.defineProperty(this, "b", { writable: true, value: this });
        const o8 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o8);
    }
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
class C16 extends C3 {
    #o(a18, a19, a20) {
        const v21 = super.e;
        try { v21(v1, v0, this, -3.0, a20); } catch (e) {}
        return -4.573790366376345;
    }
    static [C3];
    [v1] = -3.0;
    constructor(a24, a25) {
        super();
        const v26 = v2[1e-15];
        function F27(a29, a30, a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = v0;
            } catch(e33) {
            }
            try {
                this.d = a31;
            } catch(e34) {
            }
            try {
                this.f = a32;
            } catch(e35) {
            }
        }
        new F27(-4.573790366376345, v10, v11, v2);
        const v37 = new F27(-4.573790366376345, -4.573790366376345, v1, v26);
        new F27(a24, v37, v12, this);
    }
}
new C16(v11, -3.0);
new C16(v12, 1e-15);
const v41 = new C16(v1, v1);
for (let [,v42,v43,...v44] of v41) {
    v11.d;
    const v47 = Symbol.iterator;
    const o56 = {
        [v47]() {
            let v49 = 10;
            const o55 = {
                next() {
                    v49--;
                    const v53 = v49 == 0;
                    const o54 = {
                        "done": v53,
                        "value": v49,
                    };
                    return o54;
                },
            };
            return o55;
        },
    };
}
