function f0() {
}
const v3 = new Uint8ClampedArray(151);
new Float32Array(256);
new BigUint64Array(3537);
v3.buffer;
Math.sign(10);
let v21 = 60654n / 10;
-411.0017048654737 ^ -4096n;
--v21;
Math.exp(-4096n);
try {
    new Uint32Array(1000);
} catch(e3) {
}
try {
    new Float64Array(0);
} catch(e7) {
}
try {
    new Int16Array(6);
} catch(e11) {
}
function f12() {
    return Int16Array;
}
class C13 {
    [Uint32Array] = f12;
    constructor(a15, a16) {
        const v18 = Symbol.toPrimitive;
        a16[v18] = v18;
        a16?.[v18];
        delete a16?.[3];
    }
    a;
    #f = Int16Array;
    [1000] = 1000;
}
const v21 = new C13(6, Uint32Array);
new C13(0, v21);
new C13(6, 0);
892075672 ^ 1000;
let v28 = 0;
do {
    v21.a instanceof Uint32Array;
    try {
        C13[1000] = -536870912;
    } catch(e31) {
    }
    v28++;
} while (v28 < 1)
