const v5 = new Int8Array(8);
let v6 = 158;
const v8 = new Uint32Array(v6);
const v11 = new Uint32Array(4096);
class C12 extends Int8Array {
    6 = -392.6651344367838;
    get e() {
        let v13 = this;
        v13.byteOffset;
        v13 |= v13;
        v6 = v13;
        const v16 = Symbol.matchAll;
        v8[v16] = v5;
        v16.__proto__;
        return v5;
    }
    #c = Uint32Array;
    static #d = Uint32Array;
}
const v18 = new C12();
const v19 = new C12();
const v20 = new C12();
v19[4096] = v6;
[v11,Uint32Array,v20,v19,v18];
const v22 = [4096,4096,4096,v11,8];
[v19,v22,v19,v22,v22];
const o24 = {
};
o24.f = -392.6651344367838;
const o25 = {
};
o25.f = -392.6651344367838;
o25.c = Uint32Array;
const o26 = {
};
o26.f = -392.6651344367838;
o26.c = Uint32Array;
o26.a = v11;
const o27 = {
};
o27.f = -392.6651344367838;
o27.c = Uint32Array;
o27.a = v6;
function f3() {
    return -9.989230157302567;
}
const v4 = [-9.989230157302567,-9.989230157302567];
const v5 = [-9.989230157302567,4.062345510093795];
const v6 = [-9.989230157302567,v5,4.062345510093795,v5,v5];
function f7() {
    return v6;
}
class C8 {
    static {
        const o13 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o13);
    }
    [4.062345510093795];
}
new C8();
new C8();
const v17 = new C8();
v4.filter(0.7856414097374288, v17, v17, 0.7856414097374288);
const v19 = delete v5?.length;
function f20(a21, a22) {
}
new Promise(f20);
try { new v19(v17, f20, f7); } catch (e) {}
