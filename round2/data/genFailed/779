let v2 = 2.0;
class C3 {
    [1.2090271765190206e+308] = 1;
    static f = 1.2090271765190206e+308;
    constructor(a5) {
        f = a5;
        try {
            super.toString(v2, a5, this, 1.2090271765190206e+308);
        } catch(e7) {
        }
        this.c = 1.2090271765190206e+308;
        this[1];
        v2 = a5;
    }
    a;
    static b;
    h;
}
const v9 = new C3(1);
const v10 = new C3(C3);
const v11 = new C3(v10);
class C12 extends C3 {
    static #valueOf(a14, a15, a16) {
        let v17;
        try { v17 = new a14(a14); } catch (e) {}
        const v18 = v11.a;
        this.h >>>= v17;
        let v19;
        try { v19 = v2(v2, 1.2090271765190206e+308, v18, this); } catch (e) {}
        return v19;
    }
    64 = v9;
    constructor(a21, a22) {
        super(v10);
        Object.defineProperty(a22, "a", { writable: true, configurable: true, value: 1.2090271765190206e+308 });
        a21[a21] / v10;
        new BigInt64Array(3);
        new BigInt64Array(3);
        new Uint8Array(95);
    }
}
const v34 = new C12(v9, v9);
const v35 = new C12(v11, v34);
new C12(v2, v11);
new Int16Array(2);
new Int16Array(8);
new Int16Array(255);
let v46 = 0;
while (v46 < 4) {
    v35[C12] /= 1.2090271765190206e+308;
    C12 !== 255 ? C12 : 255;
    new WeakSet();
    v46++;
}
class C4 {
    m(a6) {
        try {
            super.b = this;
        } catch(e7) {
        }
        return this;
    }
    static e;
    static ["z"];
    static [true];
}
new C4();
const v9 = new C4();
const v10 = new C4();
let v14 = 0;
do {
    function f15(a16, a17, a18) {
        Object.defineProperty(a17, "MIN_SAFE_INTEGER", { enumerable: true, value: v10 });
        true & 2;
        let v22 = true + true;
        v22++;
        Math.min(2);
        return a16;
    }
    f15(v9, "symbol", C4);
    v14++;
} while (v14 < 8)
