function f3(a4) {
    const o11 = {
        "e": a4,
        __proto__: "41002",
        "g": a4,
        "f": "41002",
        ["o"]: a4,
        get b() {
            function f6() {
                return "41002";
            }
            const o7 = {
            };
            o7.f = f6;
            const o8 = {
            };
            o8.f = f6;
            o8.g = "n";
            const o9 = {
            };
            o9.f = f6;
            o9.g = "n";
            o9.e = "o";
            const o10 = {
            };
            o10.f = f6;
            o10.g = "n";
            o10.e = "41002";
            return "41002";
        },
    };
    return o11;
}
f3("o");
const v13 = f3("n");
f3("41002");
function f15() {
    return v13;
}
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a20;
    this.f = "41002";
    this.c = a18;
}
const v22 = new F16("o", "n", "41002", "o");
new F16("41002", v22, "o", "o");
const v24 = new F16("n", f15, "41002", "n");
Object.defineProperty(v24, v24, { writable: true, enumerable: true, get: f3 });
for (let i26 = 0; i26 < 8; i26++) {
    new f15();
    var f = v24;
}
const v0 = [16,-11];
const v1 = [9,536870888,268435441,-40933,-256,16684,12,-9223372036854775807,4096,9];
const v2 = [-65535,2049726341];
function f6(a7, a8) {
    const o23 = {
        [a8](a10, a11) {
            try {
                this.fuck(a11, false);
            } catch(e14) {
            }
            function F15(a17, a18) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = this;
                } catch(e19) {
                }
            }
            new F15(a11, a8);
            new F15(v2, v1);
            new F15(v0, v1);
            return v0;
        },
    };
    return o23;
}
f6(v2, v0);
f6(v0, v1);
f6(v0, v1);
try {
    new BigUint64Array(10);
} catch(e33) {
}
try {
    new Float32Array(7);
} catch(e37) {
}
try {
    new Float64Array(5);
} catch(e41) {
}
for (let v42 = 0; v42 < 32; v42++) {
    const t41 = "d1K";
    t41["p" + v42] = v42;
}
Object.defineProperty("boolean", Float64Array, { enumerable: true, get: f6 });
new Float32Array(v0, 10, 10);
const v47 = Symbol.toPrimitive;
v1[v47] = v47;
