const v1 = new Map();
const v2 = [1000.0,-9.41646732788863,1.7976931348623157e+308,-6.664593830130247e+307,-68.28292506137723,-Infinity,-1e-15];
const v3 = [1.5626773242868413e+308,-318.94536963246094,1.7976931348623157e+308,5.021497311707578e+307,-1000000000.0,876445.4379545089];
const v4 = [1000000.0,0.0,1000000000000.0,-758724.679415967,-Infinity,2.0,773.8718833100986,0.0,0.00382777216168273,0.9430438791993915];
class C5 extends Map {
    p(a7) {
        super.size -= a7;
        try { v4.flatMap(false, ...this, Map, ...v4, a7, ...false); } catch (e) {}
        %VerifyType(v3);
        return v2;
    }
    constructor(a12, a13) {
        super(a12);
        let v14;
        try { v14 = this.delete(v2); } catch (e) {}
        let v15;
        try { v15 = v4.findLastIndex(v14, this); } catch (e) {}
        try { v14(v15, v1, v2, v15); } catch (e) {}
        const o17 = {
        };
        new Proxy(this, o17);
    }
}
new C5(v3, v3);
let v21 = new C5(v2, v4);
const v22 = new C5(v4, v4);
v1[Map];
v21 = v22;
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a36;
    this.b = 23657n;
}
const v37 = new F31(v3, v21, Map, "f");
const v38 = new F31(v2, v22, v21, v37);
const v39 = new F31(v2, v21, v38, "f");
try {
    v39.valueOf(true, /[\cZ]/gysdu, "-201");
} catch(e43) {
}
