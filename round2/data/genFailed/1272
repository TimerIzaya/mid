const v1 = new Set();
class C2 extends Set {
    m(a4, a5) {
        return v1;
    }
    static #p(a10) {
        [-536870912,5,-5];
        const v12 = [-728687811,-65537,4096,1,-1049095309,14,2147483648,366152170,536870887,1849638570];
        [-1924844447,-1132780817,2147483647];
        v12[v12];
        return v1;
    }
}
const v15 = new C2();
const v16 = new C2();
const v17 = new C2();
const v18 = [1024,-1625778462,1386322242,16883,1,536870889,-3874];
[-65537,129];
[512,-8,-1073741824,4096,1,-536870912,9007199254740991,-4294967297];
const v22 = new WeakMap();
const v23 = C2 >> v22;
let v24;
try { v24 = v16.has(v23); } catch (e) {}
for (const v25 of v17) {
    try {
        new Set(v1);
    } catch(e27) {
    }
}
v15.e = v18;
Reflect.construct(v24, [v18,Reflect,v24,v1,v16], C2);
class C3 {
    static p(a5) {
        const v6 = this.h;
        let v7;
        try { v7 = v6(1e-15, a5, v6, 1000.0, a5, v6); } catch (e) {}
        v7 && 1000.0;
        return v6;
    }
    constructor(a10, a11) {
        let v12;
        try { v12 = a10(1e-15, a11, 1000.0, 1000.0, a11); } catch (e) {}
        try { v12(a10, a10, this, this, v12); } catch (e) {}
        v12[Symbol.species];
    }
}
new C3(1e-15, 4.435725500161766e+307);
new C3(1e-15, 1000.0);
new C3(1000.0, 1000.0);
Reflect.construct(C3, [1e-15,1000.0], C3);
try {
    new Uint16Array(4096);
} catch(e32) {
}
try {
    new BigUint64Array(113);
} catch(e36) {
}
try {
    new BigUint64Array(0);
} catch(e40) {
}
