function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 4;
    this.e = 4;
    this.a = 4;
}
const v3 = new F0();
const v4 = new F0();
const v5 = new F0();
const v6 = [1040478147,-5,-2147483647];
const v7 = [3,-3,-39542,2118895126];
const v8 = [2147483648,512,-2147483649,-807723866,-781,298993179,33442,4096];
class C9 {
    constructor(a11, a12) {
        new Map();
    }
    static 2147483649 = v8;
    static p(a16, a17, a18) {
        class C20 extends v7.constructor {
            8 = v4;
            9;
            [-1];
        }
        const v21 = new C20();
        return v21;
    }
}
const v22 = new C9(v5, v3);
const v23 = new C9(v22, v22);
const v24 = new C9(C9, v4);
const v26 = new Date();
new Uint32Array(256);
new Uint8ClampedArray(2180);
const v35 = new Uint8ClampedArray(16);
v35 && v6;
Object.defineProperty(v23, 257, { writable: true, get: Date });
new Uint8ClampedArray(v24, 16, 16);
function f38(a39) {
    return v23;
}
class C40 extends f38 {
    h;
    [v8];
    [v26];
}
try {
    new Int16Array(4);
} catch(e3) {
}
try {
    new Int16Array(570);
} catch(e7) {
}
try {
    new Float64Array(3876);
} catch(e11) {
}
const v13 = new Set();
[2,-65537];
[285240268,-1324382208,10,4096,65536,12,4294967297,3];
const v16 = [-65536,-6,1000,1031541960,842148757,2101861725,-4294967295];
class C17 extends Int16Array {
    set f(a19) {
        try {
            this[a19] = this;
        } catch(e20) {
        }
    }
    static 252 = Int16Array;
    [-1] = Float64Array;
    #d = v13;
    static c = 570;
    static #h;
    static #g = 3876;
}
new C17();
const v22 = new C17();
const v23 = new C17();
try {
    v23[4096] = 3876;
} catch(e24) {
}
try {
    const v25 = /v/su;
    C17.fuck(v25, v22, v25);
} catch(e27) {
}
try {
    v16[v22] = C17;
} catch(e28) {
}
