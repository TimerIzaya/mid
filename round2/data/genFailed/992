const v6 = [549679159,1073741823];
const v7 = [-1184935301,1073741824];
const v8 = [9,257];
class C9 {
    b = 766070517;
    static p(a11, a12) {
        const v13 = v6 * v8;
        throw v13;
        [4.0,v13,v13,v6,9007199254740991];
        [a11,[true,9007199254740991,v13,49817],49817,true,9007199254740991];
        return 49817;
    }
    static e = v8;
    #a;
    [49817];
}
new C9();
new C9();
new C9();
v7.length = 9007199254740991;
function f21(a22, a23, a24, a25) {
    v8[64] = a22;
    new Int16Array(7);
    new Int8Array(126);
    const v34 = new BigInt64Array(134);
    return v34;
}
f21(9007199254740991, v8, 766070517, 9007199254740991);
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -0.0;
    } catch(e7) {
    }
    try {
        this.g = 695.0911047145194;
    } catch(e8) {
    }
}
const v9 = new F3(1.2116994053995072, 695.0911047145194);
new F3(695.0911047145194, 695.0911047145194);
const v11 = new F3(-0.0, 1.2116994053995072);
function f12() {
    return 695.0911047145194;
}
v11[695.0911047145194] &&= 695.0911047145194;
for (let v19 = 0; v19 < 93; v19++) {
    for (const v20 of v19) {
        v9.a;
    }
    try {
        new Uint8ClampedArray(213);
    } catch(e25) {
    }
    try {
        new Float32Array(6);
    } catch(e29) {
    }
    try {
        new Int8Array(2476);
    } catch(e33) {
    }
}
