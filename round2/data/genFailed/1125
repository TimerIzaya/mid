[2147483648,2108848152,127,-19698,-9007199254740991,834505981,13055];
const v1 = [44366,-2147483647,10,65537,-38231];
const v2 = [57823,268435439,-1073,-52243,65523,45694,672160299,-1497840902];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v2;
    this.f = a5;
}
new F3(v1);
new F3(v1);
new F3(v1);
const v11 = new Float64Array(255);
new Int8Array(37);
new Int8Array(257);
const v21 = !(~953046592);
Math.asinh(953046592);
v21 >> v21;
const v24 = Math.min(v21);
v24 * 257;
v11[v2];
const o27 = {
};
new Proxy(v24, o27);
const v0 = /w/simv;
const v1 = /\b?/idyv;
const v2 = /xyz{1,32}/gmuy;
class C3 {
    get e() {
        const v5 = v0[4];
        if (v5 === v1) {
            let v7;
            try { v7 = v5(v2, v5, v1, v1, v0); } catch (e) {}
            try {
                this[v7] = v7;
            } catch(e8) {
            }
        } else {
            v2.__proto__;
            try { v5(); } catch (e) {}
        }
        return v5;
    }
}
new C3();
new C3();
new C3();
const v14 = [3.4544803642076272e+305,4.0,7.256583275451467e+307,0.3919827487008819,-1.757214129516118];
[0.06842867826311627,-8.601845093581883,-0.0,901884.1828193974];
[79307.36960193305,2.220446049250313e-16,-8.907392834356345e+307,1.7976931348623157e+308];
try {
    new Float64Array(1024);
} catch(e20) {
}
try {
    new Uint8ClampedArray(1);
} catch(e24) {
}
try {
    new BigInt64Array(255);
} catch(e28) {
}
v14.length;
let v30 = 0;
while (v30 < 5) {
    Reflect.construct(BigInt64Array, [Reflect], Float64Array);
    v30++;
}
