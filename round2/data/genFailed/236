function f0() {
    const o15 = {
        set f(a5) {
            const o6 = {
                3: a5,
            };
            try { o6.m(-5.0, 0.0868494227102461, -5.0, -5.0); } catch (e) {}
            --a5;
            Math.random();
            536870887 || -5.0;
            Math.clz32(-5.0);
        },
    };
    return o15;
}
const v16 = f0();
const v17 = f0();
const v18 = f0();
class C19 extends f0 {
    static #m(a21) {
        return -1e-15;
    }
    static n(a26) {
        v18[1185763618] = v17;
        let v27;
        try { v27 = v18.setDate(this, v17, a26, v17, a26); } catch (e) {}
        try { v17["fromCharCode"](v16, v18, a26, this); } catch (e) {}
        delete a26[v27];
        return f0;
    }
}
const v31 = new C19();
const v32 = new C19();
const v33 = new C19();
new Array(256);
class C37 extends Array {
    #valueOf(a39, a40, a41, a42) {
        a40.f;
        ~v31;
        a40.e = a39;
        return this;
    }
    constructor(a46, a47, a48) {
        super(256);
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeMaglevOnNextCall(f0);
        f0();
    }
}
const v53 = new C37(v32, v17, v16);
new C37(v32, C19, v18);
new C37(v33, v18, v16);
Object.defineProperty(v53, 536870888, { writable: true, enumerable: true, get: Array, set: Array });
4294967295 >>> v31;
Math.sin(536870912);
+v31;
[-4.0,1000000000000.0,5.0,0.09180953533850211,1000000000000.0,-349685.9266044918,-1.4602750319919289e+308,NaN,311195.34503961774];
[-2.220446049250313e-16,-Infinity,1.6844310707024853e+308,4.0];
[-804.1943636922799];
function f0() {
}
try {
    new Uint32Array(13);
} catch(e4) {
}
try {
    new Uint8ClampedArray(9);
} catch(e8) {
}
try {
    new BigUint64Array(0);
} catch(e12) {
}
const v13 = [268435456,-56848,129];
const v14 = [65536,-2147483649,65537];
[-63815,16,2147483648,536870887,480254262,9007199254740990,-2147483648,3,1644760854,33736];
class C16 extends BigUint64Array {
    set h(a18) {
        const v22 = v14 && v14;
        v14 >>> v22;
        Math.atanh(v22);
        Math.acosh(v22);
        Math.random();
    }
    static 6;
    static c;
    9 = Uint8ClampedArray;
    #d;
}
const v27 = new C16();
new C16();
new C16();
const v30 = C16;
const v33 = v27[Symbol.species];
function f34(a35, a36) {
    try { a35(v30, v27, arguments, BigUint64Array); } catch (e) {}
    let v40 = 7;
    ++v40;
    Math.fround(v13);
    ~(v40 && v13);
    return arguments;
}
f34(Uint8ClampedArray, v33, 9);
