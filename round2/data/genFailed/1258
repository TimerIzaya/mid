let v2 = -1840620640n;
class C3 {
    p(a5) {
        ({"f":v2,"h":a5,} = this);
        v2[512n] = this;
        Object.defineProperty(this, "c", { writable: true, configurable: true, enumerable: true, value: a5 });
        this << 512n;
        const v8 = Symbol.iterator;
        const o17 = {
            [v8]() {
                let v10 = 10;
                const o16 = {
                    next() {
                        v10--;
                        const v14 = v10 == 0;
                        const o15 = {
                            "done": v14,
                            "value": v10,
                        };
                        return o15;
                    },
                };
                return o16;
            },
        };
        return this;
    }
}
new C3();
const v19 = new C3();
const v20 = new C3();
let v22 = 9228;
class C24 extends C3 {
    constructor(a26, a27, a28) {
        super();
        let v29 = 0;
        while (v29 < 8) {
            this.d >>>= 268435456;
            this.e = a26;
            function F32(a34, a35, a36, a37) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = a26;
                this.b = 268435456;
                this.e = -49124n;
            }
            const v38 = new F32(v22, a26, a27, F32);
            new F32(v2, v22, v38, v38);
            new F32(a26, v29, a26, v2);
            v29++;
        }
    }
}
const v42 = new C24(v22, v19, v20);
const v43 = new C24(v22, v42, v20);
new C24(1024, v42, C3);
try { C3.p(v43, v2, v43, v2); } catch (e) {}
C24[3] |= v2;
[1000,-2147483648,65536,512,-4294967297,7,536870912,4294967295,-4294967296,-33930];
[9007199254740991,-976762142,9007199254740990,-9223372036854775808,12,65537,-9007199254740992,-52177,8,128];
[-11,4096,4294967297,1357151450];
const v52 = v22--;
1024 & v43;
Math.expm1(v52);
Math.floor(1024);
Math.cos(v52);
-v22;
Math.random();
const v0 = [-30.3292318807828,-2.220446049250313e-16,-5.0,3.0,6.37449868802722];
const v1 = [1.0,-1000000000.0,-1000000000000.0,0.36296359539098366,1000000000.0,2.220446049250313e-16,0.8257449480774461,-4.0,-2.0];
const v2 = [-1000000000000.0];
try {
    new Uint16Array(12);
} catch(e6) {
}
try {
    new Float32Array(254);
} catch(e10) {
}
try {
    new Uint8Array(7);
} catch(e14) {
}
function f15(a16, a17, a18, a19) {
    const o24 = {
        "a": Float32Array,
        ...v0,
        ...a19,
        "c": a17,
        "b": a18,
        "h": 7,
        set g(a21) {
            this[9];
            a16++;
        },
        "g": Float32Array,
        ...a19,
        ...v2,
        "f": v1,
    };
    return o24;
}
f15(v1, v0, v0, v1);
f15(v1, v2, f15, v0);
f15(v0, v0, Uint8Array, v0);
try {
    new Uint8ClampedArray(1024);
} catch(e31) {
}
try {
    new Uint32Array(10);
} catch(e35) {
}
try {
    new Int32Array(3723);
} catch(e39) {
}
Object.defineProperty(v0, "length", { configurable: true, enumerable: true, get: f15, set: f15 });
new Int32Array(v1, 7, 10);
function f41(a42) {
    return Int32Array;
}
class C43 extends f41 {
    static #h = 7;
    127;
    [Int32Array];
}
