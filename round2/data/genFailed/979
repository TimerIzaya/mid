class C3 {
    set c(a5) {
        a5?.[a5];
        const v7 = -4.0 == -4.0;
        v7 ? -4.0 : -4.0;
        let v12 = -2.6682404356387557e+307;
        Math.abs(v7);
        Math.fround(-256);
        ++v12;
        Math.sqrt(-65537);
        Math.log10(-65537);
    }
    #g;
}
new C3();
const v19 = new C3();
const v20 = new C3();
new Date();
const v29 = -3.0 >> v19;
C3.d <<= 6.9821193088362;
const v30 = v19[9];
let v33;
try { v33 = v20["o"](v29, v19, 4294967295n, "o", v30); } catch (e) {}
[] = v33;
try { new d(d, NaN, 1000.0); } catch (e) {}
v20.c *= v29;
try {
    new Uint32Array(127);
} catch(e3) {
}
try {
    new Float64Array(9);
} catch(e7) {
}
try {
    new Float32Array(4);
} catch(e11) {
}
class C12 extends Float64Array {
    [4];
    static c = 4;
    p(a14, a15) {
        function F16(a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a14;
            } catch(e20) {
            }
            try {
                this.d = a18;
            } catch(e21) {
            }
        }
        new F16(a14, a14);
        new F16(a14, 4);
        new F16(9, a15);
        return 4;
    }
}
const v25 = new C12();
new C12();
const v27 = new C12();
try {
    C12.fuck(127, 9, 4);
} catch(e32) {
}
v25[4] &= 9;
Math.tanh(4);
Math.exp(65537 >>> v27);
