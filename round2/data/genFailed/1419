const v2 = new Int16Array(257);
new BigUint64Array(4096);
const v8 = new Float64Array(115);
function f9(a10, a11, a12, a13) {
    const o25 = {
        "c": 115,
        set b(a15) {
            for (let v16 = 0; v16 < 32; v16++) {
                a15["p" + v16] = v16;
            }
            Math.atan(~1073741825 || Int16Array);
            Math.sqrt(Int16Array);
        },
    };
    return o25;
}
const v26 = f9(115, 4096, 115, 257);
f9(257, 115, 115, 4096);
const v28 = f9(115, 115, 257, 257);
const v29 = /[xyz]g(?:a?)*/miv;
const v30 = /\P{gc=Decimal_Number}/yidv;
const v31 = /a[a-z]GpPcKxyz{1,32}+/mysu;
try { v8.map(f9, v31); } catch (e) {}
switch (Int16Array) {
    default:
        v29 in v2;
}
v30[v30];
try {
    const v36 = [1589501589n,v26,115,v28,Float64Array];
    const o37 = {
    };
    v26.replace(1589501589n, v36, o37);
} catch(e39) {
}
