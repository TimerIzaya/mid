class C3 {
    g;
    3030254912;
    static 1073741824 = 0.13150264460451455;
    [0.13150264460451455];
    9 = 0.07169908630368815;
    8 = 0.07169908630368815;
    constructor(a5, a6) {
        let v8;
        try { v8 = a6["valueOf"](1.7976931348623157e+308, 1.7976931348623157e+308); } catch (e) {}
        %VerifyType(1.7976931348623157e+308);
        try { a6(1.7976931348623157e+308, v8, 1.7976931348623157e+308); } catch (e) {}
    }
    e;
    static a;
    static #h;
}
const v10 = new C3(0.13150264460451455, 1.7976931348623157e+308);
const v11 = new C3(0.13150264460451455, 0.13150264460451455);
const v12 = new C3(0.07169908630368815, v11);
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = 2n;
    this.c = 7n;
    this.f = v10;
}
const v23 = new F19(v10, v11);
const v24 = new F19(v12, v12);
new F19(v12, v11);
const o26 = {
};
new Proxy(v23, o26);
try {
    new C3(-2.220446049250313e-16, -2.220446049250313e-16);
} catch(e31) {
}
v24.c += 0.13150264460451455;
class C3 {
    static m(a5) {
        let v6;
        try { v6 = new a5(a5, 1411084739n, a5, 203979662n, this); } catch (e) {}
        this[1411084739n];
        const o8 = {
        };
        try {
            o8.c = v6;
        } catch(e9) {
        }
        try {
            const o10 = {
            };
            o10.c = v6;
            o10.b = -547966286n;
        } catch(e11) {
        }
        try {
            const o12 = {
            };
            o12.c = v6;
            o12.b = -547966286n;
            o12.d = a5;
        } catch(e13) {
        }
        try {
            const o14 = {
            };
            o14.c = v6;
            o14.b = -547966286n;
            o14.g = 203979662n;
        } catch(e15) {
        }
        return 1411084739n;
    }
}
const v16 = new C3();
const v17 = new C3();
const v18 = new C3();
const v22 = [512,255,-1231269349,-2147483649,12];
[2147483648];
const v24 = [981522762,1792242972,707199233,13554,4,-375540593,13110,-1,18320];
let v25 = 268435456n;
try {
    v25 %= 37230n;
} catch(e28) {
}
v18[9] = 8n;
const v30 = [v22,37230n];
const v31 = v22.slice;
Reflect.apply(v31, v24, v30);
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a36;
    } catch(e39) {
    }
    try {
        this.a = a38;
    } catch(e40) {
    }
    try {
        this.f = v16;
    } catch(e41) {
    }
}
new F33(v30, v24, v31, 1000000000000.0);
new F33(v24, v30, 1000000000000.0, 0.5221133620072826);
new F33(v24, v17, 1000000000000.0, 1000000000000.0);
