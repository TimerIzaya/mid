function f3(a4) {
    const o13 = {
        [1238804595n](a6, a7) {
            super.b = -47235802n;
            let v8;
            try { v8 = a4(-47235802n, a6, this); } catch (e) {}
            try { v8(); } catch (e) {}
            return a4;
        },
        __proto__: 1238804595n,
        "g": 1238804595n,
    };
    return o13;
}
const v14 = f3(1238804595n);
const v15 = f3(-47235802n);
const v16 = f3(-47235802n);
function f17(a18, a19, a20, a21) {
    const o33 = {
        [1238804595n](a23, a24) {
            Math.pow(-1000000.0, v16);
            -11 | -1000000.0;
            Math.acos(v16);
            -1000000.0 || -11;
            Math.round(v16);
            return a18;
        },
    };
    return o33;
}
f17(v15, 1238804595n, 36752n, v14);
f17(v16, 36752n, 1238804595n, 1238804595n);
const v36 = f17(v15, 1238804595n, 1238804595n, 36752n);
v14.g = v36[v16];
const v38 = /([^123])/myidu;
const v39 = /a|bv+/mysdu;
const v40 = /(?:ab)a\nb\bcm[\xe2\x81\xa3]?/gisdv;
const v41 = v14.g;
v38 | v39;
const v45 = [v41];
Reflect.apply(v40.compile, v36, v45);
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1;
    } catch(e7) {
    }
    try {
        this.h = 1980328858;
    } catch(e8) {
    }
    try {
        this.e = 10000;
    } catch(e9) {
    }
}
new F3(10000, 10000);
const v11 = new F3(1980328858, 1980328858);
const v12 = new F3(10000, 1980328858);
try {
    new Int16Array(1);
} catch(e16) {
}
try {
    new Int16Array(3);
} catch(e20) {
}
try {
    new BigInt64Array(170);
} catch(e24) {
}
class C25 {
    static {
        for (const v30 of Reflect.construct(F3, [1980328858,3], Int16Array)) {
            F3 !== v30;
            try {
                super.getFloat32(3);
            } catch(e33) {
            }
        }
    }
    static [1] = 1;
    static #e;
    static #h;
}
const v34 = new C25();
new C25();
const v36 = new C25();
if (v11 === F3) {
    const o41 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o41);
} else {
    try { v34.toString(1, Int16Array, Int16Array, v36, v12); } catch (e) {}
}
