class C3 {
    c = "-1105208249";
    static get d() {
        for (const v5 in this) {
            ("-1105208249")[v5];
        }
        return this;
    }
    [-9007199254740991];
}
new C3();
new C3();
let v12 = new C3();
const v14 = new Map();
class C15 extends Map {
    o(a17, a18, a19, a20) {
        v12 %= a17;
        return C3;
    }
    constructor(a22, a23) {
        super(a22);
    }
    static 1024 = C3;
}
const v27 = new C15(C3, v12);
new C15(v14, v27);
new C15(Map, Map);
class C30 extends C15 {
    static p(a32, a33) {
        super.size = Map;
        return -9007199254740991;
    }
    [Map];
}
new C30();
new C30();
new C30();
try {
    new BigUint64Array(128);
} catch(e3) {
}
try {
    new Uint8ClampedArray(1);
} catch(e7) {
}
try {
    new Uint32Array(6);
} catch(e11) {
}
try {
    new Float64Array(256);
} catch(e15) {
}
try {
    new Int8Array(2284);
} catch(e19) {
}
try {
    new Float32Array(9);
} catch(e23) {
}
let v27;
try { v27 = (1).o(Uint32Array, BigUint64Array, Float64Array); } catch (e) {}
const v28 = delete v27?.[v27];
switch (v28) {
    case v28:
        v27[173] >>>= 256;
        break;
}
v28?.d;
try {
    new BigUint64Array(1024);
} catch(e33) {
}
try {
    new Int8Array(3);
} catch(e37) {
}
try {
    new Float32Array(64);
} catch(e41) {
}
