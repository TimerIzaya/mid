new Map();
const v3 = new Set();
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a6;
}
const v7 = new F4(Map);
new F4(v3);
const v9 = new F4(F4);
function f10() {
    return v7;
}
class C11 extends f10 {
    n(a13, a14, a15) {
        v3["has"](Map);
        return Map;
    }
    static set c(a19) {
        let v20 = "isSealed";
        let v21 = "min";
        [v20,v21,v20,a19] = "toReversed";
    }
    static 128;
    static [-1] = v7;
}
const v23 = new C11();
new C11();
new C11();
if (v9) {
    Set - Set;
    Object.defineProperty(v7, v23, { writable: true, enumerable: true, set: f10 });
} else {
    new f10();
    function f28() {
        return C11;
    }
}
v7[140];
try {
    new BigUint64Array(512);
} catch(e3) {
}
try {
    new BigUint64Array(5);
} catch(e7) {
}
try {
    new Int8Array(5);
} catch(e11) {
}
function f12(a13, a14, a15, a16) {
    const o23 = {
        get e() {
            try {
                a16 = 512;
            } catch(e18) {
            }
            return a14;
        },
        set d(a20) {
            512 | Int8Array;
            a15.__proto__;
            super.d *= a20;
        },
    };
    return o23;
}
const v24 = f12(f12, BigUint64Array, f12, 512);
const v25 = f12(5, v24, f12, 5);
f12(5, v24, BigUint64Array, 512);
class C27 extends Int8Array {
    constructor(a29, a30) {
        super(a29, a29, a29);
        try {
            new BigUint64Array(-1487632882, -1487632882);
        } catch(e33) {
        }
    }
    2234902323;
    #d = 512;
    #f;
    290;
}
new C27(5, BigUint64Array);
new C27(512, 5);
const v36 = new C27(5, v25);
try {
    v36.length = 5;
} catch(e37) {
}
const o40 = {
    "maxByteLength": 10,
};
const v42 = new SharedArrayBuffer(10, o40);
try {
    new Float32Array(v42);
} catch(e45) {
}
