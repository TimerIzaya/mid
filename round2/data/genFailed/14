class C3 {
    constructor(a5, a6) {
        let v4 = this;
        a6 != 0.5030660865347701;
        v4 <<= "5NVtN";
        a6[10] = -128;
        (21182 + "5NVtN") || 0.5030660865347701;
        Math.log(21182);
        !21182;
        -9.63886508392039 - 0.5030660865347701;
        21182 >> 0.5030660865347701;
        -9.63886508392039 << 3;
    }
}
const v19 = new C3(-128, 0.5030660865347701);
new C3("5NVtN", v19);
new C3(C3, -128);
class C25 {
    #c = -93483994;
    10;
    [C3] = 0.5030660865347701;
    #f = 0.5030660865347701;
    e = "5NVtN";
    static #o(a27, a28, a29, a30) {
        var a = super[a30];
        try {
            a30.#f = this;
        } catch(e32) {
        }
        return C3;
    }
    #d;
}
new C25();
new C25();
new C25();
const o41 = {
    "maxByteLength": 1073741824,
};
const v43 = new SharedArrayBuffer(717, o41);
new Uint8Array(v43);
const v3 = [1000000000000.0,885.5013966396864,885.5013966396864,885.5013966396864,-1.7976931348623157e+308];
const v4 = [-1.7976931348623157e+308,1000000000000.0,-1.7976931348623157e+308];
const v5 = [v4,1000000000000.0];
const v6 = [v3,1000000000000.0,v5,885.5013966396864,v3];
const v7 = [v6,v6,v5,v6];
const v8 = [885.5013966396864,v7,v7,v5,v7];
function f9() {
    return v4;
}
function f10() {
    return v6;
}
class C11 {
    10 = v4;
    constructor(a13, a14, a15) {
        c = a14;
        function F16(a18, a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a20;
            } catch(e21) {
            }
            try {
                this.b = a14;
            } catch(e22) {
            }
            try {
                this.f = a15;
            } catch(e23) {
            }
        }
        new F16(a14, -1.7976931348623157e+308, a14);
        new F16(v5, -1.7976931348623157e+308, v4);
        new F16(a13, 1000000000000.0, a14);
    }
}
new C11(1000000000000.0, v8, v3);
const v28 = new C11(f9, v3, v4);
new C11(v28, v8, v8);
try {
    Object.defineProperty(v8, "h", { set: f9 });
} catch(e30) {
    const v36 = e30 && (e30 && -128);
    Math.floor(-1.0);
    e30 | +v36;
}
