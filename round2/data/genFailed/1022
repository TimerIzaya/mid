const v5 = new Int32Array(1);
const v8 = new BigInt64Array(3648);
new Uint16Array(3);
let v12 = 0;
do {
    -762070491 == v5 ? -762070491 : v5;
    v12++;
} while (v12 < 4)
new Uint16Array(v8, 20084);
function f0() {
}
function f1() {
    return f0;
}
try {
    new Float32Array(255);
} catch(e5) {
}
try {
    new Uint32Array(3813);
} catch(e9) {
}
try {
    new Int8Array(3374);
} catch(e13) {
}
class C14 extends Float32Array {
    constructor(a16, a17, a18) {
        super(3374, 255, 3374);
        const v21 = ++a16;
        Math.ceil(v21);
        Math.hypot(v21);
        a16 ** v21;
        a18?.[a18];
    }
    536870912 = 3813;
    static f = 3374;
    static [f0];
    #e = Float32Array;
}
new C14(255, 3813, 3813);
new C14(3374, 255, f1);
const v28 = new C14(255, 3374, 255);
new Array(1);
const v37 = v28 ^ v28;
const v38 = -v28;
const v39 = 6020 ** v28;
Math.cos(v39);
v38 + v39;
Math.max(v28);
v28 || v37;
