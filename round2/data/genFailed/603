new Uint8Array(201);
const v8 = new BigUint64Array(7);
const v11 = new Uint8ClampedArray(4025);
class C12 {
    [7] = 7;
    538;
    m(a14, a15, a16, a17) {
        const o22 = {
            valueOf() {
                const v19 = v11[268435439];
                super.d = 4025;
                try {
                    super.o(v19, this);
                } catch(e21) {
                }
                return a16;
            },
        };
        return a14;
    }
}
const v23 = new C12();
new C12();
new C12();
let v27 = Uint8Array > BigUint64Array ? Uint8Array : BigUint64Array;
let v28;
try { v28 = v8.keys(); } catch (e) {}
v27 = Uint8Array;
delete v8[3];
v8[1073741824] = v28;
function f33() {
    return v23;
}
try {
    new Float32Array(3451);
} catch(e3) {
}
let v4 = 3707;
try {
    new Uint32Array(v4);
} catch(e7) {
}
try {
    new Uint8Array(85);
} catch(e11) {
}
const v12 = [Uint8Array,85,3451,85,Float32Array];
[85,Uint32Array,v12,Uint32Array];
[Uint32Array];
class C15 extends Float32Array {
    9;
    536870889;
    get h() {
        try { this(this, v4, this, this); } catch (e) {}
        const o18 = {
        };
        try {
            o18.b = this;
        } catch(e19) {
        }
        try {
            const o20 = {
            };
            o20.b = this;
            o20.f = Float32Array;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.b = this;
            o22.f = Float32Array;
            o22.g = this;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.b = this;
            o24.f = Float32Array;
            o24.d = v12;
        } catch(e25) {
        }
        return v4;
    }
}
const v26 = new C15();
const v27 = new C15();
const v28 = new C15();
%VerifyType(v26);
try {
    C15.fuck(v4, v26, v27, Uint32Array);
} catch(e30) {
}
function f31() {
    return v28;
}
v12[3368006725];
Uint8Array % 21861;
const v37 = Uint8Array % 21861;
v37 >> 21861;
let v39 = +v37;
--v39;
v4--;
