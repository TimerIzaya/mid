const v2 = new Uint8ClampedArray(3304);
const v5 = new BigUint64Array(64);
new Float64Array(4096);
[-2.0,235919.71509195236,-3.0,-1.7976931348623157e+308,9.14518274373568e+307,-1000000000.0,833103.3256099953,-1000000000.0,1e-15];
const v10 = [0.5982202581443204,-3.0,0.9622256027771086];
[-494158.89819732436,640482.7709398828,0.3930306168220553,-Infinity,-1e-15,-1000000000.0];
-Infinity;
const v15 = v5.length;
for (let [,v16,v17] of v10) {
    Float64Array || v17;
    v2[536870912] += v15;
}
function f19() {
    function f21(a22) {
        try { a22.normalize(); } catch (e) {}
        Math.tanh(Float64Array);
        const v29 = (this - 5) << this;
        Math.sinh(this);
        Math.asinh(v29);
    }
    this.onmessage = f21;
    const v33 = Symbol.iterator;
    const o42 = {
        [v33]() {
            let v35 = 10;
            const o41 = {
                next() {
                    v35--;
                    const v39 = v35 == 0;
                    const o40 = {
                        "done": v39,
                        "value": v35,
                    };
                    return o40;
                },
            };
            return o41;
        },
    };
}
const v45 = [];
const o46 = {
    "arguments": v45,
    "type": "function",
};
new Worker(f19, o46);
function f3() {
    return 15219n;
}
const v11 = new WeakMap();
for (const v15 of -30662n) {
    Object.defineProperty(v11, "f", { set: f3 });
    try {
        v11[-54316] = 2147483649n;
    } catch(e16) {
    }
}
Object.defineProperty(v11, "g", { enumerable: true, get: f3 });
%VerifyType(f3);
v11[5];
