let v0 = "boolean";
class C3 {
    constructor(a5, a6) {
        const t3 = "p";
        t3.length = a6;
        this < "p";
        super.c;
    }
    static #n(a10, a11) {
        let v9 = this;
        const v14 = 129 ^ v0;
        Math.imul(v14, v0);
        Math.log10(129);
        Math.max(v14);
        --v0;
        ++v9;
        return v9;
    }
}
const v20 = new C3(C3, -3.0);
new C3(C3, C3);
let v22 = new C3(C3, v20);
new WeakSet();
function f25() {
    return v20;
}
v22 |= v20;
const o32 = {
    "execution": "sync",
    "type": "minor",
};
gc(o32);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 61634;
    } catch(e3) {
    }
    try {
        this.c = 61634;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
class C8 extends F0 {
    constructor(a10) {
        super();
        a10 in this;
        try {
            v7.toString = v5;
        } catch(e13) {
        }
    }
    static 2286 = v6;
    static a;
    static [v6] = v6;
    54;
}
new C8(v5);
const v15 = new C8(v5);
const v16 = new C8(v7);
const v17 = [-1000.0,-339.2916074795163,698.4885083858803,0.0,-1.7976931348623157e+308];
const v18 = [-0.0,1000000.0];
const v19 = [136398.25474915095,-191081.20258190914];
function f20() {
    return v17;
}
[[v19,v18,[f20,v19,v17],v6,v17],v16];
function f24() {
    return v15;
}
f20();
%PrepareFunctionForOptimization(f20);
f20();
f20();
%OptimizeMaglevOnNextCall(f20);
f20();
