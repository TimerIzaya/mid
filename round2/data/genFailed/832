class C9 {
    constructor(a11, a12) {
        try {
            super.valueOf(a12, 18887, 9, 9);
        } catch(e14) {
        }
    }
    n(a16, a17) {
        typeof a17 === "boolean";
        a16[10] = this;
        return -2147483649;
    }
}
new C9(-2147483649, -2147483649);
const v22 = new C9(-2147483649, 18887);
const v23 = new C9(-2147483649, 5265);
const v24 = `
    const v25 = v23.b;
    Object.defineProperty(v22, v25, { configurable: true, value: v25 });
    let [v26,,v27,v28] = v25;
    v23[v25 - v27] **= v26;
`;
let v31 = eval(v24);
v31 = 1914844315;
class C3 {
    5 = 5.0;
    constructor(a5) {
        ++a5;
        [1533215226,4096,1000,2139516478,1073741825];
        [128,-10,-14135665,2147483649,9007199254740990,56519,-13249];
        [128,5633,12,536870887,536870912,1165409790];
    }
    static b = -1556522105;
    static 2643819305 = -1556522105;
    [1000.0];
    [5.0] = 1000.0;
}
new C3(5.0);
const v11 = new C3(5.0);
new C3(v11);
function f13() {
    return v11;
}
try {
    new BigInt64Array(128);
} catch(e17) {
}
try {
    new Uint16Array(129);
} catch(e21) {
}
try {
    new Float32Array(1830);
} catch(e25) {
}
f13();
C3.b >>= 129;
class C27 extends BigInt64Array {
    268435456 = 1000.0;
}
new C27();
new C27();
const v30 = new C27();
try { v30.some(f13); } catch (e) {}
try {
    new Int16Array(9);
} catch(e35) {
}
try {
    new Uint8ClampedArray(515);
} catch(e39) {
}
try {
    new Int32Array(64);
} catch(e43) {
}
