let v0 = 102592.0625678515;
let v1 = -40886;
class C3 {
    static [268435456] = 268435456;
    set c(a5) {
        let v4 = this;
        [v1,,v0,v4] = a5;
        const v6 = [255];
        [3,9223372036854775807,-9007199254740992,6,-1583390535,1328524604,51581,12,10];
        [51527,536870888,-26644,3,1705764365,-10,10000,-867037759,2];
        v6 | v1;
    }
    m(a11) {
        [2.0,0.7824805394597201,0.10157942615429871,0.40617179694732175,1000000.0,3.3394594984420074];
        [1000000.0,-1.0273063404262228e+308,-1.7976931348623157e+308,2.220446049250313e-16];
        [809539.2664650641,-355.74688012872707,922.9346470203532];
        return this;
    }
}
new C3();
new C3();
new C3();
const v23 = new BigInt64Array(1024);
new Uint32Array(2125);
new Int16Array(2348);
try {
    new Uint32Array(2348, 2, -268435456);
} catch(e34) {
}
v23[2147483649] = v23 == Uint32Array ? v23 : Uint32Array;
try {
    new BigInt64Array(64);
} catch(e3) {
}
try {
    new Int32Array(1074);
} catch(e7) {
}
try {
    new BigUint64Array(16);
} catch(e11) {
}
class C12 extends BigInt64Array {
    static {
        super.byteLength &&= (1074 >>> 1074) >>> 16;
    }
    static #d = BigUint64Array;
    static 1914308527;
    [16];
    static o(a17, a18, a19, a20) {
        try {
            a17.#d;
        } catch(e22) {
        }
        return a17;
    }
}
const v23 = new C12();
new C12();
new C12();
function f26() {
    return 1074;
}
try {
    C12[16] = v23;
} catch(e30) {
}
[872.182419015579,2.0,-449195.8186818863];
[-2.0,0.2947567660592243,-0.0,1000.0,Infinity,1000000000000.0,4.447920265392786e+307,-102.84116278440172,-627.5188286186506];
[-784818.8663398687,9.425688322510368,1.064286387453115e+307,-363.81402371533306,0.2801650174552257,-104106.64946520969,-9.532418581996724];
try {
    v23.valueOf = f26;
} catch(e34) {
}
