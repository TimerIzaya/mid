const v2 = new Float32Array(2);
const v5 = new Float32Array(206);
const v8 = new Uint8Array(0);
try {
const t0 = -26154n;
t0(206, 0, v8);
} catch (e) {}
v2.length = 206;
const v14 = Symbol.isConcatSpreadable;
v8[v14] = v5;
(v14 >> 268435441) & v5;
v14 << v14;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1024;
    } catch(e3) {
    }
    try {
        this.c = 1024;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
try {
    new BigInt64Array(15);
} catch(e14) {
}
try {
    new Uint16Array(512);
} catch(e18) {
}
try {
    new Float32Array(3912);
} catch(e22) {
}
for (const v29 in v7) {
    let v30;
    try { v30 = v5.valueOf(v29, v29, v29, v29); } catch (e) {}
    v29 << v30;
    const v32 = new Uint16Array(-1579875993, 512, 50171);
    try {
        v6.c = v32;
    } catch(e33) {
    }
}
