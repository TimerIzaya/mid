function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = -268435456;
    this.h = -268435456;
}
const v3 = new F0();
new F0();
new F0();
/a[a-z]/yisv;
/(?:a*)*j/msu;
const v11 = /g6/gidu;
delete v3?.g;
v11.ignoreCase;
8 - -536870912;
let v18 = 0;
do {
    typeof 8 === "boolean";
    const o22 = {
    };
    new Proxy("boolean", o22);
    v18++;
} while (v18 < 5)
try {
    new Uint16Array(4);
} catch(e3) {
}
try {
    new BigInt64Array(2073);
} catch(e7) {
}
try {
    new Int32Array(10);
} catch(e11) {
}
class C15 extends Uint16Array {
    [4] = BigInt64Array;
    [Int32Array] = BigInt64Array;
    o(a17, a18) {
        const v19 = [-11,this,a18,4,a18];
        [-1460805097,4,-11,2073];
        [2073,a17,2073,-11];
        super[-11];
        const v23 = v19[1000];
        a17?.b;
        return v23;
    }
    static 1;
    static [Uint16Array];
    h = BigInt64Array;
    #a = BigInt64Array;
}
const v25 = new C15();
const v26 = new C15();
const v27 = new C15();
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v26;
    } catch(e33) {
    }
    try {
        this.c = a31;
    } catch(e34) {
    }
    try {
        this.g = a31;
    } catch(e35) {
    }
}
new F28(v25, v27, v25);
new F28(v27, v27, -1084331018);
const v38 = new F28(v26, v27, -1084331018);
try { BigInt64Array(-11); } catch (e) {}
try { v38.p(2073, -1084331018); } catch (e) {}
const o44 = {
    "execution": "sync",
    "type": "minor",
};
gc(o44);
