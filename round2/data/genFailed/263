class C3 {
    constructor(a5, a6) {
        super["object"] = 32268;
        const o9 = {
            "maxByteLength": 32,
        };
        const v11 = new ArrayBuffer(13, o9);
        new BigUint64Array(v11);
    }
}
const v14 = new C3(C3, "object");
const v15 = new C3("arguments", C3);
const v16 = new C3("object", C3);
const v17 = [v16,v16,v14,v15];
const v18 = [32268,C3,v14,"arguments",v17];
[v18,32268,"arguments",v18];
("g")["1024"];
async function* f24(a25, a26) {
    new C3(a26, a26);
    await a25;
    yield* a25;
    return C3;
}
f24(v17, v17);
v16[8] = "object";
try {
    new Uint16Array(10);
} catch(e6) {
}
let v7 = 318;
try {
    new Int32Array(v7);
} catch(e10) {
}
try {
    new Int16Array(207);
} catch(e14) {
}
class C15 extends Int32Array {
    d;
    #c = v7;
    static h;
    get e() {
        try {
            v7 &&= 10;
        } catch(e17) {
        }
        function f18() {
            return this;
        }
        return f18;
    }
    65536;
    static #g = 10;
}
const v19 = new C15();
new C15();
let v21 = new C15();
function f22(a23, a24, a25) {
    const o47 = {
        get c() {
            const v28 = new Set();
            v28[2147483648];
            try {
                v21 = a25;
            } catch(e30) {
            }
            return "KwZ";
        },
        n(a32, a33, a34, a35) {
            let v37 = -2147483648;
            let v40 = +1.4641647912225606e+308;
            Math.asin(-1);
            const v42 = Int32Array ** v40;
            Math.sin(1.4641647912225606e+308);
            v40--;
            !v42;
            v37++;
            return "KwZ";
        },
    };
    return o47;
}
f22("OHkS", v21, "OHkS");
const v49 = f22("KwZ", v19, Uint16Array);
const v50 = f22("KwZ", v21, v19);
try {
    v50[v50] = v49;
} catch(e51) {
}
try {
    const t66 = "OHkS";
    t66[C15] = Uint16Array;
} catch(e52) {
}
try {
    v49[207] = Int16Array;
} catch(e53) {
}
