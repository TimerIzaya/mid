function f0() {
    const o16 = {
        ...36685,
        "h": -4.418645248779729,
        "b": 1000000.0,
        [1000000.0]: 36685,
        "c": 36685,
        "a": 1000000.0,
        [-4.418645248779729]: -4.418645248779729,
        get e() {
            const v6 = Symbol.iterator;
            const o15 = {
                [v6]() {
                    let v8 = 10;
                    const o14 = {
                        next() {
                            v8--;
                            const v12 = v8 == 0;
                            const o13 = {
                                "done": v12,
                                "value": v8,
                            };
                            return o13;
                        },
                    };
                    return o14;
                },
            };
            return o15;
        },
    };
    return o16;
}
const v17 = f0();
const v18 = f0();
const v19 = f0();
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a23;
}
const v24 = new F20(v19, v17);
const v25 = new F20(v17, v24);
const v26 = new F20(v18, v19);
const v27 = [-4.6184613737045e+307,0.7534391239783014,-1000000000.0,9.91382018763246e+307];
[-1000.0];
[3.0,1.0,4.0,-Infinity];
const v30 = /(?:ab)+/gmyidu;
/ula/mv;
/8a3/gmysd;
v18[1000] = v17;
Object.defineProperty(v30, "d", { writable: true, enumerable: true, get: f0, set: f0 });
function f34(a35, a36) {
    const o37 = {
        [-1]: v25,
        __proto__: v27,
    };
    return o37;
}
f34(v26, v18);
f34(v17, v18);
f34(v18, v25);
try {
    new Uint8ClampedArray(3471);
} catch(e3) {
}
try {
    new Int16Array(5);
} catch(e7) {
}
try {
    new Int8Array(965);
} catch(e11) {
}
function f12() {
    return Int16Array;
}
class C13 extends Int16Array {
    static valueOf(a15, a16, a17) {
        try {
            new Uint8Array(512);
        } catch(e21) {
        }
        try {
            new Uint16Array(8);
        } catch(e25) {
        }
        try {
            new Float64Array(9);
        } catch(e29) {
        }
        return Int16Array;
    }
}
const v30 = new C13();
new C13();
new C13();
const v33 = [0.15500078324873212,-1e-15,Infinity,445.2151396633178,-0.0,-2.2250738585072014e-308,-130.87833485646308];
[-2.922332304523809e+307,-1.552682944328249e+308,4.0,-2.220446049250313e-16];
[694.5470380824563,0.7103668910016818,0.8390482186093721,2.0,1.1999992469798536e+307,2.220446049250313e-16,-5.0];
const v40 = [];
Reflect.apply(v30.keys, v33, v40);
const v44 = Symbol.iterator;
const o53 = {
    [v44]() {
        let v46 = 10;
        const o52 = {
            next() {
                v46--;
                const v50 = v46 == 0;
                const o51 = {
                    "done": v50,
                    "value": v46,
                };
                return o51;
            },
        };
        return o52;
    },
};
