[-1000000000000.0,1000.0,-807.1147444251953,-5.0,6.188658337241925,1.7976931348623157e+308];
[5.0,4.0,-1e-15,1.642192877722487e+308,1.7976931348623157e+308,-2.2250738585072014e-308,-5.0,0.0];
const v5 = [Infinity,-2.9883157084781864,-3.434907302432462,-Infinity,0.23252361463153803];
new Uint32Array(195);
new Uint8ClampedArray(7);
const v14 = new Float64Array(1531);
const o15 = {
};
new Proxy(v14, o15);
for (let [,v18,v19] of v5) {
    const v21 = Symbol.toPrimitive;
    const o28 = {
        [v21]() {
            const o26 = {
                "execution": "async",
                "type": "major",
            };
            gc(o26);
            return 7;
        },
    };
}
const v0 = [NaN,-168763.66280885378,-5.0,1.7976931348623157e+308,1000000000000.0,2.0];
const v1 = [4.0,1000000.0,2.2250738585072014e-308,0.0,-1000000000000.0];
const v2 = [-3.0];
class C3 {
    constructor(a5) {
        const v6 = this instanceof this;
        let v7;
        try { v7 = new this(v6); } catch (e) {}
        v7 / v0;
        const o12 = {
            "execution": "async",
            "type": "major",
        };
        gc(o12);
    }
}
new C3(v2);
new C3(v0);
const v16 = new C3(v0);
class C17 extends C3 {
    b = v16;
    #h;
    #e;
    static #c = v0;
    [C3] = v2;
    [v0] = v1;
    static [v16];
    g;
    0;
    174270621;
}
new C17();
new C17();
new C17();
try {
    new Int16Array(9);
} catch(e24) {
}
try {
    new Int32Array(150);
} catch(e28) {
}
try {
    new Int32Array(2);
} catch(e32) {
}
