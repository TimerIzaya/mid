function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 19434;
    this.a = a5;
    this.d = 19434;
}
new F3(-937166315);
new F3(-937166315);
new F3(19434);
const v9 = [5.0,4.0,-1.8519173875034625,-1.0,424287.72159429966];
[5.0,1.0,819.7258276829841,642159.9544140068,-2.2250738585072014e-308,-1e-15,81299.16271003359,1000000000.0,5.13929857132615e+307,2.2250738585072014e-308];
const v11 = [817.6921894126406];
const v14 = new BigInt64Array(4096);
new Float32Array(257);
const v20 = new Float32Array(2);
new Float32Array(...v14, ...v20, Float32Array, ...v9, v11);
class C3 {
    static set c(a5) {
        Object.defineProperty(this, 0, { writable: true, configurable: true, enumerable: true, value: "a" });
        /F(?!a)?a\1+/dgm;
        /(q(?:a{5,1000000}){3,1000000}+)/sidy;
        /abc+?/sidmuy;
    }
    3 = "a";
    g = "a";
    static #d = 255432.46635326045;
    static a = 9223372036854775807;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
class C15 {
    constructor(a17, a18) {
        try { a18(9223372036854775807); } catch (e) {}
        delete v12[v13];
        "a" >= a17;
        const o24 = {
            "maxByteLength": 4096,
        };
        const v26 = new SharedArrayBuffer(129, o24);
        try {
            new DataView(v26);
        } catch(e29) {
        }
    }
}
const v30 = new C15(v14, 9223372036854775807);
const v31 = new C15(v13, 255432.46635326045);
new C15(v30, v31);
const v37 = 515942490 < 515942490 ? 515942490 : 515942490;
let v38;
try { v38 = v37(v14, v30, v14); } catch (e) {}
const v39 = v38++;
try {
    v14.g = v39;
} catch(e40) {
}
const t41 = 255432.46635326045;
t41[2] = v38;
try { v13.asIntN(255432.46635326045, v39); } catch (e) {}
