const v5 = new Uint8ClampedArray(256);
new Uint8ClampedArray(255);
new BigInt64Array(5);
class C12 extends Uint8ClampedArray {
    n(a14, a15, a16, a17) {
        if (34448 < 6) {
            v5[Uint8ClampedArray] = 34448;
            try { v5.indexOf(a16, 1102795145); } catch (e) {}
        } else {
            let {"length":v20,} = v5;
            super.byteOffset;
        }
        return 6;
    }
    static 5 = 255;
    9;
    950694770;
    256;
}
new C12();
new C12();
new C12();
var d = v5;
let v26 = 2767;
const v27 = Math.asin(v26);
Math.exp(~v26);
let v30 = --v26;
v5["findLastIndex"]("findLastIndex");
let v36 = -536870912 % -536870912;
Math.imul(129, v27);
Math.sin(v30);
const v39 = ++v36;
--v30;
v36++;
Math.hypot(v39);
new Set();
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a4;
    } catch(e6) {
    }
    try {
        this.d = Set;
    } catch(e7) {
    }
}
new F2(Set, Set);
const v9 = new F2(F2, F2);
new F2(Set, v9);
function f11() {
    return F2;
}
class C12 extends f11 {
    get g() {
        [0.47057226341251757,7.755221191266213e+306,Infinity,1e-15,-1.0,6.631262779230843e+307];
        [0.0];
        [9.81393853946895,2.220446049250313e-16];
        return F2;
    }
    static #valueOf(a19, a20, a21) {
        try {
            this.fuck(F2, this);
        } catch(e23) {
        }
        return super.c;
    }
}
const v25 = new C12();
new C12();
new C12();
const v29 = new WeakMap();
function f30(a31) {
    return Set;
}
class C32 extends f30 {
    [F2] = v29;
    #b;
    static #g = WeakMap;
    static 65535;
}
throw v25;
