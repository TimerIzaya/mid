function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = -688913962;
}
let v3 = new F0();
const v4 = new F0();
let v5 = new F0();
class C6 extends F0 {
    set g(a8) {
        const o11 = {
            "maxByteLength": 10000,
        };
        const v13 = new SharedArrayBuffer(5, o11);
        new Uint8Array(v13);
    }
    b;
}
const v16 = new C6();
const v17 = new C6();
const v18 = new C6();
class C19 {
    f;
    #valueOf(a21, a22) {
        const v23 = v3[1073741824];
        const v24 = [-1.0,-257118.8049593767,NaN,1000.0,418.1459524785439];
        [56.455484246833294,3.0,-866.896691414919,790.6184464241117,-155.2940508907974,-551028.395239901,-866317.8471214776,-2.2250738585072014e-308];
        [-2.220446049250313e-16,1.4091296860088701e+308] & v24;
        super[v23] = a21;
        return v18;
    }
    e;
    7;
}
const v28 = new C19();
new C19();
const v30 = new C19();
v5[-1] = v17;
v3.__proto__ = v5;
for (const v31 of v30) {
    let v32;
    try { v32 = v31(v28, C6); } catch (e) {}
    v3 -= v5;
    v5 = v32;
}
[true,v4,v30];
const v35 = [C6,C6,C6,v5,v16];
[C19,v35,F0,v35,v5];
