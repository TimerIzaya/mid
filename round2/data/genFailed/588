const v0 = [14,-129635086,536870888,7,536870889,43980];
const v1 = [-42981,3,-2042900127,9223372036854775807,536870888,-256,3927506,255,1455476575];
const v2 = [-2147483648,257,-2092969004,9007199254740990,256,-65537,9007199254740990,33636,-14,1000];
[1.0,-1.0884878666810955,-1e-15,-654633.2037391411,4.0,-1000000000000.0,2.0,1000.0,-1000000.0,0.2859741099112658];
const v4 = [-0.0,0.045051339389790335,0.28950842550965017,1.7826117542768483,-420684.9351934887,0.9306128538384625,0.9327840736020077,-1.1365424603092569e+308,NaN];
const v5 = [-1000000000000.0,-1e-15,3.4980975456643826,-1000000.0,-2.0,2.2250738585072014e-308,1.1026655089768367e+308,-1.0,290969.7891128049];
[v0,v5,v4,v0,v5];
[[v4,v4,v0,v0],v4,v1,v5,v2];
const o15 = {
    __proto__: v0,
    "c": "cTV",
};
v1 instanceof o15;
let v17 = 0;
while (v17 < 8) {
    v2.length = v17;
    function F20(a22, a23, a24, a25) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = v5;
        this.c = 2n;
        this.a = a22;
    }
    new F20(v4, "d", "cTV", v1);
    new F20(v0, "j6", "j6", v0);
    new F20(v5, "j6", "d", v5);
    v17++;
}
try {
    new Float64Array(1024);
} catch(e12) {
}
try {
    new Int32Array(127);
} catch(e16) {
}
try {
    new Int8Array(16);
} catch(e20) {
}
for (const v21 in "n") {
    for (let v22 = 0; v22 < 32; v22++) {
        const t14 = "n";
        t14["p" + v22] = v22;
    }
}
let v25;
try {
const t0 = "symbol";
v25 = t0(-30803, "symbol");
} catch (e) {}
for (let v26 = 0; v26 < 32; v26++) {
    v25["p" + v26] = v26;
}
