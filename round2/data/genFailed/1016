const v2 = new Int32Array(8);
new Int32Array(37);
const v8 = new Uint8ClampedArray(118);
class C9 {
    [v2];
    #o(a11, a12, a13, a14) {
        try { this.isArray(a14, a12, Uint8ClampedArray); } catch (e) {}
        a13?.[10000];
        const o18 = {
        };
        new Proxy(this, o18);
        return Uint8ClampedArray;
    }
    [v8];
    [Int32Array];
    [Int32Array];
}
new C9();
new C9();
new C9();
function f24() {
    return Uint8ClampedArray;
}
Object.defineProperty(v2, 2, { configurable: true, get: f24 });
v2[2];
let v26 = 0;
do {
    v26++;
} while (v26 < 9)
try {
    new BigInt64Array(512);
} catch(e3) {
}
try {
    new Uint8ClampedArray(0);
} catch(e7) {
}
try {
    new Float32Array(257);
} catch(e11) {
}
const v12 = [0.8628576267656973,-3.0,-2.2250738585072014e-308,408.37484100297115,0.0];
[-5.792547961307616e+307,170461.76911410806,0.9128455247928463,-327.3772307241629,-7.317038577466168,3.255453353354749,-8.008487846264373,3.0];
const v14 = [8.93441088765989,-0.0,-1000000000.0,-2.220446049250313e-16];
/ZI/sidyv;
/(i)/idgmv;
/a{0}H[MVa\swfoo(?=bar)baz]/siyv;
let [...v24] = v14;
v12[4];
9007199254740992 !== 0 ? 9007199254740992 : 0;
