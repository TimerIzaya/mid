const v2 = new Float64Array(129);
new Float32Array(6);
new Uint16Array(127);
class C9 extends Float64Array {
    c;
    static [-2];
    static {
        try {
            new Float64Array(2147483649, -40423, -40423);
        } catch(e14) {
        }
    }
    static 3969410887;
    [v2] = Float32Array;
    9 = Float32Array;
    static #h;
}
const v15 = new C9();
const v16 = new C9();
const v17 = new C9();
function f18(a19, a20) {
    const o34 = {
        ...a19,
        get g() {
            C9.c;
            a20 /= this;
            this[64];
            this[9] ||= 127;
            return a20;
        },
        "g": a20,
        n(a25, a26, a27, a28) {
            a28 = Float64Array;
            try { a26(a20, v17, a25, v2, Float32Array); } catch (e) {}
            delete a27[65537];
            return a20;
        },
    };
    return o34;
}
f18(v16, v16);
f18(v17, v15);
f18(v17, v16);
const v39 = new WeakMap();
const o40 = {
    ...v2,
    11: v16,
    "b": v17,
};
Reflect.construct(Float64Array, [v39,129,129], Float32Array);
class C3 {
    [2];
    [2147483647];
    static {
        const v5 = [-50793,-128,1813498247];
        [4294967295,16,-13];
        const v7 = [-31560,13039];
        try {
            v5[7] = v7;
        } catch(e8) {
        }
    }
    static 4 = 2;
    [5] = 2147483647;
}
const v9 = new C3();
new C3();
const v11 = new C3();
try {
    new BigInt64Array(8);
} catch(e15) {
}
try {
    new Float32Array(5);
} catch(e19) {
}
try {
    new Int8Array(4096);
} catch(e23) {
}
v11[-1000000000.0] &&= 2;
let v27;
try {
const t0 = 2147483647;
v27 = t0();
} catch (e) {}
v9.a;
%VerifyType(v11);
const v29 = v27?.[-1000000000.0];
v29.d >>>= 5;
try {
    v9.g = v29;
} catch(e30) {
}
