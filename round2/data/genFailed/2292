let v2 = -2147483648;
function f3(a4, a5) {
    const o12 = {
        [a5]: a5,
        ...2007192736,
        [8510](a7) {
            this.h /= a7;
            try {
                this.trunc(536870888n, 536870888n, this, -756582.571488029);
            } catch(e11) {
            }
            return this;
        },
        "f": a4,
        129: 2007192736,
        "e": a5,
    };
    return o12;
}
const v13 = f3(8510, 2007192736);
const v14 = f3(8510, 8510);
const v15 = f3(v2, v2);
function f16(a17, a18) {
    const o26 = {
        ...v15,
        o(a20, a21) {
            const o22 = {
            };
            o22.f = this;
            const o23 = {
            };
            o23.f = this;
            o23.d = a17;
            const o24 = {
            };
            o24.f = this;
            o24.d = a17;
            o24.g = a20;
            const o25 = {
            };
            o25.f = this;
            o25.d = a17;
            o25.g = v15;
            return 8510;
        },
    };
    return o26;
}
f16(v2, f16(f16(v14, v13), v13));
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a37;
    this.c = v14;
    this.d = f3;
}
new F33("1489337657", 2007192736, "1489337657");
new F33("e", 2007192736, "1489337657");
new F33("source", v2, "source");
v2 = 2007192736;
new f3(2007192736, 8510);
try { ("e").replaceAll("e", "1489337657"); } catch (e) {}
const o43 = {
    "construct": f3,
    "defineProperty": f3,
    "deleteProperty": f3,
    "get": f16,
    "getOwnPropertyDescriptor": f16,
    "getPrototypeOf": f3,
    "ownKeys": f16,
    "set": f16,
};
new Proxy("source", o43);
