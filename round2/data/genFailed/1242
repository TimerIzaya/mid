const v0 = [-65536,0,-61806,65535,-2147483649];
const v1 = [-775703284,13];
const v2 = [708936592,1000,256,-1,-9292,9007199254740990];
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a8;
    this.h = -9223372036854775807;
    this.b = v0;
}
const v11 = new F6(v1, 536870912, -9223372036854775807);
new F6(v11, 64, v0);
new F6(-9223372036854775807, -9223372036854775807, v2);
[-9007199254740992,257,1602674993,9,-32744,-1793346987,-2147483647,65535];
[10000,19713];
[841663453,10,0];
for (let v20 = 0; v20 < 44; v20++) {
    for (let i22 = 0; i22 < 8; i22++) {
        +7n;
        const o29 = {
        };
        new Proxy(v0, o29);
    }
}
try {
    new BigInt64Array(1000);
} catch(e6) {
}
try {
    new BigUint64Array(4096);
} catch(e10) {
}
try {
    new Float64Array(166);
} catch(e14) {
}
const v16 = new Set();
%VerifyType(v16);
const v18 = Symbol.toPrimitive;
const o21 = {
    [v18]() {
        166 ** this;
        return 5;
    },
};
166 >= o21;
