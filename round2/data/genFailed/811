[1,[7,[7,1],7,7],-5,-5,-5];
const v8 = new BigInt64Array(7);
const v11 = new Uint32Array(276);
const v14 = new Uint8Array(64);
var d = 7;
64 ^ 1;
if (64) {
    v14[v11] = v8;
    const o19 = {
        "maxByteLength": 73,
    };
    const v21 = new SharedArrayBuffer(73, o19);
    new BigInt64Array(v21);
} else {
    new Int16Array(0);
    new Uint32Array(9);
    new Uint16Array(3993);
}
const v0 = [23720.835871567717];
const v1 = [0.13947099921438955,Infinity,-516.7939239415468,-1.6935953183237197e+308,1000000000000.0];
[6.488427591614119e+307,1000.0,4.699872228735444,0.0,1000000000000.0,-6.357157806169068e+307];
function f3(a4, a5) {
    const o16 = {
        "e": a5,
        __proto__: a4,
        "h": v1,
        [a4]: v0,
        ...a4,
        set f(a7) {
            const o10 = {
                "maxByteLength": 268435440,
            };
            const v12 = new ArrayBuffer(256, o10);
            try {
                new Int16Array(v12);
            } catch(e15) {
            }
        },
    };
    return o16;
}
const v17 = f3(v1, v0);
const v18 = f3(v1, v17);
const v19 = f3(v1, v1);
const v23 = v1[4];
let v24;
try { v24 = v23.valueOf(v17, 9007199254740990, v19); } catch (e) {}
const v25 = v24 in v1;
const v28 = ("MIN_VALUE").normalize("NFKC");
const v30 = [9007199254740990,v18,v25];
Reflect.apply(v0.push, v28, v30);
