new Uint8ClampedArray(512);
const v8 = new Int32Array(128);
new Int32Array(8);
v8.length = 8;
function f13(a14, a15) {
    function f17(a18) {
        [v8,a18,128,[Uint8ClampedArray,a15,a15,this,Uint8ClampedArray]];
        [a18,Uint8ClampedArray,a15,a15];
    }
    this.onmessage = f17;
    try { a15.p(this, this, this, f17, f17); } catch (e) {}
    try {
        v8.toLocaleString();
    } catch(e24) {
    }
}
const v27 = [128,10n];
const o28 = {
    "arguments": v27,
    "type": "function",
};
new Worker(f13, o28);
function f0() {
    const o4 = {
        [0.44544443846347204]: 1000,
        1: 1000,
        "e": 0.44544443846347204,
        [1000]: 1000,
        __proto__: -9.192339643612376e+307,
        "g": 1000,
        [-9.192339643612376e+307]: 1000,
        2: -9.192339643612376e+307,
        "h": 0.44544443846347204,
        "f": 0.44544443846347204,
        "a": 0.44544443846347204,
    };
    return o4;
}
const v5 = f0();
f0();
f0();
const v11 = /(?:ab){4,7}/sduy;
/7/idv;
const v13 = /abc|def(ab)/muy;
class C14 {
    constructor(a16, a17, a18) {
        let {"c":v19,"d":v20,"g":v21,} = this;
        try {
            v20 >>= v21;
        } catch(e22) {
        }
    }
    static [v11];
    [v11];
    static [f0] = v13;
    #c = v13;
}
let v23 = new C14(5, 512, v5);
const v24 = new C14(512, 512, v23);
const v25 = new C14(4, v11, v24);
for (const v26 of f0) {
    try {
        v13.length = 221;
    } catch(e28) {
    }
}
f0 * C14;
try {
    v23 = v25;
} catch(e30) {
}
