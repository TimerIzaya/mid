class C6 {
    static n(a8, a9) {
        this ** a8;
        +16;
        Math.max(16);
        +-14;
        Math.clz32(47396);
        return -1835678815;
    }
}
new C6();
const v19 = new C6();
new C6();
let {"g":v21,} = v19;
for (const v22 of v21) {
    const v24 = new Map();
    function F25(a27, a28, a29, a30) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = a28;
        this.b = a27;
    }
    new F25(16, v22, C6, v22);
    new F25(v21, v21, v24, 25572);
    new F25(-1835678815, 4294967295, v19, Map);
}
const v0 = [-1.537444113032231e+307,-0.0032643641217298125,-328.0065725880677,1.0,2.7567797910535834];
const v1 = [-200611.37440182478,-1e-15,1.66665731077641e+308,-577543.4267926232,1.0181997503716033e+308,1000000000.0,2.2250738585072014e-308,-7.563459502789643,4.028007977709546];
[-2.2250738585072014e-308,-1.2558570399955897e+307,1000000000.0,-4.0,1e-15,-834.6903330430202,-210.080483619544,-580639.2959778028,0.057149614755858336];
try {
    new BigUint64Array(3548);
} catch(e6) {
}
try {
    new Float32Array(127);
} catch(e10) {
}
try {
    new Uint16Array(3578);
} catch(e14) {
}
function f15() {
    return v0;
}
const v16 = [f15,3548,v0];
const v17 = [Uint16Array,v16,f15,v16,v0];
[Float32Array,3548,v1,Uint16Array,Float32Array];
v16["slice"](3548, 3548);
v17.length -= 127;
try {
    const v21 = /(?=)*/idy;
    const o22 = {
    };
    v16.unshift(Float32Array, v21, v21, o22);
} catch(e24) {
}
