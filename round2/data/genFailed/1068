[-1.7976931348623157e+308,-0.0,-3.0,920324.85647457,4.0,-1.7133887189899368e+308,1000000.0,-1.4485094383715414e+308];
[-1000.0,6.50794275353536,-2.0,8.424397200688396];
[-2.2250738585072014e-308,3.0,-9.450239520733014,1000000.0,984.481271374131];
const v6 = /TQ(x)(x)(x)\3*/isu;
const v7 = /U/m;
/Xa^(?=.)?/ysv;
[v6,"a",v7];
[[v7,v6],v6,"a","-65536"];
"constructor" * "hasInstance";
const o20 = {
    valueOf() {
        return "17644";
    },
};
const o24 = {
    "execution": "sync",
    "type": "minor",
};
gc(o24);
class C3 {
    [-1833824042] = "caller";
    #n(a5, a6) {
        try {
            super["caller"] = a5;
        } catch(e7) {
        }
        try {
            this.g = a6;
        } catch(e8) {
        }
        return "caller";
    }
    [0.09830831351985769];
    3;
    ["caller"] = 0.09830831351985769;
}
new C3();
new C3();
new C3();
class C12 extends C3 {
    n(a14, a15, a16) {
        super.d;
        return -1833824042;
    }
    static #p(a20, a21, a22) {
        const o23 = {
        };
        try {
            new Proxy(C3, o23);
        } catch(e26) {
        }
        Math.acos(2053431606);
        Math.sin(2053431606);
        Math.atan2(a20, -1.0518611577844972e+308);
        Math.sinh(2053431606);
        return this;
    }
}
new C12();
new C12();
const v37 = new C12();
try {
    new Uint16Array(8);
} catch(e41) {
}
try {
    new Uint8ClampedArray(64);
} catch(e45) {
}
try {
    new BigUint64Array(6);
} catch(e49) {
}
const v53 = ("number").length;
Object.defineProperty("isConcatSpreadable", 6, { writable: true, value: "isConcatSpreadable" });
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a56;
    } catch(e58) {
    }
    try {
        this.e = Uint16Array;
    } catch(e59) {
    }
    try {
        this.c = a56;
    } catch(e60) {
    }
}
new F54(v37, 64);
new F54("isConcatSpreadable", v53);
new F54(C3, 64);
