function f0() {
    const o8 = {
        get e() {
            super["maxByteLength"];
            super.f = "maxByteLength";
            ("2").length;
            return Set;
        },
        "c": 2.0,
        "d": 2.0,
        ..."2",
    };
    return o8;
}
f0();
f0();
f0();
new BigUint64Array(64);
new Int16Array(16);
const v20 = new Uint32Array(3934);
f0 -= f0;
for (const v21 of v20) {
    const v23 = Symbol.matchAll;
    v20[v23];
    let v26 = -9007199254740992;
    Math.log10(v23);
    Math.log2(v23);
    v26++;
}
[-16,4294967295];
[-1,-9007199254740991,-9007199254740990,-28111,4294967296,5];
const v2 = [41162,15,16,1842061520];
const v3 = [-2.2250738585072014e-308,-0.0,4.0,0.5086296064431296,1000000000.0,1.0,4.0,0.48387040028040373,-1.8859848309061782,-308601.502097561];
let v4 = [896300.8654727794];
[-1000000000000.0,-11.882438138437692];
const v6 = /(?:foo)/sidmv;
const v7 = /b(x)(x)(x)\3*yx+/igmuy;
/xyz{1,32}?[(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10a[a-z]]/idv;
/xyz{1,}?/imv;
const v10 = /a(?=bbb|bb)c/mv;
const v11 = /ha\nb\bcL(ab)/idmy;
function f12() {
    return v6;
}
try {
    v2.c = v10;
} catch(e16) {
}
try {
    v7.__proto__ = v11;
} catch(e17) {
}
new f12();
try {
    v4 -= v3;
} catch(e19) {
}
