const v2 = new Int32Array(2418);
const v5 = new Int32Array(255);
new Uint32Array(6);
class C9 extends Uint32Array {
    static o(a11, a12) {
        const v13 = new Int32Array(2418);
        super.buffer = a11;
        try { a11(6, v2, v13, a12); } catch (e) {}
        return a11;
    }
    2147483649;
    static [Int32Array] = v5;
    [6];
    g;
    7;
}
new C9();
new C9();
new C9();
function f18() {
    return v2;
}
for (const v19 of v5) {
    const o22 = {
        "maxByteLength": 1277,
    };
    const v24 = new SharedArrayBuffer(1277, o22);
    new Uint8Array(v24);
}
const v0 = /[abc|def|ghi]/dyv;
const v1 = /.[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]\w|\d/idyv;
/r[\cAa\D]*/sdyv;
[-49763,-63677,9,15,65537];
const v4 = [-65535,48477];
const v5 = [9,-1,62025,2147483648,11,729554474];
[-4294967295,1817258511,4294967296,-2975];
const v7 = [-5,-9223372036854775807,764190671];
const v8 = [9,7,-4294967296,-2,1073741824,58344,-1];
const v12 = v0.ignoreCase;
let v13;
try { v13 = new v8(1000, v7, v12, v1, v5); } catch (e) {}
try {
    v4.length = 256;
} catch(e14) {
}
let v15;
try { v15 = v13(v5, v7, v8); } catch (e) {}
try {
    v13 = v15;
} catch(e16) {
}
