function f0() {
}
const v5 = new WeakSet();
function f6() {
    return v5;
}
[-13,-2,1073741824,22721];
const v8 = [1561989707];
[9223372036854775807];
for (let [v13,v14] of v8) {
    v5.c -= 4;
}
try {
    f0();
} catch(e16) {
}
f6();
const o20 = {
    "maxByteLength": 268435439,
};
const v22 = new SharedArrayBuffer(256, o20);
new Float32Array(v22);
try {
    new Float32Array(2774);
} catch(e3) {
}
try {
    new Float64Array(7);
} catch(e7) {
}
try {
    new Uint32Array(158);
} catch(e11) {
}
const v12 = /[[\0]tJzU]/siduy;
const v13 = /xyz{1,32}/sgm;
const v14 = /[y^xxx$]/siv;
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a17;
    } catch(e19) {
    }
    try {
        this.b = 158;
    } catch(e20) {
    }
    try {
        this.f = 7;
    } catch(e21) {
    }
}
new F15(v12, v12);
new F15(v12, v12);
new F15(v14, v13);
[-5.501745788960148e+307,-25868.644820023328,-1000000.0,-2.0,0.07500551498159569];
[1000000.0,-2.3350831478634877,-1000.0,1.7976931348623157e+308];
[-1.1240712901571792e+308,-1000000000000.0,-1.7243494986070237e+308,-4.0,-3.0,1.0,0.8428329726628586];
try {
    new Int32Array(512);
} catch(e31) {
}
try {
    new Uint16Array(4);
} catch(e35) {
}
try {
    new Float64Array(7);
} catch(e39) {
}
