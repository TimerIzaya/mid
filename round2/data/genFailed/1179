class C3 {
    toString(a5) {
        let v4 = this;
        v4 **= "1";
        a5.length = 5;
        return a5;
    }
    g = "1";
    c = 1e-15;
    #m(a8) {
        try { this.toString(..."1", this, ...a8, ..."1"); } catch (e) {}
        return "undefined";
    }
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
const v16 = [-536870912,-65536,2147483648,-1232931727,887673516,-1868067382,-1365847688,1010516427,-7004,4];
const v17 = [9223372036854775807,12,-11,-35642,-9007199254740992,-9007199254740991];
[-1024,9007199254740990,1209826893,-2147483648,-65537];
/(?:ab){4,7}/gmyiu;
/\u{12345}/myv;
/{}a\D/gmi;
const v22 = delete v14?.g;
%VerifyType(v16);
v15 in v17;
const o24 = {
};
o24.b = v22;
const o25 = {
};
o25.b = v22;
o25.g = v13;
const o26 = {
};
o26.b = v22;
o26.g = v13;
o26.h = v15;
const o27 = {
};
o27.b = v22;
o27.g = v13;
o27.e = 48087;
try {
    new Uint8ClampedArray(124);
} catch(e3) {
}
try {
    new Uint8ClampedArray(3932);
} catch(e7) {
}
try {
    new Uint16Array(1024);
} catch(e11) {
}
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a15;
    } catch(e18) {
    }
    try {
        this.d = Uint8ClampedArray;
    } catch(e19) {
    }
}
const v20 = new F12(3932, 3932, 1024, 1024);
new F12(124, 1024, 3932, 124);
const v22 = new F12(124, 1024, 3932, 1024);
const v26 = v22.__proto__;
/^xxx$R/idg;
/[\u{12345}\u{23456}]/smv;
const v29 = /6(?=.)?/smuy;
try {
    v29.dotAll = v26;
} catch(e30) {
}
try {
    v20.h = v22;
} catch(e31) {
}
