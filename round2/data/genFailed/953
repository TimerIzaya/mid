function f0() {
}
const v1 = [13,13,13,-4096,-225639661,-23773,2147483647,10,10000];
const v2 = [1740220138,9007199254740991,-2147483648];
let v3 = [-256,-7,9223372036854775807,2147483647];
function f7() {
    return 9007199254740990n;
}
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a12;
    this.c = a10;
    this.e = a13;
}
new F8(v1, v2, v3, v2);
new F8(v1, v2, v2, v1);
new F8(v2, v2, v2, v1);
[1,4294967296,268435439,-61420,-268435456,-1595353836];
const v18 = [13,1024,8751,2,11,-2,2,-37645];
const v19 = [-4294967296,13,255,48813,14,256,2147483649,9223372036854775807,-1461892152,-13168];
Object.defineProperty(v18, "e", { configurable: true, enumerable: true, get: f0 });
for (let v20 = 0; v20 < 64; v20++) {
    f0();
    v3 = v19;
    v18.__proto__;
    const o25 = {
        "maxByteLength": 149,
    };
    const v27 = new SharedArrayBuffer(7, o25);
    new Uint16Array(v27);
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -15;
    } catch(e3) {
    }
    try {
        this.c = -15;
    } catch(e4) {
    }
    try {
        this.a = -15;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C13 extends F0 {
    constructor(a15, a16) {
        super();
        let v19 = -2147483649;
        const v20 = a15 / a15;
        v19--;
        Math.clz32(v20);
    }
    static 10 = v8;
    static [v8];
    #d;
    static [v6] = -8n;
}
const v23 = new C13(-8n, v6);
const v24 = new C13(-8n, v6);
const v25 = new C13(-1n, v8);
class C26 extends C13 {
    static {
        try {
            v25.length = 0;
        } catch(e29) {
        }
    }
    static #c = v25;
    constructor(a31, a32, a33, a34) {
        super(a34, v8);
        [-256,7,-1069406776];
        [1770395950,2511,-2147483648,-30436,-798652036,-2147483649,-1333108612];
        [2,7,-108927331,65536,-4096,2147483647,129630592,-709043908];
        a31.__proto__;
    }
}
const v39 = new C26(v23, v7, v7, v23);
const v40 = new C26(v7, v24, C13, v6);
new C26(v40, v8, v39, v40);
const v42 = [v23,v40,v8];
const v43 = [C26,v8,v42,C13,C26];
[-2147483648n,v23,v43];
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a47;
    } catch(e50) {
    }
}
new F45(v25, v7, -2147483648n);
new F45(v42, v23, -1n);
new F45(v43, v7, -2147483648n);
