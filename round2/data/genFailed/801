const v0 = /(?<!)?/gsv;
const v1 = /(\xed\xb0\x80)\x01/d;
const v2 = /[\9t?]/d;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v2;
}
const v7 = new F3(v1, v1);
const v8 = new F3(v1, v2);
new F3(v0, v2);
[F3,v7,v2];
const v12 = [v2,[v8]];
const v13 = [9007199254740992];
const v14 = [51047,-1227428757,-3,1073741823,2006631239,-1,-12,-20197,-63277];
[-9223372036854775807,14422,4,-1,268435439,-4294967295,-268435456];
v14[0] = v14;
-561262.495801527 in v13;
Object.defineProperty(v12, "c", { writable: true, configurable: true, value: -4.185208262356186 });
for (let v20 = 0; v20 < 32; v20++) {
    v13["p" + v20] = v20;
}
try {
    new Uint16Array(223);
} catch(e3) {
}
try {
    new Float32Array(8);
} catch(e7) {
}
try {
    new Float32Array(9);
} catch(e11) {
}
/5a*b|cU\b[x]+/dmu;
const v16 = /a?/sdv;
const v17 = /(a)\1U(x)(x)(x)\3Rz(?: foo )*/siduy;
const v18 = v16[0];
let v19 = v18?.[1237];
let v22 = Reflect.construct(Float32Array, [v17], Float32Array);
({"a":v22,"e":v19,} = v18);
const v24 = Symbol.iterator;
const o33 = {
    [v24]() {
        let v26 = 10;
        const o32 = {
            next() {
                v26--;
                const v30 = v26 == 0;
                const o31 = {
                    "done": v30,
                    "value": v26,
                };
                return o31;
            },
        };
        return o32;
    },
};
