let v4 = -15;
class C9 {
    #g;
    [-3];
    #toString(a11, a12, a13, a14) {
        a11[5] = this;
        try {
            a11.#g /= a12;
        } catch(e15) {
        }
        new Uint8Array(255);
        new Float32Array(1659);
        new Uint8Array(44);
        return 1659;
    }
}
new C9();
const v26 = new C9();
new C9();
Reflect.construct(C9, [], C9);
throw 536870912n;
[v26,-500878803,536870912n,Reflect];
Math.asin(10);
(-65536) ** v4;
-10;
const v39 = v4 ** Reflect;
-65536 / v4;
++v4;
v39 << v4;
try {
    new Float64Array(128);
} catch(e9) {
}
try {
    new BigUint64Array(340);
} catch(e13) {
}
try {
    new Float32Array(64);
} catch(e17) {
}
class C18 {
    static f = Float64Array;
    [-1] = 128;
    1073741823 = -2147483649;
    static #c;
    static #toString(a20, a21, a22) {
        return -2147483649;
    }
    b;
    [0];
    [Float32Array] = 64;
}
new C18();
new C18();
new C18();
for (const v29 of 340) {
    const o33 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o33);
}
