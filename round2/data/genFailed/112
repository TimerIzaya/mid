let v1 = "hasInstance";
class C3 {
    [v1];
    toString(a5, a6) {
        this[-5106] %= a6;
        a6[v1] = a5;
        return this;
    }
    static #valueOf(a8) {
        v1 = a8;
        return -5.688925619615352;
    }
    static 199;
    [-5106] = v1;
    static #g = -5.688925619615352;
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
class C12 {
    get e() {
        try {
            new C3();
        } catch(e15) {
        }
        return v11;
    }
    constructor(a17, a18) {
        try { this["indexOf"](); } catch (e) {}
        this.e >>= v1;
        Object.defineProperty("indexOf", 7, { enumerable: true, value: v9 });
    }
}
const v21 = new C12(v10, C3);
const v22 = new C12(v11, v10);
const v23 = new C12(v9, v10);
try { C3.shift(v21, 1814769416n, 1814769416n, 1814769416n); } catch (e) {}
const v28 = v1?.e;
const o29 = {
};
o29.h = v23;
const o30 = {
};
o30.h = v23;
o30.f = v28;
const o31 = {
};
o31.h = v23;
o31.f = v28;
o31.d = C12;
const o32 = {
};
o32.h = v23;
o32.f = v28;
o32.d = v22;
try {
    new Int16Array(2);
} catch(e3) {
}
try {
    new Float32Array(1);
} catch(e7) {
}
try {
    new Float32Array(160);
} catch(e11) {
}
class C18 extends Int16Array {
    11 = Int16Array;
    g = 9007199254740991n;
}
new C18();
new C18();
const v21 = new C18();
new Map();
try {
    v21[6] = -1000.0;
} catch(e24) {
}
