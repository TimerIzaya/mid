let v0 = 3025;
new Uint16Array(v0);
const v5 = new Int32Array(8);
let v7 = Uint32Array;
const v8 = new v7(1);
const v9 = [1,v8,Uint16Array,v8,v7];
const v10 = [v0,v9,v9,v9,8];
const v11 = [v7,v10,v8,v5];
try { v10.push(v0, v10, 1); } catch (e) {}
function f13(a14, a15) {
    ({"b":v0,"e":v7,"length":a15,} = v11);
    v5.__proto__ = v5;
    return a14;
}
Object.defineProperty(v11, f13(8, 8) * f13, { writable: true, configurable: true, enumerable: true, get: f13, set: f13 });
v10 <= v10 ? v10 : v10;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 268435439;
    } catch(e3) {
    }
    try {
        this.c = 268435439;
    } catch(e4) {
    }
}
new F0();
new F0();
const v7 = new F0();
const v8 = [v7,F0,F0,v7,F0];
const v9 = [v7,v8,F0];
const v10 = [v9,v7,v9,v8,v8];
let v11 = -39527n;
{
    v9[10] ^= 997322773n;
    let v14 = 1000n >= v10;
    try {
        v14 >>= v14;
    } catch(e15) {
    }
}
try {
    v11 &= 997322773n;
} catch(e16) {
}
