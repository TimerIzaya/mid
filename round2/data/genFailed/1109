[1.0];
[0.0,-2.0,-1e-15,0.8250749725016293,5.853125219958381e+307,1.0];
const v2 = [969768.5837512729,1.7976931348623157e+308,2.2250738585072014e-308];
new Float32Array(3);
const v8 = new Int16Array(3293);
new Int16Array(128);
try {
    v8.with(128, Int16Array);
} catch(e13) {
}
v2[v2];
class C15 extends Float32Array {
    #e = v2;
    static d;
    [3] = v2;
}
new C15();
new C15();
new C15();
try {
    new Uint8ClampedArray(512);
} catch(e3) {
}
try {
    new Uint8Array(10);
} catch(e7) {
}
try {
    new Int16Array(14);
} catch(e11) {
}
try {
    new Uint16Array(255);
} catch(e18) {
}
try {
    new Float64Array(1);
} catch(e22) {
}
try {
    new BigUint64Array(127);
} catch(e26) {
}
let v27;
try { v27 = Float64Array.p(); } catch (e) {}
-1876087775 !== 1;
for (let v32 = 0; v32 < 32; v32++) {
    v27["p" + v32] = v32;
}
