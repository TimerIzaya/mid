new Uint16Array(6);
let v4 = Uint8Array;
const v5 = new v4(2637);
const v8 = new Int16Array(4);
function f9() {
    return 4;
}
function f10(a11, a12, a13, a14) {
    const o19 = {
        "h": f9,
        [v4]: f9,
        "e": a14,
        [a14]: Int16Array,
        "b": a14,
        set f(a16) {
            try { a13.matchAll(4); } catch (e) {}
            v4++;
        },
        "a": v4,
        "f": a11,
        "d": 2637,
        [v8]: v8,
        ...a13,
    };
    return o19;
}
const v20 = f10(2637, 6, Int16Array, 6);
const v21 = f10(6, 2637, f9, v4);
f10(4, 6, Int16Array, 2637);
function f23(a24, a25, a26) {
    Object.defineProperty(a26, 16, { writable: true, configurable: true, get: f9, set: f10 });
    a24?.c;
    return v20;
}
f23(f23, 6, v21);
[[v5,[v5]]];
try {
    new Int8Array(2077);
} catch(e3) {
}
try {
    new Uint8ClampedArray(1024);
} catch(e7) {
}
try {
    new BigInt64Array(1019);
} catch(e11) {
}
try {
    new Float64Array(256);
} catch(e15) {
}
let v17 = Float64Array;
try {
    new v17(171);
} catch(e19) {
}
try {
    new BigInt64Array(16);
} catch(e23) {
}
try {
    v17 &&= v17;
} catch(e24) {
}
const v25 = (1024).b;
for (const v26 of v25) {
    try { v25.tanh(BigInt64Array, BigInt64Array, v26, v26, Float64Array); } catch (e) {}
    1024 >>> Int8Array;
}
