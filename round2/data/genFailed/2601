const v2 = new BigUint64Array(6);
const v5 = new BigInt64Array(128);
const v8 = new Uint8Array(257);
const v9 = [v8,Uint8Array,v2];
const v10 = [v9,v2,v9];
[BigInt64Array,BigUint64Array,BigUint64Array,v2,BigUint64Array];
class C12 {
    constructor(a14, a15, a16) {
        v5[16] **= a16;
        let v17;
        try { v17 = new a15(a16, ...v2, ...v10, 128, a16); } catch (e) {}
        try { v17(); } catch (e) {}
        a16 = 6;
        new WeakSet();
    }
    valueOf(a22, a23) {
        v8[Uint8Array] <<= 257;
        function f24(a25) {
            return v10;
        }
        class C26 extends f24 {
            #b;
            #f = 257;
        }
        return f24;
    }
}
const v27 = new C12(6, BigInt64Array, 128);
new C12(6, v10, 257);
new C12(128, 257, 6);
function f30(a31, a32) {
    v27[a32] = v5;
    const v34 = Symbol.iterator;
    const o43 = {
        [v34]() {
            let v36 = 10;
            const o42 = {
                next() {
                    v36--;
                    const v40 = v36 == 0;
                    const o41 = {
                        "done": v40,
                        "value": v36,
                    };
                    return o41;
                },
            };
            return o42;
        },
    };
}
new Promise(f30);
