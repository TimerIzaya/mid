let v1 = Float32Array;
const v2 = new v1(512);
const v5 = new Float32Array(86);
new Float64Array(154);
function f9(a10, a11, a12) {
    const o24 = {
        "e": a11,
        [-2]: a11,
        "b": Float32Array,
        set g(a14) {
            return a12;
            new Int16Array(1879);
            new Uint8ClampedArray(512);
            new Float32Array(4);
        },
    };
    return o24;
}
const v25 = f9(512, 512, 154);
const v26 = f9(86, 154, 512);
const v27 = f9(154, 86, 512);
class C28 extends v1 {
    toString(a30, a31) {
        v2.__proto__;
        let [...v33] = v5;
        return v33;
    }
    #f;
    static {
        const v36 = [f9];
        Reflect.apply(v2.reduce, this, v36);
    }
    2147483649;
    [v1] = 86;
    c = v25;
}
new C28();
const v40 = new C28();
let v41 = new C28();
if (f9 !== Float64Array) {
    v41[Float32Array];
    v41 = v40;
} else {
    v1 %= Float32Array;
    -v26;
    v27[Symbol.species];
}
