const v0 = [];
const v1 = [v0,v0];
const v2 = [v0,v1,v1,v1,v0];
const v3 = [v2,v0,v0,v2,v1];
function f4() {
    return v3;
}
const v5 = [v2,v2,v3,v2];
const v6 = [v3,f4,v5,v2];
let v7 = [f4,v0,f4,v5,v1];
class C8 extends f4 {
    constructor(a10, a11, a12, a13) {
        super();
        a13.__proto__;
        ({"f":v7,"length":a10,} = v7);
        try { v7.getOwnPropertyDescriptors(a12, a11); } catch (e) {}
    }
    #toString(a17, a18, a19, a20) {
        a20["join"](a19);
        a20 = v2;
        super[f4] = v3;
        return v3;
    }
}
const v23 = new C8(v7, v2, C8, v3);
const v24 = new C8(v6, v6, v1, v2);
new C8(v23, v1, v24, v5);
new Array(9);
try {
    new Array(9);
} catch(e30) {
}
v1.length += v7;
try { v5.join(v7); } catch (e) {}
new f4();
