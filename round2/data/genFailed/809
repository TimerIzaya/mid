const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = v0;
    this.c = v0;
    this.a = v0;
}
const v3 = new F1();
new F1();
new F1();
const v6 = [0.589733361477193,5.0,-4.0];
let v7 = [-619987.5132885361,1000000.0,-253539.003985296,-1e-15];
const v8 = [1e-15,766872.5436895248,-3.0,8.353889405196181,-3.0,-0.0,1000.0,-1000000.0];
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a12;
    this.f = a12;
    this.g = a11;
}
const v13 = new F9(v6, F1);
const v14 = new F9(v0, v8);
const v15 = new F9(v8, v8);
[v15,v15];
[v13,v3,v3];
const v18 = [v14,v3,v13];
/(a\1)/yi;
/(?:a+){0,0}5oF?/gydv;
v7.length = /[^N[Z(?<a>.)]*]/myd;
v7 = v18;
const v24 = 268435456 % F1;
!v24;
F1 - v24;
F1 % v24;
Math.cosh(268435456);
try {
    new Uint32Array(1);
} catch(e3) {
}
try {
    new Int32Array(1000);
} catch(e7) {
}
try {
    new Uint32Array(116);
} catch(e11) {
}
[256,268435440,708919188,-9007199254740991,1];
const v16 = [4,-372875692,64,268435441,-2,4,-256,268435440];
const v17 = [-44691,2021473370,9007199254740992,10,8];
class C18 extends Uint32Array {
    64 = Uint32Array;
    10 = 1;
    f;
    static #a = -932730420n;
    static {
        const o20 = {
            __proto__: this,
            "g": 1000,
            2: Uint32Array,
        };
        let {"e":v21,"h":v22,...v23} = o20;
        v16.__proto__;
    }
    static #d;
    static #b = Uint32Array;
}
new C18();
const v26 = new C18();
const v27 = new C18();
const v28 = 116 > 1000;
if (v28) {
    try {
        new Uint32Array(512, 3, 40986);
    } catch(e33) {
    }
} else {
    try { v27(v27, v26, v17, -932730420n, v28); } catch (e) {}
}
