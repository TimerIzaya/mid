const v0 = [-52367];
const v1 = [53564,-3];
const v2 = [5];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a5;
    this.e = a5;
}
const v7 = new F3(v0, v1);
const v8 = new F3(v1, v0);
const v9 = new F3(v0, v2);
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a13;
}
const v15 = new F11(v7, v7);
const v16 = new F11(v9, v7);
const v17 = new F11(v7, v7);
function f18(a19, a20, a21) {
    const o29 = {
        "c": a21,
        "e": a19,
        "a": v17,
        "f": a19,
        ...a19,
        toString(a23, a24, a25) {
            [15,-9223372036854775808,-4294967296,-268435456,5,1518381659,3900,-15081];
            [16251,-53432,129,268435439,43795,10,-2147483647,4294967295,4];
            return [3,65535];
        },
        3: F3,
        "d": v15,
        ...a19,
    };
    return o29;
}
const v30 = f18(v8, v8, v0);
const v31 = f18(v7, v7, v1);
f18(v9, v31, v2);
v0.toString = f18;
v30.c;
v31[v16];
const o37 = {
    "maxByteLength": 268435456,
};
const v39 = new ArrayBuffer(722, o37);
new Uint32Array(v39);
let v1 = 16n;
[-14];
[8,-193300568,43190,-122719294];
const v5 = [2147483649,15647,-1623242301,2147483647,256,14,-1434753945,-256,60352];
try {
    new BigInt64Array(1000);
} catch(e9) {
}
try {
    new Uint32Array(1);
} catch(e13) {
}
try {
    new Float64Array(1633);
} catch(e17) {
}
throw v5;
const v21 = ~(v1--);
Math.log1p(v21);
-v21;
[-11,10,147682838,0,2147483647];
[2147483649,-1752348909,-42488];
[-5,25595,-541761048,-15,6,12021,-1073741824];
