const v5 = new BigUint64Array(108);
const v8 = new Float64Array(2);
const v11 = new Float64Array(1);
v8[v11] &&= -342.4331762710067;
let v12;
try { v12 = v11.findIndex(Float64Array, v5); } catch (e) {}
let v13;
try { v13 = v12(v12, v12, v8, 1, v12); } catch (e) {}
try { v12.valueOf(Float64Array, v8, v12, v12, 1); } catch (e) {}
if (v13) {
} else {
    const v18 = v13 && v8;
    const o19 = {
    };
    new Proxy(v18, o19);
}
const v0 = [];
function f1() {
    return v0;
}
/a\s/sg;
const v3 = /ta2a$+/sdu;
/\p{General_Category=Decimal_Number}k/sgmv;
const v6 = new Map();
class C10 {
    [-54.12345137394834];
    static toString(a12, a13) {
        const t11 = super.h;
        const v15 = delete t11?.d;
        let v18 = 8.714208246188371e+307;
        v18++;
        const v20 = v15 / v15;
        Math.imul(-4096, a12);
        --v18;
        -v20;
        return v6;
    }
    a;
}
new C10();
const v25 = new C10();
const v26 = new C10();
[-54.12345137394834,f1,v3];
[2.2250738585072014e-308,v26];
const v29 = [v3,f1,f1,Map];
for (const v30 in v26) {
    try { v29.indexOf(v30); } catch (e) {}
    break;
    Map > v30;
}
delete v25[v25];
f1();
%PrepareFunctionForOptimization(f1);
f1();
f1();
%OptimizeMaglevOnNextCall(f1);
f1();
