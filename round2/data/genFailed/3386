function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = 64;
    this.a = 64;
    this.d = 64;
}
const v3 = new F0();
const v4 = new F0();
const v5 = new F0();
class C6 {
    6;
    #o(a8, a9) {
        v4.b = a9;
        this instanceof F0;
        const o13 = {
            "maxByteLength": 4096,
        };
        const v15 = new ArrayBuffer(4096, o13);
        new Uint8Array(v15);
        return v4;
    }
}
new C6();
const v19 = new C6();
let v20 = new C6();
const v21 = [v5];
const v22 = [v4,C6,v21];
const v23 = [v5,v22,C6,v20,v3];
class C24 {
    9 = v20;
    toString(a26, a27, a28) {
        a28.toString = new.target;
        arguments[2762141373];
        return v19;
    }
    #d;
    constructor(a33, a34, a35, a36) {
        function f37(a38, a39) {
            const o40 = {
                1: this,
            };
            return o40;
        }
        const v41 = f37(v20, v20);
        f37(a36, v5);
        f37(v41, v5);
    }
}
let v44 = new C24(v3, F0, v3, v22);
const v45 = new C24(v44, C6, v21, v23);
const v46 = new C24(v19, v22, v45, v21);
v44 = v46;
v20 **= v4;
try { v22(C24, v23, v3); } catch (e) {}
const v49 = Symbol.species;
const v50 = v19[v49];
Math.round(v50);
Math.log(v50);
const v55 = v49 % 7;
-v50 % v55;
Math.exp(v49);
~v50;
