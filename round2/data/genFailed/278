const v1 = new Set();
let v13 = -536710037;
const v15 = new Date();
if (1136 == Date) {
    v15.b;
} else {
    Date["now"]();
}
Date.prototype >>= -3.0;
Object.defineProperty(Date, 1.7976931348623157e+308, { configurable: true, value: v1 });
let v22 = v13--;
Math.round(v22);
--v22;
-1024;
let v1 = "o";
class C3 {
    constructor(a5, a6) {
        switch ("UXtk") {
            case a6:
                [...a6] = a6;
                break;
        }
    }
    ["UXtk"];
    static #g = "UXtk";
    get g() {
        try {
            this.a = this;
        } catch(e8) {
        }
        return "UXtk";
    }
}
new C3("UXtk", "UXtk");
new C3("UXtk", "UXtk");
const v11 = new C3(v1, v1);
function f15() {
    return v11;
}
class C19 {
    0 = C3;
    valueOf(a21, a22, a23) {
        const v25 = [this,a22,f15];
        Reflect.construct(a22, v25, f15);
        let [v27,v28,v29] = v25;
        try {
            super.m(v27, "getFullYear", C3, v27, -18737);
        } catch(e31) {
        }
        return "d";
    }
    static 10 = -553911368;
    ["d"] = "getFullYear";
    a;
}
new C19();
new C19();
let v34 = new C19();
const v35 = new C3(v1, "d");
v35 > -18737;
try {
    v34 &= C19;
} catch(e37) {
}
const t50 = "d";
t50.length &= v34;
f15();
try {
    v1 = "getFullYear";
} catch(e39) {
}
