function f0() {
    const o4 = {
        "c": -1,
        "g": "stack",
        ..."stack",
        [0.631509550985432]: "stack",
        ..."stack",
        __proto__: "stack",
        ..."stack",
        "d": -1,
        ["stack"]: "stack",
        "e": 0.631509550985432,
        "b": "stack",
        ..."stack",
    };
    return o4;
}
const v5 = f0();
const v6 = f0();
const v7 = f0();
class C8 extends f0 {
    static #f = v5;
    3343 = v7;
    #c;
    g = v6;
    static p(a10) {
        for (let v11 = 0; v11 < 32; v11++) {
            this["p" + v11] = v11;
        }
        return this;
    }
}
const v14 = new C8();
new C8();
const v16 = new C8();
const v18 = new WeakSet();
if (4294967297) {
    const v22 = delete v6[v7];
    v18.has(v22, v22, v6, v14);
    let [] = C8;
} else {
    try { v6.m(v5, WeakSet, 3, v16, 3); } catch (e) {}
}
try {
    new BigUint64Array(424);
} catch(e3) {
}
try {
    new BigUint64Array(4096);
} catch(e7) {
}
try {
    new Uint16Array(173);
} catch(e11) {
}
function f12() {
    return Uint16Array;
}
const v13 = [-268435456,-65537,-63316,-721234051,-2147483648,4294967297,255];
[-666948425,-759431959,6];
[-15,51790,3,1243847815,1073741823,9223372036854775807,62486,-1024,128,-1];
[421018.0788445114,1.6108838385236384e+308,165.46940915332425,5.0,-44.98617997661097,-7.980263068089619,NaN,419956.71465197275,0.3270018550796817,1000000000.0];
const v17 = [1000000000000.0,1000000000.0,Infinity,-1000.0,697.1361964303587];
const v18 = [-557.3853909178201,0.8621852876680762];
class C19 extends BigUint64Array {
    set d(a21) {
        function F22(a24, a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a25;
            } catch(e28) {
            }
        }
        const v29 = new F22(173, 4096, v17, v13);
        new F22(a21, 173, v29, v13);
        new F22(173, a21, f12, v17);
    }
    static [4096];
    #g;
    [v17] = BigUint64Array;
    144;
}
new C19();
new C19();
const v34 = new C19();
Math.sqrt(-4294967296);
Math.acos(v34);
+v34;
try {
    new f12();
} catch(e41) {
}
v34[v18];
