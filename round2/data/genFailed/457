class C3 {
    constructor(a5) {
        const v7 = super[this[7]];
        try {
            super.test(11n, v7, -1434320297n);
        } catch(e9) {
        }
        Math.ceil(a5 >> -1000000000.0);
        !-1000000000.0;
    }
}
new C3(11n);
const v18 = new C3(-1434320297n);
const v19 = new C3(-1434320297n);
new Uint16Array(3);
new Int32Array(9);
const v28 = new Float64Array(1000);
const o29 = {
};
new Proxy(v19, o29);
Object.defineProperty(v18, "b", { value: v28 });
let v32 = 0;
while (v32 < 1) {
    SharedArrayBuffer.valueOf = SharedArrayBuffer;
    v18[o29] = SharedArrayBuffer;
    try { v18(SharedArrayBuffer); } catch (e) {}
    v32++;
}
function f0() {
}
function f7() {
    return "catch";
}
class C8 {
    o(a10, a11) {
        try {
            new f7();
        } catch(e13) {
        }
        return 1280890378;
    }
    #c = f0;
    h = f7;
    p(a15, a16, a17) {
        function F18(a20, a21, a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = f7;
            } catch(e24) {
            }
            try {
                this.h = a22;
            } catch(e25) {
            }
            try {
                this.c = 1280890378;
            } catch(e26) {
            }
        }
        const v27 = new F18(1280890378, a15, F18, 1073741824);
        new F18(1073741824, 7864, "getMilliseconds", a17);
        new F18(a17, a15, v27, 1280890378);
        return 1073741824;
    }
}
new C8();
new C8();
new C8();
for (let v37 = 0; v37 < 32; v37++) {
    const t41 = "undefined";
    t41["p" + v37] = v37;
}
throw "undefined";
"undefined" > "getMilliseconds";
try {
    new f7();
} catch(e42) {
}
