let v0 = 1535709212;
let v3 = 536870889;
let v5 = -14;
let v12 = 286590182;
[v12,,v3,v5] = v12[v3];
const v14 = [0.7424127039230023];
[1.7310782667449826e+308];
const v16 = [1e-15,958.2363394356694,-2.0];
let {"c":v17,"f":v18,"length":v19,...v20} = v14;
try { v18(257, v19, 48798, v20); } catch (e) {}
v12?.[v16];
Math.log1p(v17);
++v0;
++v12;
Math.random();
Math.floor(9007199254740992);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 5;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
try {
    new BigUint64Array(127);
} catch(e13) {
}
try {
    new Int16Array(1540);
} catch(e17) {
}
try {
    new Int32Array(47);
} catch(e21) {
}
class C22 extends Int16Array {
    #d = 1557056726;
    114;
    constructor(a24, a25, a26, a27) {
        super(47, a24, 4);
        [0,-81124696,14,-4096,9,7,984824578,1];
        [-36113,536870887,8,-1412448493];
        const v30 = [-49605,-256,-31767,536870912];
        Object.defineProperty(v30, v4, { writable: true, enumerable: true, value: v30 });
    }
    [BigUint64Array] = F0;
    4294967296 = 127;
}
new C22(1557056726, 1540, v6, 47);
const v35 = new C22(1557056726, 1540, C22, 47);
new C22(1540, 47, v35, 4);
const o39 = {
    "maxByteLength": 2298,
};
const v41 = new SharedArrayBuffer(142, o39);
try {
    new Uint16Array(v41);
} catch(e44) {
}
