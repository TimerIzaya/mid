new Int16Array(2249);
const v5 = new BigUint64Array(257);
const v8 = new Uint8Array(132);
class C9 {
    #o(a11, a12, a13) {
        function f14(a15) {
            return a13;
        }
        class C16 extends f14 {
            static #h = f14;
            static #c;
        }
        return BigUint64Array;
    }
    #p(a18, a19, a20, a21) {
        [13,-3,1550683769,-128,1982042906,268435441,-9007199254740991];
        [-2147483649,2116619075,-7,-1,103851888];
        [1250476735,12,1521656616];
        [8,-9007199254740992,16,-9223372036854775808,-5492,2058561880,1738154597];
        [65536,-11,-14,1916126810,-268435456,268435456,-128];
        [1502800724];
        return a21;
    }
}
new C9();
const v29 = new C9();
const v30 = new C9();
[132,v30,v30,v29];
[Int16Array];
const v33 = [v8];
v33[v5] = v30;
v29.g;
v33.__proto__;
v33.length;
v33["flatMap"](..."flatMap", C9, ..."flatMap", ..."flatMap", BigUint64Array, ...v8);
const v40 = Symbol.iterator;
const o49 = {
    [v40]() {
        let v42 = 10;
        const o48 = {
            next() {
                v42--;
                const v46 = v42 == 0;
                const o47 = {
                    "done": v46,
                    "value": v42,
                };
                return o47;
            },
        };
        return o48;
    },
};
[1000,-22207,798979172,-128,48148,11,9007199254740992,16912];
const v1 = [-756473124,-10,51301,-1399459443,4,-2147483649];
[53352088,4294967296,-1];
try {
    new Int8Array(255);
} catch(e6) {
}
try {
    new Uint8ClampedArray(4096);
} catch(e10) {
}
try {
    new Float64Array(154);
} catch(e14) {
}
let v19 = 13;
65536 >> "y";
v1["reduceRight"](65536);
try {
    const t19 = "reduceRight";
    t19.h = 4096;
} catch(e24) {
}
try {
    v19 = 65536;
} catch(e25) {
}
