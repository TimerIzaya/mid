const v2 = new BigInt64Array(225);
new Float32Array(10);
const v8 = new Int32Array(3);
const v9 = [1000000.0,342.4895237802168,836.1131329932593,-967.8146784122015,1.7346735399859288,-929974.1179998855,-2.220446049250313e-16];
const v10 = [2.220446049250313e-16,NaN,-1000.0];
const v11 = [5.0,0.13171211003856365,-220041.6984856322,1.0,379826.4131214591,-5.0,1000000000000.0,4.944475587109785];
class C12 extends BigInt64Array {
    99 = 3;
    constructor(a14, a15, a16, a17) {
        super(10, 225, a17);
        super[a16] = Int32Array;
    }
    valueOf(a22, a23, a24, a25) {
        const v26 = v9.__proto__;
        try { v26(BigInt64Array, a22, a23, v26); } catch (e) {}
        var f = a22;
        v10.length *= 10;
        const o30 = {
            "maxByteLength": 256,
        };
        const v32 = new ArrayBuffer(227, o30);
        new Uint8ClampedArray(v32);
        return v8;
    }
}
const v35 = new C12(v9, v9, v11, 10);
const v36 = new C12(v9, v10, v2, 225);
const v37 = new C12(v10, v10, C12, 10);
switch (v36) {
    case Float32Array:
        try { v10(v35, v11, v8, v11); } catch (e) {}
        break;
    case v36:
        let v39;
        try { v39 = v35(3, v37); } catch (e) {}
        v39.b = v39;
        break;
}
try {
    new BigInt64Array(v37, 3);
} catch(e41) {
}
