function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a8;
}
new F6("9007199254740990", "test", "test", "qa");
new F6("9007199254740990", "test", "o", "test");
const v14 = new F6("qa", "o", "9007199254740990", "toString");
const t7 = ("qa")[v14];
delete t7?.a;
("o")[0];
const o20 = {
    "maxByteLength": 8,
};
const v22 = new SharedArrayBuffer(5, o20);
new Int16Array(v22);
function f0() {
}
function f1() {
    const o5 = {
        get d() {
            try {
                new f0();
            } catch(e4) {
            }
            return f0;
        },
        4: f0,
        __proto__: f0,
        "g": f0,
        ...f0,
    };
    return o5;
}
const v6 = f1();
const v7 = f1();
f1();
try {
    new Int32Array(128);
} catch(e15) {
}
try {
    new Float64Array(9);
} catch(e19) {
}
try {
    new Int32Array(1441);
} catch(e23) {
}
const v24 = v7[f1];
v7 | v7;
Object.defineProperty(v6, "Hs", { writable: true, configurable: true, value: 9 });
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v24;
    } catch(e30) {
    }
    try {
        this.e = a28;
    } catch(e31) {
    }
    try {
        this.b = a28;
    } catch(e32) {
    }
}
new F26("b", Int32Array);
new F26("b", f1);
new F26("toPrimitive", "toPrimitive");
