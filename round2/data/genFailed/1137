const v2 = new Float64Array(6);
const v5 = new BigInt64Array(238);
const v8 = new Int16Array(16);
class C9 extends Int16Array {
    static #h = 16;
    constructor(a11, a12, a13) {
        super(v5);
        const v14 = v2[1];
        try { v14(a12, 238, 16, v14, this); } catch (e) {}
    }
}
new C9(238, 238, 16);
const v21 = new C9(238, 238, 6);
const v22 = new C9(238, 6, 6);
let v23 = v8[Int16Array];
[] = v21;
v23 = v5;
for (const v24 of v21) {
    Reflect.construct(BigInt64Array, [Reflect], v24);
}
let v28;
try { v28 = BigInt64Array(v22, 238); } catch (e) {}
v28 = v2;
const v5 = new Array(1000);
class C6 {
    valueOf(a8, a9) {
        a9 / this;
        return -2;
    }
    13 = 3;
    #g = Array;
    256 = v5;
    #e;
    static [3] = 3;
}
new C6();
const v15 = new C6();
const v16 = new C6();
Math.acosh(v5);
!v15;
+v16;
-5;
function f26() {
    return Array;
}
typeof 1000 === "object";
