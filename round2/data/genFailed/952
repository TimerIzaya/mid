const v0 = [];
const v3 = new Int8Array(0);
new Float64Array(512);
new Uint8ClampedArray(64);
class C10 {
    b;
    #p(a12, a13, a14) {
        v0.length = a14;
        a13 = 0;
        new WeakMap();
        v0.toString = a12;
        const o17 = {
        };
        o17.f = Int8Array;
        const o18 = {
        };
        o18.f = Int8Array;
        o18.c = this;
        const o19 = {
        };
        o19.f = Int8Array;
        o19.c = this;
        o19.b = 0;
        const o20 = {
        };
        o20.f = Int8Array;
        o20.c = this;
        o20.b = v0;
        return v0;
    }
}
new C10();
const v22 = new C10();
new C10();
let [v24] = v3;
const t35 = v22[Float64Array];
t35.e ^= 512;
function f26(a27, a28, a29) {
    const o30 = {
        "f": a29,
        __proto__: v22,
        ...v22,
    };
    return o30;
}
f26(512, f26, 64);
f26(512, f26(512, f26, 0), 64);
[-Infinity,-45746.024394213106,519047.4429869491,335.5532609067884,-1000000.0,1.2927382692928758e+308,1000000.0,1000000000.0,-500.4815775102118];
[6.555621735277697e+306,0.6129249732573852];
[-2.0,404223.43847358925,-1000.0,2.0,0.031135337399216922,8.882886451642495,0.6261748464905229,0.8293475266244112,0.7225954071265903];
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a8;
    } catch(e11) {
    }
    try {
        this.a = 536870887;
    } catch(e12) {
    }
    try {
        this.c = 536870887;
    } catch(e13) {
    }
}
const v14 = new F6(4096, 0, 4096);
new F6(0, 4096, v14);
new F6(4096, 536870887, F6);
const v24 = 1000.0 << 1000.0;
Math.trunc(0);
let v26 = 0 & 0;
v24 + -56864n;
Math.cosh(1000.0);
++v26;
