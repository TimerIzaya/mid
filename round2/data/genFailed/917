const v2 = new Int8Array(127);
new Int32Array(9);
const v8 = new BigUint64Array(2);
function f9() {
    return v8;
}
v2[8];
let v11 = 0;
do {
    v2[BigUint64Array] = Int8Array;
    try { v2.includes(Int32Array, v11); } catch (e) {}
    v8[7] = v2;
    v11++;
} while (v11 < 8)
class C3 {
    static #m(a5, a6) {
        try {
            a5[5] = 0.0;
        } catch(e7) {
        }
        return 0.0;
    }
    b;
    #h = NaN;
    static [0.0];
}
const v8 = new C3();
const v9 = new C3();
const v10 = new C3();
function f11() {
    return v9;
}
const v13 = [0.0,-2147483647,[NaN,v8,NaN,f11,v9],C3,NaN];
[NaN,-2147483647];
const v15 = v10[C3];
const v16 = v15 in v15;
if (-2147483647 == -2147483647) {
    try {
        v10[v13] = v16;
    } catch(e18) {
    }
} else {
    [2147483648];
    [1073741824,536870889,-9223372036854775807];
    [268435439,-9223372036854775807,4,255];
}
