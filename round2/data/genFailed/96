const v2 = new Uint8Array(9);
new Uint8ClampedArray(4);
const v8 = new Int16Array(1273);
v8.valueOf = Uint8Array;
let v15 = 0;
do {
    Object.defineProperty(v2, 9, { writable: true, configurable: true, value: -163156118n });
    v15++;
} while (v15 < 0)
let v0 = 15369;
try {
    new Uint8ClampedArray(8);
} catch(e6) {
}
try {
    new Float32Array(257);
} catch(e10) {
}
try {
    new Int32Array(9);
} catch(e14) {
}
function f15() {
    return Int32Array;
}
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a21;
    } catch(e22) {
    }
}
new F16(v0, 9007199254740990, 2147483647, Uint8ClampedArray);
const v24 = new F16(9007199254740990, 2147483647, 8, 9007199254740990);
const v25 = new F16(2147483647, 8, 8, 9007199254740990);
let v26;
try { v26 = v25.getUTCMonth(Uint8ClampedArray, 9007199254740990, Float32Array, F16, Float32Array); } catch (e) {}
delete v24[2];
try {
    v26 /= F16;
} catch(e28) {
}
({"e":v0,"g":f15,} = v25);
for (let v30 = 0; v30 < 32; v30++) {
    v0["p" + v30] = v30;
}
