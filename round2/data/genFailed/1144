function f0() {
}
new WeakSet();
[0.9022399819436622,4.792539661826176,807844.585342987];
const v7 = [-1e-15,1.0353645878551454e+308,229.18686980707662];
[0.7353946042039883];
new Array(3);
const o14 = {
    "maxByteLength": 2,
};
const v16 = new SharedArrayBuffer(2, o14);
new BigInt64Array(v16);
try { v7.flat(3); } catch (e) {}
try {
    new Int16Array(64);
} catch(e3) {
}
try {
    new Uint8ClampedArray(129);
} catch(e7) {
}
try {
    new Float32Array(129);
} catch(e11) {
}
try {
    new BigUint64Array(256);
} catch(e15) {
}
try {
    new Uint8ClampedArray(3868);
} catch(e19) {
}
try {
    new Float32Array(64);
} catch(e23) {
}
let v24 = -279576002;
for (const v27 of Int16Array) {
    const v28 = [64,v27,256,v27,-2089476827];
    [v28,3868,129,BigUint64Array];
    [-2089476827,v28,3868,-15];
}
[129,-15];
[Uint8ClampedArray];
[Uint8ClampedArray,Int16Array];
--v24;
Reflect.construct(Int16Array, [Reflect], Float32Array);
