new Float64Array(1575);
new Uint32Array(2);
let v9 = 1000;
new Uint16Array(v9);
class C12 extends Uint16Array {
    static [4];
    constructor(a14, a15, a16) {
        super(2, 43836, 43836);
        super.toSorted(a16);
        a15 &&= a16;
    }
    set a(a19) {
        /xa{1,2}?/myiv;
        /[\cA]XQ6/gsd;
        /(pS)/ysdu;
    }
    static 4;
    static #h = Uint32Array;
    static d = v9;
}
const v23 = new C12(v9, 4, 2);
const v24 = new C12(2147483649, 43836, v9);
new C12(2, 4, v24);
function f26() {
    return Uint16Array;
}
v23 in v23;
let v31 = +-14065;
-2147483647 >> 2;
Math.expm1(2);
v31--;
Math.sinh(v9);
--v9;
~v31;
class C3 {
    get g() {
        try {
            const t3 = "length";
            t3.length = this;
        } catch(e5) {
        }
        return 485176.82732818346;
    }
    ["length"];
    [55.16400772516454];
    #g;
}
const v6 = new C3();
new C3();
const v8 = new C3();
const v9 = ["length",v6,C3,C3,"length"];
const v10 = [v8,55.16400772516454,v9,485176.82732818346,v9];
[C3,v10,"length",v9,v6];
for (let [v15] of v10) {
    Reflect.construct(C3, [], v15);
}
try { v8.any("symbol", "5H"); } catch (e) {}
