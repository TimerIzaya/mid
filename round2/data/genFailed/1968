let v0 = Array;
const v2 = new v0(1000);
class C3 extends v0 {
    static 5;
    #d = v2;
    static b = v2;
    n(a5) {
        let v7 = 1073741824;
        let v9 = v0--;
        v7--;
        v0 >>> v9;
        v9++;
        let v13 = v7 / v7;
        return --v13;
    }
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
function f18() {
    return 1000;
}
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a21;
}
const v23 = new F19(v15, v2);
new F19(C3, v16);
const v25 = new F19(v0, v17);
const v26 = [1000,v17];
[[1000,v0]];
Object.defineProperty(v23, "h", { writable: true, configurable: true, get: f18, set: f18 });
let v30;
try { v30 = v25["n"](C3); } catch (e) {}
let v31;
try { v31 = v30(v30, v25); } catch (e) {}
v26.toString = v31;
const o35 = {
    "execution": "sync",
    "type": "minor",
};
gc(o35);
