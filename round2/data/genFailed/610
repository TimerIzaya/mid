let v2 = 268435441;
class C3 {
    static 7;
    set e(a5) {
        try { a5(v2, this); } catch (e) {}
        let v7 = ++v2;
        --v7;
        ~this;
        (-1.6598761339589077e+308) ** 0.8068362933066398;
        Math.log2(v7);
    }
    #g = v2;
}
const v16 = new C3();
const v17 = new C3();
const v18 = new C3();
class C19 {
    #g = v16;
    12 = v17;
    static #b = C3;
    g;
    static [C3];
    constructor(a21, a22, a23, a24) {
        try { a22(a21); } catch (e) {}
        [0.7322553251204263,1e-15,-1000.0,-9.616812889036072e+307,-1.7597418786483332e+308,0.8305955391322992,-8.073002515387439e+307];
        [-2.2250738585072014e-308,-635378.3676550649,-9.974527264724142e+307,-1.3685338192522171e+307];
        [-Infinity,-3.8898413525586983,-391.29572724551133,722.5326677615319,1000000.0,-1000000.0,-1.5406821407143918e+307,-368256.3547456559];
    }
    a = v2;
    f = 1000000000.0;
    c = C3;
}
const v29 = new C19(v18, v17, C19, C3);
new C19(v18, v17, C3, v17);
new C19(v17, v17, v17, C19);
for (const v35 of 10000) {
    v29.valueOf = v35;
    C3.b = v35;
    C3[C3] ^= 1000000000.0;
    try { v35(); } catch (e) {}
}
Reflect.construct(C3, [], C19);
function f3() {
    return -1000.0;
}
try {
    new Uint8Array(4096);
} catch(e10) {
}
try {
    new Uint16Array(512);
} catch(e14) {
}
try {
    new Uint32Array(231);
} catch(e18) {
}
for (const v19 of 1.0) {
    try {
        v19.length = 1073741824;
    } catch(e21) {
    }
}
const o22 = {
};
try {
    o22.f = 673827.5133947593;
} catch(e23) {
}
try {
    const o24 = {
    };
    o24.f = 673827.5133947593;
    o24.c = 4096;
} catch(e25) {
}
try {
    const o26 = {
    };
    o26.f = 673827.5133947593;
    o26.c = 4096;
    o26.d = 1.0;
} catch(e27) {
}
try {
    const o28 = {
    };
    o28.f = 673827.5133947593;
    o28.c = 4096;
    o28.g = -1000.0;
} catch(e29) {
}
