const v0 = [-3.0,7.770517712254637,0.3211237908220266];
[1000000000.0,-297.6271189247806,2.220446049250313e-16,3.0,-117.60274392024894,-8.305432061887867e+307];
const v2 = [-0.9466745274355084,-5.0,-4.0,0.9128717428764059,2.220446049250313e-16,1000000000.0];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a6;
    this.a = v0;
    this.d = a6;
}
const v7 = new F3(v0, v0);
const v8 = new F3(v2, v0);
const v9 = new F3(v0, v2);
/foo[z]*/myidu;
const v11 = /M(?=)*/gysdv;
const v12 = /[h]/gmv;
class C13 extends F3 {
    #b = F3;
    static e;
    valueOf(a15, a16, a17) {
        v12 * a17;
        F3 & v7;
        a15 |= F3;
        try { v7.toUTCString(a17, this, a16, a15, v0); } catch (e) {}
        a16 = v2;
        return v11;
    }
    268435456;
    4;
    [v0] = v9;
    #f = v0;
}
new C13();
new C13();
new C13();
new WeakSet();
let v26 = [-4294967297,-4294967297,-4294967295,34343,9007199254740990,12,-536870912,761177652,-541463334];
[127,-556526580];
[65536,16,-2];
~-65536;
~v8;
Math.clz32(v8);
++v26;
Math.abs(v2);
Math.cbrt(v8);
function f0() {
}
try {
    new Int16Array(8);
} catch(e7) {
}
try {
    new Uint8ClampedArray(512);
} catch(e11) {
}
try {
    new Int32Array(58);
} catch(e15) {
}
try {
    new Uint16Array(4096);
} catch(e19) {
}
try {
    new Int16Array(0);
} catch(e23) {
}
try {
    new BigInt64Array(1938);
} catch(e27) {
}
Int16Array in 8;
let v30;
try { v30 = Uint16Array["p"](Int16Array); } catch (e) {}
function f31(a32, a33, a34, a35) {
    const o36 = {
        [v30]: a33,
        ...a35,
        "e": a34,
        "c": 268435456n,
    };
    return o36;
}
f31(-4294967297n, v30, f0, f31(268435456n, -4294967297n, Int32Array, f31));
f31(v30, 268435456n, f0, 512);
