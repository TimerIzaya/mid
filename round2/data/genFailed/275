const v2 = new BigUint64Array(8);
const v5 = new Float64Array(1711);
const v8 = new Int16Array(3821);
class C9 extends Int16Array {
    #f;
    static 4294967296;
    static 3175660263 = v8;
    constructor(a11, a12, a13) {
        super(v2, a11);
        this < this;
    }
    static o(a16, a17, a18) {
        let v22 = 2147483647;
        const v23 = v22++;
        Math.clz32(v22);
        v23 ^ 8;
        Math.sin(8);
        return v8;
    }
}
const v27 = new C9(8, 8, v2);
let v28 = new C9(8, 3821, Float64Array);
const v29 = new C9(8, 8, C9);
let v30;
try { v30 = v5.lastIndexOf(v29); } catch (e) {}
v30[Float64Array] <<= 8;
%VerifyType(1711);
3821 && v27;
[...v28] = v5;
v2.e = 8;
v27.__proto__;
const o36 = {
    "execution": "sync",
    "type": "minor",
};
gc(o36);
class C3 {
    constructor(a5) {
        super.d;
    }
    static [NaN];
    static set c(a8) {
        function f9() {
            return 2147483649;
        }
        %VerifyType(2147483649);
        "MAX_VALUE" / "MAX_VALUE";
    }
    [NaN] = NaN;
    8;
    static #c = NaN;
}
const v11 = new C3(C3);
new C3(v11);
new C3(v11);
try {
    new Int32Array(0);
} catch(e17) {
}
try {
    new BigInt64Array(2959);
} catch(e21) {
}
try {
    new Float64Array(3140);
} catch(e25) {
}
const v26 = [1561895236,-1,272130233,-45493,1073741825,-139919345,-268435456,5,4294967297,65537];
const v27 = [64,-15,-47000,-1087646190];
[-1,-65535,9,-698226472,268435456,1073741823,9007199254740991,-63823,-11,4];
try {
    v26[2412] = v11;
} catch(e29) {
}
const t38 = "MAX_VALUE";
t38.length &&= 0;
with (v27) {
    length = NaN;
    C3 != v11 ? C3 : v11;
    new C3(v26);
    try {
        v26.valueOf = v27;
    } catch(e33) {
    }
}
