let v0 = [1.0,560025.5053554401,-7.595115494176598,2.0];
const v1 = [0.013703978523962546,-1000.0];
const v2 = [-1000000.0,0.8876642667299753,-1000000000.0];
function f3() {
    return v1;
}
class C7 extends f3 {
    constructor(a9, a10, a11, a12) {
        super();
        const v13 = super.length;
        a10[245];
        function F15(a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a18;
        }
        new F15(1073741825, v2);
        new F15(8, a11);
        new F15(v13, v1);
    }
    [8];
    [f3];
}
const v22 = new C7(C7, v1, v0, v1);
let v23 = new C7(v1, v2, v0, v2);
const v24 = new C7(f3, v23, v22, v1);
class C25 {
    toString(a27, a28, a29, a30) {
        try { a27(a29, v23); } catch (e) {}
        v2.length;
        let v33 = this;
        v33 /= v0;
        return v22;
    }
    constructor(a35, a36, a37, a38) {
        super.h = 1073741825;
        a38?.[a38];
        try { v1.reduce(f3); } catch (e) {}
        try {
            new f3();
        } catch(e43) {
        }
    }
}
const v44 = new C25(v22, v23, v23, v2);
new C25(v44, v23, C25, -18112);
const v46 = new C25(v22, 8, v1, v2);
v1[v46] = C7;
try { C25.race(C7); } catch (e) {}
v23 = v2;
v0 = v24;
let v48 = 0;
do {
    v46 << C7;
    v23[v1] = parseInt;
    v48++;
} while (v48 < 4)
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a9;
    } catch(e12) {
    }
}
const v13 = new F7(Infinity, 10, 10);
const v14 = new F7(-800.236575335308, 1407304832, 10);
const v15 = new F7(Infinity, -9223372036854775807, 10);
const v17 = new Map();
const v18 = v13.c;
try {
    v15.toString = v18;
} catch(e19) {
}
v17["forEach"](v18, v14);
v13[4] = -9223372036854775807;
try {
    new Uint8Array(64);
} catch(e25) {
}
try {
    new BigInt64Array(3);
} catch(e29) {
}
try {
    new BigInt64Array(1226);
} catch(e33) {
}
