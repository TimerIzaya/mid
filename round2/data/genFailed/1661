const v2 = new Float32Array(129);
let v3 = 5;
const v5 = new Uint8Array(v3);
const v8 = new BigInt64Array(211);
class C9 {
    static o(a11, a12, a13, a14) {
        super.f /= 129;
        try { a11(Float32Array, v2, a11, v5, Uint8Array); } catch (e) {}
        const v16 = v8 << a11;
        try { new a11(v3, v16); } catch (e) {}
        new Float32Array(a14, 211, 129);
        return v3;
    }
    1000 = 129;
    static #b = Uint8Array;
}
let v19 = new C9();
const v20 = new C9();
const v21 = new C9();
v19 = v21;
let v22;
try { v22 = C9.o(211, Uint8Array, 129, v20); } catch (e) {}
for (let v23 = 0; v23 < 91; v23++) {
    const v25 = v19[v20.f];
    try { v8.findLastIndex(v25, v21); } catch (e) {}
}
const v27 = new Float32Array(v8, v22, v3 *= v22);
v27.buffer = v19;
