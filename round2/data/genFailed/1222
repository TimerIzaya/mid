function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = 5640;
}
new F0();
new F0();
new F0();
new Int32Array(185);
new Uint32Array(5);
const v14 = new BigInt64Array(16);
const v16 = v14["forEach"](F0);
function f17() {
    function f19(a20) {
        const o21 = {
        };
        o21.h = v16;
        const o22 = {
        };
        o22.h = v16;
        o22.g = a20;
        const o23 = {
        };
        o23.h = v16;
        o23.g = a20;
        o23.f = a20;
        const o24 = {
        };
        o24.h = v16;
        o24.g = a20;
        o24.c = a20;
    }
    this.onmessage = f19;
    this.onmessage;
    try {
        new Int32Array(-4294967297);
    } catch(e28) {
    }
}
const v31 = [];
const o32 = {
    "arguments": v31,
    "type": "function",
};
new Worker(f17, o32);
let v4 = 2147483649;
class C6 {
    constructor(a8, a9) {
        let v11 = 255;
        const v13 = 10n & +10n;
        !10n;
        --v11;
        10n / v13;
        Math.sqrt(v13);
    }
    static #h;
    605541601 = 129;
    [v4] = 129;
    #g;
}
new C6(10n, -2147483649);
new C6(4294967295n, v4);
const v20 = new C6(10n, v4);
const v21 = [-1317079393,1061869574,-65537,-723073462,128,268435456,61599,-6];
const v22 = [-14];
const v23 = [2,-14,-2045646661,-5112,-9007199254740992,13,257,1073741824,-268435456];
[-3.0,427.15664977769507,381722.41139506036,921146.7647841168,-1000000000000.0,0.4912773913376183,1000000000000.0,1.0];
const v25 = [1000000000000.0,1000000000.0,-3.0,6.989880917989834e+307,2.220446049250313e-16];
const v26 = [-5.0,1.0023011666131255e+308,-4.967002331254795,695089.453642267,0.352988472417451,1e-15];
v25.length >>= 129;
++v4;
let v29 = v21 > v22.length;
if (v29) {
    v21[Symbol.iterator];
} else {
    const v33 = v21.some(...v26, v20, C6, 4294967295n, ...v23);
    try {
        v29 = v33;
    } catch(e34) {
    }
}
