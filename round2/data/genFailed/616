new WeakSet();
const v2 = [0.47964248848879265,900.9498053954353,3.0,-8.189121953724062,1000000.0,1e-15,Infinity];
const v3 = [-182596.6317577809,5.0,1.2110289087154804,-2.0,-3.0];
const v4 = [-2.220446049250313e-16,1000000000.0,-794367.0777020248,-5.0];
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a7;
}
const v8 = new F5(v3);
const v9 = new F5(v4);
const v10 = new F5(v3);
class C11 extends WeakSet {
    [v9] = v3;
    f;
    constructor(a13, a14) {
        super(v4);
        let v15;
        try { v15 = a14.p(); } catch (e) {}
        const v18 = typeof v3 === "string";
        [v18,v9,v15,v9];
        [[v2],v18];
    }
    static 1103 = v8;
}
new C11(v2, v8);
new C11(v3, C11);
const v24 = new C11(v4, v10);
try {
    v4.findIndex(v2, v10);
} catch(e26) {
}
class C27 {
    static [v24];
    static #c = v2;
}
new C27();
new C27();
new C27();
class C3 {
    m(a5, a6) {
        try {
            this.fuck(29793, a6, true, a5);
        } catch(e10) {
        }
        return a5;
    }
    static #d = 1000000000.0;
    f;
}
const v11 = new C3();
new C3();
const v13 = new C3();
[-2.9408237936232845e+307,-2.9408237936232845e+307];
const v16 = [[-2.9408237936232845e+307,C3,v11],v13];
const v17 = [-1000000000.0,-838.500226320164,3.0,1e-15,-2.2250738585072014e-308,1000.0,-1000.0,2.220446049250313e-16,6.4743873909549e+307,0.6986941114616454];
[-1000.0,815.230422460857,Infinity,721.3032801059051];
const v19 = [2.7774998897177825e+307,-2.220446049250313e-16,-1.7976931348623157e+308,0.0,3.0];
let v20;
try { v20 = v13.m(v19, v19, v17, 1000000000.0, 1000000000.0); } catch (e) {}
v20 * v11;
try {
    v19.valueOf = v20;
} catch(e22) {
}
Reflect.construct(v20, [Reflect,v11,v17], v20);
try {
    v16.length = 9;
} catch(e27) {
}
