let v4 = Uint16Array;
const v5 = new v4(40);
const v8 = new Uint8Array(1);
new Int16Array(3240);
function f12() {
    return 512n;
}
class C13 {
    static b = -7354n;
    static f;
    static #c = v8;
    constructor(a15, a16, a17, a18) {
        ({"c":v4,} = this);
        function* f19(a20, a21) {
            const v22 = v4?.[f12];
            try { v22.p(this, v22, v5, a20, 40); } catch (e) {}
            yield* a16;
            return a21;
        }
        f19(a18, 40);
    }
}
new C13(1, 3240, v4, 512n);
new C13(v4, 1, 3240, -128n);
new C13(3240, 3240, 40, 512n);
v4.d *= 40;
try {
    f12();
} catch(e30) {
}
Object.defineProperty(v8, 2, { writable: true, get: f12, set: f12 });
/[\cZ]\u0060/gisdu;
/(?:a+)+abc+/iv;
/cJCT/gmyisu;
new Int16Array(v5, 3240, 40);
function f0() {
}
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = "-9";
    } catch(e7) {
    }
    try {
        this.d = f0;
    } catch(e8) {
    }
    try {
        this.f = a6;
    } catch(e9) {
    }
}
const v10 = new F4("i");
const v11 = new F4("i");
new F4("-9");
const v16 = 1073741823 << v10;
-34750 ** 34750;
v16 % ~v16;
const o24 = {
    "construct": f0,
    "defineProperty": f0,
    "deleteProperty": f0,
    "get": f0,
    "getOwnPropertyDescriptor": f0,
    "setPrototypeOf": f0,
};
try {
    new Proxy(v11, o24);
} catch(e27) {
}
