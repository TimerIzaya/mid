let v2 = -1000000000.0;
class C3 {
    [3] = 3;
    f = 3;
    get e() {
        let v5;
        try { v5 = this.valueOf(3, this, v2, this); } catch (e) {}
        Math.fround(3);
        10 * 10;
        const v11 = v2--;
        10 / v5;
        v11 & 3;
        ~v2;
        return v2;
    }
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
function f18() {
    return v17;
}
const v20 = new Map();
[9,1073741824,65536,-94809478,4096,1682777830,65536];
[474128371,-58146,4096,6,-3,1073741825,-128,552913180];
const v23 = [128,-52161,-2147483649,-2,7,1073741823,-2101728567];
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a27;
    this.h = v20;
}
const v28 = new F24(v23, v16);
const v29 = new F24(v23, f18);
new F24(v23, Map);
Object.defineProperty(v29, v29, { configurable: true, enumerable: true, set: f18 });
switch (v15) {
    default:
        [129,268435441,-16400,536870912,-2147483648,1775131300,9007199254740990,407614268,-268435456,-65537];
        [268435439,6,16,1073741824,2147483649,3];
        [-9223372036854775807];
        break;
}
v16.e ||= -20844;
Object.defineProperty(v28, 4, { writable: true, configurable: true, get: f18 });
class C3 {
    static [-660.7308257649476] = "toString";
    e;
    static 1251 = -660.7308257649476;
    ["toString"];
    [3.0];
    constructor(a5, a6) {
        this.e -= a6;
        const v7 = ["toString"];
        const v8 = [a6,this];
        [v8,"toString",v7,v8];
        try { a6(3.0, a6, v8, a5); } catch (e) {}
    }
    [-660.7308257649476];
    static b;
}
const v11 = new C3(C3, 3.0);
const v12 = new C3(v11, v11);
new C3(v12, 3.0);
try {
    new Int32Array(4);
} catch(e17) {
}
try {
    new Float32Array(2);
} catch(e21) {
}
try {
    new Uint8Array(512);
} catch(e25) {
}
let v26 = "X";
const v29 = "m" instanceof Int32Array;
try { v29(Uint8Array, Float32Array, v11, Float32Array, C3); } catch (e) {}
try {
    v26 = "11";
} catch(e31) {
}
const v33 = Symbol.iterator;
const o42 = {
    [v33]() {
        let v35 = 10;
        const o41 = {
            next() {
                v35--;
                const v39 = v35 == 0;
                const o40 = {
                    "done": v39,
                    "value": v35,
                };
                return o40;
            },
        };
        return o41;
    },
};
