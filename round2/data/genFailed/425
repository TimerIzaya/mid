let v0 = 3;
const v2 = new Int16Array(v0);
new Int16Array(127);
new Uint8ClampedArray(4096);
const v13 = new Set();
Object.defineProperty(v2, "c", { writable: true, configurable: true, enumerable: true, value: v2 });
let v14;
try { v14 = v13.keys(); } catch (e) {}
v0 = v14;
if (v14) {
    Reflect.construct(v14, [Reflect], Int16Array);
} else {
    b = v0;
}
function f0() {
    const o12 = {
        toString(a5, a6) {
            try { a6.apply(this); } catch (e) {}
            class C8 {
                3264605809 = -1000000000000.0;
            }
            new C8();
            const v10 = new C8();
            new C8();
            return v10;
        },
        "c": -1000000000000.0,
        ..."f",
        __proto__: "f",
        9: "pzM2",
    };
    return o12;
}
f0();
f0();
f0();
try {
    new Float32Array(221);
} catch(e25) {
}
try {
    new BigInt64Array(658);
} catch(e29) {
}
try {
    new Uint8Array(4);
} catch(e33) {
}
4 ** 58497n;
const o37 = {
    "maxByteLength": 16,
};
const v39 = new ArrayBuffer(13, o37);
try {
    new BigInt64Array(v39);
} catch(e42) {
}
