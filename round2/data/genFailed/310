const v3 = [-5.0,-7.92857931568642,5.531843518464433];
const v4 = [5.531843518464433,v3,v3];
const v5 = [-7.92857931568642,v3];
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v5;
    this.b = a10;
}
new F6(v3, v3, -5.0);
const v12 = new F6(v5, v4, -7.92857931568642);
new F6(v4, v4, v3);
[-6,-65537,9,128,-1539158026];
const v16 = [-65536,9,-536870912,268435439,3503,5];
const v17 = [138994595,0];
[-562605.853318135,-1.0,-1.1810200855639135,-104322.69899394538,-605743.3685632448,-2.2250738585072014e-308,5.0,-4.0];
const v19 = [NaN,0.8959234943530291,475657.7162593645,0.8554033157467695,697.5066850324861,4.0];
const v20 = [6.612658919447969e+307,0.43080556657454905,Infinity,0.35488631964751505,1000000000.0,458378.7105795231,-1000000000000.0];
v3.length = v17;
v3 ** -7.92857931568642;
v16[2947] = v16;
try {
    v20.some(v12, -22899n);
} catch(e24) {
}
v4[536870887] = v19;
function f25() {
    return F6;
}
try {
    new BigUint64Array(20);
} catch(e3) {
}
try {
    new Float64Array(256);
} catch(e7) {
}
try {
    new BigUint64Array(4096);
} catch(e11) {
}
class C12 extends BigUint64Array {
    valueOf(a14, a15, a16) {
        this[8] &= a15;
        const v18 = new WeakMap();
        return v18;
    }
    #a = 20;
    [-1];
    static 2079;
    2147483648;
}
new C12();
new C12();
new C12();
const v23 = Symbol.toPrimitive;
const o29 = {
    [v23]() {
        return 20;
    },
};
