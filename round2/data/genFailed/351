function f6() {
    return -0.0;
}
class C7 extends f6 {
    d = -364132.40939642314;
    n(a9, a10, a11, a12) {
        -a11;
        super[f6];
        return super.g;
    }
    h = f6;
    #a = -65537;
    g = -2.220446049250313e-16;
}
const v16 = new C7();
const v17 = new C7();
let v18 = new C7();
v18 = v16;
let [v19] = -65537;
for (let v20 = 0; v20 < 32; v20++) {
    v18["p" + v20] = v20;
}
C7[v17] = v19;
v16.h = -364132.40939642314;
try {
    new C7();
} catch(e24) {
}
class C3 {
    #d;
    static {
        const o8 = {
            "maxByteLength": 2160,
        };
        const v10 = new SharedArrayBuffer(2160, o8);
        try {
            new BigInt64Array(v10);
        } catch(e13) {
        }
    }
}
const v14 = new C3();
const v15 = new C3();
const v16 = new C3();
const v17 = [v14,v14,"trim"];
[-1794348819,v16];
[v16,-1794348819,v15];
class C20 extends C3 {
    16;
    toString(a22, a23) {
        let {"a":v25,} = C3;
        TypeError();
        const t23 = "trim";
        t23[a23] ||= v25;
        return v16;
    }
    static #g;
    static h;
    10 = v16;
    static [-1794348819] = v16;
    static ["-2147483649"] = v17;
    static [v15] = v16;
}
new C20();
const v29 = new C20();
new C20();
try {
    new Uint8Array(10);
} catch(e34) {
}
try {
    new Uint32Array(193);
} catch(e38) {
}
try {
    new Uint16Array(6);
} catch(e42) {
}
const v44 = Symbol.isConcatSpreadable;
const t51 = "trim";
t51[v44] = 193;
%VerifyType("-2147483649");
-683828743 / v44;
v29 << v29;
v29 ^ v29;
Math.max(v44);
Math.sqrt(-683828743);
