const v2 = new Int32Array(0);
let v3 = 7;
const v5 = new Uint8Array(v3);
new Int8Array(3357);
const v11 = new Int8Array(6);
const v14 = new BigInt64Array(13);
new Int32Array(9);
throw Int32Array;
let o18 = {
};
new Proxy(v5, o18);
let v22 = v2 < v11 ? v2 : v11;
v22 = v14;
++v3;
o18 = v5;
try {
    new Float32Array(9);
} catch(e3) {
}
try {
    new Uint16Array(63);
} catch(e7) {
}
try {
    new Float64Array(1000);
} catch(e11) {
}
let v13 = new WeakMap();
const v14 = [9,Uint16Array,63];
const v15 = [Uint16Array,Float64Array,9,v14];
[Float32Array];
class C17 extends Uint16Array {
    static a;
    2113678306;
    static get c() {
        super.buffer >>= 1000;
        try {
            v13 = this;
        } catch(e19) {
        }
        return this;
    }
    b = v14;
    c;
    [v15];
    static 4096 = v13;
}
new C17();
new C17();
const v22 = new C17();
const v27 = +-1991047865;
+9;
Math.imul(v27, 65537 ^ 65537);
let v32 = -2147483647;
Math.cbrt(0.7484945009394508);
++v32;
0.7484945009394508 && 9;
Math.atan(v22);
