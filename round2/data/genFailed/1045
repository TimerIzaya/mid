const v0 = /AI/gu;
const v1 = /[(x)(x)(x)\1]/gsu;
const v2 = /UIO(x)(x)(x)\1/mdv;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a6;
    this.g = v2;
    this.d = a6;
}
const v7 = new F3(v0, v2);
const v8 = new F3(v2, v1);
new F3(v1, v0);
const v10 = [v1,v2];
[v8,v2,v10];
const v12 = [v7,v0];
const v13 = [268435441,12];
const v14 = [-2147483649,12,19546];
let v15 = [60288,-16831,2,-337866373,1000,512,-1];
v2.a = F3;
function f16(a17, a18, a19, a20) {
    a19[113] = v0;
    delete a18[v14];
    const v25 = v15--;
    +14;
    Math.clz32(v25);
    ~v12;
    Math.atanh(14);
    v15 - v15;
    return a20;
}
f16(v10, v13, v12, F3);
function f0() {
}
let v5 = 2;
try {
    new Int32Array(v5);
} catch(e8) {
}
try {
    new Float64Array(1024);
} catch(e12) {
}
try {
    new Int8Array(6);
} catch(e16) {
}
1024 ** 1024;
try {
    v5 -= v5;
} catch(e18) {
}
let v19;
try { v19 = (-9223372036854775808).n(1024); } catch (e) {}
v19[1] = v19;
1024 << 1024;
const o24 = {
    "execution": "sync",
    "type": "minor",
};
gc(o24);
