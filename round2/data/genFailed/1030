const v2 = new BigInt64Array(12);
const v5 = new Int32Array(204);
const v8 = new Uint8ClampedArray(1);
-513979.35724950925 >= v2;
v8[-513979.35724950925];
[v5.byteLength,v2,-343513.1113626815,BigInt64Array];
const v19 = [v2,v5,v5,12];
[-3.0,v19,v19,v19,-343513.1113626815];
const o23 = {
    "maxByteLength": 255,
};
const v25 = new ArrayBuffer(255, o23);
new Uint32Array(v25);
[10000,1976413685,8,0,6,57896,-995590516];
const v1 = [9,4597,0,9223372036854775807,1073741825];
const v2 = [16,10272,-1024,4294967296,55592,1667652144,55252,4096,1913924412,-1058267113];
class C3 {
    o(a5, a6) {
        return v1;
    }
    static 2 = v2;
    static #g = v1;
    static d;
    b;
}
const v10 = new C3();
new C3();
new C3();
const v17 = v2["findIndex"](v10, v1);
new Map();
const v21 = Symbol.isConcatSpreadable;
v17[v21] = v21;
for (let v22 = 0; v22 < 32; v22++) {
    v21["p" + v22] = v22;
}
