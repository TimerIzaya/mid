let v0 = -964.546083257386;
const v4 = new Set();
function f5() {
    return Set;
}
function f6() {
    return v4;
}
function f7(a8, a9, a10) {
    const o14 = {
        get e() {
            if (a9) {
                this.__proto__;
                v0 = -1e-15;
            } else {
                a9.length = 2;
            }
            return this;
        },
        "g": a8,
        ...a9,
        [a8]: a9,
        "e": a8,
        [f5]: -1e-15,
    };
    return o14;
}
const v15 = f7(v0, f5, v0);
f7(-1e-15, f5, -1e-15);
const v17 = f7(-1000000000.0, -1000000000.0, v0);
class C18 {
    #n(a20, a21) {
        super.d %= -1000000000.0;
        v15[a21];
        try {
            super[a21] = v15;
            v17[v15];
        } catch(e24) {
        }
        return f7;
    }
    static b = v17;
    #a;
}
const v28 = new C18();
const v29 = new C18();
const v30 = new C18();
+v30;
C18++;
v29.__proto__ = v29;
function f33(a34, a35, a36) {
    new f6();
    return a35;
}
const v38 = f33(v15, v28, v0);
v15[3401];
v38.__proto__ = v30;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 61868;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
try {
    new Uint8ClampedArray(127);
} catch(e17) {
}
try {
    new BigUint64Array(155);
} catch(e21) {
}
try {
    new Int8Array(3354);
} catch(e25) {
}
for (const v26 of 3354) {
    try {
        new Uint8ClampedArray(6);
    } catch(e30) {
    }
    try {
        new Int8Array(1);
    } catch(e34) {
    }
    try {
        new BigInt64Array(63);
    } catch(e38) {
    }
}
