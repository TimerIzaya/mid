let v2 = new Array(58);
function f3(a4, a5) {
    const o14 = {
        o(a7) {
            const v9 = new Map();
            return v9;
        },
        3049323967: Array,
        __proto__: a4,
        "f": 58,
        n(a11, a12) {
            return super[a5];
        },
        3544469156: a5,
        ...Array,
    };
    return o14;
}
const v15 = f3(v2, 58);
const v16 = f3(f3, 58);
const v17 = f3(Array, v16);
class C18 extends f3 {
    static toString(a20, a21, a22, a23) {
        let v24 = 0;
        while (v24 < 9) {
            this.g ^= v17.__proto__;
            Array(58);
            %PrepareFunctionForOptimization(Array);
            Array(58);
            Array(58);
            %OptimizeMaglevOnNextCall(Array);
            Array(58);
            v24++;
        }
        return f3;
    }
}
const v33 = new C18();
const v34 = new C18();
const v35 = new C18();
new WeakSet();
function f38(a39, a40, a41, a42) {
    const o55 = {
        "e": Array,
        __proto__: v33,
        "f": f3,
        [58](a44, a45) {
            const v46 = Array ^ a39;
            const v47 = a45 ^ v46;
            function F48(a50, a51) {
                if (!new.target) { throw 'must be called with new'; }
                this.d = v34;
            }
            const v52 = new F48(58, 58);
            new F48(v47, v46);
            new F48(v47, 58);
            return v52;
        },
    };
    return o55;
}
f38(v15, v17, v35, v33);
f38(v16, v35, v35, v16);
f38(v16, v16, v16, v16);
const v59 = v33[C18];
let v61 = 1702083168;
let v63 = -1000000.0 + WeakSet;
let v64 = ++v61;
v63 = Math.tanh(v61);
Object.defineProperty(Array, "b", { set: Array });
[v2,,,v64] = v59;
try {
    new Uint8ClampedArray(128);
} catch(e6) {
}
try {
    new BigInt64Array(98);
} catch(e10) {
}
try {
    new Int8Array(255);
} catch(e14) {
}
class C15 extends Int8Array {
    static #b;
    f;
    static [Uint8ClampedArray];
    [128] = Uint8ClampedArray;
    [Uint8ClampedArray];
    #c;
    #a;
    static #f;
    static [65536] = Uint8ClampedArray;
    static [188463944] = Int8Array;
}
new C15();
const v17 = new C15();
const v18 = new C15();
const v19 = v17.constructor;
class C20 extends v19 {
    #e = BigInt64Array;
    b;
}
new C20();
v18[255] &= 129;
v18["toLocaleString"](v19, C15);
const o27 = {
    "execution": "sync",
    "type": "minor",
};
gc(o27);
