const v2 = new Uint32Array(573);
const v5 = new Uint8ClampedArray(3);
const v8 = new Float32Array(27);
class C9 extends Float32Array {
    static [v2] = Uint32Array;
    o(a11, a12) {
        super[Uint8ClampedArray];
        return -8;
    }
    4294967295;
    #g = v5;
}
const v17 = new C9();
new C9();
const v19 = new C9();
let v20;
try {
const t0 = 27;
v20 = t0(573, v8, v17, 3);
} catch (e) {}
v19.join(...v17, ...v2, ...v17, v20, v20, ...v2);
v2[2] &&= 27;
const o22 = {
    "e": v2,
    "b": v17,
    ...v17,
};
v5["findIndex"](v8[3], o22, ..."findIndex", ..."findIndex");
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = undefined;
    } catch(e3) {
    }
    try {
        this.h = undefined;
    } catch(e4) {
    }
    try {
        this.a = undefined;
    } catch(e5) {
    }
}
const v6 = new F1();
const v7 = new F1();
new F1();
function f12() {
    return "fyp";
}
new Set();
v6[8] &&= -397062049;
let v21 = v7.__proto__;
try {
    v21 = Set;
} catch(e22) {
}
Object.defineProperty("fyp", 10, { get: f12, set: f12 });
for (let v23 = 0; v23 < 100; v23++) {
    f12();
}
