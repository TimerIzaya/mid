const v2 = new Uint32Array(641);
const v5 = new Uint8Array(151);
const v8 = new Float64Array(1000);
function f9(a10, a11) {
    const o23 = {
        "h": v8,
        "c": 151,
        1073741824: a10,
        p(a13, a14, a15) {
            let v16 = 0;
            do {
                v5[1000] = Float64Array;
                v16++;
            } while (v16 < 1)
            return a11;
        },
    };
    return o23;
}
const v24 = f9(1000, 151);
const v25 = f9(151, 151);
const v26 = f9(1000, 641);
v2.byteLength <<= 1000;
let v27;
try { v27 = v26.p(f9, v25, v2, 1000); } catch (e) {}
Uint32Array in v2;
v26[v27];
Object.defineProperty(v24.h, 2483986937, { writable: true, enumerable: true, get: f9 });
Uint8Array || f9;
try {
    new BigUint64Array(16);
} catch(e3) {
}
try {
    new Uint8Array(4);
} catch(e7) {
}
try {
    new Uint8ClampedArray(1);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    static [Uint8Array];
    [Uint8Array] = Uint8ClampedArray;
    [4];
    static 8;
    #p(a14, a15, a16) {
        try { this.entries(); } catch (e) {}
        try {
            new BigUint64Array(16);
        } catch(e21) {
        }
        try {
            new BigUint64Array(3124);
        } catch(e25) {
        }
        try {
            new Int8Array(2158);
        } catch(e29) {
        }
        return 1;
    }
}
const v30 = new C12();
new C12();
const v32 = new C12();
class C33 {
    static set e(a35) {
        try { a35(a35, this); } catch (e) {}
        try {
            v30.set(this, 4);
        } catch(e38) {
        }
    }
    6;
    static 8;
    static #e;
    static [v32] = 4;
}
new C33();
const v40 = new C33();
new C33();
const v42 = v30 !== v40;
v30["reverse"]();
try {
    C12[v42] = 1;
} catch(e45) {
}
try {
    C33 = Uint8ClampedArray;
} catch(e46) {
}
