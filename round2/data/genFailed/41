const v5 = new BigUint64Array(4);
new Float32Array(3);
new Int8Array(1);
function f12() {
    return 1;
}
const o13 = {
};
new Proxy(f12, o13);
v5[-25404] **= 1;
v5.valueOf = f12;
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a20;
    this.e = a20;
    this.b = a19;
}
new F16(3, 1, -25404, -25404);
new F16(-25404, -536870912, -25404, 3);
new F16(-25404, -25404, 1, 3);
let v2 = "dotAll";
class C3 {
    static 1;
    static #o(a5, a6) {
        const o7 = {
        };
        try {
            o7.f = "Rn";
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.f = "Rn";
            o9.a = this;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.f = "Rn";
            o11.a = this;
            o11.e = a5;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.f = "Rn";
            o13.a = this;
            o13.e = this;
        } catch(e14) {
        }
        return a5;
    }
}
new C3();
new C3();
new C3();
try {
    new Int32Array(3);
} catch(e21) {
}
try {
    new BigInt64Array(7);
} catch(e25) {
}
try {
    new Uint16Array(4096);
} catch(e29) {
}
/\u{12345}a[a][^6zL(?:a+){0,0}]/idgmv;
/foo(?<=bar)baz?/sidmyv;
/3c/sidgmv;
try {
    v2 = "number";
} catch(e36) {
}
try {
    new Float32Array(3075);
} catch(e40) {
}
try {
    new BigInt64Array(129);
} catch(e44) {
}
try {
    new Float64Array(7);
} catch(e48) {
}
