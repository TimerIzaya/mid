const v0 = [-27510,536870888,-11,536870887,33235,-235781538];
[128,268435440,-2,1444678469,8,-20642,15677,-6,-4294967295];
const v2 = [536870888,-4294967295,-65537,1,-4096,9223372036854775807,-16495,4096,65537];
function f6() {
    return v0;
}
new Uint32Array(0);
new Uint32Array(15);
new Int16Array(3);
v2.__proto__;
class C17 extends Int16Array {
    65536 = Uint32Array;
    [-1] = Int16Array;
    #c;
}
new C17();
new C17();
new C17();
new Set();
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -9223372036854775808;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
new F0();
try {
    new Int16Array(2);
} catch(e13) {
}
try {
    new BigInt64Array(8);
} catch(e17) {
}
try {
    new Int16Array(129);
} catch(e21) {
}
const v22 = [Int16Array,2.2250738585072014e-308,BigInt64Array];
const v23 = [v5,0.0];
const v24 = [v22,v23,BigInt64Array,v23];
for (let v25 = 0; v25 < 32; v25++) {
    v4["p" + v25] = v25;
}
v23["reduce"](-5.303726830528652, BigInt64Array);
const v34 = -1866312440 * v24;
Math.log(-1866312440);
Math.sign(-1);
~v34;
-1 * (v24 >> 2.2250738585072014e-308);
~-1;
