new Float32Array(0);
let v5 = new BigUint64Array(1514);
const v8 = new Uint16Array(2098);
class C9 extends Float32Array {
    constructor(a11, a12) {
        super(v8);
        const v13 = new Uint16Array(0, 1514);
        v13 << Uint16Array;
        new WeakMap();
        a11 = 0;
    }
    [Float32Array] = Float32Array;
    m(a18, a19, a20) {
        v5 &= a19;
        try { new a19(); } catch (e) {}
        this.valueOf = b;
        return a19;
    }
}
const v23 = new C9(1514, 2098);
const v24 = new C9(2098, 0);
new C9(2098, 0);
function f26() {
    return v24;
}
let v27 = 0;
do {
    if (v24) {
        /[^5jWa{0}wKz[(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10]]/gmiu;
        /MAe\p{Changes_When_NFKC_Casefolded}abc+/gysv;
        /\8a(?=b)c/m;
    } else {
        delete v23[0];
    }
    v27++;
} while (v27 < 0)
