const v0 = [-1779746892,-8702,-923840893,1000,-268435456,65536,-128,-4294967296,268435439,-19292];
[-47622,268435440,-4,50624,24674,9007199254740991];
[1000,-4096,838,-58638,8,4294967296,3,-717715523];
const v7 = new Map();
[v7,Map,1e-15,1e-15,1e-15];
const v9 = [NaN,v0,v7];
[v9,v9,v9,v0,v7];
[0.0,5.98224375312676];
[-1.0,-929.64563589108];
const v13 = [3.98590004043644e+306,NaN,378.1773549059128,4.0,0.24014379350713178,-379.136324179109,-7.5280435551049045];
let v14;
try { v14 = v13.some(v7, v0); } catch (e) {}
for (const v16 of v14) {
    v9[v14] = v16;
    const o19 = {
        "maxByteLength": 6,
    };
    const v21 = new SharedArrayBuffer(3, o19);
    new Uint8ClampedArray(v21);
}
function f0() {
    const o11 = {
        ["c"]: 1024,
        "d": "c",
        __proto__: "c",
        [-4096]: -4096,
        get e() {
            ("c").length;
            this.d;
            const o7 = {
            };
            try {
                new Proxy("c", o7);
            } catch(e10) {
            }
            return o7;
        },
    };
    return o11;
}
const v12 = f0();
const v13 = f0();
const v14 = f0();
function f15() {
    return f0;
}
function f16(a17, a18) {
    const o32 = {
        "g": v14,
        [a17](a20, a21, a22) {
            a18[Symbol.iterator] = v12;
            return f15 < a22;
            const v29 = 5 / -2147483647;
            v29 + v29;
            return Math.log(-2147483647);
        },
    };
    return o32;
}
const v33 = f16(v14, v13);
f16(v14, v14);
const v35 = f16(v14, v13);
try {
    new Uint32Array(9);
} catch(e39) {
}
try {
    new Int8Array(643);
} catch(e43) {
}
try {
    new Uint32Array(15);
} catch(e47) {
}
v14 >>> f16;
try {
    v35.a = v33;
} catch(e49) {
}
for (let [v50,v51] of f0) {
    v12 && f15;
    function F53(a55, a56, a57) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a57;
        } catch(e58) {
        }
    }
    const v59 = new F53(v50, 15, v51);
    new F53(F53, 643, v59);
    new F53(F53, 15, F53);
}
