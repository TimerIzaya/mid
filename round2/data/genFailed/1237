function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = 2;
}
new F0();
new F0();
const v5 = new F0();
[0.7120345026449153];
[-2.220446049250313e-16,9.767686179394358e+307,2.0,414.8866503502759,5.0,-333.6027244330928,-1.0];
[1000000000.0,1000000000.0,1000000000.0,1000000000000.0,0.9385423645113206,3.0,998.8478782320835,-5.496497996562339e+307,-Infinity,3.0];
new BigInt64Array(7);
new Float64Array(0);
const v17 = new Uint16Array(13);
class C19 extends v17.constructor {
    static #c = v5;
    6 = Uint16Array;
}
const v20 = new C19();
try { v20.entries(); } catch (e) {}
Reflect.construct(Uint16Array, [Reflect,7,7], Uint16Array);
const v0 = [];
try {
    new Uint8ClampedArray(111);
} catch(e4) {
}
try {
    new Float32Array(2226);
} catch(e8) {
}
try {
    new BigUint64Array(3197);
} catch(e12) {
}
class C13 extends BigUint64Array {
    1073741825;
    static set d(a15) {
        super.byteLength;
        try {
            super[111] = this;
        } catch(e17) {
        }
    }
    valueOf(a19, a20) {
        let v21 = 0;
        do {
            v21++;
        } while (v21 < 1)
        return v0;
    }
}
new C13();
new C13();
new C13();
const v37 = Math.max(2226);
let v38 = -2226;
let v39 = ++v38;
v39--;
try { v37(Float32Array, 111); } catch (e) {}
