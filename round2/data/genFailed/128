const v2 = new Uint8ClampedArray(221);
new Float64Array(2);
const v8 = new Uint8Array(3689);
class C12 extends Uint8ClampedArray {
    o(a14, a15, a16, a17) {
        this.valueOf = a16;
        Math.asin(-4096);
        const v23 = -a15;
        a15 ** a15;
        Math.trunc(v23);
        -(-536870912);
        return -4096;
    }
}
const v27 = new C12();
const v28 = new C12();
new C12();
const o30 = {
};
new Proxy(v27, o30);
let v33;
try { v33 = C12.p(221, -65537); } catch (e) {}
v8[2];
o30.g;
v33[10] ^= -65537;
v2[o30] = v28;
let v37 = -1622784922;
1.7976931348623157e+308 & ~1.7976931348623157e+308;
~v37;
~v37;
++v37;
Math.sqrt(1.7976931348623157e+308);
let v1 = "2147483649";
class C3 {
    constructor(a5, a6) {
        ({"g":a6,"h":v1,"length":a6,} = v1);
        a5?.[4294967295];
        try { new a5(5, a6, a6); } catch (e) {}
    }
    static e = Infinity;
    #c;
    #a;
    #b = v1;
    #h;
}
const v9 = new C3(C3, 5);
const v10 = new C3(Infinity, C3);
new C3(v9, v9);
class C15 {
    static #p(a17, a18) {
        const v23 = C3++;
        Math.atan2(v23, v23);
        v10 / C3;
        return a18;
    }
}
new C15();
new C15();
new C15();
