class C3 {
    static g = 0;
    16;
    2;
    constructor(a5, a6) {
        Object.defineProperty(a6, 536870888, { value: a6 });
        a6.__proto__;
        const v8 = delete this[2147483649];
        const v9 = 268435456 % v8;
        function F10(a12, a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a15;
        }
        const v16 = new F10(a5, 268435456, this, a6);
        new F10(a5, 268435456, v9, v16);
        new F10(0, v9, v8, a6);
    }
}
const v19 = new C3(268435456, C3);
const v20 = new C3(268435456, v19);
new C3(16, 268435456);
[5.0,-5.665464917905441,-286661.0514846721,NaN,5.549047957113701e+307,-56.404665702550574,742802.5312084195];
[0.7902501727278235,-1.3886404183779638e+308,-2.2250738585072014e-308,1000000.0,381971.463265646,-251.08932243492848];
const v24 = [-957310.3325230456,-7.417939120924382e+307];
new Array(60);
new Uint32Array(14);
const v33 = new Float32Array(128);
new Uint8ClampedArray(15);
15 % Float32Array;
Object.defineProperty(v33, 5, { get: Array });
function f38(a39, a40, a41) {
    const o42 = {
        "h": 15,
        "c": v20,
        ...v19,
        "e": v24,
    };
    return o42;
}
f38(v24, 268435456, Array);
f38(v20, 60, v20);
f38(v20, 60, Array);
try {
    new BigUint64Array(64);
} catch(e3) {
}
try {
    new BigInt64Array(3477);
} catch(e7) {
}
try {
    new Int8Array(10);
} catch(e11) {
}
function f12() {
    return 3477;
}
function f13() {
    return 10;
}
for (let v20 = 0; v20 < 32; v20++) {
    const t19 = 1024n;
    t19["p" + v20] = v20;
}
const v23 = (3.0).a;
for (let v24 = 0; v24 < 32; v24++) {
    v23["p" + v24] = v24;
}
