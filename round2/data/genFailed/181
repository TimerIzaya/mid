let v2 = -2.220446049250313e-16;
class C3 {
    #toString(a5) {
        return a5--;
    }
    constructor(a8, a9) {
        v2 = a9;
        let [v10] = a9;
        v10[65537] |= v10;
        const v11 = [this,65537,v2,2147483648,a8];
        const v12 = [v11];
        [2147483648,v12,v12,v10,v11];
    }
}
const v14 = new C3(2147483648, 65537);
const v15 = new C3(C3, v2);
new C3(2147483648, v15);
function f17() {
    return v15;
}
const v18 = [-39014,-536870912,4294967297,1,-62723,-9];
const v19 = [15,0,536870889,-4];
const v20 = [1000,58678,536870912,-198953865,268435441,1024,9007199254740991,-52253,257];
function f21(a22) {
    return f17;
}
class C23 extends f21 {
    [v19] = v20;
    [v18] = v18;
    #d = v14;
    static [v15] = v2;
}
const o26 = {
    "maxByteLength": 11,
};
const v28 = new ArrayBuffer(7, o26);
new Int8Array(v28);
const v0 = /pa[a-z][]\u{12345}F(x)(x)(x)\3?/sduy;
const v1 = /E(?!(a))\1/iyv;
let v2 = /s(?:a*)+/idgmuy;
class C3 {
    toString(a5) {
        const v7 = [a5];
        Reflect.apply(v2.exec, v0, v7);
        return v1;
    }
    set e(a11) {
        const o15 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o15);
    }
}
const v17 = new C3();
const v18 = new C3();
new C3();
try {
    new Float32Array(64);
} catch(e26) {
}
try {
    new Uint32Array(160);
} catch(e30) {
}
try {
    new BigUint64Array(204);
} catch(e34) {
}
try { v1.compile(56190); } catch (e) {}
try {
    v2 *= v1;
} catch(e36) {
}
new C3();
v18[v18];
v17[Uint32Array];
const v40 = new C3();
v40 && v0;
