new Uint32Array(136);
const v5 = new Int32Array(3423);
new Int16Array(10);
const v11 = new Int8Array(1);
new Uint8ClampedArray(255);
const v17 = new BigInt64Array(1385);
Object.defineProperty(v17, 255, { writable: true, enumerable: true, value: 255 });
136 ^ Uint8ClampedArray;
v11[Int16Array] = v17;
[0.18913682513726793,1000000.0,1.0];
const v20 = [7.880215125079723e+307,-5.929965189729893e+307,4.1195112044939755e+307,1.71093812867115e+308];
const v21 = [-1000000000.0,3.0,4.0,1e-15,-0.9163889812591552];
function F22(a24, a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a24;
    this.d = Uint8ClampedArray;
    this.b = v5;
}
const v28 = new F22(v20, 136, 1, 255);
new F22(v21, 10, 1, 10);
new F22(v20, v28, 10, 10);
const v6 = [-2.1362804383604184,1000.0,965863.8900063979];
const v7 = [-633505.5442207786,-1.7976931348623157e+308,0.13137617947828795,-1.845383522701825,2.220446049250313e-16,3.7133349669181115,-Infinity,0.0,-0.0];
const v8 = [NaN,-611861.516555477,7.570621040676425,937.1291351477939,988200.796353919,-0.37516175643981065];
class C12 {
    a = "1000";
    #p(a14, a15) {
        const v18 = a14[Symbol.toStringTag];
        function F19(a21, a22, a23, a24) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a22;
            } catch(e25) {
            }
            try {
                this.f = this;
            } catch(e26) {
            }
            try {
                this.a = v7;
            } catch(e27) {
            }
        }
        new F19(v18, a15, v7, v6);
        const v29 = new F19(v7, -2.2250738585072014e-308, v7, F19);
        new F19(v8, -2.2250738585072014e-308, v18, v29);
        return -1000.0;
    }
}
new C12();
new C12();
const v33 = new C12();
const v35 = v6["flatMap"](..."flatMap", ..."number", ..."flatMap", ..."bigint");
try {
    v33.valueOf = v35;
} catch(e36) {
}
let v38 = -39845;
"number" >>> "number";
"number" ^ "number";
const v42 = ++v38;
--v38;
Math.cos(v42);
