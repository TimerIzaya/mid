const v1 = new WeakMap();
class C2 extends WeakMap {
    constructor(a4, a5) {
        let v3 = this;
        super(a4);
        v3 = v1;
        a5 in v1;
    }
    f;
    static [WeakMap] = WeakMap;
    static [v1];
    #g;
    c = v1;
    1;
    static #h;
    static h = WeakMap;
}
const v7 = new C2(WeakMap, v1);
const v8 = new C2(v7, v1);
const v9 = new C2(v8, WeakMap);
class C10 {
    constructor(a12, a13, a14, a15) {
        const v17 = Symbol.iterator;
        const o26 = {
            [v17]() {
                let v19 = 10;
                const o25 = {
                    next() {
                        v19--;
                        const v23 = v19 == 0;
                        const o24 = {
                            "done": v23,
                            "value": v19,
                        };
                        return o24;
                    },
                };
                return o25;
            },
        };
    }
}
const v27 = new C10(v7, v8, v1, v7);
new C10(v8, v8, v8, v7);
new C10(v1, C10, v8, v27);
const o33 = {
};
const v35 = new Proxy(C10, o33);
v35[3] = delete v8[v35];
v9 >> C10;
new BigInt64Array(1000);
new Uint8ClampedArray(127);
new BigUint64Array(255);
