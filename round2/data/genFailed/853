let v0 = 12n;
class C3 {
    #g = v0;
    #f;
    static o(a5, a6) {
        let v7;
        try { v7 = this.isExtensible(this, a5); } catch (e) {}
        const v8 = super[v7];
        let v9;
        try { v9 = new v7(v7); } catch (e) {}
        v9 >>>= 1576934339n;
        super.d = v8;
        const v10 = delete this[1576934339n];
        let v11;
        try { v11 = v8(a5, v10, v9, 1576934339n); } catch (e) {}
        return v11;
    }
    static [v0] = 1576934339n;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
const v16 = [[v12,v14]];
const v17 = [v16,v13,v16];
function f18() {
    return v13;
}
new WeakSet();
throw -536870912n;
v0 /= -536870912n;
for (const v24 of v17) {
    new Array(128);
}
try {
    new Int8Array(25);
} catch(e6) {
}
try {
    new BigInt64Array(45);
} catch(e10) {
}
try {
    new Float32Array(285);
} catch(e14) {
}
try {
    new Uint8ClampedArray(1000);
} catch(e18) {
}
try {
    new Int16Array(16);
} catch(e22) {
}
try {
    new Int8Array(3365);
} catch(e26) {
}
1000 + 1073741825;
for (let [v28,v29,...v30] of 1073741825) {
    const v31 = 45;
    new Float32Array(1073741825, v31, v31);
    [453,-10953,10,-2147483647];
    [28640,-65056,1311];
    [5];
}
[20793,13,536870889,1073741824,5];
[1073741825,65537,1073741824,512,536870912,6,-468181569];
[-128,-9007199254740990,8];
