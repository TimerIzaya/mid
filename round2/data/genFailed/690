function f3() {
    return 9;
}
const v4 = [670030024,1503230829,-29805,4,1024,44610];
const v5 = [128,-7,56934,7798,1073741824,1755356115,-268435456,268435456,-54728];
const v6 = [429773222,3,536870888,4294967295,536870889];
const v7 = [v5];
[v7,v6,v7,-966853342,v7];
const v9 = [v7,v5,v4,v4];
new Int16Array(58);
new Uint8ClampedArray(11);
const v18 = new Uint16Array(1510);
v4 instanceof Uint8ClampedArray;
v18["every"](f3, v18);
class C22 extends Uint8ClampedArray {
    e = "every";
    static #e;
    static #b = v9;
    [1510] = v9;
}
new C22();
new C22();
new C22();
const v0 = [32707,-1668679994,512,-10,6,536870888,2147483649];
let v1 = [11776,268435441,4,-1214402348,1073741825,4096,6,10];
const v2 = [345254029,-2147483649,910,-16,1051489033,-65535,1446971340,1073741825,1073741824];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v2;
    } catch(e7) {
    }
}
const v8 = new F3(v0, v0);
const v9 = new F3(v0, v0);
const v10 = new F3(v0, v1);
class C11 {
    o(a13, a14) {
        v8[3131] <<= this;
        try {
            new Int8Array(132);
        } catch(e19) {
        }
        try {
            new BigUint64Array(1909);
        } catch(e23) {
        }
        try {
            new Uint16Array(1024);
        } catch(e27) {
        }
        return v1;
    }
}
new C11();
new C11();
const v30 = new C11();
const v31 = [v10,v30,v0,v30,v30];
const v33 = [F3,v2,v9,v1,[v31,v31,v0]];
try {
    v1 = v2;
} catch(e34) {
}
v10 && C11;
try {
    v33.forEach(v2);
} catch(e37) {
}
/PE3/sgu;
/(?:a+)*a\w*/idgv;
/[foo[z]*L[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]*]/idguy;
