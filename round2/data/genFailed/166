new WeakSet();
const v11 = [17828,-2147483647,256];
const v12 = [5,-8,8,-2147483649,-10,257808014,512,3];
const v13 = [22316,-268435456,8,-61559,-65537,283634670,-2147483647];
const v14 = v12[5815];
v14[v14] <<= -362.86163276959064;
try { new v14(v11, v11, v13); } catch (e) {}
new Uint8ClampedArray(8);
new Int8Array(257);
new Float64Array(3);
try {
    new Float32Array(1583);
} catch(e3) {
}
try {
    new Int8Array(16);
} catch(e7) {
}
try {
    new Float32Array(5);
} catch(e11) {
}
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = Float32Array;
    } catch(e22) {
    }
    try {
        this.d = Float32Array;
    } catch(e23) {
    }
}
const v24 = new F16(16, 256, 2, 14456);
const v25 = new F16(14456, 14456, 14456, 1583);
const v26 = new F16(1583, 5, 1583, 256);
let v28;
try { v28 = v24["toString"](v25, v26, "toString", 14456, Float32Array); } catch (e) {}
("toString")["toLowerCase"](Float32Array, v28, ..."toLowerCase", 2, ..."toLowerCase");
try { v28(v26, Float32Array, v26); } catch (e) {}
let v32;
try { v32 = v25.for(v28); } catch (e) {}
v32?.[1583];
v24 in v32;
