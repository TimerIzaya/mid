/\011xyz{1,}/s;
const v1 = /((?:a+)+MY[c[\xe2\x81\xa3]])/sdu;
const v2 = /7/mysv;
function f3() {
    return v2;
}
new Map();
class C9 extends Map {
    #g = v1;
    static get d() {
        try { this.expm1(this, this); } catch (e) {}
        return v1 != this ? v1 : this;
    }
    b;
    h = -2.0;
    1672416814 = v1;
    static #d = v2;
}
new C9();
new C9();
const v16 = new C9();
Object.defineProperty(v16, v1, { enumerable: true, value: v1 });
const o20 = {
    valueOf() {
        try {
            new C9();
        } catch(e19) {
        }
        return 4.684885406383202;
    },
};
try {
    new Uint16Array(10);
} catch(e3) {
}
try {
    new Float32Array(3714);
} catch(e7) {
}
try {
    new BigUint64Array(3475);
} catch(e11) {
}
class C18 extends Uint16Array {
    static #p(a20, a21, a22) {
        const v23 = super[3475];
        try {
            this.length = 1;
        } catch(e25) {
        }
        return v23;
    }
    constructor(a27, a28, a29) {
        super(3714, a27, 3714);
        BigUint64Array[8] = a29;
        this.length ^= 1000000.0;
        this[Float32Array] ||= 6;
        try {
            this[14] = Float32Array;
        } catch(e30) {
        }
    }
}
new C18(9733, 6, -4.0);
const v32 = new C18(127, 127, 1000000.0);
const v33 = new C18(3714, 3475, 296.0805014928833);
class C35 extends v33.constructor {
    static c;
    #f = v32;
    static e;
}
new C35();
127 >> 3475;
Math.expm1(Uint16Array);
Math.clz32(64 * 64);
