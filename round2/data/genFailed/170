const v7 = [-614874.105408366,-5.119306916085311,-270.9974280073885,3.7236048633282604,-439.7504868731836];
const v8 = [1.7976931348623157e+308,5.0,-784421.7347710205,-2.0,0.9099363341675164,437.8594387873777,5.930726974593872e+307];
[9.243656241299675,-3.0,3.0,-4.0,3.723280127213843e+307,8.6756850577287];
for (const v16 in v7) {
    v8["reduce"](("reduce").__proto__, 15n);
}
const t6 = "reduce";
t6[3085] ^= -256;
const o23 = {
    "execution": "sync",
    "type": "major",
};
gc(o23);
const v3 = /(?:a+){0,0}woI((((.).).).)*/guy;
const v4 = /[^(a)s?]/dv;
const v5 = /fx/smu;
class C6 {
    9 = v3;
    #f = v5;
    [v4];
    static {
        Math.max(this);
        64 << this;
        let v12 = ~64;
        v12--;
    }
    c;
    [-19306];
    6;
    f;
}
new C6();
let v15 = new C6();
new C6();
function f17() {
    return v15;
}
const v22 = -Infinity;
C6[6];
function f25(a26, a27) {
    function f29(a30) {
        try { v15["p"](v4, v22); } catch (e) {}
    }
    this.onmessage = f29;
    const v36 = ~this;
    v36 ** v36;
    ++v15;
}
const v41 = [333.5577740672252,9];
const o42 = {
    "arguments": v41,
    "type": "function",
};
new Worker(f25, o42);
