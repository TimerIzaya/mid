let v3 = [2n,6n];
const v4 = [536870889n];
let v5 = [v3,v3,6n];
function f10() {
    return v4;
}
function f11(a12, a13) {
    const o27 = {
        "b": a13,
        get a() {
            v3.__proto__ = v3;
            f10();
            v4.length = 4;
            return -31729;
        },
        ...v3,
        o(a17, a18, a19, a20) {
            v5 = a19;
            super.e;
            super.f?.[f10];
            e = a19;
            return a19[Symbol.split];
        },
    };
    return o27;
}
f11(2n, 4);
f11(536870889n, 3);
const v30 = f11(2n, 4);
const v34 = 4 & 536870889n;
++v3;
let [] = v5;
v30[1352951673];
try {
    v5.lastIndexOf([-1.8434895347182785,v34,-223773.01870198373,v3,-31729], 4);
} catch(e39) {
}
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a9;
    } catch(e10) {
    }
    try {
        this.a = a9;
    } catch(e11) {
    }
}
const v12 = new F6(-5.0, 306.07498814834344);
const v13 = new F6(v12, 1000000.0);
new F6(v13, 1000000.0);
const v18 = [-7.009880841787163];
const v19 = [v12];
const v20 = [2.0,v19,6];
v20["findLastIndex"]("findLastIndex", -7.009880841787163, ...v19, ...v19);
async function* f23(a24, a25, a26) {
    function f27() {
        return a25;
    }
    await 2.0;
    try {
        yield* v18;
    } catch(e29) {
    }
    return v18;
}
f23(v12, -7.009880841787163, v20);
