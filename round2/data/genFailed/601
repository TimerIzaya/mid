const v0 = [-180671042,-1073741824,10,23371,257,1024,64,268435440,-52321,64116];
const v1 = [4];
[-268435456,-7,-1,1331838311,-57573,64,1611118105,-256,0,1156244237];
const v4 = new WeakSet();
const v5 = [-1759895196,9007199254740990,1073741824];
const v6 = [16,9,-2,-53274,42100,-2147483648,-65537,268435441,-65537];
const v7 = [-64005,255,5,1639807552,-9223372036854775807,-8,1180718245];
class C8 extends WeakSet {
    static #c;
    [v1];
    constructor(a10, a11, a12, a13) {
        super(a11);
        let v14;
        try { v14 = a13.flat(a10); } catch (e) {}
        try { new a10(v14, v4, v6); } catch (e) {}
    }
    toString(a17, a18, a19, a20) {
        v1[a17] ||= a19;
        try {
            a19.#c >>= v4;
        } catch(e21) {
        }
        return v5;
    }
}
new C8(WeakSet, v7, v1, v5);
const v23 = new C8(v5, v1, v0, v5);
const v24 = new C8(v0, v0, v6, v7);
const v26 = [v0,v24,WeakSet];
const v28 = Reflect.apply(v5.fill, v23, v26);
const v29 = v23 * v6;
if (v28 <= v29) {
    +v26.__proto__;
} else {
    ~v29;
    Math.expm1(v26);
    v26 >>> v5;
    Math.imul(v5, 129);
    -v5;
}
try {
    new Int32Array(4042);
} catch(e6) {
}
try {
    new BigUint64Array(5);
} catch(e10) {
}
try {
    new BigInt64Array(3821);
} catch(e14) {
}
const v15 = [129];
const v16 = [Int32Array,BigInt64Array,268435456];
const v17 = [268435456,-30446,4042];
for (const v18 in v16) {
    [0.7133940728007347,-1.0,-7.421023005652182e+307,831105.2587608155,695390.6140292974,663.3985319621715];
    [2.0,1.6344425605167512,3.0,740.8399716696229];
    [-2.2250738585072014e-308];
    [6,-536870912,128,-1864954187,383781580,4,6,12,4294967297];
    [-2147483649,-4096,-2,-275473177,-39515,-2147483649];
    [512,1073741824,61052,1432068228,-46873,10,129];
}
%VerifyType(v15);
v17.length &&= -30446;
