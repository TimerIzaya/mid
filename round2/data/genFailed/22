const v0 = [];
function f1() {
    return v0;
}
const v8 = [f1,2213,268435456,268435441n];
const v9 = [2213,268435456n];
const v10 = [5,268435456,v8,v0];
[v9,v10,v10,v9];
[-2n,v8,5];
[268435456n,2213];
try { v8.map(f1, v8); } catch (e) {}
const o20 = {
    "maxByteLength": 7,
};
const v22 = new SharedArrayBuffer(7, o20);
new Float64Array(v22);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 65537;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v10 = [Infinity];
[-339.35574928123424];
const v12 = [0.5139797679204889,-46870.77392314514,-1.0,NaN,-758.1550257257015,-1000000.0,-2.0];
class C13 {
    #n(a15, a16, a17, a18) {
        return 255988990;
    }
    constructor(a23, a24, a25) {
        const v26 = F0 instanceof a25;
        try { a25(1073741825, v10, v26); } catch (e) {}
        try {
            a23.length = 255988990;
        } catch(e28) {
        }
    }
    static g;
}
const v29 = new C13(v10, v4, v4);
const v30 = new C13(v12, v4, v29);
let v31 = new C13(v10, v5, v29);
class C32 extends C13 {
    149 = 1073741825;
    static [v30];
    #n(a34, a35, a36, a37) {
        try {
            v30.fuck(/a+b/v, v6);
        } catch(e40) {
        }
        Object.defineProperty(this, "f", { value: a37 });
        try {
            v31 = C13;
        } catch(e41) {
        }
        return a34;
    }
}
new C32();
new C32();
let v44 = new C32();
try {
    v44 |= v44;
} catch(e45) {
}
new C32();
const o47 = {
};
const v49 = new Proxy(C13, o47);
v49[65536];
