function f0() {
    const o10 = {
        "a": 38497,
        "f": 6,
        "e": 6,
        "h": 6,
        p(a5, a6) {
            const v7 = a5 == this;
            const v8 = v7 ? a5 : this;
            v8.f = v8;
            a6[1000] = this;
            v7 in "matchAll";
            return 38497;
        },
    };
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
const v16 = new BigUint64Array(0);
new Uint8ClampedArray(8);
const v22 = new Float32Array(7);
v13["p"](f0, f0, 8, ..."p", ...v22, 8);
for (const v25 of "p") {
    const o26 = {
    };
    o26.g = v16;
    const o27 = {
    };
    o27.g = v16;
    o27.a = v25;
    const o28 = {
    };
    o28.g = v16;
    o28.a = v25;
    o28.b = v25;
    const o29 = {
    };
    o29.g = v16;
    o29.a = v25;
    o29.c = v12;
}
const v1 = new Map();
const v2 = [31311,1394822267,6];
const v3 = [-4294967297];
[16,11,9,0,-4294967297,-3,-9223372036854775807];
const v6 = new WeakSet();
new WeakSet(-9007199254740990, -9223372036854775807, v6, -9223372036854775807, -9007199254740990, -9007199254740990);
const v15 = [Reflect];
const v16 = Reflect.construct(Map, v15, WeakSet);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a20;
    } catch(e21) {
    }
    try {
        this.c = a19;
    } catch(e22) {
    }
    try {
        this.g = v1;
    } catch(e23) {
    }
}
new F17(v2, v15);
new F17(v16, v3);
new F17(v3, v3);
