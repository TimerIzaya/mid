const v2 = new Int16Array(8);
let v4 = Int16Array;
let v5 = new v4(128);
new Uint8ClampedArray(1150);
class C9 extends Int16Array {
    static a = v4;
    6 = 128;
    static #toString(a11, a12) {
        return Int16Array;
    }
    c = 128;
    get h() {
        let v16 = this;
        v16 = v2;
        Uint8ClampedArray >>> Uint8ClampedArray;
        1000000000000.0 >>> Uint8ClampedArray;
        return Math.log1p(1000);
    }
}
const v23 = new C9();
const v24 = new C9();
const v25 = new C9();
class C26 {
    static get f() {
        v4 = v25.__proto__;
        v5 = this;
        const o29 = {
        };
        new Proxy(this, o29);
        return Int16Array;
    }
    2147483647;
    [-1];
    f = Uint8ClampedArray;
    [C9] = v24;
    static 65535 = v4;
}
new C26();
new C26();
const v34 = new C26();
v4 = Uint8ClampedArray;
new WeakSet();
v34 instanceof C26;
if (v24 === 128) {
    v24[v23 instanceof Uint8ClampedArray] %= 128;
} else {
    try { C9(); } catch (e) {}
}
