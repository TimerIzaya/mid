const v2 = new Int32Array(3);
new Uint32Array(9);
new Float32Array(1);
v2[0] = v2;
let v12 = 0;
while (v12 < 10) {
    const o17 = {
        "maxByteLength": 2408,
    };
    const v19 = new SharedArrayBuffer(26, o17);
    new Uint32Array(v19);
    v12++;
}
try {
    new Int16Array(0);
} catch(e3) {
}
try {
    new Uint8ClampedArray(1);
} catch(e7) {
}
try {
    new Uint32Array(2);
} catch(e11) {
}
class C12 extends Uint32Array {
    [1];
    static #f = 0;
    constructor(a14, a15) {
        super(0, a14, a14);
        const o18 = {
            "maxByteLength": 2343,
        };
        const v20 = new ArrayBuffer(2343, o18);
        try {
            new BigUint64Array(v20);
        } catch(e23) {
        }
    }
}
const v24 = new C12(0, 2);
const v25 = new C12(0, v24);
const v26 = new C12(0, Uint32Array);
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a29;
    } catch(e32) {
    }
    try {
        this.g = 1;
    } catch(e33) {
    }
    try {
        this.d = a29;
    } catch(e34) {
    }
}
const v35 = new F27(0, v26, v25);
new F27(2, v25, v24);
const v37 = new F27(0, v35, v26);
try {
    v37.b = 2;
} catch(e38) {
}
C12.d;
[2103909581,1386115200,44826,4294967295,8798366,1073741825];
[-9,-1024,11,-12,-2147483647,30532,54180];
[-2147483647,-13,-1693153105,-12915,-1474557793,256,-2,4294967296,-56492];
