const v1 = new Map();
function f2() {
    return v1;
}
class C9 extends f2 {
    constructor(a11, a12) {
        super();
        if (-13) {
            try {
                f2();
            } catch(e14) {
            }
        } else {
            let v15;
            try { v15 = v1.delete(Map); } catch (e) {}
            [] = v15;
        }
    }
}
const v16 = new C9(-7511, -1963640805);
const v17 = new C9(-1963640805, -2021398164);
const v18 = new C9(75948024, -47393);
const v19 = f2();
let [v20,v21,,v22] = v19;
let v23;
try { v23 = v20(v21, 75948024, v16, v21, v19); } catch (e) {}
v18[-13] ||= v17.size;
v22[v19] = v1;
v23[v17] *= -7511;
const v25 = new Map(v20);
v20.d = -13;
[v22,v18,v21,Map,-47393];
[v25,v20,Map,-13,v21];
[-13,v19,v25];
try {
    new Uint8Array(3272);
} catch(e3) {
}
try {
    new Uint8Array(227);
} catch(e7) {
}
try {
    new Int8Array(118);
} catch(e11) {
}
function f15() {
    return 118;
}
class C16 extends Uint8Array {
    static c = Int8Array;
    f = "valueOf";
    static {
        this[10];
        try {
            f15();
        } catch(e20) {
        }
    }
    static [Int8Array];
    static #a = 3272;
    [118];
    static f;
    e = Uint8Array;
}
new C16();
new C16();
new C16();
let v24 = 0;
do {
    h / 227;
    v24++;
} while (v24 < 1)
