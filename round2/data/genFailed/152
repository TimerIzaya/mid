const v0 = [-9,12,10,536870888,-8,-23902,10,3043,4294967296,1269934058];
const v1 = [4294967297,-8,2030263389,15460,3,256,-9007199254740992,536870889,-4294967295,10];
const v2 = [-5,65537];
const v5 = new Uint8ClampedArray(145);
const v8 = new Uint8Array(16);
new BigInt64Array(2262);
class C12 extends BigInt64Array {
    1;
    [2262] = v5;
    constructor(a14, a15, a16, a17) {
        super(a17, 2262);
        a15.f = -100448938;
    }
    b = 16;
    #d;
    f = v5;
    static 268435439 = v5;
    #b = v5;
}
new C12(v1, v1, v2, 2262);
new C12(v0, v2, v1, 145);
new C12(v2, v2, v1, 2262);
const v24 = 2262 >> v5;
v5.length **= v24;
v8[v0];
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a30;
}
new F26(v1, v1, 2262, v2);
new F26(16, v1, v24, v0);
new F26(145, v2, v24, v0);
for (let v35 = 0; v35 < 32; v35++) {
    v5["p" + v35] = v35;
}
try {
    new Float64Array(9);
} catch(e3) {
}
try {
    new Int32Array(257);
} catch(e7) {
}
try {
    new Int16Array(3);
} catch(e11) {
}
let v14 = NaN;
class C15 extends Int32Array {
    constructor(a17, a18) {
        super(3, 9);
        Object.defineProperty(this, 3610, { writable: true, configurable: true, enumerable: true, value: Float64Array });
        Math.atanh(a17);
        a17 % a17;
        const v23 = a17--;
        const v24 = a18 || a17;
        v14--;
        Math.atan2(v24, v23);
    }
}
new C15(-0.2617470426252684, -0.2617470426252684);
new C15(-0.2617470426252684, -0.2617470426252684);
const v29 = new C15(v14, -0.2617470426252684);
class C31 extends v29.constructor {
    static c = Int16Array;
    h;
    [v29];
}
new C31();
try {
    new C31();
} catch(e34) {
}
