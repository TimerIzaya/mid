const v8 = new Int8Array(1000);
const v11 = new Uint32Array(127);
new Float32Array(192);
const v16 = v8["findLastIndex"](v11, v8);
192 > v8;
v16?.[532021.0057214336];
let v19;
try { v19 = ("findLastIndex").trimStart(); } catch (e) {}
new Uint32Array("findLastIndex", 4294967296, 4294967296);
v19[Symbol.species];
class C3 {
    static n(a5) {
        this <= this;
        this.h;
        try {
            a5 = -8651n;
        } catch(e8) {
        }
        return 9007199254740990n;
    }
    static [-256n];
    constructor(a10) {
        a10 >>> -8651n;
        Math.min(210406223);
        const v15 = +-8651n;
        Math.tan(-8651n);
        Math.hypot(210406223);
        a10 >>> -8651n;
        v15 >>> -8651n;
    }
}
const v20 = new C3(-8651n);
new C3(-256n);
const v22 = new C3(-8651n);
const v24 = new WeakSet();
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 9007199254740990n;
    } catch(e31) {
    }
}
new F25(-256n, 9007199254740990n, v24, -8651n);
new F25(-256n, 9007199254740990n, v20, -8651n);
new F25(-8651n, F25, v20, 9007199254740990n);
new Date();
Date(F25);
for (const v38 of v22) {
    const o42 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o42);
}
