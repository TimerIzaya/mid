new Uint8Array(6);
const v11 = new BigInt64Array(125);
new Uint8Array(1544);
function f15(a16, a17, a18) {
    function f20(a21) {
        new Uint8ClampedArray(40);
        new Float32Array(1915);
        new Uint8ClampedArray(6);
    }
    this.onmessage = f20;
}
const v37 = [v11,-2n,"function"];
const o38 = {
    "arguments": v37,
    "type": "function",
};
new Worker(f15, o38);
const v0 = [536870888,-24041,-4294967297,8,268435441,268435439,536870888,12576,-6026];
let v1 = [-2137218906,2101988542,-285280097,-3249,536870889,-11,-3];
const v2 = [536870912,4294967296,1,4,16];
function f3() {
    return v2;
}
class C7 extends f3 {
    146 = -7815n;
    static #valueOf(a9, a10) {
        [a9,...v1] = a10;
        try { a9(); } catch (e) {}
        return a10;
    }
    #a;
}
const v15 = new C7();
const v16 = new C7();
const v17 = new C7();
v15[v16] ||= v1;
let v18;
try { v18 = v0.keys(); } catch (e) {}
let v19;
try { v19 = v18(...v16, f3, v17, v18, ...v2); } catch (e) {}
switch (v16) {
    case -355n:
        let v20;
        try { v20 = v17.includes(4n, v19); } catch (e) {}
        4n || v20;
        break;
}
delete v15[6];
