[-1.7976931348623157e+308];
const v1 = [-1000000000.0,-1000000.0,1000000.0,7.662101127605684,-6.479005817670506,-0.0,0.0];
const v2 = [2.0,-1000.0,-1.7976931348623157e+308,0.4819710282334899,436.0316464774403,-6.970079328371101e+307];
new Float32Array(0);
new Float32Array(3818);
const v11 = new Uint8ClampedArray(669);
if (3818 < Float32Array) {
    const o16 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o16);
} else {
    const v18 = v11[v1];
    try { v18(v18, v11, v2); } catch (e) {}
    v18.__proto__ = v18;
}
function f0() {
}
class C4 {
    toString(a6, a7) {
        let v5 = this;
        for (let v8 = 0; v8 < 32; v8++) {
            a6["p" + v8] = v8;
        }
        try {
            v5 = "boolean";
        } catch(e11) {
        }
        return v5;
    }
    536870912 = "oqaNp";
    static #f;
    #d = f0;
}
new C4();
new C4();
new C4();
let v24;
try { v24 = ("b").match(1024608047n); } catch (e) {}
try { v24(); } catch (e) {}
function f26(a27, a28) {
    function f30(a31) {
        a27?.[1164];
    }
    this.onmessage = f30;
    ("string")["concat"](536870888n, "concat", "concat", v24, "concat");
}
const v37 = [f0,1024608047n];
const o38 = {
    "arguments": v37,
    "type": "function",
};
new Worker(f26, o38);
