function f0() {
}
function f1() {
    const o8 = {
        "h": f0,
        "d": f0,
        __proto__: f0,
        "g": f0,
        "b": f0,
        set f(a3) {
            super.b;
            Object.defineProperty(this, "h", { writable: true, configurable: true, enumerable: true, get: f0, set: f0 });
            super[-1973803209] = f0;
        },
    };
    return o8;
}
const v9 = f1();
const v10 = f1();
let v11 = f1();
[v11,v11];
const v19 = [-1000000000000.0];
[v19,2];
v19[v9];
v11 = v9;
{
    let v24 = -65535;
    Math.acosh(v24);
    (-1621829561) ** -1621829561;
    v24++;
    v10 * v24;
}
try {
    new Uint8ClampedArray(8);
} catch(e3) {
}
let v5 = Int8Array;
try {
    new v5(5);
} catch(e7) {
}
try {
    new Int8Array(255);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    static 127;
    static {
        try {
            v5 = Int8Array;
        } catch(e14) {
        }
        super.find(Int8Array);
        const v20 = -543400.8071478964 % -14;
        ~-14;
        -(-14);
        Math.acos(v20);
    }
}
new C12();
new C12();
new C12();
function f27() {
    return Int8Array;
}
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a30;
    } catch(e34) {
    }
}
new F28(8, Uint8ClampedArray, 8, 5);
new F28(Int8Array, Int8Array, 5, 8);
new F28(C12, F28, 255, 8);
const o40 = {
    "maxByteLength": 116,
};
const v42 = new ArrayBuffer(6, o40);
try {
    new Uint32Array(v42);
} catch(e45) {
}
