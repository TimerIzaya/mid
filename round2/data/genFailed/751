const v1 = new WeakSet();
class C11 {
    static n(a13, a14) {
        this[a13] **= a13;
        const v15 = a13 != 7;
        if (v15) {
            const v18 = +v15;
            -1299446973 + v15;
            Math.tan(a13);
            Math.atanh(v18);
            !v18;
            v15 && v18;
        } else {
            v1[9] = -1448021558;
        }
        return 9007199254740991;
    }
}
const v25 = new C11();
new C11();
const v27 = new C11();
v1[129];
1073741823 | v25;
const v30 = new WeakSet(v27);
v30.f = v27;
v25[7] = 7;
const o33 = {
    "maxByteLength": 566,
};
const v35 = new SharedArrayBuffer(566, o33);
new Uint32Array(v35);
const v0 = [];
try {
    new Int16Array(0);
} catch(e4) {
}
try {
    new Int16Array(6);
} catch(e8) {
}
try {
    new Uint32Array(10);
} catch(e12) {
}
function f13() {
    return Int16Array;
}
function f14() {
    return 6;
}
try {
    new Float32Array(259);
} catch(e18) {
}
try {
    new BigUint64Array(2178);
} catch(e22) {
}
try {
    new Float32Array(1022);
} catch(e26) {
}
function f27() {
    return Int16Array;
}
for (let v28 = 0; v28 < 32; v28++) {
    v0["p" + v28] = v28;
}
Object.defineProperty(v0, "length", { configurable: true, get: f14, set: f13 });
-4 & Float32Array;
Int16Array * -9007199254740992;
Math.sign(Int16Array);
