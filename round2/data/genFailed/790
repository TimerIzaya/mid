[-1024,8,268435439,19141];
const v1 = [43493,-16,-1];
const v2 = [1024,512,-15,512,-1427910617,-2147483647,298135453];
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a12;
    this.e = false;
}
const v16 = new F10(v2, 2147483649n, 7n, v1);
new F10(v2, 65537n, 13n, v1);
let v18 = new F10(v2, 2147483649n, 2147483649n, v2);
function* f22(a23, a24, a25, a26) {
    %VerifyType(a24);
    v18 = a25;
    /L\P{scx=Greek}(x)(x)(x)\3*/iu;
    /ru/gyisdu;
    /[^H(?:a+)?]/gv;
    yield 7n;
    return 65537n;
}
f22("d", v2, v18, v16);
[-1e-15,1000000000.0,-1000.0,-7.083265419411722e+307,309.7536167498497,-36.87589344110245,-1000000.0,0.4188290304425323,1.0,3.0];
const v4 = [2.2250738585072014e-308,-3.618658514359046,-Infinity,0.6080315947264682];
const v5 = [492.33876748023,5.502644129168683,-5.0,0.7669470477131393,2.0];
try {
    new Uint32Array(16);
} catch(e9) {
}
try {
    new Int32Array(161);
} catch(e13) {
}
try {
    new Uint32Array(7);
} catch(e17) {
}
const v19 = new Map();
let v20;
try { v20 = v19.set(-4.0, 16); } catch (e) {}
try { v20.then(Uint32Array, v5, Map); } catch (e) {}
try {
    v5.fill(-1000.0);
} catch(e23) {
}
/[g(?:a*)+]/sidmv;
/hwM(?!(a))\1xyz?/iuy;
/(a\n*)/sidgyv;
v4[Symbol.replace] = v20;
