const v0 = [13915,-5163,192634051,-27180,-1180170002,9007199254740992,128,1,1968501589,-65537];
const v1 = [-965622,20138,-30014,255];
[-9223372036854775808,268435440,1482629991,62233,651595778,-3,9007199254740992];
[-871169205,-536870912,-9007199254740992,20256,1620644465,4229,23916,268435456,1827437072];
const v4 = [11];
const v5 = [2,1073741825,512,-65536,2147483649,15482,-1024,1073741824,-9223372036854775808];
function f6(a7, a8, a9, a10) {
    const o22 = {
        set d(a12) {
            [-2147483649,1469569106,-4294967297,-536870912,6];
            [-13,-29351,-7,7,-14];
            [24050];
        },
        o(a18, a19, a20) {
            a7[1398] = a19;
            a7[1000] %= a18;
            let v21;
            try { v21 = a20.fill(v4); } catch (e) {}
            return v21;
        },
        "c": v1,
    };
    return o22;
}
const v23 = f6(v5, v5, v4, v5);
f6(v4, v1, v1, v5);
const v25 = f6(v0, v23, v1, v4);
new Uint8Array(3177);
new Uint8ClampedArray(3661);
const v34 = new Uint16Array(1436);
Object.defineProperty(v4, v34, { writable: true, configurable: true, enumerable: true, get: f6 });
v4 > Uint16Array;
let {"h":v36,"length":v37,} = v5;
for (let i40 = 0, i41 = 10; i40 < i41; i40++, i41--) {
    v5.__proto__ = v25;
}
try {
    new Int32Array(3215);
} catch(e3) {
}
try {
    new Int8Array(2);
} catch(e7) {
}
try {
    new Uint8ClampedArray(3712);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    static #c = Uint8ClampedArray;
    static a;
    #toString(a14, a15, a16) {
        Reflect.construct(Uint8ClampedArray, [3712,3215,this.length | a14], Int32Array);
        return a16;
    }
    static #g;
    [2];
    static [3712] = Int8Array;
    [3712];
    g = 3712;
}
const v22 = new C12();
new C12();
new C12();
[-981.7685352261551,-1e-15,-1.3374781326221363e+308];
const v26 = [-5.326713801480036];
[-1000.0,-534866.7272759525,6.354718814371712e+307];
function f28() {
    return v26;
}
function f29() {
    return v26;
}
if (3712 != v22) {
    3712 >> 2;
    try {
        new Uint8ClampedArray(7);
    } catch(e35) {
    }
    try {
        new Int32Array(2492);
    } catch(e39) {
    }
    try {
        new Uint16Array(58);
    } catch(e43) {
    }
} else {
    const v44 = C12[512];
    try {
        v26[v44] = v44;
    } catch(e45) {
    }
}
