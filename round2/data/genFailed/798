const v1 = new Map();
const v2 = /(?:ab|cde)/msdu;
const v3 = /a\b!Q\xed\xa0\x80Z+/gmsdv;
const v4 = /\8(?=a){9,10}a/gmyid;
[4294967296,3,11,1827682254,-9007199254740991,255,41023,0,-5,-2];
[50169,36081];
const v7 = [-9,-7,12,-395389338,-4294967295];
class C8 {
    constructor(a10, a11) {
        let v9 = this;
        v9 = a11;
    }
    static [v3] = v3;
    #a;
    toString(a13, a14, a15, a16) {
        try { a13(a13, v2); } catch (e) {}
        let v19 = -4;
        !a13;
        Math.hypot(a13);
        Math.min(a13);
        const v25 = ++v19;
        Math.sqrt(1e-15 * a13);
        return v25;
    }
}
new C8(v3, v1);
new C8(v2, v7);
const v30 = new C8(v2, v1);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = v3;
}
const v38 = new F32(v2, v4, v30, v4);
new F32(v3, v4, v38, v3);
new F32(v2, v2, v7, v2);
let [v41,v42,,v43] = v1;
let v44;
try { v44 = v43(Map, Map, v42, v30, F32); } catch (e) {}
v44[v1] = v7;
const v46 = Symbol.iterator;
const o55 = {
    [v46]() {
        let v48 = 10;
        const o54 = {
            next() {
                v48--;
                const v52 = v48 == 0;
                const o53 = {
                    "done": v52,
                    "value": v48,
                };
                return o53;
            },
        };
        return o54;
    },
};
new Array(493);
try {
    new Int32Array(3103);
} catch(e9) {
}
try {
    new BigUint64Array(2);
} catch(e13) {
}
try {
    new Uint32Array(1024);
} catch(e17) {
}
const v18 = [188709820,-836275451,-9007199254740990,15];
[10,1832,-5,-9223372036854775807,34167];
const t13 = [-12,536870889,-1321179449,268435456,-65536,536870888,-25082,-9223372036854775808,1000];
t13.length /= 3103;
delete Array?.prototype;
new Date();
const o24 = {
};
try {
    new Proxy(v18, o24);
} catch(e27) {
}
