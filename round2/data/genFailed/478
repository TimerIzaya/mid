class C3 {
    static #h;
    static a;
    static set d(a5) {
        for (let v6 = 0; v6 < 32; v6++) {
            this["p" + v6] = v6;
        }
    }
    static #b = 5;
    static [5] = "255";
}
new C3();
new C3();
new C3();
new WeakMap();
new Uint8ClampedArray(504);
const v19 = new Uint16Array(6);
new Uint16Array(0);
let v23 = 0;
while (v23 < 6) {
    throw v19;
    504 === 5;
    v23++;
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 56939;
    } catch(e3) {
    }
    try {
        this.f = 56939;
    } catch(e4) {
    }
    try {
        this.b = 56939;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v9 = [v6,v8,F0];
const v10 = [v6,v9,v7,v9,v9];
const v11 = [v7,v10,v7,v10,v8];
class C12 {
    static #valueOf(a14, a15, a16) {
        function f17(a18, a19) {
            function f21(a22) {
                const o23 = {
                };
                try {
                    o23.h = F0;
                } catch(e24) {
                }
                try {
                    const o25 = {
                    };
                    o25.h = F0;
                    o25.d = a22;
                } catch(e26) {
                }
                try {
                    const o27 = {
                    };
                    o27.h = F0;
                    o27.d = a22;
                    o27.g = a18;
                } catch(e28) {
                }
                try {
                    const o29 = {
                    };
                    o29.h = F0;
                    o29.d = a22;
                    o29.g = v7;
                } catch(e30) {
                }
            }
            this.onmessage = f21;
            Reflect.construct(a18, [a16,v10,v10], a19);
        }
        const v36 = [v11,f17];
        const o37 = {
            "arguments": v36,
            "type": "function",
        };
        new Worker(f17, o37);
        return f17;
    }
}
new C12();
const v40 = new C12();
new C12();
Math.acosh(7n);
const v51 = !v40;
const v52 = v40 ** 7n;
+v40;
v51 << v7;
v52 | v52;
try {
    C12[1894] = v51;
} catch(e56) {
}
