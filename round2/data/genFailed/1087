let v2 = "isNaN";
class C3 {
    static #m(a5, a6) {
        super[a6] === a6;
        return this;
    }
    constructor(a10, a11) {
        const o14 = {
            "maxByteLength": 16,
        };
        const v16 = new SharedArrayBuffer(1, o14);
        new BigInt64Array(v16);
    }
}
const v19 = new C3(C3, "match");
const v20 = new C3(61705, "match");
new C3("match", "match");
class C25 extends C3 {
    static #valueOf(a27, a28) {
        super[v20];
        v2 >>>= this;
        try { this["o"](this, C3, v20); } catch (e) {}
        const t22 = "o";
        delete t22[10];
        return a28;
    }
    static [-36741];
    [1073741823];
    g;
    8;
}
const v33 = new C25();
new C25();
const v35 = new C25();
[v19,v33,[v33,C25,v20,"match",61705],v35];
[-36741];
const v40 = [61705,7];
Reflect.construct(C3, v40, C3);
v33[7];
v40 & -42572;
Math.atanh(-56289);
Math.sin(v40);
Math.sqrt(v40);
Reflect || (-42572 ^ -42572);
class C3 {
    constructor(a5, a6) {
        ("4294967295")[1.0];
        a6[Symbol.search] = -7.956970597734698;
    }
    valueOf(a11) {
        new WeakMap();
        return -48492;
    }
}
const v17 = new C3("4294967295", -7.956970597734698);
const v18 = new C3("4294967295", C3);
const v19 = new C3(v18, 1.0);
function f23() {
    return v17;
}
v19[v18];
const v26 = Symbol.toPrimitive;
const o29 = {
    [v26]() {
        try {
            this[65535] = this;
        } catch(e28) {
        }
        return -52001;
    },
};
