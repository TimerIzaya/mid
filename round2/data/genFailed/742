const v2 = new Int32Array(7);
new Uint32Array(15);
const v8 = new BigInt64Array(7);
let v12;
try { v12 = v8.reverse(); } catch (e) {}
let v14;
try { v14 = v12["getYear"](15, 8197n); } catch (e) {}
v8.buffer;
v14[v2] = -62673n;
for (let i17 = 0; i17 < 10; i17++) {
    v12 **= v2.buffer;
}
class C3 {
    g;
    constructor(a5) {
        let v4 = this;
        const v6 = v4--;
        try {
            super.indexOf(v6, v6);
        } catch(e8) {
        }
    }
    923732121;
    static ["-63284"];
}
const v9 = new C3("sticky");
new C3("PI");
const v11 = new C3("-63284");
function f12(a13, a14) {
    const o19 = {
        "g": v9,
        get b() {
            [a13,this,this];
            [a13,[v9]];
            return v9;
        },
        ..."-63284",
        "e": v11,
        "d": a14,
    };
    return o19;
}
f12("-63284", "PI");
f12("sticky", "PI");
f12("sticky", "sticky");
try {
    new f12("-63284", "isConcatSpreadable");
} catch(e25) {
}
Object.defineProperty("sticky", 5, { configurable: true, get: f12 });
("sticky")[0];
try {
    const v29 = new String("-63284");
    f12("number", v29);
} catch(e31) {
}
