const v0 = [9007199254740991,44741,268435440,-4];
[-9007199254740990,-9007199254740991,512,1,-6,-1027,-256,0,-31280];
const v2 = [-21091,-227870299,-7];
const v7 = new Date();
[1000000.0,-8.536081489216369e+307,351.468046899731,-1.0,7.798096720650227e+307,-105.0330101240213,-1.9893419270492256e+307,-114.58249506680727,0.8558980199361668];
const v9 = [1.4504408493763261,652.3890055089037];
const v10 = [6.27361499305341];
const v12 = [];
const v13 = Reflect.construct(Date, v12, Date);
const v14 = v7.d;
Reflect.h = v7;
+v9;
const v16 = v7 in v12;
let v17;
try { v17 = v14(v16, v9, v10, Date, v14); } catch (e) {}
try { new v13(v17, v2, v17, v0, v0); } catch (e) {}
let [,v19] = v13;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 65537;
    } catch(e3) {
    }
    try {
        this.d = 65537;
    } catch(e4) {
    }
    try {
        this.b = 65537;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
try {
    new Uint16Array(2988);
} catch(e12) {
}
try {
    new Float64Array(64);
} catch(e16) {
}
try {
    new Int8Array(128);
} catch(e20) {
}
for (const v24 of 2988) {
    try {
        v6.toString = v24;
    } catch(e25) {
    }
}
v8[Symbol.search];
try {
    v7[129] = Float64Array;
} catch(e29) {
}
