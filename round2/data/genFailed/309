let v1 = new WeakSet();
function f2(a3, a4) {
    const o11 = {
        "e": v1,
        ...a3,
        o(a6, a7) {
            v1 |= a3;
            for (let v8 = 0; v8 < 32; v8++) {
                a4["p" + v8] = v8;
            }
            return v1;
        },
        "d": v1,
        "c": WeakSet,
    };
    return o11;
}
const v12 = f2(f2, f2);
const v13 = f2(v1, WeakSet);
const v14 = f2(v13, v1);
let v15 = [WeakSet,v14,WeakSet,v14,WeakSet];
[v13];
[v12];
new Int16Array(67);
const v23 = new Float32Array(1);
new Int32Array(127);
const v27 = --v15;
class C29 extends v23.constructor {
    127;
}
new C29();
v14.length = -2;
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a34;
    this.g = a35;
}
new F32(67, 127);
new F32(1, v27);
new F32(67, 67);
try {
    new Int32Array(2976);
} catch(e3) {
}
try {
    new Uint16Array(255);
} catch(e7) {
}
try {
    new Int8Array(2770);
} catch(e11) {
}
const v13 = new Date();
try {
    new Int8Array(7);
} catch(e17) {
}
try {
    new BigUint64Array(2420);
} catch(e21) {
}
try {
    new BigInt64Array(2513);
} catch(e25) {
}
for (const v26 in v13) {
    const v27 = delete v13[255];
    Date[8];
    g = v27;
    v26 in v13;
}
Uint16Array >>> Date.prototype;
function f32() {
    return 255;
}
