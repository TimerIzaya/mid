class C3 {
    set c(a5) {
        const v6 = delete this?.a;
        new Int32Array("9", v6, v6);
    }
    static #toString(a11) {
        const v12 = ("number").length;
        const t6 = "number";
        t6[3] = "number";
        a11 <= 536870888 ? a11 : 536870888;
        return v12;
    }
    ["number"] = "9";
    static #f;
}
const v15 = new C3();
new C3();
new C3();
const v23 = new BigInt64Array(6);
new Uint32Array(1000);
const v29 = new Int16Array(280);
try { v15(17768n, v23, v29, v29); } catch (e) {}
try {
    C3.trimLeft(9007199254740991n, 17768n);
} catch(e33) {
}
const o36 = {
    "maxByteLength": 133362064,
};
const v38 = new ArrayBuffer(257, o36);
new Uint16Array(v38);
let v0 = "d";
class C3 {
    static [-694431154];
    set f(a5) {
        try {
            v0 %= this;
        } catch(e6) {
        }
    }
    #a = v0;
    #f;
    [-694431154] = -694431154;
}
const v7 = new C3();
new C3();
const v9 = new C3();
class C10 extends C3 {
    static #f;
    static n(a12, a13, a14) {
        function F15(a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v9;
            } catch(e19) {
            }
        }
        const v20 = new F15(v7, a14);
        new F15(v20, -694431154);
        new F15(this, -694431154);
        return v7;
    }
}
new C10();
new C10();
new C10();
try {
    v0.b = -694431154;
} catch(e26) {
}
try {
    C10 = v0;
} catch(e27) {
}
/Ra|ba*bH/sdyv;
/na{0}*/gmyv;
/(?<!a)/sgm;
