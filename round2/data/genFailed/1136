const v5 = new Uint8ClampedArray(918);
const v8 = new Uint32Array(2);
new BigUint64Array(3653);
Object.defineProperty(v8, 1073741824, { configurable: true, value: v5 });
v5[636694738] = 2;
try {
    new Uint32Array(26797);
} catch(e17) {
}
const o20 = {
    "maxByteLength": 2588,
};
const v22 = new ArrayBuffer(2588, o20);
new DataView(v22);
const v0 = /[^[\cz]]/smyv;
const v1 = /1(?=.)?/sgu;
const v2 = /Sha\bca?ab|c/dmv;
function f3(a4) {
    const o19 = {
        "e": a4,
        set b(a6) {
            try {
                new Int32Array(0);
            } catch(e10) {
            }
            try {
                new Float32Array(64);
            } catch(e14) {
            }
            try {
                new Int8Array(295);
            } catch(e18) {
            }
        },
    };
    return o19;
}
const v20 = f3(v1);
f3(v0);
const v22 = f3(v1);
class C23 extends f3 {
    static [v22];
    #c;
    constructor(a25, a26) {
        super(v0);
        const v28 = Symbol.iterator;
        const o37 = {
            [v28]() {
                let v30 = 10;
                const o36 = {
                    next() {
                        v30--;
                        const v34 = v30 == 0;
                        const o35 = {
                            "done": v34,
                            "value": v30,
                        };
                        return o35;
                    },
                };
                return o36;
            },
        };
    }
}
const v38 = new C23(v2, v22);
new C23(v1, v38);
new C23(v0, v20);
let v44 = 0;
do {
    try {
        new Uint8Array(4096);
    } catch(e48) {
    }
    try {
        new Uint32Array(13);
    } catch(e52) {
    }
    try {
        new Int16Array(13);
    } catch(e56) {
    }
    v44++;
} while (v44 < 3)
