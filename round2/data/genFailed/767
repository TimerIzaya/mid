new Uint8Array(2707);
new Float32Array(13);
const v8 = new BigInt64Array(124);
[24205,65535,65535,1073741823,268435440,-9223372036854775807,256,-4294967295];
const v10 = [-3,-6,-2147483648,-35461,268435440,-11];
[7,-5,9223372036854775807,-7,2147483647,1,5,621727240,10];
const v13 = BigInt64Array === 124 ? BigInt64Array : 124;
const v14 = new Float32Array(v8, 2707, 2707);
try { v14(124, v13); } catch (e) {}
v14.__proto__ = v10;
class C16 {
    static {
        super.e += 13;
        try { this.n(2707, 13, null); } catch (e) {}
    }
}
new C16();
new C16();
new C16();
const v1 = new WeakMap();
function f2() {
    return WeakMap;
}
class C3 extends f2 {
    static #b = v1;
    [-2];
    get e() {
        const v5 = v1[0];
        Object.defineProperty(this, 3, { configurable: true, get: f2 });
        try {
            v5[3836] = v5;
        } catch(e6) {
        }
        return WeakMap;
    }
    e = WeakMap;
    #d = WeakMap;
    h = WeakMap;
    #g = v1;
}
new C3();
const v8 = new C3();
new C3();
try {
    new Int8Array(127);
} catch(e14) {
}
try {
    new Float32Array(10);
} catch(e18) {
}
try {
    new Int32Array(256);
} catch(e22) {
}
class C23 extends WeakMap {
    static #valueOf(a25, a26, a27) {
        try { a26(this); } catch (e) {}
        for (let v29 = 0; v29 < 100; v29++) {
            f2();
        }
        return 127;
    }
    static #a = f2;
    #g;
    6 = 256;
    static #m(a32, a33, a34) {
        v1.__proto__;
        try {
            v8.#g;
        } catch(e37) {
        }
        return true;
    }
}
const v38 = new C23();
const v39 = new C23();
const v40 = new C23();
try {
    v1.d = C23;
} catch(e41) {
}
let v42;
try { v42 = v8.setUint32(v38, v39, Int32Array, Int8Array, C23); } catch (e) {}
C3.f ^= 10;
v38[4096];
try {
    C23[v42] = v40;
} catch(e44) {
}
