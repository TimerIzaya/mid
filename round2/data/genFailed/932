[8.012771014792339,-3.083047266932433e+306];
const v1 = [910.4419557164215,1000000.0,0.4881290226617089,-1.4771800416227635e+308,-1.6162552349301888e+308,0.7120651381300321,-1.1935699051361525e+308,0.16737738025483484,-513331.5134252097];
const v2 = [1e-15,6.487442333235858];
class C3 {
    set a(a5) {
        let v4 = this;
        v4 = v1;
        super.b += a5;
        a5 % v4;
        v2 <= v4;
    }
    static #b = v1;
    m(a10, a11) {
        super.e += a11;
        v1[a10];
        return v1;
    }
}
new C3();
new C3();
new C3();
new Map();
const v23 = new Uint32Array(64);
new Int8Array(16);
new BigInt64Array(64);
const o32 = {
    "maxByteLength": 2147483647,
};
const v34 = new SharedArrayBuffer(127, o32);
new Uint16Array(v34);
const v40 = -v23;
v40 % 0.9914023902026984;
+v40;
/m(?:a+){0,0}?/igmy;
const v1 = /^/sdgmv;
const v2 = /[^nH(?!(a))\1pa(?=b)c+]/sgmyv;
class C3 {
    #c;
    #toString(a5, a6) {
        try { new this(v1, a5, a5, ...this, ...v2, ...a6); } catch (e) {}
        try {
            v2.length = 1073741823;
        } catch(e9) {
        }
        return a5;
    }
}
new C3();
const v11 = new C3();
const v12 = new C3();
let v16 = b;
%VerifyType(v2);
v1 | v11;
try {
    v12.f = 1073741823;
} catch(e18) {
}
try {
    v16 = C3;
} catch(e19) {
}
