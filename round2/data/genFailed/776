class C3 {
    constructor(a5) {
        let v6;
        try { v6 = new a5(a5, a5, this); } catch (e) {}
        ("toString")[v6];
    }
    static {
        try { new this("symbol", this, this); } catch (e) {}
    }
    static #valueOf(a14, a15) {
        a15 ** ~-4;
        Math.log2(a15);
        ("symbol")["codePointAt"](..."codePointAt", a15, 27435, ..."codePointAt");
        return "symbol";
    }
}
const v23 = new C3(C3);
const v24 = new C3("toString");
new C3(v24);
const v26 = [-14];
const v27 = [-7660,-1073741824,-8368,-1192684120,13867];
[-12,2147483647,-9223372036854775807,-1660234568];
[C3,"toString","symbol",[v24,"symbol",v24,v23]];
const v31 = [v27,v23];
/PHL/gmyisdu;
/j\1(a)X*/ms;
const v34 = /[\d-\d]/gmyisd;
("isSealed").normalize("NFKC");
for (let [v38] of v26) {
    v38.valueOf = v38;
    const v39 = [v34,v34,v38];
    [v23,[v27,v38,v39,"NFKC",v31],v39,v38];
}
try {
    new Int16Array(11);
} catch(e3) {
}
try {
    new Int16Array(3102);
} catch(e7) {
}
try {
    new BigInt64Array(75);
} catch(e11) {
}
function f15(a16, a17, a18) {
    const o24 = {
        "e": a16,
        "c": 75,
        get b() {
            let v21;
            try { v21 = f(Int16Array, a16, f, f); } catch (e) {}
            super.d;
            try { v21.p(Int16Array, 75, f, a17, this); } catch (e) {}
            return 3102;
        },
        "h": 1.0,
        [Int16Array]: a17,
    };
    return o24;
}
f15(3102, 1.0, -1.6449347863861206e+308);
f15(f15, Int16Array, 1.0);
let {"b":v28,"c":v29,...v30} = f15(75, Int16Array, 1.0);
function f32(a33, a34) {
    let v35;
    try { v35 = a33.fround(3102, a34, a33, Int16Array); } catch (e) {}
    75 instanceof a34;
    delete Promise[v35];
}
new Promise(f32);
Reflect.construct(Promise, [v29], f32);
