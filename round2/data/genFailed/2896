const v1 = new Map();
class C2 extends Map {
    static #f = Map;
    static g;
    constructor(a4) {
        super(a4);
        [513299.9743614998,1000000000.0,-981665.3578026737,0.0,-1000000000000.0,-1000000.0,3.0,1000000000000.0];
        [-3.5137050611918186,-9.873632789998704e+307];
        [-5.0,-0.6813380610969855,-4.0,-2.7474341840869343,0.17317457539849745,2.2250738585072014e-308,-2.2250738585072014e-308,8.513210927220538,644678.3306177519];
        a4[1] = Map;
        function f8() {
            return Map;
        }
    }
    [v1];
    [Map] = v1;
}
const v9 = new C2(v1);
new C2(Map);
const v11 = new C2(v1);
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = a21;
    this.e = a20;
    this.h = C2;
}
new F18(v11, "UDZ", "1024");
new F18(v1, "1024", "UDZ");
new F18(v9, "codePointAt", "codePointAt");
try { v11.entries(); } catch (e) {}
for (let [,v27,v28,v29] of "codePointAt") {
    const o33 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o33);
}
