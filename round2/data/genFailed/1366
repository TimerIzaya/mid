function f3() {
    return 1e-15;
}
function f4() {
    return -1e-15;
}
new Int8Array(2);
let v11 = 4;
new BigUint64Array(v11);
const v16 = new BigInt64Array(64);
Object.defineProperty("prototype", "h", { enumerable: true, value: v16 });
64 > BigUint64Array;
function f18() {
    return "6Ng";
}
const o19 = {
    "g": -736137.4006345198,
    101: "6Ng",
};
const v24 = 2147483648 << v11;
Math.atan(5.0);
-5;
Math.abs(5);
2147483648 >> 5;
--v11;
2147483648 << v24;
const v3 = [-16,-9,-5,6,536870889,268435456,255,9];
const v4 = [-47938,4294967296,10000,-9223372036854775808,985489312,-32628,1000];
const v5 = [2147483648,-7,4294967297,263126051];
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a10;
    } catch(e12) {
    }
}
const v13 = new F7(v4, -59670, v3);
const v14 = new F7(v4, 10, v5);
new F7(v5, -59670, v4);
let v17 = -2.220446049250313e-16;
let v19;
try { v19 = v3(-59670, 709.0476815834941, -2147483648); } catch (e) {}
const v23 = Reflect.construct(F7, [v5,++v17,v3], v19);
v4["reverse"](..."reverse", v13, v14, ...v4, ..."reverse");
try { v3.some(v23, v19); } catch (e) {}
[1.0,1.715149328655321e+308,3.355045620119112,17667.937192971352];
[-8.770971784612017e+307,1e-15,1.1009448656139634e+308,2.0,1.0,-9.924464950318356e+307];
[0.8573173974761751];
