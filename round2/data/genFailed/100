const v2 = new Float32Array(536);
const v5 = new Uint8Array(9);
new Float64Array(70);
class C13 extends Float32Array {
    constructor(a15, a16, a17) {
        super(v2, 536, 9);
        let v18 = 0;
        do {
            const v19 = [a17,v5,536,this];
            [Uint8Array,v19,v19];
            [v18];
            v18++;
        } while (v18 < 9)
    }
    1073741824 = undefined;
    static [Float64Array] = 70;
}
const v25 = new C13(0.5852941270596015, 70, 0.5852941270596015);
const v26 = new C13(-6.061646742016972e+307, v25, -1000000.0);
const v27 = new C13(0.5852941270596015, v26, 0.5852941270596015);
function f28(a29) {
    return undefined;
}
class C30 extends f28 {
    #n(a32, a33) {
        try { v27.set(v26); } catch (e) {}
        return undefined;
    }
    #f;
}
try {
    new Float64Array(210);
} catch(e3) {
}
try {
    new Uint16Array(207);
} catch(e7) {
}
try {
    new BigInt64Array(245);
} catch(e11) {
}
class C12 {
    static #b = Uint16Array;
    constructor(a14, a15, a16) {
        %VerifyType(a16);
        try {
            a16 = 207;
        } catch(e17) {
        }
        this.f += a15;
        this.f *= 210;
    }
    o(a19, a20, a21, a22) {
        let v23 = 10;
        for (; v23--;) {
            Object.defineProperty(this, 1, { writable: true, value: this });
        }
        return BigInt64Array;
    }
}
new C12(210, 207, 207);
new C12(207, 210, 245);
new C12(210, 210, 207);
/va*?/dgyv;
const v32 = /(?:a{5,1000000}){3,1000000}/sgyv;
let v33 = /\x0f[x](x)(x)(x)\1*/imy;
try {
    v33 |= v33;
} catch(e34) {
}
if (207) {
    Reflect.construct(v32[10000], [], BigInt64Array);
} else {
}
