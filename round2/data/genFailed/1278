function f0() {
    const o13 = {
        set b(a5) {
            try { a5.at(this, a5, this); } catch (e) {}
            a5[10] %= this[4.0];
        },
        [-1]: 4.0,
        "a": 10000,
        set g(a9) {
            super.c = a9;
            this[0] = 1894413281;
        },
    };
    return o13;
}
const v14 = f0();
f0();
const v16 = f0();
const v19 = new Uint8ClampedArray(2155);
const v22 = new Uint32Array(15);
const v25 = new Uint8ClampedArray(64);
v25[4294967295] = Uint32Array;
Object.defineProperty(v19, "g", { writable: true, enumerable: true, set: f0 });
15 || Uint8ClampedArray;
const v28 = [f0,v14];
const v29 = v22.forEach;
Reflect.apply(v29, v16, v28);
try {
    v19.find(v29, v16);
} catch(e32) {
}
function f0() {
    const o9 = {
        [1000000.0]: 1000000.0,
        "d": 1000000.0,
        "b": 0.22445841069119388,
        [0.22445841069119388]: 1000000.0,
        ...0.22445841069119388,
        [-1.0]: -1.0,
        ...1000000.0,
        m(a5, a6) {
            const v7 = super[0.22445841069119388];
            let v8;
            try { v8 = v7.getOwnPropertyDescriptor(this, this, v7); } catch (e) {}
            return v8;
        },
        __proto__: 1000000.0,
    };
    return o9;
}
const v10 = f0();
f0();
const v12 = f0();
try {
    new Uint16Array(4096);
} catch(e16) {
}
try {
    new Float32Array(4096);
} catch(e20) {
}
try {
    new Uint32Array(3);
} catch(e24) {
}
function f25() {
    return 4096;
}
function f26() {
    return v10;
}
try {
    new Uint8Array(257);
} catch(e30) {
}
try {
    new Uint32Array(2322);
} catch(e34) {
}
try {
    new Int32Array(2904);
} catch(e38) {
}
for (let v39 = 0; v39 < 81; v39++) {
    [1384961384];
    [536870888,1073741824,1000,-9007199254740992,-4294967297];
    Object.defineProperty([-11,9007199254740990,-14,-7,-1024,9,2079031760,1000,-4,6], "a", { enumerable: true, set: f26 });
    %VerifyType(v12);
}
/(w[\cA])/idyv;
/va?[\cz]/siy;
/[^aa{1,2}?\ud808\udf45*(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10*]/dgyv;
