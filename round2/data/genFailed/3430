function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 15;
    this.d = 15;
    this.h = 15;
}
const v3 = new F0();
const v4 = new F0();
const v5 = new F0();
function f6() {
    return v3;
}
function f13(a14, a15) {
    const o39 = {
        set d(a17) {
            function f18(a19, a20, a21) {
                function f23(a24) {
                    const o25 = {
                        "apply": f6,
                        "call": f6,
                        "construct": f6,
                        "defineProperty": f6,
                        "get": f6,
                        "getOwnPropertyDescriptor": f6,
                        "getPrototypeOf": f6,
                        "isExtensible": f6,
                        "ownKeys": f6,
                        "preventExtensions": f6,
                        "set": f6,
                        "setPrototypeOf": f6,
                    };
                    new Proxy(a14, o25);
                }
                this.onmessage = f23;
                Object.defineProperty(this, 536870889, { writable: true, configurable: true, enumerable: true, get: f6, set: f6 });
                let v29 = 11;
                let v30 = v29++;
                Math.atan(v30);
                v30++;
                ++a17;
            }
            const v36 = ["function",a14,"function"];
            const o37 = {
                "arguments": v36,
                "type": "function",
            };
            new Worker(f18, o37);
        },
    };
    return o39;
}
f13(v4, v5);
f13(v5, v5);
const v42 = f13(v3, v4);
for (const v43 of 65537) {
    const v46 = 1213796242 * v3;
    let v47 = v42 | v46;
    const v48 = v47--;
    !v46;
    ++v47;
    v47 >> v48;
}
