const v2 = new Int32Array(3651);
const v5 = new Uint32Array(0);
const v8 = new BigUint64Array(204);
function f9(a10, a11, a12, a13) {
    const o18 = {
        [a13]: a10,
        ...v2,
        get d() {
            const v15 = [this,BigUint64Array,this];
            [Uint32Array,a10,v5];
            return [this,v15,204];
        },
        __proto__: v8,
        "e": a10,
        "f": Uint32Array,
    };
    return o18;
}
const v19 = f9(3651, 0, 3651, 3651);
const v20 = f9(204, 3651, 204, 204);
const v21 = f9(3651, 204, 0, 0);
Object.defineProperty(v8, 0, { writable: true, enumerable: true, get: f9, set: f9 });
const v22 = (a23, a24, a25) => {
    new WeakSet();
    return v5;
};
v20.__proto__?.[v19];
const v32 = 0 || 0;
Math.sinh(v32);
Math.cos(v32);
-v21;
Math.fround(-35443);
f9--;
+f9;
function f0() {
    const o9 = {
        "h": 256,
        p(a5) {
            const v7 = Symbol.species;
            a5[v7] = this;
            v7.description;
            return this;
        },
        [256]: 329213.2131463494,
        "f": 329213.2131463494,
        3289: 256,
        "c": 329213.2131463494,
    };
    return o9;
}
f0();
f0();
const v12 = f0();
class C14 {
    #valueOf(a16, a17) {
        return;
        try {
            a16[true] = f0;
        } catch(e21) {
        }
        return a16;
    }
    static d = f0;
}
const v22 = new C14();
const v23 = new C14();
new C14();
try {
    new Int16Array(132);
} catch(e28) {
}
try {
    new Uint32Array(256);
} catch(e32) {
}
try {
    new BigUint64Array(7);
} catch(e36) {
}
132 | v22;
for (const v38 of v12) {
    continue;
    try {
        v23.length = 2;
    } catch(e40) {
    }
}
try {
    new f0();
} catch(e42) {
}
