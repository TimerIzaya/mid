let v1 = "Kt";
let v2 = -3.0;
class C3 {
    m(a5) {
        v1.length;
        v1 = this;
        a5[5] = 2n;
        [-1000000000000.0,777.7085256176188,1000000000.0,2.220446049250313e-16,7.929181912056974e+306,-3.9811416935517344e+307,3.0];
        const v11 = [-4.0,-3.640639854572248,-0.0,-3.0,283333.60029409337,-2.2250738585072014e-308,-1000000000.0,0.7294456296870988];
        [-2.2250738585072014e-308];
        return v11;
    }
    #b = 435870736;
    #c = v1;
    static #g = v2;
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
let v20 = 3642;
function f22() {
    return 4;
}
let v23 = [v15,-536870912];
const v24 = [C3,435870736,4,v1,v15];
let v25 = [v24,v24,v2,v20,9007199254740992];
v25 -= v23;
try { v14.m(v25, 9007199254740992, v15, C3); } catch (e) {}
for (let v27 = 0; v27 < 82; v27++) {
    9007199254740992 / v13;
    Object.defineProperty(v1, "g", { writable: true, configurable: true, enumerable: true, get: f22 });
    try { v24.concat(); } catch (e) {}
}
[v2,v20] = v23 = v24;
v24.b = v2;
class C3 {
    10000;
    valueOf(a5) {
        let v7;
        try { v7 = this["o"]("o"); } catch (e) {}
        [[v7],a5,[this],v7,1.7976931348623157e+308];
        return 1000000000.0;
    }
    static get h() {
        return Reflect.construct(this, [], -673221.6859755057);
    }
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
function f18() {
    return 1000000000.0;
}
class C22 extends f18 {
    #c = C3;
    constructor(a24, a25) {
        super();
        try { a25.valueOf(f18, 1.7976931348623157e+308, a24, 1000000000.0, -673221.6859755057); } catch (e) {}
        const o30 = {
            valueOf() {
                this[this];
                function f29() {
                    return 1000000000.0;
                }
                return 1.7976931348623157e+308;
            },
        };
    }
    static #h = v16;
}
new C22(-673221.6859755057, C22);
new C22(1000000000.0, v15);
new C22(-673221.6859755057, v15);
for (const v34 of v17) {
    typeof v34 === "function";
    ("function")[1];
}
C22[5];
