const v5 = new Int32Array(3813);
const v8 = new Float64Array(7);
const v11 = new Uint8ClampedArray(629);
/a{0,1}?/gyiu;
/a|bc/gyv;
const v14 = /Q5/gmysu;
v8.length = 7;
v8.a = 629;
const o15 = {
    ...v5,
    "b": Uint8ClampedArray,
    "e": 4096n,
    ...v5,
    ...v11,
};
const v17 = [o15];
Reflect.apply(v14.compile, o15, v17);
const v0 = [3,-2013420375,-268435456,-1024];
const v1 = [-57796,8];
const v2 = [9,1719286426,-16111,7];
const v4 = [-774628.9476852355,-4.0,-935.965434574096];
const v5 = [-1000000000.0,4.532517929445007,9.531128183084952,-2.220446049250313e-16];
const v6 = [1000000000000.0,-302.60630926671865,2.0,-8.142925440272301e+307,-3.0,-2.0,3.0,-6.370594593835467e+307];
[v0,v0,v6,v4];
const v9 = [v6,[v1,v6,v2,v2],v4];
const v10 = [40,6,1,64,10,127,9223372036854775807,1000,-4294967295];
[-9007199254740991,-13,54228];
const v12 = [-1604971896,-26944,58700,1135193396,17959];
let v13;
try { v13 = v0(v0, v0, v4, null); } catch (e) {}
v5[v6] &= v13;
try {
    v12.length = v13;
} catch(e14) {
}
v6 % v10;
let v16;
try { v16 = v13(v2, v9, v1); } catch (e) {}
Object.defineProperty(v4, "length", { enumerable: true, value: v16 });
