function f3() {
    return -268435456;
}
class C4 {
    121869958 = f3;
    static 2 = f3;
    static #h;
    static #a = -268435456;
    valueOf(a6, a7) {
        [Infinity,-303.65304757874094,3.0,-557665.4239394756,-131.95179171285474,-430036.9935039696,2.2250738585072014e-308];
        [-5.9878666253323445,-1.6797871968792434e+308,5.0,178028.54893517727,-5.0,-5.0,2.2250738585072014e-308,-2.220446049250313e-16];
        return [2.4115401485009457e+307,2.0];
    }
    constructor(a12, a13) {
        let v14 = 0;
        while (v14 < 9) {
            super.h = a12;
            d = f3;
            try {
                const o17 = {
                };
                this.valueOf(this, o17, 1349823815);
            } catch(e19) {
            }
            v14++;
        }
    }
}
const v21 = new C4(1349823815, 256);
new C4(-268435456, 1349823815);
new C4(256, -268435456);
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = C4;
    this.d = v21;
}
new F24(F24, 1349823815);
new F24(1349823815, 1349823815);
const v30 = new F24(F24, -268435456);
new Float32Array(5);
new Uint8ClampedArray(623);
new Int16Array(16);
const v42 = Reflect.construct(F24, [1349823815,-268435456], Float32Array);
v30[Symbol.split];
[-12,51130,1000,795434832,-1024,-1018123479,3];
[-128,536870888,481248199,3,24142,16,-2147483649,1483866825];
[-65537];
try { v42(); } catch (e) {}
try {
    new Uint16Array(143);
} catch(e3) {
}
try {
    new Float32Array(7);
} catch(e7) {
}
try {
    new Uint32Array(512);
} catch(e11) {
}
try {
    new Uint8Array(3608);
} catch(e15) {
}
try {
    new Uint32Array(1000);
} catch(e19) {
}
try {
    new Float64Array(152);
} catch(e23) {
}
try {
    const t25 = 3608;
    t25[14] = Float32Array;
} catch(e24) {
}
for (const v25 of Uint16Array) {
    let v26;
    try { v26 = v25(Uint8Array, v25); } catch (e) {}
    try { v25(Uint8Array, v26, v25, 1000, v26); } catch (e) {}
    [-268435456,31823,1073741823,-65535,6722,2,268435440,-738484203,-53939];
    [-1566048242,10,268435456,-9];
    [-27603,-63417,-30561];
}
