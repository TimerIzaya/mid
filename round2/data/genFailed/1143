[4294967296,931764436];
const v7 = [931764436,931764436];
[v7,v7];
new Uint32Array(2);
new Uint8Array(2271);
const v20 = new Uint8ClampedArray(2);
const v21 = v20 - -3n;
try { new Uint8Array(...v7, ...Uint8ClampedArray, -3n, v21); } catch (e) {}
const v23 = `
    function F24(a26, a27, a28) {
        if (!new.target) { throw 'must be called with new'; }
        this.e = 2;
        this.a = a27;
        this.g = 2;
    }
    new F24(-3n, -8.198637307049468, -15n);
    new F24(-15n, 4.0, -3n);
    new F24(v21, -8.198637307049468, -15n);
`;
eval(v23);
try {
    new Int32Array(9);
} catch(e3) {
}
try {
    new Int32Array(4);
} catch(e7) {
}
try {
    new Int8Array(2989);
} catch(e11) {
}
const v20 = [3.5725485812972337,[-2.2250738585072014e-308]];
const v21 = [Int32Array,Int32Array];
for (let [,v22,v23,v24] of v20) {
    [2.0,NaN,0.15441022693536277,-0.8692324101448996,5.0,1000000000.0,-2.220446049250313e-16];
    [907662.4911857019,0.8132942387339593];
    [0.14246091441163822,-869217.5675274607,-847051.9009685458,8.215297208464829,1000000000.0,305.56151297348833];
}
const v28 = v20.length;
try { v20.every(-12, v21); } catch (e) {}
v28[5] = v21;
[-56860,8];
[-990,536870887,2071248960,-4294967295,-1261330654,-61473];
[9007199254740991,9007199254740992,7,11,268435456,0];
