const v0 = [536870888,-1,4294967295,-4,2147483647,268435440,536870889,-3];
const v1 = [-1984293030,7714,-13888,-1574056264];
const v2 = [19913,14,-1024,8,0,-34887,-14];
class C3 {
    #a;
    static #c = v1;
    static {
        try { new v1(v0); } catch (e) {}
    }
    [v0];
    static #h;
    constructor(a7) {
        try {
            a7.#a;
        } catch(e9) {
        }
    }
    static [v1];
}
new C3(v2);
new C3(v1);
const v12 = new C3(v0);
const v15 = new Int16Array(16);
new Int16Array(3360);
const v21 = new Uint8ClampedArray(64);
v21.valueOf = v15;
v2[v12] = v12;
for (let [v25,v26,...v27] of v15) {
    v25 = v27;
    try { v26(v26, 3360, Int16Array); } catch (e) {}
}
try { v0(v12, 3360, 64); } catch (e) {}
function f3() {
    return 1178587860;
}
try {
    new Uint16Array(16);
} catch(e7) {
}
try {
    new Int32Array(5);
} catch(e11) {
}
try {
    new Int16Array(0);
} catch(e15) {
}
class C16 extends Int32Array {
    static h;
    static get c() {
        super[16];
        try {
            new Uint16Array(1178587860);
        } catch(e20) {
        }
        return 5;
    }
    static #g = f3;
    static #b = Int32Array;
    d;
    0 = f3;
}
new C16();
new C16();
const v23 = new C16();
class C24 extends f3 {
    [v23];
    6 = Uint16Array;
    static 255 = f3;
    static [5];
}
new C24();
new C24();
const v27 = new C24();
new Int16Array(v27, 5, 1178587860);
