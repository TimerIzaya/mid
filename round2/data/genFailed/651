[1073741823];
const v1 = [-8,-1239425580,50611,1318,65535,1072951620,9007199254740992,-65536];
[2,-256];
new Int8Array(257);
new Int8Array(1106);
const v11 = new BigInt64Array(5);
const v12 = [5,v11,Int8Array];
Object.defineProperty([[v1,BigInt64Array,v11,v12,v12],Int8Array,257,257,5], "length", { writable: true, value: v12 });
let v15 = 10;
for (; v15--;) {
    v1.f = Int8Array;
    const v17 = v11[4];
    v1 | v17;
    const v20 = Symbol.replace;
    v17[v20] = v20;
}
let v3 = [-1e-15,-599242.7075624083,-2.0];
const v4 = [-490.95007594091135,-540.8310645443423,-866225.2841002592,-4.0,1000000000000.0,899.4871871096113,0.0,-9.804292094321451e+307];
const v5 = [114343.38868590258,1000000000.0,0.25566667518877395,0.0,-3.8076090042342706e+307];
class C6 {
    m(a8, a9, a10, a11) {
        const v12 = super[this];
        function F14(a16, a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a11;
            } catch(e19) {
            }
            try {
                this.d = a16;
            } catch(e20) {
            }
        }
        const v21 = new F14(a11, v12, 10);
        new F14(a9, v3, 1073741823);
        new F14(v4, v3, 1073741823);
        return v21;
    }
}
new C6();
const v25 = new C6();
new C6();
try {
    new Float32Array(1265);
} catch(e30) {
}
try {
    new BigInt64Array(2028);
} catch(e34) {
}
try {
    new Int32Array(2);
} catch(e38) {
}
try {
    v3 = v5;
} catch(e39) {
}
for (let [v40,v41,v42,v43] of v4) {
    new C6();
}
v25[Symbol.split] = BigInt64Array;
