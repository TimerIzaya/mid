const v2 = new Int8Array(1000);
const v5 = new Uint8Array(5);
const v8 = new Float64Array(10);
class C9 {
    static {
        super[this] = 10;
        this[this] = Int8Array;
    }
    static 9;
    9;
    get f() {
        new Float64Array(5, 5, 1000);
        try {
            super.splice(this, this, this, v8, v8);
        } catch(e17) {
        }
        return Int8Array;
    }
}
new C9();
const v19 = new C9();
const v20 = new C9();
function f21() {
    return v19;
}
new BigInt64Array(13);
new Uint8Array(1754);
const v30 = new Uint32Array(2);
Object.defineProperty(v5, v2, { enumerable: true, set: f21 });
if (v20 <= 5) {
    try { v8.at(13); } catch (e) {}
} else {
    Object.defineProperty(v30, "a", { writable: true, enumerable: true, get: f21, set: f21 });
    new f21();
}
try {
    new Uint8Array(v19, 13, -14);
} catch(e36) {
}
class C3 {
    toString(a5, a6) {
        this / -9007199254740992;
        function f8() {
            return a6;
        }
        return a6;
    }
    [-4294967295];
    static #c = -9007199254740992;
    static [64];
    static [-4294967295];
}
const v9 = new C3();
new C3();
let v11 = new C3();
const v12 = [48729];
[1073741824,65477,65536];
[45724,1804977151,-2,-536870912,1000,-268435456,1073741824,-61268,-268435456,16];
const v15 = [268435439,-533380413,-128,256,-1024];
const v16 = [1,-6];
const v17 = [9223372036854775807,9007199254740992,1164298747,129,1000];
const o18 = {
    ...v15,
    [C3]: v11,
};
o18 - v12;
try { v16(v11, 64, v11, v11); } catch (e) {}
delete v17[536870888];
64 / v9;
[C3,v11,...C3] = v12;
