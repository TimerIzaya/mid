class C3 {
    static #m(a5, a6) {
        a5 + (a5?.b in a6);
        (-5.0) ** -5;
        Math.trunc(-5);
        Math.pow(-5.0, -839044587);
        -268435440 << -5;
        return Math.sign(-5.0);
    }
}
new C3();
new C3();
new C3();
function f23() {
    return -3.0127267110942846;
}
new BigInt64Array(6);
new Int32Array(64);
new Uint8ClampedArray(16);
const o35 = {
    "maxByteLength": 3159497605,
};
const v37 = new ArrayBuffer(2303, o35);
new Float64Array(v37);
new Uint8Array(257);
new Uint16Array(2371);
new Int32Array(128);
try {
    new Uint16Array(4096);
} catch(e3) {
}
try {
    new Float32Array(185);
} catch(e7) {
}
try {
    new Float32Array(1);
} catch(e11) {
}
class C12 {
    static a = 4096;
    #m(a14, a15, a16, a17) {
        %VerifyType(a15);
        const v18 = this[65535];
        const v19 = this[a16];
        let v20;
        try { v20 = v19.setUTCHours(1, Uint16Array, a16, this, v19); } catch (e) {}
        const v21 = v18?.[4294967295];
        let v22;
        try { v22 = v20.valueOf(Uint16Array, v20, a16, a17, v21); } catch (e) {}
        return v22;
    }
    static #g;
    [Float32Array];
    #f;
}
const v23 = new C12();
new C12();
const v25 = new C12();
try {
    new Float32Array(128);
} catch(e29) {
}
try {
    new BigUint64Array(825);
} catch(e33) {
}
try {
    new Float32Array(935);
} catch(e37) {
}
try {
    v25.fuck(-3.0, C12, 1, 935);
} catch(e40) {
}
const v41 = C12[Float32Array];
v41.__proto__;
try {
    v23[5] = v41;
} catch(e43) {
}
