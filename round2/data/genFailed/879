const v2 = new Array(1537);
function f3() {
    return v2;
}
const v4 = [Infinity,0.5939305934754872,0.0252683891203328,6.234159072651072e+306,-1000000000.0,-2.0,0.04071437793312527,-2.0,-3.0];
const v5 = [1.7976931348623157e+308,4.0];
let v6 = [-2.2250738585072014e-308,575254.0182925272,-1e-15,-111.27667052475454,-1.7976931348623157e+308,-5.0];
class C7 extends f3 {
    static m(a9, a10, a11, a12) {
        let v15 = 1024;
        let v16 = v15 << v15;
        v15 / v15--;
        v15 ** 1440;
        Math.log(v16++);
        return a9;
    }
    static #b = v5;
    h;
    [-1];
}
const v22 = new C7();
let v23 = new C7();
const v24 = new C7();
class C25 {
    [1537] = v5;
    f = v5;
    valueOf(a27, a28, a29) {
        super[a27] = v23;
        a29[7];
        [4294967295,268435439,39371,10000,255,-1538768209];
        [536870889,-15,3,1662721395,392914334,-23792,53240,-2147483649,10];
        [-6,-1024];
        return a27;
    }
    h;
    static [1537] = 1537;
    240;
    #a;
    static 268435439;
}
new C25();
const v35 = new C25();
const v36 = new C25();
new C7(v35 >>> v36, ...v2, C7, v36, ...v5);
v23 = v4;
v6 = v22;
v24[512] = v24;
try { Array.from(C7, Array, v2); } catch (e) {}
const v41 = new Set();
v36 == v41 ? v36 : v41;
function f0() {
}
try {
    new Float64Array(231);
} catch(e4) {
}
try {
    new BigUint64Array(5);
} catch(e8) {
}
try {
    new Uint8Array(64);
} catch(e12) {
}
const v13 = [3.0,0.14987632797631267];
const v14 = [4.0,-1000000000000.0,-8.79774568183028,-1e-15];
[-3.0,-2.4320013715844047,2.0,-201522.0848555048,-0.0];
class C16 extends Float64Array {
    6 = Float64Array;
    p(a18, a19) {
        return delete this?.buffer;
    }
    static #e = 231;
    [v14] = Uint8Array;
    set f(a22) {
        const o25 = {
            "maxByteLength": 127,
        };
        const v27 = new SharedArrayBuffer(127, o25);
        try {
            new Float32Array(v27);
        } catch(e30) {
        }
    }
}
const v31 = new C16();
const v32 = new C16();
const v33 = new C16();
try {
    v31[f0] = v31;
} catch(e34) {
}
const v35 = v32[10];
async function f36(a37, a38, a39, a40) {
    'use strict';
    v13[Symbol.split];
    await C16;
    return a39;
}
f36(v33, v35, 64, 231);
