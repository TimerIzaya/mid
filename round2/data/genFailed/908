let v2 = -443.0239390631788;
class C3 {
    valueOf(a5, a6) {
        function f7(a8, a9, a10, a11) {
            ("16")[65535];
            v2 = a5;
            return a8;
        }
        const t8 = f7("16", a6, 4294967295, a5);
        t8[0] = this;
        return a5;
    }
    1942 = 4294967295;
    #b = "16";
    ["16"] = 4294967295;
    [v2] = v2;
}
const v14 = new C3();
const v15 = new C3();
new C3();
new Int32Array(0);
const v23 = new Int32Array(4003);
const v26 = new Uint32Array(6);
v26 << true;
v2 &= "16";
delete v15[0];
v23[Symbol.toPrimitive] = "16";
let v32 = -1749530802;
Math.cos(v32);
const v34 = ++v32;
Math.expm1(v32);
v32 && ~v14;
Math.hypot(v34);
Math.sin(v34);
class C3 {
    [-3];
    static #e;
    static valueOf(a5) {
        try {
            this.fuck("r", 2, 56842, "valueOf");
        } catch(e11) {
        }
        return a5;
    }
    [24938.748611616786];
}
const v12 = new C3();
new C3();
new C3();
try {
    new Int32Array(255);
} catch(e18) {
}
try {
    new Float32Array(73);
} catch(e22) {
}
try {
    new Int8Array(15);
} catch(e26) {
}
[2.220446049250313e-16,-2.220446049250313e-16,6.459363035500964,-1000000000000.0,-1000000000.0,-Infinity,-5.0,691.3707107443377,-3.0,-2.220446049250313e-16];
[-1.7710053472000751e+307,-912.2106452661278,47848.8280841622,0.4430036498870388,-0.27935973377686985,-4.0];
[-541.2570657953408,1000000000000.0,5.0,-2.220446049250313e-16,-1.2467196111881398e+308,967.6875833773313,-621.1249245324575,-3.843024305417454e+306];
let v30;
try { v30 = v12(Int8Array); } catch (e) {}
Reflect.construct(v30, [Reflect], Int32Array);
-Infinity;
