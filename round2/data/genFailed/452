const v2 = new Array(4);
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a5;
}
new F3(v2);
let v7 = new F3(v2);
new F3(v7);
Object.defineProperty("hasInstance", F3, { writable: true, enumerable: true, get: Array });
Math.asin("C9rXl");
"hasInstance" / "hasInstance";
Math.sinh("hasInstance");
-"hasInstance";
+-1073741824;
v7 >>= v7;
v2[Symbol.unscopables];
try {
    new BigUint64Array(1718);
} catch(e3) {
}
try {
    new Uint32Array(3);
} catch(e7) {
}
try {
    new Uint16Array(7);
} catch(e11) {
}
class C12 extends Uint16Array {
    static f = 1718;
    static #b = 7;
    static g;
    1426;
    c;
    static n(a14, a15) {
        Math.max(Uint16Array);
        -4294967295;
        ~347492.16351857176;
        Math.atanh(Uint16Array);
        const v23 = !347492.16351857176;
        v23 >>> v23;
        return Uint16Array;
    }
}
new C12();
new C12();
new C12();
const v31 = [4294967296,1718,-1024,C12,BigUint64Array];
const v32 = [Uint32Array,-9223372036854775807];
[v32,v32,Uint16Array,-9223372036854775807];
let v34 = 0;
while (v34 < 8) {
    try {
        v31.length = 1718;
    } catch(e37) {
    }
    v34++;
}
