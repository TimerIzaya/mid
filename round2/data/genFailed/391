function f12(a13, a14) {
    function f16(a17) {
        ("cause")["trimRight"]();
        const o23 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o23);
    }
    this.onmessage = f16;
    try {
        new f16(f16);
    } catch(e26) {
    }
}
const v29 = ["function",43011n];
const o30 = {
    "arguments": v29,
    "type": "function",
};
new Worker(f12, o30);
function f3(a4, a5) {
    const o12 = {
        set c(a7) {
            g = a7;
            delete a5[this];
            const t4 = "message";
            delete t4?.length;
            this[Symbol.search] = "bigint";
        },
        [a5]: a4,
        "d": "undefined",
    };
    return o12;
}
f3("bigint", "undefined");
f3("bigint", "bigint");
f3("message", "bigint");
const v16 = [-336.85445387163054,109.7915227903818,0.28615168868326957];
[5.0,-4.0,0.06182985464739421];
[1.577912003337484e+308,402433.89513944974,-1.3611731892883387,1.6610912835432136e+308,4.897754333611067,9.597475066533057e+307,-2.220446049250313e-16,0.49370642228349493];
v16[Symbol.hasInstance];
for (let [v22,v23,v24] of v16) {
    typeof v22 === "symbol";
}
[] = v16;
new Set();
