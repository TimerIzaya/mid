let v6 = 1827;
new Float32Array(v6);
let v9 = 13;
new Uint32Array(v9);
const v14 = new Uint8ClampedArray(5);
for (const v15 of v14) {
    [,v6,...v9] = "bigint";
}
[v6];
const v20 = [v9,"toString"];
["toString"];
v20 in v6;
let v0 = -2147483647;
let v1 = 1000000000.0;
class C3 {
    static set e(a5) {
        try {
            v1 >>= v1;
        } catch(e6) {
        }
        super.a;
        try { a5.acosh(v1); } catch (e) {}
    }
    #p(a10, a11) {
        try {
            a11 = a10;
        } catch(e12) {
        }
        try {
            v0 = -4294967296;
        } catch(e13) {
        }
        return -4294967296;
    }
}
const v14 = new C3();
const v15 = new C3();
const v16 = new C3();
const v18 = new WeakSet();
class C19 {
    constructor(a21, a22) {
        b = v18;
    }
    static valueOf(a27, a28) {
        class C29 extends WeakSet {
            9;
            5;
            [v14];
        }
        new C29();
        new C29();
        new C29();
        return C29;
    }
}
const v33 = new C19(C19, v14);
const v34 = new C19(v0, C19);
new C19(v33, v34);
let v38 = "h";
if (v14["a"]) {
    try {
        v38 &&= v14;
    } catch(e43) {
    }
} else {
    v16 || 1000000.0;
    v15[Symbol.matchAll];
}
