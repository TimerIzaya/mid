const v0 = [];
let v3 = "bigint";
class C4 {
    #b = v3;
    constructor(a6, a7) {
        function f8() {
            return v3;
        }
    }
    268435440;
    valueOf(a10, a11) {
        v3 &= v3;
        const o14 = {
            "maxByteLength": 1569,
        };
        const v16 = new ArrayBuffer(10, o14);
        new Int16Array(v16);
        return Int16Array;
    }
}
const v19 = new C4("-55054", v3);
const v20 = new C4(C4, "-55054");
new C4(v20, "-55054");
new Uint8Array(3165);
new Uint8ClampedArray(485);
new Float32Array(8);
C4.__proto__ = v0;
const v31 = delete C4?.__proto__;
let v32;
try { v32 = v31(v31, v31, 485, 8, v3); } catch (e) {}
v19.length = 0;
v31.valueOf = v32;
throw v31;
const v37 = !485;
const v38 = v31 / v31;
-219114803;
219114803 || v37;
Math.asinh(Float32Array);
+v38;
let v1 = 0.49814525167744994;
class C6 {
    #p(a8, a9, a10) {
        try {
            super[1e-15] = 1.7976931348623157e+308;
        } catch(e11) {
        }
        return this;
    }
    constructor(a13, a14, a15) {
        var a = 1000000000000.0;
        v1++;
        try {
            a13[a13] = -1340065064;
        } catch(e20) {
        }
    }
}
new C6(16, 16, -1340065064);
const v22 = new C6(1.7976931348623157e+308, 16, 16);
const v23 = new C6(C6, v1, -1340065064);
function F24(a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a26;
    } catch(e29) {
    }
    try {
        this.e = a27;
    } catch(e30) {
    }
}
new F24(C6, -1340065064, v1);
const v32 = new F24(v23, v1, 536870912);
new F24(v32, 536870912, -1340065064);
for (const v34 of v23) {
    ("d").length;
    ("d")[128];
}
try { v22(F24); } catch (e) {}
const v41 = new C6(C6, 536870912, 16);
try {
    C6[10] = v41;
} catch(e42) {
}
