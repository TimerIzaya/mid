[745445.8478889428];
const v1 = [-211024.05385677074,-2.220446049250313e-16,-1000000.0,0.8775007934012025,1.7976931348623157e+308,-4.485437786044628];
const v2 = [-827024.9090323655,0.355223261768299,-4.0];
const v6 = [-1.1392893317913159e+308,-1000000000000.0,-1000000000.0,0.8104891011122802,-921979.1869569904,3.0];
const v7 = [1000000000.0,203.66701224016538,-1000000000000.0];
const v8 = [0.26754536627727654,0.12688263631399876,1.0,-762.0277316321922,-3.7747781365712925];
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = v7;
    this.a = a14;
}
new F9(v2, 4n, 8n, 8n);
const v16 = new F9(F9, 4n, 4n, 8n);
const v17 = new F9(v2, 8n, 8n, 4n);
for (let v18 = 0; v18 < 32; v18++) {
    v6.valueOf = v18;
    const v20 = [v18,v17];
    Reflect.apply(v8.find, v16, v20);
}
v1[Symbol.matchAll];
function f3() {
    return 536870888n;
}
[-1.2677721787144396e+308];
[2.2250738585072014e-308,2.220446049250313e-16,4.117073857277159,-470.58346223145395,1.4683456498763103];
[-5.0,2.0,162364.45758993225];
[-9223372036854775808,4294967295,4,-1789013091,-4294967297,-5,3];
[-2,255,5,3,1024,-1444250277,224600366,256,7,257];
[-256,4294967297,-570415945,9007199254740991,10,-1614292099,-33065,-58022,-22450];
let v17 = 6;
const v18 = --v17;
Math.exp(9007199254740992n);
~f3;
Math.log1p(v18);
Math.expm1(v18);
~v18;
const o26 = {
    "maxByteLength": 82,
};
const v28 = new SharedArrayBuffer(22, o26);
try {
    new Int16Array(v28);
} catch(e31) {
}
