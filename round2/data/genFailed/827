let v3 = 7;
const v5 = new Int32Array(v3);
const v8 = new BigInt64Array(64);
new BigInt64Array(128);
let v12 = delete v5?.byteLength;
v12 = Int32Array;
v3 = 64;
const o13 = {
    ["wRvR"]: v8,
    "d": "3",
    "b": v8,
    "f": "Sj",
};
const o16 = {
    "maxByteLength": 65536,
};
const v18 = new ArrayBuffer(141, o16);
new BigUint64Array(v18);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -16;
    } catch(e3) {
    }
    try {
        this.f = -16;
    } catch(e4) {
    }
}
const v5 = new F0();
new F0();
const v7 = new F0();
class C8 {
    #p(a10) {
        try {
            super[this] = a10;
        } catch(e11) {
        }
        try {
            new F0();
        } catch(e13) {
        }
        return a10;
    }
    static #a;
}
const v14 = new C8();
new C8();
new C8();
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a24;
    } catch(e26) {
    }
    try {
        this.b = a23;
    } catch(e27) {
    }
}
const v28 = new F20(C8, v5, -16n, C8);
const v29 = new F20(v14, v7, -39840n, v28);
new F20(v14, v7, -9007199254740990n, C8);
for (let [v34] of v29[Symbol.species]) {
    try {
        new Float64Array(3);
    } catch(e38) {
    }
    try {
        new Int32Array(1);
    } catch(e42) {
    }
    try {
        new Uint32Array(128);
    } catch(e46) {
    }
}
