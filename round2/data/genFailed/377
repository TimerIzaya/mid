const v3 = ["asyncIterator","asyncIterator"];
const v4 = [v3];
const v5 = [v4,"number","number",v4,v3];
const v8 = new Uint32Array(2806);
const v11 = new Uint32Array(64);
new BigInt64Array(127);
const v15 = new BigInt64Array(v5);
v8.valueOf = v15;
const v16 = v5 % v11;
new Uint32Array(v8);
const v18 = 64 > "0";
v18 ? 64 : "0";
const v21 = [["0",v18,v15,v16,2806],Uint32Array];
[v11,v3,v11];
v21[4] &&= v16;
try {
    new Uint32Array(2900);
} catch(e3) {
}
try {
    new Uint16Array(7);
} catch(e7) {
}
try {
    new BigInt64Array(3958);
} catch(e11) {
}
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = Uint16Array;
    } catch(e16) {
    }
    try {
        this.g = a14;
    } catch(e17) {
    }
    try {
        this.h = BigInt64Array;
    } catch(e18) {
    }
}
new F12(7, 2900);
const v20 = new F12(2900, 7);
const v21 = new F12(3958, 2900);
for (const v22 of v21) {
    v20[v22];
    try {
        b.e = v21;
    } catch(e25) {
    }
}
let v26;
try { v26 = Uint32Array(7, 2900, 3958); } catch (e) {}
try { v26(v26, v26, 3958); } catch (e) {}
