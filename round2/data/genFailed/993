let v0 = "F";
class C3 {
    constructor(a5, a6) {
        v0 / this;
    }
    static {
        v0[3] = this;
        this.d = this;
        v0 = "g";
        let {"d":v9,...v10} = this;
    }
    #h = "g";
    static #e;
}
const v11 = new C3("g", v0);
const v12 = new C3(v11, v11);
const v13 = new C3(C3, "g");
class C14 {
    65537 = C3;
    m(a16, a17, a18, a19) {
        const v20 = this != v12;
        v20 ? this : v12;
        v0 * v20;
        return v13;
    }
    static [v11] = v0;
    [v0];
    [v11] = v0;
    static 10 = v0;
}
let v23 = new C14();
new C14();
new C14();
for (const v26 in v11) {
    C14[v26];
    const v28 = new C3(v26, "b");
    v28[2] = v23;
}
v13.g = v11;
("b").length;
++v23;
typeof v13 === "undefined";
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -50473;
    } catch(e3) {
    }
    try {
        this.c = -50473;
    } catch(e4) {
    }
}
const v5 = new F0();
new F0();
new F0();
try {
    new Float32Array(249);
} catch(e14) {
}
try {
    new Int32Array(5);
} catch(e18) {
}
try {
    new BigUint64Array(16);
} catch(e22) {
}
let v25 = v5[Symbol.split];
new BigUint64Array(-4294967295, -4105);
const o29 = {
    valueOf() {
        try {
            v25 += Int32Array;
        } catch(e28) {
        }
        return -4294967295;
    },
};
