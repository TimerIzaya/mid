const v2 = new Array(1681);
new Uint32Array(1370);
new Uint8ClampedArray(3);
const v11 = new BigInt64Array(1668);
v11[536870888n] = Uint8ClampedArray;
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = Uint32Array;
    this.f = 1370;
}
new F15(1370, 3, Uint8ClampedArray);
const v21 = new F15(-9223372036854775807n, 1681, 1370);
new F15(v21, 3, v2);
for (let v23 = 0; v23 < 100; v23++) {
    Array(3);
}
const v6 = [-4.0];
[-481.09774220315705,5.0,-20251.828594659804];
const v8 = [-2.220446049250313e-16,-6.983130092404508,4.680495355209925e+307,-4.581389726307923,3.0034426137602885,-1.6390400993380668e+308,-2.2250738585072014e-308];
try {
    new Int16Array(255);
} catch(e12) {
}
try {
    new Float32Array(7);
} catch(e16) {
}
try {
    new Int8Array(109);
} catch(e20) {
}
const v21 = [7,62449,v8,4n,4n];
const v23 = [v8,[109,v21]];
let v24;
try { v24 = v23.shift(); } catch (e) {}
const v25 = v6[2];
v25[-1] <<= v25;
v21 instanceof Float32Array;
const v28 = v24 ** delete v24?.g;
try { v25(255, v28, v23, v28, v28); } catch (e) {}
