const v0 = [-649504911,1073741824,536870887,6,1073741825,-41538,713374536];
const v1 = [7,-54723,-56257,2147483649,21899,7,1];
const v2 = [-14713,7,64,-9223372036854775808,23049,2147483648,65537,65200,-25592,-1073741824];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a5;
}
const v6 = new F3(v2);
const v7 = new F3(v1);
const v8 = new F3(v2);
function f15(a16, a17, a18, a19) {
    const o27 = {
        __proto__: a17,
        set h(a21) {
            super[this] = a18;
            return a21;
            let v22;
            try { v22 = v7.trim(this, a21, a19); } catch (e) {}
            try { new v22(a21, v22); } catch (e) {}
            const v24 = a16 << a19;
            try { a17["is"](v24, "is", "is"); } catch (e) {}
        },
        ...a17,
        "e": v6,
        "c": v0,
        10: F3,
        [v2]: v6,
    };
    return o27;
}
const v28 = f15(22783, v6, v2, 1073741825);
f15(-9007199254740991, v6, v1, -9007199254740991);
const v30 = f15(-9007199254740991, v8, F3, -1);
function f31() {
    return 1073741825;
}
let v32;
try { v32 = v6.findIndex(v1, v2, -1, v30, v2); } catch (e) {}
let v33;
try { v33 = v28.p(22783, v28, v30); } catch (e) {}
Reflect.construct(F3, [v32], v33);
