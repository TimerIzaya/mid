function f0() {
}
const v1 = [1.8487261737504301,-1.7976931348623157e+308,-663103.6169892068];
const v2 = [-1000000000000.0,-0.0];
const v3 = [1e-15,2.0,647163.0572606269,2.220446049250313e-16,-1.539381955211777,1000000.0,1000000.0,1000.0];
for (let v13 = 0; v13 < 32; v13++) {
    v3["p" + v13] = v13;
}
Object.defineProperty(v2, f0, { writable: true, enumerable: true, get: f0 });
v1.length = 1;
try {
    new Int16Array(3);
} catch(e9) {
}
let v10 = 121;
try {
    new BigUint64Array(v10);
} catch(e13) {
}
try {
    new BigInt64Array(512);
} catch(e17) {
}
class C18 extends BigInt64Array {
    [-2];
    valueOf(a20, a21, a22, a23) {
        a20?.[3];
        try {
            super[1.7976931348623157e+308] = BigInt64Array;
        } catch(e25) {
        }
        return 1.7976931348623157e+308;
    }
    7;
    [9] = BigUint64Array;
    9 = 262.0515535247548;
    static 3;
}
const v26 = new C18();
new C18();
new C18();
v10 << v10;
const v32 = v10--;
Math.trunc(v10);
const v34 = ++v10;
v32 ^ BigUint64Array;
v32 % v32;
v34 instanceof Int16Array;
Object.defineProperty(v26, "byteOffset", { configurable: true, enumerable: true, value: 512 });
