new Uint16Array(1049);
const v5 = new Int16Array(512);
const v8 = new Uint8ClampedArray(2);
let v9 = /(x)(x)(x)\3*[x]?/y;
const v10 = /aJ+/msdv;
let v11 = /a+b|c+/yv;
class C12 {
    static set d(a14) {
        this[Symbol.toPrimitive];
    }
    static n(a22, a23, a24) {
        v11 >>= v9;
        v9 <<= a24;
        const v27 = Symbol.iterator;
        const o36 = {
            [v27]() {
                let v29 = 10;
                const o35 = {
                    next() {
                        v29--;
                        const v33 = v29 == 0;
                        const o34 = {
                            "done": v33,
                            "value": v29,
                        };
                        return o34;
                    },
                };
                return o35;
            },
        };
        return v5;
    }
}
new C12();
const v38 = new C12();
new C12();
v5[4179598832] = 512;
for (const v40 in v38) {
    v38.g = v40 === v40;
}
v9.a = 1049;
v8["some"](Uint8ClampedArray, ..."some", ..."some", ..."some", Uint8ClampedArray, v10);
try { C12.n(C12, 1049); } catch (e) {}
new BigInt64Array(14);
new Float64Array(111);
new Uint32Array(127);
