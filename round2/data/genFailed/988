const v2 = new BigUint64Array(110);
let v5 = new BigUint64Array(9);
const v8 = new Uint16Array(4096);
function f9(a10, a11, a12, a13) {
    const o15 = {
        __proto__: v2,
        "h": a13,
        268435441: 4096,
        1000: Uint16Array,
        "f": a11,
        ...v8,
        get e() {
            ({"byteLength":a12,"length":v5,} = v5);
            return this;
        },
        [a13]: v5,
    };
    return o15;
}
const v16 = f9(BigUint64Array, v2, 9, 4096);
const v17 = f9(BigUint64Array, v16, 9, 4096);
const v18 = f9(BigUint64Array, v8, 4096, 4096);
const v20 = [v17];
Reflect.construct(BigUint64Array, v20, BigUint64Array);
const o22 = {
    __proto__: v16,
    "h": BigUint64Array,
    "d": v20,
    [-2]: Reflect,
};
const o23 = {
};
o23.g = v16;
const o24 = {
};
o24.g = v16;
o24.c = v18;
const o25 = {
};
o25.g = v16;
o25.c = v18;
o25.f = v5;
const o26 = {
};
o26.g = v16;
o26.c = v18;
o26.a = v8;
class C3 {
    255 = "10";
    static toString(a5, a6) {
        691881.341311266 >>> a5;
        function f8() {
            return this;
        }
        return a5;
    }
    static c = "10";
    static o(a10) {
        try {
            super.c = "10";
        } catch(e11) {
        }
        let v14 = 88328.4013821152;
        const v15 = v14++;
        Math.hypot(13);
        Math.round(13);
        Math.cbrt(v15);
        Math.round(13);
        !v14;
        return 691881.341311266;
    }
}
new C3();
const v22 = new C3();
const v23 = new C3();
try {
    new Uint16Array(4);
} catch(e27) {
}
try {
    new Int8Array(163);
} catch(e31) {
}
try {
    new Uint8Array(6);
} catch(e35) {
}
[C3,Uint16Array];
const v37 = [691881.341311266,"10",691881.341311266,61426];
[6,v37,v22,v37];
const o39 = {
    __proto__: v23,
    1000: v37,
    "c": 6,
    ["10"]: v23,
};
/(?:ab|cde)[s(?:a{5,1000000}){3,1000000}]/sdgv;
/a*?{12,/smy;
/(10s?)/idgmu;
[921932.5290711685,NaN,-2.2250738585072014e-308,-763.3091073163885,217.6602129956034,-6.426433258339654e+307,-1e-15,0.3139683504885129,0.46554888957081997];
[NaN,-1000000.0,-416.05465472163974,-3.733256578816806];
[-1e-15,1000000000000.0,-767.0659832518978,-142741.4675004261,2.0,2.220446049250313e-16,3.0];
