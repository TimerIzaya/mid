const v6 = [240.13241933293398,-1.0,-8.924175898689395,1000000.0,-1.3443722652509998e+307,1e-15];
[1.6671185012694387,-1.0,543343.8118580068,-1000000000000.0,2.220446049250313e-16,-1.0,2.889099777903385e+307,338197.32081992854];
const v8 = [NaN,NaN,-5.0,4.0,0.3485910399536577,0.8087804698343795,0.14975756401869023,2.2250738585072014e-308,-4.0,71.12503174544486];
class C9 {
    constructor(a11, a12, a13) {
        v8.length;
        const o17 = {
            "maxByteLength": 255,
        };
        const v19 = new SharedArrayBuffer(73, o17);
        new Uint32Array(v19);
    }
    512;
}
new C9(v8, 268435440, 268435440);
new C9(v6, 16221, -9007199254740990);
const v24 = new C9(v6, -9007199254740990, 129);
delete v24[536870889];
try {
    const v27 = new Array(129);
    new C9(v27, 1, 1068718960);
} catch(e31) {
}
const o35 = {
    "execution": "async",
    "type": "minor",
};
gc(o35);
class C3 {
    #c = 15;
    constructor(a5, a6) {
        this ** a5;
        try {
            a6.#c = a5;
        } catch(e8) {
        }
        try {
            a6.h = this;
        } catch(e9) {
        }
    }
    static c;
}
const v10 = new C3(-403259.0532123095, 5.0);
const v11 = new C3(5.0, C3);
const v12 = new C3(v11, 5.0);
const v13 = [-1073741824,5,1256945175,8];
[-1024,-45669,8,4294967297,4294967296,-128];
[9,-58742,536870912,1073741823,-30952,9,-14];
try {
    new Int32Array(9);
} catch(e19) {
}
try {
    new BigUint64Array(205);
} catch(e23) {
}
try {
    new Uint32Array(7);
} catch(e27) {
}
let v29;
try { v29 = v11["toString"](v12, Int32Array); } catch (e) {}
new BigUint64Array(v11, 7, 7);
for (const v31 of v13) {
    v31 | v31;
    v10[BigUint64Array];
}
const v34 = new Uint32Array(-403259.0532123095, 205, v10, BigUint64Array, 205, v29);
let [v35] = v34;
("toString")[v13];
