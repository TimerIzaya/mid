const v3 = [-4294967295];
const v4 = [536870912,14955,64];
const v5 = [-1073741824,-4,-6,-41146,12,9007199254740992,39012,-28548,-4294967297];
class C7 {
    a;
    static #g;
    static 3 = v4;
    constructor(a9, a10) {
        try { v5.flat(44213n); } catch (e) {}
        try {
            a9.#g;
        } catch(e13) {
        }
    }
    #h;
    0;
    7 = null;
    static #a;
}
new C7(v5, v3);
new C7(v5, v4);
const v16 = new C7(v5, v4);
[9007199254740990,536870889,2147483649,1073741824,128,-65537];
[-11,1485799490,16,4294967297,-16,9,-11535,-48115];
[28813,2147483648,714498978,-4294967297,954578431];
const v21 = Symbol.isConcatSpreadable;
v3[v21];
if (v21 == v16) {
    let v26 = 4294967296;
    const v28 = !v26;
    Math.sin(null);
    const v30 = v28 >>> v26;
    Math.trunc(++v26);
    Math.asinh(v30);
} else {
    let v36 = 10000;
    44213n ^ 44213n;
    let v39 = !v36;
    v36++;
    let v41 = v39--;
    v41 ** 7n;
    v41--;
}
