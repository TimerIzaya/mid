function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = a5;
    this.a = 781493.7111936207;
    this.f = -5.0;
}
const v6 = new F3(781493.7111936207);
const v7 = new F3(781493.7111936207);
new F3(-5.0);
v6[-5.0] *= -955514145;
for (const v12 of v6) {
    [[4294967297,v12,781493.7111936207,[v7,781493.7111936207,781493.7111936207,v12],v12],v12];
    v12?.[4];
    -1.0 && 10;
}
const o18 = {
};
new Proxy(v6, o18);
const v4 = new Map();
function f5() {
    return v4;
}
[-8.916953367278525e+307,-1e-15,6.664459649732262,0.12693544596088469,0.42697465972443116,-368.710941799353,0.2505453311325333,896.381248113323,0.7321682584140929,6.670890871526627];
[-1.4362512015124624e+308,5.124311129432488,2.220446049250313e-16,490469.6689091574];
[0.41022648699367437,-1.7976931348623157e+308];
function f9() {
    return v4;
}
class C10 extends f9 {
    o(a12, a13, a14, a15) {
        [242328756,255,13,-212947156,-2003631659,10,2053465335,1073741824,536870888,-65537];
        [129,-128,-738380498,803438090,2147483647,802702638,-12,-9];
        [65536,10,6];
        return v4;
    }
    c = Map;
    #toString(a20, a21) {
        try {
            new Float64Array(172);
        } catch(e25) {
        }
        try {
            new BigUint64Array(257);
        } catch(e29) {
        }
        try {
            new BigUint64Array(255);
        } catch(e33) {
        }
        return 1000;
    }
}
new C10();
new C10();
new C10();
try {
    new Int16Array(2);
} catch(e40) {
}
try {
    new BigInt64Array(16);
} catch(e44) {
}
try {
    new Uint8ClampedArray(127);
} catch(e48) {
}
const v49 = [-1273630331,128,7,-65537,49026];
[128,4294967297,-65537,2055256742,42039,8348,-39362,-128];
[-1073741824,-4294967295,354736510,-256,64];
const o52 = {
    "apply": f5,
    "call": f5,
    "construct": f9,
    "ownKeys": f5,
    "preventExtensions": f5,
    "set": f5,
};
try {
    new Proxy(v49, o52);
} catch(e55) {
}
