function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a6;
}
const v7 = new F3(-870421559, 4294967296);
new F3(-870421559, F3);
new F3(4294967296, F3);
/Cr/g;
/a\sca\W/du;
const v12 = /(e)/gmyiu;
function f16() {
    return v12;
}
let v17;
try { v17 = ("FP").padEnd(4294967296, "shift"); } catch (e) {}
for (const v18 in v7) {
    v18 !== v18 ? v18 : v18;
    const t16 = "shift";
    t16.toString = v17;
}
const o21 = {
    "defineProperty": f16,
    "get": f16,
    "getOwnPropertyDescriptor": f16,
    "isExtensible": f16,
    "ownKeys": f16,
    "preventExtensions": f16,
    "set": f16,
};
new Proxy(v17, o21);
let v5 = "hC";
try {
    new BigInt64Array(7);
} catch(e10) {
}
try {
    new Int32Array(1220);
} catch(e14) {
}
try {
    new Float32Array(3);
} catch(e18) {
}
class C19 extends Int32Array {
    constructor(a21, a22, a23, a24) {
        super(a23);
        try {
            v5 = "c";
        } catch(e25) {
        }
    }
    c = 7;
    static 769;
    #n(a27, a28, a29) {
        const o30 = {
            __proto__: this,
            ..."Da1T",
            "a": this,
        };
        this[v5] &= a28;
        return 632914920;
    }
}
new C19("Da1T", 632914920, 7, "Da1T");
new C19("c", 1220, -10, v5);
let v33 = new C19(v5, 632914920, 7, "Da1T");
try {
    v33 ^= v33;
} catch(e34) {
}
const v35 = new BigInt64Array(v33, v33, ...v5, C19);
try {
    const o36 = {
    };
    v35.findLast(C19, o36);
} catch(e38) {
}
