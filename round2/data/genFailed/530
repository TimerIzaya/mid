class C3 {
    #n(a5, a6) {
        a6[Symbol.isConcatSpreadable] = a6;
        return this;
    }
    static #valueOf(a10) {
        let v11;
        try { v11 = new a10(a10, a10, this, ..."-42167"); } catch (e) {}
        return v11;
    }
    #g = "-42167";
    #c;
    static 11 = "number";
    ["number"];
    #f;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
class C15 extends C3 {
    d;
    set e(a17) {
        let [v18,v19,v20,...v21] = "-42167";
        /jzU\cj\cJ\ci\cI\ck\cKuC(ab|cde)/yidv;
        /(ab|cde)\1a[bc]dAa{0,1}?0[a-zA-Z0-9]\p{Script=Greek}+/iu;
        /(?:a*)*(\1a)/isu;
    }
    [v14] = "number";
    m(a26, a27, a28, a29) {
        this[49] = v12;
        Object.defineProperty(v13, this, { configurable: true, enumerable: true, value: v14 });
        Math.max(40725n);
        C3--;
        Math.log2(40725n);
        Math.ceil(-15);
        ~-15;
        return v13;
    }
}
new C15();
const v41 = new C15();
const v42 = new C15();
/a2/ysdu;
const v44 = /e/mys;
/R(?<=a)?/yisu;
function f46(a47, a48, a49) {
    const o69 = {
        [a48]: 8,
        n(a51, a52, a53) {
            new C15();
            new Set();
            return a48;
        },
        get f() {
            new Set();
            new Int16Array(1409);
            new Uint16Array(147);
            const v68 = new BigInt64Array(2563);
            return v68;
        },
    };
    return o69;
}
f46(v14, v42, C3);
const v71 = f46(v42, v13, C3);
f46(v41, v42, v44);
new Array(7);
v71[512];
const o80 = {
    "apply": f46,
    "call": Array,
    "construct": Array,
    "defineProperty": Array,
    "deleteProperty": Array,
    "get": f46,
    "getOwnPropertyDescriptor": Array,
    "getPrototypeOf": f46,
    "isExtensible": f46,
    "ownKeys": f46,
    "preventExtensions": f46,
    "setPrototypeOf": Array,
};
new Proxy("-42167", o80);
try {
    new Float32Array(8);
} catch(e3) {
}
try {
    new Uint8Array(3811);
} catch(e7) {
}
try {
    new Uint8Array(2257);
} catch(e11) {
}
class C15 extends Float32Array {
    set h(a17) {
        8 < 8;
        try {
            this[10] = 3811;
        } catch(e19) {
        }
    }
    [2257] = 257n;
    static [Float32Array] = Float32Array;
    static #e = 3811;
    a = -5n;
}
new C15();
new C15();
const v22 = new C15();
C15 + v22;
const o24 = {
};
try {
    o24.d = 2257;
} catch(e25) {
}
try {
    const o26 = {
    };
    o26.d = 2257;
    o26.f = 2147483649n;
} catch(e27) {
}
try {
    const o28 = {
    };
    o28.d = 2257;
    o28.f = 2147483649n;
    o28.e = Uint8Array;
} catch(e29) {
}
try {
    const o30 = {
    };
    o30.d = 2257;
    o30.f = 2147483649n;
    o30.c = v22;
} catch(e31) {
}
