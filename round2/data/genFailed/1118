const v2 = new Uint16Array(10);
new BigUint64Array(2824);
new Float64Array(3547);
new Map();
class C11 extends Float64Array {
    static toString(a13, a14, a15) {
        return a13 < 3547 ? a13 : 3547;
    }
    get a() {
        function f19() {
            return 10;
        }
        [4294967297,-7,10,-2233,15];
        [-9007199254740992];
        return [-50770,6,1303792011,16,-4096];
    }
}
new C11();
new C11();
new C11();
new BigInt64Array(5);
new Float64Array(99);
new Uint16Array(103);
new BigInt64Array(v2, 10, 3547);
let v0 = /\x0f?/idyv;
const v1 = /[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/sv;
const v2 = /a+b/idgu;
const v4 = new Map();
class C5 extends Map {
    set f(a7) {
        a instanceof a7;
        try {
            v0 = a;
        } catch(e10) {
        }
    }
    static [v4] = Map;
    128 = v2;
    #h;
    [-1] = v4;
}
const v11 = new C5();
const v12 = new C5();
const v13 = new C5();
class C14 extends Map {
    constructor(a16, a17, a18, a19) {
        super(a18);
        try {
            C5 |= Map;
        } catch(e20) {
        }
    }
    static p(a22, a23) {
        !v1;
        return v2;
    }
}
const v28 = new C14(C5, v12, v4, v13);
const v29 = new C14(v28, Map, C5, v12);
new C14(v12, v2, v13, v11);
Object.defineProperty(v29, v0, { writable: true, enumerable: true, value: v13 });
try { C14.p(v28, v28, v1, v29); } catch (e) {}
const v35 = v12 + 34867;
const v36 = +v13;
v12 | v13;
Math.log(v36);
~v35;
Math.asinh(v13);
