function f3(a4, a5) {
    const o20 = {
        n(a7) {
            function f8(a9, a10, a11) {
                function f13(a14) {
                    a14.__proto__ = this;
                }
                this.onmessage = f13;
                a11 = a7;
            }
            const v17 = [a7,a5,Worker];
            const o18 = {
                "arguments": v17,
                "type": "function",
            };
            new Worker(f8, o18);
            return this;
        },
    };
    return o20;
}
f3(23835, 62245);
f3(-268435456, 23835);
const v23 = f3(-268435456, 62245);
function f27() {
    return v23;
}
const v30 = new Float64Array(73);
const v33 = new Float32Array(7);
const v36 = new Uint8ClampedArray(178);
if (v30 >= v36) {
    try {
        f27();
    } catch(e39) {
    }
} else {
    new Float32Array(v33);
    new Float32Array(-268435456, 23835);
    v36[f3] %= -268435456;
}
function f0() {
}
function f1() {
    return f0;
}
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a4;
    } catch(e5) {
    }
    try {
        this.b = f1;
    } catch(e6) {
    }
}
const v7 = new F2(f1);
const v8 = new F2(v7);
const v9 = new F2(v7);
try {
    new Uint32Array(257);
} catch(e13) {
}
try {
    new Float64Array(151);
} catch(e17) {
}
try {
    new Int16Array(8);
} catch(e21) {
}
function f22() {
    return F2;
}
function f23(a24, a25, a26) {
    const v27 = /SzSabc|def|ghi/sdguy;
    /xabc|def|ghi/sgyv;
    /C\P{Any}foo[z]*/sidg;
    const v31 = [a24];
    const v32 = v27.test;
    Reflect.apply(v32, v7, v31);
    return v32;
}
f23(v9, v8, v7);
