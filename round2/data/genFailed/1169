new Uint8ClampedArray(0);
new Uint8ClampedArray(257);
new Int8Array(498);
const v14 = new BigUint64Array(10);
const v17 = new BigInt64Array(3538);
new Uint8ClampedArray(127);
function f21(a22) {
    return v14;
}
class C23 extends f21 {
    #c = -1951;
    static #e;
    [Int8Array] = 257;
    #f;
}
v17[268435440] = 257;
class C3 {
    [-256] = "MIN_VALUE";
    3188 = -65535;
    2 = "MIN_VALUE";
    valueOf(a5, a6) {
        this.a &&= a6;
        super[-65535];
        a6.g &= -65535;
        try {
            const t9 = "MIN_VALUE";
            t9.__proto__ = "MIN_VALUE";
        } catch(e8) {
        }
        return this;
    }
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
class C12 extends C3 {
    static g = v11;
    constructor(a14, a15) {
        super();
        function F16(a18, a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v10;
            } catch(e22) {
            }
            try {
                this.a = "MIN_VALUE";
            } catch(e23) {
            }
            try {
                this.g = -65535;
            } catch(e24) {
            }
        }
        new F16(v11, a14, C3, v10);
        new F16(a15, this, this, v10);
        new F16(this, C3, a14, a15);
    }
}
new C12(C3, C3);
const v29 = new C12(v10, v10);
new C12(v29, v29);
const v31 = "MIN_VALUE" != C12;
v31 ? "MIN_VALUE" : C12;
with (v9) {
    const v34 = v29 & v31;
    v34 + v34;
    let v38 = 536870888;
    const v40 = +v10;
    const v41 = ~v38;
    ~v40;
    v41 || v38--;
    Math.cos(v10);
}
