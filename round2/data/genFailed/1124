function f0() {
}
const v1 = [2.220446049250313e-16,-2.0,3.021003144204588e+307,-1.6048766195616293e+308,-1000.0,-191.24375630599627,5.109592952487737e+307];
const v2 = [1000000000000.0,NaN,-980.8884625364975,695.7855052011162,-1.0,0.7382838590642776,-2.0180461165823477e+306,1.6755446207344082,1000.0];
[4.0,6.698223341893353,0.3080690378223204,-6.39080758519891,-1e-15,1.0,9.581864209958686e+307,-3.6550333085027927e+307,1e-15,Infinity];
function f4() {
    return v1;
}
class C5 {
    static c = v2;
    static #valueOf(a7, a8) {
        v1[Symbol.asyncIterator];
        return a8;
    }
    static #h;
    #e = f4;
    static 239 = f0;
    c = v1;
    static #g = f0;
}
const v12 = new C5();
const v13 = new C5();
const v14 = new C5();
let v15 = 16n;
C5[-796064380n] = v14;
let v18;
try { v18 = v14.p(v15, v12); } catch (e) {}
v15 -= v18;
v13[2583083933] += v18;
v12[4] **= v18;
for (let v19 = 0; v19 < 29; v19++) {
    class C20 {
        #h = -796064380n;
    }
    new C20();
    new C20();
    new C20();
}
try {
    new Uint32Array(7);
} catch(e3) {
}
try {
    new Uint8Array(1);
} catch(e7) {
}
try {
    new Float64Array(128);
} catch(e11) {
}
class C12 extends Float64Array {
    #b;
    static #toString(a14, a15) {
        try {
            this.__proto__ = this;
        } catch(e16) {
        }
        return Uint8Array;
    }
    static [Uint32Array];
    #c;
    [128] = 128;
    10;
}
new C12();
const v18 = new C12();
new C12();
const v27 = 0.0 - 2147483648;
const v28 = ~0.0;
~v27;
Math.expm1(v28);
Math.cbrt(2147483648);
Math.log(v27);
+v18;
