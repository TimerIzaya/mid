let v1 = "length";
class C3 {
    [-1000.0] = v1;
    constructor(a5) {
        v1 instanceof a5;
        a5 % v1;
        let v10 = 2.0;
        let v11 = --v10;
        Math.exp(this);
        v10 << v11;
        ++v11;
        --v1;
    }
    static 3 = -1000.0;
}
const v16 = new C3(0.4350614166488085);
const v17 = new C3(v16);
const v18 = new C3(v17);
class C19 extends C3 {
    #d;
    toString(a21, a22, a23, a24) {
        let v25;
        try { v25 = this(a22, this, a21); } catch (e) {}
        try {
            v25.#d ^= a22;
        } catch(e26) {
        }
        return this;
    }
    static valueOf(a28, a29, a30) {
        a30 % a29;
        a28[C3] <<= -1000.0;
        a29.valueOf = a30;
        v16 >>> a30;
        let {"g":v33,} = this;
        return v16;
    }
}
const v34 = new C19();
let v35 = new C19();
const v36 = new C19();
let v37 = Date;
new v37();
/fxyz??/gmsdv;
const v40 = /o(\xed\xb0\x80)\x01?/yidv;
/XB3/ysdv;
v37[v40] = -1000.0;
v37 = v18;
const v42 = delete v34?.a;
let v43;
try { v43 = v36.toString(v42, v42, v34, v42); } catch (e) {}
v43 instanceof v43;
try {
    v36[8];
    ~0.4350614166488085;
} catch(e47) {
    try { v1.valueOf(v36); } catch (e) {}
    v35--;
}
const v1 = new Set();
function f2() {
    return v1;
}
try {
    new Uint16Array(1788);
} catch(e6) {
}
try {
    new Int32Array(19);
} catch(e10) {
}
try {
    new Float32Array(1024);
} catch(e14) {
}
class C15 extends Float32Array {
    static {
        v1["entries"]()[Symbol.iterator];
        v1[6] **= 19;
        throw v1;
        f2();
    }
    2 = Float32Array;
    static [-1];
    [Set] = 19;
    static b;
    static h = Uint16Array;
}
new C15();
new C15();
new C15();
[-6753,14,1024,-1192533147,268435440,4,-39923];
[62556792,8];
[28894,-2147483648,-536870912];
f2();
%PrepareFunctionForOptimization(f2);
f2();
f2();
%OptimizeMaglevOnNextCall(f2);
f2();
try {
    f2();
} catch(e34) {
}
