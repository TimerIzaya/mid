new BigUint64Array(512);
const v9 = new Uint32Array(1);
const v12 = new Float64Array(255);
let v13 = 0;
do {
    const v15 = Symbol.unscopables;
    v12[v15];
    let v17;
    try { v17 = v9.fill(v9, 65537, 65537); } catch (e) {}
    v17[6] = v15;
    v13++;
} while (v13 < 4)
try {
    new Int16Array(128);
} catch(e6) {
}
let v8 = Uint16Array;
try {
    new v8(10);
} catch(e10) {
}
try {
    new Uint32Array(127);
} catch(e14) {
}
class C15 {
    get e() {
        try {
            v8 *= v8;
        } catch(e17) {
        }
        return 3;
    }
    2561 = 9007199254740991;
    get f() {
        function f19(a20, a21, a22, a23) {
            const o24 = {
                __proto__: this,
                "b": a23,
                "a": Uint32Array,
            };
            return o24;
        }
        f19(127, 9007199254740991, 127, 10);
        const v26 = f19(10, 10, 128, 10);
        f19(128, 10, 9007199254740991, 127);
        return v26;
    }
}
new C15();
new C15();
const v30 = new C15();
class C31 extends Uint32Array {
    constructor(a33, a34, a35) {
        super(a34, 128, 128);
        Math.atanh(0);
        Math.atan(!128);
        128 << Int16Array;
    }
    [128];
    39268549 = 10;
    #a = v8;
}
const v44 = new C31(3, C15, 128);
const v45 = new C31(Uint32Array, C15, 10);
const v46 = new C31(v45, v30, v8);
let v48 = -13071;
9007199254740991 / 9007199254740991;
Math.cosh(9007199254740991);
++v48;
36057 >> v48;
delete v30?.f;
128 >>> 10;
try {
    v46.__proto__ = v44;
} catch(e56) {
}
