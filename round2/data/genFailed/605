const v0 = [1.7976931348623157e+308,-2.0];
const v1 = [212.55145124695264,Infinity,-0.0,-5.612365795137154e+307,-1.1307117054394e+308,4.450382868927614,-1000.0,-1000000000.0,2.220446049250313e-16];
[-98.06418930658458,1.0];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a5;
    this.c = v1;
}
new F3(v1, v1);
new F3(v1, v1);
new F3(v1, v1);
class C13 extends F3 {
    get b() {
        /S/gyisv;
        /Sxyz{0,1}Da[^a]1(x)(x)(x)\3*/misu;
        /a.Mxyz{1,}?/sd;
        return v0;
    }
    o(a19, a20, a21, a22) {
        try { a20.copyWithin(a22, a21, a22); } catch (e) {}
        129 / 129;
        let v29 = 129 + ~11;
        const v30 = ++v29;
        v29 % 65535n;
        return 11 * v30;
    }
}
new C13();
new C13();
new C13();
new Uint32Array(7);
new Float32Array(3);
new Float32Array(1024);
3 <= Float32Array;
const v49 = -9n;
Math.max(127);
Math.acosh(127);
const v52 = 127 * v49;
Math.max(65535n >> v52);
127 + v52;
function f3() {
    return 129;
}
try {
    new Uint32Array(230);
} catch(e7) {
}
try {
    new Float32Array(16);
} catch(e11) {
}
try {
    new Uint32Array(6);
} catch(e15) {
}
for (let [,v16,v17] of f3) {
    break;
}
for (let v18 = 0; v18 < 92; v18++) {
    try {
        v18[230] = 3;
    } catch(e19) {
    }
}
try {
    new Uint16Array(5);
} catch(e23) {
}
try {
    new Uint8ClampedArray(9);
} catch(e27) {
}
try {
    new BigUint64Array(83);
} catch(e31) {
}
