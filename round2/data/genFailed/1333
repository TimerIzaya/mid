new Float32Array(8);
new Int8Array(1);
const v8 = new Uint16Array(256);
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a14;
    this.g = 8;
    this.e = Int8Array;
}
const v16 = new F12(v8, -60190n);
const v17 = new F12(v16, -60190n);
const v18 = new F12(v17, 50665n);
for (let v19 = 0; v19 < 10; v19++) {
    v18[10];
    let [v21,v22,v23] = v8;
}
v17[7] = v16;
Math.sinh(903290369);
50665n ** 903290369;
-12 * 5.0;
try {
    new Uint8ClampedArray(0);
} catch(e3) {
}
try {
    new BigInt64Array(457);
} catch(e7) {
}
try {
    new Float32Array(512);
} catch(e11) {
}
function f16(a17, a18, a19) {
    const o24 = {
        set c(a21) {
            (a17 / a21) === 0;
        },
        ...a18,
        "h": 512,
        "e": a18,
        [BigInt64Array]: -1260526605,
        "b": a18,
        __proto__: BigInt64Array,
        "f": -4096,
        "a": -4096,
    };
    return o24;
}
const v25 = f16(-1, 512, 512);
const v26 = f16(512, -1260526605, -1260526605);
const v27 = f16(457, 512, 0);
972.7402958492198 >> v26;
Math.sinh(-2051897313);
-972.7402958492198;
Object.defineProperty(v27, "d", { configurable: true, enumerable: true, set: f16 });
v25[-4096];
[-1,1403870731,4294967295,48539];
[-4999,4,-13,1318864044,8,-4294967296,-1540454448];
[8,-869472713,268435441,-14,2072847596,65292,-65536,536870887,-268435456];
