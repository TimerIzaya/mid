/A(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\11/myid;
/[^mabc|def]/yisv;
const v2 = /a\cj\cJ\ci\cI\ck\cK/gmidv;
function f6() {
    return v2;
}
[2,14,-34216,268435440,2828,-36720,-4,127];
[2806,1124124678,7,790729278,-1781275280,-268435456];
[1000,255,14931];
f6();
%PrepareFunctionForOptimization(f6);
f6();
f6();
%OptimizeFunctionOnNextCall(f6);
f6();
function f17() {
    return f6;
}
Reflect.construct(f17, [], f6);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -13614;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
try {
    new Int8Array(3);
} catch(e13) {
}
try {
    new Float64Array(10);
} catch(e17) {
}
try {
    new BigInt64Array(1000);
} catch(e21) {
}
try {
    new Int8Array(2868);
} catch(e25) {
}
try {
    new Int16Array(1024);
} catch(e29) {
}
try {
    new Uint32Array(128);
} catch(e33) {
}
v4 in v6;
const v35 = [Int8Array,Int8Array,v5];
[Float64Array,Int8Array];
const v37 = [Int16Array,-536870912n,7n,v4];
v37 == v37 ? v37 : v37;
(Int16Array | 1073741824n) - 1000;
v35.length;
new Uint32Array(1024, 2868, 1000);
