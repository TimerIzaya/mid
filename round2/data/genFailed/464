[4.727055079463229,-1000000000000.0,-513418.68693423143,-1e-15,-2.0];
[-1000000.0,2.0,-3.6073562942073334,396661.5716673848,517117.9605858945,-1000000.0];
const v2 = [-1000000.0,496.4556378537652,-1.750775654884744e+308,-1e-15,-3.0,7.150264271072071,4.0,199.3687221332284,-935.3473131777987,-2.0];
let v3 = Map;
new v3();
const v7 = new BigUint64Array(3438);
const v10 = new Float32Array(222);
const v13 = new Int16Array(173);
const v15 = v13["sort"]("sort");
v2.a = 173;
v2["sort"] = v2;
let v16 = 0;
do {
    v10.byteOffset = v15;
    [v3] = v10;
    v7[3];
    new Int8Array(255);
    new Uint8ClampedArray(127);
    new BigInt64Array(10);
    v16++;
} while (v16 < 8)
new WeakMap();
try {
    new Uint32Array(257);
} catch(e5) {
}
try {
    new Uint16Array(2500);
} catch(e9) {
}
try {
    new Uint16Array(3901);
} catch(e13) {
}
function f14() {
    return WeakMap;
}
[Infinity,-1.385209269250849e+308,0.0];
const v16 = [1000000.0];
const v17 = [0.0,3.0,-107449.19713867281,-5.228060895953539,5.0];
class C18 extends Uint32Array {
    static #m(a20, a21, a22, a23) {
        let v24;
        try { v24 = a20.filter(f14, a23); } catch (e) {}
        for (let v25 = 0; v25 < 32; v25++) {
            v24["p" + v25] = v25;
        }
        return v16;
    }
    #b;
    9 = 3901;
    e = v17;
    static #e;
}
const v28 = new C18();
const v29 = new C18();
const v30 = new C18();
try {
    v17.length = 3901;
} catch(e31) {
}
let v34 = "get";
({"buffer":v34,"f":v34,"length":v34,} = v28);
let v35;
try { v35 = C18.construct(2500, v29, v17, v30); } catch (e) {}
v17 - v35;
