[8,-9223372036854775807,39491,10,292153392,20151,-12];
[-4294967296,-8,257,2147483649,6,2,-128,-4294967295,7];
const v2 = [1865664646,13718,4,-536870912,2,-4294967295,16,-128];
[8.793766279468688,-Infinity,-5.184360720369254e+307,NaN,0.41671534675664457,-215981.06154808577,-725253.7058098018];
[-654663.8567838338,-4.52484502395121];
const v5 = [-1e-15,3.0,218.83432978158476];
class C6 {
    static #n(a8, a9, a10) {
        super[a8];
        a10 >>= v2;
        this[2];
        new Int16Array(5);
        new Uint8ClampedArray(22);
        new Uint32Array(3);
        return v5;
    }
}
new C6();
const v23 = new C6();
new C6();
const v28 = delete v23?.c;
for (let i30 = 0; i30 < 8; i30++) {
    let v36;
    try { v36 = new v28(i30, C6, i30, -2, -2); } catch (e) {}
    v36.g = v36;
    Reflect.construct(v36, [v36,v28,v36], C6);
}
try {
    new Uint8ClampedArray(6);
} catch(e3) {
}
try {
    new Uint16Array(484);
} catch(e7) {
}
try {
    new Int8Array(1758);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    static 2;
    static [Uint8ClampedArray];
    1 = Uint16Array;
    constructor(a14, a15) {
        super(a14, a14, 1758);
        try {
            super.d = 484;
        } catch(e16) {
        }
    }
    #b = 1758;
    #e;
}
new C12(6, 1758);
new C12(1758, 484);
new C12(1758, 1758);
-159320.76499809592 >> Int8Array;
class C24 extends Int8Array {
    6;
    a = 1758;
    #f;
}
new C24();
new C24();
new C24();
