new BigUint64Array(206);
const v5 = new Float32Array(8);
const v8 = new BigUint64Array(202);
/a+?1a\fb\nc\rd\te\vfXV[x]/yidv;
/33?/su;
const v14 = /(?:a+)?3(a\n)/mys;
if (-42506.51611108158 > v5.with(v14, ...v8, BigUint64Array, v14, Float32Array, v14)) {
    new BigUint64Array(v8, 8, 202);
} else {
    const v18 = 202 >>> BigUint64Array;
    try {
        new BigUint64Array(v18, -25980);
    } catch(e21) {
    }
}
function f0() {
    const o9 = {
        3384: -2029393177,
        "g": -2029393177,
        "f": 268435441,
        get d() {
            const v5 = /yxyz{0,1}*/dmu;
            /[^7]/sv;
            /a\fb\nc\rd\te\vf\xf0\x9f\x92\xa9/dgmu;
            v5[this];
            return this;
        },
        "h": 2.2250738585072014e-308,
        "d": 2.2250738585072014e-308,
        "e": 2.2250738585072014e-308,
        "b": -2029393177,
    };
    return o9;
}
const v10 = f0();
let v11 = f0();
const v12 = f0();
function f13() {
    return v12;
}
class C14 {
    static #toString(a16, a17) {
        ({"g":v11,} = a16);
        try { new a17(a17, a16, f0, a16); } catch (e) {}
        try {
            this.#toString(this);
        } catch(e20) {
        }
        return v12;
    }
    static #p(a22) {
        const v23 = v11?.[this];
        function F24(a26, a27, a28) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a26;
            } catch(e29) {
            }
            try {
                this.a = v12;
            } catch(e30) {
            }
            try {
                this.b = a26;
            } catch(e31) {
            }
        }
        const v32 = new F24(this, F24, this);
        const v33 = new F24(v23, v32, f13);
        const v34 = new F24(v32, v33, f13);
        return v34;
    }
}
new C14();
new C14();
const v37 = new C14();
class C38 extends C14 {
    7;
    static get f() {
        try {
            new Uint8ClampedArray(16);
        } catch(e43) {
        }
        try {
            new BigInt64Array(3733);
        } catch(e47) {
        }
        try {
            new Uint8Array(735);
        } catch(e51) {
        }
        return Uint8ClampedArray;
    }
}
const v52 = new C38();
new C38();
new C38();
let v58;
try { v58 = v10.setMilliseconds(v52, f13, -14326, 65536); } catch (e) {}
v52 / C14;
function f60(a61, a62, a63, a64) {
    const o68 = {
        "execution": "sync",
        "type": "minor",
    };
    return gc(o68);
}
f60(v12, v58, -14326, v37);
