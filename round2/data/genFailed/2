const v1 = new Set();
class C2 extends Set {
    e;
    static set g(a4) {
        try {
            this.n(true, undefined);
        } catch(e8) {
        }
    }
    constructor(a10, a11) {
        super(a10);
        try {
            this.delete(v1);
        } catch(e13) {
        }
        super[this];
        this["forEach"](a10, "forEach");
    }
}
let v17 = new C2(v1, Set);
const v18 = new C2(Set, v17);
const v19 = new C2(Set, v18);
function f20() {
    return v19;
}
2147483649 > 2147483649;
v17 -= v17;
for (const v31 of v18) {
    let {"e":v32,"size":v33,} = v19;
    v18.size = v33;
    [0.13883303590820883,-937136.4945697674,1.0,-0.0,-7.553771269408682];
    [2.0,8.884386900972313,0.6767366428888022,0.252504901423769,2.0,Infinity,0.49832515720655424,-1.7976931348623157e+308,-544521.340021441,-2.0];
    [0.9938283465761208,-1000000.0,-9.960837859212279e+306,0.5304447355164253,0.10872223125794778,1.7976931348623157e+308,79.05459856650691,-570651.4169554585];
}
new Array(4096);
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -4294967295;
    } catch(e3) {
    }
    try {
        this.a = -4294967295;
    } catch(e4) {
    }
}
const v5 = new F0();
new F0();
const v7 = new F0();
const v8 = [F0,v7];
[v5];
[v5];
try {
    const t18 = "undefined";
    t18.h = v8;
} catch(e17) {
}
const v18 = v5.a;
const v19 = v18 - "c";
try { v18("valueOf", v8, F0, v19); } catch (e) {}
let v21;
try { v21 = v18("a", v7); } catch (e) {}
v21.__proto__;
try {
    new Float32Array(6);
} catch(e26) {
}
try {
    new BigUint64Array(11);
} catch(e30) {
}
try {
    new BigUint64Array(16);
} catch(e34) {
}
