let v0 = true;
const v3 = new Uint16Array(6);
new Uint8ClampedArray(7);
const v9 = new Float32Array(4);
class C10 extends Uint8ClampedArray {
    4290772540;
    set d(a12) {
        for (let v14 = 0; v14 < 49; v14++) {
            new Int16Array(14);
            new Uint8Array(2325);
            new Uint32Array(16);
        }
    }
}
new C10();
const v25 = new C10();
const v26 = new C10();
Object.defineProperty(v26, "d", { enumerable: true, value: v9 });
v0 ||= v0;
const o30 = {
};
o30.a = v3;
const o31 = {
};
o31.a = v3;
o31.g = C10;
const o32 = {
};
o32.a = v3;
o32.g = C10;
o32.f = 7;
const o33 = {
};
o33.a = v3;
o33.g = C10;
o33.f = v25;
let v2 = 773011477;
class C9 {
    b = v2;
    #e;
    [-2147483648n];
    static p(a11, a12) {
        let v13;
        try { v13 = this.toGMTString(a12, -916678801n, this, a11, a12); } catch (e) {}
        try {
            v13.#e ||= a12;
        } catch(e15) {
        }
        return v13;
    }
    static d = 6;
    static 70421084 = -916678801n;
}
new C9();
const v17 = new C9();
new C9();
let v19 = 3.0;
C9[Symbol.isConcatSpreadable] = -1000000000.0;
({"a":v19,"b":v2,"c":C9,} = v17);
try {
    v17.b = -2147483648n;
} catch(e24) {
}
C9 + -536870912n;
try {
    v17.b = -1000000000.0;
} catch(e26) {
}
