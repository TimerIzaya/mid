let v11 = new Int8Array(0);
new BigInt64Array(67);
const v17 = new Uint8ClampedArray(8);
for (let v18 = 0; v18 < 32; v18++) {
    v17["p" + v18] = v18;
}
-32770n * "EPSILON";
v11 = v17[128];
var a = Uint8ClampedArray;
"Vn" == "symbol";
function f0() {
}
class C1 {
    valueOf() {
        try {
            super.toString(f0, this, this);
        } catch(e4) {
        }
        return this;
    }
    h = f0;
    static [f0];
    #h = f0;
    static #b = f0;
    f;
    #g;
    b;
}
new C1();
const v6 = new C1();
const v7 = new C1();
try {
    new Int8Array(3446);
} catch(e12) {
}
try {
    new Int16Array(6);
} catch(e16) {
}
let v17 = 6;
try {
    new Float64Array(v17);
} catch(e20) {
}
class C21 {
    static c;
    m(a23, a24, a25) {
        try {
            v6[536870889] = v7;
        } catch(e26) {
        }
        return C1;
    }
    get d() {
        v17 + null;
        return C1;
    }
    [f0] = Int16Array;
    #c = v6;
}
const v29 = new C21();
new C21();
const v31 = new C21();
new Int16Array(v7, v17);
const v33 = v29 && C21;
let v34 = v31[C1];
const v35 = --v17;
try {
    v34 = Float64Array;
} catch(e36) {
}
let v37;
try { v37 = v6.valueOf(v35, f0, v33, v35, v33); } catch (e) {}
Reflect.construct(C21, [], v37);
