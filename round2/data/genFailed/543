const v0 = [];
-Infinity;
const v9 = new Int32Array(5);
new Uint16Array(15);
const v15 = new Uint8Array(3392);
const v16 = delete v0?.length;
%VerifyType("1024");
Object.defineProperty(v15, 2147483648, { writable: true, configurable: true, enumerable: true, value: Int32Array });
v15.byteOffset &&= 5;
try { v16(v9, "1024", v9, Uint8Array, Infinity); } catch (e) {}
try {
    new Uint8Array(12);
} catch(e20) {
}
const v0 = [25363,43960,65535,267150427,1,35235,-468871880,-19938,-16,536870889];
let v1 = [-43163];
let v2 = [-47181];
class C3 {
    #c;
    [v2];
    constructor(a5) {
        let v6;
        try { v6 = new a5(a5, this, a5); } catch (e) {}
        [,v1,v6,...v2] = v1;
        try {
            new Uint16Array(4096);
        } catch(e10) {
        }
        try {
            new Uint8Array(251);
        } catch(e14) {
        }
        try {
            new Int8Array(810);
        } catch(e18) {
        }
    }
}
const v19 = new C3(v0);
const v20 = new C3(v19);
const v21 = new C3(v20);
v21[-65535n] %= 7;
const v28 = C3.__proto__;
Math.log1p(-256);
Math.tan(v28);
v20 / v20;
const o36 = {
    "maxByteLength": 256,
};
const v38 = new SharedArrayBuffer(13, o36);
try {
    new Float32Array(v38);
} catch(e41) {
}
