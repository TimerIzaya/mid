class C3 {
    constructor(a5, a6) {
        a5.e += 9007199254740991;
        this[Symbol.species] = "mexJ";
        super[-4121];
    }
    [-4121];
    [9007199254740991] = "mexJ";
    0 = 9007199254740991;
    #b = "mexJ";
}
const v10 = new C3(C3, -4121);
const v11 = new C3(-4121, v10);
const v12 = new C3(v11, v11);
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = a17;
    this.a = "mexJ";
    this.b = a17;
}
const v18 = new F13(C3, C3, "mexJ");
const v19 = new F13(v18, v10, v12);
const v20 = new F13("mexJ", v19, v10);
Object.defineProperty(v12, "d", { value: v20 });
function f21(a22, a23) {
    const o24 = {
        "h": -4121,
        "c": F13,
        "b": v10,
        "g": C3,
    };
    return o24;
}
f21(f21(v10, v12), v20);
f21(v19, v19);
try {
    new Int16Array(1473);
} catch(e6) {
}
let v8 = Float32Array;
try {
    new v8(969);
} catch(e10) {
}
try {
    new Uint8ClampedArray(3229);
} catch(e14) {
}
function f15(a16, a17, a18) {
    const o31 = {
        n(a20, a21, a22, a23) {
            try {
                super[a17] = a17;
            } catch(e30) {
            }
            return v8;
        },
        4096: v8,
        "c": a16,
    };
    return o31;
}
f15(f15(f15(f15, 969, 17083), 969, 969), 1473, Int16Array);
class C35 extends v8 {
    get g() {
        try {
            v8 &= v8;
        } catch(e37) {
        }
        return -9223372036854775807;
    }
    static #m(a40, a41, a42) {
        %VerifyType(a42);
        super.length;
        try {
            f15(Uint8ClampedArray, -9223372036854775807, -9223372036854775807);
        } catch(e45) {
        }
        return a40;
    }
}
new C35();
new C35();
const v48 = new C35();
[0,5,-1073741824,10,-4,9007199254740991,-9,-4096];
[2147483649,15,-824165013,-9223372036854775808,1073741823,255,993051589,-256];
[129,65535,3970];
try {
    C35.c = Uint8ClampedArray;
} catch(e52) {
}
let [,v53,v54,...v55] = v48;
v54[Symbol.toStringTag];
