const v2 = new Uint8ClampedArray(256);
const v5 = new Uint16Array(1412);
const v8 = new Int32Array(0);
class C12 extends Uint16Array {
    static #b = v8;
    static #d;
    #g;
    [v2] = v5;
    constructor(a14, a15, a16) {
        super(1412, a15, 0);
        try { new Int32Array(13279, Uint8ClampedArray, 0, ...-41048, ...this, a14); } catch (e) {}
        v5[a14];
        Uint16Array | a16;
        return;
    }
    static h;
    268435441;
}
const v20 = new C12(13279, 3, 1412);
new C12(-41048, 1412, 0);
const v22 = new C12(3, 13279, 256);
try {
const t0 = 0;
t0(1412, v2);
} catch (e) {}
const v25 = [v20,1412];
Reflect.apply(v5.indexOf, v22, v25);
new Array(4);
const v34 = -Infinity;
Math.log10(Uint8ClampedArray);
Math.cosh(2147483649);
Math.sign(Uint8ClampedArray);
-(v34 - 2147483649);
!Uint8ClampedArray;
try {
    new Int16Array(6);
} catch(e3) {
}
let v4 = 1707;
try {
    new Int8Array(v4);
} catch(e7) {
}
try {
    new Int8Array(7);
} catch(e11) {
}
const v20 = Math.tanh(4096n);
Math.acos(6);
(-34703n) ** 4096n;
try {
    v4 = v20;
} catch(e23) {
}
7 instanceof Int8Array;
