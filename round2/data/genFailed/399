const v5 = new Float64Array(10);
new Int8Array(45);
const v11 = new BigInt64Array(2816);
class C12 extends Float64Array {
    3 = Float64Array;
    set e(a14) {
        const o17 = {
            "maxByteLength": 65535,
        };
        const v19 = new SharedArrayBuffer(1405, o17);
        new Uint8ClampedArray(v19);
    }
    static [v5];
    1073741824;
}
new C12();
const v23 = new C12();
new C12();
v11.__proto__;
const v30 = new Date();
v23[v30] = v30;
const v31 = v23[268435456];
v31 + v31;
function f33() {
    return Date;
}
try {
    new BigInt64Array(3);
} catch(e6) {
}
try {
    new Uint16Array(6);
} catch(e10) {
}
try {
    new Float32Array(4);
} catch(e14) {
}
class C15 extends BigInt64Array {
    static o(a17, a18, a19) {
        function f20(a21, a22, a23) {
            let v24 = arguments;
            let v25 = a22?.[a22];
            [,,v24,...v25] = v24;
            return v24;
        }
        f20(a18, a17);
        return -26927;
    }
    static 90;
    [BigInt64Array] = -26927;
    g;
    4294967295 = BigInt64Array;
    #f;
}
new C15();
const v28 = new C15();
new C15();
let v34 = -36382;
v34-- ** 5;
++v34;
const v41 = ~(~"2147483649");
try {
    v28[6] = v41;
} catch(e42) {
}
