const v1 = new WeakMap();
const v2 = [WeakMap,v1,WeakMap,v1,v1];
const v3 = [WeakMap,v1];
const v4 = [v1,v3,v2];
new Uint32Array(2);
new Int16Array(512);
const v13 = new Int8Array(1);
new WeakMap(v13);
v4[6] = Int16Array;
[-1000.0];
[-6.195108023403844,-1.3610950095496937e+308,-3.0];
const v17 = [339341.7339766775,-3.224158331758814e+307,0.0,4.0,-2.250263610751271e+307,1000.0,1.0,877.4739238471916,-1000000000000.0];
function f18(a19) {
    return v3;
}
class C20 extends f18 {
    static 4294967295;
    [v17];
    [1];
    [WeakMap];
    [-1] = v17;
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -203414700;
    } catch(e3) {
    }
    try {
        this.c = -203414700;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
const v7 = new F0();
function f8() {
    return v7;
}
const v12 = ["asIntN","function","function",v7];
const v13 = [v12];
["asIntN",F0,v7];
function f15() {
    return "sort";
}
class C16 extends F0 {
    toString(a18, a19) {
        const t25 = "sort";
        delete t25[127];
        with (v6) {
            this >= h ? this : h;
        }
        return "asIntN";
    }
    static ["function"] = v12;
    #d = "function";
    h = "asIntN";
    static #b = v6;
}
new C16();
new C16();
new C16();
new f8();
function f28() {
    function f30(a31) {
        ("9007199254740990").normalize("NFKD");
    }
    this.onmessage = f30;
    const o36 = {
    };
    try {
        o36.h = "asIntN";
    } catch(e37) {
    }
    try {
        const o38 = {
        };
        o38.h = "asIntN";
        o38.f = v12;
    } catch(e39) {
    }
    try {
        const o40 = {
        };
        o40.h = "asIntN";
        o40.f = v12;
        o40.g = this;
    } catch(e41) {
    }
    try {
        const o42 = {
        };
        o42.h = "asIntN";
        o42.f = v12;
        o42.g = v13;
    } catch(e43) {
    }
}
const v46 = [];
const o47 = {
    "arguments": v46,
    "type": "function",
};
new Worker(f28, o47);
