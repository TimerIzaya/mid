const v8 = new WeakMap();
function f9() {
    return -7;
}
const v12 = new Float32Array(1);
const v15 = new Int32Array(8);
const v18 = new Int32Array(3);
const v19 = delete v8?.h;
Object.defineProperty(v8, "h", { enumerable: true, get: f9, set: f9 });
v12[7] = 34067;
Object.defineProperty(v15, -7, { value: 3 });
Object.defineProperty(v12, WeakMap, { configurable: true, enumerable: true, get: f9 });
v18[2404041605] ||= 8;
try { new v19(9007199254740991, 34067, v19, 34067); } catch (e) {}
let v21 = 9007199254740991 === Float32Array;
++v21;
Math.atan(v21);
const v28 = +(0.5149015488243549 && -7);
Math.atan(v28);
Math.atanh(v28);
const v2 = new Array(129);
const v3 = [18804,-9];
const v4 = [64,21523,9007199254740991,1,4096];
const v5 = [4294967296,11,-325,4294967295,-4294967295,-1347308103,-1813106040,128,-2552];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a9;
    } catch(e12) {
    }
    try {
        this.e = a8;
    } catch(e13) {
    }
}
const v14 = new F6(129, v2, v4, v4);
const v15 = new F6(v14, F6, v3, v5);
new F6(F6, 129, v4, v2);
const v18 = new Set();
const v19 = [v18,v5,v2];
[129,v2,v19];
const v21 = [v15,v19,v3];
const v22 = new Set(Array);
function F23(a25, a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v19;
    } catch(e29) {
    }
}
new F23(v3, F23, v15, v4);
new F23(v21, F23, v14, v22);
new F23(v5, v15, v14, v14);
