let v0 = 129;
new Uint32Array(v0);
const v5 = new BigUint64Array(64);
const v8 = new Uint8ClampedArray(10);
const v9 = [-437151.6606589345,-0.0];
[997.9555530000177,-1.7976931348623157e+308,-8.757829776764322e+307];
let v11 = [-749310.6755789218,-1.5935957754442284e+308,-1000000000000.0,9207.872239599237,-504.2044702203734,410.60161367143746,7.252264049693223e+307,-1000000.0,-0.0,1.0];
for (const v13 in v11) {
    let v14;
    try { v14 = v5.reverse(); } catch (e) {}
    v8["find"](v0 = v14);
    v11++;
}
v8.__proto__ = v5;
Object.defineProperty(v11, "c", { writable: true, enumerable: true, value: BigUint64Array });
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a21;
}
new F18(10, undefined);
new F18(v0, 64);
new F18(v0, v9);
const v0 = /[xyz](?!(a))\1u/imy;
const v1 = /ab|c(ab|cde)\17hFa{0,1}?a(?:b)*/igu;
const v2 = /xCUZ(?: foo )/siu;
const v3 = [v2,v2,v2,v1];
const v4 = [v1,v2,v2,v0];
const v5 = [v1,v3,v0,v1];
const v10 = new Date();
[v10,v1,1000000000000.0,v10];
[v0,v0,v10,[v5,v1,v4,v2,Date],1000000000000.0];
try {
    new Int32Array(255);
} catch(e17) {
}
try {
    new Uint8Array(6);
} catch(e21) {
}
try {
    new Uint32Array(1);
} catch(e25) {
}
