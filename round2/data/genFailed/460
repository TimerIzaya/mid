new Array(3155);
[0.5377131499063303,1000.0,1000.0,0.2856369037534724,5.0];
const v7 = [-1000000.0,1.684727450191683e+307,-5.0,0.11619964590673693,819076.7058699108];
[-1.7976931348623157e+308,-0.0,-245.19346208633033,698573.194788258,1.0,4.0,-217996.5923764438,1000000000.0,-509127.8267849264,1000000.0];
class C9 extends Array {
    o(a11, a12, a13) {
        a12 &&= Array;
        Array.prototype;
        return a11.length;
    }
    valueOf(a17, a18) {
        a18 = "n";
        return 3155;
    }
}
new C9();
new C9();
const v24 = new C9();
C9 = Array;
const t18 = v24[v7];
t18.__proto__ = v24;
new Uint32Array(255);
new BigInt64Array(492);
new Int8Array(4);
const v0 = [1000.0,-0.7139467547306051,-5.0,0.8895364558781363];
[1.044996615232571e+308,4.0,1000000.0,2.0,-Infinity,0.0,7.426826974136745,-2.2250738585072014e-308,-0.0];
[0.8404146157279035,1000000000000.0];
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 3n;
    } catch(e17) {
    }
    try {
        this.f = a15;
    } catch(e18) {
    }
    try {
        this.d = v0;
    } catch(e19) {
    }
}
const v20 = new F12(9223372036854775807, 4n, 4n);
const v21 = new F12(4096, -128n, 3n);
const v22 = new F12(-4n, -418785615n, v21);
Object.defineProperty(v22, "f", { writable: true, enumerable: true, value: 9223372036854775807 });
v0 ^ v22;
[0];
[1042884997,9007199254740991,319836202,-42291,9];
const v26 = [1898040157,1469375856,-16,0,6];
try { v26.indexOf(4n, 9223372036854775807); } catch (e) {}
v20 >>> -4n;
