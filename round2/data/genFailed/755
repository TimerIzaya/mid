let v1 = Uint16Array;
const v2 = new v1(257);
const v5 = new Float32Array(127);
const v8 = new Uint16Array(195);
let [...v12] = v5;
let v13;
try { v13 = v8.at(127); } catch (e) {}
v2.f = 195;
let v14;
try { v14 = v5.reduce(v13, 127); } catch (e) {}
const v15 = delete v2[268435440];
try { v14(127, 257, ...v8, Uint16Array, ...v2, 4294967295n); } catch (e) {}
try { v12(v13); } catch (e) {}
v1 = v12;
const v18 = 4294967295n ** v13;
try { new v12(v1, v15, v18, v18); } catch (e) {}
let v0 = -9007199254740992;
function f15(a16, a17, a18, a19) {
    try {
        v0 = 2147483647;
    } catch(e20) {
    }
    6396 ** a19;
    return 2;
}
f15(-1915692934, -8, -8, -7242n);
let v24 = 1073741824;
Math.cbrt(v24);
v24++;
5 ^ 5;
v24++;
v24++;
-(-8);
