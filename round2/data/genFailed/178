const v2 = new Array(1662);
function f3(a4, a5) {
    const o6 = {
        "d": a4,
        "c": a4,
        "g": a4,
        "f": a4,
        [a4]: Array,
        7: 1662,
        ...a4,
        [a5]: a5,
        [1662]: a5,
        ...a5,
    };
    return o6;
}
const v8 = f3(f3, f3(v2, 1662));
const v9 = f3(v8, 1662);
class C10 {
    static {
        Object.defineProperty(v8, Array(1662), { enumerable: true, get: f3 });
        super[v2] = v2;
    }
    set g(a14) {
        this.e >>>= a14?.[3];
        v8.__proto__ = Array;
    }
}
new C10();
new C10();
const v18 = new C10();
const v19 = v8 >>> v9;
for (let v20 = 0; v20 < 100; v20++) {
    Array(v19);
}
const v22 = [835362.417255701,-5.1016549339994715,1.3044447703275217e+308,1000000000000.0,2.2250738585072014e-308];
[1e-15,-296.0288616521325,1.0,856.6416452196215,-7.874575998606204];
const v24 = [-201.41685352828392];
let v25;
try { v25 = v24.values(); } catch (e) {}
try { v18.o(1662, v9, v25, v18); } catch (e) {}
Object.defineProperty(v22, "d", { writable: true, configurable: true, get: Array });
const v1 = new WeakMap();
const v2 = [4096,-8,9007199254740990,1538227085,6,1,1000,-15894,-32330,255];
const v3 = [-9223372036854775807,-268435456,-536870912,1596116998,1875467833,-56380,2,13,-3,-65535];
const v4 = [-1024];
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v2;
    } catch(e9) {
    }
    try {
        this.h = a7;
    } catch(e10) {
    }
    try {
        this.d = a7;
    } catch(e11) {
    }
}
new F5(v3, v2);
new F5(v4, v4);
new F5(v3, v3);
try {
    new Int8Array(44);
} catch(e18) {
}
try {
    new Float64Array(1940);
} catch(e22) {
}
try {
    new Uint8ClampedArray(979);
} catch(e26) {
}
const v27 = new WeakMap(v3);
v27 % v1;
const o34 = {
    "maxByteLength": 64,
};
const v36 = new ArrayBuffer(64, o34);
try {
    new Int16Array(v36);
} catch(e39) {
}
