const v2 = new Float32Array(128);
const v5 = new Int8Array(10);
const v8 = new Uint32Array(2426);
[v2,-29091,-29091,v5];
const v13 = [-1009694241,Int8Array,v8];
[10,v13,v13,-29091];
v5 === 10;
typeof 128 === "object";
const v19 = v2.__proto__;
v19.__proto__ = v19;
typeof Int8Array === "boolean";
try {
    new Uint16Array(16);
} catch(e9) {
}
try {
    new Int8Array(2);
} catch(e13) {
}
try {
    new BigUint64Array(4079);
} catch(e17) {
}
function f18() {
    return Uint16Array;
}
class C19 extends BigUint64Array {
    o(a21, a22, a23) {
        const v25 = Symbol.toStringTag;
        this[v25] = BigUint64Array;
        try {
            v25[a22] = a23;
        } catch(e26) {
        }
        return -4294967295n;
    }
    static #a = -969129159n;
    static #c;
    static 2;
    [1000.0];
    static h = Int8Array;
}
new C19();
new C19();
new C19();
const v31 = Symbol.iterator;
const o40 = {
    [v31]() {
        let v33 = 10;
        const o39 = {
            next() {
                v33--;
                const v37 = v33 == 0;
                const o38 = {
                    "done": v37,
                    "value": v33,
                };
                return o38;
            },
        };
        return o39;
    },
};
