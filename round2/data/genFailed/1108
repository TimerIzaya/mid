function f0() {
}
const v10 = [4.0];
const v11 = [-1.0];
const v12 = [-96750.37264119356,-1.3986257416485992e+308,0.3550369078986214];
function f13(a14, a15) {
    const o30 = {
        set f(a17) {
            a14.__proto__;
            const v20 = Symbol.iterator;
            const o29 = {
                [v20]() {
                    let v22 = 10;
                    const o28 = {
                        next() {
                            v22--;
                            const v26 = v22 == 0;
                            const o27 = {
                                "done": v26,
                                "value": v22,
                            };
                            return o27;
                        },
                    };
                    return o28;
                },
            };
        },
    };
    return o30;
}
const v31 = f13(v12, "3");
f13(v12, "padEnd");
f13(v10, "3");
for (let v34 = 0; v34 < 92; v34++) {
    let v35;
    try { v35 = new f0(...v11, v31, v34, ...v34, 5n); } catch (e) {}
    Object.defineProperty("3", 8, { writable: true, value: v35 });
    "FaS" & v31;
}
let v37 = 0;
while (v37 < 0) {
    const o40 = {
        "apply": f0,
        "construct": f13,
        "defineProperty": f13,
        "get": f13,
        "getOwnPropertyDescriptor": f0,
        "has": f13,
        "isExtensible": f0,
        "set": f13,
        "setPrototypeOf": f0,
    };
    new Proxy("padEnd", o40);
    v37++;
}
[-50566,-536870912,-9007199254740992];
const v4 = [1073741825];
[1000,-1404921850];
try {
    new Int8Array(6);
} catch(e9) {
}
try {
    new BigInt64Array(8);
} catch(e13) {
}
try {
    new Int32Array(8);
} catch(e17) {
}
try {
    const t16 = "function";
    t16.__proto__ = v4;
} catch(e18) {
}
for (let i20 = 0; i20 < 5; i20++) {
    const v26 = ("bigint").length;
    let v27;
    try { v27 = v4.toSorted(); } catch (e) {}
    Reflect.construct(Int32Array, ["function",v26,6], v27);
}
