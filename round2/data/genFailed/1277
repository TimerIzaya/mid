new Map();
[1073741824,-1646773023,9007199254740990,-43251];
let v13 = [9,-567213243,-8,313587446,765223092];
const v14 = [-9223372036854775807];
v14 >> 65535n;
v14[9];
--v13;
const v21 = 536870888 % v13;
Math.imul(536870888, -1024n);
Math.floor(-9223372036854775807);
++v13;
Math.fround(v21);
try {
    new BigInt64Array(5);
} catch(e3) {
}
try {
    new Int32Array(1484);
} catch(e7) {
}
try {
    new Float64Array(1000);
} catch(e11) {
}
class C15 {
    constructor(a17, a18, a19, a20) {
        try {
            a18.c = a18;
        } catch(e21) {
        }
    }
    static toString(a23, a24) {
        delete this[3];
        [-818032.4560507097];
        [2.6866226823093964,5.0];
        [-1000000000000.0];
        return BigInt64Array;
    }
}
const v29 = new C15(1484, 5, -734559922, 589798954);
const v30 = new C15(-734559922, v29, -734559922, v29);
new C15(5, v30, 589798954, 5);
for (const v33 of v29.__proto__) {
    function f34(a35, a36) {
        function f38(a39) {
            a39++;
            --a39;
            -11 * a39;
        }
        this.onmessage = f38;
        ~1484;
    }
    const v48 = ["function",v33];
    const o49 = {
        "arguments": v48,
        "type": "function",
    };
    new Worker(f34, o49);
}
