class C3 {
    #m(a5, a6) {
        super.h = "f";
        super.h &&= a5;
        return "function";
    }
    static #c = "f";
    static 2107 = "f";
    static #h = "f";
    static #a;
    #g;
    ["function"] = "f";
}
new C3();
const v8 = new C3();
new C3();
function f13(a14, a15) {
    const o17 = {
        [1771529021]: -7,
        get e() {
            super[a14] = "function";
            return -7;
        },
        [268435439]: a15,
        268435439: a14,
        ..."f",
        "h": v8,
        3: a14,
        "c": a15,
    };
    return o17;
}
f13(f13(f13, 1771529021), -1877545640);
const v20 = f13("function", -1877545640);
let v21 = 10;
for (; v21--;) {
    let v23;
    try { v23 = ("f").codePointAt(268435439); } catch (e) {}
    v20.c = v23;
    const o26 = {
        "maxByteLength": 14,
    };
    const v28 = new SharedArrayBuffer(9, o26);
    new Uint32Array(v28);
}
try {
    new Float64Array(550);
} catch(e4) {
}
try {
    new Float32Array(2148);
} catch(e8) {
}
try {
    new Float32Array(3535);
} catch(e12) {
}
class C13 extends Float32Array {
    n(a15, a16, a17) {
        [a17];
        [2148];
        [this];
        return this;
    }
    d;
    static [-2];
    [Float64Array] = 3535;
    3470;
}
const v21 = new C13();
const v22 = new C13();
new C13();
const v24 = new Float64Array(3535, 550, 3535);
v24.length /= 2148;
delete v22?.length;
let [] = v24;
Float32Array >>> 550;
const o30 = {
};
try {
    o30.e = v21;
} catch(e31) {
}
try {
    const o32 = {
    };
    o32.e = v21;
    o32.f = "matchAll";
} catch(e33) {
}
try {
    const o34 = {
    };
    o34.e = v21;
    o34.f = "matchAll";
    o34.a = 3535;
} catch(e35) {
}
try {
    const o36 = {
    };
    o36.e = v21;
    o36.f = "matchAll";
    o36.c = v24;
} catch(e37) {
}
