const v1 = [129,-7876,-26395,449533806,-4096];
const v2 = [1,2147483649,-47244,256,-895826287,-605758999,760,-446700504];
const v3 = [536870889,9161,35150,-35135,804965941];
const v5 = new WeakSet();
let v6 = [WeakSet,true,v2,true,true];
const v7 = [v1,v3,v5,v1,v6];
[v6,v7,v7,v1];
const v9 = [65537,-10325,2147483647,-16,10000,512,15,1073741824,65535];
[-1073741824,512];
[-65105,257,-64407,-62892,-44730,2147483648];
v6 = v3;
if (WeakSet < v9) {
    const o15 = {
        "maxByteLength": 1073741825,
    };
    const v17 = new SharedArrayBuffer(14, o15);
    new DataView(v17);
} else {
    v2["map"](v2, v5);
}
let v2 = "number";
class C3 {
    static #o(a5, a6) {
        try { this.setInt16(this); } catch (e) {}
        try {
            v2 = this;
        } catch(e8) {
        }
        return a5;
    }
    3 = -1.4832199509560759e+308;
    [-2] = -2;
    e;
}
new C3();
const v10 = new C3();
const v11 = new C3();
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a14;
    } catch(e16) {
    }
    try {
        this.h = v11;
    } catch(e17) {
    }
    try {
        this.g = a15;
    } catch(e18) {
    }
}
new F12(v2, v10);
const v20 = new F12(v11, F12);
const v21 = new F12(C3, v20);
C3[v21] **= -2;
v21.d &= -1.4832199509560759e+308;
v11.e += -1.4832199509560759e+308;
for (let v22 of v11) {
    for (let i24 = 0; i24 < 3; i24++) {
        try {
            v22 = i24;
        } catch(e30) {
        }
    }
}
