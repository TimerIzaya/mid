class C3 {
    n(a5, a6) {
        try { a5.find(this, this, 32638, this, this); } catch (e) {}
        let v9 = 4096;
        const v11 = --v9;
        +v9;
        Math.trunc(0.0);
        ~v11;
        Math.asinh(v11);
        Math.acosh(v9);
        return a6;
    }
    [8] = "isNaN";
}
new C3();
new C3();
new C3();
[255,-1024,7,-43881];
[127,-1772022369,-9,9];
[-1024];
const v23 = [45626,4,22354,1269109694,10,2];
[127,9,1073741825,-270877090,-200713895,9007199254740990,268435440,8];
[9,7,-10188,15];
/a+2X/mid;
/((\xed\xa0\x80))\x02x5/mysu;
/(?<a>)LKh(?<!a)/isd;
if (32638) {
    const o32 = {
    };
    new Proxy("isNaN", o32);
} else {
    const o35 = {
    };
    o35.a = 32638;
    const o36 = {
    };
    o36.a = 32638;
    o36.g = v23;
    const o37 = {
    };
    o37.a = 32638;
    o37.g = v23;
    o37.d = 8;
    const o38 = {
    };
    o38.a = 32638;
    o38.g = v23;
    o38.f = v23;
}
const v0 = [];
class C1 {
    constructor() {
        try {
            super[v0] = this;
        } catch(e3) {
        }
    }
    f = v0;
    valueOf() {
        const v6 = Symbol.split;
        v0[v6];
        return v6;
    }
}
new C1();
new C1();
const v10 = new C1();
try {
    new Float64Array(3788);
} catch(e14) {
}
try {
    new Int32Array(127);
} catch(e18) {
}
try {
    new Float64Array(5);
} catch(e22) {
}
class C23 extends Int32Array {
    #b;
    set a(a25) {
        try { new a25(this, ...this, ...v0, ...v0); } catch (e) {}
        try { v10.valueOf(this, Float64Array, 127); } catch (e) {}
        [4.0];
        [-58959.48151551827,-3.0,-0.0,-1000000000.0];
        [-528198.9388142669,-4.0,-1000000000000.0,-1e-15];
    }
    [Int32Array] = Int32Array;
    #a;
    256 = Int32Array;
}
const v32 = new C23();
const v33 = new C23();
new C23();
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = C23;
    } catch(e40) {
    }
}
new F35(v32, C23, 5);
new F35(v33, C1, 127);
new F35(v32, C1, 5);
/[\c1]/sdmy;
/[^gc(?<a>(?<b>(?<c>(?<d>.).).).)F2]/dv;
/a\D/idv;
