const v2 = new BigInt64Array(3);
new Float32Array(1024);
new Uint8ClampedArray(512);
class C9 extends BigInt64Array {
    static #e = BigInt64Array;
    #toString(a11, a12) {
        const v14 = this < this ? this : this;
        try {
            v14.#toString(1024, this, a12);
        } catch(e16) {
        }
        super.reverse();
        return v14;
    }
    static #h;
    static 1164;
    [-1];
}
const v18 = new C9();
new C9();
new C9();
{
    const v24 = v2.__proto__;
    v24?.[v24];
}
Uint8ClampedArray ** Uint8ClampedArray;
C9.a = v18;
new WeakMap();
class C3 {
    static b;
    constructor(a5, a6) {
        try { new this(a6); } catch (e) {}
        /\P{Any}/gy;
        /bHL\p{Changes_When_NFKC_Casefolded}ZLV(?:ab){4,7}/imv;
        /X(?:a+)?a{0}*/si;
    }
    #f;
    #e = 0.8284207562584942;
    d;
    8 = 0.8284207562584942;
}
new C3(0.8284207562584942, -2.0);
const v12 = new C3(0.8284207562584942, 870040.4968717133);
const v13 = new C3(870040.4968717133, 0.8284207562584942);
try {
    new Int8Array(2);
} catch(e17) {
}
try {
    new BigUint64Array(9);
} catch(e21) {
}
try {
    new Int8Array(3);
} catch(e25) {
}
let v26;
try { v26 = v13.n(v13, v12, 870040.4968717133, C3, -2.0); } catch (e) {}
for (const v27 of v26) {
    function f28() {
        return Int8Array;
    }
}
function f29() {
    return Int8Array;
}
Math.min(-14);
Math.tan(v26++);
