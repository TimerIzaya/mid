new Uint8ClampedArray(9);
new Int8Array(204);
const v8 = new Int16Array(878);
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a11;
    this.e = a12;
    this.a = 878;
}
const v13 = new F9(9, 9);
const v14 = new F9(204, 878);
new F9(204, 878);
class C16 {
    set c(a18) {
        function f19(a20) {
            return a20;
        }
        class C21 extends f19 {
            e = this;
        }
    }
    set d(a23) {
        delete this?.c;
        v14.__proto__ = v14;
    }
    f;
    a;
    #a = v13;
}
const v25 = new C16();
const v26 = new C16();
new C16();
v14.e = Uint8ClampedArray;
const v28 = C16[6];
try { v28(); } catch (e) {}
class C30 extends Int8Array {
    16;
    2771 = v8;
    static #e;
    b = v25;
    [v26];
}
new C30();
new C30();
new C30();
function f6() {
    return 41222;
}
const v7 = [41222,1024,"number"];
["number","number",f6,-5,v7];
[1024,"getPrototypeOf"];
try {
    new BigInt64Array(9);
} catch(e13) {
}
try {
    new Uint16Array(6);
} catch(e17) {
}
try {
    new Uint8Array(1);
} catch(e21) {
}
v7.length **= 41222;
let v22 = 10;
for (; v22--;) {
    ("uE4W").length;
    new Set();
}
