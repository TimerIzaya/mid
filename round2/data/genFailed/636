let v2 = new Array(512);
class C3 {
    #p(a5) {
        Array[8] = a5 >> 512;
        a5.valueOf = a5;
        super.f *= a5;
        return a5;
    }
    static 111 = 512;
    static b = v2;
    g;
    [v2];
    d = Array;
    static [v2] = 512;
}
const v7 = new C3();
const v8 = new C3();
const v9 = new C3();
const v10 = [v9,v7,512];
[[v7,v7,v10,v10],Array,512];
let v13 = 4;
let v15 = 268435456;
({"b":v2,"c":v15,"g":v13,} = C3);
v2[-1] = 512;
function f16(a17, a18) {
    v10.length = a18;
    let v19;
    try { v19 = new a18(); } catch (e) {}
    return v19?.h;
}
v8 == f16(v9, v10);
const v0 = [];
try {
    new BigUint64Array(1728);
} catch(e4) {
}
try {
    new Int16Array(4);
} catch(e8) {
}
try {
    new BigInt64Array(2);
} catch(e12) {
}
class C13 extends BigInt64Array {
    f;
    #n(a15, a16, a17) {
        const v18 = (a19, a20) => {
            'use strict';
            try {
                this.f = v0;
            } catch(e21) {
            }
            return a15;
        };
        return BigInt64Array;
    }
    [Int16Array];
    0;
    static #d;
    static #b;
}
new C13();
const v23 = new C13();
new C13();
new WeakSet();
class C27 {
    static set d(a29) {
        async function f30(a31, a32, a33, a34) {
            for (let v35 = 0; v35 < 32; v35++) {
                this["p" + v35] = v35;
            }
            await a31;
            return a33;
        }
        f30(Int16Array, this, 4, a29);
    }
    h;
    [WeakSet];
    #a = Int16Array;
}
let v40 = new C27();
new C27();
new C27();
function f43() {
    function f45(a46) {
        try {
            v40 |= this;
        } catch(e47) {
        }
    }
    this.onmessage = f45;
    let v49 = -65535;
    v23 | v23;
    const v51 = v49--;
    Math.acosh(v23);
    v51 << v49;
}
const v56 = [];
const o57 = {
    "arguments": v56,
    "type": "function",
};
new Worker(f43, o57);
