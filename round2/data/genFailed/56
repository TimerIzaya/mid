let v1 = 268435441n;
const v5 = new Int8Array(5);
const v8 = new Uint8ClampedArray(1197);
new Int32Array(676);
v8.e = v5;
typeof Int32Array === "function";
v1 >>>= -2147483648n;
new BigUint64Array(255);
new Float64Array(255);
new BigInt64Array(115);
const v1 = new Map();
class C2 {
    [Map];
    #valueOf(a4, a5) {
        const v7 = +Uint16Array;
        try { v1.set(Map, ...Map, this, Map); } catch (e) {}
        return v7;
    }
    constructor(a10, a11) {
        a11--;
        try {
            new Uint8ClampedArray(10);
        } catch(e16) {
        }
        try {
            new Uint8ClampedArray(2);
        } catch(e20) {
        }
        try {
            new BigUint64Array(8);
        } catch(e24) {
        }
    }
}
const v25 = new C2(v1, C2);
const v26 = new C2(v25, Map);
new C2(v1, v25);
[-65535n,-65535n,v26];
[v26,-65535n];
for (let [,v37,v38] of [-65535n]) {
    Math.sin(-65535);
    38662n >> 38662n;
    Math.asin(38662n ^ -65535);
    Math.random();
}
