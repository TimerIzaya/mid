class C3 {
    valueOf(a5, a6) {
        super[a6] = "g";
        return a5;
    }
    #f = -1171099862;
    e;
    constructor(a8) {
        const v9 = delete a8?.[256];
        const v10 = v9?.[v9];
        v10[3] = v10;
        try { ("g").endsWith("g"); } catch (e) {}
    }
    [-1171099862];
}
new C3(8);
const v13 = new C3(-1171099862);
let v14 = new C3(v13);
const v16 = new WeakSet();
class C17 {
    g = -1171099862;
    b = v13;
    static n(a19, a20) {
        C3.a;
        new WeakMap();
        return WeakMap;
    }
    static toString(a25, a26, a27, a28) {
        let v30 = 2147483648;
        const v32 = v13 ^ v13;
        1000000000000.0 * 1000000000000.0;
        --v30;
        (v30 && v32) >>> v30;
        Math.cbrt(v32);
        Math.hypot(v32);
        return 8;
    }
}
const v39 = new C17();
new C17();
new C17();
if (v39) {
    v16[-1171099862] -= -1171099862;
} else {
    let v46 = -4294967296;
    const v48 = --v14;
    v48 || v48;
    -4 << -4;
    --v46;
}
function f0() {
    const o9 = {
        "b": "61976",
        65537: 536870887,
        __proto__: "61976",
        n(a5, a6) {
            super[3.0];
            super[a5];
            return this;
        },
        "c": "61976",
        "h": "61976",
        "g": 536870887,
        "d": "61976",
    };
    return o9;
}
f0();
f0();
const v12 = f0();
try {
    new BigUint64Array(70);
} catch(e16) {
}
try {
    new Uint32Array(256);
} catch(e20) {
}
try {
    new Int16Array(14);
} catch(e24) {
}
class C25 extends Uint32Array {
    9;
    static 2355 = v12;
    c;
    178 = Uint32Array;
    static {
        const v30 = BigUint64Array + 3;
        -BigUint64Array;
        ~this;
        Math.round(3);
        3 >>> BigUint64Array;
        ~v30;
    }
}
new C25();
new C25();
new C25();
with (v12) {
    let v39 = h;
    try {
        v39 = 256;
    } catch(e40) {
    }
}
try {
    f0();
} catch(e42) {
}
