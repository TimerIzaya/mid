new BigInt64Array(7);
const v5 = new Int8Array(45);
const v8 = new Float32Array(4);
new Float64Array(6);
new BigUint64Array(3);
new BigUint64Array(127);
v5[-1] -= v5.byteLength;
v8[127] = Int8Array;
[1000000000000.0,-5.438867770971534e+307,-197.4694884063406,0.645849283280326,1e-15,-Infinity,1000.0,-2.0,-89572.96691922669,0.0];
[1.2042712418231556,1000000000.0,-1.5309544667023315e+308,16655.848143153824,0.9752506523368023,0.08506121879001505,-1.7976931348623157e+308,1000000.0,1.0,-Infinity];
[0.012206902565864652,-9.471350996502046e+307,-457.80979903665434];
%VerifyType(6);
const o24 = {
    "maxByteLength": 256,
};
const v26 = new SharedArrayBuffer(1, o24);
new Int32Array(v26);
try {
    new Uint8ClampedArray(0);
} catch(e6) {
}
try {
    new Float32Array(3768);
} catch(e10) {
}
try {
    new Int8Array(10);
} catch(e14) {
}
function f15(a16, a17, a18, a19) {
    const o36 = {
        "c": 0,
        "f": 10,
        291513134: -15087,
        ...a19,
        "h": a19,
        [-15087]: 7,
        [a18](a21, a22) {
            this.c;
            try {
                new BigInt64Array(3);
            } catch(e27) {
            }
            try {
                new Uint8Array(3229);
            } catch(e31) {
            }
            try {
                new BigUint64Array(0);
            } catch(e35) {
            }
            return a21;
        },
    };
    return o36;
}
const v37 = f15(3768, 10, f15, Float32Array);
f15(Float32Array, 7, 10, 10);
const v39 = f15(10, -15087, Int8Array, v37);
throw v37;
try {
    const o40 = {
    };
    v39.fuck(o40, "dKY", f15);
} catch(e43) {
}
try {
    f15(v39, 536870888, 536870888, f15);
} catch(e46) {
}
