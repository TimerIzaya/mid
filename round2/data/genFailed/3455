const v4 = new Map();
const v5 = [-2,v4,-2];
const v6 = [v5,v5];
const v7 = [v6,-2,10000,v5,Map];
const v10 = new Array(71);
function f11(a12, a13, a14, a15) {
    const o23 = {
        "g": v10,
        get d() {
            this[this];
            super[v6] = a15;
            return Map;
        },
        "d": a15,
        get e() {
            a15 *= a13;
            super[this] = this;
            Array(a15);
            %PrepareFunctionForOptimization(Array);
            Array(a15);
            Array(a15);
            %OptimizeFunctionOnNextCall(Array);
            Array(a15);
            return Array;
        },
    };
    return o23;
}
f11(v5, -65535, Array, 71);
const v25 = f11(v6, -65535, Map, -2);
f11(v10, 10000, -2, 71);
v6.length += 71;
if (71 === -65535) {
    const v29 = Symbol.split;
    v7[v29] = v29;
} else {
    new f11(v7, 10000, v7, -65535);
}
new Map(v25);
