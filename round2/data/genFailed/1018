const v5 = new Uint32Array(3399);
const v8 = new BigUint64Array(105);
const v11 = new Uint16Array(129);
if (v11["find"](v8, v5) !== BigUint64Array) {
    for (let v15 = 0; v15 < 32; v15++) {
        v8["p" + v15] = v15;
    }
} else {
    let {"byteLength":v18,"d":v19,} = v8;
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = true;
    } catch(e3) {
    }
    try {
        this.h = true;
    } catch(e4) {
    }
}
new F1();
const v6 = new F1();
const v7 = new F1();
try {
    new Uint8Array(1024);
} catch(e11) {
}
try {
    new Uint32Array(6);
} catch(e15) {
}
try {
    new Uint16Array(128);
} catch(e19) {
}
class C20 {
    #h = v6;
    #valueOf(a22, a23, a24) {
        try {
            super[a22] = this;
        } catch(e25) {
        }
        return Uint16Array;
    }
    [v7];
    static #a;
    7;
    static [v6];
}
new C20();
new C20();
const v28 = new C20();
for (const v30 of delete v28?.e) {
    try { v30(v30); } catch (e) {}
    const o35 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o35);
}
