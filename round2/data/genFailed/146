class C3 {
    static 2147483649;
    constructor(a5) {
        const o6 = {
        };
        new Proxy("bigint", o6);
    }
    #f;
    static b;
    static d = -1000000000000.0;
    2953;
    static [-635652.2816912293] = -1000000000000.0;
    static #c = -635652.2816912293;
    static c = -1000000000000.0;
}
const v9 = new C3(-635652.2816912293);
const v10 = new C3(C3);
new C3(-1000000000000.0);
class C15 {
    constructor(a17, a18) {
        super[a17] = v10;
        try {
            super.test(this, 4.843068192697782, this);
        } catch(e20) {
        }
    }
    static 3165963865 = v10;
    o(a22, a23) {
        let v24 = 0;
        while (v24 < 7) {
            new Float32Array(115);
            new Uint32Array(12);
            new Uint8ClampedArray(2515);
            v24++;
        }
        return v10;
    }
}
new C15(-1000000000000.0, -635652.2816912293);
const v38 = new C15(-747656.530452107, 0.42428362728530544);
const v39 = new C15(-1000000000000.0, 4.843068192697782);
v38[2786031010] = v9;
function f40(a41) {
    return a41;
}
class C42 extends f40 {
    7;
    536870887 = -747656.530452107;
    c = -1000000000000.0;
}
for (let v43 = 0; v43 < 32; v43++) {
    v39["p" + v43] = v43;
}
function f0() {
}
const v1 = [12,-16,1539756017,19125228,268435439,-1002837317,-1017740947,-256,1569728599,-221139036];
[536870912,-7,536870887,127,268435441,-29190,1079869257,-65536];
const v3 = [-1073741824];
try {
    new Int16Array(2812);
} catch(e7) {
}
try {
    new Uint8ClampedArray(4096);
} catch(e11) {
}
try {
    new Int16Array(64);
} catch(e15) {
}
const v16 = Int16Array < 2812;
const v17 = f0(...v3, f0, v3, ...v1, 64);
v3.filter(v16, 4096, 64, v17);
const v20 = v1["includes"](Int16Array, 4096);
try { v20(4096, ...v3, Int16Array, v17, v16); } catch (e) {}
let [v22] = v1;
try {
    new Uint8ClampedArray(9007199254740992, 64, 2812);
} catch(e25) {
}
