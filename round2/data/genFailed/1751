function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = f0;
    this.e = f0;
}
const v3 = new F1();
let v4 = new F1();
new F1();
let v6 = "zM";
class C9 extends f0 {
    constructor(a11, a12) {
        super();
        /foo[z]*/du;
        /()foo[z]*xyz{1,32}/my;
        /Faa\P{sc=Greek}bAa\Sc/myisdv;
    }
    h = F1;
    f;
    static {
        ++v6;
        v4 = v3;
        c = F1;
    }
}
new C9(v3, v6);
new C9(v3, "bigint");
new C9(v4, "HuqU");
new Int32Array(6);
new Float64Array(64);
const v29 = new Uint8ClampedArray(8);
++v6;
const v31 = v29 / 8;
let v32;
try { v32 = new Float64Array(...C9, 8, v31, v31, 6); } catch (e) {}
const o33 = {
    "deleteProperty": f0,
    "isExtensible": f0,
};
new Proxy(v32, o33);
v29[Symbol.iterator] = f0;
