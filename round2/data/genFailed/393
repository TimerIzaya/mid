const v0 = [276663864];
const v1 = [6,4294967297,-53633,2147483649,-7,11];
[64];
const v3 = [v0];
[v1,v1,v1,v0];
[v3,v1,v0];
/a[a-z]Pa\n/yisdu;
/[Jxyz{1,32}?NLRfoo(?<=bar)bazBP\p{gc=Nd}]/gmyv;
/lg(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\11?/ysd;
[0.6312314960293645,1000000000000.0,1.7976931348623157e+308,-9.747637670982227];
const v13 = [5.0,271.149702395086,-2.2250738585072014e-308,-2.0,514643.6590218623,-756.121611860052,-183366.35419356928,5.0];
[1000000000000.0,0.26907469178372634,-4.95032351075396,-2.9961094642414077,-5.0];
v13["findIndex"](v0.__proto__, v3);
for (let i20 = 0, i21 = 10; i20 < i21; i20++, i21--) {
}
const v0 = [];
class C1 {
    static {
        const v3 = v0[this];
        v3 <= v0 ? v3 : v0;
    }
    [v0];
    set a(a7) {
        super.f >>>= a7;
        %VerifyType(this);
        try { v0.splice(a7, a7, this, v0); } catch (e) {}
        try {
            super.h = v0;
        } catch(e9) {
        }
    }
}
new C1();
new C1();
const v12 = new C1();
try {
    new Float32Array(131);
} catch(e16) {
}
try {
    new Uint16Array(573);
} catch(e20) {
}
try {
    new BigInt64Array(4096);
} catch(e24) {
}
const v25 = [-829183648,64,54482,-4096,268435456,6,255,-4,-2];
[4096,-60296,10,1158590650,10,-10];
([-540148773,8,981700083,4294967296,-65536,65535,-2103863409])["map"]("map", v25);
+-1000000.0;
Math.sign(v12);
Math.cos(26159);
Math.expm1(-1000000.0);
v0[65354115];
