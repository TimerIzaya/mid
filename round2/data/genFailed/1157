const v2 = new Uint8Array(161);
const v5 = new BigInt64Array(127);
const v8 = new Uint8ClampedArray(2);
class C9 {
    #o(a11, a12, a13) {
        let v14 = a11?.f;
        super[v14] = 127;
        let v15;
        try { v15 = v14(a13, a11, BigInt64Array, 161, v5); } catch (e) {}
        v14 = Uint8ClampedArray;
        v8.__proto__;
        return v15;
    }
    static #g;
    static [161];
    d;
    g = 127;
}
const v20 = new C9();
new C9();
const v22 = new C9();
class C23 extends Uint8Array {
    [161] = v20;
    static set d(a25) {
        const o26 = {
            "h": Uint8Array,
            "g": v22,
            "a": v20,
        };
        this >= ArrayBuffer;
    }
    static #valueOf(a30, a31, a32, a33) {
        delete v22[4];
        try {
            v2.lastIndexOf(a32, -4294967296);
        } catch(e37) {
        }
        return a30;
    }
}
const v38 = new C23();
const v39 = new C23();
const v40 = new C23();
for (let v41 = 0; v41 < 68; v41++) {
    v5[5] = BigInt64Array;
    v20[v41] = C9;
    C23[7] = v38;
}
const v42 = v8.__proto__;
%VerifyType(v40);
try { v39.some(v42, v2); } catch (e) {}
v5.length;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -1740529426;
    } catch(e3) {
    }
    try {
        this.b = -1740529426;
    } catch(e4) {
    }
    try {
        this.c = -1740529426;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
function f15() {
    return v8;
}
v6[8] |= 0.7147608075911916;
let v16 = 0;
while (v16 < 8) {
    v7 % 57669n;
    try {
        v7.toString = f15;
    } catch(e20) {
    }
    v16++;
}
