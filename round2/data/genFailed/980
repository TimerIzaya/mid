[];
const v1 = [-Infinity,-299946.29093728436,1.0,0.607784931300897,1e-15,-1000000000.0,531.5942390153064,688.6735608605209];
const v2 = [0.9277413163510724,1.5382231828176971e+308];
let v3 = [2.220446049250313e-16,1.592387708811108e+308];
const v4 = [-0.5262805446763288,NaN,1000000000000.0,-672623.6254322813,4.0,-1000000000000.0,0.2764148515790632];
[-1000.0,268983.4263113036];
[2.220446049250313e-16,-1000.0];
const v8 = new Date();
new Int8Array(11);
const v14 = new Uint8ClampedArray(1024);
const v17 = new Float64Array(128);
v17.h = v2;
try {
    v1.unshift(Float64Array, Uint8ClampedArray);
} catch(e19) {
}
for (let i22 = 0, i23 = 10; i22 < i23; i22++, i23--) {
    v3 &&= v1;
    Object.defineProperty(v14, v2, { configurable: true, get: Date, set: Date });
    const v31 = v1.filter(v8, ...v4, i22, 11);
    let v32;
    try { v32 = v2.every(Date, v31); } catch (e) {}
    try { v32(); } catch (e) {}
}
try {
    new BigInt64Array(194);
} catch(e3) {
}
try {
    new Int16Array(16);
} catch(e7) {
}
try {
    new Int32Array(532);
} catch(e11) {
}
[5.8080908992948554,3.0,-0.0,0.8601280379552207,-1000000.0];
[-1000000.0,-0.0];
const v14 = [0.025714245666488056,-2.8172063748917004,7.569165890506607,-1e-15,1.314717856275586e+308,4.0,-0.7990114953690721,1e-15];
[-61806,30201,2147483649,255,-1024,-51140,-40770,1024];
const v16 = [128];
const v17 = [6,-47338,1073741824,-268435456,4,844,1684842122,-536870912,9007199254740992,-12];
const v19 = [Int32Array,v16];
const v20 = v17.findIndex;
Reflect.apply(v20, v17, v19);
16 / Int16Array;
v19 <= Int16Array;
v14[Symbol.toPrimitive] = v14;
Reflect.construct(Int16Array, [v17,v20,532], BigInt64Array);
