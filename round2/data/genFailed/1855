const v2 = new BigInt64Array(15);
const v5 = new Int8Array(16);
const v8 = new Int16Array(229);
function f9(a10, a11, a12, a13) {
    const o19 = {
        "b": a10,
        "a": v8,
        ...v8,
        "h": Int16Array,
        ...v2,
        set d(a15) {
            let v16;
            try { v16 = a10(a15, a15, Int16Array, this, this); } catch (e) {}
            try { v5["subarray"](v16, ...a15, ..."subarray", a12, 15); } catch (e) {}
        },
        "g": a13,
        8: BigInt64Array,
        "d": 229,
    };
    return o19;
}
f9(v8, 229, 229, 16);
f9(v2, 229, 16, 16);
f9(Int8Array, 15, 16, 16);
new BigInt64Array(v8, 16, 16);
let v24 = 0;
do {
    f9(...v2, 15, Int16Array, f9, ...v2).b;
    [-501398.15482363815,-1000000.0];
    [0.7083628665926942,4.0,-1000000000.0,3.0,1e-15,-557.9484632010888,-4.0,5.0,-1000.0,0.07314522878329444];
    [-1000000.0,-2.2250738585072014e-308,599716.2563902014,0.60000654761462,583732.046651484,0.3437303141489022,-5.0,0.456613787994677,1.7976931348623157e+308];
    v24++;
} while (v24 < 2)
