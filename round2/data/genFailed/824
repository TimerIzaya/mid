function f0() {
    const o21 = {
        ["toString"]: 0.9124345408418787,
        get f() {
            const v5 = typeof 0.9124345408418787;
            let v6 = "number";
            v5 === v6;
            v6.__proto__ = "toString";
            return ++v6;
        },
        o(a10) {
            let v11 = Array;
            new v11(55);
            v11--;
            ++v11;
            Math.ceil(536870887);
            return v11;
        },
    };
    return o21;
}
f0();
const v23 = f0();
const v24 = f0();
new Date();
const v28 = new Map();
/[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/misdv;
/U/gmyiv;
/./iu;
class C32 extends Map {
    #c = v23;
    constructor(a34, a35) {
        super(a35);
        Object.defineProperty(a35, "f", { writable: true, configurable: true, enumerable: true, set: Date });
        try {
            Date.parse("getPrototypeOf");
        } catch(e38) {
        }
    }
    #o(a40, a41) {
        Date(this);
        new Date(v23);
        const o46 = {
            "maxByteLength": 4096,
        };
        const v48 = new ArrayBuffer(2530, o46);
        const v50 = new Uint8Array(v48);
        return v50;
    }
}
new C32(f0, v23);
new C32(Map, v24);
new C32(f0, v24);
for (let v54 = 0; v54 < 100; v54++) {
    Date(v28);
}
2 % Date;
let v59 = Date && 2;
Math.min(v59);
v59++;
v59 << Date;
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a11;
    } catch(e12) {
    }
    try {
        this.e = a8;
    } catch(e13) {
    }
    try {
        this.d = a8;
    } catch(e14) {
    }
}
new F6("mpjG", -12n, 268435440n, "toString");
new F6("mpjG", -12n, 268435440n, "toString");
const v17 = new F6("mpjG", -10n, -10n, "mpjG");
function f18(a19, a20, a21) {
    const o29 = {
        get d() {
            try { a21(F6, this); } catch (e) {}
            a20 || a21;
            try {
                a20[a21] = -12n;
            } catch(e28) {
            }
            return -10n;
        },
        "c": F6,
    };
    return o29;
}
const v30 = f18(-10n, "wqifD", f18);
f18(268435440n, "toString", "wqifD");
const v32 = f18(-10n, "toString", "toString");
v30 - F6;
const v34 = ("wqifD").__proto__;
function f35() {
    arguments >> -10n;
    arguments ** v17;
    return arguments;
}
f35(v32, v34, 268435440n, "wqifD");
