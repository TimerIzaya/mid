function f0() {
}
/foo(?<!bar)baz9d/gi;
const v2 = /NnBm/;
const v3 = /[xyz]/myisv;
const v6 = new Float32Array(9);
const v9 = new Uint8Array(1049);
const v12 = new Float64Array(141);
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = v9;
    this.f = a15;
}
new F13(v3, 9, 9);
new F13(v3, 141, 9);
new F13(v2, 9, 141);
v12.g = Float32Array;
let v21;
try { v21 = v2.exec(Float32Array); } catch (e) {}
try {
    new f0();
} catch(e23) {
}
({"d":v21,} = v21);
v6[1049];
[-242599.84620082658,-8.93540979975208];
const v1 = [255729.29319641902,4.63086403689106e+307,1.0,-1000000.0,-729.2403976298924,445.1032458347454,-2.2250738585072014e-308,783611.593425503];
const v2 = [-112.08730227819115,0.061120490537116656];
[-65536,536870888,65535,4096,1073741825,-268435456];
const v4 = [-4096,55365,491158671,3,-820314891,-268435456,-9035,1073741824,-49099];
[1073741824,2009090533,255,-9223372036854775807,7,-2147483647,28302,5,1000];
const v9 = /{}/sidm;
/(SKJ\1(a)ZFz*)/myv;
const v11 = /(?:a?)*/u;
function f12() {
    return v9;
}
class C13 extends f12 {
    get a() {
        try {
            f12();
        } catch(e16) {
        }
        return v4;
    }
    #b;
    static set c(a18) {
        try { a18.isArray(a18, this); } catch (e) {}
    }
    static #f;
    static g;
    static 5 = v11;
    [v2];
}
const v20 = new C13();
const v21 = new C13();
const v22 = new C13();
-256 instanceof C13;
try {
    v21[-8] = v21;
} catch(e24) {
}
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v1;
    } catch(e31) {
    }
}
new F25(v22, v4, -8, v20);
const v33 = new F25(v11, v11, -256, v21);
new F25(-8, v33, -4294967295, v22);
