const v0 = [];
const v1 = /[\cz]/myd;
const v2 = /K6\xf0\x9f\x92\xa9/gisu;
const v3 = /\1(a)/gsu;
class C7 {
    [v0] = v3;
    static {
        v1.unicode;
        const v11 = [v0];
        Reflect.apply(v1.exec, v0, v11);
    }
    constructor(a15, a16, a17, a18) {
        let v19;
        try { v19 = a17(a17, ...a18, v3, this); } catch (e) {}
        const v21 = Symbol.toStringTag;
        v19[v21] = v21;
        v2 ^ a17;
        ({"d":a16,} = v19);
    }
}
const v23 = new C7(2353n, v1, -798246264n, v1);
new C7(2353n, v23, 2353n, v1);
new C7(-54511n, v3, -54511n, v2);
/h4X/isdv;
const v27 = /TLz/gmysu;
const v28 = /wab\b\d\bcda*b|c(?:a+){0,0}+/su;
new Int16Array(257);
const v34 = new Int16Array(197);
const v37 = new Uint32Array(134);
new WeakSet();
const t30 = v27.__proto__;
t30[-54511n] &= 134;
v28[v37] = v34;
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a44;
}
new F41(v2, 134);
new F41(v3, 257);
new F41(v27, 134);
class C3 {
    constructor(a5, a6) {
        a = a6;
        let v8 = -65535;
        const v11 = 6.403321772423573e+307 && v8;
        const v12 = ++v8;
        -9223372036854775808 / v11;
        v12 * 6.403321772423573e+307;
    }
    ["f"] = "function";
    [-1536751108];
}
const v15 = new C3("function", "function");
const v16 = new C3(-1536751108, -1536751108);
new C3(-1536751108, -1536751108);
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1536751108;
    } catch(e27) {
    }
    try {
        this.c = C3;
    } catch(e28) {
    }
}
new F21(Infinity, 1000.0, "f", v16);
const v30 = new F21(1000.0, "f", v15, v16);
new F21(1000.0, v30, "function", v16);
for (let v32 = 0; v32 < 47; v32++) {
    v16[7];
    try {
        new C3(undefined, /[\p{Script_Extensions=Greek}]/idyv);
    } catch(e37) {
    }
}
