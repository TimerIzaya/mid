const v6 = [4096,-1047801469];
let v7 = [5394,-10,-128,2147483647];
const v8 = [-741727591,-4,-913751565,1073741823,-1073741824,33818];
class C9 {
    static #g;
    4294967296;
    static 0;
    static {
        [v7] = v7;
        this.__proto__ = this;
        try { this["getUTCMinutes"](); } catch (e) {}
    }
    static 268435439 = 9007199254740990;
    static #valueOf(a14, a15, a16, a17) {
        try { v8.filter(this, ...this, -4, ...v6, this, a16); } catch (e) {}
        let [] = v7;
        v6["toReversed"]();
        return a14;
    }
}
const v21 = new C9();
new C9();
new C9();
class C24 {
    static set a(a26) {
        try { new a26(v21, a26, v8); } catch (e) {}
    }
    #o(a32, a33) {
        switch (a33) {
            case 9007199254740990:
                try { v6.forEach(v7, v21); } catch (e) {}
                break;
            case a33:
                new Int8Array(1000);
                new BigInt64Array(25);
                new BigUint64Array(905);
        }
        return v6;
    }
}
new C24();
new C24();
new C24();
class C47 extends C9 {
    #a;
    [C9];
    static h = -4;
}
const v48 = new C47();
new C47();
const v50 = new C47();
v7[3] = v50;
v48[1073741823];
try {
    new Int32Array(813);
} catch(e3) {
}
try {
    new Uint32Array(1);
} catch(e7) {
}
try {
    new Uint16Array(3);
} catch(e11) {
}
try {
    new Int8Array(2);
} catch(e15) {
}
try {
    new Uint8Array(1024);
} catch(e19) {
}
let v21 = Int16Array;
try {
    new v21(16);
} catch(e23) {
}
Uint16Array + Int8Array;
for (let v25 = 0; v25 < 32; v25++) {
    const t27 = 813;
    t27["p" + v25] = v25;
}
const v28 = v21[6];
v28 in v28;
try {
    v21 %= v21;
} catch(e30) {
}
