function f0() {
}
function f1() {
    const o6 = {
        toString() {
            const v3 = [9,-3,4294967295,268435441,-10,-9007199254740992,13,2,10764,1303115007];
            [-639241549,-50566,2147483647,-14,9223372036854775807,65536,-65536];
            [65537,160187110,12,1073741824,-9223372036854775807,256,458689315];
            return v3;
        },
        "e": f0,
        "a": f0,
        [f0]: f0,
        "c": f0,
        "d": f0,
    };
    return o6;
}
const v7 = f1();
let v8 = f1();
const v9 = f1();
const v11 = new Set();
class C15 {
    ["multiline"] = v7;
    [v8];
    n(a17, a18, a19, a20) {
        const t26 = "hgXK1";
        delete t26[4294967296];
        v11 != v9 ? v11 : v9;
        return a19;
    }
    3587958097 = Set;
    static #c;
    e = f0;
}
new C15();
const v25 = new C15();
new C15();
v25.e = "hgXK1";
Object.defineProperty(v9, "d", { writable: true, configurable: true, enumerable: true, get: f0, set: f0 });
v8 <<= v7;
if (v11) {
    Object.defineProperty(v25, f0, { writable: true, configurable: true, enumerable: true, value: "multiline" });
    new BigInt64Array(1000);
    new Uint8ClampedArray(127);
    new Float64Array(1);
} else {
    const v36 = f1();
    try {
        v36.toString(v36, v36);
    } catch(e38) {
    }
}
try {
    new Int32Array(4);
} catch(e3) {
}
try {
    new Int32Array(4);
} catch(e7) {
}
try {
    new Int32Array(1182);
} catch(e11) {
}
const v13 = new WeakSet();
function f14(a15, a16, a17, a18) {
    const o34 = {
        ...a17,
        "g": a18,
        toString(a20, a21) {
            for (let i24 = 0, i25 = 10; i24 < i25; i24++, i25--) {
                try {
                    v13[100] = a16;
                } catch(e33) {
                }
            }
            return a18;
        },
    };
    return o34;
}
const v35 = f14(4, Int32Array, 4, Int32Array);
f14(4, Int32Array, v13, Int32Array);
let v37 = f14(4, Int32Array, v35, Int32Array);
[1078,2147483647,24219,-2,-9007199254740990];
[27021,-145198604,-9,4,1000,1163351415,-7,6673];
const v40 = [-65536,25870566,-1406649109,-2088412156];
256 && 256;
const v44 = v37++;
Math.log(256);
Math.trunc(v44);
+v37;
Math.expm1(v40);
