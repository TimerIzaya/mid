[];
new Uint32Array(255);
const v6 = new BigUint64Array(2);
const v9 = new Int8Array(23);
const v10 = v9[v9];
v9 | 23;
try {
    v6.findLast(v10, v6);
} catch(e13) {
}
[536870889,-233971390,0,-1,2];
[-16402,1073741825,268435439,1073741825,-9223372036854775808,30023,-976177261,11,-50766,-31865];
v9["some"](v10, [16,-44883]);
const v1 = new Set();
try {
    new Uint16Array(595);
} catch(e5) {
}
try {
    new BigInt64Array(226);
} catch(e9) {
}
try {
    new Int32Array(1457);
} catch(e13) {
}
try {
    new Float32Array(255);
} catch(e17) {
}
try {
    new Uint8ClampedArray(243);
} catch(e21) {
}
try {
    new Uint16Array(912);
} catch(e25) {
}
try {
const t0 = 65535;
t0(595, 256255412, 256255412, Set);
} catch (e) {}
let v30 = `D`;
v30--;
const v32 = v1[912];
Float32Array >>> 65535;
for (let v34 = 0; v34 < 32; v34++) {
    v32["p" + v34] = v34;
}
