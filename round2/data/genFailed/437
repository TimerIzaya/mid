function f0() {
}
const v1 = [1073741825,268435441,1024,4,-35929,596390218,4294967295,374657390,-830563316,-1894090669];
[268435439,1073741825,-3,2,-65536,-9007199254740992,27226];
[-1630076903,1403];
new BigUint64Array(5);
new Float32Array(585);
const v12 = new Uint8ClampedArray(16);
typeof "toString" === "function";
let {"length":v19,} = v1;
try { v12.find(f0, "function"); } catch (e) {}
"function" in "toString";
%VerifyType(BigUint64Array);
let v25 = -(-1073741824);
const v26 = -1073741824 >>> -1073741824;
const v27 = --v25;
Math.cosh(v25);
-v26;
v27 + 9271;
16 + v26;
const v3 = /abc|def|ghi/imu;
const v4 = /[a\W]/sigmyv;
const v5 = /(?=)+/smyv;
try {
    new BigUint64Array(1);
} catch(e9) {
}
try {
    new Int32Array(256);
} catch(e13) {
}
try {
    new Int16Array(257);
} catch(e17) {
}
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a20;
    } catch(e24) {
    }
}
const v25 = new F18(256, v5, v4, v5);
const v26 = new F18(1, v25, v4, v5);
const v27 = new F18(1, Int16Array, v4, v3);
try {
    v27.__proto__ = v25;
} catch(e28) {
}
let v29;
try { v29 = v26(Int32Array, 257, 1); } catch (e) {}
try { v27.getMinutes(v29, BigUint64Array, F18); } catch (e) {}
const v32 = Symbol.replace;
v27[v32] = v32;
!61256;
Math.trunc(61256);
const v38 = -256;
(256 % v27) + v38;
