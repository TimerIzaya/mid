function f3() {
    return 3n;
}
const v6 = new Float64Array(160);
let v7 = 13;
const v9 = new Int32Array(v7);
const v12 = new Int16Array(1024);
function f13(a14, a15, a16, a17) {
    const o29 = {
        get c() {
            function f19() {
                return 429471206n;
            }
            v6 % v6;
            Math.tan(-536870912);
            Math.imul(1073741824, 1073741824);
            (v6 && -536870912) ** 1073741824;
            Math.asin(v6);
            return a15;
        },
    };
    return o29;
}
f13(-36410n, 429471206n, v7, 1024);
f13(-36410n, 3n, 160, 1024);
f13(3n, 3n, 160, v7);
v12[5] = 429471206n;
v7 ^= 160;
Object.defineProperty(v9, f13, { configurable: true, enumerable: true, get: f13, set: f3 });
const v38 = [f13,3n];
Reflect.apply(v6.reduce, v9, v38);
function f0() {
}
const v1 = [1073741825,-15535,1073741825];
let v2 = [711808877,-4294967295];
[268435456,268435441,-4294967295,51607,-52211,-50335148];
class C4 {
    #f = v1;
    [f0];
    #d;
    static 2711;
    static get a() {
        try {
            v2 /= v2;
        } catch(e6) {
        }
        Object.defineProperty(v1, 3, { get: f0 });
        try {
            this.#f %= f0;
        } catch(e7) {
        }
        return this;
    }
}
new C4();
new C4();
new C4();
try {
    new Uint32Array(4096);
} catch(e14) {
}
try {
    new Int16Array(7);
} catch(e18) {
}
try {
    new Float64Array(44);
} catch(e22) {
}
const v25 = Reflect.construct(f0, [], C4);
f0();
v1["sort"](v25);
try {
    C4["sort"] = 4096;
} catch(e29) {
}
