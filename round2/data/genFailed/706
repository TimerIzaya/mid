let v0 = 2409;
const v2 = new Int32Array(v0);
const v5 = new Uint32Array(1);
new Int32Array(512);
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a12;
}
const v13 = new F9(Int32Array, v0);
const v14 = new F9(v13, 512);
new F9(v14, v0);
v0 *= v5.byteOffset;
const v17 = v5.buffer;
const v18 = v17[Int32Array];
v18[v18] = v13;
const v20 = v17 >>> (v14 instanceof F9);
const o21 = {
};
o21.f = v5;
const o22 = {
};
o22.f = v5;
o22.e = v2;
const o23 = {
};
o23.f = v5;
o23.e = v2;
o23.b = v5;
const o24 = {
};
o24.f = v5;
o24.e = v2;
o24.a = v20;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -4294967297;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8, a9) {
    const o19 = {
        [a8]: F0,
        __proto__: a9,
        "b": a8,
        get d() {
            const o13 = {
                "maxByteLength": 144,
            };
            const v15 = new ArrayBuffer(144, o13);
            try {
                new Uint16Array(v15);
            } catch(e18) {
            }
            return o13;
        },
    };
    return o19;
}
const v20 = f7(v6, v6);
f7(v4, v4);
f7(f7, v4);
const v24 = new WeakMap();
const v29 = [v24];
Reflect.apply(v24.delete, v20, v29);
for (const v32 in v4) {
    v4[2147483648n];
    F0 >> 2147483648n;
    Reflect.a;
    try {
        v5.fuck(1636726642n, 1636726642n);
    } catch(e38) {
    }
}
