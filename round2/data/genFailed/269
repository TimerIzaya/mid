new Int16Array(52);
let v4 = Float64Array;
const v5 = new v4(2446);
let v8 = new Uint8ClampedArray(256);
class C12 extends v4 {
    #g;
    static {
        this >> this;
    }
    static valueOf(a16, a17) {
        super.byteLength = a16;
        super.set(this, 2446);
        v8[8];
        const o20 = {
        };
        new Proxy(v5, o20);
        return 2147483647n;
    }
}
let v23 = new C12();
new C12();
let v25 = new C12();
v5[8];
Symbol[C12] = 2446;
({"asyncIterator":v4,"search":v23,"unscopables":v8,} = Symbol);
v25 = v5;
try { v4["o"](-46435n); } catch (e) {}
function f0() {
}
class C1 {
    static get c() {
        this[this] ||= this;
        function f3() {
            return this;
        }
        return f0;
    }
    static [f0];
    c;
}
const v7 = new C1();
const v8 = new C1();
const v9 = new C1();
const v10 = [C1,v9,v7,v7,v9];
[[v10,v10,C1,v9,f0]];
class C13 {
    static 15 = v8;
    n(a15, a16) {
        try { this.valueOf(this, v8, this, f0, a16); } catch (e) {}
        return v7;
    }
    static {
        this * v10;
        new f0();
        try {
            this[0] = v7;
        } catch(e21) {
        }
    }
}
new C13();
const v23 = new C13();
new C13();
delete v10[v23];
Object.defineProperty(v10, "length", { configurable: true, enumerable: true, set: f0 });
const o32 = {
    "execution": "async",
    "type": "minor",
};
gc(o32);
