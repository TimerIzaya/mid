function f0() {
    const o12 = {
        set d(a5) {
            const v6 = this.a;
            a5 instanceof a5;
            const o8 = {
            };
            o8.b = "-30271";
            const o9 = {
            };
            o9.b = "-30271";
            o9.a = -2;
            const o10 = {
            };
            o10.b = "-30271";
            o10.a = -2;
            o10.g = v6;
            const o11 = {
            };
            o11.b = "-30271";
            o11.a = -2;
            o11.f = "e";
        },
    };
    return o12;
}
f0();
f0();
f0();
const v24 = new BigInt64Array(3);
const v27 = new Int8Array(10);
new Uint16Array(4);
const v31 = `
    const v32 = v27 << BigInt64Array;
    Object.defineProperty(v24, v32, { enumerable: true, set: f0 });
    const v35 = !v32;
    let v36 = -838008458 | v35;
    Math.acos(-838008458);
    v36 ^ v35;
    v36--;
    Math.atan(-838008458);
`;
eval(v31);
try {
    new Uint8ClampedArray(3820);
} catch(e3) {
}
try {
    new Uint32Array(1024);
} catch(e7) {
}
try {
    new Int8Array(2020);
} catch(e11) {
}
new Set();
const v16 = new Array(9);
class C17 extends Uint8ClampedArray {
    constructor(a19, a20) {
        super(2020, a20, 2020);
        try {
            super[a19] = Uint8ClampedArray;
        } catch(e21) {
        }
        super.findLastIndex(a19, a19);
        try { a19(3820); } catch (e) {}
        a20 * Int8Array;
    }
    [Array];
    178;
    static [-1] = 3820;
    static 8 = Uint32Array;
}
const v25 = new C17(Uint32Array, 3820);
new C17(v16, 2020);
new C17(Uint32Array, 1024);
C17[2];
const o29 = {
    "apply": Array,
    "call": Array,
    "ownKeys": Array,
    "set": Array,
};
try {
    new Proxy(v25, o29);
} catch(e32) {
}
