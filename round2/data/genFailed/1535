const v1 = new Set();
class C2 extends Set {
    static [v1] = Set;
    constructor(a4) {
        super(a4);
        v1[this] = a4;
        super[super[v1]];
        return v1;
        this[8];
    }
    1000;
    static #b = Set;
    #g;
    static d = Set;
}
const v9 = new C2(Set);
const v10 = new C2(v9);
const v11 = new C2(v10);
function f12(a13, a14, a15) {
    const o24 = {
        "g": v10,
        [v1]: a13,
        n(a17, a18) {
            v11.length = 0;
            a18.clear(...a15, a14, ...a18, Set);
            v10.toString = a14;
            [[C2,a15,0,a15],v11];
            [a13];
            return v11;
        },
        "b": a14,
        "a": a14,
    };
    return o24;
}
f12(v10, v11, v1);
f12(v11, C2, v9);
f12(v1, C2, v9);
new Int32Array(1800);
const v36 = new Float64Array(4096);
const v39 = new Int8Array(123);
var d = v11;
const v41 = Symbol.matchAll;
v36[v41] = Set;
1800 | 9;
Object.defineProperty(C2, "d", { set: f12 });
Object.defineProperty(v36, 1, { writable: true, enumerable: true, get: f12, set: f12 });
%VerifyType(v41);
try {
    v39.at(-2147483648);
} catch(e46) {
}
