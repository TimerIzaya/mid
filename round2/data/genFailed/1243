[-4.0];
const v1 = [-1000000.0,-1.0,-5.0,849.3943078121504,582.113626369673,0.019374910404868495,0.7179645191505589];
[-3.5756921554920185,458.25491611045936];
const v6 = /]WZ(ab|cde)/myid;
const v7 = /a(?:b)/gmyisdv;
const v8 = /a||bc/misv;
class C9 {
    static #valueOf(a11, a12, a13, a14) {
        return v1;
    }
    constructor(a19, a20, a21) {
        a21[3068] %= v7;
        this[9];
        v8 < a21;
        new BigUint64Array(21);
        new Int32Array(1128);
        new Int32Array(253);
    }
}
new C9(-16n, 8n, v6);
const v34 = new C9(8n, 7610n, v8);
new C9(8n, -16n, v34);
class C36 extends C9 {
    set a(a38) {
        function F39(a41, a42) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a38;
        }
        new F39(this, this);
        const v44 = new F39(v34, v8);
        new F39(v44, this);
    }
}
new C36();
new C36();
new C36();
function f0() {
    const o7 = {
        "b": "valueOf",
        "h": "-12",
        p(a5) {
            try {
                a5 = "max";
            } catch(e6) {
            }
            return "max";
        },
        "d": "max",
        0: "max",
        "e": "-12",
        "f": "-12",
    };
    return o7;
}
f0();
f0();
let v10 = f0();
/X/sgy;
/[[xyz]]/iguy;
/(?:ab)/ig;
class C17 {
    o(a19, a20, a21) {
        const o22 = {
        };
        try {
            o22.g = a19;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.g = a19;
            o24.h = a19;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.g = a19;
            o26.h = a19;
            o26.d = this;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.g = a19;
            o28.h = a19;
            o28.a = a19;
        } catch(e29) {
        }
        return a19;
    }
}
new C17();
new C17();
new C17();
let v36 = ~f0;
const v37 = ++v36;
const v38 = ++v10;
v37 * v37;
~v38;
try {
    f0();
} catch(e42) {
}
