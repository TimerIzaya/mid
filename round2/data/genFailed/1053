let v2 = 2147483649;
const v3 = [-7.049028635544608e+307,0.9924918985979988,2.220446049250313e-16];
const v4 = [-0.0];
const v5 = [4.308504736091818e+307,0.1547727488306777,268974.37857028283,6.516670602658017e+307,-989349.9205182057,-1.706595166540635e+307];
function f6(a7, a8, a9, a10) {
    const o23 = {
        "a": a9,
        ...v5,
        "d": v2,
        [a9]: a9,
        __proto__: a10,
        "f": a7,
        "c": a9,
        [v3]: a8,
        toString(a12, a13) {
            new Uint8Array(6);
            new Int32Array(1297);
            new Uint8ClampedArray(9);
            return 255;
        },
    };
    return o23;
}
f6(v5, 11610, 255, v3);
f6(v3, f6(v4, v3, f6, v4), 255, v5);
new Int16Array(256);
new Uint16Array(8);
const v35 = new Int8Array(64);
v2 = 8;
let {"a":v36,"byteOffset":v37,"length":v38,} = v35;
v36.length = 8;
if (v36) {
    new Uint8ClampedArray(1);
    new Int16Array(16);
    new BigInt64Array(9);
} else {
    const v49 = v36;
}
function f0() {
    const o12 = {
        [1.0](a5) {
            let v4 = this;
            try {
                v4 -= v4;
            } catch(e6) {
            }
            return 1.0;
        },
        set c(a8) {
        },
    };
    return o12;
}
const v13 = f0();
const v14 = f0();
f0();
try {
    new Uint32Array(2);
} catch(e19) {
}
let v21 = Float64Array;
try {
    new v21(127);
} catch(e23) {
}
try {
    new Int32Array(3);
} catch(e27) {
}
class C28 extends Uint32Array {
    g;
    static #toString(a30, a31, a32) {
        const v33 = a31 ^ v14;
        let v34;
        try { v34 = a31(v33, a32, a31, v21, a30); } catch (e) {}
        return v34;
    }
    f = 2;
    #h = 127;
    static #c;
    [2] = v14;
    [v14];
    static e = v13;
}
const v35 = new C28();
const v36 = new C28();
new C28();
~f0;
v14.c;
const v40 = Int32Array instanceof C28;
let v41 = 0;
while (v41 < 9) {
    if (v40) {
        [Uint32Array,...v35];
    } else {
        [,v21,...v41] = v36;
    }
    v41++;
}
