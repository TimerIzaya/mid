new BigInt64Array(680);
const v5 = new Uint16Array(256);
const v8 = new Int16Array(127);
const v13 = Symbol.isConcatSpreadable;
v8[v13] = v13;
const v14 = v5.buffer;
const v15 = [-2.2250738585072014e-308,-3.9825309836367406,-2.2250738585072014e-308,5.0,1e-15,-1.0,NaN,-1000000000.0,1000.0];
const v16 = [-1000000.0,0.12773245613597073,0.4849857733941896,-935684.3422834831,-3.0,-920407.5640572926,-134.35140386563012,1000000.0,-1000000.0];
const v17 = [1.042461041621171e+307,1000000000.0,-1.0,-8.994358468529249e+307,6.2941158202473275,536.7546895761595,1.0,-4.574190910726918e+307,-1.0,-563348.9684467255];
try { v17(v16, Uint16Array, v14); } catch (e) {}
v15["findIndex"](256, v14, ...v16, Uint16Array);
function f0() {
}
function f4() {
    return 1000.0;
}
[-12,-128,-2127128313];
[-1199514128,-256,-399494904,1691155750,1024,4,9007199254740990,257];
const v7 = [10,10,65536,3,536870888];
[503995.4283523329,-1.0,-777.0283154210508,-1.7976931348623157e+308,-1000000000.0,1000.0,-3.0,3.0,-Infinity];
const v12 = [-0.9636783417061512,-2.2250738585072014e-308,-896.8963889803108,-1.0,-1.0,0.20336389066828253,0.3843286024091006];
[-1.7976931348623157e+308,2.2250738585072014e-308,-1000000000000.0,-812946.5336885256,-Infinity,472034.5592083947];
function f14(a15, a16, a17, a18) {
    v12.length **= 1000.0;
    return 26895n;
}
const v22 = f14(1000.0, 26895n, -57388n, -57388n);
const v23 = f14(1000.0, v22, v22, 26895n);
try { v7.reduce(f0, v23); } catch (e) {}
