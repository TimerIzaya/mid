[-36595,-49132,129,-1872039464,-256,-465436302];
const v4 = [-1915876673,-9007199254740992,9,-13823,-1,-96021522,25710,-2147483648,-6];
let v5 = [2,268435456,30328,4294967295];
const v12 = new Array(52);
7n << true;
v12 <= (v5 = v4) ? v12 : v5;
function f16(a17, a18) {
    const v19 = Array.prototype;
    try {
        v19.setInt16(1073741825n, v19);
    } catch(e21) {
    }
}
new Promise(f16);
const v0 = [];
let v3 = 1431998705n;
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a7;
    } catch(e8) {
    }
    try {
        this.d = a7;
    } catch(e9) {
    }
    try {
        this.e = a7;
    } catch(e10) {
    }
}
const v11 = new F4(v3, 536870912n);
const v12 = new F4(v3, v11);
const v13 = new F4(1795514456n, v12);
function f14(a15, a16, a17, a18) {
    const o26 = {
        o(a20, a21, a22, a23) {
            a21 ^ a16;
            try {
                v3 = a23;
            } catch(e25) {
            }
            return v0;
        },
        "f": v3,
        "c": v0,
        "e": a17,
        "a": a15,
    };
    return o26;
}
f14(1795514456n, v12, v11, v13);
f14(1795514456n, v11, v11, v11);
f14(1795514456n, v13, v13, v13) >>> 536870912n;
try {
    v13[v12] = 0.4354509306888742;
} catch(e34) {
}
try {
    v13.d = 1.0;
} catch(e35) {
}
