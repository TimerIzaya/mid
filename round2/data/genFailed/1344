new BigUint64Array(146);
let v6 = 512;
const v8 = new Uint16Array(v6);
const v11 = new BigUint64Array(255);
class C12 extends BigUint64Array {
    #b = 255;
    2147483649;
    static a;
    get h() {
        [...this,...v11,"10",...this,...v8];
        try {
            this.#b = v11;
        } catch(e15) {
        }
        return BigUint64Array;
    }
    1118 = 255;
    static #d = BigUint64Array;
    [v8] = Uint16Array;
}
new C12();
new C12();
new C12();
for (let i21 = 0, i22 = 10; i21 < i22; i21++, i22--) {
    v6 = 255;
    %VerifyType(BigUint64Array);
    v8["subarray"](i21, v6);
    const v36 = ~"subarray";
    let v38 = -(0.0 ^ -2147483647);
    Math.sinh("subarray");
    Math.asinh(0.0);
    Math.log10(v36);
    v38++;
}
class C3 {
    static #c = "isSafeInteger";
    a = 268435441;
    static set d(a5) {
        [a5?.[this]];
        const v9 = Symbol.iterator;
        const o18 = {
            [v9]() {
                let v11 = 10;
                const o17 = {
                    next() {
                        v11--;
                        const v15 = v11 == 0;
                        const o16 = {
                            "done": v15,
                            "value": v11,
                        };
                        return o16;
                    },
                };
                return o17;
            },
        };
    }
}
new C3();
new C3();
new C3();
let v23 = "a";
Object.defineProperty("boolean", "29489", { configurable: true, value: "e" });
try {
    v23 >>= "boolean";
} catch(e28) {
}
let v29 = DataView;
const v32 = 4294967295 >>> v29;
const v33 = v29--;
Math.cosh(v33);
v33 ** v32;
