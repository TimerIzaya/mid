new Float32Array(64);
const v5 = new Uint32Array(468);
const v8 = new Int8Array(193);
class C9 {
    n(a11, a12) {
        v8[1073741823];
        v5[Float32Array];
        super.a *= a12;
        [] = v5;
        return 64;
    }
    set e(a16) {
        const v18 = Symbol.iterator;
        const o27 = {
            [v18]() {
                let v20 = 10;
                const o26 = {
                    next() {
                        v20--;
                        const v24 = v20 == 0;
                        const o25 = {
                            "done": v24,
                            "value": v20,
                        };
                        return o25;
                    },
                };
                return o26;
            },
        };
    }
}
new C9();
new C9();
const v30 = new C9();
new Int8Array(255);
new Int16Array(256);
const v39 = new Int8Array(5);
try { v30(Int8Array, v39); } catch (e) {}
var f = 256;
v8 % v39;
class C42 extends Int8Array {
    static 6;
    10;
}
new C42();
new C42();
new C42();
