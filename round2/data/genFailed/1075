function f1() {
    return true;
}
const v2 = [-783225.9765869111,437263.9038569587,-7.882903982866742,-3.0];
const v3 = [-1e-15,-905.0631083030738,8.120821155660451e+307,1000.0,0.829120269450069,0.0,1.0243979928550316e+308,-5.0,-1.7976931348623157e+308,-925.1173816199503];
const v4 = [-1.3203443223622479e+308,0.15657721506495736,1.4468009257695918e+308,0.23217922358408183,3.622142295219909,3.0,1000000000.0,2.0];
class C9 extends f1 {
    static #toString(a11, a12, a13, a14) {
        try {
            f1();
        } catch(e16) {
        }
        return true;
    }
    constructor(a18, a19, a20) {
        super();
        for (let v21 = 0; v21 < 32; v21++) {
            a18["p" + v21] = v21;
        }
    }
}
new C9(v4, 64, 48293);
const v25 = new C9(v3, 64, 64);
const v26 = new C9(v25, -11, 48293);
class C28 extends v26.constructor {
    static #f;
    6 = v2;
    [v3];
}
new C28();
v25[128] = 48293;
true ** C28;
let v32 = -718074301;
Math.tanh(v25);
const v34 = v25 >> v25;
+v25;
Math.trunc(v32);
!v34;
let v38 = v32++;
--v38;
try {
    new Uint16Array(1565);
} catch(e3) {
}
try {
    new BigInt64Array(164);
} catch(e7) {
}
try {
    new Float64Array(12);
} catch(e11) {
}
class C12 extends Float64Array {
    static #valueOf(a14, a15, a16, a17) {
        try { a14.search(1565, 1565, Float64Array, Uint16Array, a16); } catch (e) {}
        let v19;
        try { v19 = a15.n(BigInt64Array); } catch (e) {}
        v19 instanceof BigInt64Array;
        return this;
    }
    #f;
    [1565] = 1565;
    #c = BigInt64Array;
    [Float64Array];
}
new C12();
new C12();
new C12();
try {
    new Int8Array(247);
} catch(e30) {
}
try {
    new Float32Array(135);
} catch(e34) {
}
try {
    new Float64Array(512);
} catch(e38) {
}
function f39(a40) {
    return a40;
}
class C41 extends f39 {
    c;
    e;
    3;
    [Float64Array] = Float64Array;
}
+Float64Array;
