class C3 {
    constructor(a5, a6) {
        this instanceof a5;
        [536870887,-4294967297,9007199254740992,268435441,65536];
        [16,8,3,536870912,255,268435456,-38680];
        [-9,-9,-4294967295,-62566267];
        -1000000000.0 / a5;
    }
    16;
    #o(a13) {
        const o16 = {
            "maxByteLength": 177760347,
        };
        const v18 = new SharedArrayBuffer(7, o16);
        new Int8Array(v18);
        return o16;
    }
}
const v21 = new C3(-1000000000.0, "2");
new C3("b", "b");
new C3(v21, C3);
new Array(1586);
const v30 = [42.02661087984848,2.220446049250313e-16,1000.0,-393004.28317066643,NaN];
[1000000000000.0,-5.0,-4.0,-311.3692307690743,4.0,-859889.025656724,-1.7976931348623157e+308,-1.463144734844846e+308,0.0];
[4.0,560.3906181826628,-1000000.0,5.988729861009814,2.2647094932859065e+307,-477.9401209538579];
try { ("b").startsWith("b", 1586); } catch (e) {}
C3.f = C3;
const v37 = 1073741825 ** v30;
v37 || v37;
"b" % "b";
Array[Math.expm1(v37)];
class C3 {
    get d() {
        with (this) {
            const o6 = {
            };
            try {
                o6.f = -2.0;
            } catch(e7) {
            }
            try {
                const o8 = {
                };
                o8.f = -2.0;
                o8.b = 1.5712237621497973e+307;
            } catch(e9) {
            }
            try {
                const o10 = {
                };
                o10.f = -2.0;
                o10.b = 1.5712237621497973e+307;
                o10.e = 1.5712237621497973e+307;
            } catch(e11) {
            }
            try {
                const o12 = {
                };
                o12.f = -2.0;
                o12.b = 1.5712237621497973e+307;
                o12.g = c;
            } catch(e13) {
            }
        }
        return 1758439631;
    }
}
new C3();
const v15 = new C3();
const v16 = new C3();
try {
    new Float64Array(128);
} catch(e20) {
}
try {
    new Int8Array(173);
} catch(e24) {
}
try {
    new Float32Array(5);
} catch(e28) {
}
try { Int8Array(v15); } catch (e) {}
const v30 = v15.d;
const o31 = {
};
try {
    new Proxy(v16, o31);
} catch(e34) {
}
for (let v35 = 0; v35 < 32; v35++) {
    v30["p" + v35] = v35;
}
