const v2 = new Uint8ClampedArray(16);
new Uint8Array(1075);
const v8 = new Uint8Array(9);
const v14 = new Uint32Array(12);
const v17 = new Int8Array(9);
const v20 = new BigInt64Array(1024);
v14[2033651406n] = Int8Array;
v2[40591804] = 12;
Object.defineProperty(v20, 1574740615, { writable: true, enumerable: true, value: v17 });
function f21(a22, a23, a24, a25) {
    v2[a25] = a23;
    try { v14.keys(); } catch (e) {}
    return 12;
}
f21(64n, 1024, 9, 12);
v8.toString = f21;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 10;
    } catch(e3) {
    }
    try {
        this.a = 10;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
const v8 = [137.0612834420083,0.29007233917532493,-3.9112243562284004,1000.0,-1000000000000.0,-3.0,-Infinity,1e-15,0.9046684512839006,6.752271952061747];
const v9 = [232414.49162509642,-1.6974301981758308e+308,-1000.0];
[-2.7983118115095437e+307,1000000000.0,-2.0,0.2648924590480397];
const v11 = [65536,-29001,536870889,-9007199254740992];
[1901853883,-12487,-16];
[-10,-42892,-19125,-2,751341490,256,11,7,-65537,-8];
class C14 extends F0 {
    static #c = v7;
    valueOf(a16, a17, a18, a19) {
        a19[Symbol.species] = v6;
        const v23 = [];
        Reflect.apply(v11.toLocaleString, v5, v23);
        v9["toSpliced"](a16, a18, Reflect);
        return this;
    }
    static d;
    static [v5] = v8;
}
new C14();
new C14();
new C14();
new C14();
for (let [v35] of v11) {
    Math.log10(-2);
    Math.round(v35);
    const v40 = -2 & -2;
    +v40;
    Math.fround(v40);
    Math.sin(v35);
    Math.sin(v8);
}
