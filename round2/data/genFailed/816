const v0 = [];
new Int8Array(9);
new Int16Array(1520);
const v9 = new Int32Array(5);
class C10 extends Int16Array {
    toString(a12, a13, a14, a15) {
        new Set();
        new Int32Array(a15);
        return 128;
    }
    #g = Int32Array;
    static #c = 5;
    268435439 = v9;
}
new C10();
new C10();
const v24 = new C10();
let v25;
try { v25 = v9.reduceRight(Int8Array); } catch (e) {}
Reflect.construct(Int16Array, [Reflect,v25 ^ v0,1520], Int32Array);
let [v30,v31] = v24;
v30 -= Int16Array;
-v9;
const o35 = {
    "maxByteLength": 777,
};
const v37 = new SharedArrayBuffer(777, o35);
new BigUint64Array(v37);
class C3 {
    #a = -1e-15;
    m(a5, a6) {
        try {
            a5.#a;
        } catch(e8) {
        }
        return this;
    }
    static 3449;
    [129] = -1585886438;
    #d;
    static a = -1e-15;
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
[v10,129,129,-1585886438];
[v11,v9,129];
const v14 = [-1e-15,v10,-1e-15,-1585886438];
try {
    new Uint32Array(255);
} catch(e18) {
}
try {
    new Float64Array(3);
} catch(e22) {
}
try {
    new Int32Array(1404);
} catch(e26) {
}
function f27(a28, a29) {
    v10["m"](v11, Float64Array, 1404);
}
new Promise(f27);
v14["map"](..."map", ..."map", 255, -1e-15, -1585886438, ..."map");
const v36 = v11[65535];
Int32Array != v36 ? Int32Array : v36;
