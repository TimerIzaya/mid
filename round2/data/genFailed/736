[-531.0268050383178,Infinity,1000000.0,7.073801415734277,-273855.1711769684,-1.0,0.07945832202150938,-1e-15,-1000000000.0,1.2439420339453949e+308];
[-2.0,326.3893145427776,-701802.6470408104,-1000000000000.0,0.7564302326566379,983.2939714321785,-515.7566476969239,1000.0];
const v2 = [4.0,-122.18863396835422,1000000.0,-610.3308257898539,-511.77654031667697,-47.297392044066896,2.220446049250313e-16,-2.406289299244742];
const v6 = [583706268,-128,-44667,10,-2147483647,10,16];
const v7 = [1745131631];
[23821,1429551786,-13,-47582,-1073741824,472520276,48289,8];
/1a+b/misu;
const v10 = /(ab|cde)\1(?=.)?/myisdv;
const v11 = /((?<a>.)\k<a>)/myiv;
const v12 = [591370151n,v10,v6,22278n];
v12.h = v12;
const v13 = [v7,v7];
[591370151n];
const v15 = [v13,v2];
function f16() {
    return v12;
}
v15.g = v11;
const o19 = {
    "maxByteLength": 16,
};
const v21 = new ArrayBuffer(3, o19);
new Uint8ClampedArray(v21);
try {
    new Float32Array(4);
} catch(e6) {
}
try {
    new Float32Array(512);
} catch(e10) {
}
try {
    new Float64Array(4096);
} catch(e14) {
}
class C15 extends Float32Array {
    static #c = Float32Array;
    c;
    129 = 512;
    static n(a17, a18, a19, a20) {
        return Float32Array;
    }
    d = Float32Array;
    [8];
    8;
    f;
}
const v22 = new C15();
new C15();
const v24 = new C15();
delete v24[v24];
function f26(a27, a28, a29, a30) {
    [1000];
    [9,1000,536870887];
    [0,896016504,15,-1,-422254890,62007,1073741824,4294967297];
    new WeakSet();
    return arguments;
}
f26(v24, v22, C15);
