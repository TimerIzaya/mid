function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = -281017612;
}
const v3 = new F0();
const v4 = new F0();
new F0();
v3[7] = -3.0;
for (let v15 = 0; v15 < 32; v15++) {
    v4["p" + v15] = v15;
}
const o20 = {
    "maxByteLength": 3031,
};
const v22 = new ArrayBuffer(3031, o20);
new BigUint64Array(v22);
let v0 = 255n;
class C3 {
    static g = -65537n;
    set f(a5) {
        const o8 = {
            "maxByteLength": 3912,
        };
        const v10 = new SharedArrayBuffer(2, o8);
        try {
            new Int32Array(v10);
        } catch(e13) {
        }
    }
}
new C3();
const v15 = new C3();
const v16 = new C3();
function f17() {
    return -65537n;
}
try {
    new Int8Array(257);
} catch(e21) {
}
try {
    new Int8Array(16);
} catch(e25) {
}
try {
    new Uint32Array(9);
} catch(e29) {
}
Object.defineProperty(v15, "c", { enumerable: true, value: 16 });
delete v15?.c;
try { v15.tan(-65537n, v16); } catch (e) {}
Math.exp(Uint32Array);
v0-- | Uint32Array;
4.0 >> Uint32Array;
Math.sin(-3);
Math.ceil(v0);
