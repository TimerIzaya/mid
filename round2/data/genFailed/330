new Uint8Array(2);
new Int32Array(10);
new Float32Array(5);
class C9 extends Uint8Array {
    static {
        this[Symbol.search];
    }
    f;
    static #toString(a15, a16, a17, a18) {
        class C19 {
            #b;
            h = this;
            [this];
        }
        new C19();
        new C19();
        new C19();
        return a18;
    }
}
new C9();
const v24 = new C9();
new C9();
function f26() {
    return Uint8Array;
}
class C27 extends Float32Array {
    #f;
    [v24];
    [2] = f26;
    [C9];
}
new C27();
new C27();
new C27();
try {
    f26();
} catch(e32) {
}
class C6 {
    [-10784];
    static get h() {
        try {
            this.f = this;
        } catch(e8) {
        }
        [0.4828656272398363,1.0,-1000.0,2.220446049250313e-16,2.220446049250313e-16,-614681.1810501063,-1.0833534195523858e+308];
        [7.593209522812007,596.3938857830992,1.7455480281706856e+308];
        [-1.7976931348623157e+308,-6.141735696326534e+307,3.0,-0.0,1.0804389682520476e+308,1000000.0,283137.47491474287,1000000000.0,-563673.086425327,885707.1518158512];
        return 0;
    }
    [14] = -10784;
    static [5];
    static c;
    4;
}
const v12 = new C6();
const v13 = new C6();
const v14 = new C6();
const v15 = /a\s/gmyv;
const v16 = /(?=)(?<!a)+/sgv;
/a\s?/m;
let v21;
try { v21 = v14.transfer(v13, v15, -1176473891); } catch (e) {}
if (v21 < v21) {
    const v23 = v12 / C6;
    v23[9] = v23;
} else {
    v16[Symbol.isConcatSpreadable];
}
