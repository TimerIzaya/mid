class C3 {
    static [536870887n];
    static set e(a5) {
        try { new a5(a5); } catch (e) {}
        a5.__proto__ = a5;
        try { a5(a5, a5); } catch (e) {}
        a5 - 536870887n;
    }
    [536870887n] = 536870887n;
    constructor(a10, a11) {
        [-4294967296,-9223372036854775807,29239,-269610966];
        const v13 = [256,127,-2147483649,7,-21818,1792316967,12,-5,536870889,4096];
        [268435456,536870912,-62449,1073741824,22547279,-14];
        v13 - 536870887n;
    }
}
const v16 = new C3(-12n, 536870887n);
new C3(536870887n, 536870887n);
const v18 = new C3(9223372036854775807n, -12n);
class C19 extends C3 {
    get f() {
        this.e >>= this;
        !this;
        return this;
    }
    0;
    static #g;
    2;
    c;
    [9223372036854775807n];
}
new C19();
const v26 = new C19();
const v27 = new C19();
const v28 = [v26,536870887n,v27];
const v29 = [v16,C3,v16];
[536870887n];
function f31(a32, a33, a34) {
    9223372036854775807n >>> -7435;
    Math.abs(a34);
    const v41 = !9 % 9;
    9223372036854775807n | -7435;
    Math.log10(a34);
    v41 & 9;
    return v27;
}
f31(v18, v29, v28);
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = undefined;
    } catch(e3) {
    }
    try {
        this.a = undefined;
    } catch(e4) {
    }
    try {
        this.e = undefined;
    } catch(e5) {
    }
}
new F1();
new F1();
new F1();
try {
    new Uint16Array(255);
} catch(e12) {
}
try {
    new Uint8Array(9);
} catch(e16) {
}
try {
    new BigInt64Array(9);
} catch(e20) {
}
try {
    new Int16Array(1688);
} catch(e27) {
}
try {
    new Float32Array(4);
} catch(e31) {
}
try {
    new Float32Array(14);
} catch(e35) {
}
const o39 = {
    "execution": "sync",
    "type": "minor",
};
gc(o39);
Object.defineProperty("minor", "b", { configurable: true, enumerable: true, value: 5.298746663013336 });
Reflect.construct(Uint8Array, ["sync"], Uint16Array);
