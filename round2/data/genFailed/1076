function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = -967357222;
    this.d = -967357222;
}
new F0();
new F0();
new F0();
const v8 = new Float32Array(127);
new Int32Array(34);
new Int16Array(1956);
let v17 = -1751322978n;
try {
    const o18 = {
    };
    new Int32Array(o18, 127, -9007199254740991);
} catch(e21) {
}
v8.byteOffset = 1956;
let v23 = -65535;
11 + v23;
const v27 = -v17;
Math.sin(++v23);
v17++;
Math.trunc(v23);
Math.log(v27);
const v0 = /r3/sidgmyv;
const v1 = /[xyz{1,}?(x)(x)(x)\3*]/idu;
const v2 = /9kUn(?:a?)*a[a]a(?!b)?/smyv;
const v3 = [v0,v1,v0,v1,v2];
const v4 = [v3,v0];
const v5 = [v2,v0,v1,v4,v2];
function f9(a10, a11, a12) {
    const o19 = {
        "h": a12,
        "e": 536870888,
        "f": v5,
        "g": a10,
        set a(a14) {
            Object.defineProperty(v1, 2700, { writable: true, enumerable: true, value: a12 });
            super[-308432.837076057];
        },
        [v3]: -8,
        "b": a10,
        "a": a12,
    };
    return o19;
}
const v20 = f9(v1, v4, -8);
const v21 = f9(v5, v3, 50967);
const v22 = f9(v21, v4, 536870888);
const v24 = [v20,v22,-8,-8,[v21,v21,-8,v2,v22]];
const v25 = [v24,v24,v5,v24];
let v26;
try { v26 = v1.compile(-8, ...v25, ...v25, ...v1); } catch (e) {}
if (v25 >= v5) {
    const v29 = Symbol.iterator;
    const o38 = {
        [v29]() {
            let v31 = 10;
            const o37 = {
                next() {
                    v31--;
                    const v35 = v31 == 0;
                    const o36 = {
                        "done": v35,
                        "value": v31,
                    };
                    return o36;
                },
            };
            return o37;
        },
    };
} else {
    try {
        v2.flags = v26;
    } catch(e39) {
    }
}
