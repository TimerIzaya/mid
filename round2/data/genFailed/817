function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = "8dwu";
    this.e = a9;
}
new F6("gWkT", 12, "bigint", "gWkT");
const v13 = new F6(12, 12, "8dwu", "gWkT");
new F6(v13, -42975, "8dwu", "8dwu");
new Int8Array(3184);
new Uint16Array(1528);
new Uint8Array(64);
class C24 extends Uint16Array {
    #b = "8dwu";
    3150999282;
}
const v25 = new C24();
const v26 = new C24();
new C24();
delete C24?.e;
v26.g = v25;
try {
    new BigInt64Array(4096);
} catch(e9) {
}
try {
    new Uint32Array(2647);
} catch(e13) {
}
try {
    new Float32Array(2845);
} catch(e17) {
}
class C18 extends BigInt64Array {
    constructor(a20, a21) {
        super(-9, -9, a20);
        function f22() {
            return Float32Array;
        }
    }
    static e;
    #valueOf(a24, a25, a26, a27) {
        new Float32Array(a24, a27);
        for (let v29 = 0; v29 < 32; v29++) {
            this["p" + v29] = v29;
        }
        return 2845;
    }
}
new C18(Uint32Array, -1837495802n);
new C18(33835, -1073741824n);
const v34 = new C18(-1073741824n, 129n);
const o38 = {
    "execution": "async",
    "type": "minor",
};
gc(o38);
("minor").length;
Object.defineProperty(v34, 8, { configurable: true, get: gc, set: gc });
