function f0() {
}
new Int32Array(1024);
new Float32Array(512);
const v12 = new Uint8ClampedArray(6);
class C13 extends Int32Array {
    10 = -9007199254740992;
    256;
    [v12] = -9007199254740992;
    [Float32Array] = 6;
}
const v14 = new C13();
new C13();
new C13();
v14.length;
let v0 = -1024n;
try {
    new Uint32Array(6);
} catch(e6) {
}
try {
    new Int8Array(1024);
} catch(e10) {
}
try {
    new Int32Array(147);
} catch(e14) {
}
function f18() {
    return 1n;
}
function f19(a20, a21, a22) {
    function f24(a25) {
        try {
            a25 = a21;
        } catch(e26) {
        }
    }
    this.onmessage = f24;
    ~1n;
    --v0;
    +v0;
}
const v34 = ["function",6,1n];
const o35 = {
    "arguments": v34,
    "type": "function",
};
new Worker(f19, o35);
