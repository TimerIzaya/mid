new Int16Array(165);
const v8 = new Float32Array(5);
new BigInt64Array(7);
const v14 = new Array(9);
let v15;
try { v15 = v14.forEach(Array, ...1.8697940262974733, Float32Array, 7); } catch (e) {}
String == 1.8697940262974733;
Object.defineProperty(v8, "f", { writable: true, enumerable: true, get: Array, set: Array });
v8 != Float32Array;
switch (v8) {
    case 9:
        v8.valueOf = Array;
        delete v14[10000];
        v15 >>= Array;
        break;
}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -128;
    } catch(e3) {
    }
    try {
        this.d = -128;
    } catch(e4) {
    }
    try {
        this.g = -128;
    } catch(e5) {
    }
}
const v6 = new F0();
new F0();
new F0();
const v9 = [9007199254740991,618267092,268435456];
[4,255,8,30390,298606674,-9223372036854775807,649838040,1804029546];
[8,6,1,2147483648];
const v19 = [v6,6n];
const v20 = ("object").lastIndexOf;
const v21 = Reflect.apply(v20, v9, v19);
[v6,[-534007793n]];
[F0,"10000",536870912n,F0];
try { v21(Reflect, v20, Reflect); } catch (e) {}
