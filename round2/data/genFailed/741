class C3 {
    static #toString(a5, a6) {
        try {
            super.imul();
        } catch(e8) {
        }
        return a5;
    }
    constructor(a10) {
        let v11;
        try { v11 = new a10(); } catch (e) {}
        try { new v11(-7.916018790240489, a10); } catch (e) {}
    }
    #b;
    [-7.916018790240489] = Infinity;
}
const v13 = new C3(-7.916018790240489);
const v14 = new C3(0.6399417698210198);
new C3(Infinity);
/()K(?:a{5,1000000}){3,1000000}/gyidv;
const v17 = /a[a-z]/s;
const v18 = /a\bc[foo(?<!bar)baz]+/gmidv;
new Float32Array(1617);
new Float32Array(4038);
new BigUint64Array(6);
let v28;
try { v28 = v18(v14, C3, Float32Array, 1617); } catch (e) {}
const v29 = v17[1617];
try { new v28(v29, v28, 4038, 0.6399417698210198); } catch (e) {}
new Date();
v17[Symbol.toPrimitive]?.[4096];
v14.g = v13;
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -27424;
    } catch(e3) {
    }
    try {
        this.e = -27424;
    } catch(e4) {
    }
    try {
        this.b = -27424;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
[-9007199254740990];
[-3,9,3,-256,1,4294967296];
const v14 = [5,9,8,268435441,1472060778,-11642];
class C15 extends F0 {
    toString(a17, a18) {
        const o21 = {
            "maxByteLength": 924,
        };
        const v23 = new SharedArrayBuffer(315, o21);
        try {
            new Uint32Array(v23);
        } catch(e26) {
        }
        return v14;
    }
}
new C15();
let v28 = new C15();
const v29 = new C15();
!v29;
let v31 = isNaN;
try {
    v31 <<= v31;
} catch(e32) {
}
Math.expm1(-2147483648n);
const v36 = v28--;
Math.asinh(v36);
v36 - !-2147483648n;
!-2147483648n;
