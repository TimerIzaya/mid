class C3 {
    static #n(a5) {
        try {
            const o6 = {
            };
            this.setDate(-1824155815, o6);
        } catch(e8) {
        }
        return a5;
    }
    #d;
    [546174541] = -15285;
    static [-1824155815] = 546174541;
    static [546174541];
    #a = -15285;
}
const v9 = new C3();
const v10 = new C3();
new C3();
let v12 = Set;
new v12();
function f14(a15, a16) {
    const o23 = {
        "d": -1824155815,
        ...v9,
        __proto__: a16,
        "f": v10,
        "c": 546174541,
        65537: -15285,
        ...C3,
        n(a18, a19, a20, a21) {
            v10[128];
            return a16;
        },
        "b": v9,
        [a16]: C3,
        "h": a16,
    };
    return o23;
}
f14(-15285, C3);
const v26 = f14(-15285, f14(-1824155815, C3));
new BigInt64Array(3);
new Uint32Array(12);
new Float32Array(100);
v26[Symbol.match];
v12--;
Math.atan(-1.2284486752161886e+308);
Math.imul(-4294967296, 3);
v26 >>> 9007199254740991;
class C3 {
    [0];
    static get a() {
        const v5 = this.__proto__;
        let v6;
        try { v6 = this.toString(0, this); } catch (e) {}
        v6 % this;
        return v5?.g;
    }
    static a = -2147483648;
    static #d;
    130;
    static #a;
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v11;
    } catch(e17) {
    }
    try {
        this.h = C3;
    } catch(e18) {
    }
}
const v19 = new F12(v11, v9, 0);
const v20 = new F12(v11, C3, v9);
new F12(v20, v11, F12);
class C22 {
    n(a24, a25, a26, a27) {
        [-0.0,-1e-15,-364413.2293424298,0.44888169230971064,5.0];
        [993120.579140583,5.0,-2.2250738585072014e-308,1000000000000.0,6.754662447070299,-55931.8000726694,-8.070487680814072e+307];
        [0.0,Infinity,377736.76677035284,0.3617642830916389];
        Reflect.construct(C3, [], a27);
        return v10;
    }
    static d;
    static 7 = v9;
    129 = v9;
}
new C22();
const v35 = new C22();
let v36 = new C22();
var c = C3;
const v38 = v11 !== v35 ? v11 : v35;
for (const v39 of v20) {
    try {
        v38.b = -9.70395426032874;
    } catch(e40) {
    }
}
try {
    v36 = v19;
} catch(e41) {
}
