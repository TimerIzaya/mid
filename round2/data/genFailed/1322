let v1 = -382.4884424617503;
let v6 = WeakMap;
new v6();
const v8 = [-22537,-16,30177,-9007199254740992,-37260,-4294967296,-3838,-2,-54407,1073741824];
[-2147483647,4096,8,4294967296,-9007199254740992,4,33332111];
const v10 = [-9007199254740992,3];
class C14 extends v6 {
    toString(a16, a17, a18, a19) {
        (a17 >= v8 ? a17 : v8) % a18;
        Math.sqrt(29986);
        -a17;
        return 29986 && a17;
    }
    [65535] = v1;
}
const v31 = new C14();
new C14();
const v33 = new C14();
try { v33(v33, 65535, v6, "undefined", 65535); } catch (e) {}
[v33,C14,1082804032,65535];
[v33,v10,v31,"undefined",[C14,1082804032,v10]];
v1 = 7.9351510754050345;
Math.imul(8231, 8231 + v6);
!-62477 ** -62477;
Math.tan(v6--);
const v0 = [];
function f1() {
    return v0;
}
try {
    new BigInt64Array(2);
} catch(e5) {
}
try {
    new Float64Array(129);
} catch(e9) {
}
try {
    new Uint8ClampedArray(256);
} catch(e13) {
}
try {
    new BigUint64Array(4);
} catch(e20) {
}
try {
    new BigUint64Array(4096);
} catch(e24) {
}
try {
    new Uint32Array(783);
} catch(e28) {
}
-Infinity;
try {
    ("undefined").toUpperCase();
} catch(e33) {
}
throw "f";
try {
    new Int16Array(3);
} catch(e37) {
}
try {
    new Int32Array(4096);
} catch(e41) {
}
try {
    new BigInt64Array(3);
} catch(e45) {
}
