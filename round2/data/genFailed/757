class C3 {
    static toString(a5) {
        this[-1] = this;
        [-4294967295,-8,-9223372036854775807];
        [-9223372036854775808,-41921];
        return [55291,4294967295,-65535];
    }
    f = 5;
    b = 5;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
class C15 extends C3 {
    #g;
    68 = v12;
    static {
        [NaN,-392.11675456804574,2.0,0.7103120357120046,0.5943102153687679,-2.2250738585072014e-308,2.0];
        [1.7473769358073658e+308];
        [676201.192754322,194.34904505551094,-374121.7856116914,766599.9451488091,-1000000.0,-62632.537533090916,2.220446049250313e-16];
    }
    constructor(a21, a22, a23, a24) {
        super();
        try { v13.isInteger(5); } catch (e) {}
        %VerifyType(delete a23[a22]);
    }
}
const v27 = new C15(v13, C15, v13, C3);
const v28 = new C15(v13, v27, v27, v14);
let v29 = new C15(C3, v12, C3, v27);
[v12];
const v31 = [v27,C3];
const v32 = [v31,v28,v31,C15,v31];
Math.fround(2147483649);
-2.0 || -2.0;
~-2.0;
Math.acos(v32);
~2147483649;
Math.sinh(64);
Math.hypot(1079164595 - 1079164595);
Math.round(v29);
v29--;
v29 - 64;
/0RgW/sigm;
/(ab|cde)/idmuy;
/[^(\2)(\1)]/smv;
try {
    new Float32Array(4);
} catch(e10) {
}
let v12 = Int32Array;
try {
    new v12(7);
} catch(e14) {
}
let v15 = 185;
try {
    new Int8Array(v15);
} catch(e18) {
}
try {
    v15 = 7;
} catch(e22) {
}
Math.abs(v12);
let v27 = ++v12;
Math.log1p(v27);
v27++;
