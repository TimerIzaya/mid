class C3 {
    static #m(a5) {
        try { a5(16, a5, 16, this); } catch (e) {}
        const v8 = Symbol.iterator;
        const o17 = {
            [v8]() {
                let v10 = 10;
                const o16 = {
                    next() {
                        v10--;
                        const v14 = v10 == 0;
                        const o15 = {
                            "done": v14,
                            "value": v10,
                        };
                        return o15;
                    },
                };
                return o16;
            },
        };
        return o17;
    }
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
const v22 = new Map();
function f23(a24, a25, a26) {
    const o27 = {
        "b": a25,
        "h": -4.0,
        "e": a26,
        __proto__: v19,
        ...v20,
        "d": C3,
        "f": C3,
        "c": a25,
        "a": a26,
        "g": v18,
    };
    return o27;
}
f23(v22, f23(v19, v18, C3), v20);
f23(C3, v18, v22)[159];
%VerifyType(-3.6477531109301893);
try { v18.bind(); } catch (e) {}
let v33 = [606500.060070835,7.696806813061645e+307,-2.220446049250313e-16,2.191200621566294,3.0,-3.0,NaN,1000000000.0];
[4.0,1.0681283494772104e+307];
const v35 = [1000000000.0];
v33 = v20;
v20[4];
v19.__proto__;
Object.defineProperty(v35, 165, { writable: true, enumerable: true, get: f23, set: f23 });
try {
    new Uint8Array(2433);
} catch(e3) {
}
try {
    new Int16Array(2);
} catch(e7) {
}
try {
    new Uint8ClampedArray(4);
} catch(e11) {
}
const v19 = Symbol.split;
const t13 = "t";
t13[v19] = Uint8ClampedArray;
const v20 = v19 >= 1.6506912029150606e+308;
const o21 = {
};
try {
    o21.d = v20;
} catch(e22) {
}
try {
    const o23 = {
    };
    o23.d = v20;
    o23.e = v20;
} catch(e24) {
}
try {
    const o25 = {
    };
    o25.d = v20;
    o25.e = v20;
    o25.c = v20;
} catch(e26) {
}
try {
    const o27 = {
    };
    o27.d = v20;
    o27.e = v20;
    o27.g = 1.6506912029150606e+308;
} catch(e28) {
}
