const v0 = [];
class C1 {
    constructor() {
        let [] = super[this];
        this.__proto__;
    }
    static n() {
        this.h = this;
        try {
            super.values(v0, this, v0, this, this);
        } catch(e7) {
        }
        return this;
    }
}
new C1();
const v9 = new C1();
const v10 = new C1();
new Array(256);
class C14 extends C1 {
    [C1] = C1;
    static set a(a16) {
        let v17;
        try { v17 = new a16(Array, a16, Array, ...this, a16, this); } catch (e) {}
        function F18(a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            this.c = v10;
        }
        const v22 = new F18(v0, v17);
        new F18(v9, Array);
        new F18(v9, v22);
    }
    static [v10] = v9;
    105;
}
const v25 = new C14();
const v26 = new C14();
new C14();
let v28;
try { v28 = v9.setUint32(v0); } catch (e) {}
v25[C1];
v28 = WeakRef;
for (const v31 in v26) {
    try {
        Array(256);
    } catch(e33) {
    }
}
