const v0 = [-734031.9908234202,-62.932243003538815,2.220446049250313e-16,-717.3903462541186];
const v1 = [2.220446049250313e-16,-8.010601271427705,-5.0,5.0,Infinity];
[-644.565120448056,3.8895563105416535];
const v5 = new BigUint64Array(0);
new BigInt64Array(2);
new Int16Array(6);
try { v0(v1, BigInt64Array, 6, 2, v1); } catch (e) {}
Object.defineProperty(v5, "f", { writable: true, value: 2 });
const o15 = {
    "maxByteLength": 209,
};
const v17 = new SharedArrayBuffer(209, o15);
new Float32Array(v17);
class C3 {
    o(a5, a6) {
        let v7;
        try { v7 = a5(this, "-1473824948"); } catch (e) {}
        let v8;
        try { v8 = a5.concat(a5, a5); } catch (e) {}
        a6.length *= v8;
        function F9(a11, a12) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a12;
            } catch(e13) {
            }
        }
        new F9(a6, "-1473824948");
        new F9("ly", "-1073741824");
        const v16 = new F9(v7, a6);
        return v16;
    }
}
const v17 = new C3();
const v18 = new C3();
const v19 = new C3();
new WeakSet();
function f22() {
    return WeakSet;
}
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v17;
    } catch(e27) {
    }
    try {
        this.c = a26;
    } catch(e28) {
    }
}
const v29 = new F23(v17, v17);
const v30 = new F23(C3, v17);
new F23(v19, v17);
v19["o"](v30, "-1473824948", v29, f22, v18);
class C34 {
    static #f;
    a;
    f = "-1073741824";
    static 4;
    static 0;
}
new C34();
new C34();
new C34();
