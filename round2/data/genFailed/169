function f0() {
}
let v2 = "m";
const v5 = new WeakMap();
let v11 = new Int32Array(0);
let v12 = 6;
let v13 = Uint8ClampedArray;
new v13(v12);
const v17 = new BigUint64Array(738);
Object.defineProperty(v2, "function", { enumerable: true, value: v2 });
v5["set"](1000000000.0, "set");
Object.defineProperty(v5, "h", { writable: true, enumerable: true, get: f0 });
function f20() {
    return BigUint64Array;
}
({"byteOffset":v11,"g":v2,"length":v12,...v13} = v17);
let v24 = 0.0;
const v25 = --v24;
v24++;
v24--;
Math.pow(v25, 7);
-"number";
try {
    new Uint32Array(7);
} catch(e3) {
}
try {
    new Float64Array(88);
} catch(e7) {
}
try {
    new Int8Array(2497);
} catch(e11) {
}
/(?:a*)+xyz{1,}/gv;
/N6g*/sigy;
/(?<!)*/sdgmu;
function f15() {
    return Float64Array;
}
function f16() {
    return 88;
}
class C20 extends Uint32Array {
    static #d = 2497;
    #f = 9n;
    g = Uint32Array;
    #e;
}
new C20();
new C20();
new C20();
const o27 = {
    "execution": "sync",
    "type": "minor",
};
gc(o27);
