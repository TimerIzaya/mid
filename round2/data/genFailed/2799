const v2 = new Uint8Array(129);
new Float32Array(3405);
const v8 = new Int8Array(7);
class C9 {
    p(a11, a12, a13) {
        a13[8] = Int8Array;
        Math.sqrt(a13);
        const v17 = Math.acosh(a13);
        const v18 = -28898 && Uint8Array;
        Math.atan2(-28898 | a13, 3405);
        Uint8Array && v18;
        ++a13;
        return v17;
    }
    #a;
    g;
}
const v23 = new C9();
const v24 = new C9();
const v25 = new C9();
class C26 {
    #d;
    [C9];
    #toString(a28, a29, a30, a31) {
        [65536,4294967297,1767617250];
        [10000,10000];
        [14411,4096,16240];
        return this;
    }
    static [-2] = v24;
    #f = v8;
    static h;
}
new C26();
new C26();
const v41 = new C26();
v41 / v41;
function f43() {
    return 7;
}
Object.defineProperty(v25, Uint8Array, { writable: true, enumerable: true, get: f43, set: f43 });
v24[f43] += 129;
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a47;
}
new F44(v23, v2);
new F44(v25, F44);
new F44(v23, 3405);
