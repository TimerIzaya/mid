new Uint16Array(1024);
const v5 = new Int32Array(1632);
const v8 = new Float64Array(2787);
class C9 extends Uint16Array {
    30 = v5;
    m(a11, a12, a13, a14) {
        [-65535,4618,4294967295,2147483648,2,1];
        const v16 = [512,-2,-365981175,129,2,444777147,-128,-3,-9007199254740990];
        const v17 = [1,624210254];
        let v18;
        try { v18 = v16.join(a12); } catch (e) {}
        v18.__proto__;
        return v17;
    }
    a;
    [Int32Array] = Uint16Array;
    static [v8];
}
new C9();
new C9();
new C9();
const v24 = new Date();
C9[v24] = v5;
v8[7] = 1024;
C9 += v24;
for (let i26 = 0; i26 < 9; i26++) {
    const v35 = +v8;
    Math.acos(17953);
    const v37 = !v35;
    Math.sin(v8);
    Math.tanh(v35);
    v35 % v37;
}
let v1 = 2147483648;
class C3 {
    2147483648;
    6 = 0.4591222219093227;
    constructor(a5) {
        const v6 = +this;
        v6 - -9;
        Math.round(1073741824);
        Math.log2(v6);
    }
    static 8 = v1;
    static #h;
    e = 0.4591222219093227;
}
new C3(0.4591222219093227);
const v14 = new C3(1000000000000.0);
const v15 = new C3(v1);
class C16 {
    p(a18, a19, a20, a21) {
        v14 % v14;
        try { a20(v15, a19); } catch (e) {}
        return -4096;
    }
    c;
    #valueOf(a28, a29, a30, a31) {
        const o34 = {
            "maxByteLength": 536870889,
        };
        const v36 = new SharedArrayBuffer(4, o34);
        try {
            new Uint8ClampedArray(v36);
        } catch(e39) {
        }
        return 4;
    }
}
new C16();
new C16();
new C16();
try {
    v1 &= v1;
} catch(e46) {
}
const v49 = !v15;
v49 / v49;
Math.asin(C3 * -7n);
