[1000000000000.0,-1000000000.0,-440.5429624501122,2.220446049250313e-16,0.0,3.902577716114741e+307,803817.1201561913,1e-15];
const v7 = [-1000000000000.0,2.2250738585072014e-308,-1000000000000.0,-811.7836934026399,-260.4126786571088];
let v8 = [802952.6351131308,493.78471776008405,580601.0369716317,2.0,-517.6870259735547,-1000000.0,-0.0,0.9600000026994867,-439399.0904977146];
new Int8Array(257);
new Uint8Array(117);
new Float32Array(3230);
%VerifyType(Int8Array);
v8 = v7;
class C18 extends Uint8Array {
    static 15;
    static #a;
    1073741823 = Uint8Array;
    [v8];
}
new C18();
new C18();
new C18();
class C3 {
    n(a5) {
        const v6 = -65537 << a5;
        const v8 = Symbol.toPrimitive;
        const o11 = {
            [v8]() {
                Symbol(Symbol);
                return v6;
            },
        };
        return Symbol;
    }
    static #a;
    f;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a18;
    } catch(e20) {
    }
    try {
        this.e = v13;
    } catch(e21) {
    }
}
const v22 = new F16(v14, -5319);
new F16(C3, -65537);
new F16(v12, -65537);
Object.defineProperty("toString", "length", { writable: true, configurable: true, value: -5319 });
const v30 = typeof v12 === "bigint";
const t34 = -5319;
t34[2] = 31462;
let v31;
try { v31 = v22.n(31462); } catch (e) {}
const v35 = [-65537,F16,"257"];
["257",v35,v30,v35,-65537];
[v14,v31,v30];
