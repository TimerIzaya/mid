class C3 {
    static set f(a5) {
        const t2 = "toISOString";
        t2.length |= 421.41561705134313;
        const t4 = "toISOString";
        t4[9] >>= a5;
    }
    static {
        const t8 = "toISOString";
        t8[6] = super.e;
    }
    static [257];
    constructor(a10, a11) {
        [6,-10,-4294967295,-9007199254740991,536569106,27652,268435441,-11545];
        [127,-50741,10];
        [10,6,1073741824,31172,-268435456,128,2147483647,129,2147483648];
    }
}
const v15 = new C3(257, 257);
const v16 = new C3(421.41561705134313, C3);
const v17 = new C3("toISOString", v16);
function f18() {
    return "toISOString";
}
function F22(a24, a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a27;
}
new F22(v15, 421.41561705134313, -207668.79555121437, F22);
const v29 = new F22(C3, -207668.79555121437, 421.41561705134313, 257);
const v30 = new F22(v29, 0.0, 0.0, F22);
let v32 = 2398n;
v32 = 268435439n;
for (const v34 in v17) {
    let v35;
    try { v35 = v30.o(v34); } catch (e) {}
    try { v35.sign(); } catch (e) {}
    /d/;
    /[a*?j+]/myi;
    /\u0060/gydu;
}
function f0() {
}
function f1() {
    const o8 = {
        "c": f0,
        "b": f0,
        "d": f0,
        "f": f0,
        "e": f0,
        set a(a3) {
            const v6 = new Array(255);
            Object.defineProperty(Array, v6, { enumerable: true, get: Array, set: Array });
            try {
                v6.toString = Array;
            } catch(e7) {
            }
        },
    };
    return o8;
}
const v9 = f1();
const v10 = f1();
const v11 = f1();
class C12 extends f1 {
    static #o(a14, a15) {
        a14 != a15;
        return a15;
    }
    static {
        try {
            this.__proto__ = v11;
        } catch(e18) {
        }
    }
    static {
        for (let v20 = 0; v20 < 100; v20++) {
            f1();
        }
    }
}
const v22 = new C12();
new C12();
const v24 = new C12();
class C25 {
    m(a27, a28) {
        let v30 = 2;
        ++v30;
        Math.log10(v30);
        ++v30;
        return this;
    }
    h = v11;
    1073741825;
    #b;
    static #g = v9;
    [v22] = v11;
    #c = v9;
}
new C25();
new C25();
new C25();
function f38() {
    return v10;
}
try {
    v24.f = v22;
} catch(e42) {
}
try {
    f1 = f38;
} catch(e43) {
}
f38();
!v22;
