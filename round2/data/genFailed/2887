function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = 13;
}
new F0();
const v4 = new F0();
const v5 = new F0();
class C6 extends F0 {
    constructor(a8) {
        super();
        Object.defineProperty(a8, "h", { writable: true, enumerable: true, value: F0 });
        Reflect.construct(a8, [Reflect,a8], a8);
    }
    valueOf(a13, a14) {
        const o17 = {
            "maxByteLength": 1297,
        };
        const v19 = new ArrayBuffer(127, o17);
        new Uint16Array(v19);
        return o17;
    }
}
const v22 = new C6(F0);
const v23 = new C6(v22);
const v24 = new C6(C6);
class C28 extends C6 {
    static toString(a30, a31, a32) {
        const v33 = v23.f;
        F0 /= F0;
        let v34;
        try { v34 = v33(...v4, F0, v33, a32); } catch (e) {}
        a30 = v34;
        [20610,1789819167,-14,1073741824,-2147483649,1];
        [39673145,58910,61727,2137604659,-4294967296,6,1073741825,257];
        [-1379379255,57519,10693,51650,46228,-1,-11678,8,-1362045564,-1685];
        return v24;
    }
    [C6];
    #f;
    static #b;
    ["object"] = v5;
}
new C28();
new C28();
const v40 = new C28();
try {
    new C6(6);
} catch(e43) {
}
for (const v44 of "object") {
    !10000 >>> 2147483649;
    Math.atanh(v44);
    let v52 = 2147483649 || v44;
    v52--;
    v40 | v40;
    Math.sin(10000);
}
