const v0 = [-0.0,-3.0,0.0,0.08804033852370063];
[-1000.0,-879.2900979505158,0.8673001219232104,-4.0,35871.319813098875,7.499700519709752e+307];
[6.023925159448538e+307,-Infinity,4.0,642722.8004561239];
let v7 = Int8Array;
const v8 = new v7(4);
const v11 = new BigUint64Array(128);
const v14 = new Uint8ClampedArray(2141);
v0[3] &= 128;
v8[v0] = "12";
new v7(v11, 4, 4);
v7 ^= v7;
let v16;
try { v16 = v8("12", v7, "0AngM", v0, v8); } catch (e) {}
function f17() {
    return Uint8ClampedArray;
}
Object.defineProperty(v16, "12", { enumerable: true, get: f17, set: f17 });
try { v16(v14, f17, 2141); } catch (e) {}
try {
    new Uint32Array(2778);
} catch(e3) {
}
try {
    new Int32Array(10);
} catch(e7) {
}
try {
    new Float64Array(256);
} catch(e11) {
}
class C15 extends Float64Array {
    [Float64Array] = 598470725n;
    [256];
    static o(a17, a18) {
        const v19 = this.__proto__;
        const v20 = v19 - Uint32Array;
        try {
            v19[v20] = v20;
        } catch(e21) {
        }
        return a18;
    }
    #c;
    [10] = 1000n;
    static #a;
}
let v22 = new C15();
new C15();
new C15();
[-1.7976931348623157e+308,-1000.0,3.0,-958.3992613300876,-2.2250738585072014e-308,2.2250738585072014e-308];
[9.40233378628611e+307,-439.6958511418958,537912.7958070422,2.0,5.955424431113455e+307,580.9048653391606,1.0,2.2250738585072014e-308];
const v27 = [-624.0737279235943,-1.1871344260088623,-4.0];
const v29 = Symbol.isConcatSpreadable;
v27[v29] = v29;
Math.cos(1000n);
Math.sin(v22);
const v34 = ~v22;
v22--;
C15[-1] &&= v34;
