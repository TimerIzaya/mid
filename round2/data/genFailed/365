let v5 = -591.7620702228826;
class C6 {
    o(a8, a9) {
        function f10() {
            function f12(a13) {
                v5 = 121389.65934938844;
            }
            this.onmessage = f12;
            try {
                f12(2.220446049250313e-16);
            } catch(e15) {
            }
        }
        const v18 = [];
        const o19 = {
            "arguments": v18,
            "type": "function",
        };
        new Worker(f10, o19);
        return v18;
    }
}
const v21 = new C6();
const v22 = new C6();
const v23 = new C6();
function f24(a25, a26, a27, a28) {
    const o29 = {
        "f": v21,
        2147483649: v21,
        "e": v22,
        "c": a28,
        "b": Infinity,
        "h": a27,
        "a": v5,
        ...v22,
        "d": a28,
        "g": a27,
        __proto__: v22,
        [-2]: 8.842599377501458,
        ...v22,
    };
    return o29;
}
const t43 = f24(v21, f24(v23, v21, f24(v22, v22, f24, 0.802120789853253), 121389.65934938844), v21, 121389.65934938844);
t43[2753281269] = C6;
const o35 = {
    "maxByteLength": 255,
};
const v37 = new SharedArrayBuffer(255, o35);
new BigUint64Array(v37);
function f0() {
    const o13 = {
        n(a5, a6) {
            try { this.o(4294967297, this); } catch (e) {}
            let v8 = 0;
            while (v8 < 0) {
                super[this];
                v8++;
            }
            return a6;
        },
        "a": 9,
        2562551790: 9,
    };
    return o13;
}
const v14 = f0();
const v15 = f0();
const v16 = f0();
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a20;
    } catch(e21) {
    }
    try {
        this.b = a20;
    } catch(e22) {
    }
    try {
        this.h = a20;
    } catch(e23) {
    }
}
const v24 = new F17(v15, v14);
new F17(v14, v14);
new F17(v14, v16);
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a33;
    } catch(e34) {
    }
    try {
        this.d = -2n;
    } catch(e35) {
    }
    try {
        this.a = a33;
    } catch(e36) {
    }
}
const v37 = new F30(v16, v14);
const v38 = new F30(v37, v16);
const v39 = new F30(F17, v38);
v39 > v24;
-15n + v39;
function f42(a43, a44, a45) {
    function f47(a48) {
        Math.floor(-2);
        !(-a45);
        Math.tan(a48);
        Math.log10(a48);
        Math.ceil(a48);
    }
    this.onmessage = f47;
    try {
        a43 = f47;
    } catch(e58) {
    }
}
const v61 = [v39,-15n,v15];
const o62 = {
    "arguments": v61,
    "type": "function",
};
new Worker(f42, o62);
