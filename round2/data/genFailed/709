[];
new BigUint64Array(7);
const v9 = new Uint16Array(4);
const v12 = new Float64Array(71);
try { v12.entries(); } catch (e) {}
Math.log1p(1944390570);
2147483647 | 1944390570;
Math.sqrt(v9);
const o22 = {
    "maxByteLength": 420,
};
const v24 = new SharedArrayBuffer(5, o22);
new BigInt64Array(v24);
try {
    new Uint16Array(127);
} catch(e6) {
}
try {
    new Float64Array(1433);
} catch(e10) {
}
try {
    new Uint8Array(5);
} catch(e14) {
}
[1,10,127];
const v16 = [5];
const v17 = [v16,255,v16,Uint16Array,v16];
1 + v16;
const v20 = Symbol.iterator;
v16[v20] = v20;
for (let i22 = 0; i22 < 8; i22++) {
    v17.length /= i22;
}
