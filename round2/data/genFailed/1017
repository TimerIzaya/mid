function f0() {
    let v1 = 0;
    const o7 = {
        get e() {
            let v4 = this;
            ({"d":v4,"e":v1,} = v4);
            try {
                super.m();
            } catch(e6) {
            }
            super[v4] = v4;
            return v4;
        },
        [10]: v1,
        "e": v1,
        __proto__: v1,
    };
    return o7;
}
const v8 = f0();
const v9 = f0();
f0();
const v11 = [-38990,-1292037287];
const v12 = [2144065227,1073741825,65537,1,-13,-1948064381,-10,-219969834,-1811145962,1000];
const v13 = [-43850,4096,-8,5,1133311879,9007199254740992];
class C14 {
    static e;
    constructor(a16, a17) {
        v9.toString = super.d;
        [536870912,-128,257,13,256,9007199254740991,10,3];
        [1];
        [-12,1919496154,-3,65537,65535,256,6];
        [-1.7976931348623157e+308,0.5331998939380177];
        [5.0,1.1694226299402882e+308,-104672.29820303619];
        [-1000000.0,314194.61073869024,NaN,9.360972659708878,-1000000000000.0];
    }
    static [v11];
}
new C14(C14, v11);
const v26 = new C14(C14, v11);
new C14(v8, v11);
new Int16Array(614);
let v31 = 3810;
new Uint8ClampedArray(v31);
new Int8Array(2);
v26 << v9;
if (v13) {
    try {
        v12.splice(257);
    } catch(e40) {
    }
} else {
    v31 = 614;
    try { C14.setDate(v8, Int8Array, v26, v26, Int16Array); } catch (e) {}
}
try {
    new Uint8ClampedArray(1000);
} catch(e3) {
}
try {
    new Int32Array(194);
} catch(e7) {
}
try {
    new BigUint64Array(10);
} catch(e11) {
}
try {
    new Uint8ClampedArray(72);
} catch(e16) {
}
try {
    new Int32Array(627);
} catch(e20) {
}
try {
    new Int16Array(16);
} catch(e24) {
}
class C25 {
    constructor(a27, a28, a29, a30) {
        const v32 = Symbol.unscopables;
        a27[v32] = 194;
        [Uint8ClampedArray,1000,10];
        [Uint8ClampedArray,Int32Array,v32];
        [a29,10,Uint8ClampedArray,10];
    }
    #n(a37, a38) {
        delete this[3];
        return -65536n;
    }
}
const v43 = new C25(16, 1000, 16, Uint8ClampedArray);
const v44 = new C25(v43, true, 1000, Uint8ClampedArray);
new C25(v44, Uint8ClampedArray, 627, Int32Array);
const o49 = {
    "execution": "sync",
    "type": "major",
};
gc(o49);
gc();
try {
    const t47 = "major";
    t47.valueOf = gc;
} catch(e52) {
}
