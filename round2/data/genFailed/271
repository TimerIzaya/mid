[0.0,5.287537406799412,360377.7611440455,103170.53236139426,1000000.0,1.0];
[-1000000000.0,0.6388821051041312,2.220446049250313e-16];
[1.2871235826310523e+308,-1000.0,-5.830049114769608e+307,-0.0,NaN,3.39806501867316,-1000000.0];
new Date();
[935788443,-55391,9007199254740991,1,-9,-769094371,10824,16];
[989347769,-2136636307,65535];
const v7 = [-9007199254740991,55516,-1556];
class C8 {
    n(a10, a11) {
        const v12 = this.a;
        const o16 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o16);
        return v12;
    }
    static #a;
}
new C8();
new C8();
new C8();
let v22 = BigInt64Array;
new v22(1024);
new Float64Array(256);
const v29 = new Uint32Array(116);
new v22(v7, 116, 256);
v29[Date] |= 256;
Math.pow(-50566, -50566);
const v35 = --v22;
~v35;
Math.exp(10);
Math.expm1(-50566);
Math.tan(v35);
try {
    new Uint8ClampedArray(897);
} catch(e6) {
}
try {
    new Uint32Array(4096);
} catch(e10) {
}
try {
    new Uint8ClampedArray(3490);
} catch(e14) {
}
let v15 = [Uint32Array,14];
const v16 = [14];
[v16];
const v22 = [3490,v16];
Reflect.apply(v16.findIndex, v16, v22);
try {
    v15 = v22;
} catch(e25) {
}
+-50363;
65537 || -50363;
-(-48458);
Math.max(-48458);
