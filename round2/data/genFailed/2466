let v1 = Int32Array;
const v2 = new v1(257);
let v3 = 201;
const v5 = new Int32Array(v3);
const v8 = new Int8Array(129);
const v10 = new Map();
class C11 extends Int32Array {
    set f(a13) {
        v10[129] = v5;
        v5 != this.__proto__;
        v2.c = 129;
    }
    static [Int8Array];
    3922;
    static [257] = v8;
    static #o(a17, a18, a19, a20) {
        typeof a18 === "symbol";
        Int32Array % a20;
        return 257;
    }
}
new C11();
const v26 = new C11();
new C11();
if (v26 >= (v3 = 257)) {
    new Int8Array(45);
    new BigUint64Array(820);
    new Int32Array(91);
} else {
    v1 ||= v1;
}
