function f1() {
    const o11 = {
        set b(a3) {
            const o6 = {
                "maxByteLength": 124,
            };
            const v8 = new ArrayBuffer(124, o6);
            new BigInt64Array(v8);
        },
        "a": true,
    };
    return o11;
}
const v12 = f1();
f1();
f1();
const v15 = [5.4343787884703445e+306,-718.5617137294084,-1000000000000.0,-1000000000.0,Infinity,1000.0,-1000000.0,-1.0,-98307.42959767021,1.0];
const v16 = [-260382.24088163523,-4.0,-1.2232001608297944e+308,-372.2819355634774,1.6267286653554116,6.697327864308476e+307];
const v17 = [-2.0,2.924640179106987,-5.0,-674.0452091213402,2.0,-2.220446049250313e-16];
class C18 {
    constructor(a20, a21, a22, a23) {
        a23[Symbol.unscopables];
        Math.exp(a22);
        let v30 = ~a22;
        ++a22;
        v30 << v30;
        v30++;
    }
}
const v34 = new C18(v16, v17, v12, v16);
new C18(v34, v16, v12, v15);
new C18(v17, v17, v12, v34);
const o39 = {
    "maxByteLength": 119669181,
};
const v41 = new ArrayBuffer(166, o39);
const v43 = new BigInt64Array(v41);
try {
    v43.keys();
} catch(e45) {
}
function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = f0;
    } catch(e3) {
    }
    try {
        this.g = f0;
    } catch(e4) {
    }
    try {
        this.c = f0;
    } catch(e5) {
    }
}
const v6 = new F1();
new F1();
new F1();
/(?:ab)|cde[\cz](\x01?)/sigy;
/b1kkYb\x60a\s/dgmyv;
/(?<a>.)\k<a>*/sigmy;
try {
    new BigInt64Array(1918);
} catch(e15) {
}
try {
    new Float64Array(4096);
} catch(e19) {
}
try {
    new Uint32Array(10);
} catch(e23) {
}
for (const v24 of v6) {
}
for (const v28 of Uint32Array) {
    try {
        v6.toString = v28;
    } catch(e29) {
    }
}
