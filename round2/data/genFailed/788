function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = 256;
    this.g = 256;
    this.d = 256;
}
const v3 = new F0();
const v4 = new F0();
const v5 = new F0();
let v6 = 5;
const v8 = new Uint32Array(v6);
const v11 = new BigUint64Array(42);
const v14 = new Uint8Array(6);
class C15 extends Uint8Array {
    [v5];
    130;
    static [BigUint64Array] = v3;
    static valueOf(a17, a18, a19) {
        a18.f = v6;
        v14 >>> v11;
        return a19;
    }
    e = F0;
    constructor(a22, a23, a24) {
        super(v11, 42, 6);
        super[this] = 6;
        Reflect.construct(Uint8Array, [Reflect,6,a23], Uint32Array);
        Reflect[9] = v3;
        v8.buffer;
        super.length;
    }
}
const v30 = new C15(v4, 6, v4);
new C15(C15, v6, v4);
const v32 = new C15(v3, v6, v3);
for (let v33 = 0; v33 < 87; v33++) {
    v3.g ||= 6;
    ({"e":v6,"g":v33,} = v3);
    v3[45];
}
v14 !== v8 ? v14 : v8;
const v37 = [v8,C15,v4,v32];
const v38 = [v37,v8,v30,v3,v30];
[v37,v38,v38,v30,v6];
class C3 {
    toString(a5) {
        const t2 = "number";
        delete t2[3] > a5;
        return a5;
    }
    #g;
    static g = -536870912;
    f = -536870912;
    #c;
    static #d = 128;
    static #e = 128;
}
new C3();
const v9 = new C3();
new C3();
[256];
const v15 = [63209,268435456,6,8821,43588,-2,0,629357342,-65049];
const v16 = [2,268435441,-4294967296,9007199254740990,268435439,-35029,4096,1073741825,-4294967296];
let v17;
try {
const t0 = "number";
v17 = t0(-1n, -1n, v16, v9);
} catch (e) {}
try { v17(v17, v9); } catch (e) {}
function f22(a23, a24, a25, a26) {
    delete v9[a25];
    a23 >>> -1n;
    try {
        a23 = -1n;
    } catch(e29) {
    }
    return v17;
}
f22(-1n, v15, "268435456", v17);
