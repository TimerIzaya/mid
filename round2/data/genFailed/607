new Uint8ClampedArray(2611);
const v5 = new BigInt64Array(1000);
const v8 = new Uint16Array(2769);
const v15 = new BigInt64Array(3391);
const v18 = new Int16Array(1000);
const v21 = new Float32Array(1000);
let v22;
try { v22 = v21.findLast(Uint16Array, v8); } catch (e) {}
try { v22(2.0, Int16Array, 2.0, -1024, 2769); } catch (e) {}
try { v15.find(v22, v21); } catch (e) {}
v15[2.0] += 2611;
v5.length ||= 2.0;
v18.byteLength;
v21.valueOf = v22;
class C3 {
    3;
    static set g(a5) {
        ("e").__proto__;
    }
    static #o(a8) {
        this.g;
        try {
            super["e"] = -1.3446208487264588;
        } catch(e10) {
        }
        return "e";
    }
}
const v11 = new C3();
const v12 = new C3();
const v13 = new C3();
function f14() {
    return -1.3446208487264588;
}
["e",v13,v13,f14];
[v12,"-12"];
[v13,"-12",C3,"-12",v12];
new Map();
v11[0];
let v21 = 0;
do {
    const v22 = "-12" >> v13;
    const t28 = C3.g;
    t28[268435441] **= v22;
    v21++;
} while (v21 < 1)
