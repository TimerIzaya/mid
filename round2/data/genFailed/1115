const v1 = new Map();
class C2 extends Map {
    static #toString(a4) {
        v1.d = Map;
        return a4;
    }
    static [Map] = v1;
    static #c;
    [v1] = Map;
}
new C2();
new C2();
const v12 = new C2();
function f16() {
    return C2;
}
let v17 = [681514436,255,16,536870912,-872341869,-60344,29452,268435441];
let v18 = [-4294967295,-2,-9,-38798,536870912,9223372036854775807,127,45422];
const v19 = [257,257,-1,-26982997,10000,-2147483649,268435441];
const v20 = v19;
v19.length >>>= 221027376n;
[v18,,v17] = v12;
v17 - -964711.3626947447;
!v17;
256 ^ 256;
C2[v1];
const v0 = /N(?<a>.)\k<a>/siyv;
/9r2?/siguy;
const v2 = /txyz??/idgmv;
let v4 = 1073741823;
try {
    new Int16Array(1000);
} catch(e9) {
}
try {
    new Float64Array(4096);
} catch(e13) {
}
try {
    new BigUint64Array(216);
} catch(e17) {
}
class C18 extends BigUint64Array {
    static #m(a20, a21, a22) {
        super.buffer **= 13;
        const v23 = a22[13];
        let v24 = a22 < BigUint64Array;
        try {
            v24 = v23;
        } catch(e25) {
        }
        return 1000;
    }
    374630655;
    h = v4;
    [50251] = v0;
}
const v26 = new C18();
const v27 = new C18();
new C18();
const v31 = typeof Int16Array === "bigint";
let v32;
try { v32 = v31("bigint", v31); } catch (e) {}
BigUint64Array % v32;
const v35 = v27["lastIndexOf"](C18, 4096);
try { v32(v32, v2, v2, "lastIndexOf", v26); } catch (e) {}
try { new v35(C18, v2, 4096, v32, Int16Array); } catch (e) {}
try {
    v4 /= 13;
} catch(e38) {
}
