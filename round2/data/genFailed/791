new Uint8ClampedArray(129);
const v5 = new Uint8ClampedArray(8);
const v8 = new Uint8ClampedArray(3142);
class C12 {
    constructor(a14, a15, a16) {
        try { a14(a16, a16, this, this); } catch (e) {}
        const v18 = a16;
    }
    #toString(a20, a21, a22) {
        a21.byteLength;
        const v24 = new Uint8ClampedArray(this, a20, 8);
        function F25(a27, a28) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a21;
            this.g = this;
            this.b = v24;
        }
        new F25(Uint8ClampedArray, Uint8ClampedArray);
        new F25(Uint8ClampedArray, Uint8ClampedArray);
        new F25(Uint8ClampedArray, Uint8ClampedArray);
        return 5;
    }
}
const v32 = new C12(3142, Uint8ClampedArray, v5);
const v33 = new C12(v32, Uint8ClampedArray, v8);
new C12(v33, Uint8ClampedArray, v8);
const o38 = {
    "execution": "sync",
    "type": "minor",
};
gc(o38);
throw v8;
v32[245] = -964244121;
const v0 = [-2,65536];
const v1 = [1824243820,-1024,2,65535];
[65535,490074512];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
    } catch(e6) {
    }
}
new F3(v1);
new F3(v0);
const v9 = new F3(v0);
new WeakMap();
const v15 = [-860385.4556079602,3.9552623364753092];
[-1000000.0,NaN,-7.04470970672655,351.3332503705301,0.0,-5.0,2.0,2.0561137081907043e+307];
[-1.7976931348623157e+308,-1.439417565255199e+308,613021.2069161318,-1000.0,5.558954909145528e+307,NaN];
throw -247187438n;
const v21 = -(-9007199254740990);
const v22 = -9007199254740990 >>> 9n;
v9 - -9007199254740990;
Math.acosh(-9007199254740990);
v21 - v21;
try {
    v15.g = v22;
} catch(e26) {
}
