const v5 = new Int32Array(1024);
const v8 = new Float32Array(79);
let v9 = 8;
const v11 = new Int8Array(v9);
class C13 extends Int32Array {
    3741222749;
    constructor(a15, a16, a17, a18) {
        super(v11, a15, 79);
        try { a15(a15, a15, 1024); } catch (e) {}
    }
    8;
    static #f;
    #d = v9;
    static g;
    n(a21, a22) {
        v9 = 1024;
        super[907.7170784593432] = 672.4000540370153;
        return v11;
    }
}
new C13(v11, -194.65171387342468, 79, v5);
new C13(-194.65171387342468, -2.9852940910565087e+307, v9, Float32Array);
const v28 = new C13(v11, -2.9852940910565087e+307, 79, Int32Array);
const o29 = {
};
o29.g = v28;
const o30 = {
};
o30.g = v28;
o30.e = null;
const o31 = {
};
o31.g = v28;
o31.e = null;
o31.d = v8;
const o32 = {
};
o32.g = v28;
o32.e = null;
o32.f = -194.65171387342468;
class C3 {
    set h(a5) {
        const v9 = 4n >>> 4n;
        -2 && -3.0;
        Math.cosh(4n);
        -2 << v9;
    }
    static 12 = 4n;
    static 8 = 4n;
}
let v13 = new C3();
new C3();
const v15 = new C3();
class C16 extends C3 {
    [536870889n] = v15;
    constructor(a18, a19) {
        super();
        for (const v21 in super.h) {
            try {
                a18 &&= C3;
            } catch(e22) {
            }
        }
    }
}
const v23 = new C16(v13, v13);
const v24 = new C16(C3, v23);
new C16(v24, C3);
Object.defineProperty(v24, "e", { writable: true, configurable: true, enumerable: true, value: v13 });
v23.h |= C16;
if (v13 instanceof C16) {
    Math.min(30571);
    Math.abs(v13);
    !(v13++);
    Math.exp(30571);
    Math.log2(-6.894389278801258);
} else {
    const v36 = v13 in v15;
    try { v15.n(v36); } catch (e) {}
}
