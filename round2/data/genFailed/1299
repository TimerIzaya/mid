const v2 = new Uint8Array(2015);
const v5 = new Int16Array(8);
const v8 = new BigUint64Array(512);
for (const v12 of v5) {
    Object.defineProperty(v8, 3, { writable: true, value: BigUint64Array });
    v2["toString"]();
}
v5.length;
Uint8Array / 2015;
const v17 = new BigUint64Array(2015, 2015, 512);
try { v17(v5, v8); } catch (e) {}
class C3 {
    static o(a5, a6) {
        try {
            a5 = this;
        } catch(e7) {
        }
        try {
            this[1525] = 1073741824;
        } catch(e8) {
        }
        return a6;
    }
    9;
    #c = 1073741824;
}
new C3();
const v10 = new C3();
const v11 = new C3();
function f15(a16, a17, a18) {
    const o25 = {
        "b": a16,
        __proto__: v11,
        [a17]: v10,
        [a17](a20, a21, a22) {
            a20 || -1073741824;
            try {
                a21 ||= 10n;
            } catch(e24) {
            }
            return 1024n;
        },
        "g": -1073741824,
        [a18]: 268435440n,
    };
    return o25;
}
const v26 = f15(268435440n, 10n, v11);
f15(10n, 1024n, v26);
const v28 = f15(268435440n, 268435440n, C3);
try {
    v28.h = 24789;
} catch(e29) {
}
Object.defineProperty(v26, "h", { configurable: true, value: -1073741824 });
const v32 = 1024n % 1024n;
Math.log1p(65537);
const v34 = 1024n + 1024n;
Math.asinh(v32);
const v36 = v34 | v34;
v32 ^ 65537;
v36 + 65537;
