class C3 {
    #valueOf(a5, a6) {
        a5[536870912] ||= -1.8657530336906501e+307;
        let v7;
        try { v7 = a6(a5, 9223372036854775807, -1.8657530336906501e+307, a6); } catch (e) {}
        const v9 = Symbol.toPrimitive;
        v7[v9] = v9;
        return "GNsaZ";
    }
    constructor(a11) {
        a11 - this;
        a11[8] = -1.8657530336906501e+307;
        this.__proto__ = "GNsaZ";
    }
}
const v16 = new C3(C3);
const v17 = new C3(-1.8657530336906501e+307);
new C3(v16);
class C19 extends C3 {
    static {
        5 + 5;
        let v26 = -3;
        512 / v26;
        Math.acosh(!512);
        -629.8866087281697 >>> v17;
        --v26;
    }
}
new C19();
let v35 = new C19();
new C19();
v35 = C19;
("b")[47];
const o52 = {
    valueOf() {
        const v42 = this["b"];
        const t36 = "GNsaZ";
        t36[v42] ^= v42;
        new Uint16Array(10);
        new Int16Array(25);
        new BigInt64Array(2);
        return "GNsaZ";
    },
};
let v1 = 4294967297n;
const v3 = [-1822277776,1073741824];
const v4 = [-43981,-1741871945];
const v5 = [65536,6,-13,1,7];
class C6 {
    static #f = -268435456n;
    [-268435456n];
    [v4];
    n(a8, a9, a10, a11) {
        v3.toSpliced(v1, v1, a10, ...a9, ...v4);
        const t9 = -268435456n;
        t9[7] = a9;
        return -268435456n;
    }
    constructor(a14, a15, a16) {
        ({"h":a15,"length":v1,} = a14);
        %VerifyType(a14);
        const v17 = this[1793];
        try { new a16(a16, a15, v3, v5, v17); } catch (e) {}
        try {
            super.c = -268435456n;
        } catch(e19) {
        }
    }
}
const v20 = new C6(v5, v4, v1);
new C6(v5, v5, v3);
const v22 = new C6(v4, v5, v20);
v3["findIndex"](-268435456n);
for (const v31 of v5) {
    %VerifyType(v31 << v3);
    v22[2462536773];
}
v4[84];
const t33 = "findIndex";
t33[-2] **= 9223372036854775807;
