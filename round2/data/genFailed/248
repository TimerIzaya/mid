const v2 = new Uint8ClampedArray(12);
new Float32Array(257);
new Uint16Array(1447);
class C9 extends Uint8ClampedArray {
    constructor(a11, a12) {
        super(1447);
        let v13;
        try { v13 = this.toLocaleString(); } catch (e) {}
        let v14;
        try { v14 = v13(v13, a12, a12, v2, 12); } catch (e) {}
        v14 instanceof Uint16Array;
        !Float32Array;
        v14.b **= a12;
        v2.g = v14;
    }
    static #o(a18, a19, a20, a21) {
        const t16 = super.slice(257, 12);
        t16.byteLength = 257;
        return Float32Array;
    }
}
const v24 = new C9(12, 1447);
new C9(12, 1447);
new C9(1447, 12);
const o30 = {
};
o30.g = 1447;
const o31 = {
};
o31.g = 1447;
o31.f = 257;
const o32 = {
};
o32.g = 1447;
o32.f = 257;
o32.d = 257;
const o33 = {
};
o33.g = 1447;
o33.f = 257;
o33.b = v24;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a5;
    } catch(e6) {
    }
    try {
        this.g = a5;
    } catch(e7) {
    }
    try {
        this.c = -9007199254740991n;
    } catch(e8) {
    }
}
const v9 = new F3(-9007199254740991n);
const v10 = new F3(-4294967295n);
const v11 = new F3(-4294967295n);
class C12 extends F3 {
    constructor(a14, a15, a16, a17) {
        super(-4294967295n);
        try {
            a14[a14] = this;
        } catch(e18) {
        }
    }
    static [F3];
    [v11];
    static #b = -4294967295n;
}
const v19 = new C12(v9, v11, v9, v9);
const v20 = new C12(v10, v19, v19, v10);
new C12(v9, v9, v10, v20);
/[(\2)(\1)a+\p{Script=Greek}5\u0034lvhyxyz?]/gmv;
/a\wa\fb\nc\rd\te\vf/sidgyv;
/(?:ab){4,7}/sidguy;
let v27 = 268435439;
const v28 = --v27;
Math.round(F3);
-v27;
F3 && v28;
