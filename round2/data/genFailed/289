const o12 = {
    "maxByteLength": 257,
};
const v14 = new ArrayBuffer(6, o12);
new BigInt64Array(v14);
[9007199254740991,895054651];
[1000,536870887,-9007199254740992,1073741825,-584252369,536870888,-7,4294967295];
[129,-65535,638472517,-991693025,767615401,-1674472238,10];
function f0() {
    const o6 = {
        __proto__: "hasInstance",
        ["hasInstance"]: "hasInstance",
        "c": 6.201822342917094e+307,
        ..."hasInstance",
        ..."hasInstance",
        get f() {
            try {
                const t9 = "hasInstance";
                t9.toString = "hasInstance";
            } catch(e5) {
            }
            return this;
        },
    };
    return o6;
}
const v7 = f0();
const v8 = f0();
const v9 = f0();
function f10(a11, a12) {
    const o30 = {
        valueOf(a14, a15, a16) {
            a11 - a14;
            return v8;
        },
        [a12]: a12,
        n(a19, a20, a21) {
            const o24 = {
                "maxByteLength": 2247106786,
            };
            const v26 = new SharedArrayBuffer(101, o24);
            try {
                new Uint8Array(v26);
            } catch(e29) {
            }
            return a11;
        },
    };
    return o30;
}
const v31 = f10(v8, v9);
const v32 = f10(v31, v9);
const v33 = f10(v31, v7);
const v34 = [f0,v33,v32,v33,v33];
const v35 = [v9,v34,v34];
[v35,v32];
for (let v37 = 0; v37 < 54; v37++) {
    try {
        v8[2147483649] = v35;
    } catch(e38) {
    }
}
v34 ^ v9;
v34.length;
v34["findIndex"](f0(), v9, v9, v33);
