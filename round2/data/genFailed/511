const v2 = new Uint32Array(129);
const v5 = new Int16Array(9);
new Int16Array(4);
let v10 = 37315;
v5.buffer &&= -7787;
const v12 = /zN/mysu;
/[^3(\2)(\1)8abc|def+]/gu;
const v14 = /[^21H]/isd;
const v15 = `
    v12[6] = v2;
    v14.source = v15;
    -Uint32Array;
    0 * v10;
    Math.atanh(0);
    v10--;
`;
eval(v15);
const v3 = [0.9372125474858013,7.213822756538626,-728.6091491911473,-1.9517072711831815,2.0,-1.4273579002014978e+308,-5.097162719830477,1.0876568921336287e+308];
const v4 = [-6.53104639230782,9.291470539359722e+307,-3.0,-1.2990129326748938e+308,-208.2836289164842,30340.2123871526,17136.707560110488,-389566.6298497203,-2.3771619989088353e+307];
const v5 = [-0.0,1e-15];
const v6 = [-4294967295,7,65535,-12690,4294967295,-2,1843987981,-1823682004,8,7];
const v7 = [43291,-4294967296,1073741824,-49038];
const v8 = [-2147483647,9,-788865126,6,-4294967297,-9,1073741824];
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a14;
    } catch(e15) {
    }
    try {
        this.b = v7;
    } catch(e16) {
    }
    try {
        this.f = a13;
    } catch(e17) {
    }
}
const v18 = new F9(v4, v3, v6, v6);
new F9(v8, v8, v3, v6);
const v20 = new F9(v4, v7, v7, v5);
function f21() {
    return v20;
}
[0,-4096,-2114618630,29806,-4];
[536870912];
const v24 = [-3306,-53257,64,-9223372036854775807,9223372036854775807,-65535,9007199254740991,53418];
let v25 = 10;
for (; v25--;) {
    v24[4096n] %= v25;
    let v28 = 2034028139;
    const v31 = ~v18;
    const v32 = ++v28;
    +(v31 - 1);
    4096n % v32;
    -v18;
}
