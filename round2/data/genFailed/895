function f0() {
    const o9 = {
        "b": -2.220446049250313e-16,
        ["toString"]: -2.220446049250313e-16,
        "h": 11,
        set d(a5) {
            [] = "toString";
        },
        5: "toString",
        "f": 11,
        [-2.220446049250313e-16]: 11,
        "g": "toString",
    };
    return o9;
}
const v10 = f0();
f0();
const v12 = f0();
[2053434287,-9,35824,-9223372036854775808,-734971275,-1132061967,1073741824,536870887,415577619];
const v15 = [-28321,-1424140642];
const v16 = [-4294967297,10,60884];
const v20 = /bL/misv;
/ca\ScT6Z\cA+/mysu;
const v22 = /f(?<!)?/isdv;
let v23;
try { v23 = v16.toLocaleString(3); } catch (e) {}
if (v23) {
    const o27 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o27);
} else {
    function F29(a31, a32, a33, a34) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = a34;
        this.d = a31;
        this.a = v15;
    }
    new F29(v10, v22, v15, F29);
    new F29(v12, v23, F29, v12);
    new F29(v23, v20, -1073741824, F29);
}
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a5;
    } catch(e6) {
    }
    try {
        this.a = -5248n;
    } catch(e7) {
    }
}
const v8 = new F3(-2105682988n);
const v9 = new F3(-5248n);
const v10 = new F3(-5248n);
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a13;
    } catch(e17) {
    }
}
new F11(v10, -2105682988n, v8, v8);
new F11(v10, -5248n, v8, v9);
new F11(v8, 42303n, v8, v9);
for (const v21 of v10) {
    try {
        new Int32Array(196);
    } catch(e25) {
    }
    try {
        new Int8Array(10);
    } catch(e29) {
    }
    try {
        new Uint8ClampedArray(1429);
    } catch(e33) {
    }
}
