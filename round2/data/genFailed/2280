const v0 = [-2.7588872279585193,0.06158483033445605,-0.3155726299903421,0.47411689648492106,-201236.6532902097,-1.014662013067243e+308,1.0,0.20584896012551868,797.5223788113419];
const v1 = [-587.1026769572356,0.2448559828707786,0.16809573452340498,1.0];
const v2 = [-1.7976931348623157e+308,-0.7323455431829515,858.0800441897622,875.9111314128152,-1.1424428710203693e+307,905175.668025814];
const v3 = [v1,v0,v2,v2];
const v4 = [v2,v0,v1];
const v5 = [v2,v0,v0,v4,v1];
class C6 {
    constructor(a8, a9, a10) {
        class C11 {
            static [v3];
            [a8];
        }
        new C11();
        new C11();
        new C11();
    }
    n(a16, a17) {
        v4[Symbol.hasInstance];
        return v5;
    }
}
new C6(v2, v4, v5);
const v22 = new C6(v3, v2, v1);
const v23 = new C6(v0, v0, v0);
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a27;
}
let v30 = new F24(v23, v3, v23, v5);
const v31 = new F24(v23, v3, v30, v4);
new F24(v1, v31, v22, v4);
if (v5 <= v31) {
    v0.length = v5;
    const v34 = v31.__proto__;
    v30--;
    Math.log10(v34);
    v30 && v30;
    Math.clz32(v30);
} else {
    const o44 = {
        "maxByteLength": 2147483647,
    };
    const v46 = new SharedArrayBuffer(8, o44);
    new Uint8Array(v46);
}
