const v2 = new Float32Array(127);
const v5 = new BigUint64Array(2288);
const v8 = new BigInt64Array(6);
let v9 = Date;
const v10 = new v9();
function f11(a12, a13, a14, a15) {
    const o24 = {
        [a13](a17, a18, a19) {
            super.f = a13;
            v5.findLastIndex(a18, a15, 2288, a15, a13);
            [-1073741824,7,3,-9223372036854775807,1431865022,-128];
            [15,-65536,-38806,981128046,1073741824,9007199254740990];
            [-14878,1073741824,1687136889,1073741823,-4294967295,10000,-256,65536,1649684949,-12];
            return 6;
        },
        [Float32Array]: a13,
        __proto__: v8,
        "g": a12,
        ...v10,
        "c": 6,
        [v2]: a13,
        "a": v2,
    };
    return o24;
}
const v25 = f11(v8, 2288, 6, 127);
const v26 = f11(BigInt64Array, 2288, 127, 6);
f11(v26, 2288, 127, 127);
v9 -= v9;
v26 / BigUint64Array;
Object.defineProperty(v10, 7, { enumerable: true, get: BigInt, set: BigInt });
class C31 extends Date {
    static #e;
    #a;
    h = v25;
    #g = BigInt64Array;
}
new C31();
new C31();
new C31();
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -7;
    } catch(e3) {
    }
    try {
        this.e = -7;
    } catch(e4) {
    }
    try {
        this.b = -7;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
const v15 = new F0();
v15.e **= 9007199254740990;
let v17 = -229079802;
++v17;
++F0 >> -128n;
Math.asin(v17);
Math.log1p(v17);
Math.hypot(v15);
