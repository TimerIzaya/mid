const v5 = new BigUint64Array(128);
const v8 = new Int8Array(818);
const v11 = new Uint8ClampedArray(14);
class C12 {
    static [14] = 128;
    static {
        try { v8.at(128); } catch (e) {}
        super[v11] = 14;
    }
    constructor(a16, a17, a18) {
        const v19 = super[a16];
        v11.h = v19;
        try { new a17(v19); } catch (e) {}
        try { v19(a18, 818, v5); } catch (e) {}
    }
    static 512 = Uint8ClampedArray;
    #a;
    b;
}
new C12(-9007199254740992, v11, -65537);
const v23 = new C12(128, v5, -9007199254740992);
new C12(-9007199254740992, 850297246, -65537);
v5.findLast(v23, BigUint64Array, -65537, 2147483648n, 850297246, -1629736031n);
function f29(a30, a31) {
    const o32 = {
        1460863268: -1629736031n,
        "h": a30,
        __proto__: v23,
    };
    return o32;
}
f29(2147483648n, -9007199254740992);
f29(-1629736031n, 14);
f29(-1629736031n, -9007199254740992);
const v0 = [];
const v1 = [-1.7976931348623157e+308,-0.0];
const v2 = [3.068922510242551,-492376.689999233,-1.9703816240482048];
const v3 = [0.29845414104916246];
const v8 = new Date();
class C9 {
    #n(a11, a12, a13) {
        try { Date.parse(v2); } catch (e) {}
        try {
            Date(a13);
        } catch(e16) {
        }
        return v3;
    }
    #d;
    [-65060.78797767789] = 2.0;
    127 = -65060.78797767789;
    static b;
}
new C9();
new C9();
const v19 = new C9();
try { v8.toISOString(); } catch (e) {}
v0.length;
const v22 = v19.b;
for (let v23 = 0; v23 < 54; v23++) {
    v3[Symbol.replace];
}
let v27;
try { v27 = new v22(...v1, 2.0, ...v3, v22); } catch (e) {}
v27.__proto__;
