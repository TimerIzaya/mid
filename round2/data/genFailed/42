const v2 = new Uint8ClampedArray(10);
const v5 = new Float32Array(533);
const v8 = new Uint8Array(2152);
[2152,v2,v2,533];
[Uint8ClampedArray,v8];
const v11 = [v8];
for (let [v12,v13] of v5) {
    new Float32Array(v12, 10, 533);
    for (let v15 = 0; v15 < 32; v15++) {
        v8["p" + v15] = v15;
    }
}
for (let v18 = 0; v18 < 32; v18++) {
    v11["p" + v18] = v18;
}
const v1 = new Set();
[-52370,1254037902,-512908672,1694144769,-4];
[-5,1];
[-8,1096234245,9,1000,-1834199266,1,1928784645,65535,996949028,27670];
[9,-3,2147483648,189712824,2147483647,13,-8];
[-9007199254740992];
const v13 = [1626775985,-128,9724];
-479305489 << v13;
v13["findLast"](..."findLast", ...v1, ...v13, -9007199254740991);
const o22 = {
    valueOf() {
        new Map();
        try { this["setUint16"](); } catch (e) {}
        return -479305489;
    },
};
