/a+bJ/myu;
const v1 = /hkEq/gmyis;
const v2 = /a\fb\nc\rd\te\vf+/gid;
function f3(a4) {
    const o20 = {
        [a4](a6) {
            let v5 = this;
            v5 & -371.4586450625976;
            const v14 = ++v5;
            Math.imul(v5, v5);
            Math.min(8);
            -v5;
            Math.cosh(v14);
            ~8;
            return 8;
        },
    };
    return o20;
}
const v21 = f3(v1);
const v22 = f3(v21);
f3(v2);
const v29 = new Uint32Array(2468);
new Int32Array(127);
const v35 = new Uint16Array(10);
v1.compile(...v35, ...v29, 62681, 1073741825);
if (127) {
    v22.d = v2;
} else {
    v21.__proto__;
    const v39 = Symbol.iterator;
    const o48 = {
        [v39]() {
            let v41 = 10;
            const o47 = {
                next() {
                    v41--;
                    const v45 = v41 == 0;
                    const o46 = {
                        "done": v45,
                        "value": v41,
                    };
                    return o46;
                },
            };
            return o47;
        },
    };
}
const v0 = [];
const v1 = [v0];
const v2 = [v1,v0,v1,v1];
const v3 = [v2,v2,v0,v2];
const v4 = /xyz{93}+/sidgmuy;
const v5 = /\ud808\udf45*/dv;
/(x)(x)(x)\2*/simyv;
try {
    new BigInt64Array(2455);
} catch(e10) {
}
try {
    new BigUint64Array(4);
} catch(e14) {
}
try {
    new Uint16Array(16);
} catch(e18) {
}
if (BigInt64Array) {
    try {
    const t0 = 4;
    t0(v5, Uint16Array);
    } catch (e) {}
} else {
    function F20(a22, a23) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = v3;
        } catch(e24) {
        }
    }
    new F20(v4, F20);
    const v26 = new F20(v5, v5);
    new F20(v5, v26);
}
