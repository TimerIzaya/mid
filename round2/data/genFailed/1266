const v2 = new Uint32Array(5);
const v5 = new Int16Array(1000);
new BigUint64Array(256);
class C9 extends Uint32Array {
    static valueOf(a11, a12, a13, a14) {
        this[1118] &&= 5;
        v2.d = a11;
        return this;
    }
    g;
    static 7;
    f;
    [5] = Int16Array;
    #b = Int16Array;
    [Uint32Array] = Int16Array;
}
new C9();
new C9();
new C9();
v2[2147483648n] %= 256;
const o21 = {
};
o21.c = -2147483648n;
const o22 = {
};
o22.c = -2147483648n;
o22.d = v5;
const o23 = {
};
o23.c = -2147483648n;
o23.d = v5;
o23.f = 8n;
const o24 = {
};
o24.c = -2147483648n;
o24.d = v5;
o24.a = 256;
/0/du;
const v1 = /[^L1(\2)(\1)]/sgv;
const v2 = /TwJI(?:ab)?/sdmv;
class C3 {
    m(a5, a6) {
        try {
            a5.f = this;
        } catch(e7) {
        }
        return v2;
    }
    set d(a9) {
        let v10;
        try { v10 = v1.exec(a9); } catch (e) {}
        v1 !== v10;
    }
}
const v15 = new C3();
new C3();
const v17 = new C3();
try {
    new Int32Array(6);
} catch(e24) {
}
try {
    new Float32Array(1);
} catch(e28) {
}
try {
    new Float64Array(1926);
} catch(e32) {
}
delete v17?.d;
function f34() {
    return -1024n;
}
for (const v35 in v17) {
    Math.clz32(11);
    Math.log(v1);
    v1 % v1;
    -v15 & v15;
}
