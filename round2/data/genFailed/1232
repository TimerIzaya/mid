const v2 = new Uint8ClampedArray(256);
let v4 = Uint8ClampedArray;
const v5 = new v4(2205);
const v8 = new BigInt64Array(2143);
class C9 {
    constructor(a11, a12) {
        this.g = 256;
        [...v4] = v5;
        %VerifyType(a11);
        v2[a12];
    }
    [Uint8ClampedArray] = 2205;
    #g = v8;
    e = 2143;
    7 = BigInt64Array;
}
const v14 = new C9(2143, 2143);
new C9(2143, 2205);
new C9(2205, 2205);
const o20 = {
    "execution": "sync",
    "type": "minor",
};
const v21 = gc(o20);
v14.e;
({"g":v4,} = v21);
const v0 = /(x)(x)(x)\3/sduy;
const v1 = /43?/sdmyv;
let v2 = /d^xxx$+/imv;
class C3 {
    d = v2;
    constructor(a5, a6) {
        try {
            v2 = a6;
        } catch(e7) {
        }
        try {
            super[v1] = a5;
        } catch(e8) {
        }
    }
    [v2] = v0;
}
new C3(v1, v0);
new C3(v2, v1);
new C3(v2, v0);
class C15 extends C3 {
    static get f() {
        this.__proto__;
        const o21 = {
            "execution": "async",
            "type": "major",
        };
        gc(o21);
        return v0;
    }
}
new C15();
const v24 = new C15();
new C15();
v1.sticky;
new Map();
Object.defineProperty(v24, 4, { configurable: true, enumerable: true, value: Map });
try {
    v0[C3] = BigUint64Array;
} catch(e33) {
}
