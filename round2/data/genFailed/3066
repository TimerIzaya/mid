const v0 = /a\w(?:a+)?/yisd;
const v1 = /(7CL)/gmyisdv;
const v2 = /a{0}+/myisdv;
function f6(a7, a8, a9, a10) {
    const o26 = {
        "c": a9,
        "g": a10,
        ...a9,
        "a": a7,
        [a10](a12, a13, a14) {
            const v16 = Symbol.iterator;
            const o25 = {
                [v16]() {
                    let v18 = 10;
                    const o24 = {
                        next() {
                            v18--;
                            const v22 = v18 == 0;
                            const o23 = {
                                "done": v22,
                                "value": v18,
                            };
                            return o23;
                        },
                    };
                    return o24;
                },
            };
            return v2;
        },
    };
    return o26;
}
const v27 = f6(-9007199254740992, v2, v2, v1);
const v28 = f6(8, v1, v1, v0);
f6(-9007199254740990, v1, v0, v1);
new BigInt64Array(3);
new BigUint64Array(4);
const v41 = new Uint32Array(2998);
const v43 = v41["find"](f6);
for (const v44 in v41) {
    function F45(a47, a48) {
        if (!new.target) { throw 'must be called with new'; }
        this.c = a47;
        this.h = "find";
    }
    new F45(v0, v28);
    new F45(v2, v43);
    new F45(v2, v27);
}
