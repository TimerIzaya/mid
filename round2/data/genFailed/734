new Uint8Array(682);
new Float32Array(3556);
new Uint8ClampedArray(2274);
class C15 extends Uint8ClampedArray {
    [3556] = Infinity;
    536870889 = "H1sRX";
    #g = 682;
}
const v16 = new C15();
new C15();
new C15();
let v19;
try { v19 = Uint8Array(2274, 3556); } catch (e) {}
const v21 = [v19];
Reflect.apply(("H1sRX").match, v16, v21);
const v0 = [];
let v2 = 10;
let v3 = 1024;
try {
    new Uint16Array(7);
} catch(e7) {
}
try {
    new Uint32Array(7);
} catch(e11) {
}
try {
    new Float32Array(1807);
} catch(e15) {
}
class C16 extends Uint16Array {
    2007840302;
    255 = v0;
    static #toString(a18, a19, a20) {
        let [v21] = v0;
        const v22 = super.subarray(7, a18);
        try {
            v3 %= v3;
        } catch(e23) {
        }
        return v22;
    }
    static #h = Uint16Array;
    static 2147483647 = v0;
    e;
    static [v2] = 1807;
}
const v24 = new C16();
new C16();
const v26 = new C16();
try {
    const o32 = {
        "maxByteLength": 536870912,
    };
    const v34 = new SharedArrayBuffer(4, o32);
    try {
        new Uint16Array(v34);
    } catch(e37) {
    }
} catch(e38) {
    try {
        v24.toString = e38;
    } catch(e39) {
    }
} finally {
    Math.pow(v2, v2);
    -9223372036854775807 - v2;
    v26 + (v2-- - (-9223372036854775807 % v2));
}
