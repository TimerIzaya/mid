const v0 = [1.0];
const v1 = [4.0,-1.0,2.6991262596044656,-0.0,0.264713733649531,Infinity];
const v2 = [286814.02415407007,2.2250738585072014e-308,1e-15,0.0];
let v3 = 4096;
let v5 = new Float32Array(v3);
new BigInt64Array(4);
const v11 = new Float32Array(13);
let v12 = v0[v3];
({"b":v12,"d":v3,"length":v5,} = v1);
for (let v13 = 0; v13 < 34; v13++) {
    const v14 = v2 % v13;
    function f15() {
        return BigInt64Array;
    }
    v11[5] = v14;
}
v12.__proto__;
function f0() {
}
class C1 {
    valueOf() {
        const v4 = Symbol.split;
        this[v4] = this;
        return v4;
    }
    a = f0;
    static #toString() {
        const v6 = [-2.0,366915.6177902629,-2.2250738585072014e-308,-Infinity,-9.143031637390486];
        [1e-15,420.326497993424,0.05932158708329027,-3.0,-1000000000000.0,-1000.0,0.04291660478676973,0.646972693261349,1.5983580705242367e+308,-1e-15];
        const v8 = [-9.746702434953004e+307];
        try {
            super.p(v6, v8);
        } catch(e10) {
        }
        return v8;
    }
}
new C1();
const v12 = new C1();
const v13 = new C1();
try {
    new Uint16Array(15);
} catch(e17) {
}
try {
    new BigUint64Array(547);
} catch(e21) {
}
try {
    new BigInt64Array(1920);
} catch(e25) {
}
new Map();
if (BigUint64Array === BigUint64Array) {
    const v31 = -256 & -256;
    Math.asinh(v31);
    v12 ^ v12;
    Math.sinh(v13);
    Math.max(v13);
    v13 / v31;
} else {
    BigUint64Array instanceof C1;
}
