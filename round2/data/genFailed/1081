const v0 = [-16,-9007199254740991,4294967295,-10,-9223372036854775808,-65535,5094,-9223372036854775807,10,129];
const v1 = [-2147483648,-1,-2147483647];
const v2 = [536870912,-5721,-4110,7,-56617,4294967297,1738652161,11171];
class C3 {
    static e;
    static 1009 = v2;
    static #valueOf(a5) {
        let v6;
        try { v6 = this.p(v2); } catch (e) {}
        let v10;
        try { v10 = v6.valueOf(Infinity, Infinity, v0); } catch (e) {}
        v10 = Infinity;
        return this;
    }
    static [v2] = v0;
    static #g = v0;
    static [v0];
}
new C3();
const v12 = new C3();
let v13 = new C3();
function f14() {
    return v12;
}
const v17 = new Uint8Array(64);
new Int8Array(64);
const v23 = new Uint16Array(256);
v0[2] = 256;
v1.__proto__ = v1;
v23 * v23;
v13 **= v1;
class C25 {
    static [v17];
    static e;
}
new C25();
new C25();
new C25();
function f1() {
    return undefined;
}
try {
    new Float64Array(129);
} catch(e5) {
}
try {
    new Float32Array(1024);
} catch(e9) {
}
try {
    new Int16Array(9);
} catch(e13) {
}
try {
    const t16 = 9;
    t16.__proto__ = 129;
} catch(e20) {
}
const v23 = undefined[Symbol.isConcatSpreadable];
const v24 = v23?.[9];
throw Float64Array;
try { v24(129, -5, -256, -256, v23); } catch (e) {}
