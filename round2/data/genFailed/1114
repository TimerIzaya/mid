class C3 {
    valueOf(a5, a6) {
        const v7 = super.h;
        let {"d":v8,"h":v9,"length":v10,} = "boolean";
        v8 in a6;
        v8[10] = v7;
        try { ("boolean").slice(v8, a6); } catch (e) {}
        return 268435439;
    }
    3 = "boolean";
    static 65535 = 268435439;
    9 = -897323.0977678127;
    #f = 268435439;
}
new C3();
const v14 = new C3();
new C3();
[-3.5962573079475524,-8.612795956457247e+307,7.2405154881424245,-443.9431663100644,-1000000000000.0,-1e-15,3.445707163731523e+307,-870.5768838604413,1e-15];
[NaN,1000000000000.0,0.33285920871248087,-Infinity,NaN,3.771306394033779,-2.2250738585072014e-308,-2.0,2.2250738585072014e-308];
[-357.74728368902277];
[11,-35289,1,4,2147483649,0];
[-1,7];
[4708,57082,9007199254740991];
for (let i26 = 0; i26 < 5; i26++) {
    const v32 = v14 ** i26;
    v32 >> v32;
}
const v0 = [];
function f1() {
    return v0;
}
class C5 extends f1 {
    static #n(a7, a8) {
        a8 ^ f1;
        try {
            super[this] = -235732488n;
        } catch(e10) {
        }
        return -235732488n;
    }
    #d = -7n;
    a;
    static #f = v0;
    [-7n];
}
new C5();
const v12 = new C5();
const v13 = new C5();
function F14(a16, a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a19;
    } catch(e20) {
    }
    try {
        this.c = v12;
    } catch(e21) {
    }
    try {
        this.d = a18;
    } catch(e22) {
    }
}
const v23 = new F14(-7n, -235732488n, v13, -235732488n);
new F14(F14, -7n, v13, v23);
const v25 = new F14(F14, 9007199254740992n, v0, -7n);
try {
    v25.d = 9007199254740992n;
} catch(e29) {
}
[1.474115439466317,9.222118848939252e+307,-5.08323378983186];
[4.662225996143857e+307,-Infinity,9.246114145129376,NaN,1.7976931348623157e+308,-645.9324582198165,-990797.8190222613,1.111977665166594e+308];
[1000.0,6.944877605265788];
