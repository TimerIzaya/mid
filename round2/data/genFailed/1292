const v1 = new Date();
const v4 = new BigUint64Array(2);
const v7 = new Float64Array(0);
const v10 = new Uint32Array(129);
class C11 {
    get f() {
        this.__proto__ = this;
        this[2147483649];
        for (let v14 = 0; v14 < 32; v14++) {
            v1["p" + v14] = v14;
        }
        return BigUint64Array;
    }
    static 2 = v4;
    static h = Float64Array;
}
new C11();
new C11();
new C11();
function f20(a21, a22) {
    [] = v7;
    try { new a22(Date, v4, a21, v10, C11); } catch (e) {}
}
const v25 = new Promise(f20);
let v26;
try { v26 = v25.finally(f20); } catch (e) {}
let v27;
try { v27 = v10.some(v26, v26); } catch (e) {}
[] = v27;
try { v1.toTimeString(); } catch (e) {}
function f0() {
    const o7 = {
        "f": 1000000.0,
        ...1000000.0,
        [471.32985077503145]: 1000000.0,
        [1000000.0](a5) {
            super[this];
            return 471.32985077503145;
        },
        "e": 471.32985077503145,
        __proto__: 0.039269008486764956,
        "h": 471.32985077503145,
        "c": 471.32985077503145,
    };
    return o7;
}
f0();
const v9 = f0();
f0();
function f11() {
    return v9;
}
try {
    new Uint32Array(255);
} catch(e15) {
}
try {
    new Int8Array(8);
} catch(e19) {
}
try {
    new Uint8ClampedArray(2403);
} catch(e23) {
}
for (const v24 of Int8Array) {
    const o30 = {
        "maxByteLength": 2,
    };
    const v32 = new SharedArrayBuffer(2, o30);
    try {
        new Float32Array(v32);
    } catch(e35) {
    }
}
