const v3 = [1e-15,-1e-15,-6.723154516173044e+307,-1000000.0,-121988.76209091372,-1.7976931348623157e+308,1e-15];
const v4 = [9.549395873527936e+307,-4.0,-6.132286836769598e+307,-783623.973330515,-1e-15,0.3237891711806635];
[4.0,1000000000.0,5.563515183892026,5.0];
function f9() {
    return v3;
}
function f10() {
    return 9007199254740991;
}
new Int32Array(2);
new Float32Array(3505);
new Float64Array(4096);
for (let v20 = 0; v20 < 69; v20++) {
    const t13 = v4[4294967296]?.h;
    t13[2147483648] = -2147483649;
    const o25 = {
        "maxByteLength": 148,
    };
    const v27 = new ArrayBuffer(148, o25);
    new Float64Array(v27);
}
try {
    new Uint8ClampedArray(3);
} catch(e3) {
}
try {
    new Float32Array(2502);
} catch(e7) {
}
try {
    new Float64Array(7);
} catch(e11) {
}
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = Uint8ClampedArray;
    } catch(e18) {
    }
    try {
        this.b = Uint8ClampedArray;
    } catch(e19) {
    }
    try {
        this.c = a16;
    } catch(e20) {
    }
}
const v21 = new F12(2502, 3, 7, 3);
new F12(3, 2502, 2502, 3);
const v23 = new F12(7, 3, 2502, 7);
const v24 = [1.4573222017470737,1.729704351186535e+308,5.0,-4.327928279060032e+307,4.675508912780825e+307,0.0,-713223.2803601567,3.0,-8.679196951635351];
const v25 = [308570.5256729268];
const v26 = [0.4906414490909231,9.154057487066112,1000000.0,0.855191240014514,-1000000.0,-5.0,1000000000000.0];
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = F12;
    } catch(e32) {
    }
}
new F27(v24, v23, v26);
const v34 = new F27(v24, v21, v25);
let v35 = new F27(v26, v23, v24);
try {
    v35 *= v34;
} catch(e36) {
}
delete v26[36];
let v38 = 0;
while (v38 < 1) {
    let v41 = b;
    var e = v26;
    let v44 = 6.037216524858881e+307;
    Math.log10(v44);
    --v44;
    !v41;
    --v41;
    Math.sinh(v41);
    v38++;
}
