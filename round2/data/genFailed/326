class C3 {
    constructor(a5, a6) {
        super.a;
        const t2 = "boolean";
        t2["MIN_SAFE_INTEGER"] = "boolean";
    }
    1073741825;
    #g;
    #a = 131758.1369250212;
}
new C3(131758.1369250212, 131758.1369250212);
new C3(-1e-15, 5.07317117250321);
const v13 = new C3(131758.1369250212, 5.07317117250321);
new Uint8Array(4025);
new Uint32Array(8);
const v22 = new Float64Array(256);
v22[256] = Float64Array;
let v23 = v13[9];
for (const v24 in v23) {
    v23 <<= v24;
    v22.byteLength;
    v23 ^ Uint32Array;
    Math.acosh(v23);
    +v23;
}
class C3 {
    constructor(a5) {
        const t2 = "512";
        t2[Symbol.toStringTag] = -1106585596;
    }
    static {
        this.d;
    }
    88;
    257 = "512";
    129 = "512";
}
const v10 = new C3(-65535);
const v11 = new C3(v10);
const v12 = new C3(C3);
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 5;
    } catch(e22) {
    }
}
const v23 = new F16(5, C3, 5, v11);
const v24 = new F16(5, v23, 6, C3);
const v25 = new F16(-536870912, C3, 5, v11);
function f26(a27, a28, a29) {
    const o30 = {
        [v23]: a29,
        "e": v11,
        "h": v11,
        [v12]: v10,
    };
    return o30;
}
f26(f26(f26(-1106585596, -1106585596, v24), 5, v10), -65535, v25);
