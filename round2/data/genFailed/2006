function f3(a4, a5) {
    const o13 = {
        "a": -9007199254740992n,
        [a4]: a4,
        [-9007199254740992n](a7) {
            [256,-2,-9223372036854775807,-1,-6972596];
            [1295312869,-40021,-12,256,1154477163,-65536,129,-44482,2,10000];
            const v10 = [-6,-63704,2046847102];
            try {
                super.isSafeInteger();
            } catch(e12) {
            }
            return v10;
        },
        "e": -45059n,
        "b": a4,
    };
    return o13;
}
const v14 = f3(-45059n, -256n);
const v15 = f3(-9007199254740992n, -45059n);
const v16 = f3(-9007199254740992n, -9007199254740992n);
class C23 {
    [1085589073];
    static #f = 37774;
    #a;
    [-45059n];
    get e() {
        const o29 = {
            "execution": "async",
            "type": "minor",
        };
        return gc(o29);
    }
}
const v31 = new C23();
new C23();
const v33 = new C23();
Object.defineProperty(v16, 12, { writable: true, configurable: true, set: f3 });
let v34;
try { v34 = v16.n(37774, -9007199254740992n, C23, 1085589073); } catch (e) {}
new C23(v14, v15, -268435456, v34);
for (const v36 of v34) {
    function F38(a40, a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
        this.e = a42;
        this.b = a42;
        this.f = v14;
    }
    const v43 = new F38(-268435456, v16, -45059n);
    new F38(v33, v14, v36);
    new F38(v31, v43, -256n);
}
