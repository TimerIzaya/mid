function f0() {
}
const v1 = [f0];
const v2 = [f0,v1];
const v3 = [f0];
[2.8021685212672445,-1.0,-0.0,0.35417197224845354,1e-15,-768169.2752305493,1.727598290075417e+308,9.503371005505372];
const v5 = [664298.8338421548];
const v6 = [1000000000000.0,-9.191577946443248,-1e-15,784364.1426130219,2.552181998263091];
class C7 {
    [v5] = f0;
    static b;
    static #c = v3;
    constructor(a9, a10) {
        Object.defineProperty(v3, a9, { writable: true, enumerable: true, get: f0, set: f0 });
        %VerifyType(f0);
        try {
            a10.#c = v1;
        } catch(e11) {
        }
    }
}
const v12 = new C7(v6, v5);
const v13 = new C7(v12, v6);
const v14 = new C7(v13, v2);
const v18 = v14 < v5;
if (v18) {
    new f0();
    Math.asinh(v18);
    Math.floor(1073741824);
    const v25 = 1073741824 ** 11;
    Math.pow(11, 1073741824);
    v18 && 1073741824;
    +v25;
} else {
}
const v1 = new Map();
class C2 extends Map {
    [v1] = v1;
    static h = Map;
    [Map];
    static #d;
    static #a;
    static m(a4) {
        let v3 = this;
        function f5(a6) {
            return --v3;
        }
        f5(a4);
        return v3;
    }
}
new C2();
new C2();
const v11 = new C2();
let v12 = false;
[-2.220446049250313e-16,77526.87070288789,-76.11149313103226,-2.220446049250313e-16,1.6951649579922439,-4.0,1e-15,0.0,-45008.61903419939];
[1.7976931348623157e+308,-665.0412732630342,-1000000000.0,-4.0,-5.782459753711531,-4.0];
const v18 = [1e-15,0.49832748852351527,-2.2250738585072014e-308,-2.0,Infinity,-2.220446049250313e-16,0.0,392775.22285481356,0.0];
const v22 = ++v12;
v22 >>> C2;
C2 << 1000000000.0;
Math.sign(v22);
v11["forEach"](v18, "forEach");
const v29 = Symbol.iterator;
const o38 = {
    [v29]() {
        let v31 = 10;
        const o37 = {
            next() {
                v31--;
                const v35 = v31 == 0;
                const o36 = {
                    "done": v35,
                    "value": v31,
                };
                return o36;
            },
        };
        return o37;
    },
};
