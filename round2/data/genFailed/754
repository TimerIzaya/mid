const v1 = new WeakSet();
function f2(a3) {
    const o9 = {
        "a": WeakSet,
        "f": a3,
        get c() {
            const v5 = delete a3?.[WeakSet];
            for (let v6 = 0; v6 < 32; v6++) {
                v5["p" + v6] = v6;
            }
            return v1;
        },
    };
    return o9;
}
f2(f2);
f2(f2(WeakSet));
const v16 = new Uint8ClampedArray(512);
new Int32Array(119);
new Uint8Array(3315);
const v24 = [v16];
Reflect.construct(WeakSet, v24, f2);
const v27 = f2(3315).constructor;
class C28 extends v27 {
    [v24] = v27;
    static #g = Uint8Array;
    5 = 512;
}
new C28();
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -13;
    } catch(e3) {
    }
    try {
        this.a = -13;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f11(a12, a13, a14, a15) {
    const o24 = {
        3197: v7,
        "e": v7,
        "b": v6,
        "c": -2147483649n,
        "d": 4096n,
        valueOf(a17, a18, a19, a20) {
            a19 <= a13 ? a19 : a13;
            try {
                this[a15] = a12;
            } catch(e23) {
            }
            return 10000n;
        },
    };
    return o24;
}
f11(f11(v7, 10000n, v5, v5), 10000n, v7, v7);
const v27 = f11(10000n, 10000n, v5, v5);
function f28(a29, a30) {
    function f32(a33) {
        try {
            this[a33] = a33;
        } catch(e34) {
        }
    }
    this.onmessage = f32;
    try { new a29(v5, 4096n, f11, this); } catch (e) {}
}
const v38 = [v27,v7];
const o39 = {
    "arguments": v38,
    "type": "function",
};
new Worker(f28, o39);
