function f3() {
    return -4;
}
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a9;
}
const v11 = new F7(1024n, F7);
const v12 = new F7(1024n, F7);
const v13 = new F7(129n, F7);
class C14 extends f3 {
    174 = -27248;
    static [129n];
    constructor(a16, a17, a18) {
        super();
        try {
            a18.setSeconds(1.0281985888914758, undefined, -27248);
        } catch(e22) {
        }
    }
    [v13] = F7;
    #b;
    [1024n];
    #d = F7;
}
new C14(129n, 1024n, v12);
new C14(129n, 536870887n, v13);
new C14(536870887n, 536870887n, v11);
function f29(a30, a31, a32) {
    function f34(a35) {
        try { C14.substring(-27248); } catch (e) {}
        C14[v13] ^= -4;
    }
    this.onmessage = f34;
    new Uint16Array(257);
    new BigUint64Array(111);
    new Int16Array(3);
}
const v48 = [9223372036854775807,v13,F7];
const o49 = {
    "arguments": v48,
    "type": "function",
};
new Worker(f29, o49);
function f0() {
}
function f1() {
    return f0;
}
[-1.0,937.427976687138,5.0,44.67504119824525];
[1000000.0,-367341.32284561044];
[580.8528134927008,-2.220446049250313e-16,-Infinity,-3.0,-1000000000.0,-929985.4243852838];
class C8 extends f1 {
    #a;
    c = f1;
    o(a10, a11, a12, a13) {
        const v14 = a13.length;
        try {
            super[a12] = f1;
        } catch(e15) {
        }
        return v14;
    }
    static d;
}
new C8();
new C8();
new C8();
new Set();
try {
    new BigUint64Array(67);
} catch(e24) {
}
try {
    new Uint16Array(2);
} catch(e28) {
}
try {
    new Uint8ClampedArray(1);
} catch(e32) {
}
