const v1 = new Set();
class C2 extends Set {
    static toString(a4) {
        this.g;
        return -9223372036854775807n;
    }
    toString(a10) {
        v1[6];
        Object.defineProperty("delete", 114, { writable: true, configurable: true, enumerable: true, value: v1 });
        ("growable")["search"](a10);
        return Set;
    }
}
const v18 = new C2();
const v19 = new C2();
new C2();
class C24 {
    constructor(a26, a27, a28) {
        if (a27 < a28) {
            let v30;
            try { v30 = a28(1073741823, 5); } catch (e) {}
            v19[13] = v30;
        } else {
            -6 << -6;
            const v34 = ~-6;
            ~-6;
            Math.acos(v34);
            -6 && -6;
            Math.acos(this);
        }
    }
}
const v39 = new C24(v19, C2, 1073741823);
new C24(v18, C2, v39);
new C24(v39, 5, v18);
const v42 = [-9.647446116314573e+307,-429.15628644766593,-1e-15,0.0,1e-15,-1.3935358244155634e+308];
[106909.89472847339];
const v44 = [-339.6777426162507,8.252295378977237e+307];
try { C2(); } catch (e) {}
v44[v42];
v19.__proto__;
const o50 = {
    "maxByteLength": 4294967296,
};
const v52 = new SharedArrayBuffer(249, o50);
new Float64Array(v52);
function f0() {
}
try {
    new Uint8ClampedArray(1);
} catch(e7) {
}
try {
    new Uint32Array(750);
} catch(e11) {
}
try {
    new Int8Array(235);
} catch(e15) {
}
try {
    new Uint32Array(11);
} catch(e22) {
}
try {
    new Uint16Array(12);
} catch(e26) {
}
try {
    new Float32Array(25);
} catch(e30) {
}
try {
    const t27 = 1;
    t27.f = 1.4995966098940957e+308;
} catch(e31) {
}
let v32;
try { v32 = (-1e-15).get(1, Float32Array, Uint16Array); } catch (e) {}
const v35 = Reflect.construct(Uint16Array, [Reflect,1658972098,235], v32);
v35[f0] |= 750;
try {
    Reflect.valueOf = v35;
} catch(e36) {
}
