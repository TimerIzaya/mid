const v2 = new Int16Array(64);
const v5 = new BigUint64Array(2362);
const v8 = new Uint32Array(114);
class C9 extends BigUint64Array {
    static get f() {
        const v11 = delete v2[this];
        [this,Int16Array,2362];
        [v8,v11,v11];
        [2362,v2];
        return Uint32Array;
    }
    #p(a16, a17) {
        try {
            new Int16Array(a17);
        } catch(e19) {
        }
        return a17;
    }
    6 = 2362;
}
const v20 = new C9();
const v21 = new C9();
const v22 = new C9();
function f23(a24, a25, a26, a27) {
    const o42 = {
        "a": v2,
        ...a27,
        "c": v21,
        ...v20,
        "b": v8,
        3: v22,
        "e": a24,
        get d() {
            this[1191042402];
            function f30(a31) {
                function f33(a34) {
                    a34[this] = a34;
                    2362 < a24 ? 2362 : a24;
                }
                this.onmessage = f33;
                Object.defineProperty(C9, 536870888, { writable: true, value: this });
                %VerifyType(Int16Array);
            }
            const v39 = [Int16Array];
            const o40 = {
                "arguments": v39,
                "type": "function",
            };
            new Worker(f30, o40);
            return Uint32Array;
        },
    };
    return o42;
}
f23(64, 2362, f23(64, 64, BigUint64Array, v21), v22);
f23(2362, 64, v5, v21);
[9007199254740992,-6,6,1073741823,42976,2,-2147483647,-246733452,6899,-22928];
[4294967296,65537,-11];
[14329,16,536870912,-1389897931,3,2058649438,268435440,-5,256];
try { v2.copyWithin(2362, 2362); } catch (e) {}
const t60 = "zPLgl";
t60.d = 64;
/[na(?!b)]/mysu;
/\11a/isd;
/DEE/mysdv;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a5;
    } catch(e6) {
    }
    try {
        this.g = -307345525n;
    } catch(e7) {
    }
}
const v8 = new F3(-1674850014n);
const v9 = new F3(v8);
new F3(v8);
-Infinity;
v9.g += -4.304582023668866;
const v17 = [2486n,F3,51363n];
[-1.0,-9223372036854775807n,-307345525n,v17,2486n];
const v19 = [268435456n];
try { v17.unshift(v19, v19); } catch (e) {}
const o21 = {
};
try {
    new Proxy(v17, o21);
} catch(e24) {
}
