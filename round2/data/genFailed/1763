/ab\b\d\bcdLpvv\x3z*/mysd;
/(?:ab)T(?:a?)?/gmyv;
/D(x)(x)(x)\3*/gdu;
const v3 = [-2.0,569.3123476511591];
const v4 = [1.0,-0.0,-2.0,-Infinity,-182.5516927323349,0.15697436169717338,-2.2250738585072014e-308,-5.694117909380435e+307,9.187622847977067,850140.9578542188];
[1000000000000.0,-192379.24161248922,0.36447834565787485,-1000000000.0,0.652415590201912,1e-15,1.6836652152308412e+308,-2.0,-Infinity,210.5060829550896];
let v12;
try {
const t0 = -25491n;
v12 = t0();
} catch (e) {}
const v13 = (a14, a15, a16, a17) => {
    return "then";
};
v4.length = v12;
v13 >>> v3;
const v25 = 3 ^ 1n;
const v26 = -(-7);
const v27 = !3;
Math.acos(v25);
v27 >> v26;
