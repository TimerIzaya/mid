const v1 = new Map();
let v5 = [48317];
const v6 = [-12,-4294967297,-582,-39535,-1073741824,2147483649,-268435456];
[5,-1439390049];
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v6;
    this.b = 536870912;
    this.c = 536870912;
}
const v12 = new F8(-9007199254740991, -9007199254740991);
let v13 = new F8(1871828324, -9007199254740991);
const v14 = new F8(1871828324, 536870912);
Object.defineProperty(v14, v13, { writable: true, configurable: true, enumerable: true, value: 1871828324 });
v1.size = 536870912;
/d(ab)\1xyz?/ysdu;
/N\w|\d/gmi;
/Z\P{sc=Greek}a{0,1}?/gisdu;
({"c":v5,...v13} = v12);
Reflect.construct(Map, [v6], SyntaxError);
try {
    new Uint32Array(256);
} catch(e3) {
}
try {
    new Uint16Array(64);
} catch(e7) {
}
try {
    new Uint32Array(1255);
} catch(e11) {
}
class C16 extends Uint32Array {
    static m(a18, a19) {
        try {
            this.valueOf = Uint16Array;
        } catch(e20) {
        }
        return this % -5;
    }
    [Uint32Array] = -5;
    2147483649;
    static [9] = 256;
}
const v22 = new C16();
new C16();
new C16();
switch (v22) {
    case C16:
        break;
}
