function f6() {
    return 203.32767918751506;
}
/kfoo(?=bar)baz/gmidu;
/I0+/giv;
/[r(?:ab)?]/gd;
class C10 extends f6 {
    static {
        super.c = this;
        new Float64Array(512);
        new BigInt64Array(2);
        new Uint8ClampedArray(129);
    }
    static [-4.0] = "valueOf";
    ["1"];
}
new C10();
const v22 = new C10();
new C10();
const v25 = new WeakMap();
C10.h = -4.0;
for (const v26 of "1") {
    const v29 = Reflect.construct(WeakMap, [v22], v26);
    try { v25.delete(v29); } catch (e) {}
    new Float32Array(1000);
    new BigInt64Array(512);
    new Float32Array(1);
}
function f0() {
}
function f1() {
    return f0;
}
class C2 {
    m(a4, a5) {
        for (const v6 of a5) {
            v6[v6] &&= v6;
        }
        const v7 = a4 && f1;
        try {
            this.fuck(a5, f1, v7, 15);
        } catch(e10) {
        }
        return v7;
    }
    static 16 = f1;
    static #c;
}
new C2();
const v12 = new C2();
const v13 = new C2();
try {
    new Int16Array(59);
} catch(e17) {
}
try {
    new Uint32Array(3422);
} catch(e21) {
}
try {
    new Uint32Array(4096);
} catch(e25) {
}
class C26 {
    static [59];
    static set f(a28) {
        super.f ||= 59;
        function F29(a31, a32, a33, a34) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = Uint32Array;
            } catch(e35) {
            }
            try {
                this.e = f1;
            } catch(e36) {
            }
        }
        const v37 = new F29(f1, C2, this, Int16Array);
        new F29(F29, v13, v13, v37);
        new F29(Int16Array, v13, v12, F29);
    }
}
new C26();
new C26();
const v42 = new C26();
const v43 = f0();
const v44 = 4096 > v42;
v44 ? 4096 : v42;
function f46() {
    return v43;
}
const v47 = C26[v44];
const t64 = 59;
t64[1] = C2;
C26 instanceof v47;
try {
    C26.toString = f1;
} catch(e49) {
}
