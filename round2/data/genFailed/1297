class C3 {
    #b;
    constructor(a5, a6) {
        try { a5(a5, a6, -1000000.0); } catch (e) {}
        const o11 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o11);
    }
    static [-1000000.0];
    [-2];
}
const v13 = new C3(-1024, "atan2");
const v14 = new C3("atan2", v13);
new C3(v13, v14);
new Uint32Array(170);
let v22 = 127;
new Uint8Array(v22);
new Uint8ClampedArray(128);
for (let v28 = 0; v28 < 87; v28++) {
    let v29 = 0;
    do {
        let v30;
        try { v30 = v14.o(); } catch (e) {}
        v22 %= v28;
        v30.b = v30;
        v29++;
    } while (v29 < 3)
}
try {
    new Int32Array(1408);
} catch(e6) {
}
try {
    new Int32Array(0);
} catch(e10) {
}
try {
    new Uint8Array(8);
} catch(e14) {
}
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 257;
    } catch(e20) {
    }
}
new F15(257, 257, 8);
const v22 = new F15(1073741825, 257, 1408);
const v23 = new F15(0, 257, 1408);
class C24 extends Uint8Array {
    p(a26, a27, a28, a29) {
        return -954.0279101942391;
    }
    255;
    get h() {
        for (let v34 = 0; v34 < 95; v34++) {
            v23[v34] <<= 8;
        }
        return v22;
    }
}
new C24();
const v39 = new C24();
new C24();
let v41 = 0;
while (v41 < 10) {
    [15,4096,-9223372036854775807,-6491,9223372036854775807,-1693670714];
    const v45 = [127,-14,16,-9007199254740990,-4];
    const v46 = [1,-9,-8,49548,-7,-2147483647,-6,-1950909116];
    try {
        v46[v45] = v39;
    } catch(e47) {
    }
    v41++;
}
