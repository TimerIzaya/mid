const v1 = new Set();
const v2 = [-1024,8,58288,-250625701,1,268435440,-1504,536870887,-1429209252];
const v3 = [-8,2034495656,1,65536,-24375,-2147483648,512];
const v4 = [9007199254740991,462002239,-2023617849,421777704,-4294967296,-1814,1,16,128,14];
class C8 extends Set {
    static #o(a10, a11) {
        const v13 = super.add(a10);
        let v14;
        try { v14 = this.toString(Set, a10); } catch (e) {}
        let v15;
        try { v15 = new v14(Set, v14, this, v14, this); } catch (e) {}
        v15 & v13;
        return this[v3];
    }
    [v4] = v1;
    static [v1] = v3;
    #g = 14;
}
const v18 = new C8();
const v19 = new C8();
const v20 = new C8();
const v22 = [v18];
const v24 = Reflect.apply(v18.has, v3, v22);
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a29;
    this.g = a27;
}
new F25(F25, v2, v20, v19);
const v32 = new F25(v24, v4, v3, v19);
new F25(v32, v4, v32, v1);
const v3 = [129,9,-65535,-4096,-50934,129,13003,2147483647];
[-9007199254740990,4294967297,-1616842449,-2,1076026768];
[-9,6,34277,-268435456,-9223372036854775808,10000,-1736563194,268435439,8,-9];
[10000,4096,-9007199254740992,2,411579581,-2056292829,9007199254740991,65535,-1,256];
const v7 = [2,536870889,278484093,536870888,1865274765,-15596,1073741823,268435440,4,536870889];
const v8 = [-9,52577,2147483649,1101854859,1650944690];
const v10 = new Map();
const o11 = {
    __proto__: v10,
    0: Map,
    "h": Map,
};
Map in v8;
v7 ^ v8;
new Map(v3);
[-2147483649,9007199254740990,-33470,-2147483648];
[-1567145016,290382077,15];
[5,16,41939,-9007199254740992,-128,-42110,536870912,-409900421];
