const v3 = [9,536870889,-1492823007,-536870912,342759874,1073741825];
const v4 = [-15240,810456083,10,-65537,4,-14,127,164789678];
const v5 = [-1721899674,59571,9223372036854775807,-3,-4294967297,-55537,268435456,3];
class C6 {
    static get g() {
        const v10 = new BigInt64Array(3442);
        v10.includes(12);
        delete v3[3868];
        this[v5] = -4009;
        const o17 = {
            "a": 12,
            "maxByteLength": 3442,
            "execution": "async",
            "arguments": v4,
            2303831898: "major",
            "execution": "async",
            "type": "major",
        };
        gc(o17);
        return v4;
    }
}
const v19 = new C6();
new C6();
new C6();
class C22 {
    static valueOf(a24, a25, a26) {
        a26 = v19;
        Symbol("string");
        new Int8Array(Int8Array, Int8Array, Int8Array);
        new C6();
        Math.floor(65536);
        Math.sign(this);
        -a25 ** this;
        !a25;
        return Math.log(1.7976931348623157e+308);
    }
}
new C22();
new C22();
new C22();
eval("");
try {
    new Uint8Array(127);
} catch(e3) {
}
function f6(a7, a8, a9, a10) {
    a10 &= a10;
    return Float32Array;
}
for (const v14 in "valueOf") {
    const v16 = ["-45875",v14];
    Reflect.apply(("valueOf").split, "-45875", v16);
}
try {
    new Float32Array(4096);
} catch(e20) {
}
2440 * -1.7976931348623157e+308;
for (let v25 = 0; v25 < 25; v25++) {
}
const o26 = {
};
try {
    new Uint32Array(2440);
} catch(e28) {
}
const v30 = new WeakMap();
function f31() {
    return Float32Array;
}
function f32(a33, a34) {
    const o47 = {
        "h": f31,
        "e": Uint32Array,
        "a": f31,
        ...v30,
        "f": Float32Array,
        4: Uint8Array,
        [WeakMap]: f31,
        set b(a36) {
            const v37 = Uint32Array;
            const o41 = {
                "maxByteLength": 512,
            };
            const v43 = new SharedArrayBuffer(149, o41);
            try {
                new Float32Array(v43);
            } catch(e46) {
            }
        },
    };
    const v49 = new Map();
    v49.clear();
    const o54 = {
        "a": -8,
        "d": -8,
        "c": 36630,
        get b() {
            return this;
        },
    };
    return o54;
    return o47;
}
const v55 = f32(2440, 2440);
f32(127, 4096);
f32(4096, 127);
class C58 extends Float32Array {
    toString(a60, a61, a62) {
        const v64 = Symbol.toPrimitive;
        const o73 = {
            [v64]() {
                try {
                    a61 = v64;
                } catch(e66) {
                    const o72 = {
                        ["-45875"]: "-45875",
                        set f(a69) {
                        },
                        set c(a71) {
                        },
                        "c": -128,
                    };
                }
                return a60;
            },
        };
        function F74() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F74();
        function F79(a81, a82) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a82;
            this.a = a82;
            this.e = -1.0;
        }
        return v55;
    }
    static #valueOf(a84, a85) {
        this.p(127);
        try {
            this.#d ^= 2440;
        } catch(e87) {
        }
    }
}
new C58();
new C58();
new C58();
function f93(a94, a95) {
    const o97 = {
        "e": a95,
        get d() {
            return "toString";
        },
    };
    return "toString";
}
f93("toString", 4294967295);
