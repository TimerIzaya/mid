const v2 = new Float64Array(256, 256, 256, Float64Array);
new Uint8Array(7, v2, 7, Uint8Array);
new isNaN(448);
[10000,512,8,9007199254740991,255,-9007199254740990,10000];
[1087553217];
const v11 = [-770294430,9007199254740990,-4294967295,7,-2499,9007199254740991,-3,55446,-1,-50032];
([0.48262925165777104,232.39332638597966,2.220446049250313e-16,-941585.7091131235,-621488.4199325852,-9.931322042886996e+307])[3];
const v14 = [2.220446049250313e-16,-94.05314509673815,-1.4563350494820508e+308,-1000000000.0,1.7976931348623157e+308];
try { v14.toSorted(isNaN); } catch (e) {}
[619.1751808583413,-957451.3722722031,-9.12387460477191,-1.0,-337.0545074642266];
const v17 = [973100471,255,-11,-2,646570891,-45587];
const v18 = v17?.filter;
try { new v18(v11); } catch (e) {}
Map.e = Map;
try {
    new Map(v17);
} catch(e22) {
    e22.iterator;
}
const v0 = [479.7814820845606,2.0,-1000.0,-1.2349066913662117e+308,0.0,-1000000000.0,53.1819211496711,0.5199655878571378,0.7416484647716317,-1.380090869740806e+308];
const v2 = Symbol.toPrimitive;
const t1 = Symbol.iterator;
t1.length = 7;
const v6 = [-1000.0,1.0703535837149169e+307,1000.0,Infinity];
const v7 = [1000000000000.0,3.0,2.2250738585072014e-308,1000000000000.0,0.03365222226214748,-634614.6908616796];
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a10;
    } catch(e12) {
    }
    try {
        this.b = a10;
    } catch(e13) {
    }
    try {
        this.g = a10;
    } catch(e14) {
    }
}
new F8(v6, v7);
new F8(v6, v0);
const v17 = new F8(v6, v6);
class C18 extends v2 {
    c;
    static set g(a20) {
        function f21() {
            return v17;
        }
    }
    4 = F8;
    f = v7;
    static #c;
    d = v0;
}
new C18();
new C18();
new C18();
const t39 = 2809;
delete t39[132784632];
