new WeakSet(WeakSet, WeakSet);
62417 !== 62417;
-1414368388 + -1414368388;
-4294967297 | -4294967297;
class C13 {
    get d() {
        for (let [v15,,v16] of -4294967297) {
        }
    }
}
C13.d = C13;
15 & 15;
try { Int16Array.bind(Int16Array); } catch (e) {}
let v28 = 1146685462;
v28--;
let v31 = 2;
v31--;
new Uint8Array(v31);
8 << 8;
new BigInt64Array(8);
new ArrayBuffer(64);
~0.8712301268167248;
const v49 = `
`;
const v51 = eval(-6n);
v51 / v51;
try {
    new Int8Array(257);
} catch(e3) {
}
try {
    new Float32Array(2);
} catch(e7) {
}
try {
    new BigUint64Array(255);
} catch(e11) {
}
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = BigUint64Array;
    } catch(e16) {
    }
    for (let v18 = 0; v18 < 10; v18++) {
        "p" + v18;
        const t19 = "QV";
        t19[a15] = v18;
    }
}
const v21 = new F12(255, Int8Array);
function f24(a25, a26) {
    const o33 = {
        [a26]: "trunc",
        [a25]: "cHfW",
        "c": v21,
        247: 2,
        "c": v21,
        ..."trunc",
        set a(a28) {
        },
        get b() {
            return this;
        },
        ..."cHfW",
        toString(a31, a32) {
            return 2;
        },
        "h": "trunc",
        "type": "trunc",
        3682847432: 2,
        6: a25,
    };
    return "trunc";
}
f24("cHfW");
f24();
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = -24864;
}
const v40 = Math.atanh(Math);
const v41 = [-11];
const t57 = [1,8,-256,268435441,1024,-5261,257,-536870912,-58991];
t57["trunc"] = v41;
new F12(2, Float32Array);
const v44 = new F12(2, F12);
const v45 = [v44,v44,v44];
const v46 = [v45,v45,v45];
const v47 = [F12,Int8Array,v46,v46,v46];
[v21,v44,2,F12];
[Float32Array,[v47,v40,F12],Int8Array];
function f51(a52, a53) {
    a53(a52);
    return a53;
}
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = 65536;
}
const v58 = new f51();
const v59 = new F55();
const v60 = new F55();
function f61() {
    return v59;
}
function f62() {
    return f61;
}
class C63 {
    static get f() {
        super[v58];
        return F55;
    }
    static [v60] = f62;
}
const v66 = new BigUint64Array();
const v67 = [v66,v59,F55];
for (const v68 in v60) {
    let [...v69] = v67;
}
-15n << -15n;
const t95 = [1.7976931348623157e+308,-2.0,-783004.3571456952,-2.0,-2.0,-0.0,1.0];
t95[84] = 64;
"getInt16" && NaN;
