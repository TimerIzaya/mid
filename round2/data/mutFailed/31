new Float64Array(256);
new Uint8Array(7);
const v8 = new Uint8ClampedArray(448);
[-4294967295,1,14159,4294967295,268435456,566264936,-9223372036854775808,9223372036854775807,650811652];
const v10 = [1087553217];
[-770294430,9007199254740990,-4294967295,7,-2499,9007199254740991,-3,55446,-1,-50032];
const v12 = [0.48262925165777104,232.39332638597966,2.220446049250313e-16,-941585.7091131235,-621488.4199325852,-9.931322042886996e+307];
[2.220446049250313e-16,-94.05314509673815,-1.4563350494820508e+308,-1000000000.0,1.7976931348623157e+308];
[710.24466356686];
const v15 = [973100471,255,-11,-2,646570891,-45587];
const v17 = v10["toSorted"](256);
v8 / Uint8ClampedArray;
v17 >>> v12[v15];
try {
    new Map(v15);
} catch(e23) {
}
class C3 {
    static cos(a5, a6) {
        Array(6);
        function F10(a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
        }
        this.h;
        return C3;
    }
    static p(a17, a18) {
        const v19 = [Infinity,784.9135689392879,-1.2495899600487798e+308,8.77193441413695,-1000000000000.0,954023.5898562961,Infinity,1000000000000.0,-3.0,2.220446049250313e-16];
        const v20 = [0.38704950247732994,439.92488620042536,814.7518770287616,477.64980719829214,-5.0,Infinity,-2.220446049250313e-16,-4.231367165082938e+307];
        for (let v21 = 0; v21 < 5; v21++) {
            v20[v19] = v21;
        }
        try {
            a18 = 50924;
        } catch(e22) {
        }
        var a = -5.0;
        return this;
    }
    constructor(a24, a25) {
        const v27 = Symbol.iterator;
        const o36 = {
            [v27]() {
                let v29 = 10;
                const o35 = {
                    next() {
                        v29--;
                        const v33 = v29 == 0;
                        const o34 = {
                            "done": v33,
                            "value": v29,
                        };
                        return o34;
                    },
                };
                return o35;
            },
        };
        const v37 = Symbol[16];
        try { v37["isSafeInteger"](); } catch (e) {}
        super[a25];
        Symbol[16] = Symbol;
        const v42 = Symbol.iterator;
        const o59 = {
            [v42]() {
                let v44 = 10;
                const o58 = {
                    next() {
                        v44--;
                        const v48 = v44 == 0;
                        const o57 = {
                            "maxByteLength": -29544,
                            "type": "isSafeInteger",
                            "execution": "isSafeInteger",
                            "type": "isSafeInteger",
                            o(a50) {
                                try { new a50(a50, "isSafeInteger", ..."isSafeInteger", a50); } catch (e) {}
                                const o55 = {
                                    "execution": "async",
                                    "type": "minor",
                                };
                                return gc(o55);
                            },
                            "done": v48,
                            "value": v44,
                        };
                        return o57;
                    },
                };
                return o58;
            },
        };
        const v60 = [];
        const v61 = /(?:a?)+/sduy;
        with (v60) {
            function F63(a65, a66, a67, a68) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F63(F63, F63, v61, length);
        }
    }
}
const v70 = new C3(-29544, -29544);
const v71 = new C3(-5.0, -29544);
const v72 = new C3(-29544, 50924);
function f73(a74, a75, a76) {
    const o77 = {
        ...a76,
        ...a74,
        "b": v70,
        "f": a76,
        ...v71,
        ...a74,
        9: a76,
        "e": a74,
        "g": C3,
        "d": 50924,
        "h": a75,
        5: a74,
        __proto__: a75,
    };
    return o77;
}
const v78 = f73(v72, C3, C3);
const v79 = f73(v70, v72, v70);
const v80 = f73(v72, v72, v79, 50924, v71);
function f81() {
    return v72;
}
function F82(a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    const v87 = [-1266958562,536870888,-268435456,-9223372036854775807,10,4096,3776,-2086487943];
    try {
        new BigUint64Array(v87);
    } catch(e89) {
    }
    try {
        this.c = a84;
    } catch(e90) {
    }
    try {
        this.h = f81;
    } catch(e91) {
    }
    try {
        this.b = -29544;
    } catch(e92) {
    }
}
new F82(v79, -29544);
new F82(C3, v78, -5.0, 50924);
new F82(v79, v80);
/\c[\d-\d]/my;
class C103 {
}
for (let v104 = 0; v104 < 5; v104++) {
    C103["p" + v104] = v104;
}
