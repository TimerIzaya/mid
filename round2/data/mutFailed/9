const v3 = [9,536870889,-1492823007,-536870912,342759874,1073741825];
const v4 = [-15240,810456083,10,-65537,4,-14,127,164789678];
function F5() {
    if (!new.target) { throw 'must be called with new'; }
}
const v7 = new F5();
const v8 = [v7];
const o9 = {
    __proto__: v8,
};
const v10 = [-1721899674,59571,9223372036854775807,-3,-4294967297,-55537,268435456,3];
("NEGATIVE_INFINITY").localeCompare("d");
new Int8Array(2147483648);
class C16 {
    static get g() {
        delete v3[3868];
        this[v10] = -4009;
        const o22 = {
            "execution": "async",
            "type": "major",
        };
        gc(o22);
        return v4;
    }
}
const v24 = new C16();
new C16();
new C16();
class C27 {
    static valueOf(a29, a30, a31) {
        a31 = v24;
        new C16();
        Math.floor(65536);
        Math.sign(this);
        -a30 ** this;
        !a30;
        return Math.log(1.7976931348623157e+308);
    }
}
new C27();
new C27();
new C27();
eval("");
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -4;
    } catch(e3) {
    }
    try {
        this.e = -4;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
new F0();
let v8 = -54702n;
const v11 = [-1898627115,-12716,10,-100784150,5,19711,22800,43519];
async function f12(a13, a14, a15, a16) {
    return gc();
}
f12();
const v20 = [65536,5,-1,8,6];
const v21 = [29546,58710,201813135,63026,536870887];
function f22(a23, a24, a25) {
    v8--;
    a25 << v20;
    const o47 = {
        "c": v21,
        "e": a25,
        "d": v6,
        8: 127n,
        o(a29, a30, a31, a32) {
            let v33;
            try { v33 = a31(a23); } catch (e) {}
            const o34 = {
            };
            try {
                o34.b = v33;
            } catch(e35) {
            }
            try {
                const o36 = {
                };
                o36.b = a25;
                o36.c = a25;
            } catch(e37) {
            }
            try {
                const o38 = {
                };
                o38.b = v33;
                o38.c = a25;
                o38.g = v11;
            } catch(e39) {
            }
            try {
                const o40 = {
                };
                o40.b = v6;
                o40.c = a25;
                0.27560936932132796 * 0.27560936932132796;
                Math.sin(1000000.0);
                o40.g = v33;
            } catch(e46) {
            }
            return a32;
        },
    };
    return o47;
}
f22(127n, v6, -15n);
v20[8];
f22(127n, F0, v8)[8];
f22(-15n, F0, v8);
("NFC")[1];
("boolean").normalize("NFC");
