const v0 = /Ba?/mydv;
const v1 = /[\11][\00011]*/myis;
const v2 = /K/mv;
const v3 = [v0,v0,v0,v0];
v3[3] = v3;
const v4 = [v1,v3,v2,v3];
let v5;
try { v5 = v0.map(v1); } catch (e) {}
const v6 = [v4,v4,v3];
let v7;
try { v7 = v6.entries(); } catch (e) {}
let v8 = 65535;
const v9 = v8++;
-(v8 >>> v7);
65537 - 65537;
48466 & 48466;
const v16 = [65535,-975253161,2147483649];
let v17;
try { v17 = v16.map(v3); } catch (e) {}
const v18 = [4,-11,268435440,-40755,-1745681791,4294967295];
let v19;
try { v19 = v18.at(65537); } catch (e) {}
const v20 = [1923068943,-9007199254740990,9,1800368044,-1,129,-2,5,-4294967295];
try { v5.map(v19); } catch (e) {}
[268435439,9223372036854775807,8,-65535,272128441,-599132525,4294967296,7,-11,268435439];
try { v1.toString(); } catch (e) {}
const v24 = [10,-1335371199,8,64,1000,2147483647,-4294967295,-9223372036854775807,1073741823];
try { v24.map(v20); } catch (e) {}
[1360032925,14,-1447839106];
const o29 = {
    ..."function",
    [4294967296]: "function",
};
o29[3] = o29;
o29[2] = o29;
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this?.constructor;
    try { new v34(this, this); } catch (e) {}
}
F30.arguments = v17;
const v36 = new v9();
const v37 = v36?.constructor;
try { new v37(v24, v7); } catch (e) {}
v36.length = v36;
const v39 = v36?.constructor;
try { new v39(v39, o29); } catch (e) {}
const t47 = 48466;
t47.caller = v39;
try { new v39(v1, v16); } catch (e) {}
const o42 = {
    ...o29,
    536870912: v39,
};
o42[0] = o42;
const v43 = o42[536870912];
try { v43.toLocaleString(); } catch (e) {}
const v45 = o42?.__defineSetter__;
v45.name = v45;
try { new v45(65537, v20); } catch (e) {}
const o47 = {
    ...o42,
};
o47[5];
function f2() {
    function f3(a4, a5) {
        return gc();
    }
    return f3;
}
Object.defineProperty(BigUint64Array, "valueOf", { writable: true, configurable: true, enumerable: true, get: f2 });
try {
    new BigUint64Array(2574);
} catch(e9) {
}
try {
    new Uint8Array(4096);
} catch(e13) {
}
try {
    const v16 = new BigUint64Array(9);
    try { v16.filter(v16); } catch (e) {}
} catch(e18) {
}
class C22 {
    static d;
    static [-1.0];
    static toString(a24, a25, a26) {
        try {
            try {
                a26[1905] = this;
            } catch(e28) {
            }
            new BigUint64Array(9, a26, -27616);
        } catch(e33) {
        }
        try { a24(Uint8Array); } catch (e) {}
        return 4096;
    }
    2 = -1e-15;
    static 4 = 9;
    #f;
    static 3;
}
C22.f = C22;
const v35 = new C22();
const v36 = new C22();
v36[2] = v36;
const v37 = new C22();
v37[2] = v37;
function F38(a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(a40); } catch (e) {}
    try {
        this.e = Uint8Array;
    } catch(e44) {
    }
    try {
        this.a = a42;
    } catch(e45) {
    }
    try {
        this.b = 4096;
    } catch(e46) {
    }
}
try { new F38(9, 2574, 9); } catch (e) {}
const v48 = new F38(2574, -5.786377272183816e+307, 4096);
const v49 = v48?.e;
try { new v49(9, v35, 9); } catch (e) {}
new F38(9, -1e-15, 9);
new F38(2574, -5.786377272183816e+307, 9);
try { Math.expm1(BigUint64Array); } catch (e) {}
Math.tan(-9223372036854775807);
