class C6 {
    static 512;
    static {
        function f8(a9, a10, a11) {
            function f13(a14) {
                a14?.g;
            }
            this.onmessage = f13;
            function f16() {
                return this;
            }
        }
        const v19 = ["function","function",0.531295456001807];
        const o20 = {
            "arguments": v19,
            "type": "function",
        };
        new Worker(f8, o20);
    }
}
new C6();
new C6();
new C6();
try {
    const v29 = [/8/sdy];
    const o30 = {
        "arguments": v29,
        "type": "function",
    };
    new Int8Array(16);
} catch(e32) {
}
try {
    new BigInt64Array(10);
} catch(e36) {
}
try {
    const v39 = new Int32Array(129);
    function f40() {
    }
    try { v39.findIndex(v39, v39, f40, v39, Float32Array); } catch (e) {}
    let v43 = -0.0;
    --v43;
} catch(e45) {
}
new Map();
class C48 {
}
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
}
new Int32Array(512);
function f55(a56) {
    const o69 = {
        valueOf(a58) {
            const o67 = {
                o(a62, a63) {
                    try { this.o(); } catch (e) {}
                    this[129];
                    const o66 = {
                    };
                    return a63;
                },
                "type": "minor",
            };
            gc(o67);
        },
    };
    o69[Symbol.toPrimitive] = f55;
    return o69;
}
f55();
f55();
const v75 = new Date();
class C76 extends Date {
    constructor(a78, a79, a80) {
        super(a78);
        v75.getUTCDay();
    }
}
const o82 = {
};
-605471.3444360895 / f55();
