function f0() {
}
let v1 = "bigint";
new Float64Array(128);
const v9 = new Uint16Array(1740);
const v12 = new BigUint64Array();
const v14 = new BigInt64Array();
let v15;
try { v15 = v12.sort(v14); } catch (e) {}
const v18 = Symbol.iterator;
const o27 = {
    [v18]() {
        let v20 = 10;
        const o26 = {
            next() {
                v20--;
                const v24 = v20 == 0;
                const o25 = {
                    "done": v24,
                    "value": v20,
                };
                return o25;
            },
        };
        return 1740;
    },
};
new Uint32Array(3503);
new Uint32Array(115);
o27 ** "-4";
try { v15(...o27, Float64Array, ...v9, 16, ..."hn"); } catch (e) {}
const v35 = 3503 / 128;
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    Uint32Array.e = 16;
    this.b = a38;
}
const v40 = new F36("hn", v9);
const v41 = new F36(v15, v14);
new F36(v15, v35);
const v44 = new Int16Array(16);
v40[115] = F36;
v9 / v44;
v1 += v41;
new Int8Array(3007);
new Uint16Array(6);
new Uint16Array(67);
new BigUint64Array(4);
class C59 extends Date {
}
const v60 = new C59();
v60[1740]();
function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -4;
    } catch(e3) {
    }
    try {
        this.e = -4;
    } catch(e4) {
    }
}
let v5 = new F0();
const v6 = new F0();
const v7 = new F0();
let v8 = -54702n;
try {
    v5 = v6;
} catch(e11) {
}
const v13 = [-1898627115,-12716,10,-100784150,5,19711,22800,43519];
async function f14(a15, a16, a17, a18) {
    return gc();
}
f14();
[65536,5,-1,8,6];
+v7;
F0 << (-1220360784 && -1220360784);
v13 & 127n;
const v30 = [29546,58710,201813135,63026,536870887];
function f31(a32, a33, a34) {
    v8--;
    a34 << a34;
    const o68 = {
        "c": v30,
        "e": a34,
        "d": v6,
        8: 127n,
        o(a38, a39, a40, a41) {
            let v42;
            try { v42 = a40(a32); } catch (e) {}
            const o43 = {
            };
            try {
                o43.b = v42;
            } catch(e44) {
            }
            try {
                const o45 = {
                };
                o45.b = a34;
                o45.c = a34;
            } catch(e46) {
            }
            try {
                const o47 = {
                };
                o47.b = v42;
                o47.c = a34;
                o47.g = v13;
            } catch(e48) {
                try {
                    new BigUint64Array(7);
                } catch(e52) {
                }
                try {
                    new Uint8Array(1270);
                } catch(e56) {
                }
                try {
                    new Uint16Array(206);
                } catch(e60) {
                }
            }
            try {
                const o61 = {
                };
                o61.b = v6;
                o61.c = a34;
                0.27560936932132796 * 0.27560936932132796;
                Math.sin(1000000.0);
                o61.g = v42;
            } catch(e67) {
            }
            return a41;
        },
    };
    return o68;
}
f31(127n, v6, -15n)[8];
f31(127n, F0, v8)[8];
f31(-15n, F0, v8);
("NFC")[1];
("boolean").normalize("NFC");
