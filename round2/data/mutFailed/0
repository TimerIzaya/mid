let v0 = "boolean";
const v2 = -Infinity;
class C3 {
    static d = v0;
    536870888;
    constructor(a5) {
        v0 *= this;
        try { a5(a5, this, this, v0); } catch (e) {}
        super.d;
        a5 = this;
        try {
            a5.valueOf(v2, [v0,v2,1073741824,a5,this]);
        } catch(e10) {
        }
    }
}
const v11 = new C3(1073741824);
new C3(v11);
new C3(v11, 1073741824);
new Uint16Array(512);
const v19 = new Int32Array(-32200);
Object.defineProperty(v19, "d", { writable: true, configurable: true, value: -32200 });
v11[typeof Uint16Array === "symbol"];
new Int32Array(84);
const v30 = new BigUint64Array(128);
v30[127] = -61105n;
for (let v32 = 0; v32 < 25; v32++) {
    "p" + v32;
}
/dHQ(x)(x)(x)\1*/myiu;
const v6 = ["9dIs",-5.0,-5.0];
[v6,"9dIs",-2.091206253576299];
const v8 = [-2.091206253576299,"9dIs"];
function f9() {
    return v8;
}
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a12;
    } catch(e14) {
    }
}
const v15 = new F10("7u", v6);
new v15("7u", -5.0);
new F10("b", "9dIs");
[-1e-15,-936224.0677081246,2.0,8.686465330068893e+307];
[Infinity];
[2.220446049250313e-16];
/1\p{Script=Greek}ux\u{12345}1a(?!b)nm+/sduy;
