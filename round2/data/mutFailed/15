("536870887")[5];
try { ("1073741825").indexOf(9223372036854775807); } catch (e) {}
class C9 {
    #d;
    [9223372036854775807] = 536870888;
    p(a11, a12, a13) {
        a13 >> "1073741825";
        +a11;
        a12[10];
        const v20 = a11 >>> 6;
        const v21 = 1024 + 6;
        let v22 = -1024;
        Math.ceil(v22);
        Math.round(v20);
        ++v22;
        a12.cosh(v21);
        return 6;
    }
}
C9.prototype = C9;
const v27 = new C9();
v27.9223372036854776000 = v27;
new C9();
new C9();
-42704n << -42704n;
-(-42704n);
let v34 = -2022n;
v34--;
for (let v37 = 0; v37 < 10; v37++) {
    -v37;
    const o39 = {
        ...v34,
    };
    o39.h = o39;
}
try {
    new BigUint64Array(2574);
} catch(e3) {
}
try {
    BigUint64Array.h = 2574;
} catch(e6) {
}
new BigUint64Array(2574);
try {
    new Uint8Array(4096);
} catch(e9) {
}
try {
    new BigUint64Array(9);
} catch(e13) {
}
class C17 {
    static d;
    static [-1.0];
    static toString(a19, a20, a21) {
        try {
            try {
                a21[1905] = this;
            } catch(e23) {
            }
            new BigUint64Array(9, a21, -27616);
        } catch(e28) {
        }
        try { a19(Uint8Array); } catch (e) {}
        return 4096;
    }
    2 = -1e-15;
    static 4 = 9;
    #f;
    0 = -1.0;
    static #e = BigUint64Array;
    static [C17] = C17;
    [BigUint64Array];
    static f = -1e-15;
    static 3;
}
new C17();
new C17();
new C17();
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = Uint8Array;
    } catch(e38) {
    }
    try {
        this.a = a37;
    } catch(e39) {
    }
    try {
        this.b = 4096;
    } catch(e40) {
    }
}
new F33(2574, -5.786377272183816e+307, 4096);
new F33(9, -1e-15, 9);
new F33(2574, -5.786377272183816e+307, 9);
Math.tan(-9223372036854775807);
