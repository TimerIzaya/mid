class C3 {
    static n(a5, a6) {
        %VerifyType(a5);
        try {
            ("flags").replaceAll("flags", "boolean");
        } catch(e8) {
        }
        return "flags";
    }
    ["flags"] = "boolean";
    a = 127;
    #c = "boolean";
    static a = "flags";
    9 = 127;
    static ["flags"];
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
class C12 {
    e;
    #a;
    p(a14, a15) {
        C3[11];
        const t23 = 127;
        t23[0] = "boolean";
        try {
            a15.#a;
        } catch(e18) {
        }
        return v9;
    }
    10;
    #b;
    [v11] = v10;
}
const v19 = new C12();
const v20 = new C12();
const v21 = new C12(v20, C12);
class C22 {
    constructor(a24, a25, a26) {
        a26.e <<= 127;
        v21["p"](a24, v19, v21, 127);
    }
    static 3 = C3;
    static #h = v10;
    set e(a30) {
        const v31 = C3["flags"];
        try { v31("flags"); } catch (e) {}
    }
    d;
    #a = v19;
    0 = v19;
}
const v33 = new C22(v20, v20, v19);
new C22(v33, C12, v21);
new C22(v33, v21, v21);
const v38 = new BigUint64Array(1);
const o39 = {
};
v38.lastIndexOf(o39);
try {
    new Uint8Array(127);
} catch(e3) {
}
let v4 = 9;
/\xe2\x81\xa3/sigu;
const v7 = [-47989,9007199254740991,-1476036253,-1073741824,46094,41917,39822];
function f8(a9) {
    for (let v10 = 0; v10 < 25; v10++) {
    }
    return v7;
}
v7.toString = f8;
v7 >>> 10;
try {
    new BigInt64Array(v7);
} catch(e14) {
}
Uint8ClampedArray.g = Uint8Array;
Uint8ClampedArray.g = Uint8ClampedArray;
try {
    new Uint8ClampedArray(257);
} catch(e18) {
}
class C19 extends Uint8ClampedArray {
    #g = 257;
    constructor(a21, a22, a23, a24) {
        super(a24, a22);
        try {
            super[a22] = 127;
        } catch(e25) {
        }
    }
    static #m(a27, a28) {
        return -1.0;
    }
}
C19.name = C19;
new C19(127, 257, v4, 127);
new C19(127, 257, 257, v4);
new C19(127, 257, 257, 127);
Int16Array.prototype = Int16Array;
try {
    new Int16Array(3);
} catch(e44) {
}
1536 >> 1536;
try {
    new BigUint64Array(1536);
} catch(e49) {
}
try {
    new BigUint64Array(2344);
} catch(e53) {
}
const v54 = [-916.9768920317756];
function f55(a56) {
    const v57 = v4++;
    return v57 == v57;
}
v54[Symbol.toPrimitive] = f55;
try { Math.pow(257, 257); } catch (e) {}
Math.cos(v54);
