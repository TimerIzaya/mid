class C3 {
    static n(a5, a6) {
        %VerifyType(a5);
        try {
            ("flags").replaceAll("flags", "boolean");
        } catch(e8) {
        }
        return "flags";
    }
    ["flags"] = "boolean";
    a = 127;
    #c = "boolean";
    static a = "flags";
    9 = 127;
    static ["flags"];
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
class C12 {
    e;
    #a;
    p(a14, a15) {
        C3[11];
        const t23 = 127;
        t23[0] = "boolean";
        try {
            a15.#a;
        } catch(e18) {
        }
        return v9;
    }
    10;
    #b;
    [v11] = v10;
}
const v19 = new C12();
for (let v20 = 0; v20 < 32; v20++) {
    v11["p" + v20] = v20;
}
const v23 = new C12();
const v24 = new C12();
class C25 {
    constructor(a27, a28, a29) {
        a29.e <<= 127;
        v24["p"](a27, v19, v24, 127);
    }
    static 3 = C3;
    static #h = v10;
    set e(a33) {
        const v34 = C3["flags"];
        try { v34("flags"); } catch (e) {}
    }
    d;
    #a = v19;
    0 = v19;
}
const v36 = new C25(v23, v23, v19);
new C25(v36, C12, v24);
new C25(v36, v24, v24);
const v41 = new BigUint64Array(1);
const o42 = {
};
v41.lastIndexOf(o42);
function f2(a3) {
    a3 << 7n;
    return Float32Array;
}
const v8 = Symbol.toPrimitive;
Float32Array[v8] = f2;
try {
    const v9 = new Float32Array(16);
    let v10;
    try {
    const t0 = 16;
    v10 = t0(v9, 16, Float32Array);
    } catch (e) {}
    try {
        v10[127] = v9;
    } catch(e11) {
    }
} catch(e12) {
}
Int8Array.BYTES_PER_ELEMENT = Int8Array;
try {
    new Int8Array(2510);
} catch(e16) {
    for (let v17 = 0; v17 < 32; v17++) {
        e16["p" + v17] = v17;
    }
}
BigUint64Array.e = BigUint64Array;
try {
    const v22 = new BigUint64Array(512);
    try { v22.slice(BigUint64Array, Float32Array); } catch (e) {}
} catch(e24) {
}
try {
    new Uint16Array(512);
} catch(e28) {
}
try {
    new Float64Array(512);
} catch(e32) {
}
try {
    new BigUint64Array(128);
} catch(e36) {
}
try {
    v8.toString = Symbol;
} catch(e37) {
}
Symbol.keyFor(Float32Array, BigUint64Array, 16, f2, 128);
125 * 125;
let v45 = 256;
v45++;
BigUint64Array.length = BigUint64Array;
/jq(?<a>.)\k<a>/;
