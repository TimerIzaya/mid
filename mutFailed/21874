const v2 = new Uint16Array(8);
new Uint16Array(64);
new Uint32Array(401);
for (let v10 = 0; v10 < 32; v10++) {
    v2["p" + v10] = v10;
}
class C15 extends Uint32Array {
    constructor(a17, a18, a19, a20) {
        super(a20, a20, a20);
        delete this[64];
        h = 64;
        a18 &&= -638195.1133890696;
    }
    static get f() {
        delete this[Uint32Array];
        return 165615.13319022;
    }
    #e = 6.213704636803293;
}
new C15(165615.13319022, 6.213704636803293, -638195.1133890696, 401);
new C15(-638195.1133890696, -638195.1133890696, 6.213704636803293, 64);
new C15(6.213704636803293, 165615.13319022, 6.213704636803293, 401);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v32 = 0; v32 < 1000; v32++) {
        Math.clz32(v32);
        Math.log2(51695);
        const v37 = +v32;
        const v38 = Math.random();
        51695 >> v37;
        function f41(a42) {
            return "p";
        }
        class C43 extends f41 {
            3 = "p";
            [v38] = v37;
        }
        const v45 = ("p" + v32).fontcolor();
        let v46;
        try { v46 = v45.trimLeft(this); } catch (e) {}
        v46[12];
    }
}
new F30();
new F30();
