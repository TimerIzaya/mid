let v2 = -41008;
class C3 {
    valueOf(a5) {
        let v8 = 65536;
        const v10 = v8--;
        const v11 = v10 ** v2;
        Math.sign(v10);
        v11 & 0.9189107513838999;
        v2 >> v11;
        return Math.pow(-226086126, v2--);
    }
}
C3.g = C3;
const v17 = new C3();
const v18 = new C3();
const v19 = new C3();
class C20 {
    static #toString(a22, a23) {
        (this + -939751411) && -939751411;
        return !a22;
    }
    constructor(a30, a31, a32, a33) {
        this.__proto__;
        a31.e = a31;
        try { a30(-45778, this, a33, a32, this); } catch (e) {}
        const v37 = Symbol.split;
        Symbol.for(v37.description);
        v19[v37] = a33;
    }
}
C3?.constructor;
let v42 = Boolean;
function f43() {
    const v44 = v42--;
    class C45 {
    }
    class C46 extends v17 {
    }
    const v47 = new C46();
    v47.m = v44;
    return v44;
}
%PrepareFunctionForOptimization(f43);
const v48 = new C20(v2, C20, C3, -45778);
new v18(v19, v19, v2, v48);
new C20(v17, v17, C3, v48);
1564 | 1564;
new Uint8ClampedArray(1564);
4 / 4;
new Uint8Array(4);
const v61 = new Uint8ClampedArray(v19);
function f62() {
    const v64 = new Uint8ClampedArray(Uint8ClampedArray, f62, Uint8ClampedArray);
    let v66 = 10;
    v66--;
    v64[7] = 43464885;
    v64[-1] = v66;
    return v64;
}
%PrepareFunctionForOptimization(v61);
const v68 = f62();
v68[0] = v68;
%OptimizeFunctionOnNextCall(f62);
f62()[2];
