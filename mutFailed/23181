-5.0 + -5.0;
let v7 = 10;
const v8 = v7--;
const v10 = new BigUint64Array(v7);
256 >>> 256;
new Int32Array(256);
new Float64Array(127);
let v18 = Map;
let v22 = 1132;
v22--;
const v24 = v18--;
const v25 = [-4.0,-1e-15];
v25[2] = Uint8Array;
const v26 = [-7.264687027014153e+307];
v26[0] = v8;
const v27 = v26.pop();
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a32, 2, { writable: true, enumerable: true, value: v10 });
    let v36;
    try { v36 = a32.toSorted(v24); } catch (e) {}
    const v37 = this?.__defineGetter__;
    try { new v37(256, 256); } catch (e) {}
    try { v37(undefined, undefined); } catch (e) {}
    try { a32.unshift(a33); } catch (e) {}
    a34 != a34;
    let v42;
    try { v42 = a32.toSpliced(a33, a33); } catch (e) {}
    try { v42.toReversed(); } catch (e) {}
    const v44 = v42?.__defineSetter__;
    function f45() {
        function f46() {
            class C47 {
            }
            async function f48(a49, a50, a51, a52) {
                (await C47).call();
                return f48;
            }
            return v36;
        }
        return f46;
    }
    function f55(a56) {
        new Uint16Array(255);
    }
    Object.defineProperty(v44, "constructor", { writable: true, configurable: true, enumerable: true, get: f45, set: f55 });
    const v60 = v44?.constructor;
    try { new v60(256); } catch (e) {}
    try { v44(); } catch (e) {}
}
try { F30(-5.0, -5.0, -5.0, BigUint64Array); } catch (e) {}
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    function f70(a71) {
        try {
            const o72 = {
            };
            v10.find(v27, o72);
        } catch(e74) {
        }
        return a71;
    }
    this.constructor = f70;
    const v75 = this.constructor;
    let v76;
    try { v76 = new v75(v75, a69); } catch (e) {}
    const v77 = typeof v76;
    const o79 = {
    };
    v77 === "symbol";
}
const v81 = new F64();
new F64(F64, F64, v81, v81);
new F30(v26);
new F30(v25, v24);
