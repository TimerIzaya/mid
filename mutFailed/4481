[6.404284455855496,0.7428964543008001,5.344508062773441,-4.0,3.028522142069477,-Infinity,0.29725708495618897,-986.7697249375824,-392260.9725753743];
const v1 = [2.2250738585072014e-308];
const v2 = [-3.406940446713923e+307,-2.0,-369.59143030141934,1000000000000.0,1.0,5.0,5.0,-1000000.0,-1000000000.0];
const v4 = ("match").length;
try { v4(v4, v2, v4); } catch (e) {}
const o6 = {
};
new Proxy("match", o6);
const t8 = "symbol";
t8[5] = "symbol";
function f11() {
    try {
        new f11();
    } catch(e13) {
    }
    +-1e-15;
    const v19 = 8 ** 8;
    Math.floor("match");
    Math.tanh(v19);
    8 & -1e-15;
    Math.clz32(-1e-15);
    return v1;
}
new Map();
const v26 = [-182.54585172349016,-744814.6116697663,707.4271078878844,0.3745296493084167,-1.0176312853084863e+308,0.35206970436187623,1000000.0,-0.2671460338898761,411.92963567666425];
[-1000000000.0,-1.6523409058342313,2.220446049250313e-16,-1.7976931348623157e+308];
for (let i29 = 0; i29 < 8; i29++) {
    o6[256] = i29;
    v1[v26] = i29;
}
[-4.0];
try { new Uint8ClampedArray(v1, v1, v1); } catch (e) {}
const v38 = new Uint8ClampedArray();
const v39 = [v38,v38];
const v40 = [v39,v38];
try { v40.toSorted(v39); } catch (e) {}
for (const v42 in v40) {
    v42[0] = v42;
}
