function f3(a4) {
    const o12 = {
        [a4]: -51029n,
        "h": 16n,
        m(a6) {
            try {
                a4.g = 8.788767758838381e+307;
            } catch(e10) {
            }
            return a4;
        },
        [-51029n]: a4,
        ...a4,
    };
    return o12;
}
const v14 = f3(f3(-51029n));
const v15 = f3(16n);
class C16 extends f3 {
    b;
    static set f(a18) {
        super.m(-9007199254740992, a18, this, a18);
        C16.__proto__;
        a18[3379321353] = a18;
        new Int32Array(4);
        new Int16Array(9);
        new Uint8Array(1948);
    }
}
new C16();
new C16();
new C16();
c = v14;
Object.defineProperty(v15, "a", { writable: true, configurable: true, enumerable: true, set: f3 });
const v42 = new Set();
v42["delete"](839612.5677247904);
const v46 = new Float64Array(127);
(127).constructor;
new Int8Array(1073741823);
let v51 = 9223372036854775807;
v51 = 65536;
1024 >>> 1024;
try { new Uint32Array(1024, Uint32Array, 127); } catch (e) {}
new Uint32Array(1024);
Float64Array.e = Float64Array;
const v60 = new Float64Array(159);
try { v60.filter(Float64Array); } catch (e) {}
[v60];
[v46];
[Float64Array,Uint32Array,159,127];
[1000000000.0,-1000.0];
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(a68); } catch (e) {}
    const v71 = this.constructor;
    try { new v71(); } catch (e) {}
    a68--;
    a68 & a68;
}
function f75(a76) {
    return a76;
}
class C77 extends f75 {
    [1024] = Float64Array;
    [1073741823];
}
new F66();
("29753").replaceAll("29753", "b").split("b");
("boolean").split("toString");
function f86(a87, a88, a89) {
}
function f90(a91, a92, a93, a94) {
}
const v97 = new Uint8ClampedArray(104);
v97.toLocaleString().toLocaleLowerCase();
