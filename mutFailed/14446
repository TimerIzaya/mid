function f0() {
    const o15 = {
        set a(a5) {
            super["toPrimitive"];
            super.d = "toPrimitive";
        },
        5: -1000000000000.0,
        set b(a8) {
            const t8 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            t8[27] = 27;
            return [];
            super["values"] = a8;
        },
        "g": -1000000000000.0,
    };
    return o15;
}
const v16 = f0();
const v17 = f0();
const v18 = f0(v16, v16);
let v20 = 0;
v20++;
Array(2597);
-Infinity;
class C27 {
    static #n(a29, a30) {
        function f31(a32, a33) {
            try {
                new f0();
            } catch(e35) {
            }
            return v17;
        }
        f31(-0.0, a30);
        return v18;
    }
    toString(a38) {
        this.e *= -1000.0;
    }
    static {
        for (let v41 = 0; v41 < 25; v41++) {
        }
        try {
            this.#d = f0;
        } catch(e42) {
        }
    }
    #e = -1000.0;
}
const v43 = new C27();
new C27();
new C27();
new WeakMap();
function f48() {
}
new Int32Array(280);
class C55 {
}
function f56(a57, a58) {
}
f56.prototype = f56;
%OptimizeFunctionOnNextCall(f56);
f56(f0, v16, v43);
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = this.constructor;
    try { new v65(a64, C55); } catch (e) {}
    a62 % a62;
}
new F60(820, 121, 129);
new F60(820, 121, C27);
function f70(a71, a72, a73, a74) {
    const v75 = /(?:a*)+q(?<a>.)/guds;
    for (let i78 = 0, i79 = 10; i78 < i79; i79--) {
        v75.compile(a72);
    }
    return f0;
}
