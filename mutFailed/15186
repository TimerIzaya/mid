class C3 {
    static m(a5) {
        this[10] >>>= -1000000000000.0;
        return -1000000000000.0;
    }
    static #n(a10) {
        this[a10] = a10;
        const o11 = {
        };
        return -1000000000000.0;
        const t10 = [0.8307152163010869,1.0,0.0];
        t10.length = 1494907924;
        const o73 = {
            "execution": "sync",
            "type": "minor",
            m(a18) {
                a18.c = a18;
                a18.h = a18;
                const o19 = {
                };
                o19.h = o19;
                function f20(a21, a22, a23) {
                }
                f20.caller = f20;
                try {
                    o19.e = 1494907924;
                } catch(e24) {
                    const v28 = new Uint8ClampedArray(512);
                    Uint8ClampedArray(798, v28, o19);
                }
                const o30 = {
                };
                o30.g = o30;
                o30.e = 1494907924;
                let v32;
                try { v32 = Math.expm1(1494907924); } catch (e) {}
                -v32;
                const v35 = -9007199254740991 / -9007199254740991;
                const v36 = v35 - v35;
                const v37 = v36 >> v36;
                v37 - v37;
                Math.sin(-9007199254740991);
                "EV" == "EV";
                try { ("EV").link(77.79210787611191); } catch (e) {}
                const v44 = 0 != 0;
                v44 || v44;
                class C46 {
                    o(a48, a49, a50, a51) {
                    }
                }
                C46.e = C46;
                C46.name = C46;
                const v52 = new C46(o11);
                const v53 = v52?.constructor;
                try { new v53(); } catch (e) {}
                const v55 = v52?.constructor;
                try { v55(); } catch (e) {}
                try { v55(); } catch (e) {}
                const v60 = new Int8Array(3938);
                v60[268] = v60;
                try { v60.every(o30); } catch (e) {}
                let v62 = 3;
                const v63 = v62++;
                v63 << v63;
                const v66 = 0 >> 0;
                v66 - v66;
                for (let i = 0; i < 5; i++) {
                    const v69 = 0 < 8;
                    v69 && v69;
                    [...v62] = v60;
                }
                const o71 = {
                };
                const o72 = {
                };
                o72.h = 1494907924;
                return this;
            },
        };
        gc(o73);
        Math.tanh(-1000.0);
        function F78() {
            if (!new.target) { throw 'must be called with new'; }
            const v81 = [F78,F78];
            [v81,1141300185,F78];
            let v83 = [this];
            Math.log2(v81);
            const v87 = v83++;
            v87 ^ v87;
            Math.asinh(536870887);
            try {
                class C91 extends this.constructor {
                    e = F78;
                }
                C91.caller;
                new C91();
            } catch(e94) {
            }
        }
        new F78();
        return a10;
    }
}
new C3();
new C3();
new C3();
const v102 = [2147483647];
function f103(a104, a105) {
    const v106 = [601759695];
    const v107 = [1073741824,1073741823,1376142744,1073741825];
    let v109;
    try { v109 = v107["find"](..."find", a105, ...v106); } catch (e) {}
    return v109;
}
v102.constructor = f103;
function F110(a112, a113) {
    if (!new.target) { throw 'must be called with new'; }
    const v114 = this.constructor;
    try { new v114(); } catch (e) {}
    function f116() {
        return F110;
    }
    %PrepareFunctionForOptimization(f116);
    f116();
    %OptimizeFunctionOnNextCall(f116);
}
const v118 = [851928846,9,14876,65535];
function f119(a120) {
    function f121() {
        const o125 = {
            toString(a123) {
                return [-2.0,-1000000.0,-Infinity,0.03714003700223023,-1.0];
            },
        };
        return o125;
    }
    return -1000000000000.0;
}
v118.toString = f119;
const v126 = /(?:a*)+q(?<a>.)/guds;
function f127(a128) {
    try { a128.compile(a128, a128); } catch (e) {}
    const v130 = v102.constructor;
    try { v130.from(C3); } catch (e) {}
    !v130.isArray(v126);
    return a128;
}
for (let [i137, i138] = (() => {
        10 - 10;
        return [0, 10];
    })();
    (() => {
        -i137;
        const v140 = i137 < i138;
        v140 && v140;
        return v140;
    })();
    i137 ^ i137, i138--) {
    i137 >>> i137;
    f127(v126);
}
[4294967295,65537,129,-1547732705,39729,10,64,-4294967296,-4096,3];
for (let v151 = 0; v151 < 5; v151++) {
    for (let [i155, i156] = (() => {
            0 != 0;
            return [0, 10];
        })();
        i155 < i156;
        i155++) {
    }
    function f163() {
        let v165 = ("Vre").codePointAt(v151);
        const v166 = v165--;
        for (let v167 = 0; v167 < 5; v167++) {
            const v168 = v167 || v118;
            v168.valueOf = f103;
            v168 ** v168;
        }
        class C170 {
        }
        const v171 = new C170();
        Object.defineProperty(v171, "constructor", { configurable: true, value: f127 });
        const v172 = v171?.constructor;
        try { new v172(); } catch (e) {}
        let v174;
        try { v174 = v171(); } catch (e) {}
        class C175 {
        }
        C175.d = v174;
        v165 ^ v166;
        return f163;
    }
    f163();
    %OptimizeFunctionOnNextCall(f163);
}
