function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1890239521;
    } catch(e3) {
        const t5 = [7.134431132944798e+307];
        t5[4] = WeakMap;
        return e3;
        new Int16Array(305);
    }
    try {
        this.e = 1890239521;
    } catch(e9) {
        let v12 = Math.acosh(-14);
        v12--;
        Math.sign(4.0);
        +4.0;
    }
}
const v17 = new F0();
new v17();
new Int8Array();
class C21 {
}
new C21();
new F0();
new F0();
function f28() {
    return 5;
}
[[f28,f28,v17],v17,[v17,v17,F0,f28]];
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
-4096;
new Int8Array(4096);
function f41() {
}
const v42 = /(?:a*)+q(?<a>.)/guds;
v42.constructor = f28;
function f43(a44) {
    const v45 = a44.constructor;
    const v47 = new Uint8ClampedArray(v42, a44, v45);
    v47.valueOf = f41;
    v47 ^ 3;
    v45(a44, f28);
    class C51 {
    }
    return v45;
}
for (let i54 = 0, i55 = 10; i54 < i55; i55--) {
    for (let v62 = 0; v62 < 50; v62++) {
        f43(v42);
    }
}
const v64 = new F32(F32, F32, F32);
let v66 = -16n;
function f67() {
    v66 *= -1911645276n;
    return -1911645276n;
}
f67();
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const o74 = {
        ...this,
    };
    function F75() {
        if (!new.target) { throw 'must be called with new'; }
        this.c = 5;
    }
    const v78 = this.constructor;
    try { new v78(this, v64); } catch (e) {}
    v78[a72] = v64;
}
const v80 = new F69();
new F69(v80, v80);
