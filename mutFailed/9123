-Infinity;
function f4(a5, a6) {
    Array(3).unshift(3, a5);
    return f4;
}
const v12 = new Promise(f4);
const v14 = new BigUint64Array(8);
const v20 = new Int16Array(41);
v20.fill(725);
new Float64Array(5);
const o24 = {
    "type": "function",
};
const v25 = v12 + v12;
const v26 = v25 >>> v25;
function f28(a29) {
    const o32 = {
        ...v26,
        5: v26,
        __proto__: a29,
        valueOf(a31) {
        },
        "d": 4,
        "g": v26,
        163: 4,
    };
}
new Uint8ClampedArray();
new Uint8Array(7);
Infinity(Infinity, Infinity, Infinity, Infinity);
function F41() {
    if (!new.target) { throw 'must be called with new'; }
}
class C43 {
    constructor(a45, a46, a47) {
        const o50 = {
            "type": "minor",
        };
        gc(o50);
    }
}
const v53 = new Int8Array(127);
for (const v54 in v53) {
}
const v57 = new Map();
v14.toString(v57);
for (let v59 = 0; v59 < 32; v59++) {
    v57["p" + v59] = v59;
}
this.escape();
function f63() {
    return f63;
}
const o65 = {
    [f63]() {
    },
};
const v67 = ([16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9]).keys();
function f68(a69, a70) {
    const o100 = {
        "g": v67,
        m(a72) {
            a72.f = a72;
            try { a72.next(); } catch (e) {}
            a72.c = a72;
            a72.h = a72;
            const o74 = {
            };
            o74.h = o74;
            o74.h = o74;
            function f75(a76, a77, a78) {
            }
            f75.caller = f75;
            try {
            } catch(e80) {
            }
            try {
                const o82 = {
                };
                o82.h = o82;
            } catch(e83) {
            }
            Math?.expm1;
            const v87 = -9007199254740991 >> -9007199254740991;
            v87 - v87;
            class C89 {
                o(a91, a92, a93, a94) {
                }
            }
            C89.name;
            const v98 = new Int8Array(3938);
            let v99 = 3;
            [...v99] = v98;
        },
    };
    return o100;
}
%OptimizeFunctionOnNextCall(f68);
const v101 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v103 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v104 = [601759695];
const v105 = [1073741824,1073741823,1376142744,1073741825];
function f107(a108, a109, a110, a111) {
    function f112() {
        let v115 = Float64Array;
        v115 = a109;
        b = v104;
        v101.length;
        try {
            v105.forEach(v115);
        } catch(e118) {
        }
        const v119 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v121 = Symbol.toPrimitive;
        const o128 = {
            toString(a123, a124) {
                const v125 = a111 && v115;
                function f126() {
                    a123 *= v121;
                    return v115;
                }
                return v125 <= v119;
            },
        };
        const o149 = {
            "c": -4294967297n,
            [522675525n](a131, a132) {
            },
            "c": v104,
            valueOf(a134, a135) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a137, a138, a139, a140) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v103,
            ...v104,
            "type": "Vre",
            ..."Vre",
            valueOf(a143, a144) {
                return a144;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a146, a147, a148) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f112();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f112);
    try { v105["find"]("find", a111, v104, v105, 522675525n); } catch (e) {}
}
f68();
