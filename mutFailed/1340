function f0() {
    const v5 = new Date();
    const v6 = [-1000.0,2.0,6.498411136794167e+307,1.5301115680028905e+308,-1.0240581174585665e+308,-73553.73579822388,-474.34134439650745,2.300981674378132,-816063.8647013834,-1.2620665326245469e+308];
    const v7 = [];
    const v8 = [];
    const o18 = {
        129: v7,
        __proto__: v6,
        o(a10, a11, a12, a13) {
            [-281.7208145314885];
            Reflect.apply(a11.reduce, -9007199254740991);
            return -9007199254740991;
        },
        "f": v8,
        "e": v5,
        ...-9007199254740991,
    };
    const o29 = {
        __proto__: "NFy",
        set d(a20) {
            const v22 = new WeakMap();
            this[this] = a20;
            a20 = -281.7208145314885;
            v22 instanceof WeakMap;
        },
        ...v5,
        ..."NFy",
        "f": -9007199254740991,
        ...v8,
        valueOf(a25) {
        },
        [v8]: v7,
        "type": "NFy",
        "a": -281.7208145314885,
        [-281.7208145314885]: -281.7208145314885,
        [-9007199254740991]: -9007199254740991,
        set b(a27) {
        },
        [f0]: v6,
        get d() {
            return f0;
        },
        [-9007199254740991]: -281.7208145314885,
    };
    return o29;
}
try { (-9007199254740992).log2(-9007199254740992); } catch (e) {}
const v34 = 5493 >>> 5493;
(-9007199254740992).atan2(v34, v34);
const v36 = f0();
const v37 = f0();
const v38 = f0();
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v36;
    } catch(e47) {
    }
}
new F42("setInt16", v38, v36);
new F42("setInt16", v37, v38);
new F42("e", v38, v36);
new Int8Array(v38);
const v58 = new BigInt64Array(14);
function f59(a60, a61) {
    try { a60(BigInt64Array); } catch (e) {}
    a61.constructor(a61);
    return f59;
}
const v65 = new Promise(Math);
try { v65.then(v58, "e"); } catch (e) {}
function f67(a68, a69) {
    const o70 = {
    };
    return o70;
}
try { f67(v65, v65); } catch (e) {}
const v72 = f67();
v72.d = v72;
new BigUint64Array("e");
new Int32Array(10);
const v78 = new BigUint64Array();
const v79 = /anVXYFzN(x)(x)(x)\3/gvdms;
try { v78.reduceRight(v79); } catch (e) {}
