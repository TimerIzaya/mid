new Int32Array();
("async").lastIndexOf();
const v7 = ("min").constructor;
v7.getOwnPropertySymbols(v7);
class C9 {
    ["min"] = -572.550769933129;
    static get b() {
    }
    constructor(a12) {
        const v13 = this.constructor;
        try { new v13(); } catch (e) {}
        const v16 = new Float32Array();
        v16.entries();
    }
    static #toString(a19, a20) {
        a19 = -4294967296n;
        try {
            new BigUint64Array(256);
            [1000000.0,1000000.0];
            super.deref(-572.550769933129);
        } catch(e30) {
        }
        return this;
    }
}
new C9();
"boolean" == "boolean";
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f37(a38, a39, a40, a41) {
    let v44;
    try { v44 = v35["find"](..."find", a41, ...v34, ...v35, ...522675525n); } catch (e) {}
    v44 <= a40;
    return arguments;
}
for (let v46 = 0; v46 < 5; v46++) {
    f37(v34, v46, false, v46);
}
new C9();
new C9();
class C54 {
}
const v55 = new C54();
for (const v56 in v55) {
}
