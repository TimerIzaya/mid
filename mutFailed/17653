const v3 = [3.132532207120242e+307,-716883.3781295349];
[v3];
[v3,178.30102528902762];
const o8 = {
    valueOf() {
        v3 << this;
        return 3.132532207120242e+307;
    },
};
let v12 = /f(ab|cde)\1/gvdsy;
v12.b = v12;
const v13 = /P(?:a*)+/vims;
const v14 = /\cj\cJ\ci\cI\ck\cKfoo(?!bar)baz(ab|cde)\1/gviy;
const v15 = [0,2660,-107636500,4294967296];
let v16 = [-2,-8,8,4096,-11,41814];
function f17() {
    v13[3.132532207120242e+307] = 2147483647;
    return 3.132532207120242e+307;
}
v16.valueOf = f17;
[16,1073741824,10000,-12,32963,-197774186,257,30459,1188131266,3];
for (let v20 = 0; v20 < 5; v20++) {
    const v21 = v14.__proto__;
    ({"length":v12,} = v3);
    v20 = 14;
    v16 >>= v15;
    const v22 = typeof 3.132532207120242e+307;
    const v24 = v22 === "function";
    function f25() {
        let v26;
        try { v26 = v21(v20, f25, v24, f25); } catch (e) {}
        let v28;
        try { v28 = v26(true); } catch (e) {}
        try { v28["throw"]("function", "throw", "throw", v22); } catch (e) {}
        function f31(a32, a33, a34) {
            return a34;
        }
        const v35 = f31?.apply;
        try { new v35(v13, v16); } catch (e) {}
        try { ("function").sub(); } catch (e) {}
        const o40 = {
            "type": "function",
        };
        o40.arguments = v20;
        const v41 = new Worker(f31, o40);
        v41.terminateAndWait();
        v41.terminate();
        return o40;
    }
    try { f25.apply(v14, f25); } catch (e) {}
    const v45 = f25();
    v45.d = v45;
    %OptimizeFunctionOnNextCall(f25);
}
