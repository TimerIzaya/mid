function f0() {
    let v2 = 3.0;
    const o12 = {
        [v2]: "function",
        ["function"](a5, a6) {
            let {"a":v7,"g":v8,"length":v9,} = "function";
            super.f;
            v2 >>>= a6;
            try {
                v7.__proto__ = this;
            } catch(e11) {
            }
            return a6;
        },
        __proto__: "function",
        "e": "c",
    };
    return o12;
}
const v13 = f0();
const v14 = f0();
const v15 = f0();
v15[3] = v15;
const t23 = "7";
t23[0] = "7";
let v18;
try { v18 = ("7").link("toString"); } catch (e) {}
try { v18.toUpperCase(); } catch (e) {}
const t28 = "symbol";
t28[2] = "symbol";
function f21(a22, a23) {
    a22.e;
    a23[3];
    a22.e;
    const o36 = {
        ..."symbol",
        [a22](a28, a29, a30, a31) {
            let [,...v32] = "toString";
            [-11,1073741824,9,-7939];
            [10,-11,1024,65537,-2147483648];
            [268435440];
            a23.e <<= v32;
            return a23;
        },
        "g": f0,
        [-2]: "7",
        __proto__: "toString",
        65536: v14,
    };
    o36[4] = o36;
    return o36;
}
try { f21(v15, f21); } catch (e) {}
f21(v13, v13);
f21(v13, v13);
const v40 = f21(v15, v14);
v40[1] = v40;
v40[3];
let v45 = Uint8Array;
v45.prototype = v45;
class C46 {
}
C46.e = C46;
const v47 = new C46();
-4294967296 + -4294967296;
function f50() {
    const v52 = Math?.expm1;
    try { new v52(v47); } catch (e) {}
    const v55 = v45--;
    const v56 = Math.min();
    v56 % v56;
    const v58 = v45 ** 6;
    v58 & v58;
    -4294967296 >>> v47;
    const v61 = v55 - v47;
    Number.isNaN(v61);
    return v61;
}
f50.arguments = f50;
for (let v64 = 0; v64 < 5; v64++) {
    const v65 = v64();
    v65 >> v65;
    %OptimizeFunctionOnNextCall(f50);
}
