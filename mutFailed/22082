function f3(a4) {
    const o10 = {
        "d": a4,
        "b": a4,
        o(a6) {
            try {
                this.fuck(a6, -9223372036854775808n, a6, 0.0);
            } catch(e9) {
            }
            return this;
        },
    };
    return o10;
}
const v11 = f3(-3.3127864313571997);
f3(2.0);
const v13 = f3(2.0);
class C16 extends f3 {
    f = C16;
    static {
        +f3;
        true instanceof f3;
        this.b;
        v13[Symbol.matchAll] = 0.0;
    }
    static #b;
}
new C16();
new C16();
new C16();
new BigUint64Array(3768);
new BigInt64Array(4046);
const v34 = new Int8Array(3768);
function f35(a36, a37) {
    a36++;
    let o47 = {
        get d() {
            this[115] /= 4046;
            let v41 = -908890636;
            return Math.log(this & --v41);
        },
        "d": a36,
        ...a36,
        get e() {
            this.d;
            return a37;
        },
        __proto__: v34,
        ...a37,
        ...BigUint64Array,
        536870888: BigInt64Array,
    };
    [,...o47] = -3.3127864313571997;
    a37?.[4046];
    const o51 = {
        "maxByteLength": 3035,
    };
    const v53 = new v11(512, o51);
    new Float32Array(v53);
    return a36;
}
f35(115, Int8Array);
f35(4046, 3768);
const v58 = f35(4046, 4046);
v58 + v58;
const v61 = (115)?.UTC;
try { new v61(v61, 4046, 4046, Date, BigUint64Array, BigUint64Array, Date); } catch (e) {}
Uint8ClampedArray.length = Uint8ClampedArray;
const v64 = new Uint8ClampedArray(Date);
v64[2];
