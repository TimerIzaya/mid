new Float32Array(127);
const v7 = new Set();
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    try {
        this.d = a10;
    } catch(e12) {
        for (let [v13,v14] of a10) {
        }
    }
    try {
        const v15 = v7[this];
        ([WeakSet,WeakSet])[1];
        new F8(v15, -268435456n);
    } catch(e20) {
    }
}
const v21 = new F8();
const v22 = new Uint8Array(5);
new Int32Array(5);
function f26() {
    return WeakSet;
    try { v21.o(F8); } catch (e) {}
    const v29 = v21.d === v22;
    function f30() {
        return v29;
    }
    return 127;
}
const v31 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f32(a33) {
    const o37 = {
        ["536870887"]: -1000000000000.0,
        "b": -757.5759240774136,
        "a": -1000000000000.0,
        [-757.5759240774136]: "536870887",
        [-1000000000000.0]: -757.5759240774136,
        "d": "536870887",
        [-2]: -1000000000000.0,
    };
    return -757.5759240774136;
}
v31.constructor = f32;
function f38(a39, a40, a41, a42) {
    let v43 = 1073741824;
    class C45 {
        constructor(a47) {
            [a47,v43] = "boolean";
        }
    }
    const v48 = new C45(C45);
    function f49(a50, a51, a52) {
        a50[22] = a50;
        const o53 = {
            ...a52,
            2: v48,
            268435439: C45,
        };
        return o53;
    }
    const v54 = /(?:a*)+q(?<a>.)/guds;
    function f55(a56) {
        function f57(a58, a59) {
            class C60 {
                constructor(a62, a63, a64, a65) {
                    a65.match(a64);
                }
            }
            return v7;
        }
        a56.constructor = f57;
        const v67 = ("boolean").constructor;
        try { new v67(); } catch (e) {}
        v54?.constructor;
        class C70 {
        }
        v31.constructor.isArray(v54);
        return a56;
    }
    for (let [i81, i82] = (() => {
            function f75() {
                for (let i = 0; i < 5; i++) {
                    for (let v76 = 0; v76 < 5; v76++) {
                        class C77 {
                        }
                        for (let v78 = 0; v78 < 5; v78++) {
                            v78 > v78;
                        }
                    }
                }
                return f75;
            }
            f75();
            return [0, 10];
        })();
        i81 < i82;
        i82--) {
        f55(v54);
    }
    return v43;
}
async function f92(a93, a94) {
    'use strict';
    a94[9] = v31;
    return -21133.120743932668;
}
f92("h", -21133.120743932668);
for (let v96 = 0; v96 < 5; v96++) {
    f38(v96, v96, v31, v96);
}
new Uint32Array();
const v102 = /D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy;
function f103(a104) {
    a104[a104] >>= -21133.120743932668;
    function F105(a107, a108, a109) {
        if (!new.target) { throw 'must be called with new'; }
        const v110 = this.constructor;
        let v111;
        try { v111 = new v110(); } catch (e) {}
        this.e = v111;
    }
    for (let v112 = 0; v112 < 5; v112++) {
        new F105();
    }
    return a104;
}
Object.defineProperty(v102, Symbol.toPrimitive, { writable: true, value: f103 });
const v117 = ["-536870912","replace",[v102]];
v117.toString = f38;
SyntaxError("replace");
const v124 = [];
Reflect.apply(("-536870912").normalize, v117, v124);
%OptimizeFunctionOnNextCall(f38);
f38(v31, v31, v31, v31);
