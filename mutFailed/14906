[512,-9007199254740991,-46843,-1,-1492172685,-9,-7];
const v4 = [4294967296,125644966,65536];
try { v4.group(v4); } catch (e) {}
const v6 = [516962753,-4294967296,4326,-2147483647,-1073741824];
Float64Array.g = Float64Array;
const v9 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
function f11(a12, a13, a14, a15) {
    const v16 = Symbol.toPrimitive;
    Object.defineProperty(a12, v16, { configurable: true, enumerable: true, value: f11 });
    const o23 = {
        toString(a18, a19) {
            const v20 = a12 && Float64Array;
            function f21() {
                a18 *= v16;
                return Float64Array;
            }
            Object.defineProperty(v20, "valueOf", { value: f21 });
            v20 <= v9;
            return this;
        },
    };
    return o23;
}
f11(Date);
Object.defineProperty(Date, gc, { writable: true, configurable: true, enumerable: true, value: gc });
const v26 = v9 * f11;
let v27;
try { v27 = v6.values(...Symbol, -1, 56186, v26, -4, -1); } catch (e) {}
v4[v27];
const o31 = {
    "maxByteLength": 202,
};
o31.d = o31;
let v32 = 16;
v32--;
const v34 = new ArrayBuffer(v32, o31);
new Int32Array(v34);
try { ("minor").italics(); } catch (e) {}
const o40 = {
    "execution": "sync",
    "type": "minor",
};
o40.type = o40;
gc(o40);
class C42 {
    [-1];
    static #m(a44) {
        new BigUint64Array(10);
        new Uint32Array(129);
        new Int16Array(5);
        return BigUint64Array;
    }
}
new C42();
const v55 = new C42();
const v56 = v55?.constructor;
try { new v56(); } catch (e) {}
const v58 = new C42();
try { v58.valueOf(); } catch (e) {}
SharedArrayBuffer.prototype = SharedArrayBuffer;
const o62 = {
    "maxByteLength": 257,
};
const v64 = new SharedArrayBuffer(257, o62);
3 / 3;
function f67() {
    for (let i69 = 0, i70 = 3;
        (() => {
            class C71 extends f67 {
            }
            return i69 < 3;
        })();
        (() => {
            const v75 = i69++;
            v75 >> v75;
        })()) {
    }
    return -4;
}
const v80 = new Uint8Array(v64);
v80[185];
let v83 = 2;
v83--;
function f85() {
    return f85;
}
class C86 extends f85 {
    constructor(a88) {
        super();
        for (let v89 = 0; v89 < 5; v89++) {
        }
    }
}
let v90 = 10000;
v90++;
const v93 = ("p")?.constructor;
try { new v93(Int32Array); } catch (e) {}
const v95 = ("p").strike("p", "p", "p", "p");
try { v95.strike(); } catch (e) {}
v95.search(v95);
Symbol.toPrimitive.description.codePointAt();
const v104 = new BigInt64Array(4046);
v104[332];
