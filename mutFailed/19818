const v2 = new Int16Array(257);
const v5 = new Uint32Array(10);
const v6 = v5?.with;
Date.now();
Math.cbrt(Math);
for (let v11 = 0; v11 < 25; v11++) {
}
try { new v6(v2, v2); } catch (e) {}
new BigInt64Array(127);
[0.37122871487181996,5.153598338005542,0.06105027567675603,0.34275896408539275,-0.0,5.0];
const v24 = [-2.2250738585072014e-308];
v24[0];
class C29 extends WeakSet {
    static #g;
    d;
    p(a31, a32) {
        v24.toReversed();
    }
}
const v34 = new C29();
let v35 = -1.5264047652530307e+308;
let v39 = v35++;
-(--v39);
[-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
const v45 = gc();
110 | 110;
110 + 110;
try { new Int8Array(v34, 110, "getTime"); } catch (e) {}
const v51 = v34.constructor;
try { new v51(); } catch (e) {}
class C53 extends v51 {
    static 257;
}
C53[257] = C53;
new v45();
new Int8Array(v34);
Date.length;
const v58 = new Date();
const v59 = v58.getUTCDay();
v59 >>> v59;
Math.cosh();
function f63(a64, a65) {
    try { a65(Math); } catch (e) {}
    a64();
}
try { f63(Math, 0); } catch (e) {}
Promise.b = Promise;
try { Promise(); } catch (e) {}
const v71 = new Promise(f63);
let v72;
try { v72 = v71.then(); } catch (e) {}
const v73 = v72?.constructor;
try { new v73(127); } catch (e) {}
const v76 = new Uint8Array();
function f77(a78, a79) {
    const o80 = {
    };
    return o80;
}
f77.arguments = f77;
const v81 = f77();
v81.h = v81;
for (let v82 = 0; v82 < 25; v82++) {
    const v83 = f77();
    v83.h = v83;
    Object.defineProperty(v83, v82, { enumerable: true, get: f77, set: f77 });
    const v86 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v87 = [601759695];
    const v88 = [1073741824,1073741823,1376142744,1073741825];
    function f90(a91, a92, a93, a94) {
        function f96() {
            const v100 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const v102 = Symbol.toPrimitive;
            const o109 = {
                toString(a104, a105) {
                    const v106 = a94 && Float64Array;
                    function f107() {
                        a104 *= v102;
                        return Float64Array;
                    }
                    Object.defineProperty(v106, "valueOf", { value: f107 });
                    v106 <= v100;
                    return this;
                },
            };
            const o132 = {
                "c": -4294967297n,
                [522675525n](a112, a113) {
                },
                "c": -268435456,
                valueOf(a115, a116) {
                },
                "b": -4294967295,
                [-4294967297n](a118, a119, a120, a121) {
                    [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                    [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                    return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
                },
                "e": -4294967295,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v86,
                ...v87,
                "type": "Vre",
                ..."Vre",
                valueOf(a126, a127) {
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": a92,
                "type": "Vre",
                toString(a129, a130, a131) {
                    return a91;
                },
                5: -4294967295,
                6: v72,
            };
        }
        f96();
        const v135 = new Int8Array();
        v135.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f96);
        let v140;
        try { v140 = v88["find"](..."find", a94, ...v87, ...v88, ...522675525n); } catch (e) {}
        v140 <= a93;
        return arguments;
    }
    %OptimizeFunctionOnNextCall(f90);
    8 - 8;
    const v143 = 8 - 8;
    try { Int8Array(v82, v82, v143); } catch (e) {}
    const v146 = new Int8Array();
    try { v146.copyWithin(8, v146); } catch (e) {}
    try { Reflect.deleteProperty(v146, Promise); } catch (e) {}
    Reflect.preventExtensions(v83);
    const v151 = [v146];
    v151.g = v151;
    v76[v83] = v83;
    gc.name = gc;
    const v155 = !("sync" == "sync");
    v155 || v155;
    const o157 = {
        "execution": "sync",
    };
    const v158 = v143?.toLocaleString;
    try { new v158(); } catch (e) {}
    gc(o157);
}
