const v0 = [];
function f1() {
    function f2(a3) {
        parseInt("pop");
        return "pop";
    }
    return f2;
}
Object.defineProperty(v0, Symbol.toPrimitive, { writable: true, configurable: true, get: f1 });
class C9 {
    b;
    static a = v0;
    constructor() {
        const o11 = {
            [v0]: v0,
        };
        const o12 = {
        };
        o12.f = o12;
        new Proxy(o11, o12);
    }
    static [v0];
}
new C9();
const v16 = new C9();
function f17(a18, a19) {
    function f20(a21, a22, a23, a24) {
        const v26 = new Int32Array();
        v26[492];
        v26[3];
        return a21;
    }
    f20(f20, f20, f20, f20);
    return a18;
}
v16[Symbol.toPrimitive] = f17;
new C9();
const v34 = new Set();
try { v34.entries(); } catch (e) {}
-(-59186);
let v38 = 10852;
v38--;
class C41 extends C9 {
    static 1;
    #m(a43, a44) {
        v0 || a44;
        return Set;
        function f46() {
            return v34;
        }
        return super[f46];
    }
    [v16] = v34;
    3 = v16;
}
C41[1];
new C41();
const v50 = new C41();
v50[3];
new C41();
let v56 = Math.sin(Math.asinh());
v56++;
