function f2() {
    return f2;
}
function f3(a4, a5, a6) {
    const t4 = a5.constructor;
    return t4().toPrecision(f2);
}
new WeakSet();
parseFloat(parseFloat);
let v15 = Int16Array;
function f16() {
    v15--;
    class C19 {
        static #m(a21) {
        }
        set d(a23) {
            this.#m();
        }
        constructor(a26) {
            function f27() {
                return this;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f27 });
        }
    }
    const v28 = new C19();
    v28.g = v28;
    const v29 = new C19();
    v29.length = -4294967296;
    v29.length;
    let v31 = 0;
    for (let i = 0; i < 5; i++) {
        for (let v32 = 0; v32 < 5; v32++) {
            const t33 = "string";
            t33["p" + v32] = v32;
        }
        v31++;
    }
    const v36 = new C19(v31);
    [v36,v36,v36,v36,v36];
    const v38 = [v36];
    class C39 extends C19 {
        [v28];
        #n(a41, a42, a43, a44) {
        }
        #g;
    }
    const v45 = new C39();
    v38.constructor;
    let v47;
    try { v47 = v45.m(); } catch (e) {}
    return v47;
}
%PrepareFunctionForOptimization(f16);
new WeakMap();
let v52 = 7.274695049705315;
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a57;
        let v60 = 0;
        while (v60 < 9) {
            try { a56.search(v60); } catch (e) {}
            v60++;
        }
    } catch(e68) {
    }
    try {
        let v69 = a58 != 64n;
        v69--;
        class C71 extends a58 {
        }
        const v72 = new C71();
        const v74 = [v72];
        const o75 = {
            "arguments": v74,
            "type": "function",
        };
        try { a57(); } catch (e) {}
        d = -4294967297n;
        v52 = v69;
        this.g = -6n;
    } catch(e77) {
    }
    try {
        this.f = v52;
    } catch(e78) {
    }
    function f79() {
        const v81 = Set.prototype;
        let v82;
        try { v82 = v81.keys(); } catch (e) {}
        return v82;
    }
    %PrepareFunctionForOptimization(f79);
}
function f83() {
    function f85(a86, a87, a88, a89) {
        return a87;
    }
    for (let v90 = 0; v90 < 5; v90++) {
        f85(v90, f83);
    }
    return eval();
}
const v93 = new F54(-4294967297n, -4294967297n, -6n, v52);
v93.toString = f2;
const v94 = new F54(64n, F54, -4294967297n, -1.0);
let v95 = new F54(-6n, 64n, 64n, -2.0);
Object.defineProperty(this, 256, { writable: true, enumerable: true, value: BigUint64Array });
this[256] = BigUint64Array;
const t111 = (2136873598).constructor;
t111().toExponential();
class C103 {
    #o(a105, a106, a107) {
        v94[65535];
        return v93;
    }
    toString(a110, a111, a112, a113) {
        this[0] = a113;
        v95 &= v93;
        const v114 = super[v93];
        const v116 = new Date();
        try { new a112(v116, a110, a111, -4294967297n); } catch (e) {}
        return v114;
    }
    static #c = -6n;
    3164398692 = v93;
    [v93];
}
new C103();
new C103();
const v120 = new C103();
const v122 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
v122[4] = v122;
new Uint16Array(v122);
try {
    new Float64Array(5);
    new Int32Array(512);
    function F130(a132, a133, a134, a135) {
        if (!new.target) { throw 'must be called with new'; }
        this.c = a132;
    }
    class C136 {
    }
    const v137 = new C136();
    v137.constructor = parseFloat;
    const t147 = v137.constructor;
    new t147();
    new Uint32Array(1842);
} catch(e143) {
    try { v120.toString(e143, 64n, -6n, e143, e143); } catch (e) {}
}
