new BigUint64Array(1000);
const v5 = new Int16Array(201);
const v8 = new BigUint64Array(1000);
const v9 = [];
class C10 {
    static p() {
        try { this(this, this, this, v9, v9); } catch (e) {}
        let v13;
        try { v13 = v8(this); } catch (e) {}
        v13 = v13;
        const v14 = [-719491709,-4096,38613,-1,1024,65535,129];
        [65535,268435456,65537];
        [-1319674364,836468341,127,-46522,-4294967296,742091120,3621,16,-2,268435441];
        return v14;
    }
    static g = v9;
    1073741824 = v9;
}
new C10();
class C19 {
    static {
        function F21(a23, a24, a25, a26) {
            if (!new.target) { throw 'must be called with new'; }
        }
        let o27 = {
        };
        function f28(a29) {
            o27 = a29;
            return a29;
        }
        class C32 {
            toString(a34, a35, a36, a37) {
                const o46 = {
                    [-4294967297n](a40, a41, a42, a43) {
                        eval(a43);
                    },
                };
                eval();
            }
        }
        new Array(4);
        [1000000000.0,0.8616938602082478,1000000.0,NaN,Infinity,-9.621252203722717e+307,0.5158006786212987];
        [-134.63711965660673,3.0];
        [-Infinity,450936.70264396444];
    }
    [1000] = BigUint64Array;
    e = v8;
    static [v5] = BigUint64Array;
    static 10000;
}
try {
    const o58 = {
    };
    o58.a = C19;
    o58.__proto__ = 7;
} catch(e59) {
}
new C19();
new C19();
new v9();
class C64 {
}
Symbol.toPrimitive.description.codePointAt(C64);
const v71 = new Uint8Array(3745);
class C72 extends Int32Array {
}
const v73 = new C72();
v73.p2 = BigUint64Array;
let v74 = v71[64];
[,,...v74] = Uint8Array;
const v75 = new C19();
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    ~a79;
    const v81 = this.__proto__;
    const v82 = v81?.constructor;
    try { new v82(v75); } catch (e) {}
    v81.toLocaleString();
}
for (let v85 = 0; v85 < 5; v85++) {
    v73["p" + v85] = v85;
}
