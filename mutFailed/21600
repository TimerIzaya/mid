class C3 {
    static n(a5) {
        %VerifyType(this);
        this / ("MxC" % this);
        return 1000000000000.0;
    }
    static get b() {
        super.h = "p";
        super[this] = this;
        return this;
    }
}
const v12 = C3?.b;
try { new v12(); } catch (e) {}
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    a18.e = a18;
    8n / 8n;
    const v21 = [8n];
    try { v21.reduceRight(F14); } catch (e) {}
    v21 > 8n;
}
const v24 = new F14(F14, F14, F14);
const v25 = C3.length;
v25 >> v25;
const v27 = new C3();
let v28;
try { v28 = v27.propertyIsEnumerable("MxC"); } catch (e) {}
!v28;
const v30 = new C3();
const v31 = v30?.constructor;
try { new v31(); } catch (e) {}
const v33 = new C3();
try { ("i").split(v24, v33); } catch (e) {}
let v38 = 16;
v38--;
Uint32Array.name;
new Uint32Array(v38);
new Int16Array(7);
new BigInt64Array(1346);
const v52 = [7,128];
const v53 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v54 = v53[4];
v54 >> v54;
v54 | v54;
const v57 = [40213,422333454,47387,65536,-51830];
try { v57.slice(v52, Uint32Array); } catch (e) {}
v57[2] = v57;
~0;
0 - 0;
-1628878962 >>> -1628878962;
try { gc.apply(317008.8127941969, 317008.8127941969); } catch (e) {}
try { gc(); } catch (e) {}
gc();
new BigInt64Array();
try { ("boolean").match(925.1427495594241); } catch (e) {}
try { ("boolean").repeat(1000000.0); } catch (e) {}
const t57 = "toString";
t57[6] = "toString";
"toString" == "toString";
const v78 = ("boolean").split("toString");
v78.length = v78;
-256 >>> -256;
-256 >> -256;
function f82(a83, a84) {
    ~a84;
    a84 >> a84;
    const v87 = a84--;
    v87 ^ v87;
    v87 - v87;
    const v91 = -(a83 | a83);
    v91 << v91;
    const o111 = {
        "c": 15135,
        "a": 15135,
        "d": a83,
        __proto__: a84,
        "g": -1628878962,
        "type": "boolean",
        "a": a83,
        set b(a94) {
        },
        "g": 15135,
        "b": a84,
        get f() {
            super[1000000.0] = this;
            try {
                const v98 = new Int8Array(9);
                function f99() {
                    return f99;
                }
                const o106 = {
                    [f99]() {
                        delete v98[512];
                        [-2147483648,8,-49338,114079733,7,-2,4294967296,5,-128];
                        [16,4];
                        [13472,1073741823];
                    },
                };
                [o106];
                v53.copyWithin(8, -268435456, -256);
            } catch(e110) {
            }
            return this;
        },
    };
    o111.a;
    o111.a = o111;
    o111.g = o111;
    return o111;
}
let v113;
try { v113 = f82(15135, 15135); } catch (e) {}
v113.a = v113;
v113[1000000];
f82(925.1427495594241, v52);
const v116 = f82(317008.8127941969, -4);
v116.a;
v116.a = v116;
f82(1000000.0, v53);
268435441n ^ 268435441n;
const v121 = 268435441n - 268435441n;
v121 >= v121;
try { new BigUint64Array(-1628878962, -1628878962, "i"); } catch (e) {}
const v125 = new BigUint64Array();
try { v125.copyWithin(Uint32Array, v125); } catch (e) {}
v125[2445191368] = 268435441n;
