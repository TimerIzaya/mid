129 - 129;
let v5 = -65536;
v5--;
class C11 {
    constructor(a13, a14) {
        const v15 = a13++;
        const o19 = {
            "type": "minor",
        };
        gc(v15);
    }
    /*
    constructor(a22, a23, a24, a25) {
        const v26 = 65535 / -2;
        a25 <= "string";
        class C28 {
            #e;
            static 3;
        }
        Object.defineProperty(C28, 3, { value: 3 });
        const t20 = "string";
        t20[v26] = this;
        const t22 = "string";
        t22[0] = a24;
        try {
            this.__proto__ = "splice";
        } catch(e29) {
        }
    }
    */
    static h;
}
try { new C11("6dLlV", 65535); } catch (e) {}
const v31 = new C11(4, -2, v5, 3);
const v32 = v31?.constructor;
let v33;
try { v33 = new v32(v31, "6dLlV"); } catch (e) {}
new C11(v5, 4, 3, v5);
const v35 = new C11(-2, 4, -2, 129);
const o53 = {
    o(a37) {
        try { a37.propertyIsEnumerable(-2); } catch (e) {}
        this.b = Set;
        function f40(a41, a42) {
            return a41;
        }
        try { f40(a37, a37); } catch (e) {}
        const o45 = {
        };
        5 | 5;
        Uint16Array.length;
        new Uint16Array(5);
        class C51 {
        }
        return gc(o45);
    },
};
try { new Uint32Array(Uint32Array, 4, 4); } catch (e) {}
const o56 = {
};
function F58() {
    if (!new.target) { throw 'must be called with new'; }
    this?.constructor;
    try { new v5(); } catch (e) {}
}
const v62 = new v33();
v62.b = v62;
class C64 {
    [10000] = 10000;
    static toString(a66) {
    }
}
try { C64.bind(v33); } catch (e) {}
const v68 = new C64();
v68[10000] = 65535;
const v69 = new Proxy(Uint32Array, o56);
o53["o"](v35, Uint32Array, "o", "o", v69);
