function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    try {
        this.d = 18832;
    } catch(e3) {
    }
    try {
        this.a = 18832;
    } catch(e4) {
    }
}
const v5 = new F0();
function f6(a7) {
    try { v5.getDay(F0, a7, v5, a7, v5); } catch (e) {}
    function f9(a10, a11) {
        const o13 = {
            get h() {
                return this;
            },
        };
        return o13;
    }
    for (let v14 = 0; v14 < 5; v14++) {
        const v15 = f9(f9, v14);
        Object.defineProperty(v15, v14, { enumerable: true, get: f9, set: f9 });
        Reflect.preventExtensions(v15);
    }
    return F0;
}
Object.defineProperty(v5, "toString", { enumerable: true, value: f6 });
new F0();
new F0();
const v21 = new WeakSet();
class C22 {
    p(a24, a25, a26) {
        new WeakMap();
        return v21;
    }
    [v5] = v21;
    static h = WeakSet;
    set f(a30) {
        return v21;
        try { a30(F0, this, this, v5, a30); } catch (e) {}
        try {
            const o32 = {
            };
            new WeakSet(o32);
        } catch(e34) {
        }
    }
}
new C22();
new C22();
new C22();
new Uint8Array(2058);
new Float64Array(226);
new Uint8ClampedArray(1000);
const v49 = [155533.8602852358,2.0];
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v56 of Array()) {
        v49[658291203] = null;
    }
    const v57 = [];
    v57.g = -1252925017;
    v57.g = v57;
}
new F51();
new F51();
