class C3 {
    set g(a5) {
        a5 << "a";
        const v7 = a5?.[7];
        super.a = this;
        try { v7(this); } catch (e) {}
    }
    static #b;
    n(a10) {
        let v11;
        try { v11 = a10.shift(a10, "a"); } catch (e) {}
        try {
            const t12 = "a";
            t12.#b %= v11;
            ("a")[("a")["padEnd"]("padEnd", 8.89282222433517, ..."padEnd", v11)];
            ("padEnd").length;
            const v19 = v11 >>> 2.0;
            Math.abs(v19);
            C3 >>> v19;
            Math.exp(v19);
            --C3;
        } catch(e24) {
        }
        return a10;
    }
}
const v25 = new C3();
Math.log10();
const v28 = new C3();
const v29 = new C3();
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const t33 = 268435441n;
        t33.d = v29;
    } catch(e38) {
    }
    try {
        this.f = a35;
    } catch(e39) {
    }
}
const v40 = new F33(v28, v25, 280047874n);
const t43 = ("a")["normalize"](SharedArrayBuffer, C3, v25, ..."a", v40);
t43[642419362] = 8.89282222433517;
v28[268435441n] <<= 8.89282222433517;
new F33(v40, v25, 280047874n);
new F33(v25, v28, 268435441n);
const v50 = [Float32Array];
const v52 = Float32Array.isConcatSpreadable;
v52 - v52;
1 % 280047874n;
const o55 = {
    "defineProperty": Symbol,
    "deleteProperty": Symbol,
    "isExtensible": Symbol,
    "ownKeys": Symbol,
    "preventExtensions": Symbol,
    "set": Symbol,
};
new Proxy(v50, o55);
v50[v52] = Float32Array;
v50["concat"]();
