const v0 = [];
let v1 = "dotAll";
const v4 = [9007199254740990,-1807228252,268435439,536870888,268435440,15,-19574,10000,128,1386558975];
[v1] = v1;
const t4 = "seal";
t4["seal"] = v4;
Reflect.construct(v1, [v1,v1,Reflect], v1);
[13895,1,64,256,-1441930747,-268435456,536870888];
const v9 = [-9223372036854775808,-268435456,4,268435439,-9007199254740991];
const v10 = ["seal",v4,v4];
["symbol","seal",v0];
const v12 = [v9];
function f13() {
    return "seal";
}
new Int8Array(2);
const v17 = v4.__proto__;
v0[221] >>>= 2;
Object.defineProperty(v9, "a", { set: f13 });
let v18;
try { v18 = v10.join("symbol"); } catch (e) {}
try { new v18(v9, v12, Int8Array, v17); } catch (e) {}
const v22 = new Float32Array(250);
const v25 = ["symbol",v1];
const v26 = v12.toLocaleString;
const v27 = Reflect.apply(v26, v22, v25);
try { v27(Float32Array); } catch (e) {}
new gc(5);
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { v27(a37, v39, v26, v39, a37); } catch (e) {}
    try { v39(v39); } catch (e) {}
    Object.defineProperty(v26, -1, { writable: true, enumerable: true, get: f13 });
    this[Symbol.match] = a37;
    try { new v39(a35); } catch (e) {}
    this.c = a35;
}
new F33(-2.0);
new F33(-1.093925554716035e+308);
