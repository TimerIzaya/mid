new Int8Array(90);
class C5 {
}
new Int32Array(9);
new BigInt64Array(0);
new Uint16Array(4049);
[-0.0,-1000000000000.0,-1.757346421683506,5.44339036732896e+307,-7.51187281128843e+307,-3.0,-4.0,632988.1805185077,-1.4366685622047327e+308];
class C14 {
}
class C15 {
    static {
        class C17 {
        }
    }
}
[-705679.1594794607,-663.4771042963772,0.8442048530040164,-2.2250738585072014e-308,1000.0,5.387701172145787e+307];
[-1.3711011324134289e+308,-1000000.0,865318.1312684296,1e-15,0.944876316084082];
class C20 extends Uint16Array {
    4294967296;
    static {
        super.length = 4049;
        super.buffer;
    }
    static e;
    static #g = Int8Array;
    o(a24, a25, a26, a27) {
        const v32 = [-2.0,272822757,"function"];
        const o33 = {
            __proto__: v32,
        };
        Math.expm1(10000);
        ~a24;
        Int8Array & 10000;
        Math.fround(a24);
        return Int8Array;
    }
}
new C20();
new C20();
new C20();
try {
    BigInt(-0.9475779989772164);
} catch(e45) {
    function f46() {
        Number.isNaN(Math.fround(Math));
        return f46;
    }
    %OptimizeFunctionOnNextCall(f46);
}
