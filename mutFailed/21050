new Float32Array(10);
let v8 = Float64Array;
const v9 = new v8(235);
const v12 = new Int8Array(3756);
function f13(a14, a15) {
    const o24 = {
        m(a17, a18, a19, a20) {
            const o21 = {
            };
            new Proxy(this, o21);
            return 2147483648;
        },
        1699: v9,
        "b": v12,
        __proto__: v12,
        ...v9,
        "a": v12,
        "c": a15,
        "f": 6,
    };
    return o24;
}
f13(10, Int8Array);
f13(3756, 235);
f13(2147483648, -26377);
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.__lookupGetter__;
    try { v35(); } catch (e) {}
    const v38 = Date.toString();
    const v39 = v38[23];
    let v40;
    try { v40 = v39.strike(F33, F33, v38, Int16Array); } catch (e) {}
    const v41 = v38.replaceAll();
    let v42;
    try { v42 = v41.replaceAll(); } catch (e) {}
    const v44 = new Uint32Array(v35, v35, v35);
    v44[2];
    const v47 = new Set(v42);
    const v48 = v47.add;
    let v50 = v47["delete"]();
    const v51 = v50 || v50;
    const v52 = v51 || v51;
    const v53 = v51 && v51;
    const o55 = {
    };
    let v57;
    try { v57 = v47.forEach(v52, v48); } catch (e) {}
    const v59 = ++v50;
    v59 >>> v59;
    const v61 = Int16Array >>> v52;
    try {
        arguments.fuck();
    } catch(e63) {
    }
    const v65 = ("getPrototypeOf").blink();
    const v66 = v65.trimRight;
    try { v66(v52, Int16Array); } catch (e) {}
    const v68 = v65[28];
    const v69 = v68.strike();
    try { v69.isWellFormed(); } catch (e) {}
    const v71 = v65.strike(v42);
    const v72 = v71.max(v50, Int16Array, v65, Array, v71);
    v72[11] = v72;
    class C73 {
    }
    class C74 extends C73 {
        ["getPrototypeOf"] = C73;
    }
    const v75 = new C74();
    const v76 = v75.getPrototypeOf;
    function f77() {
        return Date;
    }
    Object.defineProperty(v76, "MAX_VALUE", { enumerable: true, get: f77 });
    new v76();
    const v79 = new F29();
    function f80(a81) {
        function f83() {
            return "object" + -13;
        }
        return a81;
    }
    v79.constructor = f80;
    const t87 = v79.constructor;
    const v87 = new t87(v44);
    function f88() {
        v8 = v35;
        try {
            new f77();
        } catch(e90) {
        }
        return 235;
    }
    v87.valueOf = f88;
    v87.valueOf(Int16Array, F33);
    const v92 = new C74();
    const t100 = v92.constructor;
    new t100();
    const t102 = v92.getPrototypeOf;
    new t102();
    const v98 = BigUint64Array.of();
    try { v98.entries(Int16Array, F33, v39); } catch (e) {}
    let v101;
    try { v101 = Int8Array(Int8Array, Int8Array, v57); } catch (e) {}
    const v102 = new C74(v71, v40, v101);
    const v103 = v102.getPrototypeOf;
    function f104(a105, a106) {
        for (let v107 = 0; v107 < 5; v107++) {
            function f109() {
                return f109;
            }
            const o112 = {
                "type": "function",
            };
            new Worker(f109, o112);
        }
        return a106;
    }
    v103.toString = f104;
    new v103();
    const t124 = v102.getPrototypeOf;
    const v116 = new t124();
    const v117 = v116.__defineSetter__;
    try { v117(v61); } catch (e) {}
    const v119 = v102.getPrototypeOf;
    function f120() {
        "find" + 15;
        return 15;
    }
    v119.growable = f120;
    const v124 = new v119();
    v124.getPrototypeOf = 235;
    v124.getPrototypeOf = v124;
    const v125 = new C74();
    v125.constructor = f88;
    const v126 = v125.getPrototypeOf;
    v126.toString = f104;
    const v127 = new v126(F33, "getPrototypeOf", v41);
    v127.b = v127;
    const v128 = new v126();
    const v129 = v128.constructor;
    try { v129.call(v68); } catch (e) {}
    const v131 = new v129();
    Object.defineProperty(v131, "getPrototypeOf", { enumerable: true, value: v124 });
    let v132 = v131.getPrototypeOf;
    v132++;
    const t149 = v125.constructor;
    const v135 = new t149(F33, v53);
    v135.c = f77;
    const v136 = v135.constructor;
    new v136(v136);
    const v138 = v135.getPrototypeOf;
    try { v138.toString(arguments, v138, v103); } catch (e) {}
    const v140 = Array(19793);
    v140.with(v65, v61);
    for (const v142 of v140) {
    }
}
new F33();
new F33();
