new BigInt64Array(127);
const v3 = [601759695];
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f5(a6, a7, a8, a9) {
    a6 >>> a6;
    a8[3];
    ("find").codePointAt(v4);
    try { v4["find"](..."find", a9, ...v3); } catch (e) {}
    return a9;
}
class C19 {
}
async function f20(a21, a22, a23, a24) {
    (await C19).call(8, Uint16Array);
    return a22;
}
new BigUint64Array(1000);
new BigInt64Array(220);
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a35;
}
function f36() {
    function f37() {
        return [f37];
    }
    const v39 = f37();
    %OptimizeFunctionOnNextCall(f37);
    return v39;
}
const v40 = [-2142223495];
const v41 = [2147483647,10000,-9223372036854775808,27646,-6,6514];
[4,7,182382732,24972,11,-9343,-36358];
class C43 {
    #b;
    constructor(a45, a46) {
        for (let v47 = 0; v47 < 500; v47++) {
            [601759695];
            function F49(a51, a52, a53) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F49();
        }
    }
    static #b = v41;
    /*
    constructor(a56, a57, a58) {
        try { v40.reduce(a58); } catch (e) {}
        try {
            a58.#b;
        } catch(e61) {
        }
        this[this] = a56;
        try {
            const v62 = [0.9168509280113071,9.27369367578962,0.0,0.4360071622014092,Infinity,0.705215518306282];
            try { v62.trimStart(); } catch (e) {}
            function F65() {
                if (!new.target) { throw 'must be called with new'; }
                for (let v67 = 0; v67 < 50; v67++) {
                    v67 - v67;
                    for (let v69 = 0; v69 < 25; v69++) {
                        ("p").codePointAt(Uint8ClampedArray);
                    }
                }
            }
            a58.#b %= BigUint64Array;
        } catch(e72) {
        }
    }
    */
    static 4211059040;
    static #a = v40;
    /*
    constructor(a74, a75) {
        const v76 = this.__lookupGetter__;
        try { new v76(); } catch (e) {}
        ~a75[2];
        function f81(a82, a83, a84, a85) {
            a82.length;
            a84++;
            const o88 = {
            };
            return o88;
        }
        f81(C19, Uint8Array, f81);
        for (let v90 = 0; v90 < 625; v90++) {
            v90 >>> v90;
            f81(Uint8Array);
        }
    }
    */
}
new C43(1000, C43, BigInt64Array);
new C43(127, BigInt64Array, 220);
new C43(220, 1000, 127);
const v97 = [4294967297,4294967297];
v97[65537] = 4294967297;
v97.fill(v97);
