function F0() {
    if (!new.target) { throw 'must be called with new'; }
    let v2 = -2147483649;
    try {
        this.d = v2;
        let v4 = -1;
        Math.tanh(716769.473075072);
        v2--;
        v4++;
    } catch(e9) {
    }
}
const v10 = new F0();
const v11 = new F0();
const v12 = new F0();
const v14 = new WeakMap();
class C15 extends F0 {
    set g(a17) {
        super[a17];
        a17[5] = v14;
        try { this.getUint32(a17, a17, v11, new.target, v12); } catch (e) {}
        this[429];
        try {
            v10.d = v12;
        } catch(e22) {
        }
    }
    static [v10] = v12;
    c;
}
const v23 = new C15();
new C15();
const v25 = new C15();
class C26 extends F0 {
    constructor(a28, a29, a30, a31) {
        super();
        v10 in this;
        function f33() {
            function f35(a36) {
                function f37() {
                    return this;
                }
            }
            this.onmessage = f35;
            try {
                this.valueOf = f35;
            } catch(e38) {
            }
        }
        const v41 = [];
        const o42 = {
            "arguments": v41,
            "type": "function",
        };
        new Worker(f33, o42);
        for (let i50 = (() => {
                v25[f33];
                super[v41];
                for (let v47 = 0; v47 < 100; v47++) {
                    f33();
                }
                return 0;
            })();
            i50 < 5;
            i50++) {
        }
    }
}
const v59 = new C26(v23, v12, v11, v23);
new C26(v11, v11, v59, v59);
new C26(C15, v59, v12, v25);
class C62 {
}
const v63 = new C62();
this.escape(v63);
