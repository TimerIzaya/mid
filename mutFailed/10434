function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v3 = 333;
        const v4 = [1073741824,1073741823,1376142744,1073741825];
        function f5(a6, a7, a8, a9) {
            let v10 = f5 && a8;
            arguments[3] = arguments;
            ({"h":v10,"length":a6,...v3} = v4);
            ("find").startsWith(a9);
            for (let v14 = 0; v14 < 5; v14++) {
            }
        }
        for (let v15 = 0; v15 < 5; v15++) {
            f5();
        }
        f5();
        %OptimizeFunctionOnNextCall(f5);
        f5();
        this.g = -7;
    } catch(e19) {
    }
    try {
        this.e = -7;
    } catch(e20) {
    }
}
const v21 = new F0();
const v22 = new F0();
new F0(v21, v22, v22);
class C24 extends F0 {
    static g = F0;
    static #p(a26, a27) {
        function f28() {
            return a27;
        }
        return F0;
    }
    constructor(a30) {
        super();
        a30 **= F0;
        /7(ab|cde)?/udms;
        /xyz{1,32}?\cA/dmsy;
        /[\1111]/gms;
    }
}
const v34 = new C24(C24);
const v35 = new C24(F0);
const v36 = new C24(v21, v34);
const v37 = [-7.075667248577302,-137286.1251427069,6.067841644784238,-1000000000.0,0.9780366170795848,-2.220446049250313e-16,0.8460378073648882,-1.7976931348623157e+308];
const v38 = [-749.594822489863,3.0,2.798685211641187,7.575206855724794,1.4021595374931926e+308,-1000000000.0,-5.0,0.8840298309074285,0.7920413946211603,-0.0];
const v39 = [-1.0];
function f40(a41, a42, a43) {
    const o51 = {
        13: a43,
        10000: a42,
        "b": a42,
        [a43](a45, a46) {
            a46 instanceof F0;
            const v49 = [a41,[this,a42,v21],a43];
            [a42,v49,a42,v49];
            return a46;
        },
        "g": v21,
        __proto__: v22,
        268435456: v38,
    };
    return o51;
}
f40(v35, v36, v37);
f40(v34, v38, v37);
f40(v21, f40, v39);
function f55() {
    return f55;
}
const v56 = /(?:a*)+q(?<a>.)/guds;
function f57(a58) {
    a58.constructor;
    const v61 = new Uint8ClampedArray();
    const v63 = v61 ^ 3;
    try { v39(a58, f55); } catch (e) {}
    class C65 {
    }
    return v63;
}
for (let [i72, i73] = (() => {
        const v68 = new Int32Array(-57558);
        v68.set();
        return [0, 10];
    })();
    i72 >= i73;
    i73--) {
    for (let v80 = 0; v80 < 50; v80++) {
        f57(v56);
    }
}
