const v2 = new Uint8ClampedArray(128);
const v5 = new Uint8Array(2376);
let v7 = BigInt64Array;
new v7(1249);
class C9 {
    constructor(a11, a12) {
        v5[v5] = a11;
        v5.with(1249, v7, a11, Uint8Array, Uint8Array);
        let [v14,v15] = 2376;
        super[v14];
        const v20 = v7++;
        const v21 = !-4294967296;
        v21.ceil(v7);
        v21 * -4294967296;
        Math.asinh(v20);
        Math.asinh(-187099279);
        Math.min(v20);
    }
}
new C9(1249, 2376);
const v28 = new Uint8Array(128, 128);
const v29 = new C9(2376, 2376);
function f30(a31, a32) {
    const o39 = {
        "a": a31,
        n(a34, a35) {
            /S(x)(x)(x)\1*/guim;
            /FH[\ca](?<a>(?<b>(?<c>(?<d>.).).).)*/gvims;
            return /(?<!a)[l(x)(x)(x)\1*]/udmy;
        },
        "b": a31,
        "g": Uint8ClampedArray,
        ...v2,
        "d": v29,
        __proto__: v28,
        8: v28,
        "f": f30,
    };
    return o39;
}
f30(1249, 1249);
f30(2376, 2376);
f30(128, 2376);
function f44() {
    function F45(a47, a48) {
        if (!new.target) { throw 'must be called with new'; }
        const v49 = a48.constructor;
        try { new v49(); } catch (e) {}
        this.c = Float32Array;
    }
    new F45(f44, F45);
    new F45();
}
Float32Array.toString = f44;
class C54 {
    static [Float32Array] = undefined;
}
