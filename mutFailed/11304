-65537n >> -65537n;
new Int16Array(5);
try { new Uint32Array(Uint32Array, Uint32Array, 3535n); } catch (e) {}
const v13 = new Uint32Array(4);
v13[3];
new Int16Array(4);
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.__lookupSetter__;
    try { new v25(a22); } catch (e) {}
    try { a22.bind(a21); } catch (e) {}
    a24 + a24;
}
F19.caller = F19;
const v29 = new F19(164140152, F19, 164140152, 164140152);
522675525n & 522675525n;
F19 <= v13 ? F19 : v13;
const o36 = {
    "maxByteLength": 255,
};
const v38 = new ArrayBuffer(255, o36);
new Uint32Array(v38);
for (let v41 = 0; v41 < 5; v41++) {
    function f42() {
        const v44 = ("Vre").strike();
        try { v44.fontcolor(v13); } catch (e) {}
        const v46 = v44.link();
        v46[26];
        v46.includes(164140152);
        const v50 = Array();
        const v51 = v50?.includes;
        try { new v51(v41); } catch (e) {}
        v50.unshift(v29, v41, F19, v41, v50.pop());
        Set.prototype;
        const v57 = new Set();
        v57.add().entries();
        class C60 {
        }
        const v61 = new C60();
        !v61.hasOwnProperty(v46);
    }
    %OptimizeFunctionOnNextCall(f42());
}
