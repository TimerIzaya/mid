let v0 = Date;
const v1 = new v0();
const v8 = [0.1802588792158798,0.59361995823132];
this.escape();
new Uint32Array();
const v13 = /(?:a*)+q(?<a>.)/guds;
const t5 = 0.0;
const v14 = new t5();
v14.constructor;
new Map();
class C18 {
}
v13.constructor;
[-0.0,-521.7480069033354,1.242876762990111,-1000.0,-1.1300484097421518e+308,2.0,-8.013631437588676e+307];
const v21 = [-4.759045511316018e+307,Infinity,-306.7397636175622,-908957.1230062196,-Infinity,8.764472394162162,Infinity,-1000000000.0];
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = [v8,this];
    [v25,v25,F22];
    let v27 = [this,1141300185];
    v27++;
    Math.asinh(536870887);
    +this;
    Math.h = 1141300185;
    try {
        class C34 extends v25.constructor {
            constructor(a36, a37) {
                for (let v38 = 0; v38 < 100; v38++) {
                }
                [v0] = v25;
            }
            h = -3.0;
            e = C34;
        }
        new C34();
    } catch(e40) {
    }
}
new F22();
new F22();
new F22();
const o44 = {
};
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    class C49 {
        static ["22307"] = "AanB8";
        b;
    }
    new C49();
    function f51(a52) {
        const v53 = [58584,15,9007199254740990,2146023485];
        [46733,-268435456];
        Object.defineProperty(v53, 65537, { writable: true, value: v8 });
    }
    function f55() {
        const t56 = ("match").__proto__;
        t56[1478] = f55;
        return "match";
    }
    f55();
}
const o60 = {
    get a() {
    },
};
function f61() {
    class C62 {
        #valueOf(a64, a65, a66, a67) {
        }
    }
    return v1;
    const v70 = new Int16Array(305);
    try { Map.apply(v70, v70); } catch (e) {}
    const o86 = {
        valueOf(a74, a75) {
        },
        [v21]: v21,
        __proto__: v8,
        n() {
            function F77(a79, a80, a81) {
                if (!new.target) { throw 'must be called with new'; }
                a79--;
                a81 / a81;
                const v84 = this.constructor;
                try { new v84(a80, a80, a81); } catch (e) {}
            }
        },
        "f": C62,
    };
    new Float32Array(55);
    const o93 = {
        "execution": "async",
    };
    gc(o93);
    var b = -2147483649n;
}
