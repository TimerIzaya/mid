const v2 = new Array(1219);
const v3 = [Array,1219,1219,v2,v2];
let v4 = [v2,v2];
[v4,1219,v3,1219];
class C6 extends Array {
    static #d = v2;
    static #valueOf(a8, a9, a10) {
        const v12 = Symbol.iterator;
        const o21 = {
            [v12]() {
                let v14 = 10;
                const o20 = {
                    next() {
                        v14--;
                        const v18 = v14 == 0;
                        const o19 = {
                            "f": v18,
                            "value": v14,
                        };
                        return o19;
                    },
                };
                return o20;
            },
        };
        return v2;
    }
}
const v22 = new Array();
try { v22.fill(v2); } catch (e) {}
new C6();
const v25 = new v22();
try { v25.findIndex(v22); } catch (e) {}
const v27 = [4.850958930221275,-1e-15,-2.220446049250313e-16,-1e-15,-4.0,-1.7976931348623157e+308,-1000000000.0,1000000000.0];
v27[4] = v27;
[-1e-15,1000000.0,-2.0,1.7976931348623157e+308,1000000000.0,0.6191680801156288,1.0];
v22.length;
const v30 = [-1000000.0,-621029.5420814999,-Infinity,136427.58995814738,-1000000000.0];
try { v30.forEach(v27); } catch (e) {}
isNaN.length = isNaN;
try { new Int8Array(isNaN, isNaN, Uint8Array, v22, 7); } catch (e) {}
let v44 = 964446029;
v44--;
0 - 0;
3 % 3;
function f53(a54, a55) {
    const o66 = {
        m(a57) {
            const v60 = Int8Array();
            let v62 = 0;
            v62 >> v62;
            [...v4] = v60;
            v62++;
            return 1;
        },
    };
    ["function",/[-123]N/gdis];
    class C73 {
    }
    class C77 extends Int8Array {
        [59812];
    }
    return -7;
}
const v78 = f53?.constructor;
try { new v78(v4); } catch (e) {}
