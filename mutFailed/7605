class C3 {
    constructor(a5, a6) {
        const v8 = Symbol.replace;
        function F9(a11, a12, a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            eval();
            function F17(a19) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F17();
        }
        a5[v8] = a6;
        a6[v8] = this;
        var b = -547997.1655832729;
        this instanceof Worker;
    }
    2147483649;
    #p(a24, a25) {
        const v26 = a24 ^ a24;
        const v27 = a24 >= "object";
        function* f28(a29) {
            return f28;
        }
        f28.constructor;
        const o31 = {
        };
        if (v27) {
            try {
                a24.f = "-1871037795";
            } catch(e32) {
            }
        } else {
            function F33(a35, a36, a37) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = a25;
                } catch(e38) {
                }
                try {
                    this.h = v26;
                } catch(e39) {
                }
                try {
                    this.a = this;
                } catch(e40) {
                }
            }
            const v41 = new F33(F33, a25, "-1871037795");
            new F33(F33, v41, this);
            new F33(this, F33, v26);
        }
        return this;
    }
}
const v44 = new C3(-547997.1655832729, C3);
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
}
const v49 = new F45();
async function f50(a51, a52, a53, a54) {
    a51.fuck();
    await v49;
    return F45;
}
const v57 = new C3(v44, v44);
const v58 = new C3("-1871037795", v57);
class C59 extends C3 {
    p(a61, a62, a63, a64) {
        delete a61?.b;
        Object.defineProperty(v58, 6, { configurable: true, value: this });
        class C66 extends C3 {
            #a = a64;
        }
        new C66();
        new C66();
        new C66();
        return a61;
    }
    static #b;
    [v44] = v58;
    #h;
    b;
}
function f70() {
}
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a74;
}
const v75 = new F71(F71, F71);
delete v75.h;
new C59();
new C59();
this.print(this, this);
class C81 {
}
Int32Array.bind(Int32Array, Int32Array, Int32Array);
new C59();
/a+bXM+/guims;
/M/y;
/Pld/udisy;
[9.340501401111053e+307,8.763175523989815e+306,2.0,1000000000000.0,-1000.0,0.05255120894122656];
[3.0,-3.0,6.413675267041181e+307,-1000000000000.0,-7.420735453542857,2.0,2.2250738585072014e-308,4.854777376516692e+307,-26.361303452842662,1000.0];
[2.220446049250313e-16,2.220446049250313e-16,1.4134038018337055e+308,1.0,2.2250738585072014e-308,2.2250738585072014e-308,-2.0,1000000.0];
class C93 {
    constructor(a95, a96) {
        const v97 = this.constructor;
        try { new v97(); } catch (e) {}
        let v99 = 0;
        for (let i = 0; i < 10; i++) {
            Math.atan();
            const v103 = v99++;
            v103 - v103;
        }
    }
}
new C93();
