const v1 = new WeakMap();
const v2 = [v1];
function f3(a4) {
    ([v1,...v2,a4,a4])["copyWithin"](a4, a4, a4);
    return WeakMap;
}
v2[Symbol.toPrimitive] = f3;
const v10 = [v1,v2,v1,WeakMap,WeakMap];
v10[Symbol.toPrimitive] = f3;
let v13 = [v2,v10];
const o17 = {
    "execution": "async",
    "type": "minor",
};
gc(o17);
[772.7544985090449,90.3299660533653,-1000.0,0.14280940774694517,0.1621199395530235,-1.0,-1000000000.0,-230.04353009675935];
[7.26644961130736e+307];
[0.3992632240408994,-2.0,-9.274668750289512e+307,-1.7976931348623157e+308];
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F25();
        const v32 = -1.252027415501717e+308 | -32070;
        (-32070) ** v32;
        +v32;
    } catch(e35) {
    }
}
const v36 = new F25(F25, F25);
v36.valueOf = f3;
new F25(F25, v36);
new Map();
F25 <= v36 ? F25 : v36;
v13++;
