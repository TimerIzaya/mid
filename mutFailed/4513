class C3 {
    constructor(a5) {
        let v6 = 0;
        do {
            let v8 = this >= a5 ? this : a5;
            v8 = a5;
            v6++;
        } while (v6 < 8)
    }
}
const v12 = new C3(-2.2250738585072014e-308);
const v13 = new C3(NaN);
new C3(-283304.5830678671);
class C15 extends C3 {
    [v12] = v13;
    static [-2.2250738585072014e-308];
    get b() {
        return 9n;
    }
    static {
        do {
        } while (0 < 0)
    }
}
new C15();
new C15();
new C15();
class C33 {
}
-10 instanceof undefined;
new Int8Array(1487);
new Int32Array(2943);
function f48(a49, a50, a51) {
    'use strict';
    return a49;
}
new BigUint64Array(194);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F56() {
    if (!new.target) { throw 'must be called with new'; }
    function f58(a59) {
        const o62 = {
            "maxByteLength": 1000,
        };
        new ArrayBuffer(8, o62);
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f58 });
    let v67 = 1073741825;
    try {
        v67++;
        let v71 = -1e-15;
        Math.atan2(v71++, -175950080);
        this.b = v67;
    } catch(e74) {
    }
}
let v75 = new F56();
let v76 = new F56();
v76.global = -10809n;
({"a":v76,"b":v76,...v75} = v76);
const o81 = {
    "execution": "minor",
    "maxByteLength": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o81);
new F56();
new Uint8ClampedArray(16);
function f88() {
    const v92 = new BigUint64Array(549);
    const v95 = new Uint8ClampedArray(127);
    for (const v96 in v95) {
        try { v92.filter(); } catch (e) {}
    }
    new Int8Array(1073741823);
    class C100 {
        #valueOf(a102, a103, a104, a105) {
        }
    }
    const o109 = {
        valueOf(a107, a108) {
        },
    };
}
f88();
%OptimizeFunctionOnNextCall(f88);
