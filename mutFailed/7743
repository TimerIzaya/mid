function f0() {
}
class C1 extends f0 {
    static 1866;
    p(a3, a4, a5, a6) {
    }
    static #m() {
        const v8 = f0();
        const v11 = new Int8Array(7);
        v11.fill();
        for (let v13 = 0; v13 < 50; v13++) {
            Array(36862);
        }
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeFunctionOnNextCall(f0);
        const v19 = f0();
        let v20;
        try { v20 = this.every(v19, v8, f0, v19); } catch (e) {}
        return v20;
    }
    #c = f0;
    7 = f0;
    #g = f0;
    static b;
}
const v21 = new C1();
let v22 = C1.__proto__;
Math.hypot("setUTCMilliseconds");
Math.acos("setUTCMilliseconds");
9007199254740992 * "setUTCMilliseconds";
const v32 = new C1();
new BigInt64Array(1091060517);
const v36 = [-1.7976931348623157e+308,1.567547754457685];
const v38 = new Uint32Array(v36, v36, Uint32Array);
const t36 = v38.constructor;
new t36(v36);
new C1();
const v42 = [C1,v32,f0,C1];
const v45 = new Int8Array(8);
[v45];
const v47 = [1024];
const v48 = [29043,536870912,-1];
function F49(a51) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = v47;
}
const v52 = new F49();
function F54(a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    const v59 = this.constructor;
    try { new v59(a58, 10n, a58); } catch (e) {}
    a57.c = a57;
    a58.e = a58;
}
new F54(v52, 268435441, v48);
[C1,v42,v21,v42,f0];
const v64 = [f0,v42,f0];
new Float64Array(2975);
new Uint32Array(8);
const t61 = [-2.220446049250313e-16,0.4010936999061169];
t61.length = -2;
new BigUint64Array(2943);
function F79(a81) {
    if (!new.target) { throw 'must be called with new'; }
    const v82 = this.constructor;
    const v83 = v82.bind(F79, F79, F79, F79);
    try { v83(); } catch (e) {}
    try { new v82(); } catch (e) {}
}
for (let v87 = 0; v87 < 73; v87++) {
    v22 %= v64;
    f0();
    %PrepareFunctionForOptimization(f0);
    f0();
    f0();
    %OptimizeFunctionOnNextCall(f0);
    f0();
}
class C93 {
    g;
    ["p"] = 1000000.0;
}
function f94() {
    return v45;
}
function f95() {
    for (const v99 of Array(4087, Array, Array)) {
    }
    return f95;
}
%OptimizeFunctionOnNextCall(f95);
new C93();
new C93();
new C93();
new BigInt64Array(3243);
for (let v104 = 0; v104 < 5; v104++) {
    function f105() {
        const v107 = ([-1.5424212036356715e+308]).shift();
        const v108 = [1073741824,1073741823,1376142744,1073741825];
        v108.g = v108;
        return v107;
    }
    f105();
    %OptimizeFunctionOnNextCall(f105);
}
