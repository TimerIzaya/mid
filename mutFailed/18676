new Float64Array(15);
new Float32Array(128);
async function f8(a9, a10, a11) {
    return a11;
}
f8.constructor;
const v15 = new BigInt64Array(3768);
let o16 = {
};
[,...o16] = v15;
new Int32Array(-9);
function F22(a24) {
    if (!new.target) { throw 'must be called with new'; }
}
const v26 = new F22("4294967297", f8, v15, "16");
const v27 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Array(19793);
        [["undefined"]] >= Uint16Array;
    } catch(e37) {
        v27.findLastIndex;
    }
}
new F28();
try { Set.bind(v26); } catch (e) {}
new Set();
1000 - 1000;
const v46 = new Uint8Array(1000);
const v50 = Array();
try { v50.findLast(v50); } catch (e) {}
const v54 = Array(1000);
let v55;
try { v55 = v54.push(1000); } catch (e) {}
const v56 = new BigUint64Array(257);
const v57 = Uint8Array in v56;
v57 && v57;
try {
    for (let v60 = 0; v60 < 100; v60++) {
        Array(v55);
    }
    v56.unicode = v46;
} catch(e62) {
}
const v65 = new Float32Array(4);
v65[3] = v65;
~4096;
Uint8Array.name;
Uint8Array.e = Uint8Array;
const v72 = undefined?.constructor;
try { new v72(v54); } catch (e) {}
undefined.f?.toLocaleUpperCase;
function f77() {
    return f77;
}
let v78 = -2n;
v78--;
function f81() {
    return 536870887n;
}
try { f81(); } catch (e) {}
let v83;
try { v83 = f81(); } catch (e) {}
v83 * v83;
let v85 = 2;
v85++;
Map.prototype;
Uint8Array.prototype = Uint8Array;
function F92() {
    if (!new.target) { throw 'must be called with new'; }
    const v95 = ArrayBuffer();
    try { v95.small(); } catch (e) {}
    for (const v100 of Array(19793)) {
    }
    try {
    } catch(e101) {
    }
}
const v102 = new F92();
const v103 = v102?.constructor;
try { new v103(); } catch (e) {}
function F105(a107, a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    for (let i112 = 0, i113 = 10;
        (() => {
            const v114 = i112 < i113;
            const v115 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
            try {
            } catch(e116) {
            }
            const v117 = v115.toSpliced();
            v117[3] = v117;
            return v114;
        })();
        ) {
    }
}
for (const v126 of Array(4087, v15, Array)) {
}
class C127 {
    constructor(a129) {
        try {
        } catch(e130) {
        }
        try {
        } catch(e131) {
            class C132 extends Map {
            }
        }
        for (const v133 of "bigint") {
        }
        function f134(a135, a136, a137, a138) {
            const o142 = {
                get f() {
                    new a136();
                    return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
                },
                ...a136,
            };
            return o142;
        }
    }
}
const v143 = C127?.toString;
try { new v143(); } catch (e) {}
class C145 extends C127 {
}
const o146 = {
};
