new BigInt64Array(55);
new Float64Array(5);
new Uint8Array(256);
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    function f19(a20, a21, a22, a23) {
        const v25 = a23.toString(a20, f19, f19, a20);
        function f26() {
            let v27 = -268435456;
            v27--;
            const v30 = -(v27 + v27);
            const o31 = {
                [v25]: v30,
            };
            return f19;
        }
        class C32 {
        }
        new C32();
        const v34 = [1868255996,1,2,9007199254740992];
        try { v34.includes(undefined, -4934n); } catch (e) {}
        f26();
        const v39 = [6,268435440,13,1073741825];
        const v40 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
        v40[Symbol.toPrimitive] = f19;
        v39[v40] = v40;
        class C44 {
            constructor(a46, a47) {
                try {
                    super.n(1e-15);
                } catch(e49) {
                }
                try {
                    super.getYear(a46, this);
                } catch(e51) {
                }
            }
        }
        new C44(C44, C44);
        %OptimizeFunctionOnNextCall(f26);
        return f19;
    }
    f19(f19, 55, 55, Uint8Array);
    let v55 = 2684;
    const v56 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    let v57;
    try { v57 = v56.fill(BigUint64Array); } catch (e) {}
    v55 = v57;
    a17.toString();
}
new F14(BigInt64Array, 7n);
