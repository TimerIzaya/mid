class C3 {
    m(a5, a6) {
        const v7 = a6 in this;
        try {
            super.toString(this, "-1228941716");
        } catch(e9) {
        }
        return v7;
    }
    1 = "-1228941716";
    static #h = "-1228941716";
    c = 0.9125261630296417;
    #e = "buffer";
}
const v10 = C3?.apply;
try { new v10("buffer", 0.9125261630296417); } catch (e) {}
new C3();
new C3();
const v14 = new C3();
v14[1] = v14;
let v15 = 551.9389213197012;
v15--;
-2.2250738585072014e-308;
class C20 extends C3 {
    static {
        let v22 = 255;
        v22++;
        -2003788854 >>> -2003788854;
        let v28;
        try { v28 = C3["valueOf"]("valueOf", "valueOf", 9, 0.06521876449811514); } catch (e) {}
        v28.name = v28;
    }
    static [0.06521876449811514] = v14;
    static [v14] = C3;
    static g;
    b = C3;
    a;
}
const v29 = new C20();
v29[1] = v29;
new C20();
new C20();
const v35 = [-54813,8,-54813,8];
const v36 = [-54813];
try { v36.map(8); } catch (e) {}
const v38 = [-54813];
function f39(a40, a41, a42, a43) {
    try { a41.map(a40); } catch (e) {}
    try { a42.sort(a40); } catch (e) {}
    a43 & a43;
    const o55 = {
        n(a48, a49, a50, a51) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a43;
        },
        ...v38,
        "b": v35,
        ...a42,
        ...v38,
        129: 4,
        ...a40,
    };
    return o55;
}
f39(v36, 8, f39(v36, v38, v35, 4), 4);
f39(v38, 4, 4, 4);
129 / 129;
try { Map.call(-54813); } catch (e) {}
/ND2/gds;
class C66 extends Map {
}
const v67 = new C66();
v67.isPrototypeOf();
class C71 {
    static {
        for (let v73 = 0; v73 < 25; v73++) {
            v73 + v73;
            const v75 = [601759695];
            try { v75.toReversed(); } catch (e) {}
            const v77 = [1073741824,1073741823,1376142744,1073741825];
            522675525n >> 522675525n;
            function f80(a81, a82, a83, a84) {
                try { a81(); } catch (e) {}
                a82 | a82;
                a83 & a83;
                let v88;
                try { v88 = new a81(); } catch (e) {}
                const v89 = v88?.constructor;
                try { new v89(); } catch (e) {}
                a83 << a83;
                function f93() {
                    return a81;
                }
                const v95 = new Int8Array();
                const v98 = BigUint64Array * 536870887;
                -v98;
                v98 - v98;
                !Number.isNaN(v98 ** v98);
                function f105(a106, a107) {
                }
                try { f105(); } catch (e) {}
                const v110 = v95.buffer.__defineGetter__;
                try { v110(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f93);
                let v113;
                try { v113 = v77["find"](..."find", a84, ...v75); } catch (e) {}
                const o114 = {
                };
                v113 <= a83;
            }
            for (let v116 = 0; v116 < 5; v116++) {
                f80(this, v116, v116);
            }
        }
    }
}
C71.length;
