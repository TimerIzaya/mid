new Int8Array(15);
const v5 = new BigUint64Array(16);
const v6 = v5?.toString;
try { new v6(); } catch (e) {}
let v8 = 1000;
v8--;
new Int32Array(v8);
new Uint32Array(6);
const v17 = new Uint8ClampedArray(1024);
try { v17.find(Int32Array); } catch (e) {}
const v21 = new Int8Array(122);
function f22() {
    return v21;
}
Math.sinh(-3.3474037991793697);
-(-7);
-2147483648 | -2147483648;
class C30 {
    constructor(a32, a33) {
        a32 >> a32;
        a33 / a33;
        const v36 = this.constructor;
        v36.length = v36;
        try { new v36(a33, a33, v36, this, v36); } catch (e) {}
        9007199254740990 | -2147483648;
        function f40(a41, a42) {
            return f40;
        }
        this[-2147483648] >>>= -7;
        for (let v43 = 0; v43 < 5; v43++) {
        }
    }
}
try { C30.call(-7); } catch (e) {}
new C30(-2147483648, -7);
