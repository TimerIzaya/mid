let v1 = new WeakMap();
function f2(a3, a4) {
    function f5(a6) {
        +a6;
        return v1;
    }
    return a3;
}
v1[Symbol.toPrimitive] = f2;
function f10(a11, a12) {
    function f13(a14) {
        const v15 = Symbol(a14);
        delete v15[1817871171];
        return v15;
    }
    a11[Symbol.toPrimitive] = f13;
    const v20 = Symbol.toPrimitive;
    a12[v20] = f13;
    const o40 = {
        "b": WeakMap,
        [a12]: a11,
        ...v1,
        "h": a12,
        ...a11,
        "a": a12,
        "c": WeakMap,
        valueOf(a22) {
            a22?.[2];
            try {
                a11.valueOf = a22;
            } catch(e24) {
            }
            new Uint8ClampedArray();
            function F28(a30, a31, a32, a33) {
                if (!new.target) { throw 'must be called with new'; }
                function f34(a35) {
                    function f36() {
                        return f2;
                    }
                    return Symbol;
                }
                this.constructor = f34;
                const v37 = this.constructor;
                try { new v37(a30); } catch (e) {}
                this.c = a30;
            }
            new F28(-2.0);
            v1 = a11;
            return a12;
        },
    };
    function f41() {
        %VerifyType(v20);
        for (let v42 = 0; v42 < 5; v42++) {
            v42 > v42;
        }
        return Symbol;
    }
    o40[Symbol.toPrimitive] = f41;
    return o40;
}
const v46 = f10(v1, WeakMap);
-3.0 | -9007199254740992;
function f50(a51, a52, a53, a54) {
    class C56 extends Date {
    }
    const v57 = new C56();
    v57.getDay();
    return f50;
}
for (let v59 = 0; v59 < 10; v59++) {
    f50(v59, v59, v59, v59);
}
const v61 = f10(f10, v1);
v61[Symbol.toPrimitive] = f50;
const v64 = f10(v61, v61);
class C65 {
    static [v1] = v61;
    static set a(a67) {
        v46[v61];
        try {
            f10(v1, v1);
        } catch(e70) {
        }
    }
    f;
    static [WeakMap];
    #c;
}
new C65();
new C65();
new C65();
v64 ^ v64;
[0.3083488057663979,0.3083488057663979,0.3083488057663979];
function F83(a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
}
const v87 = new F83();
function f88() {
    const o94 = {
        [1836424012](a91, a92, a93) {
        },
        "e": v87,
    };
    return F83;
}
f88();
const v96 = new Date(-4.0);
v96[1024] = F83;
function F100(a102, a103) {
    if (!new.target) { throw 'must be called with new'; }
}
const o105 = {
    "execution": "async",
};
const v106 = [601759695];
const v107 = [1073741824,1073741823,1376142744,1073741825];
function f109(a110, a111, a112, a113) {
    let v116;
    try { v116 = v107["find"](..."find", a113, ...v106, ...v107, ...522675525n); } catch (e) {}
    v116 <= a112;
    return arguments;
}
const v118 = new F100(5, 5);
v118[Symbol.toPrimitive] = f10;
Array.prototype = v1;
let v123;
try { v123 = Array.bind(-195224844); } catch (e) {}
v123.prototype = v123;
const v125 = [1024];
Reflect.construct(Date, v125, v123);
const v127 = v96[v125];
const v130 = new Uint8Array(10);
let v131;
try { v131 = v130.reduce(129); } catch (e) {}
function f132() {
    let v135 = -65535;
    const v136 = v135 / v135;
    const o189 = {
        next() {
            v135--;
        },
        m(a140) {
            try { a140.next(); } catch (e) {}
            const o142 = {
            };
            o142.e = o142;
            try {
                o142.e = v135;
            } catch(e143) {
                const v147 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v147, o142);
            }
            function F149(a151, a152) {
                if (!new.target) { throw 'must be called with new'; }
                a152--;
            }
            try { new BigInt64Array(-2147483649, Date, -1.5678520341586263e+308); } catch (e) {}
            super[v118];
            try { v127["getDate"]("", Float64Array); } catch (e) {}
            async function* f163(a164, a165) {
                return -9223372036854775807;
            }
            class C166 {
            }
            try {
            } catch(e167) {
            }
            let v169;
            try { v169 = ("EV").link(v136); } catch (e) {}
            let v170 = 0;
            class C171 {
                o(a173, a174, a175, a176) {
                    return v170;
                }
            }
            const v179 = new Int8Array(3938);
            let v180 = 3;
            let v182 = 0 >> 0;
            [...v180] = v179;
            try {
                let v183 = 0;
                do {
                    ({"c":v131,"d":v170,...v182} = v169);
                    v183++;
                } while (v183 < 5)
                const o187 = {
                };
            } catch(e188) {
            }
        },
    };
    try { o189.m(o189); } catch (e) {}
    class C192 {
    }
    const v193 = new C192();
    const v195 = new Float32Array(v193, "nt", Float32Array);
    const t197 = "nt";
    const v196 = delete t197[v195];
    let v197;
    try { v197 = v193.floor(v196); } catch (e) {}
    for (const v198 in v197) {
    }
}
f132();
[Uint32Array];
const v205 = new Uint16Array(3505);
new Int16Array(Int16Array, 3120, v205);
f132();
function f209(a210, a211, a212, a213) {
}
function f214(a215, a216) {
    const o219 = {
        set b(a218) {
        },
    };
}
function F220(a222, a223, a224) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e225) {
}
