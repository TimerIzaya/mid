new Float32Array(3603);
const v5 = new Uint16Array(5);
v5[1] = v5;
const v7 = 129 / 129;
new Uint16Array(129);
const v11 = 1024 >= 1024;
v11 && v11;
function f14(a15, a16, a17, a18) {
    const o22 = {
        ["42776"](a20, a21) {
        },
    };
    return a15;
}
BigInt64Array.length;
const v25 = new BigInt64Array(1024);
const v26 = v25[712];
v26 !== v26;
class C29 {
    static {
        try {
        const t0 = "boolean";
        t0(this);
        } catch (e) {}
    }
}
255 > 255;
255 - 255;
const t26 = [-494407.199634183,0.6127672924664167,-85.60764064198793,1.4954577398132937e+308,-831252.5110682796,-2.2250738585072014e-308,0.6226417241742689,NaN,-3.0];
(delete t26[1024]).pop();
function f40(a41, a42, a43) {
    const o45 = {
        [a43]: a42,
        "g": 65536n,
        get a() {
            return a41;
        },
        "a": a43,
    };
    return f40;
}
new Float32Array(255);
-2887;
const v51 = new Uint32Array(2887);
const v52 = v51?.constructor;
try { v52(v7, v7, Float32Array); } catch (e) {}
try { new v52(v51, v51, Uint16Array); } catch (e) {}
const v56 = 3 != 3;
!v56;
function f58(a59, a60, a61) {
    return f58;
}
const v66 = new Float64Array(256);
const v67 = [1073741824,-523864342,1161249740];
const o68 = {
    ...v66,
    ...v67,
};
const v69 = [Worker];
try { v69.find(BigInt64Array); } catch (e) {}
v69.unshift(v56);
const o72 = {
    "arguments": v69,
    "type": "function",
};
const v73 = new Worker(f58, o72);
try { v73.terminateAndWait(); } catch (e) {}
