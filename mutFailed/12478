const v0 = [1,9007199254740992,257,-1650126833,536870888,-2147483647,14,-9007199254740992,-50670];
const v1 = [6,47335,-11,4,1082312889,9007199254740992,10000,-410886275,2147483648];
[1000,1073741824,127,9007199254740992,-1,256,65535,56535,255,-43803];
const v4 = new Map();
const v7 = new Uint8ClampedArray(6);
const v12 = Math.atan2(536870912, -9);
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.__lookupSetter__;
    try { new v17(this); } catch (e) {}
    a15--;
}
new Date();
const v25 = BigUint64Array <= 0.7221600461335677;
new BigUint64Array(239);
const v29 = new Int32Array(3346);
v4.size -= 3346;
Uint8ClampedArray > v7;
v0.length >>= 6;
Uint8ClampedArray | v7;
Object.defineProperty(v29, "byteLength", { configurable: true, value: v29 });
class C35 {
    #c;
    [-0.0];
    #valueOf(a37, a38) {
        a38 = Int32Array;
        try {
            ("MAX_SAFE_INTEGER").#valueOf();
        } catch(e40) {
        }
        BigUint64Array[3.2149281669993574e+307] = a37;
        return a37;
    }
    constructor(a45, a46) {
        super();
    }
    o(a48, a49, a50, a51) {
        class C52 {
            static 44 = "MAX_SAFE_INTEGER";
        }
        new C52();
        new C52();
        new C52();
        return -9;
    }
}
const v56 = new C35();
const v57 = new C35();
const v58 = new C35();
const v60 = -Infinity;
new Map("268435441");
new v25(-4294967296);
function f67() {
    return 2.0;
}
function f69() {
    return -0.0;
}
try { v57.for(BigUint64Array, -0.0, C35, 2.0, v60); } catch (e) {}
try {
    v4.set(-0.0, v1);
} catch(e75) {
}
v56[v58];
[155533.8602852358,2.0];
function F80() {
    if (!new.target) { throw 'must be called with new'; }
    this.__lookupGetter__.bind();
    try {
        (1).UTC(2.0, v60);
    } catch(e85) {
    }
    Array(19793);
    try {
        v12.length = 5;
    } catch(e91) {
    }
    for (const v94 of Array(19793)) {
    }
}
const v95 = new F80();
const t81 = v95.constructor;
new t81();
