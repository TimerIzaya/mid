const v0 = /a./vmy;
const v1 = /D(x)(x)(x)\1Q^7[\ca]O*/viy;
const v2 = /[\118]8(?:a+)*/dim;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a5;
    } catch(e6) {
    }
}
const v7 = new F3(v0);
const v8 = new F3(v2);
("async").lastIndexOf();
class C11 {
    constructor(a13, a14) {
        function f15(a16) {
            function f18(a19) {
                a19 & a19;
            }
            this.onmessage = f18;
            this.__proto__;
        }
        const v26 = [f15];
        const o27 = {
            "arguments": v26,
            "type": "function",
        };
        new Worker(f15, o27);
    }
}
const v29 = new F3(v2);
function f30(a31, a32, a33) {
    const o43 = {
        "h": a31,
        __proto__: v8,
        p(a35, a36) {
            return a36;
        },
        get c() {
            try {
                a32.length = 1;
            } catch(e42) {
            }
            return 1;
        },
    };
    return o43;
}
const v44 = f30(v0, v29, v2);
const v45 = f30(v0, v7, v1);
f30(v0, v29, v0);
v29[f30];
const t50 = -3.2655728344910857e+307;
t50[2] = f30;
v2["test"]("test", v45);
const v52 = v44[4294967296];
function F54() {
    if (!new.target) { throw 'must be called with new'; }
}
const v56 = new F54(f30, v7, f30);
const v57 = [F54,F54,F54];
const v58 = f30("test", v52, v45);
%PrepareFunctionForOptimization(f30);
f30("test", v52, v45);
f30("test", v52, v45);
%OptimizeFunctionOnNextCall(f30);
const v61 = f30("test", v52, v45);
function f62(a63) {
    try {
        v57.some();
    } catch(e65) {
        e65.stack;
    }
    return a63;
}
v57.toString = f62;
Object.defineProperty(v56, "c", { enumerable: true, get: f62, set: f62 });
v56[v61];
for (let v68 = 0; v68 < 32; v68++) {
    v0["p" + v68] = v68;
}
const o77 = {
    __proto__: v57,
    "e": v56,
    get a() {
        const v72 = [-1539,1,12];
        function f73(a74, a75) {
            const o76 = {
                [a74]: v72,
            };
            return a74;
        }
        return this;
    },
};
o77.toString(F54, o77);
class C80 extends Int32Array {
}
const v81 = new v58();
for (let v82 = 0; v82 < 5; v82++) {
    v81["p" + v82] = v82;
}
