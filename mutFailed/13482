class C3 {
    constructor(a5, a6) {
        this[8] = this;
        const v7 = a5[6];
        v7 ^ v7;
        a6 | a6;
        try {
            this.__proto__ = a6;
        } catch(e10) {
        }
        this.__proto__ |= 1;
        const v13 = -10488 - -10488;
        v13 >>> v13;
        -13 - -13;
    }
    8;
    /*
    constructor(a18) {
        super();
        for (let v19 = 0; v19 < 25; v19++) {
            this["p" + "p"] = v19;
        }
    }
    */
    f = 5.0;
    static 6 = 1;
}
C3[6];
for (let v23 = 0; v23 < 5; v23++) {
    let v25 = -2147483649;
    v25--;
    const o27 = {
    };
    o27[Uint32Array] -= v25;
    class C28 {
    }
    C28.e = C28;
    const v30 = new BigUint64Array(v23, v23, v23);
    try { v30.sort(v30); } catch (e) {}
}
const v32 = new C3(C3, 1073741823);
v32[8];
const v34 = new C3(1, 1);
v34[8];
new C3(C3, C3);
Uint16Array.prototype;
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
new Uint16Array(257);
const v43 = new Uint16Array(11);
const v44 = v43?.with;
let v45;
try { v45 = new v44(v43, v43); } catch (e) {}
4056 + 4056;
const v49 = new Float32Array(4056);
v49[980];
function f51() {
    let v53;
    try { v53 = ("b").localeCompare("b"); } catch (e) {}
    v53 >> v53;
    let v55 = -9007199254740990;
    v55++;
    const v57 = -v55;
    v57 * v57;
    const o69 = {
        ..."b",
        "b": v55,
        ["b"]: "b",
        "a": v55,
        o(a60, a61) {
            try { a61.toWellFormed(); } catch (e) {}
            try { a61(a60, a61, "b"); } catch (e) {}
            [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308] | v55;
            function F66() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C68 extends F66 {
            }
            return v55;
        },
        "h": Uint16Array,
    };
    o69[0] = o69;
    let v70;
    try { v70 = o69.o(5.0, "b"); } catch (e) {}
    -v70;
    return o69;
}
const o72 = {
};
o72.h = o72;
const v73 = f51();
const v74 = v73[0];
try { v74.charAt(v74); } catch (e) {}
class C77 {
    static {
        const v80 = Symbol.hasInstance;
        Symbol.for(v80.description);
        Symbol.hasInstance = Symbol;
        Symbol.for(v80.description);
        v73[v80];
    }
    #p() {
        try { this.p(undefined, this, this, this, this); } catch (e) {}
        return undefined;
    }
    static #a = undefined;
}
new C77();
const v91 = f51();
v91[0];
const v93 = v91[0];
try { v93.anchor(v93); } catch (e) {}
new Int16Array(1971);
new Int32Array(128);
const v102 = new Int16Array(195);
let v104 = 3375;
const v106 = new BigUint64Array(v104);
try { v106.slice(11, v45); } catch (e) {}
("c").toUpperCase()[0];
const v113 = new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
v113[3];
const v116 = Math?.expm1;
v116.d = v116;
try { new v116(Int16Array); } catch (e) {}
const v118 = Math.expm1(v104, Math, v102);
v118 * v118;
Math.tan(--v104);
const v122 = [-256,13351,5138,2,-4294967295,1000,268435440];
class C123 {
    constructor(a125, a126) {
        for (const v127 in this) {
        }
        Math.atan2(v122, -4294967297);
    }
}
class C130 extends C123 {
}
const v131 = new C130();
try { v131.toString(); } catch (e) {}
const v133 = v131?.constructor;
v133.name;
let v135;
try { v135 = new v133(); } catch (e) {}
const v136 = v135?.constructor;
try { new v136(); } catch (e) {}
let [v138,,v139,...v140] = v106;
~v138;
var c = 255;
