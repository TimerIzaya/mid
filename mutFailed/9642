const v0 = [];
new BigUint64Array(10);
const v5 = 10 - 5;
const v7 = new Int16Array(5);
v7[4] = v7;
new Uint8ClampedArray(7);
const v11 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v12;
try { v12 = v11.slice(v0, v11); } catch (e) {}
function f13(a14, a15, a16, a17) {
    function f18() {
        let v19 = -4294967295;
        while (0 < 10) {
            let v27 = !257;
            Math.acosh(257);
            let v29 = -v27;
            -41548 / 0.4785020169057035;
            v29 | v27--;
            --v29;
            v19++;
        }
        let v35 = Float64Array;
        v12.e = v35;
        v35.toString();
        v35 = a15;
        const v37 = v11.length;
        function f38(a39) {
            return a39;
        }
        class C40 extends f38 {
            static f = a14;
        }
        const v41 = v37 >>> v37;
        v41 / v41;
        const o48 = {
            toString(a44, a45) {
                try { this.toString(this, v37); } catch (e) {}
                a17 && v35;
                return a15;
            },
        };
        o48.toString();
        -268435456 > -268435456;
        a14--;
        const o53 = {
            "e": v19,
            "e": -268435456,
        };
        return a15;
    }
    a15();
    %OptimizeFunctionOnNextCall(f18);
    return v5;
}
const v55 = f13();
f13(v55, v55, f13, v11);
f13();
