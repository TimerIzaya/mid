function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = this;
    } catch(e3) {
    }
    try {
        this.a = 16;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
new F0();
const v8 = [NaN,-1000000000000.0,1000.0,436.89335056084906,0.0,1000000000.0,0.1351254638450562,-294.3388163353111,1.396178104709481];
const v9 = [-6.60158261482668,-432888.1726389491,9.491647784295907e+307,-1.4700670166662061e+308,1.0016813874303916e+308,2.0186570236752478e+307,-1000000.0,1.4061980376031326e+308,-3.792782476683069e+307,-3.391612145092977];
try { v9.slice(v9, v9); } catch (e) {}
[-5.0,1000000000.0,776181.3455616287,-949.0722729170197,9.378779871198121e+307,-1.7976931348623157e+308,-949.3446717391734,-908.4624879258048];
function f12() {
    return v8;
}
f12.name;
const v14 = [-128,-256,536870888,-634805886,268435441,0,536870912,268435440];
const v15 = [1016000066,-268435456,-1618037481,9,2147483648,45442,65536,-1442161931,256,14];
v15[3] = v15;
[16,-4096,-1268189591];
class C17 {
}
C17.name = C17;
class C18 {
}
let v19;
try { v19 = new C18(); } catch (e) {}
const v20 = new v14();
function f22(a23, a24, a25, a26) {
    a23 - a23;
    a24++;
    const v29 = a24 >>> a24;
    const v30 = v29 >>> v29;
    v30 != v30;
    for (let v32 = 0; v32 < 5; v32++) {
        try { new C17(v20, v32, Float32Array, ...v32, a24); } catch (e) {}
    }
    const v35 = Math.max(a24);
    v35 - v35;
    return v30;
}
try { f22(v15, v15, v15, v6); } catch (e) {}
for (let v38 = 0; v38 < 5; v38++) {
    f22(v38, v38);
}
%OptimizeFunctionOnNextCall(v19);
const v40 = f22();
v40 + v40;
