new Int32Array(1957);
const v5 = new Int16Array(909);
function f8(a9, a10) {
    Math.atan2(Math, f8);
    return f8;
}
const v13 = new Int16Array(1461);
function f14(a15, a16, a17, a18) {
    const v20 = Symbol.iterator;
    const v25 = [10];
    Reflect.construct(Array, v25, Uint8ClampedArray);
    const o63 = {
        valueOf(a28, a29, a30) {
            const v31 = /(x)(x)(x)\1/uis;
            function f32(a33, a34, a35, a36) {
                const o43 = {
                    4294967295: a33,
                    2: a35,
                    __proto__: a36,
                    [v31](a38, a39, a40, a41) {
                        super.test();
                    },
                };
                return a33;
            }
            %PrepareFunctionForOptimization(f32);
            const o46 = {
                "maxByteLength": 1815,
            };
            return 0.8199829542463926;
            const v50 = ["function",[5,1436918233,13,-9223372036854775808,12,10779,268435439,-350312267,536870912],"function"];
            const o51 = {
                "arguments": v50,
                "type": "function",
            };
            const v53 = new ArrayBuffer(128, o46);
            new Int16Array(v53);
            return Int32Array;
        },
        "f": a18,
        "d": 909,
        [v25](a57, a58, a59) {
        },
        "b": a16,
        [v20]() {
            Symbol.iterator;
        },
        127: a16,
    };
    return o63;
}
class C64 {
}
const v65 = new C64();
const v66 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o67 = {
};
const v68 = new f8(v66, o67);
v68.unshift(v65);
f14(909, 1461, 1461, Int32Array);
f14(1461, Int32Array, 1957, Int32Array);
const v72 = f14(1957, Int16Array, 1461, v5);
function f73() {
    return v72;
}
class C80 {
    constructor(a82) {
        let v83;
        try { v83 = this.isInteger(a82, -2147483649, -7.693050480934223, a82, a82); } catch (e) {}
        function F84(a86, a87, a88) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = this;
            } catch(e89) {
            }
            try {
                this.c = a82;
            } catch(e90) {
            }
        }
        const v91 = new F84(F84, -1.7976931348623157e+308, v83);
        new F84(v91, -1.7976931348623157e+308);
    }
}
function F93(a95, a96, a97, a98) {
    if (!new.target) { throw 'must be called with new'; }
}
const v99 = new F93();
const o101 = {
    "execution": "sync",
};
let v102 = 0;
const v103 = v102++;
v103 & v103;
try { v99(); } catch (e) {}
let v106 = 0;
do {
    v106++;
} while (v106 < 5)
const v110 = [-268435456,2,9007199254740992,0];
const v111 = [2147483649,1024,-128,-256];
v111["join"](...v110, ...v111);
class C119 {
    static #n(a121, a122, a123, a124) {
        this[257] *= -5;
    }
}
const o131 = {
    toString(a128, a129, a130) {
        Object.defineProperty(v13, a128, { writable: true, configurable: true, set: Array });
        return Array;
    },
};
try { o131.toString(o131); } catch (e) {}
("object").normalize("NFD");
