class C3 {
    static a;
    ["o"];
    ["g"] = "o";
    static #valueOf(a5) {
        const v6 = "g" ** "-4294967296";
        ("o").length;
        return v6;
    }
    toString(a9, a10) {
        const v11 = this.constructor;
        new v11(C3, "-4294967296", v11, a10);
        +this;
    }
    static #d;
    static ["o"] = "o";
    static #e = "-4294967296";
    static 6 = "-4294967296";
}
C3[6] = C3;
try {
    const t21 = "o";
    t21.b = "o";
} catch(e14) {
}
class C15 extends "o" {
}
C3.name;
const v17 = new C3();
v17.h = v17;
const v18 = new C3();
v18.o = v18;
function f19() {
    function f20(a21, a22) {
    }
    const v24 = new Promise(f20);
    v24.then(f20);
}
f19();
const v27 = new C3();
v27.o = v27;
const v28 = v27?.constructor;
let v29;
try { v29 = new v28(); } catch (e) {}
v29.a = v29;
let v30;
try { v30 = new v28(); } catch (e) {}
v30.d = v30;
730 >>> 730;
BigUint64Array.e = BigUint64Array;
const v34 = new BigUint64Array(730);
try { v34.with(v34, "o"); } catch (e) {}
-16;
const v39 = new Int16Array(16);
try { v39.reduce(v34); } catch (e) {}
const v43 = new Uint8ClampedArray(0);
let v44;
try { v44 = v43.map(v27); } catch (e) {}
function f45(a46, a47, a48, a49) {
    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
        length | length;
    }
    try { new Int8Array("-4294967296", v30, "-4294967296"); } catch (e) {}
    try { Int8Array.from(a48); } catch (e) {}
    const v56 = new Int8Array();
    try { v56.entries(); } catch (e) {}
    let v58;
    try { v58 = v56.values(); } catch (e) {}
    const v59 = v58?.next;
    try { new v59(); } catch (e) {}
    const v61 = new Int8Array();
    v61.b = v61;
    for (const v62 in v61) {
    }
    function F63(a65) {
        if (!new.target) { throw 'must be called with new'; }
        const v66 = this.b;
        try { v66(v61); } catch (e) {}
    }
    const v68 = new F63();
    const v69 = v68?.constructor;
    try { new v69(730); } catch (e) {}
    let v71;
    try { v71 = v68.propertyIsEnumerable(v43); } catch (e) {}
    !v71;
}
for (let v73 = 0; v73 < 10; v73++) {
    ~v73;
    f45();
}
%OptimizeFunctionOnNextCall(f45);
f45();
let v77 = 0;
v77 >>> v77;
v77 >> v77;
while ((() => {
        const v81 = v77 < 1;
        !v81;
        v81 || v81;
        return v81;
    })()) {
    const t101 = "-10";
    t101[2] = "-10";
    let v86;
    try { v86 = ("-10").valueOf(); } catch (e) {}
    try { v86.fontsize(f45); } catch (e) {}
    let v89;
    try { v89 = ("trimLeft").strike(); } catch (e) {}
    try { v89.padEnd(v44); } catch (e) {}
    v77++;
}
