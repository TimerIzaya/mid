function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -9007199254740990;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
[3.645654953756248e+307,-1000000.0,-418303.8874476779,-718788.9126855988,-2.2250738585072014e-308,-3.0,NaN];
[-273466.88630652544];
[-1000000000000.0,7.12786784712161,-92.02670130462081];
[-1000000000000.0,-5.051100851295991e+307,-1.349208506207549e+308,-1000000000000.0];
[0.8685172177882149,-223454.7697528206,-1000000.0,7.994184466311594];
[5.0];
new Uint8Array(-536870912);
new Float32Array(232);
new Int16Array(6);
const v23 = new Float32Array(Float32Array);
for (let v24 = 0; v24 < 10; v24++) {
    function f25() {
        return f25;
    }
    const v26 = [601759695];
    const v27 = [1073741824,1073741823,1376142744,1073741825];
    function f29(a30, a31, a32, a33) {
        function f35() {
            return v23;
        }
        f25();
        const v38 = new Int8Array();
        function f39(a40, a41) {
            return a40;
        }
        f39(v27, v23);
        v38.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f35);
        let v47;
        try { v47 = v27["find"](..."find", a33, ...v26, ...v27, ...522675525n); } catch (e) {}
        v47 <= a32;
        return arguments;
    }
    for (let v49 = 0; v49 < 10; v49++) {
        f29(v27, v49, v26, v49, v49, v49, v49);
    }
}
function f52(a53, a54, a55, a56) {
    a53.length;
    const v58 = new Float32Array();
    const v60 = new Float32Array(2, 232, 2);
    const v62 = new Int32Array(v60);
    const v63 = v60;
    v62.fill(...v63);
    return v58;
}
for (let v65 = 0; v65 < 625; v65++) {
    f52(Uint8Array);
}
