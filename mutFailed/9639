~419035685;
15 >>> 15;
class C8 {
    static #p(a10, a11, a12) {
        return this;
    }
    n(a18, a19, a20, a21) {
        try { a21.cos(this, 9007199254740990); } catch (e) {}
        try {
            a19.__proto__ = this;
        } catch(e23) {
        }
        return a21;
    }
}
C8.d = C8;
new C8();
const v25 = new C8();
new C8();
9007199254740990n << 9007199254740990n;
-34576n === -34576n;
Map.d = Map;
const v34 = [];
try { v34.copyWithin(-1888, -34576n); } catch (e) {}
const v38 = -Date.parse();
class C39 {
    static {
        try { this.bind(9007199254740990); } catch (e) {}
        for (let v42 = 0; v42 < 25; v42++) {
            function f43(a44, a45, a46, a47) {
                a44 & a44;
                -a46;
                a47--;
                const v51 = a44 | a44;
                v51 / v51;
                a45 + a45;
                try { a44.call(); } catch (e) {}
                Number.isNaN(a45--);
                let v59;
                try { v59 = Math.round(this); } catch (e) {}
                v59 - v59;
                const v61 = -v59;
                v61 - v61;
                const v63 = Math.tan();
                v63 >> v63;
                const v65 = new Date(Date);
                let v66;
                try { v66 = v65.setDate(v42); } catch (e) {}
                ~v66;
                const v68 = v66 * v66;
                v68 + v68;
                try { a44(); } catch (e) {}
                a45 & a45;
                let v72;
                try { v72 = a44(); } catch (e) {}
                const v73 = v72?.constructor;
                try { v73(); } catch (e) {}
                a46 << a46;
                arguments[0];
                let v78 = arguments[2];
                v78--;
                const v80 = arguments[2];
                try { v80.findLast(v42); } catch (e) {}
                function f82() {
                }
                f82.g = f82;
                f82.d = f82;
                BigUint64Array * 536870887;
                function f85(a86, a87) {
                }
                f85();
            }
            try { new f43(v38, v25, v42, -34576n); } catch (e) {}
            f43(v42, v38, v34);
            for (let v91 = 0; v91 < 5; v91++) {
                const v92 = v91 >> v91;
                v92 - v92;
                f43(this, v91, v91);
            }
        }
    }
}
const v95 = C39?.constructor;
try { new v95(-1888); } catch (e) {}
C39.d = C39;
