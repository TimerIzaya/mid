function f0() {
}
new Uint16Array(8);
const v6 = new Uint32Array(2996);
new BigInt64Array(5);
[-1000000.0,-5.0,0.0,-5.803679721956083,-2.0,3.917082783404462,179816.23792639468];
[-204853.02448310214,2.0,-595.1699407572963,0.0];
[1e-15];
const v16 = [-54813,8,-54813,8];
const v17 = [-54813];
const v18 = [-54813];
function f19(a20, a21, a22, a23) {
    const o32 = {
        n(a25, a26, a27, a28) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a23;
        },
        ...v18,
        "b": v16,
        ...a22,
        ...v18,
        129: 4,
        ...a20,
    };
    return o32;
}
f19(v17, 8, f19(v17, v18, v16, 4, Uint32Array, v16, v6), 4);
f19(v18, 4, 4, 4);
/ND2/gds;
class C41 extends Float32Array {
}
const v42 = new C41();
v42.findLastIndex();
class C46 {
    static {
        for (let v48 = 0; v48 < 25; v48++) {
            const v49 = [601759695];
            const v50 = [1073741824,1073741823,1376142744,1073741825];
            function f52(a53, a54, a55, a56) {
                try { new a53(); } catch (e) {}
                a55 << a55;
                const o63 = {
                    ..."44184",
                    [-15]: -15,
                    2480: 9,
                    ..."44184",
                };
                function f64() {
                    return a53;
                }
                const v66 = new Int8Array();
                const v69 = BigUint64Array * 536870887;
                v69 - v69;
                Number.isFinite(v69 ** v69);
                function f74(a75, a76) {
                }
                try { f74(); } catch (e) {}
                const v79 = v66.buffer.__defineGetter__;
                try { v79(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f64);
                let v82;
                try { v82 = v50["find"](..."find", a56, ...v49); } catch (e) {}
                const o83 = {
                };
                v82 <= a55;
            }
            for (let v85 = 0; v85 < 5; v85++) {
                f52(this, v85, v85);
            }
        }
    }
}
