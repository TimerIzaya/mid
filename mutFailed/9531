[];
const v5 = Promise.reject(Promise);
for (let v6 = 0; v6 < 5; v6++) {
    v6 / v6;
    function f8() {
        return f8;
    }
    f8.d = f8;
}
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
}
class C16 extends F12 {
}
const o21 = {
    toString(a18, a19, a20) {
        Promise[16] = v5;
    },
};
const v25 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
const v26 = [101.2980265931285,-1.7177856293756712e+307,-1000000.0,-8.49664044843577];
class C28 {
}
o21.e = -1;
const t24 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
t24[Symbol.species] = 8.580387257773513;
const v33 = new Set();
const v34 = v33.values();
const t27 = -2035680808n;
const v35 = new t27();
const v37 = -4294967297n / -4294967297n;
const v38 = [601759695];
function f39() {
    "Vre" == -2035680808n;
    const o52 = {
        [-4294967297n](a44, a45, a46, a47) {
        },
        ...v38,
        ...v35,
        4: v37,
        toString(a49, a50, a51) {
            return -1;
        },
        5: -4294967295,
    };
    return f39;
}
f39();
try { v34.next(); } catch (e) {}
function f55(a56, a57, a58, a59) {
    a56.shift();
    const o63 = {
        "execution": "async",
    };
    gc(o63);
    a56[3] = a56;
    const v67 = new Int32Array(127);
    v67.toSorted();
    Math.cbrt(7);
    const o72 = {
        __proto__: v26,
    };
    return o72;
}
f55(v25);
f55(v26);
f55(v26);
Math.atan2(-1048961255, 245972139);
Array(3398);
gc();
