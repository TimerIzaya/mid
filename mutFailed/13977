function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    try {
        const v5 = new Uint8Array(9);
        v5.lastIndexOf(Math.cbrt(7));
        this.e = 1481796755;
    } catch(e10) {
    }
    try {
        this.c = 1481796755;
    } catch(e11) {
    }
}
const v12 = new F0();
v12 && v12;
Math.cos(-1073741824);
new Int16Array();
const v19 = new F0();
const v20 = new F0();
function f22() {
    let v23 = -268435456;
    v23--;
}
class C26 {
    get b() {
        this in this;
        try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
        return this;
    }
    static #n(a31, a32) {
        function f33(a34) {
            return a32;
        }
        class C35 extends f33 {
            ["matchAll"] = a32;
            static #e;
            #h = f33;
        }
        return "matchAll";
    }
}
new C26();
Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[-3.942521664036782e+307,-3.942521664036782e+307,-3.942521664036782e+307]]);
class C50 extends F0 {
    constructor(a52, a53, a54, a55) {
        function F56() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F56();
        const v59 = new F56();
        const v60 = new F56();
        const v61 = [v59];
        const v62 = [v60,v59,v60,v60];
        [v59,F56,v62,v62,v61];
        [-6];
        [15,1000,456510946,268435439,-4096,-1621925631,-536870912,4294967295,127,768050783];
        [-30837,-2147483647,11,14];
        const v69 = new Uint32Array(1000);
        new BigUint64Array(154);
        new Uint8Array(134);
        const v76 = delete v61?.length;
        try { v76["cbrt"](v69, Uint32Array, v59, v60, v76); } catch (e) {}
        const o79 = {
        };
        new Proxy(Uint8Array, o79);
        for (let v82 = 0; v82 < 5; v82++) {
        }
        super();
        const v83 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
        function f84(a85, a86, a87, a88) {
            function f89() {
                const v90 = v83.length;
                const v91 = v90 >>> v90;
                const v92 = v91 % v91;
                v92 & v92;
                return f84;
            }
            f89();
            %OptimizeFunctionOnNextCall(f89);
            return f89;
        }
        [4294967295,-7554,-9007199254740991,256,-2147483647,-9007199254740990,270065662,-12,-1083098993];
        [1024,536870888,-6731];
        const v97 = [268435441,129,14,181124961,-1];
        Math.sin(-4294967295);
        let v101 = -314.9391272852571;
        --v101;
        try {
        const t0 = 1.0367481644555791e+308;
        t0(v97, a55, v97);
        } catch (e) {}
        try {
            a54.__proto__ = v20;
        } catch(e104) {
        }
    }
    2147483647;
    d = F0;
    ["string"];
}
const v105 = new C50(v20, "function", v20, "string");
new C50(v105, "isSealed", v19, "j");
new C50(v105, "matchAll", v105, "909039183");
let v108 = 268435440n;
~v108;
--v108;
