new Date(Date);
class C5 {
    static ["22307"] = "AanB8";
    b;
}
new Uint16Array(9);
const v10 = [-13063,230037640,0,-1717935321,257,0,1073741825];
Object.defineProperty(Date, 7, { configurable: true, value: v10 });
const o13 = {
    toString(a12) {
        return "22307";
    },
};
new Uint8Array(1197);
new Date("e" | ["e","e","e","e","e"]);
const v22 = new Uint8ClampedArray(1000);
v22.includes(undefined);
new Uint8Array(3901);
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    class C34 {
    }
    const o36 = {
    };
    class C37 {
    }
    v10 >= Uint16Array;
    function F39(a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = "b";
        this.d = a42;
    }
    try {
        this.h = a32;
    } catch(e43) {
        function f44(a45, a46, a47) {
            class C49 {
            }
            if ("log1p") {
            }
        }
    }
    function F50(a52, a53, a54) {
        if (!new.target) { throw 'must be called with new'; }
        const v57 = new Float32Array(this, a54, a54);
        const v59 = new Uint8Array(268435440);
        new Uint8ClampedArray(129);
        v59[6] = v57;
    }
    new F50();
}
new F28(3901, 3901, 1197, 1197);
let v65 = 10;
for (; v65--;) {
}
new Uint16Array(2);
function F70(a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this.constructor;
    try { new v73(a72); } catch (e) {}
    try {
        a72 % 257;
    } catch(e77) {
    }
}
new F70();
new F28(9, 3901, 3901, 1197);
new F28(1197, 1197, 3901, 9);
gc();
try { new DataView(240); } catch (e) {}
const v89 = [3.0];
for (let v90 = 0; v90 < 10; v90++) {
    function F91(a93, a94, a95) {
        if (!new.target) { throw 'must be called with new'; }
        const v96 = this?.constructor;
        try { new v96(Map, v89); } catch (e) {}
    }
    new F91();
}
const v99 = new Int16Array(20);
for (const v100 in v99) {
    9007199254740991 * (9 ** 9);
    ([4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886]).toLocaleString();
    class C107 {
    }
    const v108 = [1073741824,1073741823,1376142744,1073741825];
    function f109(a110, a111, a112, a113) {
        try { v108["find"](..."find"); } catch (e) {}
        return a113;
    }
    for (let v116 = 0; v116 < 10; v116++) {
        v116();
    }
    Math.expm1(v100);
}
