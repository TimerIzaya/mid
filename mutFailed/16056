new WeakSet();
const v7 = new Int8Array(1174);
new BigUint64Array(3200);
const v13 = new Float64Array(1);
function f17(a18) {
    return v13;
    try {
        v13.g = v7;
    } catch(e19) {
    }
    return a18;
}
Uint8ClampedArray.toString = f17;
const v20 = -1000000.0 * Uint8ClampedArray;
try { v20(v20, 1287, -1000000.0, 1287, v20); } catch (e) {}
new Int16Array(257);
const v28 = new Uint32Array(9);
new Float32Array(5);
const v34 = new Float32Array();
const v35 = [];
Object.defineProperty(v35, 2, { configurable: true, enumerable: true, value: v34 });
%PrepareFunctionForOptimization(SyntaxError);
let v39 = 0;
while (v39 < 0) {
    %VerifyType(Float32Array);
    v39++;
}
SyntaxError();
SyntaxError();
%OptimizeFunctionOnNextCall(SyntaxError);
v35.push(-1336159725, v35, -12, 10);
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        /(M(?:ab|cde)VbD)/vdim;
    } catch(e53) {
        v28[4] = a50;
        delete a51?.[1];
        a51 >> 10;
        Math.PI;
    }
}
new F48();
new F48();
