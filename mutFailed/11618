function F0() {
    if (!new.target) { throw 'must be called with new'; }
    ("-4294967295").replace();
    new BigUint64Array(3768);
    try {
        this.c = 5;
    } catch(e8) {
    }
}
const v9 = new F0();
const v10 = new F0();
const v11 = new F0();
class C12 extends F0 {
    static p(a14) {
        [9.351533518756227];
        [-6.784251838320349e+307,1.0,-1000000000000.0,-3.497017440824603,1.1397879246693228e+308,5.389569988536401];
        function f17() {
            Array.__proto__ = this;
            return Array;
        }
        const v20 = [-1.7976931348623157e+308,708.3562222479536,-1.7976931348623157e+308,-1.2847113708865308e+308,-1.6037284471488713e+308,8.385599849215897e+307,-97411.36389339645,0.19960007949584913,Infinity];
        for (let v21 = 0; v21 < 32; v21++) {
            v9["p" + v21] = v21;
            new Uint8ClampedArray(v20.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4"));
        }
        return v10;
    }
    static d;
    [v11];
}
new C12();
new C12();
new C12();
new Float64Array(15);
new Uint32Array(127);
new Uint16Array(0);
function f42() {
    return f42;
}
const o45 = {
    set b(a44) {
    },
    __proto__: f42,
};
const v48 = [o45];
for (let v49 = 0; v49 < 10; v49++) {
}
class C50 {
}
let v51 = new C50();
class C52 extends C50 {
    o(a54, a55) {
        v51 %= this;
        %VerifyType(super.g);
    }
}
const v63 = new C52();
v63 * f42;
Reflect.construct(Int8Array, v48);
function f66(a67, a68, a69, a70) {
    %OptimizeFunctionOnNextCall(a69);
    return a68;
}
f66().bind();
