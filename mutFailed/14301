Uint16Array.prototype = Uint16Array;
const v6 = new Uint16Array(1073741825);
v6[522852011];
const v9 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v10 = [16,-28272,-128];
const v11 = [1073741824,1073741823,1376142744,1073741825];
function f13(a14, a15, a16, a17) {
    a16[3] = a16;
    function f19() {
        const v22 = -4294967295 >>> -4294967295;
        v22 | v22;
        -268435456 - -268435456;
        const o29 = {
            "e": -4294967295,
            ...v9,
            ..."Vre",
            "c": v11,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a27, a28) {
                return a27;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        o29[3] = o29;
        o29[6] = o29;
    }
    const v30 = f19?.constructor;
    try { new v30(a15); } catch (e) {}
    f19();
    %OptimizeFunctionOnNextCall(f19);
    let v34;
    try { v34 = v11["find"](..."find", a17, ...v10, ...v11, ...522675525n); } catch (e) {}
    const v35 = v34 <= a16;
    v35 || v35;
    return arguments;
}
f13.prototype;
%OptimizeFunctionOnNextCall(f13);
8 & 8;
4 - 4;
new Float64Array(16);
1024 % 1024;
const v48 = new Int8Array(1024);
function f49(a50, a51) {
    v9["map"](f13, a51).length;
    return "map";
}
const v55 = f49?.apply;
try { new v55(Float64Array, 1000.0); } catch (e) {}
v48[Symbol.toPrimitive] = f49;
v48[45] = v48;
let v60 = 2644 * 2644;
v60--;
const v63 = new Uint8ClampedArray(2644);
function f64() {
    const o65 = {
    };
    return o65;
}
const v66 = f64();
v66.h = v66;
v66.p17 = Uint16Array;
const v67 = f64();
Object.defineProperty(v67, "c", { configurable: true, value: 8 });
v67.c = v67;
class C68 {
    valueOf(a70) {
        let v71;
        try { v71 = v10(a70, this, this, a70, this); } catch (e) {}
        try { v71(v11, v71, v71); } catch (e) {}
        return v9;
    }
    constructor(a74, a75) {
        a74.e = a74;
        this.constructor = f64;
        a74.b = a75;
        const v76 = [601759695];
        try { v76.slice(v76, a74); } catch (e) {}
        v76.includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
        try { Int8Array.from(v11); } catch (e) {}
        new Int8Array(8);
        const v84 = this?.constructor;
        try { v84(); } catch (e) {}
        try { new v84(2644, a74); } catch (e) {}
        a74.b = a74;
        a75.h = a75;
        for (let v87 = 0; v87 < 32; v87++) {
            const t93 = "p";
            t93[0] = "p";
            const v89 = "p" + v87;
            try { v89.match(v89); } catch (e) {}
            const v92 = new BigInt64Array();
            let v93;
            try { v93 = v92.fill(v92, v92, v92); } catch (e) {}
            const v94 = v93?.constructor;
            try { new v94(1000.0, v93, v93); } catch (e) {}
            for (let v96 = 0; v96 < 50; v96++) {
            }
            a75[v89] = v87;
        }
    }
}
const v97 = new C68(v67, v66);
try { v97.valueOf(v97); } catch (e) {}
const o99 = {
    ...v66,
};
o99.p2;
o99.b = v63;
function F101() {
    if (!new.target) { throw 'must be called with new'; }
}
function f103(a104, a105) {
    return 3521;
}
F101.toString = f103;
o99.b = o99;
