new Uint16Array(2);
const o5 = {
};
o5[213];
for (let v9 = 0; v9 < 25; v9++) {
    function f10(a11, a12, a13, a14) {
        return -261.99102172609366;
    }
}
for (const v18 in "1024") {
}
new Float64Array(Float64Array);
new Uint8Array(189);
const v29 = [7,128];
const v30 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v31 = [40213,422333454,47387,65536,-51830];
gc();
("1024").strike("1024", "1024", "1024", "1024");
const t15 = [];
t15.length = 65535;
const v44 = new Uint16Array(255);
v44.buffer;
const v47 = new BigInt64Array();
("boolean").split("toString");
function f52(a53, a54) {
    const o77 = {
        "c": 15135,
        "a": 15135,
        "d": 0,
        __proto__: a54,
        "g": -1628878962,
        "type": "boolean",
        "a": v47,
        set b(a56) {
        },
        "g": 15135,
        "b": a54,
        toString() {
            super[this];
        },
        "e": -1628878962,
        toString(a60, a61, a62) {
            function f63() {
                return a62;
            }
            Object.defineProperty(a60, Symbol.toPrimitive, { writable: true, get: f63 });
            return Symbol;
        },
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f70() {
                    return f70;
                }
                const o72 = {
                    [f70]() {
                    },
                };
                [o72];
                v30.copyWithin(8, -268435456, -256);
            } catch(e76) {
            }
            return this;
        },
    };
    return o77;
}
f52(925.1427495594241, v29);
v31(317008.8127941969, -4);
const o81 = {
    "type": "minor",
};
let v82 = 0;
class C84 {
    #b = f52;
    g = 1.1408591040999836e+308;
    static {
        const v89 = v82++;
        ~v82;
        Math.log10(44149);
        44149 + v82;
        Math.fround(v89);
    }
}
f52(1000000.0, v30);
const v97 = new BigUint64Array();
v97[2445191368] = 268435441n;
