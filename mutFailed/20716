function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 127;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
try { new Int8Array(v6, v4, Int8Array); } catch (e) {}
class C10 extends Int8Array {
    [12];
}
class C11 {
    constructor(a13) {
        try { this.hasOwnProperty(this); } catch (e) {}
        const v15 = this?.f;
        try { new v15(); } catch (e) {}
        let v17;
        try { v17 = new v15(); } catch (e) {}
        const v18 = v17?.constructor;
        try { new v18(); } catch (e) {}
        const v20 = a13?.constructor;
        let v21;
        try { v21 = new v20(); } catch (e) {}
        v21.d = v21;
        const v22 = this?.f;
        v22.length;
        try { v22(); } catch (e) {}
        let v25;
        try { v25 = new v22(); } catch (e) {}
        try { v25.isPrototypeOf(v6); } catch (e) {}
        v25.h = v25;
        const v27 = a13?.constructor;
        let v28;
        try { v28 = new v27(); } catch (e) {}
        const v29 = v28?.constructor;
        try { new v29(); } catch (e) {}
        a13.h >>= F0;
        function F31(a33, a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
            const v36 = this?.__lookupGetter__;
            try { new v36(v15); } catch (e) {}
            a34.length = a34;
            const v39 = new Int8Array();
            const v40 = v39?.entries;
            try { new v40(); } catch (e) {}
            const v45 = v39.buffer.slice(a34, a34).transferToFixedLength()?.valueOf;
            try { new v45(); } catch (e) {}
        }
        new F31(F31, F31, F31);
        let v49 = -5.0;
        let v50 = v49--;
        v50--;
        return;
    }
    f = F0;
    p(a54, a55) {
        class C62 {
            static #p(a64) {
                this.#p();
            }
        }
    }
    d = F0;
    static [v5];
}
C11.name = C11;
let v66;
try { v66 = C11.toString(); } catch (e) {}
try { v66.strike(); } catch (e) {}
try { v66.charCodeAt(v6); } catch (e) {}
const v69 = new C11(v6);
const v70 = v69?.d;
let v71;
try { v71 = new v70(); } catch (e) {}
const v72 = v71?.constructor;
try { new v72(); } catch (e) {}
v71.h = v71;
const v74 = new C11(v4);
v74.length = v74;
980 < 980;
const v77 = 980 % 980;
v77 <= v77;
const v79 = 980 % 980;
v79 & v79;
BigInt64Array.a = BigInt64Array;
BigInt64Array.name = BigInt64Array;
const v82 = new BigInt64Array(980);
try { v82.reduce(v5); } catch (e) {}
1073741825n ^ 1073741825n;
const v86 = 1073741825n % 1073741825n;
v86 * v86;
try {
const t0 = 1073741825n;
t0();
} catch (e) {}
new C11(v6);
10198 % 10198;
-5 >> -5;
let v94 = -4294967295;
v94--;
try { new Float64Array(v70, v70, Float64Array); } catch (e) {}
Float64Array.BYTES_PER_ELEMENT = Float64Array;
const o102 = {
    toString(a99, a100) {
        980 && Float64Array;
        return v94;
    },
};
try { o102.toString(10198, v74); } catch (e) {}
let v104 = -14;
v104++;
const v106 = [-1.7976931348623157e+308,-613.7550152041111];
v106[1] = v106;
class C108 {
}
let v109;
try { v109 = C108.bind(v66); } catch (e) {}
try { v109.toString(); } catch (e) {}
try { new C108(); } catch (e) {}
const v112 = new C108();
const v113 = v112?.constructor;
try { new v113(); } catch (e) {}
v112.c = v112;
const v115 = v112?.constructor;
v115.length;
let v117;
try { v117 = new v115(); } catch (e) {}
try { v117.toLocaleString(); } catch (e) {}
const v120 = 9 < 10198;
v120 || v120;
const v122 = v106 ^ -1264607604;
v122 >>> v122;
