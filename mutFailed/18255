-9007199254740990n === -9007199254740990n;
1.992703169731687 % 1.992703169731687;
let v10 = -244190.7098991674;
const v11 = v10--;
class C13 {
    [9n] = 1701658938;
    get b() {
        new Float64Array(255);
        new Int8Array(3205);
        new Float64Array(1);
        return Float64Array;
    }
    static #h;
    8 = 1.992703169731687;
}
C13.e = -9007199254740990n;
C13.e = C13;
new C13();
new C13();
const v26 = new C13();
v26[9];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    function f34(a35) {
        try {
        const t0 = "source";
        t0("source", 3.866732047176795e+307, "source", ..."source");
        } catch (e) {}
        return this;
    }
    this[Symbol.toPrimitive] = f34;
    try {
        this.g = F32;
    } catch(e40) {
    }
    try {
        this.f = false;
    } catch(e41) {
    }
    try {
        this.b = false;
    } catch(e42) {
    }
}
const v43 = new F32();
const v44 = v43?.g;
function f45(a46) {
    try {
        BigInt(BigInt);
    } catch(e49) {
    }
    return v11;
}
v44.valueOf = f45;
try { new v44(); } catch (e) {}
const v51 = new F32();
v51[Symbol.toPrimitive] = f45;
const v54 = new F32();
const v55 = [5.627129677109545e+307,850582.6346538318,-2.0,-Infinity,289.0197571670685,187.7306401241658,1e-15];
let v56;
try { v56 = v55.join(F32); } catch (e) {}
try { v56.trim(); } catch (e) {}
const v58 = [0.6612384037511738,2.2940008033736596];
v58[2] = 1701658938;
try { v58.push(v54); } catch (e) {}
const v60 = [1000000000000.0,-1000000000000.0,3.173585042601135e+307,-5.0,-1e-15];
-v60[4];
function f63(a64, a65, a66, a67) {
    const v69 = Symbol.toPrimitive;
    a64[v69] = f45;
    function f70(a71) {
        Symbol("bigint");
        let v74 = -9007199254740991;
        v69 >> NaN;
        const v77 = --v74;
        v69 << a71;
        return v74 && v77;
    }
    a67.toString = f70;
    const v80 = a67?.g;
    try { new v80(); } catch (e) {}
    const v82 = a64?.g;
    Object.defineProperty(v82, Symbol.toPrimitive, { configurable: true, enumerable: true, value: Symbol });
    try { new v82(); } catch (e) {}
    a65[2] = a65;
    let v86 = a67?.g;
    function f87(a88, a89) {
        class C93 extends ([-1941710058,1389675721,-50560,-20231,1311353951,-1024,128,-25926]).constructor {
            #g;
            7 = -1823362111n;
        }
        return Symbol;
    }
    v86.toString = f87;
    v86.length = v86;
    Object.defineProperty(v86, v54, { set: f63 });
    v86 %= v58;
    const o94 = {
        "apply": f63,
        "call": f63,
        "deleteProperty": f63,
        "get": f63,
        "getOwnPropertyDescriptor": f63,
        "has": f63,
        "isExtensible": f63,
        "preventExtensions": f63,
        "set": f63,
    };
    new Proxy(v43, o94);
    try { new v86(); } catch (e) {}
    const o105 = {
        __proto__: v58,
        "h": v60,
        ...a64,
        [a67](a99, a100) {
            try { new a99(a66, a65, a67, a100); } catch (e) {}
            return 1350805809;
        },
        "c": v51,
        268435439: a64,
    };
    return o105;
}
const v106 = f63(v51, v60, v51, v43);
v106[2] = v106;
f63(v43, v55, v43, v51);
const v108 = f63(v51, v55, v43, v54);
v108.b = v108;
5 ^ 5;
try { new Int8Array(5, 182, false); } catch (e) {}
const v115 = -22631;
v115 | v115;
function f118() {
}
function f119() {
    const o124 = {
        "b": f118,
        valueOf() {
            try { this.b(); } catch (e) {}
            try { this.b(); } catch (e) {}
            [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        },
    };
    try { o124.b(); } catch (e) {}
    return o124;
}
const v126 = f119();
try { v126.valueOf(); } catch (e) {}
try { v126.b(); } catch (e) {}
const v129 = v126?.b;
let v130;
try { v130 = v129(); } catch (e) {}
const v131 = new v129();
const v132 = v131?.toLocaleString;
try { new v132(); } catch (e) {}
try { new Uint8Array(v130, v54, v54); } catch (e) {}
new Uint8Array(268435440);
try { ("function").toLocaleLowerCase(); } catch (e) {}
const v140 = ("function").length;
v140 == v140;
const v142 = f119();
function F143(a145, a146) {
    if (!new.target) { throw 'must be called with new'; }
    function f147(a148) {
        if ("log1p") {
        }
        return a148;
    }
    Object.defineProperty(this, "constructor", { value: f147 });
    try { a146.b(); } catch (e) {}
    try { a145.valueOf(); } catch (e) {}
    const v152 = this?.constructor;
    v152.caller;
    try { new v152(a145, a145); } catch (e) {}
    new Uint16Array(v140);
}
new F143(v142);
