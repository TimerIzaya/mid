const v1 = new Date();
const v2 = [Date,Date];
const v3 = [v2];
[v2,Date,v2,v1];
const v5 = [-966.562094589919,839.1768275297966,-4.0,-1e-15,290121.0567034683,-1.0,-3.0,-2.220446049250313e-16];
const v6 = [2.0,2.2250738585072014e-308,0.3581866172480055,1000000000.0,2.220446049250313e-16,0.3274653275090238,0.3703634155304023,2.0,1.207822844118229e+308];
let v7;
try { v7 = v6.toLocaleString(); } catch (e) {}
const v8 = [5.0,NaN,-3.0,-1.355351412516467e+308,0.5324185208200688,-4.0,0.5857028111286252,-861.01067649897,0.06936761718436724,-4.0];
try { v8.splice(v2, v3); } catch (e) {}
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = a12?.groupToMap;
    try { new v14(Date); } catch (e) {}
    try { v7.toString(); } catch (e) {}
    -1024 & -1024;
    function F19(a21, a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
    }
    F19.e = F19;
    const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function F26(a28, a29) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v30 = F26?.constructor;
    try { new v30(v2); } catch (e) {}
    class C32 {
    }
    let v33 = -4294967297n;
    v33 ^ v33;
    const v35 = v33--;
    const v36 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    for (let v38 = 0; v38 < 5; v38++) {
        function f39() {
            let v40 = "Vre";
            let v41 = Float64Array;
            try { new Array(v5); } catch (e) {}
            const v44 = Array();
            function f45() {
            }
            function f46(a47) {
                a47 & a47;
            }
            Object.defineProperty(v44, 0, { configurable: true, enumerable: true, get: f45, set: f46 });
            const v49 = v44.unshift(-1024);
            v49 / v7;
            const v52 = new Set();
            function F53(a55, a56) {
                if (!new.target) { throw 'must be called with new'; }
                F53(a56, v52);
            }
            v41 = F19;
            const v58 = v25.length;
            const v59 = v58 >>> v58;
            try {
                v59.forEach();
            } catch(e61) {
                e61.message = e61;
            }
            const v62 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            try { v62.toSorted(v1); } catch (e) {}
            Symbol.search;
            Symbol.for(Symbol.unscopables.description);
            class C70 {
            }
            try { new C70(); } catch (e) {}
            const v72 = new C70();
            try { v72.propertyIsEnumerable(v25); } catch (e) {}
            try {
                v72.__proto__ = F26;
                const v74 = [v40];
                class C75 {
                }
                try { new C75(); } catch (e) {}
                function* f77(a78, a79) {
                    yield* v74;
                    return v40;
                }
            } catch(e80) {
            }
            const v81 = Symbol.toPrimitive;
            try {
                Symbol();
            } catch(e83) {
            }
            try { new Symbol(); } catch (e) {}
            const o91 = {
                toString(a87, a88) {
                    const v89 = v38 && v41;
                    v40 *= v81;
                    return v89 <= v62;
                },
            };
            try { o91.toString(o91, this); } catch (e) {}
            const o114 = {
                "c": v33,
                [522675525n](a95, a96) {
                },
                valueOf(a98, a99) {
                    return a99;
                },
                [v33](a101, a102, a103, a104) {
                },
                "e": -268435456,
                "arguments": v36,
                ...this,
                [v81]() {
                },
                "type": C32,
                ...v40,
                valueOf(a107, a108) {
                    return v35;
                },
                ...v40,
                get h() {
                    return f39;
                },
                4: v40,
                toString(a111, a112, a113) {
                    return this;
                },
            };
            new Float32Array(Array, v49, v58);
            Float64Array.d = Float64Array;
            new Float64Array(v49);
            try { new Uint16Array(a13, v1, F53); } catch (e) {}
            const v121 = new Uint16Array();
            try { v121.toString(); } catch (e) {}
            const v123 = v121?.entries;
            try { new v123(v40, v123, v123, v123); } catch (e) {}
            return f46;
        }
        f39();
        %OptimizeFunctionOnNextCall(f39);
    }
    try {
        function f126(a127) {
            return a127;
        }
        class C128 {
        }
        this.e = v1;
    } catch(e129) {
    }
    try {
        this.d = v8;
    } catch(e130) {
    }
    try {
        this.g = a12;
    } catch(e131) {
    }
}
new F10(v2, v5);
const v133 = new F10(v5, v2);
v133.b = v133;
new F10(v8, F10);
1073741823 + 1073741823;
const v138 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f139() {
    return v138;
}
class C140 extends f139 {
}
C140.prototype;
const v142 = new C140();
delete v142[1];
function f145(a146) {
    const o151 = {
        get d() {
            return this;
        },
        valueOf(a149, a150) {
            return v5;
        },
    };
    return o151[213];
}
%PrepareFunctionForOptimization(f145);
f145(f145);
%OptimizeFunctionOnNextCall(f145);
new v7(64);
const v158 = Symbol.iterator;
const o160 = {
    [v158]() {
    },
};
f145();
