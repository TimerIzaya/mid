let v4 = BigUint64Array;
const v5 = (2147483648n)?.bind;
try { new v5(v4); } catch (e) {}
const v7 = new v4(129);
let v8 = 10;
try { new Uint16Array(Uint16Array, v4, Uint16Array); } catch (e) {}
const v11 = new Uint16Array(v8);
v11[7];
let v13 = 8;
let v14 = Uint8Array;
const v15 = new v14(v13);
class C16 {
    constructor(a18, a19, a20, a21) {
        const v22 = a18--;
        a19 + 129;
        a20 !== a20;
        a21 - a21;
        -(v13 | this);
        v13 = v8;
        v7.byteLength;
        super.b ^= v22;
    }
    #valueOf(a30, a31, a32, a33) {
        const v36 = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
        try { a31.fill(v14, v36, v36, a31); } catch (e) {}
        try {
            Math.valueOf = a33;
        } catch(e38) {
        }
        let [,...v39] = a32;
        Math.asinh(a32);
        Math.floor(0);
        const v43 = 4294967297n >>> 0;
        try { a32(v43, 129); } catch (e) {}
        return a33;
    }
}
C16.length = C16;
const v45 = new C16(2147483648n, v8, v8, 129);
const v46 = [v14,v4];
let v47;
try { v47 = (2147483648n).set(v46, v8); } catch (e) {}
v15[v47] = v47;
v8 = 129;
try {
    v11.c = C16;
} catch(e48) {
}
new C16(-5n, v8, v8, 129);
new C16(-5n, v13, 129, v13);
class C53 {
    constructor(a55, a56) {
        this.constructor;
        try { Math.expm1(C16); } catch (e) {}
        Math.atan2(this);
    }
    d = v14;
}
let v61;
try { v61 = new C53(); } catch (e) {}
v61.d;
new C53();
C53.h |= -1602984247;
new C53();
({"a":v4,"g":v14,...C53} = v45);
gc.arguments = gc;
try { ("minor").isWellFormed(); } catch (e) {}
const o69 = {
    "execution": "sync",
    "type": "minor",
};
gc(o69);
