const v0 = [];
class C1 {
    get e() {
        let v5 = new Set();
        v5 /= v5;
        v0.length;
        super.a >>= this;
        try {
            this.a = v0;
        } catch(e7) {
        }
        return this;
    }
    constructor() {
        const v10 = [[v0]];
        v10[0] = v10;
        [v0];
    }
    e;
    a;
}
function f12(a13, a14) {
    class C15 {
    }
    const v16 = new C15();
    Reflect.apply(a14, v16, []);
    return C15;
}
C1[Symbol.toPrimitive] = f12;
const v22 = new C1();
const v23 = new C1();
Object.defineProperty(v23, Symbol.toPrimitive, { configurable: true, enumerable: true, value: Symbol });
let v26 = new C1();
class C27 {
    static get c() {
        const v30 = new WeakSet();
        v30[7] = v30;
        try {
            v30.__proto__ = C1;
        } catch(e31) {
            let [] = v0;
            let v32;
            try { v32 = C1.n(v30); } catch (e) {}
            try {
                v32.d = v23;
            } catch(e33) {
            }
        }
        return this;
    }
    static 7 = v0;
    [C1] = v23;
    static 1407 = C1;
    e;
    [v23];
}
C27[1407] = C27;
new C1();
const v35 = new C1();
v35.e;
const v37 = new C27();
-65535 >>> -65535;
65535 + 65535;
function f43(a44, a45, a46, a47) {
    a46.b = a46;
    const o63 = {
        n(a49, a50) {
            let v48 = this;
            [v48,a49] = v0;
            let v51;
            try { v51 = v48(a44, v22, v23, ...v48, a50); } catch (e) {}
            v51 % v37;
            v26 = C1;
            Math.tan(a46 % a46);
            const v58 = ~a46;
            Math.sqrt(C1);
            C1 / 0.7165199963900419;
            --a47;
            !v58;
            return a44;
        },
    };
    return v23;
}
const v66 = f43(v22, 65535, f43(v22, 9007199254740990, f43(v35, 65535, v23, v0), v26), f43);
v66.a = v66;
4096 >>> 4096;
const v70 = new Uint32Array(4096);
v70[6] = 35.31700069890553;
