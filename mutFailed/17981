function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    try {
        this.f = 3.1048275977860573;
        const v9 = Array(19793);
        v9[2588] = v9;
        for (const v10 of v9) {
        }
    } catch(e11) {
        const o17 = {
            "e": 12,
            __proto__: 3.4890473589784586e+307,
            "g": 12,
            o(a16) {
                return a16;
            },
            ...1000000000000.0,
        };
    }
    try {
        this.c = a6;
    } catch(e18) {
    }
    function f19() {
        function f20(a21) {
            try {
                const o22 = {
                };
            } catch(e23) {
            }
        }
        try {
        } catch(e24) {
        }
    }
    const o27 = {
        "type": "function",
    };
    o27.arguments = -1e-15;
    new Worker(f19, o27);
}
new F3(3.1048275977860573, 3.1048275977860573);
new F3(-1e-15, 3.1048275977860573);
new F3(3.1048275977860573, 1.0030097641506137e+308);
const v33 = [-1000.0,1000000000.0];
const v34 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
function f39(a40, a41) {
    const o42 = {
        [33062n]: 8n,
        __proto__: v34,
        [37369]: a41,
        [a40]: a40,
        ...a40,
        5: v33,
        ...v33,
    };
    return o42;
}
f39(26724);
new Int16Array(249);
Uint8Array.toString = f39;
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
class C52 extends Set {
    #m(a54, a55) {
    }
}
new BigInt64Array(255);
function f59(a60, a61, a62) {
    const o64 = {
        [a62]: a61,
        "g": 65536n,
        get a() {
            return a60;
        },
        "a": a62,
    };
    return f59;
}
f59(3.1048275977860573, 65536n, Infinity);
new Uint8ClampedArray(545);
function f69() {
    ("D")[0].substring().charCodeAt();
    const v76 = new BigInt64Array(3768);
    function f77(a78, a79) {
        const v80 = a78++;
        const v81 = v80 >> v80;
        let o82 = {
        };
        [,...o82] = v76;
        return v81;
    }
    return "D";
}
%PrepareFunctionForOptimization(f69);
f69();
%OptimizeFunctionOnNextCall(f69);
f69();
