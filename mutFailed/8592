const v0 = [0,129,3];
const v1 = [-4294967295,-4294967296,-2147483647,10000,58006,-4294967296,536870889];
const v2 = [9,1386572409];
class C3 {
    #f;
    static [v2];
    static #toString(a5) {
        return v2;
    }
    [v1] = v0;
    #a;
    #b = v2;
}
C3.length = C3;
const v9 = v0 != v2;
function f10() {
    return v9;
}
v2[4294967296] = v0;
const v11 = new C3();
const v12 = new C3();
const v13 = new C3();
const v14 = v13?.constructor;
v0.filter(v14, ...v0, ...v2, v14, v14).length;
let v18;
try { v18 = v12["valueOf"](); } catch (e) {}
delete v13[v18];
try { new v14(); } catch (e) {}
let v21 = [v0,v13,v1,v11];
[v11,v13,v21,v12,v0];
for (let [v24,v25] of [v2,v2]) {
    v25 + v25;
}
-39245 % -39245;
BigUint64Array.prototype = BigUint64Array;
const v35 = new BigUint64Array();
if (v14) {
    v21 = v12;
    const o39 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o39);
} else {
    const v44 = BigUint64Array && BigUint64Array;
    -v44;
    Math.atan(v44);
    Math.log10(v44);
    Math.cosh(-7);
    Math.exp(-7);
}
for (const v50 of v35) {
}
for (let i = 0; i < 5; i++) {
    const o52 = {
    };
    gc(o52);
}
