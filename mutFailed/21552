new Uint8Array(16);
class C5 {
}
const v6 = new C5();
with (v6) {
    try { ("NaN").startsWith(h); } catch (e) {}
}
try { Reflect.set(); } catch (e) {}
const v12 = [];
function f13() {
    const o17 = {
        toString() {
            super[this];
            return this;
        },
        ...v12,
        n() {
            return this;
        },
    };
}
f13();
new Uint8ClampedArray(6);
new Uint8ClampedArray(1024);
for (let v26 = 0; v26 < 5; v26++) {
    function f28() {
        return f28;
    }
    function f30(a31, a32, a33, a34) {
        const v37 = new BigInt64Array(4046);
        let o38 = {
        };
        Math.log(Math);
        [,...o38] = v37;
        return f30;
    }
    for (let v41 = 0; v41 < 5; v41++) {
        f30(v41, v41, f30, v41);
    }
    const o59 = {
        "type": "function",
        "type": "f2wDa",
        ["symbol"](a45, a46) {
            super[f28];
        },
        valueOf() {
            eval();
            return ("-1723624938").slice(v26, v26);
        },
    };
    class C61 extends Float64Array {
    }
    function f62() {
        return 16;
    }
    f62();
    new Worker(f28, o59);
    function F66(a68) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F66(4);
    const v72 = new Uint8ClampedArray(255);
    v72[3] = Uint32Array;
}
