function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = this;
    try {
        this.g = -501245320;
    } catch(e3) {
    }
    try {
        this.e = -501245320;
    } catch(e4) {
    }
}
const v5 = new F0();
let v6 = new F0();
const v7 = new F0();
function f11(a12, a13, a14) {
    a13.toString = f11;
    function f15(a16) {
        let v17 = -4294967297n;
        const v18 = v17--;
        const v19 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v20 = [601759695];
        const v21 = [1073741824,1073741823,1376142744,1073741825];
        function f22() {
            b = v20;
            try {
                v21.forEach(v17);
                const o25 = {
                    "execution": "async",
                };
                return o25;
            } catch(e26) {
            }
            const o42 = {
                "c": v20,
                valueOf(a28, a29) {
                    return v18;
                },
                [v17](a31, a32, a33, a34) {
                    eval(a32);
                },
                "arguments": v19,
                [v18](a38, a39, a40, a41) {
                },
            };
            return v20;
        }
        return a12;
    }
    a14.valueOf = f15;
    a12 - a12;
    a13 + a13;
    const o58 = {
        "h": 9007199254740990,
        n(a46, a47) {
            try { a14(this, F0, a46); } catch (e) {}
            new Int16Array(1);
            new Uint16Array(4);
            new Float64Array(3026);
            return a14;
        },
    };
    try { o58.valueOf(); } catch (e) {}
    return o58;
}
const v60 = f11(9007199254740990, 65536, v7);
function f61(a62) {
    let v63;
    try { v63 = v6.fromEntries(a62); } catch (e) {}
    return v63;
    return a62;
}
v60.toString = f61;
const v64 = f11(-428146864, v60, v60);
const v65 = f11(9007199254740990, f11, v64);
v65.e = v65;
const v66 = [v65,9007199254740990,v65,65536,v60];
[-428146864,-428146864];
[9007199254740990,v5,f11,v66,v65];
let v69 = "-11838";
try { v69.trim(); } catch (e) {}
function f72() {
    const v77 = --v69;
    +536870912;
    Math.floor(536870912);
    Math.hypot(v77);
    v6--;
    Math.hypot(v64);
    return Math.asinh(16);
}
Float32Array.constructor = f72;
const v84 = Float32Array?.constructor;
try { new v84(v66); } catch (e) {}
const v86 = new Float32Array();
const v89 = v86["copyWithin"](...v69)?.entries;
try { new v89(); } catch (e) {}
