const v0 = [2.220446049250313e-16,Infinity];
function f1() {
    new Uint32Array(1702);
    new Int32Array(2);
    const v10 = new BigUint64Array(64);
    return v10;
}
v0[Symbol.toPrimitive] = f1;
const v13 = [-862.5082591710866,8.547953641854475e+307,-287750.42341167724];
const v14 = [-231.99074993753334,-6.765626103037472,2.2250738585072014e-308,-3.0,1000000000.0,0.1326812658733404,-4.0,281.98855092299664];
let v16 = 127;
const v17 = v16--;
v17 * v17;
const v21 = Map.length;
const v22 = new Map();
v22[-1] = v17;
const v25 = new Uint32Array(255);
BigInt64Array.toString = Symbol;
const v28 = new BigInt64Array(1123);
const v29 = v28?.__lookupGetter__;
try { new v29(-7); } catch (e) {}
function f32(a33, a34, a35) {
    'use strict';
    const v36 = a33?.apply;
    try { new v36(v16, f32); } catch (e) {}
    a34[6] = a34;
    a35 - a35;
    a33.b = a33;
    a34[7] = a34;
    let v39 = a35 | a35;
    v39--;
    const v42 = ~v0 in v22;
    v42 && v42;
    return v42;
}
f32.e = f32;
const v44 = f32(f32, v14, -7);
function f45() {
    const v47 = Symbol.for();
    const o48 = {
        [v47]: f45,
    };
    return f45;
}
!v44;
Uint16Array.g = Uint16Array;
Uint16Array.g = Uint16Array;
const v51 = new Uint16Array(3584);
function f52(a53, a54) {
    const t49 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    t49["p" + -7] = -7;
    return v13;
}
v51.toString = f52;
class C58 {
    static {
    }
}
const v60 = C58?.apply;
v60.name = v60;
try { new v60(v16, v0); } catch (e) {}
let v62 = "string";
for (let i65 = 0, i66 = 10;
    i65 < i66;
    (() => {
        const v70 = i65++;
        v70 >> v70;
        v70 >> v70;
    })()) {
    for (const v75 in v0) {
        v62 *= v62;
    }
}
const o77 = {
    [255]: v16,
    __proto__: "function",
    257: 64,
    "b": 1123,
    [-7]: v28,
};
Object.defineProperty(o77, "length", { value: v14 });
class C78 {
    constructor(a80, a81) {
    }
}
try { new C78(64, 64); } catch (e) {}
const v84 = new C78();
const v85 = v84?.constructor;
let v86;
try { v86 = new v85(v0, v0); } catch (e) {}
v84 << -1557853178;
try { ("object").anchor(f32); } catch (e) {}
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a94;
    this.h = F91;
    try {
        this.b = "function";
    } catch(e95) {
    }
    try {
        this.h = "function";
    } catch(e96) {
    }
}
const o97 = {
};
o97.e = C58;
o97.e = o97;
class C98 {
}
const v99 = C98?.constructor;
try { new v99(v84); } catch (e) {}
const v101 = new C98();
v101.toString = f1;
let v102;
try { v102 = v101.propertyIsEnumerable(BigInt64Array); } catch (e) {}
const v103 = new F91();
v103.e = v86;
v103.e = v103;
v103.b = v103;
const v104 = new F91();
const v105 = new F91("function", v103);
v105.d = v104;
v105.d = v105;
try { new Float64Array(o77, 1123, v84); } catch (e) {}
const v109 = new Float64Array(1073741824);
try { v109.entries(); } catch (e) {}
function f112(a113, a114) {
    v84.e &= v102;
    Math.tanh(-1000.0);
    return -1000.0;
}
Uint32Array[Symbol.toPrimitive] = f112;
const v121 = new Date(Uint32Array);
try { v121.getDay(); } catch (e) {}
v105.h;
-4096;
const v127 = new Float32Array();
class C128 {
    set d(a130) {
    }
    static #m(a132, a133, a134) {
    }
    static {
        let v136;
        try { v136 = new this(); } catch (e) {}
        function f137(a138) {
            function f139() {
                const v141 = ("1073741824").constructor;
                return v141(f139, 1073741824, v141, "1073741824", v141);
            }
            return v25;
        }
        v136.constructor = f137;
        const v143 = v136?.constructor;
        try { new v143(); } catch (e) {}
        for (let v145 = 0; v145 < 10; v145++) {
            v145 - v145;
            function f147() {
                return v145;
            }
            let v148;
            try { v148 = f147(); } catch (e) {}
            v148 ^ v148;
            const v150 = [601759695];
            function f151(a152) {
                function F153(a155, a156) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v157 = this.constructor;
                    try { new v157(); } catch (e) {}
                    ~a156;
                }
                new F153(F153, F153);
                return 4096;
            }
            v150.toString = f151;
            const v161 = [1073741824,1073741823,1376142744,1073741825];
            function f162(a163) {
                try {
                    v21.toString = v29;
                } catch(e164) {
                }
            }
            Object.defineProperty(v161, 5, { configurable: true, enumerable: true, set: f162 });
            function f166(a167, a168, a169, a170) {
                function f172() {
                    return a167;
                }
                try { new f172(); } catch (e) {}
                f147();
                try { Int8Array(f166, v148, v148); } catch (e) {}
                const v177 = Int8Array.name;
                try { v177.link(v150); } catch (e) {}
                const v179 = new Int8Array();
                function f180(a181, a182) {
                    try { a181.map(v179); } catch (e) {}
                    return a181;
                }
                try { f180(v136, v150); } catch (e) {}
                f180.length;
                const v186 = f180(v161, v127);
                v186[3] = v186;
                v150[v150];
                let v188 = 2;
                v188++;
                function f190(a191) {
                    const o195 = {
                        __proto__: v188,
                        ...a191,
                        p(a193, a194) {
                            return a194;
                        },
                    };
                    return o195;
                }
                let v196;
                try { v196 = v186.push(f166); } catch (e) {}
                v196 << v196;
                const v198 = f180(v186);
                v198[2] = v198;
                const v199 = v179.buffer;
                v199.constructor = f180;
                try { v199.slice(v101, v51); } catch (e) {}
                v199.slice(2147483648);
                %OptimizeFunctionOnNextCall(f172);
                ("find")[3];
                let v205;
                try { v205 = v161["find"](..."find", a170, ...v150, ...v161, ...522675525n); } catch (e) {}
                v205 <= a169;
                return arguments;
            }
            for (let v207 = 0; v207 < 10; v207++) {
                v207 / v207;
                const v209 = f166();
                v209.length = v209;
                v209.length;
            }
        }
    }
}
