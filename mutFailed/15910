1073741824 ^ 1073741824;
function f7(a8, a9, a10) {
    a9 & a9;
    const o31 = {
        "f": -128,
        __proto__: a10,
        1: -4294967295,
        [15]: -128,
        o(a13, a14, a15) {
            Reflect.construct(a13, [a13,a10], a15);
            return 15;
        },
        set c(a20) {
            const v25 = +1073741824;
            Math.min(1073741824);
            Math.cosh(v25);
            a10 & 1073741824;
            Math.log1p(-1073741824);
            ~-1073741824;
        },
        "a": a9,
        ...-7,
        "e": a9,
        "h": 15,
        "c": a8,
    };
    return o31;
}
const v32 = f7(-7, -128, -7);
function f33(a34, a35) {
    const v36 = /((?<=a))/gudm;
    v36.b = v36;
    return 268435440;
}
v32.toString = f33;
const v37 = f7(-128, -7, 1073741824);
v37[15];
const v39 = f7(1073741824, 268435440, 1073741824);
v39[Symbol.toPrimitive] = f7;
v39.c = v39;
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    function f47(a48, a49) {
        [-837171.5156989681,195231.69620034657];
        [-1.0,2.0,16.79531906086345];
        [1e-15,1000000.0,6.880323595416706e+307,-390889.82725288,-377.06986683125285,279.9953974907876,-1.7976931348623157e+308,-0.0,-2.2250738585072014e-308,-1000000.0];
        return a44;
    }
    a45.toString = f47;
    a44++;
    a45.h = a45;
    try {
        v37[v37];
    } catch(e55) {
        a46 = e55;
    } finally {
        let v57 = 512;
        const v59 = -v57;
        +(++v57 << a46);
        3.0 + a46;
        Math.hypot(v59);
    }
    try {
        this.a = a44;
    } catch(e65) {
    }
    const v66 = `
        function f67() {
            return f67;
        }
    `;
    const v68 = v66.normalize();
    try { v68.padStart(this); } catch (e) {}
    try {
        this.d = 268435440;
    } catch(e70) {
    }
    try {
        this.e = a44;
    } catch(e71) {
    }
}
new F42(-7, v37, v39);
const v73 = new F42(15, v32, v39);
v73.p9 = v73;
const v74 = new F42(1073741824, v32, v32);
v74.a = v74;
function f75() {
    return v37;
}
try { f75(); } catch (e) {}
function f78() {
    return f7;
}
Object.defineProperty(Uint32Array, Symbol.toPrimitive, { enumerable: true, get: f78 });
const v81 = [Uint32Array];
const v82 = [Uint32Array];
v82.toString = Symbol;
v81 ** v82;
for (let v84 = 0; v84 < 32; v84++) {
    v73["p" + v84] = v84;
}
const v88 = v81["concat"](v82);
try { v88.entries(); } catch (e) {}
