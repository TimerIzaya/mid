/[^(?:a?)?]/gvims;
class C2 {
}
const v3 = new C2();
class C4 extends C2 {
    static #p(a6, a7, a8, a9) {
        [..."A",v3];
    }
}
/./uds;
/jT[^hc+]/vdim;
[1073741825,-2,1073741825,-2147483648,8,16];
[8,1024,-2,-128,1333405517,-1493443723,129,9223372036854775807];
class C18 {
}
class C19 extends C18 {
}
for (let v20 = 0; v20 < 32; v20++) {
    "p" + v20;
    function f23() {
        for (let v24 = 0; v24 < 5; v24++) {
        }
        return f23;
    }
    f23();
}
[45070,16,127,9,268435441,3,-4294967297,536870887];
([4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886]).toLocaleString();
([-1,404293594,64,-10]).unshift(1.7976931348623157e+308, -4213);
const v39 = [601759695];
const v40 = [1073741824,1073741823,1376142744,1073741825];
C18.DataView;
new Uint32Array(1024);
class C46 {
    static #b = 1175953465;
}
new C46();
function f48(a49, a50, a51, a52) {
    [-174534415n,Float64Array,2147483648n];
    class C58 extends Int8Array {
    }
    function F60(a62, a63, a64, a65) {
        if (!new.target) { throw 'must be called with new'; }
        const v66 = this.constructor;
        try { new v66(a62, a62); } catch (e) {}
        a63.isPrototypeOf();
    }
    try { v40["find"](..."find", a52, ...v39); } catch (e) {}
    return a49;
}
for (let v70 = 0; v70 < 10; v70++) {
    f48();
}
%OptimizeFunctionOnNextCall(f48);
f48();
