class C3 {
    static {
        this.name = this;
        super.c = this;
        const v5 = [4294967297,-268435456,10,-1,2147483648,1821742191];
        try { v5.find(-13577); } catch (e) {}
        [-55033,15182,-9007199254740991];
        const v8 = [65536,-7,-9007199254740991,10,-4096,37778,536870888];
        try { v8.toLocaleString(); } catch (e) {}
    }
    3;
    static #g;
    static #c = 0.041528398148473755;
    #d;
}
try { new C3(); } catch (e) {}
const v11 = new C3();
const v12 = new C3();
const v13 = new C3();
v13[3] = v13;
const v17 = ("-2147483648")?.trimRight;
try { new v17(); } catch (e) {}
class C22 {
    constructor(a24, a25, a26, a27) {
        const v28 = this?.constructor;
        try { new v28(this, a24, a27, this); } catch (e) {}
        a24 >>> a24;
        a25++;
        function F32() {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = this?.constructor;
            try { new v34(); } catch (e) {}
        }
        const v36 = new F32();
        v36.length;
        const v38 = [6.345269750596144e+307,1.5426121797865451e+308,-1.0,1.0763754168130034e+308,-1.0165609707268582e+308,-2.220446049250313e-16,4.1652134965708285,Infinity,8.22884515469082e+307,-1000000000.0];
        function F39(a41, a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
            const v44 = this.constructor;
            try { new v44(v36); } catch (e) {}
            a41[3] = a41;
        }
        const v46 = new F39(v38);
        const v47 = v46?.constructor;
        try { new v47(a25, v11, a26); } catch (e) {}
    }
}
try { new C22(v12, 2147483649, v13, v13); } catch (e) {}
const v50 = new C22(512, 706, 706, 1);
v50.length;
new C22();
