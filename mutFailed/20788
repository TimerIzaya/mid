const v3 = [2,-11,-733237545,-3316,9];
const v4 = [2036489216,-1021931512,-32941,-1360241762,525254437,256,-1984904946,-1109233733,268435439];
const v5 = [11,1073741824,-268435456,2,-128,54341,1,-60514,-986317634,10000];
const v6 = [10];
const v7 = [v5,v3,10,v6];
const v8 = [v4,v6];
class C9 {
    static 64;
    static a;
    static b = v5;
    8 = 10;
    static f = v3;
    constructor(a11, a12, a13) {
        try {
            super.log(a13);
        } catch(e15) {
            class C17 extends Map {
            }
            const v18 = new C17();
            const v19 = new C17();
            const v20 = new C17();
            const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            const v26 = new Uint32Array(5);
            let v27 = -4294967297n;
            v27--;
            const v29 = [601759695];
            const v30 = [1073741824,1073741823,1376142744,1073741825];
            function f32(a33, a34, a35, a36) {
                try { a33.toLocaleString(); } catch (e) {}
                const v38 = a33?.constructor;
                let v39;
                try { v39 = v38(); } catch (e) {}
                try { v38(); } catch (e) {}
                const v42 = arguments.length;
                Object.defineProperty(v18, "e", { configurable: true, enumerable: true, value: f32 });
                const v44 = v19["entries"](a35, ...v20, BigUint64Array, ..."entries", a34, v42);
                const v46 = Symbol.toStringTag;
                v19[v46] = v46;
                function f47() {
                    let v49;
                    try { v49 = ("Vre").charAt(4096); } catch (e) {}
                    try { v49.lastIndexOf(f47); } catch (e) {}
                    let v51;
                    try { v51 = ("Vre").codePointAt(v24); } catch (e) {}
                    v51 - v51;
                    v51 ^ v51;
                    let v54 = Float64Array;
                    v54 = a34;
                    let v55 = v24.length;
                    v55++;
                    try {
                        v30.forEach(a34);
                    } catch(e58) {
                        e58.stack = e58;
                    }
                    const o69 = {
                        "c": v27,
                        "c": v29,
                        valueOf(a60, a61) {
                            return a61;
                        },
                        1073741824: v26,
                        [v27](a63, a64, a65, a66) {
                            eval(v39);
                        },
                        "arguments": 5,
                        256: a36,
                    };
                    o69[256];
                }
                f47();
                const v73 = Array();
                let v74;
                try { v74 = v73.findLast(f32, v26); } catch (e) {}
                v73.unshift("entries", v44, "entries", v74);
                let v77;
                try { v77 = Int8Array.of(); } catch (e) {}
                try { v77.join(v38); } catch (e) {}
                const v79 = new Int8Array(v29);
                v79.c = v79;
                const v80 = v79.buffer;
                v80.maxByteLength;
                const v82 = v80.slice(v38);
                try { Int32Array(v82, arguments, v27); } catch (e) {}
                function f85(a86, a87, a88, a89) {
                    return v18;
                }
                const v90 = new Int32Array();
                const v91 = v90[3];
                v91 + v91;
                for (let v93 = 0; v93 < 5; v93++) {
                }
                %OptimizeFunctionOnNextCall(f47);
                try { v30["find"](..."find", a36, ...v29, ...v30, ...522675525n); } catch (e) {}
                return v38;
            }
            for (let v96 = 0; v96 < 10; v96++) {
                f32(v26);
            }
            %OptimizeFunctionOnNextCall(f32);
            f32();
        }
    }
    [-10] = v4;
}
const v99 = new C9(v7, v8, v5);
new C9(v4, v99, v99);
new C9(v5, v7, v3);
const v102 = [1938815823,-2147483648,1073741825,26032,-42281,15];
const v103 = [1287418746];
const v104 = [-4294967296,536870888,4,-9007199254740992,4294967296,129,-14276,-12381,-14453,1950241815];
function f105() {
    return v104;
}
Object.defineProperty(v104, "toString", { writable: true, configurable: true, value: f105 });
class C106 {
}
const v107 = new C106();
function F108(a110, a111, a112, a113) {
    if (!new.target) { throw 'must be called with new'; }
    a111.g = a112;
    a113.stack = v104;
    a111.fill(v103);
}
const v115 = new F108(v107, v104, v104, v104);
new F108(v115, v103, v104, v104);
new F108(v107, v102, v103, v102);
