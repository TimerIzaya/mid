const v0 = [];
function f1() {
    return v0;
}
const v2 = [];
const v3 = [v2,v2,v2,v2,v2];
class C4 {
    constructor(a6, a7) {
        function F8(a10, a11) {
            if (!new.target) { throw 'must be called with new'; }
            const v12 = this?.constructor;
            try { new v12(v3, this); } catch (e) {}
            a11 ^ a11;
            this.b = v2;
        }
        new F8(C4, v2);
        new F8(v2, v3);
        new F8(C4, v2);
    }
}
new C4();
new C4();
new C4(v3, v2);
class C21 {
    static n(a23, a24) {
        let v22 = this;
        super.b = a23;
        ({"e":a24,"f":f1,"g":v22,} = v22);
        v22?.[16];
        let v26;
        try { v26 = v0.entries(); } catch (e) {}
        return v26;
    }
    static set c(a28) {
        try { new a28(); } catch (e) {}
    }
    #c = f1;
    #d;
    static h;
}
const v30 = new C21();
const v31 = new v30();
new v30();
new Uint32Array(128);
class C37 extends v3.constructor {
    static #e = v31;
    static b = C4;
    #g = C4;
}
new C37();
new Uint16Array(512);
new Int32Array(128);
let v45 = 6;
class C48 {
    get b() {
        delete this?.e;
        v45 = 1664606158;
        const o57 = {
            valueOf() {
                this && Uint32Array;
                try {
                    this.a = this;
                } catch(e56) {
                }
                return this;
            },
        };
    }
}
class C58 extends C48 {
    constructor(a60, a61, a62, a63) {
        super();
        super.b;
    }
}
new C58(v45, C58, 1664606158, 1664606158);
