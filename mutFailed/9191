const v2 = new Uint8Array(4);
new Int32Array(66);
const v8 = new BigInt64Array(257);
class C9 {
    set a(a11) {
    }
    static [BigInt64Array] = v8;
    a = BigInt64Array;
    static [4];
    #a;
    268435456 = v2;
}
const v15 = new C9();
new C9();
new v15();
const v18 = [-Infinity,-1000000.0,-964229.7889241329];
const v19 = [1000.0,7.013617100191173,-351.0818852767976,0.6726521994945021,0.0654548428416345,0.0,357.95756141696074,-114535.71398965968];
const v20 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
const v21 = [v20];
[v18,v19,v21,v21,v20];
[v19,v20,v20];
1000000000000.0 - 1000000000000.0;
let v27 = 4.9807369083218855;
v27++;
function f29() {
    return v27;
}
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.constructor;
    try { new v35(a33, a32, a34); } catch (e) {}
    const v37 = a34 + a34;
    try {
        this.b = v37;
    } catch(e38) {
    }
}
F30.arguments;
const v40 = new F30(1000000000000.0, v21, v27);
v40.length = v40;
new F30(0.0746389278020293, v20, 0.0746389278020293);
class C42 extends F30 {
    512 = v20;
}
C42.prototype = C42;
new C42();
new C42();
const t47 = 0.0746389278020293;
new t47();
-1e-15 ^ -1e-15;
const v51 = 1073741823 & 1073741823;
v51 + v51;
