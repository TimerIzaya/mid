new BigUint64Array(6);
class C5 {
    #c = "toUpperCase";
    get a() {
        const v7 = this << "toUpperCase";
        const v8 = v7 ^ v7;
        let v9;
        try { v9 = v8(v8, this, v8, v8, v7, this); } catch (e) {}
        v9[v8] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
const v11 = new C5();
const v12 = [v11];
v12[0] = v12;
const v14 = [2147483649,-62399];
v14[Symbol.unscopables] = v14;
function f17() {
    return f17;
}
class C18 extends f17 {
}
const v19 = new v14();
new v14(v19, C18);
5 / 5;
const v23 = new Uint8Array(5);
const v26 = new Int32Array(3568);
const v27 = v26?.constructor;
try { new v27(v23, Uint8Array, 6); } catch (e) {}
const v30 = Date?.constructor;
try { new v30(BigUint64Array); } catch (e) {}
const v32 = new Date();
try { v32.setFullYear(5, 5, BigUint64Array); } catch (e) {}
function f35(a36, a37) {
    return a36;
}
const v38 = [-3.0,0.0,8.692473731259366,-1e-15,0.598869256055706,-2.0,-2.220446049250313e-16,-Infinity,-9.722804109631653];
function f39() {
    return v38;
}
f39();
const v42 = new Int16Array(2112);
Int32Array.e = Int32Array;
new Int32Array(4);
const v47 = 2333 | 2333;
const v49 = new Uint32Array(2333);
v49.buffer;
const v52 = new WeakMap();
Math.atan(5.134563044869008e+307);
const v58 = new Uint32Array(4096);
v58[6] = 35.31700069890553;
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this?.__lookupGetter__;
    try { new v64(F60); } catch (e) {}
    const v66 = this?.propertyIsEnumerable;
    try { v66.toString(); } catch (e) {}
    v66.name = v66;
    try { new v66(v52); } catch (e) {}
    try {
        this.f = a63;
        for (let i71 = 0, i72 = 10; i71 < i72; i72--) {
        }
    } catch(e79) {
    }
    try {
        this.d = a63;
        const v80 = [];
        function f81() {
            return v80;
        }
        let v84 = new Uint8ClampedArray(256);
        function f85() {
            return [Int8Array];
        }
        v84.valueOf = f85;
        const v89 = v47 - v47;
        let v90 = BigUint64Array;
        class C91 {
            static c = 256;
            static e;
            constructor(a93, a94, a95) {
                const v96 = this?.constructor;
                try { new v96(v89, a94, C91); } catch (e) {}
                a93 % a93;
                let v99;
                try { v99 = a94.indexOf(Uint8Array); } catch (e) {}
                v99 << v99;
                a95 + a95;
                try { Math.expm1(v80); } catch (e) {}
                try { Math.sign(f81); } catch (e) {}
                let v106 = 1073741824;
                const v107 = v106--;
                v107 | v107;
                let v109 = --v84;
                v109--;
                v109--;
                let v112 = ~Infinity;
                const v113 = v112--;
                v113 + v113;
                --v106;
                -Infinity;
                v112++;
                --v90;
            }
        }
    } catch(e119) {
    }
    try {
        this.a = a63;
        536870888 >>> 536870888;
        -53190 >> -53190;
        const v124 = v42.constructor;
        try { v124(v124, v124); } catch (e) {}
        try { new v124(); } catch (e) {}
        function f127(a128, a129) {
            Math.imul(3, a128 % a128);
            Math.log(3);
            a129.constructor(a129);
            const o137 = {
                "f": -1.883023285666516,
            };
            const v138 = [601759695];
            function f139(a140, a141, a142, a143) {
                function f144() {
                    v14.forEach(a141);
                }
                new Int8Array();
                for (let v148 = 0; v148 < 5; v148++) {
                }
                try { v14["find"](..."find", a143, ...v138, ...v14); } catch (e) {}
            }
            for (let v151 = 0; v151 < 5; v151++) {
                f139();
            }
            return f127;
        }
        -53190 << -53190;
        const v158 = 1073741823 % 1073741823;
        v158 + v158;
    } catch(e160) {
    }
}
const v161 = new F60(v52, F60);
const v162 = v161?.constructor;
v162.length;
try { new v162(WeakMap, F60); } catch (e) {}
const v165 = new F60(F60, F60);
const t149 = 5;
t149.constructor = Date;
function F167(a169, a170) {
    if (!new.target) { throw 'must be called with new'; }
    const v171 = this.constructor;
    v171.bind(F167, a169, v171, a169);
    try { new v171(); } catch (e) {}
    a170 / a170;
}
new F167();
const v176 = v165?.constructor;
v176.length = v176;
class C178 {
    p(a180, a181, a182) {
        -1000000000000.0 >= a180;
        Math.acos();
    }
}
let v186;
try { v186 = new v176(F60, v162); } catch (e) {}
const v187 = v186?.f;
try { new v187(Int32Array, Uint32Array); } catch (e) {}
new F60(v161, v161);
const v192 = 4096 - 4096;
v192 != v192;
let v194 = -941236596;
v194++;
let v196 = v194--;
v196++;
try { ("vX").isWellFormed(); } catch (e) {}
"536870887" == "536870887";
let v206;
try { v206 = ("536870887").strike(); } catch (e) {}
let v207;
try { v207 = v206.blink(); } catch (e) {}
try { v207.blink(); } catch (e) {}
const v209 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v209.find(v161); } catch (e) {}
const v211 = [601759695];
class C213 extends Date {
}
new C213();
v49.constructor;
const v216 = [1073741824,1073741823,1376142744,1073741825];
let v217;
try { v217 = v216.sort(v209); } catch (e) {}
function f219(a220, a221, a222, a223) {
    a222 - a222;
    a222 + a222;
    try { a223.group(a222); } catch (e) {}
    try { a220.findIndex("toString"); } catch (e) {}
    let v228;
    try { v228 = a221.toLocaleString(); } catch (e) {}
    try { v228.strike(); } catch (e) {}
    let v230;
    try { v230 = v228.toLocaleLowerCase(); } catch (e) {}
    const v231 = a223[1];
    v231 >>> v231;
    arguments[0];
    function f235() {
        -4294967295 - -4294967295;
        -4294967295 >>> -4294967295;
        -268435456 - -268435456;
        const o245 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a243, a244) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        o245[6];
        const v247 = o245[0];
        try { v247.padStart(v230); } catch (e) {}
        return o245;
    }
    for (let v249 = 0; v249 < 50; v249++) {
        Array(36862);
    }
    for (let v253 = 0; v253 < 5; v253++) {
        const o257 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o257);
    }
    try { f235.toString(); } catch (e) {}
    let v260;
    try { v260 = new f235(); } catch (e) {}
    v260[6] = v260;
    f235();
    %OptimizeFunctionOnNextCall(f235);
    let v263;
    try { v263 = v216["find"](..."find", a223, ...v211, ...v216, ...522675525n); } catch (e) {}
    v263 <= a222;
    return arguments;
}
f219(v211, v209, 522675525n, v209, 522675525n)[2];
4n * 4n;
0.8199829542463926 & 0.8199829542463926;
Uint8ClampedArray.name;
const o287 = {
};
class C288 {
}
const v289 = new C288();
function f290(a291, a292) {
    const o293 = {
        [a292]: v289,
    };
    return o293;
}
%PrepareFunctionForOptimization(f290);
-82.86062314585524 === -82.86062314585524;
function f295(a296, a297, a298, a299) {
}
f295(v217);
