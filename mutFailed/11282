function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -268435456;
    } catch(e3) {
    }
    try {
        this.c = -268435456;
    } catch(e4) {
    }
    try {
        this.d = -268435456;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 extends F0 {
    toString(a11, a12) {
        let v10 = this;
        v10 = a12;
        return F0;
        return v6;
    }
    constructor(a14) {
        super();
        try { a14(F0); } catch (e) {}
        this[Symbol.replace] = F0;
    }
}
const v18 = new C9(v6);
const v19 = new C9(v7);
new C9(v19);
class C21 {
    p(a23, a24) {
        super[C9];
        a24[Symbol.iterator] = v18;
        return v6;
    }
    [v18];
    1000 = C21;
    c = F0;
    f = F0;
    256 = v8;
}
new C21();
new C21();
new C21();
for (let v32 = 0; v32 < 5; v32++) {
    function f33() {
        const v35 = Array();
        v35[3] = v35;
        return v35.pop();
    }
    f33();
    %OptimizeFunctionOnNextCall(f33);
}
