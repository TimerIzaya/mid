let v0 = 6;
const v2 = new BigInt64Array(v0);
let v3 = 64;
let v4 = v3 | v3;
const v8 = Math.hypot(1);
let v9 = Math.pow(1, 995.6721021057779);
v9 + v9;
v3--;
const v13 = new Uint16Array(v3);
let v14;
try { v14 = v13.filter(BigInt64Array); } catch (e) {}
Uint8Array.e = Uint8Array;
new Uint8Array(9);
let v18 = 1318961106;
v18--;
const o28 = {
    "execution": "async",
    "type": "minor",
};
gc(o28);
654915120 !== 654915120;
({"byteOffset":v4,"f":v0,...v9} = v2);
v14[Symbol.species] = v8;
v2.buffer **= v3;
for (let v36 = 0; v36 < 5; v36++) {
    function f37() {
        try {
            Math.__proto__ = v13;
        } catch(e38) {
        }
        try { o28["getUint8"]("getUint8"); } catch (e) {}
        let v42 = ("Vre").codePointAt(v36);
        v42--;
        -(v42 ^ v42--);
        return f37;
    }
    f37();
    %OptimizeFunctionOnNextCall(f37);
}
