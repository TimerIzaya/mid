class C3 {
    127 = "byteOffset";
    #f;
    constructor(a5, a6) {
        try {
            this.e = this;
        } catch(e7) {
        }
        try {
            super.p(this, a5, this, -3.0, a5);
            class C9 {
                constructor(a11) {
                    const v12 = this.constructor;
                    try { new v12(); } catch (e) {}
                    const v15 = new Float32Array();
                    v15.entries();
                }
            }
            Symbol.toPrimitive.description.codePointAt(C9);
        } catch(e21) {
        }
        const v22 = [1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0];
        const v23 = v22.groupToMap;
        try { v23(v22, v23, v22, v22, v23); } catch (e) {}
        [4061];
    }
    #a = "byteOffset";
    static #c = "byteOffset";
}
const v27 = new C3("byteOffset", "byteOffset");
const v28 = new C3(-3.0, v27);
const v29 = new C3(v28, v28, v28, "byteOffset");
[0.3083488057663979,0.3083488057663979,0.3083488057663979];
const o33 = {
};
class C36 extends Uint8Array {
    constructor(a38, a39) {
        a38[1] = Float64Array;
        super(a38);
    }
}
new ReferenceError(25080);
([-7,-18455])["pop"]();
const v45 = new C36();
this.unescape(v45);
new Float32Array(2165, v29, "byteOffset");
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e53) {
    }
}
const v54 = new F51();
const v55 = [-768400.1657361139];
function F56(a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this.constructor;
    try { new v61(a59, a60); } catch (e) {}
    -v54;
    ([-Infinity,Infinity,959819.665748626])["concat"](v55);
    new BigInt64Array();
    const v69 = `
    `;
    const v70 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
    v70[5] = v70;
}
const v71 = new F56();
v71.constructor;
new Int32Array(2);
class C79 {
    static #m(a81) {
    }
    constructor(a83, a84) {
        function f85(a86) {
            return v28;
        }
        const o89 = {
            "type": "function",
        };
        new Worker(f85, o89);
    }
    n(a92) {
        this[a92] = 65535;
    }
}
