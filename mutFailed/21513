function f0() {
}
let v7 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
v7 &= v7;
const v9 = new WeakSet();
const o10 = {
    ...v9,
};
const v14 = new Int8Array(-1);
v14.buffer.slice();
const v18 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
for (let v19 = 0; v19 < 5; v19++) {
    v18["p" && v19] = v19;
}
class C23 {
    #p(a25, a26) {
    }
    constructor(a28) {
        let v29 = "atan2";
        try { a28[v29](); } catch (e) {}
        v29++;
    }
    /*
    constructor(a33, a34, a35, a36) {
        function f37(a38, a39) {
            const v42 = -Infinity;
            const v43 = +v42;
            isFinite.abs(v42);
            const v45 = ~f0;
            const v46 = f0 || v43;
            v9.d = v45;
            const v49 = [Worker];
            const o50 = {
                "arguments": v49,
                "POSITIVE_INFINITY": "function",
            };
            const v51 = v46 * v42;
            v43 ^ v45;
            isFinite.sin(v51);
        }
        function f54(a55, a56, a57, a58) {
            const v60 = new Map(a58);
            const v61 = v60.values();
            v61.next(a55, v61, a55, f54);
            return a56;
        }
        new Promise(f37);
    }
    */
}
const v65 = new C23(509.96183684423113, -14319, 65535, -1);
new C23(-2.220446049250313e-16, -2147483649, v65, -1);
new C23(-2.220446049250313e-16, 2147483647, -2147483649, 2147483647);
function f71(a72, a73, a74, a75) {
    let v76 = 9007199254740990;
    const v78 = (v76++).constructor;
    v78(v78).toFixed();
    for (const v82 in "1024") {
    }
    return f71;
}
for (let v83 = 0; v83 < 5; v83++) {
    f71();
}
%OptimizeFunctionOnNextCall(f71);
f71(f71, f71, f71, f71);
/(x)(x)(x)\1/uis.exec(Int16Array);
const v90 = new Uint8Array();
104 in v90;
