new Float32Array(44);
let v3 = 2224;
const v5 = new BigUint64Array(v3);
new Int8Array(7);
class C9 extends Int8Array {
    static {
        const v11 = new Int8Array(this, 44);
        Object.defineProperty(v11, 65535, { enumerable: true, value: v5 });
    }
    static 2812;
    static #c = v5;
    constructor(a13, a14, a15, a16) {
        super(a13, a13, a16);
        class C17 {
        }
        for (let v19 = 0; v19 < 25; v19++) {
            function f20(a21, a22, a23, a24) {
                for (let v25 = 0; v25 < 10; v25++) {
                    C17.__proto__ = Date;
                }
            }
            for (let v26 = 0; v26 < 5; v26++) {
                f20();
            }
        }
        v3 &&= a14;
    }
    static g = BigUint64Array;
}
new C9(v3, 44, 7, 7);
new C9(44, 44, 44, 7);
new C9(v3, v3, 44, v3);
for (let v31 = 0; v31 < 5; v31++) {
    for (let [i54, i55] = (() => {
            0 < 0;
            function F36(a38, a39) {
                if (!new.target) { throw 'must be called with new'; }
                a38.trimLeft().strike();
                const v42 = this.constructor;
                try { new v42("a", "a"); } catch (e) {}
            }
            new F36("a", "-2147483648");
            new WeakSet();
            class C49 {
                toString(a51) {
                    const t11 = super["bigint"];
                    t11[9] = 0;
                }
            }
            return [0, 10];
        })();
        (() => {
            function f56(a57) {
                return f56;
            }
            const v61 = [1.6484091400965863e+308,-689078.0330961384,-1.7976931348623157e+308,-160341.63249327452,127.17765342927578,1000.0,2.0,614.081171374098,NaN,3.82514727368617];
            const v62 = [-Infinity,0.32846642868810805,522897.9759496555,-Infinity,-1.7976931348623157e+308,Infinity,-91739.17504563625,-5.712078980390993,-4.0,-362.4687316307243];
            function f63(a64, a65, a66) {
                a64[2];
                a65 << a65;
                let v69;
                try { v69 = a64.lastIndexOf(v62); } catch (e) {}
                v69 / v69;
                try { a66.toString(); } catch (e) {}
                const o72 = {
                    [-4096]: -8717,
                    "d": a65,
                    __proto__: v62,
                    "a": a64,
                    "f": a64,
                    "h": a66,
                    "g": a66,
                    "e": a65,
                    1073741823: a65,
                    "b": a64,
                };
                return o72;
            }
            f63(v61, -4096, -17041);
            return i54 < i55;
        })();
        i54++) {
    }
    let v80 = 0;
    do {
        v80++;
    } while (v80 < 7)
}
