function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -9223372036854775807;
    } catch(e3) {
    }
    try {
        this.f = -9223372036854775807;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new v5();
function f8(a9, a10) {
    const o24 = {
        10: a9,
        __proto__: a9,
        "h": v5,
        0: a10,
        "d": a9,
        "a": v6,
        set b(a12) {
            a9.iterator;
            const o23 = {
                [this]() {
                    let v16 = 10;
                    const o22 = {
                        next() {
                            v16--;
                            const v20 = v16 == 0;
                            const o21 = {
                                "done": v20,
                                "value": v16,
                            };
                            return o21;
                        },
                    };
                    return o22;
                },
            };
        },
    };
    return o24;
}
f8(v7, f8);
f8(v7, f8(v5, v7));
new v5(10);
new Int16Array(10);
new Int16Array(0);
const v38 = new Int16Array();
const v40 = new BigInt64Array();
function f41(a42, a43, a44, a45) {
    v40[9] = v38;
    return a43;
}
%PrepareFunctionForOptimization(f41);
f41();
%OptimizeFunctionOnNextCall(f41);
f41();
