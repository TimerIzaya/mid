const v0 = [1092005986,-1];
const v1 = [15510,1073741824,38051,-739772679,840676462,-2147483649,1024,536870889,4294967296,-1875560017];
const v2 = [482457535,6,1073741824,1073741824,1073741824,0,63932,25150,-2147483648,-4];
let v3 = "1024";
let v4 = ~v1;
v3[v1] >>= v4;
let v8 = 1761442671 + -2.220446049250313e-16;
let v9 = v8++;
let v10 = v8 && v3;
const v11 = v10 << v8;
(-2.220446049250313e-16) ** v3++;
function f16() {
    return v1;
}
let v18 = 20701;
v18 /= v11;
[,v9,v4,v10] = v1;
v4 * v18;
Object.defineProperty(v2, "f", { set: f16 });
const o23 = {
    "execution": "async",
    "type": "minor",
};
gc(o23);
class C26 extends f16 {
    constructor(a28, a29, a30, a31) {
        super();
        let v32 = 0;
        do {
            super[v0];
            v3[6] = a30[v18];
            v32++;
        } while (v32 < 2)
    }
}
new C26("1", 512, v3, v18);
new C26(f16, 512, "d", v18);
new C26(C26, v18, "d", -12);
const v42 = new Float32Array(Float32Array);
for (let v43 = 0; v43 < 25; v43++) {
    function f44(a45, a46, a47, a48) {
        a45[1];
        a46--;
        a45[0] = a45;
        a46 <= a46;
        arguments[1] = arguments;
        const v53 = arguments?.__lookupGetter__;
        try { v53.constructor(); } catch (e) {}
        let v55;
        try { v55 = v53(v53, f44, a46, arguments); } catch (e) {}
        return v55;
    }
    for (let v56 = 0; v56 < 10; v56++) {
        f44(v42);
    }
}
