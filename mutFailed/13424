new Float64Array(11);
let v6 = 1000;
gc();
function F10(a12) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
new BigUint64Array(v6);
const v23 = new BigUint64Array(1359);
function f24() {
    class C26 {
        [null];
    }
    const v29 = new Float32Array();
    function F30() {
        if (!new.target) { throw 'must be called with new'; }
        const v33 = gc();
        try {
            v33.c = 1489843090;
        } catch(e34) {
        }
        try {
            this.g = 1489843090;
        } catch(e35) {
        }
    }
    Float64Array + gc;
    let v38 = -2;
    let v39 = 38.879773866071446;
    Math.random();
    v38++;
    const v42 = ++v6;
    const v43 = v6++;
    const v44 = v39++;
    v42 ^ v39;
    v43 << v42;
    const v47 = new F30();
    const v48 = new F30();
    v48.g = v48;
    function F49(a51) {
        if (!new.target) { throw 'must be called with new'; }
        a51.g;
        try {
            this.a = v47;
        } catch(e53) {
        }
    }
    const v54 = new F49(v48);
    v54.a = v42;
    v29[v44](..."-11838");
    for (let v57 = 0; v57 < 5; v57++) {
        function F59(a61, a62, a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F67(a69, a70) {
            if (!new.target) { throw 'must be called with new'; }
            a69 % a69;
            a70 >>> a70;
            const v73 = BigUint64Array.constructor;
            try { new v73(0.8735699512350641, -3.413527541634011e+307); } catch (e) {}
        }
        function F76(a78, a79, a80, a81) {
            if (!new.target) { throw 'must be called with new'; }
            const v82 = ("copyWithin").constructor;
            try { new v82(a78, a78); } catch (e) {}
            a79.isPrototypeOf();
        }
        new F76("HkAXC", "toStringTag");
        new Float32Array(Float32Array, 4061);
        function F89() {
            if (!new.target) { throw 'must be called with new'; }
            const v92 = -(-7);
            v92 ** v92;
        }
    }
    return v23;
}
%PrepareFunctionForOptimization(f24);
f24();
function f96() {
    return Float64Array;
}
try {
    new f96();
} catch(e98) {
}
%OptimizeFunctionOnNextCall(f24);
const o99 = {
};
const o100 = {
    "maxByteLength": 11,
};
f24();
