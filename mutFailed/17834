const v1 = -Infinity;
class C3 {
    constructor(a5) {
        a5[a5] = this;
        let v6;
        try { v6 = a5(-709911.1973349254, a5, v1); } catch (e) {}
        try { a5.getFloat64(this, v6, this, v1); } catch (e) {}
        a5 / -709911.1973349254;
        v6?.c;
    }
    a = -709911.1973349254;
    static 134 = 256;
    d;
}
const v10 = new C3(-709911.1973349254);
const v11 = new C3(v1);
new C3(v11);
class C13 {
    static valueOf(a15, a16) {
        const o17 = {
        };
        try {
            o17.g = this;
        } catch(e18) {
        }
        try {
            const o19 = {
            };
            o19.g = this;
            o19.b = this;
        } catch(e20) {
        }
        try {
            const o21 = {
            };
            o21.g = this;
            o21.b = this;
            o21.f = v10;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.g = this;
            o23.b = this;
            o23.f = 256;
        } catch(e24) {
        }
        return 256;
    }
}
new C13();
new C13();
new C13();
new BigInt64Array(15);
const o35 = {
    m(a34) {
        return a34;
    },
    __proto__: 946.0676210033328,
};
const v37 = new Uint8ClampedArray(16);
const v40 = new Int16Array(8);
for (const v41 in v37) {
    delete v40?.buffer;
    new Int16Array(7);
    new Float32Array(2801);
    new Uint8ClampedArray(3070);
}
const v54 = new Array(3457);
const v55 = [0.0,1000000000.0,-9.821086765219384e+307,-858.0794579951759];
const v56 = [-2.0,-1.5384788741465538,-2.0];
const v57 = [0.9388990264144315,-1e-15,-1.0,841561.2554243801];
class C58 {
    static a;
    n(a60, a61) {
        try { a61["push"](...v55, ...a61, ...v55, ...v56, ...this); } catch (e) {}
        for (let v64 = 0; v64 < 32; v64++) {
            v54["p" + v64] = v64;
        }
        return "push";
    }
    static b;
    static m(a68) {
        try { new a68(this, this, v55, this); } catch (e) {}
        v55 < v57;
        const o71 = {
        };
        new Proxy(this, o71);
        return v57;
    }
    static #a = 3457;
    static [v54];
    #h;
    static [v57] = BigInt64Array;
    static #g;
}
new C58();
let v75 = new C58();
const v76 = v75?.constructor;
try { new v76(); } catch (e) {}
new C58();
const v82 = Array["of"](C58, C58);
try {
    v54.pop();
} catch(e84) {
}
Float64Array.e = Float64Array;
new Float64Array(257);
const v88 = new Uint32Array(6);
function F91() {
    if (!new.target) { throw 'must be called with new'; }
}
const v93 = new F91();
const v94 = [F91,F91,F91];
function f95(a96) {
    try {
        v94.some();
    } catch(e98) {
        e98.stack;
    }
    return a96;
}
v94.toString = f95;
const o101 = {
    __proto__: v94,
    "e": v93,
    get a() {
        return this;
    },
};
const v102 = new Float32Array(706);
try { v102.every(Uint32Array); } catch (e) {}
class C104 {
}
const v106 = Symbol.toPrimitive;
C104[v106] = f95;
function F107() {
    if (!new.target) { throw 'must be called with new'; }
}
F107.a = F107;
const v109 = new F107();
v109.constructor = f95;
const o110 = {
};
try {
    const v113 = new Int32Array(12);
    for (const v114 in v113) {
    }
} catch(e115) {
}
const v116 = v109?.constructor;
v75 |= o101;
Symbol(v82);
try { v88.slice(16, 257); } catch (e) {}
try { v106.o(16, v93); } catch (e) {}
delete v37[56];
try { new v116(); } catch (e) {}
const v122 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v124 = 9007199254740991n * 9007199254740991n;
v124--;
for (let v126 = 0; v126 < 5; v126++) {
    function f127() {
        for (let v128 = 0; v128 < 5; v128++) {
            "p" == "p";
            try { ("p").substring(C104, C104); } catch (e) {}
        }
        try {
            function f132(a133, a134) {
                f95(o35);
                return v75;
            }
            f132(6, 9007199254740991n);
            v122.forEach();
            const v139 = /efoo(?=bar)baz/usy;
            /\1112/d;
            /(ab)6a(?:b)/gvd;
            try { arguments["every"]("every", v139); } catch (e) {}
        } catch(e144) {
            e144.a = 706;
            e144.a = v109;
            let v145 = [-14,13665,14];
            [-256,-59478,4294967296,1073741825,1000];
            const v147 = [-1];
            try {
                v147.valueOf = Symbol;
            } catch(e148) {
                let v150 = 6;
                v150 >>> v150;
                let v153 = --v145;
                v150++;
                --v153;
                Math.sign(-9);
            }
            e144.a = e144;
        }
        const v158 = ("stack").trimStart();
        for (let v159 = 0; v159 < 5; v159++) {
            function f160() {
                v158.length;
                return v158;
            }
            f160.call();
            %OptimizeFunctionOnNextCall(f160);
        }
        const v164 = ("1073741824").constructor;
        v164.name = v164;
        function F165() {
            if (!new.target) { throw 'must be called with new'; }
            function f167(a168) {
                Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
            }
        }
        const v171 = v164(v124);
        try { v171.replaceAll(6, v75); } catch (e) {}
        return "1073741824";
    }
    f127();
    %OptimizeFunctionOnNextCall(f127);
}
