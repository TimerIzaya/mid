let v1 = 1687918654;
class C3 {
    static o(a5) {
        ("c")?.toLocaleUpperCase;
        ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
        try {
            a5.d = v1;
            this.write();
            function F14() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v17 = new F14();
            const v18 = super["c"];
            try {
                v17.f = v18;
            } catch(e19) {
            }
        } catch(e20) {
        }
        return this;
    }
    static 9 = 217667426;
    [217667426] = "copyWithin";
    static [217667426];
}
try { new C3(); } catch (e) {}
const t26 = "copyWithin";
const v22 = new t26();
class C24 {
}
try { C24.apply(C24, C3); } catch (e) {}
try {
const t0 = "copyWithin";
t0(...217667426, "e", v22, v22, ...C24);
} catch (e) {}
async function f27(a28, a29) {
    class C30 {
        [C30] = v1;
    }
    return a28;
}
f27();
const v32 = new C3();
v32[217667426];
const v34 = new C3();
const v36 = 2147483649 % 2147483649;
const v39 = Uint32Array.toString();
try { v39.toLocaleLowerCase(); } catch (e) {}
v39.normalize();
const v42 = v36[31];
Uint8ClampedArray.name = Uint8ClampedArray;
const v45 = [Uint8ClampedArray];
Reflect.construct(Uint8ClampedArray, v45)[1];
function f49() {
    return ("D")[0].substring().charCodeAt();
}
let v54;
try {
const t0 = -14;
v54 = t0();
} catch (e) {}
3011 >= 3011;
function F59(a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(a63, v45, a61); } catch (e) {}
    a61 + a61;
}
const v66 = new F59(3011, Uint8ClampedArray, F59);
const v67 = v1--;
v67 + v67;
const v69 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v69.includes(v69); } catch (e) {}
function f72() {
    const v74 = -4294967295 != -4294967295;
    v74 && v74;
    const v76 = v69.length;
    const v78 = !(v76 < v76);
    v78 && v78;
    !(v54 && v78);
    const o89 = {
        [-4294967297n](a83, a84, a85, a86) {
            eval();
        },
    };
    return 217667426;
}
try { f72(); } catch (e) {}
f72();
%OptimizeFunctionOnNextCall(f72);
v66.constructor = Date;
const t90 = C24.constructor;
new t90(v66, Uint8ClampedArray, 3011);
try { v42.setUTCMinutes(v34, -14, v34); } catch (e) {}
