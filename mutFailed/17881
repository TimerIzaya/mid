function f0() {
    async function f1(a2, a3, a4) {
        return a4;
    }
    let v5 = 12;
    v5++;
    return BigInt64Array;
    class C11 {
    }
    class C13 extends Date {
    }
    const v14 = new C13();
    v14.setMonth(C11, C13);
    v14.setUTCSeconds();
    const o20 = {
        "e": -2147483647,
        "a": -1e-15,
        m(a18) {
            return Date;
        },
        ..."valueOf",
        1024: -1e-15,
        ..."valueOf",
        next() {
            return this;
        },
        "b": -1e-15,
        268435441: -2147483647,
        "c": "valueOf",
        ["valueOf"]: -2147483647,
        ..."valueOf",
        "g": "valueOf",
        __proto__: "valueOf",
        ..."valueOf",
    };
    return o20;
}
function F21(a23) {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = this.constructor;
    v24.prototype;
    v24.caller = v24;
    try { new v24(); } catch (e) {}
}
const v27 = f0();
const v28 = f0();
const v29 = f0();
class C33 {
    #b;
    constructor(a35, a36, a37, a38) {
        Object.defineProperty(v27, a38, { writable: true, configurable: true, get: f0 });
        try { a38.trim(a36, a38, this, this, a35); } catch (e) {}
        try { a37(a36, "keyFor"); } catch (e) {}
        try {
            a38.#b = v28;
        } catch(e41) {
        }
    }
    /*
    constructor(a43) {
        typeof arguments;
    }
    */
    static f = v27;
}
new C33("e", "keyFor", "e", v27);
new C33("keyFor", "e", v27, v29);
new C33("keyFor", "keyFor", "boolean", v27);
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    a55 % a55;
    a56 >>> a56;
    const v59 = this.constructor;
    try { new v59(0.8735699512350641); } catch (e) {}
    this.c = a55;
    this.g = a56;
}
new F53(-3.413527541634011e+307, 0.941857606566444);
const v62 = new F53(F53, 0.941857606566444);
new F53(0.941857606566444, 0.941857606566444, 0.941857606566444, v62, v62);
class C64 {
}
const v67 = Math.log1p(-4.600007534268795);
v67 + v67;
