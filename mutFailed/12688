new Int16Array(1);
function f7(a8, a9) {
    a8[211] = a9;
    const v10 = /[r(?<!)]/uim;
    const t4 = [0.0,-2.0,-4.4315495470280674e+307,2.220446049250313e-16,1.176246364365651e+307,-6.320855532259336e+307,2.0];
    t4[6] = v10;
    return 3;
}
Uint8Array[Symbol.toPrimitive] = f7;
function f14(a15, a16, a17, a18) {
    3 | a16;
    const v20 = a15 / a15;
    const v21 = a16 < a15;
    let v22 = a17 >>> a17;
    v22++;
    const o27 = {
        n(a25, a26) {
            return v21;
        },
    };
    return v20;
}
for (let v28 = 0; v28 < 625; v28++) {
    f14(Uint8Array, 2);
}
const v34 = [];
v34[Symbol.toPrimitive] = f7;
-v34 && v34;
Math.tanh();
new Int8Array(118);
new Uint8Array(257);
new Uint16Array(128);
function f51() {
    function F52(a54) {
        if (!new.target) { throw 'must be called with new'; }
        const v55 = this.constructor;
        function f56(a57, a58) {
            return a57;
        }
        f56();
        function f61(a62, a63, a64, a65) {
            return -261.99102172609366;
        }
        v55.prototype;
        ("replace").slice(9);
        const o74 = {
            ...undefined,
            get e() {
                return undefined;
            },
        };
        try { new v55(); } catch (e) {}
    }
    const v76 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f77(a78, a79, a80, a81) {
        try {
            f77(true);
        } catch(e84) {
        }
        const v85 = /(?:a*)+q(?<a>.)/guds;
        for (let i88 = 0, i89 = 10; i88 < i89; i89--) {
            v76.constructor.isArray(v85);
        }
        return v85;
    }
    const v98 = new F52(F52);
    new F52(v98);
    const v102 = new Uint8ClampedArray(118);
    v102[7] = 43464885;
    v102.fill(512, 66);
    v102[-1] = 10;
    function f108(a109, a110, a111, a112) {
        Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: 43464885 });
        arguments[4] = arguments;
        return f108;
    }
    return f51;
}
const v115 = new WeakSet();
v115.delete(WeakSet);
function f117() {
    return f117;
}
Object.defineProperty(f117, "valueOf", { configurable: true, enumerable: true, value: Symbol });
Date.valueOf = Symbol;
const v119 = new Date(f117);
v119.setUTCMilliseconds(Date);
%PrepareFunctionForOptimization(f51);
const v121 = f51();
%OptimizeFunctionOnNextCall(f51);
v121();
