const v4 = new Uint8Array(555);
new Uint32Array(4);
const v10 = new BigInt64Array(9);
let v11;
try { v11 = v10(Uint32Array, v10, v10, 555); } catch (e) {}
const v12 = delete v4?.byteLength;
const v13 = v11 >> null;
try {
    v4.length = v13;
} catch(e14) {
}
[0.583831368060112,1e-15,Infinity,1000.0,-1.0,0.5175660662362078];
[-786.531159488097,1.6567665053357359e+308,1000000000.0,2.2250738585072014e-308,130.41898335802261,-836449.2645660961,-354471.0574776238];
[1.0,1.0,1.3420220346433594e+308,-9.190251561142258];
const v20 = ("h").split();
const o58 = {
    [null]() {
        const v22 = super.b;
        const v24 = [];
        if (v22) {
            try { v10.copyWithin(555, 555, 9); } catch (e) {}
        } else {
        }
        const v29 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
        class C30 {
            constructor(a32, a33) {
                const v34 = a33[2];
                const v35 = /W(jy2)/udy;
                function f36(a37, a38) {
                    try { a38["valueOf"]("valueOf", this); } catch (e) {}
                    return v12;
                }
                v35[Symbol.iterator] = f36;
                const v44 = new Uint8Array();
                for (let v45 = 0; v45 < 500; v45++) {
                    const o49 = {
                        ...v44,
                        n(a47, a48) {
                        },
                    };
                }
                for (let v50 = 0; v50 < 5; v50++) {
                    v29[v34];
                    const v53 = new BigInt64Array(v35, 9, 555);
                    0.3083488057663979 || v53;
                    continue;
                    v20["p" + v50] = v50;
                }
            }
        }
        new C30(v24, v29);
    },
};
o58.null();
o58.null();
