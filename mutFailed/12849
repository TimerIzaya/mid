const v1 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
v1.g = v1;
v1.push(v1);
const v6 = new Int8Array(1024);
Reflect.construct(Uint8Array, [v6]);
const v14 = new BigUint64Array(10);
for (const v16 in v14) {
    new Float64Array(2147483647);
}
class C19 {
    constructor(a21) {
        a21.b >>= a21;
        const v27 = Symbol.iterator;
        Math[v27] = v27;
        function f28() {
            return f28;
        }
        const v29 = /{}(x)(x)(x)\4*a{0}a|b/msy;
        const v31 = new BigUint64Array();
        function F32(a34, a35, a36) {
            if (!new.target) { throw 'must be called with new'; }
            const v37 = this.constructor;
            try { new v37(BigUint64Array, v31, v31); } catch (e) {}
            a36[1];
            function f41(a42, a43) {
                a43 / a43;
                arguments[1];
                arguments.toString = a42;
            }
            try { f41(f28, v29); } catch (e) {}
            f41(v37, 8077n);
        }
        const v49 = new F32(BigUint64Array, 4, v31);
        v49.constructor;
    }
    [1.6185999233128623] = "Zd";
    static #g;
    #b;
    #g = 1.6185999233128623;
    h = -9.878643046706213;
    static #a = 1.6185999233128623;
}
const v51 = new C19(-9.878643046706213);
new C19(v51);
new C19(v51);
new Date();
for (let v60 = 0; v60 < 5; v60++) {
    for (const v61 in "toString") {
        function f62() {
            function f63(a64, a65) {
                return f62;
            }
            const v67 = new Promise(f63);
            v67.then(f62, f63);
            return v67;
        }
    }
    class C69 {
    }
    const v70 = new C69();
    const v71 = Reflect?.constructor;
    try { new v71(v60, v70); } catch (e) {}
}
try {
    undefined.fuck();
} catch(e75) {
}
