const v2 = new Uint8Array(4096);
1 >> 1;
const v6 = new Uint16Array(1);
v6[0] = v6;
const v9 = new String(2900);
class C10 extends Uint8Array {
    n(a12, a13, a14, a15) {
        try { a13.slice(2900, 2900); } catch (e) {}
        try { a14.n(a14, a14, a12, v9); } catch (e) {}
        try { v2(4096, Uint16Array); } catch (e) {}
        -(-2n);
        return Uint16Array;
    }
    static {
    }
    536870887;
    static a;
    g = 1;
    #f;
    #e = v6;
}
C10.prototype = C10;
let v24;
try { v24 = C10.of(); } catch (e) {}
try { v24.findLastIndex(1); } catch (e) {}
new C10();
const v27 = new C10();
const v28 = new C10();
let v29;
try { v29 = v28.n(Uint8Array, v28, v27, String); } catch (e) {}
2 >> 2;
const v33 = new Uint8Array(2, 2, 2);
try { v33.join(v29); } catch (e) {}
let v36;
try { v36 = new URIError(1, C10, 2900); } catch (e) {}
v36.g = v36;
const v37 = new URIError();
try { v37.entries(); } catch (e) {}
function f39(a40, a41, a42, a43) {
    try { new a40(a40, a43, a40); } catch (e) {}
    try { a40(a41, a43, a42); } catch (e) {}
    const o49 = {
        "b": a40,
        ...v33,
        n(a47, a48) {
            v37[a40] = v37;
        },
    };
    o49[1];
    return v37;
}
for (let v51 = 0; v51 < 625; v51++) {
    f39(Uint8Array, 2, v51);
}
const v54 = Math?.round;
try { new v54(Uint16Array); } catch (e) {}
try { Math.fround(v37); } catch (e) {}
