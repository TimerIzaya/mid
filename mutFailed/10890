-516066766n ^ -516066766n;
let v7 = -2147483647;
v7--;
let v9 = 16;
v9--;
const v12 = [129,-4294967295,3];
[-27181,536870888,-65535,1073741823,128,-8,1306307558];
const v14 = [1000,-1434238763,4033,5];
v14.g = v14;
let v16 = 0.9509347647729306;
v16++;
const v19 = [3.0,995712.1638139696,-2.0,1.6391533955732946e+308,1000000.0];
try { v19.map(v16); } catch (e) {}
[1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
0.2037963153987472 * 0.2037963153987472;
const v26 = [];
new Int8Array(3938);
new Int8Array(3938);
[];
const v33 = [0.0,-1000.0,2.557943047142931];
try { v33.entries(); } catch (e) {}
for (let v35 = 0; v35 < 5; v35++) {
    function f36() {
        return v12.length;
    }
    f36();
    %OptimizeFunctionOnNextCall(f36);
}
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
1000000000.0 >>> 1000000000.0;
const v46 = /((?<=a))/gudm;
const v47 = /gk4b*/vmsy;
let v49;
try {
const t0 = -1.3832922122240728e+307;
v49 = t0(2);
} catch (e) {}
for (let v50 = 0; v50 < 5; v50++) {
    v50 < 1;
    try { v49(v46, v50, v47, v50, -4); } catch (e) {}
    const v55 = Symbol.iterator;
    const o59 = {
        [v55]() {
            const o58 = {
                next() {
                    return v47;
                },
            };
        },
    };
}
for (let v60 = 0; v60 < 5; v60++) {
    v33.valueOf = v60;
}
2.2250738585072014e-308 >> 2.2250738585072014e-308;
const v66 = new Date();
const v68 = new Set();
(2).add(v66);
let [v70,,...v71] = v68;
let v74 = 0;
v26.f = v26;
v74++;
const v77 = v74 < 4;
v77 && v77;
[256,54026];
const v82 = new Float64Array();
function f83() {
    for (let v84 = 0; v84 < 10; v84++) {
        const v86 = Math.expm1(v82);
        v86 >> v86;
    }
}
f83();
Math.hypot();
2183 >> 2183;
const o95 = {
    "execution": "async",
    "type": "minor",
};
gc(o95);
const v98 = new Int16Array();
8 + 8;
const v104 = new Int16Array(8);
parseFloat.name;
async function f107(a108, a109, a110) {
    a108--;
    a110 ^ a110;
    delete v104[-1000000000.0];
    try {
        const o114 = {
        };
    } catch(e115) {
        function f116(a117, a118, a119, a120) {
            const o124 = {
                n(a122, a123) {
                },
            };
        }
    }
    v98[0];
    const v126 = v98[1];
    let [,,...v127] = v98;
    await v126;
}
f107(8, 8, 948737.12760097);
class C132 {
    static #m(a134) {
    }
    set d(a136) {
        this.#m();
    }
    constructor(a139) {
        function f140() {
            return f140;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f140 });
    }
}
const v141 = new C132("string");
v141.length = -4294967296;
