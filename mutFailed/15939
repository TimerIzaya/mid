class C3 {
    h;
    c;
    static n(a5) {
        const v6 = super[this];
        const v8 = ("iterator")["padStart"](..."-4294967295", ..."-4294967295", ..."-4294967295", ..."padStart");
        function f9(a10) {
            return a10;
        }
        class C11 extends v6 {
            static [v8];
        }
        return f9;
    }
    static #a = "iterator";
}
const v12 = new C3();
const v13 = new C3();
const v14 = new v12();
const v16 = new WeakMap();
try { v16.set(v12, 3.0); } catch (e) {}
const v20 = new Float64Array(127);
const v21 = ("-4294967295")[1672];
let v22;
try { v22 = ("iterator").replace(v21, v21); } catch (e) {}
try { v22.localeCompare(Float64Array); } catch (e) {}
const v25 = new String(v22);
v16 in v25;
const v27 = v20[31];
v27 + v27;
const v31 = new Uint16Array(484);
v31[304] = v31;
try {
    let v32 = -2.2250738585072014e-308;
    v32++;
    -907391.9828614459 - -907391.9828614459;
} catch(e37) {
    let v39 = -128;
    v14 ^ v39--;
    Math.acosh(v14);
} finally {
    let {"a":v43,"b":v44,"g":v45,} = Float64Array;
}
127 - 0;
Uint16Array.b = Uint16Array;
new Uint16Array(0);
let v50 = 9;
v50++;
try { new Uint8ClampedArray(v13, "iterator", v12); } catch (e) {}
try { new Uint8ClampedArray(v50, v20, v50); } catch (e) {}
const v55 = new Uint8ClampedArray(v50);
try { BigInt64Array.from(v55); } catch (e) {}
