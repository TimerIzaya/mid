const v2 = new Int16Array(40);
new Float32Array(129);
const v8 = new Uint8ClampedArray(7);
function f9() {
    return v8;
}
function f10(a11, a12, a13, a14) {
    const o26 = {
        [Int16Array]: v8,
        [v2](a16, a17, a18, a19) {
            for (let v20 = 0; v20 < 33; v20++) {
            }
            try { v8.every(...a13, a19, a14, a17, ...a18); } catch (e) {}
            return v2;
        },
        "d": a12,
        "c": a12,
    };
    return o26;
}
const v28 = f10(7, 129, 129, f10(40, 40, 7, 129));
v28(129, 129, 40, v28);
const v30 = [837449509,1,0,28677,-1493785230,14423,536870887,1395954475,1096550133];
const v31 = [-7,-5,-10,7];
function F32(a34) {
    if (!new.target) { throw 'must be called with new'; }
    new Uint8Array();
}
const v38 = new F32(v30);
const v39 = new F32(v30);
try {
    const v42 = new BigUint64Array(4);
    [v42];
} catch(e44) {
}
try {
    const o45 = {
    };
} catch(e46) {
}
try {
    const o47 = {
    };
} catch(e48) {
}
try {
    const o49 = {
    };
} catch(e50) {
}
const v51 = new F32(v30);
class C52 extends F32 {
    static valueOf(a54, a55, a56, a57) {
    }
    [v39] = v31;
    [v30] = v30;
    [v38] = v51;
}
const v58 = /2a\sc/uds;
function f59() {
    try { v58.test(v58); } catch (e) {}
}
v58[(7).toPrimitive] = f59;
const o65 = {
    [v58](a64) {
    },
};
