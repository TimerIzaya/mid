function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    const v3 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F4(a6, a7, a8, a9) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v10 = new F4(v3, F1, v3, F4);
    const v12 = [F1,F1,F1,F1];
    Reflect.apply(v3.indexOf, v10, v12);
}
const v16 = new Map();
function F17(a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a19;
    } catch(e20) {
        try {
            this.e = f0;
        } catch(e21) {
        }
        const v23 = new Map();
        v23.keys();
    }
    try {
        this.b = f0;
    } catch(e25) {
    }
    try {
        const v26 = [];
        function f27() {
            const o29 = {
                p() {
                    return f27;
                },
                [v26]: v26,
                "a": v26,
            };
            return v26;
        }
        const v30 = f27();
        const v31 = f27();
        f27();
        const v35 = new Uint8ClampedArray(0);
        const v38 = new BigInt64Array(218);
        let v39;
        try { v39 = v38.sort(f27); } catch (e) {}
        try { v39(v31, v39, v39, ...v35, v30, ...v30); } catch (e) {}
        this.d = a19;
        const o42 = {
            "c": 2.0,
        };
        function F43(a45) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v46 = new F43(o42);
        with (o42) {
            const v47 = [];
            function f48() {
                return v47;
            }
            class C49 extends f48 {
            }
            const v50 = new C49();
            v50.length = 10;
            try { v46.search(c); } catch (e) {}
        }
    } catch(e54) {
    }
}
const v55 = new F17(v16);
new F17(Map);
new F17(v55);
class C58 {
    static [v55];
    get c() {
        try {
            v55.valueOf = f0;
        } catch(e60) {
        }
        return F17;
    }
    c;
    [f0] = v16;
    48 = f0;
}
const v61 = new C58();
new C58();
const v65 = Math.atanh(9007199254740992);
const v68 = new Float32Array(5);
const v71 = new Uint8Array(1759);
const o72 = {
    ...v68,
    ...v71,
};
new C58();
function F75(a77) {
    if (!new.target) { throw 'must be called with new'; }
    const v78 = this.constructor;
    try { new v78(); } catch (e) {}
    try {
        -35199 % (this / -1478256740);
    } catch(e83) {
    }
}
const v84 = new F75();
new F75(v84);
function f86() {
    return f86;
}
const v88 = Math;
new Map(v61);
try { v61.p(v65); } catch (e) {}
try { v88.fround(Float32Array); } catch (e) {}
[-114.1494437744251,1.1157581664696057e+308,-1e-15,536171.7444973304,0.4259155199882937,1.552166608481384e+308,2.220446049250313e-16];
[1000000000.0,-1000000000000.0,418208.38721218845,-2.9335237453312646e+307];
[-676.4368515086594,-212.27599811566654,-2.2250738585072014e-308,1000000000000.0,-4.0,0.9614245336688719];
Array(1000).indexOf(Array);
