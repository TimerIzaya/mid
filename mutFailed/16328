class C3 {
    static {
        function f5() {
        }
        const v6 = f5();
        let v7 = -1024;
        v7 >> v7;
        const v9 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function F10(a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C14 {
        }
        -4294967297n ^ -4294967297n;
        const v17 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v18 = [601759695];
        522675525n * 522675525n;
        for (let v21 = 0; v21 < 5; v21++) {
            function f22() {
                try { ("Vre").toWellFormed(); } catch (e) {}
                try { ("Vre").strike(); } catch (e) {}
                let v29;
                try { v29 = Array.from(Array); } catch (e) {}
                const v30 = v29?.filter;
                try { new v30(0.9701628086626972); } catch (e) {}
                const v33 = Array().unshift();
                const v35 = new Set();
                let v36;
                try { v36 = v35.add(-4294967297n); } catch (e) {}
                try { v36.add("Vre"); } catch (e) {}
                function F38(a40, a41) {
                    if (!new.target) { throw 'must be called with new'; }
                    F38();
                }
                try {
                    v9.forEach(Float64Array);
                } catch(e44) {
                    e44.stack = e44;
                    e44.b = e44;
                }
                class C46 {
                }
                const v47 = new C46();
                try {
                    v47.__proto__ = F10;
                } catch(e48) {
                }
                const v49 = Symbol.toPrimitive;
                Symbol.for(v49.description);
                const o56 = {
                    toString(a54, a55) {
                    },
                };
                let v57;
                try { v57 = o56.toString(v33, v6); } catch (e) {}
                let v58 = -268435456;
                v58--;
                const o79 = {
                    [522675525n](a61, a62) {
                    },
                    "c": v18,
                    valueOf(a64, a65) {
                    },
                    [-4294967297n](a67, a68, a69, a70) {
                    },
                    "e": v58,
                    "maxByteLength": -4294967295,
                    "arguments": v17,
                    ..."species",
                    [v49]() {
                    },
                    "type": C14,
                    valueOf(a73, a74) {
                    },
                    4: "Vre",
                    toString(a76, a77, a78) {
                    },
                };
                const v80 = o79[522675525];
                try { new v80(v36, v36); } catch (e) {}
                Float32Array.name = Float32Array;
                new Float32Array();
                272822757 - 272822757;
                const v87 = [272822757];
                try { v87.sort(C46); } catch (e) {}
                let v89;
                try { v89 = v87.toLocaleString(); } catch (e) {}
                try { v89.codePointAt(v57); } catch (e) {}
                const v91 = [-2.0,272822757];
                const o92 = {
                    __proto__: v91,
                };
                v7 %= v58;
                return v49;
            }
            f22();
            try { new this(v17); } catch (e) {}
            %OptimizeFunctionOnNextCall(f22);
        }
        ("species")[0.9701628086626972];
        -31378 != -31378;
        try { Math.abs(0.9701628086626972); } catch (e) {}
        9 + 9;
        +"species";
        const v103 = 0.9701628086626972 || -31378;
        const v104 = [];
        try { v104.toSpliced(C3, v17); } catch (e) {}
        try { v104.with(v104, v104); } catch (e) {}
        Float32Array.name;
        const v111 = new Float32Array(3562);
        v111[2575] = v111;
        v111.lastIndexOf(-128);
        Math.sign(-31378);
        Float32Array.length = Float32Array;
        const v116 = new Float32Array();
        function f117() {
            const o121 = {
                "e": 1.0,
                __proto__: v116,
                [-13]: 1.0,
                set b(a120) {
                },
            };
            o121.b = o121;
            return v116;
        }
        Math.round("species");
        -Math.abs("species");
        const v125 = ~v103;
        v125 <= v125;
    }
    static f;
    static #a;
    ["species"] = C3;
    [-31378];
    [-2] = -31378;
    static ["species"] = "species";
    static #f;
    static [-31378];
    constructor(a128) {
    }
    toString(a130, a131) {
        super.g = "species";
    }
}
try { new C3("species"); } catch (e) {}
const v133 = new C3();
const v134 = v133?.species;
try { new v134(C3); } catch (e) {}
new C3();
const v137 = [];
function f138(a139) {
    try {
        v137.some();
    } catch(e141) {
        e141.f = e141;
        const v142 = e141.stack;
        try { v142.bold(); } catch (e) {}
    }
    return a139;
}
f138(f138);
v137.toString = f138;
const o146 = {
    __proto__: v137,
    [v137]() {
    },
};
try { o146.entries(); } catch (e) {}
o146.toString(f138);
new C3();
-9223372036854775808 - -9223372036854775808;
function f153() {
    return f153;
}
5n <= 5n;
const v158 = new Uint16Array(3225);
for (const v159 of v158) {
    ~v159;
    v159[3] = 5n;
    9007199254740991 * v159;
}
const v165 = WeakMap?.constructor;
try { new v165(f153); } catch (e) {}
new WeakMap();
const v171 = [4096,v133,v133];
Object.defineProperty(v171, 1, { writable: true, enumerable: true, value: v171 });
v171.push("species", "species", -31378);
