new Float64Array(8);
new Uint16Array(7);
const v8 = new Int32Array(855);
function f9(a10, a11, a12) {
    a10--;
    const o21 = {
        "g": 7,
        8: 7,
        [Float64Array]: a11,
        __proto__: v8,
        "c": 8,
        512: 855,
        "h": 8,
        2655555256: a12,
        "f": Uint16Array,
        get d() {
            Math.atanh(a12);
            Math.min(-65537);
            -65537 + -3.0;
            return -3.0;
        },
    };
    return o21;
}
const v22 = f9(7, 8, 7);
const v23 = f9(8, 8, 7);
try { v23.toString(); } catch (e) {}
f9(855, 8, 855);
new Uint8Array(8);
const v31 = new Float64Array(2647);
v31[1185];
new BigUint64Array(41);
function f36() {
    0.043152456200264866 << 0.043152456200264866;
    const o43 = {
        8: 0.043152456200264866,
        get a() {
            this[8] = this;
            const v41 = Math.acos(0.043152456200264866);
            v41 === v41;
        },
    };
    return o43;
}
const v44 = f36();
v44[8] = v44;
const v45 = f36();
v45[8] = v45;
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    a49[8] = a49;
    a50[8] = a50;
    this.d = 257;
    this.h = a50;
}
const v53 = new F47(v45, v44);
function f55(a56, a57, a58) {
    function f60(a61) {
    }
    a56[1] = a58;
}
try { Worker.apply(v22, v8); } catch (e) {}
const v65 = ("function")?.constructor;
try { new v65(v8); } catch (e) {}
const v67 = [v53];
try { v67.concat(v67); } catch (e) {}
const o69 = {
    "arguments": v67,
    "type": "function",
};
const v70 = new Worker(f55, o69);
const v71 = v70?.constructor;
try { new v71(); } catch (e) {}
