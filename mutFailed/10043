function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a5;
    } catch(e7) {
        %VerifyType(this);
        try { e7.fill(a6, F3, this); } catch (e) {}
        try { a5(e7); } catch (e) {}
        [-733.19601546277,NaN,1.7976931348623157e+308,0.8742119222070659,-1000.0,-2.220446049250313e-16,-2.220446049250313e-16];
        [720.8337487656104,-3.0,8.357045775004465e+307,-1.3080879776265058e+308,729134.8490965215,1.7456072732243813e+308,0.882035706156871,-1000000000000.0,653.2188312176463,0.19730203356396936];
        [-1.7976931348623157e+308,-647.0718833536973,-917934.3871048269,524.1569110820858,0.5004376276501763,1.3094552079275017e+308,-332475.11806418654,NaN,2.2250738585072014e-308,-6.953753695146075];
        function f15(a16) {
            const o19 = {
                ...65536,
                5: 65536,
                __proto__: a16,
                valueOf(a18) {
                },
                "d": 4,
                "g": 65536,
                163: 4,
            };
        }
        f15();
        f15();
    }
    const v23 = new WeakSet();
    const v25 = ("I").localeCompare();
    Reflect.apply(v23, v25, [v25]);
    new Uint32Array(127);
    const v33 = /(?:a*)+q(?<a>.)/guds;
    for (let i36 = 0, i37 = 10;
        (() => {
            const v38 = i36 < i37;
            function f39(a40, a41) {
                return v38;
            }
            return v38;
        })();
        i37--) {
        for (let v47 = 0; v47 < 25; v47++) {
            v33.hasIndices = v33;
        }
    }
    const v49 = new Float32Array(2);
    new Int32Array(v49);
    try {
        this.h = a6;
    } catch(e52) {
    }
    try {
        this.a = 1.8842983964650788;
    } catch(e53) {
    }
}
new F3(1.8842983964650788, 2.220446049250313e-16);
const v55 = new F3(-1000000000.0, -1000000000.0);
Float32Array <= 128;
(2136873598).constructor;
new F3(1.8842983964650788, 1.8842983964650788);
([315.3838771878211,0.8321654879979539,1.0,-813011.8421276518]).__proto__;
function F66(a68, a69, a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = this.constructor;
    let v73;
    try { v73 = new v72(); } catch (e) {}
    this.b = 4.0;
    try {
        v73.c = v55;
    } catch(e74) {
    }
}
new Set();
new Int32Array(129);
new Uint8ClampedArray(2303);
new Uint8ClampedArray(632);
class C87 {
}
new C87();
const o91 = {
};
new ArrayBuffer(o91, 0);
const v95 = new Float32Array();
const v98 = [0.5056701084838725,-61629.798017403926,NaN,864.4381894698445,2.220446049250313e-16,783231.8077183717];
const v101 = new BigUint64Array();
function F102(a104, a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v101[16] = v98;
    } catch(e108) {
    }
}
new Float64Array(3842);
class C110 {
    [9007199254740991] = v95;
}
new C110();
