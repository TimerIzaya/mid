let v2 = 7;
class C3 {
    #g = v2;
    static set f(a5) {
        new Array(1083);
    }
    static [-1];
    static {
        this.construct(v2, [v2], v2);
        v2 = -1;
        super.f;
        [-0.3484514485991692,5.215616449601761e+307,0.8738032636808731,1000000000.0,0.5251786972157989,0.9162411350857441,1e-15,-2.2250738585072014e-308,-2.0];
        [1000000000000.0,0.6728671698015282,2.0,1.0,5.0,2.2250738585072014e-308,3.0];
        [2.2250738585072014e-308,297.6777373388484,0.691284488309957,0.5659485772077721,0.0,4.0];
    }
}
new C3();
const v18 = new C3();
new C3();
function f23() {
    return 255;
}
let v29 = 1000000000000.0;
class C30 {
    b = 0.5293936116827511;
    [v29] = C30;
    #m(a32) {
        const v34 = Symbol.toPrimitive;
        const o56 = {
            [v34]() {
                let v36 = Math;
                const v38 = ++v29;
                const v39 = v29 ** v29;
                v36 & (15462 ** v2);
                +Infinity;
                (15462 || 1000000000000.0) + -142.577867451237;
                v36--;
                +v29;
                v36.log(v38);
                v36.sin(v39);
                try {
                    Symbol("toDateString");
                } catch(e55) {
                }
                return -142.577867451237;
            },
        };
        return this;
    }
}
const v59 = new BigUint64Array(1000);
const o60 = {
    ...v59,
};
new C30();
new C30();
new C30();
new Uint8Array(1246);
const v69 = new Uint16Array(255);
const t59 = [];
t59[6] = 4294967295;
ReferenceError(ReferenceError);
function F76() {
    if (!new.target) { throw 'must be called with new'; }
    typeof v18;
    gc();
}
const v82 = new F76();
const v83 = v82.constructor;
new v83();
class C85 {
}
new Date();
const v89 = new v83();
v89.add(v89);
new Int32Array(1);
function f92() {
}
class C93 extends f92 {
}
new C93();
[0.0,1000000.0];
function f96() {
    let v97 = 0;
    do {
        const o98 = {
        };
        try {
            o98.h = f92;
        } catch(e99) {
        }
        try {
            const o100 = {
            };
            o100.h = f92;
            o100.f = Uint8Array;
        } catch(e101) {
        }
        try {
            const o102 = {
            };
            o102.h = f92;
            o102.f = Uint8Array;
            o102.d = f92;
        } catch(e103) {
        }
        try {
            const o104 = {
            };
            o104.h = f92;
            o60.f = Uint8Array;
            o104.d = v69;
        } catch(e105) {
        }
        v97++;
    } while (v97 < 10)
    for (const v112 of Array(4087)) {
    }
    return Array;
}
f96();
F76();
