function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function F2() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const o7 = {
        "maxByteLength": 3145,
    };
    const v9 = new SharedArrayBuffer(128, o7);
    new Float32Array(v9);
    try {
        this.e = -11365;
    } catch(e13) {
    }
}
new F0();
new F0();
const v16 = new F0();
let v18 = 6;
new v16(v18 = 1664606158, v16, 1664606158, 1664606158);
class C21 {
    constructor(a23, a24) {
        try {
            a24.length = 5;
        } catch(e26) {
        }
    }
}
new Set();
const v30 = [-20096,4294967296,-65537,-2];
const v31 = [-1947047520];
[v31,v31,v31,v30];
class C33 {
}
Symbol.species;
for (let v38 = 0; v38 < 25; v38++) {
    Math.sin(v38 ** 2);
}
new Float32Array(10);
new Float32Array(1000);
new Uint8Array(9);
function f54(a55, a56) {
    const o85 = {
        valueOf(a58, a59) {
            function f60() {
                function f61(a62) {
                    new Float64Array(64);
                    new BigInt64Array(3481);
                }
                10 ^ f61(f61);
                return 1987035518;
            }
            const v74 = [];
            function f75() {
                return f75;
            }
            ([v74]).flat(-2147483649);
            const o79 = {
                "arguments": v74,
                "type": "function",
            };
            new Worker(f60, o79);
            const o82 = {
                "execution": "async",
            };
            new Uint8Array(165);
            return 1987035518;
        },
    };
    return o85;
}
const v86 = f54(1987035518, 1987035518);
f54();
Math.log(v86);
~-1.7976931348623157e+308;
("128").fontsize();
12204n <= -16;
