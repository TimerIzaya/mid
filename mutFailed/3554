class C3 {
    m(a5, a6) {
        try { this(); } catch (e) {}
        const v9 = Symbol.toStringTag;
        this[v9];
        return v9;
    }
    static #g;
    n(a12, a13) {
        let v14 = (536870912)?.e;
        function F16() {
            if (!new.target) { throw 'must be called with new'; }
            for (let [v19,v20,v21,v22] of F16) {
                function f23() {
                    return f23;
                }
                function f24(a25, a26) {
                    return a25;
                }
            }
        }
        let v28 = 3;
        const v29 = v14--;
        v28 * v29;
        v28++;
        class C32 {
            static [Math] = this;
        }
        try {
        const t0 = 9;
        t0();
        } catch (e) {}
        new Int8Array(v29);
        return 536870912;
    }
}
const t36 = 65537;
new t36();
new C3();
new C3();
[0.7216415364966821,83.96269928938727];
new Uint16Array();
const v47 = new gc();
eval(v47);
[-4.0,0.8975787046815343,0.30358916694994453,-5.0,0.15459829195814045,-1000.0];
[0.23695690807368397,-6.627505433424298e+307,-1e-15,0.19636384613992064,4.0,-1.065179488312128e+308];
const v52 = [-256,13351,5138,2,-4294967295,1000,268435440];
v52.toString = gc;
class C53 {
    constructor(a55, a56) {
        for (const v57 in this) {
        }
        Math.atan2(v52, -4294967297);
        const t52 = Array(8);
        t52[2147483648] <<= 8;
        Math.acos(1);
    }
}
new C53();
class C68 extends C53 {
}
new C68();
Array(12, -10);
function f75() {
    return Int32Array;
}
