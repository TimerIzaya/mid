class C3 {
    static #p(a5, a6) {
        const t2 = this.__proto__;
        delete t2?.[-8];
        this[Symbol.toPrimitive];
        return a5;
    }
    3;
    static 2;
}
const v12 = new C3();
const v13 = new C3();
new C3();
const v15 = [v13,1008180650];
const v16 = [v13,v15,v15,v12];
[v16,v12];
function f18() {
    return f18;
}
class C19 extends f18 {
    constructor(a21, a22, a23, a24) {
        super();
        function F26(a28, a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
        }
        try { F26(F26, Map, F26); } catch (e) {}
        class C32 {
            static get g() {
                const v34 = (a35, a36) => {
                    'use strict';
                    try {
                        a35.a = this;
                    } catch(e37) {
                    }
                    return a36;
                };
                try {
                    var a = super.subarray();
                } catch(e39) {
                }
            }
        }
        const v40 = new Map();
        for (const v43 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
            try { ("NFKC").indexOf(326.9924986537749); } catch (e) {}
            const v47 = ("-2").normalize("NFKC");
            v47[1] = v47;
        }
        ~-1000.0;
        -1000.0 & -1000.0;
        new Map();
        WeakMap.length;
        class C56 extends WeakMap {
            536870887;
        }
        const v59 = new Int32Array(2917);
        try { v59.reduce(WeakMap); } catch (e) {}
        ("lastIndexOf")[7];
        const v64 = v59["lastIndexOf"](10);
        v64 + v64;
        -1.7976931348623157e+308 - -1.7976931348623157e+308;
        const v70 = ("lastIndexOf").localeCompare("lastIndexOf", "symbol", "lastIndexOf");
        v70 + v70;
        gc.length = gc;
        const v73 = gc();
        const v75 = [-1.5424212036356715e+308];
        v75[536870887n] = v75;
        const v81 = 256 !== 6;
        !(v81 || v81);
        try {
            const t70 = null;
            t70.valueOf = v59;
        } catch(e85) {
            e85.stack;
            const v88 = e85.message?.toLocaleUpperCase;
            try { new v88(); } catch (e) {}
            e85.stack;
        }
        -2.0;
        const v95 = v40.size;
        v95 | v95;
        C56[3438438303] |= 2.0;
        0 - 0;
        new Uint8Array(0);
        let v101 = 3723;
        v101--;
        const v104 = new Float32Array(v101);
        ~3245;
        Float32Array.d = Float32Array;
        const v108 = new Float32Array(3245);
        try { Math.imul(-2.0, -2.0); } catch (e) {}
        Math.atan2(-0.0, 2.0);
        function F112(a114, a115) {
            if (!new.target) { throw 'must be called with new'; }
            const v116 = this?.constructor;
            try { new v116(this, 6); } catch (e) {}
            let v118;
            try { v118 = this.isPrototypeOf(2917); } catch (e) {}
            !v118;
        }
        F112.arguments = F112;
        const v120 = new F112();
        const v121 = v120?.constructor;
        let v122;
        try { v122 = new v121(C56, "symbol"); } catch (e) {}
        try { v122.isPrototypeOf(v122); } catch (e) {}
        Map * v122;
        try {
            const v128 = [v108,Float32Array,"shift",v40,v75];
            try { v128.with(v101, v101); } catch (e) {}
            try { ("atanh").big(); } catch (e) {}
            const v132 = new F112(v128, "atanh");
            v132.length;
        } catch(e134) {
        }
        const v135 = new C32(-63366, v120);
        const v136 = v135?.constructor;
        try { new v136(); } catch (e) {}
        function F138(a140, a141) {
            if (!new.target) { throw 'must be called with new'; }
            const v142 = a140?.constructor;
            try { new v142(null); } catch (e) {}
            try { new a141(null, 16); } catch (e) {}
            this.h = a141;
        }
        const v145 = new F138(F138, F138);
        const v146 = v145?.constructor;
        try { new v146(v104, v104); } catch (e) {}
        const v148 = v145?.constructor;
        let v149;
        try { v149 = new v148(v120, v73); } catch (e) {}
        v149.h;
        !(delete v145.h);
        function f153() {
            const t134 = [];
            t134[6] = 4294967295;
            const o158 = {
                set b(a157) {
                },
                "arguments": v16,
            };
            return 4294967295;
        }
        for (let v159 = 0; v159 < 5; v159++) {
            f153();
            %OptimizeFunctionOnNextCall(f153);
        }
    }
}
new C19();
