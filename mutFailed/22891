function f0() {
}
const o1 = {
};
Math.tanh(Math);
const v7 = ("29753").replaceAll("29753");
new Uint16Array(Uint16Array);
const o10 = {
};
new Set();
for (let i17 = (() => {
        function f14() {
            return f14;
        }
        const o16 = {
            [f14]() {
            },
        };
        return 0.8037056182165817;
    })();
    i17 < v7;
    i17++) {
}
new Uint16Array(4096);
class C28 {
}
const t26 = (2136873598).constructor;
t26(7).toExponential(C28);
new Uint8ClampedArray(8);
const v35 = ("D")[0];
class C36 {
    constructor(a38) {
        function f39() {
            return o1;
        }
        Object.defineProperty(v35, "length", { configurable: true, enumerable: true, get: f39 });
    }
}
const v40 = new C36();
v40.length;
new BigInt64Array(2272);
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this.constructor;
    let v50;
    try { v50 = new v49(F45, v49, F45, F45); } catch (e) {}
    const v52 = v50 >>> 38445;
    38445 >> v50;
    let v54 = v52 * v7;
    v54--;
}
new Float32Array(165);
const v59 = [];
function f61() {
    let v62 = 12;
    v62--;
    class C64 {
        constructor(a66) {
            Uint16Array(v62);
        }
    }
    v59.constructor.call();
    return Uint16Array;
}
%PrepareFunctionForOptimization(f61);
const v70 = new F45(F45, F45);
new F45(F45, v70);
