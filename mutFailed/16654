const v0 = [-7.166805563965837e+307,1.0700792130267747e+308,-526564.9343876166,6.773441016143297e+307,3.0];
class C2 {
    static #b;
    constructor(a4, a5) {
        try {
            a4.#b = 860736081;
        } catch(e6) {
        }
    }
}
[3.7381567927081605,-253.65995005677576];
[-1000000.0,1.379995983224362e+307];
[-2147483648,6,-4294967295,-2147483648,-6,9,4294967296];
const v10 = [-380314200,1701840497,-2147483649,-1];
const v11 = [-317524262];
const o12 = {
};
new URIError();
for (let i16 = 0; i16 < 9; i16++) {
}
new Float32Array(4096);
try {
    v0.fuck("flags", "flags", "flags", Float32Array);
} catch(e29) {
}
/(Z[-123])/gsy;
/E\u0060/gvdsy;
/(abc+)/umsy;
const v33 = v11[v10];
try { v33["p"](v0, Float32Array); } catch (e) {}
new Uint32Array(7);
new Uint16Array(257);
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F41();
const v47 = new F41(F41, F41, v46);
function f48(a49, a50) {
    const v51 = [];
    return Int32Array;
    const t40 = [[]];
    delete t40[0];
    [v51];
    return a49;
}
v47[Symbol.toPrimitive] = f48;
for (let v60 = 0; v60 < 5; v60++) {
    Object.defineProperty(v46 || undefined, v47, { value: v46 });
}
