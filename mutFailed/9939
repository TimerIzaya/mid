const v0 = [-1578154478];
const v1 = [-536870912,540045297,24624,-2147483649,-16,10,1339250122,12];
[-2059199476,0,-3,-1];
const v3 = /R/umsy;
const v4 = /a\b!/gv;
const v5 = /\x60/gd;
const v9 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v11 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
let v12 = [601759695];
const v13 = [1073741824,1073741823,1376142744,1073741825];
function f15(a16, a17, a18, a19) {
    function f21() {
        let v24 = Float64Array;
        b = v24 = a17;
        v9.length;
        try {
            v13.forEach(v24);
        } catch(e27) {
        }
        const v28 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v30 = Symbol.toPrimitive;
        const o36 = {
            toString(a32, a33) {
                const v34 = a19 && v24;
                a32 *= v30;
                return v34 <= v28;
            },
        };
        const o56 = {
            "c": -4294967297n,
            [522675525n](a39, a40) {
            },
            "c": v12,
            valueOf(a42, a43) {
                return a16;
            },
            "b": -4294967295,
            [-4294967297n](a45, a46, a47, a48) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v11,
            ...v12,
            "type": "Vre",
            ..."Vre",
            valueOf(a50, a51) {
                return v28;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a53, a54, a55) {
                return a19;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f21();
    const v59 = new Int8Array();
    v59.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f21);
    let v64;
    try { v64 = v13["find"](..."find", a19, ...v12, ...v13, ...522675525n); } catch (e) {}
    v64 <= a18;
    return arguments;
}
for (let v66 = 0; v66 < 10; v66++) {
    f15();
}
function f68() {
    return v0;
}
Reflect.construct(Int8Array, v0);
v12++;
function f73(a74, a75, a76, a77) {
    const o78 = {
        [a74]: a74,
    };
    return o78;
}
function f82(a83, a84, a85, a86) {
    const o96 = {
        get a() {
            const o89 = {
            };
            gc();
        },
        "f": v4,
        get g() {
            f68();
            %PrepareFunctionForOptimization(f68);
            f68();
            f68();
            %OptimizeMaglevOnNextCall(f68);
            f68();
            return v1;
        },
        ...v0,
        "d": a86,
        "toPrimitive": a84,
        ...a86,
    };
    return o96;
}
f82(7996, v3, v1, f68);
f82(7996, v5, v0, v0);
f82(44286, v4, v0, 44286);
for (let v100 = 0; v100 < 25; v100++) {
    const v101 = [601759695];
    const v102 = [1073741824,1073741823,1376142744,1073741825];
    function f103(a104, a105, a106, a107) {
        ~-4294967295;
        for (let i112 = (() => {
                0 >>> 0;
                return 0;
            })();
            (() => {
                const v114 = i112 < 9;
                !v114;
                return v114;
            })();
            i112++) {
        }
        try { v102["4duf"](..."4duf", a107, ...v101, ...v102); } catch (e) {}
        const v123 = Symbol.isConcatSpreadable;
        function F124() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C127 {
            static #o() {
                const v129 = [-2147483648,-46456,1200954989,-4294967296,1];
                const v130 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
                const v131 = [23955,1426598775,2147483649];
                try {
                    v130.#o(v130, v131, null, v130, v129);
                } catch(e133) {
                }
                return null;
            }
            #p() {
                const v135 = this[223];
                const v136 = super.g;
                let v137;
                try { v137 = v135.p(this, v136, v136, v136); } catch (e) {}
                this[null] = v137;
                new Map();
                return v136;
            }
        }
        const v140 = new C127();
        const v141 = new C127();
        class C142 {
            p(a144) {
                const v145 = null - a144;
                %VerifyType(v140);
                super[v140] = v145;
                a144?.[1858] ^ v145;
                for (let i150 = 0; i150 < 7; i150++) {
                    try { v141.valueOf(i150, a144, v140, i150, i150); } catch (e) {}
                }
                const v161 = new BigUint64Array();
                v161.buffer.slice();
                Math.cos(Math);
                return C127;
            }
        }
        const v166 = new C142();
        function F167(a169, a170, a171, a172) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a171;
            try {
                this.f = C127;
            } catch(e173) {
            }
            try {
                this.e = v166;
            } catch(e174) {
            }
            try {
                this.a = a170;
            } catch(e175) {
            }
        }
        const v176 = v123.description;
        const v177 = Array(a106);
        try { v177.groupToMap(v123, v176, f103, v177, v123); } catch (e) {}
        function f180() {
            return 154;
        }
        new Int32Array(245);
        return v101;
    }
    for (let v184 = 0; v184 < 5; v184++) {
        f103();
    }
}
