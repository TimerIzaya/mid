const v0 = [];
function f1() {
    const o21 = {
        set a(a3) {
            const v4 = v0 >>> this;
            try { a3.getFloat64(v4, v4, v0); } catch (e) {}
            new Map();
        },
        get a() {
            const v9 = typeof this;
            const v11 = f1 === "number";
            const v14 = v9 ** this;
            Math.log1p(v14);
            const v16 = -v14;
            Math.hypot(5);
            v14 << v16;
            let v19 = +this;
            ++v19;
            return v11;
        },
    };
    return f1;
}
const v22 = f1();
const v23 = f1();
const v24 = f1();
const v25 = [-65536,1952221769,1265866710,5,120827979,536870889,36617,536870912];
const v26 = [7,2147483649,-308636353,1000,17515];
const v27 = [65535,-9223372036854775807,129,1073741824,512,1073741825];
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v26;
    } catch(e37) {
    }
    try {
        this.f = a36;
    } catch(e38) {
    }
    try {
        this.c = -4774n;
    } catch(e39) {
    }
}
new F31(v22, v25, F31, -4774n);
const v43 = new v24(16);
const v46 = new Uint32Array(40, 40, 16);
const v47 = [1073741824,1073741823,1376142744,1073741825];
function f48(a49, a50, a51, a52) {
    const v53 = a49.constructor;
    let v54;
    try { v54 = v53(); } catch (e) {}
    try {
        v47.forEach();
    } catch(e57) {
    }
    const o58 = {
        1073741824: v46,
    };
    const v59 = undefined?.values;
    try { v59(); } catch (e) {}
    v43["toSorted"](v54, v59, ..."toSorted", v59, 40);
    Math.abs(BigInt64Array);
    return a52;
}
for (let v65 = 0; v65 < 10; v65++) {
    f48(v46);
}
%OptimizeFunctionOnNextCall(f48);
f48(Uint32Array);
new F31(v24, v27, f1, -2147483649n);
new F31(v23, v0, F31, -4774n);
class C73 {
    #c;
    [F31];
    #valueOf(a75, a76) {
        a76 = this;
        try {
            ("MAX_SAFE_INTEGER").#valueOf();
        } catch(e78) {
        }
        a76[3.2149281669993574e+307] = Uint32Array;
        return a75;
    }
}
new C73();
const v83 = new C73();
new C73();
const v86 = -Infinity;
function f88() {
    return BigInt64Array;
}
function f90() {
    return -0.0;
}
try { v83.for(BigUint64Array, -0.0, C73, 2.0, v86); } catch (e) {}
[155533.8602852358,2.0];
function F98() {
    if (!new.target) { throw 'must be called with new'; }
    this.__lookupGetter__.bind();
    try {
        Date.UTC(2.0, v86);
    } catch(e103) {
    }
    for (const v107 of Array(19793)) {
    }
}
const v108 = new BigUint64Array();
const t108 = v108.constructor;
new t108();
