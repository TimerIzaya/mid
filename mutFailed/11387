class C3 {
    n(a5) {
        return a5;
    }
    static #valueOf(a10) {
        %VerifyType(-7);
        try {
            const o12 = {
            };
            this.fuck(-256, "register", "register", o12);
        } catch(e14) {
        }
        return 65537;
    }
}
new C3();
new C3();
new C3();
new Int16Array(2);
new Float64Array(3438);
new Float32Array(-739878881);
let v31 = 10 << 10;
--v31;
--v31;
new BigUint64Array();
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v43 = v39.reduce(Date)[22];
    function f46() {
        function f48(a49) {
        }
        Object.defineProperty(v39, 16, { writable: true, enumerable: true, get: f48 });
    }
    const t35 = Worker.constructor;
    new t35(v43);
    function f54() {
        return f54;
    }
    new Float64Array(1073741824);
    const v58 = [];
    v58.lastIndexOf(v58);
    const o60 = {
        "type": "function",
    };
    o60.arguments;
    new Worker(f46, o60);
    const v63 = Array(19793);
    for (const v64 of v63) {
    }
    const v65 = [v63,v63,v63,v63];
    new BigUint64Array();
    const v69 = [[v65,v65]];
    try { Uint16Array.from(v58); } catch (e) {}
    const v72 = v69 >= Uint16Array;
    v72 << v72;
}
new F37();
new F37();
const t60 = "byteLength";
t60[7] = "byteLength";
[-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
