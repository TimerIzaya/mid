class C1 {
    constructor(a3) {
        for (let v5 = 0; v5 < 32; v5++) {
            "p" & v5;
            for (let v8 = 0; v8 < 5; v8++) {
                function f9() {
                    return f9;
                }
            }
            const o12 = {
                "execution": "sync",
            };
            gc(o12);
        }
    }
}
new C1();
const v16 = new Float32Array(163);
new Int16Array(4);
for (let i22 = 0, i23 = 10; i22 < i23; i22++) {
}
const v32 = new BigInt64Array(167);
const o33 = {
};
function f34() {
    const o42 = {
        ..."Y4",
        "f": 4294967297,
        ["m"]: "Y4",
        valueOf(a39, a40) {
            a39 instanceof a40;
            const t30 = "m";
            t30.valueOf = a39;
        },
    };
    return o42;
}
const v43 = f34();
const v44 = f34();
const v45 = f34();
v45[1] = v45;
function f48(a49, a50) {
    const o54 = {
        "e": a50,
        "b": 268435441n,
        m(a52, a53) {
            return a52;
        },
        257: v45,
        "b": a49,
        10: 268435441n,
        "a": v44,
        "f": a49,
    };
    return o54;
}
f48(-536870912n, v43);
const v58 = new Uint8ClampedArray(4);
const v59 = [-8.046012156146725e+306,-155341.56338130776,1000000000000.0];
class C62 extends Array {
    16 = 4;
    268435440;
}
const v63 = [-1e-15,3.0,2.0];
const v64 = [-2.0,-Infinity,-959.3478988930655,NaN,154075.64665685943,0.947659516524693,-1.1436342077503824e+308];
class C65 extends BigInt64Array {
    constructor(a67, a68, a69, a70) {
        super(4, 163);
        function f71() {
            const o72 = {
            };
            return o72;
        }
        function F73(a75, a76, a77) {
            if (!new.target) { throw 'must be called with new'; }
            const v78 = this.constructor;
            try { new v78(v58, f71, F73); } catch (e) {}
            a77.prototype = a77;
        }
        throw Float32Array;
        v16 << v64;
        new Uint8Array(48);
        new Int32Array(8);
        new Float64Array(257);
    }
}
const v90 = new C65(v63, v32, 163, v64);
%OptimizeFunctionOnNextCall(Date);
try { (-12n).getTime(-12n, -816409267); } catch (e) {}
new C65(v63, v90, 163, v59);
new C65(v63, 163, 167, v64);
new Date("2");
function f99() {
    const v102 = Array(4087);
    v102[4037] = v102;
    for (const v103 of v102) {
    }
    return Array;
}
f99();
Math.asinh();
Math.sin(3.862600614459211e+307);
