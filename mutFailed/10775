function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 9007199254740991;
    } catch(e3) {
    }
    [-2147483648,43961049,4,8,-5,-65536,-128,536870888,-325729482,8];
    [4,-65535,-9007199254740990,2,-65536,-128,-165048657,64,-1593380153];
    [51267,0,-858821915,26611,-30236,-9007199254740991,59825,-1753377078];
    const o10 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o10);
}
function f12(a13, a14) {
    const v16 = new Float64Array();
    v16 > Uint32Array;
    return a14;
}
Object.defineProperty(F0, "toString", { configurable: true, enumerable: true, value: f12 });
const v19 = new F0();
function f20(a21) {
    const o26 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o26);
    return F0;
}
v19.toString = f20;
const v28 = new F0();
const v30 = Symbol.toPrimitive;
v28[v30] = f12;
const v31 = new F0();
const v32 = [v28,v31,v31,F0,F0];
v32.toString = Symbol;
const v33 = [v19,v28];
function f34() {
    function f35(a36, a37) {
        const v38 = v30.description;
        try {
            v38.__proto__ = v38;
        } catch(e39) {
        }
        return a37;
    }
    return f35;
}
Object.defineProperty(v33, Symbol.toPrimitive, { get: f34 });
let v42 = [v32,F0,v32];
const v45 = new Uint32Array(56);
v45.toString = f12;
const v48 = new Uint8Array(3);
v19[v45] = v19;
v42 -= v33;
[[F0]];
[F0,v45,v48,v19,v32];
new Float64Array(242);
("boolean").normalize("NFKC");
const o61 = {
    "maxByteLength": 242,
};
const v63 = new ArrayBuffer(54, o61);
new Int8Array(v63);
Math.sin(-9007199254740991);
