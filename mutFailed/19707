const v5 = new Int32Array(388);
const v8 = new Uint8ClampedArray(564);
new Uint8ClampedArray(1340);
[1126838905];
const v16 = new Uint16Array(Uint16Array);
const v17 = [65535,-2147483647,9007199254740990,11241,-3,-299794727,16,1,-4294967297];
v17[1] = v17;
const o18 = {
};
function f19(a20, a21) {
    v17[11] = o18;
    return v16;
}
f19();
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this?.constructor;
    try { new v27(); } catch (e) {}
    const o30 = {
        0: "1ya",
        162: "1ya",
    };
}
new F23(Map, Map);
class C32 {
    static #b;
    constructor(a34, a35) {
        let v39 = ++a34;
        v39--;
        0.0 && 536870889;
    }
    set a(a43) {
        const o59 = {
            m(a45) {
                try { a45.m(388); } catch (e) {}
                try { a45.next(); } catch (e) {}
                a45.c = a45;
                const o48 = {
                };
                class C51 {
                }
                const v52 = C51.name;
                v52 == v52;
                const v56 = new Int8Array(3938);
                const v57 = v56[2620];
                let v58 = 3;
                [...v58] = v57;
                return WeakMap;
            },
            __proto__: C32,
            ...v5,
            "a": a43,
        };
        for (let i62 = 0, i63 = 10;
            (() => {
                new Uint32Array(1126838905);
                -536870912n == "-11838";
                return i62 < i63;
            })();
            a43++, i63--) {
            v8.buffer ||= i63;
            try {
                v8.fill(Uint8ClampedArray);
            } catch(e77) {
            }
            const o82 = {
                valueOf() {
                    super.e;
                    function f80() {
                        return f80;
                    }
                    function f81() {
                        return f81;
                    }
                    return i63;
                },
            };
        }
        function F83(a85) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = a85;
        }
        const v87 = [-9223372036854775808,1415432483,1];
        function f90() {
        }
        function f91(a92, a93) {
            const v95 = Symbol.toPrimitive;
            a92[v95] = f90;
            const o100 = {
                "e": a92,
                "g": a93,
                [v95]() {
                },
                "maxByteLength": 60241,
                get d() {
                },
                "h": -1000000.0,
                ...v8,
                "b": v87,
                "d": Int16Array,
                [60241](a99) {
                },
            };
        }
    }
}
new C32(564, 388);
const v102 = new o18(1340, 564);
new C32(388, 388);
function F104(a106, a107, a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    2105444095n >> 2105444095n;
    for (let v114 = 0; v114 < 100; v114++) {
        class C116 {
            #d;
        }
        const v117 = new C116();
        class C119 extends v117.constructor {
        }
        const o122 = {
            6: undefined,
            [268435439n]: 2105444095n,
            __proto__: a108,
            "g": a108,
            "b": v114,
            "arguments": this,
            valueOf(a121) {
                return v114;
            },
        };
        const v125 = new Uint32Array([]);
        for (let v126 = 0; v126 < 5; v126++) {
            v125["p" + v126] = v126;
        }
    }
    try { Math.ceil(-4294967296n); } catch (e) {}
    let v131 = 10;
    Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    function f134() {
    }
    for (; v131--;) {
        try {
            ("iterator").hasOwnProperty([-1.6607192246655457e+308]);
            Uint16Array.toString = Array;
            v102.valueOf = a108;
        } catch(e141) {
        }
    }
}
new F104();
const v143 = new F104();
const t151 = v143.constructor;
new t151();
new F104();
new Float64Array([-25855,-25855,[-25855]]);
