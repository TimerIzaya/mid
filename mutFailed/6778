new Float64Array(7);
const v5 = new Uint8ClampedArray(2008);
function F8(a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    a10 >> a10;
    a11?.__defineSetter__;
    const v15 = a11 === a11;
    v15 ** v15;
}
function f17(a18) {
    function F19() {
        if (!new.target) { throw 'must be called with new'; }
        function F21(a23, a24) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C25 {
            static get g() {
                super.subarray();
            }
        }
    }
    return a18;
}
F8.toString = f17;
function f28() {
    class C29 {
    }
    const v30 = new C29();
    for (let v31 = 0; v31 < 5; v31++) {
        new F8(F8, v30, v31);
    }
    return v30;
}
f28();
f28();
new Float64Array(2882);
class C36 {
}
C36.toString = f28;
const v37 = new C36();
v37.m = Float64Array;
const v38 = new C36();
switch (v38) {
    default:
        C36.toString();
        break;
}
try { v37["m"](); } catch (e) {}
new Map();
const v47 = [-1073741824];
class C48 {
}
const v51 = new BigUint64Array();
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v54 = 0;
        v54 * v54;
        for (let i = 0; i < 5; i++) {
            v51.entries();
            const v57 = v54++;
            v57 ^ v57;
            v54 < 5;
        }
        new F52();
    } catch(e62) {
    }
}
new F52();
new Float32Array();
const v66 = new BigUint64Array();
function F67() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v69 = 0;
        let v70 = 0;
        while ((() => {
                const v72 = v70 < 0;
                !v72;
                return v72;
            })()) {
            for (let v74 = 0; v74 < 5; v74++) {
            }
            v70++;
        }
        do {
            try { v66.entries(); } catch (e) {}
            v69++;
        } while (v69 < 5)
        new F67();
    } catch(e82) {
    }
}
const v83 = [v47,v47,2882,Uint8ClampedArray,v47];
const v85 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const v87 = [-1.0,1.0,-875790.5323034594,0.22501948637268132,-0.0,-0.0];
function f88(a89, a90, a91, a92) {
    const v93 = Symbol.toPrimitive;
    Object.defineProperty(a89, v93, { configurable: true, enumerable: true, value: f88 });
    const o100 = {
        toString(a95, a96) {
            const v97 = a89 && Float64Array;
            function f98() {
                a95 *= v93;
                return Float64Array;
            }
            Object.defineProperty(v97, "valueOf", { value: f98 });
            v97 <= v85;
            return this;
        },
    };
    return o100;
}
f88(v87);
[v5,v83,v83];
SharedArrayBuffer[Symbol.toPrimitive] = f88;
const v106 = new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
v106.byteLength;
