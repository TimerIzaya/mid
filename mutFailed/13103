function f0() {
}
new WeakMap();
new Set();
const v14 = [];
function f15() {
    return f15;
}
class C16 extends f15 {
    constructor(a18, a19, a20, a21) {
        super();
        const v24 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
        class C25 {
            constructor(a27, a28) {
                let v29 = /W(jy2)/udy;
                const v30 = /(u4(?:a?)*)/gudimsy;
                const v32 = Uint8Array(v30, C25);
                const v34 = Uint32Array(4294967296, a27, a28);
                function f35(a36, a37, a38, a39) {
                    const o43 = {
                        ...v32,
                        n(a41, a42) {
                            v34[a36] = v34;
                            return 4294967296;
                        },
                    };
                    return o43;
                }
                for (let v44 = 0; v44 < 5; v44++) {
                    f35(Uint8Array);
                }
                v29 = v30;
                for (let v46 = 0; v46 < 5; v46++) {
                    v24["p" + v46] = v46;
                }
            }
        }
        class C53 extends (472608997).constructor {
        }
        const o55 = {
            "maxByteLength": 3145,
        };
        const v56 = new Uint16Array(8);
        const o62 = {
            __proto__: 0n,
            n(a58, a59) {
                return 268435439n;
            },
            o(a61) {
                return a61;
            },
            ...v56,
        };
        function f63() {
            const v64 = [1929306256,-35796];
            try { v64["36049"](); } catch (e) {}
            const v68 = new SharedArrayBuffer();
            new DataView(v68);
            const t58 = [];
            t58[6] = 4294967295;
            const o75 = {
                set b(a74) {
                },
                "arguments": v14,
            };
            return o75;
        }
        for (let v76 = 0; v76 < 5; v76++) {
            function F79(a81, a82) {
                if (!new.target) { throw 'must be called with new'; }
                const v83 = this.constructor;
                try { new v83("a"); } catch (e) {}
                try { a81.valueOf(); } catch (e) {}
                try {
                    this.f = "-2147483648";
                    9n >> 9n;
                } catch(e88) {
                }
            }
            F79.arguments = F79;
            new F79();
            f63();
            %OptimizeFunctionOnNextCall(f63);
            for (let v92 = 0; v92 < 5; v92++) {
                function f93() {
                    let v95 = ("Vre").codePointAt(v92);
                    -9223372036854775807 * v95--;
                    return f93;
                }
                f93();
                %OptimizeFunctionOnNextCall(f93);
            }
        }
    }
}
new C16();
