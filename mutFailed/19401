const v0 = /wy/gvdmsy;
const v1 = /\xed\xa0\x80/gvm;
const v2 = /\b/udims;
class C3 {
    static o(a5, a6) {
        v0[v2] = a6;
        a6 %= v1;
        return v1;
    }
    static toString(a8) {
        const v9 = [this];
        const v10 = [a8,v2,v0];
        function f11(a12, a13, a14) {
            [a14] = v10;
            v0.multiline &= this;
            return a12;
        }
        f11(v2, this, v0);
        const v16 = [v10,v1,v9];
        v9[v0];
        try {
            super.valueOf(v0, 268435441, C3);
        } catch(e23) {
        }
        let v25 = 33204;
        const v27 = v25++;
        const v28 = -268435441;
        let v29 = v27 && v0;
        const v30 = v29++;
        268435441 * v28;
        let v33 = -1668346851;
        --v33;
        Math.trunc(44644);
        const v36 = -2147483648 - -2147483648;
        try {
            v16[0] = v30;
        } catch(e37) {
            [257];
            [536870887,9007199254740990];
            [65537];
        }
        Math.asin(v33);
        v33 ** 44644;
        v33 / 44644;
        +v36;
        super.e = a8;
        return v9;
    }
    6;
    static #c;
}
new v2();
new C3();
new v1();
const t54 = -13844;
new t54(512);
new Uint8Array(4096);
new BigInt64Array(255);
function F60(a62, a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this.constructor;
    let v67;
    try { v67 = new v66(); } catch (e) {}
    typeof v67 === "symbol";
}
new F60(F60, F60, F60, F60);
new F60();
