new BigInt64Array(16);
const v5 = new BigUint64Array(BigUint64Array);
try { v5.toLocaleString(); } catch (e) {}
1078 > 1078;
const v10 = new Float32Array(1078);
v10[604];
class C12 {
    m(a14, a15) {
        new Set();
        return 1078;
    }
    constructor(a19, a20) {
        a19 >= a19;
        a20 >> a20;
        const v23 = v5[5];
        v23 * v23;
        const o25 = {
        };
        o25.e = o25;
        a19.h = C12;
        try {
            o25.h = v23;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            o27.e = o27;
            o27.h = o27;
            o27.h = v23;
            o27.g = a20;
        } catch(e28) {
        }
        try {
            const o29 = {
            };
            o29.h = v23;
            o29.g = a20;
            o29.a = 1078;
        } catch(e30) {
        }
        try {
            const o31 = {
            };
            o31.h = v23;
            o31.g = a20;
            o31.d = 3695;
        } catch(e32) {
        }
    }
}
const v33 = new C12(1078, 16);
const v34 = v33?.constructor;
try { new v34(BigUint64Array, 1078); } catch (e) {}
const v36 = new C12(C12, 16);
new C12(v36, 3695);
function F40() {
    if (!new.target) { throw 'must be called with new'; }
}
const v42 = new F40();
const v43 = v42?.__defineGetter__;
try { new v43(C12, C12); } catch (e) {}
function f45(a46) {
    C12.d;
    function F48(a50, a51) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f53(a54, a55, a56, a57) {
        a55 < (Uint8Array / a54);
        const o63 = {
            n(a61, a62) {
                return a62;
            },
        };
        return 3695;
    }
    f53.name;
    return 1078;
}
const v66 = Symbol.toPrimitive;
v66.description;
Symbol.for(Symbol);
v42[v66] = f45;
function f70(a71) {
    return 1000.0;
}
v42.toString = f70;
Array[1000] = Symbol;
Array[v42] = 731894.5693476209;
