function f0() {
    const o11 = {
        ..."n",
        "a": "-41282",
        p(a5, a6) {
            with (this) {
                ("n")["startsWith"](f, a);
            }
            return 3.0;
        },
        "h": "-41282",
        86: 3.0,
        "d": "n",
    };
    return o11;
}
const v12 = f0();
const v13 = f0();
const v14 = f0();
class C15 extends f0 {
    constructor(a17, a18) {
        super();
        v12[v13];
        Math.atan2(1e-15, 536870887);
        class C24 {
            static {
            }
        }
        typeof e === "function";
    }
    c;
    static [v14] = v14;
    static h;
    static [v12];
    [v14];
    static [f0];
}
const v30 = new C15(v14, v12);
const v31 = new C15(f0, v13);
const v32 = new C15(f0, v13);
function f33(a34, a35, a36, a37) {
    const o47 = {
        "g": a34,
        n(a39, a40, a41) {
            if (a41 === a40) {
                v14[v30] = a39;
            } else {
            }
            return v12;
        },
        "f": v32,
    };
    return o47;
}
f33(v32, v31, v30, C15);
WeakMap(WeakMap);
class C51 {
}
new C51();
const v53 = f33(v32, v32, v30, v13);
f33(v30, v31, v13, v30);
class C55 extends C15 {
    8 = v13;
    #c;
    constructor(a57, a58) {
        super(v13, v31);
        super.a %= a57;
        function F59(a61, a62) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a61;
            } catch(e63) {
            }
            try {
                this.g = a57;
            } catch(e64) {
            }
        }
        const v65 = new F59(this, v32);
        new F59(this, v65);
        new F59(a58, this);
    }
}
new C55(v32, v14, v53);
new C55(v32, v31);
new C55(v53, f0);
let v73 = new Float32Array(55);
try {
    const v75 = Array(55);
    for (const v76 of v75) {
    }
    const v77 = [v75,v75,v75,v75,v75];
    [v77,v77,v77];
    [Float32Array] >= Uint16Array;
} catch(e82) {
}
const v85 = new Float64Array();
const v88 = [];
function f93() {
    return -4294967296;
}
let v95 = Infinity;
function F96(a98, a99, a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    const v102 = this?.constructor;
    try { new v102(a98, -1.0, a101, a101); } catch (e) {}
    a99 - v102;
    a101 && a101;
    try {
        this.g = a100;
    } catch(e106) {
    }
    try {
        try {
            new f93();
        } catch(e108) {
        }
        try {
            v88.fill(-65537n);
        } catch(e110) {
        }
        this.b = -65537n;
    } catch(e111) {
    }
}
function f112(a113, a114, a115, a116) {
    a114.e;
    v95 = a116;
    const o118 = {
        "apply": f0,
    };
    try { o118.apply(a114, a115); } catch (e) {}
    new Proxy(v88, o118);
    return o118;
}
f112(925338382n, F96, 6n, 925338382n);
const v123 = new BigUint64Array(3170);
let v124;
try {
const t0 = 50;
v124 = t0();
} catch (e) {}
let v125 = new Float64Array(v73);
({"buffer":v124,"byteLength":v125,"length":v73,} = v125);
[...v85,...v123];
v124.slice(3170, 256);
class C129 {
}
const v130 = /(?:a*)+q(?<a>.)/guds;
for (let i133 = 0, i134 = 10;
    (() => {
        const v135 = i133 < i134;
        function f136(a137, a138) {
            return v135;
        }
        return v135;
    })();
    i134--) {
    for (let v144 = 0; v144 < 25; v144++) {
        v130.hasIndices = v130;
    }
}
v73[5] &= 3170;
[Uint8ClampedArray,v14];
!true;
Set.bind(Set, Set, Set, Set, Set);
