const v1 = new Map();
new Int16Array(127);
const v8 = ["e","e","e","e","e"];
function f9() {
    let v10 = [];
    v10 = [NaN,-1e-15];
    return Int16Array;
}
v8.toString = f9;
"e" | v8;
class C20 extends Map {
    static 3;
    constructor(a22, a23, a24, a25) {
        super(v1);
        class C27 extends Set {
        }
        class C28 {
        }
        const v29 = new C28();
        const o30 = {
        };
        o30.f = 0.42673608553754916;
        try {
            o30.f = -106.64181008132755;
        } catch(e31) {
        }
        try {
            const o32 = {
            };
            o32.f = v29;
            const v36 = new Set();
            function F37(a39, a40) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    const o46 = {
                        o(a42) {
                            const o44 = {
                            };
                            return gc(o44);
                        },
                    };
                    this.d = a39;
                } catch(e47) {
                    for (let [v48,v49] of a39) {
                    }
                }
                const t46 = 4294967296;
                t46.h = v36;
                ~(-256n >> -256n);
                try {
                    (4294967296)[this];
                    try { new WeakSet(); } catch (e) {}
                    const v56 = [WeakSet];
                    const v57 = new F37();
                    this.b = v56;
                    const v59 = new Map();
                    v56[4294967296] = Set;
                    const v60 = [v57];
                    const v61 = [v60,v60,v57,v59];
                    [-256n,v61,-41535,v59,v61];
                } catch(e63) {
                }
            }
            o32.b = o32;
            o32.f = -106.64181008132755;
            o32.b = -1000.0;
        } catch(e64) {
        }
        try {
            const o65 = {
            };
            o65.f = -4294967295;
            o65.f = a24;
            o65.f = -106.64181008132755;
            o65.b = -1000.0;
            o65.d = -1000.0;
            function f66(a67, a68) {
                return a67;
            }
            function f69() {
                return f69;
            }
        } catch(e70) {
        }
        try {
            const o71 = {
            };
            o71.e = o71;
            o71.f = -106.64181008132755;
            o71.b = -1000.0;
            o71.e = -668992.361168756;
        } catch(e72) {
        }
    }
}
new C20(-4294967295, 25710, 25710, -4294967295);
new C20(25710, -5, -668992.361168756, 25710);
new C20(-5, 25710, -4.0, -4294967295);
const v76 = [-6.672391061426152e+307];
function f77() {
    class C78 {
        constructor(a80) {
            const v81 = this.constructor;
            try { new v81(); } catch (e) {}
            const v84 = new Float32Array();
            v84.entries();
        }
    }
    function f86() {
        Symbol.toPrimitive.description.codePointAt(C78);
        return Symbol;
    }
    [f77,f77,f77,f77,f77];
    v76["pop"]();
    Date.constructor = f9;
    const v95 = Date.constructor;
    function f96(a97, a98, a99) {
        try { a98.groupToMap(v95); } catch (e) {}
        return a98;
    }
    return v76;
}
%PrepareFunctionForOptimization(f77);
f77();
%OptimizeFunctionOnNextCall(f77);
f77();
