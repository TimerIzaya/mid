[-2.0,-51528.454200266046,-1000000000.0,8.084151131528441e+307,261.180666273415,900.9638989514028,-3.1923105046537685,0.0,-1000000000.0,3.0];
[0.8407958780595823,118.08103402245024,1.1722975368370304e+308,-140.43212372721655,-3.3094356046488205,-1000000000.0,0.3081904893936994,-1000.0,1000000.0,-5.0];
const v2 = [9.898301133844971e+307,5.0];
new BigInt64Array(187);
new Int8Array(140);
new BigInt64Array(129);
let v15 = Symbol.iterator;
const t7 = "string";
t7[v15] = v15;
new Uint16Array(4294967295, 4294967295);
v15 |= v15;
Symbol("string");
%PrepareFunctionForOptimization(Symbol);
Symbol("string");
Symbol("string");
%OptimizeMaglevOnNextCall(Symbol);
Symbol("string");
const v26 = new Float32Array(7);
let o30 = {
    m() {
        const o29 = {
        };
    },
};
const v32 = new Int32Array();
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this?.constructor;
    try { new v38(Uint16Array, a37, a37); } catch (e) {}
    [v15];
    let v43 = 1000000000000.0;
    const v44 = ++v43;
    Math.sin(v44);
    ++o30;
    const v47 = Math.ceil(-268435456);
    v44 & o30;
    BigInt64Array * a35;
    a37++;
    function f51(a52, a53, a54) {
        'use strict';
        [a53];
        [a54,[BigInt64Array],a37,Float32Array];
        return o30;
    }
    f51(v2, v47, "string");
    Symbol.d = a35;
    this.g = Int32Array;
}
new F33(F33, 256, 256);
const v60 = new F33(256, v32, 4294967295);
const t50 = v60.g;
new t50(Uint16Array, v26, 7);
class C64 {
    #a;
    constructor(a66, a67, a68) {
    }
}
new F33(256, Float32Array);
Math.asinh();
const v74 = new Float32Array(Float32Array, Float32Array);
this.h = v74;
Math.sin();
