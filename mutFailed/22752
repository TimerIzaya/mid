new Float64Array(697);
try { BigInt64Array(697, 2, 697); } catch (e) {}
const v6 = new BigInt64Array(2);
v6.g = v6;
99 >>> 99;
try { new Uint8ClampedArray(2, 99, BigInt64Array); } catch (e) {}
let v11 = new Uint8ClampedArray(99);
const v12 = /(x)(x)(x)\1/uis;
v12.f = v12;
function f13(a14, a15, a16, a17) {
    const o24 = {
        2: a16,
        __proto__: a17,
        [v12](a19, a20, a21, a22) {
            super.test();
        },
    };
    return a14;
}
f13();
const v26 = /k1fb/d;
const v27 = /Ioc((\xed\xa0\x80))\x02/gudim;
const v28 = /\x01/vy;
v28.c = v28;
function f29() {
    return v27;
}
f29.name;
class C31 {
    static {
        function F33(a35, a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            try { this.propertyIsEnumerable(this); } catch (e) {}
            a37.unicode;
            try {
                this.e = a38;
            } catch(e41) {
            }
            try {
                this.f = a35;
            } catch(e42) {
            }
        }
        F33.name = F33;
        new F33(2, 2, v28, v27);
        new F33(697, 99, this, v26);
        new F33(99, 697, v27, this);
    }
}
C31.prototype;
const v47 = new C31();
const v48 = new C31();
const v49 = v48?.constructor;
try { new v49(); } catch (e) {}
const v51 = new C31();
const v52 = v51?.constructor;
try { new v52(); } catch (e) {}
const v54 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
Uint32Array.g = Uint32Array;
const v56 = new Uint32Array();
let v57 = -4294967297n;
const v58 = v57--;
const v59 = [601759695];
const v60 = [1073741824,1073741823,1376142744,1073741825];
function f61(a62, a63, a64, a65) {
    const v66 = a62?.findLast;
    try { new v66(v27); } catch (e) {}
    const v68 = a62.constructor;
    let v69;
    try { v69 = v68(); } catch (e) {}
    const v70 = v69?.constructor;
    let v71;
    try { v71 = v70(f61, a62, v54, Uint32Array, v68); } catch (e) {}
    function f72() {
        for (const v73 in v47) {
            for (let v74 = 0; v74 < 625; v74++) {
            }
            const v76 = C31.constructor;
            try { new v76(-15n); } catch (e) {}
            v60.length;
            try {
                v47.g = v60;
            } catch(e79) {
            }
        }
        const v81 = ("Vre").charAt(v71);
        try { v81.trim(); } catch (e) {}
        const v83 = v81.blink();
        v83[9] = v83;
        let v84;
        try { v84 = ("Vre").codePointAt(v54); } catch (e) {}
        function f85() {
            const v87 = ("D")[0];
            return v87.concat(v87);
        }
        %PrepareFunctionForOptimization(f85);
        let v89 = v84 % v84;
        v89--;
        let v91 = Float64Array;
        v91 = a63;
        b = v54;
        let v92 = v54.length;
        v92++;
        const v94 = [-2.2250738585072014e-308,1000000000.0,-1000000.0,-5.35444382765176,-Infinity,-6.958558613950346e+307,0.5201979093805401,2.58784763194331,-1e-15];
        try { v94.toString(); } catch (e) {}
        const o96 = {
            __proto__: v94,
        };
        try { o96.toSorted(v81); } catch (e) {}
        function f98(a99, a100, a101) {
            return a99;
        }
        try {
            v60.forEach(a63);
        } catch(e103) {
            e103.message = e103;
            e103.message = e103;
        }
        const o114 = {
            "c": v57,
            valueOf(a105, a106) {
                return v69;
            },
            1073741824: v56,
            [v57](a108, a109, a110, a111) {
                eval(v81);
            },
        };
        return v60;
    }
    f72();
    const v117 = Array(v70);
    let v118;
    try { v118 = v117.findLast(); } catch (e) {}
    try { new Int8Array(a62, a62, v118); } catch (e) {}
    const v121 = Int8Array.of();
    let v122;
    try { v122 = v121.every(v121, a62, v121, a63, Array); } catch (e) {}
    const v123 = new Int8Array(v122);
    try { v123.subarray(v123, v123); } catch (e) {}
    const v126 = v123.buffer.slice();
    const v127 = v126.constructor;
    try { v127(v126, v122, v58, v121, a62); } catch (e) {}
    try { new Int32Array(v71, Int32Array, v57); } catch (e) {}
    const v131 = new Int32Array(v127, v68, v68);
    v131.lastIndexOf(a62, a64);
    try { v60["find"](..."find", a65, ...v59, ...v60); } catch (e) {}
    return v57;
}
for (let v135 = 0; v135 < 10; v135++) {
    f61(v56);
}
%OptimizeFunctionOnNextCall(f61);
f29();
const v141 = Math.atan2(Uint32Array, 2);
v141 & v141;
Math.abs(2);
+-10;
v11--;
Math.abs(Uint32Array);
f61(Uint32Array);
