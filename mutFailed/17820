const v2 = new Uint16Array(Uint16Array);
try { new Int32Array(Array, Uint16Array, Int32Array); } catch (e) {}
function f5() {
    const o11 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a10) {
            return v2;
        },
        ...1000000000000.0,
    };
    return Int32Array;
}
%PrepareFunctionForOptimization(f5);
const v13 = new Array(164);
const v14 = v13?.groupToMap;
let v15;
try { v15 = new v14(Int32Array); } catch (e) {}
const v17 = new Set();
class C18 extends Array {
    toString(a20, a21) {
        this || a20;
        return -65537;
    }
    #h;
    [v13] = v17;
    c = v13;
}
const v26 = new C18();
try { v26.toReversed(); } catch (e) {}
const v28 = new C18();
const v29 = new C18();
function f30() {
    return v13;
}
const v31 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
let v32;
try { v32 = v31.groupToMap(v28); } catch (e) {}
function f33(a34, a35) {
    return f33;
}
function f37() {
    const v39 = new BigInt64Array();
    function f41(a42, a43) {
        const o45 = {
            get h() {
                return this;
            },
            [a43]: 4,
            2778757984: a42,
            "h": v39,
        };
        return f41;
    }
    f41(BigInt64Array, v39);
    return f41;
}
Object.defineProperty(Symbol, Symbol.toPrimitive, { configurable: true, value: f37 });
v31[Symbol.toPrimitive] = f33;
const v50 = /nupa\Sc/vms;
function f51(a52, a53) {
    v28.c **= v15;
    class C55 extends Date {
    }
    return v32;
}
v50.constructor = f51;
v50.constructor;
function f58() {
    const o67 = {
        [-4294967297n](a61, a62, a63, a64) {
            eval(a61);
        },
    };
    const v70 = 9 ** 9;
    Math.sqrt();
    9007199254740991 * v70;
    return 164;
}
const v73 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
class C74 {
}
let v75;
try { v75 = C74.toString(); } catch (e) {}
new BigUint64Array(3375);
function f79(a80, a81, a82) {
    a81.h = a82;
    a82.h = v75;
    try { a80.slice(Symbol, a81); } catch (e) {}
    try { a81.entries(); } catch (e) {}
    a81[8] = a81;
    function F85() {
        if (!new.target) { throw 'must be called with new'; }
    }
    [F85,Uint8Array];
    const v90 = new BigInt64Array();
    try { v90.entries(); } catch (e) {}
    const o92 = {
        __proto__: v90,
    };
    try { o92.every(v29); } catch (e) {}
    const o94 = {
        __proto__: a82,
    };
    o94.h = o94;
    return a81;
}
const v95 = f79(v73, v31);
v95.h = 164;
try { v95.pop(); } catch (e) {}
f79(v73, v95, v95);
1073741824 - 1073741824;
new BigInt64Array(1073741824);
