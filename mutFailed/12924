class C3 {
    static #e = "5";
    static #h = "string";
    static 2147483649 = "string";
    6;
    static #b;
    c;
    constructor(a5, a6) {
        ["string" instanceof a5,a5,"-58458",this];
        [[this]];
    }
}
new C3("-58458", "string");
new C3("-58458", "-58458");
new C3("5", "5");
[-1e-15,0.09665934044331337,-1.9819941763612893e+307];
const v19 = new Set();
let [v20,,...v21] = v19;
const v23 = new Map();
v23.values();
[1.7976931348623157e+308,2.0];
const v26 = [-7.640609194073269,-1000000000.0,-2.0,1000000.0,764266.1150283988,-0.0,4.508173322878285e+307,2.0,Infinity,1000000000000.0];
new Map();
const v32 = [601759695];
try { v26["4294967295"](..."4294967295", "4294967295", ...v32); } catch (e) {}
const v36 = new Uint32Array(256);
function f37() {
    v36[3] = "-26733";
    return "-26733";
}
f37();
%OptimizeFunctionOnNextCall(f37);
class C40 {
    static get g() {
        const v42 = (a43, a44) => {
            'use strict';
            try {
                a43.a = this;
            } catch(e45) {
            }
            return a44;
        };
        try {
            var a = super.subarray();
        } catch(e47) {
        }
    }
    static get h() {
        const o91 = {
            "execution": "sync",
            "type": "major",
            1073741824: this,
            "type": "major",
            "a": C3,
            m(a53) {
                a53.f = a53;
                try { a53.next(f37); } catch (e) {}
                a53.c = a53;
                a53.h = a53;
                const o55 = {
                };
                function f56(a57, a58, a59) {
                    return f37;
                }
                try {
                } catch(e60) {
                    const v64 = new Uint8ClampedArray(512);
                    new Uint8ClampedArray(798, ...v64, o55);
                }
                try {
                    const o66 = {
                    };
                } catch(e67) {
                }
                const v69 = Math?.expm1;
                try { new v69(f56); } catch (e) {}
                let v71 = -9007199254740991;
                v71++;
                const v73 = v71 >> v71;
                function f74() {
                    return f74;
                }
                for (let v75 = 0; v75 < 5; v75++) {
                }
                arguments.constructor;
                ([])["concat"]("concat");
                class C81 {
                }
                const v82 = C81.name;
                try { v82.codePointAt(Math); } catch (e) {}
                const v86 = new Int8Array(3938);
                let v87 = 3;
                for (let i = 0; i < 5; i++) {
                    [...v87] = v86;
                }
                const o88 = {
                };
                try {
                    const o89 = {
                    };
                } catch(e90) {
                }
                return v73;
            },
        };
        gc(o91);
        return 268435441;
    }
}
const v93 = new C40();
const v94 = new C40();
const v95 = new C40();
class C98 extends C40 {
    3;
    [v94] = v93;
    ["256"] = v93;
    static #toString(a100, a101, a102) {
        try { a100("256", v95, a100, a102); } catch (e) {}
        Math.atan(16);
        a101 ^ 16;
        return Math.abs(16);
    }
}
new C98();
const v110 = new C98();
const v111 = new C98();
v111 & v93;
if (v110 <= v95) {
    new Uint8ClampedArray(75);
    new Int16Array(6);
    new BigInt64Array(1821);
} else {
    new C98();
    function f125() {
        let v128 = 1864489360 << ("c").toLowerCase();
        const v129 = v128--;
        v128 & v128;
        return v129;
    }
}
