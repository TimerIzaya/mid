const v3 = (a4) => {
    function F5(a7) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.c = a4;
        } catch(e8) {
        }
        try {
            this.b = a4;
        } catch(e9) {
        }
        try {
            this.g = a4;
        } catch(e10) {
        }
    }
    new F5("xAu");
    new F5("function");
    const v13 = new F5(a4);
    return v13;
};
const v14 = [1e-15,-1.2508449375200217e+307,-2.2250738585072014e-308];
const v15 = [-1.7976931348623157e+308,0.0,1000000.0,-78.8362741637203,1000000.0,-1000000000.0,0.8974255261975151,0.3109585085468427];
[1.0,2.220446049250313e-16,-221.6392150076698,362423.1266948187,-4.0,4.67762169666174,1.2703645585889014e+308,464512.6857675116];
class C17 {
    #valueOf(a19, a20, a21, a22) {
        ("a").length;
        %VerifyType(this);
        delete a21[77];
        [9223372036854775807,15,9,-18288,8,-65536,257,-2147483647,268435456,-280318342];
        [850890284,268435456,-2147483649,65535,2147483649,-35569,-2,64,-15,-10];
        [1,-9007199254740992,268435456,7,-4294967297,-2147483648,9007199254740991,78072960];
        return v15[97];
    }
    static {
        super["a"] = v14;
        const t36 = "function";
        t36[5] = "xAu";
    }
}
new C17();
const v32 = new C17();
new C17();
function f38() {
    return v32;
}
[2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
class C40 {
    constructor(a42, a43) {
    }
}
new C40();
const v46 = new C40();
new C40();
const v51 = [];
[];
let v53 = 0;
do {
    try {
        new f38();
    } catch(e55) {
    }
    v53++;
} while (v53 < 1)
v46 << -1557853178;
[3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f62(a63, a64) {
    return f62;
}
f38 != 12n;
Math.exp(v51);
Math.expm1(53222);
const v70 = -53222;
~53222 + v70;
f62();
const v76 = new Set();
function F77(a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a79;
    } catch(e81) {
        for (let [v82,v83] of a79) {
            class C84 {
            }
            const t84 = C84().g;
            t84.length = 1;
            v76.values();
        }
    }
    try {
        this.h = v76;
    } catch(e89) {
    }
    try {
        const v90 = v76[this];
        try {
            new F77(v90, -2046072084n);
        } catch(e93) {
        }
        this.b = Set;
    } catch(e94) {
    }
}
const v95 = new F77();
let [v96,,...v97] = v76;
v95.toString = v97[Symbol.toPrimitive];
new F77();
const v103 = new Float32Array();
for (const v104 of v103) {
    function F105(a107, a108) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v104;
    }
    new F105();
}
Array();
