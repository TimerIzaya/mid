const v0 = [-9007199254740990,52979,1265498779,-2,536870912,3];
const v1 = [9007199254740991,9,-4096,4294967297,-54540,0,-726832024,4294967296,-10788];
const v2 = [2,-7,-65007];
function f3() {
    return v0;
}
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a6;
    } catch(e8) {
    }
    try {
        this.e = v1;
    } catch(e9) {
    }
    try {
        this.c = v2;
    } catch(e10) {
    }
}
const v11 = new F4(v1, v1);
const v12 = new F4(v0, v2);
const v13 = new F4(v1, v0);
let v14;
try { v14 = v2.splice(v13, v13, v13); } catch (e) {}
const v15 = [v12];
[v12,[v14,v15,F4,v15,v1],f3,v13,v13];
v13.h += v14;
new WeakMap();
new Int8Array(16);
class C26 {
    constructor(a28, a29) {
        a29 - a29;
        let v31;
        try { v31 = new a28(-5.869943149384486, a29, a29, a29, ...0.2510089730549625, 512.29276402866); } catch (e) {}
        try {
            super.m(this);
        } catch(e33) {
        }
        a29 = v31;
        try { ("m").match(a28); } catch (e) {}
        try { v31["m"](v31, "m", a28, this, v31); } catch (e) {}
        Math.sign(0.8907211315752046);
        const v42 = -2 & 0.8907211315752046;
        Math.sqrt(0.8907211315752046);
        !-1;
        v42 + v42;
        ~0.8907211315752046;
    }
    [-5.869943149384486];
    c;
    static e;
    h = -5.869943149384486;
}
try { C26.apply(C26); } catch (e) {}
const v49 = new WeakSet();
const o50 = {
};
const v52 = new Proxy(v49, o50);
const v53 = new C26(-5.869943149384486, 0.2510089730549625);
const v54 = new C26();
const v55 = v54?.constructor;
let v56;
try { v56 = new v55(C26, C26); } catch (e) {}
const v57 = new C26(512.29276402866, 512.29276402866);
v52[5] = v55;
try { v56(0.2510089730549625, Map, Map); } catch (e) {}
v49.a |= v56;
const v62 = new Uint8Array(75);
`-9${v55}now${v11}-1024${F4}max${v62}object`;
v11.h /= 512.29276402866;
Object.defineProperty(v53, v2, { writable: true, get: f3 });
v62 * WeakSet;
++F4;
const v71 = F4 >>> -v1;
!7;
const v74 = ~F4 >>> v71;
const v77 = new Uint8ClampedArray(5);
new Int32Array(127);
new Map();
const v83 = new WeakMap();
[v57,v83,v57,C26];
const v85 = [-5.869943149384486,v54];
try { v85.sort(Map); } catch (e) {}
function f89() {
}
const v92 = new Int32Array(60);
new Uint8ClampedArray(1);
const v96 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
function f98(a99, a100, a101, a102) {
    function f103() {
        const o108 = {
            __proto__: v96,
            [a101](a105, a106, a107) {
            },
        };
        o108.copyWithin(o108, o108);
        return o108;
    }
    f103();
    return v96;
}
let v111 = 0;
do {
    v92[v77] = v74;
    try {
        f98(undefined, v55, -5.869943149384486, 14n);
    } catch(e115) {
    }
    v111++;
} while (v111 < 8)
for (let v119 = 0; v119 < 10; v119++) {
    f98(v119, v119, v119, v119);
}
%OptimizeFunctionOnNextCall(f98);
f98("-1073741824", v96, v96);
