function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = F0;
    try {
        this.a = 268435441;
    } catch(e3) {
    }
    new Int8Array(1024);
    const v7 = [1073741824,1073741823,1376142744,1073741825];
    function f8(a9, a10, a11, a12) {
        a11 & a11;
        const v14 = a11 + a11;
        v14 > v14;
    }
    f8(v7, 1024, 1024);
    try {
        this.h = 268435441;
    } catch(e17) {
    }
}
const v18 = new F0();
new F0();
const v20 = new F0();
function f21(a22) {
    v20.h &= a22;
}
Object.defineProperty(v20, "d", { writable: true, set: f21 });
v20.d = v20;
let v23 = 515762.70287082624;
v23++;
const v27 = [-1992323829,9,1235,5,-15,0,268435439,-576076576,4];
try { v27.fill(v18); } catch (e) {}
[512,1,3,536870888,536870912,8,-9223372036854775808,10,-3520,-38702];
const v30 = [-9620,-1185184015,-1273650106,643978355,1018680668,19676,-16060,-1430770089,8,-4];
function f31() {
    return v30;
}
for (let v32 = 0; v32 < 5; v32++) {
    function f33() {
        try { ("1073741824").fixed(); } catch (e) {}
        const v36 = ("1073741824").constructor;
        try { new v36(v32); } catch (e) {}
        const v39 = v36().replaceAll(f33, v32);
        try { v39.slice(v39, v32); } catch (e) {}
        const v41 = v39.toLowerCase(v39, "1073741824", v39);
        v41.g = v41;
        return v41;
    }
    try { f33(); } catch (e) {}
    f33();
    %OptimizeFunctionOnNextCall(f33);
}
