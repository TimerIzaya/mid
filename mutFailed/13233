function f2(a3, a4) {
    Uint8Array instanceof a4;
    function F6(a8) {
        if (!new.target) { throw 'must be called with new'; }
        a8 ^ a8;
    }
    return Uint8Array;
}
Uint8Array[Symbol.toPrimitive] = f2;
const v12 = new Uint8Array(7);
v12.c = Uint8Array;
try {
    v12.c = Uint8Array;
} catch(e13) {
}
const v14 = delete v12[7];
2 & 2;
Float64Array.prototype = Float64Array;
new Float64Array(2);
const v21 = new Float32Array(8);
[-0.0];
const v23 = [2.2250738585072014e-308];
const v24 = [-1e-15,-1.700612993260985e+308,0.0,636614.3832419871,3.0,656603.6718714933];
let v25;
try { v25 = v24.toLocaleString(); } catch (e) {}
/a(?!bbb|bb)c/guis;
const v27 = /[-\xf0\x9f\x92\xa9]+/is;
const v28 = /(\1a)*/guy;
v28.d = v28;
Uint32Array[2] = 1;
v12[Uint8Array];
try { v25(v14, v14, v27); } catch (e) {}
[] = v21;
let {"buffer":v33,"length":v34,...v35} = v21;
v23[37] -= 1;
new Uint32Array(Uint32Array);
