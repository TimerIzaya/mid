function f1() {
    return Math.fround(Math);
}
const v4 = new Set();
([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(-1073741824, -27205);
try { Symbol.keyFor(Symbol); } catch (e) {}
class C13 {
    constructor(a15, a16) {
        for (let v17 = 0; v17 < 500; v17++) {
            [601759695];
            function F19(a21, a22, a23) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F19();
        }
    }
}
class C26 {
    static set c(a28) {
        let v29;
        try { v29 = new a28(a28, a28, a28, "h", v4); } catch (e) {}
        v29 = a28;
        const o33 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o33);
    }
}
const o35 = {
    __proto__: -1073741824,
};
const v36 = [104762.14753807266,-279097.1642774454,5.0,1.0];
const v38 = new Uint8Array(-1073741824);
const v41 = new Int32Array(3289);
const v43 = [v41];
const v45 = Reflect.apply(v36.join, v38, v43);
class C46 extends Int32Array {
}
C46.from(v45);
const v48 = new C26();
const v49 = new C26();
new C26();
class C51 {
    #h = v49;
    #p(a53, a54, a55, a56) {
        %VerifyType(a53);
        delete v48["h"];
        new Uint8ClampedArray(127);
        const v62 = new Set();
        let [v63,,...v64] = v62;
        let v65;
        try { v65 = v64.findLast(); } catch (e) {}
        function f66() {
            return v65;
        }
        new Int32Array(f66());
        new Float64Array(4096);
        new Uint8Array(5);
        class C75 {
        }
        const v77 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
        class C78 {
            constructor(a80, a81) {
                a81[2];
                /Ia[a]/uims;
                let v84 = /W(jy2)/udy;
                v84.flags;
                const v86 = /(u4(?:a?)*)/gudimsy;
                const v89 = new Uint8Array(v86, C78);
                const v91 = new Uint32Array();
                function f92(a93, a94, a95, a96) {
                    const o100 = {
                        ...v89,
                        n(a98, a99) {
                            v91[a93] = v91;
                        },
                    };
                    return o100;
                }
                for (let v101 = 0; v101 < 625; v101++) {
                    f92(Uint8Array, 2, v101);
                }
                v84 = v86;
                for (let v103 = 0; v103 < 25; v103++) {
                    v77["p" + v103] = v103;
                }
            }
        }
        return a54;
    }
}
new C51();
new C51();
new C51();
const v110 = [8];
const v111 = [-1024,-2147483647,-37738,-2,21596,2147483649,9007199254740992,-2039218916];
class C112 {
    static #f;
    static set f(a114) {
        a114(this, this, a114, v110);
    }
    constructor(a117) {
        this.e = v110;
    }
}
try { v4.reduceRight(4294967295, v111, C112); } catch (e) {}
const v122 = new Date(128, 1000.0);
v122.setMonth(1000.0);
