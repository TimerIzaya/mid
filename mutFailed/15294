new Uint8ClampedArray();
let v7 = 1073741824;
class C8 {
    constructor(a10) {
        [a10,v7] = "setUTCMonth";
    }
}
const v11 = new C8(Int16Array);
const v12 = new C8();
function f14(a15, a16, a17) {
    Object.defineProperty(a15, 22, { writable: true, enumerable: true, value: Int16Array });
    a15[22] = a15;
    const o18 = {
        ...a17,
        2: v11,
        268435439: C8,
    };
    return o18;
}
f14(v12, "-65537", v7);
new BigUint64Array(1095);
const v27 = new Int32Array(3);
new Float32Array(260);
function f31() {
}
function f32() {
    return f31;
}
function F36(a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f40() {
            return v27;
        }
        function f41(a42) {
            function F44(a46, a47, a48, a49) {
                if (!new.target) { throw 'must be called with new'; }
                const v50 = this.constructor;
                try { new v50(0, F44, F44); } catch (e) {}
                const t39 = a48.constructor;
                new t39();
            }
        }
        Object.defineProperty(Symbol, "b", { configurable: true, enumerable: true, get: f40, set: f41 });
        try { Symbol.keyFor(Symbol); } catch (e) {}
        try {
        } catch(e57) {
            function f58(a59) {
                return Uint32Array;
            }
        }
        new Uint16Array(93);
        this.a = a38;
    } catch(e62) {
    }
    try {
        this.f = f32;
    } catch(e63) {
    }
}
function f64(a65, a66) {
    const v69 = new BigInt64Array(1303);
    new BigUint64Array(10);
    new Int32Array(1024);
    return v69;
}
f64(-9223372036854775808, 1109859588);
new F36(1109859588);
const v78 = new F36(1109859588);
v78.0x2I = -9223372036854775807;
new F36(1109859588);
function F86() {
    if (!new.target) { throw 'must be called with new'; }
}
const v88 = new F86();
function F89(a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    function f93(a94, a95, a96, a97) {
        ("Vre").charAt();
        const v101 = new Uint8Array(a95);
        for (let v102 = 0; v102 < 5; v102++) {
        }
        let [v103] = v101;
        return f93;
    }
    f93(1095, 1095, f93, f93);
    %OptimizeFunctionOnNextCall(f93);
    function f105() {
        return a92;
    }
    const v106 = f105();
    class C108 {
    }
    const v111 = -4294967296n * 9007199254740991n;
    function F112(a114) {
        if (!new.target) { throw 'must be called with new'; }
        a114 ^ a114;
    }
    new F112(v111);
    const v117 = new C108();
    function f118(a119, a120) {
        a119.BYTES_PER_ELEMENT = a92;
        const v121 = a119.BYTES_PER_ELEMENT;
        class C122 {
        }
        C122.length;
        try { ("0x2I").sup(); } catch (e) {}
        class C127 {
        }
        v78["0x2I"] += NaN;
        function F128(a130, a131) {
            if (!new.target) { throw 'must be called with new'; }
            a130.e = a130;
            const v132 = this?.constructor;
            try { new v132(this); } catch (e) {}
            this.c = a130;
        }
        NaN !== NaN ? NaN : NaN;
        function f136() {
            return -9223372036854775808;
        }
        const v139 = new Uint8ClampedArray(995);
        new Int8Array(v139);
        const v142 = C127.call;
        try { v142(); } catch (e) {}
        class C144 extends C127 {
        }
        try { C144(NaN, v117, NaN, v106); } catch (e) {}
        try {
            v117.__proto__ = v121;
        } catch(e146) {
        }
        function F147(a149, a150) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a150;
            this.e = a120;
        }
        const v151 = new F147(a120, v142);
        const v152 = new F147(v151, v151);
        new F147(v88);
        const v154 = a120?.propertyIsEnumerable;
        try { v154(); } catch (e) {}
        class C156 {
            static m(a158, a159, a160, a161) {
                const v162 = v152.__proto__;
                try { new v154(v162, NaN, a160); } catch (e) {}
                return 1109859588;
            }
        }
        try { C156.call(NaN, v106, v88); } catch (e) {}
        [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
        class C166 {
        }
        try { C166.apply(1.7976931348623157e+308); } catch (e) {}
        Symbol.b = f64;
        Symbol.b = Symbol;
        Symbol.replace;
        const v170 = [];
        try { v170.with(); } catch (e) {}
        new Float64Array();
        const v174 = new Float64Array();
        const v175 = v174.values();
        let v176;
        try { v176 = v175.next(); } catch (e) {}
        return v176;
    }
    function F178() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = 4294967296;
        } catch(e181) {
        }
        try {
            function F182() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v184 = new F182();
            const v185 = new F182();
            function f186(a187, a188) {
                const o189 = {
                    "h": v185,
                    "e": v184,
                };
                return o189;
            }
            const v190 = f186();
            f186(F178, v190);
            function f192() {
                return f186;
            }
            const v195 = new Float32Array(218);
            for (const v196 of v195) {
                Object.defineProperty(v190, Float32Array, { configurable: true, enumerable: true, get: f186, set: f192 });
            }
            this.g = 4294967296;
        } catch(e197) {
        }
        try {
            this.f = 4294967296;
        } catch(e198) {
        }
    }
    %PrepareFunctionForOptimization(f118);
    f118(Uint16Array);
    %OptimizeFunctionOnNextCall(f118);
    f118(v117);
}
new F89();
