new Int8Array(1487);
new Int32Array(2943);
function f14(a15, a16, a17) {
    'use strict';
    return a15;
}
new BigUint64Array(194);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
let v22 = 0;
while (v22 < 8) {
    new Int8Array(-9223372036854775807);
    v22++;
}
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    function f29(a30) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f29 });
    let v33 = 1073741825;
    try {
        %VerifyType(257);
        [3,-9007199254740990,-10,-4294967295,-2147483649,-47876];
        [64,14,-63391,2147483648,-1024,58981,-256,2037616925,536870889,-59797];
        [129,-11,9,-3,-14,16,64,-3];
        v33++;
        let v43 = -1e-15;
        Math.atan2(v43++, -175950080);
        this.b = v33;
    } catch(e46) {
    }
}
let v47 = new F27();
let v48 = new F27();
({"a":v48,"b":v48,...v47} = v48);
const o53 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o53);
new F27();
new Uint8ClampedArray(16);
function f60() {
    new Int8Array(1073741823);
    class C64 {
        #valueOf(a66, a67, a68, a69) {
        }
    }
    const o73 = {
        valueOf(a71, a72) {
        },
    };
}
f60();
%OptimizeFunctionOnNextCall(f60);
f60();
