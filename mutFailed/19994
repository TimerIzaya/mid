function f0() {
}
class C1 extends f0 {
    constructor() {
        let v2 = this;
        const o3 = {
        };
        ("undefined").localeCompare("undefined", o3);
        Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array);
        super();
        v2 ||= v2;
    }
    static d = f0;
    static get f() {
        let v8 = this;
        let v9;
        try { v9 = v8.replaceAll(f0, f0, v8); } catch (e) {}
        v9 = v8;
        v8 <<= v8;
        return f0;
    }
}
const v10 = new C1();
new C1();
let v12 = new C1();
const v14 = new Map();
class C15 {
    [Map] = v14;
    static [Map];
    p(a17, a18, a19, a20) {
        v12 = v10;
        try { a18.n(a17, this, a17, this); } catch (e) {}
        this[191];
        return a19;
        return a20;
    }
    [v10] = C1;
}
new C15();
new C15();
new C15();
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = new BigInt64Array(11);
    v34.lastIndexOf(this);
}
new F26(F26, F26, F26, F26);
