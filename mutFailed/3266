const v1 = new Set();
function f2() {
    const o3 = {
    };
    o3.f = o3;
    return o3;
}
const v4 = /(?:ab){4,7}/gvdimsy;
let v5;
try { v5 = v4.toString(); } catch (e) {}
/a??/gum;
const v7 = /[Aa+b]/gus;
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this?.constructor;
    try { new v12(a10, f2); } catch (e) {}
    try {
        this.c = a11;
    } catch(e14) {
    }
    try {
        this.g = v4;
    } catch(e15) {
    }
}
const v16 = new F8(v7, v7);
v16.b = v16;
const v17 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
const v18 = [-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757];
try { v18.group(v17); } catch (e) {}
const v20 = [v18,v17,v17];
class C21 {
    static get g() {
        super.subarray();
    }
}
try { C21(); } catch (e) {}
new F8(v7, v4);
new F8(v7, v4);
const v27 = [-4.772669377536774,-8.646042458750633,4.0,0.30657689278101374,0.033312406130174055,411.84270704389246,4.0,2.2250738585072014e-308,0.034614683248078704,-0.0];
try { v27.findLastIndex(v16); } catch (e) {}
[0.0,-863997.4524696928,0.48982729210505604,-1.0,0.9356606871971647];
[0.8128123070307706,0.43027853416618733];
[];
-11 << -11;
new f2();
-290435830 / -290435830;
const v37 = typeof -290435830;
try { v37.fontcolor(v37, v20, v5, v1); } catch (e) {}
try { new BigUint64Array(BigUint64Array, Set, v18); } catch (e) {}
new BigUint64Array();
([Infinity]).length;
[479.1899563202203,122841.50659786374,0.6626859918996411,-1000000.0,-1000.0,252.15113272138615,-1e-15,1000.0,364253.4319654517,-9.899777269503376e+307];
[-1.0,1e-15,5.0,1000000.0];
[256,-268435456,7,-778010758,7,16,-65536];
const v49 = async (a50, a51, a52, a53) => {
    'use strict';
    a51 = v27;
    new Uint8Array(3104);
    new BigUint64Array(41);
    new Int8Array(947);
    await Uint8Array;
    return -11;
};
const v64 = [10,-2,256,-4294967295,6,-34566,804990459,-256,-1831978218];
try {
const t0 = 1073741824;
t0(-65535, v64, 1073741824);
} catch (e) {}
do {
    const v70 = !true;
    v70 >>> v70;
    Symbol.for(d8.toPrimitive.description);
    function F77(a79, a80, a81) {
        if (!new.target) { throw 'must be called with new'; }
        const v82 = this.constructor;
        try { new v82(a79, a80, a80); } catch (e) {}
        a79.pop();
        a81.g = a81;
    }
} while (0 < 0)
