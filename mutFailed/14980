class C3 {
    constructor(a5) {
        let v4 = this;
        let v6;
        try { v6 = v4.__defineSetter__(a5, C3); } catch (e) {}
        const v7 = a5 ^ a5;
        try {
            v6.f = v4;
        } catch(e8) {
            e8.name = e8;
        }
        v4 = a5;
        const o9 = {
        };
        v7.d = o9;
        try {
            o9.c = a5;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.c = a5;
            o11.f = "536870888";
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            ([0.4391347154580403,257.99749453941945,-9.996237582361703,-2.2250738585072014e-308,2.0,0.22007729464719739]).b;
            function F19(a21, a22) {
                if (!new.target) { throw 'must be called with new'; }
                const v23 = this?.constructor;
                try { new v23(0.29489550717955537, a21); } catch (e) {}
                try { this.constructor(0.6822080711934364, this); } catch (e) {}
                try {
                    this.f = 3.0;
                } catch(e26) {
                }
            }
            o13.c = a5;
            o13.f = "536870888";
            o13.e = v4;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.f = o28;
            o28.c = a5;
            o28.f = "536870888";
            o28.e = "536870888";
        } catch(e29) {
        }
    }
}
try { C3.apply(C3, -26056); } catch (e) {}
new C3(25659);
const v32 = new C3(25659);
const v33 = new C3(v32);
const v34 = v33?.constructor;
try { new v34("536870888"); } catch (e) {}
536870889n & 536870889n;
12n << 12n;
6 !== 6;
new Uint16Array(6);
new BigInt64Array(2841);
1228 - 1228;
const v51 = new Int32Array(1228);
new Int32Array(Int32Array, Int32Array, Int32Array);
try { Math.expm1(v51); } catch (e) {}
const v56 = ~Int32Array;
v56 / v56;
Math.expm1(v56);
