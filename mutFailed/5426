/abc+Z*/vdmy;
/a*b|c1(ab)((?:ab|cde))/uims;
/(0Y)/vmsy;
new Int32Array(3007);
const v14 = new Float64Array(232);
new Int16Array(6);
const v18 = [-1727815353,-9007199254740991];
[4,13];
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v24 = new Int16Array(-536870912);
try { v24.find(v24); } catch (e) {}
let v28 = 0.6822080711934364 / 0.6822080711934364;
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this?.constructor;
    const v36 = v35?.constructor;
    try { new v36(v35); } catch (e) {}
    try { new v24(0.29489550717955537, a33); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e40) {
    }
}
const v41 = F31?.constructor;
try { new v41(F31); } catch (e) {}
const v43 = new F31("string");
v43.f = v43;
let v45 = 127;
v45++;
const v47 = v45 != v45;
const v50 = new Int32Array(Int32Array);
const v51 = [];
function f52() {
    const o54 = {
        p() {
            return Int16Array;
        },
        [v51]: v51,
        "a": v51,
    };
    const v55 = o54?.constructor;
    try { new v55(v47); } catch (e) {}
    return v51;
}
v41();
f52();
const v59 = f52();
const v60 = (a61, a62) => {
    return v59 * a62;
};
0.6058227007604853 | 0.6058227007604853;
const v66 = -Infinity;
v28++;
new Float64Array(129);
let v71;
try { v71 = v14.entries(); } catch (e) {}
try { v71.next(); } catch (e) {}
255 - 255;
class C75 {
    static [v50] = v66;
}
true || true;
const v78 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o80 = {
    valueOf() {
        return true;
    },
};
v78.length = o80;
class C81 {
}
const o82 = {
};
try { ("Xkz0W").split(v18, -536870912); } catch (e) {}
class C85 {
    set b(a87) {
    }
}
new C85();
const v89 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v89(C75); } catch (e) {}
function f91(a92, a93) {
}
for (const v94 in 0.6058227007604853) {
    function F95(a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e99) {
} finally {
}
