try { new Uint16Array(1000, -13, Uint16Array); } catch (e) {}
const v6 = new Uint16Array(1000);
let v7 = 72;
v7--;
Int8Array.b = Int8Array;
new v6(v7);
try { Uint16Array.bind(v7); } catch (e) {}
new Uint16Array(2);
Uint32Array.prototype = Uint32Array;
const v17 = new Uint32Array(5);
const v20 = new BigInt64Array(7);
try { v20.lastIndexOf(BigInt64Array); } catch (e) {}
163 & 163;
new Float32Array(163);
const v28 = new Uint16Array(9);
new BigInt64Array();
try { new Int32Array(9, 2, 9); } catch (e) {}
const v35 = new Int32Array(182);
const v36 = v35?.constructor;
try { new v36(v35, 5, 5); } catch (e) {}
[Int32Array,v28,v35,BigInt64Array];
const v39 = [9,Int32Array,v35];
try { v39.map(v7); } catch (e) {}
[2086,v39,Uint16Array,v35];
class C43 {
    static c;
}
try { new C43(); } catch (e) {}
const v45 = new C43();
const v46 = new C43();
try { v46.toString(); } catch (e) {}
const v48 = new C43();
const v49 = v48?.constructor;
try { new v49(); } catch (e) {}
class C51 {
    static #n(a53, a54, a55, a56) {
        class C57 {
            4;
            static a;
        }
        C57();
        const t40 = C57();
        t40();
    }
    7 = v48;
    #a = v46;
}
try { C51.propertyIsEnumerable(9); } catch (e) {}
new C51();
new C51();
const v64 = new C51();
v64[7];
[v48];
[v45];
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
}
const v71 = new F68();
const v72 = v71?.constructor;
try { new v72(); } catch (e) {}
const v74 = new F68();
const v75 = new F68();
try { v75.propertyIsEnumerable(v7); } catch (e) {}
function F77(a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    const v81 = a79?.constructor;
    try { new v81(); } catch (e) {}
    const v83 = a80?.__lookupGetter__;
    try { v83(a79); } catch (e) {}
    try { this.constructor(F77, this); } catch (e) {}
    a79.e = a79;
}
F77.arguments = F77;
const v86 = new F77(v75);
v86.length;
const v88 = new F77(v86, v74);
v88.length = Int8Array;
v88.e = v88;
("Hyo9")[1];
try { ("at").match(163); } catch (e) {}
const t81 = "at";
t81[1] = "at";
const v95 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap?.constructor;
let v96;
try { v96 = v95("Hyo9"); } catch (e) {}
[-4.202468609045087];
const v98 = [0.8434386161503777];
try { v98.findLastIndex(v98); } catch (e) {}
const t89 = "4i";
t89[1] = "4i";
const v101 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v101.flat(); } catch (e) {}
function f103(a104, a105, a106, a107) {
    function f108() {
        let v110 = Float64Array;
        v110 = a105;
        const v111 = a105.length;
        const v112 = v111 >>> v111;
        v112 / v112;
        const o114 = {
        };
        ([])["concat"]();
        try { new Uint8Array(f108, f108, v17); } catch (e) {}
        const t104 = "4i";
        new t104(105);
        let v122 = -268435456;
        const v123 = v122--;
        const o124 = {
            "e": -4294967295,
            "e": v122,
        };
        const v125 = o124?.__lookupGetter__;
        try { new v125(v123); } catch (e) {}
    }
    const v127 = f108();
    %OptimizeFunctionOnNextCall(f108);
    return v127;
}
f103();
f103();
try { ("RpXR").codePointAt(Uint16Array); } catch (e) {}
const t122 = "RpXR";
t122[1] = "RpXR";
const v133 = ("c")?.toLocaleUpperCase;
try { v133(); } catch (e) {}
class C136 {
    constructor(a138) {
        ("valueOf").localeCompare(a138, "valueOf");
    }
}
C136.g = C136;
const v140 = new C136();
const v141 = v140.constructor;
try { new v141(v96); } catch (e) {}
new v141(C136);
