function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -321.1904783644226;
    } catch(e12) {
    }
    try {
        this.b = a9;
    } catch(e13) {
    }
}
const v14 = new F6(268435439, 512.8963048715143, -321.1904783644226, 512.8963048715143);
%VerifyType(-6);
-321.1904783644226 ^ -321.1904783644226;
try {
    const o16 = {
    };
    v14.fuck(o16, o16, o16, "10");
} catch(e19) {
}
const v20 = new F6(-6, 512.8963048715143, -321.1904783644226, 509353.75948617444);
new F6(-6, -321.1904783644226, -321.1904783644226, 512.8963048715143);
function f22(a23, a24) {
    const o52 = {
        ...v20,
        o(a26, a27, a28, a29) {
            let v33 = super[-6];
            -6 > 14;
            const o37 = {
                "maxByteLength": 2500602926,
            };
            const v39 = new ArrayBuffer(1753, o37);
            new Uint8ClampedArray(v39);
            v33 -= f22;
            let v44 = 28584;
            v44++;
            const v46 = -11 || a28;
            Math.log10(a28);
            Math.min(a24);
            a28 << -11;
            (a28 ^ v46) && a28;
            return v20;
        },
    };
    return o52;
}
f22(f22(f22(F6, -12), -12), 268435439);
BigInt64Array[Symbol.toPrimitive] = f22;
function f60() {
    const o62 = {
        __proto__: 2,
    };
    o62.e = o62;
    const v63 = new Uint16Array();
    const t54 = -12;
    t54[1] = v63;
    return BigInt64Array;
}
const v65 = new BigInt64Array(218);
v65.sort(f60);
