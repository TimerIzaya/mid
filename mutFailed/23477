new Uint32Array(12);
new Uint32Array(3);
new Int32Array(10);
const o18 = {
};
let v19 = 1000;
const v21 = new Uint32Array();
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "d", { configurable: true, enumerable: true, value: v21 });
    try {
        this.d = a33;
    } catch(e35) {
    }
    ~F30;
    Uint32Array << a34;
    [,...v19] = v21;
}
new F30(426155202, 128, Uint8ClampedArray);
const t19 = 426155202;
new t19(426155202, 128, 2305);
new F30(4294967296, 2305, v19);
function f41() {
}
class C42 extends f41 {
    toString(a44, a45) {
        -this;
    }
}
const v47 = new C42();
try { v47.toString(); } catch (e) {}
