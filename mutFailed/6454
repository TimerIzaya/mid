const v0 = [-8.023575744540347e+305,-975306.6370352916,0.0,215.4193745856894,1e-15];
const v1 = [0.4048618645096739,1000000000000.0,1e-15,2.75254638125053e+307];
const v2 = [-1.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    a5[4];
    const v7 = this?.constructor;
    try { v7.call(v1); } catch (e) {}
    try { new v7(v0); } catch (e) {}
    try {
        this.b = F3;
    } catch(e10) {
    }
    try {
        this.c = v2;
    } catch(e11) {
    }
}
F3.length = F3;
const v12 = new F3(v0);
new v2(v2);
new F3(v2);
[1324064311,65536];
[-12740,536870912,-65536,-65537];
[-9223372036854775807,-1,-1002723234,-9223372036854775807,34157,-497344552,4294967297,1089768587];
let v19 = 4n;
v19--;
function f22() {
    return v1;
}
v12.arguments = f22;
for (let v24 = 0; v24 < 25; v24++) {
    const v25 = [601759695];
    const v26 = [1073741824,1073741823,1376142744,1073741825];
    try { v26.fill(v19); } catch (e) {}
    function f28(a29, a30, a31, a32) {
        try { v26["find"](..."find", a32, ...v25, ...v26); } catch (e) {}
        const v37 = Symbol.isConcatSpreadable;
        Symbol.for(v37.description);
        const v41 = v37.description;
        const v42 = Array(a31);
        try { v42.groupToMap(v37, v41, f28, v42, v37); } catch (e) {}
        return v25;
    }
    for (let v44 = 0; v44 < 5; v44++) {
        v44 >>> v44;
        f28()[0];
    }
}
