new Int8Array(2318);
199 % 199;
const v6 = new Int8Array(199);
0 << 0;
const v10 = new Int32Array(0);
try { v10.entries(); } catch (e) {}
[1010720460n,v6,268435441n];
const v16 = [Int32Array];
v16[0] = v16;
const v17 = [v10,v6];
v17.length = v17;
let v20 = -1;
v20++;
function F22(a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.constructor;
    try { new v25(this); } catch (e) {}
    a24 >>> a24;
    const v28 = this.constructor;
    try { new v28(-143547321); } catch (e) {}
    a24 - a24;
    this.g = -1517929768;
    try {
        this.g = v20;
    } catch(e31) {
    }
    try {
        this.h = a24;
    } catch(e32) {
    }
}
let v33;
try { v33 = F22.bind(-143547321); } catch (e) {}
try { v33(v10); } catch (e) {}
const v35 = new F22(v20);
for (let i47 = 0, i48 = 10;
    i47 < i47;
    (() => {
        for (let v52 = 0; v52 < 5; v52++) {
            function f53(a54) {
                return f53;
            }
        }
    })()) {
}
const v57 = new F22(-143547321);
v57.d = v57;
new F22(v20);
class C59 extends F22 {
    #p(a61, a62) {
        const v63 = a61?.[32];
        Object.defineProperty(v57, v35, { writable: true, configurable: true, value: F22 });
        return v63;
    }
    [v20];
    static {
        let v66;
        try { v66 = this["n"](-1517929768); } catch (e) {}
        const o67 = {
        };
        const o68 = {
            "c": v35,
            ...v66,
            65537: o67,
            __proto__: this,
            "a": this,
            "g": this,
            ...this,
        };
    }
}
try { C59(); } catch (e) {}
new C59();
const v71 = new C59();
v71.g;
new C59();
const v75 = new Map();
function f76(a77, a78, a79, a80) {
    a77 >>> a77;
    a80--;
    const o96 = {
        "c": -143547321,
        toString(a84, a85, a86, a87) {
            let v83 = this;
            a85 << -1557853178;
            let v91 = v83++;
            Math.log2(v91);
            const v93 = v91++;
            Math.pow(v91, -1557853178);
            F22 ^ v93;
            return a87;
        },
        "b": v71,
    };
    try { o96.toString(v75, a77, v57, v57); } catch (e) {}
    return o96;
}
f76(-1517929768, -1517929768, F22, v20);
const v99 = f76(-1517929768, -143547321, F22, -1517929768);
v99.f;
f76(-1517929768, -1517929768, v99);
("HEkWL").localeCompare("isArray", "isArray");
