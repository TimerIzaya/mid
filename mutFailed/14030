class C3 {
    toString(a5) {
        try { new a5(); } catch (e) {}
        super.g = "m";
        return false;
    }
    static #p(a9, a10) {
        try { a9["o"](-214.08561302033434, -214.08561302033434, this); } catch (e) {}
        try {
            this.valueOf = a10;
        } catch(e13) {
        }
        return "o";
    }
}
const v14 = new C3();
const v15 = new C3();
new C3();
const v17 = [-5105,-65536,512,536870887,128,1108608188,60880,12,5];
[536870887,-943161682,-5,-65536,-48997,-2147483648,1083293276];
const v19 = [1440356969];
new Map();
const o22 = {
};
class C24 {
}
const v25 = o22.constructor;
const v27 = 1922 % 1922;
const v28 = v27 == v27;
for (let v29 = 0; v29 < 25; v29++) {
    function f30() {
        return f30;
    }
    function f31(a32, a33, a34, a35) {
        a33.freeze(f30);
        let v37 = 0;
        do {
            try {
                v17.length = 1922;
            } catch(e38) {
            }
            v37++;
        } while (v37 < 9)
        a35 + a35;
        function f43() {
        }
        const v45 = -f43.length;
        const v47 = f30().constructor;
        let v48;
        try { v48 = v47(); } catch (e) {}
        const v50 = v48.bind().bind();
        v47 * v28;
        const v52 = typeof f43;
        v52.italics(v52, v45, v50);
        const v55 = v52 === "n";
        const v57 = new Int8Array();
        const v58 = v57.entries();
        v58.next();
        v58.next(1.185961373472971e+308);
        function f61() {
            return f30;
        }
        const v62 = f61();
        const v63 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
        function f65(a66, a67, a68) {
            const v70 = [Array,a68];
            Reflect.apply(v63.filter, v62, v70).find(v48);
        }
        f65.caller = f65;
        [];
        const v77 = ("find").blink().replaceAll;
        try { v77(v55); } catch (e) {}
    }
    f31 &= f31;
    try {
        v19.reduceRight(f30);
    } catch(e80) {
    }
    for (let v81 = 0; v81 < 5; v81++) {
        f31(v81, v25, v25, 1922);
    }
}
C24 = C3;
Map >> C3;
let v84;
try { v84 = v14.toString(1000000000000.0); } catch (e) {}
v17.flat(v15, v84, v84, C3, 1000000000000.0, C24);
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
