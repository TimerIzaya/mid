new Float64Array(0);
Int16Array.prototype = Int16Array;
new Int16Array(-22687);
class C8 {
}
function f9() {
    return f9;
}
class C10 extends f9 {
}
class C11 extends C10 {
}
function f12(a13, a14, a15, a16) {
    a13.a = a13;
    try { a13(C11, f9); } catch (e) {}
    let v18 = a14 & a14;
    v18++;
    const o23 = {
        n(a21, a22) {
            return this;
        },
    };
    return f9;
}
new Uint8ClampedArray(7);
for (let v27 = 0; v27 < 25; v27++) {
    Promise.reject(Promise);
}
const o33 = {
    n(a31, a32) {
        return 0;
    },
};
const v34 = BigInt64Array.name;
function f35(a36, a37, a38, a39) {
    %OptimizeFunctionOnNextCall(a38);
    return a37;
}
v34 - v34;
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a44;
    } catch(e47) {
    }
    try {
        this.h = a46;
    } catch(e48) {
    }
}
new F42(Float64Array, Int16Array, v34);
new F42(C8, C11, Uint8ClampedArray);
new F42(C11, C8, SharedArrayBuffer);
const v52 = new SharedArrayBuffer();
const v54 = v52.constructor;
try { new v54(-15); } catch (e) {}
const v56 = new BigInt64Array(3001);
try { v56.values(); } catch (e) {}
const v60 = new Uint32Array(3);
for (let i62 = 0; i62 < -1073741824; i62++) {
    v60[i62] = v34;
}
257 ^ 257;
try { Int16Array.bind(Int16Array); } catch (e) {}
new Int16Array(257);
new BigUint64Array(4);
function F76(a78, a79, a80, a81) {
    if (!new.target) { throw 'must be called with new'; }
}
const v82 = new F76();
const v83 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v84 = 0; v84 < 5; v84++) {
    function f85() {
        try {
            v83.forEach(F76);
        } catch(e87) {
            e87.charCodeAt(v82);
        }
        Int32Array.bind().name;
        function f92() {
            for (let v93 = 0; v93 < 5; v93++) {
                function f94() {
                    return v93;
                }
                f94.a = v93;
            }
            return f92;
        }
        f92();
        %OptimizeFunctionOnNextCall(f92);
        return F76;
    }
    f85();
    %OptimizeFunctionOnNextCall(f85);
}
