function f0() {
    const t1 = "we3R";
    t1[544948.2768085275] = -1.187102817546368e+308;
    [[2.220446049250313e-16,1000000.0,-832083.505850983,0.4718386381385684,1000.0,-5.0,9.814259698721895e+307,-659970.7982908424,-5.0]];
    const o9 = {
        [0.9547323086282865]: 0.9547323086282865,
        "e": "1000",
        "h": "1000",
        ..."1000",
        ..."1000",
        "a": 0.9547323086282865,
        "d": -28023,
        ..."1000",
        "b": 0.9547323086282865,
        __proto__: "1000",
        "f": 0.9547323086282865,
        [-28023]: -28023,
        "c": 0.9547323086282865,
        "g": "1000",
        ["1000"]: f0,
    };
    return o9;
}
const v10 = f0();
const v11 = v10();
const v12 = f0();
class C16 extends f0 {
    static d = v10;
    p(a18, a19) {
        let v17 = this;
        const v20 = v17--;
        function F21(a23, a24, a25, a26) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v17;
            } catch(e27) {
            }
        }
        const v28 = new F21(v12, -5.053767964527524e+307, v10, 1e-15);
        const v29 = new F21(v11, a18, v28, 1e-15);
        new F21(v29, a18, v10, v20);
        return v10;
    }
    static [-1];
}
new C16();
new C16();
new C16();
for (let v40 = 0; v40 < 5; v40++) {
    function f41() {
        for (let i44 = 0, i45 = 10;
            (() => {
                try {
                    0 ^ (0 <= 0);
                    (128 !== 128) || i44;
                } catch(e52) {
                }
                const v53 = i44 < i45;
                f41 || v53;
                return v53;
            })();
            ) {
            ("-9223372036854775807").lastIndexOf(-7);
            let v62 = i44++;
            const v63 = v62++;
            v63 !== v63;
            Reflect.construct(Date, [16,-10,-6213,1011165079,9007199254740990,10,12]);
            function f69() {
                59817n < undefined;
                return 59817n;
            }
            %PrepareFunctionForOptimization(f69);
        }
        const v76 = new Int16Array(41);
        v76.fill(725);
        return f41;
    }
    f41();
    %OptimizeFunctionOnNextCall(f41);
}
