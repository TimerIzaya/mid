function f0() {
    new Date(5);
    let v4 = "atan2";
    v4++;
}
536870912n << 536870912n;
const v12 = [155533.8602852358,2.0];
for (const v17 of Array(19793)) {
    v12[658291203] = null;
}
function f20() {
    return f0;
}
class C21 extends f20 {
    constructor(a23, a24) {
        super();
        let v25 = 10;
        for (;
            (() => {
                const v26 = v25--;
                const v28 = [-4.0,-3.0,-7.745906537435259,-1.2266228113922306e+308,-Infinity,-2.0,-2.0,1e-15,-694511.6819848374,-2.0];
                const o31 = {
                    "maxByteLength": 2119,
                };
                const v33 = new SharedArrayBuffer(255, o31);
                new Uint8ClampedArray(v33);
                v28 ^ "-792442332";
                function f38() {
                    return Date;
                }
                return v26;
            })();
            ) {
            -2147483648 !== 268435456 ? -2147483648 : 268435456;
            ("toUTCString")[Symbol.replace];
        }
    }
}
const v44 = new C21("defineProperty", "toUTCString");
new C21(v44, "toUTCString");
new C21("object", "toUTCString");
Math.atan("toUTCString");
Math.log1p(0.04879611221991542);
new WeakMap();
new Uint8ClampedArray();
function F56(a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    function F61(a63, a64) {
        if (!new.target) { throw 'must be called with new'; }
        function f65(a66, a67, a68) {
            for (let i = 0; i < 10; i++) {
                const o69 = {
                };
            }
            try {
                f65(F56, a66, a64);
            } catch(e71) {
            }
            return a67;
        }
        f65();
    }
    new F61();
}
/a\w/gudsy;
const v75 = /ka{0}/guims;
const v76 = /ab|c/udmy;
class C77 {
}
const v78 = new C77();
const v79 = new C77();
function f80(a81, a82) {
    const o83 = {
        ...v75,
        "d": v79,
        "c": v44,
        "g": a82,
        "f": a81,
        "a": v78,
        7: C77,
        __proto__: f20,
        "e": v75,
        "b": a82,
    };
    return o83.call();
    try { Map(); } catch (e) {}
    const v88 = new Map();
    function f89(a90, a91, a92, a93) {
        a92.arguments = a92;
        a90[3];
        a92.caller = a92;
        const o101 = {
            n(a96, a97, a98, a99) {
                for (let v100 = 0; v100 < 10; v100++) {
                }
            },
            16: a90,
            ...v88,
        };
        return o101;
    }
    const v102 = f89("m", "m", f89);
    const v104 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v105 = [601759695];
    try { v105.sort(v105); } catch (e) {}
    v105[0] = v105;
    const v107 = [1073741824,1073741823,1376142744,1073741825];
    function f109(a110, a111, a112, a113) {
        arguments.toString();
        function f116() {
            const v118 = ("Vre")?.toLocaleUpperCase;
            try { new v118(); } catch (e) {}
            try { ("Vre").fixed(); } catch (e) {}
            let v122 = -268435456;
            v122--;
            -(v122 + v122);
            const o139 = {
                "c": -4294967297n,
                [522675525n](a127, a128) {
                },
                ..."Vre",
                "maxByteLength": 19793,
                "c": v105,
                valueOf(a130, a131) {
                },
                "e": -4294967295,
                "e": v122,
                "maxByteLength": -4294967295,
                "arguments": v104,
                ...v105,
                "type": "Vre",
                ..."Vre",
                valueOf(a133, a134) {
                },
                ..."Vre",
                4: "Vre",
                "c": v122,
                "type": "Vre",
                toString(a136, a137, a138) {
                },
                6: v122,
            };
            try { o139.valueOf(o139, 19793); } catch (e) {}
            return "Vre";
        }
        f116.length;
        f116();
        const v144 = new Int8Array();
        try { v144.findIndex(v102); } catch (e) {}
        %OptimizeFunctionOnNextCall(f116);
        ("find").strike();
        try { v107["find"](..."find", a113, ...v105, ...v107, ...522675525n); } catch (e) {}
    }
    %OptimizeFunctionOnNextCall(f109);
    return o83;
}
%PrepareFunctionForOptimization(C21);
function F151(a153, a154) {
    if (!new.target) { throw 'must be called with new'; }
    const v155 = this.constructor;
    try { new v155(this, a154); } catch (e) {}
    this.c = a153;
}
const v157 = new F151(18074, 28602970);
const v158 = new F151();
new F151(v158, v157);
f80(v76);
const v161 = f80(v76);
%OptimizeFunctionOnNextCall(f80);
f80(v161, 7);
