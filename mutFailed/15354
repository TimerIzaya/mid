const v0 = [];
new Uint32Array(162);
112 & 112;
new Float32Array(112);
const v9 = 2089 & 2089;
const v11 = new Uint8ClampedArray(2089);
const v12 = v11[382];
new Uint8Array(582);
v12 >>> 4068;
const v19 = Symbol.species;
v0[v19] = v19;
new Uint8Array(4068);
Int32Array[Symbol.toPrimitive] = Symbol;
v9 < Int32Array;
typeof 112 === "symbol";
try {
    const t16 = "symbol";
    t16.toString = v12;
} catch(e33) {
}
const v34 = new Int32Array(255);
v34[149] = v34;
let v35 = -14;
v35 & v35;
class C37 {
}
C37.b = Uint8ClampedArray;
C37[2] = 162;
function f42(a43, a44, a45, a46) {
    return a46;
}
({"b":f42,"f":v35,} = C37);
