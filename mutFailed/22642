const t0 = "bigint";
t0[1] = "bigint";
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf("8BVLc"); } catch (e) {}
    a9 == a9;
    try {
        const t7 = "unscopables";
        t7.h = a9;
    } catch(e12) {
    }
    try {
        this.d = "function";
    } catch(e13) {
    }
    try {
        this.f = "unscopables";
    } catch(e14) {
    }
}
try { new F6("o", "-9223372036854775808"); } catch (e) {}
const v16 = new F6("bigint", "function");
const v17 = new F6("function", F6);
const v18 = v16?.h;
try { new v18(v16, v17); } catch (e) {}
const v20 = new F6("o", v17);
v20.h = v20;
class C21 {
    o(a23, a24, a25) {
        const v26 = a23.d;
        const v27 = v26.__proto__;
        try { v26(v27, "o", v27); } catch (e) {}
        new Uint8ClampedArray(4096);
        new Uint32Array(204);
        new Int32Array(4096);
        return "o";
    }
}
try { C21.toString(); } catch (e) {}
new C21();
new C21();
new F6();
const v44 = [-1000.0,1000000.0,2.220446049250313e-16,614071.3005355855,-1.0,2.220446049250313e-16];
const o45 = {
};
const v47 = new Proxy(v44, "bigint");
const v48 = v47?.copyWithin;
try { new v48(9, C21); } catch (e) {}
~-2n;
try { Uint32Array.bind("8BVLc"); } catch (e) {}
3095 >>> 3095;
2147483647 + 2147483647;
116 != 116;
7 | 7;
const o87 = {
    [-12n](a81, a82, a83, a84) {
        eval(v47);
    },
};
try { Int32Array.of(); } catch (e) {}
