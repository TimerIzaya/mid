[2.5268322290918412,-1.4950034134159677e+308,-1.7976931348623157e+308,2.220446049250313e-16,1.6926378449061263e+308,1.0,448439.83030297444,1e-15];
const v1 = [-1.0];
const v2 = [-320491.58645217645,-1000000.0,-37319.07102996553,2.642595330366774e+307,2.1735422961930627e+307,0.9061789187232218,-3.417929137463882,1.7976931348623157e+308,-3.0,2.2250738585072014e-308];
class C3 {
    2147483647 = v2;
    static [v1] = v2;
    set d(a5) {
        %VerifyType(268435439);
    }
    #c;
    #h;
}
new C3();
new C3();
new C3();
[56163,-65535,-2,-268435456];
[128,-1401194057,-268435456,-35334,1];
[-34788,28638];
new Uint16Array(3211);
new BigUint64Array(12);
const v24 = new Float64Array(5);
let v25 = -2147483648n;
class C27 {
    static m(a29) {
        ({"a":C27,"h":v25,} = this);
    }
}
const v30 = new C27();
const v31 = new C27();
class C32 {
}
function f33() {
    C3.e >>= 12;
    return v24.buffer;
}
C32[Symbol.iterator] = f33;
const o37 = {
};
o37.b = Float64Array;
o37.b = v30;
const o38 = {
};
Object.defineProperty(o38, "b", { writable: true, value: v31 });
const v39 = new C32();
v39.constructor = Symbol;
let v40;
try { v40 = v39.constructor(); } catch (e) {}
const v41 = new C32();
const v42 = v41.__lookupGetter__;
let v43;
try { v43 = v42(); } catch (e) {}
const v44 = new C32();
function f45() {
    return ~268435440n;
}
v44.constructor = f45;
const v48 = v44.constructor;
Object.defineProperty(v48, Symbol.iterator, { configurable: true, value: Symbol });
new v48(C27, v40, C32, o37);
const v54 = new Float32Array();
try { v54.forEach(v43, v31); } catch (e) {}
const v58 = new BigUint64Array();
Object.defineProperty(v58, "constructor", { value: f33 });
let v59;
try { v59 = v58.filter(v48); } catch (e) {}
class C60 {
}
const v61 = new C60();
const v62 = v61.__lookupGetter__;
try { v62(); } catch (e) {}
function f64(a65) {
    return a65;
}
const v66 = v61.constructor;
new v66(v43);
const v68 = new C60();
v68.propertyIsEnumerable(v66, v59, o38);
const v70 = new C60();
const t78 = v70.constructor;
const v72 = new t78();
const v73 = /[\11]/gm;
v73.e = v73;
const v74 = /a(?!bbb|bb)c/vi;
Object.defineProperty(v74, "toString", { value: f64 });
const v75 = v74.toString;
const v76 = new v75(BigUint64Array, 246, C27, v74, v75);
const v77 = v76.__lookupGetter__;
try { v77(); } catch (e) {}
const v80 = new Uint16Array(C32);
const v81 = v80[1];
v81 & v81;
const v85 = new Int32Array(v72, 31, 560);
v85[30];
function f87() {
    return Int32Array;
}
const v88 = f87();
v88.e = v43;
v88.e = v88;
const t99 = f87().e;
new t99();
