Object.defineProperty(Int8Array, 2, { configurable: true, enumerable: true, value: 10 });
const v2 = new Int8Array(10);
210 === 210;
function f6() {
    function f7(a8, a9) {
        function F10() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 268435440;
        }
        const v13 = new F10();
        v13.h;
        return Int8Array;
    }
    return f7;
}
Object.defineProperty(Int32Array, Symbol.toPrimitive, { writable: true, configurable: true, get: f6 });
const v17 = new Int32Array(210);
try { v17.join(10); } catch (e) {}
try { new Float32Array(Int8Array, v17, 10); } catch (e) {}
const v22 = new Float32Array(5);
function f23(a24, a25) {
    return v22;
}
v22[Symbol.toPrimitive] = f23;
try { v22.slice(210, Int32Array); } catch (e) {}
/(\xed\xb0\x80)\x01/vdim;
const v33 = /}/gims;
const v34 = /1*/udisy;
class C35 {
    constructor(a37, a38, a39, a40) {
        this.g = this;
        a37[Symbol.toPrimitive] = Symbol;
        try { this.propertyIsEnumerable(a38); } catch (e) {}
        a37.g = a37;
        a38 >>> a38;
        a39 >>> a39;
        a40 >>> a40;
        v34[v34] = this;
        a37[v22];
    }
    static #toString(a49, a50, a51) {
        if (5 != a51) {
            let v56 = a50 - -12;
            Math.asin(v56);
            const v58 = -31324;
            Math.log(v58);
            ++v56;
            Math.floor(v58);
        } else {
            try {
                super.o(210, 210);
            } catch(e63) {
            }
        }
        return v2;
    }
}
new C35(v33, 5, 10, 210);
const v65 = new C35(v33, 5, 210, Int32Array);
Object.defineProperty(v65, "g", { enumerable: true, value: v33 });
new C35(v65, 10, 5, v33);
for (let v68 = 0; v68 < 5; v68++) {
    function f69() {
        const v71 = Array();
        try { v71.findLast(v22); } catch (e) {}
        v71[3] = 65535;
        const v73 = v71.pop();
        v73 > v73;
        return v73;
    }
    let v75 = f69();
    v75--;
    %OptimizeFunctionOnNextCall(f69);
}
