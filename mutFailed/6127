function f3() {
    return "match";
}
class C4 extends f3 {
    constructor(a6) {
        super();
        super[this];
    }
    valueOf(a9, a10) {
        super.length &&= a10;
        [1163217695,2147483649,-9223372036854775808,3,512,4,-62126];
        [-9007199254740990,-412605800,-4294967295,37250,21860,-1490628282,64,-56158,-7746,4];
        [-2147483647,-4294967297,-1295338222,-18187,129];
        return "match";
    }
}
const v14 = new C4("match");
new C4(v14);
const v16 = new C4(v14);
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a21;
    } catch(e23) {
    }
}
new F17(v16, v14, v16, "match");
class C25 {
}
const v29 = new Uint8ClampedArray();
function f30(a31, a32) {
    const o37 = {
        [C25]: Float64Array,
        4: 6,
        "b": a32,
        [v29](a34, a35, a36) {
        },
    };
    return o37;
}
f30();
new F17(v14, v14, "e", v16);
new F17("e", v16, v14, v14);
function f41(a42, a43, a44, a45) {
    function f47() {
        return arguments;
    }
    const v49 = new Int8Array();
    v49.buffer;
    %OptimizeFunctionOnNextCall(f47);
    a44.codePointAt(f41);
    return arguments;
}
for (let v53 = 0; v53 < 10; v53++) {
    f41();
}
%OptimizeFunctionOnNextCall(f41);
f41();
f3();
F17 /= F17;
const t60 = "k7el1";
t60[v16] = "match";
