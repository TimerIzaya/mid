const v2 = new Uint32Array(4);
Uint16Array[2] = Uint16Array;
new Uint16Array(1000);
let v8;
try { v8 = new Int16Array(Int16Array, Uint32Array, Int16Array); } catch (e) {}
new Int16Array(169);
853409515 >> 853409515;
-65537 + -65537;
const v17 = new Int16Array(620);
v17[65];
-127;
try { new Int16Array(Uint16Array, Int16Array, v2); } catch (e) {}
new Int16Array(127);
const v26 = new BigInt64Array(109);
function F27() {
    if (!new.target) { throw 'must be called with new'; }
}
function f30(a31) {
    new Uint8Array(1073741823);
    return v26;
}
Int32Array[Symbol.iterator] = f30;
const v37 = new Int32Array(Int32Array, v8);
Reflect.setPrototypeOf(v37, F27);
