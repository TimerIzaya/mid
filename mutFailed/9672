class C3 {
    #valueOf(a5) {
        try {
            this.b = this;
        } catch(e6) {
        }
        return 65120;
    }
    #f = 65120;
    #g;
    4294967295 = -9223372036854775808;
}
const v7 = new C3();
new C3();
const v9 = new C3();
class C10 {
    [-9223372036854775808];
    set d(a12) {
        for (const v13 in 65120) {
        }
    }
    get g() {
        Object.defineProperty(C3, "f", { configurable: true, value: v9 });
        super[this] = v7;
        for (let v15 = 0; v15 < 32; v15++) {
            const v17 = "p" + v15;
            for (let v18 = 0; v18 < 5; v18++) {
                new Date(v18, 1000.0);
            }
            this[v17] = v15;
        }
        return v9;
    }
}
new C10();
new C10();
new v9();
const v28 = new Int8Array(268435456);
const v30 = new Float32Array();
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    try { new v37(v30, a35, 2); } catch (e) {}
    this.h = a34;
}
const v39 = new F31(v28, Int8Array, F31, v30);
const o40 = {
};
const v43 = new Int16Array(1000);
class C46 extends Float64Array {
    constructor(a48, a49, a50, a51) {
        super(v43);
    }
    [65] = Float64Array;
}
function f52(a53, a54, a55) {
}
const v58 = [v39];
const o59 = {
    "arguments": v58,
    "type": "function",
};
new Worker(f52, o59);
const o61 = {
};
Symbol.isConcatSpreadable;
function f64() {
    return f64;
}
v7[C3] = C10;
const o69 = {
    "execution": "sync",
    "type": "minor",
};
gc(o69);
