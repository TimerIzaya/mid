const v7 = new BigUint64Array(4);
v7.reverse();
for (let v9 = 0; v9 < 10; v9++) {
    function F11(a13, a14) {
        if (!new.target) { throw 'must be called with new'; }
        this.b = 4;
        this.b = "b";
        this.d = a14;
    }
    const v15 = new F11();
    const o16 = {
        ...v15,
    };
}
const v17 = new Int16Array(6);
const v20 = new Float64Array(222);
function f21(a22) {
    new Date(-12 % -12);
    return v17;
}
v20[Symbol.toPrimitive] = f21;
class C31 {
    #m(a33, a34, a35) {
        for (const v36 in this) {
            (delete this?.h).__proto__;
        }
    }
}
const v39 = new C31();
const v40 = new C31();
v40[Symbol.toPrimitive] = Symbol;
const o82 = {
    "h": v39,
    [v40](a44, a45, a46) {
        super[3];
        Array(1102693041);
        switch (128) {
            default:
                break;
        }
        const v52 = new BigUint64Array();
        const v53 = /anVXYFzN(x)(x)(x)\3/gvdms;
        try { v52.reduceRight(v53); } catch (e) {}
        const v55 = [536870888,8];
        const v56 = [2147483649,2147483649,-65537,-268435456,10,9223372036854775807];
        function f57(a58) {
            const o62 = {
                set g(a60) {
                },
                get g() {
                    return a58;
                },
                __proto__: a58,
                ...v55,
                4096: v56,
            };
            const v64 = new BigUint64Array();
            const v65 = /anVXYFzN(x)(x)(x)\3/gvdms;
            try { v64.reduceRight(v65); } catch (e) {}
            /4H/gvisy.compile(/[m]/gvdimsy);
            return o62;
        }
    },
    set b(a71) {
        function f72(a73) {
            return f72;
        }
        class C74 extends f72 {
        }
    },
    [v20]: v39,
    __proto__: C31,
    "c": 9,
    set h(a76) {
    },
    o(a78) {
        const o80 = {
        };
        gc(o80);
    },
};
new Uint8ClampedArray(231);
const v88 = new Uint8Array(208);
new BigInt64Array();
for (const v91 of v88) {
    for (let v92 = 0; v92 < 5; v92++) {
        v91["p" + v92] = v92;
    }
}
new Float64Array();
