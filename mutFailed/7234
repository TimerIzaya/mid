/ofoo[z]*/usy;
const v1 = /[^123]/gudims;
const v2 = /I(?:a+)?/guisy;
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
Uint8ClampedArray.prototype = Uint8ClampedArray;
let v5;
try { v5 = Uint8ClampedArray(Uint8ClampedArray, v2, v1); } catch (e) {}
const v6 = new Uint8ClampedArray(16);
function f7(a8) {
    try { new a8(); } catch (e) {}
    const v11 = new Map();
    const o12 = {
        ...v11,
    };
    return o12;
}
v6.valueOf = f7;
v6[9];
const v16 = new Int32Array(522);
try { v16.set(Int32Array); } catch (e) {}
try { Int32Array.bind(818); } catch (e) {}
new Int32Array(818);
const v22 = [-3977,-2];
v22[1] = v22;
const v23 = [1073741824];
try { v23.sort(v5); } catch (e) {}
const v25 = [-41399,536870888,-128,1073741824,-4,9007199254740990,-65535,1073741825];
v25[6] = v25;
function F26(a28) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f7;
    a28 * a28;
    const v30 = this?.__lookupGetter__;
    try { new v30(818); } catch (e) {}
    let v32;
    try { v32 = new v30(F26); } catch (e) {}
    const v33 = this.constructor;
    v33.g = v32;
    v33.d = v33;
    const v34 = v33.arguments;
    function f36() {
        function f37() {
        }
        return f37;
    }
    function f38(a39) {
        return a39;
    }
    Object.defineProperty(WeakSet, Symbol.iterator, { configurable: true, enumerable: true, get: f36, set: f38 });
    try { new BigInt64Array(WeakSet); } catch (e) {}
    v34[0] = v34;
    v34.length;
    v34.b = v34;
}
try { new F26(v6); } catch (e) {}
try { new F26(522); } catch (e) {}
F26.g = F26;
const v47 = new F26();
try { v47.propertyIsEnumerable(v16); } catch (e) {}
let v49;
try { v49 = v47.isPrototypeOf(v16); } catch (e) {}
v49 && v49;
