const v4 = new Set();
const v5 = [1000000.0,5.5994194277335225,1000.0,-0.0,1.0,-447.5374591641987,-3.0];
const v6 = [2.220446049250313e-16,-4.0,5.0,867.1607329554979,-2.220446049250313e-16,-1.0,-3.0,0.43210326063660187,0.6960017077973818,-4.0];
const v7 = [-3.8400287173240866,-876.4097376372,0.48533660790593114,-1000000.0,3.0,1.7976931348623157e+308,-1000000000.0,1000000000.0];
let v8;
try { v8 = v7.toString(); } catch (e) {}
if (v7 != v7) {
} else {
    v6["reverse"]("reverse", ..."reverse", ..."reverse", ..."reverse")[8];
}
class C16 extends Set {
    static #m(a18, a19, a20) {
        a20?.f;
        delete v7[-1];
        try {
            a20.length = 2;
        } catch(e24) {
        }
        try {
            v5.e = Infinity;
        } catch(e25) {
        }
        return a19;
    }
    #p(a27, a28, a29, a30) {
        1e-15 >= v6;
        return v8;
    }
}
const v36 = new Set();
const v37 = new C16();
new C16();
const v40 = new v8();
try { v40.findLast(BigUint64Array); } catch (e) {}
Object.defineProperty(v37, v40, { writable: true, configurable: true, enumerable: true, value: v37 });
v4 % v36;
v4 in v7;
function F44(a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    a47 - a47;
    a48.prototype = a48;
    try {
        this.b = a47;
    } catch(e50) {
    }
}
const v51 = new F44(v6, 1e-15, BigUint64Array);
const v52 = new F44(v6, 1e-15, v51);
v52.b;
new F44(v7, 3.6101589513493764, C16);
const v55 = /anVXYFzN(x)(x)(x)\3/gvdms;
try { v40.reduceRight(v55); } catch (e) {}
