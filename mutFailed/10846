function F3(a5, a6, a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    try { new v9(758.9371938038303, this); } catch (e) {}
    this.c = a5;
}
F3.name;
5 ^ 5;
const v14 = [-36416,-60201,-14,-7,-1354117544,4,5349];
const v15 = v14?.find;
v15.length = 26492;
let v16;
try { v16 = new v15(26492); } catch (e) {}
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this?.constructor;
    try { v22.bind(a20); } catch (e) {}
    try { new v22(5, 5, a19); } catch (e) {}
}
const v25 = new F17();
v25.h = v25;
function f26(a27, a28, a29, a30) {
    try { a27(v16); } catch (e) {}
    try { a29(); } catch (e) {}
    const o36 = {
        n(a34, a35) {
            return a30;
        },
    };
    return o36;
}
for (let v37 = 0; v37 < 500; v37++) {
    v37 << -8;
    f26();
}
const v40 = [8,16,996759804,16,4096,9,-56581];
[4294967297,9223372036854775807];
new Uint16Array(1657);
class C46 {
    2147483647 = undefined;
}
const v47 = new C46();
C46[2147483647];
for (const v49 in v47) {
    v49[9] = v49;
}
[v40,26492,[v14,26492]];
function f52() {
    const o56 = {
        ...1.0,
        set b(a55) {
        },
    };
    return o56;
}
for (let v57 = 0; v57 < 5; v57++) {
    f52();
    %OptimizeFunctionOnNextCall(f52);
}
const v59 = [v14];
try { v59.toString(); } catch (e) {}
new v15(127);
BigInt64Array.length = BigInt64Array;
const v66 = new BigInt64Array();
try { v66.entries(); } catch (e) {}
v66.toString = f26;
const v69 = new Date(v66);
try { v69.setFullYear(v69, v59, Int8Array); } catch (e) {}
new Map();
const v74 = ["e","e","e","e","e"];
v74.valueOf = Date;
const v75 = "e" | v74;
v75 != v75;
try { new Date(Date, Uint16Array, Int8Array, Date, Date, v14, Uint16Array); } catch (e) {}
new Date(v75);
Math.cos(-7) - 5;
