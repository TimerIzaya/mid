const v3 = [-2.220446049250313e-16,604.4479109019192,-2.220446049250313e-16,604.4479109019192];
v3.p2 = 0.3083488057663979;
const v4 = [604.4479109019192,-2.220446049250313e-16,0.3083488057663979,0.3083488057663979];
const v5 = [-2.220446049250313e-16,604.4479109019192,0.3083488057663979,v4];
class C6 {
    constructor(a8, a9) {
        a9.p20 = -2.220446049250313e-16;
        a9[2];
        /Ia[a]/uims;
        let v12 = /W(jy2)/udy;
        v12.flags;
        v12 = /(u4(?:a?)*)/gudimsy;
        for (let v15 = 0; v15 < 32; v15++) {
            v3["p" + v15] = v15;
        }
    }
    static 1 = 0.3083488057663979;
    static #g = 0.3083488057663979;
    static #c;
    static d = v5;
}
const v18 = new C6(v3, v3);
function f19() {
    function F20(a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return F20;
}
v18.constructor = f19;
const v25 = v18?.constructor;
try { new v25(604.4479109019192, 604.4479109019192); } catch (e) {}
const v27 = new C6(v4, v5);
const v28 = v27?.constructor;
let v29;
try { v29 = new v28(v5, v4); } catch (e) {}
const v30 = new C6(v4, v5);
const v31 = v30?.constructor;
try { new v31(604.4479109019192, 0.3083488057663979); } catch (e) {}
15n ^ 15n;
let v36 = -619781337n;
v36--;
function f38() {
    return v30;
}
try { new f38(); } catch (e) {}
[13,65535,65536,-1024,10,37333,7,-684613774];
[2147483649];
const v42 = [52018,-4096,-20546,65535,10477,2114433858,-1838,-1];
try { v42.copyWithin(-2.220446049250313e-16, -2.220446049250313e-16); } catch (e) {}
class C44 {
}
try { new C44(); } catch (e) {}
const v46 = new C44();
const v47 = [-0.42703791448452577,-9.174109027962913,-1.7976931348623157e+308,-3.06318157624919,1000000000000.0,-2.2250738585072014e-308,-515.183479844324,0.20435565392355481,616564.7515082213,-3.0];
function f48() {
    try {
        new f38();
    } catch(e50) {
    }
    return v29;
}
v47.toString = f48;
const o51 = {
    [v47]: v46,
};
