const v2 = new Uint8Array(10);
new Int32Array(64);
const v8 = new BigUint64Array(64);
[54501,-6,10337,811850158];
const v10 = [512,351578341,536870888];
try { v10.reduce(v8); } catch (e) {}
const v12 = [-65536,8,536870887,-153779042];
new Uint8Array(0);
new Float32Array(1100);
new Float64Array(16);
try { Int8Array.bind(64); } catch (e) {}
const v25 = new Int8Array(520);
const v27 = new Uint8ClampedArray();
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v30 = new Uint32Array();
let v31 = -4294967297n;
v31 / v31;
const v33 = v31--;
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    try { a37.toLocaleString(); } catch (e) {}
    const v42 = a37.constructor;
    let v43;
    try { v43 = v42(); } catch (e) {}
    const v44 = v43?.constructor;
    let v45;
    try { v45 = v44(f36, a37, v28, Uint32Array, v42); } catch (e) {}
    function f46() {
        const v48 = ("Vre")?.substring;
        try { new v48("Vre", v42); } catch (e) {}
        const v50 = ("Vre").charAt(v45);
        v50.blink();
        let v52;
        try { v52 = ("Vre").codePointAt(v28); } catch (e) {}
        const v53 = v52 % v52;
        v53 - v53;
        let v55 = Float64Array;
        v55 = a38;
        b = v28;
        let v56 = v28.length;
        v56 >> v56;
        v56++;
        try {
            v35.forEach(a38);
        } catch(e60) {
            e60.message;
            e60.message = e60;
        }
        const o72 = {
            "c": v31,
            valueOf(a63, a64) {
                return v43;
            },
            1073741824: v30,
            [v31](a66, a67, a68, a69) {
                eval(v50);
            },
        };
        return v35;
    }
    const v73 = a38();
    try { v73.splice(v42, 1100); } catch (e) {}
    try { new Array(v30); } catch (e) {}
    const v77 = Array(v44);
    try { v77.findLast(); } catch (e) {}
    Int8Array.d = Int8Array;
    const v80 = Int8Array.of();
    try { v80.findLast(v45); } catch (e) {}
    let v82;
    try { v82 = v80.every(v80, a37, v80, a38, Array); } catch (e) {}
    const v83 = new Int8Array(v82);
    const v85 = v83.buffer.slice();
    try { v85.constructor(129); } catch (e) {}
    const v87 = BigUint64Array.constructor;
    try { v87(v85, v82, v33, v80, a37); } catch (e) {}
    const v90 = new Int32Array(v87, v45, v42);
    const v91 = v83?.constructor;
    try { new v91(v12, v2, v2); } catch (e) {}
    v90.lastIndexOf(a37, a39);
    try { v35["find"](..."find", a40, ...v34, ...v35); } catch (e) {}
    return v31;
}
try { f36(Float64Array, Float64Array, Float64Array, 16); } catch (e) {}
for (let v97 = 0; v97 < 10; v97++) {
    const v98 = f36(v30);
    v98 ^ v98;
}
%OptimizeFunctionOnNextCall(f36);
const v100 = f36(Uint32Array);
v100 + v100;
const v102 = v27.toReversed();
const v104 = [v102,v102];
const v106 = Reflect.apply(v25.includes, v25, v104);
v106 && v106;
