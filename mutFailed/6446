class C3 {
    9;
    constructor(a5, a6) {
        let v4 = this;
        super.f;
        function f8() {
            a5[arguments] = arguments;
            v4 = arguments;
            return arguments;
        }
        f8(v4, f8, v4, v4);
    }
    #g;
    static #d;
    static [0.5994124371800487] = 0.5994124371800487;
}
const v11 = new C3(C3, 0.9267734631117294);
const v12 = new C3(v11, 0.5994124371800487);
const v13 = new C3(v11, 0.9267734631117294);
new Map();
const v18 = new Array(2901);
new Uint8ClampedArray(7);
new Int32Array(2901);
const v27 = new Int8Array(1000);
const v31 = [2901,8,-54813,8];
const v32 = [-54813];
const v33 = [-54813];
function f34(a35, a36, a37, a38) {
    const o47 = {
        tanh(a40, a41, a42, a43) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-2.220446049250313e-16,0.006597891439407699,-Infinity,-4.0,-4.0,-0.0,-5.0];
            return [3.0,-4.115780670234759e+307,-1.0,-3.0];
        },
        ...a35,
        "b": v13,
        ...a37,
        ...v33,
        129: 4,
        ...a35,
    };
    return o47;
}
const v48 = f34(v32, v33, v31, 4);
f34(v32, 8, v48, 4);
f34(v33, 4, 4, 4);
/ND2/gds;
class C56 extends Map {
}
const v57 = new C56(2901);
v31.isPrototypeOf(v57, v27, v32);
class C61 {
    static {
        for (let v63 = 0; v63 < 25; v63++) {
            const v64 = [601759695];
            const v65 = [1073741824,1073741823,1376142744,1073741825];
            function f67(a68, a69, a70, a71) {
                try { new a68(); } catch (e) {}
                a70 << a70;
                function f75() {
                    return a68;
                }
                const v77 = new Int8Array();
                const v80 = BigUint64Array * 536870887;
                v80 - v80;
                Number.isSafeInteger(v80 ** v80);
                function f85(a86, a87) {
                }
                try { f85(); } catch (e) {}
                const v90 = v77.buffer.__defineGetter__;
                try { v90(); } catch (e) {}
                %OptimizeFunctionOnNextCall(Number);
                let v93;
                try { v93 = v65["find"](..."find", a71, ...v64); } catch (e) {}
                const o102 = {
                    [a70](a95, a96, a97, a98) {
                        return this;
                    },
                };
                v93 <= a70;
            }
            for (let v104 = 0; v104 < 5; v104++) {
                f67(this, v104, v104);
            }
        }
    }
}
function* f106(a107, a108, a109) {
    9 > Uint8ClampedArray;
    try { v12.at(a109, v33, 7, Map, 9); } catch (e) {}
    return yield v11;
}
f106(v48, v33, v18);
