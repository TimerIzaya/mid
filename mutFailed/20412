class C3 {
    static #o(a5) {
        const v6 = 1000000000.0 || this;
        try { (672519.5196488868)["getUTCMilliseconds"]("getUTCMilliseconds"); } catch (e) {}
        return v6;
    }
    10000 = 0.8337975628526755;
    static 9;
    static [0.8337975628526755] = 1000000000.0;
    static [-2] = 672519.5196488868;
    static #a;
}
C3[9] = C3;
const v9 = new C3();
const v10 = new v9();
const v11 = new C3();
const v12 = [1.2193317869829605e+308,-4.0,-0.0];
let v13;
try { v13 = v9.includes(0.8337975628526755); } catch (e) {}
const v14 = [-5.0,1000.0,-3.0,-248408.12241369626,1000.0,-1.0,-1e-15,1.5326940564150708e+308,1000.0];
let v15 = -536870912;
const v16 = v15 >>> v15;
3120 % 3120;
const v20 = new C3(v16, Uint32Array);
class C21 {
    #toString(a23, a24) {
        ({"length":a23,} = v14);
        v15 ^= a23;
        delete v20[this];
    }
    static #b = v10;
}
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(this); } catch (e) {}
    a29 + a29;
    try {
        v12.f = C3;
    } catch(e32) {
    }
    try {
        this.g = 0.8337975628526755;
    } catch(e33) {
    }
    BigUint64Array.prototype = BigUint64Array;
    const v35 = new BigUint64Array();
    const v36 = v35?.constructor;
    try { new v36(v11, a28, v35); } catch (e) {}
    function F38(a40, a41) {
        if (!new.target) { throw 'must be called with new'; }
        function f42() {
            try { v10.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
            try { v10.localeCompare(this); } catch (e) {}
        }
        v9.toPrimitive;
        Object.defineProperty(this, BigUint64Array, { writable: true, value: f42 });
    }
}
const v48 = new F26(1000000000.0, 0.8337975628526755);
v48?.constructor;
let v50;
try { v50 = new v15(672519.5196488868, 672519.5196488868); } catch (e) {}
new Uint32Array(1024);
function f54(a55, a56, a57, a58) {
    const v60 = new Map(Map);
    const v61 = v60.values();
    return v61.next(a55, v61, a55, f54);
}
f54.arguments = f54;
new v13(1000000000.0, 0.8337975628526755);
const v64 = new F26(1000000000.0, 672519.5196488868);
v64.length;
function f66() {
    class C67 {
        static {
        }
    }
    const v69 = C67.constructor;
    try { new v69(C67); } catch (e) {}
    let v71;
    try { v71 = new v69(); } catch (e) {}
    v71.d = v71;
    function f72() {
        return v71;
    }
    f72().arguments;
    for (let v75 = 0; v75 < 5; v75++) {
        const v76 = [1073741824,1073741823,1376142744,1073741825];
        for (let v77 = 0; v77 < 5; v77++) {
            let v79;
            try { v79 = v76["find"](); } catch (e) {}
            v79 <= v77;
        }
    }
    return f66;
}
f66();
%OptimizeFunctionOnNextCall(v50);
f66();
