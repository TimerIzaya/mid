let v7 = 3570;
const v10 = ("string").normalize("NFKD");
const v12 = new Date();
try { v12.getUTCDay(); } catch (e) {}
for (let i18 = 0, i19 = 10;
    i18 < i19;
    (() => {
        function f23() {
            return "string";
        }
        const v24 = [601759695];
        const v25 = [1073741824,1073741823,1376142744,1073741825];
        function f27(a28, a29, a30, a31) {
            function f33() {
                return a28;
            }
            const v34 = f23();
            const v36 = new Int8Array();
            function f37(a38, a39) {
                return v34;
            }
            f37();
            f37();
            const v42 = v36.buffer;
            Object.defineProperty(v42, "constructor", { writable: true, configurable: true, value: v42 });
            new Int8Array();
            let v45 = 1000000000000.0;
            v45--;
            v42.slice(2147483648);
            %OptimizeFunctionOnNextCall(f33);
            let v49;
            try { v49 = v25["find"](..."find", a31, ...v24, ...v25, ...522675525n); } catch (e) {}
            Symbol("find");
            new Uint8ClampedArray();
            const o54 = {
                ...i18,
            };
            v49 <= a30;
            return arguments;
        }
        for (let v56 = 0; v56 < 10; v56++) {
            f27();
        }
        i18++;
    })()) {
}
new Int32Array(v7);
function f64() {
    const v65 = [1946,1946,1946,1946];
    v65.toSpliced();
    parseInt(v65);
}
const v69 = f64();
new BigInt64Array(1946);
function F71() {
    if (!new.target) { throw 'must be called with new'; }
}
[F71];
v10.constructor;
const o78 = {
};
try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
const v81 = v7++;
v81 / v81;
new BigInt64Array(129);
const v86 = new Date();
function f87() {
    [];
    v69.constructor;
    new Uint8Array(268435440);
}
f87();
v86.setSeconds(v86, "jFd1");
