function f0() {
    const o19 = {
        ["-802834079"](a5, a6) {
            super.b *= a5;
            ("-802834079")[268435439];
            return 256;
        },
        __proto__: "-802834079",
        [256](a9, a10) {
            function f11(a12, a13, a14) {
                'use strict';
                let v16;
                try { v16 = a13["fromCharCode"](a10); } catch (e) {}
                try { v16(...v16, a14, ..."fromCharCode", ..."fromCharCode", ...a14); } catch (e) {}
                return a12;
            }
            f11(a10, this, f11);
            return a10;
        },
    };
    o19[256] = o19;
    return o19;
}
f0();
const v21 = f0();
const v22 = f0();
v22[Symbol.toPrimitive] = f0;
new BigUint64Array(76);
const v30 = new Uint16Array(193);
const v33 = new Float64Array(4);
v33[2];
42102 >> 42102;
function f39() {
    ("-536870912").normalize;
    ("-536870912").g;
    const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v46 = 0; v46 < 5; v46++) {
        function f47() {
            try {
                v45.forEach();
            } catch(e49) {
                e49.a = f0;
                e49.message = e49;
                e49.a = e49;
            }
            const v51 = Symbol.toPrimitive;
            Symbol.toPrimitive = Symbol;
            Symbol.for(v51.description);
            v51.description;
            Symbol.for();
            return v51;
        }
        f47();
        %OptimizeFunctionOnNextCall(f47);
    }
    new Uint16Array(209);
}
[140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
const v60 = [0.0,2.439947332797196];
const v61 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
Object.defineProperty(v61, "valueOf", { writable: true, value: f39 });
const v63 = v61 <= "Z";
const v64 = v63 && v63;
const v66 = 36002 % 36002;
v66 >>> v66;
const v68 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
v68[Symbol.toPrimitive] = f39;
try { v68.toString(); } catch (e) {}
let v72 = 1000000000000.0;
-(v72--);
const v79 = new Uint8ClampedArray();
function f80() {
    return f0;
}
function f81(a82) {
    function f83(a84, a85, a86) {
        const o94 = {
            toString(a88, a89, a90) {
                a85 < this;
                return super[a86];
            },
            get d() {
                return this;
            },
        };
        return o94;
    }
    f83(f83, f83(), f83);
}
Object.defineProperty(v79, Symbol.toPrimitive, { writable: true, get: f80, set: f81 });
function f99(a100, a101) {
    const o106 = {
        [a100]: Float64Array,
        4: 6,
        "b": a100,
        [v79](a103, a104, a105) {
        },
    };
    return o106;
}
f99(2);
f99();
function f109(a110) {
    a110 ^ a110;
    return 36002;
}
function f112(a113, a114) {
    const v115 = a114.length;
    v115 - v115;
    return f109;
}
try { f112(v30, "Z"); } catch (e) {}
const v119 = new Promise(f112);
v119[v68] += 36002;
const v122 = new BigInt64Array();
const v123 = v122?.entries;
try { new v123(); } catch (e) {}
try { new BigUint64Array(v66, v66, BigUint64Array); } catch (e) {}
const v128 = new BigUint64Array(127);
try { v128.slice(v64, v22); } catch (e) {}
class C132 extends f39 {
}
for (const v133 in C132) {
}
const v135 = new Int16Array(3);
try { v135.join(v21); } catch (e) {}
let v138 = 10;
v138 >>> v138;
for (;
    (() => {
        const v140 = v138--;
        v140 >> v140;
        return v140;
    })();
    ) {
}
try { new Int8Array(76, 268435456, 268435456); } catch (e) {}
const v144 = [];
try { v144.findLast(v21); } catch (e) {}
function* f146(a147, a148) {
    yield* v144;
    return a147;
}
const v149 = new Int8Array();
let v150;
try { v150 = v149.entries(); } catch (e) {}
try { v150.next(); } catch (e) {}
try { Array.from(v60); } catch (e) {}
try { new Array(v122); } catch (e) {}
for (let v155 = 0; v155 < 10; v155++) {
    3811 >>> 3811;
    const v159 = Float64Array.of();
    const v160 = v159?.set;
    try { v160(4); } catch (e) {}
    try { new v160(3811); } catch (e) {}
    v159.toString = f39;
    new Date();
    const v166 = Array(36862);
    v166.f = v166;
    try { v166.sort(36862); } catch (e) {}
}
