const v5 = new Uint16Array(128);
const v8 = new Int16Array(6);
const v11 = new Uint32Array(86);
class C12 extends Int16Array {
    m(a14, a15) {
        a14 = 1.6286064980524535e+308;
        return this;
    }
    constructor(a20, a21, a22) {
        super(a20);
        try { a20(v5, a22, a20, v8, a21); } catch (e) {}
        this["pCk1"];
        const o28 = {
        };
        new Proxy(v8, o28);
    }
}
new C12(Uint32Array, 4.2127286749195657e+307, 1.6286064980524535e+308);
new C12(6, 4.2127286749195657e+307, 1.6286064980524535e+308);
new C12(v11, 1.6286064980524535e+308, 1.6286064980524535e+308);
function F34() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -2147483647;
    } catch(e37) {
    }
}
const v38 = new F34();
const v39 = new F34();
const v40 = new F34();
function F41(a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = a43?.constructor;
    try { new v44(); } catch (e) {}
    try {
        this.g = a43;
    } catch(e46) {
    }
}
F41.arguments;
const v49 = Symbol.iterator;
const o58 = {
    [v49]() {
        let v51 = 10;
        const o57 = {
            next() {
                v51--;
                const v55 = v51 == 0;
                const o56 = {
                    "done": v55,
                    "value": v51,
                };
                return o56;
            },
        };
        return o57;
    },
};
o58.c = o58;
const v59 = new F41(v40);
const v60 = new F41(v39, v59);
function f61() {
    return F41;
}
f61.prototype;
const v64 = Math[256];
try { new BigInt64Array(v40, BigInt64Array, v60); } catch (e) {}
const v68 = new BigInt64Array(128);
v8 - v11;
Object.defineProperty(v64, 7, { writable: true, value: f61 });
new BigInt64Array(256);
new Uint32Array(248);
new Float32Array(3288);
new Uint16Array(3171);
let v82 = 9;
new Uint16Array(v82);
let v85 = 7;
v85--;
!-2147483649;
+4294967295;
4294967295 | -2147483649;
function f95(a96, a97) {
    v82 = a97;
}
v49 && v68;
+v49;
Math.asin(9007199254740992);
new Promise(f95);
const v106 = f61++;
Math.cbrt(v106);
Math.asin(v106);
const v109 = new F41(v39);
function F110(a112, a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    const v115 = this?.__lookupGetter__;
    try { new v115(Uint16Array); } catch (e) {}
    a113.a = a113;
    try {
        this.a = v59;
        try { new Symbol(); } catch (e) {}
        const v119 = Symbol.split;
        Symbol.for(v119.description);
        v109[v119];
        const v124 = typeof a114;
        v124[0] = v124;
        ("Qhn")[0];
        v124 === "Qhn";
    } catch(e128) {
    }
    try {
        this.c = v40;
    } catch(e129) {
    }
}
F110.arguments = F110;
new F110(v59, v40, v38);
new F110(v59, v39, v40);
new F110(v59, v40, v38);
[65536,616125741,39049,129];
([536870888,2147483649])[1];
[1723484275,-249128090];
[];
class C138 {
    constructor(a140) {
        this.constructor;
        function F144() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C146 {
            constructor(a148, a149, a150) {
                a149.constructor = gc;
                class C152 extends a149.constructor {
                }
                new C152();
            }
        }
        new C146(F144, C146);
        const v155 = new WeakSet();
        try { v155.add(a140); } catch (e) {}
        for (let v157 = 0; v157 < 5; v157++) {
            v157 >>> v157;
        }
        a140++;
    }
}
new C138();
new C138(C138);
