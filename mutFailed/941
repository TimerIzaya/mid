const v2 = new Uint16Array(9);
try { new Float64Array(v2, Uint16Array, Float64Array); } catch (e) {}
const v6 = new Float64Array(38);
new Uint8ClampedArray(256);
257 === 257;
const v16 = new BigInt64Array(257);
v16.byteLength;
10 < 10;
function f21() {
    return 257;
}
function f22(a23) {
    let [v24,v25] = v6;
}
Object.defineProperty(Uint32Array, 1, { get: f21, set: f22 });
new Uint32Array(10);
new Float32Array(226);
-35417 + -35417;
class C35 {
    static 7;
    static [-1] = "string";
    #n(a37) {
        a37 = this;
        a37.e >>>= -35417;
        const o41 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o41);
        return this;
    }
}
const v43 = C35[7];
const v44 = new C35();
const v45 = v44?.__lookupSetter__;
try { new v45(v16); } catch (e) {}
Array();
const v51 = Array();
class C53 {
    static 9 = 9.187362692894364;
}
try { new C53(); } catch (e) {}
for (const v55 in C53) {
}
class C56 {
    #e;
    static {
        this.e = -4096;
        this.e = Float64Array;
        this.e = this;
        function f58(a59, a60) {
            return a59;
        }
        const o68 = {
            o(a62) {
                const v63 = a62?.__defineSetter__;
                let v64;
                try { v64 = new v63(-1.7976931348623157e+308, a62); } catch (e) {}
                const o66 = {
                };
                Object.defineProperty(o66, "type", { enumerable: true, value: v64 });
                return gc(o66);
            },
        };
        try { new Uint32Array(Uint32Array, f58, Uint32Array); } catch (e) {}
        const o71 = {
        };
        o71.defineProperty = o71;
        const v73 = new Proxy(Uint32Array, o71);
        function f74(a75) {
            function F76(a78, a79) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = -35417;
                } catch(e80) {
                }
            }
            new F76(Uint32Array, v44);
            const v82 = new F76(v43, Uint8ClampedArray);
            new F76(v82, v82);
        }
        Object.defineProperty(v73, "e", { configurable: true, enumerable: true, set: f74 });
        v73.e = Uint32Array;
        v73.e = v73;
        o68["o"](o68, Uint32Array, "o", "o", v73);
        const v86 = super[this];
        try { v86.join(-4096, -4096, v86); } catch (e) {}
        const o88 = {
        };
        const v89 = /LD/vds;
        v89[Symbol.toPrimitive] = f74;
        v89[Symbol.toPrimitive] = Array;
        const v95 = [v89,1000.0];
        try { v95.toString(); } catch (e) {}
    }
    static f;
    m(a98, a99) {
        const o100 = {
        };
        const o103 = {
        };
        const v105 = new Proxy(Uint8Array, o103);
        v105.d = v105;
        new Proxy(this, o100);
        class C111 {
        }
        function f112() {
            let v113 = 1000000000000.0;
            v113--;
            class C116 {
            }
            new C116();
            const v118 = new C116();
            [C111,C116];
            [257828.6336153492,v118];
            ([Uint32Array])["concat"]([Uint32Array]);
            [v118];
            class C127 extends C35 {
            }
            function f128(a129, a130) {
                return -4096;
            }
            Set.toString = f128;
            Set.constructor(Set);
            v51.constructor;
        }
        const v134 = "string" && -4096;
        +a99;
        Math.sqrt(v134);
        a98--;
        -509886178 << -509886178;
        return this;
    }
}
function f139() {
    return f22;
}
Object.defineProperty(C56, "valueOf", { configurable: true, enumerable: true, get: f139 });
C56.toString = Array;
const v140 = C56?.constructor;
try { new v140(-4096); } catch (e) {}
const v142 = new C35();
try { v142.propertyIsEnumerable(C56); } catch (e) {}
new C56();
new C56();
WeakSet.length;
const v153 = new WeakSet();
v153.constructor = Array;
try { v153.delete(v153); } catch (e) {}
const v155 = v153.constructor;
v155.f = v155;
class C156 extends v155 {
}
const v159 = new Uint16Array(512);
class C161 {
}
C161.prototype;
function F163(a165, a166) {
    if (!new.target) { throw 'must be called with new'; }
}
const v167 = new Float32Array(v159);
v167[274];
