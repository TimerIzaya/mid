const v2 = new Uint16Array(3);
const v5 = Symbol.toPrimitive;
const o10 = {
    [v5]() {
        for (let v7 = 0; v7 < 32; v7++) {
            Symbol["p" + v7] = v7;
        }
        return 1000;
    },
};
const v12 = new BigInt64Array(1000);
new Uint8ClampedArray(10);
class C16 {
    #n(a18, a19) {
        [-11,-9223372036854775807,5,364946534,-5125,2147483649,-12,4,4096];
        [-31330,-9007199254740992,1,840385070,-1024,2056733662,-5,-12];
        return [1095684075,-14,54822];
    }
    #a = Uint16Array;
    static #n(a24, a25, a26) {
        [1000000.0,1.0451591205820377e+308,437294.1284520067];
        [246.4439654891014,-1.1860415399710952e+308,-3.0,5.0,1.227330984914729e+308];
        [-5.0,-1000000000.0];
        v2[Symbol.match];
        return 1000;
    }
    1073741825 = 3;
    [3];
    static d;
}
const v33 = new C16();
new C16();
const v35 = new Uint16Array();
for (let v36 = 0; v36 < 5; v36++) {
    function f37() {
        function f38(a39, a40, a41, a42) {
            const o43 = {
                __proto__: v35,
            };
            return o43;
        }
        f38(10, 3, v36, C16);
        f38(3, 3, o10, v12);
        f38(1000, 10, o10, v33);
        for (let v49 = 0; v49 < 5; v49++) {
            const v50 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
            let v51 = -1148418937;
            const v52 = v50.toSpliced(v51, v51);
            v33[3] = v52;
            new C16(3375);
            let [v55,,v56,...v57] = v52;
            v51++;
        }
    }
    f37();
}
