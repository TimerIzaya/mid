class C3 {
    static n(a5, a6) {
        try { a6(-9223372036854775807, -146215592, a6, -146215592, "valueOf"); } catch (e) {}
        return this;
    }
    static #valueOf(a9, a10) {
        for (let v11 = 0; v11 < 49; v11++) {
            const o15 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o15);
        }
        return -146215592;
    }
}
const v17 = new C3();
new C3();
const v19 = new C3("valueOf", -9223372036854775807);
function f23() {
    this.onmessage = v19;
    function f25(a26) {
        return a26;
    }
    this.onmessage = f25;
    try {
        class C27 {
        }
        const v28 = new C27();
        v28.length = this;
        const v29 = [5];
        const v31 = [];
        Reflect.apply(v29.fill, v28, v31);
    } catch(e34) {
    }
    return f23;
}
f23();
%PrepareFunctionForOptimization(f23);
const v36 = f23();
%OptimizeFunctionOnNextCall(f23);
f23();
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a40;
    } catch(e44) {
    }
    try {
        this.f = a41;
    } catch(e45) {
    }
    try {
        this.a = 9007199254740991;
    } catch(e46) {
    }
}
const v47 = new F38(v19, v17, "valueOf", -9223372036854775807);
new F38(v17, v47, v47, -9223372036854775807);
new F38(v17, v47, v17, 9007199254740991);
const v52 = new Float64Array(Float64Array);
v52[Symbol.toPrimitive] = v36;
("p").lastIndexOf(v52);
