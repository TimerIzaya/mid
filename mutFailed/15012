const v0 = [];
const v2 = v0.constructor;
try { new v2(); } catch (e) {}
class C4 {
    constructor(a6, a7, a8, a9) {
        arguments[0] = arguments;
    }
}
[v0,true];
const v12 = [v0];
const v14 = new Float32Array(Float32Array, Float32Array, Float32Array);
v14.h = v14;
v12.constructor;
const v16 = [1000000000.0];
for (let v17 = 0; v17 < 25; v17++) {
    v16["p" + v17] = v17;
}
[v12,v0,v12];
/kyp/gvdy;
/a+?6(x)(x)(x)\38/vdimy;
/a+/udmy;
class C24 {
    static p(a26, a27, a28, a29) {
        v12.length;
        const v35 = new BigInt64Array(11);
        v35.lastIndexOf(v12);
        const v40 = new Uint16Array(10);
        v40.indexOf(-2927);
        +-4294967296;
        Math.log1p(-4294967296);
        return Math.round(-48656);
    }
}
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = new Float64Array(1);
    v55.reverse();
}
new C24();
new C24();
new C24();
function F60() {
    if (!new.target) { throw 'must be called with new'; }
}
class C62 {
}
const v63 = new C62();
ReferenceError.captureStackTrace(F60, v63);
