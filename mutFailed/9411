const v5 = new BigInt64Array(69);
new Int32Array(129);
const v11 = new Uint32Array(208);
class C12 {
    #toString(a14, a15) {
        function f16(a17, a18, a19) {
            const v21 = [a14];
            Reflect.apply(v11.join, a18, v21);
            return a14;
        }
        f16(a14, v5, 208);
        return 208;
    }
    static 84;
    f = BigInt64Array;
    static #c;
    static 536870887 = 5.0;
}
new C12();
const t19 = -4.0;
new t19();
new C12();
function f28() {
    const o40 = {
        ...69,
        "b": -9007199254740990,
        ["b"]: "b",
        "a": -9007199254740990,
        o(a32, a33) {
            try { a33(a32, a33, "b"); } catch (e) {}
            [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308] | -9007199254740990;
            function F37() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C39 extends F37 {
            }
            return -9007199254740990;
        },
        "h": "b",
    };
    return o40;
}
const o41 = {
};
f28();
class C44 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        try { this.p(undefined, this, this, this, this); } catch (e) {}
        return undefined;
    }
    static #a = undefined;
}
new C44();
f28();
new Int16Array(1971);
new Int32Array(128);
const v60 = new Int16Array(195);
let v62 = 3375;
const v64 = new BigUint64Array(v62);
("c").toUpperCase();
new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
Math.expm1(v62, Math, v60);
Math.tan(--v62);
const v74 = [-256,13351,5138,2,-4294967295,1000,268435440];
class C75 {
    constructor(a77, a78) {
        for (const v79 in this) {
        }
        Math.atan2(v74, -4294967297);
    }
}
class C82 extends C75 {
}
new C82();
let [v84,,v85,...v86] = v64;
var c = 255;
