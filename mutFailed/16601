class C3 {
    set h(a5) {
        function f6(a7) {
            return this;
        }
        class C8 extends f6 {
            [-9007199254740991] = this;
            2075;
        }
        function f9(a10, a11, a12, a13) {
            function f14() {
                const o18 = {
                    valueOf(a16, a17) {
                        return f9;
                    },
                };
                o18.valueOf();
                return a13;
            }
            f14();
            f14();
            return f9;
        }
        for (let v22 = 0; v22 < 5; v22++) {
            f9();
        }
    }
    static d = "X";
    static 536870912 = -1001281987;
    e;
    ["X"];
    static [-1001281987] = -1001281987;
}
const v24 = new C3();
const v25 = new C3();
const v26 = new C3();
class C27 extends C3 {
    static {
        function f30(a31) {
            function f33(a34) {
                function f35() {
                    const o36 = {
                    };
                    for (let v37 = 0; v37 < 5; v37++) {
                        function f38() {
                            return v37;
                        }
                        f38.a = v37;
                    }
                    return a34;
                }
            }
            new Int32Array();
            for (let v42 = 0; v42 < 5; v42++) {
                function f43() {
                    for (let i45 = 0, i46 = 3;
                        (() => {
                            class C47 extends f43 {
                            }
                            return i45 < 3;
                        })();
                        (() => {
                            const v51 = i45++;
                            v51 >> v51;
                        })()) {
                    }
                    return v42;
                }
                f43();
                %OptimizeFunctionOnNextCall(f43);
            }
            this.onmessage = C27;
            const o58 = {
                "maxByteLength": 255,
            };
            const v60 = new ArrayBuffer(255, o58);
            new Int8Array(v60);
        }
        const v65 = ["function"];
        const o71 = {
            __proto__: v65,
            n(a67, a68) {
                return Worker;
            },
            set b(a70) {
            },
            "arguments": v65,
            "type": "function",
        };
        new Worker(f30, o71);
    }
}
const v73 = new C27();
const v74 = new C27();
const t94 = "X";
const v75 = new t94();
function F76(a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v74;
    } catch(e81) {
        new Date();
        class C84 {
            constructor(a86, a87, a88, a89) {
            }
            /*
            constructor(a91, a92, a93, a94) {
            }
            */
        }
    }
    try {
        this.e = v26;
    } catch(e95) {
    }
}
const v96 = new F76(v25, v73, v74);
new F76(v75, v24, v24);
new F76(v75, v96, v74);
function f99() {
    const o108 = {
        [268435441]: 268435441,
        874720287: 268435441,
        get d() {
            try { this.m(268435441, this, this); } catch (e) {}
            const o105 = {
            };
            return Proxy("1073741824", o105);
        },
        ["species"]: "1073741824",
    };
    return o108;
}
const v109 = f99(f99);
const v110 = v109();
const v111 = f99();
v111[1073741824] = v111;
function F112(a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
    const v116 = this?.constructor;
    try { new v116(a114, v109); } catch (e) {}
    a114[1073741824] = a114;
    try {
        this.g = a115;
    } catch(e118) {
    }
}
F112.length;
const v120 = new F112(v111, v109);
const v121 = new F112(v111, v110);
const v122 = new F112(v109, v110);
function f123(a124, a125, a126) {
    a126.g = a126;
    const o132 = {
        "a": a125,
        get e() {
            v111 & this;
            return (a125 == a125 ? a125 : a125)[15];
        },
        ...a126,
        "c": v121,
        "f": v122,
    };
    return o132;
}
const v133 = f123(v120, v120, v121);
v133.c = v133;
f123(v120, v122, v122, v133, f99, v133);
f123(v121, v120, v120);
58091 >> 58091;
Uint8ClampedArray.length;
try { Uint16Array.from(v121); } catch (e) {}
const v149 = new Uint16Array();
try { v149.entries(); } catch (e) {}
function F151() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 3;
    } catch(e154) {
    }
}
let v158;
try { v158 = ("minor").anchor(v120); } catch (e) {}
const o160 = {
    "type": "minor",
};
gc(o160);
function f162() {
    const o163 = {
    };
    o163.__defineGetter__;
    const t190 = [-4294967296];
    t190.length = 257;
    return f162;
}
Array(228);
class C169 {
    d;
    m(a171, a172) {
        new a172(1073741824, 228, 1073741824, 1073741824, ...a171);
    }
}
const v175 = new C169();
const v176 = v175?.constructor;
try { new v176(); } catch (e) {}
const v178 = new C169();
const v179 = v178?.constructor;
try { new v179(); } catch (e) {}
function f187() {
    function F188(a190) {
        if (!new.target) { throw 'must be called with new'; }
        const v191 = this.constructor;
        const v192 = v191.bind(F188, F188, F188, v191);
        try { v192(v192, F188, f187, f187, a190); } catch (e) {}
        try { new v191(); } catch (e) {}
    }
    new F188();
}
const v196 = [f187];
const v197 = [Array];
const v198 = [v196,f187,v196];
new BigInt64Array(3444);
class C203 {
}
new C203();
const v206 = [];
function f207() {
    const o215 = {
        __proto__: v206,
        n(a209, a210) {
            return Uint8Array;
        },
        [v158](a212, a213, a214) {
        },
    };
}
new Uint8Array();
new Uint8ClampedArray();
const v221 = new Date();
const v223 = new BigUint64Array();
v223[v221] = v221;
f187(BigInt64Array, f187, ...v197, 3444, 1024, ...v198);
f187();
f187();
[0.9830880735406903,-0.6660198851192867,729.1589343121786,6.490727458123557e+307,-1.2538779643386477e+308,-1000000000.0];
[638.8226705123661,3.0,-2.2250738585072014e-308,771474.4832247959,816263.8956170448,2.220446049250313e-16,5.0];
const v229 = [8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
[-5.83623517593701,-1.0,-1e-15];
[692.912813481568,126686.58689393173];
function f233(a234, a235) {
    const o239 = {
        [a234](a237, a238) {
        },
    };
}
const v240 = f233(v229, 128);
/j(x)(x)(x)\2/gud;
/[\0](?:ab|cde)/vimsy;
/^xxx$/uisy;
let v244;
try { v244 = v240.p(); } catch (e) {}
v244 * v244;
new Float64Array();
for (let v251 = 0; v251 < 5; v251++) {
    const v253 = ([601759695])[0];
    v253 >>> v253;
    function f255() {
    }
}
new Float64Array(Float64Array, Float64Array, gc);
Float32Array.e = Float32Array;
new Uint8Array(6);
function F262() {
    if (!new.target) { throw 'must be called with new'; }
}
class C264 {
}
const v265 = new C264();
ReferenceError.captureStackTrace(F262, v265);
const v268 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
gc.caller = gc;
new BigInt64Array();
const v271 = [1073741824,1073741823,1376142744,1073741825];
try {
    v271.forEach();
} catch(e273) {
    e273.message = e273;
    const v274 = e273.message;
    v274.e = v274;
    v274.e = v274;
}
v268["findIndex"](gc);
