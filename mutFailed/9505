function f0() {
    const o13 = {
        "d": 1000000000000.0,
        toString(a5, a6) {
            this.d;
            try { new a5(this, a6); } catch (e) {}
            a5?.[a5];
            this instanceof a6;
            this[a6];
            let [v12] = "ignoreCase";
            return v12;
        },
        "f": "ignoreCase",
        ..."ignoreCase",
    };
    return o13;
}
const v14 = f0();
const v15 = f0();
const v16 = f0();
class C17 extends f0 {
    255;
    m(a19, a20) {
        Math.atan(Math);
        try { ("string").trimStart(); } catch (e) {}
        function f25(a26, a27, a28, a29) {
            try { a26.filter("string", a26); } catch (e) {}
        }
        super.c = v14;
        v16["toString"](v15, "toString");
        const v34 = [];
        const v35 = v16.toString;
        const v37 = new BigUint64Array();
        const v38 = /anVXYFzN(x)(x)(x)\3/gvdms;
        try { v37.reduceRight(v38); } catch (e) {}
        const v40 = new v37();
        v40.setUTCMinutes();
        Reflect.apply(v35, v16, v34);
        return v34;
    }
    [v16] = v14;
}
new C17();
new C17();
new C17();
new BigUint64Array(3);
new BigUint64Array(2691);
new Float64Array(128);
function F56() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        [[this],1141300185,F56];
        let v61 = [this];
        v61++;
        Math.asinh(536870887);
        +this;
    } catch(e67) {
    }
    try {
        class C69 extends this.constructor {
            static [1141300185] = F56;
            e = F56;
        }
        new C69();
    } catch(e71) {
    }
}
const v74 = new BigUint64Array(4);
v74.reverse();
