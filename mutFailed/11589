class C3 {
    n(a5) {
        a5[4] = 268435441;
        super.c = this;
        typeof super.c === "function";
        return this;
        return this;
    }
    [268435441];
    #a;
    1;
}
const v10 = C3?.toString;
try { new v10(); } catch (e) {}
const v12 = new C3();
v12[268435441];
const t15 = 0.024260388302510316;
let v14 = new t15();
const v15 = new C3();
class C16 {
    constructor(a18, a19, a20) {
        try { this.n(v14, "4096"); } catch (e) {}
        a18[268435441] = a18;
        a19[268435441];
        v14 = a18;
    }
    [v12] = C3;
    static #e = v12;
    n(a24, a25) {
        function F26(a28, a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                try { a30(0.024260388302510316, a29); } catch (e) {}
                [-1024,-16,128,536870889,-6,15310,127,10];
                [-11,-65535,-14,9007199254740991,1272562981,993545643,9223372036854775807,-13,-13,1073741824];
                [1073741824,2147483647,257,27897];
                this.g = a30;
            } catch(e36) {
            }
            [-4096,-1517175063,-2045631262,64099,-784512946,3,-9223372036854775808,-58788,1024,-1242812639];
            const v38 = [-4294967296,4294967297,28113,-42634,27958,1,0,-1416726265];
            [0,935552749,-839,-1297,-256,10,7];
            a25 &&= F26;
            try { v38.flatMap(C16, a29); } catch (e) {}
        }
        const v41 = new F26(a25, v14, v14);
        const v42 = new F26(a25, v41, a25);
        new F26(v12, v42, v12);
        return v42;
    }
}
try { C16.call(v14); } catch (e) {}
const v45 = new C16(v14, v14, C3);
new C16(v15, v12, v12);
new C16(v12, v14, C3);
function f51() {
    const v52 = ("4096")[0];
    v52 == v52;
    let v54 = v52.g;
    [,v14,...v54] = "4096";
    try {
        v52.h = C16;
    } catch(e55) {
    }
    209 >>> 209;
    new Uint16Array(209);
    return 209;
}
try { f51(); } catch (e) {}
const v63 = new Int8Array(268435456);
try { v63.filter(v45); } catch (e) {}
try { new Array(58860); } catch (e) {}
const v68 = Float64Array.of();
try { v68.entries(); } catch (e) {}
v68.toString = f51;
new Date(Array, v68);
