class C3 {
    static p(a5, a6) {
        function f7(a8, a9) {
            function f11(a12) {
                let v13;
                try { v13 = this.deleteProperty(); } catch (e) {}
                let v17 = 0.17218882495582388;
                ~Math.tanh(v13);
                Math.max(268435440);
                ++v17;
                !268435440;
                Math.log10(v13);
                Math.abs(v17);
            }
            this.onmessage = f11;
            try { new a9(-243571235, this, a9, a5, a5); } catch (e) {}
            this.onmessage;
        }
        const v29 = ["function",f7];
        const o30 = {
            "arguments": v29,
            "type": "function",
        };
        new Worker(f7, o30);
        return this;
    }
}
const v32 = C3.length;
C3--;
const v34 = new C3();
const v35 = v34?.__defineSetter__;
let v36;
try { v36 = new v35(0.8401389211326805, "toString"); } catch (e) {}
const v37 = new C3();
const v38 = v37?.constructor;
try { new v38(); } catch (e) {}
let v40;
try { v40 = new v38(); } catch (e) {}
const v41 = v40?.constructor;
try { new v41(); } catch (e) {}
const t40 = -243571235;
new t40();
const v44 = v34?.__lookupGetter__;
try { new v44(v40); } catch (e) {}
function f46() {
    return v37;
}
const v47 = f46?.__lookupSetter__;
try { new v47("toString"); } catch (e) {}
const v50 = new Date();
let v51;
try { v51 = v50.toISOString(); } catch (e) {}
try { new Float32Array(v32, v38, v32); } catch (e) {}
const v55 = new Float32Array();
v55.b = v55;
4096 >>> 4096;
const v59 = new Uint8Array(4096);
let v60;
try { v60 = v59.entries(); } catch (e) {}
try { v60.next(); } catch (e) {}
2 ^ 2;
-2 + -2;
let v68;
try { v68 = v51.from(v59); } catch (e) {}
v68[1961];
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = Array(19793);
    for (const v76 of v75) {
    }
    [[v75,v75,v75,v75]];
    ("function").normalize();
    const v82 = new Set();
    v82.values();
    [] >= Uint16Array;
}
F70.a = F70;
class C87 {
}
try { C87(); } catch (e) {}
class C89 extends C87 {
}
C89.length !== v36;
const o92 = {
};
