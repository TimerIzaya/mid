function f0() {
    let v1 = "entries";
    const o9 = {
        [-1000000.0]: 175652.81428152043,
        ...v1,
        "c": 175652.81428152043,
        n(a5) {
            v1[a5] = a5;
            const v7 = new String(v1);
            a5 in v7;
            v1 = String;
            return String;
        },
    };
    return o9;
}
const v10 = f0();
const v11 = f0();
const v12 = f0();
v12[0];
v12[3] = v12;
Math.exp(-Infinity);
class C18 extends Date {
    static get c() {
        eval();
    }
}
try { C18.toString(); } catch (e) {}
function f23() {
    return v12;
}
try { ("unscopables").padStart(v11); } catch (e) {}
function f28(a29, a30, a31, a32) {
    a29[1] = a29;
    a29[0];
    const o38 = {
        [f23]: "search",
        16: a29,
        "h": "search",
        "f": a30,
        "e": a31,
        782461803: "search",
        ...f28,
        "b": "string",
        "type": "search",
        get a() {
            return this;
        },
        set g(a36) {
            delete a36?.d;
        },
        "a": "string",
        "g": v11,
    };
    o38[782461803] = o38;
    return o38;
}
f28.caller;
const v40 = f28(v11, v12, v10, "search");
v40[16];
function f42() {
    return f42;
}
try { f42(); } catch (e) {}
function f44(a45, a46, a47) {
    a46[8] = a46;
    const o48 = {
        __proto__: a47,
    };
    return a46;
}
const v49 = f28(v12, v10, v10, "string");
const v50 = v49?.propertyIsEnumerable;
try { new v50(C18); } catch (e) {}
const v52 = f28(v12, v11, v49, "string");
v52[782461803] = v52;
const v53 = /(\1a)/gums;
const v54 = /V(?:a{5,1000000}){3,1000000}/vims;
v54.f = v54;
const v55 = /(?<a>.)\k<a>?/vdimsy;
for (let v56 = 0; v56 < 27; v56++) {
    const v57 = v53.compile(v54);
    v57.ignoreCase = v57;
    const v58 = v57.lastIndex;
    let v59 = v58 << v58;
    v59--;
}
let v61;
try { v61 = v55(v53, v54, v54, v53); } catch (e) {}
%VerifyType(v12);
const v62 = [v55,v54,v53];
try { v62.values(); } catch (e) {}
v62[2] = v62;
const v64 = [v62,v54,v55,v62,v62];
v64[2] = v64;
[v55,v53,v53];
let v66 = 8;
v66--;
BigInt64Array.prototype = BigInt64Array;
const v69 = new BigInt64Array(v54, v53, v61);
try { v69.subarray("string", "string"); } catch (e) {}
let v71;
try { v71 = v69.values(); } catch (e) {}
const v72 = v71?.constructor;
try { new v72(v61); } catch (e) {}
const v74 = new BigInt64Array(v66);
v74.a = v74;
const v76 = 10 - 10;
v76 >>> v76;
const v79 = new BigUint64Array(10);
v79[7];
7 & 7;
try { new Uint8Array(v12, "string", v12); } catch (e) {}
const v85 = new Uint8Array(7);
v85[3];
const v87 = v85.constructor;
try { new v87(v69, v69, v87); } catch (e) {}
const v89 = v87.length;
v89 * v89;
function f91(a92) {
    return a92;
}
const v93 = [8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
v93.length = v93;
128 + 128;
function f96(a97, a98) {
    const o102 = {
        [a97](a100, a101) {
        },
    };
    return o102;
}
f96(v93, 128);
const v104 = new v87(Uint8Array, v74, v74);
v104[1] = v104;
try { v104.toLocaleString(); } catch (e) {}
try { Uint16Array.from(f0); } catch (e) {}
try { Int32Array.bind(v62); } catch (e) {}
function f110() {
    const v112 = 3.4890473589784586e+307 >>> 3.4890473589784586e+307;
    v112 === v112;
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v115 = 1000000000000.0;
    const v116 = v115--;
    const v117 = -v116;
    let v118 = 12;
    v118 + v118;
    v118--;
    257828.6336153492 + 257828.6336153492;
    const v123 = -v64;
    const v124 = v123 && v64;
    class C126 {
        static #m(a128) {
        }
        constructor(a130) {
            const v131 = this?.constructor;
            try { new v131(v123); } catch (e) {}
            a130 >> a130;
            const v135 = new Float32Array();
            try { v135.toReversed(); } catch (e) {}
            let v137;
            try { v137 = v135.copyWithin(f0, v116); } catch (e) {}
            try { v137.values(); } catch (e) {}
            let v139;
            try { v139 = v135.entries(); } catch (e) {}
            const v140 = v139.next();
            v140.value = v140;
            const v141 = new Uint16Array(v118, -4294967296, v116);
            new Float32Array(v141);
        }
    }
    C126.length;
    let v144;
    try { v144 = new C126(v124); } catch (e) {}
    v144.length = v144;
    new C126();
    new Uint16Array();
    const v148 = Symbol?.constructor;
    try { new v148(Symbol); } catch (e) {}
    v104.iterator;
    try { v74.reduce(Int32Array, v118); } catch (e) {}
    let v152 = 0;
    const v153 = v152++;
    v153 >>> v153;
    const v155 = new C126();
    v155.g = v155;
    const v156 = v155?.constructor;
    v156.a = v156;
    let v157;
    try { v157 = new v156(v155); } catch (e) {}
    v157.h = v157;
    const v158 = new C126();
    try { v158.constructor(v155); } catch (e) {}
    const v160 = new C126(-4294967296);
    try { v160.hasOwnProperty(v160); } catch (e) {}
    const v162 = v160?.constructor;
    try { new v162(v117); } catch (e) {}
    try { new v162(v117); } catch (e) {}
    [];
    const v166 = [257828.6336153492,v160,v155,v160];
    try { v166.toLocaleString(); } catch (e) {}
    const v168 = [];
    v168[0];
    class C170 extends C126 {
    }
    C170.name = C170;
    function f171() {
        class C173 {
        }
        const v174 = new C173();
        v174[3.4890473589784586e+307] = 10;
        const o175 = {
            "call": f171,
        };
        class C176 extends C173 {
            #a;
        }
        for (let i = 0; i < 5; i++) {
            new Date();
        }
        return 10;
    }
    try { f171(); } catch (e) {}
    const v180 = new C170();
    const v181 = v180?.constructor;
    try { new v181(); } catch (e) {}
    const v183 = v64.constructor;
    let v184;
    try { v184 = v183.call(v115); } catch (e) {}
    try { v184.findLast(v87); } catch (e) {}
    let v186;
    try { v186 = v183.isArray(v168); } catch (e) {}
    !v186;
    class C188 extends Uint16Array {
    }
    let v189;
    try { v189 = new C188(); } catch (e) {}
    try { v189.copyWithin("unscopables", v40); } catch (e) {}
    C188.a = C188;
    const v191 = new C188();
    const v192 = v191.constructor;
    let v193;
    try { v193 = v192.bind(); } catch (e) {}
    try { new v193(); } catch (e) {}
    v193.d = v193;
    const o195 = {
        "e": v168,
        __proto__: v62,
        [v64]: v85,
        "h": 257828.6336153492,
    };
    try { v52.e(BigUint64Array); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f110);
f110();
%OptimizeFunctionOnNextCall(f110);
f110();
