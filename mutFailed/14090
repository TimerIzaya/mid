function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    a6++;
    try {
        this.c = 5;
    } catch(e8) {
    }
    try {
        this.h = a5;
    } catch(e9) {
    }
}
new F3(5, 14);
const v11 = new F3(14, 5);
const v12 = new F3(14, 14);
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    class C18 extends F13 {
        static [a16];
        230 = v11;
    }
    new C18();
    new C18();
    new C18();
    const v22 = this?.constructor;
    try { new v22(F13, -50561, F13); } catch (e) {}
    a16--;
    a17++;
    try {
        this.a = v12;
    } catch(e26) {
    }
}
new F13(-50561, 5, 5);
const v28 = new F13(5, 14, 5);
new F13(-50561, -50561, 14);
class C30 extends F3 {
    set a(a32) {
        v28 && -50561;
        for (let i36 = 0, i37 = 10; i36 < i37; i36++, i37--) {
            v28[a32];
            const v46 = this[64];
            try { new a32(F3, 14, v46, v46, this); } catch (e) {}
        }
    }
}
new C30();
const v49 = new C30();
const v50 = v49.c;
new C30();
const v53 = new WeakSet();
try { ("JG3").strike(); } catch (e) {}
function f58(a59, a60, a61) {
    function f62(a63) {
        for (let v64 = 0; v64 < 100; v64++) {
            const v65 = f58(a63, 1.0);
            v65.g = v65;
            new Array(10);
            try { v50(f62, a63); } catch (e) {}
            C30.d;
        }
        return a61;
    }
    a60.toString = f62;
    try { a59.codePointAt(a60); } catch (e) {}
    a61 & a61;
    const o74 = {
        get d() {
            return a60;
        },
        ["JG3"]: a60,
        "c": a61,
    };
    return o74;
}
const v75 = f58?.constructor;
try { new v75(F3); } catch (e) {}
const v77 = f58("function", v53);
v77.g = v77;
f58("JG3", v77);
f58("JG3", WeakSet);
