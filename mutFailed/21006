class C3 {
    constructor(a5, a6) {
        a5 || this;
        const v13 = new BigInt64Array(-43492);
        const v16 = new Int8Array(3768);
        function f17(a18, a19) {
            a18++;
            let o29 = {
                get d() {
                    this[115] /= -43492;
                    let v23 = -908890636;
                    return Math.log(this & --v23);
                },
                "d": a18,
                ...a18,
                get e() {
                    this.d;
                    return a19;
                },
                __proto__: v16,
                ...a19,
                ...BigUint64Array,
                536870888: BigInt64Array,
            };
            [,...o29] = v13;
            a19?.[-43492];
            const o33 = {
                "maxByteLength": 3035,
            };
            const v35 = new ArrayBuffer(512, o33);
            new Float32Array(v35);
            return a18;
        }
        const v38 = -43492 / a6;
        Math.cos(a6);
        class C40 {
        }
        let v42 = undefined;
        const o43 = {
        };
        v42 = o43;
        function F44(a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            const v50 = Math.acosh("9g9Ak");
            Math.cbrt("9g9Ak");
            "9g9Ak" % v42;
            const v53 = this.constructor;
            try { new v53(o43, v50); } catch (e) {}
        }
        a5 & a5;
        Math.cosh(v38);
    }
    c = "number";
    static #g = "-15572";
    static #e = "-15572";
    f = "number";
    static #b = "k";
    static 6 = "-15572";
}
const v57 = new C3("k", "k");
const v58 = new C3("k", "k");
new C3("-15572", "number");
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v57;
    } catch(e65) {
        try { Reflect.ownKeys(-4.0); } catch (e) {}
        do {
        } while (0 < 0)
    }
}
const v72 = new F60("number", "-15572", v57);
function f73() {
    function f74(a75, a76, a77, a78) {
        return a75;
    }
    f73 != f74;
    return f73;
}
f73();
f73();
new F60("number", v72, v57);
new F60("number", F60, v58);
["-15572",C3,v57];
["number",C3,"k"];
[v57,"-15572",C3,v58,"k"];
const o88 = {
};
-53893n ^ -53893n;
function F91(a93) {
    if (!new.target) { throw 'must be called with new'; }
    a93 ^ a93;
}
function F98() {
    if (!new.target) { throw 'must be called with new'; }
    Symbol.toPrimitive;
    this[F98] = Date;
    try {
        for (let i = 0; i < 5; i++) {
        }
        new F98();
    } catch(e103) {
    }
}
new F98();
