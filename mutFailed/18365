function f0() {
    try { ("4LVf").match(10000); } catch (e) {}
    const o15 = {
        "c": 10000,
        "h": "4LVf",
        "a": 1e-15,
        ["4LVf"]: 10000,
        "f": 1e-15,
        __proto__: "4LVf",
        "b": "4LVf",
        ["4LVf"](a6, a7) {
            Math.sqrt(a6);
            let v12 = Math.asinh(-406391558);
            -4294967296 && a7;
            ++v12;
            return 10000;
        },
    };
    o15.toString = f0;
    o15.h = o15;
    return o15;
}
f0();
const v17 = f0();
function f18() {
    return f0;
}
Object.defineProperty(v17, "toString", { writable: true, configurable: true, get: f18 });
f0();
let v20 = 5;
v20++;
const v23 = new Uint8ClampedArray(v17);
let v24;
try { v24 = v23.join(v20); } catch (e) {}
try { v24.trimLeft(); } catch (e) {}
Uint16Array.toString = f0;
const v28 = new Uint16Array(8);
try { v28.entries(); } catch (e) {}
const v31 = 5 + 5;
v31 - v31;
new Uint16Array(5);
let v35 = 16;
v35++;
Object.hasOwn(v35);
const v39 = Object(v35);
function f40() {
    const o42 = {
        "type": "function",
    };
    return 8;
}
v39[Symbol.toPrimitive] = f40;
try { v39.toExponential(v39); } catch (e) {}
try { v39.toFixed(v17); } catch (e) {}
const v47 = v39.toExponential(v35);
try { v47.link(Uint16Array); } catch (e) {}
let v49;
try { v49 = v47.toLocaleLowerCase(); } catch (e) {}
const v50 = v49?.strike;
try { new v50(); } catch (e) {}
