const v0 = [536870912,512,9];
const v1 = [992491624,-52359,536870912,-1240168781];
const v2 = [1961218635];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { a6.group(F3); } catch (e) {}
    try {
        this.b = a5;
    } catch(e8) {
    }
    try {
        this.f = a5;
    } catch(e9) {
    }
    try {
        this.e = a5;
    } catch(e10) {
    }
}
F3.arguments = F3;
const v11 = new F3(v0, v0);
new F3(v1, v11);
const v13 = new F3(v2, v11);
try { v13.toString(); } catch (e) {}
const v20 = new Uint32Array(7);
new BigInt64Array(9);
new Int16Array(3888);
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this.toString();
    Set.c = Set;
    const v32 = new Set();
    v32.add;
    try {
    const t0 = 9;
    t0();
    } catch (e) {}
    const v37 = new Int16Array(2183);
    try { v37.values(); } catch (e) {}
    4087 > v30;
    let [,,...v40] = v37;
    function f41(a42) {
        function f44(a45) {
            this[1] >>= 4087;
            function F46(a48) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v49 = new F46();
            function f50(a51, a52) {
                return F46;
            }
            v49.toString = v30;
            function F53(a55, a56, a57) {
                if (!new.target) { throw 'must be called with new'; }
                function f58(a59) {
                }
                Object.defineProperty(this, "g", { set: f58 });
                function f61(a62, a63, a64, a65) {
                }
                for (let v66 = 0; v66 < 25; v66++) {
                    f61();
                }
                try {
                    this.g = a56;
                    Object.defineProperty(Float64Array, "valueOf", { enumerable: true, value: f61 });
                    a42[Array(a57)];
                } catch(e71) {
                }
            }
            new F53(v49, v49, v49);
            new F53();
            return F28;
        }
        this.onmessage = f44;
    }
    const o76 = {
        "type": "function",
    };
    const v77 = o76?.toLocaleString;
    try { new v77(); } catch (e) {}
    new Worker(f41, o76);
}
let v80;
try {
const t0 = 3888;
v80 = new t0();
} catch (e) {}
const v81 = new v80();
v81.length = v81;
new F28();
const v83 = v20?.constructor;
try { new v83(); } catch (e) {}
