function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 8;
    } catch(e3) {
    }
    try {
        this.e = 8;
    } catch(e4) {
    }
    try {
        this.a = F0;
    } catch(e5) {
    }
}
const v6 = [-4];
try {
    new BigUint64Array(v6);
} catch(e9) {
}
const v10 = new F0();
const v11 = new F0();
class C12 {
}
const v13 = new C12();
const o14 = {
};
o14.g = v13;
const v15 = new F0();
v15.c = v15;
const v16 = [-983.565586595168];
const v17 = [-3.0,-4.720257523687128,-2.2250738585072014e-308];
v17.f = v17;
let v18;
try { v18 = v17.groupToMap(v15); } catch (e) {}
class C20 {
    594532432 = -60610;
}
const o21 = {
};
[1.1720622283791133,Infinity];
let v24 = 1000000000.0;
v24--;
const v26 = v24 / v24;
v26 / v26;
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    a31.g = a31;
    a32--;
    const v34 = a31?.__defineGetter__;
    try { new v34(a31, v16); } catch (e) {}
    const v36 = new v15();
    for (const v38 of `match${v36}-20124`) {
        v38.strike().codePointAt(v38);
    }
    a32 / a32;
    try {
        v11.a = a32;
    } catch(e42) {
    }
}
new F29(v10, 0.8490921730771821);
const v44 = new F29(v10, v17);
const v45 = v44?.constructor;
try { new v45(v44, v15); } catch (e) {}
v44.length;
new F29(v15, v10);
[-1e-15,-3.5730022420306433,-1.7976931348623157e+308,-2.1576909405108546,-2.0,583438.9032117634,-3.0];
[-2.220446049250313e-16];
[-967.2078107937161,0.8755240562711689,5.0,-1.0,Infinity,-555331.058791541,426264.5150050877];
const v52 = [536870888,8];
let v53;
try { v53 = v52.reverse(); } catch (e) {}
try { v53.reduceRight(v18); } catch (e) {}
Math.cbrt(11 - 11);
const v62 = new Uint8Array(9);
v62.lastIndexOf(10);
v52.concat(v52);
