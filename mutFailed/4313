class C3 {
    #e = -2.220446049250313e-16;
    static h;
    static {
        const o5 = {
        };
        new Proxy(this, o5);
    }
    static o(a9, a10) {
        const v11 = this >> a9;
        try { new a10(11, v11); } catch (e) {}
        return C3;
    }
    static a = -2.220446049250313e-16;
    static #f = 11;
}
const v13 = new C3();
const v14 = new C3();
const v15 = new C3();
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a18;
    } catch(e22) {
    }
    try {
        a20.g = a21;
    } catch(e23) {
    }
    try {
        this.c = a20;
    } catch(e24) {
    }
}
new F16(v13, v13, C3, v13);
const v26 = new F16(v15, v15, v13, v13);
new F16(v26, C3, v14, v13);
Math.expm1(Math);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 623722764;
}
const v38 = new F35();
const o41 = {
    set h(a40) {
    },
    __proto__: v38,
};
[-2147483648,64,15561];
[7];
[14,34917];
[39028];
[531384559];
[2.8717861509585614,-1000000000.0,-1000000000000.0,1000000.0,901.8219690895987,-936.8960135773823,-472.5047406550764,-5.0,1000000000.0];
function f51(a52, a53) {
    const o55 = {
        ...a52,
        get d() {
            return this;
        },
    };
    return f51;
}
f51();
f51();
new BigUint64Array();
for (let [i63, i64] = (() => {
        10 ^ 10;
        return [-36789, v26];
    })();
    i64 < i64;
    i63++) {
}
const v73 = [4294967297];
const v79 = new Float32Array(10);
new Uint8Array(12);
new v79(1);
class C89 {
    static {
        super.b;
        super[10];
        v73[-15n] ^= 10;
        const v96 = BigUint64Array * -2141857809;
        v96 ** v96;
        +(BigUint64Array - v96);
        -2141857809 << BigUint64Array;
        for (const v101 of "-4294967295") {
        }
    }
}
