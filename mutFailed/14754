function f0() {
    const o14 = {
        "c": -1613512434,
        "f": -65536,
        get d() {
            new Uint8ClampedArray(4096);
            new Float64Array(2);
            const v13 = new Int8Array(8);
            return v13;
        },
    };
    o14.d = o14;
    return o14;
}
f0();
const v16 = f0();
f0();
function f18() {
    return v16;
}
const v19 = [255,9,-2147483647,536870912,129,31126,-65535];
let v20;
try { v20 = v19.entries(); } catch (e) {}
try { v20.next(); } catch (e) {}
const v22 = v19[6];
v22 - v22;
const v24 = [43145,42877,-9007199254740991,129,65465,52256,16,-59979,31564,0];
let v25;
try { v25 = v24.toString(); } catch (e) {}
v25[46] = v25;
[-2,-65537,536870887,27117,30460,128];
const v28 = 7935389 !== 7935389;
v28 && v28;
let v30 = -2147483649;
v30++;
v30 + v30;
38375 + 38375;
function F35() {
    if (!new.target) { throw 'must be called with new'; }
}
F35.e = F35;
class C37 extends F35 {
    static {
        this.prototype = this;
        const v39 = this.prototype;
        const v40 = v39?.__lookupSetter__;
        try { new v40(v39); } catch (e) {}
        this.f = this;
        try {
            this.fuck(this, this, F35);
        } catch(e43) {
            e43.g = e43;
            e43.b = e43;
            e43.stack = e43;
        }
    }
    static 10;
}
function f44() {
    760977347 - 760977347;
    const o49 = {
        __proto__: "S3KT",
        [-5900]: "S3KT",
        "f": 760977347,
        4147259639: 760977347,
        659269453: "S3KT",
        "g": 760977347,
        "h": -5900,
        [760977347]: "S3KT",
        "e": -5900,
        "c": "S3KT",
    };
    return o49;
}
function f50() {
    return f50;
}
const o52 = {
    [f50]() {
    },
};
const v53 = f44();
const v54 = f44();
const v55 = f44();
v55.g = v55;
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    a58[760977347];
    a59[659269453];
    try {
    } catch(e62) {
    }
}
const v63 = new F56(v54, v54);
const v64 = new F56(v54, v53);
const v65 = v64?.constructor;
try { new v65(C37, C37); } catch (e) {}
const v67 = new F56(v55, v53);
try { v67.propertyIsEnumerable(v16); } catch (e) {}
try { Int16Array(38375, 38375, Int16Array); } catch (e) {}
let v75 = Int16Array;
let v76 = 6;
v76--;
let v79 = -1024;
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    -a82;
    try { new a84(v24, F35, this, a84); } catch (e) {}
    try { new a85(v28, F35, a82, a85); } catch (e) {}
}
const v89 = new F80(v79, F80, F80, F80);
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    a93.arguments = a93;
}
new F91(F91);
class C96 {
}
const v98 = [601759695];
try { v98.lastIndexOf(v98); } catch (e) {}
function f100() {
    class C101 {
        set d(a103) {
        }
    }
    class C104 extends C101 {
    }
}
for (let v106 = 0; v106 < 5; v106++) {
    function f107() {
        let v110 = Float64Array;
        const v112 = Array();
        function f113() {
        }
        function f114(a115) {
        }
        Object.defineProperty(v112, 0, { configurable: true, enumerable: true, get: f113, set: f114 });
        const v116 = v112.unshift(v79);
        function F117(a119, a120) {
            if (!new.target) { throw 'must be called with new'; }
        }
        try { F117(38375, 38375); } catch (e) {}
        v110 = F80;
        const v122 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        v122[1];
        class C125 {
        }
        C125.prototype = C125;
        const v126 = new C125();
        v126.__proto__ = F91;
        const v127 = ["Vre","Vre","Vre","Vre"];
        class C128 {
        }
        function* f129(a130, a131) {
            yield* v127;
        }
        const v132 = Symbol.toPrimitive;
        Symbol.for(v132.description);
        Symbol.match;
        const o143 = {
            toString(a139, a140) {
                const v141 = v106 && v110;
                v75 *= v132;
                v141 <= v122;
            },
        };
        try { o143.toString(v106, v79); } catch (e) {}
        let v145 = -268435456;
        v145--;
        const o168 = {
            [522675525n](a148, a149) {
                new Int32Array(Int32Array);
            },
            valueOf(a155, a156) {
                return this;
            },
            [-4294967297n](a158, a159, a160, a161) {
            },
            "e": v145,
            "maxByteLength": -4294967295,
            ...v89,
            [v132]() {
            },
            "type": C96,
            ...v63,
            ..."Vre",
            get h() {
            },
            4: "Vre",
            toString(a165, a166, a167) {
            },
            6: v145,
        };
        try { new Float32Array(Int8Array, v106, Int8Array); } catch (e) {}
        new Float32Array();
        v79 %= v145;
        try { new Float64Array(v19, v19, v19); } catch (e) {}
        try { new Float64Array(Float64Array, v25, f107); } catch (e) {}
        const v176 = new Float64Array(v116, v116);
        v176[1];
        new Uint16Array(Symbol, v145, v145);
    }
    f107.prototype;
    f107();
    %OptimizeFunctionOnNextCall(f107);
    function f182() {
    }
}
