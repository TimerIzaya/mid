class C3 {
    [0.9444486154098121];
    constructor(a5) {
        const v7 = Symbol.iterator;
        const o16 = {
            [v7]() {
                let v9 = 10;
                const o15 = {
                    next() {
                        v9--;
                        const v13 = v9 == 0;
                        const o14 = {
                            "done": v13,
                            "value": v9,
                        };
                        return o14;
                    },
                };
                return o15;
            },
        };
    }
}
const v17 = new C3(C3);
const v18 = new C3(v17);
const v19 = new C3(v17);
function f20(a21, a22) {
    const o23 = {
        ...v18,
        "h": v18,
        "c": a21,
        ...v18,
        "e": v19,
        256: -3,
        "d": 65536,
        __proto__: a22,
        ...a22,
        "b": a21,
    };
    return o23;
}
const v24 = f20(C3, v19);
f20(v18, v24);
f20(v18, v24);
function F27(a29) {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = new F27(F27);
gc.arguments = gc;
const v32 = gc();
let v33 = -1024;
const v34 = v33--;
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
}
const v41 = new F35(v32, v30, v30, v34);
const v42 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
}
class C47 {
}
let v48 = -4294967297n;
const v49 = v48--;
const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
for (let v52 = 0; v52 < 5; v52++) {
    function f53() {
        let v55 = Float64Array;
        const v57 = Array();
        function f58() {
        }
        function f59(a60) {
        }
        Object.defineProperty(v57, 0, { configurable: true, enumerable: true, get: f58, set: f59 });
        const v61 = v57.unshift(v33);
        const v63 = new Set();
        function F64(a66, a67) {
            if (!new.target) { throw 'must be called with new'; }
            F64(a67, v63);
        }
        v55 = F35;
        const v69 = v42.length;
        const v70 = v69 >>> v69;
        try {
            v70.forEach();
        } catch(e72) {
        }
        const v73 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.unscopables;
        class C76 {
        }
        const v77 = new C76();
        try {
            v77.__proto__ = F43;
            const v78 = ["Vre"];
            class C79 {
            }
            function* f80(a81, a82) {
                yield* v78;
                return "Vre";
            }
        } catch(e83) {
        }
        const v84 = Symbol.toPrimitive;
        try {
            Symbol();
        } catch(e86) {
        }
        try { new Symbol(); } catch (e) {}
        const o94 = {
            toString(a90, a91) {
                const v92 = v52 - v55;
                a90 *= v84;
                return v92 <= v73;
            },
        };
        const o116 = {
            "c": v48,
            [522675525n](a97, a98) {
            },
            valueOf(a100, a101) {
                return a101;
            },
            [v48](a103, a104, a105, a106) {
            },
            "e": -268435456,
            "arguments": v50,
            ...v41,
            [v84]() {
            },
            "type": C47,
            ..."Vre",
            valueOf(a109, a110) {
                return v49;
            },
            ..."Vre",
            get h() {
                return f53;
            },
            4: "Vre",
            toString(a113, a114, a115) {
                return this;
            },
        };
        new Reflect(Array, v61, v69);
        new Float64Array(v61, f58, v52);
        const v122 = new Uint16Array();
        const v123 = v122?.entries;
        try { new v123("Vre", v123, v123, v123); } catch (e) {}
        return f59;
    }
    f53();
    %OptimizeFunctionOnNextCall(f53);
}
