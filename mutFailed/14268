[1000000000.0,-3.0];
[1.6492839608307299e+308,1.7976931348623157e+308];
[-Infinity,7.410761351135385,-Infinity,5.0];
const v3 = [1.076072248809246e+308,-3.0,52003.731703987345,-2.0,327.8563316621744,-1.1230257398200076e+307];
[546397.3936454577];
[-931600.9406100663,-4.0,144.11018888197714,Infinity,-2.220446049250313e-16,4.0,-1.7976931348623157e+308,-2.2250738585072014e-308];
11 | 11;
let v11 = 11 + 11;
v11++;
new Int8Array(11);
const v17 = new Float64Array(127);
v17[75];
let v19;
try { v19 = v17.join("toDateString"); } catch (e) {}
const v21 = 0 - 0;
v21 > v21;
new Float32Array(0);
const v25 = [-460.307183313349,116746.1734742194,2.0,0.7612507062467385,-1.7352454748688924e+308];
function f26(a27) {
    Reflect.preventExtensions(Reflect);
    return a27;
}
f26.d = f26;
const v30 = [];
let v31;
try { v31 = v30.findLast(0); } catch (e) {}
function f32() {
    const o36 = {
        toString() {
            super[this];
        },
        ...v30,
        n() {
            return this;
        },
    };
    try { o36.toString(); } catch (e) {}
    let v38;
    try { v38 = o36.n(); } catch (e) {}
    try { v38.toString(); } catch (e) {}
    return v30;
}
%PrepareFunctionForOptimization(f32);
v31();
const v41 = f32();
try { v41.forEach(v11); } catch (e) {}
try { v41.every(v17); } catch (e) {}
%OptimizeFunctionOnNextCall(f32);
const v45 = f32().length;
v45 >>> v45;
Symbol.hasInstance = Symbol;
const v48 = Symbol.toPrimitive;
v25[v48] = f26;
function f49(a50, a51) {
    try { a50.findLast(a50); } catch (e) {}
    function f53(a54, a55) {
        return a54;
    }
    return a51;
}
let v56;
try { v56 = f49(v30, "toDateString"); } catch (e) {}
v56.length;
f49.d = f49;
f49.d = f49;
try { new Symbol(); } catch (e) {}
const v60 = Symbol.toPrimitive;
gc();
const o67 = {
    [122188848n](a65, a66) {
    },
};
o67[122188848] = o67;
o67[122188848] = o67;
try { Symbol(); } catch (e) {}
const v70 = v60.description;
v70[11] = v70;
function F71() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 2;
}
F71.length = F71;
4294967296 * 4294967296;
4294967296 & 4294967296;
Symbol.for(v70);
v25[v60] = f49;
try { new o67(); } catch (e) {}
let [] = [];
[Int32Array,Int32Array,Int32Array,Int32Array];
const v82 = [618.1593022982238,-670.4331556988014,-598.8215888934105,1e-15,0.6439103075146282,996419.0616454568,-1.0,-1000000000.0,1e-15,-566.0187654378863];
Symbol.g = Symbol;
const v84 = Symbol.toPrimitive;
Symbol.for(v84.description);
v82[v84] = Symbol;
v82.toString = Symbol;
const v88 = [0.38491475396310426,1.7976931348623157e+308,-1e-15,924251.5567374192,NaN,1.5098751561946018e+308,-1.1124820518145282e+308,-3.0,-0.0,-467.0550866857337];
v88[5];
v88[5];
class C91 {
    valueOf(a93) {
        let v94;
        try { v94 = v88(a93, this, this, a93, this); } catch (e) {}
        try { v94(v82, v94, v94); } catch (e) {}
        return v25;
    }
    1000;
    static #d = v82;
    static [v25] = v88;
    static #a;
    [v25] = v88;
    static [v82];
    static #e = v88;
}
new C91();
const v97 = new C91();
v97[1000] = v97;
const v98 = new C91();
v98[1000];
v98[1000];
const v102 = new v19();
const v103 = v102?.constructor;
try { new v103(); } catch (e) {}
const v105 = v102?.constructor;
try { v105.apply(v11, f26); } catch (e) {}
let v107;
try { v107 = new v105(); } catch (e) {}
try { v107.delete(v48); } catch (e) {}
let v109;
try { v109 = v102.has(WeakMap); } catch (e) {}
v109 || v109;
const v111 = v109 || v109;
v111 && v111;
new Date();
let v116;
try { v116 = new Array(Array); } catch (e) {}
v116[0];
const v119 = Array(4087);
const v120 = v119?.constructor;
try { new v120(v120); } catch (e) {}
try { new v120(v119); } catch (e) {}
for (const v123 of v3) {
}
255n / 255n;
!(1371215815n == 1371215815n);
[,,,,,];
