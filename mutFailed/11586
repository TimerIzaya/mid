const v2 = new Int16Array(2);
new Int8Array(-8);
new Uint8Array(14);
class C9 {
    static #m(a11, a12, a13) {
        for (let v14 = 0; v14 < 32; v14++) {
            this["p" + v14] = v14;
        }
        return 14;
    }
    #valueOf(a18, a19, a20, a21) {
        let v22 = 0;
        do {
            const v24 = [a18];
            Reflect.apply(v2.reduce, a18, v24);
            v22++;
        } while (v22 < -268435456)
        return a21;
    }
}
new C9();
new C9();
new C9();
class C36 {
}
const v37 = new C36();
const v38 = v37.constructor;
let v39;
try { v39 = v38(v38, C36); } catch (e) {}
function f40() {
    const v42 = ("D")[0];
    try { v42.substring(v39); } catch (e) {}
    return v39;
}
%PrepareFunctionForOptimization(f40);
f40();
%OptimizeFunctionOnNextCall(f40);
f40();
