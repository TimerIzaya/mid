const v0 = [];
const v1 = [1.7976931348623157e+308,5.648803867989334e+307];
function f2(a3, a4) {
    return this;
}
const v7 = [0.0,0.0];
const o8 = {
    __proto__: v7,
};
o8.push(0.0);
[5.0,-4.0,0.5598733385653648,528383.6345280043,-587964.8829632478,0.4206874033212481,5.416567576236761e+307,-4.0,0.2776902254736675];
const v11 = [-1000000.0,-Infinity,1000000.0,6.104810457435129e+307,1.0665935739828351e+308,1.5514898740620924e+307,1e-15];
for (let i = 0; i < 5; i++) {
    ["object"];
}
const v15 = [601759695];
function f16() {
    let v20 = -4294967297n;
    const v21 = v20--;
    for (let v22 = 0; v22 < 5; v22++) {
        function f23() {
            b = v15;
            const o30 = {
                [v21](a26, a27, a28, a29) {
                },
            };
            return Date;
        }
    }
    return v20;
}
class C37 {
    static [v11];
    constructor(a39) {
        try { v11(this); } catch (e) {}
        /Jg/gvdim;
        /(?<a>(?<b>(?<c>(?<d>.).).).)(?<a>(?<b>(?<c>(?<d>.).).).)/udmsy;
        /nj(?<a>.)\k<a>/gvdmsy;
    }
    282395410;
    #e = v0;
    9;
}
new C37(v11);
new C37(v1);
new Uint8ClampedArray(4);
for (let v49 = 0; v49 < 32; v49++) {
}
new C37(v0);
/a+/gdmy;
/8pl+/vi;
-25283n && -25283n;
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this.constructor;
    try { new v62(); } catch (e) {}
    try {
    } catch(e64) {
        const v66 = Float32Array();
        class C68 extends Float64Array {
        }
        const v69 = C68();
        try { v69(v66); } catch (e) {}
    }
}
const v71 = new F56();
new F56(F56, v71, v71, v71);
/foo|(bar|baz)|quuxa(?=b)/gui;
const v74 = [-4096,-4096,-1073741824,4096,-2];
const o75 = {
    __proto__: v74,
    ...v74,
};
o75.pop(o75, v74);
[0.0,829774.1429442992,1e-15,0.6239241725805341,Infinity];
function F78(a80) {
    if (!new.target) { throw 'must be called with new'; }
    const v81 = this.constructor;
    try { v81.apply(a80); } catch (e) {}
    try { new v81(); } catch (e) {}
}
const v84 = /8[\cA]v/uisy;
const v85 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v85.length = v84;
} catch(e86) {
}
new F78();
new F78();
("D")[0];
[Uint32Array];
function f93(a94, a95) {
    const o96 = {
        ...a94,
    };
    return a95;
}
