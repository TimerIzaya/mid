function f0() {
    const o10 = {
        valueOf(a5, a6) {
            try {
                this.fuck(-9007199254740990, a5, "6Q");
            } catch(e9) {
            }
            return -2;
        },
        "g": -11264,
        __proto__: "6Q",
        [-2]: -2,
        "d": "6Q",
    };
    o10.h = o10;
    return o10;
}
const v11 = f0();
f0();
const v13 = f0();
[-9,256,1073741825,-12,10000];
const v15 = [4,-65535,-128,3];
let v16 = b;
v13["valueOf"](v15);
let v19 = v15[v15];
v19 = v16;
const v20 = [9007199254740990];
try { v20.lastIndexOf(v11); } catch (e) {}
1000000.0 + 1000000.0;
183.59684101295534 >= 183.59684101295534;
class C27 extends f0 {
    get MIN_SAFE_INTEGER() {
        v16 = -13;
        super.d <<= 183.59684101295534;
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeFunctionOnNextCall(f0);
        f0();
        Math.cos(-5.0);
        Math.pow(-13, v13);
        Math.sign(-5.0);
        return 183.59684101295534;
    }
    7;
    static [v20];
}
new C27(f0);
const v41 = new C27();
const v42 = new C27();
v13[536870889];
try { v42.valueOf(C27); } catch (e) {}
v41[268435441];
const o50 = {
    "execution": "async",
    "type": "minor",
};
gc(o50);
Int32Array.g = Int32Array;
const v54 = new Int32Array(2528);
v54[0] %= -1073741824;
