function f2(a3, a4) {
    WeakSet % a3;
    const o8 = {
        "maxByteLength": 529,
    };
    const v10 = new SharedArrayBuffer(529, o8);
    new Int32Array(v10);
    return WeakSet;
}
WeakSet.toString = f2;
const v13 = new WeakSet();
const v14 = [v13,null,WeakSet,null];
[WeakSet,v14];
const v16 = [WeakSet,null];
let v17;
try { v17 = v16.pop(); } catch (e) {}
const v18 = [-638127.280660888];
const v19 = [-3.0,-1.370380395629191e+308,-1000000000.0,-1000000000000.0,3.249200109916524,0.10754460629819729,-1e-15,0.7418865572243084];
try { v19.toLocaleString(); } catch (e) {}
const v21 = [428.8324543558015,4.0,-Infinity,-2.220446049250313e-16,-1e-15];
class C22 extends WeakSet {
    d = v18;
    o(a24, a25, a26) {
        %VerifyType(a24);
        super.h ||= a26;
        super[this];
        this[null] += v17;
        try { new a26(this, v16, v19, a26); } catch (e) {}
        try { a25(); } catch (e) {}
        try {
            new WeakSet(v21);
        } catch(e34) {
        }
        return v14;
    }
    static #c;
}
function f35(a36) {
    let v37;
    try { v37 = a36(C22, a36); } catch (e) {}
    f2(v37, v18);
    %PrepareFunctionForOptimization(f2);
    f2(v37, v18);
    f2(v37, v18);
    %OptimizeFunctionOnNextCall(f2);
    f2(v37, v18);
    return a36;
}
const v43 = Symbol.toPrimitive;
C22[v43] = f35;
new C22();
let v45 = new C22();
function f46(a47, a48) {
    v45 = C22;
    try {
        Symbol("jP5");
    } catch(e51) {
    }
    return a47;
}
v45.constructor = f46;
const v52 = v45?.constructor;
function f53(a54) {
    a54 && a54;
    for (let v56 = 0; v56 < 32; v56++) {
        v43["p" + v56] = v56;
    }
    return a54;
}
v52.toString = f53;
let v59;
try { v59 = new v52(); } catch (e) {}
function f60() {
    return f46;
}
function f61(a62) {
    class C63 {
        set h(a65) {
        }
        b;
    }
}
Object.defineProperty(v59, "valueOf", { writable: true, enumerable: true, get: f60, set: f61 });
new C22();
7n ^ 7n;
Int16Array.name;
v59 >>>= 1304;
new Float64Array(3);
new Float32Array(13);
new Int8Array(3326);
Uint16Array.length = Uint16Array;
new Uint16Array();
Date - "sync";
let v92 = 9007199254740990;
const v93 = C22 << v92;
Math.trunc(v93);
const v95 = !v93;
Math.log1p(C22);
Math.floor(v95);
++v92;
v95 ** v95;
const o100 = {
    "type": "minor",
};
gc(o100);
