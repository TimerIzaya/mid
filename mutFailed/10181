class C3 {
    static m(a5, a6) {
        let v7;
        try { v7 = new a5(-2147483648, this); } catch (e) {}
        try {
            this.b = a5;
        } catch(e8) {
        }
        return v7;
    }
    m(a10, a11) {
        class C12 {
            h;
            static 268435441;
            static 1371 = a11;
            e;
            [-1407] = -1407;
            static #c;
            a;
            [this];
            static {
                for (const v15 in this) {
                }
            }
        }
        new C12();
        new C3();
        function f18() {
            new ArrayBuffer(ArrayBuffer, ArrayBuffer);
            return -1407;
        }
        %OptimizeFunctionOnNextCall(f18);
        const v21 = new C12();
        return v21;
    }
}
const v22 = new C3();
const v23 = new C3();
const v24 = v23?.constructor;
try { new v24(); } catch (e) {}
const v26 = new v22();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
const v29 = [-2147483648,-2147483648,v26];
const v30 = [-7124];
const v31 = [C3,v30,v30];
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try { a34.pop(); } catch (e) {}
    a36.prototype = a36;
    try {
        this.c = a36;
    } catch(e39) {
    }
    try {
        this.a = a36;
    } catch(e40) {
    }
}
try { new F32(v30, -1407, v30, -1407); } catch (e) {}
new F32(v31, v29, C3, -2147483648);
const v43 = new F32(v31, v31, v31, -7124);
new F32(v29, v30, v43, -2147483648);
Int8Array.g = Int8Array;
const v48 = new Uint8ClampedArray(303);
Object.defineProperty(v48, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
