new Int8Array(12);
new BigInt64Array(63);
new BigUint64Array(1427);
function f9(a10, a11, a12) {
    const o21 = {
        9: a12,
        "g": a12,
        get h() {
            const o16 = {
                "f": this,
                [a12]: 2415,
                __proto__: a11,
                "g": 2415,
                [a10]: Int8Array,
                "maxByteLength": 2415,
            };
            const v18 = new SharedArrayBuffer(16, o16);
            const v20 = new DataView(v18);
            return v20;
        },
    };
    return a10;
}
const v24 = new Uint8Array();
const v26 = Symbol.isConcatSpreadable;
const v29 = new Map();
function f30(a31) {
    const o38 = {
        __proto__: v29,
        "f": v29,
        ...a31,
        [v29]: -6n,
        [-6n](a33, a34, a35, a36) {
            delete v29?.size;
        },
    };
    return o38;
}
const v39 = f30(v29);
let v40;
try { v40 = (1427).m(v39, Map); } catch (e) {}
v29[Symbol.matchAll];
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a47;
    } catch(e50) {
    }
    try {
        this.a = v29;
    } catch(e51) {
    }
}
new F44(670, v40, 670, v40);
const v53 = new F44(670, F44, 670, 1427);
new F44(v26, v53, 1427, 670);
v24[v40] = BigInt64Array;
const v56 = Array();
Array(670)["concat"](v56, v24);
f9(1427, 12, 12);
Promise.race();
Math.tanh(-1000.0);
const t58 = f9(63, 63, 12);
const v67 = t58(12, 1427, 12);
class C69 {
    constructor(a71, a72, a73) {
    }
}
new v67(C69);
