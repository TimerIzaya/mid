const v2 = new BigInt64Array(1568);
v2[3] >>>= 1568;
const v4 = v2["reduce"]("reduce", "reduce");
const v6 = v4 !== 1568 ? v4 : 1568;
const v9 = new Int32Array(4);
const v12 = new BigUint64Array(1890);
class C13 extends BigInt64Array {
    772 = v12;
    #valueOf(a15, a16) {
        const v17 = super[a16];
        let v18;
        try { v18 = v6(this, v17, v6, v17, a15); } catch (e) {}
        const o19 = {
        };
        try {
            o19.d = Int32Array;
        } catch(e20) {
        }
        try {
            const o21 = {
            };
            o21.d = Int32Array;
            o21.c = v18;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.d = Int32Array;
            o23.c = v18;
            o23.b = v18;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.d = Int32Array;
            o25.c = v18;
            o25.b = v18;
        } catch(e26) {
        }
        try { a15(a15, this, a16, a15, this); } catch (e) {}
        try {
            v9.b = v12;
        } catch(e28) {
        }
        return v12;
    }
    [v2] = v2;
}
new C13();
new C13();
new C13();
function f33() {
    const v36 = Array(4087, -2.220446049250313e-16);
    v36[4037] = v36;
    return Array;
}
%PrepareFunctionForOptimization(f33);
f33();
%OptimizeFunctionOnNextCall(f33);
f33();
