const v0 = [0,480547142,1809822823,6,-65536];
const v1 = [8,-3,24102,8,-128];
const v2 = [1];
let v4;
try { v4 = v1(v2, 6, v2, v0, v0); } catch (e) {}
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a7;
    } catch(e9) {
    }
    try {
        this.e = v2;
    } catch(e10) {
    }
}
const v11 = new F5(v0, v2);
new F5(v2, v0);
const v13 = new F5(v0, v1);
let v14 = Uint8Array;
const v15 = new v14(6);
for (const v16 of v2) {
    continue;
    v15[v11];
}
new F5(v1, v2);
v15[2147483648] = v13;
try {
    new Float64Array(8, 8, 8);
    const v23 = ("boolean").normalize();
    v23[1] = v23;
    v11.toString = v4;
    v14++;
    /a{0,1}?/gu;
    /[]yF/gudimy;
    /oa\c_/gdiy;
    [] = v15;
} catch(e28) {
    function f29(a30, a31) {
        const o32 = {
        };
        return o32;
    }
    Int32Array.bind(Int32Array, Int32Array, Int32Array);
    const v38 = new Float32Array(2);
    v38[1] = v38;
    new Int32Array(v38);
    const v40 = new Int16Array(6);
    const v43 = new BigInt64Array(4046);
    function f44(a45, a46) {
        const v47 = [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
        try {
            v40.entries();
        } catch(e49) {
        }
        Object.defineProperty(v1, "a", { writable: true, configurable: true, set: f44 });
        Math.exp(v47 | [1073741824,-46456,536870888]);
        let o54 = {
        };
        [,...o54] = v43;
    }
}
const v56 = new Float64Array(8);
const v59 = new Int8Array(53);
const t64 = "at";
t64[1] = "at";
const v62 = 3 != 3;
const v64 = [Worker];
new Worker(v64, v56);
const o66 = {
};
new Proxy(v59, o66);
v64.unshift(v62);
function f70() {
    return f70;
}
class C71 extends f70 {
}
const v72 = new C71();
function f73() {
    const v76 = [-1235077344,-4096,50383815,-8476,-9007199254740991];
    class C78 extends Set {
    }
    new C78(v76);
    59817n < undefined;
    return f73;
}
%PrepareFunctionForOptimization(f73);
const t88 = v72.constructor;
t88().name;
function F84(a86, a87, a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    function F90(a92, a93) {
        if (!new.target) { throw 'must be called with new'; }
        function f94() {
            const v95 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
            v95.length >>>= -65536;
            return v95;
        }
        f94();
        try {
            new F90(a87, a92);
        } catch(e99) {
        }
    }
    new F90();
}
