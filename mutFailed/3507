const v0 = [512,-15,128,1000,-36373,536870887];
const v1 = [268435441,-12,-9223372036854775807,15,-536870912];
function f2() {
    class C4 extends Set {
    }
    return v0;
}
v1.toString = f2;
const v5 = [-128,-7480,65535,-1478832433,1756482771];
const v6 = [v1,v5,v5,v5,v0];
const v7 = [v0,v1,v6,v6,v6];
const v8 = [v6];
class C9 {
    static n(a11, a12, a13, a14) {
        a11[a13] = a11;
        v1 == v6 ? v1 : v6;
        return v0;
    }
    static [v8];
    m(a18, a19, a20, a21) {
        super.e = a18;
        a19 = C9;
        return v7;
    }
    static b;
    d;
    2 = v8;
    static #b = v6;
}
const v22 = new C9();
const v23 = new C9();
v23.p24 = v22;
const v24 = new C9();
const v25 = [v24,v7,v24];
const v26 = [v25,v23];
[v26,v26,v25,v1];
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    %VerifyType(F28);
    function f30() {
        return C9;
    }
    const o33 = {
        "maxByteLength": 2127618681,
    };
    const v35 = new ArrayBuffer(722, o33);
    new Int16Array(v35);
    const v38 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
    function F39(a41, a42, a43, a44) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v45 = new F39(v38, F28, v38, F39);
    v45.length = f30;
    const v47 = [F28,F28,F28,F28];
    Reflect.apply(v38.indexOf, v45, v47);
    typeof F28 === "number";
    for (let v53 = 0; v53 < 32; v53++) {
        v23["p" + v53] = v53;
    }
}
new F28();
