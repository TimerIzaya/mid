const v0 = [];
const v1 = [v0,v0,v0,v0,v0];
const v3 = [v1,[v0,v0],v1];
new Uint32Array(176);
let v13 = 0;
v13--;
try { Uint8Array.of(); } catch (e) {}
const v17 = new Uint8Array(v13);
try { v17.find(4294967296); } catch (e) {}
62 - 62;
Int16Array.prototype;
const v23 = new Int16Array(62);
v23[38] = v23;
function f24(a25, a26, a27, a28) {
    a25 - a25;
    try { a28(v13, v3, a26, v13); } catch (e) {}
    function f31() {
        try { Math.expm1(Math); } catch (e) {}
        let v34 = Math.expm1(a26);
        v34--;
        const v36 = Math.tanh(Math);
        const o37 = {
            [v36]: v34,
        };
        o37.NaN = o37;
        o37.NaN = o37;
        return f24;
    }
    f31();
    eval(a28);
    %OptimizeFunctionOnNextCall(f31);
    return eval;
}
for (let v41 = 0; v41 < 5; v41++) {
    f24(v41, v41, f24, f24);
}
