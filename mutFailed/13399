function f0() {
    const o16 = {
        get a() {
            const o5 = {
            };
            new Proxy(this, o5);
            return o5;
        },
        14: 2.220446049250313e-16,
        "h": -1810942682,
        n(a9) {
            let v12 = 8;
            +860730014;
            return 65537 << v12++;
        },
    };
    o16[14] = o16;
    return o16;
}
const v17 = f0();
const v18 = f0();
const v19 = v18();
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    a22[14] = a22;
    try {
        this.h = v19;
    } catch(e24) {
    }
    try {
        this.f = a23;
    } catch(e25) {
    }
    try {
        this.d = this;
    } catch(e26) {
    }
}
new F20(v17, v17);
const v28 = new F20(v18, v18);
new F20(F20, v19);
new Int16Array(11);
let v33 = 154;
v28[Int16Array] &&= 11;
f0 >> f0;
-(-6);
const v39 = --F20;
v39 >>> v39;
257 << 257;
const v42 = Math.acos(f0);
try { new Int16Array(Int16Array, v42, v39); } catch (e) {}
new Int16Array(v33);
new Uint32Array(1024);
for (let v52 = 0; v52 < 5; v52++) {
    const v53 = v52 < v52;
    v53 && v53;
    const v55 = f0();
    v55[14] = v55;
    const o56 = {
        "call": Date,
        "defineProperty": f0,
        "has": f0,
        "ownKeys": Date,
        "preventExtensions": Date,
        "set": Date,
        "setPrototypeOf": Date,
    };
    try { o56.defineProperty(); } catch (e) {}
    const v59 = Proxy?.revocable;
    try { new v59(v53, f0); } catch (e) {}
    const v61 = new Proxy(v55, o56);
    v61.h = v61;
    v33++;
}
for (let v63 = 0; v63 < 10; v63++) {
    const o96 = {
        m(a67) {
            const v68 = this?.m;
            try { new v68(undefined); } catch (e) {}
            a67.length = a67;
            let v70 = -9007199254740991;
            const v71 = v70++;
            v71 <= v71;
            super[11];
            let v74 = 108;
            v74--;
            const v77 = new Int8Array(v74);
            512 >>> 512;
            function f80() {
                return f0;
            }
            f80.length = f80;
            const v82 = Date(super.f);
            try { v82.blink(); } catch (e) {}
            const v85 = new Float32Array(512);
            v85[463];
            try { Int8Array.from(v77); } catch (e) {}
            new Int8Array(1000);
            v70 >> v70;
            Int8Array.prototype = Int8Array;
            const v94 = new Int8Array();
            let v95 = 3;
            for (let i = 0; i < 5; i++) {
                [...v95] = v94;
            }
            return v70;
        },
    };
    o96.m(o96);
    const v101 = new Float32Array(4096);
    v101.lastIndexOf(1.3174607869926752e+308);
}
