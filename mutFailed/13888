[846673736,16,-13,16,10];
[-65537];
[-4294967296,16,-56852,128,2,7,10];
new Int8Array(0);
new Uint16Array(1024);
new Int32Array(-2134757380);
function f15() {
    let v17 = 65537;
    v17++;
    const v21 = new Int32Array(1024);
    for (const v22 of v21) {
    }
}
f15();
f15();
const v39 = [];
class C40 {
}
const v41 = new C40();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a45;
}
const v46 = new F42(v41, v39);
function f47(a48, a49) {
}
const v52 = [v46];
const o53 = {
    "arguments": v52,
    "type": "function",
};
new Worker(f47, o53);
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new Uint16Array();
const v72 = new Float32Array();
try { v72.filter(); } catch (e) {}
try {
const t0 = 4294967295;
t0();
} catch (e) {}
new Uint8ClampedArray();
const o89 = {
    m() {
        for (let v82 = 0; v82 < 10; v82++) {
            v82 < 10;
        }
    },
};
try { Int32Array(); } catch (e) {}
new Int32Array();
function F93(a95, a96, a97) {
    if (!new.target) { throw 'must be called with new'; }
    const v98 = this.constructor;
    try { new v98(Uint16Array, a97, a97); } catch (e) {}
    a95 * a95;
    this.d = a95;
}
new F93(F93, 256);
class C103 {
}
const v106 = new Uint32Array(186);
Float64Array > v106;
