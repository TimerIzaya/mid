new Float64Array(5);
new Int8Array(5);
try { new Int16Array(Float64Array, Float64Array, 5); } catch (e) {}
new Int16Array(0);
~1561;
new Uint8Array(1561);
const v15 = [-1.0,1.0];
const v16 = [0.3389850054688205,-1000000000000.0,-4.0,-3.0,-600308.3959127744,291.59824712736395,0.6069772072034008,6.4812569442123475,-1.0,1.7976931348623157e+308];
const v17 = [3.1218977390328977,0.7567869002132325,0.0,2.030990796557246,4.641380514017136];
function F18(a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.constructor;
    try { new v21(this); } catch (e) {}
    a20[1];
}
let v24;
try { v24 = new F18(0); } catch (e) {}
const v25 = new F18(v15);
const v26 = new F18(v25);
class C27 extends F18 {
}
let v28 = new C27(v17, C27);
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
const v31 = new C27(v16, v26);
v31.length = v31;
const v32 = new C27(v15, v31);
v32.length;
function f34() {
}
const v36 = 1922 % 1922;
const v37 = v36 == v36;
for (let v38 = 0; v38 < 25; v38++) {
    const v39 = v38++;
    function f40() {
        return f40;
    }
    function f41(a42, a43, a44, a45) {
        a42 && a42;
        try { new a43(); } catch (e) {}
        a44 - a44;
        function f49() {
            return a42;
        }
        f49.h = f49;
        const v50 = f49.length;
        const v51 = f40();
        v51.arguments = v51;
        const v52 = v51.constructor;
        try { v52.propertyIsEnumerable(f41); } catch (e) {}
        Object.defineProperty(a43, 11, { configurable: true, enumerable: true, get: f34, set: f41 });
        v28 >>= v50;
        const v55 = gc?.constructor;
        try { new v55(f49); } catch (e) {}
        try { ("async").sup(); } catch (e) {}
        const o60 = {
            "execution": "async",
            "type": "minor",
        };
        const v61 = gc(o60);
        try { v61.then(v50, a43); } catch (e) {}
        for (let i = 0; i < 5; i++) {
        }
        try {
            try {
                const o63 = {
                };
                const o64 = {
                };
                o64.h = o64;
                const o65 = {
                };
                const o66 = {
                };
                o66.h = v25;
                return v61;
                function f67(a68, a69, a70, a71) {
                }
                function f72(a73, a74, a75, a76) {
                }
            } catch(e77) {
            }
        } catch(e78) {
        }
        BigUint64Array * 536870887;
    }
    for (let v82 = 0; v82 < 10; v82++) {
        if (v39 < v32) {
        } else {
        }
        f41(v37, f34, v39, f40);
    }
}
Uint16Array.d = Uint16Array;
const v86 = new Uint16Array(Uint16Array);
try { v86.join(v26); } catch (e) {}
const v90 = new v24(668);
try { v90.set(Uint16Array); } catch (e) {}
Int8Array.prototype = Int8Array;
const v93 = new Int8Array();
const o94 = {
    ...v93,
};
