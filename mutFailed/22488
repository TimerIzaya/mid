Object.defineProperty(Set, "e", { configurable: true, value: Set });
Set.e = Set;
const v1 = new Set();
function f2(a3, a4) {
    const v7 = new Uint8Array();
    const v9 = Symbol.isConcatSpreadable;
    v7[v9] = BigInt64Array;
    return v9;
}
Object.defineProperty(v1, "constructor", { value: f2 });
function F10(a12) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.iterator] = f2;
    function f15() {
        function F16(a18, a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
        }
        return Set;
    }
    this[Symbol.iterator] = f15;
    const v23 = a12?.constructor;
    try { new v23(this); } catch (e) {}
    try {
        this.h = a12;
    } catch(e25) {
    }
    v23?.e;
    a12 = Set;
    try {
        this.c = a12;
    } catch(e30) {
    }
    try {
        this.a = Set;
    } catch(e31) {
    }
}
F10.e = Set;
F10.arguments = F10;
const v32 = new F10(F10);
const v33 = new F10(v1);
function f34() {
    function F35() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v38 = new F35();
    const v39 = new F35();
    class C43 extends F35 {
        b = "number";
        set g(a45) {
            let v44 = this;
            ({"c":a45,"d":v44,} = v39);
        }
        static {
            const v47 = super[this];
            ("function").substring(v47, this, v47, "function", "8", this);
            super.c;
            try {
                v38.f = v47;
            } catch(e50) {
            }
        }
    }
    return "function";
}
v33.constructor = f34;
const v51 = new F10(v33);
function f52() {
    return v32;
}
function f53(a54) {
    Date[5] = a54;
    const v56 = new Date();
    v56.toLocaleDateString(Date);
}
Object.defineProperty(v51, "b", { enumerable: true, get: f52, set: f53 });
v51.b = v51;
const v58 = [v51,Set];
const v59 = [F10,F10];
const v60 = [v51];
v60[0];
class C65 extends F10 {
    #p(a67, a68, a69) {
        this.length *= v58;
        super.d = v59;
        delete v60[this];
        super[v33];
        super[a68] = v58;
        try {
            v60.toString = a69;
        } catch(e72) {
        }
        Math.acosh(-1557480532);
        Math.sinh(this);
        Math.fround(a69);
        return -1752984002n;
    }
    #h;
    #d = v33;
    static 1073741823 = v60;
}
new C65();
new C65();
const v82 = new C65();
try { v82.toLocaleString(); } catch (e) {}
const v85 = [601759695];
function f86(a87) {
    new Float32Array(9);
    return C65;
}
Object.defineProperty(v85, "valueOf", { writable: true, configurable: true, enumerable: true, value: f86 });
for (let v91 = 0; v91 < 5; v91++) {
    function f92() {
        let v94;
        try { v94 = Math.cos(v85); } catch (e) {}
        v94 ^ v94;
        const v96 = v94 + v94;
        v96 >> v96;
        const o103 = {
            [-1752984002n](a99, a100, a101, a102) {
            },
        };
        Object.defineProperty(o103, 2, { writable: true, enumerable: true, value: f92 });
        o103[2];
        return f92;
    }
    f92();
    %OptimizeFunctionOnNextCall(f92);
}
