const v1 = [];
const v3 = v1.toStringTag;
const t2 = "byteOffset";
t2[v3] = v1;
const v5 = -7 >>> -7;
const v6 = -v1;
const v7 = v6 ** v6;
if (v6) {
    Symbol[1590759173];
} else {
    try { Symbol.keyFor(v3); } catch (e) {}
}
try { ("cb").sup(); } catch (e) {}
class C13 {
    static o(a15) {
        a15[this] -= "cb";
        const v16 = "byteOffset" * a15;
        const v20 = new BigUint64Array(10);
        for (const v22 in v20) {
            new Float64Array(2147483647);
        }
        ("cb")["substring"](v16, v16);
        return this;
    }
    m(a27, a28) {
        super[this] = a27;
        ("e").normalize(this);
        return "e";
    }
    9;
}
try { new C13(); } catch (e) {}
const v33 = new C13();
const v34 = new v7();
v34[9] = v34;
new C13();
class C37 {
    p(a39, a40, a41, a42) {
    }
}
const v43 = [C37];
try { v43.some(v43); } catch (e) {}
const v47 = v43[Symbol.iterator];
v47.b = v47;
const t44 = v47.constructor;
const v49 = t44(C37);
v49.length = v49;
v49();
const v55 = [[v33,"cb","setHours",["268435439"]],C13];
try { v55.reduce("round"); } catch (e) {}
[-4.0,0.5072543175974724];
[-1000000000000.0,-475.01540669026167,4.0,-56173.046397371334,1000000000.0,2.0];
[-2.478820297225446,100031.99017911521,-966.9196596874197,-18671.50988297863,0.8473124682065124,-1000000000.0,0.12349980762569523,0.6152226813785093,1000.0,0.2887035837063684];
class C60 {
}
try { new v5(); } catch (e) {}
try { Array.of(); } catch (e) {}
function f64(a65, a66, a67, a68) {
    a67++;
    Array[Symbol.species] = C60;
    return a65;
}
for (let v72 = 0; v72 < 10; v72++) {
    f64(f64, v72, v72, v72);
}
