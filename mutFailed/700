function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 10182;
    } catch(e3) {
    }
    try {
        this.a = 10182;
    } catch(e4) {
    }
    try {
        this.b = 10182;
    } catch(e5) {
        const v6 = [-1000.0,1000000000.0];
        const v7 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
        const o11 = {
            [33062n]: 8n,
            __proto__: v7,
            [37369]: 10182,
            [e5]: e5,
            ...e5,
            5: v6,
            ...v6,
        };
        return o11;
    }
}
new F0();
new F0();
new F0();
new Uint32Array(2391);
new Int16Array(-536870912);
const v25 = new Uint16Array(Uint16Array);
new Int32Array(v25);
new Date();
new Int32Array(127);
const o37 = {
    get b() {
        delete this[this];
        this[this] = 817905185;
        super[817905185] = "object";
        return 817905185;
    },
};
function f38(a39) {
    const o40 = {
        ...o37,
    };
    return a39;
}
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F41(this, F41, -1000.0);
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e46) {
    }
}
function f47() {
}
class C48 extends f47 {
    constructor(a50) {
        super();
        for (let v51 = 0; v51 < 5; v51++) {
            super.valueOf();
        }
    }
}
new F41();
new F41();
function f55() {
    delete arguments.callee;
    return arguments;
}
f55();
new SharedArrayBuffer(4096, 4096, 4096);
const v62 = [];
function f63(a64, a65) {
    class C66 {
    }
    new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
    const v71 = [536870887,-42204,-17288903,-3,9007199254740991,7];
    const v72 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
    class C73 {
        constructor(a75) {
            function f76(a77, a78) {
                a77[5];
            }
            f76(v72);
            f76(v71);
            f76(a75);
        }
    }
    const v83 = C73.size;
    function f84(a85, a86, a87, a88) {
        try { a86.some(v83); } catch (e) {}
        const o90 = {
            __proto__: a85,
        };
        try { o90.groupToMap(); } catch (e) {}
        return o90;
    }
    f84(v72, v72, f38, Int32Array, f84);
}
v62.constructor = f63;
v62["concat"]();
