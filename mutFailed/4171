const v0 = [];
function f1() {
    try {
        v0.keys();
    } catch(e3) {
    }
    return v0;
}
v0[Symbol.toPrimitive] = f1;
const v7 = new WeakMap();
v7.length = Symbol;
class C9 extends Uint16Array {
}
class C10 {
}
function f11() {
    const o12 = {
    };
    new Uint16Array(2);
    return v7;
}
class C16 {
}
Math.atan2(v0, -40875);
const v20 = [f11,WeakMap];
([v20,v0,v20,v7,f11])[4];
const v23 = [f11,WeakMap,v20,v20,f11];
new Float64Array(3);
try { new Int32Array(Int32Array, v7, v23); } catch (e) {}
const v30 = new Int32Array(512);
const v33 = new BigInt64Array(1);
let v34;
try { v34 = v33.set(v7); } catch (e) {}
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = v34;
    const v41 = this?.constructor;
    try { new v41(Int32Array, Int32Array, a39, Int32Array); } catch (e) {}
    a39.arguments = a39;
}
F35.caller = F35;
const v44 = new BigUint64Array();
const v46 = [v44];
v46[65536] = v46;
v46[65536] %= 256;
const v47 = new F35(F35, F35, F35, F35);
v47.b = Math;
v47.b = 512;
%PrepareFunctionForOptimization(v30);
