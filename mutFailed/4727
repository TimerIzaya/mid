new Int8Array(4);
new Int8Array(5);
new Uint32Array(4096);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a12;
    } catch(e14) {
    }
}
new F9(Int8Array, 5, 4096);
new F9(Uint32Array, 4096, 4);
new F9(Int8Array, 4, 5);
new Float64Array(256);
const v29 = new Map();
function f30() {
    const o31 = {
        __proto__: 257,
    };
    o31[257] = o31;
    return "getSeconds";
}
Object.defineProperty(v29, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f30 });
let v40 = undefined;
const o48 = {
    ...v29,
    ...v29,
    __proto__: v29,
    [9](a42, a43, a44) {
        super[a42];
        v40 = Map;
    },
};
F9 = o48;
const v49 = [v29];
v49.valueOf = Symbol;
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    new Date();
    new Uint32Array(5);
    new Set();
    const o65 = {
    };
    class C68 {
    }
    class C69 extends C68 {
    }
    const v70 = Array(19793);
    for (const v71 of v70) {
    }
    const v72 = [v70,v70,v70,v70,v70];
    for (let v73 = 0; v73 < 50; v73++) {
    }
    [[v53,v72,v72]];
    Object.defineProperty(Uint16Array, "toString", { enumerable: true, value: Array });
    function f77() {
        const o78 = {
        };
    }
    v49 >= Uint16Array;
}
new Map();
new F51();
function f82() {
    const o84 = {
        get f() {
        },
    };
    const o89 = {
        ["8"](a87, a88) {
        },
    };
}
function F90() {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e92) {
    }
}
class C93 {
}
function f94(a95, a96, a97) {
    const o98 = {
    };
}
