function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 5;
    } catch(e3) {
    }
    try {
        this.b = 5;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
new F0();
[-206930426,7,1749235452,1073741824,10,1921714123];
[-7,11,127,-2,64,48593];
[-65537,512,-972799955,15,-3,919538352,536870888,-41882,7];
new BigInt64Array(1);
new Int16Array(1806);
new Int8Array(12);
new Int16Array(127);
new Uint32Array(257);
const v31 = new Float64Array(127);
class C32 {
    static b = Int16Array;
    5;
    f;
    #e = 257;
    static 2;
    static #p(a34, a35) {
        try {
            this.#e;
        } catch(e37) {
        }
        this.b;
        %VerifyType(a35);
        return v31;
    }
}
new Int8Array();
new C32();
const v41 = new v6();
function f45() {
    function f47(a48) {
        const v49 = [v41,a48,a48,C32];
        [a48,this,this,this,Float64Array];
        [257,v49];
    }
    BigInt64Array.onmessage = f47;
    delete C32[7];
    try {
        this.valueOf = f47;
    } catch(e53) {
    }
}
const v56 = [];
const o57 = {
    "arguments": v56,
    "type": "function",
};
new Worker(f45, o57);
