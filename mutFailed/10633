eval("");
([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes([-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
new Date();
[-1.2067410927155266e+308,-574.7450146535717,-1000.0,-1000000000000.0];
[-5.0,-876130.821131472,470723.5798576304];
const v26 = [0.05359354285491269,-2.2250738585072014e-308];
class C27 {
    static toString(a29, a30, a31) {
        try {
            const t9 = 2001;
            t9.length = a30;
        } catch(e32) {
        }
        return a29;
    }
    static #n(a34, a35, a36) {
        try {
            const t17 = "byteLength";
            t17.f = v26;
        } catch(e37) {
        }
        return v26;
    }
}
new C27();
new C27();
new C27();
class C41 {
}
class C42 {
}
const v43 = new C42();
function f45(a46, a47, a48, a49) {
    const v50 = a47 >>> a47;
    const v51 = v50 >>> v50;
    v51 != a46;
    for (let v53 = 0; v53 < 5; v53++) {
        try { new C41(v43, v53, Float32Array, ...v53, a47); } catch (e) {}
    }
    a47 - Math.max(a47);
    return v51;
}
for (let v58 = 0; v58 < 5; v58++) {
    Uint8Array(v58, v58);
}
%OptimizeFunctionOnNextCall(f45);
f45();
