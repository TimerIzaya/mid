let v7 = 3570;
const v10 = ("string").normalize("NFKD");
const v12 = new Date();
try { v12.getUTCDay(); } catch (e) {}
for (let i18 = 0, i19 = 10;
    i18 < i19;
    (() => {
        function f23() {
            return f23;
        }
        const v24 = [601759695];
        const v25 = [1073741824,1073741823,1376142744,1073741825];
        class C27 {
        }
        const v28 = new C27();
        v28.f = v28;
        const v29 = Date.constructor;
        function f30(a31, a32, a33, a34) {
            function f36() {
                class C37 {
                }
                function f38(a39, a40) {
                    return a40[3];
                }
                return a31;
            }
            const v42 = f23();
            const v44 = new Int8Array();
            function f45(a46, a47) {
                return v42;
            }
            f45();
            f45();
            const v50 = v44.buffer;
            Object.defineProperty(v50, "constructor", { writable: true, configurable: true, value: Date });
            new Int8Array();
            let v53 = 1000000000000.0;
            v53--;
            v50.slice(2147483648);
            %OptimizeFunctionOnNextCall(f36);
            class C56 extends v10 {
            }
            new C56();
            function f58() {
                const o73 = {
                    valueOf(a60, a61) {
                        function F62(a64, a65) {
                            if (!new.target) { throw 'must be called with new'; }
                            this.hasOwnProperty(a60, a65, a60);
                            a64 >= a64;
                            const v68 = this.constructor;
                            try { new v68(); } catch (e) {}
                        }
                        class C70 extends F62 {
                        }
                        new C70();
                        new C70();
                        return F62;
                    },
                };
                o73.valueOf();
                return v29;
            }
            let v76;
            try { v76 = v25["find"](..."find", a34, ...v24, ...v25, ...522675525n); } catch (e) {}
            Symbol("find");
            const v80 = new Uint8ClampedArray();
            const o83 = {
                "maxByteLength": 2147483648,
                "e": v44,
                [v7]: i19,
                ...v24,
                next() {
                    const o82 = {
                    };
                },
                ...v80,
            };
            v76 <= a33;
            return arguments;
        }
        for (let v85 = 0; v85 < 10; v85++) {
            f30();
        }
        i18++;
    })()) {
}
new Int32Array(v7);
function f93() {
    const v95 = ([1946,1946,1946,1946]).toSpliced();
    new Date(Date);
    class C99 {
        static toString(a101) {
            delete this[this];
        }
    }
    parseInt(v95);
}
f93();
new BigInt64Array(1946);
function F106() {
    if (!new.target) { throw 'must be called with new'; }
}
[F106];
v10.constructor;
const o113 = {
};
try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
const v116 = v7++;
v116 / v116;
new BigInt64Array(129);
const v121 = new Date();
function f122() {
    ([]).constructor;
    new Uint8Array(268435440);
    function f128(a129, a130) {
        function f131() {
            return f128;
        }
        Object.defineProperty(a129, "toString", { configurable: true, get: f131 });
        return a130;
    }
}
f122();
v121.setSeconds(v121, "jFd1");
