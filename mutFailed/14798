const v0 = [-2147483649,2147483649,-1024,-14,-606,9007199254740991,10000,-128,1024];
const v1 = [-536870912,42160,-46937,27988,-9007199254740990,2147483649,16];
[10,-319903302,-9007199254740992,-2016563053];
function f6(a7, a8) {
    const o17 = {
        get g() {
            return -14;
        },
        "g": a8,
        "b": v0,
        "c": a8,
        ...v1,
        toString(a14, a15, a16) {
            super[a16] = v1;
            return a14;
        },
        ...a7,
    };
    return o17;
}
f6(v0, -27870);
f6(v1, 5);
f6(v1, -27870);
1073741823n * 1073741823n;
-44863n ^ -44863n;
class C30 extends Map {
}
const v31 = new C30();
const v32 = new C30();
const v33 = new C30();
BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
const v37 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v39 = new Uint32Array(5);
let v40;
try { v40 = v39.findLastIndex(v32); } catch (e) {}
let v41 = -4294967297n;
const v42 = v41--;
const v43 = [601759695];
const v44 = [1073741824,1073741823,1376142744,1073741825];
let v45;
try { v45 = v44.push(f6); } catch (e) {}
function f47(a48, a49, a50, a51) {
    try { f47.toLocaleString(); } catch (e) {}
    let v53 = a48?.constructor;
    v53 *= Map;
    const v54 = v32.__proto__;
    function f55() {
        return v1;
    }
    let v56;
    try { v56 = v53(); } catch (e) {}
    let v57;
    try { v57 = v53(); } catch (e) {}
    const v59 = arguments[0];
    const v60 = arguments.length;
    v60 - v60;
    Object.defineProperty(v31, "e", { configurable: true, enumerable: true, value: f47 });
    const v63 = v32["entries"](a50, ...v33, BigUint64Array, ..."entries", a49, v60);
    Symbol.d = Symbol;
    const v65 = Symbol.toStringTag;
    const v67 = v65.description;
    const v68 = v45.for(v67);
    v32[v65] = v65;
    function f69() {
        let v71;
        try { v71 = ("Vre").charAt(4096); } catch (e) {}
        let v72;
        try { v72 = v71.lastIndexOf(f69); } catch (e) {}
        let v73;
        try { v73 = ("Vre").codePointAt(v37); } catch (e) {}
        const v74 = v73++;
        const v75 = v73 - v73;
        v75 % v75;
        v73 ^ v73;
        let v78 = Float64Array;
        try { v57(v56, v42, v40, v72, v74); } catch (e) {}
        try { v68.p(); } catch (e) {}
        v67[Symbol] *= v57;
        v57?.a;
        try {
            v67.valueOf = v54;
        } catch(e82) {
        }
        v78.g = v78;
        v78 = a49;
        let v83 = v37.length;
        v83++;
        try {
            v44.forEach(a49);
        } catch(e86) {
            e86.stack = e86;
        }
        const o108 = {
            "c": v41,
            m(a88, a89) {
                const o90 = {
                };
                try {
                    o90.c = v59;
                } catch(e91) {
                }
                try {
                    const o92 = {
                    };
                    o92.c = v59;
                    o92.h = v59;
                } catch(e93) {
                }
                try {
                    const o94 = {
                    };
                    o94.c = v59;
                    o94.h = v59;
                    o94.g = a88;
                } catch(e95) {
                }
                try {
                    const o96 = {
                    };
                    o96.c = v59;
                    o96.h = v59;
                    o96.global = -44863n;
                } catch(e97) {
                }
                return arguments;
            },
            "c": v43,
            valueOf(a99, a100) {
                return a100;
            },
            1073741824: a50,
            [v41](a102, a103, a104, a105) {
                eval(v56);
            },
            "arguments": 5,
            256: v1,
        };
        o108[256];
    }
    f69();
    const v112 = Array();
    let v113;
    try { v113 = v112.findLast(f47, v39); } catch (e) {}
    v112.unshift("entries", v63, "entries", v113);
    let v116;
    try { v116 = Int8Array.of(); } catch (e) {}
    try { v116.join(v53); } catch (e) {}
    const v118 = new Int8Array(v43);
    v118.c = v118;
    v118.c = v118;
    const v119 = v118.buffer;
    const v121 = v119.slice(v119.maxByteLength);
    v54.maxByteLength;
    try { Int32Array(v121, v45, v41); } catch (e) {}
    function f125(a126, a127, a128, a129) {
        return v31;
    }
    const v130 = new Int32Array();
    const v131 = v130[3];
    v131 + v131;
    for (let v133 = 0; v133 < 5; v133++) {
        v133 / v133;
    }
    %OptimizeFunctionOnNextCall(f69);
    try { v44["find"](..."find", a51, ...v43, ...v44, ...522675525n); } catch (e) {}
    return v53;
}
for (let v137 = 0; v137 < 10; v137++) {
    const v138 = f47(v39);
    v138.name = v138;
}
%OptimizeFunctionOnNextCall(v40);
f47();
