class C3 {
    f;
    constructor(a5, a6) {
        a6[0] = a5;
        "function" | "function";
    }
    static ["function"];
    static #b = "function";
    #o(a9) {
        const v10 = 256 / 256;
        let v11 = -"function";
        function f12() {
            return v11;
        }
        v11 ^= 256;
        function F13(a15, a16, a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = this;
            } catch(e19) {
            }
            try {
                this.g = "function";
            } catch(e20) {
            }
            try {
                this.e = C3;
            } catch(e21) {
            }
        }
        new F13(-1822326181, 256, v11, -1822326181);
        new F13(-1822326181, -1822326181, -1822326181, v10);
        new F13(256, 256, -1822326181, v10);
        try { ("function").includes(256, -1822326181); } catch (e) {}
        return this;
    }
}
const v26 = new C3(256, -1822326181);
new C3(v26, C3);
const v28 = new C3(-1822326181, -1822326181);
async function* f41(a42, a43, a44, a45) {
    await -1822326181;
    try {
        yield 1;
    } catch(e51) {
    }
    return 0.21514958688080188;
}
f41(-1822326181, v28, v26, v28);
try {
    class C57 extends [BigUint64Array,BigUint64Array,BigUint64Array,BigUint64Array] {
    }
} catch(e58) {
}
