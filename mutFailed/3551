let v3 = 3815;
const t1 = 0.6612038317578001;
const v5 = new t1(v3);
const v8 = new Uint8ClampedArray(1);
try {
    v5.valueOf = 1;
} catch(e10) {
}
try {
    const t9 = 1;
    t9.__proto__ = v5;
} catch(e11) {
}
const v13 = new BigUint64Array(1);
let v14;
try { v14 = v13.every(v5, v13); } catch (e) {}
const v16 = [v14];
const v17 = v13.toSorted;
Reflect.apply(v17, v8, v16);
new Uint8ClampedArray(v17);
while (0 < 5) {
    let v27 = Math;
    const v30 = v3--;
    const v31 = !-4096;
    const v32 = !-4096;
    -4096 || v30;
    v27.ceil(v32);
    -4096 << v31;
    v27++;
}
new Uint32Array(3846);
const v40 = new Uint16Array(1572);
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this.constructor;
    try { new v47(a44); } catch (e) {}
    typeof BigUint64Array === "symbol";
}
new F41(F41, F41, F41, F41);
new v40();
