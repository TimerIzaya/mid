const v1 = new Map();
new BigUint64Array(4096);
256 | 256;
new BigUint64Array(256);
let v9 = 0;
v9--;
let v12;
try { v12 = Float32Array.from(v1); } catch (e) {}
new Float32Array(v9);
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(Float32Array, v1, BigUint64Array); } catch (e) {}
    a16 - a16;
    a17 + a17;
    a18 + a18;
    try {
        this.c = 4096;
    } catch(e24) {
    }
}
const v25 = new F14(v9, 4096, 256);
const v26 = new F14(4096, v9, v25);
v26.g = v26;
const v27 = new F14(256, 4096, v26);
const v28 = v27?.__defineGetter__;
try { new v28(v1, F14); } catch (e) {}
Int16Array.f = Int16Array;
const v32 = new Int16Array(12);
const v33 = v32.fill();
try { v33.subarray(v12, Float32Array); } catch (e) {}
try { v33.filter(BigUint64Array); } catch (e) {}
