let v2 = -1208526211;
const v3 = [v2,v2,-4,v2];
const v4 = [v2,v3,v2,-4,-4294967296];
const v5 = [v4,-4294967296,v4,v2];
const v9 = [1738628728,-11,-65535,-1402927215,-65537,-561568402];
const v10 = [257,268435441,2147483648];
[-128,4294967297,129,2147483649,19762,65536];
class C12 {
    static #p(a14, a15) {
        const v16 = (a17, a18, a19, a20) => {
            a17[a19] = this;
            v2 = a14;
            new Set();
            return v4;
        };
        return this;
    }
    [-4294967296] = v9;
    c;
    static f = v3;
    static [-187183.935980686] = 866993.0506321802;
    b = v10;
}
new C12();
const v24 = new C12();
new C12();
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = F27;
    } catch(e29) {
    }
    try {
        this.f = false;
    } catch(e30) {
    }
    try {
        this.b = false;
    } catch(e31) {
    }
}
let v32 = new F27();
517711.4084013996 >> 517711.4084013996;
({"f":F27,"length":v32,} = v10);
F27[v4] = v24;
const v34 = delete v24?.c;
try {
    F27.h = -187183.935980686;
} catch(e35) {
}
const v36 = new F27();
const v37 = new F27();
const v38 = [5.627129677109545e+307,850582.6346538318,-2.0,-Infinity,289.0197571670685,187.7306401241658,1e-15];
try { v38.join(F27); } catch (e) {}
const v40 = [0.6612384037511738,2.2940008033736596];
try { v40.push(v37); } catch (e) {}
const v42 = [1000000000000.0,-1000000000000.0,3.173585042601135e+307,-5.0,-1e-15];
v42[4];
function f44(a45, a46, a47, a48) {
    const v49 = a45?.g;
    try { new v49(); } catch (e) {}
    a46[2] = a46;
    let v51 = a48?.g;
    Object.defineProperty(v51, v37, { set: f44 });
    v51 %= v40;
    const o52 = {
        "apply": f44,
        "call": f44,
        "deleteProperty": f44,
        "get": f44,
        "getOwnPropertyDescriptor": v5,
        "has": f44,
        "isExtensible": f44,
        "preventExtensions": f44,
        "set": f44,
    };
    new Proxy(v32, o52);
    try { new v51(); } catch (e) {}
    const o63 = {
        __proto__: v40,
        "h": v42,
        ...a45,
        [a48](a57, a58) {
            try { new a57(a47, a46, a48, a58); } catch (e) {}
            return 1350805809;
        },
        "c": v36,
        268435439: a45,
    };
    return o63;
}
f44(v36, v42, v36, v32);
f44(v32, v38, v32, v36);
f44(v36, v38, v32, v37);
5 ^ 5;
try { new Int8Array(5, 182, false); } catch (e) {}
-22631;
function f75() {
}
function f76() {
    const o86 = {
        "b": f75,
        valueOf() {
            let v78;
            try { v78 = this.b(); } catch (e) {}
            try { this.b(); } catch (e) {}
            delete v34?.[this];
            v10["findLastIndex"](v34, v78)?.[v34];
            super.a;
            [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        },
    };
    try { o86.b(); } catch (e) {}
    return o86;
}
const v88 = f76();
try { v88.b(); } catch (e) {}
const v90 = v88?.b;
try { v90(); } catch (e) {}
const v92 = new v90();
const v93 = v92?.toLocaleString;
try { new v93(); } catch (e) {}
new Uint8Array(268435440);
const v99 = ("function").length;
F27 == v99;
const v101 = f76();
function F102(a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    try { a105.b(); } catch (e) {}
    try { a104.valueOf(); } catch (e) {}
    const v108 = this?.constructor;
    try { new v108(a104, a104); } catch (e) {}
    new Uint16Array(v99);
}
new F102(v101);
