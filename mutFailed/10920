function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    try {
        this.h = -6;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f10(a11, a12, a13, a14) {
    function f15() {
        return f10;
    }
    function f16(a17) {
        function F18(a20, a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
    Object.defineProperty(a11, "toString", { writable: true, get: f15, set: f16 });
    const o30 = {
        "e": F0,
        "c": a14,
        ...v4,
        "a": v5,
        ...v4,
        [v5](a24, a25, a26, a27) {
            const v28 = super.f;
            try { new v28(v28, F0, v28, ...a11); } catch (e) {}
            return this;
        },
    };
    return o30;
}
const v31 = f10(v6, v4, v4, v6);
f10(v5, v5, v4, v6);
f10(v5, v6, v4, v5);
function F34() {
    if (!new.target) { throw 'must be called with new'; }
    function F36() {
        if (!new.target) { throw 'must be called with new'; }
    }
    [F36,Uint8Array];
    3 | f10;
    try {
        this.a = 12;
    } catch(e43) {
        const v44 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v45 = 0; v45 < 5; v45++) {
            function f46() {
                let v48 = Float64Array;
                v48 = -4294967295;
                try {
                    v44.forEach(v48);
                } catch(e50) {
                }
                const o55 = {
                    toString(a52, a53) {
                        v45 && v48;
                        return -4294967295;
                    },
                };
                return v44;
            }
            f46();
            %OptimizeFunctionOnNextCall(f46);
        }
    }
    try {
        this.c = 12;
    } catch(e57) {
    }
}
const v58 = new F34();
const v59 = new F34();
const v60 = new F34();
v60.toString = f10;
class C64 extends F34 {
    #h;
    #valueOf(a66, a67, a68) {
        const v69 = v31.constructor;
        try { new v69(); } catch (e) {}
        class C71 {
            constructor(a73, a74, a75) {
                for (let v76 = 0; v76 < 5; v76++) {
                    function f78() {
                        const o86 = {
                            [-4294967297n](a80, a81, a82, a83) {
                                eval(C71);
                            },
                        };
                        return f78;
                    }
                    f78();
                    %OptimizeFunctionOnNextCall(f78);
                }
            }
        }
        try {
            a67.h = v58;
        } catch(e88) {
            function f89() {
                for (let v90 = 0; v90 < 5; v90++) {
                    "p" + v90;
                }
                class C95 {
                }
                function F99(a101) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v102 = this.constructor;
                    try { new v102(); } catch (e) {}
                    this.g = -1517929768;
                    this.g = -1;
                    this.h = a101;
                }
                const o105 = {
                    "b": -1000000.0,
                    "h": -1540034480,
                };
            }
            f89();
        }
        return 536870912;
    }
    static #c = 100910865;
    [v58] = v59;
    [F34] = v58;
    static [v60] = v59;
}
new C64();
Symbol.keyFor(Symbol());
function f112() {
    return "function";
}
const v113 = new C64();
new C64();
class C115 {
    static g;
    static {
        for (let v117 = 0; v117 < 25; v117++) {
            const v118 = [601759695];
            const v119 = [1073741824,1073741823,1376142744,1073741825];
            function f121(a122, a123, a124, a125) {
                try { new a122(); } catch (e) {}
                a124 << a124;
                function f129() {
                    return a122;
                }
                const v131 = new Int8Array();
                const v134 = BigUint64Array * this;
                const v135 = v134 - v134;
                const v136 = v134 ** v134;
                class C137 {
                }
                const v139 = [-9223372036854775808];
                function F140(a142, a143, a144) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.c = v135;
                    this.c = a143;
                    for (let v145 = 0; v145 < 5; v145++) {
                    }
                    this.g = 4;
                }
                new F140(v139, -11396);
                Number.isNaN(v136);
                function f149(a150, a151) {
                }
                try { f149(); } catch (e) {}
                const v154 = v131.buffer.__defineGetter__;
                try { v154(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f129);
                let v157;
                try { v157 = v119["find"](..."find", a125, ...v118); } catch (e) {}
                const o158 = {
                };
                const o160 = {
                };
                gc(o160);
                class C162 {
                }
                const v163 = new C162();
                [v163,v163,v163,v163,v163];
                v157 <= a124;
            }
            for (let v166 = 0; v166 < 5; v166++) {
                f121(this, v166, v166);
            }
        }
    }
    static set a(a169) {
        for (const v170 of a169) {
            super.e = v170;
        }
        super.b = v113;
    }
    [F34] = 536870912;
    2147483649 = 536870912;
    static h = v59;
    3058268856 = C64;
}
new C115();
new C115();
new C115();
function F175() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v177 = 0; v177 < 1000; v177++) {
        const v179 = new WeakMap();
        const v180 = /8[\cA]v/uisy;
        function f181(a182, a183) {
            const v184 = [v180];
            v179.set(v184, v184);
            const v186 = [-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0];
            for (let v188 = 0; v188 < 5; v188++) {
                function f189() {
                    const v190 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                    new Uint8Array(v190, v188, v188);
                    v190.length >>>= -65536;
                    return -65536;
                }
                f189();
                %OptimizeFunctionOnNextCall(f189);
            }
            return v186["findIndex"](gc);
        }
        const v199 = ("p" + v177).fontcolor();
        let v200;
        try { v200 = v199.trimLeft(this); } catch (e) {}
        v200[12];
    }
}
new F175();
new F175();
