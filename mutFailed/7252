function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 1;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
v6.h;
function f12(a13) {
    "prototype" * v4;
}
Object.defineProperty(Map, "e", { writable: true, configurable: true, enumerable: true, set: f12 });
Map.e = Map;
const v15 = new Map();
const v16 = v15?.set;
try { new v16(v15, F0); } catch (e) {}
174 !== 174;
new F0(174);
const v24 = new Int32Array(1);
4 >>> 4;
new Uint8Array(4);
(4)[1];
1987035518 << 1987035518;
function f33(a34, a35) {
    a34 ^ a34;
    const o57 = {
        valueOf(a38, a39) {
            function f40() {
                function f41(a42) {
                    new Float64Array(64);
                    new BigInt64Array(3481);
                }
                this(f41);
                10 ^ a39;
                return a38;
            }
            const v54 = [];
            const o55 = {
                "arguments": v54,
                "type": "function",
            };
            new Worker(f40, o55);
            return 1987035518;
        },
    };
    try { o57.valueOf(a35, v24); } catch (e) {}
    return Uint8Array;
}
const v60 = f33(1987035518, 1987035518)?.propertyIsEnumerable;
try { new v60(Int32Array); } catch (e) {}
f33();
Math.log(-1.7976931348623157e+308);
~-1.7976931348623157e+308;
