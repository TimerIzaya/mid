function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 6;
    } catch(e3) {
    }
    try {
        this.b = this;
    } catch(e4) {
    }
    try {
        this.h = 6;
    } catch(e5) {
    }
}
new F0();
new F0();
new F0();
new BigUint64Array(3478);
new Float32Array(1000);
const v17 = new BigInt64Array(255);
const v18 = [];
const v19 = /a\q5(?:(?=a))a\11\P{gc=Decimal_Number}/gis;
function f21(a22, a23, a24, a25) {
    function F28(a30) {
        if (!new.target) { throw 'must be called with new'; }
        a30 ^ a30;
        const t26 = this.constructor;
        t26.length = BigUint64Array;
        try {
        const t0 = 4046;
        new t0(3n);
        } catch (e) {}
    }
    const v35 = new BigInt64Array(v17);
    let v36 = undefined;
    const v37 = v36++;
    const v38 = v37 + v37;
    const v39 = v37 >> v37;
    const v40 = v39 >>> v39;
    for (let v41 = 0; v41 < 5; v41++) {
    }
    v18.constructor;
    let v43;
    try { v43 = v38(); } catch (e) {}
    new Float32Array();
    function F45(a47, a48, a49) {
        if (!new.target) { throw 'must be called with new'; }
        F0.f = v19;
    }
    const v50 = new F45(v38, 4096, v40);
    v50.f = v50;
    function f51() {
        return F0;
    }
    v43 >>> f51;
    a25[1024] = a25;
    new F45(a23, v37);
    let o54 = {
    };
    [,...o54] = v35;
    return v19;
}
for (let v55 = 0; v55 < 5; v55++) {
    f21();
}
