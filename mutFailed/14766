function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 255;
    } catch(e3) {
    }
    try {
        this.e = 255;
    } catch(e4) {
    }
}
new F0();
new F0();
const v7 = new F0();
const v8 = [4.770354355241777,-83.34588598333266,-4.0,3.1670222991294175,0.9158997504993742,-7.96538943728477e+307,0.46334604024612913,-1000000.0,684.6643546374023,-1.7976931348623157e+308];
const v10 = /0j/vds;
try { v10.compile("Di0", "Di0"); } catch (e) {}
const v12 = [0.0,-1000.0,0.33287517280821743,-1000000000000.0,-5.0,0.28911591305001216,1.1749001185687913,1000.0,0.75213246536108,-1000000000.0];
const v13 = [-0.0,5.0,1.0,0.24225714497723239,-972228.1730522228,-1000000000.0,-5.0,Infinity];
try { v13.toString(); } catch (e) {}
[7.302222078546514,0.8469067226538769,-1.123929071447857e+308];
const o18 = {
    "maxByteLength": 2119,
};
const v20 = new SharedArrayBuffer(255, o18);
const v22 = new Uint8ClampedArray(v20);
v22[185] = 2119;
const v23 = [2.220446049250313e-16,1.6512675510135276e+308,1.731121758913245,-0.0,-3.311112893301444e+306,732666.3846848344,-345148.5795292634,0.8977757129181169];
[-2.220446049250313e-16];
try { Int32Array(v12, v23, F0); } catch (e) {}
const v28 = new Int32Array(12);
try { v28.filter(F0); } catch (e) {}
new BigUint64Array(512);
try { new Uint32Array(v8, v7, v28); } catch (e) {}
new Uint32Array(4096);
(2119)[2760];
function f38(a39, a40, a41, a42) {
    const v43 = a40 + a40;
    a41 != a41;
    a42 ^ a42;
    class C47 extends Date {
    }
    C47.prototype = C47;
    const v48 = new C47();
    v48.getDay();
    return v43;
}
for (let v50 = 0; v50 < 10; v50++) {
    const v51 = f38(v50, v50, v50, v50);
    v51.e = v51;
}
%OptimizeFunctionOnNextCall(f38);
v12();
