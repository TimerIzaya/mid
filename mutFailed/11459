new BigInt64Array(BigInt64Array);
class C6 {
    constructor(a8) {
        const v9 = this.constructor;
        try { new v9(); } catch (e) {}
        ("valueOf").localeCompare();
    }
}
new C6();
new Int32Array(3476);
new Int8Array(128);
[-987023.1787036312];
[0.3535756495623197,265653.3702854614,Infinity,186.55050757205822,-1e-15];
[114255.48693547538];
function f20() {
    new Uint16Array(209);
    const v26 = new Int32Array(129, 129, 129);
    function f27(a28, a29, a30, a31) {
        const o38 = {
            toString(a33, a34, a35) {
                try { this.toString(); } catch (e) {}
                const t21 = [v26,v26,v26,v26,v26];
                t21[a29] = a28;
            },
        };
        return o38;
    }
    return 209;
}
new Int8Array(268435456);
class C45 {
    constructor(a47, a48, a49, a50) {
        this[this] = a50;
    }
}
const v51 = new C45(-1.461653635104799e+308, -1.461653635104799e+308, -1.0, -5.0);
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = this.constructor;
    try { new v57(C45, -1.0); } catch (e) {}
    const v59 = a55.constructor;
    try { new v59(a55, v51, this, a54); } catch (e) {}
}
const v63 = Float64Array.of();
v63.toString = f20;
new Date(Array, v63);
