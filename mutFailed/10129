const v0 = [4.0,4.0];
const v1 = [794560.2477659739,0.3253215720086484,432.11668754241805,1000.0];
const v2 = [-2.220446049250313e-16,1.0,0.27071949601786194];
const v3 = new v2();
class C4 extends v2 {
    [v3];
}
const v5 = new C4();
v5.propertyIsEnumerable(v5);
/ZdA5/m;
const v8 = /cXX(?:a?)*/gvsy;
v8.dotAll = v8;
const v9 = /\P{sc=Greek}/vmsy;
[v2,v1];
const v15 = [v1,[v2],v9];
v15[1] = v15;
const v17 = Array?.apply;
try { new v17(v9, v0); } catch (e) {}
7 - 7;
const v21 = Array(7);
v21[4] = -585456521;
Int32Array.BYTES_PER_ELEMENT;
const v26 = new Int32Array();
v26.constructor = Array;
const v27 = v26.constructor;
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -3;
    } catch(e31) {
    }
    try {
        this.f = -3;
    } catch(e32) {
    }
}
v27.prototype;
const v34 = new v27(v21);
try { v34.findLastIndex(v27); } catch (e) {}
const v38 = new Int8Array();
try { v38.entries(); } catch (e) {}
const v40 = v38[2];
-(-1e-15);
for (let i45 = 256n, i46 = 10; i45 < i46;) {
}
v40 < v40;
function F53() {
    if (!new.target) { throw 'must be called with new'; }
}
new F53();
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this.constructor;
    try { new v61(); } catch (e) {}
    ~a60;
}
-1000000000.0 !== -1000000000.0;
const v70 = new Int16Array(2183);
const v74 = new Int16Array(8);
const v75 = v74?.findLastIndex;
try { new v75(-9223372036854775807); } catch (e) {}
async function f78(a79, a80, a81) {
    let [v82,v83,...v84] = v70;
    const v86 = ([134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439]).length;
    v86 >>> v86;
    Math.max(4.0, 4.0);
    return 4.0;
    v84[332] = v84;
    const v91 = await v83;
    v91 | v91;
    return v82;
}
f78.b = f78;
f78();
