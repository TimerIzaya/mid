class C9 {
    b = "c";
    static n(a11, a12, a13) {
        ("c").#e;
    }
    toString(a16) {
        super[this];
    }
    [-2];
    constructor(a19, a20) {
        if (a20) {
            try { new a20(-1e-15); } catch (e) {}
        } else {
            Math.abs(-1e-15);
            Math.sqrt(+5);
            -1e-15 & 5;
        }
        const v30 = new Int8Array();
        v30.buffer;
        Math.log1p(0.04879611221991542);
    }
}
const v35 = new C9("c", -618140.6288465563);
new C9(-618140.6288465563, -1e-15);
const v37 = new C9(-618140.6288465563, "c");
const v38 = [v37,"c",C9,-618140.6288465563];
[v38,v38];
[-618140.6288465563,-1e-15,v38,v35];
new Uint8Array(1000);
new Int8Array(0);
const t30 = 274763.2111697737;
t30.f = -4n;
const o50 = {
    "maxByteLength": 1293466293,
};
new SharedArrayBuffer(0, o50);
new BigInt64Array(0);
function f55(a56) {
    return a56;
}
class C57 extends f55 {
    [5.0] = 0;
    [f55] = -1000000000.0;
}
let v59 = 65535n;
v59--;
const v61 = [];
[v61,o50,o50,v61];
function F65(a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    a67 % a67;
    a68 >>> a68;
    const v71 = this.constructor;
    try { new v71(0.8735699512350641, -3.413527541634011e+307); } catch (e) {}
}
function f73() {
    function f74() {
    }
    return f74;
}
function f75(a76) {
    return a76;
}
const v80 = new BigInt64Array(5);
function f81() {
    return v80;
}
Object.defineProperty(WeakSet, Symbol.iterator, { configurable: true, enumerable: true, get: f73, set: f75 });
try { new BigInt64Array(WeakSet); } catch (e) {}
