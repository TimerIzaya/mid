class C3 {
    constructor(a5, a6) {
        const v7 = 0 in this;
        try {
            super.reject(-7, a5, 0, v7, v7);
        } catch(e9) {
        }
    }
    static #g = -7;
    #h = 0;
    static [0];
    4259938026;
    static c;
}
const v10 = new C3(0, 0);
const v11 = new C3(-7, 0);
const v12 = new C3(0, 0);
function* f13(a14) {
    return f13;
}
f13.constructor;
const v19 = ("D")[0].substring().charCodeAt();
class C20 {
    p(a22, a23, a24, a25) {
        try { a25(a22, -7, v12, 0); } catch (e) {}
        switch (this) {
            case v11:
                function f27() {
                    return f27;
                }
                const v30 = new BigUint64Array(3375);
                let [v31,,v32,...v33] = v30;
                v12.__proto__;
                super.d = v10;
                break;
        }
        return v10;
    }
    [-7];
}
new C20();
new C20();
new C20();
function F38() {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = new F38();
const v41 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f43() {
    const v44 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function f45() {
        let v47 = Float64Array;
        v47.toString();
        v47 = v12;
        const v49 = v44.length;
        const v50 = v49 >>> v49;
        v50 / v50;
        const o56 = {
            toString(a53, a54) {
                v19 && v47;
                return v12;
            },
        };
        o56.toString();
        let v58 = -268435456;
        v58--;
        const o60 = {
            "e": -4294967295,
            "e": v58,
        };
        return v12;
    }
    %OptimizeFunctionOnNextCall(f45);
    return -172798652;
}
const v62 = 9007199254740991n * 9007199254740991n;
Float32Array.from(v41);
const v65 = [];
function F66() {
    if (!new.target) { throw 'must be called with new'; }
    const v68 = this.constructor;
    try { new v68(); } catch (e) {}
    let v70;
    try { v70 = this.valueOf(); } catch (e) {}
    v70.length = v70;
    try {
        this.d = v65;
    } catch(e71) {
        const v73 = new Set();
        class C74 {
            [v73];
        }
        function f75(a76) {
            return a76;
        }
    }
}
const v77 = new F66();
v62 * v62;
for (let v79 = 0; v79 < 5; v79++) {
    function f80() {
        for (let v81 = 0; v81 < 25; v81++) {
            -1000 ** 0.544190430081408;
            new Float32Array(10);
        }
        class C92 {
            constructor(a94, a95) {
                const v96 = this.constructor;
                try { new v96(a95, a95, v96, this, v96); } catch (e) {}
                this[-2147483648] >>>= -7;
                for (let v98 = 0; v98 < 5; v98++) {
                }
            }
        }
        try {
            v41.forEach();
        } catch(e100) {
            e100.a = e100;
            e100.a = v40;
            e100.a = e100;
        }
        const o108 = {
            ["1073741824"]: v79,
            874720287: v79,
            get d() {
                try { this.m(v79, this, this); } catch (e) {}
                const o105 = {
                };
                return Proxy("1073741824", o105);
            },
            ["species"]: "1073741824",
        };
        const v110 = Symbol.toPrimitive;
        v110.description;
        Symbol.for();
        return v110;
    }
    f80();
    const v114 = [];
    class C115 {
        constructor() {
            super.f >>= this;
        }
        static #o() {
            super[v114];
            super.a;
            return v114;
        }
    }
    f80 < v41;
    const v124 = new Uint8Array(4061);
    Reflect.apply(v77, v124, [4061]);
    const v129 = /((?<=a))/gudm;
    const v130 = /gk4b*/vmsy;
    let v132;
    try {
    const t0 = -1.3832922122240728e+307;
    v132 = t0(2);
    } catch (e) {}
    try { v132(v129, -7, v130, -7, 256); } catch (e) {}
    %OptimizeFunctionOnNextCall(f80);
}
