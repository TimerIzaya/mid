const v0 = [937488.6281223241,-1000000000.0,-1000000000.0,2.0,-2.0,2.2250738585072014e-308,-340.62751767543034,1000000000000.0];
const v1 = [1.591385321593928e+308,-1000.0,-1.0242874916712177e+308,0.250142315178574,1000000000000.0,1.7976931348623157e+308,NaN,-745870.4868793741];
const v2 = [1000000000.0,0.38891925860896936,0.3007501019166534];
-1000000.0 >>> -1000000.0;
const v9 = new BigInt64Array(161);
let v10;
try { v10 = v9.find(v1); } catch (e) {}
new Uint32Array(1276);
v1[v0] = v0;
let v14;
try { v14 = v1.reverse(); } catch (e) {}
let v15;
try { v15 = v14.shift(); } catch (e) {}
let v16;
try { v16 = new v14(v14, 2.2250738585072014e-308); } catch (e) {}
let v20 = 12;
const v21 = v20++;
let v23 = new Uint8Array(v20);
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = this;
    } catch(e27) {
    }
}
const v28 = F24?.__lookupSetter__;
try { new v28(v20); } catch (e) {}
new F24();
v23 ||= v14;
try {
    v9.byteLength = 4294967296;
} catch(e31) {
}
new F24();
const v33 = new v15();
v33.b = v33;
new Uint32Array(3551);
const v39 = new BigInt64Array(10);
v39.BYTES_PER_ELEMENT = v39;
~15;
const v43 = new Float32Array(15);
-1000000000.0 + -1000000000.0;
948737.12760097 + 948737.12760097;
for (let i52 = 0;
    !(i52 < 3), v15;
    (() => {
        i52 / i52;
        const v58 = i52++;
        v58 + v58;
    })()) {
    function F61(a63, a64, a65) {
        if (!new.target) { throw 'must be called with new'; }
        const v66 = a64?.find;
        try { new v66(Uint32Array); } catch (e) {}
        a65 >> a65;
        try {
            this.b = i52;
        } catch(e69) {
        }
        try {
            this.h = 4294967296;
        } catch(e70) {
        }
    }
    const v71 = new F61(v1, v14, i52);
    v71.b = v71;
    new F61(v0, v0, i52);
    new F61(v0, v2, -4096);
}
function F74(a76, a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    2105444095n >> 2105444095n;
    for (let v84 = 0; v84 < 100; v84++) {
        const o88 = {
            6: undefined,
            [268435439n]: 2105444095n,
            __proto__: a78,
            "g": undefined,
            "b": v84,
            "arguments": this,
            valueOf(a87) {
                return v84;
            },
        };
    }
    try { Math.ceil(-4294967296n); } catch (e) {}
}
F74.length = F74;
let v93 = -26868;
v93++;
const o95 = {
};
v21 || (o95 > v0);
try { v28(); } catch (e) {}
const v100 = new Uint32Array();
for (const v101 in v100) {
}
let v105 = v0 == 4 ? v0 : 4;
v105++;
try { v2.some(v23, F24); } catch (e) {}
const v108 = v10.length;
let v109;
try { v109 = v43.subarray(v93, v16); } catch (e) {}
try { v109.map(268435439); } catch (e) {}
64 ^ 64;
new Float64Array(161);
try { Float64Array.bind(BigInt64Array); } catch (e) {}
const v120 = new Float64Array(v108);
function f121(a122) {
    return -30207846;
}
f121.length = f121;
v120.valueOf = f121;
new Uint8Array(94);
new Int8Array(203);
const v129 = new Int16Array(2183);
new Uint8Array(255);
const v135 = new Int16Array(8);
async function f137(a138, a139, a140) {
    delete v135[-1000000000.0];
    let [v142,v143,...v144] = v129;
    v129[5];
    await v143;
    return Uint8Array;
}
const o147 = {
};
try {
} catch(e148) {
}
try {
    const o149 = {
    };
} catch(e150) {
}
try {
    const o151 = {
    };
    o151.d = o151;
} catch(e152) {
}
try {
    const o156 = {
        set d(a154) {
            Uint8Array !== Int8Array;
        },
        "g": v15,
        5: 161,
    };
    o156.g = Float32Array;
} catch(e157) {
}
