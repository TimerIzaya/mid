new Uint32Array(622);
new Uint8Array(128);
const v7 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
v7[16] = 2.220446049250313e-16;
delete v7[2.0];
new Uint8Array(5);
/a\b!+/vdiy;
/(a\1)/gvdimy;
/^xxx$/gvi;
new Int8Array(622);
new Int32Array(2943);
function f33(a34, a35, a36) {
    'use strict';
    return a34;
}
new BigUint64Array(-1053939857);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    function f43(a44) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f43 });
    let v47 = 1073741825;
    try {
        v47++;
        let v51 = -1e-15;
        Math.atan2(v51++, -175950080);
        this.b = v47;
    } catch(e54) {
    }
}
let v55 = new F41();
let v56 = new F41();
v56.a = -10809n;
({"a":v56,"b":v56,...v55} = v56);
const o61 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o61);
new F41();
new Uint8ClampedArray(16);
function f68() {
    new Int8Array(1073741823);
    class C72 {
        #valueOf(a74, a75, a76, a77) {
        }
    }
    const o81 = {
        valueOf(a79, a80) {
        },
    };
}
f68();
%OptimizeFunctionOnNextCall(f68);
