const v1 = new Map();
class C4 {
    ["9007199254740991"] = "a";
}
[5.0,0.5940140708893544];
const v9 = [-4.0,278865.21605508984,0.927469192638761,-23040.506309489603,1000.0,-6.7113043174651965,1000000000000.0,462362.06274195574,2.2250738585072014e-308,-1.682915702448401e+308];
try { v9.push("a"); } catch (e) {}
const v11 = [2.2250738585072014e-308,1000000000.0,1.0,1000000000.0,-1.4909445773080883,-1000000.0,-5.0];
class C12 extends Map {
    p(a14, a15, a16) {
        1425437851 + v1;
        const v24 = new BigUint64Array(10);
        try {
            Object.defineProperty(v24, 0, { writable: true, value: 4096 });
        } catch(e26) {
        }
        const v27 = Symbol.toPrimitive;
        a16[v27];
        return v27;
    }
    [-1] = v11;
    [v1] = v9;
    #a = Map;
    static d;
}
new C12();
const v30 = new C12();
const v31 = v30?.constructor;
try { new v31(); } catch (e) {}
new v9();
[1000.0];
([8.959093472260687e+307,-1.2265669663040939e+308,1000000.0,-1.0,-1000.0,263714.34005047055,-1.5550061343405452e+308,0.4888351385065187,-1000000000000.0])[4];
const v38 = new Uint8ClampedArray();
v38.reverse();
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
}
[7.3378143318913835,2.2250738585072014e-308,1e-15,2.776578248391978];
const v50 = Symbol.toPrimitive;
Symbol.for(v50.description);
const v56 = new Int16Array(1269);
for (const v57 in v56) {
}
const o78 = {
    [v50]() {
        super[-8n] = this;
        const o66 = {
            [-1.1635412394243161e+308](a63) {
            },
            set b(a65) {
            },
        };
        delete o66.b;
        Symbol.iterator;
        let v69 = -65535;
        v69--;
        const o71 = {
        };
        try {
            o71.e = v69;
        } catch(e72) {
            const v76 = new Uint8ClampedArray(512);
            new Uint8ClampedArray(798, ...v76, o71);
        }
    },
};
