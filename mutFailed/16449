const v0 = [2.2250738585072014e-308,1.5867376135718824e+308,1000000000.0,-1.7976931348623157e+308,6.032487050300787,-1.0,0.18961791864034871];
const v1 = [5.0,-901.6407160758697];
const v2 = [5.262421126187409,-2.0,1000000.0,1.1106424950499559e+307,329.9874484037016,4.0,NaN,2.880305419283749,1.1311766593928148e+308,0.9857808042228674];
class C3 {
    constructor(a5, a6) {
        Object.defineProperty(this, "e", { writable: true, enumerable: true, value: this });
    }
    static #a = v2;
    static 16 = v0;
    static [v1];
    static h = v0;
    static #f;
    4024974465 = v0;
    #h;
    268435456 = v2;
    static g;
}
const v8 = new C3(v1, v1);
const v9 = new C3(v2, v8);
const v10 = new C3(v1, C3);
class C11 extends C3 {
    a;
    2156;
    constructor(a13, a14, a15, a16) {
        super(v0, a15);
        new a15(512);
        new Int16Array(4096);
        new Float64Array(256);
    }
}
const v26 = new C11(C3, v10, v2, v8);
const v27 = new C11(v9, v1, v0, C3);
new C11(v27, v1, v26, v8);
[-984725.3969083161,0.0,-1.6880043685458213e+308,143.09693483698697,-1000.0,-63.866955198861774,-1.3659437099601345e+308,5.0,-1000000000.0,1.4886078739662238];
[-5.0,-2.220446049250313e-16,5.226976256137113e+306,-2.2250738585072014e-308,1e-15,-1.0];
[9.073563232206391e+306,1e-15,2.2250738585072014e-308,1000.0,1.0];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    for (let [i91, i92] = (() => {
            function F34() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v36 = new F34();
            const v39 = new Int16Array();
            function F43(a45, a46, a47, a48) {
                if (!new.target) { throw 'must be called with new'; }
                for (let v49 = 0; v49 < 100; v49++) {
                    const o55 = {
                        valueOf(a51) {
                            return v8;
                        },
                        [this](a53, a54) {
                        },
                        "execution": 2430,
                        __proto__: v36,
                    };
                    function f56(a57, a58, a59) {
                        const o65 = {
                            [f56](a61, a62, a63, a64) {
                            },
                        };
                    }
                    try {
                        a47.a = f56;
                    } catch(e66) {
                    }
                    const o67 = {
                    };
                    o67.g = -261.99102172609366;
                    const o68 = {
                    };
                    o67.g = v9;
                    o68.a = v39;
                    const t34 = (2430).constructor;
                    t34();
                    const o71 = {
                    };
                    o71.g = -261.99102172609366;
                    o71.a = v39;
                    o71.f = a48;
                    const o72 = {
                    };
                    o72.g = -261.99102172609366;
                    o72.a = v39;
                    f56(undefined, o55());
                    class C75 {
                        constructor(a77, a78, a79) {
                            const v80 = a79.concat();
                            v80[1] = v80;
                        }
                        static #o(a82, a83) {
                        }
                        n(a85, a86) {
                        }
                    }
                }
            }
            new C11();
            new F43();
            return [0, 10];
        })();
        (() => {
            const v93 = i92 < i92;
            function f94(a95, a96) {
                return v93;
            }
            for (const v98 of "some") {
                const o99 = {
                };
                const o100 = {
                };
            }
            return v93;
        })();
        i92--) {
    }
    for (let v106 = 0; v106 < 10; v106++) {
        for (let v107 = 0; v107 < 5; v107++) {
        }
        const o108 = {
        };
    }
}
new F32();
