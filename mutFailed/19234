new Float32Array(128);
new Int8Array(3325);
const v8 = new Float64Array(129);
const v9 = [v8];
v9[0] = v9;
const v10 = [v8,129,v9,129];
try { v10.sort(Float32Array); } catch (e) {}
[128,v8,3325];
let v13 = 6;
v13++;
class C18 {
    n(a20, a21) {
        super[-8n] = this;
        const o24 = {
            "maxByteLength": 47,
        };
        SharedArrayBuffer(3, o24);
        new Int8Array();
    }
}
C18.name = C18;
try { Map.bind(Map, v13, Map, Map); } catch (e) {}
Int32Array.name = Int32Array;
const v34 = new Int32Array(1024);
for (const v36 of v34) {
    const o39 = {
        "maxByteLength": 1293466293,
    };
    o39.maxByteLength = o39;
    const v41 = new SharedArrayBuffer(1796, o39);
    try { new Uint32Array(v9, 1293466293, v41); } catch (e) {}
}
