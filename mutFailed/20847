class C3 {
    #n(a5, a6) {
        a6 == this;
        try {
            this.fuck(0.0, -9223372036854775808, 675329438, a6);
        } catch(e10) {
        }
        return this;
    }
    static {
        const v12 = this?.constructor;
        try { new v12(C3); } catch (e) {}
        try {
        const t0 = 0.0;
        t0();
        } catch (e) {}
    }
    static {
    }
    b;
    e = -9223372036854775808;
    [0.0] = -9223372036854775808;
}
C3.d = C3;
new C3();
new C3();
new C3();
const o19 = {
};
o19.b = o19;
Float64Array.length = Float64Array;
const v21 = new Float64Array();
function f22() {
    function f23() {
        return C3;
    }
    return f23;
}
function f27(a28) {
    new Uint8ClampedArray();
}
Object.defineProperty(v21, Symbol.toPrimitive, { writable: true, get: f22, set: f27 });
Uint32Array[Symbol.toPrimitive] = f22;
const v38 = new Float32Array(4096);
v38[Symbol.toPrimitive] = f27;
const v41 = [v21,Uint32Array,v38];
function f42(a43, a44) {
    a43 = a44;
    try {
        v38.slice(-9223372036854775808);
    } catch(e46) {
    }
    return a44;
}
v41.toString = f42;
const v47 = [v38,Uint32Array,v41];
function f48(a49, a50) {
    function F51() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = 4;
        } catch(e54) {
        }
        try {
            this.f = 4;
        } catch(e55) {
        }
        try {
            this.g = 4;
        } catch(e56) {
        }
    }
    return a49;
}
v47.toString = f48;
v47[v47] >>= -9223372036854775808;
function f63() {
    const o64 = {
    };
    o64.constructor;
    class C66 {
    }
    C66.name;
    Symbol.unscopables;
    const v70 = new C66();
    function f71(a72, a73) {
        [-57139];
        [20667];
        [-1155025858,1073741824,9223372036854775807,-58895,-65230,257,-1073741824,-65537,1308];
        return Symbol;
    }
    v70.constructor = f71;
    const v77 = v70?.constructor;
    try { new v77(); } catch (e) {}
    v70.toString = Symbol;
    let v79 = 59817n;
    v79--;
    v79 < v79;
    Int8Array.BYTES_PER_ELEMENT = Int8Array;
    const v85 = new Int8Array(520);
    try { v85.join("llRnF"); } catch (e) {}
    for (let v87 = 0; v87 < 5; v87++) {
        v87++;
        v85.indexOf(v87);
    }
    return f63;
}
%PrepareFunctionForOptimization(f63);
f63();
%OptimizeFunctionOnNextCall(f63);
f63();
