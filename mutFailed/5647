const v1 = new Set();
const v3 = new Set();
function f4() {
    return v1;
}
class C5 extends Set {
    [v1];
    static valueOf(a7, a8) {
        let v9;
        try { v9 = this.min(v1, Set, v1, a8, Set); } catch (e) {}
        v9 << v9;
        v3[f4] = Set;
        super.forEach(a7, v1);
        return v3;
    }
    constructor(a13) {
        super(a13);
        const v14 = delete this?.size;
        super[v14] = this;
        const v15 = [a13,v14];
        const v16 = [a13,a13,this,a13,v15];
        const v18 = [v14,v16,[v16,v3],v15];
        [this,v18,v18,a13,v18];
        [Set];
    }
}
const v21 = new C5(C5);
const v22 = new C5(C5);
new C5(v22);
[Set,Set,v22,v1,Set];
[v3,C5,f4];
const v26 = [Set];
function f27(a28, a29, a30, a31) {
    const o39 = {
        "a": v26,
        __proto__: a31,
        n(a33, a34, a35) {
            const o36 = {
                "apply": f4,
                "getPrototypeOf": f4,
                "has": Set,
                "ownKeys": f4,
                "preventExtensions": f4,
                "set": f4,
            };
            new Proxy(a35, o36);
            return a34;
        },
    };
    return o39;
}
f27(v22, f27(v3, v22, v26, v22), v26, v21);
f27(v22, v21, v26, v3);
const v44 = new Int8Array();
v44.buffer.slice(2147483648);
