class C3 {
    static 11;
    constructor(a5, a6) {
        function f7() {
            return a6;
        }
        function f8(a9) {
            try { a6(a9, a9); } catch (e) {}
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f7, set: f8 });
        function f11(a12) {
            f8 = a12;
            try { new C3(a12, a12, ...a6, -2.220446049250313e-16, 1073741823, ...C3); } catch (e) {}
            return C3;
        }
        a6.valueOf = f11;
        function f14(a15, a16) {
            a15.name = this;
            a16[Symbol.toPrimitive] = f7;
            a15[3] = a15;
            let v19 = delete this?.[10];
            v19 && v19;
            const v21 = v19--;
            v21 >> v21;
            try {
                a5.a = v19;
            } catch(e23) {
                a15.name = e23;
            }
            return a16;
        }
        const v24 = f14(this, a5);
        function f25() {
            function f26(a27, a28) {
                const o30 = {
                    "execution": "sync",
                };
                return a6;
            }
            return f26;
        }
        Object.defineProperty(v24, "toString", { configurable: true, enumerable: true, get: f25 });
        v24 >> a6;
    }
    3 = "getDay";
}
const v32 = new C3(-2.220446049250313e-16, "getDay");
v32[3] = v32;
const v33 = new C3(-2.220446049250313e-16, C3);
function f34() {
    try {
        v32.fuck(v33, -11);
    } catch(e37) {
    }
    return v33;
}
v33[Symbol.toPrimitive] = f34;
v33[3];
const v41 = new C3(v33, -2.220446049250313e-16);
v41.length = Symbol;
new Int32Array(257);
new Int8Array(v41);
new Int32Array(12);
2.2250738585072014e-308 === 2.2250738585072014e-308;
/(\2)(\1)foo(?<!bar)bazrG/gumy;
try { ("ignoreCase").substring(592930.4955683709, 592930.4955683709); } catch (e) {}
try { ("b").fontsize(Int8Array); } catch (e) {}
Int8Array.BYTES_PER_ELEMENT;
