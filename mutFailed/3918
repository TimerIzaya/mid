const v3 = [-18343,10,-9223372036854775808,7,-2,1266834198];
const v4 = [65536,8,12,-2];
const v5 = [431667931];
class C6 {
    e;
    5 = -65536n;
    constructor(a8, a9, a10, a11) {
        a9[-2] %= a11;
        a11 && this;
    }
    1 = -65536n;
    [-4n] = v5;
    static b = v3;
}
const v16 = new C6(v5, v4, -65536n, -381137624n);
new C6(v3, -4n, -65536n, -65536n);
const v18 = new C6(v3, -4n, -4n, -4n);
function f19() {
    return v5;
}
class C20 extends C6 {
    o(a22, a23, a24) {
        try {
            v3.map(a23);
        } catch(e26) {
        }
        return v18;
    }
    constructor(a28, a29, a30, a31) {
        let v27 = this;
        super(v3, a30, a29, a29);
        v27 = a31;
        function F32(a34, a35, a36) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a35;
            } catch(e37) {
            }
            try {
                this.g = -381137624n;
            } catch(e38) {
            }
        }
        new F32(-381137624n, -381137624n, a30);
        new F32(-65536n, a30, a30);
        new F32(a30, a30, a30);
    }
}
new C20(v16, -4n, -381137624n, C20);
const v43 = new C20(v18, -65536n, -65536n, v18);
new C20(C20, -4n, -381137624n, v43);
const v47 = new Uint8ClampedArray(995);
const v49 = new Int8Array(v47);
const v50 = v49.copyWithin;
try { v47.some(v50); } catch (e) {}
