new BigInt64Array(3182);
new BigUint64Array(100);
new BigUint64Array(145);
class C21 {
    static get h() {
        const o26 = {
            "execution": "sync",
            "type": "major",
        };
        C21(o26);
        return 268435441;
    }
}
const v28 = new C21();
const v29 = new BigInt64Array();
const v30 = new BigUint64Array();
class C33 extends BigUint64Array {
    3;
    [v29] = v28;
    ["256"] = v28;
    static #toString(a35, a36, a37) {
        try { a35("256", v30, a35, a37); } catch (e) {}
        Math.atan(16) ^ 16;
        return Math.abs(16);
    }
}
new C33();
const v45 = new C33();
const v46 = new C33();
v46 & v28;
if (v45 <= v46) {
    new Uint8ClampedArray(75);
    new Int16Array(6);
    new BigInt64Array(75);
} else {
    new C33();
}
