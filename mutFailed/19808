function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(a5); } catch (e) {}
    a5 >> a5;
    try {
        this.b = a5;
    } catch(e9) {
    }
    try {
        this.g = a5;
    } catch(e10) {
    }
    try {
        this.d = a5;
    } catch(e11) {
    }
}
try { new F3(29626); } catch (e) {}
const v13 = new F3(4);
v13.b = v13;
const v14 = new F3(4);
const v15 = new F3(4);
[4,257,F3,257,v15];
const v17 = [v15,v13,29626];
const v18 = [v17,v14,v17,257,v17];
v18[2] = v18;
28334 + 28334;
try { BigUint64Array.bind(v15); } catch (e) {}
const v25 = new BigUint64Array();
5 + 5;
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v29.fill(28334); } catch (e) {}
try { Uint32Array(Uint32Array, 257, v17); } catch (e) {}
const v33 = new Uint32Array();
let v34 = -4294967297n;
v34--;
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f39(a40, a41, a42, a43) {
    const v44 = a40?.constructor;
    try { new v44(a40, a43, v37); } catch (e) {}
    arguments.length;
    function f48() {
        try { ("Vre").trimLeft(); } catch (e) {}
        let v51;
        try { v51 = ("Vre").charAt(4096); } catch (e) {}
        try { v51.concat(v25); } catch (e) {}
        let v53;
        try { v53 = ("Vre").codePointAt(v29); } catch (e) {}
        v53++;
        class C55 {
            [v44];
            static #a = arguments;
        }
        new C55();
        new C55();
        new C55();
        const v59 = v53 ^ v53;
        v59 ^ v59;
        let v61 = Float64Array;
        v61 = a41;
        b = v29;
        let v62 = v29.length;
        v62++;
        try {
            v37.forEach(a41);
        } catch(e65) {
        }
        const o76 = {
            "c": v34,
            "c": v36,
            valueOf(a67, a68) {
                return a67;
            },
            1073741824: v33,
            [v34](a70, a71, a72, a73) {
                eval();
            },
            "arguments": 5,
            256: a43,
        };
        o76[256];
    }
    f48();
    const v80 = Array?.bind;
    try { new v80(Array); } catch (e) {}
    const v82 = Array();
    try { v82.findLast(v25); } catch (e) {}
    v82.unshift();
    let v86;
    try { v86 = Int8Array.of(); } catch (e) {}
    try { v86.toReversed(); } catch (e) {}
    const v88 = new Int8Array();
    v88.buffer.slice(2147483648);
    const v94 = new Int32Array(1024);
    const v95 = v94[3];
    const v96 = v95 + v95;
    v96 / v96;
    1024 * v95;
    for (let v99 = 0; v99 < 5; v99++) {
    }
    %OptimizeFunctionOnNextCall(f48);
    try { v37["find"](..."find", a43, ...v36, ...v37, ...522675525n); } catch (e) {}
}
for (let v102 = 0; v102 < 10; v102++) {
    v102 !== v102;
    f39(v33);
}
%OptimizeFunctionOnNextCall(f39);
f39(5, v25, 522675525n, f39);
