const v0 = [];
class C1 {
    static #m() {
        try {
            const v3 = C1?.[C1];
            Object.defineProperty(v3, 0, { configurable: true, value: v3 });
            const v4 = super[v0];
            v4 && C1;
            Object.defineProperty(this, "d", { configurable: true, value: v4 });
            super.n();
        } catch(e7) {
        }
        try { v0.with(v0, v0); } catch (e) {}
        super.h = v0;
        return v0;
    }
    2 = v0;
    [C1] = v0;
    b = v0;
}
new v0();
const v13 = new C1();
v13[2] = v13;
new C1();
try { ("g").toWellFormed(); } catch (e) {}
485.03038412327487 >>> 485.03038412327487;
const v23 = [NaN];
v23[0] = v23;
[-Infinity,7.38058959350067,2.2250738585072014e-308,4.0,2.220446049250313e-16,7.4893772874047855,-1000000.0,NaN,3.0];
[-4.230134828025309,0.49085684704481136,2.2250738585072014e-308,-2.0];
-520.9620417314527;
393038.98469300824 >>> 393038.98469300824;
let v33 = 18074;
v33++;
const v35 = [-1440504730,15059,-128,65536,33714,-51192,-268435456,37915];
const v36 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v23.length;
const o42 = {
    "execution": "sync",
    "type": 2.2250738585072014e-308,
};
gc(o42);
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(this, a47); } catch (e) {}
    this.c = a46;
}
F44.arguments;
new F44();
const v52 = new F44();
v52.b = v52;
const v53 = new F44();
new F44(v33, 28602970);
const v58 = new Uint8Array(v36, v53, 201);
new Uint8Array(268435440);
Uint8ClampedArray.b = Uint8ClampedArray;
v36[6] = v58;
v35.__proto__;
const v65 = new Uint8ClampedArray(129);
v65.lastIndexOf();
