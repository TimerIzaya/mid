const o5 = {
    set e(a3) {
        return;
    },
};
[-82918350,1073741824,840657517,-620491917];
[536870888,1850847978,268435456];
[834274837,127,33648,512,49756,33040];
function F18(a20) {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F18(536870889);
function f22() {
    return 1.6528920319548566e+307;
}
Object.defineProperty(v21, "Probe", { enumerable: true, get: f22 });
with (v21) {
    let v23 = 10;
    for (; v23--;) {
    }
}
for (let [v26,...v27] of "atan2") {
}
const v30 = new Float32Array(2);
const o58 = {
    set d(a32) {
        for (let v33 = 0; v33 < 25; v33++) {
        }
    },
    o(a35) {
        const o37 = {
        };
        gc(v30);
        Math.tan("y");
        function F43(a45, a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            const v49 = this.constructor;
            try { new v49(0, F43, F43); } catch (e) {}
            const t38 = a47.constructor;
            new t38();
        }
    },
    m(a54) {
    },
    set d(a56) {
        for (let v57 = 0; v57 < 25; v57++) {
        }
    },
};
class C61 extends Int8Array {
}
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = "b";
    this.d = a66;
}
const o67 = {
};
Object.defineProperty(o67, "getPrototypeOf", { configurable: true, enumerable: true, value: o67 });
const v69 = new Proxy(Uint32Array, o67);
o58["o"](o58, Uint32Array, "o", "o", v69);
const t60 = 0.5055877369539992;
const v73 = new t60(v30, 2);
const v74 = v30;
const v75 = v73.fill(...v74);
try { v75.lastIndexOf(v75); } catch (e) {}
