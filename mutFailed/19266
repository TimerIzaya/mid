[-5.0,0.35243329414446056,-2.220446049250313e-16,-2.220446049250313e-16,-4.0,0.06223878613231726];
const v3 = new Int32Array(11);
function f4() {
    const v5 = /Cs[\cz]*/vi;
    v5.toString(v5, f4, v5, f4, f4);
    return v5;
}
const v7 = f4();
[-1.0,721601.5306276097,-2.2250738585072014e-308,81.14200186303901,1.2993096768945944e+308,2.786301404658877,-481330.6805893769,-639629.4028651237,0.21733581585406836];
const v9 = [-707629.3555956234,Infinity,-0.0,1000000000000.0,1.0];
let v10 = 64;
[-Infinity,896.1878250546338,-6.036458534859131e+307,2.220446049250313e-16,5.0,-0.7214784330832824,471678.0970813141,4.0,-2.2250738585072014e-308,1.0];
const v13 = [-1.6051215272982455e+308,1e-15,-1.8999743299768369e+307,3.0,-1000000000.0,1.3128290632152306e+308,0.06447366806423749,-204.54907752982444,0.5564635344029704,483528.3003558307];
[0.3875482902392573];
try {
    v13.slice(v10);
} catch(e16) {
}
new Uint8Array(v10);
let [...v18] = v3;
v10--;
Array();
class C22 extends Array {
}
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.constructor;
    v27.bind();
    try { new v27(); } catch (e) {}
}
const v31 = new Uint16Array(687);
function f34() {
    return 4294967297n;
}
new Int8Array(268435456);
let v39 = new Uint16Array(3680);
try { v31.reverse(); } catch (e) {}
({"length":v39,} = v9);
const v41 = 3680 in v13;
try {
    new Uint16Array(3680);
    new Int8Array(1342);
    new SharedArrayBuffer();
} catch(e48) {
}
const v49 = /\xf0\x9f\x92\xa9a*/us;
function F52(a54, a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
}
const v58 = new F52(v49, 1, 4294967297n, F52);
const v59 = new F52(v7, v49, -23596, v58);
let v60;
try { v60 = v59(v49, v41, v39); } catch (e) {}
if (v60) {
} else {
}
const v63 = new Int32Array(Int32Array, Int32Array, Int32Array);
Math.expm1(~v63)[0].lastIndexOf("D");
