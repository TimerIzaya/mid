function f0() {
    const o3 = {
    };
    o3.h = o3;
    const v6 = 1842642860 % !o3;
    v6 % v6;
    const o24 = {
        ..."Yk3j",
        "a": "Yk3j",
        ..."1000",
        toString(a10, a11, a12) {
            function f13() {
                return a12;
            }
            Object.defineProperty(a10, Symbol.toPrimitive, { writable: true, get: f13 });
            return Symbol;
        },
        __proto__: "Xk4",
        ..."Yk3j",
        ..."Xk4",
        "g": "Yk3j",
        "d": "Xk4",
        "h": "Xk4",
        "c": "Yk3j",
        get f() {
            try { ("Xk4").indexOf(this, this); } catch (e) {}
            function f18(a19) {
                const o20 = {
                    "f": a19,
                    __proto__: this,
                };
                return o20;
            }
            f18("1000");
            f18("Xk4");
            f18("Yk3j");
            return "Xk4";
        },
    };
    return o24;
}
const v25 = f0();
f0();
f0();
new BigInt64Array(3625);
new Uint8Array(1586);
1234 >> 1234;
const v37 = new Uint32Array(1234);
const v38 = v37?.slice;
try { new v38(v37, v25); } catch (e) {}
new Uint8ClampedArray(512);
1105 / 1105;
Uint8ClampedArray.length;
new Uint8ClampedArray(1105);
15 >> 15;
new Int32Array(15);
59817n < undefined;
function F58() {
    if (!new.target) { throw 'must be called with new'; }
}
const v60 = new F58();
v60[Symbol.toPrimitive] = f0;
class C63 extends F58 {
    [v60] = v60;
}
10 % 10;
const v68 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
class C69 extends Int16Array {
    [v68];
}
C69.d = C69;
