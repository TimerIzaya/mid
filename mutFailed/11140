[-11,-9007199254740990,-9007199254740992,-9007199254740990,-1201306443,-1018687595,6172,-9007199254740990];
[1073741823,12125,2147483648,-268435456,-59052,9007199254740990,-1776100355];
[-10,-1440163224];
const v6 = new BigUint64Array(210);
v6[97];
~53;
const v11 = new Int16Array(53);
v11[27] = v11;
new Int16Array(0);
function f18(a19, a20, a21, a22) {
}
f18.e = f18;
class C24 {
    static {
        for (let v26 = 0; v26 < 25; v26++) {
            const v27 = [601759695];
            const v28 = [1073741824,1073741823,1376142744,1073741825];
            function f29(a30, a31, a32, a33) {
                try { v28.toSorted(f18); } catch (e) {}
                const v38 = Float32Array?.constructor;
                try { new v38(this); } catch (e) {}
                const v40 = new Float32Array(this, a33, a30);
                function f42() {
                    return a30;
                }
                const v43 = v40.constructor;
                v43.BYTES_PER_ELEMENT = v43;
                class C44 extends v43 {
                    #c = 84;
                }
                C44.e = C44;
                function f45(a46, a47) {
                    return C24;
                }
                let v48;
                try { v48 = f45(f29, a33); } catch (e) {}
                try { new v48(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f42);
                try { ("find").fixed(); } catch (e) {}
                try { v28["find"](..."find", a33, ...v27); } catch (e) {}
                const o53 = {
                    [Date]: 128,
                    __proto__: arguments,
                };
                const v54 = o53?.hasOwnProperty;
                try { new v54(this); } catch (e) {}
                return f42;
            }
            try { f29.constructor(Int16Array); } catch (e) {}
            for (let v57 = 0; v57 < 5; v57++) {
                v57 % v57;
                f29();
            }
        }
    }
}
try { C24.call(Int16Array); } catch (e) {}
