const v2 = new Float64Array(256);
const v5 = new v2(152);
try { v5.set(v2); } catch (e) {}
let v9;
try { v9 = Uint8Array.from(Uint8Array); } catch (e) {}
const v10 = new Uint8Array(152);
v10[14] = v10;
class C11 extends Float64Array {
    set d(a13) {
        v5["includes"](a13 >>= Uint8Array == a13, 256);
    }
    static #b = Float64Array;
    static [v9];
    static h;
    static 7;
}
Uint8Array.length;
new C11();
new C11();
new C11();
const v21 = [10000];
function f25() {
    const o38 = {
        m(a27) {
            Object.defineProperty([-7,-18455], "toString", { value: Array });
            [-729574.8782662717,NaN,NaN,1.4631545214551755e+308,771.103726894627,54.21198698191802];
            SharedArrayBuffer.map;
            class C32 {
            }
            new Int8Array(3938);
        },
    };
    o38.m();
}
f25();
f25();
const v42 = new Float32Array(v21);
const v43 = v42?.lastIndexOf;
try { new v43(v2); } catch (e) {}
