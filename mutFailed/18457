function f0() {
    const o9 = {
        [-696108633]: "undefined",
        __proto__: "undefined",
        "c": -696108633,
        ["undefined"]: -1000000.0,
        167: "undefined",
        n(a5, a6) {
            try {
                super.of("undefined", -1000000.0);
            } catch(e8) {
            }
            return a6;
        },
        "g": -1000000.0,
        "f": -696108633,
    };
    o9[167];
    return o9;
}
f0();
f0();
f0();
1000 & 1000;
const v17 = new Int16Array(1000);
v17[471] = v17;
const v20 = new Float32Array(3036);
v20[904];
new Int32Array(2);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v26 = [1073741824,1073741823,1376142744,1073741825];
function f27(a28, a29, a30, a31) {
    function f32() {
        try {
            a29.forEach(a29, v25);
            try {
                ("trimEnd").trimStart();
            } catch(e38) {
            }
        } catch(e39) {
            e39.message = e39;
        }
        Object.defineProperty(a28, 2718013535, { writable: true, enumerable: true, get: f32 });
        try {
            v26.b = v20;
        } catch(e40) {
        }
        return a29;
    }
    f32();
    const v43 = eval();
    %OptimizeFunctionOnNextCall(f32);
    return v43;
}
for (let v44 = 0; v44 < 5; v44++) {
    f27();
}
new BigInt64Array(3036);
225 + 225;
try { BigInt64Array.from(2); } catch (e) {}
new BigInt64Array(225);
let v54 = 1;
v54++;
const v57 = new Uint8ClampedArray(v54);
v57[0] = v57;
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    a64 + a64;
    try { this.constructor(); } catch (e) {}
    a64--;
    const v68 = this.constructor;
    try { new v68(8, a63); } catch (e) {}
    -a64;
}
try { new F61(BigInt64Array, BigInt64Array); } catch (e) {}
new F61(-128, -2);
new F61(-128, -2);
