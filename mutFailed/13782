const v3 = /(u[\ca])/dsy;
/k[\cA]/gvis.hasIndices;
const v6 = /0a?/gudisy;
try { v6.toString(); } catch (e) {}
function f8(a9, a10, a11) {
    a10 / a10;
    a11.b = a11;
    const o27 = {
        p(a14, a15, a16, a17) {
            new Int32Array(129, Int32Array, a16, Int32Array);
            new Uint8ClampedArray(1751);
            new Int8Array(257);
            return a10;
        },
    };
    return o27;
}
const v29 = f8(-1000.0, f8(2.2250738585072014e-308, 2.2250738585072014e-308, v6), v6);
try { v29.__lookupGetter__(v3); } catch (e) {}
f8(2.2250738585072014e-308, 0.522147026481627, v3);
new Uint16Array(0, 2.2250738585072014e-308, v6, -1000.0);
let v35 = 10;
v35--;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v38 = new Int16Array(v35);
v38[7];
new Int8Array(162);
const v45 = new Int16Array(4096);
class C46 {
    constructor(a48, a49, a50, a51) {
        const v52 = a48?.toString;
        try { new v52(); } catch (e) {}
        a50.prototype = a50;
        a51.length = a51;
        let [v54,v55,,...v56] = v45;
        try {
            class C57 {
                #n(a59, a60, a61, a62) {
                    super[this] = this;
                }
            }
            C57.d = C57;
        } catch(e63) {
        }
    }
}
new C46(v45, 4096, Int16Array, C46);
new C46(C46, 4096, 4096, C46);
