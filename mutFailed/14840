const v2 = new Float64Array(835);
new BigInt64Array(1512);
new Uint16Array(10);
let v10 = -1024;
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F11();
const v18 = v17?.constructor;
try { new v18(Uint16Array, v2, 1512, Float64Array); } catch (e) {}
const v20 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v21 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
Uint32Array.length = Uint32Array;
class C23 {
}
try { C23.toString(); } catch (e) {}
const v25 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v26 = [601759695];
v26[0] = v26;
for (let v27 = 0; v27 < 5; v27++) {
    v27 - v27;
    function f29() {
        const v32 = Array();
        try { v32.some(F11); } catch (e) {}
        v32.unshift();
        try {
            v20.forEach(Float64Array);
        } catch(e36) {
        }
        const o38 = {
            "c": v26,
            "arguments": v25,
            ...v17,
            "type": C23,
        };
        o38.e = o38;
        const v40 = [];
        v40[Symbol.toPrimitive] = Array;
        function F43(a45) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C46 extends F43 {
            valueOf(a48, a49, a50, a51) {
                function f52(a53, a54) {
                    return -268435456;
                }
                this[Symbol.toPrimitive] = f52;
                const v60 = this?.constructor;
                try { new v60(); } catch (e) {}
                a48 == a48;
                super[this] = F43;
            }
        }
        const v63 = new C46();
        function f64(a65) {
            const v67 = new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
            v67.byteLength;
            return v32;
        }
        v63.toString = f64;
        const o75 = {
            set g(a70) {
            },
            [v40](a72, a73, a74) {
            },
        };
        o75.h = f29;
        o75.h = o75;
        for (const v76 in o75) {
            try { v63.valueOf(v76); } catch (e) {}
        }
        try { ("function").strike(); } catch (e) {}
        const v81 = [];
        try { v81.includes(f29); } catch (e) {}
        const v83 = [-2.0,272822757,"function"];
        const o84 = {
            __proto__: v83,
        };
        try { o84.toString(); } catch (e) {}
        v81[o84] &= 272822757;
        v10 %= -268435456;
        new Uint32Array(v21);
    }
    f29();
    %OptimizeFunctionOnNextCall(f29);
}
