function f0() {
    const o11 = {
        "h": "values",
        "g": "6g",
        ["6g"](a5) {
            super.b;
            return "symbol";
        },
    };
    try {
        ("6g").codePointAt(65535);
    } catch(e14) {
    }
    return o11;
}
const v15 = f0();
const v16 = f0();
const v17 = f0();
const v18 = v17?.6g;
try { new v18(v15); } catch (e) {}
let v22;
try { v22 = v15["valueOf"](v17, v16, v17, f0); } catch (e) {}
v22.h;
for (let v24 = 0; v24 < 32; v24++) {
    const t24 = "valueOf";
    t24["p" + v24] = v24;
}
1 >>> 1;
536870887 >>> 536870887;
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = this?.constructor;
    try { new v41(a37, v15, a40, a37); } catch (e) {}
    a37++;
    a39 >>> a39;
}
try { F35.bind(v16); } catch (e) {}
const v46 = new F35(164140152, F35, 164140152, 164140152);
v46.a = v46;
for (let v48 = 0; v48 < 5; v48++) {
    function f49() {
        const t41 = "Vre";
        t41[2] = "Vre";
        const v51 = ("Vre").strike();
        try { v51.codePointAt("Vre"); } catch (e) {}
        const v53 = v51.link();
        const v54 = v53.includes(164140152);
        v54 && v54;
        try { new Array(Array); } catch (e) {}
        const v58 = Array();
        const v60 = v58.unshift(v46, v48, F35, v48, v58.pop());
        v60 >> v60;
        const v63 = new Set();
        try { v63.clear(); } catch (e) {}
        v63.add().entries();
        class C67 {
        }
        const v68 = new C67();
        v68.hasOwnProperty(v53);
    }
    f49();
    %OptimizeFunctionOnNextCall(f49);
}
try { v46["o"](F35); } catch (e) {}
try {
    const t65 = "o";
    t65.f = 522675525n;
} catch(e73) {
}
