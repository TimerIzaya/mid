const v0 = [-15,-11,-252920215,16,536870888,425606503,255];
const v1 = [8,13,10,268435440,-50746,536870887,2];
let v2 = [23205,1115121843,1488633396,-4294967297,-4294967296,2147483647,9007199254740992,-1117403411,-1073741824,-35541];
class C3 {
    MIN_SAFE_INTEGER;
    h;
    p(a5) {
        const v6 = super[v0];
        try {
            a5.a = v1;
        } catch(e7) {
        }
        return v6;
    }
    static #c;
    static set b(a9) {
        let v10;
        try { v10 = a9(a9); } catch (e) {}
        %VerifyType(v10);
        v2 = v0;
    }
    #g;
}
const v11 = new C3();
const v12 = new C3(v11, v1);
const v13 = new C3();
function f17(a18, a19, a20) {
    const o40 = {
        __proto__: C3,
        "f": v1,
        "g": 1073741824,
        m(a22, a23) {
            this[4] &&= a22;
            const v24 = v2.length;
            class C26 {
            }
            C26 + 1;
            class C29 {
            }
            super[C3] = f17;
            new C3();
            try { a19["getInt32"](v24); } catch (e) {}
            v2[Symbol.search];
            const o38 = {
                "execution": "dotAll",
                "type": "major",
            };
            gc(o38, a23, v24, v12);
            return a19;
        },
    };
    return o40;
}
f17(v2, v11, v2);
f17(v0, v11, v0);
f17(v1, v13, v0);
const v46 = new Uint32Array(13);
for (const v47 in v46) {
    var h = v47;
}
const v51 = [65537,268435441,63298,-5,1235122603];
const v52 = [128,215394418];
let v53;
try { v53 = v52.entries(); } catch (e) {}
const v54 = [-2147483648,6];
const v55 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
v55.flat(v55);
new Int16Array(2);
const o62 = {
};
const v63 = new C3(Uint8Array, o62);
new v63();
const v66 = new Int16Array(305);
try { Map.apply(v66, v66); } catch (e) {}
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = this.constructor;
    try { v75(1024, 1024, v51); } catch (e) {}
}
const v77 = new F69(-714582153, F69, -714582153, v52);
v77.length;
const v79 = new F69(9, v77, 9, v54);
v79.b = v79;
const v80 = new F69(1024, v79, v54, v54);
let v88;
try { v88 = ("string").trimStart(); } catch (e) {}
[[v2,v2,v2,[-20096,4294967296,-65537,-2]]];
class C92 {
}
let v93 = -1;
65537 - 65537;
class C96 {
}
function f97(a98, a99, a100, a101) {
    return v80;
}
const v102 = f97(-9007199254740991, v88);
const v104 = ([1024,19026,1125846339]).length;
class C105 {
    static {
        function F107(a109, a110) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            const v112 = this.constructor;
            try { new v112(); } catch (e) {}
            try { this.constructor(); } catch (e) {}
        }
        new F107(v102, v102);
    }
}
new C105();
const t111 = (2136873598).constructor;
const v120 = new t111();
try { v120.toFixed(1030); } catch (e) {}
v53[v79] ||= v104;
const v125 = new BigInt64Array();
const o126 = {
    __proto__: v125,
};
const o129 = {
    set b(a128) {
        v93 <<= v93;
    },
};
