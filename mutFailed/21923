const v4 = [1278n];
v4[0] = v4;
const v5 = [-16036n];
[v5,v5];
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this?.constructor;
    try { new v12(F7, a11, undefined); } catch (e) {}
    const v14 = a11 & a11;
    try {
        this.g = v14;
    } catch(e15) {
    }
}
let v16;
try { v16 = F7.bind(F7); } catch (e) {}
const v17 = new F7(v4, 1278n, 16n);
const v18 = new F7(v5, 16n, -16036n);
v18.e = v18;
Math.min(1278n);
~v17;
Math.atan(v17);
const v25 = new F7(v4, 16n, -16036n);
[v5,v25,-16036n,F7];
[16n];
[v17,v16];
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v31 = 0; v31 < 1000; v31++) {
        const v33 = "p" + v31;
        const v34 = v33.fontcolor();
        const v35 = v34?.slice;
        try { new v35(v34, v34); } catch (e) {}
        this[v33] = this;
    }
}
try { new F29(); } catch (e) {}
const v38 = new F29();
v38 / 16n;
new Uint32Array(9);
new Uint8ClampedArray(512);
new Int8Array(5);
v38.e = v38;
new F29();
