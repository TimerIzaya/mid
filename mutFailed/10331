let v2 = 29687;
class C3 {
    536870887;
    10;
    set c(a5) {
        this[2];
    }
    constructor(a8) {
        a8 - a8;
        v2 >>= v2;
        [-0.43993259244371785,4.612062683129277e+307,-Infinity,0.29982741765889154,9.549069267141977,0.35632659294530844,5.0,5.469067430231455e+307,-2.2250738585072014e-308];
        [0.9646209194415115,-8259.160539660254,1000000000.0,1000000000.0,-882793.424724075];
        [1.0,-1.6703102750784833,3.5485160771334395e+307,-0.9099178105958927,5.0];
    }
    static b;
    ["45557"];
    a;
}
const v13 = new C3(-1000000.0);
const v14 = new C3("45557");
const v15 = new C3(v14);
v15[536870887];
-65535 + -65535;
function f21(a22, a23, a24) {
    a24[45557];
    const o37 = {
        "h": v15,
        set d(a27) {
            new BigInt64Array(7);
            new BigInt64Array(3);
            new BigUint64Array(64);
        },
        __proto__: a23,
        "g": a24,
    };
    return o37;
}
const v38 = f21(-65535, f21, v13);
const v39 = f21(v15, v2, v13);
const v44 = f21(342558111, v39, v13).g?.constructor;
try { new v44(v13); } catch (e) {}
207 >>> 207;
const v49 = 207 + 207;
const v50 = v49 >>> v49;
new Float32Array(207);
let v53 = 14;
v53--;
let v56;
try { v56 = new Uint8ClampedArray("symbol", v53, 207); } catch (e) {}
try { v56.entries(); } catch (e) {}
const v58 = new Uint8ClampedArray(v53);
4096 >> 4096;
try { new Uint32Array("Cl", 342558111, 207); } catch (e) {}
new Uint32Array(4096);
const v65 = 220 >> 220;
v65 >>> v65;
const v68 = new BigUint64Array(220);
const v69 = v68[42];
v69 >> v69;
958 >>> 958;
const v74 = new Uint32Array(958);
v74.g = v74;
Int8Array.g = Int8Array;
const v77 = new Int8Array(3844);
v77[372] = v77;
-490778482n << -490778482n;
0n >> Uint32Array;
let v82 = -1024n;
class C83 {
    set c(a85) {
        v82 = 0n;
        a85 += 0n;
    }
    constructor(a87, a88, a89, a90) {
        this[128] = this;
        C83 >>> v65;
    }
    static [v74] = v69;
    128 = "Cl";
    m(a93) {
        let v94;
        try { v94 = new this(a93, v50, this); } catch (e) {}
        this.c |= v94;
        return a93;
    }
    static 1;
    static h = -490778482n;
    static #f = v82;
}
try { new C83(v15, v39, -490778482n, v58); } catch (e) {}
let v96;
try { v96 = new C83(); } catch (e) {}
v96[128];
const v98 = new C83();
v98[128];
new C83();
const v101 = new C83();
[1.7976931348623157e+308,0.15227894183030433,-2.0,259880.3330397869,0.0,-1e-15,360683.0243419355,-1e-15,1.7976931348623157e+308];
const v104 = [0.03568519099872258];
let v105;
try { v105 = v104.join(v68); } catch (e) {}
try { v105.endsWith(v2); } catch (e) {}
const v107 = [462318.599710946,0.6123807977566038,-0.0,-108306.02593608841,Infinity,0.0,-4.0,-1000.0];
try { v107.at(4096); } catch (e) {}
class C109 {
    static {
        this >> "Cl";
        super[this] = v65;
    }
    [Float32Array];
    static 3518;
    static 2147483648;
    static #valueOf(a113, a114) {
        v101[null] ||= a113;
        const v115 = v104.__proto__;
        try { v115(this, a113, v82, v115, this); } catch (e) {}
        class C118 extends Uint16Array {
        }
        const o121 = {
            [57144]: 4294967296,
        };
        return v104;
    }
    [v82] = v82;
    2;
    static #h = null;
    constructor(a123, a124, a125) {
        try { new Uint8Array(v2, 1024, 1024); } catch (e) {}
        new Uint8Array(1024);
        2 % 2;
        new Int32Array(2);
        new Uint16Array(2277);
    }
    #a = null;
}
try { new C109(C83, v38, v98); } catch (e) {}
new C109();
const v139 = new C109();
v139[2];
v139[2];
const v142 = new C109();
v142[2];
Uint8Array.h = Uint8Array;
const v146 = new Uint8Array();
try { v146.entries(); } catch (e) {}
function f148(a149, a150, a151, a152) {
    a150 >> a150;
    a151 === a151;
    a152++;
    const o156 = {
        ...v146,
    };
    o156.h = o156;
    function f157() {
    }
    function f158(a159) {
        const o160 = {
        };
    }
    let v161 = -2.2250738585072014e-308;
    v161--;
    function f165(a166, a167, a168) {
        a166 >> a166;
        a167--;
        a168++;
        const o172 = {
            "h": a168,
        };
        return Float32Array;
    }
    f165(-3.9870582640049523, -3.9870582640049523, 1000000.0);
    const v174 = f165(1000000.0, -3.9870582640049523, 1000000.0);
    f165(-3.9870582640049523, v161, -3.9870582640049523);
    v174["toString"]();
}
for (let v178 = 0; v178 < 500; v178++) {
    f148(Uint8Array, 2, v178);
}
