const v1 = new Date();
const v2 = [Date,v1,v1,Date,v1];
const v3 = [v2,v2];
const v4 = [v1,v1,Date];
v4[2];
function f6(a7) {
    const v8 = [601759695];
    const v9 = [1073741824,1073741823,1376142744,1073741825];
    "find" == "find";
    let v13;
    try { v13 = v9["find"](..."find", v1, ...v8, ...v9, ...522675525n); } catch (e) {}
    v13 <= v1;
    function f15() {
        return f15;
    }
    let v16 = 0;
    do {
        v16++;
    } while (v16 < 5)
    const o45 = {
        8: v8,
        p(a21, a22, a23, a24) {
            this >>> a24;
            const o43 = {
                "execution": "sync",
                "type": "minor",
                [522675525n](a30, a31, a32, a33) {
                    eval();
                },
                [522675525n](a37, a38, a39, a40) {
                    eval();
                },
            };
            gc(o43);
            return gc;
        },
    };
    return o45;
}
f6.d = f6;
function F46() {
    if (!new.target) { throw 'must be called with new'; }
}
try { new v1(v1); } catch (e) {}
const v50 = new Int32Array(Int32Array);
new v50();
function f52(a53, a54) {
}
try { new BigUint64Array(v1, v3, 10); } catch (e) {}
new BigUint64Array(10);
const v59 = f6(v1);
function f60(a61) {
    this.ReferenceError;
    return a61;
}
%PrepareFunctionForOptimization(f60);
const v64 = f6(v1);
v64[8];
const v66 = f6(v2);
v66[8] = v66;
function F67(a69, a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    a69[8];
    a70[8];
    try { a71.map(F67); } catch (e) {}
    const v76 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function F77() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v80 = new F77();
    const o88 = {
        [v80](a83, a84, a85, a86) {
            "D2z" < a83;
        },
    };
    try { v76.shift(); } catch (e) {}
    try {
        v3.forEach(a70, v76);
    } catch(e91) {
    }
    try {
        this.b = v64;
    } catch(e92) {
    }
}
new F67(v64, v59, v3, v66);
new F67(v59, v66, v2, v64);
new F67(v64, v59, v2, v59);
try { ("valueOf").at(F67); } catch (e) {}
2 + 2;
function F100(a102, a103, a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    function f106() {
        return ("Vre").constructor.raw();
    }
    try { f106(); } catch (e) {}
}
function f112(a113, a114, a115, a116) {
    a115 | a114;
    a113 / a114;
    ("p" + 2).fontcolor();
    function F122() {
        if (!new.target) { throw 'must be called with new'; }
        function f124(a125) {
            for (let i = 0; i < 10; i++) {
                ["object"];
            }
        }
        Object.defineProperty(this, "c", { enumerable: true, set: f124 });
        this.c = -28191;
    }
    (a114 < a114) >>> a115;
    const o134 = {
        n(a132, a133) {
            return a132;
        },
    };
}
try { Uint8Array.bind(Date); } catch (e) {}
new Uint8Array(10);
let v139 = new WeakMap();
v139 ||= v4;
v139 /= v139;
for (let v140 = 0; v140 < 625; v140++) {
}
