class C3 {
    set f(a5) {
        typeof -2.2250738585072014e-308 === "boolean";
        const o9 = {
        };
        new Proxy("boolean", o9);
    }
    static {
        const o22 = {
            toString(a14, a15) {
                new Int32Array(1024);
                new SharedArrayBuffer();
                this?.__lookupSetter__;
            },
        };
        o22.toString();
        %VerifyType(16555);
        function f24() {
        }
        const v25 = f24();
        const v26 = /(?<!a)/vdmsy;
        const v28 = [1073741824,1073741823,1376142744,1073741825];
        function f29(a30, a31, a32, a33) {
            function f35() {
                return f29;
            }
            let v36;
            try { v36 = v28.findIndex(a32, v26); } catch (e) {}
            try {
                v25.d = v28;
            } catch(e37) {
            }
            for (let v38 = 0; v38 < 5; v38++) {
                v26["p" + "p"] = v38;
            }
            const v42 = new Int8Array();
            function f43(a44, a45) {
            }
            const v46 = f43(v36, v26);
            const v47 = v42.buffer;
            try { v47.slice(a30, a31); } catch (e) {}
            Object.defineProperty(v47, "constructor", { writable: true, configurable: true, value: Date });
            try { v28["find"](); } catch (e) {}
            const o51 = {
                [v46]: v42,
                "g": v36,
                [f43]: f35,
            };
            return arguments;
        }
        const o52 = {
        };
        new Proxy(this, o52);
    }
    p(a56) {
        class C57 {
            [this];
            #d;
            [16555];
        }
        new C57();
        new C57();
        new C57(a56, this);
        return this;
    }
    p(a62, a63, a64, a65) {
    }
    static #a = 127;
    constructor(a67, a68) {
        for (let i = 0; i < 10; i++) {
            (-2.2250738585072014e-308)[this];
        }
    }
}
const v70 = new C3();
new C3(C3, -2.2250738585072014e-308, v70);
for (let v72 = 0; v72 < 10; v72++) {
}
let v74 = -2.0;
v74++;
Math.log1p(v74);
new C3();
new Float32Array(0);
new Int32Array(217);
new Reflect(2);
const v92 = new Int32Array(Int32Array);
new Uint8Array(v92);
const o97 = {
    "f": "k",
    get f() {
        return Int32Array;
    },
};
function F103() {
    if (!new.target) { throw 'must be called with new'; }
    const v105 = this.species;
    try { new v105(); } catch (e) {}
    let v107;
    try { v107 = this.valueOf(); } catch (e) {}
    v107.length = v92;
    try {
    } catch(e108) {
    }
}
new F103();
new F103();
