const v1 = -Infinity;
class C3 {
    get f() {
        let v6;
        try { v6 = this[-4.0](this, 19201, -4.0); } catch (e) {}
        const o7 = {
        };
        try {
            o7.h = v1;
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.h = v1;
            o9.c = v6;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.h = v1;
            o11.c = v6;
            o11.f = -4.0;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.h = v1;
            o13.c = v6;
            o13.f = this;
        } catch(e14) {
        }
        return 19201;
    }
}
C3.b = C3;
const v15 = new C3();
v15.f;
const v17 = v15?.constructor;
let v18;
try { v18 = new v17(); } catch (e) {}
v18.f;
const v20 = new C3();
v20.f;
const v22 = new C3();
const v24 = Date?.UTC;
try { new v24(C3, -4.0, v17, -4.0, C3, v24, v17); } catch (e) {}
try { new v24(v22, v22, v15, v15, v22, -4.0, Date); } catch (e) {}
const v27 = new Date();
const v28 = v27?.setFullYear;
try { new v28(Date, -4.0, v27); } catch (e) {}
3153 - 3153;
Uint8Array.e = Uint8Array;
new Uint8Array(3153);
let v34 = 1;
v34--;
let v37;
try { v37 = new Float32Array(Uint8Array, Uint8Array, v1); } catch (e) {}
v37[1];
new Float32Array(v34);
const v42 = new BigUint64Array(2865);
BigUint64Array.length;
const v45 = new BigUint64Array();
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = this?.constructor;
    try { new v50(a48, a48); } catch (e) {}
    function f52() {
        try { ("NFKD").trimStart(); } catch (e) {}
        try { v45.toLocaleLowerCase(this, "NFKD", v42, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
        return a48;
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f52 });
}
const v59 = F46?.__lookupSetter__;
try { new v59(19201); } catch (e) {}
const v61 = new F46();
v15.length = v61;
const v62 = v61?.constructor;
let v63;
try { v63 = new v62(3153, v42); } catch (e) {}
const v64 = v63?.constructor;
try { new v64(v15, v27); } catch (e) {}
class C66 {
    static [C66];
}
