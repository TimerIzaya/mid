const v3 = [268435441,33165,-65537,449591639,-9007199254740990,-31400];
const v4 = [9,-62670,1073741824,1134054742,975,-32213,-36035,4,50209,2147483647];
const v5 = [-26215];
class C7 {
    static #b = 1175953465;
    p(a9, a10) {
        "m" - v4;
    }
    [1175953465];
    constructor(a13, a14) {
        const v15 = this.constructor;
        try { new v15(); } catch (e) {}
        const v18 = Math.atan2(this);
        v18 ** v18;
    }
}
const v21 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f22() {
    try {
        v21.forEach();
    } catch(e24) {
        e24.message;
        const v26 = e24.constructor();
        const o27 = {
            "execution": v26,
        };
    }
    return f22;
}
f22.call(v21, f22, v21, f22);
const v29 = Math.log2();
const v30 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
delete v30[v29];
class C32 {
    static e;
    [v5];
    static #d;
    toString(a34, a35, a36, a37) {
        a35[a35] = "m";
        a36[a34];
        const v40 = new Uint8Array();
        v40.buffer;
        try {
            v40.transfer();
        } catch(e43) {
            function f45() {
                const v47 = ("filter")["startsWith"]();
                Math.cosh(Math);
                return v47;
            }
            f45();
        }
        "m" ** v40;
        return v3;
    }
    [v30];
    constructor(a53, a54) {
        const v55 = this.c;
        try { new v55(); } catch (e) {}
        this[C32] >>>= 1175953465;
    }
}
new C32(v30);
new C32("isSealed");
new C32();
class C60 {
    constructor(a62, a63, a64) {
        super();
        for (let v65 = 0; v65 < 10; v65++) {
            "p" + v65;
            const v68 = v5.includes;
            try { v68(); } catch (e) {}
            const v72 = new BigInt64Array(2325);
            for (const v73 in v72) {
            }
        }
    }
}
const v74 = new C60();
const v75 = v74.hasOwnProperty;
try { v75(); } catch (e) {}
for (let v77 = 0; v77 < 5; v77++) {
    const v79 = "p" + v77;
    const v80 = v79.propertyIsEnumerable;
    try { v80(v79); } catch (e) {}
}
const v83 = [9,-1,256,-2147483647,5,49114,54980,-6310];
try {
    v83.sort(-5);
} catch(e85) {
}
