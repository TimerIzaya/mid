const v3 = new Int32Array(1000);
try { v3.reduce(null); } catch (e) {}
const v7 = new Uint32Array(1711);
let v8;
try { v8 = v7.reverse(); } catch (e) {}
const v11 = new Int8Array(255);
try {
    v11.entries();
} catch(e15) {
}
const v17 = 8n - 8n;
h = null;
ArrayBuffer.prototype = v17;
const o20 = {
    "maxByteLength": 2795366970,
};
const v22 = new ArrayBuffer(4, o20);
v22.g = v22;
if (f) {
    try { v8.valueOf(Int32Array, o20, v7); } catch (e) {}
} else {
    let {"byteLength":v24,"c":v25,"length":v26,} = v3;
}
new Uint16Array(v22);
const o30 = {
};
try {
    o30.f = Uint16Array;
} catch(e31) {
}
try {
    const o32 = {
    };
    o32.f = o32;
    o32.f = Uint16Array;
    o32.g = v3;
} catch(e33) {
}
try {
    const o34 = {
    };
    o34.f = Uint16Array;
    o34.g = v3;
    o34.d = v3;
} catch(e35) {
}
try {
    const o36 = {
    };
    o36.f = Uint16Array;
    o36.g = v3;
    o36.b = 1000;
} catch(e37) {
}
try { Int32Array(); } catch (e) {}
try {
    function f40() {
        return f40;
    }
} finally {
}
SharedArrayBuffer[Uint16Array] = f;
~1711;
f?.[5];
new Float64Array(16);
new Float32Array(16);
new Float32Array(127);
const o54 = {
    "maxByteLength": 1773,
};
const v56 = new SharedArrayBuffer(1773, o54);
v56.byteLength = v56;
try { Int8Array.from(SharedArrayBuffer); } catch (e) {}
new Int8Array(v56);
