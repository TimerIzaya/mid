function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, 0, { configurable: true, enumerable: true, value: this });
    try {
        this.f = -747304536;
    } catch(e3) {
    }
    try {
        this.b = -747304536;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
const v9 = v6[v5];
const v10 = v6[0];
const v11 = [1000.0,-1.4417249425504231e+308,-435671.08632830996,-1e-15,3.2079360585185463e+307,Infinity,-181557.92214381287,-651.3450346648826];
const v12 = [900.8802707615935];
const v13 = [442794.2773364228,-0.0,Infinity,-0.0,1e-15,1000.0,470.71177272400973,-429382.1164095886];
function f14(a15) {
    a15[40] %= v9;
    try {
        a15.g = a15;
    } catch(e16) {
    }
    return v13;
}
v13.toString = f14;
const v18 = new BigUint64Array(0);
if (v13 < v7) {
    new F0();
} else {
    const o21 = {
    };
    try {
        o21.g = v13;
    } catch(e22) {
    }
    try {
        const o23 = {
        };
        o23.g = v13;
        o23.d = v18;
    } catch(e24) {
    }
    try {
        const o25 = {
        };
        o25.g = v13;
        o25.d = v18;
        o25.c = v12;
    } catch(e26) {
    }
    try {
        const o27 = {
        };
        o27.g = v13;
        o27.d = v18;
        o27.c = v5;
    } catch(e28) {
    }
}
new Uint8Array(64);
v6[2147483649] = 0;
const v33 = v11["toReversed"]();
v33.p = v10;
try { v33["p"]("p", v6, v6); } catch (e) {}
new Int32Array(769);
const v41 = Array();
class C42 extends Array {
}
class C43 extends C42 {
    [1] = v41;
}
new C43();
