let v0 = [129];
function f1() {
    function f2(a3) {
        v0 = a3;
        let v4 = 333;
        const v5 = [1073741824,1073741823,1376142744,1073741825];
        function f6(a7, a8, a9, a10) {
            let v11 = a9 && a9;
            arguments[3] = arguments;
            ({"h":v11,"length":a7,...v4} = v5);
            ("find").startsWith(a10);
            for (let v15 = 0; v15 < 5; v15++) {
            }
        }
        f6();
        return f6();
    }
    return f2;
}
function f18(a19) {
    ({"b":a19,} = v0);
}
Object.defineProperty(v0, Symbol.toPrimitive, { configurable: true, get: f1, set: f18 });
const v22 = [-4294967295,1570226860,268435439,59710,5];
const v24 = Symbol.toPrimitive;
v22[v24] = f1;
const v25 = [63665];
const v26 = [v25,v0,v25,v25,v22];
try { v26.map(v26); } catch (e) {}
const v28 = [v22,v22,v0,v22];
[v28,v28,v25];
/f(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/g;
/Ea|b4dxyz{0,1}\xed\xb0\x80*/uim;
const v32 = /BDg?/gms;
class C33 {
    static set f(a35) {
        a35.d >>>= a35;
        const v38 = ("symbol").normalize(C33);
        let v39;
        try { v39 = a35(v38); } catch (e) {}
        v39 > v39 ? v39 : "NFKC";
    }
    e = v25;
    static #a;
    #g = v32;
    [v28];
}
try { new C33(); } catch (e) {}
new C33();
new C33();
const v45 = new C33();
v45.e;
const o55 = {
    valueOf(a48, a49, a50) {
        function f51(a52) {
            return a48;
        }
        Worker.arguments = Worker;
        Worker(f51);
        return a48;
    },
};
function f56(a57, a58) {
    return -21133.120743932668;
    return v24;
}
o55[Symbol.toPrimitive] = f56;
[-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
try { v28.slice(o55); } catch (e) {}
