function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.EPSILON = 9007199254740992;
        Math.atan2(-Infinity, 536870887);
        new Float64Array(512);
    } catch(e10) {
    }
}
const v11 = new F0();
const v12 = new F0();
const v13 = new F0();
[v11,v13];
[v12,v13,v13];
const v16 = [v13,v13];
class C17 {
}
const v19 = Array(C17);
for (let v20 = 0; v20 < 25; v20++) {
    "p" + v20;
    const v23 = v19.includes;
    try { v23(); } catch (e) {}
    const v27 = new BigInt64Array(2325);
    for (const v28 in v27) {
    }
}
new Uint8ClampedArray();
class C34 {
    constructor(a36, a37) {
        a37[2];
        /W(jy2)/udy;
        const v41 = new Uint8Array();
        for (let v42 = 0; v42 < 500; v42++) {
            const o46 = {
                ...v41,
                n(a44, a45) {
                },
            };
        }
        for (let v47 = 0; v47 < 5; v47++) {
            v16["p" + v47] = v47;
        }
    }
}
function F51(a53) {
    if (!new.target) { throw 'must be called with new'; }
}
const v54 = new F51("a");
for (const v56 in "findIndex") {
    v54.d = v56;
}
const v57 = new C34();
const v59 = /a*b|c(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10p*/vdisy;
const o60 = {
};
o60.b = v59;
function f62() {
    Math.cos(Math);
    return Math;
}
%PrepareFunctionForOptimization(f62);
this.e = v57;
