const v5 = new Int8Array(127);
try { v5.keys(); } catch (e) {}
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
const v9 = new Uint16Array(3720);
~64;
new Uint32Array(64);
202 + 202;
const v17 = new Uint8ClampedArray(202);
v17[140] = v17;
new BigUint64Array(2864);
210 >>> 210;
-(210 >> 210);
let v26;
try { v26 = new BigUint64Array(210, Uint32Array, Uint32Array); } catch (e) {}
v26[170] = v26;
new BigUint64Array(210);
try { Set.bind(127); } catch (e) {}
Set.name = Set;
const v30 = new Set();
let v31;
try { v31 = v30.add(64); } catch (e) {}
try { v31.forEach(Uint16Array); } catch (e) {}
const v35 = new Uint16Array(116);
v35[98] = v35;
Int16Array.name = Int16Array;
const v38 = new Int16Array(512);
try { v38.slice(Uint32Array, v38); } catch (e) {}
const v42 = new Int32Array(9);
v42.BYTES_PER_ELEMENT;
try { v42.findIndex(116); } catch (e) {}
let v45 = 925.1427495594241;
v45++;
317008.8127941969 | 317008.8127941969;
let v49 = 1000000.0;
v49--;
class C51 {
}
try { new C51(); } catch (e) {}
const v53 = C51.length;
v53 >>> v53;
function F55(a57, a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this?.__defineGetter__;
    try { new v61(this, this); } catch (e) {}
}
const v63 = new F55();
const v64 = v63?.constructor;
try { new v64(v63, Int32Array, v17, v63); } catch (e) {}
const v66 = new F55(v63, F55, F55, v63);
try { v66.valueOf(); } catch (e) {}
const v68 = [7,128];
const v69 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v70 = v69[4];
-v70;
const v72 = v70 % v70;
v72 / v72;
v70 | v70;
const v75 = [40213,422333454,47387,65536,-51830];
try { v75.push(v75); } catch (e) {}
v75[2] = v75;
0 > 0;
-(0 - 0);
8 - 8;
try { gc(); } catch (e) {}
const v88 = gc.prototype;
try { v88.constructor(); } catch (e) {}
try { gc(); } catch (e) {}
gc();
const v92 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
const v94 = 1 >> 1;
v94 + v94;
v92.length = 1;
const v96 = /xyz{1,32}?/gusy;
class C97 {
    268435440 = v96;
}
try { C97.bind(v9); } catch (e) {}
BigInt64Array.prototype = BigInt64Array;
const v100 = new BigInt64Array();
try { v100.entries(); } catch (e) {}
let v103;
try { v103 = ("boolean").repeat(v49); } catch (e) {}
v103[504603];
const t82 = "toString";
t82[6] = "toString";
"toString" == "toString";
let [,...v108] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
try { v108.toReversed(); } catch (e) {}
try { v108.values(); } catch (e) {}
function f111() {
    const o115 = {
        ...1.0,
        set b(a114) {
        },
    };
    const v116 = o115?.__defineGetter__;
    try { new v116(v17, F55); } catch (e) {}
    return o115;
}
const v118 = f111();
v118.b = v118;
("boolean").split("toString");
-256 & -256;
const v122 = 8 < "boolean";
v122 && v122;
const v125 = new Uint8ClampedArray();
try { v125.lastIndexOf(v103); } catch (e) {}
try { v125.reduceRight(v125); } catch (e) {}
"I" == "I";
let v130 = ("I").localeCompare();
v130--;
const v132 = -256 >> -256;
v132 - v132;
function f134(a135, a136) {
    -a136;
    a136++;
    const v139 = a136--;
    v139 * v139;
    const v141 = [-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0];
    try { v141.map(v31); } catch (e) {}
    const v144 = new Float32Array(v141);
    try { v144.toSorted(v103); } catch (e) {}
    class C146 {
        static {
            this.h = this;
            this < this;
        }
    }
    try { new C146(); } catch (e) {}
    C146.length = C146;
    a135 | a135;
    const o186 = {
        "c": 15135,
        "a": 15135,
        "d": a135,
        __proto__: a136,
        "g": -1628878962,
        "type": "boolean",
        "a": a135,
        set b(a152) {
        },
        "g": 15135,
        "b": a136,
        get f() {
            super[v49] = this;
            Math.exp(-359.60295377780096);
            const v157 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
            [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v157,v157]];
            try {
                new Int8Array(9);
                function f164() {
                    return f164;
                }
                new Uint16Array();
                !0.8843420658768774;
                function F168() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v171 = new F168();
                const o179 = {
                    [v171](a174, a175, a176, a177) {
                        "D2z" < a174;
                    },
                };
                const o181 = {
                    [f164]() {
                    },
                };
                [o181];
                v69.copyWithin(8, -268435456, -256);
            } catch(e185) {
            }
            return this;
        },
    };
    o186.f;
    o186.f = o186;
    o186.g = o186;
    return o186;
}
try { f134(2864, 2864); } catch (e) {}
let v189;
try { v189 = f134(15135, 15135); } catch (e) {}
v189[1000000];
v189[1000000];
f134(v45, v68)[1000000];
f134(317008.8127941969, -4)[1000000];
const v196 = f134(v49, v69);
v196.f = v196;
268435441n ^ 268435441n;
268435441n - 268435441n;
try { new BigUint64Array(F55, v122, v122); } catch (e) {}
const v202 = new BigUint64Array();
const v203 = v202?.keys;
try { new v203(); } catch (e) {}
try { new v203(); } catch (e) {}
v202[2445191368] = 268435441n;
