const v10 = new WeakMap();
class C11 {
    #b = "concat";
    set e(a13) {
        let v12 = this;
        v12 = a13;
        const v18 = true + true;
        Math.clz32(v10);
        Math.atan2(true, 268435439);
        a13 << v18;
    }
    c;
    2;
    #d;
}
new C11();
new C11();
new C11();
const v25 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v27 = new Int16Array(v25, Int16Array, Int16Array);
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v29 = 2684;
const v31 = new Uint32Array(v29, v29, v29);
const v33 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f37(a38, a39, a40, a41) {
    function f42() {
        let v43 = 114;
        try { new Int32Array(v25, a41, v27); } catch (e) {}
        new Int32Array();
        [-0.685155357392599,5.0];
        let v50 = -4294967295;
        const v51 = v50--;
        let v52 = Float64Array;
        v52 = a39;
        b = v34;
        v52.length;
        try {
            v35.forEach(a39, v28);
        } catch(e55) {
            e55.name = e55;
            Float32Array[2] = a38;
            const v57 = new Float32Array(Float32Array, Float32Array, Float32Array);
            function f58() {
                return v25;
            }
            v43 = v29;
            "a" / v51;
            const v64 = 26577 ^ Float32Array;
            Math.expm1(9223372036854775807);
            !v64;
            Math.min(a41);
            Object.defineProperty(v57, "h", { configurable: true, enumerable: true, get: a41 || 26577 });
        }
        Symbol.toPrimitive;
        delete a40?.a;
        return v10;
        new BigUint64Array(2);
        new Uint8ClampedArray(1812);
        new Float64Array(3);
        const o85 = {
            toString(a83, a84) {
                return -4294967297n;
            },
        };
        const o99 = {
            [522675525n](a88, a89) {
            },
            [o85](a91) {
            },
            [-1]: v43,
            1073741824: v31,
            "maxByteLength": -268435456,
            "b": v50,
            [-4294967297n](a93, a94, a95, a96) {
                eval();
            },
            "arguments": v33,
            256: a41,
            ...a40,
            ..."Vre",
            4: "Vre",
            "type": "Vre",
        };
        return o99;
    }
    a38();
    eval();
    %OptimizeFunctionOnNextCall(f42);
}
for (let v103 = 0; v103 < 5; v103++) {
    v29 = v103;
    f37(v103, v33, v103, v103);
    6 / 8003;
    6 / 6;
    !-15;
    f37();
}
