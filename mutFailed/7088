class C3 {
    constructor(a5, a6) {
        function f7(a8, a9, a10) {
            const o11 = {
                ["10"]: -628198.3292161745,
                "d": a6,
                [a8]: a10,
            };
            return o11;
        }
        function f12(a13) {
            [] = "10";
            const v15 = new Float64Array();
            function F16(a18, a19) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a18;
                } catch(e20) {
                    for (let [v21,v22] of a18) {
                    }
                }
                try {
                    const v23 = v15[this];
                    const v24 = [];
                    new Float32Array(7);
                    v24[1];
                    new F16(v23, -268435456n);
                } catch(e31) {
                }
            }
            return v15;
        }
        f7.toString = f12;
        f7(-628198.3292161745, -65536, f7(-65536, a5, -628198.3292161745));
        f7(f7, -65536, "10");
    }
    f;
}
const v35 = new C3(-628198.3292161745, -628198.3292161745);
const v36 = new C3(v35, C3);
new C3(v36, v35);
[-Infinity,5.236212417491849];
[-1000000.0,0.3841138978853982,3.0,-110537.91987089312,-5.696486292708778e+307,-1.7976931348623157e+308];
[-2.2250738585072014e-308,1.4187208905711568,5.0,-8.74169473040067,599008.9582060161];
new Map();
new Set();
class C45 {
}
const v46 = new C45();
const v47 = v46.__lookupGetter__;
class C48 {
}
const v50 = new Float32Array(Float32Array);
class C51 {
}
try { C51.apply(C48, v50); } catch (e) {}
let v53;
try { v53 = v47(); } catch (e) {}
const v56 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v56.g = v36;
v56.g = v56;
const v57 = [601759695];
function f59(a60, a61, a62, a63) {
    const v65 = arguments.toString();
    function f66() {
        const t65 = "Vre";
        t65[2] = "Vre";
        const v68 = ("Vre")?.toLocaleUpperCase;
        v68.g = v68;
        v68.g = v68;
        try { new v68(); } catch (e) {}
        let v70;
        try { v70 = ("Vre").fixed(); } catch (e) {}
        try { v70.localeCompare(v65); } catch (e) {}
        let v73 = -268435456;
        v73--;
        -(v73 + v73);
        const o90 = {
            "c": -4294967297n,
            [522675525n](a78, a79) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v57,
            valueOf(a81, a82) {
            },
            "e": -4294967295,
            "e": v73,
            "maxByteLength": -4294967295,
            "arguments": v56,
            ...v57,
            "type": "Vre",
            ..."Vre",
            valueOf(a84, a85) {
                return a85;
            },
            ..."Vre",
            4: "Vre",
            "c": v73,
            "type": "Vre",
            toString(a87, a88, a89) {
                return a89;
            },
            6: v73,
        };
        try { o90.valueOf(o90, -128); } catch (e) {}
    }
    f66();
    %OptimizeFunctionOnNextCall(f66);
    return -4294967297n;
}
for (let v93 = 0; v93 < 5; v93++) {
    f59();
}
%OptimizeFunctionOnNextCall(f59);
f59(-4294967297n, f59, v56, v53);
