function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v3 = Math.cbrt();
    function F4(a6) {
        if (!new.target) { throw 'must be called with new'; }
        const v7 = this.constructor;
        const v8 = v7.bind(F4, F4, F4, F4);
        try { v8(); } catch (e) {}
        try { new v7(); } catch (e) {}
    }
    new F4();
    this.h = F0;
    try {
        this.d = -58829066;
    } catch(e13) {
    }
    try {
        this.c = -58829066;
    } catch(e14) {
        Math.round(e14);
        delete this[Math];
        try {
            Math.PI = v3;
        } catch(e22) {
        }
        const v25 = new Int16Array(20);
        for (const v26 in v25) {
            Math.expm1(v26);
        }
        const v29 = new Int8Array();
        const o30 = {
            ...v29,
        };
    }
    try {
        this.h = -58829066;
    } catch(e31) {
    }
}
new F0();
const v34 = ["symbol","symbol"];
const v35 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
class C36 {
}
const v38 = Symbol.replace;
C36[v38] = v35;
new F0();
new F0();
const v42 = new WeakMap();
const v43 = [1073741824,1073741823,1376142744,1073741825];
new WeakMap(..."symbol", v38, v34, v38);
/E(?<a>.)\k<a>/gdim;
/a\sc/udimy;
/Ia\P{gc=Decimal_Number}K(ab|cde)?/usy;
try {
    Symbol("symbol");
} catch(e50) {
}
let v52;
try { v52 = v43["find"](..."find", v42, ...v35, ...v43, ...522675525n); } catch (e) {}
v52 <= v34;
class C56 {
    [10000] = 10000;
    static toString(a58) {
    }
}
new C56();
let v62 = 10;
const v63 = [v62];
class C64 {
    #toString(a66, a67, a68) {
    }
}
[-Infinity,-1000000.0,0.0,Infinity,-3.0];
[1000000.0,1000000000.0,3.0,5.494279254335564e+307,1.1070950570430615e+308,-1000000000.0,6.892003520137617,3.0,0.9580604816451166];
[405.8984607790296,2.2250738585072014e-308];
function f75(a76, a77, a78, a79) {
    const o86 = {
        [f75](a81, a82, a83) {
        },
        "type": "find",
        "execution": "find",
        set b(a85) {
        },
        "c": v63,
    };
    return a79;
}
%OptimizeFunctionOnNextCall(f75);
const v88 = new Uint8Array(v62);
new Int32Array(v88);
function f91(a92, a93, a94, a95) {
    arguments[2] = arguments;
    function f97() {
        const o104 = {
            get d() {
                return "symbol";
            },
            next() {
                v62--;
                v62 == 0;
                const o103 = {
                };
            },
            __proto__: a94,
        };
        return o104.valueOf();
    }
    const v106 = f97();
    gc();
    v106[6] = v106;
    %OptimizeFunctionOnNextCall(f97);
    return gc;
}
f75();
function F110() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
        const v115 = -(-7);
        Math.tan(v115 ** v115);
    } catch(e118) {
    }
}
function F119(a121, a122) {
    if (!new.target) { throw 'must be called with new'; }
    const v123 = this.constructor;
    try { new v123(F110, a121, F110, v123); } catch (e) {}
    new F110();
}
