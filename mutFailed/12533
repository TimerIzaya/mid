[];
[-1000000.0,-3.182844840566686,-1000000.0,0.3957750256194462,-1.1744442152519963e+308,0.8065132745569873,-6.009431094679001e+307,2.220446049250313e-16];
[2.2250738585072014e-308,-994.1169702478408,6.436155619681795e+306];
const t0 = [-55841,536870912,65536,-1024,886617036,3];
t0.length = 1;
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
[7.724880095387949e+307];
function F17() {
    if (!new.target) { throw 'must be called with new'; }
    function f20() {
        return -9007199254740992n;
    }
    class C21 {
    }
    new C21();
    this.c = 1073741823;
    const o24 = {
    };
    function f25() {
        const o29 = {
            m(a28) {
                return a28;
            },
            __proto__: 946.0676210033328,
        };
    }
    %OptimizeFunctionOnNextCall(f25);
    class C30 {
    }
    const v32 = new Set();
    function F33(a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            new Int32Array(Int32Array);
            function f39() {
            }
            ([-223.21974199729607,0.6826909196761026,-7.610543209781418e+307,1000000000.0,-2.2250738585072014e-308,0.4672319347741436,-1000000.0,-3.0,-5.0,6.966874548897]).fill(-9007199254740990n, 3);
            this.d = a35;
        } catch(e43) {
        }
        class C44 {
        }
        const v46 = new WeakSet();
        function f47(a48) {
            const o53 = {
                set b(a50) {
                    const v51 = v46.constructor;
                    class C52 extends v51 {
                        [a48] = a48;
                        static #e = v51;
                    }
                },
            };
            return a48;
        }
        v32[this];
        try {
            new F33(a36, v32);
        } catch(e56) {
        }
    }
}
new F17();
new F17();
new F17();
new Float32Array(4);
new Uint32Array(2);
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const o75 = {
    };
    function F76() {
        if (!new.target) { throw 'must be called with new'; }
        this.c = this;
        try {
            this.c = 19793;
            try { Array.of(); } catch (e) {}
            const v81 = Array(19793);
            try { v81.map(this); } catch (e) {}
            for (const v83 of v81) {
            }
            const v84 = [];
            const v86 = Symbol.toPrimitive;
            v84[v86] = Array;
            const v87 = [v84,v84,v84];
            try { Symbol.apply(Symbol, v86); } catch (e) {}
            v87[Symbol.toPrimitive] = Symbol;
            [v87,v87];
            Uint16Array.toString = Array;
        } catch(e93) {
        }
        try {
            this.b = 19793;
        } catch(e94) {
        }
    }
    new F76();
}
const v96 = new F69(F69, F69, F69, F69);
for (let v97 = 0; v97 < 25; v97++) {
    v96["p" + v97] = v97;
}
class C100 {
    constructor(a102, a103) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new C100();
function F106(a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    const v112 = Array(11);
    const v116 = Date.toString().replaceAll();
    let v117;
    try { v117 = v116.replaceAll(); } catch (e) {}
    const v119 = new Set(v117);
    const v121 = v119["delete"]();
    v121 || v121;
    v112[212] -= 3774;
    const v123 = this.constructor;
    try { new v123(this); } catch (e) {}
    a109++;
}
const v126 = new F106();
const t125 = v126.constructor;
new t125();
function f129() {
}
new BigInt64Array();
const v133 = ["bpkzx","bpkzx","bpkzx"];
const v135 = "bpkzx" * [v133,v133,v133];
try {
    v133.length = v135;
} catch(e136) {
}
