function f3() {
    return 10000;
}
let v4;
try { v4 = f3(); } catch (e) {}
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a8;
    } catch(e9) {
    }
    try {
        this.b = this;
    } catch(e10) {
    }
    new Uint32Array(106);
    new a7(3405);
    2 >> 2;
    Int8Array.prototype = Int8Array;
    new Int8Array(2);
    try {
        a8.a = a8;
    } catch(e21) {
    }
}
new F5(11, 10000);
new F5(16, 11);
const v24 = new F5(16, 10000);
v24.e = v24;
[0.2176050082584552,1.7976931348623157e+308,7.346817097253606,5.0,188049.91279851692,1000.0,1.0];
const v32 = [8.229511685572465,-1.0,-1000000.0,-1.7976931348623157e+308,0.0,-2.220446049250313e-16,0.8965134201213987,5.0,0.9845653897373333,-4.0];
v32.h = v32;
[763632.5713266137,267213.35945917224,2.0,-966.3188206525462,363.9515519655306];
function f34() {
    return f34;
}
-4 !== -4;
class C42 {
    static #valueOf(a44, a45, a46) {
        ("valueOf").f;
        try {
            f34();
        } catch(e49) {
        }
        return -4;
    }
    get f() {
        try {
            const v51 = C42();
            try {
                new f3();
            } catch(e53) {
            }
            this << v51;
        } catch(e55) {
            gc();
            new Int8Array();
            const o60 = {
            };
        }
    }
}
try { new C42(); } catch (e) {}
function f62(a63, a64, a65, a66) {
    return a65;
}
2534 === 2534;
const v70 = new v4(2534);
v70[257] = 1;
const v72 = new C42();
const v73 = v4?.constructor;
try { new v73(); } catch (e) {}
Array.name;
class C78 extends Array {
    16 = 4;
    268435440;
}
new C78();
%PrepareFunctionForOptimization(f34);
%OptimizeMaglevOnNextCall(f62);
try { v72.o(v72, 5, 9007199254740991); } catch (e) {}
