function f0() {
}
const v2 = new Date();
new Uint8Array(185);
new Uint8ClampedArray(14);
new v2(16);
function f12() {
    return Uint8Array;
}
[-3.431573080430141,-5.0,-606432.5050680875,1000000.0,-0.0,-0.0,1000000000.0];
[0.8507057789945804,-1e-15,-Infinity,-918.0420550349933,-2.220446049250313e-16,-802.1573453451774,-1000.0];
[1000000000.0];
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o22 = {
    };
} catch(e23) {
}
class C24 {
    static p(a26) {
        const o33 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f28() {
                        return this;
                    }
                    const v29 = `
                    `;
                    this.fuck("d", v29, "d", "d");
                } catch(e32) {
                }
                return -128;
            },
        };
        return o33;
    }
    g;
}
try { new C24(); } catch (e) {}
const v35 = new C24();
class C37 extends Map {
}
new C37();
new Uint8Array();
v35.g;
new C24();
new C24();
class C44 extends C24 {
    static n(a46, a47) {
        function F49(a51, a52, a53, a54) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C61 {
        }
        return -128;
    }
    #c = C44;
    valueOf(a65, a66, a67) {
        super.f;
    }
    constructor(a70, a71, a72, a73) {
        super();
        function f74() {
            const t70 = [];
            t70[6] = 4294967295;
            new Int32Array();
            const o89 = {
                get b() {
                },
                toString(a82, a83, a84) {
                },
                m(a86) {
                },
                set b(a88) {
                },
            };
        }
        for (let v90 = 0; v90 < 5; v90++) {
            %OptimizeFunctionOnNextCall(f74());
        }
    }
    set f(a93) {
        for (const v94 of this) {
            try {
            } catch(e95) {
            }
        }
        class C97 extends SharedArrayBuffer {
        }
        const o98 = {
        };
        try {
        } catch(e99) {
        }
        try {
            const o100 = {
            };
        } catch(e101) {
        }
        try {
            const o102 = {
            };
        } catch(e103) {
        }
        try {
            const o104 = {
            };
        } catch(e105) {
        }
    }
}
class C106 {
}
function f107(a108, a109, a110, a111) {
    const o117 = {
        "d": a110,
        p(a113, a114, a115) {
        },
    };
}
new v2();
for (let v119 = 0; v119 < 25; v119++) {
    Math.sin(v119 ** 2);
}
956206316 + 956206316;
[-2.0,-3.0,0.6635275380715938,1.5267625116759715e+308,2.2250738585072014e-308,648797.6103741466,764.9339560151452];
[-1.8569069513514513,-1.7976931348623157e+308,3.051119090190868];
([-96835.6485279667,2.220446049250313e-16,8.46687468460627e+306,Infinity,-0.0,-Infinity]).length;
const v132 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f133(a134, a135) {
    const o137 = {
        ...a134,
        get d() {
            return this;
        },
    };
    return f133;
}
f133();
const v139 = f133(v132);
try { v139(956206316, 956206316); } catch (e) {}
