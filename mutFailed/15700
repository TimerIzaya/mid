[];
[-5.0,-5.0,1.2920053526711835e+308];
[1.0,-1000000000.0,5.0,-5.213116016261877,0.491253791438802,140.2996158531903,-1.5183846830646601,150.04796374375542,0.9919676744210971,785.855472749804];
[-1000000.0,7.246919874761286e+306,-1.331278082494144e+308,1.0,-Infinity];
new BigInt64Array(86);
new Uint8ClampedArray(3);
new Float32Array(5);
function f16() {
    new Uint32Array(174);
    const v22 = new Float32Array(1018);
    const o24 = {
    };
    class C25 {
    }
    const v26 = new C25();
    v26 << -1557853178;
    function F30(a32, a33) {
        if (!new.target) { throw 'must be called with new'; }
        this.h = -1557853178;
        this.h = F30;
    }
    const v34 = F30?.bind;
    try { new v34(o24); } catch (e) {}
    const v36 = new Float32Array();
    new Float32Array();
    new F30("function", v36);
    let v39 = 4096;
    v39--;
    new Float32Array();
    class C42 {
        static {
            try { new this(); } catch (e) {}
            for (let v45 = 0; v45 < 10; v45++) {
                v45 % v45;
                function f47() {
                    return v45;
                }
                const v48 = [601759695];
                const v49 = [1073741824,1073741823,1376142744,1073741825];
                function f51(a52, a53, a54, a55) {
                    Uint32Array();
                    let v58;
                    try { v58 = v49["find"](..."find", a55, ...v48, ...v49, ...522675525n); } catch (e) {}
                    const v59 = v58 <= a54;
                    v59 && v59;
                }
                for (let v61 = 0; v61 < 10; v61++) {
                    f51();
                }
            }
            (86).__proto__?.trimRight;
        }
    }
    return v22;
}
f16.finally = Float32Array;
const v65 = [-3,257];
class C66 extends f16 {
    static #n(a68, a69, a70) {
        Object.defineProperty(v65, 10, { writable: true, configurable: true, enumerable: true, set: f16 });
    }
}
const t62 = 86;
const v71 = new t62();
try { v71.finally(v65, f16, f16); } catch (e) {}
