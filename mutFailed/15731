const v0 = [];
v0.fuck = v0;
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v0;
    } catch(e3) {
    }
    try {
        this.h = v0;
    } catch(e4) {
    }
}
new F1();
const v6 = new F1();
const v7 = new F1();
v7.a = v7;
const o9 = {
};
const v11 = new v0(v0, o9);
v11.fuck = v11;
try {
    v11.fuck(F1, v7);
} catch(e13) {
    e13.b = e13;
}
function f14(a15) {
    return 3.3353807366019546e+307;
}
class C16 extends f14 {
    static b = v0;
    static 6;
    e = v6;
}
C16[6] = C16;
let v19 = F1 ** v7;
v19--;
Reflect.h = -1000000000000.0;
let v22 = [];
v0.d = Reflect.construct(C16, v22, C16);
try {
    Reflect.h = v0;
} catch(e24) {
}
1984 % 1984;
const v28 = new Int16Array(1984);
try { v28.filter(v22); } catch (e) {}
new Int16Array(3);
v22--;
new BigInt64Array(129);
const v39 = C16.isConcatSpreadable;
const v40 = Array();
v40[267] = v39;
const v42 = v40["concat"]();
v42.e = v42;
