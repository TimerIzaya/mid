const v1 = new WeakSet();
const o2 = {
};
const v3 = /a{12,3b/disy;
v3.b = v3;
try {
    WeakSet.f = v3;
    function f4(a5, a6, a7, a8) {
        function f9() {
            Math.round(a6);
            const v13 = Math.tanh(-4294967295);
            v13 * v13;
            return v13;
        }
        f9();
        eval(a5);
        %OptimizeFunctionOnNextCall(f9);
        return f4;
    }
    const v18 = [];
    const v19 = [v18,v18,v18];
    Object.defineProperty([v19,v19], "g", { writable: true, configurable: true, enumerable: true, value: v18 });
    const v21 = new v1();
    function f22(a23, a24, a25) {
        a23[22] = a23;
        const o26 = {
            ...a25,
            2: v21,
            268435439: v1,
        };
        return o26;
    }
    for (let v27 = 0; v27 < 5; v27++) {
        f4(f4, v27, v27, v27);
    }
    let v29 = 0;
    do {
        33047 ^ 33047;
        v29++;
    } while (v29 < 1)
} catch(e37) {
}
new Uint8Array(789);
const t43 = "o";
t43[0] = "o";
const v45 = new Float32Array();
function f46(a47, a48, a49, a50) {
    a47[0] = a47;
    try { a47.lastIndexOf(Float64Array); } catch (e) {}
    Array(19793);
    class C57 {
        static n(a59, a60) {
        }
        static [-4096];
    }
    const v61 = new C57();
    function f62() {
        return f62;
    }
    const o64 = {
        ...a50,
        [v61]: a50,
        "e": C57,
        ...C57,
        "d": f62,
        get f() {
            C57[3] >>= 9;
            return a50;
        },
    };
    let v65 = a47[1];
    v65 >> v65;
    let v67 = v65--;
    v67--;
    new Float32Array(14);
    function F72(a74, a75) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f77(a78, a79, a80, a81) {
        Uint8Array / a78;
        a79 < F72;
        const o87 = {
            "b": a78,
            ...a78,
            n(a85, a86) {
                return Uint8Array;
            },
        };
        return o87;
    }
    for (let v88 = 0; v88 < 625; v88++) {
        f77();
    }
    const v90 = a48--;
    v90 - v90;
    function f94() {
        return "object" + -13;
    }
    const v98 = arguments.__lookupGetter__?.d;
    try { new v98(f46); } catch (e) {}
}
const v100 = f46?.constructor;
try { new v100(v3); } catch (e) {}
f46("o");
f46(v45);
new Uint8ClampedArray(7);
Uint8Array.BYTES_PER_ELEMENT;
new Uint8Array(268435440);
this - this;
const o114 = {
};
function F115() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = 47398;
    function f118(a119, a120) {
        return this;
    }
    new Promise(f118);
}
const v123 = new F115();
const o124 = {
    ...v123,
};
new Uint8ClampedArray(995);
BigInt.asUintN(-15843, 45011n);
const o132 = {
};
const v135 = new Uint8Array(268435440);
function f136(a137, a138, a139, a140) {
    Set(a137);
    return v135;
}
new Int8Array(550);
const v146 = [0.0,-2.220446049250313e-16];
let v147;
try {
const t0 = 16;
v147 = t0(16, 16);
} catch (e) {}
let v148 = v146[v147];
v148 **= 16;
const v149 = new BigInt64Array();
%PrepareFunctionForOptimization(SyntaxError);
parseInt(v146);
function f153() {
    return v146;
}
Object.defineProperty(268435440, Symbol.toPrimitive, { writable: true, get: f153 });
([927716.746385878]).indexOf;
for (let v158 = 0; v158 < 5; v158++) {
    const v161 = new BigInt64Array(4046);
    const o162 = {
    };
    ("undefined").localeCompare("undefined", o162);
    function f165() {
        let v167 = 65537;
        v167++;
        const v171 = new Int32Array(1024);
        for (const v172 of v171) {
        }
    }
    f165();
    function f175(a176, a177) {
        const o181 = {
            p(a179, a180) {
                return a180;
            },
        };
        for (const v182 in o181) {
        }
        let o183 = {
        };
        [,...o183] = v161;
        function f184() {
            const v185 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
            return v185.toLocaleString(f184, v185).search(f184);
        }
        return a176;
    }
    f175(f175, v158);
}
try { v149.entries(); } catch (e) {}
let [,v190,v191] = v149;
function* f192(a193, a194, a195) {
    return a194;
}
f192.prototype = f192;
class C196 {
}
try { v191(); } catch (e) {}
