function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    this.h = this;
    try {
        this.d = 15;
    } catch(e3) {
    }
    try {
        this.h = 15;
    } catch(e4) {
    }
}
const v5 = new F0();
function f6() {
    [-1733647432,-16];
    [-1024,-20690,-1177363547,-7,45197];
    return [16];
}
v5[Symbol.toPrimitive] = f6;
function f12(a13, a14) {
    try {
        a14.length = 6;
    } catch(e16) {
    }
    return a13;
}
v5.toString = f12;
const v17 = new F0();
new F0();
class C19 {
    512;
    static #n(a21) {
        try {
            super.getOwnPropertyDescriptors(this, this);
        } catch(e23) {
        }
        return v17;
    }
    [v17] = v17;
    [v5] = v17;
    static c;
}
new C19();
new C19();
new C19();
let v30 = -1.0;
const v31 = v30++;
const v32 = v31 - v31;
try { Reflect.set(v32); } catch (e) {}
