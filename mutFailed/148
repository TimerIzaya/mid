const v2 = new Array(15);
let v3 = 4294967297;
const v8 = Math.round(-442.14985482196664);
!24103;
Math.atan2(24103 && 24103, Array);
15 << 24103;
!-712839282;
const v14 = Math.min(-712839282);
v3--;
new Array(1186);
new Float64Array(14);
BigInt64Array.e = BigInt64Array;
new BigInt64Array(127);
new BigUint64Array(64);
for (let v31 = 0; v31 < 32; v31++) {
    "p" + v31;
    v2[14] = v31;
}
const t18 = -2147483649;
t18.d = v14;
const v35 = new Uint8Array(Array);
let v36;
try { v36 = v35.join(v35); } catch (e) {}
function f37(a38, a39) {
    const o40 = {
    };
    o40.c = o40;
    return a39;
}
let v41;
try { v41 = v36(15, Array); } catch (e) {}
for (let v42 = 0; v42 < 25; v42++) {
    const v43 = v14();
    const v44 = (759956410)?.__defineGetter__;
    try { new v44(759956410, v41); } catch (e) {}
    Object.defineProperty(v43, v42, { enumerable: true, get: f37, set: f37 });
    async function f46(a47, a48, a49) {
        const o50 = {
            "apply": a49,
            "call": Array,
            "construct": f37,
            "deleteProperty": f37,
            "getOwnPropertyDescriptor": Array,
            "isExtensible": v14,
            "ownKeys": f37,
            "preventExtensions": v43,
            "setPrototypeOf": Array,
        };
        new Proxy(v43, o50);
        await v8;
        return a49;
    }
    f46(-442.14985482196664, 1186, 24103);
    v35[BigUint64Array] = v43;
    const o57 = {
        "execution": "sync",
    };
    gc(o57);
}
