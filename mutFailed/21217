function f0() {
}
const v5 = new Set();
const v6 = ["f","f"];
[v6,v6,v6];
["f","dotAll","f","b"];
new Uint32Array(174);
new Float32Array(1018);
const o19 = {
};
class C20 {
}
const v21 = new C20();
v21 << -1557853178;
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F25;
}
const v29 = F25?.bind;
let v30;
try { v30 = new v29(o19); } catch (e) {}
const v31 = new v30();
new F25();
new F25("function", v31);
let v34 = 4096;
v34--;
new Float32Array();
class C37 {
    static {
        let v39;
        try { v39 = new v5(); } catch (e) {}
        for (let v40 = 0; v40 < 10; v40++) {
            1018 % v40;
            function f42() {
                return v39;
            }
            const v43 = [601759695];
            const v44 = [1073741824,1073741823,1376142744,1073741825];
            function f46(a47, a48, a49, a50) {
                f42();
                let v53;
                try { v53 = v44["find"](..."find", a50, ...v43, ...v43, ...522675525n); } catch (e) {}
                const v54 = v53 <= a49;
                v54 && v54;
            }
            for (let v56 = 0; v56 < 10; v56++) {
                f46();
            }
        }
        ("object").__proto__?.trimRight;
    }
    static m(a61, a62) {
        const o65 = {
            "maxByteLength": 23,
        };
        const v67 = new a62(9, o65);
        const v69 = new Uint16Array(v67);
        return v69;
    }
}
