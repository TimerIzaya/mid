let v0 = 621504324;
class C3 {
    static #a = v0;
    static a;
    static p(a5, a6) {
        %VerifyType(a6);
        ++v0;
        Math.abs(-39793);
        Math.abs(-39793);
        Math.cos(-39793);
        return this;
    }
    #e = 8;
    static [8] = v0;
    1024;
}
new C3();
const v14 = new C3();
function f15() {
    const o16 = {
    };
    new Proxy("isSafeInteger", o16);
    return v0;
}
Object.defineProperty(v14, "toString", { writable: true, enumerable: true, value: f15 });
v14[1024] = v14;
const v19 = new C3();
v19[1024];
Int32Array.a = "isSafeInteger";
Int32Array.a = Int32Array;
const v23 = new Int32Array(4096);
try { v23.join(v14); } catch (e) {}
const v27 = new Int8Array(4096);
v27.valueOf = f15;
v27[7] = v27;
try { new Uint16Array(v27, Int32Array, v27); } catch (e) {}
const v31 = new Uint16Array(12);
try { v31.findLastIndex(v0); } catch (e) {}
function f33(a34, a35) {
    return Math.tanh("1");
}
f33.caller;
%PrepareFunctionForOptimization(f33);
const v40 = f33();
%OptimizeFunctionOnNextCall(f33);
f33(v40, f33);
