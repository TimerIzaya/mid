[-1684351746,65537,-16,-1837290638,16,6];
[65537];
[-63366,57262,2147483648,1073741823,-4294967297,-2147483648,-9223372036854775808,65535,-31142];
new BigInt64Array();
class C8 {
    static toString(a10, a11) {
        const v13 = super[a11];
        try {
            delete this[v13];
            this[C8];
        } catch(e16) {
        }
        function f17(a18, a19, a20) {
            do {
            } while ((() => {
                    const v23 = 2147483648 < 7;
                    !v23;
                    return v23;
                })())
            f17();
            return a18;
        }
    }
}
const v26 = new C8();
function f28() {
    function f29(a30, a31) {
        const v32 = v26.constructor;
        v32 + v32;
        return f29;
    }
    f29(Uint8ClampedArray, Uint8ClampedArray);
    (2136873598).constructor;
    %VerifyType(Proxy());
    return f29;
}
function f42() {
    return f42;
}
Array(36862, f42.arguments);
[65537,-932052840,-8,-65036,-3,255,-9223372036854775808,-14,6,4];
const v48 = [268435441,-49799,1444563576,-2147483647,256];
[255,20223,-4252,-9,5,1073741823,-9223372036854775807,-7];
class C51 {
    536870887;
}
([NaN,52.65298068517177,-4.0])["includes"](-6, -9223372036854775807);
new Float64Array(1024);
new Uint8ClampedArray(6);
const v63 = ("includes").trimStart();
function f64() {
    v63.length;
    return v63;
}
f64.call();
%OptimizeFunctionOnNextCall(f64);
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    function f70(a71) {
        return a71;
        function f72() {
            Math.sinh(0);
            const o77 = {
                ..."raw",
            };
            function f78() {
                return f78;
            }
            function f80() {
                Object.defineProperty(f72, 13, { enumerable: true, set: f78 });
                return o77;
            }
            f80();
        }
        [f72,5.0];
        const o84 = {
        };
        return o84;
    }
}
new Int8Array(15);
class C87 {
    constructor(a89, a90, a91) {
        new Uint8ClampedArray(129);
        function f95() {
            return f95;
        }
    }
}
new Uint32Array(C87);
class C98 extends Int16Array {
}
const v99 = new v48();
const o100 = {
    __proto__: v99,
};
