function f0() {
    -1000000000000.0 != -1000000000000.0;
    const o10 = {
        ..."a",
        get f() {
            this[this] = this;
            this << -1000000000000.0;
            const v7 = 15 << this;
            const t6 = "a";
            t6[Symbol.search] = this;
            return v7;
        },
        "h": -1000000000000.0,
    };
    return o10;
}
const v11 = f0();
const v12 = f0();
let v13 = f0();
[0.020556841246499258,-1.0,1000000.0,-144.5479467546902,885.2142570451219,3.0,1.7854567317310553e+308,1000000000.0,1.7976931348623157e+308,-1000000.0];
const v15 = [6.423543254212967e+307,-7.400380891395082,-Infinity];
const v16 = [-215474.16131040652,-Infinity,0.011666374349578179,-2.220446049250313e-16,0.33021071242925826,-Infinity,-279091.3689438093];
try { v16.hasOwnProperty(v16); } catch (e) {}
class C18 {
    set e(a20) {
        this[f0] = v12;
        return Uint8ClampedArray;
        const v23 = [Infinity];
        class C24 {
            [v23];
        }
        v16["flatMap"](a20, v15);
        v13 = a20;
    }
    static 6;
    static #h = v11;
    d = v16;
    static 239 = v13;
}
[("undefined").localeCompare()];
const v32 = ("unscopables")[Symbol.search];
new v32(-1073741824, -268435456, -1073741824, -1073741824, ...v32);
C18.length = C18;
const v36 = new C18();
v36.b = v36;
new C18();
new C18();
try { new BigInt64Array(BigInt64Array); } catch (e) {}
