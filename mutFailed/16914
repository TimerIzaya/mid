2 - 2;
const v9 = new BigUint64Array(9);
const v12 = new Uint32Array(216);
const v13 = v12?.with;
try { new v13(v12, v12); } catch (e) {}
const v17 = new Int16Array(2243);
let v18;
try { v18 = v17.includes(v17); } catch (e) {}
const v25 = v17[Symbol.replace];
try { v12.findLastIndex(v25, v9); } catch (e) {}
[1.7976931348623157e+308,1.6406141665454307e+307,Infinity,245.41771240506478,-2.0,0.0,-0.8749147862496383,2.5470922897358363];
[1.5388491895961329e+308,4.0];
[NaN,342197.1906696926,-2.220446049250313e-16,-1.689605450374824,297.14206251146743,-313.81252886917594,-2.0,9.893925602429455];
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
new Uint8Array(3301);
-1265;
try { new Int8Array(3, Uint8Array, 2243); } catch (e) {}
new Int8Array(1265);
const v39 = new Int8Array(8);
function f40(a41) {
    const v42 = [];
    const v43 = [v42,v42,v42,v42,v42];
    function F44(a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
        const v50 = this.valueOf(this.propertyIsEnumerable(a46), v43, v43).constructor;
        let v51;
        try { v51 = new v50(a46); } catch (e) {}
        a46.lastIndexOf(v51, a46);
    }
    return 2243;
}
v39.valueOf = v18;
v39[5] = v39;
const v55 = new Int16Array(4096);
try { v55.join(216); } catch (e) {}
Uint16Array.name;
new Uint16Array(3);
new BigInt64Array(256);
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "p1", { writable: true, enumerable: true, value: v39 });
    const v66 = this?.toLocaleString;
    try { new v66(); } catch (e) {}
    try {
        for (let v68 = 0; v68 < 50; v68++) {
            for (let v69 = 0; v69 < 25; v69++) {
                const v70 = v69 - v69;
                const o72 = {
                };
                try {
                    o72.f = v69;
                } catch(e73) {
                }
                try {
                    const o74 = {
                    };
                    o74.f = v69;
                    o74.a = v70;
                } catch(e75) {
                }
                try {
                    const o76 = {
                    };
                    o76.f = v69;
                    o76.a = v70;
                    o76.c = 256;
                } catch(e77) {
                }
                try {
                    const o78 = {
                    };
                    o78.f = v69;
                    o78.a = v70;
                    o78.c = v68;
                } catch(e79) {
                }
                this["p" + v69] = v69;
            }
        }
    } catch(e82) {
    }
}
const t82 = 2243;
new t82();
new F64();
227.40634637175117 ^ 227.40634637175117;
[];
[];
[1000.0];
