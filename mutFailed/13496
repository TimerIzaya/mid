let v1 = -1e-15;
v1++;
for (let v4 = 0; v4 < 10; v4++) {
    (759956410).__defineGetter__;
}
const v8 = [-1000.0,-1.7976931348623157e+308,-5.0,0.041585626613896864,0.11182523436003267,-923.0493943704589,888887.9712086536,-0.0,8.339189983372123,5.0];
const v9 = [-855.7585244280847,9.822946438749017e+306,-8.389444851564396e+307,0.3124306200606064,1.0];
const v10 = [0.11702363912701275,3.0,-1.752052834687488,0.00020716494380546013,-5.9170766358775655,1000.0,-0.24928908420117857,0.2626903748575907];
new Set();
let v14 = 567768644;
function f15(a16, a17, a18) {
}
f15(v14, -4294967297, v14);
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -65536;
    } catch(e25) {
    }
    try {
        this.h = a23;
    } catch(e26) {
    }
    try {
        this.g = a23;
    } catch(e27) {
    }
}
const v29 = new v14("valueOf");
function f30() {
    0 < 10;
    for (let v36 = 0; v36 < 5; v36++) {
    }
    return v10;
}
for (let v37 = 0; v37 < 25; v37++) {
    function f38() {
        return v37;
    }
    const v39 = [601759695];
    const v40 = [1073741824,1073741823,1376142744,1073741825];
    function f41(a42, a43, a44, a45) {
        f38();
        try { v40["find"]("find", a45, v39); } catch (e) {}
        const v50 = `
            Uint8Array >> v50;
        `;
        const v55 = new Uint8ClampedArray(16);
        v55["536870889"] = "536870889";
    }
    const v58 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v60 = new Uint32Array(5);
    let v61 = -4294967297n;
    v61--;
    const v63 = [601759695];
    const v64 = [1073741824,1073741823,1376142744,1073741825];
    const v65 = v29?.constructor;
    let v66;
    try { v66 = v65(); } catch (e) {}
    function f67() {
        let v69;
        try { v69 = ("Vre").charAt(4096); } catch (e) {}
        try { v69.lastIndexOf(f67); } catch (e) {}
        let v71;
        try { v71 = ("Vre").codePointAt(v58); } catch (e) {}
        v71 - v71;
        v71 ^ v71;
        let v74 = Float64Array;
        v74 = v14;
        let v75 = v58.length;
        v75++;
        try {
            v64.forEach(v14);
        } catch(e78) {
            e78.stack = e78;
        }
        const o89 = {
            "c": v61,
            "c": v63,
            valueOf(a80, a81) {
                return a81;
            },
            1073741824: v60,
            [v61](a83, a84, a85, a86) {
                eval(v66);
            },
            "arguments": 5,
            256: "valueOf",
        };
        o89[256];
    }
    for (let v91 = 0; v91 < 10; v91++) {
        f41(v91, v91, v40, f41);
    }
}
const v93 = new F20(v10, 898, v8);
new F20(v10, 898, v10);
new F20(v8, -65536, v8);
function f98() {
    [Math.atanh("Vre")];
    return 255;
}
f98();
%OptimizeFunctionOnNextCall(f98);
new Float64Array(255);
new Int16Array(6);
new Int16Array(255);
class C111 {
}
const v112 = new C111();
const v114 = new Uint32Array(C111);
const v116 = [601759695];
const v117 = [1073741824,1073741823,1376142744,1073741825];
function f119(a120, a121, a122, a123) {
    function f124() {
        (64n).toLocaleString();
        function f128() {
            function F129(a131) {
                if (!new.target) { throw 'must be called with new'; }
                const v132 = this.constructor;
                const v133 = v132.bind(F129, F129, F129, F129);
                try { v133(v133, F129, f128, f128, a131); } catch (e) {}
                try { new v132(); } catch (e) {}
            }
            new F129();
        }
        const t126 = "Vre";
        t126[1] = "Vre";
        let v138;
        try { v138 = Math.expm1(Math); } catch (e) {}
        Number.isNaN(v138);
        Math.expm1();
        const v142 = Math.tanh();
        const v143 = Math.hypot();
        Float64Array.BYTES_PER_ELEMENT = Float64Array;
        function f146() {
            return f146;
        }
        new Uint16Array(f146);
        const v149 = new Int8Array(Int8Array);
        v149.buffer;
        try {
            v117.findLast();
        } catch(e152) {
            const t144 = e152?.constructor;
            t144();
        }
        const o178 = {
            n() {
                return this;
            },
            __proto__: v9,
            "f": 255,
            [v93](a157, a158, a159) {
            },
            next() {
                v14--;
                return this;
            },
            [522675525n](a163, a164) {
            },
            "c": v8,
            1073741824: Float64Array,
            /*
            __proto__: v114,
            */
            set e(a166) {
                return;
            },
            1: 255,
            9: v112,
            [2n](a169, a170, a171, a172) {
            },
            valueOf(a174, a175, a176, a177) {
                super.c **= v143;
                return f124;
            },
            4: "Vre",
        };
        return v142;
    }
    f124();
    eval();
    %OptimizeFunctionOnNextCall(f124);
    return 522675525n;
}
for (let v182 = 0; v182 < 5; v182++) {
    f119(Uint32Array, 2n, v182, v116);
}
