Array.__proto__ = this;
function f5(a6, a7) {
    this.c;
    return parseFloat | Array;
}
parseFloat[Symbol.toPrimitive] = f5;
const v12 = parseFloat(parseFloat);
const v13 = v12 >>> v12;
const v18 = Math.round("undefined");
let v19 = Math.acosh();
v19++;
const o26 = {
    [-352741132]: -352741132,
    set b(a24) {
    },
    get c() {
        return this;
    },
    "b": 2.220446049250313e-16,
};
function f28(a29, a30, a31, a32) {
    const v33 = a31 == a31;
    const o70 = {
        "g": "-9223372036854775808",
        get f() {
            return this;
        },
        "c": "entries",
        15: v18,
        "f": a32,
        [a31]: -8645,
        get h() {
            for (let i37 = 0;
                (() => {
                    let v39 = i37 < 3;
                    try {
                        super.o();
                    } catch(e41) {
                    }
                    v39 ||= v33;
                    [4096];
                    const o45 = {
                        3677: -128n,
                    };
                    return v39;
                })();
                i37++) {
                const v49 = ("entries").__proto__;
                const v50 = [1073741823,64,-192774235];
                v50.length = 127;
                const o53 = {
                    "arguments": v50,
                    "type": "function",
                };
                let v54;
                try { v54 = v49(this, this, this, v49); } catch (e) {}
                v54.__proto__;
            }
            function f56(a57, a58, a59) {
            }
            (typeof "entries" === "bigint") / f56;
            -352741132 >>> "bigint";
            const v66 = new Float32Array();
            class C69 extends v66.constructor {
                static [-9223372036854775808n];
            }
            return this;
        },
    };
    return o70;
}
const v71 = f28(10, "-9223372036854775808", -6, -8645);
v71[15] = v71;
f28(-6, "entries", -6, v71);
const v73 = f28(10, "entries", -6, 10);
try { Map.toString(); } catch (e) {}
new Map();
function F77(a79, a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    this.length = v73;
    const v83 = this?.__defineGetter__;
    try { new v83(v18, a82); } catch (e) {}
    this.constructor = f28;
    const v85 = this.constructor;
    let v86;
    try { v86 = new v85(); } catch (e) {}
    v86[15] = v86;
    typeof Float32Array;
    this.f = v73;
    class C90 extends WeakMap {
        536870887;
    }
}
const v91 = new F77();
v91.length = v13;
v91.length;
new F77(F77, v91, F77, v91);
