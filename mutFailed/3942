function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 255;
    } catch(e3) {
    }
    try {
        ("D")[0].substring().charCodeAt();
        new Uint16Array(10);
        this.b = 255;
    } catch(e11) {
    }
    try {
        this.c = 255;
    } catch(e12) {
    }
}
const v13 = new F0();
new F0();
new F0();
Uint8Array.d = v13;
new Uint8Array(229);
new Uint8ClampedArray(114);
new Uint8ClampedArray(2);
new Float64Array(3609);
function f36() {
}
[601759695];
const v38 = [1073741824,1073741823,1376142744,1073741825];
function f40(a41, a42, a43, a44) {
    function f46() {
    }
    f36();
    const v49 = new Int8Array();
    function f51(a52, a53) {
        const o57 = {
            p(a55, a56) {
            },
            10: 1073741824,
        };
        return o57;
    }
    f51();
    f51();
    v49.buffer;
    let v62 = 1000000000000.0;
    v62--;
    function F66(a68, a69, a70, a71) {
        if (!new.target) { throw 'must be called with new'; }
        this.c = a68;
    }
    const v72 = new F66(-2.0);
    const v73 = new F66(-1.093925554716035e+308);
    function f74(a75, a76) {
        for (let [i80, i81] = (() => {
                /Aabc|defmxyz{1,}?qMa{0,1}?/gvdis;
                return [0, 10];
            })();
            i80 < i80;
            ) {
        }
        return v38;
    }
    v73.toString = f74;
    v73 in v72;
    const t64 = [];
    t64.length += 1.0;
    %OptimizeFunctionOnNextCall(f46);
    class C94 extends Date {
        static 2544510523 = 1.0;
        1855;
        constructor(a96, a97) {
            for (const v98 in this) {
            }
            Math.atan2(v38, -4294967297);
        }
    }
    try { v38["find"](); } catch (e) {}
    for (const v104 in "1024") {
    }
}
for (let v105 = 0; v105 < 10; v105++) {
    f40(v105, v105);
}
%OptimizeFunctionOnNextCall(f40);
f40();
const v110 = new BigInt64Array(14);
function f113() {
    return Float64Array;
}
function f114(a115) {
    new Map();
}
Object.defineProperty(Uint8Array, "d", { configurable: true, get: f113, set: f114 });
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
new Uint8Array(4096);
gc();
110 <= 110;
110 + 110;
Int8Array.prototype = Int8Array;
new Int8Array(110);
const v128 = new Date();
try { v128.getUTCDay(); } catch (e) {}
let v130 = 127;
const v131 = v130++;
function f132(a133, a134) {
    function f135(a136) {
        new Array(5);
        return 257;
    }
    a134.constructor = f135;
    try { a133(BigInt64Array); } catch (e) {}
    a134.constructor(a134);
    return f132;
}
const v143 = new Promise(f132);
v143.constructor = f36;
try { v143.then(v110, v131); } catch (e) {}
+-1.0406565190769766e+308;
Date();
function f149(a150, a151) {
    return f149;
}
const v153 = new Uint8Array(v130);
function f154(a155, a156) {
    const o157 = {
    };
    o157.g = f149;
    return o157;
}
try { f154(v143, v143); } catch (e) {}
f154.arguments = f154;
for (let v159 = 0; v159 < 25; v159++) {
    const v160 = f154();
    v160.g = v160;
    v160.d = v160;
    Object.defineProperty(v160, v159, { enumerable: true, get: f154, set: f154 });
    const v164 = new Int8Array(8);
    Reflect.construct(Uint16Array, [v164]);
    v153[v160] = v160;
    f154 === Int8Array;
    const o173 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o173);
    "sync" == "sync";
    const o177 = {
        "execution": "sync",
    };
    gc(o177);
}
