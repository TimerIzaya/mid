function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f3(a4) {
        function f6(a7) {
            F0 >>= a7;
            try { a7.m(F0, -2, this, a7, this); } catch (e) {}
        }
        this.onmessage = f6;
        const v10 = Symbol.iterator;
        const o19 = {
            [v10]() {
                let v12 = 10;
                const o18 = {
                    next() {
                        v12--;
                        const v16 = v12 == a4;
                        const o17 = {
                            "done": v16,
                            "value": v12,
                        };
                        return o17;
                    },
                };
                return o18;
            },
        };
    }
    const v22 = [this];
    const o23 = {
        "arguments": v22,
        "type": "function",
    };
    new F0(f3, o23);
    try {
        this.c = -2;
    } catch(e25) {
    }
    try {
        this.h = -2;
    } catch(e26) {
    }
}
const v27 = new F0();
const v28 = new F0(v27, v27);
const v29 = new F0();
function f30() {
    const o41 = {
        ...1.7976931348623157e+308,
        [-2]: 1.7976931348623157e+308,
        __proto__: 256,
        [1.7976931348623157e+308](a34) {
            v27[3] = 1.7976931348623157e+308;
            a34[Symbol.search];
            super.f ||= 1.7976931348623157e+308;
            0 < 10;
        },
    };
    return o41;
}
f30.d = f30;
let v42 = -2;
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v28;
    } catch(e52) {
    }
    try {
        this.e = "bigint";
    } catch(e53) {
    }
    try {
        this.b = a51;
    } catch(e54) {
    }
}
new F46(f30, "bigint", "FN", "bigint");
const v56 = new F46("FN", "FN", "valueOf", "FN");
new F46(v56, "valueOf", v29, v29);
v42++;
-536870912 - -536870912;
class C62 {
    static g;
    static [-737];
    valueOf(a64, a65, a66) {
        return "ifs3";
    }
    #o(a71, a72, a73) {
        const v74 = v28 >> this;
        try { v28.n(-536870912, a71); } catch (e) {}
        super[v74];
        const v82 = new Uint8Array(16335);
        new Uint8ClampedArray(798, ...v82, eval());
        new BigUint64Array(241);
        const v90 = new Int32Array(8);
        const v93 = new BigUint64Array(-391056760, v90, BigUint64Array);
        return v93;
    }
}
new C62();
new C62();
new C62();
new Uint32Array(-536870912);
const v102 = new Uint16Array(128);
try { v102.filter(F0); } catch (e) {}
const v106 = new Uint8ClampedArray(6);
const v107 = v106?.findLastIndex;
let v108;
try { v108 = new v107(-737); } catch (e) {}
try { v108.fround(v102); } catch (e) {}
10000 - 10000;
Math.asinh(128);
Math.log(-23525);
