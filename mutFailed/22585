function f0() {
}
class C4 extends Set {
    #m(a6, a7) {
        let [v9,v10,,v11] = this;
    }
}
Object.defineProperty(C4, "constructor", { configurable: true, enumerable: true, value: f0 });
-16;
function f16() {
    return f16;
}
class C17 {
    constructor(a19, a20, a21) {
        const v22 = this.byteLength;
        const t15 = f16.constructor;
        t15("string", "string", v22);
    }
}
function f26(a27, a28) {
    +(a28 * a28);
    const v34 = +2.2250738585072014e-308;
    ++a27;
    Math.cos(2.2250738585072014e-308);
    -1306413326 / v34;
    return f16;
}
BigUint64Array.valueOf = f26;
new BigUint64Array(16);
for (let v39 = 0; v39 < 5; v39++) {
}
[0.3083488057663979,0.3083488057663979,0.3083488057663979];
const o42 = {
};
BigUint64Array[Symbol.toPrimitive] = f26;
try { new BigUint64Array(16, f0, 16); } catch (e) {}
const v48 = new BigUint64Array(0);
const v50 = 5 | 5;
const v52 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const o54 = {
    [v50]: 512,
    [0.3083488057663979]: v52,
    "b": "Woh",
};
try { Uint8ClampedArray.bind(5); } catch (e) {}
const v56 = new Uint8ClampedArray(5);
BigUint64Array | BigUint64Array;
const v58 = [-5.0];
Object.defineProperty(v58, Symbol.toPrimitive, { enumerable: true, value: Symbol });
const v62 = Symbol.toPrimitive;
v58[v62] = f0;
const v63 = C4.constructor;
try { new v63("Woh", v58); } catch (e) {}
new Uint32Array([1524942359,268435439,8,1,256,-11]);
[[v48,v56,BigUint64Array,[Uint8ClampedArray,Uint8ClampedArray,BigUint64Array,5]]];
function f73(a74, a75, a76) {
    return true;
}
f73.d = o42;
f73.d = v62;
f73.d = f73;
try { ("function").valueOf(); } catch (e) {}
const v80 = [188,true];
const o81 = {
    "arguments": v80,
    "type": "function",
};
for (let i84 = 0, i85 = 10;
    (() => {
        const v86 = i84 < i85;
        class C87 {
        }
        function f88(a89, a90, a91, a92) {
            let v93;
            try { v93 = a90.apply(a92, a90); } catch (e) {}
            return v93;
        }
        f88(i85, C87);
        %OptimizeFunctionOnNextCall(f88);
        return v86;
    })();
    i85--) {
}
new Worker(f73, o81);
