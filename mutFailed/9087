/b(a)\1C7/gvim;
const v1 = /(?<a>(?<b>(?<c>(?<d>.).).).)+/ud;
const v2 = /a\Bb/gvdi;
const v4 = 0.4821196898977056 + 0.4821196898977056;
let v5 = -718813.9122286614;
v5++;
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    let v9 = this;
    v9.h = a10;
    function f14(a15, a16) {
        function f17(a18, a19) {
            a18[5];
        }
        f17(a13);
        return v4;
    }
    a10.toString = f14;
    function f22(a23) {
        v9 *= a23;
        function f24(a25) {
            return a25;
        }
        class C26 extends f24 {
        }
        return v5;
    }
    const v28 = Symbol.toPrimitive;
    a12[v28] = f22;
    Symbol.constructor;
    const o30 = {
    };
    for (let v31 = 0; v31 < 10; v31++) {
        class C32 {
            #f;
            [v31];
        }
        new C32();
    }
    a11 >>> a11;
    a13 >>> a13;
    let v36;
    try { v36 = v9.propertyIsEnumerable(a12); } catch (e) {}
    v36 || v36;
    let v38 = a11--;
    const v39 = v2 ^ v28;
    v2["exec"](v38);
    Object.defineProperty(v28, "e", { configurable: true, value: v39 });
    const o42 = {
        "get": Symbol,
        "getOwnPropertyDescriptor": f14,
        "setPrototypeOf": Symbol,
    };
    new Proxy("exec", o42);
    v38--;
    try {
        const o46 = {
        };
        function f47(a48, a49) {
        }
        Math.expm1(Math);
        v9.e = a12;
    } catch(e52) {
    }
    try {
        v9.g = -1000000000.0;
    } catch(e53) {
    }
    try {
        v9.h = a10;
    } catch(e54) {
    }
}
new F8(v2, -1000000000.0, v2, 0.4821196898977056);
const v56 = new F8(v1, -1000000000.0, v1, 0.4821196898977056);
new F8(v56, -1000000000.0, v2, v5);
true || true;
class C60 {
}
const v61 = C60.name;
const v63 = new Uint8Array();
for (let v64 = 0; v64 < 625; v64++) {
    let v66 = undefined;
    const v67 = undefined ^ undefined;
    v67 * v67;
    const o72 = {
        "b": undefined,
        ...v63,
        n(a70, a71) {
            v66 = v67;
        },
    };
}
try { v61.toUpperCase(); } catch (e) {}
for (let v74 = 0; v74 < 5; v74++) {
    v74 + v74;
    let v76 = v74 / v74;
    v76 >> v76;
    function f78() {
        try { new Symbol(); } catch (e) {}
        const v81 = Symbol.toPrimitive;
        Symbol.for(v81.description);
        function f85() {
            const o88 = {
                m(a87) {
                    return f85;
                },
            };
        }
        const v89 = f85?.__lookupSetter__;
        v89.d = v74;
        v89.d = v89;
        const v90 = [];
        try {
            v90.some(v74);
        } catch(e92) {
            e92.stack;
        }
        try { new v89(Symbol); } catch (e) {}
        v81.description.codePointAt(C60);
        return Symbol;
    }
    v76[2] = v1;
    v76--;
    +(v76--);
    const v103 = f78();
    try { new v103(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f78);
}
