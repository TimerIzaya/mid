const v2 = new Uint32Array(64);
let v3 = 9;
new Float64Array(v3);
new Int16Array(3752);
class C9 {
    static a;
    static #d = v2;
    get a() {
        let v11;
        try { v11 = Uint32Array(this, v3, 3752); } catch (e) {}
        v11[1073741825] = Int16Array;
        super.d &= v11;
        return 64;
    }
    static o(a14, a15, a16, a17) {
        while (0 < 2) {
            super[v3] = a17;
            super.g;
            v3++;
        }
        return a14;
    }
}
new C9();
new C9();
const v25 = new C9();
class C26 {
    p(a28, a29, a30, a31) {
        a28[super.a];
        const o36 = {
            "maxByteLength": 2165,
        };
        const v38 = new SharedArrayBuffer(2165, o36);
        const v40 = new Int32Array(v38);
        return v40;
    }
    static #a;
}
new C26();
new v25();
new C26();
function f44() {
}
function f45() {
    return f44;
}
-520531413 >> -520531413;
-65536n + -65536n;
const v55 = Map.prototype;
const v56 = new Map();
try { v56.set(Map, -9513n); } catch (e) {}
try { new BigInt64Array(-9513n, f44, -9513n); } catch (e) {}
new v55(0);
let v62 = 1024;
let v63 = v62--;
v63++;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v62);
const v69 = v55 != 1;
v69 || v69;
if (v69) {
    try {
        new BigInt64Array(127);
    } catch(e73) {
    }
} else {
    var h = v69;
}
5 ^ 5;
const v80 = new BigUint64Array(5);
let v81;
try { v81 = v80.join(v62); } catch (e) {}
try { v81.replace(Int32Array, f44); } catch (e) {}
Int32Array.length;
-f44;
try {
    C9.f = 0;
} catch(e87) {
}
const v88 = new Int32Array(1);
v88[0];
v88[0] = v88;
new Int8Array(12);
const v93 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v94 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v95 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v95.join(-65536n); } catch (e) {}
function F97(a99, a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    const v102 = this?.__lookupGetter__;
    try { new v102(12); } catch (e) {}
    a100 + a100;
    try { a101.find(a99); } catch (e) {}
    try {
        this.d = a99;
    } catch(e106) {
    }
    try {
        this.b = a101;
    } catch(e107) {
    }
}
const v108 = F97?.constructor;
v108.length = v108;
let v109;
try { v109 = new v108(12); } catch (e) {}
v109.arguments;
new F97(Int32Array, 12, v94);
const v112 = new F97(v93, 5, v95);
v112.length;
const v114 = new F97(v93, 12, v93);
v114[65536];
const o117 = {
};
for (let v118 = 0; v118 < 25; v118++) {
}
