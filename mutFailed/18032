class C1 {
    constructor(a3) {
        for (let v4 = 0; v4 < 32; v4++) {
            -(v4 - v4);
            for (let v7 = 0; v7 < 5; v7++) {
                v7 / v7;
            }
            try { a3(); } catch (e) {}
        }
    }
}
new C1(536870889);
17987 % 17987;
9007199254740992 - 9007199254740992;
function f17() {
    return 9007199254740992;
}
Object.defineProperty(C1, "length", { configurable: true, enumerable: true, get: f17 });
new Float32Array(3223);
161 & 161;
new Uint8Array(161);
const v26 = [-65536,-432658450,256];
try { v26.reduce(9007199254740992); } catch (e) {}
const v29 = new Float64Array(v26);
v29[2] = v29;
class C30 {
    constructor(a32, a33) {
        function f34(a35) {
            return this;
        }
        const o38 = {
            "type": "function",
        };
        new Worker(f34, o38);
    }
}
new BigInt64Array(72);
new Int16Array(72);
const v44 = [1073741824,1073741823,1376142744,1073741825];
function f45(a46, a47, a48, a49) {
    try { a46.every(a49); } catch (e) {}
    a48++;
    let v52 = a48 * a48;
    v52--;
    const o54 = {
    };
    o54.f = o54;
    const v56 = o54.__proto__?.__defineSetter__;
    try { new v56(a47, 72); } catch (e) {}
    return f45;
}
f45.length = f45;
for (let v58 = 0; v58 < 10; v58++) {
    f45(v44, v58, v58);
}
f45();
new Int16Array(-65537);
-39;
new Float64Array(39);
let v69;
try { v69 = Float32Array(v29, -65537, C30); } catch (e) {}
Promise.reject(Promise);
function f72(a73) {
    const o74 = {
    };
    return o74;
}
try { f72(794); } catch (e) {}
const v76 = new Float32Array(1975);
v76.c = v76;
const v80 = new v69();
const v83 = new Int32Array(87);
v83[17];
v83.lastIndexOf(v80, -2147483647);
var b = -2147483649n;
