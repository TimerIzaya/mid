try { new Date(57357n, -30756n, -268435456n, Date, 57357n, -30756n, -268435456n, 57357n, Date); } catch (e) {}
const v5 = new Date();
try { v5.setMilliseconds(-30756n); } catch (e) {}
try { new Float64Array(Float64Array, Float64Array, -30756n); } catch (e) {}
Float64Array.BYTES_PER_ELEMENT = Float64Array;
function F10() {
    if (!new.target) { throw 'must be called with new'; }
}
const o13 = {
    "maxByteLength": 10,
};
const v14 = new Float64Array(351171622);
try { v14.values(); } catch (e) {}
try { v14.filter(351171622); } catch (e) {}
new Uint8Array(-60107, F10, Uint8Array.name, -268435456n);
Uint16Array.name = Uint16Array;
const v23 = new Uint16Array(128);
const v24 = v23?.constructor;
const v25 = v24?.constructor;
try { v25.call(Uint8Array); } catch (e) {}
let v27;
try { v27 = new v25(-60107); } catch (e) {}
try { new v27(); } catch (e) {}
let v29;
try { v29 = new v24(128, Float64Array, 128); } catch (e) {}
v29[45] = v29;
4.0 >> 4.0;
-4.0;
let v34 = Math.atan(4.0);
let v35 = v34++;
v35++;
