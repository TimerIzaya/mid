const v5 = new BigUint64Array(3273);
new BigUint64Array(3273, 187, 3273);
try {
const t0 = -1.4123560386251002e+308;
t0(187);
} catch (e) {}
try {
    v5.with(3273, "string");
} catch(e12) {
}
const v13 = new BigUint64Array(187);
const v16 = new Float64Array(2062);
const o20 = {
    "execution": "sync",
    "type": "minor",
};
gc(o20);
class C22 extends Float64Array {
    static #g;
    n(a24, a25, a26) {
        super.b = this;
        const v29 = v16["includes"](a25, a24);
        try { v29(v29, this, v29, v29); } catch (e) {}
        new BigUint64Array(v13, 2062, 187);
        return BigUint64Array;
    }
    4 = 3273;
    #a = 9.656322642808291;
    f = v13;
}
new C22();
new C22();
new C22();
const o36 = {
    ..."1p",
};
new Float64Array(3239);
new Int32Array(3417);
new Int8Array(7);
const v46 = [o36,o36,o36,o36];
const v48 = 28621 + 28621;
function f49() {
    return v46;
}
const o51 = {
    ...o36,
};
o51.length = v48;
Reflect.apply(f49, v46, o51);
