function f0() {
    const o11 = {
        "b": 119023808,
        "a": "-4294967296",
        "h": f0,
        p(a5, a6) {
            try { new a6(a6, "-4294967296", 119023808, "-4294967296"); } catch (e) {}
            this[a6] = 119023808;
            a6[Symbol.isConcatSpreadable];
            return 119023808;
        },
        "d": "-4294967296",
    };
    return o11;
}
f0();
f0();
f0();
let v15 = -2;
const v16 = [];
const v17 = /((((.).).).)?/gvdimy;
const v18 = /C/gudm;
const v19 = /w/gmy;
v19.b = v19;
let v22;
try { v22 = Uint32Array(Uint32Array, v15, v17); } catch (e) {}
new v22(1391);
let v24 = 3398;
for (let i26 = 0; i26 < 6; v15++) {
    try {
        v18.dotAll = v22;
    } catch(e32) {
    }
}
const v33 = ~v24;
Uint32Array.name = v19;
const v35 = new Uint32Array(v24);
255 * 255;
v24 += v33;
const v39 = v16[1];
try {
    v35.forEach(v39, v39);
} catch(e42) {
}
new Int16Array(7);
new Uint16Array(3668);
new Int32Array(964);
class C64 {
    static a;
    static {
        this >> this;
        this[6];
    }
    static m(a69) {
        gc();
    }
}
const v72 = new C64();
const v73 = new C64();
new C64();
let v76;
try { v76 = v73.getMonth(1000); } catch (e) {}
v76 % v72;
try {
    C64();
} catch(e79) {
}
