const v4 = new Date();
("entries").toUpperCase();
Symbol.toPrimitive;
const v10 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v10.copyWithin("f", v4); } catch (e) {}
v10[27] = 27;
const t6 = "TKa6Q";
t6[4] = "TKa6Q";
const v16 = 0 >> 0;
const v17 = v16 - v16;
v17 + v17;
try { ("e").charAt("1496700085"); } catch (e) {}
function f21(a22, a23) {
    return a23[3];
}
f21(v17, v10);
f21("e", 27);
const o32 = {
    get a() {
        const o30 = {
        };
        gc();
    },
};
const t24 = "entries";
t24.prototype = Uint32Array;
new Uint32Array(3522);
try { new Int32Array(Int32Array, Int32Array, "e"); } catch (e) {}
const v39 = ([]).constructor;
try { v39.call(f21); } catch (e) {}
const v41 = new v39();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try { a44.findLast(this); } catch (e) {}
    this.c = a44;
}
new F42(v41);
new Int32Array(255);
~6;
const v52 = new Uint32Array(6);
const v54 = ("TKa6Q").hasInstance;
Symbol.for(v54.description);
const v60 = new Uint32Array(4096);
v60[3362] = v60;
const v63 = new Uint8Array(3521);
v52 || false;
const v66 = v63.includes(false);
v66 || v66;
function f68(a69, a70) {
    return a70;
}
const v73 = [v54];
const o74 = {
    "arguments": v73,
    "type": "function",
};
(6).arguments;
new Worker(f68, o74);
