function f0() {
}
function f1() {
    return f0;
}
let v3 = 0;
do {
    const v4 = v3.__proto__;
    try { v4.setTime(f1); } catch (e) {}
    try {
        f1();
    } catch(e7) {
    }
    v3++;
} while (v3 < 4)
const v13 = [274138073,-2147483649,-536870912,2147483647];
const v14 = [268435439,127,-11,4096];
const v15 = [16196,-256,-50655,-65313,24500,-1937231847,-2147483649,-2];
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "h", { configurable: true, value: a18 });
    Object.defineProperty(a18, "sin", { writable: true, configurable: true, enumerable: true, value: a19 });
    function f21() {
        return f0;
    }
    function f22(a23) {
        function F25(a27, a28, a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            const v31 = this.constructor;
            try { new v31(154, a30, 154, a28); } catch (e) {}
            -a28;
            a30 <= a30;
        }
    }
    Object.defineProperty(a19, Symbol.toPrimitive, { get: f21, set: f22 });
    try { a18.sin(f1, this, a19, this); } catch (e) {}
    try {
        this.h = v3;
    } catch(e38) {
    }
    try {
        this.c = a19;
    } catch(e39) {
    }
}
new F16(v15, v15, 1000000000000.0);
const v41 = new F16(v13, v14, -465817.17650274944);
new F16(v15, v14, 1000000000000.0);
function F43(a45) {
    if (!new.target) { throw 'must be called with new'; }
    let v47 = 0;
    do {
        v41[v14];
        v47++;
    } while (v47 < 3)
    const o55 = {
        "b": 1e-15,
    };
    delete o55.b;
}
new F43(F43);
new F43();
