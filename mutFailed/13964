function f3(a4, a5) {
    const o12 = {
        "e": a5,
        set d(a7) {
            let v8;
            try { v8 = this.unregister(this, a7, this, a4, this); } catch (e) {}
            try {
                this.fuck(1858349873n, v8, "NEGATIVE_INFINITY");
            } catch(e11) {
            }
        },
        "c": 1859483433n,
        "d": a5,
        "h": -13n,
    };
    class C13 {
    }
    const v14 = new C13();
    class C15 extends C13 {
        constructor(a17, a18, a19, a20) {
            if (v14) {
            }
        }
    }
    return o12;
}
const v21 = f3(1859483433n, 1859483433n);
const v22 = f3(1859483433n, -13n);
const v23 = f3(1858349873n, 1858349873n);
class C24 extends v23 {
    static #f;
    constructor(a26, a27, a28, a29) {
        super(a26, a27);
        a27 &&= 1858349873n;
        const o33 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o33);
    }
}
const v35 = new C24(f3, 1858349873n, C24, v21);
const v36 = new C24(v22, 1858349873n, v22, v21);
const v37 = new C24(-13n, 1858349873n, v36, -13n);
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a43;
    } catch(e44) {
    }
}
new F38(1858349873n, 1858349873n, v37, v35);
new F38(-13n, 1858349873n, v22, v36);
new F38(-13n, -13n, v23, v36);
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor;
    try { new v23(this); } catch (e) {}
    a51++;
    this.g = a50;
}
const v55 = new F48();
const v57 = new Set();
v57.__proto__;
const v60 = new BigUint64Array();
try { v60.toLocaleLowerCase(v23, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
try { ("NFKD").localeCompare(v23); } catch (e) {}
const t67 = v55.constructor;
new t67();
