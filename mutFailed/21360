function f0() {
    const o8 = {
        [-46415]: -46415,
        "d": "size",
        "c": "set",
        4: "size",
        "e": -46415,
        ..."size",
        ["size"](a5, a6) {
            this.__proto__;
            return "size";
        },
        "h": "size",
        ["size"]: -46415,
        "g": -46415,
    };
    return o8;
}
const v9 = [];
-v9;
class C13 {
    static {
        this.f += "MAX_SAFE_INTEGER";
    }
    static #a = "undefined";
}
f0();
f0();
f0();
new WeakMap();
[-9007199254740992,-256,-1073741824];
[-128,3,-65536,9007199254740992];
[65536,-2147483648,65535,-1024];
try {
} catch(e27) {
}
function f30(a31, a32, a33, a34) {
    a31.BYTES_PER_ELEMENT = a31;
    new Float32Array(1);
    function f38() {
        for (let [i41, i42] = (() => {
                switch (f38) {
                }
                return [0, 10];
            })();
            i41 < i42;
            i42--) {
        }
        return f38;
    }
    const v49 = 3 | a32;
    v49 - v49;
    const v51 = a31 / a31;
    const v52 = v51 % v51;
    a32 < a31;
    a33 >>> a33;
    const o58 = {
        getOwnPropertyDescriptor(a56, a57) {
            return 3;
        },
    };
    return v52;
}
for (let v59 = 0; v59 < 625; v59++) {
    f30(Uint8Array, 398542754, v59);
}
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
F64(v9, Set, 3, 65536);
function F74(a76) {
    if (!new.target) { throw 'must be called with new'; }
}
const v77 = new F74("object");
for (const v79 in "findIndex") {
    v77.d = v79;
    function f80(a81, a82, a83, a84) {
        ("find").substr(a82);
        return a81;
    }
}
const t81 = "a";
t81.__proto__ = ("object").__proto__;
