class C3 {
    #n(a5, a6) {
        try { ("subarray").trimEnd(); } catch (e) {}
        let v9 = 4;
        let v10 = a6 % v9;
        a5 && v10;
        --v10;
        v9--;
        return a6;
    }
}
new C3();
new C3();
new C3();
[36495,-15];
[-8];
[-1238895943,129,1073741823,-3,2147483648];
function f20() {
    const o23 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o23;
}
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.constructor;
    try { new v26(); } catch (e) {}
}
const v28 = new F24();
function f29() {
    return f20;
}
function f30(a31) {
    new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
}
Object.defineProperty(v28, "constructor", { writable: true, configurable: true, get: f29, set: f30 });
const v35 = v28?.constructor;
let v36;
try { v36 = v35(); } catch (e) {}
v28.length;
const o41 = {
    "type": "function",
};
o41.arguments = o41;
const v42 = new Worker(Date, o41);
v42.getMessage();
const v44 = new F24();
const v45 = [v44,v44,v44,v44,v44];
const v48 = new Uint32Array(1000);
const v49 = delete v45.length;
("cbrt").toLocaleUpperCase(v36, v49);
try { v49["cbrt"](v48, Uint32Array, v28); } catch (e) {}
f20();
f20();
const v55 = f20();
Number.isNaN(NaN);
65537 >> 65537;
536870912 + 536870912;
const v67 = [-42643,-2,-327102325,-1073741824,5];
function f68(a69, a70) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
class C73 {
}
function f74(a75, a76, a77, a78) {
    function f80() {
        return a78;
    }
    ("number").slice([a75,a75]);
    %OptimizeFunctionOnNextCall(f80);
    function F84() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F84();
    return arguments;
}
function f87() {
    const v90 = [1073741824,1073741823,1376142744,1073741825];
    const v92 = ("Vre").toLocaleUpperCase;
    try { v92(v92, -4294967297n, F24, v90); } catch (e) {}
    const v94 = ("Vre").fixed();
    let v95;
    try { v95 = v94.replace(v92, "g"); } catch (e) {}
    return v95;
}
f74.toString = f87;
for (let v96 = 0; v96 < 10; v96++) {
    f74(f74, f74, v96, v96);
}
class C99 {
}
const v100 = new C99();
v100.BYTES_PER_ELEMENT = v100;
function f101(a102, a103) {
    let v104 = a102.BYTES_PER_ELEMENT;
    v104++;
    class C106 {
    }
    const v107 = C106.length;
    v107 !== v107;
    try { ("0x2I").sup(); } catch (e) {}
    class C112 {
    }
    C112[Symbol.toPrimitive] = f20;
    try { C112(); } catch (e) {}
    const v116 = C112?.call;
    v116.length;
    try { v116(null); } catch (e) {}
    class C119 extends C112 {
        constructor(a121, a122, a123, a124) {
        }
    }
    C119.e = C119;
    try { C119(NaN, v100, NaN, v55); } catch (e) {}
    const v126 = a103?.propertyIsEnumerable;
    try { v126(C112); } catch (e) {}
    let v128;
    try { v128 = v126(); } catch (e) {}
    class C129 {
    }
    C129.name = C129;
    try { C129.call(); } catch (e) {}
    const v131 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v131.includes(v128); } catch (e) {}
    class C133 {
    }
    try { C133(); } catch (e) {}
    try { C133.apply(1.7976931348623157e+308, f101); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C133[Symbol.replace] = v131;
    const v139 = [];
    Object.defineProperty(v139, Symbol.toPrimitive, { configurable: true, value: f101 });
    try { v139.findLast(1.7976931348623157e+308); } catch (e) {}
    function f144(a145, a146) {
        const o147 = {
            "f": a146,
            [a145]: -12,
        };
        return o147;
    }
    function f148(a149, a150) {
        let {"d":v151,"f":v152,"g":v153,} = a150;
        C129[a150] *= v152;
        return v36;
    }
    f144.toString = f148;
    try { f144.toString(); } catch (e) {}
    let v155;
    try { v155 = v139.with(v139, v139); } catch (e) {}
    const v157 = new Float64Array(v139, v155);
    const v158 = new Float64Array(v157, a102, v155);
    v158.values().next();
    return v158;
}
f101.name;
f101.length = f101;
%PrepareFunctionForOptimization(f101);
f101(Uint16Array, v100).length;
%OptimizeFunctionOnNextCall(f101);
f101(v100, v100);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v168 = undefined;
const o169 = {
    __proto__: undefined,
};
o169.h = Symbol;
o169.h = o169;
v168 = v67;
let v171;
try { v171 = BigInt64Array(4.0, v168); } catch (e) {}
try { v171.lastIndexOf(BigInt64Array); } catch (e) {}
