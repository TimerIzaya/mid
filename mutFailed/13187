new Date();
try { ("10").trimLeft(); } catch (e) {}
4 >>> 4;
536870888 < 536870888;
function f11(a12, a13, a14) {
    try { a14.blink(); } catch (e) {}
    const o22 = {
        ["10"]: "8",
        8: a13,
        __proto__: Date,
        [-2]: -2,
        n(a17, a18, a19, a20) {
            try {
                const t13 = "10";
                t13.toString = a19;
            } catch(e21) {
            }
            return "10";
        },
        [a14]: a12,
        "a": "10",
        ..."8",
    };
    return o22;
}
const v23 = f11("8", "10", "10");
f11("10", "8", "10");
f11("qKYP2", "10", "8");
let v26 = -29914;
v26--;
-9223372036854775807 - -9223372036854775807;
try { Math.asinh(v23); } catch (e) {}
const v34 = Math.expm1(Math);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this?.constructor;
    try { new v37(); } catch (e) {}
    this.h = 9007199254740991;
}
const t39 = "10";
const v40 = new t39();
const o43 = {
    set h(a42) {
    },
    __proto__: v40,
};
let v44 = 10;
v44++;
[-4294967297,-1130849564,268435440];
[7];
const v49 = [14,34917];
try { v49.sort(v49); } catch (e) {}
const v51 = [39028];
v51.g = v51;
const v52 = [531384559];
v52.g = v52;
[3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f55(a56, a57) {
    const o59 = {
        ...a56,
        get d() {
            return this;
        },
    };
    return f55;
}
const v60 = f55();
v60.a = v60;
f55();
new BigUint64Array();
for (let [i67, i68] = (() => {
        10 >> 10;
        return [0, 10];
    })();
    i67 < i68;
    i67++) {
}
const v77 = [4294967297];
-15n - -15n;
try { new Float32Array(-15n, Date, Float32Array); } catch (e) {}
new Float32Array(10);
const v88 = new Uint8Array(12);
try { v88.slice(BigUint64Array, v88); } catch (e) {}
1 >> 1;
try { Uint32Array.bind(v34); } catch (e) {}
const v94 = new Uint32Array(1);
v94[0];
("-4294967295")[3];
class C100 {
    static {
        try { this.call(10); } catch (e) {}
        super[super.b];
        v77[-15n] ^= 10;
        ~536870887;
        const v109 = BigUint64Array * 536870887;
        v109 ** v109;
        +(BigUint64Array - v109);
        536870887 << BigUint64Array;
        for (const v114 of "-4294967295") {
            try { v114.italics(); } catch (e) {}
        }
    }
}
