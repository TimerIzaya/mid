const v0 = [536870889,536870888,-2147483647,1666922579,64,-3,0,-128,536870887,64];
function f1(a2) {
    const v3 = v0 !== a2;
    const v5 = [[]];
    const v7 = new v3();
    const v8 = new v3(v5);
    const v9 = new v3(v8);
    const v12 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v14 = [1073741824,1073741823,1376142744,1073741825];
    function f16(a17, a18, a19, a20) {
        try { a17.toLocaleString(); } catch (e) {}
        const v22 = a17?.constructor;
        let v23;
        try { v23 = v22(); } catch (e) {}
        try { v22(); } catch (e) {}
        const v26 = arguments.length;
        Object.defineProperty(v7, "e", { configurable: true, enumerable: true, value: f16 });
        const v28 = v8["entries"](a19, ...v9, BigUint64Array, ..."entries", a18, v26);
        new Float32Array();
        class C32 {
        }
        class C33 {
        }
        const v35 = Symbol.toStringTag;
        v8[v35] = v35;
        function f36() {
            let v38;
            try { v38 = ("Vre").charAt(4096); } catch (e) {}
            try { v38.lastIndexOf("Vre", a17); } catch (e) {}
            let v40;
            try { v40 = ("Vre").codePointAt(v12); } catch (e) {}
            v40 - v40;
            v40 ^ v40;
            let v43 = Float64Array;
            v43 = a18;
            let v44 = v12.length;
            const v45 = v44++;
            try {
            } catch(e46) {
            }
            const o74 = {
                268435439: v0,
                ..."e",
                n(a48, a49) {
                    return a49;
                },
                m(a51) {
                    return v45;
                },
                m(a53) {
                    return Map;
                },
                [f36]() {
                },
                ["entries"](a56, a57) {
                },
                valueOf(a59, a60) {
                    return a59;
                },
                get h() {
                    return v12;
                },
                [v14](a63, a64, a65) {
                },
                "toPrimitive": v23,
                get f() {
                    return this;
                },
                [-4294967297n](a68, a69, a70, a71) {
                    eval(a70);
                },
            };
            return v8;
        }
        f36();
        const v77 = Array();
        let v78;
        try { v78 = v77.findLast(f16); } catch (e) {}
        v77.unshift("entries", v28, "entries", v78);
        let v81;
        try { v81 = Int8Array.of(); } catch (e) {}
        try { v81.join(v5, v81); } catch (e) {}
        const v83 = new Int8Array(v0);
        v83.c = v83;
        const v85 = v83.buffer.slice();
        try { Int32Array(v85, arguments, -4294967297n); } catch (e) {}
        function f88(a89, a90, a91, a92) {
            return a91;
        }
        const v93 = new Int32Array();
        const v94 = v93[3];
        v94 + v94;
        for (let v96 = 0; v96 < 5; v96++) {
        }
        try { v14["find"](..."find", a20, ...v0, ...v14, ...522675525n); } catch (e) {}
    }
    return v7;
}
v0.toString = f1;
const v99 = [-33502,10000,9007199254740991];
const v100 = [65535,-256,887775691,536870887,-536870912,7];
function f101(a102, a103) {
    1940694780n == v100;
    return v99;
}
v100[Symbol.toPrimitive] = f101;
const v109 = 462.1323655609567 | 462.1323655609567;
function f112(a113, a114, a115, a116) {
    a114.valueOf = f112;
    a114[7] = a114;
    a115--;
    const o123 = {
        get g() {
            let v118 = this;
            Object.defineProperty(v118, "toString", { value: f1 });
            v118.c = v118;
            const v119 = delete v118[v118];
            const o120 = {
                "h": a115,
                "a": v119,
            };
            o120.h;
            v118 += a114;
            v119 & a113;
            return a115;
        },
        "b": v99,
        7: a116,
        "c": a114,
        "f": v0,
    };
    function f124() {
        function F125(a127) {
            if (!new.target) { throw 'must be called with new'; }
            const v128 = this.constructor;
            const v129 = v128.bind(F125, F125, F125, F125);
            try { v129(); } catch (e) {}
            try { new v128(); } catch (e) {}
        }
        return F125;
    }
    o123[Symbol.toPrimitive] = f124;
    return o123;
}
Object.defineProperty(f112, "g", { writable: true, enumerable: true, value: f101 });
f112.g = f112;
const v134 = f112(v99, v0, 462.1323655609567, v0);
const v135 = f112(v99, v0, 2.220446049250313e-16, v100);
function f136() {
    delete v135?.c;
    new Int8Array(268435456);
    return Symbol;
}
v135[Symbol.toPrimitive] = f136;
v135.c = v135;
const v143 = f112(v100, v99, -823.6071918822067, v0);
[-7.215788357640842,-3.0,-Infinity,-3.0,0.5593207428126572,-1000000000.0,-1000000000.0,-2.2250738585072014e-308,-1.0];
const v145 = [-11.126221526067638];
const v146 = [-Infinity,-1000000.0,-964229.7889241329];
const v147 = [1000.0,7.013617100191173,-351.0818852767976,0.6726521994945021,0.0654548428416345,0.0,357.95756141696074,-114535.71398965968];
const v148 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
const v149 = [v148];
[v146,v147,v149,v149,v148];
[v147,v148,v148];
1000000000000.0 - 1000000000000.0;
let v155 = 4.9807369083218855;
v155++;
function f157() {
    return v155;
}
function F158(a160, a161, a162) {
    if (!new.target) { throw 'must be called with new'; }
    const v163 = this.constructor;
    try { new v163(a161, a160, a162); } catch (e) {}
    a162 + a162;
    try {
        this.b = v148;
    } catch(e166) {
    }
}
F158.arguments;
const v168 = new F158(1000000000000.0, v149, 0.0746389278020293);
v168.length = v168;
v168.length = v168;
new F158(0.0746389278020293, v148, 0.0746389278020293);
class C170 extends F158 {
    512 = v148;
}
C170.prototype = C170;
new C170();
new C170();
new C170();
-1e-15 ^ -1e-15;
const v179 = 1073741823 & 1073741823;
v179 + v179;
const v181 = [0.7300869739585303,-1.7272281766467668,-799903.9588451695,-1e-15,1000.0];
function f182(a183, a184, a185) {
    a185[Symbol.toPrimitive] = f182;
    a183.c = a183;
    const o193 = {
        "g": v181,
        ...v99,
        valueOf(a189, a190) {
            try {
                v99.g = Promise;
            } catch(e192) {
            }
            return a185;
        },
        __proto__: v99,
        "b": v145,
        ...a185,
        "a": 2.220446049250313e-16,
    };
    o193[6] = o193;
    return o193;
}
const v194 = f182(v135, v0, v134);
v194[0];
const v196 = f182(v143, v99, v143);
try { v196.at(v194); } catch (e) {}
f182(v135, v181, v135);
const v202 = new Float64Array(203);
BigInt64Array.prototype = BigInt64Array;
const v204 = new BigInt64Array();
v204.p19 = v109;
const v205 = v204?.constructor;
try { new v205(v204, v204, f112); } catch (e) {}
new Float32Array(v202);
for (let v208 = 0; v208 < 25; v208++) {
    ("p")[0];
    v204["p" + v208] = v208;
}
for (let v212 = 0; v212 < 5; v212++) {
    v204["p" + v212] = v212;
}
