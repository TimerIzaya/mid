const v1 = [5,-9,-1941087174,8,4294967296,4294967296,4294967295];
let v2 = [2147483649,-1568492496,1073741824,-45060,-2147483647];
function f3() {
    v2 = v1;
    let v5;
    try { v5 = ("toString").blink(); } catch (e) {}
    function F7(a9) {
        if (!new.target) { throw 'must be called with new'; }
        a9.f = a9;
        const v10 = v5.constructor;
        try { v10("toString"); } catch (e) {}
        const v12 = a9[5];
        v12 == v12;
        this.d = "message";
    }
    new F7("message");
    return false;
}
v2.valueOf = f3;
const v15 = [-9223372036854775808,58777,2];
v15[2] = v15;
-1343577695 === -1343577695;
Int16Array[v2.isConcatSpreadable] = f3;
const v24 = new Int16Array(8);
let v25;
try { v25 = v15.concat(8, v24, Int16Array, v2, v24); } catch (e) {}
const v26 = f3?.filter;
try { new v26(v1); } catch (e) {}
let v29 = new WeakSet();
v29 = v25;
const v32 = new BigUint64Array(7);
try { v32.filter(268435439); } catch (e) {}
const v36 = new BigUint64Array(256);
v36[121];
5 + 5;
let v41;
try { v41 = Uint8ClampedArray.from(WeakSet); } catch (e) {}
new Uint8ClampedArray(v41);
0 - 0;
JSON.a = JSON;
let v48 = v2--;
v48--;
try {
    JSON.a = v48;
} catch(e50) {
}
const t46 = false;
new t46(0);
class C54 extends BigUint64Array {
    f;
    #g;
    g = v36;
}
new C54();
new C54();
const t55 = 268435439;
const v57 = new t55();
v57.f = v57;
const t58 = 536870888;
new t58(2052);
const v62 = new Float64Array(Float64Array);
const v63 = v62.includes(5);
v63 && v63;
