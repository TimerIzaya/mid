let v0 = 2147483647;
class C3 {
    #p(a5, a6, a7, a8) {
    }
    static #o(a10) {
        const v13 = [723.7929036737096,-1.7976931348623157e+308,-600.8221434718189,300.34554048893665,-1.0,3.0,0.3604916805537314,1000.0];
        function f15(a16, a17) {
            v13.length %= 2136873598;
            return a16;
        }
        f15(f15(2136873598, 2136873598), v13);
        Math.cos(a10);
        let v23 = --v0;
        const v24 = "z" % 1.0;
        const v25 = v0 << -5768;
        v23++;
        -v25;
        -5768 && v24;
        return -5768;
    }
}
const v29 = new C3();
const v30 = new C3();
const v31 = new C3();
function f32(a33, a34, a35) {
    const o43 = {
        n(a37, a38, a39) {
            536870889 instanceof C3;
            return a38;
        },
        ["z"]: v30,
        "e": v30,
        __proto__: C3,
        get f() {
            try {
                a34.a = a35;
            } catch(e42) {
            }
            return v30;
        },
    };
    return o43;
}
const v44 = f32("z", v31, C3);
const v45 = f32(C3, "z", v44);
const v46 = f32(v30, v29, v45);
function F47(a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = new Float32Array(6);
    const v57 = new Int32Array(8);
    v57.set(v54);
    try {
        this.b = a51;
    } catch(e59) {
    }
    try {
        this.h = v46;
    } catch(e60) {
    }
    try {
        this.a = v29;
    } catch(e61) {
    }
}
const v62 = new F47(v45, v0, v45);
new F47(f32, C3, v45);
new v31(v62, v44, v46);
function F65() {
    if (!new.target) { throw 'must be called with new'; }
    function f67(a68, a69) {
        const o70 = {
        };
        return o70;
    }
    new Uint8ClampedArray(127);
    Date.parse(([-Infinity,1000000000.0,Infinity,-1e-15,14.557700682017867,-1.7976931348623157e+308,-4.0,6.029322461126224,-2.220446049250313e-16]).toString());
    const v78 = f67();
    function f79() {
        return this;
    }
    const v82 = new Float32Array(218);
    for (const v83 of v82) {
        const v84 = v83 >>> v83;
        v84 <= v84;
        Object.defineProperty(v78, Float32Array, { configurable: true, enumerable: true, get: f67, set: f79 });
    }
}
const v86 = new F65();
const v87 = v86.constructor;
const v88 = new v87(v87, v87, v86, F65, v86);
new v88();
