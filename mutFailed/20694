function F2(a4, a5, a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
}
const v8 = new F2();
const v9 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C10 {
}
const v12 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v13 = [601759695];
function f15(a16, a17, a18, a19) {
    function f20() {
        let v23 = Float64Array;
        v23 = v23;
        b = v13;
        v9.length;
        try {
            v9.forEach(a17);
        } catch(e26) {
        }
        const v27 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v29 = Symbol.toPrimitive;
        const o35 = {
            toString(a31, a32) {
                const v33 = a19 && a17;
                a31 *= v29;
                v33 <= v27;
                return f20;
            },
        };
        const o56 = {
            "c": -4294967297n,
            [522675525n](a38, a39) {
            },
            "c": v13,
            valueOf(a41, a42) {
                return a41;
            },
            "b": -4294967295,
            [-4294967297n](a44, a45, a46, a47) {
            },
            "e": -268435456,
            "maxByteLength": Symbol,
            "arguments": v12,
            ...v8,
            [v29]() {
            },
            "type": v23,
            ..."Vre",
            valueOf(a50, a51) {
                return a18;
            },
            ...a17,
            4: 522675525n,
            "c": 1000,
            "type": "Vre",
            toString(a53, a54, a55) {
                return C10;
            },
            5: -4294967295,
            6: -268435456,
        };
        v29 = v23;
        new Float32Array(1334);
        new v23(3);
        new Uint16Array(1334);
    }
    f20();
    %OptimizeFunctionOnNextCall(f20);
    return v12;
}
new Uint16Array(1000);
const v70 = new Uint32Array(651);
new Uint8ClampedArray();
function f76(a77, a78) {
    Number(a77);
    return a78;
}
f76();
const v81 = new Int16Array(1000);
const v83 = new WeakSet();
class C85 {
    static set d(a87) {
        super.join();
    }
}
const v91 = new Uint16Array(255);
v83.b <<= 1000;
try { v91.findLast(3.0, v70); } catch (e) {}
v8.buffer;
v81.slice().transfer();
