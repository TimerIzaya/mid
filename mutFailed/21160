class C4 {
}
const v5 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
const v6 = /(?:a*)+q(?<a>.)/guds;
v6.dotAll = v6;
function f7(a8) {
    const v9 = v5.constructor;
    try { v9.isArray(v6); } catch (e) {}
    a8.constructor.$2.replaceAll(C4, 536870887n);
    return 536870887n;
}
function f17() {
    return 54757n;
}
[7.683425359647416];
[-396.38411721067973,Infinity,-533181.524859677,866090.7619653847,0.27447004974995093];
[69.10792716490573,-9.262553355066586,-8.745094481698374,0.0433283861471675];
const v24 = [];
Object.defineProperty(v24, 1, { writable: true, configurable: true, value: v24 });
const v25 = [v24];
class C27 extends Map {
}
const v28 = new C27();
const v29 = new C27(v25);
const v30 = new C27(v29);
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v34 = new Uint32Array(v29, v24);
function f35() {
    return f7;
}
function f36(a37) {
    function f38(a39, a40, a41, a42) {
        function f44() {
            return arguments;
        }
        const v46 = new Int8Array();
        v46.buffer;
        %OptimizeFunctionOnNextCall(f44);
        ("find").codePointAt(f38);
        return arguments;
    }
}
Object.defineProperty(v34, "constructor", { configurable: true, get: f35, set: f36 });
let v50 = -4294967297n;
v50--;
const v52 = [601759695];
function f53() {
    function f54(a55, a56) {
        function f57() {
        }
        return v52;
    }
    return f54;
}
function f58(a59) {
    f36(v24);
}
Object.defineProperty(v52, "constructor", { writable: true, enumerable: true, get: f53, set: f58 });
const v61 = [1073741824,1073741823,1376142744,1073741825];
function f62(a63, a64, a65, a66) {
    a63.constructor = f53;
    const v67 = a63.constructor;
    v52["pop"]();
    try { v67(v67); } catch (e) {}
    try { v67(); } catch (e) {}
    const v73 = arguments.length;
    Object.defineProperty(v28, "e", { configurable: true, enumerable: true, value: f62 });
    v29["toString"](a65, ...v30, BigUint64Array, ..."toString", a64, v73);
    function f76() {
        const v78 = ("Vre").charAt();
        try { v78.lastIndexOf(); } catch (e) {}
        ("Vre").codePointAt();
        v32.length;
        try {
            v61.forEach();
        } catch(e83) {
        }
        const o111 = {
            "c": v50,
            "EPSILON": v52,
            valueOf(a85, a86) {
                const t81 = [-55841,536870912,65536,-1024,886617036,3];
                t81.length = 1;
                const v89 = [601759695];
                const v90 = [1073741824,1073741823,1376142744,1073741825];
                function f91(a92, a93, a94, a95) {
                    -a92;
                    a93 >>> a93;
                    a92 >>> a92;
                    a94[3];
                    try { v90["58572"](..."58572", a95, ...v89); } catch (e) {}
                }
                return a63;
            },
            1073741824: v34,
            [v50](a103, a104, a105, a106) {
                eval();
            },
            o(a110) {
                return v50;
            },
            256: a66,
        };
        return a64;
    }
    f76();
    const v114 = Array();
    try { v114.findLast(f62); } catch (e) {}
    let v117;
    try { v117 = Int8Array.of(); } catch (e) {}
    try { v117.join(a64); } catch (e) {}
    for (let v119 = 0; v119 < 5; v119++) {
    }
    try { v61["find"](..."find", a66, ...v52, ...v61); } catch (e) {}
    return a66;
}
for (let v122 = 0; v122 < 10; v122++) {
    f62(v34);
}
%OptimizeFunctionOnNextCall(f62);
f62(v52);
