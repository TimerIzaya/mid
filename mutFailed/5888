const v0 = [-1e-15,5.202531680243078];
const v1 = [0.32937039014510816,1000.0,-6.224460748046349e+307,-6.200906636279318e+307,833318.7117067138,2.2250738585072014e-308,-5.0,-3.942543062796495e+307,1.0,0.05826144194587479];
const v2 = [-3.0,4.018052582827739,-2.220446049250313e-16,1.7976931348623157e+308,-122155.56675740925];
class C6 {
    static [C6];
    [536870887] = 536870887;
    static #f = v1;
    8 = v0;
    static g;
    #toString(a8, a9) {
        try { v2(a8, a8); } catch (e) {}
        this.d -= 4;
        const v11 = a8 === v2;
        new BigUint64Array(6);
        new Float32Array(512);
        new Uint8ClampedArray(6);
        return v11;
    }
}
C6.c = C6;
new C6();
new C6();
new C6();
try { Uint8Array.bind(Uint8Array); } catch (e) {}
const v28 = [Float32Array];
const v30 = v28["concat"]();
v30.g = v30;
function f31() {
    const v33 = ("-536870912").g;
    const v35 = new Uint16Array();
    v35[145] = v33;
    return v33;
}
try { f31(); } catch (e) {}
const v37 = f31();
new Uint8Array(9);
9n >> 9n;
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this?.__defineGetter__;
    try { v49(undefined, undefined); } catch (e) {}
    try { a45.unshift(a46); } catch (e) {}
    a47 != a47;
    let v53;
    try { v53 = a45.toSpliced(a46, a46); } catch (e) {}
    const v54 = v53?.__defineSetter__;
    try { v54(); } catch (e) {}
}
F43.caller = F43;
new Uint8Array(4);
const v60 = new Int32Array(2015);
try { v60.join(v28); } catch (e) {}
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
}
class C66 {
    #toString(a68, a69, a70) {
    }
}
for (let v72 = 0; v72 < 10; v72++) {
    Reflect.construct(C66, [Reflect,Reflect,Reflect,Reflect], WeakSet);
}
const v76 = [0.00952483356421907,-3.0,2.220446049250313e-16];
let v77;
try { v77 = v76.slice(Float32Array, C6); } catch (e) {}
function f78() {
    return v76;
}
function f79(a80) {
    return f78;
}
v77 = 4;
Float32Array * 2015;
("concat")[8];
const v84 = Symbol.search;
v37[v84] = v84;
Object.defineProperty(v76, 1, { get: f78, set: f79 });
v76.fill(f79, f79);
