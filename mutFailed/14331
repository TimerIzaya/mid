Float32Array.e = Float32Array;
new Float32Array(257);
const v8 = new Int8Array(Int8Array);
try { Uint16Array.of(); } catch (e) {}
const v13 = WeakMap?.call;
let v14;
try { v14 = v13(Int8Array); } catch (e) {}
function f15(a16, a17, a18, a19) {
    a17 / a17;
    const v22 = new Int32Array();
    try { v22.values(); } catch (e) {}
    v22[3];
    return a17;
}
f15.e = f15;
for (let v25 = 0; v25 < 10; v25++) {
    const v26 = f15(f15, v25, f15, f15);
    v26 !== v26;
}
const v28 = new Uint16Array(2);
v14[v28] !== Int8Array;
const v31 = v28.__proto__;
try { v31.entries(); } catch (e) {}
try { v8.slice(v31, 2); } catch (e) {}
Math.LN10 = Math;
let v38 = -2.0;
let v39 = v38++;
v39--;
function f42() {
    const v44 = Array();
    v44[3] = 65535;
    return v44.pop();
}
Math.log1p(v38);
