let v1 = 65535;
class C3 {
    constructor(a5, a6) {
        function f7(a8) {
            const v9 = this();
            this.d;
            return v9;
        }
        Object.defineProperty(this, "toString", { writable: true, configurable: true, value: f7 });
        function f11(a12) {
            try { a12.matchAll(); } catch (e) {}
            new Float32Array(4);
            new Int16Array(129);
            new Uint16Array(16);
            return a5;
        }
        Object.defineProperty(a6, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f11 });
        a5 >>> a5;
        a6++;
        const v27 = this[-15407];
        v1++;
        a5 *= a5;
        super.b = -15407;
        try { v27.setFullYear(v1, this); } catch (e) {}
    }
    #g = v1;
    static m(a31, a32) {
        a31.__proto__;
        return 536870889;
    }
}
const v37 = new C3(-15407, -65537);
function f38(a39, a40) {
    Math.tan(-15407);
    return C3;
}
v37[Symbol.toPrimitive] = f38;
const v45 = new C3(v37, -65537);
const v46 = v45?.constructor;
try { new v46(C3, C3); } catch (e) {}
const v48 = new C3(v1, v1);
class C49 {
    static 2237 = -15407;
    #n(a51, a52, a53) {
        a51 = v45;
        super[-65537];
        return v48;
    }
    set g(a56) {
        v37[255] = this;
        try {
            super.atanh(C3);
        } catch(e58) {
        }
        C3[-15407] <<= -65537;
    }
}
const v59 = new C49();
try { v59.toLocaleString(); } catch (e) {}
const v61 = new C49();
new C49(v1, v61);
const v64 = new Set();
v64[Symbol.toPrimitive] = Symbol;
new Map();
const v69 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f70(a71, a72, a73, a74) {
    a72 & a72;
    try {
        v69.forEach(a72);
    } catch(e77) {
        e77.message = e77;
    }
    return f70;
}
const v78 = f70.caller;
for (let v79 = 0; v79 < 10; v79++) {
    f70(v79, v79).prototype;
}
%OptimizeFunctionOnNextCall(f70);
const v82 = f70();
function f83(a84) {
    try { v64.delete(v78); } catch (e) {}
    const o88 = {
        "execution": "async",
    };
    gc(o88);
    return o88;
}
v82.constructor = f83;
const v90 = v82?.constructor;
try { new v90(v64); } catch (e) {}
