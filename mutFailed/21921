function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = f0;
    try {
        this.g = f0;
        function F3() {
            if (!new.target) { throw 'must be called with new'; }
            Array(19793);
            function F8() {
                if (!new.target) { throw 'must be called with new'; }
                class C10 {
                }
                for (let v11 = 0; v11 < 25; v11++) {
                    const v12 = [1073741824,1073741823,1376142744,1073741825];
                    function f13(a14, a15, a16, a17) {
                        try { v12["find"](); } catch (e) {}
                        return C10;
                    }
                    for (let v20 = 0; v20 < 5; v20++) {
                        f13(v20, f13);
                    }
                }
            }
            new F8();
            const o23 = {
            };
            for (let v24 = 0; v24 < 5; v24++) {
            }
            [];
            function f26(a27) {
                const o28 = {
                };
            }
            class C29 {
            }
        }
        new F3();
    } catch(e31) {
    }
}
const v32 = new F1();
new F1();
new F1();
class C38 {
    n(a40, a41, a42) {
        super.d;
        return "257";
    }
    static m(a45, a46) {
        return f0;
    }
    static set h(a49) {
        const t54 = "257";
        t54["257"] = this;
        const t56 = "jIX";
        t56[Symbol.matchAll] = a49;
    }
}
const v52 = new C38();
const v53 = new C38();
new C38();
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = F1;
    } catch(e59) {
    }
}
const v60 = new F55(v32, v52);
new F55(v52, v60);
new F55(v52, v53);
function F63(a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    function f68() {
        Math.toString = f68;
        return Math.asin(Math);
    }
    %PrepareFunctionForOptimization(f68);
    f68();
    %OptimizeFunctionOnNextCall(f68);
    f68();
}
new F63(F63, F63, F63);
