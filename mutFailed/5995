function f3() {
    return -1;
}
try { f3(); } catch (e) {}
let v6;
try { v6 = Map.toString(); } catch (e) {}
const v7 = new Map();
try { v7.has(v7); } catch (e) {}
function f9(a10, a11, a12, a13) {
    a10 / a10;
    a13++;
    a11--;
    const o32 = {
        [Map](a18, a19) {
            super[a13] = 4294967296;
            super[a11] = Map;
            const v20 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
            const v22 = new Uint8Array();
            v20[268435441] = v22;
            try {
                v7.g = f3;
            } catch(e24) {
            }
            return 4294967296;
        },
        "a": a10,
        p(a26, a27) {
            super.a = f3;
            return Map;
        },
        [f3](a29, a30, a31) {
        },
        "message": 4294967296,
        [a12]: -401085730,
        "c": 4294967296,
    };
    return o32;
}
const v33 = f9(-401085730, -1, -1, -1);
try { v33.p(-401085730, v33); } catch (e) {}
class C35 {
    set g(a37) {
    }
}
try { new C35(); } catch (e) {}
let v39 = [];
try { v39.findLast(v6); } catch (e) {}
const v41 = [NaN,-1e-15];
const v42 = v41?.find;
try { new v42(v39); } catch (e) {}
v39 = v41;
const v44 = f9(v33, -1, 4294967296, -401085730);
const v45 = f9(v44, -401085730, 4294967296, -1);
const v48 = BigUint64Array.length;
v48 >>> v48;
new BigUint64Array(2);
1438 / 1438;
const v54 = new Float32Array(1438);
try { v54.slice(Map, v45); } catch (e) {}
219 !== 219;
const v59 = new Int16Array(219);
const v60 = v59[140];
v60 !== v60;
function f62(a63, a64) {
    function f66(a67) {
        const o68 = {
        };
        new BigUint64Array(o68, o68);
        const v73 = new Map();
        class C75 {
        }
        const v76 = C75.constructor;
        try { v76(Float32Array, Uint8Array, -9007199254740992, v73); } catch (e) {}
        return a63 ^ a64;
    }
    this.onmessage = f66;
    return this;
}
try { new Worker(); } catch (e) {}
Worker.arguments = Worker;
const o94 = {
    ["function"](a84, a85, a86) {
    },
    "type": "function",
    "f": v44,
    "toPrimitive": BigUint64Array,
    set f(a88) {
    },
    get d() {
        function f90(a91, a92, a93) {
            'use strict';
            return a91;
        }
        return this;
    },
};
const v95 = new Worker(f62, o94);
try { v95.terminate(); } catch (e) {}
const v99 = new Map(2147483649);
const v100 = v99[174];
v100 + v100;
class C102 {
    static a;
    static {
        let v104 = this >> this;
        v104--;
        this[6];
    }
    static m(a108) {
        gc();
    }
}
C102.e = C102;
new C102();
