const v0 = [-26611,4294967296,-9007199254740992,1110644348,-1073741824,4096,60190,16,1073741824,-13];
function f1(a2) {
    return v0["flat"]();
}
v0.toString = f1;
const v5 = [-5445,-9007199254740992];
v5.toString = f1;
const v6 = [2107302589,2106633776,-9223372036854775808,10000,4294967296,-899291811,255,4,14];
function f7() {
    return f1;
}
Object.defineProperty(v6, "toString", { writable: true, enumerable: true, get: f7 });
class C11 {
    constructor(a13, a14, a15) {
        this.toString = f7;
        a14.toString = f7;
        a14[a15];
        this[-2162n] = this;
        %VerifyType(a13);
        super[268435440n] = a14;
    }
    11;
    [v6] = 65536n;
    static o(a18, a19, a20) {
        const o21 = {
        };
        try {
            o21.g = a20;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.g = a20;
            o23.d = v6;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.g = a20;
            o25.d = v6;
            o25.e = 65536n;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            o27.g = a20;
            o27.d = v6;
            o27.b = a18;
        } catch(e28) {
        }
        return this;
    }
}
new C11(v5, v0, v5);
const v30 = new C11(v6, v5, v0);
const v31 = new C11(v6, v0, v30);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a37;
    } catch(e38) {
    }
    try {
        this.e = v30;
    } catch(e39) {
    }
}
new F32(v30, 65536n, v31, -2162n);
const v41 = new F32(v6, 65536n, 65536n, -2162n);
new F32(v5, -2162n, v41, 268435440n);
Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
