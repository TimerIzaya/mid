function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = F0;
    } catch(e3) {
    }
    const v5 = new Uint32Array();
    for (let i8 = 0, i9 = 10;
        (() => {
            const v11 = SyntaxError();
            function f12(a13, a14, a15, a16) {
                139837843 in v11;
                return a15;
            }
            const v19 = i8 < i9;
            v5[v19];
            return v19;
        })();
        (() => {
            i9--;
            BigInt(BigInt);
            function F27(a29, a30) {
                if (!new.target) { throw 'must be called with new'; }
                const v31 = this.constructor;
                try { new v31(); } catch (e) {}
                this.a = Uint16Array;
            }
            new F27(F27, Uint16Array);
        })()) {
    }
    try {
        this.d = 3;
    } catch(e36) {
    }
}
new F0();
new F0();
new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v41 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v41[2] = v41;
new Uint8Array(v41);
new F0();
[0.012625907187311047,-1.0,2.2250738585072014e-308,2.7534624276957834e+307,1.1581520376993764e+308,1.2145108520046336e+308,-687977.0540752616];
[-3.0,1e-15,-1.5927304335569028e+308,0.18138224154804894,4.750395861065928e+307,943.7823211699526,0.0,1000.0,-1000000000000.0];
const v48 = [0.9006588832547652,-1000000000000.0,-122185.1480055583];
const v50 = new Set();
let v51;
try { v51 = v50.add(v48); } catch (e) {}
NaN + v51;
8 >= 8;
new Uint8ClampedArray(798);
function f63(a64, a65) {
    function f66(a67) {
        return arguments;
    }
    const v69 = f66(f63, a64, a64, a65);
    const o70 = {
        ...v69,
    };
    return o70;
}
try { ("-268435456").match(5); } catch (e) {}
try { ("function")["-268435456"](); } catch (e) {}
