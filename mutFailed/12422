function f0() {
    let v1 = "boolean";
    const o21 = {
        "e": -2147483647,
        [-2147483647]: 8.80579417534662,
        0: -2147483647,
        set a(a5) {
            Math.round(1531487198);
            ++v1;
            Math.sinh(-268435456);
            let v12 = ~1531487198;
            const v13 = [748666.7832804511,3.0];
            class C15 extends Float64Array {
                [v13];
            }
            new C15();
            !(v12++);
            let v19;
            try { v19 = a5(a5, a5); } catch (e) {}
            v19?.[-2147483647];
        },
        "h": -2147483647,
        4294967296: 8.80579417534662,
        __proto__: v1,
    };
    return o21;
}
f0();
f0();
f0();
class C27 extends Array {
}
new C27();
const v32 = new BigUint64Array(BigUint64Array);
v32.g = v32;
for (const v34 in v32) {
    new Float64Array(2147483647);
}
const v40 = new BigUint64Array(116);
const o43 = {
};
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v48 = 0; v48 < 5; v48++) {
    for (let v49 = 0; v49 < 5; v49++) {
        const t46 = [0.8307152163010869,1.0,0.0];
        t46.length = v49;
    }
}
new BigInt64Array(v40, 116, 116);
const t51 = f0();
delete t51?.e;
try {
    f0();
} catch(e55) {
}
const o57 = {
    "maxByteLength": 150,
};
const v58 = /[\cA](?!(a))\1/udims;
[v58,v58,v58,v58,v58];
new BigInt64Array(7);
new Int32Array(1024);
function f64() {
    new Uint16Array(209);
    return 209;
}
new Int8Array(268435456);
const v73 = Float64Array.of();
v73.toString = f64;
const v75 = [];
try {
    v75.some(116);
} catch(e77) {
}
new Date(Array, v73);
