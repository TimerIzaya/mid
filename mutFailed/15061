function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -53736;
    } catch(e3) {
    }
    try {
        this.a = -53736;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f8() {
    return v5;
}
class C9 extends f8 {
    valueOf(a11) {
        const v12 = f8();
        try {
            super.all(f8, v7, v12, this);
        } catch(e14) {
        }
        super.f |= v12;
        this in v7;
        return f8;
    }
    static #d;
    #c = v5;
    static e;
    static 9 = f8;
}
const v16 = new C9();
let v18 = -1610813393;
Math.min(v18);
Math.abs(v16);
v18 / 3.0;
++v18;
Math.cbrt(3.0);
const v26 = new C9();
new C9();
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a30;
    } catch(e32) {
    }
    try {
        this.g = a31;
    } catch(e33) {
    }
}
new F28(v7, v16);
new F28(v16, v6);
new F28(v26, v16);
[-3.0,0.45659751000498894,-1000000.0,3.0,0.7977175822592876,-1000000000000.0];
[0.32263210525704633,0.9348771008971412];
[174.873066708343,-3.841395818816469e+307,-861085.6233315285,Infinity,1.773022318924495];
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this.constructor;
    let v47;
    try { v47 = new v46(a43); } catch (e) {}
    typeof v47 === "symbol";
}
new F40(F40, F40, F40, F40);
new F40();
