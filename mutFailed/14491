function f3() {
    return 1365138376;
}
new Uint8Array([2,-10]);
const v12 = /nupa\Sc/vms.constructor;
class C13 extends 1365138376 {
}
const v16 = Promise.reject(Promise);
v16.then(v16);
class C18 {
}
new Uint32Array(994, 4.0, 4.0, 55370);
new Int16Array(994);
const v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
try { v24["find"](..."find", 4, ...v24, ...v25); } catch (e) {}
("boolean").split("toString");
new v12(4);
const v35 = Math.round();
async function f36(a37, a38, a39) {
    await v35;
    const v41 = [601759695];
    function F42() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v44 = 0; v44 < 1000; v44++) {
            Symbol.toPrimitive;
            const o48 = {
            };
            try {
            const t0 = "boolean";
            new t0();
            } catch (e) {}
            ("p" + 994).fontcolor();
        }
    }
    new Int16Array();
    b = v41;
}
const v54 = new Map();
function f55(a56) {
    return a56;
}
Object.defineProperty(v54, "g", { configurable: true, enumerable: true, get: f55, set: f55 });
f55();
