let v3 = "jER";
const v4 = [17452,4294967295,64,-8];
[v3] = v4;
const v6 = new Int8Array();
v6.buffer;
function f8(a9, a10) {
    const o17 = {
        __proto__: -9223372036854775808,
        [a9]: a9,
        "g": 17380,
        ...v6,
        set h(a12) {
        },
        ...v6,
        "arguments": v4,
        valueOf(a14, a15) {
            try {
                a14.b = -9223372036854775808;
            } catch(e16) {
            }
            return a10;
        },
        "c": 1330384156,
        ...-9223372036854775808,
        [a10]: a9,
        "e": a10,
        "d": a9,
    };
    function f18() {
        function F19(a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
            this.hasOwnProperty(F19);
            const v24 = this.constructor;
            try { new v24(); } catch (e) {}
        }
        return o17;
    }
    o17[Symbol.toPrimitive] = f18;
    return o17;
}
f8(-9223372036854775808, 1330384156);
const v29 = f8(17380, -9223372036854775808);
f8(-9223372036854775808, -9223372036854775808);
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = [];
    function F40(a42, a43, a44, a45) {
        if (!new.target) { throw 'must be called with new'; }
        a42.lastIndexOf(a42, a43);
    }
    const v47 = new F40(v39);
    const v48 = v47.constructor;
    try { new v48(); } catch (e) {}
    2105444095n >> 2105444095n;
    for (let v52 = 0; v52 < 100; v52++) {
        const o56 = {
            6: undefined,
            [268435439n]: 2105444095n,
            __proto__: a35,
            "g": a35,
            "b": v52,
            "arguments": this,
            valueOf(a55) {
                return v52;
            },
        };
    }
    try { Math.ceil(-4294967296n); } catch (e) {}
}
new F31();
function F67(a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v72 = new Uint8ClampedArray(2147483647);
        function f73(a74) {
            return f73;
        }
        const o77 = {
            "maxByteLength": 201,
        };
        Symbol("bZ");
        new Uint8Array(3521);
        const v85 = [268435456,-12,1073741825,-9007199254740990,-1024,10000,512,-3];
        const v87 = new Int8Array();
        function f88() {
            return f73;
        }
        function f89(a90) {
            function F91() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v94 = new F91();
            const o102 = {
                [v94](a97, a98, a99, a100) {
                    "D2z" < a97;
                },
            };
        }
        Object.defineProperty(v87, "constructor", { writable: true, enumerable: true, get: f88, set: f89 });
        const t99 = v87.constructor;
        new t99(v85);
        const v105 = [v72];
        const o106 = {
            "arguments": v105,
            "type": "function",
        };
        Worker(f73, o106);
    } catch(e108) {
        const v109 = v29 < v29;
        const o116 = {
            m(a111, a112) {
                return v109;
            },
            n(a114, a115) {
                return a114;
            },
        };
    }
}
new F67();
function f122(a123, a124, a125, a126) {
}
function f127() {
    let v128 = 852.2904873570058;
    const o135 = {
        3: "setDate",
        "f": 1836424012,
        m(a132, a133) {
            v128++;
            return v128;
        },
        "d": 1836424012,
    };
    return o135;
}
%PrepareFunctionForOptimization(f127);
const v137 = new Float32Array(2306);
v137.reverse();
function f141() {
}
class C142 extends f141 {
    toString(a144, a145) {
        this.constructor(a144, a144, 1024);
        this.constructor();
        -this;
    }
}
const v149 = new C142();
function f150(a151) {
    new Uint8ClampedArray(8);
    return a151;
}
v149.valueOf = f150;
function f155(a156) {
    return 1024 <= 3585 ? 1024 : 3585;
}
v149.constructor = f155;
try { v149.toString(); } catch (e) {}
