new WeakMap();
const v3 = new Set();
try { v3.add(Set); } catch (e) {}
const v5 = [0.8706617841891329,-105.10799988009944];
[-5.0,NaN,0.7978392145294337,2.0];
const v7 = [NaN,-2.220446049250313e-16,-1000000000.0,-0.6871017589154427];
try { v7.groupToMap(v5); } catch (e) {}
let v9 = "mmv5";
[1000000000.0,164930.0283441285,0.30262148650904874,-1.7976931348623157e+308,0.7130928736216399,1.5728362619823632e+308,-1.7976931348623157e+308];
const v13 = [0.16553366117069657,1000000000000.0,-1.0218273620786142,-2.220446049250313e-16];
[-1000000000000.0,-5.0,-1.7357716867956352,1000000.0,NaN,1000.0,-1.5393590856765884e+306];
class C15 extends WeakMap {
    get f() {
        v9 = !"isConcatSpreadable";
        return false;
    }
    static set e(a20) {
        new Set(1000);
        new BigInt64Array(7);
        new BigInt64Array(165);
    }
}
new v13();
new C15();
new C15();
class C34 {
}
("async").split(/[a-zA-Z0-9]BL[\cZ]/udsy, C34);
