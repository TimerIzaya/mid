class C3 {
    #p(a5, a6) {
        Object.defineProperty(this, "a", { writable: true, configurable: true, value: this });
        a5?.[a6];
        const t3 = "-27411";
        t3[9007199254740990] **= 257;
        let [v11] = "-27411";
        257 != 2.220446049250313e-16;
        return "-27411";
    }
    static d;
    static g;
    static ["-27411"] = 2.220446049250313e-16;
    h;
}
try { new C3(); } catch (e) {}
const v14 = new C3();
new C3();
let v16 = new C3();
class C17 {
    static b;
    static n(a19, a20, a21, a22) {
        try { v14.m(this, a21, a21); } catch (e) {}
        v16 >>>= a20;
        a21 / "-27411";
        return a20;
    }
    ["-27411"] = 2.220446049250313e-16;
    constructor(a26, a27) {
        false || false;
    }
    /*
    constructor(a31, a32, a33, a34) {
        function F35() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v37 = new F35();
        const v38 = [6.345269750596144e+307,1.5426121797865451e+308,-1.0,1.0763754168130034e+308,-1.0165609707268582e+308,-2.220446049250313e-16,4.1652134965708285,Infinity,8.22884515469082e+307,-1000000000.0];
        function F39(a41, a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
            const v44 = this.constructor;
            try { new v44(v37); } catch (e) {}
            a41[3] = a41;
        }
        new F39(v38);
    }
    */
    268435456;
    #f = C3;
    static d;
    p(a48, a49, a50, a51) {
        const v53 = new Float32Array(C3, a49, this);
        v53.constructor;
        gc();
        ("-27411").length;
        const o60 = {
            "maxByteLength": 1842216027,
        };
        const v62 = new ArrayBuffer(4096, o60);
        new Uint8ClampedArray(v62);
        return a50;
    }
}
new C17();
const v66 = new C17();
v66[268435456] = v66;
new C17();
735140.994023684 - 735140.994023684;
BigUint64Array.length;
const v72 = new BigUint64Array();
const o73 = {
    __proto__: v72,
};
function F77(a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
}
F77.length = F77;
class C81 extends F77 {
    #d;
    static {
        this.prototype = this;
        for (let v83 = 0; v83 < 25; v83++) {
            -v83;
        }
        try {
            this.#d = C3;
        } catch(e85) {
            const v86 = e85?.constructor;
            try { new v86(v14); } catch (e) {}
        }
    }
}
256 / 256;
new Uint8ClampedArray([1,17,[Uint8ClampedArray,Uint8ClampedArray]]);
