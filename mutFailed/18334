const v2 = new Int32Array(129);
let v3 = 257;
const v5 = new Uint8Array(v3);
v5[163] = v5;
const v8 = new BigUint64Array(8);
function f9() {
    return v5;
}
function f10(a11, a12, a13, a14) {
    /8\x0f/vdimsy;
    const v16 = /lf[\118]/dimy;
    /(?:ab)?/vdim;
    +8;
    Math.round(1.7976931348623157e+308);
    v3++;
    a14--;
    const o38 = {
        "b": v2,
        4096: f9,
        __proto__: Int32Array,
        "f": a13,
        valueOf(a26, a27, a28) {
            try {
                super.find(a13);
            } catch(e30) {
            }
            const v31 = [1869323755];
            [1722000167];
            const v33 = [0,37894,7,-140209484,-128,224693290,-8629,0,17011,-59211];
            try { a13(v31, f10, a12, v16, 129); } catch (e) {}
            for (let v35 = 0; v35 < 32; v35++) {
                a13["p" + v35] = v35;
            }
            return v33;
        },
        2021: BigUint64Array,
    };
    return o38;
}
f10(v3, 8, Uint8Array, v3);
const v41 = f10(8, f10(v3, Uint8Array, f9, v3), f9, 129);
v41.d = v41;
const v44 = BigUint64Array === 148882578n;
Uint32Array.toJSON = 0;
function f48(a49, a50) {
    return v44;
}
const v53 = [Uint32Array];
try { v53.splice(v3, v8); } catch (e) {}
const o55 = {
    "arguments": f10,
    "type": "function",
};
const v56 = new Worker(f48, o55);
try { v56.getMessage(); } catch (e) {}
