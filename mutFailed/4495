let v3 = (0.1482173487500671)[536870888];
Object.defineProperty(v3, v3, { writable: true, configurable: true, value: v3 });
const v5 = Symbol.iterator;
const o14 = {
    [v5]() {
        let v7 = 10;
        const o13 = {
            next() {
                v7--;
                const v11 = v7 == 0;
                const o12 = {
                    "done": v11,
                    "value": v7,
                };
                return o12;
            },
        };
        return o13;
    },
};
try { new Int16Array(1.7921591138656655e+308, Int16Array, 5.0); } catch (e) {}
const v18 = new Int16Array(14);
const v20 = 1024 / 1024;
const v22 = new Uint32Array(1024);
v22[916] = v22;
v22[14] = v22;
o14[159] = v20;
v18[o14[-2]] %= 1024;
v3 = Int16Array;
let v24 = 1316;
v24++;
const v27 = new Float64Array(v24);
16 % 16;
const v37 = /a\D[\cz]/giy;
try { v37.test(v37); } catch (e) {}
try { Int32Array.apply(Int32Array, 8); } catch (e) {}
v22[10] -= 43919;
v22[2147483649] |= 8;
Object.defineProperty(v37, 6, { writable: true, configurable: true, enumerable: true, get: Date, set: Date });
let [v42,v43,,v44] = v27;
v27["at"](3);
Int32Array.length;
