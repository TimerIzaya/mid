let v4 = 0.5433457639760597;
/[O(?:a+)+0J[x\dz]+]/gvdy;
const v7 = /\u0060/gvdmy;
const v8 = [-4.0,-187.33463400009316,266767.34688113444,551749.9695726107];
const v9 = /(?:a*)+q(?<a>.)/guds;
function f10(a11) {
    a11.hasIndices;
    class C13 {
    }
    return f10;
}
for (let v14 = 0; v14 < 50; v14++) {
    const t12 = f10(v9);
    t12(v8);
}
const v17 = /D/gviy;
class C18 {
    #c = -2.0;
    static ["function"];
    n(a20, a21) {
        function F22() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v24 = new F22();
        const v25 = new F22();
        const v26 = new F22();
        function f27(a28, a29) {
            const o34 = {
                "b": v26,
                n(a31, a32) {
                    a28(v24, a29);
                    return F22;
                },
                "a": v25,
            };
            return o34;
        }
        v7.multiline ||= -2.0;
        a21 = "9oS11";
        v26?.constructor;
        class C37 {
            toString() {
                [0.42610628000409834];
                [0.1916863927637561,5.0,-1000000.0,-1000000000000.0,-2.2250738585072014e-308,786167.582370504,221250.34918176057];
                [2.0,121972.82426161831,1.0,1000.0,1.586101720587471e+308,682084.812556563];
                return undefined;
            }
            #f;
            static [undefined] = undefined;
            536870887;
            static #d = undefined;
        }
        const v42 = new C37();
        v42.__proto__ = v8;
        const v44 = v17 <= -2.0 ? v17 : -2.0;
        ({"f":v4,} = v44);
        ~v4;
        this[a20];
        return v44;
    }
    static [-2.0];
    static d = "dFP";
    #c = "function";
}
new C18();
new C18();
new C18();
[-96.69376802872296,-1.1688092340658848e+308,5.421894641568482e+307,1000000.0,-1.6913642214273233e+308,NaN,8.187111251567471e+307,894.5818298294412];
[149729.22560246964,0.6666818574898814,-1e-15,920072.3227025957,955.814183445968,Infinity];
[0.6839914595817987,0.7190408093134953];
const v55 = new Uint8Array(257);
class C57 extends Uint16Array {
    constructor(a59, a60, a61) {
        super(v55);
    }
}
new C57();
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    const v67 = this.constructor;
    v67.bind(F63, a65, v67, a65);
    try { new v67(); } catch (e) {}
    a66 / a66;
}
new F63();
new F63();
const o74 = {
    "type": "function",
};
function f75() {
    const o77 = {
    };
    gc(o77);
}
F63[Symbol.toPrimitive] = f75;
