new Uint8ClampedArray(1000);
new Int8Array(9);
const v8 = new Uint32Array(2441);
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = Int8Array;
    } catch(e13) {
        e13 + e13;
        const v17 = ("-1723624938").slice(9);
        class C20 {
            constructor(a22, a23) {
                const v24 = this.constructor;
                try { new v24(this, v17); } catch (e) {}
                a23.sup();
            }
        }
        new C20(9, "maxByteLength");
        const v30 = 256 % 256;
        a12++;
        Math.sign(a12);
        v30 << v30;
        Math.acos(v30);
    }
    try {
        this.e = Uint8ClampedArray;
    } catch(e35) {
    }
    try {
        function f36(a37, a38, a39) {
            ([0.021647043302781555,982.9822277058386,68.55386187204931,-3.6548181863708407e+307,0.20797002453168356,1000000.0,-569469.7761417266,-3.877892592640821,Infinity,5.0]).toLocaleString();
            Symbol.unscopables;
            function f46(a47, a48, a49, a50) {
                a47.length = a47;
                a49?.findLast;
                const o52 = {
                };
                o52.c = o52;
                const o56 = {
                    n(a54, a55) {
                        return a48;
                    },
                };
                o56.n(a50, o56);
                return Uint8Array;
            }
            function f58(a59) {
                try { a59(a12, a59, v8, a12); } catch (e) {}
                const o63 = {
                    ...this,
                };
                typeof arguments;
                const o67 = {
                    "maxByteLength": 247,
                };
                const v69 = new SharedArrayBuffer(247, o67);
                new Uint32Array(v69);
            }
            this.onmessage = f58;
            Object.defineProperty(a39, a37, { writable: true, configurable: true, enumerable: true, get: f58, set: f58 });
        }
        const v74 = [F9,1000,"function"];
        const o75 = {
            "arguments": v74,
            "type": "function",
        };
        new Worker(f36, o75);
        this.g = a11;
    } catch(e77) {
    }
}
Float64Array.__proto__ = Float64Array;
const v82 = new Uint8ClampedArray(([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937));
v82.lastIndexOf(-1148418937);
new F9(2441, 2441);
new F9(2441, 1000);
const v86 = [];
class C87 {
    constructor() {
        super.f >>= this;
    }
    static #o() {
        super[v86];
        super.a;
        return v86;
    }
}
const v92 = new C87();
const v93 = /\P{sc=Greek}/s;
try { v92.subarray(v93); } catch (e) {}
new F9(2441, 2441);
("-4294967295").replace();
