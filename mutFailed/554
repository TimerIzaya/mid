let v0 = [NaN,-898.0393238770104];
const v1 = [648.9238386525026,-9.606453824637406,-2.220446049250313e-16,1000000000000.0,0.24379896510702126,-1000.0];
[-1000000000000.0];
new Uint8ClampedArray(11);
const v8 = new BigUint64Array(127);
function f11(a12, a13) {
    try {
        v1.valueOf = a13;
    } catch(e14) {
    }
    return v0;
}
Int32Array.toString = f11;
let v15 = new Int32Array(7);
v0 = v1;
const v17 = new Date();
const o18 = {
};
try {
    o18.f = Date;
} catch(e19) {
}
try {
    const o20 = {
    };
    o20.h = Uint8ClampedArray;
    o20.f = Date;
    o20.h = Int32Array;
} catch(e21) {
}
try {
    const o22 = {
    };
    o22.f = Date;
    o22.h = Int32Array;
    o22.g = v15;
} catch(e23) {
}
try {
    const o24 = {
    };
    o24.f = o24;
    o24.f = Date;
    o24.h = Int32Array;
    o24.a = v17;
} catch(e25) {
}
function f26(a27, a28, a29) {
    const o51 = {
        "h": 127,
        [Int32Array](a31, a32, a33) {
            for (let i35 = 0; i35 < 9; i35++) {
                let v42 = -536870912;
                let v43 = -1000000000.0;
                const v44 = v15--;
                v42 | Int32Array;
                const v46 = v44 - v15;
                v44 ^ v46;
                Math.imul(v46, v15);
                v42++;
                v43++;
            }
            return a33;
        },
    };
    return o51;
}
f26(11, v1, 11);
f26(Uint8ClampedArray, v1, 11);
f26(127, v0, 127);
function f56(a57, a58) {
    const o59 = {
    };
    Object.defineProperty(o59, "BigInt64Array", { value: 7 });
    return o59;
}
const v60 = f56();
v60.BigInt64Array = v8;
with (v60) {
    new BigInt64Array(2147483649);
}
