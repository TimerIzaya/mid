let v0 = 3n;
const v3 = /u/uim;
function f4(a5) {
    const o7 = {
        "type": "minor",
    };
    return "minor";
}
const v9 = Symbol.iterator;
v3[v9] = f4;
const v10 = /[\c~]/gisy;
const v11 = /F(ab)\1(\2)(\1)/gvimsy;
class C12 {
    m(a14, a15) {
        function f16() {
            function f17() {
                let v18;
                try { v18 = a15(v9, v11, C12); } catch (e) {}
                v0 = v18;
                return a15;
            }
            return f17;
        }
        Object.defineProperty(a15, Symbol.iterator, { writable: true, configurable: true, enumerable: true, get: f16 });
        for (const v21 of a15) {
            v3[v21] = -1896702866n;
            class C22 {
                constructor(a24, a25) {
                    const o27 = {
                        84: arguments,
                    };
                }
            }
            try {
                v21.length = 2;
            } catch(e29) {
                const o30 = {
                };
                return o30;
                function F31() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v33 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                class C34 {
                    constructor(a36, a37, a38, a39) {
                        a38[5];
                        const v41 = this.constructor;
                        try { new v41(v33, F31, a38); } catch (e) {}
                        v33 >>> a37;
                    }
                }
            }
        }
        return -1896702866n;
    }
}
const v44 = [];
function f45() {
    const o49 = {
        toString() {
            super[this];
        },
        ...v44,
        n() {
            return this;
        },
    };
    try { o49.n(); } catch (e) {}
    return v44;
}
C12.prototype = C12;
new C12();
const v52 = new C12();
try { v52.m(v3, v3); } catch (e) {}
new C12();
Uint32Array.e = 11;
Uint32Array.e = Uint32Array;
const v57 = new Uint32Array(11);
function f58() {
    return Symbol;
}
function f59(a60) {
    function f61() {
        return v3;
    }
}
Object.defineProperty(v57, "valueOf", { configurable: true, enumerable: true, get: f58, set: f59 });
v57[4] = v57;
new Float64Array(146);
127 !== 127;
new Int16Array(127);
const v69 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
v69[16] = v10;
try { v69.fill(Uint32Array); } catch (e) {}
v69[16] = 2.220446049250313e-16;
delete v69[2.0];
