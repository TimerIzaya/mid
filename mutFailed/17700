new Int8Array(1388);
new Int32Array(8);
new Uint8Array(1);
[10,-128,14,0,-11,65537,-43123,-536870912];
[1000,9,-65537,-8562,-4,1013159759,-5,-1024,17171];
[14,-984487292,-9223372036854775807,1,7,-36804,1024,9,1073741823,24396];
new Uint8ClampedArray(2081);
new Float32Array(2133);
new BigUint64Array(256);
const v21 = [-9007199254740991,536870888,51292,-2147483649];
const v22 = [536870912,-124426018];
const v23 = [23930,454087404,65536,-6,-1955199007,1,1073741824,14];
function f24(a25) {
    try { a25.map(v22); } catch (e) {}
    a25[0] = a25;
    const o31 = {
        "e": v21,
        "c": v22,
        [v23]: v23,
        "a": v23,
        [v21]: v23,
        get f() {
            let {"h":v28,"length":v29,...v30} = v23;
            this.toString = v28;
            return v30;
        },
    };
    return o31;
}
f24[Symbol.toPrimitive] = f24;
const v34 = f24?.toString;
try { new v34(); } catch (e) {}
const v36 = f24(v21);
v36.c = v36;
const v37 = f24(v22);
v37.f = v37;
f24(v23);
const v40 = 1073741824 * 1073741824;
v40 - v40;
const v43 = 65535 | 65535;
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    function f46() {
        [-31777,4096,-43641,901662420,-1944011455,-7];
        [3,9007199254740991,10000,-4294967297,-12,29243,-1,350,1465916401,437936499];
        return [-1024,-302923979,-1294578824,-4294967297,-3304,-298161100];
    }
    this.constructor = f46;
    const v50 = this?.constructor;
    v50.e = v43;
    v50.e = v50;
    try { new v50(); } catch (e) {}
}
F44.e = Uint8ClampedArray;
F44.arguments = F44;
const v52 = new F44();
try { v52.hasOwnProperty(f24); } catch (e) {}
v52.length;
const v55 = new F44();
v55.toString = f24;
new F44();
const v58 = -14n ^ -14n;
try { ("object").padStart(v58); } catch (e) {}
let v63;
try {
const t0 = "object";
v63 = t0(v52, "number", F44);
} catch (e) {}
function f64(a65) {
    return v63;
}
class C66 extends f64 {
    [v55] = "E";
    [v52] = -14n;
    268435441 = -14n;
}
C66.length = C66;
const t77 = "object";
t77[v55] &= v63;
