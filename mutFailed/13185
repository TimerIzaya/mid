const v3 = [-0.0,-4.609814828689622,-0.0,-1000000000.0,-0.0];
const v4 = [-1000000000.0,-0.0,-0.0];
function f5() {
    return ~268435440n;
}
const v9 = Symbol.toPrimitive;
Object.defineProperty(v4, v9, { configurable: true, value: f5 });
const v10 = [-1000000000.0];
class C11 {
    static [-0.0];
    [-4.609814828689622];
    [v4] = v10;
    #valueOf(a13, a14) {
        function f15(a16, a17, a18, a19) {
            return arguments;
        }
        for (let v21 = 0; v21 < 5; v21++) {
            const v22 = f15(v21, v21);
            v22[1] = v22;
        }
        const v24 = Symbol.toPrimitive;
        const o28 = {
            [v10]() {
                try { new v3(this, this, this, ...v4); } catch (e) {}
                this[v24];
                return a13;
            },
        };
        return -1000000000.0;
    }
}
const v29 = new v9();
const v30 = new C11();
const v31 = new C11();
const v32 = [C11,v31,-4.609814828689622];
[-4.609814828689622,v31,[v32,v31,v32]];
function f35(a36, a37, a38) {
    const o55 = {
        set h(a40) {
            new C11();
            try {
                a40.length = 1;
            } catch(e43) {
            }
        },
        o(a45, a46, a47, a48) {
            try { a47(); } catch (e) {}
            const o53 = {
                "execution": "sync",
                "type": "minor",
            };
            return gc(o53);
        },
    };
    return o55;
}
f35(-1000000000.0, v3, -1000000000.0);
const v57 = f35(-4.609814828689622, v31, -1000000000.0);
f35(-4.609814828689622, v4, -0.0);
WeakSet.toString = f5;
const v60 = new WeakSet();
class C61 {
    #c;
    static #n(a63) {
        try { a63(this, this, a63); } catch (e) {}
        try {
            const v65 = [-9223372036854775808];
            function F66(a68) {
                if (!new.target) { throw 'must be called with new'; }
                try { a68.groupToMap(a68, F66, v65, this, F66); } catch (e) {}
                try {
                    this.d = v65;
                } catch(e70) {
                    for (let v71 = 0; v71 < 5; v71++) {
                    }
                    const o72 = {
                    };
                    for (let i = 0; i < 5; i++) {
                        v65[v65];
                    }
                }
            }
            try { ("number").match(F66); } catch (e) {}
            const o76 = {
            };
            const v78 = new Uint8Array(Uint8Array, Uint8Array);
            const v82 = Math.atan2(-988.8649474800335, 10000);
            const v83 = [];
            function F84() {
                if (!new.target) { throw 'must be called with new'; }
                const v86 = this.constructor;
                try { new v86(); } catch (e) {}
                try {
                    v30.d = v83;
                } catch(e88) {
                    const v90 = new Set();
                    v90[v90];
                    function f92(a93) {
                        return f92;
                    }
                }
            }
            v78[v82] = 10000;
            new WeakSet(o76);
        } catch(e95) {
        }
        return a63;
    }
    static e = WeakSet;
    [WeakSet];
    static #b;
}
new C61();
const v97 = new C61();
new C61();
const v99 = [C61];
const v100 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
const v101 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
class C102 {
    constructor(a104, a105) {
        super[v101] = v100;
    }
}
[WeakSet];
const v107 = [v99];
const v108 = [WeakSet,v100,v107,v29];
const v109 = [v108,C61,WeakSet,v107,v108];
Float32Array[2147483648] = v57;
const v111 = [Float32Array];
v111[v97.isConcatSpreadable] = v111;
const v115 = v111["concat"]();
(-0.0).includes(Float32Array);
[v109,v97,v107,v97,v60];
Float32Array[2147483648] = Float32Array;
/(?:a*)+q(?<a>.)/guds;
function f119(a120) {
    a120.dotAll;
    a120.hasIndices = a120;
    const v122 = a120?.constructor;
    v122.$_;
    v122.lastParen;
    const o126 = {
        get d() {
        },
    };
    return v122;
}
for (let [i130, i131] = (() => {
        let v127 = 0;
        v127++;
        return [v127, 10];
    })();
    (() => {
        const v132 = i130 < i131;
        v115 || v132;
        return v132;
    })();
    i131--) {
    for (let v139 = 0; v139 < 25; v139++) {
    }
}
class C141 extends Array {
}
