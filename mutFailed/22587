new Array(512);
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = this;
    try {
        this.g = a5;
    } catch(e6) {
    }
    try {
        this.h = a5;
    } catch(e7) {
    }
}
const v8 = new F3(Array);
const v9 = new F3(F3);
const v10 = new F3(Array);
const v13 = new Int32Array(152);
new Int32Array(176);
new Uint8Array(4);
function F20() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.a = 3872;
    } catch(e23) {
    }
}
F20[Symbol.toPrimitive] = Array;
const v26 = new F20();
const v27 = new F20();
new F20();
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    [a35,a35 in v10];
    Array(512);
    v9.g;
    for (let v41 = 0; v41 < 32; v41++) {
        this["p" + v41] = v41;
    }
    try {
        this.b = a35;
    } catch(e44) {
    }
}
function f45() {
    try {
        v10.g = v13;
    } catch(e46) {
    }
    return v8;
}
F32[Symbol.toPrimitive] = f45;
const v49 = new F32(4294967295, F20, v26);
new F32(62324, F32, v27);
const v52 = Symbol.toPrimitive;
const o54 = {
    [v52]() {
    },
    "b": v10,
    "g": v8,
    "c": Uint8Array,
    "h": v13,
    "f": v49,
};
