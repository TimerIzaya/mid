let v0 = 915;
let v1 = Float64Array;
const v2 = new v1(v0);
const v5 = new Uint16Array(v2, 2156);
let v13 = 1e-15;
v5[0.008868537081181294] = 0.008868537081181294;
let [v14,...v15] = v0;
let v18 = -500153.6478216455;
({"byteOffset":v13,"g":v0,"length":v1,} = v2);
new Uint16Array(2156);
const t10 = "PI";
new t10(v13);
new Uint8Array(1);
[-0.0,514365.6339200251,1.0];
[-1.117646846195461e+308,-5.0,-4.0,0.6236999685646897,-5.0];
[1000000000000.0,-1e-15,-Infinity];
const v34 = Math.exp(v1);
v18++;
Math.atan2(v15, -536870912);
Math.abs(-536870912);
~v34;
Math.sinh(NaN);
new Float64Array(v0);
new BigUint64Array(8553);
function f46() {
    return [8n];
}
%PrepareFunctionForOptimization(Float64Array);
f46();
