function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 1;
    } catch(e3) {
    }
    try {
        this.a = 1;
    } catch(e4) {
    }
    try {
        this.d = 1;
    } catch(e5) {
    }
}
function f6() {
    function f7() {
        let v8;
        try { v8 = F0(); } catch (e) {}
        v8.length = v8;
        return F0;
    }
    return f7;
}
Object.defineProperty(F0, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f6 });
new F0();
const v12 = new F0();
const v13 = new F0();
[558920101,997938241,1874902650,-16,-11,-65535,-28428];
[1000,1067251164,983177012,65535,268435440,4294967295,536870889,-3117,59171];
const v16 = [536870912,-256,-55386,-256];
class C17 extends F0 {
    set e(a19) {
        Reflect.construct(Int8Array, [1126838905]);
        class C26 {
            [-2] = 31876;
        }
        new C26();
        const v28 = [-20096,4294967296,-65537,-2];
        const v29 = [-1947047520];
        v28["slice"]([[v29,v29,v29,v28]]);
        try { a19(); } catch (e) {}
    }
    #a = v13;
    a;
    [F0] = v12;
    [v16];
}
new C17();
new C17();
new C17();
class C42 {
}
const v43 = Array();
const v44 = new C42();
function f45(a46, a47, a48) {
    const o56 = {
        toString(a50, a51, a52) {
            a47 < v43;
            super[v44];
            return Array;
        },
        get d() {
        },
    };
    const v57 = o56.__lookupSetter__;
    ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
    const v61 = [-1539,1,12];
    function f62() {
        return f62;
    }
    function f63(a64, a65) {
        const o66 = {
            [a64]: v61,
        };
        return a65;
    }
    f63(f63);
    f63(f62);
    try { new v57(a46); } catch (e) {}
    return o56;
}
%PrepareFunctionForOptimization(f45);
const v71 = f45(f45(), Array, Array);
%OptimizeFunctionOnNextCall(f45);
f45(v43, f45, v71);
