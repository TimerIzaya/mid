function f0() {
}
const v1 = [-59466,-2037264924,-714178970,875149318,1000];
[2,-925697480,389824235,11,-8,2147483649,946,-543976153,-65536];
[2,-53442,37973,-421757833,10000,1981879491];
class C4 extends f0 {
    static {
        this.prototype = this;
        const v6 = super.d;
        try { Uint32Array(this, v6, this); } catch (e) {}
        new Uint32Array(240);
        1024 >>> 1024;
        new Uint32Array(1024);
        new Int16Array(1000);
    }
    a = f0;
    #d = f0;
}
const v18 = C4?.constructor;
v18.d = v18;
try { new v18(v1); } catch (e) {}
const v20 = new C4();
try { v20.a(); } catch (e) {}
const v22 = new C4();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
const v25 = new C4();
const v26 = v25?.constructor;
let v27;
try { v27 = new v26(); } catch (e) {}
try { v27.a(); } catch (e) {}
10000n - 10000n;
423753176n << 423753176n;
try { ("arguments").toWellFormed(); } catch (e) {}
const v38 = [-65535,536870889,4096];
v38[1] = v38;
for (let v39 in v38) {
    v39[0] = v39;
    try { Math.imul(-128n, C4); } catch (e) {}
    1000000000000.0 - 1000000000000.0;
    const v44 = v39--;
    const v45 = v44 > v44;
    v45 || v45;
    const v47 = Math.log10(v20);
    v47 >>> v47;
    v39 ** 1000000000000.0;
}
