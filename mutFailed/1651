const v1 = new WeakSet();
function f5(a6, a7) {
    new Uint8ClampedArray([515943.2030917471,-1e-15,1.7976931348623157e+308,0.19475803117559898,-546414.0415788401,285129.04068811354]);
    Symbol[Symbol.toPrimitive] = f5;
    Symbol.for(Symbol);
    const o15 = {
        "g": a7,
        "d": a7,
        "c": a6,
        "e": 0.0,
        [-2.2250738585072014e-308]: -2.2250738585072014e-308,
        ...v1,
        "b": a7,
        [0.0]: -3.0,
        "f": v1,
        __proto__: v1,
    };
    return o15;
}
f5(-3.0, f5);
f5(-3.0, f5(-2.2250738585072014e-308, 0.0));
f5();
const v24 = new Uint32Array(2432);
const o25 = {
    ...v24,
};
const v27 = [];
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    this.d = v27;
    const o31 = {
        ..."boolean",
    };
    function f32(a33, a34) {
        return a33;
    }
    Object.defineProperty(o31, 1, { configurable: true, get: f32 });
}
new F28();
const v36 = new F28();
new F28();
const t42 = Array(8);
t42[2147483648] <<= 8;
const t44 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
t44.length >>>= -65536;
function f44(a45) {
    const o49 = {
        __proto__: 2,
        ...a45,
        p(a47, a48) {
            return a48;
        },
    };
    return o49;
}
%OptimizeFunctionOnNextCall(f44);
const v51 = 2.0 && 2.0;
v51 ^ v51;
const v54 = 5.0 >>> 5.0;
let v55 = 65536n;
~(v55--);
~(-2147483649n / -2147483649n);
let v61 = 536870888n;
v61++;
const v63 = [-3.5650322397951273,1000.0,0.802460520523592,5.641883312396217e+306];
const v64 = [431.4791340196293,-3.0,125159.99825031101,21.6056810036589,1.6160148855763925e+308,1.7462069791264565e+308,5.0,1e-15,-1000.0];
try { v64.toString(); } catch (e) {}
const v66 = [-8.120152476758125,-1e-15,-1.5928050163034335,-4.783440554757437e+307,1.169258471369545e+308,32.56378988352844,1000.0];
try { v66.lastIndexOf(v63); } catch (e) {}
class C68 {
}
const v69 = C68.prototype;
try { v69(v36); } catch (e) {}
const v71 = new C68();
class C72 {
}
async function f73(a74, a75, a76, a77) {
    return (await C72).call();
}
v71.isPrototypeOf(v54);
