function f0() {
    function F3(a5, a6, a7, a8) {
        if (!new.target) { throw 'must be called with new'; }
        const v9 = this.constructor;
        try { new v9(this, a8, this); } catch (e) {}
        a7++;
        a7 >>>= F3;
        const v14 = Int32Array - 127;
        v14 / 127;
        Math.atan2(v14, v14);
    }
    const o48 = {
        2: "delete",
        [0.8085609816333835]: "delete",
        get g() {
            let v21;
            try { v21 = this["toString"](-4, this, "toString", this); } catch (e) {}
            %OptimizeFunctionOnNextCall(f0);
            function F23(a25) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    function f26(a27, a28, a29) {
                        return a28;
                    }
                    const v32 = [10000n];
                    const o33 = {
                        "arguments": v32,
                        "type": "function",
                    };
                    Worker(f26, o33);
                } catch(e35) {
                }
            }
            new F23();
            function F37(a39, a40, a41) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.g = v21;
                } catch(e42) {
                }
                try {
                    this.e = -4;
                } catch(e43) {
                }
                try {
                    this.h = a40;
                } catch(e44) {
                }
            }
            new F37(0.8085609816333835, F37, -4);
            new F37(0.8085609816333835, F37, 0.8085609816333835);
            const v47 = new F37("delete", v21, "toString");
            return v47;
        },
    };
    function f49() {
        return Int32Array;
    }
    Object.defineProperty(o48, "o", { enumerable: true, get: f49 });
    o48[2];
    o48[2] = o48;
    return o48;
}
const v51 = f0();
const v52 = f0();
const v53 = f0();
Object.defineProperty(v53, "o", { value: v53 });
v53[2] = v53;
function f54(a55) {
    a55[2] = v51;
    a55[2];
    a55[2] = a55;
    const o63 = {
        o(a58) {
            this.toString = f54;
            a58.toString = f0;
            a58[2];
            super.e = a55;
            const o60 = {
                "apply": f0,
                "construct": f0,
                "defineProperty": f0,
                "deleteProperty": f0,
                "e": f0,
                "getPrototypeOf": f0,
                "has": f0,
                "isExtensible": f0,
                "ownKeys": f0,
                "preventExtensions": f0,
                "set": f0,
                "POSITIVE_INFINITY": f0,
            };
            new Proxy(v52, o60);
            return this;
        },
    };
    o63.constructor = f0;
    return o63;
}
const v64 = f54(v51);
let v65;
try { v65 = v64.o(v51); } catch (e) {}
const v66 = v65?.constructor;
try { new v66(v53); } catch (e) {}
const v68 = f54(v51);
const v69 = f54(f0);
class C73 {
    static #g = 3n;
    #a;
    constructor(a75, a76, a77) {
        a77[2] = a77;
        try { this.m(f54, f54, a75, v69); } catch (e) {}
        try { a77.o(v64); } catch (e) {}
        a75[2] = a75;
        const v80 = a76?.o;
        try { new v80(v51); } catch (e) {}
        return f0;
        try {
            a76.__proto__ = a76;
        } catch(e82) {
        }
    }
    m(a84, a85, a86, a87) {
        return -472843.4185023869;
    }
}
C73[2] = v64;
const v91 = new C73(v53, v69, v68);
function f92() {
    let v93 = undefined;
    const v94 = v93++;
    return v94 >> v94;
}
v91[Symbol.toPrimitive] = f92;
const v98 = new C73(C73, v64, v69);
v98.toString = Symbol;
v98.name;
new C73(v69, v53, v69);
const v101 = /[tlD]/vdims;
v101.hasIndices;
try { v101.compile(v64, v91); } catch (e) {}
