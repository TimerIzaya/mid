function F0() {
    if (!new.target) { throw 'must be called with new'; }
    let v3 = [-2147483648,-9,-1584775484,-60956,-4294967297,17264,2147483647,-1388869279,1];
    [6,1024,-361715281,-2147483647,19910,6,-4];
    v3 &= [9007199254740990];
    F0 instanceof F0;
    try {
        this.a = 1024;
        this[10] = 1024;
        let {"a":v7,"e":v8,} = this;
        v7[+v7] = v7;
    } catch(e11) {
    }
}
const v12 = new F0();
const v13 = new F0();
const v14 = new v13();
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(a18, this); } catch (e) {}
    try {
        this.b = a18;
    } catch(e21) {
    }
}
const v22 = new F15(v13, v13);
v22.b = v22;
const v23 = new F15(v14, v22);
const v24 = new F15(v12, v23);
[-31728,2,-2148,13,1154707671];
const v26 = [4294967297,-11,-17007,-9007199254740992,1932080600,6533];
try { v26(v14, F15, v22, v13, v13); } catch (e) {}
[] = d8;
v24 << v23;
typeof v24 === "function";
[-1,-8460,-1084748875,1630720855,860618043,-2,8774,-1956,9007199254740991];
function f34() {
    return v13;
}
let v35 = 3995;
v35--;
const v38 = new BigInt64Array(v35);
try { v38.reduce(f34); } catch (e) {}
const v40 = new BigInt64Array();
-v38.indexOf(v40);
