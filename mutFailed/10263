Symbol.toPrimitive;
const o3 = {
};
const v4 = [];
BigInt64Array.length = BigInt64Array;
new BigInt64Array(v4);
const v8 = new Uint8ClampedArray(8);
v8.toString = Symbol;
try { v8.slice(Uint8ClampedArray, v8); } catch (e) {}
Int8Array.d = Int8Array;
5.0 - 5.0;
-(5.0 / -2.220446049250313e-16);
gc();
const v19 = new Int8Array(1024);
v19.toString = Symbol;
v19[603] = v19;
Uint8ClampedArray.name;
const o23 = {
};
%PrepareFunctionForOptimization(2);
let v25 = 0;
while (v25 < 6) {
    v25++;
}
new Uint8ClampedArray(3948);
let v31;
try { v31 = ("-9").normalize(); } catch (e) {}
v31.length;
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    try { v35["find"](..."find", a40, ...v34); } catch (e) {}
    return a37;
}
let v44;
try { v44 = ("8").trimLeft(); } catch (e) {}
try { v44.codePointAt(v31); } catch (e) {}
try { ("toString").sup(); } catch (e) {}
const v49 = ("undefined")?.search;
try { new v49(v4); } catch (e) {}
try { ("undefined").search(Uint8ClampedArray); } catch (e) {}
Math.cbrt(Math);
function f54(a55, a56) {
    return a55;
}
("undefined").localeCompare("undefined", "toString");
