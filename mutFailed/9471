let v3 = 2721;
new Uint8Array(v3);
const v8 = new Uint8Array(1192);
4096 + 4096;
const v12 = new Float64Array(4096);
try { v12.slice(Uint8Array, 268435456n); } catch (e) {}
const v14 = v8[7];
let [] = v8;
try {
    new Uint8Array(v8, -490959109, 4096);
} catch(e18) {
}
const v21 = new Array(1024);
try { v21.push(v3); } catch (e) {}
try { ("undefined").link("undefined"); } catch (e) {}
268435440 + 268435440;
new Uint8Array(268435440);
const v29 = [3.0,-533.6058053075066,-3.0,-Infinity,9.77162142398339,-6.974865860269324,0.0,-1.7976931348623157e+308,1000000.0];
function F30() {
    if (!new.target) { throw 'must be called with new'; }
}
for (let [i35, i36] = (() => {
        10 & 10;
        return [0, 10];
    })();
    i35 * i35, i35 < i36;
    (() => {
        let v41 = i35++;
        v41--;
        const v43 = i36--;
        v43 + v43;
    })()) {
    const v47 = ("undefined").__proto__;
    try { v47.strike(); } catch (e) {}
    v8[i35] = Float64Array;
}
class C49 {
    constructor(a51, a52, a53) {
        this[1024];
        a51.caller = a51;
        try { new a52(v14, v29, this); } catch (e) {}
        a52.e = a52;
        const v56 = a52.constructor;
        v56.name = v56;
        class C57 extends v56 {
        }
        const v58 = new C57();
        v58.caller;
        try { v58(); } catch (e) {}
    }
    valueOf(a62, a63, a64, a65) {
        v3 **= a62;
        return 2147483649n;
    }
    1024 = v29;
}
try { C49.bind("undefined"); } catch (e) {}
new C49(F30, C49);
