let v0 = 0.3425213948644915;
class C3 {
    static {
        const t3 = 0.5612490327146098;
        t3[2] = this;
        super[965.857395492762];
        [-1502393009,-2,512,268435441,2,11454];
        [16,-536870912,128,1622564390,-4];
        [10,-4294967296,48584,-1872977668];
    }
    129;
    #h;
    176 = 0.5612490327146098;
    1073741825;
}
new C3();
new C3();
const v11 = new C3();
class C12 extends C3 {
    constructor(a14, a15) {
        super();
        for (let v16 = 0; v16 < 32; v16++) {
            v11["p" + v16] = v16;
        }
    }
    static f;
    static #h = v0;
    static #g;
}
new C12(0.5612490327146098, v0);
new C12(0.5612490327146098, 965.857395492762);
new C12(965.857395492762, 0.5612490327146098);
class C22 {
    static {
        for (let i26 = 0, i27 = 10;
            i26 < i27;
            (() => {
                function f31() {
                    return f31;
                }
                const v32 = [601759695];
                const v33 = [1073741824,1073741823,1376142744,1073741825];
                function f35(a36, a37, a38, a39) {
                    function f41() {
                        return a36;
                    }
                    f31();
                    const v44 = new Int8Array();
                    function f45(a46, a47) {
                        return i27;
                    }
                    f45(f45(v33, C22));
                    v44.buffer.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f41);
                    let v54;
                    try { v54 = v33["find"](..."find", a39, ...v32, ...v33, ...522675525n); } catch (e) {}
                    v54 <= a38;
                    return arguments;
                }
                for (let v56 = 0; v56 < 10; v56++) {
                    f35();
                }
                v0++;
            })()) {
        }
    }
}
