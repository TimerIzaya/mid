function f0() {
    const o16 = {
        get flags() {
            try { this.from(this, 2147483649, this); } catch (e) {}
            2 != 2147483649 ? 2 : 2147483649;
            return this;
        },
        n(a9, a10) {
            a10 ** -13;
            return a9.exp(-13 | a10);
        },
    };
    return o16;
}
const v17 = f0();
const v18 = f0();
function f19(a20) {
    function F21(a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        const v25 = this.constructor;
        try { new v25(this); } catch (e) {}
        a24++;
        this.g = a23;
    }
    return F21;
}
v18[Symbol.toPrimitive] = f19;
const v30 = f0();
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    function f35(a36) {
        c = f19;
        try {
            a34.g = a34;
        } catch(e37) {
        }
        return this;
    }
    a34.toString = f35;
    this.b = v30;
    v17 < a34;
    Object.defineProperty(Int16Array, "valueOf", { value: Symbol });
    new Int16Array(4096);
    new Float32Array(1);
    new BigUint64Array(1512);
    try {
        if (Int16Array == 1) {
            f0();
        } else {
        }
        this.e = a34;
    } catch(e53) {
    }
    try {
        this.b = a34;
    } catch(e54) {
    }
    try {
        this.a = f0;
    } catch(e55) {
    }
}
const v56 = new F31(v30, v17);
new F31(v18, v30, F31, v56);
new F31(v17, v18);
new Float64Array([-9223372036854775808,-12]);
