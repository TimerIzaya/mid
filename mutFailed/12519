let {...v4} = [1000000000000.0,0.9960435535667199,1000.0,-1.6540773985510377e+308,0.3018853678306006,410.9648048644401,-6.0085450863810586,-529.8311372035074];
try {
    v4.fuck(v4);
} catch(e6) {
}
class C7 {
    g;
    constructor(a9) {
        for (const v10 of "5") {
            v10.d = v10;
        }
    }
    valueOf(a12, a13) {
        try {
            a12 &&= a12;
        } catch(e14) {
            256 >>> +a12;
            const v20 = 23520 << 268435456;
            (268435456 / 256) & 256;
            a13 & v20;
        }
        return this;
    }
}
const v24 = new C7(256, v4, C7);
const v25 = new C7();
new WeakMap();
const v28 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F29(a31, a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v35 = 0; v35 < 100; v35++) {
        function f36(a37, a38, a39) {
            const o41 = {
                get d() {
                    return this;
                },
            };
            for (let i = 0; i < 10; i++) {
                0 < 10;
                delete v28[256];
            }
            return o41;
        }
        f36(a34, f36, f36);
    }
}
let v47 = new C7();
let v50 = 1881948022;
class C51 {
    static #g = "5";
    static f;
    NaN;
    constructor(a53, a54, a55, a56) {
        let v52 = this;
        v52 &&= v25;
    }
    set c(a58) {
        switch (a58) {
            default:
                -268435456 < v24;
                C51 ? -268435456 : v24;
                break;
        }
    }
    [v50] = C7;
}
const v61 = new C51(C51, C51, v50, "5");
new C51(C51, v61, 256, C51, C51, F29);
const v63 = new C51(v47, 256, -268435456, C7);
class C64 {
    static get c() {
        while ((() => {
                const v68 = 0 < 10;
                let v69 = -268435456;
                v69--;
                v69 + v69;
                -256;
                try { new DataView(240); } catch (e) {}
                return v68;
            })()) {
            v47 = C7;
            this[2147483648];
            try {
                v24.valueOf(C64, /Va\W/udimsy);
            } catch(e80) {
            }
            v50++;
        }
        return this;
    }
}
new C64();
const v83 = new C64("5", C64);
new C64(v83, v28, v83);
async function f85(a86, a87, a88) {
    return a88;
}
f85.constructor;
try {
    v63.resizable = 145253519;
} catch(e91) {
}
C51();
