const v2 = new BigUint64Array(127);
new Uint8ClampedArray(5);
let v6 = 255;
v6--;
const v9 = new Uint8ClampedArray(v6);
v9[141] = v9;
try { Uint16Array(127, Uint16Array, 127); } catch (e) {}
new Uint16Array(v6);
let v14 = 10;
v14 >> v14;
v14--;
const v18 = new Int8Array(127);
const v19 = v18?.filter;
try { new v19(Int8Array); } catch (e) {}
1267 & 1267;
let v24;
try { v24 = Uint32Array.from(v2); } catch (e) {}
const v25 = new v2(1267);
const v27 = new v18();
try { v27.find(BigUint64Array); } catch (e) {}
const v29 = [512,7,-1073741824];
v29[1];
v29[1];
const o32 = {
};
o32.f = o32;
function f33(a34, a35) {
    const v36 = a34?.constructor;
    try { new v36(v36, v24, v36); } catch (e) {}
    try { new v36(v27, a35, a35); } catch (e) {}
    a35.a = v6;
    return 5;
}
v25.set = f33;
const v41 = new f33(v27, o32);
try { new v41(1267, Int8Array, v41); } catch (e) {}
v41.__proto__ = v29;
