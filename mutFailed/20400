class C3 {
    constructor(a5, a6) {
        function f7(a8, a9) {
            const v10 = a9?.b;
            try {
                const v12 = [a9,a8,v10,"symbol","10000"];
                this.fuck("symbol", v12, v12, v10);
            } catch(e14) {
            }
            return 536870887;
        }
        this[Symbol.toPrimitive] = f7;
        this[10000] = this;
        a5 - a5;
        this[10000];
        a5 << a5;
        let v20;
        try { v20 = ("10000").charCodeAt(a6); } catch (e) {}
        v20 >> v20;
        const v22 = 536870887 * this;
        v22 % v22;
        try {
            const t22 = "10000";
            t22.__proto__ = v20;
        } catch(e24) {
        }
    }
    #g = 536870887;
    ["10000"] = 536870887;
    static #f = 536870912;
    #c = 536870912;
}
function f25() {
    const v27 = ("10000").constructor;
    function f28(a29, a30, a31, a32) {
        return typeof 9007199254740990n >= "object";
    }
    let v36;
    try { v36 = new v27(); } catch (e) {}
    f28(9007199254740990n, v36, v27, v27);
    return f28;
}
C3[Symbol.toPrimitive] = f25;
const v40 = new C3(536870912, "10000");
v40[Symbol.toPrimitive] = Symbol;
const v43 = v40[10000];
const v44 = v40[10000];
Object.defineProperty(v44, "valueOf", { writable: true, configurable: true, value: f25 });
v44 >>> v44;
const v46 = new C3(v40, 536870887);
v46[10000];
const v48 = new C3(536870887, C3);
const v49 = v48?.__defineSetter__;
try { new v49(v44, v40); } catch (e) {}
let v51 = v48[10000];
v51--;
const v53 = /[a\sc3]/gv;
v53.toString = Symbol;
const v54 = /Y+/gdms;
v54.dotAll = v54;
const v55 = /\x60/gvimy;
function f56(a57, a58) {
    function f59(a60, a61) {
        function f62() {
            const o65 = {
                get b() {
                    super[this] = this;
                    return f62;
                },
                ..."b",
            };
            return o65;
        }
        const v66 = f62();
        let v67;
        try { v67 = v66.assign(); } catch (e) {}
        return v67;
    }
    Object.defineProperty(a58, "constructor", { configurable: true, value: f59 });
    a58[10000] = a58;
    const v68 = a57?.constructor;
    try { new v68(v55, v55); } catch (e) {}
    const o82 = {
        [a57]: a57,
        set d(a71) {
            for (let v72 = 0; v72 < 34; v72++) {
                new Uint16Array(8);
                new Float64Array(203);
                new BigInt64Array(1482);
            }
        },
    };
    o82[10000] = v43;
    o82.d = o82;
    o82.a = o82;
    return o82;
}
f56.arguments;
const v85 = f56(f56(v53, v48), "10000");
v85.a = v85;
f56(v48, v85);
1561n - 1561n;
class C89 {
}
C89.name;
const v91 = new C89();
v91.constructor = f56;
const v92 = v91?.constructor;
try { new v92(); } catch (e) {}
const v94 = [v91,1561n];
const v96 = v94.with().toLocaleString();
try { v96.toWellFormed(); } catch (e) {}
function F98(a100, a101, a102, a103) {
    if (!new.target) { throw 'must be called with new'; }
    let v104;
    try { v104 = this.propertyIsEnumerable(v94); } catch (e) {}
    v104 && v104;
    function f106() {
        const v108 = ("Vre").constructor;
        try { new v108(this); } catch (e) {}
        return v108.raw();
    }
    f106.name;
    try { f106(); } catch (e) {}
}
new F98();
