const v2 = new Uint8Array(2);
let v5 = Float32Array.BYTES_PER_ELEMENT;
v5++;
new Float32Array(4);
const v10 = new Uint32Array(16);
v10[15] = v10;
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.constructor;
    try { new v17(a16, a15, this, this); } catch (e) {}
    a13 >> a13;
    a15 === 4;
    -a13;
    let v22 = a16 % a16;
    v22--;
    try {
        v10.d = a14;
    } catch(e24) {
    }
}
const v25 = new F11(16, 16, 2, 16);
const v26 = new F11(2, 2, 4, 4);
v26.length = v25;
const v27 = new F11(4, 2, 16, 16);
try { new Array(Uint8Array); } catch (e) {}
4087 - 4087;
const v32 = Array(4087);
v32.e = v32;
const v33 = v32 == v26;
v33 || v33;
if (v33) {
    delete Array?.prototype;
} else {
    Array(4087);
    const v37 = v27?.constructor;
    try { new v37(v2); } catch (e) {}
}
for (const v39 of v26) {
}
/a[^a]/gv;
/FIG[^123]*/gdms;
const v42 = /(0abc)/vi;
try { v42.toString(); } catch (e) {}
const v46 = 21178 * 21178;
v46 >> v46;
0.3819899289831499 + 0.3819899289831499;
const v51 = Math.imul(21178, 21178);
v51 + v51;
0.3819899289831499 && v32;
const v54 = -(-36874);
v54 >>> v54;
