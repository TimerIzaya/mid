const v2 = new Uint16Array(256);
const v5 = new Uint8ClampedArray(9);
new Int32Array(4096);
class C9 extends Uint8ClampedArray {
    get e() {
        for (let v11 = 0; v11 < 32; v11++) {
            v2["p" + v11] = v11;
        }
        return v5;
    }
    3040;
    [Uint16Array];
}
new C9();
new C9();
new C9();
Date.parse(-3);
-2.241327492701015 & 9007199254740991;
const v23 = [-6.672391061426152e+307];
const v24 = [1,-15];
function f25() {
    const v26 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
    function f27(a28, a29) {
        function F31(a33) {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = this?.constructor;
            try { new v34(F31); } catch (e) {}
            139837843 in this;
        }
        new F31();
        const o38 = {
            __proto__: v26,
        };
        return o38;
    }
    v24.splice(v23, f25, v23);
    Math.tan(-532550611);
    function f43(a44, a45, a46) {
        const o54 = {
            n(a48, a49, a50) {
                return f43;
            },
            valueOf(a52, a53) {
                return a53;
            },
        };
        return o54;
    }
    v23["pop"]();
    const v57 = [155533.8602852358,2.0];
    function F59() {
        if (!new.target) { throw 'must be called with new'; }
        for (const v64 of Array(19793)) {
            v57[658291203] = null;
            Math.cbrt(19793);
            Math.exp(0.4890055133608564 || 0.4890055133608564);
        }
        const v70 = [19793,19793,19793,19793];
        [v70,v70];
        [Array,Array,Array,Array] >= Uint16Array;
    }
    const v77 = new Float32Array(64);
    for (let v78 = 0; v78 < 5; v78++) {
        Array(36862);
    }
    v77.toSorted();
    return f25;
}
%PrepareFunctionForOptimization(f25);
f25();
const v85 = [-2.220446049250313e-16,-1000000000.0,-1e-15,1000000000.0,-1.0,1000000000.0,-1000.0];
const v86 = [1000000000000.0,1e-15];
v85.fill(v86, v85);
v86[3] = -1000000.0;
%OptimizeFunctionOnNextCall(f25);
f25();
