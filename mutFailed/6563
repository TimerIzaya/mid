function f0() {
}
[1000000000000.0,609.2011374935848,-2.220446049250313e-16,1000000.0,2.0,-2.0,989.7895841188342,2.2250738585072014e-308];
[1.5391991345174017e+308,0.0];
const v3 = [4.0,-1.4170449782917956e+308,1000.0,-Infinity,NaN,-1000000000.0,9.412716223876225e+307,-6.162007467559601,0.5990747676613505,3.823931444201003];
Array[121] = Array;
const v6 = new Array(4);
v6[1] = v6;
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
const v8 = [-8.420032276629299e+306,-1.0,1.0205774347528786e+308];
[-1000.0,-677.4885929550392,1.2128781591024907e+308,0.25954272604827267,489481.4581208839,NaN,4.0,-1000000.0,0.38311933686908506];
class C10 {
    static {
        this instanceof Array;
        const v13 = Array[121];
        Object.defineProperty(this, v6, { configurable: true, get: f0, set: f0 });
        Array(v13);
    }
    #toString(a17, a18, a19, a20) {
        let v21;
        try { v21 = a20.forEach(f0); } catch (e) {}
        v21.__proto__;
        Math.sign(-148.96762757019872);
        const v27 = +v8;
        Math.round(v3);
        Math.log(v27);
        12 >>> -148.96762757019872;
        -148.96762757019872 >>> v8;
        return a19;
    }
}
new C10();
new C10();
new C10();
/ND2/gds;
class C37 extends Map {
}
const v38 = new C37();
v38.isPrototypeOf();
class C42 {
    static {
        for (let v44 = 0; v44 < 25; v44++) {
            const v45 = [601759695];
            const v46 = [1073741824,1073741823,1376142744,1073741825];
            function f48(a49, a50, a51, a52) {
                try { new a49(); } catch (e) {}
                a51 << a51;
                function f56() {
                    return a49;
                }
                const v58 = new Int8Array();
                const v61 = BigUint64Array * 536870887;
                v61 - v61;
                Number.isNaN(v61 ** v61);
                function f66(a67, a68) {
                }
                try { f66(); } catch (e) {}
                const v70 = v58.buffer;
                const v71 = v70.__defineGetter__;
                try { v71(); } catch (e) {}
                Object.defineProperty(v70, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f56);
                let v73 = "find";
                let v74;
                try { v74 = v46[v73](...v73, a52, ...v45); } catch (e) {}
                const o75 = {
                };
                function f76(a77) {
                    [v73] = v58;
                }
                Object.defineProperty(o75, "e", { writable: true, configurable: true, set: f76 });
                o75.e = o75;
                v74 <= a51;
                return arguments;
            }
            for (let v79 = 0; v79 < 5; v79++) {
                f48(this, v79, v79);
            }
        }
    }
}
