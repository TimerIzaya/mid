const t0 = 65537;
new t0();
new Date();
const o11 = {
    set d(a6) {
        for (let v7 = 0; v7 < 10; v7++) {
            class C9 {
                4294967296 = 996195971n;
            }
            new C9();
        }
    },
};
class C12 {
    constructor(a14) {
        o11.d = a14;
    }
}
[-980.5824720912317,220.87306059722687,9.256467084465907,2.220446049250313e-16,216.49430257262702,-3.0,922010.7940853217];
[4.0,-1.6450304137495472e+308,404.85511094442995,-5.490909930287551e+307];
[1000000000000.0,-826715.9393470613,1000000000.0,2.220446049250313e-16,-3.0,-395.30702191263595,-Infinity,0.4481559300036596,-2.0];
class C21 {
    static get d() {
    }
    c;
    static #e = -1000000.0;
    4294967295;
    #a;
}
const v28 = new SharedArrayBuffer();
new DataView(v28);
const v31 = [9.67594229565212e+307,1.3576631959898096e+308,-80422.04940212553,-1000000000000.0];
const v32 = [-1024,-4294967295];
const v33 = [v32,v32,v32,v32];
function f34(a35, a36) {
    return a35;
}
const v37 = f34();
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
}
const v45 = new F39();
for (let v46 = 0; v46 < 5; v46++) {
    function f47() {
        const v49 = ("Vre").strike();
        v49[2];
        let v51;
        try { v51 = v49.charAt(v33); } catch (e) {}
        try { v51.codePointAt(v31); } catch (e) {}
        const v53 = v49.link();
        v53[29] = v53;
        try { v53.lastIndexOf(v46); } catch (e) {}
        let v55;
        try { v55 = v53.codePointAt(v37); } catch (e) {}
        const v56 = v55 << v55;
        v56 - v56;
        const v58 = v53.includes(164140152);
        const v59 = v58 || v58;
        const v61 = Array();
        try { v61.includes(); } catch (e) {}
        try { v61.forEach(v32); } catch (e) {}
        v61.unshift(v45, v46, F39, v46, v61.pop());
        try { Set(v59); } catch (e) {}
        const v68 = new Set();
        const v69 = v68.add(v68);
        try { v69.forEach(); } catch (e) {}
        const v71 = v69.entries();
        try { v71.next(); } catch (e) {}
        let v73;
        try { v73 = v71.next(); } catch (e) {}
        v73.done = v73;
        try { v71.next(); } catch (e) {}
        class C75 {
        }
        const v76 = C75.length;
        v76 / v76;
        const v78 = new C75();
        const v79 = v78?.constructor;
        v79.g = v79;
        v79.d = v79;
        let v80;
        try { v80 = new v79(); } catch (e) {}
        const v81 = v80?.constructor;
        try { v81(); } catch (e) {}
        const v83 = v78.hasOwnProperty();
        return v83 || v83;
    }
    f47();
    %OptimizeFunctionOnNextCall(f47);
}
[-12,1,536870888,1073741823,-3,1406959537,1073741823,1073741825,840037064];
[-1949115679,13,-10,-836249694,9007199254740992,9007199254740990,-128,10000];
[15,-62395,-30426,65535,-1715887614,9007199254740991];
function f90() {
    const o91 = {
    };
    return o91;
}
const v92 = f90();
const v93 = f90();
Uint8ClampedArray.b = Uint8ClampedArray;
new Uint8ClampedArray(129);
function f97(a98, a99) {
}
for (let v100 = 0; v100 < 25; v100++) {
    class C104 {
    }
    const v105 = new C104();
    const v107 = /wo?/gud;
    /[\011]\x60O\ud808\udf45*/gms;
    const v109 = /[x\dz]PEuWxyz{1,32}?/gud;
    class C110 extends C104 {
        static set d(a112) {
            "9" / (12 && v105);
        }
    }
    v109[Symbol.toStringTag] = v107;
    const v117 = [601759695];
    const v118 = [1073741824,1073741823,1376142744,1073741825];
    function f119(a120, a121, a122, a123) {
        a120[4] = a120;
        a121[4] = a121;
        BigUint64Array * 536870887;
        try { v118["find"](..."find", a123, ...v117, ...v118); } catch (e) {}
        return v100;
    }
    for (let v129 = 0; v129 < 5; v129++) {
        Math.atan(v100);
        do {
        } while (0 < 0)
        f119(v92, v93);
    }
}
