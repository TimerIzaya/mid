new Float64Array(1000);
let v8 = Float64Array;
v8 = -9223372036854775807;
const v9 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const v11 = (1073741824 && v8) <= v9;
new Uint16Array(1073741824);
const t6 = [-494407.199634183,0.6127672924664167,-85.60764064198793,1.4954577398132937e+308,-831252.5110682796,-2.2250738585072014e-308,0.6226417241742689,NaN,-3.0];
delete t6[-9703];
new v11();
class C18 {
}
new C18();
new Float64Array(1000);
function f23() {
    const o25 = {
        get c() {
            return this;
        },
    };
    return o25;
}
class C26 extends f23 {
    #toString(a28, a29, a30, a31) {
    }
}
new Uint16Array(2);
function f36() {
    const o45 = {
        0: 549538.9552070533,
        [3.0](a40, a41) {
            super[549538.9552070533];
            try {
                f36();
            } catch(e44) {
            }
        },
    };
    return o45;
}
const v46 = f36();
const v47 = f36();
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    a52[0];
    let v57 = 10;
    for (; v57--;) {
        a53[3] = a53;
    }
    const v59 = this?.species;
    try { v59.valueOf(v47); } catch (e) {}
    try { new v59(a52, a54, a53, a52); } catch (e) {}
    a52[0] = a52;
    a55[0] = a55;
    this.f = a52;
    this.f = v47;
}
const v62 = new F50(v47, v46, -61894, v46);
new F50(v47, v46, 31995, 31995, v62);
