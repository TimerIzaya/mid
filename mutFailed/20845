const v3 = new Uint8Array();
v3.buffer;
function F5(a7, a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    a9.reverse();
}
const v11 = new Uint8Array(3519);
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F12(F12, a15);
        const v20 = -1000000.0 | -32070;
        (-32070) ** v20;
        Math.log10(Math);
        -v20;
    } catch(e24) {
    }
}
const v27 = /F((((.).).).)[Ia*b]/v;
function f30() {
    function f32() {
        "Vre" >>> (undefined << 0.28963498121041586);
        return undefined;
    }
    return f32;
}
Object.defineProperty(Math, "toString", { writable: true, value: f30 });
v27[Math] = -2.6653538746432233;
([1,8]).fill(3519);
const v39 = new Uint32Array(241);
const v42 = new Set();
class C43 {
}
function f44() {
    return f44;
}
new Int16Array(163);
const v47 = [v11];
[3519,v39,v47];
const v49 = [v47,Uint8Array];
function f50(a51) {
    return f50;
}
const v52 = [-31263,-15,-1024];
Date(v52, 512, 512, 512, v52, 512, 512);
class C57 extends Date {
}
const v58 = new C57(-4294967296);
Object.defineProperty(Date, v58, { get: Date, set: Date });
const v60 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
const v62 = ("h").split();
const v63 = [];
v63[2] = v42;
class C64 {
    constructor(a66, a67) {
        try { a66.findLast(); } catch (e) {}
        a66[2];
        const v70 = /W(jy2)/udy;
        const v72 = new Uint8Array();
        try { v72.reduceRight(); } catch (e) {}
        for (let v74 = 0; v74 < 250; v74++) {
            const o81 = {
                ...v72,
                [v60](a76, a77, a78) {
                },
                get f() {
                    super.n();
                },
            };
        }
        for (let v82 = 0; v82 < 5; v82++) {
            -v82;
            ("p")[0];
            v62["p" + v70] = v82;
        }
    }
}
new C64(v63);
const o89 = {
    "type": "function",
};
o89.arguments = v49;
new Worker(f50, o89);
