class C3 {
    a;
    static #d = "Rl2I";
    3666356383 = "Rl2I";
    #toString(a5, a6) {
        let {"b":v7,"d":v8,} = a6;
        try {
            v7.#d = a6;
        } catch(e9) {
        }
        return "QLlbA";
    }
    static c;
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
9007199254740991n * 9007199254740991n;
Symbol.iterator;
[-2.0,272822757,"function"];
function f21(a22, a23, a24) {
    const o34 = {
        n(a26, a27, a28) {
            a24["lastIndexOf"](..."lastIndexOf", ...a28, this, a22, v11, a27);
            return a27;
        },
        7: a22,
        [v12]: a23,
        "h": v10,
        "b": "4096",
    };
    return o34;
}
f21(f21(f21(v12, v11, "QLlbA"), v12, "Rl2I"), v12, "QLlbA");
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = this;
    try {
        this.g = -4294967295;
    } catch(e44) {
    }
}
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this.constructor;
    let v52;
    try { v52 = new v51(v51, a50); } catch (e) {}
    const v53 = typeof v52;
    const o56 = {
        get b() {
            return v51;
        },
    };
    v53 === "symbol";
}
new F41();
const v59 = new F41();
new F41();
const v62 = new WeakSet();
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    const v70 = this?.constructor;
    const t61 = /F((((.).).).)[Ia*b]/v;
    t61[Math] = -2.6653538746432233;
    new Uint32Array();
    try { new v70(v62); } catch (e) {}
    a68 + a68;
    try {
        this.d = 1000;
    } catch(e78) {
    }
    try {
        this.c = 5;
    } catch(e79) {
    }
    try {
        this.b = undefined;
    } catch(e80) {
    }
}
class C81 {
    static n(a83) {
        let v82 = this;
        --v82;
        v59.h = v62;
        function f86(a87, a88) {
            const o90 = {
                get g() {
                    return a88;
                },
            };
        }
        for (let v91 = 0; v91 < 60; v91++) {
        }
        return -9007199254740992n;
    }
    static #a;
    constructor(a95, a96) {
        try {
            a95.fuck(false, this);
        } catch(e99) {
        }
    }
    static #c = F41;
    #b = F41;
    #f;
    7 = v59;
    h;
}
const v100 = new C81();
function f101(a102, a103) {
    return f101;
}
class C104 {
}
const v105 = new v100();
const v112 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
function f114(a115, a116, a117, a118) {
    function f119() {
        const o127 = {
            __proto__: v112,
            valueOf(a121, a122) {
                return v105;
            },
            ["-1073741824"](a124, a125, a126) {
            },
        };
        return o127.copyWithin();
    }
    f119();
    [-3.942521664036782e+307,-3.942521664036782e+307,[-3.942521664036782e+307,-3.942521664036782e+307,-3.942521664036782e+307]];
    return a115;
    new Uint8ClampedArray();
    %OptimizeFunctionOnNextCall(f119);
    return a115;
}
("29753").replaceAll("29753");
Array(3);
for (let v140 = 0; v140 < 10; v140++) {
    f114(v112, f114, v140, v140);
}
%OptimizeFunctionOnNextCall(f114);
f114("-1073741824", v112, v112, f114);
