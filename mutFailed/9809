function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 2147483648;
    } catch(e3) {
    }
    try {
        this.b = 2147483648;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
[-843036103];
[63278,52213,17330,22048];
[255,4241,4,4294967297,-4096,-11,268435440,4096,165827095];
let v14 = -1073741824;
v14++;
-14 >>> -14;
class C19 {
    constructor(a21) {
        Uint16Array.prototype = Uint16Array;
        const v23 = new Uint16Array();
        function f24() {
            class C25 {
            }
            const v26 = new C25();
            const v27 = v26?.constructor;
            try { new v27(); } catch (e) {}
            const v29 = [v26];
            try { v29.reduce(f24); } catch (e) {}
            try { v29.map(v23); } catch (e) {}
            return C25;
        }
        %PrepareFunctionForOptimization(f24);
        f24();
        %OptimizeFunctionOnNextCall(f24);
    }
}
const v33 = C19?.constructor;
try { new v33("asyncIterator"); } catch (e) {}
const v35 = new C19();
v35.a = v35;
new C19(v35);
