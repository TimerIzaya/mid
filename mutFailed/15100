const v0 = [4096,1073741823,9007199254740992,-439796854,-847616532,268435439,-2147483648];
[-12,-21570];
const v2 = [256,-31936];
function f6(a7, a8, a9) {
    const o33 = {
        set e(a11) {
            if (this < v0) {
                %VerifyType(a9);
                (0.0 || 3).trunc("bigint");
                Math.cosh("bigint");
                a11++ + (f6 % f6);
                new Int16Array(129);
                new Int8Array(120);
                new Int16Array(1);
            } else {
                try {
                    ("function").trimStart();
                } catch(e32) {
                }
            }
        },
    };
    for (let v34 = 0; v34 < 32; v34++) {
        const t23 = "bigint";
        t23["p" + v34] = v34;
    }
    return o33;
}
const v37 = f6("bigint", v2, "bigint");
const t29 = "E4k";
const v38 = t29(f6, "E4k", "bigint");
const v39 = f6("function", v38, "function");
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a43;
    } catch(e46) {
    }
    try {
        this.d = a45;
    } catch(e47) {
    }
}
new F40(v39, v37, v37, "E4k");
new F40(v38, v37, v38, "function");
new F40(v37, v37, v38, "bigint");
function f53(a54, a55, a56, a57) {
    a55.__proto__;
    return a55;
}
for (let v59 = 0; v59 < 10; v59++) {
    f53(v59, v59);
}
%OptimizeFunctionOnNextCall(f53);
const t54 = "function";
t54(9, Float32Array);
