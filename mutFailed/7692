Array.__proto__ = this;
const v3 = [];
const v6 = v3.push(-10, v3, -12, 10);
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F8(v6, /(M(?:ab|cde)VbD)/vdim);
    } catch(e14) {
        a11 >> 10;
        Math.PI;
    }
}
const v21 = new Int16Array(2116);
new Uint8Array(868);
const v25 = [];
const v26 = [v25,v25,v25];
const o27 = {
};
new Proxy(v26, o27);
new BigUint64Array(129);
new Uint8Array(2116);
new Uint32Array(2445);
const v40 = new Float64Array(Float64Array);
const v41 = [601759695];
function f42(a43, a44, a45, a46) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: v40 });
    arguments[4] = arguments;
    return v41;
}
f42(v41);
new Float32Array(129);
function f54(a55) {
}
const o58 = {
    "type": "function",
};
new Worker(f54, o58);
const v60 = v21.tan(-1);
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
}
const t41 = "function";
t41.g = "function";
const v68 = new Date();
const v70 = [v68];
const o71 = {
    "arguments": v70,
    "type": "function",
};
const v72 = new Uint8Array(127);
v72.indexOf(v60);
