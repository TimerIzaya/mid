const v0 = [4294967295,3,268435439,-198264869,61019,512,-11,536870912,5];
const v1 = [-43768,2147483649,-10,65535,829075782,-1960164784,4,76962022,536870888];
const v2 = [536870887,1000,15370,7,6,0,40446];
new Uint16Array(4096);
const v9 = new BigUint64Array();
for (const v10 of v9) {
}
const v17 = new Float32Array(14);
const v19 = new Uint8ClampedArray(v17);
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 2147483649;
    } catch(e24) {
        function f25(a26) {
            const v27 = [536870887,-42204,-17288903,-3,9007199254740991,7];
            const v28 = [6,268435440,13,1073741825];
            function f29(a30, a31) {
                const o32 = {
                    "c": v28,
                };
                return o32;
            }
            f29(v27, v27);
            let v34 = 0;
            v34++;
            return f25 - this;
        }
    }
}
const o39 = {
    "maxByteLength": 1293466293,
};
const v41 = new SharedArrayBuffer(1796, o39);
new Uint32Array(v41);
new F20(64, v1);
new F20(-920748679, v2);
new F20(F20, v2);
new Uint32Array(2);
new BigUint64Array(Float32Array);
new Float32Array(256);
function f56(a57, a58, a59, a60) {
    function f63(a64, a65, a66, a67) {
        1864489360 ^ ("c").toLowerCase();
        let v72;
        try { v72 = v2["536870889"](); } catch (e) {}
        return v72;
    }
    for (let v73 = 0; v73 < 10; v73++) {
        f63();
    }
    const v75 = f63.constructor;
    ([586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308]).fill(-1073741824, -27205);
    const v82 = new Uint32Array(4);
    const v85 = new Uint32Array(26);
    const v87 = /[(?:a*)+]/gudisy;
    function f88() {
        const v91 = new Uint16Array(v0);
        const v93 = [delete v85[v82],Uint16Array,v87,"o"];
        [v93,[v91]];
        Object.defineProperty(v93, "d", { writable: true, configurable: true, enumerable: true, value: Uint32Array });
    }
    new v75(a59);
    return f56;
}
for (let v97 = 0; v97 < 10; v97++) {
    v19(f56, f56, v97, v97);
}
%OptimizeFunctionOnNextCall(f56);
f56(f56, f56, Uint16Array, f56);
