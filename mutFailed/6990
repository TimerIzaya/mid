function f0() {
    const o13 = {
        "b": 1220274566,
        "e": -9.09147594581428e+307,
        ..."n",
        get f() {
            const o5 = {
            };
            try {
                o5.h = this;
            } catch(e6) {
            }
            try {
                const o7 = {
                };
                o7.h = this;
                const t16 = -9.09147594581428e+307;
                t16.g = this;
            } catch(e8) {
            }
            try {
                const o9 = {
                };
                o9.h = this;
                o9.g = this;
                o9.a = 1220274566;
            } catch(e10) {
            }
            try {
                const o11 = {
                };
                o11.h = this;
                o11.g = this;
                o11.b = this;
            } catch(e12) {
            }
            return this;
        },
    };
    return -9.09147594581428e+307;
}
const v14 = f0();
const v15 = f0();
f0();
class C18 {
    #d;
    static m(a20, a21) {
        this % v14;
        super[f0];
        return 1073741823;
    }
    static 8;
    static c;
    static g = v15;
}
const v27 = new C18();
const v28 = new v27();
new C18();
class C30 {
    static a;
    static 4;
    #f = v14;
    static #p(a32, a33, a34, a35) {
        super.g = super[v28];
        try {
            a33.#f = a33;
        } catch(e37) {
        }
        return f0;
    }
}
new C30();
new C30();
new C30();
const v41 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v43 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
function f47(a48, a49, a50, a51) {
    function f53() {
        let v56 = Float64Array;
        b = v56 = a49;
        v41.length;
        try {
            v45.forEach(v56);
        } catch(e59) {
        }
        const v60 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v62 = Symbol.toPrimitive;
        const o68 = {
            toString(a64, a65) {
                const v66 = a51 && v56;
                a64 *= v62;
                return v66 <= v60;
            },
        };
        const o88 = {
            "c": -4294967297n,
            [522675525n](a71, a72) {
            },
            "c": v44,
            valueOf(a74, a75) {
                return a48;
            },
            "b": -4294967295,
            [-4294967297n](a77, a78, a79, a80) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v43,
            ...v44,
            "type": "Vre",
            ..."Vre",
            valueOf(a82, a83) {
                return v60;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a85, a86, a87) {
                return a51;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    a48();
    const v91 = new Int8Array();
    const v92 = v91.buffer;
    v92.constructor = f47;
    v92.slice(2147483648);
    %OptimizeFunctionOnNextCall(f53);
    let v96;
    try { v96 = v45["find"](..."find", a51, ...v44, ...v45, ...522675525n); } catch (e) {}
    v96 <= a50;
    return arguments;
}
for (let v98 = 0; v98 < 10; v98++) {
    f47();
}
%OptimizeFunctionOnNextCall(f47);
f47();
