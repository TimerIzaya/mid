const v0 = /[\ca]/vdims;
/O/gudy;
/D[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/gs;
let v6 = 129;
for (const v10 in v0) {
    v0[v10] = -5;
    try {
        v0.e = -732946404;
    } catch(e11) {
    }
}
new Float64Array(8);
new Int16Array(1);
const v19 = new Float32Array(3774);
class C20 {
    static toString(a22, a23) {
        const v25 = super[a23];
        try {
            [-14438656,-1024,-1205683465,44949,-2];
            [10000,-30764,9,268435439,7,1024,10035,9007199254740991,9223372036854775807,4294967296];
            [16,10000,8222,-12,-65535,42919,-16,129,-1,-2];
            v0[268435439];
            const v31 = Symbol.iterator;
            const o40 = {
                [v31]() {
                    let v33 = 10;
                    const o39 = {
                        next() {
                            v33--;
                            const v37 = v33 == 0;
                            const o38 = {
                                "done": v37,
                                "value": v33,
                            };
                            return o38;
                        },
                    };
                    return o39;
                },
            };
            delete this[v25];
            this[C20];
        } catch(e43) {
        }
        Reflect.construct(Float32Array, [-62827,3774,a23], a23);
        const v49 = -(-2017734475);
        const v50 = v49 || v19;
        v50 & v49;
        Math.expm1(v50);
        -2017734475 || -2017734475;
    }
}
const v54 = new C20();
[1000000000.0,-1000.0];
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this.constructor;
    try { new v61(); } catch (e) {}
    a59-- + Float64Array;
    v61 >> v6;
    const v68 = !4702;
    const v69 = --v6;
    v68 + v6;
    Math.clz32(v6);
    v69 * v6;
    !v6;
    a59 & a59;
}
new F57();
new F57();
const v77 = new Uint8ClampedArray(C20, C20, v54);
function f78() {
    function f79(a80, a81) {
        const v82 = v54.constructor;
        v82 + v82;
        return f79;
    }
    f79(Uint8ClampedArray, Uint8ClampedArray);
    return f79;
}
Object.defineProperty(v77, "valueOf", { get: f78 });
v77[5] = v77;
