[-1000000000000.0,3.1915817684855386e+307,-4.0,1.7976931348623157e+308,-1.0,-1000000000.0,-5.441373332011656,2.106146776917381e+307,-1.7976931348623157e+308,-1000000000.0];
[3.002148773779993,-1000000000000.0,0.0,-1.7976931348623157e+308,-1000.0];
[0.49964352171045623,6.157948190829437,172.02022960659974,-9.871372575537178,1000.0,-997861.1615313146,-2.2250738585072014e-308,7.217844073304753e+307,-387989.5318679523];
[10000];
const v14 = new Float32Array(Float32Array);
for (let v15 = 0; v15 < 10; v15++) {
    function f16() {
        return f16;
    }
    const v17 = [601759695];
    const v18 = [1073741824,1073741823,1376142744,1073741825];
    function f20(a21, a22, a23, a24) {
        function f26() {
            return v14;
        }
        f16();
        const v29 = new Int8Array();
        function f30(a31, a32) {
            return a31;
        }
        f30(v18, v14);
        v29.buffer;
        a24.slice(2147483648);
        %OptimizeFunctionOnNextCall(a22);
        let v38;
        try { v38 = v18["find"](..."find", a24, ...v17, ...v18, ...522675525n); } catch (e) {}
        v38 <= -1000000000.0;
        return arguments;
    }
    for (let v40 = 0; v40 < 10; v40++) {
        f20(v18, v40, v17, v40);
    }
}
function f43(a44, a45, a46, a47) {
    a44.length;
    new Float32Array();
    const v51 = new Float32Array(a46);
    const v53 = new Int32Array(a45);
    const v54 = v51;
    v53.fill(...v54);
    return v54;
}
for (let v56 = 0; v56 < 625; v56++) {
    f43(Uint8Array);
}
new Float32Array(Float32Array);
const v60 = [1073741824,1073741823,1376142744,1073741825];
function f61(a62, a63, a64, a65) {
    try { v60["find"](..."find"); } catch (e) {}
    return a65;
}
for (let v68 = 0; v68 < 10; v68++) {
    f61();
}
%OptimizeFunctionOnNextCall(f61);
f61(v60, f61, f61, f61);
