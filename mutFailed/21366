function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 50608;
    } catch(e3) {
    }
    try {
        this.c = 50608;
    } catch(e4) {
    }
    const v7 = new Uint32Array(4096);
    class C9 {
    }
    const v12 = new this();
    function f13(a14, a15, a16, a17) {
        const o20 = {
            "e": v12,
            ...a14,
            "d": a14,
            [v12]: a17,
            "g": 579720983,
            256: "getInt32",
            set b(a19) {
            },
            "b": a16,
            ...v12,
            "f": a16,
            "c": this,
        };
        return o20;
    }
    v7[6] = 35.31700069890553;
}
const v21 = new F0();
new F0();
new F0();
const v25 = new Map();
class C29 extends Map {
    o(a31, a32, a33) {
        for (let v34 = 0; v34 < 10; v34++) {
            this["p" + v34] = v34;
        }
        9007199254740991n * 9007199254740991n;
        ("by").normalize();
        Math.cos(0.8497483139616006);
        function f44(a45, a46) {
            function f48(a49) {
                const o52 = {
                    "type": "c",
                    162: "-4096",
                    "type": "c",
                    "maxByteLength": 1938869189,
                };
                const v54 = new SharedArrayBuffer(64, o52);
                new Float64Array(v54);
                class C57 {
                }
                const v58 = new C57();
                ("object").split(v58, 1938869189);
            }
            this.onmessage = f48;
            [] = v25;
        }
        const v63 = ["bnEMH",Map];
        const o66 = {
            "execution": "c",
            get d() {
            },
            get e() {
            },
            "arguments": v63,
            "type": "function",
        };
        new Worker(f44, o66);
        const v69 = new Set();
        v69.add;
        ([6,-963441656,16,29379,4294967295,-1,-7,264333751,-1860319367]).indexOf(...[1.7976931348623157e+308,-1.2968908289000048e+307,0.402129700476598,0.9687558030639707,-3.0,-3.892783004799951,1000000000.0,NaN,-638560.6883919106,764993.5586307007]);
        return v63;
    }
}
const v74 = new C29();
const v75 = new C29();
new C29();
const v77 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
const v78 = /(?:a*)+q(?<a>.)/guds;
for (let [i87, i88] = (() => {
        function f81(a82, a83) {
            return a83;
        }
        new Float32Array(2);
        return [0, 10];
    })();
    i87 < i88;
    i88--) {
    for (let v95 = 0; v95 < 5; v95++) {
        const v96 = v78.constructor;
        try { v96(v78, v78); } catch (e) {}
        v77.constructor;
        v78.constructor;
        [i88,i88,i88,i88,i88] > 8n;
    }
}
new Int8Array([1000.0,-1.7976931348623157e+308,1000000.0,1000000000000.0,-1000000000000.0,-863970.4344405974,1.7873969073744563e+308,0.0]);
const v108 = new Uint8ClampedArray(4096);
function f109(a110) {
    return f109;
}
const v113 = [v108];
const o114 = {
    "arguments": v113,
    "type": "function",
};
new Worker(f109, o114);
[C29,v74];
[F0];
[F0,"c",v75,v21,v74];
for (let v120 = 0; v120 < 5; v120++) {
    function f121() {
        return ("Vre").codePointAt(-1.0);
    }
    f121();
    %OptimizeFunctionOnNextCall(f121);
}
for (const v126 in [-65535,536870889,4096]) {
    Math.log10(v126) ** 1000000000000.0;
}
