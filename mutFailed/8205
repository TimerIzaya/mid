function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 9007199254740990;
    } catch(e3) {
    }
    try {
        this.f = 9007199254740990;
    } catch(e4) {
    }
    try {
        this.c = 9007199254740990;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
try { Set.bind(v8); } catch (e) {}
try { Set.apply(v8, v8); } catch (e) {}
new Set();
const v13 = [-1331364726,536870889,1000,6,1073741824];
try { v13.flat(); } catch (e) {}
const v15 = [2147483647];
try { v15.reduceRight(v6); } catch (e) {}
try { v15.sort(v13); } catch (e) {}
[536870887,1,268435456,6,6,-65536,-44186,-65537,1,428150927];
129 >> 129;
const v22 = new Int32Array(129);
try { v22.findIndex(v7); } catch (e) {}
let v24;
try { v24 = v22.slice(Set, v8); } catch (e) {}
try { v24.findLast(v24); } catch (e) {}
v22[10] = v22;
const v27 = new Uint32Array();
v27.buffer;
const o32 = {
    get g() {
        return this;
    },
    set g(a31) {
    },
};
const v34 = 11 >>> 11;
v34 << v34;
11 >>> 11;
let v38;
try { v38 = new Float32Array(v27, v27, v8); } catch (e) {}
const v39 = v38?.entries;
try { new v39(); } catch (e) {}
Float32Array.name;
new Float32Array(11);
const v44 = 256 >> 256;
Uint32Array.d = Uint32Array;
const v46 = [];
try { v46.findLast(F0); } catch (e) {}
class C48 {
    constructor() {
        let v50;
        try { v50 = this.toString(); } catch (e) {}
        v50[0] = v50;
        const v51 = this?.constructor;
        try { new v51(); } catch (e) {}
        super.f >>= this;
    }
    static #o() {
        super[v46];
        super.a;
        return v46;
    }
}
C48.length;
const v57 = new C48();
const v58 = v57?.constructor;
try { new v58(); } catch (e) {}
new Uint32Array(256);
const v62 = new Date();
const v63 = v62?.constructor;
try { new v63(v34, v44, v44, Int32Array, v34, v34, Int32Array); } catch (e) {}
let v66;
try { v66 = Reflect.setPrototypeOf(v22, F0); } catch (e) {}
v66 || v66;
const v68 = [Infinity];
class C69 {
    [v68];
}
try { new C69(); } catch (e) {}
let v71;
try { v71 = new C69(); } catch (e) {}
v71.Infinity = v71;
const v72 = new C69();
v72.Infinity;
const v74 = [Reflect,Reflect,Reflect,Reflect];
v74[3] = v74;
const v75 = v62.getDate;
try { v75(); } catch (e) {}
const v77 = Reflect.apply(v75, v62, v74);
v77 - v77;
