new Int8Array(4);
new Int8Array(5);
const v8 = new Uint32Array(4096);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    function f14(a15) {
        Object.defineProperty(v8, "h", { writable: true, configurable: true, value: a15 });
    }
    Object.defineProperty(this, "a", { enumerable: true, set: f14 });
    try {
        this.a = a12;
    } catch(e16) {
    }
}
new F9(Int8Array, 5, 4096);
new F9(Uint32Array, 4096, 4);
new F9(Int8Array, 4, 5);
new Float64Array(256);
const v31 = new Map();
let v38 = undefined;
const o46 = {
    ...v31,
    ...v31,
    __proto__: v31,
    [9](a40, a41, a42) {
        super[a40];
        v38 = Map;
    },
};
F9 = o46;
const v47 = [v31];
function F49() {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    new Date();
    new Uint32Array(5);
    new Set();
    const o63 = {
    };
    class C66 {
    }
    class C67 extends C66 {
    }
    const v68 = Array(19793);
    Object.defineProperty(v68, 2797, { value: v51 });
    for (const v69 of v68) {
    }
    const v70 = [v68,v68,v68,v68,v68];
    for (let v71 = 0; v71 < 50; v71++) {
    }
    [[v51,v70,v70]];
    function f75(a76) {
        const o79 = {
            "maxByteLength": 255,
        };
        const v81 = new SharedArrayBuffer(255, o79);
        const v83 = new BigInt64Array(v81);
        return v83;
    }
    Uint16Array.toString = f75;
    function f84() {
        const o85 = {
        };
    }
    v47 >= Uint16Array;
}
new Map();
new F49();
function f89() {
    const o91 = {
        get f() {
        },
    };
    const o96 = {
        ["8"](a94, a95) {
        },
    };
}
function F97() {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e99) {
    }
}
class C100 {
}
function f101(a102, a103, a104) {
    const o105 = {
    };
}
