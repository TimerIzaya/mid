const v2 = new Float32Array(1);
~89;
try { v2.indexOf(Uint8Array, 1); } catch (e) {}
new Array(9);
Array.prototype &= 9;
Uint8Array.length;
const v11 = new Uint8Array(89);
const v14 = new Uint32Array(1533);
function f15() {
    return v11;
}
const v16 = new f15();
const v17 = f15();
try { v17.filter(1533); } catch (e) {}
v16[v17] <<= 89;
2965 * 2965;
const o22 = {
    "maxByteLength": 2965,
};
const v24 = new SharedArrayBuffer(1024, o22);
const v26 = new Int8Array(v24);
v16 || v11;
let v29 = -263405539 - -263405539;
Uint32Array > v29;
let v33 = -39256;
if (SharedArrayBuffer >= v26) {
    9 << Uint32Array;
} else {
}
v14 && 5;
const v42 = v29 & 5;
Math.pow(v14, v29);
v29++;
v33++;
v33 % v29;
function f50() {
    function f52(a53) {
        f = a53;
    }
    this.onmessage = f52;
    v14[-13684.399077197304] = f52;
}
try { new Worker(); } catch (e) {}
try { ("function").strike(); } catch (e) {}
const v58 = [];
try { v58.findLast(v42); } catch (e) {}
const o60 = {
    "arguments": v58,
    "type": "function",
};
o60.b = o60;
new Worker(f50, o60);
64 >>> 64;
try { v2.subarray(10, 64); } catch (e) {}
const o70 = {
    "maxByteLength": 1263,
};
const v72 = new ArrayBuffer(1263, o70);
new Float32Array(v72);
const v75 = 10 | 10;
v75 / v75;
WeakMap.d = WeakMap;
let v79 = 2.4055206643129257;
let v80 = v79--;
v80++;
-1.5876750346470025e+308 >>> -1.5876750346470025e+308;
-1.5876750346470025e+308 - -1.5876750346470025e+308;
const v85 = /[^a\ScwU*]/vdsy;
v85.b = v85;
