class C3 {
    ["2"] = "2";
    9 = "bigint";
    static set g(a5) {
        const v8 = new Uint8Array(481);
        v8.indexOf(Uint8Array, 481);
        const v11 = new Int32Array(Int32Array, Int32Array, Int32Array);
        ~v11;
        try { this["getInt32"]("bigint", "getInt32"); } catch (e) {}
        const o18 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o18);
    }
    7;
}
C3.e = C3;
new C3();
new C3();
new C3();
for (let v25 = 0; v25 < 1000; v25++) {
    const v27 = "p" + v25;
    v27.fontcolor();
    const t23 = "bigint";
    t23[v27] = v25;
}
-1255290012 | -1255290012;
[0.06595725691087417,-50.944100203012454,8.815932776246376e+307,1000000000.0,-598728.7959958483,1.813420457063815,-703.4764352715688,1.7390325102685118e+308];
([-1000000000.0,0.5288350546289171,2.220446049250313e-16,5.644750999533742e+307])[2];
const v34 = [-4.842596762617215,0.5252646427490724,0.038441207328898996,NaN,4.0,-2.0];
v34[5] = v34;
class C36 {
    #valueOf(a38, a39, a40) {
    }
}
function f41() {
    ("number").slice();
    return f41;
}
try { ("splice").normalize(); } catch (e) {}
const v50 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
let v51;
try { v51 = v50(); } catch (e) {}
v51();
class C54 {
    toString(a56) {
        this.e *= 0.8199829542463926;
    }
}
257 >> 257;
const v60 = [257,257,257,55852,2];
try { v60.reverse(); } catch (e) {}
function f65(a66) {
    const o69 = {
        "g": 1000000000.0,
        set a(a68) {
            a68.h = this;
        },
        "h": a66,
        "d": 1000000000.0,
        "b": -1.1013479045636231e+308,
        2: a66,
    };
    return o69;
}
f65();
f65();
class C72 {
    #n(a74, a75, a76, a77) {
        super[this] = this;
        super[f65].o();
    }
    constructor(a82, a83) {
        const o87 = {
            "type": "minor",
        };
        gc(o87);
    }
}
for (let i90 = 0; i90 < 7; i90++) {
    new C72();
}
function f97(a98) {
    function f100(a101) {
        v60["entries"]();
    }
    this.onmessage = "tp";
    return 257;
}
class C105 {
}
const v106 = new C105();
function f107(a108, a109, a110) {
    const o112 = {
        get b() {
            return C105;
        },
        127: v106,
    };
    return f107;
}
%OptimizeFunctionOnNextCall(f107);
const o114 = {
    "type": "function",
};
const v115 = new Worker(f97, o114);
try { v115.terminateAndWait(); } catch (e) {}
