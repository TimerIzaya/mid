new Uint32Array(3);
1182 >>> 1182;
const t1 = 3;
const v6 = new t1(1182);
const v7 = v6?.constructor;
try { new v7(v6, Int32Array, Int32Array); } catch (e) {}
new Int32Array(3121);
v6[2521];
for (let v15 = 0; v15 < 5; v15++) {
}
class C17 {
    static #c = "bigint";
    static valueOf(a19) {
        this.#c = "bigint";
    }
}
let v21 = [-5.034735835956977e+307,-385.25474675985527];
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.valueOf().constructor;
    try { new v27(); } catch (e) {}
    Math.imul(--v21);
    +this;
}
const v34 = [];
try { v34.lastIndexOf(1182); } catch (e) {}
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v38 = `
            for (let v39 = 0; v39 < 5; v39++) {
                class C40 {
                }
                const v41 = new C40();
                function f42(a43, a44) {
                    const o49 = {
                        [v41](a46, a47, a48) {
                        },
                    };
                }
            }
        `;
        const o58 = {
            set e(a57) {
            },
        };
        function f59(a60) {
            new Uint8ClampedArray(104);
            v21.toLocaleString();
            new Uint8ClampedArray();
            a60 === a60;
            a60 <= a60;
            const o72 = {
                ...a60,
                p(a70, a71) {
                },
            };
        }
    } catch(e73) {
    }
    try {
        let v74 = [-5.034735835956977e+307,-385.25474675985527];
        --v74;
        new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
    } catch(e79) {
    }
    try {
    } catch(e80) {
    }
}
F36?.__lookupSetter__;
try {
const t0 = -199637532;
new t0(Int32Array);
} catch (e) {}
const v83 = new F36();
const v84 = new F36();
const v85 = new F36();
try { v85.constructor(); } catch (e) {}
const v87 = [v34,v85];
try { v87.entries(); } catch (e) {}
const v90 = [v87,F36,[v83,v34,v84],v34];
v90[3];
try { v90.flat(); } catch (e) {}
const v95 = new Int8Array(10);
try { v95.find(v85); } catch (e) {}
268435440 | 268435440;
Uint8ClampedArray.prototype;
new Uint8ClampedArray(268435440);
function f104(a105, a106, a107, a108) {
    Object.defineProperty(a105, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f104 });
    const o115 = {
        toString(a112, a113) {
            new Date(a105);
        },
    };
}
