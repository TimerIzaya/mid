const v2 = new BigInt64Array(0);
let v3 = 3;
v3--;
v2[2];
try {
    new BigInt64Array(-9223372036854775808);
} catch(e9) {
}
try { new Float32Array(BigInt64Array, 0, v3); } catch (e) {}
new Float32Array(v3);
const v14 = new Uint16Array(1816);
const v15 = v14[400];
1816 === 2130114130n;
try {
    const o20 = {
    };
    new BigInt64Array(o20);
} catch(e22) {
}
const v23 = [];
for (let v24 = 0; v24 < 25; v24++) {
}
for (let v25 = 0; v25 < 5; v25++) {
    const v27 = "p" || 696319902n;
    function f28(a29, a30) {
        'use strict';
        const v31 = new BigInt64Array(f28);
        let v32;
        try { v32 = v15(Float32Array, ...v31, a30, ...2130114130n); } catch (e) {}
        return v32;
    }
    v27("p", v25);
    v23[v27] = 1816;
}
