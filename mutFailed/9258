let v1 = Uint8ClampedArray;
new v1(9);
class C5 {
    constructor(a7, a8, a9) {
    }
}
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a13;
    } catch(e15) {
    }
}
const v16 = new F10(3422, v1, C5);
new F10(9, C5, Uint32Array);
new F10(v16, F10, 3422);
new Uint32Array(C5);
const v21 = new Uint32Array(3422);
new BigInt64Array(594);
class C28 {
}
const o29 = {
    "b": C5,
};
v21[579720983] = 65536n;
const v31 = [v1];
[65536n,BigInt64Array,[v31,5n,-23599n,BigInt64Array],v16];
v1 = C28;
class C35 {
}
const v36 = new C35();
this.setTimeout();
59817n < undefined;
function f42(a43, a44, a45, a46) {
    const o58 = {
        "e": v36,
        ...a43,
        "d": a43,
        [v36]: a46,
        m() {
            const o48 = {
            };
        },
        "maxByteLength": 9,
        "g": 579720983,
        256: "getInt32",
        set b(a50) {
        },
        "b": a45,
        ...v36,
        "f": a45,
        "c": C35,
        "h": a43,
        ...v31,
        __proto__: C35,
        ...a43,
        "a": o29,
        m(a52, a53, a54, a55) {
            ("ignoreCase").normalize();
            return this;
        },
    };
    function F59() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v61 = new F59();
    const v62 = new F59();
    class C63 extends F59 {
        [v62];
    }
    const v64 = new C63();
    v64.hasOwnProperty(v61);
    return o58;
}
f42(f42());
%PrepareFunctionForOptimization(f42);
const v68 = f42();
const v69 = f42();
%OptimizeFunctionOnNextCall(f42);
Array(1000);
function f73() {
    for (const v77 of Array(4087, Array, Array)) {
    }
    return f73;
}
f73();
%OptimizeFunctionOnNextCall(f73);
f42(C35, v68, v69, v68);
