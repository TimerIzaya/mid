function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = this;
    try {
        this.c = -2;
    } catch(e3) {
    }
    try {
        this.b = -2;
    } catch(e4) {
    }
    try {
        this.a = -2;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a11;
    try {
        this.e = v7;
    } catch(e13) {
    }
    try {
        return arguments;
        function F15() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const t31 = 19793;
                for (const v19 of t31()) {
                }
            } catch(e20) {
            }
        }
        this.g = a11;
    } catch(e21) {
        const v25 = Symbol.toPrimitive.description.codePointAt();
        v25 >> v25;
    }
}
F9.arguments = F9;
const v27 = new F9(v7, v7);
new F9(v8, v6);
let v29 = -6.50438168344124;
v29 **= v29;
for (let [i33, i34] = (() => {
        10 + 10;
        return [0, 10];
    })();
    i33 < i34;
    (() => {
        const v38 = i34--;
        v38 + v38;
    })()) {
    for (let v42 = 0; v42 < 5; v42++) {
        let v43 = v42 >>> v42;
        v43++;
    }
}
new F9(v6, v8);
const v47 = [1e-15,1000000.0,0.0];
new Uint8Array(3521);
function f51() {
}
const v52 = f51();
[-4.824921200522868e+307,-341525.6541366542];
[-469.5735322000205,-3.0,-1000000.0,1.0];
gc.e = gc;
function F56() {
    if (!new.target) { throw 'must be called with new'; }
}
class C58 {
    constructor(a60, a61, a62) {
        const v63 = this?.constructor;
        try { new v63(v27, v52, v6); } catch (e) {}
        a60.arguments = a60;
        a61.constructor = gc;
        const v65 = a61.constructor;
        try { v65(); } catch (e) {}
        class C67 extends v65 {
        }
        const v68 = new C67();
        const v69 = v68?.constructor;
        try { new v69(); } catch (e) {}
    }
}
new C58(F56, C58);
class C73 {
    constructor(a75, a76) {
        const v77 = this?.constructor;
        try { new v77(256, C73); } catch (e) {}
        a76 >> a76;
        try { new Int32Array(v7, v7, v47); } catch (e) {}
        function F84(a86) {
            if (!new.target) { throw 'must be called with new'; }
            const v87 = this?.constructor;
            try { new v87(F84); } catch (e) {}
            const v89 = this.constructor;
            v89.length = v89;
            try { new v89(); } catch (e) {}
        }
        new F84();
    }
}
const v93 = new C73(C73, 256);
new C73(v93, v93);
