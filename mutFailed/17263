function f0() {
    let v1 = "-1";
    const v5 = new Uint16Array(821);
    new Uint8Array(v5);
    const o22 = {
        "e": -4,
        set a(a10) {
            const v11 = v1++;
            try { new a10(this, v11, this); } catch (e) {}
            -9223372036854775808n <= 2.220446049250313e-16;
            const v16 = [];
            [v16,v16,v16,v16,v16];
        },
        get h() {
            try {
                ("toPrimitive").padStart(-141157056);
            } catch(e21) {
            }
            return "toPrimitive";
        },
    };
    return o22;
}
const v23 = f0();
const v24 = f0();
const v25 = f0();
9n in v24;
Math.asin(v24);
Math.asin(v25);
const v34 = Math.atanh(v25);
Math.trunc(v24);
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        ("d").strike([], "d");
        const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f47() {
            try {
                v45.forEach();
            } catch(e49) {
                const t40 = e49?.constructor;
                t40();
            }
            const v52 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            v52.push(v52);
            const o59 = {
                toString(a55, a56) {
                    return (undefined && undefined) <= v52;
                },
            };
            return v45;
        }
        f47();
        this.c = -4294967296n;
    } catch(e61) {
        const t55 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
        t55.length = 1;
        async function f64(a65, a66, a67) {
            return a65;
        }
    }
    function F68(a70) {
        if (!new.target) { throw 'must be called with new'; }
    }
    -268435456 < -268435456;
    Math.clz32(2089625166);
    function F75(a77, a78) {
        if (!new.target) { throw 'must be called with new'; }
        const v79 = this?.constructor;
        try { new v79(this); } catch (e) {}
    }
    F68.arguments = F68;
    const o86 = {
        get a() {
            eval("-9007199254740990");
            return 6;
        },
    };
}
const v87 = new F37(v24, v23, v25);
const v89 = 4294967296n * 4294967296n;
v89 | v89;
function f91(a92, a93) {
}
const v94 = new F37(v23, 9n, v25);
new F37(v25, -268435456n, v24);
new Int16Array(41);
const o108 = {
    o(a104) {
        const o106 = {
        };
        return gc(o106);
    },
};
const t94 = "undefined";
t94["256"] <<= 4.0;
new Uint16Array(9n);
const v115 = new Uint32Array(65536);
const v118 = new Date(Uint32Array);
v118.getSeconds();
const t99 = 824983.4173693366 === v87 ? 824983.4173693366 : v87;
t99[6] &= -3.0;
let v122 = f91(-4294967296n, v34);
let v125 = 257;
f0 + v122;
Math.abs(v94);
--v122;
Math.sinh(f0);
v125++;
Math.cos(v122);
parseInt([2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614]);
for (const v136 in v115) {
    this.escape();
}
