class C3 {
    static #valueOf(a5, a6) {
        try {
            a5.length = 1;
        } catch(e8) {
        }
        1 || -218;
        super["string"] = "string";
        return -218;
    }
    [-4.602271366901809e+307];
    h;
    static #e;
    static #b;
}
const t15 = -4.602271366901809e+307;
new t15();
new C3();
new C3();
const v13 = [C3];
[-218];
[C3,v13,"string","string"];
[1.3195499837950574e+308,4.0,-329383.9957684354,-1000000000000.0,-25118.083675229806,-1.7976931348623157e+308,0.8758838974477081,-1.5223493192658495e+308,860260.0487707118,9.60191720372714];
[-1000000000000.0,4.548763145536507e+307,-9.178056165818137e+307,NaN,-59.7158804773419,0.24607927897836301,-1000.0,9.708171013956953];
[451573.99501250265,0.25657051436613243,-2.0];
new Int16Array(257);
new Uint32Array(6);
new Float64Array(3239);
function f28() {
    return 257;
}
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = a33.constructor;
    try { new v34(); } catch (e) {}
    const t35 = (-a33).constructor;
    t35(f28, f28).toExponential(f28);
}
new F29();
function f41(a42, a43) {
    return a43;
}
class C44 {
}
