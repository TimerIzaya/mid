class C3 {
    get a() {
        Number[1774] = "bigint";
        new BigUint64Array(8);
        new Uint16Array(165);
        new Int32Array(984);
        return Uint16Array;
    }
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
function f21(a22, a23, a24, a25) {
    const o37 = {
        "a": a24,
        "c": 255,
        "b": 5.0,
        __proto__: v16,
        set d(a27) {
            function f28(a29, a30, a31, a32) {
                const o33 = {
                    "g": a22,
                };
                return o33;
            }
            f28(a22, f28(a22, 5.0, a27, -2147483648), -2147483648, -2147483648);
            f28(a24, "bigint", a24, 1024);
        },
    };
    return o37;
}
f21(-2147483648, f21(-2147483648, f21(-2147483648, v17, 4294967297, v15), 255, v16), 4294967297, v15);
const v41 = [];
const v42 = [v41];
class C44 extends Map {
}
const v45 = new C44();
const v46 = new C44(v42);
const v47 = new C44(v46);
const v49 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v51 = new Uint32Array(v46, v41);
let v52 = -4294967297n;
v52--;
const v54 = [601759695];
const v55 = [1073741824,1073741823,1376142744,1073741825];
function f56(a57, a58, a59, a60) {
    const v61 = a57.constructor;
    v54["pop"]();
    try { v61(v61); } catch (e) {}
    let v65;
    try { v65 = v61(); } catch (e) {}
    const v67 = arguments.length;
    Object.defineProperty(v45, "e", { configurable: true, enumerable: true, value: f56 });
    v46["toString"](a59, ...v47, BigUint64Array, ..."toString", a58, v67);
    function f70() {
        const v72 = ("Vre").charAt();
        try { v72.lastIndexOf(); } catch (e) {}
        ("Vre").codePointAt();
        v49.length;
        try {
            v55.forEach();
        } catch(e77) {
        }
        const o90 = {
            "c": v52,
            "EPSILON": v54,
            valueOf(a79, a80) {
                return a57;
            },
            1073741824: v51,
            [v52](a82, a83, a84, a85) {
                eval();
            },
            o(a89) {
                return v52;
            },
            256: a60,
        };
        return a58;
    }
    f70();
    const v93 = v65();
    try { v93.findLast(f56); } catch (e) {}
    let v96;
    try { v96 = Int8Array.of(); } catch (e) {}
    try { v96.join(a58); } catch (e) {}
    for (let v98 = 0; v98 < 5; v98++) {
    }
    try { v55["find"](..."find", a60, ...v54, ...v55); } catch (e) {}
    return a60;
}
for (let v101 = 0; v101 < 10; v101++) {
    f56(v51);
}
%OptimizeFunctionOnNextCall(f56);
f56(v54);
