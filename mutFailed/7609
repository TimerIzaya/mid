let v2 = 8;
const v3 = [16];
const v4 = [v3];
const v5 = [16,v2,v4,16];
class C6 {
    static [v2];
    1744;
    [v2];
    #f = v3;
    constructor(a8, a9, a10, a11) {
        let v12;
        try { v12 = this.p(this, a9); } catch (e) {}
        try { v12(2147483648); } catch (e) {}
        throw a9;
    }
    e = v4;
    [v5] = v2;
    static #b;
    get a() {
        v2--;
        try { C6(this); } catch (e) {}
        return v3;
    }
}
const v17 = new C6(C6, 2147483648, 2147483648, 2147483648);
new C6(2147483648, 2147483648, 2147483648, 2147483648);
new C6(v17, v2, v2, 16);
new BigUint64Array(229);
new BigInt64Array(64);
new Uint8Array(240);
("minor").valueOf();
class C32 {
    ["minor"] = 0.9009832213714677;
}
const v33 = new C32();
function f34(a35, a36, a37, a38) {
    v33.minor;
    const v41 = Math.sign(a36);
    v41 >>> v41;
    return a35;
}
for (let v43 = 0; v43 < 10; v43++) {
    f34(C32, v43, v33, "minor");
    function F45() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
%OptimizeFunctionOnNextCall(f34);
f34();
