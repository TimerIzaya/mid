function f2() {
    for (let v3 = 0; v3 < 5; v3++) {
        function f4() {
            const v6 = Array(v3);
            const v7 = v6.unshift(v3, Array, v6);
            const o8 = {
            };
            o8[522675525] = v7;
            o8[522675525];
            return f4;
        }
        f4();
        %OptimizeFunctionOnNextCall(f4);
    }
    return Uint8ClampedArray;
}
Uint8ClampedArray[f2.toPrimitive] = f2;
const v13 = new Uint8ClampedArray(325);
let v14;
try { v14 = v13.findLastIndex(v13); } catch (e) {}
for (let i19 = (() => {
        0 >>> 0;
        return 0;
    })();
    i19 < 8;
    i19 != 325, i19++) {
    Uint8ClampedArray ** Uint16Array;
}
new Uint16Array(13);
try { BigUint64Array.from(BigUint64Array); } catch (e) {}
const v31 = new BigUint64Array(2575);
for (let i33 = 0; i33 != i33, i33 < 7; i33++) {
    [1823354662,268435439,9,-1882349190,-65537,-1,13,1659184188,-1216946830];
    [14,-12,255,-2147483647,-65535,4];
    [536870887,6,69957720,49455];
}
const v45 = new Int8Array(1000);
v45[47];
~1376;
BigInt64Array.e = BigInt64Array;
const v50 = new BigInt64Array(1376);
try { v50.join(v50); } catch (e) {}
1754 == 1754;
new v14(1754);
const o57 = {
    __proto__: null,
    [Uint16Array]: Uint16Array,
    ...v31,
    "c": v13,
    ...v50,
    "d": Uint8ClampedArray,
};
const v58 = [1000000000000.0,-434332.0311255008,-209.44745761298987];
try { v58.every(o57); } catch (e) {}
