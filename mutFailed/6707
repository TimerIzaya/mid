function f3(a4, a5) {
    const o12 = {
        n(a7) {
            a5[this] |= this;
            for (const v8 in a4) {
                this.b;
                try {
                    this.length = 0;
                } catch(e11) {
                }
            }
            return this;
        },
    };
    o12.toString = f3;
    return o12;
}
const v13 = f3("c", "D");
v13[Symbol.toPrimitive] = f3;
f3("10396", "c");
const v17 = f3("c", "10396");
function f21(a22, a23) {
    a22[Symbol.toPrimitive] = f3;
    const o33 = {
        "c": a23,
        "g": a23,
        [a23]: 0.39216220979989413,
        16: a22,
        "d": a23,
        get b() {
            try { new a23(this); } catch (e) {}
            new Set();
            return "D";
        },
    };
    return o33;
}
f21(v17, f3);
f21(v13, "c");
f21("10396", v13);
const v39 = new Uint16Array(9);
new BigInt64Array();
let v44 = Int32Array;
const v45 = new v44(182);
[v44,v39,v45,BigInt64Array];
[2086,[9,v44,v45],Uint16Array,v45];
class C50 {
    static c;
}
const v51 = new C50();
const v52 = new C50();
const v53 = new C50();
class C54 {
    static #n(a56, a57, a58, a59) {
        class C60 {
            4;
            static a;
        }
        C60();
        C60();
        C60();
    }
    7 = v53;
    #a = v52;
}
new C54();
new C54();
new C54();
[v53];
[v51];
function F69() {
    if (!new.target) { throw 'must be called with new'; }
}
new F69();
const v72 = new F69();
const v73 = new F69();
v73.e = v73;
function F74(a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    const v78 = a77?.__lookupGetter__;
    try { v78(a76); } catch (e) {}
    try { this.constructor(F74, this); } catch (e) {}
    a76.e = a76;
}
F74.arguments = F74;
const v81 = new F74(v73);
const v82 = new F74(v81, v72);
v82.e = "c";
v82.e = v82;
("Hyo9")[1];
const t89 = "at";
t89[1] = "at";
const v87 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap;
v87.constructor = f3;
const v88 = v87?.constructor;
try { v88("Hyo9"); } catch (e) {}
[-4.202468609045087];
const v91 = [0.8434386161503777];
try { v91.findLastIndex(v91); } catch (e) {}
const t99 = "4i";
t99[1] = "4i";
const v94 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f95(a96, a97, a98, a99) {
    function f100() {
        let v102 = Float64Array;
        v102 = a97;
        const v103 = v94.length;
        const v104 = v103 >>> v103;
        v104 / v104;
        const o106 = {
        };
        ([])["concat"]();
        new Uint8Array(105);
        let v113 = -268435456;
        v113--;
        const o115 = {
            "e": -4294967295,
            "e": v113,
        };
    }
    const v116 = f100();
    %OptimizeFunctionOnNextCall(f100);
    return v116;
}
f95();
f95();
const t124 = "RpXR";
t124[1] = "RpXR";
("c")?.toLocaleUpperCase;
class C123 {
    constructor(a125) {
        ("valueOf").localeCompare(a125, "valueOf");
    }
}
function f127() {
    const v131 = ~NaN;
    "c" + v44;
    v131 / NaN;
    !NaN;
    v44++;
    -v131;
    Math.acos(-256);
    return v131;
}
C123.toString = f127;
const v138 = new C123();
const v139 = v138.constructor;
v139[Symbol.toPrimitive] = f21;
new v139(C123);
