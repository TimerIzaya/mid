class C1 {
}
function f3() {
    function f4(a5, a6) {
        return f3;
    }
    const v8 = Promise.resolve(f3);
    new Promise(f4);
    const v10 = v8.constructor;
    try { new v10(-30285); } catch (e) {}
    return v8;
}
class C14 {
    static #o(a16, a17) {
        if (a16) {
            ("parse").length;
        } else {
            let v20 = -65537;
            Math.cbrt(a16--);
            Math.imul(a16, v20);
            ++v20;
        }
        return "parse";
    }
}
C1 >>> C1;
function f27(a28, a29) {
    function F30(a32, a33) {
        if (!new.target) { throw 'must be called with new'; }
        const v34 = this.constructor;
        let v35;
        try { v35 = new v34(); } catch (e) {}
        try { this.constructor(a28, f27, v35, F30); } catch (e) {}
    }
    new F30(a28, a29);
    return f27;
}
new C14();
const v39 = new C14();
new C14();
const v41 = [-7.127262073336987e+307,9.142894664271836,5.0];
v41.toLocaleString();
new Float32Array(165);
let v46 = [4.55590263310031,1e-15,2.220446049250313e-16,4.0,3.0];
class C47 {
    constructor(a49, a50, a51, a52) {
        v46 = a50;
    }
}
const v53 = new C47(v41, v41);
("HEkWL").localeCompare("isArray", "isArray");
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = "1000";
    } catch(e62) {
    }
}
const v63 = new F57("ownKeys", v39, "parse");
const v64 = new F57(v63, C14, v53);
new F57(v64, v39, "parse");
let v74;
try {
const t0 = 1000000000.0;
v74 = t0(2.220446049250313e-16, Uint8ClampedArray, ...1000000000.0, -82.86062314585524);
} catch (e) {}
[1000000000.0];
for (let v77 = 0; v77 < 25; v77++) {
    v74["p" + v77] = v77;
}
class C81 {
}
const v82 = new C81();
class C83 extends v74 {
    constructor(a85, a86, a87, a88) {
        if (v82) {
        }
    }
}
