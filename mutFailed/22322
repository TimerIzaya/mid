new WeakSet();
function f2(a3, a4, a5, a6) {
    a6?.__lookupSetter__;
    let v8 = a4 & a4;
    const v9 = v8++;
    const v10 = v9 + v9;
    const o14 = {
        n(a12, a13) {
        },
    };
    try { o14.n(v10); } catch (e) {}
}
new Uint32Array(3468);
new Float32Array(3417);
Float32Array();
function f25(a26, a27, a28) {
    for (let i = 0; i < 5; i++) {
        /k/gdsy;
    }
    f25();
    return f25;
}
f25();
new BigUint64Array(108);
const v37 = [4.4580506370311035,0.0];
[-4.0,0.4890458233502635,-2.220446049250313e-16,-1000000000000.0,1000000.0];
[-1.2915478122457253e+307,0.275030405671152,-2.4867121049060525e+307,-913060.7357060094,-0.7618465992404033,-1.0,-1.7976931348623157e+308,1.0];
new Uint8ClampedArray(2742);
new Int16Array(1269);
function f47() {
    class C50 {
        constructor(a52, a53) {
            const v54 = this.constructor;
            try { new v54(f47, C50, -7); } catch (e) {}
            this[-2147483648] >>>= -7;
            for (let v56 = 0; v56 < 5; v56++) {
            }
        }
    }
    new C50();
    return -7;
}
const v59 = new Uint32Array(4);
new Uint8Array(19);
const v65 = [2,9223372036854775807,-18819,-4294967296,-4294967297,-975440104,1670425848,-128,-9007199254740992];
[4294967297,1073741824,10,536870912,918866678,4096,536870912,-13];
v59?.constructor;
v65[4];
class C69 {
}
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    function f72(a73) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
}
[-1871441266];
const v77 = new Uint8ClampedArray(v37, -104, 2742);
v77.byteOffset -= 2742;
const v79 = new URIError();
class C80 {
    constructor(a82, a83, a84, a85) {
        this.constructor = URIError;
        const v86 = this.constructor;
        try { new v86(v79, v86, a85); } catch (e) {}
        for (let v88 = 0; v88 < 5; v88++) {
            ~v88;
            v79[v88] = a85;
        }
    }
}
new C80(v79, C80, C80, URIError);
function F91(a93, a94, a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    eval();
    function F99(a101) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const o103 = {
};
