new WeakMap();
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F2);
    const v7 = this.constructor;
    try { new v7(); } catch (e) {}
}
new Uint8Array(192);
const o14 = {
};
const v15 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
const v16 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
try { v16.concat(v15); } catch (e) {}
new Int8Array(15);
class C21 {
    static {
        this < this;
    }
}
new Int8Array(1504);
const v26 = -12 % -12;
const v28 = new Date(v26);
F2.setFullYear(v28, v26, v26);
new Uint8ClampedArray(2429);
const v35 = new Float32Array(64);
new Int8Array(128, Int8Array);
function F40() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        for (let [v42,v43,v44,v45] of F40) {
        }
    } catch(e46) {
    }
}
function F49(a51) {
    if (!new.target) { throw 'must be called with new'; }
    function f52() {
        function f53(a54, a55) {
            v35[0n] -= 64;
            new Int16Array();
            Array(1024);
            class C61 {
                set b(a63) {
                }
            }
            return a51;
        }
        return f53;
    }
    function f64(a65) {
        let v66 = 4096;
        v66--;
        new Uint16Array(v66);
    }
    Object.defineProperty(this, "constructor", { get: f52, set: f64 });
    a51 ^ a51;
    const v71 = this?.constructor;
    try { new v71(3n); } catch (e) {}
}
new F49(349865170n);
