const v2 = new Uint16Array(4);
const v5 = new Uint32Array(16);
const v8 = new Set();
for (let [v9,v10] of 4) {
    try {
        v8.values();
    } catch(e12) {
    }
}
new Int16Array(Int16Array, 155);
const v17 = new Int32Array(8);
Object.defineProperty(v2, "e", { enumerable: true, value: Int16Array });
let v19;
try { v19 = new Int32Array(...v5, ...4, Int16Array, ...v17); } catch (e) {}
[480.7670144583533];
[-1.750658341691318e+308,500.1594684181209,-9.210415585958855e+307,-2.220446049250313e-16,637654.5786308446,-462.50293327647296,0.10186037622021771,-1.7837665061165637,-1.0];
[-1000000.0,2.2250738585072014e-308,-628.9980181184219,-480474.98928211053,740954.6012351348];
new BigUint64Array(1024);
-9223372036854775808 & -9223372036854775808;
let v28 = 127;
v28++;
Uint8Array.length = Uint8Array;
const v31 = new Uint8Array(v28);
function f32(a33, a34) {
    const o35 = {
    };
    o35.g = o35;
    return o35;
}
for (let v36 = 0; v36 < 25; v36++) {
    v36 - v36;
    const v38 = f32();
    v38.g = v38;
    v38.d = v38;
    Object.defineProperty(v38, v36, { enumerable: true, get: f32, set: f32 });
    8 - 8;
    const v43 = new Int8Array(8);
    try { Reflect.preventExtensions(v38); } catch (e) {}
    Reflect.construct(Uint16Array, [v43]);
    v31[v38] = v38;
    gc.name = gc;
    !("sync" == "sync");
    const o52 = {
        "execution": "sync",
    };
    gc(o52);
}
new Uint16Array(3523);
const t48 = 3523;
%VerifyType(t48());
try {
    function f58(a59, a60, a61) {
        for (let i = 0; i < 5; i++) {
            const v62 = /k/gdsy;
            const o73 = {
                toString(a64, a65, a66, a67) {
                    Infinity instanceof a64;
                    try { a67.trimEnd(); } catch (e) {}
                    return "-1024";
                },
                "c": Int32Array,
            };
            f58 >>= 4;
            try {
                v62.toString = v19;
            } catch(e74) {
            }
            for (let v75 = 0; v75 < 50; v75++) {
                Array(36862);
            }
        }
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
        let v81 = 1000.0;
        class C82 {
            static {
                ++v81;
            }
        }
        a61();
        return f58;
    }
    const v89 = [gc,gc,gc,gc,gc];
    function f90(a91, a92, a93) {
        return a91;
    }
    const v96 = [v89];
    const o97 = {
        "arguments": v96,
        "type": "function",
    };
    new Worker(f90, o97);
    f58();
} catch(e100) {
}
