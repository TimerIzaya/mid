function F3() {
    if (!new.target) { throw 'must be called with new'; }
    function f5(a6) {
        for (let v7 = 0; v7 < 5; v7++) {
            function f8() {
                return Math.round(f8);
            }
            f8();
            %OptimizeFunctionOnNextCall(f8);
        }
    }
    this[Symbol.toPrimitive] = f5;
}
new F3();
function f19() {
    return f19;
}
const v20 = /(?:a*)+q(?<a>.)/guds;
function f21(a22) {
    const v23 = a22?.constructor;
    let v24;
    try { v24 = v23(a22, f19); } catch (e) {}
    const o26 = {
        get d() {
            return this;
        },
    };
    return v24;
}
for (let i29 = 0, i30 = 10; i29 < i30; i30--) {
    for (let v37 = 0; v37 < 50; v37++) {
        f21(v20);
    }
}
new WeakSet();
class C40 {
    static #o(a42, a43, a44, a45) {
        return -1077250390n;
    }
    #g;
    [3n] = C40;
    static m(a50, a51, a52) {
        this[13] = -792944846n;
        try { a51(); } catch (e) {}
        return a50;
    }
    #d;
}
const t48 = 3n;
new t48();
new C40();
new C40();
const v58 = new Date();
v58.setFullYear();
v58.getMinutes();
new Uint8Array();
function f63() {
    return -792944846n;
}
new WeakMap();
const v70 = new Uint16Array(1024);
v70[7] = v70;
function f71(a72, a73, a74, a75) {
    return f71;
}
function f76(a77, a78) {
    new Set();
    function f81() {
        function f82(a83, a84, a85, a86) {
            return a84;
        }
        f82(f82, f81, f82, f81);
        return f81;
    }
    %PrepareFunctionForOptimization(f81);
    const o88 = {
        [a77]: -792944846n,
        [a78]: -65537,
        65536: -65537,
    };
    return -65537;
}
f76(9223372036854775807, -65537);
f76(9223372036854775807, 9223372036854775807);
