const v0 = [-1000000000.0,-842.9098811970064,3.0,-685507.8855215888,0.979679272410542,-262265.15067214647,0.6079603597722721,-1e-15,6.470798610462644];
const v1 = [1.7607924659646486e+308,2.220446049250313e-16];
function f2(a3, a4) {
    const v6 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    const v7 = /(?:a*)+q(?<a>.)/guds;
    function f8(a9) {
        const v10 = a9?.constructor;
        try { new v10(a9, a9); } catch (e) {}
        const v12 = v6.constructor;
        try { v12.isArray(5.0); } catch (e) {}
        const v14 = v12(v12);
        try { v14.pop(); } catch (e) {}
        const v16 = a9.constructor;
        v16.$5 = v16;
        v16.$2;
    }
    f8(v7);
    return a3;
}
Object.defineProperty(v1, Symbol.toPrimitive, { enumerable: true, value: f2 });
const v21 = [-621798.9696334077,-1.3569938873693232e+308];
for (let v22 = 0; v22 < 32; v22++) {
    v21["p" + v22] = v22;
}
-1;
-7 < -7;
Object.defineProperty(v0, 1073741823, { enumerable: true, value: 1 });
v1 / -7;
v21 / -7;
-v1;
const v39 = 18244n * 18244n;
const v41 = [64223,65537,-1024,10,-61061,9223372036854775807,7,2,1285303017];
try { v41.entries(); } catch (e) {}
const v43 = [1,4294967295,1073741825,-1941920034,15,-16,4294967297,-987131820,-177792901];
const v44 = [1233683876,255];
let v45;
try { v45 = v44.findLastIndex(v43); } catch (e) {}
class C48 extends Set {
}
C48.a = C48;
const v49 = new C48();
v49[Symbol.toPrimitive] = Symbol;
const v52 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v53 = [601759695];
const v54 = [1073741824,1073741823,1376142744,1073741825];
const t45 = "-1073741824";
t45[3067365464] = v45;
[-378261.5377889718,-5.0,1.7976931348623157e+308];
[-9.901188902628599,-914986.2956205637];
v49[[-423008.74571913516,-156.99846282753163,231.17925947259778,1.7624065214543814e+308,0.781823983449293,NaN]];
522675525n != 522675525n;
function f61(a62, a63, a64, a65) {
    function f66(a67) {
        v52[a63] = a67;
        v1[v39];
        return a62;
    }
    a63.toString = f66;
    -a62;
    a63 | a63;
    let v71 = a64--;
    v71++;
    function f74() {
        const v76 = ("Vre")?.constructor;
        try { v76(v49); } catch (e) {}
        let v78 = -4294967295;
        v78--;
        const o84 = {
            "e": v78,
            ...v52,
            ..."Vre",
            "c": a65,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a82, a83) {
                return a62;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: v78,
            6: -268435456,
        };
    }
    f74.arguments = f74;
    try { f74(); } catch (e) {}
    f74();
    %OptimizeFunctionOnNextCall(arguments);
    let v88;
    try { v88 = v54["find"](..."find", a65, ...v53, ...v54, ...522675525n); } catch (e) {}
    const v89 = v88 <= a64;
    v89 || v89;
}
f61.toString = f61;
const v92 = new BigInt64Array();
v92[Symbol.toPrimitive] = f61;
const v97 = new BigUint64Array();
Object.defineProperty(v97, "toString", { writable: true, enumerable: true, value: Symbol });
for (let v98 = 0; v98 < 10; v98++) {
    f61(v98, v98, BigUint64Array, "-1073741824");
}
f61(v97, 3331, v92);
%OptimizeFunctionOnNextCall(f61);
f61(f61, v97, C48, 3331);
