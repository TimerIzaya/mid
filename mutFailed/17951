const v2 = new Float64Array(257, 257, Float64Array);
-2 * -2;
const v6 = new Float64Array(-2);
try { v6.lastIndexOf(Float64Array); } catch (e) {}
const v10 = new Int32Array(5);
try { v10.some(v2); } catch (e) {}
function f12() {
    return 257;
}
class C16 {
}
try { new C16(); } catch (e) {}
const v18 = new C16();
const v19 = v18?.constructor;
try { new v19(C16, Int32Array); } catch (e) {}
const v21 = new C16();
const v22 = [1073741824,1073741823,1376142744,1073741825];
for (let v23 = 0; v23 < 5; v23++) {
    v23 + v23;
    function f25() {
        "toStringTag" == "toStringTag";
        try {
            v22.forEach();
        } catch(e29) {
            with ("toStringTag") {
                length = "toStringTag";
                v21 & v18;
            }
        }
        return "toStringTag";
    }
    f25();
    %OptimizeFunctionOnNextCall(f25);
}
