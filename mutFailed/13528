function f3(a4) {
    const o39 = {
        "b": a4,
        [a4](a6, a7) {
            super[9007199254740991] = a7;
            function f8(a9, a10, a11, a12) {
                'use strict';
                try { a4(-1073741824, -1073741824, a9, -1073741824, this); } catch (e) {}
                function f17(a18, a19) {
                    const o20 = {
                    };
                    return o20;
                }
                f17();
                Math.fround(a11);
                Math.fround(64);
                return a11 & (64 << 4294967297);
            }
            const v27 = new Uint8ClampedArray();
            class C28 {
                constructor(a30, a31, a32, a33) {
                    const v34 = this.constructor;
                    try { new v34(v27); } catch (e) {}
                    for (let v36 = 0; v36 < 5; v36++) {
                        ~v36;
                        v27[v36] = a33;
                    }
                }
            }
            return a4(a7, a7, -1073741824, a4);
        },
    };
    return o39;
}
function f40(a41, a42) {
    const o46 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o46);
    return 9007199254740991;
}
f3[Symbol.toPrimitive] = f40;
f3.prototype;
const v51 = f3(-1073741824);
const v52 = f3(f3);
const v53 = f3(-3);
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    a56 - a56;
    a57 >>> a57;
    try {
        try { Symbol.keyFor(Symbol); } catch (e) {}
        class C64 {
        }
        const v65 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
        const v66 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
        class C67 {
            constructor(a69, a70) {
                super[v66] = v65;
            }
        }
        const v71 = new C67(v65, v66);
        v71.toJSON = v71;
        function f72(a73) {
            return C67;
        }
        const v76 = [v71];
        const o77 = {
            "arguments": v76,
            "type": "function",
        };
        new Worker(f72, o77);
        this.h = v51;
    } catch(e79) {
    }
    try {
        this.d = a56;
    } catch(e80) {
    }
    function f81() {
        const o88 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a86, a87) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        return o88;
    }
    %PrepareFunctionForOptimization(f81);
    try {
        this.e = a59;
    } catch(e89) {
    }
    Array();
    for (let v93 = 0; v93 < 25; v93++) {
        function f94(a95, a96, a97, a98) {
            return -261.99102172609366;
        }
    }
}
new F54(9007199254740991, -3, v53, v51);
const v103 = new F54(-1073741824, -1073741824, v51, v51);
v103.d = v103;
const v104 = new F54(-3, -1073741824, v52, v53);
const v105 = /a\sc/g;
/xyz?/gvdm;
const v107 = /V\118foo[z]*/dmsy;
v107.b = v104;
v107.b = v107;
Object.defineProperty(BigInt64Array, "g", { configurable: true, enumerable: true, value: v105 });
BigInt64Array.g = BigInt64Array;
new BigInt64Array(257);
new Int16Array(180);
const v116 = new Float64Array(2898);
v116[1117] = v116;
try { new Array(f3); } catch (e) {}
const v120 = Array(1024);
v120[1022] = 180;
function f122() {
    return f3;
}
Object.defineProperty(Uint8ClampedArray, "constructor", { writable: true, enumerable: true, get: f122 });
const v124 = [Uint8ClampedArray];
const v125 = v124?.__defineSetter__;
try { new v125(v120, BigInt64Array); } catch (e) {}
const v127 = Reflect.construct(Uint8ClampedArray, v124);
v127[1] = v127;
const v128 = v127.constructor;
v128.constructor = f40;
const v129 = v128?.constructor;
new BigUint64Array();
class C132 {
    constructor(a134, a135) {
        function f136(a137) {
            function f138(a139) {
            }
            const v142 = new Uint16Array(1024);
            v142[7] = v142;
            return C132;
        }
        const o145 = {
            "type": "function",
        };
        o145.arguments = this;
        new Worker(f136, o145);
    }
}
new C132();
try { new v129(v105); } catch (e) {}
new v128(v120);
