[];
[664759814,36432,255,-7,128,1000,65536,-55156];
const v3 = [4294967296];
[-540142436,-6,-24814,8,-683073315,536870912];
512n | 512n;
const v12 = [10773,-7,-6,9,3216,3];
[550556285,64,10,40180,10,1024,1024,-9223372036854775807,-2147483649,9];
[1568259842,-6555,-364827627];
function F18() {
    if (!new.target) { throw 'must be called with new'; }
}
const v20 = new F18();
const v21 = new F18();
const v22 = v21?.constructor;
try { new v22(); } catch (e) {}
function f24(a25) {
}
f24(v21);
f24(v20);
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v30 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
v30[7] = v30;
for (let v32 = 0; v32 < 25; v32++) {
    v32 - v22;
    const t23 = "p";
    t23[0] = "p";
    const v35 = "p" + v32;
    try { v35.fixed(); } catch (e) {}
    v29[v35] = v32;
}
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
}
F37.caller = F37;
new F37(v30);
class C42 {
}
F37.length = C42;
const v44 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v45 = [601759695];
const v46 = [1073741824,1073741823,1376142744,1073741825];
v46[2] = v29;
function f48(a49, a50, a51, a52) {
    function f53() {
        try { ("Vre").split("Vre", v29); } catch (e) {}
        const v57 = -4294967295 | -4294967295;
        a49 = a50;
        b = v45;
        v3.length;
        try {
            v46.forEach(Float64Array);
        } catch(e61) {
            e61.b = e61;
        }
        const v62 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v64 = Symbol.toPrimitive;
        const o70 = {
            toString(a66, a67) {
                a52 && Float64Array;
                a66 *= v64;
                return Float64Array;
                return 512n <= v62;
            },
        };
        try { o70.toString(Float64Array, 522675525n); } catch (e) {}
        const o91 = {
            "c": -4294967297n,
            [522675525n](a74, a75) {
            },
            "c": v45,
            valueOf(a77, a78) {
            },
            "b": -4294967295,
            [-4294967297n](a80, a81, a82, a83) {
            },
            "e": -4294967295,
            "e": v57,
            "maxByteLength": -4294967295,
            "arguments": v44,
            ...v12,
            "type": "Vre",
            ..."Vre",
            valueOf(a85, a86) {
            },
            ..."Vre",
            4: a51,
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a88, a89, a90) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f53();
    new a50();
    %OptimizeFunctionOnNextCall(f53);
    try { v46["find"]("find", a52, v45, v45); } catch (e) {}
}
for (let v97 = 0; v97 < 10; v97++) {
    v97 >> v97;
    f48();
}
%OptimizeFunctionOnNextCall(f48);
f48();
