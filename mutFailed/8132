const v0 = [];
function f3() {
    function f4(a5, a6) {
        try {
            a5.b = a5;
        } catch(e7) {
        }
        return a6;
    }
    return f4;
}
Object.defineProperty(BigUint64Array, Symbol.toPrimitive, { configurable: true, get: f3 });
const v10 = new BigUint64Array(1583);
const v13 = new Uint32Array(14);
new BigInt64Array(2130);
function f17(a18, a19) {
    const o26 = {
        set g(a21) {
            super.f = v0;
            ("h").normalize("NFKC");
            try { ("h").trimRight(); } catch (e) {}
        },
        "h": Uint32Array,
        "b": BigInt64Array,
        ...v10,
        4085: 14,
        [BigUint64Array]: a19,
        ...v13,
    };
    return o26;
}
f17(2130, 2130);
f17(2130, 14);
f17(14, 2130);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1;
    } catch(e33) {
    }
    try {
        this.c = 1;
    } catch(e34) {
    }
    try {
        this.d = 1;
    } catch(e35) {
    }
}
function f36(a37) {
    new Uint8Array(10);
    new Uint16Array(6);
    new Uint16Array(4);
    return BigUint64Array;
}
F30.valueOf = f36;
new F30();
const v48 = new F30();
new F30();
12 * 12;
[12,12];
const v55 = v0?.indexOf;
let v56;
try { v56 = new v55(Int32Array); } catch (e) {}
2707 / 2707;
new Uint8Array(2707, 2707, 128);
new v56(128);
const v65 = v55.name;
const v66 = new Uint16Array(92);
const v69 = new Int8Array(257);
const v70 = v69?.subarray;
let v71;
try { v71 = new v70(F30, 92); } catch (e) {}
function f72() {
}
try { f72(); } catch (e) {}
const v74 = [f72,f72];
const v76 = new Date();
try { v76.setDate(v71); } catch (e) {}
try { ("getUTCMinutes").fixed(); } catch (e) {}
v76["getUTCMinutes"]();
const o82 = {
    0: "1ya",
    162: "1ya",
};
o82[162];
try { v74.includes(v74); } catch (e) {}
const v85 = [v74,f72];
v85.b = v74;
const v86 = [v85];
try { v86.pop(); } catch (e) {}
let v90;
try { v90 = ("toString").padStart(v48); } catch (e) {}
v90[6] = v90;
try { ("-1865512128").valueOf(); } catch (e) {}
const o101 = {
    toString(a95, a96, a97, a98) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
try { Uint8ClampedArray.from(128); } catch (e) {}
new BigUint64Array(12);
Date.b = 3989;
v56.b = Date;
class C109 extends Date {
    static get c() {
        const v111 = `
        `;
        eval();
    }
}
new v65(3989);
try { ("Bl4").toWellFormed(); } catch (e) {}
const v119 = new BigUint64Array("Bl4");
Int32Array.name = Int32Array;
const v121 = new Int32Array();
v121.__proto__ = v119;
let v123;
try { v123 = new Int8Array(9, v66, 3989); } catch (e) {}
function f124(a125, a126) {
    delete a125?.[268435440];
    Set ^ Set;
    return Uint32Array;
}
v123.constructor = f124;
v123?.constructor;
class C131 {
}
const v132 = new C131();
v132[10] = v132;
v132[10].prototype;
const o138 = {
    "execution": "async",
    "type": "minor",
};
gc(o138);
