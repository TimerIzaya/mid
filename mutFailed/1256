function f3() {
    return f3;
}
const v4 = /\P{scx=Greek}(?<a>)?/umy;
/x(?=.)*/vdsy;
const v6 = /0f[\cA]/guis;
class C7 extends f3 {
    constructor(a9, a10, a11) {
        super();
    }
    [4294967295];
    1073741823 = v6;
    4239770577 = v6;
    static 7 = f3;
}
new C7(1951189789, v6, -65537);
new C7(1951189789, v4, -65537);
new C7(4294967295, v4, 1951189789);
const v21 = Symbol.iterator;
const t19 = "string";
t19[v21] = v21;
const v22 = [58584,15,9007199254740990,2146023485];
const v23 = [46733,-268435456];
Object.defineProperty(v22, 65537, { writable: true, value: v23 });
Promise.d = Promise;
const v28 = new Float32Array(1000);
1000 instanceof WeakMap;
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new Uint16Array(4294967295);
v23.__proto__ = ([Uint32Array,Uint32Array,Uint32Array,Uint32Array]).push();
function f39(a40, a41) {
    Math.atan2(Math, f39);
    return f39;
}
v28.DataView;
const v48 = new Float32Array(7);
try { v48.filter(4294967295); } catch (e) {}
try {
const t0 = 4294967295;
t0();
} catch (e) {}
new Uint8ClampedArray();
const o75 = {
    m() {
        Math.log1p(2.220446049250313e-16);
        for (let i59 = 0; i59 < 10;) {
        }
        const v67 = new Uint8Array(Uint8Array, Uint8Array);
        v67[Math.atan2(-988.8649474800335, 10000)] = 10000;
        const o73 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o73);
    },
};
try { Int32Array(-65537, Float32Array, Int32Array); } catch (e) {}
const v78 = new Int32Array(256);
function F79(a81, a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    const v84 = this?.constructor;
    try { new v84(Uint16Array, a83, a83); } catch (e) {}
    a81 * a81;
    a83++;
    this.d = a81;
    try {
        this.g = Int32Array;
    } catch(e88) {
    }
}
try { new F79(F79, 256, 256); } catch (e) {}
const v90 = new F79(256, v78, 4294967295);
const v91 = v90?.g;
try { new v91(Uint16Array, v48, 7); } catch (e) {}
new F79(7, 7, 4294967295);
class C95 extends Set {
}
class C96 {
    #a;
    constructor(a98, a99, a100) {
        a99.#a;
    }
}
new F79(256, Float32Array, 256);
C7.asinh();
const v107 = new Float32Array(Float32Array, Float32Array, Float32Array);
async function f109(a110, a111, a112) {
    v107.h = v107;
    await 160;
    return f109;
}
f109(v107, v107, Float32Array);
Math.sin(3.862600614459211e+307);
