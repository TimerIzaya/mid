function f5(a6) {
    -a6;
    let {"a":v8,"b":v9,"e":v10,} = a6;
    try {
        v10.h = 15;
    } catch(e11) {
    }
    return 15;
}
f5.name = f5;
let v12 = f5(1000000.0);
v12++;
class C15 {
    get e() {
        super[this] = this;
        let v17 = 0;
        Object.defineProperty(this, "b", { configurable: true, value: -8.916963125499999 });
        super.c = -2147483648;
        while (v17 < 9) {
            delete this[3261];
            4294967297 >>> v17;
            v17++;
        }
        return 2.220446049250313e-16;
    }
}
const v29 = new C15();
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
new C15();
class C33 {
    static e = C15;
    [C15] = 2.220446049250313e-16;
}
new C33();
new C33();
const v36 = new C33();
const v37 = v36?.constructor;
try { new v37(); } catch (e) {}
const v39 = new C15();
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    a42 % a42;
    const v46 = a44?.constructor;
    try { new v46(); } catch (e) {}
    try {
        this.a = a43;
    } catch(e48) {
    }
    try {
        this.f = this;
    } catch(e49) {
    }
}
let v50;
try { v50 = new F40(v29, v36, 4294967297); } catch (e) {}
const v51 = new v50(1000000.0, 15, v39);
new F40(v51, 15, v39);
new F40(v29, 4294967297, v39);
try { Date.call(undefined); } catch (e) {}
try { WeakMap.apply(Int32Array, Date); } catch (e) {}
const v60 = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
for (let v61 = 0; v61 < 20; v61++) {
    v61 >>> v61;
    let [,v63,...v64] = v60;
    v63 >> v63;
    try { v64.copyWithin(4294967297, v36); } catch (e) {}
}
[7.554475698528474];
Object.defineProperty(Uint8ClampedArray, 1, { value: WeakMap });
new Float64Array(1073741824);
