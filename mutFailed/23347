[1.2125544156978305e+308,-1000000000000.0,2.0,-2.0,-4.0,983.694754009661,-1.6657421671177897e+308,-2.0];
const v1 = [-Infinity,0.0,-Infinity];
[1e-15,6.227091625069065,44112.28596078383,1.7976931348623157e+308,2.1856570736286685,0.7626247022073152];
function f3() {
    return v1;
}
const v5 = new WeakMap();
let v8 = 65537;
const v11 = new Int32Array(3552);
new Float64Array(211);
const v17 = new Uint8Array(127);
const v19 = [-1024];
for (let v20 = 0; v20 < 5; v20++) {
    delete v19[v20];
}
const v23 = new BigInt64Array();
let v24 = 10;
v24++;
const v27 = Float64Array.length;
const v28 = new v27();
function f29(a30, a31) {
    211 % v27;
    const v35 = new Int16Array(129);
    return v35;
}
v17.constructor = f29;
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    a39 - a39;
    const v41 = this.constructor;
    v41.name = v41;
    const v43 = new Int16Array();
    const v44 = v43.lastIndexOf();
    v44 ^ v44;
    try { new v24(); } catch (e) {}
}
const v47 = new F36();
v47.constructor;
new Float64Array();
const v50 = v28?.constructor;
try { new v50(); } catch (e) {}
new Float64Array(1469882406);
function f61() {
    const o75 = {
        m(a63) {
            this.d = a63;
            3938 & 3938;
            super.c = a63;
            v47[this] = v5;
            const v66 = a63?.d;
            return v17;
            v11[BigInt64Array];
            Int8Array.name = Int8Array;
            const v69 = new Int8Array(v66);
            let v71 = 0;
            v71 >> v71;
            for (let i = 0; i < 5; i++) {
                [...v8] = v69;
                v71++;
            }
            const o74 = {
            };
            o74.h = o74;
        },
    };
    o75.m(o75, o75, o75, f61, f61);
    return o75;
}
const v78 = f61()?.m;
try { new v78(v23); } catch (e) {}
try {
const t0 = 6;
t0(6, 6);
} catch (e) {}
