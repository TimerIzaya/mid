function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -65537;
    } catch(e3) {
    }
    try {
        this.d = -65537;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
new Uint8Array(2);
new Int16Array(1024);
new Int8Array(10);
let v29;
try { v29 = ("function")["-268435456"](); } catch (e) {}
const v30 = v29 + v29;
v30 >> v30;
class C34 {
    static p(a36) {
    }
}
let v40;
try { v40 = new C34(); } catch (e) {}
const v41 = v40.constructor;
try { v41(); } catch (e) {}
const v43 = new C34();
v43.propertyIsEnumerable;
const t30 = -1;
const v45 = new t30();
const t33 = v45.constructor;
new t33();
try { v45.constructor(); } catch (e) {}
const v49 = new C34();
v49.constructor;
let v51;
try {
const t0 = -1207573787n;
v51 = new t0();
} catch (e) {}
const v52 = v51?.__defineGetter__;
try { new v52("toStringTag", "toStringTag"); } catch (e) {}
const t45 = v51?.constructor;
new t45();
const v56 = new Uint8Array();
v56.constructor;
v56.__defineGetter__;
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    const v65 = this?.constructor;
    try { new v65(a61, a61); } catch (e) {}
    try { a62.isPrototypeOf(C34); } catch (e) {}
}
const v68 = F59?.bind;
try { v68(); } catch (e) {}
new F59("toStringTag", v49);
new F59(v45, "flags");
const v72 = new F59(65536, "toStringTag", "toStringTag", "HkAXC");
let v75 = -128 % -128;
v75++;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v78 = [601759695];
const v79 = [1073741824,1073741823,1376142744,1073741825];
function f81(a82, a83, a84, a85) {
    function f87() {
        const o102 = {
            [522675525n](a90, a91) {
                Int16Array[0] = -27833;
            },
            get d() {
                return this;
            },
            "maxByteLength": -128,
            "c": v78,
            valueOf(a96, a97) {
            },
            toString(a99, a100, a101) {
            },
        };
        o102.toString(v72, v72, v72);
    }
    f87();
    const v106 = new Int8Array();
    v106.buffer;
    %OptimizeFunctionOnNextCall(f87);
    let v109;
    try { v109 = v79["find"]("find", a85, v78, v79); } catch (e) {}
    v109 <= a84;
    return arguments;
}
try { f81("HkAXC", v78, "flags", "HkAXC"); } catch (e) {}
for (let v112 = 0; v112 < 5; v112++) {
    f81();
}
