const v0 = [];
4294967296 | 4294967296;
let v6;
try { v6 = new Date(-9223372036854775807, -9223372036854775807, Date, -9223372036854775807, Date, v0, v0); } catch (e) {}
new Date();
const v8 = [256,4294967295];
[9007199254740990,-246630791,268435439,-47631,1000];
[18194,-2147483649,2147483649,-2092785396,-1024,-2];
BigUint64Array.length = BigUint64Array;
new v6(1114);
const v16 = new Float64Array(238);
v16[191] = v16;
const v18 = 2 | 2;
const v20 = new Float64Array(2);
function f21() {
    return f21;
}
const v22 = f21?.constructor;
try { new v22(4294967296); } catch (e) {}
class C30 {
    static #valueOf(a32, a33, a34) {
        const v35 = this.f;
        try { v35(); } catch (e) {}
        v8[65536] = v20;
        v22?.[4294967296];
        function F38(a40, a41) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = Date;
            } catch(e42) {
            }
            try {
                this.b = this;
            } catch(e43) {
            }
            try {
                this.h = v18;
            } catch(e44) {
            }
        }
        const v45 = new F38(v22, -3);
        new F38(v8, v6);
        new F38(v45, this);
        try {
            C30();
        } catch(e49) {
        }
        return a34;
    }
    get f() {
        try {
            f21();
        } catch(e52) {
            try {
                const o53 = {
                };
                this.fuck(o53, this, this, e52);
            } catch(e55) {
            }
        }
    }
}
const v56 = new C30();
const v57 = v56?.constructor;
try { new v57(); } catch (e) {}
%PrepareFunctionForOptimization(f21);
%OptimizeMaglevOnNextCall(f21);
try { v56.o(v56, 5, 9007199254740991); } catch (e) {}
