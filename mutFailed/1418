function f3(a4) {
    const o17 = {
        "f": a4,
        "g": a4,
        "c": a4,
        __proto__: a4,
        716952824: a4,
        "b": 4294967295,
        set d(a6) {
            let v9 = -10;
            const v10 = ++v9;
            let v11 = 2 & this;
            v10 >> a4;
            Math.sqrt(v11-- << a4);
            !Math;
        },
    };
    return o17;
}
const v18 = f3(2);
const v19 = f3(4294967295);
const v20 = f3(4294967295);
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const t25 = 4294967295;
        t25.e = a24;
    } catch(e25) {
    }
    try {
        this.c = a24;
    } catch(e26) {
    }
}
new F21(4294967295, v19);
new F21(1, v18);
new F21(2, v20);
class C30 extends F21 {
    #e;
    [v19];
    static toString(a32, a33, a34) {
        v19 && F21;
        new Int8Array(257);
        new Uint16Array(19);
        new Int32Array(691);
        return a34;
    }
}
new v18();
new C30();
new C30();
const v50 = new Int32Array();
const v52 = new BigInt64Array();
const v53 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
let v54;
try { v54 = v53.some(); } catch (e) {}
const v55 = [-1.7976931348623157e+308];
function f56(a57, a58, a59, a60) {
    const o68 = {
        toString(a62, a63, a64) {
            try { this.toString(a63, v54, a62); } catch (e) {}
            a63++;
            a59[a58] = a57;
        },
    };
    return Int32Array;
}
const v69 = f56(v52, v53, v55);
const v70 = f56(v50, v53, v53);
for (let v71 = 0; v71 < 5; v71++) {
    v53.b = v70 % v69;
}
