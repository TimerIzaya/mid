const v2 = new Array(3);
[-256,8,1073741823,-65537];
([Float32Array])["concat"]();
const v13 = [-9223372036854775808];
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a17;
    for (let v19 = 0; v19 < 5; v19++) {
    }
    this.g = 4;
}
new F14(v13, -1977599108);
[10688,-15652,47212,-2039303067,21504,13];
const v22 = [2056,2002234345,-9007199254740991,-256];
class C23 {
    static get c() {
        Math.log2(0);
        const v28 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
        const v29 = [101.2980265931285,-1.7177856293756712e+307,-1000000.0,-8.49664044843577];
        function f30(a31, a32, a33, a34) {
            a31.shift();
            a31[3] = a31;
            const o36 = {
                __proto__: v29,
            };
            return o36;
        }
        f30(v28);
        new Array(...v2, -9014n, this, 3, -15n, ...v22);
        const o42 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o42);
        return -15n;
    }
    d;
    static #e = v22;
    constructor(a45) {
        super();
        delete this.h;
        super.h = this;
        /\1\2(a(?:\1(b\1\2))\2)\1()l/udm;
    }
}
new C23();
new C23();
new C23();
new Int8Array(4096);
new Uint32Array(1845);
new Uint8Array(3494);
function f60() {
    return f60;
}
function F61() {
    if (!new.target) { throw 'must be called with new'; }
}
new F61();
const v64 = new F61();
const v65 = new F61();
function f68() {
    return f68;
}
const v69 = [16,1073741824];
[f60];
[v69,v64];
f60();
for (let v73 = 0; v73 < 5; v73++) {
    f68();
}
try { v65.n(); } catch (e) {}
for (let v76 = 0; v76 < 5; v76++) {
    class C77 {
    }
    new C77();
    const v80 = Symbol.iterator;
    const o89 = {
        [v80]() {
            let v82 = 10;
            const o88 = {
                next() {
                    v82--;
                    const v86 = v82 == 0;
                    const o87 = {
                        "done": v86,
                        "value": v82,
                    };
                    return o87;
                },
            };
            return o88;
        },
    };
}
