let v1 = Int8Array;
v1--;
/4H/gvisy.compile(/[m]/gvdimsy);
const v7 = this.Realm;
try { v7.owner(); } catch (e) {}
function f10() {
    const o18 = {
        [-4294967297n](a12, a13, a14, a15) {
            eval();
        },
    };
    return f10;
}
new v1(1024);
new Uint8ClampedArray(1355);
new Uint8ClampedArray(8);
new Int8Array(1355);
const v29 = [];
function f30() {
    const o35 = {
        ...v29,
        "c": v29,
        "e": v29,
        "f": v29,
        set b(a32) {
        },
        "arguments": v29,
        __proto__: f30,
        [v29]: v29,
        "h": f30,
        get e() {
            try {
            } catch(e34) {
            }
        },
        ...v29,
        "d": v29,
        4169472433: v29,
        1000: f30,
    };
    v29.e = o35;
    65537 == 4096n;
    const v41 = new Int32Array(1024);
    for (const v42 of v41) {
        const o45 = {
            "maxByteLength": 1293466293,
        };
        new SharedArrayBuffer(1796, o45);
    }
    return o35;
}
const v49 = [601759695];
for (let v50 = 0; v50 < 5; v50++) {
    v49.unshift(3);
}
const v54 = [0.0,1000000000.0,168.7956281727238,-575464.6142395872,-1000000000.0,938.6271876998214];
const v58 = new Uint16Array();
const v61 = new Int32Array();
class C62 {
    static #d = -2;
    constructor(a64, a65) {
        try {
            v58.#d += v61;
        } catch(e66) {
            e66.toString();
        }
    }
}
const v68 = new Float64Array(64);
v68[5] = v54;
function f69(a70, a71, a72) {
    return v68;
}
const v75 = [v68,v54];
-256n >> -256n;
([])["concat"]();
const o84 = {
    "maxByteLength": -189984767,
    104: "concat",
    [v1]: v1,
    ["function"]: "function",
    "type": Int8Array,
    "arguments": v75,
    162: "function",
    valueOf(a82, a83) {
    },
    4: "concat",
    3677: -4294967297n,
    "type": "function",
};
new Worker(f69, o84);
