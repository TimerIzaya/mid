function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -31921;
    } catch(e3) {
    }
    try {
        this.g = -31921;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
new F0();
class C14 {
    p(a16, a17, a18, a19) {
        -1e-15 < a17;
        const o24 = {
        };
        try {
            this.h = F0;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.h = F0;
            o26.d = v6;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.h = F0;
            o28.d = v6;
            o28.f = -31740;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.h = F0;
            o30.d = v6;
            o30.f = -872653808;
        } catch(e31) {
        }
        return o24;
    }
}
new C14();
new C14();
new C14();
[-7,16655,-907784713,2147483647,7,18984,418151650];
const v41 = 347049458 && 347049458;
for (let v43 = 0; v43 < 5; v43++) {
    const o44 = {
    };
    const v45 = o44.p;
    BigInt64Array.length;
    const v49 = new v45(4046, v41);
    function f50(a51, a52) {
        const v53 = [];
        [v53,v53];
        function F55(a57) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F55.arguments = F55;
        class C58 extends F55 {
        }
        const v59 = new C58();
        const o62 = {
            set hasInstance(a61) {
            },
        };
        const v63 = o62.__lookupGetter__;
        try { new v63(o62); } catch (e) {}
        for (const v66 in o62) {
            try { v59.valueOf(); } catch (e) {}
        }
        let o68 = {
        };
        [,...o68] = v49;
    }
}
