class C3 {
    static c;
    constructor(a5) {
        a5.d = a5;
        let v6 = this % a5;
        v6 - v6;
        let v8 = a5 >>> v6;
        v8 - v8;
        16 % 10000;
        [v8,v6] = "getFloat32";
        try {
            v6.length = 1;
        } catch(e12) {
        }
    }
    1;
    static ["getFloat32"] = 16;
}
const v13 = new C3(C3);
const v14 = new C3(16);
const v15 = new C3(v13);
const v16 = [10000,v15,16,v15];
const v17 = [v13,v14,"getFloat32",v16];
[v16];
class C19 {
    static 1 = v16;
    toString(a21, a22, a23, a24) {
        a23 = a24;
        let v25;
        try { v25 = a22.clear(16, a22, v16); } catch (e) {}
        super.a = a24;
        Reflect.construct(v25, [v25,v25,v14,v17], C3);
        return Reflect;
    }
    static c = v13;
    static [-1];
    [v17];
    static #h = "getFloat32";
}
C19[1] = C19;
const v29 = new C19();
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
new C19();
const v33 = new C19();
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this?.constructor;
    try { new v38(); } catch (e) {}
    this.d = -15;
}
F36.fuck = F36;
class C41 extends F36 {
}
const v42 = C41?.constructor;
try { new v42(v33); } catch (e) {}
class C44 extends C41 {
    set d(a46) {
        for (const v47 in C41) {
        }
    }
}
C44.arguments = C44;
new C44();
new C44();
