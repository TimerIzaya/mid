new Set();
function F3(a5, a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    const v8 = this.constructor;
    try { new v8(this, a7, -14); } catch (e) {}
    a7.valueOf(a5, a7);
}
class C14 {
}
C14.length;
9n >> 9n;
[128,-1934034791,40657,768663920,-9007199254740992,4294967296,9007199254740991,9];
[7,536870887,5,536870888,-11397,-1603325076,-2136921311,2147483647,-1316879933];
[-15,-65536,24783,127,-5,6,65537,-5,9007199254740992,-2061701205];
function f21() {
    const v22 = [];
    function f23() {
        const o26 = {
            ...v22,
            "c": v22,
            "e": v22,
            "f": v22,
            set b(a25) {
            },
            "arguments": v22,
            __proto__: f23,
            [v22]: v22,
            "h": f23,
            ...v22,
            "d": v22,
            4169472433: v22,
            1000: f23,
        };
        v22.e = o26;
        65537 == 4096n;
        const v32 = new Int32Array(1024);
        for (const v33 of v32) {
            const o36 = {
                "maxByteLength": 1293466293,
            };
            new SharedArrayBuffer(1796, o36);
        }
        return o26;
    }
    return 8n;
}
const v41 = [Uint32Array];
try { v41.find(Worker); } catch (e) {}
let v45 = new Float32Array(55);
let v48;
try {
const t0 = 50;
v48 = t0();
} catch (e) {}
let v49 = new Float64Array(v45);
({"buffer":v48,"byteLength":v49,"length":v45,} = v49);
[-2147483647,1554136117,-1282211322,536870889,65537,40136,65535,9,257,10000];
[1631731465,771555135,-6,1240987723];
[-2147483648,-4294967296,1073741824,512,-4096,7,-3,2147483648,-2,-6];
/(?=a){0,10}aSf*/gdim;
for (const v58 of Array(4087)) {
}
/((\xed\xa0\x80))\x02/uim;
/CUDG\p{Script_Extensions=Greek}[sa{1,2}?a[a-z]]+/gudiy;
RegExp(RegExp);
