const v0 = [-1000.0,5.0,858303.998853228,4.0,-7.730137683086749,-6.638904979872993,670088.833943052,-268.48749499147755,-1.0];
const v1 = [8.180922012437019e+307,-2.6128117962504094,-43671.319862324395,-1e-15,-1e-15,-551385.5848208324,-2.220446049250313e-16];
const v2 = [6.056188511315316,0.6845155000831696,1000000000000.0,640.349816810822,-Infinity,0.8791203184564138,-0.8961048405934449];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a5;
    } catch(e7) {
    }
    try {
        this.a = a5;
    } catch(e8) {
    }
    try {
        this.b = v0;
    } catch(e9) {
    }
}
const v10 = new F3(v1, v1);
class C12 {
}
function f14() {
    for (let v15 = 0; v15 < 5; v15++) {
    }
    return typeof 522675525n === "undefined";
}
const v19 = new C12();
with (v19) {
    try {
        v1.toString = f14;
    } catch(e20) {
    }
    [] = "NaN";
    Math.asin();
    const v26 = new Uint32Array(8);
    v26.lastIndexOf(8);
    try { ("NaN").startsWith(h); } catch (e) {}
}
new F3(v2, v2);
new F3(v1, v2);
async function f32(a33, a34, a35) {
    for (let v36 = 0; v36 < 10; v36++) {
    }
    return "symbol";
}
new Int8Array(210);
new Uint8ClampedArray(10);
new Uint16Array(1);
const v49 = [-6135,-37816,1634505153,-2147483649,10];
const v50 = [0.23449681451060211,-1.3180974566102865e+308,-2.0,-1000000000.0,0.6107310765455765];
const v52 = new Int16Array(v50);
function f53(a54, a55, a56, a57) {
    const v58 = new Int8Array(Int8Array);
    const v59 = v58.buffer;
    v59.slice(Int8Array, Int8Array);
    let v61 = a55.transfer();
    const o63 = {
        get e() {
            return this;
        },
    };
    function f64() {
        return o63;
    }
    Object.defineProperty(o63, a57.toPrimitive, { enumerable: true, get: f64 });
    for (let [i74, i75] = (() => {
            v61 = v59;
            const v70 = v10.__proto__;
            for (let v71 = 0; v71 < 32; v71++) {
                v70["p" + v71] = v71;
            }
            return [0, 10];
        })();
        (() => {
            const v76 = i74 < i75;
            !v76;
            return v76;
        })();
        i75--) {
        for (let v83 = 0; v83 < 10; v83++) {
            i75 - i75;
            ("number")[i74];
            "number" | v50;
            v49.length;
            v52.__proto__;
        }
    }
    return a55;
}
for (let v89 = 0; v89 < 10; v89++) {
    f53(v89, v89, v89, v89);
}
%OptimizeFunctionOnNextCall(f53);
f53();
