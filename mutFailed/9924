function f0() {
    const o11 = {
        "e": 12823,
        __proto__: "9007199254740990",
        m(a5) {
            const v6 = a5?.e;
            let v7;
            try { v7 = v6(v6, this, a5); } catch (e) {}
            super.d ^= 1.7976931348623157e+308;
            try {
                v6.__proto__ = a5;
            } catch(e8) {
            }
            let v10;
            try { v10 = v7["toString"](a5, a5, "9007199254740990", "9007199254740990"); } catch (e) {}
            return v10;
        },
        6: "9007199254740990",
        "c": 12823,
    };
    return o11;
}
const v12 = f0();
const v13 = f0();
const v14 = f0();
function f15() {
    return f0;
}
function f16() {
    return v14;
}
function f20(a21, a22) {
    const o23 = {
        "f": 1000000.0,
        ...v12,
        __proto__: v13,
        [1000000.0]: v14,
        "b": v14,
        ...v13,
        ...a21,
        [-2.220446049250313e-16]: a21,
        "g": f0,
        "d": a21,
        "e": a21,
    };
    return o23;
}
f20(v13, f20);
f20(v13, f16);
f20(v13, f16);
function f27() {
}
const v29 = new WeakSet();
function f34() {
    Date[-22872n] = Date;
    Array(1102693041);
    return 256;
}
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = this.constructor;
    try { new v44(a42); } catch (e) {}
    -a42;
    a43--;
    this.h = f34;
}
new F40(65537, f34);
class C49 extends F40 {
    3120 = F40;
    toString(a51, a52) {
        this.constructor;
        new v12();
        -this;
    }
}
new v12();
new C49();
const v58 = new C49();
function f61(a62, a63, a64) {
    return a64;
}
const v67 = new Uint16Array(4294967295);
try { Int32Array(7, Float32Array, Int32Array); } catch (e) {}
function F72(a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = this?.constructor;
    try { new v77(Uint16Array, a76, a76); } catch (e) {}
    a74 * a74;
    a76++;
    this.d = a74;
    try {
        this.description = v67;
    } catch(e81) {
    }
    try {
        this.g = Int32Array;
    } catch(e82) {
    }
}
const v86 = new Array(3062);
function f87(a88, a89) {
    const o93 = {
        "f": a89,
        __proto__: v29,
        set b(a91) {
            let v90 = this;
            v90 = WeakSet;
            Object.defineProperty(v86, -1, { configurable: true, value: a91 });
            new WeakSet(v90);
        },
    };
    return o93;
}
f27(WeakSet, f27);
f87(f87(2147483649, f27), WeakSet);
function f97() {
}
const v98 = [f97,f97];
const v99 = [v98,f97];
const v100 = [v99];
new Uint8ClampedArray(3989);
const v109 = new Int8Array(9);
new Int16Array(186);
class C113 {
    [v98];
    10;
    static c = v109;
    constructor(a115, a116) {
        const v117 = this.constructor;
        try { new v117(this, v117, a115, a115); } catch (e) {}
        (f97 >= a115) instanceof f97;
    }
}
for (let i123 = 0, i124 = 10;
    i123 < i124;
    (() => {
        function F131(a133, a134) {
            if (!new.target) { throw 'must be called with new'; }
            const v135 = this.constructor;
            try { new v135(); } catch (e) {}
            a133 & a133;
        }
        new F131();
        new F131();
        const v140 = new F131();
        v140.a = v140;
        i123++;
    })()) {
}
new C113();
new C113();
function F146(a148, a149) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v58;
}
Array(10000);
new C113();
const o156 = {
    10: f0,
    [f34]: v100,
    2: C113,
    ...v99,
    "f": f87,
    "execution": "async",
    "type": "minor",
};
