const v3 = [2.220446049250313e-16];
const v4 = [-406239.91278255405,-628.8630216652034,-878.7173813113609,5.477403859431288,0.5802405337649236,-9.81997968248402e+307,609789.7588831997,-2.220446049250313e-16,0.15607319280234877,0.686986712673513];
[1000000000000.0];
class C6 {
    65536 = v4;
    static p(a8, a9, a10) {
        new WeakMap();
        const v14 = [];
        function F15() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = v14;
            } catch(e17) {
            }
        }
        Math.acos(a9);
        Math.sin(a9);
        a9--;
        const v22 = a9 + a9;
        Math.cos(v22);
        return v22;
    }
    #d;
}
new C6();
new C6();
new C6();
function f27() {
    return v3;
}
function f31() {
    const o33 = {
        get c() {
            return this;
        },
    };
    function f34(a35, a36) {
        ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0]).groupToMap;
        return "o";
    }
    o33.set = f34;
    return o33;
}
const v39 = f31();
function f40() {
    return -528489361;
}
function f41(a42) {
    class C43 {
    }
}
Object.defineProperty(v39, "length", { enumerable: true, get: f40, set: f41 });
class C44 extends f31 {
}
const v45 = new C44();
v45.writable = 10000;
const v47 = new Int32Array(v39, v45);
function f48(a49, a50) {
    function F52(a54, a55, a56) {
        if (!new.target) { throw 'must be called with new'; }
        const v57 = this?.constructor;
        try { new v57(a55, a56, a55); } catch (e) {}
        a54 - a54;
        a56 * a56;
        try {
            this.f = a54;
        } catch(e61) {
        }
        try {
            class C62 {
            }
            const v63 = new a55();
            function f65(a66, a67, a68, a69) {
                const v70 = a67 >>> a67;
                const v71 = v70 >>> v70;
                v71 != v71;
                for (let v73 = 0; v73 < 5; v73++) {
                    try { new C62(v63, v73, Float32Array, ...v73, a67); } catch (e) {}
                }
                const v76 = Math.max(a67);
                v76 - v76;
                return v71;
            }
            for (let v78 = 0; v78 < 5; v78++) {
                f65(v78, v78);
            }
            %OptimizeFunctionOnNextCall(f65);
            this.c = -2n;
        } catch(e80) {
        }
    }
    return -2n;
}
v47.toString = f48;
function f82(a83, a84) {
    const o89 = {
        "c": -11,
        set g(a86) {
            try {
                super.o(this, a86);
            } catch(e88) {
            }
        },
        ...a84,
        "a": a84,
        __proto__: a84,
    };
    return o89;
}
Reflect.defineProperty(v39, v47, v45);
