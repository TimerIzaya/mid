const v3 = /(?<a>.)\k<a>/gvm;
v3.b = v3;
/t+/is;
/(ab|cde)\1cGa\b!?/gum;
257 >> 257;
-490770522 | -490770522;
for (let v11 = 0; v11 < 10; v11++) {
    const v12 = [601759695];
    const v13 = [1073741824,1073741823,1376142744,1073741825];
    try { v13["find"](..."find", undefined, ...v12, ...undefined); } catch (e) {}
}
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
}
const v25 = new Uint8Array(3521);
const v26 = [-256,13351,5138,2,-4294967295,1000,268435440];
class C27 {
    constructor(a29, a30) {
        const v31 = this?.constructor;
        try { new v31(a30, 10); } catch (e) {}
        for (const v33 in this) {
        }
        function f35() {
            return 7;
        }
        new Int32Array();
        -4294967297 / -4294967297;
        Math.atan2(v26, -4294967297);
    }
}
[v26];
new Uint32Array(186);
let v45 = 8;
v45++;
const v47 = new C27();
const v48 = v47?.constructor;
try { new v48(-2147483647, v47); } catch (e) {}
const v50 = /(\1a)/gums;
const v51 = /V(?:a{5,1000000}){3,1000000}/vims;
const v52 = /(?<a>.)\k<a>?/vdimsy;
try { v52(v50, v51, v51, v50); } catch (e) {}
const v54 = [v26,v51,v52,v26,v26];
const v57 = new BigInt64Array(8);
try { Int32Array.bind(v26); } catch (e) {}
function f62() {
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v65 = 1000000000000.0;
    const v66 = v65--;
    -v66;
    -v54 && v54;
    class C73 {
        static #m(a75) {
        }
        constructor(a77) {
            const v79 = new Float32Array();
            let v80;
            try { v80 = v79.entries(); } catch (e) {}
            v80.next();
            const v82 = new Uint16Array(12, -4294967296, v66);
            new Float32Array(v82);
        }
    }
    new C73();
    new C73();
    Symbol.iterator;
    try { v57.reduce(Int32Array, 12); } catch (e) {}
    let v89 = 0;
    v89++;
    const v91 = new C73();
    new C73();
    const v93 = new C73(-4294967296);
    [];
    [257828.6336153492,v93,v91,v93];
    const v96 = [];
    v96[0];
    class C98 extends C73 {
    }
    new C98();
    const v100 = v96.constructor;
    try { v100.isArray(v96); } catch (e) {}
    class C102 extends v100 {
    }
    C102.a = C102;
    const v103 = new C102();
    const v104 = v103.constructor;
    try { v104.bind(); } catch (e) {}
    const o106 = {
        "e": v96,
        __proto__: v26,
        [v54]: v25,
        "h": 257828.6336153492,
    };
    try { o106.e(BigUint64Array); } catch (e) {}
    return Int32Array;
}
class C108 extends C27 {
    constructor(a110, a111) {
        const v112 = a110?.constructor;
        let v113;
        try { v113 = this.toLocaleString(this, v112, C27); } catch (e) {}
        v113.charCodeAt(v50);
        this[-256] >>>= 16;
        for (let v115 = 0; v115 < 25; v115++) {
            const t103 = 186;
            new t103();
            for (let v118 = 0; v118 < 10; v118++) {
                const v119 = [601759695];
                const v120 = [1073741824,1073741823,1376142744,1073741825];
                try { v120["find"](..."find", undefined, ...v119, ...undefined); } catch (e) {}
            }
            const v124 = new Map(a110);
            const v126 = "p" + 16;
            const v127 = new Map(v124);
            function f128(a129, a130) {
                const o131 = {
                    [v127]: Map,
                };
                return o131;
            }
            f128(v112, this);
            v124[v126] = 16;
        }
    }
}
try { C108.call(-2147483647); } catch (e) {}
new C108();
const v137 = new Set();
v137["delete"](839612.5677247904);
