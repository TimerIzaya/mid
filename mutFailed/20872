function f0() {
    const o8 = {
        "b": -13,
        "d": -13,
        "e": -13,
        ["c"](a5) {
            try {
                super.valueOf("c", -13);
            } catch(e7) {
            }
            return -13;
        },
        "a": -13,
        2: "c",
        [-2]: -13,
        ["c"]: "c",
        "h": -13,
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
function f11() {
    const o12 = {
    };
    try {
        o12.f = v10;
    } catch(e13) {
    }
    try {
        const o14 = {
        };
        o14.f = v10;
        o14.c = f0;
    } catch(e15) {
    }
    try {
        const o16 = {
        };
        o16.f = v10;
        o16.c = f0;
        o16.d = v9;
    } catch(e17) {
    }
    try {
        const o18 = {
        };
        o18.f = v10;
        o18.c = f0;
        o18.g = v10;
    } catch(e19) {
    }
    return o12;
}
v10[Symbol.toPrimitive] = f11;
f0();
function f26(a27, a28) {
    const o38 = {
        [v10]: -65536,
        m(a30, a31, a32) {
            try {
                super.find(1073741823, a32, this, a28);
            } catch(e34) {
            }
            [8.238616691188689,508596.98935946473,-9.069921774584272e+307,-554762.6071225422,-2.154529952443349,NaN,737.3123876755822,1.887766574959965,-Infinity,421.33004833332893];
            [-2.0,-1.0];
            return [1000000.0,6.822088727470852,-1.7976931348623157e+308,3.0,-1.4052901903183913e+308];
        },
        "e": a27,
        "d": a28,
        [-2]: f0,
        "c": a28,
    };
    return o38;
}
const v39 = f26(-65536, 64);
f26(-65536, -65536);
const v41 = f26(1073741823, 64);
class C45 extends f26 {
    valueOf(a47, a48, a49) {
        const v50 = v10 || v41;
        try {
            v50.fuck(f0, -3, 47984, undefined);
        } catch(e55) {
        }
        return -2.220446049250313e-16;
    }
    #g = v10;
    static 4096 = f0;
    #c = -2.220446049250313e-16;
    #f = 5.0;
}
new C45();
new C45();
new C45();
new Uint8Array();
function f61(a62, a63, a64, a65) {
    a62.length = a62;
    a64?.findLast;
    const o67 = {
    };
    o67.c = o67;
    const o71 = {
        n(a69, a70) {
            return v39;
        },
    };
    o71.n(a65, o71);
    return Uint8Array;
}
for (let v73 = 0; v73 < 625; v73++) {
    f61(f61, v73);
}
