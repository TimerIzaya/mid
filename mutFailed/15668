Math.log1p(0.04879611221991542);
function f4() {
}
f4.d = f4;
0.07336291115558757 + 0.07336291115558757;
~995;
const v11 = new Uint8ClampedArray(995);
new Int8Array(v11);
new Float32Array(4096);
1 | 1;
("-536870912").normalize;
const v21 = [];
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    [v21,[this,this,this,this],this,arguments];
}
new Float32Array(1);
const v33 = new Int16Array(256);
v33.BYTES_PER_ELEMENT;
function f35() {
    return -1000.0;
}
1392 + 1392;
new Int8Array(1392);
for (let v40 = 0; v40 < 5; v40++) {
    v40 + v40;
    function f42() {
        try { ("Vre").trimStart(); } catch (e) {}
        let v45 = ("Vre").codePointAt(v40);
        v45 + v45;
        const v48 = v45 * v45--;
        v48 / v48;
        return f42;
    }
    f42.arguments = f42;
    f42();
    %OptimizeFunctionOnNextCall(f42);
}
let v52 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
let v53 = Uint8ClampedArray;
const v54 = new v53(v52, Uint16Array, v53);
let v56 = "g";
({"d":v56,"length":v53,...v52} = "unscopables");
Uint32Array[1] = f35;
new Uint32Array(Uint32Array);
new Int8Array();
const v62 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
class C63 {
    #p(a65, a66, a67, a68) {
    }
    constructor(a70, a71) {
        const v72 = this.constructor;
        v72.length = v72;
        try { new v72(); } catch (e) {}
        try {
            v62.#p();
        } catch(e75) {
        }
    }
}
new C63(Uint16Array, v62);
const o77 = {
};
o77.setPrototypeOf = o77;
const v79 = new Proxy(v54, o77);
v79.__proto__;
