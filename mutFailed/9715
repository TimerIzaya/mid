/a{0}/ud;
const v1 = /HZ\P{sc=Greek}a(?=b)*/vdimy;
/((\1a))/i;
new Set();
[1e-15,-4.0,1000000.0,288.2072802940347,-1e-15,-Infinity,1.630320114331949e+308];
const v9 = [2.0,-5.0,1000.0,1000000000000.0,Infinity,-3.0];
[323220.2137426117,0.19604034984240604,0.9524336407181871,557.4808104957854,-1.0,0.2779520759825852,-4.0,NaN];
const v14 = /\118/;
const v15 = /Az/gdmsy;
try {
    const v20 = gc(256);
    const v22 = /((?<=a))/gudm;
    v22.b = v22;
    const v23 = /gk4b*/vmsy;
    let v25;
    try {
    const t0 = -1.3832922122240728e+307;
    v25 = t0(2);
    } catch (e) {}
    for (let v26 = 0; v26 < 5; v26++) {
        const v27 = v26++;
        Object.defineProperty(v23, -9223372036854775808, { enumerable: true, set: gc });
        v15["test"](v27);
        const v34 = v26 < 1;
        try { v25(v22, v26, v23, v26, 256); } catch (e) {}
        const v37 = Symbol.iterator;
        const o41 = {
            [v37]() {
                const o40 = {
                    next() {
                        return v23;
                    },
                };
            },
            "g": v20,
            ..."268435441",
            "e": v34,
            "c": 1,
            "d": 268435456n,
        };
    }
    new Map("268435441");
} catch(e43) {
}
/(?:a?)*5N\x0f/vsy;
class C45 {
}
const v49 = new Int8Array(8);
try { Reflect.set(v14, v15, v14); } catch (e) {}
const v53 = Reflect.construct(Uint16Array, [v49]);
v53[2] = v53;
class C57 {
    get a() {
        const o59 = {
        };
    }
}
class C60 {
    static {
    }
}
for (const v63 in "1487412280") {
}
/v/gu;
/na\bc/vis;
new Uint16Array(/I+/gvdimy);
("1487412280")["concat"](...v9, Set, ..."concat", v1, ..."concat");
