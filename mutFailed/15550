16n ^ 16n;
let v8 = 10646n;
v8--;
329329729 - 329329729;
-12;
const v16 = [12,16n,12,-9007199254740992n,12];
[12,7.183506719232078,v16,v16];
[-1e-15,v16,3078,7.183506719232078,v16];
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
1000000.0 % 1000000.0;
536870887 % 536870887;
const v29 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
try { v29.lastIndexOf(v8); } catch (e) {}
-37370 & -37370;
new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v41 = new Uint8Array();
gc();
const v45 = 110 <= 110;
v45 && v45;
let v47 = 110 + 110;
v47++;
let v50;
try { v50 = new Int8Array(); } catch (e) {}
const v51 = v50?.toString;
try { new v51(); } catch (e) {}
Int8Array.prototype = Int8Array;
new Int8Array();
const v55 = new v51();
const v56 = v55.getUTCDay();
v56 >>> v56;
let v58 = 127;
v58 >> -8516;
v58++;
function f61(a62, a63) {
    a63.length = a63;
    try { a62(f61); } catch (e) {}
    try { a62(BigInt64Array); } catch (e) {}
    a63.constructor(a63);
    return f61;
}
try { Promise.resolve(1354389810); } catch (e) {}
try { new Promise(4096); } catch (e) {}
const v70 = new Promise(f61, Uint8Array);
try { v70.then(v16, 16n); } catch (e) {}
let v72;
try { v72 = v70.then(); } catch (e) {}
let v73;
try { v73 = v72.then(v29, v41); } catch (e) {}
try { v73.finally(-1.5264047652530307e+308); } catch (e) {}
Uint8Array.length = Uint8Array;
const v76 = new Uint8Array(v58);
try { v76.reduce(v50); } catch (e) {}
function f78(a79, a80) {
    const o81 = {
    };
    o81.a = o81;
    o81.g = o81;
    return o81;
}
let v82;
try { v82 = f78(v70, v70); } catch (e) {}
v82.g = v82;
v82.g;
f78.arguments = f78;
for (let v84 = 0; v84 < 25; v84++) {
    v84 - v84;
    const v86 = f78();
    v86.g = v86;
    v86.d = v86;
    Object.defineProperty(v86, v84, { enumerable: true, get: f78, set: f78 });
    Uint16Array.prototype = Uint16Array;
    8 - 8;
    const v91 = new Int8Array(8);
    try { Reflect.construct(v91, v84); } catch (e) {}
    try { Reflect.preventExtensions(v86); } catch (e) {}
    const v95 = [v91];
    v95.b = v95;
    Reflect.construct(Uint16Array, v95);
    v76[v86] = v86;
    gc.name = gc;
    const v99 = ("sync")?.italics;
    try { new v99(); } catch (e) {}
    !("sync" == "sync");
    const o103 = {
        "execution": "sync",
    };
    gc(o103);
}
