function f3() {
    return -61723;
}
class C4 {
    n(a6) {
        this[this] = f3;
        try {
            f3();
        } catch(e8) {
        }
        super[a6] = -61723;
        return f3;
    }
    static #b;
    static #d = -61723;
    static [2147483648];
    [2147483648];
    9 = 2147483648;
}
C4[2147483648] = C4;
const v9 = new C4();
v9[9] = v9;
const v10 = new C4();
const v11 = new C4();
function f12() {
    return -25341;
}
const v14 = [v9,-61723];
const v16 = [[v14,v14,-61723],C4,f12,v10];
v16[3] = v16;
const v21 = new Float32Array(Float32Array);
Symbol.split;
v21[Symbol.toPrimitive] = f12;
function f25(a26, a27, a28, a29) {
    Object.defineProperty(a26, "toString", { configurable: true, value: f3 });
    let v30 = a26[1];
    v30++;
    let v32 = a27--;
    v32--;
    a26[0] = a26;
    a27 <= a27;
    arguments[1] = arguments;
    const v36 = arguments?.__lookupGetter__;
    v36.name = v36;
    let v37;
    try { v37 = v36.constructor(); } catch (e) {}
    const v38 = v37?.constructor;
    try { new v38(v11); } catch (e) {}
    let v40;
    try { v40 = v36(v36, f25, a27, arguments); } catch (e) {}
    return v40;
}
for (let v41 = 0; v41 < 10; v41++) {
    f25(v21);
}
try { ("string").link(true); } catch (e) {}
class C48 {
    static 7;
    static [-1] = "string";
    #n(a50) {
        a50 = this;
        a50.e >>>= -35417;
        const o54 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o54);
        return this;
    }
}
const v56 = new C48();
try { v56.isPrototypeOf(v11); } catch (e) {}
-4096 / -4096;
Array();
const v63 = Array();
9.187362692894364 !== 9.187362692894364;
class C66 {
    static 9 = 9.187362692894364;
}
for (const v67 in C66) {
    v67[0];
}
class C69 {
    #e;
    static {
        try { new this(); } catch (e) {}
        Symbol.replace;
        this[Symbol.toPrimitive] = f12;
        function f75(a76, a77) {
            return a76;
        }
        const o84 = {
            o(a79) {
                try { this.o(this); } catch (e) {}
                const o82 = {
                };
                o82.b = o82;
                Object.defineProperty(o82, "execution", { writable: true, value: v16 });
                return gc(o82);
            },
        };
        const o86 = {
        };
        const v88 = new Proxy(Uint32Array, o86);
        const t104 = "o";
        t104[0] = "o";
        o84["o"](o84, Uint32Array, "o", "o", v88);
        const v91 = super[this];
        try { v91.join(-4096, -4096, v91); } catch (e) {}
        const o93 = {
        };
        const v94 = /LD/vds;
        1000.0 >>> 1000.0;
        [v94,1000.0];
    }
    static f;
    m(a99, a100) {
        const o101 = {
        };
        const o104 = {
        };
        const v106 = new Proxy(Uint8Array, o104);
        v106.d = v106;
        new Proxy(this, o101);
        for (let v108 = 0; v108 < 5; v108++) {
        }
        const v109 = f12.constructor;
        v109.d = v109;
        let v110;
        try { v110 = new v109(); } catch (e) {}
        try { v110.bind(v110); } catch (e) {}
        v110.e = v110;
        const v115 = new Set();
        v115.add;
        [Reflect,[0.3012804967226079,85204.01188321039,653.7200248137515,0.7021499874307531,803753.7144966745,852811.0132933464,-9.957521439166277e+307,-2.2210475327078026e+307]];
        class C122 {
        }
        function f123() {
            let v124 = 1000000000000.0;
            v124--;
            class C127 {
            }
            new C127();
            const v129 = new C127();
            [C122,C127];
            [257828.6336153492,v129];
            [v129];
            class C133 extends C48 {
            }
            function f134(a135, a136) {
                return -4096;
            }
            Set.toString = f134;
            Set.constructor(Set);
            v63.constructor;
        }
        const v140 = "string" && -4096;
        +a100;
        Math.sqrt(v140);
        a99--;
        -509886178 << -509886178;
        return this;
    }
}
new C48();
const v147 = 2 >= 2;
v147 && v147;
function f149() {
    const v152 = [8n,8n,8n,8n] > 8n;
    let v153 = 0;
    for (let v154 = 0; v154 < 5; v154++) {
        Array(36862);
    }
    while (v153 < 10) {
        for (let v160 = 0; v160 < 5; v160++) {
            "n" + v160;
        }
        v153++;
    }
    return v152;
}
%OptimizeFunctionOnNextCall(f149);
new C69();
new C69();
try { new WeakSet(); } catch (e) {}
const v173 = new WeakSet();
try { v173.add(v173); } catch (e) {}
function F175(a177, a178, a179, a180) {
    if (!new.target) { throw 'must be called with new'; }
    function F181(a183, a184) {
        if (!new.target) { throw 'must be called with new'; }
        function f185() {
            const v186 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
            v186.length >>>= -65536;
            return v186;
        }
        f185();
        try {
            new F181(a178, a183);
        } catch(e190) {
        }
    }
    new F181();
}
F175.arguments = F175;
const v192 = v173.constructor;
v192.e = v192;
class C193 extends v192 {
}
try { C193.call(v173); } catch (e) {}
try { ("symbol").trimEnd(); } catch (e) {}
const v200 = ("undefined").localeCompare("undefined", "symbol", "undefined");
v200 >> v200;
v200.constructor;
const v204 = [1073741824,1073741823,1376142744,1073741825];
function f205(a206, a207, a208, a209) {
    try { a207.apply(WeakSet, WeakSet); } catch (e) {}
    try { a208(a209, 65537n, -1.0, -1.0); } catch (e) {}
    for (let v212 = 0; v212 < 500; v212++) {
    }
    ~v204.push(a208);
    const o217 = {
    };
    o217.c = o217;
}
f205(undefined, f205, f205, v204);
const v219 = new Uint16Array(512);
class C221 {
}
function F222(a224, a225) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(v219);
