new Float64Array(2312);
const v8 = new Float64Array(256);
128 > 128;
const v12 = new Uint8Array(128);
v12[63];
const v19 = new Int8Array(8);
const v20 = v19?.with;
try { new v20(8, 8); } catch (e) {}
const v24 = new Float32Array(3);
v24[2] = v24;
const v27 = new BigInt64Array();
const o28 = {
    __proto__: v27,
};
try { o28.fill(o28, BigInt64Array); } catch (e) {}
new Float32Array(0);
class C32 {
    constructor(a34) {
        for (let v35 = 0; v35 < 32; v35++) {
            const v36 = v35 === v35;
            for (let v37 = 0; v37 < 50; v37++) {
                v37 | v37;
            }
            const v41 = new Int8Array(520);
            v41[290] = v41;
            for (let v42 = 0; v42 < 5; v42++) {
            }
            try { Math.cos(v36); } catch (e) {}
            0 >> 0;
            0 || Int8Array;
            Math.tanh();
            for (let v49 = 0; v49 < 5; v49++) {
                function f50() {
                    for (let v51 = 0; v51 < 5; v51++) {
                        function f52() {
                            try { Math.expm1(Math); } catch (e) {}
                            [Math.atanh(v51)];
                            return Math;
                        }
                        f52();
                        %OptimizeFunctionOnNextCall(f52);
                    }
                    128 | 128;
                    const o60 = {
                    };
                    const t45 = o60.constructor;
                    return t45(128);
                }
                const v63 = f50?.constructor;
                try { new v63(v8); } catch (e) {}
                const v65 = f50();
                try { v65.toExponential(f50); } catch (e) {}
                f50();
                %OptimizeFunctionOnNextCall(f50);
            }
            function f68() {
                return this;
            }
            f68.length = f68;
        }
    }
}
C32.g = C32;
const o69 = {
};
o69.f = o69;
Float32Array & Float32Array;
const v71 = new C32();
v71.length = v71;
