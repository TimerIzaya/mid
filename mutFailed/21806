function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 4294967295;
    } catch(e3) {
    }
    try {
        this.c = 4294967295;
    } catch(e4) {
    }
    try {
        this.e = 4294967295;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
let v10 = "object";
function f12(a13, a14, a15, a16) {
    try { a14.localeCompare(a14); } catch (e) {}
    try { a16.charAt(a13); } catch (e) {}
    const o32 = {
        "e": a13,
        "g": F0,
        "d": a15,
        [F0]: v8,
        ...v8,
        "b": a14,
        get h() {
            super.h;
            v10 = a14;
            const v22 = Symbol.iterator;
            const o31 = {
                [v22]() {
                    let v24 = 10;
                    const o30 = {
                        next() {
                            v24--;
                            const v28 = v24 == 0;
                            const o29 = {
                                "done": v28,
                                "value": v24,
                            };
                            return o29;
                        },
                    };
                    return o30;
                },
            };
            return a15;
        },
    };
    o32.h;
    return o32;
}
f12(v7, "d", v8, "d");
const v35 = f12(v10, v10, v6, "d");
f12(f12, "d", v8, "getOwnPropertySymbols");
const t56 = "undefined";
t56[1] = "undefined";
("getFloat32")[3];
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a44(); } catch (e) {}
    function f46(a47, a48, a49, a50) {
        try { a48.toString(); } catch (e) {}
        const v52 = /(?:a*)+q(?<a>.)/guds;
        for (let [i56, i57] = (() => {
                let v54 = 10;
                v54++;
                return [0, v54];
            })();
            i56 < i57;
            -(i57--)) {
            i56 - i56;
            const v66 = v52.compile(a48);
            v66.multiline = v66;
        }
        return F41;
    }
    for (let v67 = 0; v67 < 5; v67++) {
        f46(a43, f46, v67, a43);
    }
    %OptimizeFunctionOnNextCall(f46);
}
F41.arguments = F41;
const v69 = new F41(F41, F41);
const v70 = v69?.constructor;
try { new v70("getOwnPropertySymbols", v35); } catch (e) {}
