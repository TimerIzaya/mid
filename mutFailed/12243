function f5(a6) {
    ([20785,4096,5])[536870889];
    return "delete";
}
Uint32Array.toString = f5;
const v9 = new Uint32Array(1);
const v12 = new Uint32Array(129);
try { Uint32Array("1472951225", 29, 29); } catch (e) {}
-"delete";
const t8 = "1472951225";
t8.length &= 1;
try {
    new Uint32Array(-2147483649);
} catch(e18) {
}
const v20 = new Uint8Array(29);
class C22 extends Map {
}
const v23 = new C22();
const v24 = new C22();
const v25 = new C22();
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f30(a31) {
    ("aZ4O").normalize();
    return a31;
}
v29.toString = f30;
function f35(a36, a37) {
    try {
        v29.toString = f30;
    } catch(e38) {
    }
    return a37;
}
Uint32Array[Symbol.toPrimitive] = f35;
const v41 = new Uint32Array(5);
Object.defineProperty(v41, "constructor", { writable: true, configurable: true, value: f5 });
let v42 = -4294967297n;
v42--;
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
function f47(a48, a49, a50, a51) {
    try { a48.toLocaleString(); } catch (e) {}
    const v53 = a48?.constructor;
    v53.toString = Symbol;
    let v54;
    try { v54 = v53(); } catch (e) {}
    try { v53(); } catch (e) {}
    const v57 = arguments.length;
    Object.defineProperty(v23, "e", { configurable: true, enumerable: true, value: f47 });
    const v59 = v24["entries"](a50, ...v25, BigUint64Array, ..."entries", a49, v57);
    const v61 = Symbol.toStringTag;
    v24[v61] = v61;
    function f62() {
        let v64;
        try { v64 = ("Vre").charAt(4096); } catch (e) {}
        try { v64.lastIndexOf(f62); } catch (e) {}
        let v66;
        try { v66 = ("Vre").codePointAt(v29); } catch (e) {}
        v66 - v66;
        v66 ^ v66;
        let v69 = Float64Array;
        v69 = a49;
        let v70 = v29.length;
        v70++;
        try {
            v45.forEach(a49);
        } catch(e73) {
            e73.stack = e73;
        }
        const o84 = {
            "c": v42,
            "c": v44,
            valueOf(a75, a76) {
                return a76;
            },
            1073741824: v41,
            [v42](a78, a79, a80, a81) {
                eval(v54);
            },
            "arguments": 5,
            256: a51,
        };
        o84[256];
    }
    function f86() {
        return v9;
    }
    f62();
    const v92 = Array();
    let v93;
    try { v93 = v92.findLast(f47, v41); } catch (e) {}
    v92.unshift("entries", v59, "entries", v93);
    let v96;
    try { v96 = Int8Array.of(); } catch (e) {}
    try { v96.join(v53); } catch (e) {}
    const v98 = new Int8Array(v44);
    v98.c = f62;
    v98.c = v98;
    const v99 = v98.buffer;
    v99.maxByteLength;
    const v101 = v99.slice(v53);
    try { Int32Array(v101, arguments, v42); } catch (e) {}
    function f104(a105, a106, a107, a108) {
        return v23;
    }
    const v109 = new Int32Array();
    const v110 = v109[3];
    v110 + v110;
    for (let v112 = 0; v112 < 5; v112++) {
    }
    %OptimizeFunctionOnNextCall(f62);
    try { v45["find"](..."find", a51, ...v44, ...v45, ...522675525n); } catch (e) {}
    return v53;
}
let v115 = f47(29, v9, 129, v20);
[-1e-15,2.220446049250313e-16,2.220446049250313e-16,-2.0];
[-0.0,-1.7976931348623157e+308,5.0];
v115 = [5.0,-2.0,-808466.5211953028,1000.0,1e-15,6.951921457136926e+307,-1.0,-2.472906394838537,-Infinity,6.055164280419692];
function f119(a120, a121) {
    Object.defineProperty(v12, "h", { value: v24 });
}
new Promise(f119);
for (let v124 = 0; v124 < 10; v124++) {
    f47(v41);
}
%OptimizeFunctionOnNextCall(f47);
f47();
