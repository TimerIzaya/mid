const v0 = [0.8540960164271124,0.914677113803527];
const v1 = [457175.41484456556,9.105440800897647];
const v2 = [-0.0,0.0,-1000.0,-2.0];
128n === 128n;
let v5 = -128n;
v5++;
268435440n == 268435440n;
const v9 = [268435440n,v2,v2,268435440n,v0];
try { v9.map(v0); } catch (e) {}
const v11 = [v0,v9,v5,v9];
try { v11.map(v2); } catch (e) {}
[v11,v1,v1,v11];
const v14 = [1073741823,536870889,9007199254740990,37123];
const v15 = [4294967296,9007199254740990,10];
const v16 = [11,-16458,53993,-4294967295,-7,603488816,946379197,787996890,-536870912,15127];
let v17;
try { v17 = v16.entries(); } catch (e) {}
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    function f20(a21, a22) {
        delete v15[536870889];
        function f24(a25, a26, a27, a28) {
            Math.round();
            return Math;
        }
        return this;
    }
    this[Symbol.toPrimitive] = f20;
    try {
        this.a = 4;
    } catch(e34) {
    }
    try {
        this.f = 4;
    } catch(e35) {
    }
    try {
        this.g = 4;
    } catch(e36) {
    }
}
const v37 = new F18();
function f38() {
    const v39 = v9.length;
    v39 >>> v39;
    return v14[v39];
}
try { new Symbol(); } catch (e) {}
v37[Symbol.toPrimitive] = f38;
new F18();
const v46 = new F18();
class C47 {
    set a(a49) {
        class C50 {
            static 128 = v37;
            #b;
            constructor(a52, a53, a54, a55) {
                v17 * v0;
            }
            static [C47] = a49;
            static [this];
        }
        new C50();
        new C50();
        new C50();
    }
    static o(a61) {
        a61 % this;
        return super.d;
    }
}
C47.name = C47;
new C47();
new C47();
new C47();
[-607177.2196757733,9.867882161988646,-0.0,3.0,-676012.8801316076,1e-15,1000000000000.0];
const v68 = [3.0,633532.0914372578,0.8220211022589221,-Infinity,Infinity];
try { v68.entries(); } catch (e) {}
const v70 = [-2.2250738585072014e-308];
const v71 = v70?.every;
let v72;
try { v72 = new v71(v46); } catch (e) {}
const v75 = new Float32Array(59);
new Int32Array(10);
new Int32Array(128);
[1.7976931348623157e+308,1.1709134723669872e+308,-0.0,1.0,3.0,-5.0,367.2989632960466,661.7758659107592];
const v82 = [-288943.075893088,-5.305261585320875,193686.0922863416,8.005740932944335,2.220446049250313e-16,-833.0196519212178,0.7064019879043599,-1000000000000.0];
v82.undefined = v70;
for (const v83 in v75) {
    try { v83.localeCompare(v83); } catch (e) {}
}
let v85;
try { v85 = Symbol.for(v72); } catch (e) {}
v15["reverse"]();
v85 &= v46;
const v89 = v82[v37];
try { v89(v82, Float32Array, F18, v70); } catch (e) {}
