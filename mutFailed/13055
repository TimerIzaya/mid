const v0 = [0.7857870750956569,0.4004426477105858,0.03529212334661591,-280.5617388046662];
const v1 = [0.1584336038282772];
const v2 = [6.212030946472151,-2.2250738585072014e-308,1.7976931348623157e+308,3.0];
const v4 = new Set();
class C5 extends Set {
    f;
    4 = v2;
    static #toString(a7) {
        new Date();
        a7.length -= v1;
        this[39] &= a7;
        return v4;
    }
    constructor(a11, a12) {
        super(a11);
        +v2;
        ArrayBuffer.a = ArrayBuffer;
        const o16 = {
            "maxByteLength": 268435441,
        };
        2 * 2;
        const v19 = new ArrayBuffer(a11, o16);
        const v21 = new Int16Array(v19);
        try { v21.reduce(a11); } catch (e) {}
    }
}
const v23 = new C5(C5, v0);
new C5(v0, v0);
const v25 = new C5(v2, v1);
const v26 = [v25];
[v25,v26,v26,v23];
const v28 = [v25,v2];
try { v28.entries(); } catch (e) {}
490961831 | 490961831;
-1000000.0 >>> -1000000.0;
const t33 = ([Infinity,4.380337649859771e+307])["fill"]("undefined", "undefined", "fill");
t33[1] = v4;
class C40 {
}
const v41 = new C40();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
4 >> 4;
const v47 = -1000000.0 & v41;
Math.pow(4, v47);
v47 ** 4;
