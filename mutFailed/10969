const v2 = new BigInt64Array(257);
function f3() {
    class C4 {
    }
    return C4;
}
v2.toString = f3;
const v7 = new Int16Array(4096);
const v10 = new Int8Array(1388);
class C11 extends Int16Array {
    get f() {
        v10[Symbol.toPrimitive];
        return v7;
    }
    [v2] = BigInt64Array;
    p(a17, a18, a19) {
        v7[1388] = this;
        let v20;
        try { v20 = v2.entries(); } catch (e) {}
        try { v20(v2, a18); } catch (e) {}
        try {
            new Int16Array(1388, 1202942434);
        } catch(e24) {
        }
        return v10;
    }
}
new C11();
new Date();
Array(36862);
new C11();
new C11();
class C39 {
}
const v40 = new C39();
const v41 = new C39();
const v42 = new C39();
[v41,v40,[-1.0,v42,-48725,2119294231],C39];
[-2.2250738585072014e-308,-48725,-2.2250738585072014e-308,-5.0];
new Int8Array();
new Float32Array(1000);
new Uint8Array(58);
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v59 = Array(19793);
        for (const v60 of v59) {
        }
        const v61 = [v59];
        new BigUint64Array();
        const v65 = [];
        v65[65536] = 19793;
        function F66() {
            if (!new.target) { throw 'must be called with new'; }
            class C68 {
            }
            for (let i71 = 0, i72 = 10;
                i71++, i71 < i72;
                (() => {
                    const v77 = [601759695];
                    const v78 = [1073741824,1073741823,1376142744,1073741825];
                    function f79(a80, a81, a82, a83) {
                        function f84() {
                            return a80;
                        }
                        function f85(a86, a87) {
                            return a86;
                        }
                        try { f85(); } catch (e) {}
                        f85(v78, C68);
                        try { v78["find"](..."find", a83, ...v77, ...v78); } catch (e) {}
                        return C68;
                    }
                    for (let v92 = 0; v92 < 10; v92++) {
                        f79(v92, f79, i71, v92);
                    }
                })()) {
            }
        }
        new F66();
        new F66();
        v65[65536] = v61;
        for (let v98 = 0; v98 < 50; v98++) {
        }
        v65[65536] %= 256;
        [v61,v61,v61];
        const v100 = [];
        Uint16Array.toString = Date;
        Uint16Array.valueOf = Array;
        class C103 {
            static [376363416];
            static {
                super.b = this;
                let {...v105} = this;
            }
        }
        (~0).constructor;
        let v109 = -9223372036854775808n;
        v109 %= 45725n;
        let v111 = 536870912n;
        v111--;
        [-9223372036854775807,45087,-268435456];
        [509174734,-30078599,-1953700757,-725509519,50139,1073741825];
        [15,55234,268435441,0,9007199254740992,129];
        /\p{Script=Greek}/ds;
        /.\P{Decimal_Number}/gvds;
        /xyz{1,32}?a\nb\bc/ums;
        class C119 {
        }
        const v120 = C119.__defineSetter__;
        function F121() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v123 = new F121();
        const v125 = new Date();
        try { Reflect.set(v125, v123); } catch (e) {}
        try { v120(); } catch (e) {}
        v100 >= Uint16Array;
    } catch(e130) {
    }
}
new F55();
new F55();
