const v5 = new Uint16Array(4096);
v5.p7 = -10;
let v6;
try { v6 = v5.fill(-10); } catch (e) {}
const v8 = 2361 - 2361;
for (let v9 = 0; v9 < 32; v9++) {
    v6["p" + v9] = v9;
}
v8 >> v8;
const v14 = v6 in v5;
2361 <= v14;
new Uint32Array(2361);
10 | 10;
new Int16Array(10);
let v25;
try { v25 = ("b").strike(); } catch (e) {}
try { v25.fontsize(Uint16Array); } catch (e) {}
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    try { new v31(this, -10); } catch (e) {}
    this.b = "b";
    this.d = a30;
}
const v33 = new F27();
function f34() {
    return v14;
}
function f35(a36) {
    function F37(a39, a40, a41) {
        if (!new.target) { throw 'must be called with new'; }
        a39[4294967295] = a39;
    }
}
Object.defineProperty(v33, "length", { writable: true, enumerable: true, get: f34, set: f35 });
v33.length = v33;
v33.d = v33;
const v42 = new F27(v33, v33);
v42.b = v42;
const o43 = {
    ...v42,
    __proto__: v33,
};
const v44 = o43.b;
function f45() {
    return f34;
}
function f46(a47) {
    for (let v48 = 0; v48 < 5; v48++) {
        Math.atanh(v48);
    }
}
Object.defineProperty(v44, "toString", { get: f45, set: f46 });
v44 >> v44;
for (const v52 in o43) {
}
