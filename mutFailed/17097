const v2 = new BigInt64Array(257);
const v5 = new Int16Array(1123);
const v8 = new Uint32Array(6);
class C9 extends Int16Array {
    static a;
    #valueOf(a11, a12, a13, a14) {
        function f15(a16, a17, a18, a19) {
            return a12;
        }
        f15(v2, 6, BigInt64Array, 1123);
        let v24;
        try { v24 = this.includes(...this, Uint32Array, a11, a12, ...Uint32Array, ...v5); } catch (e) {}
        const v25 = v24?.[1];
        let v26;
        try { v26 = new v25(v5, a13, v25); } catch (e) {}
        [...this,a14];
        try { v2.some(v26, h); } catch (e) {}
        return v5;
    }
    13 = 6;
    [v8] = Int16Array;
    static 580;
    #e;
}
const v31 = new C9();
const v32 = new C9();
new C9();
function f34() {
    return v2;
}
new Uint8ClampedArray(2314);
new Uint16Array(1);
new Uint8ClampedArray(2267);
v8 ^ v31;
new Int16Array(129);
const v50 = new Uint16Array(4);
const v53 = new Uint16Array(152);
class C55 {
    set h(a57) {
    }
    b;
    toString(a59, a60) {
        function F61(a63, a64, a65) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a63;
            } catch(e66) {
            }
            try {
                this.c = a59;
            } catch(e67) {
            }
            try {
                this.a = v32;
            } catch(e68) {
            }
        }
        new F61(this, v50, v5);
        new F61(F61, v50, v5);
        new F61(this, v53, a59);
        return v31;
    }
}
new C55();
let v73 = undefined;
try { C55(); } catch (e) {}
v73 = 3;
