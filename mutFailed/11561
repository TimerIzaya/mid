new Uint32Array(4);
Uint16Array.length;
const v6 = new Uint16Array(16);
v6[1];
let v9 = 3856 | 3856;
Object.defineProperty(Int16Array, 2, { configurable: true, enumerable: true, value: -53893n ^ -53893n });
Math.sinh(0);
const v17 = new BigUint64Array(3856);
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    function f23() {
        function f24(a25) {
            this[a25];
            v9++;
            return Int16Array;
        }
        return f24;
    }
    function f28(a29) {
        for (let v30 = 0; v30 < 100; v30++) {
            f23();
        }
    }
    Object.defineProperty(this, "toString", { writable: true, configurable: true, enumerable: true, get: f23, set: f28 });
    try { this.toString(); } catch (e) {}
    a21 ^ a21;
    try {
        this.h = 4;
    } catch(e34) {
    }
    try {
        this.d = a21;
    } catch(e35) {
    }
    try {
        this.c = a21;
    } catch(e36) {
    }
    const v39 = new Float64Array();
    ("p").lastIndexOf(v39);
    function f41() {
        gc();
        return Int8Array;
    }
}
new F18(3856, 16, 3856);
new F18(3856, 3856, 16);
const v47 = new F18(4, 3856, v17);
v47.h;
const v52 = [257,257,257,55852,2];
function f53(a54) {
    function f56(a57) {
        v52["entries"]();
    }
    this.onmessage = f56;
    return f56;
}
let v63 = new Int8Array(1024);
v63.toString = f53;
const v65 = v17.constructor;
try { new v65(); } catch (e) {}
([NaN,52.65298068517177,-4.0])["includes"](-6, -9223372036854775807);
new Int8Array(628786973);
v63 %= v63;
