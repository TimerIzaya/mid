[386.9769684155319,9.42568400418982e+307,2.2250738585072014e-308,-1000000000000.0,4.0,Infinity,-1.0682830891506434,-4.0];
const v1 = [-1000000000.0,-640.737431727155,1000000000.0,-4.5844547503452855,1000000000000.0,-5.0,7.771135962621415];
[9.771021886865977e+307,-1000.0,-0.0,1e-15,-1000000000.0,-9.789215425212083e+307,-6.917955409175622e+307];
/a{0,1}?(?:ab|cde)P1I?/vdis;
/a(?!b)(q)/gvdmsy;
/r(?:a{5,1000000}){3,1000000}?/vdis;
function f13() {
    function F14(a16, a17, a18) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v19 = new F14(F14, F14, F14);
    const o25 = {
        toString(a22, a23, a24) {
            Object.defineProperty(v19, a22, { writable: true, configurable: true, set: Array });
            return a22;
        },
    };
    try { o25.toString(o25, Array); } catch (e) {}
    return v1;
}
const v28 = Symbol.iterator;
Uint16Array[v28] = f13;
new Uint16Array(Uint16Array);
class C30 {
    constructor(a32) {
        this >> -1073741824;
        for (let v35 = 0; v35 < 32; v35++) {
            for (let v37 = 0; v37 < 5; v37++) {
            }
        }
    }
}
new C30();
new C30();
const v40 = new C30();
function f41(a42) {
    class C44 {
    }
    async function f45(a46, a47, a48, a49) {
        (await C44).call();
        return "source";
    }
    return v28;
}
v40.constructor = f41;
const t45 = v40.constructor;
new t45();
