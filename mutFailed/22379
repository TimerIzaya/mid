const v3 = [31131,31131,31131,-12];
const v4 = [-12,31131,281438498];
[v4,v4,v3,31131,281438498];
const v8 = new Uint8Array(256);
const v12 = new Int8Array(127);
const v14 = new v8();
for (const v15 in v12) {
    v14[v15] = 256;
}
new BigUint64Array(3);
new Int16Array(512);
const v23 = new Int32Array(129, 129, 129);
const v26 = new Int32Array(1);
const v27 = v26 instanceof BigInt64Array;
v27 || v27;
const v30 = new BigInt64Array();
const v31 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v32 = [-1.7976931348623157e+308];
function f33(a34, a35, a36, a37) {
    const o49 = {
        valueOf(a39, a40) {
            return -12;
        },
        ...v8,
        set h(a42) {
        },
        toString(a44, a45, a46) {
            try { this.toString(); } catch (e) {}
            [v23,v23,v23,v23,v23];
            a36[a35] = a34;
        },
    };
    return a36;
}
Symbol.toPrimitive.description;
const o55 = {
    "maxByteLength": 1073741824,
};
const v57 = new ArrayBuffer(Symbol, o55);
new Int8Array(v57);
const t40 = 31131;
const v60 = t40(v30, 129, v32);
const v61 = f33(v23, 129, v31);
for (let v62 = 0; v62 < 5; v62++) {
    v61 % v60;
}
