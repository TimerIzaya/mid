new BigUint64Array(1000);
const v5 = new Int16Array(201);
function f6(a7) {
    const v9 = new Int32Array();
    try { v9.forEach(v9); } catch (e) {}
    return v9;
}
v5[Symbol.toPrimitive] = f6;
const v15 = new BigUint64Array(201);
const v16 = [];
class C17 {
    static p() {
        try { this(this, this, this, v16, v16); } catch (e) {}
        let v20;
        try { v20 = v15(this); } catch (e) {}
        v20 = v20;
        const v21 = [-719491709,-4096,38613,-1,1024,65535,129];
        [65535,268435456,65537];
        [-1319674364,836468341,127,-46522,-4294967296,742091120,3621,16,-2,268435441];
        return v21;
    }
    static g = v16;
    1073741824 = v16;
}
new C17();
class C26 {
    static {
        function F28(a30, a31, a32, a33) {
            if (!new.target) { throw 'must be called with new'; }
        }
        let o34 = {
        };
        function f35(a36) {
            o34 = a36;
            return a36;
        }
        class C39 {
            toString(a41, a42, a43, a44) {
                const o53 = {
                    [-4294967297n](a47, a48, a49, a50) {
                        eval(a50);
                    },
                };
                eval();
            }
        }
        new Array(4);
        [1000000000.0,0.8616938602082478,1000000.0,NaN,Infinity,-9.621252203722717e+307,0.5158006786212987];
        [-134.63711965660673,3.0];
        [-Infinity,450936.70264396444];
    }
    [1000] = BigUint64Array;
    e = v15;
    static [v5] = BigUint64Array;
    static 10000;
}
try {
    const o65 = {
    };
    o65.a = C26;
    o65.__proto__ = 7;
} catch(e66) {
}
new C26();
new C26();
new C26();
class C71 {
}
Symbol.toPrimitive.description.codePointAt(C71);
const v78 = new Uint8Array(3745);
class C79 extends Int32Array {
}
const v80 = new C79();
v80.p2 = BigUint64Array;
let v81 = v78[64];
[,,...v81] = v78;
const v82 = new C26();
function F83(a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    ~a86;
    const v88 = this.__proto__;
    const v89 = v88?.constructor;
    try { new v89(v82); } catch (e) {}
    v88.toLocaleString();
}
for (let v92 = 0; v92 < 5; v92++) {
    v80["p" + v92] = v92;
}
