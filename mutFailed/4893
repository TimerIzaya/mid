let v2 = new Uint32Array(255);
const v5 = new Int32Array(10);
new Float64Array(255);
class C9 extends 255 {
    static get b() {
        const o13 = {
            "maxByteLength": 2559,
        };
        const v15 = new ArrayBuffer(2559, o13);
        new Uint8Array(v15);
        return v15;
    }
    constructor(a19, a20, a21) {
        super(v5, a20, 10);
        for (const v22 of this) {
            v2 <<= v2;
            v5[Symbol.asyncIterator];
        }
    }
    d;
    [Uint32Array] = Int32Array;
    static #h = 255;
    #f;
    static 512 = Uint32Array;
}
const v26 = new C9(10, 10, v2);
new C9(255, 10, v2);
new C9(v2, 255, 10);
class C29 extends Uint32Array {
    static [Float64Array] = v26;
    f;
}
const v30 = [];
function f31(a32) {
    const o36 = {
        ...v30,
        ...v30,
        "f": 255,
        set c(a34) {
            a32[this != a34] <<= C9;
        },
    };
    return o36;
}
f31();
new C29();
new C29();
const t47 = 255;
new t47();
class C42 {
}
const v43 = new C42();
([13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2]).copyWithin(8, -268435456, -256);
for (const v50 of `match${v43}-20124`) {
    class C52 extends Int8Array {
    }
    ([-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135]).fill();
}
