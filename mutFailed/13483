class C3 {
    constructor(a5, a6) {
        this[8] = this;
        a5[6];
        a6 | a6;
        try {
            this.__proto__ = C3;
        } catch(e9) {
        }
        this.__proto__ |= 1;
        -10488 - -10488;
    }
    8;
    /*
    constructor(a15) {
        super();
        for (let v16 = 0; v16 < 25; v16++) {
            this["p" + "p"] = v16;
        }
    }
    */
    f = 5.0;
    static 6 = 1;
}
C3[6];
for (let v20 = 0; v20 < 5; v20++) {
    const o23 = {
    };
    o23[Uint32Array] -= -2147483649;
    class C24 {
    }
    C24.e = C24;
    const v26 = new BigUint64Array(v20, v20, v20);
    try { v26.sort(v26); } catch (e) {}
}
new C3(C3, 1073741823);
new C3(1, 1);
const v30 = new C3(C3, C3);
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
new Uint16Array(257);
const v36 = new Uint16Array(11);
const v37 = v30?.with;
try { new v37(v36, v36); } catch (e) {}
new Float32Array(4056);
function f42() {
    try { ("b").localeCompare("b"); } catch (e) {}
    -(-9007199254740990);
    const o56 = {
        ..."b",
        "b": -9007199254740990,
        ["b"]: "b",
        "a": -9007199254740990,
        o(a48, a49) {
            try { a49(a48, a49, "b"); } catch (e) {}
            [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308] | -9007199254740990;
            function F53() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C55 extends F53 {
            }
            return -9007199254740990;
        },
        "h": Uint16Array,
    };
    try { o56.o(5.0, "b"); } catch (e) {}
    return o56;
}
const o58 = {
};
const v59 = f42();
v59[0];
class C62 {
    static {
        const v65 = this.hasInstance;
        Symbol.for(v65.description);
        v59[v65];
    }
    #p() {
        try { this.p(undefined, this, this, this, this); } catch (e) {}
        return undefined;
    }
    static #a = undefined;
}
new C62();
f42()[0];
new Int16Array(1971);
new Int32Array(128);
const v82 = new Int16Array(195);
let v84 = 3375;
const v86 = new BigUint64Array(v84);
("c").toUpperCase();
new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
const v93 = Math?.expm1;
try { new v93(Int16Array); } catch (e) {}
const v95 = Math.expm1(v84, Math, v82);
v95 * v95;
Math.tan(--v84);
const v99 = [-256,13351,5138,2,-4294967295,1000,268435440];
class C100 {
    constructor(a102, a103) {
        for (const v104 in this) {
        }
        Math.atan2(v99, -4294967297);
    }
}
class C107 extends C100 {
}
const v108 = new C107();
const v109 = v108?.constructor;
try { new v109(); } catch (e) {}
let [v111,,v112,...v113] = v86;
~v111;
var c = 255;
