let v3 = -9483;
const v7 = 2147483648 && 2147483648;
Math.trunc(2147483648);
v3++;
const v11 = v7 - !v7;
Math.asinh(v11 ^ v11);
-2851 - -2851;
let v16 = 1073741823;
v16--;
const v22 = new Float64Array(2773);
12 + 12;
const v26 = new Uint16Array(12);
const v29 = new Uint32Array(117);
v29[68] = v29;
const o33 = {
};
o33.e = o33;
let v34 = 1000;
const v36 = new Uint32Array();
try { v36.toSorted(2773); } catch (e) {}
let v38 = 2305;
v38++;
let v43;
try { v43 = Symbol.bind(v38); } catch (e) {}
3 | 3;
const t24 = "NFKD";
t24[1] = "NFKD";
try { ("-6").fontsize("Vre"); } catch (e) {}
[52989];
[1662867162,-1165856157,-4294967297,4294967295,268435439,4,1073741825];
const v52 = [14,-464489890,4,-51518,-14,-12];
v29[536870912] = v16;
const v54 = [-6.078081144782104,3.0,-1000.0,4.739392359408212,-1.3763335971087312e+307,5.0,0.8267200417626637,276.24411996178765,2.2250738585072014e-308];
for (let v55 = 0; v55 < 25; v55++) {
    v54["p" + v55] = v55;
}
Object.defineProperty(v26, Float32Array, { writable: true, enumerable: true, get: Symbol, set: Symbol });
let [v58,v59,v60,...v61] = v52;
v61 = v26;
v43["Vre"] = 2773;
v22.byteLength;
new Map();
function F64(a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    -a66;
    a67 + a67;
    Object.defineProperty(this, "d", { configurable: true, enumerable: true, value: v36 });
    try {
        this.d = a68;
    } catch(e71) {
    }
    ~F64;
    Uint32Array << a68;
    [,...v34] = v36;
}
new F64(426155202, 128, Uint8ClampedArray);
new F64(426155202, 128, v38);
new F64(4294967296, v38, v34);
function f77() {
}
class C78 extends f77 {
    toString(a80, a81) {
        const v82 = this?.constructor;
        try { new v82(); } catch (e) {}
        -this;
    }
}
const v85 = C78?.__defineGetter__;
try { new v85(7, Uint8ClampedArray); } catch (e) {}
const v87 = new C78();
try { v87.toString(); } catch (e) {}
