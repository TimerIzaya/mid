const v3 = [4294967296,4294967296,58958,58958,58958,58958,4294967296];
const v4 = [v3,1173092878,v3,4294967296,v3];
const v5 = [58958,1173092878,1173092878,v4];
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v4;
    } catch(e11) {
    }
    try {
        this.b = a10;
        try { ("Vre").codePointAt(); } catch (e) {}
        class C15 extends Array {
            constructor(a17, a18, a19) {
                super(a17);
            }
        }
        new C15();
    } catch(e21) {
    }
    try {
        this.h = 4294967296;
    } catch(e22) {
    }
}
new F6(v3, 58958, v5);
new F6(v5, 1173092878, F6);
const v25 = new F6(v3, 1173092878, 4294967296);
const v29 = [-1,404293594,64,-10];
const v32 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    function f38() {
        function f39(a40, a41, a42, a43) {
            a40--;
            ("6Ct").codePointAt(1000000000000.0);
            for (const v49 in "1024") {
            }
            return f39;
        }
        %OptimizeFunctionOnNextCall(f39);
        return a35;
    }
    a36[Symbol.toPrimitive] = f38;
    a34 | a34;
    a36[3] = a36;
    const v53 = a34 >>> a34;
    v53 === v53;
    const v55 = a36[3];
    function f56(a57, a58) {
        try {
            v29.valueOf = f38;
        } catch(e59) {
        }
        return v25;
    }
    v55[Symbol.toPrimitive] = f56;
    v55 !== v55;
    v55 + v55;
    const v65 = ("find").codePointAt();
    v65 * v65;
    try { v32["find"](..."find", ...a37); } catch (e) {}
    return "find";
}
f33(-4213, -4213, v32);
v29.unshift(1.7976931348623157e+308, -4213);
