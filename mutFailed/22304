const v0 = /ay\P{scx=Greek}/vms;
let v1 = /LAv\1(a)/gvdimsy;
/[C1Sp]/gum;
class C3 {
    set e(a5) {
        v1 = a5;
        const v8 = new WeakSet(3248);
        super.b = 3;
        v8[v0.__proto__] **= 3;
        v1--;
        try {
            a5.toString = C3;
        } catch(e12) {
        }
        new Float64Array(3);
        new Uint8ClampedArray(512, Uint8ClampedArray);
    }
}
new C3();
new C3();
const v20 = new C3();
function f21() {
    return v20;
}
new Date();
new Uint8Array(2);
const v29 = new BigInt64Array(128);
new BigUint64Array(91);
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const o43 = {
        set d(a38) {
            for (let v39 = 0; v39 < 10; v39++) {
                class C41 {
                    4294967296 = 996195971n;
                }
                new C41();
            }
        },
    };
    class C44 {
        constructor(a46) {
            o43.d = a36;
        }
    }
    C3 *= C44;
    let v48;
    try { v48 = a36(Date, F33); } catch (e) {}
    v48 = v29;
    try {
        const o49 = {
        };
        new Uint8Array(o49);
    } catch(e51) {
    }
    new C44();
}
const o55 = {
    "maxByteLength": 257,
};
new SharedArrayBuffer(64, o55);
new DataView(C3);
new F33();
