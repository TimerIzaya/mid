const v1 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
function f2(a3, a4) {
    function F6(a8) {
        if (!new.target) { throw 'must be called with new'; }
        const v9 = this?.constructor;
        try { new v9(F6); } catch (e) {}
        139837843 in this;
    }
    new F6();
    const o13 = {
        __proto__: v1,
    };
    return o13;
}
function f16() {
    let v19 = 1864489360 << ("c").toLowerCase();
    const v20 = v19--;
    v19 & v19;
    return v20;
}
function f27() {
    let v28 = -4294967297n;
    v28++;
    Math.atan2(-0.0, -0.0);
    const o35 = {
        "execution": "async",
        "type": "gqa",
    };
    class C36 {
        [null];
    }
    const v39 = new Float32Array();
    let v41 = undefined;
    const v42 = v41++;
    const v43 = v42 + v42;
    function F44(a46, a47, a48) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v49 = new F44(v43, 4096, -5577);
    return v49;
    v39["copyWithin"](..."-11838");
    Math.tanh();
    const o54 = {
    };
    class C55 {
        #n(a57, a58, a59, a60) {
            super[this] = this;
            super[f27].o();
        }
        constructor(a65, a66) {
            const o70 = {
                "type": "minor",
            };
            gc(o70);
        }
    }
    for (let i73 = 0; i73 < 7; i73++) {
        new C55();
    }
    for (let v80 = 0; v80 < 5; v80++) {
        function F83(a85, a86, a87, a88) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                BigInt(-0.9475779989772164);
            } catch(e92) {
            }
            const v93 = this.constructor;
            try { new v93(a85, a85); } catch (e) {}
            a86.isPrototypeOf();
        }
        const v96 = [142026.36415256164,-1000000000000.0,160593.91457975493,-1.9364523595671663,0.10652337324779793,0.4591098029687508,0.2689630899972745];
        const v98 = new WeakMap();
        function f99(a100, a101, a102) {
            return a101;
        }
        const v105 = [f99,v98,v96];
        const o106 = {
            "arguments": v105,
            "type": "function",
        };
        new Worker(f99, o106);
        new F83("HkAXC", "toStringTag");
    }
    return f27;
}
%OptimizeFunctionOnNextCall(f27);
[0.5703944092763099,1000000000000.0,529.5590487564812,2.0,Infinity,5.0,1000000.0,-1.2678408133787399e+308];
[2.2250738585072014e-308,-0.0,-2.0,1000000000000.0];
[47.26662249805622,-1.0,-1000000000.0,-1.7976931348623157e+308];
function f117() {
    59817n < undefined;
    const v122 = new Int8Array();
    v122.buffer;
    const v126 = new Int32Array(2917);
    v126["lastIndexOf"](10);
    return 59817n;
}
const v133 = new WeakSet();
function f134(a135) {
    const o139 = {
        "g": v133,
        "h": a135,
        __proto__: a135,
        "a": v133,
        "f": WeakSet,
        m(a137, a138) {
            return a137;
        },
    };
    return o139;
}
f134(WeakSet);
f134(1285);
new BigUint64Array(1448);
function F146(a148, a149, a150) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a150.e = f27;
    } catch(e154) {
    }
    for (let v156 = 0; v156 < 5; v156++) {
    }
    const v157 = Math.acosh("9g9Ak");
    Math.cbrt("9g9Ak");
    "9g9Ak" % undefined;
    const v160 = this.constructor;
    try { new v160("gqa", v157); } catch (e) {}
}
%PrepareFunctionForOptimization(f117);
f117();
%OptimizeFunctionOnNextCall(f117);
const t131 = 7;
t131();
