const v0 = [-5.0,-8.47494865972136e+306,-1e-15,0.06699712027470794];
const v1 = [1.1489783955968047,-2.2250738585072014e-308,0.008441740820453347];
const v2 = [-4.0,-1.7976931348623157e+308,3.9236092875622592,4.0,417.64492560768326,1.5279961618944249e+308,NaN,1.835969709940299,-2.2250738585072014e-308];
const v3 = [v1,v1];
v3[1];
const v5 = [v3,v0,v3,v2];
const v6 = [v3,v5,v1];
class C7 {
    constructor(a9, a10) {
        this[6];
        a9[0];
        Symbol.iterator = Symbol;
        const v15 = v0[Symbol.toPrimitive];
        try { v15(v2, ...v1, ...v6, v15, ...a9); } catch (e) {}
        v3 | v2;
    }
    [v6] = v5;
    #c;
    [v1] = v1;
    [v0];
    6 = v6;
    static d;
    #g;
}
const v18 = new C7(v1, C7);
v18[6];
new C7(v0, v0);
const v21 = new C7(v18, v18);
v21[6];
let v23 = 2;
v23++;
new Uint8ClampedArray(v23);
new Int16Array(8);
new BigUint64Array(10);
try { ("1866165091").includes("1866165091"); } catch (e) {}
const v35 = ("1866165091").normalize();
try { v35.trimStart(); } catch (e) {}
