let v0 = [4294967297,16];
const v1 = [-9007199254740990,49004,536870889,1000,257,65536,-9007199254740990,-9007199254740992];
const v2 = [10000,-1,-832640465,-128,199804910,-128,25765];
function f3() {
    return v1;
}
const v4 = [v1,v0,f3];
const v5 = [v2];
[f3,v4,v0];
let v7 = 256;
v7 >= v7;
const v10 = new Uint8Array(v7);
try { v10.at(v0); } catch (e) {}
%VerifyType(v7);
let v12;
try { v12 = v4.toLocaleString(v4, v10); } catch (e) {}
const v13 = /[wxyz{93}a(?=bbb|bb)c]/udmsy;
const v14 = v13?.constructor;
try { new v14(v13, v10); } catch (e) {}
/e(?<a>)/gvi;
const v17 = /(\p{General_Category=Decimal_Number}*)/gum;
[v7] = v5;
10 / 10;
-0.6216325783917372;
const v25 = v14.__proto__;
const v26 = v25?.__defineSetter__;
let v27;
try { v27 = new v26(v1, v4); } catch (e) {}
[924048592,-9223372036854775808,17813,-6,-3];
const v29 = [8,536870889];
[129,536870887,-15475,9007199254740992,1974414525];
let v31;
try { v31 = v25(v17, v13, ...v2, Math); } catch (e) {}
v27.fround(v10);
const v33 = +v0;
v33 / v33;
v12 && v12;
v12 && 268435440;
const v37 = v0++;
try { new Int8Array(v31, v29, v37); } catch (e) {}
new Int8Array(4096);
for (const v42 in v13) {
    new Uint8ClampedArray(129);
    new Uint32Array(848);
    new Uint8Array(10);
}
new Float64Array(1226);
eval();
function f56(a57) {
    return a57;
}
class C58 extends f56 {
    7;
}
