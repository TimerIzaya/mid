function f0() {
    try { ("symbol").strike(); } catch (e) {}
    const o5 = {
        "b": -65536,
        "h": 1e-15,
        [1e-15]: -65536,
        6: "symbol",
        "a": -65536,
        [-65536]: "symbol",
        ["symbol"]: -65536,
        "f": "symbol",
        2: 1e-15,
        __proto__: f0,
    };
    return f0;
}
f0();
const t16 = f0();
t16();
class C9 {
    static set d(a11) {
        const v13 = Symbol.iterator;
        const o25 = {
            [v13]() {
                let v15 = 10;
                const o24 = {
                    next() {
                        v15--;
                        new Int32Array([-4563]);
                        const v22 = v15 == 0;
                        const o23 = {
                            "done": v22,
                            "value": v15,
                        };
                        return o23;
                    },
                };
                return o24;
            },
        };
    }
}
C9.d = C9;
new C9();
const v27 = new C9();
const v28 = new C9();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
class C31 extends C9 {
    static 65536;
    f = v27;
    n(a33, a34, a35) {
        new BigInt64Array(4);
        new Int8Array(255);
        new Int8Array(22);
        return a35;
    }
}
const v45 = new C31();
try { v45.n(v28, v28, v28); } catch (e) {}
new C31();
const v48 = new C31();
const v49 = v48?.isPrototypeOf;
try { new v49(f0); } catch (e) {}
class C52 {
    static {
        this.f = this;
        try {
            const t68 = null;
            t68.valueOf = this;
        } catch(e54) {
            e54.g = e54;
            const v55 = e54.stack;
            v55[15] = v55;
        }
    }
}
const v56 = [null,null];
v56[1] = v56;
function f57() {
    let v58 = -v56;
    v58--;
    new Float32Array();
    const v63 = -(v58 && v56);
    const v65 = new BigUint64Array();
    const v66 = v65?.constructor;
    try { new v66(v63, v63, v58); } catch (e) {}
    v65["copyWithin"]();
    return C52;
}
%PrepareFunctionForOptimization(f57);
f57();
%OptimizeFunctionOnNextCall(f57);
f57();
