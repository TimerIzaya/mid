let v0 = -5919;
const t1 = "at";
t1[1] = "at";
const v5 = ("29753").replaceAll("29753", "b");
v5.split("b");
class C8 {
    [v5] = -7739;
    n(a10, a11) {
        const t8 = "b";
        const v13 = new t8();
        const v14 = super[48857];
        const v15 = v0--;
        try { a11.getTimezoneOffset(v15, 48857, v14, a11); } catch (e) {}
        for (let i19 = 0, i20 = 10; i19 < v13; i20--) {
        }
        typeof v14 === "symbol";
        function F30(a32) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C34 {
            static {
                try {
                const t0 = 0.44967380041772886;
                t0();
                } catch (e) {}
            }
            static f;
        }
        return "symbol";
    }
    static #h = 48857;
}
const t32 = 48857;
new t32();
const v41 = new Float32Array(165);
new Uint16Array(v41);
new C8();
new C8();
[6,65537,65537,-1073741824,-12,-1,-1765746677,-6,1073741824,9007199254740990];
[2147483647,234006974,-23520,-948686211];
[-3,373557872,-1999843476,-9007199254740990,128,9007199254740991,1415467840,127,37789];
for (let v51 = 0; v51 < 5; v51++) {
    const o53 = {
    };
    function F54(a56, a57, a58) {
        if (!new.target) { throw 'must be called with new'; }
        a56[4294967295] = a56;
    }
    F54.prototype;
    const v61 = v51 >> -18321;
    Math.log1p(F54);
    Math.tan(v61);
}
