18954 + 18954;
class C7 {
    #h;
    #b;
    p(a9, a10) {
        class C11 {
        }
        new C11();
        function f13() {
            return f13;
        }
        try {
            this.length = 1;
        } catch(e15) {
        }
        return a10;
    }
}
try { C7.bind(4294967295n); } catch (e) {}
new C7();
const v18 = new C7();
const v19 = v18?.constructor;
let v20;
try { v20 = new v19(); } catch (e) {}
const v21 = new C7();
const v22 = v21?.toLocaleString;
try { new v21(); } catch (e) {}
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v22.g = 3;
    } catch(e27) {
    }
}
F24.d = F24;
const v29 = new BigInt64Array();
try { v29.entries(); } catch (e) {}
var c = v29;
try { gc(); } catch (e) {}
const o33 = {
};
o33.f = o33;
gc();
class C35 extends F24 {
    static set d(a37) {
    }
}
C35.name = C35;
/V/gdiy;
/a\b!/vmy;
const t48 = /a{0,1}?/uisy;
t48.h = v19;
v18.__proto__;
const v44 = v19?.constructor;
try { new v44(); } catch (e) {}
Symbol.isConcatSpreadable;
const v50 = v20.description.fontsize(Uint8Array);
try { v50.replace(C35, 18954); } catch (e) {}
const v52 = new Int8Array(127);
v52[75];
const t59 = [-1.5424212036356715e+308];
t59[536870887n] = v20;
new Uint8Array(4);
function f63() {
}
