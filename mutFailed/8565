class C3 {
    #toString(a5, a6) {
        try { new a5(a5, a5, a6, a5); } catch (e) {}
        try {
            ("boolean").padEnd(-1073741824, "boolean");
        } catch(e9) {
        }
        return a5;
    }
    a = -1073741824;
    static #c;
    constructor(a11, a12, a13, a14) {
        try { a13(...a11, "boolean", a14, a14, ...-1073741824); } catch (e) {}
        return arguments;
    }
    static #h = -1073741824;
    static ["boolean"];
    static [-1073741824] = -1073741824;
    static a = 255;
}
new Uint8Array(255);
new BigUint64Array([-4]);
const v23 = new C3();
const v24 = new C3();
let v25 = new C3();
const v26 = v25--;
var b = C3;
v24[3488966526] = 255;
const t28 = "boolean";
t28.length &= v25;
d = C3;
[-1.7976931348623157e+308,-613.7550152041111] ^ -1264607604;
v26[9] = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a33;
    } catch(e36) {
    }
    try {
        this.f = "boolean";
    } catch(e37) {
    }
    try {
        this.d = v24;
    } catch(e38) {
    }
}
const v39 = new F31(v25, v24, v25);
switch (v39) {
    default:
        0 * 0;
        ([-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135]).fill();
        class C44 {
            #m(a46, a47, a48) {
                for (const v49 in this) {
                    (delete this?.h).__proto__;
                }
            }
        }
        class C52 extends C44 {
            static set e(a54) {
                this > a54;
            }
        }
        break;
        break;
}
new Float32Array(95);
Math.log2(F31);
Math.max(F31);
Math.expm1(F31);
const v65 = F31 >>> 3;
!3;
F31 * v65;
function f68() {
    return f68;
}
const v69 = f68();
try { ("p").indexOf(v69); } catch (e) {}
try { ("p").fontcolor(3); } catch (e) {}
new Uint16Array(2);
new Int32Array(6);
const v78 = new F31(v39, C3, v23);
const v79 = new F31(C3, v24, C3);
[v78,v79,-1073741824,"boolean"];
[F31,[v25]];
Float32Array.bind();
for (let v87 = 0; v87 < 5; v87++) {
    const v88 = [];
    const o92 = {
        toString() {
            super[this];
            return this;
        },
        ...v88,
        n() {
            return this;
        },
    };
    const o94 = {
    };
    gc(o94);
}
