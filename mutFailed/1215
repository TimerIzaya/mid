const v0 = /\p{Script=Greek}/ms;
const v1 = /8a.c/vdmy;
const v2 = /(pwT)/gudmy;
class C6 {
    static toString(a8, a9, a10) {
        const v11 = this[3];
        super[v11] = v11;
        super[a9];
        v2.__proto__;
        a9 = v11;
        v2[5];
        return 920667712n;
    }
    static #g;
    f = 128n;
}
new v1();
const v16 = new C6();
const v17 = new v16();
const v24 = [0.48879817238347556,2.2250738585072014e-308,1000.0,1000.0,-681.8004556870678,-1000.0,-1.5737380958439236e+306];
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = 4411;
    const v30 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
    const v31 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
    class C32 {
        constructor(a34, a35) {
            super[v31] = v30;
        }
    }
    const v36 = new C32(v30, v31);
    const o37 = {
    };
    new Proxy(v16, o37);
    new C6();
    function f41(a42) {
    }
    const v45 = [v36];
    const o46 = {
        "arguments": v45,
        "type": "function",
    };
    new Worker(f41, o46);
}
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 920667712n;
    } catch(e54) {
    }
    try {
        this.e = a51;
    } catch(e55) {
    }
}
new F48(25965, v2, -1143254951, -7n);
const v57 = new F48(9007199254740990, F48, -1073741824, 9007199254740990);
const v58 = new F48(4411, v57, -1143254951, v17);
new F25(531531810, v24, 531531810);
class C60 {
}
delete v58[v17];
920667712n instanceof F25;
delete v0[4096];
v58 >> 9007199254740990;
