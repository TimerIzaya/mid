function f0() {
    const o20 = {
        "g": 1.5837284816976838e+307,
        n(a5, a6) {
            new Uint16Array(602);
            new Int32Array(1414);
            new Uint16Array(0);
            return 1.0986930225664972e+308;
        },
        toString(a17, a18) {
            return a17;
        },
        9: 1.5837284816976838e+307,
        get d() {
        },
    };
    const o22 = {
        "b": 256,
    };
    o22.b = o22;
    9007199254740991 % 9007199254740991;
    const o29 = {
        [-4](a27, a28) {
        },
        __proto__: o22,
        ...o22,
        "b": 9007199254740991,
    };
    const v30 = o20.g;
    v30 >>> v30;
    return o20;
}
f0();
f0();
const v34 = f0();
v34.c = v34;
const v35 = [-1000000.0,3.06658726083042e+307];
[3.464428839171564,-1.0,2.220446049250313e-16,733.7274995225275,-1000000000.0,5.0];
const v37 = [-2.2250738585072014e-308,4.0,-0.0,-7.397543000671462e+307];
try { v37.find(v34); } catch (e) {}
try { ("caller").valueOf(); } catch (e) {}
try { ("caller").match(f0); } catch (e) {}
let v46;
try { v46 = ("function").normalize(); } catch (e) {}
const v47 = v46?.trimRight;
try { new v47(); } catch (e) {}
const v50 = [];
1024n ^ 1024n;
const v54 = 536870887n % 536870887n;
v54 * v54;
const v59 = new Uint8ClampedArray();
try { v59.values(); } catch (e) {}
const v62 = new URIError(64);
try { v59(-85357.59116785484, v62); } catch (e) {}
function F65(a67) {
    if (!new.target) { throw 'must be called with new'; }
    a67 * a67;
    const v69 = this.constructor;
    v69.d = v69;
    v69.prototype;
    try {
    const t0 = 6;
    new t0();
    } catch (e) {}
    a67 >>> a67;
    class C74 extends Uint32Array {
    }
    let v75;
    try { v75 = new C74(); } catch (e) {}
    const v76 = new C74();
    try { Math.expm1(6, v75); } catch (e) {}
    Math.tanh(v76);
    try {
        this.c = v50;
    } catch(e80) {
        -Infinity;
        Symbol.iterator;
        const v84 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        function f85() {
            return v84.length;
        }
        const o87 = {
        };
        o87.constructor;
    }
}
new F65(536870887n);
new F65(v35);
