let v0 = 512;
const v2 = new Float32Array(v0);
const v5 = new Uint8Array(1000);
const v8 = [];
const v11 = ([[128,-1641321930,-2147483649]]).concat(v8);
const v12 = new Int16Array(256);
class C13 {
    static 3 = v11;
    static #c = Float32Array;
    static [v11];
    static [C13] = v8;
    0 = Uint8Array;
    constructor(a15, a16, a17, a18) {
        super[a15] = Uint8Array;
        try {
            new Float32Array(-234812275);
        } catch(e21) {
        }
    }
    #o(a23, a24, a25) {
        const o26 = {
        };
        try {
            o26.a = v0;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.a = v0;
            o28.h = v12;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.a = v0;
            o30.h = v12;
            o30.e = a24;
        } catch(e31) {
        }
        try {
            const o32 = {
            };
            o32.a = v0;
            o32.h = v12;
            o32.e = Uint8Array;
        } catch(e33) {
        }
        return a23;
    }
    valueOf(a35, a36, a37) {
        v0 = 256;
        const v38 = v11 <= this;
        v38 ? v11 : this;
        return v38;
    }
}
const v40 = new C13(1000, v12, 1000, Uint8Array);
const o41 = {
    __proto__: v5,
    "a": v0,
};
const v43 = new C13(1000, v40, 1000, v2);
new C13(256, v43, 256, v5);
const v48 = [-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308];
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this.constructor;
    let v54;
    try { v54 = new v53(a51, v53, this, v48, v48); } catch (e) {}
    v48.fill(v54, v53);
}
new F49(F49, F49);
