function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 38995;
    } catch(e7) {
    }
}
new F3(38995, -49201);
new F3(-49201, -1098599855);
new F3(-49201, 38995);
new Float64Array(8);
new Uint16Array(177);
new Uint8Array(212);
const t13 = 3.043938044038551e+307;
new t13();
new Map();
function f29(a30, a31, a32, a33) {
    const o34 = {
    };
    return o34;
}
const v35 = f29("string", "m");
const v36 = f29("m", "m");
let v39 = 129;
v39++;
new Float32Array(v39);
try { new BigInt64Array(v36, 16, Map); } catch (e) {}
new BigInt64Array();
~-4294967297n;
const v50 = [601759695];
try { v50.sort(); } catch (e) {}
[1073741824,1073741823,1376142744,1073741825];
function f53(a54, a55, a56, a57) {
    function f59() {
        -(-268435456 + -268435456);
    }
    f53();
    const v65 = new Int8Array();
    v65.buffer;
    %OptimizeFunctionOnNextCall(f59);
    try { ("find").strike(); } catch (e) {}
    try {
    } catch(e69) {
    }
    const o70 = {
    };
    o70.g = -4294967297n;
    const o71 = {
    };
    o71.g = -4294967297n;
    o71.d = v35;
}
f53();
%PrepareFunctionForOptimization(f53);
f53();
%OptimizeFunctionOnNextCall(-4294967297n);
f53();
