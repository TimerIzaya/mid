function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = F0;
    } catch(e3) {
    }
    try {
        this.a = -1899735043;
    } catch(e4) {
        try {
        } catch(e5) {
        }
        const v7 = [Float64Array];
        for (let v8 = 0; v8 < 5; v8++) {
            v7.length = 2;
        }
    }
}
const v10 = new F0();
const v11 = new F0();
const v12 = new F0();
function f13(a14) {
    const o21 = {
        "f": a14,
        "h": v11,
        "e": F0,
        [v10](a16) {
            a14 in v12;
            Object.defineProperty(v11, "f", { writable: true, configurable: true, value: a14 });
            const o18 = {
            };
            const v20 = new Proxy(v11, o18);
            return v20;
        },
    };
    return a14;
}
f13(f13(f13(v11)));
class C25 {
    static n(a27, a28, a29, a30) {
        const v33 = new Int16Array(1000);
        const o35 = {
        };
        35530n & 35530n;
        const v39 = new Uint8ClampedArray(1000);
        new Int8Array(v39);
        const v45 = new BigInt64Array(1000);
        class C46 extends Float64Array {
            constructor(a48, a49, a50, a51) {
                super(v33);
            }
            [65] = Float64Array;
        }
        new C46();
        v33.toLocaleString(BigInt64Array, v45);
        const v54 = [];
        function F55(a57, a58, a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            a57.lastIndexOf(a57, a58);
        }
        const v62 = new F55(v54);
        const v63 = v62.constructor;
        try { new v63(); } catch (e) {}
        const o68 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o68);
        return a29;
    }
}
function f71(a72, a73) {
    arguments.toString = a72;
    return a72;
}
f71(f71, 8077n);
new F0();
new C25();
function f78() {
    const o81 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o81;
}
f78();
const v83 = f78();
const v87 = new v11();
function f88(a89, a90) {
    let v91 = a89.BYTES_PER_ELEMENT;
    v91++;
    class C93 {
    }
    const v94 = C93.length;
    v94 !== v94;
    try { ("0x2I").sup(); } catch (e) {}
    class C99 {
    }
    try { C99(); } catch (e) {}
    const v101 = C99?.call;
    v101.length;
    try { v101(null); } catch (e) {}
    class C104 extends C99 {
        constructor(a106, a107, a108, a109) {
        }
    }
    C104.e = C104;
    try { C104(NaN, v87, NaN, v83); } catch (e) {}
    const v111 = a90?.propertyIsEnumerable;
    try { v111(C99); } catch (e) {}
    let v113;
    try { v113 = v111(); } catch (e) {}
    class C114 {
    }
    C114.name = C114;
    try { C114.call(); } catch (e) {}
    const v116 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v116.includes(v113); } catch (e) {}
    class C118 {
    }
    try { C118(); } catch (e) {}
    try { C118.apply(1.7976931348623157e+308, f88); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C118[Symbol.replace] = v116;
    const v124 = [];
    try { v124.findLast(1.7976931348623157e+308); } catch (e) {}
    function f127(a128, a129) {
        const o130 = {
            "f": a129,
            [a128]: -12,
        };
        return o130;
    }
    try { f127.toString(); } catch (e) {}
    let v132;
    try { v132 = v124.with(v124, v124); } catch (e) {}
    const v134 = new Float64Array(v124, v132);
    const v135 = new Float64Array(v134, a89, v132);
    v135.values().next();
    return v135;
}
f88.name;
new C25();
("I").localeCompare();
