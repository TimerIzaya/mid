const v5 = new Array(227);
const v18 = Float32Array.length;
class C20 {
}
const v21 = new C20();
class C22 {
    static g = 227;
    static {
        this[1073741823] >>>= -2.2250738585072014e-308;
        const v24 = super[this];
        Object.defineProperty(this, 64, { configurable: true, value: v24 });
        try { v24(Array, C20, v18); } catch (e) {}
        super[v5];
        delete this.g;
    }
}
try { C22.bind(v21); } catch (e) {}
let v31 = Symbol;
const v32 = v31(v18);
[Float32Array];
function f35() {
}
[[f35,f35],-5n];
let v39 = 0;
do {
    f35 == 6n;
    typeof 3967 === "object";
    v39++;
} while (v39 < 1)
try { ("5").split(127, v32); } catch (e) {}
if (v32 != -650478774n) {
    v31 = v21;
    -650478774n >>> v5;
} else {
    C20[-2n] = 5.0;
}
const v56 = new Array("yi");
class C57 {
    static {
        function F59(a61, a62) {
            if (!new.target) { throw 'must be called with new'; }
            const v63 = this?.constructor;
            try { new v63("yi", v18); } catch (e) {}
        }
        new F59(v56, this);
        new F59(Array, F59);
    }
}
try {
} catch(e67) {
}
let v68 = 0;
do {
    v68++;
} while (v68 < 9)
