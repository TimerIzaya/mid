const v0 = [8,810474181,61254,818064193,-9007199254740991,268435456,9223372036854775807,-9007199254740991];
[-13538,268435441,-7,119630871,-10,-9223372036854775808,15,8];
const v2 = [-54336,55665,1073741824,-34638,1073741825,16];
const v5 = Symbol.iterator;
const o14 = {
    [v5]() {
        let v7 = 10;
        const o13 = {
            next() {
                v7--;
                const v11 = v7 == 0;
                const o12 = {
                    "done": v11,
                    "value": v7,
                };
                return o12;
            },
        };
        return o13;
    },
};
class C17 {
    m(a19, a20, a21, a22) {
        delete a20[6];
        return this[2];
    }
    static #c = v2;
    static ["boolean"];
    g = "boolean";
    constructor(a26, a27, a28) {
        let v29;
        try { v29 = a27.trimLeft(); } catch (e) {}
        v29 != "name";
        const v31 = super.b;
        try {
            a26.length = v31;
        } catch(e32) {
        }
    }
}
new C17("boolean", "name", v0);
const v34 = new C17("findLast", "name", v0);
const v35 = delete C17?.e;
let v37;
try { v37 = new v35(); } catch (e) {}
({"d":v37,"g":C17,} = v37);
try { v35("findLast", v34); } catch (e) {}
new C17("findLast", "findLast", v0);
const o46 = {
    [Infinity]: -0.0,
    [-16]: Infinity,
    "h": -16,
    ...-0.0,
    "c": Infinity,
    "e": -0.0,
};
