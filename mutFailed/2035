new Uint16Array(128);
Float32Array.name = Float32Array;
new Float32Array(6);
let v6 = 2690;
v6 - v6;
new Uint16Array(v6);
[0.9708993285586652,884328.0495979532];
const v11 = [-8.794087486294885,1e-15,0.0,-7.087053224828324,-1e-15,1.3706550218008582e+308];
v11[3] = v11;
const v12 = [NaN,-1.7976931348623157e+308,1000000.0,333.4706571088532,-3.0];
class C16 {
    static {
        this.length;
        1024 / 1024;
        const v24 = [65537,268435441,63298,-5,1235122603];
        const v25 = v24?.entries;
        try { new v25(); } catch (e) {}
        const v27 = [128,215394418];
        let v28;
        try { v28 = v27.entries(); } catch (e) {}
        const v29 = [-2,-4294967296,4294967297];
        function F30(a32, a33, a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
            const v36 = this?.constructor;
            try { new v36(-1000.0, -1000.0, v12, v28); } catch (e) {}
            -a34;
            a35[1];
            const v40 = this.constructor;
            try { v40(1024, 1024, v24); } catch (e) {}
        }
        const v42 = new F30(-714582153, F30, -714582153, v27);
        v42.e = v42;
        const v43 = v42.length;
        v43 >>> v43;
        const v45 = new F30(9, v42, 9, v29);
        v45.b = v45;
        const v46 = new F30(1024, v45, v29, v29);
        -(-581116763);
        1000 !== 1000;
        let v56;
        try { v56 = ("string").trimStart(); } catch (e) {}
        v56[2] = v56;
        let v57 = -1;
        -35417 + -35417;
        -35417 - -35417;
        class C61 {
        }
        function f62(a63, a64, a65, a66) {
            try { a64.strike(); } catch (e) {}
            return v46;
        }
        f62.e = f62;
        f62(-9007199254740991, v56);
        v28[v45] ||= ([1024,19026,1125846339]).length;
        0 / 0;
        const o76 = {
            set b(a75) {
                v57 <<= v57;
            },
        };
        while (0 < C16, 0) {
            v6++;
        }
    }
}
C16.h = C16;
