class C3 {
    static {
        this.fuck = -0.4971781525336123;
        let v6;
        try {
        const t0 = -0.4971781525336123;
        v6 = new t0();
        } catch (e) {}
        const v9 = new BigInt64Array(12);
        const o10 = {
            ...v9,
        };
        try {
            this.fuck(v6, v6, this, this);
        } catch(e12) {
        }
        new Date();
        new Int32Array(Int32Array, Int32Array, Int32Array);
        const o17 = {
        };
        o17.propertyIsEnumerable;
    }
    get b() {
        function f20(a21) {
            [Infinity,-1000.0,-1.627692152823683e+308,-1000000.0,1000000.0,0.5222236247299535,-2.2250738585072014e-308,4.0,3.049550380122314,-924.4926118355303];
            [-Infinity,-438428.3627363428,-2.8820206376184476,5.0,0.7631291023192559,5.0,-4.921130863131404,3.0,-4.0];
            function f24(a25, a26) {
            }
            function f27(a28, a29, a30, a31) {
                const o32 = {
                };
                return o32;
            }
            function F33(a35) {
                if (!new.target) { throw 'must be called with new'; }
                const o36 = {
                    "preventExtensions": f27,
                    "setPrototypeOf": f24,
                };
                new Proxy(this, o36);
                const v39 = this?.constructor;
                try { new v39(); } catch (e) {}
            }
            [2.220446049250313e-16,-2.220446049250313e-16,-1.0,1.7976931348623157e+308];
            for (let v42 = 0; v42 < 25; v42++) {
                const o46 = {
                    "execution": "async",
                    "type": "minor",
                };
                gc(o46);
            }
            return -0.4971781525336123;
        }
        f20(-0.4971781525336123);
        return -0.4971781525336123;
    }
}
new C3();
const v50 = new C3();
new v50();
Math.exp(-Infinity);
("Km").constructor;
new C3();
Math.log2(0);
