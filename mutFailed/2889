const v1 = [];
function f2() {
    const o6 = {
        toString() {
            super[this];
            return this;
        },
        ...v1,
        n() {
            return this;
        },
    };
}
const v9 = new f2();
const o12 = {
    set f(a11) {
    },
    __proto__: v9,
};
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new Uint8Array([2,-10]);
        const v29 = new Float64Array();
        class C30 {
            #a;
            constructor(a32, a33, a34) {
                const v35 = this.constructor;
                try { new v35(this, v29, a32); } catch (e) {}
                try {
                    a33.#a;
                } catch(e38) {
                }
            }
        }
        this.arguments = a23;
    } catch(e39) {
    }
    try {
        this.h = a22;
    } catch(e40) {
    }
    Uint32Array[1] = 15;
    function F43(a45, a46) {
        if (!new.target) { throw 'must be called with new'; }
        a46 * a46;
        const v48 = this.constructor;
        class C49 {
            #a;
            valueOf(a51, a52) {
            }
            toString(a54) {
            }
            static f;
        }
        const v55 = new C49();
        v55[-2126520711n] = this;
        2 >= 2;
        try { new v48(this); } catch (e) {}
    }
}
new F19("number", "number", "number", 6);
const v61 = new F19(536870887, "-2", "getPrototypeOf", -1389485293);
new F19(v61, "getPrototypeOf", "number", 6);
function f67() {
    ("D")[0];
    for (const v73 of Float64Array(-1342455356)) {
    }
}
f67();
class C78 {
    [null];
}
