class C3 {
    toString(a5) {
        this.d = this;
        4096 - 4096;
        Int8Array.name;
        const v10 = new Int8Array(4096);
        v10[2077];
        new BigInt64Array(255);
        const v17 = new Uint8Array(127);
        return v17;
    }
    d = C3;
    #f;
}
let v18 = new C3();
v18.d = v18;
v18.e = v18;
const v19 = new C3();
let v22 = v18--;
Math.log(v18);
const v24 = v22++;
Math.max(v18);
v18++;
v22++;
v24 - v18;
const v29 = v19?.constructor;
try { new v29(); } catch (e) {}
const v31 = new C3();
const v33 = 64 | 64;
v33 !== v33;
Int8Array.prototype = Int8Array;
Int8Array.length = Int8Array;
const v36 = new Int8Array(64);
v36[61];
7 >>> 7;
const v41 = new Int8Array(7);
let v42;
try { v42 = v41.slice(v33, v31); } catch (e) {}
const v44 = -512;
try { new BigUint64Array(v41, v41, BigUint64Array); } catch (e) {}
new BigUint64Array(512);
8 - 8;
class C52 {
    static #p(a54) {
        function f55(a56) {
            return a56;
        }
        class C57 extends f55 {
            static [-1] = 8;
            static [a54];
            static 268435441;
        }
        return a54;
    }
    [0.028957958839558873];
    static 2147483648 = C52;
    static #g;
    #a;
}
let v58;
try { v58 = new C52(); } catch (e) {}
try { v58.toString(); } catch (e) {}
const v60 = v58?.propertyIsEnumerable;
try { new v60(0.028957958839558873); } catch (e) {}
const v62 = new C52();
const v63 = v62?.constructor;
try { new v63(); } catch (e) {}
const v65 = v62?.constructor;
try { new v65(); } catch (e) {}
try { v65(); } catch (e) {}
let v68;
try { v68 = new v65(); } catch (e) {}
const v69 = v68?.__defineGetter__;
try { new v69(v65, v44); } catch (e) {}
const v71 = v68?.constructor;
v71[2147483648];
v71.length = v71;
let v73;
try { v73 = new v71(); } catch (e) {}
const v74 = v73?.__lookupGetter__;
try { new v74(v42); } catch (e) {}
const v76 = new C52();
const v77 = v76?.constructor;
try { new v77(); } catch (e) {}
try { v76.hasOwnProperty(0.028957958839558873); } catch (e) {}
let v80;
try { v80 = v76.propertyIsEnumerable(C52); } catch (e) {}
v80 && v80;
const v82 = new C52();
const v83 = v82?.constructor;
v83[2147483648] = v83;
let v84;
try { v84 = new v83(); } catch (e) {}
const v85 = v84?.constructor;
try { new v85(); } catch (e) {}
const v87 = v84?.constructor;
try { new v87(); } catch (e) {}
let v89;
try { v89 = new v87(); } catch (e) {}
try { v89.propertyIsEnumerable(v62); } catch (e) {}
const v92 = /[\11]/gm?.toString;
try { new v92(); } catch (e) {}
/(?:a*)*/gudm;
const v95 = /a(?!bbb|bb)c/vi;
v95.flags = v95;
const v96 = v95?.toString;
try { v96.toString(); } catch (e) {}
try { v96.call(v71); } catch (e) {}
try { new v96(); } catch (e) {}
const v101 = ~117;
~v101;
const v104 = new Uint16Array(Uint16Array);
const v105 = v104?.constructor;
v105.length;
try { new v105(0.028957958839558873, v101, v101); } catch (e) {}
v104[2] = v104;
const v108 = v104[1];
v108 - v108;
31 >>> 31;
const v113 = Int32Array.length;
v113 + v113;
v113 + v113;
new Int32Array(31);
const v119 = Uint32Array.length;
const v120 = v119 + v119;
v120 >>> v120;
let v122;
try { v122 = Uint32Array.toString(); } catch (e) {}
try { v122.trimStart(); } catch (e) {}
v122[0] = v122;
new Uint32Array(128);
function f125() {
    let v127 = 1000000000000.0;
    v127 >>> v127;
    v127--;
    12 | 12;
    const o134 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a133) {
            return a133;
        },
        ...v127,
    };
    return o134;
}
let v135;
try { v135 = f125(); } catch (e) {}
v135.e = v135;
%PrepareFunctionForOptimization(f125);
const v136 = f125();
v136.BYTES_PER_ELEMENT = v136;
let v138 = f125().BYTES_PER_ELEMENT;
v138--;
%OptimizeFunctionOnNextCall(f125);
const v140 = f125();
try { v140.call(64); } catch (e) {}
