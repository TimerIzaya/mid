const v2 = new Uint8Array(6);
5 / 5;
const v6 = new Float32Array(5);
Uint8ClampedArray.e = Uint8ClampedArray;
new Uint8ClampedArray(256);
const v13 = new Uint8ClampedArray(10);
let v14;
try { v14 = v13.join(undefined); } catch (e) {}
try { v14.strike(); } catch (e) {}
let v16 = 0;
v16--;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v19 = new Int16Array(v16);
const v20 = v19?.constructor;
try { new v20(6, 6, v2); } catch (e) {}
1 * 1;
const v24 = 1 >> 1;
v24 >>> v24;
new Int8Array(1);
function f28() {
    return f28;
}
try { f28(); } catch (e) {}
const v30 = f28.arguments;
function f31() {
    v6.c = Float32Array;
    const v33 = [2.0,-1e-15,1.7976931348623157e+308];
    let v34 = v33[1];
    v34++;
    try { new Int16Array(Int8Array, Int8Array, 1); } catch (e) {}
    const v39 = new Int16Array(1371);
    const v41 = 1351 % 1351;
    v41 ^ v41;
    v33.flat(1351);
    const v44 = v39.lastIndexOf(1371, 1351);
    v44 ^ v44;
    for (let v46 = 0; v46 < 5; v46++) {
        const v47 = v46 & v46;
        Uint32Array.length;
        -2147483649 & -2147483649;
        const o52 = {
        };
        o52.h = o52;
        o52[Uint32Array] -= v44;
        class C54 {
        }
        try { C54.bind(Uint8ClampedArray); } catch (e) {}
        10 | 10;
        const v59 = new BigUint64Array(10);
        try { v59.slice(v6, v16); } catch (e) {}
        Array(36862, v30, v47);
    }
    return f28;
}
%PrepareFunctionForOptimization(v30);
f31();
%OptimizeFunctionOnNextCall(f31);
const v64 = f31();
try { v64(); } catch (e) {}
function F66(a68) {
    if (!new.target) { throw 'must be called with new'; }
    0 / 0;
}
F66.e = F66;
