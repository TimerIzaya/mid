-9223372036854775807n === 3787;
Int8Array.BYTES_PER_ELEMENT = Int8Array;
const t2 = -9223372036854775807n;
new t2(3787);
(3787)[1926];
const v10 = new Float32Array(516);
const v11 = v10[458];
v11 >> v11;
let v13 = 2;
v13--;
Date.d = Date;
const v16 = new Date();
const v18 = new BigUint64Array();
v18[v16] = v16;
try { new Uint8ClampedArray(3787, v10, Date); } catch (e) {}
const v21 = new Uint8ClampedArray(v13);
let v22;
try { v22 = v21.lastIndexOf(v16); } catch (e) {}
try { v21.set(3787); } catch (e) {}
class C27 extends Int8Array {
    [12];
}
try { new C27(); } catch (e) {}
-42822 - -42822;
-113705069 >>> -113705069;
for (let v34 = 0; v34 < 50; v34++) {
    const v35 = [];
    const v36 = [v35,v35,v35,v35];
    [v36,v36,v36];
    function f38() {
        return Int8Array;
    }
    f38();
    const v41 = v22?.constructor;
    let v42;
    try { v42 = new v41(v13); } catch (e) {}
    v42.arguments = v42;
    class C44 {
        #d;
    }
    try { C44.toString(); } catch (e) {}
    try { Math.expm1(Int8Array); } catch (e) {}
    Math.tan(516 >>> 36862);
    Array(36862);
}
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a53;
}
try { new F51(Uint8ClampedArray, -9223372036854775807n); } catch (e) {}
let {...v57} = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
