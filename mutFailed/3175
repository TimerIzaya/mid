const v2 = new Uint8Array(99);
new Int32Array(3);
Math.cos(-1073741824);
Int16Array.prototype = Int16Array;
const v12 = new Int8Array(13);
class C13 extends Int8Array {
    a;
    static e;
    g = 99;
    get b() {
        const v15 = new Int32Array(this, 13, 99);
        const v16 = [601759695];
        const v17 = [1073741824,1073741823,1376142744,1073741825];
        let v19;
        try { v19 = v17["find"](..."find", 99, ...v16, ...v17); } catch (e) {}
        v19 <= this;
        Int8Array << v15;
        const v23 = C13.split;
        this[v23];
        return v23;
    }
    static [13] = v12;
    constructor(a26, a27, a28) {
        const o31 = {
            "type": "minor",
        };
        gc(o31);
    }
}
new Int8Array();
new C13();
new Int8Array();
const v36 = /xyz{0,1}ja.a(?=b)/ui;
class C37 {
}
const v38 = new C37();
const v44 = new Uint32Array(4);
[v44];
956206316 + 956206316;
const v48 = new Set();
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v53 = [-460.307183313349,116746.1734742194,2.0,0.7612507062467385,-1.7352454748688924e+308];
        function f54(a55, a56) {
            function f57(a58, a59) {
                return a58;
            }
            return a56;
        }
        f54.d = f54;
        f54.d = f54;
        const v61 = Symbol.toPrimitive;
        Symbol.for(v61.description);
        v53[v61] = f54;
        const v65 = [618.1593022982238,-670.4331556988014,-598.8215888934105,1e-15,0.6439103075146282,996419.0616454568,-1.0,-1000000000.0,1e-15,-566.0187654378863];
        v65[Symbol.toPrimitive] = Symbol;
        v65.toString = Symbol;
        const v68 = [0.38491475396310426,1.7976931348623157e+308,-1e-15,924251.5567374192,NaN,1.5098751561946018e+308,-1.1124820518145282e+308,-3.0,-0.0,-467.0550866857337];
        class C69 {
            valueOf(a71) {
                let v72;
                try { v72 = v68(a71, this, this, a71, this); } catch (e) {}
                try { v72(v65, v72, v72); } catch (e) {}
                return v53;
            }
            1000;
            static #d = v65;
            static [v53] = v68;
            static #a;
            [v53] = v68;
            static [v65];
            static #e = v68;
        }
        this.d = C13;
    } catch(e74) {
        for (let [v75,v76] of e74) {
            new a52(a51);
            new Int8Array(2);
            new Uint32Array(16);
            new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
            function f90(a91, a92) {
            }
            f90(-1748, 1713234876);
            new Int16Array(0);
            try {
                v48.values();
            } catch(e97) {
            }
        }
    }
    try {
        this.h = a51;
    } catch(e98) {
    }
    var h = v36;
    try {
        a52.e = v38;
    } catch(e99) {
    }
    try {
        v48[C37];
        try {
            new Uint8ClampedArray(3);
            v2.__proto__;
            class C106 extends Int8Array {
            }
            new C13(-268435456n, -268435456n);
        } catch(e109) {
        }
        this.b = C37;
    } catch(e110) {
    }
}
new F49(F49, 2);
const v112 = new F49(v38, F49);
new F49(v112, null);
