const v0 = [-4.0,-2.220446049250313e-16,-1.0624740081877277,-1000000000000.0,6.6606670421487735,2.0,-1.0,1.1935602073262654e+308,-1e-15,-1000000.0];
const v1 = [-2.2250738585072014e-308,-1.2734499059372313e+308,-1.0];
const v2 = [5.185779010952018e+307,0.238689671266345];
function f6(a7, a8, a9) {
    const o18 = {
        "f": a9,
        ...a7,
        __proto__: v1,
        valueOf(a11, a12, a13, a14) {
            a14[Symbol.toPrimitive];
            return a9;
        },
        "g": a7,
        "d": -268435456,
        "b": a7,
    };
    return o18;
}
f6(v0, 10102, v1);
f6(v0, 10102, v2);
const v21 = f6(v2, -268435456, v0);
class C28 {
    constructor(a30, a31) {
        function f32(a33) {
            function f35(a36) {
                a36 & a36;
            }
            this.onmessage = f35;
            this.__proto__;
            let v42;
            try { v42 = this["getUTCHours"](v21, "getUTCHours", "2055637386"); } catch (e) {}
            Object.defineProperty(a30, f32, { value: v42 * a30 });
            new Float32Array(3725);
            new Int32Array(2270);
            new Uint8Array(6);
        }
        const v53 = [1,40880,1,-65535,3109,268435456,0,-47552,1073741823];
        const v55 = new BigUint64Array();
        try { v53.map(v55); } catch (e) {}
        class C58 extends BigInt64Array {
        }
        const v61 = [f32];
        const o62 = {
            "arguments": v61,
            "type": "function",
        };
        new Worker(f32, o62);
        Int16Array.prototype = Int16Array;
        v1.#valueOf();
        function F66() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 0;
        }
        class C69 extends F66 {
            #b;
            constructor(a71) {
                super();
                delete this.h;
                super.h = this;
                /\1\2(a(?:\1(b\1\2))\2)\1()l/udm;
            }
        }
    }
}
new C28(C28, -4.0);
const v75 = new C28(-4.0, -4.0);
const v76 = new C28(9007199254740992, 512);
const v79 = new Uint8Array(0);
const v82 = new Uint8Array(4096);
const v85 = new Uint8Array(255);
let v86;
try { v86 = v82(); } catch (e) {}
let v87;
try { v87 = v86(v79, v86, v75); } catch (e) {}
v86 + v87;
function f89() {
    try { ("NFKD").localeCompare(v76); } catch (e) {}
}
Reflect.construct(Uint8ClampedArray, [[1.0,-6.818981069405753e+307]]);
v82.buffer;
v79[1073741824];
f = -268435456;
const v101 = -Infinity;
Math.cos(v101);
~v101;
const v104 = 1787133428 * v101;
v82 >> 1787133428;
Math.expm1(v101);
+v104;
C28[v85];
const v112 = new Date();
v112.getTimezoneOffset();
function f114(a115, a116, a117, a118) {
    const o126 = {
        m(a120, a121, a122, a123) {
            ("ignoreCase").normalize();
            return this;
        },
    };
    return o126;
}
let v128;
try { v128 = v76.m(0, v79); } catch (e) {}
const o129 = {
};
try {
    o129.h = v128;
} catch(e130) {
}
try {
    const o131 = {
    };
    o131.h = v128;
    o131.d = 512;
} catch(e132) {
}
try {
    const o133 = {
    };
    o133.h = v128;
    o133.d = 512;
    o133.e = v79;
} catch(e134) {
}
try {
    const o135 = {
    };
    function f137(a138, a139, a140, a141) {
        "valueOf" | a139;
        a138 / a138;
        const v144 = a139 < a139;
        let v145 = f137 >>> a140;
        v145++;
        const o150 = {
            n(a148, a149) {
                return v144;
            },
        };
        return a139;
    }
    o135.h = v128;
    o135.d = 512;
    o135.e = 255;
} catch(e151) {
}
