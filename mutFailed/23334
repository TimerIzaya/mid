function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -1214743121;
    } catch(e3) {
    }
}
const v4 = new F0();
const v6 = 9007199254740991n * 9007199254740991n;
function F7(a9) {
    if (!new.target) { throw 'must be called with new'; }
    a9 ^ a9;
}
new v4(v6);
const v12 = new F0();
const v13 = new F0();
class C14 {
    static h = v12;
    constructor(a16, a17) {
        try {
            function f19(a20, a21) {
                const o25 = {
                    "f": a21,
                    [a20]: -12,
                    set e(a23) {
                    },
                };
                return o25;
            }
            async function* f26(a27, a28, a29, a30) {
                await a16();
                yield* [];
                return f19;
            }
            v12.g = v12;
        } catch(e34) {
        }
    }
    static [F0] = v4;
    static d;
    static #e = F0;
    static c = v12;
}
const v35 = new C14(v12, v13);
new C14(v35, v4);
class C38 {
    p(a40, a41, a42) {
        -1000000000000.0 >= a40;
        Math.acos();
    }
}
new C14(v13, v12);
new Uint8Array(7);
function f51() {
    const v52 = [];
    function F53(a55) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C56 extends F53 {
        valueOf(a58, a59, a60, a61) {
            this?.constructor;
        }
    }
    const v63 = new C56();
    const o68 = {
        [v52](a65, a66, a67) {
        },
    };
    v63.valueOf();
}
class C71 {
}
const v73 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
const v76 = new Int32Array(v73, 10);
class C77 {
    static #d = 10;
    constructor(a79, a80) {
        try {
            v73.#d += v76;
        } catch(e81) {
        }
    }
}
new Uint32Array(4);
new Float64Array(1549);
for (let v86 = 0; v86 < 5; v86++) {
    function f87() {
        const o91 = {
            "execution": "sync",
        };
        o91(o91);
        let v93;
        try { v93 = Symbol.bind(v86); } catch (e) {}
        return v93(Symbol, f87, C71, v86, v93);
    }
    f87();
    %OptimizeFunctionOnNextCall(f87);
}
