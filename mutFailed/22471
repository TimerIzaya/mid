[-4294967295];
const v1 = [16,-9007199254740990,21406,-42328,-52400,13,268435456,4294967296,255];
const v2 = [22877,7,-62974,8,65536,60010,-1449003470];
const v3 = [1081165061,167683303,127,7,-1039931386,9007199254740992,-32832,-1732182472,-1476937824,268435456];
const v4 = [47835,-2136549207,15,-9007199254740991,-5833,-12];
try { v4.push(v1); } catch (e) {}
const v6 = [2147483649,962439054,-1609913519,-730684058];
let v7;
try { v7 = v6.reduceRight(v6); } catch (e) {}
let v10 = 0.9474673817003101;
v10 >> v3;
v10--;
try { ("4294967295").link(v1); } catch (e) {}
let v16;
try { v16 = ("ignoreCase").bold(); } catch (e) {}
try { v16.split(-1.3738748839365929e+308, v16); } catch (e) {}
for (let v19 = 0; v19 < 25; v19++) {
    const v20 = [1073741824,1073741823,1376142744,1073741825];
    function f21(a22, a23, a24, a25) {
        arguments.length = arguments;
        function f27() {
            return a23;
        }
        const v29 = new Int8Array();
        try { v29.sort(v20); } catch (e) {}
        const v31 = v29.entries;
        try { v31(v31, v31); } catch (e) {}
        function f33() {
        }
        f33.name;
        try { f33(); } catch (e) {}
        Object.defineProperty(v29, "constructor", { configurable: true, enumerable: true, get: v2 });
        const v36 = [1840677197,-43868];
        6 % 6;
        const v39 = new a24(6);
        for (const v40 in v39) {
            let v41;
            try { v41 = v40.lastIndexOf(a24); } catch (e) {}
            v7 - v41;
            Object.defineProperty(v36, v40, { configurable: true, value: v40 });
        }
        v29.map(f27, v29, arguments);
        const v44 = a22?.set;
        try { new v44(Int8Array); } catch (e) {}
        try { v20["find"](); } catch (e) {}
        function F48(a50, a51, a52, a53) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F48();
        return 6;
    }
    for (let v55 = 0; v55 < 5; v55++) {
        v55 >>> v55;
        let v57 = f21();
        v57++;
    }
}
