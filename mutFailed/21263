const v3 = new Uint16Array(3225);
for (const v4 of v3) {
    const v6 = 9007199254740991 * v4;
    v6 | v6;
}
const v9 = new Uint32Array(2);
v9[1] = v9;
const v12 = new Uint32Array(3627);
let v13;
try { v13 = v12.at(Uint16Array); } catch (e) {}
let v16;
try { v16 = BigUint64Array.bind(v3); } catch (e) {}
new BigUint64Array(1000);
try { Int32Array.from(Int32Array); } catch (e) {}
new Int32Array();
class C22 extends Date {
}
let v23;
try { v23 = new v16(); } catch (e) {}
const v24 = new v23();
v23 >>> v24.getDay();
new BigUint64Array(5);
function f31() {
    return 2147483648n;
}
class C32 {
}
const v35 = new Int16Array(1512);
v35[374] = v35;
129 * 129;
new Uint32Array(129);
const v40 = [257];
[256,-4294967297,536870912,-8,255,-2670];
0 - 0;
v35[2147483648n] = C32;
new Date();
try { v13.getUTCMilliseconds(); } catch (e) {}
let v47 = -6.50438168344124;
v47 **= v47;
v13.length = 0;
const v48 = v40[0];
v48 + v48;
class C50 {
}
let v51;
try { v51 = Int32Array.toString(); } catch (e) {}
function f52() {
    const o54 = {
    };
    gc(o54);
}
const v56 = new C50();
const t52 = v56.constructor;
t52[v51.toPrimitive] = f52;
try { v48(...v40, v48); } catch (e) {}
