function f0() {
}
function f1(a2, a3) {
    a3.f <<= a2;
    const v7 = ~f0;
    Math.exp(a3);
    a2 * v7;
    Math.trunc(v7);
    return 3;
}
f0.toString = f1;
function f11() {
    const o26 = {
        "d": f0,
        m() {
            this[this] = this;
            [9264,-2147483647,4294967297,-2,-9223372036854775807,9007199254740990,65536];
            for (let i18 = (() => {
                    function f15() {
                        return f15;
                    }
                    const o17 = {
                        [f15]() {
                        },
                    };
                    return 0.8037056182165817;
                })();
                i18 < 10;
                i18++) {
            }
            [-14];
            return [536870887,226645837,6,399293378,-4957,129,8,-9223372036854775808,255];
        },
        "f": f0,
        [f0]: f0,
    };
    return o26;
}
const v27 = f11();
f11();
const v29 = f11();
v29.toString = f11;
function f30() {
    return f0;
}
5 * 5;
new Int16Array(5);
const v37 = new Int32Array(127);
v37.toString = f1;
v37[20] = v37;
function f39(a40, a41) {
    const o44 = {
        set b(a43) {
        },
    };
    return o44;
}
function f46(a47) {
    const v50 = new Array(3980);
    return v50;
}
Uint8Array.valueOf = f46;
Uint8Array.BYTES_PER_ELEMENT;
new Uint8Array(6);
new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
const v56 = [];
for (let v57 = 0; v57 < 5; v57++) {
}
Math.tan();
new Float32Array(2);
try { v56.slice(v29, v27); } catch (e) {}
const v64 = [v56];
try { v64.group(v64); } catch (e) {}
gc();
function F68(a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
}
function f72() {
    return Math.atan(Math);
}
F68.toString = f72;
Object.defineProperty(Uint8Array, Symbol.toPrimitive, { configurable: true, value: f0 });
function f78(a79, a80, a81, a82) {
    Uint8Array / a79;
    a80 < F68;
    const o88 = {
        "b": a79,
        ...a79,
        n(a86, a87) {
            return Uint8Array;
        },
    };
    return o88;
}
for (let v89 = 0; v89 < 625; v89++) {
    f78();
}
