const v0 = [63519,512,-1024,2,-9007199254740991,47797];
const v1 = [-256,1574998781,-1908148417,5,7,0,44092,4];
const v2 = [-1615768561,4,1324547835,9007199254740991,1312922596,1709824096,-1073741824,29178,-4294967297,-7];
const v6 = new Float32Array();
function f7(a8, a9, a10, a11) {
    f7--;
    const t5 = -1;
    t5[0] = a8;
    const v13 = a9 <= a9;
    const v15 = arguments.f;
    try { v15.constructor(v6, a10, -1, f7, -1, f7, a10); } catch (e) {}
    return v13;
}
const v20 = [];
function f21(a22) {
    v20[8];
    function f24(a25, a26, a27, a28) {
        class C30 extends Date {
        }
        const v31 = new C30();
        v31.getDay();
        return f24;
    }
    f24();
    return v1;
}
v20[Symbol.toPrimitive] = f21;
const v37 = ("p").localeCompare(v20);
const v38 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
v38[Symbol.isConcatSpreadable] = v0;
v38[Symbol.isConcatSpreadable] = v37;
Object.defineProperty(Array, "f", { enumerable: true, value: 6 });
class C44 extends Array {
}
const v45 = new C44();
v45.constructor = f7;
v45.concat(v38);
function f48(a49, a50) {
    const o65 = {
        ...a50,
        get d() {
            const v53 = new WeakSet();
            const o54 = {
            };
            try {
                Array.e = v53;
            } catch(e55) {
            }
            try {
                const o56 = {
                };
                o56.e = v53;
                o56.d = v53;
            } catch(e57) {
            }
            try {
                const o58 = {
                };
                v1.e = v53;
                a50.d = v53;
                Array.f = v53;
            } catch(e59) {
            }
            try {
                const o60 = {
                };
                o60.e = a50;
                ([-1300791131,33477,0,5,-48254,14,4294967295,545422795]).push;
                const o63 = {
                    __proto__: 6,
                };
                o60.d = v53;
                o60.h = v0;
            } catch(e64) {
            }
            return v53;
        },
    };
    return o65;
}
f48(v1, v0);
f48(60752n, v1);
f48(f48, v0);
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = -1;
    try {
        Array.f = a72;
    } catch(e73) {
    }
    try {
        this.e = 60752n;
    } catch(e74) {
    }
    try {
        this.h = 6;
    } catch(e75) {
    }
}
new F69(v1, -53186);
new F69(v2, -53186);
new F69(v0, -1);
function f80(a81) {
    return f7;
}
const v84 = [4096];
const o92 = {
    "arguments": v84,
    "type": "p",
    "type": "function",
    toString(a86, a87, a88) {
        return this;
    },
    set g(a90) {
    },
};
new Worker(f80, o92);
