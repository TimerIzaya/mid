const v1 = new Date();
64 + 64;
const v7 = new Date();
const v8 = v7?.setFullYear;
try { new v8(Date, 64, Date); } catch (e) {}
const v12 = new Uint32Array(9);
let v14 = 0;
for (let i = 0; i < 5; i++) {
    v14 < 4;
    v14++;
}
new Uint32Array(127);
105 - 105;
try { new Float64Array(Float64Array, v1, v7); } catch (e) {}
const v24 = new Float64Array(105);
v24[49];
let v28;
try { v28 = ("setYear").link(-2011108964); } catch (e) {}
try { v28.fontcolor(v12); } catch (e) {}
try { ("undefined").replaceAll(v1, v1); } catch (e) {}
try { ("undefined").blink(); } catch (e) {}
class C33 {
}
try { new C33(); } catch (e) {}
class C35 extends C33 {
    get f() {
        for (const v38 of this()) {
            new Uint16Array(257);
            const v44 = new Int16Array(1371);
            v44.lastIndexOf(1371, 1351);
        }
    }
}
C35.g = C35;
("stringify")[5];
const o49 = {
};
new Uint8ClampedArray([5.0]);
const v53 = ("stringify")?.substr;
try { C35(); } catch (e) {}
const v55 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v56 = new v55();
class C57 extends v55 {
    constructor(a59, a60, a61, a62) {
        if (v56) {
        }
    }
}
try { v53.toString(); } catch (e) {}
const v64 = new Uint8ClampedArray();
const v66 = new Float32Array();
for (let v67 = 0; v67 < 25; v67++) {
    Float32Array[6] = v64;
    v66[v67];
}
try { new v53(Date, v1); } catch (e) {}
