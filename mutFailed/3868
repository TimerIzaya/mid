const v1 = new Set();
class C2 extends Set {
    255 = v1;
    static c;
    static 5;
    constructor(a4) {
        super(v1);
        try {
            a4.h = this;
        } catch(e5) {
        }
    }
    static #f = v1;
}
const v6 = new C2(C2);
const v7 = new C2(C2);
const v8 = new C2(v7);
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a16;
        %VerifyType(v1);
        delete v7[C2];
        try {
            const o18 = {
            };
            new Set(o18);
        } catch(e20) {
        }
    } catch(e21) {
    }
    try {
        this.e = a15;
    } catch(e22) {
    }
    const o25 = {
        "maxByteLength": 536870889,
    };
    const v27 = new SharedArrayBuffer(0, o25);
    new DataView(v27);
    try {
        this.h = v6;
    } catch(e30) {
    }
}
new F12(Set, 62737n, -61040n);
const v32 = new F12(v8, F12, 1073741824n);
const v33 = new F12(Set, v1, -61040n);
class C35 {
}
const v36 = v32[v8];
C2[6] = v33;
%VerifyType(1073741824n);
v36[268435440] = -61040n;
%VerifyType(v1);
const t55 = (2136873598).constructor;
const v38 = new t55();
v38.toExponential(C35);
