const v0 = [];
v0[9] = v0;
const v1 = [0.28476528730508843,1.7976931348623157e+308,NaN,1e-15,-2.3090845296241946,1.2352133595900286e+308];
const v2 = [0.0,1000000000.0,0.0,0.34337285949847607,-2.2250738585072014e-308,5.0,0.0,2.220446049250313e-16,-5.0,-3.0];
const v3 = [-5.167287066226738,187899.65839131596,-1.0,-6.460501050741415e+307,982.3527660713228];
let v7 = [308747782];
const v8 = [v7,v0];
var c = v8;
v7 = v8;
let v9;
try {
const t0 = 2;
v9 = new t0(2, v0);
} catch (e) {}
v0[9] = 1537292658;
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a12;
    } catch(e14) {
    }
}
new F10(v2, 1537292658);
const v16 = new F10(v2, 2);
new F10(v16, v9);
const v18 = [308747782,v3,v1];
let v19 = [1073741825,4294967297,-1];
[56715];
[3,52595];
function f26(a27) {
    v16[a27];
    const v31 = new Int8Array(9);
    return v31;
}
Set.toString = f26;
const v32 = new Set();
try { v9(1537292658, 308747782, v16); } catch (e) {}
v19 = v18;
v2[Set];
v8[268435440];
"256" & "NTY";
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    function f41(a42, a43) {
        const v46 = new Float64Array(5);
        const v47 = new Float64Array(v46);
        v46 ** v47;
        return v7;
    }
    this[Symbol.toPrimitive] = f41;
    this.h = v32;
    try {
        const v51 = v32[this];
        try {
            new F37(v51);
        } catch(e53) {
        }
    } catch(e54) {
    }
}
new F37(Set, F37);
new F37();
