const v6 = [-4096,2147483647,2147483647,-4294967296,5];
[-4096,v6,-4294967296];
[-4294967296,v6];
new WeakMap();
const v11 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v14 = new Uint32Array();
const v16 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v17 = [601759695];
const v18 = [1073741824,1073741823,1376142744,1073741825];
function f20(a21, a22, a23, a24) {
    function f26() {
        let v29 = Float64Array;
        v29 = a22;
        b = v17;
        const v30 = v11.length;
        try {
            v18.forEach(a22);
        } catch(e32) {
        }
        const v33 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v35 = a22.toPrimitive;
        const o41 = {
            toString(a37, a38) {
                const v39 = a24 && a22;
                a37 *= v35;
                v39 <= v33;
            },
        };
        const o66 = {
            "c": -4294967297n,
            [522675525n](a44, a45) {
            },
            "c": v17,
            valueOf(a47, a48) {
            },
            [v30](a50) {
            },
            [-1]: 2684,
            1073741824: v14,
            "maxByteLength": a22,
            "b": 16,
            [-4294967297n](a52, a53, a54, a55) {
                class C57 extends Date {
                    static get c() {
                        eval();
                    }
                }
                for (let v61 = 0; v61 < 5; v61++) {
                    continue;
                }
            },
            "e": -4294967295,
            "e": v30,
            "arguments": v16,
            set b(a63) {
            },
            256: a24,
            m(a65) {
            },
            ...v17,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": 5,
            "type": v35,
            "type": "Vre",
            5: -4294967295,
            6: 5,
        };
    }
    f26();
    const v69 = new Int8Array();
    v69.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f26);
    let v74;
    try { v74 = v18["find"](..."find", a24, ...v17, ...v18, ...522675525n); } catch (e) {}
    v74 <= a23;
    return arguments;
}
for (let v76 = 0; v76 < 10; v76++) {
    f20();
}
%OptimizeFunctionOnNextCall(f20);
f20();
