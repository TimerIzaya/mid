function f0() {
}
function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { a4.valueOf(); } catch (e) {}
    const v7 = this.constructor;
    try { new v7(a4); } catch (e) {}
}
F2.arguments = F2;
const v10 = new Uint32Array(2267);
Symbol.prototype;
const v13 = Symbol.iterator;
v10[v13] = Uint32Array;
const o17 = {
    "execution": "sync",
    "type": "minor",
};
gc(o17);
let v19;
try { v19 = v10.indexOf(Uint32Array); } catch (e) {}
const v21 = 3 - 3;
v21 != v21;
const v24 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o25 = {
};
o25.g = o25;
o25.b = o25;
try { Proxy.toString(); } catch (e) {}
const v28 = new Proxy(v24, o25);
v28.length = v28;
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this?.constructor;
    try { new v34(v13, a32, a33); } catch (e) {}
    a32.h = a32;
    a33.a = a33;
    try {
        this.d = a32;
    } catch(e36) {
    }
    try {
        this.h = a31;
        let v37 = 10;
        v37--;
        const t43 = "a";
        t43[0] = "a";
        const v41 = ("object").__proto__;
        try { v41.charAt(a33); } catch (e) {}
        const t48 = "a";
        t48.__proto__ = v41;
    } catch(e43) {
    }
    try {
        this.c = a33;
    } catch(e44) {
    }
}
const v45 = new F29(f0, v24, gc);
const v46 = new F29(Proxy, v45, 2267);
new F29(v46, v46, v28);
const v48 = new Int16Array(3);
const v49 = v48[1];
v49 % v49;
const v52 = 255 + 255;
if (v19) {
    try {
        v48.g = v45;
    } catch(e54) {
    }
} else {
    o17.__proto__;
}
Int16Array.length;
class C57 {
}
C57.length = C57;
class C58 extends C57 {
}
const v59 = new C58();
try { Reflect.construct(Reflect, v52); } catch (e) {}
try { Reflect.construct(o25, 2267); } catch (e) {}
Reflect.isExtensible(v59);
const v64 = [Reflect,Reflect];
const v65 = new Int16Array(255);
try { v65.map(Proxy); } catch (e) {}
const v69 = -1977067681 - -1977067681;
v69 == v69;
-2n ^ -2n;
-53118n * -53118n;
class C80 {
    static #c = "bigint";
    static valueOf(a82) {
        return 2684;
        const v84 = [8];
        const v85 = [-1024,-2147483647,-37738,-2,21596,2147483649,9007199254740992,-2039218916];
        class C86 {
            static #f;
            static set f(a88) {
                a88(this, this, a88, v84);
            }
            constructor(a91) {
                this.e = v84;
            }
        }
        const v92 = new C86(v85);
        try { v92.reduceRight(4294967295, v85, C86); } catch (e) {}
        this.#c = "bigint";
    }
}
C80.d = C80;
C80.length = C80;
try {
    C58.f = 3;
} catch(e98) {
}
class C99 {
}
const v100 = C99?.constructor;
try { new v100(v24); } catch (e) {}
C99.length = C99;
-10 / -10;
const v104 = -10 >>> -10;
v104 >> v104;
function f108(a109) {
    const o119 = {
        ...a109,
        __proto__: v64,
        toString(a111) {
            function f113(a114, a115, a116, a117) {
            }
            f113(-4294967297n, f113);
        },
        6: 1073741823,
    };
    return 256;
}
const v121 = /(?<a>.)\k<a>?/vdimsy;
let v122;
try { v122 = v121(); } catch (e) {}
const v123 = [v122,v122,v122];
function f124() {
    const v125 = -v123;
    const v126 = v125 && v123;
    v126 / v126;
    v126[v125] &= v122;
    return v121;
}
f124();
const v132 = new Int32Array([64,-6,-60026,-9]);
try { v132.slice(Int32Array, f124); } catch (e) {}
376363416 + 376363416;
const v136 = 376363416 | 376363416;
v136 - v136;
class C138 {
    static [376363416];
    static {
        try { new this(); } catch (e) {}
        super.b = this;
        let {...v141} = this;
        v141[376363416];
    }
}
C138.name = C138;
C138.name = C138;
