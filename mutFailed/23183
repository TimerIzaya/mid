let v0 = -1000000000.0;
class C3 {
    #b = "FB";
    constructor(a5) {
        new Int32Array([-4563]);
        for (let v9 = 0; v9 < 5; v9++) {
            function f10() {
                try {
                    const t8 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                    t8.length >>>= -65536;
                } catch(e13) {
                }
                return v9;
            }
            f10();
            %OptimizeFunctionOnNextCall(f10);
        }
        try {
            a5.#b -= "FB";
        } catch(e15) {
        }
    }
    ["FB"];
    static 16;
    static #e;
    g;
}
const v16 = new C3(C3);
const v17 = new C3(C3);
const v18 = new C3("Ws");
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = C3;
    } catch(e25) {
    }
    function F28(a30) {
        if (!new.target) { throw 'must be called with new'; }
        function f31(a32) {
            const t39 = "FB";
            t39[7] = this;
        }
        Object.defineProperty(this, "d", { writable: true, configurable: true, enumerable: true, set: f31 });
        const v33 = this.constructor;
        try { v33("toString"); } catch (e) {}
        a30[5];
        this.d = "message";
    }
    new F28("toString");
}
v0++;
function f39(a40) {
    `b${Uint8ClampedArray}hpz${"FB"}-128`;
    return v18;
}
Uint8Array.constructor = f39;
Uint8Array.constructor;
for (let i47 = 0, i48 = 10;
    (() => {
        const v49 = i47 < i48;
        class C50 extends Date {
        }
        let v51;
        try { v51 = new C50(); } catch (e) {}
        v51.constructor = f39;
        v51.constructor;
        return v49;
    })();
    i47++) {
}
new F19(F19, v18, v17, v16);
new F19(v16, v16, v18, v18);
new F19(v0, v16, v17, v17);
function F61() {
    if (!new.target) { throw 'must be called with new'; }
}
const v66 = new Float32Array(3562);
v66.lastIndexOf(-128);
ReferenceError.captureStackTrace(F61);
