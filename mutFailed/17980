[15,536870888,-54724,5];
const v1 = [1,-9,-2,-2084304842];
let v2 = [1073741823,-867917634];
const v6 = new Int8Array(242);
const v7 = v6.fill(-65380);
function f8(a9) {
    const o25 = {
        "f": a9,
        get c() {
            class C11 {
                #h;
            }
            +-65537;
            v1 + a9;
            return this;
        },
        "e": v2,
        ...a9,
        ...a9,
        __proto__: v1,
        "a": -65380,
        "c": Int8Array,
        "b": v7,
        get d() {
            v2 **= a9;
            Math.asinh(-9223372036854775808);
            Math.fround(-9223372036854775808);
            (-9223372036854775808 ^ -5161) * -9223372036854775808;
            let v23 = this >>> a9;
            v23++;
            return this;
        },
    };
    return o25;
}
const v26 = f8(v1);
f8(v2);
f8(v1);
new Uint16Array(229);
class C34 {
}
const v35 = new v26();
v35[Symbol.unscopables];
class C39 extends Set {
    ["next"] = Set;
}
new Uint8ClampedArray(3534);
new Uint8ClampedArray(16);
const o46 = {
};
function f47(a48, a49) {
    const o50 = {
    };
    return o50;
}
function f51(a52) {
    ("p").localeCompare();
}
Object.defineProperty(f47, "g", { enumerable: true, set: f51 });
const v55 = f47();
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    a58.g = a58;
    const v60 = this.constructor;
    try { new v60(); } catch (e) {}
}
new F56(o46);
new F56(v55);
