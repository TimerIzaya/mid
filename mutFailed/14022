const v3 = [2,237513775,64,700106456,-2127435896,-8,7,1003504260,6];
const v4 = [-544968798,64,-2072538256];
const v5 = [10000,4294967297,1659502263,819984107];
try { v5.toLocaleString(); } catch (e) {}
class C7 {
    b;
    c = v5;
    constructor(a9, a10, a11, a12) {
        a11 ^ a11;
        v5.length;
    }
    a = -13n;
    1073741823;
    3361349989 = 3764n;
    d = 65536n;
    3;
    2147483649 = v4;
}
try { new C7(v5, 3764n, 65536n, v5); } catch (e) {}
const v16 = new C7(v3, v5, 65536n, 3764n);
v16.a = v16;
const v17 = new C7(v16, -13n, 65536n, 3764n);
v17.d = v17;
new C7(v4, v17, 3764n, 3764n);
/Mq(?:a+){0,0}/gudimy;
/a[a]/gums.dotAll;
const v22 = /J[a*b\xed\xa0\x80a(?=bbb|bb)cra\D?]/uy;
v22.c = v22;
const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v25 = new Uint32Array();
v25.BYTES_PER_ELEMENT;
let v27 = -4294967297n;
class C29 extends Map {
}
new C29();
function f31(a32, a33) {
    const o34 = {
    };
    return o34;
}
f31();
const v36 = v27--;
const v37 = [601759695];
const v38 = [1073741824,1073741823,1376142744,1073741825];
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = a41.push();
    const v46 = this.__defineGetter__;
    try { v46.call(v45); } catch (e) {}
}
function f48(a49, a50, a51, a52) {
    try { a49.findLastIndex(v22); } catch (e) {}
    const v54 = a49.constructor;
    let v55;
    try { v55 = v54(); } catch (e) {}
    const v56 = v55?.constructor;
    let v57;
    try { v57 = v56(f48, a49, v23, Uint32Array, v54); } catch (e) {}
    [1024,1024];
    class C60 {
    }
    const v61 = C60.__proto__;
    v61[v61];
    function f63() {
        const v65 = ("Vre").charAt(v57);
        const v66 = v65.blink();
        try { v66.fontcolor(a52); } catch (e) {}
        let v68;
        try { v68 = ("Vre").codePointAt(v23); } catch (e) {}
        const v69 = v68 - v68;
        const v70 = v68 % v68;
        const v71 = v69 < v69;
        const o75 = {
            n(a73, a74) {
                return v71;
            },
        };
        v70 - v70;
        let v77 = Float64Array;
        v77 = a50;
        b = v23;
        let v78 = v23.length;
        v78 - v78;
        v78++;
        try {
            v38.forEach(a50);
        } catch(e82) {
            e82.message = e82;
        }
        const o102 = {
            "c": v27,
            valueOf(a84, a85) {
                return v55;
            },
            1073741824: v25,
            [v27](a87, a88, a89, a90) {
                eval(v65);
                function F94(a96, a97, a98, a99) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v100 = this.constructor;
                    try { new v100(Date, Date, a96, Date); } catch (e) {}
                    a97[2147483648] = a97;
                    a99[2147483648] = a99;
                }
            },
        };
        o102[1073741824];
        return v38;
    }
    const v104 = f63();
    try { v104.indexOf(v5); } catch (e) {}
    const v107 = Array(v56);
    try { v107.findLast(); } catch (e) {}
    Int8Array.length = Int8Array;
    const v110 = Int8Array.of();
    const v111 = v110?.with;
    try { new v111(v55, v55); } catch (e) {}
    let v113;
    try { v113 = v110.every(v110, a49, v110, a50, Array); } catch (e) {}
    const v114 = new Int8Array(v113);
    const v116 = v114.buffer.slice();
    const v117 = v116.constructor;
    new Int16Array();
    ("Vre").constructor.raw();
    try { v117(v116, v113, v36, v110, a49); } catch (e) {}
    const v125 = new Int32Array(v117, v54, v54);
    v125.lastIndexOf(a49, a51);
    try { v38["find"](..."find", a52, ...v37, ...v38); } catch (e) {}
    return v27;
}
try { f48(v22, v16, v22, v22); } catch (e) {}
for (let v130 = 0; v130 < 10; v130++) {
    f48(v25);
}
%OptimizeFunctionOnNextCall(f48);
f48(Uint32Array);
