function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 11;
    } catch(e3) {
    }
    try {
        let v4 = 0;
        do {
            v4 ^= 11;
            v4++;
        } while (v4 < 0)
        this.f = 11;
    } catch(e8) {
    }
}
new F0(F0);
const v10 = new F0();
new F0();
let v19 = "4294967295";
[5,536870888,2147483648,54211,-2147483649];
const v22 = [-1073741824,-2147483649,-65536,4096,-256,-1073741824,268435441,5];
const v23 = [-8,542940630,-2147483649,6980,10];
function f24() {
    return v10;
}
const v26 = [1395900940,2147483649,38332,-9007199254740990,-2147483648];
const v27 = [65535,-4294967297];
try {
    v10.h = v22;
} catch(e28) {
}
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a32;
    } catch(e33) {
    }
    v19 = "number";
    var d = a31;
    1.0343450873457686e+308 + f24();
    const o38 = {
        "maxByteLength": 65536,
    };
    const v40 = new SharedArrayBuffer(8, o38);
    new Int32Array(v40, "number", 8, 8);
}
new F29(v27, 2.220446049250313e-16);
new F29(v26, -4.0);
new F29(v23, 1.0343450873457686e+308);
[-536870912];
Uint32Array[1] = 15;
new Float64Array(Uint32Array);
