function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        let v4 = Int32Array;
        v4--;
        return v4;
    }
    this.toString = f2;
    try {
        this.g = -59207;
    } catch(e7) {
    }
    try {
        this.e = -59207;
    } catch(e8) {
    }
}
let v9 = new F0();
function f10() {
    const v12 = new Uint32Array(Uint32Array, Uint32Array);
    return v12;
}
v9.toString = f10;
const v13 = new F0();
const v14 = new F0();
[642473.9123076752,-8.458095225299516];
const v16 = [4.0];
const v17 = [1000000.0,-587958.5591889453];
function f18() {
    return v14;
}
function f19(a20, a21) {
    const o25 = {
        [a20]: v9,
        "h": v16,
        "c": a20,
        "g": a21,
        ...v16,
        __proto__: a20,
        set e(a23) {
            this[1215702076] = this;
            super.e = this;
            let v24;
            try { v24 = new a23(v13, F0, a23, this, v14); } catch (e) {}
            v9 = v24;
        },
        ...v16,
        ...a21,
        "f": v17,
    };
    return o25;
}
f19(v9, v17);
f19(v14, v17);
f19(v13, v17);
new Set();
new Uint8Array(3178);
new Uint32Array(139);
new Int32Array(5);
const v40 = /F((((.).).).)[Ia*b]/v;
Math.toString = f19;
v40[Math] = -2.6653538746432233;
