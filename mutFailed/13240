const v3 = [1.7976931348623157e+308,-413892.0889157214,1.3273338355683957e+308];
const v4 = [2.6106058781874725e+307,1.0,285529.63794448716];
const v5 = [8.054972930120389,0.5017077090516519,-Infinity,-4.0,-6.00897007142827,1.0,-6.545477670141786e+307,-3.0,1000000000000.0,-1.4537848745596893e+308];
try { v5.copyWithin(v3, v5); } catch (e) {}
class C7 {
    static 6 = v4;
    static #o(a9, a10) {
    }
    [v4];
    constructor(a12, a13) {
        const v14 = /W(jy2)/udy;
        v14.dotAll = v14;
        const v15 = v14.flags;
        try { v15.lastIndexOf(a12); } catch (e) {}
        let v19 = v4[C7];
        v19 **= Uint8Array;
        function f20(a21, a22, a23, a24) {
            -a22;
            return a23;
        }
        for (let v26 = 0; v26 < 625; v26++) {
            v26 & v26;
            f20(Uint8Array, 2, v26);
            try {
                a12 &= -5.160144283511562e+307;
            } catch(e29) {
            }
        }
    }
    static 1014337901 = -338.7491556798858;
    4294967295;
    #n(a31, a32, a33, a34) {
    }
    static f;
    #toString(a36, a37, a38, a39) {
    }
    static [v4] = -5.160144283511562e+307;
    /*
    constructor(a41, a42, a43) {
        const v45 = new BigUint64Array();
        const o46 = {
            ...v45,
        };
        v4[1073741825] = a43;
        v4[12] = this;
        a42 ** super[a42];
    }
    */
    static 4294967296;
    3978 = -338.7491556798858;
    #f;
    228 = -338.7491556798858;
}
C7[4294967296] = C7;
const v49 = new C7(v4, v5, v3);
new C7(v49, v49, v5);
new C7(v4, v4, v4);
new Uint32Array(257);
new Uint8Array(6);
eval();
256n / 256n;
for (let [i65, i66] = (() => {
        10 % 10;
        return [256n, 10];
    })();
    (() => {
        i65 | i65;
        i66 !== i66;
        const v69 = i65 < i66;
        v69 || v69;
        return v69;
    })();
    ) {
}
new Float32Array(3912);
new Uint32Array();
class C79 {
}
class C80 {
}
const v81 = C80?.constructor;
try { new v81(C79); } catch (e) {}
const v83 = new C80();
Float32Array.e = Float32Array;
function f85(a86, a87, a88, a89) {
    const v90 = a87 >>> a87;
    const v91 = v90 >>> v90;
    v91 != v91;
    for (let v93 = 0; v93 < 5; v93++) {
        try { new C79(v83, v93, Float32Array, ...v93, a87); } catch (e) {}
    }
    const v96 = Math.max(a87);
    v96 - v96;
    return v91;
}
128 < 128;
new Date(128, 1000.0);
