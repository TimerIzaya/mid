const v0 = /IV?/gum;
function f1() {
    function f2(a3, a4) {
        var e = v0 ** v0;
        return v0;
    }
    return f2;
}
const v7 = Symbol.toPrimitive;
Object.defineProperty(v0, v7, { writable: true, configurable: true, enumerable: true, get: f1 });
/abc*/udi;
const v9 = /xyz??/vdy;
const v12 = new Int32Array(3670);
v12[3166];
let v14 = 257;
let v16;
try { v16 = Float64Array.bind(Float64Array); } catch (e) {}
v16[4] = v9;
const v17 = new Float64Array(v14);
const v20 = new Uint8ClampedArray(4);
v20.toString = f1;
v20[3] = v20;
v14 = 4;
!v16;
Float64Array[2] = v7;
Float64Array.name = Float64Array;
v9[1] = v12;
try { v17.lastIndexOf(4, 4); } catch (e) {}
v16?.[4];
v9 >= v0 ? v9 : v0;
const v30 = new Float64Array(Float64Array, Float64Array, Float64Array);
const v33 = new Uint8Array(1010);
try { v30.filter(v30); } catch (e) {}
const o35 = {
    268435439: Uint8Array,
    ...v33,
};
