function f4(a5, a6, a7, a8) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: 1 });
    return a6;
}
f4();
class C13 {
    static ["p"];
    constructor(a15, a16) {
        function f17(a18) {
            Object.defineProperty(a15, f17, { value: this[this]() * a15 });
            return Uint8Array;
        }
    }
    static toString(a34, a35, a36) {
        for (let v37 = 0; v37 < 32; v37++) {
            const v40 = new Uint16Array(Uint16Array);
            class C41 {
                #p(a43, a44, a45, a46) {
                }
                constructor(a48, a49) {
                    try {
                        v40.#p();
                    } catch(e51) {
                    }
                }
            }
            const t26 = "c";
            t26["p" + v37] = v37;
        }
        return 44991;
    }
    #b;
    ["2112875030"] = 44991;
}
new C13();
const v54 = new C13();
new v54();
[-600780.4789819089,20.24331293986097,0.07839408508355217,0.45653428846584265,1000000.0,-2.65148870867971,-684.6292038291926,508503.0624969993,-Infinity];
[-2.0630050483566587];
[-1000.0,-1000.0,0.09802923568072563];
for (let i62 = 0, i63 = 10;
    (() => {
        const v64 = i62 < i63;
        class C65 extends Date {
        }
        let v66;
        try { v66 = new C65(); } catch (e) {}
        v66.constructor;
        return v64;
    })();
    (() => {
        const v72 = new Uint16Array(129);
        v72.indexOf(129);
        function F74() {
            if (!new.target) { throw 'must be called with new'; }
            AggregateError.captureStackTrace(AggregateError);
        }
        i62++;
    })()) {
}
