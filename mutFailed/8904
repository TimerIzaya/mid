const v0 = [];
function f1() {
    try { new v0(v0); } catch (e) {}
    Int16Array[0] = 9223372036854775807;
    new Int16Array(Int16Array);
    return Int16Array;
}
Object.defineProperty(v0, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f1 });
const v8 = [v0,v0,v0,v0,v0];
v8[Symbol.toPrimitive] = f1;
const v11 = [v0,v0];
function f12(a13, a14) {
    Symbol[165] = a14;
    [1000000.0,1000000.0];
    return 1000000.0;
}
v11.toString = f12;
const v17 = [v8];
function f18(a19) {
    function f20() {
        return Symbol;
    }
    Object.defineProperty(a19, "toString", { configurable: true, get: f20 });
    const o34 = {
        get h() {
            const v22 = super.a;
            let v23;
            try { v23 = this.m(v22, v22); } catch (e) {}
            const v24 = ~v11;
            function f25(a26, a27, a28, a29) {
                const o30 = {
                    __proto__: v11,
                    16: a19,
                };
                return o30;
            }
            f25(f25(v23, a19, v17, v24), v11, v8, this);
            f25(v17, v17, v17, a19);
            Object.defineProperty(a19, "b", { writable: true, value: v22 });
            return v23;
        },
        [v11]: a19,
        "d": v17,
        [v8]: v0,
        "g": v8,
        "h": v11,
        ...v0,
    };
    o34[268435441];
    const v36 = v11.__proto__;
    Math.cos(o34);
    Math.log10(v36);
    Math.log10(65536);
    -1000000000000.0 - (65536 & -1000000000000.0);
    return o34;
}
f18.toString = f12;
let v45;
try { v45 = v8.includes(v17); } catch (e) {}
const v47 = Symbol.search;
v45[v47];
v47[f18] = v17;
f18(v11);
f18(v17);
const v51 = f18(v11);
class C55 extends f18 {
    get h() {
        class C57 {
            #e = -9223372036854775808;
            #f = v8;
        }
        const v58 = new C57();
        new C57();
        new C57();
        return v58;
    }
    static 5 = v11;
    static #d = v51;
    h;
}
function f64() {
    return 536870887n;
}
try { f64(); } catch (e) {}
new Map();
24560 ^ 24560;
function F78() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v86 = Array(19793);
    for (const v87 of v86) {
    }
    const v88 = [v86,v86,v86,v86];
    const v90 = new BigUint64Array();
    function f91(a92) {
        class C93 {
            static {
                const t98 = this.__proto__;
                t98();
            }
        }
        return Symbol;
    }
    v90.constructor = f91;
    v90.constructor;
    const v99 = [[v88,v88,v88]];
    v99.toSpliced(v99);
    v99 >= Uint16Array;
}
new F78();
new F78();
class C106 {
    constructor(a108) {
        try {
        } catch(e109) {
        }
        try {
        } catch(e110) {
        }
        for (const v111 of "bigint") {
        }
    }
}
C106.name;
class C113 extends C106 {
}
new C113();
const o115 = {
};
new C55();
new C55();
new C55();
function f119(a120, a121) {
}
function f122(a123, a124, a125, a126) {
    const o127 = {
    };
    return o127;
}
[-65537,-24143,-1293542190,14907,3476,-65083];
function F130(a132) {
    if (!new.target) { throw 'must be called with new'; }
    const o133 = {
        "preventExtensions": f122,
        "setPrototypeOf": f119,
    };
    new Proxy(this, o133);
    const v136 = this?.constructor;
    try { new v136(); } catch (e) {}
}
new F130();
new F130(Date);
new Float64Array();
Date();
