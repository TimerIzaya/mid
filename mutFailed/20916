function f0() {
    let v2 = "re";
    8 != 8;
    const o23 = {
        [f0](a6, a7) {
            a6 + a6;
            try { a7.toLocaleLowerCase(); } catch (e) {}
            let v11 = 8;
            let v12 = 256;
            Math.acos(v12);
            v12++;
            v2--;
            Math.floor(this);
            const v18 = v12 ** this;
            ++v11;
            const v20 = Math.max(v18);
            Number.isNaN(v20);
            return v20;
        },
    };
    let v24;
    try { v24 = o23.re(-4294967296, v2); } catch (e) {}
    v24++;
    return o23;
}
const v26 = f0();
f0();
const v29 = [f0()];
try { v29.toLocaleString(); } catch (e) {}
const v31 = [v29,v26];
const v32 = [f0];
v32[0];
false || false;
!(!false);
const v40 = new Float32Array(2);
v40[1];
new Float32Array(2);
const v46 = 1024 >> 1024;
v46 >> v46;
const v49 = new v26(1024);
v49[712];
new Int8Array(127);
for (const v54 in v32) {
    try { v54.italics(); } catch (e) {}
}
const v57 = v40?.Date;
try { new v57(Uint16Array, this, Float32Array, 127, 127, this, 1024); } catch (e) {}
const v59 = this.escape();
const v60 = [16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9];
v60.g = v60;
v60[2] = v60;
const v61 = v60.keys();
try { v61.next(); } catch (e) {}
const v63 = v61?.__defineSetter__;
try { new v63(f0, f0); } catch (e) {}
try { new v63(v31, v31); } catch (e) {}
function f66(a67, a68) {
    const o69 = {
        "g": v61,
    };
    return o69;
}
const v70 = f66?.apply;
try { new v70(v59, Float32Array); } catch (e) {}
%OptimizeFunctionOnNextCall(f66);
const v72 = f66();
v72.g = v72;
