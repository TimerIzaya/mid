class C3 {
    static p(a5) {
        let v4 = this;
        const v6 = v4[v4];
        v4++;
        -6 / (a5 - -9223372036854775808);
        Object.defineProperty(v6, v4, { configurable: true, value: 255 });
        return v6;
    }
    static #h = 255;
    [-6] = -9223372036854775808;
    static h;
    [255];
    static 1 = 255;
    g;
}
try { new C3(); } catch (e) {}
class C13 {
}
try { C13.bind(255); } catch (e) {}
const t20 = (2136873598).constructor;
const v16 = t20(7);
-v16;
v16.toExponential(C13);
new C3();
new C3();
const t26 = 255;
new t26();
const v24 = new Int32Array(47);
v24[42] = v24;
try { Float64Array(47, 255, Int32Array); } catch (e) {}
new Float64Array(2);
new Float64Array(129);
function f32() {
    /[a-zA-Z0-9]/gvisy;
    return f32;
}
for (let v34 = 0; v34 < 5; v34++) {
    v34 + v34;
    const v36 = f32();
    const v37 = v36?.constructor;
    try { new v37(v36); } catch (e) {}
    %OptimizeFunctionOnNextCall(f32);
}
