class C3 {
    e;
    constructor(a5, a6) {
        a5["fOM"] &= a6;
        new BigUint64Array(3480);
        new Int8Array(257);
        new Float32Array(5);
    }
    #b;
}
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 5;
}
new F16();
const v20 = new C3("-1200971429", "-1200971429");
new C3("fOM", v20);
new C3("fOM", "fOM");
class C24 extends Date {
}
function f26(a27, a28, a29, a30) {
    2147483648 ^ 2147483648;
    const v42 = new Int32Array(Symbol);
    v42[492];
    v42[3];
    return "find";
}
for (let v46 = 0; v46 < 10; v46++) {
    f26(v46, 522675525n, f26, v46);
}
const v54 = new Int32Array(129, 129, 129);
const o61 = {
    toString(a56, a57, a58) {
        try { this.toString(); } catch (e) {}
        [v54,v54,v54,v54,v54];
        const t34 = -52462;
        t34[256] = C24;
    },
};
for (let v63 = 0; v63 < 5; v63++) {
}
class C64 {
    constructor(a66, a67) {
        const v68 = this.constructor;
        try { new v68(); } catch (e) {}
        this.propertyIsEnumerable(C64);
    }
}
let v72 = -2.220446049250313e-16;
v72 | v72;
for (let v74 = 0; v74 < 5; v74++) {
    function f75() {
        let v77 = ("Vre").codePointAt(v74);
        v77 ^ v77--;
        return f75;
    }
    f75();
    %OptimizeFunctionOnNextCall(f75);
}
class C81 {
    constructor(a83, a84) {
        Math.acos(v72);
        v72++;
    }
}
const v88 = new C81();
([12]).toLocaleString();
const v91 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f92(a93) {
    const v94 = v91.constructor;
    v94(v94);
    a93.constructor.$2;
}
const v98 = v88.constructor;
new v98(v98, v72, C81);
