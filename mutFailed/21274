const v2 = new Int8Array(129);
const v6 = new BigUint64Array(16);
try { Float32Array.apply(16, v6); } catch (e) {}
const v10 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f11(a12, a13, a14, a15) {
    const v16 = /(?:a*)+q(?<a>.)/guds;
    function f17(a18) {
        const v19 = v10.constructor;
        try { v19(); } catch (e) {}
        a18.constructor;
        15312 | [Infinity,5.072687501529128e+307,0.4093098171074484,4.0,-4.442441003635313e+306,843998.4933901483,-714.8973177887364];
    }
    for (let [i30, i31] = (() => {
            function f26(a27, a28) {
                return f26;
            }
            return [0, 10];
        })();
        i30 < i31;
        i31--) {
        for (let v38 = 0; v38 < 25; v38++) {
            f17(v16);
        }
    }
    function f40() {
        let v41 = Float64Array;
        v41 = a13;
        return a13;
    }
    return f40;
}
f11();
const v43 = new v6(2);
const v44 = [];
function f45(a46, a47, a48) {
    v44.copyWithin();
    try {
        f45(-268435456, 0.6683462416314783, [-268435456]);
    } catch(e54) {
    }
    const v55 = v6 >> -268435456;
    v55 >> v6;
    return -v55;
}
new Int8Array(0);
const v61 = [2];
const v62 = [-729574.8782662717,NaN,NaN,1.4631545214551755e+308,771.103726894627,54.21198698191802];
const v63 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
[4294967297,9007199254740990,-536870912,-2,-39056,1073741823,-4096,536870889];
class C65 {
    1073741823 = f45;
    static #d;
    6;
    static 1224847725;
    [v62];
}
const v66 = new C65();
v63[4294967295] = v66;
[v61,v2,v61];
[129,129,v43];
class C69 {
}
if (Float32Array) {
    try { v61.p(); } catch (e) {}
    for (let v71 = 0; v71 < 10; v71++) {
    }
    function F72(a74, a75, a76, a77) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F72(v61, v61, C69, 129);
}
const t71 = C69.constructor;
t71();
function F81() {
    if (!new.target) { throw 'must be called with new'; }
}
class C83 extends F81 {
}
new C83();
