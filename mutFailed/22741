function f0() {
}
let v5 = -6.37437380272763;
new WeakMap();
function f9() {
    return 198776316;
}
const v11 = new WeakMap();
function f12(a13, a14) {
    const o20 = {
        "b": WeakMap,
        valueOf(a16, a17) {
            super[0.4464967113614948];
            v5 = 0.4464967113614948;
            const o19 = {
                __proto__: v11,
                [WeakMap]: a16,
                [this]: this,
            };
            return a16;
        },
        "g": 1.4449410486037293e+308,
        "e": 5359,
    };
    return a13;
}
f12(v5, 1.4449410486037293e+308);
f12(v5, 0.4464967113614948);
f12(v5, v5);
class C25 extends Map {
}
const v26 = new C25();
const v27 = new C25();
const v28 = new C25();
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v34 = new Uint32Array(5);
let v35 = -4294967297n;
v35--;
const v37 = [601759695];
const v38 = [1073741824,1073741823,1376142744,1073741825];
function f40(a41, a42, a43, a44) {
    try { a41.toLocaleString(); } catch (e) {}
    const v46 = a41?.constructor;
    let v47;
    try { v47 = v46(); } catch (e) {}
    try { v46(); } catch (e) {}
    const v50 = arguments.length;
    Object.defineProperty(v26, "e", { configurable: true, enumerable: true, value: f40 });
    const v52 = v27["entries"](a43, ...v28, BigUint64Array, ..."entries", a42, v50);
    const v54 = Symbol.toStringTag;
    v27[v54] = v54;
    function f55() {
        let v57;
        try { v57 = ("Vre").charAt(4096); } catch (e) {}
        try { v57.lastIndexOf(f55); } catch (e) {}
        let v59;
        try { v59 = ("Vre").codePointAt(v32); } catch (e) {}
        v59 - v59;
        v59 ^ v59;
        let v62 = Float64Array;
        v62 = a42;
        let v63 = v32.length;
        v63++;
        try {
            v38.forEach(a42);
        } catch(e66) {
            e66.stack = e66;
        }
        const o77 = {
            "c": v35,
            "c": v37,
            valueOf(a68, a69) {
                return a69;
            },
            1073741824: WeakMap,
            [v35](a71, a72, a73, a74) {
                eval(v47);
            },
            "arguments": 5,
            256: v62,
        };
        o77[256];
    }
    f55();
    const v81 = Array();
    let v82;
    try { v82 = v81.findLast(f40, v34); } catch (e) {}
    v81.unshift("entries", v52, "entries", v82);
    let v85;
    try { v85 = Int8Array.of(); } catch (e) {}
    try { v85.join(v46); } catch (e) {}
    const v87 = new Int8Array(v37);
    v87.c = v87;
    const v88 = v87.buffer;
    v88.maxByteLength;
    const v90 = v88.slice(v46);
    try { Int32Array(v90, arguments, v35); } catch (e) {}
    function f93(a94, a95, a96, a97) {
        return v26;
    }
    const v98 = new Int32Array();
    const v99 = v98[3];
    v99 + v99;
    for (let v101 = 0; v101 < 5; v101++) {
    }
    %OptimizeFunctionOnNextCall(f55);
    try { v38["find"](..."find", a44, ...v37, ...v38, ...522675525n); } catch (e) {}
    return v46;
}
for (let v104 = 0; v104 < 10; v104++) {
    C25(v34);
}
%OptimizeFunctionOnNextCall(f40);
f40();
