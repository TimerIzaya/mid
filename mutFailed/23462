new Float64Array(6);
const v5 = new Uint8ClampedArray(4096);
new eval(10);
new Uint16Array(2711);
new BigUint64Array(129, Uint16Array, -536870912n, v5);
new Int16Array(1024);
/5*/gi;
const v23 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
function f27(a28, a29, a30, a31) {
    function f33() {
        const o50 = {
            "c": -4294967297n,
            [522675525n](a38, a39) {
            },
            "c": v24,
            valueOf(a41, a42) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v23,
            ...v24,
            "type": "Vre",
            ..."Vre",
            valueOf(a44, a45) {
            },
            ..."Vre",
            128: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a47, a48, a49) {
                return a28;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f33(a31, arguments, a30);
    const v53 = new Int8Array();
    v53.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f33);
    let v58;
    try { v58 = v25["find"](..."find", a31, ...v24, ...v25, ...522675525n); } catch (e) {}
    v58 <= a30;
    return arguments;
}
const v62 = new BigInt64Array();
const v66 = new BigUint64Array();
for (let v67 = 0; v67 < 10; v67++) {
    f27(v24, v67, false);
}
%OptimizeFunctionOnNextCall(f27);
f27(v66, 3331, v62, 3216);
