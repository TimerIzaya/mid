const v0 = [];
let v1 = /a?w*/usy;
function f2() {
    v0.length;
    function f4(a5) {
    }
    return v0;
}
v1.toString = f2;
const v6 = /foo(?<=bar)baz/gims;
const v7 = /C(?:a{5,1000000}){3,1000000}/udisy;
v7.unicodeSets;
class C9 {
    constructor(a11, a12) {
        try { a11.compile(a11, v7); } catch (e) {}
        v1 >>= a12;
        try { new v7(v7, a11); } catch (e) {}
    }
    a = v0;
    n(a16, a17) {
        try {
            v7.f = a17;
        } catch(e18) {
        }
        v1 ^ a17;
        return a17;
    }
    static c = v0;
}
const v20 = new C9(v6, v1);
v20.a;
new C9(v6, v20);
new C9(v6, v7);
Int16Array[2] = v7;
const v26 = new Int16Array(15);
v26[11];
const v30 = new Int16Array(250);
function f31() {
    new f2();
    return 250;
}
v30.constructor = f31;
const v34 = v30?.constructor;
try { new v34(Int16Array, 250, v7); } catch (e) {}
new Float64Array(8);
function F39(a41) {
    if (!new.target) { throw 'must be called with new'; }
}
F39.prototype = F39;
