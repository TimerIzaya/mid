function f3() {
    return 268435456n;
}
let v4 = [f3,268435456n,f3,7n];
let v5 = [v4,f3,7n];
v5[Symbol.toPrimitive] = f3;
let v8 = [7n,f3,7n,v5];
v8[Symbol.toPrimitive] = Symbol;
function f11() {
    return 7n;
}
new BigInt64Array(5);
new Int8Array();
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v24 = this.constructor;
    try { new v24(); } catch (e) {}
}
new F18();
v5 = v4;
v8[9];
v4 *= v8;
v5.__proto__;
v5[48660n] = v8;
5 < 4;
function f32() {
    for (let i34 = 0, i35 = 3;
        (() => {
            class C36 extends f32 {
            }
            const v37 = [3.0,NaN,-1000000000.0,595974.7516182172,-1e-15,0.6881218471964052];
            v37[16] = v37;
            v37[16] = 2.220446049250313e-16;
            delete v37[2.0];
            return i34 < 3;
        })();
        i34 % i34, i34++) {
    }
    return f32;
}
f32();
new Int8Array(4);
new BigInt64Array(2358);
function f55(a56) {
    class C57 {
    }
    return C57.bind();
    const v61 = new BigInt64Array(4046);
    [,...v8] = v61;
    const o62 = {
        ...a56,
    };
    return o62;
}
("toStringTag")[4096];
f3();
%PrepareFunctionForOptimization(f3);
f3();
f3();
%OptimizeMaglevOnNextCall(f3);
f3();
class C68 extends f55 {
    ["15036"];
}
const v69 = new C68();
for (const v70 in v69) {
}
class C71 {
    static 5;
    9;
}
new C71();
new C71();
new C71();
