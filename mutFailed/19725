const t0 = "valueOf";
new t0(2974);
new Uint16Array(1703);
new Uint8Array(1721);
class C12 {
}
function f13() {
    class C14 {
        static {
            for (const v17 in this) {
            }
        }
    }
    return Uint8Array;
}
C12[Symbol.toPrimitive] = f13;
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v22 = new F20();
const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v25 = 9007199254740991n * 9007199254740991n;
let v26 = 0;
while (v26 < 5) {
    const t24 = "f8d";
    t24[1000] &&= 2974;
    v26++;
}
for (let v30 = 0; v30 < 5; v30++) {
    function f31() {
        for (let v32 = 0; v32 < 5; v32++) {
            try { ("p").substring(C12, C12); } catch (e) {}
        }
        try {
            v23.forEach();
        } catch(e36) {
            e36.a = "valueOf";
            v30 == 1703;
            [-2,64,4,257];
            let v39 = [-16,29862,1024,-9007199254740991,1940207004,-1,-1024,-1,1000,1660632748];
            [2147483648,536870889,-1764755847,-9223372036854775808,-29464,1333674561,-6,6,11];
            v39 >>>= v39;
            e36.a = v22;
            e36.a = e36;
        }
        const t45 = "valueOf";
        t45[1721] ^= 1721;
        for (let v41 = 0; v41 < 32; v41++) {
            v22["p" + v41] = v41;
        }
        const t50 = ("1073741824").constructor;
        t50(v25);
        return "1073741824";
    }
    f31();
    %OptimizeFunctionOnNextCall(f31);
}
