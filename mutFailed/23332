let v2 = new JSON(8);
const v5 = new BigUint64Array(9007199254740990);
const v8 = new Float32Array(4096);
function f9(a10, a11) {
    v2++;
    if (!(a11++)) {
        new Int8Array(255);
        new Float32Array(2415, a10, 9007199254740990, Float32Array);
        new Uint8ClampedArray(64);
    } else {
        v5[Symbol.unscopables];
    }
    const o34 = {
        [a10](a27, a28, a29, a30) {
            try { a28(this, a28, v2, a10, v5); } catch (e) {}
            this[1424] = v2;
            const v32 = super.d;
            try { new v8(4096, v32, 8, a30); } catch (e) {}
            return 8;
        },
        "b": v8,
        "a": 8,
        65535: v8,
    };
    return o34;
}
f9(9007199254740990, 4096);
f9(9007199254740990, 9007199254740990)[65535];
const v38 = f9(9007199254740990, 4096);
let v39 = 2;
v39--;
const v42 = new Uint8Array(v39, v39, v39);
Symbol.hasInstance = Symbol;
Symbol.for(Symbol.toPrimitive.description);
function f48(a49, a50, a51, a52) {
    try { new a49(a49, a52, v38); } catch (e) {}
    const v54 = a50 * a50;
    v54 / v54;
    const o59 = {
        "b": a49,
        "c": a52,
        ...v42,
        n(a57, a58) {
        },
    };
    return o59;
}
for (let v60 = 0; v60 < 625; v60++) {
    const v61 = f48(Uint8Array, v39);
    v61[1] = v61;
}
