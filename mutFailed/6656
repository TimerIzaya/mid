class C3 {
    static set d(a5) {
        try {
            a5.__proto__ = "8";
        } catch(e6) {
        }
        delete this[0.5849294030906735];
        const o9 = {
            "type": "8",
        };
        function f10(a11, a12, a13, a14) {
            a12 === a12;
        }
        o9.constructor = f10;
    }
    0;
    static a = -2.460789517936468;
    static ["8"] = 0.5849294030906735;
}
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v22 = Array(19793);
        for (const v23 of v22) {
        }
        const v24 = [v22,v22,v22,v22,v22];
        [[v24,v24,v24]];
    } catch(e28) {
        [e28,this];
    }
}
const v30 = new C3();
const v31 = new C3();
const v32 = new C3();
function f33() {
    const v35 = [536870912n,536870912n,536870912n,536870912n,536870912n];
    try { v35.find(536870912n); } catch (e) {}
    return v35;
}
v32.constructor = f33;
new WeakMap();
function F39(a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v31;
    try {
        this.g = a42;
    } catch(e44) {
    }
    try {
        this.f = a41;
        try {
            const o45 = {
            };
            const t53 = null;
            t53.valueOf = o45;
        } catch(e47) {
        }
    } catch(e48) {
        const v51 = new Float64Array(200);
        for (const v52 in v51) {
        }
    }
}
new F39(C3, v30, "8");
new F39(C3, C3, v31);
new F39(v31, v30, C3);
const v58 = Array(8);
function f59() {
    return f59;
}
const v60 = f59?.apply;
try { v60(8, v58); } catch (e) {}
const v63 = new Map();
try { v63.set(Array, f59); } catch (e) {}
function f65() {
    return v63;
}
try { f65(); } catch (e) {}
const v67 = /(?=.)ha\nb\bc/gum;
const v69 = v32.constructor;
try { new v69(3, f65, v32, v32); } catch (e) {}
function f71() {
    const v75 = Symbol.toPrimitive.description.codePointAt();
    return v75 >> v75;
}
class C77 extends f65 {
    static #c;
    static 6;
    #n(a79) {
        a79 = this;
        a79.e >>>= 3;
        const o83 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o83);
        return this;
    }
    static {
        function f86() {
            return this;
        }
        Object.defineProperty(this, "m", { writable: true, configurable: true, get: f86 });
        const v87 = v58.length;
        try { Symbol.keyFor(Symbol); } catch (e) {}
        function F90(a92) {
            if (!new.target) { throw 'must be called with new'; }
            this.constructor.arguments;
        }
        try { this.m(this, v87, Map, v67); } catch (e) {}
    }
}
