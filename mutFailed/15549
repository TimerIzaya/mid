for (let v5 = 0; v5 < 25; v5++) {
    const v6 = [601759695];
    const v7 = [1073741824,1073741823,1376142744,1073741825];
    function f8(a9, a10, a11, a12) {
        function f13() {
            return a11;
        }
        try { v7["find"](..."find", a12, ...v6); } catch (e) {}
        BigInt64Array.constructor.call(f13);
        return a11;
    }
    for (let v19 = 0; v19 < 10; v19++) {
        f8();
    }
}
class C22 {
    static #f;
    static {
        super[this] = this;
        try {
            this.#f &= 1559542942;
        } catch(e24) {
        }
    }
    [-2];
    static 2;
    static {
        const v26 = this.name;
        function F30(a32, a33) {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = this?.constructor;
            try { new v34(0.29489550717955537, a32); } catch (e) {}
            try { this.constructor(0.6822080711934364, this); } catch (e) {}
            try {
                this.f = 3.0;
            } catch(e37) {
            }
        }
        this.toString().lastIndexOf(v26);
    }
    3 = 0.09573719926111446;
    set h(a41) {
    }
    4259938026;
    #b;
    [1000000.0] = C22;
    #d;
    [-10];
    c = 1559542942;
    static #g = -2;
    n(a43, a44) {
    }
    #g;
    valueOf(a46) {
        const o50 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o50);
        return gc;
    }
    #e;
}
const v52 = /A/dims;
/(0No5oaI)/gudi;
/ia+/gumsy;
const v55 = delete v52?.ignoreCase;
try { v55(-10, v52, 1559542942, 1000000.0); } catch (e) {}
const v57 = new C22(0.09573719926111446, -797690.0792477814);
const v58 = new C22();
~(536870912n << 536870912n);
Math.clz32();
const v64 = new C22();
function F65(a67, a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a68;
    } catch(e71) {
    }
    try {
        const v72 = [601759695];
        function f73(a74, a75, a76, a77) {
            arguments[2] = arguments;
            function f79() {
                const o80 = {
                    __proto__: a76,
                };
                o80.f;
                o80[0] = o80;
                return o80.valueOf(a77);
            }
            f79();
            %OptimizeFunctionOnNextCall(f79);
            return a75;
        }
        for (let v84 = 0; v84 < 5; v84++) {
            f73(v72, v84, v84);
        }
        this.e = C22;
    } catch(e86) {
    }
}
const v87 = new F65(-10, v57, 1000000.0, C22);
const v88 = new F65(-10, v58, 0.09573719926111446, F65, -797690.0792477814, v87);
new F65(-2, v64, -797690.0792477814, v57, -2, -797690.0792477814, v88);
const o91 = {
    __proto__: Set,
    ...Set,
};
