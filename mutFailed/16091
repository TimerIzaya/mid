const v0 = [-2,2014596364,-7,12];
function f1(a2, a3) {
    v0.length **= a3;
    const v4 = [1073741824,1073741823,1376142744,1073741825];
    const v8 = BigUint64Array * 536870887;
    const v10 = ~(v8 ** v8);
    const v11 = new Int8Array(v4);
    let v12;
    try { v12 = v11.includes(v10); } catch (e) {}
    return v12;
}
v0.toString = f1;
const v13 = [1073741823,-7,-12,268435440];
const v14 = [-610339550,2,51478,-4294967297,9007199254740990,65536,-65536,-11];
class C15 {
    static #d;
    [v0];
    static {
        function f17(a18, a19) {
            for (let v20 = 0; v20 < 5; v20++) {
            }
            return C15;
        }
        this.toString = f17;
        try { this.toString(); } catch (e) {}
        try {
            v0.g = this;
        } catch(e22) {
        }
    }
    static d = v0;
    d = v14;
    static 127 = v0;
    #e;
}
Object.defineProperty(C15, "h", { enumerable: true, value: v0 });
try { new C15(); } catch (e) {}
new C15();
const v25 = new C15();
const v26 = new C15();
v26.d;
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    a30.h = a33;
    const v34 = this?.__defineGetter__;
    try { new v34(v25, a33); } catch (e) {}
    a32.h = a32;
    try {
        this.g = a31;
    } catch(e36) {
    }
    try {
        this.e = a30;
    } catch(e37) {
    }
    try {
        this.h = v26;
    } catch(e38) {
    }
}
const v39 = new F28(v13, v26, v26, v25);
new F28(v25, C15, C15, v39);
const v41 = new F28(C15, C15, v25, v0);
function f42() {
    return v41;
}
try { f42.bind(F28); } catch (e) {}
-2.2250738585072014e-308 - -2.2250738585072014e-308;
const v49 = ("toDateString")[9].toUpperCase().match();
for (let v50 = 0; v50 < 25; v50++) {
    const v51 = [601759695];
    try { v51.reduce(f42); } catch (e) {}
    const v53 = [1073741824,1073741823,1376142744,1073741825];
    function f54(a55, a56, a57, a58) {
        let [] = v53;
        ("find").normalize().link(v49);
        const v62 = ("find").toLocaleLowerCase();
        v62 == v62;
        try { v53["find"]("find", a58, v51); } catch (e) {}
    }
    for (let v65 = 0; v65 < 10; v65++) {
    }
}
