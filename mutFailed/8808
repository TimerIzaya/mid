const v2 = new Int8Array(Int8Array);
const v5 = new Uint8ClampedArray(1024);
let v6;
try {
const t0 = 1024;
v6 = t0(Int8Array, v5, v5, v2);
} catch (e) {}
const v7 = v2 instanceof v6;
try { v6.valueOf(1024, v7, v7); } catch (e) {}
const v12 = 62123 * -1.0;
!Int8Array & 62123;
Math.imul(-1.0, v12);
Math.round(v12);
-1.0 >>> Int8Array;
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        BigInt64Array.a = 435;
    } catch(e25) {
    }
    try {
        this.h = Uint8ClampedArray;
    } catch(e26) {
    }
    try {
        this.g = BigInt64Array;
    } catch(e27) {
    }
}
const v28 = new F20(435, F20, 435);
new F20(1024, 40, 40);
new F20(435, 1024, 40);
new BigInt64Array(v28);
const v37 = Symbol.toPrimitive;
const o42 = {
    [v37]() {
        try {
            Symbol("e");
        } catch(e41) {
        }
        return 2.220446049250313e-16;
    },
};
const v45 = new Int16Array(2);
v45.lastIndexOf(2.220446049250313e-16);
