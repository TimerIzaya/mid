class C2 extends Set {
}
const t2 = null;
t2.valueOf = C2;
const v6 = new Uint8ClampedArray(512);
new BigInt64Array(3321);
const t6 = ("-1723624938").slice(9);
t6.f = 3;
class C15 {
}
const v16 = new C15();
class C17 extends C15 {
    constructor(a19, a20, a21, a22) {
        if (v16) {
        }
    }
}
new Float64Array(4);
class C25 {
    #a;
    constructor(a27, a28, a29, a30) {
        function f31() {
            function f33(a34) {
            }
            this.onmessage = f33;
            a29 /= a29;
        }
        [];
        const o38 = {
            "type": "function",
        };
        new Worker(f31, o38);
    }
    static #e;
    static #valueOf(a41, a42, a43) {
        this >> 4;
        super[BigInt64Array];
        try {
            this.#e **= v6;
        } catch(e46) {
        }
        return 3321;
    }
    static 9;
    0 = 3321;
    [-2];
}
new C25();
function F49(a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 145253519;
    } catch(e52) {
    }
}
new C25();
new C25();
Math.cos(-1073741824);
(4).reduce;
for (let v60 = 0; v60 < 5; v60++) {
    %OptimizeFunctionOnNextCall(v60);
}
function F63(a65) {
    if (!new.target) { throw 'must be called with new'; }
    a65 | a65;
    const v67 = this.constructor;
    v67.caller = v67;
    try { new v67(3n); } catch (e) {}
}
new F63(349865170n);
new F63(349865170n);
