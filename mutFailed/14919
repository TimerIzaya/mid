const v1 = new WeakMap();
let v3 = "257";
let v6;
try { v6 = ("-46145").fixed(); } catch (e) {}
const v7 = v6[6];
function f8() {
    const v12 = -14 + (v7 - "-46145");
    Math.max(v12);
    Math.expm1(-14);
    Math.min(v3-- % v12);
    return true;
}
129 + 129;
~-1024;
function f23(a24, a25, a26) {
    ~a24;
    a25 - a25;
    a26 !== a26;
    let v30 = a25 * a25;
    v30--;
    a26 >>> a26;
    const o48 = {
        [a24]: true,
        913: f8,
        4294967296: 129,
        ..."-46145",
        ["-46145"]: a25,
        "f": f8,
        [a25](a34, a35, a36) {
            const o37 = {
            };
            try {
                o37.a = a36;
            } catch(e38) {
            }
            try {
                const o39 = {
                };
                o39.a = a36;
                o39.h = "16";
            } catch(e40) {
            }
            try {
                const o41 = {
                };
                o41.a = a36;
                o41.h = "16";
                o41.f = a34;
            } catch(e42) {
            }
            try {
                const o43 = {
                };
                o43.a = a36;
                try {
                    super.n(a24, o43, a35, a35, 9007199254740992);
                } catch(e45) {
                }
                try { new v6(a26, o43, v3); } catch (e) {}
                o43.h = "16";
                o43.f = a35;
            } catch(e47) {
            }
            return v1;
        },
    };
    o48[3] = o48;
    return o48;
}
f23.g = f23;
const v49 = f23(-1024, -1024, 129);
try { v49.f(); } catch (e) {}
const v51 = f23(9007199254740992, -1024, -1024);
v51[3] = v51;
f23(-1024, 9007199254740992, 9007199254740992);
class C53 {
    static {
        try { new this(); } catch (e) {}
    }
}
const v56 = C53.name;
const o58 = {
};
o58.b = o58;
class C59 {
    constructor(a61, a62) {
        const v63 = this?.constructor;
        try { new v63(129, 129); } catch (e) {}
        !false;
    }
}
C59.length;
const v68 = C59?.toString;
try { v68.toString(); } catch (e) {}
try { new v68(); } catch (e) {}
const v71 = new C59();
v71.b = v71;
v71 << -1557853178;
("object")[2];
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F76;
    try {
        this.b = "function";
    } catch(e80) {
    }
    try {
        this.h = "function";
    } catch(e81) {
    }
}
const v82 = new F76();
const v83 = v82?.constructor;
try { new v83(o58, v82); } catch (e) {}
const v85 = new F76();
const v86 = new F76("function", v82);
const v89 = new Float32Array();
class C90 {
    set d(a92) {
    }
    static #m(a94, a95, a96) {
    }
    static {
        this.d = this;
        for (let v98 = 0; v98 < 10; v98++) {
            function f99() {
                return v98;
            }
            const v100 = [601759695];
            try { v100.push("-46145"); } catch (e) {}
            const v102 = [1073741824,1073741823,1376142744,1073741825];
            try { v102.map(v100); } catch (e) {}
            function f105(a106, a107, a108, a109) {
                arguments.length = arguments;
                function f111() {
                    return a106;
                }
                f99();
                const v114 = new Int8Array();
                let v115;
                try { v115 = v114.entries(); } catch (e) {}
                function f116(a117, a118) {
                    return a117;
                }
                [[this,v82]];
                const v121 = [522675525n,arguments,C59,v85,v115];
                this.d &&= 4096;
                v56 in v121;
                const v123 = f116(v102, v89);
                try { v123.find(this); } catch (e) {}
                const v125 = f116(v123);
                try { v125.with(arguments, arguments); } catch (e) {}
                const v127 = v114.buffer;
                try { v127.slice(v86, v86); } catch (e) {}
                v127.slice(2147483648);
                %OptimizeFunctionOnNextCall(f111);
                let v132;
                try { v132 = v102["find"](..."find", a109, ...v100, ...v102, ...522675525n); } catch (e) {}
                v132 <= a108;
                return arguments;
            }
            try { new f105(v100, this, v85, v100); } catch (e) {}
            for (let v135 = 0; v135 < 10; v135++) {
                f105();
            }
        }
    }
}
