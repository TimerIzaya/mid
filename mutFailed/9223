const v0 = [2.105902649020372,0.5018427173594991,-910.3279513558591,-2.0,-2.220446049250313e-16,-708.0838374384107,-1000000000.0,-548.9492624012014,0.3713012397445308,5.0];
[965.9365382939318,1.5525068903593633e+308,-2.0,1e-15,-1.0,2.2250738585072014e-308];
for (const v5 of Array(19793)) {
}
[-2.0,-878607.2929989995,-950964.7395080209,974101.7810410315,-98.8025702529842,3.0,-2.0,0.023798086624572168,902323.7035201716,1.9145561792335393];
const v7 = [255,268435440,-1824448843,50548,11878,-2147483649,2147483649,16];
let v8 = [1684950324,-45837,-16,44661,9007199254740991,10000,129,5748];
const v9 = [-230178910,-2147483649,288564603,-5,3,268435441,-65537];
-Infinity;
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(Uint16Array, a18, a18); } catch (e) {}
    a16 * a16;
    a18++;
    this.d = a16;
    this.g = Int32Array;
}
new F14(F14, 256, 256);
class C29 {
    #c = v9;
    o(a31, a32, a33) {
        function f34(a35) {
            return a35;
        }
        class C36 extends f34 {
            [v0] = v0;
            #a;
        }
        return a33;
    }
    #e;
    constructor(a38, a39, a40, a41) {
        v8 = v7;
    }
    static [256];
    static h;
    static b;
}
new C29();
const v43 = new C29();
new C29();
class C47 extends Uint16Array {
}
class C48 extends C47 {
    constructor(a50, a51, a52, a53) {
        super();
        function f54(a55, a56, a57) {
            return a55;
        }
        const v60 = new BigUint64Array();
        const v62 = [2082,"function",this,C47,v60];
        const o63 = {
            "arguments": v62,
            "type": "function",
        };
        new Worker(f54, o63);
    }
    static #b = 0.4200969309968826;
    7;
    static [Uint16Array];
    static h = v43;
    [F14] = 536870888;
}
const v65 = new C48(C47, Uint16Array, Uint16Array, Uint16Array);
const v67 = /0j/vds;
try { v67.compile("Di0", "Di0"); } catch (e) {}
if (v65[v65]) {
} else {
    new WeakMap();
}
(["object"]).pop();
