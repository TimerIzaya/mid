let v0 = 4;
new BigInt64Array(v0);
16 - 16;
16 << 16;
new Int8Array(16);
BigInt64Array.prototype = BigInt64Array;
const v10 = new BigInt64Array(128);
class C11 {
    n(a13, a14, a15) {
        -v10;
        !v0;
        let v20 = ~128;
        ~128;
        v0--;
        +v0;
        v20++;
        return 16;
    }
}
try { C11.toString(); } catch (e) {}
const v26 = new C11();
const v27 = new C11();
new C11();
function f29() {
    const o38 = {
        8: 0.043152456200264866,
        get a() {
            this[8];
            const v33 = this[8];
            v33 + v33;
            let v36 = Math.acos(0.043152456200264866);
            v36--;
        },
    };
    return o38;
}
const v39 = f29();
const v40 = f29();
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    a44[8];
    a45[8];
    this.d = 257;
    this.h = a45;
    function f50(a51, a52, a53, a54) {
        Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: 16 });
        arguments[4] = arguments;
        return f50;
    }
}
try { new F42(v26, v26, 128, v26); } catch (e) {}
F42.caller = F42;
const v57 = new F42(v40, v39);
v57.b = v57;
try { ("MAX_SAFE_INTEGER").toWellFormed(); } catch (e) {}
function f60(a61, a62, a63) {
    function f65(a66) {
    }
    a61[1] = a63;
}
Worker.e = Worker;
try { ("function").split("function", F42); } catch (e) {}
const v70 = [v57];
try { v70.splice(Worker, v27); } catch (e) {}
const o72 = {
    "arguments": v70,
    "type": "function",
};
const v73 = new Worker(f60, o72);
try { v73.terminateAndWait(); } catch (e) {}
