class C3 {
    static m(a5, a6) {
        try { this.toString(a6, 184894.67464159266, 0.7352046532678617); } catch (e) {}
        const o14 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o14);
        return a6;
    }
}
const v16 = new C3();
const v17 = new C3();
const v18 = new C3();
function f20(a21, a22, a23) {
    const o38 = {
        __proto__: v16,
        get h() {
            this[C3];
            do {
                const v30 = 9007199254740990 >>> -9704;
                Math.sign(9007199254740990);
                const v32 = v18 | v30;
                9007199254740990 + v18;
                v32 >>> v30;
                a23++;
            } while (0 < 4)
            return this;
        },
    };
    return o38;
}
f20(C3, v17, v18);
f20(f20(v18, C3, v17), C3, C3);
[13,127,10,65536,536870887,-56696,-226074873,256,-39190];
[2,16,15,558574833,9,257];
[-2,-4,-4096,64,10000];
const v47 = new Uint8Array(127);
function f48(a49, a50) {
    const o51 = {
    };
    function f52(a53) {
        return Symbol.isConcatSpreadable;
    }
    Object.defineProperty(o51, "toString", { enumerable: true, value: f52 });
    return o51;
}
for (let v56 = 0; v56 < 25; v56++) {
    const v57 = f48();
    Object.defineProperty(v57, v56, { enumerable: true, get: f48, set: f48 });
    v47[v57] = v57;
    const o60 = {
        "execution": "sync",
    };
    o60.type = Uint8Array;
    o60(o60);
}
