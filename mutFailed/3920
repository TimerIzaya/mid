function f1() {
    return true;
}
const v4 = new Int16Array(3337);
try { v4.reduceRight(v4); } catch (e) {}
const v8 = new Uint32Array(5);
2045 >>> 2045;
const v12 = new Uint8Array(2045);
function f13(a14, a15, a16, a17) {
    const v18 = a16?.toString;
    try { new v18(a16, Uint8Array); } catch (e) {}
    const o28 = {
        n(a21, a22) {
            try {
                super.setFloat64(a17, a22);
            } catch(e24) {
            }
            return a21;
        },
        "g": a16,
        set d(a26) {
            Object.defineProperty(v12, 2147483647, { get: f1, set: f1 });
            try {
                this.b = a15;
            } catch(e27) {
            }
        },
    };
    try { o28.n(Uint32Array, v4); } catch (e) {}
    return o28;
}
const v30 = [-65536,45530,1,2,-1230690386,-65537,-1978551633,942047564,-1442406192];
const v31 = [1073741824,65536,9007199254740991,570822604,3,11];
const v32 = [1073741823,4294967296,4,-11,713665191,-4294967297,-9007199254740992,-2066221755,-2];
try { v32.pop(); } catch (e) {}
class C34 {
}
try { new C34(); } catch (e) {}
v32.indexOf();
const o38 = {
    [v30]: v30,
    get h() {
        return this;
    },
};
const v39 = [65537,-4294967295,1024,1073741825,1];
const v40 = [-46173,1000,128,4,-41176];
try { v40.filter(v32); } catch (e) {}
const v42 = [-4294967296,-2,536870888,-721369959,-1073741824,16,65536,4294967295,-544245983];
try { v42.findLastIndex(v8); } catch (e) {}
function f45(a46, a47) {
    let [v49,v50,,...v51] = arguments;
    return 48680;
}
f45(48680, v4, v32, C34);
class C53 {
    #o(a55, a56, a57, a58) {
        [[a55,v39]];
        [v30,a55];
        function f63() {
            return -172798652;
        }
        f63();
        var d = a55;
        let v66 = -128n;
        const v69 = [8.858723857900515,Infinity,-1.1848494944569402e+308,383427.98921984946];
        class C73 {
            set b(a75) {
                gc();
            }
        }
        const v78 = new C73();
        v78.b = v69;
        ++v66;
        new Set();
        return a55;
    }
    #d;
    #e;
    static [v39];
}
const v81 = new C53();
const v82 = new C53();
try { v82.__defineGetter__(Int16Array, true); } catch (e) {}
function F84() {
    if (!new.target) { throw 'must be called with new'; }
}
function f87(a88, a89) {
    const o93 = {
        p(a91, a92) {
            super.a = F84;
            return a88;
        },
    };
    return a88;
}
const v94 = new C53();
try { v94.constructor(); } catch (e) {}
const v96 = [1.0,2.220446049250313e-16,0.5850603029703941,5.290030550076612,10568.85287679953,0.5528011748960063,0.5648646144451559];
try { v96.sort(v81); } catch (e) {}
[-Infinity,-443687.5441290948];
[-1000000000.0,1e-15,2.2250738585072014e-308];
try { Int32Array.from(Int32Array); } catch (e) {}
new Int32Array(-8);
function f105(a106) {
}
class C107 extends f105 {
}
C107.name;
const o110 = {
};
gc(o110);
const o112 = {
};
o112.c = o112;
class C113 {
}
function F114(a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F114(v82, 5); } catch (e) {}
const v119 = f13(true, 2045, v12, 2045);
try { v119.n(o110, f13); } catch (e) {}
f13(v119, 3337, 5, 5);
const v123 = f13(f13, 5, f13, 5)?.n;
try { new v123(v31, 5); } catch (e) {}
const v126 = new BigInt64Array();
let [,v127,v128] = v126;
try { v128(); } catch (e) {}
