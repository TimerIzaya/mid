const v1 = (10000).constructor;
try { v1(); } catch (e) {}
const v5 = new Int8Array(128);
v5.indexOf();
new Uint32Array();
gc();
Date();
/OS\p{Nd}/vmsy;
/ua$?/guy;
/s(?:ab)?/guisy;
new Int32Array(78);
new Uint16Array(512);
new Int32Array(1421);
function f33() {
    return f33;
}
const v34 = /(?:a*)+q(?<a>.)/guds;
function f35(a36) {
    const v37 = a36.constructor;
    const v39 = new Uint8ClampedArray();
    function F41(a43) {
        if (!new.target) { throw 'must be called with new'; }
        const v44 = this.constructor;
        try { new v44(); } catch (e) {}
        try {
            -35199 % (this / -1478256740);
        } catch(e49) {
        }
    }
    const v50 = new F41();
    new F41(v50);
    const v53 = v39 ^ 3;
    try { v37(a36, f33); } catch (e) {}
    class C55 {
    }
    new Float32Array(2306);
    function F59() {
        if (!new.target) { throw 'must be called with new'; }
        for (const v64 of Array(19793)) {
            const v66 = Math.cbrt();
            v66 % v66;
        }
    }
    new F59();
    return v53;
}
for (let [i75, i76] = (() => {
        function f72() {
            Math.max(4.0, 4.0);
            return 4.0;
        }
        return [0, 10];
    })();
    i75 < i76;
    (() => {
        i76--;
        const v82 = new Uint32Array(4);
        new Float64Array(v82);
        for (let [v86] of "Opx24") {
        }
    })()) {
    for (let v89 = 0; v89 < 50; v89++) {
        f35(v34);
    }
}
