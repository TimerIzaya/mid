let v2 = "m";
const t1 = "9Fk";
t1[2] = "9Fk";
class C4 {
    static get f() {
        const v8 = new Int32Array(56885);
        [v8];
        function f10() {
            return f10;
        }
        const v11 = /(?:a*)+q(?<a>.)/guds;
        function f12(a13) {
            const v14 = a13.constructor;
            let v15;
            try { v15 = v14(a13, f10); } catch (e) {}
            const o17 = {
                get d() {
                    return this;
                },
            };
            return v15;
        }
        for (let i20 = 0, i21 = 10; i20 < i21; i21--) {
            for (let v28 = 0; v28 < 50; v28++) {
                f12(v11);
            }
        }
        const v30 = this.c;
        function* f31(a32, a33) {
            'use strict';
            v2 >>>= a33;
            [-854280637,-4,1073741824,1,-3,1115172156,-15,1859882050,127];
            [-9007199254740992,1073741824,10,4294967296];
            [-64395,5,-65535,-1,-246336275,-1527892948];
            yield* [true,this,v2,"every",this];
            class C38 {
                #d;
            }
            new C38();
            const v40 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
            const v41 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
            let v43 = undefined;
            function f44() {
                let v45 = Float64Array;
                Array();
                v45 = f12;
                const v48 = v40.length;
                class C50 {
                }
                new C50();
                Symbol.toPrimitive;
                new Uint32Array(v41, v48);
            }
            v43 = f44();
            return v30;
        }
        f31("every", "every");
        return v30;
    }
}
C4.name = C4;
const v58 = new C4();
const v59 = v58?.ignoreCase;
try { new v59(); } catch (e) {}
const v61 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
const v62 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
try { v62.concat(v61); } catch (e) {}
const v66 = new Int16Array(1000);
class C69 extends Float64Array {
    constructor(a71, a72, a73, a74) {
        super(v66);
    }
    [65] = Float64Array;
}
const v75 = new C4();
const v76 = v75?.constructor;
try { new v76(); } catch (e) {}
let v78;
try { v78 = new v76(); } catch (e) {}
const v79 = new C4();
function f80(a81, a82) {
    const v84 = Math.round();
    async function f85(a86, a87, a88) {
        await v84;
        return f85;
    }
    return v59;
}
v79.constructor = f80;
const v90 = v79?.constructor;
const v91 = new C4();
const v93 = new WeakSet();
function F95(a97, a98) {
    if (!new.target) { throw 'must be called with new'; }
    const v99 = this?.constructor;
    let v100;
    try { v100 = new v99(v93); } catch (e) {}
    new Date(..."undefined");
    function F105() {
        if (!new.target) { throw 'must be called with new'; }
        this.h = true;
    }
    v100 / v91;
    try {
        new F95(undefined, undefined);
    } catch(e110) {
    }
    try {
        this.c = a97;
    } catch(e111) {
    }
    try {
        this.b = undefined;
    } catch(e112) {
    }
}
try { new v90(); } catch (e) {}
try { v79.hasOwnProperty("every"); } catch (e) {}
const v115 = [59192];
v115[0] = v115;
const v116 = [2,-64929,2,9007199254740992];
const v117 = [536870887,268435441,9007199254740991,9007199254740990];
class C118 {
    4;
    constructor(a120, a121, a122) {
        a122.find = a121;
        try { a122.find(a122); } catch (e) {}
        try {
            v75.toString = v79;
        } catch(e124) {
        }
    }
    static {
        this.h = v76;
        try { new this("9Fk", v59, v78); } catch (e) {}
        let v127;
        try { v127 = new this(v116, this, v115); } catch (e) {}
        v127[4] = v127;
        super.h = "9Fk";
        try {
            const v128 = new C4();
            const v129 = v128?.propertyIsEnumerable;
            try { v129(v129); } catch (e) {}
            try { new v129(v75); } catch (e) {}
        } catch(e132) {
        }
    }
}
try { new C118(v116, v116, v75); } catch (e) {}
const v134 = C118.length;
v134 << v134;
new C118(v115, "9Fk", "9Fk");
const v137 = new C118(v116, v79, "every");
class C139 {
    constructor(a141, a142) {
        const v143 = this.constructor;
        try { new v143(); } catch (e) {}
        super[this] = -383.07613008959197;
    }
}
v137[4];
v137[4];
new C118(v117, v137, v75);
const v149 = new Float32Array();
const v150 = [v149];
try { v150.toReversed(); } catch (e) {}
new Float32Array(v150);
function F153(a155, a156) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f80;
    const v157 = this.constructor;
    try { new v157(this); } catch (e) {}
    a156++;
    this.g = a155;
}
const v160 = new F153();
const t176 = v160.constructor;
new t176();
