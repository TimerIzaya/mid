let v3 = -268435456;
const v4 = v3--;
536870912 + 536870912;
let v10 = -4294967296n;
v10--;
class C12 {
    n(a14, a15, a16, a17) {
        let v18;
        try { v18 = a14(v10, a17, this, 6, -24702); } catch (e) {}
        v18 >= -24702;
        /(?<!)/gudimsy;
        /C\xf0\x9f\x92\xa9/dy;
        /xyz{93}/gusy;
        return 6n;
    }
    static [-850462309] = 6;
    static [v4] = -850462309;
    static [25447];
    1024 = 6n;
}
new C12();
const v24 = new C12();
v24[1024] = v24;
const v25 = new C12();
v25[1024] = v24;
for (let v26 = 0; v26 < 5; v26++) {
    function f27() {
        function F28(a30, a31, a32) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v33 = new F28(F28, f27, f27);
        const v34 = v26?.constructor;
        try { new v34(C12, 536870912, 536870912); } catch (e) {}
        try { v33.constructor(v33, f27, v26, v33, v33); } catch (e) {}
        const o42 = {
            toString(a39, a40, a41) {
                Object.defineProperty(v33, a39, { writable: true, configurable: true, set: Array });
                return C12;
            },
        };
        return v33;
    }
    const t42 = 58991n;
    const v43 = t42();
    const v44 = v43?.__defineGetter__;
    try { new v44(f27, v43); } catch (e) {}
    %OptimizeFunctionOnNextCall(v44);
}
