const v0 = [1000000000.0,0.041067710610248054,0.8518230754354207,4.0,-1000000000000.0,-981.2803357645965,1000000000000.0,-263537.4273171163,0.0,1000000000.0];
const v1 = [1.7976931348623157e+308,4.870147717749829,693.7658317786913,-1000000000.0,-2.5402717213820925,0.39684209693684136];
[-4.0,-61.224722530149165,-1e-15,1e-15];
function f3() {
    return v0;
}
const v5 = ("function")[6];
v5[0] = v5;
[9007199254740991,-9,4,38858];
const v9 = [-20488,268435440,-1404455262,268435439,-16,22176,65535,12918,696910652];
try { v9.map(v1); } catch (e) {}
try { v9.toLocaleString(); } catch (e) {}
const v12 = [-128,4,1,4,-2147483647,2,11704,802702511,-1];
v12[8] = v12;
const v13 = [v12,"i2",v12];
v13[1];
[["function","i2"],v9,"function"];
let v20;
try { v20 = ("4294967295").trim(); } catch (e) {}
try { v20.match("function"); } catch (e) {}
const v25 = new Uint8ClampedArray(3);
const v28 = -1000000000000.0 << -1000000000000.0;
function f31(a32, a33) {
    a32 | a32;
    a33 !== a33;
    const o37 = {
        [8.946504243780264e+307]: a33,
        get g() {
            return a33;
        },
    };
    Object.defineProperty(o37, Symbol.isConcatSpreadable, { writable: true, configurable: true, value: v28 });
    return o37;
}
try { f31(v20, "p"); } catch (e) {}
const v41 = f31(-9.389413203732939e+306, 2.0);
v41[Symbol.isConcatSpreadable] = -1000000000000.0;
v41.e = v41;
f31(-9.389413203732939e+306, -1000000000000.0);
v41[Symbol.isConcatSpreadable];
class C48 {
    constructor(a50, a51, a52, a53) {
        try { this.hasOwnProperty(a50); } catch (e) {}
        for (let v55 = 0; v55 < 5; v55++) {
            v55++;
            v25[v55] = a53;
        }
    }
}
C48.length;
new C48();
function f60() {
    return v5;
}
function f61(a62) {
    Array(v28);
}
Object.defineProperty(Uint32Array, 2, { configurable: true, get: f60, set: f61 });
try { new Uint32Array(C48, 2.0, v13); } catch (e) {}
Uint32Array[1] = 15;
let v67;
try { v67 = Float64Array.bind(v9); } catch (e) {}
v67.length;
const v69 = new Float64Array(Uint32Array);
function f70() {
    new Float32Array();
    return v25;
}
v69.toString = f70;
v69[2] = v69;
