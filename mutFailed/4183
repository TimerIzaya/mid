const v0 = /[(\1a)]/vdsy;
/S(?:foo)/vms;
/D(?: foo )/gdmsy;
/(?:ab){4,7}*/gvs;
/ouNxyz{0,1}?/ims;
/H/gu;
function f6() {
    new Uint8ClampedArray();
    new BigInt64Array(1);
    return v0;
}
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v0.g = 1489843090;
    } catch(e21) {
    }
    try {
        this.h = v0;
    } catch(e22) {
        const v25 = new Int8Array(8);
        [v25];
        class C30 {
            static #e = -216197759n;
            static #g = -9n;
            static 6;
            static 5 = 15663n;
            static [-216197759n] = 15663n;
        }
    }
}
const v31 = new F15(154.7147519260609, 0.016624175751425052, 0.016624175751425052);
const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v33 = 0; v33 < 5; v33++) {
    function f34() {
        try {
            v32.forEach();
        } catch(e36) {
            e36.constructor(e36, v33, f34, f34, f34);
            e36.a = e36;
            e36.a = e36;
        }
        return f34;
    }
    f34();
    %OptimizeFunctionOnNextCall(f34);
}
const v39 = new F15(0.6219950577384911, 154.7147519260609, 0.6219950577384911);
new F15(154.7147519260609, 154.7147519260609, 0.016624175751425052);
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C47 {
            4294967296 = 996195971n;
        }
        new C47();
        this.a = a43;
    } catch(e49) {
    }
}
const v50 = new F41(0.6219950577384911, f6, v39);
new F41(0.6219950577384911, v50, v31);
new F41(0.6219950577384911, v50, v39);
const v53 = [];
const v56 = new Array(228);
class C57 {
    [Array] = v53;
    static {
        function F59(a61, a62) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a62;
            } catch(e63) {
            }
        }
        const v64 = new F59(v56, this);
        new F59(Array, F59);
        new F59(v64, v56);
    }
}
new C57();
const v68 = new C57();
Math.cos(Math);
new Float32Array(9);
const v74 = new C57();
let v77;
try { v77 = v68.o(C57, v74, -1n, v56); } catch (e) {}
try {
    const t88 = "7MU";
    t88.valueOf = v77;
} catch(e78) {
}
