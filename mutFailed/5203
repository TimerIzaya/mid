const v0 = [2.0,0.5315687852774869,-1.3023149532618206,-3.0,0.49309984454995415,1000000.0,6.758640889732441e+307];
const v1 = [2.0,4.0,0.29210515476631627,-2.220446049250313e-16,-2.220446049250313e-16,1000000000.0,850860.5116196591,2.0,0.0];
const v2 = [913375.9054676683,-1000000.0,-6.531795645114369,5.0,-961.420959828901,-3.0,-1000.0,-1000.0,692.4734499550409,-0.0];
function f3() {
    return v0;
}
const v4 = [v1,v1];
const v5 = [v2,v2];
try { v5.unshift(v2); } catch (e) {}
const v7 = [v5,f3,v4];
function F8(a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v2); } catch (e) {}
    try { a10.map(F8); } catch (e) {}
    try { a11.map(this); } catch (e) {}
    const v16 = a12?.groupToMap;
    try { new v16(v1); } catch (e) {}
    try {
        this.d = a12;
    } catch(e18) {
    }
}
const v19 = new F8(v5, v4, v7);
new F8(v7, v4, v1);
new F8(v1, v7, v4);
2147483647 + 2147483647;
const v28 = 47831n / 47831n;
try {
    v5.valueOf = f3;
} catch(e30) {
}
const v33 = -v28;
Math.sign(-256 + v33);
Math.cbrt(v33);
4046 & 4046;
try { BigInt64Array(1073741824, 2147483647, f3); } catch (e) {}
const v41 = new BigInt64Array();
const v42 = v41?.set;
try { new v42(v41); } catch (e) {}
function f44(a45, a46) {
    a45 + a45;
    let o49 = {
        "d": a45,
        ...a45,
        get e() {
            return a46;
        },
    };
    [,...o49] = v41;
    return -4096;
}
const v50 = f44(4046, 1073741824);
const v54 = -1814769353;
const o55 = {
    "b": v19,
    "a": F8,
    93543820: 4046,
    4: 2147483647,
    512: v54,
    "maxByteLength": 1814769353,
};
o55.maxByteLength;
12 << 12;
const v59 = new SharedArrayBuffer(12, o55);
try { v59.grow(1073741824); } catch (e) {}
const v61 = WeakMap?.call;
for (let v63 = 0; v63 < 5; v63++) {
    const t67 = "undefined";
    t67["p" + v63] = v63;
}
let v66;
try { v66 = v61(1n); } catch (e) {}
const v67 = new WeakMap();
const v69 = 1.327943550607859e+308 > 1.327943550607859e+308;
const v70 = [47831n];
try { v70.join(f44); } catch (e) {}
const v72 = [v70,v70,v70,v70];
const v73 = [v70,v72,v72,v72];
v73[2];
2 & 2;
try {
    v67.c = v66;
} catch(e77) {
}
try { v66(); } catch (e) {}
v73.length = 2;
const v79 = [601759695];
v79[0] = v79;
function f81(a82, a83, a84, a85) {
    a83 | a83;
    let v89;
    try { v89 = v4["find"](..."find", a85, ...v79, ...v4, ...522675525n); } catch (e) {}
    v89 <= a84;
    return arguments;
}
BigInt64Array.name = BigInt64Array;
const v93 = new BigInt64Array(3216);
const v96 = new BigUint64Array(3216, 3216, 3331);
f81(v79, 4046, v69, 4046);
const v98 = f81(v96, 3331, v93, 3216);
try { v98.callee(v98, 2147483647, "undefined", v50); } catch (e) {}
-(-3.0);
new WeakMap();
do {
    break;
} while (0 < 2)
-3.0 >>> -3.0;
/2(?:a+)+/gvisy;
const v109 = /ta\s/gu;
v109.c = v109;
