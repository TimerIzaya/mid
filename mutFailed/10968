new Float32Array(14);
new Uint8ClampedArray(2325);
const v8 = new Int16Array(15);
new Int32Array(13);
new Float32Array(v8);
new Uint8ClampedArray(2366);
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -9;
    } catch(e30) {
    }
    try {
        this.b = 5;
    } catch(e31) {
    }
}
new F24(-9, 14, "toString", 1073741824);
const t18 = 0;
new t18(1073741824, 1073741824, F24, "setUint32");
const v34 = new F24(-9, 1073741824, 1073741824, "setUint32");
function f35(a36, a37) {
    const o43 = {
        "f": a36,
        set e(a39) {
            Reflect.construct(a39, [a36,v34,Reflect,a37], a39);
        },
        ["getOwnPropertySymbols"]: v34,
        "e": "toString",
        9: "toString",
    };
    return o43;
}
f35(v34, "toString");
const v45 = f35(v34, 1073741824);
let v46 = f35(v34, 5);
class C47 {
    static #e = v45;
    m(a49, a50, a51) {
        try {
            a50.#e >>>= a49;
        } catch(e52) {
        }
        return v45;
    }
    #n(a54, a55) {
        Object.defineProperty(a54, "a", { writable: true, configurable: true, value: f35 });
    }
}
const t49 = 13;
const v56 = new t49();
v46 = v56 && "getOwnPropertySymbols";
