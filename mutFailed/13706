function f0() {
    let v2 = 336.3333237049269;
    try { ("g").substr(v2, "valueOf"); } catch (e) {}
    const o15 = {
        ..."g",
        __proto__: "g",
        ..."valueOf",
        [v2](a6, a7) {
            const o12 = {
                "b": "valueOf",
                213: "g",
                "type": "g",
                m(a9, a10) {
                    return v2++;
                },
            };
            new Proxy(this, o12);
            return v2;
        },
        [v2]: "valueOf",
        "c": "valueOf",
        "g": "valueOf",
        "f": "valueOf",
    };
    return o15;
}
f0();
f0();
f0();
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e25) {
        for (let [v26,v27] of a23) {
        }
    }
    ~(-256n >> -256n);
    try {
        new F21();
    } catch(e32) {
    }
}
new Int8Array(10);
const v37 = new Uint32Array();
v37[BigInt64Array] = v37;
const v38 = [];
class C39 {
    static p() {
        let v41;
        try { v41 = this(this, this, this, v38, v38); } catch (e) {}
        let v42;
        try { v42 = v41(this); } catch (e) {}
        v42 = this;
        const v43 = [-719491709,-4096,38613,-1,1024,65535,129];
        [65535,268435456,65537];
        [-1319674364,836468341,127,-46522,-4294967296,742091120,3621,16,-2,268435441];
        return v43;
    }
    static g = v38;
    1073741824 = v38;
}
new C39();
const v47 = new BigInt64Array(256);
const v49 = 1475 >>> 1475;
function F51(a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
}
const o60 = {
    "b": 1e-15,
    [3](a59) {
    },
};
const v61 = new Int32Array(1475);
try { v61.toSorted(v61); } catch (e) {}
class C63 extends f0 {
    set c(a65) {
        function f66() {
            return this;
        }
        new Int32Array(3208);
        const v73 = new Uint16Array(9);
        v73.includes(true, -706152110);
        try { a65(1475); } catch (e) {}
        let v78 = 7;
        const v81 = new Int32Array(2);
        v81.toSorted();
        v61.g = -1;
        Math.ceil(v78);
        Math.exp(~(v78++));
    }
    [256] = v47;
    static [BigInt64Array];
    constructor(a89, a90, a91) {
        const v93 = [a91,v49];
        Reflect.apply(a91.includes, v38, v93);
    }
}
C63.length;
function f97() {
    const o98 = {
    };
    return o98;
}
const v100 = new Uint32Array(Uint32Array, Uint32Array);
v100[Symbol.toPrimitive] = f97;
const v104 = new BigInt64Array();
try { v104.with(v100, v100); } catch (e) {}
new C63();
new C63();
new C63();
const v110 = [-1941710058,1389675721,-50560,-20231,1311353951,-1024,128,-25926];
v110[7] = v110;
const v111 = v110.constructor;
try { v111.isArray(f0); } catch (e) {}
class C113 extends v111 {
    #g;
    7 = -1823362111n;
}
new C113();
