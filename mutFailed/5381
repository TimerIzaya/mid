function f0() {
    const o11 = {
        set a(a5) {
            const v6 = ("symbol")[5];
            class C7 {
                static h = "m";
                static 84 = a5;
                #e = v6;
            }
            new C7();
            new C7();
            new C7();
        },
        65535: -8,
        [-8]: "m",
        ["symbol"]: "symbol",
    };
    return o11;
}
const v12 = f0();
let v13 = f0();
f0();
function f15() {
    return f15;
}
class C16 extends f0 {
    get c() {
        try {
            const o21 = {
                set b(a19) {
                    this.b;
                },
            };
            v13 = this;
        } catch(e22) {
            let v24 = 1073741824;
            Math.random();
            let v28 = e22 >>> -1;
            --e22;
            --v28;
            !(--v24) / -1;
        } finally {
            v12 > this;
        }
        return this;
    }
}
new BigUint64Array(5);
new Int32Array(1);
new Int8Array(12);
const v44 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v45 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v46 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
function F47(a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a49;
    } catch(e52) {
    }
    try {
        a51.b = a51;
    } catch(e53) {
    }
}
new F47(Int32Array, 12, v45);
new F47(v45, 5, v46);
const v56 = new F47(v44, 12, v44);
v56[65536];
const o59 = {
};
gc(o59);
const v61 = new C16();
let v62 = new C16();
const v63 = new C16();
class C64 extends f15 {
    static #m(a66, a67) {
        C16[149] = f15;
        C16 = v13;
        const v71 = [1000.0,1000n];
        a67 <= 5;
        v71[-2147483648] >>>= -7;
        const v77 = v62--;
        Math.acos(2026878822);
        Math.atan(v77);
        return v56;
    }
    static a = f0;
    static #d = C64;
    [v12] = v63;
}
const v80 = new C64();
new v80();
const v82 = new C64();
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f89() {
    let v91 = 1000000000000.0;
    const v92 = v91--;
    -v92;
    class C97 {
        constructor(a99) {
            const v101 = new Float32Array();
            try { v101.entries(); } catch (e) {}
            const v103 = new Uint16Array(12, -4294967296, v92);
            new Float32Array(v103, -4294967296, 268435439, v91, v103);
        }
    }
    try { new C97(12); } catch (e) {}
    const v106 = new C97(257828.6336153492);
    const v107 = new C97();
    const v108 = new C97(-4294967296);
    const v109 = [v108,C97];
    [257828.6336153492,v108,v106,v108,v109];
    const v111 = [v108];
    class C112 extends v46 {
        [v106];
    }
    const v113 = new C112();
    const v114 = v111.constructor;
    try { v114.isArray(v111); } catch (e) {}
    class C116 extends v114 {
    }
    C116.a = C116;
    const v117 = new C116();
    const v118 = v117?.constructor;
    try { new v118(); } catch (e) {}
    Object.defineProperty(v117, 65537, { value: v107 });
    try { v113.m(v109); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f89);
f89();
%OptimizeFunctionOnNextCall(f89);
f89();
function F123(a125, a126) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v45.e = a126;
    } catch(e127) {
    }
}
new F123(F123, C64);
new F123(v63, C64);
new F123(v82, v61);
function F131() {
    if (!new.target) { throw 'must be called with new'; }
}
const v133 = new F131();
const v134 = new F131();
class C135 extends F131 {
    [v134];
}
const v136 = new F131();
v136.hasOwnProperty(v133);
