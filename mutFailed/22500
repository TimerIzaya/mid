let v0 = [-2.220446049250313e-16,-0.0,0.6318643630548395,-2.2250738585072014e-308,1.2756890595799657,963726.0144357455,2.0];
const v1 = [-832.7716104315007,1.0,2.0783488091442811e+307,0.5314709435877607,2.220446049250313e-16,-1.0,0.6362321956343128,-3.0,-5.436567554376753e+307];
const v2 = [-1.7622316576513783e+308,-1000000000000.0];
new Int8Array();
const v6 = new Float32Array(Float32Array, Float32Array, Float32Array);
function f7() {
    v6.c = Float32Array;
    for (let v8 = 0; v8 < 5; v8++) {
        const o11 = {
        };
        o11[Uint32Array] -= -2147483649;
        class C12 {
        }
        new BigUint64Array(v8, v8, v8);
    }
    return f7;
}
%PrepareFunctionForOptimization(f7);
function f15() {
    return v0;
}
const v18 = new v2(-4294967295, 2826);
v18.toTimeString();
const v21 = new Date();
v21.setUTCFullYear();
const v24 = new Set();
v24.add(v21);
class C28 {
    g = v0;
    #h;
    o(a30, a31, a32) {
        try {
            async function f34(a35, a36) {
                return f34;
            }
            const v37 = f34.constructor;
            try { v37(Uint8Array); } catch (e) {}
            v0.#h;
        } catch(e40) {
        }
        return v0;
    }
    constructor(a42, a43) {
    }
    static 6;
    [v2];
    #a = v0;
}
const v45 = new C28();
const v46 = new C28();
new C28();
let v48 = 0;
do {
    for (let v49 = 0; v49 < 32; v49++) {
        function F50() {
            if (!new.target) { throw 'must be called with new'; }
            for (let v52 = 0; v52 < 25; v52++) {
            }
        }
        function F53() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                for (let v55 = 0; v55 < 50; v55++) {
                    for (let v56 = 0; v56 < 25; v56++) {
                        this["p" + v56] = v56;
                    }
                }
            } catch(e59) {
            }
        }
        v45["p" + v49] = v49;
    }
    v48++;
} while (v48 < 10)
v0 = v1;
delete v46?.g;
const v71 = new Uint8ClampedArray(3016);
try { Float32Array.apply(3016, v71); } catch (e) {}
Math.tan();
