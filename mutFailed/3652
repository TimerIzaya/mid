class C3 {
    constructor(a5) {
        [] = "match";
        for (const v6 of a5) {
            const v10 = -"match";
            -2 && -2;
            let v12 = "match" & 11;
            const v14 = 9007199254740991n * 9007199254740991n;
            v14 * v14;
            class C16 {
            }
            const v17 = new C16();
            function f18(a19, a20) {
                const v21 = a20?.propertyIsEnumerable;
                try { v21(); } catch (e) {}
                const v23 = [];
                let v24;
                try { v24 = v23.with(v23, v23); } catch (e) {}
                const v26 = new Float64Array(v23, v24);
                const v27 = new Float64Array(v26, a19, v24);
                v27.values();
                return v27;
            }
            f18(Uint16Array, v17);
            f18(v17, v17);
            Math.asin("h");
            v12++;
            (-2 - "match") / v10;
        }
    }
}
const v36 = new C3(622.7175238846269);
const v37 = new C3(C3);
let v38 = 4.150176177212824;
const v40 = [v38 &= -2.0];
new Int8Array();
new C3(C3);
const v47 = [296261129,-1,3,2];
const v48 = [-268435456,1000];
class C49 {
    constructor(a51, a52, a53, a54) {
        let v55 = 0;
        do {
            let v57 = 30918;
            const v58 = v57--;
            let v59 = v48 ^ v48;
            Math.random();
            Math.exp(v48);
            v58 >> v48;
            Math.ceil(v58);
            ++v59;
            v55++;
        } while (v55 < 2)
    }
}
const v68 = new C49(2, v40, 2, -1);
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a74;
    } catch(e75) {
    }
    try {
        this.f = a72;
    } catch(e76) {
    }
}
const v77 = new F69(v40, v68, 2, v47);
new F69(v47, v77, 1000, v77);
function F79(a81, a82, a83, a84) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a81;
    } catch(e85) {
    }
    try {
        this.h = a82;
    } catch(e86) {
    }
}
const v87 = new F79("match", v37, "h", v37);
const v88 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
class C92 extends Int32Array {
    [Set] = true;
    [v88];
}
new C92();
const v94 = new F79(622.7175238846269, v36, v87, "h");
new F79(v94, C3, F79, C3);
class C96 {
    static #p(a98, a99) {
        [-1000000000000.0];
        [-110804.89203542541,1.0];
        [-7.778545000328762,-3.0,4.807675049451841,-173.64038855664978,1000000000.0,-2.2250738585072014e-308,146.97887292543032,-1000000000000.0,519719.1876568708,1.7976931348623157e+308];
        const o106 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o106);
        return F79;
    }
}
new C96();
new C96();
new C96();
const v113 = new Uint8Array(257);
class C115 extends Uint16Array {
    constructor(a117, a118, a119) {
        try {
        } catch(e120) {
            eval("");
        }
        super(v113);
    }
}
new C115();
