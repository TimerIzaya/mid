[4.0,0.04225313976333811,NaN,-1000.0,-1000000000.0,-2.0,2.220446049250313e-16,0.40228456413886615];
[-1.0,0.8988297246437256];
[0.6079202750576334,296376.8036789079,527134.6931262503,366.01241016987683,-2.2250738585072014e-308];
function f6() {
    return 43091;
}
/a\nb\bc/uimsy;
/5(x)(x)(x)\1*/di;
/(?:a{5,1000000}){3,1000000}/vmy;
[255,-9007199254740990,-5,8,-1235604614];
const v11 = [7,256,2147483647,127,6,371535796];
[1073741823,26530,-63449,2023289416,13];
new Int8Array(127);
new Float64Array(1830);
new Int8Array(14);
const v22 = /mLQO/vm;
const v23 = /\P{Any}?/gu;
/ROYaab|c?/gvsy;
const v26 = new WeakMap();
256 | 256;
new Float64Array(256);
new Int32Array(v26);
Int8Array.BYTES_PER_ELEMENT = Int8Array;
class C36 {
}
function F37() {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new F37();
v11?.constructor;
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.constructor;
    try { new v45(a44, a44); } catch (e) {}
}
const v47 = new F41(F41, 2030);
const v50 = [];
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    const v57 = Date.toString(F52, 9223372036854775807);
    try { v57.match(v23); } catch (e) {}
    v57.replaceAll(v39, -37859n).length;
    new Uint32Array(Uint32Array, Uint32Array, 4);
    const v65 = new Set(v50);
    const v66 = v65.add;
    try { v66.bind(); } catch (e) {}
    try { new v66(v57); } catch (e) {}
    const v70 = ("delete")?.slice;
    let v71;
    try { v71 = new v70(v22); } catch (e) {}
    const v73 = 256 || v65["delete"]();
    v73 || v73;
    const v75 = v73 && v73;
    const o77 = {
    };
    o77.g = o77;
    o77.b = o77;
    o77.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    let v81;
    try { v81 = ("getPrototypeOf").blink(); } catch (e) {}
    v81.f = v81;
    v81[28].strike();
    try { v71.padEnd(this); } catch (e) {}
    const v86 = v81.strike(591114.0785999324).replace(19793, v47);
    try { v86.normalize(); } catch (e) {}
    v86[11] = v86;
    class C89 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C90 extends C89 {
        ["getPrototypeOf"] = C89;
    }
    try { new C90(); } catch (e) {}
    let v92;
    try { v92 = new C90(); } catch (e) {}
    const v93 = v92?.getPrototypeOf;
    try { new v93(); } catch (e) {}
    Int8Array.getPrototypeOf;
    let v96;
    try { v96 = new C90(); } catch (e) {}
    const v97 = v96?.getPrototypeOf;
    let v98;
    try { v98 = new v97(); } catch (e) {}
    v98.b = v98;
    const v99 = new C90();
    const v100 = v99.getPrototypeOf;
    try { new v100(); } catch (e) {}
    let v102;
    try { v102 = new v100(); } catch (e) {}
    v102.getPrototypeOf = v102;
    let v103;
    try { v103 = v102.propertyIsEnumerable(v86); } catch (e) {}
    Int8Array || v103;
    const v105 = v102?.constructor;
    let v106;
    try { v106 = new v105(v81, this, 4); } catch (e) {}
    v106.valueOf();
    try { v106.constructor(); } catch (e) {}
    const v109 = v100.constructor;
    let v110;
    try { v110 = new v109(F52, v75); } catch (e) {}
    const v111 = v110.getPrototypeOf;
    const v113 = v111?.apply?.apply;
    try { new v113(C89, v105); } catch (e) {}
    try { new v111(); } catch (e) {}
    const v116 = Array(19793);
    v116.pop();
    for (const v118 of v116) {
    }
}
new F52();
const v120 = new F52();
const v121 = v120.constructor;
const t114 = v120.constructor;
new t114();
18074 >>> 18074;
function F127(a129, a130) {
    if (!new.target) { throw 'must be called with new'; }
    const v131 = this.constructor;
    try { v131(v22, v22); } catch (e) {}
    new v131();
    this.c = a129;
}
try { new F127(4, v121); } catch (e) {}
