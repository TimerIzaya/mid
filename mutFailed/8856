const v3 = [250.2764403337619,4.833625943864233,0.9316787036577939,1000.0,-2.2250738585072014e-308,0.17766304136443145,-9.598730745998825e+307,0.0];
const v4 = [2.220446049250313e-16,1e-15,0.08826116956762498,-Infinity,443185.5625604056,4.736326687565699e+307,-4.0];
const v5 = [1.0];
[-2.220446049250313e-16,-60.38444516413222,1000000000000.0,1000000.0,644.9036134741327,0.7722523132390402,-2.2250738585072014e-308,540.6411638375971,-3.049941411412325,-2.220446049250313e-16];
const v7 = [-1000000000000.0,-3.0,Infinity];
const v8 = [1000000000.0,353822.73628110415];
function f9(a10, a11, a12) {
    const v13 = a12?.groupToMap;
    let v14;
    try { v14 = new v13(-14932n); } catch (e) {}
    try { (-14932n).concat(1000n); } catch (e) {}
    const o35 = {
        m(a17, a18, a19) {
            super.c;
            return a18;
        },
        [v8](a22, a23, a24, a25) {
            new Int16Array(10);
            new Uint16Array(v14);
            const v34 = new Uint8Array(0);
            return v34;
        },
    };
    return o35;
}
const v36 = f9(v3, v3, -14932n);
v36?.m;
let v38;
try { v38 = new v8(v5, v4, v8); } catch (e) {}
const v39 = f9(v3, v7, v36);
try { v39.m(v8, v7, 1000n); } catch (e) {}
f9(f9, v3, v8);
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
}
class C48 {
    static get g() {
        try {
            var a = super.subarray();
        } catch(e51) {
        }
    }
}
new Map();
for (const v55 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
    try { ("-2").lastIndexOf(v55); } catch (e) {}
    ("-2").normalize(v38)[1];
}
new Map();
class C66 extends WeakMap {
    536870887;
}
C66.name;
Int32Array.prototype;
const v71 = new Int32Array(2917);
try { v71.slice(v4, v8); } catch (e) {}
try { ("lastIndexOf").charAt(2917); } catch (e) {}
v71["lastIndexOf"](10);
const t57 = gc.arguments;
t57();
try {
} catch(e83) {
}
function F84(a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
}
function F88(a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
}
