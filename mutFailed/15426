const v3 = [-1.7976931348623157e+308,-3.0,-1.0,0.41360297249635725,1000000000.0,-1.3747392948072428e+308,0.9178977677100997,836.0037783640234];
const v4 = v3[5];
[262615.4919602936,1.3423553822515881,NaN,1000000000.0,40.282181311481736,0.13584508757510994,1000000000000.0,-2.220446049250313e-16];
let v6;
try { v6 = v4.copyWithin(-721147.5427807166, -1000000000000.0); } catch (e) {}
const v7 = [-3.0];
try { v4(v7); } catch (e) {}
try {
    v3.length = v6;
} catch(e9) {
}
/xyz{1,32}/gdis;
const v11 = /g5/gudms;
/(a)*/ud;
const v13 = [1.0,-5.0,1000000000.0,-1000.0,0.12362779769500765,-4.0,-4.0,-2.220446049250313e-16,4.0];
let v14 = 0;
do {
    v11 << v7;
    v14++;
} while (v14 < 9)
try { v13.pop(); } catch (e) {}
[0.0,8.352537147354056,1000000.0,1000000000000.0,903101.9020546023,-4.0,-3.0];
[-1.6840868986209288e+307,0.03152540221699929,1000000.0,Infinity,-503.9056015442138,-3.0,1000000000000.0,202.68341845062787,2.0];
const v24 = new BigUint64Array(256);
const o27 = {
    "maxByteLength": 1170508685,
};
const v29 = new SharedArrayBuffer(1000, o27);
new Uint16Array(v29);
v24[63];
(1000).toSorted();
