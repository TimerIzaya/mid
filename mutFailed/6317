class C3 {
    static ["function"] = "compile";
    static get g() {
        const v6 = C3.iterator;
        const o28 = {
            [v6]() {
                const v10 = new Set();
                v10["compile"](839612.5677247904);
                const v12 = [];
                const v14 = v12.entries;
                try { new v14(v14, v12, v14, v14, null); } catch (e) {}
                let v16 = 10;
                Math.cbrt(1073741824);
                new Uint8ClampedArray(1073741824);
                const o27 = {
                    next() {
                        v16--;
                        const v25 = v16 == 0;
                        const o26 = {
                            "done": v25,
                            "value": v16,
                        };
                        return o26;
                    },
                };
                return o27;
            },
        };
        return o28;
    }
}
const v29 = new C3();
const v30 = new v29();
const v31 = new C3();
class C32 extends C3 {
    a = "function";
    constructor(a34, a35) {
        super();
        try {
            super.o("compile", C3, this);
        } catch(e37) {
        }
    }
    static #a = v31;
    set f(a39) {
        -(this.a << 536870912n);
        const v46 = 4294967296n * 4294967296n;
        v46 | v46;
        new Float32Array();
        new BigInt64Array(1073741824, BigInt64Array);
        super[536870912n] = C3;
        try {
            super.m();
        } catch(e56) {
        }
    }
}
new v29(v30, C32);
const v58 = new C32(v29, v29);
const v59 = new C32(v31, v58);
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    class C65 {
        static {
            try { this(this, 3.866732047176795e+307, this, ...this); } catch (e) {}
        }
    }
    try {
        this.g = a62;
    } catch(e68) {
    }
}
new F60("function", v31);
class C70 {
}
const v72 = WeakSet.prototype;
function f73() {
    return f73;
}
Object.defineProperty(v72, "constructor", { writable: true, enumerable: true, value: f73 });
const v74 = new v59();
const v75 = [5];
const v77 = [];
Reflect.apply(v75.fill, v74, v77);
new F60(C32, v31);
new F60(v31, "function");
const v83 = new C70();
const v86 = new BigUint64Array(512);
v86["lastIndexOf"](v83);
