try { ("-21508").localeCompare("-21508"); } catch (e) {}
let v9 = "e";
const v10 = [-13063,230037640,0,-1717935321,257,0,1073741825];
const v11 = [-2051630605,509562611];
class C12 {
    0 = v11;
}
const v13 = new C12();
Object.defineProperty(v13, 7, { configurable: true, value: v10 });
class C14 {
    get h() {
        const t11 = "b";
        t11[3] = this;
        super[-9007199254740990] = this;
        return this;
    }
    static {
        let v16 = this;
        v16 ^= "b";
        v9 = "-21508";
        function f17(a18, a19) {
            const o22 = {
                set d(a21) {
                },
                "a": a18,
            };
            const v25 = new Int8Array(268435456);
            return v25;
        }
        f17.prototype = f17;
        const v28 = new Int8Array(7);
        try { v28.findLastIndex(-9007199254740990); } catch (e) {}
        let v30 = 255;
        v30++;
        new BigUint64Array(v30);
        1720 ^ 1720;
        new Int32Array(1720);
    }
}
try { new C14(); } catch (e) {}
try { new C14(); } catch (e) {}
const v40 = new C14();
v40.d = v40;
new C14();
const v42 = new C14();
v42.d = v42;
const v43 = v42?.constructor;
v43.prototype;
let v45;
try { v45 = new v43(); } catch (e) {}
v45.d = v45;
function f46() {
    class C47 {
    }
    const v48 = new C47();
    const v49 = v48?.__defineGetter__;
    v49.name;
    try { new v49(C47, C47); } catch (e) {}
    const v52 = [v48,v48,v48,v48,v48];
    const v53 = v52?.includes;
    v53.length = v53;
    try { new v53(C47); } catch (e) {}
    try {
        const o56 = {
        };
        o56.f = o56;
        o56.e = 1261703539;
    } catch(e57) {
    }
    const v58 = [f46,f46];
    v58.length = v58;
    v58[1] = v58;
    class C59 extends C47 {
        [v48];
    }
    let v60;
    try { v60 = new C59(); } catch (e) {}
    const v61 = v60?.constructor;
    try { new v61(); } catch (e) {}
    const v63 = new C59();
    const v64 = v63?.constructor;
    try { new v64(); } catch (e) {}
    try { v63.constructor(); } catch (e) {}
    v58.constructor;
    try { v63.m(v52); } catch (e) {}
    return f46;
}
try { f46.toString(); } catch (e) {}
%PrepareFunctionForOptimization(f46);
f46();
const v71 = f46();
function f72() {
    return f72;
}
try { f72(); } catch (e) {}
const v75 = new Date();
v75.getMonth();
v71.caller = v71;
%OptimizeFunctionOnNextCall(f46);
f46();
