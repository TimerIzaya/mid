const v2 = [5,1436918233,13,-9223372036854775808,12,10779,268435439,-350312267,536870912];
function f3(a4, a5, a6) {
    function f7(a8) {
        return v2;
    }
    return f3;
}
const v11 = ["function",v2,"function"];
const o12 = {
    "arguments": v11,
    "type": "function",
};
const v13 = new Worker(f3, o12);
const v17 = new Array(64);
const v19 = new WeakSet();
new Float64Array(4);
new Uint16Array(256);
class C27 {
}
const v28 = new C27();
64 < 4;
Object.defineProperty(v13, 7, { writable: true, enumerable: true, set: Array });
const v30 = C27[1024n];
f3(v19, WeakSet, v11);
let [] = v17;
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a34;
}
const v36 = new F32(v28);
let v37 = 0;
while (v37 < 2) {
    try { C27.toDateString(-65537n); } catch (e) {}
    try {
        v36.fuck("XM", "XM", v28, ["XM",1024n,v30,v11,C27]);
    } catch(e44) {
    }
    v37++;
}
new F32(v36);
new Uint16Array(1409);
/9f8\xf0\x9f\x92\xa9/diy["compile"]();
try {
    Array(-12302);
} catch(e57) {
}
const v58 = new Uint8Array(3521);
v58.includes(false);
