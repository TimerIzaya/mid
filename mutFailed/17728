const v0 = -Infinity;
function f2() {
    function f3(a4, a5) {
        a5(f3);
        return f3;
    }
    new Promise(f3);
    return Promise;
}
const v10 = [1000000000.0,-1000000000.0,-915.4489818237377,-1.4300566474878214e+308];
const v11 = [-4.0,1.3222560912898785e+308,847.3077697887161,-1.3671265983453207];
try { v11.sort(v11); } catch (e) {}
const v13 = [144502.1408526469,2.0,-1.0,NaN,1000.0,0.9676919886190157];
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    function f19() {
        return v10;
    }
    function f20(a21) {
        v11 && a21;
    }
    Object.defineProperty(a16, 1, { writable: true, enumerable: true, get: f19, set: f20 });
    a16[1];
    try {
        this.e = a18;
    } catch(e24) {
    }
    try {
        this.d = v11;
    } catch(e25) {
    }
}
F14.a = 0.8038000767260765;
F14.a = F14;
const v26 = new F14(v11, -1000000000.0, v10);
v26[1] = v26;
const v27 = new F14(v26, -1000000000.0, v11);
v27.e = v27;
const v28 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v28[2] = v28;
127 % 127;
try { new Uint8ClampedArray(127, f2, 127); } catch (e) {}
new Uint8ClampedArray(127);
new F14(v11, v0, v13);
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this.valueOf().constructor;
    try { new v40(v40, v40, v40, a38); } catch (e) {}
    Math.imul();
}
[1024];
([558338406,-39333])[0];
function f47() {
}
try { f47(); } catch (e) {}
const v51 = 1940694780n == [10624,733951208,4294967296,5138,14];
v51 || v51;
[-55104,-4294967296,2147483648,-121006293,-1807063760,-2,1,17612,913148466,268435456];
const v55 = new Float64Array();
delete v55[-1.5286188982640463e+308];
