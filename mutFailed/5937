let v1 = 268435440;
let v3 = Array;
v3.length;
const v6 = [Float64Array];
const v7 = v6?.values;
v7.length;
try { new v7(); } catch (e) {}
v6.length = 2;
const v13 = v3++;
const v14 = 44149 + 0;
v14 & v14;
!(v14 === v14);
128 - 128;
new v3(128);
const v21 = [-1.7976931348623157e+308,-1000000000000.0,1.7976931348623157e+308,-1000000000000.0,-2.2250738585072014e-308,4.0,-1e-15,NaN];
try { v21.join(Float64Array); } catch (e) {}
try { v21.map(v13); } catch (e) {}
const v24 = [5.0];
const v25 = [451.32386220256785,-1000.0,2.220446049250313e-16,0.7235236117221158,-1.7976931348623157e+308];
class C26 extends v3 {
    static #g;
    static {
        this.d = this;
        function f28(a29, a30, a31) {
            function f32(a33) {
                return v25;
            }
            return f28;
        }
        const v36 = ["function",v25,"function"];
        const o37 = {
            "arguments": v36,
            "type": "function",
        };
        new Worker(f28, o37);
    }
    #c;
    valueOf(a40, a41, a42) {
        try { Math.tan(v13); } catch (e) {}
        let v45 = 606770306;
        v45--;
        Math.tan(v1);
        const v49 = -363262108 << v45;
        v49 + v49;
        Math.atan(-363262108);
        v1++;
        let v53 = Math.cosh(v45);
        v53++;
        return a42;
    }
}
try { C26(); } catch (e) {}
const v56 = new C26();
v56.length;
let v60;
try { v60 = ("boolean").concat(C26); } catch (e) {}
try { v60.codePointAt(44149); } catch (e) {}
("boolean").repeat(1000000.0);
try { ("-4294967295").padEnd(44149); } catch (e) {}
for (const v65 of "-4294967295") {
}
const v66 = new C26();
let v67;
try { v67 = v66.valueOf(44149, 44149, 256); } catch (e) {}
v67 - v67;
const v69 = new C26();
const v71 = Map?.constructor;
try { new v71(v24); } catch (e) {}
const v73 = new Map();
let v74;
try { v74 = v73.entries(); } catch (e) {}
try { v74.next(); } catch (e) {}
function f76(a77) {
    return f76;
}
try { f76.toString(); } catch (e) {}
let v79;
try { v79 = f76(v69); } catch (e) {}
try { v79.toString(); } catch (e) {}
Object.defineProperty(v73, "g", { configurable: true, enumerable: true, get: f76, set: f76 });
Math.log1p();
