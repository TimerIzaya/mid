let v1 = Float32Array;
function f2(a3, a4) {
    const v6 = new Uint16Array(Uint16Array);
    class C7 {
        #p(a9, a10, a11, a12) {
        }
        constructor(a14, a15) {
            try {
                v6.#p();
            } catch(e17) {
            }
        }
    }
    new C7();
    return v1;
}
v1.valueOf = f2;
const v19 = new v1(16);
++v1;
[0.6102153955777975,0.0,4.0,-6.591096496650392,-5.0];
[-946.9259620471797,-663.6090824212772,487259.4223455817,Infinity,2.2250738585072014e-308,-133715.0305981947];
const v23 = [1000000000.0,1e-15,-1.7976931348623157e+308,-2.0,0.5658137936672162,2.220446049250313e-16,1000000000000.0,-61.97523136125312];
v23.valueOf = f2;
v19.byteOffset;
v19 < v23;
v19[221];
new Uint8ClampedArray(2423);
new BigUint64Array(8);
new Uint8ClampedArray(1);
new Int32Array(2509);
new Float64Array(1000);
function f45(a46) {
    return f45;
}
const o56 = {
    "type": "function",
    p(a50, a51) {
        this[1073741825];
        [268435439,4096,-2147483647];
        [1073741824,1810410699,-16874,-40754,1073741825,-2147483649];
        [2,-788167490,16,10,4294967296,-19733,8,128,-2,2147483648];
        return Float64Array;
    },
};
o56.arguments = 1;
new Worker(f45, o56);
