const v0 = [NaN,106.67187319211575,0.5191283882578823];
const v1 = [-8.18459577564591,679025.3455819846,-2.0,-1000000000000.0,1000.0,-1000000.0];
const v2 = [-1000000.0,0.6039668807948344,0.09729878333592779,124774.9089672293,-1e-15,9.52466160649574e+307,NaN,-57125.50191488734,-660.2636719331178];
const v6 = 947910714 >>> 947910714;
const v7 = [10,-2,65537,268435439,-587573564,-13,-256,-42784];
v7[5] = v7;
const v8 = [-3486,-128,-9007199254740990,2,1539015573,16,7];
const v9 = v8[6];
v1.g = v8;
const v10 = [128,6494187,-1236044888];
try {
    v7.__proto__ = v9;
} catch(e11) {
}
Object.defineProperty(v9, v6, { writable: true, configurable: true, enumerable: true, value: v8 });
v10[2] = v10;
const v12 = [-1000000000.0];
v12[0] = v12;
const v13 = [-2.220446049250313e-16,0.1517337841265467,7.001642653676378e+307,-2.0,1000.0,1000000000.0,-1000.0,1000000000000.0,Infinity];
try { v13.map(v12); } catch (e) {}
[1000.0];
function F16(a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.__lookupGetter__;
    try { new v21(947910714); } catch (e) {}
    return arguments;
}
try { F16.call(v1); } catch (e) {}
Uint8ClampedArray.e = Uint8ClampedArray;
let v26;
try { v26 = Uint8ClampedArray.from(v0); } catch (e) {}
v26[2];
for (let v28 = 0; v28 < 32; v28++) {
    v2["p" + v28] = v28;
}
v26.g = v26;
const v31 = new F16();
const v32 = v31?.callee;
Math.min(v1);
-0;
let v37 = 0 - v1;
(v8 >>> v37) >>> v32;
v37--;
try { new v32(-18331, v7, v2); } catch (e) {}
let v42;
try { v42 = v31.toLocaleString(); } catch (e) {}
try { v42.toWellFormed(); } catch (e) {}
v31.e = Uint8ClampedArray;
v31.e = v31;
