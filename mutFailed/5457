class C3 {
    static p(a5) {
        switch (this) {
            case a5:
                try { new a5(this, "CLg1M", 256); } catch (e) {}
                break;
        }
        return 9007199254740992;
    }
    a;
    [-1] = 9007199254740992;
    static [-1];
    static e = 256;
    10000;
    static #p(a8) {
        function f9() {
            return a8;
        }
    }
}
if ("log1p") {
}
function F11() {
    if (!new.target) { throw 'must be called with new'; }
}
const v13 = new F11();
function f14() {
    function f15() {
        let v20;
        try {
        const t0 = 10000n;
        v20 = t0(2n, -536870912n);
        } catch (e) {}
        let v22 = [-174534415n,[v20,v20,v20],10000n];
        const v24 = new Int32Array();
        ({"byteOffset":v22,} = v24);
        return v22;
    }
    return f15;
}
function f25(a26) {
    let v27 = 0;
    do {
        const o31 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o31);
        v27++;
    } while (v27 < 2)
}
Object.defineProperty(v13, "toString", { writable: true, configurable: true, enumerable: true, get: f14, set: f25 });
class C36 extends F11 {
    [v13];
}
new C36();
const v38 = new C3();
const v41 = [4.884917422719438e+307,-673.270676267643,1.232076168738048e+308,0.8093131303599983,Infinity,-2.220446049250313e-16,1000000000.0,-1.3047792922265835e+308,0.6482773134068259];
try { v41.splice(-4294967296n, -9007199254740990); } catch (e) {}
function f43() {
}
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
function f46(a47, a48, a49, a50) {
    function f52() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
    }
    f43();
    const v62 = new Int8Array();
    v62.buffer.slice();
    %OptimizeFunctionOnNextCall(f52);
    let v67;
    try { v67 = v45["find"](..."find", a50, ...v44); } catch (e) {}
    v67 <= a49;
    return arguments;
}
f46();
new C3();
const v71 = new C3();
v71.a;
[-2066131419];
[10,196883903,-7,-4294967296,1073741823,257,65537,-4294967297,2,4];
[9,15];
const o76 = {
};
function f77() {
    return o76;
}
function f78() {
    new Int8Array(1073741823);
    class C82 {
        #valueOf(a84, a85, a86, a87) {
        }
    }
    const o91 = {
        valueOf(a89, a90) {
        },
    };
}
function f92(a93, a94) {
    Object.defineProperty(o76, "h", { writable: true, configurable: true, enumerable: true, get: f77, set: f77 });
    return o76;
}
class C95 {
}
function F99(a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
    function f103() {
        return f43;
    }
    function f104(a105) {
        try { new a105(); } catch (e) {}
    }
    Object.defineProperty(this, "constructor", { get: f103, set: f104 });
    a101 % a101;
    a102 >>> a102;
    const v109 = this.constructor;
    try { new v109(0.8735699512350641, -3.413527541634011e+307); } catch (e) {}
}
new F99(0.941857606566444, 0.941857606566444);
const v112 = [-3.0,4.881274328126838e+307,312.44595323328326,2.220446049250313e-16,531241.1869593523,4.596085397938051,7.697706963097545];
let v113;
try { v113 = v112.sort(v38); } catch (e) {}
const t124 = [2.0788385063601037e+307,3.0,-1e-15,3.0];
t124[1] = v113;
const v115 = [-2.220446049250313e-16,812.1021762082355,-786.7212490139532,0.39403736647156695,-809973.744135708,5.0];
Date.valueOf = f78;
const v119 = new Date();
try { v119.setUTCFullYear(Date, Date, v115); } catch (e) {}
new C3();
class C124 {
    static g = -897042.7196709883;
    static #b;
}
class C125 {
    static {
        for (const v128 in this) {
        }
    }
}
const v129 = new Set();
const v130 = v129.add(v119);
v130.valueOf = f14;
let [v131,,...v132] = v129;
const v133 = v131?.setHours;
try { new v133(v119, v119, v131, v132); } catch (e) {}
let v135 = v131.setUTCHours(v130, Float64Array, v132, 268435441);
v135++;
~v131.setUTCFullYear();
