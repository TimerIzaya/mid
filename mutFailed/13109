let v1 = 5.0;
class C3 {
    static 65535 = v1;
    p(a5, a6) {
        const o15 = {
            valueOf() {
                4294967297 ^ 4294967297;
                Math.cbrt(v1);
                v1++;
                return a5;
            },
        };
        function f17() {
            a5[4037] = Array(4087, -2.220446049250313e-16);
            return Array;
        }
        %PrepareFunctionForOptimization(f17);
        return 5.0;
    }
}
const v21 = new C3();
try { v21.p(5.0, 5.0); } catch (e) {}
const v23 = new C3();
const v24 = new v23();
class C25 {
    n(a27, a28) {
        try {
            a28.toString = this;
        } catch(e29) {
        }
        function F31(a33) {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = this.constructor;
            try { new v34(); } catch (e) {}
            const v37 = new Int8Array();
            v37.length = 415075273;
        }
        const v39 = new Set();
        return v39;
    }
    constructor(a41, a42) {
        const v43 = this?.constructor;
        function f44(a45, a46, a47) {
            const v50 = new Int8Array();
            Int16Array.apply(128, v50);
            return f44;
        }
        try { new v43(a41, v1); } catch (e) {}
        const v54 = v24.b;
        new C3();
        try {
            this.toString = v54;
        } catch(e56) {
        }
    }
}
try { C25.bind(1000.0); } catch (e) {}
new C25(v23, 5.0);
[-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
v21.indexOf;
const v64 = 268435456 >>> (268435456 % 268435456);
v64 ^ -3.0;
try { v64.n(v23, C3); } catch (e) {}
for (let [v68] of "Opx24") {
}
function f69(a70, a71, a72, a73) {
    function f74() {
        a71 ^ "Vre";
        Math.atanh("Vre");
        !"Vre" | ("Vre" * -1.632556010913421e+308);
        return "Vre";
    }
    v21();
    %OptimizeFunctionOnNextCall(f74);
    return a70;
}
const v84 = new C25(v24, v1);
new C25(v21, v84);
try { ("c").normalize(); } catch (e) {}
function F90() {
    if (!new.target) { throw 'must be called with new'; }
    function F92() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v94 = 0; v94 < 25; v94++) {
            const v95 = [601759695];
            const v96 = [1073741824,1073741823,1376142744,1073741825];
            function f97(a98, a99, a100, a101) {
                function F102(a104, a105) {
                    if (!new.target) { throw 'must be called with new'; }
                    a104 % a104;
                    const v107 = this.constructor;
                    v107.bind(a104, F102, this, F102);
                    try { new v107(); } catch (e) {}
                }
                -(-1073741824);
                Math.cos(-1073741824);
                try { v96["find"](..."find", a101, ...v95, ...v96); } catch (e) {}
                return v94;
            }
            f97.f = f97;
            for (let v116 = 0; v116 < 5; v116++) {
                v116 % v116;
                f97();
            }
        }
    }
    try { F92.bind(v64); } catch (e) {}
    new F92();
}
const v121 = new F90();
const v122 = v121?.constructor;
function f123() {
}
f123();
let v125 = 0;
v125++;
v125 < 5;
try { new v122(); } catch (e) {}
