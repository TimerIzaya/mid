let v0 = "bigint";
let v2 = "bigint";
const o6 = {
    valueOf() {
        v0 *= v0;
        return v0;
    },
};
new Int16Array(93);
new Int16Array(757);
const v13 = new Int16Array(410);
function F14() {
    if (!new.target) { throw 'must be called with new'; }
    const o26 = {
        valueOf() {
            Math.expm1(-1.4349773070883671);
            15 / -1.4349773070883671;
            const v23 = this ^ this;
            Math.cosh(this);
            Math.sign(v23);
            return 1000;
        },
    };
}
let v27 = new F14();
const v28 = new F14();
const v29 = new F14();
let v30 = 1439;
const v32 = new Float32Array(v30);
const v37 = new Uint16Array();
v27 |= v28;
v37.length <<= v30;
[v30,...v2] = v13;
let v38;
try { v38 = v2(64); } catch (e) {}
v38[Int16Array] = v2;
let {"length":v39,} = "klyS";
v13[9];
v32[6] = v29;
