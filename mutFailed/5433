function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -268435456;
    } catch(e3) {
    }
    try {
        this.d = -268435456;
    } catch(e4) {
    }
    try {
        new BigInt64Array(257);
        class C8 {
        }
        this.h = -268435456;
        const v9 = [];
        v9[0] = v9;
        Math.atan2([], -40875);
    } catch(e14) {
    }
}
new F0();
new F0();
new F0();
const v20 = new Int8Array(729);
new Uint16Array(2030);
const o24 = {
};
new v20();
function F26(a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = 2030;
    const v31 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
    const v32 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
    class C33 {
        constructor(a35, a36) {
            super[v32] = v31;
        }
    }
    const v37 = new C33(v31, v32);
    function f38(a39) {
    }
    const v42 = [v37];
    const o43 = {
        "arguments": v42,
        "type": "function",
    };
    new Worker(f38, o43);
}
new Int8Array(256);
const v48 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v49 = 0; v49 < 5; v49++) {
    function f50() {
        try {
            v48.forEach();
        } catch(e52) {
            e52.message;
            const v54 = e52.constructor();
            const o55 = {
                "execution": v54,
            };
        }
        return f50;
    }
    f50.call(v48, f50, v48, f50);
    %OptimizeFunctionOnNextCall(f50);
}
