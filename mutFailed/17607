const v1 = new WeakMap();
const v2 = [-Infinity];
new Uint8ClampedArray();
function f5() {
    const o10 = {
        210: "valueOf",
        ..."replace",
        get c() {
            super[this] = -4.0;
        },
        12: "replace",
    };
    return o10;
}
[22.290803867618138,-5.0,9.414985371516547,-2.2250738585072014e-308,5.0,-1000000000.0,2.0];
const v12 = [0.7620436482096925,-2.0,-1.0,1.0,-96908.27590548515,-8.885849446016085,-3.0,3.0,-1.0,-2.0];
const v14 = [[v2]];
class C15 {
    set d(a17) {
    }
}
const v18 = [];
function f19(a20, a21) {
    v14[1];
    const v25 = new BigUint64Array();
    const v26 = v18.constructor;
    try { new v26(v25, 6, 6); } catch (e) {}
    return v12;
}
v18.toString = f19;
("minor").fontcolor(v18);
([v1])[0];
function f35() {
    return Float64Array;
}
const v38 = new Float32Array();
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    try { new v45(v38, a43, 2); } catch (e) {}
    this.h = a42;
}
try { SharedArrayBuffer.call(-2); } catch (e) {}
const v51 = new SharedArrayBuffer(62);
const v52 = v51.slice();
v52.byteLength = v52;
new Int8Array(v1);
const v57 = new Set();
function F58(a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a60;
    } catch(e62) {
    }
    try {
    } catch(e63) {
    }
    if (a61 >= Uint8ClampedArray) {
    }
    try {
    } catch(e65) {
    }
    try {
        const v66 = v57[this];
        try {
            new F58(v66, -268435456n);
        } catch(e69) {
        }
        this.b = Set;
    } catch(e70) {
    }
}
