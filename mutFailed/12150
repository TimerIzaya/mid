const v2 = new Uint16Array(70);
const v5 = new Uint16Array(8, Uint16Array, v2);
new BigUint64Array(6);
function f9(a10, a11, a12, a13) {
    const o19 = {
        __proto__: v5,
        ...v5,
        "d": a12,
        [Uint16Array](a15, a16) {
            %VerifyType(BigUint64Array);
            try {
                super.p(a10, a12, a16);
            } catch(e18) {
            }
            return 6;
        },
        444735786: a12,
    };
    return o19;
}
f9(6, 6, 8, v5);
f9(8, 70, 8, f9(6, 70, 70, v2));
class C29 {
    set h(a31) {
        function F32(a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
            const v36 = this.constructor;
            v36.caller;
            try { new v36(this, F32, F32); } catch (e) {}
        }
        new F32(F32, F32);
        new F32();
        a31[-12] = -9200;
        0 instanceof a31;
        129 === this;
        let v43 = ~-9200;
        v43 = 129;
        const t36 = this[5];
        const v45 = delete t36?.[12];
        try {
        } catch(e46) {
        }
        const v49 = new Int8Array(520);
        for (let v50 = 0; v50 < 5; v50++) {
            v49.indexOf(v50);
        }
        super.MIN_SAFE_INTEGER = v45;
    }
    h;
    6;
    #a;
    f = -4;
    21;
    [-12];
}
new C29();
new C29();
new C29();
Map(Uint16Array);
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e61) {
    }
}
class C62 extends C29 {
    static {
    }
}
const o64 = {
};
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
try {
    function f68() {
    }
} catch(e69) {
}
const o70 = {
};
try {
    const o71 = {
    };
} catch(e72) {
    function f73(a74, a75, a76, a77) {
        const o81 = {
            n(a79, a80) {
            },
        };
    }
}
try {
    const o82 = {
    };
} catch(e83) {
}
try {
} catch(e84) {
    function f85(a86, a87, a88, a89) {
    }
}
