function f0() {
}
[356452.24384532706,-1.7072765720990311e+307,-8.018402003899866e+307,NaN];
function f5() {
    return -2.220446049250313e-16;
}
f5.length = f5;
const v8 = new Int8Array(4);
try { v8.reduce(4); } catch (e) {}
const v11 = 8 - 8;
for (const v13 in "1024") {
}
class C14 {
}
try { new C14(); } catch (e) {}
("1073741823").trimRight()[8];
const v20 = [];
function f21(a22, a23) {
    class C24 {
    }
    5.0 / -2.220446049250313e-16;
    new Uint8Array(257);
    class C34 extends Uint16Array {
        constructor(a36, a37, a38) {
            super();
        }
    }
    Math.exp();
    Math.log(-23525);
    function f42() {
        return f42;
    }
}
v20.constructor = f21;
new Float32Array(8);
const v45 = /abc?/gvmy;
try { v45.toString(); } catch (e) {}
v45.exec("Q8F");
const v48 = /(x)(x)(x)\1/uis;
function f49(a50, a51, a52, a53) {
    const o60 = {
        2: a52,
        __proto__: a53,
        [v48](a55, a56, a57, a58) {
            super.test();
        },
    };
    o60[2];
    return a50;
}
const v62 = f49();
const v63 = f49();
function F65() {
    if (!new.target) { throw 'must be called with new'; }
}
2 >>> 2;
Math.cos(2);
new v11();
class C73 {
    [-1] = -1.6777590795239637e+308;
}
try { BigUint64Array(v62, v63, -2.220446049250313e-16); } catch (e) {}
new BigUint64Array(215);
new BigInt64Array(2);
new Int32Array(15);
new Float32Array(1912);
class C91 {
    #c = "toUpperCase";
    get a() {
        const v93 = this << "toUpperCase";
        const v94 = v93 ^ v93;
        let v95;
        try { v95 = v94(v94, this, v94, v94, v93, this); } catch (e) {}
        v95[v94] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
new C91();
new C91();
function f100(a101, a102, a103) {
}
class C104 {
}
function F105(a107, a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    const v110 = this.constructor;
    try { new v110(a109, C104); } catch (e) {}
}
[1000000.0,8.781355748342163e+307];
[0.15502705304815534,1.0,1e-15,-5.0];
new BigUint64Array(104);
new Int32Array(129);
new Uint8ClampedArray(148);
class C133 {
}
const v134 = new C133();
class C135 {
    [255] = 9007199254740990;
    static m(a137, a138) {
    }
    [false] = false;
    static [255];
    [v134] = v134;
}
/a\W?/d;
