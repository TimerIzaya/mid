const v3 = /(J5a{0,1}?)/y;
const v4 = [601759695];
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    ~a8;
    try { a7(); } catch (e) {}
    const v13 = a9 << a9;
    v13 % v13;
    function f15() {
        return a7;
    }
    const v17 = new Int8Array();
    BigUint64Array.length;
    const v21 = BigUint64Array * 536870887;
    let v22 = v21 - v21;
    v22++;
    const v24 = v21 ** v21;
    try { Number(v3); } catch (e) {}
    Number.isNaN(v24);
    const v29 = v17.buffer.__defineGetter__;
    try { v29(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f15);
    let v32;
    try { v32 = v5["find"](..."find", a10, ...v4); } catch (e) {}
    return v32;
}
class C33 {
    constructor(a35) {
        try {
            const o37 = {
                get a() {
                    return this;
                },
            };
            o37.a = "grow";
        } catch(e38) {
        }
    }
    set b(a40) {
        this[Symbol.isConcatSpreadable];
        try {
            super.find();
        } catch(e45) {
        }
    }
    ["grow"] = -4.0;
    m(a47, a48) {
        try {
            v3.length = 1;
        } catch(e50) {
        }
        return 1;
    }
    [-2147483648] = -4.0;
}
const v51 = new C33();
const v52 = new C33();
const v53 = new C33();
const v54 = [v53,v51,v53];
[-4.0,v54,v53,"grow"];
Math.expm1(-Infinity);
new BigInt64Array();
[v53,C33,-2147483648,v54,v52];
function f64() {
    const o91 = {
        next() {
        },
        m(a68) {
            let v67 = this;
            a68.f = a68;
            const o69 = {
            };
            function f70(a71, a72, a73) {
            }
            try {
            } catch(e74) {
            }
            try {
                const o75 = {
                };
            } catch(e76) {
            }
            try { Math.expm1(); } catch (e) {}
            let v79 = -9007199254740991;
            v79++;
            v79 >> -4.0;
            class C82 {
            }
            C82.name.codePointAt();
            const v87 = new Int8Array(3938);
            let v88 = 3;
            v67++;
            [...v88] = v87;
            const o90 = {
            };
        },
    };
    o91.m(o91);
}
f64();
for (let v94 = 0; v94 < 32; v94++) {
    v52["p" + v94] = v94;
}
const v100 = new Float64Array(-2147483648);
const v101 = new Float64Array(v100);
v100 ** v101;
function f103(a104, a105) {
    const o106 = {
        "d": a105,
        "c": -2147483648,
    };
    return o106;
}
Math.tanh(0.3840861739144876);
