class C3 {
    #o(a5) {
        function f6() {
            function f7() {
                return f7;
            }
            return f7;
            ("number").slice();
            return "MIN_VALUE";
        }
        return -7.048375554346508;
    }
    static #a = -4294967295;
    valueOf(a11) {
        new Float32Array(4);
        delete arguments[2];
        function f17(a18, a19) {
            const o20 = {
                ...a18,
            };
            o20.d;
            return f17;
        }
        new BigInt64Array(15);
        new Uint8Array(2);
        return a11;
    }
}
new C3();
let v29 = new C3();
let v30 = new C3();
const v32 = new Set();
const v37 = new Int32Array(4096);
new Int8Array(v37);
function F41(a43) {
    if (!new.target) { throw 'must be called with new'; }
    function f44() {
        const v45 = /xEz\xe2\x81\xa3/gumy;
        function f46(a47, a48, a49) {
            return v45;
        }
        new Uint8Array(105);
        return f44;
    }
    try {
        class C53 extends f44 {
            #h = f44;
        }
        new C53();
        new C53();
    } catch(e56) {
        v30 = e56;
        for (let [i60, i61] = (() => {
                10 >>> 10;
                return [0, 10];
            })();
            i60 < i61;
            i60++) {
        }
        [f44,,v29,a43] = v32;
        v30.b += f44;
        F41 <= F41;
        const t61 = "toString";
        delete t61?.length;
        Math.atan2(1073741823, 1073741823);
        const v75 = new Worker();
        const o79 = {
            next(a77, a78) {
                v75[2] = v75;
                return 2;
            },
        };
        Math.sinh(128);
        const v85 = [601759695];
        return v85;
        new Int16Array(1024);
        new Float64Array(64);
        for (let i = 0; i < 10; i++) {
            v85[v85];
        }
        const o93 = {
        };
        new BigUint64Array(309);
    }
}
new F41(F41);
