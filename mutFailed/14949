const v3 = [478138670,10,4096,536870912,-1];
const v4 = [6];
const v5 = [2066654767,11,-26258,-9223372036854775807,64,9,10000,13777,-4294967295];
class C6 {
    static 4 = v4;
    #e = v3;
    [v3] = v4;
    static o(a8, a9, a10, a11) {
        const v12 = /(?:a*)+q(?<a>.)/guds;
        function f13(a14) {
            const o18 = {
                set b(a16) {
                },
                get d() {
                    return a14;
                },
                __proto__: v12,
            };
            return o18;
        }
        for (let i22 = 0, i23 = 10; i22 < i23; i23--) {
            for (let v30 = 0; v30 < 50; v30++) {
                f13(v12);
            }
        }
        try {
            const v34 = [Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849];
            function f36(a37, a38) {
                new Int32Array(v34);
                a37();
                a38();
                return f36;
            }
            a10.padStart(1073741823, "flags");
        } catch(e43) {
        }
        function F44(a46, a47) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = "1073741825";
            } catch(e48) {
            }
            try {
                this.g = C6;
            } catch(e49) {
            }
            try {
                this.c = "1073741825";
            } catch(e50) {
            }
        }
        new F44(a9, v5);
        new F44("toString", a8);
        new F44("toString", v4);
        return F44;
    }
}
new C6();
new C6();
new C6();
class C57 extends C6 {
    static #valueOf(a59, a60, a61, a62) {
        a60["slice"](v3, a62);
        const v65 = super.d;
        ({"b":a60,"length":a59,} = "MAX_VALUE");
        const v68 = new Int8Array(242);
        try { Int16Array.apply(a59, v68); } catch (e) {}
        try { v65.get(v65, a62, "MAX_VALUE"); } catch (e) {}
        return a60;
    }
    static e;
    #g = v5;
    ["toString"];
    1;
    constructor(a73, a74) {
        const v75 = this.constructor;
        try { new v75(); } catch (e) {}
        const v78 = Math.atan2(this);
        v78 ** v78;
    }
    4096;
}
new C57();
new C57();
const v82 = new C57();
v4[9] = v82;
const v83 = [0.444499086448399];
[-969.1403827133161,-1.5847639255057438e+308,3.0,-7.225227898434435,-0.6627193903883715,-Infinity,1.7976931348623157e+308,-0.0];
[-11.201494000359048,1000.0];
v3[1];
const v88 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v89 = [601759695];
const v90 = [1073741824,1073741823,1376142744,1073741825];
try {
    C57.__proto__ = v3;
} catch(e91) {
}
v88 < v83;
function f94(a95, a96, a97, a98) {
    function f100() {
        const o110 = {
            "e": -4294967295,
            ...v88,
            ..."Vre",
            "c": a97,
            "type": "MAX_VALUE",
            get a() {
                eval("Vre");
                return -268435456;
            },
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a108, a109) {
                return a109;
            },
            ..."Vre",
            4: "Vre",
            5: -4294967295,
            6: -268435456,
        };
        return v82;
    }
    f100();
    %OptimizeFunctionOnNextCall("toString");
    const v113 = new Int32Array(Int32Array, Int32Array, Int32Array);
    function F114(a116, a117) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v118 = new F114(Int32Array, v113);
    function f119(a120) {
        let v121;
        try { v121 = v118.resize(v113, F114, Int32Array, a120); } catch (e) {}
        v113.length |= v121;
        return v121;
    }
    f119();
    let v124;
    try { v124 = v90[a97](..."find", a98, ...v89, ...v90, ...522675525n); } catch (e) {}
    v124 <= a97;
    return arguments;
}
for (let v126 = 0; v126 < 10; v126++) {
    f94();
}
%OptimizeFunctionOnNextCall(f94);
f94(v90, f94, 522675525n);
