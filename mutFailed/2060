new BigInt64Array(1);
async function* f6(a7, a8) {
    return 1;
}
class C9 {
    static f = "getInt8";
    get a() {
        const v12 = Symbol.matchAll;
        const v15 = new Float32Array(55);
        new Float64Array(v15);
        this[v12] = v12;
        [1.0,"getInt8",1.0];
        const v19 = [1.0,4.0,1.0];
        [v19,this,v19,1.0,4.0];
        return this;
    }
    static {
        try {
            this.#d;
        } catch(e23) {
        }
    }
    [4.0] = "getInt8";
    #b;
}
new C9();
new C9();
new C9();
new Map();
new WeakMap();
function f31() {
    return 1.0;
}
const v33 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
function f34(a35, a36) {
    return f34;
}
const v39 = new Set(v33);
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a42;
    } catch(e44) {
        for (let [v45,v46] of a42) {
        }
    }
    try {
        const t47 = v39[this];
        let v48 = delete t47?.d;
        v48 = a42;
        Math.clz32();
        Math.acos(this);
        Math.max(255);
        new F40();
    } catch(e55) {
    }
}
const v56 = new F40();
let [v57,,...v58] = v39;
const v61 = v58[Symbol.toPrimitive];
const v64 = new Set([2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614]);
function F65(a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a67;
    } catch(e69) {
        for (let [v70,v71] of a67) {
        }
    }
    try {
        const t70 = v64[this];
        let v73 = delete t70?.d;
        v73 = a67;
        Math.clz32();
        Math.acos(this);
        Math.max(255);
        new F65();
    } catch(e80) {
    }
}
new F65();
v56.toString = v61;
new F40();
new Float32Array();
function F85(a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
}
const v91 = new Date();
v91["getUTCMilliseconds"]();
