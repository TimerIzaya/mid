const v0 = [];
const v1 = [-14,21365,-4294967297,3,1830423412,-65537,8];
let v2 = [-2693,55765,268435456,-9534,-9223372036854775808,-2,9007199254740990];
function f3(a4) {
    const o7 = {
        "maxByteLength": 15,
    };
    const v9 = new ArrayBuffer(11, o7);
    new BigUint64Array(v9);
    return v0;
}
v2.valueOf = f3;
const v12 = [-866048709,-9007199254740991,-657402602,536870912,4294967296,-4294967297];
v12[5] = v12;
function F13(a15) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = F13;
    try {
        this.a = v0;
    } catch(e16) {
    }
}
new F13(v1);
++v2;
const v19 = v12.length;
try {
    v0.length = v19;
} catch(e20) {
}
const v21 = new F13(v12);
function f22() {
    return f3;
}
function f23(a24) {
    const t34 = [-24725,-9223372036854775807,268435439,-267077871,-63246,2147483647,-12];
    t34.length = 99;
}
Object.defineProperty(v21, Symbol.toPrimitive, { writable: true, enumerable: true, get: f22, set: f23 });
v21.b = v21;
new F13(v2);
const v30 = new F13(v12);
class C33 {
    m(a35, a36, a37) {
        try {
            const o38 = {
            };
        } catch(e39) {
        }
    }
}
const v41 = Date();
const v42 = [-1000000000.0,-2.220446049250313e-16,-4.0,1.7976931348623157e+308,5.4589320762765965,1000000000.0,-2.150194134924215,1.1952741677561246e+308,-2.654052405190532,1000000000.0];
try { v42.slice(Array, 256); } catch (e) {}
const v44 = [2.0,-3.0,-Infinity,-7.12581808744674,0.08782064782338173,-28869.071041384363,-308686.3868764549];
try { v44.at(Array); } catch (e) {}
let v47 = 536870889;
let v50 = --v47;
const v51 = C33 & 65536;
++v50;
Math.imul(v51, 65536);
v51 - v47;
Math.tanh(v51);
for (let v56 = 0; v56 < 5; v56++) {
    v56 >> v56;
    const v58 = v56 + v56;
    try { C33.p(v41, v58); } catch (e) {}
}
const v60 = new Array(256);
try { v60.groupToMap(v30); } catch (e) {}
try { Math.cosh(v21); } catch (e) {}
-2147483648 * -2147483648;
-2147483648 ^ 8.868704382732872e+307;
