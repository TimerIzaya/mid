const v2 = new BigInt64Array(7);
let v3 = 12;
let v4 = Int32Array;
let v5 = new v4(7);
Int32Array.prototype = Int32Array;
const v8 = new Int32Array(2);
if (2) {
    v5 &= v5;
    v4 = Int32Array;
} else {
    const v9 = v8[v8];
    [2,v9,v9,BigInt64Array];
    [v9];
    [7];
    throw v8;
}
const v14 = v8[1];
const v15 = [173.51329928574182,7260.905870802468,1000000000.0,2.0,1.2061694767605006e+308,-195.23952800899087,-1000000000.0,NaN];
[NaN,1000.0,1e-15,0.03987958178242168,-5.129172975335418,-1e-15,411616.8311298215];
const v17 = [0.3959472269206582,2.0,3.0,-529869.4567983653,912.118459512232,0.5513955501491558,-467610.9667668609];
function f18() {
    return v17;
}
216 ^ 216;
const v22 = new Uint8Array(216);
const o23 = {
    __proto__: v2,
    "c": v3,
};
v4 !== o23;
v22[27] = v22;
Uint16Array.d = Uint16Array;
const v27 = new Uint16Array(4);
v3 /= v22.byteOffset;
Symbol.iterator;
const o39 = {
    [v5]() {
        let v32 = 10;
        const o38 = {
            next() {
                v32--;
                const v36 = v32 == 0;
                const o37 = {
                    "done": v36,
                    "value": v32,
                    "e": 4,
                    ...this,
                    "g": v27,
                    __proto__: this,
                    "c": BigInt64Array,
                };
                return o37;
            },
        };
        return o38;
    },
};
let v40;
try { v40 = v27.join(v8); } catch (e) {}
v40 = 7;
new Array(9);
-1.3233509771103662e+308 + -1.3233509771103662e+308;
Math.asin(4);
const v49 = 4 % -2086;
v8 ^ -2086;
const v51 = v14.tanh(-2086);
v49 >>> -1.3233509771103662e+308;
-1.3233509771103662e+308 || -2086;
var c = v51;
function f58() {
    return v15;
}
new Int16Array(4096);
const v62 = new Date(Date);
v62.setFullYear();
