let v1 = -1173447804;
const v6 = [-4294967296n,-4294967296n,22500n];
try { v6.sort(22500n); } catch (e) {}
const v8 = [57304,v1,-4294967296n,1024n];
function f9(a10) {
    const v13 = Symbol.iterator;
    const o19 = {
        [v13]() {
            let v15 = 10;
            const o18 = {
                next() {
                    v15--;
                    return -886003937;
                },
            };
        },
    };
    return -4294967296n;
}
Symbol.g = v6;
Symbol.g = Symbol;
v8[Symbol.toPrimitive] = f9;
const v22 = [v8,v6,57304,1024n,v8];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a25;
    a25[1600] = 57304;
    this.h = a25;
    const v28 = Symbol.toPrimitive;
    Symbol.for(v28.description);
    a25[v28] = Symbol;
    function f32(a33, a34) {
        return v1;
        class C35 {
        }
        return -4294967296n;
    }
    a26.toString = f32;
    this.h = this;
    try { a26.group(22500n); } catch (e) {}
    try {
        this.b = a25;
        const v37 = /m3/udimy;
        v37.lastIndex = v37;
        const v38 = /a\Sc\u0034+/vdi;
        const v39 = /\xed\xa0\x80/disy;
        v39.b = Symbol;
        v39.b = v39;
        a26 = 129;
        try { v38.exec(a25); } catch (e) {}
    } catch(e41) {
    }
}
const v42 = new F23(v8, v22);
new F23(v6, v6);
const v44 = new F23(v8, v8);
Object.defineProperty(v44, "g", { writable: true, configurable: true, enumerable: true, value: F23 });
v44.g = v44;
if (true) {
} else {
    try {
        v42.__proto__ = v6;
    } catch(e49) {
    }
}
function f51() {
    return v8;
}
function f52(a53) {
    function f54(a55, a56) {
        const o57 = {
            ...a55,
        };
        return f54;
    }
}
Object.defineProperty(Uint8ClampedArray, "d", { writable: true, enumerable: true, get: f51, set: f52 });
Uint8ClampedArray.d = Uint8ClampedArray;
const v58 = new Uint8ClampedArray();
let v59;
try { v59 = v58.entries(); } catch (e) {}
try { v59.next(); } catch (e) {}
const v61 = [v58,v58];
try { v59(v42, -4294967296n, v8); } catch (e) {}
v1 = 129;
v8[1600];
try {
    const v64 = new Uint8ClampedArray(v1, v1, 129);
    v64.b = v64;
} catch(e65) {
}
const v66 = [v61,v58];
try { v66.group(v66); } catch (e) {}
for (const v68 in v66) {
    let v69;
    try { v69 = v68.replace(v68, v68); } catch (e) {}
    try { v69.toLocaleLowerCase(); } catch (e) {}
}
