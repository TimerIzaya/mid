const v0 = [];
function f1() {
    const o7 = {
        "a": v0,
        "e": v0,
        o() {
            this[this];
            for (let v4 = 0; v4 < 32; v4++) {
                v0["p" + v4] = v4;
            }
            return v0;
        },
    };
    return o7;
}
const v8 = f1();
const v9 = f1();
const v10 = f1();
function F11(a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let {"length":v14,} = v0;
        Object.defineProperty(v9, "h", { configurable: true, enumerable: true, value: v14 });
        [1.215947601778705,-1.7976931348623157e+308,-1000.0,4.0,292285.49027976533,1.6095558073235513e+308];
        const v16 = [-4.814815798939245,3.0,1000.0,0.48552714180215084,0.6915788057809994,323.59987931477804,-1.0,-6.459570374182297];
        [1000000.0,6.0207635148246865,2.2250738585072014e-308,1000000000000.0,0.015400505434437939,-5.0,0.40989886043163204,-947.3577314257712,0.0];
        this.c = a13;
        v16.h = v14;
        const o18 = {
            "d": this,
            ...this,
        };
    } catch(e19) {
    }
    const v21 = [a13,a13,v9,a13];
    Reflect.apply(v10.o, v8, v21);
    Object.defineProperty(v21, v10, { configurable: true, value: v10 });
    try {
        this.d = v9;
    } catch(e24) {
    }
    try {
        this.b = v0;
    } catch(e25) {
    }
}
new F11(v8);
new F11(v9);
Uint32Array[1] = 15;
const t49 = 15;
const v30 = new t49();
[v30];
new F11(v8);
const v39 = new Set();
const v41 = [];
const v43 = [0.3012804967226079,85204.01188321039,653.7200248137515,0.7021499874307531,803753.7144966745,852811.0132933464,-9.957521439166277e+307,-2.2210475327078026e+307];
const v44 = [0.16312007947772267];
const v45 = [NaN,-1e-15];
class C46 {
    [1802204217] = v45;
    static 3516;
    #h;
    static 0 = 1802204217;
    constructor(a48, a49) {
    }
    static [v43] = v44;
    static 13;
    static #c = v41;
}
v39["delete"](839612.5677247904);
const v52 = new Float64Array(127);
try {
} catch(e53) {
}
function f54() {
    const o58 = {
        ...1.0,
        set b(a57) {
        },
    };
    return o58;
}
f54();
const v60 = (127).constructor;
new Int8Array(1073741823);
let v64 = 9223372036854775807;
const o65 = {
    __proto__: v52,
    [f1]: v10,
};
new Float64Array(v60, v60, 1073741823);
v64 = 65536;
1024 >>> 1024;
try { new Uint32Array(1024, Uint32Array, 127); } catch (e) {}
new Uint32Array(1024);
Float64Array.e = Float64Array;
const v75 = new Float64Array(159);
try { v75.filter(Float64Array); } catch (e) {}
[v75];
[v52];
const v79 = [];
try {
    v79.some();
} catch(e81) {
    e81.stack;
}
[Float64Array,Uint32Array,159,127];
[1000000000.0,-1000.0];
function F85(a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(a87); } catch (e) {}
    const v90 = this.constructor;
    try { new v90(); } catch (e) {}
    a87--;
    a87 & a87;
}
function f94(a95) {
    return a95;
}
class C96 extends f94 {
    [1024] = Float64Array;
    [1073741823];
}
new F85();
("29753").replaceAll("29753", "b").split("b");
("boolean").split("toString");
Float64Array[4];
function F106(a108, a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a109;
}
let {...v113} = [1000000000000.0,0.9960435535667199,1000.0,-1.6540773985510377e+308,0.3018853678306006,410.9648048644401,-6.0085450863810586,-529.8311372035074];
try {
    v113.fuck(v113);
} catch(e115) {
}
function f116(a117, a118, a119) {
}
function f120(a121, a122, a123, a124) {
}
const v127 = new Uint8ClampedArray(104);
v127.toLocaleString().toLocaleLowerCase();
