new BigInt64Array(7);
const v5 = new Int32Array(0);
const v8 = new Uint8ClampedArray(2);
class C9 extends Uint8ClampedArray {
    constructor(a11, a12, a13, a14) {
        super(v5);
        super.with(2, this);
        `o${Uint8ClampedArray}493572248`;
    }
    [Int32Array];
    static #f = 7;
    toString(a18, a19) {
        new Uint8ClampedArray(1937);
        new Uint32Array(3300);
        const v28 = new BigUint64Array(16);
        return v28;
    }
}
const v29 = new C9(BigInt64Array, v8, 2, 0);
const v30 = new C9(Uint8ClampedArray, v5, 0, 7);
new C9(0, v30, 2, 0);
class C36 {
    static ["22307"] = "AanB8";
    b;
}
new C36();
new C36();
const v46 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
new Uint16Array(v46);
let v48 = 0;
do {
    const v49 = [v29];
    const v50 = [v49,v49,v49,v49];
    [v50,Int32Array,v50,"22307"];
    v48++;
} while (v48 < 6)
Symbol.hasInstance;
const o59 = {
    "execution": "async",
    "type": "minor",
};
gc();
class C62 {
    #n(a64, a65) {
        let v67;
        try { v67 = a65["matchAll"](1000000000000.0, 128, this); } catch (e) {}
        const t46 = "matchAll";
        t46[9] = 128;
        v67?.[1726887188];
        return this;
    }
    static b = 1000000000000.0;
    static #e;
    #b = 128;
}
new C62();
const v70 = new C62();
new C62();
try {
    v70.g = Symbol;
} catch(e72) {
}
const o76 = {
    "execution": "async",
    "type": "minor",
};
gc(o76);
function f81() {
    Math.expm1(3375);
    const v87 = new Float64Array(64);
    v87[5] = v46;
    [v87,v46];
}
const v89 = [-1539,1,12];
function f90() {
    return f90;
}
function f91(a92, a93) {
    const o94 = {
        [a92]: v89,
    };
    return a92;
}
f91(f91);
f91();
f91(f90);
new f81();
