new Uint16Array(6);
9007199254740991n * 9007199254740991n;
const v7 = [-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0];
v7["findIndex"](gc);
new Float64Array(442);
new Int16Array(28);
const v17 = new Float32Array(255);
new v17(0);
Math.tanh(-1000.0);
class C24 {
}
const v25 = new C24();
function f26(a27, a28, a29, a30) {
    const o34 = {
        get f() {
            new a28();
            return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
        },
        ...a30,
    };
    return o34;
}
f26(C24, gc);
class C36 extends f26 {
    constructor(a38, a39, a40) {
        super(v25, this);
        new C24();
        for (let v42 = 0; v42 < 25; v42++) {
            a40["-4096" + v42] = v42;
        }
    }
}
Uint8ClampedArray <= Int16Array;
for (let v48 = 0; v48 < 10; v48++) {
    function F49(a51, a52, a53, a54) {
        if (!new.target) { throw 'must be called with new'; }
        ~a52;
        a54 | a54;
        const v57 = this.constructor;
        try { new v57(); } catch (e) {}
        typeof Float32Array;
    }
    new F49();
}
new Uint16Array(6);
const t45 = 6;
new t45(197);
function f66(a67) {
    const o68 = {
        ...a67,
        9: 0,
        256: 65536,
        536870889: a67,
        6: a67,
        [a67]: a67,
    };
    return o68;
}
f66(0);
class C70 {
}
new BigUint64Array(6);
for (let v73 = 0; v73 < 10; v73++) {
}
function f75() {
    function f76(a77) {
        for (let v78 = 0; v78 < 5; v78++) {
            function f79() {
                function f81() {
                    return 522675525n;
                }
                Reflect.construct(Int8Array, v7);
                Symbol.toPrimitive.description.codePointAt();
                return f76;
            }
            f79();
            %OptimizeFunctionOnNextCall(f79);
        }
    }
    return f76;
}
class C93 extends Int8Array {
    [12];
}
new C93(1564);
function f95(a96) {
    return Uint8Array;
}
Object.defineProperty(Uint8Array, Symbol.toPrimitive, { get: f75, set: f95 });
const v99 = new Uint8Array();
Math.log10(v99.constructor);
