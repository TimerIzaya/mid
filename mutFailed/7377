class C3 {
    #b = "n";
    toString(a5, a6) {
        function f7() {
            Math.log1p(2.220446049250313e-16);
            return a6;
        }
        this.toString = f7;
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            this.b = a14;
            try {
                this.b = C3;
            } catch(e15) {
            }
        }
        const v16 = new F11(this, 4294967297);
        const v17 = new F11(4294967297, v16);
        new F11(F11, v17);
        return -1.7976931348623157e+308;
    }
    [-1.7976931348623157e+308];
    5 = -1.7976931348623157e+308;
}
const v19 = new C3();
function f20() {
    const o21 = {
    };
    return o21;
    return v19;
}
v19[Symbol.toPrimitive] = f20;
const v24 = new C3();
const v25 = new C3();
function f26(a27, a28, a29) {
    const o42 = {
        "g": a28,
        "e": -1.7976931348623157e+308,
        "b": v24,
        "d": v24,
        [v24]: -1.7976931348623157e+308,
        [v19]: a28,
        o(a31, a32) {
            try { C3.hypot(a32, a29, this, a31, a31); } catch (e) {}
            const o34 = {
            };
            try {
                o34.e = a29;
            } catch(e35) {
            }
            try {
                const o36 = {
                };
                o36.e = a29;
                o36.c = a31;
            } catch(e37) {
            }
            try {
                const o38 = {
                };
                o38.e = a29;
                o38.c = o38;
                o38.a = a31;
            } catch(e39) {
            }
            try {
                const o40 = {
                };
                o40.e = a29;
                o40.c = a31;
                o40.g = -1.7976931348623157e+308;
            } catch(e41) {
            }
            return a28;
        },
    };
    return o42;
}
f26(v24, v24, C3);
const v44 = f26(v24, v25, v24);
f26(v24, v25, v24);
class C46 extends f26 {
    b = "n";
    o(a48, a49, a50) {
        a50[59];
        Reflect.construct(f26, [C3,v24,v25], f26);
        return v44;
    }
    static #b = v25;
    #toString(a56, a57, a58) {
        a57["toString"](this, "toString", "toString", false);
        %VerifyType(a57);
        /[[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]]/vim;
        for (let i64 = 0; i64 < 10; i64++) {
            try { ("boolean").trimEnd(); } catch (e) {}
            try {
                const o72 = {
                };
            } catch(e73) {
            }
        }
        C46 - false;
        return v19;
    }
}
new C46();
new C46();
new C46();
/na(?:ab)|cde(?:a+)?/;
