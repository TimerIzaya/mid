function f1() {
}
%OptimizeFunctionOnNextCall(f1);
class C2 {
}
const t5 = "NaN";
t5[2] = "NaN";
try { ("d").strike(); } catch (e) {}
const v10 = new Uint8ClampedArray();
try { v10.reduceRight(f1); } catch (e) {}
URIError(Float64Array);
2035 - 2035;
new Array(2035);
let v19 = 5;
v19--;
const v22 = -11 || v10;
v22 - v22;
new Uint8ClampedArray(231);
class C26 {
    #m(a28, a29, a30) {
        for (const v31 in a29) {
            (delete this?.h).__proto__;
        }
    }
}
C26.d = C26;
class C34 extends C26 {
    static set e(a36) {
        this > a36;
    }
}
new BigInt64Array(v19);
268435456 >> 268435456;
Math.log1p(268435456);
Uint32Array.name;
const v49 = new Uint32Array([1524942359,268435439,8,1,256,-11]);
const v50 = v49?.findLastIndex;
try { new v50("NaN"); } catch (e) {}
const t38 = "d";
new t38(154);
const o54 = {
};
function f55() {
}
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    a59 - a59;
    const v61 = this.constructor;
    v61.name = v61;
    const v63 = new Int16Array(a59);
    v63.lastIndexOf(F56, a58) ^ -11;
    try { new v61(this, a58); } catch (e) {}
}
F56.length;
new Float64Array(5);
/l5a\s(?<a>.)\k<a>+/gudy;
