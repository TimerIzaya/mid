[];
new Uint16Array(512);
const v9 = new Int8Array(1159);
const v11 = new Uint8ClampedArray();
const v12 = v9[1];
const v13 = v9[2];
try { v11["forEach"](...v13, v12, ..."forEach"); } catch (e) {}
new BigInt64Array(129);
const v21 = new BigInt64Array();
function f22() {
    Float64Array.toString = gc;
    return v12;
}
v21.toString = f22;
const o25 = {
    __proto__: v21,
};
try { o25.indexOf(); } catch (e) {}
new Float32Array(66);
for (let [i36, i37] = (() => {
        v21 - v21;
        const v32 = new Float64Array(453);
        v32[437] = v32;
        v32.toSorted();
        return [0, 10];
    })();
    i36 < i37;
    (() => {
        const v43 = -25283n >> (-25283n && -25283n);
        v43 | v43;
        function f45(a46, a47) {
            function f49(a50, a51) {
                return f49;
            }
            const o54 = {
                "type": "function",
            };
            o54.arguments = i36;
            new Worker(f49, o54);
        }
        const v56 = [];
        v56.toString = f45;
        v56.toString();
        i37--;
        function f60(a61, a62) {
            const v65 = new Float64Array(257);
            v65.lastIndexOf(4);
            return i37;
        }
        Math.valueOf = f60;
        Math.fround(Math);
        v9 << v9;
        const o71 = {
            get e() {
                return this;
            },
        };
        function f72() {
            return o71;
        }
    })()) {
}
function f76() {
    const v78 = new Int32Array(Int32Array, Int32Array, Int32Array);
    function F79(a81, a82) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v83 = new F79(Int32Array, v78);
    v83.resize = v21;
    function F85(a87, a88) {
        if (!new.target) { throw 'must be called with new'; }
        const v89 = this.constructor;
        try { new v89(a88, -418967591n); } catch (e) {}
        a88 == a88;
        a87 !== a87;
        this.g = a88;
    }
    function f93(a94) {
        let v95;
        try { v95 = v83.resize(v78, F79, Int32Array, a94); } catch (e) {}
        v78.length |= v95;
        return v95;
    }
    f93();
    const o98 = {
        "c": Array,
    };
    const t87 = o98.c;
    const v100 = t87();
    (-1.4618325192014402e+308) ** -724330360;
    new Float32Array(4096);
    const v107 = v100.forEach(Uint32Array);
    class C108 {
    }
    const v109 = new C108();
    function f110() {
        return v109;
    }
    Object.defineProperty(v109, "b", { enumerable: true, get: f110 });
    for (const v113 of Array(4087)) {
    }
    return v107;
}
%PrepareFunctionForOptimization(f76);
function f114(a115, a116) {
    const o117 = {
        ...a115,
    };
    o117.d;
    return f114;
}
function f119() {
}
try { Int32Array.from(512n); } catch (e) {}
const v125 = new BigUint64Array(5);
let v126;
try { v126 = v125.join(1159); } catch (e) {}
try { v126.replace(Int32Array, f119); } catch (e) {}
f76();
%OptimizeFunctionOnNextCall(f76);
f76();
