function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 127;
    } catch(e3) {
        -4294967295 << -12;
        function F8() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = F8;
            } catch(e10) {
            }
            try {
                this.f = false;
            } catch(e11) {
            }
            try {
                this.b = false;
            } catch(e12) {
            }
        }
        const v13 = new F8();
        const v14 = [0.6612384037511738,2.2940008033736596];
        try { v14.push(v13); } catch (e) {}
        let v16 = (127)?.g;
        v16 %= v14;
    }
}
const v17 = new F0();
const v18 = new F0();
const v19 = new F0();
class C20 extends F0 {
    #h;
    constructor(a22) {
        for (let v23 = 0; v23 < 32; v23++) {
            "p" + v23;
            function f26() {
                for (let v27 = 0; v27 < 5; v27++) {
                }
                return f26;
            }
            f26();
        }
    }
    /*
    constructor(a30, a31) {
        super();
        for (const v32 of this) {
            const o35 = {
                "maxByteLength": 10000,
            };
            function f38() {
                class C39 {
                    constructor(a41) {
                        const v42 = this.constructor;
                        try { new v42(a41, f38); } catch (e) {}
                        new Uint16Array();
                    }
                }
                new C39();
                class C46 extends C39 {
                }
                new C46();
            }
            %OptimizeFunctionOnNextCall(f38);
            const v48 = new SharedArrayBuffer(248, o35);
            new Uint32Array(v48);
        }
    }
    */
}
const v51 = new C20(C20, v18);
new C20(v17, v51);
new C20(v51, v19);
[-49748];
[4294967297,1235860690,-34772,4,536870888,65536,7];
[268435441,255];
class C61 {
    #d = 4096;
    static {
        function f64() {
            function F65(a67, a68) {
                if (!new.target) { throw 'must be called with new'; }
                const v69 = this.constructor;
                try { new v69(); } catch (e) {}
                this.c = Float32Array;
            }
            new F65(f64, F65);
            new F65();
        }
        try {
            class C75 {
                static get h() {
                    const o80 = {
                        "execution": "sync",
                        "type": "major",
                    };
                    gc(o80);
                    return 268435441;
                }
            }
            const v82 = new C75();
            try { this("256", v82, this, v18); } catch (e) {}
            this.#d;
        } catch(e85) {
        }
    }
}
