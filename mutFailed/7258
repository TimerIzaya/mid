function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = F0;
    } catch(e3) {
        const o4 = {
        };
        const v5 = [];
        function f6(a7) {
            const o11 = {
                ...v5,
                ...v5,
                "f": a7,
                set c(a9) {
                    a7[this != a9] <<= a9;
                },
            };
            return o11;
        }
        F0();
    }
    try {
        this.a = 1276799506;
    } catch(e13) {
    }
}
new F0();
const v15 = new F0();
const v16 = new F0();
class C17 extends F0 {
    static toString(a19, a20) {
        super[this];
        Object.defineProperty(this, -2, { value: v16 });
        return "EPSILON";
    }
    e = v16;
    #g = v15;
}
new C17();
new C17();
new C17();
for (let v31 = 0; v31 < 25; v31++) {
    class C32 {
    }
    const v33 = new C32();
    function f34(a35, a36) {
        const o41 = {
            [v33](a38, a39, a40) {
            },
        };
        return a35;
    }
    function f42() {
        return v31;
    }
    const v43 = [601759695];
    const v44 = [1073741824,1073741823,1376142744,1073741825];
    function f45(a46, a47, a48, a49) {
        [f45(),2];
        f42 * 536870887;
        let v56;
        try { v56 = v44["find"](..."find", a49, ...v43); } catch (e) {}
        return v56;
    }
    for (let v57 = 0; v57 < 10; v57++) {
        const v58 = /8/vdiy;
        class C59 {
            constructor(a61, a62) {
                try {
                    b = v58;
                } catch(e63) {
                } finally {
                }
            }
        }
        new C59(v58, C59);
        f45(v57, v57, v44, f45);
    }
}
