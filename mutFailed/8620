class C3 {
    static get e() {
        let v5 = "toString";
        let v6;
        try { v6 = this[v5](v5, this, 34115, -178.4968224891253, v5); } catch (e) {}
        try { new v6(v6, -178.4968224891253, this); } catch (e) {}
        v5 && v5;
        Math.pow(34115, v5--);
        Math.min(14);
        34115 - Math;
        return 0.10094916419691391;
    }
}
const t13 = 0.10094916419691391;
const v16 = new t13();
const v17 = v16?.constructor;
try { new v17(); } catch (e) {}
const v19 = new C3();
const v20 = new C3();
try { v20.propertyIsEnumerable(v20); } catch (e) {}
class C22 extends C3 {
    static set b(a24) {
        let v25 = 0;
        while (v25 < 2) {
            v19[0.10094916419691391] = C3;
            v25++;
        }
    }
}
const v32 = new C22();
new v32();
const v34 = new C22();
const v35 = v34?.constructor;
try { new v35(); } catch (e) {}
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = [this,this];
    [v40,1141300185,F37];
    let v42 = [this,1141300185];
    try { Math.log2(v40); } catch (e) {}
    const v46 = v42++;
    v46 ^ v46;
    Math.asinh(536870887);
    +this;
    Math.h = 1141300185;
    try {
        class C51 extends this.constructor {
            e = F37;
        }
        this.caller;
        new C51();
    } catch(e54) {
        e54.g = e54;
    }
}
try { new F37(); } catch (e) {}
new F37();
new F37();
new F37();
const o59 = {
};
function F60() {
    if (!new.target) { throw 'must be called with new'; }
    function f62(a63) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
}
const o67 = {
    get a() {
    },
};
function f68() {
    class C69 {
        #valueOf(a71, a72, a73, a74) {
        }
    }
    const o78 = {
        valueOf(a76, a77) {
        },
    };
}
