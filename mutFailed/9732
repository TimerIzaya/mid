const v3 = new Int32Array(1024);
v3[3];
class C5 {
}
class C8 {
    c;
    ["-866493184"];
    188 = v3;
    static o(a10, a11) {
        let v12 = "trimLeft";
        ("-866493184")[v12]();
        a11[9] = a10;
        a10 << a11;
        [v12] = v12;
        return a10;
    }
    #h;
    ["string"];
    g = 200508.9721854478;
    static #f;
}
const v15 = new C8();
new C8();
new C8();
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1291n;
    } catch(e25) {
    }
    try {
        this.b = a23;
    } catch(e26) {
    }
    try {
        this.c = v15;
    } catch(e27) {
    }
}
new F21(1291n, 1291n);
new F21(5n, 1291n);
new C8(11n, 11n);
Uint8ClampedArray();
new Date();
function f38() {
    for (let [i41, i42] = (() => {
            switch (f38) {
            }
            return [0, 10];
        })();
        i41 < i42;
        i42--) {
    }
    return f38;
}
for (const v58 in "5amlK") {
    ("5amlK")[v58];
}
Array(1024);
const o70 = {
};
const t61 = /F((((.).).).)[Ia*b]/v;
t61[Math] = -2.6653538746432233;
class C82 {
}
const v83 = new C82();
const v84 = v83.constructor;
let v85;
try { v85 = v84(v84, v84); } catch (e) {}
function f86() {
    const v88 = ("D")[0];
    let v89;
    try { v89 = v88.substring(v85); } catch (e) {}
    return v89.charCodeAt();
}
%PrepareFunctionForOptimization(f86);
class C95 {
}
class C97 {
    static #e = "d";
    static 4;
    8;
    static h = "d";
    584 = "d";
    #a;
}
function F98(a100, a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
    a100 - a100;
    a101 == a101;
    5 >>> a100;
    a101 - a101;
    const v107 = this.constructor;
    try { new v107(a102, v107); } catch (e) {}
    a100 % a100;
}
new F98(F98);
new F98(820, 121);
