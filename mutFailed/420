const v2 = new Int8Array(255);
const v3 = v2[8];
try {
    v2.valueOf = v3;
} catch(e4) {
}
const v7 = new Float32Array(2185);
const v10 = new BigUint64Array(1);
0.5023490306346093 * 0.5023490306346093;
794.7524916956656 - 794.7524916956656;
let v16 = -8;
v16--;
-2 * -2;
const v23 = v3?.[1];
v23 >> Int8Array;
const v26 = [v3,v10];
Reflect.apply(v7.find, v7, v26);
0.3031821725579029 < 0.3031821725579029;
for (let i33 = 0; i33 < 8; i33++) {
    try {
        v7.set(v7);
    } catch(e40) {
    }
}
const v43 = new Map();
const v44 = [-65535,-19265,3,-13,65537,128];
const v46 = v43.constructor;
class C47 extends v46 {
    3832 = v44;
}
const v48 = new C47();
try { v46(WeakMap, v44, 129, v48); } catch (e) {}
function F50(a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v26;
    } catch(e55) {
    }
}
new F50(-2, 255, -2);
new F50(v23, 20655, 20655);
new F50(v26, -2, 129);
gc();
const v63 = [256,54026];
-2 | -2;
!-2;
let v68 = Math.hypot(v63);
v68++;
