const v6 = Array(8);
function f7() {
    return f7;
}
const v8 = ("-4294967296")?.apply;
try { v8(8, v6); } catch (e) {}
const v11 = new v8();
try { v11.set(Array, f7); } catch (e) {}
function f13() {
    return v11;
}
f13.m = f7;
try { f13(); } catch (e) {}
const v15 = /(?=.)ha\nb\bc/gum;
class C16 extends f13 {
    static {
        const v18 = v6.length;
        try { this.m(this, v18, Map, v15); } catch (e) {}
    }
}
function f31() {
    return 669880.4966966356;
}
function f32(a33) {
    Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
}
for (let v37 = 0; v37 < 5; v37++) {
    const o38 = {
    };
    f31.toString = f13;
    try { Reflect.defineProperty(o38, o38, v37); } catch (e) {}
}
const v42 = new Int8Array(2830);
const v45 = new Int32Array(10);
function f48(a49, a50, a51) {
    const o56 = {
        "type": "e",
        "execution": "-4294967296",
        toString(a53, a54, a55) {
        },
        "type": "e",
        ...v42,
        814452916: 129,
        "f": v45,
        ...v45,
        __proto__: a50,
        [a50]: Float64Array,
    };
    return f48;
}
new Float32Array(9);
function f60() {
    function f61(a62, a63) {
        a63(f61);
        return f61;
    }
    new Promise(f61);
    return f61;
}
%PrepareFunctionForOptimization(f48);
Float32Array[0] = 129;
const v69 = new Float32Array(Float32Array);
function f70(a71, a72) {
    return v69;
}
f48();
f48(-25269, v42);
