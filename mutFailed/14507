function f0() {
}
const v1 = [2147483647,-2,16,6627,1024,13,24575,-1,29342,17533];
const v2 = [-40999,-9223372036854775808,-1751477301,-939022044,-60049,5,65535,9];
const v3 = [6,4294967295,-268435456,0,268435456,917294046,1,-2,3];
function f4() {
    return f0;
}
const v5 = [95.03231336375188,-760.3826934598543,-3.0,2.2250738585072014e-308,-1.7976931348623157e+308,-1000.0,1.7976931348623157e+308,1e-15,74.18347606417137,-4.92480902328394];
const v6 = [1e-15,-4.0,0.0,-6.478399443173528e+307,4.0,431.4451147388029,1.0,3.0,1.7976931348623157e+308];
const v7 = [0.2630045878207423,194921.13494626107,1000.0,2.2250738585072014e-308,4.954042863373054,0.07512354650902275,0.30014329800959283,-2.0,-1.7976931348623157e+308];
class C8 extends f4 {
    static c = f4;
    constructor(a10, a11, a12, a13) {
        super();
        const v15 = v2.length;
        a10 = this;
        a12["fill"](v6, v15, v15);
        v6["fill"];
    }
    [v3] = f4;
    #a = f0;
    static #h = v1;
}
new C8(v2, v5, v6, f0);
const v20 = new C8(v7, v2, v1, v6);
new C8(f4, v2, v7, v20);
[-12,-25968,2147483649,-47566,-9223372036854775807,-1431836937,-1416886552,-64919,-4294967295,-8];
let v23 = -1024;
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = new F24(v23, v23, F24, F24);
const v31 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v32 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
}
const v38 = new F34();
class C39 {
}
const v41 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v42 = [601759695];
function f44(a45, a46, a47, a48) {
    function f49() {
        let v52 = Float64Array;
        v52 = a46;
        const v53 = v31.length;
        try {
            v31.forEach(v52);
        } catch(e55) {
        }
        const v56 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v58 = Symbol.toPrimitive;
        const o64 = {
            toString(a60, a61) {
                const v62 = a48 && v52;
                a60 *= v58;
                v62 <= v56;
                return F34;
            },
        };
        const o85 = {
            "c": -4294967297n,
            [522675525n](a67, a68) {
            },
            "c": v42,
            valueOf(a70, a71) {
            },
            [-4294967297n](a73, a74, a75, a76) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v41,
            ...v30,
            [v58]() {
            },
            "type": C39,
            ..."Vre",
            valueOf(a79, a80) {
                return Symbol;
            },
            ..."Vre",
            4: "Vre",
            toString(a82, a83, a84) {
                return a82;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v23 %= -268435456;
        new Uint32Array(v32, v53, v58);
        v38 - f49;
        try {
            new Float64Array(127);
        } catch(e94) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    const v101 = f49();
    %OptimizeFunctionOnNextCall(f49);
    return v101;
}
for (let v102 = 0; v102 < 5; v102++) {
    f44(v38, F24, F34, v102);
}
[48662,9];
[-4294967297,-1372633217,238764095,1073741824,4];
(64n).toLocaleString();
