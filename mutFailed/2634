function f0() {
    -7 >>> -7;
    const o16 = {
        ..."symbol",
        __proto__: "symbol",
        ..."symbol",
        [-2487](a6) {
            let v7;
            try { v7 = new a6(this, -7, this); } catch (e) {}
            new Map();
            let v10;
            try { v10 = a6(); } catch (e) {}
            try { a6(v10, v7, v10, "symbol"); } catch (e) {}
            super[this];
            let {"d":v13,"f":v14,"h":v15,} = this;
            super[v15] = v13;
            return a6;
        },
        "d": -2487,
    };
    const v18 = new Float64Array();
    v18.buffer.resize(Float64Array);
    const v23 = new Uint32Array(4096);
    v23[6] = 35.31700069890553;
    const v25 = o16[0];
    const v26 = v25?.repeat;
    try { new v26(v25); } catch (e) {}
    return o16;
}
const v28 = f0();
const v30 = new BigUint64Array();
v30 && BigUint64Array;
[4096];
f0();
const v35 = f0();
v35[4] = v35;
[-16,-4294967296,55309,414145395,-36435];
[25696,536870888,1073741824,255,4,4294967296,-2147483647];
const v38 = [268435439,7,1024,-39967,33512];
const v41 = new Uint8ClampedArray(1050);
try { v41.some(v28); } catch (e) {}
v41.g = v41;
new Uint8ClampedArray(16);
64 | 64;
let v48 = -44949;
v48--;
const t45 = Array(8);
t45[2147483648] <<= 8;
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
Uint8Array.a = Uint8Array;
const v54 = new Uint8Array(64);
try { v54.keys(); } catch (e) {}
const v56 = [];
try { v56.groupToMap(f0); } catch (e) {}
try { v56.findLast(v38); } catch (e) {}
v56[0] = v56;
new BigInt64Array(v56);
