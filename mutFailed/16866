function f0() {
    ~4.996952411565772e+307;
    const o16 = {
        ["symbol"](a6, a7) {
            function f8(a9, a10, a11) {
                return a11;
            }
            const o14 = {
                __proto__: this,
                ..."function",
                ["64"]: "symbol",
                "e": this,
                "c": "64",
                "type": "function",
            };
            new Worker(f8, o14);
            super.h %= "64";
            return a6;
        },
        "f": 4.996952411565772e+307,
        __proto__: "64",
        ..."64",
        9: "64",
        ..."symbol",
        [4.996952411565772e+307]: "64",
    };
    return o16;
}
f0();
f0();
const v19 = f0();
v19[1] = v19;
-"UZ";
const v27 = new Uint8Array(4061);
const v29 = [4061];
Reflect.apply(v27.fill, v27, v29);
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v41 = Array(19793);
    for (const v42 of v41) {
    }
    const v43 = [v41,v41,v41,v41];
    const v45 = new BigUint64Array();
    v45.constructor;
    const v48 = [[v43,v43,v43]];
    v48.toSpliced(v48);
    v48 >= Uint16Array;
}
new F33();
const t51 = "UZ";
const v53 = new t51();
try { Uint32Array.from(56653); } catch (e) {}
new Uint32Array(3244);
const v60 = new Float32Array(255);
class C61 {
}
const v62 = new C61();
const o63 = {
    [v60]: v62,
};
v60[157];
new BigUint64Array(7);
for (let v68 = 0; v68 < 10; v68++) {
    -(-1406151759);
    -v53;
    new Date();
    5.0 / -2.220446049250313e-16;
    class C76 {
        [-1];
        static {
            for (let v78 = 0; v78 < 25; v78++) {
                const v79 = [601759695];
                const v80 = [1073741824,1073741823,1376142744,1073741825];
                function f82(a83, a84, a85, a86) {
                    try { new a83(); } catch (e) {}
                    a85 << a85;
                    function f90() {
                        return a83;
                    }
                    const v92 = new Int8Array();
                    const v95 = BigUint64Array * 536870887;
                    v95 - v95;
                    Number.isNaN(v95 ** v95);
                    function f100(a101, a102) {
                    }
                    try { f100(); } catch (e) {}
                    const v105 = v92.buffer.__defineGetter__;
                    try { v105(); } catch (e) {}
                    %OptimizeFunctionOnNextCall(f90);
                    let v108;
                    try { v108 = v80["find"](..."find", a86, ...v79); } catch (e) {}
                    const o109 = {
                    };
                    v108 <= a85;
                }
                for (let v111 = 0; v111 < 5; v111++) {
                    f82(this, v111, v111);
                }
            }
        }
        #f;
        [v68];
    }
    const v113 = new C76();
    v113[0] = v113;
}
