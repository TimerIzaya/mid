function f0() {
}
class C1 {
    static a = f0;
    static toString() {
        12 >> Math.hypot(12);
        const v7 = Math.sqrt(12);
        for (let v8 = 0; v8 < 25; v8++) {
            const v9 = [601759695];
            const v10 = [1073741824,1073741823,1376142744,1073741825];
            function f11(a12, a13, a14, a15) {
                let [] = v10;
                try { v10["find"](..."find", a15, ...v9); } catch (e) {}
                return a14;
            }
            for (let v18 = 0; v18 < 10; v18++) {
                f11();
            }
        }
        return v7;
    }
    static [f0] = f0;
}
class C20 {
    set e(a22) {
        const v24 = Symbol.iterator;
        const o30 = {
            [v24]() {
                let v26 = 10;
                const o29 = {
                    next() {
                        v26--;
                        return this;
                    },
                };
            },
        };
    }
}
const v31 = new C20();
function f32(a33, a34) {
    const o41 = {
        512: C20,
        4294967295: a33,
        valueOf(a36, a37) {
            return a37;
        },
        "e": v31,
        o(a39, a40) {
            return a40;
        },
    };
    return o41;
}
const v42 = new v31();
const v43 = new v42();
const v44 = new C1();
v44.g = v43;
class C45 extends C1 {
    constructor(a47, a48) {
        super();
        const v49 = v44.g;
        super.h;
        try {
            super.imul(v44, v49);
        } catch(e52) {
        }
    }
    static 0 = v43;
}
new C45(v43, f0);
let v54 = 0.6225177695488006;
v54++;
let v56 = 0;
v56++;
Symbol.toPrimitive;
const v60 = new C45(v44, v44);
new C45(v60, v60);
new C45(268435456);
new Int16Array(127, 127, 127);
C45.constructor;
const o73 = {
};
v31.log1p(1842642860 % !o73);
for (let v79 = 0; v79 < 5; v79++) {
    Array(36862);
}
