const v0 = [-1.7976931348623157e+308,5.072405040967226,-7.1381519462314325,7.61264686808237e+307,2.220446049250313e-16,1000000000.0,183882.84210859425];
const v1 = [-123.77166742013742,-9.733024688251398,1000000000.0,0.1058809815391748,-738.9553729483918,1000000.0];
const v2 = [-Infinity,8.816847827783593e+307,6.514691402805153e+306,-3.0,-468911.29507157987,0.7161400296580227,-5.887314275724713,733743.5437105456,1.2759669401455919e+308];
class C3 {
    static set f(a5) {
        try {
            v2.fill(v0, 1000);
        } catch(e8) {
        }
        a5[3018440330] <<= a5;
        return this;
    }
    constructor(a10) {
        v0.__proto__;
        v2 > v1 ? v2 : v1;
    }
}
const v14 = new C3(v2);
new C3(v0);
const v16 = new C3(v0);
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v14;
    } catch(e23) {
    }
    try {
        this.h = v2;
    } catch(e24) {
    }
}
new F17(v2, v2, v14, v2);
new F17(v2, v1, v14, v1, v1, v0, F17);
new F17(v2, v14, v16, v1);
new URIError();
new Map();
function f32() {
}
new BigUint64Array(-1474179594);
new BigInt64Array(257);
for (let v42 = 0; v42 < 8; v42++) {
    new BigUint64Array(0);
    new Uint8Array(187);
    new Float32Array(255);
}
try {
    const t46 = "function";
    t46.valueOf = f32;
} catch(e54) {
}
C3 >>>= Map;
const v59 = new Uint8ClampedArray(3);
class C60 {
    constructor(a62, a63, a64, a65) {
        const v66 = this.constructor;
        try { new v66(3983, a65, this, this); } catch (e) {}
        for (let v68 = 0; v68 < 5; v68++) {
            v59[v68] = a65;
        }
    }
}
new C60();
