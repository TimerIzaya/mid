class C3 {
    static #d = 246.59355060102916;
    constructor(a5, a6) {
        try {
            super.toString("m", a5, 246.59355060102916, -1, 246.59355060102916);
        } catch(e8) {
            function F9() {
                if (!new.target) { throw 'must be called with new'; }
                const v11 = this.constructor;
                try { v11(); } catch (e) {}
                try { new v11(v11); } catch (e) {}
            }
            const v14 = new F9();
            const v15 = v14.constructor;
            new v15(v15, v14);
        }
    }
    static #h;
    static #valueOf(a18) {
        function F19(a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a21;
            } catch(e22) {
            }
            new F19();
            class C24 {
            }
            class C25 {
            }
            try {
                this.c = a18;
                function f26() {
                    return f26;
                }
                class C28 {
                    static ["22307"] = "m";
                    b;
                    static h = 246.59355060102916;
                    static {
                        try {
                        const t0 = -1;
                        t0(this, this);
                        } catch (e) {}
                        Math.cos(1000);
                        Math.tan(1000);
                    }
                }
                new Uint16Array(1657);
                Math.exp(-1697 | -1982743944);
                new C28();
            } catch(e44) {
            }
            try {
                this.e = this;
                class C45 {
                }
                new C45();
                new Int32Array([-4563]);
                class C51 extends Array {
                    constructor(a53, a54, a55) {
                        super(a53);
                    }
                }
                new C51();
            } catch(e57) {
            }
        }
        const v58 = new F19(-1);
        function f59(a60, a61) {
            Array(3).unshift(3, a60);
            const o68 = {
                set b(a67) {
                },
            };
            class C69 {
            }
            return f59;
        }
        const v70 = new F19(v58);
        new F19(F19);
        return v70;
    }
}
const v72 = new C3(C3, -1);
const v73 = new C3(-1, "m");
const v74 = new C3(v73, 246.59355060102916, v73, v72, v72);
const v77 = new Array(268435440);
Math.atan(Math);
function f81(a82, a83) {
    let [v85,v86,,...v87] = arguments;
    return 48680;
}
class C88 extends C3 {
    static #e;
    constructor(a90, a91, a92, a93) {
        for (const v94 in a91) {
        }
        a92.d = "m";
    }
    /*
    constructor(a96, a97, a98, a99) {
        new Int8Array(128);
        const v105 = new Uint8Array(268435440);
        super(a99, a96);
        %VerifyType(v77);
        new WeakSet();
        let {...v108} = v105;
        try { new BigInt64Array(BigInt64Array); } catch (e) {}
        const v113 = new Uint8ClampedArray(995);
        const v115 = new Int8Array(v113);
        v115.copyWithin;
        this + a97;
        WeakSet - a98;
        a99[257832810] = this;
        super[C3];
    }
    */
    static 0;
    [v74];
    [v72] = C3;
    157 = Array;
}
const v120 = new C88(v77, v72, "m", Array);
const o124 = {
    "maxByteLength": 1468,
};
const v126 = new ArrayBuffer(2, o124);
new Int8Array(v126);
const v130 = new Int16Array(2058);
v130[256] = 2058;
const v131 = [-65536,-432658450,256];
new Float64Array(v131);
("deleteProperty").replace("deleteProperty");
function F136() {
    if (!new.target) { throw 'must be called with new'; }
}
const o139 = {
    "execution": "async",
};
new C88(v73, "m", v74, v74);
new C88(v120, "m", v73, v120);
for (let v143 = 0; v143 < 25; v143++) {
}
const o146 = {
    "arguments": v131,
    "type": "function",
};
const v147 = new Int16Array(Int16Array, Int16Array, Int16Array);
Symbol.toPrimitive;
const v152 = new Uint8ClampedArray();
try { v152.reduceRight(v152); } catch (e) {}
const v154 = v147["subarray"]();
function f155() {
    return v154;
}
const v158 = new Set();
[[Set,Set,v158]];
Reflect.construct(Uint8ClampedArray, [[1.0,-6.818981069405753e+307]]);
-536870912n == "-11838";
