function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 2;
    } catch(e3) {
    }
}
const v4 = new F0();
new v4();
new F0();
[5.0,1e-15,1.6678597467992455e+308,-480.5640185104629,1.7976931348623157e+308,-Infinity];
[1e-15,-4.8550549671116436e+306,2.0,2.0,0.48007908422548584,-1000000000.0,-4.762523783569899,7.889697501537725,1.7976931348623157e+308,600.1953863026602];
const v9 = [1.7976931348623157e+308,9.121325445849003,-1000000000000.0];
new Uint32Array(6);
new Int32Array(2552);
new Int32Array(v9);
[-9223372036854775808,2067924475,-536870912,4294967296,46528,-13,2044244347,1024,2243,1073741823];
[1e-15,-1e-15,0.047987872404069876,-1e-15,3.0,-1.0,5.0];
/[^1u]/ud;
class C25 extends Int16Array {
    constructor(a27, a28, a29, a30) {
        super();
        function f31(a32) {
            let v36 = a29 - 1511;
            let v37 = 0;
            typeof v37 === "string";
            v37++;
            v37 < 7;
            v36 = 4.0;
            0 < 10;
            const v49 = new Uint16Array(3327);
            v49.set([-2038832922,-14]);
            const v61 = new Float64Array(127);
            gc();
            const o66 = {
            };
            v61[127] = 127;
            try {
            } catch(e67) {
                function F68(a70, a71, a72, a73) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                new F68(F68, 8, 127);
                const v77 = new undefined();
                for (const v78 of Int8Array) {
                    v77[1];
                    let [,,,...v80] = v77;
                    const o81 = {
                    };
                    const o82 = {
                    };
                }
            }
            return Int16Array;
        }
        const o85 = {
            "type": "function",
        };
        new Worker(f31, o85);
    }
}
new C25(Int16Array, Int32Array, C25, Int16Array);
