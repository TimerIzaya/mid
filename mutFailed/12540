const v4 = new Set();
function f5() {
    return v4;
}
class C9 extends f5 {
    #e = -962765963;
    #c = "256";
    constructor(a11, a12) {
        super();
        this["clear"]();
        for (let v15 = 0; v15 < 32; v15++) {
            const t11 = "5wMx";
            t11["p" + v15] = v15;
        }
    }
    [-962765963];
}
const v18 = new C9("bigint", v4);
const v19 = new C9("5wMx", v18);
new C9("5wMx", v19);
const v23 = /(\1a)/gums;
v23.compile(/V(?:a{5,1000000}){3,1000000}/vims).lastIndex;
Math.cos(-1073741824);
new BigUint64Array(2864);
let v33 = 2549;
v33--;
new BigInt64Array(v33);
try { Float32Array(v33, v33, undefined); } catch (e) {}
new Float32Array(3);
const v41 = /(J5a{0,1}?)/y;
/u?/udms;
const v43 = /bf/gvms;
32 >>> 32;
const v49 = [];
const v50 = [];
const o54 = {
    [v43]: v49,
    "h": v50,
    get e() {
        v23[1000.0] >>= -4.0;
        Date();
    },
    [227.40634637175117]: 227.40634637175117,
    [v23]: v50,
};
let v55 = 32 + 32;
v55--;
new Uint8ClampedArray(32);
4096 & 4096;
for (let v61 = 0; v61 < 5; v61++) {
    Math.asin(-3 ^ v61);
}
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v70 = 1582 >> 1582;
v70--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v80 = [-54813,1582,-54813,8];
const v81 = [-54813];
const v82 = [-54813];
try { v82.map(4); } catch (e) {}
function f84(a85, a86, a87, a88) {
    try { a85.toString(); } catch (e) {}
    try { a86.groupToMap(a87); } catch (e) {}
    a87[0] = a87;
    try { a85.copyWithin(undefined, a86); } catch (e) {}
    const o100 = {
        n(a93, a94, a95, a96) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a88;
        },
        ...v82,
        "b": v80,
        ...a87,
        ...v82,
        129: 4,
        ...a85,
    };
    o100[2] = o100;
    return o100;
}
const v101 = f84(v81, v82, v80, 4);
class C102 {
    constructor(a104, a105) {
        const v106 = this.constructor;
        try { new v106(); } catch (e) {}
        let v108 = 0;
        for (let i = 0; i < 10; i++) {
            Math.atan();
            const v112 = v108++;
            v112 - v112;
        }
    }
}
new C102();
const v115 = f84(v81, 8, v101, 4);
v115[129] = v115;
const v116 = f84(v82, 4, 4, 4);
v116.d = v116;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C124 extends Map {
}
const v125 = new C124();
try { v125.get(Uint8Array); } catch (e) {}
const v127 = v125.isPrototypeOf();
v127 && v127;
v127 && v127;
Date.name;
let v133;
try { v133 = Date.parse(4); } catch (e) {}
-v133;
class C135 {
    static {
        for (let v137 = 0; v137 < 25; v137++) {
            v137 >>> v137;
            const v139 = [601759695];
            const v140 = [1073741824,1073741823,1376142744,1073741825];
            function f142(a143, a144, a145, a146) {
                try { new a143(); } catch (e) {}
                a144 & a144;
                ~a144;
                try { new a143(); } catch (e) {}
                const v151 = a145 << a145;
                function F152() {
                    if (!new.target) { throw 'must be called with new'; }
                    function F154() {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                }
                const v156 = new F152();
                function f157(a158, a159) {
                    const o167 = {
                        n(a161, a162) {
                            class C163 {
                            }
                            new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
                        },
                        "a": v156,
                    };
                    for (let v168 = 0; v168 < 100; v168++) {
                        Math.random();
                    }
                    return o167;
                }
                v151 % v151;
                function f173() {
                }
                const v175 = new Int8Array();
                const v178 = BigUint64Array * 536870887;
                let v179 = v178 - v178;
                v179++;
                const v181 = v178 ** v178;
                try { Number.parseInt(v179, v179); } catch (e) {}
                let v184;
                try { v184 = new Number(v41); } catch (e) {}
                try { v184.valueOf(); } catch (e) {}
                Number.isNaN(v181);
                function f187(a188, a189) {
                    return Number;
                }
                try { f187(); } catch (e) {}
                v175.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f173);
                try { v140["find"](..."find", a146, ...v139); } catch (e) {}
                const o195 = {
                };
            }
            for (let v196 = 0; v196 < 5; v196++) {
                f142(this, v196, v196);
            }
        }
    }
}
