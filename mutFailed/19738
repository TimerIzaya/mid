let v2 = ([536870888,4096,-11]).includes;
function f3() {
    return f3;
}
function f4() {
    return f3;
}
function f5(a6) {
    v2 |= a6;
}
Object.defineProperty(f3, Symbol.toPrimitive, { writable: true, enumerable: true, get: f4, set: f5 });
try { new f3(); } catch (e) {}
const v10 = [f3,f3,f3,f3];
const v11 = v10.flatMap(f3);
v11[Symbol.isConcatSpreadable] = f4;
try { v11.concat(v11); } catch (e) {}
try { ("qix").link(f3); } catch (e) {}
try { ("NaN").link("NaN"); } catch (e) {}
class C19 {
    n(a21) {
        const v24 = new Uint8Array(3521);
        v24["lastIndexOf"](0);
        this[8] = "NaN";
        const v29 = Symbol.iterator;
        const o40 = {
            [v29]() {
                let v31 = 10;
                const o37 = {
                    next() {
                        v31--;
                        const v35 = v31 == 0;
                        const o36 = {
                            "done": v35,
                            "value": v31,
                        };
                        return o36;
                    },
                };
                return o37;
            },
            "d": "qix",
            "arguments": v11,
            o(a39) {
                return a39;
            },
        };
        return "qix";
    }
}
new C19();
new C19();
const v43 = new C19();
new Uint8ClampedArray(3);
new Uint8ClampedArray(2027);
let v50 = 129;
v50--;
const v53 = new Int32Array(v50);
v53.constructor = f4;
const v54 = v53?.constructor;
try { new v54(v10, v11, 2027); } catch (e) {}
[268435439,-4096,-128,10000,268435439,-175228916,-452916790,1073741825];
[-10,-2098521316,3668,60621,-12,15,8,4294967296,39263];
[2,3,268435439,-10,-1540599599,536870889];
/49/gims;
try { ("symbol").strike(); } catch (e) {}
207 - 207;
const v64 = 207 + 207;
try { new Uint8ClampedArray(v64, "10", Uint8ClampedArray); } catch (e) {}
try { new Uint8ClampedArray("symbol", 14, 207); } catch (e) {}
-220;
new BigUint64Array();
const v75 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f76(a77, a78, a79, a80) {
    try {
        f76(true, Int8Array, undefined, f76);
    } catch(e84) {
    }
    function f85(a86) {
        v75.constructor;
        return f76;
    }
    for (let i90 = 0, i91 = 10; i90 < i91; i91--) {
        f85();
        a80.valueOf = a80;
    }
    return v75;
}
class C100 {
}
const v101 = new C100();
Object.defineProperty(v101, "constructor", { value: f3 });
const v102 = v101?.constructor;
try { new v102(); } catch (e) {}
const v105 = [0.03568519099872258];
try { v105.toSorted(v43); } catch (e) {}
Uint8Array.name = Uint8Array;
const v109 = new Uint8Array();
function f110(a111, a112, a113, a114) {
    const o115 = {
        ...v109,
    };
    function f119(a120, a121, a122) {
        const o123 = {
            "h": a122,
        };
        function f124() {
            const o136 = {
                m(a126) {
                    3938 & 3938;
                    Int8Array.name = Int8Array;
                    const v130 = new Int8Array(3938);
                    let v131 = 3;
                    let v132 = 0;
                    v132 >> v132;
                    for (let i = 0; i < 5; i++) {
                        [...v131] = v130;
                        v132++;
                    }
                    const o135 = {
                    };
                    o135.h = o135;
                },
            };
            o136.m(o136, o136, o136, f124, f124);
            return o136;
        }
        return o123;
    }
    f119(-3.9870582640049523, -3.9870582640049523, 1000000.0);
    const v139 = f119(1000000.0, -3.9870582640049523, 1000000.0);
    f119(-3.9870582640049523, -2.2250738585072014e-308, -3.9870582640049523);
    v139["toString"]();
}
for (let v143 = 0; v143 < 500; v143++) {
}
