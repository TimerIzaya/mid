function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -24714;
    } catch(e3) {
    }
}
new F0();
new F0();
const v6 = new F0();
v6.e = v6;
64 | 64;
new Uint8Array(64);
new Int16Array(2);
BigUint64Array.length = BigUint64Array;
const v16 = new BigUint64Array(9);
try { v16.reverse(); } catch (e) {}
function f18() {
}
const o19 = {
};
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
    for (let v29 = 0; v29 < 500; v29++) {
        v29++;
        this.print(this, this);
        function f33(a34) {
            const o35 = {
                [a34]: a34,
            };
            return a34;
        }
        const o40 = {
            [v28](a37, a38, a39) {
            },
            ...v29,
        };
    }
    const v41 = 2105444095n / 2105444095n;
    v41 << v41;
    for (let v43 = 0; v43 < 100; v43++) {
        Array(1000).indexOf();
        const v49 = new Float64Array();
        function F50(a52, a53) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a52;
                const v56 = Array(19793);
                const v57 = [v56,v56,v56,v56,v56];
                [v57,v57,v57];
            } catch(e59) {
                for (let [v60,v61] of a52) {
                }
            }
            try {
                const v62 = v49[this];
                const v63 = [];
                new Float32Array(7);
                function f67() {
                    let v68 = -9223372036854775808n;
                    v68 %= 45725n;
                    return 45725n;
                }
                f67();
                v63[1];
                new F50(v62, -268435456n);
            } catch(e74) {
            }
        }
        v43 + v43;
        v43 >>> v43;
        function F77() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v79 = new F77();
        const v80 = v79?.constructor;
        try { new v80(); } catch (e) {}
        const o83 = {
            6: undefined,
            "d": undefined,
            [268435439n]: 2105444095n,
            __proto__: o19,
            "g": a24,
        };
    }
    const o86 = {
        "getOwnPropertyDescriptor": f18,
        __proto__: v28,
        set b(a85) {
        },
        ...a25,
        "f": 9,
    };
    try { Proxy.propertyIsEnumerable(Uint8Array); } catch (e) {}
    const v89 = new Proxy(this, o86);
    const v90 = v89?.valueOf;
    try { new v90(); } catch (e) {}
    v89.h = v89;
}
new F20();
const v93 = new F20();
let v95 = 2;
v95++;
function f97(a98) {
    a98 <= a98;
    const o103 = {
        "c": 2,
        "e": 8,
        213: a98,
        "g": v95,
        p(a101, a102) {
            return a101;
        },
    };
    return o103[213];
}
("getBigInt64").normalize();
new Int32Array(245);
const v110 = v93?.constructor;
try { new v110(F0, F20, 2, v6); } catch (e) {}
const v112 = v93.constructor;
const v113 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
const v114 = /(?:a*)+q(?<a>.)/guds;
for (let [i118, i119] = (() => {
        0 * 0;
        return [0, 10];
    })();
    (() => {
        const v120 = i118 < i119;
        const v122 = [1,1238552536,268435440,129,512];
        const v124 = new Date();
        v124.setUTCMonth(v122, -1073741824);
        v120 && v120;
        return v120;
    })();
    (() => {
        const v129 = i119--;
        v129 >>> v129;
    })()) {
    i118 + i118;
    for (let v134 = 0; v134 < 5; v134++) {
        const v135 = v114.constructor;
        try { v135(v114, v114); } catch (e) {}
        v113.constructor;
        v114.constructor.lastParen;
        const v141 = [i119,i119,i119,i119,i119];
        v141[4];
        v141 > 8n;
    }
}
try { new v112(v112, o19, v112, v6); } catch (e) {}
const v145 = new v112();
const v146 = v145?.constructor;
try { new v146(F0, o19, Int16Array, Int16Array); } catch (e) {}
const v148 = new F20();
v148.length;
const v150 = v148.constructor;
v150.caller;
new v150();
