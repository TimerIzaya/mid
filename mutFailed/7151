class C3 {
    constructor(a5, a6) {
        a6 >>> a6;
        var a = 512;
        this[268435439];
    }
    #p(a10, a11) {
        Math.cos(21053);
        -(-1073741824);
        a10 / -1073741824;
        -(-1073741824);
        return 4294967296;
    }
}
C3.e = C3;
const v19 = new C3(4294967296, 512);
const v20 = v19?.constructor;
let v21;
try { v21 = new v20(512, 4294967296); } catch (e) {}
new C3(512, 512);
const v23 = new C3(512, 512);
const v24 = v23?.constructor;
try { new v24(v23, v23); } catch (e) {}
const v27 = new Set();
let v28;
try { v28 = v27.forEach(v27); } catch (e) {}
v21?.c;
5 ** 512;
Math.hypot(v28);
Math.atanh(5);
Math.log2(v28);
+-64848;
try {
    v27.length = 19;
} catch(e39) {
}
("255").__proto__;
try {
    const t38 = "255";
    t38.__proto__ = "255";
} catch(e43) {
}
try { new Array(512); } catch (e) {}
const v48 = new Array(5);
const v51 = new Int8Array(181);
v51[14] = v51;
64 >>> 64;
Uint8Array.d = Uint8Array;
new Uint8Array(64);
const v58 = new Uint8Array(0);
class C59 {
}
try { new C59(); } catch (e) {}
let v62 = 1668197335;
const v64 = -1000000.0 && v51;
try { v64.entries(); } catch (e) {}
v64 / ++v62;
Object.defineProperty(v27, "d", { writable: true, configurable: true, enumerable: true, set: Array });
v58.byteOffset;
("255")["trimEnd"]();
new C59();
function f72(a73) {
    return a73;
}
class C74 extends f72 {
    static [v48];
    d;
    g;
}
const v76 = new WeakMap();
try { v76.has(v76); } catch (e) {}
try {
    const v78 = Array(19);
    try { v78.findLast(-9223372036854775808); } catch (e) {}
} catch(e80) {
}
C3 = C74;
class C81 extends C59 {
    static 1 = v76;
    10000;
}
new Int8Array();
try { ("async").toLowerCase(); } catch (e) {}
const o87 = {
    "execution": "async",
    "type": "minor",
};
o87.type;
C3.b;
new Float32Array(129);
let v93 = 2;
v93--;
try {
    C81.a = 181;
} catch(e96) {
}
Array.__proto__;
new Float64Array(v93);
new Float64Array(4);
gc(o87);
v76.h |= 0;
new Date();
try {
    C74.fuck(v48, -65536, v51, -65536);
} catch(e107) {
    e107.b = e107;
}
gc();
