let v0 = "cD";
function f3() {
    return "JBQeU";
}
const v8 = new BigUint64Array();
v8[2445191368] = 268435441n;
const o10 = {
    "maxByteLength": 10000,
};
class C12 extends f3 {
    static toString(a14, a15, a16) {
        super[a15] = a14;
        const v19 = -Infinity;
        v0 = "JBQeU";
        return v19;
    }
    constructor(a21, a22, a23, a24) {
        super();
        function F25() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v27 = new F25();
        const v28 = new F25();
        try {
            v27.h = v28;
        } catch(e29) {
        }
        a21 + this;
        const t27 = "h";
        delete t27?.length;
    }
}
const v32 = new C12(v0, "2t", "global", "JBQeU");
new C12("2t", "JBQeU", v32, "h");
new C12("JBQeU", "global", f3, "h");
new Uint8Array(8);
new Int16Array(6);
new Uint32Array(257);
const v46 = new Int8Array();
v46.buffer.slice(2147483648);
new Int8Array(1392);
const v56 = /((?<=a))/gudm;
const v57 = /gk4b*/vmsy;
let v59;
try {
const t0 = -1.3832922122240728e+307;
v59 = t0(2);
} catch (e) {}
for (let v60 = 0; v60 < 5; v60++) {
    v60 < 1;
    try { v59(v56, v60, v57, v60, -4); } catch (e) {}
    const v65 = Symbol.iterator;
    const o69 = {
        [v65]() {
            const o68 = {
                next() {
                    return v57;
                },
            };
        },
    };
}
const v70 = new Uint32Array(4);
new Int16Array([v70]);
