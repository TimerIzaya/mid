const v2 = new Uint8Array(0);
const v5 = new Uint8Array(2114);
new Int8Array(5);
const v9 = [-1.0,-646.4926944671334,0.4436313389815526];
const v10 = [v9,v9,2114];
const v11 = [Uint8Array,v2,v10];
[v5];
const v15 = [Uint32Array];
try { v15.find(Worker); } catch (e) {}
const o18 = {
    get c() {
        return this;
    },
};
v2[15] %= 5;
2114 && 0;
new Worker();
function F21() {
    if (!new.target) { throw 'must be called with new'; }
}
const v25 = new Int8Array(9);
v25.reverse();
[-1e-15,-735933.0078641742];
[-1000000.0,1000.0,-1000000.0,1.3716837001611104,-1.2147415579793935e+308];
function f32() {
}
for (const v33 of v9) {
    function f34() {
    }
    f34();
    for (let v39 = 0; v39 < 32; v39++) {
        v9["p" + v39] = v39;
    }
}
f32();
class C43 extends f32 {
    constructor(a45) {
        super();
        for (let v46 = 0; v46 < 5; v46++) {
            super.valueOf();
        }
    }
}
const v50 = new Int16Array(1000);
class C53 extends Float64Array {
    constructor(a55, a56, a57, a58) {
        super(v50);
    }
    [65] = Float64Array;
}
new C53();
new Int8Array();
C43 & v10;
Object.defineProperty(v11, "b", { value: v10 });
const v62 = C43[129];
delete v11[v62];
try { v62(); } catch (e) {}
let v65 = 1000.0;
class C66 {
    static {
        ++v65;
    }
}
new Int8Array();
new C43();
