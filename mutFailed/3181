NaN >= "0x2I";
const v6 = new Map();
function f7(a8, a9) {
    const o16 = {
        "a": a9,
        [a8]: v6,
        [v6]: Map,
        [2221](a11, a12, a13) {
        },
        ...v6,
        "b": a8,
        [a9]: Map,
        "h": a8,
        valueOf(a15) {
            return a15;
        },
    };
    return a9;
}
for (let v17 = 0; v17 < 395; v17++) {
    f7();
}
const o20 = {
};
o20.e = "0x2I";
let v21 = 10;
for (;
    (() => {
        const v22 = v21--;
        v22 - v22;
        return v22;
    })();
    ) {
}
const v31 = [10000];
[-11];
const v33 = [-234392068,536870889,1073741824,6,81715829,31071,-65535];
new Int32Array(2917);
function f38(a39, a40, a41) {
    const v42 = a41 >>> a41;
    (v42 - v42) - a39[1];
    return 160;
}
class C46 {
    constructor(a48, a49) {
        const v50 = this.constructor;
        class C51 extends v50 {
            static [v33] = a49;
            #c = v50;
            #a;
        }
        new C51();
        const v54 = new Set();
        function F55(a57, a58) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a57;
            } catch(e59) {
            }
            try {
            } catch(e60) {
            }
            v54[this];
            try {
                new F55(a58, v54);
            } catch(e63) {
            }
        }
    }
    static [v31] = 13455n;
    956413749 = -4294967296n;
    [268435441n];
    h;
}
new C46(-65536, 268435441n);
new C46(9007199254740991, 13455n);
new C46(9007199254740991, -9223372036854775807n);
new BigUint64Array(10);
new Float64Array(2147483647);
