const v3 = new Float32Array();
function f5() {
    const o7 = {
        "type": "minor",
    };
    return "minor";
}
Uint8ClampedArray.toString = f5;
v3[-1e-15] = Uint8ClampedArray;
const v9 = -Infinity;
const v10 = [0.24379414754645257,1.1665502301651797e+308,-468742.19069819606,0.6185373212403752,0.5009817782813837,-99.24233782158694,-1.0];
const v11 = [1000000000000.0];
Object.defineProperty(v11, "b", { configurable: true, enumerable: true, value: v10 });
const v12 = [-2.926414312806478e+307,2.220446049250313e-16,-388924.7541001666,1000000000.0,1.7976931348623157e+308,-Infinity];
function f13(a14, a15, a16) {
    a15.b = f13;
    a16.b = Uint8ClampedArray;
    const o26 = {
        "h": a15,
        p(a18, a19) {
            a16.length;
            ([9n]).length;
            return a16;
        },
        "d": -4.0,
        "e": v10,
        "a": a15,
        __proto__: v11,
    };
    return o26;
}
const v27 = f13(-1e-15, v11, v11);
v27.b = Infinity;
const v28 = f13(-4.0, v10, v10);
class C29 {
    static [-2];
    16;
}
class C30 {
    static {
        function f32() {
            v12 < v12;
            return Float32Array;
        }
        this[Symbol.toPrimitive] = f32;
        const v37 = super[this];
        try { v37.join(C30, C30, v37); } catch (e) {}
    }
}
const v39 = f13(v9, v12, v11);
class C40 {
    constructor(a42, a43) {
        const o44 = {
        };
        try {
            o44.b = a42;
        } catch(e45) {
        }
        try {
            const o46 = {
            };
            o46.b = a42;
            o46.d = v10;
        } catch(e47) {
        }
        try {
            const o48 = {
            };
            o48.b = a42;
            o48.d = v10;
            o48.h = v12;
        } catch(e49) {
        }
        try {
            const o50 = {
            };
            v27.b = a42;
            o50.d = a43;
            o50.a = this;
        } catch(e51) {
            class C52 {
            }
            class C53 extends v28 {
                static #m(a55, a56, a57, a58) {
                }
            }
        }
    }
}
const v59 = new C40(f13, -4.0);
new C40(v59, -4.0);
new C40(v39, -4.0);
function f62() {
    ArrayBuffer[Symbol.toPrimitive] = f62;
    new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return f62;
}
%OptimizeFunctionOnNextCall(f62);
f62();
