function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 268435440;
    } catch(e3) {
    }
    try {
        this.b = 268435440;
    } catch(e4) {
    }
    try {
        this.f = 268435440;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v9 = [v8];
const v10 = [v6,v8,v8,F0,v6];
const v11 = [v10];
class C15 extends F0 {
    constructor(a17, a18, a19) {
        super();
        const v21 = v11["forEach"](v6, a18);
        super.g = a17;
        try { v10.slice(v21, v21); } catch (e) {}
        try { ("a").startsWith("forEach", v21); } catch (e) {}
        v10 % "a";
    }
    static #g;
    static ["a"] = v7;
    a;
    230;
    #f = v8;
}
new C15(v11, v9, v10);
new C15(v9, v11, v10);
new C15(v11, v11, v10);
[315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    a36.__proto__.push(F33, a35, a35);
}
new C15();
