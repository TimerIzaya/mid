const v2 = -Infinity;
class C3 {
    toString(a5) {
        const v6 = this?.constructor;
        try { new v6(); } catch (e) {}
        super.c = 275271.32792099053;
        const v11 = new Uint16Array(2);
        new Uint32Array(v11);
        try { WeakSet.apply(WeakSet, this); } catch (e) {}
        const v15 = new WeakSet();
        const t10 = [];
        delete t10[0];
        Math.atan2([], -40875);
        "553180308" + v15;
        try {
            super.p(this);
        } catch(e24) {
            e24.b = e24;
        }
        return "553180308";
    }
}
C3.length = C3;
const v25 = new C3();
const v26 = new C3();
const v27 = new C3();
let v28;
try { v28 = v27.toString(C3); } catch (e) {}
function f29(a30, a31, a32, a33) {
    const v34 = a30?.__lookupSetter__;
    try { new v34(f29); } catch (e) {}
    function f37() {
        const v39 = ("1073741824").constructor;
        v39.fromCodePoint(16);
        return v39().replaceAll().startsWith("1073741824");
    }
    const v44 = a33?.__lookupSetter__;
    try { new v44(f29); } catch (e) {}
    const v46 = a31?.constructor;
    try { v46.bind(a32); } catch (e) {}
    const v50 = new Date(Uint32Array);
    function F51() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.g = 1073741824;
        } catch(e54) {
        }
        try {
            this.f = 1073741824;
            const v55 = [-1.5645136499685964e+308,-4.455146091404086e+307,-6.885938370216613,-Infinity];
            const v56 = [-8.594679214373069e+306,-1000.0];
            const v57 = [-1.0,-3.0,1000000000000.0,0.4992460480015034,-1000000000000.0,-1.7976931348623157e+308,0.8138769867150808];
            try {
            const t0 = 1073741824;
            t0(F51, v55, v57, 1073741824, F51);
            } catch (e) {}
            [1073741824,this,1073741824,v56];
            [this,v55,[v57,F51,v56],F51];
            function F63() {
                if (!new.target) { throw 'must be called with new'; }
                function F65(a67, a68) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                class C69 {
                    static get g() {
                        super.subarray();
                    }
                }
            }
        } catch(e72) {
        }
    }
    try { new v46(); } catch (e) {}
    let v74;
    try { v74 = a33.toString(a31); } catch (e) {}
    try { v74.match(v27); } catch (e) {}
    const o81 = {
        512: v50,
        "maxByteLength": 16,
        6: 16,
        o(a77) {
            const o79 = {
            };
            gc(o79);
        },
        [v2]: v27,
        "b": a32,
        "a": a30,
        "c": v25,
        [f37]: v26,
        __proto__: a31,
        "h": v27,
        [C3]: "553180308",
        3313773929: a30,
        "e": C3,
        "d": v34,
    };
    return o81;
}
for (let i84 = 0, i85 = 10; i84 < i85; i85--) {
}
try { f29(v27, v27, f29, f29); } catch (e) {}
const v93 = f29(v26, v27, v26, v25);
v93[553180308];
f29(v93, v26, v27, v93);
const v96 = v28(v25, v27, v26, v27);
v96[3313773929] = v96;
60241 >>> 60241;
const v100 = [-3,-11210,65535,268435456];
let v101;
try { v101 = v100.fill(275271.32792099053); } catch (e) {}
const v102 = v101?.entries;
try { new v102(); } catch (e) {}
const v104 = [-9223372036854775808,1415432483,1];
try { v104.unshift(60241); } catch (e) {}
-1000000.0 > -1000000.0;
-1000000.0 * -1000000.0;
function f110() {
}
let v111;
try { v111 = f110(); } catch (e) {}
function f112(a113, a114) {
    try { new Symbol(); } catch (e) {}
    const v117 = v111.toPrimitive;
    a113[v117] = f110;
    const o122 = {
        "e": a113,
        "g": a114,
        [v117]() {
        },
        "maxByteLength": 60241,
        get d() {
        },
        "h": -1000000.0,
        ...a113,
        "b": v25,
        "d": Int16Array,
        [60241](a121) {
        },
    };
}
let v123 = 268435440;
v123--;
Uint8Array.name;
new Uint8Array(v123);
f112(v104);
f112(v100);
