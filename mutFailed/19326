class C3 {
    constructor(a5, a6) {
        function f7() {
            const v10 = new BigInt64Array(3768);
            let o11 = {
            };
            [,...o11] = v10;
            return v10;
        }
        this.toString = f7;
        try {
            new Set(this);
        } catch(e17) {
        }
    }
}
new C3(3.0324741634753226e+307, 3.0324741634753226e+307);
new C3(3.0324741634753226e+307, 3.0324741634753226e+307);
const v20 = new C3(-2.2250738585072014e-308, -1.8287992814193785);
function f21(a22, a23) {
    function f24() {
        return f24;
    }
    return a23;
}
v20.toString = f21;
class C25 extends C3 {
    n(a27, a28) {
        this[3695] = a28;
        this[9] = -1.8287992814193785;
        this.h ||= a27;
        C3[a27] *= a28;
        return a27;
    }
    c = C3;
    h;
    static [v20];
}
new C25();
const v30 = new C25();
new C25();
function f32() {
}
const v33 = [601759695];
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    Object.defineProperty(a39, "valueOf", { writable: true, enumerable: true, value: f21 });
    function f42() {
        return a37;
    }
    const v43 = f32();
    const v45 = new Int8Array();
    function f46(a47, a48) {
        const o50 = {
            get d() {
            },
        };
        return v43;
    }
    f46(f46());
    const v53 = v45.buffer;
    function f54() {
        try {
            f46(f36, 1.080177485506644e+308);
        } catch(e57) {
        }
        return v30;
    }
    v53.constructor = f54;
    new Int8Array();
    let v60 = 1000000000000.0;
    v60--;
    v53.slice(2147483648);
    %OptimizeFunctionOnNextCall(f42);
    let v64;
    try { v64 = v34["find"](..."find", a40, ...v33, ...v34, ...522675525n); } catch (e) {}
    Symbol();
    const v68 = new Uint8ClampedArray();
    const o69 = {
        ...v68,
    };
    v64 <= a39;
    return arguments;
}
for (let v71 = 0; v71 < 10; v71++) {
    f36(v71, v71, f36, v34);
}
%OptimizeFunctionOnNextCall(f36);
f36();
