const t0 = 128;
const v2 = new t0(128);
let v4 = 0;
while (v4 < 4) {
    new Int32Array(64);
    new Float64Array(2774);
    new Int8Array(1159);
    v4++;
}
new Int8Array(3);
const v21 = new Int32Array(255);
const v23 = new Set();
[Int8Array,Int8Array,Float32Array,Int8Array];
const v25 = [128];
const v26 = [v25,Set,Int8Array,255,v25];
class C31 {
}
function f32(a33, a34) {
    function f35(a36) {
        return arguments;
    }
    const v38 = f35(f32, a33, a33, a34);
    const o39 = {
        ...v38,
    };
    v21.reverse(a33, 255, a33, a33, o39, v2);
    new Int32Array(o39, 128);
    f35(v23);
    %PrepareFunctionForOptimization(f35);
    f35(v23);
    f35(v23);
    %OptimizeFunctionOnNextCall(f35);
    f35(v23);
    return o39;
}
function* f46(a47, a48) {
    try { a48(a48, -167849674, a48, 255, Int32Array, a48); } catch (e) {}
    const o50 = {
    };
    try {
        o50.a = a48;
    } catch(e51) {
    }
    try {
        const o52 = {
        };
        o52.a = a48;
        o52.d = v26;
    } catch(e53) {
    }
    try {
        const o54 = {
        };
        o54.a = a48;
        o54.d = v26;
        o54.b = a48;
    } catch(e55) {
    }
    try {
        const o56 = {
        };
        o56.a = a48;
        o56.d = v26;
        o56.b = a48;
    } catch(e57) {
    }
    yield* v2;
    return Float32Array;
}
f46(v26, f32);
f32();
f32(-1000000000.0, C31);
