[536870887,-65535];
const v1 = [-5,-9007199254740991,1000,-65537,-1237260295,45114,536870887,-2106059537,-9007199254740992];
v1.g = v1;
const v2 = [-65536,-1,1266058136,-4294967297,11321,16,-14,-5,-2147483648,-963951731];
const v4 = new WeakSet();
try { v4.add(v2); } catch (e) {}
Uint8Array.e = Uint8Array;
const v8 = new Uint8Array(1);
2430 * 2430;
let v12;
try { v12 = new Float32Array(Uint8Array, v1, Uint8Array); } catch (e) {}
const v13 = new Float32Array(2430);
try { v13.values(); } catch (e) {}
new BigInt64Array(1198);
class C21 {
}
function f22(a23, a24) {
    function F25(a27, a28, a29) {
        if (!new.target) { throw 'must be called with new'; }
        const v30 = this?.constructor;
        try { new v30(a28, this, v8); } catch (e) {}
        try {
            this.f = C21;
        } catch(e32) {
        }
        try {
            this.h = 2430;
        } catch(e33) {
        }
        try {
            this.b = 1;
        } catch(e34) {
        }
    }
    F25.caller = F25;
    new F25(1198, a23, a24);
    new F25(a24, 1000000000.0, BigInt64Array);
    const v37 = new F25(a23, a23, BigInt64Array);
    return v37;
}
Object.defineProperty(C21, "toString", { writable: true, enumerable: true, value: f22 });
function F38(a40) {
    if (!new.target) { throw 'must be called with new'; }
    function f41() {
        const v42 = C21 + a40;
        try {
            v1.g = v42;
        } catch(e43) {
        }
        return 2430;
    }
    this.constructor = f41;
    const v44 = this.constructor;
    v44.length;
    v44.bind();
    try { new v44(); } catch (e) {}
}
try { new F38(WeakSet); } catch (e) {}
new v12();
const t59 = 8.109331178787816;
new t59();
const v52 = new C21();
v52?.constructor;
try {
const t0 = 1;
new t0();
} catch (e) {}
v52.getUint16 = 1;
16 ^ 16;
const v60 = 536870912n << 536870912n;
-v60;
try { v52.getUint16(-16, undefined, 16, 6, v60); } catch (e) {}
