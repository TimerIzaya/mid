new Uint8ClampedArray(Uint8ClampedArray);
new Float64Array(128);
const v8 = new BigUint64Array(173);
class C9 extends Float64Array {
    set h(a11) {
        try {
            v8.reduce(a11);
        } catch(e17) {
        }
    }
    static {
        let v21 = Uint8ClampedArray || Uint8ClampedArray;
        let v22 = v21--;
        Math.sign(v22);
        ++v22;
        +v21;
    }
}
const v26 = new C9();
new C9();
new C9();
function f32() {
}
function f33() {
    return f32;
}
function f34(a35) {
    const v37 = new Uint8Array();
    function f38(a39, a40, a41, a42) {
        const v43 = a41 ^ a41;
        const o47 = {
            "b": a39,
            ...v37,
            n(a45, a46) {
                return v43;
            },
        };
        return f38;
    }
}
Object.defineProperty(f32, "valueOf", { writable: true, configurable: true, get: f33, set: f34 });
const v48 = [601759695];
const v49 = [1073741824,1073741823,1376142744,1073741825];
function f51(a52, a53, a54, a55) {
    function f56(a57, a58) {
        f34(a58);
        return a58.__proto__;
    }
    a54.valueOf = f56;
    function f62() {
        return 522675525n;
    }
    f32();
    const v65 = new Int8Array();
    const v68 = v65.buffer.slice(2147483648);
    function f69() {
        function f70(a71) {
            function f75(a76, a77, a78) {
                const o79 = {
                    "h": a78,
                };
                return o79;
            }
            f75(1000000.0, -3.9870582640049523, 1000000.0);
            f75(-3.9870582640049523, -2.2250738585072014e-308, -3.9870582640049523);
            return v26;
        }
        return f70;
    }
    function f82(a83) {
        new Float32Array(Uint8ClampedArray, Uint8ClampedArray, Float32Array);
    }
    Object.defineProperty(v68, Symbol.toPrimitive, { writable: true, configurable: true, get: f69, set: f82 });
    %OptimizeFunctionOnNextCall(f62);
    try { v49["find"](..."find", -4.832103967129213, ...v48, ...v49, ...522675525n); } catch (e) {}
    v68 <= a54;
    return arguments;
}
for (let v92 = 0; v92 < 10; v92++) {
    f51(v92, v92, f32, 522675525n);
}
%OptimizeFunctionOnNextCall(f51);
f51();
