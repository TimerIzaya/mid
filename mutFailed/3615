function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 4294967296;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
let v7 = /a(?=b)ca+b\xf0\x9f\x92\xa9+/gvdms;
const v8 = /a\fb\nc\rd\te\vf/gvms;
v8.unicodeSets;
const v10 = /(\u0060)/s;
class C11 {
    constructor(a13, a14, a15) {
        try { Math.expm1(a14); } catch (e) {}
        (-1073741824) ** v7;
        v7 % -1073741824;
        --v7;
        Math.exp(-1073741824);
    }
    static g;
    get a() {
        new Date();
        Int8Array.name = Int8Array;
        const v29 = new String();
        Object.defineProperty(v29, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
        let v30 = 256;
        v30--;
        const o32 = {
            "maxByteLength": v30,
        };
        const v34 = new SharedArrayBuffer(256, o32);
        v34.byteLength;
        const v37 = new Int32Array(v34);
        return v37;
    }
}
let v38;
try { v38 = v5(v6, C11, F0, F0); } catch (e) {}
const o39 = {
};
o39.d = o39;
try {
    o39.c = v38;
} catch(e40) {
}
try {
    const o41 = {
    };
    o41.h = o41;
    o41.b = v38;
    o41.c = v38;
    o41.b = v38;
} catch(e42) {
}
try {
    const o43 = {
    };
    Object.defineProperty(o43, "c", { writable: true, configurable: true, value: v4 });
    for (let v44 = 0; v44 < 25; v44++) {
    }
    const v46 = new Uint8Array();
    v46.BYTES_PER_ELEMENT = v46;
    class C47 {
        set e(a49) {
            const v51 = Symbol.iterator;
            const o57 = {
                [v51]() {
                    let v53 = 10;
                    const o56 = {
                        next() {
                            v53--;
                            return this;
                        },
                    };
                },
            };
        }
    }
    C47.name = C47;
    new C47();
    o43.c = v38;
    o43.b = v38;
    o43.d = v38;
} catch(e59) {
}
try {
    const o60 = {
    };
    o60.a = o60;
    o60.c = v38;
    o60.b = v38;
    Int8Array.name;
    const v64 = new Int8Array(3938);
    let v65 = 3;
    [...v65] = v64;
    o60.d = v4;
} catch(e66) {
}
const v67 = new C11();
const v68 = v67?.constructor;
try { new v68(F0, v38, v6); } catch (e) {}
const v70 = new C11();
try {
    try {
    } catch(e71) {
    }
    v7?.[1];
    const v74 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
    try { v74.filter(59890n); } catch (e) {}
    new F0();
} catch(e77) {
}
let {"a":v78,} = v67;
const v79 = new C11();
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = C11;
    } catch(e86) {
    }
}
const v87 = new F80(v8, v10, v70, v4);
new F80(v8, v70, v67, v4);
const v89 = new F80(v7, v79, v67, v4);
const v90 = v89?.h;
try { new v90(F0, v6, F80); } catch (e) {}
try { new Int8Array(o39, v70, o39); } catch (e) {}
("getBigInt64").normalize();
const v99 = v87.constructor;
v99.length = v99;
class C100 extends v99 {
}
const v101 = new C100();
const v102 = v101?.constructor;
try { new v102(); } catch (e) {}
const v104 = [1126838905];
const v105 = v104?.find;
try { new v105(o39); } catch (e) {}
const v107 = Reflect.construct(Int8Array, v104);
try { v107.values(); } catch (e) {}
