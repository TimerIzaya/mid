const v3 = /[(?:a+)?3a(?!b)*]/uy;
v3.dotAll = v3;
const v4 = /h8(?:a?)+/guisy;
const v5 = /(\xed\xb0\x80)\x01/udms;
v5.source = v5;
function f6(a7, a8, a9, a10) {
    a8.constructor = f6;
    const o15 = {
        ..."b",
        "f": a9,
        [v5](a12, a13) {
            function f14() {
                return a13;
            }
            return f14;
        },
        ..."n",
        [a7]: a7,
        11: v4,
        ...a8,
        630: a7,
    };
    return v4;
}
function f16(a17) {
    try {
        v5.ignoreCase = a17;
    } catch(e18) {
    }
    return v3;
}
Object.defineProperty(f6, Symbol.toPrimitive, { value: f16 });
const v21 = f6(f6, v5, v5, v5);
f6("n", v4, v3, v4);
f6(f6, v3, v3, v4);
class C24 extends f6 {
    toString(a26, a27, a28, a29) {
        super[a27];
        super.f;
        const t37 = a28.f;
        t37[-2] = v4;
        return v4;
    }
    static n(a34, a35) {
        function f36(a37, a38) {
            (-7.865682278439503).toExponential();
            function F42() {
                if (!new.target) { throw 'must be called with new'; }
                const v45 = [F42,this];
                [v45,1141300185,F42];
                let v47 = [this];
                Math.log2(v45);
                const v51 = v47++;
                v51 ^ v51;
                Math.asinh(536870887);
                try {
                    class C55 extends this.constructor {
                        e = F42;
                    }
                    C55.caller;
                    new C55();
                } catch(e58) {
                }
            }
            function f59(a60) {
            }
            this.onmessage = f59;
        }
        [v21,a35];
        const o68 = {
            "arguments": v4,
            "type": "function",
        };
        new Worker(f36, o68);
        return a35;
    }
}
try { new C24(); } catch (e) {}
const v71 = new C24();
v71.source = v71;
const v72 = new C24();
function f73(a74, a75) {
    new Uint8ClampedArray(127);
    new Uint8ClampedArray(12);
    new Int32Array(3689);
    return Uint8ClampedArray;
}
v72[Symbol.toPrimitive] = f73;
const v87 = v72?.constructor;
try { new v87("b", f6); } catch (e) {}
const v89 = new C24();
function f90() {
    return f6;
}
function f91(a92) {
    new Uint8ClampedArray([-1000000000000.0,-1.6023671870362022e+308,3.612724278583076e+307,-8.572552822954835,377868.06762097357,0.35752124726168266]);
}
Object.defineProperty(v89, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f90, set: f91 });
const v98 = v89?.constructor;
try { new v98(v72, v3); } catch (e) {}
65535 - 65535;
let v103 = 129;
v103--;
function f105() {
    return v103;
}
f105.toString = f6;
f105.d = f105;
const o107 = {
    [f105]() {
    },
};
function f111() {
    const o116 = {
        "b": 1e-15,
        [3](a115) {
        },
    };
    return o116;
}
const t120 = f111();
delete t120.b;
(65535).iterator;
const o122 = {
    [v71]() {
    },
};
o122.h = o122;
-(-11);
class C125 {
    set g(a127) {
        -11 || a127;
    }
}
