class C3 {
    static b = -8n;
    [11n];
    static [-14n];
    static toString(a5) {
        let v6;
        try { v6 = new a5(); } catch (e) {}
        try { v6(); } catch (e) {}
        ~-14n;
        return 2.220446049250313e-16;
    }
    static #a;
}
function f12(a13) {
    const v15 = new BigInt64Array();
    v15.copyWithin(-9223372036854775808);
    return -14n;
}
C3[Symbol.toPrimitive] = f12;
const v20 = new C3();
const v21 = new C3();
const v22 = new C3();
function f26(a27, a28, a29, a30) {
    function f31() {
        return f26;
    }
    Object.defineProperty(a30, Symbol.toPrimitive, { writable: true, get: f31 });
    const o40 = {
        "h": a28,
        "d": -14n,
        [v22]: C3,
        __proto__: a29,
        [a30]: a27,
        toString(a35, a36, a37, a38) {
            v20[11n];
            return 0.0;
        },
        [C3]: 11n,
        "a": 5.0,
        ...a27,
        [-8n]: v21,
    };
    return o40;
}
f26(f26(f26(v22, 5.0, -14n, C3), -3.0, 0.0, -8n), 0.0, 0.0, C3);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o50 = {
    };
} catch(e51) {
}
class C52 {
    static p(a54) {
        const o61 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f56() {
                        return this;
                    }
                    const v57 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e60) {
                }
                return -128;
            },
        };
        return o61;
    }
    g;
}
try { new C52(); } catch (e) {}
const v63 = new C52();
class C65 extends Map {
}
new C65();
new Float32Array();
v63.g;
new C52();
new C52();
class C72 extends C52 {
    static n(a74, a75) {
        function F77(a79, a80, a81, a82) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C89 {
        }
        this[Symbol.matchAll] = a75;
        a74 += C65;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e94) {
        }
        return -128;
    }
    #c = C72;
    valueOf(a98, a99, a100) {
        super.f;
    }
    constructor(a103, a104, a105, a106) {
        super();
        function f107() {
            const v108 = [];
            v108[6] = v108;
            v108[6] = 4294967295;
            new Int32Array();
            const o122 = {
                get b() {
                    return Int32Array;
                },
                "c": f107,
                toString(a115, a116, a117) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a119) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a121) {
                },
            };
        }
        for (let v123 = 0; v123 < 5; v123++) {
            f107();
        }
    }
    set f(a126) {
        for (const v127 of a126) {
            try {
            } catch(e128) {
            }
        }
        class C130 extends SharedArrayBuffer {
        }
        const o131 = {
        };
        try {
        } catch(e132) {
        }
        try {
            const o133 = {
            };
        } catch(e134) {
        }
        try {
            const o135 = {
            };
            o135.c = -128;
            o135.e = this;
        } catch(e136) {
        }
        try {
            const o137 = {
            };
        } catch(e138) {
        }
    }
}
const v139 = new C72();
v139.execution = v20;
gc(v139);
class C142 {
}
function f143(a144, a145, a146, a147) {
    const o152 = {
        p(a149, a150, a151) {
        },
    };
}
for (let v153 = 0; v153 < 25; v153++) {
}
const v155 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f156(a157, a158) {
    const o160 = {
        get d() {
        },
    };
}
f156();
const v162 = f156(v155);
try { v162(956206316, 956206316); } catch (e) {}
