class C3 {
    static get h() {
        let v5;
        try { v5 = this.all(-307560.0098508138, this, -307560.0098508138); } catch (e) {}
        const v6 = v5 ** v5;
        this[v5];
        return v6;
    }
    256;
    constructor(a9) {
        a9[-307560.0098508138] = -307560.0098508138;
    }
    9;
    static #g;
    f;
    static c;
}
const v10 = new C3(-307560.0098508138);
new C3(C3);
new C3(-2.0);
const v13 = [536870887,1073741823,-2026473848,-381449811,5368,12,-3];
const v14 = [-9007199254740990,4404,7,63308,-3521,1033390020];
const v15 = [-2147483647,1073741824];
class C16 {
    static #b = v10;
    static d = v14;
    set d(a18) {
        try {
            v13.#b;
        } catch(e20) {
        }
        const o21 = {
        };
        try {
            o21.e = v15;
        } catch(e22) {
        }
        try {
            const o23 = {
            };
            o23.e = v15;
            o23.b = this;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.e = v15;
            o25.b = this;
            o25.c = a18;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            const v30 = new Uint32Array(186);
            const v34 = new Float64Array(186, 186, 16);
            const v35 = [Float64Array,v34];
            class C36 {
                constructor(a38, a39) {
                    if (Float64Array > v30) {
                        new Uint32Array(v35);
                    } else {
                        function F42(a44, a45, a46) {
                            if (!new.target) { throw 'must be called with new'; }
                        }
                    }
                }
            }
            o27.e = v15;
            o27.b = this;
            o27.h = v14;
        } catch(e47) {
        }
    }
    constructor(a49) {
        function f50(a51, a52) {
            a51[5];
        }
        f50(v13);
        f50(v13);
        f50(a49);
    }
}
new C16();
new C16();
new C16();
class C67 {
}
const v68 = new C67();
class C79 extends BigInt64Array {
}
const v80 = [-2.2250738585072014e-308,4.258971338651328e+307];
class C82 {
    #valueOf(a84, a85) {
    }
    static #a = v80;
    #g = 536870887n;
    static #f = v14;
    #b;
}
function f87() {
    try { v68.getMinutes(arguments); } catch (e) {}
    arguments[arguments] = v68;
    return 65535;
}
const t106 = "Q8F";
t106[2078209647] = [];
const o94 = {
    "maxByteLength": 1000,
};
new ArrayBuffer(8, o94);
