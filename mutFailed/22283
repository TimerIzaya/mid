new Int16Array(4096);
new Uint8ClampedArray(256);
new Int8Array(1785);
(4096).sup();
Array(36862);
new Float64Array(1);
function f17(a18, a19, a20, a21) {
    Object.defineProperty(a18, "g", { value: a19 });
    a20 % a20;
    const o26 = {
        n(a24, a25) {
        },
    };
    return a19;
}
new BigUint64Array(4096);
const v31 = new Uint8Array(2586);
class C36 {
    [1073741824] = 1073741824;
    #o(a38, a39) {
        const v40 = super.h;
        a38 > 1073741824;
        return v40;
    }
    #p(a43) {
        const v44 = super[-1276341520];
        function f45() {
            return v44;
        }
        return 1073741824;
    }
}
new C36();
new C36();
new Map();
try { Map(); } catch (e) {}
const v53 = new Map();
function f54(a55, a56, a57, a58) {
    a57.arguments = a57;
    a55[3];
    a57.caller = a57;
    const o66 = {
        n(a61, a62, a63, a64) {
            for (let v65 = 0; v65 < 10; v65++) {
            }
        },
        16: a55,
        ...v53,
    };
    return o66;
}
const v67 = f54("m", "m", f54);
new Float64Array();
let v70 = 16;
v70++;
try { BigInt64Array(); } catch (e) {}
new BigInt64Array();
const v76 = ~-4294967297n;
v76 ^ v76;
const v79 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v80 = [601759695];
try { v80.sort(v80); } catch (e) {}
v80[0] = v80;
const v82 = [1073741824,1073741823,1376142744,1073741825];
function f84(a85, a86, a87, a88) {
    v31.lastIndexOf(10);
    new Uint16Array(93);
    arguments.toString();
    function f96() {
        const v98 = ("Vre")?.toLocaleUpperCase;
        try { new v98(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v102 = -268435456;
        v102--;
        -(v102 + v102);
        const o123 = {
            "c": -4294967297n,
            [522675525n](a107, a108) {
                const v112 = new Uint32Array(5);
                v112[1] = 716884141;
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v80,
            valueOf(a114, a115) {
            },
            "e": -4294967295,
            "e": v102,
            "maxByteLength": -4294967295,
            "arguments": v79,
            ...v80,
            "type": "Vre",
            ..."Vre",
            valueOf(a117, a118) {
            },
            ..."Vre",
            4: "Vre",
            "c": v102,
            "type": "Vre",
            toString(a120, a121, a122) {
            },
            6: v102,
        };
        try { o123.valueOf(o123, -128); } catch (e) {}
        return "Vre";
    }
    f96.length;
    const o130 = {
        ["8"](a128, a129) {
        },
    };
    f96();
    const v133 = new Int8Array();
    try { v133.findIndex(v67); } catch (e) {}
    %OptimizeFunctionOnNextCall(f96);
    ("find").strike();
    try { v82["find"](..."find", a88, ...v80, ...v82, ...522675525n); } catch (e) {}
}
for (let v138 = 0; v138 < 5; v138++) {
    f84();
}
f84();
%OptimizeFunctionOnNextCall(f84);
f84();
new Uint32Array(1024);
function F143(a145, a146, a147, a148) {
    if (!new.target) { throw 'must be called with new'; }
    ("entries").toUpperCase();
    ~a146;
    const v152 = this.constructor;
    try { new v152(); } catch (e) {}
}
const v154 = new F143();
new F143(v154, F143, v154, v154);
