new Float32Array(1011);
const v5 = new Uint8Array(201);
const v8 = new Uint16Array(13);
class C12 extends Uint8Array {
    #g = 13;
    constructor(a14, a15, a16) {
        super(13, a16);
        super.length = this;
        try {
            v8.#g;
        } catch(e18) {
        }
    }
    get g() {
        super.byteOffset ^= 28.71296673089114;
        let v20;
        try { v20 = v8.findLast(Float32Array, v5); } catch (e) {}
        this[257] = v20;
        Object.defineProperty(this, "b", { enumerable: true, value: Float32Array });
        const v21 = 1011 << 201;
        try {
            this.#g = v21;
        } catch(e22) {
        }
        return v21;
    }
}
new C12(28.71296673089114, 6.707994467284659e+307, 1011);
new C12(6.707994467284659e+307, 6.707994467284659e+307, 1011);
new C12(-1.064335248855798, 6.707994467284659e+307, 13);
const v26 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f27() {
    return f27;
}
Symbol.for(Symbol);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
}
new Uint8ClampedArray();
function f34(a35) {
    class C38 {
        m(a40, a41) {
            new a41(-1073741824, -268435456, -1073741824, -1073741824, ...a40);
        }
    }
    return a35;
}
Object.defineProperty(v26, 1, { get: f27, set: f34 });
function f44() {
    return v26;
}
class C45 extends f44 {
}
const v46 = new C45();
delete v46[1];
