class C3 {
    constructor(a5) {
        const v6 = [9];
        const v8 = ["replace",-1000.0,[v6,v6,this,9,a5],v6];
        try { a5("replace", v8); } catch (e) {}
    }
    valueOf(a11) {
        const v12 = super.a;
        this * a11;
        try {
            a11.c = v12;
        } catch(e14) {
            const v15 = [];
            const v17 = new Float64Array(v15);
            v15[Symbol.iterator] = v17;
        }
        return "replace";
    }
}
new C3(9);
new C3(9);
new C3(-1000.0);
new Float32Array(256);
const v28 = new Uint32Array();
function f29(a30, a31) {
    const o39 = {
        [v28](a33, a34, a35) {
            a31?.[a33].__proto__;
        },
    };
    return a30;
}
new Int32Array(12);
const o46 = {
    "h": true,
    ...true,
    get c() {
        return this;
    },
    set d(a45) {
    },
    "d": true,
};
("6Ct").normalize();
const t43 = ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
t43.g = v28;
new BigInt64Array(23);
const v57 = new Uint16Array(96);
new Float64Array(v57);
Date[Symbol.toPrimitive] = Date;
new Date(Date);
function f63(a64, a65, a66, a67) {
    function f69() {
        return arguments;
    }
    const v71 = new Int8Array();
    v71.buffer;
    %OptimizeFunctionOnNextCall(f69);
    ("find").codePointAt(f63);
    return arguments;
}
f63();
