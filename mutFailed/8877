const v0 = [];
const v5 = -5.605869200168339e+307 << -5.605869200168339e+307;
var b = 128;
for (let v7 = 0; v7 < 25; v7++) {
}
class C10 {
    #valueOf(a12, a13) {
        const v15 = Symbol.match;
        this[v15] = -5.605869200168339e+307;
        new Uint8Array(Uint8Array, Uint8Array);
        const v18 = [-4294967297n];
        const v19 = [v18,v18,v18,v18];
        [v18,v19,v19,v19];
        const v21 = super.c;
        let v22;
        try { v22 = v0.includes(v15, v21); } catch (e) {}
        v0[4] = v0;
        v22 ** a12;
        return this;
    }
    4;
    9 = -5.605869200168339e+307;
    [-2];
    c = v0;
    #e = v5;
    static {
        const t26 = this.__proto__;
        t26();
    }
}
new C10();
new C10();
new C10();
/dC/vdsy;
/[{12,[\d-z](?!a)?a]/gy;
/(Y(?<=a)?)/vdims;
function f33() {
    return f33;
}
const v36 = new Uint32Array(Uint32Array, Uint32Array);
v36[0.29489550717955537];
function f38() {
    const v40 = [8n,8n,8n,8n];
    for (let v41 = 0; v41 < 25; v41++) {
        "p" + v41;
    }
    const t46 = [-0.23549034038133065];
    t46.then = Date;
    const v46 = v40 > 8n;
    let v47 = 0;
    for (let v48 = 0; v48 < 5; v48++) {
        Array(36862);
    }
    while (v47 < 10) {
        for (let v54 = 0; v54 < 5; v54++) {
            "n" + v54;
        }
        v47++;
        const v60 = new BigUint64Array(3375);
        let [v61,,v62,...v63] = v60;
        const o64 = {
        };
        function F65(a67, a68, a69, a70) {
            if (!new.target) { throw 'must be called with new'; }
            function f74(a75, a76) {
                const o79 = {
                    968: a76,
                    "d": a75,
                    [268435439n]: 2105444095n,
                    __proto__: o64,
                    "g": a69,
                    ...a76,
                    "b": -4294967296n,
                    "f": this,
                    valueOf(a78) {
                        return a78;
                    },
                };
                return a76;
            }
            for (let v80 = 0; v80 < 100; v80++) {
                f74(-4294967296n, v80);
            }
        }
    }
    function F82() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v85 = [-1.5424212036356715e+308];
    v85[536870887n] = v85;
    return v46;
}
%PrepareFunctionForOptimization(f38);
f38();
%OptimizeFunctionOnNextCall(f38);
f38();
