function f0() {
    const o26 = {
        "b": 5,
        __proto__: "hasInstance",
        n(a5, a6) {
            a6?.[142];
            new Float32Array(256);
            new Uint8ClampedArray(1000);
            new Int32Array(120);
            new BigUint64Array(1356);
            new Int32Array(64);
            new Int32Array(16);
            return 256;
        },
    };
    return o26;
}
const v27 = f0();
const v28 = f0();
const v29 = f0();
const v30 = [512,2054523761,268435439,128,536870889,12,-24580,-4096,16];
const v31 = [2147483649,24504];
const v32 = [5,1593837297,13];
const v33 = [v27];
[v31,v29,v28,v33];
const v35 = [v31,v28,v30];
function F36(a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a40;
    } catch(e41) {
    }
}
const v42 = new F36(v33, v32, v30);
new F36(v35, v27, v33);
const v44 = new F36(v35, v28, v31);
new Int8Array(64);
for (const v49 in v33) {
    Object.defineProperty(v35, v42, { writable: true, get: f0, set: f0 });
    Object.defineProperty(v44, "b", { writable: true, value: v44 });
    64 && v49;
}
new Int8Array(128);
new Uint32Array(1662);
function f57() {
    ("filter")["startsWith"]();
    const v61 = Math.cosh(Math);
    v61 / v61;
    return "startsWith";
}
%PrepareFunctionForOptimization(f57);
const v63 = f57();
%OptimizeFunctionOnNextCall(f57);
let v64;
try { v64 = ("filter").trimStart(); } catch (e) {}
%VerifyType(v64);
v44[Uint32Array] *= v64;
v44[v30] = f0;
v63 || v29;
f57();
