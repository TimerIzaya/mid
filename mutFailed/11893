const v0 = /xyz{1,32}/gsy;
const v1 = /\p{Script_Extensions=Greek}/vdis;
const v2 = /7a$/gsy;
const v5 = new Array(0);
try { v5.toString(); } catch (e) {}
class C7 {
    constructor(a9, a10, a11, a12) {
        const v13 = a9?.constructor;
        v5 * Array;
        v13[Symbol.hasInstance];
        const v19 = Symbol.iterator;
        const o28 = {
            [v19]() {
                let v21 = 10;
                const o27 = {
                    next() {
                        v21--;
                        const v25 = v21 == 0;
                        const o26 = {
                            "done": v25,
                            "value": v21,
                        };
                        return o26;
                    },
                };
                return o27;
            },
        };
        try { new v13(v0, v0); } catch (e) {}
        a10.lastIndex;
        try {
            Array.__proto__ = v2;
        } catch(e31) {
        }
    }
    static h = v5;
    #toString(a33, a34, a35) {
        [1.7976931348623157e+308,-9.278136022856911];
        [1000000000.0,8.146541547793774,-4.089164498014151,-871898.0396199798,1000000000.0];
        const v38 = [3.0,Infinity,2.220446049250313e-16,-7.172729557809186e+307];
        try {
            super.m(v5, v5, v38);
        } catch(e40) {
            Math.expm1();
            function f43() {
                59817n < undefined;
                return f43;
            }
        }
        return v2;
    }
}
C7.prototype = C7;
const v47 = new C7(v1, v0, v1, v1);
v47.length;
const v49 = new C7(v2, 0, v47, v47);
v49.length;
function f51() {
    return f51;
}
const v53 = new Date(f51);
try { v53.setUTCSeconds(v5, v2); } catch (e) {}
const v55 = new C7(v2, C7, v0, v1);
[2.2250738585072014e-308,-1000000.0,-1.3530602355260318e+308,0.3201243171363376,-1.3713789556856819e+308,-7.686752126322086e+307,1e-15,-2.220446049250313e-16];
const v57 = [-539527.2479469809,-0.0,1000000000000.0,2.2250738585072014e-308,-1000000.0,4.0,9.451869188959504e+307];
try { v57.groupToMap(v57); } catch (e) {}
const v59 = [-1.1471644287455656e+308,-7.002892558908478,-5.0];
let v60;
try { v60 = v59.map(v49); } catch (e) {}
const v62 = [];
function F63(a65, a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new F63();
const v70 = v69?.constructor;
try { new v70(v0, v62, v49, v0); } catch (e) {}
const v72 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C73 {
}
const v74 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v75 = [601759695];
for (let v76 = 0; v76 < 5; v76++) {
    function f77() {
        try { new Array(Array); } catch (e) {}
        const v81 = Array();
        try { v81.with(v81, F63); } catch (e) {}
        v81.unshift();
        try {
            v72.forEach(Float64Array);
        } catch(e85) {
            e85.b = e85;
        }
        const o86 = {
            "c": v75,
            "arguments": v74,
            ...v69,
            "d": f77,
            __proto__: v53,
            "b": f77,
            ...v69,
            [v60]: v55,
            "type": C73,
        };
        const o89 = {
            "maxByteLength": 536870887,
        };
        const v91 = new SharedArrayBuffer(7, o89);
        new BigInt64Array(v91);
        const v94 = [];
        try { v94.findLast(v94); } catch (e) {}
        function f96() {
        }
        try { Symbol.keyFor(v55); } catch (e) {}
        v94[Symbol.toPrimitive] = f96;
        function F100(a102) {
            if (!new.target) { throw 'must be called with new'; }
            try { this.valueOf(Array, v53, v53, a102); } catch (e) {}
        }
        class C104 extends F100 {
            valueOf(a106, a107, a108, a109) {
                a106[0];
                super[this] = F100;
            }
            static g = v72;
            static 1;
        }
        C104[1] = C104;
        const v111 = new C104();
        const o114 = {
            set g(a113) {
            },
        };
        for (const v115 in o114) {
            let v116;
            try { v116 = v62.flat(4096); } catch (e) {}
            v116[1];
            new C73();
            v111.valueOf(v115);
        }
        return Array;
    }
    f77();
    %OptimizeFunctionOnNextCall(f77);
}
