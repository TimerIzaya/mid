const v0 = [];
const v4 = 9 * 9;
v4 - v4;
function f6(a7) {
    const o19 = {
        __proto__: v0,
        "d": a7,
        198: v0,
        set c(a9) {
            const v10 = [a7,this,a9,this,...v0];
            Object.defineProperty(this, a7, { writable: true, configurable: true, enumerable: true, value: v0 });
            a9 >>> v10;
            -v10;
            !969.9518836574655;
            -v10;
        },
    };
    o19[0] = o19;
    return o19;
}
f6(9);
const v21 = f6(9);
v21[0] = v21;
try { v21.unshift(9); } catch (e) {}
v21[198];
const v24 = f6(-9007199254740991);
-3.0;
909607.8682059357 + 909607.8682059357;
const v30 = -909607.8682059357;
-2.2250738585072014e-308 >> -2.2250738585072014e-308;
615.8757894698626 >>> 615.8757894698626;
class C38 {
    [1073741824] = 1073741824;
    #o(a40, a41) {
        const v42 = super.h;
        a40 > 1073741824;
        return v42;
    }
    #p(a45) {
        const v46 = super[-1276341520];
        function f47() {
            return v46;
        }
        return 1073741824;
    }
}
try { new C38(); } catch (e) {}
const v49 = C38.prototype;
try { v49.constructor(); } catch (e) {}
const v51 = new C38();
v51[1073741824] = v51;
const v52 = new C38();
v52[1073741824] = v52;
try { ("m").split(-2.2250738585072014e-308, -1276341520); } catch (e) {}
const v56 = new Map();
try { v56.propertyIsEnumerable(v56); } catch (e) {}
Map.g = Map;
try { Map(); } catch (e) {}
const v60 = new Map();
function f61(a62, a63, a64, a65) {
    a62[0] = a62;
    try { a63.localeCompare(v24); } catch (e) {}
    a64.length;
    a62[0] = a62;
    a63[0] = a63;
    a64.arguments = a64;
    a62[3];
    a64.caller = a64;
    const o75 = {
        n(a70, a71, a72, a73) {
            for (let v74 = 0; v74 < 10; v74++) {
            }
        },
        16: a62,
        ...v60,
    };
    return o75;
}
f61.d = f61;
const v76 = f61("m", "m", f61);
new Float64Array();
let v79 = 16;
const v80 = v79++;
v80 <= v80;
try { BigInt64Array(); } catch (e) {}
new BigInt64Array();
-4294967297n & -4294967297n;
const v87 = ~-4294967297n;
const v88 = v87 ^ v87;
const v90 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v91 = [601759695];
try { v91.find(v80); } catch (e) {}
try { v91.sort(v91); } catch (e) {}
v91[0] = v91;
const v94 = [1073741824,1073741823,1376142744,1073741825];
function f96(a97, a98, a99, a100) {
    function f102() {
        const v103 = [15,52917,-9223372036854775807,-647320912,1463936330,-11132,-65537,1005084643,16,1073741823];
        function f104() {
            return ("Vre").fixed("Vre").concat(v103);
        }
        return a97;
    }
    arguments.toString = f102;
    const v108 = arguments.toString();
    v108[11] = v108;
    function f109() {
        try { ("Vre").strike(); } catch (e) {}
        const v112 = ("Vre")?.toLocaleUpperCase;
        try { new v112(); } catch (e) {}
        let v114;
        try { v114 = ("Vre").fixed(); } catch (e) {}
        v114.length;
        let v117 = -268435456;
        -v117;
        const v119 = v117--;
        v119 - v119;
        let v121 = v117 + v117;
        v121++;
        -v121;
        const o138 = {
            "c": -4294967297n,
            [522675525n](a125, a126) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v91,
            valueOf(a128, a129) {
            },
            "e": -4294967295,
            "e": v117,
            "maxByteLength": -4294967295,
            "arguments": v90,
            ...v91,
            "type": "Vre",
            ..."Vre",
            valueOf(a131, a132) {
                this[2];
            },
            ..."Vre",
            4: "Vre",
            "c": v117,
            "type": "Vre",
            toString(a135, a136, a137) {
            },
            6: v117,
        };
        try { o138.valueOf(o138, -128); } catch (e) {}
        return "Vre";
    }
    const v140 = f109.length;
    v140 !== v140;
    f109();
    const v144 = new Int8Array();
    try { v144.lastIndexOf(v108); } catch (e) {}
    try { v144.findIndex(v76); } catch (e) {}
    %OptimizeFunctionOnNextCall(f109);
    const v148 = ("find").strike();
    try { v148.padStart(v30); } catch (e) {}
    try { v94["find"](..."find", a100, ...v91, ...v94, ...522675525n); } catch (e) {}
}
try { f96.bind(v88); } catch (e) {}
for (let v152 = 0; v152 < 5; v152++) {
    f96();
}
f96();
%OptimizeFunctionOnNextCall(f96);
f96();
