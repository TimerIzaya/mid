const v2 = new Int32Array();
v2.a = Int32Array;
const o4 = {
    2321852491: "object",
};
function F8(a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1681186072;
    } catch(e11) {
    }
    try {
        this.d = undefined;
    } catch(e12) {
    }
}
new F8(257);
("-9223372036854775807").lastIndexOf(1681186072);
new Int8Array([1024,1024]);
new F8(1681186072);
new F8(257);
class C22 extends F8 {
    toString(a24, a25) {
        [-7.280574057744267e+306,-1.6081809402399496e+308];
        [4.0,-95665.66193756135,0.0,2.2250738585072014e-308,-1.0,0.8849955961376589];
        return [-0.0,-799.4435592869078,1000.0,552258.6724212226,951.9223095481143,0.9567143476330455,-1.2558652487119033e+308,931.3820015175352];
    }
    static set f(a30) {
        try {
            this >> a30;
            ("object").match();
            for (let v33 = 0; v33 < 25; v33++) {
                const v34 = [601759695];
                const v35 = [1073741824,1073741823,1376142744,1073741825];
                function f36(a37, a38, a39, a40) {
                    let [] = v35;
                    try { v35["find"](..."find", a40, ...v34); } catch (e) {}
                    return a39;
                }
                for (let v43 = 0; v43 < 10; v43++) {
                    f36();
                }
            }
        } catch(e45) {
            this >= e45 ? this : e45;
        }
        const v48 = /8[\cA]v/uiy;
        const v49 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
        v49.length = v48;
        const v52 = new Uint32Array(1681186072);
        const v53 = [-2096457859];
        class C54 {
            a;
            256;
            static 268435439 = Int8Array;
            p(a56, a57, a58) {
                const o60 = {
                    valueOf() {
                        v49[v53] /= 1681186072;
                        return 1681186072;
                    },
                };
                let v63 = Reflect.construct(Int8Array, [v52,a56], BigUint64Array);
                let v64 = 8;
                v64++;
                a57 << a57;
                v63--;
                return a57;
            }
            static #g = Uint32Array;
        }
    }
}
const v68 = new C22();
new C22();
new C22();
new v68();
function f72() {
    for (const v76 of Array(4087)) {
    }
    return 4087;
}
function f78(a79) {
    return a79;
}
class C80 {
}
const v81 = new C80();
const v82 = [C80,C80];
const v83 = [v81,v82,v82];
const v84 = [2.2250738585072014e-308];
function F85(a87, a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    a89.groupToMap(f78);
}
const v91 = new F85(2.2250738585072014e-308, F85, v83);
new F85(v82, v91, v84);
