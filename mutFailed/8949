const v2 = new Uint8ClampedArray(2);
const v5 = new Float64Array(5);
function f8(a9, a10) {
    try {
        v5.toString = a9;
    } catch(e11) {
    }
    return Uint8Array;
}
Uint8Array.valueOf = f8;
new Uint8Array(257);
try { v2(); } catch (e) {}
new Uint8Array(128);
new Uint8ClampedArray(329);
new Int32Array(256);
new Uint32Array(5);
new BigInt64Array(9);
new BigUint64Array(10);
class C35 {
    constructor(a37) {
        this.toString = f8;
        a37.toString = f8;
        this[1762774961] = this;
        a37 % a37;
        function f39() {
            return a37;
        }
        try { f39.bind(this); } catch (e) {}
    }
    static [-1e-15] = 1000.0;
    ["name"] = -1e-15;
    f;
    [-1e-15];
    a;
    1762774961 = -1e-15;
    static ["name"];
}
C35.e = C35;
const v41 = new C35(1000.0);
Object.defineProperty(v41, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f8 });
const v44 = new C35(v41);
const v45 = v44?.__lookupSetter__;
try { new v45("name"); } catch (e) {}
new C35(-1e-15);
switch (-1e-15) {
    default:
        const v53 = 257 * 1000.0;
        1000.0 % 1000.0;
        Math.atan(1000.0);
        10 | v53;
        break;
}
try { new WeakSet(); } catch (e) {}
new WeakSet();
new Set();
let v62 = undefined;
const o63 = {
};
Object.defineProperty(o63, "c", { value: C35 });
o63.c = o63;
v62 = o63;
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this.constructor;
    try { new v66(); } catch (e) {}
    let v68 = -128;
    v68--;
    this.g = v68;
}
for (let i71 = 0; i71 < 1; i71++) {
    -Uint8Array;
    const t70 = "name";
    t70[186] = i71;
}
new F64();
new Uint8Array();
