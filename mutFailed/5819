function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    a5 >>> a5;
    a5--;
    try {
        this.b = 1e-15;
    } catch(e9) {
    }
    try {
        this.g = a6;
    } catch(e10) {
    }
    try { a5(a5, a6, a6); } catch (e) {}
    const o12 = {
    };
    o12.h = o12;
    Proxy?.constructor;
    try { new a6(a5); } catch (e) {}
    new Proxy(this, o12);
    try {
        this.h = a6;
    } catch(e17) {
    }
}
new F3(1e-15, 49138.93556856178);
const v19 = new F3(49138.93556856178, 1e-15);
v19.length = v19;
new F3(1e-15, 49138.93556856178);
[-2113059362,14,512,-734831154,288635097,7,9];
[-268435456,1024,-13617,-128,2147483647,-65535,13987,-2147483649];
const v25 = ([10000,-9007199254740991])?.groupToMap;
try { new v25(undefined); } catch (e) {}
[-9007199254740992,536870912,-3,-847674377,929931145,-381128503,-58827,268435441];
[257,4,2091854051,-9007199254740991,9007199254740992,536870889,-1];
const v29 = [-65536,536870888];
const v30 = [];
function f31() {
    const v33 = -v30 && v30;
    -v33;
    return v33;
}
f31.name;
class C36 extends undefined {
    [F3];
}
new C36();
const v38 = new C36();
v38.g = v38;
new C36();
%PrepareFunctionForOptimization(f31);
f31();
%OptimizeFunctionOnNextCall(f31);
for (let v41 = 0; v41 < 100; v41++) {
    v41++;
    f31();
}
v29 - undefined;
const v45 = f31();
v45 < v45;
f31();
