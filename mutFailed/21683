const v0 = /^xxx$a(x)(x)(x)\2+/guimy;
const v1 = /(?:ab){4,7}(ab)\1^xxx$+/gudisy;
const v2 = /[\p{Script_Extensions=Mongolian}&&\p{Number}][\ca](\ud808\udf45*)/vmy;
class C3 {
    [v2];
    static e;
    static valueOf(a5) {
        const o6 = {
        };
        new Proxy(this, o6);
        super[v2] = v2;
        super.c = Proxy;
        return v0;
    }
    static a;
    static #b;
    static c = v1;
}
const v9 = new C3();
new C3();
const v11 = new C3();
class C12 {
    constructor(a14, a15) {
        try { this(v1, v9, this, this, v9); } catch (e) {}
        [-46898,256,-1024,9,536870889,1,23466];
        [23725,9223372036854775807,-465343782,-59348,-4294967296,1073741823];
        [11,-1679124210,-1073741824,-4294967297,1060399963,-2,5,5,536870888,63623];
        const o20 = {
        };
        new Proxy(v0, o20);
    }
    1073741824;
    static #h = C3;
    b;
    0;
}
new C12(v0, v2);
new C12(v2, v1);
new C12(v1, v9);
const v32 = new Int8Array(268435456);
const v34 = new Float32Array();
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = this.constructor;
    try { new v41(v34, a39, 2); } catch (e) {}
    this.h = a38;
}
const v43 = new F35(v32, Int8Array, F35, v11);
function f44(a45, a46, a47) {
}
const v50 = [v43];
const o51 = {
    "arguments": v50,
    "type": "function",
};
new Worker(f44, o51);
