/[\00011]/gmsy;
const v1 = /2(?<a>(?<b>(?<c>(?<d>.).).).)/gusy;
const v2 = /8[\cA]v/uisy;
const t3 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
t3.length = v2;
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    const v8 = this.constructor;
    try { new v8("toString"); } catch (e) {}
    a7[5];
}
/Glqa\Sc/gvdmy;
const v14 = new Float32Array();
try { v14.entries(); } catch (e) {}
const o17 = {
    "type": "function",
};
function f20(a21, a22) {
    const o23 = {
        ...a21,
    };
    o23.d;
    return f20;
}
function f25() {
    const v28 = new Uint8ClampedArray(995);
    const v30 = new Int8Array(995);
    const v31 = v30.copyWithin;
    try { v28.some(v31); } catch (e) {}
    return v1;
}
for (let v39 = 0; v39 < 5; v39++) {
    function f40() {
        function F43(a45, a46, a47) {
            if (!new.target) { throw 'must be called with new'; }
            [8n] > 8n;
        }
        new F43(F43, F43, F43);
        const v52 = new BigInt64Array();
        let o53 = {
        };
        [,...o53] = v52;
        Math.atanh();
        const v57 = !"Vre";
        const v60 = new Proxy([-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678], Math);
        new v60(v60, v60, v60, v60, 852);
        v57 | ("Vre" * -1.632556010913421e+308);
        9007199254740991n * 9007199254740991n;
        const t46 = /((((.).).).)p\P{scx=Greek}\xed\xa0\x80/vim;
        t46.toString = Float32Array;
        62296n ** 62296n;
        return -1.632556010913421e+308;
    }
    f40();
    %OptimizeFunctionOnNextCall(f40);
}
