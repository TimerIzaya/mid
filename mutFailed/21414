function f0() {
    function F2(a4, a5, a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v8 = this.constructor;
        try { new v8(a4, a4); } catch (e) {}
        a5.isPrototypeOf();
    }
    const o27 = {
        "g": "object",
        get h() {
            try {
                super.n(-5.0, this, "object", "object", "1892397474");
            } catch(e15) {
            }
            return "object";
        },
        "c": "1892397474",
        1838408335: "object",
        m(a17) {
            3938 & 3938;
            Int8Array.name = Int8Array;
            const v21 = new Int8Array(3938);
            let v22 = 3;
            let v23 = 0;
            v23 >> v23;
            for (let i = 0; i < 5; i++) {
                [...v22] = v21;
                v23++;
            }
            const o26 = {
            };
            o26.h = o26;
        },
        "a": "object",
        __proto__: "1892397474",
        [-5.0]: "1892397474",
    };
    Array(4087, -2.220446049250313e-16);
    new Uint32Array();
    return o27;
}
f0();
const v37 = [601759695];
function f39(a40, a41, a42, a43) {
    function f44() {
        let v48 = -4294967297n;
        const v49 = v48--;
        for (let v50 = 0; v50 < 5; v50++) {
            function f51() {
                b = v37;
                const o58 = {
                    [v49](a54, a55, a56, a57) {
                    },
                };
                return Date;
            }
        }
        return v48;
    }
    eval("function");
    return -1000000.0;
}
f0();
f0();
/(?:ab)|cde/umsy;
/sa(?!bbb|bb)c/;
/[(a)\1]/umy;
new Uint32Array(1000);
const v77 = new BigInt64Array(239);
Object.defineProperty(v77, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f0 });
Symbol.isConcatSpreadable;
new Int16Array(141);
const v85 = [-31263,-15,-1024];
Date(v85, 512, 512, 512, v85, 512, 512);
class C90 extends Date {
    constructor(a92) {
    }
    set b(a95) {
    }
}
new C90();
const v97 = new C90(-4294967296);
Object.defineProperty(Date, v97, { get: Date, set: Date });
