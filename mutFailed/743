[1,4294967296,13];
[536870889,0,13,18433,256,-9223372036854775807,-4096,-41517,3,-1643666324];
[62071,799156301,-1024,198037977,1960089729,536870889,-9007199254740992,-43240];
345 >>> 345;
const v5 = 345 !== 345;
v5 && v5;
const v8 = new BigUint64Array(345);
const v9 = v8[172];
v9 >> v9;
const v13 = new Int32Array(8);
v13[4] = v13;
const v16 = new Int32Array(16);
v16[1] = v16;
v16[4] = v16;
let v17 = 502;
v17++;
const v20 = new BigUint64Array(v17);
v20[380] = v20;
const v23 = new Uint8Array(64);
v23[16];
96 >>> 96;
new Uint8ClampedArray(96);
function f29() {
    return f29;
}
f29.length = f29;
-0.5084298928592244;
0.5084298928592244 & 0.5084298928592244;
const v34 = Infinity / Infinity;
v34 * v34;
9007199254740991 >> 9007199254740991;
9007199254740991 >>> 9007199254740991;
5 + 5;
const v43 = 5 / 5;
v43 - v43;
class C45 {
    static #valueOf(a47, a48, a49) {
        this.f;
        try {
            f29();
        } catch(e52) {
        }
        return a49;
    }
    get f() {
        try {
            f29();
        } catch(e55) {
        }
    }
}
C45.length;
C45.d = C45;
const v57 = new C45();
const v58 = v57?.constructor;
try { new v58(); } catch (e) {}
v57.o = v13;
%PrepareFunctionForOptimization(f29);
%OptimizeMaglevOnNextCall(f29);
try { v57.o(v57, 5, 9007199254740991); } catch (e) {}
