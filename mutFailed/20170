class C3 {
    static #valueOf(a5, a6) {
        try {
            const t3 = "string";
            t3.length = 1;
        } catch(e8) {
        }
        -4.602271366901809e+307 || -218;
        super["string"] = "string";
        return -218;
    }
    [-4.602271366901809e+307];
    h;
    static #e;
    static #b;
}
const v10 = new C3();
const t17 = -4.602271366901809e+307;
new t17();
const v12 = new C3();
v12.h = v12;
const v13 = [C3];
[-218];
[C3,v13,"string","string"];
[1.3195499837950574e+308,4.0,-329383.9957684354,-1000000000000.0,-25118.083675229806,-1.7976931348623157e+308,0.8758838974477081,-1.5223493192658495e+308,860260.0487707118,9.60191720372714];
[-1000000000000.0,4.548763145536507e+307,-9.178056165818137e+307,NaN,-59.7158804773419,0.24607927897836301,-1000.0,9.708171013956953];
const v18 = [451573.99501250265,0.25657051436613243,-2.0];
try { v18.reduce(v10); } catch (e) {}
new Int16Array(-4.602271366901809e+307);
6 <= 6;
const v26 = new Uint32Array(6);
try { v26.with(Int16Array, Uint32Array); } catch (e) {}
Float64Array.e = Float64Array;
new Uint32Array(3239);
function f31() {
    return f31;
}
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    v37.length = v37;
    try { new v37(); } catch (e) {}
    const t42 = (-a36).constructor;
    t42(f31, f31).toExponential(f31);
}
new F32();
function f44(a45, a46) {
    return a46;
}
class C47 {
}
