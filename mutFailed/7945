const v0 = [];
function f1(a2) {
    function F3(a5, a6) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a6;
        } catch(e7) {
        }
    }
    return v0;
}
v0.toString = f1;
function f8() {
    return v0;
}
class C9 {
    161 = f8;
    268435440;
    #p(a11) {
        try { new a11(this); } catch (e) {}
        try {
            v0.findLast(f8);
        } catch(e14) {
        }
        return f8;
    }
    [v0];
    static #b;
}
const v15 = new C9();
const v16 = new C9();
const v17 = new C9();
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a23;
    } catch(e24) {
    }
    try {
        this.a = a22;
    } catch(e25) {
    }
}
new F18(v17, v17, v17, C9);
const v27 = new F18(v16, v0, v17, v17);
new F18(v15, v17, v17, v27);
function f49() {
    3.4890473589784586e+307 > 3.4890473589784586e+307;
    -4294967296 >> -4294967296;
    class C56 {
    }
    const v57 = new C56();
    function f58() {
        return Int16Array;
    }
    function f59(a60) {
        try {
            v57.fuck(F18, -5.0, undefined);
        } catch(e63) {
        }
    }
    Object.defineProperty(v57, "g", { writable: true, configurable: true, get: f58, set: f59 });
    v57.g = v57;
    const v64 = new C56();
    const v65 = v64.length;
    const v66 = [9007199254740992,9007199254740992];
    function f67(a68, a69) {
        for (let v71 = 0; v71 < 5; v71++) {
            function f72() {
                for (let i74 = 0, i75 = 3;
                    (() => {
                        class C76 extends f72 {
                        }
                        return i74 < 3;
                    })();
                    (() => {
                        const v80 = i74++;
                        v80 >> v80;
                    })()) {
                }
                return v71;
            }
            f72();
            %OptimizeFunctionOnNextCall(f72);
        }
        return v65;
    }
    v66.constructor = f67;
    const v85 = v66.constructor;
    class C86 extends v85 {
    }
    try { C86.apply(v85, C56); } catch (e) {}
    const v88 = new C86();
    Object.defineProperty(v88, 65537, { value: v64 });
    return Int16Array;
}
%PrepareFunctionForOptimization(f49);
f49();
f49();
%OptimizeFunctionOnNextCall(f49);
f49();
