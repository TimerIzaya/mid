const v2 = new Float64Array(51);
51 - 1;
const v6 = new Uint8Array(1);
2826 + 2826;
try { Uint16Array.from(Uint8Array); } catch (e) {}
const v11 = new Uint16Array(2826);
let v12;
try { v12 = v11.filter(v2); } catch (e) {}
const v14 = v12[1];
try { v14.substring(Uint16Array, Uint16Array); } catch (e) {}
let v17;
try { v17 = ("o").link(v6); } catch (e) {}
let v18;
try { v18 = v17.italics(); } catch (e) {}
v18();
class C23 extends Date {
}
C23.prototype = C23;
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v26 = -9007199254740991;
        for (let i = 0; i < 5; i++) {
            const v27 = v26++;
            v27 ^ v27;
        }
        new F24();
    } catch(e30) {
    }
}
const v31 = new Float32Array(Float32Array);
for (let v32 = 0; v32 < 25; v32++) {
    function f33(a34, a35, a36, a37) {
        let v38;
        try { v38 = a34.lastIndexOf(Float64Array); } catch (e) {}
        let v39 = a34[1];
        v39 >> v39;
        v39--;
        const v42 = v38--;
        v42 + v42;
        const v44 = v42 >>> v42;
        a34[0] = a34;
        v44 <= a35;
        arguments[1] = arguments;
        const v47 = v18?.__lookupGetter__;
        const v48 = v47?.d;
        try { new v48(f33); } catch (e) {}
        v47.d = v47;
        try { v47.constructor(); } catch (e) {}
        try { v47(v47, f33, a35, arguments); } catch (e) {}
        return Uint8Array;
    }
    try { f33("o", "o", v32, "o"); } catch (e) {}
    for (let v53 = 0; v53 < 10; v53++) {
        f33(v31);
    }
}
