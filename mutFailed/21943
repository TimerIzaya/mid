new BigUint64Array(107);
new Int8Array(0);
new Float32Array(24);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a11;
    } catch(e14) {
    }
}
new F9(107, BigUint64Array, 107);
new F9(0, 0, 107);
new F9(24, 107, 24);
[-9007199254740990,268435441];
[-37207,127,-4,-2147483649,65535,-1024,-536870912];
[4294967297,-256,8,1204244361,536870887];
[4,268435456,-1988579072,-9007199254740991,-31917];
[-1257322457,8,127,-14,39653,128,9007199254740990];
const v23 = [9007199254740990,16,-65536,7,10,9223372036854775807,16,4,1073741824];
let v24 = [29915,-9007199254740990,9];
const v25 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
const v26 = [2147483647,-32974,7,-54836,-9,-15,10000];
const v27 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
try { v27.concat(v25); } catch (e) {}
if (v25 <= v26) {
    v23 ** v25;
    v24 += v26;
} else {
    var d = v26;
}
[24691,802039630,-9223372036854775808,-27820,-1112311792,-26767,1098810331];
[881994048,268435456,1,1024,39940,8242,4740,-12,1024,1073741825];
new BigInt64Array();
const v38 = new Int32Array(1);
function f39() {
    const v42 = new Float32Array(2306);
    v42.reverse();
    return v38;
}
v38[Symbol.toPrimitive] = f39;
v38[0] = v38;
const v46 = (a47, a48, a49) => {
    let v50 = a47 & a47;
    ({"h":v50,"length":a47,...v50} = a49);
    return a49;
};
const v52 = v38 instanceof BigInt64Array;
v52 || v52;
let v54 = gc;
v54.valueOf = f39;
try { v54.bind(v27); } catch (e) {}
const v56 = v54();
const v57 = ("object").trim();
try { v57.sup(); } catch (e) {}
v54 /= v56;
