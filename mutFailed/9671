class C3 {
    #valueOf(a5) {
        try {
            this.b = this;
        } catch(e6) {
        }
        return 65120;
    }
    #f = 65120;
    #g;
    4294967295 = -9223372036854775808;
}
function f7(a8) {
    let {"b":v9,...v10} = a8;
    const v11 = [];
    const v12 = [v11];
    class C14 extends Map {
        constructor(a16, a17) {
            super(v12);
        }
    }
    const v18 = new C14(v11, v12);
    const v19 = new C14(v12, v18);
    const v20 = new C14(v19, v18);
    const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v25 = new Uint32Array();
    let v26 = -4294967297n;
    v26--;
    const v28 = [601759695];
    const v29 = [1073741824,1073741823,1376142744,1073741825];
    function f31(a32, a33, a34, a35) {
        try { a32.toLocaleString(); } catch (e) {}
        const v37 = a32?.constructor;
        try { v37(); } catch (e) {}
        try { v37(); } catch (e) {}
        const v41 = arguments.length;
        Object.defineProperty(v18, "e", { configurable: true, enumerable: true, value: f31 });
        const v43 = v19["entries"](a34, ...v20, BigUint64Array, ..."entries", a33, v41);
        const v45 = Symbol.toStringTag;
        v19[v45] = v45;
        function f46() {
            let v48;
            try { v48 = ("Vre").charAt(-9223372036854775808); } catch (e) {}
            try { v48.lastIndexOf(); } catch (e) {}
            let v50;
            try { v50 = ("Vre").codePointAt(v23); } catch (e) {}
            v50 - v50;
            v50 ^ v50;
            let v53 = Float64Array;
            v53 = a33;
            let v54 = v23.length;
            v54++;
            try {
                v29.forEach(a33);
            } catch(e57) {
                e57.stack = e57;
            }
            const o68 = {
                "c": v26,
                "EPSILON": v28,
                valueOf(a59, a60) {
                    return a59;
                },
                1073741824: v25,
                [v26](a62, a63, a64, a65) {
                    eval();
                },
                "arguments": 5,
                256: a35,
            };
            return v54;
        }
        f46();
        const v71 = Array();
        let v72;
        try { v72 = v71.findLast(f31, v25); } catch (e) {}
        v71.unshift("entries", v43, "entries", v72);
        let v75;
        try { v75 = Int8Array.of(); } catch (e) {}
        try { v75.join(v37); } catch (e) {}
        const v77 = new Int8Array(v28);
        v77.c = v77;
        const v78 = v77.buffer;
        v78.maxByteLength;
        const v80 = v78.slice(v37);
        try { Int32Array(v80, arguments, v26); } catch (e) {}
        function f83(a84, a85, a86, a87) {
            return a87;
        }
        const v88 = new Int32Array();
        const v89 = v88[3];
        v89 + v89;
        for (let v91 = 0; v91 < 5; v91++) {
        }
        %OptimizeFunctionOnNextCall(f46);
        try { v29["find"](..."find", a35, ...v28, ...v29, ...522675525n); } catch (e) {}
        return a32;
    }
    return 65120;
}
C3[Symbol.toPrimitive] = f7;
const v96 = new C3();
new C3();
const v98 = new C3();
class C99 {
    [-9223372036854775808];
    get g() {
        Object.defineProperty(C3, "f", { configurable: true, value: v98 });
        super[this] = v96;
        for (let v101 = 0; v101 < 32; v101++) {
            this["p" + v101] = v101;
        }
        return v98;
    }
}
new C99();
new C99();
new C99();
const v110 = new Int8Array(268435456);
const v112 = new Float32Array();
function F113(a115, a116, a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
    function f119() {
        return Symbol;
    }
    function f120(a121) {
        Object.defineProperty(this, 15, { writable: true, set: f7 });
    }
    Object.defineProperty(a116, "toJSON", { writable: true, get: f119, set: f120 });
    const v122 = this.constructor;
    try { new v122(v112, a117, 2); } catch (e) {}
    this.h = a116;
}
const v124 = new F113(v110, Int8Array, F113, v112);
function f125(a126, a127, a128) {
}
const v131 = [v124];
const o132 = {
    "arguments": v131,
    "type": "function",
};
new Worker(f125, o132);
v96[C3] = C99;
const o138 = {
    "execution": "sync",
    "type": "minor",
};
gc(o138);
