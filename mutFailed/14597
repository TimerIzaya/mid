function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1;
    } catch(e3) {
    }
    try {
        this.h = 1;
    } catch(e4) {
    }
    try {
        this.g = 1;
    } catch(e5) {
        try { ("imul").padEnd(1073741824); } catch (e) {}
        gc();
    }
    const v12 = Symbol.toPrimitive;
    const o14 = {
        [v12]() {
        },
    };
}
new F0();
const v16 = new F0();
new F0();
new F0(12);
for (let i26 = 0, i27 = 10;
    (() => {
        i26 < i27;
        const v31 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
        v31[3] = v31;
        let v32 = 3375;
        const v33 = v32++;
        v33 / v33;
        const v35 = new BigUint64Array(v32);
        let [v36,,v37,...v38] = v35;
        return v37;
    })();
    i26++) {
}
const v44 = new Uint8ClampedArray(3661);
function f46() {
    return f46;
}
([]).groupToMap(f46);
const v50 = new Uint32Array(257);
class C51 {
    3711569961;
    [v50] = F0;
    e;
    set b(a53) {
        try {
            const o54 = {
            };
            return arguments;
            class C57 extends Int16Array {
            }
            v44.__proto__ = a53;
        } catch(e58) {
        }
    }
    static #toString(a60, a61, a62) {
        try { new a60(this); } catch (e) {}
        const o66 = {
            "maxByteLength": 65536,
        };
        const v68 = new SharedArrayBuffer(9, o66);
        new Uint8ClampedArray(v68);
        return F0;
    }
}
new v16();
new C51();
new v50();
function f77() {
    for (let v78 = 0; v78 < 5; v78++) {
        v78++;
        v78 / v78;
        function f81() {
            return BigUint64Array;
        }
    }
    return f77;
}
const o88 = {
};
o88[Uint32Array] -= -2147483649;
256 << -65535;
for (let v92 = 0; v92 < 10; v92++) {
    const v93 = [601759695];
    const v94 = [1073741824,1073741823,1376142744,1073741825];
    try { v94["find"](..."find", undefined, ...v93, ...undefined); } catch (e) {}
}
+20572;
