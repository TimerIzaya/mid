function f0() {
    536870889 % 536870889;
    const o5 = {
        "maxByteLength": 536870889,
    };
    o5.maxByteLength = o5;
    const v7 = new SharedArrayBuffer(217, o5);
    try { Uint8Array.bind(536870889); } catch (e) {}
    new Uint8Array(v7);
    const o15 = {
        __proto__: "c",
        get c() {
            return -675809817;
        },
        ["c"]: "c",
        ..."c",
        "c": "c",
        2147483648: -675809817,
        "b": "c",
        "h": "c",
        4294967295: "c",
    };
    return o15;
}
const v16 = [899592207];
const v17 = [];
let v18 = 14047n;
v18 & v18;
for (let v22 = 0; v22 < 500; v22++) {
    let v25 = 2 < Uint8Array;
    let v26 = v17 >>> v17;
    [v18,...v25] = v16;
    let v27 = v26++;
    v27++;
}
const v29 = f0();
function f30() {
    const o31 = {
    };
    const v32 = o31.__defineGetter__;
    let v33;
    try { v33 = v32(); } catch (e) {}
    return v33;
}
for (let v34 = 0; v34 < 5; v34++) {
    f30();
    %OptimizeFunctionOnNextCall(f30);
}
f0();
f0().c;
[3,-4096,-33293];
[2,25133,10];
([-565035525,-527667891,-536870912,-11,-1051354631,1024,268435456,1774659801,-216615155])[7];
const v47 = new Map();
v47.size = v47;
function f48(a49, a50) {
    const o51 = {
        ...a49,
    };
    o51.d;
    return f48;
}
try { f48(v29, v29); } catch (e) {}
f48.d = f48;
%PrepareFunctionForOptimization(f48);
const t65 = f48();
t65(f48);
%OptimizeFunctionOnNextCall(f48);
f48();
