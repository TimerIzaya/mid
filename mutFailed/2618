const v2 = new Uint16Array(450);
const v5 = Uint8ClampedArray.prototype;
const v6 = new Uint8ClampedArray(1024);
const o12 = {
    set d(a8) {
        this.cos = a8;
        for (let v9 = 0; v9 < 25; v9++) {
        }
        try { this["cos"](); } catch (e) {}
    },
};
o12.d = v6;
v6[916] = v6;
let v13 = 16;
v13--;
const v16 = new Float64Array(v13);
function f17() {
    return v16;
}
let v19 = 1.2224150952779973e+308;
v19--;
2.0 % 2.0;
[0.9980174538731041,[Float64Array,v13,v6],0.9980174538731041];
const v25 = [Uint16Array];
try { v25.reduce(v2); } catch (e) {}
try { v25.some(v2); } catch (e) {}
let v28 = 8;
v28--;
const v31 = new v5(v28);
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    try { new v37(1024); } catch (e) {}
    a36 - a36;
    this.g = -1517929768;
    try {
        this.g = -1;
    } catch(e40) {
    }
    try {
        this.h = a36;
    } catch(e41) {
    }
}
try { F34.bind(1024); } catch (e) {}
const v43 = new F34(-1);
const v44 = new F34(1024);
class C45 extends F34 {
    #p(a47, a48) {
        const v49 = a47?.[32];
        Object.defineProperty(v44, v43, { writable: true, configurable: true, value: F34 });
        return v49;
    }
    [Uint8ClampedArray];
    static {
        let v52;
        try { v52 = this["n"](-1517929768); } catch (e) {}
        const o53 = {
        };
        const o54 = {
            "c": v43,
            ...v52,
            65537: o53,
            __proto__: this,
            "a": v52,
            "g": this,
            ...this,
        };
    }
}
const v55 = new C45();
v55.g;
const v57 = v31?.constructor;
const o59 = {
};
gc(o59);
([16,-1073741824n]).flat(16);
try { new v57(v31, Uint16Array, v19); } catch (e) {}
class C66 {
    #a;
    valueOf(a68, a69) {
    }
    toString(a71) {
    }
    static f;
}
const v72 = new C66();
v72[-2126520711n] = v55;
const o74 = {
    ...v31,
};
o74[4] = o74;
o74[7] = o74;
