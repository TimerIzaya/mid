const v2 = [];
function* f3(a4, a5) {
    yield* v2;
    return a4;
}
new Int16Array(93);
let v12 = new Int16Array(757);
new Int16Array(410);
function F16() {
    if (!new.target) { throw 'must be called with new'; }
}
v12 *= Symbol.toPrimitive;
new Uint16Array([34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449]);
let v24 = new F16();
new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
try { Symbol.keyFor(Symbol); } catch (e) {}
new Int8Array(268435456);
const v32 = new F16();
const v33 = new F16();
const v36 = new Float32Array(1439);
const v41 = new Uint16Array();
v24 |= v32;
v41.length <<= 1439;
v36[6] = v33;
[[65535,268435439,-9007199254740990,268435440,1024,19743,5,4]];
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v50 = this.constructor;
    try { new v50("a"); } catch (e) {}
    try { a48.valueOf(); } catch (e) {}
    try {
        this.f = "-2147483648";
        9n >> 9n;
    } catch(e55) {
    }
}
F46.arguments = F46;
