let v1 = Int16Array;
const v2 = new v1(16);
new Int8Array(Int8Array);
const v8 = new Float64Array(6);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "c", { writable: true, value: 16 });
    try {
        this.b = a13;
    } catch(e15) {
    }
    v2[779275584] = 181;
    const v17 = new v1(delete this?.c, 181);
    const v19 = [a13,6];
    Reflect.apply(v17.set, this, v19);
    try {
        this.e = Float64Array;
    } catch(e22) {
    }
    try {
        this.c = v1;
    } catch(e23) {
    }
}
const v24 = new F9(181, 181, 16, 16);
try { v8.toLocaleString(v2); } catch (e) {}
v1 &= v1;
let v27 = new WeakSet();
try { v8.includes(6, 16); } catch (e) {}
const v29 = new F9(16, 6, 6, v24);
new F9(6, 181, 181, 6);
[v27] = v8;
try {
    v29.__proto__ = v24;
} catch(e32) {
}
([735.0257666748869,0.8927745243580386]).push(-93227259);
