const v0 = /t3*/vi;
const v1 = /xyz{1,32}?\u0060+/gvdimsy;
const v2 = /\b\1(a)/ms;
v0.write();
function f4(a5, a6) {
    function f7(a8, a9) {
        return a9;
    }
    Set.toString = f7;
    const o11 = {
        ...a5,
    };
    return a6;
}
f4();
class C19 {
    [-2];
    resizable = 64;
    static #c;
    constructor(a21, a22) {
        [-6,1e-15,/((?<=a))/gudm];
        return "caller";
        try {
            v2.#c = a21;
            ([1073741824,1073741823,1376142744,1073741825]).forEach();
            const v31 = /(?:a*)+q(?<a>.)/guds;
            function f32(a33) {
                a33.dotAll = a33;
                const o37 = {
                    set b(a35) {
                    },
                    get d() {
                        return a33;
                    },
                    __proto__: v31,
                };
                return o37;
            }
            for (let i40 = 0, i41 = 10; i40 < i41; i41--) {
                for (let v48 = 0; v48 < 50; v48++) {
                    f32(v31);
                }
            }
            function f50(a51, a52, a53, a54) {
                Object.defineProperty(a51, "g", { value: a52 });
                a51 % a53;
                const o58 = {
                    set b(a57) {
                    },
                };
                return o58;
            }
            for (let v59 = 0; v59 < 500; v59++) {
                f50(Uint8Array);
            }
        } catch(e61) {
        }
    }
    256;
}
new C19(-6, -211702342, v2, v0, 129);
new C19(-6, 64);
new C19(4294967295, 4294967295);
const v66 = new Float32Array();
function F67(a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    for (let [v71,v72] of v66) {
        const v73 = [];
        function F77(a79, a80, a81, a82) {
            if (!new.target) { throw 'must be called with new'; }
            a79.strike();
            const v84 = this.constructor;
            try { new v84(a82, v73, a80, a82); } catch (e) {}
            a80[2];
        }
        new F77("ceil", "pop", "ceil", "isConcatSpreadable");
    }
    Math.asin();
    const v92 = new BigInt64Array(1);
    v92[0] = v92;
    function f93(a94) {
        return f93;
    }
    try { f93(...this); } catch (e) {}
    try {
        new F67(a70, Math);
    } catch(e97) {
    }
}
const v98 = new F67();
new F67(v1, -9007199254740992, v98);
