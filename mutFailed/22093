[-5.0,Infinity];
const v1 = [NaN,1000.0,0.7575426806999426];
const v2 = [968.5643843374987,2.3390778780145123,-832731.4512526722,1000000.0,969969.2177499272,-8.916217617902957e+307];
function f9() {
    return 28135n;
}
function f10() {
    for (let v11 = 0; v11 < 32; v11++) {
        try { ("p").strike(); } catch (e) {}
        const v14 = "p" + v11;
        try { v14.replaceAll("p", 3n); } catch (e) {}
        v1[v14] = v11;
    }
    return "Vi";
}
638315.3149582928 - 638315.3149582928;
const v21 = new Map();
try { v21.set("string", "string"); } catch (e) {}
const v24 = new Float32Array(Float32Array);
v24[2] = v24;
const v25 = typeof "Vi";
try { v25.blink(); } catch (e) {}
const v28 = ("string")?.trimRight;
try { new v28(); } catch (e) {}
let v30 = v25 === "string";
({"h":v30,"length":v30,} = "Vi");
v24[v30] = v24;
for (let v31 = 0; v31 < 10; v31++) {
    function f32() {
        const v33 = new f32();
        v1 - v33;
        try {
            new f32();
        } catch(e36) {
        }
        v2.__proto__;
        const v38 = f10();
        v30 = v31;
        for (let v39 = 0; v39 < 32; v39++) {
            const v41 = "p" + v39;
            for (let v42 = 0; v42 < 32; v42++) {
                const t41 = "p";
                t41["p" + v42] = v42;
            }
            v38[v41] = v39;
        }
        return f32;
    }
    const v45 = [601759695];
    const v46 = [1073741824,1073741823,1376142744,1073741825];
    function f48(a49, a50, a51, a52) {
        a49[3] = a49;
        function f54() {
            return v24;
        }
        f32();
        const v57 = new Int8Array();
        try { v57.entries(); } catch (e) {}
        function f59(a60, a61) {
            try { a61.join(a49); } catch (e) {}
            return a60;
        }
        const v63 = f59(v46, v24);
        try { v63.toReversed(); } catch (e) {}
        const v65 = v57.buffer;
        v65.detached = v65;
        const v67 = v65.slice(2147483648);
        try { v67.slice(v31, v46); } catch (e) {}
        %OptimizeFunctionOnNextCall(f54);
        let v70;
        try { v70 = v46["find"](..."find", a52, ...v45, ...v46, ...522675525n); } catch (e) {}
        !(v70 <= a51);
        return arguments;
    }
    f48.length;
    for (let v74 = 0; v74 < 10; v74++) {
        f48(v46, v74, v45, v74);
    }
}
function f77(a78, a79, a80, a81) {
    a78.BYTES_PER_ELEMENT;
    let v83 = a78.length;
    v83++;
    const v85 = new Float32Array();
    try { v85.entries(); } catch (e) {}
    const o89 = {
        "maxByteLength": 2147483648,
    };
    const v91 = new ArrayBuffer(2, o89);
    new Uint8ClampedArray(v91);
    const v95 = new Float32Array(2);
    const v97 = new Int32Array(v95);
    try { v97.find(v85); } catch (e) {}
    const v99 = v95;
    v97.fill(...v99);
    return v85;
}
for (let v101 = 0; v101 < 625; v101++) {
    f77(Uint8Array);
}
