const v2 = new Uint16Array(3177);
7 - 7;
Float64Array.prototype = Float64Array;
const v6 = new v2(7);
v6[2] = v6;
let v7;
try { v7 = v6.join(3177); } catch (e) {}
v7.length;
~64;
try { Int8Array.from(v7); } catch (e) {}
let v13;
try { v13 = Int8Array.from(Uint16Array); } catch (e) {}
const v14 = v13?.constructor;
let v15;
try { v15 = new v14(v7, 3177, v13); } catch (e) {}
const v16 = new Int8Array(v15);
try { v16.slice(v2, v16); } catch (e) {}
[v16,Float64Array,v16,v2,64];
[v16,v2,v2,3177];
[v16,64];
-2022951342 >>> -2022951342;
const v27 = [0.22798128483169977,-1.5026444029765537e+308,0.8102405909336965,NaN,-128.62883912081793,-7.62629025938157,1000000000000.0,-429.3699813405294];
[3.0,1000000.0,-1.7412524971054762e+308,-2.220446049250313e-16,1.0,-2.0];
[918.1996979248263,-3.0];
new Float64Array(v27, 64, 40);
const v34 = new Uint32Array();
try { new Uint16Array(7, v6, 7); } catch (e) {}
new Uint16Array();
-128;
const v42 = new Float32Array(128);
const v43 = v34[v42];
for (let v44 = 0; v44 < 25; v44++) {
    v44 >> v44;
    try { v43(); } catch (e) {}
}
(!v42.includes(1024))[124];
