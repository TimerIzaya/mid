const v2 = new Int32Array(127);
new BigUint64Array(165);
const v8 = new BigInt64Array(0);
class C9 {
    static #o(a11, a12, a13, a14) {
        const v15 = v8;
        try {
            v2.toString = Int32Array;
        } catch(e16) {
        }
        return BigUint64Array;
    }
    b;
    set h(a18) {
        let v19;
        try { v19 = a18(); } catch (e) {}
        for (let [v20,v21,...v22] of v19) {
            function f23() {
                return BigUint64Array;
            }
        }
        new BigInt64Array(0, 0, 127);
    }
}
new C9();
new C9();
const v27 = new C9();
function f28() {
    return C9;
}
let v29 = /a|b/vdy;
let v30 = /7Z(?:a?)+/gudsy;
const v31 = /\coQ/gdy;
function F32(a34) {
    if (!new.target) { throw 'must be called with new'; }
    function f35(a36, a37) {
        Object.defineProperty(a37, a37, { writable: true, value: v27 });
        F32 instanceof BigInt64Array;
        return a34;
    }
    a34.valueOf = f35;
    try {
        this.e = v29;
    } catch(e39) {
    }
    try {
        this.g = a34;
    } catch(e40) {
        v31.dotAll >>= e40;
        let v41;
        try { v41 = e40(e40, v30); } catch (e) {}
        v30 = v29;
        return e40;
        v29 = v41;
    }
}
F32.g = v27;
const v42 = new F32(v29);
const v43 = new F32(v30);
const v44 = new F32(v29);
class C45 extends F32 {
    static {
        this.null = 127;
        super[v44] = v29;
        let v47;
        try { v47 = v30(F32); } catch (e) {}
        super.g |= v29;
        const v49 = super[v31.exec(v47)];
        try { v49(this, v49); } catch (e) {}
        v31[4];
        const v53 = v44 === v47 ? v44 : v47;
        try {
            v47.c = this;
        } catch(e54) {
            e54[Symbol.toPrimitive] = f28;
            const o57 = {
                [e54]: this,
                "f": v53,
            };
            v43[Symbol.match];
        }
    }
    #h;
    static #g;
    g = v42;
    #b;
}
const v61 = new C45();
const v62 = new C45();
new C45();
const v64 = [-1077398797,2,1671415104,4294967297];
function f65(a66, a67, a68) {
    function f70(a71) {
        ++a71;
    }
    this.onmessage = f70;
    try {
        this.fuck(v44, a67);
    } catch(e74) {
    }
}
const v77 = [C45,v43,v29];
const o78 = {
    "arguments": v77,
    "type": "NaN",
    [v31]: "NaN",
    "d": v62,
    __proto__: v62,
    [f65]: v61,
    "e": v64,
};
[-5,-65536,-65537,14311,14,255];
function f80(a81, a82) {
    a82.constructor = f80;
    Math.imul(3, a81 % a81);
    Math.log(3);
    a82.constructor(a82);
    return f80;
}
new Promise(f80);
