const v0 = [];
for (let v3 = 0; v3 < 25; v3++) {
}
this == this ? this : this;
257 > 257;
const v13 = -1000000.0 >>> -1000000.0;
try { ("e").fontsize(257); } catch (e) {}
try { ("boolean").blink(); } catch (e) {}
function f21() {
}
function f22() {
    return f21;
}
const v23 = [-9223372036854775808,-8,268435456,536870887,6,-2047336449,42720,-5,-13054,268435439];
const v24 = [-2041104173];
const v25 = [7,-9223372036854775808,65536,503852115];
try { v25.toSpliced(f21, f21); } catch (e) {}
function f27(a28, a29) {
    const o50 = {
        "e": a28,
        "type": "e",
        "maxByteLength": 257,
        m(a31) {
            let v32 = -9007199254740991;
            v32++;
            v32 >> v32;
            const v37 = new Int8Array();
            let v38 = 3;
            for (let i = 0; i < 5; i++) {
                [...v38] = v37;
            }
            return v32;
        },
        "b": v25,
        "g": f21,
        [v0]() {
        },
        get b() {
            a28[3] = "boolean";
            for (let v41 = 0; v41 < 24; v41++) {
            }
            return f22;
        },
        set h(a43) {
            [-8303,-9007199254740992,2623,65536,512,-9223372036854775807,1551336476,4];
            [268435439,6,1430293674,3,-959826342];
            [-5,-551913701,10,1621200107,-7,-8,-126771044];
        },
    };
    return o50;
}
const v51 = f27(v23, v23);
try { v51.g(); } catch (e) {}
f27(v25, v25).b;
const v55 = f27(v25, v24);
try { v55.g(); } catch (e) {}
const v58 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
const o59 = {
    __proto__: v58,
    4: -22958,
};
class C60 extends f27 {
    get g() {
        f22();
        return "-19836";
    }
    static #a;
    constructor(a67, a68, a69) {
        function f70(a71, a72, a73) {
            v24.indexOf(v13, a72);
            try {
                f70(v13, a71, o59);
            } catch(e76) {
            }
            return v13;
        }
        f70();
    }
    static h = v51;
    static d;
    static #e;
}
C60.c = C60;
C60.prototype = C60;
const v78 = C60.h;
v78.g = v78;
const v79 = new C60();
v79.b = v79;
const v80 = new C60();
v80.e = v80;
const v81 = v80.e;
try { v81.reduce(v81); } catch (e) {}
new C60();
function f84() {
    return f84;
}
f84.g = f84;
("M")[0];
10n ^ 10n;
const v89 = 10n > 10n;
v89 || v89;
10n * 10n;
for (let v92 = 0; v92 < 25; v92++) {
    const v94 = "p" + v92;
    let v95;
    try { v95 = v94.blink(); } catch (e) {}
    let v96;
    try { v96 = v95.substring(f84, f84); } catch (e) {}
    try { v96.includes("p"); } catch (e) {}
    const t109 = "M";
    t109[v94] = v92;
}
const v98 = [8,-65537,9007199254740991,-268435456,4294967296,8,44846,-13];
v98[6] = v98;
try { v98.reduce(v79); } catch (e) {}
Object.defineProperty(v98, 10n, { get: f84, set: f84 });
