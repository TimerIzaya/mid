const v0 = /b(a[^a]?)/gims;
const v1 = /[a+[a-b-c]*]/ms;
const v2 = /((?:a+)?21E+)/gim;
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v0;
    } catch(e12) {
    }
}
new F7(v2, 529.5611516168694, v0);
new F7(v0, 0.0, v1);
const v15 = new F7(v2, 529.5611516168694, v2);
v15.f = v15;
new Int8Array(0);
const v21 = new Int32Array(3807);
v21[1382] = v21;
let v22 = 7;
v22++;
new BigUint64Array(v22);
const v26 = /(ab|cde)\118\P{sc=Greek}+/gdims;
v26.exec(v26);
const v30 = new Map();
try { v30.entries(); } catch (e) {}
try { Int16Array(); } catch (e) {}
const v34 = new Int16Array();
let v35;
try { v35 = v34.forEach(0); } catch (e) {}
function f36(a37, a38, a39, a40) {
    a39.arguments = a39;
    a37[1000];
    a39.caller = a39;
    const o48 = {
        n(a43, a44, a45, a46) {
            for (let v47 = 0; v47 < 10; v47++) {
            }
        },
        65536: a37,
        ...v34,
    };
    return o48;
}
const v49 = f36("m", "m", f36);
new Float64Array();
let v52 = 16;
v52++;
try { BigInt64Array(); } catch (e) {}
const v56 = new BigInt64Array();
try { v56.lastIndexOf(v52); } catch (e) {}
const v59 = ~-4294967297n;
let v60 = v59 ^ v59;
v60--;
const v63 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v64 = [601759695];
try { v64.sort(v64); } catch (e) {}
v64[0] = v64;
const v66 = [1073741824,1073741823,1376142744,1073741825];
function f68(a69, a70, a71, a72) {
    a70++;
    v35.toString();
    function f76() {
        const v78 = ("Vre")?.toLocaleUpperCase;
        try { v78(); } catch (e) {}
        try { new v78(); } catch (e) {}
        let v81;
        try { v81 = ("Vre").fixed(); } catch (e) {}
        let v82;
        try { v82 = v81.toString(); } catch (e) {}
        let v84 = -268435456;
        const v85 = v84--;
        v85 & v85;
        const v88 = -(v84 + v84);
        const o104 = {
            "c": -4294967297n,
            [522675525n](a90, a91) {
            },
            ..."Vre",
            "maxByteLength": v82,
            "c": v64,
            stringify(a93, a94) {
            },
            "e": -4294967295,
            "e": v84,
            "maxByteLength": -4294967295,
            "arguments": v63,
            ...v64,
            "type": "Vre",
            ..."Vre",
            valueOf(a96, a97) {
                this.maxByteLength;
                a96[522675525];
            },
            ...v88,
            4: "Vre",
            "c": v84,
            "type": "Vre",
            max(a101, a102, a103) {
            },
            6: v84,
        };
        o104[6] = o104;
        try { o104.valueOf(o104, -128); } catch (e) {}
        return "Vre";
    }
    try { f76(); } catch (e) {}
    f76.length;
    f76();
    const v110 = new Int8Array();
    try { v110.toString(); } catch (e) {}
    try { v110.findIndex(v49); } catch (e) {}
    %OptimizeFunctionOnNextCall(f76);
    ("find").strike();
    try { v66["find"](..."find", a72, ...v64, ...v66, ...522675525n); } catch (e) {}
}
for (let v116 = 0; v116 < 5; v116++) {
    f68(v116, -128);
}
f68();
%OptimizeFunctionOnNextCall(f68);
f68();
