const v3 = [0.16839789639952674,-5.0];
const v4 = [-1000000.0,-811683.1477791565,-1e-15];
const v5 = [0.9444372496949575,NaN,-3.315649566920344,1000000.0];
function f6(a7, a8, a9) {
    const o32 = {
        "c": a9,
        set e(a11) {
            let v12;
            try { v12 = a8(a11); } catch (e) {}
            v12.h /= a11;
            function F13(a15, a16, a17, a18) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.c = a11;
                } catch(e19) {
                }
            }
            new F13(a11, a9, v3, a11);
            const v21 = new F13(a11, v3, a9, v3);
            new F13(f6, v21, v4, v21);
            const v23 = super.e;
            function f24(a25, a26, a27) {
                return a7;
            }
            f24(v23, a9, a11);
        },
        "h": a8,
        ...a7,
        ...a7,
    };
    return v3;
}
f6(v5, v3, 18048n);
f6(v4, v3, 2147483647n);
const v35 = f6(v5, v4, 2147483647n);
const v36 = /0r+/gdim;
/(la|bc)/gdimy;
/((?<a>.)(\1a)J[\p{Script_Extensions=Mongolian}&&\p{Number}]?)/vi;
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v36.h = a42;
    } catch(e43) {
    }
    try {
        this.g = v4;
    } catch(e44) {
    }
    try {
        this.f = a41;
    } catch(e45) {
    }
}
new F39(18048n, 2147483647n);
new v35(18048n, 18048n);
new F39(284184595n, 18048n);
new Set();
for (let i53 = 0, i54 = 10;
    (() => {
        const v55 = i53 < i54;
        const o59 = {
            n(a57, a58) {
                return a57;
            },
        };
        const v62 = new BigUint64Array(3375);
        const v63 = [v55,BigUint64Array];
        const o64 = {
            "arguments": v63,
        };
        let [v65,,v66,...v67] = v62;
        return v55;
    })();
    i53++) {
}
function F73() {
    if (!new.target) { throw 'must be called with new'; }
    function f75() {
    }
}
function f76() {
    function f77() {
    }
}
function f78(a79, a80) {
    const o81 = {
    };
}
function f82() {
    function f83(a84, a85) {
    }
    const v87 = new Promise(f83);
    v87.then(f83);
}
%PrepareFunctionForOptimization(f82);
f82();
%OptimizeFunctionOnNextCall(f82);
f82();
