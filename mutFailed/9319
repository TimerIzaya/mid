const v8 = new Int16Array(7);
const v13 = new Float32Array(2494);
try { v13.find(Uint16Array); } catch (e) {}
const v15 = [7,v13];
([10,7,v15,v15])?.reverse;
let v18;
try { v18 = Int16Array(); } catch (e) {}
new Int32Array();
const v27 = new BigUint64Array();
try { v27.with(Map, v18); } catch (e) {}
["function","MAX_VALUE",-802889442,"MAX_VALUE",4n];
const v32 = [6,"UTC","toLowerCase",v15];
["description","function"];
function f34(a35) {
    return Float32Array;
}
const o46 = {
    set g(a39) {
        try {
            super.o(this, v32);
        } catch(e41) {
            const v42 = new BigUint64Array(v8, 2494, 10);
            const o43 = {
                "apply": f34,
                "call": f34,
                "construct": f34,
                "defineProperty": f34,
                "get": f34,
                "getOwnPropertyDescriptor": v42,
                "getPrototypeOf": f34,
                "has": f34,
                "isExtensible": f34,
                "ownKeys": f34,
                "preventExtensions": f34,
                "set": f34,
                "setPrototypeOf": f34,
            };
            new Proxy(v42, o43);
        }
    },
    "type": Map,
};
const v47 = new Worker(6, o46);
try { v47.postMessage(); } catch (e) {}
