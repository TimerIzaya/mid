new Array(1590);
let v4 = -57654 | -57654;
v4--;
const v8 = -1 !== -1;
9 >> 9;
const v13 = 9 <= 9;
function f14() {
    return 1590;
}
[1.5937234662973054,-0.0,-2.704604906672035];
const v16 = [NaN,-5.180995674791731,-1000000000000.0,0.6127992357275659,-3.1293032922636866e+307,1.2834263505120285e+308,1000000.0,-7.66695990498214,0.0];
const v18 = ([1000000000.0,2.0,-2.2250738585072014e-308,1.7976931348623157e+308,-1e-15])?.__defineSetter__;
try { new v18(v16, -1752307637); } catch (e) {}
[3.5173024728439657,-5.0,-Infinity,2.220446049250313e-16,2.0203604592209405,0.6251253636244712,0.4247208034179849,-1000000.0,-1e-15,834.7016090870218];
const v22 = ([-5.0,0.0])[1];
v22 - v22;
function f24() {
    59817n < undefined;
    return f24;
}
%OptimizeFunctionOnNextCall(f24);
const v28 = [-267.26838014724797,-888996.953402956,-1.7976931348623157e+308,755136.777018114,6.85032698816886e+307,1000000000000.0,0.6406200855859508,-8.556922633475605];
v28[7] = v28;
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    this.set(this).trimLeft().strike();
    new Uint8ClampedArray(16);
    const v37 = this?.constructor;
    function f38(a39, a40, a41, a42) {
        function f43() {
            Symbol.toPrimitive;
            const o51 = {
                "e": -268435456,
                valueOf(a49, a50) {
                },
                6: -268435456,
            };
        }
        f43();
        const v54 = new Int8Array();
        v54.buffer;
        %OptimizeFunctionOnNextCall(f43);
    }
    for (let v57 = 0; v57 < 10; v57++) {
        f38();
    }
    try { new v37(); } catch (e) {}
    try {
        new Array();
        /Ckza\Wb?/vis;
        const v62 = /Ma\W+/gudm;
        v62.dotAll = v62;
    } catch(e63) {
    }
}
F29.name = F29;
gc();
function* f66(a67) {
    return f66;
}
new F29();
const v69 = new F29();
v8[v13] = 1590;
function f70(a71, a72) {
    const o73 = {
        ...a71,
    };
    o73.g = o73;
    return f70;
}
f70.d = f70;
%PrepareFunctionForOptimization(f70);
const v74 = v69?.constructor;
v74.e = v74;
let v75;
try { v75 = new v74(); } catch (e) {}
const v76 = v75?.constructor;
%PrepareFunctionForOptimization(Date);
new Float64Array(2147483647);
try { new v76(); } catch (e) {}
