function f0() {
}
class C4 extends f0 {
    static o(a6) {
        let v7 = 0;
        while (v7 < 2) {
            try {
                f0();
            } catch(e11) {
            }
            v7++;
        }
        return 0.0;
    }
}
try { new C4(); } catch (e) {}
const v14 = new C4();
function f15() {
    return f0;
}
function f16(a17) {
    class C19 extends Array {
    }
}
Object.defineProperty(v14, "constructor", { configurable: true, get: f15, set: f16 });
const v20 = v14?.constructor;
try { new v20(); } catch (e) {}
new C4();
const v23 = new C4();
function f24() {
    new Int16Array(Array(11));
    return f16;
}
v23.constructor = f24;
const v31 = [];
v31.g = f0;
v31.g = -1252925017;
v31.g = v31;
class C33 {
    static #e = "d";
    static 4;
    8;
    static h = "d";
    584 = "d";
    #a;
}
new C33();
const v35 = v23?.constructor;
try { new v35(); } catch (e) {}
function f37() {
    return v23;
}
-536870912n == "-11838";
new Uint8ClampedArray(([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4"));
9007199254740990 + 9007199254740990;
let v51 = -268435456;
v51--;
const v53 = [2.2250738585072014e-308,4.0,0.5273092258854304,-8.155347998531482,53975.92355033499,209.79159556853597];
const v54 = [539725.590391079,-3.0,-8.583627322749423e+306];
const v55 = /[abc+]/gvdim;
const v56 = v55.sticky;
const v57 = [v55,v55,v55,v55];
const v58 = /ka{0}/guims;
const o59 = {
    ...v58,
    "d": v57,
    "c": v54,
    "g": v54,
    "f": v57,
    "b": v56,
    "a": v54,
};
const v60 = [1000000.0,1.2528282717172656e+308,0.7043538112851869,-0.0];
function f61(a62, a63, a64) {
    return f61;
}
f61.caller = f61;
class C67 {
}
function f68(a69, a70, a71, a72) {
    const v75 = new BigInt64Array(4046);
    let v76 = undefined;
    const v77 = v76++;
    (v77 >> v77) >>> a72;
    let o80 = {
    };
    [,...o80] = v75;
    return 4046;
}
for (let v81 = 0; v81 < 5; v81++) {
    f68();
}
const o95 = {
    "type": "function",
    m(a84) {
        const v87 = new Int8Array(3938);
        let v88 = 3;
        let v89 = 0;
        v89 >> v89;
        for (let i = 0; i < 5; i++) {
            [...v88] = v87;
            v89++;
            try {
                a84.length = 1;
            } catch(e93) {
            }
        }
        const o94 = {
        };
    },
};
o95.arguments = v60;
new Worker(f61, o95);
function f97() {
    return o95;
}
try { ("function").trimLeft(); } catch (e) {}
const o100 = {
    "type": "function",
};
function f101() {
    return f24;
}
function f102(a103) {
    v53.flat();
}
Object.defineProperty(o100, "arguments", { get: f101, set: f102 });
new Worker(f97, o100);
