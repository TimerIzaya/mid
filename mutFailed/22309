const v1 = new Map();
class C2 {
    static set f(a4) {
        this.d %= a4;
        const o7 = {
            "maxByteLength": 177,
        };
        const v9 = new SharedArrayBuffer(14, o7);
        new Int32Array(v9);
    }
    h;
    [Map];
}
const v12 = new C2();
const v13 = new C2();
const v14 = new C2();
function f15(a16, a17, a18, a19) {
    const o31 = {
        n(a21, a22, a23) {
            a23.h;
            let [] = v1;
            return a17;
        },
        [Map]: a19,
        m(a26, a27, a28, a29) {
            let v25 = this;
            if (a27 !== a29) {
                Map[C2] = Map;
            } else {
                v25 <<= v13;
            }
            return a17;
        },
    };
    return o31;
}
f15(v12, v14, v13, f15(v14, f15(v13, v12, v12, v12), v13, v12));
[-30566,49484];
[-1024,4,7,1950619728,-2,9007199254740990,-1616901507,-50790];
[-7,4,1000,-9007199254740992,-4294967297,65536,7,-14,65535,536870889];
class C42 {
    static {
        function f44() {
            return this;
        }
        function f45(a46) {
            return f45;
        }
        Object.defineProperty(this, 256, { configurable: true, get: f44, set: f45 });
    }
    static [C42];
}
const v47 = [1073741824,1073741823,1376142744,1073741825];
function f48(a49, a50, a51, a52) {
    function f53() {
        try {
            v47.forEach();
        } catch(e55) {
            const v58 = 26577 ^ a52;
            Math.expm1();
            !v58;
        }
        return f48;
    }
    f53();
    for (let i64 = 0, i65 = 10; i64 < i65; a49--) {
    }
    const t67 = 1.0;
    t67();
    %OptimizeFunctionOnNextCall(f53);
    return v47;
}
for (let v74 = 0; v74 < 5; v74++) {
    f48();
}
