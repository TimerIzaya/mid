const v1 = new WeakSet();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a4;
    } catch(e5) {
        class C8 {
        }
        class C9 extends C8 {
            static valueOf(a11, a12) {
                super[268435441] = 1479696428;
            }
        }
    }
    const v15 = new Uint16Array(255);
    v15.buffer;
    parseInt("pop");
    try {
        this.c = a4;
    } catch(e20) {
    }
}
new F2(v1);
new F2(F2);
const v26 = new BigInt64Array(9);
v26["lastIndexOf"](4096);
const v29 = new F2(WeakSet);
const v32 = new Uint32Array(10);
for (let i36 = 0, i37 = 10;
    (() => {
        const v38 = i36 < i37;
        class C39 {
        }
        const v42 = new BigUint64Array(3375);
        let [v43,,v44,...v45] = v42;
        return v38;
    })();
    i36++) {
}
new Float32Array(2124);
new Float32Array(v32);
const v58 = ("Vre").toLocaleUpperCase;
let v59;
try { v59 = v58(v32, "Vre", v29, v58); } catch (e) {}
("Vre").fixed(v59, -4294967297n, v29).codePointAt();
for (let v62 = 0; v62 < 5; v62++) {
    function f63() {
        let v64 = -4294967295;
        v64++;
        const o69 = {
            valueOf(a67, a68) {
                return v64;
            },
        };
        const v70 = [-1024,536870889,65536,65536];
        function f71(a72, a73) {
            return a72;
        }
        const v75 = [2124,v70];
        const o76 = {
            "arguments": v75,
            "type": "Vre",
        };
        new Worker(f71, o76);
        return Float32Array;
    }
    f63();
    %OptimizeFunctionOnNextCall(f63);
}
