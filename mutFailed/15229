function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3, a4) {
        const v5 = [155533.8602852358,2.0];
        function F7() {
            if (!new.target) { throw 'must be called with new'; }
            const v9 = this?.__lookupGetter__;
            try { new v9(); } catch (e) {}
            for (const v14 of Array(19793)) {
                v5[658291203] = null;
                Math.g = Math;
                let v17 = Math.cbrt(19793);
                v17--;
                const v19 = 0.4890055133608564 || 0.4890055133608564;
                v19 + v19;
            }
            const v21 = [];
            v21.g = v21;
            const v22 = [a3,a3];
            try { v22.fill(); } catch (e) {}
            const v24 = [v21,v21,v21,v21];
            try { v24.entries(); } catch (e) {}
        }
        return this;
    }
    this.constructor = f2;
    try {
        this[3524];
        const v29 = Symbol.iterator;
        const o38 = {
            [v29]() {
                let v31 = 10;
                const o37 = {
                    next() {
                        v31--;
                        const v35 = v31 == 0;
                        const o36 = {
                            "done": v35,
                            "value": v31,
                        };
                        return o36;
                    },
                };
                return o37;
            },
        };
        o38.a = o38;
        this.a = -9223372036854775807;
    } catch(e39) {
    }
    try {
        this.c = -9223372036854775807;
    } catch(e40) {
    }
}
const v41 = new F0();
function f42() {
    return Symbol.toPrimitive;
}
v41.valueOf = f42;
new F0();
const v46 = new F0();
function f47(a48) {
    try {
        a48.__proto__ = v46;
    } catch(e49) {
    }
    return a48;
}
v46.constructor = f47;
const v50 = v46?.constructor;
try { new v50(); } catch (e) {}
const o52 = {
};
try { new Proxy(Proxy, v41); } catch (e) {}
let v55 = new Proxy(v41, o52);
v55.valueOf = f42;
v55 *= o52;
const v58 = new Uint8ClampedArray(2624);
v58[970];
Float32Array.b = Float32Array;
new Float32Array(1179);
4 + 4;
const o68 = {
    "execution": "async",
    "type": "minor",
};
gc(o68);
BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
const v71 = new BigUint64Array(4);
try { v71.fill(4); } catch (e) {}
[-4.0,1.0,0.08951427776073273];
[-3.0,1.3684834666696094e+308,-3.468918683012639,5.494238800497353e+307];
[-5.217353636663258,-4.0,2.0,0.2583659300624598,2.220446049250313e-16,2.0];
class C76 {
}
const v77 = v71.constructor;
v77.d = v77;
v77.name;
class C79 extends v77 {
    g = F0;
}
C79.d = C79;
new C79();
const v81 = C76.toString;
try { v81(); } catch (e) {}
