const v0 = [1.272388121664928e+308,944567.7912810354];
let v1 = [-1e-15,1000000.0,-310.0393283956746,-1000000.0,-1.2623212344957175e+308,0.0,0.6413002171417407,861.2661106162598];
const v2 = [6.540084129020332,-3.510516857980443,1000000000000.0,835.1018582168501,7.581241384580551e+306,-805826.8993421489,-2.018168983187964,0.28822608146797635,0.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { a5.lastIndexOf(v1); } catch (e) {}
    try {
        this.b = v2;
    } catch(e7) {
    }
    try {
        this.f = a5;
    } catch(e8) {
    }
}
const v9 = F3?.__lookupSetter__;
try { new v9(v0); } catch (e) {}
const v11 = new F3(v1);
v11.f = v11;
const v12 = new F3(v1);
const v13 = new F3(v0);
v1 >>= v2;
const v14 = v11.f;
const v15 = delete v14?.[v14];
new F3(v12);
const v18 = [v15];
Reflect.construct(F3, v18, v14);
const v20 = [-65535,1958965612,1000,8,-54670,10000,1723726663,-32317,-16,16];
try { v20.push(v2); } catch (e) {}
[-1,-2403,26599,19397,128,-15];
const v23 = [-7,1524062737,2147483647,268435439,-4294967297,65537];
try { v23.reduce(v1); } catch (e) {}
const v28 = 6 <= 6;
const v29 = [-9223372036854775808];
[1000,9007199254740990,4,-4294967296,-1911934186,5,-1686];
[[1073741825,v20,typeof (Reflect in v18) === "number"],6];
[v14];
new Uint8ClampedArray(5);
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.constructor;
    let v46;
    try { v46 = new v45(this, a44); } catch (e) {}
    this.c = v46;
}
const v47 = [-16,-2,-56243,65535,268435439,17491,-65535,4294967296];
const v51 = [-65535n,-65535n,-10n];
const v52 = [v51,-10n,-65535n];
try { v52.fill(v13); } catch (e) {}
const v54 = [v47,-65535n,v47,-57761n];
const v55 = [-10n,-10n,-10n];
let v56;
try { v56 = v55.every(v11); } catch (e) {}
const v57 = [v54,-57761n,v29,v51,-65535n];
const v58 = [v57,v54,v57,v51];
try { v58.includes(v2); } catch (e) {}
const v60 = [3.836595330454784e+307,-1.1402235194805368e+308];
try { v60.toLocaleString(); } catch (e) {}
const v62 = [991.721527488573,-290835.2265090322];
try {
    v60.length = 2499;
} catch(e64) {
}
[-1.0,-1000000.0,-6.453134415503834e+307,-2.2250738585072014e-308,1e-15,-228003.00463890494,1.9400411482062907,-197.7029619198281,Infinity];
const v67 = /(?:a*)+q(?<a>.)/guds;
function f68(a69) {
    a69.b = a69;
    const o73 = {
        set b(a71) {
        },
        get d() {
            return a69;
        },
        __proto__: v67,
    };
    return o73;
}
f68(v67);
const v75 = new WeakMap();
let v76 = 9;
v76--;
try { ("g").at(v62); } catch (e) {}
const v81 = ("-1723624938").slice(v76, "g");
try { v81.trimEnd(); } catch (e) {}
const v83 = v81.normalize();
try { v83.repeat(v81); } catch (e) {}
let v85;
try { v85 = v83.substring(v62, WeakMap); } catch (e) {}
class C86 {
    constructor(a88, a89) {
        a89.sup(v83, a88).toLocaleLowerCase();
    }
}
C86.d = C86;
const v92 = [v62,v75];
[v75];
const v94 = [v62,v75];
let v95;
try { v95 = v94.pop(); } catch (e) {}
try { v95.delete(F41); } catch (e) {}
const v97 = /(x)(x)(x)\1/uis;
v97.e = v97;
function f98(a99, a100, a101, a102) {
    const o109 = {
        4294967295: v92,
        [v97](a104, a105, a106, a107) {
            super.test();
        },
    };
    return a100;
}
class C111 {
}
let v112 = 295968041;
v112++;
const v114 = [-1024,536870889,65536,65536];
try { v114.lastIndexOf(v85); } catch (e) {}
const v116 = [v112,v114];
const o117 = {
    "arguments": v116,
    "type": "-1723624938",
};
-8298n % -8298n;
-8298n <= -8298n;
-996.1550562984842 / -996.1550562984842;
8.438590633230234e+306 + 8.438590633230234e+306;
8.438590633230234e+306 / 8.438590633230234e+306;
const t122 = [-936145422,536870912,127,257,-36772,-15984,2];
t122.length = 6;
const v130 = [];
function f131() {
    const v134 = gc(256);
    function* f136(a137) {
        yield [9007199254740990,-4294967296,-1205995130,-12581,9];
        return -1.7570084557226905e+308;
    }
    const o146 = {
        toString() {
            const v141 = super[this];
            try { new v141(v56, this, this, v134, 256); } catch (e) {}
            try {
                super.startsWith(Reflect, 10000, v28);
            } catch(e144) {
            }
            return this;
        },
        ...v130,
        n() {
            return this;
        },
    };
}
f131();
f131();
gc.caller;
function f151() {
    function f152(a153) {
        try {
            const o154 = {
            };
        } catch(e155) {
        }
    }
    try {
    } catch(e156) {
    }
}
gc();
const v160 = new Uint8Array(165);
v160[113];
const v162 = v160.lastIndexOf();
const v163 = v162 | v162;
v163 - v163;
const v166 = (a167, a168, a169, a170) => {
    a168 - a168;
    a169 * a169;
    a170 >> a170;
    function F174(a176, a177, a178, a179) {
        if (!new.target) { throw 'must be called with new'; }
    }
};
try { v166(Uint8Array, v162, v162, 8.438590633230234e+306); } catch (e) {}
