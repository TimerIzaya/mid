const v1 = new WeakSet();
class C2 {
    set b(a4) {
        async function f5(a6, a7) {
            new Array(11);
            await a4;
            return this;
        }
        f5(a4, f5);
    }
    b;
    static #e;
    static [WeakSet] = v1;
    4;
}
const v13 = new C2();
const v14 = new C2();
const v15 = new C2();
const v19 = [v1,536870912,v14,-55797,-55797];
const v20 = [v1];
const v21 = [1124847618,v1,-55797];
class C22 extends WeakSet {
    static get e() {
        try {
            new C22(v1);
        } catch(e25) {
        }
        return 1124847618;
    }
    5;
    constructor(a27, a28) {
        super(v13);
        let v29 = 0;
        do {
            v1[C2];
            v13.__proto__;
            v29++;
        } while (v29 < 2)
    }
}
const v35 = new C22(C22, v19);
new C22(v15, v35);
const v37 = new C22(v15, v21);
class C44 {
    set h(a46) {
        a46[-12] = -9200;
        0 instanceof v20;
        129 !== this;
        let v49 = ~-9200;
        v49 = 129;
        const t49 = a46[5];
        const v51 = delete t49?.[12];
        try {
        } catch(e52) {
        }
        const v55 = new Int8Array(520);
        for (let v56 = 0; v56 < 5; v56++) {
            v55.indexOf(v56);
        }
        super.g = v51;
    }
    h;
    6;
    #a;
    f = -12;
    8;
    [-12];
}
new C44();
new v37();
new C44();
gc();
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e67) {
    }
}
class C68 extends C44 {
    static {
    }
}
const o70 = {
};
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
try {
    function f74() {
    }
} catch(e75) {
}
const o76 = {
};
try {
    const o77 = {
    };
} catch(e78) {
    function f79(a80, a81, a82, a83) {
        const o87 = {
            n(a85, a86) {
            },
        };
    }
}
try {
    const o88 = {
    };
} catch(e89) {
}
try {
} catch(e90) {
    function f91(a92, a93, a94, a95) {
    }
}
