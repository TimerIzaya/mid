const v0 = [];
const v3 = new BigUint64Array(1583);
const v6 = new Uint32Array(14);
new BigInt64Array(2130);
function f10(a11, a12) {
    const o19 = {
        set g(a14) {
            super.f = v0;
            ("h").normalize("NFKC");
            try { ("h").trimRight(); } catch (e) {}
        },
        "h": Uint32Array,
        "b": BigInt64Array,
        ...v3,
        4085: 14,
        [BigUint64Array]: a12,
        ...v6,
    };
    return o19;
}
f10(2130, 2130);
f10(2130, 14);
f10(14, 2130);
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    function f25(a26) {
        this.d |= a26;
        function f27() {
            return f27;
        }
        return a26;
    }
    Object.defineProperty(this, "valueOf", { configurable: true, enumerable: true, value: f25 });
    try {
        this.a = 1;
    } catch(e29) {
    }
    try {
        this.c = 1;
    } catch(e30) {
    }
    try {
        this.d = 1;
    } catch(e31) {
    }
}
function f32() {
    function f33(a34) {
        const v37 = new Float64Array();
        const t49 = v37.constructor;
        const v39 = new t49(821);
        v39.lastIndexOf();
        return v0;
    }
    return f33;
}
Object.defineProperty(F23, "valueOf", { writable: true, get: f32 });
const v41 = new F23();
const v42 = new F23();
new F23();
12 * 12;
const v49 = ([12,12])?.indexOf;
try { new v49(Int32Array); } catch (e) {}
2707 / 2707;
new Uint8Array(2707, 2707, 128);
const v56 = new Int32Array(128);
Uint16Array.name;
const v60 = new Uint16Array(92);
const v63 = new Int8Array(257);
const v64 = v63?.subarray;
try { new v64(F23, 92); } catch (e) {}
function f66() {
}
try { f66(); } catch (e) {}
const v68 = [f66,f66];
function f70(a71) {
    function F72(a74, a75, a76) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = v49;
        } catch(e77) {
        }
    }
    new F72(Int32Array, v49, a71);
    new F72(a71, v41, f32);
    new F72(v56, v49, Date);
}
Object.defineProperty(Date, "b", { set: f70 });
const v81 = new Date();
try { v81.setDate(F23); } catch (e) {}
try { ("getUTCMinutes").fixed(); } catch (e) {}
v81["getUTCMinutes"]();
const o87 = {
    0: "1ya",
    162: "1ya",
};
o87[162];
try { v68.includes(v68); } catch (e) {}
const v90 = [v68,f66];
v90.b = v90;
const v91 = [v90];
try { v91.pop(); } catch (e) {}
let v95;
try { v95 = ("toString").padStart(v42); } catch (e) {}
v95[6] = v95;
try { ("-1865512128").valueOf(); } catch (e) {}
const o106 = {
    toString(a100, a101, a102, a103) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
try { Uint8ClampedArray.from(128); } catch (e) {}
new BigUint64Array(12);
Date.b = Date;
class C114 extends Date {
    static get c() {
        const v116 = `
        `;
        eval();
    }
}
new Uint8ClampedArray(3989);
try { ("Bl4").toWellFormed(); } catch (e) {}
const v124 = new BigUint64Array("Bl4");
Int32Array.name = Int32Array;
const v126 = new Int32Array();
v126.__proto__ = v124;
let v128;
try { v128 = new Int8Array(3989, v60, 3989); } catch (e) {}
v128?.constructor;
class C130 {
}
const v131 = new C130();
v131[10] = 9;
v131[10] = v131;
const v132 = v131[10];
Object.defineProperty(v132, "prototype", { writable: true, configurable: true, value: f70 });
v132.prototype;
const o137 = {
    "execution": "async",
    "type": "minor",
};
gc(o137);
