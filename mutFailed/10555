class C3 {
    n(a5) {
        try { ("iQ5D").indexOf(a5, a5); } catch (e) {}
        new Float32Array(4096);
        new Int8Array(3005);
        new Int32Array(4);
        return 370526.9046545427;
    }
}
C3.d = C3;
const v16 = new C3();
const v17 = new C3();
function f18(a19) {
    [0.3014587792680322,4.0,-536.5035208952576,1000000.0,-3.0772867411774634,-3.0];
    [-2.2250738585072014e-308,-2.0,-750265.5828151982,-1000.0,4.0,5.312656257718417e+307,1.0,-0.7754586251138118];
    [1.339972610873754e+308,-969.5929582844625,-66056.86260716047,8.235228870239439];
    return C3;
}
v17.constructor = f18;
const v23 = v17?.constructor;
try { new v23(); } catch (e) {}
const v25 = new C3();
let v26;
try { v26 = v25.n("iQ5D"); } catch (e) {}
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    a29.constructor = f18;
    a30.constructor = f18;
    const v33 = a30?.constructor;
    try { new v33(); } catch (e) {}
    const v35 = a32?.constructor;
    v35.constructor = f18;
    try { new v35(); } catch (e) {}
    this.f = a29;
    try {
        this.f = 370526.9046545427;
    } catch(e37) {
    }
}
const v38 = new F27(v17, v16, v25, v17);
v38.b = C3;
const v39 = new F27(v16, C3, v38, v16);
const v40 = new F27(v25, v17, v16, v17);
function f41() {
    return v17;
}
function f42(a43) {
    const t47 = [1073741823,64,-192774235];
    t47.length = 127;
}
Object.defineProperty(v40, "length", { writable: true, enumerable: true, get: f41, set: f42 });
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    a49.length = a50;
    Object.defineProperty(a51, "a", { value: f41 });
    a49.length;
    a50.b = a50;
    a51.a = a51;
    this.c = v17;
    try {
        this.c = a48;
    } catch(e53) {
    }
    try {
        this.h = a51;
    } catch(e54) {
    }
    try {
        this.f = v25;
    } catch(e55) {
    }
}
const v56 = new F46(v38, v40, v39, v39);
v56.a = v26;
const v57 = new F46(v38, v40, v38, v56);
v57.a = v57;
v57.f;
new F46(v38, v40, v57, v57);
Object.defineProperty(Date, "g", { configurable: true, enumerable: true, value: Date });
try { Date.now(); } catch (e) {}
class C62 extends Date {
}
C62.g = C62;
const v63 = new C62();
v63.setUTCMinutes();
