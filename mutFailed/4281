const v1 = new Map();
const v2 = [Map,Map,Map,v1];
const v3 = [v2,Map];
const v4 = [Map,v2,v2];
const v5 = /an/gudimsy;
const v6 = /xa\b!/gdis;
const v7 = /a+?z*/gm;
function f8(a9, a10) {
    try {
        v6.compile("-4294967297");
    } catch(e13) {
    }
    return v4;
}
const v15 = Symbol.toPrimitive;
v7[v15] = f8;
const v16 = [-3.0,0.0,8.692473731259366,-1e-15,0.598869256055706,-2.0,-2.220446049250313e-16,-Infinity,-9.722804109631653];
[-1.257587252130051,-93063.25159892451,2.0,-256299.38870889205,-Infinity,-1000.0,-7.521391161311806,1e-15];
[2.220446049250313e-16,-1000000000000.0,1000.0];
function f19() {
    return v16;
}
function f20(a21) {
    a21 + a21;
    try {
        v15.valueOf = a21;
    } catch(e23) {
    }
    return a21;
}
f19[Symbol.toPrimitive] = f20;
class C26 {
    [v7] = v2;
    constructor(a28, a29) {
        f19();
        %PrepareFunctionForOptimization(f19);
        f19();
        f19();
        %OptimizeFunctionOnNextCall(f19);
        f19();
    }
    #b;
    [f19] = v4;
    1000;
    static [v7];
    #a;
}
new C26(v4, v5);
new C26(v2, v5);
new C26(v3, v5);
for (let v37 = 0; v37 < 5; v37++) {
    function f38() {
        for (let [i41, i42] = (() => {
                switch (f38) {
                }
                return [0, 10];
            })();
            i41 - i41, i42 << i42, i41 < i42;
            i41++, i42--) {
        }
        return v37;
    }
    f38();
    %OptimizeFunctionOnNextCall(f38);
}
