new Uint16Array(4);
const v5 = new Float32Array(402);
const v10 = new Uint8Array(6);
new Int8Array(v10);
new Int16Array(2778);
class C14 extends Int16Array {
    8;
    7 = Float32Array;
    a = v5;
    [2778];
    p(a16, a17, a18, a19) {
        super.subarray(402);
        const o21 = {
        };
        function f22() {
            let v23 = 852.2904873570058;
            function f24() {
                const v25 = [];
                v25[6] = v25;
                const o28 = {
                    set b(a27) {
                    },
                };
                return v23;
            }
            for (let v29 = 0; v29 < 5; v29++) {
                f24();
                %OptimizeFunctionOnNextCall(f24);
            }
            const o35 = {
                m(a32, a33) {
                    return v23++;
                },
            };
            return o35;
        }
        f22();
        f22();
        return ("g").normalize("NFKD");
    }
    static #f = 2778;
}
new C14();
new C14();
new C14();
try { ("imul").padEnd(1073741824); } catch (e) {}
const v52 = new BigInt64Array(4046);
function f53(a54, a55) {
    function F56(a58) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C59 extends F56 {
    }
    const v60 = new C59();
    v60.constructor;
    const o62 = {
    };
    for (const v63 in o62) {
    }
    let o64 = {
    };
    [,...o64] = v52;
    function f65(a66, a67) {
        class C68 {
            constructor(a70, a71) {
                const o73 = {
                };
                gc(o73);
            }
        }
        for (let v75 = 0; v75 < 25; v75++) {
            new C68(a66, a54);
        }
        return C68;
    }
    new Promise(f65);
    return o64;
}
f53();
gc(128n);
[256,-226375137,-4096,-9007199254740991,-1,-2,-6];
[2147483647,-642530021,1786934080,65535,65535,-1024,14,1445415583,1958088553,0];
class C90 {
    m(a92, a93) {
        super[a93];
        a93?.[11];
        return 5.0;
    }
    constructor(a97) {
        function f98(a99, a100, a101) {
            return a101;
        }
        const o104 = {
            "type": "function",
        };
        const v105 = new Worker(f98, o104);
        v105.terminateAndWait();
        v105.terminate();
        class C108 {
            static [11] = this;
            static d = 11;
            static [this] = this;
        }
        new C108();
        new C108();
        new C108();
    }
}
[2058213111,536870889,-13,-1244150048,1761453201,16,-2147483649,10000,-5,9];
new WeakMap();
function F115(a117, a118, a119) {
    if (!new.target) { throw 'must be called with new'; }
}
function f120() {
    class C121 {
    }
    for (let v122 = 0; v122 < 5; v122++) {
    }
}
class C123 {
    constructor(a125, a126) {
        for (const v127 in this) {
        }
    }
}
f120();
