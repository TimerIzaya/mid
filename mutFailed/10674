/[^RX+]/ms;
new Uint8Array(208);
const v6 = new Float32Array(208);
const v9 = new Int32Array();
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this?.constructor;
    try { new v15(Uint16Array, a14, a14); } catch (e) {}
    a12 * a12;
    a14++;
    this.d = a12;
    this.g = Int32Array;
}
const v19 = new F10(256, v9, 208);
const t14 = v19.g;
new t14(Uint16Array, v6, 208);
/Z4\1112k?/gdiy;
const v23 = /[^ab\b\d\bcd]/vm;
function f24() {
    return v23;
}
[-125452.318850777,548.5060920267683,0.6179901710558587,0.10036487340873734,4.919763617754402,-1000000.0,5.0,1000000000.0];
[434485.2583419434,479.9660671460979,-2.2250738585072014e-308,-1.7976931348623157e+308];
Math.sinh(0);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -65536;
    } catch(e33) {
    }
    try {
        this.b = -65536;
    } catch(e34) {
    }
    try {
        this.e = -65536;
    } catch(e35) {
    }
}
const v36 = new F30();
const v37 = new F30();
const v38 = [256,9007199254740991,-2147483649,2];
class C39 {
    static e;
    16 = v38;
    e = F30;
    constructor(a41, a42) {
        try {
            a41.fuck(false, this);
        } catch(e45) {
        }
    }
}
const v46 = new C39(v37, v36);
const v48 = new WeakSet();
const v49 = v48[v46];
try { v49(); } catch (e) {}
[-1000000.0];
const o55 = {
};
function f56() {
}
new f24(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray, f24);
new Int8Array(256);
new BigUint64Array(3216, 3216, 3331);
class C68 extends v37 {
}
new Uint16Array(Uint16Array);
const v73 = new Float32Array(2);
v73[1] = v73;
new Date(-4.0);
new Float64Array(2.2250738585072014e-308);
function f79(a80, a81) {
    function f83(a84) {
        function F85(a87, a88, a89) {
            if (!new.target) { throw 'must be called with new'; }
            a87[4294967295] = a87;
        }
        F85.prototype.constructor;
        return a80 ^ v23;
    }
    this.onmessage = this;
    return a80;
}
function f93() {
    let v94 = -4294967295;
    const o96 = {
        get a() {
            v94 %= v94;
            return f93;
        },
    };
    return f93;
}
const v97 = f93();
class C99 {
    get g() {
        Uint16Array();
        Uint8ClampedArray();
        BigInt64Array();
        return v97;
    }
    static #h = "p";
}
const v107 = new C99();
try { v107.o(v73); } catch (e) {}
const o111 = {
    "ignoreCase": "function",
};
new Uint8ClampedArray(f79, o111, Uint8ClampedArray);
new SharedArrayBuffer(2147483649);
