const v2 = -Infinity;
class C3 {
    constructor(a5) {
        this[this] = this;
        this >>> this;
        let v7 = this[a5];
        v7 >>>= a5;
        const o8 = {
        };
        try {
            o8.h = v2;
        } catch(e9) {
        }
        try {
            const o10 = {
            };
            const v12 = new Uint8Array();
            const o16 = {
                "b": a5,
                ...v12,
                n(a14, a15) {
                    return this;
                },
            };
            o10.h = v2;
            function f17(a18, a19, a20, a21) {
                const o22 = {
                };
                const v23 = o22.__proto__;
                v23.__lookupSetter__.length;
                const v27 = new Uint8ClampedArray(v23);
                const v28 = v27.length;
                const v30 = ("stack").normalize();
                async function f31(a32, a33, a34, a35) {
                    Object.defineProperty(v30, 0, { enumerable: true, value: v28 });
                    return f31;
                }
                f31();
                return "stack";
            }
            o10.d = C3;
        } catch(e37) {
        }
        try {
            const o38 = {
            };
            o38.h = v2;
            o38.d = C3;
            o38.f = a5;
        } catch(e39) {
        }
        async function f41(a42, a43) {
            class C44 {
                [C44] = 10000;
            }
            return a42;
        }
        try {
            const o45 = {
            };
            o45.h = v2;
            o45.d = C3;
            o45.f = this;
        } catch(e46) {
        }
    }
    n(a48, a49) {
        try { new a49(v2, a49, v2, a48); } catch (e) {}
        [536870888,-1693015769,1073741824,-15];
        [512,268435441,1073741824,55267,536870889,-9007199254740990,2147483649,9007199254740992,-5];
        const v53 = [536870888,-1024,536870887,536870912,214604189,65535,36374];
        function F54(a56, a57) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a57;
            } catch(e58) {
            }
            try {
                const v59 = [];
                class C60 {
                    constructor(a62, a63, a64) {
                        function f65(a66, a67, a68) {
                            v59.copyWithin();
                            try {
                                f65(-268435456, 0.6683462416314783, [-268435456]);
                            } catch(e74) {
                            }
                            const v75 = this >> -268435456;
                            v75 >> this;
                            return -v75;
                        }
                        f65(this, this, a62);
                    }
                }
                class C79 extends C60 {
                }
                new C79();
            } catch(e81) {
            }
        }
        new F54(v53, v53);
        return a49;
    }
    #b;
    /*
    constructor(a84, a85) {
        this.constructor;
        Math.atan2(this);
    }
    */
}
new C3(5.0);
new C3(v2);
new C3(5.0);
new Map();
function f100() {
    function F101(a103, a104, a105) {
        if (!new.target) { throw 'must be called with new'; }
    }
    -877499.5260373768 * -877499.5260373768;
    Map.includes(Float32Array);
    function f110(a111, a112) {
        const t122 = "g";
        t122.d = F101;
        const o118 = {
            "e": 12,
            __proto__: 3.4890473589784586e+307,
            "g": 12,
            o(a117) {
                return a117;
            },
            ...1000000000000.0,
        };
        a111(f110);
        return a111;
    }
    const v121 = new Promise(f110);
    v121.then(f110);
    return f100;
}
f100.call();
