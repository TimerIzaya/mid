let v1 = "symbol";
let v2 = -53474;
class C3 {
    static get b() {
        v1[this] = v1;
        super.d = this;
        typeof this === "boolean";
        return -256;
    }
    [v2];
    constructor(a9) {
        [] = v1;
        function f11() {
        }
        const v12 = [601759695];
        const v13 = [1073741824,1073741823,1376142744,1073741825];
        function f15(a16, a17, a18, a19) {
            function f21() {
                return a16;
            }
            const v22 = f11();
            const v24 = new Int8Array();
            const v27 = new Uint32Array(4);
            [v27];
            const v31 = BigUint64Array * 536870887;
            v31 ** v31;
            function f33(a34, a35) {
                return v22;
            }
            f33();
            const v37 = v24.buffer;
            Object.defineProperty(v37, "constructor", { writable: true, configurable: true, value: Date });
            new Int8Array();
            v37.slice(2147483648);
            %OptimizeFunctionOnNextCall(f21);
            let v42;
            try { v42 = v13["find"](..."find", a19, ...v12, ...v13, ...522675525n); } catch (e) {}
            Symbol("find");
            const o45 = {
            };
            v42 <= a18;
            return arguments;
        }
        for (let v47 = 0; v47 < 5; v47++) {
            f15();
        }
        [] = v1;
        const v49 = v1[v2];
        a9 /= a9;
        super.a = v1;
        v49[v1] = this;
        ({"c":v2,"e":v1,"f":v1,...v1} = v49);
    }
}
const v50 = new C3(C3);
new C3(v50);
const v52 = new C3(v1);
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a62;
    } catch(e65) {
    }
    try {
        this.h = C3;
    } catch(e66) {
    }
}
new F59(v2, -256, v50, v50);
const v68 = new F59(F59, 268435440, v50, v50);
new F59(50162, 268435440, v52, v68);
function f70(a71, a72) {
    function f73() {
        return f70;
    }
    Object.defineProperty(a71, "toString", { configurable: true, get: f73 });
    return a72;
}
f70(f70);
f70(f70);
