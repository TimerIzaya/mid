function f3(a4, a5) {
    const v6 = -a4;
    a5 % a5;
    const o32 = {
        n(a9, a10) {
            +40734;
            const v14 = ~40734;
            a4.prototype;
            function f16() {
                return f16;
            }
            function F17() {
                if (!new.target) { throw 'must be called with new'; }
                for (const v22 of Array(19793)) {
                }
                const v26 = new Int32Array(56885);
                f16(...v26, 127);
            }
            Math.random().round(~a5);
            v14 / 40734;
            return a10;
        },
        "c": a5,
        "h": 1e-15,
        __proto__: a5,
    };
    return v6;
}
f3.prototype;
f3(-1000000000.0, -324.06873779274474);
f3(-324.06873779274474, 1e-15);
f3(-324.06873779274474, -1000000000.0);
0.7060383848360314 !== 0.7060383848360314;
let v41 = 5;
v41--;
BigInt64Array.prototype = BigInt64Array;
new BigInt64Array(v41);
new Uint32Array(10);
try { new Float64Array(3968, -324.06873779274474, 0.7060383848360314); } catch (e) {}
new Float64Array(3968);
new BigInt64Array(256);
function f56() {
}
[[f56,f56],f56];
for (let v59 = 0; v59 < 5; v59++) {
    function f60() {
        ("Vre").charAt(v59);
        const v63 = Float64Array.lastIndexOf();
        const v64 = v63 >>> v63;
        const v66 = new Float32Array("Vre", v59, v59);
        v66.valueOf = f60;
        const v67 = v66;
        v67.valueOf = f3;
        try { v67.entries(); } catch (e) {}
        v67[1] = v67;
        const v70 = Math.exp(v59);
        function f71() {
            const v73 = ("1073741824").constructor;
            return v73(f71, v64, v73, "1073741824", v73);
        }
        let v75 = v70 << v70;
        const v76 = v75++;
        v76 >>> v76;
        const o85 = {
            [-4294967297n](a79, a80, a81, a82) {
                eval();
            },
        };
        return -4294967297n;
    }
    const v86 = f60();
    v86 & v86;
    %OptimizeFunctionOnNextCall(f60);
}
