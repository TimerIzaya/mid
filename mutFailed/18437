new WeakMap();
const v4 = -3.4064522821655574 % -3.4064522821655574;
64 >>> 64;
new Uint8ClampedArray(v4);
new Uint8Array(3);
const v18 = new BigUint64Array(1197);
function f19() {
}
class C20 {
    constructor() {
        for (let [i30, i31] = (() => {
                const v23 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                const v24 = v18.constructor;
                try { new v24(v23, f19, f19); } catch (e) {}
                Date.UTC(268435456);
                return [10, 10];
            })();
            i30 >> i30, i30 < i31;
            i31++, C20--) {
            const v40 = `function`;
            const o42 = {
            };
            typeof v40;
        }
    }
}
const v44 = new C20();
v44?.constructor;
let v46;
try {
const t0 = 148.75143910893803;
v46 = new t0();
} catch (e) {}
const v47 = v46?.constructor;
new C20();
const v50 = [];
Reflect.construct(C20, v50, v47);
const v54 = [65537,268435441,63298,-5,1235122603];
function F55(a57, a58, a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    a58.caller;
    try {
    } catch(e62) {
    }
    try {
        this.b = -714582153;
    } catch(e63) {
    }
    try {
    } catch(e64) {
    }
}
128 !== 128;
function F66(a68) {
    if (!new.target) { throw 'must be called with new'; }
}
function f69(a70, a71, a72) {
    try {
        new a70();
    } catch(e75) {
    }
    [...v50];
    do {
        const o77 = {
        };
        const o78 = {
        };
    } while ((() => {
            a72 === 7;
            try {
            } catch(e81) {
            }
            return 0 < 7;
        })())
}
let v84 = 17 ^ 17;
v84 >> v84;
const v87 = -2;
const v91 = new Int16Array(2183);
const v93 = new Int16Array(17);
async function f94(a95, a96, a97) {
    a96 >> a96;
    delete v93[-1000000000.0];
    v91[5];
    v84--;
    f94++;
    -v87;
}
1 / 1;
const v108 = [1,17,[Uint8ClampedArray,Uint8ClampedArray]];
function F109(a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
}
function F113(a115) {
    if (!new.target) { throw 'must be called with new'; }
}
const v116 = new F113(F113);
function F117(a119, a120, a121, a122) {
    if (!new.target) { throw 'must be called with new'; }
}
function F123(a125, a126) {
    if (!new.target) { throw 'must be called with new'; }
}
class C127 {
}
function f130() {
    let v132 = Float64Array;
    Array();
    function f135() {
    }
    function f136(a137) {
    }
    function F138(a140, a141) {
        if (!new.target) { throw 'must be called with new'; }
    }
    v132 = F117;
    try {
    } catch(e142) {
    }
    class C144 {
    }
    try {
        class C145 {
        }
        function* f146(a147, a148) {
        }
    } catch(e149) {
    }
    const v150 = Symbol.toPrimitive;
    /7xyz{1,}?/vdm;
    /Ch/gvy;
    try {
    } catch(e153) {
    }
    const o157 = {
        toString(a155, a156) {
        },
    };
    const o187 = {
        [522675525n](a159, a160) {
        },
        valueOf(a162, a163) {
        },
        [-4294967297n](a165, a166, a167, a168) {
            function F169(a171, a172, a173, a174) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                } catch(e175) {
                }
                try {
                } catch(e176) {
                }
            }
            new F169(v116, v108, 2183, F109);
        },
        "arguments": v54,
        [v150]() {
        },
        valueOf(a180, a181) {
        },
        get h() {
        },
        4: "Vre",
        toString(a184, a185, a186) {
            return this;
        },
    };
    const v189 = new Uint16Array();
    v189?.entries;
    return f136;
}
