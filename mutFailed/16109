const v2 = new Int8Array(3737);
const v4 = 10 + 10;
const v6 = new Uint16Array(10);
const v9 = new Float32Array(181);
v9[31];
function f12() {
    return 181;
}
-1246948669 - -1246948669;
const v19 = new Uint32Array(1000);
try { Int8Array.from(v9); } catch (e) {}
const v23 = new Int8Array(2289);
v23[1168] = v23;
const v26 = f12();
const v28 = v6["filter"](f12, v2);
v28[4] = v28;
("f")[2];
v19["f"](f12, v2, 1000, Int8Array, Int8Array);
new Int8Array(189);
function f33() {
    let v34 = -347.3974399609318;
    v34 != v34;
    let v36 = v34--;
    v36--;
    class C39 {
    }
    C39.name = C39;
    const v40 = new C39();
    const v41 = v40?.g;
    try { new v41(); } catch (e) {}
    const v43 = new C39();
    [v43,C39];
    [-898933.1301194798,v43];
    const v47 = ("filter")["startsWith"](v28, v26);
    v47 || v47;
    -21053 * -21053;
    const v52 = f12 && f12;
    Math.fround(-21053);
    Math.cosh(-21053);
    ~v52;
    const v56 = [v43];
    class C57 extends C39 {
    }
    try { new C57(v4); } catch (e) {}
    function f59(a60, a61) {
        return a60;
    }
    try { f59.bind(v28); } catch (e) {}
    Set.toString = f59;
    Set.constructor(Set);
    v56.constructor;
}
%PrepareFunctionForOptimization(f33);
f33();
%OptimizeFunctionOnNextCall(f33);
f33();
