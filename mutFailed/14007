function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.c = 15;
        const v4 = [1000000.0,1e-15,4.0,-1000000.0];
        const v6 = new Uint32Array(v4);
        let v7 = -4294967297n;
        v7--;
        const v9 = [1073741824,1073741823,1376142744,1073741825];
        function f10() {
            try { ("Vre").charAt(4096); } catch (e) {}
            const v13 = ("Vre").codePointAt();
            v13 ^ v13;
            let v15 = Float64Array;
            v15 = this;
            b = v4;
            try {
                v9.forEach();
            } catch(e17) {
            }
            const o28 = {
                "c": v7,
                valueOf(a19, a20) {
                    return v6;
                },
                15: v6,
                [v7](a22, a23, a24, a25) {
                    FinalizationRegistry(a23);
                },
            };
            return v7;
        }
    } catch(e29) {
    }
    try {
        this.a = 15;
    } catch(e30) {
    }
    const v32 = ("by").normalize();
    for (let v33 = 0; v33 < 10; v33++) {
        v33 < 10;
    }
    class C36 extends v32 {
    }
    const v37 = [-0.685155357392599,5.0];
    function F38(a40, a41, a42, a43) {
        if (!new.target) { throw 'must be called with new'; }
        const v44 = this.constructor;
        try { new v44(a41, F0, v44); } catch (e) {}
        v37.length &= 1;
    }
    try {
        this.d = 15;
    } catch(e47) {
        return this;
        function f48() {
            return f48;
        }
        ([]).groupToMap(f48);
    }
}
const v51 = new F0();
const v52 = new F0();
const v53 = new F0();
new Uint8Array(127);
%OptimizeFunctionOnNextCall(v52);
class C58 {
    constructor(a60, a61) {
        const t69 = /((((.).).).)p\P{scx=Greek}\xed\xa0\x80/vim;
        t69.toString = a60;
    }
}
new Int32Array(3991);
new Int16Array(5);
function f68() {
}
class C69 {
    constructor(a71, a72) {
        function f73() {
            const o74 = {
            };
            function f75() {
                return f73;
            }
            function f76(a77) {
                for (const v79 of "-4294967295") {
                }
            }
            Object.defineProperty(o74, "valueOf", { configurable: true, get: f75, set: f76 });
            return o74;
        }
        const v80 = f73();
        const v81 = f73();
        v81[Symbol.toPrimitive] = f68;
        v81.valueOf = f68;
        ([Uint8Array])["indexOf"](v80, v81);
        for (let v88 = 0; v88 < 5; v88++) {
            const v90 = [BigInt64Array,BigInt64Array];
            /((((.).).).)rfoo|(bar|baz)|quux*/uims[v90];
            function F93() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    let v95 = 0;
                    do {
                        v95++;
                    } while (v95 < 5)
                    new F93();
                } catch(e100) {
                }
            }
            function f102(a103) {
                return a103;
            }
            let v104 = -4294967295;
            return v104++;
            this["p" + v88] = v88;
        }
    }
}
new C69(v51, v53, 127);
new C69();
class C109 extends f68 {
    constructor(a111, a112, a113) {
        super();
        super.f = a111;
    }
}
new C109();
const o123 = {
    set g(a117) {
        function F118(a120, a121, a122) {
            if (!new.target) { throw 'must be called with new'; }
        }
    },
};
for (let v124 = 0; v124 < 10; v124++) {
    v124 < v124;
}
