new BigInt64Array(3);
const v5 = new Int16Array(3649);
function f6(a7) {
    function F9(a11, a12) {
        if (!new.target) { throw 'must be called with new'; }
        const v13 = this?.constructor;
        try { new v13(this); } catch (e) {}
    }
    Object.defineProperty([[Int16Array,[F9]],18074,3649,BigInt64Array,Int16Array], 3, { writable: true, configurable: true, enumerable: true, get: f6, set: f6 });
    v5[BigInt64Array] = a7;
    new F9(18074);
    return 3649;
}
v5[Symbol.toPrimitive] = f6;
const v23 = new Float64Array(3469);
function f27(a28, a29, a30) {
    const o51 = {
        [v5](a32, a33, a34, a35) {
            const v38 = new Int8Array(256);
            new Int32Array(8);
            async function f42(a43, a44) {
                a44 /= 536870889n;
                a28 <<= a28;
                try { v38.reduce(a30, f27); } catch (e) {}
                return await a29;
            }
            f42(536870889n, 1073741824n);
            const v50 = new Uint32Array(1076);
            return v50;
        },
        ...v23,
        ...v23,
        2538: Int16Array,
    };
    return o51;
}
f27(536870889n, 536870889n, 536870889n);
f27(536870889n, 536870889n, 1073741824n);
f27(536870889n, 1073741824n, 1073741824n);
function f61(a62, a63, a64, a65) {
    const o70 = {
        [a64](a67, a68, a69) {
            switch (a62) {
                default:
                    break;
            }
        },
    };
    return a65;
}
