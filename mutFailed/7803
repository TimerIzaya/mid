function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        return F0;
    }
    function f3(a4) {
        const v7 = new Int8Array(2830);
        const v10 = new Int32Array(10);
        function f13(a14, a15, a16) {
            const o17 = {
                ...v7,
                814452916: 129,
                "f": v10,
                ...v10,
                __proto__: a15,
                [a15]: Float64Array,
            };
            return f13;
        }
        f13();
        f13(-25269, v7);
    }
    Object.defineProperty(this, "a", { writable: true, configurable: true, enumerable: true, get: f2, set: f3 });
    try {
        this.b = 128;
    } catch(e22) {
    }
    try {
        this.f = 128;
    } catch(e23) {
    }
}
const v24 = new F0();
new F0();
const v26 = new F0();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    function f33(a34, a35) {
        new Uint8Array(14);
        return a32;
    }
    a32.toString = f33;
    a32.f;
    a31.a = a31;
    a32.h = a32;
    try {
        this.a = a32;
    } catch(e40) {
    }
}
F29.arguments = F29;
const v41 = new F29(v26, v26);
function f42() {
    const v43 = v24.b;
    const v44 = new F29();
    const o58 = {
        toString(a46, a47, a48) {
            let v49;
            try { v49 = this.toString(a47, v43, a46); } catch (e) {}
            function f51(a52, a53, a54) {
                return v26 == v44 ? v26 : v44;
            }
            f51(255n, v49);
            v43[v24] = v43;
            return v43;
        },
    };
    return v43;
}
v41[Symbol.toPrimitive] = f42;
const v61 = new F29(v24, v26);
v61.a = v61;
const v62 = new F29(v26, v24);
v62.toString = Symbol;
class C63 {
    static {
        let v65;
        try { v65 = new this(); } catch (e) {}
        function f66() {
            return f42;
        }
        function f67(a68) {
            new f66();
        }
        Object.defineProperty(v65, "constructor", { get: f66, set: f67 });
        const v70 = v65?.constructor;
        try { new v70(); } catch (e) {}
        super[v24];
        let v74 = -7n;
        v74--;
    }
    static #b = v61;
    [v62];
    [-1];
    #e;
    static f = F0;
}
try { C63.bind(v26); } catch (e) {}
C63.b = C63;
new C63();
const v79 = new C63();
v79.constructor = f42;
const v80 = v79?.constructor;
function f81() {
    return f42;
}
function f82(a83) {
    Math.atan2([], -40875);
}
Object.defineProperty(v80, Symbol.toPrimitive, { writable: true, get: f81, set: f82 });
let v90;
try { v90 = new v80(); } catch (e) {}
const v91 = v90?.__defineGetter__;
try { new v91(C63, v80); } catch (e) {}
const v93 = new C63();
v93.constructor = f82;
const v94 = v93?.constructor;
function f95(a96) {
    Symbol.toPrimitive;
    return v61;
}
Object.defineProperty(v94, "toString", { writable: true, value: f95 });
try { new v94(); } catch (e) {}
268435441 - 268435441;
const v104 = new Date();
const v106 = new Set();
let v107;
try { v107 = v106.entries(); } catch (e) {}
try { v107.next(); } catch (e) {}
const v109 = v106.add(v104);
try { v109.add(F0); } catch (e) {}
let [v111,,...v112] = v106;
v111.valueOf = f82;
try { v111.setFullYear(v104, C63, v41); } catch (e) {}
let v114;
try { v114 = v111.valueOf(); } catch (e) {}
v114 >> v114;
const v116 = v111.setUTCHours(v109, Float64Array, v112, 268435441);
v116 >>> v116;
v111.setUTCFullYear();
3938 > 3938;
const v122 = new Int8Array(3938);
let v123 = 3;
v123++;
Float64Array.e = v106;
try { new Float64Array(v123, v123, C63); } catch (e) {}
Float64Array.e = Float64Array;
const v127 = new Float64Array();
try { v127.with(v123, v104); } catch (e) {}
let v129 = 0;
v129--;
for (let i = 0; i < 5; i++) {
    const v132 = v129 < 8;
    v132 && v132;
    [...v123] = v122;
    v129++;
}
