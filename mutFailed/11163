const v2 = new BigInt64Array(0);
const v5 = new Int16Array(4096);
5 >>> 5;
Int32Array.length = Int32Array;
const v9 = new Int32Array(5);
class C10 {
}
const v11 = new C10();
const v12 = v11?.constructor;
try { new v12(); } catch (e) {}
const v15 = new Int16Array();
try { v15.toSorted(v11); } catch (e) {}
const v18 = Date?.parse;
try { new v18(v5); } catch (e) {}
class C20 {
    static {
        this.d = this;
        for (let v22 = 0; v22 < 25; v22++) {
            function f23() {
            }
            function f24(a25, a26, a27, a28) {
                try { a26(); } catch (e) {}
                a27++;
                try { a28(a26, a25, Int16Array, Int16Array, Int16Array, a26, a26); } catch (e) {}
                const v32 = f23();
                const v34 = new Int8Array(v15);
                class C36 {
                }
                const v37 = [-1024];
                try { v37.pop(); } catch (e) {}
                for (let v39 = 0; v39 < 5; v39++) {
                    const v40 = delete v37[v39];
                    v40 || v40;
                }
                139837843 in v15;
                const v45 = 0 <= 0;
                v45 || v45;
                Int8Array.length = Int8Array;
                const v48 = new Int8Array(this, v22, v22);
                for (const v49 in v48) {
                    0 ^ v45;
                }
                536870887 >> 536870887;
                BigUint64Array * 536870887;
                function f55(a56, a57) {
                    return v32;
                }
                try { f55(f23, f23); } catch (e) {}
                Object.defineProperty(v34.buffer, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                return f24;
            }
            for (let v61 = 0; v61 < 5; v61++) {
                f24(this, this, v22, Date);
            }
        }
    }
}
try { new C20(); } catch (e) {}
[v9,v9];
const v65 = [Int16Array];
const v66 = v65?.filter;
try { new v66(Int16Array); } catch (e) {}
const v68 = [v65,v2,5,BigInt64Array];
try { v68.fill(v11); } catch (e) {}
v68[3] = v68;
new WeakSet();
const v72 = [0.5056701084838725,-61629.798017403926,NaN,864.4381894698445,2.220446049250313e-16,783231.8077183717];
const v75 = new BigUint64Array();
try { v75.findLastIndex(4096); } catch (e) {}
function F77(a79, a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(this); } catch (e) {}
    const v84 = a81?.__lookupGetter__;
    try { new v84(a81); } catch (e) {}
    const v86 = a80 >> a80;
    v86 | v86;
    try { a81(WeakSet, WeakSet, WeakSet, 16); } catch (e) {}
    a82.arguments = a82;
    try {
        v75[16] = v72;
    } catch(e89) {
    }
}
F77.g = F77;
const v90 = new F77(16, 16, F77, F77);
v90.length = v90;
v90.valueOf = Date;
try { v90.valueOf(); } catch (e) {}
