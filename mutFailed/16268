const v0 = [-469.9445637083646,-947.5850780593182,4.0,-1.0,-5.0];
const v1 = [271288.482879892,-3.0,2.0,-4.82263651788712,Infinity,8.24778350705661,560587.797855342];
[1.1253683477168317e+308,-1.229675468927788e+308,911729.6658214049,-1000000000000.0,5.0,1.3263334476361015e+308,0.940239117754121,0.8228969517821313,Infinity];
function f3(a4) {
    const o23 = {
        "d": v1,
        "f": v0,
        m(a6, a7) {
            try { new a6(a4, a7, a7, a4, v0); } catch (e) {}
            const o9 = {
            };
            let v10 = 2;
            const v11 = v10++;
            function f12(a13) {
                const o17 = {
                    __proto__: v10,
                    213: a13,
                    p(a15, a16) {
                        return v11;
                    },
                };
                return o17[213];
            }
            f12(f12(v11));
            new Proxy(v0, o9);
            return a6;
        },
        "e": a4,
    };
    return a4;
}
const v24 = f3(v1);
const v25 = f3(v0);
v25.f;
const v27 = f3(v0);
const v28 = [v27];
[f3,v28,f3];
const v30 = [v25];
class C31 extends f3 {
    static e = v27;
    8 = v27;
    toString(a33, a34, a35, a36) {
        f3(a36);
        Reflect.construct(a35, [v27,v28,f3], a35);
        return v28;
    }
    constructor(a42, a43) {
        function F44(a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
        }
        typeof arguments;
        for (let i = 0; i < 5; i++) {
            this[this];
        }
    }
    static a = v30;
    [v24] = v25;
}
new C31();
const v54 = new C31();
const v55 = new C31();
v55[8];
const v57 = [];
try { v57.toSpliced(v54, v54); } catch (e) {}
function f59(a60, a61, a62, a63) {
    try { a60.constructor(v28); } catch (e) {}
    try { a62.findLast(a63); } catch (e) {}
    a63 - a63;
    function f67() {
        return f59;
    }
    class C68 extends f67 {
    }
    const v69 = new C68();
    v69.arguments;
    const v71 = v69.toString();
    for (let i = 0; i < 25; i++) {
        new Uint8ClampedArray(129);
    }
    for (let i = 0; i < 5; i++) {
        ["object",v71,"object",v57];
    }
    return a62;
}
for (let v82 = 0; v82 < 5; v82++) {
    v82 % v82;
    f59(f59, f59, v57, v82);
}
%OptimizeFunctionOnNextCall(f59);
const v85 = f59();
try { v85.strike(); } catch (e) {}
