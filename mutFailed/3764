function f0() {
    const o15 = {
        set f(a5) {
            const v6 = super.g;
            const o7 = {
            };
            try {
                o7.a = v6;
            } catch(e8) {
            }
            try {
                const o9 = {
                };
                o9.a = v6;
                o9.g = this;
            } catch(e10) {
            }
            try {
                const o11 = {
                };
                o11.a = v6;
                o11.g = this;
                o11.e = 9;
            } catch(e12) {
            }
            try {
                const o13 = {
                };
                o13.a = v6;
                o13.g = this;
                o13.d = 9;
            } catch(e14) {
            }
        },
    };
    return o15;
}
const v16 = f0();
const v17 = f0();
const v18 = f0();
new Float32Array([798019179,-9007199254740992,-8195,-4294967297,1420574578,9007199254740991,-1493424054,-2147483649,8,47842]);
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v17;
    } catch(e29) {
    }
    try {
        this.b = f0;
    } catch(e30) {
    }
    try {
        this.d = a28;
    } catch(e31) {
    }
}
const v32 = new F25(v17, 4);
const v33 = new F25(v16, 2029726607);
new F25(v33, 128);
class C35 extends F25 {
    o(a37, a38, a39) {
        F25 <= v18;
        super.e = v18;
        a39[251] = a37;
        return v18;
    }
    constructor(a42, a43, a44) {
        super(a43, 4);
        a44 = v18;
        this["o"](4, v32, ..."o", 4);
    }
    a;
    #h = v32;
}
const v47 = new C35(128, 4, 4);
new C35(2029726607, 4, v47);
new C35(4, 128, v16);
const v50 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
for (const v52 in [1959699296,-1,9007199254740991,9007199254740992,2147483649,-4096,-9223372036854775808]) {
}
for (const v53 in v50) {
    ("-2").normalize("NFKC");
}
