function f3() {
    return -2147483649;
}
[-65537,536870912,1466795694];
const v5 = [-268435456,-128,8,-1218185312];
try { v5.lastIndexOf(-2147483649); } catch (e) {}
const v7 = [350094472,129,-65536,-19588,9007199254740991,9,9,13,-268435456,1];
([927716.746385878]).indexOf;
new Uint8Array(268435440);
const v13 = v7[2];
new BigUint64Array(198);
const v19 = [601759695];
const v20 = [1073741824,1073741823,1376142744,1073741825];
function f22(a23, a24, a25, a26) {
    function f28() {
        try {
            v20.forEach();
        } catch(e32) {
        }
        function f33() {
            return f33;
        }
        const v34 = f33();
        const o58 = {
            [522675525n](a36, a37) {
            },
            valueOf(a39, a40) {
                return a40;
            },
            [-4294967297n](a42, a43, a44, a45) {
            },
            "e": -4294967295,
            ...v19,
            "type": "Vre",
            valueOf(a47, a48) {
                return -4294967297n;
            },
            ..."Vre",
            valueOf() {
                return this;
            },
            4: "Vre",
            toString(a51, a52, a53) {
                return a51;
            },
            162: "Vre",
            getFullYear(a55, a56, a57) {
                return a57;
            },
        };
        return v34;
    }
    f28();
    %OptimizeFunctionOnNextCall(f28);
    try { v20["find"](..."find", a26, ...v19, ...v20); } catch (e) {}
    return arguments;
}
f22(-2147483649, -2147483649, -4294967297n, 522675525n, v5);
6 % 6;
new Uint8Array(6);
new Int32Array(0);
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = a73?.constructor;
    try { new v75(a71); } catch (e) {}
    function f78(a79, a80, a81, a82) {
        const o86 = {
            ["42776"](a84, a85) {
            },
        };
        return a79;
    }
    const v87 = a74?.constructor;
    try { new v87(BigUint64Array); } catch (e) {}
}
const v89 = new F69(F69, F69, F69, F69);
try { ("minor").link(F69); } catch (e) {}
-1.7976931348623157e+308 * -1.7976931348623157e+308;
const v94 = -1.7976931348623157e+308 & -1.7976931348623157e+308;
"minor" ** -724330360;
function F98() {
    if (!new.target) { throw 'must be called with new'; }
}
v94 == v94;
function f101() {
    const v103 = new Date();
    const v105 = new Set();
    v105.add(v103);
    class C111 {
        set g(a113) {
            -11 || a113;
        }
    }
    -2.0 >> -2.0;
    const v120 = new Uint8ClampedArray("minor", v94, v94);
    v120[1];
    return v89;
    const v122 = [Uint8ClampedArray,Uint8ClampedArray];
    for (let i124 = 0; i124 < 2;) {
    }
    class C130 extends v122.constructor {
        constructor(a132, a133, a134, a135) {
        }
        /*
        constructor(a137) {
            "atan2" ** "minor";
        }
        */
    }
    return -1.7976931348623157e+308;
}
const v140 = [];
try { v140.with(v140, v140); } catch (e) {}
new Float64Array(1073741824, -1.4618325192014402e+308);
try { Int32Array.of(); } catch (e) {}
%PrepareFunctionForOptimization(f101);
f101();
%OptimizeFunctionOnNextCall(f101);
const v148 = v13();
v148.b = v148;
