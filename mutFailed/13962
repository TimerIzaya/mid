-1073741824 + -1073741824;
[-1381325384,-40776,268435441,14,0,-36650,65535,556280884];
const v8 = [65536,11,44432];
[-536870912,1073741825,-44367,-9223372036854775808,-14,1,699691855,-15];
-11;
function F17() {
    if (!new.target) { throw 'must be called with new'; }
    function f19(a20, a21) {
        const o22 = {
        };
        return v8;
    }
    const v23 = f19();
    function f24() {
        return this;
    }
    f24.caller = f24;
    const v26 = ~65535;
    const v28 = new Float32Array(218);
    for (const v29 of v28) {
        (v29 >>> v29) <= v26;
        Object.defineProperty(v23, Float32Array, { configurable: true, enumerable: true, get: f19, set: f24 });
    }
}
const v32 = F17.length;
const v33 = new F17();
let v34;
try { v34 = v32.constructor(); } catch (e) {}
const v35 = v33.constructor;
try { new v35(); } catch (e) {}
new v35(v35, v35, v33, F17, v33);
const v38 = new v34();
const v39 = v38?.constructor;
try { new v39(); } catch (e) {}
