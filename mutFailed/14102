[];
const v3 = new Float64Array(2402);
v3[2367] = v3;
v3[22] = v3;
const v6 = new Uint8ClampedArray(536870889);
try { v6.find(2402); } catch (e) {}
const v9 = -1;
new Uint32Array(1);
-1073741824 - -1073741824;
-1073741824 >> -1073741824;
const v17 = [];
try { v17.some(Uint32Array); } catch (e) {}
const v19 = [v17,1,Uint8ClampedArray,Uint8ClampedArray];
class C21 extends Map {
}
C21.length;
const v23 = C21.length;
v23 >> v23;
const v25 = new C21();
const v26 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
class C30 extends Int32Array {
    [Set] = true;
    [v26];
}
new C30();
try { v25.get(v17); } catch (e) {}
const v33 = new C21(v19);
const v34 = new C21(v33);
v34.size = v34;
const v37 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v39 = Uint32Array.name;
try { v39.trimRight(); } catch (e) {}
const v41 = new Uint32Array();
const v43 = [601759695];
v43.g = v43;
const v44 = [1073741824,1073741823,1376142744,1073741825];
function f46(a47, a48, a49, a50) {
    try { a47.toLocaleString(); } catch (e) {}
    const v52 = a47?.constructor;
    v52.prototype = v52;
    let v53;
    try { v53 = v52(); } catch (e) {}
    try { v52(); } catch (e) {}
    arguments[0];
    const v57 = arguments.length;
    -v57;
    Object.defineProperty(v25, "e", { configurable: true, enumerable: true, value: f46 });
    const v60 = v33["entries"](a49, ...v34, BigUint64Array, ..."entries", a48, v57);
    const v62 = new Float32Array();
    try { v62.subarray(Uint8ClampedArray, v9); } catch (e) {}
    new BigUint64Array();
    const v67 = new Date();
    v67.setSeconds(v67, "jFd1");
    const v69 = v62?.entries;
    try { new v69(); } catch (e) {}
    try { ("e").codePointAt(v19, v39); } catch (e) {}
    class C73 {
    }
    C73.e = C73;
    class C74 {
    }
    const v75 = C74.name;
    try { v75.anchor(v75); } catch (e) {}
    Symbol.match = Symbol;
    const v78 = Symbol.toStringTag;
    v33[v78] = v78;
    function f79() {
        let v81;
        try { v81 = ("Vre").charAt(4096); } catch (e) {}
        let v82;
        try { v82 = v81.lastIndexOf("Vre", a47); } catch (e) {}
        const v83 = v82 !== v82;
        v83 || v83;
        let v85;
        try { v85 = ("Vre").codePointAt(v37); } catch (e) {}
        const v86 = v85 - v85;
        v86 == v86;
        v85 ^ v85;
        let v89 = Float64Array;
        try { v89(v81, v83, f46); } catch (e) {}
        let v91;
        try { v91 = v89.from("e"); } catch (e) {}
        const t82 = [-3.0];
        t82.length >>>= 213;
        new Uint8ClampedArray(129);
        try { v91.with(-4294967297n, -4294967297n); } catch (e) {}
        v89 = a48;
        let v98 = v37.length;
        v98 | v98;
        new Int8Array();
        const o102 = {
        };
        class C103 {
            constructor(a105, a106, a107) {
                for (let v108 = 0; v108 < 5; v108++) {
                    function f110() {
                        const o118 = {
                            [-4294967297n](a112, a113, a114, a115) {
                                eval(C103);
                            },
                        };
                        return f110;
                    }
                    f110();
                    %OptimizeFunctionOnNextCall(f110);
                }
            }
        }
        const v120 = v98++;
        function F121(a123, a124, a125) {
            if (!new.target) { throw 'must be called with new'; }
            const v126 = this.constructor;
            try { new v126(); } catch (e) {}
            this.e = a125;
        }
        class C128 {
        }
        let v129;
        try { v129 = C128(); } catch (e) {}
        for (let v130 = 0; v130 < 5; v130++) {
            new F121(undefined, v129);
        }
        try {
        } catch(e133) {
        }
        const o161 = {
            268435439: v43,
            ..."e",
            n(a135, a136) {
                return a136;
            },
            m(a138) {
                return v120;
            },
            m(a140) {
                return Map;
            },
            [f79]() {
            },
            ["entries"](a143, a144) {
            },
            valueOf(a146, a147) {
                return a146;
            },
            get d() {
                return v37;
            },
            [v44](a150, a151, a152) {
            },
            "toPrimitive": v53,
            get f() {
                return this;
            },
            [-4294967297n](a155, a156, a157, a158) {
                eval(a157);
            },
        };
        return v33;
    }
    function f162() {
        function F164() {
            if (!new.target) { throw 'must be called with new'; }
            const v166 = this.constructor;
            try { v166(v166, v166); } catch (e) {}
            try { new v166(); } catch (e) {}
        }
        new F164();
        new Int8Array(1073741823);
        return 1073741823;
    }
    try { new f79(); } catch (e) {}
    const v173 = f79();
    try { v173.get(a48); } catch (e) {}
    const v176 = Array();
    let v177;
    try { v177 = v176.findLast(f46); } catch (e) {}
    v176.unshift("entries", v60, "entries", v177);
    let v180;
    try { v180 = Int8Array.of(); } catch (e) {}
    let v181;
    try { v181 = v180.join(v19, v180); } catch (e) {}
    try { v181.toLowerCase(); } catch (e) {}
    const v183 = new Int8Array(v43, v62, C30);
    v183.a = v183;
    const v185 = v183.buffer.slice();
    Int32Array.prototype = Int32Array;
    try { Int32Array(v185, arguments, -4294967297n); } catch (e) {}
    function f188(a189, a190, a191, a192) {
        return a191;
    }
    const v193 = new Int32Array();
    const o194 = {
    };
    return v181;
    try { ReferenceError.set(); } catch (e) {}
    const v197 = v193?.keys;
    try { new v197(); } catch (e) {}
    const v199 = v193[3];
    let v200 = v199 + v199;
    v200--;
    for (let v202 = 0; v202 < 5; v202++) {
        v202 + v202;
    }
    try { v44["find"](..."find", a50, ...v43, ...v44, ...522675525n); } catch (e) {}
}
f46.g = f46;
for (let v206 = 0; v206 < 10; v206++) {
    v206 << v206;
    f46(v41);
}
%OptimizeFunctionOnNextCall(f46);
f46(Map, Map, v34, v34);
