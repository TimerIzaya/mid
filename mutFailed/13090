const v2 = new Int16Array(1024);
let v5;
try { v5 = new Float32Array(Float32Array, 1024, Int16Array); } catch (e) {}
v5[1];
const v7 = new Float32Array(4096);
9 * 9;
try { new BigInt64Array(Float32Array, v2, v7); } catch (e) {}
const v12 = new BigInt64Array(9);
v12[5];
function f14(a15, a16) {
    a15.name;
    a16 + a16;
    a16 + a16;
    const o24 = {
        get e() {
            for (let v21 = 0; v21 < 32; v21++) {
                this["p" + v21] = v21;
            }
            return this;
        },
        "e": a16,
        "h": 9,
    };
    return o24;
}
try { f14.bind(Int16Array); } catch (e) {}
const v27 = f14(Int16Array, 1024).e;
v27 | v27;
const v29 = f14(v12, 9);
f14(v29, 4096);
class C31 {
    constructor(a33, a34, a35) {
        a34.name = a34;
        try { new a35(v29, v29, this); } catch (e) {}
        const v37 = this?.__defineGetter__;
        try { new v37(f14, a33); } catch (e) {}
        let v39;
        try { v39 = a34.toString(); } catch (e) {}
        v39[926];
        a35.prototype;
        for (let v42 = 0; v42 < 5; v42++) {
            v42 === v42;
            function f45() {
                const o53 = {
                    [-4294967297n](a47, a48, a49, a50) {
                        eval(C31);
                    },
                };
                return f45;
            }
            f45.d = f45;
            f45();
            %OptimizeFunctionOnNextCall(f45);
        }
    }
}
new C31(C31, C31, C31);
