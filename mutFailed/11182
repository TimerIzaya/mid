const v0 = [172.54151533879417,-8.192552906955425e+307,946934.3485153867,1000.0,-9.189764504061834,-303.95814000269,-1e-15,-2.820724231029963e+307];
const v1 = [1000000000.0,-5.0];
const v2 = [2.220446049250313e-16,-361.378822420853,-1.7976931348623157e+308,-274427.5309776269,-8.172682740567755];
function f3(a4, a5) {
    const v7 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
    const t5 = 2.0;
    delete t5[268435456];
    try { v2.apply(v1, v2); } catch (e) {}
    const v12 = [];
    try {
        v12.some();
    } catch(e14) {
        for (let v16 = 0; v16 < 500; v16++) {
            let v17 = undefined;
            const o18 = {
            };
            v17 = -2;
        }
        eval();
    }
    v7 & -2;
    function F21(a23, a24, a25, a26) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v27 = new F21(F21, F21, F21, F21);
    for (let v28 = 0; v28 < 25; v28++) {
        v27["p" + v28] = v28;
    }
    const o91 = {
        set f(a32) {
            try { a4.map(a32, v1); } catch (e) {}
            const v34 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
            try { this("Hyo9"); } catch (e) {}
            function F37() {
                if (!new.target) { throw 'must be called with new'; }
            }
            let v41;
            try { v41 = Uint32Array.apply(F37); } catch (e) {}
            function F42(a44, a45, a46, a47) {
                if (!new.target) { throw 'must be called with new'; }
                const v48 = a45.constructor;
                const v50 = new Set();
                const v51 = v50.keys;
                let v52;
                try { v52 = v51(Proxy, v48, -2, a44); } catch (e) {}
                function F53(a55, a56) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                    } catch(e57) {
                    }
                    try {
                        this.h = v50;
                    } catch(e58) {
                    }
                    try {
                        const v59 = v50[this];
                        try {
                            new F53(v59, -268435456n);
                        } catch(e62) {
                        }
                    } catch(e63) {
                    }
                    switch (-2) {
                        case v52:
                            v48[5] = v41;
                            break;
                    }
                }
                new F53();
                new F53();
                new F53(a45, a46);
            }
            const v67 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
            class C68 {
                constructor(a70, a71) {
                    super[v67] = v34;
                }
            }
            const v72 = new C68(v34, v67);
            function f73(a74) {
                return C68;
            }
            const v77 = [v72];
            const o78 = {
                "arguments": v77,
                "type": "function",
            };
            new Worker(f73, o78);
            function f81() {
            }
            class C82 extends f81 {
                constructor(a84, a85, a86) {
                    super();
                    for (let v87 = 0; v87 < 100; v87++) {
                        f81();
                    }
                }
            }
        },
        "g": a4,
        ...v1,
        ...v2,
        __proto__: a5,
        8: v2,
    };
    return o91;
}
function f93() {
    -4294967295 === -4294967295;
    return -4294967295;
}
const v96 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
v96.copyWithin(1391012384, 2147483649, -1628561190);
f3(v1, v1);
f3(v2, v2);
f3(v0, v0);
const o116 = {
    get f() {
        return this;
    },
    p(a114, a115) {
    },
};
const o117 = {
};
function F118(a120, a121, a122, a123) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v127 = 0; v127 < 100; v127++) {
        const o131 = {
            968: undefined,
            [268435439n]: 2105444095n,
            __proto__: o117,
            "g": a122,
            "b": -4294967296n,
            "f": this,
            valueOf(a130) {
                return v127;
            },
        };
    }
}
class C134 {
}
class C135 {
    constructor(a137, a138, a139, a140) {
        try { a139(...a137, "e", a140, a140, ...C134); } catch (e) {}
        return arguments;
    }
}
class C143 extends Int8Array {
    [12];
    m(a145, a146, a147, a148) {
        v0.#e;
        a146.#e = -1628561190;
    }
}
new C143(1564);
function f158() {
    return WeakMap;
}
function f159() {
    return 12;
}
const v160 = [601759695];
const v161 = [1073741824,1073741823,1376142744,1073741825];
function f163(a164, a165, a166, a167) {
    f159();
    let v170;
    try { v170 = v161["find"](..."find", a167, ...v160, ...v161, ...522675525n); } catch (e) {}
    Array(4087);
    return Array;
    2147483649 < 4087;
    const v175 = v170 <= a166;
    v175 && v175;
}
for (let v177 = 0; v177 < 10; v177++) {
    f163();
}
class C180 {
    static {
        for (let v182 = 0; v182 < 25; v182++) {
            function f183() {
                return C180;
            }
            const v184 = [601759695];
            const v185 = [1073741824,1073741823,1376142744,1073741825];
            function f187(a188, a189, a190, a191) {
                function f193() {
                    return a188;
                }
                const v194 = f183();
                const v196 = new Int8Array();
                const v199 = new Uint32Array(4);
                [v199];
                const v203 = BigUint64Array * 536870887;
                v203 ** v203;
                function f205(a206, a207) {
                    return v194;
                }
                f205();
                const v209 = v196.buffer;
                Object.defineProperty(v209, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v209.slice(2147483648);
                %OptimizeFunctionOnNextCall(f193);
                let v214;
                try { v214 = v185["find"](..."find", a191, ...v184, ...v185, ...522675525n); } catch (e) {}
                Symbol("find");
                const v218 = new Uint8ClampedArray();
                const o219 = {
                    ...v218,
                };
                v214 <= a190;
                return arguments;
            }
            for (let v221 = 0; v221 < 5; v221++) {
                f187(this, v221, v221, v221);
            }
        }
    }
}
