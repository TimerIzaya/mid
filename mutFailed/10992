function f0() {
    const o21 = {
        [6.933949564213394e+307](a5, a6) {
            try { a5(..."A", 6.933949564213394e+307, 37835, a6, this); } catch (e) {}
            return a5;
        },
        o(a9) {
            try {
                new BigInt64Array(4046);
                const o16 = {
                    "type": "function",
                };
                const v17 = new Worker(Date, o16);
                v17.getMessage();
                ("A").split();
            } catch(e20) {
            }
            return a9;
        },
    };
    return o21;
}
const v22 = f0();
class C27 {
    constructor(a29, a30, a31, a32) {
        a32[this] = a32;
    }
}
const v33 = new C27(-1.461653635104799e+308, -1.461653635104799e+308, -1.0, -5.0);
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor;
    try { new a36(C27, -1.0); } catch (e) {}
    const v41 = a37.constructor;
    try { new v41(a37, v33, this, a36); } catch (e) {}
}
new F34(-3.0, -5.0);
const v44 = f0();
f0();
/(?:a+)*\x0fEo*/visy;
const v47 = /\p{Script=Greek}/gud;
const v48 = /TE(x)(x)(x)\3*/gumy;
[[v48,"h",[v48,v47,"h",v22],"number",v44],v47,f0,"g","number"];
new Set();
const t44 = [1073741823,64,-192774235];
t44.length = 127;
Float32Array[1] = -1e-15;
const v62 = new Uint8Array();
class C64 extends Float32Array {
    constructor(a66, a67, a68) {
        super(a68);
    }
}
new C64(1, v62, Float32Array);
