function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.g = F0;
    try {
        this.g = 9007199254740991;
    } catch(e3) {
    }
}
let v4 = 1024;
const v6 = [-8.170245459945505,-9.53786179441455,4.0,-519.2853732206779,625197.7996533306];
try { v6.fill(v6); } catch (e) {}
const v8 = [-494407.199634183,0.6127672924664167,-85.60764064198793,1.4954577398132937e+308,-831252.5110682796,-2.2250738585072014e-308,0.6226417241742689,NaN,-3.0];
let v10 = Float64Array;
const v11 = v10.prototype;
const v12 = new v10(1880);
let v13 = undefined;
v13 = -9223372036854775808;
v4 *= -9223372036854775808;
v6.__proto__ = v12;
v10 >>>= v10;
delete v8[v4];
new F0();
const v16 = new F0();
new v16();
let v19 = 512n;
v19--;
0.0 * 0.0;
[4,-4418,-1632316911,1024,30114];
[-13,1474067713,29567,-5,-9223372036854775807,-9223372036854775808,1,1587623841];
const v29 = [-1182743106,-10];
const v32 = new BigInt64Array(8);
255 === 255;
const v36 = new Uint16Array(255);
function f37(a38, a39) {
    v36.buffer |= 1000000000.0;
    a38 = 8;
    return a39;
}
v29.constructor = f37;
const v40 = v36?.constructor;
let v41;
try { v41 = v40(v32, v36, 255); } catch (e) {}
const v42 = v41[154];
512 !== 512;
const v45 = 512 % 512;
v45 + v4;
const v48 = new Int32Array(512);
const v49 = [v42,BigInt64Array];
[Int32Array,Uint16Array,Uint16Array];
const t47 = [v36,Uint16Array,512,Int32Array];
t47[1] = v11;
const v52 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
const v53 = v45.constructor();
v53 + v53;
("p")[0];
try { ("reverse").charCodeAt(v48); } catch (e) {}
0 << 0;
switch (v52) {
    case v41:
        v52[v49];
        v48.valueOf = v53;
        break;
}
