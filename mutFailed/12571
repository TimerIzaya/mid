new Set();
const v6 = new Uint8Array(2707, 2707, 128);
let v7;
try { v7 = v6.findLastIndex(v6, v6); } catch (e) {}
const o8 = {
    [v7]: Uint8Array,
};
const v10 = [];
const v11 = [v10,v10,v10,v10];
const v12 = [v11,v11,v11];
function f13() {
    return v12;
}
const v14 = f13();
new Float32Array(3678);
new Uint8ClampedArray(6);
new Int16Array(256);
new Uint8Array(255);
async function f26(a27, a28, a29, a30) {
    const o33 = {
        "maxByteLength": 1073741823,
    };
    const v35 = new ArrayBuffer(208, o33);
    new DataView(v35);
    await Set;
    return DataView;
}
f26(255, 3678, 1153, 1153);
new Int32Array(1153);
const v43 = new BigUint64Array();
v43[3408] = v14;
const o44 = {
};
new Int8Array(57);
const v50 = Symbol.iterator;
Math[v50] = v50;
class C51 {
}
const v52 = new C51();
const v53 = [v52];
class C54 {
    constructor(a56, a57, a58) {
        function f59(a60, a61, a62) {
            v53.copyWithin();
            try {
                f59(a62, a61, 252859902);
            } catch(e66) {
            }
            const v67 = this >> 252859902;
            v67 - this;
            return -v67;
        }
        f59();
    }
}
class C71 extends C54 {
}
new C71();
Math.log1p(2.220446049250313e-16);
