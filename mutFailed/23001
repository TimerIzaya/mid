new Uint8Array(946);
const v5 = new Uint16Array(29);
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
}
const v12 = new F6();
const v13 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C14 {
}
const v16 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v17 = [601759695];
function f19(a20, a21, a22, a23) {
    function f24() {
        let v27 = Float64Array;
        v27 = a21;
        b = v17;
        v13.length;
        try {
            v13.forEach(a21);
        } catch(e30) {
        }
        const v31 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v33 = Symbol.toPrimitive;
        const o39 = {
            toString(a35, a36) {
                const v37 = a23 && a21;
                a35 *= v33;
                v37 <= v31;
                return f24;
            },
        };
        const o60 = {
            "c": -4294967297n,
            [522675525n](a42, a43) {
            },
            "c": v17,
            valueOf(a45, a46) {
                return a45;
            },
            "b": -4294967295,
            [-4294967297n](a48, a49, a50, a51) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v16,
            ...v12,
            [v33]() {
            },
            "type": C14,
            ..."Vre",
            valueOf(a54, a55) {
                return a22;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            toString(a57, a58, a59) {
                return C14;
            },
            5: -4294967295,
            6: -268435456,
        };
        v33 = v27;
        new Float32Array(1334);
        new Float64Array(3);
        new Uint16Array(2);
    }
    f24();
    %OptimizeFunctionOnNextCall(f24);
    return v16;
}
for (let v71 = 0; v71 < 5; v71++) {
    f19();
}
new Uint16Array(512);
class C76 extends Uint16Array {
    set h(a78) {
        this[Symbol.iterator] = v5;
        512 ** a78;
    }
    static #m(a83, a84) {
        super.byteOffset = a84;
        v5[214];
        return Uint8Array;
    }
    10 = Uint16Array;
}
new C76();
new C76();
new C76();
[140.97420403760816,-Infinity,6.948938749129638,-4.4635030356454135e+307,4.0996174560711666e+307];
[681009.9121437473,1.2186005485601464e+308,-630315.1969117124,-180.2427731570624,-710539.5230793034,1.7976931348623157e+308,408.5031876308883];
[-961.1227356795711,-1.7976931348623157e+308,-1000.0,-1000.0,-223.8842970609221,0.0,0.18817935274098296,-1.0];
const v98 = new Uint8ClampedArray(8);
v98.lastIndexOf(73962578);
