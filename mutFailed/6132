function f0() {
    const o22 = {
        "b": "e",
        "h": "boolean",
        "a": "e",
        valueOf(a5) {
            return -65537;
        },
        ["e"](a7, a8, a9) {
            super[-65537];
        },
        __proto__: "boolean",
        ..."boolean",
        set c(a12) {
            try {
                this.valueOf = a12;
                try {
                    const o13 = {
                    };
                } catch(e14) {
                }
            } catch(e15) {
                const v17 = new Uint8ClampedArray();
                const o18 = {
                    ...v17,
                };
            }
        },
        "c": "boolean",
    };
    return o22;
}
const v23 = f0();
f0();
const v25 = f0();
const v28 = new Array(10);
[-3.0];
const v30 = [2.0,-2.8704549365094877e+306,-2.2250738585072014e-308,1.0,608643.4360038617,-2.094182692329145];
const v31 = [0.0,5.0,0.21244985054039434,-Infinity,1000.0,-13795.189123376505,-596.5219876350774,-5.115047460327824e+307,-218.38299502559312,152.53206447771117];
/xyz{0,1}*/gvims;
/[^123](?:ab)?xyz{1,}?/vims;
/(a\scLs(\2)(\1)[\ca])/vmy;
function f35(a36, a37, a38, a39) {
    const o57 = {
        11: Array,
        [v31](a41, a42, a43) {
            try {
                super.p(a41);
            } catch(e45) {
            }
            const v47 = Symbol.iterator;
            const o56 = {
                [v47]() {
                    let v49 = 10;
                    const o55 = {
                        next() {
                            v49--;
                            const v53 = v49 == 0;
                            const o54 = {
                                "done": v53,
                                "value": v49,
                            };
                            return o54;
                        },
                    };
                    return o55;
                },
            };
            return a36;
        },
    };
    return o57;
}
const v58 = f35(v30, f35, v25, v25);
f35(v58, v28, f35(v58, v58, 10, v23), v23);
function f61() {
}
function f62() {
    const o86 = {
        "b": f61,
        [f61]: f61,
        valueOf() {
            let v65 = -(-1e-15);
            v65--;
            const t83 = /a\Sc?/giy;
            t83.valueOf = f61;
            try {
                f61();
            } catch(e69) {
                Symbol("bZ");
                const v73 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                class C74 {
                    constructor(a76, a77, a78, a79) {
                        const v80 = this?.constructor;
                        try { new v80(v73, a78, a78); } catch (e) {}
                        a77 >>> a77;
                        0.061410412759498656 >>> 0.061410412759498656;
                    }
                }
            }
            try {
                this.valueOf = f61;
            } catch(e85) {
            }
            return f61;
        },
    };
    return o86;
}
f62();
const v88 = f62();
const v89 = v88?.b;
try { new v89(); } catch (e) {}
new Uint8Array(268435440);
function F94() {
    if (!new.target) { throw 'must be called with new'; }
}
class C96 extends F94 {
}
Date[-22872n] = Date;
const v100 = ("function").length;
const v101 = f62();
function F102(a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    const v106 = this?.constructor;
    const o107 = {
    };
    new Int32Array(Symbol);
    try { new v106(a104, a104); } catch (e) {}
    new Uint16Array(v100);
    const v115 = new Set();
    function F116(a118, a119) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a118;
        } catch(e120) {
        }
        try {
        } catch(e121) {
        }
        v115[this];
        try {
            new F116(a119, v115);
        } catch(e124) {
        }
    }
    const v125 = [];
    const o126 = {
        ...v125,
    };
    try {
        this.b = a105;
    } catch(e127) {
    }
    try {
        this.c = a104;
    } catch(e128) {
    }
}
const v129 = new F102(v101, v101);
new F102(v88, v129);
new F102(v101, v129);
-6n * -6n;
function f137(a138, a139) {
    Math.atan2(Math, f137);
    return f137;
}
new Promise(f137);
1713234876 === 1713234876;
function f146(a147, a148) {
}
f146();
f146(-1748, 1713234876);
function F151(a153, a154) {
    if (!new.target) { throw 'must be called with new'; }
    const v155 = this.constructor;
    v155.f = v155;
    function f159() {
        function F160() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C164 extends Set {
        }
        const v165 = new C164();
        const v166 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v167 = [601759695];
        const v168 = [1073741824,1073741823,1376142744,1073741825];
        function f169(a170, a171, a172, a173) {
            a172--;
            function f176() {
                const v178 = ("Vre")?.constructor;
                try { v178(v165); } catch (e) {}
                const o185 = {
                    "e": -4294967295,
                    ...v166,
                    ..."Vre",
                    "c": a173,
                    "f": "-1073741824",
                    84: arguments,
                    ..."Vre",
                    valueOf(a183, a184) {
                        return a170;
                    },
                    ..."Vre",
                    4: "Vre",
                    "c": -268435456,
                    5: -4294967295,
                    6: -268435456,
                };
            }
            try { f176(); } catch (e) {}
            f176();
            %OptimizeFunctionOnNextCall(arguments);
            let v189;
            try { v189 = v168["find"](..."find", a173, ...v167, ...v168, ...4294967297n); } catch (e) {}
            const v190 = v189 <= a172;
            v190 || v190;
        }
        return f159;
    }
}
