class C3 {
    4;
    #m(a5, a6) {
        function f7() {
            return this;
        }
        return 0.8251326113383289;
    }
    n(a9) {
        -2.0 << -2.0;
        function F11(a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            const v16 = this.constructor;
            try { new v16(); } catch (e) {}
        }
        new F11(F11, F11, F11);
        const v22 = new BigUint64Array(10);
        for (const v24 in v22) {
            new Float64Array(2147483647);
        }
        return -433.30212838152613;
    }
}
let v29;
try { v29 = new C3(); } catch (e) {}
const v30 = new C3();
const v31 = v30[4];
new C3();
new C3();
const v34 = [-16,20772,-4,1650610791,255,9007199254740990,-1];
[6,1120927120,256,-9007199254740990];
try { v31(v29, 0.8251326113383289); } catch (e) {}
const o37 = {
};
const v39 = new Proxy("species", o37);
const v40 = [8,1073741824,6,-12,-1652573835,-2104819202,-8473];
let v41;
try { v41 = v40.sort("species"); } catch (e) {}
const v42 = async (a43, a44) => {
    let v45;
    try { v45 = new a44(v39, a44, a43); } catch (e) {}
    await (v45 | a43);
    return a43;
};
function f48() {
    return v40;
}
const v52 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
let v53;
try { v53 = v52.flat(); } catch (e) {}
function f57(a58, a59) {
    const o60 = {
        "a": a58,
        "c": v34,
    };
    return o60;
}
f57(v41, v40);
f57(v53, v34);
f57(v53, v52);
2.220446049250313e-16 > 2.220446049250313e-16;
const v65 = v52.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
v65.g = v65;
new Uint8ClampedArray(v65);
