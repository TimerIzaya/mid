function f3() {
    return -11553n;
}
class C4 extends f3 {
    p(a6, a7) {
        a6[f3] = f3;
        new BigUint64Array(256);
        new Uint8Array(4096);
        new a7(16);
        return -11553n;
    }
}
const v17 = new C4();
const v18 = new C4();
new C4();
function f20() {
    return 257n;
}
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    let v25 = 0;
    v25--;
    [v25];
    const v29 = new f3();
    for (let i = 0; i < 5; i++) {
        v29.toString = Array;
    }
    try {
        this.b = a23;
    } catch(e30) {
    }
    try {
        this.c = f3;
    } catch(e31) {
    }
    try {
        this.e = -124255686n;
    } catch(e32) {
    }
}
const v33 = new F21(257n, v18);
new F21(-11553n, v17);
new F21(-124255686n, v33);
const v37 = new BigInt64Array();
class C39 extends Uint16Array {
}
const v40 = new C39();
const v42 = new Float32Array();
const v43 = [1073741824,1073741823,1376142744,1073741825];
const v46 = new Int32Array(11);
function f47(a48, a49) {
    return v46;
}
const v50 = f47();
v50 >> v50;
for (let v52 = 0; v52 < 5; v52++) {
    function f53(a54, a55) {
        a55[1] = f53;
    }
    f53(v37, v40);
    f53(v43, v42);
}
function f58(a59, a60, a61, a62) {
    try { a61(); } catch (e) {}
    const v64 = new Float32Array();
    Object(v64);
    const v67 = v64;
    const v68 = a61.fill(...v67);
    v68.g = v68;
}
for (let v69 = 0; v69 < 500; v69++) {
    f58();
}
