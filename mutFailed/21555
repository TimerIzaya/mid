function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 10;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8) {
    try { v5.toSpliced(a8, F0, a8); } catch (e) {}
    return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
}
v6.toString = f7;
function f14(a15) {
    const v16 = a15?.constructor;
    try { new v16(); } catch (e) {}
    const o18 = {
        "d": v4,
        1824: v6,
        [a15]: a15,
        "h": v5,
        "b": F0,
        "f": F0,
        "g": F0,
        "c": v4,
        ...v5,
        ...v4,
    };
    return o18;
}
const v19 = f14(v6);
const v20 = f14(v6);
f14(v4);
[0.3369746912722752,0.781630452998678];
const v23 = [0.43476863709863367,3.0,NaN,-1.3512285729978484e+308,-2.220446049250313e-16,0.3001158493889651,-1000000000.0,-1e-15,221961.0779879829];
const v24 = [5.0,197.4744356864628,8.343624009698967,0.5225823298831972,1.4948702573864843,-1.3195489182000047e+308,1000.0,0.5334945954738101,1000000000.0];
try { v24.filter(F0); } catch (e) {}
function f26() {
    ("-536870912").normalize;
    const v29 = ("-536870912").g;
    const v32 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v33 = 0; v33 < 5; v33++) {
        function f34() {
            try {
                v32.forEach();
            } catch(e36) {
                e36.a = e36;
            }
            const v38 = Symbol.toPrimitive;
            v38.description;
            Symbol.for();
            return v38;
        }
        f34();
        %OptimizeFunctionOnNextCall(f34);
    }
    const v42 = new Uint16Array(209);
    v42[145] = v29;
}
[140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
[0.0,2.439947332797196];
const v45 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
try { ("Z").endsWith(v6); } catch (e) {}
v45 <= "Z";
const v52 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
try { v52.every(v19); } catch (e) {}
function f54(a55) {
    a55 ^ a55;
    return 36002;
}
function f57(a58, a59) {
    return f54;
}
const v61 = new Promise(f57);
v61[v52] += 36002;
const v64 = new BigInt64Array(1000);
try { v64.find(v20); } catch (e) {}
new BigUint64Array(127);
class C71 {
}
C71.e = C71;
class C72 extends C71 {
    ["getPrototypeOf"] = C71;
}
C72.prototype = C72;
const v73 = new C72();
v73.__proto__ = v73;
try { (-9007199254740992).log2(-9007199254740992); } catch (e) {}
class C76 extends f26 {
}
C76.length;
for (const v78 in C76) {
    class C79 {
    }
    const v81 = new C79();
    v81.toString = Symbol;
    const o86 = {
        [v81](a83, a84, a85) {
        },
    };
    function F87(a89, a90, a91) {
        if (!new.target) { throw 'must be called with new'; }
        const v94 = new Float32Array(this, a91, a91);
        const v96 = new Uint8Array(268435440);
        new Uint8ClampedArray(129);
        v96[6] = v94;
    }
}
let v102 = 10;
for (;
    (() => {
        const v103 = v102--;
        v103 - v103;
        return v103;
    })();
    ) {
}
Int8Array.BYTES_PER_ELEMENT = Int8Array;
class C106 {
}
const v107 = C106?.constructor;
try { new v107(C72); } catch (e) {}
function* f109(a110, a111) {
}
try { f109.apply(v73, 127); } catch (e) {}
new Int8Array(268435456);
for (let v115 = 0; v115 < 10; v115++) {
    v115 + v115;
    3811 == 3811;
    const v120 = Float64Array.of();
    try { v120.subarray(v120, v23); } catch (e) {}
    const v123 = new Date();
    try { v123.toUTCString(); } catch (e) {}
    v123.setFullYear();
    Array();
}
