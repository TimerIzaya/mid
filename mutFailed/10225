const v2 = new Float64Array(1000);
new Float64Array(9);
const v8 = new Float64Array(128);
class C9 extends Float64Array {
    n(a11, a12) {
        let v13 = "entries";
        let v14 = v8[v13]();
        [v14,v13] = v2;
        return Float64Array;
    }
    #e = Int8Array;
    constructor(a16, a17, a18) {
        super(1000, 128, a18);
        const v20 = Symbol.iterator;
        this[v20] = v20;
        const v21 = a18?.[-1];
        super.h = v20;
        v21?.[8];
        try {
            v8.#e = a18;
        } catch(e23) {
        }
    }
}
new C9(9, 9, 1000);
const v25 = new C9(9, 128, 128);
const v26 = new C9(128, Float64Array, Float64Array);
function f27() {
    const o38 = {
        toString(a32, a33) {
            try {
                super.getMinutes(a33);
            } catch(e35) {
            }
            return "object";
        },
        "type": "boolean",
        set g(a37) {
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": v25,
        ["object"]: f27,
        ..."object",
        ["boolean"]: 1000000000000.0,
        [f27]: f27,
        5: f27,
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o38;
}
Math.tan(-532550611);
const v42 = [8];
const v43 = [-1024,-2147483647,-37738,-2,21596,2147483649,9007199254740992,-2039218916];
class C44 {
    static #f;
    static set f(a46) {
        a46(this, this, a46, v42);
    }
    constructor(a49) {
        this.e = v42;
    }
}
try { Math.reduceRight(4294967295, v43, C44); } catch (e) {}
const v52 = f27();
const v53 = f27();
const v54 = f27();
%VerifyType(v53);
v53 >> f27;
Object.defineProperty(v54, "c", { configurable: true, enumerable: true, set: f27 });
function F56(a58) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f60(a61, a62) {
            const o66 = {
                [122188848n](a64, a65) {
                },
            };
            return o66;
        }
        %PrepareFunctionForOptimization(f60);
        this.b = a58;
    } catch(e67) {
    }
}
const v68 = new F56(v52);
new F56(v53);
new F56(v68);
const v71 = v54[128];
function F73(a75) {
    if (!new.target) { throw 'must be called with new'; }
    a75[128] = a75;
    try {
        this.f = a75;
    } catch(e76) {
    }
    try {
        this.h = a75;
    } catch(e77) {
    }
    try {
        this.d = v52;
    } catch(e78) {
    }
}
F73.e = C44;
new F73(v53);
const v80 = new F73(v54);
v80.d = 128;
new v26(v53);
function f82(a83, a84, a85) {
    a84[128];
    a85[128] = a85;
    const o103 = {
        get d() {
            function f88(a89, a90, a91) {
                'use strict';
                return a89;
            }
            return this;
        },
        ...v80,
        2074850330: a83,
        get a() {
            const o96 = {
                "execution": "async",
                "type": "major",
            };
            const v97 = gc(o96);
            class C98 {
            }
            new C98();
            Array(36862);
            return v97;
        },
        "b": a84,
    };
    o103[2074850330] = o103;
    return o103;
}
const v104 = f82(v54, v54, v52);
const v105 = f82(v53, v53, v104);
v105[2074850330] = v105;
f82(v104, v105, v53);
function F107(a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    const v112 = v25?.constructor;
    try { new v112(F107, F107, f27); } catch (e) {}
    a110.g = a110;
    try {
        this.d = a111;
    } catch(e114) {
    }
    try {
        this.a = a109;
    } catch(e115) {
    }
}
new F107(v53, v54, v53);
try { v71.bind(F73); } catch (e) {}
function f121(a122, a123, a124, a125) {
    const o126 = {
    };
    return o126;
}
Math?.expm1;
