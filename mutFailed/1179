[324.359151989524,Infinity,-1000000000.0];
[0.10593347010390763,0.08710826627912527,-549732.7859054739,5.0,1000000000000.0,-8.917356035847082e+306,-1e-15];
const v2 = [1.7976931348623157e+308,7.312713675382113e+307,1000000000000.0,921290.5477888945,907109.6719787652,0.0,0.8516364437108828];
new Int16Array(16);
new BigInt64Array(127, -1.443948216123091e+308, v2, v2);
new Uint8Array(11);
function f15() {
}
class C16 extends f15 {
}
const t10 = -2.0;
new t10();
new C16();
class C19 {
}
function f24() {
}
const o25 = {
};
function F26() {
    if (!new.target) { throw 'must be called with new'; }
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    function f39() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
    }
    f15();
    const v49 = new Int8Array();
    v49.buffer.slice();
    %OptimizeFunctionOnNextCall(C19);
    let v54;
    try { v54 = v30["find"](..."find", a37, ...v29); } catch (e) {}
    v54 <= a36;
    return arguments;
}
for (let v56 = 0; v56 < 10; v56++) {
    v56();
}
%OptimizeFunctionOnNextCall(f33);
f33();
