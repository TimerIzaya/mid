const v4 = new WeakMap();
const v7 = new Uint8ClampedArray(257);
let v10 = 0;
while (v10 < 1) {
    v4[WeakMap];
    const v15 = Symbol.iterator;
    const o24 = {
        [v15]() {
            let v17 = 10;
            const o23 = {
                next() {
                    v17--;
                    const v21 = v17 == 0;
                    const o22 = {
                        "done": v21,
                        "value": v17,
                    };
                    return o22;
                },
            };
            return o23;
        },
    };
    v10++;
}
const v26 = new BigInt64Array(3132);
const v30 = [WeakMap,WeakMap];
Reflect.apply(v26.reduce, v7, v30);
new BigUint64Array(581);
new Uint8Array(6);
new Float64Array(136);
new Int8Array(30);
new Int8Array(13);
new Uint8Array(3941);
new Float32Array(1406);
const v55 = new Float32Array(165);
new Uint16Array(v55);
