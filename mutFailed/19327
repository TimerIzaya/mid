class C3 {
    constructor(a5, a6) {
        function f7(a8, a9) {
            try {
                this.fuck(a8, true);
            } catch(e12) {
            }
            return a9;
        }
        const v14 = Symbol.toPrimitive;
        a5[v14] = f7;
        a6.repeat = v14;
        try { a6.repeat(268435456, a5); } catch (e) {}
    }
    [-1988695251];
    get f() {
        -2.0432509966925005 * this;
        new BigUint64Array();
        -16268 < 9;
        const v27 = new BigUint64Array(3375);
        let [v28,,v29,...v30] = v27;
        const v31 = -2.0432509966925005 + 268435456;
        Math.acosh(-2.0432509966925005);
        ~v31 >> this;
        return -16268;
    }
}
function f35(a36) {
    -0n;
    return -1988695251;
}
C3[Symbol.toPrimitive] = f35;
const o42 = {
    ...this,
};
function f43(a44, a45) {
    const o51 = {
        __proto__: a44,
        p(a47, a48) {
            48752008 ^ this;
            return this;
        },
    };
    return o51;
}
const v52 = new C3(C3, -1988695251);
v52.repeat = o42;
const v53 = new C3(v52, v52);
v53.repeat = this;
const v54 = new C3(v53, C3);
v54.for = v54;
class C55 extends C3 {
    #d;
    static [C3] = v54;
    constructor(a57, a58) {
        a57.repeat = this;
        super(v54, a58);
        const v59 = this / v54;
        const v60 = v54.__proto__;
        try { a57.for(); } catch (e) {}
        try { a57["m"](v59); } catch (e) {}
        function F64(a66, a67, a68) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F64();
        function f71(a72) {
            a58?.[6];
            Object.defineProperty(v54, v60, { writable: true, configurable: true, get: f35, set: f35 });
            return F64;
        }
        Uint16Array[Symbol.iterator] = f71;
        new Uint16Array(Uint16Array);
        try {
            v54.length = C3;
        } catch(e78) {
            function F79() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v81 = [];
            function F82() {
                if (!new.target) { throw 'must be called with new'; }
                const v84 = this.constructor;
                try { new v84(); } catch (e) {}
                try {
                    this.d = v81;
                } catch(e86) {
                    const v88 = new Set();
                    v88[v88];
                    function f90(a91) {
                        return f90;
                    }
                }
            }
            new F82();
        }
    }
}
const v93 = new C55(v54, v53);
const v94 = new C55(v52, v93);
new C55(v94, v52);
const v101 = new Float64Array();
("p").lastIndexOf(v101);
