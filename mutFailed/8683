new BigInt64Array(1);
new Float64Array(255);
-6;
new Int32Array(6);
function F11(a13) {
    if (!new.target) { throw 'must be called with new'; }
    class C14 {
        constructor() {
            const v16 = this.constructor;
            try { new v16(); } catch (e) {}
            super.f >>= this;
        }
    }
    new C14();
}
9 === 9;
function F23(a25, a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    a25 == a25;
    a26.caller = a26;
    a27 >>> a27;
    const v32 = new Uint8Array();
    const o33 = {
        ...v32,
    };
}
const v34 = new F23(164140152, F23, 164140152, 164140152);
for (let v36 = 0; v36 < 5; v36++) {
    function F37() {
        if (!new.target) { throw 'must be called with new'; }
        this.c = this;
        try {
            this.c = 19793;
            try { Array.of(); } catch (e) {}
            const v42 = Array(19793);
            try { v42.map(this); } catch (e) {}
            for (const v44 of v42) {
            }
            const v45 = [];
            const v47 = Symbol.toPrimitive;
            v45[v47] = Array;
            const v48 = [v45,v45,v45];
            try { Symbol.apply(Symbol, v47); } catch (e) {}
            v48[Symbol.toPrimitive] = Symbol;
            [v48,v48];
            Uint16Array.toString = Array;
        } catch(e54) {
        }
        try {
            this.b = 19793;
        } catch(e55) {
        }
    }
    function f56() {
        class C58 {
        }
        let [...v59] = F37;
        const v62 = new Float64Array(1);
        [v62];
        const v64 = ("Vre").strike();
        v64[11] = v64;
        const v65 = v64.link();
        !v65.includes(164140152);
        const v69 = Array();
        const v71 = v69.unshift(v34, v36, F23, v36, v69.pop());
        v71 === v71;
        const v75 = Array?.constructor;
        try { new v75("a", "a"); } catch (e) {}
        new Uint8Array();
        const v79 = new Set();
        try { v79.add(522675525n); } catch (e) {}
        const v81 = v79.add();
        try { v81.add(Array); } catch (e) {}
        v81.entries();
        class C84 {
        }
        const v85 = new C84();
        class C88 {
            m(a90, a91) {
                new a91(-1073741824, -268435456, -1073741824, -1073741824, ...a90);
            }
        }
        const v94 = v85?.constructor;
        try { new v94(); } catch (e) {}
        const v96 = v85.hasOwnProperty(v65);
        v96 || v96;
    }
    try { f56(); } catch (e) {}
    f56();
    %OptimizeFunctionOnNextCall(f56);
}
