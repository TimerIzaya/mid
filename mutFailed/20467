function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 128;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
new F0();
new Uint16Array(16);
const v15 = v5.g;
try {
    v4.fuck(Uint16Array, "d", -4096n);
} catch(e21) {
}
new Uint16Array(9);
new BigInt64Array(2317);
const v26 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f27(a28, a29, a30, a31) {
    try { a31(); } catch (e) {}
    const v33 = /(?:a*)+q(?<a>.)/guds;
    for (let [i37, i38] = (() => {
            0 * 0;
            return [0, 10];
        })();
        (() => {
            const v39 = i37 < i38;
            v39 && v39;
            return v39;
        })();
        (() => {
            const v43 = i38--;
            v43 >>> v43;
        })()) {
        i37 + i37;
        for (let v48 = 0; v48 < 5; v48++) {
            const v49 = v33[-852635490n];
            Object.defineProperty(v5, "g", { value: v48 });
            v49[0] = v49;
            v33[-1.6457868571194555e+308] = v15;
            Object.defineProperty(v4, "d", { writable: true, enumerable: true, set: f27 });
            const v50 = v33.constructor;
            try { v50(v33, v33); } catch (e) {}
            v26.constructor;
            v33.constructor.lastParen;
            const v56 = [i38,i38,i38,i38,i38];
            v56[4];
            v56 > 8n;
        }
    }
    return a28;
}
for (let v59 = 0; v59 < 5; v59++) {
    f27(v59, v26, v59, f27);
}
