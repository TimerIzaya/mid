const v3 = [-2.0,-1e-15,NaN];
[3.0,-1000000000000.0,-1.7976931348623157e+308,9.83902630019146,-2.0,647756.1430208974,9.761792667739135e+306,-296.0229419136559,-705.3010875651339];
[663.1156846093722,0.9216328545048157];
try { new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray); } catch (e) {}
new Uint8ClampedArray(1662);
4096 ^ 4096;
new BigInt64Array(4096);
function f15() {
    return "28j";
}
try { new f15(); } catch (e) {}
try { new f15(); } catch (e) {}
f15.constructor;
const v21 = new Uint8ClampedArray(2096);
let v22 = v21[1892];
v22--;
const t15 = "symbol";
t15[1] = "symbol";
class C27 {
    static #toString(a29) {
        let v30 = 0;
        while ((() => {
                return 26352;
                for (let v33 = 0; v33 < 5; v33++) {
                    function f36(a37) {
                        const o38 = {
                            ...65536,
                            163: 4,
                        };
                        -o38[163];
                        return f36;
                    }
                    f36(f36);
                    %OptimizeFunctionOnNextCall(f36);
                }
                return v30 < 3;
            })()) {
            Math.random();
            Math.sin(this);
            ++v30;
            Math.clz32(this);
            --v30;
            !1680472700;
            v30++;
        }
        return 7;
    }
}
try { new C27(); } catch (e) {}
try {
    C27.valueOf = "number";
    1922 >>> 1922;
    for (let v56 = 0; v56 < 10; v56++) {
        v56++;
        f15(f15, v56, 1922, v56);
    }
    const o59 = {
    };
    o59.h = o59;
    o59.f = o59;
    o59[10] = o59;
    o59[10] = o59;
} catch(e60) {
}
Math.g = Math;
const v64 = 3 & 7;
const v65 = 7 & C27;
let v66 = Math.log2(13);
const v67 = v66 | v66;
v67 | v67;
const v69 = C27 << 7;
const v70 = v69 - v69;
v70 >> v70;
const v72 = v65 | 13;
const v73 = v72 | v72;
v72 || v64;
const v75 = new C27();
const v76 = v75?.constructor;
try { new v76(); } catch (e) {}
const v78 = new C27();
const v79 = v78?.__lookupGetter__;
try { new v79(v65); } catch (e) {}
try { new v79(v69); } catch (e) {}
const v82 = new C27();
const v83 = v82?.constructor;
try { new v83(); } catch (e) {}
class C85 extends C27 {
    static [v82] = "symbol";
    static [v78];
    static set g(a87) {
        super.d = a87?.["symbol"];
    }
    static 6 = v82;
    static o(a90, a91, a92) {
        super[Uint8ClampedArray];
        try {
            v3.reduce(a91);
        } catch(e95) {
        }
        const v96 = v82[4];
        try {
            new C27(v96);
        } catch(e98) {
        }
        return a91;
    }
}
C85.f = C85;
const v99 = new C85();
const v100 = v99?.constructor;
const o101 = {
};
const v103 = new Date();
const v105 = new Set();
v105.add(v103);
(4096).getUTCMonth(v103, v103, 4096, Date, v103);
try { new v100(); } catch (e) {}
const v109 = new C85();
try { v109.constructor(); } catch (e) {}
const v111 = new C85();
const v112 = v111?.constructor;
try { new v112(); } catch (e) {}
class C114 extends C85 {
    #m(a116, a117, a118, a119) {
        const o120 = {
        };
        try {
            o120.a = this;
        } catch(e121) {
        }
        try {
            const o122 = {
            };
            o122.a = this;
            o122.__proto__ = 7;
        } catch(e123) {
        }
        try {
            const o124 = {
            };
            v75[512];
            [1891187396,9007199254740992];
            [95393129,-268435456,4,10,4294967297,9007199254740992,17223,-2,5,-1780050805];
            [-14,-40854,12,48969,10,1073741823,-4294967296];
            o124.a = this;
            o124.e = 7;
            o124.b = v82;
        } catch(e130) {
        }
        try {
            const o131 = {
            };
            o131.a = this;
            o131.e = 7;
            o131.d = this;
        } catch(e132) {
        }
        const v134 = new Int8Array(Int8Array, Int8Array);
        function f135(a136, a137) {
            return a137;
        }
        Object.defineProperty(v134, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f135 });
        return "symbol";
    }
}
try { new C114(); } catch (e) {}
C114.length = C114;
const v141 = new C114();
const v142 = v141?.constructor;
try { new v142(); } catch (e) {}
const v144 = new C114();
try { v144.hasOwnProperty(v73); } catch (e) {}
3 - 3;
~3;
let v150 = -4.0;
v150++;
let v152 = v69 / v150;
const v153 = v66++;
const v154 = v152--;
v153 ** v69;
const v156 = v152 * v69;
v156 % v156;
const v158 = new C114();
const v159 = v158?.constructor;
try { new v159(); } catch (e) {}
const v161 = v158?.constructor;
try { new v161(); } catch (e) {}
~10;
try { Uint16Array.apply(v141, Uint16Array); } catch (e) {}
Uint16Array.d = Uint16Array;
const v167 = new Uint16Array();
function F168(a170, a171, a172) {
    if (!new.target) { throw 'must be called with new'; }
}
F168.caller = F168;
for (let v175 = 0; v175 < 25; v175++) {
    try { new Array(v79); } catch (e) {}
    const v179 = Array(19793);
    try { v179.toReversed(); } catch (e) {}
    for (let v181 = 0; v181 < 10; v181++) {
        f15(v181, v181);
    }
    const v183 = [-587,-11,-5];
    try { v183.includes(v144); } catch (e) {}
    const v185 = v183.filter;
    try { v185(v179); } catch (e) {}
    let v187;
    try { v187 = v185(); } catch (e) {}
    const v188 = [1073741824,1073741823,1376142744,1073741825];
    try { Math.round(Math); } catch (e) {}
    31053 !== 31053;
    -(13 * (31053 || 13));
    13 || 13;
    function f197(a198, a199, a200, a201) {
        a200.g = a200;
        -a198;
        const v203 = a199 >>> a199;
        v203 & v203;
        const v205 = a198 >>> a198;
        let [] = v188;
        ("toSorted")[6];
        let v208 = v167["toSorted"]();
        const v209 = v187 <= v154;
        !v209;
        !v209;
        v208 = v150;
        v205 | v205;
        const v213 = a200[3];
        v213 !== v213;
        let v215 = v213 + v213;
        v215 ^ v215;
        v215--;
        try { ("find").trimStart(); } catch (e) {}
        try { v188["find"](..."find", a201, ...v183); } catch (e) {}
    }
    f197.name;
    try { f197(v167, v167, 31053, 31053); } catch (e) {}
    for (let v223 = 0; v223 < 10; v223++) {
        f197(v223, v223, v188);
    }
}
