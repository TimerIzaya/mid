function f0() {
    const o18 = {
        "f": "Ti",
        o(a5) {
            function f8() {
                return f8;
            }
            const o9 = {
                __proto__: f8,
                "g": f8,
            };
            const v12 = !-57011 % 425.49587950806153;
            const v13 = +-1588322735;
            Math.tan(-57011);
            const v15 = !-57011;
            v13 + 425.49587950806153;
            v12 % v12;
            return v15;
        },
    };
    return o18;
}
const v19 = f0();
const v20 = f0();
const v21 = f0();
const v22 = [v21,v21,v19];
const v23 = [v20,v22,v20];
const v24 = [f0,v21,v19];
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a28;
    try {
        v20.c = a30;
    } catch(e31) {
    }
    try {
        this.e = a29;
    } catch(e32) {
    }
    try {
        this.f = a28;
    } catch(e33) {
    }
}
new F25(v23, v21, v23, v24);
new F25(v23, v21, v22, v23);
new F25(v23, v19, v23, v23);
class C37 extends f0 {
    valueOf(a39, a40, a41) {
        class C42 {
            #a;
            e;
        }
        new C42();
        new C42();
        const v45 = new C42();
        return v45;
    }
    static 2431 = v23;
    static #g;
    a = v19;
}
new C37();
new C37();
new v19();
function f49(a50, a51) {
    a51.constructor(v21);
    return f49;
}
new Promise(f49);
for (let v55 = 0; v55 < 5; v55++) {
    const o57 = {
    };
    gc(o57);
}
const v59 = [];
function f60() {
    return Promise;
}
function f61(a62) {
    function F63(a65, a66, a67, a68) {
        if (!new.target) { throw 'must be called with new'; }
        const v71 = new BigInt64Array(11);
        v71.lastIndexOf(this);
    }
    new F63(F63, F63, F63, F63);
}
Object.defineProperty(v59, "e", { configurable: true, enumerable: true, get: f60, set: f61 });
function f74() {
    const o75 = {
        ...v59,
        "c": v59,
        "e": v59,
        "f": v59,
        "arguments": v23,
        __proto__: f74,
    };
    v59.e = o75;
    65537 == 4096n;
    const v81 = new Int32Array(1024);
    for (const v82 of v81) {
        const o85 = {
            "maxByteLength": 1293466293,
        };
        new SharedArrayBuffer(1796, o85);
    }
    return v59;
}
f74();
f74();
f74();
