new Int32Array(4);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
new Int16Array(100);
const v7 = 6 ^ 6;
v7 >>> v7;
let v10;
try { v10 = Int16Array.from(6); } catch (e) {}
try { v10.entries(); } catch (e) {}
const v12 = new Int16Array(6);
v12[4] = v12;
Int32Array[4];
~536870888;
536870888 << 536870888;
Date.prototype = Date;
let v20;
try { v20 = Date.bind(Int32Array); } catch (e) {}
const v21 = v20?.constructor;
try { new v21(100); } catch (e) {}
for (let i25 = 0, i26 = 10;
    (() => {
        const v27 = i25 < i26;
        v27 || v27;
        class C29 extends Int16Array {
        }
        try { new C29(); } catch (e) {}
        let v31;
        try { v31 = C29.toString(); } catch (e) {}
        try { v31.codePointAt(-9007199254740991); } catch (e) {}
        const v33 = i25?.constructor;
        v33.MAX_VALUE = v33;
        try { new v33(Int32Array); } catch (e) {}
        const v35 = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
        async function f37(a38, a39) {
            'use strict';
            a39[9] = v35;
            return -21133.120743932668;
        }
        return v27;
    })();
    (() => {
        -i26;
        const v43 = i25++;
        v43 >>> v43;
    })()) {
    const o50 = {
        "maxByteLength": 1814769353,
    };
    const v52 = new SharedArrayBuffer(12, o50);
    v52.grow(1073741824);
    i26 + i26;
    i25 >> i25;
}
0.5084298928592244 + 0.5084298928592244;
let v58 = Infinity;
v58--;
new BigUint64Array(127);
const v64 = new Int8Array(Int8Array);
const v65 = new Int8Array();
v65.find(v64);
const v68 = 2.220446049250313e-16 % 2.220446049250313e-16;
const v70 = !(2.220446049250313e-16 != 2.220446049250313e-16);
class C71 {
}
class C72 extends C71 {
}
Math.acos(1);
-(-4);
class C79 {
    static #valueOf(a81, a82, a83) {
    }
}
try { C79.bind(v12); } catch (e) {}
let v85 = 9;
v85--;
const v88 = new Map();
class C89 {
    [v88];
    constructor(a91, a92) {
        const v93 = this?.constructor;
        try { new v93(); } catch (e) {}
        const v95 = /(?<!)/gv;
        v95.e = v95;
        const v96 = /(\xed\xb0\x80)\x01/gudmy;
        v96.c = v96;
        const v98 = Symbol.iterator;
        const o100 = {
            [v98]() {
            },
        };
    }
}
v85--;
try { new Int8Array(12797, v68, v70); } catch (e) {}
Int8Array.d = Int8Array;
const v106 = [601759695];
const v107 = [1073741824,1073741823,1376142744,1073741825];
function f109(a110, a111, a112, a113) {
    function f114() {
        const o122 = {
            [-4294967297n](a116, a117, a118, a119) {
                eval(a112);
            },
        };
        return a110;
    }
    f114();
    const v125 = new Int8Array();
    const v126 = v125.buffer;
    v126.constructor = f109;
    v126.slice(2147483648);
    %OptimizeFunctionOnNextCall(f114);
    let v130;
    try { v130 = v107["find"](..."find", a113, ...v106, ...v107, ...522675525n); } catch (e) {}
    v130 <= a112;
    return 522675525n;
}
for (let v132 = 0; v132 < 10; v132++) {
    f109(f109, 522675525n, f109, v132);
}
f109();
