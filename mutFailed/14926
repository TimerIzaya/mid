new WeakMap();
-10n;
-65535n || -65535n;
const v9 = -65535n | -65535n;
v9 + v9;
class C12 extends WeakMap {
    static p(a14, a15, a16) {
        new WeakMap(a15);
        return -65535n;
    }
    d = WeakMap;
    a = "symbol";
    static #a = 10n;
}
const v21 = new C12();
const v22 = v21?.d;
try { new v22("symbol"); } catch (e) {}
const v24 = new C12();
const v25 = new C12(v24, "symbol", v21);
/ab\b\d\bcd(?:a?)?/gvim;
/a{12,(?<=)/isy;
const v30 = Int16Array.caller;
v30 !== v30;
1645 >>> 1645;
try { new Float64Array(v24, v25, v24); } catch (e) {}
try { new Uint32Array(-65535n, 14, -65535n); } catch (e) {}
