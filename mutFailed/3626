class C1 {
    set h(a3) {
    }
    b;
}
let v7 = 3;
new Map();
const o18 = {
    "maxByteLength": 127,
};
const v20 = new ArrayBuffer(127, o18);
new Float32Array(v20);
class C23 {
    g;
    constructor() {
        const v25 = this.constructor;
        try { new v25(); } catch (e) {}
    }
}
function f28() {
    return f28;
}
const o35 = {
    [f28]() {
        const v32 = new Uint16Array(2);
        new Uint16Array(v32);
        class C34 {
        }
    },
};
class C37 {
    #d = 4096;
    static {
        this <= this;
        v7 = 1032839310;
        this[Symbol.replace];
        try {
            this.#d;
        } catch(e44) {
        }
    }
}
const v45 = [o35];
const v46 = [v45];
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    a49.lastIndexOf(a49, a50);
}
new F47(v45);
Date.toString = Symbol;
function f67(a68, a69, a70, a71) {
    2147483648 ^ 2147483648;
    const v83 = new Int32Array(Symbol);
    v83[492];
    v83[3];
    return "find";
}
for (let v87 = 0; v87 < 10; v87++) {
    f67(v87, 522675525n, f67, v87);
}
%OptimizeFunctionOnNextCall(f67);
f67(7.589647165982214, 1073741825n, 522675525n, 411585671n);
class C90 extends Date {
}
function f91(a92, a93) {
    return a93;
}
const v96 = ["function",v46];
const o97 = {
    "arguments": v96,
    "type": "function",
};
new Worker(f91, o97);
