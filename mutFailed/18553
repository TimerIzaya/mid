URIError();
class C4 {
}
const v5 = new C4();
const v6 = new C4();
function f7(a8, a9) {
    const o18 = {
        [-943.3768400471749]: v6,
        [a9](a11, a12, a13) {
        },
        p(a15, a16) {
            this.toString(a16, this, v5, a9);
            return a8;
        },
    };
}
f7();
f7();
const v22 = new v6(0);
Array.g = v22;
const o25 = {
};
const v27 = this.setTimeout();
new BigInt64Array(46);
const o31 = {
    ...0,
};
const o32 = {
};
function f33(a34) {
    const o35 = {
    };
    return o35;
}
const v36 = f33();
new f33();
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this.constructor;
    let v43;
    try { v43 = new v42(a40, v42, v42, o32, v42); } catch (e) {}
    v36[v43] = o32;
}
new Int16Array(6);
new v27(8);
function f50() {
    const o51 = {
    };
    return o51;
}
new Float64Array(129);
new C4(119);
new BigUint64Array(669);
const v61 = new Uint32Array(4);
function f63(a64, a65, a66, a67) {
    a65.__proto__;
    return 669;
}
for (let v69 = 0; v69 < 10; v69++) {
    f63(v69, v69);
}
v61.fill();
const v72 = [];
try {
    v72.some();
} catch(e74) {
    e74.stack;
}
