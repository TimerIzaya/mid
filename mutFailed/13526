[-243228.32260954287,-1.5879966807435775,0.4776060403718607,-450.9670667331602,48341.642579895095,-0.0];
[1e-15,-Infinity,-2.220446049250313e-16,-565916.8521792195,-7.604348246419336,-1000000.0,-Infinity,-496.4121030014941,-1.5968698831794748e+308,1.0];
const v2 = [Infinity,2.2250738585072014e-308,1000000000.0];
let v3 = 3.387130493220226e+307;
v3++;
const v5 = -Infinity;
v3--;
new Uint16Array(3);
let v13;
try { v13 = new Int16Array(Uint16Array, v2, v2); } catch (e) {}
new Int16Array(512);
new v13(257);
-35199 + -35199;
function F20(a22) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
    this.constructor;
    const v25 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
    const v26 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
    function f27(a28, a29, a30) {
        a28.fill();
        return a29;
    }
    f27(v25);
    f27(v26, v25).fill();
    try { new v13(); } catch (e) {}
    try {
        this / a22;
        -35199 % v5;
    } catch(e39) {
    }
}
const v40 = new F20();
new F20(v40);
