const v1 = new WeakMap();
function f2(a3) {
    return gc();
}
v1[Symbol.toPrimitive] = f2;
function f8(a9, a10) {
    try { a9.trimRight(); } catch (e) {}
    try {
        a10.d = a9;
    } catch(e12) {
        e12.message = e12;
    }
    return a9;
}
const v13 = f8?.constructor;
try { new v13(f8); } catch (e) {}
v1[Symbol.toPrimitive] = f8;
1184124244 / 1184124244;
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    a23++;
    this.c = -268435456;
    try {
        this.c = a23;
    } catch(e26) {
    }
}
F21.arguments = F21;
const v27 = new F21(-268435456, 1184124244);
const v28 = new F21(65536, 65536);
const v29 = new F21(1184124244, -268435456);
function f30(a31, a32) {
    -a32;
    const o50 = {
        [a31]: F21,
        "c": 65536,
        "e": WeakMap,
        "g": 1184124244,
        "d": a31,
        __proto__: v28,
        "f": v29,
        [v1]: -268435456,
        "b": F21,
        get h() {
            try { this.m(); } catch (e) {}
            new BigInt64Array(11);
            function f42() {
                return f42;
            }
            function f43() {
                Object.defineProperty(arguments, 13, { enumerable: true, set: f42 });
                return arguments;
            }
            f43();
            new Int8Array(4096);
            new Uint16Array(16);
            return 16;
        },
    };
    return o50;
}
f30(-268435456, 65536);
f30(-268435456, 1184124244);
f30(1184124244, 65536);
new Int8Array(178);
new BigInt64Array(863);
21 >>> 21;
const v63 = new Int32Array(21);
v63.constructor = f2;
const v64 = v63?.constructor;
try { new v64(v63, v27, v28); } catch (e) {}
function F68(a70, a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    function f74() {
        function f75(a76) {
            Math.log1p(a72);
            const v80 = ~a72;
            v80 | a72;
            Math.exp(315321572 * a72);
            Math.max(a72);
            return v80;
        }
        return f75;
    }
    function f85(a86) {
        [1387825936,-1024,64,-4096,3,-4,1,129,6];
        [268435439,-7,10000,859799413,4294967295,-42013,-2147483649,-25070];
        [-4294967295,2147483649,-65535,268435439,-2147483648,1073741824,4294967295,22445,-536870912,-9007199254740990];
    }
    Object.defineProperty(this, "constructor", { writable: true, configurable: true, enumerable: true, get: f74, set: f85 });
    const v90 = this?.constructor;
    try { new v90(a72, 65536, a71, a72); } catch (e) {}
    const v92 = a72.constructor;
    try { v92.asUintN(a72, a72); } catch (e) {}
    try { new v92(a71); } catch (e) {}
}
F68.caller = F68;
new F68(undefined, undefined, -128n);
