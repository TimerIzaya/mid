const v2 = new Uint8Array(4);
new Float32Array(10);
new Uint16Array(152);
new WeakMap();
[1540086764,2147483647,4096];
[-4294967297];
[-9,4,749772231,15,7379,10];
function F14() {
    if (!new.target) { throw 'must be called with new'; }
}
const v16 = new F14();
function f17(a18, a19) {
    const o20 = {
        "e": v16,
    };
    return o20;
}
const t17 = f17();
t17();
function f23() {
    const t20 = [-554.3883745381902,874.2208688504531,0.0,1.7976931348623157e+308,1e-15];
    t20[8] ^= -297927.3051276769;
    return WeakMap;
}
let v26 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v28 = v26--;
const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    function f37() {
        try { ("Vre").codePointAt(); } catch (e) {}
        const v43 = new BigInt64Array(257);
        new BigUint64Array(v43);
        let v45 = Float64Array;
        v45 = v45;
        b = v30;
        v26.matchAll;
        try {
            v31.forEach(a34);
            const o49 = {
                "execution": "async",
            };
            return o49;
        } catch(e50) {
        }
        const o81 = {
            "c": -4294967297n,
            "c": v30,
            valueOf(a52, a53) {
                return a52;
            },
            [-4294967297n](a55, a56, a57, a58) {
                ("boolean").split("toString");
                const v64 = /8[\cA]v/uisy;
                function f65(a66, a67) {
                    return 536870912;
                }
                v64[Symbol.toPrimitive] = f65;
                eval();
            },
            "arguments": v29,
            "c": Uint16Array,
            ...v2,
            "type": "Vre",
            [v28](a72, a73, a74, a75) {
                class C77 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            256: a36,
        };
    }
    f37();
    %OptimizeFunctionOnNextCall(f37);
    return f32;
}
for (let v83 = 0; v83 < 5; v83++) {
    f32(v83, -4294967297n, v29, v83);
}
