const v1 = [];
function f2(a3) {
    try {
        v1.some();
    } catch(e5) {
        e5.stack;
    }
    return a3;
}
const o8 = {
    __proto__: v1,
    [v1]() {
    },
};
o8.toString(f2);
const v12 = [1e-15,-3.0,-152101.7378509146,0.3490541568641039,1000.0,611978.7388059851,0.0,6.164096865448688e+307,-2.220446049250313e-16];
const v13 = [-1000000000000.0,254.79650445300263,-2.2250738585072014e-308,-1000000000.0];
const v14 = [2.3017444246791907,1000.0,1000.0,NaN,6.4222470275889805,-5.0,5.0];
const v15 = [-32080,1223553777,v14];
v15[1];
const v17 = [v15,v14,v13,v15];
const v18 = [v17,v17,v15];
try { v18.toLocaleString(); } catch (e) {}
const o25 = {
    "execution": "async",
};
gc(o25);
-256n >= -256n;
try { Reflect.construct(8, v12); } catch (e) {}
const v30 = [];
const v31 = v15.toString;
new URIError();
const v34 = v30.constructor;
let v35;
try { v35 = new v34(v34); } catch (e) {}
Object.defineProperty(v30, "c", { enumerable: true, set: v35 });
v31.b = v31;
const v36 = Reflect.apply(v31, v15, v30);
try { v36.__defineSetter__(v17, v15); } catch (e) {}
let {"f":v38,"h":v39,"length":v40,} = v14;
try {
    v18.reduce(v31);
} catch(e43) {
}
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.constructor;
    try { new v48(this, a47); } catch (e) {}
    -a46;
    try {
        for (const v54 in Array(3398)) {
        }
        this.e = Reflect;
    } catch(e55) {
    }
}
new F44(2.2250738585072014e-308, v15);
new F44(v38, v30);
new F44(v30, v13);
-(-306813.0697030118);
function f62() {
    return f62;
}
try { new f62(); } catch (e) {}
const v64 = [-9223372036854775808,58777,2];
try { v64.copyWithin(v64, F44); } catch (e) {}
Int16Array[Symbol.isConcatSpreadable] = f62;
const v70 = new Int16Array(v64, 8, 8);
v64.concat(8, v70, Int16Array);
