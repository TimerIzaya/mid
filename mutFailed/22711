function F1(a3, a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
}
const v7 = new Int32Array(Int32Array);
const o8 = {
};
const v9 = o8.constructor;
const v10 = v9.isSealed(v7);
for (let v12 = 0; v12 < 5; v12++) {
    function f13() {
        for (let [i16, i17] = (() => {
                switch (f13) {
                }
                return [0, 10];
            })();
            i17 << i17, i16 < i16, i16;
            i16++, i17--) {
        }
        return v9;
    }
    v10();
    %OptimizeFunctionOnNextCall(f13);
}
new Int8Array(1271);
new Float64Array(0);
Math.tan();
Object.hasOwn(16);
new Uint16Array(3361);
new Array(6);
function f42() {
    for (let v43 = 0; v43 < 5; v43++) {
        v43 / v43;
        function f45() {
            class C47 extends Float64Array {
            }
            const v48 = new C47();
            const v50 = [v48];
            const o51 = {
                "arguments": v50,
                "type": "function",
            };
            return f45;
        }
        f45.d = v43;
    }
    return f42;
}
%PrepareFunctionForOptimization(6);
f42();
%OptimizeFunctionOnNextCall(f42);
f42();
