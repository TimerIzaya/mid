let v2 = new Uint8Array(3346);
let v4 = 101 * 101;
v4--;
const v7 = new Float64Array(101);
const v8 = (3346)?.constructor;
try { new v8(v2, 3346, 3346); } catch (e) {}
3 - 3;
let v13;
try { v13 = new Uint8ClampedArray(v7, v7, v2); } catch (e) {}
new v13(3);
try { Uint8Array.map(v7); } catch (e) {}
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    a19++;
    a18 >>> a18;
    a19 >>> a19;
    try {
        this.b = a18;
    } catch(e23) {
    }
    try {
        this.d = v7;
    } catch(e24) {
        ("undefined").charAt();
        function F27() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 9007199254740991;
        }
    }
    try {
        this.f = a18;
    } catch(e30) {
    }
}
class C32 {
    constructor(a34) {
        ("valueOf").localeCompare(a34, "valueOf");
    }
}
new C32();
F16.arguments = F16;
new F16(101, 3);
new F16(3346, 3);
const v39 = new F16(3346, 3);
v39.f = v39;
function f40() {
    Uint16Array.prototype = Uint16Array;
    const v43 = new Uint16Array(209);
    v43[104] = v43;
}
function f44(a45) {
}
function f46(a47, a48) {
}
f46.length;
f46.e = f46;
class C50 extends f40 {
}
C50.b = C50;
const v52 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
class C53 extends v2 {
    [v52];
}
for (const v54 in C50) {
}
let v55 = 268435456;
const o68 = {
    valueOf() {
        eval();
        return ("-1723624938").slice(1024, 1024);
    },
};
const v69 = v55--;
v69 >>> v69;
const v72 = [1.0,141599.63044947106,730.845463907873,1000000.0,-4.2811873669589365e+307,0.0,3.0];
try { v72.forEach(-5n); } catch (e) {}
new Uint32Array(381);
let v77 = 10;
v2--;
for (; v77--;) {
}
const v83 = [Uint8ClampedArray,Uint8ClampedArray];
[1,17,v83];
class C86 {
}
function* f87(a88, a89) {
}
new Int8Array(v55);
for (let v92 = 0; v92 < 10; v92++) {
    v92 <= v92;
    const v96 = v83.of();
    let v97;
    try { v97 = v96.indexOf(C50); } catch (e) {}
    v97 + v97;
    v96.toString = f40;
    let v100;
    try { v100 = new Date(Array, v96, v96, v92, Array, Array, 3811); } catch (e) {}
    try { v100.setHours(3811, Date, v96, Date); } catch (e) {}
    const v102 = new Date();
    const v103 = v102?.setFullYear;
    try { new v103(3811, 3811, v96); } catch (e) {}
    v102.setFullYear(v96);
    Array(36862);
}
