const v2 = new Int32Array(2430);
new BigUint64Array(218);
new Uint8Array(5);
const v9 = [v2];
const v10 = [Int32Array,v9,Int32Array,5,v2];
try { v10.sort(218); } catch (e) {}
[v10,v9];
9n + 9n;
Int32Array[Symbol.isConcatSpreadable] = v2;
const v21 = new Int32Array();
const v23 = new BigInt64Array();
const v24 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
v24.b = v23;
const v25 = [-1.7976931348623157e+308];
v25.g = Int32Array;
try { v25.concat(Int32Array); } catch (e) {}
function f27(a28, a29, a30, a31) {
    a30.g = a30;
    const o38 = {
        toString(a33, a34, a35) {
            try { this.toString(a34, -2147483648n, this); } catch (e) {}
            a30[a29] = a28;
            return 255n;
        },
    };
    return o38;
}
try { f27(v10, 9n, v10, 5); } catch (e) {}
const v40 = f27(v23, 129, v25);
const v41 = v40?.__defineGetter__;
try { new v41(9n, v10); } catch (e) {}
const v43 = f27(v21, 129, v24);
v43.valueOf = f27;
for (let v44 = 0; v44 < 5; v44++) {
    v44 + v44;
    const v46 = v43 % v40;
    v46 < v46;
    v24.b = v21;
}
