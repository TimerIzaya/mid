function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 129;
    } catch(e3) {
    }
    try {
        this.h = 129;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
new F0();
const o11 = {
    set e(a9) {
    },
};
function F12(a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = F0;
    } catch(e15) {
    }
}
const v16 = new v6(v5);
const v17 = new F12(v5);
const v18 = new F12(v6);
function f19(a20, a21) {
    const o32 = {
        "a": v5,
        "h": a20,
        ...v18,
        "g": v16,
        n(a23, a24, a25) {
            a23[9] = a23;
            const v26 = a21 ** F12;
            for (let v27 = 0; v27 < 5; v27++) {
                function f28() {
                    Math.fround();
                    return v27;
                }
                f28();
                %OptimizeFunctionOnNextCall(f28);
            }
            return v26;
        },
        "b": a20,
    };
    return o32;
}
if (v16) {
} else {
    const o34 = {
        "isExtensible": f19,
        "ownKeys": f19,
    };
    new v5(v18, o34);
}
f19(v17, v17);
f19(v16, f19);
f19(v16, v16);
class C43 {
    toString(a45) {
        const o46 = {
            ..."raw",
        };
        const v49 = new Int8Array();
        Object.defineProperty(v49.buffer, "constructor", { writable: true, configurable: true, value: Date });
        try {
            function f51() {
                return f51;
            }
            function f53() {
                Object.defineProperty(arguments, 13, { enumerable: true, set: f51 });
                return o46;
            }
            f53();
        } catch(e56) {
        }
    }
}
const v57 = new C43();
v57.valueOf = f19;
const v58 = ["raw"];
try {
    v58.length = v57;
} catch(e59) {
}
