new Int8Array(255);
let v6 = 584;
v6--;
try { BigInt64Array.of(); } catch (e) {}
const v10 = new BigInt64Array(v6);
new Int8Array(2);
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    function f19(a20, a21) {
        [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308] | 2;
        return v10;
    }
    this.constructor = f19;
    try { this.constructor(a18, v6, 65104n); } catch (e) {}
    function F25(a27, a28, a29, a30) {
        if (!new.target) { throw 'must be called with new'; }
        this.constructor = f19;
        const v31 = this?.constructor;
        try { new v31(2, BigInt64Array, BigInt64Array, a27); } catch (e) {}
    }
    const v33 = new F25();
    function f34(a35) {
        a35 << a35;
        Math.asin(2.220446049250313e-16);
        return Int8Array;
    }
    v33.toString = f34;
    4046 >>> 4046;
    try { BigInt64Array.toString(); } catch (e) {}
    const v44 = new BigInt64Array(4046);
    function f45(a46, a47) {
        Object.defineProperty(v33, v33, { configurable: true, enumerable: true, get: f45 });
        let o49 = {
            get e() {
                return a16;
            },
        };
        [,...o49] = v44;
        return a46;
    }
    f45();
}
new F14(F14, F14, F14);
const v52 = new F14();
const v53 = v52?.propertyIsEnumerable;
try { new v53(2); } catch (e) {}
