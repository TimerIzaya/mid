let v2 = "boolean";
new Int16Array(1);
new isNaN(1857);
const v11 = new Uint8Array(3603);
class C12 extends Int16Array {
    constructor(a14, a15, a16) {
        super(1857, 1, 1857);
        try { v2(v11); } catch (e) {}
        super.includes(v11, 3603);
        try {
            a15.split("o");
        } catch(e23) {
        }
    }
    /*
    constructor(a25, a26, a27) {
        ({"c":v2,...v2} = a26);
    }
    */
    o(a30, a31, a32, a33) {
    }
    g;
    static #b = 1;
    static f = 1857;
}
function f34() {
    Uint8ClampedArray.e = Uint8ClampedArray;
    return Uint8ClampedArray;
}
%PrepareFunctionForOptimization(f34);
new Int8Array();
for (const v39 in "9007199254740992") {
}
f34();
%OptimizeFunctionOnNextCall(f34);
f34();
const v44 = new Uint16Array(129);
v44.indexOf(129, C12, v2, v44);
const o47 = {
    "d": 150,
};
new C12("getFloat32", v2, "getFloat32");
new C12(v2, "o", v2);
new C12(v2, "getFloat32", "o");
new Uint8ClampedArray(Date);
new Float64Array(1);
const v59 = Symbol.dotAll;
const v60 = Array();
v60[267] = v59;
const v62 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v63 = [601759695];
const v64 = [1073741824,1073741823,1376142744,1073741825];
function f66(a67, a68, a69, a70) {
    function f72() {
        const o79 = {
            "e": -4294967295,
            ...v62,
            ..."Vre",
            "c": a70,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a77, a78) {
                return v64;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    f72();
    %OptimizeFunctionOnNextCall(arguments);
    let v82;
    try { v82 = v64["find"](..."find", a70, ...v63, ...v64, ...522675525n); } catch (e) {}
    v82 <= a69;
    return arguments;
}
f66(v62, v64, "-1073741824", 522675525n);
for (let v85 = 0; v85 < 10; v85++) {
    f66();
}
v60["concat"]();
