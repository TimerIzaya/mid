const v1 = new Date();
const v3 = new Date();
class C4 extends Date {
    constructor(a6) {
        super();
        try {
            Date();
        } catch(e8) {
        }
    }
    n(a10, a11) {
        const v12 = v1.h;
        a11 >>= Date;
        Date[9] %= v12;
        new BigUint64Array(6);
        new Uint8ClampedArray(4076);
        new Uint8Array(0);
        return this;
    }
}
const v22 = new C4(C4);
new C4(v22);
new C4(v3);
new Map();
const v27 = [0.4607205863880701,-0.0,1e-15,0.03638181682413377,0.7960665372871613,-7.9692911727819e+307,-289936.57199699525];
const v28 = [1000000000000.0,6.302245113068043,170206.64497761126,1.0,5.0,932883.4939458836,457.75112541986937,464.11230109500775,0.6718619960165778];
const v29 = [-3.75827003136574,797599.7131594135,-1000000.0,-1.0,-1.3957905943782752e+308];
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v36 = 0; v36 < 5; v36++) {
        let v39 = -2147483649 * v36;
        ++v39;
        Math.tan(v39);
    }
    try {
        this.d = v29;
    } catch(e42) {
    }
    try {
        this.e = v27;
    } catch(e43) {
    }
}
new F30(v29, v29, v29, v29);
new F30(v29, v29, v28, v29);
new F30(v27, v27, v29, v1);
const v47 = [-13939,-12,1904189168];
Object.defineProperty(v47, 3765, { value: v1 });
const o48 = {
};
function f49(a50, a51) {
    a50[3765] = v28;
    v47[3765] = o48;
    return a50;
}
%PrepareFunctionForOptimization(f49);
f49(v47, o48);
%OptimizeFunctionOnNextCall(f49);
f49();
