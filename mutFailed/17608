const v1 = new WeakMap();
v1.length = v1;
const v2 = [-Infinity];
new Uint8ClampedArray();
function f5() {
    const o10 = {
        210: "valueOf",
        ..."replace",
        get c() {
            super[this] = -4.0;
        },
        12: "replace",
    };
    return o10;
}
[22.290803867618138,-5.0,9.414985371516547,-2.2250738585072014e-308,5.0,-1000000000.0,2.0];
[0.7620436482096925,-2.0,-1.0,1.0,-96908.27590548515,-8.885849446016085,-3.0,3.0,-1.0,-2.0];
[[v2]];
class C15 {
    set d(a17) {
    }
}
const v18 = [];
v18.toString = f5;
("minor").fontcolor(v18);
([v1])[0];
function f26() {
    return Float64Array;
}
const v29 = new Float32Array();
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = this.constructor;
    try { new v36(v29, a34, 2); } catch (e) {}
    this.h = a33;
}
try { SharedArrayBuffer.call(-2); } catch (e) {}
const v42 = new SharedArrayBuffer(62);
const v43 = v42.slice();
v43.byteLength = v43;
new Int8Array(v1);
const v48 = new Set();
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a51;
    } catch(e53) {
    }
    try {
    } catch(e54) {
    }
    if (a52 >= Uint8ClampedArray) {
    }
    try {
    } catch(e56) {
    }
    try {
        const v57 = v48[this];
        try {
            new F49(v57, -268435456n);
        } catch(e60) {
        }
        this.b = Set;
    } catch(e61) {
    }
}
