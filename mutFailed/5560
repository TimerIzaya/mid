let v3 = [-8n,47074n];
const v4 = [47074n,-8n];
const v5 = [v4,47074n];
class C6 {
    static #d;
    static {
        super[v3] = v3;
        try {
            C6.valueOf = C6;
        } catch(e8) {
        }
    }
    #n(a10, a11, a12) {
        const v13 = -8n / this;
        const v16 = ++v3;
        Math.exp(v3);
        v16 & v16;
        super[v13] = v4;
        Math.round(-8n);
        let v24 = v16 & 1;
        Math.sinh(v16);
        -8n >>> -1.9286905797871464e+306;
        1 * -1.9286905797871464e+306;
        v24--;
        Math.cos(v16);
        return Math.atan2(v16, -v3);
    }
}
let v32 = new C6();
let v33 = new C6();
const v34 = new C6();
64n ^ "reject";
v33 = v34;
C6 / v5;
v32 = "bigint";
function f40() {
    return "bigint";
}
function f41(a42, a43, a44, a45) {
    function f47() {
        return arguments;
    }
    const v49 = new Int8Array();
    v49.buffer;
    %OptimizeFunctionOnNextCall(f47);
    ("find").codePointAt(f41);
    return arguments;
}
for (let v53 = 0; v53 < 10; v53++) {
    f41();
}
%OptimizeFunctionOnNextCall(f41);
f41();
