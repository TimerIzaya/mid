const v1 = new Set();
const v10 = new Int32Array(7);
const v11 = v10.buffer;
try { v11(Uint8ClampedArray, Int8Array, 129, v11); } catch (e) {}
function f13(a14, a15) {
    const o41 = {
        "b": "string",
        ..."string",
        __proto__: "PI",
        "e": "string",
        "g": "string",
        set c(a17) {
            let v18;
            try { v18 = a14(this, a17, a15, "PI"); } catch (e) {}
            new Int32Array(257);
            function f22() {
                const t16 = ("1073741824").constructor;
                const v26 = t16().replaceAll(f22, 129);
                return v26.toLowerCase(v26, "1073741824", v26);
            }
            try { v18.toString(a15, f13, "PI", a15, a14); } catch (e) {}
            new Array(2924);
            let v32;
            try { v32 = a17("number", "string"); } catch (e) {}
            try { new v32(Set, this, this, v32); } catch (e) {}
            1000000.0 >>> 1000000.0;
            function* f36(a37, a38, a39, a40) {
                return a38;
            }
        },
        ..."string",
        "a": "PI",
    };
    return o41;
}
f13("string", "number");
%VerifyType("PI");
try {
    ([5]).fill;
    new Uint8ClampedArray();
    new Float64Array(Float64Array);
    const o49 = {
    };
    v1.forEach(f13, o49);
} catch(e51) {
}
f13("string", "PI");
let v53 = 0;
while (v53 < 0) {
    Math.clz32(v1);
    Math.log10(v1);
    v1 / -5154;
    v53++;
}
f13("PI", "string");
function f66() {
    const t56 = ("match").__proto__;
    t56[1478] = "match";
    return "match";
}
f66();
new Uint8Array(-8);
const v73 = new Uint8Array(Uint8Array, Uint8Array);
v73[Math.atan2(-988.8649474800335, 10000)] = 10000;
f66();
