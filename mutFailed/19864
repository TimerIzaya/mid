function f0() {
    const o20 = {
        get f() {
            try {
                const v6 = new Float64Array(Float64Array, Float64Array, Float64Array);
                const v8 = new BigUint64Array();
                const o17 = {
                    toString(a10, a11) {
                        const v12 = ~a11;
                        const v13 = v12.__lookupGetter__;
                        try { new v13(v6); } catch (e) {}
                        const v15 = a11 + a11;
                        v15 >>> v15;
                        v8[3408] = this;
                        return v12;
                    },
                };
                ("2l").lastIndexOf(-1000000000.0);
            } catch(e19) {
            }
            super.e = Infinity;
            return this;
        },
        ..."2l",
        "a": Infinity,
    };
    function f22() {
        return 268435439;
    }
    new Float64Array(6);
    return f0;
}
const v26 = f0();
f0();
let v28 = f0();
[5.577351041874473e+307,2.0,f0,2.0,v26];
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = /{12,3b/dm;
    /((?:a?)+a|bc)/udim;
    /lWP/gvm;
    this ^ delete v35[268435440];
    try {
        const v42 = Array(19793);
        for (const v43 of v42) {
        }
        const v44 = [v42,v42,v42,v42,v42];
        [[v44,v44,v44]];
    } catch(e48) {
        try {
            f0();
        } catch(e50) {
        }
        v28.f &&= e48;
        [e48,this];
    }
}
const v53 = [2.0,[v26],2.0,f0];
class C54 {
}
const t60 = 2.0;
const v55 = new t60();
const v56 = [v55];
class C57 {
    constructor(a59, a60) {
        try {
            v28++;
        } catch(e62) {
        }
    }
    /*
    constructor(a64, a65, a66) {
        function f67(a68, a69, a70) {
            v56.indexOf(C54, a69);
            try {
                f67(C57, a68, v55);
            } catch(e73) {
            }
            return f67;
        }
        f67();
    }
    */
}
class C75 extends C57 {
}
new C75();
new C75();
const o78 = {
};
const v79 = f0();
class C80 extends v53 {
}
const v81 = new C80();
function F82(a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    const v86 = this.constructor;
    try { new v86(a84, v86, v86, o78, v86); } catch (e) {}
    v79[v81] = o78;
}
