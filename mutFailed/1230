function f0() {
}
new Int8Array(5);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = 4411;
    const v14 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
    const v15 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
    class C16 {
        constructor(a18, a19) {
            super[v15] = v14;
        }
    }
    const v20 = new C16(v14, v15);
    function f21(a22) {
    }
    const v25 = [v20];
    const o26 = {
        "arguments": v25,
        "type": "function",
    };
    new Worker(f21, o26);
}
const v28 = new Set();
[23683,v28,4294967296,4294967296];
[[Set]];
const v33 = new Map();
const v34 = f0(v33, f0);
const t28 = f0(f0(v34, Map), v34);
t28[512] = 23683;
/(?:ab)|cde/gvdmy;
/\ud808\udf45*/udis;
/C/gumy;
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
}
const v44 = new F40(F40, F40);
~v44;
class C49 {
    static #o(a51) {
        this.g **= -1e-15;
        try {
            ("-2147483648").normalize();
        } catch(e53) {
        }
        return 268435456;
    }
    a = -1e-15;
    static 27 = 268435456;
    static f;
}
class C56 {
    set e(a58) {
        const v60 = Symbol.iterator;
        const o66 = {
            [v60]() {
                let v62 = 10;
                const o65 = {
                    next() {
                        v62--;
                        return this;
                    },
                };
            },
        };
    }
}
const v67 = new C56();
function f68(a69, a70) {
    const o77 = {
        512: C56,
        4294967295: a69,
        valueOf(a72, a73) {
            return a73;
        },
        "e": v67,
        o(a75, a76) {
            return a76;
        },
    };
    return o77;
}
-4.380315352541508e+307 >> 129;
class C82 {
}
const v83 = new Int8Array(770);
const o89 = {
    o(a85) {
        const o87 = {
        };
        return gc(o87);
    },
};
new Uint8ClampedArray(v83);
Reflect.h = [Reflect,Reflect,Reflect];
eval();
