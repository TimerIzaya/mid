function f0() {
    const o23 = {
        toString(a5) {
            [8];
            const v7 = [-65536,-8151,7287,16,-268435456,714146782];
            [-1242567666,9007199254740990,-2,-4294967296];
            return v7;
        },
        [-24932](a10) {
            const v11 = a10?.[7];
            var e = -24932;
            const v13 = Symbol.iterator;
            const o22 = {
                [v13]() {
                    let v15 = 10;
                    const o21 = {
                        next() {
                            v15--;
                            v15 == 0;
                            const o20 = {
                                "done": v15,
                                "value": v15,
                            };
                            return o20;
                        },
                    };
                    return o21;
                },
            };
            return v11;
        },
    };
    return o23;
}
const v24 = f0();
const v25 = f0();
const v26 = f0();
function f27() {
    return f0;
}
[437991587,1073741825,3];
let v29 = [-2147483649];
const v30 = [9223372036854775807];
class C31 {
    static #f;
    constructor(a33, a34) {
        v29 = v30;
        +this;
    }
    [v24] = v26;
    b = f0;
    static #valueOf(a37, a38) {
        v30[6];
        const o40 = {
            "call": f0,
            "defineProperty": f0,
            "get": f27,
            "getOwnPropertyDescriptor": f0,
            "getPrototypeOf": f27,
            "has": f0,
            "ownKeys": f0,
            "preventExtensions": f0,
        };
        const v42 = new Proxy(a38, o40);
        return v42;
    }
}
const v43 = new C31(v30, v24);
new C31(C31, v25);
new C31(v43, v24);
new Uint8ClampedArray(129);
new Int8Array(6);
new BigUint64Array(2563);
const v58 = Symbol.iterator;
const t74 = "string";
t74[v58] = v58;
new Uint16Array(4294967295, 4294967295);
const v65 = new Float32Array(7);
const o69 = {
    m() {
        const o68 = {
        };
    },
};
const v71 = new Int32Array();
function F72(a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = this?.constructor;
    try { new v77(Uint16Array, a76, a76); } catch (e) {}
    a74 * a74;
    a76++;
    this.d = a74;
    this.g = Int32Array;
}
new F72(F72, 256, 256);
const v82 = new F72(256, v71, 4294967295);
const t96 = v82.g;
new t96(Uint16Array, v65, 7);
class C86 {
    #a;
    constructor(a88, a89, a90) {
    }
}
new F72(256, Float32Array);
f27.asinh();
const v96 = new Float32Array(Float32Array, Float32Array);
v96.h = v96;
Math.sin();
