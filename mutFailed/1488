function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F0;
    try {
        F0.b = -1;
    } catch(e3) {
    }
    try {
        F0.e = -1;
    } catch(e4) {
    }
    try {
        this.c = -1;
    } catch(e5) {
    }
}
const v6 = new F0();
new F0();
const v8 = new F0();
const v14 = new Uint32Array(4);
try { v14.filter(v6); } catch (e) {}
function f18(a19) {
    function f20() {
        return v8;
    }
    return v14;
}
Uint32Array[Symbol.iterator] = f18;
const v23 = new Uint32Array(147);
v23.toString = f18;
v23[3] = v23;
try { BigInt64Array.from(Uint32Array); } catch (e) {}
new BigInt64Array(7);
Float64Array.name;
const v32 = new Float64Array(1000);
v32.constructor = Symbol;
const v33 = v32?.constructor;
try { new v33(4, Float64Array, Float64Array); } catch (e) {}
v32.includes(5);
