const v0 = /2a\sc/uds;
function f1() {
    try { v0.test(v0); } catch (e) {}
    const t3 = Array(11);
    t3.length |= 113;
    return 11;
}
v0[Symbol.toPrimitive] = f1;
const v9 = /2(x)(x)(x)\3/dim;
function f10() {
    return Symbol;
}
Object.defineProperty(v9, Symbol.toPrimitive, { get: f10 });
function f13(a14) {
    v0[0];
    let v18;
    try { v18 = ("imul").padEnd(1073741824); } catch (e) {}
    return v18;
}
v9.valueOf = f13;
/DIxJ0a[\cA]?/udy;
const o24 = {
    [v0](a21) {
        try {
            super.m(this);
        } catch(e23) {
        }
        return v0;
    },
};
function f25() {
    gc();
    return Symbol;
}
const v29 = Symbol.iterator;
o24[v29] = f25;
function f30(a31) {
    ("getBigInt64").normalize();
    return "getBigInt64";
}
o24[Symbol.iterator] = f30;
Uint8ClampedArray.BYTES_PER_ELEMENT;
const v39 = new Uint8ClampedArray(1000);
function f40(a41) {
    const v42 = [];
    function* f43(a44, a45) {
        yield* v42;
        return a44;
    }
    return v29;
}
v39[Symbol.toPrimitive] = f40;
Object.defineProperty(v0, "g", { writable: true, enumerable: true, value: Uint8ClampedArray });
-268435456;
3 | 268435456;
Math.ceil(v9);
const v54 = v39 ^ 3;
v54 == v54;
v9 ^ 268435456;
const v58 = new BigUint64Array(3);
-14;
const v62 = new Int8Array(14);
v62.toString = f1;
const v63 = v62?.constructor;
try { new v63(o24, Math, 3); } catch (e) {}
try { new Int16Array(v58, v58, Int16Array); } catch (e) {}
new Int16Array(3912);
const v69 = /9f8\xf0\x9f\x92\xa9/diy;
const v75 = +v54;
v75 | v75;
v54 >>> (v75 + -3.0);
const v79 = v69["compile"]();
v79.constructor = Symbol;
const v80 = v79?.constructor;
try { new v80(v62, 268435456); } catch (e) {}
