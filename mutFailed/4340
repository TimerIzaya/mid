new Uint8Array(64);
let v3 = 64;
v3++;
const v6 = new Uint8ClampedArray(v3);
2386 - 2386;
const v10 = new Float64Array(2386);
v10[969] = v10;
13 % 13;
class C18 {
    constructor(a20) {
        a20 >>> a20;
        this[1762774961] = this;
        a20 % a20;
        function f23() {
            return a20;
        }
        try { f23.bind(v6); } catch (e) {}
        let v25;
        try { v25 = f23.bind(this); } catch (e) {}
        v25.name = v25;
    }
    static [-1e-15] = 1000.0;
    ["name"] = -1e-15;
    f;
    [-1e-15];
    a;
    1762774961 = -1e-15;
    static ["name"];
}
C18.name = C18;
C18.e = C18;
const v26 = new C18(64);
const v27 = new C18(v26);
const v28 = v27?.__lookupSetter__;
try { new v28(878792203); } catch (e) {}
try { new v28("name"); } catch (e) {}
new C18(-1e-15);
let v33;
try { v33 = new WeakSet(); } catch (e) {}
try { v33.delete(-1e-15); } catch (e) {}
new WeakSet();
try { Set.call(64); } catch (e) {}
new Set();
let v40 = undefined;
const o41 = {
};
o41.c = o41;
v40 = v3;
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = this.constructor;
    v44.caller = v44;
    try { new v44(); } catch (e) {}
    let v46 = -128;
    v46--;
    this.g = v46;
}
new F42();
const v50 = new Uint8Array();
const v51 = v50?.lastIndexOf;
try { new v51(Set); } catch (e) {}
