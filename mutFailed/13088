const v2 = new Int32Array(128);
let v4 = v2[1][1];
const v5 = v4--;
function f6() {
    const v8 = ([-1.5424212036356715e+308]).shift();
    const v9 = [1073741824,1073741823,1376142744,1073741825];
    v9.g = v9;
    return v8;
}
let v10 = f6();
const v12 = [-65535,406094985];
const v13 = [-17291,1886,-9007199254740992,857,2,13,14,-1,536870912];
const v14 = /(q()n)/guimsy;
const v16 = [v4,v5,v14,Int32Array,1000];
Reflect.apply(v13.unshift, v2, v16);
Object.defineProperty(v2, "byteOffset", { writable: true, enumerable: true, get: f6, set: f6 });
[[],v12,v13,v14,v13];
1000 * 1000;
const v24 = new BigInt64Array();
const o25 = {
    ...v24,
};
new Int32Array(1000);
v24?.constructor;
const t23 = "toString";
t23[6] = "toString";
"toString" == "toString";
const v31 = new Map();
const o34 = {
    ...v31,
    set b(a33) {
    },
};
o34.constructor;
let v37 = 0;
v37++;
class C39 {
}
const v40 = new C39();
class C41 extends C39 {
    [v40];
}
const v42 = new C41();
v42.propertyIsEnumerable(v42);
2 - 2;
new Float64Array(2);
const v48 = ("x0")?.search;
try { new v48("x0"); } catch (e) {}
let v54 = -65537;
v10++;
"-639360874" + v54;
v54 ** "-639360874";
--v54;
Math.sign(v54);
function f60() {
    const o61 = {
    };
    Object.defineProperty(o25, -9007199254740990, { get: f60, set: f60 });
    function f65() {
        return 9;
    }
    o61.__defineGetter__;
    const t61 = [-4294967296];
    t61.length = 257;
    return f60;
}
for (let v70 = 0; v70 < 5; v70++) {
    f60();
    %OptimizeFunctionOnNextCall(f60);
}
Math.tan(-1);
