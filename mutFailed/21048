let v2 = 0.5124082079948337;
class C3 {
    e;
    static 11;
    #d = 5;
    static [5] = v2;
    static set b(a5) {
        const o9 = {
            [-206.79565552697056]: 352693014,
            get g() {
            },
            "g": -206.79565552697056,
        };
        v2 |= v2;
        let v10;
        try { v10 = a5.m(v2); } catch (e) {}
        v10[1073741823] = this;
        super.h;
        try {
            const o13 = {
            };
            this.fuck(WeakSet, o13, a5);
        } catch(e15) {
        }
    }
}
let v16;
try { v16 = new C3(); } catch (e) {}
let v17;
try { v17 = new C3(); } catch (e) {}
const v18 = v17?.constructor;
try { new v18(); } catch (e) {}
const v20 = new C3();
v17.e = v20;
const v21 = new C3();
const v22 = v21?.constructor;
try { new v22(); } catch (e) {}
const v24 = new C3();
v24.c = v24;
const v27 = Array(4087, Array, Array);
v27.length;
for (let v29 of v27) {
    v29++;
}
const v32 = new Set();
function f33() {
    return v32;
}
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this?.toLocaleString;
    try { new v38(); } catch (e) {}
    a37.e = a37;
    v16.e;
    try {
        this.h = a36;
        const v42 = new Uint32Array(5);
        try { v42.toSorted(v24); } catch (e) {}
        const o53 = {
            next() {
            },
            m(a46) {
                try { a46.m(); } catch (e) {}
                a46.next();
                const v51 = new Int8Array(3938);
                let v52 = 3;
                [...v52] = v51;
            },
        };
        o53.__proto__ = o53;
    } catch(e54) {
    }
    try {
        this.d = C3;
    } catch(e55) {
    }
    try {
        this.a = C3;
    } catch(e56) {
    }
}
const v57 = F34.name;
try { v57.codePointAt(v57); } catch (e) {}
for (let v59 = 0; v59 < 25; v59++) {
    const v60 = v59 >>> v59;
    v60 > v60;
    function f62() {
        return f62;
    }
    const v63 = f62.length;
    v63 >>> v63;
    const v65 = [601759695];
    const v66 = [1073741824,1073741823,1376142744,1073741825];
    function f67(a68, a69, a70, a71) {
        function f72() {
            return a68;
        }
        const v73 = C3();
        Int8Array.length;
        try { Int8Array(Array, Array, v21); } catch (e) {}
        const v77 = new Int8Array();
        const v78 = v77?.constructor;
        let v79;
        try { v79 = new v78(v59, v59, Array); } catch (e) {}
        try { new Uint32Array(Uint32Array, v79, v65); } catch (e) {}
        new Uint32Array();
        const v83 = [v73,v73,v73];
        v83.g = v83;
        let v85 = 536870887;
        v85--;
        BigUint64Array * v85;
        try { v66["find"](..."find", a71, ...v65); } catch (e) {}
        return f62;
    }
    f67.length = f67;
    try { f67(f62, v65, f67, v65); } catch (e) {}
    for (let v91 = 0; v91 < 10; v91++) {
        const v92 = f67();
        try { v92.bind(v92); } catch (e) {}
    }
}
const v94 = new F34(v21, v21);
v94.b = v94;
const v95 = new F34(v24, v20);
const v96 = new F34(v21, v24);
const v97 = v96?.constructor;
try { new v97(5, v96); } catch (e) {}
let v99 = 11;
v99--;
-30330 >> -30330;
let v105 = -256;
v105--;
let v107 = 311381866;
v107--;
const v109 = [5.0,-1000000000000.0];
[-3.4570322798414105e+307,169.39416483428454,-2.0,-1000.0,5.0,1.0,14338.693316202844,-1000000.0,955.167973693761,0.5696151956948133];
const v111 = [-2.0,-2.0];
try { v111.push(v95); } catch (e) {}
try { v111.every(-30330); } catch (e) {}
try { ("undefined").search(536870888); } catch (e) {}
const t140 = "string";
t140[1] = "string";
try { ("F").toLowerCase(); } catch (e) {}
Object.defineProperty(Array, 2147483648, { writable: true, configurable: true, value: Array });
const v121 = 6 >> 6;
new Array();
function f124() {
    return f33;
}
function f125(a126) {
    +0.8371116372352035;
}
const v129 = f125?.apply;
try { new v129(v121, v109); } catch (e) {}
Object.defineProperty(Date, "valueOf", { configurable: true, get: f124, set: f125 });
const v131 = new Date();
Array[2147483648] = v131;
Date > "undefined" ? Date : "undefined";
let v134 = 0;
do {
    try { ("minor").localeCompare(gc); } catch (e) {}
    const v139 = ("async")?.trimRight;
    try { new v139(); } catch (e) {}
    const o141 = {
        "execution": "async",
        "type": "minor",
    };
    const v142 = gc(o141);
    try { v142.then(f125, f125); } catch (e) {}
    v134++;
} while (v134 < 2)
