const v1 = new WeakSet();
class C2 {
    static #o(a4, a5) {
        Math.expm1(2102206282);
        Math.sinh(this);
        const v10 = !2102206282;
        ((2102206282 >>> this) << this) ^ v10;
        return WeakSet;
    }
    [v1];
}
new C2();
new C2();
new C2();
const v17 = [13,-612442956,-9223372036854775807,4,-811174205];
[1239952208,12809,-5,1073741823,13,4,-564183156,-2147483649,10,268435439];
[24539,-65221,2,-634373425];
const v22 = new Uint8Array(174);
const v26 = new v22("c");
"D2z" < v26;
new Uint8Array();
new Int8Array(256);
new Int8Array(9);
class C36 {
}
const v38 = new C36();
Object.defineProperty(v38, "valueOf", { enumerable: true, value: Symbol });
const v39 = [-536870912,-3592,61205];
for (let i = 0; i < 10; i++) {
    const v40 = v39.constructor;
    class C41 extends v40 {
        static 1 = v40;
    }
}
new C36();
const v43 = [v38];
35530n & 35530n;
let v47 = undefined;
const o48 = {
};
v47 = o48;
function F50(a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    try { new v55(a52, -1000000000000.0); } catch (e) {}
    a53 % a53;
    this.a = a52;
}
const v58 = new F50();
class C59 extends F50 {
    65537 = v47;
    7 = v58;
}
new C59();
new Float64Array();
try { Uint8Array.from(v43); } catch (e) {}
function f64(a65, a66) {
    const o72 = {
        toString(a68, a69) {
            (F50 && a65) <= v17;
        },
    };
    a66.name;
    const v76 = Array();
    function f77() {
    }
    function f78(a79) {
        let v81 = 10;
        for (;
            (() => {
                const v82 = v81--;
                v82 >>> v82;
                return v82;
            })();
            ) {
        }
        gc();
    }
    Object.defineProperty(v76, 0, { configurable: true, enumerable: true, get: f77, set: f78 });
    v76.unshift(3);
}
new Promise(f64);
