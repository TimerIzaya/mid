const v0 = /[x]/guim;
const v1 = /YE(x)(x)(x)\1*/gvi;
const v2 = /[a+b]/umy;
class C3 {
    [v2] = v1;
    #h;
    m(a5, a6) {
        a5 < this;
        return super[this];
    }
    static [v1];
    static c;
    e = v0;
}
C3.length;
let v10;
try { v10 = new C3(); } catch (e) {}
new C3();
const v12 = new C3();
v12.b = v12;
new C3();
-14n >> -14n;
const v18 = [];
let v19;
try { v19 = v18.sort(v0); } catch (e) {}
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = a22.lastIndexOf(a22, a23);
    v26 | v26;
    v26 === v26;
}
const v29 = v19?.constructor;
try { new v29(v19); } catch (e) {}
const v31 = new F20(v18);
const v32 = v31?.constructor;
const v33 = v32?.constructor;
try { new v33(v31); } catch (e) {}
let v35;
try { v35 = new v32(-2n, -2n, v18, -2n); } catch (e) {}
const v36 = v32.constructor;
try { new v36(v35, v10, -14n, -14n); } catch (e) {}
v36.e = v36;
-9 !== -9;
new Int8Array(9);
const v43 = (9).indexOf(-9);
v43 != v43;
try { new v36(); } catch (e) {}
