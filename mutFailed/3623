const v0 = [-59862,1031872415,536870912,27510,13,-6,4294967295,-1354857898];
v0 ^ v0;
const v3 = new Set();
v3[v0];
let v5 = 0.8037056182165817;
v5--;
for (let i20 = (() => {
        function f7() {
            return f7;
        }
        function f8(a9) {
            const v10 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
            const v11 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
            let v12;
            try { v12 = v11.concat(v10); } catch (e) {}
            return v12;
        }
        f7[Symbol.toPrimitive] = f8;
        try { f7(); } catch (e) {}
        const o17 = {
            [f7]() {
            },
        };
        new Int32Array(Int32Array);
        return v5;
    })();
    i20 < 10;
    i20++) {
}
const v26 = [-38972];
const v27 = [4,1391365936,23704,22711,-34493,100575453,4096,-10,1276615083,2147483648];
function f28() {
    return v0;
}
try { f28(); } catch (e) {}
const v31 = [v26,[f28,v27]];
const v33 = ([v31,v27,v31,v31,v0])?.values;
try { new v33(); } catch (e) {}
[24445,9007199254740991,63628646,28410,394131356,4294967297,268435456,128,-12,9007199254740990];
const v39 = [1];
v39[0] = v39;
[-2846,-5];
const v43 = new Uint8Array(2155);
v43[263];
AggregateError("4294967297");
const v49 = /ka{0}/guims;
class C50 {
}
C50.length;
const v52 = new C50();
function f53(a54, a55) {
    try { a54(a55); } catch (e) {}
    -256n >> -256n;
    return v33;
}
v52.constructor = f53;
const v59 = v52?.constructor;
try { new v59(); } catch (e) {}
function f61() {
    try { gc(); } catch (e) {}
    gc();
    return v49;
}
f61.e = f61;
v52.constructor = f61;
const v65 = v52.constructor;
v65.e = v65;
v65().flags;
const o71 = {
    "execution": "async",
};
const v72 = gc(o71);
try { v72.then(v52, 256); } catch (e) {}
const v74 = v72.finally();
v74.constructor = gc;
try { v74.finally(v52); } catch (e) {}
const v76 = v72.then();
new Float32Array(255);
Uint8Array.length = Uint8Array;
new Uint8Array(0);
const v82 = ["object"];
try { v82.groupToMap(v76); } catch (e) {}
const v84 = v82.pop();
try { v84.codePointAt(v84); } catch (e) {}
9007199254740992 >> 9007199254740992;
Math.tan(9007199254740992);
class C91 {
    static #e;
    constructor(a93, a94) {
        try {
            a94.#e = Date;
        } catch(e95) {
        }
    }
}
