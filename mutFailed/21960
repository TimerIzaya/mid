class C3 {
    a;
    #valueOf(a5, a6) {
        for (const v7 in a5) {
            a5?.[8];
        }
        this && 1464185581;
        return 1464185581;
    }
    [1497298645] = 1497298645;
    static #c = 1464185581;
    [-0.0] = 1464185581;
    [1464185581];
}
try { new C3(); } catch (e) {}
const v14 = new C3();
const v15 = new C3();
v15[0];
new C3();
2.2250738585072014e-308 >>> 2.2250738585072014e-308;
function f22(a23, a24, a25) {
    const o45 = {
        "b": a25,
        [v14](a27, a28, a29) {
            const v30 = a27.__proto__;
            try { new v30(v30); } catch (e) {}
            return a28;
        },
        "f": a24,
        [a23]: C3,
        m(a33, a34, a35) {
            +a35;
            const v39 = a35++;
            const v40 = a24 << 5862;
            Math.cbrt(v39);
            Math.clz32(a35);
            a35++;
            Math.hypot(v40);
            return 1464185581;
        },
    };
    return o45;
}
f22.toString = f22;
f22.arguments = f22;
f22(-1.2762113390789747, -0.0, -0.0);
f22(3.0, 2.2250738585072014e-308, 3.0);
f22(-1.2762113390789747, -1.2762113390789747, 3.0);
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    a51[Symbol.toPrimitive] = f22;
    -a51;
    a52 / a52;
    try {
        this.h = a51;
    } catch(e57) {
    }
    try {
        this.c = a52;
    } catch(e58) {
    }
    try {
        this.e = a52;
    } catch(e59) {
    }
}
new F49(1464185581, 3.0);
const v61 = new F49(1464185581, 3.0);
v61.h = v61;
new F49(f22, 3.0);
/[1(?<!)]/umsy;
/A\cj\cJ\ci\cI\ck\cK+/vdy;
Float32Array.length;
const v67 = new Float32Array();
for (let v68 = 0; v68 < 5; v68++) {
    v68 / v68;
    v67[836499325] = ~v68;
}
