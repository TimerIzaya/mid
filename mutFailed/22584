function f0() {
}
class C4 extends Set {
    #m(a6, a7) {
        let [v9,v10,,v11] = this;
    }
}
const v14 = -16;
function f16() {
    return f16;
}
class C17 {
    constructor(a19, a20, a21) {
        const v22 = this.byteLength;
        const t14 = f16.constructor;
        t14("string", "string", v22);
    }
}
new BigUint64Array(16);
for (let v27 = 0; v27 < 5; v27++) {
}
[0.3083488057663979,0.3083488057663979,0.3083488057663979];
const o30 = {
};
try { new BigUint64Array(16, f0, 16); } catch (e) {}
const v34 = new BigUint64Array(v14);
const v36 = 5 | 5;
const v38 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const o40 = {
    [v36]: 512,
    [0.3083488057663979]: v38,
    "b": "Woh",
};
try { Uint8ClampedArray.bind(5); } catch (e) {}
const v42 = new Uint8ClampedArray(5);
BigUint64Array | BigUint64Array;
const v44 = [-5.0];
const v45 = C4.constructor;
try { new v45("Woh", v44); } catch (e) {}
new Uint32Array([1524942359,268435439,8,1,256,-11]);
[[v34,v42,BigUint64Array,[Uint8ClampedArray,Uint8ClampedArray,BigUint64Array,5]]];
function f55(a56, a57, a58) {
    return true;
}
f55.d = f55;
try { ("function").valueOf(); } catch (e) {}
const v62 = [188,true];
const o63 = {
    "arguments": v62,
    "type": "function",
};
for (let i66 = 0, i67 = 10;
    (() => {
        const v68 = i66 < i67;
        class C69 {
        }
        function f70(a71, a72, a73, a74) {
            let v75;
            try { v75 = ("string").apply(a74, a72); } catch (e) {}
            return v75;
        }
        f70(i67, C69);
        %OptimizeFunctionOnNextCall(f70);
        return v68;
    })();
    i67--) {
}
new Worker(f55, o63);
