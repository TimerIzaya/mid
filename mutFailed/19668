class C3 {
    13 = "ZqMIH";
    [1999645958] = 1999645958;
    9 = 1999645958;
    10 = 1999645958;
    constructor(a5, a6) {
        let v4 = this;
        function f7(a8) {
            let v9 = -7;
            v9-- + 7;
            return "ZqMIH";
        }
        v4.constructor = f7;
        function f13() {
            return f7;
        }
        Object.defineProperty(a5, Symbol.toPrimitive, { enumerable: true, get: f13 });
        const v16 = v4?.toString;
        try { new v16(); } catch (e) {}
        a5++;
        switch (v4) {
            case "ZqMIH":
                ({"d":v4,} = a5);
                const v22 = new Date();
                let v23;
                try { v23 = v22.setFullYear(26578n); } catch (e) {}
                const v24 = (-184720234n).__proto__;
                try { v24.toLocaleString(v23, v22, v23); } catch (e) {}
                break;
        }
        super[-8.58046580488072];
        super.h;
    }
}
let v28;
try { v28 = C3.toString(); } catch (e) {}
const v29 = new C3(-8.58046580488072, "ZqMIH");
const v30 = new C3(-8.58046580488072, v29);
const v31 = new C3(C3, -8.58046580488072);
const v32 = [v31,1999645958,1999645958,-8.58046580488072,1999645958];
function f33() {
    function F34(a36, a37, a38, a39) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.c = C3;
        } catch(e40) {
        }
        try {
            this.a = a38;
        } catch(e41) {
        }
    }
    const v42 = new F34(v29, v28, v32, v30);
    const v43 = new F34(v42, v42, v31, "ZqMIH");
    const v44 = new F34(v43, v42, v42, v30);
    return v44;
}
v32.toString = f33;
const v45 = [C3,v32,1999645958,v32,v31];
const v46 = [-8.58046580488072,"ZqMIH","ZqMIH",v45];
function f47() {
    const v48 = [];
    const v50 = new Float64Array(v48);
    v48[Symbol.iterator] = v50;
    return v50;
}
v46.toString = f47;
function f53(a54, a55, a56) {
    a54.toString = f33;
    a56[1999645958] = a54;
    let v57;
    try { v57 = a55.map(a54); } catch (e) {}
    a56[1999645958];
    const o85 = {
        "f": a56,
        get g() {
            function f60() {
                return f60;
            }
            const v61 = f60.arguments;
            for (let v62 = 0; v62 < 5; v62++) {
                const t81 = Array(36862, v61, v62 & v62);
                t81[2] = v31;
            }
            function f67() {
                return v29;
            }
            return f67;
        },
        __proto__: a56,
        [C3](a69, a70, a71) {
            a54 & a56;
            const v73 = super.e;
            const v74 = /jP?/vs;
            const v75 = /l/dsy;
            const v77 = Math.round();
            async function f78(a79, a80, a81) {
                try { a79.acosh(v73); } catch (e) {}
                try { a80(v74, v74, v75); } catch (e) {}
                return await v77;
            }
            return v57;
        },
    };
    function f86() {
        return f33;
    }
    function f87(a88) {
        const v90 = new Uint32Array(Uint32Array, Uint32Array);
        v90[Symbol.toPrimitive] = f86;
    }
    Object.defineProperty(o85, "constructor", { writable: true, get: f86, set: f87 });
    return o85;
}
const v94 = new Date();
function f97(a98, a99) {
    try {
        a99.e = v32;
    } catch(e100) {
    }
    return -8.58046580488072;
}
const v102 = Symbol.toPrimitive;
Set[v102] = f97;
const v103 = new Set();
v103.add(v94);
let [v105,,...v106] = v103;
function f107() {
    return gc();
}
v106.toString = f107;
v105.setUTCFullYear(v106, Set, -256);
const v112 = f53(-8.58046580488072, v46, v29)?.constructor;
function f113(a114) {
    const t134 = [1073741824,255,-93221804,1,268435440];
    t134.length = 4294967296;
    return 4294967296;
}
v112.toString = f113;
try { new v112(-8.58046580488072, -8.58046580488072); } catch (e) {}
f53(v46, v45, v29);
const v119 = v28?.constructor;
class C121 {
    [-55801.39760616061];
}
const v122 = new C121();
function f123() {
    v102.description **= -8.58046580488072;
    const v125 = new BigUint64Array();
    function f126(a127, a128) {
        return v125.filter();
    }
    return f126;
}
v122[Symbol.toPrimitive] = f123;
function f132(a133, a134) {
    return a133;
}
v122[Symbol.toPrimitive] = f132;
const o141 = {
    p(a138, a139) {
        for (const v140 in v122) {
        }
        return a138;
    },
};
let v142;
try { v142 = new v119(v46, v46); } catch (e) {}
f53(f53, v32, v142);
const v146 = [-21444.420261586667,2.0,2.0,-1e-15,-1000000000000.0,2.220446049250313e-16,-2.0];
const o147 = {
};
new Proxy(v146, o147);
const v150 = new BigInt64Array(128);
try { v150.join(128); } catch (e) {}
v150.indexOf(-11907, 4294967296);
