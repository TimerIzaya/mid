const v3 = WeakMap?.call;
let v4;
try { v4 = v3(9007199254740992n); } catch (e) {}
const v5 = new WeakMap();
try {
    v5.valueOf = v4;
} catch(e6) {
}
const v8 = new Array(127);
v8[37] = v8;
class C9 extends Array {
    static #g = v8;
    constructor(a11, a12) {
        eval(a11);
    }
    /*
    constructor(a19) {
        super(a19);
        try { Array.isArray(127); } catch (e) {}
        try {
            Array.#g = this;
        } catch(e21) {
        }
        for (const v22 in this) {
            this[Symbol.iterator] = 127;
            try {
                C9.#g;
            } catch(e27) {
            }
            const v28 = [Array];
            Reflect.apply(v8.filter, Array, v28);
        }
    }
    */
    static [v8] = Array;
    static f = Array;
    640;
    h;
}
new C9(127);
const v32 = new C9(C9);
const v33 = new C9(C9);
new Uint8ClampedArray(31);
new Int32Array(7);
new BigInt64Array(7);
-1.6885498751507235e+308 - -1.6885498751507235e+308;
140642.10995228658 + 140642.10995228658;
-9.541855845168355 - -9.541855845168355;
for (const v57 in v32) {
    Array && v33[1858];
    let v61 = 16;
    try {
        function f62(a63, a64, a65) {
            for (let i = 0; i < 5; i++) {
                v61 >>= 4;
            }
            f62();
            return 4;
        }
        f62();
    } catch(e68) {
    }
    let {"a":v69,"length":v70,} = "-9007199254740990";
}
new Uint8ClampedArray(5);
4092 >>> 4092;
const v75 = new BigUint64Array(4092);
const v78 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v79 = 2684;
const v81 = new Uint32Array();
const v83 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
let v84;
try { v84 = v83.fill(BigUint64Array); } catch (e) {}
const v85 = [601759695];
v79 = v84;
const v86 = [1073741824,1073741823,1376142744,1073741825];
v86[1] = v86;
function f88(a89, a90, a91, a92) {
    function f93() {
        function f95(a96) {
            return a96;
        }
        const o102 = {
            o(a98) {
                const o100 = {
                };
                gc(o100);
                return BigUint64Array;
            },
        };
        let v103 = Float64Array;
        v103 = a90;
        b = v85;
        const v104 = v78.length;
        try {
            v86.forEach(a90);
        } catch(e106) {
            e106.name;
        }
        const v108 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v110 = Symbol.toPrimitive;
        const o114 = {
            toString(a112, a113) {
                a112 *= v110;
            },
        };
        const o143 = {
            "c": -4294967297n,
            [522675525n](a117, a118) {
            },
            "c": v85,
            valueOf(a120, a121) {
            },
            ...v75,
            "f": 4092,
            "a": v104,
            o(a123, a124) {
                class C125 {
                }
                return "-15";
            },
            [v104](a127) {
            },
            "g": a91,
            "f": a89,
            "d": v85,
            "h": "-15",
            ..."-15",
            [-1]: v79,
            1073741824: v81,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "arguments": v108,
            [-4294967297n](a129, a130, a131, a132) {
                class C134 extends Date {
                    static get c() {
                        eval();
                    }
                }
                for (let v138 = 0; v138 < 5; v138++) {
                }
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v83,
            set b(a140) {
            },
            256: a92,
            m(a142) {
            },
            ...v85,
            "a": Int8Array,
            ..."-15",
            10: Uint8ClampedArray,
            __proto__: "-9007199254740990",
            1: o114,
        };
    }
    f93();
    eval("");
    %OptimizeFunctionOnNextCall(f93);
}
for (let v148 = 0; v148 < 10; v148++) {
    f88();
}
