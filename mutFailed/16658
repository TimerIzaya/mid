const v2 = new Int8Array(4);
function f5(a6) {
    -2 | -2;
    return a6;
}
Uint8Array[Symbol.iterator] = f5;
try { new Uint8Array(Uint8Array, Int8Array, 4); } catch (e) {}
new Uint8Array(127);
Uint8ClampedArray.valueOf = Symbol;
const v15 = new Uint8ClampedArray(1);
v15[0] = v15;
const v16 = /t((((.).).).)/gvdim;
const v17 = /dhxyz{93}a[a]lKd/gvisy;
const v18 = /\xf0\x9f\x92\xa9?/gvims;
function f19(a20, a21, a22, a23) {
    Object.defineProperty(a21, "find", { enumerable: true, value: a22 });
    a22.valueOf = Symbol;
    try { a21.find(1); } catch (e) {}
    a22 >>> a22;
    try { a23.test(Uint8Array); } catch (e) {}
    const o32 = {
        get a() {
            try { a21(...v15, this, a20, this); } catch (e) {}
            if (127 >= Uint8ClampedArray) {
                a21.__proto__;
            } else {
                v16[6];
            }
            return 4;
        },
        "b": Uint8Array,
        [4]: Int8Array,
        __proto__: v17,
    };
    o32.find = a21;
    return o32;
}
try { f19(4, 4, Uint8ClampedArray, 4); } catch (e) {}
const v34 = f19(v16, v2, 4, v17);
function f35() {
    return Symbol;
}
function f36(a37) {
    Float32Array[1] = -1e-15;
    class C40 extends Float32Array {
        constructor(a42, a43, a44) {
            super(a44);
        }
    }
}
Object.defineProperty(v34, "find", { get: f35, set: f36 });
const v45 = f19(v18, v34, 127, v17);
v45.tanh = f5;
v45[4];
const v47 = f19(v17, 127, 1, v17);
const v50 = new Int32Array(9);
v50.reverse()[8];
if (v47) {
    try { v45.tanh(v16); } catch (e) {}
} else {
    d = v17;
    typeof v18 === "object";
}
