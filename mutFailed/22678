const t0 = "symbol";
const v3 = new t0();
const o4 = {
    __proto__: v3,
};
class C6 {
    #m(a8) {
        try {
            a8.localeCompare(a8);
        } catch(e10) {
            const v11 = [-1245897732,-9,-356186296,128,12,1119687909,6,0,268435439,-2147483649];
            const v12 = [-1915908385,268435441,-4096];
            const o13 = {
            };
            const v14 = o13 ^ o13;
            let v15 = 9223372036854775807;
            v11.__proto__ = v12;
            v11.includes(++v15, v14);
        }
        return this;
    }
    o(a19) {
        ["symbol",[this,a19,[a19,"species",a19,this]]];
        class C25 {
        }
        async function f26(a27, a28, a29, a30) {
            (await C25).call(8, Uint16Array);
            return a28;
        }
        return C25;
    }
    static 1 = "symbol";
    static m(a37, a38, a39, a40) {
        try {
        } catch(e41) {
        }
    }
}
const v42 = new C6();
new C6();
new C6();
const v53 = new BigInt64Array(205);
const v56 = ("b").constructor;
try {
    v42.d = true;
} catch(e58) {
}
let v60;
try { v60 = Uint16Array(205, BigInt64Array, 256); } catch (e) {}
new Uint16Array(256);
const v62 = v53[205];
Math.acosh(65535);
class C67 {
}
const v68 = new C67();
function f69(a70, a71, a72) {
    const o73 = {
        ...v68,
    };
    return v68;
}
f69(v68, 205, C67);
0 >> 0;
try {
    v62.toString = v62;
    function f76() {
        const o90 = {
            "c": C6,
            ..."symbol",
            [v60]: 536870888,
            "g": "b",
            "f": 1073741824,
            "maxByteLength": 65535,
            [0.1566602898444699]: 0.1566602898444699,
            "type": "symbol",
            6: 0,
            "execution": "b",
            toString(a78, a79) {
                function F80(a82, a83, a84, a85) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.f |= a79;
                        a79.c;
                    } catch(e87) {
                        e87.stack;
                        Object.defineProperty(a78, 0, { writable: true, get: f76 });
                    }
                }
                new F80(this, a78, this, f76);
                return F80;
            },
        };
        return o90;
    }
} catch(e91) {
    function f93(a94, a95) {
        return a94;
    }
    class C96 {
        static {
            function f98() {
                return Int8Array;
            }
            const v99 = f98();
            f93(v99, v99);
        }
    }
    e91.message = e91;
}
v56 - 255;
Float64Array.BYTES_PER_ELEMENT;
const v105 = new Float64Array(255);
function F106(a108, a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    a109 >> a109;
    a111 | a111;
    try {
        v105.b = a110;
    } catch(e114) {
    }
    try {
        this.h = a108;
    } catch(e115) {
    }
}
const v116 = F106?.constructor;
try { new v116(v105); } catch (e) {}
const v118 = new F106(255, 205, 255, 205);
const v119 = new F106(255, 256, 255, 256);
new F106(255, 205, 256, 255);
const v122 = ([-Infinity,-5.577012134541006])?.filter;
try { new v122(Uint16Array); } catch (e) {}
const v124 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
[-2.220446049250313e-16,-171953.22769972356,2.220446049250313e-16,Infinity,-3.0,-4.368087235127776];
const v127 = [-6135,-37816,1634505153,-2147483649,10];
const v128 = [0.23449681451060211,-1.3180974566102865e+308,-2.0,-1000000000.0,0.6107310765455765];
const v130 = new Int16Array(v128);
for (let v132 = 0; v132 < 10; v132++) {
    1073741824 - 1073741824;
    ("number")[255];
    "number" | v128;
    v127.length;
    v130.__proto__;
}
const v140 = new Int8Array(1392);
v140.lastIndexOf(16);
const v142 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v143 = [Infinity];
const v145 = ([2.2250738585072014e-308,1.949684848262672,4.0]).push(v142);
const v147 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0]).toStringTag;
try { v143.every(v147, v119); } catch (e) {}
function F149() {
    if (!new.target) { throw 'must be called with new'; }
}
const v151 = new F149();
v151?.constructor;
this.onmessage |= 128;
v118.h >>>= v145;
v124.length;
