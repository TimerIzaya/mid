function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v6 = 0; v6 < 32; v6++) {
        this["p" + v6] = v6;
    }
    try { this.toString(); } catch (e) {}
    a5--;
    try {
        this.h = 56450;
    } catch(e11) {
    }
    try {
        this.f = 56450;
    } catch(e12) {
    }
}
new F3(56450);
new F3(56450);
const v15 = new F3(-1008841365);
v15.f = v15;
let v16 = 16;
v16++;
try { Uint8ClampedArray.bind(v16); } catch (e) {}
new Uint8ClampedArray(v16);
56450 << 0;
const v24 = new Int8Array(0);
const v25 = v24?.keys;
try { new v25(); } catch (e) {}
const t28 = 13;
new t28(6);
const v32 = new Float64Array();
256 != 256;
const v36 = new v16();
const v39 = /0j/vds;
try { v39.compile("Di0", "Di0"); } catch (e) {}
const v42 = v36[44610];
let v43;
try { v43 = v42(); } catch (e) {}
v32.toString = v43;
[3,4294967295,-49424,9007199254740991,-4,5851,-10,4096];
function f46(a47, a48) {
    a47.d = a47;
    try { new Symbol(); } catch (e) {}
    Symbol.toPrimitive;
    let v53 = 3;
    v53--;
    const v55 = Array();
    function f56() {
        return v32;
    }
    function f57(a58) {
        const o62 = {
            "execution": "async",
        };
        o62?.__lookupGetter__;
        try { new Symbol(o62); } catch (e) {}
        gc();
    }
    Object.defineProperty(v55, 0, { configurable: true, enumerable: true, get: f56, set: f57 });
    v55.unshift(v53, a47);
}
const v68 = new Promise(f46);
const v69 = v68?.finally;
try { new v69(44610); } catch (e) {}
