const v3 = [256,7,-1];
v3[1] = v3;
const v4 = [-14,42997,-1,-8786,65537,2147483648,1180415667];
const o8 = {
    "execution": "async",
    "type": "major",
};
-719.6662441520621 !== o8 ? -719.6662441520621 : o8;
[-65535,-63229,13,1073741824,4,-4294967295,127];
1073741823n * 1073741823n;
for (const v15 in v4) {
    Math.tan(-23394);
}
new Set();
("async").lastIndexOf();
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = this.constructor;
    try { new v29(this); } catch (e) {}
    a28++;
    this.g = this;
}
4096 - 4096;
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
function f36() {
    const o40 = {
        ...1.0,
        set b(a39) {
        },
    };
    return o40;
}
for (let v41 = 0; v41 < 5; v41++) {
    f36();
    %OptimizeFunctionOnNextCall(f36);
}
4096 + (Array || 0.4890055133608564);
new Float64Array();
const v51 = new Uint8Array();
const v53 = v51[44610];
let v54;
try { v54 = v53(); } catch (e) {}
v54.toString = v54;
v4.g = Uint16Array;
const v55 = new Uint16Array(4096);
v55.d = 44610;
class C57 extends Float64Array {
    [v4];
}
v55.fill(-10);
