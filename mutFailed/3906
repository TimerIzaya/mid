class C3 {
    [1073741824] = 1073741824;
    #o(a5, a6) {
        super.h;
        return a5 > 1073741824;
    }
    #p(a10) {
        const v11 = super[-9223372036854775807];
        function f12() {
            return v11;
        }
        return 1073741824;
    }
}
new C3();
const v14 = new C3();
new C3();
new Map();
let v26;
try { v26 = Map(); } catch (e) {}
const v27 = new Map();
function f28(a29, a30, a31, a32) {
    a31.arguments = a31;
    a29[3];
    a31.caller = v14;
    const o40 = {
        n(a35, a36, a37, a38) {
            for (let v39 = 0; v39 < 10; v39++) {
            }
        },
        16: a29,
        ...v27,
    };
    return o40;
}
const v41 = f28("m", "m", f28);
new Float64Array();
let v44 = 16;
v44++;
let v47;
try { v47 = BigInt64Array(); } catch (e) {}
new BigInt64Array();
~-4294967297n ^ -4294967297n;
const v53 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v54 = [601759695];
let v55;
try { v55 = v54.sort(v14); } catch (e) {}
v54[0] = v54;
const v56 = [1073741824,1073741823,1376142744,1073741825];
function f58(a59, a60, a61, a62) {
    v55.toString();
    function f65() {
        const v67 = ("Vre")?.toLocaleUpperCase;
        try { new v67(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v71 = -268435456;
        v71--;
        -(v71 + v71);
        const o88 = {
            "c": -4294967297n,
            [522675525n](a76, a77) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v54,
            valueOf(a79, a80) {
            },
            "e": -4294967295,
            "e": v71,
            "maxByteLength": -4294967295,
            "arguments": v53,
            ...v54,
            "type": "Vre",
            ..."Vre",
            valueOf(a82, a83) {
            },
            ..."-15988",
            4: "Vre",
            "c": v71,
            "type": "Vre",
            toString(a85, a86, a87) {
            },
            6: v71,
        };
        try { o88.valueOf(o88, -128); } catch (e) {}
        return "Vre";
    }
    f65.length;
    f65();
    const v93 = new Int8Array();
    try { v93.findIndex(v41); } catch (e) {}
    %OptimizeFunctionOnNextCall(f65);
    ("find").strike();
    try { v56["find"](..."find", a62, ...v54, ...v56, ...522675525n); } catch (e) {}
}
for (let v98 = 0; v98 < 5; v98++) {
    f58();
}
v47();
%OptimizeFunctionOnNextCall(v26);
f58();
