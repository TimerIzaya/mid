-9007199254740990n === -9007199254740990n;
1.992703169731687 % 1.992703169731687;
let v10 = -244190.7098991674;
v10--;
class C13 {
    [9n] = 1701658938;
    get b() {
        new Float64Array(255);
        new Int8Array(3205);
        new Float64Array(1);
        return Float64Array;
    }
    static #h;
    8 = 1.992703169731687;
}
C13.e = C13;
new C13();
new C13();
const v26 = new C13();
v26[9];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = F32;
    } catch(e34) {
    }
    try {
        this.f = false;
    } catch(e35) {
    }
    try {
        this.b = false;
    } catch(e36) {
    }
}
const v37 = new F32();
const v38 = v10?.g;
try { new v38(); } catch (e) {}
const v40 = new F32();
const v41 = new F32();
const v42 = [5.627129677109545e+307,850582.6346538318,-2.0,-Infinity,289.0197571670685,187.7306401241658,1e-15];
let v43;
try { v43 = v42.join(F32); } catch (e) {}
try { v43.trim(); } catch (e) {}
const v45 = [0.6612384037511738,2.2940008033736596];
try { v45.push(v41); } catch (e) {}
const v47 = [1000000000000.0,-1000000000000.0,3.173585042601135e+307,-5.0,-1e-15];
const v48 = v47[4];
-v48;
function f50(a51, a52, a53, a54) {
    const v55 = a54?.g;
    try { new v55(); } catch (e) {}
    const v57 = a51?.g;
    try { new v57(); } catch (e) {}
    a52[2] = a52;
    let v59 = a54?.g;
    v59.length = v59;
    Object.defineProperty(v59, v41, { set: f50 });
    v59 %= v45;
    const o60 = {
        "apply": f50,
        "call": f50,
        "deleteProperty": f50,
        "get": f50,
        "getOwnPropertyDescriptor": f50,
        "has": f50,
        "isExtensible": v48,
        "preventExtensions": f50,
        "set": f50,
    };
    new Proxy(v37, o60);
    try { new v59(); } catch (e) {}
    const o71 = {
        __proto__: v45,
        "h": v47,
        ...a51,
        [v37](a65, a66) {
            try { new a65(a53, a52, a54, a66); } catch (e) {}
            return 1350805809;
        },
        "c": v40,
        268435439: a51,
    };
    return o71;
}
const v72 = f50(v40, v47, v40, v37);
v72[2] = v72;
f50(v37, v42, v37, v40);
const v74 = f50(v40, v42, v37, v41);
v74.b = v74;
5 ^ 5;
try { new Int8Array(5, 182, false); } catch (e) {}
const v81 = -22631;
v81 | v81;
function f84() {
}
function f85() {
    const o90 = {
        "b": f84,
        valueOf() {
            try { this.b(); } catch (e) {}
            try { this.b(); } catch (e) {}
            [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        },
    };
    try { o90.b(); } catch (e) {}
    return o90;
}
const v92 = f85();
try { v92.valueOf(); } catch (e) {}
try { v92.b(); } catch (e) {}
const v95 = v92?.b;
let v96;
try { v96 = v95(); } catch (e) {}
new v95();
const v98 = ("bigint")?.toLocaleString;
try { new v98(); } catch (e) {}
try { new Uint8Array(v96, v41, v41); } catch (e) {}
new Uint8Array(268435440);
try { ("function").toLocaleLowerCase(); } catch (e) {}
const v106 = ("function").length;
v106 == v106;
const v108 = f85();
function F109(a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.b(); } catch (e) {}
    try { a111.valueOf(); } catch (e) {}
    const v115 = a111?.constructor;
    v115.caller;
    try { new v115(a111, a111); } catch (e) {}
    new Uint16Array(v106);
}
new F109(v108);
