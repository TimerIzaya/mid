function f0() {
    const o13 = {
        toString(a5) {
            const v7 = this.__proto__ | this;
            try { a5(v7, v7, v7); } catch (e) {}
            return v7;
        },
        p(a10, a11) {
            a11?.[a11];
            return this;
        },
        2565: "e",
        ..."e",
    };
    return o13;
}
const v14 = f0();
const v15 = f0();
const v16 = f0();
class C20 {
    constructor(a22, a23, a24, a25) {
        try {
            const v26 = [this,v14,a22,a24,1194039576n];
            function f27() {
                Symbol.toPrimitive;
                const o35 = {
                    "e": -268435456,
                    valueOf(a33, a34) {
                    },
                    6: -268435456,
                };
            }
            this.fuck(a25, a25, v26);
        } catch(e37) {
        }
        const v38 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
        function F39() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const v43 = Array(19793);
                for (const v44 of v43) {
                }
                [v43,v43,v43];
                [[]] >= Uint16Array;
            } catch(e50) {
                [];
                v38.findLastIndex;
            }
        }
        new Uint8ClampedArray(356);
        const v58 = new Uint8Array(1010);
        const o59 = {
            268435439: Uint8Array,
            ...v58,
        };
        new BigUint64Array(64);
        new Uint32Array(220);
    }
}
const v66 = new C20(f0, C20, v16, v16);
const v68 = new Int16Array(Int16Array, Int16Array, Int16Array);
function f69() {
    const o70 = {
        "g": v66,
        ...v68,
    };
    return 128n;
}
for (let v71 = 0; v71 < 5; v71++) {
    f69();
    %OptimizeFunctionOnNextCall(f69);
}
new C20(128n, v66, v66, v14);
new C20(v15, v66, v15, v14);
[-4294967295,4294967297,65535];
const v76 = [14,-4294967297,22245,-65537,-9007199254740992,-16];
[-306881749,-10,-11659,-1,59334];
function F78() {
    if (!new.target) { throw 'must be called with new'; }
}
class C80 extends F78 {
    static {
        try {
            this.fuck(this, this, F78);
        } catch(e83) {
        }
    }
    3164398692 = v66;
    static n(a85, a86, a87) {
        v76.#e;
    }
    constructor(a90) {
    }
    static 10;
}
