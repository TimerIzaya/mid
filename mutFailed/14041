const v3 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v3[2] = v3;
new Uint8Array(v3);
const v6 = [-9223372036854775808];
for (let v7 = 0; v7 < 32; v7++) {
    v6["p" + v7] = v7;
}
[2.220446049250313e-16,-3.0,0.2746169871090792,-4.0];
[-1000000000.0,3.0,1000000000.0,6.769785902706097,417544.6332627719,-0.0];
[1.548504874013777e+308,3.0,250.83892152156318,2.2250738585072014e-308,-1000000.0,5.0,-2.2250738585072014e-308];
[44796,47562,-9007199254740991,-28137,755586450,4294967296,-256,15];
[1,-65537,257,32621,256,13232,-4294967297,-28856];
[1324465657,10158,268435440];
try { WeakMap.apply(Int32Array, Date); } catch (e) {}
[723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
for (let v24 = 0; v24 < 20; v24++) {
    let [,v25,...v26] = v6;
}
const v27 = [7.554475698528474];
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
class C35 {
    constructor(a37, a38) {
        try {
            a38.length = 5;
        } catch(e40) {
        }
    }
}
new C35("object", "object");
Object.defineProperty(Uint8ClampedArray, 1, { value: v27 });
class C44 {
    static {
        for (let v46 = 0; v46 < 25; v46++) {
            function f47() {
                return C44;
            }
            const v48 = [601759695];
            const v49 = [1073741824,1073741823,1376142744,1073741825];
            function f51(a52, a53, a54, a55) {
                function f57() {
                    return a52;
                }
                f51();
                const v60 = new Int8Array();
                const v63 = new Uint32Array(4);
                [v63];
                const v67 = BigUint64Array * 536870887;
                v67 ** v67;
                function f69(a70, a71) {
                    return 536870887;
                }
                f69();
                const v73 = v60.buffer;
                Object.defineProperty(v73, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v73.slice(2147483648);
                %OptimizeFunctionOnNextCall(f57);
                let v78;
                try { v78 = v49["find"](..."find", a55, ...v48, ...v49, ...522675525n); } catch (e) {}
                Symbol("find");
                const v82 = new Uint8ClampedArray();
                const o83 = {
                    ...v82,
                };
                v78 <= a54;
                return arguments;
            }
            for (let v85 = 0; v85 < 5; v85++) {
                f51(this, v85, v85, v85);
            }
        }
    }
}
new Float64Array(1073741824);
