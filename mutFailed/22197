let v0 = "undefined";
function F3() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = true;
    } catch(e5) {
    }
    try {
        this.b = true;
    } catch(e6) {
    }
}
const v7 = new F3();
new F3();
const v9 = new F3();
const v10 = [1e-15,0.09547881173263595,1.7976931348623157e+308,0.6658730271969261,-1000.0];
const v11 = [-8.040080448070657e+307,3.8894071891937223,0.7715929616276889];
let v12;
try { v12 = v11.with(v9, v9); } catch (e) {}
v12.c = v12;
v12[2] = v12;
const v13 = [1.6621172782957435e+308,937862.0109722319];
try { v13.find(v11); } catch (e) {}
const v16 = 3154 >>> 3154;
const v18 = new Int32Array(3154);
function f19(a20, a21) {
    const v25 = new Uint16Array(3225);
    for (const v26 of v25) {
        v26[3] = 5n;
        9007199254740991 * v26;
    }
    return a21;
}
v18[Symbol.toPrimitive] = f19;
v18[1700] = v18;
try { BigInt64Array.bind(v16); } catch (e) {}
const v34 = new BigInt64Array(257);
const v36 = 198 === 198;
v36 && v36;
const v39 = new Int32Array(3154);
let v40;
try { v40 = v39.entries(); } catch (e) {}
try { Uint16Array.bind(v9); } catch (e) {}
const v44 = new Uint16Array();
Uint8ClampedArray.constructor = Symbol;
Uint8ClampedArray.BYTES_PER_ELEMENT;
const v48 = new Uint8ClampedArray(3, v10);
class C49 {
    constructor(a51, a52, a53, a54) {
        Object.defineProperty(this, "constructor", { writable: true, enumerable: true, value: f19 });
        function f55() {
            class C56 {
                m(a58, a59, a60) {
                    try {
                        const o61 = {
                        };
                    } catch(e62) {
                    }
                }
            }
            const v64 = Date();
            for (let v65 = 0; v65 < 5; v65++) {
                const v66 = v65 + v65;
                try { C56.p(v64, v66); } catch (e) {}
            }
            return a52;
        }
        a53.constructor = f55;
        this.e = this;
        const v68 = a53?.constructor;
        try { new v68(a54); } catch (e) {}
        try {
        const t0 = 128;
        t0();
        } catch (e) {}
        for (let i72 = 0;
            (() => {
                9 != 9;
                const v75 = -9;
                v75 + v75;
                return i72 < 9;
            })();
            i72++) {
            v48[i72] = a54;
        }
    }
    c;
}
C49.valueOf = f19;
try { new C49(3, Uint8ClampedArray, Uint8ClampedArray, v44); } catch (e) {}
let v82;
try { v82 = new C49(v40, v34, Uint16Array, C49); } catch (e) {}
v82.h = v82;
v82.h = v82;
const v83 = new C49(v48, Uint8ClampedArray);
v12.c;
const v85 = new C49(v83, BigInt64Array);
try { v85.constructor(v7, v7, 198, v39); } catch (e) {}
v85.c;
const v89 = [65537,1073741825,7841,-12,13];
const v90 = [1073741823,4294967295];
v90[1] = v90;
function F91(a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = this.constructor;
    try { new v96(a93, a94, a94); } catch (e) {}
}
const v98 = new F91(v89, v90, WeakSet);
new F91(v90, v90, v98);
class C101 {
    valueOf(a103) {
        +a103;
        return -5;
    }
    p(a106) {
        for (let v107 = 0; v107 < 32; v107++) {
            function f109() {
                function f111(a112) {
                    [a106];
                    [v107];
                    [v107];
                }
                this.onmessage = f111;
                v0 = "p";
            }
            const v118 = [];
            const o119 = {
                "arguments": v118,
                "type": "function",
            };
            new Worker(f109, o119);
            this["p" + v107] = v107;
        }
        try { this.valueOf(a106, this); } catch (e) {}
        return -5;
    }
}
const v123 = new C101();
const v124 = new C101();
const v125 = new C101();
Object.defineProperty(v125, Symbol.toPrimitive, { writable: true, configurable: true, value: f19 });
C101 ||= v123;
v125[1] &&= -5;
let v128;
try { v128 = v124(v124); } catch (e) {}
try { new v128(v0); } catch (e) {}
C101.h;
class C131 {
    static {
        new Float32Array(9);
        new Uint8ClampedArray(1024);
        new Uint16Array(677);
    }
    16 = v124;
}
try {
    v124.e = -5;
} catch(e142) {
}
v0++;
new C131();
const v145 = new C131();
v145.valueOf = Symbol;
new C131();
class C147 {
    constructor(a149, a150, a151) {
        a151[Symbol.toPrimitive] = Symbol;
        a149 / v124[a151];
    }
    static #valueOf(a157, a158) {
        try { C131["race"](); } catch (e) {}
        return a157;
    }
    [v0];
    static #h = v0;
    #f = v124;
}
const v161 = new C147(v145, C131, v123);
const v162 = new C147(v125, v161, v125);
new C147(v162, v123, v125);
0 == 268435440n;
