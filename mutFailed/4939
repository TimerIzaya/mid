[-1073741824,127,-2147483647,687331041,564892552,-65535,15928,31002,2];
[-1855572791,-1,-273299434,9223372036854775807,-256,-9007199254740990,129,1011439294,65537,2];
const v2 = [4294967295,-10014,13,10000,65535,-65536,8];
const v5 = new Int8Array(8);
935 % 935;
Float64Array.name = Float64Array;
const v9 = new Float64Array(935);
const v10 = v9?.constructor;
try { new v10(Int8Array, v2, v2); } catch (e) {}
let v14;
try { v14 = new BigUint64Array(v2, v5, Int8Array); } catch (e) {}
const v15 = new BigUint64Array(4);
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    const v18 = this?.constructor;
    try { new v18(); } catch (e) {}
}
new BigUint64Array();
const v21 = new F16();
v21.e = v21;
const v22 = new F16(8, 935);
v22.e = v22;
v14.b = 935;
class C24 {
    static get b() {
    }
    static 182 = F16;
    static g;
    static #b = v21;
}
new C24(8, v15, v21);
new C24();
const v28 = new C24();
v28?.constructor;
try { new Float64Array(); } catch (e) {}
try {
    v22.b = v28;
} catch(e31) {
}
const v33 = v14 <= C24 ? 6.921221993207333e+307 : C24;
let v34;
try { v34 = C24(4, v33); } catch (e) {}
try { v34(); } catch (e) {}
