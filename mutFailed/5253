const v0 = [];
function f1(a2, a3) {
    function f7() {
        let v9 = 1000000000000.0;
        const v10 = v9--;
        -v10;
        class C15 {
            constructor(a17) {
                const v19 = new Float32Array();
                try { v19.entries(); } catch (e) {}
                const v21 = new Uint16Array(12, -4294967296, v10);
                new Float32Array(v21, -4294967296, 268435439, v9, v21);
            }
        }
        try { new C15(12); } catch (e) {}
        const v24 = new C15(257828.6336153492);
        const v25 = new C15();
        const v26 = new C15(-4294967296);
        const v27 = [v26,C15];
        [257828.6336153492,v26,v24,v26,v27];
        const v29 = [v26];
        class C30 extends C15 {
            [v24];
        }
        const v31 = new C30();
        const v32 = v29.constructor;
        try { v32.isArray(v29); } catch (e) {}
        class C34 extends v32 {
        }
        C34.a = C34;
        const v35 = new C34();
        const v36 = v35?.constructor;
        try { new v36(); } catch (e) {}
        Object.defineProperty(v35, 65537, { value: v25 });
        try { v31.m(v27); } catch (e) {}
        return Int32Array;
    }
    f7();
    return v0;
}
v0[Symbol.toPrimitive] = f1;
function f51(a52, a53) {
    const o72 = {
        valueOf(a55, a56, a57, a58) {
            try {
                super.valueOf(a56);
            } catch(e61) {
            }
            return -2n;
        },
        __proto__: v0,
        p(a63, a64, a65) {
            try { a52(a65); } catch (e) {}
            -2147483649n - v0;
            let [v68,v69,v70] = v0;
            try {
                v70.__proto__ = v70;
            } catch(e71) {
            }
            return a64;
        },
    };
    return o72;
}
f51(1, 65535);
f51(10, 1);
f51(65535, 10);
class C76 {
    o(a78, a79, a80) {
        class C81 extends f51 {
            static [65535] = 65535;
            static #a;
            #d;
        }
        const v82 = new C81();
        new C81();
        new C81();
        return v82;
    }
    g;
    [1073741824n] = f51;
    [v0];
    13;
}
new C76();
new C76();
new C76();
function F88(a90) {
    if (!new.target) { throw 'must be called with new'; }
}
new F88();
class C92 {
    g;
    constructor() {
        const v94 = this.constructor;
        try { new v94(); } catch (e) {}
    }
}
new C92();
