new Int8Array(14);
new Uint8Array(64);
const v11 = new Int16Array(255);
class C12 extends Int8Array {
    p(a14, a15, a16) {
        const v18 = new Set();
        try {
            v18.size = 255;
        } catch(e19) {
        }
        return v11;
    }
    static #a = -51150.77262053802;
    [64] = Int16Array;
    h = -51150.77262053802;
    #c = 855.825692462291;
}
new C12();
new C12();
new C12();
function f23() {
    return f23;
}
[8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
const v25 = [-5.83623517593701,-1.0,-1e-15];
const v26 = [692.912813481568,126686.58689393173];
function f29(a30, a31) {
    const o35 = {
        [a30](a33, a34) {
        },
    };
    return o35;
}
const v36 = f29(Uint8Array, 128);
f29(v26, -3);
const v38 = f29(v25, 128);
/j(x)(x)(x)\2/gud;
/[\0](?:ab|cde)/vimsy;
const v41 = /^xxx$/uisy;
let v42;
try { v42 = v36.p(); } catch (e) {}
try { v38["n"](v41, "n", f29, "n"); } catch (e) {}
new Uint32Array(91);
new Int16Array(v42);
const t44 = 127;
new t44(127);
