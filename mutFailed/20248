let v0 = -15;
let v2 = "string";
class C3 {
    static 0;
    static 3;
    n(a5) {
        v2 &= this;
        return 1.7976931348623157e+308;
    }
    static #toString(a7, a8) {
        let v10 = 10000;
        const o11 = {
        };
        for (const v12 in o11) {
        }
        const o16 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o16);
        Math.round(++v10);
        a7 & a8;
        Math.exp(--v0);
        v0 >> v10;
        function F25() {
            if (!new.target) { throw 'must be called with new'; }
        }
        super(o11);
        class C27 {
            constructor(a29, a30) {
                function f31(a32) {
                    function f33(a34) {
                    }
                    const v37 = new Uint16Array(1024);
                    v37[7] = v37;
                    return C27;
                }
                const o40 = {
                    "type": "function",
                };
                new Worker(f31, o40);
            }
        }
        super[a7];
        super[v0];
        return v2;
    }
    valueOf(a45) {
        const o49 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o49);
        return gc;
    }
    2147483647;
    toString(a52, a53) {
        this.constructor(a52);
        -this;
    }
    static #e;
    g;
}
new C3();
new C3();
const v58 = [601759695];
const v59 = [1073741824,1073741823,1376142744,1073741825];
function f60(a61, a62, a63, a64) {
    try {
        v59.forEach(a62);
    } catch(e66) {
    }
    const v68 = new Int8Array();
    const v71 = new Int32Array(1024);
    v71[3];
    let [v73] = v68;
    try { v59["find"](..."find", a64, ...v58); } catch (e) {}
}
for (let v76 = 0; v76 < 10; v76++) {
    f60();
}
new C3();
[1.7976931348623157e+308,-Infinity,1.7976931348623157e+308,1.0,-2.2250738585072014e-308];
[-934.9008939375707,0.5470053713854492,9.852242628636748,3.0,977102.4062563123,0.712804973439978,-672554.5569448462];
[3.0];
function F85() {
    if (!new.target) { throw 'must be called with new'; }
}
const v87 = new F85();
const v88 = [6.345269750596144e+307,1.5426121797865451e+308,-1.0,1.0763754168130034e+308,-1.0165609707268582e+308,-2.220446049250313e-16,4.1652134965708285,Infinity,8.22884515469082e+307,-1000000000.0];
const v89 = [-2.0];
function F91(a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = this.constructor;
    try { new v96(v87); } catch (e) {}
    a93[3] = a93;
}
new F91(v88);
new F91(v89);
