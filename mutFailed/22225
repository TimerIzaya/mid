/AK(a)/gudim;
const v4 = /2Ux^/ui;
const v5 = /(?:a+)+/vmy;
v5.sticky = v5;
const v7 = new Int32Array();
v7.reverse();
v4.constructor;
function F10(a12) {
    if (!new.target) { throw 'must be called with new'; }
    function f13(a14, a15, a16) {
        function f18(a19) {
            return a14;
        }
        a15 > a12;
        f18 && a14;
        return a12;
    }
    Worker(f13);
}
new v5(12);
const v31 = new Uint8Array(127);
v31[115] = v31;
const v34 = new Uint8ClampedArray(1000);
v34[954];
-16 >> -16;
[-16,-16,-16];
function f41(a42) {
    class C43 {
        constructor(a45, a46) {
        }
    }
    return 536870888;
}
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
}
class C53 {
}
for (let v54 = 0; v54 < 5; v54++) {
    function f55() {
        try { (127).from(536870888); } catch (e) {}
        const v58 = Array();
        try { v58.toString(); } catch (e) {}
        const v60 = v58.unshift();
        v58.length;
        Math.atan(0.6146752851534484);
        function f65(a66, a67, a68, a69) {
            Math.round();
            return Math;
        }
        f65(f65, f65, f65, f65);
        v60 / v60;
        try {
        } catch(e74) {
        }
        const o75 = {
        };
        const v77 = [];
        try { v77.filter(v60); } catch (e) {}
        function f79() {
        }
        Symbol.b = Symbol;
        function F81(a83) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C84 extends F81 {
            valueOf(a86, a87, a88, a89) {
                const v90 = this?.constructor;
                try { new v90(); } catch (e) {}
                const v92 = this?.constructor;
                new Float32Array();
                const v95 = [601759695];
                const v96 = [1073741824,1073741823,1376142744,1073741825];
                let v98;
                try { v98 = v96["find"](..."find", 127, ...v95); } catch (e) {}
                return v98;
                try { new v92(); } catch (e) {}
                try { new v92(); } catch (e) {}
                const t78 = Object(16);
                t78[Symbol.replace] = f55;
            }
        }
        const v105 = new C84();
        try { v105.constructor(); } catch (e) {}
        const o113 = {
            set g(a108) {
            },
            [v77](a110, a111, a112) {
            },
        };
        for (const v114 in o113) {
            try { ("function").endsWith(v54); } catch (e) {}
            try { v105.valueOf(v114); } catch (e) {}
        }
        const v118 = [0.0,1000000000.0,168.7956281727238,-575464.6142395872,-1000000000.0,938.6271876998214];
        const v121 = new Float64Array(64);
        [v121,v118];
        const v125 = [];
        const v126 = [-2.0,272822757,"function"];
        v126.toString = Symbol;
        const o127 = {
            __proto__: v126,
        };
        try { o127.groupToMap(v54); } catch (e) {}
        v125[o127] &= 272822757;
        Date > "undefined";
        class C133 {
            constructor(a135, a136) {
                Date | a135;
            }
        }
    }
    const v138 = f55?.constructor;
    try { new v138(v34); } catch (e) {}
    try { f55(); } catch (e) {}
    f55();
    %OptimizeFunctionOnNextCall(f55);
}
