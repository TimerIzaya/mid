function f0() {
}
function f1() {
    const o4 = {
        1000: f0,
        toString() {
            function f3() {
                return this;
            }
            return f0;
        },
        __proto__: f0,
        "b": f0,
        "d": f0,
        "e": f0,
    };
    return o4;
}
f1();
f1();
f1();
new Float32Array(2);
let v14 = 255;
v14 | v14;
const v16 = v14--;
v16 + v16;
const v19 = new BigInt64Array(v14);
try { v19.entries(); } catch (e) {}
try { v19.toSorted(BigInt64Array); } catch (e) {}
424 * 424;
424 ^ 424;
new BigUint64Array(424);
7 + 7;
class C31 {
    static #toString(a33) {
        let v34 = 0;
        while (v34 < 3) {
            Math.random();
            Math.sin(this);
            ++v34;
            Math.clz32(this);
            --v34;
            !1680472700;
            v34++;
        }
        return 7;
    }
}
C31.name = C31;
try {
    C31.valueOf = "number";
} catch(e47) {
}
Math.LN10;
13 === 13;
const v53 = 3 & 7;
const v54 = 7 & C31;
let v55 = Math.log2(13);
v55 << v55;
const v57 = C31 << 7;
v57 - v57;
const v59 = v54 | 13;
v59 & v59;
v59 || v53;
const v62 = new C31();
const v63 = v62?.constructor;
try { new v63(); } catch (e) {}
let v65;
try { v65 = v62.propertyIsEnumerable(v62); } catch (e) {}
v65 && v65;
const v67 = new C31();
const v68 = v67?.constructor;
v68.length = v68;
try { new v68(); } catch (e) {}
const v70 = new C31();
class C71 extends C31 {
    static [v70] = "symbol";
    static [v67];
    static set g(a73) {
        super.d = a73?.["symbol"];
    }
    static 6 = v70;
    static o(a76, a77, a78) {
        const v79 = v70[4];
        try {
            new C31(v79);
        } catch(e81) {
        }
        return a77;
    }
}
C71[6];
const v83 = new C71();
const v84 = v83?.constructor;
try { new v84(); } catch (e) {}
let v86;
try { v86 = v83.hasOwnProperty(424); } catch (e) {}
!v86;
const v88 = new C71();
const v89 = v88?.constructor;
try { new v89(); } catch (e) {}
const v91 = v88?.__defineSetter__;
try { new v91(v83, v83); } catch (e) {}
const v93 = new C71();
const v94 = v93?.constructor;
try { new v94(); } catch (e) {}
const v96 = v93?.constructor;
try { new v96(); } catch (e) {}
class C98 extends C71 {
    #m(a100, a101, a102, a103) {
        const o104 = {
        };
        try {
            o104.a = this;
        } catch(e105) {
        }
        try {
            const o106 = {
            };
            o106.a = this;
            o106.__proto__ = 7;
        } catch(e107) {
        }
        try {
            const o108 = {
            };
            o108.a = this;
            o108.e = 7;
            o108.b = v70;
        } catch(e109) {
        }
        try {
            const o110 = {
            };
            o110.a = this;
            o110.e = 7;
            o110.d = this;
        } catch(e111) {
        }
        return "symbol";
    }
}
try { new C98(); } catch (e) {}
let v113;
try { v113 = new C98(); } catch (e) {}
const v114 = v113?.constructor;
try { new v114(); } catch (e) {}
new C98();
const v117 = new C98();
const v118 = v117?.constructor;
try { new v118(); } catch (e) {}
try { v117.constructor(); } catch (e) {}
let v124 = v57 / -4.0;
const v125 = v55++;
const v126 = v125 << v125;
v126 * v126;
const v128 = v124--;
v128 + v128;
const v130 = v125 ** v57;
~(v130 - v130);
v124 * v57;
const v134 = new C98();
const v135 = v134?.constructor;
try { new v135(); } catch (e) {}
~10;
const v140 = new Uint16Array();
try { v140.entries(); } catch (e) {}
function F142(a144, a145, a146) {
    if (!new.target) { throw 'must be called with new'; }
}
-4294967297n >> -4294967297n;
for (let v150 = 0; v150 < 25; v150++) {
    const v151 = -v150;
    v151 * v151;
    const v153 = [-587,-11,-5];
    v153[2] = v153;
    const v154 = v153.filter;
    try { v154.toString(); } catch (e) {}
    let v156;
    try { v156 = v154(); } catch (e) {}
    const v157 = [1073741824,1073741823,1376142744,1073741825];
    function f158(a159, a160, a161, a162) {
        try { a161.findIndex(a161); } catch (e) {}
        a159 == a159;
        let v165;
        try { v165 = a161.entries(); } catch (e) {}
        const v166 = v165?.next;
        try { new v166(); } catch (e) {}
        -a159;
        a160 >>> a160;
        let v170 = a159 >>> a159;
        v170--;
        ~v170;
        let [] = v157;
        "toSorted" == "toSorted";
        let v175 = v140["toSorted"]();
        v156 <= v128;
        v175 = -4.0;
        const v177 = v170 | v170;
        const v178 = v177 / v177;
        v178 + v178;
        const v180 = a161[3];
        v180 >> v180;
        v180 + v180;
        try { v157["find"](..."find", a162, ...v153); } catch (e) {}
    }
    const v185 = f158?.apply;
    try { new v185(v154, v86); } catch (e) {}
    for (let v187 = 0; v187 < 10; v187++) {
        const v188 = v187 - v187;
        v188 >>> v188;
        f158(v187, v187, v157);
    }
}
