[4,-65537,-61339,339238555,9007199254740992,-9223372036854775808,13,16];
[0];
[-65535,33192];
[-2658,-545514898,-7,-5,2039502882,-5,255];
[2147397299,16,9223372036854775807,127,-1,1,1425713119];
[287039711,536870889];
new Array(7);
function f13(a14, a15, a16, a17) {
    return a15;
}
const v18 = f13();
let v19 = -4294967297n;
v19++;
const v22 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v23 = [601759695];
const v24 = [1073741824,1073741823,1376142744,1073741825];
function f26(a27, a28, a29, a30) {
    function f32(a33) {
        return a33;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f32 });
    function f34() {
        let v37 = -268435456;
        v37--;
        const o50 = {
            "c": v19,
            [522675525n](a40, a41) {
            },
            "maxByteLength": -128,
            "c": v23,
            "b": -4294967295,
            ...v19,
            __proto__: -128,
            get d() {
                return v19;
            },
            "e": v37,
            "maxByteLength": -4294967295,
            "arguments": v22,
            ...v23,
            "type": "Vre",
            ...v37,
            valueOf(a44, a45) {
            },
            "c": v37,
            "type": a27,
            "type": "Vre",
            toString(a47, a48, a49) {
                return a48;
            },
            5: a29,
            6: v37,
        };
        try { o50.valueOf(); } catch (e) {}
        return v23;
    }
    const v52 = f34();
    Int8Array.a = Int8Array;
    Math.log1p(a30);
    try { Reflect.defineProperty(Reflect, a27, v24); } catch (e) {}
    try { new Int8Array(a28); } catch (e) {}
    Int8Array.a = Int8Array;
    const v59 = new Int8Array(v24, a28);
    let v60;
    try { v60 = a27.findIndex(v18); } catch (e) {}
    const v61 = v59.buffer;
    function f62(a63) {
        return f62;
    }
    f62.constructor = f13;
    const v64 = f62.constructor;
    try { v64(); } catch (e) {}
    v61.constructor = f62;
    v61.slice();
    %OptimizeFunctionOnNextCall(f34);
    let v68;
    try { v68 = ("find").strike(v60, v64, arguments, Int8Array); } catch (e) {}
    let v69;
    try { v69 = v68.match(v22, a30); } catch (e) {}
    const o70 = {
    };
    o70.e = v22;
    o70.e = a28;
    const o71 = {
    };
    o71.g = v69;
    o71.g = v19;
    try {
        let o72 = {
        };
        function f73(a74) {
            o72 = a74;
            return a74;
        }
        Object.defineProperty(o72, "g", { set: f73 });
        o72.e = a28;
    } catch(e75) {
    }
    try {
        const o76 = {
        };
        function f77(a78) {
            return arguments;
        }
        Object.defineProperty(o76, "g", { writable: true, set: f77 });
    } catch(e79) {
    }
    try { v52["find"](..."find", a30, ...v23, ...v24, ...522675525n); } catch (e) {}
    return -128;
}
for (let v81 = 0; v81 < 5; v81++) {
    v18();
}
%PrepareFunctionForOptimization(f26);
f26();
%OptimizeFunctionOnNextCall(f26);
f26();
