const v2 = new Array(2500);
const v8 = new Int32Array();
const v11 = new Int8Array();
const v14 = new ReferenceError();
function f15(a16, a17, a18, a19) {
    a16 - a16;
    a17 >> a17;
    a18 | a18;
    const v23 = a19 >>> a19;
    const v24 = a17 - a17;
    v24 >>> v24;
    try {
        for (let v26 = 0; v26 < 50; v26++) {
            for (let v27 = 0; v27 < 25; v27++) {
                v8["p" + v27] = v27;
            }
        }
    } catch(e30) {
    }
    a18 & a18;
    a19 & v23;
    const o43 = {
        [616]: Int32Array,
        "b": Int32Array,
        10: v11,
        __proto__: v2,
        "maxByteLength": v23,
        "g": a18,
        [v8]: a18,
        "d": Int32Array,
        copyWithin(a34, a35) {
            4096 | v14;
            v14[110];
            !-1440192970;
        },
    };
    return o43;
}
f15();
f15(4096, 4096);
/(?: foo )/gvdims;
/(abc+5?)/vdms;
/a(?=b)coMxyz{93}/vdisy;
function f54(a55, a56, a57, a58) {
    try {
        f54(a55, a56, a58, a58);
    } catch(e60) {
        ~10;
        f15++;
        const v64 = [155533.8602852358,2.0];
        for (const v69 of Array(2.038356158770542)) {
            v64[658291203] = v69;
            Math.g = Math;
            Math.cbrt();
            const v73 = Array || 0.4890055133608564;
            v73 + v73;
        }
    }
    for (let v75 = 0; v75 < 5; v75++) {
        a58--;
    }
    return a56;
}
f54(f54, f54, f54, f54);
