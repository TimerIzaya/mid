class C3 {
    static f;
    static #n(a5, a6, a7, a8) {
        this[257] *= 1073741825;
    }
    get d() {
        this[7] |= 1073741825;
        1073741825 & this;
        return 11716;
    }
    static m(a14) {
        super.d;
        return -11;
    }
}
const v19 = new C3();
const v20 = new C3();
const v21 = new C3();
class C22 extends C3 {
    static [v19] = v21;
    constructor(a24, a25, a26) {
        super();
        new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
        const v31 = Math.round();
        async function f32(a33, a34, a35) {
            await v31;
            Number.isNaN();
            const t25 = [0.8307152163010869,1.0,0.0];
            t25.length = 1073741825;
        }
        C3 |= a25;
        super.d = v19;
        try {
            v20.fuck(this, a26, a25);
        } catch(e41) {
        }
        let v42 = -1.0;
        const v43 = v42++;
        const v44 = v43 - v43;
        try { Reflect.set(v44); } catch (e) {}
    }
    ["uM"] = C3;
    static 184;
}
const v47 = new C22(v19, v20, v19);
const v48 = new C22(C22, v21, v20);
new C22(v48, v47, v19);
function f50() {
    return v19;
}
function f59(a60, a61) {
    const v62 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
    class C63 {
    }
    const v64 = C63.constructor;
    try { v62.some(v64); } catch (e) {}
}
try {
    class C68 extends [BigUint64Array,BigUint64Array,BigUint64Array,BigUint64Array] {
    }
} catch(e69) {
    class C70 {
    }
    new C70();
    const o72 = {
    };
}
