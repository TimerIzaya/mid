new Int8Array(Int8Array);
const v5 = new Int8Array(255);
for (let v10 = 0; v10 < 32; v10++) {
    v5["p" + v10] = v10;
}
new Uint32Array(v5);
~-5;
const v17 = Uint32Array - -5;
v17 % v17;
const v21 = ~46052;
v21 >>> v21;
class C24 {
    static {
        function f26() {
            return this;
        }
        f26.d = f26;
        const v27 = f26.name;
        try { v27.sup(); } catch (e) {}
        function f29(a30) {
            return f29;
        }
        Object.defineProperty(this, 256, { configurable: true, get: f26, set: f29 });
    }
    static [256];
    static 5 = -41522n;
    static 0 = 7n;
    b = -41522n;
    static [C24];
    [256] = 255;
}
let v31;
try { v31 = new C24(); } catch (e) {}
const v32 = v31?.constructor;
try { new v32(); } catch (e) {}
