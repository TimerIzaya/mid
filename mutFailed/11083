const v0 = [];
new Int8Array(1785);
const v5 = new Map();
function f6(a7, a8) {
    const o14 = {
        "a": a8,
        [a7]: v5,
        [v5]: Map,
        ...v5,
        "b": a7,
        [a8]: Map,
        "h": a7,
        146: v5,
        valueOf(a10) {
            this || this;
            this.__proto__;
            new Map(this);
            return this;
        },
    };
    return o14;
}
const v15 = f6(v5, f6);
f6(f6(v15, Map), v15);
f6(1785, 1785);
const v19 = [-1024,-1668576625,-463127135,-38329,-1947745830,2,9007199254740992,14031];
[65253,3];
[5,-65535];
function f23(a24, a25) {
    -128 >>> -128;
    return -128;
}
const v34 = new Set();
try { BigInt64Array(BigInt64Array); } catch (e) {}
function F37() {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new F37();
const v40 = new F37();
v39.h = v40;
class C41 extends Set {
    set d(a43) {
        super.d = this;
    }
    static [-65537] = -992924536;
    #a;
    static #n(a48, a49, a50, a51) {
        try {
            a51.#a;
        } catch(e53) {
        }
        try {
            a50.#a;
        } catch(e55) {
        }
        return a49;
    }
    #c = 63952;
    static [873816473] = Set;
    o(a57, a58) {
        try {
            const v59 = [-3.0,0.0,8.692473731259366,-1e-15,0.598869256055706,-2.0,-2.220446049250313e-16,-Infinity,-9.722804109631653];
            function f60() {
                return v59;
            }
            f60();
            %PrepareFunctionForOptimization(f60);
            a58.h = v19;
        } catch(e62) {
            v15 >> v15;
            URIError(4, 9);
            const v68 = /3XLa\W?/v;
            /a\b!(x)(x)(x)\3*7[dYiIR?]*/visy;
            /to/vdmsy;
            v68["exec"](...this, ..."exec", a58, a58, ...v34, 63952);
        }
        return this;
    }
}
const v73 = new C41();
const v74 = new C41();
function F75(a77, a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    const v81 = this.constructor;
    v81.prototype = v81;
}
new Uint16Array(-992924536);
new C41();
const v85 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
const v86 = [-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity];
try { v73.forEach(4096, v0); } catch (e) {}
v73[1535] = v74;
/9\u0034xyz{1,32}?/gvdms;
/(?<=)E*/vdims;
/a[bc]d/gvims;
v85.includes(...v86);
