function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        F0.h = 3;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
new F0();
[-3.088027046240119e+307,4.0,4.0,996408.2406556683];
const v8 = [-320208.8876932063];
try { v8.splice(v8, F0); } catch (e) {}
const v10 = [1073741824,1073741823,1376142744,1073741825];
function f11(a12, a13, a14, a15) {
    function f16() {
        try {
            v10.forEach(a13);
            let v20 = a15 * 536870887;
            v20--;
        } catch(e22) {
            a15.message;
        }
        return a15;
    }
    return f16();
}
try { f11(F0, f11, v5, F0); } catch (e) {}
for (let v26 = 0; v26 < 10; v26++) {
    v4();
}
%OptimizeFunctionOnNextCall(f11);
f11(f11, v10, f11, v10);
[-5.0,-1000.0,0.0,7.613073459124633e+307,1000000000.0,-579.5549209206649,-1e-15];
F0[2];
const v31 = [2.220446049250313e-16,-771.8975916063555,0.05551514384625578];
try { v31.copyWithin(v10, v10); } catch (e) {}
[0.9889400828785041,4.0,-Infinity,1000000.0,-2.0,4.0,0.29305213778543104];
[3.0,-1000000000.0,-1000.0,1.0];
[-4096,128,-1024,-12656,1801,1073741824,-1073741824];
[268435440,-5,-16,-536870912,7,15];
[-7647,-9,-17238,-5,1073741823];
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this.constructor;
    try { new v43(); } catch (e) {}
    this.a = v43;
}
new F39(F39, Uint16Array);
new F39(Uint16Array, Uint16Array);
