let v0 = null;
const v1 = [-9.193424165215236e+307,486.1916511950667,-1000000.0,-7.769895890931879e+306];
const v2 = [-2.220446049250313e-16];
const v3 = [1.0,-3.0];
const v5 = WeakMap?.bind;
try { new v5(v3); } catch (e) {}
const v7 = new WeakMap();
try { v7.has(v3); } catch (e) {}
[-36.118685222292584,-1000000000.0,-2.2250738585072014e-308,-1.141590917643093,1000.0,1000.0,-1.6813029980571341e+308,-5.0,-1000.0];
[3.48959073062759,2.0,556013.4522966524,0.5200290803999792];
const v14 = [0.5537205093616908,-935173.579085308,0.7179007365658328,1.7976931348623157e+308,0.2340523533487615,-942801.2488502611,111281.11707982887,-2.0,986592.1844110582,Infinity];
try {
    v14.f = v5;
} catch(e15) {
}
256n & v7;
function f17() {
    return 256n;
}
const v20 = new Float64Array(129);
v20[91];
v20[65536] = WeakMap;
let v23 = v1[v7];
function f24() {
    return v2;
}
new BigInt64Array(233);
64 >> 64;
const v30 = BigInt64Array >= 129;
v30 || v30;
if (v30) {
    let v35 = -v0;
    let v36 = v0++;
    --v36;
    let v38 = ++v35;
    Math.sqrt(v38);
    ++v38;
} else {
    v23 -= v0;
}
new BigInt64Array(64);
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    F42 /= BigInt64Array;
    new WeakSet();
}
class C50 extends F42 {
    static #h = BigInt64Array;
    [v14] = 256n;
    d = -4294967295n;
    g = f24;
    b;
}
class C52 extends C50 {
    set d(a54) {
        super.d = this;
    }
    static p(a59, a60, a61) {
        new Uint32Array(0);
        new Uint32Array(128);
        new Int8Array(6);
        return 128;
    }
}
