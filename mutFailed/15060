function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -53736;
    } catch(e3) {
    }
    try {
        this.a = -53736;
    } catch(e4) {
    }
}
const v5 = new F0(F0);
const v6 = new F0();
const v7 = new F0();
function f8() {
    return v5;
}
class C9 extends f8 {
    valueOf(a11) {
        const v12 = f8();
        try {
            super.all(f8, v7, v12, this);
        } catch(e14) {
        }
        super.f |= v12;
        this in v7;
        return f8;
    }
    static #d;
    #c = v5;
    static e;
    static 5 = f8;
}
const v16 = new C9();
const v17 = new C9();
new C9();
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a21;
    } catch(e23) {
    }
    try {
        this.g = a22;
    } catch(e24) {
    }
}
new F19(v7, v16);
new F19(v16, v6);
new F19(v17, v16);
[-7.035761967596781e+307,775.8370229903712,-5.0,-1000000.0];
[0.32263210525704633,0.9348771008971412];
const v30 = [174.873066708343,-3.841395818816469e+307,-861085.6233315285,Infinity,1.773022318924495];
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    let v38;
    try { v38 = new v37(a34); } catch (e) {}
    typeof v38 === "symbol";
}
new F31(F31, F31, F31, F31, C9, v30);
new F31();
