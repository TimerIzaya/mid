let v2 = 15;
let v5 = 0;
while (v5 < 2) {
    const v8 = v2++;
    v5[8] = 7;
    try {
        v8.toString = v2;
    } catch(e9) {
    }
    v5++;
}
const v11 = new BigInt64Array(1611);
new Float64Array(7);
const v17 = new Int8Array(129);
v11[Symbol.species] = v5;
`p${15}915611907`;
const v21 = v17.byteLength;
let v22;
try { v22 = v17.some(v17, 1611); } catch (e) {}
const v23 = v17.__proto__;
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a28;
    } catch(e30) {
    }
}
const v31 = new F24(-1, 15, v5, v22);
const v32 = new F24(7, Int8Array, 7, 7);
const v33 = new F24(129, v32, -1, v23);
const v34 = [v17,15];
const v35 = [v34,1611,129];
const v36 = [Float64Array,v2,-1,v17];
const v37 = [-1.7976931348623157e+308,1.567547754457685];
let v40;
try { v40 = v32["min"](v11, 129, "min"); } catch (e) {}
new Int8Array(v33);
v22 ** v31;
"min" in v32;
new Uint32Array(v37, v37, Uint32Array);
const v45 = Float64Array.constructor;
v40[4] &= 15;
v34[7] = v21;
function F46(a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 129;
    } catch(e51) {
    }
    try {
        this.g = v2;
    } catch(e52) {
    }
}
new F46(7, v36, 1611);
new F46(Float64Array, 15, 15);
new F46(1611, v35, 15);
new v45(v37);
