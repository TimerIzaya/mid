function f0() {
    const t1 = "-733025561";
    t1[7] = "-733025561";
    const o8 = {
        130: "-733025561",
        "h": "-733025561",
        "e": 1231155186,
        [NaN](a5, a6) {
            %VerifyType(a6);
            a5[a5] **= 1231155186;
            try {
                this.__proto__ = a5;
            } catch(e7) {
            }
            return a5;
        },
        "c": NaN,
        [1231155186]: "-733025561",
    };
    return o8;
}
f0();
f0();
f0();
let v14 = 7;
v14--;
new WeakMap();
new Date();
function f20() {
    return 128;
}
f20.arguments = f20;
new Int8Array(11);
new Uint16Array(2);
new Float64Array(255);
Uint8Array.e = Uint8Array;
const v31 = new Uint8Array(Uint8Array, Uint8Array, Uint8Array);
v31[1] = v31;
try { Float64Array(WeakMap, Float64Array, Float64Array); } catch (e) {}
let v35 = ("undefined").localeCompare();
v35--;
const v37 = [v35,v35,v35];
const v38 = [v35,v35,v35];
try { v38.pop(); } catch (e) {}
const v40 = [v37,v38,v38];
const v41 = v40?.filter;
try { new v41(2); } catch (e) {}
const v43 = new Float64Array(v40, Uint8Array, v40);
v43[1];
let v45;
try { v45 = v43.keys(); } catch (e) {}
const v46 = v45.__lookupSetter__;
try { v46(); } catch (e) {}
let v48 = 128;
v48--;
const v51 = new Int16Array();
const v53 = v51.keys()?.next;
try { new v53(); } catch (e) {}
8.423204300745166 - 8.423204300745166;
new WeakSet();
function f59(a60, a61, a62, a63) {
    const o64 = {
    };
    o64.c = o64;
    return o64;
}
f59.caller = f59;
const v65 = f59();
v65.b = v65;
const v66 = f59();
const v67 = v66[268435441];
const v68 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
v68[6] = v68;
try { v66.lastIndexOf(); } catch (e) {}
const v70 = f59();
let v72;
try { v72 = ("iterator").strike(WeakSet, v67, v37, v70); } catch (e) {}
v72[9] = v72;
v72.padStart(v68);
class C74 {
}
try { new C74(); } catch (e) {}
let v76;
try { v76 = C74(); } catch (e) {}
const v78 = C74.prototype?.constructor;
try { new v78(); } catch (e) {}
for (let [i84, i85] = (() => {
        0 - 0;
        return [0, 10];
    })();
    (() => {
        -i84;
        const v87 = i84 < i85;
        class C88 extends Date {
        }
        return v87;
    })();
    i84++) {
}
const v95 = new BigInt64Array(v35);
v95.BYTES_PER_ELEMENT = v76;
