function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.constructor;
    try { new v7(a6, F3); } catch (e) {}
    try {
        this.g = a5;
    } catch(e9) {
    }
    try {
        this.b = "iqVS";
    } catch(e10) {
        e10["iqVS" | e10] ^= e10;
    }
    try {
        this.h = "isView";
    } catch(e15) {
    }
}
const v16 = new F3("iqVS", "isView");
v16.d = v16;
new F3("eT", "isView");
new F3("iqVS", v16);
new Float32Array(7);
class C23 {
    16 = 1024;
    constructor(a25, a26) {
        const v27 = this.constructor;
        try { new v27(); } catch (e) {}
        16 & !this;
    }
}
new C23();
new C23();
const v36 = new Int8Array(256);
v36[200];
const v40 = new Int8Array(16);
try { v40.copyWithin(Int8Array, v36); } catch (e) {}
function f42() {
}
function f43() {
    return f42;
}
f43.d = f43;
-520531413 >> -520531413;
512n - 512n;
const v50 = async (a51, a52, a53, a54) => {
    new Float64Array(8);
    new Float64Array(121);
    new Uint16Array(1);
    await Int8Array;
    return Float32Array;
};
let v67 = -65536n + -65536n;
v67--;
Map.prototype;
const v71 = new Map();
try { v71.set(v16, 512n); } catch (e) {}
let v73;
try { v73 = v71.set(Map, 512n); } catch (e) {}
v73.size = v73;
0 - 0;
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
try { new BigInt64Array(-9513n, f42, -9513n); } catch (e) {}
const v78 = new BigInt64Array(0);
let v79 = 1024;
v79 >>> v79;
let v81 = v79--;
v81++;
~v81;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v79);
const v88 = -9513n != 1;
v88 || v88;
if (v88) {
    try {
        new BigInt64Array(127);
    } catch(e92) {
    }
} else {
    var h = v88;
}
5 ^ 5;
const v99 = new Reflect(5);
let v100;
try { v100 = v99.join(v79); } catch (e) {}
let v101;
try { v101 = v100.replace(Int32Array, f42); } catch (e) {}
try { v101.codePointAt(16); } catch (e) {}
1 % 1;
const v106 = new Float32Array(Float32Array, Float32Array);
delete v106[536870888];
("eT").length;
v101 = f43;
try {
    new BigInt64Array(v71);
} catch(e111) {
}
const v112 = Int32Array.length;
v112 * v112;
-f42;
try {
    v78.f = 0;
} catch(e115) {
}
const v116 = new Int32Array(1);
const v117 = v116[0];
v117 ^ v117;
v116[0] = v116;
new Int8Array(12);
const v122 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v123 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v124 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v124.join(-65536n); } catch (e) {}
function F126(a128, a129, a130) {
    if (!new.target) { throw 'must be called with new'; }
    a130[8] = a130;
    const v131 = this?.__lookupGetter__;
    try { new v131(12); } catch (e) {}
    a129 + a129;
    try { a130.find(a128); } catch (e) {}
    try {
        this.d = a128;
    } catch(e135) {
    }
    try {
        this.b = a130;
    } catch(e136) {
    }
}
const v137 = F126?.constructor;
v137.length = v137;
let v138;
try { v138 = new v137(12); } catch (e) {}
try { v138(); } catch (e) {}
v138.arguments;
const v141 = new F126(Int32Array, 12, v123);
v141.b;
const v143 = new F126(v123, 5, v124, "eT", 1);
v143.length;
const v145 = new F126(v122, 12, v122);
v145[65536];
gc.arguments = gc;
const o148 = {
};
o148.f = o148;
for (let v149 = 0; v149 < 25; v149++) {
}
