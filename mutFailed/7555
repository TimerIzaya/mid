class C3 {
    #o(a5) {
        a5 |= -822.4347873601768;
        this | this;
        return C3;
    }
    static 10 = 3.0;
    static g;
    c = "bigint";
    [-822.4347873601768] = -822.4347873601768;
    8 = -822.4347873601768;
}
const v7 = new C3();
new C3();
const v9 = new C3();
C3[8] = v9;
class C10 extends C3 {
    static 3 = C3;
    static #e;
    static m(a12, a13) {
        try {
            super.getTimezoneOffset(this, C3, C3);
        } catch(e15) {
        }
        return a13;
    }
    9;
}
const v16 = C10[10];
new v16();
const v18 = new v7();
v18[9] = v18;
new C10();
function f20(a21, a22, a23, a24) {
    return a21;
}
function f25(a26, a27, a28, a29) {
    a29.g = a26;
    a27.length = a27;
    a29.d = a29;
    function f30() {
        return v16;
    }
    const v31 = f30.length;
    const v32 = v31 + v31;
    const v34 = new Int8Array(a26);
    const v35 = v34.buffer;
    const v36 = v35?.constructor;
    try { new v36(v36); } catch (e) {}
    function f38(a39) {
        return a39;
    }
    f38.constructor = f30;
    const v40 = f38.constructor;
    try { new v40(f25, f30, f30, a28); } catch (e) {}
    const v42 = v35.slice(v31, a27);
    function f43(a44) {
        v42.slice(a44, v32);
        return f25;
    }
    return v32;
}
%PrepareFunctionForOptimization(f25);
const v46 = f25(f20, f25, f25, f20);
v46 === v46;
%OptimizeFunctionOnNextCall(v16);
const v48 = f25(f25, f25, f25, f25);
v48 >> v48;
