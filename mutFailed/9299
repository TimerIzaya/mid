const v2 = Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array);
const v3 = v2.toLowerCase();
try { v3.trimStart(); } catch (e) {}
class C5 {
}
const v8 = [512,2147483648,2147483648];
const v9 = [1,v2,512];
function f10() {
    const v13 = [];
    Reflect.construct(Int8Array, v13);
    return v13;
}
v9.toString = f10;
const v15 = [1,v9,v9,v8,v8];
try { v15.pop(); } catch (e) {}
function f17(a18, a19) {
    const o49 = {
        "h": a18,
        "e": 512,
        [1](a21, a22, a23, a24) {
            const v26 = Symbol.hasInstance;
            v9.strike();
            new BigInt64Array();
            function f30() {
                let v31 = -1000000000.0;
                const o43 = {
                    o(a33, a34) {
                        function f35(a36, a37, a38) {
                            v31 |= a34;
                            a18 in v15;
                            for (let v40 = 0; v40 < 32; v40++) {
                                this["p" + v40] = v40;
                            }
                        }
                    },
                };
            }
            f30();
            f30();
            f30();
            const v47 = a19[v26];
            c = v26;
            v47 & v15;
            return v8;
        },
        8: 1,
        "a": a19,
        9: 1,
        [Uint8Array]: a19,
        "b": a19,
        127: v8,
        "f": v3,
        1: v8,
        [v9]: a18,
        "f": a19,
    };
    return o49;
}
f17(512, v9)[127];
f17(2147483648, v9);
f17(512, v9);
10 - 10;
Uint8Array[2] = Uint8Array;
try { new Uint8Array(Uint8Array, 1, v3); } catch (e) {}
new Uint8Array(10);
const v62 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
v62.includes(...v62);
Set.g = Uint8Array;
Set.name;
class C66 extends Set {
    #m(a68, a69) {
        let [v71,v72,,v73] = this;
    }
}
C66.g = v8;
C66.g = C66;
const v75 = [-8617,3];
function f76(a77, a78, a79, a80) {
    const o81 = {
        "h": a77,
        "b": v75,
    };
    return o81;
}
new Uint8ClampedArray(703);
512 / 512;
new BigUint64Array(512);
function f88(a89, a90, a91, a92) {
    const o93 = {
        "h": 512,
        "b": v62,
    };
    return o93;
}
Math.valueOf = f88;
const v95 = Math.cos(Math);
v95 << v95;
const o100 = {
    "execution": "sync",
    "type": "major",
};
gc(o100);
