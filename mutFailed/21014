const v3 = [79027.47367845173,-2.9971324831554847e+307,-2.0,79027.47367845173];
const v4 = [v3,v3,v3,79027.47367845173,v3];
let v5 = [v4,v4];
function f6(a7, a8) {
    const o15 = {
        "c": -2.9971324831554847e+307,
        [a8](a10, a11, a12, a13) {
            a11 = a12;
            v5 <<= a7;
            try {
                a8.b = a13;
            } catch(e14) {
            }
            return a13;
        },
        536870888: a8,
    };
    return o15;
}
f6(v5, v4);
const v17 = f6(v4, v4);
f6(v4, v3);
[10];
[6,-4294967295];
[-65535,1073741824,1022384263,1,11,268435456,14,28577];
function f22() {
    const o25 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o25;
}
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = this?.constructor;
    try { new v28(); } catch (e) {}
}
const v30 = new F26();
const v31 = v30?.constructor;
let v32;
try { v32 = v31(); } catch (e) {}
v30.length;
const v34 = new F26();
const v35 = [v34,v34,v34,v34,v34];
const v38 = new Uint32Array(1000);
const v39 = delete v35.length;
("cbrt").toLocaleUpperCase(v32, v39);
try { v39["cbrt"](v38, Uint32Array, v30); } catch (e) {}
f22();
v35();
const v45 = f22();
Number.isNaN(NaN);
65537 >> 65537;
536870912 + 536870912;
const v57 = [-42643,-2,-327102325,-1073741824,5];
function f58(a59, a60) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
class C64 {
}
const v65 = new C64();
function f66(a67, a68) {
    let v69 = Uint32Array.BYTES_PER_ELEMENT;
    v69++;
    class C71 {
    }
    const v72 = C71.length;
    v72 !== v72;
    try { ("0x2I").sup(); } catch (e) {}
    class C77 {
    }
    try { C77(); } catch (e) {}
    const v79 = C77?.call;
    v79.length;
    try { v79(null); } catch (e) {}
    class C82 extends C77 {
        constructor(a84, a85, a86, a87) {
        }
    }
    C82.e = C82;
    try { C82(NaN, v65, NaN, v45); } catch (e) {}
    const v89 = a68?.propertyIsEnumerable;
    try { v89(C77); } catch (e) {}
    let v91;
    try { v91 = v89(); } catch (e) {}
    class C92 {
    }
    C92.name = C92;
    try { C92.call(); } catch (e) {}
    const v94 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v94.includes(v91); } catch (e) {}
    class C96 {
    }
    try { C96(); } catch (e) {}
    try { C96.apply(1.7976931348623157e+308, f66); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C96[Symbol.replace] = v94;
    const v102 = [];
    try { v102.findLast(1.7976931348623157e+308); } catch (e) {}
    function f105(a106, a107) {
        const o108 = {
            "f": a107,
            [a106]: -12,
        };
        return o108;
    }
    try { f105.toString(); } catch (e) {}
    let v110;
    try { v110 = v102.with(v102, v102); } catch (e) {}
    const v112 = new Float64Array(v102, v110);
    const v113 = new Float64Array(v112, v17, v110);
    v113.values().next();
    return v113;
}
f66.name;
f66.length = f66;
%PrepareFunctionForOptimization(f66);
f66(Uint16Array, v65).length;
%OptimizeFunctionOnNextCall(f66);
f66(v65, v65);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v123 = undefined;
const o124 = {
    __proto__: undefined,
};
o124.h = o124;
v123 = v57;
let v126;
try { v126 = BigInt64Array(4.0, v123); } catch (e) {}
try { v126.lastIndexOf(BigInt64Array); } catch (e) {}
