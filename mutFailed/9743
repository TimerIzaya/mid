const v0 = [-1.7976931348623157e+308,0.7051731891258438,-2.584313510026886e+307,0.2184456873282945,-159.29516901992554];
const v1 = [0.9243803290233055,-430.03932041311407,2.0,-4.54873549132647,3.0];
const v2 = [2.2250738585072014e-308,-1000.0,-965.2722375071072,2.220446049250313e-16,1.0,7.788530838758335e+307];
const v3 = [v0];
v3[0] = v3;
let v4;
try { v4 = v3.group(v1); } catch (e) {}
const v5 = [v3,v1];
v5[1];
const v7 = [v1,v2];
function f8(a9, a10, a11) {
    try { a9.entries(); } catch (e) {}
    try { a10.unshift(f8); } catch (e) {}
    try { a10.map(a9); } catch (e) {}
    const o22 = {
        "c": a9,
        "d": v5,
        "h": a11,
        "a": a11,
        "f": v0,
        set e(a16) {
            Math.log10(v3);
            Math.log(a16);
            Math.sin(2147483648);
        },
        "g": v0,
        "b": v7,
        [a11]: a9,
    };
    return o22;
}
f8(v2, v2, v2);
const v24 = f8(v3, v0, v1);
v24.c = v24;
const v26 = f8(v3, v3, v1).b;
class C30 extends v1.constructor {
    #d;
    static #c = v24;
    static 536870889 = v4;
}
new C30();
let v32;
try { v32 = ("MAX_VALUE").codePointAt(v26); } catch (e) {}
"MAX_VALUE" instanceof v32;
[8,-9007199254740990,57782301,2147483649,-2147483647,-1024,-536870912,65535];
[3,255];
[29105,18339,9007199254740990,2147483647,-60725];
try {
    ("rE").match(/z*/vm);
} catch(e40) {
}
try { ("function").startsWith(v26); } catch (e) {}
512 - 512;
new Uint8ClampedArray(512);
1593 >> 1593;
new BigInt64Array(1593);
2050 << 2050;
try { new Int32Array(1593, Uint8ClampedArray, 1593); } catch (e) {}
new Int32Array(2050);
const v56 = new Date();
const v57 = v56.getUTCFullYear();
v57 !== v57;
