function f0() {
    const o10 = {
        10: "number",
        "h": "a",
        "g": "number",
        11: "a",
        set f(a5) {
            const v7 = ["a",-10];
            Reflect.apply(("a").split, this, v7);
        },
        ..."a",
        ..."number",
        "a": "number",
        ..."number",
        __proto__: "number",
        "e": -10,
        "c": "a",
        3: "a",
        "f": "number",
    };
    return o10;
}
const v11 = f0();
const v12 = f0();
const v13 = f0();
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = f0;
    } catch(e18) {
    }
    try {
        this.f = a16;
    } catch(e19) {
    }
    try {
        this.e = a17;
    } catch(e20) {
    }
}
const v21 = new F14(v13, v11);
with (v21) {
    h = v11;
    for (let v22 = 0; v22 < 100; v22++) {
        f0();
    }
}
new F14(v13, v13);
const v25 = new F14(v12, v13);
class C26 {
    static p(a28, a29) {
        const v30 = f0 ** a29;
        for (let v31 = 0; v31 < 100; v31++) {
            f0();
        }
        try {
            f0();
        } catch(e34) {
        }
        super.g = v30;
        let {"c":v35,"e":v36,"g":v37,...v38} = v12;
        return v21;
    }
    constructor(a40, a41, a42, a43) {
        function f44(a45, a46) {
            a45 && v11;
            this[129];
            return a45;
        }
        f44(this, a43);
        const o53 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o53);
    }
}
new C26(v12, v25, v11, v11);
const v56 = new C26(v21, v11, v11, v21);
new C26(v11, v25, v11, v56);
for (let v61 = 0; v61 < 25; v61++) {
    const v62 = [601759695];
    const v63 = [1073741824,1073741823,1376142744,1073741825];
    function f64(a65, a66, a67, a68) {
        let v70 = 536870887;
        v70++;
        BigUint64Array * v70;
        try { v63["find"](..."find", a68, ...v62, ...v63); } catch (e) {}
        return v63;
    }
    for (let v75 = 0; v75 < 5; v75++) {
        f64();
    }
}
