let v1 = Infinity;
class C3 {
    static #toString(a5) {
        let v6;
        try { v6 = a5(a5, v1); } catch (e) {}
        super.g;
        return v6;
    }
    constructor(a9, a10) {
        let v8 = this;
        a10 & a10;
        const v12 = v8[2];
        try {
            v12.#toString(v8, 2, 2, a9);
        } catch(e14) {
            e14.h = e14;
        }
        v8 = a9;
        const v18 = ++v1;
        const v19 = ~v1;
        const v20 = v19 - v19;
        v20 - v20;
        const v22 = Math.expm1(v1);
        v22 | v22;
        const v24 = v20 & v19;
        v24 - v24;
        Number.isNaN(Math.asin(v18));
        const v29 = -13 * v24;
        v29 / v29;
    }
}
let v34;
try { v34 = new C3(C3, v1); } catch (e) {}
const v35 = new v34(C3, v1);
try { v35.toString(); } catch (e) {}
const v37 = new C3(2, v35);
const v38 = v37?.constructor;
try { new v38(2, v1); } catch (e) {}
new C3(0.679615422263825, C3);
const t39 = "d";
t39[0] = "d";
function f50(a51, a52, a53) {
    return f50;
}
const o56 = {
    "type": "function",
};
new Worker(f50, o56);
function f58() {
    return o56;
}
const v59 = f58?.constructor;
try { new v59(4); } catch (e) {}
const o62 = {
    "type": v37,
};
const v63 = new Worker(f58, o62);
const v64 = v63?.constructor;
try { new v64(); } catch (e) {}
