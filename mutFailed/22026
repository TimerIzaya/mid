class C1 {
}
new C1();
let v3 = -9007199254740991;
const v4 = v3++;
const v6 = new Uint8Array(2314);
const t6 = 2314;
new t6(38);
new Uint32Array(1000);
function f17(a18, a19) {
    return f17;
}
const v20 = f17(f17, f17);
class C21 extends Uint8Array {
    constructor(a23, a24, a25) {
        super();
        const v26 = `
            try { a23(a25, v20); } catch (e) {}
        `;
        eval(v26);
    }
}
new C21(f17, C21, f17);
const v31 = new Float64Array(64);
const v32 = [];
const v33 = [];
class C34 {
}
new C34(v32, v33);
class C37 {
    constructor(a39, a40, a41, a42) {
        function f43() {
            return 953562.3677793818;
        }
        try {
            v6.h = a40;
        } catch(e44) {
        }
    }
    7;
    f;
    static #b = 1.0;
    #e = 1000;
    static #a;
    8 = 2314;
    #d = 64;
    static #h;
    #g = v3;
    static 536870912 = v4;
}
function f45(a46, a47) {
    return a46;
}
const o50 = {
    "arguments": v32,
    "type": "function",
};
const v51 = new Worker(f45, o50);
new C37(953562.3677793818, 38, 2314, 953562.3677793818);
new C37(1.0, 38, 1000, 1.0);
new C37(1.0, 2314, 1000, 1.0);
new Float32Array(128);
try {
    v31.a = v33;
} catch(e59) {
}
class C65 {
    m(a67, a68) {
        Symbol.isConcatSpreadable;
        6 >>> -268435456;
        try { a67(); } catch (e) {}
        const v76 = o50[Symbol.unscopables];
        v76[v76] = v51;
        ([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
        new a68(-1073741824, -268435456, -1073741824, -1073741824, ...a67);
    }
}
function F81(a83, a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a84;
}
const v87 = new F81();
for (const v88 in v87) {
}
