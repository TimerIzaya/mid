const v2 = new Uint32Array(8);
function f3(a4, a5, a6, a7) {
    const v8 = a5 ** a5;
    const v9 = v8 + v8;
    const v10 = v9 <= v9;
    for (let v11 = 0; v11 < 5; v11++) {
    }
    const o12 = {
    };
    o12.b = v10;
    return v8;
}
%OptimizeFunctionOnNextCall(f3);
(1000).match();
const v16 = new Int16Array(8);
let [v17,v18,...v19] = v16;
const v22 = new SharedArrayBuffer(62);
v22.slice();
const v25 = new Float64Array(1000);
new Uint8ClampedArray(64);
function f32(a33, a34, a35, a36) {
    const o82 = {
        ...v25,
        n(a38) {
            const o40 = {
            };
            return Worker(o40);
        },
        65536: v2,
        set c(a43) {
            let {"a":v44,"g":v45,"h":v46,} = a43;
            [4.0,-1000000.0,935447.0701256315,-1.0];
            [3.0,-792838.253537386,0.8598031696528556,-1.0,0.2640533571645879,-831.829559652447,1000000000000.0,3.9754899469204545,0.956827503229821,439120.03228796227];
            [-0.4742383199035789,1000000000000.0,Infinity,-1000.0,0.11317782775208485,-1.7976931348623157e+308,Infinity,1.7976931348623157e+308,6.452369562825771e+307,1000.0];
            const v53 = -2 - a34;
            class C55 {
                toString(a57, a58, a59) {
                    const o60 = {
                    };
                    o60.g = "f";
                    const o61 = {
                    };
                    Int16Array[0] = -27833;
                    o61.c = o61;
                }
            }
            const v64 = new C55();
            function F65() {
                if (!new.target) { throw 'must be called with new'; }
                for (let v67 = 0; v67 < 1000; v67++) {
                    ("p" + v67).fontcolor(v64, v67, this).localeCompare(v64);
                }
            }
            Math.atan(a33 << a33);
            v45 - v53;
            (536870887).toFixed();
            class C77 {
            }
            URIError(Float64Array);
            Math.trunc(a33);
            -v45;
        },
    };
    const o84 = {
        "execution": "async",
    };
    const v87 = new Int32Array(Int32Array);
    v87.indexOf(128);
    return o82;
}
f32(536870912, 1000, 536870912, 8);
f32(64, 64, 1000, 257);
f32(0, 64, 1000, 64);
let [,...v93] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
