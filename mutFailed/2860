new Int8Array(14);
new Uint8Array(64);
const v11 = new Int16Array(255);
class C12 extends Int8Array {
    p(a14, a15, a16) {
        -9223372036854775808 & -9223372036854775808;
        const v25 = new Set();
        try {
            v25.size = 255;
        } catch(e26) {
        }
        return v11;
    }
    static #a = -51150.77262053802;
    [64] = Int16Array;
    h = -51150.77262053802;
    #c = 855.825692462291;
}
new C12();
new C12();
new C12();
function f30() {
    return f30;
}
const v31 = [8.944191192251868,-1.4998894798282654e+308,4.0,-0.0,-1000000000000.0,-5.0,-2.220446049250313e-16];
const v32 = [-5.83623517593701,-1.0,-1e-15];
const v33 = [692.912813481568,126686.58689393173];
function f36(a37, a38) {
    const o42 = {
        [a37](a40, a41) {
        },
    };
    return o42;
}
const v43 = f36(v31, 128);
f36(v33, -3);
const v45 = f36(v32, 128);
/j(x)(x)(x)\2/gud;
/[\0](?:ab|cde)/vimsy;
const v48 = /^xxx$/uisy;
try { v43.p(); } catch (e) {}
try { v45["n"](v48, "n", f36, "n"); } catch (e) {}
new Uint32Array(91);
new Int16Array(4);
new Int16Array(127);
