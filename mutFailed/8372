const v4 = new WeakMap();
let v5;
try { v5 = v4.delete("boolean"); } catch (e) {}
!v5;
~255;
~-9223372036854775808;
const v15 = -(1422251481 - 1422251481);
const v17 = 255 - 255;
class C18 extends v5 {
    o(a20, a21) {
        if (-9223372036854775808) {
            function f23() {
                class C24 {
                }
                return 1422251481;
            }
            Math.toString = a20;
            let v26 = 31772;
            try { this.delete(v17); } catch (e) {}
            Math * -9223372036854775808;
            const v32 = 512 << "j";
            let v33 = 512 % 2041332377;
            let v34 = v33++;
            Math.log10(++v34);
            Math.tanh(512);
            "j" || v32;
            !a20;
            let v41 = ~-553.0285803623112;
            const v42 = -(-553.0285803623112);
            (-9223372036854775808).atan2(v41, 14);
            v42 % 255;
            for (let i47 = 0, i48 = 10;
                i47 < i48;
                (() => {
                    let v52 = i47++;
                    v52--;
                })()) {
            }
            v26++;
            v41--;
        } else {
            a20.padEnd(255, 256, 129, 255, 1422251481, ...a20);
        }
        return -9223372036854775808;
    }
}
try { new C18(); } catch (e) {}
C18.name;
const v64 = new C18();
try { v64.o(255, "boolean"); } catch (e) {}
let v66;
try { v66 = v64.set(1422251481, 1422251481); } catch (e) {}
const v67 = new C18();
try { v67.o(v66, v66); } catch (e) {}
new C18();
4 + 4;
new Uint8ClampedArray(4);
Int8Array.d = Int8Array;
Int8Array.d = Int8Array;
Int8Array.e = Int8Array;
new Int8Array(v15);
