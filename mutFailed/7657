class C3 {
    get f() {
        const v5 = 128n & 536870888n;
        const v7 = new Uint8ClampedArray();
        try { v7.reduceRight(v7); } catch (e) {}
        ("boolean").split("toString");
        return v5;
    }
    7;
    constructor(a13) {
        a13++;
        try {
            const v15 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
            const v16 = [-2];
            function f17(a18) {
                return 128n;
            }
            v16.constructor = f17;
            v16.concat(v15);
            function f23() {
                const o25 = {
                    "c": Array,
                };
                const t23 = o25.c;
                new t23();
                for (const v30 of Array(4087, Array, Array)) {
                    v30 | v30;
                }
                return f23;
            }
            a13.valueOf = a13;
        } catch(e32) {
        }
        class C33 {
        }
        class C34 extends C33 {
        }
        const v37 = new Float32Array(9);
        v37[5] = v37;
    }
    c = 1024n;
    /*
    constructor(a39, a40, a41, a42) {
        super();
        function f43(a44, a45, a46) {
        }
        const o49 = {
            "type": "function",
        };
        new Worker(f43, o49);
    }
    */
}
function f51() {
    function f52() {
        const v53 = [0.40942238360349337,9.405201967735488e+306,-914.634335773701,5.134124740041841,-1.0,1000000000000.0,-5.0,-298.5783868000192,1000000.0];
        const v55 = new Int32Array(v53, Int32Array, Int32Array);
        Date.UTC(268435456, v55, v53);
        return Date;
    }
    return f52;
}
Object.defineProperty(C3, Symbol.toPrimitive, { writable: true, enumerable: true, get: f51 });
const v61 = new C3(536870888n);
v61.toString = f51;
new C3(v61);
new C3(C3);
const v66 = new Int16Array(1375);
let v67;
try { v67 = v66.find(536870888n); } catch (e) {}
5 - 5;
new BigInt64Array(v67);
let v74;
try { v74 = new Uint32Array(Uint32Array, BigInt64Array, 1375); } catch (e) {}
const v75 = new Uint32Array(41);
function f76(a77) {
    const v78 = [];
    function F79(a81, a82, a83, a84) {
        if (!new.target) { throw 'must be called with new'; }
        a81.lastIndexOf(a81, a82);
    }
    const v86 = new F79(v78);
    return v86;
}
v75.toString = f76;
v75[11] = v75;
const v87 = [1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0];
new Int16Array(5);
new Int32Array(4096);
const v93 = v87.groupToMap;
const v97 = ([128,215394418]).entries();
v97[3] = 41;
v97[3];
const v99 = [0.00952483356421907,-3.0,2.220446049250313e-16];
function f100() {
    return v99;
}
class C101 extends f100 {
}
function f102(a103, a104) {
    const o107 = {
        "g": 1073741824,
        get d() {
            super[a103];
            return this;
        },
        "f": 3,
        ...a103,
        10: 1073741824,
    };
    return o107;
}
const o108 = {
    __proto__: v87,
};
function F109(a111, a112, a113) {
    if (!new.target) { throw 'must be called with new'; }
    const v114 = this.constructor;
    let v115;
    try { v115 = new v114(); } catch (e) {}
    this.e = v115;
}
try { v93(1375); } catch (e) {}
[v74];
function f119() {
    Math.sinh(0);
    const o124 = {
        ..."raw",
    };
    function f125() {
        return f125;
    }
    function f127() {
        let v128 = Uint8Array;
        v128--;
        function f130() {
            return f130;
        }
        const v131 = /(?:a*)+q(?<a>.)/guds;
        function f132(a133) {
            const v134 = a133?.constructor;
            try { v134(a133, f130); } catch (e) {}
            const o137 = {
                get d() {
                    return a133;
                },
                __proto__: v131,
            };
            return o137;
        }
        for (let i140 = 0, i141 = 10; i140 < i141; i141--) {
            for (let v148 = 0; v148 < 50; v148++) {
                f132(v131);
            }
        }
        Object.defineProperty(f119, 13, { enumerable: true, set: f125 });
        return o124;
    }
    try {
        new Int8Array(-45057);
    } catch(e154) {
    }
    f127();
}
const v158 = [f119,5.0];
const v159 = [v158,v158,-9.82871036065143,5.0];
async function f160(a161, a162, a163, a164) {
    return await v159;
}
try { v93(v87, v93, v87, v87, v93); } catch (e) {}
