const v0 = [];
function F2() {
    if (!new.target) { throw 'must be called with new'; }
}
const v4 = new F2();
[v4];
const v7 = new Map();
delete v7?.size;
268435440 / 268435440;
const v12 = [v0,268435440,268435440];
const v13 = [v12,65536,v12,65536,65536];
const v14 = [30463,v12];
try { v14.group(v14); } catch (e) {}
class C16 {
    c;
    constructor(a18, a19, a20, a21) {
        this.c = this;
        a19[1] = a19;
        a20--;
        const v23 = v14[268435440];
        ("-1073741824").localeCompare(Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array));
        class C29 extends SharedArrayBuffer {
        }
        try { new SharedArrayBuffer(v23); } catch (e) {}
        const o33 = {
            "maxByteLength": 1024,
        };
        const v35 = new SharedArrayBuffer(2, o33);
        new Uint16Array(v35);
    }
    static b;
    #f;
    static 498534335 = 268435440;
    10 = 65536;
    static 268435439;
    static #g;
}
const v40 = new Float64Array(3045);
v40["toReversed"](1.0, ...v40, ..."toReversed");
for (let i = 0; i < 5; i++) {
    function F44(a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
new C16(v14, v13, 30463, v13);
const v49 = new C16(v12, v14, 30463, v13);
const v50 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
const v52 = new Uint8Array(v50);
v50[65536] = v52;
new Int32Array(8);
new C16(v13, v49, 268435440, v13);
new Date();
function F59(a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
-9223372036854775808n - -9223372036854775808n;
function f67() {
    return Date;
}
f67.length = f67;
function F68(a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this.constructor;
    v73.caller = v73;
    try { new v73(); } catch (e) {}
    const t66 = Array(3398);
    t66.length = 1;
}
new F68();
class C80 extends F68 {
    h;
    constructor(a82, a83, a84) {
        class C86 extends a83.constructor {
        }
        new C86();
    }
}
new C80();
