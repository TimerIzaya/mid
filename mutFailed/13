function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1;
    } catch(e3) {
    }
    try {
        this.c = 1;
    } catch(e4) {
    }
    try {
        this.d = 1;
    } catch(e5) {
    }
}
function f6() {
    function f7(a8, a9, a10, a11) {
        const o13 = {
            get c() {
            },
        };
    }
    return F0;
}
Object.defineProperty(F0, "valueOf", { configurable: true, enumerable: true, value: f6 });
new F0();
const v15 = new F0();
function f16(a17) {
    function F18() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v20 = new F18();
    let v23;
    try {
    const t0 = "object";
    v23 = t0(v20, "number", F18);
    } catch (e) {}
    function f24(a25) {
        return v23;
    }
    return f24;
}
v15[Symbol.toPrimitive] = f16;
new F0();
12 * 12;
const v34 = ([12,12])?.indexOf;
try { new v34(Int32Array); } catch (e) {}
2707 / 2707;
new Uint8Array(2707, 2707, 128);
new Int32Array(128);
Uint16Array.name;
const v45 = new Uint16Array(92);
const v48 = new Int8Array(257);
const v49 = v48?.subarray;
try { new v49(F0, 92); } catch (e) {}
function f51() {
}
try { f51(); } catch (e) {}
const v53 = [f51,f51];
Date.b = Date;
const v55 = new Date();
try { v55.setDate(F0); } catch (e) {}
try { ("getUTCMinutes").fixed(); } catch (e) {}
v55["getUTCMinutes"]();
const o61 = {
    0: "1ya",
    162: "1ya",
};
o61[162];
try { v53.includes(v53); } catch (e) {}
const v64 = [v53,f51];
v64.b = v64;
const v65 = [v64];
try { v65.pop(); } catch (e) {}
let v69;
try { v69 = ("toString").padStart(v15); } catch (e) {}
v69[6] = v69;
try { ("-1865512128").valueOf(); } catch (e) {}
const o80 = {
    toString(a74, a75, a76, a77) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
try { Uint8ClampedArray.from(128); } catch (e) {}
new BigUint64Array(12);
Date[2] = Date;
Date.b = Date;
class C88 extends Date {
    static get c() {
        const v90 = `
        `;
        eval();
    }
}
new Uint8ClampedArray(3989);
try { ("Bl4").toWellFormed(); } catch (e) {}
const v98 = new BigUint64Array("Bl4");
Int32Array.name = Int32Array;
const v100 = new Int32Array();
v100.__proto__ = v98;
let v102;
try { v102 = new Int8Array(3989, v45, 3989); } catch (e) {}
function f103(a104, a105) {
    Math.expm1(-366687.8544616379);
    return 257;
}
v102.constructor = f103;
const v109 = v102?.constructor;
try { new v109(v53, v53, 128); } catch (e) {}
const v111 = new Int8Array(9);
186 << 186;
const v115 = new Int16Array(186);
v115[182];
class C117 {
    [v53];
    10;
    static c = v111;
}
C117.prototype = C117;
new C117();
const v119 = new C117();
v119[10] = v119;
const v120 = new C117();
v120[10] = v120;
const v121 = v120[10];
v121.prototype = v121;
v121.prototype;
"minor" == "minor";
try { ("async").strike(); } catch (e) {}
const o128 = {
    "execution": "async",
    "type": "minor",
};
try { new Float32Array(Date, Uint8ClampedArray, Date); } catch (e) {}
new Float32Array();
class C134 {
    static e;
    e;
    static 3 = -5.161103313394506;
    toString(a136) {
        let v135 = this;
        v135.e *= 0.8199829542463926;
        v135 += v135;
        for (let v137 = 0; v137 < 10; v137++) {
            a136["p" + v137] = v137;
        }
        return 0.8199829542463926;
    }
}
C134.name = C134;
const v140 = new C134();
const v141 = /1(ab)/ud;
v141.toString = Date;
v140.toString = C134[v141];
gc(o128);
