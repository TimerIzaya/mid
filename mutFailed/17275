function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 257;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function F7(a9) {
    if (!new.target) { throw 'must be called with new'; }
    new F7(a9);
    v6[0] >>>= a9;
    try {
        v4.g = F7;
    } catch(e11) {
    }
    try {
        this.g = a9;
    } catch(e12) {
    }
    try {
        this.b = a9;
    } catch(e13) {
    }
}
const v14 = new F7(F7);
new F7(v5);
const v16 = new F7(F0);
const v17 = [v5,v16,v14,v14,v4];
const v18 = [v5,v17,v6,v17,v14];
[v5,v18,v18,v17];
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this.constructor;
    try { new v25(); } catch (e) {}
    this.e = a24;
}
function f27() {
    class C28 {
    }
    let v29;
    try { v29 = C28(); } catch (e) {}
    const v30 = [F20];
    for (let v31 = 0; v31 < 5; v31++) {
        new F20(undefined, v29);
    }
    v30.constructor;
    return F20;
}
%PrepareFunctionForOptimization(f27);
f27();
%OptimizeFunctionOnNextCall(f27);
f27();
