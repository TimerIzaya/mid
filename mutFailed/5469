const v2 = new Int16Array(7);
let v5;
try { v5 = new Uint32Array(Uint32Array, 7, 7); } catch (e) {}
const v6 = new Uint32Array(829);
const v9 = new Int16Array(256);
v9[52] = v9;
function f10() {
    return v9;
}
v2[Symbol.asyncIterator];
const v21 = new BigUint64Array();
const o37 = {
    [v21](a24, a25, a26) {
        class C28 {
            #d = 4096;
            #toString(a30, a31, a32) {
                Object.defineProperty(a25, 5, { configurable: true, enumerable: true, get: f10 });
                try { a30["m"](a30, "m", 4096, 1073741824n, 829); } catch (e) {}
                return v5;
            }
            static {
                this.#d;
            }
        }
    },
};
o37.e = o37;
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = a41.constructor;
    const v45 = /[a-zA-Z0-9]/gvisy;
    const v46 = /abc?/gvmy;
    v46.dotAll;
    v46[-2] ^= v45;
    v46.exec("Q8F");
    try { new Int16Array(a41, v46, Int16Array); } catch (e) {}
    const v51 = new Int16Array();
    const v52 = v51?.constructor;
    try { new v52(Int16Array, v6, v2); } catch (e) {}
    const v54 = v51.lastIndexOf(F39, a41);
    v54 ^ v54;
    try { new v43(this, a41); } catch (e) {}
    new Uint32Array(127);
    for (let v60 = 0; v60 < 5; v60++) {
    }
}
const v61 = new F39();
const t47 = v61.constructor;
new t47();
