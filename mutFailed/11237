const v0 = /hX*/gudimsy;
const v1 = /(?:a+)*/gumy;
const v2 = /g(?:ab)/vim;
class C3 {
    3932 = v1;
    #h;
}
const v4 = new C3();
const v5 = new C3();
const v6 = v5?.constructor;
try { new v6(); } catch (e) {}
const v8 = new C3();
v8[3932] = v8;
v8[3932] = v8;
-3 % -3;
let v12 = -9007199254740991;
const v13 = /F9s6(x)(x)(x)\4/gdim;
v13.global;
try {
    v8.e = v5;
} catch(e15) {
}
v2[0] = 22223;
const v16 = /l[\ud808\udf45*(?:foo)]/udm;
v16.h = v16;
const v17 = /i6a\n/gvdimsy;
4 & 4;
Uint8Array.e = v13;
Uint8Array.e = Uint8Array;
const v21 = new Uint8Array(4);
const v22 = v21?.findLastIndex;
try { new v22(v17); } catch (e) {}
C3 = Uint8Array;
v13 && Uint8Array;
try {
const t0 = 4;
t0(v16, v16, v4, -3);
} catch (e) {}
try {
    v5.fuck(-3, v0);
} catch(e28) {
}
function f30(a31) {
    v12 = a31;
    [Float32Array];
    return v16;
}
Float64Array[Symbol.iterator] = f30;
try { new Float64Array(4, v0, 1473); } catch (e) {}
const v37 = new Float64Array(1473);
const v38 = v37[746];
v38 & v38;
const v42 = new Float32Array(11);
v42.toString = Symbol;
v42[2] = v42;
try { new Int32Array(Float64Array, v12, Int32Array); } catch (e) {}
const v45 = Int32Array.bind();
const v46 = v45.name;
try { v46.codePointAt(22223); } catch (e) {}
const v48 = v45.name;
try { v48.toLocaleLowerCase(); } catch (e) {}
v48[6] = v48;
