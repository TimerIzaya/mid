const v2 = new Int16Array(188);
const v5 = new Uint32Array(1367);
const v10 = new BigUint64Array(4);
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a14;
}
const v16 = new F11(BigUint64Array, 4, v10);
v2[255] = v5;
v10[4294967295] |= v5.byteLength;
try {
    v16.toString = v10;
} catch(e18) {
}
for (const v19 of v10) {
    Object.defineProperty(v16, 241, { enumerable: true, value: v19 });
    const o20 = {
    };
    o20.g = v19;
    o20.b = 241;
    const o21 = {
    };
    o21.g = v19;
    o21.d = v19;
}
new Uint32Array(8);
const v25 = Symbol.iterator;
const o34 = {
    [v25]() {
        let v27 = 10;
        const o33 = {
            next() {
                v27--;
                const v31 = v27 == 0;
                const o32 = {
                    "done": v31,
                    "value": v27,
                };
                return o32;
            },
        };
        return o33;
    },
};
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this.constructor;
    try { new v42(this); } catch (e) {}
    a41++;
    this.g = a40;
}
const v45 = new F38();
const v46 = v45.constructor;
for (const v47 in v16) {
}
new v46();
