class C3 {
    3551120651;
    constructor(a5) {
        this[3551120651];
        this[3551120651];
        this[3551120651] = this;
        super.d;
        SharedArrayBuffer.length;
        let v11;
        try { v11 = new SharedArrayBuffer(SharedArrayBuffer); } catch (e) {}
        const v12 = v11?.grow;
        try { new v12(C3); } catch (e) {}
        let v14 = 268435439;
        v14++;
        const o16 = {
            "maxByteLength": v14,
        };
        o16.a = o16;
        const v18 = 255 / 255;
        v18 - v18;
        const v20 = new SharedArrayBuffer(255, o16);
        v20.byteLength = v20;
        try { v20.grow(-2.2250738585072014e-308); } catch (e) {}
        const v23 = new Uint8Array(v20);
        v23[112] = v23;
        let v24;
        try { v24 = v23.join(this); } catch (e) {}
        try { v24.padEnd(v24); } catch (e) {}
        v23[75] = v23;
    }
    [1669513877];
    static [-2.2250738585072014e-308];
}
let v26;
try { v26 = C3.bind(C3); } catch (e) {}
v26.b = v26;
new C3("setInt32");
const v28 = new C3(C3);
const v29 = v28[3551120651];
v29[1669513877] = v29;
const v30 = new C3(-2.2250738585072014e-308);
const v31 = v30[3551120651];
v31[3551120651] = v31;
v30[3551120651];
const v35 = new Uint32Array(104);
Uint8Array.name;
const v39 = new Uint8Array(2);
const v40 = v39[1];
v40 - v40;
391 - 391;
const v45 = new Uint32Array(391);
let v46;
try { v46 = v45.join(v35); } catch (e) {}
try { v46.toWellFormed(); } catch (e) {}
let v48 = -14;
class C49 {
}
C49.length;
function f51(a52, a53, a54, a55) {
    return a55;
}
({"b":f51,"f":v48,} = C49);
