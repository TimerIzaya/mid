function f0() {
}
class C1 extends f0 {
    static 2;
    #valueOf() {
        new f0();
        return -9223372036854775807n;
    }
    #g = f0;
    static [f0];
    0;
}
new C1();
const v8 = new C1();
const v9 = new C1();
[-0.0,2.220446049250313e-16,165.52929449982094,2.2250738585072014e-308,-2.220446049250313e-16,-1000000000000.0,1.258280417938226e+307,451122.40352873434,447403.41652876814,-4.0];
const v11 = [1000000.0,Infinity,0.8508323109329821,9.407393855467667,-2.220446049250313e-16];
const v12 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
try {
    v12.__proto__ = v11;
} catch(e15) {
}
e = v8;
const v18 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v19 = [601759695];
const v20 = [1073741824,1073741823,1376142744,1073741825];
function f22(a23, a24, a25, a26) {
    function f28() {
        const o47 = {
            "e": arguments,
            ...v18,
            ..."Vre",
            "c": v20,
            "g": a23,
            __proto__: v12,
            "b": C1,
            [f0]: -4294967295,
            "d": -268435456,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a33, a34) {
                return "-1073741824";
            },
            ..."Vre",
            4: "Vre",
            ["-1073741824"](a36, a37, a38) {
                function F39(a41, a42) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.h = a38;
                    } catch(e43) {
                    }
                }
                new F39(this, v9);
                new F39(a37, a26);
                const v46 = new F39(f0, "-1073741824");
                return v46;
            },
            "c": f28,
            5: -4294967295,
            6: -268435456,
        };
    }
    f28();
    %OptimizeFunctionOnNextCall(f28);
    let v50;
    try { v50 = v20["find"](..."find", a26, ...v19, ...v20, ...522675525n); } catch (e) {}
    v50 <= a25;
    return arguments;
}
for (let v52 = 0; v52 < 10; v52++) {
    f22();
}
%OptimizeFunctionOnNextCall(f22);
v19(v20, f22, 522675525n, v18);
