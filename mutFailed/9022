function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -14;
    } catch(e3) {
    }
    try {
        const v5 = "p" + -14;
        for (let v6 = 0; v6 < 25; v6++) {
            v6++;
            v6 < v5;
            function f9(a10, a11, a12, a13) {
            }
            for (let v14 = 0; v14 < 5; v14++) {
                f9();
            }
        }
        this.a = -14;
    } catch(e16) {
    }
    try {
        this.h = -14;
    } catch(e17) {
        class C19 {
            static {
                try { C19(); } catch (e) {}
            }
            static f;
        }
    }
}
const v22 = new F0();
const v23 = new F0();
const v24 = new F0();
const v25 = [90406.55083616823,-1.00643076029749e+308,0.32156802085590264,0.14021368297171866,-1000000.0];
const v26 = v25[4];
[-1e-15,-Infinity,-640.9911649755546,0.6405081004539234,-1e-15,3.0];
const v28 = [3.0,3.0,-5.0,-1000000000.0,-1.7976931348623157e+308,2.220446049250313e-16];
function f29(a30, a31) {
    const v32 = a30?.constructor;
    try { new v32(); } catch (e) {}
    a31[3] = a31;
    const o61 = {
        o(a35, a36, a37) {
            a30 = v24;
            for (let v41 = 0; v41 < 32; v41++) {
                const v43 = "p" + v41;
                const v44 = [];
                function f45() {
                    const o47 = {
                        p() {
                            return f45;
                        },
                        [v44]: v44,
                        "a": v44,
                    };
                    return v44;
                }
                f45();
                const v49 = a37();
                const v50 = (a51, a52) => {
                    return v49 * a52;
                };
                a35[v43] = v41;
            }
            function f54(a55, a56) {
                return a55;
            }
            new BigInt64Array(11);
            this.lastIndexOf();
            return -2;
        },
        [a31]: a31,
        "f": v24,
    };
    return o61;
}
f29(v22, v25);
const v63 = f29(v23, v28);
try { v63.o(F0, v24, v23); } catch (e) {}
f29(v24, v25);
new Int16Array(3);
new BigUint64Array(v26);
new BigInt64Array(512);
function f75() {
    try { Int8Array.from(512); } catch (e) {}
    Int8Array.b = Int8Array;
    return f75;
}
%PrepareFunctionForOptimization(f75);
f75();
%OptimizeFunctionOnNextCall(f75);
f75();
