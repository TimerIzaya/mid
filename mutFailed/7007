function f0() {
}
class C1 {
    static n() {
        let v3;
        try { v3 = this.codePointAt(); } catch (e) {}
        let {"b":v4,"f":v5,} = v3;
        try { new v5(v4, f0, v5, v3, this); } catch (e) {}
        (v4 >>>= v5) ** this;
        return f0;
    }
    static #g;
    static #c = f0;
    [f0];
    static [f0];
    11 = f0;
}
const v8 = new C1();
const v9 = new C1(v8, C1);
const v10 = new C1();
class C11 extends C1 {
    536870888;
    #p(a13, a14) {
        try { a14(v10, this, this, v8, a13); } catch (e) {}
        function f16(a17, a18) {
            delete a17?.[-2];
            const o20 = {
            };
            try {
                o20.e = v10;
            } catch(e21) {
            }
            try {
                const o22 = {
                };
                o22.e = v10;
                o22.c = a13;
            } catch(e23) {
            }
            try {
                const o24 = {
                    "g": a13,
                    __proto__: v9,
                    ...v9,
                    "a": a17,
                    "d": this,
                };
                o24.e = v10;
                o24.c = a13;
                o24.a = v9;
            } catch(e25) {
            }
            try {
                const o26 = {
                };
                o26.e = v10;
                o26.c = o20;
                o26.a = v8;
            } catch(e27) {
            }
        }
        new Symbol(f16, a13, C1);
        return a13;
    }
}
const v30 = new C11(v10, f0);
new C11();
const v32 = new v30();
const v38 = new Float64Array(2184);
new BigUint64Array(10, "getUTCDate", 10);
new Float64Array(1024);
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 59642;
}
F45.fuck = F45;
class C48 extends F45 {
}
class C49 extends C1 {
    constructor(a51, a52) {
        super();
        try {
            super.m(2184, v38, v10, a52, a52);
        } catch(e54) {
        }
    }
    set d(a56) {
        for (const v57 in C48) {
        }
    }
}
new C49();
new v32();
