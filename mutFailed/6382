function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 14;
        try {
        } catch(e3) {
        }
        class C4 {
        }
        class C5 extends C4 {
            static #m(a7, a8, a9, a10) {
            }
        }
    } catch(e11) {
        class C13 {
            constructor(a15, a16) {
                const v17 = this.constructor;
                try { new v17(); } catch (e) {}
                this[16] >>>= 16;
            }
        }
    }
    try {
        this.g = 14;
    } catch(e19) {
    }
}
const v20 = new F0();
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    a23--;
    a25 / a25;
    const v28 = this.constructor;
    try { new v28(a24, a24, a25); } catch (e) {}
}
const v30 = new F0();
new v30();
const v32 = [0,-1093406053,13,-36193,-65536,-9007199254740992,7,-14,5,1378883556];
function f33() {
    return f33;
}
const o44 = {
    [F0](a35, a36) {
        super[f33];
        268435456 % 268435456;
        268435456 >>> this;
        v30 ^ -3.0;
    },
};
[268435441,9007199254740990,10,64,1073741825];
function f46(a47, a48, a49) {
    return a48;
}
const v54 = [f46,4294967297,,];
const o55 = {
    "arguments": v54,
    "type": "function",
};
new Worker(f46, o55);
[-21064,16];
const v58 = /XL/uims;
const v59 = /Ja||bc/vdimy;
/q+/u;
[[v20,v59,F0,[v32,v32],v59],v58,F0];
function f65(a66, a67) {
    const o68 = {
        ...v32,
    };
    return a67;
}
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    const v73 = this.constructor;
    new Int16Array();
    try { new v73(this, a71); } catch (e) {}
}
%PrepareFunctionForOptimization(f65);
f65("65536");
