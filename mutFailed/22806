class C3 {
    static #m(a5) {
    }
    #b;
    #b = "0lZ8y";
    constructor(a7, a8, a9) {
        class C11 extends a8.constructor {
        }
        new C11();
    }
    #p(a14, a15) {
        function f17() {
            const v19 = new Set();
            v19.add();
            let [v21,,...v22] = v19;
            return f17;
        }
        return "0lZ8y";
    }
    static 16;
    static {
        try {
            super.valueOf(this);
        } catch(e27) {
        }
    }
}
new C3();
const v29 = new C3();
const v30 = new C3();
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    ([-7,-18455])["pop"]();
    class C39 {
    }
    new C39();
    this.c = this;
    try {
        this.e = a34;
    } catch(e41) {
    }
    try {
        this.b = v29;
    } catch(e42) {
    }
    try {
        this.c = v29;
    } catch(e43) {
    }
}
new F31("object", v30, "object");
new F31("object", "0lZ8y", "0lZ8y");
new F31(v29, "0lZ8y", "0lZ8y");
for (let v50 = 0; v50 < 25; v50++) {
    class C51 {
    }
    function f52() {
        let v53 = f52 % C51;
        v53--;
        for (const v58 of Array(4087)) {
        }
        return C51;
    }
    function f59() {
        return f59;
    }
    const v60 = [601759695];
    const v61 = [1073741824,1073741823,1376142744,1073741825];
    function f62(a63, a64, a65, a66) {
        a66.toLocaleString();
        const v68 = v61.pop;
        try { v68(v61); } catch (e) {}
        try { ("m").match(1000.0); } catch (e) {}
        new Int8Array(582);
        try { v61["find"](..."find", a66, ...v60, ...v61); } catch (e) {}
        const v77 = typeof v50;
        Math.floor(f59);
        Math.asin(f59);
        Math.max(f59);
        const v84 = 9007199254740990 || f59;
        v84 >> 9007199254740990;
        v84 / 9007199254740990;
        v77 === "number";
    }
    for (let v88 = 0; v88 < 5; v88++) {
        f62(f59, v88, v88, v61);
    }
}
