function f3(a4) {
    const o16 = {
        p(a6, a7) {
            let v9 = 9223372036854775807;
            10 * a6;
            --v9;
            this ** this;
            !v9 ** v9;
            return a4;
        },
        "h": "o",
        "e": a4,
        "g": a4,
        __proto__: "13",
    };
    return o16;
}
const v17 = f3("S5BN");
const v18 = f3("o");
f3("o");
const v20 = [-50600,9307,1884894833,1073741824,9007199254740992,-7,282424981,-65537,1073741824,1506098219];
const v21 = [-1896,9,536870887,-4096,-4294967296];
const v22 = [0,22505,4,1486759947,1452580090,-65537];
function f23(a24, a25) {
    const o40 = {
        [-1]: v18,
        [v20]: a25,
        get b() {
            try { this.toDateString(this, "13", a24, "o"); } catch (e) {}
            new f3("o");
            return f3;
        },
        "d": a25,
        get g() {
            [-243992598,128,12];
            [9007199254740992,1,39194,268435456,255,9,1119349163];
            [11,268435440,-48506,-9007199254740992,4];
            [-2147483649,-6];
            [-2126,25637,255,4096,-65535];
            [18780,-52103,-65535,268435456,614456464,-19483,-2147483648,8,9223372036854775807];
            const o37 = {
                "apply": f3,
                "call": f3,
                "defineProperty": f3,
                "deleteProperty": f3,
                "getOwnPropertyDescriptor": f3,
                "getPrototypeOf": f3,
                "isExtensible": f3,
                "ownKeys": f3,
                "preventExtensions": f3,
                "set": f3,
                "setPrototypeOf": f3,
            };
            new Proxy("o", o37);
            return a24;
        },
    };
    return o40;
}
f23(v21, v20);
const v42 = f23(v22, v22);
const v43 = f23(v22, v21);
const v44 = "13" || v43;
let v45 = "toUTCString";
try { v42[v45](v42, f23, v17); } catch (e) {}
const t65 = "13";
t65[v43] = v20;
Object.defineProperty(v42, "b", { writable: true, enumerable: true, value: v45 });
new WeakSet();
class C49 {
    static #n(a51) {
    }
}
const v52 = new C49();
const v53 = new C49();
const v54 = new C49();
let v55 = Int16Array;
const v56 = new v55();
new Uint8Array(2265);
for (const v60 in v44) {
    v45 = v21[v60];
    v18.h;
}
const v64 = new v55(2872);
try {
    v64.length = 4;
} catch(e66) {
}
v53[3109] = v52;
try { v52(v54, v56, 2265, 2265); } catch (e) {}
v55 = v55;
