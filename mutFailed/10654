class C3 {
    static set e(a5) {
        const v6 = super[-4294967297];
        v6[-3.0] = v6;
        super[C3] = a5;
        const v13 = ~-3.0;
        try { a5(-3.0, v13, v13, a5); } catch (e) {}
    }
    constructor(a16, a17) {
        let {"d":v18,} = this;
        [0.015122382999735784,2.0,0.7634117650139216,1.9071133150472281,1.0];
        [480424.21800393704,1.7976931348623157e+308,0.8638209143657977,882489.7638793557,-1000000.0,955.5435994455038];
        [0.0,-362414.5968903587,-329998.6857340537];
    }
}
const v23 = new C3(-3.0, -1);
const v24 = new C3(v23, -1);
const v25 = new C3(C3, v23);
function f26() {
    return -3.0;
}
/d(?<=a)/uisy;
/u(ab)\1G/gvis;
const v29 = /[(ab)?]/gvdis;
function f30() {
    %VerifyType(f26);
    delete v23[-1] | v29;
    v24.a;
    const o37 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o37);
    const v40 = ("-536870912").g;
    const v42 = new Uint16Array();
    v42[145] = v40;
    return v40;
}
const v44 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f45(a46, a47) {
    %PrepareFunctionForOptimization(f30);
    const v48 = f30();
    %OptimizeFunctionOnNextCall(f30);
    return v48;
}
const v50 = Symbol.toPrimitive;
Reflect.construct(C3, [Symbol,v25], f45);
v44[v50] = f45;
function f57(a58, a59) {
    return a59;
}
const v61 = new Promise(f57);
v61[v44] += 36002;
