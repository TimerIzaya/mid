let v3 = [518593.4885983085,770050.25272118,-1e-15,-1e-15];
v3.g = v3;
const v5 = ([2.2250738585072014e-308,6.063846701869009e+307,1000000.0,-Infinity])[3];
const v6 = [0.6931551258492582,3.0,-1000.0,NaN];
try { v6.reduce(9007199254740990); } catch (e) {}
class C8 {
    static {
        let v9 = this;
        v9.f = v9;
        const o24 = {
            toString(a14) {
                function f16(a17, a18, a19, a20) {
                    arguments.toString();
                    return arguments;
                }
                %OptimizeFunctionOnNextCall(f16);
                f16(-4294967297n, -4294967297n);
                return a14;
            },
        };
        const v25 = ++v9;
        v25 + v25;
        const v27 = Math.log10(v3);
        const o35 = {
            set d(a30) {
                for (let v31 = 0; v31 < 10; v31++) {
                    class C33 {
                        4294967296 = 996195971n;
                    }
                    new C33();
                }
            },
        };
        class C36 {
            constructor(a38) {
                o35.d = v5;
            }
        }
        try { Number.isInteger(538999.6915105504); } catch (e) {}
        Number.isNaN(v27);
        --v3;
    }
    #c;
    #f;
}
C8.prototype = C8;
const v42 = new C8();
try { v42.propertyIsEnumerable(v6); } catch (e) {}
const t48 = 256;
const v44 = new t48();
const v45 = v44?.constructor;
try { new v45(); } catch (e) {}
let v47;
try { v47 = v44.valueOf(); } catch (e) {}
const v48 = v47?.constructor;
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    let v56;
    try { v56 = new v55(a52); } catch (e) {}
    typeof v56 === "symbol";
}
try { new v48(); } catch (e) {}
const v61 = new C8();
function F62() {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this?.constructor;
    try { new v64(); } catch (e) {}
}
const v66 = new F62();
const o69 = {
    [-1]: v66,
    get b() {
        try { this.propertyIsEnumerable(v6); } catch (e) {}
        return F62;
    },
};
const v70 = o69?.b;
const v71 = v70?.constructor;
try { new v71(v61); } catch (e) {}
try { new v70(); } catch (e) {}
