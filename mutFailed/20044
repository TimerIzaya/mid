const v0 = [4096,-8,-2147483648,8,-30841,-9007199254740991,256,-1];
[65535,24825,127,-16,-47645,-2147483649,7];
[4096,-84,4294967297,57143,186323413,1073741824,258535246,-1109599785,37186,1438585422];
const v3 = [785751370,-9223372036854775808];
[23016,57001,-6,12,6,1024];
[-256,-705919459];
function f6() {
    return v3;
}
f6.prototype;
[11,4096,2,-15716,8,-12,128,-65537,10000];
[-536870912,-9223372036854775807,-268435456,7,-19584,-60591060,65536,23155];
const v10 = [-65536,530037778,-12890,5,16900720,65535,-580040999,-1,10000];
try { v10.includes(v0); } catch (e) {}
let v12 = -8;
v12--;
ArrayBuffer.e = ArrayBuffer;
new ArrayBuffer(v12);
new Int16Array(1073741824);
4 + 4;
new Uint8ClampedArray(4);
function f23(a24) {
    function F25(a27) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.constructor(v3); } catch (e) {}
    }
    const v29 = new F25(F25);
    try {
        function f30(a31, a32, a33) {
            let v34 = 0;
            do {
                const o35 = {
                };
                o35.h = v29;
                const o36 = {
                };
                o36.d = o36;
                v34++;
            } while (v34 < 7)
            return f30(a33, v29);
        }
        try { new f30(f23, ArrayBuffer, v29); } catch (e) {}
        f30();
    } catch(e43) {
        e43.message = e43;
    }
    return a24;
}
f23();
f23();
