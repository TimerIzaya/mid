let v0 = null;
const v1 = [-2.2250738585072014e-308,134107.09287742642,519806.1212179272,0.0,0.4097362647184305,-7.496196706250775,-5.0,Infinity];
const v2 = [-2.220446049250313e-16];
const v3 = [1.0,-3.0];
const v5 = Worker?.bind;
let v6;
try { v6 = new v5(v3); } catch (e) {}
const v7 = new Worker(v6, v3);
try { v7.has(v3); } catch (e) {}
[-36.118685222292584,-1000000000.0,-2.2250738585072014e-308,-1.141590917643093,1000.0,1000.0,-1.6813029980571341e+308,-5.0,-1000.0];
[3.48959073062759,2.0,556013.4522966524,0.5200290803999792];
[0.5537205093616908,-935173.579085308,0.7179007365658328,1.7976931348623157e+308,0.2340523533487615,-942801.2488502611,111281.11707982887,-2.0,986592.1844110582,Infinity];
function f15() {
    return 256n;
}
const v18 = new Float64Array(129);
v18[91];
v18[65536] = Worker;
let v21 = v1[v7];
function f22() {
    return v2;
}
new BigInt64Array(233);
64 >> 64;
const v28 = BigInt64Array >= 129;
v28 || v28;
if (v28) {
    let v33 = v0--;
    let v34 = v0++;
    --v34;
    let v36 = ++v33;
    Math.sqrt(v36);
    ++v36;
} else {
    v21 -= v0;
}
new BigInt64Array(64);
function F40() {
    if (!new.target) { throw 'must be called with new'; }
    F40 /= BigInt64Array;
    new RegExp();
}
class C48 extends F40 {
}
class C50 extends C48 {
    set d(a52) {
        super.d = this;
    }
}
