let v4;
try { v4 = Array.apply(Array, 0); } catch (e) {}
const v8 = Array();
class C9 extends Array {
    [1] = v8;
}
new Array(127);
new Date(-9223372036854775807, -9223372036854775807, Date, -9223372036854775807);
class C16 extends Int8Array {
}
-13 >> -13;
class C20 {
    constructor(a22) {
        try {
        } catch(e23) {
        }
        try {
        } catch(e24) {
        }
        for (const v25 of "bigint") {
        }
    }
}
C20.name;
-13 >>> -13;
function f29() {
    return 1;
}
let v30;
try { v30 = f29.bind(-13); } catch (e) {}
const v33 = new Uint8ClampedArray(4034);
try { Int16Array.from(v33); } catch (e) {}
new v30(2432);
const v40 = new BigUint64Array(1448);
function f41(a42, a43, a44) {
    return a43;
}
v40.toLocaleString(([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(v4));
const v51 = new Float64Array(1073741824);
parseInt("bigint");
const v55 = new Float32Array(1);
let v56;
try { v56 = v55.toLocaleString(); } catch (e) {}
const v57 = v55?.findLastIndex;
try { new v57(4034); } catch (e) {}
v4--;
const v62 = -10n ^ -10n;
v62 + v62;
const o68 = {
    set e(a66) {
    },
};
function f69(a70) {
    Object.defineProperty(v51, f69, { value: o68[this]() * v51 });
    return Uint8Array;
}
9007199254740992 + v56;
