64 >>> 64;
new Uint8Array(64);
175 >> 175;
const v10 = new Uint8ClampedArray(175);
let v12 = 128 - 128;
const v14 = new Int8Array(Int8Array);
const v15 = [];
function f16() {
    function f17(a18, a19) {
        v12 = a19;
        ("c").normalize();
        return Int8Array;
    }
    return f17;
}
function f22(a23) {
    a23[Symbol.matchAll] = v10;
}
Object.defineProperty(v15, "toString", { writable: true, configurable: true, enumerable: true, get: f16, set: f22 });
function f26() {
    return v15;
}
let v28 = -3.0;
v28--;
v28 / v28;
let v33 = Math.atan2(v15, -40875);
v33++;
v33 >>> v33;
function f37(a38, a39, a40) {
    Object.defineProperty(a39, Symbol.iterator, { enumerable: true, value: f22 });
    return a39;
}
try { new f37(v14, f37, v14); } catch (e) {}
class C44 extends f37 {
}
try { new C44(); } catch (e) {}
for (let v46 = 0; v46 < 5; v46++) {
    v46 >> v46;
    Object.defineProperty(C44, Float32Array, { enumerable: true, get: f37 });
}
const v48 = v28 % v28;
function f50(a51, a52) {
    a51 >>> a51;
    a51 >> a51;
    a51 + a51;
    const v56 = a52 >> a52;
    v56 / v56;
    v56 >>> v56;
    const o69 = {
        [-2]: a51,
        ...v28,
        ...v15,
        ...v33,
        get a() {
            Math.acos(0.0);
        },
        "a": v28,
        set g(a63) {
            v15.__proto__ < a52;
        },
        "h": a52,
        "c": v28,
        ...v15,
        "b": a51,
        get c() {
            return this;
        },
        m(a68) {
            return f26;
        },
        4: a52,
    };
    o69.toString = f26;
    return o69;
}
try { ("Bl4").substring(v48, v48); } catch (e) {}
const t76 = "Bl4";
t76[0] = "Bl4";
const v73 = new BigUint64Array("Bl4");
let v74;
try { v74 = v73.copyWithin(v73, v15); } catch (e) {}
const v75 = v74?.constructor;
try { new v75(C44, v74, C44); } catch (e) {}
Int32Array.e = Int32Array;
const v78 = new Int32Array();
try { v78.join(v78); } catch (e) {}
for (let v80 = 0; v80 < 25; v80++) {
    v78.__proto__ = v73;
}
const v81 = f50(0.0, 0.0);
v81[Symbol.toPrimitive] = f22;
const v85 = f50(2.220446049250313e-16, 2.220446049250313e-16)[4];
v85 - v85;
f50(2.220446049250313e-16, v28);
let v88 = 64n;
v88 ^ v88;
const v90 = v88--;
v90 | v90;
gc();
const v94 = [-1000.0,1000000000.0];
const v95 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
let v96;
try { v96 = v95.lastIndexOf(v33); } catch (e) {}
v96 == v96;
8n != 8n;
let v100 = 37369;
v100--;
function f102(a103, a104) {
    const o105 = {
        [v88]: 8n,
        __proto__: a104,
        [v100]: a104,
        [a103]: a103,
        ...a103,
        5: v94,
        ...v15,
    };
    return o105;
}
const v110 = C44?.constructor;
v110.name = v110;
let v111;
try { v111 = v110(v81); } catch (e) {}
class C113 {
    static {
        try { this.bind(128); } catch (e) {}
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
try { new C113(); } catch (e) {}
class C119 {
}
C119.g = C119;
try { ("string").match(175); } catch (e) {}
("string")[3];
const v124 = Symbol.iterator;
try { Symbol.keyFor(v111); } catch (e) {}
Symbol.for(v124.description);
const t141 = "string";
t141[v124] = v124;
new BigInt64Array();
async function f131(a132, a133, a134, a135) {
    const v136 = await C119;
    try { new v136(); } catch (e) {}
    try { new v136(); } catch (e) {}
    return a134;
}
function f139() {
    return f16;
}
Object.defineProperty(f131, "toString", { writable: true, configurable: true, enumerable: true, get: f139 });
const v140 = f131?.constructor;
try { new v140(Uint8ClampedArray); } catch (e) {}
f131.b = f131;
try { f131.toString(); } catch (e) {}
f131();
