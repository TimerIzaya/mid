const v4 = -256n >> -256n;
const v5 = typeof -85654.12629251496;
let v6 = "boolean";
v5 === v6;
try {
    v6.f = v6;
} catch(e8) {
}
const v9 = v4 + v4;
let v10 = v6.f;
[] = "64";
v6 = v5;
v10 &= ("64")[v10];
const v13 = [Float32Array];
v13["concat"]();
class C16 {
    #o(a18) {
        const v19 = [1073741824,1073741823,1376142744,1073741825];
        try { v19["find"](..."find", 116040658, ...v13); } catch (e) {}
        function f22() {
            return f22;
        }
        function f23(a24, a25, a26, a27) {
            a25.hasOwn(f22, a26);
            let v29;
            try { v29 = new a26(a25, f22); } catch (e) {}
            const v30 = v29?.is;
            try { v30(a25, a27); } catch (e) {}
            a27 >>> a27;
            let v33;
            try { v33 = a25(a27); } catch (e) {}
            let v34;
            try { v34 = new a26(); } catch (e) {}
            a25.freeze();
            -(a27 + a27);
            function f38() {
                [-16078,17128,-38127,50112,1073741824,-65536];
                [4553,33701,-14,645330027,536870888,9,58895,1000,20523];
                [4,-1073741824,-1024,18911];
                delete v33?.[1273];
                try {
                    f38();
                } catch(e44) {
                }
                return v33;
            }
            f38.arguments;
            try { f38.race(); } catch (e) {}
            let v48 = -f38.length;
            v48--;
            const v51 = f22().constructor;
            let v52;
            try { v52 = v51(); } catch (e) {}
            v52.arguments = v52;
            v52.bind(v48, v51, v52);
            function f54() {
                return v52;
            }
            const v55 = typeof f38;
            v55 == v55;
            try { v55.charAt(v34); } catch (e) {}
        }
        try {
            super.valueOf(this, a18, this);
            ["concat","concat","concat"];
            new Uint16Array(231);
            const v64 = new Int32Array();
            let {...v65} = v64;
        } catch(e66) {
            const v68 = new Uint32Array(v9);
            for (let i71 = 0, i72 = 10;
                (() => {
                    const v73 = i71 < i72;
                    v68[v73];
                    return v73;
                })();
                i72--) {
            }
        }
        function F80(a82, a83) {
            if (!new.target) { throw 'must be called with new'; }
            Number.isFinite(Number);
            const v86 = this.constructor;
            try { new v86(); } catch (e) {}
        }
        new F80();
        return a18;
    }
    1;
    static b;
    [116040658] = "64";
    ["64"] = -85654.12629251496;
}
new C16();
new C16();
new C16();
new Uint32Array(6);
new Map(2230);
new BigInt64Array(8);
const v102 = new Uint16Array();
let {...v103} = v102;
