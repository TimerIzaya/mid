const v1 = [-1539,1,12];
function f2() {
    return f2;
}
function f3(a4, a5) {
    a4.toString = f2;
    const o6 = {
        [a4]: v1,
    };
    return a4;
}
f3.toString = f3;
f3(f3);
f3(f2);
const v10 = new Int16Array(127);
try { Int32Array.of(); } catch (e) {}
new Int32Array(2);
class C15 {
}
class C16 {
    #f;
    [127];
}
C16[3] = 2;
~1000;
new BigInt64Array(1000);
const v23 = new BigInt64Array(76);
new Uint16Array(64);
try { new Float64Array(9, Float64Array, BigInt64Array); } catch (e) {}
new Float64Array(9);
class C32 {
}
const v33 = C32?.bind;
try { new v33(v23); } catch (e) {}
C32.f = -4n;
const v38 = new Uint16Array(3225);
v38[954];
try { Int16Array(76, v10, BigInt64Array); } catch (e) {}
new Int16Array();
for (const v43 of v38) {
    C16[3];
    const o49 = {
        [-352741132]: -352741132,
        set b(a48) {
        },
        "b": 2.220446049250313e-16,
    };
    Uint32Array.prototype = Uint32Array;
    ~3375;
    new BigUint64Array(3375);
}
