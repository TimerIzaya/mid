-Infinity;
const o10 = {
};
Worker(o10);
const v13 = async (a14, a15, a16) => {
    return Uint32Array;
};
new Float64Array(16);
new BigUint64Array(8);
new Int32Array(16);
new Int32Array(2);
const v31 = new Float64Array(5);
new Int32Array(v31);
const v34 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v38 = new Uint8Array(165);
v38.lastIndexOf();
const v40 = [];
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(a45, a44); } catch (e) {}
    try {
        this.h = v40;
    } catch(e50) {
        "XsWPw" ** e50;
    }
}
const v52 = new F42();
Reflect.ownKeys(v52);
for (let v55 = 0; v55 < 5; v55++) {
    const v57 = new BigUint64Array();
    function f58(a59, a60) {
        return a60;
    }
    const v61 = /o(\xed\xb0\x80)\x01/gudims;
    v61[Symbol.toPrimitive] = f58;
    const v64 = /(xyz{93})/gusy;
    try { v64.compile(v57, v61); } catch (e) {}
    function f66() {
        let v67 = -4294967295;
        const v68 = v67--;
        v34.length;
        const v70 = "a" / v68;
        const o78 = {
            [-4294967297n](a72, a73, a74, a75) {
                eval();
            },
        };
        return v70;
    }
    f66();
    %OptimizeFunctionOnNextCall(f66);
}
