let v1 = Uint16Array;
const v2 = new v1(14);
Set.length = Set;
const v5 = new Set(96);
const v8 = new Float64Array(2066);
try { v8.filter(v1, Set); } catch (e) {}
-2.2250738585072014e-308 - -2.2250738585072014e-308;
let v12;
try { v12 = v1(v2, 96, 2066); } catch (e) {}
({"buffer":v12,"byteLength":v12,"byteOffset":v1,} = v8);
const v13 = Set >= 2066;
v13 ? Set : 2066;
-4294967297 / -4294967297;
-Infinity;
[1.7976931348623157e+308,Set];
-9688 >> -9688;
let v26 = 0.0;
let v27 = --v26;
v27--;
Math.abs(-1772149832);
const v30 = !v13;
v30 || v30;
Set % v26;
+v27;
const v34 = -1772149832 >>> -9688;
v34 != v34;
const v36 = Math.abs(v34);
v36 << v36;
[1.7976931348623157e+308,v5];
const v39 = [v2];
v39[0] = v39;
for (let i42 = (() => {
        0 >>> 0;
        return v34;
    })();
    (() => {
        let v44 = i42 < 9;
        v44++;
        return v44;
    })();
    i42++) {
}
