const v2 = new Uint8Array(1817);
const v5 = new Float32Array(255);
function f6(a7, a8) {
    a7[255] = a7;
    new Float64Array(1073741824);
    return a8;
}
v5[Symbol.toPrimitive] = f6;
function f14(a15, a16) {
    1 * 1;
    new Float64Array(1);
    const v23 = new Int16Array(2402);
    v23.valueOf = f14;
    v23[2244] = v23;
    0 >>> 0;
    Object.defineProperty(Uint32Array, Symbol.iterator, { writable: true, enumerable: true, value: f14 });
    new Uint32Array(0);
    return 1;
}
try { new Symbol(); } catch (e) {}
v5[Symbol.toPrimitive] = f14;
v5[62] = v5;
try { Uint32Array.from(Uint32Array); } catch (e) {}
const v36 = new Uint32Array(228);
v36.valueOf = f14;
v36[74] = v36;
256 - 256;
try { Int32Array(Int32Array, 228, v2); } catch (e) {}
new Int32Array(256);
try { new Int8Array(Int8Array, Int8Array, Uint32Array); } catch (e) {}
new Int8Array(3942);
new Float32Array(64);
const v49 = [0.00952483356421907,-3.0,2.220446049250313e-16];
try { v49.includes(Uint32Array); } catch (e) {}
function f51() {
    return f51;
}
function f52(a53) {
    return a53;
}
f52.arguments = f52;
Object.defineProperty(v49, 1, { get: f51, set: f52 });
function f54() {
    return v49;
}
f54.arguments;
let v56;
try { v56 = f54(); } catch (e) {}
try { v56.fill(v56); } catch (e) {}
class C58 extends f54 {
}
C58.prototype = C58;
const v59 = new C58();
!(delete v59[1]);
