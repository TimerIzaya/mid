new Int16Array(6);
const v5 = new BigInt64Array(2104);
const v8 = new Float32Array(128);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const o15 = {
        "maxByteLength": 150,
    };
    [BigUint64Array];
    try {
        this.e = v5;
        const v18 = [1073741824,1073741823,1376142744,1073741825];
        function f19(a20, a21, a22, a23) {
            const v24 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
            const v25 = v24.concat(v24);
            v25.flat(v25);
            function F27() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    for (let [v29,v30,v31,v32] of F27) {
                    }
                } catch(e33) {
                }
            }
            for (let v35 = 0; v35 < 5; v35++) {
                try {
                    arguments.g = v35;
                } catch(e36) {
                }
            }
            function f37() {
                return a20;
            }
            function F39() {
                if (!new.target) { throw 'must be called with new'; }
            }
            function f41() {
                return f41;
            }
            const v42 = new Int8Array();
            class C43 {
            }
            function f44(a45, a46) {
            }
            function f47() {
                const o48 = {
                };
                const v49 = o48.__defineGetter__;
                let v50;
                try { v50 = v49(); } catch (e) {}
                return v50;
            }
            f44();
            v42.buffer;
            try { v18["find"](); } catch (e) {}
            const o69 = {
                valueOf() {
                },
                get d() {
                    function f58(a59, a60) {
                        const o68 = {
                            set g(a62) {
                                function F63(a65, a66, a67) {
                                    if (!new.target) { throw 'must be called with new'; }
                                }
                            },
                        };
                        return 536870912n;
                    }
                },
            };
        }
        for (let v70 = 0; v70 < 5; v70++) {
            f19();
        }
    } catch(e72) {
        a11[e72] <<= e72;
        new Float32Array(128, 128, 6);
        const v76 = [a12,a12];
        [e72,e72];
        [e72,a13,v76];
    }
    try {
        this.h = a12;
    } catch(e79) {
    }
}
const v80 = new F9(2104, 128, 128);
const v81 = new F9(2104, 128, 2104);
const v83 = new Map();
const v84 = v83 >>> v83;
const v86 = new Float64Array(Float64Array);
try { v86(v84, Float64Array, Int16Array); } catch (e) {}
let v88 = v8[2413805738];
v88 &&= v81;
[Float32Array];
[v80,v80];
[2104,F9,v80];
for (const v92 in v86) {
}
new F9(6, 6, 128);
new Int16Array(1000);
new v86();
function F98(a100) {
    if (!new.target) { throw 'must be called with new'; }
}
let v102 = 0.0;
function f103(a104) {
    return a104;
}
let v105 = -1000000.0;
class C106 {
    static g = 2.2250738585072014e-308;
    #c = v102;
    #e;
    static set a(a108) {
        v102 ^= 2.2250738585072014e-308;
        ({"b":v102,"c":a108,"g":v105,} = a108);
    }
    get f() {
        const v110 = v105 % v102;
        const v112 = Symbol.replace;
        2.2250738585072014e-308 || 2.2250738585072014e-308;
        try {
            v112.#e;
        } catch(e115) {
            return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            ([134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439]).length;
        }
        return v110;
    }
}
let v119;
try { v119 = new C106(); } catch (e) {}
const v120 = new C106();
const v121 = new C106();
const v122 = [v121,v121,v120];
const v123 = [v121,v122];
const v124 = [2.2250738585072014e-308];
function F125(a127, a128, a129) {
    if (!new.target) { throw 'must be called with new'; }
    a128.prototype;
    try { a129.groupToMap(f103); } catch (e) {}
    this.a = a127;
    let v133 = 536870912;
    v133 = 210;
    function F134(a136, a137, a138) {
        if (!new.target) { throw 'must be called with new'; }
    }
    try {
        this.f = a129;
    } catch(e139) {
    }
}
const v140 = new F125(2.2250738585072014e-308, F125, v123);
const v141 = new F125(v122, v140, v124);
const v142 = new F125(v141, v141, v122);
const v144 = [134133844,-339370636,65535,-4294967295,536870888,-324130953,536870912,268435439];
function f145(a146, a147, a148, a149) {
    function f150() {
        const v151 = v144.length;
        const v153 = v142.__lookupSetter__.length;
        class C156 extends Uint8Array {
            constructor(a158, a159) {
                v141.__proto__?.[a159];
                new Int16Array(2);
                new Uint16Array(192);
                new Float64Array(588);
                ([636.0619904743435,-1.0,1.02880264701966e+308,-656.9941137140671,-29.012861243904695,1000000000000.0])["flat"]();
                function F176(a178, a179, a180) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v181 = this.constructor;
                    try { new v181(); } catch (e) {}
                    this.h = -6.336273045214518e+306;
                    this.g = -1.7976931348623157e+308;
                }
                const v184 = new Uint16Array();
                function f186() {
                    let v189 = 257828.6336153492;
                    v189--;
                    class C192 {
                        static #m(a194) {
                        }
                    }
                    const v195 = new C192();
                    [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
                    new C192();
                    const v198 = new C192();
                    const v199 = [v198];
                    new BigUint64Array(2141);
                    v199.map(v184);
                    const v203 = [];
                    for (let i205 = 0; i205 < 2; i205++) {
                        new F176(undefined, v195, undefined);
                    }
                    class C213 extends C192 {
                    }
                    C213.prototype = C213;
                    const v214 = v203.constructor;
                    !v214.isArray();
                    class C217 extends v214 {
                    }
                }
                a158[1] = Float64Array;
                super(a158);
            }
        }
        function f220(a221) {
            const o224 = {
                "g": 1000000000.0,
                set a(a223) {
                    a223.h = this;
                },
                "h": a221,
                "d": 1000000000.0,
                "f": v153,
                __proto__: C156,
                "e": a221,
                "a": a147,
                "b": a146,
                "b": -1.1013479045636231e+308,
                2: a221,
            };
            return o224;
        }
        f220();
        const v226 = v151 >>> v151;
        const v227 = v226 % v226;
        v227 - v227;
        a147[v227 & v227] += v119;
        const o230 = {
            "apply": Date,
            "construct": f220,
            "defineProperty": f220,
            "deleteProperty": f145,
            "get": Date,
            "getOwnPropertyDescriptor": f220,
            "getPrototypeOf": f103,
            "ownKeys": Date,
            "setPrototypeOf": f150,
        };
        new Proxy(C156, o230);
        return f145;
    }
    try { f150(); } catch (e) {}
    new Int32Array(2528);
    new Int8Array([v122]);
    f150();
    %OptimizeFunctionOnNextCall(f150);
    return f150;
}
f145(v144, f145, f145, v144);
new Int16Array(4096);
v81[128] = BigUint64Array;
const v250 = new Uint32Array(3);
class C251 {
    constructor(a253, a254, a255, a256) {
        for (let v257 = 0; v257 < 5; v257++) {
            v250[v257] = a256;
        }
    }
}
function f258(a259, a260) {
    const o262 = {
        ...a259,
        get d() {
            return this;
        },
    };
    return f258;
}
new C251();
new Int16Array(13);
const v265 = [-65536,-432658450,256];
/[.ma\Sc]/vdimsy.exec(Int16Array);
class C269 {
    toString(a271, a272, a273) {
    }
}
new Float64Array(v265);
function f278(a279, a280) {
    const o281 = {
        [a279]: a280,
        [a280]: -65537,
        65536: -65537,
    };
    return -65537;
}
f278(9223372036854775807, -65537);
