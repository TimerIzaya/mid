class C3 {
    constructor(a5, a6, a7) {
        class C9 extends a6.constructor {
        }
        new C9();
    }
    static ["split"] = 1000000.0;
    valueOf(a12) {
        let v13;
        try { v13 = a12(this, "split"); } catch (e) {}
        let v14;
        try { v14 = v13.getUTCMonth(); } catch (e) {}
        let v15;
        try { v15 = v14(a12, 536870887, this); } catch (e) {}
        const v16 = v15 ^ v14;
        try {
            super.imul(a12, v16, 1000000.0, "split", v16);
        } catch(e18) {
        }
        return 1000000.0;
    }
    #g;
}
new C3("split", C3, 536870887);
new C3();
new C3();
const o31 = {
    "maxByteLength": 536870889,
};
const v33 = new SharedArrayBuffer(217, o31, 75);
try { v33.grow(); } catch (e) {}
gc();
function f40() {
    ("D")[0].substring().charCodeAt();
    return "D";
}
~(-256n >> -256n);
for (let v58 = 0; v58 < 100; v58++) {
    Array(36862);
}
function F66(a68) {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new F66(536870889, 61277, SharedArrayBuffer);
with (v69) {
    function F70(a72, a73, a74) {
        if (!new.target) { throw 'must be called with new'; }
        const t47 = this.POSITIVE_INFINITY;
        t47(Float64Array);
    }
    let v77 = 10;
    for (;
        (() => {
            class C78 {
            }
            const v80 = Array(C78);
            const v81 = new C78();
            function f82(a83, a84, a85, a86) {
                return a85;
            }
            class C87 extends f82 {
                constructor(a89, a90, a91) {
                    super(v81);
                    for (let v92 = 0; v92 < 25; v92++) {
                        "p" + v92;
                        const v95 = v80.includes;
                        try { v95(); } catch (e) {}
                        const v99 = new BigInt64Array(2325);
                        for (const v100 in v99) {
                        }
                    }
                }
            }
            const v101 = v77--;
            v101 >>> v101;
            return v101;
        })();
        ) {
    }
}
