let v0 = [2147483647,255];
[16,0,-1745875800,-63629,-14,10,65537];
[268435440,-54345,268435456,9007199254740992,598659019,-9223372036854775808];
const v6 = [3,4096,536870887,536870889,584910079,-1342725944,4294967295];
const v7 = [-2147483649,65536,9,8,5,1,536870889,4294967297,-44510];
[-41224];
new Int16Array(7);
Math.cbrt(Math);
class C14 {
    10 = -10902;
    e;
    static {
        v0 >>= this;
        const v18 = new Uint8Array(891);
        function F19() {
            if (!new.target) { throw 'must be called with new'; }
            let v20 = this;
            for (let v21 = 0; v21 < 50; v21++) {
                v21 << v21;
                class C23 {
                }
                let v24 = new C23();
                let v27;
                try { v27 = C14["valueOf"](); } catch (e) {}
                const v28 = [-2147483648,536870887,1073741825];
                const v29 = v24[-2];
                let v30;
                try { v30 = new v27(v28, v29, ..."valueOf", 256); } catch (e) {}
                for (let v31 = 0; v31 < 25; v31++) {
                    v20["p" + v31] = v31;
                    const o42 = {
                        valueOf(a35, a36, a37) {
                            function f38(a39) {
                                return a39;
                            }
                            Worker(f38);
                            return a35;
                        },
                    };
                }
                v28[-10902] = "valueOf";
                ({"length":v20,...v24} = v28);
                new C23();
                -10902 instanceof v30;
            }
        }
        new F19();
        const v47 = new F19();
        new Float64Array(3);
        new Float32Array(129);
        class C54 extends Float32Array {
            [v18];
            n(a56, a57, a58) {
                function F59(a61, a62, a63, a64) {
                    if (!new.target) { throw 'must be called with new'; }
                    try {
                        this.h = a64;
                    } catch(e65) {
                    }
                    try {
                        this.e = a62;
                    } catch(e66) {
                    }
                    try {
                        this.g = a63;
                    } catch(e67) {
                    }
                }
                new F59(a58, a58, 3, 129);
                class C69 {
                }
                [C69,C69];
                try { a57(C69, v18, a57, v47); } catch (e) {}
                const v72 = super[129];
                [v72];
                [F59,891];
                [v72,a58,Int16Array,this];
                class C76 {
                }
                class C77 extends C76 {
                    static #m(a79, a80, a81, a82) {
                    }
                }
                new F59(129, a57, a57, 3);
                new F59(3, a57, 3, 891);
                return a58;
            }
        }
        new C54();
        new C54();
        new C54();
        const v89 = new Float32Array(Float32Array);
        for (let v90 = 0; v90 < 25; v90++) {
            function f91(a92, a93, a94, a95) {
                a92[1];
                for (let v98 = 0; v98 < 5; v98++) {
                }
                const v100 = arguments.__lookupGetter__;
                try { v100.constructor(); } catch (e) {}
            }
            for (let v102 = 0; v102 < 10; v102++) {
                f91(v89);
            }
        }
        try { v7.findLastIndex(257, v6); } catch (e) {}
        this[8] = 257;
        super.d ^= 1;
        try {
            super.p();
        } catch(e106) {
        }
    }
}
new C14();
new C14();
new C14();
for (let v110 = 0; v110 < 5; v110++) {
    const o114 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o114);
}
function F116(a118, a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    class C123 {
    }
    const v124 = new C123();
    const v125 = new C123();
    v124 == v125 ? v124 : v125;
    Reflect.construct(Int8Array, [1126838905]);
}
new F116(F116, F116, F116);
