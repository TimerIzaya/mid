const v2 = new Float64Array(4058);
const v5 = /(J5a{0,1}?)/y;
class C6 {
    static {
        for (let v8 = 0; v8 < 25; v8++) {
            const v9 = [601759695];
            const v10 = [1073741824,1073741823,1376142744,1073741825];
            function f11(a12, a13, a14, a15) {
                ~a13;
                try { a12(v10, a12, a15); } catch (e) {}
                const v18 = a14 << a14;
                v18 % v18;
                function f20() {
                    return a12;
                }
                const v22 = new Int8Array();
                isNaN.length;
                const v26 = isNaN * 536870887;
                let v27 = v26 - v26;
                v27++;
                const v29 = v26 ** v26;
                try { Number(v5); } catch (e) {}
                Number.isNaN(v29);
                const v34 = v22.buffer.__defineGetter__;
                try { v34(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f20);
                let v37;
                try { v37 = v10["find"](..."find", a15, ...v9); } catch (e) {}
                return v37;
            }
            for (let v38 = 0; v38 < 5; v38++) {
                f11(this, v38);
            }
        }
    }
}
new WeakSet(0);
new Int32Array(2085);
const v46 = new Uint8Array(2);
new Uint32Array(2);
new Uint8ClampedArray(4, v2, Uint8ClampedArray, 0);
class C55 {
    9 = 6;
}
const v56 = new C55();
const v57 = new C55();
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this?.toPrimitive;
    try { new v64(v57, 6, 6, a60, v64, v46); } catch (e) {}
    a60[9];
    +a63;
    try {
        this.c = -578828680;
    } catch(e68) {
    }
}
const v69 = new F58(v56);
new F58(v69);
