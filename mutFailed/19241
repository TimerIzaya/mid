class C3 {
    ["1rBl"] = "function";
    constructor(a5, a6) {
        this.b = this;
        const v7 = a6?.constructor;
        try { new v7(this, v7); } catch (e) {}
        a5?.[a5];
        let v10 = this ** "1rBl";
        v10--;
    }
    static g;
    static valueOf(a13) {
        const v14 = ~this;
        "function" !== "function" ? "function" : "function";
        Math.cos(v14);
        Math.atanh(v14);
        +-2147483647;
        return -2147483647;
    }
}
const v22 = new C3(-4.0, "function");
let v23 = new C3(v22, "function");
v23.e = v23;
v23.b;
const v25 = new C3(C3, -4.0);
const v27 = new Map();
const v29 = new Uint32Array();
const t27 = [1711596310];
t27[9] = v29;
new Int32Array();
class C33 {
    get f() {
        v23 += v27;
        let v35;
        try { v35 = this(this, this, v27); } catch (e) {}
        this.f %= -4.0;
        v25[1877] = v35;
        const o38 = {
            "maxByteLength": 2137,
        };
        const v40 = new SharedArrayBuffer(2137, o38);
        new Int8Array(v40);
        Math.atan2(-4.0, -4.0);
        const o45 = {
        };
        function F47(a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
            const v51 = this.constructor;
            let v52;
            try { v52 = new v51(); } catch (e) {}
            -429.3290910931888 << v52;
        }
        new F47();
        return o38;
    }
}
try { new C33(); } catch (e) {}
const v56 = new C33();
let v57;
try { v57 = v56.toString(); } catch (e) {}
v57[9];
new C33();
const v60 = new C33();
let v61;
try { v61 = v60.toString(); } catch (e) {}
try { v61.toLocaleLowerCase(); } catch (e) {}
function f63() {
    Promise.asin(Promise);
    return f63;
}
%PrepareFunctionForOptimization(f63);
f63().caller;
%OptimizeFunctionOnNextCall(f63);
f63();
