class C3 {
    constructor(a5, a6) {
        this[1578] = "hasInstance";
        const v7 = a6?.[7];
        for (const v8 in "hasInstance") {
            v7[-13] ||= a6;
            const v10 = new Set();
            let [v11,,...v12] = v10;
            v11.toDateString(Set, Set, v11);
            const o14 = {
            };
            "P" % ("hasInstance" ** "P");
            for (let v17 = 0; v17 < 32; v17++) {
                [1126838905];
                const o22 = {
                    1073741825: "MIN_VALUE",
                };
                const t17 = "hasInstance";
                t17["p" + v17] = v17;
            }
        }
    }
    static #a = "hasInstance";
}
const v24 = new C3(-13, "hasInstance");
const v25 = new C3(v24, C3);
new C3(v25, -13);
function F30(a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(F30); } catch (e) {}
    139837843 in this;
}
new Float32Array(255);
for (let v37 = 0; v37 < 25; v37++) {
}
const o40 = {
    "execution": "async",
};
const v41 = gc(o40);
v41.finally();
v41.then();
new Uint8ClampedArray(129);
const o51 = {
    "maxByteLength": 47,
};
SharedArrayBuffer(255, o51);
new Float64Array(120);
-536870912n == "-11838";
const v58 = new Set();
[Set,Set,v58];
let v60 = 10;
for (let i = 0; i < 10; i++) {
    v60--;
    let v63 = v60 << v60;
    --v63;
    let v65 = --v63;
    let v66 = ++v65;
    Math.cos(++v66);
}
