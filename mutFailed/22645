const v0 = [];
function f1() {
    const o12 = {
        o() {
            v0[this] = this;
            const v3 = this.__proto__;
            let v4;
            try { v4 = new v3(v3, this, v3); } catch (e) {}
            const v5 = v3 || v4;
            -(-7598025);
            Math.tan(v5);
            -7598025 % -7598025;
            +v5;
            return this;
        },
        [v0]: v0,
    };
    return o12;
}
f1();
const v14 = f1();
const v15 = f1();
const v16 = [f1,v15,v15,v15,v14];
[v16,v16,f1,v16];
[v0,v0];
[-4294967295,10000,1073741824,9223372036854775807,-24198021,-1624024756,10,-2147483647];
[-2147483647,4096,1073741824,1,-872508948];
[127];
new BigUint64Array(1024);
new BigUint64Array(7);
new Uint32Array(129);
function f32(a33, a34) {
}
function f35(a36) {
}
const v38 = new Map();
function F40() {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = Date.toString();
    const v45 = v43[23].trimRight;
    const v46 = v45.toString;
    try { v46(); } catch (e) {}
    try { v45(); } catch (e) {}
    const v49 = v43.replaceAll();
    v49[30] = v49;
    const v51 = new Uint32Array();
    v51.toString = Date;
    const v53 = new Set();
    const v54 = v53.add();
    class C55 {
    }
    const v57 = Array();
    for (let v58 = 0; v58 < 5; v58++) {
        const v59 = v57.includes;
        try { v59(); } catch (e) {}
        const v63 = new BigInt64Array();
        for (const v64 in v63) {
        }
    }
    v54.keys();
    const v66 = v53.add;
    v66.g = v66;
    const v68 = v53["delete"]();
    const v69 = v68 || v68;
    const v70 = v69 || v69;
    const v71 = v70 && v70;
    const v72 = v69 && v69;
    const v73 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    try {
        v57.forEach(f35, v73);
    } catch(e75) {
    }
    const v76 = v72 || v72;
    const v77 = v76 || v76;
    v77 && v77;
    const o79 = {
    };
    const v80 = new Array();
    v80[0];
    const v83 = ("getPrototypeOf").blink();
    const v85 = v83[28].strike();
    v85.split(v85, v71);
    const v87 = v83.strike();
    const v88 = v87.search;
    try { v88.call(); } catch (e) {}
    const v90 = v87.replace();
    try { v90.slice(4, v38); } catch (e) {}
    class C92 {
    }
    let v93;
    try { v93 = C92(); } catch (e) {}
    v93?.hasOwnProperty;
    class C95 extends C92 {
        [o79] = C92;
    }
    const v96 = new C95();
    function f97() {
    }
    v96.constructor = f97;
    const t99 = v96.constructor;
    t99();
    const t100 = v96.constructor;
    t100();
    const v102 = new C95();
    const t104 = v102.constructor;
    new t104();
    const t106 = v102.getPrototypeOf;
    t106.toString = f32;
    const v107 = BigUint64Array.of();
    try { v107.entries(); } catch (e) {}
    const v110 = Uint8Array.length;
    v110 + v110;
    const v112 = new C95();
    const v113 = v112.getPrototypeOf;
    const v114 = v113.toString();
    try { v114.italics(); } catch (e) {}
    const v116 = new v113();
    const v117 = v116.getPrototypeOf;
    v117 % v117;
    const t118 = v112.getPrototypeOf;
    new t118();
    const v121 = new C95();
    const v122 = v121.constructor;
    try { v122(F40, v72); } catch (e) {}
    for (const v125 of Array()) {
    }
}
new F40();
new F40();
