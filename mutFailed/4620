const v3 = [-1000.0,0.8739290405935484,1000000000000.0,-Infinity,-5.594806053020034,1000000000000.0,467778.6391204393,238.10665319339932];
const v4 = [-5.0,1000.0,400714.82671154896,-1000000.0,482.5895813241225,1000.0,1.5298981643002137e+308,1.7976931348623157e+308];
function f5(a6, a7) {
    for (let i10 = 0, i11 = 10; i10 < i11; i10++) {
    }
    return v3;
}
v4[Symbol.toPrimitive] = f5;
const v20 = [-2.220446049250313e-16,-Infinity,-370883.21895988646,1.2237126129497617e+308,976197.7088279282,454.2033179295722,4.0,0.7150469783847639,-1000000000000.0];
v20[3] = v20;
const v21 = [1000000000000.0,v4,1000000000000.0];
try { v21.map(v4); } catch (e) {}
const v23 = [v4,1000000000000.0,-1.0944041303759783e+308];
try { v23.join(-1.0944041303759783e+308); } catch (e) {}
[v20];
-28452 / -28452;
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    a36[Symbol.toPrimitive] = f5;
    try { this.constructor(a35, a37, -1.0944041303759783e+308); } catch (e) {}
    a36.prototype = a36;
    a37.e = a37;
}
const v41 = new F33(3011, Uint8ClampedArray, F33);
v41[Symbol.toPrimitive] = Symbol;
v41.valueOf = Date;
v41.constructor = Date;
const v44 = v41.constructor;
const v45 = v44?.UTC;
try { new v45(v44, 3011, v4, v4, -1000000000000.0, 3011, -1000000000000.0); } catch (e) {}
new v44(v41, Uint8ClampedArray, 3011);
