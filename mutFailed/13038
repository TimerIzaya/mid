const v2 = new Int16Array(40);
function f3(a4) {
    const v5 = [-268435456,1000];
    class C6 {
        constructor(a8, a9, a10, a11) {
            let v12 = 0;
            do {
                let v14 = 30918;
                const v15 = v14--;
                let v16 = v5 ^ v5;
                Math.random();
                Math.exp(v5);
                v15 >> v5;
                Math.ceil(v15);
                ++v16;
                v12++;
            } while (v12 < 2)
        }
    }
    return C6;
}
v2[Symbol.toPrimitive] = f3;
new Float32Array(129);
const v32 = new Uint8ClampedArray(7);
function f33() {
    return v32;
}
function f34(a35, a36, a37, a38) {
    const o50 = {
        [Int16Array]: v32,
        [v2](a40, a41, a42, a43) {
            for (let v44 = 0; v44 < 33; v44++) {
            }
            try { v32.every(...a37, a43, a38, a41, ...a42); } catch (e) {}
            return v2;
        },
        "d": a36,
        "c": a36,
    };
    return o50;
}
const v53 = f34(129, 129, 40, f34(7, 129, 129, f34(40, 40, 7, 129)));
const v54 = [837449509,1,0,28677,-1493785230,14423,536870887,1395954475,1096550133];
function f55() {
    function f56(a57, a58) {
        a58 <= v53;
        const v61 = Symbol.iterator;
        const o70 = {
            [v61]() {
                let v63 = 10;
                const o69 = {
                    next() {
                        v63--;
                        const v67 = v63 == 0;
                        const o68 = {
                            "done": v67,
                            "value": v63,
                        };
                        return o68;
                    },
                };
                return o69;
            },
        };
        return 7;
    }
    return f56;
}
Object.defineProperty(v54, "toString", { configurable: true, enumerable: true, get: f55 });
const v71 = [-7,-5,-10,7];
function F72(a74) {
    if (!new.target) { throw 'must be called with new'; }
    new Uint8Array();
}
const v78 = new F72(v54);
v78.toString = f55;
const v79 = new F72(v54);
v79.toString = f33;
try {
    const v82 = new BigUint64Array(4);
    [v82];
} catch(e84) {
}
try {
    const o85 = {
    };
} catch(e86) {
}
try {
    const o87 = {
    };
} catch(e88) {
}
try {
    const o89 = {
    };
} catch(e90) {
}
const v91 = new F72(v54);
class C92 extends F72 {
    static valueOf(a94, a95, a96, a97) {
    }
    [v79] = v71;
    [v54] = v54;
    [v78] = v91;
}
const v98 = /2a\sc/uds;
function f99() {
    try { v98.test(v98); } catch (e) {}
}
v98[Symbol.toPrimitive] = f99;
const o105 = {
    [v98](a104) {
    },
};
