-Infinity;
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a8;
    } catch(e10) {
    }
    function f12(a13, a14, a15, a16) {
        "valueOf" | a14;
        a13 / a13;
        const v19 = a14 < a14;
        let v20 = f12 >>> a15;
        v20++;
        const o25 = {
            n(a23, a24) {
                return v19;
            },
        };
        return a14;
    }
}
new F6(1e-15, 2.2250738585072014e-308);
const v27 = new F6(2.2250738585072014e-308, 2.2250738585072014e-308);
new F6(1e-15, 2.2250738585072014e-308);
const v35 = new Int8Array();
for (const v36 in v35) {
}
const v37 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v38 = [601759695];
const v39 = [0.0,1.0,-6.743702675363474,400.9902683003188];
let v40 = "string";
for (let v41 = 0; v41 < 5; v41++) {
    function f42() {
        for (let i45 = 0, i46 = 10;
            i45 < i46;
            (() => {
                const v50 = i45++;
                v50 >> v50;
            })()) {
            for (const v54 in v39) {
                v40 *= v40;
            }
        }
        return v39;
    }
    f42();
    %OptimizeFunctionOnNextCall(f42);
}
const v56 = [1073741824,1073741823,1376142744,1073741825];
function f58(a59, a60, a61, a62) {
    function f64() {
        const o78 = {
            "e": -4294967295,
            ...v37,
            84: arguments,
            ..."Vre",
            set b(a68) {
            },
            ["Vre"](a70, a71) {
                const v73 = new Int8Array();
                v73.buffer.slice(-9726);
                super[f64];
            },
        };
        return a59;
    }
    class C80 extends Float32Array {
        static {
            try {
                v27.#e = this;
            } catch(e82) {
            }
        }
        constructor(a84, a85, a86) {
        }
    }
    f64();
    %OptimizeFunctionOnNextCall(f64);
    let v89;
    try { v89 = v56[a61](..."find", a62, ...v38, ...v56, ...522675525n); } catch (e) {}
    v89 <= a61;
    return arguments;
}
try { f58(964598.6714444079, 964598.6714444079, 964598.6714444079, v38); } catch (e) {}
let v94 = 5;
-9 >>> -9;
const v97 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v98 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v98.map(1.0); } catch (e) {}
const v101 = Symbol.species;
v97[v101] = 8.580387257773513;
~268435440;
Uint8Array.length;
new Uint8Array(268435440);
v101.description = 964598.6714444079;
v94 = -15;
const v109 = new Int8Array(8);
[v109];
995 | 995;
const v114 = new Uint8ClampedArray(995);
function F115() {
    if (!new.target) { throw 'must be called with new'; }
}
new F115();
function f118(a119, a120, a121, a122) {
    function f123() {
        function f124(a125) {
            return f118;
        }
        f124(f124);
        return f118;
    }
    f123();
    f123();
    %OptimizeFunctionOnNextCall(f123);
    return a120;
}
const v130 = new Int8Array(v114);
const v131 = v130.copyWithin;
v131.name = v131;
for (let v132 = 0; v132 < 32; v132++) {
    const v133 = -9 << v132;
    new Int32Array();
    1940694780n ^ 1940694780n;
    function f138(a139, a140) {
        const o141 = {
            ...a139,
        };
        o141.d;
        return f138;
    }
    v97[-2] = v133;
    const v143 = v98[v101];
    try {
        v143.__proto__ = v143;
    } catch(e144) {
        e144.g = e144;
    }
    const v146 = new Uint8ClampedArray();
    v146.byteOffset;
    Math.sin(/c(?:ab)|cde/vdmy.exec());
    const v153 = "object" + v132;
    const v154 = v153?.trim;
    try { new v154(); } catch (e) {}
    v98[v153] = v132;
}
const v156 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F157(a159, a160, a161, a162) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a159;
}
const v163 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C165 {
    static #e;
    m(a167, a168, a169, a170) {
        v163.#e;
        a168.#e = -1;
    }
}
const v173 = new Uint16Array(Uint16Array);
new Int32Array(v173);
const o176 = {
};
let v178 = 0;
v178 & v178;
do {
    break;
    v156[Symbol.asyncIterator] = v97;
    v178++;
} while (v178 < 9)
Uint8ClampedArray.name;
const v188 = new Uint8ClampedArray(995);
new Int8Array(v188);
