class C3 {
    #valueOf(a5) {
        try { this["exec"]("exec", "exec"); } catch (e) {}
        let v8;
        try { v8 = new a5(this, this, 114371.36107837316); } catch (e) {}
        v8 = 114371.36107837316;
        let {"e":v9,"length":v10,} = "exec";
        return this;
    }
    static #c;
    static a = "toTimeString";
}
const v14 = new C3();
const v15 = new C3();
const t14 = 1e-15;
const v16 = new t14();
function F20(a22, a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v16;
        Math.atan2(536870912, -9);
        function f30() {
            const o31 = {
            };
            return o31;
        }
        a23();
    } catch(e33) {
    }
    try {
        this.d = 1e-15;
    } catch(e34) {
    }
}
const v35 = new F20(v15, "toTimeString", v14, -59379);
new F20(v14, C3, "toTimeString", 9223372036854775807);
new F20(v16, v15, 1e-15, 9223372036854775807);
("toDateString")[9].toUpperCase().match();
for (let v43 = 0; v43 < 25; v43++) {
    const v44 = [601759695];
    const v45 = [1073741824,1073741823,1376142744,1073741825];
    function f46(a47, a48, a49, a50) {
        let [] = "toTimeString";
        a48.normalize().link(v43);
        const v54 = a50.toLocaleLowerCase();
        const v57 = new Float64Array(3346, 3346, 3346);
        v57.constructor;
        const v60 = [];
        v60[0] = v60;
        new BigUint64Array(v60);
        v54 == v54;
        try { v45["find"]("find", v35, v44); } catch (e) {}
    }
    for (let v64 = 0; v64 < 10; v64++) {
    }
}
