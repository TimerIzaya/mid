const o9 = {
    get d() {
        this[0] /= 4294967296;
        let v5 = -908890636;
        return Math.log(this & --v5);
    },
};
o9[0] = o9;
for (let i = 0; i < 10; i++) {
    o9.d;
}
new Array(16);
const v14 = new Set();
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a17;
    } catch(e19) {
        for (let [v20,v21] of a17) {
            try {
            } catch(e22) {
            }
        }
    }
    try {
    } catch(e23) {
    }
    const v24 = v14[this];
    try {
        new F15(v24);
    } catch(e26) {
    }
}
try {
} catch(e28) {
}
function F29() {
    if (!new.target) { throw 'must be called with new'; }
}
new WeakMap();
function F35() {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new Uint16Array(3);
v39.reverse();
[10];
[1073741824];
[-1447246871,10,-11,-642874085,-29322];
([974836.255416306,7.54270135293536,0.0,0.35539841926815563,1.385396251341163,-1000000000000.0,NaN,-1.7976931348623157e+308]).toLocaleString();
o9[o9];
const o49 = {
};
gc(o49);
const t52 = "symbol";
const v51 = delete t52[1];
const o52 = {
};
Object.defineProperty("symbol", "c", { configurable: true, get: Array });
typeof Set === "string";
new F29();
new Set();
const v59 = [-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0];
[v51,v59,..."symbol"];
~-9007199254740992;
Math.tan(-9007199254740992);
-"symbol";
!"symbol";
new Float32Array(v59);
