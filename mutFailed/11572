class C3 {
    static get f() {
        try {
        const t0 = "16";
        new t0("16", this, this, "3", "3");
        } catch (e) {}
        try {
            super.n(this);
        } catch(e7) {
        }
        return this;
    }
    static {
        class C9 {
            static [this];
        }
        C9.name;
        const v11 = C9?.constructor;
        let v12;
        try { v12 = new v11(this); } catch (e) {}
        v12.length = v12;
        new C9();
        const v14 = new C9();
        const v15 = v14?.constructor;
        try { new v15(); } catch (e) {}
        new C9(v14);
    }
}
C3.b = C3;
C3.g = C3;
const v18 = new C3();
const v19 = v18?.constructor;
try { new v19(); } catch (e) {}
const v21 = new C3();
const v22 = v21?.constructor;
try { new v22(); } catch (e) {}
let v24;
try { v24 = v21.isPrototypeOf(v21); } catch (e) {}
v24 || v24;
const v26 = new C3(v21);
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
const v29 = v26?.constructor;
try { new v29(); } catch (e) {}
try { new v29(); } catch (e) {}
function f32(a33, a34, a35) {
    a34 == a34;
    const o47 = {
        11: C3,
        ["3"](a38, a39, a40, a41) {
            super[v18] = v18;
            try {
                new C3();
            } catch(e43) {
            }
            return this;
        },
        get h() {
            try {
                this.length = 2;
            } catch(e46) {
            }
            return 2;
        },
    };
    o47[11];
    o47[11] = o47;
    return o47;
}
const v49 = f32("3", "3", "16");
f32(v18, v49, f32(f32, "16", v49));
-9007199254740990n == -9007199254740990n;
3n ^ 3n;
-1242081303n + -1242081303n;
const v58 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
try { v58.reduceRight(5); } catch (e) {}
const v61 = v58.toSpliced(-1148418937, -1148418937);
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
const v63 = new Uint8ClampedArray(v61);
let v64 = v63.lastIndexOf(-1148418937);
const v65 = v64--;
v65 != v65;
