for (let v4 = 0; v4 < 25; v4++) {
}
new Date(-4.0);
-Infinity;
function f11(a12, a13, a14, a15) {
    const o26 = {
        "b": a12,
        [1.0]: 1.0,
        "f": false,
        __proto__: a13,
        "b": a12,
        ...a13,
        get a() {
            a13 = 1.0;
            try { this.m(this, a14, this); } catch (e) {}
            function f21() {
            }
            class C22 extends f21 {
            }
            const v23 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
            v23.concat(v23);
            return this;
        },
    };
    return a12;
}
const v27 = f11(1.0, false, 268435439n, 268435439n, -1.256210815915741e+307);
f11(-1.256210815915741e+307, 65536n, 268435439n, 268435439n, f11(-1.256210815915741e+307, -1.256210815915741e+307, 65536n, 65536n, -462109002n, -462109002n), 268435439n, v27);
const v30 = /a97t\p{gc=Nd}Ip((((.).).).)(K\P{gc=Decimal_Number})/gy;
const v31 = /V/uiy;
/X\xf0\x9f\x92\xa9+/visy;
class C33 extends f11 {
    static p(a35, a36, a37, a38) {
        super.f;
        try {
            ("minor").valueOf();
            Symbol.hasInstance.toString();
            new f11(-0.0, /(?!\1(a\1)\1)\1/gimy, 65536n, -462109002n);
        } catch(e48) {
        }
        return false;
    }
    static #g = v31;
    static 7;
    1073741825 = v27;
    [v30];
    static [-2];
    constructor(a50) {
        -268435456 || 4.0;
        Math.sign(4.0);
        +4.0;
    }
    9;
    static get c() {
    }
    toString(a60) {
        let v59 = this;
        v59.e *= -1.256210815915741e+307;
        v59 += v59;
        for (let v61 = 0; v61 < 10; v61++) {
            a60["p" + v61] = v61;
        }
        return -1.256210815915741e+307;
    }
}
new C33();
new C33();
Symbol.for(Symbol.toPrimitive.description);
const t67 = [618.1593022982238,-670.4331556988014,-598.8215888934105,1e-15,0.6439103075146282,996419.0616454568,-1.0,-1000000000.0,1e-15,-566.0187654378863];
t67[Symbol.toPrimitive] = Symbol;
new C33();
this instanceof Float32Array;
