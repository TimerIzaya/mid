class C3 {
    constructor(a5, a6) {
        const v7 = 0 in this;
        try {
            super.reject(-7, a5, 0, v7, v7);
        } catch(e9) {
        }
    }
    static #g = -7;
    #h = 0;
    static [0];
    4259938026;
    static c;
}
const v10 = new C3(0, 0);
const v11 = new C3(-7, 0);
const v12 = new C3(0, 0);
function* f13(a14) {
    return f13;
}
v10.constructor;
C3[0].substring().charCodeAt();
class C20 {
    p(a22, a23, a24, a25) {
        try { a25(a22, -7, v12, 0); } catch (e) {}
        switch (this) {
            case v11:
                function f27() {
                    return f27;
                }
                const v30 = new BigUint64Array(3375);
                let [v31,,v32,...v33] = v30;
                v12.__proto__;
                super.d = v10;
                break;
        }
        return this;
    }
    ["number"];
}
new C20();
new C20();
new C20();
function F38() {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = new F38();
const v41 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f43() {
    return -172798652;
}
const v45 = 9007199254740991n * 9007199254740991n;
v45 & v45;
for (let v47 = 0; v47 < 5; v47++) {
    function f48() {
        for (let v49 = 0; v49 < 25; v49++) {
        }
        class C53 {
            constructor(a55, a56) {
                const v57 = this.constructor;
                try { new v57(a56, a56, v57, this, v57); } catch (e) {}
                this[-2147483648] >>>= -7;
                for (let v59 = 0; v59 < 5; v59++) {
                }
            }
        }
        try {
            v41.forEach();
        } catch(e61) {
            e61.MIN_SAFE_INTEGER = e61;
            e61.a = v40;
            e61.a = e61;
        }
        const o69 = {
            ["1073741824"]: v47,
            874720287: v47,
            get f() {
                try { this.m(v47, this, this); } catch (e) {}
                const o66 = {
                };
                return Proxy("1073741824", o66);
            },
            [-7]: "1073741824",
        };
        const v71 = Symbol.toPrimitive;
        v71.description;
        Symbol.for();
        return v71;
    }
    f48();
    f48 < v41;
    const v78 = /((?<=a))/gudm;
    const v79 = /gk4b*/vmsy;
    let v81;
    try {
    const t0 = -1.3832922122240728e+307;
    v81 = t0(2);
    } catch (e) {}
    try { v81(v78, -7, v79, -7, 256); } catch (e) {}
    %OptimizeFunctionOnNextCall(f48);
}
