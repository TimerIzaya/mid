function f0() {
    function f1() {
        return f1;
    }
    function f2() {
        return f1;
    }
}
function f6(a7) {
    const o40 = {
        get b() {
            for (const v9 in this) {
                const o12 = {
                    "b": 8,
                    "maxByteLength": 8,
                };
                const v14 = new ArrayBuffer(8, o12);
                const v16 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
                const v17 = [601759695];
                const v18 = [1073741824,1073741823,1376142744,1073741825];
                function f20(a21, a22, a23, a24) {
                    function f26() {
                        const o33 = {
                            "e": -4294967295,
                            ...v16,
                            ..."Vre",
                            "c": a24,
                            "f": "-1073741824",
                            84: arguments,
                            ..."Vre",
                            valueOf(a31, a32) {
                                return v18;
                            },
                            ..."Vre",
                            4: "Vre",
                            "c": -268435456,
                            5: -4294967295,
                            6: -268435456,
                        };
                    }
                    f26();
                    %OptimizeFunctionOnNextCall(arguments);
                    let v36;
                    try { v36 = v18["find"](..."find", a24, ...v17, ...v18, ...522675525n); } catch (e) {}
                    v36 <= a23;
                    return arguments;
                }
                new Uint32Array(v14);
            }
            return 33766n;
        },
    };
    return o40;
}
f6(-2147483647n);
f6(-2147483647n);
const t54 = [-4294967296];
t54.length = 257;
const v47 = new BigUint64Array();
for (const v48 of v47) {
}
f6(33766n);
class C50 {
    87 = f6;
    static set b(a52) {
        f6(33766n);
        %PrepareFunctionForOptimization(f6);
        function F54(a56, a57) {
            if (!new.target) { throw 'must be called with new'; }
            const v58 = this.constructor;
            try { new v58(); } catch (e) {}
            a56 & a56;
        }
        new F54();
        f6(33766n);
        f6(33766n);
        %OptimizeMaglevOnNextCall(f6);
        f6(33766n);
    }
    constructor(a66, a67, a68) {
        class C70 extends a67.constructor {
        }
        new C70();
    }
    static [33766n];
}
new C50();
new C50();
new C50();
const v77 = new BigUint64Array(208);
function f78(a79, a80) {
    v77.filter(a79);
    return f78;
}
new Promise(f78);
