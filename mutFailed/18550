function f0() {
}
const v3 = new Int32Array(51);
Object.defineProperty(v3, 0, { configurable: true, enumerable: true, get: f0, set: f0 });
const v7 = v3 * 1406934475;
Math.clz32(v3);
v3 ** v7;
const v11 = new BigUint64Array(254);
class C14 extends Date {
}
new C14();
Math.exp(-359.60295377780096);
new Uint8Array(6);
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v3;
    try {
        this.d = a23;
    } catch(e26) {
        return e26;
        let v27 = -268435456;
        (v27--).constructor;
        return -268435456 % -268435456;
    }
}
new F21(51, 51, 6);
try {
} catch(e36) {
    v11[51] = f0;
}
new F21(51, 254, 254);
Array(51);
for (let v40 = 0; v40 < 5; v40++) {
}
new Int8Array(7);
new F21(6, 254, 254);
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this.constructor;
    try { new v49(); } catch (e) {}
    function f51() {
        return F45;
    }
    %PrepareFunctionForOptimization(f51);
    f51();
    %OptimizeFunctionOnNextCall(f51);
}
new F45();
