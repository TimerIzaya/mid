new Uint16Array(64);
let v3 = 1;
const v5 = new BigInt64Array(v3);
class C6 {
}
new C6();
class C8 {
    static toString(a10, a11) {
        const v13 = super[a11];
        try {
            delete this[v13];
            this[C8];
        } catch(e16) {
        }
    }
}
const v19 = new v5(3553);
const v20 = [52482,65535,536870912,-9,10,1856222562];
const v21 = [30646,9223372036854775807];
const v22 = [-4294967296,-3,-1073741824,1073741824,10000,8];
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 64;
    } catch(e28) {
    }
    try {
        this.g = a25;
    } catch(e29) {
    }
    a27 + a27;
    function f31(a32, a33, a34, a35) {
        for (let [i40, i41] = (() => {
                const v37 = 0 >>> 0;
                v37 % v37;
                return [0, 10];
            })();
            i40 < i41;
            i41--) {
        }
        return f31;
    }
    for (let v48 = 0; v48 < 10; v48++) {
        f31(f31, v48, v48, v48);
    }
    v3 = 3553;
    Math.log2(2);
    v5 + 1000.0;
    Math.min(268435440);
    try {
        this.d = Float32Array;
    } catch(e57) {
    }
    return a25;
    function F58(a60, a61) {
        if (!new.target) { throw 'must be called with new'; }
        const v62 = this.constructor;
        try { new v62(a61); } catch (e) {}
        a61 == a61;
        a60 !== a60;
        this.g = a61;
    }
}
v5.constructor;
const v67 = [];
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    [v67,[this,this,this,this],this,arguments];
}
const v75 = new F23(v20, F23, v20);
const v76 = new F23(v21, v21, v22);
new F23(v22, F23, v22);
function f78() {
    ("D")[0].substring();
    v21.charCodeAt();
    return "D";
}
%PrepareFunctionForOptimization(f78);
const v83 = f78();
f78();
v3 &= v3;
v83[v5];
function F87(a89, a90, a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a90;
    } catch(e93) {
    }
}
const v94 = new F87(FinalizationRegistry, v75, C8, v75);
new F87(v20, v94, v67, v75);
new F87(v19, v20, 64, v76);
([128,215394418]).entries();
const v99 = [-4];
try {
    new BigUint64Array(v99);
} catch(e102) {
}
%OptimizeFunctionOnNextCall(f78);
f78();
