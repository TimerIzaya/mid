const v2 = new Uint32Array(2);
const v5 = new Uint8ClampedArray(1000);
const v6 = v5[287];
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
const v9 = new Uint8ClampedArray(2517);
v9[333] = v9;
new Uint8Array(8);
new Uint8ClampedArray(3313);
const v18 = new Uint8Array(99);
let v20;
try { v20 = Array.toString(); } catch (e) {}
const v22 = Array(8);
for (const v23 in v18) {
    try { v6(Uint8ClampedArray, 8, v23, v23); } catch (e) {}
}
const v26 = [v20,v20];
Reflect.apply(v22.reduce, v2, v26);
try { v22.sort(v22); } catch (e) {}
function f30() {
    return f30;
}
const v31 = f30?.apply;
try { v31(v31, v31); } catch (e) {}
try { v31(8, v22); } catch (e) {}
const v35 = new Map();
try { v35.set(Array, f30); } catch (e) {}
function f37() {
    return v35;
}
let v38;
try { v38 = f37(); } catch (e) {}
try { v38.forEach(v22); } catch (e) {}
const v40 = /(?=.)ha\nb\bc/gum;
v40.dotAll = v40;
class C41 extends f37 {
    static {
        try { new this(); } catch (e) {}
        const v44 = v22.length;
        try { this.m(this, v44, Map, v40); } catch (e) {}
    }
}
C41.prototype = C41;
let v47 = 4087;
v47++;
try { new Float64Array(v18, Array, Array); } catch (e) {}
