let v1 = new Date();
function f2(a3, a4) {
    const o8 = {
        "h": a4,
        [a3]: a3,
        [v1]: f2,
        "d": Date,
        "e": a4,
        [f2]: a4,
        "f": a4,
        5: Date,
        ...v1,
        8: a4,
        "a": a3,
        get c() {
            v1 = this;
            try {
                new Date();
            } catch(e7) {
            }
            return this;
        },
    };
    return o8;
}
const v9 = f2(f2, v1);
const v10 = f2(v1, v9);
const v11 = f2(v9, v10);
function f12(a13, a14) {
    const o30 = {
        __proto__: Date,
        "c": a14,
        o(a16, a17, a18) {
            new Uint8ClampedArray(8);
            try {
                v10.valueOf = f2;
            } catch(e23) {
            }
            try {
                a14.__proto__ = a13;
            } catch(e24) {
            }
            new Uint8Array(1024, Uint8ClampedArray, f12, Date);
            new Float64Array(4);
            return Uint8ClampedArray;
        },
    };
    return o30;
}
const v31 = f12(v11, v11);
const v32 = f12(v31, v31);
const v33 = f12(v9, v9);
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v32;
    } catch(e39) {
    }
    try {
        this.e = a37;
    } catch(e40) {
    }
    try {
        v32.c = a38;
    } catch(e41) {
    }
}
new F34(Date, v10, v11);
new F34(v33, v9, f12);
new F34(v32, v9, f2);
new Float64Array(1073741824);
const v50 = +f2;
~(+900473408);
v31 / v50;
