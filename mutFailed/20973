[2.0,764.2129492072199];
function F1(a3, a4) {
    if (!new.target) { throw 'must be called with new'; }
}
function F5() {
    if (!new.target) { throw 'must be called with new'; }
}
const v8 = [NaN,1000000000.0];
[-1.0,-7.771747323159285e+307,-3.0,1e-15];
const v12 = new Uint8Array(4);
const o18 = {
    [7]: 9,
    get g() {
        return this;
    },
    set g(a17) {
    },
};
const v24 = new Uint8ClampedArray(243);
function f26() {
    return Array;
}
const v28 = new Date(f26);
v12.valueOf(Array, v28, v28);
Date[1073741824] = Uint8ClampedArray;
Object.defineProperty(v24, F1, { configurable: true, get: Date, set: Array });
new BigUint64Array(7);
const v31 = [];
try {
    v31.some();
} catch(e33) {
    e33.stack;
}
class C36 {
    #e;
    static 3;
    static {
        for (let v38 = 0; v38 < 25; v38++) {
            function f39() {
            }
            [1073741824,1073741823,1376142744,1073741825];
            function f41(a42, a43, a44, a45) {
                return a42;
                f39();
                new Int8Array();
                new Float64Array(2534);
                const o62 = {
                    toString(a54) {
                        function f56(a57, a58, a59, a60) {
                        }
                        f56(-4294967297n, f56);
                    },
                };
                class C63 {
                }
                const v64 = [-1024];
                for (let v65 = 0; v65 < 5; v65++) {
                    delete v64[v65];
                }
                const v68 = new Uint32Array(4);
                0 <= 0;
                const v72 = new Int8Array(0);
                for (const v73 in v72) {
                }
                [v68];
                function f75(a76, a77) {
                }
                const o78 = {
                };
            }
            for (let v79 = 0; v79 < 5; v79++) {
                f39();
            }
        }
    }
}
for (let v81 = 0; v81 < 25; v81++) {
    const v82 = [];
    function f83() {
        class C84 {
            constructor(a86) {
                function f87() {
                    let v88 = 1e-15;
                    v88--;
                    v88 % -713649.8188807545;
                    0.8060433861090782 << 0.8060433861090782;
                    return f87;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f87 });
            }
        }
        const v94 = C84.constructor;
        v94.bind(v94);
        const v96 = new C84(v82);
        v96.length.bind(v82);
        return v96;
    }
    f83();
    %OptimizeFunctionOnNextCall(f83);
    const v102 = new Uint8Array(127);
    function f103(a104, a105) {
        const o106 = {
        };
        return o106;
    }
    for (let v107 = 0; v107 < 25; v107++) {
        const v108 = F5();
        Object.defineProperty(v108, v107, { enumerable: true, get: f103, set: f103 });
        v102[v108] = v108;
        const o111 = {
            "execution": "sync",
        };
        gc(o111);
    }
    Object.defineProperty(C36, v81, { value: v81 });
}
new BigInt64Array(255);
let v115 = v8 & v8;
const v116 = v115++;
v116 + v116;
function f119(a120) {
    const o121 = {
    };
}
v31.__proto__;
class C124 extends Array {
    2 = 64;
}
new C124();
const v127 = new Int32Array();
try { v127.forEach(v127); } catch (e) {}
function f129(a130, a131, a132, a133) {
    Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    return a130;
}
