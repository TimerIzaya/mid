function f3() {
    return -1.0;
}
function f4() {
    for (const v6 in [-65535,536870889,4096]) {
    }
    try {
        f4();
    } catch(e8) {
    }
    return f4;
}
function f9() {
    return 260.755748872117;
}
function f10() {
    const v13 = [-2.2250738585072014e-308,NaN,Infinity,0.14219068447690575,-2.220446049250313e-16,-438.12412895744933,5.016438902990979];
    const v14 = [-22.24832045334722,662.3012825979315,898.5860936727956,-735829.5209287611,1.7976931348623157e+308,2.0];
    function f16(a17, a18) {
        a18 ^ a18;
        const o25 = {
            ...a17,
            "g": a18,
            "f": v13,
            ...v13,
            "c": 0.22190238315898492,
            "h": f10,
            get c() {
                a17[this];
                this[a17] = 0;
                return a17;
            },
            [v14]: 16,
        };
        return o25;
    }
    const v26 = f16(v13, -9007199254740992);
    const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v30 = [601759695];
    const v31 = [1073741824,1073741823,1376142744,1073741825];
    function f33(a34, a35, a36, a37) {
        function f39() {
            try { ("Vre").charAt(a34); } catch (e) {}
            const v44 = -(-268435456);
            const o58 = {
                "c": -4294967297n,
                [522675525n](a46, a47) {
                    try {
                    } finally {
                    }
                },
                ..."Vre",
                "maxByteLength": -128,
                "c": v30,
                valueOf(a49, a50) {
                },
                "e": -4294967295,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v29,
                ...v30,
                "type": "Vre",
                ..."Vre",
                valueOf(a52, a53) {
                    return a34;
                },
                ..."Vre",
                [v26]: "Vre",
                "d": v30,
                [-2]: v44,
                [a34]: a37,
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a55, a56, a57) {
                    return a34;
                },
                5: -4294967295,
                6: -268435456,
            };
            return "Vre";
        }
        f39();
        Int8Array.length;
        const v62 = new Int8Array();
        v62.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f39);
        let v67;
        try { v67 = v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
        !(v67 <= a36);
        return arguments;
    }
    return f9;
}
function F70(a72, a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -1.0;
    } catch(e76) {
    }
    try {
        this.a = a75;
    } catch(e77) {
    }
    try {
        this.c = a75;
    } catch(e78) {
        function F79(a81, a82) {
            if (!new.target) { throw 'must be called with new'; }
            const v83 = this.constructor;
            try { new v83(a81); } catch (e) {}
            -a81;
            a82--;
        }
        class C87 extends F79 {
        }
    }
}
new F70(0.22190238315898492, f3, 0.22190238315898492, 0.22190238315898492);
const v89 = new F70(-1.0, f3, -1.0, 0.22190238315898492);
const v90 = new F70(260.755748872117, v89, 0.22190238315898492, 260.755748872117);
function f91() {
    return v90;
}
function f95() {
    const v97 = /\b[gW\x60]/vi;
    class C98 {
        #a;
        constructor(a100, a101, a102) {
            this[Symbol.replace];
            new f95();
            try { C98(); } catch (e) {}
            try {
                a101.#a;
            } catch(e109) {
            }
        }
    }
    new C98(v97, 0n);
    const v111 = [f95];
    function f112(a113) {
        return a113;
    }
    Symbol.toPrimitive;
    class C116 {
        constructor(a118, a119) {
            const o133 = {
                84: arguments,
            };
        }
    }
    v111.constructor = f112;
    const v140 = new Int32Array(11);
    const v141 = [601759695];
    function f142(a143, a144, a145, a146) {
        function f147(a148, a149) {
            return v140;
        }
        f147.source;
        const v151 = f147();
        v151[5];
        v151 >> v151;
        let v155;
        try { v155 = v111["find"](...v141, a146, ...v141, ...v111); } catch (e) {}
        return v155;
    }
    const v156 = v111.constructor;
    v156(v156, f112);
    new Int8Array();
    Math.cos(-7);
    return f95;
}
%PrepareFunctionForOptimization(f95);
f95();
%OptimizeFunctionOnNextCall(f95);
f95();
