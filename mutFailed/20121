const v3 = Date.parse(-3);
function f4(a5) {
    Object.defineProperty(v3, f4, { value: Date[this]() * v3 });
    return Uint8Array;
}
class C20 {
    static #p(a22) {
        super.c = 3.616089258587687e+307;
        function f23(a24, a25, a26, a27) {
            const o28 = {
                [a24]: a24,
            };
            return o28;
        }
        Worker.toJSON = f23;
        const v31 = [Worker];
        const o32 = {
            "arguments": v31,
            "type": "function",
        };
        Reflect.construct(a22, [Reflect,Reflect,3.616089258587687e+307,a22,"getOwnPropertyNames"], a22);
        const o37 = {
            0: "1ya",
            162: "1ya",
        };
        return "getOwnPropertyNames";
    }
    static #o(a39, a40) {
        return [14,9223372036854775807,-947341810,257,65536,2031413919,-5,127,-20830,4096];
        Symbol.for(Symbol);
        function F44(a46, a47) {
            if (!new.target) { throw 'must be called with new'; }
            for (let v48 = 0; v48 < 5; v48++) {
            }
            const v49 = this.constructor;
            const t34 = "9007199254740992";
            t34["255"] &= 7;
            const v55 = new Float32Array(2);
            v55[1] = v55;
            try { new v49(); } catch (e) {}
        }
        [[Date]];
        const v64 = new Uint8ClampedArray(255);
        v64[3] = Uint32Array;
        Object.defineProperty("Ki4rc", 3.616089258587687e+307, { enumerable: true, value: "Ki4rc" });
        [a40,"getOwnPropertyNames","getOwnPropertyNames"];
        [3.616089258587687e+307,NaN];
        [3.616089258587687e+307,4.218142798498963];
        return 3.616089258587687e+307;
    }
}
const v69 = new C20();
const v70 = new C20();
const v71 = new C20();
function f72() {
    return v71;
}
class C73 {
    static #b;
    constructor(a75, a76, a77) {
        Object.defineProperty("Ki4rc", 1073741824, { writable: true, configurable: true, value: this.c });
        let v80 = -2128395276;
        const v82 = --v80;
        Math.ceil(v80);
        Math.tanh(v80 + v82);
        Math.cos(-267);
        function f87() {
            ("D")[0].match();
            return f87;
        }
        f87();
        %OptimizeFunctionOnNextCall(f87);
    }
    static #a;
}
const v92 = new C73(C73, v71, v69);
const v93 = new C73(v71, v92, v92);
new C73(v70, v93, v69);
function f95() {
    return v93;
}
new Map();
const v101 = new Int16Array(2);
v101.lastIndexOf(2.220446049250313e-16);
