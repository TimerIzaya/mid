const v2 = new Int32Array(1861);
const v3 = Int32Array / Int32Array;
const v4 = v3 % v3;
function f5(a6, a7) {
    function f9(a10) {
        return a6 ^ a7;
    }
    this.onmessage = f9;
    return this;
}
try { new Uint16Array(1861, Uint16Array, 1861); } catch (e) {}
const v15 = new Uint16Array(3368);
const v17 = `
    const v19 = new WeakSet();
    Object.defineProperty(v19, "g", { configurable: true, value: v15 });
`;
const v21 = eval(v17);
const v22 = 16 >>> 16;
const v24 = new BigInt64Array(16);
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F25();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e30) {
    }
}
16 instanceof F25;
try {
    v24.length = 1;
} catch(e33) {
}
let v34;
try { v34 = v24.filter(v15); } catch (e) {}
const v35 = [2010421938,47783,9779,128,43303,128,1000,9007199254740991];
for (let i38 = 0, i39 = 10;
    (() => {
        const v40 = i38 < i39;
        class C41 {
        }
        const v44 = new BigUint64Array(3375);
        let [v45,,v46,...v47] = v44;
        return v40;
    })();
    i38++) {
}
try { v2.reverse(); } catch (e) {}
v34[F25] = v22;
new Int32Array(v21, v4, v3);
Object.defineProperty(v24, "a", { configurable: true, value: v4 });
v35 ^ v35;
const v56 = [-59959];
const v57 = [38821,16734];
eval("");
new Int32Array(v35);
v56[2177852734] = v2;
const o67 = {
};
const v69 = new Proxy(v57, o67);
new Int32Array(v69);
Array(1102693041);
