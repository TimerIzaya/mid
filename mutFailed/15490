function f0() {
    const o9 = {
        "b": -56467,
        "c": "trimLeft",
        set g(a5) {
            this["bigint"] += a5;
            ("trimLeft")[Symbol.hasInstance];
        },
        ["bigint"]: "bigint",
        "f": "trimLeft",
        ["trimLeft"]: "bigint",
        ..."bigint",
        [-56467]: -56467,
    };
    return o9;
}
const v10 = f0();
const v11 = f0();
let v12 = f0();
class C19 {
    g;
    [-1.5711086228244012e+308];
    static toString(a21, a22, a23) {
        const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        v25["p" + 18268] = 18268;
        const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v30 = [601759695];
        const v31 = [1073741824,1073741823,1376142744,1073741825];
        function f33(a34, a35, a36, a37) {
            function f38() {
                let v41 = Float64Array;
                v41 = a35;
                b = v30;
                v25.length;
                try {
                    (-4294967297n).forEach(v41);
                } catch(e44) {
                }
                const v45 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                const v47 = Symbol.toPrimitive;
                const o53 = {
                    toString(a49, a50) {
                        const v51 = a37 && v41;
                        a49 *= v47;
                        return v41;
                        return v51 <= v45;
                    },
                };
                const o73 = {
                    "c": -4294967297n,
                    [522675525n](a56, a57) {
                    },
                    "c": v30,
                    valueOf(a59, a60) {
                    },
                    "b": -4294967295,
                    [-4294967297n](a62, a63, a64, a65) {
                    },
                    "e": -4294967295,
                    "e": -268435456,
                    "maxByteLength": -4294967295,
                    "arguments": v29,
                    ...v30,
                    "type": "Vre",
                    ..."Vre",
                    valueOf(a67, a68) {
                    },
                    ...a21,
                    4: "Vre",
                    "c": -268435456,
                    "type": "Vre",
                    "type": "Vre",
                    toString(a70, a71, a72) {
                    },
                    5: -4294967295,
                    6: -268435456,
                };
            }
            f38();
            new Int8Array();
            %OptimizeFunctionOnNextCall(f38);
            try { v31["find"]("find", a37, v30, v31); } catch (e) {}
        }
        f33();
        try { a22(this, a21, a22, a22); } catch (e) {}
        this.h &&= -0.0;
        v12 = v11;
        [-11,65536,65537];
        function f82(a83, a84, a85, a86) {
            v10[1428717040];
            return a86;
        }
        %OptimizeFunctionOnNextCall(f82);
        return f0;
    }
    set h(a89) {
        function f90(a91, a92, a93) {
            'use strict';
            Math.cbrt(this);
            Math.round(this);
            const v98 = this * a92;
            Math.acos(v98);
            this && v98;
            return 18268;
        }
        f90(-1.5711086228244012e+308, -0.0, 37227);
    }
}
if ("log1p") {
    try { v10.m(); } catch (e) {}
}
function f105() {
    class C107 {
    }
    const v108 = new C107();
    v108[v108] = 268435439;
    const o109 = {
        "call": f105,
    };
    class C110 extends C107 {
        #a;
    }
    for (let i = 0; i < 5; i++) {
        new Date();
    }
    return 268435439;
}
%PrepareFunctionForOptimization(f105);
const v113 = new C19();
new C19();
new v113();
const v117 = new Float32Array(Float32Array);
for (let v118 = 0; v118 < 25; v118++) {
    function f119(a120, a121, a122, a123) {
        a120[1];
        for (let v126 = 0; v126 < 5; v126++) {
        }
        const v128 = arguments.__lookupGetter__;
        try { v128.constructor(); } catch (e) {}
    }
    for (let v130 = 0; v130 < 10; v130++) {
        f119(v117);
    }
}
