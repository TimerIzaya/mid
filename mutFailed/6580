class C2 {
}
const v3 = C2.length;
const v4 = new C2();
function f5(a6) {
    a6.__proto__;
    const v9 = [-1024,536870889,65536,65536];
    function f10(a11, a12) {
        return a11;
    }
    const v14 = [295968041,v9];
    const o15 = {
        "arguments": v14,
        "type": "MAX_SAFE_INTEGER",
    };
    new Worker(f10, o15);
    return v9;
}
v4.toString = f5;
const v17 = v4.toLocaleString();
const v18 = new C2();
v18.constructor = f5;
const t22 = v18.constructor;
const v20 = new t22();
const v22 = [126.35858692635452,171.76053631394439,637722.086033537,-4.0,3.0,-1000000.0,1.3044045702886066e+308];
v22[Symbol.toPrimitive] = f5;
const v25 = v22.join(v3);
const v27 = ([-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity]).reverse();
v27.valueOf = Date;
function f28() {
    return v27;
}
let v30 = 8;
Math.asinh(v3);
const v32 = Math.pow(v22, v3);
const v33 = v30--;
let v34 = !v3;
++v34;
Date["UTC"](v17, v3, 0, v27, v25, v17, v20);
-Infinity;
class C40 {
    p(a42) {
        try { a42("5", "5", a42); } catch (e) {}
        new Int32Array(128);
        const v50 = new BigUint64Array(256);
        new Uint32Array(162);
        return v50;
    }
}
new C40();
new C40();
new C40();
new Uint8Array(268435440);
function f62() {
}
new Int32Array(7);
new BigInt64Array(1895);
function f67(a68, a69, a70, a71) {
    function f72() {
        -4294967295 === -4294967295;
        return -4294967295;
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
    return a68;
}
try { g.o(BigInt64Array, v32); } catch (e) {}
[1.3089969670366326,-568086.7139277249,469.2119624359643,0.2971066811036247];
[8.50376331644728,1.747141363254889e+308,1.7119622841161479e+308,0.21703065973737878,-2.220446049250313e-16,-790818.8478614856,-411121.5001292516];
const v81 = [384409.29804919986,0.0,-1000000000000.0,-2.0,1.622541575026709e+308,-2.220446049250313e-16,-1e-15,0.7088095365615527];
new Int8Array(1);
const v84 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
class C86 extends Array {
}
const o87 = {
    "defineProperty": Array,
    "isExtensible": Date,
    "ownKeys": f62,
    "set": f28,
};
new Proxy(v81, o87);
const v90 = new C86();
v90[Symbol.isConcatSpreadable] = v33;
v90.concat(v84);
