class C3 {
    toString(a5) {
        const v6 = this[536870887n];
        const v8 = [];
        this[v8] ^= a5;
        [128,-9223372036854775807,-1,9223372036854775807];
        [15,4,-65536,268435441];
        const v11 = [1000,65537,129,-4294967295,3];
        let v14 = 536870912;
        --v14;
        const v16 = Reflect ** v11;
        12 && Reflect;
        12 * v16;
        const v19 = Reflect.construct(v6, v8, v6);
        const v20 = v19 == v19;
        if (v20) {
        } else {
            Object.defineProperty(v8, "length", { value: -4294967297n });
            let v24;
            try { v24 = this.n(v8, Reflect); } catch (e) {}
            const v25 = delete v24?.[2];
            function F26(a28, a29) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a28;
                } catch(e30) {
                }
                try {
                    this.e = a28;
                } catch(e31) {
                }
                try {
                    this.b = v25;
                } catch(e32) {
                }
            }
            const v33 = new F26(v6, 536870887n);
            new F26(v33, v33);
            new F26(536870887n, v20);
        }
        return 536870887n;
    }
    static a;
    static #e = -33554n;
    static [536870887n] = -4294967297n;
    257;
}
const v36 = new C3();
let v37 = new C3();
const v38 = new C3();
v38.f = -4294967297n;
function f39() {
    return 536870887n;
}
class C40 extends f39 {
    constructor(a42, a43, a44) {
        super();
        try {
            v37.__proto__ = v36;
        } catch(e45) {
        }
    }
    #e = -33554n;
    static 0 = 536870887n;
    static 6;
    [f39];
    static {
        const o47 = {
            "call": f39,
            "defineProperty": f39,
            "ownKeys": f39,
            "set": f39,
        };
        new Proxy(C3, o47);
    }
}
new C40(-4294967297n, v38, -33554n);
v38.f;
const o54 = {
    "maxByteLength": 3904886752,
};
const v56 = new ArrayBuffer(2872, o54);
const v58 = new WeakMap();
const v60 = Symbol.iterator;
v37 += v60;
let v62 = 5;
Math.tan(f39);
Math.tan(v62);
--v62 || v62;
Math.asin(-4294967296);
Math.atan2(-4294967296, f39);
Math.log1p(f39);
v58[v60];
new Int32Array(v56);
const v74 = new C40(536870887n, C3, -33554n);
new C40(v74, v36, -4294967297n);
const v78 = new Date(-26321);
v78.setTime(-26321, v37, v74);
