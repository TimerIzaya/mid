class C3 {
    h;
    1948 = -906.7402269214653;
    ["38584"] = 2.220446049250313e-16;
    1;
    static [2.220446049250313e-16] = -906.7402269214653;
    #h = "38584";
    #valueOf(a5, a6) {
        const v8 = Symbol.search;
        const t9 = "38584";
        t9[v8] = v8;
        function F9(a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a5;
            } catch(e14) {
            }
        }
        const v15 = new F9(a6, a5, "38584");
        const v16 = new F9(F9, -906.7402269214653, v15);
        new F9(-906.7402269214653, v16, F9);
        return v15;
    }
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
class C21 extends C3 {
    constructor(a23, a24, a25, a26) {
        super();
        new Uint8Array(512);
        new Float64Array(2824);
        new Int32Array(1);
    }
    static [-906.7402269214653];
}
const v36 = new C21(v19, "38584", v19, v20);
const t37 = "38584";
const v37 = new t37(v20, "38584", C3, v18);
new C21(v36, -906.7402269214653, v19, v36);
new Int16Array(4096);
new Int32Array(10);
const v47 = new BigUint64Array(1041);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
const v54 = [];
v54.length;
function* f56(a57, a58, a59, a60) {
    return a58;
}
try {
    const o61 = {
    };
} catch(e62) {
}
class C63 {
    static p(a65) {
        const o72 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f67() {
                        return this;
                    }
                    const v68 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e71) {
                }
                return -128;
            },
        };
        return o72;
    }
    g;
}
try { new C63(); } catch (e) {}
const v74 = new C63();
class C76 extends Map {
}
new C76();
new Float32Array();
v74.g;
new C63();
new C63();
class C83 extends C63 {
    static n(a85, a86) {
        const v90 = Math.round(Math);
        async function f91(a92, a93, a94) {
            await v90;
            return 268435440;
        }
        function F96(a98, a99, a100, a101) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C108 {
        }
        this[Symbol.matchAll] = a86;
        a85 += C76;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e113) {
        }
        return -128;
    }
    #c = C83;
    valueOf(a117, a118, a119) {
        super.f;
    }
    constructor(a122, a123, a124, a125) {
        super();
        function f126() {
            const v127 = [];
            v127[6] = v47;
            v127[6] = 4294967295;
            new Int32Array();
            const o141 = {
                get b() {
                    return Int32Array;
                },
                "c": f126,
                toString(a134, a135, a136) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a138) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a140) {
                },
            };
        }
        for (let v142 = 0; v142 < 5; v142++) {
            f126();
        }
    }
    set f(a145) {
        for (const v146 of a145) {
            try {
            } catch(e147) {
            }
        }
        const t149 = 10;
        const v150 = new t149(-4294967296);
        Object.defineProperty(Date, v150, { get: Date, set: Date });
        Date.parse(v54.toString());
        class C154 extends SharedArrayBuffer {
        }
        const o156 = {
            "f": C76,
            ...v37,
            "f": 10,
            n() {
                return this;
            },
        };
        try {
        } catch(e157) {
        }
        try {
            const o158 = {
            };
        } catch(e159) {
        }
        try {
            const o160 = {
            };
            o160.c = -128;
            o160.e = this;
        } catch(e161) {
        }
        try {
            const o162 = {
            };
        } catch(e163) {
        }
    }
}
const v164 = new C83();
v164.type = Int16Array;
gc(v164);
class C167 {
}
function f168(a169, a170, a171, a172) {
    const o177 = {
        p(a174, a175, a176) {
        },
    };
}
for (let v178 = 0; v178 < 25; v178++) {
}
const v180 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f181(a182, a183) {
    const o185 = {
        get d() {
        },
    };
}
f181();
const v187 = f181(v180);
try { v187(956206316, 956206316); } catch (e) {}
