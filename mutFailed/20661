const v2 = new Float64Array(581);
try {
    v2.toReversed();
} catch(e4) {
}
try {
    v2.length = 581;
} catch(e5) {
}
let v6 = 10;
const v8 = new Int8Array(v6);
const v11 = new BigUint64Array(129);
function f12() {
    9 >>> 9;
    const v17 = Math.atan2(9, 5);
    v17 >>> v17;
    return v17;
}
f12.caller = f12;
let v20;
try { v20 = new Symbol(); } catch (e) {}
const v21 = Symbol.toPrimitive;
let v22;
try { v22 = v20(v21); } catch (e) {}
Object.defineProperty(Symbol, v22, { enumerable: true, get: f12 });
v6 = 581;
let [,v24,,...v25] = v8;
v11[v21] = f12;
const v27 = new Map();
try { v27.set(BigUint64Array, v27); } catch (e) {}
const v29 = [-105.23239450635049,0.09029414583594941,-2.1018184618792617,945132.7687171898,8.690879719106523];
try { v29.at(v11); } catch (e) {}
const v31 = [-1000000000000.0,1000000000000.0,-1000000000.0,-1000000000000.0,-Infinity,-1.5778854514159772e+308,732.5536717410864,1.7976931348623157e+308,-3.0];
const v32 = [2.2250738585072014e-308,-1.0134320217509964e+308,-1000.0,2.2250738585072014e-308];
v32[1];
let v34 = v31[v31];
let v37 = 10;
for (; v37--;) {
    Reflect.construct(BigUint64Array, [v32,129], v25);
}
const v43 = [NaN,52.65298068517177,-4.0];
v43[61] = v34;
v43[61];
v34 = v11;
129 instanceof BigInt64Array;
v43.length;
v8[v11] = BigInt64Array;
!v43["includes"](-6, -9223372036854775807);
