new RegExp(2310);
const v4 = [];
RegExp === v4;
function f6() {
    let v7 = -9223372036854775808n;
    v7 %= 45725n;
    const v9 = v4.keys();
    function f10(a11, a12) {
        const o13 = {
            "g": v9,
        };
        return o13;
    }
    %OptimizeFunctionOnNextCall(f10);
    return 45725n;
}
new Int32Array(8);
const v18 = new Int8Array();
gc();
const v21 = [506097.1301051206];
const o22 = {
};
v21.toLocaleString(o22);
new Float32Array(1977);
o22.message;
const v29 = new Uint32Array();
function F31(a33) {
    if (!new.target) { throw 'must be called with new'; }
}
const v34 = new F31();
class C36 {
}
const v37 = new C36();
const o38 = {
};
const v39 = new C36();
function f40(a41, a42) {
    new Float64Array(1073741825);
    const v46 = new Uint8Array();
    new Uint8ClampedArray();
    v37[4294967295] = gc;
    Object.defineProperty(v46, 517014977, { writable: true, configurable: true, set: gc });
    const v49 = v46.length;
    a41 = v29;
    2310 - 1073741825;
    const v51 = [];
    let v52;
    try { v52 = v51.with(); } catch (e) {}
    const o60 = {
        [v39](a54, a55, a56) {
            super[-9223372036854775807];
        },
        [a41]: v34,
        __proto__: v18,
        [v49]: v52,
        "a": v52,
        "e": gc,
        set b(a59) {
        },
        [a42]: v37,
        "d": v34,
        [-9223372036854775807]: o38,
    };
    return v37;
}
f40(C36, v39);
new Uint16Array();
for (const v67 of Array(19793)) {
    const v69 = Math.cbrt();
    v69 % v69;
}
const o75 = {
    "type": "function",
};
const o81 = {
    get b() {
        delete this[this];
        return 9007199254740991n;
    },
};
function f82(a83, a84, a85) {
    return a83;
}
const t83 = f82.constructor;
t83();
Uint8Array.e = Uint8Array;
async function f88(a89, a90) {
    return f88;
}
function F91() {
    if (!new.target) { throw 'must be called with new'; }
}
function F93(a95) {
    if (!new.target) { throw 'must be called with new'; }
}
const v96 = new F93();
class C97 extends F91 {
}
let v99 = 0;
do {
    const o100 = {
    };
    try {
        o100.h = v96;
    } catch(e101) {
    }
    try {
        const o102 = {
        };
        o102.h = v96;
        o102.e = 4096;
    } catch(e103) {
    }
    const o104 = {
    };
    o104.h = v96;
    o104.e = 4096;
    o104.c = C97;
    v99++;
} while (v99 < 7)
const v108 = f88.constructor;
try { v108(Uint8Array); } catch (e) {}
