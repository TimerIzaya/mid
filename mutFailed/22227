function f3() {
    return "c";
}
function F7() {
    if (!new.target) { throw 'must be called with new'; }
}
const t6 = 3.1432556285027484;
const v9 = new t6();
const v10 = [F7,F7,F7];
function f11(a12) {
    try {
        v9.some();
    } catch(e14) {
        e14.stack;
    }
    return a12;
}
v10.toString = f11;
const o17 = {
    __proto__: v10,
    "e": v9,
    get a() {
        return this;
    },
};
o17.toString(F7, o17);
class C25 {
    static {
        function F27(a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            const v32 = this.constructor;
            try { new v32(); } catch (e) {}
            try { this.constructor(); } catch (e) {}
        }
        new F27(C25, C25);
    }
}
