function F2(a4, a5) {
    if (!new.target) { throw 'must be called with new'; }
}
const v6 = new F2();
Array(36862);
class C11 {
    [-1.0] = 1e-15;
    static {
        try {
            C11[this] = -1.0;
            C11.d >>= -1000000000.0;
            try { C11(this); } catch (e) {}
            const v17 = 57963.69312618999 | 57963.69312618999;
            const v18 = [];
            function f19(a20, a21, a22, a23) {
                const v26 = new Float32Array(Array, a23);
                function f28() {
                    return a20;
                }
                try { new Date(Array, v17, 84, f19, v17); } catch (e) {}
                const v31 = new Date();
                const v32 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
                try { new Proxy(v18, a23); } catch (e) {}
                const v35 = new Proxy(v32, v31);
                v35[0] = v35;
                const o36 = {
                    __proto__: v35,
                };
                o36[2] = o36;
                class C38 extends v26.constructor {
                }
                function f39(a40, a41) {
                }
                try { f39(f19, v17); } catch (e) {}
                %OptimizeFunctionOnNextCall(f28);
                const o43 = {
                    __proto__: arguments,
                };
            }
            this.__proto__ = this;
        } catch(e44) {
            e44.b = e44;
        }
        super.g?.b;
    }
    [-1000000000.0];
    static [-1000000000.0];
    #a;
    static [-1.0];
}
new C11();
const v49 = new C11();
const v50 = new C11();
const v51 = v50?.__defineGetter__;
try { new v51(-1000000000.0, 1e-15); } catch (e) {}
const v55 = [v50,v49,1e-15,,];
v55[1] = v55;
const v56 = [v55,true,v50];
v56[1] = v56;
const v57 = [v50,v56,-1.0,v50,-1000000000.0];
class C58 {
    6 = v50;
    #p(a60, a61) {
        super.d = this;
        const v62 = a60 >>> v55;
        super[v57];
        return v62;
    }
    static get f() {
        v55[268435456];
        try {
            new C11();
        } catch(e67) {
        }
        const v68 = delete this[-1.0];
        function F69() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function f72(a73, a74, a75, a76) {
            for (let i79 = 0, i80 = 10;
                (() => {
                    const v81 = i79 < i80;
                    class C83 {
                        static {
                            this.f += "MAX_SAFE_INTEGER";
                        }
                    }
                    return v81;
                })();
                i80--) {
            }
            return a76;
        }
        f72();
        %OptimizeFunctionOnNextCall(f72);
        C11 * this;
        return v68;
    }
}
try { new C58(); } catch (e) {}
new C58();
const v94 = new C58();
const v95 = v94?.__defineSetter__;
try { new v95(v94, true); } catch (e) {}
const v97 = new C58();
v97[6];
const v99 = [];
const v100 = [v99,v99,v99];
const v101 = [v100,v100];
const t109 = 1e-15;
const v105 = new t109();
let v108;
try { v108 = v105.m(1n, 10000n, 10000n, 1); } catch (e) {}
let v109;
try { v109 = v108(v97); } catch (e) {}
v109 = v6;
try { new Uint32Array(true, true, v99); } catch (e) {}
const v111 = new Uint32Array();
1000 !== 1000;
const v116 = [];
function f117() {
    -v116;
    return f117;
}
%OptimizeFunctionOnNextCall(f117);
const v119 = new BigInt64Array(1000);
const o126 = {
    valueOf(a121, a122) {
        return -5;
    },
    "h": 36862,
    [-1.0](a124, a125) {
    },
};
o126.g = o126;
delete v119[6];
v111[o126] |= -5;
v101 >= Uint16Array;
Object.defineProperty(v101, "g", { writable: true, configurable: true, enumerable: true, value: v99 });
