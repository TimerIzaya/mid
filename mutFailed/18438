const v3 = new SharedArrayBuffer(62);
const v4 = [];
v4.length += 1.0;
const v8 = [-7n,9007199254740991n,35574n,35574n,9007199254740991n];
function f9(a10) {
    try {
        v3.b = v4;
    } catch(e11) {
    }
    return -7n;
}
v8[Symbol.toPrimitive] = f9;
let v14;
try { v14 = v8.slice(v8, SharedArrayBuffer); } catch (e) {}
const v15 = [35574n,-7n,9007199254740991n];
v15[2] = v15;
const v17 = new Map();
function f18(a19, a20) {
    const o21 = {
        [a19]: v17,
        146: v17,
    };
    const v22 = o21[146];
    try { v22.forEach(v22); } catch (e) {}
    return Map;
}
function f24(a25) {
    const v29 = ([-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036])[4];
    const v30 = new Date(62);
    return v30.setMinutes(v29, "268435441", v29);
}
f18.valueOf = f24;
for (let v32 = 0; v32 < 790; v32++) {
    f18();
}
const v34 = [35574n,9007199254740991n];
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    a39 / a39;
    a40 ^ a40;
    this.g = a37;
    try {
        this.b = a38;
    } catch(e43) {
    }
    function f44(a45, a46, a47, a48) {
        return 62;
    }
    const v49 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
    Object.defineProperty(v49, "constructor", { writable: true, value: f44 });
    v49.concat(v49);
    try {
        this.g = a40;
    } catch(e51) {
    }
}
function f52() {
    const v53 = [];
    function f54() {
        const o58 = {
            toString() {
                super[this];
            },
            ...v53,
            n() {
                return this;
            },
        };
        try { o58.n(); } catch (e) {}
        return v53;
    }
    f54();
    return f54();
}
F35.toString = f52;
new F35(-7n, v34, 35574n, 9007199254740991n);
new F35(35574n, v8, -7n, 35574n);
const v64 = new F35(9007199254740991n, v34, -7n, -7n);
v64.e = v14;
v64.e = v64;
new Int16Array();
const v69 = new Uint8Array();
v69.BYTES_PER_ELEMENT = v69;
b = [601759695];
-102.59850273490838 <= -102.59850273490838;
const o73 = {
    [v4]: 0.0,
};
let v75 = -6613;
let v76 = F35 ^ F35;
v76--;
const v80 = f18++ >>> v75++;
+v75;
2147483647 >>> 2147483647;
Float64Array[0] = v80;
try { new Float64Array(Float64Array, F35, v3); } catch (e) {}
const v93 = [Float64Array];
v93[0] = v93;
for (let v94 = 0; v94 < 5; v94++) {
    v93.length = 2;
}
function f96(a97, a98, a99, a100) {
    let v102 = ("Vre").codePointAt();
    const v104 = v102 * v102--;
    const v105 = v104 / v104;
    v105 * v105;
    function f108() {
        let v109 = -268435456;
        let v110 = v109--;
        v110--;
        const v112 = v110 << v110;
        v112 * v112;
        return f96;
    }
    f108.d = f108;
    ("-4294967295").replace();
    for (let v116 = 0; v116 < 5; v116++) {
        Math.atan2(-268435456, v116);
    }
    return a97;
}
