function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 695.0189445331848;
    function f6(a7) {
        for (let v8 = 0; v8 < 50; v8++) {
            Array(36862);
        }
        return a7;
    }
    a5[Symbol.toPrimitive] = f6;
    try {
        this.h = a5;
    } catch(e14) {
    }
    try {
        this.c = a5;
    } catch(e15) {
    }
}
function f16(a17) {
    const o18 = {
    };
    function F19(a21, a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v28 = 0; v28 < 100; v28++) {
            const o32 = {
                6: undefined,
                "d": undefined,
                [268435439n]: 2105444095n,
                __proto__: o18,
                "g": a23,
                "b": -4294967296n,
                "arguments": this,
                valueOf(a31) {
                    return v28;
                },
            };
            o32[1] = o32;
        }
        -9223372036854775808 >> -9223372036854775808;
    }
    return 695.0189445331848;
}
F3[Symbol.toPrimitive] = f16;
new F3(F3);
const v47 = new F3(-1e-15);
const v48 = new F3(v47);
function f55(a56, a57, a58) {
    const o73 = {
        "c": 9007199254740991n,
        "g": a58,
        [F3](a60, a61, a62) {
            return typeof a62 === "bigint";
        },
        p(a67, a68) {
            super.b = a67;
            let v69;
            try { v69 = v48.o(11n, this); } catch (e) {}
            v48.h;
            try {
                super.toString(v69, v48, 256n, a67);
            } catch(e72) {
            }
            return a57;
        },
    };
    return o73;
}
f55(695.0189445331848, 695.0189445331848, 256n);
f55(695.0189445331848, -1e-15, 9223372036854775807n);
f55(-4.0, -1e-15, 11n);
class C78 {
}
new C78();
new C78();
const v81 = new C78();
class C82 extends C78 {
}
const v83 = new C82(C78, v81, C78);
v83.toString = Symbol;
new C82("b", v83, C78);
new C82(C78, v81);
[-128,-204399241,1126169676,-39466,-37076,268435456,9223372036854775807,536870888,15798,-1632967117];
"D2z" < v83;
/5*/gi;
const v91 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v92 = [601759695];
const v93 = [1073741824,1073741823,1376142744,1073741825];
const t88 = "b";
t88.e = "B";
function f96(a97, a98, a99, a100) {
    function f102() {
        const v106 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v108 = Symbol.toPrimitive;
        const o115 = {
            toString(a110, a111) {
                const v112 = a100 && Float64Array;
                function f113() {
                    a110 *= v108;
                    return Float64Array;
                }
                Object.defineProperty(v112, "valueOf", { value: f113 });
                v112 <= v106;
                return this;
            },
        };
        const o138 = {
            "c": -4294967297n,
            [522675525n](a118, a119) {
            },
            "c": v92,
            valueOf(a121, a122) {
            },
            "b": -4294967295,
            [-4294967297n](a124, a125, a126, a127) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v91,
            ...v92,
            "type": "Vre",
            ..."Vre",
            valueOf(a132, a133) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a135, a136, a137) {
                return a97;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f102();
    const v141 = new Int8Array();
    v141.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f102);
    let v146;
    try { v146 = v93["find"](..."find", a100, ...v92, ...v93, ...522675525n); } catch (e) {}
    v146 <= a99;
    return arguments;
}
for (let v148 = 0; v148 < 10; v148++) {
    f96();
}
%OptimizeFunctionOnNextCall(f96);
f96();
function F151() {
    if (!new.target) { throw 'must be called with new'; }
}
