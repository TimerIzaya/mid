class C3 {
    constructor(a5) {
        function f6(a7, a8) {
            function F12(a14, a15, a16) {
                if (!new.target) { throw 'must be called with new'; }
                const v17 = this.constructor;
                try { v17.call(-45095n); } catch (e) {}
                try { new v17("asinh", 9007199254740991n); } catch (e) {}
            }
            return this;
        }
        this.toString = f6;
        return this;
    }
    #e = "getUTCMilliseconds";
    set b(a21) {
        const t16 = "getUTCMilliseconds";
        t16[0.0] = 0.0;
        function f22() {
            return this;
        }
    }
    [0.0] = 0.0;
}
function f23(a24) {
    const v27 = new Uint8Array(64);
    new Int32Array(v27);
    return a24;
}
C3[Symbol.iterator] = f23;
const v32 = new C3(C3);
v32.valueOf = Symbol;
const v33 = new C3(v32);
new C3(0.0);
try { BigInt64Array.from(C3); } catch (e) {}
new BigInt64Array(512);
Float32Array.e = Float32Array;
new Float32Array(128);
v33[Float32Array] = 0.0;
const v43 = 512 ^ v32;
v43 >>> v43;
const o47 = {
    "maxByteLength": 255,
};
const v49 = new SharedArrayBuffer(8, o47);
v49.growable = v49;
Float32Array.a = Float32Array;
Float32Array.a = Float32Array;
new Float32Array(v49);
new Int32Array(101);
try { ("major").substring(v43, v43); } catch (e) {}
const o58 = {
    "execution": "async",
    "type": "major",
};
gc(o58);
let v60 = -1024;
function F61(a63, a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F61(Float32Array, Float32Array, Float32Array, o58); } catch (e) {}
const v68 = new F61();
const v69 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F70(a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
}
F70.e = F70;
class C74 {
}
const v76 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v77 = [601759695];
v77[0] = v77;
for (let v79 = 0; v79 < 5; v79++) {
    function f80() {
        try { ("Vre").strike(); } catch (e) {}
        Array().unshift();
        const v89 = new Set();
        function F90(a92, a93) {
            if (!new.target) { throw 'must be called with new'; }
            F90(this, this);
        }
        try { new F90(522675525n, v79); } catch (e) {}
        try {
            v69.forEach(Float64Array);
        } catch(e97) {
            e97.e = e97;
        }
        class C99 {
        }
        try { C99.call(128); } catch (e) {}
        const v101 = new C99();
        try {
            v101.__proto__ = F70;
        } catch(e102) {
        }
        const v103 = Symbol.toPrimitive;
        const o107 = {
            toString(a105, a106) {
                return C74;
            },
        };
        -268435456 >> -268435456;
        const o129 = {
            [522675525n](a111, a112) {
            },
            "c": v77,
            valueOf(a114, a115) {
            },
            [-4294967297n](a117, a118, a119, a120) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v76,
            ...v68,
            [v103]() {
            },
            "type": C74,
            valueOf(a123, a124) {
                return 522675525n;
            },
            4: "Vre",
            toString(a126, a127, a128) {
                return a127;
            },
        };
        new Float32Array();
        const v135 = [272822757];
        const v136 = [-2.0,272822757,"function"];
        try { v136.reduceRight(v89); } catch (e) {}
        const o138 = {
            __proto__: v136,
        };
        o138.toString = f80;
        v135[o138] &= 272822757;
        v60 %= -268435456;
        return v103;
    }
    f80();
    %OptimizeFunctionOnNextCall(f80);
}
