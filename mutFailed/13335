class C3 {
    toString(a5, a6) {
        new BigInt64Array(477);
        new Uint32Array(3);
        new Uint32Array(13);
        return Uint32Array;
    }
}
const v17 = new C3();
new v17();
const v19 = new C3();
class C20 {
    static p(a22, a23, a24, a25) {
        4096 << -10;
        a25 = v17;
        return -30927n;
    }
    get g() {
        v19[Symbol.unscopables] = v17;
        return v17;
    }
}
new C20();
new C20();
new C20();
[-1073741824,3966,1024];
[536870889,-4294967296,1073741824,4294967297,5112,5,257];
[-62411,-35477,-3,9007199254740991,5,12,14,-1484921004,-16170];
class C41 {
    #m(a43, a44) {
        function f45() {
            return a44;
        }
        super[a44] = "f";
        %VerifyType(a44);
        return a44;
    }
    static c;
}
try { C3(); } catch (e) {}
const v47 = new C41();
const v48 = new C41();
v48?.constructor;
const v50 = new C41();
v50?.constructor;
class C52 {
    p(a54) {
        this.g ^= this[8];
    }
    static #n(a57, a58, a59, a60) {
        class C61 {
            4;
            static a;
        }
        C61();
        C61();
        C61();
    }
    7 = v50;
    #a = v48;
}
new C52();
const v66 = new C52();
function F67(a69, a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    function F72(a74, a75, a76, a77) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v78 = new F72();
    const v81 = new BigInt64Array(4046);
    function f82(a83, a84) {
        Object.defineProperty(v78, v78, { configurable: true, enumerable: true, get: f82 });
        let o86 = {
            get e() {
                return a69;
            },
        };
        [,...o86] = v81;
        return a83;
    }
    f82();
}
v66[7] = v66;
const v88 = new C52();
v88[7] = v88;
const v90 = [[v50],"f",v50,381717.6504737276];
[v47];
function F92() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v88); } catch (e) {}
}
new F92();
const v96 = new F92();
const v97 = new F92();
function F98(a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    const v102 = a101?.__lookupGetter__;
    try { v102(a100); } catch (e) {}
    try { this.constructor(F98, this); } catch (e) {}
    a100.e = a100;
}
F98.arguments = F98;
const v105 = new F98(v97);
const v106 = new F98(v105, v96);
v106.length = v106;
v106.e = v106;
function f107(a108, a109, a110, a111) {
    function f112() {
        function f113(a114) {
            return f107;
        }
        f113(f113);
        return f107;
    }
    f112();
    f112();
    %OptimizeFunctionOnNextCall(f112);
    return a109;
}
const v119 = ("Hyo9")[1];
try { v119.fixed(); } catch (e) {}
const t121 = "at";
t121[1] = "at";
const v124 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap?.constructor;
try { v124("Hyo9"); } catch (e) {}
const v126 = [-4.202468609045087];
try { v126.every(v90); } catch (e) {}
const v128 = [0.8434386161503777];
const v130 = new Uint8Array(Uint8Array, Uint8Array);
v130[Math.atan2(-988.8649474800335, 10000)] = 10000;
try { v128.findLastIndex(v128); } catch (e) {}
class C138 extends Set {
}
function F139(a141, a142, a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
    new Float32Array([49197,268435456,-12,-5156,35920,-45892,-667,536870888,65537,-12]);
}
new F139(F139, F139, F139, F139);
("at")?.toWellFormed;
const t138 = "4i";
t138[1] = "4i";
const t141 = "RpXR";
t141[3] = "RpXR";
const t143 = "RpXR";
t143[1] = "RpXR";
("c")?.toLocaleUpperCase.length;
class C155 {
    constructor(a157) {
        class C158 {
            #n(a160, a161) {
            }
        }
        const v162 = ("4i").constructor;
        try { new v162(C158, "4i"); } catch (e) {}
        ("valueOf").localeCompare(a157, "valueOf");
    }
}
new C155();
const v166 = new C155();
const t159 = v166.constructor;
new t159(C155);
