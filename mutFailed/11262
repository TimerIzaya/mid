const v2 = new Float32Array(Float32Array);
Uint16Array.e = Float32Array;
new Uint16Array(8);
let v9 = -4294967295;
v9 / 9;
Math.cosh(728625465);
Math.fround(728625465);
v2 ^ 9;
~728625465;
const v16 = (9).ceil(++v9);
const v18 = (9 >> 9) * 9;
v18 / v18;
Uint8ClampedArray.prototype = Uint8ClampedArray;
new Uint8ClampedArray(9);
1000000000000.0 >>> v16;
[];
const v31 = new BigUint64Array(549);
const v34 = new Uint8ClampedArray(127);
for (const v35 in v34) {
    try { v31.filter(); } catch (e) {}
}
0.8543628907318911 !== 0.8543628907318911;
let v39 = -4294967297n;
v39++;
function f41() {
    const o49 = {
        [v39](a43, a44, a45, a46) {
            eval();
        },
    };
    return f41;
}
try { new f41(); } catch (e) {}
%OptimizeFunctionOnNextCall(f41);
let v52 = ([f41,f41,f41,f41]).push(v39);
v52--;
const v54 = /(M(?:ab|cde)VbD)/vdim;
v54.dotAll = v54;
f41(v52, v54);
