const v1 = new Map();
class C5 {
    #p(a7, a8) {
        try { this.toString(v1); } catch (e) {}
        try {
            super.includes();
        } catch(e11) {
        }
        function F12(a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a14;
            } catch(e16) {
            }
        }
        const v17 = new F12(-33274n, F12);
        new F12(-1073741824n, v17);
        new F12(-33274n, a7);
        return this;
    }
    8;
    get c() {
        this[v1] >>= Map;
        const v22 = (-33274n).iterator;
        const o38 = {
            [v22]() {
                let v24 = 10;
                const o37 = {
                    next() {
                        v24--;
                        const v28 = 0 == 0;
                        const o31 = {
                            "maxByteLength": 552,
                        };
                        new SharedArrayBuffer(552, o31);
                        new Int32Array(-1073741824n);
                        const o36 = {
                            "done": v28,
                            "value": v24,
                        };
                        return o36;
                    },
                };
                return o37;
            },
        };
        return o38;
    }
}
const t49 = -1073741824n;
const v39 = new t49();
new C5();
const v41 = new C5();
class C42 {
    n(a44, a45) {
        super[a45] = this;
        function F46(a48, a49, a50, a51) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a48;
            } catch(e52) {
            }
        }
        new F46(-1073741824n, a45, a45, C5);
        const v54 = new F46(a45, -33274n, C5, v41);
        new F46(-1073741824n, v54, F46, a44);
        return v54;
    }
    10 = v39;
    o(a57, a58) {
        try {
            this.a = C42;
        } catch(e59) {
        }
        return a57;
    }
    static #e = 268435439n;
}
const v60 = new C42();
new C42();
const v62 = new C42();
const v63 = [v62,v39,v39,v60];
const v64 = [v39,v60,v63,v63];
[v64,v64];
try {
} catch(e76) {
    function F77() {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f79() {
        return e76;
    }
}
