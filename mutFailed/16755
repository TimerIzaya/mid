function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 4294967297;
    } catch(e3) {
    }
    try {
        this.e = 4294967297;
    } catch(e4) {
    }
}
new F0();
const v7 = Symbol.for();
function f8() {
}
function F9() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v14 of Array(19793)) {
    }
    const o15 = {
        "defineProperty": f8,
    };
    const v17 = new Proxy(Array, o15);
    v17.a = v17;
}
const v18 = new F0();
const v19 = new F0();
class C20 {
    536870887;
    a = v18;
    static valueOf(a22, a23) {
        class C24 extends F0 {
            static [this];
            #f = v19;
            static 13;
        }
        const v25 = new C24();
        new v25();
        new C24();
        return v25;
    }
    static [-2];
    8;
}
try { C20(); } catch (e) {}
const v29 = new C20();
Object.defineProperty(v29, Symbol.toPrimitive, { value: Symbol });
const v32 = new C20();
v32[536870887] = v32;
new C20();
new Uint32Array(4096);
Uint8Array.e = F9;
Uint8Array.e = Uint8Array;
try {
const t0 = 1073741825;
t0();
} catch (e) {}
function F42() {
    if (!new.target) { throw 'must be called with new'; }
}
const v44 = new F42();
v44.constructor = Date;
new Uint8Array(2210);
0 * 0;
const v49 = new BigUint64Array(0);
const v51 = new Map();
const v52 = [0.22765518540216179,1000000000000.0,95110.62484655366,1000000000.0,3.436859148069951,-0.0,2.0,-5.0];
v52.toString = Date;
try { v52.entries(); } catch (e) {}
const v54 = [-102.00254877873078,4.124955647620156e+306,-2.0,-553429.805328496,-2.2250738585072014e-308,3.0];
v54.toString = Date;
const v55 = [513779.5906574144,1.7409613810254415e+307,98.0881888203628,0.0];
function f56() {
    return v29;
}
function f57(a58) {
    function f59() {
        const v61 = ([f59,f59]).constructor;
        const v62 = new v61();
        class C63 extends v61 {
        }
        const v64 = new C63();
        try { v64.reduceRight(); } catch (e) {}
        return v62;
    }
}
Object.defineProperty(v55, 7, { writable: true, enumerable: true, get: f56, set: f57 });
function f66(a67, a68) {
    a67[7] = a68;
    try { a67.groupToMap(a68); } catch (e) {}
    const v70 = a67[7];
    const o84 = {
        ...a67,
        ...v52,
        [v52](a72, a73) {
            a73[v51];
            const v75 = a68.length;
            a67 == v75 ? a67 : v75;
            return a68;
        },
        __proto__: v51,
        /*
        __proto__: v54,
        */
        "g": v32,
        /*
        __proto__: 1073741825,
        */
        n(a79, a80, a81, a82) {
            for (let v83 = 0; v83 < 10; v83++) {
            }
        },
        ...v55,
        "a": v70,
        "b": a68,
        [a68]: a68,
    };
    try { o84.n(v49, v51, F42, v49); } catch (e) {}
    return o84;
}
try { f66(v29, v29); } catch (e) {}
const v87 = f66(v52, v52);
const v88 = f66(v55, v52);
v88[0] = v88;
f66(v54, v54).g;
-2 !== -2;
256 - 256;
class C96 extends Map {
    [v87];
    static [-2];
    #p(a98, a99, a100) {
        a99.__proto__;
        let v102 = 0;
        do {
            try {
                v54.toString = f66;
            } catch(e103) {
            }
            v102++;
        } while (v102 < 3, a99)
        return this;
    }
}
C96.b = Symbol;
C96.b = C96;
try { new v7(); } catch (e) {}
const v108 = new C96();
try { v108.delete(v108); } catch (e) {}
new C96();
const v111 = new C96();
v111.constructor = f8;
const v112 = v111?.constructor;
try { new v112(); } catch (e) {}
function f115() {
    return 2210;
}
function f116(a117) {
    const v119 = new BigUint64Array(1000);
    v119.includes(undefined);
}
Object.defineProperty(Array, 0, { enumerable: true, get: f115, set: f116 });
const v123 = Array(1024);
Object.defineProperty(v123, 267, { writable: true, enumerable: true, value: v123 });
let v124;
try { v124 = v123.flatMap(f66); } catch (e) {}
v124.toString = f56;
const v125 = v124?.toString;
try { new v125(); } catch (e) {}
const v129 = [2210];
function f130() {
    for (let v131 = 0; v131 < 100; v131++) {
        f8();
    }
    return 1024;
}
v129.toString = f130;
v129[0] = v129;
const v133 = Reflect.construct(Uint8ClampedArray, v129);
v133.BYTES_PER_ELEMENT = v133;
const v134 = v133.constructor;
let v135;
try { v135 = new v134(Array, Array, Array); } catch (e) {}
v135.valueOf = f115;
v135[0] = v135;
