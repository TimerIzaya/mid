class C1 {
    545;
    static n() {
        const v3 = this;
        v3[0] = false * this;
        return this;
    }
    static #f = false;
    #h;
    #g;
    h;
    static 6;
}
const v5 = new C1(false, C1, false);
const v6 = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
async function f8(a9, a10) {
    'use strict';
    a10[9] = v6;
    return -21133.120743932668;
}
function F12(a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = a14 ^ a14;
    v15 * v15;
    const v17 = this.constructor;
    v17.length = v17;
    try { new v17(3n); } catch (e) {}
}
const v19 = new C1();
const v20 = new C1();
function F21(a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v24 = [0.0,1.0,-6.743702675363474,400.9902683003188];
        let v25 = "string";
        for (let [i29, i30] = (() => {
                10 - 10;
                return [0, 10];
            })();
            (() => {
                i30--;
                const v32 = i29 < i30;
                v32 || v32;
                return v32;
            })();
            (() => {
                const v36 = i29++;
                v36 >> v36;
            })()) {
            i30 - i30;
            for (const v41 in v24) {
                v41 instanceof v41;
                function f43(a44, a45, a46) {
                    function f48(a49) {
                        return a46;
                    }
                    %PrepareFunctionForOptimization(f48);
                    return this;
                }
                v25 *= v25;
            }
        }
        function f51(a52, a53) {
            const o55 = {
                ...a53,
                get h() {
                    return this;
                },
            };
            return a53;
        }
        this.b = v5;
    } catch(e56) {
    }
    try {
        this.c = v5;
    } catch(e57) {
    }
}
new F21(v20, F21, v5);
const v60 = Date.prototype;
try { v60.setFullYear(); } catch (e) {}
false.fontcolor(Date, v5).trimLeft()[12];
new F21(v19);
new F21(v19);
/ix/gui;
/ilOUxyz{1,32}?/uis;
/EC(?!\1(a\1)\1)\1/gdimy;
function F71() {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = !-7;
    v74 ** v74;
}
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    try { Reflect.set(); } catch (e) {}
    class C82 {
        static {
            do {
            } while (0 < 0)
        }
    }
    const v87 = this.constructor;
    Float64Array.e = Float64Array;
    this.e = this;
    function F90(a92) {
        if (!new.target) { throw 'must be called with new'; }
        const v93 = a92 ^ a92;
        v93 * v93;
        const v95 = this.constructor;
        v95.length = v95;
        try { new v95(3n); } catch (e) {}
    }
    try { new v87(v87, F71, F76, this, v87); } catch (e) {}
    new F71();
}
function f99(a100, a101, a102, a103) {
    Object.defineProperty(a100, "g", { value: a101 });
    a100 % a102;
    const o113 = {
        set b(a106) {
            const v108 = new Set();
            let [v109,,...v110] = v108;
            Date[-2147483648] >>>= -7;
        },
    };
    return o113;
}
new F76(F71, F71);
