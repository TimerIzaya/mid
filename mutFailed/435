function f0() {
    Uint32Array[Symbol.iterator] = f0;
    const v8 = new Uint32Array(Uint32Array, Uint32Array);
    v8[0.29489550717955537];
    const o12 = {
        "a": 16n,
        1: 16n,
        257: undefined,
    };
    const o15 = {
        get a() {
            let v13 = this;
            v13[-20279] = 9.890847555147856e+307;
            return v13 = super.e;
        },
        "f": -20279,
        "e": f0,
        __proto__: 9.890847555147856e+307,
        "a": 9.890847555147856e+307,
        "g": -20279,
        "h": f0,
        "b": 9.890847555147856e+307,
        "d": 9.890847555147856e+307,
    };
    return -20279;
}
let v16 = f0();
const v17 = f0();
const v18 = f0();
-46359 % -46359;
-51317 >>> -51317;
v16--;
const v29 = -9223372036854775807 >>> -9223372036854775807;
536870887 % 536870887;
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = v29;
    for (let v39 = 0; v39 < 25; v39++) {
    }
    const v42 = new Int8Array(995);
    v42.copyWithin;
    const v44 = this?.__lookupGetter__;
    try { new v44(v16); } catch (e) {}
    a35 >>> a35;
    a38 === a38;
    try {
        this.e = a35;
    } catch(e48) {
    }
}
new F33(-1.4491616605489999e+308, v18, -2.0, -4294967295);
const v50 = new F33(-1.4491616605489999e+308, v16, -2.0, -46359);
v50.b = v50;
new F33(-1.4491616605489999e+308, v17, -2.0, -268435456);
const o54 = {
    n(a53) {
        return a53;
    },
    [-46359]: -46359,
};
const v55 = [1e-15,395833.8744809434,1000000.0,1.4833232607524508e+308,-597725.5054648793];
[-1000000000.0,0.007564657698543642];
[-1000000000000.0,-974369.4481080713,-487337.25578581466,-479.12403330333757,1.7976931348623157e+308,0.3293969077783455,-5.0,1000000000000.0,783.9936120328941];
try { ("127").trimLeft(); } catch (e) {}
[10,-1012881949];
const v65 = new Float32Array(5);
const v67 = new Uint8Array(v29);
const o68 = {
    ...v65,
    ...v67,
};
[11,-146405100,536870912,-65535,-9,-1042500765,9];
const v70 = [-1,1108545007,-2,-536870912,24425,1397095361,-153132480];
v70[3] = v70;
new Uint32Array(54);
Uint16Array.BYTES_PER_ELEMENT;
const v80 = new Uint16Array(129);
new Uint8ClampedArray(2);
v80[Uint8ClampedArray] %= 2;
try {
    const v84 = new Uint16Array(v55, 54);
    v84[0];
} catch(e86) {
}
let v87 = 0;
do {
    -65537 >>> -65537;
    v87++;
} while ((() => {
        const v94 = [];
        class C95 {
            constructor() {
                delete v94[1073741824];
            }
        }
        9 & 9;
        return v87 < 9;
    })())
