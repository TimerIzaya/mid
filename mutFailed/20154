function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -11016;
    } catch(e3) {
    }
}
let v4 = new F0();
const v5 = new F0();
let v6 = new F0();
-2.0 / -2.0;
class C12 extends Int32Array {
}
C12.length = C12;
const v13 = new C12();
class C14 {
    constructor(a16, a17) {
        const v18 = this?.constructor;
        try { new v18(C14, this); } catch (e) {}
        const v20 = this?.constructor;
        v20.prototype = v20;
        try { new v20(this, a16); } catch (e) {}
    }
}
new C14();
class C23 {
    get c() {
        class C25 {
        }
        const t29 = ("1073741824").constructor;
        t29().replaceAll().toLowerCase().slice(gc);
        for (let v33 = 0; v33 < 32; v33++) {
            this["p" + v33] = v33;
        }
        return this;
    }
    static set e(a37) {
        let v36 = this;
        a37 || v36;
        const t38 = 9n >> 9n;
        new t38("dotAll");
        function f43() {
            return f43;
        }
        ({"c":v4,"g":v36,...v6} = v36);
        try {
            v6.length = 1413;
        } catch(e45) {
        }
    }
}
new C23();
const v47 = new C23();
const v48 = new C23();
class C52 {
    static [-21981];
    static h = v48;
    static 268435439 = v47;
    p(a54, a55, a56) {
        try {
            new F0();
        } catch(e58) {
        }
        return a56;
    }
    static {
        const v60 = delete this?.h;
        let v61;
        try { v61 = v6.m(v4, F0, v60); } catch (e) {}
        delete this[v61];
        v13.toLocaleString();
        const v66 = /NV?/vmy;
        const v67 = /N[^123]a\nz(x)(x)(x)\2?/guim;
        let v68;
        try { v68 = v66(v67); } catch (e) {}
        const v69 = [-2.2250738585072014e-308,v68];
        [v69,v69,v69];
        -v5;
        Math.atan2(v5, v5 >>> 128);
        v61 + v61;
    }
}
new C52();
new C52();
new C52();
Object(10).toExponential(16);
