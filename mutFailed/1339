const v3 = (-1).b;
v3?.e;
v3[v3] = 1;
v3 + v3;
v3?.[-2147483649];
const v7 = [-51719,2129664594,65535,1000,-2147483648,127,9007199254740990];
const v10 = -1 || -1;
(v10 % 1) & v10;
const v14 = Math.sinh(-1 & -1);
try { v7.splice(1, v7); } catch (e) {}
const v16 = [7];
const v17 = [2147483647,-45789];
try {
    new Uint8ClampedArray(9);
} catch(e21) {
}
[v16,1,[v10,Uint8ClampedArray,v14,-2147483649]];
[v14,-2147483649];
try { new Uint8ClampedArray(v7, v7, v17); } catch (e) {}
new Uint8ClampedArray(9);
let v27 = -1e-15;
v27++;
0 == 268435440n;
new Uint16Array(994);
function f38() {
    return 3.5885237423067196;
}
new f38();
try { new Uint8ClampedArray(1, Uint16Array, 994); } catch (e) {}
new Uint8ClampedArray(3489);
1073741824 / 1073741824;
const v45 = ("imul")[1];
v16[1073741824 instanceof f38] ||= 1;
typeof v45 === "symbol";
try { ("imul").padEnd(1073741824); } catch (e) {}
