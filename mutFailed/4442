const v2 = new Uint8ClampedArray(4096);
const v5 = new Uint8ClampedArray(30);
const v8 = new BigUint64Array(128);
class C9 extends 30 {
    c;
    static get e() {
        super.filter(v5);
        const v16 = new Uint8Array(225);
        for (const v17 in v16) {
        }
        return [-16910,9,-268435456,10000,53294,11,16,65536,268435441,-46905];
        function f20() {
        }
        const v24 = f20();
        const v25 = f20();
        const v26 = f20();
        function f27(a28, a29, a30) {
        }
        const v31 = f27(v26, v26, v24);
        f27(v25);
        f27(v31);
        return BigUint64Array;
    }
    [v2];
    static set f(a35) {
        super.c = v8;
    }
    d = 4096;
}
new C9();
class C38 extends Date {
}
const v39 = new C38();
v39.setHours(C38, C38, v39, C38);
new C9();
new C9();
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F43();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e48) {
    }
}
const t45 = 128;
new t45();
new F43();
new SharedArrayBuffer(4096);
const v54 = [];
function f55(a56, a57) {
    class C58 {
    }
}
v54.constructor = f55;
Math.expm1(1e-15);
class C65 {
    set e(a67) {
        Math.fround();
        Math.ceil();
    }
    m(a72) {
    }
    e;
}
const v73 = new C65();
const v74 = new f55();
const v78 = ("NN")["9"];
try { v78(v74, v73, "string"); } catch (e) {}
v54["concat"]();
const v81 = new Uint8ClampedArray();
v81.fill(Uint16Array, 127, 1073741824);
