const v1 = new Map();
function f2() {
    return Map;
}
/E\w|\d+/gudimsy;
const v4 = /J?/udim;
/(?:a?)*/vdmsy;
new Uint8ClampedArray([515943.2030917471,-1e-15,1.7976931348623157e+308,0.19475803117559898,-546414.0415788401,285129.04068811354]);
function F11(a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 145253519;
    } catch(e14) {
    }
}
new Map(-2147483648);
new Uint8Array(10);
class C20 {
}
new C20();
const v22 = v1.g;
try {
    v22.length = 1;
} catch(e24) {
}
new Float64Array(152, Float64Array, v4, v1);
const v29 = new BigInt64Array(66, f2);
const v35 = new Map();
[-65535,-19265,3,-13,65537,128];
new BigUint64Array();
class C39 {
}
const v40 = new C39();
class C41 {
    constructor(a43, a44, a45) {
        function f46(a47, a48) {
            return a47;
        }
        this[Symbol.toPrimitive] = f46;
        a44[4] = v40;
        for (let v51 = 0; v51 < 25; v51++) {
        }
    }
}
const v53 = v35.constructor;
new Uint8ClampedArray(798);
function f57(a58, a59, a60) {
    return -2147483648;
}
class C61 extends v53 {
    3832 = v29;
}
class C63 {
}
function f64() {
    const o67 = {
        m(a66) {
            return f64;
        },
    };
    (-4294967296).m();
    return o67;
}
/(?=a){1,10}a/ims;
("HEkWL").localeCompare("isArray", "isArray");
const t63 = [-147676202];
t63.length = 1;
