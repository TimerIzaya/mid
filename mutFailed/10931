const v0 = [1000.0,1.7976931348623157e+308];
const v1 = [4.0,-1000000000.0,-1000.0];
[-1.1168078466309908,0.27291721743122943,1.1668818864347192e+307,2.2250738585072014e-308,-1.0];
const v3 = [v1,v0];
[[v3],v1,v0,v1,v3];
[27269,57873,1016035808,4294967295,-7,512];
[9007199254740992,1073741824,1073741825,1934780197,16,268435441];
[16,2147483649,-9007199254740991];
const v14 = new Uint32Array(0);
new Float32Array(7);
new Uint8Array(2);
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    function f23() {
    }
    const v25 = ([9007199254740990,-16,376821973,268435456])[1];
    function F26() {
        if (!new.target) { throw 'must be called with new'; }
        this.constructor = f23;
        try { this.constructor(); } catch (e) {}
        this.b = 4294967296;
        try {
            function F30() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v32 = new F30();
            const v33 = new F30();
            const v34 = v33.__defineSetter__;
            try { v34(); } catch (e) {}
            function f36(a37, a38) {
                const o39 = {
                    "e": v32,
                };
                return o39;
            }
            const v40 = f36();
            f36();
            function f42() {
                return f36;
            }
            f42.b = v25;
            f42.b = f42;
            const v45 = new Float32Array();
            for (const v46 of v45) {
                v46 >>> v46;
                Object.defineProperty(v40, Float32Array, { configurable: true, enumerable: true, get: f36, set: f42 });
            }
            this.g = 4294967296;
        } catch(e48) {
        }
        this.f = 4294967296;
    }
    new F26();
    new F26();
    new F26();
}
const v52 = new F21();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = new F53();
const v60 = [];
function F62() {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = Date.toString(F62);
    v66[23];
    class C68 {
    }
    try { C68.m(); } catch (e) {}
    v14.constructor;
    const v73 = new isNaN(6);
    const v74 = v73.fill();
    v66.replaceAll(v52, -37859n);
    const v77 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v77[2];
    const v81 = new Set(v60);
    for (let i85 = 0, i86 = 10;
        (() => {
            const v87 = i85 < i86;
            class C88 extends Date {
            }
            return v87;
        })();
        i85++) {
    }
    const v94 = v81.add;
    v94.f = v94;
    try { v94(v77); } catch (e) {}
    const v97 = v81["of"](2.0);
    const v98 = v97 || v97;
    const v99 = v98 || v98;
    v99 && v99;
    const v101 = v98 && v98;
    v101 || v101;
    const o104 = {
    };
    o104.b = o104;
    try { Array(9223372036854775807); } catch (e) {}
    const v108 = ("getPrototypeOf").blink();
    const v109 = v108[28];
    function f110() {
    }
    function f112(a113) {
        new f110();
    }
    this.onmessage = f112;
    const v115 = v109.strike();
    v115[4] = v115;
    const v117 = v108.strike(591114.0785999324).replace(19793, v57);
    v117[11] = v117;
    class C120 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C121 extends C120 {
        static {
            try {
            const t0 = "getPrototypeOf";
            t0(this);
            } catch (e) {}
        }
        9;
        65537 = v74;
        ["getPrototypeOf"] = C120;
    }
    new C121();
    const v125 = new C121();
    const t126 = v125.constructor;
    new t126();
    const v128 = new C121();
    v128.getPrototypeOf;
    BigUint64Array.of();
    new BigUint64Array();
    new Int8Array();
    const v136 = new C121();
    const t134 = v136.getPrototypeOf;
    new t134();
    const v139 = v136.getPrototypeOf;
    let v140;
    try { v140 = new v139(); } catch (e) {}
    v140.getPrototypeOf = v140;
    const v141 = new C121();
    ("getPrototypeOf")[Symbol.toPrimitive];
    const v147 = new String();
    Object.defineProperty(v147, 7, { configurable: true, enumerable: true, value: Int8Array });
    const v148 = v141.getPrototypeOf;
    try { new v148(v148, Array, this); } catch (e) {}
    try { v148(); } catch (e) {}
    let v151;
    try { v151 = new v148(); } catch (e) {}
    try { v151.propertyIsEnumerable(v117); } catch (e) {}
    const v153 = v151?.constructor;
    try { v153.call(v109); } catch (e) {}
    let v155;
    try { v155 = new v153(v108, this, 4); } catch (e) {}
    v155.getPrototypeOf;
    try { v155.constructor(); } catch (e) {}
    [5,v94,this,5];
    function f160() {
        return 9223372036854775807;
    }
    const v161 = [601759695];
    const v162 = [1073741824,1073741823,1376142744,1073741825];
    function f163(a164, a165, a166, a167) {
        f160(591114.0785999324);
        try { v162["find"]("find", a167, v161); } catch (e) {}
    }
    f163(9223372036854775807, 9223372036854775807, v162, f163);
    const v172 = v141.constructor;
    let v173;
    try { v173 = new v172(F62, v101); } catch (e) {}
    v173?.constructor;
    const v175 = v173?.sticky;
    v175.h = v175;
    for (const v177 of Array(19793)) {
    }
    v147 ^ v147;
    gc();
    class C181 {
        static get b() {
        }
    }
}
new F62();
new F62();
