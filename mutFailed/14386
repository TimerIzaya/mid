const v1 = new Set();
function f2() {
    return Set;
}
let v8 = Symbol.iterator;
const o10 = {
    [v8]() {
    },
};
o10.h = o10;
v8++;
1024 % 1024;
const v17 = new BigInt64Array(1024);
const v20 = new Int16Array(3);
v20.BYTES_PER_ELEMENT = v20;
const v22 = new Map();
%VerifyType(3);
const v23 = Set + Set;
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this?.constructor;
    try { new v30(this, this, a26, a26); } catch (e) {}
    a28[62];
    try {
        this.d = v1;
    } catch(e33) {
    }
    try {
        this.f = 0.6338823758502492;
    } catch(e34) {
    }
}
new F24(-4.4516398095563625, 4.0, v23, v23);
const v36 = new F24(4.0, -490.9597389948077, 4.0, -1000000.0);
new F24(-490.9597389948077, 4.0, v23, F24);
class C39 {
}
try { C39.toString(); } catch (e) {}
let v41 = -7;
try { Math.round(4.0); } catch (e) {}
const v46 = Math.atan(v41--);
const v47 = Math.floor(7);
try { new Int8Array(v22, v36, 1000.0); } catch (e) {}
const v50 = new Int8Array(255);
try { v50.slice(v46, v47); } catch (e) {}
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = new Uint8ClampedArray();
    const o59 = {
        ...v58,
    };
    this.b = "b";
    function F60(a62, a63, a64) {
        if (!new.target) { throw 'must be called with new'; }
        a62 + a62;
        a63--;
        try {
            this.c = a63;
        } catch(e67) {
            Math.atan(+-1.0406565190769766e+308);
            const v73 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
            class C74 extends Int16Array {
                [v73];
            }
        }
        try {
            this.a = v1;
        } catch(e75) {
        }
    }
    F60.length;
    const v77 = [Infinity];
    class C78 {
        [v77];
    }
    C78.length;
    const v80 = new C78();
    const v81 = v80?.__defineGetter__;
    try { new v81(F60, F60); } catch (e) {}
    const v83 = new F60(255, 255, this);
    v83.c = v83;
    const v84 = new F60(3, F60, this);
    const v85 = v84?.c;
    try { new v85(v58, 1024, v58); } catch (e) {}
    const v87 = new F60(1024, "b", 1024);
    v87.c = v87;
    this.d = a56;
}
const v88 = new F53();
const v89 = new F53(v88, v88);
new f2();
const v91 = new f2();
try { new v91(); } catch (e) {}
const v93 = [];
const o94 = {
    __proto__: v93,
};
o94.includes(o94, o94, o94, o94, o94);
const o115 = {
    ...v89,
    __proto__: v88,
    "e": v93,
    "e": 255,
    "d": f2,
    valueOf(a97, a98) {
        function F99(a101, a102, a103, a104) {
            if (!new.target) { throw 'must be called with new'; }
            function f105() {
                return a101;
            }
            try {
                this.f = a103;
            } catch(e109) {
            }
            try {
                this.h = 7;
            } catch(e110) {
                function f111() {
                    return e110;
                }
                a103 = e110;
                Object.defineProperty(this, "h", { configurable: true, value: f111 });
            }
        }
        const v112 = new F99(a97, v17, v17, a98);
        new F99(v112, 7, 7, 7);
        new F99(7, 7, v112, v112);
        return 255;
    },
};
f2++;
536870887 * 536870887;
new Uint16Array(1000);
7 << 7;
Int8Array.b = Int8Array;
new Int8Array(7);
const v130 = new BigUint64Array(24);
v130[8];
for (const v132 in o115) {
}
