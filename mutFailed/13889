const v1 = [-2.220446049250313e-16,0.0,2.2250738585072014e-308];
const v2 = [1000000.0,8.470223337483083e+306,1.0014498333788592e+308,-316.12324048000846,-3.557406684325124,-271.03971717348213,2.0,-286558.18891379563];
function f3(a4, a5) {
    const v8 = Array();
    function f9() {
        return f3;
    }
    [[]];
    new BigUint64Array();
    v2?.constructor;
    function f15(a16) {
        const o19 = {
            "execution": "async",
        };
        gc(o19);
        for (let i23 = 0, i24 = 10;
            (() => {
                const v25 = i23 < i24;
                const v28 = new BigUint64Array(3375);
                let [v29,,v30,...v31] = v28;
                v31[1190] = v31;
                v29--;
                return v25;
            })();
            i23++) {
        }
        return a16;
    }
    Object.defineProperty(v8, 0, { configurable: true, enumerable: true, get: f9, set: f15 });
    v8.unshift(3);
    return a4;
}
new Promise(f3);
const v41 = [-5.0,5.078351709667961,1.8065016954211615,-8.297238718754226,-1.78141977459103e+308,2.0];
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v1;
    } catch(e46) {
    }
    try {
        this.e = v2;
    } catch(e47) {
        function F48(a50, a51) {
            if (!new.target) { throw 'must be called with new'; }
            ~(-256n >> -256n);
            try {
                new F48(this, a50);
            } catch(e56) {
            }
        }
        new F48(F48, F48);
    }
    try {
        this.g = v1;
    } catch(e58) {
    }
    const v60 = [];
    class C61 {
    }
    const v62 = new C61();
    const t61 = v62.constructor;
    t61(v60, Int8Array);
}
new F42(v1, null);
new F42(v2, v41);
new F42(v1, v1);
new Uint8ClampedArray(6);
class C76 extends Int8Array {
}
const v77 = new C76();
for (const v78 in v77) {
    v2.constructor;
    -9513n != 1;
    try { (-12n).getTime(-12n, -816409267); } catch (e) {}
}
new Int8Array(4);
const v89 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
v89.reverse();
const v93 = new Uint8ClampedArray(6, [1e-15,0.09547881173263595,1.7976931348623157e+308,0.6658730271969261,-1000.0]);
for (let i95 = 0;
    (() => {
        9 != 9;
        const v98 = -9;
        v98 + v98;
        return i95 < 9;
    })();
    i95++) {
    v93[i95] = v41;
}
new Uint32Array(3);
new Uint8Array();
function f108(a109, a110, a111, a112) {
    a109.length = a109;
    a111?.findLast;
    const o114 = {
    };
    o114.c = o114;
    const o118 = {
        n(a116, a117) {
            return a110;
        },
    };
    o118.n(a112, o118);
    return Uint8Array;
}
for (let v120 = 0; v120 < 625; v120++) {
    f108(f108, v120);
}
function F122() {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    v89.fuck(v89, v89, F122);
} catch(e125) {
}
