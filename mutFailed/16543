const v2 = new Float32Array(7);
const v5 = /a$\P{Decimal_Number}/gvdims;
const v6 = v5[v5];
for (let i = 0; i < 5; i++) {
    const v7 = v5.source;
    let v8;
    try { v8 = v6(true, v7, v7, v7); } catch (e) {}
    const v10 = true + true;
    const v11 = /(\1a)/gums;
    const v12 = /V(?:a{5,1000000}){3,1000000}/vims;
    const v13 = /(?<a>.)\k<a>?/vdimsy;
    for (let v14 = 0; v14 < 27; v14++) {
        v11.compile(v5);
        v8.lastIndex;
    }
    let v17;
    try { v17 = v13(v11, v12, v12, v11); } catch (e) {}
    %VerifyType(v17);
    const v18 = [v13,v12,v11];
    v18[2] = v18;
    const v19 = [v18,v12,v13,v18,v18];
    v19[2] = v19;
    [v13,v11,v11];
    let v21 = 8;
    const v22 = v21--;
    new BigInt64Array(v12, v11, v17);
    const v25 = new BigInt64Array(v21);
    new BigUint64Array(10);
    const v31 = new Uint8Array(7);
    const t29 = v31.constructor;
    const v33 = new t29(Uint8Array, v25, v25);
    try { Int32Array.bind(v18); } catch (e) {}
    function f37() {
        3.4890473589784586e+307 === 3.4890473589784586e+307;
        let v40 = 1000000000000.0;
        const v41 = v40--;
        -v41;
        -v19 && v19;
        class C48 {
            static #m(a50) {
            }
            constructor(a52) {
                new Float32Array();
                try { v17.entries(); } catch (e) {}
                Int32Array.next();
                const v57 = new Uint16Array(12, -4294967296, v41);
                new Float32Array(v57);
            }
        }
        new C48();
        new v6();
        Symbol.iterator;
        try { v25.reduce(Int32Array, v22); } catch (e) {}
        let v64 = 0;
        v64++;
        const v66 = new C48();
        new C48();
        const v68 = new C48(-4294967296);
        [];
        [257828.6336153492,v68,v66,v68];
        const v71 = [];
        v71[0];
        class C73 extends v33 {
        }
        new C73();
        const v75 = v71.constructor;
        try { v75.isArray(v71); } catch (e) {}
        class C77 extends v75 {
        }
        C77.a = C77;
        const v78 = new C77();
        const v79 = v78.constructor;
        try { v79.bind(); } catch (e) {}
        const o81 = {
            "e": v71,
            __proto__: v18,
            [v19]: v31,
            "h": 257828.6336153492,
        };
        try { o81.e(BigUint64Array); } catch (e) {}
        return Int32Array;
    }
    %PrepareFunctionForOptimization(v6);
    f37();
    %OptimizeFunctionOnNextCall(f37);
    f37();
    Math.log(v10);
}
const v87 = new Int8Array(52);
Math.log1p(0.04879611221991542);
new Int32Array([64,-6,-60026,-9]);
const v96 = new Float32Array(3);
function F97(a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    const v101 = this?.__lookupSetter__;
    try { new v101(this); } catch (e) {}
    a99--;
}
class C104 {
    static #m(a106, a107, a108) {
        (v87 && this).a;
        try {
            this.#m(this);
        } catch(e112) {
        }
        return a106;
    }
    6 = v96;
    b = Float32Array;
    static #g;
    [Int8Array];
    [52];
}
const v113 = new C104();
new C104();
new C104();
function f116(a117, a118) {
    const o155 = {
        "a": v2,
        ...v6,
        "f": v113,
        o(a120, a121) {
            let v123 = 4294967295;
            Math.asinh(v123);
            ++v123;
            Math.sin(v123);
            -9007199254740991 >>> -9007199254740991;
            const v131 = Array(Array);
            for (let v132 = 0; v132 < 5; v132++) {
                const v133 = v132 || v131;
                v133 ** v133;
            }
            v2 && -2147483648;
            Math.asinh(v2);
            const v138 = new Date(Date);
            v138.getDay();
            function f140(a141, a142, a143, a144) {
                const v146 = new Float32Array(2);
                v146[1] = v146;
                new Int32Array();
                const v149 = v146;
                a142.fill();
            }
            for (let v151 = 0; v151 < 625; v151++) {
                f140();
            }
            let v153 = ~v123;
            return v153++;
        },
    };
    return o155;
}
f116(52, 52);
f116(3, 3);
f116(7, 3);
class C159 {
    o(a161, a162, a163, a164) {
    }
}
function F165(a167, a168, a169) {
    if (!new.target) { throw 'must be called with new'; }
    const v170 = this.constructor;
    try { new v170(); } catch (e) {}
    a167 % a167;
}
new F165();
new F165();
