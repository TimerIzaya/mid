function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    a5.length;
    try { this.constructor(128, this); } catch (e) {}
    a6 + a6;
    try {
        this.a = 5;
    } catch(e10) {
    }
    try {
        this.b = 5;
    } catch(e11) {
    }
    try {
        this.d = a6;
    } catch(e12) {
    }
}
const v13 = new F3(F3, -195224844);
new F3(5, 5);
const v15 = new F3(-195224844, 128);
v15.a = v15;
129 === 129;
try { Array.bind(-195224844); } catch (e) {}
237 ^ 237;
237 & 237;
new Array(237);
new Int32Array(182);
const v31 = new Uint8Array(10);
try { v31.reduce(129); } catch (e) {}
try { new BigInt64Array(BigInt64Array, v15, v31); } catch (e) {}
const v36 = new BigInt64Array(3);
function f37() {
    1261703539 === 1261703539;
    1261703539 / 1261703539;
    class C42 {
    }
    C42.length = C42;
    -127;
    const v46 = `
        try {
            new Float64Array(127);
        } catch(e48) {
        }
    `;
    let v49 = -65535;
    v49 * v49;
    const v51 = v49 / v49;
    ~v51;
    const o125 = {
        __proto__: 352326470,
        next() {
            v49--;
            const v56 = v49 == 0;
            const o57 = {
                "done": v56,
                "value": v49,
            };
            return o57;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v49,
        m(a59) {
            try { a59.next(); } catch (e) {}
            a59.c = a59;
            a59.h = a59;
            const o61 = {
            };
            o61.h = o61;
            o61.h = o61;
            function f62(a63, a64, a65) {
                function f67(a68) {
                    a64[5] ||= f37;
                }
                this.onmessage = f67;
                const v71 = new SharedArrayBuffer(35);
                new BigUint64Array(v71);
            }
            f62.caller = f62;
            try {
                o61.e = v49;
            } catch(e74) {
                const v78 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v78, o61);
            }
            try {
                const o80 = {
                };
                o80.e = 1261703539;
                o80.g = a59;
            } catch(e81) {
            }
            try { Math.expm1(128); } catch (e) {}
            -9007199254740991 === -9007199254740991;
            const v86 = -9007199254740991 >> -9007199254740991;
            const v87 = v86 - v86;
            v87 === v87;
            Math.sin(-9007199254740991);
            try { ("EV").link(v51); } catch (e) {}
            0 != 0;
            class C94 {
                o(a96, a97, a98, a99) {
                    class C100 {
                        static 44 = "EV";
                    }
                    new C100();
                    new C100();
                    new C100();
                    return 0;
                }
            }
            C94.name;
            C94.name = C94;
            new C94();
            3938 << 3938;
            3938 & 3938;
            const v110 = new Int8Array(3938);
            let v111 = 3;
            const v112 = v111++;
            v112 + v112;
            let v114 = 0;
            v114 >>> v114;
            const v116 = v114 >> v114;
            v116 - v116;
            for (let i = 0; i < 5; i++) {
                v114 < 8;
                [...v111] = v110;
                const v120 = v114++;
                v120 % v120;
            }
            const o122 = {
            };
            o122.c = o122;
            o122.e = 1261703539;
            o122.g = a59;
            try {
                const o123 = {
                };
                o123.c = o123;
                o123.g = a59;
                o123.h = 352326470;
            } catch(e124) {
            }
            return this;
        },
    };
    let v126;
    try { v126 = o125.m(o125); } catch (e) {}
    v126.b = v126;
    v126.b = v126;
    class C128 {
    }
    C128.length = C128;
    const v129 = new C128();
    const v130 = v129?.constructor;
    try { new v130(); } catch (e) {}
    (182).name;
    Float32Array.a = Float32Array;
    const v134 = new Float32Array(v129, "nt", Float32Array);
    const t162 = "nt";
    const v135 = delete t162[v134];
    let v136;
    try { v136 = v129.floor(v135); } catch (e) {}
    for (const v137 in v136) {
    }
    v126.e = v126;
}
const v138 = v13();
const v139 = f37();
const v140 = f37();
47120 % 47120;
const v144 = Uint8Array.prototype;
try { v144.at(182); } catch (e) {}
try { v144.reverse(); } catch (e) {}
let v147;
try { v147 = new Uint8Array(v139, v140, v138); } catch (e) {}
try { v147.join(f37); } catch (e) {}
function f150(a151, a152, a153, a154) {
}
try { ("lastIndexOf").codePointAt(3); } catch (e) {}
const v158 = Symbol.toPrimitive;
Symbol.for(v158.description);
("lastIndexOf")[v158];
function f163(a164, a165) {
    const o168 = {
        set b(a167) {
        },
    };
}
f163();
-9007199254740992 - -9007199254740992;
7 >>> 7;
257 | 257;
BigUint64Array.prototype = BigUint64Array;
new BigUint64Array(257);
let v179 = 1412;
v179 << v179;
const v181 = v179++;
v181 / v181;
Uint16Array.prototype = Uint16Array;
const v184 = Uint16Array.prototype;
try { v184.at(v31); } catch (e) {}
new Uint16Array(v179);
-8;
256 >>> 256;
gc(256);
function F193(a195, a196, a197) {
    if (!new.target) { throw 'must be called with new'; }
}
let v198 = 8 + 8;
v198--;
const v200 = 8 >>> 8;
const v201 = v200 >>> v200;
v201 & v201;
try { new Uint8Array(v36, v200, v36); } catch (e) {}
const v205 = new Uint8Array(8);
v205[2] = v205;
v205[7] = v205;
try {
    v205.h = -9223372036854775807;
} catch(e208) {
}
const v209 = [-223.21974199729607,0.6826909196761026,-7.610543209781418e+307,1000000000.0,-2.2250738585072014e-308,0.4672319347741436,-1000000.0,-3.0,-5.0,6.966874548897];
9007199254740990 + 9007199254740990;
let v212 = -9007199254740990n;
v212--;
const v214 = v209.fill(v212, 9007199254740990);
let v215;
try { v215 = v214.toString(); } catch (e) {}
try { v215.includes(v13); } catch (e) {}
try { v215.bold(); } catch (e) {}
let v218;
try { v218 = v215.strike(); } catch (e) {}
try { v218.strike(); } catch (e) {}
