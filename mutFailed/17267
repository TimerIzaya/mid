function F0() {
    if (!new.target) { throw 'must be called with new'; }
    for (let i5 = 0, i6 = 10; i5 < i6; i6--) {
    }
    new Uint8ClampedArray(303);
    new Uint8ClampedArray();
    const v16 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
    ([-2]).concat(v16);
    try {
        this.g = 1;
    } catch(e20) {
    }
    try {
        this.a = 1;
    } catch(e21) {
    }
}
const v22 = new F0();
new F0();
new F0();
[] != -2147483647n;
const v30 = new Date(Date);
function F31(a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this.constructor;
    try { new v34(); } catch (e) {}
    this.f = v30;
}
try { ("f").codePointAt(v22); } catch (e) {}
for (let v40 = 0; v40 < 5; v40++) {
}
const v41 = [];
function f42(a43, a44) {
    a43 <= v41;
    return f42;
}
new Promise(f42);
new BigInt64Array(2);
const v51 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    a55.toString();
}
this[256] = BigUint64Array;
[v51];
function f62(a63) {
    return f62;
}
const t48 = -2147483647n;
t48([-11,-9223372036854775807,-817733745,9007199254740991,16,12,-16238,536870912,-4294967297,65536]);
function f67(a68, a69, a70, a71) {
    const v72 = a69 >>> a69;
    (v72 >>> v72) != 256;
    for (let v75 = 0; v75 < 5; v75++) {
    }
    return 256;
}
f67(256, f67, 256, 256);
F52();
const v80 = new Int16Array(512);
Int32Array.bind();
function f83(a84) {
    return f83;
}
try { v80.join(v80); } catch (e) {}
Float64Array.prototype = Float64Array;
new Float64Array(2258);
2325 + 2325;
const v92 = new BigInt64Array(2325);
for (const v93 in v92) {
    try { v93.toUpperCase(); } catch (e) {}
    const o98 = {
        set e(a96) {
            return;
        },
    };
}
