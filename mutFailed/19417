let v1 = 0;
v1++;
v1 < 9;
v1 % v1;
new Uint8ClampedArray(584);
new Int8Array(1933);
const v13 = new Uint16Array(5);
for (let i16 = 0, i17 = 10;
    (() => {
        const v18 = i16 < i17;
        class C19 {
        }
        function f20(a21, a22, a23, a24) {
            let v25 = 10;
            for (; v25--;) {
            }
            try { a22.apply(a21); } catch (e) {}
        }
        f20(i17, C19);
        %OptimizeFunctionOnNextCall(f20);
        return v18;
    })();
    i17--) {
}
const v34 = [1000.0,-2.0];
[-566129.1999229374,-2.0,-2.2250738585072014e-308];
const v36 = [-1.7976931348623157e+308,1000000000.0,867887.6042050705,-1000000000.0,5.0,-2.2250738585072014e-308,2.2250738585072014e-308,249620.5428979788,1000000000000.0];
function f37() {
    return v34;
}
class C38 extends f37 {
    #g = Int8Array;
    static #n(a40, a41, a42, a43) {
        try {
            v13.__proto__ = v36;
        } catch(e44) {
        }
        Promise.reject(Promise);
        function f49(a50, a51, a52, a53) {
            return arguments;
        }
        const v56 = f49(f49(64, 118, 64, 118), f49);
        v56.constructor.values(v56);
        return 1933;
    }
    n(a60, a61, a62) {
        f37();
        %PrepareFunctionForOptimization(f37);
        f37();
        function f65() {
            return f65;
        }
        class C66 extends f65 {
            constructor() {
                super();
                Math.acosh();
            }
            [f65] = f65;
        }
        const v70 = new C66();
        const v71 = v70?.constructor;
        try { v71(); } catch (e) {}
        f37();
        %OptimizeMaglevOnNextCall(f37);
        for (let v74 = 0; v74 < 25; v74++) {
        }
        const v76 = new WeakMap();
        function f77(a78) {
            return v76;
        }
        f37();
        return this;
    }
}
new C38();
new C38();
const o83 = {
    ...f37,
    get d() {
        return this;
    },
};
new C38();
const v88 = new Uint16Array(9);
v88.includes(9223372036854775807);
class C90 {
    constructor(a92, a93) {
        const o95 = {
            84: arguments,
        };
    }
}
