class C3 {
    constructor(a5, a6) {
        a6.g ||= 1.212488027753892;
        a5[a6] ^= 1.212488027753892;
    }
    set g(a8) {
        super[this] = this;
        const v9 = this[2147483648];
        const v11 = [v9?.[a8],4.0];
        [[v11,4.0,v9],v11];
    }
}
const v14 = new C3(-536870912, C3);
const v15 = new C3(4.0, -536870912);
const v16 = new C3(v15, v15);
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -536870912;
    } catch(e23) {
    }
    try {
        this.h = v14;
    } catch(e24) {
    }
    function F25(a27, a28) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v29 = new F25();
    function f30() {
        const o36 = {
            [1836424012](a33, a34, a35) {
            },
            "e": v29,
        };
        return F25;
    }
    %PrepareFunctionForOptimization(f30);
    f30();
    f30();
    %OptimizeFunctionOnNextCall(f30);
    f30();
    try {
        this.f = v15;
    } catch(e40) {
    }
}
new F17(v14, v15, v15, v14);
new F17(v16, v14, C3, v16);
new F17(v15, v15, v15, C3);
function f44(a45, a46, a47, a48) {
    const v49 = /(?:a*)+q(?<a>.)/guds;
    for (let [i53, i54] = (() => {
            0 >>> 0;
            return [0, 10];
        })();
        (() => {
            const v55 = i53 < i54;
            function f56(a57, a58) {
                return f44;
            }
            return v55;
        })();
        i54--) {
        for (let v64 = 0; v64 < 25; v64++) {
            v49.hasIndices = v49;
        }
    }
    return f44;
}
for (let v65 = 0; v65 < 10; v65++) {
    f44(v65, v65, f44, v65);
}
%OptimizeFunctionOnNextCall(f44);
f44();
