function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -1664182160;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    2105444095n >> 2105444095n;
    for (let v19 = 0; v19 < 100; v19++) {
        const o23 = {
            6: undefined,
            [268435439n]: 2105444095n,
            __proto__: a13,
            "g": a13,
            "b": v19,
            "arguments": this,
            valueOf(a22) {
                return v19;
            },
        };
    }
    try { Math.ceil(-4294967296n); } catch (e) {}
}
const v26 = new F9();
const t29 = v26.constructor;
new t29();
new BigUint64Array(255);
const v39 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v40 = [601759695];
function f42() {
    const o59 = {
        "c": -4294967297n,
        [522675525n](a47, a48) {
        },
        "c": v40,
        valueOf(a50, a51) {
        },
        "e": -4294967295,
        "maxByteLength": -4294967295,
        "arguments": v39,
        ...v40,
        "type": "Vre",
        ..."Vre",
        valueOf(a53, a54) {
        },
        ..."Vre",
        4: "Vre",
        "type": "Vre",
        toString(a56, a57, a58) {
        },
        5: -4294967295,
        6: -268435456,
    };
}
f42();
new Uint32Array(8);
let v64 = -2.220446049250313e-16;
class C65 {
    constructor(a67, a68) {
        Math.acos(v64);
        v64++;
    }
}
class C72 {
}
const v75 = ([-536870912,-3592,61205]).constructor;
try { v75(6.9332226702676465); } catch (e) {}
new C65();
const v78 = new Int16Array(10);
v78?.__defineSetter__;
for (let [v82,...v83] of "atan2") {
}
v39[536870912] = Int16Array;
new Set();
for (let i88 = 0, i89 = 10;
    (() => {
        const v91 = new Int8Array(Int8Array);
        v91.buffer.slice(Int8Array, Int8Array);
        function f94() {
            for (const v98 of Array(4087)) {
            }
            return Array;
        }
        f94();
        const v100 = i88 < i89;
        new Float32Array();
        try { Reflect.defineProperty(i88); } catch (e) {}
        new BigInt64Array(4046);
        const o114 = {
            "type": "atan2",
            "type": "atan2",
            valueOf() {
                try { this.b(); } catch (e) {}
                [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
            },
            n(a112, a113) {
                return a112;
            },
        };
        const v117 = new BigUint64Array(3375);
        const v118 = [];
        const v120 = new Float64Array(v118);
        v118[Symbol.iterator] = v120;
        const v123 = [BigUint64Array,BigUint64Array];
        const o124 = {
            "arguments": v123,
        };
        let [v125,,v126,...v127] = v117;
        class C128 {
            constructor(a130, a131, a132, a133) {
                super();
                function f134() {
                    const o135 = {
                        "g": a131,
                        ...v78,
                    };
                    return f42;
                }
                for (let v136 = 0; v136 < 5; v136++) {
                    f134();
                    %OptimizeFunctionOnNextCall(f134);
                }
            }
        }
        const v138 = [727957804,7,49072,-63418,-4,-52120,127,1273312700,-128];
        function f139() {
            return v138;
        }
        return v100;
    })();
    i88++) {
}
function F145() {
    if (!new.target) { throw 'must be called with new'; }
    function f147() {
    }
}
function f148() {
    function f149() {
    }
}
function f150(a151, a152) {
    const o153 = {
    };
}
function f154() {
    function f155(a156, a157) {
    }
    const v159 = new Promise(f155);
    new Uint8Array(481);
    new Float64Array(453);
    v159.then(f155);
}
%PrepareFunctionForOptimization(f154);
f154();
%OptimizeFunctionOnNextCall(f154);
for (let v168 = 0; v168 < 500; v168++) {
    class C170 {
    }
    const v173 = new Int32Array(v168, v168, 257);
    let v175 = new Map();
    [...v175] = v173;
}
f154();
const v178 = new Uint8Array();
function f179(a180, a181, a182, a183) {
    a182 ^ a182;
    const o189 = {
        "b": a180,
        ...v178,
        n(a186, a187) {
            return a183;
        },
        get g() {
            return this;
        },
    };
    return a181;
}
for (let v190 = 0; v190 < 500; v190++) {
    f179();
}
