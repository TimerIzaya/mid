class C3 {
    m(a5) {
        let v6;
        try {
        const t0 = "string";
        v6 = t0();
        } catch (e) {}
        try { new v6(a5, "valueOf"); } catch (e) {}
        function f9() {
            function f11(a12) {
                const v16 = 1073741824 ** 5;
                Math.clz32(2089625166);
                2089625166 >> v16;
            }
            this.onmessage = f11;
            Symbol.replace;
        }
        v6 > "valueOf";
        "valueOf" >> "536870888";
        a5[2147483648] = a5;
        this[this] = "536870888";
        return this;
    }
    g;
    222 = "string";
    4;
    static [C3] = "valueOf";
}
const v23 = C3?.constructor;
try { new v23(C3); } catch (e) {}
let v25;
try { v25 = new v23(); } catch (e) {}
v25[222] = v25;
const v26 = new C3();
Array(87);
function f30(a31, a32, a33, a34) {
    const o35 = {
        "d": "string",
    };
    return o35;
}
const v36 = new C3();
new C3();
async function* f39(a40, a41, a42) {
    return a41;
}
f39();
Symbol.isConcatSpreadable.description.fontsize(Uint8Array).trimStart(Array);
const v52 = Array(670);
try { v52.groupToMap(87); } catch (e) {}
10000 + C3;
const v60 = new Float64Array(1000);
v60.includes(5);
const v62 = [v26];
try { v62.includes(v62); } catch (e) {}
const v64 = v62?.shift;
try { new v64(); } catch (e) {}
const v66 = ["string",v36,10000];
try { v66.toLocaleString(); } catch (e) {}
[12,v66,v66];
const v70 = new Float64Array();
-(-1.5286188982640463e+308);
-1.5286188982640463e+308 >>> -1.5286188982640463e+308;
const v74 = delete v70[-1.5286188982640463e+308];
v74 && v74;
