class C3 {
    toString(a5, a6) {
        this[0.0] = this;
        0.0 ^ this;
        return a5;
    }
    set c(a9) {
    }
}
new C3();
new C3();
new C3();
[2.220446049250313e-16,333146.85388378124,9.591834451427046e+307,1000000.0,-1.0];
[-1.7976931348623157e+308,-460281.27926718735,8.819367356011952,-0.0,Infinity,691949.8156242946];
[-3.0];
const v19 = [286977509,536870889,-380982641,1073741825,-14496,-9223372036854775807];
const v20 = [64918,-21903,65536,-65537,-9007199254740991,268435440];
function f21(a22, a23, a24, a25) {
    const v26 = /(?:a*)+q(?<a>.)/guds;
    function f27(a28) {
        return a22;
    }
    for (let [i36, i37] = (() => {
            v19.toLocaleString(f27);
            for (let v31 = 0; v31 < 5; v31++) {
                v20[a23];
                v26["exec"]();
            }
            return [0, 10];
        })();
        (() => {
            const v38 = i36 < i37;
            !v38;
            return v38;
        })();
        (() => {
            i37--;
            const v44 = Symbol.toPrimitive;
            const o46 = {
                [v44]() {
                },
            };
        })()) {
        for (let v49 = 0; v49 < 5; v49++) {
        }
    }
    return a23;
}
function f50(a51) {
    return f50;
}
const o54 = {
    "type": "function",
};
o54.arguments = f21;
new Worker(f50, o54);
