const v2 = new BigInt64Array(10);
Int16Array.c = Int16Array;
v2 ^ f;
for (let v7 = 0; v7 < 32; v7++) {
    f["p" + v7] = v7;
}
const v10 = new Int16Array(128);
v10[95] = v10;
const v13 = new Int8Array(14, Int8Array, 10);
v13[13];
const v15 = v13[4];
v15 | v15;
try {
    v2.__proto__ = v2;
} catch(e17) {
}
const o18 = {
};
new Proxy(v2, o18);
function f21(a22, a23, a24) {
    const v25 = a22 < a22;
    const v26 = a22 >> a22;
    v26 << v26;
    const o37 = {
        "h": Int8Array,
        "g": v10,
        "a": a22,
        [a23]: 128,
        "d": v25,
        get h() {
            try { BigInt64Array(v13, 10, 128); } catch (e) {}
            const o32 = {
                "MIN_SAFE_INTEGER": 614,
            };
            const v34 = new Math(6, o32);
            const v36 = new Float32Array(v34);
            return v36;
        },
    };
    return o37;
}
f21(10, 128, 10);
const v39 = f21(128, 128, 128);
v39.h = v39;
f21(10, 128, 10);
const v42 = new Date();
const v43 = v42.getUTCDate();
v43 >>> v43;
