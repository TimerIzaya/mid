const t0 = 1;
new t0(1);
class C3 extends Array {
    set c(a5) {
        const v10 = super.some(super[1], this) ** -2013702453;
        const v11 = -2013702453 - -2013702453;
        C3 & v11;
        Math.clz32(-2013702453);
        a5 ** v11;
        v11 / v10;
    }
    static [-2];
}
C3.toString = Array;
const v16 = new C3();
try { v16.copyWithin(C3, 1); } catch (e) {}
const v18 = new C3();
const v19 = new C3();
let v20;
try { v20 = v19.pop(); } catch (e) {}
const v21 = [0.18369002528212008,-57.581551668299994,6.262971189479931,-1.0,5.0,-1e-15];
const v22 = [-Infinity,-7.420138521001514,-1000.0,5.0,1000.0,0.10591659318527591,5.0,4.0];
[Infinity,-4.5585937743881395,-2.220446049250313e-16,Infinity,242.4618189196276,-1.0,-1e-15];
const v24 = [0.0,0.6114909056419564,-27.728353837969394,-3.0,4.0,1e-15,-1.0];
[-8670.411205322016,-230375.9547573285,-11.983600776290814,2.0,-1.0,-1000000000000.0,4.0,-1.0];
try { v24.sort(v18); } catch (e) {}
const v27 = [-570742.4009553578,-1.0,777.9068524461727,-906.3266539248249,1.084915561993169];
try { v27.map(v21); } catch (e) {}
try { new Uint32Array(v21, gc, v22); } catch (e) {}
const v32 = new Uint32Array();
v32[Symbol.toPrimitive] = gc;
v20[545] = v32;
