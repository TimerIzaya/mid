class C3 {
    static #h;
    toString(a5, a6) {
        try {
            a5.#h;
        } catch(e8) {
        }
        const o12 = {
            "execution": a6,
            "type": "minor",
        };
        return gc(o12);
    }
}
const v14 = C3?.apply;
let v15;
try { v15 = new v14(-14978, 1.3739817431268459e+308); } catch (e) {}
const v16 = new C3();
function f17() {
    function f18() {
        let v19 = -1024;
        function F20(a22, a23, a24, a25) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v26 = new F20();
        const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v28 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
        function F30(a32, a33) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C34 {
        }
        const v36 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v37 = [601759695];
        function f40() {
            Array().unshift();
            new Set();
            function F49(a51, a52) {
                if (!new.target) { throw 'must be called with new'; }
                F49();
            }
            try {
                v27.forEach(Float64Array);
            } catch(e55) {
            }
            [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            class C58 {
            }
            const v59 = new C58();
            try {
                v59.__proto__ = F30;
            } catch(e60) {
            }
            const v61 = Symbol.toPrimitive;
            const o65 = {
                toString(a63, a64) {
                },
            };
            const o86 = {
                [522675525n](a68, a69) {
                },
                "c": v37,
                valueOf(a71, a72) {
                    return a72;
                },
                [-4294967297n](a74, a75, a76, a77) {
                },
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v36,
                ...v26,
                [v61]() {
                },
                "type": C34,
                valueOf(a80, a81) {
                    return Symbol;
                },
                4: "Vre",
                toString(a83, a84, a85) {
                    return a84;
                },
            };
            new Float32Array();
            v19 %= -268435456;
            new Uint32Array(v28);
            return undefined;
        }
        return C34;
    }
    return f18;
}
function f91(a92) {
    try { v16.toString(a92, a92, v15, f17, ...-2.2250738585072014e-308); } catch (e) {}
}
Object.defineProperty(v16, "constructor", { writable: true, enumerable: true, get: f17, set: f91 });
try { v16.constructor(); } catch (e) {}
const v95 = new C3();
function f96() {
    return f91;
}
function f97(a98) {
    const v100 = new Int32Array(-14978);
    for (const v101 of v100) {
        const o104 = {
            "maxByteLength": 1293466293,
        };
        new SharedArrayBuffer(1796, o104);
    }
}
Object.defineProperty(v95, "toString", { writable: true, configurable: true, enumerable: true, get: f96, set: f97 });
try { v95.toString(-14978, 1.3739817431268459e+308); } catch (e) {}
const v108 = new C3();
const v109 = v108?.constructor;
try { new v109(); } catch (e) {}
function F115(a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new F115();
    } catch(e123) {
    }
}
("S9tMy")[1];
const v127 = [268435439,-4096,-128,10000,268435439,-175228916,-452916790,1073741825];
v127[7] = v127;
const v128 = [-10,-2098521316,3668,60621,-12,15,8,4294967296,39263];
v128.toString = f91;
try { v128.toString(); } catch (e) {}
[2,3,268435439,-10,-1540599599,536870889];
/49/gims;
207 + 207;
try { Float32Array.from(-2.2250738585072014e-308); } catch (e) {}
14 * 14;
let v140;
try { v140 = new Uint8ClampedArray("symbol", 14, 207); } catch (e) {}
v140.byteOffset;
let v142 = 220;
v142--;
new BigUint64Array();
class C147 {
}
try { new C147(); } catch (e) {}
const v149 = new C147();
const v150 = v149?.constructor;
try { new v150(); } catch (e) {}
[0.03568519099872258];
Uint8Array.g = Uint8Array;
const v156 = new Uint8Array();
function f157(a158, a159, a160, a161) {
    const o162 = {
        ...v156,
        [-1024n]: -1024n,
        ...v156,
    };
    class C165 {
    }
    2.4055206643129257 ** -1.5876750346470025e+308;
    function f170(a171, a172, a173) {
        const o174 = {
            "h": a173,
        };
        return o174;
    }
    f170(-3.9870582640049523, -3.9870582640049523, 1000000.0);
    class C176 {
    }
    const o177 = {
        ["symbol"]: v128,
        ...v128,
    };
    const v178 = f170(1000000.0, -3.9870582640049523, 1000000.0);
    f170(-3.9870582640049523, -2.2250738585072014e-308, -3.9870582640049523);
    v178["toString"]();
    const o182 = {
    };
    const v183 = o182.constructor;
    function f184() {
        return f184;
    }
    function f185(a186, a187, a188, a189) {
        try { a187.hasOwn(); } catch (e) {}
        let v191;
        try { v191 = a187(); } catch (e) {}
        try { v191.isPrototypeOf(); } catch (e) {}
        try { new a188(); } catch (e) {}
        a187.freeze();
        const v195 = a189 + a189;
        function f196() {
            return v191;
        }
        try { f196(); } catch (e) {}
        const v198 = f196.length;
        const v199 = -v198;
        const v201 = f184().constructor;
        try { v201.prototype(); } catch (e) {}
        let v203;
        try { v203 = v201(); } catch (e) {}
        try { v203(); } catch (e) {}
        function f205() {
            return v203;
        }
        const v206 = f205();
        try { v206.null(); } catch (e) {}
        f205();
        const v209 = typeof f196;
        const v210 = v209.italics(v209, v199);
        try { v210.match(f184, o182, a189, f184, v210); } catch (e) {}
        const v213 = new Int8Array();
        v213.entries().next(v198);
        const v216 = [207,207,207,207,207];
        try { v216.reverse(); } catch (e) {}
        try { ("find").trimRight(); } catch (e) {}
        const v221 = ("find").blink().replaceAll;
        try { v221(f185, v195); } catch (e) {}
        return v183;
    }
    f185(v142, v183);
}
for (let v224 = 0; v224 < 500; v224++) {
}
