function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v5 = Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array).normalize();
    function f6(a7) {
        return f6;
    }
    try {
        this.a = v5;
    } catch(e8) {
    }
}
new F0();
new F0();
const v11 = new F0();
const v12 = v11.a;
const v15 = [-10,255];
const v17 = new Uint8ClampedArray();
v15 * v17;
const v19 = [-0.0,-2.0,-1e-15,2.0,-Infinity,2.220446049250313e-16];
const v20 = [0.7413321115775521,436298.36999994353,-547.5300741212703,1.0,-1e-15,8.397732840452793,-1000000000.0,6.84258291941704];
const v24 = ("lastIndexOf")[Symbol.toPrimitive];
v20.toLocaleString(v24, v19);
const v28 = new v12();
let v29;
try { v29 = v28.add(F0); } catch (e) {}
new v29();
function f32() {
    const v35 = ("D")[0].substring();
    v35 == v35;
    v35.charCodeAt();
    return "D";
}
const v38 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v15["p" + -4096] = -4096;
const o41 = {
    ...v38,
};
%PrepareFunctionForOptimization(f32);
f32();
%OptimizeFunctionOnNextCall(f32);
v24();
function f44() {
    return f44;
}
class C45 extends f44 {
    #h = f44;
}
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    function f52() {
        return a48;
    }
    function F53() {
        if (!new.target) { throw 'must be called with new'; }
        this(19793);
        for (const v58 of 19793) {
        }
        new Int32Array(127);
        f52(...o41, 127);
    }
    new F53();
    this.caller;
    const v66 = a50?.f;
    try { new v66(4294967297, a51, a49, a49); } catch (e) {}
    const v68 = this.constructor;
    const v69 = `
        function f70() {
            return f70;
        }
    `;
    let v71;
    try { v71 = new v68(); } catch (e) {}
    v71.e = v71;
    typeof v71 === "symbol";
}
F46.prototype = F46;
const v75 = new F46(F46, F46, F46, F46);
const v76 = new F46();
try { v76.apply(v75, WeakSet); } catch (e) {}
