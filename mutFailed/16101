function f2(a3, a4) {
    try { a3.__lookupGetter__(a4); } catch (e) {}
    return a3;
}
for (let i9 = 0, i10 = 10;
    (() => {
        const v11 = i9 < i10;
        const t0 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
        t0[3] = i9;
        const v15 = new BigUint64Array(3375);
        let [v16,,v17,...v18] = v15;
        return v11;
    })();
    i9++) {
}
const v24 = f2(f2, f2);
const v25 = `
    try {
    const t0 = 0.9025600547658676;
    t0(0.9025600547658676, v24);
    } catch (e) {}
`;
const v28 = eval(v25);
const v30 = [];
try { v30.findLast(v30); } catch (e) {}
v30.length += 0.9025600547658676;
function F33() {
    if (!new.target) { throw 'must be called with new'; }
}
[-4294967297,-1,-268435456,256,268435440,4564];
([50388,-2138079749,1024,257,-2147483649,1306358365])?.__defineSetter__;
try {
const t0 = -1.7976931348623157e+308;
new t0(1.0, v28);
} catch (e) {}
[128,-536870912,32379,0,-2147483648];
const v41 = new Date();
class C45 {
    constructor(a47) {
        const v48 = this?.constructor;
        try { new v48(v41); } catch (e) {}
        for (let i = 0; i < 10; i++) {
            /[xyz{1,}(O)]/udis;
        }
    }
}
let v51;
try { v51 = new C45(C45); } catch (e) {}
new C45();
try { Math.expm1(F33); } catch (e) {}
-1.7976931348623157e+308 >> -359.60295377780096;
v51 >>> Math.exp(-359.60295377780096);
function f59(a60, a61, a62, a63) {
    function f65() {
        Math.asin(a60);
        return -359.60295377780096;
    }
    %PrepareFunctionForOptimization(f65);
    f65();
    %OptimizeFunctionOnNextCall(f65);
    a63();
    return arguments;
}
