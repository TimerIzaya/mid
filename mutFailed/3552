let v3 = 3815;
const v5 = new Int32Array(v3);
const v8 = new Uint8ClampedArray(-256);
try {
    v5.valueOf = 1773697693;
} catch(e10) {
}
try {
    v5.__proto__ = v5;
} catch(e11) {
}
const v13 = new BigUint64Array(1773697693, Uint8ClampedArray, -1000.0, v3);
let v14;
try { v14 = v13.every(v5, v13); } catch (e) {}
const v16 = [v14];
const v17 = v13.stack;
Reflect.apply(v17, v8, v16);
new Uint8ClampedArray(512);
let v24 = -2;
while (v24 < 5) {
    const v30 = v3--;
    const v31 = !-4096;
    const v32 = !-4096;
    -4096 && v30;
    Math.ceil(v32);
    -4096 << v31;
    v24++;
}
new Uint32Array(3846);
new Uint16Array(1572);
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    function f47() {
        Math.sqrt(-1024);
        +-1024;
        const v52 = ~-1024;
        Math.hypot(a44);
        v17 & Uint16Array;
        v17 + Uint16Array;
        Math.exp(v52);
        return this;
    }
    this.constructor = f47;
    const v57 = this.constructor;
    let v58;
    try { v58 = new v57(a44); } catch (e) {}
    typeof v58 === "symbol";
}
new F41(F41, F41, F41, F41);
new F41();
