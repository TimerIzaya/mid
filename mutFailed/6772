function f0() {
}
function f1() {
    f0[14];
    new BigUint64Array(1000);
    return f0;
}
f0.toString = f1;
function f6() {
    const o15 = {
        __proto__: f0,
        set b(a8) {
            const v9 = super[this];
            let v11;
            try { v11 = this.getPrototypeOf(a8, this, this, a8, RangeError); } catch (e) {}
            super[RangeError] = v11;
            const v12 = super[v9];
            let v13;
            try { v13 = v9.valueOf(v12, this, a8, f0, v12); } catch (e) {}
            v13 ^ f0;
        },
        ...f0,
        "c": f0,
        "a": f0,
        [f0]: f0,
    };
    return o15;
}
const v16 = f6();
f6();
const v18 = f6();
[v16,[v18,v16],v16,v18];
[f6,v16];
new Uint32Array(6);
new BigInt64Array(13);
new BigInt64Array(16);
function f31(a32, a33, a34, a35) {
    const o36 = {
    };
    return o36;
}
const v37 = f31(f31, f31, f31, f31);
const v40 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    function f50(a51) {
        return a46;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f50 });
    try { arguments.toString(); } catch (e) {}
    function f53() {
        const v55 = ("Vre")?.toLocaleUpperCase;
        try { new v55(); } catch (e) {}
        try { ("Vre").fixed(); } catch (e) {}
        let v59 = -268435456;
        v59--;
        -(v59 + v59);
        const o76 = {
            "c": -4294967297n,
            [522675525n](a64, a65) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v41,
            valueOf(a67, a68) {
            },
            "e": v59,
            "maxByteLength": -4294967295,
            "arguments": v40,
            ...v41,
            "type": "Vre",
            ..."Vre",
            valueOf(a70, a71) {
                return a70;
            },
            ..."Vre",
            4: "Vre",
            "c": v59,
            "type": "Vre",
            "type": "Vre",
            toString(a73, a74, a75) {
                return -4294967297n;
            },
            5: -4294967295,
            6: v59,
        };
        try { o76.valueOf(); } catch (e) {}
        return "Vre";
    }
    f53.length;
    f53();
    Int8Array.a = a45;
    Int8Array.a = Int8Array;
    const v81 = new Int8Array();
    try { v81.findIndex(v37); } catch (e) {}
    const v83 = v81.buffer;
    function f84(a85) {
        return a85;
    }
    v83.constructor = f84;
    const v87 = v83.slice(2147483648);
    %OptimizeFunctionOnNextCall(f53);
    try { ("find").strike(); } catch (e) {}
    const o90 = {
    };
    try {
        o90.e = a46;
    } catch(e91) {
    }
    try {
        const o92 = {
        };
        o92.g = o92;
        o92.e = a46;
        o92.g = -4294967297n;
    } catch(e93) {
    }
    try {
        let o94 = {
        };
        function f95(a96) {
            o94 = a96;
            return a96;
        }
        Object.defineProperty(o94, "g", { set: f95 });
        o94.e = a46;
        o94.g = -4294967297n;
    } catch(e97) {
    }
    try {
        const o98 = {
        };
        o98.e = o98;
        o98.e = a46;
        o98.g = -4294967297n;
        o98.c = v87;
    } catch(e99) {
    }
    let v100;
    try { v100 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
    v100 <= a47;
    return arguments;
}
for (let v102 = 0; v102 < 5; v102++) {
    f44();
}
%PrepareFunctionForOptimization(f44);
f44();
%OptimizeFunctionOnNextCall(f44);
f44();
