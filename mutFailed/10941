[];
const v1 = [1.0,0.6339643501541544,-1000.0,-950.4943978606937,-2.0];
[826.8333777649332,0.39434444543834435,-2.220446049250313e-16,9.475488162501676];
const v3 = [1.7976931348623157e+308,-538.1412516079947,-1000.0,0.16540017346425961,1000.0];
function f16() {
    let v17 = 1000000000000.0;
    v17--;
    function f22(a23, a24, a25, a26) {
        const v27 = a23.length;
        a23.BYTES_PER_ELEMENT = Uint8Array;
        let v28 = 3 | a24;
        v28++;
        const v30 = a23 / a23;
        const v31 = a24 >>> v28;
        f22(a23, v31, v31, v17, v31);
        try { v3.push(); } catch (e) {}
        new Uint16Array(256);
        new BigInt64Array(254);
        new Float32Array(958);
        v30 % v30;
        a24 < a23;
        const o48 = {
            n(a46, a47) {
                return v27;
            },
        };
        return a25;
    }
    for (let v49 = 0; v49 < 625; v49++) {
        v1[f22(Uint8Array)] >>>= v49;
        f16();
        %PrepareFunctionForOptimization(f16);
        f16();
        f16();
        %OptimizeMaglevOnNextCall(f16);
        f16();
    }
    class C56 {
        constructor(a58) {
            const v59 = v1.constructor;
            try { new v59(a58, f16); } catch (e) {}
            new Uint16Array(12, 12);
        }
    }
    const v62 = new Uint16Array();
    new C56(-4294967296);
    class C64 extends C56 {
        [v62];
    }
    new C64();
}
%PrepareFunctionForOptimization(f16);
f16();
%OptimizeFunctionOnNextCall(f16);
f16();
