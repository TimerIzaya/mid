const v4 = new Uint8Array(2, 2, 2);
const v6 = new Uint32Array();
function f7(a8, a9, a10, a11) {
    const o15 = {
        "b": a8,
        ...v4,
        n(a13, a14) {
            v6[a8] = v6;
        },
    };
    return v6;
}
new BigInt64Array(128);
for (let v18 = 0; v18 < 5; v18++) {
    function f19() {
        for (let [i23, i24] = (() => {
                [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
                return [0, 10];
            })();
            i23 < i23;
            ) {
        }
        return f19;
    }
    f19();
    %OptimizeFunctionOnNextCall(f19);
}
new BigUint64Array(3527);
new Int16Array(6);
function f36() {
    new Uint16Array(209);
}
class C40 extends f36 {
}
for (const v41 in C40) {
}
try { new DataView(240); } catch (e) {}
new Uint32Array();
new Int8Array(6);
const v54 = new BigInt64Array(4046);
function f55(a56, a57) {
    a56++;
    function F59(a61) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C62 extends F59 {
    }
    const v63 = new C62();
    v63.constructor;
    const o65 = {
    };
    for (const v66 in o65) {
    }
    let o67 = {
    };
    [,...o67] = v54;
    return 4046;
}
new Int8Array(1);
function f70() {
    const o74 = {
        toString(a72) {
            return [-2.0,-1000000.0,-Infinity,0.03714003700223023,-1.0];
        },
    };
    return o74;
}
const v76 = new BigUint64Array(1);
const v78 = [101.2980265931285,-1.7177856293756712e+307,-1000000.0,-8.49664044843577];
const o80 = {
    __proto__: v76,
    get d() {
    },
    9: f70,
    /*
    __proto__: v78,
    */
};
o80.includes(-1448847116);
