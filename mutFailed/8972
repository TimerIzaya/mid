function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -9223372036854775808;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new v4();
new F0();
new Date();
class C9 extends F0 {
    set f(a11) {
        const v12 = Date[a11];
        [Date,v4,F0,a11,this];
        const v14 = [v5];
        [v14,this,F0,v14,v12];
    }
    #n(a17, a18) {
        Object.defineProperty(v4, F0, { configurable: true, set: Date });
        [5.0,0.4425557334824355,0.6606627688902207,-1000.0,Infinity,-635945.260118832,-1.0,1.2781474432650513e+307,-914.9344360507996];
        [-3.0,3.0,4.692202192661714,3.0,-1000.0,-5.0,3.691589179148805e+307,-1000000000000.0,-118284.29510713322];
        [-1.0,0.11502989896302307,606.1889382368931,-0.0,-4.0,-10.235724963671146];
        return a18;
    }
    static f;
}
new C9();
const v23 = new C9();
const v24 = new C9();
class C25 extends F0 {
    e = v24;
    #valueOf(a27, a28, a29, a30) {
        const o31 = {
            __proto__: v23,
            "e": F0,
        };
        try {
            this.fuck("number", a29, F0);
        } catch(e34) {
        }
        return a30;
    }
    static #g;
}
new C25();
new C25();
const v37 = new C25();
new BigUint64Array();
const o49 = {
    [v24](a42, a43, a44) {
        class C46 {
            #d = 4096;
            static {
                this.#d;
            }
        }
    },
};
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    const v57 = /[a-zA-Z0-9]/gvisy;
    const v58 = /abc?/gvmy;
    v58[-2] ^= v57;
    v58.exec("Q8F");
    const v61 = new Int16Array();
    const v62 = v61.lastIndexOf(F51, a53);
    v62 ^ v62;
    try { new v55(this, a53); } catch (e) {}
    new Uint32Array(v37);
    for (let v68 = 0; v68 < 5; v68++) {
    }
}
const v69 = new F51();
const t75 = v69.constructor;
new t75();
