const v1 = new Map();
const v2 = [Map,Map,v1,Map];
const v3 = [v1,Map,v2];
const v4 = v3?.sort;
try { new v4(v2); } catch (e) {}
const v6 = [v2,v3,v3,Map,v1];
class C7 extends Map {
    static {
        let v9;
        try { v9 = this.call(v1); } catch (e) {}
        const v10 = this.prototype;
        function f11(a12) {
            const o14 = {
                get d() {
                },
            };
            return v9;
        }
        v10.valueOf = f11;
        try { v10.toString(v3); } catch (e) {}
        this.a = this;
        !(super[this[8]] > v1);
    }
    toString(a21) {
        function f22() {
            class C23 {
            }
            return C7;
        }
        this.constructor = f22;
        const v24 = this?.constructor;
        function f25(a26) {
            f22 & a21;
        }
        Object.defineProperty(v24, "a", { writable: true, configurable: true, set: f25 });
        try { new v24(); } catch (e) {}
        const v31 = Reflect.construct(Map, [this], Map);
        try { v31.set(v2, v31); } catch (e) {}
        return v31;
    }
}
C7.prototype = C7;
const v33 = new C7();
const v34 = new C7();
const v35 = new C7();
let v36;
try { v36 = v35.toString(v6); } catch (e) {}
let v37;
try { v37 = v36.clear(); } catch (e) {}
class C38 {
    p(a40, a41, a42) {
        try {
            v3.toString = a42;
        } catch(e43) {
        }
        return v34;
    }
    static #g;
    #a = v1;
    662950806;
    static #f;
}
function f44(a45) {
    return v2;
    function f47(a48, a49) {
        const o51 = {
            get h() {
                return a49;
            },
            [a49]: 4,
            2778757984: a48,
            "h": 4,
        };
        return 4;
    }
    return v37;
}
C38.toString = f44;
try { C38.toString(); } catch (e) {}
let v53;
try { v53 = new C38(); } catch (e) {}
function f54(a55) {
    function F56(a58, a59) {
        if (!new.target) { throw 'must be called with new'; }
        try { a58.valueOf(); } catch (e) {}
        const v61 = this.constructor;
        try { new v61(a58); } catch (e) {}
    }
    return v3;
}
Object.defineProperty(v53, Symbol.toPrimitive, { writable: true, value: f54 });
const v65 = new C38();
const v66 = new C38();
v66[662950806] = v66;
const v67 = new C38();
v67[662950806] = v67;
let v69 = Int16Array;
function f70() {
    return f44;
}
function f71(a72) {
    try { a72(a72); } catch (e) {}
}
Object.defineProperty(v69, Symbol.toPrimitive, { enumerable: true, get: f70, set: f71 });
v69.g = v69;
try { new v69(v3, v33, v69); } catch (e) {}
let v77;
try { v77 = new v69(Map, Map, v66); } catch (e) {}
try { v77.findLastIndex(v77); } catch (e) {}
const v79 = v77?.entries;
Object.defineProperty(v79, "constructor", { writable: true, configurable: true, value: f70 });
const v80 = v79?.constructor;
try { new v80(v53); } catch (e) {}
try { new v79(); } catch (e) {}
function f83() {
    const v84 = v69--;
    const v86 = ~-4294967296;
    v86 >> v86;
    class C88 {
        static #m(a90) {
        }
        set d(a92) {
            this.#m();
        }
        constructor(a95) {
            const v96 = this?.__lookupSetter__;
            try { new v96(v36); } catch (e) {}
            a95--;
            function f99() {
                return f99;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f99 });
        }
    }
    function f100(a101, a102) {
        [-1000000000000.0,9.976922079719028,-1000000.0,-9.833294134064303,0.16398151120536086,-2.2250738585072014e-308,Infinity,1.1438712209590895e+306,-2.220446049250313e-16];
        [-8.608239460022709,0.0,1.4822199620984804e+308,471318.6760226311,-0.0,9.16825143785417,-1000000000.0,0.755981319141775,-60553.852179763024];
        [-513.3619165683783,0.6766549571347031,814.6323380882411];
        return -4294967296;
    }
    C88.constructor = f100;
    try { C88.bind(v84); } catch (e) {}
    const v107 = C88?.constructor;
    function f108(a109) {
        f100(v34, v37);
        %PrepareFunctionForOptimization(f100);
        f100(v34, v37);
        f100(v34, v37);
        %OptimizeMaglevOnNextCall(f100);
        f100(v34, v37);
        return Symbol;
    }
    v107.valueOf = f108;
    let v114;
    try { v114 = v107.bind(C88); } catch (e) {}
    try { new v114(v35); } catch (e) {}
    try { new v107(v65); } catch (e) {}
    const v117 = new C88(-4294967296);
    Object.defineProperty(v117, "g", { configurable: true, enumerable: true, value: v86 });
    v117.g = v117;
    const v118 = new C88("string");
    const v119 = v118?.constructor;
    v119.prototype = v119;
    try { new v119(v35); } catch (e) {}
    const v121 = v118?.length;
    v121[Symbol.toPrimitive] = f108;
    try { v121(); } catch (e) {}
    try { v121.apply(C88, v1); } catch (e) {}
    let v126;
    try { v126 = new v121(); } catch (e) {}
    try { v126(); } catch (e) {}
    v118.length = -4294967296;
    const v128 = v118.length;
    let v129;
    try { v129 = v128.bind(v3); } catch (e) {}
    v129.length = v129;
    let v130 = 0;
    v130--;
    while ((() => {
            let v132 = 10;
            const v133 = v132 == v132;
            v133 || v133;
            v132--;
            const v136 = v130 < v132;
            v136 && v136;
            !v136;
            return v136;
        })()) {
        for (let v139 = 0; v139 < 5; v139++) {
            v139 / v139;
            const v142 = "p" + v139;
            try { v142.normalize(); } catch (e) {}
            let v144;
            try { v144 = v142.blink(); } catch (e) {}
            try { v144.link(v86); } catch (e) {}
            let v146;
            try { v146 = v144.anchor(v121); } catch (e) {}
            try { v146.italics(); } catch (e) {}
            const t198 = "string";
            t198[v142] = v139;
        }
        let v148 = v130++;
        let v149 = v148--;
        v149++;
    }
    const v151 = new C88();
    const v152 = v151?.constructor;
    try { new v152(v114); } catch (e) {}
    const v154 = [v151,v151,v151,v151,v151];
    const v155 = [v151];
    class C156 extends C88 {
        [v117];
        #n(a158, a159, a160, a161) {
        }
        #g;
    }
    try { C156(); } catch (e) {}
    const v163 = new C156();
    try { v163.length(); } catch (e) {}
    const v165 = v155.constructor;
    try { new v165(v163); } catch (e) {}
    try { v163.m(v154); } catch (e) {}
    return v118;
}
const v168 = f83?.apply;
try { new v168(v33, v6); } catch (e) {}
%PrepareFunctionForOptimization(f83);
f83();
%OptimizeFunctionOnNextCall(f83);
f83();
