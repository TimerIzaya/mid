const v1 = [65536,2147483649];
[-63127,9,255,-4294967297,1000,1024,13,-9223372036854775807,55756];
const v3 = [12,4];
const v4 = [-165479.2381612704,0.46671932276246775,NaN,4.845099402761568e+307,2.0,-189.05176846186373];
function f5() {
    function f6() {
        const o7 = {
            "d": null,
        };
        return o7;
        return v1;
    }
    return f6;
}
Object.defineProperty(v4, "valueOf", { writable: true, enumerable: true, get: f5 });
const v8 = [-382853.1602297303,-1000000.0];
v8.constructor = f5;
[Infinity,2.2250738585072014e-308,-1.0,1000000.0,2.0,0.0,-4.475266135491813e+307,-2.220446049250313e-16,-1000000000000.0];
function f10() {
    return v3;
}
const v12 = [[v3,null,v4],null,v3];
try { v12.lastIndexOf(v12); } catch (e) {}
const v14 = [v12,v12,v12,f10];
try { v14.findLastIndex(v12); } catch (e) {}
-7631 >> -7631;
const v20 = [1000000000.0,-1000.0];
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    this.length = a23;
    const v25 = this?.__lookupGetter__;
    try { new v25(129); } catch (e) {}
    const v27 = v8.constructor;
    try { v27.isArray(v20); } catch (e) {}
    try { new this(); } catch (e) {}
    a23--;
    a23 & a23;
}
try { new F21(v4, v1); } catch (e) {}
new F21();
const v34 = new F21();
v34.length = v34;
