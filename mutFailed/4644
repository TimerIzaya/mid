const v0 = [-4.0,0.6786294163906904,579.8917268429564,-334337.5834582967,0.990913025073909,350663.56450922205,-6.088526819180667e+307,-1000.0];
const v1 = [Infinity,597146.6312498383,-5.0,0.5618337555902855,-2.220446049250313e-16,-1000000.0,-1.0,-840.5661085608565,-1000000000.0,-2.220446049250313e-16];
const v2 = [-7.527394212091078,-8.187813256309317];
const v4 = new WeakSet();
const v7 = new Float64Array(2);
function f8(a9, a10) {
    const o11 = {
    };
    try {
        o11.a = a10;
    } catch(e12) {
    }
    try {
        const o13 = {
        };
        o13.a = a10;
        o13.e = v4;
    } catch(e14) {
    }
    try {
        const o15 = {
        };
        o15.a = a10;
        o15.e = v4;
        o15.c = a10;
    } catch(e16) {
    }
    try {
        const o17 = {
        };
        o17.a = a10;
        o17.e = v4;
        o17.d = v1;
    } catch(e18) {
    }
    return a9;
}
v7[Symbol.toPrimitive] = f8;
v7[1] = v7;
let v22 = typeof 7;
v22 === "function";
const v27 = new Array(257);
let v28;
try { v28 = v27.reduce(257); } catch (e) {}
const v30 = Array(7);
Object.defineProperty(v30, 5, { writable: true, enumerable: true, value: v0 });
let v31;
try { v31 = v30.findLast(v7); } catch (e) {}
for (const v32 of v30) {
    const v34 = Math.cbrt();
    Number.isNaN(v34);
    v34 % v34;
}
new Float64Array(7, v0, v4, Float64Array);
257 - 257;
Int16Array.a = v28;
Int16Array.a = Int16Array;
const v43 = Float64Array === Int16Array;
v43 && v43;
v22 >>= "function";
const v45 = v2 ** v0;
v45 - v45;
try {
    v1.toString = Array;
} catch(e47) {
}
const v48 = new Int16Array(257);
class C49 {
}
C49.e = C49;
const v50 = new C49(v48);
const v53 = new Int16Array(C49, Int16Array);
class C58 {
    constructor(a60, a61, a62) {
        this[Symbol.toPrimitive] = Array;
        a60.toString = Symbol;
        a61[3] = v31;
        const v65 = a60?.__defineGetter__;
        try { new v65(a62, Int8Array); } catch (e) {}
        function f67(a68, a69) {
            return a68;
        }
        this[Symbol.toPrimitive] = f67;
        a61[3] = v50;
        for (let v72 = 0; v72 < 25; v72++) {
            ("replace")[2];
            "replace" >>> 0;
            const v76 = delete v0[this];
            v76 && v76;
            super[v72] = new.target;
            const o82 = {
                "execution": "async",
                "type": "minor",
            };
            const v83 = gc(o82);
            try { v83.then(new.target, o82); } catch (e) {}
        }
    }
}
new C58(v50, v53);
const v86 = new C58(Int8Array, DataView);
const v87 = v86?.__defineGetter__;
try { new v87(v0, v2); } catch (e) {}
const v89 = new C58(v86, C49, v0, 257);
v89[23] = v89;
