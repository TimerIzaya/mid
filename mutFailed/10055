[];
const v6 = new Int16Array(573);
new Uint32Array(2);
new Int16Array(9);
Array.prototype;
const v35 = [];
class C36 {
}
const v37 = new C36();
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a41;
}
const v42 = new F38(v37, v35);
function f43(a44, a45) {
}
const v48 = [v42];
const o49 = {
    "arguments": v48,
    "type": "function",
};
new Int16Array(f43, o49);
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
new Uint16Array();
const t24 = -33478;
const v68 = new t24();
try { v68.filter(); } catch (e) {}
try {
const t0 = 4294967295;
t0();
} catch (e) {}
new Uint8ClampedArray();
const o85 = {
    m() {
        for (let v78 = 0; v78 < 10; v78++) {
            v78 < 10;
        }
    },
};
try { Int32Array(); } catch (e) {}
new Int32Array();
function F89(a91, a92, a93) {
    if (!new.target) { throw 'must be called with new'; }
    const v94 = this.constructor;
    try { new v94(Uint16Array, a93, a93); } catch (e) {}
    a91 * a91;
    Int16Array.d = a91;
}
new F89(F89, v6);
class C99 {
}
const v102 = new Uint32Array(186);
Float64Array > v102;
