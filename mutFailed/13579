const v0 = [-268435456,-346130565,10,9,1073741824,-1,257,9007199254740990,65535,-320203475];
const v1 = [25987280,1128038264,536870889,2,2147483649];
const v2 = [4294967296,-2147483648,2147483648];
const v3 = [v1,v0];
const v4 = [v3,v1,v3,v0];
const v5 = async (a6, a7) => {
    'use strict';
    try { a6(a6, v0); } catch (e) {}
    return await a6;
};
try { v4.groupToMap(v1); } catch (e) {}
[v4,v0,v4];
const v14 = -1073741824 + -1073741824;
class C17 {
    380754742;
    static #m(a19, a20, a21, a22) {
        Object.defineProperty(v0, a19, { configurable: true, enumerable: true, set: v5 });
        let v23;
        try { v23 = new a21(...v2, ...v0, ...a20, undefined, a19); } catch (e) {}
        super.a;
        this[98] = -1073741824;
        delete v23?.h;
        let v26;
        try {
        const t0 = 9;
        v26 = new t0(a19, a21, a20, v0, a22);
        } catch (e) {}
        new Uint16Array(1723);
        new v26(1000);
        const v35 = new Uint8Array(3240);
        return v35;
    }
}
new C17();
const v37 = new C17();
v37[380754742];
new C17();
C17.length;
new Uint8Array(268435440);
const o50 = {
    "execution": "async",
    "type": "minor",
};
gc(o50);
Uint8ClampedArray.prototype = Uint8ClampedArray;
new Uint8ClampedArray(v14);
