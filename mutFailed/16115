const v0 = [];
function f13(a14, a15, a16, a17) {
    const o30 = {
        "f": v0,
        "a": a17,
        "d": 1000000000000.0,
        [v0](a19, a20, a21, a22) {
            let v18 = this;
            Math.sign(v18);
            v18 || 9;
            9 * (9 && ++v18);
            return a15;
        },
        13: a14,
    };
    new a14(-1073741824, -268435456, -1073741824, -1073741824, ...a15);
    new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return o30;
}
f13(-536870912n, 9.24323499442497, 9.24323499442497, -55104n);
f13(127n, 9.24323499442497, 1000000000000.0, -55104n);
f13(127n, v0, f13, -536870912n);
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v43 = 0; v43 < 5; v43++) {
    }
    const v44 = this.constructor;
    const t26 = "9007199254740992";
    t26["255"] &= 7;
    ("iterator").hasOwnProperty(v0);
    [-4294967296];
    Math.sinh(-3.3474037991793697);
    const v57 = new Float32Array(2);
    v57[1] = v57;
    try { new v44(); } catch (e) {}
}
new F39();
