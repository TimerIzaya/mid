new WeakSet();
class C2 extends WeakSet {
    #e;
    get h() {
        const v6 = new Uint32Array(1000);
        new Float32Array(4096);
        new Uint32Array(4096);
        return v6;
    }
}
new C2();
new C2();
const v15 = new C2();
const v16 = v15?.constructor;
try { new v16(); } catch (e) {}
let v19 = 1000;
const v20 = /(J5a{0,1}?)/y;
const v21 = [601759695];
const v22 = [1073741824,1073741823,1376142744,1073741825];
function f23(a24, a25, a26, a27) {
    ~a25;
    try { a24(); } catch (e) {}
    const v30 = a26 << a26;
    v30 % v30;
    function f32() {
    }
    const v34 = new Int8Array();
    BigUint64Array.length;
    const v38 = BigUint64Array * 536870887;
    let v39 = v38 - v38;
    v39++;
    v38 ** v38;
    try { Number(v20); } catch (e) {}
    const v45 = v34.buffer.__defineGetter__;
    try { v45(); } catch (e) {}
    try { v22["find"](..."find", a27, ...v21); } catch (e) {}
}
v19++;
new Array(v19);
class C54 {
    constructor(a56, a57, a58, a59) {
        this[Symbol.toPrimitive] = Array;
        this.constructor = Array;
        const v62 = this.constructor;
        class C63 {
        }
        function f66() {
            return f23;
        }
        Object.defineProperty(Uint8ClampedArray, "toString", { writable: true, configurable: true, get: f66 });
        const v67 = new Uint8ClampedArray(129);
        const v70 = new Int32Array(1450);
        class C71 {
            [Uint8ClampedArray] = v70;
            static valueOf(a73, a74, a75) {
                new a75();
            }
            static a = v67;
        }
        const v77 = new C71();
        v77[2147483647] = v77;
        this.toString = Array;
        v77[2147483647] = v70 << this;
        try { new v62(); } catch (e) {}
        const v82 = [a58,a58];
        function f83(a84, a85) {
            const v86 = [];
            function F88(a90, a91) {
                if (!new.target) { throw 'must be called with new'; }
                const v92 = this?.constructor;
                try { new v92(); } catch (e) {}
                this.c = Map;
                try {
                    this.e = v86;
                } catch(e94) {
                }
                try {
                    this.a = a90;
                } catch(e95) {
                }
                const v98 = new Int32Array(9);
                v98.reverse();
            }
            new F88();
            return C54;
        }
        Object.defineProperty(v82, Symbol.toPrimitive, { writable: true, value: f83 });
        const v103 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v105 = new Uint32Array();
        let v106 = -4294967297n;
        const v107 = v106--;
        const v108 = [601759695];
        function f109() {
            ("Vre").charAt();
            let v112;
            try { v112 = ("Vre").codePointAt(); } catch (e) {}
            let v113 = Float64Array;
            v113 = a59;
            let v114 = v103.length;
            v114++;
            const o134 = {
                "c": v106,
                "a": v112,
                [v107](a117, a118) {
                },
                [v107](a120, a121, a122, a123) {
                    eval();
                },
                "c": v108,
                valueOf(a127, a128) {
                },
                1073741824: v105,
                [v106](a130, a131, a132, a133) {
                },
                "arguments": 1450,
                256: WeakSet,
            };
        }
        v82.valueOf = Array;
        Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,v82]);
    }
}
new C54();
