Int16Array.length;
let v6;
try { v6 = Int16Array.of(); } catch (e) {}
let v7 = v6?.constructor;
let v8;
try { v8 = new v7(-22076n, v6, Int16Array); } catch (e) {}
const v9 = new Int16Array(64);
let v11 = v8?.[Int16Array];
let v12;
try { v12 = v9.map(v8, v8); } catch (e) {}
v7 |= v12;
v12 = v8;
65537n % v11;
const v15 = new Int8Array(1513);
v15[104];
v9["set"]("set", 1513);
v12--;
try {
    v15.byteLength = v12;
} catch(e20) {
}
4096 / 4096;
v11 = v15;
v15[7];
try { new BigUint64Array(BigUint64Array, 1073741823n, -22076n); } catch (e) {}
new BigUint64Array(4096);
try { ("multiline").sup(); } catch (e) {}
const v33 = ("cause")?.blink;
try { new v33(); } catch (e) {}
-parseInt("0");
