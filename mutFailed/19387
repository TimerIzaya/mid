function f0() {
}
function f7(a8, a9, a10) {
    const o20 = {
        "e": "asyncIterator",
        268435441: "throw",
        [f0](a12, a13, a14, a15) {
            a13.length += -1061141676;
            f0();
            %PrepareFunctionForOptimization(f0);
            f0();
            f0();
            %OptimizeMaglevOnNextCall(f0);
            f7();
            return a14;
        },
    };
    return a10;
}
const v21 = f7(-1061141676, -1061141676, "throw");
f7(v21, v21, v21);
f7(-9223372036854775807, "asyncIterator", "throw");
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    function F26(a28, a29, a30) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F26();
    new v21();
    const v33 = [];
    const v35 = Array();
    Object.defineProperty(v35, 83, { configurable: true, enumerable: true, value: v33 });
    for (let v36 = 0; v36 < 5; v36++) {
        let v41;
        try {
        const t0 = 10000n;
        v41 = t0(2n, -536870912n);
        } catch (e) {}
        const v43 = [v41,v41,v41];
        v43.length &= v41;
        const v44 = delete v43[67];
        const v47 = new Uint32Array(16);
        function f48(a49, a50) {
            const o51 = {
            };
            o51.e = f48;
            o51.b = a50;
            const o52 = {
            };
            o52.b = a50;
            o52.c = v35;
            const o53 = {
            };
            o53.e = f48;
            a50.b = a50;
            o53.d = v47;
            function f55(a56) {
                return v44;
            }
            this.onmessage = f55;
            v47.length = -1061141676;
        }
        const v58 = new Int32Array(180);
        const v59 = v21.constructor;
        try { new v59(); } catch (e) {}
        Date.toString(Date, Date, Date, Date);
        async function* f63(a64, a65) {
            return Date;
        }
        const v66 = f63(f63, Date);
        const o67 = {
            [v43]: v66,
        };
        v58.includes(v36);
    }
}
new F24();
for (let i72 = 0, i73 = 10;
    (() => {
        try {
            const o75 = {
            };
            o75.e = 1261703539;
            o75.g = v21;
        } catch(e76) {
        }
        return i72 < i73;
    })();
    i73--) {
}
