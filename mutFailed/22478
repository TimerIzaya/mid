new Array(5);
const v6 = [1000000000000.0,-1.7046098771430185e+307,0.6239393710080172,1e-15,0.22675545921139684,2.0607096715873656e+306,-712615.7381381231,-6.677428180832691e+307,-4.0,-0.0];
[-975.9996150395629,-559552.4830943872,-3.0,-478.1755295141377,1000.0,-1000000.0,-1000000000000.0,0.0];
const v8 = [69459.27389863809,5.128758453853816e+307,-6.229211905171315e+307,0.6262322625256446,692.4760468869576,-1.7976931348623157e+308,145.26720891327,1000000000.0];
class C9 extends Array {
    f = v6;
    static #b;
    static #h = "source";
    set d(a11) {
        new Uint8Array(3521);
        let v15 = 852.2904873570058;
        const o20 = {
            m(a17, a18) {
                return v15++;
            },
        };
        return o20;
        try {
            this.#h %= v8;
        } catch(e21) {
        }
        super.entries();
    }
    constructor(a24, a25) {
        let v26 = 10;
        for (let i = 0; i < 5; i++) {
            const v27 = v26--;
            function f28(a29, a30, a31, a32) {
                const v34 = new Int16Array();
                async function f36(a37, a38, a39) {
                    for (const v40 of a24) {
                        -740089575 ^ v26;
                    }
                    await v34[1];
                }
                f36().finally(Uint8Array);
                return v27;
            }
            for (let v47 = 0; v47 < 5; v47++) {
                f28();
            }
            %OptimizeFunctionOnNextCall(f28);
        }
    }
    static {
        Boolean <= this ? Boolean : this;
        try {
            Array.prototype = this;
        } catch(e53) {
        }
    }
}
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    function f60() {
        return ("Vre").constructor.raw();
    }
    try { f60(); } catch (e) {}
}
new C9();
new C9();
new C9();
function f68() {
    let [,v70,...v71] = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
    class C72 {
    }
    return C72;
    return "source";
}
[215937755,-1111292601,536870912,-14,7,-1024,32016,-22761071,-1];
[-63434,10000,256,-1073741824,4294967295];
[-139765198,257,-4294967297];
function f76() {
    const o85 = {
        ["1073741824"]: 268435441,
        874720287: 268435441,
        get d() {
            try { this.m(268435441, this, this); } catch (e) {}
            const o82 = {
            };
            return Proxy("1073741824", o82);
        },
        ["species"]: "1073741824",
    };
    return o85;
}
const v86 = f76(f76);
const v87 = f76();
const v88 = f76();
v88[1073741824] = v88;
function F89(a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    const v93 = this?.constructor;
    try { new v93(a91, v86); } catch (e) {}
    a91[1073741824] = a91;
    try {
        this.g = a92;
    } catch(e95) {
    }
}
F89.length;
const v97 = new F89(v88, v86);
const o98 = {
};
function f99() {
    return f99;
}
const v100 = f99();
for (let v101 = 0; v101 < 5; v101++) {
    try { ("p").indexOf(v100); } catch (e) {}
    try { ("p").fontcolor(v101); } catch (e) {}
    "p" + v101;
}
const v106 = new F89(v88, v87);
const v107 = new F89(v86, v87);
function f108(a109, a110, a111) {
    a111.g = a111;
    const o117 = {
        "a": a110,
        get e() {
            v88 & this;
            return (a110 == a110 ? a110 : a110)[15];
        },
        ...a111,
        "c": v106,
        "f": v107,
    };
    return o117;
}
const v118 = f108(v97, v97, v106);
v118.c = v118;
f108(v97, v107, v107, v118, f76, v118);
f108(v106, v97, v97);
58091 >> 58091;
const v126 = new Uint8ClampedArray();
const o127 = {
    ...v126,
};
Uint8ClampedArray.length;
try { Uint16Array.from(v106); } catch (e) {}
const v137 = new Uint16Array();
try { v137.entries(); } catch (e) {}
try { ("minor").anchor(v97); } catch (e) {}
const o144 = {
    "type": "minor",
};
gc(o144);
Array(228);
class C147 {
}
const v148 = new C147();
const v149 = v148?.constructor;
try { new v149(); } catch (e) {}
const v151 = new C147();
const v152 = v151?.constructor;
try { new v152(); } catch (e) {}
new Float64Array(Float64Array, Float64Array, gc);
Float32Array.e = Float32Array;
new Uint8Array(6);
function F165() {
    if (!new.target) { throw 'must be called with new'; }
}
class C167 {
}
const v168 = new C167();
ReferenceError.captureStackTrace(F165, v168);
const v171 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
gc.caller = gc;
v171["findIndex"](gc);
