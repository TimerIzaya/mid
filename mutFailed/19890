class C3 {
    d = 268435441;
    #a = -909.245311516011;
    set a(a5) {
        try {
            this.h = 268435441;
        } catch(e6) {
        }
    }
    e;
    #b;
    #n(a8, a9) {
    }
    static {
        for (let v11 = 0; v11 < 25; v11++) {
            const v12 = [1073741824,1073741823,1376142744,1073741825];
            function f13(a14, a15, a16, a17) {
                function f19() {
                }
                try { f19.constructor(this); } catch (e) {}
                const v22 = new Int8Array();
                let v23 = 4;
                v23++;
                let v25 = 0;
                v25 < 5;
                function f28() {
                }
                const o29 = {
                };
                try {
                    const o30 = {
                    };
                    o30.a = v12;
                } catch(e31) {
                }
                const o32 = {
                };
                v25++;
                new Uint32Array(v23);
                function f36(a37, a38) {
                }
                f36();
                v22.buffer;
                %OptimizeFunctionOnNextCall(f19);
                const o44 = {
                    n(a42, a43) {
                    },
                };
                return arguments;
            }
            for (let v45 = 0; v45 < 5; v45++) {
                f13();
            }
        }
    }
}
const v47 = new C3();
const t57 = 0.7700346222151663;
const v48 = new t57();
const v49 = new C3();
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    const o56 = {
    };
    const o57 = {
    };
    const t66 = 0.7700346222151663;
    const v59 = new t66();
    const t68 = [65535,9223372036854775807,2101773358,536870888,536870912,7];
    t68.__proto__ = v59;
    try {
        this.a = a54;
    } catch(e61) {
    }
    try {
        this.c = 0.7700346222151663;
    } catch(e62) {
        ("string")[3];
        Array(2433);
    }
    try {
        this.d = 268435441;
    } catch(e68) {
        const v70 = new BigUint64Array();
        function F71() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                let v73 = 0;
                for (let i = 0; i < 5; i++) {
                    v70.entries();
                    const v75 = v73++;
                    v75 + v75;
                    v75 ^ v75;
                    const v79 = v73 < 5;
                    v79 || v79;
                }
                new F71();
            } catch(e82) {
            }
        }
    }
}
new F50(v49, 0.7700346222151663, v48, F50);
new F50(v48, F50, C3, 0.7700346222151663);
new F50(v47, v48, v47, -909.245311516011);
const v86 = [723.7929036737096,-1.7976931348623157e+308,-600.8221434718189,300.34554048893665,-1.0,3.0,0.3604916805537314,1000.0];
function f88(a89, a90) {
    v86.length %= 2136873598;
    return a89;
}
%PrepareFunctionForOptimization(268435441);
const v91 = f88(2136873598, 2136873598);
%OptimizeFunctionOnNextCall(f88);
f88(v91, v86);
