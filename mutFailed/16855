Uint8ClampedArray.prototype = Uint8ClampedArray;
new Uint8ClampedArray(121);
new Int16Array(4071);
new BigInt64Array(2217);
const v12 = [65536];
try { v12.findIndex(Uint8ClampedArray); } catch (e) {}
const v14 = [-694,-6,1073741824,-14,3,11,3,-7,5,-1214514770];
const v15 = [1073741824,-7,-1283755539,-726309105,10,13,-4294967295,12,512,40630];
const v16 = [];
function f17() {
    const t10 = 2217;
    t10[7] = BigInt64Array;
    const v19 = Symbol.toPrimitive;
    v14[v19] = v19;
    return v14;
}
v16[Symbol.toPrimitive] = f17;
function f22() {
    -v16;
    return f22;
}
class C24 {
    static {
        this.e = v14;
        this.e = this;
        const o26 = {
        };
        o26.get = f22;
        const v28 = new Proxy(this, o26);
        try { new v28(); } catch (e) {}
    }
    p(a31, a32) {
        let v33;
        try { v33 = new this(a32, this, a31); } catch (e) {}
        super.g = v14;
        return Reflect.construct(v33, [v14,v15], v33);
    }
    a;
}
const v37 = new C24();
v37.a = v37;
const v38 = new C24();
Object.defineProperty(v38, "toString", { value: Symbol });
const v39 = new C24();
const v40 = [-2.9700017742911022,795135.542646985,938.533418121023,-974148.680744386,-1.7976931348623157e+308,-300.6481185564369];
const v41 = [483707.38277358306];
function f42() {
    class C44 {
        toString(a46, a47) {
            class C48 {
                constructor(a50) {
                    for (let v51 = 0; v51 < 32; v51++) {
                        for (let v52 = 0; v52 < 5; v52++) {
                        }
                        const v53 = this.p16;
                        try { a50(C44, a46, v53, v53, v51); } catch (e) {}
                    }
                }
            }
            new C48(this);
            const v56 = new C48(C44);
            new C48(v56);
        }
    }
    const v58 = new C44();
    function f59(a60, a61, a62, a63) {
        const o64 = {
            [v58]: a61,
        };
        return C44;
    }
    return 4071;
}
v41[Symbol.toPrimitive] = f42;
const v67 = [2.220446049250313e-16,-Infinity,1.278332587799012,711290.6941419018,0.0,-Infinity,-1000.0,2.2250738585072014e-308];
const v68 = [v39,v15,v38];
function f69(a70) {
    new Int8Array(4);
    new BigInt64Array(161);
    const v79 = new Uint16Array(3);
    return v79;
}
Object.defineProperty(v68, "toString", { writable: true, enumerable: true, value: f69 });
v68[2] = v68;
[v67];
const v81 = [v67,v41,v68,v38,v39];
function f82(a83, a84) {
    const o87 = {
        "maxByteLength": 4096,
    };
    const v89 = new SharedArrayBuffer(4096, o87);
    new Uint8ClampedArray(v89);
    return v37;
}
v81.valueOf = f82;
~2147483648;
65535 % 65535;
function f96() {
    const v97 = 121 != 121;
    if (v97) {
        %VerifyType(v97);
    } else {
        f22();
        const v100 = [v37,2147483648];
        const v101 = v100?.flatMap;
        try { new v101(v100); } catch (e) {}
        Reflect.construct(BigInt64Array, v100, C24);
    }
    1261703539 >>> 1261703539;
    class C107 {
    }
    127 >> 127;
    try { new Float64Array(48385, 48385, 65535); } catch (e) {}
    const v112 = `
        try {
            new Float64Array(127);
        } catch(e114) {
        }
    `;
    let v115 = -65535;
    v115 * v115;
    v115 * v115;
    const v118 = v115 / v115;
    const o217 = {
        __proto__: 352326470,
        next() {
            v115--;
            const v122 = v115 == 0;
            const o123 = {
                "done": v122,
                "value": v115,
            };
            return o123;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v115,
        m(a125) {
            a125.h = v15;
            try { a125.m(48385); } catch (e) {}
            a125.h = a125;
            const o127 = {
            };
            Object.defineProperty(o127, "e", { configurable: true, value: v39 });
            function f128(a129, a130, a131) {
                function f133(a134) {
                    a130[5] ||= f96;
                }
                this.onmessage = f133;
                const v137 = new SharedArrayBuffer(35);
                new BigUint64Array(v137);
            }
            f128.e = f128;
            try {
                o127.e = v115;
            } catch(e140) {
                const v144 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v144, o127);
            }
            +2147483648;
            function f147() {
                const v149 = ([f147]).constructor;
                class C150 extends v149 {
                }
                const v151 = new C150();
                return v151.reverse().findIndex(v149);
            }
            %OptimizeFunctionOnNextCall(f147);
            try {
                const o154 = {
                };
                o154.e = f22;
                o154.e = 1261703539;
                function F155() {
                    if (!new.target) { throw 'must be called with new'; }
                    function f157(a158) {
                        new F155();
                    }
                    Object.defineProperty(this, "a", { set: f157 });
                    1191742690 > 1191742690;
                    try {
                        this.a = 1191742690;
                    } catch(e162) {
                    }
                }
                o154.g = a125;
            } catch(e163) {
            }
            const v166 = -9007199254740991 >> -9007199254740991;
            v166 - v166;
            Math.sin(-9007199254740991);
            try { ("EV").localeCompare("EV"); } catch (e) {}
            class C172 {
                o(a174, a175, a176, a177) {
                    delete this[a177];
                    const v180 = v118;
                    v40[2921] /= v166;
                    Reflect.construct(C24, [], f96);
                    class C184 {
                        static 44 = "EV";
                    }
                    new C184();
                    new C184();
                    new C184();
                    return 0;
                }
            }
            new C172();
            new Int8Array(3938);
            let v192 = 3;
            v192 >>> v192;
            v192++;
            const v196 = 0 >> 0;
            for (let i = 0; i < 5; i++) {
                !(0 < 8);
            }
            const o204 = {
                "type": "EV",
                set b(a201) {
                },
                o(a203) {
                    return 65536;
                },
            };
            o204.type;
            o204.e = 1261703539;
            try {
                const o206 = {
                };
                o206.e = o206;
                o206.e = o206;
            } catch(e207) {
                function F208(a210, a211, a212, a213) {
                    if (!new.target) { throw 'must be called with new'; }
                    a210.propertyIsEnumerable();
                }
                -3 ^ v196;
            }
        },
    };
    Object.defineProperty(o217, "h", { enumerable: true, value: 127 });
    const o218 = {
        [v68]: v68,
    };
    function f219() {
        const o223 = {
            ...1.0,
            set b(a222) {
            },
        };
        return o223;
    }
    try { o217.m(o217); } catch (e) {}
    class C226 {
    }
    const v227 = new C226();
    v227[Symbol.iterator] = f69;
    const v230 = v227?.constructor;
    try { new v230(); } catch (e) {}
    const v233 = new Float32Array(v227, "nt", Float32Array);
    const t262 = "nt";
    const v234 = delete t262[v233];
    let v235;
    try { v235 = v227.floor(v234); } catch (e) {}
    for (const v236 in v235) {
    }
}
f96();
f96();
function f239(a240, a241, a242, a243) {
}
function f244(a245, a246) {
    const o249 = {
        set b(a248) {
        },
    };
}
function F250(a252, a253, a254) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    class C255 {
    }
    try { Math.trunc(v81); } catch (e) {}
    const v259 = Math.cos(-197199362);
    v259 >>> v259;
} catch(e261) {
}
function F262(a264) {
    if (!new.target) { throw 'must be called with new'; }
}
