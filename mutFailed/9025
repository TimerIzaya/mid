Object.defineProperty(Date, "toString", { configurable: true, enumerable: true, value: Date });
const v1 = new Date();
const v2 = [-2147483648,256,-9223372036854775807,10,17738,10,-9007199254740992,536870889,443575981];
const v3 = [1,9,-9007199254740990,-26427,-15,-7020,129009932,-9007199254740992,8];
const v4 = [4294967295,268435441,512,-4294967296,-9753,-56711,-39754];
class C6 {
    #d = v2;
    [v3];
}
new C6();
new C6();
new C6();
v4[Date] = Date(6);
const o14 = {
    "execution": "sync",
    "type": "major",
};
gc(o14);
const v20 = new Float32Array(105);
const v23 = new Float32Array(1000);
const v26 = new Float32Array(10);
const v28 = new BigUint64Array();
for (const v29 of v28) {
}
for (let i = 0; i < 5; i++) {
    const o31 = {
    };
    o31.type = o31;
    gc(o31);
    for (let i34 = 0; i34 < 10; i34++) {
        v26[2] = o31;
        v1.__proto__;
    }
    class C45 {
        constructor(a47, a48) {
            a47?.h;
            super.g;
            const v51 = this.constructor;
            try { new v51(a47); } catch (e) {}
            Math.atan2(this, this);
        }
    }
    new C45(-2);
    new C45(-1602984247);
    const v58 = false && o31;
    v58 !== v58;
    const o63 = {
        "maxByteLength": 6,
    };
    const v65 = new ArrayBuffer(4, o63);
    new Float64Array(v65);
    function F68(a70, a71) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
%VerifyType(gc);
[...v3,o14,1000];
let v73;
try { v73 = v4.push(10, 10, v23, "sync"); } catch (e) {}
v20 ^ v73;
v73 /= BigUint64Array;
