/\[\]\{\}\(\)\%\^\ ?/gs;
/[p5(x)(x)(x)\3*[a\bcKB[^E(?:a+)?]]]/guy;
/\111U/y;
[-268435456,65537,0,65537,1073741825];
[0,-53260,-1189590083,-1651989012,1,64,257];
[1];
const v15 = [-1727815353,-9007199254740991];
[4,13];
[45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v21 = new Int16Array(16);
try { v21.find(v21); } catch (e) {}
0.6822080711934364 / 0.6822080711934364;
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this?.constructor;
    const v33 = v32?.constructor;
    try { new v33(v32); } catch (e) {}
    try { new v32(0.29489550717955537, a30); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e37) {
    }
}
const v38 = F28?.constructor;
try { new v38(F28); } catch (e) {}
const v40 = new F28("string");
v40.f = v40;
let v42 = 127;
v42++;
const v44 = v42 != v42;
const v47 = new Int32Array(Int32Array);
const v48 = [];
function f49() {
    const o51 = {
        p() {
            return f49;
        },
        [v48]: v48,
        "a": v48,
    };
    const v52 = o51?.constructor;
    try { new v52(v44); } catch (e) {}
    return v48;
}
f49();
f49();
const v56 = f49();
const v57 = (a58, a59) => {
    return v56 * a59;
};
0.6058227007604853 | 0.6058227007604853;
let v63 = -Infinity;
v63++;
const v67 = new Float64Array(129);
const v70 = new Int32Array(512);
new Uint32Array(v70);
let v73;
try { v73 = v67.entries(); } catch (e) {}
try { v73.next(); } catch (e) {}
255 - 255;
class C77 {
    static [v47] = 0.29489550717955537;
}
true || true;
const v80 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o82 = {
    valueOf() {
        return true;
    },
};
v80.length = o82;
class C83 {
}
const o84 = {
};
try { ("Xkz0W").split(v15, -536870912); } catch (e) {}
class C87 {
    set b(a89) {
    }
}
const v90 = new C87();
const v91 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v91(v90); } catch (e) {}
function f93(a94, a95) {
}
for (const v96 in v63) {
    function F97(a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e101) {
} finally {
}
