const v3 = [];
function f4() {
    const o6 = {
        p() {
            return f4;
        },
        [v3]: v3,
        "a": v3,
    };
    return v3;
}
f4() * -256832495;
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    128 | 128;
    const t14 = "65535";
    t14[3] = "65535";
    ~("65535").lastIndexOf(128, 65536);
    2136873598 % 2136873598;
    const t17 = (2136873598).constructor;
    t17();
    const v27 = this?.constructor;
    v27.arguments = v27;
    try { new v27(F12, a16, this); } catch (e) {}
    a15 >>> a15;
    try {
        this.h = a14;
    } catch(e30) {
    }
}
new F12(-41805n, 4096, 1073741823n);
const v32 = new F12(65536n, 0, 65536n);
v32.length = v32;
new F12(-41805n, 0, 1073741823n);
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
const o39 = {
};
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    let v46;
    try { v46 = new v45(); } catch (e) {}
    -429.3290910931888 << v46;
}
class C48 extends F41 {
}
new Int8Array(256);
const v52 = 127 >> 127;
const v54 = new Float64Array(127);
let v55;
try { v55 = v54.some(Int8Array); } catch (e) {}
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v59 = new v55(-429.3290910931888);
v59.setUTCSeconds(Date, -429.3290910931888);
function f61() {
    eval("");
    return v52;
}
new Int16Array(256);
let v66 = 2136873598;
v66--;
class C68 {
}
const v69 = new C68();
function F70(a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a72;
}
const v74 = new F70(v69);
new F70(v74);
class C76 {
}
v66.constructor.NEGATIVE_INFINITY;
const v79 = new v69();
try { v79.toExponential(v79); } catch (e) {}
class C81 {
}
class C83 extends Date {
}
const v84 = new C83();
v84.setMonth(C81, C83);
v79.toExponential(C76);
