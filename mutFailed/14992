let v4 = -4294967296;
const v6 = [-1000000000.0,3.0,0.08972631672911024,-1000000000000.0,0.17205170530439995,734190.2698541193,-1.62786110665812e+307];
let v7 = [Infinity,2.2250738585072014e-308,310.16055106657404,0.7703159144465359,1.8121681300077004,-5.264292010965086];
const v8 = [Infinity,0.3437934381363741,4.0,-0.7007215662907456,-2.0,-1e-15,-4.327209923486562,1000000000.0,5.331015607539298];
[7,9007199254740991,12240,536870912,4294967296,256,1073741824,268435441,3,11];
[9,-9,7,-13381,-24386,1,563571435,268435440,-1256970993];
const v11 = [3451,6,9007199254740991,4294967295,268435440];
class C14 extends (472608997).constructor {
}
let v16 = Uint8Array;
const v17 = new v16(268435440);
let v18 = 3.1466442940809625;
class C20 {
    set e(a22) {
        const v24 = Symbol.iterator;
        const o38 = {
            [v24]() {
                let v26 = 10;
                const o34 = {
                    next() {
                        v26--;
                        const t20 = "9007199254740992";
                        t20["255"] &= 7;
                        -9223372036854775808n - -9223372036854775808n;
                        return this;
                    },
                };
            },
            n(a36, a37) {
            },
            [v8]: v24,
            "maxByteLength": 268435440,
            ...v17,
        };
        function F39() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                new F39();
                /Ckza\Wb?/vis;
                /Ma\W+/gudm;
            } catch(e44) {
            }
        }
        new F39();
    }
}
v16++;
const v49 = v7--;
-v49;
~v49;
v16 / 16;
const v53 = new C20();
const v54 = new C20();
const v55 = new C20();
function f56(a57, a58) {
    const o65 = {
        512: C20,
        4294967295: a57,
        valueOf(a60, a61) {
            return a61;
        },
        "e": v54,
        o(a63, a64) {
            return a64;
        },
    };
    return o65;
}
const v66 = f56(f56, v18);
f56(C20, v18);
const v68 = f56(f56, -1000.0);
let v69 = 1024n;
try {
    C20();
} catch(e71) {
}
const v72 = v68.h;
let v73 = v68[v55];
const v74 = [-Infinity,Infinity,959819.665748626];
v6["findLast"](v72, "findLast");
Object.defineProperty(C20, v11, { writable: true, configurable: true, value: C20 });
v4 = v16;
v53[4];
v74["concat"]([Uint32Array]);
({"e":v69,"h":v73,...v18} = v66);
try { v53.p(v73, v73, -1000.0, v55, v53); } catch (e) {}
