function f0() {
    const o32 = {
        set a(a5) {
            const v9 = Math >> 5.783867315482631;
            const v10 = /2a\sc/uds;
            function f11() {
                try { v10.test(v10); } catch (e) {}
                const t7 = Array();
                t7.length |= 113;
            }
            v10[Symbol.toPrimitive] = f11;
            const o20 = {
                [v10](a19) {
                },
            };
            Math.ceil(a5);
            Math.atan(-536870912);
            a5 * -9;
            Math.asin(v9);
            Math.atan(-9);
            !-536870912;
        },
        "e": -536870912,
        __proto__: -536870912,
        "arguments": "multiline",
        [f0](a28, a29, a30) {
        },
        get d() {
        },
        "b": -536870912,
        "a": "multiline",
    };
    return o32;
}
f0[Symbol.toPrimitive] = f0;
const v35 = f0();
const v36 = f0();
const v41 = [256];
const v43 = v41 === BigUint64Array ? v41 : BigUint64Array;
const v44 = [256];
const v46 = [v44,[v44,v43,BigUint64Array,Uint8Array]];
const v47 = f0();
function F48(a50) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v36;
    } catch(e51) {
    }
}
const v52 = new F48(v35);
const v53 = new F48(v47);
new F48(v36);
class C55 {
    static 5 = v36;
    #g;
    static [-1];
    get e() {
        ~-7673;
    }
    valueOf(a62, a63, a64, a65) {
        a62 = a63;
        a63[a64] = a63;
        %PrepareFunctionForOptimization(f0());
        f0();
        a63();
        %OptimizeMaglevOnNextCall(f0);
        f0();
        return v53;
    }
    1 = v47;
}
v46.g = v46;
1073741825 == 0n;
function F73(a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    [8n] > 8n;
}
new f0();
new C55();
new C55();
new Float32Array(256);
new Uint8Array(16);
new Uint16Array(7);
class C96 {
    static {
        class C100 {
        }
        function f101(a102, a103, a104) {
            const o105 = {
                1073741824: C100,
            };
            return v52;
        }
    }
}
