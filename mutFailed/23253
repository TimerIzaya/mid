function f6(a7, a8, a9) {
    const o46 = {
        ["1163035831"](a11, a12, a13) {
        },
        "c": 8n,
        toString(a15, a16, a17) {
            return 268435441n;
        },
        n(a19, a20, a21, a22) {
            let v23;
            try { v23 = new a22(...a19, -546220245n, ...a19, ...a19, a8, a21); } catch (e) {}
            v23.b += v23;
            return a21;
        },
        ...a7,
        4294967296: a8,
        "d": 268435441n,
        get e() {
            try {
            const t0 = "HPKR";
            t0();
            } catch (e) {}
            Math.floor(-536870912);
            const v30 = +a8;
            v30 << v30;
            -536870912 << a8;
            const v34 = new BigUint64Array();
            v34["copyWithin"]();
            class C37 {
                constructor(a39, a40) {
                    eval(a39);
                }
            }
            return -546220245n;
        },
    };
    return o46;
}
f6("1163035831", -546220245n, 8n);
f6("HPKR", -546220245n, -546220245n);
f6("1163035831", -546220245n, -546220245n);
new Uint32Array(1000);
new Float64Array(2867);
new Uint8ClampedArray(10);
function f62() {
    function F64(a66) {
        if (!new.target) { throw 'must be called with new'; }
        const v67 = this.constructor;
        v67.e = v67;
        const o69 = {
            "maxByteLength": 47,
        };
        [Uint8ClampedArray,Uint8ClampedArray];
        try { new v67(); } catch (e) {}
        this.g = -1;
    }
    new F64();
    const v74 = new F64(-1);
    class C75 extends F64 {
        [-1];
    }
    new Uint8ClampedArray();
    const o79 = {
    };
    const v81 = new Proxy(F64, o79);
    v81.map(Array);
    new C75();
    return v74;
}
%PrepareFunctionForOptimization(f62);
const v86 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
function f88(a89, a90, a91, a92) {
    const v93 = Symbol.toPrimitive;
    Object.defineProperty(a89, v93, { configurable: true, enumerable: true, value: f88 });
    const o100 = {
        toString(a95, a96) {
            const v97 = a89 && Float64Array;
            function f98() {
                a95 *= v93;
                return Float64Array;
            }
            Object.defineProperty(v97, "valueOf", { value: f98 });
            v97 <= v86;
            return this;
        },
    };
    return o100;
}
const v101 = f88(Date);
try { v101.toString(f88, v86); } catch (e) {}
f62();
%OptimizeFunctionOnNextCall(f62);
f62();
