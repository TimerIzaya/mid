const v0 = /[Za(?:b)]/gviy;
const v1 = /ya\S/vms;
const v2 = /((\xed\xa0\x80))\x02a.a+/gvi;
class C3 {
    static #e = v2;
    get b() {
        function f5() {
            return v1;
        }
        function f6(a7, a8) {
            a8.apply();
            return a7;
        }
        const v11 = new Promise(f6);
        v11.then(f6);
        for (let v13 = 0; v13 < 5; v13++) {
            const o15 = {
            };
            gc(o15);
        }
        return this;
    }
    set g(a18) {
    }
    static b = v0;
    #g = v2;
    f = v2;
}
const v22 = new C3();
new C3();
new C3();
class C25 {
    268435439 = C3;
    toString(a27, a28, a29) {
        try {
            v22.fuck(v22, v22);
        } catch(e31) {
        }
        return a27;
    }
    #m(a33, a34, a35) {
        new Uint8Array(4);
        new Int8Array(7);
        new Int16Array(51);
        return v2;
    }
}
new C25();
const v46 = new C25();
new C25();
function f48() {
    return v0;
}
function f49() {
    return v46;
}
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = new F53();
function f58() {
    return f58;
}
const v59 = /{}(x)(x)(x)\4*a{0}a|b/msy;
const v62 = new BigUint64Array();
function F63(a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    const v68 = this.constructor;
    try { new v68(BigUint64Array, v62, v62); } catch (e) {}
    a67[1];
    function f72(a73, a74) {
        a74 / a74;
        arguments[1];
        arguments.toString = a73;
    }
    try { f72(f58, v59); } catch (e) {}
    f72(v68, 8077n);
}
const v80 = new F63(BigUint64Array, 4, v62);
const t79 = v80.constructor;
new t79(v57, v57, v59);
