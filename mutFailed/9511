const v2 = new Array(Array);
[257,257,[257,257,v2,[v2],Array]];
[14388,257,-4720,-13073112,-13,4294967295,128,48220,-268435456,27576];
[10000,-9007199254740992,-128,-1024,9007199254740990];
[65536,-4294967296,31828,65536,-60287,-9223372036854775808,-431839524,268435456,-536870912];
[3.0246523790201096e+307,4.0,-2.220446049250313e-16,-8.775856521177452,1e-15,-2.220446049250313e-16,-2.220446049250313e-16];
[-701592.0975927876,-1.0];
const v11 = [858.477003397398,0.11524579395380741,583.0561360759627,-1000000000.0,6.426881190490143,-286.8132176736964,1000.0];
([-2.220446049250313e-16,-2.0,-4.926552391544163,0.4191996832717132,1.0,-455962.3271780333,-1000000000000.0,-4.0,446489.561411778])[1];
[5.0,-2.342856725751538e+307,1000000000.0];
[5.731799136885705,-8.861193309290517,-186.94205592339722,-1.0,-2.0,569.1323592186607];
function f19() {
    return 20947;
}
f19.length;
let v21 = 1129447093;
v21--;
f19();
%PrepareFunctionForOptimization(f19);
f19();
-f19();
%OptimizeFunctionOnNextCall(f19);
f19();
-1166767713 !== -1166767713;
const v32 = new v11();
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v35 = 0;
        while ((() => {
                const v38 = 0 < 0;
                !this;
                return v38;
            })()) {
            for (let v40 = 0; v40 < 5; v40++) {
            }
            v35++;
        }
        do {
            try { v32.entries(); } catch (e) {}
            v35++;
        } while (v35 < 5)
        new F33();
    } catch(e48) {
    }
}
new F33();
