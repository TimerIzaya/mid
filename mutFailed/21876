const v0 = [4,-1042,2002528650,11956,6029097];
const v1 = [268435441,-256,-61530,-3823];
const v2 = [14,9007199254740992,-536870912];
function f3() {
    return v0;
}
const v4 = [v1];
const v5 = [f3];
const v6 = [v1,f3,v0];
function f7(a8, a9, a10) {
    function f11() {
        Array(36862);
        return a9;
    }
    a8.toString = f11;
    const o24 = {
        p(a16, a17, a18, a19) {
            try { a18.flat(this); } catch (e) {}
            Object.defineProperty(this, 0, { writable: true, configurable: true, enumerable: true, get: f3 });
            a8.length;
            try {
                super.setUTCSeconds();
            } catch(e23) {
            }
            return a18;
        },
        128: v1,
        [v2]: a8,
        ...v0,
    };
    return o24;
}
f7(v2, v4, v4);
f7(v6, v2, v5);
const v27 = f7(v0, v2, v6);
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = v1;
    try {
        this.e = f7;
    } catch(e32) {
    }
}
const v35 = new Uint8ClampedArray(16);
new Uint32Array(v35);
new F28(v27, v4);
new F28(v1, v1);
new F28(v2, v0);
let v41 = 0.015096032885781985;
const v42 = v41++;
v42 ** v42;
