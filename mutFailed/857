/[8a(?=bbb|bb)c]/gums;
/a[a]/vdsy;
const v2 = /M/gus;
class C6 {
    #h = 1e-15;
    static get e() {
        function f8() {
            return 1e-15;
        }
        return this;
    }
    static [v2];
    set f(a10) {
        const v11 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        for (let v12 = 0; v12 < 5; v12++) {
            v11 | v12;
        }
        this != a10;
    }
    #g = 3.7122420217608383;
    static 65536;
}
new C6();
new C6();
new C6();
new Set();
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f29() {
    let v31 = 1000000000000.0;
    const v32 = v31--;
    -v32;
    function F34(a36, a37) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C38 extends F34 {
    }
    function f39() {
        return f39;
    }
    class C43 {
        constructor(a45) {
            const v47 = new Float32Array();
            try { v47.entries(); } catch (e) {}
            const v49 = new Uint16Array(12, -4294967296, v32);
            new Float32Array(v49, -4294967296, 268435439, v31, v49);
        }
    }
    try { new C43(12); } catch (e) {}
    const v52 = new C43(257828.6336153492);
    const v53 = new C43();
    const v54 = new C43(-4294967296);
    const v56 = new Uint8Array(268435439);
    for (const v57 in v56) {
    }
    new Uint8Array();
    const v59 = [v54,C43];
    [257828.6336153492,v54,v52,v54,v59];
    const v61 = [v54];
    class C62 extends C43 {
        [v52];
    }
    const v63 = new C62();
    const v64 = v61.constructor;
    try { v64.isArray(v61); } catch (e) {}
    class C66 extends v64 {
    }
    C66.a = C66;
    const v67 = new C66();
    const v68 = v67?.constructor;
    try { new v68(); } catch (e) {}
    Object.defineProperty(v67, 65537, { value: v53 });
    try { v63.m(v59); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f29);
f29();
%OptimizeFunctionOnNextCall(f29);
f29();
