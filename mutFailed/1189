const v4 = "2147483649" & -826749957n;
let v6 = 0n;
v6--;
function f8(a9, a10, a11, a12) {
    const v14 = (a11--)[3];
    const o70 = {
        211: a9,
        "e": -16n,
        [-826749957n]: "2147483649",
        [a10](a16, a17, a18, a19) {
            new a19();
            class C21 {
                toString(a23) {
                    super[this];
                }
            }
            const v27 = new Uint32Array(186);
            const v32 = new Float64Array(186, 186, 16);
            const v33 = [Float64Array,v32];
            class C34 {
                constructor(a36, a37) {
                    if (Float64Array > v27) {
                        new Uint32Array(v33);
                    } else {
                        function F40(a42, a43, a44) {
                            if (!new.target) { throw 'must be called with new'; }
                        }
                    }
                }
            }
            const v45 = new C34(Float64Array, 15);
            const v46 = new C21();
            try {
                a10.trimRight();
            } catch(e48) {
                const o49 = {
                };
                const v50 = o49.__defineGetter__;
                try { v50(); } catch (e) {}
                function F52(a54, a55) {
                    if (!new.target) { throw 'must be called with new'; }
                }
            }
            f8(a11, v4, v45, v6);
            a10?.[C21];
            const v62 = new v14();
            class C64 extends Uint8Array {
                constructor(a66, a67) {
                    super(a66);
                    try {
                        v62.length = 415075273;
                    } catch(e69) {
                    }
                }
            }
            return v46;
        },
        "f": a10,
    };
    o70[2147483649];
    return o70;
}
const v72 = f8("hasInstance", "2147483649", -826749957n, "29220");
const v73 = f8("2147483649", "hasInstance", -16n, "29220");
const v74 = f8("hasInstance", "hasInstance", -826749957n, "2147483649");
const v75 = [f8,v6,v74];
const v76 = [-16n,v75];
let v77;
try { v77 = v76.values(); } catch (e) {}
[v76,f8,v73,f8,v74];
const v79 = [9007199254740991,10,56647,-29200,-9223372036854775807];
v79[1] = v79;
const v80 = [9223372036854775807,-9007199254740991,-1];
const v81 = [4294967297,-4096,3];
class C82 {
    static 1800;
    512;
    static #g;
    static h = v77;
    c = v72;
    static #c;
    constructor(a84, a85) {
        const v87 = new BigInt64Array();
        class C88 {
            constructor(a90, a91) {
                for (let v92 = 0; v92 < 10; v92++) {
                    v87[-1];
                    const v95 = new WeakSet();
                    v75 - WeakSet;
                    [a90,WeakSet];
                    [[a84,v95,this,v87],v79,WeakSet,a90,BigInt64Array];
                    try {
                        super.o();
                    } catch(e101) {
                    }
                }
            }
        }
        a85 ||= this;
        try {
            v81.concat(this, v80);
        } catch(e103) {
        }
    }
    o(a105) {
        try {
            this.#c = v81;
        } catch(e109) {
        }
    }
}
function f110(a111, a112, a113) {
    const o116 = {
        get e() {
            try {
            } catch(e115) {
            }
        },
    };
}
f110.prototype;
new Uint8Array();
new Uint8ClampedArray(Uint8ClampedArray);
eval(eval);
try {
} catch(e124) {
}
