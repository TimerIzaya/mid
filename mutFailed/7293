function F1(a3, a4) {
    if (!new.target) { throw 'must be called with new'; }
}
const v6 = new Uint8ClampedArray();
Object.defineProperty(v6, "f", { configurable: true, enumerable: true, value: Uint8ClampedArray });
try {
    v6.f = -3;
} catch(e8) {
}
const v12 = new Float32Array(3);
v12.toJSON = Float32Array;
const v13 = [v12];
for (let v14 = 0; v14 < 5; v14++) {
    const t13 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
    t13.length >>>= -65536;
}
"number" == "number";
const v26 = 1840772909 + 1840772909;
const v27 = [6.967388272777469e+307,4.0,3.0,618836.0705338276,-1000000000.0,4.338544931774358];
[1.0,1000000000.0,1000000000.0,603487.0876624247,-4.0,-1.0];
const v29 = [776641.7475859227,3.0,-1.255542667875793e+308,-2.0,-6.538387268164179,-2.0,-734234.5715169318,-4.0,-4.53071438552707e+307];
function f30(a31) {
    class C32 {
        b = "bigint";
    }
    return Uint8ClampedArray;
}
function f33(a34) {
    16 | 16;
    return v12;
}
f30[Symbol.species] = f33;
v29.constructor = f30;
try { v29.slice(v27, -54239); } catch (e) {}
function f41(a42, a43) {
    return f41;
}
try { new f41("number", f41); } catch (e) {}
const o47 = {
    "type": "function",
};
function f48() {
    return v26;
}
function f49(a50) {
    try { v12.map(a50, a50); } catch (e) {}
}
Object.defineProperty(o47, "arguments", { writable: true, enumerable: true, get: f48, set: f49 });
new Worker(f41, o47);
function f53() {
    return o47;
}
const o55 = {
    "type": "function",
};
o55.arguments = v13;
o55.e = o55;
new Worker(f53, o55);
