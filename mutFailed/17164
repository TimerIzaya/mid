const v0 = [];
class C2 {
    constructor(a4) {
        const v5 = this.constructor;
        try { new v5(); } catch (e) {}
        let v8 = ("size").g?.[7];
        [...v8] = "size";
    }
}
function F9() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f11(a12) {
            const v15 = F9 << f11;
            Math.trunc(f11);
            (-14) ** v15;
            function F18() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    let v20 = 0;
                    for (let i = 0; i < 5; i++) {
                        const v21 = v20++;
                        const v22 = v21 ^ v21;
                        v22 / v22;
                    }
                    new F18();
                } catch(e25) {
                }
            }
            Math.asinh(F9);
            return v15;
        }
        f11(f11);
        this.h = v0;
    } catch(e28) {
        class C29 {
            #p() {
            }
        }
        for (let [i38, i39] = (() => {
                const v34 = new Uint32Array(0, 0, 10);
                const t1 = v34.constructor;
                const v36 = new t1();
                v36.reverse();
                return [0, 10];
            })();
            i38 < i39;
            i39--) {
        }
    }
}
const v46 = new F9();
const v47 = new F9();
const v48 = new F9();
const v50 = [[v48,v48],F9,v46];
[v50,v50,v47,v47];
const o55 = {
};
new BigUint64Array();
const v59 = new Map();
function f60(a61, a62) {
    const o63 = {
        [v0]: v59,
        146: v59,
    };
    o63[146];
    return Map;
}
const v69 = ("minor").valueOf("minor", "minor", "minor", "minor");
function f71() {
    function f72(a73) {
        return Uint8ClampedArray;
    }
    Reflect.construct(f72, [Uint8ClampedArray], Uint8ClampedArray);
    return Uint8ClampedArray;
}
f71();
v69.split(v69).pop();
const t76 = 0.9421742267885254;
new t76(1269);
512 > "minor";
