const v1 = new Set();
const v2 = [0.4676414173783586,-Infinity,0.5272876180146241,0.7018464109329261,-3.0,0.5624872231304311];
[NaN,1.7976931348623157e+308,1000000000000.0,2.34530095035457,488391.5899830777,836.7005379216289,-260015.4643873314];
[-776527.8583982734,2.2250738585072014e-308,1.0,-1.7976931348623157e+308,-0.0,3.917202300592429,-1.7976931348623157e+308,1000000000000.0,1.7976931348623157e+308];
class C8 {
    static n(a10, a11) {
        d = a11;
        new Int16Array(2477);
        new Int8Array(16);
        new Uint16Array(4);
        return Int8Array;
    }
    static 3867030316;
    10 = v1;
}
const v21 = new C8();
const v22 = new C8();
const v23 = new C8();
class C24 extends C8 {
    static set h(a26) {
        8.894373930011045e+307 + Set;
        a26 in this;
    }
    #d = v23;
    constructor(a30, a31) {
        super();
        try {
            const o32 = {
            };
            new Set(o32);
        } catch(e34) {
        }
        super[v2] = a30;
        Reflect.construct(Set, [a30], C8);
    }
    e;
    b;
}
new C24(v22, v23);
new C24(v23, C24);
new C24(v1, v21);
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o47 = {
        };
        Worker("2140550028", o47);
    } catch(e49) {
    }
}
new F42(F42, "2140550028");
