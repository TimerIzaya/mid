new Int32Array(512);
new Float32Array(127);
let v11 = new Uint8Array(469856669);
const v17 = new Uint8Array(1000);
Array();
Array(1000);
const v25 = new BigUint64Array(257);
const v26 = Uint8Array in v25;
v26 && v26;
try {
    v25.d = v17;
} catch(e28) {
}
const v31 = new Float32Array(4);
v31[3] = Float32Array;
Uint8Array.e = Uint8Array;
new Uint8Array(4096);
const v37 = Float32Array.name;
new Float32Array(141);
7 + 7;
5 + 5;
new Uint16Array(5);
function f46() {
    return f46;
}
const v47 = new BigInt64Array(7);
let v48 = -2n;
v48--;
function f52() {
    return f52;
}
try { f52(); } catch (e) {}
let v54;
try { v54 = f52(); } catch (e) {}
v54 * v54;
Map.prototype;
new Map();
24560 ^ 24560;
-1000000000000.0 >>> -1000000000000.0;
Uint8Array.prototype = Uint8Array;
function F70() {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    const v75 = Date();
    try { v75.small(); } catch (e) {}
    for (const v80 of v72(19793)) {
    }
    try {
    } catch(e81) {
    }
    function f82(a83, a84, a85) {
        v11 = a83;
        return v37;
    }
    Date(this, Float32Array, v54);
}
const v88 = new F70();
const v89 = v88?.constructor;
try { new v89(); } catch (e) {}
function F91(a93, a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
    const v96 = this?.__defineGetter__;
    try { new v96(v25, Float32Array); } catch (e) {}
}
class C99 {
    constructor(a101) {
        try {
        } catch(e102) {
        }
        try {
        } catch(e103) {
        }
        for (const v104 of "bigint") {
        }
        const v105 = Array(a101);
        try { v105.reduceRight(f46, v47); } catch (e) {}
        try {
            v88.fuck(/Ia|bcy*/vi, 8, v17);
        } catch(e111) {
        }
    }
}
class C112 extends C99 {
}
const o113 = {
};
