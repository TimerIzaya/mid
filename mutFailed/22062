[4,15607,512,-2,683833753,-256,-5033,1073741825];
[-65535,28213,-9,14,1073741824];
let v2 = 144;
const v3 = v2++;
const v4 = ~v3;
function f5(a6) {
    return v3;
}
const v7 = [-977949339,4,10291,1112645807,-163391539];
v7[5] = v7;
try { v7.unshift(f5); } catch (e) {}
const v9 = /Ra+b|c+/gudmy;
v9.a = v4;
v9.a = v9;
/Mna{0,1}?/udimy;
const v11 = /D(?: foo )/visy;
try { v11.compile(v9, v9); } catch (e) {}
-1000;
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
new Uint16Array(1000);
512 / 512;
new BigInt64Array(512);
const v22 = 0 >> 0;
v22 < v22;
new Int32Array(0);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = new Array(19793);
    v30.toString = f5;
    const v31 = v30?.toString;
    try { new v31(); } catch (e) {}
    const v33 = Array(19793);
    try { v33.map(0); } catch (e) {}
    for (const v35 of v33) {
    }
}
const v36 = new F26();
function f37() {
    function f38() {
        return Array(1102693041);
    }
    return f38;
}
Object.defineProperty(v36, "constructor", { writable: true, get: f37 });
const v42 = v36?.constructor;
try { new v42(); } catch (e) {}
const v44 = v36?.constructor;
v44.arguments = v44;
let v45;
try { v45 = new v44(); } catch (e) {}
v45.b = v45;
