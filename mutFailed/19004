const v0 = [0.6704411053677012,-3.3147084663867687,2.2250738585072014e-308];
const v1 = [1.104386103089464,-1.0,636.4315798280315];
const v2 = [1e-15,4.0,0.0,0.001010305505174336,-4.0];
const v3 = [v1,v1,v2,v2,v2];
[v2,v2,v0];
const v5 = [v2,v2,v0];
[v1];
const v9 = ([v5,[v2,v1,v3,v2]])?.flat;
try { new v9(); } catch (e) {}
let v14 = -1024;
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.toLocaleString;
    try { new v21(); } catch (e) {}
    a17 << a17;
    a20.length;
}
const v25 = F15?.constructor;
try { new v25(v0); } catch (e) {}
const v27 = new F15(v14, F15, F15, F15);
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v29 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
try { new Uint32Array(v27, v27, v5); } catch (e) {}
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = this?.__lookupGetter__;
    try { new v36(31351n); } catch (e) {}
    try { a34.toString(); } catch (e) {}
}
const v39 = new F32(F32, F32);
v39.length = v39;
class C40 {
}
C40.b = C40;
let v41 = -4294967297n;
v41--;
const v43 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v44 = [601759695];
const v45 = v44?.toString;
try { new v45(); } catch (e) {}
let v47 = 522675525n;
v47--;
for (let v49 = 0; v49 < 5; v49++) {
    function f50() {
        "Vre" == "Vre";
        -4294967295 <= -4294967295;
        let v55 = Float64Array;
        Array.prototype = Array;
        const v57 = Array();
        function f58() {
            return f58;
        }
        function f59(a60) {
            a60 >>> a60;
            return v41;
        }
        Object.defineProperty(v57, 0, { configurable: true, enumerable: true, get: f58, set: f59 });
        const v62 = v57.unshift(v14);
        const v64 = new Set();
        function F65(a67, a68) {
            if (!new.target) { throw 'must be called with new'; }
            F65(a68, v64);
        }
        F65.b = F65;
        v55 = F15;
        const v70 = v28.length;
        v70 * v70;
        try {
            v28.forEach(v55);
        } catch(e73) {
            try { e73.charCodeAt(v27); } catch (e) {}
        }
        const v75 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        try { new Symbol(); } catch (e) {}
        class C78 {
        }
        const v79 = new Symbol();
        try {
            v79.__proto__ = F32;
            const v80 = ["Vre","Vre","Vre","Vre"];
            class C81 {
            }
            function* f82(a83, a84) {
                yield* v80;
                return F32;
            }
        } catch(e85) {
        }
        const v86 = Symbol.toPrimitive;
        try {
            Symbol.for(Symbol().description);
        } catch(e91) {
        }
        Symbol.match;
        const o99 = {
            toString(a95, a96) {
                const v97 = v49 && v55;
                a95 *= v86;
                v97 <= v75;
                return a96;
            },
        };
        const o121 = {
            "c": v49,
            [v47](a102, a103) {
            },
            "c": v44,
            valueOf(a105, a106) {
                return this;
            },
            [v41](a108, a109, a110, a111) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v43,
            ...v27,
            [v86]() {
            },
            "type": C40,
            ..."Vre",
            valueOf(a114, a115) {
                return a115;
            },
            ..."Vre",
            get h() {
                return f50;
            },
            4: "Vre",
            toString(a118, a119, a120) {
                return v49;
            },
            5: -4294967295,
            6: v25,
        };
        o121[2];
        new Float32Array(v79, v14, v49);
        v14 %= -268435456;
        new Uint32Array(v29);
        v39 - f50;
        try {
            const v128 = new Float64Array();
            try { v128.filter(v79); } catch (e) {}
        } catch(e130) {
        }
        new Float64Array(v62, v62);
        Uint16Array.e = Uint16Array;
        const v134 = new Uint16Array(Symbol, -268435456, -268435456);
        try { v134.entries(); } catch (e) {}
        return f59;
    }
    f50();
    %OptimizeFunctionOnNextCall(f50);
}
