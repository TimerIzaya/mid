const v1 = new Map();
v1.name = Map;
Uint8Array.name;
new Uint8Array(268435440);
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    a8.name = a8;
    try {
        this.b = a8;
    } catch(e10) {
    }
    try {
        this.e = a9;
    } catch(e11) {
    }
    try {
        this.f = a8;
    } catch(e12) {
    }
}
F6.d = F6;
const v13 = new F6(Map, Map);
function f14(a15) {
    a15?.[3455812280];
}
Object.defineProperty(v13, "name", { writable: true, configurable: true, set: f14 });
new F6(v13, v1);
const v18 = new F6(v1, Map);
try { v18.valueOf(); } catch (e) {}
new Map();
-9n;
-(-10n);
class C27 {
    static toString(a29, a30) {
        const v31 = delete v13[268435456];
        try {
            v18.f = F6;
        } catch(e32) {
        }
        return v31;
    }
    static 129 = -10n;
    toString(a34, a35, a36, a37) {
        delete v1?.size;
        try {
            super.toSorted();
        } catch(e40) {
        }
        return a37;
    }
}
new C27();
new C27();
new C27();
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    this.c = this;
}
const v46 = new F44();
v46.c;
function f48(a49, a50) {
    const o57 = {
        [a50](a52, a53, a54) {
        },
        set h(a56) {
        },
        "h": v46,
    };
    return F44;
}
f48();
f48();
