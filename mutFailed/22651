new Map();
new BigInt64Array(1000);
function F10() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -3;
    } catch(e13) {
    }
    try {
        this.f = -3;
    } catch(e14) {
    }
}
const v15 = new F10();
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    const v20 = this?.__lookupGetter__;
    try { v20(a18); } catch (e) {}
    try { this.constructor(F16, this); } catch (e) {}
    a18.e = a18;
}
F16.arguments = F16;
new F16(v15);
new Int8Array(1024);
let v26 = 0;
v26++;
Symbol.hasInstance;
const t25 = 1000;
new t25(BigInt64Array, BigInt64Array % BigInt64Array);
new Int8Array(10);
/1(?:a?)?/gvdm;
class C36 {
}
C36 < "copyWithin";
new Float32Array(2);
/(\9Am)/dy;
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this.constructor;
    try { new v49("-268435456"); } catch (e) {}
    a47.prototype;
}
