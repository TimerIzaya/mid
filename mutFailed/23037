const v6 = new Float32Array(5);
const v9 = new Uint8Array(7);
let v12;
try { v12 = v9.forEach(5, ...v6, ...v9, Float32Array, 128, ...Float32Array); } catch (e) {}
const v16 = v9 in v6;
const v17 = new Float32Array(128);
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    for (let [i29, i30] = (() => {
            try { v17.reduce(v12, -2147483648); } catch (e) {}
            const v23 = -9007199254740991n << -9007199254740991n;
            -41338 >> v23;
            Math.asin(v23);
            Math.cosh(v16);
            return [0, 10];
        })();
        i29++, i29 < i30;
        (() => {
            v17["join"](v12);
            i30 !== this;
            for (const v43 of Array(4087)) {
            }
            const v45 = new Int16Array(4087);
            v45[251] = v45;
        })()) {
    }
}
new F18();
