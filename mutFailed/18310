new Float64Array(512);
15 * 15;
([2.0,-1e-15,1.7976931348623157e+308]).flat(1351);
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this.constructor;
    try { new v14(v14, a13); } catch (e) {}
    for (const v17 in this) {
    }
}
F8.a = F8;
new BigUint64Array(15);
const v22 = Int32Array.name;
new Int32Array(16);
const t14 = /QW+/gu;
t14.global = v22;
/[^xab|c]/udmsy;
/N[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/gvdis;
const v29 = new BigUint64Array(127);
new Uint8Array(3);
const v33 = /m+/gudimsy;
v33.e = v33;
const v34 = [];
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    try { new v37(); } catch (e) {}
    let v39;
    try { v39 = v29.valueOf(); } catch (e) {}
    v39.length = v39;
    try {
        this.d = v34;
    } catch(e40) {
        const v42 = new Set();
        class C43 {
            [v42];
        }
        function f44(a45) {
            return a45;
        }
    }
}
new v22();
new F35();
