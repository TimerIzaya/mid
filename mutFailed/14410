const v2 = new Uint8Array(3943);
const v5 = new Int8Array(7);
const v8 = new Float32Array(2425);
try { v8.filter(2425); } catch (e) {}
class C10 {
    p(a12, a13) {
        v8[v2];
        const v18 = -Math;
        C10++ + 15791363;
        return v18;
    }
    a;
    static #c;
}
C10.e = C10;
new C10(v2, 7);
new C10(v8);
new C10();
const v24 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
const v27 = ("h").split();
try { v27.fill(v5); } catch (e) {}
const o66 = {
    [null]() {
        const v30 = this?.__lookupGetter__;
        try { new v30(v8); } catch (e) {}
        const v32 = [];
        class C33 {
            constructor(a35, a36) {
                try { this.findLast(); } catch (e) {}
                a35[3];
                const v39 = /W(jy2)/udy;
                const v41 = new Uint8Array(C33, a36);
                v41[1] = v41;
                try { v41.reduceRight(); } catch (e) {}
                for (let v43 = 0; v43 < 250; v43++) {
                    const o50 = {
                        ...v41,
                        [v24](a45, a46, a47) {
                        },
                        get f() {
                            super.n(this, 2425, this);
                        },
                    };
                }
                for (let v51 = 0; v51 < 5; v51++) {
                    let v52 = -3943;
                    v52--;
                    try { ("p").anchor(a35); } catch (e) {}
                    const v56 = ("p")[0];
                    v56[0] = v56;
                    v27["p" + v39] = v51;
                }
            }
        }
        new C33(v32);
        9 | 9;
        const v62 = new Float32Array(9);
        try { v62.slice(2425, v5); } catch (e) {}
        v62[5] = v62;
        new Int8Array(v62);
    },
};
try { o66.null(); } catch (e) {}
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    typeof arguments;
    gc();
}
o66.null();
o66.null();
