function f0() {
    const o38 = {
        "e": -65535,
        [5.5709706473012695](a5, a6) {
            Date.constructor = Date;
            class C8 {
                static get g() {
                    try {
                        var a = super.subarray();
                    } catch(e11) {
                    }
                    function F12() {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    const v14 = new F12();
                    f0([-6.695596969959072], [1.7976931348623157e+308,-2.2250738585072014e-308], v14);
                }
            }
            let v18;
            try { v18 = this.replaceAll(); } catch (e) {}
            const v19 = [-Infinity,-1.0,0.9568869478644587];
            let v21 = -314.9391272852571;
            Math.log2(--v21);
            [Float32Array];
            Object.defineProperty(a5, f0, { writable: true, value: v18 });
            const v26 = C8[1];
            try { v26(a6, 5.5709706473012695); } catch (e) {}
            v19.length /= -65535;
            super.d;
            [599427.3622265763,3.0,569256.1610996348,2.0,2.2250738585072014e-308];
            [-1000000.0,3.0,7.480781681975149];
            return -65535;
        },
        __proto__: -2.743254630094159e+307,
        "g": -65535,
        88: -2.743254630094159e+307,
        o(a32) {
            return a32;
        },
        get d() {
            return -2.743254630094159e+307;
        },
        "b": 5.5709706473012695,
        [-65535]: -2.743254630094159e+307,
        n(a35, a36) {
            return this;
        },
        toString() {
        },
    };
    return o38;
}
f0();
const v40 = f0();
f0();
new Int16Array(64);
const v48 = 1922 % 1922;
const v49 = v48 == v48;
function f50() {
    return f50;
}
function f51(a52, a53, a54, a55) {
    a53.freeze(f50);
    a55 + a55;
    function f58() {
    }
    const v60 = -f58.length;
    const v62 = f50().constructor;
    let v63;
    try { v63 = v62(); } catch (e) {}
    const v65 = v63.bind().bind();
    v62 * v49;
    const v67 = typeof f58;
    v67.italics(v67, v60, v65);
    const v70 = v67 === "n";
    const v72 = new Int8Array();
    const v73 = v72.entries();
    v73.next();
    v73.next(1.185961373472971e+308);
    function f76() {
        return f50;
    }
    const v77 = f76();
    const v78 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
    function f80(a81, a82, a83) {
        const v85 = [Array,a83];
        Reflect.apply(v78.filter, v77, v85).find(v63);
    }
    f80.caller = f80;
    [];
    const v92 = ("find").blink().replaceAll;
    try { v92(v70); } catch (e) {}
}
new Float64Array(3);
function f98() {
    return f50;
}
function f99(a100) {
    for (let i103 = 0, i104 = 10;
        (() => {
            eval();
            const v107 = i103 < i104;
            const v110 = new BigUint64Array(3375);
            let [v111,,v112,...v113] = v110;
            v111--;
            return v107;
        })();
        i103++) {
    }
}
Object.defineProperty(Uint8Array, Symbol.toPrimitive, { writable: true, configurable: true, get: f98, set: f99 });
function f122() {
    const v123 = [f122,f122];
    let v125;
    try { v125 = Reflect.get(v123, Uint8Array); } catch (e) {}
    return v125;
}
f122();
%OptimizeFunctionOnNextCall(f122);
const v128 = new Float64Array(984);
function f129(a130) {
    return 3;
}
class C131 extends f129 {
    [f122] = v128;
    10 = v128;
}
function f132(a133) {
}
function f134(a135) {
    try {
        v40.toString(f0, v49);
    } catch(e137) {
    }
    return a135;
}
f132.valueOf = f134;
function F138(a140, a141, a142, a143) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f51;
    const v144 = this.constructor;
    try { new v144(); } catch (e) {}
    this.d = f132;
}
++f132;
new F138();
new F138();
