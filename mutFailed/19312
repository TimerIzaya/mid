function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v4 = Symbol.toStringTag;
        this[v4] = v4;
        ({"b":F0,} = this);
        Object.defineProperty(this, "g", { writable: true, value: v4 });
        this.a = 0;
        const o8 = {
        };
        try {
            o8.a = 0;
        } catch(e9) {
        }
        try {
            const o10 = {
            };
            o10.a = 0;
            o10.h = F0;
        } catch(e11) {
        }
        try {
            const o12 = {
            };
            o12.a = 0;
            o12.h = F0;
            o12.d = this;
        } catch(e13) {
        }
        try {
            const o14 = {
            };
            o14.a = 0;
            o14.h = F0;
            o14.d = this;
        } catch(e15) {
        }
    } catch(e16) {
    }
}
const v17 = new F0();
new F0();
const v19 = new F0();
const v20 = [v19];
[v20,v17,v20,F0,v20];
[v17,F0,v17];
[1.1822180693101283e+308,616.117380495235,0.6104928705827948,-4.0];
[-2.0,Infinity,-1000.0,-1000000000000.0];
[-1000000.0,-812118.6208527373,-549470.1021089487,-4.0,734.6278716910901,8.891346800842676,1.6336522021159558e+308];
[-1];
[16,-9007199254740990,-12,53161,-9007199254740990,64];
[-9223372036854775808,-5,4294967297,16,7,-536870912];
const v30 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v30);
