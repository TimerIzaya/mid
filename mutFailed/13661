const v5 = new Int16Array(1);
new Uint16Array(2030);
const v11 = new Uint32Array(512);
class C12 extends Uint16Array {
    constructor(a14, a15, a16, a17) {
        super(33061);
        this[a14] ^= a16;
        function f18() {
            return 8;
        }
        delete v11[this];
    }
    10;
    static [512] = Int16Array;
    1444263538;
    [1] = Int16Array;
    #p(a21, a22, a23) {
        v5[16] = this;
        return Uint32Array | 2030;
    }
    static #h = v11;
}
new C12(Uint32Array, v5, -65537, 8);
new C12(-65537, 512, 1, 2030);
const v27 = new C12(C12, C12, 1, 2030);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
}
function f32(a33, a34) {
    function f35() {
    }
    const v36 = /(u4(?:a?)*)/gudimsy;
    const v39 = new Uint8Array(v36, f35);
    const v41 = new Uint32Array();
    for (let v42 = 0; v42 < 625; v42++) {
        let v45;
        try { v45 = v27.reduceRight(f32, undefined); } catch (e) {}
        let v47 = 16;
        let v50 = a34 + v47;
        v47 - a34;
        let v52 = v47--;
        --v50;
        v50 | -942.0827578824342;
        v52++;
        Math.abs(-942.0827578824342);
        const o62 = {
            ...v39,
            n(a58, a59) {
                v41[Uint8Array] = v41;
            },
            "b": 64,
            "e": a34,
            __proto__: v45,
            "g": C12,
            "d": v36,
            ...v41,
            "maxByteLength": 10000,
            "g": Uint8Array,
            toString(a61) {
            },
        };
    }
    const o63 = {
    };
}
async function f65(a66, a67) {
    function F68() {
        if (!new.target) { throw 'must be called with new'; }
    }
    /2a\sc/uds;
    f32();
}
f65(F30, 4294967296);
