const v2 = new BigInt64Array(2);
const v5 = new Uint8Array(2);
let v8 = new Uint8ClampedArray(8);
class C9 {
    static {
        const v11 = this?.apply;
        try { new v11(Uint8ClampedArray, v11); } catch (e) {}
        Object.defineProperty(this, 2, { configurable: true, enumerable: true, value: 8 });
        v8 *= this;
        try { v5.every(2, v2); } catch (e) {}
        this[v5[2]];
    }
    static #toString(a17, a18, a19) {
        super.e = 8;
        new BigInt64Array(2);
        return 8;
    }
}
try { new C9(); } catch (e) {}
const v28 = new v8();
try { v28.constructor(); } catch (e) {}
const v30 = new C9();
v30?.__lookupGetter__;
try { new v5(v30); } catch (e) {}
const v33 = new C9();
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
const v36 = [-0.0,-0.0];
try { v36.concat(v36); } catch (e) {}
const v38 = [3.0597158617174465,-4.411570767198995];
[2.2250738585072014e-308,-1000.0,-2.2250738585072014e-308,-1000000000000.0,-1.7976931348623157e+308,5.829417207631678,1e-15];
class C40 {
}
const v41 = new C40();
try { v41.propertyIsEnumerable(v2); } catch (e) {}
function f43(a44, a45, a46) {
    const o48 = {
        get b() {
            return C40;
        },
        127: v41,
    };
    o48[127] = o48;
    return f43;
}
try { f43(v38, v8, v38); } catch (e) {}
%PrepareFunctionForOptimization(f43);
f43();
%OptimizeFunctionOnNextCall(f43);
f43(C40, v41, v41);
