const v3 = new Uint16Array();
let {...v4} = v3;
v4.b = v4;
const v7 = new BigInt64Array(4046);
let o8 = {
};
o8.e = o8;
[,...o8] = v7;
const v9 = new Int8Array(128);
v9[105];
function f11(a12, a13) {
    a12(f11);
    return a13;
}
f11.e = f11;
function f15() {
    Array(4087);
    for (const v19 of Array) {
    }
    return Array;
}
f15.caller = f15;
"1073741823" == "1073741823";
("catch")["1073741823"];
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    2105444095n >> a30;
    -4294967296n << -4294967296n;
    for (let v37 = 0; v37 < 100; v37++) {
        const o41 = {
            6: undefined,
            [268435439n]: 2105444095n,
            __proto__: a30,
            "g": a30,
            "b": v37,
            "arguments": this,
            valueOf(a40) {
                return v37;
            },
        };
        o41.g;
    }
    try { Math.ceil(-4294967296n); } catch (e) {}
}
new F26();
const v46 = new Uint32Array(3126);
v46[2876] = v46;
const v49 = new Uint16Array(2);
try { v49.some(Uint16Array); } catch (e) {}
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    a54--;
    [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v59 = [601759695];
    const o77 = {
        "c": -4294967297n,
        [522675525n](a65, a66) {
            try {
            } finally {
            }
        },
        ..."Vre",
        "maxByteLength": -128,
        "c": v59,
        valueOf(a68, a69) {
            return f15;
        },
        "e": -4294967295,
        "e": -268435456,
        "maxByteLength": -4294967295,
        "arguments": f11,
        ...v59,
        "type": -4294967295,
        ..."Vre",
        valueOf(a71, a72) {
            return Uint16Array;
        },
        ..."Vre",
        4: "Vre",
        "c": -268435456,
        "type": "Vre",
        "type": "Vre",
        toString(a74, a75, a76) {
            return Uint16Array;
        },
        5: -4294967295,
        6: -268435456,
    };
    try {
        this.d = v49;
    } catch(e78) {
    }
}
new F51(Int8Array, 2);
new F51(v46, 3126);
new F51(F51, 2);
try { Date.toString(); } catch (e) {}
new Date();
for (let v85 = 0; v85 < 5; v85++) {
    v46[v85] = 3126;
}
let v86 = 240;
v86++;
128 & 128;
function F89() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 268435440;
}
new F89();
try { new DataView(v86); } catch (e) {}
