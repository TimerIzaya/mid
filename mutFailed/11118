const v0 = [2.2250738585072014e-308,914.3712448875322,-76352.22326027718,-1.5152355581553257e+308,0.11544365564960413,1000000.0,-1.2377586936702844e+308];
const v1 = [511854.29866291606,5.115655194416311,Infinity,1.1690786234952735e+308,-4.0,5.0,2.2250738585072014e-308,-575.4800149324997,-1.0468619538519155e+308,2.2250738585072014e-308];
const o4 = {
    set e(a3) {
    },
};
o4.e;
const v6 = [-2.220446049250313e-16,1.7976931348623157e+308,4.0,0.07508873909657798,1.2799712338083236];
-2147483647 % -2147483647;
-854416606 >>> -854416606;
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    a14[4] = a14;
    try { a15.findLastIndex(F12); } catch (e) {}
    try {
        this.a = a14;
    } catch(e17) {
    }
    try {
        this.d = v1;
    } catch(e18) {
    }
}
const v19 = new F12(v0, v0);
const v20 = new F12(v6, -2147483647);
v20.b = v20;
const v21 = new F12(v1, -854416606);
function f22(a23, a24, a25, a26) {
    try { a25.groupToMap(f22); } catch (e) {}
    a26.d = a26;
    const o40 = {
        [a23](a29, a30, a31, a32) {
            a30.length -= 41414;
            const v33 = 41414 ** F12;
            new Int16Array(41414);
            const v36 = [];
            const o37 = {
                __proto__: v36,
            };
            try {
                super.getTimezoneOffset(-2147483647, a30, v33, a23, this);
            } catch(e39) {
            }
            return F12;
        },
        "a": a25,
        __proto__: a24,
        "arguments": v6,
        ...v20,
        "c": 41414,
    };
    try { o40.b(41414, a24); } catch (e) {}
    return o40;
}
const v42 = f22(v0, v20, v6, v19);
const v43 = f22(v1, v21, v0, v20);
v43.b = v43;
const v44 = f22(v1, v42, v0, v20);
v44.__proto__ = v44;
v44.e = v44;
const v45 = [-646258.8006221732,5.0,-1000000.0,2.2250738585072014e-308,-2.2250738585072014e-308,1000000.0];
for (let i = 0; i < 5; i++) {
    let v47 = 29 >>> 29;
    v47++;
    v45.length = 29;
}
const v51 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v52 = [601759695];
try { v52.push(-4294967297n); } catch (e) {}
const v54 = [1073741824,1073741823,1376142744,1073741825];
function f56(a57, a58, a59, a60) {
    a57 + a57;
    function f62() {
        "Vre" == "Vre";
        ("Vre").codePointAt("Vre");
        const v67 = v45.length;
        v67 + v67;
        try {
            v54.forEach(a58);
        } catch(e70) {
            const v71 = e70.message;
            try { v71.codePointAt(f62); } catch (e) {}
        }
        const v73 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o79 = {
            toString(a75, a76) {
                (a60 && a58) <= v73;
            },
        };
        -268435456 - -268435456;
        const o92 = {
            [522675525n](a83, a84) {
            },
            "c": v52,
            [-1]: 2684,
            "b": -4294967295,
            [-4294967297n](a86, a87, a88, a89) {
            },
            "arguments": v51,
            set b(a91) {
            },
            256: a60,
            ...v52,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
        };
        return v52;
    }
    f62.e = f62;
    const v93 = f62();
    try { v93.toLocaleString(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f62);
}
