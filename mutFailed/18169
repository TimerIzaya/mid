class C3 {
    e = "TBN";
    toString(a5) {
        const v6 = "TBN" < "TBN";
        if (v6) {
            Math.ceil(-2110095607);
            -117.41629710810162 & 9007199254740992;
            2 * v6;
        } else {
            try {
                super.assign(-65535, this, "TBN", "TBN");
            } catch(e15) {
            }
        }
        return this;
    }
}
try {
    const o16 = {
    };
} catch(e17) {
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
function f21(a22, a23, a24) {
    const o38 = {
        [a24]: a24,
        ["TBN"]: a24,
        get h() {
            a23 = a22;
            const v26 = v19.constructor;
            try { new v26(); } catch (e) {}
            const v28 = `
            `;
            eval(v28);
            const o37 = {
                __proto__: a23,
                [this]: a22,
                "arguments": 2,
                ...this,
                m(a32, a33) {
                },
                toString(a35, a36) {
                    return v28;
                },
                [2]: a23,
                [v20]: this,
            };
            return o37;
        },
        "b": a24,
        "e": "TBN",
        __proto__: v18,
    };
    return o38;
}
const v39 = f21(v20, v19, v20);
f21(v19, v19, v20);
f21(v39, v39, v20);
new Uint8ClampedArray(199);
new Uint8ClampedArray(1000);
new Float64Array(16);
const v54 = [-6.672391061426152e+307];
try { DataView.call(DataView); } catch (e) {}
function f57() {
    -(~v54["pop"]());
    return DataView;
}
%PrepareFunctionForOptimization(f57);
f57();
Array(19793);
v39.c = C3;
for (let v66 = 0; v66 < 5; v66++) {
    function f67() {
        const t75 = ("1073741824").constructor;
        const v71 = t75().replaceAll(f67, v66);
        return v71.toLowerCase(v71, "1073741824", v71);
    }
    f67();
    %OptimizeFunctionOnNextCall(f67);
}
%OptimizeFunctionOnNextCall(f57);
f57();
