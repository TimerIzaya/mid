const v0 = [1000000000.0,1000000000000.0,710.3411579614699,6.89784368442837,Infinity,188.24829364957532,8.422699235371126e+307,-3.0,0.13019542613550594];
const v1 = [4.595408678590346,634.2520230005675,1.678658443574512e+308,0.03854419317902913];
const v2 = [97825.52764725592,0.0,2.2250738585072014e-308,0.598390972163264,-710.1582294554485];
const v3 = [-65535];
const v4 = [387831676];
([-22946,-7269,-1341863250,9007199254740990,-704961140])[v0];
new Set();
class C13 {
    static get a() {
        const t9 = 4;
        t9[2] = v1;
        v1["flat"](-1);
        return this;
    }
    constructor(a18, a19, a20) {
        class C21 extends Set {
            #h;
            static #b;
        }
        new C21();
        new C21();
        new C21();
    }
    toString(a26, a27) {
        let v28 = undefined;
        const o29 = {
        };
        v28 = o29;
        function f30() {
            const v31 = [f30,f30,f30,f30];
            class C33 extends v31.constructor {
            }
            const v34 = new C33();
            const v35 = v34.constructor;
            const v36 = v35.bind();
            let v37;
            try { v37 = v36(v36, v31, f30, v36, v35); } catch (e) {}
            return v37;
        }
        f30();
        %OptimizeFunctionOnNextCall(f30);
        let v39;
        try { v39 = a27.values(); } catch (e) {}
        a = v39;
        return v2;
    }
    static #d = Set;
}
const v40 = new C13(v3, v0, v1);
new C13(v1, v4, v40);
new C13(v4, v4, v1);
new Int8Array(512);
new BigInt64Array(16);
new Uint8ClampedArray(15);
const v52 = `
    v4.__proto__;
`;
eval(v52);
const v56 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v59 = new Uint32Array(v56, 2684);
const v61 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v62 = [601759695];
const v63 = [1073741824,1073741823,1376142744,1073741825];
function f65(a66, a67, a68, a69) {
    function f70() {
        let v73 = Float64Array;
        v73 = a67;
        b = v62;
        const v74 = v56.length;
        try {
            v63.forEach(a67, v56);
        } catch(e76) {
        }
        const v77 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v79 = Symbol.toPrimitive;
        const o83 = {
            toString(a81, a82) {
                a81 *= v79;
                return v73;
            },
        };
        const o106 = {
            [522675525n](a86, a87) {
            },
            "c": v62,
            valueOf(a89, a90) {
            },
            [v74](a92) {
            },
            [-1]: 2684,
            1073741824: v59,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "arguments": v77,
            [eval](a94, a95, a96, a97) {
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v61,
            256: a69,
            ...v62,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            "c": 522675525n,
            ["Vre"](a101, a102) {
            },
            __proto__: v77,
            n(a104, a105) {
            },
            6: -268435456,
        };
        return o106;
    }
    const t118 = -4294967297n;
    t118();
    const v109 = new Int8Array();
    const v110 = v109.buffer;
    eval("");
    Uint32Array[2] = 1;
    v110.slice(2147483648);
    %OptimizeFunctionOnNextCall(f70);
    let v118;
    try { v118 = v63["find"](..."find", a69, ...v62, ...v63, ...522675525n); } catch (e) {}
    v118 <= a68;
    class C121 {
        [-2] = 31876;
    }
    new C121();
    return Uint8ClampedArray;
}
for (let v123 = 0; v123 < 10; v123++) {
    f65(v63, v123, v123, v123);
}
%OptimizeFunctionOnNextCall(f65);
f65(f65, v61, 2684, f65);
