/[\c_]/dm;
const v1 = /V\c~}/gdy;
/qDabc+/diy;
function f3() {
    return v1;
}
function f7() {
    return f3;
}
class C11 extends f3 {
    #valueOf(a13, a14, a15) {
        f7();
        new WeakSet();
        return f7;
    }
    get e() {
        try { this.test(f7); } catch (e) {}
        function F25() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = -65537;
            } catch(e28) {
            }
            try {
                this.g = -65537;
            } catch(e29) {
            }
        }
        const v30 = new F25();
        const v31 = new F25();
        const v32 = new F25();
        function F33(a35, a36) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = v32;
            } catch(e37) {
            }
            try {
                this.e = v32;
            } catch(e38) {
            }
        }
        const v39 = new F33(v31, v32);
        const v40 = v39?.constructor;
        try { new v40(F33, v32); } catch (e) {}
        new F33(v32, v32);
        new F33(v32, v30);
        let v47 = 591114.0785999324;
        const v48 = v47++;
        v48 & v48;
        const v51 = [v47,v47,v47];
        4 | 4;
        function F54() {
            if (!new.target) { throw 'must be called with new'; }
            const v56 = this?.__defineGetter__;
            try { new v56(v30, 11n); } catch (e) {}
            let v58;
            try { v58 = this.toString(this, F54, F54, this); } catch (e) {}
            try { v58.trimStart(); } catch (e) {}
            [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
            let v63;
            try { v63 = Date.toString(F54, 9223372036854775807); } catch (e) {}
            Date();
            let v67;
            try { v67 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
            try { v67.findIndex(v63); } catch (e) {}
            Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
            const v69 = new Uint32Array(5);
            let v70;
            try { v70 = v69.reduce(Date); } catch (e) {}
            try { v70.replaceAll(v67, v70); } catch (e) {}
            const v74 = new Set(v51);
            try { v74.forEach(v30); } catch (e) {}
            const v76 = v74?.add;
            try { new v76(v67); } catch (e) {}
            let v79;
            try { v79 = ("delete").blink(); } catch (e) {}
            v79[4] = v79;
            const v80 = v74["delete"](839612.5677247904);
            v80 || v80;
            const v82 = v80 || v80;
            v82 || v82;
            const v84 = v82 && v82;
            !v84;
            19793 >>> 19793;
            const o88 = {
            };
            o88.b = o88;
            o88.e = 19793;
            try { new Array(9223372036854775807); } catch (e) {}
            let v92;
            try { v92 = ("getPrototypeOf").blink(); } catch (e) {}
            v92[28];
            let v94;
            try { v94 = v92.strike(v47); } catch (e) {}
            try { v94.replace(19793, v39); } catch (e) {}
            -1.7976931348623157e+308 - -1.7976931348623157e+308;
            class C98 {
                ["getPrototypeOf"] = -1.7976931348623157e+308;
            }
            class C99 extends C98 {
                ["getPrototypeOf"] = C98;
            }
            try { new C99(); } catch (e) {}
            try { new C99(); } catch (e) {}
            C99.e = C99;
            const v102 = new C99();
            const v103 = v102?.getPrototypeOf;
            try { v103(); } catch (e) {}
            let v105;
            try { v105 = new v103(); } catch (e) {}
            const v106 = v105?.constructor;
            try { new v106(); } catch (e) {}
            const v108 = v102.constructor;
            let v109;
            try { v109 = new v108(F54, v84); } catch (e) {}
            const v110 = v109?.getPrototypeOf;
            try { new v110(); } catch (e) {}
            const v112 = Array(19793);
            for (const v113 of v112) {
            }
            const v114 = [v112,v112,v112,v112,v112];
            v114.g = v114;
            let v115;
            try { v115 = v114.includes(839612.5677247904); } catch (e) {}
            v115 || v115;
            const v117 = v115 && v115;
            v117 || v117;
            BigUint64Array.e = BigUint64Array;
            const v120 = new BigUint64Array();
            try { v120.reduceRight(v51); } catch (e) {}
            for (let v122 = 0; v122 < 5; v122++) {
                v122 >> v122;
            }
            ([[v114,v114,v114]])[0];
        }
        const v127 = new F54();
        v127?.constructor;
        function f129() {
            const o130 = {
            };
            const o131 = {
            };
            try {
                const o132 = {
                };
            } catch(e133) {
            }
            return undefined;
        }
        const o134 = {
            "apply": f129,
        };
        new Date();
        return v1;
    }
}
new C11();
new C11();
new C11();
const o145 = {
    toString(a142, a143) {
        new Date(Date);
        return Date;
    },
};
o145.toString();
