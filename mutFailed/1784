function f0() {
    let v3 = NaN;
    v3++;
    const o22 = {
        "d": 6.262828618594874,
        set h(a6) {
            let v8 = 0;
            do {
                v8 / this;
                try {
                    f0();
                } catch(e11) {
                }
                v8++;
            } while (v8 < 8)
            const v17 = 11640 >> v3;
            v3 + v8;
            11640 % v17;
            Math.round(11640);
            v17 - 64;
        },
        ..."buffer",
        __proto__: "buffer",
        "f": v3,
    };
    return o22;
}
const v23 = f0();
const v24 = f0();
const v25 = f0();
Number.isNaN(v25 % v25);
try {
    new f0();
} catch(e30) {
}
const v31 = /D[\cA]/vdim;
const v32 = /xa*/uds;
const v33 = /9[\011]?/gdimy;
class C34 {
    static #g;
    static 10 = v23;
    g = v33;
    static get d() {
        v25[this] = f0;
        v32[this] = this;
        this.f;
        this[118] = v31;
        this[3449313920];
        [v33];
        [C34];
        C34 = [this,v32,v23];
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeMaglevOnNextCall(f0);
        f0();
        Object.defineProperty(v31, 1, { writable: true, enumerable: true, get: f0 });
        return new.target;
    }
    6 = v33;
}
const v46 = C34[10];
new C34();
new C34();
const v49 = new C34();
class C50 extends v46 {
    p(a52, a53) {
        const v57 = this | this;
        Math.cbrt(+v57);
        v57 / 51587;
        return v24;
    }
    #e = v24;
    4160018358 = v49;
    [v49] = C50;
    static 1073741824 = v23;
}
new C50();
new C50();
new C50();
const v66 = new Int32Array(12);
for (const v67 in v66) {
    try { v67.fixed(); } catch (e) {}
}
