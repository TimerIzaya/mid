try {
    const o7 = {
        "maxByteLength": 4037,
    };
    const v9 = new SharedArrayBuffer(16, o7);
    new Int16Array(v9);
} catch(e12) {
    const v13 = [e12,e12,e12];
    [v13,v13,v13,v13,-65537n];
    [e12];
} finally {
    const t11 = -65536;
    t11[Symbol.isConcatSpreadable] = -65536;
}
-65537n >> -65537n;
const v22 = new Int16Array(5);
try {
    v22.b = 128;
} catch(e23) {
}
try {
    v22.b = 5;
} catch(e24) {
}
try { new Uint32Array(Uint32Array, Uint32Array, 3535n); } catch (e) {}
const v28 = new Uint32Array(4);
v28[3];
const v32 = new Int16Array(4);
function F34(a36, a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.__lookupSetter__;
    try { new v40(a37); } catch (e) {}
    try { a37.bind(a36); } catch (e) {}
    a39 + a39;
}
F34.caller = F34;
const v44 = new F34(164140152, F34, 164140152, 164140152);
const v46 = 522675525n & 522675525n;
for (let v47 = 0; v47 < 5; v47++) {
    const v48 = v28;
    v48 == 522675525n;
    const v50 = v28[v46];
    const v51 = v50 & 522675525n;
    try { v50.p(v32, v51); } catch (e) {}
    function f53() {
        const v55 = ("Vre").strike();
        try { v55.fontcolor(v28); } catch (e) {}
        const v57 = v55.link();
        v57[26];
        v57.includes(164140152);
        const v61 = Array();
        const v62 = v61?.includes;
        try { new v62(v47); } catch (e) {}
        v61.unshift(v44, v47, F34, v47, v61.pop());
        Set.prototype;
        const v68 = new Set();
        v68.add().entries();
        class C71 {
        }
        const v72 = new C71();
        !v72.hasOwnProperty(v57);
    }
    %OptimizeFunctionOnNextCall(f53());
}
