class C3 {
    static 1073741825 = "b1";
    static {
        function f5() {
            function f6(a7) {
                new Int8Array(6);
                const v13 = new Float32Array(4096);
                new Uint8Array(257);
                return v13;
            }
            return f6;
        }
        function f17(a18) {
            ([4,60362,23763,-7,536870888,4,-1073741824,4,-63340]).unshift([64068,-4294967295,-7450,37275,9], typeof /(foo(?!bar)baz)/gis === "undefined", -11);
        }
        Object.defineProperty(this, "toString", { writable: true, configurable: true, get: f5, set: f17 });
        super.f;
        const v28 = super.c;
        try { v28(); } catch (e) {}
        this in this;
        this[7];
    }
    #p(a33, a34) {
        let v35;
        try { v35 = a33(a33, -1054059062, "b1", -1054059062, "b1"); } catch (e) {}
        new Int8Array(64);
        Reflect.construct(Int8Array, [Reflect,a34,-1054059062], v35);
        try {
            a33.__proto__ = Reflect;
        } catch(e43) {
        }
        new Int32Array(4096);
        new BigInt64Array(929);
        return -1054059062;
    }
}
new C3();
new C3();
new C3();
[61781,1000];
[268435456,257,-8,-9,-9,-22440,-9007199254740992,512,16];
[-24729,5824,-838650550,64,-10,-2147483649,65535,-585327684];
[-8,9,16376,-65536,-1897992064,41424156,-4,1150474815,8];
[16];
[-1431491973];
const v61 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f62(a63, a64) {
    const v67 = new Int8Array(8);
    return [v67];
}
v61[Symbol.toPrimitive] = f62;
const v72 = new Uint32Array();
function f73() {
    return f62;
}
Object.defineProperty(v72, "constructor", { configurable: true, get: f73 });
let v74 = -4294967297n;
const v75 = v74--;
const v76 = [601759695];
const v77 = [1073741824,1073741823,1376142744,1073741825];
function f78(a79, a80, a81, a82) {
    const v83 = a79.constructor;
    let v84;
    try { v84 = v83(); } catch (e) {}
    const v85 = v84?.constructor;
    Object.defineProperty(v85, Symbol.toPrimitive, { writable: true, value: f62 });
    let v88;
    try { v88 = v85(f78, a79, v61, Uint32Array, v83); } catch (e) {}
    function f89() {
        const v91 = ("Vre").charAt(v88);
        const v92 = v91.blink();
        let v93;
        try { v93 = ("Vre").codePointAt(v61); } catch (e) {}
        v93 % v93;
        let v95 = Float64Array;
        v95 = a80;
        b = v61;
        let v96 = v61.length;
        v96++;
        try {
            v77.forEach(a80);
        } catch(e99) {
            e99.message = e99;
        }
        const o111 = {
            "c": v74,
            valueOf(a101, a102) {
                return v84;
            },
            1073741824: v72,
            [v74](a104, a105, a106, a107) {
                const o109 = {
                    ...this,
                    "g": a104,
                };
                %VerifyType(v92);
                eval(v91);
            },
        };
        return v77;
    }
    const v112 = f89();
    const v114 = Array(v85);
    let v115;
    try { v115 = v114.findLast(); } catch (e) {}
    const v117 = Int8Array.of();
    let v118;
    try { v118 = v117.every(v117, a79, v117, a80, Array); } catch (e) {}
    const v119 = new Int8Array(v118);
    function f120() {
        function f122(a123) {
            let v124;
            try { v124 = v115(this, a123, a123, v85); } catch (e) {}
            a82 = v124;
        }
        this.onmessage = f122;
        try { v114.keys(); } catch (e) {}
    }
    const v128 = [];
    const o129 = {
        "arguments": v128,
        "type": "function",
    };
    new Worker(f120, o129);
    const v131 = v119.buffer;
    function f132(a133, a134) {
        class C136 {
            static 9 = 9.187362692894364;
        }
        return v112;
    }
    v131.constructor = f132;
    const v137 = v131.slice();
    function f138() {
        const v140 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
        const v143 = new Int32Array(v140, 10);
        class C144 {
            static #d = 10;
            constructor(a146, a147) {
                try {
                    v140.#d += v143;
                } catch(e148) {
                }
            }
        }
        return v88;
    }
    v137.constructor = f138;
    const v149 = v137.constructor;
    try { v149(v137, v118, v75, v117, a79); } catch (e) {}
    const v152 = new Int32Array(v149, v83, v83);
    v152.lastIndexOf(a79, a81);
    try { v77["find"](..."find", a82, ...v76, ...v77); } catch (e) {}
    return v74;
}
f78.toString = f73;
for (let v156 = 0; v156 < 10; v156++) {
    f78(v72);
}
%OptimizeFunctionOnNextCall(f78);
f78(Uint32Array);
