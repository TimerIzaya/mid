[-49.751494430752246,1.546861823650607e+308,0.0,2.220446049250313e-16,1000000.0,-2.220446049250313e-16,-1000000000000.0,-3.0,-318816.728800311,-2.0];
[-826.9189243951076,0.9028021269174984];
[0.9266151401937621,-5.0,1e-15];
let v4 = 6;
const v5 = v4--;
function f6() {
    const v8 = new Set();
    v8.size += v5;
    return v8;
}
%PrepareFunctionForOptimization(f6);
function f11() {
    return "o";
}
let v12 = 4096;
for (let i17 = (() => {
        function f14() {
            return f14;
        }
        const o16 = {
            [f14]() {
            },
        };
        return 0.8037056182165817;
    })();
    i17 < 10;
    i17++) {
}
new Uint16Array(v12);
const v28 = Symbol.toPrimitive.description;
const o29 = {
};
o29.raw = v4;
const v30 = v28.constructor;
try { v30.raw(o29); } catch (e) {}
new Uint32Array(3);
for ((() => {
        function F35(a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
        }
    })();
    v12--;
    ) {
}
new Int16Array(3565);
function f43(a44, a45, a46, a47) {
    const o55 = {
        [-4294967297n](a49, a50, a51, a52) {
            eval(a52);
        },
    };
    const v57 = new Int8Array();
    const v58 = v57.buffer;
    v58.slice(a45);
    function f60(a61) {
        const v62 = [601759695];
        const v63 = [1073741824,1073741823,1376142744,1073741825];
        try { v63["find"](..."find", undefined, ...v62, ...undefined); } catch (e) {}
        const v67 = [];
        const o68 = {
            __proto__: v67,
        };
        function f69(a70, a71, a72, a73) {
            const v76 = new BigInt64Array(4046);
            let v77 = undefined;
            const v78 = v77++;
            (v78 >> v78) >>> a73;
            let o81 = {
            };
            [,...o81] = v76;
            return 4046;
        }
        for (let v82 = 0; v82 < 5; v82++) {
            f69();
        }
        return a45;
    }
    f60(v58);
    const v86 = [Uint32Array,Uint32Array,Uint32Array,Uint32Array];
    v86.__proto__ = v86.push();
    class C89 {
    }
    const v90 = new C89();
    [..."A",v90];
    v58.constructor = f60;
    v58.slice();
    return f60;
}
f43[Symbol.toPrimitive] = f6;
for (let v95 = 0; v95 < 10; v95++) {
    f43();
}
%OptimizeFunctionOnNextCall(f43);
f43(-4294967297n, f43, f43, f43);
