function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 5;
    } catch(e3) {
    }
    try {
        this.b = 5;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
new Int16Array(2591);
([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
function f15() {
    return f15;
}
const v17 = new Map();
try { v17.set(Array, f15); } catch (e) {}
function f19() {
    return v17;
}
try { f19(); } catch (e) {}
function f24(a25) {
    const o28 = {
        ...65536,
        5: 65536,
        __proto__: a25,
        valueOf(a27) {
        },
        "d": 4,
        "g": 65536,
        163: 4,
    };
}
new Uint8Array(52);
new BigUint64Array(66);
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
}
const v38 = new F34();
const o39 = {
    129: v38,
};
class C40 {
    static 182 = f15;
    constructor(a42, a43, a44) {
        super();
        super.f = a42;
    }
    #valueOf(a46, a47, a48) {
    }
}
const v52 = new BigUint64Array(10);
for (const v54 in v52) {
    new Float64Array(2147483647);
}
