const v0 = [];
const v1 = [-Infinity,-1e-15,455675.70365393395];
const v2 = [-1000.0,-1000000.0,0.5873147124741304,1e-15,-482054.5105078031,1.0356760405805352e+308,0.9083166095379908,-5.0,5.0,225272.92629340803];
const v3 = [-2.220446049250313e-16];
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    let v7 = a6[1];
    try {
        this.c = v3;
    } catch(e8) {
    }
    try {
        this.e = v1;
    } catch(e9) {
    }
    try {
        this.g = v3;
        let v10 = 0;
        while (v10 < 4) {
            v7 |= this;
            v10++;
        }
    } catch(e14) {
    }
}
let v15;
try { v15 = F4.toString(); } catch (e) {}
const v16 = new F4(v1);
let v18;
try { v18 = new v15(undefined, undefined); } catch (e) {}
const v19 = [v15,v2,v3,v3];
[v15];
[v19,v1,F4,v16,v18];
let v23 = -16n;
function f24() {
    v23 *= -1911645276n;
    return -1911645276n;
}
f24();
new F4(v16);
const v27 = new F4(v0);
v27.c = v27;
45188 - 45188;
const v34 = [536870888,4096,-11];
try { v34.pop(); } catch (e) {}
Object.defineProperty(v1, "e", { writable: true, enumerable: true, get: f24 });
const o42 = {
    "maxByteLength": 257,
};
const v44 = new ArrayBuffer(257, o42);
new DataView(v44);
const v48 = [31909n];
v48[0] = v48;
const v49 = v34.includes;
try { v49("symbol"); } catch (e) {}
Reflect.apply(v49, "symbol", v48);
