function f0() {
    Object.defineProperty("FjS", -27895, { get: f0 });
    const o7 = {
    };
    try {
        o7.b = -35651;
    } catch(e8) {
    }
    try {
        const o9 = {
        };
        o9.b = -35651;
        o9.a = f0;
    } catch(e10) {
    }
    try {
        const o11 = {
        };
        o11.b = -35651;
        o11.a = f0;
        o11.g = -27895;
    } catch(e12) {
    }
    try {
        const o13 = {
        };
        o13.b = -35651;
        o13.a = f0;
        o13.g = 463897.13567618374;
    } catch(e14) {
    }
    const o24 = {
        ..."FjS",
        ..."FjS",
        m(a16) {
            const o19 = {
                "maxByteLength": 65537,
            };
            const v21 = new ArrayBuffer(163, o19);
            new Int8Array(v21);
            return this;
        },
    };
    return o24;
}
const v25 = f0();
const v26 = f0();
const v27 = f0();
function f28(a29) {
    function* f30(a31, a32, a33, a34) {
        yield "-63959";
        return a32;
    }
    f30(v26, v27, a29, v26);
    const o55 = {
        p(a41, a42) {
            const v43 = a42 in a29;
            try {
                a29.g = v43;
            } catch(e44) {
            }
            const v45 = [a41,v25];
            [[v43],v45];
            return v45;
        },
        ...a29,
        [a29]: v25,
        set c(a49) {
            try {
                const o50 = {
                };
                this.p(o50, /(x)(x)(x)\4/i, this, -984203444);
            } catch(e54) {
            }
        },
        ...a29,
    };
    return o55;
}
const v56 = f28(v27);
f28(v25);
const v58 = f28(v26);
class C62 extends f0 {
    get a() {
        const v64 = [this];
        [v64];
        const v66 = [f28];
        v56.g *= 15;
        try {
            v58.p(v66, v64);
        } catch(e68) {
        }
        return v66;
    }
    [4294967296];
    h = 15;
    #d;
}
new C62();
new C62();
new C62();
const v75 = ["number","number","number","number"];
const v76 = [v75,v75];
function F77(a79, a80, a81) {
    if (!new.target) { throw 'must be called with new'; }
    const v82 = this.constructor;
    try { new v82(this, this); } catch (e) {}
    a79[1] = a79;
    a80[4] = a80;
    try {
    } catch(e84) {
    }
}
new F77(v75, v76);
new F77(v76, v75);
