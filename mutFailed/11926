function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -4294967297;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
const v8 = ~389;
Int32Array.d = Int32Array;
new Int32Array(v8);
const v13 = new Float32Array(v8);
try { v13.sort(Int32Array); } catch (e) {}
v8 + 11;
new Uint8Array(11);
for (let v19 = 0; v19 < 5; v19++) {
    function f20() {
        const v23 = Symbol.toPrimitive.description;
        try { v23.substring(Symbol, Symbol); } catch (e) {}
        const v25 = v23.codePointAt();
        v25 >> v25;
        return v19;
    }
    f20();
    %OptimizeFunctionOnNextCall(f20);
}
