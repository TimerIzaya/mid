const v2 = new Int32Array(14);
const v5 = new Uint32Array(255);
new Int16Array(256);
[14,v5];
[14,Int32Array,Uint32Array];
[v2];
class C15 {
    get b() {
        this in this;
        try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
        return this;
    }
    static #n(a20, a21) {
        function f22(a23) {
            return a21;
        }
        class C24 extends f22 {
            ["toStringTag"] = a21;
            static #e;
            #h = f22;
        }
        return "toStringTag";
    }
}
let v25 = new C15();
const v26 = new C15();
const v27 = new C15();
function f28(a29, a30, a31) {
    const o52 = {
        m(a33, a34) {
            function F36(a38, a39) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a38;
                } catch(e40) {
                }
            }
            new F36(a33, a34);
            const v42 = new F36(f28, a34);
            new F36(f28, v42);
            new Int32Array(1979);
            new BigInt64Array(3063);
            new Float32Array(127);
            return a31;
        },
        ["JbyK"]: a30,
        "b": v27,
        "h": -974509.5958479184,
    };
    return o52;
}
const v53 = f28(v27, v25, v26);
const v54 = f28(v53, v27, v27);
const v55 = f28(v53, v54, v54, v54);
const v56 = [-9223372036854775807,-32706,257,9,-23705,9007199254740990,-16801,-57620,-207650968,1073741823];
const v57 = [-9223372036854775808];
[128,6,1024,4096,25098,-142731813,2147483647,-7];
class C59 extends f28 {
    m(a61, a62) {
        v25 = ("toStringTag")[f28];
        for (let v64 = 0; v64 < 32; v64++) {
            v57["p" + v64] = v64;
        }
        return v25;
    }
    #m(a68, a69, a70, a71) {
        try {
            C15.#m();
        } catch(e73) {
        }
        return a71;
    }
    [v25] = "toStringTag";
    a = v56;
    [v26] = v53;
    g;
    f;
    d = v53;
    10;
    38 = "JbyK";
}
const t81 = 256;
new t81();
new C59(v53, v55, C15);
new C59();
function f77() {
}
new Int8Array();
new Float32Array(1000);
new Uint8Array(58);
function F87() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v91 = Array(19793);
        for (const v92 of v91) {
        }
        [v91,v91,v91];
        new BigUint64Array();
        [];
        for (let v98 = 0; v98 < 50; v98++) {
        }
        [] >= Uint16Array;
    } catch(e102) {
    }
}
new F87();
new F87(f28);
