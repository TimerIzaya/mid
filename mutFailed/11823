const v0 = [];
class C1 {
    constructor() {
        let v2 = this;
        v2 ||= v2;
        256 + 256;
        const o6 = {
            "maxByteLength": 256,
        };
        o6.maxByteLength;
        const v9 = new ArrayBuffer(256, o6);
        const v11 = Int32Array?.constructor;
        try { new v11(C1); } catch (e) {}
        new Int32Array(v9);
    }
}
function f14() {
    try { C1.toUpperCase(v0, C1, C1); } catch (e) {}
    function f16() {
        for (const v20 of Array(4087)) {
        }
        return 4087;
    }
    f16();
    return v0;
}
C1.toString = f14;
const v22 = new C1();
const v23 = new C1();
v23.length = v23;
const v24 = new C1();
function f25(a26, a27) {
    a26 = f14;
    for (let v28 = 0; v28 < 100; v28++) {
        f14();
    }
    return v24;
}
v24.toString = f25;
const v30 = v24?.constructor;
try { new v0(); } catch (e) {}
try { ("string").codePointAt(v24); } catch (e) {}
const v36 = [v30,v23,"string","e"];
v36[3] = v36;
const v37 = [v23,"string",v36,"string",v36];
[v37,v37];
const v41 = new BigUint64Array(9);
v41[4];
new BigUint64Array(257);
function f48() {
    return v0;
}
Object.defineProperty(Uint32Array, 0, { writable: true, configurable: true, get: f48 });
Uint32Array.prototype = Uint32Array;
new Uint32Array(Uint32Array);
const v50 = /xEz\xe2\x81\xa3/gumy;
v50.toJSON = v41;
function f51(a52, a53, a54) {
    return v50;
}
try { f51(v37, 9, v22); } catch (e) {}
const v58 = ["function",v50];
const o59 = {
    "arguments": v58,
    "type": "function",
};
new Worker(f51, o59);
