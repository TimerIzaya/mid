const v2 = new Int32Array(5);
const v5 = new Int32Array(181);
function f6() {
    function f7(a8) {
        const o11 = {
            "execution": "async",
            "type": "minor",
        };
        return Int32Array;
    }
    return f7;
}
function f12(a13) {
    const v14 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v16 = new Uint32Array();
    let v17 = -4294967297n;
    v17--;
    const v19 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v20 = [601759695];
    const v21 = [1073741824,1073741823,1376142744,1073741825];
    function f23(a24, a25, a26, a27) {
        arguments.length;
        function f30() {
            try { ("Vre").codePointAt("Vre"); } catch (e) {}
            let v33 = Float64Array;
            v33 = a25;
            b = v20;
            v14.length;
            try {
                v21.forEach(a25);
            } catch(e36) {
            }
            const o50 = {
                "c": v17,
                "c": v20,
                valueOf(a38, a39) {
                },
                1073741824: v16,
                [v17](a41, a42, a43, a44) {
                    class C46 extends Date {
                        static get c() {
                        }
                    }
                    eval();
                },
                "arguments": v19,
                256: a27,
            };
        }
        f30();
        try { Int8Array.of(); } catch (e) {}
        const v54 = new Int8Array();
        v54.buffer.slice(2147483648);
        const v60 = new Int32Array(1024);
        const v61 = v60[3];
        v61 * v61;
        for (let v63 = 0; v63 < 5; v63++) {
        }
        %OptimizeFunctionOnNextCall(f30);
        try { v21["find"](..."find", a27, ...v20, ...v21, ...522675525n); } catch (e) {}
        return arguments;
    }
    f23(v16, 181, 181, 181);
    %OptimizeFunctionOnNextCall(f23);
}
Object.defineProperty(v5, "toString", { enumerable: true, get: f6, set: f12 });
const v69 = new Uint8Array(8);
class C70 {
    set h(a72) {
        for (const v73 of a72) {
            v73 % Int32Array;
        }
        [-3.0,-2.2250738585072014e-308,-1000000000000.0,1000.0];
        [-1.7976931348623157e+308,-1000000.0,-799.8654601467888,5.290920765799045];
        [-2.220446049250313e-16,1.0];
    }
    #h;
    [Int32Array] = v2;
    constructor(a79, a80, a81) {
        v69[v5];
        let v84 = -63703;
        let v85 = 536870887;
        --v84;
        const v87 = ++v85;
        --v85;
        !v87;
    }
}
new C70(8, 8, 181);
new C70(181, 5, 5);
new C70(8, 8, 8);
for (let [v97,...v98] of "atan2") {
}
const o118 = {
    o(a100) {
        try { a100.o(); } catch (e) {}
        const o103 = {
        };
        gc(o103);
        function f106(a107, a108) {
            const o109 = {
                [10000n]: a108,
            };
            return o109;
        }
        f106(10000n, f106);
        const v112 = new BigInt64Array();
        const v115 = new Uint8ClampedArray(12);
        let {"byteLength":v116,...v117} = v115;
        v112.valueOf = f106;
        return o103;
    },
};
o118["o"](o118);
