function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "h", { value: -2147483649n });
    try {
        this.h = a5;
    } catch(e6) {
    }
}
const v7 = new F3(536870888n);
new F3(v7);
new F3(129n);
if ("log1p") {
}
59817n < undefined;
this instanceof Float32Array;
function f18() {
    class C19 {
    }
    const v20 = new C19();
    const v21 = v20.constructor;
    const v22 = new v21(f18);
    const v23 = v22.constructor;
    const v24 = new v23();
    const v25 = v20.constructor;
    const v26 = new v25();
    const v27 = new v25(v23, f18, v26, v24, v21);
    const t26 = v27.constructor;
    const v29 = new t26();
    const t28 = v29.constructor;
    new t28();
    class C33 {
        b = "c";
        static #h;
        268435439;
        static #c;
    }
    [-788.7260290236088,C33];
    const v36 = new C19();
    const v37 = v36.constructor;
    const t39 = v37.valueOf(v37, v37, f18, v37);
    new t39();
    return v29;
}
new Int32Array(3);
new Uint8Array(192);
for (let i48 = 0, i49 = 10; i48 < i49; i48++) {
    continue;
}
const o56 = {
    "maxByteLength": 7,
};
const v58 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
function f59() {
    return f18;
}
function f60(a61) {
    -261.1271706035858 + -261.1271706035858;
}
Object.defineProperty(v58, Symbol.toPrimitive, { writable: true, get: f59, set: f60 });
class C66 extends Int16Array {
    [v58];
}
function f69() {
    const v70 = [];
    v70[6] = 3;
    v70[6] = 4294967295;
    const o74 = {
        set b(a73) {
        },
    };
    return 4294967295;
}
f69();
new BigUint64Array(9);
function F77(a79, a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    new BigUint64Array(3216, 3216, 3331);
    const v87 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    let v88 = 2684;
    v88--;
    const v91 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v92 = [601759695];
    const v93 = [1073741824,1073741823,1376142744,1073741825];
    function f95(a96, a97, a98, a99) {
        function f100() {
            ("Vre").codePointAt("Vre");
            const v104 = v87.length;
            try {
                v93.forEach(a97);
            } catch(e106) {
                e106.message;
            }
            const v108 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const o114 = {
                toString(a110, a111) {
                    (a99 && a97) <= v108;
                },
            };
            const o132 = {
                [522675525n](a117, a118) {
                },
                "c": v92,
                [v104](a120) {
                },
                [-1]: v88,
                "b": -4294967295,
                [-4294967297n](a122, a123, a124, a125) {
                },
                "arguments": v91,
                set b(a127) {
                },
                256: a99,
                ...v92,
                "type": "Vre",
                ..."Vre",
                "execution": "log1p",
                "g": 7,
                ...-4294967295,
                o(a129) {
                    gc();
                    return this;
                },
                4: "Vre",
                "c": -268435456,
            };
            return v92;
        }
        f100();
        %OptimizeFunctionOnNextCall(f100);
    }
}
const o139 = {
    "arguments": v58,
    p(a137, a138) {
        return this;
    },
    ..."async",
    "execution": "async",
};
o139.type = Float32Array;
const v140 = gc(o139);
v140.then(v140, F77);
