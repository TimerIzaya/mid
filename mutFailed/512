function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1489843090;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
v4.g = v6;
function F7(a9) {
    if (!new.target) { throw 'must be called with new'; }
    a9.g;
    try {
        this.a = v4;
    } catch(e11) {
    }
}
let v12;
try { v12 = new F7(F7); } catch (e) {}
const v13 = new F7(v6);
v13.a = v13;
new F7(v4);
const v15 = new F7(v6);
v15.a = v15;
const v16 = [-1335654396,-2,-9,-4294967295,-15,-16];
let v17;
try { v17 = v16.reduce(v16); } catch (e) {}
let [,...v19] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
try { v12.unshift(F7); } catch (e) {}
try { v17.codePointAt(F0); } catch (e) {}
try { ("function")["-268435456"](); } catch (e) {}
[2147483647,4294967296,-7,-277691152,-616812028,-788936298];
[38857,-4294967296,1073741824,-4096,33257,2];
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this?.constructor;
    try { new v32("-268435456", a31); } catch (e) {}
    a30.prototype;
    a31.arguments = a31;
}
const v35 = new F28(F28, F28);
const v36 = v35?.toLocaleString;
try { new v36(); } catch (e) {}
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
function f41() {
    return 3.5885237423067196;
}
1042950492 >> 1042950492;
let v45 = 7;
Int16Array.length = Int16Array;
new v17(1746);
const v51 = new Uint32Array(16);
function f53(a54, a55, a56, a57) {
    const o65 = {
        129: a54,
        "a": v16,
        "c": "Ju",
        "e": f53,
        "h": v6,
        "d": a56,
        p(a59, a60, a61) {
            return "Ju";
        },
    };
    return a54;
}
try { Uint32Array.from(16); } catch (e) {}
new Uint32Array(257);
v45 &&= 1073741824;
function f70(a71, a72) {
    const v75 = new Uint8Array();
    v75.c = 1073741825;
    function f76(a77, a78) {
        const o79 = {
            "f": a78,
        };
        return o79;
    }
    function f81(a82) {
        try {
            new f41();
        } catch(e84) {
        }
    }
    this.onmessage = f81;
    try {
        v51.length = 1073741824;
    } catch(e85) {
    }
}
const v88 = [Uint32Array,3.5885237423067196];
const o89 = {
    "arguments": v88,
    "type": "function",
};
new Worker(f70, o89);
