let v2 = eval();
const o5 = {
    [9007199254740992n]: -43292n,
};
function f7(a8, a9, a10) {
    try {
    } catch(e11) {
    }
}
const v15 = new Int16Array(128);
const v18 = new Int32Array(3322);
const v19 = [601759695];
v19.d = v2;
const v20 = [1073741824,1073741823,1376142744,1073741825];
function f23(a24, a25) {
    try { v15.includes(1); } catch (e) {}
    try {
        v19.d = -2094333129;
    } catch(e27) {
    }
    v18[f23] <<= 3322;
}
const v29 = new Promise(f23);
try { v20["find"](..."find", v15, ...v19, ...v20, ...522675525n); } catch (e) {}
const v35 = new BigUint64Array(1000);
v35.indexOf(-3.0);
const v38 = new Int32Array(244);
const v39 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
v39.p8 = v39;
const v41 = v39.__proto__;
function f42() {
    return f23;
}
function f43(a44) {
}
Object.defineProperty(v41, "p22", { writable: true, configurable: true, get: f42, set: f43 });
try { v41.findLastIndex(v38, 0, 1000); } catch (e) {}
async function* f49(a50, a51, a52) {
    return a51;
}
f49();
try {
    v2 |= -3.0;
} catch(e54) {
    v38.byteOffset ^= -3.0;
}
for (let v56 = 0; v56 < 32; v56++) {
    v39["p" + v56] = v56;
}
function f60() {
    gc();
    const o65 = {
    };
    v29.then();
    return 59817n !== undefined;
}
const t56 = "9007199254740992";
t56["255"] &= 7;
function f71(a72, a73, a74, a75) {
    try { v19["find"](..."find", a75, ...v19); } catch (e) {}
    return a72;
}
f71();
f60();
const v80 = new Float32Array(6);
v80.fill();
