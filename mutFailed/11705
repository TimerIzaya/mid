new Float32Array(1989);
async function f3(a4, a5, a6) {
    return a5;
}
const v7 = [];
const v8 = [v7,v7,v7];
[v8,v8] >= Uint16Array;
try { new BigUint64Array(0, 0, 1989); } catch (e) {}
const v15 = new BigUint64Array(0);
const v18 = new v15(7);
const v20 = new Set();
try { new Uint16Array(v20, v18, v20); } catch (e) {}
new Int32Array(2, v18, Int32Array);
new BigInt64Array(1024);
9 / 9;
new Uint8Array(9);
1706 !== 1706;
new Uint16Array(1706);
let v38 = 129;
function f39(a40) {
    const o43 = {
        valueOf(a42) {
        },
    };
}
v38++;
function F45(a47) {
    if (!new.target) { throw 'must be called with new'; }
    function f48(a49, a50, a51) {
        function f53(a54) {
            return a49;
        }
        a50 > a47;
        f53 && a49;
        return a47;
    }
    Worker(f48);
}
F45.length = F45;
const v64 = new Uint8ClampedArray();
Float32Array[6] = v64;
new Float64Array(200);
