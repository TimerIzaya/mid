const v0 = [5.0,4.0,0.9310760928058399,-Infinity,-5.0,-9.851667003104759e+307,5.0,1.3221667426047805,-Infinity,-1000000000.0];
const v1 = [2.0,602.7394934894228,-401.73340340226105,291.80650606871836,6.823460138872982e+307,694504.4438495857,Infinity,-8.055160483695613e+307,57138.23244416574];
const v2 = [3.2901453888192034,664.4087725260674];
function f3(a4) {
    const o21 = {
        ...v2,
        __proto__: v2,
        [v2]: v2,
        ...v1,
        "c": a4,
        "h": v2,
        p(a6) {
            for (let v7 = 0; v7 < 32; v7++) {
                const v9 = "p" + v7;
                return v2;
                ("c").toUpperCase();
                function F13() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v15 = new F13();
                function f16(a17) {
                    return 1000.0;
                }
                v15.toString = f16;
                v0[v9] = v7;
            }
            new Float32Array(1024);
            for (let i = 0; i < 5; i++) {
            }
            return v0;
        },
    };
    o21[6] = o21;
    return o21;
}
try { new f3(v0); } catch (e) {}
const v23 = f3(v1);
f3(v1);
const v25 = f3(v2);
function f29() {
    return v1;
}
try { f29(); } catch (e) {}
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    a33[3] = a33;
    try { a34.shift(); } catch (e) {}
    try {
        this.f = f29;
    } catch(e37) {
        new Float64Array(2147483647);
        function F41(a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            a43.e = a43;
            const v45 = this?.constructor;
            try { new v45(this); } catch (e) {}
            this.c = a43;
        }
        new F41(F41, F41);
    }
}
15 / 15;
const v50 = new f29();
const v51 = v50?.__lookupSetter__;
try { new v51(15); } catch (e) {}
undefined << 0.28963498121041586;
const v56 = new F31(v0, v25, "g");
const v57 = new F31(v1, v23, "g");
const v58 = v57?.f;
try { new v58(); } catch (e) {}
new F31(v23, v23, "3");
function f61() {
    class C62 {
        constructor(a64) {
            const v65 = /[^7Y[a-zA-Z0-9]?]/vdmy;
            v65.unicodeSets = v65;
            for (let v66 = 0; v66 < 5; v66++) {
                function f67() {
                    const v69 = /a\s/vims;
                    for (let v70 = 0; v70 < 5; v70++) {
                        Uint32Array.b = Uint32Array;
                        const o73 = {
                        };
                        o73.b = o73;
                        o73[Uint32Array] -= -2147483649;
                        class C74 {
                        }
                        try { new BigUint64Array(F31, BigUint64Array, v66); } catch (e) {}
                        new BigUint64Array(v70, v70, v70);
                    }
                    const v78 = v69[v66];
                    const v79 = Array();
                    try { v79.reduceRight(v65); } catch (e) {}
                    return v78;
                }
                f67();
            }
        }
    }
    try { C62.toString(); } catch (e) {}
    const v83 = new C62();
    const v84 = new C62(f61);
    const v85 = v84?.constructor;
    try { new v85(v56); } catch (e) {}
    class C87 extends C62 {
    }
    new C87();
    return v83;
}
%PrepareFunctionForOptimization(f61);
const v89 = f61();
const v90 = v89?.constructor;
try { new v90(v89); } catch (e) {}
%OptimizeFunctionOnNextCall(f61);
const v92 = [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
try {
const t0 = 1073741825n;
t0(v92);
} catch (e) {}
function f95(a96, a97, a98) {
    try { a96(); } catch (e) {}
    return a96;
}
const v100 = f95(f95, f95, f95);
v100.h = v100;
f95();
f61();
