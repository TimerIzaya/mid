const v2 = new BigUint64Array(2);
let v3 = 874;
const v5 = new Float64Array(2);
new Uint16Array(16);
[Uint16Array,v2,v2,Uint16Array];
[2,v2];
const v11 = [16,v3,16,v3];
const v12 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f13(a14, a15, a16, a17) {
    a16?.constructor;
    const v19 = /(?:a*)+q(?<a>.)/guds;
    function f20(a21) {
        const v22 = v12.constructor;
        v22(v22);
        v19.constructor.$2;
    }
    delete v11[a16];
    let [] = v5;
    ++v3;
    Math.sign(-600243237);
    Math.sqrt(-128);
    for (let [i38, i39] = (() => {
            function f34(a35, a36) {
            }
            return [0, 10];
        })();
        (() => {
            const v40 = i38 < i39;
            !v40;
            return v40;
        })();
        i39--) {
        for (let v47 = 0; v47 < 25; v47++) {
            f20(a16);
        }
    }
    function f49() {
    }
    return f49;
}
for (let v50 = 0; v50 < 10; v50++) {
    f13();
}
%OptimizeFunctionOnNextCall(f13);
f13();
const o55 = {
    "maxByteLength": 655,
};
const v57 = new SharedArrayBuffer(655, o55);
new Uint16Array(v57);
