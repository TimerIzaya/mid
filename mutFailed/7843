class C3 {
    #valueOf(a5, a6) {
        for (let v7 = 0; v7 < 32; v7++) {
            this["p" + v7] = v7;
        }
        return -14;
    }
    static d = -14;
    [9] = -14;
    static 3;
    static c;
}
const v10 = new C3();
v10[9];
new C3();
Math.atan2(536870912, 721361021);
const o19 = {
    "execution": "sync",
    "type": "minor",
};
gc(o19);
const v21 = new C3();
v21[9];
1000000.0 >>> 1000000.0;
([636.0619904743435,-1.0,1.02880264701966e+308,-656.9941137140671,-29.012861243904695,1000000000000.0])["n"]();
Symbol.toPrimitive;
async function* f38(a39, a40) {
    return Date;
}
1126838905 - 1126838905;
const v43 = [1126838905];
class C46 {
    static p(a48) {
    }
}
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this?.constructor;
    try { new v55(a51, a51); } catch (e) {}
    try { a52.isPrototypeOf(C46); } catch (e) {}
}
const v58 = new F49("HkAXC", "toStringTag", "toStringTag", "HkAXC");
const v59 = [601759695];
const v60 = [1073741824,1073741823,1376142744,1073741825];
function f62(a63, a64, a65, a66) {
    function f68() {
        const o83 = {
            [522675525n](a71, a72) {
                Int16Array[0] = -27833;
            },
            get d() {
                return this;
            },
            "maxByteLength": 9,
            "c": v59,
            valueOf(a77, a78) {
            },
            toString(a80, a81, a82) {
            },
        };
        o83.toString(v58, v58, v58);
    }
    f68();
    const v87 = new Int8Array();
    v87.buffer;
    %OptimizeFunctionOnNextCall(f68);
    let v90;
    try { v90 = v60["find"]("find", a66, v59, v60); } catch (e) {}
    v90 <= a65;
    return arguments;
}
Reflect.construct(Int8Array, v43);
class C93 {
    toString(a95) {
        let v94 = this;
        v94.e *= 0.4837136437515255;
        v94 += v94;
        for (let v96 = 0; v96 < 10; v96++) {
            a95["p" + v96] = v96;
        }
        return 0.4837136437515255;
    }
    [-2] = 31876;
}
C93.name = C93;
const v99 = new C93();
const v100 = v99?.constructor;
try { new v100(); } catch (e) {}
const v102 = [-20096,4294967296,-65537,-2];
const v103 = [-1947047520];
const v104 = [v103,v103,v103,v102];
v104[3];
const v106 = [v104];
const v107 = v106?.filter;
try { new v107(v99); } catch (e) {}
const v110 = v102["slice"](v106);
try { v110.fill(v110); } catch (e) {}
