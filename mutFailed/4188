class C3 {
    constructor(a5, a6) {
        C3.hasInstance.toString();
        URIError();
        try { a5(this, 0.5657519027162825, "p", -1000000.0, a5); } catch (e) {}
    }
    static get a() {
        this[16] = "p";
        const t8 = "p";
        const t9 = delete t8?.length;
        t9.f ^= -1000000.0;
        %VerifyType(0.5657519027162825);
        return 0.5657519027162825;
    }
}
new C3(-1000000.0, -1000000.0, C3, C3, 0.5657519027162825);
const v16 = new C3(0.5657519027162825, "p");
new C3(-1000000.0, v16);
[36821,5,9007199254740992,-1766,1073741824,-5362,1000];
[-7,12,65535,268435440,6,47920,7,-357962245,-1586128152,268435439];
[-6,6,-2,-318850900,536870888,-554515361,-1903823041,1871417127];
let v22 = 0.0;
class C24 {
    #a = "9";
    65536;
    static h = v22;
    constructor(a26, a27) {
    }
}
Symbol.toPrimitive.description;
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
const v39 = new F35();
async function f40(a41, a42, a43, a44) {
    a41.fuck();
    await v39;
    return F35;
}
const o48 = {
    "execution": "async",
    "type": "minor",
};
gc();
const v50 = new C24();
const v51 = new C24(v22, v50);
class C52 {
    #e = C24;
    valueOf(a54, a55, a56) {
        super.f;
    }
    constructor(a59, a60, a61) {
        v22 **= v22;
        try {
        } catch(e62) {
        }
    }
}
const v63 = new C52("boolean", v51);
const v64 = new C52("boolean", v63, "9", "p");
const v65 = new C52(v64, C24, v50);
class C66 {
    p(a68, a69) {
        const v70 = super[a68];
        try {
            v65[a68];
        } catch(e72) {
            function F73(a75, a76, a77, a78) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.e = e72;
                } catch(e79) {
                }
                try {
                    this.b = v70;
                } catch(e80) {
                }
                try {
                } catch(e81) {
                }
            }
        } finally {
            [] = "boolean";
        }
    }
}
for (const v82 of "9") {
}
