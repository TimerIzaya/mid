function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = this;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v7 = v6?.constructor;
v4[4] = v5;
const v12 = 4096 | 4096;
const v13 = ~4096;
class C14 {
    constructor(a16, a17) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new C14();
v12 + v12;
try { new v7(); } catch (e) {}
const v23 = [-1073741824,1073741824,-1667265659,-5,1833049193,-268435456,-4294967296];
[[]];
const v27 = new SharedArrayBuffer(v13);
new Uint8ClampedArray(v27);
const v30 = [4,-4294967296,1847881084,5,-14,4294967295,-4294967295,-2033958321,-6];
const v31 = v30[4];
const v32 = [39704,65535,-9223372036854775807,1073741824,-4294967296,51027,-4096,9223372036854775807];
function f33() {
    return v6;
}
const v34 = [v32,v30,v30];
try { v34.shift(); } catch (e) {}
const v37 = [v32,v32,v34,v23,[v34,v34]];
v37[2] = v37;
function f39(a40, a41) {
    const o49 = {
        "c": undefined,
        "a": v34,
        get f() {
            a40 **= undefined;
            try {
                super.normalize(this, a41);
                const v46 = new BigInt64Array(4046);
                let o47 = {
                };
                [,...o47] = v46;
            } catch(e48) {
            }
            return a40;
        },
        ...v4,
        "h": a41,
        [a40]: a40,
        __proto__: a40,
        "d": undefined,
    };
    return o49;
}
const v50 = f39(f39, v30);
let v51 = 2;
v51++;
function f53(a54) {
    a54 === a54;
    a54 <= a54;
    const o60 = {
        __proto__: v51,
        213: a54,
        ...a54,
        "g": v51,
        p(a58, a59) {
            return f53;
        },
    };
}
try {
    try {
        v34.a = "536870889";
    } catch(e62) {
    }
    v30.length = 16;
} catch(e63) {
}
try {
    v31.__proto__ = v6;
} catch(e64) {
}
v50.d = v50;
f39(F0, undefined);
const v66 = f39(v37, v30);
v66.d = v66;
const v70 = new Uint8ClampedArray(9);
new Uint8Array(v70);
