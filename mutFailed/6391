function f0() {
    function F3() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v7 = new Uint8Array(127);
    v7.fill();
    let v9 = 9;
    v9++;
    const o37 = {
        get f() {
            function f12(a13, a14) {
                function f16(a17) {
                    v9 ** this;
                    Math.ceil(-0.7720935891128651 | v9);
                    -(-0.7720935891128651);
                    Math.clz32(-0.7720935891128651);
                }
                this.onmessage = f16;
                %VerifyType(f16);
            }
            const v29 = [f12,Worker];
            new Float32Array(128);
            const t22 = [-147676202];
            t22.length = 1;
            const o35 = {
                "arguments": v29,
                "type": "function",
            };
            new Worker(f12, o35);
            return o35;
        },
    };
    return o37;
}
f0();
const v39 = f0();
try { (1).__defineSetter__(); } catch (e) {}
let v42 = 0;
v42++;
const v47 = new Uint16Array(9);
v47.includes(true, -706152110);
const v50 = f0();
-11 + -11;
class C55 {
}
let v56 = 280;
function f58() {
    let v59 = 852.2904873570058;
    const o64 = {
        m(a61, a62) {
            v59++;
            return v56;
        },
    };
    return Int32Array;
}
f58();
f58();
function f68() {
    return f58;
}
const v69 = /(?:a*)+q(?<a>.)/guds;
function f70(a71) {
    const o73 = {
        get d() {
            return this;
        },
    };
    return f68;
}
for (let [i79, i80] = (() => {
        const v77 = /Aabc|defmxyz{1,}?qMa{0,1}?/gvdis.exec("function");
        try { v77.shift(); } catch (e) {}
        return [0, 10];
    })();
    i79 < i79;
    ) {
    f70(v69);
}
const v87 = /8/vms;
/[Aa\Bb]/sy;
const v89 = /5(?:ab)/vi;
class C90 extends f0 {
    static 8;
    #c;
    static get g() {
        const v92 = f0 != this;
        try {
            v39.#c *= v92;
        } catch(e93) {
        }
        return v89;
    }
    [4] = v50;
    g = v87;
    [v39];
    e = -11;
}
try { new C90(); } catch (e) {}
("undefined").normalize("function");
typeof /(foo(?!bar)baz)/gis;
try {
    const o99 = {
    };
    o99.h = o99;
} catch(e100) {
}
const v101 = new C90();
new C90();
new C90();
let v104 = -1024;
function F105(a107, a108, a109, a110) {
    if (!new.target) { throw 'must be called with new'; }
    const v111 = this?.constructor;
    try { new v111(v101, this, v101, a109); } catch (e) {}
}
const v113 = new F105();
const v114 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F115(a117, a118) {
    if (!new.target) { throw 'must be called with new'; }
}
class C119 {
}
const v121 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v122 = [601759695];
for (let v124 = 0; v124 < 5; v124++) {
    function f125() {
        try { ("Vre").strike(); } catch (e) {}
        try { Array.from(Array); } catch (e) {}
        const v133 = Array().unshift();
        const v135 = new Set();
        try { v135.add(-4294967297n); } catch (e) {}
        function F137(a139, a140) {
            if (!new.target) { throw 'must be called with new'; }
            F137(this, this);
        }
        try {
            v114.forEach(Float64Array);
        } catch(e143) {
            e143.b = e143;
            function F144(a146, a147, a148) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = a147;
            }
            return -26368;
        }
        class C151 {
        }
        const v152 = new C151();
        try {
            v152.__proto__ = F115;
        } catch(e153) {
        }
        const v154 = Symbol.toPrimitive;
        const o158 = {
            toString(a156, a157) {
                return C119;
            },
        };
        try { o158.toString(v133, v50); } catch (e) {}
        let v160 = -268435456;
        v160--;
        const o181 = {
            [522675525n](a163, a164) {
            },
            "c": v122,
            valueOf(a166, a167) {
            },
            [-4294967297n](a169, a170, a171, a172) {
            },
            "e": v160,
            "maxByteLength": -4294967295,
            "arguments": v121,
            ...v113,
            [v154]() {
            },
            "type": C119,
            valueOf(a175, a176) {
                return 522675525n;
            },
            4: "Vre",
            toString(a178, a179, a180) {
                return a179;
            },
        };
        o181[522675525];
        new Float32Array();
        const v188 = [272822757];
        try { v188.toLocaleString(); } catch (e) {}
        const v190 = [-2.0,272822757,"function"];
        const o191 = {
            __proto__: v190,
        };
        o191[2] = o191;
        v188[o191] &= 272822757;
        v104 %= v160;
        return v154;
    }
    const v192 = f125?.toString;
    try { new v192(); } catch (e) {}
    f125();
    class C195 {
    }
    try { new C195(); } catch (e) {}
    const v197 = new C195();
    const v198 = v197?.constructor;
    try { new v198(); } catch (e) {}
    this.d8 = this;
    this.escape(v197);
    %OptimizeFunctionOnNextCall(f125);
}
[-1000000000.0,0.8968097643519101,-8.720684288580602e+307,-1.0,0.32807980030170847,117.99447186142652,1000.0];
64 & 64;
const v206 = new Int32Array(64);
v206[50] = v206;
class C208 {
}
C208.prototype = C208;
class C209 extends C208 {
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
function f213(a214, a215, a216, a217) {
    function f218() {
        try { new Symbol(); } catch (e) {}
        Symbol.toPrimitive;
        const o231 = {
            "e": -268435456,
            set b(a225) {
                v56 <<= v56;
            },
            m(a227) {
                return this;
            },
            valueOf(a229, a230) {
            },
            6: -268435456,
        };
        o231[6] = o231;
    }
    f218.length = f218;
    f218();
    const v234 = new Int8Array();
    try { v234.entries(); } catch (e) {}
    v234.buffer;
    %OptimizeFunctionOnNextCall(f218);
    try { ("find").trimLeft(); } catch (e) {}
}
for (let v239 = 0; v239 < 10; v239++) {
    v239 >> v239;
    f213();
}
f213();
