const v0 = [129,-268435456,10000,-2,-2147483647,-744479821,268435439,11,-9,7];
[2147483649,16,1811872246,126017898,2,-1551002316];
[12,-2,31066,61887,13,127,-5,7,-23320,8212];
class C6 {
}
class C8 extends Uint16Array {
}
[-41521,-2044879259,-2049335291,-53755,-1073741824,-11,127,4294967296];
[-268435456,-65537,-1,1946302523,-65536,-1,536870887,-5,9007199254740991,4294967297];
[257];
const v16 = new BigUint64Array(-43318);
let [v17,,v18,...v19] = v16;
class C20 {
    constructor(a22, a23) {
        function f24(a25) {
            return this;
        }
        const o28 = {
            "type": "function",
        };
        new Worker(f24, o28);
    }
}
new C20();
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this.toString();
    try { v33(); } catch (e) {}
    new Uint8Array(10);
}
function f43() {
    for (let v44 = 0; v44 < 5; v44++) {
        v44 / v44;
        function f46() {
            return f46;
        }
        f46.d = f46;
    }
    return f43;
}
class C50 {
    9 = 6;
}
function f51() {
    const o52 = {
    };
    const v53 = o52.__defineGetter__;
    let v54;
    try { v54 = v53(); } catch (e) {}
    return v54;
}
for (let v55 = 0; v55 < 5; v55++) {
    f51();
    %OptimizeFunctionOnNextCall(f51);
}
class C57 extends F31 {
    constructor(a59, a60, a61, a62) {
        const v63 = this.constructor;
        try { new v63(v0, C8); } catch (e) {}
        v0 >>> a60;
        a61 >>> -0.0;
    }
}
const o68 = {
    2: C57,
};
const o69 = {
};
new Uint8Array(128);
