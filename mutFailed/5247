const v0 = /KvXl/udimsy;
const v1 = /a[a-z]V()/gvimy;
const v2 = /[\cA](?!(a))\1/udims;
const v3 = [v2,v1,v0];
const v4 = [v3];
const v5 = [v4,v0,v3];
Map.prototype;
new Map();
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this?.constructor;
    try { new v14(v2, v4, a11); } catch (e) {}
    a12[2] = a12;
    try {
        this.b = v0;
    } catch(e16) {
    }
    try {
        this.g = v0;
    } catch(e17) {
    }
}
const v18 = new F9(v0, v5, v4);
new F9(v2, v4, v5);
const v20 = new F9(v2, v5, v4);
1024 | 1024;
const v24 = new Int32Array(1024);
for (const v25 of v24) {
    const o27 = {
    };
    v18(o27);
    try { new SharedArrayBuffer(v25); } catch (e) {}
    const v31 = new SharedArrayBuffer(1024);
    try { v31.slice(v20, SharedArrayBuffer); } catch (e) {}
}
