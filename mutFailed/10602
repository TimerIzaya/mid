new Uint8ClampedArray(7);
new Uint32Array(186);
new Float64Array(7);
const v11 = new Float32Array(165);
new Int32Array(1024);
new Float32Array(97);
const v18 = [-9007199254740991,256,5,4294967297,1,-38452,9223372036854775807,2147483649];
const v19 = [-4564,-541496027,-554545361,536870888];
const v20 = [61400,-6,-1019014473,-42020,-2];
const v24 = 1545846986 - 2;
(-692708377) ** v24;
class C26 {
    constructor(a28, a29) {
        const v30 = a29[this];
        try { v30(v30, ...165, ...v18); } catch (e) {}
    }
}
const v32 = new C26(v20, v18);
const v34 = new BigInt64Array(v32, v32, v32);
const v35 = `
    var c = v34;
`;
new C26(v19, v20);
new C26(v19, v19);
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    [[F38,F38,F38,F38,F38],1141300185,F38];
    [this];
    class C44 {
    }
    const v45 = [1.9600488149280893e+306,468.9269702772963];
    ([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(...v45);
    try {
        class C49 extends this.constructor {
            e = F38;
            static {
                super.b = this;
                let {...v51} = this;
            }
        }
        new C49();
    } catch(e53) {
    }
}
new v24();
new F38();
new F38();
new Int8Array(BigUint64Array);
function f60() {
    const v63 = ("D")[0].substring();
    v63 == v63;
    v63.charCodeAt();
    return "D";
}
f60();
%OptimizeFunctionOnNextCall(v11);
