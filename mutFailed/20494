class C3 {
    static #h;
    static get d() {
        const v6 = Symbol.split;
        this[v6];
        return v6;
    }
    set e(a9) {
        const v14 = new Uint16Array(10);
        v14.indexOf(-2927);
        const v16 = this / true;
        try { new a9(a9, 4294967295, a9); } catch (e) {}
        super[-9223372036854775807] = v16;
    }
}
const v21 = new C3();
function f22(a23, a24) {
    class C25 extends C3 {
    }
    return C25;
}
v21[Symbol.iterator] = f22;
new C3();
new C3();
new Int8Array(0);
const v35 = new Uint8Array(9);
const v38 = new Float32Array(16);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 3;
    } catch(e42) {
        const o43 = {
        };
        const v45 = new Proxy(v35, o43);
        try {
            v45.fuck(v45, 1073741825);
        } catch(e47) {
        }
    }
}
const v49 = new BigInt64Array();
var c = v49;
const o51 = {
};
gc();
class C53 extends F39 {
    static set d(a55) {
    }
}
try {
    v38.subarray();
} catch(e57) {
}
("function").normalize("NFKD");
/V/gdiy;
/a\b!/vmy;
/a{0,1}?/uisy;
new Int8Array(127);
const t59 = [-1.5424212036356715e+308];
t59[536870887n] = gc;
new Uint8Array(v21);
function f76() {
}
