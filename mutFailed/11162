function f0() {
}
let v1 = [268435440,-64472,536870888,-22781];
[10,3483];
[255,4,-1984569919,2147483647,-14325,2002968023,1577545757];
function f4() {
    return f0;
}
f4.e = f4;
-9019;
9223372036854775807 >>> 9223372036854775807;
let v15;
try { v15 = new Set(); } catch (e) {}
v15.f = f4;
const v16 = new Set();
function f17(a18) {
    for (let v19 = 0; v19 < 5; v19++) {
        const o22 = {
        };
        o22[Uint32Array] -= -2147483649;
        class C23 {
        }
        new BigUint64Array(v19, v19, v19);
    }
}
Object.defineProperty(v16, 2168, { writable: true, set: f17 });
v16.size;
Uint8Array[Symbol.iterator] = f17;
v16[2168] = 255;
v15?.f;
try { (1).__defineSetter__(); } catch (e) {}
new Uint8Array(759956410);
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f4;
    a42.e = Uint8Array;
    const v44 = this.constructor;
    v44.e = v44;
    try { new v44(v44, a42, v44, Uint8Array, v44); } catch (e) {}
    const v46 = [this,this,this];
    const o47 = {
        "e": v46,
    };
}
if (268435439 >= 9019) {
    Reflect.construct(F38, [Reflect,-39082,F38,v1], Uint8Array);
} else {
    v1 >>= v15;
}
new F38();
