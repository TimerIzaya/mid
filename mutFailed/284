const v5 = -1 + null;
v5 + v5;
const v7 = Math.fround(-1);
const v8 = null & v5;
const v9 = v5 ^ -1;
const v10 = v9 ^ v9;
const v11 = v8 - v10;
const v12 = v10 | v10;
12 - 12;
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    a18--;
    for (const v20 of a17) {
        try {
            this.valueOf = a17;
        } catch(e21) {
        }
    }
    const v22 = this?.constructor;
    try { new v22(a17, a17); } catch (e) {}
    try {
        this.f = 12;
    } catch(e24) {
    }
}
const v25 = new F15(-1, -107236156);
const v26 = new F15(-1, 12);
const v27 = v25[2789644252];
%VerifyType(v7);
try {
    v25.valueOf = v27;
} catch(e28) {
}
v26.length = v26;
new F15(-1, 12);
[v12,v10,2n,57091,F15];
[v8,[v5,v11,9n]];
v7 || ((v7 || v8) | v5);
v8 - v8;
const v42 = [2147483647,-2147483649,27792,1,-377392057,65536,-128];
v42.g = v42;
[9007199254740991,9007199254740992,1168191908,4294967297];
const v44 = [-2030100832,772027189,4294967296,-39174,-3,536870887];
try { v44.splice(12, 2n); } catch (e) {}
Float32Array.prototype = Float32Array;
const v47 = new Float32Array(Float32Array, Float32Array);
delete v47[536870888];
