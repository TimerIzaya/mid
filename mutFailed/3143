const v4 = new BigUint64Array(16);
try { Float32Array.apply(16, v4); } catch (e) {}
try {
    v4.f = "-2147483648";
    9n >> 9n;
} catch(e9) {
}
new Float32Array(282);
function f13() {
    const o20 = {
        toString(a18, a19) {
        },
        "b": "boolean",
        "c": "boolean",
        ["object"]: f13,
        ["boolean"]: 1000000000000.0,
        "h": 1000000000000.0,
    };
    return o20;
}
const v21 = f13();
const v22 = f13();
function F23(a25) {
    if (!new.target) { throw 'must be called with new'; }
}
const v26 = new F23();
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this.constructor;
    try { new v32(F27, F27); } catch (e) {}
    a30.g = a30;
    this.a = a29;
}
const v34 = new F27(v22, v21, v26);
new BigUint64Array(108);
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a40;
    } catch(e41) {
    }
    try {
        this.c = BigUint64Array;
    } catch(e42) {
    }
}
const v43 = new F37(282, 10, 282, 108, Float32Array);
const v44 = new F37(10, 108);
new F37(108, 108);
("h").split(65535);
const v49 = new v34();
try { v49["m"](); } catch (e) {}
new Int16Array(10);
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a56;
    } catch(e60) {
    }
}
const v61 = new F54(282, 108, 282, Int16Array, v43, v44, v44);
const v62 = new F54(108, 282, 108, v61, v61, v61, BigUint64Array);
new F54(282, 108, 282, Int16Array);
Symbol.for(Symbol.toPrimitive.description);
const v71 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
try {
    v71.__proto__ = v71;
} catch(e72) {
}
const o73 = {
};
const v75 = new Proxy(BigUint64Array, o73);
try { v75(v62, 10, 282); } catch (e) {}
for (let v78 = 0; v78 < 25; v78++) {
}
const o83 = {
    "h": true,
    ...true,
    get c() {
        return this;
    },
    set d(a82) {
    },
    "d": true,
};
try {
    Int8Array();
} catch(e86) {
    e86.name;
}
