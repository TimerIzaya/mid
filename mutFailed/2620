let v0 = Map;
const v1 = new v0();
class C2 extends v0 {
    constructor(a4, a5) {
        super(a5);
        a5[v0] = v0;
        if (v1 <= super[a4]) {
            v1[Symbol.species];
        } else {
        }
        this[a5] = true;
        super.c = v0;
        v0 &&= a5;
        for (let v13 = 0; v13 < 32; v13++) {
            a5["p" + v13] = v13;
        }
    }
}
new C2(C2, C2);
new C2(v1, v0);
const v18 = new C2(v1, v1);
const v22 = [C2];
const v23 = [v22,v22];
const v24 = ["n","7aoC"];
[1.5497283755562828e+308,0.03786930937778421,-3.0,419.2565361859256,-2.0,0.5862446929100771,5.0];
[0.09659919709446219,-2.220446049250313e-16,0.04732946722026887];
[0.0];
try {
    v23.toString = v0;
} catch(e30) {
}
let v31;
try { v31 = v24.copyWithin(v0, v0); } catch (e) {}
class C33 {
    get b() {
        function F35(a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a37;
            } catch(e39) {
            }
        }
        new F35(v18, this);
        new F35(v31, F35);
        new F35(this, v31);
        const v43 = ("B")[21];
        try {
            this.e = "B";
        } catch(e44) {
        }
        return v43;
    }
    static [2.0];
    static #g;
    g = "d";
}
new C33();
const v46 = new C33();
const v47 = new C33();
const v50 = new Uint8Array(7);
const v53 = new BigInt64Array(1221);
let v56 = new Uint8ClampedArray(5);
try { v46(1221, v46, "d", v47); } catch (e) {}
const o58 = {
    __proto__: v50,
    "h": v50,
    "a": v53,
};
Math.clz32(-53409);
const v63 = -53409 % v56;
--v56;
-1000.0 && v63;
