const v0 = [14,9007199254740992,-2,56318,268435440,-1,-57848,535957124];
const v1 = [4,8,1310194205];
const v2 = [12,-552065122];
[7555,523060333,256,1562531752,-19821,9007199254740991,-3,0,1013714234];
[-10,-65536,512,-11850,-128,10,1,9223372036854775807,114915857,39630];
const v5 = [10000,-65535,0,-5650664,8,8,268435440,-565729071,-765692852,129];
function f6() {
    return v0;
}
class C7 extends f6 {
    static get h() {
        function f9() {
            arguments instanceof f6;
            return arguments;
        }
        f9(f9, f9, f9);
        return this;
    }
    [v1] = v5;
    static [v2] = f6;
    #a;
    5;
}
new C7();
new C7();
new C7();
/O(a\1)+/gvdmy;
/e/gdmy;
/Bk2/gdmy;
const v22 = [-1440504730,15059,-128,65536,33714,-51192,-268435456,37915];
[10000,-13,1073741825,1602065818,65536,16];
const v24 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
try { v24.sort(v24); } catch (e) {}
[901134577,512,16,-13797,-1644674640,-4];
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    try { new v31(this, a30); } catch (e) {}
    this.c = a29;
}
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    a38.length;
    try { this.constructor(128, this); } catch (e) {}
    a39 + a39;
    try {
        this.a = 5;
    } catch(e43) {
    }
    try {
        this.b = 5;
    } catch(e44) {
    }
    try {
        this.d = a39;
    } catch(e45) {
    }
}
const v46 = new F36(F36, -195224844);
new F36(5, 5);
const v48 = new F36(-195224844, 128);
v48.a = v48;
129 === 129;
try { Array.bind(-195224844); } catch (e) {}
237 ^ 237;
237 & 237;
new Array(237);
new Int32Array(182);
const v64 = new Uint8Array(10);
try { v64.reduce(129); } catch (e) {}
try { new BigInt64Array(BigInt64Array, v48, v64); } catch (e) {}
new BigInt64Array(3);
function f70() {
    1261703539 === 1261703539;
    1261703539 / 1261703539;
    class C75 {
    }
    C75.length = C75;
    -127;
    const v79 = `
        try {
            new Float64Array(127);
        } catch(e81) {
        }
    `;
    let v82 = -65535;
    v82 * v82;
    const v84 = v82 / v82;
    ~v84;
    const o156 = {
        __proto__: 352326470,
        next() {
            v82--;
            const v89 = v82 == 0;
            const o90 = {
                "done": v89,
                "value": v82,
            };
            return o90;
        },
        ...352326470,
        /*
        __proto__: 1261703539,
        */
        "f": v82,
        m(a92) {
            try { a92.next(); } catch (e) {}
            a92.c = a92;
            a92.h = a92;
            const o94 = {
            };
            o94.h = o94;
            o94.h = o94;
            function f95(a96, a97, a98) {
                function f100(a101) {
                    a97[5] ||= f70;
                }
                this.onmessage = f100;
                const v104 = new SharedArrayBuffer(35);
                new BigUint64Array(v104);
            }
            f95.caller = f95;
            try {
                o94.e = v82;
            } catch(e107) {
                const v111 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v111, o94);
            }
            try {
                const o113 = {
                };
                o113.e = 1261703539;
                o113.g = a92;
            } catch(e114) {
            }
            try { Math.expm1(128); } catch (e) {}
            -9007199254740991 === -9007199254740991;
            const v119 = -9007199254740991 >> -9007199254740991;
            const v120 = v119 - v119;
            v120 === v120;
            Math.sin(-9007199254740991);
            try { ("EV").link(v84); } catch (e) {}
            0 != 0;
            class C127 {
                o(a129, a130, a131, a132) {
                    class C133 {
                        static 44 = "EV";
                    }
                    new C133();
                    new C133();
                    new C133();
                    return 0;
                }
            }
            C127.name;
            3938 << 3938;
            const v141 = new Int8Array(3938);
            let v142 = 3;
            const v143 = v142++;
            v143 + v143;
            let v145 = 0;
            v145 >>> v145;
            const v147 = v145 >> v145;
            v147 - v147;
            for (let i = 0; i < 5; i++) {
                v145 < 8;
                [...v142] = v141;
                const v151 = v145++;
                v151 % v151;
            }
            const o153 = {
            };
            o153.e = 1261703539;
            try {
                const o154 = {
                };
                o154.c = o154;
                o154.g = a92;
                o154.h = 352326470;
            } catch(e155) {
            }
            return this;
        },
    };
    let v157;
    try { v157 = o156.m(o156); } catch (e) {}
    class C159 {
    }
    C159.length = C159;
    const v160 = new C159();
    v160?.constructor;
    Float32Array.name;
    const v164 = new Float32Array(v160, "nt", Float32Array);
    const t193 = "nt";
    const v165 = delete t193[v164];
    let v166;
    try { v166 = v160.floor(v165); } catch (e) {}
    for (const v167 in v166) {
    }
    v157.e = v157;
}
f70();
f70();
function f171(a172, a173, a174, a175) {
}
const v178 = Symbol.toPrimitive;
v178.description;
("lastIndexOf")[v178];
function f181(a182, a183) {
    const o186 = {
        set b(a185) {
        },
    };
}
f181();
256 >>> 256;
function F192(a194, a195, a196) {
    if (!new.target) { throw 'must be called with new'; }
}
const v198 = new Uint8Array(8);
v198[7] = v198;
try {
} catch(e199) {
}
const v203 = ([-223.21974199729607,0.6826909196761026,-7.610543209781418e+307,1000000000.0,-2.2250738585072014e-308,0.4672319347741436,-1000000.0,-3.0,-5.0,6.966874548897]).fill(-9007199254740990n, 9007199254740990);
let v204;
try { v204 = v203.toString(); } catch (e) {}
try { v204.includes(v46); } catch (e) {}
new F27(F27, F27);
const v207 = new F27(18074, 28602970);
v207.b = v207;
const v208 = new F27(18074, 18074);
new F27(18074, 28602970);
const v213 = new Uint8Array(v24, v208, 201);
new Uint8Array(268435440);
Uint8ClampedArray.b = Uint8ClampedArray;
v24[6] = v213;
v22.__proto__;
const v220 = new Uint8ClampedArray(129);
v220.lastIndexOf();
