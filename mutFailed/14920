const v0 = /\8[\d-\d]/gdims;
/(?!(a))\1/gudmsy;
const v2 = /pT+/gvdsy;
let v4 = -1370863841;
v4--;
const v7 = 1000 >> 1000;
class C8 {
    constructor(a10) {
        this >> -1073741824;
        for (let v13 = 0; v13 < 32; v13++) {
            for (let v15 = 0; v15 < 5; v15++) {
            }
        }
    }
}
const v16 = new C8();
v16.constructor;
v7 | v7;
const v21 = new Uint16Array(v2);
try { new Uint16Array(v2, v2, 869); } catch (e) {}
const v25 = new Uint16Array(4096);
try { v25.values(); } catch (e) {}
const v29 = new Int32Array(1834);
try { v29.join(v7); } catch (e) {}
try { v29.reverse(); } catch (e) {}
let v34 = -1000000000.0;
v34--;
[3.0,995712.1638139696,-2.0,1.6391533955732946e+308,1000000.0];
const v37 = [1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
v37[4];
let v39;
try { v39 = v37.entries(); } catch (e) {}
try { v39.next(); } catch (e) {}
let v42 = 0.2037963153987472;
4096 ^ 4096;
new v29();
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = a49[1];
    try {
        with (a47) {
            F45(v51, a50);
        }
    } catch(e53) {
    }
}
const v55 = [];
try { v55.findLast(v0); } catch (e) {}
v55.length;
const v58 = [];
try { v58.findLast(v2); } catch (e) {}
const v60 = [0.0,-1000.0,2.557943047142931];
v60.h = v60;
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
1000000000.0 >>> 1000000000.0;
let v65 = 948737.12760097;
v65++;
for (let v67 = 0; v67 < 5; v67++) {
    v60.valueOf = v67;
}
2.2250738585072014e-308 === 2.2250738585072014e-308;
let v70 = 2147483647;
v70++;
-(v70--);
let v77 = 0;
v77 >>> v77;
v77--;
v55.f = v55;
const v80 = v42++;
v80 != v80;
v77 < 4;
const v84 = [256,54026];
let v86 = Math.hypot();
v86--;
-v86;
class C92 {
}
function F93(a95, a96, a97) {
    if (!new.target) { throw 'must be called with new'; }
    const v98 = this.constructor;
    try { new v98(a97, C92); } catch (e) {}
    a95 % a95;
}
new F93(820, 121, 129);
class C104 {
    #valueOf(a106, a107) {
        return a107;
    }
    #b = 6;
}
const v108 = new C104();
const v109 = new C104();
const v110 = [v108];
function f111(a112, a113, a114) {
    v110.copyWithin();
    new Int32Array([Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849]);
    ([1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164]).concat();
    try {
        function f123() {
            0 < 10;
            for (let v129 = 0; v129 < 5; v129++) {
            }
            return v109;
        }
        %PrepareFunctionForOptimization(f123);
        [];
        f111(252859902);
    } catch(e132) {
    }
    return -(v16 >> 252859902);
}
const v135 = ~2183;
const t111 = "minor";
t111[2] = "minor";
const o139 = {
    "execution": "async",
    "type": "minor",
};
const v140 = o139?.__lookupSetter__;
try { new v140(v84); } catch (e) {}
const v142 = gc(o139);
try { v142.then(0.9509347647729306, v65); } catch (e) {}
try { Int16Array.bind(v21); } catch (e) {}
const v146 = new Int16Array();
try { v146.subarray("minor", "minor"); } catch (e) {}
8 >> 8;
const v153 = new Int16Array(8);
async function f155(a156, a157, a158) {
    a158--;
    a156--;
    a158--;
    const v165 = Array();
    v165[0] = 0.6486308944701847;
    v165.unshift(3);
    let v167 = [13307,-9007,268435456,-11,-1416502219,255];
    v167[5] = v167;
    try { v167.push(v167); } catch (e) {}
    [2147483648,544589623,18798,65536,-268435456,-38427524,-10,7,10];
    const v170 = [-4294967295,-57587,536870888,4096,-15800,1073741825,2147483649,2147483648,2147483649];
    v167 = v170;
    try { Math.expm1(v135); } catch (e) {}
    for (let i176 = 0, i177 = 10;
        i176 < i177;
        (() => {
            i177--;
            let v183 = BigInt64Array;
            const v184 = new v183(3768);
            const v185 = v183++;
            v185 >> v185;
            let o187 = {
            };
            [,...o187] = v184;
        })()) {
    }
    ~-7;
    (2183).atan(v170);
    !-7;
    const v194 = 3.594884447118592e+307 | v170;
    v194 & v194;
    new Int8Array(3);
    const o210 = {
        toString(a200) {
            function f202(a203, a204, a205, a206) {
                arguments.toString();
                return f202;
            }
            %OptimizeFunctionOnNextCall(f202);
            f202(-4294967297n, f202);
            return a200;
        },
    };
    Math.log2(a156);
    !(delete v153[-1000000000.0]);
    const v215 = v146[0][1];
    let [,,...v216] = v146;
    let v217;
    try { v217 = v216.slice(v142, a156); } catch (e) {}
    try { v217.toLocaleString(); } catch (e) {}
    await v215;
}
f155(8, 8, v65);
-36313 % -36313;
16 >> 16;
new Array(16);
const t184 = -131.14557671807358;
t184[2] = v84;
try {
    Array(20655);
} catch(e228) {
}
