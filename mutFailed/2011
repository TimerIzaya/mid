class C3 {
    ["51KmX"];
    get h() {
        this + this;
        return "search";
    }
    static [-2] = "51KmX";
    static {
        new WeakMap();
    }
}
new C3();
new C3();
new C3();
class C15 extends C3 {
    o(a17, a18, a19) {
        try { new b(a18); } catch (e) {}
        this.__proto__;
        super.h;
        for (let v25 = 0; v25 < 32; v25++) {
            a17["p" + v25] = v25;
        }
        return "search";
    }
}
new C15();
new C15();
new C15();
new Float32Array(3);
new Int16Array(12);
new Int8Array(9);
Math.expm1(Math);
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
const v46 = new F43();
const o49 = {
    set h(a48) {
    },
    __proto__: v46,
};
[7];
let v53 = [14,34917];
[39028];
[531384559];
function f58(a59) {
    v53 >>= a59;
    const v60 = [];
    class C61 {
        static get b() {
            try {
                super.getOwnPropertyNames();
            } catch(e64) {
            }
            return v60;
        }
        constructor() {
            this[v60] = this;
            this[v60] %= this;
        }
        static e;
        [v60];
    }
    const v66 = new C61();
    class C68 {
        [-9] = v66;
        4294967296;
        5;
    }
    return v66;
}
BigUint64Array[Symbol.toPrimitive] = f58;
new BigUint64Array(623722764, 256);
for (let [i75, i76] = (() => {
        10 >> 10;
        return [0, 10];
    })();
    i75 < i76;
    i75++) {
}
const v85 = [4294967297];
new Float32Array(10);
new Uint8Array(12);
new Uint32Array(1);
class C101 {
    static {
        const v103 = super.b;
        class C107 {
            get b() {
                const v109 = ("B")[21];
                try {
                    this.e = "B";
                } catch(e110) {
                }
                return v109;
            }
            static [2.0];
            static #g;
            g = "d";
        }
        new C107();
        const v112 = new C107();
        const v113 = new C107();
        const v116 = new Uint8Array(7);
        const v119 = new BigInt64Array(1221);
        let v122 = new Uint8ClampedArray(5);
        v122[Symbol.toPrimitive] = f58;
        try { v112(1221, v112, "d", v113); } catch (e) {}
        const o126 = {
            __proto__: v116,
            "h": v116,
            "a": v119,
        };
        Math.clz32(-53409);
        const v131 = -53409 % v122;
        --v122;
        -1000.0 && v131;
        super[v103];
        v85[-15n] ^= 10;
        const v138 = BigUint64Array * 536870887;
        v138 ** v138;
        +(BigUint64Array - v138);
        536870887 << BigUint64Array;
        for (const v143 of "-4294967295") {
        }
    }
}
