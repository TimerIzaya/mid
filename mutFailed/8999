const v1 = new Set();
const v2 = [536870887];
const v3 = [4294967297,-4294967295,-2147483649];
let v4;
try { v4 = v3.reduceRight(v1); } catch (e) {}
const v5 = [-995451306,5,12];
try { v5.fill(v2); } catch (e) {}
const v7 = [v1,v2,v2,v2,v5];
v7[3] = v7;
const v8 = [Set,Set,v2];
v8[1];
const v10 = [v1,v8,v2,v8];
function f11(a12, a13) {
    try { Set.push(f11); } catch (e) {}
    a13[3] = a13;
    const o23 = {
        ...v4,
        "c": v7,
        "e": v3,
        "d": Set,
        toString(a16, a17, a18) {
            try { a16.entries(); } catch (e) {}
            return Set;
        },
        "a": v1,
        "h": v2,
        2147483649: a12,
    };
    return o23;
}
const v24 = v4(v2, v10);
const v25 = f11(v3, v7);
v25[2147483649];
const v27 = f11(v3, v25);
function f28(a29, a30, a31, a32) {
    const o46 = {
        get a() {
            function f34() {
                function f36(a37) {
                    a37 >>= this;
                }
                this.onmessage = f36;
                for (let v38 = 0; v38 < 32; v38++) {
                    a30["p" + v38] = v38;
                }
            }
            const v43 = [];
            const o44 = {
                "arguments": v43,
                "type": "function",
            };
            new Worker(a31, o44);
            return this;
        },
    };
    return o46;
}
f28(v27, v2, Set, v24);
f28(v2, v5, Set, v25);
f28(v27, v3, v10, v25);
const v50 = [-65535,452354247,-2,78479092,-2147483648,1073741823,5,6528,-1024,-261130286];
try { v50.entries(); } catch (e) {}
const o53 = {
};
o53.e = v3;
const v55 = new Proxy(v10, o53);
try { v8.groupToMap(v27); } catch (e) {}
new Int32Array(v55);
