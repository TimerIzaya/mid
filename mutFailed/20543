new Float32Array(2);
function f4(a5, a6) {
    const v9 = Array();
    function f10() {
        return f4;
    }
    function f11(a12) {
        const o15 = {
            "execution": "async",
        };
        gc(o15);
        return a12;
    }
    Object.defineProperty(v9, 0, { configurable: true, enumerable: true, get: f10, set: f11 });
    v9.unshift(3);
    return a5;
}
for (let v19 = 0; v19 < 10; v19++) {
    const v22 = /(?:a*)+q(?<a>.)/guds;
    function f23(a24, a25) {
        const v27 = Symbol.iterator;
        const o36 = {
            [v27]() {
                let v29 = 10;
                const o35 = {
                    next() {
                        v29--;
                        const v33 = v29 == 0;
                        const o34 = {
                            "done": v33,
                            "value": v29,
                        };
                        return o34;
                    },
                };
                return o35;
            },
        };
        return a25;
    }
    v22.constructor = f23;
    for (let [i41, i42] = (() => {
            eval();
            return [0, 10];
        })();
        i41 < i42;
        i42--) {
        for (let v49 = 0; v49 < 25; v49++) {
            v22.constructor.$4;
        }
    }
}
new Int32Array(1607);
new BigInt64Array(64);
[-863619.6495925896,4.0];
[-0.0,-1.1423187040004095,1.0,4.0,273.1162468430182,1.7976931348623157e+308];
const v58 = [-104.25794784510958,0.019504664785278902,-1000000000.0,-7.47011871297406e+306,0.9405997979656563,911884.5298118445,-1.1629360550422215e+308,1.7440407639182714e+308];
new Array(64);
class C62 {
    e;
    static p(a64) {
    }
    static #n(a66) {
        function f67(a68) {
            return a68;
        }
        class C69 extends f67 {
        }
    }
}
const v70 = new C62();
new Uint8ClampedArray(4);
function F75(a77, a78) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v79 = Math.max();
        v79 & v79;
        new F75();
    } catch(e82) {
    }
}
class C83 {
}
new Int32Array(148);
function f86() {
}
f86.toString = Array;
const v87 = /(?:a*)+q(?<a>.)/guds;
function f88() {
    function f89(a90) {
        %OptimizeFunctionOnNextCall(f86);
        return v58;
    }
    return f89;
}
Object.defineProperty(v87, "constructor", { writable: true, get: f88 });
function f92(a93) {
    const v94 = a93.constructor;
    new Uint8ClampedArray(1000);
    try { v94(a93, f86); } catch (e) {}
    class C99 {
    }
    return f92;
}
for (let i102 = 0, i103 = 10; i102 < i103; i103--) {
    for (let v110 = 0; v110 < 50; v110++) {
        f92(v87);
    }
}
const v112 = v70.d;
try { v112.getOwnPropertySymbols(); } catch (e) {}
