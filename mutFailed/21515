function f0() {
}
new Array(3683);
try { ("n").link(f0); } catch (e) {}
const t4 = "d";
t4[0] = "d";
const t6 = "65535";
t6[2] = "65535";
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    const v16 = this?.constructor;
    try { new v16(v16, a12, a13, a12); } catch (e) {}
    F10[0];
    try {
        this.b = a12;
    } catch(e19) {
    }
    try {
        this.d = Array;
        a14[2] = ("d")[2156448716];
        Math.acosh(Array);
        const v25 = ~Array;
        Math.floor(v25);
        let v27 = -0.0 - v25;
        Math.expm1(Array);
        ~-0.0;
        v27++;
    } catch(e31) {
    }
}
new F10("d", "n", "65535", "n");
const v33 = new F10(3683, "n", "n", "n");
let v34;
try { v34 = v33.toString(); } catch (e) {}
new F10(false, "n", "n", "n");
function f36(a37) {
    return Array;
}
class C38 extends v34 {
    static e;
    #b;
}
function f40() {
    v33[7];
    try {
        C38.g = 4.0;
    } catch(e43) {
    }
    const v44 = Math.max(4.0, 4.0);
    v44 / v44;
    return 4.0;
}
%PrepareFunctionForOptimization(f40);
f40();
%OptimizeFunctionOnNextCall(f40);
f40();
