const v0 = [NaN,-5.0];
const v1 = [837119.571165279,-1.7976931348623157e+308];
const v2 = [5.0];
let v3 = "undefined";
let v8 = 2.220446049250313e-16;
v8++;
Math.acosh(v8);
-v8;
const v13 = /U0a|bnL/msy;
v13.dotAll = v13;
/[\xe2\x81\xa3]/gudis;
const v15 = /S/gums;
v15.ignoreCase = v15;
const v17 = new WeakMap();
try { v17.delete(v1); } catch (e) {}
function f19(a20, a21) {
    try { a20.replaceAll(f19, WeakMap); } catch (e) {}
    try { a21.fill(a20); } catch (e) {}
    a20 == a20;
    let v25;
    try { v25 = a21.fill(v13); } catch (e) {}
    try { v25.toString(); } catch (e) {}
    const o38 = {
        get h() {
            const v28 = this | this;
            v3 = a20;
            var f = a20;
            super[this];
            try { a21.splice(v28, v28, "join", v13, v1, v3); } catch (e) {}
            return v2;
        },
        valueOf(a32, a33) {
            try { a32.join("join"); } catch (e) {}
            return v1;
        },
    };
    return o38;
}
f19(v3, v1);
f19("wgC1I", v1);
f19(v3, v0);
function f42(a43, a44, a45, a46) {
    return a43;
}
f42.prototype;
const v48 = f42.name;
try { v48.toLocaleLowerCase(); } catch (e) {}
const v50 = f42();
-4294967297n > -4294967297n;
let v53 = -128;
v53++;
v53 - v53;
const v56 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v57 = [601759695];
v57[0];
try { v57.every(v57); } catch (e) {}
v57[0] = v57;
const v60 = [1073741824,1073741823,1376142744,1073741825];
let v61;
try { v61 = v60.toString(); } catch (e) {}
try { v61.valueOf(); } catch (e) {}
let v63 = 522675525n;
v63--;
function f65(a66, a67, a68, a69) {
    const v70 = a66?.find;
    let v71;
    try { v71 = new v70(v13); } catch (e) {}
    const v73 = arguments.toString();
    let v74;
    try { v74 = v73.codePointAt(v50); } catch (e) {}
    v74 == v74;
    function f76() {
        const v78 = ("Vre").toLocaleUpperCase;
        try { v78.constructor(a68); } catch (e) {}
        try { v78(); } catch (e) {}
        try { new v78(v78, -4294967297n, a68, v60); } catch (e) {}
        const v82 = ("Vre").fixed(f65);
        try { v82.codePointAt(v71); } catch (e) {}
        let v84;
        try { v84 = v82.localeCompare(a66); } catch (e) {}
        v84++;
        -4294967295 !== -4294967295;
        let v88 = -268435456;
        v88--;
        -(v88 + v88);
        const o105 = {
            "c": -4294967297n,
            [v63](a93, a94) {
            },
            ..."Vre",
            "maxByteLength": v53,
            "c": v57,
            valueOf(a96, a97) {
                return a96;
            },
            "e": -4294967295,
            "e": v88,
            "maxByteLength": -4294967295,
            "arguments": v56,
            ...v57,
            "type": "Vre",
            ..."Vre",
            valueOf(a99, a100) {
                return -4294967295;
            },
            ..."Vre",
            4: "Vre",
            "c": v88,
            "type": "Vre",
            "type": "Vre",
            toString(a102, a103, a104) {
                return a102;
            },
            5: -4294967295,
            6: v88,
        };
        o105.valueOf();
        return f65;
    }
    try { f76(); } catch (e) {}
    const v108 = f76.length;
    v108 << v108;
    const v110 = v108 * v108;
    v110 >>> v110;
    f76();
    Int8Array.a = Int8Array;
    const v114 = new Int8Array();
    let v115;
    try { v115 = v114.entries(); } catch (e) {}
    const v116 = v115?.constructor;
    try { new v116(v108); } catch (e) {}
    try { v114.findIndex(v50); } catch (e) {}
    const v119 = v114.buffer;
    try { v119.resize(arguments); } catch (e) {}
    const v121 = v119.slice();
    try { v121.resize(v121); } catch (e) {}
    %OptimizeFunctionOnNextCall(f76);
    ("find")[0];
    ("find").strike();
    try { v60["find"](..."find", a69, ...v57, ...v60, ...v63); } catch (e) {}
    return v60;
}
for (let v127 = 0; v127 < 5; v127++) {
    v127 > v127;
    f65(v57, v127, v127, v60);
}
%PrepareFunctionForOptimization(f65);
Object.defineProperty("7TV", "length", { writable: true, enumerable: true, get: f42, set: f65 });
try {
    v0.sort(f19);
} catch(e134) {
}
const v135 = f65();
v135[3] = v135;
%OptimizeFunctionOnNextCall(f65);
f65(v135, f65, v53, v50);
