new Float64Array(5);
new String(772);
new Int8Array(9);
const v15 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v18 = new Uint32Array(v15, 2684);
const v20 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v21 = [601759695];
const v22 = [1073741824,1073741823,1376142744,1073741825];
function f24(a25, a26, a27, a28) {
    function f29() {
        let v32 = Float64Array;
        v32 = a26;
        b = v21;
        const v33 = v15.length;
        try {
            v22.forEach(a26, v15, "Vre", a27, 2684);
        } catch(e35) {
        }
        const v36 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v38 = undefined.toPrimitive;
        const o42 = {
            toString(a40, a41) {
                a40 *= v38;
                return v32;
            },
        };
        const o59 = {
            [129n](a45, a46) {
            },
            "c": v21,
            valueOf(a48, a49) {
            },
            [v33](a51) {
            },
            [-1]: 2684,
            1073741824: v18,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "arguments": v36,
            [-4294967297n](a53, a54, a55, a56) {
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v20,
            256: a28,
            ...v21,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
        return o59;
    }
    f29(a26);
    const v62 = new Int8Array();
    const v63 = v62.buffer;
    eval("");
    Uint32Array[2] = 1;
    v63.slice(2147483648);
    %OptimizeFunctionOnNextCall(f29);
    let v71;
    try { v71 = v22["find"](..."find", a28, ...v21, ...v22, ...129n); } catch (e) {}
    return v71 <= a27;
}
for (let v73 = 0; v73 < 10; v73++) {
    f24(v22, v73, v73, v73, v73);
}
%OptimizeFunctionOnNextCall(f24);
f24(f24, v20, 2684, f24);
