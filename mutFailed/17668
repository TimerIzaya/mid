function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 1073741825;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8) {
    const v9 = a8?.__defineSetter__;
    try { new v9(a8, a8); } catch (e) {}
    const o17 = {
        __proto__: v4,
        set g(a12) {
            let v13 = 0;
            do {
                v6[this] = F0;
                super.h = this;
                v13++;
            } while (v13 < 5)
        },
        "a": F0,
    };
    o17.g;
    return o17;
}
const v19 = f7(v6);
f7(v6);
const v21 = f7(v5);
v21.d = v21;
const v23 = new Map();
const v24 = [0.7605638125872468];
try { v24.concat(v5); } catch (e) {}
const v26 = [-9.749234407162461e+307,483380.49818316964,8.747792166401833,0.766063595781572,-3.0];
const v27 = [315399.4401805259];
try { v27.copyWithin(v19, v19); } catch (e) {}
v27[0] = v27;
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    try { new v31(); } catch (e) {}
}
let v33;
try { v33 = F29.bind(f7); } catch (e) {}
try { v33.apply(v23, v23); } catch (e) {}
const v35 = new F29();
const v36 = v35?.constructor;
try { new v36(); } catch (e) {}
v35.length = v35;
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this?.__lookupSetter__;
    try { new v42(a41); } catch (e) {}
}
try { F38.call(v35); } catch (e) {}
const v45 = new F38();
v45.length = v45;
const v46 = v45?.constructor;
v46.length;
try { new v46(v23, v5); } catch (e) {}
const v51 = [];
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    !(9223372036854775807 < 9223372036854775807);
    Date.prototype = Date;
    const v59 = Date.toString(F53);
    const v61 = v59[23]?.trimRight;
    const v62 = v61?.toString;
    try { new v62(); } catch (e) {}
    try { new v61(); } catch (e) {}
    const v65 = v59.replaceAll(v35, -37859n);
    v65[30] = v65;
    Uint32Array.length = Uint32Array;
    const v67 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v67[2] = v67;
    const v68 = v67[2];
    v68 * v68;
    v68 * v68;
    839612.5677247904 & 839612.5677247904;
    for (let i75 = 0; i75 < 6;) {
        const t82 = -15n;
        var c = t82(v67, i75);
    }
    const v85 = new Set(v51);
    try { v85.clear(); } catch (e) {}
    let v87;
    try { v87 = v85.add(v85); } catch (e) {}
    try { v87.keys(); } catch (e) {}
    const v89 = v85.add;
    v89.g = v89;
    v89.f = v89;
    try { v89(v67); } catch (e) {}
    try { ("delete").localeCompare(v85); } catch (e) {}
    const v93 = v85["delete"](839612.5677247904);
    !v93;
    const v95 = v93 || v93;
    !v95;
    v95 && v95;
    const v98 = v95 || v95;
    !v98;
    const v100 = v98 && v98;
    !v100;
    const v102 = v95 && v95;
    const v103 = v102 || v102;
    const v104 = v103 || v103;
    v104 && v104;
    const o107 = {
    };
    o107.c = o107;
    o107.b = o107;
    let v109;
    try { v109 = new Array(Array); } catch (e) {}
    v109[0];
    try { Array(9223372036854775807); } catch (e) {}
    try { ("getPrototypeOf").trimEnd(); } catch (e) {}
    const v114 = ("getPrototypeOf").blink();
    const v115 = v114[28];
    const v116 = v115.strike();
    try { v116.split(v116, v100); } catch (e) {}
    v116[4] = v116;
    const v118 = v114.strike(591114.0785999324);
    v118[29] = v118;
    const v119 = v118?.search;
    try { v119.call(v19); } catch (e) {}
    try { new v119(v67); } catch (e) {}
    const v122 = v118.replace(19793, v45);
    try { v122.slice(4, v23); } catch (e) {}
    v122[11] = v122;
    class C126 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    try { C126.bind(Array); } catch (e) {}
    let v128;
    try { v128 = new C126(); } catch (e) {}
    const v129 = v128?.hasOwnProperty;
    try { new v129(v26); } catch (e) {}
    class C131 extends C126 {
        ["getPrototypeOf"] = C126;
    }
    new C131();
    const v133 = new C131();
    const v134 = v133?.constructor;
    try { new v134(); } catch (e) {}
    try { v133.getPrototypeOf(); } catch (e) {}
    const t146 = v133.constructor;
    new t146();
    const v139 = new C131();
    const v140 = v139?.constructor;
    try { new v140(); } catch (e) {}
    try { v139.getPrototypeOf(); } catch (e) {}
    const v143 = v139.getPrototypeOf;
    try { new v143(); } catch (e) {}
    v143.length = v143;
    const v146 = BigUint64Array.of();
    try { v146.entries(); } catch (e) {}
    try { v146.entries(); } catch (e) {}
    new BigUint64Array();
    new Int8Array();
    const v153 = Uint8Array.length;
    v153 + v153;
    const v155 = new C131();
    const v156 = v155.getPrototypeOf;
    let v157;
    try { v157 = v156.toString(); } catch (e) {}
    try { v157.italics(); } catch (e) {}
    const v159 = new v156();
    v159.a = v159;
    const v160 = v159.getPrototypeOf;
    v160 % v160;
    const v162 = v155.getPrototypeOf;
    try { new v162(); } catch (e) {}
    let v164;
    try { v164 = new v162(); } catch (e) {}
    v164.getPrototypeOf = v164;
    v164.getPrototypeOf = v164;
    const v165 = new C131();
    const v166 = v165?.getPrototypeOf;
    const v167 = /(?:a?)?U*/dim;
    function f168() {
        return v167;
    }
    const t183 = [v167];
    t183.toString = f168;
    try { new v166(); } catch (e) {}
    let v171;
    try { v171 = new v166(); } catch (e) {}
    try { v171.toString(); } catch (e) {}
    const v173 = v165.getPrototypeOf;
    let v174;
    try { v174 = new v173(); } catch (e) {}
    v174.getPrototypeOf = v174;
    try { v173(); } catch (e) {}
    let v176;
    try { v176 = new v173(); } catch (e) {}
    try { v176.hasOwnProperty(v19); } catch (e) {}
    v176.getPrototypeOf;
    try { v176.propertyIsEnumerable(v122); } catch (e) {}
    const v180 = v176?.constructor;
    v180.d = v180;
    try { v180.call(v115); } catch (e) {}
    let v182;
    try { v182 = new v180(v114, this, 4); } catch (e) {}
    try { v182.__defineSetter__(v68, "delete"); } catch (e) {}
    v182.getPrototypeOf;
    const v185 = v182.getPrototypeOf;
    v185 >>> v185;
    try { v182.constructor(); } catch (e) {}
    const v188 = v165.constructor;
    let v189;
    try { v189 = new v188(F53, v102); } catch (e) {}
    const v190 = v189?.constructor;
    v190.prototype = v190;
    const v191 = v189?.getPrototypeOf;
    try { new v191(); } catch (e) {}
    v191.h = v191;
    const v193 = Array(19793);
    v193.f = v193;
    for (const v194 of v193) {
    }
}
const v195 = new F53();
v195.length;
const v197 = new F53();
v197.length;
v197.length = v197;
