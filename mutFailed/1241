function f0() {
}
class C1 extends f0 {
    static {
        const v3 = delete this?.e;
        for (let v4 = 0; v4 < 32; v4++) {
            v3["p" + v4] = v4;
        }
    }
    6 = f0;
    8;
    h = f0;
}
const v7 = new C1();
const v8 = new C1();
new C1();
class C10 {
    static #d;
    b = v8;
    set g(a12) {
        class C13 {
        }
    }
    9 = f0;
    static [v8];
    constructor(a15) {
        try {
            v7.#d = v7;
        } catch(e16) {
        }
        const v20 = new BigInt64Array(257);
        try { v20.join(64); } catch (e) {}
    }
    10 = f0;
    [f0] = v7;
}
new C10(v8);
function f24() {
    return 1e-15;
}
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    try { a28.call(); } catch (e) {}
    for (let v32 = 0; v32 < 50; v32++) {
    }
}
new C10(v7);
new C10(v7);
const v40 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    function f50() {
        const o72 = {
            "c": -4294967297n,
            [522675525n](a55, a56) {
                try {
                    Math.sin(4294967295);
                    Symbol.hasInstance;
                } finally {
                }
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v41,
            valueOf(a63, a64) {
                return a47;
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v40,
            ...v41,
            "type": "Vre",
            ..."Vre",
            valueOf(a66, a67) {
                return a45;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a69, a70, a71) {
                return a45;
            },
            5: -4294967295,
            6: -268435456,
        };
        return "Vre";
    }
    f50();
    const v75 = new Int8Array();
    new Uint8Array(9007199254740992);
    12204n <= -16;
    v75.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f50);
    let v85;
    try { v85 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
    v85 <= a47;
    return arguments;
}
for (let v87 = 0; v87 < 5; v87++) {
    f44();
}
%PrepareFunctionForOptimization(f44);
f44();
%OptimizeFunctionOnNextCall(f44);
f44();
