const v0 = [];
-9007199254740992n << -9007199254740992n;
0.3302519139186567 + 0.3302519139186567;
const v9 = ~Infinity;
function f10(a11, a12, a13, a14) {
    a11 >> a11;
    a12 / a12;
    const o37 = {
        m(a18, a19) {
            try {
                super.valueOf();
            } catch(e21) {
            }
            const v23 = a14.iterator;
            const o32 = {
                [v9]() {
                    let v25 = 10;
                    const o31 = {
                        next() {
                            v25--;
                            const v29 = v25 == 0;
                            const o30 = {
                                "done": v29,
                                "value": 0.3302519139186567,
                            };
                            return v23;
                        },
                    };
                    return o31;
                },
            };
            return v0;
        },
        get e() {
            try {
                v0.length = this;
            } catch(e34) {
            }
            delete this[a11];
            return a12;
        },
    };
    return o37;
}
const v38 = v9(0.3302519139186567, -2147483648n, Infinity, -9007199254740992n);
v38.e = v38;
const v39 = f10(Infinity, -2147483648n, 0.3302519139186567, -9007199254740992n);
v39.e = v39;
f10(Infinity, -9007199254740992n, Infinity, -9007199254740992n);
const v43 = new Uint8ClampedArray(4096);
38 + 38;
const v47 = v43[1073741824];
f10(true || v47, v39, Int16Array, v47);
v43.buffer **= 4096;
try {
    true && v43;
    f10(true, true, Infinity, true);
} catch(e55) {
}
const v56 = new Int16Array(-2147483648n);
try { new BigInt64Array(-2147483648n, 4096, v56); } catch (e) {}
new BigInt64Array(96);
const v61 = [-Infinity,Infinity,959819.665748626];
[v47];
const v65 = v61["concat"]("concat");
v65[0] = v65;
