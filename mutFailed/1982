const v0 = [788660.0385033104,5.0,2.0,-1000.0,4.0,-662.1961748193994,0.9545806349749166,0.2867193397222595];
const v1 = [-4.0,1000000000000.0,2.0,850439.0884237573,0.3170925430410645,-585.6972129322335,-7.375910911040343e+307,2.220446049250313e-16];
const v2 = [6.549135711109699,6.561402103502592e+307,4.28800432591618,-1000.0,1.2256552445467753e+308,-3.0,4.0,0.8911513293029436,-8.384016998819343e+307,-4.0];
class C3 {
    static set g(a5) {
        v1["fill"](this, ...v0, a5, ...v2, ...a5);
        try {
            v2.find(a5);
        } catch(e9) {
        }
    }
    static valueOf(a11, a12) {
        try {
            a12.h = this;
        } catch(e13) {
        }
        const o16 = {
            "maxByteLength": 1000,
        };
        const v18 = new SharedArrayBuffer(9, o16);
        /[h9[\c1]]/gi;
        /\u003z/is;
        new Infinity(v18);
        return v1;
    }
}
new C3();
new C3();
new C3();
let v32 = -2147483648n;
class C34 {
    static m(a36) {
        ({"a":C34,"h":v32,} = this);
    }
}
const v37 = new C34();
const v38 = new C34();
class C39 {
}
const o40 = {
};
o40.b = v37;
const o41 = {
};
Object.defineProperty(o41, "b", { writable: true, value: v38 });
const v42 = new C39();
let v43;
try { v43 = v42.constructor(50820n, o40); } catch (e) {}
const v44 = new C39();
const v45 = v44.__lookupGetter__;
let v46;
try { v46 = v45(); } catch (e) {}
const v47 = new C39();
const v48 = v47.constructor;
new v48(C34, v43, C39, o40);
const v52 = new Float32Array();
try { v52.forEach(v46, v38); } catch (e) {}
const v56 = new BigUint64Array();
let v57;
try { v57 = v56.filter(v48); } catch (e) {}
class C58 {
}
const v59 = new C58();
const v60 = v59.__lookupGetter__;
try { v60(v37); } catch (e) {}
function f62(a63) {
    return a63;
}
const v64 = v59.constructor;
new v64(v46);
const v66 = new C58();
v66.propertyIsEnumerable(v64, v57, o41);
const v68 = new C58();
const t73 = v68.constructor;
const v70 = new t73();
const v71 = /[\11]/gm;
v71.e = v71;
const v72 = /a(?!bbb|bb)c/vi;
Object.defineProperty(v72, "toString", { value: f62 });
const v73 = v72.toString;
const v74 = new v73(BigUint64Array, 246, C34, v72, v73);
const v75 = v74.__lookupGetter__;
try { v75(); } catch (e) {}
const v78 = new Uint16Array(C39);
const v79 = v78[1];
v79 & v79;
const v83 = new Int32Array(v70, 31, 560);
v83[30];
function f85() {
    return Int32Array;
}
const v86 = f85();
v86.e = v86;
const t93 = f85().e;
new t93();
new JSON();
const v100 = new Date("undefined");
v100.getYear();
