function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Date[Symbol.toPrimitive] = Date;
    const v5 = new Date();
    try { v5.setHours(Date, this, v5, F0); } catch (e) {}
    function f7(a8, a9, a10, a11) {
        a8.constructor = f7;
        const v13 = new Int32Array();
        v13[492];
        v13[3];
        return a8;
    }
    f7.constructor = Symbol;
    f7();
    const v18 = f7(f7, f7, f7, f7)?.constructor;
    try { new v18(this); } catch (e) {}
    try {
        this.h = -65537;
    } catch(e21) {
    }
    try {
        this.c = -65537;
    } catch(e22) {
        new Float64Array(1000);
        class C28 {
            ["getPrototypeOf"] = -1.7976931348623157e+308;
        }
        class C29 extends C28 {
            ["getPrototypeOf"] = C28;
        }
        const v30 = new C29();
        const t31 = v30.constructor;
        new t31();
    }
    const v34 = /a$\P{Decimal_Number}/gvdims;
    v34.toString = f7;
    const v35 = v34[v34];
    for (let i = 0; i < 5; i++) {
        const v36 = v34.source;
        try { v36.blink(); } catch (e) {}
        try { v35(true, v36, v36, v36); } catch (e) {}
        const v40 = true + true;
        v40 + v40;
        Math.log(v40);
    }
    try {
        this.g = -65537;
        for (let i = 0; i < 5; i++) {
            ["object"];
        }
        class C45 {
        }
        C45.length = C45;
        const v46 = new C45();
        function f47(a48, a49) {
            for (let v50 = 0; v50 < 25; v50++) {
            }
            return a48;
        }
        v46.constructor = f47;
        const v51 = v46?.constructor;
        try { new v51(); } catch (e) {}
        for (const v54 of `match${v46}-20124`) {
        }
    } catch(e55) {
    }
}
function f56() {
    F0 | F0;
    gc();
    return F0;
}
F0[Symbol.toPrimitive] = f56;
const v62 = new F0();
const v63 = new F0();
const v64 = new F0();
const v65 = [v62,v64,v63,v63,v64];
const v67 = [[F0,v62],v63];
const v68 = [v67,v63,v65,v67];
const v69 = [v68,v62,v65,v62,v68];
try { v69.map(F0); } catch (e) {}
([v64,v68,v63])[0];
-19568 | -19568;
const v79 = Uint32Array.prototype;
const v80 = new Uint32Array(256);
new Int8Array(1024);
const v86 = new Uint8Array(0);
Uint16Array[0] = v79;
const v88 = new Uint16Array(Uint16Array);
function f90() {
    3.4890473589784586e+307 << 3.4890473589784586e+307;
    const v96 = ("-26733")?.italics;
    try { new v96(); } catch (e) {}
    v80[3] = "-26733";
    const v98 = [601759695];
    try { v98.sort(12); } catch (e) {}
    const v100 = [427812215,61195,-2147483647,4096,-2147483647,30905];
    function f101(a102, a103, a104, a105) {
        try { a104.find(a102, a104, a103, v100, a103); } catch (e) {}
        try { v100["find"](..."find", a105, ...v98, ...v100); } catch (e) {}
        return a102;
    }
    const o113 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a110) {
            return v88;
        },
        set b(a112) {
        },
        ...v86,
        ...3.4890473589784586e+307,
    };
    return f90;
}
%PrepareFunctionForOptimization(f90);
f90();
f90();
%OptimizeFunctionOnNextCall(f90);
f90();
