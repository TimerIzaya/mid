let v0 = 1008463286;
-23299 + -23299;
v0--;
-16 << -16;
const v11 = 10 && 50107;
const v12 = v11 & v11;
50107 + 10;
v12 ^ 10;
Math.trunc(10);
const v16 = [51784,9007199254740992];
const v17 = [-56374,-6036,8,11];
v17[3] = v17;
const v18 = [1060745987];
let v19;
try { v19 = v18.toString(); } catch (e) {}
0 + 0;
try { new Uint8ClampedArray(-4096, Uint8ClampedArray, v19); } catch (e) {}
let v24;
try { v24 = Uint8ClampedArray.from(10); } catch (e) {}
let v25;
try { v25 = v24.filter(v11); } catch (e) {}
const v26 = new Uint8ClampedArray(0);
try { v26.sort(v24); } catch (e) {}
3037 >> 3037;
[-4.0,1000.0,-310662.52310963185,-0.0,1000.0,Infinity];
[1000000.0];
[-1000.0,-9.103858358763924e+307,-1000.0,1.7976931348623157e+308,2.0];
v11 ** v25;
v18[Symbol.split] = 50107;
new Uint8ClampedArray(3037);
try { new BigInt64Array(v26, v26, 7); } catch (e) {}
new BigInt64Array(7);
for (let i43 = 7; i43 < 6; i43++) {
    new Int32Array(5);
    new Uint32Array(10);
    new Uint32Array(512);
}
function f58() {
    const v60 = ([f58,f58]).constructor;
    try { new v60(0); } catch (e) {}
    v16.length <<= v25;
    try {
        v24.b = 7;
    } catch(e62) {
    }
    class C63 extends -23299 {
    }
    const v64 = new C63();
    try { v64.toLocaleString(); } catch (e) {}
    const v66 = v64.constructor;
    try { new v66(); } catch (e) {}
    let v68;
    try { v68 = v66.from(3037); } catch (e) {}
    try { v68.lastIndexOf(C63); } catch (e) {}
    const v70 = v66.bind();
    let v71;
    try { v71 = v70(); } catch (e) {}
    return v71;
}
try { f58(); } catch (e) {}
%PrepareFunctionForOptimization(f58);
f58();
%OptimizeFunctionOnNextCall(f58);
f58();
