function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        const v6 = new Float32Array(1962);
        v6[1229];
        new Int8Array(this);
        new Int8Array(238);
    }
    const v14 = f2?.bind;
    try { new v14(this); } catch (e) {}
    Object.defineProperty(this, "c", { enumerable: true, set: f2 });
    -28191 >>> -28191;
    try {
        this.c = -28191;
    } catch(e18) {
    }
    try {
        this.d = -28191;
    } catch(e19) {
    }
    try {
        this.h = -28191;
    } catch(e20) {
    }
}
const v21 = new F0();
const v22 = new F0();
const v23 = new v22();
v23.length = v23;
-758878442 < -758878442;
1947 >> 1947;
new BigInt64Array(BigInt64Array);
new Uint8Array(128);
-1478389144 << Uint8Array;
const v36 = typeof v21;
const v38 = v36 === "boolean";
const v39 = [v38,v38];
try { (-1478389144).entries(); } catch (e) {}
[v36,v39,128];
[-1478389144,"boolean",F0,-758878442];
try { BigInt64Array.bind(v36); } catch (e) {}
new BigInt64Array(127);
try { BigUint64Array(v21, 128, Uint8Array); } catch (e) {}
const v50 = new BigUint64Array(2);
const o81 = {
    [v50](a54, a55, a56) {
        class C57 {
            static {
                for (let i62 = 0, i63 = 10;
                    (() => {
                        const v64 = i62 < i63;
                        class C65 extends Date {
                        }
                        return v64;
                    })();
                    i62++) {
                    i63 = i63 ** BigUint64Array;
                    super[i62] = this;
                    super[a55];
                    new Set();
                }
            }
        }
        for (let i76 = 0; i76 < 10;) {
        }
    },
};
o81.e = o81;
