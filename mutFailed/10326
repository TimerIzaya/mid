function f0() {
}
new Uint16Array(1927);
try { new Uint32Array(-1269627725, f0, f0); } catch (e) {}
const v10 = new Uint32Array(16);
4 << 4;
const v14 = new Uint8Array(4);
try { v14.entries(); } catch (e) {}
[536870888,4096,-11];
const v20 = [31909n];
(1927)[0];
const v22 = v20.includes;
v22.b = v22;
ArrayBuffer.length;
const o26 = {
    "maxByteLength": "symbol",
};
const v28 = new ArrayBuffer(203, o26);
try { v28.slice(v10, 203); } catch (e) {}
new Uint8Array(v28);
Reflect.apply(v22, "symbol", v20);
