const v0 = [0.19537746062800976,1000.0,-3.0,945.0694442715512,8.833960881081428,0.14708560218518596,1.5365984660093067e+308,0.965768438434338,0.753934253665854];
const v1 = [676472.4121051678,990.7565148381227,3.4706328850571584];
const v2 = [7.533735837200371,-1.7173815360509526,-1000000.0,9.751177589388199,0.7175038632969705,9.637481227010632,-2.658330708512011e+307];
class C6 {
    [v0];
    static [8] = v0;
    static {
        const v8 = super[this];
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            function f15() {
                Int16Array.length = Int16Array;
                Int16Array[0] = 9223372036854775807;
                const v18 = new Int16Array(Int16Array);
                return v18;
            }
            try { f15.call(a14); } catch (e) {}
            this.constructor = f15;
            const v20 = this?.__defineGetter__;
            const v21 = v20?.toString;
            try { new v21(); } catch (e) {}
            try { new v20(a14, this); } catch (e) {}
            try {
                const v24 = `
                `;
            } catch(e25) {
            }
        }
        try { v2.map(v8, this); } catch (e) {}
    }
    static #e = v1;
    static 268435440;
    #d;
}
new C6();
const v29 = new C6();
const v31 = +[601759695];
v31 >>> v31;
const v36 = new Uint32Array();
const v38 = [601759695];
const v39 = [1073741824,1073741823,1376142744,1073741825];
function f40(a41, a42, a43, a44) {
    const v46 = Symbol.toStringTag;
    function f47() {
        function F48(a50, a51, a52, a53) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F48();
        BigUint64Array * 4096;
        let v58;
        try { v58 = ("Vre").charAt(4096); } catch (e) {}
        try { v58.lastIndexOf(f47); } catch (e) {}
        let v60;
        try { v60 = v46.codePointAt(v2); } catch (e) {}
        v60 - v60;
        v60 ^ v60;
        let v63 = Float64Array;
        v63 = a42;
        let v64 = v2.length;
        v64++;
        try {
            v39.forEach(a42);
            BigUint64Array * 536870887;
        } catch(e69) {
            e69.stack = e69;
        }
        const o84 = {
            "c": -4294967297n,
            "c": v38,
            valueOf(a71, a72) {
                return a71;
            },
            1073741824: v36,
            [-4294967297n](a74, a75, a76, a77) {
                eval(v64);
            },
            get e() {
            },
            n(a82, a83) {
                return "Vre";
            },
            "arguments": 5,
            256: a44,
        };
        o84[256];
    }
    f47();
    %OptimizeFunctionOnNextCall(f47);
    return v46;
}
for (let v87 = 0; v87 < 5; v87++) {
    f40(4096, v38, v87, v2);
}
new C6();
function f90(a91, a92, a93) {
    const o102 = {
        "d": v0,
        [512](a95, a96) {
            let v97;
            try { v97 = a91.toLocaleString(a93, a95); } catch (e) {}
            super.e = a92;
            try { v97(a92, 512); } catch (e) {}
            return a93;
        },
        "f": 512,
        [a92]: 65536,
    };
    return v29;
}
new v31(30492);
class C105 {
}
function F106(a108, a109, a110) {
    if (!new.target) { throw 'must be called with new'; }
}
const v111 = new F106();
Object.defineProperty(v111, v31, { writable: true, configurable: true, set: Array });
f90(v29, 512, v1);
f90(v0, 8, 8);
f90(v1, 512, v29);
const v116 = [];
const v117 = [v116,v116,v116];
const o118 = {
};
const v120 = new Proxy(v117, o118);
Object.defineProperty(v120, -1, { configurable: true, value: v116 });
