[577243.6590337029,-1000000000.0,-217.39674921468645,-5.0,0.48801465336511785];
const v1 = [-651081.400610338,-0.0,-1000000.0,-496026.58881968085,734365.2679742198,-0.0,5.0,-1000000000.0,7.224169733239364];
const v2 = [0.019887658528402796,2.220446049250313e-16,-740.885922980808,-6.101658543236653,2.0,1000.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v2;
    } catch(e6) {
    }
}
const v7 = new F3(v2);
new F3(v1);
const v9 = new F3(v2);
const v11 = new v7();
class C12 extends F3 {
    n(a14, a15) {
        new F3(v9);
        super[this] = a15;
        %VerifyType(v11);
        a15[6] = a14;
        new Map();
        const o20 = {
        };
        try {
            o20.f = Reflect;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.f = Reflect;
            o22.b = v7;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.f = Reflect;
            o24.b = a14;
            function F25() {
                if (!new.target) { throw 'must be called with new'; }
                for (let v27 = 0; v27 < 50; v27++) {
                    v27 << v27;
                    for (let v29 = 0; v29 < 25; v29++) {
                        this["p" + v29] = v29;
                    }
                }
            }
            new WeakSet();
            new WeakSet();
            o24.h = v9;
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.f = o35;
            o35.b = a14;
            o35.e = a15;
        } catch(e36) {
        }
        return this;
    }
}
new C12();
new C12();
new C12();
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    try {
    } catch(e46) {
    }
    function F47() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F47();
    const v50 = F43?.__defineSetter__;
    try { v50(); } catch (e) {}
    function f52(a53, a54) {
        const o55 = {
        };
        return o55;
    }
    const v56 = f52(v50, f52);
    function f57() {
        return f57;
    }
    const v60 = new Float32Array(218);
    for (const v61 of v60) {
        v61 >>> v61;
        Object.defineProperty(v56, Float32Array, { configurable: true, enumerable: true, get: f52, set: f57 });
    }
}
new F43();
new F43();
new F43();
