class C3 {
    p(a5, a6) {
        a5[196] = 1879762570;
        const v8 = Math.log2();
        const v9 = Math.cosh();
        const v10 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
        function F11(a13, a14, a15, a16) {
            if (!new.target) { throw 'must be called with new'; }
            for (let v17 = 0; v17 < 100; v17++) {
                const o18 = {
                };
                function f19(a20, a21, a22) {
                    const o23 = {
                        "a": o18,
                    };
                    let v24 = 0;
                    while ((() => {
                            let v25 = 10;
                            v25++;
                            return v24 < v25;
                        })()) {
                        const v28 = v10.__proto__;
                        try { v28.findLastIndex(this, v24, v17); } catch (e) {}
                        delete v10[v8];
                        v24++;
                    }
                }
                const v32 = f19();
                ([0,2147483647,9223372036854775807,9007199254740990,9007199254740990]).concat(v9);
                f19(v17, v17, v32);
            }
        }
        try {
            function F36() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C38 extends F36 {
            }
            let v39 = -1024;
            for (let v40 = 0; v40 < 5; v40++) {
                function f41() {
                    let v42 = -268435456;
                    let v43 = -1073741824n;
                    C38.e = v43--;
                    this.DataView;
                    v42--;
                    const o51 = {
                        get a() {
                            eval();
                            return f41;
                        },
                    };
                    v39 %= v42;
                    return v40;
                }
                f41();
                %OptimizeFunctionOnNextCall(f41);
            }
            a5.f = -9007199254740992;
            [4];
            function F55(a57, a58) {
                if (!new.target) { throw 'must be called with new'; }
                this.c = a58;
            }
        } catch(e59) {
        }
        return -9007199254740992;
    }
    toString(a61, a62) {
        function f63() {
            Number.isNaN(Math.fround(Math));
            return f63;
        }
        f63();
        %OptimizeFunctionOnNextCall(f63);
        const t75 = this.constructor;
        new t75();
        class C72 extends Array {
        }
        Math.log2(0);
        -this;
    }
    #b;
    #f = -9007199254740992;
    static #e;
}
class C79 {
    set b(a81) {
        gc();
    }
    static toString(a85, a86) {
        const v88 = super[a86];
        try {
            delete this[v88];
            this[C3];
        } catch(e91) {
        }
    }
    ["9007199254740991"] = "a";
}
const v92 = [-1000000.0,-3.1923473210656557,-1.721355656202141e+308,4.0,0.3955838142797843,-3.0,1.1463753586867827e+308];
function f93(a94) {
    const o95 = {
    };
    o95[213] = v92;
    return o95[213];
}
%PrepareFunctionForOptimization(f93);
const v97 = new C3();
v97.length = v97;
new C3();
new C3();
0 == 268435440n;
function f104() {
}
const t115 = "e";
t115[0] = "e";
function f107(a108) {
    return a108;
}
class C110 {
}
const v111 = new C110();
const v112 = [v111,-1000000.0];
function F113(a115, a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
    a117.groupToMap(f107);
}
new F113(2.2250738585072014e-308, F113, v112);
const v124 = new Float32Array();
v124["copyWithin"](..."-11838");
/(ab)\1T1TYk?/gvy;
/za\b!3Y5a\S/gudmy;
/2(ab)/gdy;
function f132(a133, a134, a135, a136) {
    this.decodeURIComponent(a133, f132, a135);
    return f132;
}
for (let v139 = 0; v139 < 10; v139++) {
    f132();
}
class C141 {
}
const v142 = new C141();
class C143 extends C141 {
    constructor(a145, a146, a147, a148) {
        if (v142) {
        }
    }
}
const v149 = new Uint8Array(v97);
const v153 = new Int8Array(242);
v153.fill(-65380);
for (const v155 in v149) {
}
