new Float64Array(2147483648);
class C5 {
    constructor(a7, a8, a9) {
        a8.e = a8;
        class C11 extends a8.constructor {
        }
        const v12 = new C11();
        try { v12(); } catch (e) {}
    }
}
try { C5.bind(2147483647); } catch (e) {}
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = new Int8Array(1392);
    const o30 = {
        "get": Symbol,
    };
    const v32 = new Proxy(v28, o30);
    v32[795];
    const v36 = [Uint32Array,3.5885237423067196];
    const o37 = {
        "arguments": v36,
        "type": "function",
    };
    o37.arguments;
    try {
        const v40 = [1.0,141599.63044947106,730.845463907873,1000000.0,-4.2811873669589365e+307,0.0,3.0];
        try { v40.sort(this); } catch (e) {}
        try { v40.forEach(-5n); } catch (e) {}
        ("preventExtensions")?.toLocaleUpperCase;
        try {
        const t0 = 2147483648;
        new t0();
        } catch (e) {}
        !-2;
        const o48 = {
        };
        let v49 = 0;
        v49++;
        v49 < 2;
        const o61 = {
            toString(a55, a56, a57, a58) {
                return "preventExtensions";
            },
            get e() {
                return Int8Array;
            },
        };
        const v62 = o61?.__lookupSetter__;
        try { new v62(this); } catch (e) {}
        this.h = a24;
    } catch(e64) {
        new Float32Array(Uint8ClampedArray, Uint8ClampedArray, Float32Array);
        const v70 = new BigUint64Array(255);
        v70.buffer;
    }
    try {
        this.g = "g";
    } catch(e72) {
    }
    try {
        this.a = a22;
    } catch(e73) {
    }
}
new F19("g", "g", "number", "number");
new F19("g", "m", "g", "number");
const v76 = new F19("m", "g", "m", "g");
v76.h = v76;
const v78 = new WeakSet();
function F79(a81, a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    const v84 = this?.constructor;
    try { new v84(a81, a81, C5); } catch (e) {}
    let v86;
    try { v86 = a82.match(v78); } catch (e) {}
    try {
        this.h = v86;
    } catch(e87) {
    }
    try {
        this.c = WeakSet;
    } catch(e88) {
        function f89(a90, a91) {
            arguments.toString = a90;
            return f89;
        }
    }
}
const v93 = F79?.__lookupSetter__;
try { new v93("g"); } catch (e) {}
const v95 = new F79("g", "m", "number");
v95.length;
const v97 = new F79("number", "m", "m");
v97.length;
const v99 = new F79("m", "number", "number");
const v100 = [65535,268435439,-9007199254740990,268435440,1024,19743,5,4];
[v100];
function f104(a105, a106) {
    const o108 = {
        get c() {
            let v107 = this;
            v107 += v107;
            return a106;
        },
        "b": -65537n,
        __proto__: a105,
        ...a105,
        "a": a106,
        6: 4294967297n,
        "c": 4294967297n,
    };
    return o108;
}
let {...v110} = f104(f104, f104);
const v111 = v99?.c;
try { new v111(); } catch (e) {}
function F115(a117, a118, a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(a118, F19, -714582153, -714582153); } catch (e) {}
    a118.caller = a120;
    const v124 = new Int8Array(520);
    const v126 = new Uint8ClampedArray();
    const v127 = v126.toReversed();
    const v129 = [v127,v127];
    const v130 = v124.includes;
    let v132 = -1;
    class C134 {
        static 7;
        static [v132] = "string";
        #n(a136) {
            a136 = this;
            a136.e >>>= -35417;
            const o140 = {
                "execution": "sync",
                "type": "major",
            };
            gc(o140);
            return this;
        }
    }
    let v142 = new C134();
    const v143 = new C134();
    const v144 = new C134();
    function f145(a146, a147) {
        let v148 = 0;
        do {
            v142 -= v143;
            v148++;
        } while (v148 < 5)
        const o162 = {
            ...a146,
            [a146](a153, a154, a155, a156) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            ...a147,
            "c": a146,
            "g": v144,
            "a": a146,
            set b(a161) {
                v132 <<= v132;
            },
        };
        return o162;
    }
    v130.length;
    const v164 = Reflect.apply(v130, v124, v129);
    v164 || v164;
}
const v166 = new F115(-714582153, F115);
const v167 = new F115(9, v166);
const v168 = v167?.constructor;
class C170 {
    2147483647 = undefined;
}
const v172 = `7${v100}dm${"unicode"}m`;
function F173(a175, a176, a177) {
    if (!new.target) { throw 'must be called with new'; }
}
F173(F173(), "unicode", v172);
try { new v168(v76, 40340, v76, 40340); } catch (e) {}
function f181() {
    return F115;
}
function f182(a183) {
    return a183;
}
f182.caller;
Object.defineProperty(v167, "caller", { enumerable: true, get: f181, set: f182 });
