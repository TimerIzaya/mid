[];
let v3 = new Float32Array(656);
const v6 = new BigInt64Array(4096);
const v9 = new Float32Array(2592);
class C17 extends Map {
}
const v18 = new C17();
const v19 = new C17();
const v20 = new C17();
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v25 = Uint32Array;
function f26() {
    const o33 = {
        toString(a31, a32) {
        },
        "b": "boolean",
        "c": "boolean",
        ["object"]: f26,
        ["boolean"]: 1000000000000.0,
        "h": 1000000000000.0,
    };
    return o33;
}
const v34 = f26();
f26();
const v36 = f26();
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = v9[127];
try { v40(BigUint64Array, v40, v6, 2592, v34); } catch (e) {}
Object.defineProperty(v6, 536870912, { writable: true, get: f26 });
const o42 = {
};
try {
    o42.c = v36;
} catch(e43) {
}
try {
    const o44 = {
    };
    o44.c = v36;
    o44.a = v9;
} catch(e45) {
}
try {
    const o46 = {
    };
    o46.c = v36;
    o46.a = v9;
    o46.h = BigInt64Array;
} catch(e47) {
}
try {
    const o48 = {
    };
    o48.c = v36;
    o48.a = v9;
    o48.h = v40;
} catch(e49) {
}
const v50 = new F37();
function f51(a52, a53, a54) {
    const o59 = {
        get a() {
            const o57 = {
            };
            gc();
        },
    };
    return o59;
}
const v60 = f51();
f51();
function F62(a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    const v67 = this.constructor;
    %VerifyType(4294967297);
    for (let v68 = 0; v68 < 32; v68++) {
        a65["p" + v68] = v68;
    }
    try { new v67(F62, F62); } catch (e) {}
    a65.g = a65;
    this.a = a64;
}
const v72 = new F62(v36, v34, v50);
new F62(v36, v60);
Math?.expm1;
const v76 = new v25(5);
let v77 = -4294967297n;
v77--;
const v79 = [601759695];
const v80 = [1073741824,1073741823,1376142744,1073741825];
function f82(a83, a84, a85, a86) {
    try { a83.toLocaleString(); } catch (e) {}
    const v88 = a83?.constructor;
    let v89;
    try { v89 = v88(); } catch (e) {}
    try { v88(); } catch (e) {}
    const v92 = arguments.length;
    Object.defineProperty(v18, "e", { configurable: true, enumerable: true, value: f82 });
    const v94 = v19["entries"](a85, ...v20, BigUint64Array, ..."entries", a84, v92);
    const v96 = Symbol.toStringTag;
    v19[v96] = v96;
    function f97() {
        let v99;
        try { v99 = ("Vre").charAt(4096); } catch (e) {}
        try { v99.lastIndexOf(f97); } catch (e) {}
        let v101;
        try { v101 = ("Vre").codePointAt(v24); } catch (e) {}
        v101 - v101;
        v101 ^ v101;
        let v110 = Float64Array;
        v110 = a84;
        let v111 = v24.length;
        v111++;
        try {
            v80.forEach(a84);
        } catch(e114) {
            e114.stack = e114;
        }
        const o125 = {
            "c": v77,
            "c": v79,
            valueOf(a116, a117) {
                return a117;
            },
            1073741824: v76,
            [v77](a119, a120, a121, a122) {
                eval(v89);
            },
            "arguments": 5,
            256: a86,
        };
        o125[256];
        const v127 = new f97();
        v127 in o125;
        a83.a &&= v99;
        try { v127.asin(v72, -4096); } catch (e) {}
        try {
            const t140 = "Vre";
            t140.__proto__ = v99;
        } catch(e130) {
        }
    }
    f97();
    const v133 = Array();
    let v134;
    try { v134 = v133.findLast(f82, v76); } catch (e) {}
    ({"b":v3,"callee":v134,"length":v25,} = arguments);
    try {
        const t151 = "entries";
        t151.length = 2;
    } catch(e136) {
    }
    v133.unshift("entries", v94, "entries", v134);
    let v139;
    try { v139 = Int8Array.of(); } catch (e) {}
    try { v139.join(v88); } catch (e) {}
    const v141 = new Int8Array(v79);
    v141.c = v141;
    const v142 = v141.buffer;
    v142.maxByteLength;
    const v144 = v142.slice(v20);
    try { Int32Array(v144, arguments, v77); } catch (e) {}
    function f147(a148, a149, a150, a151) {
        return v18;
    }
    const v152 = new Int32Array();
    const v153 = v152[3];
    v153 + v153;
    for (let v155 = 0; v155 < 5; v155++) {
    }
    %OptimizeFunctionOnNextCall(f97);
    try { v80["find"](..."find", a86, ...v79, ...v80, ...522675525n); } catch (e) {}
    return a85;
}
for (let v158 = 0; v158 < 10; v158++) {
    f82(v76);
}
%OptimizeFunctionOnNextCall(f82);
f82();
