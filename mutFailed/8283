function f0() {
    const o23 = {
        "c": 2.0,
        2151: "268435456",
        get d() {
            this[3] = this;
            function F5(a7, a8, a9, a10) {
                if (!new.target) { throw 'must be called with new'; }
                this.h = a8;
            }
            function f11() {
                for (let i13 = 0, i14 = -8;
                    (() => {
                        class C15 extends f11 {
                        }
                        return i13 < -8;
                    })();
                    (() => {
                        const v19 = i13++;
                        v19 >> v19;
                    })()) {
                }
                return -8;
            }
            super.e = -8;
            return -8;
        },
        ..."268435456",
        ..."268435456",
        "h": -8,
        206: -8,
        "a": -8,
        [-1]: 2.0,
    };
    return o23;
}
const v24 = f0();
const v25 = f0();
f0();
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = F33;
    } catch(e39) {
    }
}
new F33(1073741823n, v24, "valueOf", -536870912n);
const v41 = new F33(-536870912n, v25, "-128", 49679n);
new F33(49679n, v25, "toString", -536870912n);
for (let v43 = 0; v43 < 5; v43++) {
    function f44() {
        class C45 {
        }
        const v46 = new C45();
        function f47(a48, a49) {
            const o50 = {
                [a49]: v46,
            };
            return v43;
        }
        %PrepareFunctionForOptimization(f47);
        function f51(a52, a53, a54) {
            return f51;
        }
        const o57 = {
            "type": "function",
        };
        o57.arguments = v41;
        const v58 = new Worker(f51, o57);
        return v58.terminate(f51, v58, v43);
    }
    f44();
    %OptimizeFunctionOnNextCall(f44);
}
class C61 {
    constructor(a63, a64, a65, a66) {
        a66.match(a65);
    }
}
