function f0() {
}
function f1() {
    const o16 = {
        "f": f0,
        "d": f0,
        "h": f0,
        1029: f0,
        "b": f0,
        set c(a3) {
            a3?.[4294967295];
            Object.defineProperty(a3, 1073741823, { writable: true, set: f0 });
            Math.random();
            const v11 = 1 - f0;
            let v12 = ~v11;
            Math.atanh(v11);
            v12--;
            f0 || f0;
        },
    };
    return o16;
}
f1();
f0[1] = f1;
const o20 = {
    "maxByteLength": 1117,
};
const v22 = new SharedArrayBuffer(1117, o20);
const v24 = new Float32Array(v22);
const v25 = f1();
v25[1029] = v25;
const v26 = f1();
function F27(a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a29;
    } catch(e30) {
    }
    try {
        this.e = v25;
    } catch(e31) {
    }
    try {
        this.f = a29;
    } catch(e32) {
    }
}
for (const v33 in v24) {
    try { o20.p(o20); } catch (e) {}
}
o20[65535] = v24;
f0();
%PrepareFunctionForOptimization(f0);
f0();
f0();
%OptimizeMaglevOnNextCall(f0);
f0();
const v39 = new F27(v25);
new F27(v25);
new F27(v25);
new Uint8ClampedArray(512);
try { Uint32Array.apply(v39, Uint32Array); } catch (e) {}
const v48 = new Uint32Array(4096);
8 / 8;
try { new Int32Array(v25, v25, v39); } catch (e) {}
new Int32Array(8);
try { ("symbol").fontsize(v25); } catch (e) {}
class C58 {
    static #toString(a60) {
        let v61 = 0;
        while (v61 < 3) {
            Math.random();
            Math.sin(this);
            ++v61;
            Math.clz32(this);
            --v61;
            !1680472700;
            v61++;
        }
        return 7;
    }
}
C58.length = C58;
try {
    C58.valueOf = "number";
} catch(e74) {
}
let v78 = 3 & 7;
v78--;
const v80 = 7 & C58;
let v81 = Math.log2(13);
v81 >> v81;
const v83 = C58 << 7;
(v80 | 13) || v78;
const v86 = new C58();
const v87 = v86?.__defineGetter__;
try { new v87(v25, 512); } catch (e) {}
const v89 = new C58();
const v90 = v89?.constructor;
try { new v90(); } catch (e) {}
const v92 = new C58();
class C93 extends C58 {
    static [v92] = "symbol";
    static [v89];
    static set g(a95) {
        super.d = a95?.["symbol"];
        for (const v97 of v87) {
            try { this["every"](v26, "every", "every", "every", "every"); } catch (e) {}
        }
        this[0] /= v90;
    }
    static 6 = v92;
    static o(a101, a102, a103) {
        const v104 = v92[4];
        try {
            new C58(v104);
        } catch(e106) {
        }
        return a102;
    }
}
C93[6];
const v108 = new C93();
const v109 = v108?.constructor;
try { new v109(); } catch (e) {}
const v111 = new C93();
try { v111.propertyIsEnumerable(v48); } catch (e) {}
const v113 = new C93();
class C114 extends C93 {
    #m(a116, a117, a118, a119) {
        const o120 = {
        };
        try {
            o120.a = this;
        } catch(e121) {
        }
        try {
            const o122 = {
            };
            o122.a = this;
            o122.__proto__ = 7;
        } catch(e123) {
        }
        try {
            const o124 = {
            };
            o124.a = this;
            o124.e = 7;
            o124.b = v92;
        } catch(e125) {
        }
        try {
            const o126 = {
            };
            o126.a = this;
            o126.e = 7;
            o126.d = this;
        } catch(e127) {
        }
        return "symbol";
    }
}
new C114();
const v129 = new C114();
const v130 = v129?.constructor;
try { new v130(); } catch (e) {}
try { Math.expm1(v25); } catch (e) {}
let v136 = v83 / -4.0;
v136++;
const v138 = v81++;
const v139 = v136--;
const v140 = v138 ** v83;
v140 + v140;
v136 * v83;
const v143 = new C114();
try { v143.constructor(); } catch (e) {}
const v147 = new Uint16Array();
function F148(a150, a151, a152) {
    if (!new.target) { throw 'must be called with new'; }
}
-4294967297n / -4294967297n;
for (let v156 = 0; v156 < 25; v156++) {
    v156 & v156;
    const v158 = [-587,-11,-5];
    const v159 = v158.filter;
    try { new v159(v113); } catch (e) {}
    let v161;
    try { v161 = v159(); } catch (e) {}
    const v162 = [1073741824,1073741823,1376142744,1073741825];
    function f163(a164, a165, a166, a167) {
        a164++;
        -a164;
        a165 >>> a165;
        const v171 = a164 >>> a164;
        let [] = v162;
        let v173 = v147["toSorted"]();
        try { v173.entries(); } catch (e) {}
        v161 <= v139;
        v173 = -4.0;
        const v176 = v171 | v171;
        v176 === v176;
        const v178 = a166[3];
        -v178;
        -(v178 + v178);
        try { v162["find"](..."find", a167, ...v158); } catch (e) {}
    }
    for (let v184 = 0; v184 < 10; v184++) {
        f163(v184, v184, v162);
    }
}
