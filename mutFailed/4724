46758289n ^ 46758289n;
6.480673068082837 != 6.480673068082837;
4.0 >> 4.0;
let v12 = 10n;
v12--;
let v14 = 536870887n;
v14--;
let v17 = 16;
v17++;
try { Uint16Array.from(Uint16Array); } catch (e) {}
let v21;
try { v21 = Uint16Array.of(); } catch (e) {}
const v22 = new Uint16Array(v17);
function f23() {
    function f24(a25) {
        class C26 {
        }
        return a25;
    }
    return f24;
}
Object.defineProperty(v22, Symbol.toPrimitive, { writable: true, configurable: true, get: f23 });
v22[9];
4 !== 4;
const v32 = -4;
let v34;
try { v34 = new Uint8ClampedArray(Uint16Array, Uint16Array, v32); } catch (e) {}
v34[2];
new Uint8ClampedArray(4);
4 ^ 4;
const v40 = new BigInt64Array(4);
try { v40.reduce(v21); } catch (e) {}
let v42 = 1024;
v42 / v42;
v42--;
Int32Array.length;
const v47 = new Int32Array(v42);
v47[98];
for (const v49 of v47) {
    v49 - v49;
    const v51 = v49 * v49;
    v51 > v51;
    const v54 = SharedArrayBuffer.length;
    v54 - v54;
    1293466293 != 1293466293;
    const o58 = {
        "maxByteLength": 1293466293,
    };
    o58.b = v12;
    o58.b = o58;
    const v59 = o58.maxByteLength;
    v59 / v59;
    v59 >>> v59;
    const v63 = new SharedArrayBuffer(1796, o58);
    v63.b = v63;
    let v64;
    try { v64 = v63.slice(1293466293, v22); } catch (e) {}
    const v65 = v64.growable;
    v65 && v65;
}
