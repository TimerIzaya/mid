class C3 {
    constructor(a5, a6) {
        var a = a5;
        new Uint32Array(4096);
        new Uint32Array(14);
        new Uint16Array(212);
    }
}
const v16 = new C3(0.25979346904466505, C3);
const v17 = new C3("multiline", v16);
new C3(v17, C3);
const o24 = {
    "maxByteLength": 536870889,
};
const v26 = new SharedArrayBuffer(217, o24);
let v28 = new Uint8Array(v26);
function f29() {
    function f30(a31) {
        const v33 = new Set();
        function F34(a36, a37) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a36;
            } catch(e38) {
                for (let [v39,v40] of a36) {
                    class C41 {
                    }
                    const v42 = new C41();
                    const v43 = v42.g;
                    try {
                        v43.length = 1;
                    } catch(e45) {
                    }
                    try {
                        v33.values();
                    } catch(e47) {
                    }
                }
            }
            try {
                this.h = v33;
            } catch(e48) {
                Math.atan2(257, 257);
            }
            try {
                const v52 = v33[this];
                try {
                    new F34(v52, -2046072084n);
                } catch(e55) {
                }
                this.b = Set;
            } catch(e56) {
            }
        }
        const v57 = new F34(Set, Set);
        new F34(v57, F34);
        return F34;
    }
    return f30;
}
Object.defineProperty(v28, Symbol.toPrimitive, { configurable: true, get: f29 });
v28 &= v28;
