new Uint16Array(3189);
const v5 = new Int32Array(9);
const v8 = new BigInt64Array(8);
const v9 = [-1000000000.0,-807.952778757237,NaN,-Infinity,345.0206694076451,3.6943779063275533e+307,-815.4931999709503,39.85859200009327];
function f10(a11) {
    const v14 = new Set();
    v14["delete"](839612.5677247904);
    return v8;
}
v9[Symbol.toPrimitive] = f10;
[1.0,-4.0,2.220446049250313e-16];
const v21 = Symbol.toPrimitive;
v9[v21];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = a25;
    try {
        this.d = Int32Array;
    } catch(e27) {
    }
}
new F23(8, 8);
new F23(3189, 9);
new F23(8, 8);
const v31 = [1.3959007720606337e+308,0.3147829718604752,1000.0];
[Uint16Array,[v31,v5,8,[9,BigInt64Array,v31,v9],BigInt64Array]];
const v36 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
function f38(a39, a40) {
    v21 << a40;
    let {"byteOffset":v42,} = v8;
    return v42;
}
this[Symbol.toPrimitive] = f38;
v36[10000] = this - this;
