function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 16;
    } catch(e3) {
    }
    try {
        this.e = 16;
    } catch(e4) {
    }
    try {
        this.f = 16;
    } catch(e5) {
    }
}
const v6 = new F0();
new F0();
const v8 = new F0();
new Map();
/ND2/gds;
/W\1\2(a(?:\1(b\1\2))\2)\1/gvdisy;
const v13 = /a(?=b)c(xmxyz{1,32}v)*/dim;
class C14 extends Map {
    static [v6] = v6;
    #m(a16, a17, a18) {
        v8[v13] = v6;
        new F0();
        try {
        const t0 = -128n;
        t0(a17, ...-128n, a16, F0, 268435439n, -128n);
        } catch (e) {}
        return v6;
    }
    5 = v6;
    static #a = Map;
    static e = v8;
    #e = v13;
}
const v24 = new v13();
try { v24.isPrototypeOf(C14); } catch (e) {}
const v26 = new C14();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
const v29 = new v24();
v29[5] = v29;
10 & 10;
7 * 7;
Date.length = Date;
class C36 {
    static {
        for (let v38 = 0; v38 < 25; v38++) {
            function f39() {
                return this;
            }
            try { new f39(); } catch (e) {}
            const v41 = [601759695];
            const v42 = [1073741824,1073741823,1376142744,1073741825];
            function f44(a45, a46, a47, a48) {
                try { new a45(); } catch (e) {}
                a46 >>> a46;
                a47 << a47;
                a48 + a48;
                function f54() {
                    return a45;
                }
                const v55 = f39();
                const v57 = new Int8Array();
                const v60 = new Uint32Array(4);
                [v60];
                ~536870887;
                const v65 = BigUint64Array * 536870887;
                v65 - v65;
                Number.isNaN(v65 ** v65);
                function f70(a71, a72) {
                    return v55;
                }
                try { f70(v41, 7); } catch (e) {}
                f70();
                const v75 = v57.buffer;
                const v76 = v75?.__defineGetter__;
                try { new v76(f54, v75); } catch (e) {}
                Object.defineProperty(v75, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v75.slice(2147483648);
                %OptimizeFunctionOnNextCall(f54);
                let v82;
                try { v82 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
                Symbol.matchAll;
                Symbol("find");
                const v87 = new Uint8ClampedArray();
                const o88 = {
                    ...v87,
                };
                o88.e = o88;
                v82 <= a47;
                return arguments;
            }
            for (let v90 = 0; v90 < 5; v90++) {
                f44(this, v90, v90, v90);
            }
        }
    }
}
