const t0 = 622;
new t0(622);
let v4 = Uint8Array;
new v4(128);
new Uint8Array(5);
/a\b!+/vdiy;
/(a\1)/gvdimy;
/^xxx$/gvi;
new Int8Array(1487);
new Int32Array(2943);
function f29(a30, a31, a32) {
    'use strict';
    return a30;
}
new BigUint64Array(194);
/LR0/gudisy;
/(?:ab){4,7}/gvisy;
/a\Bb+/vdims;
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    function f39(a40) {
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f39 });
    let v43 = 1073741825;
    try {
        v43++;
        let v47 = -1e-15;
        Math.atan2(v47++, -175950080);
        this.b = v43;
    } catch(e50) {
    }
}
const t33 = 622;
let v51 = new t33();
let v52 = new F37();
v52.a = -10809n;
({"a":v4,"b":v52,...v51} = v52);
const o57 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
const t47 = gc(o57);
new t47();
new Uint8ClampedArray(16);
function f64() {
    new Int8Array(1073741823);
    class C68 {
        #valueOf(a70, a71, a72, a73) {
        }
    }
    const o77 = {
        valueOf(a75, a76) {
        },
    };
}
f64();
%OptimizeFunctionOnNextCall(f64);
