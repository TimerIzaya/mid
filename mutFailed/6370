class C3 {
    constructor(a5, a6) {
        let v7 = 0;
        do {
            const v8 = this.__proto__;
            super[this];
            super.e ||= v7;
            try {
                this.toString = a6;
            } catch(e10) {
            }
            v8 && v8;
            const v14 = 4 & this;
            Math.acos(this);
            v7++;
            -v14;
            v7++;
        } while (v7 < 10)
    }
}
const v21 = new C3(1.7976931348623157e+308, 1.5627828263013726);
const v22 = new C3(v21, 1.7976931348623157e+308);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = C3;
    } catch(e27) {
    }
    try {
        this.c = a25;
    } catch(e28) {
    }
    try {
        this.e = 1.7976931348623157e+308;
    } catch(e29) {
    }
}
new F23(v22, C3);
new F23("-5", 1.7976931348623157e+308);
new F23(C3, v21);
new C3(1.5627828263013726, C3);
const v39 = new Array(5);
const v42 = new Int8Array(181);
new Uint8Array(64);
new Uint8Array(0);
class C49 {
}
function f50(a51) {
    return a51;
}
class C52 extends f50 {
    static [v39];
    d;
    g;
}
const v54 = new WeakMap();
class C55 extends C49 {
    static 1 = v54;
    10000;
}
new Int8Array();
const o60 = {
    "execution": "async",
    "type": "minor",
};
gc(o60);
v54.h |= 0;
new Date();
try {
    C52.fuck(v39, -65536, v42, -65536);
} catch(e66) {
    try { C55.m(e66); } catch (e) {}
    new Uint8Array(24);
    new Uint8ClampedArray(512);
    new Int16Array(127);
}
gc();
