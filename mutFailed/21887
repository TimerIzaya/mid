function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a5;
    } catch(e7) {
    }
}
new F3(-1.4469959786864694e+308, 2.2250738585072014e-308);
const v9 = new F3(-1.4469959786864694e+308, -1000000000000.0);
new F3(-1.4469959786864694e+308, -1.4469959786864694e+308);
[6,-9007199254740991,3];
[-167737398,-884580346,1045901976,-14,12,65535,2147483649,-9007199254740990];
const v13 = [268435440,6,-2147483649,-9,-31493,-44923,-526553820];
class C14 {
    10000 = 2.2250738585072014e-308;
    static {
        [3,-16,65537,-47829,-1114368353,641594501,-1102337673,268435439,-2147483648];
        [48760,55937,16,5,129,23606,-2,397167386,15];
        [1073741825,2147483648,52328,-34908,58819,-14,1960553867,-9007199254740990,39727];
        new F3(-1000000000000.0, -1000000000000.0);
    }
    static {
        delete v13[this];
        const o25 = {
        };
        new Proxy(this, o25);
        Object.defineProperty(this, "f", { writable: true, configurable: true, enumerable: true, value: v9 });
        const o33 = {
            "maxByteLength": 2358491164,
        };
        const v35 = new ArrayBuffer(147, o33);
        new Int16Array(v35);
    }
}
new C14();
new C14();
new C14();
const v44 = new Uint8ClampedArray(303);
Object.defineProperty(v44, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
