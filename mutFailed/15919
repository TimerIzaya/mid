const v0 = [341.8021934752742];
const v1 = [0.9557856444519325,1000000.0,-6.70231343497856,1.295243328510863e+307];
const v2 = [2.220446049250313e-16,NaN,544914.7339597389,223.1130440400873,0.7390403787303734,335.7221038316113,4.0,6.922849577373305e+307];
const v5 = new BigInt64Array(9);
const v8 = new Int8Array([0.600959953156498,1.0,-Infinity]);
const t5 = 9;
t5[Symbol.toStringTag] = 9;
const v13 = new WeakMap();
const v14 = /8[\cA]v/uisy;
v14[Symbol.toPrimitive] = Symbol;
function f17(a18) {
    let v19;
    try { v19 = a18(BigInt64Array); } catch (e) {}
    function F20(a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = v5;
        } catch(e25) {
        }
        try {
            this.buffer = Symbol;
        } catch(e26) {
        }
        try {
            this.c = a24;
        } catch(e27) {
        }
    }
    const v28 = new F20(v8, v1, v1);
    new F20(v28, a18, v19);
    new F20(v28, v19, v19);
    return a18;
}
v14[Symbol.toPrimitive] = f17;
function f33(a34, a35) {
    v13.set([a35,a35,a35,a35,a35]);
    ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
}
v14[Symbol.toPrimitive] = f33;
const v44 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v44.length = v14;
} catch(e45) {
}
new Int32Array(245);
function f50() {
    let v51 = -9223372036854775808n;
    v51 %= 45725n;
    return 45725n;
}
for (let v53 = 0; v53 < 5; v53++) {
    f50();
    %OptimizeFunctionOnNextCall(f50);
}
new Uint16Array(2824);
const v58 = new Int8Array(257);
function f61(a62, a63) {
    try {
        v0.toSorted(f33);
    } catch(e65) {
    }
    return v1;
}
Float64Array.toString = f61;
new Float64Array(2570);
class C67 extends Uint16Array {
    static #o(a69, a70) {
        var h = Int8Array;
        new Uint16Array(v1, 2824, 257);
        v58[3500] = 2824;
        return this;
    }
    [Float64Array];
    static p(a73, a74) {
        v58[0] = a74;
        super[this];
        return v2;
    }
    static #h = 2824;
}
const v78 = new Float32Array(6);
v78.fill();
("vZa2U").normalize("NFKC");
new C67();
new C67();
new C67();
"boolean" == "boolean";
