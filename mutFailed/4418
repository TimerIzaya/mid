class C3 {
    static #e = "caller";
    static set e(a5) {
        try { C3.valueOf(this); } catch (e) {}
        [1.7976931348623157e+308,0.0,Infinity,2.220446049250313e-16];
        [410.0281589667484,-1.7976931348623157e+308,3.3098163226999835e+307,8.273795695667769,-2.179326905074392,-0.0];
        [1000000000.0,0.3752269698123408,-1000.0,2.0,0.602683805601051];
    }
    constructor(a11, a12, a13) {
        super();
        const o17 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o17);
    }
    static {
        for (let i22 = 0, i23 = 10;
            i22 < i23;
            (() => {
                const v27 = [601759695];
                const v28 = [1073741824,1073741823,1376142744,1073741825];
                function f30(a31, a32, a33, a34) {
                    function f35() {
                        Symbol.isConcatSpreadable;
                        new Uint8ClampedArray(798);
                        return f35;
                    }
                    class C41 {
                    }
                    try { v28["find"](..."find", a34, ...v27, ...a32, ...522675525n); } catch (e) {}
                    const o45 = {
                    };
                }
                for (let v46 = 0; v46 < 10; v46++) {
                    f30();
                }
                i22++;
                const v51 = new WeakMap();
                v51.set(Uint16Array);
                ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937).toLocaleString();
            })()) {
        }
    }
    #p(a60, a61) {
        this[4] = a60;
        this | a61;
        Math.cos(-1073741824);
        const v68 = new Uint8ClampedArray(1907);
        v68[7] = 43464885;
        v68[-1] = 10;
        ("ignoreCase").normalize();
        function f73() {
            function f74(a75, a76, a77, a78) {
                with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                    length | length;
                }
                new Int8Array();
                const v84 = new Int8Array();
                for (const v85 in v84) {
                }
                function F86(a88) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v89 = this.b;
                    try { v89(v84); } catch (e) {}
                }
                new F86();
            }
            return f73;
        }
        [-4294967295,-43095,-9007199254740991,512,21547,10];
        const v93 = [-9007199254740991,-2147483647,-55180,51472,457222613,-777466219,10];
        [-655412454,-9007199254740992,536870887,5,-65535];
        const v98 = Array(19793);
        const o101 = {
            [8.946504243780264e+307]: v98,
            get g() {
                return v98;
            },
        };
        return v93;
    }
    static h = 257;
    10 = "caller";
}
const o104 = {
};
new C3(255, 205, 255);
new C3();
new C3();
new C3();
[16,8179,-15,-1261808535];
[9007199254740992];
[22771,13,2585019,9007199254740991,21783949,-1,1073741824];
new Date();
const v120 = new Int32Array(Int32Array);
const v121 = [];
function f122(a123) {
    const o127 = {
        ...v121,
        ...v121,
        "f": a123,
        set c(a125) {
            a123[this != a125] <<= a125;
        },
    };
    return o127;
}
f122(f122);
f122();
const o130 = {
};
const v131 = o130.constructor;
Math.tan(257);
gc();
const o138 = {
};
function f139(a140, a141, a142, a143) {
    const o148 = {
        toString(a145, a146, a147) {
            a142[a141] = a140;
        },
    };
    return o148;
}
Math.atan2(-988.8649474800335, 10000);
v131.isSealed(v120);
