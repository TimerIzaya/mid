function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 1;
        this[10000] = 1;
        F0 !== this ? F0 : this;
        function f5() {
            return F0;
        }
    } catch(e6) {
    }
    try {
        this.a = 1;
    } catch(e7) {
    }
    try {
        this.d = 1;
    } catch(e8) {
    }
}
new F0();
const v10 = new F0();
const v11 = new F0();
[558920101,997938241,1874902650,-16,-11,-65535,-28428];
const v13 = [1000,1067251164,983177012,65535,268435440,4294967295,536870889,-3117,59171];
const v14 = [536870912,-256,-55386,-256];
function f15(a16) {
    BigUint64Array.bind().bind();
    return v13;
}
v14.toString = f15;
class C20 extends F0 {
    set e(a22) {
        const v28 = Reflect.construct(Int8Array, [1126838905]);
        class C29 {
            [-2] = 31876;
        }
        new C29();
        const v31 = [-20096,4294967296,-65537,-2];
        const v32 = [-1947047520];
        v31["slice"]([[v32,v32,v32,v28]]);
        try { a22(); } catch (e) {}
    }
    #a = v11;
    a;
    [F0] = v10;
    [v14];
}
new C20();
new C20();
new C20();
class C45 {
}
const v46 = Array();
const v47 = new C45();
function f48(a49, a50, a51) {
    const o59 = {
        toString(a53, a54, a55) {
            a50 < v46;
            super[v47];
            return Array;
        },
        get d() {
        },
    };
    const v60 = o59.__lookupSetter__;
    ([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
    const v64 = [-1539,1,12];
    function f65() {
        return f65;
    }
    function f66(a67, a68) {
        a67[Symbol.toPrimitive] = f66;
        const o71 = {
            [a67]: v64,
        };
        return a68;
    }
    f66(f66);
    f66(f65);
    try { new v60(a49); } catch (e) {}
    return o59;
}
%PrepareFunctionForOptimization(f48);
const v76 = f48(f48(), Array, Array);
%OptimizeFunctionOnNextCall(f48);
f48(v46, f48, v76);
