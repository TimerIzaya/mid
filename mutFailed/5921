this.write();
function f3() {
    return f3;
}
const v5 = 3n + 3n;
const v7 = new Uint8Array();
let v8;
try { v8 = v7.lastIndexOf(f3); } catch (e) {}
for (let v9 = 0; v9 < 500; v9++) {
    v9 % v9;
    const o14 = {
        ...v7,
        n(a12, a13) {
        },
    };
    try { o14.propertyIsEnumerable(v9); } catch (e) {}
}
const v17 = [-518314.93092931446,-650.5973064101349,4.0,-1.6315175563785152e+308];
function f18(a19) {
    function F21(a23) {
        if (!new.target) { throw 'must be called with new'; }
        const v24 = this.constructor;
        const v25 = ~-2017259196;
        const v26 = v25 | this;
        try { new v24(v26, F21, v25, -2017259196); } catch (e) {}
    }
    new F21(-2017259196);
}
Object.defineProperty(v17, 6, { writable: true, enumerable: true, set: f18 });
const v29 = [-2.0,0.05200317807153709,969.7257750051681,-9.284425419523274,-1000.0,-3.0,134.67165194577206,-2.676881689809064e+307];
v29.g = v5;
v29.g = -2147483648n;
v29.g = v29;
[592.4365076383726,1000000000000.0,0.5190757855488148,-0.0,1e-15,1e-15];
let v31 = Date;
function f32(a33, a34) {
    let v35;
    try { v35 = v8(3n, a33, a33, a33); } catch (e) {}
    v17[6] = 3n;
    return v35;
}
v31.valueOf = f32;
class C36 extends v31 {
}
C36.m = this;
try { C36.parse(Uint8Array); } catch (e) {}
%PrepareFunctionForOptimization(f3);
const v40 = 0 < 0;
let v42 = 6;
v42++;
new Int8Array(v42);
Int16Array.prototype = Int16Array;
const v48 = new Int16Array(257);
try { v48.some(v48); } catch (e) {}
new Int8Array(294);
try { C36["m"](Uint8Array, undefined, v31, f3); } catch (e) {}
let v56 = 1024;
const v58 = ++v31;
v58 - -536870912;
Math.min(v58);
const v61 = v56++;
v61 | v61;
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v8;
    this.f = a66;
}
const v67 = new F63(F63, F63);
const o72 = {
    toString(a70, a71) {
        return 3n;
    },
    256: v40,
    1073741825: v31,
    [undefined]: undefined,
    "maxByteLength": 294,
    __proto__: v67,
    256: F63,
};
for (const v73 in o72) {
}
