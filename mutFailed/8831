class C3 {
    [0.7767481261438025] = "symbol";
    static f = 0.7767481261438025;
    static [9007199254740992] = "symbol";
    static [0.7767481261438025] = 9007199254740992;
    1;
    EPSILON = "symbol";
    static 255 = 9007199254740992;
    static g = 0.7767481261438025;
    f;
    #h = 0.7767481261438025;
    static ["symbol"];
    #b;
    #f;
    [9007199254740992] = 0.7767481261438025;
}
C3[255];
const v5 = new C3();
new C3();
new C3(0.7767481261438025);
4294967297 | 4294967297;
Int8Array.length;
new Int8Array(1000, C3, -3);
const v18 = new Uint8Array(4);
try { v18.slice(-3, v5); } catch (e) {}
Uint32Array.prototype = Uint32Array;
Uint32Array.length = Uint32Array;
new Uint32Array(1024);
function f23() {
    return f23;
}
f23[Symbol.toPrimitive] = f23;
const v26 = [1000000.0];
v26[658291203] = v26;
v26[0] = v26;
function F28() {
    if (!new.target) { throw 'must be called with new'; }
    10 >>> 10;
    Object.defineProperty(Array, "d", { configurable: true, enumerable: true, value: Array });
    Array.d = Array;
    const v33 = Array(10);
    v33[8] = Array;
    try { v33.reverse(); } catch (e) {}
    for (const v35 of v33) {
        v26[658291203] = null;
        try { Math.sin(9007199254740992); } catch (e) {}
        Math.g = Array;
        Number.isNaN(f23--);
    }
}
F28.constructor = Symbol;
F28.arguments;
F28.caller = F28;
const v42 = new F28();
const v43 = v42?.__lookupGetter__;
try { new v43(-3); } catch (e) {}
const v45 = v42?.constructor;
try { v45.constructor(v5); } catch (e) {}
try { new v45(); } catch (e) {}
