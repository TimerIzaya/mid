const v2 = new BigUint64Array(8);
const v5 = new Uint16Array(1);
const v8 = new Float32Array(4);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a14;
    try {
        this.f = v2;
    } catch(e15) {
    }
    try {
        this.b = v2;
    } catch(e16) {
    }
}
new F9(BigUint64Array, 4, 1, 1);
const v18 = new F9(Float32Array, 1, 4, 8);
const v19 = new F9(4, 1, 8, 4);
function f20(a21, a22, a23) {
    const o28 = {
        6: v19,
        get e() {
            return a22;
        },
        "h": 4,
        "a": 8,
        "g": v8,
        [v8]: 1,
        __proto__: v2,
        "e": a23,
        "b": F9,
        "c": Uint16Array,
    };
    return o28;
}
f20(v19, 1, 1);
const v31 = f20(v19, 4, f20(v19, 8, v8));
class C33 {
}
const v34 = new C33();
function f35(a36) {
    try { v18.valueOf(); } catch (e) {}
    let v38;
    try { v38 = v5.keys(); } catch (e) {}
    return v38;
}
v34[Symbol.toPrimitive] = f35;
function f41() {
    return -1.4618325192014402e+308;
}
v34.toString = f41;
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = a47.valueOf(a48, this, a47, this, a45);
    function f50(a51, a52) {
        try {
            v31.fuck(4, a52);
        } catch(e54) {
        }
        return f35;
    }
    v49[Symbol.toPrimitive] = f50;
    v49.__lookupSetter__(v49);
}
new F43("m", C33, v34);
