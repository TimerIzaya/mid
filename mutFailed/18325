const v0 = [-37739,1073741824,127,268435440,-51117,50482976,-65537,-1];
const v1 = [-64926,536870888,16,268435456,-193533709,64010,-7,8,-4294967297];
const v2 = [536870888,3,-2488];
const v3 = [v1,v2,v1];
v3[2];
const v5 = [v2,v0,v2];
const v6 = [v2,v2,v2,v3];
class C7 {
    #f = v3;
    static get e() {
        [-1670285153];
        [2147483648,6,-256];
        [-2147483647,268435456,-2147483647,1073741823,256,9007199254740991,1024,39850];
        return v3;
    }
    [v5];
    static {
        const v13 = this !== this;
        v13 || v13;
        if (v13) {
            super.b;
            try {
                v5.#f = v0;
            } catch(e16) {
            }
        } else {
            this[v5];
        }
    }
}
const v18 = new C7();
const v19 = v18?.constructor;
try { new v19(); } catch (e) {}
const v21 = v18?.constructor;
try { new v21(); } catch (e) {}
let v23;
try { v23 = new v21(); } catch (e) {}
const v24 = v23?.constructor;
try { new v24(); } catch (e) {}
const v26 = new C7();
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
const v29 = v26?.__defineGetter__;
v29.length;
try { new v29(v0, v6); } catch (e) {}
const v32 = new C7();
const v33 = v32?.constructor;
v33.length = v33;
try { new v33(); } catch (e) {}
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.__defineGetter__;
    try { new v40(v21, F35); } catch (e) {}
    const v42 = a39?.constructor;
    try { new v42(); } catch (e) {}
    try {
        this.e = a38;
    } catch(e44) {
    }
}
F35.caller = F35;
F35.caller = F35;
const v45 = new F35(v3, v5, v26);
v45.length = v45;
try { v45.propertyIsEnumerable(v2); } catch (e) {}
const v47 = new F35(v6, v0, v5);
const v48 = v47?.constructor;
let v49;
try { v49 = new v48(v45, v3, v3); } catch (e) {}
v49.d = v49;
new F35(v6, v5, v0);
function f51() {
    return v32;
}
1000 % 1000;
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e58) {
    }
}
function f59(a60, a61) {
    function f63(a64) {
        return a60 ^ a61;
    }
    this.onmessage = f63;
}
const o68 = {
    "type": "function",
};
const v69 = o68?.__defineSetter__;
try { new v69(v6, v18); } catch (e) {}
const v71 = new d8(f59, o68);
try { v71.terminate(); } catch (e) {}
2147483649 % 2147483649;
new BigInt64Array(2147483649);
