const v2 = new Int8Array(255);
const v3 = v2[8];
try {
    v2.valueOf = v3;
} catch(e4) {
}
let v5 = 2185;
new Float32Array(v5);
%VerifyType(BigUint64Array);
const o10 = {
};
const v12 = new Proxy(v2, o10);
const v13 = new BigUint64Array(1);
const v15 = 0.5023490306346093 * 0.5023490306346093;
794.7524916956656 - 794.7524916956656;
let v19 = -8;
const v20 = v19--;
const v22 = v13.__proto__;
try { v22(); } catch (e) {}
v5 ||= v5;
new BigUint64Array(-2, v20, v5);
v12 * 255;
-2 * -2;
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 794.7524916956656;
    } catch(e33) {
    }
}
new F28(0.5023490306346093, -1.0, -1.0);
new F28(v20, 0.5023490306346093, v15);
new F28(v19, 0.5023490306346093, -1.0);
0.3031821725579029 < 0.3031821725579029;
const v44 = [256,54026];
-2 | -2;
!-2;
let v49 = Math.hypot(v44);
v49++;
