const v1 = new Set();
function f2(a3) {
    const o12 = {
        o(a5) {
            const o6 = {
            };
            const v8 = new Proxy(v1, o6);
            return v8;
        },
        "b": a3,
        set a(a10) {
            a3?.a;
        },
        "h": v1,
        "e": v1,
        "POSITIVE_INFINITY": Set,
    };
    return o12;
}
const v13 = f2(v1);
f2(f2(Set));
let v16 = 1968;
new BigInt64Array(v16);
new Uint8Array(3464, f2, v13);
new Uint8Array(245);
/[8a(?=bbb|bb)c]/gums;
const v26 = /a[a]/vdsy;
const v27 = /M/gus;
class C31 {
    #h = 1e-15;
    static get e() {
        function f33() {
            return 1e-15;
        }
        return this;
    }
    static [v27];
    set f(a35) {
        const v36 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        for (let v37 = 0; v37 < 5; v37++) {
            function F38() {
                if (!new.target) { throw 'must be called with new'; }
                const v41 = -(-7);
                v41 ** v41;
            }
            function F43(a45, a46) {
                if (!new.target) { throw 'must be called with new'; }
                const v47 = this.constructor;
                try { new v47(v47, F38, F43, this, v47); } catch (e) {}
                new F38();
            }
            v36 | v37;
        }
        this != a35;
    }
    static #p(a53, a54) {
        v16 = a54;
        a54 instanceof a54;
        try {
            super.toISOString(a53);
        } catch(e57) {
        }
        return a53;
    }
    #g = 3.7122420217608383;
    static 65536;
}
new C31();
new C31(BigInt64Array, v1);
new C31();
new Set();
for (let v63 = 0; v63 < 50; v63++) {
    Array(36862);
}
Int16Array(C31);
const t74 = Array(9);
t74.length = 3;
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f82() {
    let v84 = 1000000000000.0;
    const v85 = v84--;
    +v85;
    class C90 {
        constructor(a92) {
            const v94 = new Float32Array();
            try { v94.entries(); } catch (e) {}
            const v96 = new Uint16Array(12, -4294967296, v85);
            new Float32Array(v96, -4294967296, 268435439, v84, v96);
        }
    }
    try { new C90(12); } catch (e) {}
    const v99 = new C90(257828.6336153492);
    const v100 = new C90();
    const v101 = new C90(-4294967296);
    const v102 = [v101,C90];
    const v103 = [257828.6336153492,v101,v99,v101,v102];
    const v104 = [v101];
    class C105 extends C90 {
        [v99];
    }
    const v106 = new C105();
    const v107 = v104.constructor;
    try { v107.isArray(v104); } catch (e) {}
    class C109 extends v107 {
    }
    C109.a = C109;
    const v110 = new C109();
    const v111 = v110?.constructor;
    try { new v111(C90, v103); } catch (e) {}
    Object.defineProperty(v110, 65537, { value: v100 });
    try { v106.m(v102); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f82);
f82(v26);
%OptimizeFunctionOnNextCall(f82);
f82();
