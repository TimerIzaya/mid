class C3 {
    static g;
    static set d(a5) {
        -12855 * this;
        "-59076" / this;
        const v11 = C3.sin(-12855);
        try { ("-59076").charCodeAt(v11); } catch (e) {}
        try {
            ("boolean").trimRight();
        } catch(e17) {
        }
    }
    static #h;
    201 = "stack";
    static #f = "stack";
    #e = "-59076";
}
const v18 = new C3();
v18[201] = v18;
const v19 = new C3();
v19[201] = v19;
v19[201] = v19;
const v20 = new C3();
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor("stack", v18, "-59076"); } catch (e) {}
    const v27 = this?.constructor;
    v27.prototype = v27;
    let v28;
    try { v28 = new v27(v19, "-59076", "stack"); } catch (e) {}
    v28[201] = v28;
    a23[2] = a23;
    a24.e = a24;
    try {
        this.e = this;
    } catch(e29) {
    }
    try {
        this.f = a25;
    } catch(e30) {
    }
}
try { new F21("stack", "stack", v20); } catch (e) {}
const v32 = F21?.constructor;
try { new v32("boolean"); } catch (e) {}
try { new v32(C3); } catch (e) {}
const v35 = new F21("stack", F21, "-59076");
v35.e = v35;
const v36 = new F21(v19, v20, v18);
const v37 = v36?.constructor;
v37.prototype = v37;
try { new v37(C3, "boolean", "stack"); } catch (e) {}
const v39 = new F21("boolean", v35, v20);
v39 - -12252;
let {"a":v43,"e":v44,} = v39;
const v45 = v39.f;
v45[201] = v45;
C3 = v18;
try {
    v35.e = v32;
} catch(e46) {
}
-12252 - -12252;
const v50 = 536870912n << 536870912n;
const v51 = delete v35[v35];
v51 && v51;
try {
    ("-59076").padStart(3);
} catch(e55) {
}
-v50;
class C57 {
    static #a;
}
C57.prototype;
