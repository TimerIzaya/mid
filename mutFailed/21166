const v0 = [465378.3778452447,-1.6542408878477697e+308,1000000000000.0,Infinity,-369827.0187708979,0.40166152632541385];
[-2.220446049250313e-16,-1.0,-17.26265643389695,0.26021400800887406,1e-15,743.9831696395072];
[-2.2250738585072014e-308,-292557.7139756632,NaN,-1.067175097553955e+308,291.36435297826506,1000.0,438001.4790721899,0.39394650564391154,-975.8071601605122];
const v4 = Set.name;
new Set();
"undefined" == "undefined";
let v13 = ("XS6Pm")?.slice;
try { new v13(-1000.0, -1000.0); } catch (e) {}
const v17 = new BigUint64Array(5);
const v20 = new Uint32Array(3);
Uint16Array.prototype = Uint16Array;
const v23 = new Uint16Array(2);
const o24 = {
};
new Proxy("undefined", o24);
v20 >= v4;
try { v23.entries(); } catch (e) {}
let v29 = "resolve";
try { v29.endsWith(v0); } catch (e) {}
let v33 = 10n;
v33 ^ v33;
class C35 {
    static m(a37) {
        ({"a":v29,"h":v33,} = this);
    }
}
try { new C35(); } catch (e) {}
const v40 = /(?<a>.)\k<a>?/vdimsy;
let v41;
try { v41 = v40(); } catch (e) {}
const v42 = ["setUint16"];
v42["undefined"];
v13 -= Uint32Array;
const v46 = Symbol.iterator;
const o55 = {
    [v46]() {
        let v48 = 10;
        const o54 = {
            next() {
                v48--;
                const v52 = v48 == 0;
                const o53 = {
                    "done": v52,
                    "value": v48,
                };
                return o53;
            },
        };
        return o54;
    },
};
try { BigInt64Array.from(v0); } catch (e) {}
const v57 = new BigInt64Array();
function f59() {
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v62 = 1000000000000.0;
    const v63 = v62--;
    12 << 12;
    let v66 = 257828.6336153492;
    const v68 = -v42;
    const v69 = v68 && v42;
    -v69;
    const v72 = Array();
    v72.e = v72;
    const v73 = v29 + 12;
    const v76 = new Int32Array(9);
    v76.reverse()[3];
    for (let v79 = 0; v79 < 5; v79++) {
        function f80() {
            try { eval(v73); } catch (e) {}
            eval();
            return Array;
        }
        const v84 = f80?.bind;
        try { new v84(9); } catch (e) {}
        const v86 = f80();
        try { new v86(v41); } catch (e) {}
        %OptimizeFunctionOnNextCall(f80);
    }
    let v90 = -268435456;
    v90--;
    const o105 = {
        "e": -4294967295,
        ..."Vre",
        valueOf(a93, a94) {
            return Int32Array;
        },
        valueOf(a96, a97) {
            return a97;
        },
        "call": f59,
        "g": v68,
        "type": "setUint16",
        ..."Vre",
        n(a99, a100) {
            return v68;
        },
        ...v69,
        "type": "-1",
        set g(a102) {
        },
        "maxByteLength": -3,
        m(a104) {
            return v33;
        },
        "c": v72,
        5: -4294967295,
        6: v90,
    };
    let v106 = v66--;
    v106--;
    class C109 {
        static #m(a111) {
        }
        constructor(a113) {
            const v114 = this?.constructor;
            try { new v114(v17); } catch (e) {}
            new Uint16Array(12, -4294967296, v63);
        }
    }
    try { C109(); } catch (e) {}
    try { C109(); } catch (e) {}
    const v120 = Symbol.iterator;
    Math[v120] = v120;
    try { v57.reduce(v41); } catch (e) {}
    const v122 = new C109();
    const v123 = new C109();
    let v124;
    try { v124 = v123.propertyIsEnumerable(v68); } catch (e) {}
    v124 && v124;
    const v126 = new C109();
    const v127 = [];
    const v128 = [v126];
    v128.g = v128;
    v128[0];
    class C130 extends C109 {
        [v122];
        #n(a132, a133, a134, a135) {
        }
    }
    try { C130.bind("Vre"); } catch (e) {}
    -3 < -3;
    const v139 = new WeakSet();
    try { v139.has(v29); } catch (e) {}
    function f141(a142) {
        try { new a142(); } catch (e) {}
        const o144 = {
            "g": v139,
        };
        return o144;
    }
    function f145() {
        const o146 = {
        };
        o146.h = o146;
        return o146;
    }
    try { f145(); } catch (e) {}
    const v148 = f145();
    const v149 = v148?.__lookupGetter__;
    try { new v149(v148); } catch (e) {}
    const v151 = f145();
    for (let v152 = 0; v152 < 25; v152++) {
        v152 & v152;
        const v154 = [601759695];
        const v155 = [1073741824,1073741823,1376142744,1073741825];
        function f156(a157, a158, a159, a160) {
            const v161 = a157?.propertyIsEnumerable;
            try { new v161(v128); } catch (e) {}
            a158.h = a158;
            const v163 = a158.e;
            try { v163(a160, v163, v152, f145); } catch (e) {}
            a157[4] = a157;
            a158[4] = a158;
            try { v155["find"](..."find", a160, ...v154, ...v155); } catch (e) {}
            return v154;
        }
        f156.caller = f156;
        for (let v167 = 0; v167 < 5; v167++) {
            f156(v148, v151);
        }
    }
    f141(WeakSet);
    const v170 = new C130();
    const v171 = v128.constructor;
    v171.prototype;
    ~Array;
    function F174() {
        if (!new.target) { throw 'must be called with new'; }
    }
    eval();
    v171();
    class C179 extends v171 {
    }
    const v180 = new C179();
    const v181 = v180?.map;
    try { new v181(f145); } catch (e) {}
    v180.constructor.bind(v66);
    Object.defineProperty(v180, 65537, { value: v123 });
    try { v170.m(v127); } catch (e) {}
    return v41;
}
%PrepareFunctionForOptimization(f59);
f59();
%OptimizeFunctionOnNextCall(f59);
f59();
