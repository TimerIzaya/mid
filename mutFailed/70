new Uint8ClampedArray(256);
const t1 = 256;
new t1(24);
const v8 = Uint8Array?.constructor;
try { new v8(Uint8ClampedArray); } catch (e) {}
const v10 = new Uint8Array(4);
-9223372036854775807n | -9223372036854775807n;
-v10;
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.propertyIsEnumerable;
    try { new v21(-30326n); } catch (e) {}
    this.a = this;
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e25) {
    }
}
const t19 = 4;
const v26 = new t19();
const v27 = new v26();
v27.length;
new F19();
62324 & 62324;
4294967295 * 4294967295;
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try { new a38(); } catch (e) {}
    a39.f = a39;
    try {
        this.b = a38;
    } catch(e41) {
    }
}
new F35(4294967295, F19, v26);
new F35(62324, F35, v27);
Symbol.toPrimitive;
const o47 = {
    [v26]() {
    },
};
