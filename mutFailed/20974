const v6 = true !== (true || true);
const v8 = [-1339924311];
const v9 = Reflect.construct(v6, v8, true);
try { v9.o(Reflect, 4096, v8, 4096, v6); } catch (e) {}
const v12 = new Uint16Array(4096);
const v13 = v12[3859];
v13 / v13;
const v17 = new Int8Array(512);
v17[177] = v17;
const v19 = 1281 >> 1281;
function f20(a21, a22, a23) {
    function f25(a26) {
        for (let v27 = 0; v27 < 32; v27++) {
            a26["p" + v27] = v27;
        }
    }
    this.onmessage = f25;
    Object.defineProperty(Reflect, "f", { configurable: true, enumerable: true, get: f25 });
}
const v32 = ["function",v12,"function"];
const o33 = {
    "arguments": v32,
    "type": "function",
};
const v34 = new Worker(f20, o33);
const v36 = Uint32Array?.constructor;
try { new v36(Uint32Array); } catch (e) {}
const v38 = new Uint32Array(1281);
let v39;
try { v39 = v38.slice(true, v38); } catch (e) {}
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.constructor;
    try { new v45(v19, a44, this); } catch (e) {}
    a43++;
    a44 - a44;
    a43 % a43;
    v34[-22030521] = -1546089038;
    try { v36["o"](a44, true, -1339924311, "o", Worker); } catch (e) {}
    a42[Symbol.toStringTag];
    a44 * a44;
    try {
        this.f = a44;
    } catch(e56) {
    }
}
new F40(-1546089038, -1339924311, 512);
const v58 = new F40(512, 4096, 1281);
v58.b = v58;
const v59 = new F40(-1339924311, 512, -1546089038);
v59.f = v59;
const v61 = new BigUint64Array();
try { v61.some(v39); } catch (e) {}
let v63;
try { v63 = v61.lastIndexOf(Uint16Array); } catch (e) {}
v63++;
const v65 = /o(\xed\xb0\x80)\x01/gudims;
const v66 = /XR+/dis;
v66.dotAll = v66;
try { v66.compile(v61, v65); } catch (e) {}
