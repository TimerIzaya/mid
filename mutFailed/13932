const v3 = [10000n];
const v4 = [v3,6n,15n,v3,v3];
function F5() {
    if (!new.target) { throw 'must be called with new'; }
    const v10 = Array(19793);
    for (const v11 of v10) {
    }
    [[v10,v10,v10,v10]];
    ("function").normalize();
    const v17 = new Set();
    v17.values();
    [] >= Uint16Array;
}
[v4];
const v25 = new Uint8ClampedArray(64);
let v26 = 1000;
v26 = 64;
const v28 = delete Uint8ClampedArray[-2];
const o29 = {
};
try {
    o29.f = v28;
} catch(e30) {
}
try {
    const o31 = {
    };
    o31.f = v28;
    o31.b = v26;
} catch(e32) {
}
new Int32Array();
class C35 {
}
new v25(C35, v25, C35);
try {
    const o37 = {
    };
    o37.f = v28;
    function f38() {
        return f38;
    }
    const v39 = /[^7Y[a-zA-Z0-9]?]/vdmy;
    function f40() {
        const v42 = isFinite(v3);
        try { v42.reduceRight(v39); } catch (e) {}
        return v3;
    }
    f40();
    o37.b = v26;
    o37.h = v4;
} catch(e45) {
}
try {
    const o46 = {
    };
    o46.f = v28;
    o46.b = v26;
    o46.h = 10000n;
} catch(e47) {
}
new BigInt64Array(64);
const v51 = new Float32Array(3425);
function f52(a53, a54, a55) {
    const v58 = new Int8Array(a55, a53, a55);
    try { Int16Array.apply(128, v58); } catch (e) {}
    return f52;
}
%PrepareFunctionForOptimization(Uint8ClampedArray);
const v61 = f52(f52, f52, f52);
%OptimizeFunctionOnNextCall(f52);
f52(f52, v61, v61);
("D")[0].substring().charCodeAt();
const v68 = /(?=.)ha\nb\bc/gum;
try { v51.m(v51, v26, Map, v68); } catch (e) {}
