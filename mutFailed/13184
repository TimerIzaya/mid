function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1;
    } catch(e3) {
    }
    3409 - 3409;
    ("buffer")["search"](..."buffer", ..."search", ..."search", this, ..."search", 52021);
    try {
        this.h = 1;
    } catch(e10) {
    }
}
const o16 = {
    __proto__: F0,
    p(a12, a13) {
        48752008 ^ this;
        return this;
    },
};
const v17 = new F0();
new F0();
const v19 = new F0();
const v20 = [F0,v19];
const v21 = [v19,v17];
const v23 = [v21,v19,v21[1],v20];
let v24 = Int16Array;
v24.name;
function f26(a27) {
    return a27;
}
const v28 = [f26];
let v29 = "string";
for (let i32 = 0, i33 = 10;
    i32 < i33;
    (() => {
        const v37 = i32++;
        v37 >> v37;
    })()) {
    for (const v41 in v28) {
        v29 *= v29;
        class C42 {
        }
        ([NaN,52.65298068517177,-4.0])["includes"](-6, -9223372036854775807);
    }
}
const v48 = [v23,F0];
const v49 = [v20,v23,v48];
const v50 = [v49,v49];
let v51;
try { v51 = v50.values(); } catch (e) {}
function F52(a54, a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    a54.b;
    try { a56.toReversed(); } catch (e) {}
    try { a57.every(v19); } catch (e) {}
    try {
        this.g = a57;
    } catch(e61) {
    }
    try {
        v29.f = a57;
    } catch(e62) {
    }
    Math.tan(-532550611);
    for (let v66 = 0; v66 < 5; v66++) {
        function f67() {
            [Math.atanh(v66)];
            return Math;
        }
        f67();
        %OptimizeFunctionOnNextCall(f67);
    }
}
const v72 = new v51(v17, v20, v23, v48);
const v73 = new F52(v17, v21, v50, v23);
v73.c = v73;
new F52(v19, v20, v20, v72);
class C75 extends F0 {
    static get h() {
        function f77() {
            class C78 {
                constructor(a80, a81, a82) {
                    for (let v83 = 0; v83 < 5; v83++) {
                        function f85() {
                            const o93 = {
                                [-4294967297n](a87, a88, a89, a90) {
                                    eval(C78);
                                },
                            };
                            return f85;
                        }
                        f77();
                        %OptimizeFunctionOnNextCall(f85);
                    }
                }
            }
            return this;
        }
        return v49;
    }
    #toString(a96, a97, a98) {
        v24 = v72;
        try { v19.valueOf(a97, a96, a98); } catch (e) {}
        let v102 = 15800 & v49;
        new Float32Array([798019179,-9007199254740992,-8195,-4294967297,1420574578,9007199254740991,-1493424054,-2147483649,8,47842]);
        const o106 = {
        };
        o106.propertyIsEnumerable;
        v102 % 15800;
        ++v102;
        return v23;
    }
}
C75.e = C75;
const v110 = new C75();
new BigInt64Array(2147483649);
const v117 = new Int8Array(1392);
v117.lastIndexOf(16);
v110.h = v110;
const v119 = new C75();
v119.b;
new C75();
function f123() {
}
const v127 = f123();
f123();
const v129 = f123();
function f130(a131, a132, a133) {
}
f130(v129, v129, v127);
const v136 = new BigInt64Array(128);
Object.defineProperty(v136, 8, { writable: true, configurable: true, value: Float32Array <= 128 });
