const v1 = new Set();
class C2 {
    #m(a4, a5) {
        a5[a5] = a4;
        super[Set] = a5;
        new Int16Array(386);
        const v11 = new Uint8Array(3521);
        v11["lastIndexOf"](0);
        return v1;
    }
    constructor(a16) {
        this[1762774961] = this;
        a16 % a16;
        function f18() {
            return a16;
        }
        try { f18.bind(this); } catch (e) {}
    }
    h = v1;
    static #n(a21, a22) {
        const v25 = Date.toString(Date, Date, Date, Date);
        async function* f26(a27, a28) {
            return Date;
        }
        const v29 = f26(v25, Date);
        function f30(a31, a32) {
            const o33 = {
                [v25]: v29,
            };
            return f26;
        }
        f30(f26, Date);
        try {
            a22.length = 2;
        } catch(e35) {
        }
        this[Set] = a21;
        class C36 {
            #p(a38, a39, a40, a41) {
            }
        }
        const o43 = {
            "maxByteLength": 1814769353,
        };
        return Set;
    }
}
new C2();
new C2();
new C2();
let v47 = -141472847;
v47--;
-1615959423 % -1615959423;
new WeakMap();
[1000.0,NaN,137.7115222382622,-1000000000.0,-8.074718279536873e+307,-3.0,2.220446049250313e-16,-372.1166525529642];
const v55 = /\p{Script=Greek}(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/guy;
for (let v58 = 0; v58 < 25; v58++) {
    ("b")[164];
    const t57 = "65537";
    t57.__proto__ = v55;
}
[-4.2104783286241565,-939129.928670659,1.0];
const v61 = [9.904141177520284e+307,-2.220446049250313e-16,-4.0,-2.0,1.3159462676138283,2.2250738585072014e-308,-1.7976931348623157e+308,-0.028714398568915556,-2.0];
try { v61.reduce(v1); } catch (e) {}
const v64 = [-8n];
let v65;
try { v65 = v64.fill(Set); } catch (e) {}
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    const v70 = this.constructor;
    function f71() {
        const o75 = {
            toString(a73) {
                return [-2.0,-1000000.0,-Infinity,0.03714003700223023,-1.0];
            },
        };
        return o75;
    }
    let v76;
    try { v76 = new v70(F66, v70, F66, F66); } catch (e) {}
    const v78 = v76 >>> 38445;
    38445 >> v76;
    let v80 = v78 * v78;
    v80--;
}
class C83 extends Int32Array {
}
v65();
class C86 extends Uint16Array {
}
new F66(F66, F66);
v64.toLocaleString();
