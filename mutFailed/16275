const v2 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v3 = [601759695];
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    function f12() {
        const o19 = {
            "e": -4294967295,
            ...v2,
            ..."Vre",
            "c": a10,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a17, a18) {
                return a18;
            },
            ..."Vre",
            4: "Vre",
            5: -4294967295,
            6: -268435456,
        };
        return v3;
    }
    f12();
    %OptimizeFunctionOnNextCall(f12);
    let v22;
    try { v22 = v4[a9](..."find", a10, ...v3, ...v4, ...522675525n); } catch (e) {}
    v22 <= a9;
    return arguments;
}
f6();
const v25 = /(?:a*)+q(?<a>.)/guds;
function f26(a27) {
    const o31 = {
        set b(a29) {
        },
        get d() {
            return a27;
        },
        __proto__: v25,
    };
    return o31;
}
for (let i34 = 0, i35 = 10; i34 < i35; i35--) {
    for (let v42 = 0; v42 < 50; v42++) {
        f26(v25);
    }
}
const v47 = new WeakMap();
class C48 {
    static h = 8;
    static [1469638456] = 1469638456;
    static get b() {
        [1073741825];
        [-2,-3,-65536,8,3,0,-69037407,-1,-9007199254740991,-128];
        [47997291,-4294967295,-577167878,-2147483649,16478,4,22264,65537,14];
        return 8;
    }
    static 10000 = v47;
    [WeakMap];
    #g = 1469638456;
    [v47];
}
new C48();
const v54 = new C48();
const v55 = v54?.__defineGetter__;
try { new v55(15, 15); } catch (e) {}
const v57 = [-1.7976931348623157e+308,1.567547754457685];
class C60 {
    [C60] = 10000;
}
("1866165091").normalize();
new Uint32Array(v57, v57, Uint32Array);
class C64 {
}
const v65 = new C48();
try { v65.toString(); } catch (e) {}
-4096;
const v70 = new Uint8ClampedArray(4096);
v70[2388] = v70;
2889 % 2889;
new Int8Array(2889);
new BigUint64Array(47);
function f79(a80, a81) {
    Math.log10(-9007199254740992);
    for (let v86 = 0; v86 < 5; v86++) {
        v86 % v86;
    }
    -588750793 - -588750793;
    return -588750793;
}
Float32Array.toString = f79;
function f89(a90, a91, a92) {
    return f89;
}
const v93 = f89?.constructor;
try { new v93(f79); } catch (e) {}
class C95 extends f89 {
}
C95.e = C95;
Object.defineProperty(C95, Float32Array, { enumerable: true, get: f89 });
