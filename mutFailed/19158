const v2 = new Uint8ClampedArray(8);
new Int16Array(3);
let v6 = 3;
const v8 = new Int32Array(v6);
class C9 extends Int32Array {
    constructor(a11, a12, a13, a14) {
        super(a11, a11, a12);
        function f15() {
            return a12;
        }
        const o19 = {
            "execution": "async",
            "type": "major",
        };
        gc(o19);
    }
}
const v21 = new C9(3, v6, 3, 8);
new C9(3, v6, v6, v21);
new C9(8, 3, 8, Int32Array);
function f25(a26, a27, a28, a29) {
    const v30 = a27 >>> a27;
    const v31 = v30 >>> v30;
    v31 != v31;
    for (let v33 = 0; v33 < 5; v33++) {
    }
    const o34 = {
    };
    Object.defineProperty(o34, "b", { configurable: true, enumerable: true, value: a29 });
    o34.b = v30;
    -2053573105 || -2053573105;
    [[1.0,-6.818981069405753e+307]];
    Uint8ClampedArray();
    o34.b = 5n;
    o34.b = a29;
    return v8;
}
for (let v40 = 0; v40 < 5; v40++) {
    f25();
}
%OptimizeFunctionOnNextCall(f25);
let v42 = 0;
const v43 = v42++;
v43 + v43;
function f45() {
    const v46 = [];
    try {
        v46.some();
    } catch(e48) {
        function F50(a52, a53) {
            if (!new.target) { throw 'must be called with new'; }
        }
        function f55(a56, a57, a58, a59) {
            Uint8Array / a56;
            a57 < F50;
            const o65 = {
                n(a63, a64) {
                    return 8;
                },
            };
            return 8;
        }
        for (let v66 = 0; v66 < 500; v66++) {
            f55();
        }
        eval(e48);
    }
    return f45;
}
f45();
f25();
v6--;
Symbol.isConcatSpreadable;
try {
    class C75 extends [v2,v2,v2,v2,v2] {
    }
} catch(e76) {
}
