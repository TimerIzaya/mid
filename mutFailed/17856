const v0 = /^a\s/udis;
const v1 = /[a-zA-Z0-9]/ms;
const v2 = /a\fb\nc\rd\te\vf/gdim;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const o6 = {
    };
    try {
        o6.h = F3;
    } catch(e7) {
    }
    try {
        const o8 = {
        };
        o8.h = F3;
        o8.a = this;
    } catch(e9) {
    }
    try {
        const o10 = {
        };
        o10.h = F3;
        o10.a = this;
        o10.e = v0;
    } catch(e11) {
    }
    try {
        const o12 = {
        };
        o12.h = F3;
        a5.a = this;
        o12.e = v1;
    } catch(e13) {
    }
    try {
        this.b = a5;
    } catch(e14) {
    }
}
new F3(v2);
const v16 = new F3(v2);
new F3(v16);
new WeakSet();
let v23 = Set;
new v23();
const v28 = [4.4580506370311035,0.0];
[-4.0,0.4890458233502635,-2.220446049250313e-16,-1000000000000.0,1000000.0];
const v30 = [-1.2915478122457253e+307,0.275030405671152,-2.4867121049060525e+307,-913060.7357060094,-0.7618465992404033,-1.0,-1.7976931348623157e+308,1.0];
new Uint8ClampedArray(2742);
const v36 = new WeakMap(4);
new Uint8Array(19, v16);
[2,9223372036854775807,-18819,-4294967296,-4294967297,-975440104,1670425848,-128,-9007199254740992];
[4294967297,1073741824,10,536870912,918866678,4096,536870912,-13];
[-1871441266];
const v45 = new Uint8ClampedArray(v28, -104, 2742);
v45.byteOffset -= 2742;
const v47 = new URIError();
v47[3] = v47;
class C48 {
    constructor(a50, a51, a52, a53) {
        const v54 = this.constructor;
        try { new v30(v47, v54, a53); } catch (e) {}
        for (let v56 = 0; v56 < 5; v56++) {
            ~v56;
            v47[v56] = a53;
        }
    }
}
new C48(v47, C48, C48, URIError);
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    eval();
    function F67(a69) {
        if (!new.target) { throw 'must be called with new'; }
    }
    v23 = a64;
    this[-1] = eval;
    a63[128] = this;
    a61 &&= v36;
    new Int32Array(9);
    new Function(12);
    new BigUint64Array(2331);
}
const o80 = {
};
