const v6 = [5,255,-65537,41516,56928,1073741825];
function f7(a8, a9) {
    for (let i12 = 0, i13 = 10; i12 < i13; i13--) {
    }
    return a8;
}
Object.defineProperty(v6, "valueOf", { value: f7 });
try {
    v6.f = v6;
} catch(e20) {
}
try { ("undefined").trimLeft(); } catch (e) {}
const v22 = [16,26382,-47652,-2,7,-63956,13,-2147483647,-15536];
v22.toString = f7;
[-2,2005378527,7];
class C24 {
    static 2;
    o(a26, a27, a28) {
        a27.__proto__;
        a28 >>>= a28;
        return 7;
    }
    [7];
    ["-133609115"];
    [v22] = "undefined";
    static a;
}
const v30 = new C24();
const v31 = new C24();
function f32(a33, a34) {
    class C36 extends ("undefined").constructor {
    }
    return C36;
}
v31.toString = f32;
let v40 = v6 * v31;
const v41 = ++v40;
Math.random();
4294967297 % v31;
+v41;
v31 && 4294967297;
new C24();
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F47);
    const v52 = this.constructor;
    try { new v52(); } catch (e) {}
}
F47[Symbol.toPrimitive] = f32;
function f56() {
    new Uint8Array([749138.7740098275,-413.55890355139604,-2.0,5.0,4.0,1.7976931348623157e+308,1.0,5.956393081352694]);
    return "buffer";
}
F47.toString = f56;
const v60 = new F47();
v60.constructor = f7;
const v61 = v60.constructor;
function f62(a63, a64) {
    for (let v65 = 0; v65 < 32; v65++) {
        for (let v67 = 0; v67 < 5; v67++) {
        }
    }
    return a63;
}
Object.defineProperty(v61, Symbol.toPrimitive, { configurable: true, value: f62 });
new v61();
try {
    f56();
} catch(e72) {
}
try {
    new F47("buffer", v30);
} catch(e74) {
}
