function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -430903656;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function f7(a8, a9) {
    const o23 = {
        10000: v5,
        "a": a9,
        8: a8,
        "g": a9,
        "e": v5,
        toString(a11, a12, a13) {
            try {
                new F0();
                try {
                    f7(/I+/udmsy, /(a{12,3b+)/gdimsy);
                } catch(e18) {
                }
            } catch(e19) {
                try {
                    v6.d = e19;
                } catch(e20) {
                }
                delete this[e19];
            }
            const v22 = a13;
            return v5;
        },
        "a": a8,
        ...v4,
        __proto__: v5,
        ...v6,
        [v5]: f7,
        "h": v5,
    };
    return o23;
}
const v24 = f7(f7, v4);
const v25 = f7(F0, v24);
f7(v25, v24);
class C27 extends f7 {
    #p(a29, a30, a31) {
        super.toString();
        Object.defineProperty(this, a31, { get: f7 });
        try {
            a31.valueOf = f7;
        } catch(e33) {
        }
        return this;
    }
    static #a = f7;
    h = v6;
    d = v25;
    static #e;
    static #h = v24;
}
new C27();
new C27();
new C27();
new Uint32Array(14);
new Float32Array(-316906999);
new Int32Array(129);
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    function f48(a49) {
        new F46();
    }
    Object.defineProperty(this, "e", { set: f48 });
    1191742690 > 1191742690;
    try {
        this.a = 1191742690;
    } catch(e53) {
    }
}
new F46();
