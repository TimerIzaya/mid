class C3 {
    static 13 = -6;
    3875862658 = "string";
    constructor(a5, a6) {
        const t4 = "string";
        t4.length >>= -6;
        this - a6;
    }
    a;
    static #b = -6;
    g = "string";
    [-6];
    static ["string"];
    #f;
}
const v8 = new C3("string", "string");
const v9 = new C3(-6, v8);
const v10 = new C3(v9, v9);
class C11 {
    constructor(a13, a14, a15, a16) {
        %VerifyType(a13);
        a14[0] = v10;
        v9[512];
    }
    [-6];
    static #f;
    c = v8;
    static d = "string";
}
const v21 = new C11(v9, v10, v8, C3);
new C11(C3, v10, C3, "string");
const v23 = new C11(v10, v10, v8, v10);
[v23,C3,v8];
[C3,v21];
[C11,v8];
const o30 = {
    "maxByteLength": 536870889,
};
const v32 = new SharedArrayBuffer(217, o30);
try { v32.grow(); } catch (e) {}
function F51(a53) {
    if (!new.target) { throw 'must be called with new'; }
}
const v54 = new F51(536870889);
with (v54) {
    function F55(a57, a58, a59) {
        if (!new.target) { throw 'must be called with new'; }
        const t47 = this.__lookupSetter__;
        t47(Float64Array);
    }
    let v62 = 10;
    for (;
        (() => {
            try { C3.valueOf(SharedArrayBuffer); } catch (e) {}
            const o64 = {
            };
            new Proxy(C3, o64);
            const v67 = v62--;
            v67 >>> v67;
            return v67;
        })();
        ) {
    }
}
