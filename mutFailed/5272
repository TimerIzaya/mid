const v0 = [1166935768,13393,-1073741824];
const v1 = [-163408162,10,-5465,9007199254740990,44863,5,37954,479448930,128];
const v2 = [1591688970,-128,-831151149,-1024,29089,268435456,4294967295];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a5;
    } catch(e7) {
    }
    try {
        this.e = a6;
    } catch(e8) {
    }
    try {
        this.f = v0;
    } catch(e9) {
    }
}
new F3(v0, v1);
const v11 = new F3(v0, v2);
const v12 = new F3(v11, v1);
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a17;
    } catch(e18) {
    }
    try {
        a17.h = a15;
    } catch(e19) {
    }
}
const v20 = new F13(v12, v0, v11);
const v21 = new F13(v20, v1, v11);
new F13(v21, v0, v12);
const v23 = /EQab\b\d\bcd?/vdimsy;
/(o9DE)/gvis;
/[iM*]/vd;
10000n + 10000n;
let v37;
try {
const t0 = 10000n;
v37 = t0(2n, -536870912n);
} catch (e) {}
try { v37.p(v21, -536870912n); } catch (e) {}
delete v23[256];
v11.h;
new BigInt64Array(8);
new Uint16Array(846);
const v50 = new BigInt64Array(1);
const v52 = [-174534415n,Float64Array,2147483648n];
for (let v55 = 0; v55 < 32; v55++) {
    v52["p" + v55] = v55;
}
const v58 = [v37,v37,v37];
[-174534415n,v58,10000n];
v58.length &= 2;
const v60 = delete v11[67];
let v63 = new Int32Array();
({"byteOffset":v63,} = v63);
v52.length;
v58.unshift(-536870912n, 1904048380);
Date();
-3.5885237423067196;
let v73 = 7;
new v50(255);
new Uint8Array(16);
new Uint16Array(64);
new Int8Array(964446029);
let v88 = 0;
v88++;
v88 < 3;
const v95 = new Uint32Array(16);
const v98 = new Uint32Array(257);
v98[139];
v73 &&= 1073741824;
function f100(a101, a102) {
    const o103 = {
    };
    o103.e = f100;
    o103.b = a102;
    const o104 = {
    };
    o104.b = a102;
    o104.c = a101;
    const o105 = {
    };
    o105.e = f100;
    o105.b = a102;
    o105.d = a102;
    function f107(a108) {
        return v60;
    }
    this.onmessage = f107;
    v95.length = 1073741824;
}
Uint32Array || Int32Array;
const v114 = [Uint32Array,Uint32Array];
const o115 = {
    "arguments": v114,
    "type": "function",
};
new Worker(f100, o115);
