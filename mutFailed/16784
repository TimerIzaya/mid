[978340196,-22274,40155,-1854574176,1024,1073741824,12,15021,1478351734,16];
const v1 = [1462906906,14,-15,2,257,2];
const v2 = [1073741824,-4096,5,-65537,-64959,-2,-9223372036854775808];
const v5 = new Uint8Array(3998);
new Int8Array(255);
new Float64Array(1);
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a15;
    } catch(e16) {
    }
}
new F12(3998, v1);
new F12(255, v2);
const v19 = new F12(255, v2);
const o20 = {
};
o20.g = v19;
[-9007199254740992,-268435456,11,9007199254740990,96025401,-65536,12,255];
class C24 {
    #g = 5483n;
    #e = 5483n;
    #d = 9n;
    c = 9n;
    8;
}
const v25 = new C24();
[-3.555277632152693,0.8875320140334291,-0.0,1.0,-412.0963098221713,4.640011956102125e+307,-783439.9468182282,310231.27043130714,8.153989949457934,974838.3777621158];
const v27 = [3.0,-1.5434910396300392e+308];
const v28 = v27.entries();
const v31 = ("1000")["toUpperCase"]();
c = v25;
let v32;
try { v32 = v28("toUpperCase", 5483n, v31, v27); } catch (e) {}
function f33(a34, a35) {
    const o36 = {
    };
    o36.g = 1;
    function F38(a40, a41) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function F42() {
        if (!new.target) { throw 'must be called with new'; }
        const v44 = this.__lookupGetter__;
        try { v44(); } catch (e) {}
        const v47 = Date.toString();
        const v48 = v47[23];
        try { v48.strike(F42, F42, v47, Int16Array); } catch (e) {}
        const v50 = v47.replaceAll();
        let v51;
        try { v51 = v50.replaceAll(); } catch (e) {}
        const v53 = new Uint32Array(v44, v44, v44);
        v53[2];
        const v56 = new Set(v51);
        const v57 = v56.add;
        const v59 = v56["delete"]();
        const v60 = v59 || v59;
        const v61 = v60 || v60;
        const v62 = v60 && v60;
        const o64 = {
        };
        try { v56.forEach(v61, v57); } catch (e) {}
        const v68 = -v59;
        v68 >>> v68;
        const v70 = Int16Array >>> v61;
        try {
            arguments.fuck();
        } catch(e72) {
        }
        const v74 = ("getPrototypeOf").blink();
        const v75 = v74.trimRight;
        try { v75(v61, Int16Array); } catch (e) {}
        const v77 = v74[28];
        const v78 = v77.strike();
        try { v78.isWellFormed(); } catch (e) {}
        const v80 = v74.strike(v51);
        const v81 = v80.replace(v59, Int16Array, v74, Array, v80);
        v81[11] = v81;
        class C82 {
        }
        class C83 extends C82 {
            ["getPrototypeOf"] = C82;
        }
        const v84 = new C83();
        const t85 = v84.getPrototypeOf;
        new t85();
        const v87 = new F38();
        const t88 = v87.constructor;
        const v89 = new t88(v53);
        v89.valueOf(Int16Array, F42);
        const v91 = new C83();
        const t92 = v91.constructor;
        new t92();
        const t94 = v91.getPrototypeOf;
        new t94();
        const v97 = BigUint64Array.of();
        try { v97.entries(Int16Array, F42, v48); } catch (e) {}
        try { Int8Array(Int8Array, Int8Array, Int8Array); } catch (e) {}
        const v101 = new C83();
        const v102 = v101.getPrototypeOf;
        new v102();
        const t102 = v101.getPrototypeOf;
        const v105 = new t102();
        const v106 = v105.__defineSetter__;
        try { v106(v70); } catch (e) {}
        const t106 = v101.getPrototypeOf;
        const v109 = new t106();
        v109.getPrototypeOf = v109;
        const v110 = new C83();
        const v111 = v110.getPrototypeOf;
        const v112 = new v111(F42, "getPrototypeOf", v50);
        v112.b = v112;
        const v113 = new v111();
        const v114 = v113.constructor;
        try { v114.call(v77); } catch (e) {}
        const v116 = new v114();
        let v117 = v116.getPrototypeOf;
        v117++;
        const t118 = v110.constructor;
        const v120 = new t118(F42, v62);
        const v121 = v120.constructor;
        new v121(v121);
        const v123 = v120.getPrototypeOf;
        try { v123.toString(arguments, v123, v102); } catch (e) {}
        const v125 = Array(19793);
        v125.with(v74, v70);
        for (const v127 of v125) {
        }
    }
    new F42();
    new F42();
    return o36;
}
function f130(a131) {
    ("p").localeCompare();
}
Object.defineProperty(f33, "g", { enumerable: true, set: f130 });
const v134 = f33();
const v135 = f33();
v135.g = v5;
function F136(a138, a139) {
    if (!new.target) { throw 'must be called with new'; }
    a138.g = a138;
    const v140 = this?.constructor;
    try { new v140(f33, v134); } catch (e) {}
}
new v32(o20);
new F136(v135);
