new Float32Array(127);
const v7 = new Set();
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 127;
    try {
        this.d = a10;
    } catch(e12) {
        for (let [v13,v14] of a10) {
        }
    }
    try {
        const v15 = v7[this];
        ([WeakSet,WeakSet])[1];
        new F8(v15, -268435456n);
    } catch(e20) {
    }
}
new F8();
new Uint8Array(5);
const v25 = new Int32Array(5);
function f26() {
    return 127;
}
const v27 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f28(a29, a30, a31, a32) {
    let v33 = 1073741824;
    class C35 {
        constructor(a37) {
            [a37,v33] = "boolean";
        }
    }
    const v38 = new C35(C35);
    function f39(a40, a41, a42) {
        a40[22] = a40;
        const o43 = {
            ...a42,
            2: v38,
            268435439: C35,
        };
        return o43;
    }
    const v44 = /(?:a*)+q(?<a>.)/guds;
    Object.defineProperty(v44, "constructor", { writable: true, enumerable: true, value: f39 });
    function f45(a46) {
        a46.constructor = f26;
        const v47 = ("boolean").constructor;
        try { new v47(); } catch (e) {}
        v44?.constructor;
        class C50 {
        }
        v27.constructor.isArray(v44);
        return a46;
    }
    for (let [i61, i62] = (() => {
            function f55() {
                for (let i = 0; i < 5; i++) {
                    for (let v56 = 0; v56 < 5; v56++) {
                        class C57 {
                        }
                        for (let v58 = 0; v58 < 5; v58++) {
                            v58 > v58;
                        }
                    }
                }
                return f55;
            }
            f55();
            return [0, 10];
        })();
        i61 < i62;
        i62--) {
        f45(v44);
    }
    return v33;
}
async function f72(a73, a74) {
    'use strict';
    a74[9] = v27;
    return -21133.120743932668;
}
f72("h", -21133.120743932668);
for (let v76 = 0; v76 < 5; v76++) {
    f28(v76, v76, v27, v76);
}
new Uint32Array();
const v82 = /D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy;
function f83() {
    function F84(a86, a87, a88, a89) {
        if (!new.target) { throw 'must be called with new'; }
        ~a87;
    }
    return v25;
}
v82[Symbol.toPrimitive] = f83;
const v93 = [v82];
v93[Symbol.toPrimitive] = f72;
const v96 = ["-536870912","replace",v93];
const v98 = [];
Reflect.apply(("-536870912").normalize, v96, v98);
%OptimizeFunctionOnNextCall(f28);
f28(v27, v27, v27, v27);
