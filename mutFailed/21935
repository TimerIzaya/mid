let v0 = [];
new Uint8Array(6);
new Int8Array(257);
new BigInt64Array(441);
function f10() {
    return 6;
}
/[8a(?=bbb|bb)c]/gums;
/a[a]/vdsy;
const v16 = /M/gus;
class C20 {
    #h = 1e-15;
    static get e() {
        function f22() {
            return 1e-15;
        }
        return this;
    }
    static [v16];
    set f(a24) {
        const v25 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
        for (let v26 = 0; v26 < 5; v26++) {
            v25 | v26;
        }
        this != a24;
    }
    #g = 3.7122420217608383;
    static 65536;
}
const v29 = new C20();
new C20();
new C20();
new Set();
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f43() {
    const v46 = v0--;
    -v46;
    class C51 {
        constructor(a53) {
            const t41 = "includes";
            const v55 = new t41();
            try { v55.entries(); } catch (e) {}
            const v57 = new Uint16Array(12, -4294967296, v46);
            new Float32Array(v57, -4294967296, 268435439, 1000000000000.0, v57);
        }
    }
    try { new C51(12); } catch (e) {}
    const v60 = new C51(257828.6336153492);
    const v61 = new C51();
    const v62 = new C51(-4294967296);
    const v63 = [v62,C51];
    [257828.6336153492,v62,v60,v62,v63];
    const v65 = [v62];
    class C66 extends C51 {
        [v60];
    }
    const v67 = new C66();
    const v68 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
    const v69 = v29.constructor;
    try { new v69(v68, v29); } catch (e) {}
    function F72(a74) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v75 = new F72();
    const v76 = F72 >>> 536870887;
    with (v75) {
        typeof v76;
    }
    const v78 = v65.constructor;
    try { v78.isArray(v65); } catch (e) {}
    class C80 extends v78 {
    }
    C80.a = C80;
    const v81 = new C80();
    const v82 = v81?.constructor;
    try { new v82(); } catch (e) {}
    Object.defineProperty(v81, 65537, { value: v61 });
    try { v67.m(v63); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f43);
f43();
%OptimizeFunctionOnNextCall(f43);
f43();
