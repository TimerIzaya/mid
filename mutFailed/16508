const v5 = new Uint16Array(11);
let v6 = 6;
let v7 = Float64Array;
new v7(v6);
new Uint32Array(1024);
class C12 {
    constructor(a14, a15) {
        v7 %= v7;
        1024 & this;
    }
    n(a18, a19, a20, a21) {
        a18 !== 9;
        try {
            if (a21 <= v7) {
                v6 = -13;
            } else {
                var b = 11;
            }
            v5.sort(a20);
        } catch(e25) {
        }
        return 11;
    }
    static h;
    #b = -13;
}
new C12(v6, -7);
new C12(-13, 11);
new C12(-13, -13);
const v29 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v31 = new Uint32Array();
let v32 = -4294967297n;
const v33 = v32--;
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    const v41 = a37.constructor;
    let v42;
    try { v42 = v41(); } catch (e) {}
    const v43 = v42?.constructor;
    let v44;
    try { v44 = v43(f36, a37, v29, Uint32Array, v41); } catch (e) {}
    function f45() {
        const v47 = ("Vre").charAt(v44);
        v47.blink();
        let v49;
        try { v49 = ("Vre").codePointAt(v29); } catch (e) {}
        v49 % v49;
        let v51 = Float64Array;
        v51 = a38;
        b = v29;
        let v52 = v29.length;
        v52++;
        try {
            v35.forEach(a38);
        } catch(e55) {
            e55.message = e55;
        }
        const o67 = {
            "c": v32,
            valueOf(a57, a58) {
                return v42;
            },
            get d() {
                super[this] = "Vre";
                return this;
            },
            "f": v43,
            1073741824: v31,
            [v32](a61, a62, a63, a64) {
                eval(v47);
            },
        };
        return v35;
    }
    f45();
    const v70 = Array(v43);
    try { v70.findLast(); } catch (e) {}
    const v73 = Int8Array.of();
    let v74;
    try { v74 = v73.every(v73, a37, v73, a38, Array); } catch (e) {}
    const v75 = new Int8Array(v74);
    for (const v76 of v34) {
        v75[v76] ||= 1024;
    }
    v41 in v44;
    const v82 = v75.buffer.slice();
    const v83 = v82.constructor;
    try { v83(v82, v74, v33, v73, a37); } catch (e) {}
    const v86 = new Int32Array(v83, v41, v41);
    v86.lastIndexOf(a37, a39);
    try { v35["find"](..."find", a40, ...v34, ...v35); } catch (e) {}
    return v32;
}
for (let v90 = 0; v90 < 10; v90++) {
    f36(v31);
}
%OptimizeFunctionOnNextCall(f36);
f36(Uint32Array);
