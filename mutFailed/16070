function f1() {
    const o25 = {
        10: undefined,
        valueOf() {
            try { this.b(); } catch (e) {}
            [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        },
        [undefined]: f1,
        "d": undefined,
        "b": undefined,
        p() {
            const v7 = Symbol.matchAll;
            class C8 {
            }
            class C9 extends C8 {
                get b() {
                }
                #p(a12, a13, a14, a15) {
                }
                static #p(a17, a18) {
                }
            }
            function f20() {
                (623782.6377989235).constructor();
                return 623782.6377989235;
            }
            new Map();
            this[v7] = undefined;
            c = this;
            try {
                this.e = undefined;
            } catch(e24) {
            }
            return undefined;
        },
    };
    return o25;
}
const v26 = f1();
f1();
const v28 = f1();
const v31 = /((?<=a))/gudm;
const v32 = /gk4b*/vmsy;
for (let v33 = 0; v33 < 5; v33++) {
    try { undefined(v31, -6, v32, v33, -4); } catch (e) {}
    class C36 {
        static #c = "bigint";
        static valueOf(a38) {
            this.#c = "bigint";
        }
    }
}
class C39 {
    toString(a41, a42) {
        try {
            a41.g = undefined;
            function f43() {
                /[a-zA-Z0-9]/gvisy;
                return f43;
            }
            for (let v45 = 0; v45 < 5; v45++) {
                f43();
                %OptimizeFunctionOnNextCall(f43);
            }
        } catch(e47) {
        }
        let v49 = -839290232;
        !v49;
        v28 - v49;
        return --v49;
    }
    [f1] = v26;
    10000 = f1;
}
new C39();
new C39();
function f56() {
    return f56;
}
class C57 extends f56 {
    #o(a59, a60, a61) {
    }
}
-2147483648 ^ 8.868704382732872e+307;
const v66 = [];
function f67() {
    const v69 = -v66 && v66;
    -v69;
    return v69;
}
function f71() {
    return Int32Array;
}
new C39();
[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757]];
const v78 = new Uint32Array(5);
v78[1] = 716884141;
new Int16Array(5);
new Uint16Array(4096);
new Uint8ClampedArray(13);
class C90 extends Int32Array {
}
function f91() {
    return f91;
}
function f92(a93, a94, a95) {
    const t106 = a94.constructor;
    return t106().toPrecision(f91);
}
const v100 = [510.2053105196128,0.8358186694591268,1.0,0.543725476488796,-Infinity,5.0,700.6383739635098,Infinity,3.0] ^ "-792442332";
const v102 = new Date();
v102.setUTCMinutes(v100, v100);
Object(16).toExponential(16);
const o111 = {
    "execution": "-792442332",
};
function F112(a114, a115, a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
    const v120 = new Float64Array(1);
    v120.reverse();
}
function f122(a123, a124, a125, a126) {
    try { new a123(); } catch (e) {}
    a124 & a124;
    const v129 = 3 | a124;
    v129 * v129;
    a123 / a123;
    const v132 = a124 < a123;
    a125 >>> a125;
    const o137 = {
        n(a135, a136) {
            return v132;
        },
    };
}
for (let v138 = 0; v138 < 500; v138++) {
    f122(Uint8Array, 2);
}
