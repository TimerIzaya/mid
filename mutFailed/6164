function f0() {
    Math.sinh();
    Math.cos(2);
    new f0();
}
function f6() {
    return f0;
}
const v8 = new Map();
try { v8.set(f0, Map); } catch (e) {}
[7,64,-7172,536870889,0,-128,-4294967297,-815523967,-7,-43708];
const o14 = {
    "execution": "async",
    "type": "major",
};
o14.g = f6;
o14.g = o14;
const v15 = -719.6662441520621 != o14;
v15 && v15;
[-164228947,-268435456,4294967296,-62050,65536,1000];
[-65537,268435441];
const v19 = /hsfPa(?=b)c/uy;
/(Mxyz{93}z((((.).).).)*)/vds;
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    function f28() {
        return f0;
    }
    function f29(a30) {
        for (let v31 = 0; v31 < 32; v31++) {
            const t30 = "p";
            t30["p" + v31] = v31;
        }
    }
    Object.defineProperty(this, "constructor", { writable: true, enumerable: true, get: f28, set: f29 });
    const v34 = this?.constructor;
    try { new v34(f0, f0, F23); } catch (e) {}
    a26 === a26;
    const v37 = a26.toString();
    try { v37.italics(); } catch (e) {}
}
const v39 = F23?.apply;
try { new v39(F23, v19); } catch (e) {}
new F23("p", 7n);
/e(?<a>.)/gvdm;
for (let v43 = 0; v43 < 5; v43++) {
    v43 === v43;
    function f45() {
        let v49 = Symbol.toPrimitive.description.codePointAt();
        v49--;
        ([-1.5424212036356715e+308]).shift();
        const v53 = [1073741824,1073741823,1376142744,1073741825];
        v53.g = v53;
        return v49;
    }
    f45();
    %OptimizeFunctionOnNextCall(f45);
}
