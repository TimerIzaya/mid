function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 536870912;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
new Set();
function f15() {
    return -2.220446049250313e-16;
}
f15.length = f15;
const v18 = new Int8Array(4);
try { v18.reduce(4); } catch (e) {}
8 - 8;
for (const v23 in "1024") {
}
class C24 {
}
try { new C24(); } catch (e) {}
("1073741823").trimRight()[8];
const v30 = [];
function f31(a32, a33) {
    class C34 {
    }
    5.0 / -2.220446049250313e-16;
    new Uint8Array(257);
    class C44 extends Uint16Array {
        constructor(a46, a47, a48) {
            super();
        }
    }
    eval.exp();
    eval.log(-23525);
    function f52() {
        return f52;
    }
}
v30.constructor = f31;
new Float32Array(8);
const v55 = /abc?/gvmy;
try { v55.toString(); } catch (e) {}
v55.exec("Q8F");
const v58 = /(x)(x)(x)\1/uis;
function f59(a60, a61, a62, a63) {
    const o70 = {
        2: a62,
        __proto__: a63,
        [v58](a65, a66, a67, a68) {
            super.test();
        },
    };
    o70[2];
    return a60;
}
const v72 = f59();
const v73 = f59();
function F75() {
    if (!new.target) { throw 'must be called with new'; }
}
2 >>> 2;
Date.cos(2);
try { BigUint64Array(v72, v73, -2.220446049250313e-16); } catch (e) {}
new BigUint64Array(215);
class C89 {
    #c = "toUpperCase";
    get a() {
        const v91 = this << "toUpperCase";
        const v92 = v91 ^ v91;
        let v93;
        try { v93 = v92(v92, this, v92, v92, v91, this); } catch (e) {}
        v93[v92] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
const v95 = new C89();
new C89(v95, v95, v4);
function f98(a99, a100, a101) {
}
class C102 {
}
function F103(a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    const v108 = this.constructor;
    try { new v108(a107, C102); } catch (e) {}
}
class C110 extends F0 {
    7;
    static #g = F0;
    constructor(a112, a113, a114) {
        super();
        F0 === 4096;
        v4[9];
        const o117 = {
        };
        new Proxy(v4, o117);
    }
    static c = -1;
    69;
}
new C110(v6, v4, Set);
const v121 = new C110(Set, v5, v6);
new C110(v121, v4, v4);
("aZ4O").normalize();
