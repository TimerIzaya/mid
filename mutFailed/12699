new Float64Array(257);
new Float32Array(10);
new Uint8Array(0);
new BigInt64Array(180);
const v14 = new BigInt64Array(1866);
new Uint32Array(3);
const t6 = [-936145422,536870912,127,257,-36772,-15984,2];
t6.length = 6;
const o21 = {
};
const v27 = Math.expm1(v14);
const v28 = Math.tanh("n");
const o29 = {
    [v28]: v27,
};
const v30 = [3.0,3.0];
const v31 = [6,268435440,13,1073741825];
class C32 {
    o(a34, a35, a36, a37) {
    }
    constructor(a39, a40) {
        const v41 = this.constructor;
        try { new v41(this, "n"); } catch (e) {}
        a40.sup();
    }
    /*
    constructor(a45) {
        const v46 = this.constructor;
        try { new v46(v30); } catch (e) {}
        function f48(a49, a50) {
            let v51 = a49[5];
            v51++;
            const v53 = [0.0,1000000000.0,-9.821086765219384e+307,-858.0794579951759];
            const v54 = [-2.0,-1.5384788741465538,-2.0];
            const v55 = [0.9388990264144315,-1e-15,-1.0,841561.2554243801];
            class C56 {
                static a;
                n(a58, a59) {
                    try { a59["push"](...v53, ...a59, ...v53, ...v54, ...this); } catch (e) {}
                    return "push";
                }
                static b;
                static m(a63) {
                    try { new a63(this, this, v53, this); } catch (e) {}
                    v53 < v55;
                    const o66 = {
                    };
                    new Proxy(this, o66);
                    return v55;
                }
            }
            return v46;
        }
        f48(1);
        f48(a45);
    }
    */
}
new C32(3.0);
const o72 = {
};
function F73(a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    function f77() {
        Int16Array.length = Int16Array;
        Int16Array[0] = 9223372036854775807;
        const v80 = new Int16Array(Int16Array);
        return v80;
    }
    try { f77.call(a76); } catch (e) {}
    this.constructor = f77;
    const v82 = this?.__defineGetter__;
    const v83 = v82?.toString;
    try { new v83(); } catch (e) {}
    try { new v82(a76, this); } catch (e) {}
    try {
        const v86 = `
        `;
    } catch(e87) {
    }
}
new C32(v31);
class C90 {
    constructor(a92) {
        this[1762774961] = this;
        a92 % a92;
        function f94() {
            return a92;
        }
        try { f94.bind(this); } catch (e) {}
    }
    static [-1e-15] = 1000.0;
    ["name"] = -1e-15;
    f;
    [-1e-15];
    a;
    1762774961 = -1e-15;
    static ["name"];
}
C90.e = C90;
const v96 = new C90(1000.0);
const v97 = new C90(v96);
const v98 = v97?.__lookupSetter__;
try { new v98("name"); } catch (e) {}
new C90(-1e-15);
try { new WeakSet(); } catch (e) {}
new WeakSet();
new Set();
let v107 = undefined;
const o108 = {
};
o108.c = o108;
v107 = o108;
function F109() {
    if (!new.target) { throw 'must be called with new'; }
    const v111 = this.constructor;
    try { new v111(); } catch (e) {}
    let v113 = -128;
    v113--;
    this.g = v113;
}
new F109();
const v118 = Date.constructor;
const v119 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
const v120 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
function f121(a122, a123, a124) {
    try { a123.groupToMap(v118); } catch (e) {}
    return a123;
}
f121(v120, v119).fill();
new Uint8Array();
