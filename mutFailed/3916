const v3 = [-18343,10,-9223372036854775808,7,-2,1266834198];
[65536,8,12,-2];
const v6 = v3["reverse"]();
const v7 = +-65536n;
v7 + v7;
v3[36] = v6;
const v9 = [431667931];
class C10 {
    e;
    5 = -65536n;
    constructor(a12, a13, a14, a15) {
        v9[-2] %= a15;
        a15 && this;
    }
    1 = -65536n;
    [-4n] = v9;
    static b = v3;
}
const v20 = new C10(v9, -65536n, -65536n, -381137624n);
new C10(v3, -4n, -65536n, -65536n);
const v22 = new C10(v3, -4n, -4n, -4n);
function f23() {
    return v9;
}
class C24 extends C10 {
    o(a26, a27, a28) {
        try {
            v3.map(a27);
        } catch(e30) {
        }
        return v22;
    }
    constructor(a32, a33, a34, a35) {
        let v31 = this;
        super(v3, a34, a33, a33);
        v31 = a35;
        function F36(a38, a39, a40) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a39;
            } catch(e41) {
            }
            try {
                this.g = -381137624n;
            } catch(e42) {
            }
        }
        new F36(-381137624n, -381137624n, a34);
        new F36(-65536n, a34, a34);
        new F36(a34, a34, a34);
    }
}
new C24(v20, -4n, -381137624n, C24);
const v47 = new C24(v22, -65536n, -65536n, v22);
new C24(C24, -4n, -381137624n, v47);
const v51 = new Uint8ClampedArray(995);
const v53 = new Int8Array(v51);
const v54 = v53.copyWithin;
try { v51.some(v54); } catch (e) {}
