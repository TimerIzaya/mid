const v1 = [-26405,0,-9007199254740992,-536870912,-16,-1073741824,59764,4294967297,1339666963,10];
const v2 = [7];
Object.defineProperty(v2, 3, { value: v2 });
const v3 = [31904,5219,129,7];
function f4(a5) {
    null | null;
    class C7 {
        static p(a9) {
            eval("boolean");
        }
    }
    return v2;
}
v3.constructor = f4;
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a30;
    const v31 = this?.__lookupGetter__;
    try { new v31(a30); } catch (e) {}
    try { a30.fill(null); } catch (e) {}
    const v34 = a30?.constructor;
    const v35 = v34?.of;
    try { new v35(); } catch (e) {}
    try { new v34(a30); } catch (e) {}
    try {
        this.b = a30;
    } catch(e38) {
    }
    try {
        this.d = v3;
    } catch(e39) {
    }
}
const v41 = Symbol.iterator;
Object.defineProperty(F28, v41, { value: f4 });
let v42 = F28?.__lookupSetter__;
v42.valueOf = f4;
function f43() {
    return v1;
}
const v45 = [];
Reflect.construct(f43, v45, F28);
let v47;
try { v47 = new v42(v1); } catch (e) {}
const v48 = new F28(v2);
v42 <<= F28;
let v54 = 31945 && v47;
let v55 = v54 * v54;
--v55;
v54++;
Math.atan(v47);
const v59 = new F28(v3);
v59.b = v59;
const v60 = new F28(v2);
try { new Set(); } catch (e) {}
Set.prototype;
const v64 = new Set();
try { v64.add(v2); } catch (e) {}
-2147483649 & -2147483649;
function f70(a71, a72, a73) {
    function f74() {
        return v41;
    }
    function f75(a76) {
        try { v45.sort(f74); } catch (e) {}
    }
    Object.defineProperty(a73, 3, { configurable: true, enumerable: true, get: f74, set: f75 });
    a73[3] = a73;
    const o86 = {
        "g": v1,
        ...a73,
        __proto__: v48,
        "d": Set,
        "b": a73,
        ...a73,
        "c": -65535,
        "a": a73,
        "f": a72,
        [a72](a79, a80, a81, a82) {
            super.h ||= -2147483649;
            try { a73.at(a72); } catch (e) {}
            try {
                v48.length = 2;
            } catch(e85) {
            }
            return v3;
        },
    };
    return a72;
}
const v87 = f70(v3, -65535, v3);
v87 << v87;
let v90 = -f70(v2, -65535, v3);
v90--;
let v92 = f70(v1, -2147483649, v2);
-v92;
v92++;
function F95() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    -128 >> -128;
    try {
        this.g = v3;
    } catch(e100) {
    }
    try {
        this.b = -128;
    } catch(e101) {
    }
}
F95.name = F95;
const v102 = new F95();
v102.c = v102;
new F95();
new F95();
595 * 595;
Uint8ClampedArray.toString = f43;
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v108 = new Uint8ClampedArray(595);
64 >>> 64;
const v112 = new BigUint64Array(64);
0 >>> 0;
function f115() {
    return v112;
}
let [v116,v117] = v108;
v116++;
v117 + v117;
v116++;
try {
    v60.__proto__ = v48;
} catch(e121) {
}
v102.__proto__;
let v125;
try { v125 = new Uint8Array(F28, v117, F28); } catch (e) {}
v125[0];
new Uint8Array(0);
function f128() {
    return 64;
}
f128.d = f128;
const v130 = new WeakSet();
try { v130.delete(v125); } catch (e) {}
2 >>> 2;
16 >>> 16;
const v139 = [12];
try { v139.find(v139); } catch (e) {}
for (const v142 of v139) {
    Uint8ClampedArray <= v142;
}
WeakMap.name;
const v146 = WeakMap.prototype;
try { v146.delete(v116); } catch (e) {}
7 - 7;
7 === 7;
delete v139[0];
