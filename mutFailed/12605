const t0 = "goTP";
new t0();
const v9 = new BigInt64Array(4046);
function f11(a12, a13) {
    a12++;
    let o16 = {
        "d": a12,
        ...a12,
        get e() {
            return a13;
        },
    };
    [,...o16] = v9;
    a13[4046];
    const o20 = {
        "maxByteLength": 3035,
    };
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f11(4046, 4046);
class C26 {
    constructor(a28, a29, a30, a31) {
        -1758454604n * 0.17276495077323362;
        let v37 = +-536870912;
        v37++;
    }
    #e = "17691";
    #valueOf(a40, a41, a42, a43) {
        this.#valueOf();
    }
    #a;
    /*
    constructor(a46, a47) {
        function f48(a49, a50, a51, a52) {
            return arguments;
        }
        for (let v54 = 0; v54 < 5; v54++) {
            const v55 = f48();
            v55[1] = v55;
        }
    }
    */
}
new C26(-1758454604n, "goTP", "a", -1148338651n);
const v57 = new C26(770249296n, "a", "goTP", -1148338651n);
new C26(-1148338651n, "17691", v57, -1148338651n);
const v59 = /nupa\Sc/vms;
function f60() {
}
const t51 = /(?:a*)+q(?<a>.)/guds;
t51.constructor = f60;
function f62(a63) {
    const v64 = a63.constructor;
    const v67 = [601759695];
    const v68 = [1073741824,1073741823,1376142744,1073741825];
    try { v68["find"](..."find", Uint8ClampedArray, ...v67); } catch (e) {}
    let v72 = ("Vre").codePointAt();
    const v73 = v72--;
    v73 >> v73;
    new Uint8ClampedArray(1000);
    try { v64(a63, f60); } catch (e) {}
    class C77 {
    }
}
for (let i80 = 0, i81 = 10; i80 < i81; i81--) {
    for (let v88 = 0; v88 < 5; v88++) {
        new Date(v88, 1000.0);
    }
    for (let v92 = 0; v92 < 50; v92++) {
    }
}
v59.constructor;
