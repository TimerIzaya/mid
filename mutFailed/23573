[];
/(?<=a)+/udim;
/(?:a+)?/gds;
/[\p{Nd}]/vim;
[9007199254740991];
[-536870912,428426316,2,-18024,9223372036854775807,-65535];
[2];
const v10 = [];
const v11 = [v10];
class C13 extends Map {
    constructor(a15, a16) {
        super(v11);
    }
}
const v17 = new C13(v10, v11);
const v18 = new C13(v11, v17);
const v19 = new C13(v18, v17);
function f23() {
    const v25 = new Set();
    return v25.clear();
}
f23();
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v30 = new Uint32Array();
let v31 = -4294967297n;
const v32 = v31--;
const o33 = {
};
class C35 extends Date {
}
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this.constructor;
    try { new v46(1024, 1024); } catch (e) {}
    a43.caller;
    this.c = a44;
    const v50 = [Reflect];
    const o51 = {
        __proto__: Reflect,
        "e": v50,
    };
}
function f52(a53, a54, a55, a56) {
    try { a53.toLocaleString(); } catch (e) {}
    const v58 = a53?.constructor;
    try { v58(); } catch (e) {}
    try { v58(); } catch (e) {}
    const v62 = arguments.length;
    Object.defineProperty(v17, "e", { configurable: true, enumerable: true, value: f52 });
    const v64 = v18["entries"](a55, ...v19, BigUint64Array, ..."entries", a54, v62);
    const v66 = Symbol.toStringTag;
    v18[v66] = v66;
    function f67() {
        let v69;
        try { v69 = ("Vre").charAt(4096); } catch (e) {}
        try { v69.lastIndexOf(); } catch (e) {}
        let v71;
        try { v71 = ("Vre").codePointAt(v28); } catch (e) {}
        v71 - v71;
        v71 ^ v71;
        let v74 = Float64Array;
        v74 = a54;
        let v75 = v28.length;
        v75++;
        try {
            v37.forEach(a54);
        } catch(e78) {
            e78.stack = e78;
        }
        const o89 = {
            "c": v31,
            "EPSILON": v36,
            valueOf(a80, a81) {
                return a80;
            },
            1073741824: v30,
            [v31](a83, a84, a85, a86) {
                eval();
            },
            "arguments": 5,
            256: a56,
        };
        return v75;
    }
    f67();
    for (let v92 = 0; v92 < 250; v92++) {
        class C94 extends Date {
        }
        const v99 = ("p" + v92).fontcolor(Date, Array).trimLeft()[12];
        ("p")[v99.substring(Array, Array, v99, v99)];
    }
    const v102 = Array();
    let v103;
    try { v103 = v102.findLast(f52, v30); } catch (e) {}
    v102.unshift("entries", v64, "entries", v103);
    let v106;
    try { v106 = Int8Array.of(); } catch (e) {}
    try { v106.join(v58); } catch (e) {}
    const v108 = new Int8Array(v36);
    v108.c = v108;
    const v109 = v108.buffer;
    v109.maxByteLength;
    const v111 = v109.slice(v58);
    try { Int32Array(v111, arguments, v31); } catch (e) {}
    function f114(a115, a116, a117, a118) {
        return a118;
    }
    function F120(a122, a123) {
        if (!new.target) { throw 'must be called with new'; }
        const v124 = this?.constructor;
        try { new v124(a122, F120); } catch (e) {}
        try {
            this.g = a122;
        } catch(e126) {
        }
        try {
            this.b = "WwTV";
            ("D")[0].substring();
        } catch(e131) {
        }
    }
    const v132 = new Int32Array();
    const v133 = v132[3];
    v133 + v133;
    for (let v135 = 0; v135 < 5; v135++) {
    }
    %OptimizeFunctionOnNextCall(f67);
    try { v37["find"](..."find", a56, ...v36, ...v37, ...522675525n); } catch (e) {}
    return a53;
}
for (let v138 = 0; v138 < 10; v138++) {
    f52(v30);
}
%OptimizeFunctionOnNextCall(f52);
f52(v36, v10, v32, f52);
