new BigInt64Array(257);
const v8 = [[gc,gc,gc,gc,gc]];
const o9 = {
    "arguments": v8,
    "type": "function",
};
const v10 = new Float32Array(102);
const v13 = new BigUint64Array(4);
const o22 = {
    [null]() {
        try { this.null(this, null); } catch (e) {}
        const v18 = Array(Array);
        for (let v19 = 0; v19 < 5; v19++) {
            const v20 = v19 || v18;
            v20 ** v20;
        }
    },
};
const v23 = o22.null(null, null);
o22.null(v23, v23, o22, o22);
function f25() {
    return 4;
}
class C26 extends BigUint64Array {
    o(a28, a29) {
        Object.defineProperty(v13, 256, { set: f25 });
        let v31;
        try { v31 = this["toSorted"](...a29, ...v10, f25, 102, a28); } catch (e) {}
        return v31;
    }
    constructor(a33, a34, a35, a36) {
        super(a36, a35, a36);
        new f25();
        v13.byteOffset ^= 257;
        const v39 = Symbol.iterator;
        const o52 = {
            [v39]() {
                let v41 = 10;
                const o51 = {
                    next() {
                        v41--;
                        const v45 = v41 == 0;
                        const o50 = {
                            "done": v45,
                            "value": v41,
                            "type": "function",
                            "type": "function",
                            "execution": "function",
                            "d": C26,
                            set g(a47) {
                                try {
                                    super.o(this, a47);
                                } catch(e49) {
                                }
                            },
                        };
                        return o50;
                    },
                };
                return o51;
            },
        };
    }
}
new C26(257, 102, 4, 257);
new C26(4, 257, 257, 4);
new C26(257, 102, 102, 4);
new Int32Array();
const v61 = new Date(-429.3290910931888);
v61.setUTCSeconds(-429.3290910931888, -429.3290910931888);
new Int32Array(1024);
new Uint16Array(2);
new Uint16Array(5);
const v71 = [1984879050,0,-8575,7,1073741825];
function f72(a73, a74, a75, a76) {
    const v78 = ("Vre").constructor;
    Math.tan(-1);
    function F82() {
        if (!new.target) { throw 'must be called with new'; }
    }
    return v78.fromCharCode(v71);
}
for (let v85 = 0; v85 < 10; v85++) {
    f72(v85, f72, v85, v85);
}
%OptimizeFunctionOnNextCall(f72);
f72(v71, v71, v71, f72);
