[-1,1992123499];
const v2 = [-1,-38121,-4096];
[45297,5,-65537,-4096,-37960,-7,34600,-4294967295,14];
[16,127,-7521,-4294967296,64,7,1,65537,2132627637];
const v5 = [95690640,59990,13,268435441,-2147483648];
v5[3] = v5;
[-2028767826,65536,7,-172156884,2147483648,7];
new Uint32Array(352);
3995 - 3995;
const v13 = new Int8Array(3995);
function f14(a15) {
    delete v5?.length;
    const v18 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
    try { v18.filter(59890n); } catch (e) {}
    return v2;
}
Object.defineProperty(v13, Symbol.toPrimitive, { writable: true, configurable: true, value: f14 });
v13[3063] = v13;
let v22 = 8;
v22--;
const v25 = Uint8ClampedArray.prototype;
try { new Uint8ClampedArray(false, false, 3995); } catch (e) {}
const v27 = new Uint8ClampedArray(v22);
v27.valueOf = Symbol;
10000n === 10000n;
function f30(a31, a32) {
    a31--;
    a32.name = a32;
    const o34 = {
        [10000n]: a32,
    };
    return o34;
}
f30.d = v25;
f30.d = f30;
f30(10000n, f30)[10000];
const v38 = new BigInt64Array();
const v41 = new Uint8ClampedArray(12);
let {"byteLength":v42,...v43} = v41;
v38.valueOf = f30;
v27[1] = v27;
let v44 = 0;
v44--;
const v47 = v44 < 3;
v47 && v47;
const v49 = v44++;
v49 >>> v49;
