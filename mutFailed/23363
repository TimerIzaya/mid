const v0 = [-5.0];
const v1 = [5.0,0.9519366728994569,-1.7976931348623157e+308,1000000.0,205.78203433122576,0.7450611962137168,-1000000000000.0,9.449104144624599,0.7086423303207755];
const v2 = [2.2254443548217395,234336.67725830083,0.14606804397997897,1e-15,-872255.715073961,1e-15];
let v3 = 58801n;
const v7 = new Set();
class C8 extends Set {
    constructor(a10, a11) {
        super(v0);
        const o12 = {
            __proto__: v2,
            "e": a10,
            [v7]: -65537n,
            "c": a10,
        };
    }
    static e = v1;
    static c = Set;
    n(a14, a15) {
    }
    static {
        super.b = this;
        let {...v17} = this;
    }
}
new C8(v1, -65537n);
new C8(v1, -65537n);
this[256] = BigUint64Array;
let v23;
try { v23 = Set(); } catch (e) {}
new C8(v0, -2186n);
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F25();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e30) {
    }
}
for (let v33 = 0; v33 < 10; v33++) {
    const v35 = this.match;
    ({"description":v3,} = v35);
    c = Symbol;
    (Set == v0 ? v35 : v0) >>> F25;
    const t43 = "-4294967296";
    t43[v35] = 5.0;
}
new F25();
new F25();
new SharedArrayBuffer(4096);
const v44 = [];
function f45(a46, a47) {
    class C48 {
    }
}
v44.constructor = v23;
try {
    this.toString = f45;
} catch(e51) {
}
new Set();
v2["concat"]();
