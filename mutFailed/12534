function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const o12 = {
    };
    o12.a = o12;
    try {
        o12.a = a10;
    } catch(e13) {
    }
    try {
        const o14 = {
        };
        o14.a = a8;
        o14.a = a10;
        o14.f = this;
    } catch(e15) {
    }
    try {
        const o16 = {
        };
        o16.b = a8;
        o16.a = a10;
        o16.f = this;
        o16.b = 1725952171;
    } catch(e17) {
    }
    try {
        const o31 = {
            valueOf(a19, a20) {
                class C24 {
                    static {
                        do {
                        } while (0 < 0)
                    }
                }
                return a20;
            },
        };
        o31.a = a10;
        o31.a = a10;
        o31.f = this;
        o31.d = -8567;
    } catch(e32) {
    }
    try {
        this.b = 32718;
    } catch(e33) {
    }
    try {
        new SharedArrayBuffer(217);
        let v37 = 1000.0;
        class C38 {
            static {
                ++v37;
            }
        }
        this.c = 32718;
    } catch(e43) {
    }
}
const v44 = new F6(1725952171, -8567, 32718, F6);
const t61 = /P[x\dz]*/gudmy;
t61.multiline **= 1000;
for (let v48 = 0; v48 < 5; v48++) {
    const v50 = new Map();
    v50["p" + -7] = -7;
    const o53 = {
        ...v50,
    };
}
const v54 = new F6(65536, v44, -389038974, -389038974);
new F6(257, F6, 32718, -8567);
function f59(a60, a61) {
    Array(19793);
    return v54;
}
Uint16Array[Symbol.toPrimitive] = f59;
const v67 = new Uint16Array(3225);
try { new BigInt64Array(-832267.262043573); } catch (e) {}
new Int8Array(BigUint64Array);
for (const v74 of v67) {
    v74[3] = 5n;
    Uint16Array >= v74;
    v74?.f;
    function f77(a78) {
        return a78;
    }
    function f79() {
        return f79;
    }
}
[7,128];
const v84 = [40213,422333454,47387,65536,-51830];
v84[2] = v84;
gc();
const o87 = {
};
