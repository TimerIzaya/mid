new Float64Array(1869);
new Uint8ClampedArray(225);
new BigInt64Array(2);
function f9() {
    return 225;
}
new Uint32Array(1);
const v15 = new BigInt64Array(98);
new Uint8ClampedArray(2);
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = this;
    } catch(e22) {
    }
    try {
        this.c = 1;
    } catch(e23) {
    }
    try {
        this.d = 1;
    } catch(e24) {
    }
}
new F19();
const v26 = new F19();
Float64Array.hasInstance;
function f29() {
    return f29;
}
const v30 = new v15();
12 * 12;
const v35 = [12,12];
const v36 = v35?.indexOf;
try { new v36(Int32Array); } catch (e) {}
2707 / 2707;
BigInt64Array[7] = 128;
try {
    f9();
} catch(e42) {
}
new Uint8Array(2707, 2707, 128);
new Int32Array(128);
Uint16Array.name;
const v49 = new Uint16Array(92);
const v52 = new Int8Array(257);
const v53 = v52?.subarray;
let v54;
try { v54 = new v53(F19, 92); } catch (e) {}
function f55() {
}
try { f55(); } catch (e) {}
const v57 = [f55,f55];
const v59 = new Date();
try { v59.setDate(F19); } catch (e) {}
try { ("getUTCMinutes").fixed(); } catch (e) {}
v59["getUTCMinutes"]();
const o65 = {
    0: v30,
    162: "1ya",
};
o65[162];
try { v57.includes(v57); } catch (e) {}
const v68 = [v57,f55];
v68.b = v68;
const v69 = [v68];
try { v69.pop(); } catch (e) {}
let v73;
try { v73 = ("toString").padStart(v26); } catch (e) {}
v73[6] = v73;
try { ("-1865512128").valueOf(); } catch (e) {}
const o84 = {
    toString(a78, a79, a80, a81) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
    255: v36,
    [v73]: o65,
    "c": v73,
    __proto__: v15,
    ...v30,
};
try { Uint8ClampedArray.from(128); } catch (e) {}
new BigUint64Array(12);
Date.b = Date;
class C92 extends Date {
    static get c() {
        const v94 = `
        `;
        eval();
    }
}
const v97 = new Uint8ClampedArray(3989);
var c = 9;
const t96 = "preventExtensions";
t96[1024] = v54;
delete v97[65536];
v30 >> 257;
v35[268435441];
try { ("Bl4").toWellFormed(); } catch (e) {}
const v105 = new BigUint64Array("Bl4");
Int32Array.name = Int32Array;
const v107 = new Int32Array();
v107.__proto__ = v105;
let v109;
try { v109 = new Int8Array(3989, v49, 3989); } catch (e) {}
v109?.constructor;
class C111 {
}
const v112 = new C111();
v112[10] = v112;
v112[10].prototype;
const o118 = {
    "execution": "async",
    "type": "minor",
};
gc(o118);
