function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -29288;
    } catch(e3) {
    }
    this.c = -29288;
    function F4() {
        if (!new.target) { throw 'must be called with new'; }
    }
    Int8Array.prototype;
    try {
        this.g = -29288;
    } catch(e8) {
    }
}
const v9 = new F0();
const v10 = new F0();
const v11 = new F0();
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v11;
    } catch(e16) {
    }
    try {
        this.f = a14;
    } catch(e17) {
    }
    try {
        this.g = a15;
    } catch(e18) {
    }
}
const v19 = new F12(v10, v9);
const v20 = new F12(v19, v19);
new F12(v20, v10);
let v22 = 0;
while ((() => {
        class C24 {
        }
        new Uint8Array(268435440);
        return v22 < 10;
    })()) {
    new F12(F12, v22);
    try {
        new F0();
    } catch(e31) {
    }
    class C33 extends Set {
    }
    const v35 = new Int8Array(Int8Array);
    const v36 = new Int8Array();
    v36.find(v35);
    v22++;
}
/foo(?!bar)baz/visy;
/z/vmy;
/a*b/vs;
function f42() {
    try {
        const v43 = new f42();
        class C45 extends Date {
        }
        function f46() {
            return v43;
        }
    } catch(e47) {
    }
    new Float64Array(8);
    new Int8Array(3647);
    new Float64Array(2);
    return v9;
}
const v63 = new Int16Array(41);
v63.fill(725);
