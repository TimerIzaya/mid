function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -65537;
    } catch(e3) {
    }
    try {
        this.g = -65537;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = this?.constructor;
    try { new v12(v6, this); } catch (e) {}
    a10.d = a10;
    a11.e = a11;
    try {
        this.f = v7;
    } catch(e14) {
    }
    try {
        this.e = v7;
    } catch(e15) {
    }
}
F8.length;
const v17 = new F8(v6, v7);
v17.b = v17;
const v18 = v17?.constructor;
try { new v18(F0, F0); } catch (e) {}
v18.e = v18;
try { new v18(F8, v7); } catch (e) {}
const v21 = new F8(v7, v7);
v21.g = v21;
v21.f = v21;
new F8(v7, v5);
const v25 = -37859n ^ -37859n;
let v26 = 9007199254740990n;
v26--;
let v28 = 591114.0785999324;
v28 % v28;
const v30 = v28++;
v30 & v30;
const v33 = [v28,v28,v28];
try { v33.toLocaleString(); } catch (e) {}
const v36 = 4 | 4;
v36 ^ v36;
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    const v41 = this?.__defineGetter__;
    let v42;
    try { v42 = new v41(v5, 11n); } catch (e) {}
    let v43;
    try { v43 = this.toString(this, F38, F38, this); } catch (e) {}
    try { v43.localeCompare(v42); } catch (e) {}
    let v45;
    try { v45 = v43.trimStart(); } catch (e) {}
    v45[9];
    const v47 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    try { v47.toLocaleString(); } catch (e) {}
    9223372036854775807 - 9223372036854775807;
    let v52;
    try { v52 = Date.toString(F38, 9223372036854775807); } catch (e) {}
    try { v52.toWellFormed(); } catch (e) {}
    try { v52.replaceAll(v6, -37859n); } catch (e) {}
    Date();
    let v58;
    try { v58 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
    try { v58.findIndex(v52); } catch (e) {}
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    const v60 = new Uint32Array(5);
    let v61;
    try { v61 = v60.reduce(Date); } catch (e) {}
    try { v61.toString(); } catch (e) {}
    let v63;
    try { v63 = v61.replaceAll(v58, v61); } catch (e) {}
    try { v63.localeCompare(v63); } catch (e) {}
    let v65;
    try { v65 = v63.toUpperCase(); } catch (e) {}
    v65[33];
    839612.5677247904 >> 839612.5677247904;
    const v70 = new Set(v33);
    try { v70.forEach(v5); } catch (e) {}
    const v72 = v70?.add;
    v72.name = v72;
    try { v72(v25); } catch (e) {}
    try { new v72(v58); } catch (e) {}
    let v76;
    try { v76 = ("delete").blink(); } catch (e) {}
    const v77 = v76?.constructor;
    try { new v77(v72); } catch (e) {}
    let v79;
    try { v79 = v76.toLocaleLowerCase(); } catch (e) {}
    try { v79.toUpperCase(); } catch (e) {}
    v76[4] = v76;
    const v81 = v70["delete"](839612.5677247904);
    v81 && v81;
    const v83 = v81 || v81;
    v83 || v83;
    const v85 = v81 || v81;
    !v85;
    const v87 = v85 || v85;
    v87 && v87;
    const v89 = v85 || v85;
    !v89;
    !v89;
    const v92 = v85 && v85;
    !v92;
    const v95 = 19793 >>> 19793;
    v95 >> v95;
    const o97 = {
    };
    o97.c = o97;
    o97.e = o97;
    o97.b = o97;
    o97.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    try { ("getPrototypeOf").substring(v79, v79); } catch (e) {}
    let v102;
    try { v102 = ("getPrototypeOf").blink(); } catch (e) {}
    const v103 = v102[28];
    let v104;
    try { v104 = v103.strike(); } catch (e) {}
    v104[8] = v104;
    let v105;
    try { v105 = v102.strike(v28); } catch (e) {}
    v105[41] = v105;
    let v106;
    try { v106 = v105.replace(19793, v17); } catch (e) {}
    v106.length;
    v106[11] = v106;
    const v109 = -1.7976931348623157e+308 - -1.7976931348623157e+308;
    v109 ^ v109;
    class C111 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C112 extends v60 {
        ["getPrototypeOf"] = C111;
    }
    let v113;
    try { v113 = new C112(); } catch (e) {}
    try { v113.getPrototypeOf(); } catch (e) {}
    let v115;
    try { v115 = new C112(); } catch (e) {}
    const v116 = v115?.getPrototypeOf;
    try { new v116(); } catch (e) {}
    const v118 = v115?.getPrototypeOf;
    try { new v118(); } catch (e) {}
    let v120;
    try { v120 = new v118(); } catch (e) {}
    const v121 = v120?.hasOwnProperty;
    try { new v121(v120); } catch (e) {}
    let v123;
    try { v123 = new C112(); } catch (e) {}
    const v124 = v123?.getPrototypeOf;
    try { new v124(); } catch (e) {}
    C112.e = C112;
    const v126 = new C112();
    const v127 = v126?.getPrototypeOf;
    try { v127(); } catch (e) {}
    let v129;
    try { v129 = new v127(); } catch (e) {}
    v129.g = v129;
    let v130;
    try { v130 = v129.propertyIsEnumerable(v106); } catch (e) {}
    v130 && v130;
    const v132 = v129?.constructor;
    let v133;
    try { v133 = new v132(); } catch (e) {}
    try { v133.constructor(); } catch (e) {}
    const v135 = v126.constructor;
    let v136;
    try { v136 = new v135(F38, v92); } catch (e) {}
    const v137 = v136?.getPrototypeOf;
    v137.e = v137;
    const v138 = v137?.apply;
    try { new v138(v30, v30); } catch (e) {}
    let v140;
    try { v140 = new v137(); } catch (e) {}
    const v141 = v140?.constructor;
    try { new v141(); } catch (e) {}
    v140.d = v140;
    const v143 = Array(19793);
    try { v143.shift(); } catch (e) {}
    for (const v145 of v143) {
    }
    const v146 = [v143,v143,v143,v143,v143];
    v146.g = v146;
    let v147;
    try { v147 = v146.includes(839612.5677247904); } catch (e) {}
    const v148 = v147 || v147;
    const v149 = v148 || v148;
    v149 && v149;
    const v151 = v147 && v147;
    const v152 = v151 || v151;
    v152 && v152;
    BigUint64Array.e = BigUint64Array;
    const v155 = new BigUint64Array();
    try { v155.reduceRight(v5); } catch (e) {}
    try { v155.reduceRight(v33); } catch (e) {}
    for (let v158 = 0; v158 < 5; v158++) {
        v158 >> v158;
    }
    const v160 = [v146,v146,v146];
    v160[1] = v160;
    const v161 = [v160];
    try { v161.map(v52); } catch (e) {}
    let v163;
    try { v163 = v161.values(); } catch (e) {}
    try { v163.next(); } catch (e) {}
    const v166 = v161[0]?.flat;
    try { new v166(); } catch (e) {}
}
const v168 = new F38();
const v169 = v168?.constructor;
try { new v169(); } catch (e) {}
const v171 = new F38();
const v172 = v171?.constructor;
try { new v172(); } catch (e) {}
const v174 = v171?.constructor;
v174.g = v174;
try { v174.toString(); } catch (e) {}
let v176;
try { v176 = new v174(); } catch (e) {}
try { v176.toLocaleString(); } catch (e) {}
const v179 = new BigInt64Array();
try { v179.findLast(v179); } catch (e) {}
const v181 = v179?.constructor;
try { new v181(v26, v26, F38); } catch (e) {}
let v183;
try { v183 = v179.entries(); } catch (e) {}
try { v183.next(); } catch (e) {}
function f185() {
    const v187 = v179[undefined] instanceof f185;
    v187 || v187;
    const o189 = {
    };
    o189.h = o189;
    o189.g = o189;
    const o190 = {
    };
    o190.d = o190;
    o190.h = o190;
    try {
        const o191 = {
        };
        o191.h = o191;
        o191.a = v28;
        o191.h = v187;
    } catch(e192) {
    }
    -12n !== -12n;
    ~-12n;
    const v196 = -12n << -12n;
    v196 ^ v196;
    -v196;
    return undefined;
}
f185.name;
f185.e = f185;
%PrepareFunctionForOptimization(f185);
const o200 = {
    "apply": f185,
};
try { o200.apply(); } catch (e) {}
const v202 = o200.apply;
v202.b = v202;
try { v202.apply(f185, f185); } catch (e) {}
const v204 = new v202();
try { v204.constructor(); } catch (e) {}
try { v204.constructor(); } catch (e) {}
%OptimizeFunctionOnNextCall(f185);
f185();
