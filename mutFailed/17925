new Float64Array(1024);
new Int8Array(493);
new Uint32Array(0);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    let v18 = -47236;
    "ex7" <= Uint8ClampedArray;
    const v23 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f24(a25, a26, a27, a28) {
        try {
            f24(true);
        } catch(e31) {
        }
        const v32 = /(?:a*)+q(?<a>.)/guds;
        for (let i35 = 0, i36 = 10; i35 < i36; i36--) {
            v23.constructor.isArray(v32);
        }
        return v32;
    }
    --a12;
    Math.tanh(-3.353607516563988e+307);
    let v47 = a12++;
    v18--;
    19524 ^ a12;
    try {
        this.h = a12;
    } catch(e50) {
    }
    try {
        this.f = a13;
    } catch(e51) {
        this[536870888];
        v47 = v18;
        function f53() {
            return 19524;
        }
    }
}
const v54 = new F9(Float64Array, 493, 0);
const v55 = new F9(v54, 493, 1024);
const v56 = new F9(v55, 1024, 0);
const o60 = {
    "execution": "sync",
    "type": 1024,
};
gc(o60);
const v62 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v64 = new Int16Array(v62, v62, v62);
const v66 = [1073741824,1073741823,1376142744,1073741825];
function f67(a68, a69, a70, a71) {
    function f72() {
        new Int32Array(v62, a71, v64);
        try {
            v66.forEach(a69);
        } catch(e76) {
            const v78 = new Float32Array();
            v78[2] = v78;
            function f79() {
                return Float32Array;
            }
        }
        const o87 = {
            [-4294967297n](a81, a82, a83, a84) {
                eval();
            },
        };
        return o87;
    }
    f72();
    eval();
    %OptimizeFunctionOnNextCall(f72);
    return -4294967297n;
}
function F91(a93, a94, a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1024;
    } catch(e97) {
    }
    function f98() {
        return f98;
    }
    function F99() {
        if (!new.target) { throw 'must be called with new'; }
        const v101 = this?.constructor;
        try { new v101(); } catch (e) {}
        try {
            new f98();
            /Ckza\Wb?/vis;
            /Ma\W+/gudm;
        } catch(e106) {
        }
    }
    class C107 extends F99 {
        4;
    }
    try {
        this.a = v56;
    } catch(e108) {
    }
}
new F91(493, 0, v55, 493);
new F91(493, 1024, v56, 493);
new F91(0, 0, v56, 0);
const v115 = [-3.0,8.688111356865875,-2.220446049250313e-16,0.3960904884964801,0.5863601312966836,1.0,7.530456257794057e+307,524.1863337358618];
const v116 = [1.6484091400965863e+308,-689078.0330961384,-1.7976931348623157e+308,-160341.63249327452,127.17765342927578,1000.0,2.0,614.081171374098,NaN,3.82514727368617];
const v117 = [-Infinity,0.32846642868810805,522897.9759496555,-Infinity,-1.7976931348623157e+308,Infinity,-91739.17504563625,-5.712078980390993,-4.0,-362.4687316307243];
function f118(a119, a120, a121) {
    a119[2];
    a120 << a120;
    let v124;
    try { v124 = a119.lastIndexOf(v117); } catch (e) {}
    v124 / v124;
    let v126;
    try { v126 = a121.toString(); } catch (e) {}
    const o127 = {
        [-4096]: -8717,
        "d": v126,
        __proto__: v117,
        "a": a119,
        "f": a119,
        "h": a121,
        "g": a121,
        "e": a120,
        1073741823: a120,
        "b": a119,
    };
    return o127;
}
const v128 = f118(v116, -8717, f118);
v128[9];
const v130 = f118(v116, -4096, -17041);
v130[1073741823] = v130;
f118(v115, -8717, -4096);
function F132() {
    if (!new.target) { throw 'must be called with new'; }
    let v134;
    try { v134 = this.valueOf(); } catch (e) {}
    const v135 = v134?.__defineGetter__;
    try { new v135(-4096, v134); } catch (e) {}
    let v138 = 50765 + 50765;
    v138--;
}
F132.caller;
const v141 = new F132();
function f145() {
    let v146 = 946.0676210033328;
    v146++;
    const o148 = {
        __proto__: v146,
    };
    return f145;
}
f145();
const t153 = -4294967297n;
t153();
try { ("-39993").concat(-4096); } catch (e) {}
const o158 = {
    [v141](a153, a154, a155, a156) {
        "D2z" < this;
    },
};
o158.e = o158;
let v160;
try { v160 = ("test").fontsize(v128); } catch (e) {}
try { v160.charAt("-39993"); } catch (e) {}
