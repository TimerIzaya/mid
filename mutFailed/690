let v0 = [7,-11,-4294967297,2112243558,-65537,-19999];
const v1 = [-65536,-2147483648,256,-1329950607,9,-4294967295,8,-4294967296,-2147483647];
const v2 = [128,-65537,268435440,127];
class C3 {
    [v1] = v0;
    m(a5, a6) {
        let v7;
        try { v7 = a5(v2, a6, a5, a5); } catch (e) {}
        try { v7(v7); } catch (e) {}
        const v12 = -(-2088167769);
        Math.tanh(v1);
        v7 + -2088167769;
        ~v7;
        ++v0;
        return v12;
    }
    static #e;
    static f;
    static [-2];
    1073741825;
    static {
        this < this;
    }
}
C3.prototype = C3;
const v19 = new v0();
const v20 = new C3();
const v21 = v20?.constructor;
try { new v21(); } catch (e) {}
const v23 = new C3();
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this?.constructor;
    try { new v30(a28, a28, v2, a29); } catch (e) {}
    a26[1];
    try {
        this.b = a27;
    } catch(e33) {
    }
    try {
        this.e = v19;
    } catch(e34) {
    }
}
new F24(v2, v23, v23, v0);
const v36 = new F24(v20, v19, v23, C3);
new F24(v0, v20, v23, v36);
-131.14557671807358 ^ -131.14557671807358;
class C44 {
}
async function f45(a46, a47, a48, a49) {
    return (await C44).call();
}
let v52 = -1000000000.0;
v52++;
[3.0,995712.1638139696,-2.0,1.6391533955732946e+308,1000000.0];
[1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
let v57 = 0.2037963153987472;
v57--;
1e-15 >> 1e-15;
const v61 = [];
[];
const v63 = [0.0,-1000.0,2.557943047142931];
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
for (let v68 = 0; v68 < 5; v68++) {
    v68++;
    v63.valueOf = v68;
}
0.3031821725579029 * 0.3031821725579029;
4096 + 4096;
let v77 = 0;
v61.f = v61;
v77++;
v77 < 4;
[256,54026];
const v83 = Math.hypot();
v83 & v83;
Symbol.toPrimitive;
const o88 = {
    2321852491: "object",
};
const t81 = "minor";
t81[4] = "minor";
const o93 = {
    "execution": "async",
    "type": "minor",
};
o93.execution = o93;
gc(o93);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v96 = new Int16Array();
try { v96.toString(); } catch (e) {}
class C100 extends Array {
}
function f101() {
    return f101;
}
255 - 255;
let v104 = [-883936.0401947303,9.41640124927378e+307,0.060305085001335246];
v104 /= "source";
new v21(4);
const v110 = new Int16Array(8);
try {
const t0 = 6;
t0();
} catch (e) {}
let [] = "async";
function f114() {
    return f114;
}
async function f115(a116, a117, a118) {
    a117 & a117;
    delete v110[-1000000000.0];
    v96[0];
    const v122 = v96[1];
    let [,,...v123] = v96;
    await v122;
}
const v125 = f115?.constructor;
try { new v125("-128"); } catch (e) {}
f115(8, 8, 948737.12760097);
