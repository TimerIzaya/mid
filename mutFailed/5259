const v3 = new Array(1);
let v4;
try { v4 = v3.toString(); } catch (e) {}
let v5;
try { v5 = v3.findLast(1); } catch (e) {}
-16;
let v12;
try { v12 = new Uint32Array(v5, v3, Array); } catch (e) {}
new Uint32Array(16);
let v14 = 0;
v14 === v14;
v14++;
new v4(v14);
try { v12.set(Int32Array); } catch (e) {}
BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
const v24 = new v12();
function f25(a26, a27) {
    a27--;
    let o30 = {
        "d": a26,
        ...f25,
        get e() {
            return a27;
        },
    };
    [,...o30] = v24;
    return -4096;
}
f25(4046, 4046);
try { Uint16Array(-4096, -4096, 2412); } catch (e) {}
new Float64Array(Uint32Array);
-(-7);
function f39(a40, a41) {
    const o42 = {
        "f": a41,
        [a40]: -12,
    };
    return o42;
}
f39.caller = v5;
const v43 = new Uint16Array(2412);
v43[1040];
const v45 = v43?.constructor;
try { new v45(v14, -1246579124, Int32Array); } catch (e) {}
function f47() {
    const o51 = {
        m(a50) {
            return this;
        },
        __proto__: 946.0676210033328,
    };
    const v52 = o51?.m;
    try { v12.bind(9223372036854775807); } catch (e) {}
    try { new v52(o51); } catch (e) {}
    return 946.0676210033328;
}
const v55 = f47();
try { Math.log1p(v55); } catch (e) {}
Math.acosh(65535);
function f60() {
}
f60();
%PrepareFunctionForOptimization(f47);
let v62 = f47();
v62--;
%OptimizeFunctionOnNextCall(f47);
f47();
1024 & 1024;
Int32Array.g = Int32Array;
const v68 = new Int32Array(1024);
for (const v69 of v68) {
    v69 === v69;
    const o73 = {
        "maxByteLength": 1293466293,
    };
    1796 >> 1293466293;
    new SharedArrayBuffer(1796, v45);
}
