Uint16Array.d = Uint16Array;
let v5 = new Uint16Array(1616);
const v8 = new Int32Array(128);
const v11 = new BigInt64Array(4);
v11[1];
class C13 {
    e;
    get f() {
        let v14 = this;
        ({"d":v5,...v14} = v14);
        try {
            v8.length = 2;
        } catch(e16) {
        }
        return Int32Array;
    }
    16;
    8;
    static #d = v5;
    static e = 4;
}
C13.e = C13;
const v17 = new C13();
try { v17.toString(); } catch (e) {}
const v19 = new C13();
new C13();
const v24 = v8 << "toUpperCase";
let v25;
try {
const t0 = 9223372036854775807;
v25 = t0(9223372036854775807, v8, 9223372036854775807, 9223372036854775807, v24, v8);
} catch (e) {}
v25[9223372036854775807] <<= 1.1922093890401552e+308;
new Uint8Array(Uint8Array, Uint8Array, Uint8Array);
try { Float64Array.from(v19); } catch (e) {}
const v30 = ("undefined").localeCompare();
const v31 = [v30,v30,v30];
const v32 = [v30,v30,v30];
const v33 = [v31,v32,v32];
const v34 = new Float64Array(v33, Uint8Array, v33);
let v35;
try { v35 = v34.keys(); } catch (e) {}
try { v35.next(); } catch (e) {}
const v37 = v35.__lookupSetter__;
try { v37(); } catch (e) {}
let v39 = 128;
const v40 = v39--;
const v41 = v40 & v40;
Int16Array.prototype = Int16Array;
const v43 = new Int16Array();
const v44 = v43.keys();
try { v44.next(); } catch (e) {}
const v47 = 8.423204300745166 - 8.423204300745166;
for (let v48 = 0; v48 < 5; v48++) {
    function f49() {
        const v51 = ([-1.5424212036356715e+308]).shift();
        const v52 = [1073741824,1073741823,1376142744,1073741825];
        v52.g = v52;
        return v51;
    }
    f49();
    %OptimizeFunctionOnNextCall(f49);
}
v47 - v47;
try { new WeakSet(); } catch (e) {}
new WeakSet();
function f58(a59, a60, a61, a62) {
    const o63 = {
    };
    o63.f = o63;
    return o63;
}
const v64 = f58();
class C67 {
    static #toString(a69) {
        let v70 = 0;
        while (v70 < 3) {
            Math.random();
            Math.sin(this);
            ++v70;
            Math.clz32(this);
            --v70;
            !1680472700;
            v70++;
        }
        return 7;
    }
}
C67.valueOf = "number";
const v83 = new C67();
const v84 = v83[4];
try {
    new C67(v84);
} catch(e86) {
}
v64.f;
const v88 = f58();
const v89 = v88[268435441];
const v90 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
try { v90.find(v47); } catch (e) {}
try { v88.lastIndexOf(); } catch (e) {}
const v93 = f58();
v93.f;
let v96;
try { v96 = ("iterator").strike(WeakSet, v89, v31, v93); } catch (e) {}
const v97 = v96.padStart(v90);
v97[7] = v97;
class C98 {
}
let v99;
try { v99 = C98(); } catch (e) {}
function f100() {
    const o104 = {
        ...1.0,
        set b(a103) {
        },
    };
    return o104;
}
f100();
C98.prototype;
for (let [i117, i118] = (() => {
        0 - 0;
        10 / 10;
        function* f113(a114) {
            yield [9007199254740990,-4294967296,-1205995130,-12581,9];
            return -1.7570084557226905e+308;
        }
        return [0, 10];
    })();
    (() => {
        const v119 = i117 < i118;
        class C120 extends Date {
        }
        return v119;
    })();
    i117++) {
    i117 >>> i117;
    ~v41;
    const t137 = [1073741824,255,-93221804,1,268435440];
    t137.length = 512;
    const o130 = {
        "type": "undefined",
    };
}
const v132 = new BigInt64Array(v30);
v132.BYTES_PER_ELEMENT = v99;
