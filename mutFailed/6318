function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -1099763733;
    } catch(e3) {
    }
    try {
        this.d = -1099763733;
    } catch(e4) {
    }
    try {
        "p" + -1099763733;
        this.g = -1099763733;
        const o14 = {
            toString(a8, a9, a10) {
                function f11() {
                    return a10;
                }
                Object.defineProperty(a8, Symbol.toPrimitive, { enumerable: true, get: f11 });
                return Symbol;
            },
        };
        try { o14.toString(o14); } catch (e) {}
        this.g = -1099763733;
    } catch(e16) {
    }
}
const v17 = new F0();
("-9223372036854775807").lastIndexOf(-7);
function f21(a22, a23, a24, a25) {
    const o30 = {
        [a24](a27, a28, a29) {
            switch (a22) {
                default:
                    break;
            }
        },
    };
    return a25;
}
new F0();
new F0();
try { Float64Array.apply(Float64Array, v17); } catch (e) {}
new Float64Array(255);
const v39 = new Uint32Array(129);
v39[12];
new Int8Array(16);
new Function("1532738280");
const v47 = [];
const o54 = {
    set g(a49) {
    },
    [v47](a51, a52, a53) {
    },
};
function f55(a56) {
    try {
        const v59 = new Uint8ClampedArray(2147483647);
        function f60(a61) {
            return f60;
        }
        const v64 = [v59];
        const o65 = {
            "h": v64,
            "type": "function",
        };
        Worker(f60, o65);
    } catch(e67) {
    }
    const o68 = {
    };
}
const v70 = Symbol.iterator;
function f71() {
    return f71;
}
const v72 = /(?:a*)+q(?<a>.)/guds;
function f73(a74) {
    const v75 = a74.constructor;
    let v76;
    try { v76 = v75(a74, f71); } catch (e) {}
    const o78 = {
        get d() {
            return this;
        },
    };
    return v76;
}
for (let v79 = 0; v79 < 50; v79++) {
    f73(v72);
}
const v83 = Array(8);
class C87 {
    static #a;
    static deref(a89, a90) {
        const v91 = super.d;
        try { v91(); } catch (e) {}
        return a89;
    }
    [1];
    static [1] = 255;
    [255];
    f = -65536;
}
function f93() {
    return f93;
}
const v95 = new Map(255, v83);
try { v95.set(Array, f93); } catch (e) {}
function f97() {
    return v95;
}
-1073741824;
([-7.127262073336987e+307,9.142894664271836,5.0]).toLocaleString();
function f103() {
}
class C104 extends f103 {
}
1814769353 - 1814769353;
const o107 = {
    "maxByteLength": 1814769353,
};
o107.maxByteLength;
const v110 = new SharedArrayBuffer(12, o107, v17, 12);
const o111 = {
    ...v70,
};
const v112 = [255];
function f113(a114) {
    try { a114.p(v112); } catch (e) {}
}
v110.grow(1073741824);
new Reflect([255,-4294967295,2147483648,2390,8]);
const v120 = [];
class C121 {
    constructor() {
        super.f >>= this;
    }
    static #o() {
        super[v120];
        super.a;
        return v120;
    }
}
