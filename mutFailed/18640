class C3 {
    static valueOf(a5) {
        let v6;
        try { v6 = ("toString").localeCompare(a5, "127"); } catch (e) {}
        const v7 = v6 || "stack";
        try { this.toSpliced("toString", "127"); } catch (e) {}
        try { v7(this, this, a5, "stack"); } catch (e) {}
        a5 = "stack";
        Math.expm1(v6);
        const v13 = v6 << "127";
        Math.hypot(v6);
        const v15 = Math.imul(v13, 0);
        Math.atanh(0);
        return v15;
    }
}
new C3();
const v18 = new C3();
const v19 = new C3();
const v20 = /a*/dms;
/4a\nb\bc/gvis;
const v22 = /(x)(x)(x)\1/gumsy;
class C23 {
    static {
        const o25 = {
        };
        new Proxy("127", o25);
    }
    #g = v19;
    constructor(a29, a30, a31) {
        super.f = "stack";
        a30 instanceof C3;
        const v33 = ("toString")[10000];
        v33 >= this ? v33 : this;
        let v38 = 0.4666556655531985;
        Math.atanh(9007199254740992);
        let v40 = v38 - 9007199254740992;
        Math.max(v40);
        Math.imul(v40, v18);
        --v40;
        v38++;
    }
}
new C23(v22, v22, v20);
new C23("127", v18, v20);
new C23(C23, v22, v20);
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 1073741825;
}
const v51 = new F48();
new F48();
const v53 = new F48();
function f54(a55) {
    const o56 = {
        __proto__: v51,
        "a": F48,
    };
    o56.g;
    return o56;
}
f54(v53);
new Map();
function F61() {
    if (!new.target) { throw 'must be called with new'; }
}
const v63 = new F61();
function F64(a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
}
const v68 = new F64(v51, F64);
const t71 = v68.constructor;
new t71();
const v73 = [f54,f54,f54];
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    9223372036854775807 < 9223372036854775807;
    const v80 = Date.toString(F75);
    const v82 = v80[23]?.trimRight;
    try { new v82(); } catch (e) {}
    v80.replaceAll(v63, -37859n);
    const v86 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v86[2] = v86;
    const v87 = v86[2];
    v87 * v87;
    const v91 = new Set(v73);
    try { v91.add(v91); } catch (e) {}
    const v93 = v91.add;
    v93.f = v93;
    try { v93(v86); } catch (e) {}
    try { ("delete").localeCompare(v91); } catch (e) {}
    const v97 = v91["delete"](839612.5677247904);
    const v98 = v97 || v97;
    v98 && v98;
    const v100 = v98 || v98;
    const v101 = v100 && v100;
    const v102 = v98 && v98;
    const v103 = v102 || v102;
    v103 || v103;
    const o106 = {
    };
    o106.b = o106;
    try { new Array(Array); } catch (e) {}
    try { Array(9223372036854775807); } catch (e) {}
    const v111 = ("getPrototypeOf").blink();
    const v112 = v111[28];
    const v113 = v112.strike();
    try { v113.split(v113, v101); } catch (e) {}
    v113[4] = v113;
    const v115 = v111.strike(591114.0785999324);
    const v116 = v115?.search;
    try { new v116(v86); } catch (e) {}
    const v118 = v115.replace(19793, v68);
    v118[11] = v118;
    class C120 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    try { new C120(); } catch (e) {}
    class C122 extends C120 {
        ["getPrototypeOf"] = C120;
    }
    new C122();
    const v124 = new C122();
    try { v124.getPrototypeOf(); } catch (e) {}
    const t124 = v124.constructor;
    new t124();
    const v128 = new C122();
    try { v128.getPrototypeOf(); } catch (e) {}
    const v130 = v128.getPrototypeOf;
    v130.length = v130;
    const v132 = BigUint64Array.of();
    try { v132.entries(); } catch (e) {}
    new BigUint64Array();
    new Int8Array();
    Uint8Array.length;
    const v139 = new C122();
    const v140 = v139.getPrototypeOf;
    try { v140.toString(); } catch (e) {}
    const v142 = new v140();
    v142.getPrototypeOf;
    const v144 = v139.getPrototypeOf;
    try { new v144(); } catch (e) {}
    let v146;
    try { v146 = new v144(); } catch (e) {}
    v146.getPrototypeOf = v146;
    const v147 = new C122();
    const v148 = v147?.getPrototypeOf;
    try { new v148(); } catch (e) {}
    const v150 = v147.getPrototypeOf;
    let v151;
    try { v151 = new v150(); } catch (e) {}
    v151.getPrototypeOf = v151;
    try { v150(); } catch (e) {}
    let v153;
    try { v153 = new v150(); } catch (e) {}
    v153.getPrototypeOf;
    try { v153.propertyIsEnumerable(v118); } catch (e) {}
    const v156 = v153?.constructor;
    try { v156.call(v112); } catch (e) {}
    let v158;
    try { v158 = new v156(v111, this, 4); } catch (e) {}
    v158.getPrototypeOf;
    const v160 = v158.getPrototypeOf;
    v160 >>> v160;
    try { v158.constructor(); } catch (e) {}
    const v163 = v147.constructor;
    let v164;
    try { v164 = new v163(F75, v102); } catch (e) {}
    v164?.constructor;
    v164?.getPrototypeOf;
    for (const v168 of Array(19793)) {
    }
}
new F75();
new F75();
