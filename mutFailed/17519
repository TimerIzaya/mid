class C3 {
    e;
    static m(a5, a6) {
        super[0] = this;
        const v7 = this & 0;
        a6 = -2055432374;
        try {
        const t0 = 0;
        t0(v7, this, a5, v7);
        } catch (e) {}
        return 0;
    }
    7;
    static [16] = 16;
    #f;
}
function f9(a10, a11) {
    try { a10.pow(a11, a11, -2055432374, C3, a11); } catch (e) {}
    function f13() {
        return f13;
    }
    return -2055432374;
}
C3[Symbol.iterator] = f9;
const v16 = new C3();
const v17 = new C3();
v17[7];
const v19 = new C3();
v19[7] = v19;
const v20 = [1377667476,1877536942];
try { v20.group(v20); } catch (e) {}
const v22 = [65381,2147483648];
const v23 = [4,268435440,-1221765243,1073741824,-9007199254740990,6,65536];
v23[2];
try { v23.every(C3); } catch (e) {}
-2.220446049250313e-16 != -2.220446049250313e-16;
129250.18044218887 === 129250.18044218887;
129250.18044218887 + 129250.18044218887;
6.020423941260901 * 6.020423941260901;
512 + 512;
Uint16Array[2] = v16;
const v36 = new Uint16Array(512);
v36[31] = v36;
let v38;
try { v38 = new Float32Array(Uint16Array, Float32Array, v20); } catch (e) {}
Object.defineProperty(v38, "constructor", { writable: true, value: Symbol });
const v39 = v38?.constructor;
try { new v39(16, v38, v22); } catch (e) {}
new Float32Array(C3);
