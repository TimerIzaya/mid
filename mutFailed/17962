const v5 = Reflect.construct(Symbol, [Reflect,Reflect,Reflect,Reflect,Reflect]);
const o6 = {
};
new Uint16Array(5);
const v13 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v13);
function f16() {
}
class C17 {
    o(a19, a20) {
        for (const v22 of "bigint") {
        }
        f16();
    }
}
[f16,[f16],C17];
-5 == 0n;
new Uint16Array(10);
new Uint32Array(5);
("h").split(65535);
new Float32Array(165);
new Int32Array(3344);
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    function F49(a51, a52) {
        if (!new.target) { throw 'must be called with new'; }
        function f53() {
            const v54 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
            v54.length >>>= -65536;
            return v54;
        }
        f53();
        try {
            new F49(a46, a51);
        } catch(e58) {
        }
    }
    new F49();
}
function f60(a61, a62, a63) {
    const v66 = new Int8Array();
    gc(128n);
    v5.sup(("-1723624938").slice(9, "g").normalize(), "-1723624938").toLocaleLowerCase();
    function F78() {
        if (!new.target) { throw 'must be called with new'; }
        this.c = F78;
        this.c = this;
        try {
            this.c = 19793;
            try { Array.of(); } catch (e) {}
            const v83 = Array(19793);
            try { v83.map(this); } catch (e) {}
            for (const v85 of v83) {
            }
            const v86 = [];
            const v88 = Symbol.toPrimitive;
            v86[v88] = Array;
            const v89 = [v86,v86,v86];
            try { Symbol.apply(Symbol, v88); } catch (e) {}
            v89[Symbol.toPrimitive] = Symbol;
            [v89,v89];
            Uint16Array.toString = Array;
        } catch(e95) {
        }
        try {
            this.b = 19793;
        } catch(e96) {
        }
    }
    new F78();
    Int16Array.apply(128, v66);
    return f60;
}
try { f60(f60, f60, f60); } catch (e) {}
