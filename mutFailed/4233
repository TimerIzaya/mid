const v0 = [];
function f4(a5, a6) {
    a6 >> a6;
    const v8 = -256 >>> a6;
    v8 / v8;
    return -256;
}
const v10 = f4(v0, -256);
function f14() {
    return -4294967296;
}
f14.arguments;
let v18 = Infinity;
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.constructor;
    try { new v25(a21, -1.0, a24, a24); } catch (e) {}
    a22 - a22;
    a24 ^ a24;
    try {
        this.g = a23;
    } catch(e29) {
    }
    try {
        try {
            new f14();
        } catch(e31) {
        }
        try {
            v0.fill(-65537n);
        } catch(e33) {
        }
        this.b = -65537n;
    } catch(e34) {
    }
}
try { new F19(v0, v0, v18, -4294967296); } catch (e) {}
function f36(a37, a38, a39, a40) {
    a38.length;
    v18 = a40;
    const o42 = {
        "apply": f4,
    };
    try { o42.apply(a38, a39); } catch (e) {}
    new Proxy(v0, o42);
    return o42;
}
f36(925338382n, F19, 6n, 925338382n);
const v47 = new F19(-116242.81512445165, -65537n, 6n, 6n);
const v48 = new F19(v47, -65537n, 925338382n, -65537n);
v48.b = v48;
function f49(a50, a51) {
    function f53(a54) {
        function F55(a57, a58, a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a58;
            } catch(e61) {
            }
        }
        new F55(a50, this, -4294967296, -65537n);
        new F55(a51, -116242.81512445165, v10, a50);
        new F55(a54, a51, a50, -65537n);
    }
    this.onmessage = f53;
    this[v47] &&= v10;
}
const v67 = ["function",v48];
const o68 = {
    "arguments": v67,
    "type": "function",
};
new Worker(f49, o68);
new F19(F19, 925338382n, -65537n, -65537n);
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v73 = new Uint8ClampedArray(3);
class C74 {
    constructor(a76, a77, a78, a79) {
        a78 = a76;
        this.__proto__;
        this[1000] = 3;
        let v81 = super[a77];
        v81 = 129;
        const v82 = this?.constructor;
        try { new v82(a79, this, v73, a79); } catch (e) {}
        for (let v84 = 0; v84 < 5; v84++) {
            v84 % v84;
            v73[v84] = a79;
        }
    }
}
C74.name;
const v87 = new C74();
v87.length = v87;
