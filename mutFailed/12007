const v5 = new BigUint64Array(4096);
let v6;
try { v6 = v5.slice(BigUint64Array, v5); } catch (e) {}
new Float64Array(89);
const v12 = new Float64Array(3272);
const v13 = [Float64Array,v12,v12,v12];
const v14 = [v13,BigUint64Array,v13];
[3272,Float64Array,89];
const v17 = new Map();
-2 / -2;
let v22 = -1000000000000.0;
v22++;
-3.2247449234850395e+307 != 591114.0785999324;
let v27 = undefined;
const o35 = {
    ...v17,
    ...v17,
    __proto__: v17,
    [24560](a29, a30, a31) {
        super[591114.0785999324];
        v27 = Map;
    },
};
v27 = o35;
[v17];
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    v40[6] = v40;
    const v43 = new Date();
    const v44 = v43?.setFullYear;
    let v45;
    try { v45 = new v44(v5, v6, this); } catch (e) {}
    const o47 = {
    };
    o47.h = o47;
    o47.e = 9223372036854775807;
    Array.prototype = Array;
    const v49 = v45(v45);
    try { v49.push(v12); } catch (e) {}
    for (const v51 of v49) {
    }
    const v52 = [v49,v49,v14,v49,v49];
    const v54 = new BigUint64Array();
    256 << 256;
    [];
    for (let v58 = 0; v58 < 50; v58++) {
    }
    const v59 = [v52,v52,v52];
    try { v59.slice(v54, v49); } catch (e) {}
    [v59] >= Uint16Array;
}
new F38();
const v65 = new F38();
v65.d = v65;
