new Float64Array(1186);
let v3 = 3401;
new Int16Array(v3);
let v7 = Int32Array;
const v8 = new v7(596);
const v11 = new Float64Array(4096);
let v12 = 16;
let v13;
try { v13 = v7(v11, v3); } catch (e) {}
({"byteLength":v7,"byteOffset":v12,"length":v3,...v13} = v8);
new Uint8ClampedArray(v12);
new Uint8ClampedArray(4);
const v22 = [];
function f23() {
    const o25 = {
        p() {
            return f23;
        },
        [v22]: v22,
        "a": v22,
    };
    return v22;
}
const v26 = f23();
const v27 = f23();
const v28 = f23();
v28.valueOf = f23;
[65536];
let v30 = [-267,-4,-32045,-4];
[14,268435441,-9223372036854775807];
const v34 = new Float64Array(14);
const v37 = new Uint8ClampedArray(0);
const v40 = new BigInt64Array(218);
let v41;
try { v41 = v40.sort(f23); } catch (e) {}
try { v41(v27, v41, v41, ...v37, v26, ...v26); } catch (e) {}
const v43 = (a44, a45) => {
    return v28 * a45;
};
[v30] = v34;
new Int16Array(v12);
const v49 = Symbol.iterator;
new Int8Array();
class C52 extends v11 {
}
new C52();
const o62 = {
    [v49]() {
        let v55 = 10;
        const o61 = {
            next() {
                v55--;
                const v59 = v55 == 0;
                const o60 = {
                    "done": v59,
                    "value": v55,
                };
                return o60;
            },
        };
        return o61;
    },
};
