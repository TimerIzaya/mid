class C3 {
    constructor(a5, a6) {
        const v7 = this.nSCjJ;
        const v8 = a5 + a5;
        super.a = "nP7";
        const v9 = delete a5?.b;
        const v10 = v9 && v9;
        try { a6.m(v7, this, v10, "nP7"); } catch (e) {}
        Reflect.construct(C3, [14212,"nSCjJ","nP7","nSCjJ"], v10);
        let v18;
        try { v18 = ("nP7").trim(); } catch (e) {}
        try { v18.strike(); } catch (e) {}
        function f20(a21, a22) {
            const o23 = {
            };
            try {
                o23.g = a6;
            } catch(e24) {
            }
            try {
                const o25 = {
                };
                o25.g = a6;
                o25.d = C3;
            } catch(e26) {
            }
            try {
                const o27 = {
                };
                o27.g = a6;
                o27.d = C3;
                o27.e = C3;
            } catch(e28) {
            }
            try {
                const o29 = {
                };
                o29.g = a6;
                o29.d = C3;
                o29.f = v8;
            } catch(e30) {
            }
            try { a21(v9); } catch (e) {}
            try { a22.call(a6); } catch (e) {}
            try { a6(v18, a22, this, v9, "nP7"); } catch (e) {}
            "nSCjJ" & a6;
        }
        Promise.name;
        new Promise(f20);
    }
    static #e;
    static 10 = 14212;
    ["nSCjJ"] = "nP7";
    static [14212] = "nP7";
}
C3[14212] = C3;
const v38 = new C3(14212, C3);
let v39 = v38 ** "nSCjJ";
v39 = 14212;
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = "nSCjJ";
    } catch(e46) {
    }
    try {
        this.b = a42;
    } catch(e47) {
    }
    try {
        this.c = a43;
    } catch(e48) {
    }
}
const v49 = new F40("nSCjJ", "nSCjJ", 14212, "nSCjJ");
const v50 = new F40(v39, v49, v38, v49);
const v51 = new F40(v39, v50, v50, v39);
const v52 = new C3(v38, "nP7");
const v53 = new C3(14212, v52);
const v54 = [1427518108,-243880489,-7798];
const v55 = [46989,64996];
const v56 = [41910,-701060414];
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this?.__defineSetter__;
    try { new v62(F57, F57); } catch (e) {}
    a60[1] = a60;
    try {
        this.a = C3;
    } catch(e64) {
    }
}
let v65 = 0;
while (v65 < 1) {
    let v68;
    try { v68 = v51(v39, v53, C3); } catch (e) {}
    try { new v68("nSCjJ", F57, v68); } catch (e) {}
    v65++;
}
const v71 = new F57(v53, v55, 14212);
const v72 = new F57(v53, v54, F57);
const v73 = new F57(v55, v56, 14212);
const o74 = {
    __proto__: v49,
    "f": v54,
};
let v79 = +v38;
const v80 = --v79;
v80 | v79;
Math.atan2(v79, v49);
v79 + v80;
Math.sin(65536);
-573.5216699373575 + v79;
v73.a = v73;
function f86(a87, a88, a89) {
    const v90 = a88?.a;
    try { new v90(v56, v52); } catch (e) {}
    const v92 = a89?.constructor;
    try { new v92(a88, v53, v55); } catch (e) {}
    const o100 = {
        [v72]: v55,
        "a": a89,
        "e": v71,
        [a87]: F57,
        268435441: v65,
        "d": a89,
        __proto__: v55,
        ...a88,
        "c": v56,
        ...v73,
        "h": v38,
        "d": v38,
        1073741824: a87,
        9: v54,
        o(a95, a96, a97, a98) {
            try {
                a95.toString = a87;
            } catch(e99) {
            }
            a96 = a95;
            return v72;
        },
    };
    o100[1073741824];
    return o100;
}
f86(C3, f86(v52, v72, v73), v54);
f86(v53, v72, v38);
const v106 = [Float32Array];
try { v106.values(); } catch (e) {}
v106["concat"]().includes(Float32Array);
