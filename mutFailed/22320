function f0() {
}
f0.toString = f0;
const v1 = [f0];
const v2 = [v1,f0,v1,f0,f0];
function f3() {
    return ("h").split(65535);
}
v2.toString = f3;
let v7 = [v1];
function f8(a9) {
    a9.e = a9;
    const o17 = {
        "f": v1,
        [a9](a11) {
            v7 = a11;
            try { new a9(v1, f0, v1); } catch (e) {}
            v1 ^ v7;
            [-3.2399370961647778,1.7976931348623157e+308,-2.220446049250313e-16,1.521135091118853e+308,1.0,-1.7358397430598513e+308,0.0708422145821106,0.0];
            [1e-15,-211.21765807276938,-1.191226731707072e+308,984257.604518705,-1000000000.0];
            [Infinity,872.7291708873984];
            return v7;
        },
    };
    o17[Symbol.toPrimitive] = f0;
    return o17;
}
const v20 = f8(f8);
v20.g = v7;
v20.g = v20;
const v21 = f8(v2);
function f22() {
    function f23() {
        const v26 = new Uint8Array(512);
        return v26;
    }
    return f23;
}
Object.defineProperty(v21, "toString", { configurable: true, get: f22 });
const v27 = f8(v21);
v27.f = v27;
const v31 = [];
Object.defineProperty(v31, "e", { configurable: true, value: v20 });
function f32() {
    const o33 = {
        ...v31,
        "c": v31,
        "e": v31,
        "f": v31,
        "arguments": v31,
        __proto__: f32,
    };
    v31.e = o33;
    65537 !== 65537;
    const v37 = 65537 == 4096n;
    v37 && v37;
    const v41 = new Int32Array(1024);
    for (const v42 of v41) {
        v42 != v42;
        const o46 = {
            "maxByteLength": 1293466293,
        };
        let v47 = 1796;
        v47--;
        const v49 = new SharedArrayBuffer(v47, o46);
        const v50 = v49?.constructor;
        try { new v50(v47); } catch (e) {}
    }
    return v31;
}
const v52 = f32();
try { v52.findIndex(v7); } catch (e) {}
f32();
f32();
