3618 < 3618;
Int32Array.name;
new Int32Array(3618);
222 & 222;
const v11 = new Uint8Array(222);
function f12(a13, a14, a15, a16) {
    a13.arguments;
    a14++;
    -a15;
    const o20 = {
    };
    o20.g = o20;
    let v21 = o20.__proto__;
    const v22 = v21.__lookupSetter__;
    v22.length;
    const v24 = v22.length;
    v24 - v24;
    a13 *= 222;
    v21 = Int32Array;
    const t16 = "J";
    t16[0] = "J";
    try { new Uint8ClampedArray(3618, Uint8Array, 3618); } catch (e) {}
    const v32 = new Uint8ClampedArray(v21);
    const v33 = v32.length;
    const v35 = ("stack").normalize();
    v35[1] = v35;
    async function f36(a37, a38, a39, a40) {
        Object.defineProperty(v35, 0, { enumerable: true, value: v33 });
        return f36;
    }
    const v41 = f36();
    try { v41.then(Int32Array, Uint8Array); } catch (e) {}
    return "stack";
}
f12.length = f12;
const v43 = f12(f12, 222, 222, f12);
let v44 = 0;
v44--;
new Uint16Array(v44);
/rM9a\bc/gu;
const v49 = /34?/gvdsy;
let v50 = 8;
v50--;
const v53 = new Int32Array(v50);
v53[3] = 9007199254740991;
/vNf\xed\xa0\x80+/gvdim;
const v56 = [0.09625845130830724,-1e-15,0.40226168662621953];
class C57 {
}
function f58() {
    switch (v50) {
        case Uint16Array:
            Object.defineProperty(v49, 9, { writable: true, value: f12 });
            break;
    }
    const v60 = new Set();
    v60.add(v60);
    return v60;
}
%PrepareFunctionForOptimization(f58);
const v62 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const v63 = [-1.7976931348623157e+308,585278.7631767453,-1.0,-2.0];
4294967297 * 4294967297;
-9007199254740991 + -9007199254740991;
const v71 = Array();
const v72 = v71?.__defineSetter__;
try { new v72(-298.2556141350874, -298.2556141350874); } catch (e) {}
function f74(a75, a76, a77, a78) {
    a78 * a78;
    const o96 = {
        [-9007199254740991]: 512,
        [v11](a81, a82, a83, a84) {
            v43 < a81;
        },
        m(a87) {
            const v90 = Int8Array();
            let v91 = 3;
            let v92 = 0;
            v92 >> v92;
            [...v91] = v90;
            v92++;
            return 1;
        },
        [a77]: v62,
        ...v71,
        "e": v71,
        "b": a75,
    };
}
f74(4294967297, f74, 4294967297, 2124);
f74(2124, v63, v56, v63);
new Uint16Array(52);
const v104 = new Uint32Array(2128);
try { v104.values(); } catch (e) {}
for (let v106 = 0; v106 < 100; v106++) {
    f74(512, v104, v104, v71);
}
for (let v108 = 0; v108 < 32; v108++) {
}
