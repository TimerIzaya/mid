const v2 = new Array(128);
function f5(a6) {
    return a6;
}
class C7 extends f5 {
}
new C7();
new Int32Array(12);
const v11 = [601759695];
const v12 = [1073741824,1073741823,1376142744,1073741825];
try { v12["find"](..."find", v2, ...v11); } catch (e) {}
function F15() {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F15();
function f18(a19, a20) {
    const o27 = {
        [a20](a22, a23, a24) {
        },
        set h(a26) {
        },
        "h": v17,
    };
    return F15;
}
function F29() {
    if (!new.target) { throw 'must be called with new'; }
}
if (([0.7021385356541069,NaN,3.752300846891645,76.93522341476432,-277.4575758719999,9.404843788357361,-320.7110241266939])[Symbol.hasInstance]) {
}
new BigUint64Array(1573);
new Uint8ClampedArray(Array);
function f43(a44, a45) {
    const o46 = {
        [a44]: a45,
        65536: a45,
    };
    return f43;
}
f43("-354330605");
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    ~a51;
    a53 | a53;
    const v56 = this.constructor;
    const v57 = new v56();
    class C58 extends v56 {
        [v57];
    }
    const v59 = new C58();
    v59.propertyIsEnumerable(v59);
    try {
    const t0 = "unicode";
    new t0();
    } catch (e) {}
    typeof Float32Array;
}
new F48();
new F48();
