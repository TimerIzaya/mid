try { new Uint32Array(63403, -31685, 186); } catch (e) {}
new Uint32Array(186);
const v8 = new Date(127);
try { v8.setFullYear(63403, 186, 127); } catch (e) {}
let v12 = -1975175415;
v12++;
const v16 = [64,-9007199254740990,-1,-65536,6];
-(-1);
-1 in [-1];
Uint16Array[Symbol.toPrimitive] = Date;
let v24 = 2;
v24--;
const v27 = new Int16Array(v24);
v27.toString = Date;
new Uint16Array(v27);
let v29 = [-1458459670,13,7,-49774,4096,0];
v29.valueOf = Date;
Math.asin();
function f33() {
    return -172798652;
}
const v34 = [1464516016,-1,1148126926,32368,1073741824,10];
function f35() {
    return v16;
}
const v36 = f35?.constructor;
try { new v36(v29); } catch (e) {}
class C38 extends f35 {
    static {
        function f40(a41) {
            const v42 = this;
            try {
                v42.__proto__ = v42;
            } catch(e43) {
            }
            return v42;
        }
        this[Symbol.toPrimitive] = f40;
        this.name;
        v29 >>= this;
        !v34;
        let v51 = +255;
        +268435439;
        268435439 * -172798652;
        Math.max(+268435439);
        const v56 = v51++;
        v56 + v56;
    }
    static [5] = v29;
}
const v58 = new C38();
try { v58.copyWithin(Uint16Array, v27); } catch (e) {}
new C38();
new C38();
12 != 12;
BigInt64Array.g = BigInt64Array;
BigInt64Array.g = BigInt64Array;
const v65 = new BigInt64Array(v29);
const o67 = {
    "c": v58,
    "maxByteLength": v12,
    "arguments": v34,
    get h() {
        return v16;
    },
    ...v65,
};
for (const v69 in "5amlK") {
    try { v69.padEnd(f33); } catch (e) {}
    const v71 = ("5amlK")[v69];
    try { v71.toWellFormed(); } catch (e) {}
}
let v73 = -2.2250738585072014e-308;
v73 **= 8.769817198994687e+307;
