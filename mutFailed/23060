function f0() {
    try { ("n").fontcolor("n"); } catch (e) {}
    const t2 = "n";
    t2[0] = "n";
    const o11 = {
        p(a6, a7) {
            try {
                ("n").search(/W\11(jHB)/iy);
            } catch(e10) {
            }
            return 65537;
        },
        ["n"]: 12,
        "h": 65537,
        [65537]: "n",
        ..."n",
    };
    o11[65537] = o11;
    return o11;
}
const v12 = f0();
const v13 = v12();
const v14 = f0();
const v15 = v14[65537];
const v17 = new WeakSet();
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = v13?.constructor;
    try { new v23(WeakSet, v13, v12); } catch (e) {}
    let v25;
    try { v25 = this.propertyIsEnumerable(v17); } catch (e) {}
    v25 && v25;
    let v27;
    try { v27 = a21.isPrototypeOf(this); } catch (e) {}
    v27 && v27;
    try {
        this.h = v14;
    } catch(e29) {
    }
    try {
        this.a = f0;
    } catch(e30) {
    }
}
const v31 = new F18(v12, v13, v13);
const v32 = v31?.constructor;
try { new v32(v15, v15, v14); } catch (e) {}
const v34 = new F18(v31, v12, v12);
try { v34.a(); } catch (e) {}
const v36 = new F18(v34, v14, v14);
let v38;
try { v38 = ("symbol").strike(); } catch (e) {}
try { v38.substring(v36, v36); } catch (e) {}
let v41;
try { v41 = ("262683873").split("symbol", f0); } catch (e) {}
try { v41.flatMap(v41); } catch (e) {}
for (let v44 = 0; v44 < 5; v44++) {
    function f45() {
        class C46 {
        }
        const v47 = new C46();
        const v48 = v47?.constructor;
        try { new v48(); } catch (e) {}
        const v50 = v47?.constructor;
        let v51;
        try { v51 = new v50(); } catch (e) {}
        const v52 = v51?.constructor;
        try { new v52(); } catch (e) {}
        let v54;
        try { v54 = v47.isPrototypeOf(v47); } catch (e) {}
        v54 || v54;
        return v47;
    }
    const v57 = f45()?.constructor;
    let v58;
    try { v58 = new v57(); } catch (e) {}
    const v59 = v58?.constructor;
    try { new v59(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f45);
}
