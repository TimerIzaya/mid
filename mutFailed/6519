class C3 {
    #m(a5, a6) {
        function f7(a8, a9, a10) {
            function f12(a13) {
                const o14 = {
                };
                new Proxy(this, o14);
            }
            this.onmessage = f12;
            const t9 = 0;
            new t9(a10);
        }
        const v22 = [Worker,"function",f7];
        const o23 = {
            "arguments": v22,
            "type": "function",
        };
        new Worker(f7, o23);
        return 1332501965;
    }
}
const v25 = new C3();
const v26 = new C3();
const v27 = new C3();
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a31;
    } catch(e32) {
    }
    try {
        this.d = v25;
    } catch(e33) {
    }
}
const v34 = new F28(C3, C3);
const v35 = new F28(v34, v27);
new F28(v27, v35);
class C43 {
}
class C44 {
}
const v45 = new v26();
function f47(a48, a49, a50, a51) {
    const v52 = a49 >>> a49;
    const v53 = v52 >>> v52;
    v53 != v53;
    for (let v55 = 0; v55 < 5; v55++) {
        try { new C43(v45, v55, Float32Array, ...v55, a49); } catch (e) {}
    }
    const v58 = Math.max(a49);
    v58 - v58;
    return v53;
}
for (let v60 = 0; v60 < 5; v60++) {
    f47(v60, v60);
}
%OptimizeFunctionOnNextCall(268435439n);
f47();
