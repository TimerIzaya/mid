class C3 {
}
try { C3.m(); } catch (e) {}
const o5 = {
};
class C6 {
    static {
        class C9 {
        }
        const v10 = new C9();
        [-2099226038,1000000000.0,v10,Array];
        this[Symbol.hasInstance];
    }
    static #a;
    #a;
    static {
        try {
            this.#d;
        } catch(e19) {
        }
    }
    [10000];
    constructor(a21, a22) {
        class C24 {
        }
        const o25 = {
            __proto__: o5,
        };
        o25[4294967295n] >>= C24;
        let v26 = 0;
        "ex7" <= Uint8ClampedArray;
        Math.atan(Math);
        while ((() => {
                new Int8Array(BigUint64Array);
                function F35(a37, a38, a39) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                return v26 < 1;
            })()) {
            const v46 = this / 2034317496;
            -(-5.0);
            Math.log1p(v46);
            Math.log10(536870889);
            +-5.0;
            Math.round(536870889);
            v26++;
        }
    }
}
const v53 = new C6(C6, 7);
const v54 = new C6(10000, v53);
new C6(7, v54);
[-0.5376467243390834];
const v60 = new BigUint64Array(512);
const v62 = new Int16Array();
v60.includes(v62);
[1.7976931348623157e+308,-1000.0,2.2250738585072014e-308,-1000000.0,-299.5725999197016,9.413413444666187e+307,NaN,-1e-15];
[4.0,-0.8494768387315688,2.220446049250313e-16,2.0,-1000000000.0,8.28879211403786,9.314211663266785e+307,0.8595857984014096,-2.2250738585072014e-308,74.14641008640729];
const v72 = Array(4);
function f73(a74, a75) {
    return f73;
}
const v78 = [v72];
const v81 = new Float64Array(129);
let v82;
try { v82 = v81.entries(); } catch (e) {}
try { v82.next(); } catch (e) {}
const o84 = {
    "arguments": v78,
    "type": "function",
};
new Worker(f73, o84);
const v88 = new Uint8ClampedArray(303);
Object.defineProperty(v88, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
