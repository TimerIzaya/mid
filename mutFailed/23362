const v0 = [-5.0];
const v1 = [5.0,0.9519366728994569,-1.7976931348623157e+308,1000000.0,205.78203433122576,0.7450611962137168,-1000000000000.0,9.449104144624599,0.7086423303207755];
const v2 = [2.2254443548217395,234336.67725830083,0.14606804397997897,1e-15,-872255.715073961,1e-15];
const v7 = new Set();
class C8 extends Set {
    constructor(a10, a11) {
        super(v0);
        const o12 = {
            __proto__: v2,
            "e": Set,
            [v7]: -65537n,
            "c": a10,
            /*
            __proto__: a11,
            */
            ...a11,
        };
    }
    static e = v1;
    static c = Set;
    n(a14, a15) {
    }
    static {
        super.b = this;
        let {...v17} = this;
    }
}
const v18 = new C8(v1, -65537n);
new C8(v1, -65537n);
this[256] = BigUint64Array;
try { Set(); } catch (e) {}
const v24 = new C8(v0, -2186n);
function F25() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 1073741825;
}
const v28 = new F25();
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
}
const v33 = new F29(v28, F29);
const v37 = ("getPrototypeOf").blink();
const v38 = v37[28];
const v39 = BigUint64Array.replace(19793, v33);
let v40;
try { v40 = new v24(); } catch (e) {}
try { v40.propertyIsEnumerable(v39); } catch (e) {}
const v42 = v40?.constructor;
try { v42.call(v38); } catch (e) {}
try { new v42(v37, v18, 4); } catch (e) {}
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F45();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e50) {
    }
}
new BigUint64Array(10);
function f56() {
    const v58 = ("c").toLowerCase();
    const v59 = 19793 << v58;
    v59 & v59;
    return v58;
}
for (let v61 = 0; v61 < 10; v61++) {
    const t67 = "-4294967296";
    t67[Symbol.match] = 5.0;
}
new F45();
new F45();
new SharedArrayBuffer(4096);
const v69 = [];
function f70(a71, a72) {
    class C73 {
    }
}
v69.constructor = f70;
v69["concat"]();
