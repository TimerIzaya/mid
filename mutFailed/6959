const v2 = new Float64Array(1000);
let v3 = 1024;
const v4 = v3--;
Uint32Array[1] = v2;
try { new Uint32Array(Uint32Array, v3, Float64Array); } catch (e) {}
Uint32Array.prototype = Uint32Array;
const v7 = new Uint32Array(v3);
new Uint16Array(10);
const v12 = [268435456,-12,1073741825,-9007199254740990,-1024,10000,512,-3];
const v14 = new Int8Array();
const v15 = v14.constructor;
v15.name = v15;
const v16 = new v15(v12);
v16[7] = v16;
let v18 = new Int32Array(13);
try { v18.join(1000); } catch (e) {}
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    this.length = v4;
    a23 - a23;
    a24 + a24;
    a22++;
    a23 - a23;
    try {
        this.h = 13;
        function f30() {
            function f31() {
                [127,4294967296];
                [536870887,-374928749,0,5,3,4,-1347119336,256,-15];
                [16];
                return v4;
            }
            return f31;
        }
        function f35(a36) {
            Object.defineProperty([], "h", { configurable: true, enumerable: true, set: Date });
        }
        Object.defineProperty(Math, Symbol.toPrimitive, { get: f30, set: f35 });
        Date.valueOf = Date;
        let v42;
        try { v42 = Date.now(); } catch (e) {}
        v42 >> v42;
        const v44 = new Date(Math);
        const v45 = v44?.getUTCDate;
        try { new v45(); } catch (e) {}
        (2136873598).constructor;
    } catch(e49) {
    }
    try {
        this.b = v7;
    } catch(e50) {
    }
    try { ("major").fontsize(v16); } catch (e) {}
    const o55 = {
        "execution": "async",
        "type": "major",
        [v12]: v18,
        __proto__: a23,
        "b": 1000,
        ...v7,
        "g": v14,
    };
    o55[872];
    o55.a = o55;
    const v57 = -719.6662441520621 !== o55;
    v57 && v57;
    v57 ? -719.6662441520621 : o55;
}
F20.arguments = F20;
new F20(1000, 1000, 13);
const v61 = new F20(1000, 13, 13);
v61.b = v61;
const v64 = ([-8n]).toLocaleString();
let v66;
try { v66 = ("m").trimStart(); } catch (e) {}
v66 == v66;
class C68 {
}
try { C68.call(v2); } catch (e) {}
const v70 = new C68();
const v71 = new C68();
function f72(a73, a74) {
    const v75 = [1.9600488149280893e+306,468.9269702772963];
    ([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(...v75);
    return v15;
}
v71.valueOf = f72;
const v78 = v71?.__defineGetter__;
try { new v78(C68, C68); } catch (e) {}
try { v71.valueOf(); } catch (e) {}
for (const v81 in v71) {
    const t91 = Int32Array();
    t91[3] = 9007199254740991;
    v70.p("m");
}
let v86 = new F20(1000, 13, v3);
v86.e = v86;
let v87 = 98;
const v88 = v87--;
v88 >>> v88;
BigInt64Array.name;
new BigInt64Array(v87);
8 >>> 8;
try { Float64Array(v87, Uint16Array, Uint16Array); } catch (e) {}
const v97 = new Float64Array(8);
function f98(a99, a100) {
}
let v102 = -1;
const o111 = {
    ["m"](a104, a105, a106, a107) {
        [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
    },
    "a": "m",
    set b(a110) {
        v102 <<= v102;
    },
};
-4;
new Float64Array(C68);
let v115;
try { v115 = new v15(v61, 1000, C68, v3, Uint16Array); } catch (e) {}
function f116(a117) {
    [9007199254740991,2,15,1985253492,129,127,-65535,4,15];
    [1402427263,-60795,-12,10000];
    [268435439,60017,536870889];
    return a117;
}
v115.valueOf = f116;
try { v115.subarray(v115, Uint16Array); } catch (e) {}
const v122 = typeof Uint32Array;
v122[3];
v122 === "object";
const v126 = [10000];
let v127 = ("m").__proto__;
[v127,v86,v18] = "m";
v64[v14];
try { v86(v70, v15, o111); } catch (e) {}
let v133;
try { v133 = v126.toString(); } catch (e) {}
const v135 = new Float32Array(v126);
try { v135.some(v88); } catch (e) {}
Date.toString = Date;
try { new Date(Uint16Array, Uint16Array, v133, Uint16Array, Uint16Array, Date, Date); } catch (e) {}
Date.parse(v126);
try { BigInt64Array.from(1n); } catch (e) {}
new BigInt64Array(4);
try { new Uint16Array(1n, 1n, Uint16Array); } catch (e) {}
const v147 = Uint16Array.length;
v147 / v147;
new Uint16Array(257, 58091);
const v150 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
-2.0 - -2.0;
-2.0 + -2.0;
Math.log1p(-2.0);
4 >> 4;
const v159 = Uint8ClampedArray.name;
try { v159.isWellFormed(); } catch (e) {}
const v161 = new Uint8ClampedArray(4);
try { v161.slice("object", v161); } catch (e) {}
Int8Array.name = Int8Array;
const v164 = new Int8Array(v161);
const v165 = v164?.constructor;
try { new v165(v12, Float64Array, v97); } catch (e) {}
const v169 = v150["findIndex"](gc);
v169 + v169;
v169 - v169;
