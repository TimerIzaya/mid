class C3 {
    static set b(a5) {
        super.g *= a5;
        [9,-9007199254740990,256,2065399794];
        [-488325438,9007199254740992,-2,402178753,19402495];
        [23812,2147483649,-7761,13,536870887,2147483648,4096,-1741711346];
    }
    static get a() {
        let v10;
        try {
        const t0 = -4;
        v10 = new t0(-4, 2147483648);
        } catch (e) {}
        function f11(a12) {
            let v13;
            try { v13 = this.valueOf(2147483648, a12, v10, this); } catch (e) {}
            v13[45] &= 2147483648;
            a12 += -4;
            return 2147483648;
        }
        return f11(2147483648);
    }
}
new C3();
new C3();
new C3();
[-216140.2054118677,-727563.6020025802,1000.0,5.953022119720803,-0.0,2.0,-1.102909869976442e+308,-470444.68240127095,-649.4224325425898,Infinity];
[7.57125960452948,1000000000000.0,-1.7976931348623157e+308,7.263662152827505e+307];
[1.227253016925315e+308,1000.0];
new Array(7);
let v33 = -44949;
v33--;
const v35 = Array < Int32Array;
const o39 = {
    n(a37, a38) {
        return v35;
    },
};
function f44() {
}
function f45() {
    const o95 = {
        valueOf() {
            /(?:a*)+q(?<a>.)/guds["exec"]("exec");
            function f51(a52, a53) {
                ("exec").startsWith(0);
                return "exec";
            }
            f51();
            const v58 = "exec" << "toUpperCase";
            v58 ^ v58;
            class C60 {
                constructor(a62, a63) {
                    return;
                }
            }
            try {
                for (let v69 = 0; v69 < 10; v69++) {
                    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                        length | length;
                    }
                    [1000.0,1000n];
                    const v79 = 1922 % 1922;
                    const v80 = v79 == v79;
                    const v81 = f44.constructor;
                    v81();
                    v81 * v80;
                    function F85(a87) {
                        if (!new.target) { throw 'must be called with new'; }
                        this.b;
                    }
                    const o92 = {
                        toString() {
                            super[this];
                        },
                        n() {
                        },
                    };
                    new F85();
                }
                this.valueOf = f44;
            } catch(e94) {
            }
        },
    };
    return o95;
}
const v96 = f45();
const v102 = f45();
const v105 = new Uint16Array(129);
v105.indexOf(129);
const v110 = new Int32Array(245);
new Float32Array(v110);
function F112(a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
    a114.valueOf();
    Int32Array.name;
    127 << 127;
    this.write();
    const v122 = this.constructor;
    try { new v122(a114); } catch (e) {}
}
new F112(v102);
new F112(v96);
