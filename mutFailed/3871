const v1 = new Map();
new BigUint64Array(4096);
256 | 256;
new BigUint64Array(256);
let v11;
try { v11 = Float32Array.from(v1); } catch (e) {}
new Float32Array(0);
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    a16 + a16;
    const v19 = a17 + a17;
    try {
        this.c = 4096;
    } catch(e20) {
    }
    class C22 {
        static #d;
        set b(a24) {
            Symbol.search;
        }
        static ["Xkz0W"] = "Xkz0W";
        8;
        d;
    }
    const v27 = new C22();
    const v28 = new C22();
    let v29 = new C22();
    ({"size":v29,} = v1);
    a15.__proto__;
    Object.defineProperty(v11, -1, { value: BigUint64Array });
    const o31 = {
    };
    try {
        o31.f = a16;
    } catch(e32) {
    }
    try {
        const o33 = {
        };
        o33.f = a16;
        o33.a = a15;
    } catch(e34) {
    }
    try {
        const o35 = {
        };
        o35.f = a16;
        o35.a = a15;
        o35.d = Float32Array;
    } catch(e36) {
    }
    try {
        const o37 = {
        };
        o37.f = a16;
        o37.a = a15;
        o37.d = v19;
    } catch(e38) {
    }
    class C39 extends C22 {
        n(a41, a42) {
            v29[10] = v27;
            SharedArrayBuffer();
            Float64Array(10);
        }
    }
    new C39();
    new C39();
    new C39();
    const v51 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
    try { v51(v28); } catch (e) {}
}
const v53 = new F13(0, 4096, 256);
const v54 = new F13(4096, 0, v53);
new F13(256, 4096, v54);
Int16Array.f = Int16Array;
const v58 = new Int16Array(12);
const v59 = v58.fill();
try { v59.filter(BigUint64Array); } catch (e) {}
