let v0 = [-5.194536688656797,-942915.4709141054,1.5961229676928507e+308,3.53014191024963e+307,-0.7291706907051481,-6.6554576510345775];
const v1 = [2.220446049250313e-16,-1000000000000.0,4.0,5.027414554195024,1000000000.0,1000000000000.0,-164.449106173024,-1000000000000.0,2.2250738585072014e-308,-9.810613728419163];
const v2 = [1000000000.0,1.0,NaN,-2.0,-1000000000.0,Infinity,1000000000000.0,1.4812054188991517e+308,876507.739292199,-0.0];
function f6(a7, a8, a9) {
    const o37 = {
        [a7](a11, a12, a13) {
            a12[0];
            v0 = a12;
            return a12;
        },
        [v2]: 3.0,
        [a7]: 3.0,
        9: -5.0,
        get d() {
            const v17 = new Float32Array(Float32Array);
            for (let v18 = 0; v18 < 25; v18++) {
                function f19(a20, a21, a22, a23) {
                    a20[1];
                    for (let v26 = 0; v26 < 5; v26++) {
                    }
                    const v28 = arguments.__lookupGetter__;
                    try { v28.constructor(); } catch (e) {}
                }
                for (let v30 = 0; v30 < 10; v30++) {
                    f19(v17);
                }
            }
            const v32 = a7[this];
            this[v0] = v32;
            try {
                this.fuck(-2147483649, [-2147483649,v32,a7,this,v2]);
            } catch(e36) {
            }
            return -5.0;
        },
    };
    return o37;
}
f6(v2, -5.0, 1000000000000.0);
const t38 = f6(v2, -5.0, -5.0);
t38(v1, -5.0, 3.0);
new BigInt64Array(210);
new Int8Array(257);
new Uint32Array(1000);
let v53;
try { v53 = ("function")["-268435456"](); } catch (e) {}
const v54 = v53 + v53;
v54 >> v54;
class C58 {
    static p(a60) {
    }
}
let v64;
try { v64 = new C58(); } catch (e) {}
const v65 = v0.constructor;
let v66;
try { v66 = v65(); } catch (e) {}
const v67 = new C58();
v67.propertyIsEnumerable;
const v69 = new C58();
const t60 = v69.constructor;
new t60();
try { v69.constructor(); } catch (e) {}
const v73 = new C58();
const v74 = v73.constructor;
let v75;
try { v75 = new v74(); } catch (e) {}
const v76 = v75?.__defineGetter__;
try { new v76("toStringTag", "toStringTag"); } catch (e) {}
const t69 = v75?.constructor;
new t69();
const v80 = new C58();
v80.constructor;
v80.__defineGetter__;
function F83(a85, a86, a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    const v89 = this?.constructor;
    try { new v89(a85, a85); } catch (e) {}
    try { a86.isPrototypeOf(C58); } catch (e) {}
}
const v92 = F83?.bind;
try { v92(); } catch (e) {}
new F83("toStringTag", v73);
new v66(v69, "flags");
const v96 = new F83("HkAXC", "toStringTag", "toStringTag", "HkAXC");
let v99 = -128 % -128;
v99++;
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v102 = [601759695];
const v103 = [1073741824,1073741823,1376142744,1073741825];
function f105(a106, a107, a108, a109) {
    function f111() {
        const o126 = {
            [522675525n](a114, a115) {
                Int16Array[0] = -27833;
            },
            get d() {
                return this;
            },
            "maxByteLength": -128,
            "c": v64,
            valueOf(a120, a121) {
            },
            toString(a123, a124, a125) {
            },
        };
        o126.toString(v96, v96, v96);
    }
    f111();
    const v130 = new Int8Array();
    v130.buffer;
    %OptimizeFunctionOnNextCall(f111);
    let v133;
    try { v133 = v103["find"]("find", a109, v102, v103); } catch (e) {}
    v133 <= a108;
    return arguments;
}
try { f105("HkAXC", v102, "flags", "HkAXC"); } catch (e) {}
for (let v136 = 0; v136 < 5; v136++) {
    v136();
}
