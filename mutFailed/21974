const v8 = new Uint8Array(128);
v8[65] = v8;
new Uint8Array(64);
const v14 = new Uint8Array(1439);
v14.f = v14;
let v16 = 36213;
v16--;
const v21 = [1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691];
try { v21.map(v14); } catch (e) {}
v21.pop;
function f24() {
    const v25 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
    return v25.toLocaleString(f24, v25).search(f24);
}
const v28 = new Uint16Array(821);
v28[30] = v28;
let v29 = 10;
for (; v29--;) {
}
function f31() {
    return -65535;
}
-1024 >>> -1024;
new Uint8ClampedArray(11);
new BigUint64Array(1572);
Int8Array.name;
new Int8Array(4);
for (let [i82, i83] = (() => {
        function F46(a48, a49, a50, a51) {
            if (!new.target) { throw 'must be called with new'; }
            const v52 = this.constructor;
            try { new v52(); } catch (e) {}
            typeof Float32Array;
        }
        try { gc(); } catch (e) {}
        gc();
        class C61 {
            static {
                try { this.toString(); } catch (e) {}
                const v64 = this.name;
                v64[2] = v64;
                function F68(a70, a71) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v72 = this?.constructor;
                    try { new v72(0.29489550717955537, a70); } catch (e) {}
                    try { this.constructor(0.6822080711934364, this); } catch (e) {}
                    try {
                        this.f = 3.0;
                    } catch(e75) {
                    }
                }
                const v76 = F68?.constructor;
                try { new v76(3.0); } catch (e) {}
                const v79 = this.toString().lastIndexOf(v64);
                v79 !== v79;
            }
        }
        try { C61.call(F46); } catch (e) {}
        return [0, 10];
    })();
    i82 < i83;
    (() => {
        const v87 = i83--;
        v87 + v87;
    })()) {
    i83 & i83;
}
function f93() {
    try { Array.of(); } catch (e) {}
    const o96 = {
        "c": Array,
    };
    const v97 = o96.c;
    -9223372036854775808 & -9223372036854775808;
    const t72 = "e";
    t72[0] = "e";
    class C103 {
        constructor(a105, a106) {
            this.__proto__;
            try { a105.split(this, v8); } catch (e) {}
            function f109(a110, a111) {
                try { a111.toWellFormed(); } catch (e) {}
                return a111[3];
            }
            f109.prototype;
            const v115 = f109(a106, a105);
            try { v115.sub(); } catch (e) {}
            f109("e", "e");
            f109("wNzDt", a105);
        }
    }
    C103.name = C103;
    new C103("dotAll");
    const v120 = new v97();
    v120.forEach(Uint32Array);
    4087 - 4087;
    for (const v125 of Array(4087, Array, Array)) {
        function f126() {
            return o96;
        }
        v125.toString = f126;
    }
    const v128 = 256 < 256;
    !v128;
    function f130(a131) {
        return v128;
    }
    try { f130(v8); } catch (e) {}
}
function F133(a135, a136, a137, a138) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.__lookupSetter__(a137); } catch (e) {}
    268435439n + 268435439n;
    let v142 = 2105444095n;
    v142++;
    v142 >> v142;
    for (let v146 = 0; v146 < 100; v146++) {
        v146 >>> v146;
        const o151 = {
            6: undefined,
            [268435439n]: v142,
            __proto__: a137,
            "g": a137,
            "b": v146,
            "arguments": this,
            valueOf(a150) {
                return v146;
            },
        };
    }
    try { Math.ceil(-4294967296n); } catch (e) {}
}
const v154 = new F133();
const v155 = v154?.__defineGetter__;
try { new v155(1439, 1439); } catch (e) {}
%PrepareFunctionForOptimization(f93);
f93();
const v159 = 198 === 198;
v159 && v159;
v159 && v159;
try {
    ("number").repeat(506345303);
} catch(e165) {
    e165.b = e165;
}
class C168 {
    #g = 5483n;
    #e = 5483n;
    #d = 9n;
    c = 9n;
    8;
}
C168.d = C168;
const v169 = new C168();
v169[8] = v169;
%OptimizeFunctionOnNextCall(f93);
f93();
([]).push();
