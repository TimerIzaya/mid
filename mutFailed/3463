let v1 = 2.0;
function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -2.220446049250313e-16;
    } catch(e11) {
    }
    try {
        this.a = -11;
    } catch(e12) {
    }
}
new F6(-26.504487916908033, 4294967297, -2.220446049250313e-16);
new F6(-2.220446049250313e-16, 4294967297, -2.220446049250313e-16);
new F6(-26.504487916908033, 8, -26.504487916908033);
new Map();
let v21 = 15;
v21--;
new Int16Array(v21);
new Uint8ClampedArray(6);
new Int16Array(3699);
"2147483649" == "2147483649";
class C35 {
    static #p(a37) {
        function f38(a39) {
            return f38;
        }
        class C40 extends f38 {
            static [-1] = 8;
            static [a37];
            static 268435441;
        }
        const v41 = [];
        const v43 = /[a-zA-Z0-9]/gvisy;
        const v44 = /abc?/gvmy;
        v44[-2] ^= v43;
        v44.exec("Q8F");
        const t36 = "2147483649";
        t36[2078209647] = v41;
        return a37;
    }
    [0.028957958839558873];
    static {
        for (let v50 = 0; v50 < 32; v50++) {
        }
    }
    static 2147483648 = C35;
    static #g;
    #a;
}
function f52() {
    const o54 = {
    };
    return gc(C35);
}
C35[Symbol.toPrimitive] = f52;
try { C35(); } catch (e) {}
const v59 = new C35();
v59.constructor = f52;
let v61;
try { v61 = BigInt64Array(BigInt64Array); } catch (e) {}
function F63(a65) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a65;
}
const v66 = new F63(-2);
with (v66) {
    h = Uint16Array;
}
const v68 = v59?.constructor;
v68[Symbol.toPrimitive] = f52;
let v71;
try { v71 = new v68(); } catch (e) {}
const v72 = v71?.constructor;
try { new v72(); } catch (e) {}
const v74 = new C35();
let v75;
try { v75 = v74.propertyIsEnumerable(v68); } catch (e) {}
!v75;
new C35();
/[\11]/gm.flags;
/(?:a*)*/gudm;
const v81 = /a(?!bbb|bb)c/vi;
v81.toString = Symbol;
const v82 = v81?.toString;
try { new v82(); } catch (e) {}
[4096];
const o89 = {
    "execution": "async",
    "type": "minor",
};
~117;
Uint16Array[0] = v68;
const v92 = new Uint16Array(Uint16Array);
let v93 = v92[1];
v93--;
Int32Array.name;
new Int32Array(31);
let v101;
try { v101 = Uint32Array.toString(); } catch (e) {}
try { v101.small(); } catch (e) {}
new Uint32Array(128);
v61[72];
function f105() {
    3.4890473589784586e+307 > 3.4890473589784586e+307;
    v1--;
    257828.6336153492 - 257828.6336153492;
    -4294967296 >> -4294967296;
    class C115 {
        static #m(a117) {
        }
        constructor(a119) {
            function f120() {
                return 9007199254740992;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f120 });
            const v121 = v101?.__defineSetter__;
            try { new v121(22227, 22227); } catch (e) {}
            new Float32Array();
            try { Uint16Array.apply(Uint16Array, "2147483649"); } catch (e) {}
            const v127 = new C115();
            const v128 = new Float32Array(v127, -4294967296, a119);
            v128.f = v128;
        }
    }
    const v129 = new C115(C115);
    v129.g = v129;
    const v130 = new C115(C115);
    v130.length = -4294967296;
    v130.length;
    const v132 = new C115(-4294967296);
    [257828.6336153492,v132,v129,v132,[v132,C115]];
    const v135 = [v132];
    class C136 extends C115 {
        [v129];
        #n(a138, a139, a140, a141) {
            function f142() {
            }
        }
    }
    C136.name = C136;
    const v143 = new C136();
    class C145 extends v135.constructor {
    }
    try { v143.m(v135); } catch (e) {}
    const o149 = {
        "e": C115,
        o(a148) {
        },
        ...1000000000000.0,
    };
    return Int32Array;
}
try { f105.bind(-7); } catch (e) {}
%PrepareFunctionForOptimization(f105);
f105();
f105();
%OptimizeFunctionOnNextCall(f105);
const v153 = f105();
v153.prototype = v153;
