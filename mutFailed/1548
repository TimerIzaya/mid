const o2 = {
};
const v5 = new Uint16Array(10);
v5.indexOf(3);
new BigUint64Array(3);
new Uint16Array(15);
function f14() {
    function f16(a17) {
        const v21 = 1073741824 ** 5;
        Math.clz32(2089625166);
        2089625166 >> v21;
    }
    this.onmessage = f16;
    Symbol.replace;
}
const o28 = {
    "type": "function",
};
new Worker(f14, o28);
const v30 = new Int32Array(1341);
class C32 {
}
const v33 = new C32();
const v34 = new C32();
function f35(a36, a37) {
    const v38 = [];
    try { v38.with(); } catch (e) {}
    const o47 = {
        [v30](a41, a42, a43) {
            super[-9223372036854775807];
        },
        set b(a46) {
        },
        [a37]: v33,
    };
    return a36;
}
f35(Uint16Array, v34);
const t37 = [1073741823,64,-192774235];
t37.length = 127;
for (let v53 = 0; v53 < 25; v53++) {
    v33["p" + "p"] = v53;
}
new Float64Array(1000);
("c").toUpperCase();
const v65 = [-1024];
for (let v66 = 0; v66 < 5; v66++) {
    delete v65[v66];
}
const t49 = 3;
const v70 = new t49();
function F71(a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
}
new F71(65536, "NapmW", v70);
const v80 = new Int16Array(12);
v80.fill();
