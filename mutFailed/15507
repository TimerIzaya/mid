const v3 = ["bigint","string"];
v3[1] = v3;
const v4 = ["global",v3,v3,"global"];
try { v4.includes("string"); } catch (e) {}
["bigint",v4,v3];
/mux\cA/is;
/[6(?<=a)+]/gudimsy;
/\cj\cJ\ci\cI\ck\cK/g;
function f14() {
    const v17 = Math.expm1("string");
    const v18 = Math.tanh("n");
    const o19 = {
        [v18]: v17,
    };
    return 3454;
}
const v20 = [1e-15,395833.8744809434,1000000.0,1.4833232607524508e+308,-597725.5054648793];
[-1000000000.0,0.007564657698543642];
[-1000000000000.0,-974369.4481080713,-487337.25578581466,-479.12403330333757,1.7976931348623157e+308,0.3293969077783455,-5.0,1000000000000.0,783.9936120328941];
try { ("127").trimStart(); } catch (e) {}
try { ("o").sub(); } catch (e) {}
try { ("yi").split(v3, "valueOf"); } catch (e) {}
[10,-1012881949];
const v30 = [11,-146405100,536870912,-65535,-9,-1042500765,9];
let v31;
try { v31 = v30.push(v20); } catch (e) {}
[-1,1108545007,-2,-536870912,24425,1397095361,-153132480];
"getUint32" == "getUint32";
const o39 = {
};
Map.prototype;
const v42 = /(x)(x)(x)\1/uis;
function f43(a44, a45, a46, a47) {
    const o54 = {
        4294967295: a44,
        [v42](a49, a50, a51, a52) {
            super.test();
        },
    };
    return a45;
}
new Uint32Array(54);
const v58 = new Uint16Array(129);
let v59 = 2;
v59--;
Uint8ClampedArray.length = Uint8ClampedArray;
const v62 = new Uint8ClampedArray(v59);
v62[1];
v58[Uint8ClampedArray] %= v59;
try {
    new Uint16Array(v20, 54);
} catch(e65) {
}
const v66 = new v31();
v66.b;
class C68 {
    constructor(a70, a71, a72, a73) {
        arguments[0] = arguments;
    }
}
let v75 = 0;
do {
    v75++;
} while ((() => {
        function F80(a82, a83) {
            if (!new.target) { throw 'must be called with new'; }
            const v85 = this.valueOf().constructor;
            try { new v85(v85, v85, v85, a83); } catch (e) {}
            Math.imul();
        }
        return v75 < 9;
    })())
