function f3() {
    return "-9223372036854775807";
}
new WeakSet();
[4.0,-784.1835117347648,0.0,661855.8984190512,1.0174557728076589e+307,-1000000000.0,-3.0];
[-1000000000000.0,0.7664058883573618];
[9.267084265508567e+307];
const v12 = new BigInt64Array(4046);
let o13 = {
};
[,...o13] = v12;
const v15 = [];
const v17 = new Float64Array(v15);
v15[Symbol.iterator] = v17;
class C25 {
}
class C26 {
    constructor(a28, a29, a30, a31) {
        try { a30(...a28, "e", a31, a31, ...C25); } catch (e) {}
        return arguments;
    }
}
new C26("p");
new C26();
const v37 = [];
function f41(a42, a43) {
    a43 >> a43;
    const v45 = -256 >>> a43;
    v45 / v45;
    -((-1.4618325192014402e+308) ** -11887);
    1545846986 - 2;
    return -256;
}
f41(v37, -256);
function f57() {
    return -4294967296;
}
f57.arguments;
let v61 = Infinity;
function F62(a64, a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    const v68 = this?.constructor;
    try { new v68(a64, -1.0, a67, a67); } catch (e) {}
    a65 - a65;
    a64 ^ a67;
    try {
        this.g = a66;
    } catch(e72) {
    }
    try {
        try {
            new f57();
        } catch(e74) {
        }
        try {
            v37.fill(-65537n);
        } catch(e76) {
            new Uint32Array(257);
            class C80 {
                static #p(a82, a83) {
                }
                #valueOf(a85, a86) {
                }
            }
        }
        this.b = -65537n;
    } catch(e87) {
    }
}
try { new F62(v37, v37, v61, -4294967296); } catch (e) {}
function f89(a90, a91, a92, a93) {
    a91.length;
    v61 = a93;
    const o95 = {
        "apply": f41,
    };
    try { o95.apply(a91, a92); } catch (e) {}
    new Proxy(v37, o95);
    return o95;
}
f89(925338382n, F62, 6n, 925338382n);
const v100 = new F62(-116242.81512445165, -65537n, 6n, 6n);
const v101 = new F62(v100, -65537n, 925338382n, -65537n);
v101.b = v101;
class C102 {
    static {
        this < this;
    }
}
new F62(F62, 925338382n, -65537n, -65537n);
("Vre").strike().link().includes(164140152);
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v113 = new Uint8ClampedArray(3);
class C114 {
    constructor(a116, a117, a118, a119) {
        const v120 = this?.constructor;
        try { new v120(a119, this, v113, a119); } catch (e) {}
        for (let v122 = 0; v122 < 5; v122++) {
            v122 % v122;
        }
    }
}
C114.name;
const v125 = new C114();
v125.length = v125;
