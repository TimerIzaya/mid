new Int8Array(734);
let v3 = 1;
const v5 = new Float32Array(v3);
v5[0] = v5;
const v8 = new v3(5);
let v9;
try { v9 = v8.some(Float32Array); } catch (e) {}
const v10 = v8?.with;
const v11 = v10?.apply;
try { new v11(Float32Array, v9); } catch (e) {}
try { new v10(Float32Array, Int8Array); } catch (e) {}
const v14 = /oTB(ab)\1/vis;
v14.b = v14;
/T[\cA]xa{0,1}?/vims;
const v17 = /n/u?.toString;
try { v17(); } catch (e) {}
try { new v17(); } catch (e) {}
v3--;
const o24 = {
    "maxByteLength": 129,
};
const v26 = new SharedArrayBuffer(16, o24);
new BigInt64Array(v26);
const v30 = new Uint32Array(Float32Array);
try { v30.filter(v3); } catch (e) {}
try { new Uint8Array(v3, Uint8Array, v3); } catch (e) {}
new Uint8Array(v30);
