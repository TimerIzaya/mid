function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.__defineGetter__;
    try { new v7(a6, this); } catch (e) {}
    try {
        this.a = a5;
    } catch(e9) {
    }
    try {
        this.d = a6;
    } catch(e10) {
    }
}
new F3(4.0, 4.0);
let v13;
try { v13 = new BigInt64Array(BigInt64Array); } catch (e) {}
try {
} catch(e14) {
}
const v15 = new F3(4.0, 4.0);
const v16 = new F3(-1000000000.0, -1000000000.0);
class C17 {
    [8.364435171544574] = v16;
    e;
    b = F3;
    static valueOf(a19, a20) {
        const v22 = super.e;
        try {
            v16.d = v22;
        } catch(e23) {
        }
        try { this.o(this, F3); } catch (e) {}
        let v29 = 8.364435171544574 % 8.364435171544574;
        -8.364435171544574;
        --v29;
        --v29;
        return v22;
    }
}
C17.length = C17;
new C17();
const v34 = new C17();
let v35;
try { v35 = v13(v15, 4.0, v34, BigInt64Array); } catch (e) {}
try {
    v15.c = v35;
} catch(e36) {
}
new C17();
v35.e;
const v39 = [-568957023,257,-16,-19091,-9,-4294967296,12];
v39[4] = v39;
const v40 = [268435439,2085328701,-9223372036854775807];
const o41 = {
};
try {
    o41.h = v39;
} catch(e42) {
}
try {
    const o43 = {
    };
    o43.h = v39;
    o43.a = C17;
} catch(e44) {
}
try {
    const o45 = {
    };
    o45.h = v39;
    o45.a = C17;
    o45.b = BigInt64Array;
} catch(e46) {
}
try {
    const o47 = {
    };
    o47.h = v39;
    o47.a = C17;
    o47.e = v40;
} catch(e48) {
}
const v49 = [-40940,268435440,6,8,-57742,-9223372036854775808,-15,9223372036854775807,-1073741824,1073741824];
try { v39.flatMap(v49); } catch (e) {}
function f51() {
}
const v53 = ([9007199254740990,-16,376821973,268435456])[1];
v53 * v53;
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
    function f58(a59, a60) {
        function f61(a62, a63, a64, a65) {
            const v66 = a63 === a63;
            const o67 = {
                65536: a59,
                "d": v66,
            };
            return a59;
        }
        for (let v68 = 0; v68 < 250; v68++) {
            f61();
        }
        const o70 = {
            __proto__: v57,
        };
        return o70;
    }
    f58().group(f58);
    this.constructor = f51;
    let v73;
    try { v73 = this.constructor(); } catch (e) {}
    this.b = 4294967296;
    try {
        function F75() {
            if (!new.target) { throw 'must be called with new'; }
            const v77 = this?.constructor;
            try { new v77(); } catch (e) {}
        }
        const v79 = new F75();
        const v80 = new F75();
        v80.length = v80;
        const v81 = v80.__defineSetter__;
        try { v81(); } catch (e) {}
        function f83(a84, a85) {
            const o86 = {
                "e": v79,
            };
            return o86;
        }
        const v87 = f83();
        const v88 = f83();
        const v89 = v88?.__defineSetter__;
        try { new v89(v49, v73); } catch (e) {}
        function f91() {
            return f83;
        }
        try { new f91(); } catch (e) {}
        new v81();
        new Float64Array([-9223372036854775808,-12]);
        function F97(a99) {
            if (!new.target) { throw 'must be called with new'; }
            const v101 = this.constructor.bind(F97, F97);
            try { new v101(); } catch (e) {}
        }
        f91.b = v53;
        const v105 = new BigInt64Array(1159534400);
        let v107;
        try { v107 = Float64Array.from(v105); } catch (e) {}
        f91.b = f91;
        v39 && v88;
        new Date();
        function f111(a112, a113, a114, a115) {
            ("Vre").charAt();
            const v119 = new Uint8Array(a113);
            for (let v120 = 0; v120 < 5; v120++) {
            }
            let [v121] = v119;
            return f111;
        }
        f111(4294967296, 4294967296, f111, f111);
        f111();
        let v124 = 218;
        v124--;
        const v127 = new Float32Array();
        try { v107.entries(); } catch (e) {}
        for (const v129 of v127) {
            v129 >>> v129;
            Object.defineProperty(v87, Float32Array, { configurable: true, enumerable: true, get: f83, set: f91 });
        }
        this.g = 4294967296;
    } catch(e131) {
    }
    this.f = 4294967296;
}
new F55();
new F55();
new F55();
