new Int32Array();
const v4 = new Uint8ClampedArray();
class C5 {
    constructor(a7, a8, a9, a10) {
        const v11 = this.constructor;
        try { new v11(a9, a10, a7, v11); } catch (e) {}
        for (let v13 = 0; v13 < 5; v13++) {
            v4[v13] = a10;
        }
    }
}
new C5(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray, C5);
let v16 = 1350319313;
class C17 {
    constructor(a19, a20) {
        let v18 = this;
        v18 = a20;
        a19[3] = v16;
        function f22(a23) {
            return a23;
        }
        function F24(a26, a27, a28) {
            if (!new.target) { throw 'must be called with new'; }
            a28.groupToMap(f22);
        }
        try { v18["parse"](v18, "parse", "parse", "parse"); } catch (e) {}
    }
    static set c(a32) {
        Object.defineProperty(a32, 7, { writable: true, configurable: true, value: a32 });
        v16 |= v16;
    }
    #c = 462.58829413776675;
    toString(a34, a35) {
        this.constructor(a34);
        -this;
    }
    valueOf(a39) {
        for (let v40 = 0; v40 < 32; v40++) {
            a39["p" + v40] = v40;
        }
        return this;
    }
    static [462.58829413776675] = v16;
    /*
    constructor(a44, a45, a46) {
    }
    */
    #g;
    static toString(a48) {
    }
    static #g;
}
const v49 = new C17(C17, 56970);
new C17(v49, v16);
new C17(v49, 462.58829413776675);
const v55 = new Date();
v55.getUTCDay();
([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
new Uint8Array(60);
new BigInt64Array(512);
new Int16Array(1384);
([4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886]).toLocaleString().toUpperCase();
