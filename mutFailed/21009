function f0() {
}
const v1 = [-2147483649,129,127,-45363,-40292,1,1,42664,65536];
const v2 = [-47421,9223372036854775807,-918500167,1,-3,964144174,1000];
[9,-1073741824,231505787,-42915,-9,-508763709];
const v5 = new Date();
new Int32Array(9);
for (let [v10,...v11] of "atan2") {
}
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a17;
    } catch(e20) {
    }
}
new F15(v2, v1, 739.4849141378031);
new F15(v1, v1, F15);
new F15(v1, v1, v5);
const v25 = /Cs[\cz]*/vi;
class C27 {
    static {
    }
}
for (let v29 = 0; v29 < 25; v29++) {
    function f30(a31, a32) {
        const o34 = {
            get h() {
                return this;
            },
        };
        return o34;
    }
    for (let v35 = 0; v35 < 5; v35++) {
        const v36 = f30(f30, v35);
        Object.defineProperty(v36, v35, { enumerable: true, get: f30, set: f30 });
        Reflect.preventExtensions(v36);
    }
    [601759695];
    let v40 = /a|b/vdy;
    const v41 = /7Z(?:a?)+/gudsy;
    let v42 = /\coQ/gdy;
    function F43(a45) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = v40;
        } catch(e46) {
        }
        try {
            this.g = a45;
        } catch(e47) {
            v42.dotAll >>= e47;
            let v48;
            try { v48 = e47(e47, v41); } catch (e) {}
            v42 = v40;
            return e47;
            v40 = v48;
        }
    }
    const v49 = new F43(v40);
    let v50;
    try { v50 = v41(F43); } catch (e) {}
    v49 === v50 ? v49 : F43;
    const o53 = {
        [v29]: v25,
        "f": f30,
    };
    [1073741824,1073741823,1376142744,1073741825];
    function f56(a57, a58, a59, a60) {
        for (let v63 = 0; v63 < 5; v63++) {
            v29 < 2;
            try {
                arguments.g = v63;
            } catch(e66) {
            }
            v63++;
        }
        function f68() {
            return a57;
        }
        new Int8Array();
        function f71(a72, a73) {
        }
        f71();
        const v75 = a57.buffer;
        Object.defineProperty(o53, "constructor", { writable: true, configurable: true, value: Date });
        class C79 {
        }
        function f80(a81, a82, a83, a84) {
            let v85 = 10;
            for (; v85--;) {
            }
            try { a82.apply(a81); } catch (e) {}
        }
        f80(v29, C79);
        -(46598 / v25);
        Math.log1p(46598);
        v75.slice();
        try { ("find")["find"](); } catch (e) {}
        const v98 = new a57(2707, 2707, 128);
        let v99;
        try { v99 = v98.findLastIndex(v98, v98); } catch (e) {}
        const o100 = {
            [v99]: Uint8Array,
        };
    }
    for (let v101 = 0; v101 < 5; v101++) {
        f56();
    }
}
