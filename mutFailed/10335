function f3(a4) {
    const o17 = {
        "e": a4,
        valueOf(a6, a7) {
            this[a4] = 15;
            new Float64Array(Float64Array);
            new Int16Array(148);
            const v16 = new Uint8ClampedArray(891);
            return v16;
        },
    };
    return a4;
}
const v18 = f3(43606);
const v19 = v18(43606);
const v20 = f3(16);
class C25 {
    constructor(a27, a28) {
        this[v18];
        try { v19.valueOf("3", v20); } catch (e) {}
        a27 / a27;
    }
    [15];
    toString(a36, a37) {
        try {
            a37.valueOf = a37;
        } catch(e38) {
        }
        return "255";
    }
}
const v39 = new C25(15, 43606);
new C25(43606, true);
new C25(43606, 15);
const v42 = /xyz{0,1}ja.a(?=b)/ui;
class C43 {
}
const v44 = new C25();
const v48 = new Set();
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v39.d = a51;
    } catch(e53) {
        for (let [v54,v55] of this) {
            new Array(2);
            new Int8Array(253);
            new Uint32Array(16);
            new Int16Array(a51);
            try {
                (16).values();
            } catch(e67) {
            }
        }
    }
    try {
        this.h = v48;
    } catch(e68) {
    }
    var h = v42;
    try {
        const t61 = "255";
        t61.e = v44;
    } catch(e69) {
    }
    try {
        const v70 = v48[this];
        try {
            new F49(v70, -268435456n);
        } catch(e73) {
        }
        this.b = Set;
    } catch(e74) {
    }
}
const v75 = new F49(F49, 2);
const v76 = new F49(v75, F49);
new F49(v76, null);
