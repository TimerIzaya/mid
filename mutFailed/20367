[6.473470564063213,1000000.0,1000.0];
[-511269.75623097026,-1000000000000.0];
[NaN,833777.7675598687,5.0,-0.5104709181479432,9.993255105022111e+307,1000000000000.0,2.0,-1000000000.0,377.1014796929121,5.0];
const v6 = [-1073741824,39901,-252051855,-62435,9,19313,-4096,7];
v6[7] = v6;
[13,-8,129,-12,1073741823,-6];
const v8 = [-810218527,34651,52163,127,-18232,-1];
let v12 = -851989.090059624;
v12++;
-4.985042137559354 - -4.985042137559354;
const v17 = [];
try { v17.findLast(v8); } catch (e) {}
const v19 = [v17];
class C21 extends Map {
}
const v22 = new C21();
try { v22.get(Map); } catch (e) {}
const v24 = new C21(v19);
const v25 = v24?.constructor;
try { new v25(); } catch (e) {}
const v27 = new C21(v24);
const v29 = [284907.52762465784,-1.0];
const v31 = new Uint32Array(v17);
const v33 = [601759695];
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    a37.toLocaleString();
    const v42 = a37.constructor;
    v42.prototype = v42;
    function f43() {
        let v45 = v33["pop"]();
        v45++;
        return v45;
    }
    f43();
    let v48;
    try { v48 = v42(); } catch (e) {}
    try { v42(); } catch (e) {}
    for (let v50 = 0; v50 < 5; v50++) {
        try { ("p").trimEnd(); } catch (e) {}
        v31["p" + v50] = v50;
    }
    const v55 = arguments.length;
    v55 >>> v55;
    Object.defineProperty(v22, "e", { configurable: true, enumerable: true, value: f36 });
    const v58 = v24["toString"](a39, ...v27, BigUint64Array, ..."toString", a38);
    try { v58.italics(); } catch (e) {}
    Symbol.prototype;
    const v62 = Symbol.toStringTag;
    Symbol.for(v62.description);
    v24[v62] = v62;
    function f66() {
        const v68 = ("Vre").charAt();
        v68[0] = v68;
        const v69 = v68.lastIndexOf();
        const v70 = ("Vre").codePointAt(v55);
        v70 - v70;
        let v72 = v70 ^ v70;
        v72++;
        let v74 = Float64Array;
        v74 = a38;
        let v75 = v29.length;
        v75++;
        try {
            v34.forEach();
        } catch(e78) {
            e78.message;
            e78.stack = e78;
        }
        const o92 = {
            "c": -4294967297n,
            "EPSILON": v33,
            valueOf(a81, a82) {
                return BigUint64Array;
            },
            1073741824: v31,
            [-4294967297n](a84, a85, a86, a87) {
                eval();
            },
            o(a91) {
                return v69;
            },
            256: a40,
        };
        return v22;
    }
    f66();
    Array.d = Array;
    const v95 = Array(v48);
    let v96;
    try { v96 = v95.findLast(Symbol, v29); } catch (e) {}
    v95.unshift();
    NaN.of().join(Array);
    const v101 = new NaN();
    v101.c = v101;
    const v102 = v101.buffer;
    v102.maxByteLength;
    const v104 = v102.slice(v55, a40);
    try { v104.slice(C21, v55); } catch (e) {}
    try { Int32Array("toString", v96, v55); } catch (e) {}
    const v108 = new Int32Array(Symbol, v55, a40);
    const v109 = v108[3];
    v109 + v109;
    try { ("find").padEnd(v109); } catch (e) {}
    let v113;
    try { v113 = v34["find"](..."find", a40, ...v33, ...v34, ...522675525n); } catch (e) {}
    return v113;
}
for (let v114 = 0; v114 < 10; v114++) {
    v114 - v114;
    f36(v31);
}
%OptimizeFunctionOnNextCall(f36);
f36(v33);
