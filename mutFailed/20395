[204.58242707483032,3.6253236485159874,1.6707310945522735e+308,1000.0,-7.501585587231549e+307,1000000.0,-1.0,1.7976931348623157e+308];
[-0.0];
[NaN,-2.220446049250313e-16,0.3477248553287563,1.0504887225780646,267620.1810306052];
const v5 = new Uint8Array(1);
[] = v5;
("p").normalize("NFD");
for (let v11 = 0; v11 < 32; v11++) {
    "p" + v11;
    for (let v14 = 0; v14 < 5; v14++) {
        function f15() {
            return f15;
        }
        f15();
    }
}
let v17;
try { v17 = ("p").normalize(); } catch (e) {}
new BigUint64Array(3443);
new Uint32Array(16);
const v22 = [520126.03439582814,827116.4087908485,-3.0];
const v24 = new v17();
for (let v26 = 0; v26 < 25; v26++) {
    function f27() {
    }
    function f28(a29, a30, a31, a32) {
        const v33 = f27();
        const v35 = new Int8Array(v24);
        class C36 {
        }
        [-1024];
        for (let v38 = 0; v38 < 5; v38++) {
        }
        139837843 in v24;
        const v42 = 0 <= 0;
        const v43 = new Int8Array(v22, v26, v26);
        for (const v44 in v43) {
            0 ^ v42;
        }
        BigUint64Array * 536870887;
        function f49(a50, a51) {
            return v33;
        }
        Object.defineProperty(v35.buffer, "constructor", { writable: true, configurable: true, value: Date });
        new Int8Array();
        return f28;
    }
    for (let v54 = 0; v54 < 5; v54++) {
        f28();
    }
}
[601759695];
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty(F61);
    const v66 = this.constructor;
    const v67 = [14,9223372036854775807,-947341810,257,65536,2031413919,-5,127,-20830,4096];
    function f68() {
        return v67;
    }
    URIError(4, 1);
    try { new v66(); } catch (e) {}
    function f73() {
    }
    return 4;
    const o76 = {
        "maxByteLength": 3145,
    };
    new SharedArrayBuffer(128, o76);
}
Date();
try { ("Vre").charAt(3443); } catch (e) {}
class C82 {
}
function f83() {
}
Object.defineProperty(F61, Symbol.toPrimitive, { enumerable: true, get: f83 });
new F61();
new Uint8Array();
