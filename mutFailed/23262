[-162.10600693715935,0.028609171918319354,2.0];
const v4 = [-2.013319961660091,-969055.6965177453,-4.0,0.23246633574828712,-155668.52465214278,Infinity,2.220446049250313e-16];
const v5 = [-598.6803780458647,-Infinity,8.550439672241112,-369699.6165768864,1.7976931348623157e+308,-2.220446049250313e-16,4.136217710408198,810804.6429408737];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1287181766;
    } catch(e12) {
    }
}
new F6(-128, v4, 1287181766, v5);
new F6(257, v5, -128, v5);
new F6(1287181766, v5, -128, v4);
[255,755115468,13,64,4294967297,-36698,-256,16,-9223372036854775807];
[10,1073741823,41509,-15,12,52980,5,5,2147483647];
[-8];
const v25 = new Uint32Array();
Object.defineProperty(v25, "constructor", { writable: true, configurable: true, enumerable: true, value: Symbol });
let v26 = -4294967297n;
const v27 = v26--;
function f28(a29, a30, a31, a32) {
    const v33 = a29.keys;
    try { v33(); } catch (e) {}
    function f35() {
        return Uint32Array;
    }
    a29.constructor = f35;
    const t27 = a32?.constructor;
    const v37 = t27();
    const o45 = {
        [v27](a39, a40, a41, a42) {
            eval();
        },
    };
    new v33(v37);
    const v49 = new Int8Array();
    const v51 = v49.buffer.slice(v33, v37);
    try { v51.slice(v27); } catch (e) {}
    return f35;
}
for (let v53 = 0; v53 < 10; v53++) {
    f28(v25);
}
%OptimizeFunctionOnNextCall(f28);
f28(5);
