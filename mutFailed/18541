[657.3627907947221,1000.0,0.15057615785280953,-Infinity,-2.0,-4.0];
const v1 = [369280.8885613787,845882.7614284807];
[3.5791757403770035,1.7097916232581339e+308,816810.6338039055,-3.0,1.7976931348623157e+308,2.220446049250313e-16,3.857172763700639,1.5755263537738785e+308,-1.0];
new BigInt64Array(14);
new BigUint64Array(6);
const v11 = new BigInt64Array(255);
let v13 = 10;
for (; v13--;) {
    const v15 = v11.length;
    try {
        v1.c = v15;
    } catch(e16) {
    }
}
const o19 = {
};
class C21 {
}
const v22 = o19.constructor;
const v24 = 1922 % 1922;
const v25 = v24 == v24;
for (let v26 = 0; v26 < 25; v26++) {
    function f27() {
        return f27;
    }
    function f28(a29, a30, a31, a32) {
        a30.freeze(f27);
        a32 + a32;
        function f35() {
        }
        const v37 = -f35.length;
        const v39 = f27().constructor;
        let v40;
        try { v40 = v39(); } catch (e) {}
        const o45 = {
            "maxByteLength": 1269,
        };
        const v47 = new o19(64, o45);
        new Int32Array(v47);
        function f52() {
            return 1922;
        }
        const v54 = v40.bind().bind();
        v39 * v25;
        const v56 = typeof f35;
        v56.italics(v56, v37, v54);
        const v59 = v56 === "n";
        const v61 = new Int8Array();
        v61.entries().next();
        v22.next(1.185961373472971e+308);
        function f65() {
            return f27;
        }
        const v66 = f65();
        const v67 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
        function f69(a70, a71, a72) {
            const v74 = [Array,a72];
            Reflect.apply(v67.filter, v66, v74).find(v40);
        }
        f69.caller = f69;
        [];
        const v81 = ("find").blink().replaceAll;
        try { v81(v59); } catch (e) {}
    }
    for (let v83 = 0; v83 < 5; v83++) {
        f28(v83, v22, v22, 1922);
    }
}
const v85 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
C21 <= 6 ? C21 : 6;
let v93 = BigInt64Array & -1;
(v93 && --v93) - -15500;
-(-1);
v85.length;
