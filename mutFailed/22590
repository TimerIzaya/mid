class C3 {
    valueOf(a5, a6) {
        try {
            this.toString = a6;
        } catch(e7) {
        }
        a6[268435456] = a6;
        return a6;
    }
    m(a9, a10) {
        const o11 = {
        };
        new Proxy(this, o11);
        return -11;
    }
}
const v14 = new C3();
function f15() {
    function f16() {
        function f17(a18, a19) {
        }
        const o20 = {
        };
        const o27 = {
            toString(a22, a23) {
                function f24() {
                }
                const o25 = {
                };
                function f26() {
                }
            },
        };
    }
    return f16;
}
v14[Symbol.toPrimitive] = f15;
const v30 = new C3();
const v31 = new C3();
class C32 {
    static get b() {
        try {
            const o34 = {
            };
            v31.m(C3, v14, o34);
        } catch(e36) {
        }
        v30 === this;
        return this;
    }
    [v14] = -4.4073716583488254e+307;
    static 2994;
    #b = v31;
    1000;
    static #f = -11;
}
C32[2994];
const v39 = new C32();
function f40() {
    return 89947.64686183236;
}
v39.toString = f40;
v39[1000] = v39;
new C32();
const v45 = new C32();
v45[1000];
new Map();
class C49 {
    static #o(a51, a52) {
        super.f ||= -11;
        try {
            v39.#o(v14, a52);
        } catch(e54) {
        }
        return this;
    }
    constructor(a56, a57) {
        Math.h = a57;
        Math.h = Math;
        -2 - -2;
        4.0 << 4.0;
        Math.random();
        const v64 = -2 * -2;
        Math.atanh(a57);
        for (let v66 = 0; v66 < 5; v66++) {
            function f67() {
                const v69 = new Set();
                try { v69.add(Map); } catch (e) {}
                v69.has(v66);
                return f67;
            }
            f67();
            %OptimizeFunctionOnNextCall(f67);
        }
        a57 & 4.0;
        Math.ceil(a57);
        let v75 = -2 && 4.0;
        v75++;
        v64 ** v64;
    }
}
C49.valueOf = f40;
const v78 = new C49(v30, v39);
try { v78.propertyIsEnumerable(-2147483648); } catch (e) {}
new C49(v14, -4.4073716583488254e+307);
new C49(C32, C49);
let v82 = -4294967297n;
v82--;
try { parseInt("sync", v82); } catch (e) {}
