class C3 {
    static {
        try {
            this.fuck(10, this, 2147483647, 10);
        } catch(e6) {
        }
        /([\cA]a\S)/vim;
        /x[x]/gdms;
        /\1(a)/udms;
    }
    static [10] = 2147483647;
    144 = 3.0;
    static #h = 2147483647;
    static #c = 10;
}
new C3();
const v11 = new C3();
new C3();
new BigInt64Array(2398);
new Int16Array(2100, v11, Int16Array);
const v21 = new BigUint64Array(3);
function f22(a23, a24) {
    ([a23,a23]).at(a23);
    function F30(a32) {
        if (!new.target) { throw 'must be called with new'; }
        const v33 = this.EPSILON;
        v33.e = v33;
        try { new v33(); } catch (e) {}
        this.g = -1;
        this.f = a32;
        this.h = a32;
    }
    try { F30(-143547321); } catch (e) {}
    let v36;
    try { v36 = F30.bind(-143547321); } catch (e) {}
    try { v36(-1517929768); } catch (e) {}
    const v38 = new F30(-1);
    const v39 = new F30();
    v39.d = v39;
    let v40 = new F30(-1);
    v40.g = f22;
    class C41 extends F30 {
        #p(a43, a44) {
            const v45 = a43?.[32];
            Object.defineProperty(v39, v38, { writable: true, configurable: true, value: F30 });
            a43.d = this;
            return v45;
        }
        [-1];
        static {
            this.n = F30;
            super[this];
            try { this["n"](); } catch (e) {}
            const o50 = {
            };
            o50.e = o50;
            const v52 = new Proxy(v40, o50);
            v52.f;
            v52.match = v52;
            v40 = this;
            const o54 = {
                "e": v52,
                ...this,
                65537: o50,
            };
        }
    }
    try { new C41(C41, v38); } catch (e) {}
    new C41();
    const o58 = {
    };
    return f22;
}
%PrepareFunctionForOptimization(f22);
const v59 = f22(f22, f22);
%OptimizeFunctionOnNextCall(v21);
f22(f22, v59);
