new BigInt64Array(203);
new BigInt64Array(295);
const v8 = new Int8Array(49);
const v9 = v8.constructor;
let v10;
try { v10 = new v9(); } catch (e) {}
const v12 = (a13, a14, a15, a16) => {
    function F17(a19, a20, a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return Int8Array;
};
class C26 {
    [BigInt64Array];
    static d;
    n(a28, a29, a30, a31) {
        v8[a30] = Int8Array;
        function f32() {
            return v10;
        }
        const o33 = {
        };
        try {
            o33.g = 2147483647n;
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.g = 2147483647n;
            o33.h = a29;
        } catch(e36) {
        }
        try {
            const o37 = {
            };
            o37.g = a30;
            o37.h = BigInt64Array;
            o37.e = a29;
        } catch(e38) {
        }
        try {
            const o39 = {
            };
            o39.g = 2147483647n;
            o39.h = BigInt64Array;
            o39.e = 203;
        } catch(e40) {
        }
        return BigInt64Array;
    }
}
new v10();
new C26();
const v43 = [Infinity];
class C44 {
    [v43];
}
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    v10.raw(this.constructor);
}
new C26();
const v53 = [-12,0,-2107431110,4,512,-63916];
Date.constructor = Date;
v53.groupToMap(Date.constructor);
