function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -9007199254740991;
    } catch(e3) {
    }
    try {
        this.d = -9007199254740991;
        let v4 = -9007199254740991 != -9007199254740991;
        v4 %= v4;
        const o5 = {
        };
        new Proxy(this, o5);
    } catch(e8) {
    }
    try {
        this.c = -9007199254740991;
    } catch(e9) {
        let v10 = 0;
        do {
            e9?.e;
            v10++;
        } while (v10 < 0)
    }
}
new F0();
new F0();
const v17 = new F0();
function f21() {
    return F0;
}
const v27 = new Int16Array(4);
try { v27.join(5); } catch (e) {}
Int16Array & 8;
(45462 && 9) << 0.690203122675451;
const v38 = Int16Array & 45462;
Int16Array && Int16Array;
+9;
-v38;
new Uint8ClampedArray(8);
1 ^ 1;
try { new Int32Array(268435441, 4, v17); } catch (e) {}
const t42 = 4;
new t42(1);
const v48 = [-11,65536,65537];
function f49(a50, a51, a52, a53) {
    v48[1428717040];
    return a53;
}
try { f49(8, 1, v48, 1); } catch (e) {}
%OptimizeFunctionOnNextCall(f49);
f49();
