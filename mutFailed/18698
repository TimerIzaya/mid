function f0() {
}
const v1 = [7,1718406424,-3,-1,6,-15,64,-19277,1073741824];
[-4096,14,1024,128,7,-1,-27863016,-4096];
[-24313,-8837,13,-1,-3];
const v9 = new Int8Array(v1);
const v12 = new Int32Array(Int8Array);
new BigInt64Array(3832);
let v17 = new Uint32Array();
const v18 = [1711596310];
for (let v19 = 0; v19 < 25; v19++) {
    Uint32Array.__proto__;
    v17 = v17;
    v1.length >>>= v19;
    const v22 = [f0,v18];
    Reflect.apply(v19.findLast, v9, v22);
}
v18[9] = v17;
class C25 {
}
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
}
const v33 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v34 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
for (let v36 = 0; v36 < 5; v36++) {
    let v37 = undefined;
    function f38() {
        let v39 = Float64Array;
        v36();
        const o42 = {
            "d": v37,
            "g": v12,
        };
        Array.__proto__;
        v39 = F27;
        const v44 = v33.length;
        class C46 {
        }
        new C46();
        Symbol.toPrimitive;
        new Uint32Array(v34, v44);
    }
    const v52 = f38();
    %OptimizeFunctionOnNextCall(f38);
    v37 = v52;
}
