class C3 {
    198 = "129";
    constructor(a5) {
        const t3 = "129";
        t3.length *= a5;
        const v6 = this.b;
        let v8 = -53421;
        v8++;
        const v10 = "function" % v6;
        new Uint8Array(1829);
        for (let v14 = 0; v14 < 10; v14++) {
            function* f15(a16, a17, a18) {
                return a17;
            }
            f15();
        }
        Math.abs(v6);
        v10 - v10;
        v8 ** v10;
    }
}
const v23 = new C3("129");
const v24 = new C3(v23);
new C3(v24);
new Float64Array(1830);
new Uint8ClampedArray(7);
function F34() {
    if (!new.target) { throw 'must be called with new'; }
}
function f36() {
    return f36;
}
new Uint32Array(1024);
const v38 = [290511.96857215906,0.3003673637544756,-458526.71260649094,0.8333335605081266,16682.170944584184,0.12597720350931985];
const v39 = [2.220446049250313e-16,-3.0,-3.117457405711452,Infinity,2.220446049250313e-16];
const v40 = [-2.220446049250313e-16,8.380618196344006];
class C41 {
    static {
        try {
        const t0 = 0.30969135690840943;
        t0();
        } catch (e) {}
    }
    g;
    static charCodeAt(a45, a46) {
        return this;
    }
    static get f() {
        v40[114] <<= v38;
        return v39;
    }
}
C41.e = C41;
new C41();
const v49 = new C41();
const v50 = new C41();
class C51 {
    static #b;
    static get matchAll() {
        v40.toString = v50;
        v38.#b = this;
        return this;
    }
}
C51.b = C51;
const v53 = new C51();
const v54 = v53?.__lookupGetter__;
try { v54(v40); } catch (e) {}
const v56 = new C51();
const v57 = v56?.__lookupGetter__;
try { new v57(); } catch (e) {}
const v59 = new C51();
const v60 = v59?.constructor;
try { new v60(); } catch (e) {}
[v40,[v53,[v53,v59]],v49];
65537 + 65537;
-256;
function f70() {
    return 2720;
}
f70.arguments = f70;
f70.valueOf = f70;
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    a73 * a73;
    const v76 = this.constructor;
    try { new v76(a73, 256); } catch (e) {}
    -a73;
    a74--;
}
F71.name;
new F71(65537, f70);
new F71();
class C83 extends F71 {
}
new C83(v38, 256);
new C83();
