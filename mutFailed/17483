let v1 = Float32Array;
let v2 = new v1(2789);
let v4 = Float32Array;
new v4(379);
let v8;
try { v8 = Float64Array.apply(v2, 379); } catch (e) {}
let v9 = new Float64Array(4096);
Uint8Array.e = Uint8Array;
const v12 = new Uint8Array(255);
const v13 = delete v8?.[65537];
function f14() {
    return 255;
}
({"buffer":v4,...v2} = v9);
let v15;
try { v15 = v12.set(v12); } catch (e) {}
const v17 = 3154 + 3154;
let v18 = Float64Array;
const v19 = new v18(3154);
%VerifyType(v2);
v13 === 379 ? v13 : 379;
v1++;
Object.defineProperty(v2, "g", { writable: true, configurable: true, enumerable: true, set: f14 });
Int32Array.prototype = Int32Array;
new Int32Array(64);
const v28 = new BigUint64Array(3927);
let v29 = 4;
Object.defineProperty(v19, "f", { enumerable: true, get: f14 });
({"buffer":v18,"byteLength":v29,"g":v9,} = v12);
try { new v15(Int32Array, v4, v17); } catch (e) {}
function f31() {
    return v29;
}
const v33 = new Uint32Array(v29);
new Float64Array(v33);
function f36(a37, a38, a39) {
    try { a37.toString(); } catch (e) {}
    try { a37.apply(a38, v28); } catch (e) {}
    ~(f36 ** a38);
    return v28;
}
const v44 = f36(f36);
try { v44.reduce(Float64Array); } catch (e) {}
