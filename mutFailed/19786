[];
const v4 = -1000000000000.0 !== -1000000000000.0;
v4 && v4;
const v6 = [8.806878147718013,-1000000000000.0,-1000000000000.0];
function f7() {
    function f8(a9) {
        const v12 = new Uint8ClampedArray(995);
        new Int8Array(v12);
        return Uint8ClampedArray;
    }
    return f8;
}
function f15(a16) {
    this.DataView;
}
Object.defineProperty(v6, "toString", { writable: true, configurable: true, get: f7, set: f15 });
v6[1];
const v20 = [v6];
v20[0];
v20[0] = v20;
const v22 = [8.806878147718013,v6];
try { v22.toString(); } catch (e) {}
try { v22.sort(1.4720939526542361e+308); } catch (e) {}
-969.5019596538951 != -969.5019596538951;
const v29 = [Infinity];
try { v29.entries(); } catch (e) {}
let v31;
try { v31 = v29.pop(); } catch (e) {}
v31 | v31;
v31 ^ v31;
[-1.1025573023656479e+308,NaN,333238.07966559427,2.220446049250313e-16,-7.498139807606372,-705249.1396669981,-545167.7887070003,-1000000.0];
const v35 = [6.015844637884356,-67731.50973182963];
let v36;
try { v36 = v35.fill(-969.5019596538951); } catch (e) {}
v36[1];
v35[1] = v35;
const v38 = [0.0,1.0,-6.743702675363474,400.9902683003188];
v38[2] = v38;
let v39 = "string";
v39[5] = v39;
for (let v40 = 0; v40 < 5; v40++) {
    function f41() {
        for (let [i45, i46] = (() => {
                10 - 10;
                return [0, 10];
            })();
            (() => {
                i45 & i45;
                i45 & i45;
                i46++;
                i46--;
                const v51 = i45 < i46;
                !v51;
                v51 || v51;
                return v51;
            })();
            (() => {
                i45 >>> i45;
                const v57 = i46 - i46;
                v57 | v57;
                const v59 = i45++;
                let v60 = v59 >> v59;
                v60--;
                v60 >>> v60;
            })()) {
            i46 & i46;
            i46 - i46;
            for (const v67 in v38) {
                v67[0];
                v39 *= v39;
            }
        }
        return v38;
    }
    f41.e = f41;
    const v69 = f41();
    try { v69.every(f41); } catch (e) {}
    %OptimizeFunctionOnNextCall(f41);
}
