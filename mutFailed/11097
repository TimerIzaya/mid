~-65535;
-3 | -3;
const v8 = [1000000000.0,6.961759317789145,7.602922045343282e+307,1000000000000.0,1000000.0,-1000.0,0.22176329408407902,-5.0,452071.5461585254];
v8[8] = v8;
[1000000.0,-3.0,140.9415362456091,1.0,NaN,-5.0,-2.0,-1.0];
const v10 = [9.011547731829616];
try { v10.toString(); } catch (e) {}
10368n ^ 10368n;
function f19() {
    const o22 = {
        get c() {
            super.m();
        },
    };
}
const v23 = f19();
5 + -7;
const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v29 = new Uint32Array();
v29.constructor = f19;
let v30 = -4294967297n;
const v31 = v30--;
const v32 = [601759695];
const t23 = 65536;
t23[0] = v32;
const v33 = [1073741824,1073741823,1376142744,1073741825];
function f35(a36, a37, a38, a39) {
    a36.constructor = f19;
    const v40 = a36.constructor;
    let v41;
    try { v41 = new v40(); } catch (e) {}
    ("a").length;
    function f44() {
        ("Vre").charAt();
        let v47;
        try { v47 = ("Vre").codePointAt(); } catch (e) {}
        let v48 = Float64Array;
        v48 = a37;
        let v49 = v27.length;
        const v50 = v49++;
        const v51 = v49++;
        v51 - v51;
        const o71 = {
            "c": v30,
            "a": v47,
            [v31](a54, a55) {
            },
            [v31](a57, a58, a59, a60) {
                eval();
            },
            "c": v32,
            valueOf(a64, a65) {
            },
            1073741824: v50,
            [v30](a67, a68, a69, a70) {
            },
            "arguments": 5,
            256: a39,
        };
        try { o71.propertyIsEnumerable(o71); } catch (e) {}
    }
    const v73 = f44();
    const v75 = Array();
    try { v73.findLast(); } catch (e) {}
    const v77 = v75.unshift();
    v77 - v77;
    const v80 = new Int8Array();
    const t67 = (-353875768n).buffer;
    t67.constructor = f19;
    const v83 = new Int32Array();
    v83[3];
    for (let v85 = 0; v85 < 5; v85++) {
    }
    %OptimizeFunctionOnNextCall(f44);
    let [v86] = v80;
    function F87(a89, a90, a91, a92) {
        if (!new.target) { throw 'must be called with new'; }
        try { this.isPrototypeOf(v41); } catch (e) {}
    }
    new F87();
    new F87(65536, v23);
    try { v33["find"](..."find", a39, ...v32, ...v33, ...522675525n); } catch (e) {}
}
try { f35(-353875768n, -3, -3, -3); } catch (e) {}
for (let v99 = 0; v99 < 10; v99++) {
    f35(v29);
}
%OptimizeFunctionOnNextCall(f35);
f35(5);
