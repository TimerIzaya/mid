const v2 = new Array(2422);
class C3 extends Array {
    constructor(a5) {
        super(a5);
        v2[super.some(a5)] = this;
        this[Symbol.isConcatSpreadable] = a5;
    }
    static f = 2422;
    #a;
    static g = v2;
    static e = Array;
    static #c = v2;
}
const v9 = new C3(2422);
const v10 = new C3(v9);
const v11 = new C3(v2);
function f12() {
    return C3;
}
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a16;
    } catch(e18) {
    }
    try {
        this.a = a16;
    } catch(e19) {
    }
    try {
        this.d = v9;
    } catch(e20) {
    }
}
new F13(F13, v11, v11);
new F13(v10, v2, v11);
new F13(Array, v11, v9);
("6Ct").normalize();
