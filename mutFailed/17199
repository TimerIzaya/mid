function F0() {
    if (!new.target) { throw 'must be called with new'; }
    const v4 = new Map();
    function f5(a6, a7) {
        const o14 = {
            "a": a7,
            [a6]: v4,
            [v4]: Map,
            [2221](a9, a10, a11) {
            },
            ...v4,
            "b": a6,
            [a7]: Map,
            "h": a6,
            valueOf(a13) {
                return a13;
            },
        };
        return a7;
    }
    try {
        this.d = 268435441;
    } catch(e16) {
    }
    new Uint8ClampedArray();
    const v19 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    let v20 = Float64Array;
    v20 = Uint8ClampedArray;
    try {
        v19.forEach(v20);
    } catch(e22) {
    }
}
const v23 = new F0();
const v24 = new F0();
const v25 = new F0();
function f26(a27, a28) {
    const o33 = {
        "a": v24,
        set e(a30) {
            try {
                super.m(a28, a27, v24, a27);
            } catch(e32) {
            }
            v23[this] = a28;
        },
        "g": F0,
        "h": v23,
    };
    return o33;
}
f26(v24, v24);
for (let v35 = 0; v35 < 5; v35++) {
    function f36() {
        Math.ceil();
        return v35;
    }
    f36();
    for (const v41 of v25()) {
    }
    function f42(a43, a44, a45, a46) {
    }
    class C48 {
        static {
            for (let v50 = 0; v50 < 25; v50++) {
                const v51 = [601759695];
                const v52 = [1073741824,1073741823,1376142744,1073741825];
                function f53(a54, a55, a56, a57) {
                    try { v52.toSorted(f42); } catch (e) {}
                    const v62 = new Float32Array(this, a57, a54);
                    function f64() {
                        return a54;
                    }
                    class C66 extends v62.constructor {
                        #c = 84;
                    }
                    function f67(a68, a69) {
                        return C48;
                    }
                    try { f67(f53, a57); } catch (e) {}
                    %OptimizeFunctionOnNextCall(f64);
                    try { v52["find"](..."find", a57, ...v51); } catch (e) {}
                    const o73 = {
                        [Date]: 128,
                        __proto__: arguments,
                    };
                    return f64;
                }
                for (let v74 = 0; v74 < 5; v74++) {
                    f53();
                }
            }
        }
    }
    %OptimizeFunctionOnNextCall(f36);
}
f26(v23, v23);
for (let v77 = 0; v77 < 5; v77++) {
    const v80 = [];
    try {
        v80.some();
    } catch(e82) {
        for (let v84 = 0; v84 < 500; v84++) {
            let v85 = undefined;
            const o86 = {
            };
            v85 = v77;
        }
        eval();
    }
}
f26(v25, v25);
try { F0(); } catch (e) {}
Math.round();
for (let i96 = 0, i97 = 10; i96 < i97; i96++) {
}
class C105 {
    constructor(a107, a108) {
        function f109(a110) {
            const v111 = [6,268435440,13,1073741825];
            const o112 = {
                "c": v111,
            };
            function F113() {
                if (!new.target) { throw 'must be called with new'; }
                let v115 = -4294967297n;
                v115++;
                const v118 = new Uint16Array();
                v118.fill(Uint16Array).entries();
                Symbol.toPrimitive;
            }
            const v123 = /8[\cA]v/uisy;
            const v124 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
            try {
                v124.length = v123;
            } catch(e125) {
            }
            const v126 = new F113();
            const t138 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
            t138[3] = v126;
            for (let v129 = 0; v129 < 25; v129++) {
                o112["p" + v129] = v129;
            }
            return C105;
        }
        function f134(a135, a136, a137, a138) {
            a136 | a136;
            const v140 = a135 / a135;
            const v141 = a136 < a136;
            let v142 = a137 >>> a137;
            v142++;
            const o150 = {
                "b": a135,
                __proto__: a108,
                "type": "growable",
                valueOf(a145, a146) {
                },
                0: "growable",
                "c": a138,
                n(a148, a149) {
                    return v141;
                },
            };
            return v140;
        }
        const o151 = {
            "type": "function",
        };
        new Worker(f109, o151);
    }
}
const v153 = new C105(C105, C105);
new C105(C105, v153);
