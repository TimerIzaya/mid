function f0() {
}
const v3 = new Uint8Array(8);
v3[6] = v3;
Symbol.prototype;
const v8 = Symbol.toPrimitive;
const v10 = v8.description;
try { v10.italics(); } catch (e) {}
const v12 = Symbol.for(v10);
Int32Array[v8] = f0;
Int32Array.toString = f0;
new Int32Array(1);
new Uint16Array(15);
class C17 {
    [Int32Array];
    static set c(a19) {
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeMaglevOnNextCall(f0);
        f0();
    }
    [15] = Uint8Array;
    [v3] = f0;
    2;
}
try { C17.call(v12); } catch (e) {}
const v25 = new C17();
v25[15];
const v27 = new C17();
v27[15];
const v29 = v27[2];
const v30 = new C17();
v30[15];
function F32() {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F32(); } catch (e) {}
const v35 = new F32();
const v36 = v35?.constructor;
try { new v36(); } catch (e) {}
const v38 = v35?.constructor;
try { v38.bind(v29); } catch (e) {}
try { new v38(); } catch (e) {}
const o44 = {
    [-1]: v35,
    get b() {
        const v42 = this?.b;
        try { new v42(); } catch (e) {}
        return F32;
    },
};
const v45 = o44?.b;
let v46;
try { v46 = new v45(); } catch (e) {}
const v47 = v46?.toLocaleString;
try { new v47(); } catch (e) {}
