[129,2,26168,129,-9,-436643702,4294967296,536870887,1017979344,-2147483647];
[7];
function f9() {
    function f10() {
        let v11 = "-185650492";
        const v14 = new BigUint64Array();
        const v16 = new Set();
        function F17(a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a19;
            } catch(e21) {
                for (let [v22,v23] of a19) {
                    class C24 {
                    }
                    v11 = e21;
                    v22 ^= v14;
                    C24 != a19;
                    const v26 = new C24();
                    const t19 = v26.g;
                    t19.length = 1;
                }
            }
            try {
                this.h = v16;
            } catch(e29) {
                this.toString();
                ("E")[2555];
            }
            try {
                const v32 = v16[this];
                try {
                    new F17(v32, -2046072084n);
                } catch(e35) {
                }
                const o37 = {
                };
                const v39 = new SharedArrayBuffer(1024, o37);
                new BigInt64Array(v39);
                this.b = Set;
            } catch(e42) {
            }
        }
        return 267770.56167508895;
    }
    return f10;
}
Object.defineProperty(Float32Array, Symbol.toPrimitive, { writable: true, enumerable: true, get: f9 });
const v46 = new Uint8ClampedArray();
for (let v47 = 0; v47 < 25; v47++) {
}
Float32Array in v46;
[2,268435439,-2147483648,512,-13,16446,-7,10];
-Infinity;
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    function f62(a63) {
        function f64() {
            let v65 = -9223372036854775808n;
            v65 %= 45725n;
            return 45725n;
        }
        for (let v67 = 0; v67 < 5; v67++) {
            f64();
            %OptimizeFunctionOnNextCall(f64);
        }
        return this;
    }
    this.constructor = f62;
    const v69 = this.constructor;
    let v70;
    try { v70 = new v69(v69, a61); } catch (e) {}
    const v71 = typeof v70;
    const o74 = {
        get b() {
            return v69;
        },
    };
    v71 === "symbol";
}
const v76 = new F56();
new F56(F56, F56, v76, v76);
