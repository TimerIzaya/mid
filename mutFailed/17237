class C3 {
    static set d(a5) {
        try { a5(a5, a5, this, 1750264324, ..."number", 1750264324); } catch (e) {}
        const v9 = [];
        Reflect.apply(("number").trimStart, RegExp, v9);
    }
    #d = 1750264324;
    [1750264324];
    static #c;
    2147483648;
}
const v12 = new C3();
const v13 = new C3();
const v14 = new C3();
const v15 = [v12,v14,v14];
[v14,["number","number",v15,v13,C3],v15,v12,v14];
Int16Array[0] = v14;
new Int16Array(955);
const v23 = new Uint8ClampedArray(5);
new BigUint64Array(230);
function f28() {
    return -790437.7647639194;
}
Int16Array[Symbol.iterator] = f28;
const v34 = new Int16Array(Int16Array, Int16Array, Int16Array);
v34.constructor = Symbol;
class C35 {
}
C35.v28 = v23;
with (C35) {
    const v37 = v34["subarray"]();
    function f38() {
        return v37;
    }
}
