const v0 = [465378.3778452447,-1.6542408878477697e+308,1000000000000.0,Infinity,-369827.0187708979,0.40166152632541385];
[-2.220446049250313e-16,-1.0,-17.26265643389695,0.26021400800887406,1e-15,743.9831696395072];
[-2.2250738585072014e-308,-292557.7139756632,NaN,-1.067175097553955e+308,291.36435297826506,1000.0,438001.4790721899,0.39394650564391154,-975.8071601605122];
Set.name;
new Set();
"undefined" == "undefined";
const v13 = ("XS6Pm")?.slice;
try { new v13(-1000.0, -1000.0); } catch (e) {}
const v17 = new BigUint64Array(5);
new Map(3);
Float64Array.prototype = Float64Array;
const v23 = new Float64Array(2);
try { v23.entries(); } catch (e) {}
let v25 = "resolve";
try { v25.endsWith(v0); } catch (e) {}
let v29 = 889459824n;
v29 ^ v29;
class C31 {
    static m(a33) {
        ({"a":v25,"h":v29,} = this);
    }
}
try { new C31(); } catch (e) {}
const v36 = /(?<a>.)\k<a>?/vdimsy;
let v37;
try { v37 = v36(); } catch (e) {}
const v38 = ["setUint16"];
try { BigInt64Array.from(v0); } catch (e) {}
const v41 = new BigInt64Array();
function f43() {
    3.4890473589784586e+307 === 3.4890473589784586e+307;
    let v46 = 1000000000000.0;
    const v47 = v46--;
    const v49 = 12 << 12;
    let v50 = 257828.6336153492;
    const v52 = -v38;
    const v53 = v52 && v38;
    -v53;
    const v56 = Array();
    v56.e = v56;
    const v57 = v25 + 12;
    const v60 = new Int32Array(9);
    v60.reverse()[3];
    for (let v63 = 0; v63 < 5; v63++) {
        function f64() {
            try { eval(v57); } catch (e) {}
            eval();
            return Array;
        }
        const v68 = f64?.bind;
        try { new v68(9); } catch (e) {}
        const v70 = f64();
        try { new v70(v37); } catch (e) {}
        %OptimizeFunctionOnNextCall(f64);
    }
    let v74 = -268435456;
    async function f75(a76, a77, a78, a79) {
        Object.defineProperty(v56, 9, { configurable: true, enumerable: true, value: a77 });
        a76.g |= a78;
        return await a78;
    }
    f75(9, "Vre", v49, 1000.0);
    v74--;
    const o96 = {
        "e": -4294967295,
        ..."Vre",
        valueOf(a84, a85) {
            return Int32Array;
        },
        valueOf(a87, a88) {
            return a88;
        },
        "call": f43,
        "g": v52,
        "type": "setUint16",
        ..."Vre",
        n(a90, a91) {
            return v52;
        },
        ...v53,
        "type": "-1",
        set g(a93) {
        },
        "maxByteLength": -3,
        m(a95) {
            return v29;
        },
        "c": v56,
        5: -4294967295,
        6: v74,
    };
    let v97 = v50--;
    v97--;
    class C100 {
        static #m(a102) {
        }
        constructor(a104) {
            const v105 = this?.constructor;
            try { new v105(v17); } catch (e) {}
            new Uint16Array(12, -4294967296, v47);
        }
    }
    try { C100(); } catch (e) {}
    try { C100(); } catch (e) {}
    const v111 = Symbol.iterator;
    Math[v111] = v111;
    try { v41.reduce(v37); } catch (e) {}
    const v113 = new C100();
    const v114 = new C100();
    let v115;
    try { v115 = v114.propertyIsEnumerable(v52); } catch (e) {}
    v115 && v115;
    const v117 = new C100();
    const v118 = [];
    const v119 = [v117];
    v119.g = v119;
    v119[0];
    class C121 extends C100 {
        [v113];
        #n(a123, a124, a125, a126) {
        }
    }
    try { C121.bind("Vre"); } catch (e) {}
    -3 < -3;
    const v130 = new WeakSet();
    try { v130.has(v25); } catch (e) {}
    function f132(a133) {
        try { new a133(); } catch (e) {}
        const o135 = {
            "g": v130,
        };
        return o135;
    }
    function f136() {
        const o142 = {
            [v114](a138, a139, a140) {
                return v29;
            },
            "h": v115,
        };
        o142.h = o142;
        return o142;
    }
    try { f136(); } catch (e) {}
    const v144 = f136();
    const v145 = v144?.__lookupGetter__;
    try { new v145(v144); } catch (e) {}
    const v147 = f136();
    for (let v148 = 0; v148 < 25; v148++) {
        v148 & v148;
        const v150 = [601759695];
        const v151 = [1073741824,1073741823,1376142744,1073741825];
        function f152(a153, a154, a155, a156) {
            const v157 = a153?.propertyIsEnumerable;
            try { new v157(v119); } catch (e) {}
            a154.h = a154;
            const v159 = a154.e;
            try { v159(a156, v159, v148, f136); } catch (e) {}
            a153[4] = a153;
            a154[4] = a154;
            try { v151["find"](..."find", a156, ...v150, ...v151); } catch (e) {}
            return v150;
        }
        f152.caller = f152;
        for (let v163 = 0; v163 < 5; v163++) {
            f152(v144, v147);
        }
    }
    f132(WeakSet);
    const v166 = new C121();
    const v167 = v119.constructor;
    v167.prototype;
    ~Array;
    function F170() {
        if (!new.target) { throw 'must be called with new'; }
    }
    eval();
    v167();
    class C175 extends v167 {
    }
    const v176 = new C175();
    const v177 = v176?.map;
    try { new v177(f136); } catch (e) {}
    v176.constructor.bind(v50);
    Object.defineProperty(v176, 65537, { value: v114 });
    try { v166.m(v118); } catch (e) {}
    return v37;
}
%PrepareFunctionForOptimization(f43);
f43();
%OptimizeFunctionOnNextCall(f43);
f43();
