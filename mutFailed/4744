const v3 = [1e-15,-1.2508449375200217e+307,-2.2250738585072014e-308];
const v4 = [-1.7976931348623157e+308,0.0,1000000.0,-78.8362741637203,1000000.0,-1000000000.0,0.8974255261975151,0.3109585085468427];
[1.0,2.220446049250313e-16,-221.6392150076698,362423.1266948187,-4.0,4.67762169666174,1.2703645585889014e+308,464512.6857675116];
class C6 {
    #valueOf(a8, a9, a10, a11) {
        ("a").length;
        %VerifyType(this);
        delete a10[77];
        [9223372036854775807,15,9,-18288,8,-65536,257,-2147483647,268435456,-280318342];
        [850890284,268435456,-2147483649,65535,2147483649,-35569,-2,64,-15,-10];
        [1,-9007199254740992,268435456,7,-4294967297,-2147483648,9007199254740991,78072960];
        return v4[97];
    }
    static {
        super["a"] = v3;
        const t15 = "function";
        t15[5] = "xAu";
    }
}
new C6();
const v21 = new C6();
new C6();
function f27() {
    return v21;
}
[2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
class C29 {
    constructor(a31, a32) {
    }
}
new C29();
const v35 = new C29();
new C29();
[];
[];
v35 << -1557853178;
[3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f45(a46, a47) {
    return f45;
}
f45();
const v51 = new Set();
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a54;
    } catch(e56) {
        for (let [v57,v58] of a54) {
            class C59 {
            }
            const t50 = C59().g;
            t50.length = 1;
            v51.values();
        }
    }
    try {
        this.h = v51;
    } catch(e64) {
    }
    try {
        const v65 = v51[this];
        try {
            new F52(v65, -2046072084n);
        } catch(e68) {
        }
        this.b = Set;
    } catch(e69) {
    }
}
const v70 = new F52();
let [v71,,...v72] = v51;
v70.toString = v72[Symbol.toPrimitive];
new F52();
const v78 = new Float32Array();
for (const v79 of v78) {
    function F80(a82, a83) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v79;
    }
    new F80();
}
const v87 = new Float64Array(216);
new Uint8Array(v87);
Array();
