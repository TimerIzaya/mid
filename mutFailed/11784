const v0 = [];
function f1() {
    const v3 = [v0[3269366754]];
    [v3,v0,v0];
    return [v3,v0];
}
v0.toString = f1;
function f6() {
    const o7 = {
        ...v0,
        247: v0,
        "c": v0,
        [v0]: v0,
        ...v0,
        "g": v0,
        "e": v0,
        ...v0,
        "d": v0,
        "b": v0,
        "a": v0,
    };
    return o7;
}
const v8 = f6();
function f9() {
    function f10() {
        const v13 = ("D")[0].substring();
        v13 == v13;
        v13.charCodeAt();
        return "D";
    }
    %PrepareFunctionForOptimization(f10);
    return f6;
}
v8[Symbol.toPrimitive] = f9;
const v18 = f6();
f6();
/foo(?<!bar)baz/gds;
const v21 = /X(?<a>(?<b>(?<c>(?<d>.).).).)/vimy;
/1i\u0034G2]/gdimsy;
const v24 = [-1024];
for (let v25 = 0; v25 < 5; v25++) {
    delete v24[v25];
}
const v28 = new BigInt64Array();
let v29 = 10;
v29++;
Float64Array.length;
const v33 = new Float64Array();
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    a37 - a37;
    const v39 = this.constructor;
    v39.name = v39;
    const v41 = new Int16Array();
    const v42 = v41.lastIndexOf();
    v42 ^ v42;
    try { new v39(); } catch (e) {}
}
const v45 = new F34();
v45.constructor = f9;
const t61 = v45.constructor;
new t61();
const v48 = v33?.constructor;
try { new v48(); } catch (e) {}
new Float64Array(3);
function f59() {
    const o71 = {
        m(a61) {
            3938 & 3938;
            Int8Array.name = Int8Array;
            const v65 = new Int8Array(3938);
            let v66 = 3;
            let v67 = 0;
            v67 >> v67;
            for (let i = 0; i < 5; i++) {
                [...v66] = v65;
                v67++;
            }
            const o70 = {
            };
            o70.h = o70;
        },
    };
    o71.m(o71, o71, o71, f59, f59);
    return o71;
}
const v74 = f59()?.m;
try { new v74(v28); } catch (e) {}
try {
const t0 = 6;
t0(6, 6);
} catch (e) {}
class C78 extends f6 {
    static #c;
    static c = v21;
    1;
    #g;
    [v8] = v18;
    getOwnPropertyNames(a80, a81, a82, a83) {
        typeof v21 < "string";
        return v8;
    }
}
new C78();
new C78();
new C78();
const v91 = new Date();
v91["getUTCMilliseconds"]();
