const v0 = [128,9007199254740992,1861065088,26298];
const v1 = [-14,3,-65536,-464043672,6,760648190];
const v2 = [8,1000,1024];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    a5.p18 = this;
    try { this.propertyIsEnumerable(F3); } catch (e) {}
    try { a5.groupToMap(this); } catch (e) {}
    for (let i10 = 0, i11 = 10; i10 < i11; i10++, i11--) {
        v2[i10];
        const o20 = {
        };
        new Proxy(v0, o20);
    }
    try {
        this.g = v2;
    } catch(e23) {
    }
}
function f24(a25) {
    function f27(a28, a29) {
    }
    return a25;
}
F3[Symbol.toPrimitive] = f24;
F3.arguments = F3;
const v32 = new F3(v2);
const v33 = new F3(v2);
const v34 = new F3(v1);
v34.constructor = Symbol;
const v35 = v34?.constructor;
let v36;
try { v36 = new v35(v2); } catch (e) {}
[v0,v33,v0,F3];
const v38 = [v33,v0];
[v32,v34,v34,v2];
function f40() {
    return v38;
}
try { f40(); } catch (e) {}
const v42 = [536870912,268435441,9007199254740992,57419,129,-2147483647];
try { v42.indexOf(v32, v36); } catch (e) {}
for (let v44 = 0; v44 < 32; v44++) {
    v2["p" + v44] = v44;
}
v42[5] = v42;
[-8,512,257,65535,-1832112202,-2,-58813];
[0,12];
const v51 = new v32();
v51.setTime(-26321);
