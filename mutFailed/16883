const v0 = [];
class C1 {
    [C1];
    static {
        for (const v3 of this) {
            this[v3] = v3;
            this.c;
            delete v3?.f;
        }
        super.e /= v0;
    }
    2 = v0;
    h = v0;
    16;
    3;
}
new C1();
new C1();
new C1();
[0.3028277493089938,1e-15,-620879.3928592706,3.0];
[0.4205847100471568,0.8365002004117379,840889.1467452487,2.220446049250313e-16,-2.223728399368364e+307,27.412308405502472,-1e-15];
[612713.6942626182,-544.5866073015707,-1.7976931348623157e+308,-1.0,3.1191780268122535,1000000000000.0,5.0,-8.16284229358689];
new Uint32Array(1803);
new Float64Array(4);
new BigInt64Array(4069);
new Map();
24560 ^ 4069;
function F32() {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date();
    const v39 = v34.reduce(Date)[22];
    const v42 = Array(19793);
    for (const v43 of v42) {
    }
    const v44 = [v42,v42,v42,v42];
    new BigUint64Array();
    const v47 = v39.constructor;
    try { v47(); } catch (e) {}
    const v50 = [[v44,v44,v44]];
    v50.toSpliced(v50);
    v50 >= Uint16Array;
}
new Map();
new F32();
