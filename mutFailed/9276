[];
class C7 {
    static ["22307"] = "AanB8";
    b;
}
const v8 = new C7();
new v8();
const v20 = new Float64Array(1000 * 1000);
let v21;
try { v21 = v20.join(Float64Array); } catch (e) {}
const v23 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
new Uint16Array(v23);
Symbol.hasInstance;
const o29 = {
    "execution": "async",
    "type": "minor",
};
gc();
class C32 {
    #n(a34, a35) {
        let v37;
        try { v37 = a35["matchAll"](1000000000000.0, 128, this); } catch (e) {}
        const t22 = "matchAll";
        t22[9] = 128;
        v37?.[1726887188];
        new BigInt64Array(1091060517);
        -3.0 | -9007199254740992;
        return this;
    }
    static b = 1000000000000.0;
    static #e;
    #b = 128;
}
new C32();
new C32();
new C32();
("has").matchAll("has");
for (let v50 = 0; v50 < 5; v50++) {
    function f51() {
        let v52 = -4294967295;
        const v53 = v52++;
        const o57 = {
            valueOf(a55, a56) {
                return v52;
            },
        };
        return v53;
    }
    f51();
    %OptimizeFunctionOnNextCall(f51);
}
function f62() {
    Math.expm1(3375);
    const v68 = new Float64Array(64);
    v68[5] = v23;
    [v68,v23];
    ~-754089042n;
    [601759695];
    const v74 = [1073741824,1073741823,1376142744,1073741825];
    function f75(a76, a77, a78, a79) {
        try { new a76(); } catch (e) {}
        a78 << a78;
        function f82() {
            return a76;
        }
        const v84 = new Int8Array();
        const v87 = BigUint64Array * 536870887;
        Number.isNaN(v87 ** v87);
        function f91(a92, a93) {
        }
        try { f91(); } catch (e) {}
        const v95 = v84.buffer;
        const v96 = v95.__defineGetter__;
        try { v96(); } catch (e) {}
        Object.defineProperty(v95, "constructor", { writable: true, configurable: true, value: Date });
        %OptimizeFunctionOnNextCall(f82);
        let v99;
        try { v99 = v74["find"](..."find", a79, ...v23); } catch (e) {}
        const o100 = {
        };
        o100.e = v20;
        o100.e = o100;
        v99 <= a78;
    }
}
const v102 = [-1539,1,12];
function f103() {
    return f103;
}
const v106 = new Float32Array(2306);
v106.reverse();
new BigInt64Array();
function f110(a111, a112) {
    const o113 = {
        [a111]: v102,
    };
    return a111;
}
f110(v21);
f110();
f110(f103);
new f62();
new Int32Array(1000);
new Int16Array(129);
new Uint32Array(7);
const v125 = /(l{z})/s;
function F126(a128) {
    if (!new.target) { throw 'must be called with new'; }
    const v129 = this.constructor;
    try { new v129(v125); } catch (e) {}
    a128.b = a128;
}
new F126(v125);
new F126(v125);
function f133(a134, a135) {
    class C136 {
        constructor(a138, a139) {
            const o141 = {
            };
            gc(o141);
        }
    }
    for (let v143 = 0; v143 < 50; v143++) {
        new C136();
    }
    return a134;
}
function F146(a148) {
    if (!new.target) { throw 'must be called with new'; }
    139837843 in this;
}
class C151 {
    static {
        try {
        const t0 = "boolean";
        t0(this);
        } catch (e) {}
    }
}
new Promise(f133);
