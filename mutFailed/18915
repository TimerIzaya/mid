function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a11;
    } catch(e13) {
    }
    function f14(a15, a16, a17) {
        function f19(a20) {
            a20 = a15;
        }
        this.onmessage = f19;
    }
    const v26 = [-4096,a11,a12];
    const o27 = {
        "arguments": v26,
        "type": "function",
    };
    new Worker(f14, o27);
    try {
        function f29(a30, a31, a32, a33) {
            return 161.0245199030096;
        }
        f29(255n, 6, a12, a11);
        59817n <= undefined;
        class C41 {
        }
        class C43 extends C41 {
            constructor(a45, a46, a47, a48) {
                super(-5.970620995673848);
            }
        }
        this.d = 127;
    } catch(e49) {
    }
}
new F9(-0.0, 255n);
new F9(-0.0, 4294967295n);
new F9(-0.0, -2147483647n);
function f53() {
    -11634 < 9;
    const v62 = new Int16Array(16);
    v62[10] = -9007199254740992;
    const o123 = {
        ["constructor"]: "constructor",
        2: 4.0,
        ..."rN",
        "f": "rN",
        __proto__: "rN",
        "g": 4.0,
        "h": "rN",
        m(a65, a66) {
            const v69 = new BigUint64Array(1000);
            v69[Symbol.species];
            const t52 = "constructor";
            t52[2928611434] **= a65;
            ("constructor").length;
            const o74 = {
                ...v69,
            };
            a65[this] = "constructor";
            SyntaxError();
            class C80 {
                static #a;
                static n(a82, a83) {
                    const v84 = super.d;
                    try { v84(); } catch (e) {}
                    return a82;
                }
                [1];
                static [1] = 255;
                [255];
                constructor(a87, a88) {
                    function f91(a92, a93, a94, a95) {
                    }
                    for (let v96 = 0; v96 < 500; v96++) {
                        f91();
                        try {
                            a87 &= -969736.5678795932;
                        } catch(e98) {
                            const v100 = new Uint32Array();
                            const o105 = {
                                [v100](a102, a103, a104) {
                                },
                            };
                        }
                    }
                }
                f = -65536;
            }
            const v106 = new C80();
            const v107 = new C80();
            let v109 = -65536n;
            let v111;
            try { v111 = v106.m(1n, -2037093963n, -2037093963n, 1); } catch (e) {}
            function f112(a113, a114, a115) {
                let v116;
                try { v116 = v111(a114); } catch (e) {}
                v116 = a115;
                v109 >>= a115;
                v106[10] = 1n;
                v107.f;
                return v109;
            }
            const v120 = ("gYPHN").normalize("NFKD");
            try {
                ("constructor").localeCompare(v120);
            } catch(e122) {
            }
            return v120;
        },
    };
    return o123;
}
const v124 = f53();
const v125 = f53();
const v126 = f53();
class C127 {
    #h = v124;
    static #e;
    constructor(a129, a130) {
        for (let i132 = 0; i132 != 9; i132++) {
            Object.defineProperty(v126, f53, { set: f53 });
            v125[i132] **= a129;
        }
    }
}
new C127(v125, v124);
new C127(v126, v124);
new C127(C127, v126);
try {
const t0 = 0.44967380041772886;
t0();
} catch (e) {}
const v144 = /((?<=a))/gudm;
const v145 = /gk4b*/vmsy;
let v147;
try {
const t0 = -1.3832922122240728e+307;
v147 = t0(2);
} catch (e) {}
for (let v148 = 0; v148 < 5; v148++) {
    try { v147(v144, v148, v145); } catch (e) {}
}
