const v0 = [1024,-2147483648,-16,-11,1073741823,1895347767,-9007199254740992,4];
([1073741824,1073741823,1376142744,1073741825]).forEach(v0);
new Int8Array();
const v7 = new Uint16Array(8);
const o8 = {
    ...v7,
};
const v9 = [65536,0,128];
const v10 = [-440877732,16,-11,-51157,727558230];
function f11() {
    return v9;
}
const v12 = [v9];
[v0,v10,f11,v0,v0];
[v9,v0,v9,f11,v0];
class C18 {
    3290087062;
}
const o21 = {
    get e() {
        try {
        } catch(e20) {
        }
    },
};
[-4294967296,44741,12,-9223372036854775808];
[16,536870889,2026916883,-31584,256];
%OptimizeFunctionOnNextCall(f11);
class C24 {
}
class C26 extends WeakSet {
    m(a28) {
        Object.defineProperty(this, 10, { writable: true, enumerable: true, value: a28 });
    }
    129;
}
new C26();
[-48335,1,128,60028111,-2,1658939879,255,2147483647,27555];
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        BigInt.toString = BigInt;
        BigInt(BigInt);
        class C36 {
            4259938026;
        }
        for (let i = 0; i < 5; i++) {
            const v37 = -0;
            const v38 = v37 ^ v37;
            v38 / v38;
        }
        new F31();
    } catch(e41) {
    }
}
new F31(v12, v9);
