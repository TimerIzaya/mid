function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 9;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
v6.f = v6;
-1 * -1;
let v11 = -4.637582013642067;
const v12 = v11++;
v12 != v12;
-Infinity;
function F17() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -1073741824;
    } catch(e20) {
    }
    try {
        this.name = -1073741824;
    } catch(e21) {
    }
}
const v22 = new F17();
const v23 = new F17();
const v24 = new F17();
v24.d = v24;
v24.name = v24;
const v25 = /Q/dy;
const v26 = [-6.104504038584553,4.0,-452697.8403307203,-1000000000.0,2.220446049250313e-16,0.0,0.0,1.1099483472382532e+307,439.1525938198956,NaN];
[-745.4931543718994,-3.4669621414733314,454.1640504221182];
const v28 = [-1.7289655295341637e+308,-1000000.0];
let v30 = v26["pop"]();
v30++;
const v32 = v25?.test;
const v33 = v32?.apply;
try { new v33(1000000.0, v26); } catch (e) {}
try { new v32(v23); } catch (e) {}
const v36 = /ZKfoo(?!bar)baz/dimy;
/X/udms;
try { ("bigint").normalize(); } catch (e) {}
try { ("bigint").padStart(F17); } catch (e) {}
-7 & -7;
class C48 {
    constructor(a50, a51) {
        const v52 = this?.__defineGetter__;
        try { new v52(a50, this); } catch (e) {}
        try { new a50("-9007199254740992", this); } catch (e) {}
        const v55 = a51 - a51;
        for (let v56 = 0; v56 < 5; v56++) {
            /(?:a*)+q(?<a>.)/guds;
            for (let i60 = 0, i61 = 10;
                i60 < i61;
                (() => {
                    i61--;
                    3768 - 3768;
                    BigInt64Array.BYTES_PER_ELEMENT = BigInt64Array;
                    const v69 = new BigInt64Array(3768);
                    v69[1760];
                    function f71(a72, a73) {
                        try { new a72(this, -1, a50); } catch (e) {}
                        const v75 = a72++;
                        ~v75;
                        const v77 = v75 >> v75;
                        let o78 = {
                        };
                        [,...o78] = v69;
                        return v77;
                    }
                    f71(BigInt64Array, v69);
                    v28[v69] = v55;
                    for (let v80 = 0; v80 < 32; v80++) {
                        v80--;
                        this["p" + v80] = v80;
                    }
                })()) {
                i61 - i61;
                const o87 = {
                };
            }
            const o88 = {
            };
            o88.f = o88;
        }
    }
}
C48.e = C48;
const v89 = new C48(C48, -7);
v89.p7 = v89;
const v90 = v89?.constructor;
v90.e;
try { new v90(v89, v22); } catch (e) {}
const v93 = new C48(C48, v89, "129");
const v96 = -1.7976931348623157e+308 < -1.7976931348623157e+308;
v96 || v96;
function f98() {
    return v5;
}
f98.caller = f98;
64 - 64;
try { new Uint8Array(-929889341, -929889341, v6); } catch (e) {}
const v103 = new Uint8Array(64);
const v104 = v103[25];
v104 >>> v104;
64 << 64;
try { new Float32Array(v93, Float32Array, Float32Array); } catch (e) {}
Float32Array.name = Float32Array;
new Float32Array(64, -1.7976931348623157e+308, v6);
try { new Uint8Array(Uint8Array, v90, v36); } catch (e) {}
new Uint8Array(v5);
const v115 = [];
try { Float32Array.bind(512); } catch (e) {}
const v119 = new Float32Array(4061, 4061);
const v120 = v115.constructor;
let v121;
try { v121 = new v120(v115); } catch (e) {}
try { v121.pop(); } catch (e) {}
class C123 extends v120 {
    [v119] = v119;
    70;
}
C123.name;
C123.a = C123;
new C123();
