function f0() {
    const o15 = {
        toString(a5) {
            const v7 = this.__proto__ | this;
            try { a5(v7, v7, v7); } catch (e) {}
            for (let v9 = 0; v9 < 83; v9++) {
                Object.defineProperty(this, 1341, { configurable: true, get: f0, set: f0 });
                try {
                    const t8 = "e";
                    t8.h = v9;
                } catch(e10) {
                }
            }
            return v7;
        },
        p(a12, a13) {
            a13?.[a13];
            return this;
        },
        2565: "e",
        ..."e",
    };
    return o15;
}
const v16 = f0();
const v17 = f0();
const v18 = f0();
class C22 {
    constructor(a24, a25, a26, a27) {
        try {
            this.fuck(a27, a27, [this,v16,a24,a26,1194039576n]);
        } catch(e30) {
        }
        let v33 = 10;
        for (; v33--;) {
            this[Symbol.iterator] = 1194039576n;
        }
        new Uint8ClampedArray(356);
        C22 <<= a24;
        [0.9613441472442681,-1000000000000.0,-Infinity,-385266.11678352114,-1e-15,0.2792136911957166,-12030.170275749755,-1000000000000.0];
        [-1.1932436736467009e+308,0.3631670157892336,-2.2250738585072014e-308,0.17915487615575842,-1000000000000.0];
        [-0.0,-1.6868754212238756e+307,1000000000.0,-4.0,0.19327035970449935,2.846179642247982,-9.289315292049956e+307,6.515822070634314,120308.53071222827];
        const o43 = {
            "maxByteLength": 268435440,
        };
        const v45 = new SharedArrayBuffer(1024, o43);
        new Float64Array(v45);
        new BigUint64Array(64);
        new Uint32Array(220);
    }
}
const v54 = new C22(f0, C22, v18, v18);
new C22(128n, v54, v54, v16);
new C22(v17, v54, v17, v16);
[-4294967295,4294967297,65535];
[14,-4294967297,22245,-65537,-9007199254740992,-16];
[-306881749,-10,-11659,-1,59334];
function F60() {
    if (!new.target) { throw 'must be called with new'; }
}
class C62 extends F60 {
    static {
        try {
            this.fuck(this, this, F60);
        } catch(e65) {
        }
    }
    static 10;
}
