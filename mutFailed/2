const v0 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
Date.now();
new Int32Array([-4563]);
const v6 = [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
[v6,-2];
function f9(a10, a11) {
    f9();
    return f9;
}
f9.length = f9;
const v13 = [-16,5,4096,47293,-4294967296,-1259863021,-4294967297,-9007199254740991,26231];
const v14 = [4294967297];
const v15 = [-4.434707465137368,-3.0,-5.378132152056794,2.0];
const v16 = [1.7091873399719482e+308];
const v17 = [1000000000.0,-1e-15,-3.0];
let v18;
try { v18 = v17.copyWithin(f9, f9); } catch (e) {}
try { new Date(-2, v0, v0, v0, -2, -2, v6); } catch (e) {}
const v21 = new Date();
function f22() {
    return v14;
}
f22.length = f22;
[v16,[v21,v21],v15,v16,v0];
[v17,v0,v16,v15,v13];
function f28(a29, a30) {
    Array(3).unshift(3, a29);
    return f28;
}
const v36 = new Uint8Array(165);
const v37 = v36.BYTES_PER_ELEMENT;
v36.lastIndexOf();
3398 >>> 3398;
for (const v43 in Array(3398)) {
}
try { new BigInt64Array(v17, Uint8Array, 4); } catch (e) {}
new Float32Array([10000]);
const o50 = {
    "type": "minor",
};
const v51 = new v37(4);
v51[1];
function f53(a54, a55, a56) {
    return a54;
}
const v59 = new BigUint64Array(208);
function f60(a61, a62) {
    v59.filter(a61);
    return f60;
}
new Float32Array(3);
v18.construct(Uint32Array, [v51]);
function f73() {
    return f73;
}
const v75 = ("boolean").normalize();
v75[1] = v75;
const v76 = new Uint32Array(2);
v76[1];
BigInt64Array.a = BigInt64Array;
new BigInt64Array(256);
let v81 = 268435440n;
const v82 = /xEz\xe2\x81\xa3/gumy;
function f83(a84, a85, a86) {
    return v82;
}
f83.length = f83;
class C88 {
    static {
        Object.defineProperty(this, -30745, { writable: true, enumerable: true, value: this });
    }
}
~v81;
--v81;
Math.atan(0.6146752851534484);
Symbol.toPrimitive.description;
Symbol.for("minor");
class C100 {
}
function F101(a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
}
const v105 = new F101(F101, F101);
Math.asinh(~v105);
