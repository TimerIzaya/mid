const v0 = [];
const v3 = new Float64Array(Float64Array);
v3[1] = v3;
let v4 = 3523;
const v5 = v4++;
const v8 = new Float64Array(-v5);
let v9;
try { v9 = v8.slice(v3, v0); } catch (e) {}
let v10;
try { v10 = v8.reduce(v5); } catch (e) {}
const v13 = new v10(15);
let v14 = 3;
v14 * v14;
try { new Int32Array(v0, v13, Float64Array); } catch (e) {}
const v18 = new Int32Array(v14);
v18[2];
let v20 = 64;
v20--;
const v23 = new Uint8ClampedArray(v8);
v23[2815] = v23;
v23[558] = v23;
const v25 = v14++;
try { new BigUint64Array(Float64Array, v25, v25); } catch (e) {}
const v28 = new BigUint64Array(255);
const v29 = [];
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this?.__defineSetter__;
    try { new v35(v29, v29); } catch (e) {}
    const v37 = v8?.constructor;
    try { new v37(); } catch (e) {}
    this.c = Map;
    try {
        this.e = v29;
    } catch(e39) {
    }
    try {
        a34.a = v4;
    } catch(e40) {
    }
    const v43 = new v10(9);
    const v44 = v43.reverse();
    let v45;
    try { v45 = v44.indexOf(v3); } catch (e) {}
    v28 * v45;
}
new F31();
new v9();
