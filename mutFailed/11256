const v2 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
v2.__proto__ = v2;
(-184720234n).__proto__;
const v6 = new Float32Array(128);
let v8 = 0;
while (v8 < 4) {
    new Int32Array(64);
    new Float64Array(2774);
    new Int8Array(1159);
    v8++;
}
new Int8Array(3);
const v25 = new Int32Array(255);
const v27 = new Set();
[Int8Array,Int8Array,Float32Array,Int8Array];
const v29 = [128];
const v30 = [v29,Set,Int8Array,255,v29];
class C35 {
}
function f36(a37, a38) {
    function f39(a40) {
        return arguments;
    }
    const v42 = f39(f36, a37, a37, a38);
    const o43 = {
        ...v42,
    };
    v25.reverse(a37, 255, a37, a37, o43, v6);
    new Int32Array(o43, 128);
    f39(v27);
    %PrepareFunctionForOptimization(f39);
    f39(v27);
    f39(v27);
    %OptimizeFunctionOnNextCall(f39);
    f39(v27);
    return o43;
}
function* f50(a51, a52) {
    try { a52(a52, -167849674, a52, 255, Int32Array, a52); } catch (e) {}
    const o54 = {
    };
    try {
        o54.a = a52;
    } catch(e55) {
    }
    try {
        const o56 = {
        };
        o56.a = a52;
        o56.d = v30;
    } catch(e57) {
    }
    try {
        const o58 = {
        };
        o58.a = a52;
        o58.d = v30;
        o58.b = a52;
    } catch(e59) {
    }
    try {
        const o60 = {
        };
        for (const v62 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
            ("-2").normalize("NFKC");
        }
        o60.a = a52;
        o60.d = v30;
        o60.b = a52;
    } catch(e66) {
    }
    yield* v6;
    return C35;
}
f50(v30, f36);
f36();
f36(-1000000000.0, C35);
