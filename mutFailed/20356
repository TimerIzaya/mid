function f3() {
    return 9007199254740991n;
}
const v6 = new Int8Array(Int8Array);
const v8 = new Float32Array(v6, 256n, Float32Array);
const v11 = new BigInt64Array(10);
function f12() {
    return 10;
}
class C13 extends f12 {
    constructor(a15, a16, a17, a18) {
        super();
        const v19 = [f12,f12,f12];
        v19.minimumIntegerDigits = a18;
        const v21 = [a16,v19];
        Reflect.apply(v8.toLocaleString, v11, v21);
    }
}
new C13();
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        v6.byteLength;
        return C13;
    }
    v11();
    %OptimizeFunctionOnNextCall(f26);
}
[f3];
[-1031613870,-1031613870,9007199254740991n,9007199254740991n];
[-1031613870,-128,f3,-1000000.0];
class C39 {
    9 = 6;
}
const v40 = new C39();
const v41 = new C39();
function F42(a44, a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.constructor;
    try { new v48(v41, 6, 6, a44); } catch (e) {}
    a44[9];
    a47--;
    try {
        this.c = -578828680;
    } catch(e52) {
    }
}
const v53 = new F42(v40);
new F42(v53);
