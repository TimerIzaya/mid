function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1073741823;
    } catch(e3) {
    }
    try {
        this.g = 1073741823;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function F8(a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a10;
    } catch(e11) {
    }
    try {
        this.f = v5;
    } catch(e12) {
    }
    try {
        this.e = a10;
    } catch(e13) {
    }
}
const v14 = new F8(v5);
const v15 = new F8(v5);
const v16 = new F8(v7);
class C17 {
    static get a() {
        function f19(a20, a21, a22, a23) {
            a23 %= a23;
            return this;
        }
        super[this] = f19(F8, this, v5, v16);
        try {
            super.m(v14, v5, v14);
        } catch(e26) {
        }
        return F0;
    }
    static [v6];
    static [F0] = F8;
}
const v27 = new C17();
new C17();
new C17();
function f30() {
    return v27;
}
class C31 extends C17 {
    #e = v15;
    static d = f30;
    toString(a33, a34) {
        a34 = v27;
        try {
            super.setMonth(F8, F8);
        } catch(e36) {
        }
        return this;
    }
    constructor(a38, a39, a40) {
        this.c |= C31.__proto__;
        a40[-2] = this;
        const v42 = v15.f;
        try {
            super.trim(v16, v15, F8, a38, v42);
        } catch(e44) {
        }
        super();
        const v45 = super.d;
        try {
            v45.toString = a38;
        } catch(e46) {
        }
    }
}
new C31(v5, v5, v15);
const v48 = new C31(v7, v5, v14);
let v49 = new C31(v48, v7, v14);
const v58 = new Uint8ClampedArray(16);
v58[10] = v58;
const v60 = -1322;
const v62 = new Uint8ClampedArray(1322);
const v63 = v62[315];
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "536870889";
    } catch(e70) {
    }
    try {
        this.b = a69;
    } catch(e71) {
    }
}
F64 - F8;
let v77 = -1119242736;
let v78 = -16455;
Math.expm1(F8++);
Math.acos(--v78);
++v77;
const v85 = new F64(1073741824n, 1073741824n, 257n, "6");
v85[2] = v85;
C31 *= F0;
v49 += v5;
Math.log(-9007199254740991);
Math.clz32(v15);
-9007199254740991 - v15;
Math.sinh(-9007199254740991);
Math.max(v15);
Math.sqrt(v62);
const v94 = new F64(1073741824n, 257n, 257n, v60);
const v95 = new F64(v63, 257n, 257n, "536870889");
new BigUint64Array(6);
3768 >>> 3768;
const v103 = new BigInt64Array(4046);
v103[123];
-115;
function f108(a109, a110) {
    a109++;
    a110 + a110;
    const v113 = a109++;
    v113 >> v113;
    try {
        v94.toString = a110;
    } catch(e115) {
    }
    Object.defineProperty(v95, v95, { configurable: true, enumerable: true, get: f108 });
    let o117 = {
        "d": a109,
        ...a109,
        get e() {
            return a110;
        },
    };
    [,...o117] = v103;
    a110[4046];
    const o121 = {
        "maxByteLength": 3035,
    };
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f108(4046, 3768);
try { Uint8ClampedArray.bind(f108); } catch (e) {}
