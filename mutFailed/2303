const v0 = [-1330109778,268435440];
const v1 = [-33763,255,13,3,-1,8];
[-850779561,-9007199254740991,257];
[10000,256,1205073869,-9,64,65535,3,58893,0];
const v7 = [12574,11];
const v8 = [-4294967295,13,128,-1598278491,-1,7,-32149,-2147483648];
try { v8.reduceRight(v8); } catch (e) {}
class C10 {
    static {
        try { new this(); } catch (e) {}
        const v18 = Symbol.iterator;
        const o27 = {
            [v18]() {
                let v20 = 10;
                const o26 = {
                    next() {
                        v20--;
                        const v24 = v20 == 0;
                        const o25 = {
                            "done": v24,
                            "value": v20,
                        };
                        return o25;
                    },
                };
                return o26;
            },
        };
        super.b = "p";
        try {
            v1.a = v0;
        } catch(e28) {
        }
    }
    #h;
}
new C10();
new C10();
const v31 = new C10();
const v32 = v31?.constructor;
try { new v32(); } catch (e) {}
function f34() {
    new f34();
    const v38 = v0[256];
    v1.length;
    try { v38(f34, -1334721725, v7); } catch (e) {}
    const v42 = Symbol.iterator;
    const o51 = {
        [v42]() {
            let v44 = 10;
            const o50 = {
                next() {
                    v44--;
                    const v48 = v44 == 0;
                    const o49 = {
                        "done": v48,
                        "value": v44,
                    };
                    return o49;
                },
            };
            return o50;
        },
    };
    256 >> 256;
    const o58 = {
        ...1.7976931348623157e+308,
        [-2]: 1.7976931348623157e+308,
        __proto__: 256,
        [1.7976931348623157e+308](a54) {
            0 < 10;
        },
    };
    o58.e = o58;
    return o58;
}
try { f34.call(237453866); } catch (e) {}
const v60 = f34();
class C61 extends f34 {
    3164398692 = v60;
    10000 = f34;
}
const v62 = new C61();
try { v62.toString(); } catch (e) {}
new C61();
C61[741] %= 13;
let v66 = 0;
v66 ^ v66;
while (v66 < 7) {
    function f70(a71, a72, a73) {
    }
    try { f70(v60, v60, v1); } catch (e) {}
    v66++;
}
