class C3 {
    constructor(a5, a6) {
        const v7 = this != this;
        this[v7] |= 1000000000.0;
        let v8;
        try {
        const t0 = 1000000000.0;
        v8 = new t0(a5, a6, this, 1000000000.0);
        } catch (e) {}
        v8[2524324493] = v8;
        super.h = a6;
        try { C3(this, 2.220446049250313e-16, v7, a6); } catch (e) {}
        v8[C3] /= 2.220446049250313e-16;
        const v10 = 1000000000.0 in a5;
        try { v8(1000000000.0, Infinity, v10, C3); } catch (e) {}
    }
    p(a13) {
        let v14;
        try { v14 = this.o(a13, a13, this, a13); } catch (e) {}
        let v15 = this[16];
        super[v14] = this;
        const v18 = v15 >>> v15;
        Math.exp(v14);
        Math.log2(v14);
        v15++;
        super.c = Infinity;
        Math.max(268435439);
        ~v18;
        Math.cbrt(268435439);
        !268435439;
        return 2.220446049250313e-16;
    }
}
const v29 = new C3(2.220446049250313e-16, 2.220446049250313e-16);
const v30 = new C3(Infinity, 1000000000.0);
const v31 = new C3(2.220446049250313e-16, 2.220446049250313e-16);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = Infinity;
    } catch(e38) {
    }
    try {
        this.b = a37;
    } catch(e39) {
    }
}
const v40 = new F32(v29, v30, v30, 1000000000.0);
const v41 = new F32(v31, v31, v40, 2.220446049250313e-16);
new F32(v40, v31, v41, Infinity);
new BigUint64Array(188);
new Int32Array(16);
new Int8Array(4024);
const v53 = new Map();
function f54(a55) {
    return a55;
}
Object.defineProperty(v53, "g", { configurable: true, enumerable: true, get: f54, set: f54 });
Math.log1p();
