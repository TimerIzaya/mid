function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 255;
    } catch(e3) {
    }
    try {
        this.f = 255;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
v7.c = v7;
[3.0];
const v9 = [359.0686077266132,2.220446049250313e-16];
let v10;
try { v10 = v9.reduce(v5); } catch (e) {}
const v11 = [3.0,1000000000000.0,-4.0,217.25789532355134,-0.0,-1e-15,-1000000000000.0,-1000.0,1000000.0];
function f12(a13, a14, a15) {
    const v16 = a13.f;
    v16 - v16;
    const v18 = a14?.constructor;
    try { new v18(); } catch (e) {}
    try { new v9(); } catch (e) {}
    v9.c;
    a15.f;
    const o37 = {
        "b": a14,
        "d": a14,
        "e": a15,
        2: a13,
        ...v11,
        "g": a13,
        set h(a24) {
            try {
                a24.valueOf = a24;
            } catch(e25) {
            }
            Object.defineProperty(v9, "length", { writable: true, configurable: true, value: a14 });
            super[v11] = v5;
            const v28 = new Int8Array(v10);
            v28.lastIndexOf(1392);
            return 369263011;
            super.f;
        },
        o(a33) {
            const o35 = {
            };
            gc(o35);
        },
    };
    o37[5] = o37;
    const v38 = o37?.__lookupSetter__;
    try { new v38(v6); } catch (e) {}
    return o37;
}
const v40 = f12(v7, v6, v5);
const v41 = f12(v7, v6, v7);
const v42 = f12(v6, v7, v6);
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this?.constructor;
    try { new v48(a46, v42, a45); } catch (e) {}
    a45[8] = a45;
    a45.c = a45;
    try {
        this.f = v9;
    } catch(e50) {
    }
}
let v51;
try { v51 = new F43(v40, F43, v42); } catch (e) {}
v51.f = v7;
const v52 = new F43(v6, v11, v40);
v52.f = v52;
new F43(v6, v9, v42);
const v54 = new F43(v6, v11, v41);
v54?.constructor;
let v56;
try { v56 = new v41(f12, f12, f12); } catch (e) {}
v56.message;
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    a61.caller = a63;
}
const o64 = {
};
v54.f = v54;
try { ("NFC").trim(); } catch (e) {}
const v68 = ("undefined").normalize("NFC");
let v69;
try { v69 = v68.toLocaleLowerCase(); } catch (e) {}
try { v69.strike(); } catch (e) {}
