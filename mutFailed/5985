const v3 = new SharedArrayBuffer(945);
v3.slice();
function f5() {
    return f5;
}
const v6 = /(?:a*)+q(?<a>.)/guds;
function f7(a8) {
    const v9 = a8?.constructor;
    try { v9(a8, f5); } catch (e) {}
    const o12 = {
        get d() {
            return a8;
        },
        __proto__: v6,
    };
    return o12;
}
for (let v13 = 0; v13 < 50; v13++) {
    f7(v6);
}
const t20 = "-5144";
new t20();
const v23 = new Float32Array();
const v25 = new Uint8Array(268435440);
v25[6] = v23;
[9007199254740991];
const o36 = {
    toString(a30, a31, a32, a33) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
[8,16,6,-7,6];
[-12];
const v42 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f43(a44) {
    a44 ^ a44;
    return -7281;
}
function f46(a47, a48) {
    a48.length;
    return f43;
}
const v51 = new Promise(f46);
v51[v42] += -7281;
/a{0}+/;
const v54 = [Set];
class C55 extends Set {
    constructor(a57, a58, a59) {
        super(v54);
    }
}
/H/uis;
/ow[\cZ]Y5[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/vdis;
const v65 = !0.8843420658768774;
for (let v66 = 0; v66 < 25; v66++) {
}
Math.tan();
const v69 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v69.concat(v69);
Math.pow(v65, -60544);
