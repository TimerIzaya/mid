[-9223372036854775807,-3836];
const v7 = [19405,-307947324,-1024,64,-65535,1073741824,-5068];
[-268435456,512,1073741825,4,-8];
const v12 = [1000000000000.0,1000.0,-207481.38297317945,-321.2281923502869];
try { v12.concat(v7); } catch (e) {}
[1.0,NaN,4.0,404.1070452258173,-804910.3351194076,-1000.0,1000000000.0,-1000000000000.0,0.6906611976028791,2.2250738585072014e-308];
[0.3950753905869937,9.54598431061573e+307,0.6995973314893119,-1.7976931348623157e+308,-Infinity,-1000000.0,Infinity,2.0,-298.8352963387688];
let v19 = Float32Array.length;
v19--;
127 / 127;
class C23 {
}
const v24 = new C23();
class C25 {
    static g = v24;
    static {
        delete this.g;
    }
}
C25.length = C25;
try { C25.bind(v24); } catch (e) {}
BigInt64Array.g = BigInt64Array;
const v32 = Symbol("bZ");
[Float32Array];
function f35() {
}
f35.prototype;
[[f35,f35],f35];
"127" == "127";
("5")[0];
try { ("5").split("4294967295", v32); } catch (e) {}
let v48 = 228;
v48++;
const v50 = new Array(v48);
v50.e = v50;
class C51 {
    static {
        function F53(a55, a56) {
            if (!new.target) { throw 'must be called with new'; }
            a56.prototype = a56;
            function f57() {
                function f58(a59, a60) {
                    class C61 {
                        #valueOf(a63, a64) {
                        }
                        constructor(a72, a73) {
                            for (let i76 = a55, i77 = 3; a60 < 3;) {
                            }
                            for (let i86 = 0, i87 = -1540955429;
                                (() => {
                                    const v88 = i86 < i87;
                                    a72.#valueOf();
                                    return v88;
                                })();
                                ) {
                            }
                        }
                    }
                    return F53;
                }
                f58.name = f58;
                return "127";
            }
            function f96(a97) {
                ("h").split(65535);
            }
            const v101 = f96?.constructor;
            try { new v101(F53); } catch (e) {}
            Object.defineProperty(this, "constructor", { configurable: true, get: f57, set: f96 });
            const v103 = this?.constructor;
            try { v103.toLocaleLowerCase(); } catch (e) {}
            try { new v103(v48, v19); } catch (e) {}
        }
        new F53(v50, this);
        new F53(Array, F53);
    }
}
try { C51(); } catch (e) {}
try {
    function F109() {
        if (!new.target) { throw 'must be called with new'; }
    }
    F109.caller = F109;
    const v111 = new F109();
    const v113 = new Date();
    try { v113.getUTCFullYear(); } catch (e) {}
    function f115() {
        return Date;
    }
    v111.toString = f115;
    try { Reflect.set(v113, v111); } catch (e) {}
} catch(e118) {
}
let v119 = 0;
v119 << v119;
do {
    v119++;
} while (v119 < 9)
