function f0() {
    let v1 = "-256159335";
    21917 << 21917;
    const o30 = {
        "f": v1,
        "b": 21917,
        toString(a6) {
            v1 & "m";
            Math.trunc(v1);
            v1++;
            return 21917;
        },
        [v1](a13) {
            %OptimizeFunctionOnNextCall(Date);
            const v17 = Math.acosh(1073741825);
            for (const v18 in this) {
                new Float32Array(1439);
                function F22(a24, a25) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v27 = [Reflect,v1,a13];
                Reflect.apply(this.toString, a13, v27);
            }
            return v17;
        },
    };
    o30[Symbol.toPrimitive] = f0;
    return o30;
}
const v33 = f0();
f0();
const v35 = f0();
try { ("Ut0RN").codePointAt("1000"); } catch (e) {}
4.0 | 4.0;
[1000000000.0,-1.0];
const v45 = [-214.75542767945012,Infinity,-4.0,352374.24624437955,-1.5979668559337818e+308,-620958.8604312716,1e-15];
const v46 = [960.7050839061703,NaN,0.7407547220131361,NaN,1000000000000.0,1.3756121212434467e+308,-1000000000.0,5.0,-2.220446049250313e-16];
try { v46.toSorted(v35); } catch (e) {}
const v48 = ("1000").constructor;
try { new v48(v33); } catch (e) {}
[v46,v46,v46,v46,v46];
let o55 = {
    get a() {
        const o53 = {
        };
        gc();
    },
};
const v57 = [];
o55--;
const v61 = [-268435456,1000];
Object.defineProperty(v61, "toString", { writable: true, enumerable: true, value: f0 });
class C62 {
    constructor(a64, a65, a66, a67) {
        a64--;
        a66 | a66;
        a67--;
        let v71 = 0;
        do {
            let v73 = 30918;
            const v74 = v73--;
            v74 / v74;
            let v76 = v61 ^ v61;
            Math.random();
            Math.exp(v61);
            v74 >> v61;
            Math.ceil(v74);
            ++v76;
            v71++;
        } while (2 != 2, v71 < 2)
    }
}
new C62(2, v57, 2, -1);
new Date();
function f91() {
    return 9;
}
function F92(a94) {
    if (!new.target) { throw 'must be called with new'; }
    a94.toString = f91;
    this >>> a94;
    try {
        a94 *= this;
        const v96 = 139837843 in this;
        0 / 0;
        const v100 = 0 <= 0;
        v100 && v100;
        const v103 = new Int8Array(0);
        const v104 = v103?.keys;
        try { new v104(); } catch (e) {}
        for (const v107 in v103) {
            0 ^ v100;
            Object.defineProperty(this, this, { writable: true, configurable: true, enumerable: true, value: v96 });
            this[129] = v107;
        }
        new BigUint64Array(10);
        const v112 = 128 !== 128;
        v112 || v112;
    } catch(e115) {
    }
}
let v116;
try { v116 = F92.bind(v45); } catch (e) {}
new F92(F92);
const v118 = new F92(64);
v118.length = v116;
v118.length;
