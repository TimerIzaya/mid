function f0() {
}
class C2 {
    static {
        for (let v4 = 0; v4 < 25; v4++) {
            const v5 = [601759695];
            const v6 = [1073741824,1073741823,1376142744,1073741825];
            function f8(a9, a10, a11, a12) {
                try { new a9(); } catch (e) {}
                a11 << a11;
                function f16() {
                    return a9;
                }
                const v18 = new Int8Array();
                const v21 = BigUint64Array * 536870887;
                v21 - v21;
                Number.isNaN(v21 ** v21);
                function f26(a27, a28) {
                }
                try { f26(); } catch (e) {}
                const v31 = v18.buffer.__defineGetter__;
                try { v31(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f16);
                let v34;
                try { v34 = v6["find"](..."find", a12, ...v5); } catch (e) {}
                const o35 = {
                };
                v34 <= a11;
            }
            for (let v37 = 0; v37 < 5; v37++) {
                f8(this, v37, v37);
            }
        }
    }
}
const v40 = new Uint8ClampedArray(861);
const v43 = new Float64Array(5);
let v46 = new Uint16Array(37);
class C47 extends f0 {
    [f0] = 861;
    constructor(a49, a50, a51) {
        super();
        a49 = a50;
        try {
            v40.__proto__ = v46;
        } catch(e52) {
        }
    }
    static #e = v43;
    static a = Uint8ClampedArray;
    static #d;
    [Uint8ClampedArray] = Uint8ClampedArray;
    a;
    static 5;
}
const v53 = new C47(37, 5, 37);
new C47(5, 5, 37);
new C47(861, 861, 37);
const v56 = [f0];
const v57 = [v56,C47,v46,v56,v53];
const v58 = [1073741824,1073741823,1376142744,1073741825];
let v59 = Float64Array;
v58.forEach(v59 = Uint8ClampedArray);
const v62 = Symbol.toPrimitive;
function f63() {
    v46 *= v62;
    return v59;
}
[Uint16Array,v53,v43,v57,v43];
class C66 {
}
const v69 = new BigInt64Array(2325);
for (const v70 in v69) {
}
const v72 = [601759695];
const v73 = [1073741824,1073741823,1376142744,1073741825];
function f74(a75, a76, a77, a78) {
    WeakMap(v46);
    try { new a76(C2); } catch (e) {}
    class C82 {
    }
    new C82();
    function f84() {
        const o88 = {
            toString(a86, a87) {
                return a75;
            },
        };
        const v89 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
        const v90 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
        class C91 {
            constructor(a93, a94) {
                super[v90] = v89;
            }
        }
        const v95 = new C91(v89, v90);
        [v95];
        o88.toString();
        const o105 = {
            [-4294967297n](a99, a100, a101, a102) {
                eval();
            },
        };
        return o105;
    }
    Math.PI;
    const v109 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
    try { v109.filter(59890n); } catch (e) {}
    f84();
    try { ("").charCodeAt(Map); } catch (e) {}
    eval(a78);
    %OptimizeFunctionOnNextCall(f84);
    try { v73["find"](..."find", a78, ...v72, ...v73); } catch (e) {}
    return a77;
}
for (let v118 = 0; v118 < 10; v118++) {
    f74(-4294967297n, -4294967297n, v118, v118);
}
%OptimizeFunctionOnNextCall(f74);
f74();
