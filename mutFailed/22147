function f3(a4, a5) {
    const o27 = {
        set g(a7) {
            const v8 = a4?.[0];
            let v9 = this[10];
            super.d &&= 8;
            var f = f3;
            v9 = v8;
            Math.atan(9.826689146925307e+307);
            new Uint8Array(3408);
            new Uint8Array(10);
            new Int8Array(16);
            !-1316212048;
            13 - a5;
            +13;
        },
        "h": a5,
    };
    return o27;
}
f3(65535, -13);
const v29 = f3(8, 65535);
function f30(a31) {
    return f3;
}
class C32 extends f30 {
    [v29];
    0 = f30;
}
f3(8, 65535);
class C37 extends f3 {
    set h(a39) {
        a39 > 8;
        let v42 = 41872;
        +a39;
        const v45 = v42--;
        const v46 = v42 & this;
        +v42;
        v45 * a39;
        Math.trunc(v46);
    }
}
new C37();
new C37();
let v52 = new C37();
const v54 = new Float32Array();
for (let v55 = 0; v55 < 25; v55++) {
    function f56(a57, a58, a59, a60) {
        a57[1];
        const v62 = a58--;
        v55[0] = a57;
        const o65 = {
            1073741825: "MIN_VALUE",
        };
        v52--;
        try { ("f").split("f"); } catch (e) {}
        let v69 = 7;
        Math.floor(v69++);
        0.18056229802224566 | -1;
        +v69;
        v62 * 0.18056229802224566;
        const o77 = {
            __proto__: o65,
        };
        const v78 = arguments.__lookupGetter__;
        try { v78.constructor(v54, a59, v55); } catch (e) {}
        return v78;
    }
    for (let v80 = 0; v80 < 10; v80++) {
        f56(v54);
    }
}
function f82(a83, a84, a85) {
    let v86 = [1073741824,1073741823,1376142744,1073741825];
    function f87(a88, a89, a90, a91) {
        function f92() {
            return a91;
        }
        class C93 extends f92 {
        }
        for (let v94 = 0; v94 < 5; v94++) {
            try {
                v86 &= C93;
            } catch(e95) {
            }
        }
        return Float32Array;
    }
    for (let v96 = 0; v96 < 5; v96++) {
        f87(f82, v86, v96, v86);
    }
    %OptimizeFunctionOnNextCall(f87);
    return a84;
}
const v98 = f82(Float32Array, v54, v54);
const o99 = {
    "isExtensible": f3,
};
new Proxy("f", o99);
f82(f82, f82, v98);
