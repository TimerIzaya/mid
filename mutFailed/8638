const v1 = [1073741824,1073741823,1376142744,1073741825];
function f2() {
    try {
        v1.forEach();
    } catch(e4) {
        const v6 = new Float32Array(5.0, 5.0);
        function f7() {
            return v1;
        }
        Object.defineProperty(v6, "h", { configurable: true, enumerable: true, get: f7 });
    }
    return f2;
}
gc();
class C12 {
    constructor(a14, a15, a16, a17) {
        a17.match(a16);
    }
}
new BigInt(2609);
for (const v24 in "toString") {
}
const v33 = [Float32Array];
/9f8\xf0\x9f\x92\xa9/diy["compile"](BigInt);
let v38 = "atan2";
v38++;
const v40 = Symbol.isConcatSpreadable;
const v42 = new Map();
v42.constructor;
for (let [v45,...v46] of "atan2") {
}
v33[v40] = Float32Array;
v33["number"]();
