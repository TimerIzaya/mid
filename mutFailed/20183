class C3 {
    static toString(a5, a6) {
        a6 &&= this;
        a5[9] **= a5;
        d = -4096;
        try {
            a5.toString = a5;
        } catch(e8) {
        }
        return this;
    }
    e;
    [268435440];
}
C3.h = -4096;
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    function f18() {
        return "search";
    }
    function f19(a20) {
        const o24 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o24);
    }
    Object.defineProperty(a15, "a", { writable: true, get: f18, set: f19 });
    try {
        v9.a = a15;
    } catch(e26) {
    }
    try {
        C3.h = v11;
    } catch(e27) {
    }
}
new F12(-4096, v9, v10, v10);
new F12(v11, v10, 268435440, v10);
new F12(v9, v9, v11, v11);
new Int32Array(3743);
new Uint8ClampedArray(3776);
new BigInt64Array(10);
new Uint16Array(127);
new Uint8Array(255);
new BigInt64Array(179);
[];
const v55 = new Int8Array(16);
v55.toSorted();
function f57() {
}
class C58 {
    o(a60, a61) {
        for (const v63 of "bigint") {
        }
        f57();
    }
}
[f57];
[f57,65537n,C58];
const v70 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
const v73 = new BigInt64Array(205);
const v74 = v73[205];
try {
    v74.toString = v74;
} catch(e75) {
}
const v76 = [-1803975943,57715,-9007199254740992];
[2147483647,13,536870912,-13,-1024,536870887];
const v81 = new Uint8ClampedArray(1000);
v81[Symbol.toPrimitive] = f57;
v81 ^ 3;
const v87 = +268435440;
v87 + -3.0;
[[1000.0,8.806760127177498,["undefined",8.806760127177498,v76,345168.6487633812,"undefined"],v70,v76]];
const v97 = (a98, a99, a100) => {
    try { ("function")["toUpperCase"](); } catch (e) {}
    "-268435456" ^ a98;
    class C105 {
        9 = 6;
    }
    return v87;
};
Symbol.unscopables;
class C108 {
}
const o111 = {
};
const v113 = new ArrayBuffer(2, o111);
const v115 = new Int8Array(v113);
const v116 = [-4096,13,16,6];
Object.defineProperty(v116, "valueOf", { writable: true, value: Symbol });
v116 + v115;
Symbol.iterator;
const v121 = [];
function f122() {
    const o126 = {
        toString() {
            super[this];
        },
        ...v121,
        n() {
            return this;
        },
    };
}
f122();
function f129() {
    function f131() {
        return f131;
    }
    const v132 = [f131];
    new ArrayBuffer(Int8Array, v132);
    return v132;
}
Uint16Array[Symbol.toPrimitive] = f129;
new Uint16Array(4294967295, 4294967295);
const o142 = {
    m() {
        const o141 = {
        };
    },
};
const v144 = new Int32Array();
function F145(a147, a148, a149) {
    if (!new.target) { throw 'must be called with new'; }
    const v150 = this?.constructor;
    try { new v150(Uint16Array, a149, a149); } catch (e) {}
    a147 * a147;
    a149++;
    this.d = a147;
    this.g = Int32Array;
}
new F145(256, v144, 4294967295);
class C156 {
    constructor(a158, a159, a160) {
    }
}
Math.asinh();
new Float32Array(Float32Array, Float32Array);
