const v0 = [1e-15,1000.0,NaN,-2.220446049250313e-16,-0.0,-0.6385911758740992,1e-15];
[-1.0322690395120482,1000000000.0,-1e-15,4.942351109433417e+307,-2.220446049250313e-16,237.33490173307905];
const v2 = [0.05615875895895184,1.5946182403229544e+308,-369.1645255843514,256.3456838031375,1000000000000.0,331.257309029206,0.23040132593367058,-5.812648931223583];
const v3 = [-5.0,-0.0,1.4559217778044754e+307,-7.929729118720463,1000000000000.0,-2.220446049250313e-16,1.0];
[-1.0,1.2950128178012872e+308,-Infinity,-1000000000000.0,1.0,2.220446049250313e-16,1000.0];
const v5 = [-888069.590175245];
function f7(a8, a9, a10, a11) {
    let [v12,v13] = a10;
    v3 instanceof v13;
    const v16 = Symbol.search;
    a9[v16] = v16;
    return a8;
}
f7(v3, v2, v0, v5);
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v2;
    } catch(e24) {
    }
}
new F20(v2, v2);
new F20(v2, v3);
new F20(v3, v3);
const v28 = [257];
[256,-4294967297,536870912,-8,255,-2670];
v0.length = 0;
const v31 = v28[0];
try { v31(...v28, v28); } catch (e) {}
