const v0 = [];
function f1() {
    const o11 = {
        "e": v0,
        "h": v0,
        "a": v0,
        "b": v0,
        p() {
            const v3 = super.d;
            Uint32Array[1] = 15;
            new Float64Array(Uint32Array);
            super[v3] = v0;
            return v3;
        },
        3158430996: v0,
        3: v0,
        get b() {
            return f1;
        },
        __proto__: v0,
        get d() {
            super[v0];
            return this;
        },
        2: v0,
    };
    return o11;
}
f1();
f1();
f1();
/a{1,2}?[t(x)(x)(x)\3*]?/udmy;
/(?:a{5,1000000}){3,1000000}/gvis;
const v19 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
function F20(a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.__lookupGetter__;
    try { new v25(12); } catch (e) {}
    a23 + a23;
    try { a24.find(a22); } catch (e) {}
    try {
        this.d = a22;
    } catch(e29) {
    }
    try {
        this.b = a24;
    } catch(e30) {
    }
}
new F20(Int32Array, 12, v19);
/\ud808\udf45*/vdims;
new BigInt64Array(3394);
function f36(a37) {
    return a37;
}
function f38(a39) {
    return f36;
}
new Uint8ClampedArray(0);
new Uint8ClampedArray(145);
class C46 {
}
const v47 = new C46();
const v48 = v47.constructor;
let v49;
try { v49 = v48(v48, C46); } catch (e) {}
function f50() {
    const v52 = ("D")[0];
    try { v52.substring(v49); } catch (e) {}
    return v49;
}
%PrepareFunctionForOptimization(f50);
f50();
%OptimizeFunctionOnNextCall(f50);
f50();
