const v0 = [0.43236321793513977,-5.430514979298044,1000000.0,0.926107212500346,-241.6073481264474,-2.2250738585072014e-308,0.004072864301574941,1.7976931348623157e+308,269.2834454216779,0.0];
const v2 = new Uint8Array();
function f3(a4, a5, a6, a7) {
    a6++;
    const v9 = a6++;
    const v10 = a6 % a6;
    const o11 = {
        ...v2,
    };
    let v12;
    try { v12 = o11.n(v10, v9); } catch (e) {}
    return v12;
}
const v13 = [140.77897145699626,-46.15172759593554,2.0,NaN,9.88013187759092,1000000000000.0,1.602744322736759e+308,-120264.85451628815,-470.7974460615669];
[-426.1517335796656,1.1470425341513567e+308,4.0,3.0];
const v15 = [996895062,1024,-4294967295,-65537,255,5];
const v16 = [7,-38647,1024,-13,4096,6,268435456];
let v17 = 10;
for (; v17--;) {
}
const v19 = [38923,935701693,-4294967297,-268435456,255,-2046631736];
class C23 {
    static toString(a25, a26, a27) {
        a25 + this;
        this.a;
        return v13;
    }
    103 = v16;
    constructor(a32, a33, a34) {
        v13[a32] %= a32;
        [NaN,1000000000000.0,-532.524240144026,-2.220446049250313e-16,0.6214610241460751,-3.0,1.5885634117757266e+308,788208.0935898374,-260.4136621025091];
        [-161.59528238976748,5.0];
        [-4.4102443200595303e+307,757.1785374337717,-311265.69727383857,0.0,Infinity];
    }
    d = v15;
}
new C23(1073741824n, -9007199254740991n, 11n);
const v39 = new C23(v13, -9007199254740991n, 1073741824n);
new C23(v39, 1073741824n, -9007199254740991n);
class C41 extends C23 {
    valueOf(a43, a44) {
        class C45 {
            static [v19] = v0;
            d = -9007199254740991n;
            #b;
        }
        new C45();
        new C45();
        function f48(a49, a50) {
            return a50;
        }
        Set.toString = f48;
        new C45();
        return this;
    }
    static #b;
    static d = v19;
    b = C23;
}
const v53 = [0.0,1.0,-6.743702675363474,400.9902683003188];
let v54 = "string";
function f55() {
    for (let i58 = 0, i59 = 10;
        i58 < i59;
        (() => {
            const v63 = i58++;
            v63 >> v63;
        })()) {
        for (const v67 in v53) {
            v54 *= v54;
        }
    }
    return v53;
}
new C41();
new C41();
new C41();
("async").lastIndexOf();
