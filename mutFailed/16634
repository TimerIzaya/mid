new Int8Array(1);
const v5 = new Uint32Array(2532);
const v8 = new Uint8ClampedArray(14);
0n > 0n;
function f13() {
    return Int8Array;
}
WeakMap.g = WeakMap;
new WeakMap();
try { new Uint32Array(WeakMap, v5, v8); } catch (e) {}
const v18 = new Uint32Array();
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this?.constructor;
    try { new v21(); } catch (e) {}
}
F19.name = F19;
const v23 = new F19();
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
}
try { new F24(Int8Array, Uint8ClampedArray); } catch (e) {}
const v30 = new F24();
const v31 = v30?.constructor;
try { new v31(2532, WeakMap); } catch (e) {}
const v35 = [v18,v18,v18,v18];
4 % 4;
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = Date.toString(F38);
    try { v42.concat(v5); } catch (e) {}
    v42[23];
    class C45 {
    }
    try { C45.toString(); } catch (e) {}
    try { C45.m(); } catch (e) {}
    v18.constructor;
    6 | 6;
    const v52 = new Float32Array(6);
    const v53 = v52.fill();
    v42.replaceAll(v23, -37859n);
    const v55 = new Uint32Array(Uint32Array, Uint32Array, 4);
    const v56 = v55[2];
    v56 - v56;
    const v60 = new Set(v35);
    for (let [i64, i65] = (() => {
            ~10;
            return [0, 10];
        })();
        (() => {
            i65 + i65;
            const v67 = i64 < i65;
            v67 && v67;
            class C69 extends Date {
            }
            try { C69.now(); } catch (e) {}
            return v67;
        })();
        (() => {
            i65--;
            let v74 = i64++;
            v74++;
        })()) {
    }
    const v78 = v60.add;
    try { v78(0n); } catch (e) {}
    v78.f = v78;
    try { v78(); } catch (e) {}
    const v82 = v60["delete"](839612.5677247904);
    const v83 = v82 || v82;
    const v84 = v83 || v83;
    v84 || v84;
    !(v84 && v84);
    const v88 = v83 && v83;
    v88 && v88;
    v88 || v88;
    const o92 = {
    };
    o92.b = o92;
    try { Array(9223372036854775807); } catch (e) {}
    const v96 = ("getPrototypeOf").blink();
    try { v96.bold(); } catch (e) {}
    const v98 = v96[28];
    function f99() {
        return F24;
    }
    f99.g = f99;
    function f101(a102) {
        f99();
        return v82;
    }
    this.onmessage = f101;
    const v104 = v98.strike();
    v104[4] = v104;
    const v106 = v96.strike(591114.0785999324).replace(19793, v30);
    try { v106.codePointAt(v106); } catch (e) {}
    v106[11] = v106;
    class C109 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C110 extends C109 {
        static {
            this.name = this;
        }
        65537 = v53;
        ["getPrototypeOf"] = C109;
    }
    C110.prototype = C110;
    const v112 = new C110();
    v112[65537];
    const v114 = new C110();
    const v115 = v114.constructor;
    try { v115.bind(v84); } catch (e) {}
    new v115(v55, v23, 839612.5677247904);
    const v118 = new C110();
    v118.getPrototypeOf;
    const v121 = BigUint64Array.of();
    new BigUint64Array(v112, v121, v121);
    Int8Array.e = Int8Array;
    new Int8Array();
    const v125 = new C110();
    v125[65537] = v125;
    const t123 = v125.getPrototypeOf;
    new t123();
    const v128 = v125.getPrototypeOf;
    try { new v128(); } catch (e) {}
    let v130;
    try { v130 = new v128(-37859n); } catch (e) {}
    const v131 = v130?.constructor;
    try { new v131(); } catch (e) {}
    v130.getPrototypeOf = v130;
    new C110();
    const v135 = new String();
    Object.defineProperty(v135, 7, { configurable: true, enumerable: true, value: Int8Array });
    for (const v137 of Array(19793)) {
    }
    class C138 {
        static get b() {
        }
    }
}
const v140 = new F38();
try { v140.onmessage(591114.0785999324); } catch (e) {}
new F38();
