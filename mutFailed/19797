function f0() {
}
const v1 = [f0,f0,f0,f0,f0];
const v2 = [f0,f0,f0];
const v3 = [f0,v1];
function f4() {
    return v1;
}
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f0;
    try {
        this.e = f4;
    } catch(e11) {
    }
}
new F5(v2, v3);
const v14 = new BigUint64Array();
v14.toString = f4;
function F15() {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F15();
v17[Symbol.toPrimitive] = f4;
let v24;
try {
const t0 = "object";
v24 = t0(v17, "number", F15);
} catch (e) {}
function f25(a26) {
    return v24;
}
class C27 extends f25 {
    [v14] = "E";
    [v17] = -14n;
    268435441 = -14n;
}
new F5(v3, v2);
const v29 = new F5(v2, v1);
[-9223372036854775808,1073741825,1073741825,0,-46212,-1,-495736478];
function f32() {
    let v35 = 1864489360 << ("c").toLowerCase();
    const v36 = v35--;
    const v38 = new Date();
    const o39 = {
        "g": v38,
    };
    function f41() {
    }
    let v43 = 7;
    new Int8Array(964446029);
    v1[36] = Uint32Array;
    v29 % BigUint64Array;
    v43 &= 964446029;
    try {
        Date.d = v43;
    } catch(e51) {
    }
    let v52 = 0;
    v52++;
    v52 < 3;
    const v56 = new Uint32Array(16);
    Uint32Array.toJSON = v1;
    new Uint32Array(257);
    v43 &&= 1073741824;
    function f60(a61, a62) {
        const o63 = {
        };
        o63.e = f60;
        const o64 = {
        };
        o64.e = f60;
        o64.b = a62;
        const o65 = {
        };
        o65.e = f60;
        o65.b = a62;
        o65.c = a61;
        const o66 = {
        };
        o66.e = f60;
        o66.b = a62;
        o66.d = a62;
        function f68(a69) {
            new f41();
        }
        this.onmessage = f68;
        v56.length = 1073741824;
    }
    const v73 = [Uint32Array,3.5885237423067196];
    const o74 = {
        "arguments": v73,
        "type": "function",
    };
    new Worker(f60, o74);
    return v36;
}
f32();
[-1003451090,13,4];
[4,1073741824,1,143370726];
try {
    function f79(a80, a81, a82) {
        const v84 = [601759695];
        const v85 = [1073741824,1073741823,1376142744,1073741825];
        function f86(a87, a88, a89, a90) {
            let [] = v85;
            try { v85["find"](..."find", a90, ...v84); } catch (e) {}
            return a89;
        }
        do {
        } while ((() => {
                const v94 = 2147483648 < 7;
                const v95 = !v94;
                v95 && v95;
                return v94;
            })())
        f79(2147483648, f79, 2147483648);
        return 2147483648;
    }
    f79(f79, f79, f79);
} catch(e99) {
}
