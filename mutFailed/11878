function f0() {
}
BigUint64Array.b = BigUint64Array;
const v6 = new BigUint64Array(1448);
function f7(a8, a9, a10) {
    a10 + a8;
    a9 === a9;
    return a9;
}
f7.arguments;
[-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308];
const v16 = v6.toLocaleString(f0.reduce(f7));
try { v16.strike(); } catch (e) {}
const v20 = new Uint8Array(5);
let v21;
try { v21 = v20.slice(v6, -6); } catch (e) {}
const v24 = Int16Array?.constructor;
try { new v24(v21); } catch (e) {}
const t18 = 5;
new t18(8);
const v29 = new Int8Array(1000);
v29[450] = v29;
const v30 = [-1000000000.0,-172.45459854534556,1000000000000.0,-4.0,0.9775675940725485,9.375091842488233e+307,-1000000000000.0,1000000000000.0,-583.7489662853739,-4.0];
v30[7] = v30;
[-2.0,0.6460637053756887,1.7976931348623157e+308,-5.0,Infinity,1e-15,0.026418324147141292,-633.4053460575828,-4.49479902947143];
[-2.640278174482047,1.7976931348623157e+308,-1000000000.0,-6.050969232351324];
const v35 = new Uint16Array(1448);
const v37 = v35.buffer;
v37.slice(v37, 5);
