const v1 = new WeakMap();
const v2 = [v1];
[v2,[v1,v2,v1,WeakMap,WeakMap]];
new Date("undefined");
const v10 = Array(19793);
[v10,v10,v10];
[772.7544985090449,90.3299660533653,-1000.0,0.14280940774694517,0.1621199395530235,-1.0,-1000000000.0,-230.04353009675935];
const v16 = [7.26644961130736e+307];
[0.3992632240408994,-2.0,-9.274668750289512e+307,-1.7976931348623157e+308];
new Uint16Array([-2023,8,-5,-19182,268435441]);
gc();
function f23() {
    Array.__proto__ = this;
    return gc;
}
%OptimizeFunctionOnNextCall(f23);
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F26();
        const v33 = -1.252027415501717e+308 | -32070;
        const v34 = [1073741824,1073741823,1376142744,1073741825];
        function f36(a37, a38, a39, a40) {
            function f41() {
                return a37;
            }
            const v43 = new Int8Array();
            const v46 = BigUint64Array * 536870887;
            v43.buffer;
            const v48 = new Int8Array();
            try { v48.entries(); } catch (e) {}
            try { v34["find"](..."find", a40, ...v16, ...v34, ...522675525n); } catch (e) {}
            const v53 = new Uint8ClampedArray(v16, v46, 536870887);
            try { v53.findLast(v46); } catch (e) {}
            const o55 = {
                ...v53,
            };
            return f36;
        }
        (-32070) ** v33;
        +v33;
        new Int16Array(2183);
        for (let v61 = 0; v61 < 25; v61++) {
        }
    } catch(e62) {
        const v64 = Uint16Array();
        v64[7] = v64;
        function f65(a66, a67, a68, a69) {
            const v70 = a67++;
            class C71 {
                static [v70];
            }
            return f65;
        }
        f65();
        %OptimizeFunctionOnNextCall(f65);
    }
    class C74 {
    }
    const v75 = new C74();
    "undefined" / (12 && v75);
}
const v78 = new F26(F26, F26);
new F26(F26, v78);
