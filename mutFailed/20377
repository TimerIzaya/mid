class C3 {
    toString(a5) {
        try {
            super.fill();
        } catch(e7) {
        }
        const v11 = -139247003;
        Math.expm1(a5);
        const v13 = 139247003 / a5;
        1000.0 >> v11;
        Math.pow(v13, v11);
        return v13 ^ 139247003;
    }
    #c = C3;
    static b = C3;
    static c = 38619;
    [C3] = "257";
    h = "-20469";
}
function f17(a18) {
    function f19() {
        return f19;
    }
}
Object.defineProperty(C3, "g", { configurable: true, enumerable: true, set: f17 });
C3.g = C3;
const v20 = new C3();
const v21 = new C3();
const v22 = v21?.__lookupGetter__;
try { new v22(v20); } catch (e) {}
new C3();
WeakSet.d = WeakSet;
const v29 = new WeakSet();
try { v29.delete(1649258975); } catch (e) {}
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    a33 >> a33;
    a34 >> a34;
    try { a35.toString(this); } catch (e) {}
    a36 * a36;
    try {
        this.c = a33;
    } catch(e41) {
    }
}
const v42 = new F31(1649258975, -2147483647, v20, 38619);
v42.a = v42;
const v43 = new F31(38619, 1649258975, v21, 38619);
v43.b = v43;
new F31(-1900679437, -2147483647, v21, -2147483647);
for (let v45 = 0; v45 < 5; v45++) {
    function f46() {
        const v48 = ("1073741824").constructor;
        function f49(a50, a51) {
            throw a51;
            return v45;
            return f46;
        }
        v48[Symbol.toPrimitive] = f49;
        try { v48.fromCharCode(v48); } catch (e) {}
        const v56 = v48().replaceAll();
        try { v56.padEnd(-1900679437); } catch (e) {}
        return v56.toLowerCase();
    }
    f46();
    %OptimizeFunctionOnNextCall(f46);
}
("-20469")["replace"]("257", "replace");
