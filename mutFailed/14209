let v0 = [961699.8294040405,-2.2250738585072014e-308,5.0];
[-1000000000000.0,2.2250738585072014e-308,1000000000000.0,2.0,0.5585100795016429,682002.490078425,-1000000000000.0];
const v2 = [-278802.16938757664,-0.0];
const v3 = [904108.4549371146,2.2250738585072014e-308,-4.0,2.0,-1000000.0,-4.840084627734582,621801.1762112163];
const v4 = [4.0,382.7016677825661,919.7113309765255,848540.4911048738,Infinity,0.027981878931495507,7.553600369975006e+307,0.21886969860989125,5.0,0.884446447157503];
[Infinity,5.0,-1000000000.0,-2.220446049250313e-16,2.0,-1000.0,-2.0,607097.7549878461];
class C7 {
    #e = v0;
    n(a9, a10, a11, a12) {
        const v14 = new a11();
        let v15;
        try { v15 = v2.some(a11, v14); } catch (e) {}
        ({"a":v0,"b":v15,"d":v0,} = v15);
        return a10;
    }
    a;
    static 2161957116;
    #f = null;
    static 0 = v4;
}
new C7();
new v3();
const v18 = new C7();
function f19() {
    return v18;
}
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    v4.d = new.target;
}
const v42 = [601759695];
const v43 = [1073741824,1073741823,1376142744,1073741825];
function f46(a47, a48, a49, a50) {
    function f52() {
        return a50;
    }
    arguments.c = 1163987790;
    -2147483647n & -2147483647n;
    const v63 = new Int8Array();
    const v64 = v63.buffer;
    class C67 {
        static {
            for (const v69 of this) {
            }
        }
    }
    v64.slice();
    %OptimizeFunctionOnNextCall(f52);
    let v72;
    try { v72 = v43["find"](...v18, a50, ...v42); } catch (e) {}
    v72 <= a49;
    return arguments;
}
for (let v74 = 0; v74 < 10; v74++) {
    f46(-25283n, 522675525n, -1553n, v74);
}
%OptimizeFunctionOnNextCall(f46);
f46(null, -256, -9223372036854775808n, "B");
