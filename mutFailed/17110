BigUint64Array[0] = 4062;
const v2 = new BigUint64Array(4062);
let v3 = 4;
v3++;
try { new Int16Array(v3, BigUint64Array, v2); } catch (e) {}
const v7 = new Int16Array(v3);
function f8(a9) {
    function f11() {
        for (let v12 = 0; v12 < 5; v12++) {
            const v13 = [1073741824,1073741823,1376142744,1073741825];
            for (let v14 = 0; v14 < 5; v14++) {
                const v15 = v13;
                v15[3];
                v13[32] = 56;
                try {
                    Math.ceil(("find" + 15) / 15);
                } catch(e23) {
                }
                try { v13["find"](); } catch (e) {}
            }
        }
        return 56;
    }
    f11();
    return 4062;
}
v7.constructor = f8;
const v26 = v7?.constructor;
try { new v26(BigUint64Array, v2, v2); } catch (e) {}
const v30 = new Float64Array(4);
class C31 {
    static get h() {
        let v33;
        try { v33 = this(this, this, Int16Array); } catch (e) {}
        const v35 = [v33];
        Reflect.apply(v30.sort, v7, v35);
        return 4062;
    }
    d = v3;
    static #e;
}
new C31();
new C31();
new C31();
function f41() {
    return f41;
}
function f42(a43) {
    const o47 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o47);
    return "minor";
}
Object.defineProperty(f41, Symbol.species, { value: f42 });
try { new Int16Array(f41, Float64Array, 4); } catch (e) {}
const v53 = new Int16Array();
v53.constructor = f41;
v53.filter(f41);
