function f0() {
}
class C4 extends f0 {
    #b = 4294967297;
    d = 3;
    b;
    static set h(a6) {
        for (let v7 = 0; v7 < 100; v7++) {
            f0();
        }
        const v9 = -9007199254740992;
        g = 3;
        try { a6.defineProperty(f0, a6); } catch (e) {}
        /a[a-z]/gudisy;
        /Pn/usy;
        /4a[a]+/guisy;
    }
}
new C4();
new C4();
new C4();
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a19;
    } catch(e22) {
    }
}
new F17(-9007199254740992, -9007199254740992, -9007199254740992);
const v24 = new F17(4294967297, 4294967297, -9007199254740992);
new F17(3, 4294967297, -9007199254740992);
new Int8Array(4);
new Uint32Array(45);
new BigInt64Array(4);
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    let v36 = this;
    const v39 = v36.constructor;
    const v40 = /[a-zA-Z0-9]/gvisy;
    const v41 = /abc?/gvmy;
    v41[-2] ^= v40;
    v36 = [45,F17,v36,a38];
    try {
        v36.length = 3;
    } catch(e44) {
    }
    const v46 = new Int16Array();
    Object.defineProperty(v40, 4, { value: v40 });
    C4 >> v24;
    for (let v48 = 0; v48 < 32; v48++) {
        b["p" + v48] = v48;
    }
    const v51 = v46.lastIndexOf();
    let v52 = v51 - v51;
    v52--;
    try { new v39(F35, v36, F35, v41); } catch (e) {}
}
const v55 = new F35(F35, F35);
const v56 = f0.constructor;
const v57 = delete v55?.length;
Object.defineProperty(v24, "a", { enumerable: true, get: f0, set: f0 });
const o58 = {
};
try {
    o58.e = v24;
} catch(e59) {
}
try {
    const o60 = {
    };
    o60.e = v24;
    o60.b = BigInt64Array;
} catch(e61) {
}
try {
    const o62 = {
    };
    o62.e = v24;
    o62.b = BigInt64Array;
    o62.g = C4;
} catch(e63) {
}
try {
    const o64 = {
    };
    o64.e = v24;
    o64.b = BigInt64Array;
    o64.f = v57;
} catch(e65) {
}
new v56();
