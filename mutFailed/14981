new BigUint64Array(268435439);
new EvalError(13);
const v7 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v9 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v10 = [601759695];
const v11 = [1073741824,1073741823,1376142744,1073741825];
function f13(a14, a15, a16, a17) {
    function f19() {
        let v22 = Float64Array;
        b = v22 = a15;
        v7.length;
        try {
            v11.forEach(v22);
        } catch(e25) {
        }
        const v26 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v28 = Symbol.toPrimitive;
        const o34 = {
            toString(a30, a31) {
                const v32 = a17 && v22;
                a30 *= v28;
                return v32 <= f19;
            },
        };
        const o54 = {
            "c": -4294967297n,
            [522675525n](a37, a38) {
            },
            "c": v22,
            valueOf(a40, a41) {
                return a14;
            },
            "b": -4294967295,
            [-4294967297n](a43, a44, a45, a46) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v9,
            ...v10,
            1195: v28,
            "a": v10,
            __proto__: o34,
            512: BigUint64Array,
            "g": o34,
            "type": "Vre",
            ..."Vre",
            valueOf(a48, a49) {
                return v26;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a51, a52, a53) {
                return a17;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f19();
    const v57 = new Int8Array();
    v57.buffer;
    f19.slice(2147483648);
    %OptimizeFunctionOnNextCall(v7);
    let v62;
    try { v62 = v11["find"](..."find", a17, ...v10, ...v11, ...522675525n); } catch (e) {}
    v62 <= a16;
    return arguments;
}
const v64 = f13();
new BigInt64Array(0);
let v70 = 10;
for (; v70--;) {
    const v74 = ~-534506351;
    let v75 = v74 ** -5.657779390043693;
    let v76 = -534506351 * v74;
    v75++;
    +-5.657779390043693;
    v76++;
}
const v82 = new Uint8ClampedArray(9);
new BigInt64Array(1);
new Int32Array(1630);
const v90 = new Int8Array();
v90.buffer;
const v94 = new Float32Array(2);
const v95 = v94;
v95.length;
function F98(a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = BigInt64Array;
    } catch(e102) {
    }
    try {
        this.c = -5.657779390043693;
    } catch(e103) {
    }
    try {
        this.b = a100;
    } catch(e104) {
    }
}
new F98(1630, v9);
new F98(v82, v11);
new F98(BigInt64Array, v10);
function f108(a109) {
    return f108;
}
[4096];
const o113 = {
    "e": v64,
    "type": "function",
};
new String(f108, o113);
