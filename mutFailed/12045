const v0 = [-88.09982093348447,0.5668673256240014];
const v1 = [791.7346117658808,1e-15,-6.748947387616675e+307,-2.2250738585072014e-308,2.220446049250313e-16,-65317.39102702751,0.2988918335115296,1000000.0,2.0];
const v2 = [0.6486406903935077,835919.2781582458,1.7976931348623157e+308,1.7976931348623157e+308,-Infinity,0.2877766611103594,231.22725977544474,-2.7689761722502787e+307,1000.0,-31.663407251798503];
function f3(a4) {
    const o20 = {
        "d": v2,
        "h": a4,
        n(a6, a7) {
            const v9 = new Uint32Array();
            for (const v10 in v9) {
            }
            try { v9["throw"](); } catch (e) {}
            const o13 = {
                __proto__: a7,
                127: v2,
                [-1]: a7,
                1679: a4,
            };
            return o13;
        },
        10000: a4,
        __proto__: v0,
        "arguments": v0,
        ...v2,
        n(a15, a16, a17, a18) {
            for (let v19 = 0; v19 < 10; v19++) {
            }
        },
        [v2]: v2,
        "g": v1,
    };
    class C22 {
        toString(a24, a25, a26) {
            const o27 = {
            };
            o27.g = "f";
            const o28 = {
            };
            o28.c = o28;
            const o29 = {
            };
            o29.g = o29;
            o29.g = "f";
        }
    }
    const v30 = new v2();
    function F31() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v33 = 0; v33 < 1000; v33++) {
            ("p").length;
            const v36 = "p" + v33;
            let v38 = v36.fontcolor("f", "p", v36, this).localeCompare(v30);
            v38--;
        }
    }
    new F31();
    new F31();
    return o20;
}
const v42 = f3(v1);
const v43 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const v45 = Symbol.toPrimitive;
const o51 = {
    toString(a47, a48) {
        const v49 = v42 && v2;
        a47 *= v45;
        return v49 <= v43;
    },
};
const v52 = f3(v1);
const v53 = f3(v1);
class C54 extends f3 {
    #h = v53;
    get b() {
        const v56 = new f3(v1);
        const v57 = [601759695];
        function f58() {
            b = v57;
            return v57;
        }
        v52[8] = v52;
        function F59(a61, a62, a63, a64) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = v52;
            } catch(e65) {
            }
        }
        new F59(v53, v0, v0, this);
        const v67 = new F59(v56, v1, v0, v53);
        new F59(v53, v2, v2, v42);
        return v67;
    }
}
new f3();
new C54();
new C54();
new BigUint64Array(6);
/4H/gvisy.compile(/[m]/gvdimsy);
function f79() {
    return f79;
}
f79();
new BigInt64Array(78);
const v85 = [1073741824,1073741823,1376142744,1073741825];
function f86(a87, a88, a89, a90) {
    function f91() {
        try {
            v85.forEach(a88, v43);
        } catch(e93) {
        }
        return a88;
    }
    f91();
    eval();
    %OptimizeFunctionOnNextCall(f91);
    return a87;
}
new Float64Array(2368);
function F99(a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v105 = this.constructor;
    try { new v105(); } catch (e) {}
    const v110 = new Uint8Array(9);
    v110.lastIndexOf(10);
}
new F99();
new F99();
