function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    try {
        this.e = 129;
    } catch(e3) {
    }
    try {
        this.c = 129;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = [727957804,7,49072,-63418,-4,-52120,127,1273312700,-128];
function f8() {
    return v7;
}
class C9 extends f8 {
}
const v10 = new C9();
const v11 = new F0();
function f12() {
    return v5;
}
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a15;
    } catch(e17) {
        const v20 = new BigInt64Array(16);
        const v23 = new Uint32Array(40, 40, 16);
        const v24 = [1073741824,1073741823,1376142744,1073741825];
        function f25(a26, a27, a28, a29) {
            const v30 = a26.constructor;
            let v31;
            try { v31 = v30(); } catch (e) {}
            try {
                v24.forEach();
            } catch(e34) {
            }
            const o35 = {
                1073741824: v23,
            };
            const v36 = undefined?.values;
            let v37;
            try { v37 = v36(); } catch (e) {}
            v20["toSorted"](v31, v36, ..."toSorted", v37, 40);
            Math.abs(BigInt64Array);
            return a29;
        }
    }
    try {
        this.e = F0;
    } catch(e42) {
        const v45 = new Int8Array(16);
        v45.toSorted();
        new Uint32Array(381);
    }
    this.h = this;
    new BigUint64Array();
    Symbol.toStringTag;
    try {
        this.f = a16;
    } catch(e54) {
    }
}
new F13(v11, v11);
const v56 = new F13(v11, v6);
new F13(F13, v6);
[1e-15,4.935774311400468,0.0,1.0];
const v62 = [-1000.0,-0.0,-1.7976931348623157e+308,NaN,1000000000000.0];
[-1.7976931348623157e+308,-588.7878889763896,1.878787029496511,-2.220446049250313e-16,679.1230910485826];
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o80 = {
            get a() {
                const v74 = [256,54026];
                -2 | -2;
                !-2;
                Math.hypot(v74);
                return this;
            },
        };
        o80.a = "byteLength";
    } catch(e81) {
    }
    try {
        const v82 = this[1073741824];
        v82[4040] = v82;
    } catch(e83) {
    }
}
let v84 = new F64();
const v85 = new F64(v56, "UvR7", v5);
function f86() {
    function f87() {
        v84 = v10;
        Math.atan2(-0.0, -0.0);
        return f8;
    }
    return f87;
}
Object.defineProperty(v85, "constructor", { writable: true, configurable: true, enumerable: true, get: f86 });
const v91 = new F64();
class C92 extends F64 {
}
const v93 = new C92();
function f94() {
    return f8;
}
function f95(a96) {
    Symbol.unscopables;
}
Object.defineProperty(v93, "constructor", { writable: true, get: f94, set: f95 });
function F99() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f95;
    try {
        [[this],1141300185,F99];
        let v104 = [this];
        v104.valueOf = f12;
        v104++;
        Math.asinh(536870887);
        +this;
    } catch(e110) {
    }
    try {
        class C112 extends this.constructor {
            static [1141300185] = F99;
            e = F99;
        }
        new C112();
    } catch(e114) {
    }
}
new F99();
const v116 = new C92();
const t139 = v116.constructor;
const v118 = new t139();
const v119 = new C92();
const v120 = v119.constructor;
new v120(v118, v120, v118, v91, v120);
class C122 {
    constructor(a124, a125, a126) {
        Object.defineProperty(a125, "constructor", { configurable: true, value: f8 });
        a126.constructor = f86;
        const v127 = a125.constructor;
        new v127(v127, C92, a125, a124, v62, a125);
        const o130 = {
            ...this,
        };
        [Reflect];
        const t153 = a126.constructor;
        new t153();
    }
}
new C122(v91, v93, v85);
