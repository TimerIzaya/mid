const v2 = new Uint32Array(6);
const v4 = 9 >>> 9;
const v6 = new Float32Array(9);
const v7 = v6?.constructor;
function f8(a9) {
    return Reflect.construct(a9, [], Uint32Array);
}
v7.toString = f8;
let v13;
try { v13 = new v7(9, v6, v2); } catch (e) {}
new v13(219);
-v4;
-932 >>> -932;
let v23 = 4;
v23++;
function f26() {
}
f26.constructor = f26;
const v27 = v13?.constructor;
try { new v27(Float32Array); } catch (e) {}
1.7543951832230255e+308 ^ -212.78589373566194;
const v34 = [79.96177673553052,958106.6774601368,-2.220446049250313e-16,1.3702264850190933e+308,-569.2238583910487,-643621.2280408698,-906.898552923642,-3.0];
const v35 = [9.199333489675116,1000000000000.0,-150.6078457913527];
const v36 = [-4.0,Infinity,-3.0,-734447.1317172151,4.890954914084955e+307,437656.14753023814,-0.0,0.2276435365306908];
165226.0487593948 + 165226.0487593948;
let v40 = 2.0;
v40--;
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    a47 >>> a47;
    a48[2] = a48;
    this.h = F45;
    try {
        this.h = v40;
    } catch(e51) {
    }
}
const v52 = new F45(1.7543951832230255e+308, v35, 165226.0487593948, -5.256559838432566, v35, -1);
const v53 = new F45(-5.256559838432566, v35, v52);
const v54 = new F45(-441742.52960792976, v34, -212.78589373566194);
Object.defineProperty(v36, 149, { configurable: true, enumerable: true, get: f26, set: f26 });
Object.defineProperty(v35, 599385888, { configurable: true, enumerable: true, value: v54 });
const v55 = /tRa*?(?:a+){0,0}/gvis;
/[qa{12z}]/gd;
/a*b|c[foo(?=bar)baz]/udy;
for (let v58 = 0; v58 < 5; v58++) {
    let v61;
    try { v61 = ("minor").toWellFormed(); } catch (e) {}
    const o63 = {
        "execution": "number",
        "type": "minor",
    };
    o63.execution = o63;
    gc(o63, -441742.52960792976, o63);
    const v65 = v61.type;
    %VerifyType(v65);
    %VerifyType(v61);
    v65?.[214];
    new Float64Array(128);
    Uint8Array[0] = 16;
    let v72;
    try { v72 = new Uint8Array(Uint8Array, Uint8Array, v53); } catch (e) {}
    const v73 = new v72(1);
    v73[0];
    new Uint16Array();
}
function F78(a80, a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    Reflect.construct(Int8Array, [1126838905], a80);
}
try { F78.bind(v55); } catch (e) {}
