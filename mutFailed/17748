function f3(a4, a5) {
    const o13 = {
        "e": "toISOString",
        1522458865: "toISOString",
        set b(a7) {
            function f8() {
                return this;
            }
        },
        o(a10) {
            const v11 = a5[204];
            try { v11("DE3", "DE3", "DE3", v11, a10); } catch (e) {}
            return this;
        },
        "g": "-1392752770",
        [a5]: a5,
        "b": a4,
    };
    return o13;
}
const t20 = "toISOString";
const v14 = t20(f3, "-1392752770");
f3(f3(f3, "-1392752770"), "-1392752770");
class C17 extends f3 {
    static #o(a19, a20, a21, a22) {
        super[this];
        const o27 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o27);
        return "toISOString";
    }
    10;
    b;
    static [v14] = v14;
}
const v29 = new C17();
new C17();
new C17();
const v32 = [1.0,-1e-15,-1.7386220993965328e+308,1000.0];
class C36 {
    constructor(a38, a39, a40, a41) {
    }
    /*
    constructor(a43, a44, a45, a46) {
    }
    */
}
const v59 = [-342156.89176039875,-746.105880859077,1000000.0,-1000000000.0];
const v60 = [-1.0554433930675126e+308,0.3625159100138988,2.0,-1000000000000.0,1000000000000.0,-271.7739288786205,414.4971184597923,5.0,1.6295201741919598];
function F61(a63, a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a65;
    } catch(e67) {
    }
    try {
        this.g = a65;
    } catch(e68) {
    }
}
new F61(v14, v32, "DE3", v59);
new F61(v29, v59, "-1392752770", v59);
new F61(v14, v60, "-1392752770", v60);
function f74(a75, a76, a77, a78) {
    return arguments;
}
const v81 = f74(f74(64, 118, 64, 118), f74);
const v82 = v81.constructor;
v82.values(v81);
v82(118).toExponential(64);
