const v0 = [];
const v2 = -Infinity;
const v3 = -Infinity;
class C7 {
    static n(a9, a10, a11, a12) {
        return v0.length;
    }
    p(a15, a16, a17, a18) {
        Set != v3;
        var a = a16;
        try {
            super.m(v2);
        } catch(e22) {
        }
        return this;
    }
}
const v23 = new C7();
new C7();
new C7();
const v27 = new Set();
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a30;
    } catch(e32) {
        for (let [v33,v34] of a30) {
            try {
                v34.values();
            } catch(e36) {
            }
        }
        v23.__proto__?.constructor;
        class C41 extends Int8Array {
            [12];
        }
    }
    try {
        this.h = v27;
    } catch(e42) {
    }
    try {
        function f44() {
            function f45(a46) {
                return Uint8ClampedArray;
            }
            Reflect.construct(f45, [Uint8ClampedArray], Uint8ClampedArray);
            return Uint8ClampedArray;
        }
        %OptimizeFunctionOnNextCall(f44);
        const v50 = v27[this];
        try {
            new F28(v50, -268435456n);
        } catch(e53) {
        }
        this.b = Set;
    } catch(e54) {
    }
}
const v55 = new F28(Set, Set);
new F28(Set, F28);
function f58(a59, a60) {
    a59 += 12;
    return this;
}
const v63 = new F28(v55, F28);
const v67 = [65537,268435441,63298,-5,1235122603];
const v68 = [128,215394418];
const v69 = v68.entries();
const v70 = [-2,-4294967296,4294967297];
function F71(a73, a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
}
const v77 = new F71(-714582153, F71, -714582153, v68);
const v79 = new F28(v63, null);
const v82 = [-1.5424212036356715e+308];
v82[536870887n] = v82;
function f83(a84) {
    return a84;
}
new BigUint64Array(0);
new Int32Array(1519);
v77.length;
const v91 = new F71(9, v77, 9, v70);
v91.b = v91;
const v92 = new F71(1024, v91, v70, v70);
const v100 = ("string").trimStart();
v69[3];
let v104;
try { v104 = v100(); } catch (e) {}
v67[v104] = v68;
class C108 {
}
class C109 {
}
function f110(a111, a112, a113, a114) {
    new Int16Array(1269);
    let v118;
    try { v118 = C109.n(f110); } catch (e) {}
    for (const v119 in v118) {
    }
    return a112;
}
f110();
0 ^ 9;
const v122 = -1000;
~9;
v122 >>> v122;
const v125 = ("string").length;
const t106 = 5.743024339675966;
const v128 = new t106();
function f129(a130, a131, a132, a133) {
    a132++;
    const v135 = a132++;
    const v136 = a132 % a132;
    const o137 = {
        ...v128,
    };
    let v138;
    try { v138 = o137.n(v136, v135); } catch (e) {}
    return v138;
}
for (let v139 = 0; v139 < 500; v139++) {
    f129(Uint8Array, 2, v139);
}
a = v125 - F71;
v27[v91];
v79.__proto__;
-35417 - -35417;
let v146 = undefined;
v146 = v92;
