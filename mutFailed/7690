const v1 = new WeakMap();
new Float64Array(213);
const o8 = {
    get c() {
    },
};
try {
    v1.h = 268435439;
} catch(e10) {
}
new BigUint64Array(8);
const v14 = new Float32Array(1631);
new Date();
function f19() {
    return this;
}
const v21 = new f19();
class C23 extends Int32Array {
}
const o25 = {
};
try {
    o25.g = v1;
} catch(e26) {
}
try {
    const o27 = {
    };
    o27.g = v1;
    o27.c = BigUint64Array;
} catch(e28) {
}
try {
    const o29 = {
    };
    o29.g = v1;
    o29.c = BigUint64Array;
    o29.f = v14;
} catch(e30) {
}
try {
    const o31 = {
    };
    o31.g = v1;
    o31.c = BigUint64Array;
    o31.f = Array;
} catch(e32) {
}
class C33 extends Array {
}
Object.defineProperty(v21, Symbol.unscopables, { writable: true, configurable: true, enumerable: true, value: 1000 });
with (v21) {
    for (const v36 of v14) {
        v36 < 1631 ? v36 : 1631;
    }
    f19 = Float32Array;
    const v39 = v21.constructor;
    try { new v39(); } catch (e) {}
    -4294967296 >>> -4294967296;
    function f43() {
        const o46 = {
            get b() {
                super[this] = this;
                return f43;
            },
            ..."b",
        };
        return C33;
    }
    f43();
    byteLength || Int16Array;
}
new v21();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    a55.trimLeft().strike();
    const v59 = this.constructor;
    try { new v59("a"); } catch (e) {}
}
