function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7() {
        a5 = F3;
        function f8(a9, a10, a11, a12) {
            return f8;
        }
        f8(this);
        return 1024n;
    }
    this[Symbol.toPrimitive] = f7;
    a6--;
    try {
        a6.d = a5;
    } catch(e17) {
    }
    try {
        this.a = a6;
    } catch(e18) {
    }
}
F3.length = F3;
const v19 = new F3(-458736818n, 1024n);
const v20 = new F3(-4294967295n, -4294967295n);
function f21(a22, a23) {
    v19[81] = -458736818n;
    class C24 {
        constructor(a26, a27) {
            const v28 = this.constructor;
            try { new v28(); } catch (e) {}
            const v31 = Math.atan2(this);
            v31 ** v31;
        }
    }
    return a23;
}
v20.toString = f21;
const v33 = new f21(1024n, -458736818n);
64 + 64;
-2025798148 & 64;
function f39(a40, a41, a42) {
    a40.a = a40;
    f39 << a42;
    let v46 = new Int16Array(12);
    v46.fill();
    const o53 = {
        get e() {
            let v48 = this;
            ({"a":v48,"c":v46,"d":a42,} = v20);
            try { a42(a42, -3176502, -3176502, v48, ...-3176502); } catch (e) {}
            return f39;
        },
        [v20]: a41,
        "b": a42,
        ...v20,
    };
    return a40;
}
f39.name = f39;
f39(v33, f39, -4294967295n);
f39(v19, 4294967296, -458736818n);
f39(v19, -458736818n, -4294967295n);
Int8Array.name = Int8Array;
const v59 = new Int8Array(520);
for (let v60 = 0; v60 < 5; v60++) {
    v59.indexOf(v60);
}
