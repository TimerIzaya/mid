const v3 = [-1000000000.0,1000000000000.0,-1000000000000.0,Infinity,1.0,217.36072363683115,-944.0733331528647,669407.875315469,-5.0,966.1002623995994];
const v4 = [-1000000.0,-1.0,-3.65533361634834,24069.891431465163,0.3573235169408573,5.3730298028195715,1000.0,5.988317627653239e+307,-2.0,6.831144072888328];
try { v4.fill(8.21486810228065); } catch (e) {}
[-Infinity,Infinity,1.1682043401137824e+307,0.8037091787189926,1.7976931348623157e+308,-1000000.0,9.016758577624648e+307,-733548.3774868181];
const v9 = new Uint8ClampedArray(160);
function f10() {
    function F13(a15) {
        if (!new.target) { throw 'must be called with new'; }
        const v16 = this.constructor;
        v16.e = v16;
        try { new v16(); } catch (e) {}
        this.g = -1;
        this.f = a15;
        this.h = a15;
    }
    let v18;
    try { v18 = F13.bind(-143547321); } catch (e) {}
    const v19 = new F13(-1);
    const v20 = new F13();
    Object.defineProperty(v20, v19, { writable: true, configurable: true, value: F13 });
    return v18;
}
v9.valueOf = f10;
v9[71] = v9;
function f24() {
    return Date;
}
Object.defineProperty(Date, "constructor", { writable: true, configurable: true, get: f24 });
const v25 = new Date();
let v26 = v25.setUTCMilliseconds(-3);
v26++;
2105444095n - 2105444095n;
function f32(a33, a34) {
    const o38 = {
        968: a34,
        "d": a33,
        [268435439n]: 2105444095n,
        __proto__: -4294967296n,
        valueOf(a36) {
            return 268435439n;
        },
    };
    return a33;
}
for (let v39 = 0; v39 < 100; v39++) {
    f32();
}
try { new Int32Array(v9, v9, Int32Array); } catch (e) {}
const v46 = -35199 % (v3 / -1478256740);
v46 ^ v46;
const v48 = Date.constructor;
try { new v48(160); } catch (e) {}
v48.bind();
new Int32Array(8);
const v54 = new Int8Array(114);
v54[80];
try { Float64Array.from(null); } catch (e) {}
