class C4 {
}
const v5 = new C4();
const v6 = [129,-1024];
const v7 = v6.constructor;
class C8 extends v6 {
}
let v9;
try { v9 = C8.apply(v7, C4); } catch (e) {}
const v10 = new v9();
Object.defineProperty(v10, 65537, { value: v5 });
const v11 = [-1e-15,0.8756992333777419];
[-1.7976931348623157e+308,0.24531586264365046,3.0];
[-1.7976931348623157e+308,0.005948624170253436,1.0,Infinity,5.0,-905.1185533372396,2.220446049250313e-16,5.0];
const o14 = {
};
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v19 = Array(19793);
        for (const v20 of v19) {
        }
        const v21 = [v19,v19,v19,v19,v11];
        const v22 = [v21,v21,v21];
        [v22];
        v22 >= Uint16Array;
    } catch(e26) {
    }
}
const v27 = new C8();
Symbol.iterator;
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
typeof v7;
const v43 = new Uint8Array(Uint8Array, Uint8Array);
const v44 = [-1.7976931348623157e+308,1.567547754457685];
const v46 = new Uint32Array(v44, v44, Uint32Array);
v46.constructor;
new v27();
Symbol.b = 10000;
("async").toUpperCase();
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a59;
}
v43[Math.atan2(-988.8649474800335, 10000)] = -65537;
