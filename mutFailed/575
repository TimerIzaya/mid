const v3 = new Uint8Array();
const v4 = [65535,9223372036854775807,2101773358,536870888,536870912,7];
v4.__proto__ = v3;
("HEkWL").localeCompare("isArray", "isArray");
class C9 {
    #o(a11) {
    }
    set b(a13) {
        Symbol.search;
    }
    n(a17, a18) {
        this[15];
        super[a18] = 15;
        const v21 = new Float64Array();
        delete v21[-1.5286188982640463e+308];
        const v26 = new Uint8ClampedArray(4);
        const v28 = new Int8Array(v26);
        v28.lastIndexOf();
        try {
            super.n(a18, this, 536870888, a18, a18);
        } catch(e31) {
        }
        a18 = 536870888;
        return this;
    }
    n(a33) {
        this[a33] = -100426189;
    }
    constructor(a35, a36, a37, a38) {
        const v39 = this.constructor;
        try { new v39(v4, a37, a37); } catch (e) {}
        a36 >>> a36;
        -0.0 >>> -0.0;
    }
    #f = -100426189;
    static [536870888];
    c;
    static 15;
}
const v44 = new C9();
for (let v45 = 0; v45 < 32; v45++) {
}
eval();
new C9();
new C9();
[-1000.0,-1000000.0,0.8405148258715904,228.88248036767845,-1000.0,-1000000000000.0,756.3922446470167,128.2256142560234];
const v52 = [2.0];
[0.47131116726193967,-1.7976931348623157e+308,-793525.7382654136,2.2250738585072014e-308];
-2.241327492701015 & -9007199254740990;
v44.propertyIsEnumerable(v4);
new Int8Array(BigUint64Array);
function f66(a67, a68, a69) {
    const o110 = {
        toString(a71, a72, a73) {
            a68 < this;
            const v75 = [2.220446049250313e-16,-2.0,9.472378156545009,0.0,1e-15,0.3751557433004281,0.0,-474740.46049005154];
            const o81 = {
                set h(a77) {
                },
                __proto__: v75,
                o(a79, a80) {
                    return this;
                },
            };
            return super[a69];
        },
        "g": v52,
        get a() {
            const o85 = {
            };
            gc();
        },
        get d() {
            ("object").trim();
            Math.round();
            const v94 = new Array(228);
            function F95(a97, a98) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = a98;
                } catch(e99) {
                    const o107 = {
                        set g(a101) {
                            function F102(a104, a105, a106) {
                                if (!new.target) { throw 'must be called with new'; }
                            }
                        },
                    };
                }
            }
            const v108 = new F95(v94, "object");
            new F95(v108, v94);
            return this;
        },
    };
    return o110;
}
%PrepareFunctionForOptimization(f66);
f66(f66, f66(), f66);
%OptimizeFunctionOnNextCall(f66);
f66();
