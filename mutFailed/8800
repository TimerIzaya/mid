const v4 = new Set(Set, Set);
const v5 = [v4,-988321.7498549824,Set,v4,-988321.7498549824];
const v6 = [v5];
const v7 = [-988321.7498549824,v6,Set,-988321.7498549824];
[-988321.7498549824];
[v4,v7,v6,Set,[v5]];
function f14() {
}
const v15 = f14();
let v17 = 5;
v17++;
const v19 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v21 = new Uint32Array();
let v22 = -6n;
const v23 = v22--;
const v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
function f27(a28, a29, a30, a31) {
    a28.cause = f14;
    const v32 = a28.constructor;
    v32.BYTES_PER_ELEMENT = v32;
    try { v32(); } catch (e) {}
    let v35 = arguments.length;
    let v36 = v35++;
    v36--;
    function f38() {
        let v40;
        try { v40 = ("Vre").toLocaleLowerCase(); } catch (e) {}
        try { v40.padStart(); } catch (e) {}
        const v42 = ("Vre").charAt();
        v42[0] = v42;
        let v43;
        try { v43 = ("Vre").replace(); } catch (e) {}
        v43 === v43;
        Float64Array.prototype = Float64Array;
        v19.length;
        const o65 = {
            "c": v22,
            "a": v43,
            [v23](a48, a49) {
            },
            [v23](a51, a52, a53, a54) {
                eval();
            },
            "c": v24,
            valueOf(a58, a59) {
            },
            1073741824: v21,
            [v22](a61, a62, a63, a64) {
            },
            "arguments": v17,
            256: a31,
        };
    }
    try { f38(); } catch (e) {}
    f38();
    try { Array(arguments); } catch (e) {}
    const v70 = Array(a31);
    v70[0] = v70;
    try { v70.findLast(); } catch (e) {}
    const v73 = new Uint8Array();
    try { v73.lastIndexOf(v17); } catch (e) {}
    const t62 = v73.buffer;
    t62.constructor = f14;
    try { Int32Array(); } catch (e) {}
    const v78 = new Int32Array();
    v78[3];
    for (let v80 = 0; v80 < 5; v80++) {
        const v81 = v80 !== v80;
        v81 || v81;
    }
    %OptimizeFunctionOnNextCall(f38);
    v73[0];
    function F84(a86, a87, a88, a89) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F84(65536, v15);
    try { v25["find"](..."find", a31, ...v24, ...v25, ...522675525n); } catch (e) {}
}
for (let v93 = 0; v93 < 10; v93++) {
    f27(v21);
}
%OptimizeFunctionOnNextCall(f27);
f27(v17);
