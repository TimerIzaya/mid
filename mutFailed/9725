function f0() {
    const o9 = {
        m(a5, a6) {
            const t3 = "7";
            t3[7] = "7";
            try {
                super.m(a6, 1000000000.0);
            } catch(e8) {
            }
            return 13;
        },
        "c": "7",
        "f": 13,
        1844: "7",
        "g": "7",
        "h": "7",
    };
    function f10() {
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
        }
        return f0;
    }
    Object.defineProperty(o9, Symbol.toPrimitive, { value: f10 });
    return o9;
}
const v17 = f0();
const v18 = f0();
Object.defineProperty(v18, "toString", { writable: true, value: f0 });
const v19 = f0();
const v21 = new Map();
function f22(a23, a24) {
    a23.toString = f22;
    const o58 = {
        [a23]: v18,
        "g": f0,
        n(a26, a27) {
            return a24;
        },
        "b": a24,
        "d": a23,
        "b": a24,
        "h": v19,
        "call": f0,
        n(a29, a30, a31) {
            return super[a30];
        },
        [v21](a34, a35) {
            a23 << v18;
            const v37 = [-4.0,-1e-15];
            v37[2] = v37;
            function F38(a40, a41, a42, a43) {
                if (!new.target) { throw 'must be called with new'; }
                for (let v44 = 0; v44 < 25; v44++) {
                    const v47 = new BigUint64Array(3375);
                    let [v48,,v49,...v50] = v47;
                }
                try { a40.unshift(a41); } catch (e) {}
                try { a40.toSpliced(); } catch (e) {}
            }
            new F38(v37);
            f0();
            %PrepareFunctionForOptimization(f0);
            f0();
            f0();
            %OptimizeFunctionOnNextCall(f0);
            f0();
            return a35;
        },
    };
    return o58;
}
const v59 = f22(v18, f0);
const v60 = f22(v18, Map);
const v61 = f22(v18, v18);
new Map();
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a67;
    } catch(e70) {
        const o71 = {
        };
        for (let v72 = 0; v72 < 25; v72++) {
            function f73() {
                return v72;
            }
            const v74 = [601759695];
            const v75 = [1073741824,1073741823,1376142744,1073741825];
            function f76(a77, a78, a79, a80) {
                const v81 = f73();
                [v81,v81];
                BigUint64Array * 536870887;
                let v87;
                try { v87 = v75["find"](..."find", a80, ...v74); } catch (e) {}
                return v87;
            }
            for (let v88 = 0; v88 < 10; v88++) {
                f76(v88, v88, v75, f76);
            }
        }
    }
    try {
        this.f = a66;
    } catch(e90) {
    }
}
new F64(v61, v61, v19, v19);
new F64(v60, v61, v18, v19);
new F64(v61, v59, v17, v17);
const v97 = [-984503.961837067,-3.0,170.79545126331868];
[v97,v97,-984503.961837067,-3.0];
const v99 = [v97];
class C103 {
    n(a105, a106) {
        let v107 = 10;
        for (; v107--;) {
            -3.0 | -9007199254740992;
            try {
                v99.e = 170.79545126331868;
            } catch(e110) {
            }
        }
        return v107;
    }
}
new C103();
new C103();
new C103();
const v114 = [-4];
try {
    new BigUint64Array(v114);
} catch(e117) {
}
const o121 = {
    "execution": "async",
    "type": "major",
};
gc(o121);
const v124 = /[\ca]/ms;
function f127(a128, a129) {
    function f130(a131) {
        a131 * -12;
        Math.fround(-23340);
        Math.asinh(-12);
        -12 & a131;
        return f0;
    }
    a128.toString = f130;
    function f140(a141, a142) {
        const v145 = new BigUint64Array(4);
        return [v145];
    }
    a129.toString = f140;
    const o148 = {
        get h() {
            return a129;
        },
        [a129]: 4,
        2778757984: a128,
        "h": 4,
    };
    return 4;
}
f127(f127, f127);
f127(v124, -65535);
