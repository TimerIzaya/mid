const v0 = /Oxyz{1,}?/gudmsy;
const v1 = /[\cz]/gudis;
const v2 = /2g\P{sc=Greek}+/gvis;
for (let [v3,v4,v5,v6] of v1) {
    [-1.7976931348623157e+308,1.0,0.46729665110783614];
    [-489988.39152912545,1000.0];
    [1000000000000.0];
}
function F10(a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a12;
    } catch(e13) {
    }
    try {
        this.g = v2;
    } catch(e14) {
    }
    try {
        this.a = a12;
    } catch(e15) {
    }
}
const v16 = new F10(v2);
const v17 = new F10(v2);
new F10(v2);
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v16;
    } catch(e23) {
    }
    try {
        this.g = v1;
    } catch(e24) {
    }
}
new F19(v1, v16);
const v26 = new F19(v0, v16);
const v27 = new F19(v0, v17);
gc + v27;
try {
    gc();
} catch(e33) {
}
Reflect.construct(Set, [v26], F10);
new WeakMap();
function F42(a44) {
    if (!new.target) { throw 'must be called with new'; }
    if (a44) {
        function F45(a47, a48, a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
        }
        F45(this, Set, 3, a44);
    }
    const o54 = {
        toString() {
            super[this];
        },
    };
    try { o54.toString(); } catch (e) {}
    for (let i58 = 256n, i59 = 10; i58 < i59;) {
    }
    const v67 = new BigUint64Array(3375);
    v67[0];
    v67[2];
    v67[3];
}
new F42();
new F42();
