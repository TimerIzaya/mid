const v0 = [];
function f1() {
    const o11 = {
        ...v0,
        [v0]: v0,
        set b(a3) {
            v0["toSorted"](..."toSorted", ..."toSorted", ..."toSorted", ...v0);
            const v6 = async (a7, a8) => {
                'use strict';
                try {
                    a7.g = v0;
                } catch(e9) {
                }
                await this;
                return "toSorted";
            };
        },
    };
    return o11;
}
f1[Symbol.toPrimitive] = f1;
const v14 = f1();
const v15 = f1();
const v16 = f1();
Object.defineProperty(v14, 2, { configurable: true, enumerable: true, value: "CQL" });
Object.defineProperty(v15, f1, { configurable: true, value: v14 });
function f18() {
    return v14;
}
const v21 = [6,2147483647,-16,1832767805];
v21.toString = f1;
[-1,65536,17517,-65535,536870912];
const v23 = [-34890,-9223372036854775808,-789674582,1];
v23[Symbol.toPrimitive] = f1;
class C26 extends f1 {
    constructor(a28, a29, a30, a31) {
        function f32(a33) {
            for (let v34 = 0; v34 < 100; v34++) {
                f1();
            }
            return a33;
        }
        Object.defineProperty(a28, "valueOf", { writable: true, value: f32 });
        a30.valueOf = Symbol;
        super();
        let v39 = -1.0298362256352353e+305;
        a28 >> 8;
        v0.length *= -1985472885;
        try { new a30(this); } catch (e) {}
        f1 <= "crzz7" ? f1 : "crzz7";
        try { v0.forEach(C26, "Xx"); } catch (e) {}
        Math.expm1(v39);
        const v49 = super.b;
        try { a31(C26, -1985472885, v49, a29); } catch (e) {}
        ~-1985472885;
        Math.floor(a28);
        ~a28;
        ~(--v39);
    }
}
const v56 = new C26(v21, v16, f1, v15);
const v57 = new C26(v23, v56, v15, v14);
new C26(v0, v57, v0, v56);
const v60 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
const v64 = Reflect.construct(Uint8Array, [v60]);
try { v60.findIndex(v64); } catch (e) {}
