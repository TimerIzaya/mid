new BigInt64Array(39);
function F3() {
    if (!new.target) { throw 'must be called with new'; }
}
let v5 = 0;
true && true;
const v9 = new SharedArrayBuffer(SharedArrayBuffer, SharedArrayBuffer);
v9.byteLength;
do {
    v5++;
} while (v5 < 7)
new Int8Array(10);
new Int32Array(4096);
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a22;
    } catch(e24) {
    }
    try {
        this.f = 10;
    } catch(e25) {
    }
}
new F20(39, 39);
new F20(10, 10);
new F20(39, 39);
function F29() {
    if (!new.target) { throw 'must be called with new'; }
}
const v31 = new F29();
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
}
const v36 = new F32();
const v40 = [601759695];
const v41 = [1073741824,1073741823,1376142744,1073741825];
function f42(a43, a44, a45, a46) {
    function f48() {
        const o67 = {
            "c": -37859n,
            [arguments](a52, a53) {
            },
            "maxByteLength": v41,
            [-37859n](a55, a56) {
            },
            [9007199254740991]: 0,
            "type": "Vre",
            "f": "Vre",
            "c": v40,
            valueOf(a58, a59) {
            },
            "maxByteLength": -4294967295,
            "type": "Vre",
            valueOf(a61, a62) {
            },
            toString(a64, a65, a66) {
            },
        };
    }
    f48();
    %OptimizeFunctionOnNextCall(f48);
}
const v70 = [];
v9.slice(5);
new Uint8ClampedArray();
const t66 = -37859n;
new t66();
function F77() {
    if (!new.target) { throw 'must be called with new'; }
    const v81 = Date.toString(F77);
    v81[23];
    v81.replaceAll(v31, -37859n);
    const v85 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v85[2];
    return -37672;
    function f90() {
        function f92(a93) {
            return a93;
        }
        this.onmessage = f92;
        try {
            class C94 {
            }
            const v95 = new C94();
            const v96 = [5];
            const v98 = [];
            Reflect.apply(v96.fill, v95, v98);
        } catch(e101) {
        }
        return f90;
    }
    const v102 = new Set(v70);
    const v103 = v102.add;
    v103.f = v103;
    Math.log1p(268435456);
    const o110 = {
        set c(a109) {
            super.c -= 65536;
        },
    };
    try { v103(v85); } catch (e) {}
    const v113 = v102["delete"](839612.5677247904);
    const v114 = v113 || v113;
    const v115 = v114 || v114;
    v115 && v115;
    const v117 = v114 && v114;
    v117 || v117;
    const o120 = {
    };
    o120.b = o120;
    const v121 = [];
    try { v121.with(v121); } catch (e) {}
    1073741824 - 1459564924;
    try { Array(9223372036854775807); } catch (e) {}
    const v129 = ("getPrototypeOf").blink();
    const v130 = BigInt64Array[28];
    const v131 = v130.strike();
    v131[4] = v131;
    const v133 = v129.strike(591114.0785999324).replace(19793, v36);
    v133[11] = v133;
    class C136 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C137 extends Set {
        ["getPrototypeOf"] = C136;
    }
    new C137();
    const v139 = new C137();
    const t129 = v139.constructor;
    new t129();
    const v142 = new C137();
    v142.getPrototypeOf;
    const v145 = BigUint64Array.of();
    new BigUint64Array();
    new Int8Array();
    const v150 = new C137();
    const t137 = v150.getPrototypeOf;
    new t137();
    const v153 = v150.getPrototypeOf;
    let v154;
    try { v154 = new v153(); } catch (e) {}
    v154.getPrototypeOf = v154;
    const v155 = new F3();
    const v156 = v155.getPrototypeOf;
    try { new v156(); } catch (e) {}
    try { v156(); } catch (e) {}
    let v159;
    try { v159 = new v156(); } catch (e) {}
    let v160;
    try { v160 = v159.propertyIsEnumerable(v133); } catch (e) {}
    const v161 = v160?.constructor;
    try { v161.call(v130); } catch (e) {}
    let v163;
    try { v163 = new v161(v129, this, 4); } catch (e) {}
    v163.getPrototypeOf;
    try { (591114.0785999324).constructor(); } catch (e) {}
    const v166 = v145.constructor;
    let v167;
    try { v167 = new v166(F77, v117); } catch (e) {}
    v150?.constructor;
    const v169 = v167?.getPrototypeOf;
    v169.h = v169;
    for (const v171 of Array(19793)) {
    }
}
new F77();
new BigInt64Array(2325);
function F176(a178, a179, a180) {
    if (!new.target) { throw 'must be called with new'; }
    a179 === a179;
    new BigUint64Array();
    /anVXYFzN(x)(x)(x)\3/gvdms;
}
new F77();
