function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = F0;
    try {
        this.b = -65536;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
v6.b = v6;
class C7 {
    4;
    set g(a9) {
        function F10(a12, a13, a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = F0;
            } catch(e16) {
            }
            try {
                this.e = a15;
            } catch(e17) {
            }
            try {
                this.d = a13;
            } catch(e18) {
            }
        }
        new F10(v4, v5, v6, this);
        new F10(v6, a9, F10, v6);
        new F10(v4, this, a9, a9);
    }
}
let v22;
try { v22 = new C7(); } catch (e) {}
v22[4];
new C7();
const v25 = new C7();
v25[4];
new C7();
let v28 = 127;
v28--;
const v31 = new Int32Array(v28);
function f32() {
    function f33(a34) {
        function f35(a36) {
            return f35;
        }
        class C37 {
            static {
                try { f35(...this); } catch (e) {}
            }
            static 4294967296;
        }
        return v31;
    }
    return f33;
}
Object.defineProperty(v31, "toString", { writable: true, get: f32 });
v31[92] = v31;
let v40;
try { v40 = v31.keys(); } catch (e) {}
Uint8Array.length;
new Uint8Array(1801);
1799 - 1799;
Int16Array.length;
new Int16Array(1799);
try { ("string").trimLeft(); } catch (e) {}
let v53 = 1.4413252106531378e+308;
v53--;
const v55 = v53 ^ v53;
256 << 256;
class C60 {
}
try { C60.bind(v40); } catch (e) {}
let v62;
try { v62 = new C60(); } catch (e) {}
function f63(a64, a65) {
    try {
        v25.fuck(v55, undefined, v28);
    } catch(e68) {
    }
    return a65;
}
v62.constructor = f63;
const v69 = v62?.constructor;
let v70;
try { v70 = new v69(); } catch (e) {}
const v71 = new C60();
function f72() {
    ([-4294967297n]).toLocaleString();
    return v70;
}
v71.constructor = f72;
const v76 = v71?.constructor;
try { new v76(); } catch (e) {}
const v78 = v71?.constructor;
let v79;
try { v79 = new v78(); } catch (e) {}
const v80 = v79?.constructor;
try { new v80(); } catch (e) {}
class C82 {
    static #e;
    static {
        try { this.apply("31248", -1); } catch (e) {}
        try {
            v71.#e = this;
        } catch(e85) {
        }
    }
    static n(a87, a88, a89) {
        v71.#e;
    }
}
C82.prototype = C82;
try { Math.cbrt(256); } catch (e) {}
-2147483648;
