const v0 = [1073741825,-35997,1];
const v1 = [6,-2,268435440,-1408339344,-52071,16,446586619,127];
const v2 = [-13,-38301,-128,256,127,16141,-9007199254740990,268435441,-256,-62126];
let v5;
try { v5 = new Float32Array(v0, v2, v0); } catch (e) {}
new Float32Array(1739);
const v8 = 0 >> 0;
const v10 = new Int16Array(0);
let v13;
try { v13 = Uint32Array.from(0); } catch (e) {}
v5 / v10;
try {
    const o15 = {
    };
    v10.findLastIndex(v13, o15);
} catch(e17) {
}
new Uint32Array(v8);
class C19 {
    toString(a21, a22, a23, a24) {
        try { this.o(1739); } catch (e) {}
        let v26 = 0;
        while (v26 < 4) {
            new Array(12);
            v26++;
        }
        return v1;
    }
    static 3052261207;
}
const v33 = new C19();
const v34 = v33?.constructor;
let v35;
try { v35 = new v34(); } catch (e) {}
new C19();
const v37 = v35?.constructor;
try { new v37(); } catch (e) {}
const v39 = new C19();
let v40 = Map;
const v41 = new v40();
class C42 {
    set d(a44) {
        C42.__proto__;
        Object.defineProperty(v5, v0, { writable: true, enumerable: true, value: v10 });
        a44[this] = v40 >>>= a44;
    }
    #m(a50, a51) {
        let v52 = "jER";
        const v53 = [17452,4294967295,64,-8];
        [v52] = v53;
        try { new v52(...v53, -1.6798118066934893e+307); } catch (e) {}
        a51 ^ a50;
        Uint32Array * this;
        new C42(1433);
        const v63 = new Uint8Array(255);
        new Float32Array(299);
        return v63;
    }
}
C42.e = C42;
const v67 = new C42();
const v68 = new C42();
v68.b = v68;
const v69 = new C42();
const v70 = v69.d;
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    const v75 = this?.constructor;
    try { new v75(a73, v68); } catch (e) {}
    try {
        v10.c = v41;
    } catch(e77) {
    }
}
const v78 = new F71(v67, v68);
const v79 = v78.c;
new F71(v68, v68);
new F71(v67, v69);
try { v79(-65537n, v40); } catch (e) {}
v67[5] |= 1739;
v69 >= v68;
delete v70?.[-2];
Float32Array ** v39;
let v88 = -319780339n;
v88--;
function f90() {
    return v88;
}
/a|bc*/udisy;
const v92 = /Q?/gud;
v92.dotAll = v92;
/[x\dz]/dms;
Math.tan(-532550611);
