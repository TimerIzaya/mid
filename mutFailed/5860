class C3 {
    get h() {
        const v5 = super.b;
        let v6 = 0;
        while (v6 < 7) {
            v5[10] = this;
            delete this?.b;
            v6++;
        }
        return v5;
    }
    e = C3;
}
const v11 = new C3();
const v12 = new v11();
const v13 = new C3();
function f14(a15, a16) {
    const o29 = {
        [a15]: C3,
        1: C3,
        set a(a18) {
            Math.tan(v12);
            !-728714874;
            a18.sqrt(v13);
            Math.asin(v12);
            a15++;
            Math.atanh(v11);
        },
    };
    return C3;
}
const v30 = f14(C3, v11);
const v31 = f14(v12, v13);
f14(v12, v12);
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a36;
    } catch(e37) {
    }
    try {
        this.f = a35;
    } catch(e38) {
        new WeakSet();
        class C43 {
            constructor(a45, a46, a47, a48) {
                const o50 = {
                };
                a47(o50);
            }
        }
        new C43(13, C43, 13, 13);
    }
    try {
        this.h = -728714874;
    } catch(e53) {
    }
}
const v54 = new F33(v30, v30);
new F33(v31, v54);
new F33(C3, -728714874);
const v57 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v58 = 0; v58 < 5; v58++) {
    function f59() {
        try {
            v57.forEach();
        } catch(e61) {
            e61.message;
            const v63 = e61.constructor();
            const o64 = {
                "execution": v63,
            };
        }
        return F33;
    }
    f59.call(v57, f59, v57, f59);
    %OptimizeFunctionOnNextCall(f59);
}
