const v2 = new Array(2);
try { ("includes").isWellFormed(); } catch (e) {}
class C7 extends Array {
    c = "boolean";
    static valueOf(a9, a10, a11) {
        Object.defineProperty(a11, 639324545, { enumerable: true, value: delete a11?.length });
        let v13 = a11 || a10;
        ({"b":a11,"h":v13,} = this);
        v2 || this;
        return a11;
    }
    static #e = "includes";
    5 = Array;
    a;
}
try { C7.valueOf(Array, v2, Array); } catch (e) {}
new C7();
new C7();
const v18 = new C7(v2);
const v25 = [-4294967295,-37292,-1645133412,10000];
const v26 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v27 = v26[4];
let v28 = v27 | v27;
v28++;
const v30 = [40213,422333454,47387,65536,-51830];
v30[2] = v30;
0 - 0;
8 >>> 8;
try { gc(); } catch (e) {}
gc();
new BigInt64Array();
try { ("boolean").strike(); } catch (e) {}
let v45;
try { v45 = ("boolean").repeat(1000000.0); } catch (e) {}
try { v45.match(-1024); } catch (e) {}
try { ("toString").match(v18); } catch (e) {}
const t36 = "toString";
t36[6] = "toString";
const v49 = "toString" == "toString";
v49 && v49;
("boolean").split("toString")[0];
let v53 = -256;
v53++;
v53 >> v53;
function f56(a57, a58) {
    a58--;
    a57 | a57;
    const o74 = {
        "c": 15135,
        "a": 15135,
        "d": a57,
        __proto__: a58,
        "g": -1628878962,
        "type": "boolean",
        "g": a57,
        set b(a62) {
        },
        "g": 15135,
        "b": a58,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f67() {
                    return f67;
                }
                const o69 = {
                    [f67]() {
                    },
                };
                [o69];
                v26.copyWithin(8, -268435456, v53);
            } catch(e73) {
            }
            return this;
        },
    };
    o74.d = o74;
    o74.g = o74;
    return o74;
}
let v75;
try { v75 = f56(15135, 15135); } catch (e) {}
v75[1000000].type;
f56(925.1427495594241, v25);
f56(-198.49398900884933, -4);
const v80 = f56(1000000.0, v26);
v80.d = v80;
268435441n ^ 268435441n;
268435441n - 268435441n;
const v85 = new BigUint64Array();
v85[2445191368] = 268435441n;
