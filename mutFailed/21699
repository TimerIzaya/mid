function f0() {
    const o10 = {
        "g": Infinity,
        m(a5) {
            let v6;
            try { v6 = ("boolean").substring(a5, a5); } catch (e) {}
            const v7 = `isArray${"toTimeString"}boolean${Infinity}symbol${a5}m`;
            if (v7 > v7) {
                super[v6];
            } else {
                v7["toTimeString"] = "toTimeString";
            }
            return v7;
        },
        "f": "boolean",
        "a": Infinity,
    };
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
v13.a = v13;
function F14(a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.constructor;
    try { new v17(this); } catch (e) {}
    try {
        this.d = a16;
    } catch(e19) {
    }
    try {
        this.b = a16;
    } catch(e20) {
    }
}
F14.length = F14;
new F14(v12);
const v22 = new F14(v12);
v22.g = v22;
const v23 = new F14(v13);
v23.d = v23;
const v26 = new WeakMap();
try { new Uint16Array(v12, WeakMap, WeakMap); } catch (e) {}
const v30 = new Uint16Array(9);
try { new BigInt64Array(v13, v13, v12); } catch (e) {}
new BigInt64Array(35);
new BigInt64Array(255);
class C38 {
    constructor(a40, a41) {
        a40.prototype = a40;
        let v42 = 10;
        for (let i = 0; i < 5; i++) {
            const v43 = v42--;
            function f44(a45, a46, a47, a48) {
                const v50 = new Int16Array();
                try { v50.entries(); } catch (e) {}
                async function f53(a54, a55, a56) {
                    for (const v57 of a40) {
                        -740089575 ^ v42;
                        9 < -740089575;
                        new BigInt64Array(1073741824);
                        const o64 = {
                            get a() {
                                return this;
                            },
                        };
                    }
                    await v50[1];
                }
                f53().finally(Uint8Array);
                return v43;
            }
            try { f44.bind(v30); } catch (e) {}
            for (let v70 = 0; v70 < 5; v70++) {
                f44();
            }
            %OptimizeFunctionOnNextCall(f44);
        }
    }
}
try { new C38(v12, v26); } catch (e) {}
new C38(C38, C38);
