const v1 = new Set();
const v4 = new v1(1024);
new Uint32Array(5);
new Uint16Array(1024);
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v1.h = 4294967296n;
        ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
        const v20 = [155533.8602852358,2.0];
        function F22() {
            if (!new.target) { throw 'must be called with new'; }
            const v24 = this?.__defineSetter__;
            let v25;
            try { v25 = new v24(); } catch (e) {}
            for (const v29 of Array(19793)) {
                v20[658291203] = F22;
                v25--;
            }
        }
    } catch(e31) {
    }
    try {
        this.a = F14;
    } catch(e32) {
    }
    try {
        this.d = Uint32Array;
    } catch(e33) {
    }
}
new F14(F14, 1024);
new F14(v4, 129);
new F14(5, 5);
const v38 = ([]).length;
function f40(a41) {
    const o47 = {
        __proto__: v38,
        "c": v38,
        "e": 536870889,
        213: v4,
        ...a41,
        "g": v38,
        p(a43, a44) {
            try {
                this.fuck(536870889, a41);
            } catch(e46) {
            }
            return this;
        },
    };
    return o47;
}
f40();
%OptimizeFunctionOnNextCall(f40);
Math.log10(v38);
