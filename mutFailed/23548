function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F0;
    Math.log2(0);
    const v6 = new BigUint64Array();
    function f8(a9, a10) {
        return a9;
    }
    const o26 = {
        [v6](a12, a13, a14) {
            class C15 {
                static {
                    function f17() {
                        return Int8Array;
                    }
                    const v18 = f17();
                    f8(v18, v18);
                }
            }
            for (let i21 = 0; i21 < 10;) {
            }
        },
    };
    try {
        this.c = -16389;
    } catch(e28) {
        new Float32Array();
        return 9007199254740991;
        function f33() {
            -601018.3320674116 + isFinite;
            return -601018.3320674116;
        }
        f33();
    }
    try {
        this.a = -16389;
        function f37() {
            const v39 = ("D")[0];
            return v39.concat(v39);
        }
        f37();
    } catch(e42) {
    }
}
const v43 = new F0();
new F0();
new F0(F0, F0, v43);
class C53 {
}
C53.__proto__ = "f";
new Uint8ClampedArray(14);
try { (6).o(); } catch (e) {}
("D")[0].substring(129);
function f66() {
    const v68 = ("D")[0];
    const o73 = {
        "execution": "sync",
        "type": "minor",
    };
    const v74 = gc(o73);
    try {
        const o75 = {
        };
        o75.f = 14;
        o75.e = -16;
        o75.d = v74;
    } catch(e76) {
    }
    v68.substring(129);
    return "D";
}
%PrepareFunctionForOptimization(f66);
f66();
%OptimizeFunctionOnNextCall(f66);
const t74 = 16;
new t74();
function f80() {
    const v83 = ("D")[0].substring();
    v83 == v83;
    v83.charCodeAt();
    return "D";
}
%OptimizeFunctionOnNextCall(f80);
f66();
