function f0() {
}
class C1 extends f0 {
    p() {
        f = this;
        return this;
    }
    toString() {
        this.a -= this;
        return f0;
    }
    n() {
        var b = f0;
        this[f0];
        return f0;
    }
    #e = f0;
    f = f0;
}
new C1();
const v7 = new C1();
const v8 = new C1();
try { v8.n(); } catch (e) {}
new Int32Array(129);
const v15 = new Float32Array(512);
v15[351] = v15;
const v18 = new Int8Array(4);
const v19 = v18?.with;
try { new v19(Float32Array, Float32Array); } catch (e) {}
const t29 = "resize";
t29[1] = "resize";
const v24 = v8.f;
Math.ceil(1862782969);
(v7 && 4) / v7;
function f32() {
    const v33 = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
    const v34 = [-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity];
    function F36(a38, a39) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = arguments;
        } catch(e40) {
        }
        try {
            this.h = arguments;
        } catch(e41) {
        }
        try {
            this.d = v33;
        } catch(e42) {
        }
    }
    const v43 = new F36("vm", v34);
    new F36(v24, v43);
    new F36("vm", F36);
    const v46 = v34.toLocaleString();
    let v47;
    try { v47 = v46.search(f32); } catch (e) {}
    return v47;
}
try { f32.toLocaleString(); } catch (e) {}
f32();
