function f0() {
}
const v3 = new BigUint64Array(251);
const v6 = new Int32Array(16);
new Uint8Array(3417);
class C10 {
    constructor(a12, a13, a14) {
        function f15() {
            return a14;
        }
        super.b;
        a13 === this ? a13 : this;
        new f15();
        const o22 = {
            "maxByteLength": 444677045,
        };
        const v24 = new ArrayBuffer(10, o22);
        new BigInt64Array(v24);
    }
}
const v27 = new C10(251, 16, 3417);
new C10(v27, 3417, 3417);
const v29 = new C10(251, 3417, 251);
const v30 = [251,v29,v27];
[BigUint64Array,Int32Array,C10,v3];
[v6,16];
const v33 = [];
const v34 = [v33];
class C36 extends Map {
    constructor(a38, a39) {
        super(v34);
    }
}
const v40 = new C36(v33, v34);
const v41 = new C36(v34, v40);
const v42 = new C36(v41, v40);
const v46 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v46["reduce"](f0, v46);
%VerifyType(v34);
-v30;
5 >> (256 << 256);
const v55 = ~5;
!BigUint64Array;
Math.fround(v55);
const v59 = new Uint32Array();
let v60 = -4294967297n;
const v61 = v60--;
const v62 = [601759695];
const v63 = [1073741824,1073741823,1376142744,1073741825];
function f65(a66, a67, a68, a69) {
    try { a66.toLocaleString(); } catch (e) {}
    const v71 = a66?.constructor;
    try { v71(); } catch (e) {}
    try { v71(); } catch (e) {}
    const v75 = arguments.length;
    Object.defineProperty(v40, "e", { configurable: true, enumerable: true, value: f65 });
    const v77 = v41["entries"](a68, ...v42, BigUint64Array, ..."entries", a67, v75);
    const v79 = Symbol.toStringTag;
    v41[v79] = v79;
    function f80() {
        let v82;
        try { v82 = ("Vre").charAt(4096); } catch (e) {}
        try { v82.lastIndexOf(); } catch (e) {}
        let v84;
        try { v84 = ("Vre").codePointAt(v46); } catch (e) {}
        v84 - v84;
        v84 ^ v84;
        let v87 = Float64Array;
        v87 = a67;
        let v88 = v46.length;
        v88++;
        try {
            v63.forEach(a67);
        } catch(e91) {
            e91.stack = e91;
        }
        const o102 = {
            "c": v60,
            "EPSILON": v62,
            valueOf(a93, a94) {
                return a93;
            },
            1073741824: v59,
            [v60](a96, a97, a98, a99) {
                eval();
            },
            "arguments": 5,
            256: a69,
        };
        return v88;
    }
    f80();
    const v105 = Array();
    let v106;
    try { v106 = v105.findLast(f65, v59); } catch (e) {}
    v105.unshift("entries", v77, "entries", v106);
    let v109;
    try { v109 = Int8Array.of(); } catch (e) {}
    try { v109.join(v71); } catch (e) {}
    const v111 = new Int8Array(v62);
    const o115 = {
        "execution": "sync",
        "type": "major",
    };
    gc(o115);
    v111.c = v111;
    const v117 = v111.buffer;
    v117.maxByteLength;
    const o122 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o122);
    const v124 = v117.slice(v71);
    try { Int32Array(v124, arguments, v60); } catch (e) {}
    function f127(a128, a129, a130, a131) {
        return a131;
    }
    const v132 = new Int32Array();
    const v133 = v132[3];
    v133 + v133;
    for (let v135 = 0; v135 < 5; v135++) {
    }
    %OptimizeFunctionOnNextCall(f80);
    try { v63["find"](..."find", a69, ...v62, ...v63, ...522675525n); } catch (e) {}
    return a66;
}
for (let v138 = 0; v138 < 10; v138++) {
    f65(v59);
}
%OptimizeFunctionOnNextCall(f65);
f65(v62, v33, v61, f65);
