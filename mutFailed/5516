let v2 = 45478;
class C3 {
    static #h = -2.1662003903347156;
    #c;
    constructor(a5, a6, a7) {
    }
    static set e(a9) {
        BigUint64Array.p(this);
        const v15 = -(-8);
        BigUint64Array.expm1(this);
        v2--;
        const v20 = new Uint8ClampedArray(1907);
        v20[7] = 43464885;
        v20.fill(512, 66);
        v15 >>> this;
        v2 + 36575;
        v15 & 0.0;
    }
}
new C3();
new C3();
new C3();
new Uint8Array(16);
function f36() {
    return f36;
}
[f36,[f36,f36,f36,f36]];
class C47 {
}
const v48 = new C47();
const v49 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
v49[9] = v49;
const o50 = {
};
Object.defineProperty(o50, "setPrototypeOf", { writable: true, configurable: true, value: 1073741824 });
const v52 = new Proxy(v49, o50);
Object.defineProperty(v52, 8, { value: o50 });
v52.unshift(v48, C47, 464227.1824305169);
Date.valueOf = Date;
new Date(Date);
new Set();
const v58 = new C47();
const v59 = v58.__defineSetter__;
try { v59(); } catch (e) {}
try {
} catch(e63) {
    const v65 = new Uint32Array(Uint32Array);
    new Int16Array(v65);
    16 << 16;
    function F70() {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f72() {
        return e63;
    }
}
