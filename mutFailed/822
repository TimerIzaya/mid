new Map();
let v3 = 8;
let v5;
try { v5 = Uint8Array.toString(); } catch (e) {}
let v6;
try { v6 = v5.isSafeInteger(); } catch (e) {}
new v6(v3);
const v9 = 79 & 79;
let v11;
try { v11 = new BigInt64Array(v3, v3, v3); } catch (e) {}
v11[3];
const v13 = new BigInt64Array(79);
try { new Uint16Array(5, v3, v13); } catch (e) {}
const v17 = new Uint16Array(5);
v17[4] = v11;
class C18 extends BigInt64Array {
    static {
        this.g = this;
        const o20 = {
        };
        o20.h = o20;
        try {
            o20.arguments = Uint8Array;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            C18.h = o22;
            o22.c = o22;
            o22.byteOffset = v11;
            o22.f = this;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.g = Uint8Array;
            o24.f = this;
            o24.c = v9;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.g = Uint8Array;
            o26.c = this;
            this.c = Uint8Array;
        } catch(e27) {
        }
    }
}
let v28;
try { v28 = new C18(); } catch (e) {}
new C18();
new C18();
new v28();
!(5 === -1073741824);
const v36 = v3++;
v36 - v36;
-(-8455);
/Ckza\Wb?/vis;
