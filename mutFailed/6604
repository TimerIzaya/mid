const v0 = [9007199254740990,1076309412];
[129,256];
const v2 = [127,-9,-1722390886,-1352804197];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { a5.push(a5); } catch (e) {}
    let v8;
    try { v8 = this.toString(); } catch (e) {}
    try { v8.match(v2); } catch (e) {}
    try {
        this.d = a6;
    } catch(e10) {
    }
    try {
        this.b = v0;
    } catch(e11) {
    }
}
F3.c = F3;
const v12 = new F3(v2, v2);
const v13 = v12?.__lookupSetter__;
const v14 = v13?.constructor;
try { new v14(v14); } catch (e) {}
let v16;
try { v16 = new v13(v12); } catch (e) {}
const v17 = new F3(v2, v0);
new F3(v2, v17);
const v21 = new v16(8);
v21[6] = v21;
const v24 = Uint8Array.name;
v24[5];
new Uint8Array(5);
Float64Array.prototype = Float64Array;
const v29 = new Float64Array(7);
v29.g = v29;
try { BigUint64Array(v21, v24, 5); } catch (e) {}
const v33 = new BigUint64Array(4096);
try { v33.join(v2); } catch (e) {}
const o43 = {
    toString(a36, a37) {
        ~a36;
        const v39 = this?.__lookupGetter__;
        try { new v39(v29); } catch (e) {}
        const v41 = a37 + a37;
        v41 >>> v41;
        v33[3408] = this;
        return 4096;
    },
};
try { o43.toString(v33, 4096, 4096, BigUint64Array); } catch (e) {}
