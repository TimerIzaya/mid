const v1 = /(?:a*)+q(?<a>.)/guds;
function f2(a3) {
    const o7 = {
        set b(a5) {
        },
        get d() {
            return a3;
        },
        __proto__: v1,
    };
    return o7;
}
for (let i10 = 0, i11 = 10; i10 < i11; i11--) {
    for (let v18 = 0; v18 < 50; v18++) {
        f2(v1);
    }
}
3.4890473589784586e+307 === Uint8Array;
function f24(a25) {
    delete f2[a25];
    return 3.4890473589784586e+307;
}
const v29 = new WeakMap();
class C30 {
    static h = 8;
    static [1469638456] = 1469638456;
    static get b() {
        [1073741825];
        [-2,-3,-65536,8,3,0,-69037407,-1,-9007199254740991,-128];
        [47997291,-4294967295,-577167878,-2147483649,16478,4,22264,65537,14];
        return 8;
    }
    static 10000 = v29;
    [3.4890473589784586e+307];
    static {
        this < this;
    }
    static {
        try {
            this.#d;
        } catch(e39) {
        }
    }
    [WeakMap];
    #g = 1469638456;
    [v29];
}
new C30();
const v41 = new C30();
const v42 = v41?.__defineGetter__;
try { new v42(15, 15); } catch (e) {}
const v44 = [-1.7976931348623157e+308,1.567547754457685];
new Uint32Array(v44, v44, Uint32Array);
class C47 {
}
const v48 = new C30();
const v51 = new BigUint64Array(4);
[v51];
class C54 {
    [-55801.39760616061];
}
const v55 = new C54();
for (const v56 in v55) {
}
try { v48.toString(); } catch (e) {}
~-9007199254740992;
-4096;
const v74 = new Uint8ClampedArray(4096);
v74[2388] = v74;
2889 % 2889;
new Int8Array(2889);
function f83() {
    return 36924;
}
function f84(a85, a86, a87, a88) {
    const o100 = {
        __proto__: a87,
        ...a87,
        [a87](a90, a91, a92) {
            function f94() {
                return f94;
            }
            for (let [v96,...v97] of "atan2") {
            }
            return "function";
        },
    };
    return o100;
}
f84(-65536, 36924, f83);
new BigUint64Array(47);
function f104(a105, a106) {
    -588750793 - -588750793;
    return -588750793;
}
Float32Array.toString = f104;
function f109(a110, a111, a112) {
    return f109;
}
const v113 = f109?.constructor;
try { new v113(f104); } catch (e) {}
class C115 extends f109 {
}
C115.e = C115;
Object.defineProperty(C115, Float32Array, { enumerable: true, get: f109 });
