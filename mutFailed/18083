const v2 = new BigUint64Array(9);
for (let v4 = 0; v4 < 5; v4++) {
    function f5() {
        Math.atan(Math);
        return Math;
    }
    f5();
    %OptimizeFunctionOnNextCall(f5);
}
const v10 = new Uint8Array(256);
const v13 = new Int32Array(64);
const v14 = [64,9,9,64];
let v15 = [9,v13,Uint8Array,Int32Array,v14];
with (v14) {
    length = v14;
    const v16 = 64 && v2;
    v15.flat(...v15, v16, v16[1379], ...v10, ...v15, ...v14);
}
const v19 = [v14,v15,v15];
function f20() {
    return v14;
}
let v22;
try { v22 = v15.keys(); } catch (e) {}
v15 ^= v15;
try { v22(BigUint64Array, 9); } catch (e) {}
v10[Uint8Array] = 9;
v19.length;
const v29 = new BigInt64Array(65535);
class C30 {
    static [v29];
}
