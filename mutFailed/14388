const v0 = [9007199254740991,-10];
[-46508,-355854000,-13537,-4294967297,-2,6,129,16,4294967296,-23512];
[-10];
/((?!\1(a\1)\1)\1)/vimy;
/a\nx(v[a-zA-Z0-9])/gudis;
const v5 = /a[bc]d/gd;
const v7 = new Map();
const v9 = new Set();
class C10 extends Map {
    static get a() {
        v5[v9];
        let v13 = this[1073741824];
        const v14 = v5 >> v5;
        try { v7.clear(); } catch (e) {}
        v13 = v14;
        new Int32Array(78);
        const t16 = 128;
        new t16(128);
        new Int8Array(7);
        return Set;
    }
}
new C10();
new C10();
const v27 = new C10();
[-6886];
[35504];
[268435440,-2147483649,-1311118086,6247,-1024,-4294967295];
[];
class C41 {
}
const v42 = new C41();
const v43 = new C41();
const t33 = 37695;
const v44 = new t33();
[Set,v42,[-1.0,v44,-48725,2119294231],C41];
[-2.2250738585072014e-308,-48725,-2.2250738585072014e-308,-5.0];
new Int8Array();
new Float32Array(1000);
new Uint8Array(58);
function F57() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v61 = Array(19793);
        for (const v62 of v61) {
        }
        const v63 = [v61];
        const v65 = new BigUint64Array();
        const v67 = [];
        function F68() {
            if (!new.target) { throw 'must be called with new'; }
            class C70 {
            }
            for (let i73 = 0, i74 = 10;
                i73++, i73 < i74;
                (() => {
                    const v79 = [601759695];
                    const v80 = [1073741824,1073741823,1376142744,1073741825];
                    function f81(a82, a83, a84, a85) {
                        function f86() {
                            return a82;
                        }
                        function f87(a88, a89) {
                            return a88;
                        }
                        try { f87(); } catch (e) {}
                        f87(v80, C70);
                        try { v80["find"](..."find", a85, ...v79, ...v80); } catch (e) {}
                        return C70;
                    }
                    for (let v94 = 0; v94 < 10; v94++) {
                        f81(v94, f81, i73, v94);
                    }
                })()) {
            }
            this[v0];
            %VerifyType(37695);
        }
        new v43();
        const v103 = new F68();
        v67[65536] = v103;
        for (let v104 = 0; v104 < 50; v104++) {
        }
        v67[65536] %= 256;
        [v63,v63,v63];
        const v106 = [];
        Uint16Array.valueOf = Array;
        try { v67.keys(); } catch (e) {}
        try {
            const v109 = /9a??/vdisy;
            this.fuck(v65, -2.2250738585072014e-308, v109, 356.0732155484043);
            let v112 = 0;
            while (v112 < 1) {
                v109[1282374135];
                v112 = 37695;
                v112++;
            }
        } catch(e117) {
        }
        class C119 {
            static [376363416];
            static {
                super.b = this;
                let {...v121} = this;
            }
        }
        class C123 {
        }
        v106 >= Uint16Array;
    } catch(e125) {
    }
}
new F57();
class C127 {
    b;
}
const v128 = new C127();
function F129(a131, a132) {
    if (!new.target) { throw 'must be called with new'; }
    function f133() {
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f133 });
}
new F129(F129, F129);
const v137 = new C127();
function f138(a139, a140, a141, a142) {
    const o143 = {
    };
}
f138(v128, 536870888n, 4n, v137);
f138(v128, 4n, 4n, v137);
let v149 = -469461.976235881;
const v150 = !v149;
const v151 = --v149;
~v150 ^ v151;
const v154 = ~v150;
Math.pow(v150, 2119294231);
~v154;
const v157 = new BigInt64Array();
v27[0] = v157;
