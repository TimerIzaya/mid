const v0 = [2.220446049250313e-16,2.220446049250313e-16,-1.7976931348623157e+308,1000000.0,NaN,-1000000.0,2.2250738585072014e-308];
const v1 = [NaN,-3.3780021990858143e+307,-1.0,-1000000000000.0,-5.792085451232241e+307,-1.1630453804150974e+308];
const v2 = [1.7356287087686901,-479515.1800251649,-4.0,8.487351009049986e+307,0.008823656500678734,2.0,-0.0,-1000.0,-9.22594972069426];
function f3() {
    function f4() {
        const v6 = [1000,1000,1000,1000,1000];
        for (let i = 0; i < 5; i++) {
            Object.defineProperty(v6, 130, { value: 1000 });
        }
        return v6;
    }
    return f4;
}
Object.defineProperty(v2, "toString", { writable: true, enumerable: true, get: f3 });
const v7 = [v2];
const v8 = [v0,v1];
const v9 = [v2,v8,v0];
function f10(a11, a12) {
    const v14 = new Date();
    const v16 = new Set();
    v16.add(v14);
    return v2;
}
v9.toString = f10;
function f18(a19, a20, a21, a22) {
    a21[Symbol.toPrimitive] = f18;
    const o36 = {
        "h": a21,
        __proto__: a19,
        158: f18,
        ...a22,
        [a19]: v1,
        "g": a21,
        set e(a26) {
            new Int32Array(5);
            new Int16Array(3896);
            new Float32Array(16);
        },
    };
    return o36;
}
const v37 = f18(v1, v9, v1, v9);
const v39 = f18(v9, f18(v8, v0, v2, v7), v8, v1);
const v41 = [v9,v7,v0,v1,[v0]];
[v37,v9,v37,v37,v9];
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a46;
    } catch(e47) {
    }
    try {
        this.c = f18;
    } catch(e48) {
    }
    try {
        this.h = a46;
    } catch(e49) {
    }
}
const v50 = new F43(v8, v8);
new F43(f18, v41);
new F43(v50, v1);
/(x)(x)(x)\3*/gvi;
const v57 = /((?<=a))/gudm;
const v58 = /gk4b*/vmsy;
[v58,v58,v58];
[v39,1e-15,v57];
[-4,2];
let v64;
try {
const t0 = -1.3832922122240728e+307;
v64 = t0(2);
} catch (e) {}
for (let v65 = 0; v65 < 5; v65++) {
    v65 < 1;
    try { v64(v57, v65, v58, v65, -4); } catch (e) {}
    const v70 = Symbol.iterator;
    const o74 = {
        [v70]() {
            const o73 = {
                next() {
                    return v58;
                },
            };
        },
    };
}
