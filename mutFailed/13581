("valueOf").localeCompare();
const v5 = new Date(Uint32Array);
v5.getMonth();
new Float64Array(2);
const v13 = ("1073741824").constructor;
const v14 = v13();
const v17 = new Uint8ClampedArray(4);
v13.indexOf();
new Int16Array(2570);
const v22 = new Uint16Array(1);
class C23 extends Uint16Array {
    static toString(a25, a26, a27) {
        const v28 = a26 >= a26;
        v17[-1] = 10;
        typeof v17 != "string";
        return a25;
        return Int16Array & v28;
    }
    static valueOf(a35, a36, a37, a38) {
        const v39 = 1 != v22;
        const v42 = [601759695];
        const v43 = [1073741824,1073741823,1376142744,1073741825];
        function f44(a45, a46, a47, a48) {
            function f49() {
                const o53 = {
                    toString(a51, a52) {
                        return a45;
                    },
                };
                o53.toString();
                const o62 = {
                    [-4294967297n](a56, a57, a58, a59) {
                        eval();
                    },
                };
                return o62;
            }
            a46();
            try { ("").charCodeAt(Map); } catch (e) {}
            %OptimizeFunctionOnNextCall(eval(a48));
            try { v43["find"](..."find", a48, ...v42, ...v43); } catch (e) {}
            return a47;
        }
        f44(-4294967297n, -4294967297n, 2, 2);
        v14();
        v39 ? 1 : v22;
        return v22;
    }
}
new C23();
class C79 {
}
function f80(a81, a82, a83, a84) {
    const o87 = {
        "e": "valueOf",
        ...a81,
        "d": a81,
        ["valueOf"]: a84,
        "g": 579720983,
        256: "getInt32",
        set b(a86) {
        },
        "b": a83,
        ..."valueOf",
        "f": a83,
        "c": C79,
    };
    return o87;
}
f80();
%PrepareFunctionForOptimization(f80);
new C23();
new Uint16Array();
class C91 {
}
const v92 = new C79();
function f93(a94, a95, a96, a97) {
    const v100 = new Int16Array(1269);
    for (const v101 in v100) {
    }
    const o108 = {
        valueOf(a103, a104, a105, a106) {
            const o107 = {
                [a95]: v92,
            };
            return f93;
        },
    };
    return o108;
}
const v109 = f93(C91, f93, C91, C91);
const v110 = f93();
f93(v110, v110, v109, v109);
const v115 = new C91(9);
v115.includes(1151276981n);
