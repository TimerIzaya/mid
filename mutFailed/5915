const v0 = [-362465.14770943334,7.595595746025263e+307,5.355957382427919,Infinity,4.0,-1.5411789706736758e+308];
[Infinity,4.263648628611339,1000.0,-2.220446049250313e-16,292.89935911936186,-286.75807668401785,-1.0450973169909759,0.0,-923684.1650175309];
[-1.7976931348623157e+308,-2.220446049250313e-16,-27989.291610200075];
function f3() {
    function f5(a6) {
        [a6,this];
    }
    this.onmessage = f5;
    v0 | f5;
}
const v11 = [];
const o12 = {
    "arguments": v11,
    "type": "function",
};
new Worker(f3, o12);
8 === 8;
new Int8Array(8);
const v20 = new BigInt64Array(255);
try { v20.entries(); } catch (e) {}
function f23(a24, a25) {
    const v28 = Array(a24);
    Object.defineProperty(v28, 0, { configurable: true, enumerable: true, get: a24, set: a25 });
    return v28.unshift(3);
}
const v31 = new Uint32Array(64);
class C33 {
    static {
        try { new this(); } catch (e) {}
        try { Symbol.bind(Symbol); } catch (e) {}
        Symbol.hasInstance;
        function F40(a42, a43, a44, a45) {
            if (!new.target) { throw 'must be called with new'; }
            const v46 = this?.__defineGetter__;
            try { v46(undefined, undefined); } catch (e) {}
            try { a42.unshift(a43); } catch (e) {}
            a44 != a44;
            let v50;
            try { v50 = a42.toSpliced(a43, a43); } catch (e) {}
            const v51 = v50?.__defineSetter__;
            try { v51(); } catch (e) {}
        }
        const v53 = this[this];
        v53.c = v53;
    }
    #p() {
        try {
        } catch(e55) {
        }
        new BigInt64Array();
        let v58;
        try { v58 = this.p(undefined, this, this, this, v31); } catch (e) {}
        try {
            v58.#p(undefined, v58, v58, undefined);
        } catch(e60) {
        }
        return undefined;
    }
    static #a = f23;
    c = undefined;
}
try { C33.bind(BigInt64Array); } catch (e) {}
const v62 = new C33();
const v63 = new C33();
const v64 = v63?.constructor;
try { new v64(); } catch (e) {}
const v66 = new C33();
function f67(a68) {
    a68.length;
    const o75 = {
        15: a68,
        toString(a71, a72) {
            super.h = a72;
            try { C33.stringify(a68, a68, this); } catch (e) {}
            try {
                C33.c = v62;
            } catch(e74) {
            }
            return a71;
        },
        2147483647: undefined,
        __proto__: v63,
        "c": a68,
        ...a68,
        "f": a68,
    };
    return o75;
}
const v76 = f67(C33);
v76[2147483647] = v76;
f67(v66)[2147483647];
new Uint16Array(8);
function f81() {
    const o95 = {
        toString(a83, a84) {
            function F85(a87, a88, a89, a90) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f |= a84;
                    a84.c;
                } catch(e92) {
                    e92.stack;
                    Object.defineProperty(a83, 0, { writable: true, get: f81 });
                }
            }
            new F85(this, a83, this, f81);
            return F85;
        },
    };
    return o95;
}
f67(v76);
Math.expm1(-Infinity);
[[65535,268435439,-9007199254740990,268435440,1024,19743,5,4]];
const v105 = [0.0,26.917886948179785];
try { v105.map(v20); } catch (e) {}
[4.0,-6.418452896256084,1000000000.0,4.0,-2.220446049250313e-16,-1000000000.0];
[883.1365358956336,-266.1024094651509,-5.0,1.4118854267221805e+308,-786614.3512895996];
const o110 = {
    valueOf() {
        return this;
    },
};
v76 > C33 ? v76 : C33;
for (let i114 = 0;
    i114 < 5;
    (() => {
        const v118 = i114++;
        v118 + v118;
    })()) {
    i114++;
    try {
        new f67(v76);
    } catch(e123) {
    }
}
