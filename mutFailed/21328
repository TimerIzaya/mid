let v1 = 0;
v1++;
const v3 = [-53613,268435440,268435440,2,-65536,-2147483647];
const v4 = [8];
const v5 = [-1024,-2147483647,-37738,-2,21596,2147483649,9007199254740992,-2039218916];
class C6 {
    static #f;
    static set f(a8) {
        a8(this, this, a8, v4);
    }
    constructor(a11) {
        this.e = v4;
    }
}
const v12 = new C6(v5);
let v15;
try { v15 = v12.reduceRight(4294967295, v5, C6); } catch (e) {}
v5[6] ||= -10;
function f16(a17, a18, a19, a20) {
    const v21 = v4 in v3;
    try { v15(...v4, ...v3, v5, ...v21); } catch (e) {}
    return f16;
}
new BigUint64Array(4065);
2332 | 2332;
const v28 = new Uint32Array(2332);
try { v28.with(Uint32Array, Uint32Array); } catch (e) {}
new Float32Array(1202);
"boolean" == "boolean";
class C36 {
}
const v37 = new C36();
const v38 = [-5.0];
function F39(a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this.constructor;
    try { new v43(v37, v38); } catch (e) {}
    a42.__proto__.valueOf();
}
new WeakSet();
const v49 = ([2146689547,13,2147483648,-15,-4294967297,56311,65536,536870889]).toString();
const v51 = [-9007199254740990,-1024,256,-64592,45766,-10,-7];
let v52;
try { v52 = v51[v49](); } catch (e) {}
const v53 = delete v52?.[1062];
for (let v54 = 0; v54 < 5; v54++) {
    function f55() {
        v53.__proto__.constructor(200);
        return v53;
    }
    f55();
    %OptimizeFunctionOnNextCall(f55);
}
Function.length = Function;
const v61 = new Function(-118.8024069268339);
class C63 {
    static {
        try { this(this, 3.866732047176795e+307, this, ...this); } catch (e) {}
    }
}
v61.setUTCSeconds(Function, -118.8024069268339);
