function f1(a2, a3, a4) {
}
Object.defineProperty(/zP/gud, "source", { configurable: true, enumerable: true, get: f1, set: f1 });
-911667890 | -911667890;
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 64;
    } catch(e13) {
    }
    try {
        this.a = a11;
    } catch(e14) {
    }
    try {
        this.h = 64;
    } catch(e15) {
    }
}
new F9(F9, 64);
new F9(F9, -911667890);
new Int32Array(Int32Array);
class C21 extends Float32Array {
    constructor(a23, a24, a25) {
        super(a25);
    }
}
new F9(-58533, -58533);
[-1024];
[58031,-3,906618160,-14,17219,2147483648,536870889,9,536870888];
[8,962409072,13,1024,-7,-2147483647,6,0,-10];
let v30 = 0;
while (v30 < 7) {
    function f33(a34, a35, a36) {
    }
    v30++;
}
new Uint32Array(1681);
new Int16Array(2952);
new BigInt64Array(4005);
const v49 = new Int32Array();
const v51 = new BigInt64Array();
function f52(a53, a54) {
    const o55 = {
        ...a54,
    };
    return f52;
}
f52();
const v57 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v58 = [-1.7976931348623157e+308];
function f59(a60, a61, a62, a63) {
    const v65 = new Date();
    const v67 = new a63();
    v67.add(v65);
    let [v69,,...v70] = v67;
    const o76 = {
        toString(a72, a73, a74) {
            a62[a61] = a60;
            return a73;
        },
    };
    return o76;
}
const v77 = f59(v51, 129, v58);
const v78 = f59(v49, 129, v57);
for (let v79 = 0; v79 < 5; v79++) {
    v78 % v77;
    v57.b = v49;
}
