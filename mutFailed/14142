const v3 = [-12,15,-4294967297,2147483649,25132,-11,16];
const v4 = [1084044340,-50404,-42195,8,60903,-2108047454,-4294967295,1073741824,-1840397677];
const v5 = [-4294967295,-9007199254740991,-2,-6,1024];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "push", { enumerable: true, value: this });
    function f12() {
        return a8;
    }
    function f13(a14) {
        function f15() {
            const o18 = {
                get b() {
                    super[this] = this;
                    return f15;
                },
                ..."b",
            };
            return o18;
        }
    }
    Object.defineProperty(a11, "push", { enumerable: true, get: f12, set: f13 });
    try {
        this.b = a11;
    } catch(e19) {
        try {
            v4.map(a10);
        } catch(e21) {
        }
        for (let i24 = 0, i25 = 10;
            (() => {
                const v26 = i24 < i25;
                let v27 = 3375;
                const v28 = v27++;
                v28 / v28;
                const v31 = new BigUint64Array(v27);
                let [v32,,v33,...v34] = v31;
                return v26;
            })();
            i24++) {
        }
        new Int32Array(2866);
        new Uint32Array(7);
        new Uint8Array(508);
    }
}
const v49 = new F6(-11, v4, v4, -26282);
const v50 = new F6(v49, v3, v4, v49);
new F6(v50, v5, v3, v5);
function f52() {
    class C53 {
    }
    new C53();
    const o56 = {
        4294967296: "UHH",
    };
    return v5;
}
function f57() {
    return v4;
}
const v61 = /LD/vds;
let v62;
try { v62 = v49.push(v50, -9007199254740990, v61, v5); } catch (e) {}
("1866165091").normalize();
const v68 = new Int8Array();
v68.buffer.slice(2147483648);
new Float32Array(1024);
new BigInt64Array(1365);
new Float32Array(4096);
const v79 = /a\s/vims;
v79[12] = -26282;
const v80 = /SO/uis;
function f81(a82, a83) {
    Object.defineProperty(v4, "h", { set: f57 });
    return delete v61[65537];
}
v80.toString = f81;
function f86() {
    return f86;
}
new Int8Array([0.600959953156498,1.0,-Infinity]);
function f92() {
    return -6346;
}
[12,65535,536870912,-8,1000,-9223372036854775808,-8,2,13];
[2,30964,-9223372036854775808,8,536870887,61212,-9223372036854775807,10000,-380609068];
[-527931172,-2147483647,1073741823,1913461086,9007199254740991,128,-2008902983,-7];
const v96 = [v61,1000.0,v79];
const v97 = [v61,-88354.70514812903];
[v79,v97,v80,1000.0,v97];
for (let v99 = 0; v99 < 22; v99++) {
    const v100 = v79[v99];
    function F101(a103, a104) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f105(a106, a107, a108, a109) {
        const v111 = new Int32Array();
        v111[3];
        return a107;
    }
    %OptimizeFunctionOnNextCall(f105);
    v80[1365] = v62;
    for (let v113 = 0; v113 < 100; v113++) {
        f92();
    }
    const v115 = new Float32Array(v99, 1024, 1365);
    try { new v100(v100); } catch (e) {}
    v96[v80];
    const o121 = {
        "execution": v115,
        "type": v99,
    };
    gc(o121);
}
