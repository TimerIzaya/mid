2n | 2n;
const o12 = {
    set d(a8) {
        this.cos = a8;
        for (let v9 = 0; v9 < 25; v9++) {
        }
        try { this["cos"](); } catch (e) {}
    },
};
o12.d = -9;
try {
    new Int32Array(53099, 53099, 53099);
} catch(e18) {
}
const v19 = new Uint16Array(-65536);
function F21(a23) {
    if (!new.target) { throw 'must be called with new'; }
    a23 ^ a23;
    const v25 = o12?.constructor;
    try { new v25(3n); } catch (e) {}
}
try { new Uint8Array(Uint8Array, 129, v19); } catch (e) {}
new Uint8Array(-65536);
6 - 6;
new F21(6);
const v35 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
let v37;
try { v37 = new Array(2147483647n); } catch (e) {}
class C38 extends Array {
}
C38.b = C38;
const v39 = new C38();
function f40(a41) {
    return a41;
}
v37.constructor = f40;
const v42 = v39.concat(v35);
v42[0] = v42;
