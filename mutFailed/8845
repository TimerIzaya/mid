const v2 = new Uint8ClampedArray(12);
const v5 = new Uint16Array(7);
const o8 = {
    __proto__: v5,
    "d": 12,
};
o8 & v2;
const v10 = new Uint8ClampedArray(128);
function f11(a12, a13, a14) {
    const o40 = {
        "g": a12,
        get b() {
            const v16 = 7 ** a12;
            Object.defineProperty(v5, v16, { writable: true, configurable: true, enumerable: true, set: f11 });
            this << 12;
            function F19(a21, a22, a23) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = a21;
                } catch(e24) {
                }
                try {
                    this.d = a13;
                } catch(e25) {
                }
            }
            new F19(F19, 7, a12);
            const v27 = new F19(Uint8ClampedArray, a13, a14);
            const v28 = new F19(v27, 128, v16);
            Math.sqrt(-88);
            const v32 = Uint8ClampedArray >>> -88;
            Math.asinh(Uint8ClampedArray);
            a14 + -88;
            12 % v28;
            Object.defineProperty(v2, 1, { enumerable: true, set: f11 });
            super.g = a12;
            Math.cbrt(v32);
            return a12;
        },
        __proto__: v10,
        "a": 7,
        "d": a14,
    };
    return o40;
}
f11(7, 128, 12);
f11(128, 12, 7);
f11(12, 128, 12);
[1.4126857513330325e+308,773916.2497532279];
[651.0262572036538];
[2.2250738585072014e-308,1000000000.0,0.4835923098820656,-1e-15];
const v47 = [];
Object.defineProperty(v47, 1, { writable: true, enumerable: true, value: v47 });
v47.push();
