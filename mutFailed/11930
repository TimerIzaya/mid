function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = F0;
    try {
        const v5 = new Float64Array();
        function f6(a7, a8) {
            try { a8(a8, v5, F0, a7, a8); } catch (e) {}
            new Date(Date);
            return this;
        }
        Object.defineProperty(v5, "constructor", { value: f6 });
        const t11 = v5.constructor;
        new t11(821);
        this.h = -13;
    } catch(e14) {
    }
}
const v15 = new F0();
const v16 = new F0();
v16.g = v16;
const v17 = new F0();
v17.d = v15;
v17.d = v17;
function f18() {
    return v17;
}
for (let v20 = 0; v20 < 5; v20++) {
    const v23 = v20 >> -18321;
    const o26 = {
        "maxByteLength": 2736188941,
    };
    const v28 = new SharedArrayBuffer(4, o26);
    const v30 = new Uint16Array(v28);
    v30["join"]();
    Math.log1p(v20);
    Math.tan(v23);
}
const t37 = "resizable";
t37[1] = "resizable";
for (let i39 = 0, i40 = 10; i39 < i40; i39++) {
}
const v50 = new Uint8ClampedArray(1000);
Object.defineProperty(v50, "toString", { enumerable: true, value: f18 });
v50 ^ 3;
0.5190051812847134 - 0.5190051812847134;
function F57(a59, a60, a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    const v63 = this?.constructor;
    try { new v63(a59, a60, a60, a62); } catch (e) {}
    a59++;
    a60 == a60;
    a62.g = a62;
    try {
        this.a = "resizable";
    } catch(e67) {
    }
    try {
        this.c = f18;
    } catch(e68) {
    }
}
new F57(-1.310255022606009e+308, "bigint", "resizable", v16);
new F57(0.5190051812847134, "undefined", "undefined", v16);
new F57(0.5190051812847134, "bigint", "undefined", v15);
const v72 = [-9223372036854775808,-12];
const v73 = v72?.filter;
try { new v73("bigint"); } catch (e) {}
new Float64Array(v72);
