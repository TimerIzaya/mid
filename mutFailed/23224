class C3 {
    constructor(a5) {
        for (let v6 = 0; v6 < 32; v6++) {
            v6 - v6;
            for (let v8 = 0; v8 < 5; v8++) {
            }
            try { a5(); } catch (e) {}
        }
    }
    static a;
    static #e;
    get e() {
    }
    set h(a12) {
        const v16 = eval();
        function f17(a18, a19, a20) {
            const o21 = {
                "d": eval,
            };
            return o21;
        }
        f17(f17(8, f17(v16, eval, 4.0), eval), this, C3);
    }
    #toString(a26) {
        let v27;
        try { v27 = a26(a26, 4.0, a26, -86016480, a26, this, a26, C3); } catch (e) {}
        const v29 = Symbol.match;
        v27[v29] = this;
        try {
            super.for(v29, a26, this, v29, v27);
        } catch(e31) {
        }
        return v27;
    }
    static 224 = 4.0;
    d;
}
new C3();
const v33 = new C3();
const v34 = new C3(4.0, v33, v33);
class C35 {
    set a(a37) {
        this[4] **= 4.0;
    }
    [8] = v34;
    m(a39, a40, a41, a42) {
        function f43(a44) {
            return 4.0;
        }
        class C45 extends f43 {
            b = -86016480;
            127 = a40;
        }
        return a41;
    }
}
const v46 = new C35();
const v47 = new C35();
const v48 = new C35();
function f49(a50) {
    function F51() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v53 = [-38686,-6,10000,-53904,-65535,48017,257,536870889];
    const v54 = [-67583095,16,64];
    class C55 extends F51 {
        d = v54;
        constructor(a57, a58, a59) {
            super();
            for (let v60 = 0; v60 < 10; v60++) {
                "p" + v60;
                const v63 = v53.includes;
                try { v63(); } catch (e) {}
                const v67 = new BigInt64Array(2325);
                for (const v68 in v67) {
                }
            }
        }
    }
    class C69 extends C55 {
    }
    const v70 = new C69();
    return v70;
}
Object.defineProperty(v48, Symbol.toPrimitive, { writable: true, configurable: true, value: f49 });
const v73 = [v46,v48,v47,v33];
[v34,v73,v34,v73,C35];
const v75 = [8,v73,8,8];
function F76() {
    if (!new.target) { throw 'must be called with new'; }
    function f78(a79) {
        return f78;
    }
    function F81(a83, a84, a85) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F81(-725.0347156854516);
    for (let [i101, i102] = (() => {
            const o88 = {
            };
            function f89(a90) {
                f78(a90);
                %PrepareFunctionForOptimization(f78);
                f78(a90);
                f78(a90);
                %OptimizeFunctionOnNextCall(f78);
                f78(a90);
                return v46;
            }
            o88.constructor = f89;
            o88.constructor.getPrototypeOf(v75);
            Math.atan2(257, 257);
            return [0, 10];
        })();
        i101 < i102;
        i102--) {
    }
}
const v109 = new F76();
v109[3] = -86016480;
const v110 = [6.345269750596144e+307,1.5426121797865451e+308,-1.0,1.0763754168130034e+308,-1.0165609707268582e+308,-2.220446049250313e-16,4.1652134965708285,Infinity,8.22884515469082e+307,-1000000000.0];
const v111 = [1.0,763261.5732298722];
Object.defineProperty(v111, 3, { configurable: true, value: C3 });
function F112(a114, a115, a116) {
    if (!new.target) { throw 'must be called with new'; }
    const v117 = this.constructor;
    const o118 = {
        268435456: v48,
    };
    let v123 = -v48;
    --v123;
    Math.max(-9.567521062387726);
    try { new v117(v109); } catch (e) {}
    a114[3] = a114;
}
new F112(v110);
new F112(v111);
