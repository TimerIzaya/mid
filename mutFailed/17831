const v1 = -Infinity;
new Int16Array(3);
const v7 = new Date();
v7.setYear(2.0);
class C10 {
    constructor(a12) {
        a12[a12] = this;
        let v13;
        try { v13 = a12(-709911.1973349254, a12, v1); } catch (e) {}
        try { a12.getFloat64(this, v13, this, v1); } catch (e) {}
        a12 / -709911.1973349254;
        v13?.c;
    }
    a = -709911.1973349254;
    static 134 = 256;
    d;
}
const v17 = new C10(-709911.1973349254);
const v18 = new C10(v1);
new C10(v18);
class C20 {
    static valueOf(a22, a23) {
        const o24 = {
        };
        try {
            o24.g = this;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.g = this;
            o26.b = this;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.g = this;
            o28.b = this;
            o28.f = v17;
        } catch(e29) {
        }
        try {
            const o30 = {
            };
            o30.g = this;
            o30.b = this;
            o30.f = 256;
        } catch(e31) {
        }
        return 256;
    }
}
new C20();
new C20();
new C20();
new BigInt64Array(15);
const o42 = {
    m(a41) {
        return a41;
    },
    __proto__: 946.0676210033328,
};
const v44 = new Uint8ClampedArray(16);
const v47 = new Int16Array(8);
for (const v48 in v44) {
    delete v47?.buffer;
    new Int16Array(7);
    new Float32Array(2801);
    new Uint8ClampedArray(3070);
}
const v61 = new Array(3457);
const v62 = [0.0,1000000000.0,-9.821086765219384e+307,-858.0794579951759];
const v63 = [-2.0,-1.5384788741465538,-2.0];
const v64 = [0.9388990264144315,-1e-15,-1.0,841561.2554243801];
class C65 {
    constructor(a67, a68) {
        super[a67]?.[1];
    }
    /*
    constructor(a72, a73, a74, a75) {
        const v76 = this?.constructor;
        try { new v76(v63, a74, a74); } catch (e) {}
        a73 >>> a73;
        0.061410412759498656 >>> 0.061410412759498656;
    }
    */
    static a;
    n(a82, a83) {
        try { a83["push"](...v62, ...a83, ...v62, ...v63, ...this); } catch (e) {}
        return "push";
    }
    static b;
    static m(a87) {
        try { new a87(this, this, v62, this); } catch (e) {}
        v62 < v64;
        const o90 = {
        };
        new Proxy(this, o90);
        return v64;
    }
    static #a = 3457;
    static [v61];
    #h;
    static [v64] = BigInt64Array;
    static #g;
}
new C65();
let v94 = new C65();
const v95 = v94?.constructor;
try { new v95(); } catch (e) {}
new C65();
v64.length = 257;
function f99(a100, a101) {
    for (let v102 = 0; v102 < 50; v102++) {
        const v104 = ("imul").slice;
        try { v104(a100); } catch (e) {}
        ("imul").codePointAt(a101);
        const v107 = ("imul").padEnd();
        const v108 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
        const v109 = [1073741824,1073741823,1376142744,1073741825];
        try { v109["find"](..."find", v107, ...v108); } catch (e) {}
    }
    return a100;
}
const v114 = Array["of"](C65, C65);
try {
    Symbol.toPrimitive.description;
    new Int32Array(Int32Array);
    v61.pop();
} catch(e121) {
}
Float64Array.e = Float64Array;
new Float64Array(257);
const v125 = new Uint32Array(6);
function F128() {
    if (!new.target) { throw 'must be called with new'; }
}
const v130 = new F128();
const v131 = [F128,F128,F128];
function f132(a133) {
    try {
        v131.some();
    } catch(e135) {
        e135.stack;
    }
    return a133;
}
v131.toString = f132;
const o138 = {
    __proto__: v131,
    "e": v130,
    get a() {
        return this;
    },
};
const v139 = new Float32Array(706);
try { v139.every(Uint32Array); } catch (e) {}
class C141 {
}
const v143 = Symbol.toPrimitive;
C141[v143] = f132;
function F144() {
    if (!new.target) { throw 'must be called with new'; }
}
F144.a = F144;
const v146 = new F144();
v146.constructor = f132;
const o147 = {
};
try {
    const v150 = new Int32Array(12);
    for (const v151 in v150) {
    }
} catch(e152) {
}
const v153 = v146?.constructor;
v94 |= o138;
Symbol(v114);
try { v125.slice(16, 257); } catch (e) {}
try { v143.o(16, v130); } catch (e) {}
delete v44[56];
try { new v153(); } catch (e) {}
const v159 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v161 = 9007199254740991n * 9007199254740991n;
v161--;
for (let v163 = 0; v163 < 5; v163++) {
    function f164() {
        for (let v165 = 0; v165 < 5; v165++) {
            "p" == "p";
            try { ("p").substring(C141, C141); } catch (e) {}
        }
        try {
            const v171 = new Float32Array(14);
            new Uint8ClampedArray(v171);
            function f174(a175, a176) {
                f132(o42);
                return v94;
            }
            f174(6, 9007199254740991n);
            v159.forEach();
            const v181 = /efoo(?=bar)baz/usy;
            function f182() {
                return f182;
            }
            for (let i185 = 0, i186 = 10; i185 < i186; i185++) {
            }
            /\1112/d;
            /(ab)6a(?:b)/gvd;
            try { arguments["every"]("every", v181); } catch (e) {}
        } catch(e197) {
            e197.a = 706;
            e197.a = v146;
            [-14,13665,14];
            [-256,-59478,4294967296,1073741825,1000];
            const v200 = [-1];
            try {
                const v201 = /2a\sc/uds;
                function f202() {
                    try { v201.test(v201); } catch (e) {}
                    const t221 = Array();
                    t221.length |= 113;
                }
                v201[Symbol.toPrimitive] = f202;
                v200.valueOf = Symbol;
            } catch(e209) {
            }
            e197.a = e197;
        }
        const v211 = ("stack").trimStart();
        for (let v212 = 0; v212 < 5; v212++) {
            function f213() {
                v211.length;
                return v211;
            }
            f213.call();
            %OptimizeFunctionOnNextCall(f213);
        }
        const v217 = ("1073741824").constructor;
        v217.name = v217;
        function F218() {
            if (!new.target) { throw 'must be called with new'; }
            function f220(a221) {
                Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
            }
        }
        const v224 = v217(v161);
        try { v224.replaceAll(6, v94); } catch (e) {}
        return "1073741824";
    }
    f164();
    %OptimizeFunctionOnNextCall(f164);
}
