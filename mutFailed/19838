const v0 = /43/gvdimy;
const v1 = /p+/msy;
const v2 = /[x]/gds;
const v5 = new Date();
try { v5.setHours(25150n); } catch (e) {}
function f8() {
    return v0;
}
function f9(a10) {
    function f11() {
        -4294967295 - -4294967295;
        -4294967295 >>> -4294967295;
        const o20 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a18, a19) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
        o20[0];
        return o20;
    }
    f11();
    %OptimizeFunctionOnNextCall(f11);
}
Object.defineProperty(Int32Array, 0, { writable: true, get: f8, set: f9 });
let v23 = new Int32Array(Int32Array);
const v25 = new Uint8Array(v23, v23, Int32Array);
function f26(a27, a28, a29, a30) {
    v23++;
    const o35 = {
        "b": a27,
        ...v25,
        n(a33, a34) {
            return v23;
        },
    };
    return a29;
}
for (let v36 = 0; v36 < 625; v36++) {
    f26();
}
let v38 = 9007199254740990;
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v38;
    } catch(e47) {
        const v49 = new Float64Array();
        function f50() {
            for (let v51 = 0; v51 < 10; v51++) {
                const v53 = Math.expm1(v49);
                v53 >> v53;
            }
        }
        %OptimizeFunctionOnNextCall(f50);
    }
    function F55() {
        if (!new.target) { throw 'must be called with new'; }
        for (const v60 of Array(19793)) {
        }
        const v64 = new Int32Array(56885);
        Date(...v64, 127);
    }
}
new F41(268435440, v1, v0, 1);
65535 === 65535;
function F69(a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
}
new Map();
new F41(1, v2, v2, v38);
new F41(268435440, v2, v0, v38);
/(F9Tl)/ui;
/\bR(?:ab)+jnabc/gvis;
/[2(?:a+)+]/gudimsy;
Math.round(Math);
new Float64Array();
v38++;
try {
    Reflect.ownKeys();
    async function* f88(a89, a90) {
        return a89;
    }
    f88.constructor().constructor;
} catch(e93) {
    Array(3);
    function f97() {
        return f97;
    }
}
