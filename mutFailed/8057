try {
const t0 = 3;
t0(3, -1429918738, -4096);
} catch (e) {}
const o19 = {
    valueOf(a8, a9, a10) {
        function f11(a12) {
            for (let v15 = 0; v15 < 100; v15++) {
            }
            return this;
        }
        Worker(f11);
        return Worker;
    },
};
const v21 = new Date();
function f23(a24, a25) {
    return v21.c;
}
f23(1253330319n, -4096);
const v28 = v21.constructor;
try { new v28(Date, v21, v21); } catch (e) {}
const v31 = new Int32Array();
let {...v32} = v31;
9007199254740992 / 9007199254740992;
const v34 = [1.479450712344466];
v34.join();
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    a42 - a42;
    function f44() {
        return a39;
    }
    function f45(a46, a47) {
        return a46;
    }
    try { f45(); } catch (e) {}
    const v49 = f45(v37, -65535n);
    try { v49.toString(); } catch (e) {}
    try { v37["find"](..."find", a42, ...v36, ...v37); } catch (e) {}
    return -65535n;
}
for (let v53 = 0; v53 < 10; v53++) {
    f38(v53, f38, -1429918738);
}
for (let v55 = 0; v55 < 25; v55++) {
    v55 >>> v55;
    v55.__proto__;
}
new WeakMap();
const v62 = [994142.1762047468,-869.5676118479468,0.24857305669119167,9.652642074005541,696.2091389392365,1.7976931348623157e+308,-1000.0,-2.220446049250313e-16];
[-5.0,-1000.0];
[8.883789498056881e+307,-Infinity];
class C66 {
    #valueOf(a68, a69) {
        const v71 = WeakMap();
        "m" > v71 ? "m" : v71;
        return this;
    }
    static set f(a75) {
        const o78 = {
            "maxByteLength": 129,
        };
        SharedArrayBuffer();
        const t64 = "m";
        t64();
    }
}
let v83 = 4.0;
v83++;
const v86 = [401.0938760809797,0.12298670439247805];
const v87 = [v83,401.0938760809797];
try { v87.fill(v34); } catch (e) {}
for (let [v90,v91] of [v62,WeakMap,v87,-1429918738,v86]) {
}
class C93 {
    static #o() {
        const v95 = [-2147483648,-46456,1200954989,-4294967296,1];
        const v96 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
        const v97 = [23955,1426598775,2147483649];
        try {
            v96.#o(v96, v97, null, v96, v95);
        } catch(e99) {
        }
        return null;
    }
    #p() {
        const v101 = this[223];
        const v102 = super.g;
        let v103;
        try { v103 = v101.p(this, v102, v102, v102); } catch (e) {}
        this[null] = v103;
        new Map();
        return v102;
    }
}
new C93();
const v108 = new Int16Array(f23, Int16Array, Int16Array);
try { new Int32Array(v62, v34, 401.0938760809797); } catch (e) {}
const v111 = new Int32Array();
const v112 = v111 / v108;
Number.isNaN(v112);
v108[v112];
