let v0 = /b[\11](a){12,/my;
const v1 = /a{1,2}?/vs;
const v2 = /foo(?=bar)baz?/vdis;
function f3(a4, a5) {
    gc(v0);
    return v2;
}
v2[Symbol.toPrimitive] = f3;
try {
    v2.exec("match");
} catch(e12) {
}
const v13 = [v2,v1,v2,v0,v1];
const v14 = v0[5];
function F17() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v19 = 0; v19 < 500; v19++) {
        const v24 = ("p" + v19).fontcolor(v19).trimLeft()[12];
        ("p")[v24.substring(v24, v24)];
    }
}
new F17();
new F17();
const v29 = v2 | v0;
const v30 = v0 + v14;
const v31 = v14 ** v0;
v0 / v0;
v0--;
v29 ** v31;
const v35 = Math.asin(v30);
[v13];
[v2,v13,v1,v0,v0];
function f38() {
    return v0;
}
let v39 = 1215;
try {
} catch(e41) {
    const o44 = {
        "maxByteLength": 3109,
    };
    const v46 = new ArrayBuffer(9, o44);
    new Int32Array(v46);
}
new Uint8ClampedArray(v39);
new Uint8Array(89);
new BigUint64Array(813);
function f58(a59, a60) {
    v39 >>>= a60;
    -256n >> -256n;
    return v35;
}
Uint8Array.valueOf = f58;
const v64 = [Uint8Array,Uint8Array];
v64.toString = f3;
new Int32Array([Uint8Array,v64]);
