function f0() {
    const o9 = {
        __proto__: 35147,
        "a": 48916,
        3: 48916,
        [f0]: 48916,
        0: 35147,
        "h": 48916,
        "g": 35147,
        "g": 48916,
        "h": -4.0,
        [-4.0]: -4.0,
        get f() {
            this[this] = this;
            const v5 = this.h;
            [this,[v5,48916,v5,v5,-4.0]];
            [48916,35147,this,v5,-4.0];
            return -4.0;
        },
        ...35147,
        [35147]: -4.0,
    };
    return o9;
}
let v10 = f0();
const v11 = f0();
const v12 = f0();
class C13 {
    toString(a15) {
        const v16 = new f0();
        v16[3099179150] = a15 in v16;
        Object.defineProperty(v12, 2726779034, { writable: true, configurable: true, set: f0 });
        super.f += a15;
        new f0();
        Object.defineProperty(v11, "d", { enumerable: true, get: f0, set: f0 });
        return v10;
    }
    #m(a20) {
        a20 = this;
        v10 = this;
        const o24 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o24);
        const v28 = v12[Symbol.asyncIterator];
        a20.__proto__;
        f0 ** 36658;
        Math.log(36658);
        36658 + a20;
        !v11;
        36658 + v11;
        return v28;
    }
}
const v37 = new C13();
const v38 = new C13();
const v39 = new C13();
class C40 {
    static set a(a42) {
        new Int8Array(10);
        new Uint8Array(4);
        new Float64Array(6);
    }
    f = v38;
    c;
    [v12] = v39;
    [v37];
}
const v52 = new C40();
new C40();
let v54 = new C40();
class C55 extends C13 {
    static toString(a57, a58, a59, a60) {
        super[v11];
        return a59;
    }
    static 94;
    [v52] = v10;
    static d = v38;
    [v54];
    g = C13;
    static {
        %VerifyType(C13);
        Object.defineProperty([f0], 536870887, { set: f0 });
        ++v54;
    }
}
new C55();
new C55();
new C55();
const v70 = new Int8Array(2);
v70[Int8Array] = v70;
new Float64Array(571);
const v76 = new Uint8Array(10);
new Float64Array(2713);
const v82 = new Int32Array(16);
const v85 = new Uint8Array(9);
function F86(a88, a89, a90) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v85;
    } catch(e91) {
    }
    try {
        this.e = v82;
        const v100 = new Uint8ClampedArray(16);
        v100[10] = v100;
        const v102 = -1322;
        v100["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v76);
        } catch(e104) {
        }
        const v106 = new Uint8ClampedArray(1322);
        let v107 = v106[315];
        function F108(a110, a111, a112, a113) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = "536870889";
            } catch(e114) {
            }
            try {
                this.b = a113;
            } catch(e115) {
            }
        }
        new F108(1073741824n, 1073741824n, 257n, "6");
        const v117 = new F108(1073741824n, 257n, 257n, v102);
        const v118 = new F108(v107, 257n, 257n, "536870889");
        new BigUint64Array(6);
        const v123 = 3768 >>> 3768;
        const v126 = new BigInt64Array(4046);
        v126[123];
        -115;
        function f131(a132, a133) {
            const v134 = a132++;
            a133 + a133;
            const v136 = a132++;
            v136 >> v136;
            try {
                v117.toString = a133;
            } catch(e138) {
            }
            Object.defineProperty(v118, v118, { configurable: true, enumerable: true, get: f131 });
            let o140 = {
                "d": a132,
                ...a132,
                get e() {
                    return a133;
                },
            };
            [,...o140] = v126;
            a133[4046];
            const o144 = {
                "maxByteLength": 3035,
            };
            const v146 = v107--;
            v106[v146] ||= v146;
            try { o144.n(Int8Array, Worker); } catch (e) {}
            function f149(a150, a151) {
                v39[3879079808];
                Object.defineProperty(v52, 5, { writable: true, configurable: true, enumerable: true, value: ArrayBuffer });
                return v123;
            }
            f149(v102, v134);
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f131(4046, 3768);
        try { Uint8ClampedArray.bind(f131); } catch (e) {}
    } catch(e160) {
    }
}
new F86(9, 16, 16);
new F86(16, 2, 2);
