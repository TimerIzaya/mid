new Int8Array(10);
new Uint32Array(1024);
new Int32Array(7);
function f10() {
    return f10;
}
new Uint16Array();
function f18() {
}
function f19() {
    const o70 = {
        "b": 1024,
        [f18]: f18,
        get b() {
        },
        "execution": "d",
        m(a22) {
            const v25 = new Int8Array(3938);
            let v26 = 3;
            let v27 = 0;
            [...v26] = v25;
            -(v27++);
        },
        valueOf() {
            let v32 = -(-1e-15);
            const v33 = this?.constructor;
            try { new v33(this); } catch (e) {}
            new Float64Array(1073741824);
            v32--;
            const t28 = /a\Sc?/giy;
            t28.valueOf = f18;
            try {
                f18();
            } catch(e41) {
                Symbol("bZ");
                const v45 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                class C46 {
                    constructor(a48, a49, a50, a51) {
                        const v52 = this?.constructor;
                        try { new v52(v45, a50, a50); } catch (e) {}
                        a49 >>> a49;
                        0.061410412759498656 >>> 0.061410412759498656;
                    }
                }
                const v57 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
                [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
                class C59 {
                    constructor(a61, a62) {
                        super[10] = v57;
                    }
                }
                return C59;
            }
            try {
                eval("h");
                ("-1723624938").slice(1073741824, "g").normalize();
                this.valueOf = f18;
            } catch(e69) {
            }
            return f18;
        },
    };
    return o70;
}
const t64 = "h";
t64();
const v72 = f19();
const v73 = v72?.b;
try { new v73(); } catch (e) {}
new Uint8Array(268435440);
function F78() {
    if (!new.target) { throw 'must be called with new'; }
}
class C80 extends F78 {
}
Date[-22872n] = Date;
const v84 = ("function").length;
const v85 = f19();
function F86(a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    const v90 = a89?.constructor;
    try { new v90(a88, a88); } catch (e) {}
    const t82 = 0.48673874575852394;
    new t82(v84);
    const v94 = [];
    const o95 = {
        ...v94,
    };
    try {
        this.b = a89;
    } catch(e96) {
    }
    try {
        this.c = a88;
    } catch(e97) {
    }
}
const v98 = new F86(v85, v85);
new F86(v72, v98);
function F102(a104, a105, a106) {
    if (!new.target) { throw 'must be called with new'; }
}
new F102(3011, Uint8ClampedArray, F102);
new F86(v85, v98);
-6n * -6n;
function f114(a115, a116) {
    Math.atan2(Math, f114);
    return f114;
}
new Promise(f114);
1713234876 === 1713234876;
function f123(a124, a125) {
}
f123();
f123(-1748, 1713234876);
function F128(a130, a131) {
    if (!new.target) { throw 'must be called with new'; }
    const v132 = this.constructor;
    v132.f = v132;
    function f136() {
        return f136;
    }
}
