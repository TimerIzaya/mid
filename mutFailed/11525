/nfoo|(bar|baz)|quux[a.a\qVk[\cZ]]/di;
const v10 = new WeakMap();
const v15 = new Set();
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a21;
    } catch(e22) {
    }
    try {
        this.a = "number";
    } catch(e23) {
    }
}
function f24(a25) {
    const v26 = v10 >= a25;
    v26 ? v10 : a25;
    return v26;
}
const v29 = Symbol.toPrimitive;
F16[v29] = f24;
const v30 = new F16(-2070267217, -2070267217, -9223372036854775808, v10);
const v31 = new F16(v30, v30, -9223372036854775808, 2147483649);
new F16(v31, "number", 2147483649, v15);
class C33 extends F16 {
    static {
        function f35() {
            try {
                const v36 = /w\p{General_Category=Decimal_Number}Lm/gum;
                v29.fuck(v36, v36, 1159);
            } catch(e38) {
            }
            return F16;
        }
        this[Symbol.toPrimitive] = f35;
        this[this] = "number";
        super[v31] = v15;
        new Int16Array(157);
        new Int32Array(1);
        new Float32Array(3490);
    }
    #f = "number";
    static [WeakMap] = Set;
}
new C33();
new C33();
new C33();
const v53 = [];
function F54() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v56 = `
            for (let v57 = 0; v57 < 5; v57++) {
                class C58 {
                }
                const v59 = new C58();
                function f60(a61, a62) {
                    const o67 = {
                        [v59](a64, a65, a66) {
                        },
                    };
                }
            }
        `;
        const o76 = {
            set e(a75) {
            },
        };
        function f77(a78) {
            a78 === a78;
            a78 <= a78;
            const o84 = {
                ...a78,
                p(a82, a83) {
                },
            };
        }
    } catch(e85) {
    }
    try {
    } catch(e86) {
    }
    try {
    } catch(e87) {
    }
}
const v88 = new F54();
const v89 = new F54();
const v90 = new F54();
const v93 = [[v53,v90],F54,[v88,v53,v89],v53];
function f94(a95) {
    function f96(a97, a98, a99, a100) {
        return a100;
    }
    return 2147483649;
}
v93.constructor = f94;
try { v93.flat(); } catch (e) {}
const v104 = new Int8Array(10);
try { v104.find(v90); } catch (e) {}
new Uint8ClampedArray(268435440);
function f111(a112, a113, a114, a115) {
    Object.defineProperty(a112, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f111 });
    const o122 = {
        toString(a119, a120) {
            new Date(a112);
        },
    };
}
