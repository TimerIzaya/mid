const v5 = ~268435439;
-v5;
const v8 = [-6,-6,-6];
v8.length = v8;
const v9 = [536870887,v8];
const v10 = v9[0];
-v10;
const v12 = [3,268435439];
536870912 !== 536870912;
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    a18 + a18;
    try {
        this.f = a19;
    } catch(e21) {
    }
    try {
        this.e = v10;
    } catch(e22) {
    }
    try {
        this.b = a19;
    } catch(e23) {
    }
}
const v24 = new F15(3, 3, v9);
const v25 = new F15(v5, v9, v12);
const v26 = new F15(3, -6, v9);
function f29() {
    v26[8] = F15;
    Object.defineProperty(v26, v25, { writable: true, configurable: true, enumerable: true, get: f29 });
    let v30;
    try { v30 = v9.toLocaleString(v10); } catch (e) {}
    const v31 = v30 <= v30;
    const v32 = [v31,f29,v31,v30];
    [v30,v25,v24,v30];
    [v32];
    return v12;
}
f29.prototype = f29;
[3,-6,3,268435439];
const v36 = [536870887,v8,f29,f29];
const v37 = [v36,65536,3,-6,536870887];
try { v37.copyWithin(v37, v37); } catch (e) {}
function f40() {
    Date();
}
try { f40.bind(v36); } catch (e) {}
try { f40.constructor(-14); } catch (e) {}
Worker.a = Worker;
const t50 = "function";
t50[1] = "function";
const o46 = {
    "type": "function",
    "f": -14,
    "d": 65536,
    "b": v5,
    [v25]: 536870887,
    4: v5,
};
const v47 = new Worker(f40, o46);
try { v47.postMessage(); } catch (e) {}
try { v47.terminateAndWait(); } catch (e) {}
