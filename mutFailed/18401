function f3(a4, a5, a6, a7) {
    a5++;
    a6 >> a6;
    try { a7(a6, a7, 9007199254740990, a6); } catch (e) {}
    for (let [i14, i15] = (() => {
            10 >> 10;
            return [0, 10];
        })();
        i14 < i15;
        (() => {
            const v19 = i15 * i15;
            v19 >>> v19;
            let v21 = i15--;
            v21--;
        })()) {
    }
}
try { new f3(1562447898, f3, -1302058936, 9007199254740990); } catch (e) {}
for (let v26 = 0; v26 < 5; v26++) {
    f3(f3, v26, v26, f3);
}
const v28 = [-45565,1073741825,2281,-3];
v28[1] = v28;
const v29 = [701287753,4,21833,-268435456];
const v30 = [-35723,-13240,7,-57131,35430,8,4,-1424739546];
const v33 = new Float32Array(3702);
const v34 = v33?.toString;
try { new v34(); } catch (e) {}
const v38 = new Uint8ClampedArray(64);
v38.g = v38;
try { new Uint8ClampedArray(64, v29, Uint8ClampedArray); } catch (e) {}
new Uint8ClampedArray(5);
new Uint16Array();
class C45 {
    constructor(a47) {
        const v48 = this?.__defineSetter__;
        try { new v48(Uint16Array, Uint16Array); } catch (e) {}
        function F50(a52, a53, a54, a55) {
            if (!new.target) { throw 'must be called with new'; }
            const v56 = this.constructor;
            try { new v56(); } catch (e) {}
            typeof Float32Array;
        }
        try { new F50(v30, v30, Float32Array, v30); } catch (e) {}
        const v63 = new Uint8ClampedArray();
        Float32Array.length = Float32Array;
        const v65 = new Float32Array();
        for (let v66 = 0; v66 < 25; v66++) {
            Float32Array[6] = v63;
            v65[v66];
        }
        const v68 = this >> -1073741824;
        v68 - v68;
        for (let v70 = 0; v70 < 32; v70++) {
            for (let v72 = 0; v72 < 5; v72++) {
                Symbol.species;
                class C75 {
                    static a;
                    static {
                        const v77 = this >> this;
                        v77 !== v77;
                        this[6];
                    }
                    static m(a81) {
                        gc();
                    }
                }
                new C75();
            }
        }
    }
}
const v85 = new C45();
v85.length;
new C45();
const v88 = new C45();
const v89 = v88.constructor;
const v90 = v89?.constructor;
try { new v90(v89); } catch (e) {}
new v89();
