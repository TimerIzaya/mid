function f0() {
    4.0 != 4.0;
    const o27 = {
        __proto__: "function",
        ["function"](a6, a7) {
        },
        "g": -44097,
        "type": "function",
        get e() {
            super(this);
            const v10 = /\xf0\x9f\x92\xa9+/gumy;
            const v11 = /^tD/gv;
            const v12 = [268435441,-12,14985,-14,4294967295,-1073741824];
            const v13 = [-9007199254740990,1582176086,5,759350219,14,257,536870888,-4294967297,65535,-9007199254740990];
            const v14 = [-57057595,-708341426,-27428,-9007199254740991];
            [[v14,-37935,[-37935,v13,-37935,v12,v10]],v11];
            new BigInt64Array(-44097);
            new Float64Array(2);
            new Int16Array(4096);
            return -44097;
        },
    };
    return o27;
}
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this.constructor;
    try { new v32(); } catch (e) {}
    try { this.constructor(); } catch (e) {}
}
f0();
const v36 = f0();
const v37 = f0();
v37.b = v37;
let v38 = -4096n;
class C41 {
    get e() {
        const o43 = {
        };
        function f44() {
            function F45(a47) {
                if (!new.target) { throw 'must be called with new'; }
                const v48 = this.constructor;
                v48.prototype;
                try { new v48(); } catch (e) {}
            }
            const v51 = new F45(f44);
            new F45(v51);
            return f44;
        }
        %OptimizeFunctionOnNextCall(f44);
        let v56 = v38--;
        const v57 = ~v38;
        const v58 = --v56;
        C41 & this;
        const v62 = new Int8Array(2131538651);
        const t56 = v62[14n];
        t56.__proto__ = v62;
        Math.exp(v56);
        Math.ceil(v58);
        Math.asin(v57);
        return v36;
    }
}
C41.prototype;
new C41();
new C41();
new C41();
class C73 extends /nupa\Sc/vms.constructor {
}
const v74 = new C73();
v74.lastIndex;
let v76 = 9223372036854775807;
v76 = 65536;
function F78() {
    if (!new.target) { throw 'must be called with new'; }
}
