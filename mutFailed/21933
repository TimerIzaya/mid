const v3 = [268435439,65535,65535];
[65535,268435439,65535,65535,v3];
[5498];
const v8 = new BigUint64Array(8);
const v11 = new Float64Array(4096);
const v12 = v11;
v12[v12] = 268435439;
new Float64Array(v11);
v8 * v11;
v11[Float64Array] &&= 8;
const v18 = new Uint8ClampedArray(10);
new Int8Array(256);
new Float32Array(10);
String(65535);
const v31 = new Uint8ClampedArray(2826);
function f32(a33, a34, a35, a36) {
    const v39 = new BigInt64Array(4046);
    let o40 = {
    };
    Math.acosh();
    [,...o40] = v39;
    return f32;
}
try { v3.every(f32, v18); } catch (e) {}
const o44 = {
    "apply": String,
    "construct": f32,
    "defineProperty": String,
    "deleteProperty": String,
    "getOwnPropertyDescriptor": f32,
    "getPrototypeOf": String,
    "has": String,
    "isExtensible": f32,
    "ownKeys": String,
    "preventExtensions": String,
    "setPrototypeOf": f32,
};
new Proxy(v8, o44);
for (let v47 = 0; v47 < 5; v47++) {
    const v48 = f32(f32, v47, f32, v47);
    v31[10] = 5498;
    f32 = v48;
    const v49 = String(v11);
    const v51 = [];
    Reflect.apply(v12.toLocaleString, v49, v51);
}
