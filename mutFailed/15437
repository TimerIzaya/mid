const v0 = [4,1073741824,1302972982,-53316];
[5,-5,9,1000,1073741825,-2147483649,25215,15];
[9007199254740990,65536,33165,65537,65537];
function f3() {
    return v0;
}
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    function f6(a7) {
        for (let v8 = 0; v8 < 5; v8++) {
            function f9() {
                return Math.round(f9);
            }
            f9();
            %OptimizeFunctionOnNextCall(f9);
        }
    }
    this[Symbol.toPrimitive] = f6;
}
const v15 = /e9\1\2(a(?:\1(b\1\2))\2)\1/ui;
/a\sS*/udmy;
[v0,f3,[[/a\fb\nc\rd\te\vfF9I\p{Script_Extensions=Greek}(?<=)*/gudisy],v15,f3]];
[-5.0];
[-4.0,-8.813206165702249e+307,7.007743377339235e+307,-1.4162571767595947e+308,1000000000000.0,971.8716573242966,2.2250738585072014e-308,0.2922735379154292,0.9244355969677088];
[1000000.0,1.7976931348623157e+308,-932.8886186123508];
/m+/gudimsy;
const v28 = [];
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this.constructor;
    try { new v31(); } catch (e) {}
    let v33;
    try { v33 = this.valueOf(); } catch (e) {}
    v33.length = v33;
    new Float64Array(2147483647);
    const v38 = new Float64Array();
    function F39(a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a41;
        } catch(e43) {
            for (let [v44,v45] of a41) {
            }
        }
        try {
            const v46 = v38[this];
            const v47 = [];
            new Float32Array(7);
            v47[1];
            new F39(v46, -268435456n);
        } catch(e54) {
        }
    }
    new F39();
    try {
        this.d = v28;
    } catch(e56) {
        const v58 = new Set();
        class C59 {
            [v58];
        }
        function f60(a61) {
            return a61;
        }
    }
}
new F29();
new F29();
