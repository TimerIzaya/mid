const v1 = [536870888,-1828865522,8,-4096,-36848];
try {
} catch(e2) {
}
const v4 = [749138.7740098275,-413.55890355139604,-2.0,5.0,4.0,1.7976931348623157e+308,1.0,5.956393081352694];
const v6 = new Uint8Array(v4);
v6[3];
const v8 = [-11,-10426,129];
let v9;
try { v9 = v8.sort(v4); } catch (e) {}
const v10 = [9007199254740990,8,3,14,13,1924790949,-16,4294967297,9223372036854775807,65537];
class C11 {
}
new C11();
const v13 = [];
function f14() {
    const t16 = [];
    t16[6] = 4294967295;
    const o19 = {
        set b(a18) {
        },
        "arguments": v13,
    };
    return o19;
}
/\xed\xa0\x80/g;
3154 | 3154;
const v23 = 3154 >>> 3154;
let v26;
try { v26 = v9.bind(v23); } catch (e) {}
try { v26(v4, BigInt64Array, f14); } catch (e) {}
new BigInt64Array(257);
const v29 = /NsC/udm;
v26.unicodeSets;
const v31 = /\1\2(a(?:\1(b\1\2))\2)\1/gudims;
-65536 >> -65536;
const v36 = new Date();
[v36];
const v39 = async (a40, a41, a42) => {
    return Uint32Array;
};
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try { a46.toString(); } catch (e) {}
    a47 / a47;
    a48.unicodeSets;
    try { a49.reduce(v26); } catch (e) {}
    try {
        this.d = a46;
    } catch(e54) {
    }
    try {
        this.e = a49;
    } catch(e55) {
    }
}
const v56 = F44?.constructor;
let v57;
try { v57 = new v56(v6); } catch (e) {}
new F44(v29, 1514124875, v57, v10);
new F44(v29, 256, v31, v1);
2.4055206643129257 ** -1.5876750346470025e+308;
const v65 = new Int16Array(5);
try { v65.some(undefined); } catch (e) {}
new Float32Array(v65);
new F44(v31, -65536, v29, v10);
for (let v70 = 0; v70 < 10; v70++) {
    const v73 = /(?:a*)+q(?<a>.)/guds;
    for (let [i79, i80] = (() => {
            eval.name = eval;
            eval();
            10 >>> 10;
            return [0, 10];
        })();
        i79 < i80;
        (() => {
            const v84 = v70--;
            v84 + v84;
        })()) {
        i79 % i79;
        i80 >> i80;
        for (let v90 = 0; v90 < 25; v90++) {
            v90 / v90;
            const v92 = v73.constructor;
            v92.prototype;
            v92.$4;
        }
    }
    function f96(a97, a98) {
        const o100 = {
            [8.946504243780264e+307]: a98,
            get g() {
                return a98;
            },
        };
        return a97;
    }
}
