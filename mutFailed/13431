function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 255;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
let v8;
try { v8 = v6.m(v5, 516478575); } catch (e) {}
let v9;
try { v9 = v8(v4, v4, v8, v8, v5); } catch (e) {}
v5[v4] **= v9;
const v11 = Symbol.iterator;
const o20 = {
    [v11]() {
        let v13 = 10;
        const o19 = {
            next() {
                v13--;
                const v17 = v13 == 0;
                const o18 = {
                    "done": v17,
                    "value": v13,
                };
                return o18;
            },
        };
        return o19;
    },
};
const t33 = -1569921331;
new t33(64);
new Uint32Array(4);
new BigUint64Array(128);
function f41() {
}
let v42 = [9007199254740990,-16,376821973,268435456];
const v43 = v42[1];
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = v9;
    let v46;
    try { v46 = this.constructor(); } catch (e) {}
    this.b = 4294967296;
    try {
        function F48() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F48();
        const v51 = new F48();
        const v52 = v51.__defineSetter__;
        try { v52(); } catch (e) {}
        function f54(a55, a56) {
            const o57 = {
                "e": a56,
            };
            return o57;
        }
        const v58 = f54();
        f54();
        function f60() {
            return f54;
        }
        f60.b = v43;
        f60.b = f60;
        const v63 = new Float32Array();
        for (const v64 of v63) {
            v64 >>> v46;
            Object.defineProperty(v58, Float32Array, { configurable: true, enumerable: true, get: f54, set: f60 });
        }
        this.g = 4294967296;
    } catch(e66) {
    }
    this.f = 4294967296;
}
new F44();
new F44();
v42 ||= v42;
v6[814];
try {
    f41();
} catch(e71) {
}
new F44();
