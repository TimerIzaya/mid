const v0 = /(H)/gudi;
const v1 = /6JL/uimy;
const v2 = /s/gvdis;
class C3 {
    d;
    static [v2] = v1;
    [v0];
    constructor(a5) {
        for (const v6 in C3) {
        }
        const o13 = {
            "execution": "async",
            "type": "minor",
        };
        C3(o13);
    }
    static #a;
    static #g;
    static b;
    static f;
}
const v15 = new C3(v2);
new C3(v1, v1);
new C3(v15);
[7.149782090512204,-596702.5692000536,1.0,548.9788658349003];
[0.3074873816774286,1.1205229067336691e+308];
[1000000000000.0,-2.220446049250313e-16,5.0,1.282695127505481e+308,-0.0,-0.0,2.4616645000497357,-5.0];
class C29 {
    n(a31, a32) {
        ++a32;
        Math.imul(-1.7976931348623157e+308, 1985982983);
        const v38 = +2;
        let v39 = Math.sign(v38);
        v39++;
        Math.expm1(-1.7976931348623157e+308);
        return ~v38;
    }
    9 = C29;
}
const v49 = new C29();
const v50 = new C29();
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    this?.constructor;
    try { new a54(v50, 2, 2, a53); } catch (e) {}
    a53[9];
    a56--;
    try {
        this.c = -578828680;
    } catch(e61) {
    }
}
const v62 = new F51(v49);
new F51(v62);
