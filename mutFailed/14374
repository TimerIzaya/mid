class C3 {
    m(a5, a6) {
        const v7 = a6 in this;
        try {
            super.toString(this, "-1228941716");
        } catch(e9) {
        }
        return v7;
    }
    1 = "-1228941716";
    static #h = "-1228941716";
    c = 0.9125261630296417;
    #e = "buffer";
}
try { C3.toString(); } catch (e) {}
const v11 = new C3();
v11[1] = v11;
const v12 = new C3();
const v13 = new C3();
class C17 extends C3 {
    static {
        try { ("valueOf").localeCompare(255); } catch (e) {}
        try { C3["valueOf"]("valueOf", "valueOf", 9, 0.06521876449811514); } catch (e) {}
    }
    static [0.06521876449811514] = v13;
    static [v13] = C3;
    static g;
    b = C3;
    a;
}
new C17();
new C17();
new C17();
const v31 = [-54813,8,-54813,8];
const v32 = [-54813];
const v33 = [-54813];
try { v33.entries(); } catch (e) {}
function f35(a36, a37, a38, a39) {
    const v40 = a37?.constructor;
    try { new v40(v12); } catch (e) {}
    a39 / a39;
    const o51 = {
        n(a44, a45, a46, a47) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a39;
        },
        ...v33,
        "b": v31,
        ...a38,
        ...v33,
        129: 4,
        ...a36,
    };
    return o51;
}
f35.g = f35;
f35(v32, 8, f35(v32, v33, v31, 4), 4);
f35(v33, 4, 4, 4);
try { Map.bind(v12); } catch (e) {}
/ND2/gds;
class C61 extends Map {
}
C61.name;
const v63 = new C61();
v63.isPrototypeOf();
class C67 {
    static {
        try { this.apply(v32, v31); } catch (e) {}
        for (let v70 = 0; v70 < 25; v70++) {
            const v71 = [601759695];
            const v72 = [1073741824,1073741823,1376142744,1073741825];
            try { v72.with(v72, "-1228941716"); } catch (e) {}
            522675525n ^ 522675525n;
            function f76(a77, a78, a79, a80) {
                a77.e = a77;
                a78--;
                try { new a77(); } catch (e) {}
                const v83 = a79 << a79;
                v83 >>> v83;
                function f86() {
                    return a77;
                }
                Int8Array.name = Int8Array;
                const v88 = new Int8Array();
                const v89 = v88?.constructor;
                try { new v89(v72, v72, 551.9389213197012); } catch (e) {}
                let v93 = BigUint64Array * 536870887;
                v93--;
                v93 - v93;
                Number.isNaN(v93 ** v93);
                function f99(a100, a101) {
                }
                try { f99(); } catch (e) {}
                const v103 = v88.buffer;
                try { v103.slice(551.9389213197012, 551.9389213197012); } catch (e) {}
                const v105 = v103.__defineGetter__;
                v105.name = v105;
                try { v105(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f86);
                ("find")[3];
                let v109;
                try { v109 = v72["find"](..."find", a80, ...v71); } catch (e) {}
                const o110 = {
                };
                o110.d = o110;
                v109 <= a79;
            }
            for (let v112 = 0; v112 < 5; v112++) {
                v112 ^ v112;
                f76(this, v112, v112);
            }
        }
    }
}
