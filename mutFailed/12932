const v2 = new Float32Array(101);
try { new BigInt64Array(v2, BigInt64Array, Float32Array); } catch (e) {}
new BigInt64Array(14);
-1000;
const t3 = 101;
const v10 = new t3(1000);
class C11 extends Int32Array {
    static #toString(a13, a14, a15) {
        const v18 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
        const v19 = [-1073741824,1665564361,16526,1805211777,10,-9007199254740990,4,-17063,-1];
        const v20 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
        const v21 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        const v22 = [-1.015259194643325e+308,-Infinity,-9.825391401141273,-2.2250738585072014e-308,5.0,-2.2250738585072014e-308];
        class C23 {
            constructor(a25, a26, a27, a28) {
                this?.constructor;
                try { new C23(v21, a27, a27, v18); } catch (e) {}
                a26 >>> a26;
                -0.0 >>> -0.0;
            }
            /*
            constructor(a37, a38, a39, a40) {
                const o46 = {
                    "maxByteLength": 2240,
                };
                const v48 = new ArrayBuffer(2240, a38);
                new Uint8ClampedArray(v48);
                this[268435456];
                v20 && this;
                try {
                    v20.length = v22;
                } catch(e53) {
                }
            }
            */
            static 268435439 = v19;
            #c = -2.2250738585072014e-308;
            static 832209355 = 2.220446049250313e-16;
        }
        new Uint32Array(9);
        const v59 = new Float32Array(a13);
        new Int8Array(1000);
        return v59;
    }
    static d = 101;
    static #p(a64) {
        function f65() {
            return BigInt64Array;
        }
    }
    [Int32Array];
}
const t52 = "undefined";
t52["p" + v10] = 101;
const t54 = [1073741823,64,-192774235];
t54.length = 127;
C11.e = C11;
new C11();
new C11();
new C11();
class C75 {
    toString(a77) {
        this.e *= 0.8199829542463926;
    }
}
function f79() {
    let v80 = -9223372036854775808n;
    new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
    for (let v84 = 0; v84 < 10; v84++) {
        function* f85(a86, a87, a88) {
            return a87;
        }
        f85();
    }
    v80 %= 45725n;
    new Uint32Array(159);
    new Int8Array(16);
    return 45725n;
}
for (let v97 = 0; v97 < 5; v97++) {
    v97 << v97;
    f79();
    %OptimizeFunctionOnNextCall(f79);
}
("async").toUpperCase();
const v103 = new Uint32Array(Uint32Array, Uint32Array);
v103[0.8199829542463926];
