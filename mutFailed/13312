const v0 = [];
const v1 = /D/gd;
/a\D\P{gc=Decimal_Number}/viy;
const v3 = /5(x)(x)(x)\2/viy;
[v0,[v0,v1,v0],v3];
[v1,v0,v1,v1,v0];
const v17 = new Set();
function f18(a19) {
    const o26 = {
        set b(a21) {
        },
        toString(a23, a24) {
            return a23;
        },
        get d() {
            return a19;
        },
    };
    return o26;
}
const v27 = f18(v17);
const v28 = f18(v27);
const v29 = f18(v17);
function f30() {
    return f18;
}
Object.defineProperty(v29, "valueOf", { get: f30 });
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
}
new F31(v27, v29);
new F31(v28, v27);
const v37 = new F31(v27, v28);
function f40() {
    return f30;
}
function f41(a42) {
    for (let i45 = 0, i46 = 10;
        i45 < i46;
        (() => {
            i46--;
            let v52 = BigInt64Array;
            const v53 = new v52(3768);
            let v54 = undefined;
            const v55 = v52++;
            const v56 = v55 >> v55;
            let o57 = {
            };
            [,...o57] = v53;
            v54 = v56;
        })()) {
    }
}
Object.defineProperty(Int32Array, Symbol.toPrimitive, { writable: true, configurable: true, get: f40, set: f41 });
const v62 = new Int32Array(2020);
try {
    v17.size;
    v29 & 1024;
    268435440 - -406885.1001387938;
    Math.fround(-406885.1001387938);
    const v73 = new Uint8ClampedArray(231);
    v73["reverse"]();
    ~Int32Array;
    class C78 {
        constructor(a80) {
        }
        h = undefined;
    }
    class C81 extends C78 {
    }
    C81();
    v29 / 268435440;
} catch(e84) {
    const v87 = new Float32Array(2306);
    v87.reverse();
    function F89(a91, a92) {
        if (!new.target) { throw 'must be called with new'; }
    }
    [-5.0,0.6506817157229189,-1.0,325954.7806464648,-2.977619842045307,207.7293164806515,-2.2250738585072014e-308,-3.8235851972465246e+307,1.0];
    [-1.0,-1000000000000.0,0.8531264749275649,-5.0];
    [7.640606689322991e+307,-0.0,2.0,1000000.0,-1.7976931348623157e+308,2.0,0.0,34737.52793939819,959540.4413600569,1e-15];
}
const o98 = {
    "f": -1.883023285666516,
};
const o100 = {
    1073741825: "MIN_VALUE",
};
function F102(a104, a105, a106, a107) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v108 = 0; v108 < 100; v108++) {
        const o111 = {
            valueOf(a110) {
                return a110;
            },
        };
    }
}
new F102("n");
new Uint16Array(70);
[-4096,-156526366,-9007199254740992,-2108113053,-1409475351,11,-37308,16];
[-6,-429106885,58245331,9,5,-41416,33852];
[-1073741824,255,11,-9007199254740991,232691623,1046358555,-42399,13,-46796,1669956301];
try {
    BigInt64Array(256);
    const v127 = new Uint32Array();
    const v128 = v127[40];
    for (let v129 = 0; v129 < 5; v129++) {
        try { v128(); } catch (e) {}
    }
    AggregateError("undefined");
    v62?.constructor;
    [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
    [1073741824,-46456,536870888];
    function f135(a136, a137) {
        return a136;
    }
} catch(e138) {
}
new Float64Array(8);
const v140 = /(?:a*)+q(?<a>.)/guds;
const o141 = {
    "maxByteLength": v37,
    __proto__: v140,
};
for (let i144 = 0, i145 = 10; i144 < i145; i145--) {
}
