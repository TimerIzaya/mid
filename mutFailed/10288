function f0() {
    const o21 = {
        __proto__: 3.128585714807929e+307,
        [4.876226517851716](a5, a6) {
            super[this];
            a5.__proto__;
            let v11 = 1248541275;
            const v14 = v11++;
            Math.sinh(v14);
            const v16 = v14 * 4.0;
            4.0 || v16;
            Math.fround(-1792760791);
            Math.cosh(4.0);
            +v11;
            return v16;
        },
    };
    return o21;
}
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 3;
    } catch(e25) {
    }
    try {
        this.f = 3;
    } catch(e26) {
    }
    try {
        this.h = 3;
    } catch(e27) {
    }
}
const v28 = new F22();
const v29 = new F22();
const v30 = new F22();
v30.b = v30;
new Uint32Array();
const v36 = new Uint32Array();
const v39 = new Float64Array(10);
v39[1] = v39;
class C40 {
}
const v41 = new C40();
const v42 = new C40();
const v43 = [v42,v41,v28];
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try { a46.entries(); } catch (e) {}
    const v51 = a47?.constructor;
    try { new v51(); } catch (e) {}
    const v53 = a46.unshift();
    v53 === v53;
    const v56 = new Set(Set, v43);
    function F57(a59, a60) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a59;
        } catch(e61) {
            for (let [v62,v63] of a59) {
                try {
                    v56.values();
                } catch(e65) {
                }
            }
        }
        try {
            this.h = v56;
        } catch(e66) {
        }
        try {
            const v67 = v56[this];
            try {
                new F57(v67, -268435456n);
            } catch(e70) {
            }
            this.b = Set;
        } catch(e71) {
        }
    }
    const v72 = new F57(Set, Set);
    new F57(Set, F57);
    const v74 = new F57(v72, F57);
    const v78 = [65537,268435441,63298,-5,1235122603];
    const v79 = [128,215394418];
    const v80 = v79.entries();
    const v81 = [-2,-4294967296,4294967297];
    function F82(a84, a85, a86, a87) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v88 = new F82(255, F82, 255, v79);
    class C96 {
        constructor(a98, a99) {
            const o101 = {
                84: arguments,
            };
        }
    }
    const v102 = new F57(v74, null);
    new BigUint64Array(0);
    new Int32Array(1519);
    v88.length;
    const v110 = new F82(9, v88, 9, v81);
    v110.b = v110;
    new F82(1024, v110, v81, v81);
    const v119 = ("string").trimStart();
    v80[3];
    let v123;
    try { v123 = v119(); } catch (e) {}
    v78[v123] = v79;
    0 ^ 9;
    const v128 = -1000;
    ~9;
    v128 >>> v128;
    a = ("string").length - F82;
    v56[v110];
    v102.__proto__;
    -35417 - -35417;
}
const v137 = new F44(v43, v29);
new F44(v43, v36, v36, v137);
f0();
f0();
f0();
new Uint8ClampedArray(2);
new Int8Array(8);
new Uint16Array(715);
const v160 = new Date(16 | 16);
v160.setFullYear();
Date();
