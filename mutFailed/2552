const v0 = [1485491959,-15,-9223372036854775808,31736,2032330951,-13047,10000,-1086450433,-62746,-256];
const v1 = [-256];
const v2 = [-564433034,-15,4294967297,10];
function f3(a4, a5) {
    const o10 = {
        1: a5,
        ...v2,
        "a": a5,
        n(a7) {
            for (const v8 in a5) {
                super[v8] = v8;
            }
            try {
                v1.__proto__ = this;
            } catch(e9) {
            }
            return this;
        },
    };
    return o10;
}
const v11 = f3(v1, v2);
v11[0];
const v13 = f3(v1, v1);
f3(v0, v1);
-1783286040 >>> -1783286040;
-43916 >> -43916;
class C20 extends f3 {
    m(a22, a23, a24) {
        super[-1783286040];
        try {
            v2.__proto__ = v2;
        } catch(e26) {
        }
        return a23;
    }
    d = f3;
    1958779056 = v13;
    a = v11;
}
new C20();
const v28 = new C20();
v28[1];
const v30 = new C20();
try { v30.d(-1783286040, v28); } catch (e) {}
const v32 = [104762.14753807266,-279097.1642774454,5.0,1.0];
try { v32.group(v32); } catch (e) {}
const v34 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
22 + 22;
-(-7);
const v42 = new Int32Array(-1783286040);
v42["lastIndexOf"](10);
const v47 = new Uint8Array(22);
const v50 = new Int32Array(3289);
const v52 = [v50];
-256n >> -256n;
function f55() {
    delete arguments.callee;
    return arguments;
}
const v59 = Reflect.apply(v32.join, v47, v52);
try { v59.matchAll(v28); } catch (e) {}
class C61 extends Int32Array {
    [Set] = true;
    [v34];
}
try { new C61(); } catch (e) {}
function F63(a65, a66, a67) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a65;
    } catch(e68) {
    }
    try {
        this.b = a67;
    } catch(e69) {
    }
}
new C61();
