[600254.6153577862,-1.7053422986561404e+308,Infinity,-6.556522522267536,-1000000000.0,-1000.0,3.0,-0.0,4.0];
for (let v1 = 0; v1 < 10; v1++) {
    class C2 {
        #f;
        [v1];
    }
    new C2();
}
[252372.90855604713,-1000000000000.0,-1000.0,1000000000000.0,1.0,5.0,-5.0,-1000000000.0,2.685835888737465,0.8031092899883051];
const v5 = [-0.3234759070094526,1000000000000.0,-0.2724345467511604,2.0,1.0734178422300402e+308,-474.5449128208372,964511.8631722287,4.0,1.0116381894336255e+307];
new Int16Array(127);
function f14(a15, a16) {
    a16.constructor(a16);
    return f14;
}
const v20 = new Uint8ClampedArray();
const v21 = v20.dispose;
try { v21(); } catch (e) {}
const v30 = new Float64Array(127);
v30[127] = 127;
try {
    v30.values();
} catch(e34) {
    const v35 = e34?.a;
    try { v35(e34, v35, v35, v35); } catch (e) {}
    function F37(a39, a40, a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = e34;
        } catch(e43) {
        }
    }
    new F37(F37, 8, 127, e34);
    const v45 = new F37(52235, 6, -1876875593, Uint16Array);
    new F37(v45, 6, 1000, Uint16Array);
    const v50 = new Int8Array(3816);
    for (const v51 of "some") {
        const v52 = v50[1];
        let [,,,...v53] = v50;
        const o54 = {
        };
        o54.a = v52;
        const o55 = {
        };
        o55.a = v52;
    }
}
v5.g = -1;
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
function f60() {
    const o61 = {
    };
    return f60;
}
%OptimizeFunctionOnNextCall(f60);
const v64 = `
    function f65() {
        let v66 = 1000.0;
        class C67 {
            static {
                ++v66;
            }
        }
        return f65;
    }
`;
eval(v64);
