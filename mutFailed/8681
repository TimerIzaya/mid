new Int32Array(14);
new Int32Array(255);
const v8 = new Int32Array(15);
const v9 = v8[10];
const v12 = new Int32Array(255);
v12[71] = v12;
3836 * 3836;
new BigUint64Array(3836);
new Uint16Array(64);
class C21 {
    static #o() {
        const v23 = [-2147483648,-46456,1200954989,-4294967296,1];
        const v24 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
        const v25 = [23955,1426598775,2147483649];
        try {
            v24.#o(v24, v25, null, v24, v23);
        } catch(e27) {
        }
        return null;
    }
    #p() {
        const v29 = this[223];
        const v30 = super.g;
        let v31;
        try { v31 = v29.p(this, v30, v30, v30); } catch (e) {}
        this[null] = v31;
        new Map();
        return v30;
    }
}
const v34 = new C21();
const v35 = new C21();
const v36 = new C21();
const v37 = v36?.constructor;
try { new v37(); } catch (e) {}
class C39 {
    p(a41) {
        const v42 = null - a41;
        %VerifyType(v34);
        super[v34] = v42;
        a41?.[1858] ^ v42;
        for (let i47 = 0; i47 < 7; i47++) {
            try { v35.valueOf(i47, a41, v34, i47, i47); } catch (e) {}
        }
        const v58 = new BigUint64Array();
        v58.buffer.slice();
        Math.cos(v9);
        return C21;
    }
}
try { new v35(); } catch (e) {}
const v64 = new C39();
const v65 = new C39();
const v66 = new C39();
38767 & 38767;
let v70 = -1024;
v70 >> v70;
function F72(a74, a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    const v78 = a76?.constructor;
    try { new v78(); } catch (e) {}
    this.e = a76;
    try {
        this.f = C21;
    } catch(e80) {
    }
    try {
        this.e = v66;
    } catch(e81) {
    }
    try {
        this.a = a75;
    } catch(e82) {
    }
}
new F72(38767, v64, v34, v35);
new F72(38767, v66, C39, v64);
const v85 = new F72(v70, v65, v34, C21);
v85.b = v85;
const v86 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try { v86.map(BigUint64Array); } catch (e) {}
const v88 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
new Uint32Array(v86, 0, 0);
function F94(a96, a97) {
    if (!new.target) { throw 'must be called with new'; }
}
F94.caller;
const v99 = new F94(v88, 0);
const v100 = new F94();
try { v100.valueOf(); } catch (e) {}
const v103 = ("b")?.toLocaleUpperCase;
try { new v103(); } catch (e) {}
class C105 {
}
C105.a = C105;
try { ("D2z").strike(); } catch (e) {}
let v108 = 0;
while (v108 < 3) {
    Symbol.prototype = Symbol;
    const v112 = Symbol.iterator;
    Symbol.for(v112.description);
    const o124 = {
        [v112]() {
            let v117 = 10;
            const o123 = {
                next() {
                    v117--;
                    const v121 = v117 == 0;
                    const o122 = {
                        "done": v121,
                        "value": v117,
                    };
                    return this;
                },
            };
            return o123;
        },
    };
    o124.e = o124;
    const v125 = v108++;
    v125 - v125;
}
const o131 = {
    valueOf() {
        return "D2z";
    },
};
const v132 = o131?.isPrototypeOf;
try { new v132(3836); } catch (e) {}
let v134 = -4294967297n;
v134--;
const v136 = /5*/gi;
const v137 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v138 = [601759695];
try { v138.reduce(v12); } catch (e) {}
const v140 = [1073741824,1073741823,1376142744,1073741825];
const t136 = "b";
t136.e = "B";
function f143(a144, a145, a146, a147) {
    function f148() {
        let v151 = Float64Array;
        v151 = a145;
        b = v138;
        const v152 = v86.length;
        try {
            v86.forEach(v151);
        } catch(e154) {
            const v155 = e154?.constructor;
            try { new v155(v12); } catch (e) {}
        }
        const v157 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.iterator = Symbol;
        let v159 = Symbol.toPrimitive;
        const o177 = {
            toString(a161, a162) {
                const v163 = a147 && v151;
                function f164() {
                    a161 *= v159;
                    return v151;
                }
                f148();
                Symbol("D2z");
                new Uint16Array(6);
                new Float32Array(0);
                new Int32Array(153);
                return v163 <= v157;
            },
        };
        const o201 = {
            "c": v134,
            [522675525n](a180, a181) {
            },
            "c": v138,
            valueOf(a183, a184) {
                return this;
            },
            "b": -4294967295,
            [v134](a186, a187, a188, a189) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v137,
            ...v85,
            [a147]() {
                const o193 = {
                    next() {
                        return v136;
                    },
                };
            },
            "type": o177,
            ..."Vre",
            valueOf(a195, a196) {
                return a196;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a198, a199, a200) {
            },
            5: -4294967295,
            6: -268435456,
        };
        v159 = v151;
        1334 - 1334;
        new v132(1334);
        v70 %= -268435456;
        const v206 = new Uint32Array(v88, v152, v159);
        try { v206.filter(v151); } catch (e) {}
        v99 - f148;
        3 != 3;
        try { new Float64Array(a147, v151, v151); } catch (e) {}
        const v216 = new Float64Array(3);
        v216[2];
        new Uint16Array(2);
    }
    f148();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f148);
    "find" == "find";
    try { v140["find"]("find", a147, v138, v140, v132); } catch (e) {}
}
for (let v227 = 0; v227 < 10; v227++) {
    f143();
}
%OptimizeFunctionOnNextCall(f143);
f143();
