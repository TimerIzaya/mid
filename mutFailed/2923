class C3 {
    static b = -8n;
    [11n];
    static [-8n];
    static toString(a5) {
        let v6;
        try { v6 = new a5(); } catch (e) {}
        try { v6(); } catch (e) {}
        ~-14n;
        return 2.220446049250313e-16;
    }
    static #a;
}
const v12 = new C3();
const t14 = -8n;
const v13 = new t14();
const v14 = new C3();
function f18(a19, a20, a21, a22) {
    const o29 = {
        "h": a20,
        "d": -14n,
        [v14]: C3,
        __proto__: a21,
        [a22]: a19,
        toString(a24, a25, a26, a27) {
            v12[11n];
            return 0.0;
        },
        [C3]: 11n,
        "a": 5.0,
        ...a19,
        [-8n]: v13,
    };
    return o29;
}
f18(f18(f18(v14, 5.0, -14n, C3), -3.0, 0.0, -8n), 0.0, 0.0, C3);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o39 = {
    };
} catch(e40) {
}
class C41 {
    static p(a43) {
        const o50 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f45() {
                        return this;
                    }
                    const v46 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e49) {
                }
                return -128;
            },
        };
        return o50;
    }
    g;
}
try { new C41(); } catch (e) {}
const v52 = new C41();
class C54 extends Map {
}
new C54();
new Float32Array();
v52.g;
new C41();
new C3();
class C61 extends C41 {
    static n(a63, a64) {
        function F66(a68, a69, a70, a71) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C78 {
        }
        this[C61.matchAll] = a64;
        a63 += C54;
        try {
            this.fuck(Math, Map, 536870889);
        } catch(e83) {
        }
        return -128;
    }
    #c = C61;
    valueOf(a87, a88, a89) {
        super.f;
    }
    constructor(a92, a93, a94, a95) {
        super();
        function f96() {
            const t100 = [];
            t100[6] = 4294967295;
            new Int32Array();
            const o111 = {
                get b() {
                    return Int32Array;
                },
                "c": f96,
                toString(a104, a105, a106) {
                    return this;
                },
                4294967295: Uint8ClampedArray,
                m(a108) {
                    return 4294967295;
                },
                "h": -128,
                ...1.0,
                set b(a110) {
                },
            };
        }
        for (let v112 = 0; v112 < 5; v112++) {
            f96();
        }
    }
    set f(a115) {
        for (const v116 of a115) {
            try {
            } catch(e117) {
            }
        }
        class C119 extends SharedArrayBuffer {
        }
        const o120 = {
        };
        try {
        } catch(e121) {
        }
        try {
            const o122 = {
            };
        } catch(e123) {
        }
        try {
            const o124 = {
            };
            o124.c = -128;
            o124.e = v12;
        } catch(e125) {
        }
        try {
            const o126 = {
            };
        } catch(e127) {
        }
    }
}
const v128 = new C61();
gc(v128);
class C131 {
}
function f132(a133, a134, a135, a136) {
    const o141 = {
        p(a138, a139, a140) {
        },
    };
}
for (let v142 = 0; v142 < 25; v142++) {
}
const v144 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f145(a146, a147) {
    const o149 = {
        get d() {
        },
    };
}
f145();
const v151 = f145(v144);
try { v151(956206316, 956206316); } catch (e) {}
