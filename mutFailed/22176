const v0 = [];
function f1() {
    return v0;
}
const o3 = {
};
function F4(a6, a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    try { new v9(); } catch (e) {}
}
class C11 extends F4 {
}
-2147483647n > -2147483647n;
const v18 = new Int32Array(Int32Array);
%OptimizeFunctionOnNextCall(f1);
v18();
let v20 = [-883936.0401947303,9.41640124927378e+307,0.060305085001335246];
v20 /= v20;
let v22 = 10000n !== 10000n;
let v25;
try { v25 = ("EV").link(); } catch (e) {}
let v26 = 0;
let v28 = 0 >> 0;
try {
    let v29 = 0;
    for (let i = 0; i < 5; i++) {
        ({"c":v22,"d":v26,...v28} = v25);
        try {
            C11.fuck(128, v20);
        } catch(e31) {
        }
        v29++;
    }
    const o33 = {
    };
} catch(e34) {
}
10000n ^ 10000n;
function f37() {
    const v38 = [f37,f37];
    let v39;
    try { v39 = v38.every(f37); } catch (e) {}
    return v39;
}
%OptimizeFunctionOnNextCall(f37);
new Map();
function f42() {
    for (let v43 = 0; v43 < 5; v43++) {
        const v44 = v43++;
        let v45 = v44 >> v44;
        v45--;
        v45 >>> v45;
    }
    return f42;
}
const v48 = -425087802 / -425087802;
function f49(a50) {
    try {
        const o51 = {
        };
    } catch(e52) {
    }
}
v48 % v48;
const v54 = -425087802 >>> -425087802;
v54 >>> v54;
Array.prototype = Array;
class C57 extends Array {
}
C57.length = C57;
let v58;
try { v58 = new C57(); } catch (e) {}
try { v58.fill(Map); } catch (e) {}
const v60 = new C57();
try { v60.group(v54); } catch (e) {}
