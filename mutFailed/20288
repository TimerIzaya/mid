const v5 = Symbol.isConcatSpreadable;
const t1 = 8;
t1[v5] = v5;
v5.description >>>= -3.7810169653155796;
Object.defineProperty(v5, "h", { enumerable: true, value: v5 });
const v7 = new BigInt64Array(8);
const v10 = new BigUint64Array(19);
class C11 {
}
const v12 = new C11();
const v13 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o14 = {
};
const v16 = new Proxy(v13, o14);
v16.unshift(v12, C11);
new Uint8ClampedArray(3);
for (let v21 = 0; v21 < 18; v21++) {
    const o22 = {
    };
    try {
        o22.h = v21;
    } catch(e23) {
    }
    try {
        const o24 = {
        };
        o24.h = v21;
        o24.a = v21;
    } catch(e25) {
    }
    try {
        const o26 = {
        };
        o26.h = v21;
        o26.a = v21;
        o26.b = v12;
    } catch(e27) {
    }
    try {
        const o28 = {
        };
        o28.h = v21;
        o28.a = v21;
        o28.d = v21;
    } catch(e29) {
    }
}
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    function f33(a34, a35, a36, a37) {
        const v39 = new BigInt64Array();
        const o40 = {
            __proto__: v39,
            "c": a37,
            ...v10,
            "g": f33,
            17: -3.7810169653155796,
            ...v7,
        };
        try { o40.indexOf(); } catch (e) {}
        try { Set.apply(a34, a37, a34, Set, a35); } catch (e) {}
        const v45 = new BigInt64Array(4046);
        [,...a37] = v45;
        return a37;
    }
    for (let v46 = 0; v46 < 5; v46++) {
        f33();
    }
}
new F31();
