const v2 = new Float32Array(12);
Uint8Array.h = Uint8Array;
const v5 = new Uint8Array(13);
function f6(a7, a8) {
    const v10 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    try {
        v10.forEach(v5);
    } catch(e12) {
        e12.f = e12;
    }
    return v10;
}
v5[Symbol.toPrimitive] = f6;
try { Int8Array.from(12); } catch (e) {}
const v18 = new Int8Array(256);
class C19 {
    n(a21, a22) {
        v18.__proto__;
        return this;
    }
    constructor(a25, a26) {
        this[256] = this;
        function f27(a28, a29) {
            function f30(a31, a32) {
                return f30;
            }
            const v33 = f30(f30, f30);
            class C34 extends f30 {
                constructor(a36, a37, a38) {
                    super();
                    const v39 = `
                        try { a36(a38, v33); } catch (e) {}
                    `;
                    eval();
                }
            }
            return f30;
        }
        a26[Symbol.toPrimitive] = f27;
        super.b;
        this[a26] = Int8Array;
        try {
            this.f = Int8Array;
        } catch(e46) {
        }
    }
}
new C19(Int8Array, v5);
const v48 = new C19(v5, 256);
const v49 = new C19(v48, 256);
const v50 = v49?.hasOwnProperty;
try { new v50(12); } catch (e) {}
function f52() {
    return f52;
}
f52.toString = f6;
const v53 = f52?.apply;
try { new v53(v2, 13); } catch (e) {}
class C55 extends f52 {
}
try { C55.__proto__(); } catch (e) {}
const v57 = new C55();
v57.caller = v57;
const v59 = new Date(v57);
v59.setUTCMinutes(f52, v59, Date);
