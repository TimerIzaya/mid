class C3 {
    static c;
    static #p(a5, a6) {
        a5[a5] = "function";
        const o7 = {
        };
        try {
            o7.b = a5;
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.b = a5;
            o9.d = a6;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.b = a5;
            o11.d = a6;
            o11.f = a6;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.b = a5;
            o13.d = a6;
            o13.g = -4294967295;
        } catch(e14) {
        }
        return a5;
    }
}
try { new C3(); } catch (e) {}
const v16 = new C3();
function f17(a18, a19) {
    const v22 = new Uint8Array(127);
    v22.fill();
    return Uint8Array;
}
v16.constructor = f17;
const v24 = v16?.constructor;
let v25;
try { v25 = new v24(); } catch (e) {}
new C3();
const v27 = new C3();
const v30 = new BigInt64Array(64);
3196 >>> 3196;
function f34() {
    v27.__proto__;
    function F37(a39) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v40 = new F37("a");
    v40.d = "function";
    return v40;
}
Uint8ClampedArray[Symbol.iterator] = f34;
try { new Uint8ClampedArray(v27, Uint8ClampedArray, 1073741824); } catch (e) {}
new Uint8ClampedArray(3196);
try { Int32Array.from(Uint8ClampedArray); } catch (e) {}
new Int32Array(7);
function F49() {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this?.constructor;
    try { new v51(); } catch (e) {}
    try {
        this.g = -3;
    } catch(e54) {
    }
    try {
        this.f = -3;
    } catch(e55) {
    }
}
const v56 = new F49();
const v57 = new F49();
v57.length = v25;
v57.length;
const v59 = new F49();
v59.toString = f17;
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this?.__lookupGetter__;
    try { v64.apply(v27, 3196); } catch (e) {}
    try { v64(a62); } catch (e) {}
    try { this.constructor(F60, this); } catch (e) {}
    a62.e = a62;
}
F60.arguments = F60;
const v68 = new F60(v59);
v68.e = v68;
const v69 = new F60(v68, v57);
v69.e = v69;
const v72 = ("Hyo9")[1]?.fontsize;
try { new v72(v69); } catch (e) {}
const t99 = "at";
t99[1] = "at";
const v76 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap;
const v77 = v76?.constructor;
let v78;
try { v78 = v77("Hyo9"); } catch (e) {}
try { v76(v56); } catch (e) {}
([-4.202468609045087])[0];
const v82 = [0.8434386161503777];
try { v82.findLastIndex(v82); } catch (e) {}
const t109 = "4i";
t109[1] = "4i";
const t111 = "4i";
t111[1] = "4i";
const t113 = "RpXR";
t113[1] = "RpXR";
("c")?.toLocaleUpperCase;
try { ("valueOf").blink(); } catch (e) {}
class C90 {
    constructor(a92) {
        a92.e = f34;
        a92.e = a92;
        ("valueOf").localeCompare(a92, "valueOf");
    }
}
C90.e = v30;
C90.prototype;
const v95 = new C90(v59);
const v96 = v95.constructor;
function f97(a98, a99) {
    +v30;
    const v104 = Math.acos(v78);
    v30 | v78;
    return v104;
}
v96.toString = f97;
const v106 = new v96(C90);
try { v106.constructor(F49); } catch (e) {}
