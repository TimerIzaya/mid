new BigUint64Array(1781);
const v5 = new Int32Array(256);
new Float64Array(256);
const v14 = new Int32Array();
try {
    const t5 = null;
    t5.valueOf = v14;
} catch(e16) {
    const v17 = e16.message;
    v17.search(v17);
    -(256 + 256);
    function f21() {
        return f21;
    }
}
for (let v22 = 0; v22 < 10; v22++) {
    const v25 = /(?:a*)+q(?<a>.)/guds;
    for (let [i39, i40] = (() => {
            function f27(a28, a29) {
                const o35 = {
                    valueOf(a31, a32) {
                        ([]).group(f27);
                        return a29;
                    },
                };
                return o35;
            }
            eval();
            return [0, 10];
        })();
        i39 < i40;
        (() => {
            i40--;
            let v46 = -26370;
            v46-- & i40;
            ~v46;
            -v46;
            ~i40;
        })()) {
        for (let v55 = 0; v55 < 25; v55++) {
            const v56 = v25.constructor;
            v56.next();
            function f58(a59, a60, a61, a62) {
                function f63() {
                    Symbol.toPrimitive;
                    const o71 = {
                        "e": -268435456,
                        valueOf(a69, a70) {
                        },
                        6: -268435456,
                    };
                }
                f63();
                const v74 = new Int8Array();
                v74.buffer;
                %OptimizeFunctionOnNextCall(f63);
            }
            for (let v77 = 0; v77 < 10; v77++) {
                f58();
            }
            v56.$4;
        }
    }
}
for (let i82 = 0, i83 = 10; i82 < i83; i82++, i83--) {
    i83 >>>= i83;
    v5[Symbol.unscopables];
}
