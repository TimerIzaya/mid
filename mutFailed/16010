[5,-9007199254740991];
const v1 = [-2147483647,63137,7,-65537];
[-1045075901,-1073741824,-3];
new Float32Array(840);
new Int32Array(129);
new Uint16Array(0);
const v22 = [-2147483647,64098,-9383,1024,129,-5];
[1000,-16,-38597,12,-3399,32508];
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v26 = new v1();
const v28 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v29 = [601759695];
const v30 = [1073741824,1073741823,1376142744,1073741825];
function f32(a33, a34, a35, a36) {
    function f38() {
        let v41 = Float64Array;
        v41 = a34;
        b = v29;
        v24.length;
        try {
            v30.forEach(a34);
        } catch(e44) {
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o46 = {
        };
        const o61 = {
            "c": -4294967297n,
            "c": v29,
            valueOf(a49, a50) {
            },
            1073741824: v26,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [-4294967297n](a52, a53, a54, a55) {
                class C57 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v28,
            256: a36,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
    }
    f38();
    const v64 = new Int8Array();
    v64.buffer.slice(2147483648);
    const v70 = new Int32Array(1024);
    v70[3];
    for (let v72 = 0; v72 < 10; v72++) {
    }
    %OptimizeFunctionOnNextCall(f38);
    let v74;
    try { v74 = v30["find"](..."find", a36, ...v29, ...v30, ...522675525n); } catch (e) {}
    v74 <= a35;
    return arguments;
}
for (let v76 = 0; v76 < 10; v76++) {
    f32();
}
%OptimizeFunctionOnNextCall(f32);
v29();
[-50328,-14,3,128,-11,64,-65535];
class C80 {
    [v22] = -1000000.0;
    constructor(a82, a83, a84, a85) {
        %VerifyType(a85);
        super[this];
    }
    g;
    c;
    #toString(a88, a89, a90) {
    }
    1 = 257n;
}
new C80(1073741825n, 1.0, 7.589647165982214);
const v92 = new C80(411585671n, -1000000.0, -1000000.0, 1.0);
new C80(v92, -1000000.0, 1.0);
const v94 = /(?:a*)+bU\u0034xyz{1,32}/udi;
/vfoo|(bar|baz)|quux/gvds;
/JO/gvy;
class C99 {
    #m(a101, a102) {
        function f103() {
            return v94;
        }
        super[a102] = "f";
        %VerifyType(a102);
        return f103;
    }
    static c;
}
try { C99(); } catch (e) {}
const v105 = new C99();
const v106 = new C99();
v106?.constructor;
const v108 = new C99();
v108?.constructor;
class C110 {
    p(a112) {
        this.g ^= this[8];
    }
    static #n(a115, a116, a117, a118) {
    }
    7 = v108;
    #a = v106;
}
const v119 = new v1();
v119[7] = v119;
const v120 = new C110();
v120[7] = v120;
const v122 = [[],"f",v108,381717.6504737276];
[v105];
function F124() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(); } catch (e) {}
}
new F124();
const v128 = new F124();
function F129(a131, a132) {
    if (!new.target) { throw 'must be called with new'; }
    const v133 = a132?.__lookupGetter__;
    try { v133(); } catch (e) {}
    try { this.constructor(F129, this); } catch (e) {}
    a131.e = a131;
}
F129.arguments = F129;
new F129(v128);
("Hyo9")[1];
const t138 = "at";
t138[1] = "at";
([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap?.constructor;
const v143 = [-4.202468609045087];
try { v143.every(v122); } catch (e) {}
[0.8434386161503777];
("4i")?.toWellFormed;
const t144 = "4i";
t144[1] = "4i";
const t148 = "RpXR";
t148[3] = "RpXR";
const t150 = "RpXR";
t150[1] = "RpXR";
("c")?.toLocaleUpperCase.length;
class C153 {
    constructor(a155) {
        ("valueOf").localeCompare(a155, "valueOf");
    }
}
const v157 = new C153();
const t159 = v157.constructor;
new t159(Uint32Array);
