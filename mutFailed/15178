let v0 = -10;
class C3 {
    3;
    set e(a5) {
        const o6 = {
        };
        const v9 = new Date(Uint8Array);
        v9.setTime(Uint8Array);
        a5[Symbol.unscopables];
    }
    #toString(a15, a16) {
        a16?.[this];
        const o20 = {
            "c": 257,
        };
        const v22 = new ArrayBuffer(257, o20);
        new Int8Array(v22);
        return 257;
    }
}
const v25 = new C3();
const v26 = new C3();
const v27 = new C3();
++v0;
function f29() {
    return v26;
}
Object.defineProperty(v27, 8, { enumerable: true, set: f29 });
const v30 = [v27,1000000.0,v27,v0];
new Uint8Array(4096);
v30.forEach();
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    Reflect.construct(Int8Array, [1126838905]);
}
new F35(F35, F35, F35);
[v0,1000000.0,[v25,v25,v26]];
new Int16Array(1658);
new Uint16Array(6);
new Uint8Array(1024);
("1866165091").normalize();
function f62() {
}
class C63 {
    [Int16Array];
}
new C63(f62, 4096, 256, 64);
class C67 {
    constructor(a69, a70) {
        const v71 = this.constructor;
        try { new v71(); } catch (e) {}
        let v73 = 0;
        for (let i = 0; i < 10; i++) {
            Math.atan();
            const v77 = v73++;
            v77 - v77;
        }
    }
}
new C67();
function f80() {
    function F81() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v83 = 0; v83 < 10; v83++) {
            "p" + v83;
        }
    }
    new F81();
}
f80();
