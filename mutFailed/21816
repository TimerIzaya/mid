const v1 = new WeakSet();
[-5.870104729618124];
const v3 = [-3.8986746847812656e+307,0.5372880831524702,-0.0,-1.0];
let v4;
try { v4 = v3.copyWithin(v3, WeakSet); } catch (e) {}
[-2.0,0.0,1.2330682458864356e+308,1e-15,1000.0,-2.0,0.0,5.007107067109258];
const v8 = new v4(2);
let v10 = 1073741824;
const v12 = new BigUint64Array(v10, v10, v10);
let v14 = 4096 * 4096;
function f15() {
    let v16 = 2;
    ({"byteLength":v14,"byteOffset":v16,"length":v10,} = v12);
    return v14;
}
for (let v17 = 0; v17 < 5; v17++) {
    f15();
    %OptimizeFunctionOnNextCall(f15);
}
new Int8Array(1);
let v22 = 2714 / 2714;
new Uint32Array(2714);
v22--;
const v28 = new Uint16Array(1024);
try { v8.slice(Float32Array, v1); } catch (e) {}
v28[7] = v28;
