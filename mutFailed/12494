const v0 = [65535,-67554944,689729669,5];
function f1() {
    v0[v0];
    function F3(a5, a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v8 = this.constructor;
        try { new v8(); } catch (e) {}
    }
    new F3();
    return F3;
}
v0.toString = f1;
const v11 = [9910,-9007199254740992];
v11[Symbol.toPrimitive] = f1;
const v14 = [2,-128];
function f15(a16, a17) {
    const o24 = {
        ...a17,
        __proto__: v0,
        "a": a16,
        1024: v14,
        [a17]: a17,
        "d": v14,
        p(a19) {
            const v21 = [a19,a16];
            Reflect.apply(a17.findLast, v11, v21);
            return a17;
        },
        ...a16,
    };
    return o24;
}
const v25 = f15(v11, v14);
f15(v0, v0);
f15(v14, v11);
let v40 = "NEdYi";
const o50 = {
    "f": "m",
};
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const o60 = {
        set d(a56) {
            this.cos = a56;
            this.cos = a56;
            for (let v57 = 0; v57 < 25; v57++) {
            }
            try { this["cos"](); } catch (e) {}
        },
    };
    o60.cos = -943742048;
    class C61 {
        constructor(a63) {
            o60.d = a63;
        }
    }
    new C61();
}
new F51();
new Int32Array(v25, 127, -943742048);
v40 = "repeat";
const t60 = "repeat";
t60[-726546013n] = v0;
o50[2705] = o50;
const o81 = {
};
o81.e = Symbol;
try {
    o81.e = 1;
} catch(e82) {
}
try {
    const o83 = {
    };
    Object.defineProperty(o83, "f", { configurable: true, value: eval });
    o83.e = 1;
    o83.f = "repeat";
} catch(e84) {
}
try {
    const o85 = {
    };
    o85.e = -726546013n;
    o85.e = 1;
    o85.f = "repeat";
    o85.h = "repeat";
} catch(e86) {
}
try {
    const o87 = {
    };
    o87.e = 1;
    o87.f = "repeat";
    o87.h = "repeat";
} catch(e88) {
}
function f90(a91, a92, a93, a94) {
    return eval;
    return a92;
}
