let v2 = 0n;
class C3 {
    set f(a5) {
        try { a5(a5, this, this); } catch (e) {}
        this[-2] = v2;
    }
    static {
        super.b;
        super[65536];
        65536 << -9223372036854775808n;
        Math.PI;
        this[Symbol.matchAll] = 9223372036854775807n;
        C3 = ("EQLe").normalize("NFC");
        super[9223372036854775807n];
        Math.cbrt(9223372036854775807n);
        let v22 = v2 / 9223372036854775807n;
        v22--;
        v2--;
    }
}
new C3();
const v26 = new C3();
new C3();
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a31;
    } catch(e32) {
    }
    try {
        this.d = a30;
    } catch(e33) {
    }
    try {
        this.c = -9223372036854775808n;
    } catch(e34) {
    }
}
const v35 = new F28(v26, 9223372036854775807n);
function f36(a37, a38) {
    function f40(a41) {
        C3[9223372036854775807n] = a41;
        try {
            new F28(-5.705463755491489, -5.705463755491489);
        } catch(e44) {
        }
    }
    this.onmessage = f40;
}
const v50 = [v35,v2];
const o51 = {
    "arguments": v50,
    "type": "function",
};
new Worker(f36, o51);
new F28(C3, -9223372036854775808n);
new F28(v26, -9223372036854775808n);
new Float32Array(1);
new BigUint64Array(16);
new Int8Array(339);
const v65 = 1073741824 & 1073741824;
const v66 = [6.621588498634488e+307,1.0,3.0,-5.0,-1.7976931348623157e+308,-1.7976931348623157e+308,257.7405098162435,-136018.55674827856];
const v67 = [v66,v66];
v66.concat(v67, v67, true, v65);
