function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -65012;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v10 = [1.0,2.0,0.5519455086128554,59908.498220824404,Infinity,-541879.3435767083];
[5.0,-5.0];
const v13 = [v5,v6,[-1.7976931348623157e+308,1000.0,-607.3954813382843,203.82656269490144,5.0,-137974.7306477686,1.066891817110729e+308,-4.0],v5];
const v14 = [v13];
try {
    v14.findLastIndex(v5);
} catch(e16) {
}
const v17 = v6[F0];
[F0,v4,v13,v14];
const v20 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this.constructor;
    try { new v25(); } catch (e) {}
    ~a24;
}
const v28 = new F21(F21, F21);
new F21();
const v30 = new F21();
new Uint8Array(v20);
new Uint8Array(268435440);
AggregateError(v17);
%PrepareFunctionForOptimization(AggregateError);
AggregateError(v17);
AggregateError(v17);
%OptimizeFunctionOnNextCall(AggregateError);
AggregateError(v17);
const v41 = new Uint8ClampedArray(129);
if (v41 === v10) {
    v5.f;
} else {
    function F44(a46, a47, a48, a49) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a47;
        } catch(e50) {
        }
        try {
            this.a = a48;
        } catch(e51) {
        }
    }
    const v52 = new F44(v5, v5, v17, 2147483649);
    new F44(v30, v28, v52, v17);
    new F44(v6, v6, v13, 1073741825);
}
