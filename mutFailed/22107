function f0() {
}
function f1() {
    const o4 = {
        p() {
            Object.defineProperty(this, 7, { get: f0 });
            try { this.valueOf(this, f0, this, this); } catch (e) {}
            return this;
        },
        "c": f0,
        "g": f0,
        "h": f0,
        4: f0,
        3683049422: f0,
        [f0]: f0,
        "d": f0,
        "a": f0,
    };
    return o4;
}
let v5 = f1();
const v6 = f1();
const v8 = new Set();
v8.entries();
const o10 = {
};
const v11 = o10.constructor;
for (let v12 = 0; v12 < 25; v12++) {
    function f13() {
        return f13;
    }
    function f14(a15, a16, a17, a18) {
        const v19 = a16();
        new a17();
        a16.freeze();
        const v22 = a18 + a18;
        function f23() {
            return v19;
        }
        const v24 = f1.length;
        const v25 = -v24;
        const v27 = f13().constructor;
        let v28;
        try { v28 = v27(); } catch (e) {}
        const v29 = v28.bind(v25, v27);
        function f30() {
            return v11;
        }
        const v31 = f13();
        try { v31.null(); } catch (e) {}
        f30();
        v29.bind();
        const v35 = typeof f23;
        v35.italics(v35);
        const v38 = new v28();
        v38.entries().next(v24);
        const v43 = ("find").blink("find", v38, v12).replaceAll;
        try { v43(f14, v22); } catch (e) {}
    }
    for (let v45 = 0; v45 < 5; v45++) {
        f0(v45, v11, v11);
    }
}
const v47 = v11();
function F48(a50) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a50;
    } catch(e51) {
        with (/dAza[a][\cZ]*/guims) {
            v5 %= this;
        }
        function f54() {
            return a50;
        }
        Date.UTC(f54);
    }
    try {
        class C57 {
            static {
                function f59(a60, a61, a62, a63) {
                    arguments[2];
                    return a63;
                }
                a50();
            }
        }
        this.f = a50;
    } catch(e67) {
    }
    try {
        this.a = a50;
    } catch(e68) {
        function f69(a70, a71, a72) {
            function f74(a75) {
                const o79 = {
                    "maxByteLength": 1293466293,
                };
                new SharedArrayBuffer(1796, o79);
            }
            this.onmessage = f74;
            try {
                f1();
            } catch(e83) {
            }
        }
        function F86() {
            if (!new.target) { throw 'must be called with new'; }
            const v88 = this?.propertyIsEnumerable;
            try { new v88(-30326n); } catch (e) {}
            this.a = this;
            3872 >>> 3872;
            try {
                this.a = 3872;
            } catch(e92) {
            }
        }
        new F86();
        const v95 = [v6,e68,"function"];
        const o96 = {
            "arguments": v95,
            "type": "function",
        };
        new Worker(f69, o96);
    }
}
new F48(v47);
const v99 = new F48(v6);
new SharedArrayBuffer(945);
function f103() {
    const v104 = [65535,-2147483647,9007199254740990,11241,-3,-299794727,16,1,-4294967297];
    v104[1] = v104;
    const o105 = {
    };
    function f106(a107, a108) {
        a107[11] = o105;
        return o105;
    }
    f106();
    return f106;
}
%OptimizeFunctionOnNextCall(f103);
v99.e = v99;
new F48(v47);
new Date();
new Int16Array(9);
13 << 13;
new Float32Array(Float32Array.prototype);
const v123 = new BigUint64Array(110);
v123[67];
const v126 = Date.parse();
v126 >> v126;
