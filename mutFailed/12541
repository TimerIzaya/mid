const v4 = new Function();
function f5() {
    return v4;
}
class C9 extends f5 {
    #e = -962765963;
    #c = "256";
    constructor(a11, a12) {
        super();
        this["clear"]();
        for (let v15 = 0; v15 < 32; v15++) {
            const t11 = "5wMx";
            t11["p" + v15] = v15;
        }
    }
    [-962765963];
}
const v18 = new C9("toString", v4);
const v19 = new C9("5wMx", v18);
new C9("5wMx", v19);
new BigUint64Array(2864);
let v26 = 2549;
v26--;
new BigInt64Array(v26);
try { Float32Array(v26, v26, undefined); } catch (e) {}
new Float32Array(3);
const v34 = /(J5a{0,1}?)/y;
/u?/udms;
/bf/gvms;
32 >>> 32;
let v39 = 32 + 32;
v39--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v49 = 1582 >> 1582;
v49--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v59 = [-54813,1582,-54813,8];
const v60 = [-54813];
const v61 = [-54813];
try { v61.map(4); } catch (e) {}
function f63(a64, a65, a66, a67) {
    try { a64.toString(); } catch (e) {}
    try { a65.groupToMap(a66); } catch (e) {}
    a66[0] = a66;
    try { a64.copyWithin(undefined, a65); } catch (e) {}
    const o79 = {
        n(a72, a73, a74, a75) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a67;
        },
        ...v61,
        "b": v59,
        ...a66,
        ...v61,
        129: 4,
        ...a64,
    };
    o79[2] = o79;
    return o79;
}
const v81 = f63(v60, 8, f63(v60, v61, v59, 4), 4);
v81[129] = v81;
const v82 = f63(v61, 4, 4, 4);
v82.d = v82;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C90 extends Map {
}
const v91 = new C90();
try { v91.get(Uint8Array); } catch (e) {}
const v93 = v91.isPrototypeOf();
v93 && v93;
v93 && v93;
Date.name;
let v99;
try { v99 = Date.parse(4); } catch (e) {}
-v99;
class C101 {
    static {
        for (let v103 = 0; v103 < 25; v103++) {
            v103 >>> v103;
            const v105 = [601759695];
            const v106 = [1073741824,1073741823,1376142744,1073741825];
            function f108(a109, a110, a111, a112) {
                try { new a109(); } catch (e) {}
                a110 & a110;
                ~a110;
                try { new a109(); } catch (e) {}
                const v117 = a111 << a111;
                v117 % v117;
                function f120() {
                }
                const v122 = new Int8Array();
                const v125 = BigUint64Array * 536870887;
                let v126 = v125 - v125;
                v126++;
                const v128 = v125 * v125;
                try { Number.parseInt(v126, v126); } catch (e) {}
                let v131;
                try { v131 = new Number(v34); } catch (e) {}
                try { v131.valueOf(); } catch (e) {}
                Number.isNaN(v128);
                function f134(a135, a136) {
                    return Number;
                }
                try { f134(); } catch (e) {}
                v122.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f120);
                try { v106["find"](..."find", a112, ...v105); } catch (e) {}
                const o142 = {
                };
            }
            for (let v143 = 0; v143 < 5; v143++) {
                f108(this, v143, v143);
            }
        }
    }
}
