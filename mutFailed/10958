let v1 = -476.53534459471916;
const t1 = 1.7092563413447216e+308;
t1[16] = 1.7092563413447216e+308;
let v3;
try {
const t0 = 1.7092563413447216e+308;
v3 = new t0(1.4847092112393905e+308, v1, 1.7092563413447216e+308, v1);
} catch (e) {}
try { v3(v1, 1.4847092112393905e+308, v3, 1.7092563413447216e+308); } catch (e) {}
v1 = 1.7092563413447216e+308;
let v6;
try { v6 = ("getFloat32")["getFloat32"](); } catch (e) {}
function f7() {
    return v1;
}
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    function f16(a17) {
        new Float64Array();
    }
    Object.defineProperty(this, "e", { configurable: true, set: f16 });
    this.e = a15;
    try {
        this.e = 0.8494624328937617;
    } catch(e20) {
    }
    try {
        a13?.[1.4847092112393905e+308];
        let {"d":v22,"h":v23,} = v3;
        a13 % f7;
        for (let v25 = 0; v25 < 32; v25++) {
            a14["p" + v25] = v25;
        }
        this.h = a14;
    } catch(e28) {
    }
}
Math.trunc(~27888);
~v6;
v6.atanh(27888);
const v37 = new F11(1.7092563413447216e+308, NaN, 1.4847092112393905e+308);
new F11(1.4847092112393905e+308, v37, 1.7092563413447216e+308);
new F11(1.4847092112393905e+308, 1.4847092112393905e+308, v1);
const v42 = new Int16Array(12);
v42.fill();
