new Uint8ClampedArray(127);
const v8 = new Int8Array(0);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = a13[1];
    try {
        with (a11) {
            F9(v15, a14);
        }
    } catch(e17) {
    }
}
const v18 = [1,2147483647,268435440,-2,536870889];
const v19 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
try {
    v19.forEach();
} catch(e21) {
    e21.a = e21;
}
let v22 = [-1024,-1612632669,6];
[269479904,-2147483648];
h = v18;
try {
const t0 = 0;
t0(127, Uint8ClampedArray, "stringify", v8);
} catch (e) {}
new Float32Array(1024);
for (const v29 of "setUTCSeconds") {
    try {
        v29.h = v29;
    } catch(e30) {
        /a$\P{Decimal_Number}/gvdims.source;
        function F33() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F36(a38, a39) {
            if (!new.target) { throw 'must be called with new'; }
            a38.trimLeft().strike();
            const v42 = this.constructor;
            try { new v42("a"); } catch (e) {}
        }
    }
    const v44 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
    const v45 = /[(?:a*)*]/u;
    switch (v44) {
        default:
            let v46;
            try { v46 = v44(); } catch (e) {}
            try { v46(); } catch (e) {}
            break;
        case v45:
    }
}
new Int8Array(5);
new Int32Array(1);
const v55 = new Uint8ClampedArray(257);
function f59() {
    v22 = v18;
    const o64 = {
        [-2.3890993596755727](a62, a63) {
        },
    };
    return v55;
}
Uint16Array[Symbol.iterator] = f59;
const v68 = Symbol.iterator;
const o77 = {
    [v68]() {
        let v70 = 10;
        const o76 = {
            next() {
                v70--;
                const v74 = v70 == 0;
                const o75 = {
                    "done": v74,
                    "value": v70,
                };
                return o75;
            },
        };
        return o76;
    },
};
new Uint16Array(Uint16Array);
new Float32Array();
new BigUint64Array(255);
Math.sinh(0);
function* f91(a92, a93, a94, a95) {
    return a93;
}
class C97 {
    [null];
}
class C101 extends Int8Array {
    [12];
}
class C103 {
    static #e;
    m(a105, a106, a107, a108) {
        try { new Int8Array(Math, ...a108, this, 1000000.0); } catch (e) {}
        try {
            v8.h = -1000000.0;
        } catch(e114) {
        }
        v22.#e;
        a106.#e = -1;
    }
}
