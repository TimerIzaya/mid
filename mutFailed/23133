const v0 = [-1.0,-407827.5099182958,180640.04498247034,-748154.6415466445,-2.0,9.347040313376662e+307,539.2965554977688,-231.90812568836975,-1000000000.0];
const v1 = [-0.0,142.05838950395196,-615201.5830857198,-8.907313430462605e+307];
const v2 = [9.728231488310143e+307,-9.993717237691529,1.060637281237927e+307,Infinity];
function f3(a4) {
    try { v0.forEach(a4, a4); } catch (e) {}
    function f7() {
        return 154;
    }
    class C8 extends f7 {
        constructor(a10) {
        }
    }
    return v0;
}
v2[Symbol.toPrimitive] = f3;
function f14(a15, a16) {
    a15[Symbol.toPrimitive] = f14;
    a16.toString = Symbol;
    const o24 = {
        "a": v1,
        "b": a15,
        [a16](a20, a21) {
            try { new a15(v2); } catch (e) {}
            try {
                v0.f = a21;
            } catch(e23) {
            }
            return a20;
        },
        "c": v1,
    };
    return o24;
}
const v25 = f14(v2, v0);
f14(v25, v1);
f14(v25, v2);
new Int32Array(3);
new Int16Array(257);
new Int8Array(3372);
const v37 = [];
v37[Symbol.toPrimitive] = Symbol;
const v40 = [v37,v37,v37];
function f41() {
    return Symbol;
}
function f42(a43) {
    %VerifyType(v1);
}
Object.defineProperty(v40, "toString", { enumerable: true, get: f41, set: f42 });
const v44 = [v40,v40];
function f45() {
    return f3;
}
function f46(a47) {
    Math.cos(257);
}
Object.defineProperty(v44, Symbol.toPrimitive, { configurable: true, get: f45, set: f46 });
const v54 = new Uint32Array();
new BigInt64Array(1000);
const o59 = {
};
function f60() {
    return f45;
}
function f61(a62) {
    const v64 = new Uint8ClampedArray(64);
    new Int8Array(v64);
}
Object.defineProperty(o59, "toString", { configurable: true, get: f60, set: f61 });
delete o59[6];
v54[o59] |= 64;
v44 >= Uint16Array;
Object.defineProperty(v44, "g", { writable: true, configurable: true, enumerable: true, value: Int16Array });
