const v0 = [-24647,1073741824];
function f1() {
    function f2() {
        const v3 = [v0,v0,v0,v0,v0];
        return [v3,v3,[v0,v3],v3,v3];
    }
    return f2;
}
Object.defineProperty(v0, Symbol.toPrimitive, { enumerable: true, get: f1 });
const v8 = [1073741823,4294967296,-65536,-1073741824,-1332065663,268435441,-9223372036854775808,256];
[206632359,5,6];
class C10 {
    static get d() {
        [0,10,9007199254740992,-12,-33726];
        [10000,-15,-4294967296,57995,536870888,36184255,13,-1073741824,899591578,15];
        [9,-1287576632,9007199254740991,1984756837,28769,2147483649];
        return v8;
    }
    [v8];
    static [v8] = v0;
    static #a = v0;
    [v0];
}
const v18 = new C10();
const v19 = new C10();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
const v22 = new C10();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
[-8.767866388836964,-744.0376190924601,-1000000.0,1.0,1.0,Infinity,-2.2250738585072014e-308];
[-1e-15,-1000.0,4.897240566023566,-0.5656895013042629];
[1.0583885012993318e+308];
4 % 4;
const v31 = new BigUint64Array(4);
v31[1];
11 - 11;
const v36 = new Int16Array(11);
v36.byteOffset;
new Uint32Array(64);
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
}
class C47 {
    static get g() {
        try {
            var a = super.subarray();
        } catch(e50) {
        }
    }
}
C47.b = C47;
const v51 = new Map();
try { v51.set(v18, v31); } catch (e) {}
const v54 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
try { v54.entries(); } catch (e) {}
for (const v56 in v54) {
    try { ("NFKC").codePointAt(Map); } catch (e) {}
    ("-2").normalize("NFKC");
}
-1000.0 & -1000.0;
new Map();
let v67 = WeakMap.length;
v67--;
class C69 extends WeakMap {
    536870887;
}
const v72 = new Int32Array(2917);
v72[380];
try { v72.reduce(WeakMap); } catch (e) {}
("lastIndexOf")[7];
v72["lastIndexOf"](10);
const v81 = -1.7976931348623157e+308 - -1.7976931348623157e+308;
v81 % v81;
try { ("symbol").big(); } catch (e) {}
("lastIndexOf").localeCompare("lastIndexOf", "symbol", "lastIndexOf");
gc.length = gc;
try {
} catch(e87) {
}
function F88(a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
}
function F92(a94, a95) {
    if (!new.target) { throw 'must be called with new'; }
}
