const v0 = [-2,4294967296];
function f1(a2, a3) {
    [a2];
    function F5(a7, a8, a9) {
        if (!new.target) { throw 'must be called with new'; }
        const v10 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
        const v16 = new Uint32Array(2128);
        for (let v17 = 0; v17 < 100; v17++) {
            const o19 = {
                [-9007199254740991]: 512,
                [v16]: v10,
            };
        }
        [];
        [-4563];
    }
    return F5;
}
v0.toString = f1;
const v24 = [-1422,-4294967297,255,65536,1257882689,1591727556,-6];
const v25 = [13,536870887,-20812,-2006948978];
class C26 {
    set c(a28) {
        ({"h":a28,...a28} = this);
        try { v25.toSpliced(v0, v25, this, v25, this); } catch (e) {}
    }
    static {
    }
    constructor(a35) {
        new Float32Array(127);
        new Uint32Array(5);
        new Uint8ClampedArray(4091);
    }
}
new C26(v25);
const v46 = new C26(v24);
new C26(v24);
[-536870912,-33592,22582,256,-12,257,16,536870912];
[536870889,58155,512,2064952958,9007199254740990];
[3,-1,-4294967296,-250220261,16,-59429,9007199254740991,9223372036854775807,4];
function f56() {
    return Uint32Array;
}
function f57(a58) {
    Array(4087);
}
Object.defineProperty(Uint32Array, 3, { configurable: true, get: f56, set: f57 });
new Uint32Array(9);
new Uint8ClampedArray(1);
new Uint32Array(126);
function f69(a70, a71, a72, a73) {
    for (let v74 = 0; v74 < 77; v74++) {
        const v75 = new C26(v74);
        for (let v76 = 0; v76 < 32; v76++) {
            v75["p" + v76] = v76;
        }
    }
    return a70;
}
f69[1] = v0;
function f79(a80, a81, a82, a83) {
    function f84() {
        function f85() {
            return 9;
        }
        return f85;
    }
    Object.defineProperty(a80, "valueOf", { value: f84 });
    function f86() {
        Uint8ClampedArray & Uint8ClampedArray;
        Uint8ClampedArray << f86;
        ~(f86 * v25);
        return f86;
    }
    const v93 = f86.length;
    const v94 = v93 + v93;
    const v96 = new Int8Array(a80);
    const v97 = v96.buffer;
    v97.constructor = f56;
    function f98(a99) {
        return a99;
    }
    f98.constructor = f69;
    f98.constructor;
    const v101 = v97.slice(v93, a81);
    function f102(a103) {
        v101.slice(a103, v94);
        return f79;
    }
    return v94;
}
Object.defineProperty(f79, Symbol.toPrimitive, { value: f1 });
%PrepareFunctionForOptimization(f79);
Uint32Array[3] = v46;
const o110 = {
    "execution": "async",
    "type": "major",
};
gc(o110);
f79(f69, f79, f79, f69);
%OptimizeFunctionOnNextCall(f79);
f79(f79, f79, f79, f69);
