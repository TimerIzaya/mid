function f0() {
    let v1 = 268435439;
    const o17 = {
        "b": v1,
        ..."constructor",
        next() {
            v1--;
            const v7 = v1 == 0;
            const o8 = {
                "done": v7,
                "value": v1,
            };
            return o8;
        },
        ["constructor"]: v1,
        valueOf(a10, a11) {
            try {
                super.setInt8("constructor", this, 0.8664789581875417, "getUTCMilliseconds", this);
            } catch(e16) {
            }
            return "ULqV";
        },
    };
    o17.toString = f0;
    return o17;
}
const v18 = f0();
const v19 = f0();
const v20 = f0();
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = v18;
    try {
        this.a = v19;
    } catch(e25) {
        const v26 = [1000000.0,4.0,877990.5497759602,-506457.5906391711,1.5877136832764825e+308,-5.0,0.37988723353754195];
        const v27 = [-2.2250738585072014e-308,4.258971338651328e+307];
        class C29 {
            #valueOf(a31, a32) {
            }
            static #a = v27;
            #g = a24;
            static #f = v26;
            #b;
        }
    }
}
new F21(v19, v20);
new F21(v20, v18);
new F21(v20, v19);
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = v18;
    function f42(a43) {
        new Float32Array(250);
        return a43;
    }
    a41.toString = f42;
    try {
        this.g = a40;
    } catch(e47) {
    }
    try {
        const v48 = a39[v20];
        class C49 {
        }
        const v51 = new v48();
        let {...v52} = v51;
        this.e = a41;
    } catch(e53) {
    }
    try {
        this.h = F21;
    } catch(e54) {
    }
}
const v55 = new F37(v18, v19, v19);
new F37(v19, v19, v20);
new F37(v19, v20, v18, v18, v55, F37);
const v60 = [-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757];
function f61(a62) {
    function F63(a65, a66) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return v60;
}
v60[Symbol.toPrimitive] = f61;
const v70 = new Uint32Array(v60, Uint32Array, v60);
const v72 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v73 = v72.fill(v72, v60);
const v74 = [601759695];
const v75 = [1073741824,1073741823,1376142744,1073741825];
function f77(a78, a79, a80, a81) {
    function f82() {
        let v83 = Float64Array;
        function f84() {
            return v83;
        }
        function f85(a86) {
            class C87 {
            }
            const v88 = new C87();
            function F89(a91, a92) {
                if (!new.target) { throw 'must be called with new'; }
                ~a92;
                const v94 = this.__proto__;
                const v95 = v94?.constructor;
                try { new v95(v88); } catch (e) {}
                v94.toLocaleString();
            }
            new F89();
        }
        Object.defineProperty(v83, "e", { writable: true, enumerable: true, get: f84, set: f85 });
        v83.e = v83;
        v83 = a79;
        b = v74;
        function F99(a101, a102, a103, a104) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F99();
        const v106 = v60.length;
        try {
            v75.forEach(a79);
        } catch(e108) {
            e108.e = e108;
        }
        const v109 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.e = Symbol;
        const v111 = Symbol.toPrimitive;
        const o115 = {
            toString(a113, a114) {
                a113 *= v111;
                return v60;
            },
        };
        const o134 = {
            "c": -4294967297n,
            [522675525n](a117, a118) {
            },
            "c": v74,
            valueOf(a120, a121) {
                return this;
            },
            [v106](a123) {
            },
            1561843653: v73,
            1073741824: v70,
            "arguments": v109,
            [-4294967297n](a125, a126, a127, a128) {
                class C130 extends Date {
                    static get c() {
                        eval();
                    }
                }
            },
            256: a81,
            ...v74,
        };
        return v72;
    }
    f82();
    eval();
    %OptimizeFunctionOnNextCall(f82);
    return eval;
}
for (let v138 = 0; v138 < 5; v138++) {
    f77(Uint32Array, 522675525n, v138, v73);
}
const v144 = new Float32Array(165);
new Uint16Array(v144);
