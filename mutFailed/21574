const v2 = new Array(255);
function f6(a7, a8, a9) {
    const o23 = {
        [255](a11, a12, a13) {
            -0.0 * -0.0;
            Math.sin(this);
            255 - 255;
            -268435439;
            33535 & this;
            return v2;
        },
        [v2]: a9,
        "h": a7,
        "e": a9,
    };
    return o23;
}
const v26 = f6(f6(f6(Array, f6, "e"), f6, "1073741824"), 255, "findIndex");
class C27 extends Array {
    a;
    #n(a29, a30) {
        [];
        function F33(a35, a36) {
            if (!new.target) { throw 'must be called with new'; }
            const v37 = this?.constructor;
            try { new v37(); } catch (e) {}
            this.c = Map;
            try {
                this.e = 255;
            } catch(e39) {
            }
            try {
                this.a = a35;
            } catch(e40) {
            }
            new Int32Array(v26);
            v37.reverse();
        }
        new F33();
        new F33();
        new Uint32Array(8);
        new Int32Array(257);
        const v55 = new Float64Array(2951);
        return v55;
    }
    static #c = v2;
    1073741825;
}
const t48 = 255;
new t48();
new C27();
new C27();
[-946345318n] > 8n;
