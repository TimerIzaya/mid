const v3 = (-9223372036854775807n)[72];
v3[1] ^= v3;
v3[-256n] = -256n;
for (let v4 = 0; v4 < 32; v4++) {
    v3["p" + v4] = v4;
}
-13 | -13;
5414 | 5414;
const v11 = 5414 / 5414;
v11 >>> v11;
18308 === 18308;
function f15() {
    return -9223372036854775807n;
}
f15.d = f15;
const v16 = [127,9007199254740990,10000,-9,-64014];
try { v16.map(105725320n); } catch (e) {}
[-268435456];
[-50864,28903,1058663716,-9223372036854775807,22560,14,-8,-29942];
new Int32Array(219);
new Int32Array(2835);
new Float32Array(16);
255 >= 255;
255 + 255;
const v33 = BigUint64Array.name;
try { v33.padStart(-256n); } catch (e) {}
try { v33.match(v33); } catch (e) {}
const v36 = new BigUint64Array(255);
const v39 = v36.buffer.slice()?.constructor;
try { new v39(5414); } catch (e) {}
