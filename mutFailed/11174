const v1 = new WeakMap();
class C2 {
    set g(a4) {
        try {
            super.set(ArrayBuffer, this, a4, v1);
        } catch(e7) {
        }
    }
    static {
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = String;
            } catch(e15) {
            }
            try {
                this.h = a13;
            } catch(e16) {
            }
            try {
                this.c = a13;
            } catch(e17) {
            }
        }
        new F11(Reflect, C2);
        new F11(Reflect, WeakMap);
        new F11(Reflect, this);
        Reflect.construct(WeakMap, [this], WeakMap);
    }
    #c;
}
const v23 = new C2();
const v24 = new C2();
const v25 = new C2();
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a31;
    } catch(e32) {
    }
}
new F26(v23, v23, v25, v1);
const v34 = new F26(v23, v24, v23, C2);
new F26(v23, v24, v1, v24);
const v41 = new WeakSet();
let v42 = /(w)/gvdmy;
let v43 = 0;
while (v43 < 7) {
    try { v34.endsWith(); } catch (e) {}
    const o49 = {
        "maxByteLength": 1384348025,
    };
    const v51 = new SharedArrayBuffer(16, o49);
    new BigInt64Array(v51);
    v43++;
}
const v55 = /((ab))/vy;
for (let v56 = 0; v56 < 25; v56++) {
    const v58 = "p" + v56;
    v41[v58] = v56;
    this[v58] <<= v43;
    v23.g;
    e = ("p")[v24];
}
v42 >>= v55;
