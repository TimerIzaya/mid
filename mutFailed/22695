new Int32Array(2);
Int16Array.e = Int16Array;
const v5 = new Int16Array(3765);
let v7 = Uint8Array;
let v8;
try { v8 = new v7(Int32Array, 2171, Int16Array); } catch (e) {}
const v9 = new v7(2171);
v9[298] = v9;
new Date();
function f12() {
    return v5;
}
const v15 = new BigUint64Array(113);
const v16 = v15[38];
197 / 197;
try { new v8(v7, 2171, Uint32Array); } catch (e) {}
new Uint32Array(197);
let v24 = new Int8Array(2547);
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        const v28 = new Float64Array();
        v28[2];
        return v25;
    }
    for (let v30 = 0; v30 < 32; v30++) {
        v15["p" + v30] = v30;
    }
    Date(f26());
    ({"buffer":v24,"byteLength":v7,"byteOffset":f26,} = v24);
    %OptimizeFunctionOnNextCall(v16);
}
