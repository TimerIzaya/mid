const v5 = new Uint8ClampedArray(196);
let v6;
try { v6 = v5.reduce(Uint8ClampedArray); } catch (e) {}
Uint32Array.d = Uint32Array;
const v9 = new Uint32Array(257);
const v10 = v9[185];
const v13 = new WeakMap();
try {
    const v14 = ("m").toLowerCase();
    try { v6.assign(257, v5, v10, v14); } catch (e) {}
    const o18 = {
        "maxByteLength": 1024,
    };
    const v20 = new SharedArrayBuffer(1024, o18);
    new Int16Array(v20);
} catch(e23) {
    function f24() {
        return v6;
    }
    [196,Uint32Array,196,[e23,e23]];
    [f24,v5];
}
new Uint8ClampedArray(1);
const v30 = [0.38057796469390925,-3.0,-518688.06248081743,-2.0,107.8968501375,-400463.65452600387,-222.36741891958593,-1000.0,-5.415934286194992,1000000000000.0];
const v32 = -2 - -2;
const v33 = [-2,-2,-2,-2,-2];
const v35 = [v13];
Reflect.construct(WeakMap, v35, Uint8ClampedArray);
v35[Uint8ClampedArray] = v33;
v13[1073741825] <<= v32;
v30.concat(v33, [v30,-2], true);
