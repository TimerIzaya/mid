new BigUint64Array(3273);
const v8 = new BigUint64Array(187);
const v11 = new Float64Array(2062);
class C12 extends Float64Array {
    static #g;
    n(a14, a15, a16) {
        const v18 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
        function f19() {
            return v18;
        }
        const o32 = {
            valueOf(a21, a22, a23) {
                function f24(a25) {
                    for (let v28 = 0; v28 < 100; v28++) {
                    }
                    return this;
                }
                Worker(f24);
                return Worker;
            },
        };
        super.b = this;
        const v34 = v11["includes"](a15, a14);
        try { v34(v34, this, v34, v34); } catch (e) {}
        function F36(a38, a39, a40, a41) {
            if (!new.target) { throw 'must be called with new'; }
            const v42 = this.constructor;
            let v43;
            try { v43 = new v42(a38, a41); } catch (e) {}
            typeof v43 === "symbol";
        }
        new BigUint64Array(v8, 2062, 187);
        return BigUint64Array;
    }
    4 = 3273;
    #a = 9.656322642808291;
    f = v8;
}
new C12();
new C12();
new C12();
const o52 = {
    ..."1p",
};
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    a57.__proto__.toLocaleString(F54, 1000000000.0, 1000000000.0);
}
const v60 = [o52,o52,o52,o52];
const v62 = 28621 + 28621;
function f63() {
    return v60;
}
const o65 = {
    ...o52,
};
0 >> 0;
try { Reflect.defineProperty(-12); } catch (e) {}
o65.length = v62;
Reflect.apply(f63, v60, o65);
