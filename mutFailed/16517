class C3 {
    constructor(a5) {
        super.a <<= a5;
    }
    static get c() {
        function f7(a8) {
            g = a8;
            const v12 = !2147483648;
            const v13 = 2734 >> 2734;
            let v16 = Reflect.construct(f7, [Reflect], a8);
            v16 >>= 766198.1790362406;
            try { a8(v12, 2147483648, v12, v13, v12); } catch (e) {}
            v13 && v12;
            Math.acos(this);
            return 2147483648;
        }
        return C3(this);
    }
}
const v21 = new C3("1075907405");
function f22() {
    function f23(a24, a25) {
        let [v26] = "1075907405";
        new String(a25);
        return a24 in v21;
    }
    return f23;
}
Object.defineProperty("function", "valueOf", { configurable: true, enumerable: true, get: f22 });
let v30 = 0;
while (v30 < 0) {
    let v33;
    try { v33 = ("1075907405").replace(2734, v30, ...v30, C3); } catch (e) {}
    function f34() {
        return v33;
    }
    v30++;
}
new C3(v21);
const v37 = new C3("function");
for (let v41 = 0; v41 < 5; v41++) {
    function f42() {
        v37[Symbol.split] | v41;
        C3[128] = v37;
        let v48;
        try { v48 = Symbol.bind(v41); } catch (e) {}
        return v48(Symbol, f42, f42, v41, v48);
    }
    v21();
    %OptimizeFunctionOnNextCall(f22);
}
