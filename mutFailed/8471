[];
9007199254740991 >>> 9007199254740991;
const v9 = 9007199254740991 & 9007199254740991;
v9 / v9;
170 >>> 170;
170 >>> 170;
const v17 = new BigInt64Array(170);
try { v17.values(); } catch (e) {}
let v19 = 16;
v19--;
const v22 = new BigInt64Array(v19);
try { v22.slice(v22, 8464); } catch (e) {}
const v26 = new Int16Array(40);
v26[10] = v26;
const v27 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v28 = v27?.map;
try { new v28(-2147483649); } catch (e) {}
Uint32Array.d = Uint32Array;
const v31 = new Uint32Array();
try { v31.entries(); } catch (e) {}
let v33 = -4294967297n;
v33 >> v33;
const v35 = v33--;
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
v37.g = v37;
function f38(a39, a40, a41, a42) {
    -a40;
    -a42;
    const v45 = a39.constructor;
    let v46;
    try { v46 = v45(); } catch (e) {}
    const v47 = v46?.constructor;
    let v48;
    try { v48 = v47(f38, a39, v27, Uint32Array, v45); } catch (e) {}
    v48++;
    function f50() {
        ("Vre")[1];
        const v53 = ("Vre").charAt(v48);
        v53.blink();
        let v55;
        try { v55 = ("Vre").codePointAt(v27); } catch (e) {}
        v55 ^ v55;
        v55 % v55;
        let v58 = Float64Array;
        v58.a = v58;
        v58 = a40;
        b = v27;
        let v59 = v27.length;
        const v60 = v59++;
        const v61 = v60 + v60;
        v61 >> v61;
        try {
            v37.forEach(a40);
        } catch(e64) {
            e64.message = e64;
        }
        const o75 = {
            "c": v33,
            valueOf(a66, a67) {
                return v46;
            },
            1073741824: v31,
            [v33](a69, a70, a71, a72) {
                eval(v53);
            },
        };
        const v76 = o75[1073741824];
        v76.c = v76;
        return v37;
    }
    const v78 = f50()?.values;
    v78.d = v78;
    try { new v78(); } catch (e) {}
    const v81 = Array(v47);
    try { v81.findLast(); } catch (e) {}
    const v84 = Int8Array.of();
    try { v84.entries(); } catch (e) {}
    let v86;
    try { v86 = v84.every(v84, a39, v84, a40, Array); } catch (e) {}
    const v87 = new Int8Array(v86);
    const v89 = v87.buffer.slice();
    const v90 = v89.constructor;
    try { v90.bind(v47); } catch (e) {}
    let v92;
    try { v92 = v90(v89, v86, v35, v84, a39); } catch (e) {}
    try { new Int32Array(v92, v19, v48); } catch (e) {}
    const v95 = new Int32Array(v90, v45, v45);
    v95[0];
    v95.lastIndexOf(a39, a41);
    try { v37["find"](..."find", a42, ...v36, ...v37); } catch (e) {}
    return v33;
}
try { f38(536870889, 8464, 536870889, v35); } catch (e) {}
for (let v101 = 0; v101 < 10; v101++) {
    let v102 = f38(v31);
    v102--;
}
%OptimizeFunctionOnNextCall(f38);
const v104 = f38(Uint32Array);
v104 * v104;
