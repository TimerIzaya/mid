const v4 = new Map();
class C5 extends Map {
    2147483648 = v4;
    constructor(a7) {
        super(v4);
        v4[Symbol.asyncIterator] = this;
    }
    [1340748324n];
    g = 536870887n;
    static 1073741823 = 536870887n;
    b = 536870887n;
}
C5.f = C5;
new C5(3n);
new C5(536870887n);
const v12 = new C5(3n);
function f13(a14) {
    function F15(a17) {
        if (!new.target) { throw 'must be called with new'; }
        0 / 0;
    }
    return C5;
}
v12[Symbol.toPrimitive] = f13;
~C5;
try {
    v12.f = Map;
} catch(e29) {
}
5 ^ 5;
try { new Uint8Array(Map, C5, Uint8Array); } catch (e) {}
const v34 = new Uint8Array(5);
try { v34.filter(536870887n); } catch (e) {}
new Int32Array(9);
Int16Array.prototype = Int16Array;
const v41 = new Int16Array(3728);
try { v41.slice(5, v12); } catch (e) {}
function F43(a45) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f13;
    const v47 = this.constructor.arguments;
    v47.a = v47;
}
const v48 = new F43();
for (let v49 = 0; v49 < 25; v49++) {
    new Float32Array(822);
    new Int8Array(4096);
    new Float32Array(1);
}
const v59 = v48?.propertyIsEnumerable;
try { new v59(v4); } catch (e) {}
