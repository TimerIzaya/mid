class C1 {
}
function f2() {
}
const v3 = [601759695];
const v4 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    a8--;
    a10 === a10;
    function f14() {
        return 522675525n;
    }
    f2();
    const v17 = new Int8Array();
    const v18 = v17.buffer;
    2147483648 >>> 2147483648;
    v18.slice(2147483648);
    %OptimizeFunctionOnNextCall(f14);
    let v23;
    try { v23 = v4["find"](..."find", a10, ...v3, ...v4, ...522675525n); } catch (e) {}
    const v24 = v23 <= a9;
    v24 && v24;
    return arguments;
}
for (let v26 = 0; v26 < 10; v26++) {
    f6(v26, v26, f2, 522675525n);
}
class C30 {
    set e(a32) {
        const v33 = [this,a32,a32];
        [0.4751714325390761,a32,v33,v33,[-3,v33,0.4751714325390761,this]];
        class C39 {
            get b() {
                const v41 = ("B")[21];
                try {
                    this.e = "B";
                } catch(e42) {
                }
                return v41;
            }
            static [2.0];
            static #g;
            g = "d";
        }
        new C39();
    }
    static a;
    static #p(a45) {
        const v46 = delete a45?.a;
        try {
            ("O").#p(this);
        } catch(e48) {
        }
        return v46;
    }
}
try { new C30(); } catch (e) {}
new C30();
new C30();
new C30();
let v56 = -508096505n;
v56--;
-13n & -13n;
9n ^ 9n;
new Map();
const v69 = [5,5];
v69.g = v69;
v69.concat(5);
1073741824n << 1073741824n;
Float64Array.length;
BigUint64Array.prototype;
/D5dq[\0]/gdmsy;
