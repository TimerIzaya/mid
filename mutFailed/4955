new Int32Array(3236);
try { new Float32Array(3236, 3236, 6); } catch (e) {}
const v6 = new Float32Array(6);
Float32Array.name = Float32Array;
const v9 = new Float32Array(127);
try { v9.filter(Float32Array); } catch (e) {}
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new F11();
    } catch(e19) {
    }
}
Math.atan2(-0.0, -0.0);
Math.sinh(0);
const v28 = -9223372036854775808 >> 127;
-9007199254740992 - -9007199254740992;
class C34 {
    static {
        for (let v39 = 0; v39 < 32; v39++) {
        }
        const v46 = Promise.reject(Promise);
        function F48(a50, a51) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v52 = new F48(512, 10000);
        const v53 = new F48();
        const v55 = new Uint32Array(v46, 36002, 4);
        [v53,v52,v55[0.29489550717955537]];
    }
}
try { C34.call(Int32Array); } catch (e) {}
function F59(a61) {
    if (!new.target) { throw 'must be called with new'; }
}
const v62 = new F59();
class C64 {
}
const v65 = new C64();
const o66 = {
};
const v67 = new C64();
function f68(a69, a70) {
    new Float64Array(-1842215645);
    new Uint8Array();
    new Uint8ClampedArray();
    const v77 = [];
    try { v77.with(); } catch (e) {}
    const o86 = {
        [v67](a80, a81, a82) {
            super[-9223372036854775807];
        },
        set b(a85) {
        },
        [a70]: v65,
        "d": v62,
        [-9223372036854775807]: o66,
    };
    return v65;
}
f68();
const v88 = new C34();
const v89 = v88?.constructor;
try { new v89(); } catch (e) {}
function f91(a92, a93, a94) {
    const o97 = {
        8: Float32Array,
        4: v6,
        ...v88,
        "maxByteLength": v28,
        163: -9223372036854775808,
        "type": "function",
        set a(a96) {
            a96.h = this;
        },
        1838408335: a93,
        ...a92,
    };
    o97[1838408335] = o97;
    try {
    } catch(e98) {
    }
    function f99() {
        const v103 = Symbol.toPrimitive.description.codePointAt();
        return v103 >> v103;
    }
    f99();
    %OptimizeFunctionOnNextCall(f99);
    return o97;
}
f91(f91());
