([856188205,5])[1];
[1073741824,-47697,2,-9007199254740992,256];
[11,-9,255,4294967297,65535,-9223372036854775808,-64214,1700838500];
~-4294967295;
let v10 = 9007199254740992;
v10--;
v10 >>> v10;
const v15 = new BigUint64Array(2);
v15[1];
0 & 0;
try { new Int8Array(v10, -2, Int8Array); } catch (e) {}
new Int8Array(0);
4 >>> 4;
Float32Array.b = Float32Array;
const t14 = 65536;
const v25 = new t14(4);
function F26() {
    if (!new.target) { throw 'must be called with new'; }
}
const v28 = new F26();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
const v31 = [F26,F26,F26];
function f32(a33) {
    a33.d = a33;
    try {
        v31.some();
    } catch(e35) {
        e35.g = e35;
        const v36 = e35.stack;
        try { v36.bold(); } catch (e) {}
        let v38;
        try { v38 = v36.isWellFormed(); } catch (e) {}
        v38 && v38;
    }
    return a33;
}
try { f32.toLocaleString(); } catch (e) {}
v31.toString = f32;
const o42 = {
    __proto__: v25,
    "e": v28,
    get a() {
        return this;
    },
};
o42.a = Float32Array;
const v43 = o42.toString(F26, o42);
try { new v43(); } catch (e) {}
