let v2 = "0";
class C3 {
    valueOf(a5, a6) {
        let v4 = this;
        if (a5) {
            [v4] = v2;
        } else {
            let v8 = 128;
            v8++;
            Math.asin(1145294441);
            let v11 = ~1145294441;
            !1145294441;
            v11--;
            -v11;
        }
        return a6;
    }
}
const v15 = C3?.constructor;
try { new v15(1.4201575154524129); } catch (e) {}
const v17 = new C3();
function f18() {
    function f19() {
        return Math.round(f19);
    }
    return 1.4201575154524129;
}
Object.defineProperty(v17, Symbol.toPrimitive, { enumerable: true, value: f18 });
const v24 = new C3();
const o25 = {
};
o25.h = o25;
const v27 = new Proxy(C3, o25);
v27.e = 1145294441;
v27.e = v27;
let v28 = -330265832n;
v28--;
const v32 = 5n > 5n;
const v33 = new C3();
class C34 {
    a = C3;
    #m(a36, a37) {
        try { v17.valueOf(a36, a37); } catch (e) {}
        v2 ||= v2;
        a36 >>>= v24;
        for (const v39 in v33) {
            Reflect.construct(Proxy, [Reflect,this], Proxy);
        }
        return 1.4201575154524129;
    }
    d;
    static #valueOf(a44, a45, a46, a47) {
        const v49 = C34 != a45;
        try {
            o25.a = v49;
        } catch(e50) {
        }
        new BigInt64Array(64);
        new Int32Array(129);
        new BigInt64Array(128);
        return C34;
    }
    c = v24;
    #b = v33;
    static c = 1.4201575154524129;
}
C34.c;
new C34();
const v62 = new C34();
const v63 = v62?.a;
try { new v63(); } catch (e) {}
const v65 = new C34();
v65.constructor = Symbol;
const v66 = v65?.constructor;
try { new v66(); } catch (e) {}
function f70(a71, a72, a73) {
    a71 == a71;
    a72 << a72;
    try { a73(a73, 1.4201575154524129, a71); } catch (e) {}
    this.onmessage = v32;
    function f78(a79) {
    }
    const v80 = f78?.constructor;
    try { new v80(5n); } catch (e) {}
    this.onmessage = f78;
}
[v65,"number"];
f70("function", 1.4201575154524129, f70);
%PrepareFunctionForOptimization(f70);
f70("function", 1.4201575154524129, f70);
f70("function", 1.4201575154524129, f70);
%OptimizeFunctionOnNextCall(f70);
f70("function", 1.4201575154524129, f70);
Worker.toString = f70;
const t94 = "function";
t94[4] = "function";
const o89 = {
    "type": "function",
};
const v90 = new Worker(f70, o89);
const v91 = [-5];
v91[0];
const t101 = [298054943,4294967295,-268435456,31288,2147483649,-1024,-1073741824,-8358,268435439,2147483647];
t101[5] = v91;
("number").trimEnd();
function f95() {
}
f95.arguments = f95;
Worker.length;
const o98 = {
    [Worker]: v62,
    "a": 1145294441,
    [v17]: f70,
    ...v90,
    ...v65,
    "type": "function",
};
o98.arguments = 1.4201575154524129;
const v99 = new Worker(f95, o98);
try { v99.terminateAndWait(); } catch (e) {}
try { v99.terminateAndWait(); } catch (e) {}
