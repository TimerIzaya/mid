[];
/(?<=a)+/udim;
/(?:a+)?/gds;
const v3 = /[\p{Nd}]/vim;
[9007199254740991];
[-536870912,428426316,2,-18024,9223372036854775807,-65535];
[2];
const v10 = [];
const v11 = [v10];
class C13 extends Map {
    constructor(a15, a16) {
        super(v11);
    }
}
const v17 = new C13(v10, v11);
const v18 = new C13(v11, v17);
const v19 = new C13(v18, v17);
const v23 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v25 = new Uint32Array();
let v26 = -4294967297n;
const v27 = v26--;
const v28 = [601759695];
const v29 = [1073741824,1073741823,1376142744,1073741825];
function f31(a32, a33, a34, a35) {
    try { a32.toLocaleString(); } catch (e) {}
    const v37 = a32?.constructor;
    try { v37(); } catch (e) {}
    try { v37(); } catch (e) {}
    const v41 = arguments.length;
    Object.defineProperty(v17, "e", { configurable: true, enumerable: true, value: f31 });
    try { a35.allSettled("entries", v18, v3, v3); } catch (e) {}
    v23 / a33;
    let v49 = ~(~v23);
    --v49;
    Math.acosh(-3);
    const v52 = v18["entries"](a34, ...v19, BigUint64Array, ..."entries", a33, v41);
    const v54 = Symbol.toStringTag;
    v18[v54] = v54;
    function f55() {
        let v57;
        try { v57 = ("Vre").charAt(4096); } catch (e) {}
        try { v57.lastIndexOf(); } catch (e) {}
        let v59;
        try { v59 = ("Vre").codePointAt(v23); } catch (e) {}
        v59 - v59;
        v59 ^ v59;
        let v62 = Float64Array;
        v62 = a33;
        let v63 = v23.length;
        v63++;
        try {
            v29.forEach(a33);
        } catch(e66) {
            e66.stack = e66;
        }
        const o77 = {
            "c": v26,
            "EPSILON": v28,
            valueOf(a68, a69) {
                return a68;
            },
            1073741824: v25,
            [v26](a71, a72, a73, a74) {
                eval();
            },
            "arguments": 5,
            256: a35,
        };
        return v63;
    }
    f55();
    const v80 = Array();
    let v81;
    try { v81 = v80.findLast(f31, v25); } catch (e) {}
    v80.unshift("entries", v52, "entries", v81);
    let v84;
    try { v84 = Int8Array.of(); } catch (e) {}
    try { v84.join(v37); } catch (e) {}
    const v86 = new Int8Array(v28);
    v86.c = v86;
    const v87 = v86.buffer;
    v87.maxByteLength;
    const v89 = v87.slice(v37);
    try { Int32Array(v89, arguments, v26); } catch (e) {}
    function f92(a93, a94, a95, a96) {
        return a96;
    }
    const v97 = new Int32Array();
    const v98 = v97[3];
    v98 + v98;
    for (let v100 = 0; v100 < 5; v100++) {
    }
    %OptimizeFunctionOnNextCall(f55);
    try { v29["find"](..."find", a35, ...v28, ...v29, ...522675525n); } catch (e) {}
    return a32;
}
for (let v103 = 0; v103 < 10; v103++) {
    f31(v25);
}
%OptimizeFunctionOnNextCall(f31);
f31(v28, v10, v27, f31);
