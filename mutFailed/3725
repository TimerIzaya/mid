const v0 = [0.3125598306469308,-1.876068896695646e+307,-1.4869058025543872e+308,1000000.0,4.0,2.2250738585072014e-308,0.608005626663983,-3.0,-5.003338936826491,5.0];
const v1 = [-1.7976931348623157e+308,-896517.5994546218,-1000000000.0];
const v2 = [1000000000000.0,5.0,527705.3269341595,0.6012254518861613];
function f3() {
    return v0;
}
class C4 {
    static 4294967295 = f3;
    static 7;
    constructor(a6) {
        const v7 = this << this;
        try { this.random(a6, v7, v7, v7); } catch (e) {}
        f3 <= f3;
        function F10(a12) {
            if (!new.target) { throw 'must be called with new'; }
            const v13 = this.constructor;
            v13.bind();
            try { new v13(); } catch (e) {}
        }
        new F10();
        this[-1];
    }
    static #toString(a19) {
        try {
            C4.length = f3;
        } catch(e20) {
        }
        return v2;
    }
}
const v21 = new C4(v0);
const v22 = new C4(v1);
function f24(a25) {
    return a25;
}
class C26 extends f24 {
    static [-1] = 8;
    static [v2];
    static 268435441;
}
const v27 = new C4(v2);
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    class C36 {
        static p(a38) {
            const o45 = {
                valueOf() {
                    super.c |= 1.8503897255003885;
                    try {
                        function f40() {
                            return f40;
                        }
                        const v41 = `
                        `;
                        this.fuck("d", "d", "d", v27);
                    } catch(e44) {
                    }
                    return -128;
                },
            };
            return o45;
        }
        g;
    }
    class C46 extends -128 {
        static n(a48, a49) {
            function F51(a53, a54, a55, a56) {
                if (!new.target) { throw 'must be called with new'; }
            }
            Math.atan(1653620084);
            new Float64Array(1073741824);
            class C63 {
            }
            return -128;
        }
        #c = C46;
        valueOf(a67, a68, a69) {
            super.f;
        }
        constructor(a72, a73, a74, a75) {
            super();
            function f76() {
                const t82 = [];
                t82[6] = 4294967295;
                new Int32Array();
                const o91 = {
                    get b() {
                    },
                    toString(a84, a85, a86) {
                    },
                    m(a88) {
                    },
                    set b(a90) {
                    },
                };
            }
            for (let v92 = 0; v92 < 5; v92++) {
                f76();
                %OptimizeFunctionOnNextCall(f76);
            }
        }
        set f(a95) {
            for (const v96 of a95) {
                try {
                } catch(e97) {
                }
            }
            class C99 extends SharedArrayBuffer {
            }
            const o100 = {
            };
            try {
            } catch(e101) {
            }
            try {
                const o102 = {
                };
            } catch(e103) {
            }
            try {
                const o104 = {
                };
            } catch(e105) {
            }
            try {
                const o106 = {
                };
            } catch(e107) {
            }
        }
    }
    Math.sin(Math);
    new Int16Array();
    new Float32Array(8);
    class C115 extends Int32Array {
    }
    try {
        this.d = a32;
    } catch(e116) {
    }
    try {
        Math.f = f3;
        function f117() {
            return 8;
        }
        C26++;
    } catch(e120) {
    }
}
const v121 = new F28(v2, v22, v21);
new F28(v22, v2, v121);
new F28(v2, v27, C4);
function F124(a126, a127, a128, a129) {
    if (!new.target) { throw 'must be called with new'; }
    new Int8Array(Int8Array);
    ("entries").toUpperCase();
    ~a127;
    v22 | a129;
    const v137 = this.constructor;
    try { new v137(); } catch (e) {}
    typeof Float32Array;
}
new F124();
new F124();
-(536870912n << 536870912n);
class C146 {
    toString(a148) {
        super[this];
    }
}
const v150 = new C146();
const v151 = [C146,C146,C146,C146,C146];
try {
    v151.length = v150;
} catch(e152) {
}
