const v0 = [];
function f4(a5, a6) {
    const o13 = {
        set h(a8) {
            return this;
            try {
                const o10 = {
                };
                RegExp.apply(o10, o10);
            } catch(e12) {
            }
        },
        "e": 2004297363n,
        __proto__: a6,
    };
    return o13;
}
f4(-128n, f4(7n, -128n));
const v16 = f4(7n, v0);
d = 2004297363n;
try {
    new f4(v0, v0);
} catch(e18) {
}
const v22 = [-1.0,0.6913220529619881,4.0];
[805.5357746571024,-371.1547294695022,1.298957682582955e+308,5.0,1.0];
const v24 = [-1000000.0,0.1095312422393816,-88321.47941024089,0.0908977600958436,-4.0399802691277524e+307,1.5181095183870728e+308];
const v27 = new Uint8ClampedArray(2664);
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    function f32(a33) {
        const v35 = new Map();
        function f36(a37) {
            const v38 = a37.toString(v35);
            class C39 extends Map {
                [v38] = f36;
            }
            const v40 = new C39();
            const o41 = {
                ...v35,
                "f": Map,
                "h": a37,
                [-2]: v35,
                ...v40,
            };
            return o41;
        }
    }
    Object.defineProperty(this, "c", { writable: true, set: f32 });
    try {
        this.f = a31;
    } catch(e42) {
    }
    try {
        this.c = 2664;
    } catch(e43) {
    }
}
new F28(7n, v22);
new F28(v16, v0);
new F28(-2135868651, v24);
v27[0] = "asIntN" / "number";
