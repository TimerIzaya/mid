const v2 = new Int16Array(16);
1135 & 1135;
const v6 = new Int32Array(1135);
let v7;
try { v7 = v6.fill(v2); } catch (e) {}
%VerifyType(Int32Array);
try {
    v6.toString = v7;
} catch(e8) {
}
const v11 = Int16Array.length;
const v12 = new Int16Array(256);
class C13 {
    static a;
    constructor(a15, a16) {
        const v17 = this?.__defineGetter__;
        let v18;
        try { v18 = new v17(C13, a16); } catch (e) {}
        try {
            v12.d = v6;
        } catch(e19) {
        }
        let v20;
        try { v20 = v11(...v11, 1135, this, ...v12, this, this); } catch (e) {}
        const v22 = v20 == v20 ? v20 : v20;
        try { v22(1135, v20, v22, v18, v2); } catch (e) {}
        Int16Array < a15;
        super.d = a16;
    }
    #c;
    #e = Int16Array;
}
try { new C13(Int16Array, v6); } catch (e) {}
const v26 = new C13(C13, 1135);
const v27 = new C13(256, 256);
const v28 = v27?.isPrototypeOf;
try { new v28(v26); } catch (e) {}
const v30 = new C13(Int16Array, 256);
v30.d;
const v37 = 3516 >>> 3516;
Uint16Array.name = Uint16Array;
new Uint16Array();
const o44 = {
    "type": "minor",
};
v12[0] = 7n;
const t46 = "minor";
t46[Int16Array] = v37;
const o45 = {
    "apply": Date,
    "call": gc,
    "construct": gc,
    "defineProperty": Date,
    "deleteProperty": Date,
    "get": Date,
    "getOwnPropertyDescriptor": gc,
    "getPrototypeOf": gc,
    "has": gc,
    "isExtensible": Date,
    "ownKeys": Date,
    "set": Date,
    "setPrototypeOf": gc,
};
new Proxy(C13, o45);
gc(o44);
