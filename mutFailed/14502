function f0() {
    const o11 = {
        p(a5, a6) {
            super.b = a5;
            let v7 = a6?.["call"];
            function f8() {
                return "call";
            }
            v7 &&= "IDp";
            try {
                super.now(this);
            } catch(e10) {
            }
            return v7;
        },
        __proto__: "IDp",
    };
    return o11;
}
const v12 = f0();
const v13 = f0();
const v14 = f0();
class C15 extends f0 {
    o(a17, a18) {
        const v19 = v13[2147483648];
        try {
            a18.__proto__ = v12;
        } catch(e20) {
        }
        super.c = a18;
        super.p(a18, v14, v13, v19, a17);
        return v12;
    }
    static [v13] = v14;
    static #a;
    1528 = v12;
    static #b;
}
C15.prototype;
new C15();
new C15();
new C15();
let v31 = -3.0;
v31++;
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this?.E;
    v39.caller;
    try { new v39(-827.9313408818487); } catch (e) {}
    ~a37.length;
    try { this.constructor(); } catch (e) {}
}
F35.f = F35;
new F35(F35);
function f46() {
    let v47 = -65535;
    v47 * v47;
    const o93 = {
        next() {
            v47--;
        },
        m(a52) {
            a52.f = a52;
            try { a52.next(f46); } catch (e) {}
            a52.c = a52;
            a52.h = a52;
            const o54 = {
            };
            o54.h = o54;
            o54.h = o54;
            function f55(a56, a57, a58) {
                return a56;
            }
            f55.caller = f55;
            try {
                o54.e = v47;
            } catch(e59) {
                const v63 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v63, o54);
            }
            try {
                const o65 = {
                };
                o65.h = o65;
            } catch(e66) {
            }
            const v68 = AggregateError?.expm1;
            try { new v68(f55); } catch (e) {}
            try { AggregateError.expm1(128); } catch (e) {}
            let v71 = 2106561805;
            v71++;
            const v73 = v71 >> v71;
            v73 - v73;
            class C75 {
                o(a77, a78, a79, a80) {
                }
            }
            const v81 = C75.name;
            try { v81.codePointAt(AggregateError); } catch (e) {}
            const v85 = new Int8Array(3938);
            let v86 = 3;
            let v87 = 0;
            !v87;
            for (let i = 0; i < 5; i++) {
                [...v86] = v85;
                v87++;
            }
            const o90 = {
            };
            try {
                const o91 = {
                };
            } catch(e92) {
            }
        },
    };
    o93.m(o93);
    const v97 = new Float32Array();
    const t118 = "nt";
    return delete t118[v97];
}
f46();
f46();
