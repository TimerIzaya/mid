const v0 = /a*b|c+/dmy;
const v1 = /BNabc|defuO?/vi;
12204n <= -16;
new Int8Array(3);
const v8 = /[c(?:a?)?]/vdim;
const v11 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v13 = new Uint32Array();
let v14 = -4294967297n;
const v15 = v14--;
const v16 = [601759695];
const v17 = [1073741824,1073741823,1376142744,1073741825];
function f18(a19, a20, a21, a22) {
    const v23 = a19.constructor;
    let v24;
    try { v24 = v23(); } catch (e) {}
    const v25 = v24?.constructor;
    let v26;
    try { v26 = v25(f18, a19, v11, Uint32Array, v23); } catch (e) {}
    function f27() {
        const v29 = ("Vre").charAt(v26);
        v29.blink();
        let v31;
        try { v31 = ("Vre").codePointAt(v11); } catch (e) {}
        v31 % v31;
        let v33 = Float64Array;
        v33 = a20;
        b = v11;
        let v34 = v11.length;
        v34++;
        try {
            v17.forEach(a20);
        } catch(e37) {
            e37.message = e37;
        }
        const o48 = {
            "c": v14,
            valueOf(a39, a40) {
                return v24;
            },
            1073741824: v13,
            [v14](a42, a43, a44, a45) {
                eval(v29);
            },
        };
        return v17;
    }
    f27();
    const v51 = Array(v25);
    try { v51.findLast(); } catch (e) {}
    const v54 = Int8Array.of();
    let v55;
    try { v55 = v54.every(v54, a19, v54, a20, Array); } catch (e) {}
    const v56 = new Int8Array(v55);
    const v58 = v56.buffer.slice();
    const v59 = v58.constructor;
    try { v59(v58, v55, v15, v54, a19); } catch (e) {}
    const v62 = new Int32Array(v59, v23, v23);
    v62.lastIndexOf(a19, a21);
    try { v17["find"](..."find", a22, ...v16, ...v17); } catch (e) {}
    return v14;
}
new String();
function f69() {
    const o74 = {
        ..."D",
        ..."D",
        "c": "D",
        "h": "getHours",
        104: "D",
        get e() {
            return "getHours";
        },
        "d": "getHours",
        1: 4294967296,
        "g": "D",
    };
    return o74;
}
f69();
const v76 = [10,v1,v1];
[-151449179,v76,v8,v0,v76];
v16.toLocaleString();
const v81 = new Uint8ClampedArray(4);
v81.indexOf();
[10,v0,v0,v76];
[8.095257590726818e+307,-3.0,0.24284223827338158,-1e-15,1.0,-456.81921753759286,-3.0,7.015424174417735,0.1508782863337037,-358288.45456548536];
new BigUint64Array(16);
class C88 {
    constructor(a90, a91) {
        try {
            this.fuck(a91, "function");
        } catch(e94) {
        }
    }
}
new C88();
[-5.0,740411.9007181758,2.3940984436188657,2.2250738585072014e-308];
[1.0409447340037745e+308,-8.663877298058082,-0.0,1000000.0,-551.8383312761914,3.0,-2.2250738585072014e-308,-637614.4947747262];
const v99 = new Date();
const v101 = new Set();
v101.add(v99);
Math.sin(-5345);
function F106(a108, a109, a110) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
const v113 = new F106();
v113.e = Uint8ClampedArray;
let [v114,,...v115] = v101;
v114.getUTCMonth(v99, v99, v114, Date, v99);
