let v3;
try { v3 = (141).tan(141, true); } catch (e) {}
const v4 = v3?.[1566034471];
v4[107] = v4;
const v5 = v3?.h;
try { v5["replaceAll"](v3, Uint32Array, "replaceAll", "replaceAll"); } catch (e) {}
let v8 = new Uint32Array(141);
class C11 extends Uint16Array {
    static #c = v4;
    [v3] = Uint32Array;
}
const v12 = new C11();
new C11();
const v14 = new C11();
new Uint16Array(96);
const v18 = v12[Int32Array];
v8 = v5;
let v19;
try { v19 = v18(96, v14); } catch (e) {}
v8?.[v19];
v12[0] = 3281;
new Int32Array(3281);
function F22() {
    if (!new.target) { throw 'must be called with new'; }
}
const v24 = new F22();
const t26 = [v24];
t26[1073741824] = Map;
