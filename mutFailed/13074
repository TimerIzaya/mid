const v2 = new Float32Array(256);
const v5 = new Float32Array(1000);
const v8 = new Uint16Array(2);
class C9 {
    #e;
    static 268435439 = 256;
    static 817 = 2;
    static {
    }
    static {
        for (let v12 = 0; v12 < 10; v12++) {
            function f13() {
                return v12;
            }
            const v14 = [601759695];
            const v15 = [1073741824,1073741823,1376142744,1073741825];
            function f17(a18, a19, a20, a21) {
                function f23() {
                    return a18;
                }
                f13();
                const v26 = new Int8Array();
                function f27(a28, a29) {
                    return a28;
                }
                f27(f27(v15, v2));
                v26.buffer.slice(2147483648);
                %OptimizeFunctionOnNextCall(f23);
                let v36;
                try { v36 = v15["find"](..."find", a21, ...v14, ...v15, ...522675525n); } catch (e) {}
                v36 <= a20;
                return arguments;
            }
            for (let v38 = 0; v38 < 10; v38++) {
                f17();
            }
        }
    }
    get h() {
        this[-1] = Float32Array;
        try {
            this.#e = Float32Array;
        } catch(e41) {
        }
        return v8;
    }
    #valueOf(a43, a44) {
    }
    [v5];
    static #a;
    #f = Float32Array;
    [v2];
    f;
    268435440;
}
new C9();
new C9();
new C9();
[-24359,-1175707914,-3801176,9007199254740992,-15,0,-37142,-4096,-2,257];
[9223372036854775807,-5,-9];
[257];
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    a55 * a55;
    const v57 = this.constructor;
    2 >= 2;
    try { new v57(this); } catch (e) {}
}
const v61 = new F52();
new Date(-118.8024069268339);
const t70 = 2;
const v65 = new t70();
class C66 {
    static g = v65;
    static {
        delete this.g;
    }
}
try { C66.bind(v65); } catch (e) {}
const t79 = v61.constructor;
new t79();
