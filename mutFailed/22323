new WeakSet();
new Uint32Array(3468);
new isFinite(3417);
new BigUint64Array(108);
const v14 = [-0.0,-6.870862097637564e+307,0.21532916327882679,1e-15];
[-4.0,0.4890458233502635,-2.220446049250313e-16,-1000000000000.0,1000000.0];
[-1.2915478122457253e+307,0.275030405671152,-2.4867121049060525e+307,-913060.7357060094,-0.7618465992404033,-1.0,-1.7976931348623157e+308,1.0];
new Uint8ClampedArray(2742);
new Uint32Array(4);
new Uint8Array(19);
[2,9223372036854775807,-18819,-4294967296,-4294967297,-975440104,1670425848,-128,-9007199254740992];
[366564662,16,-4096,2147483648,-64036,512,10,-256,1031782889,-313108339];
[-1871441266];
const v31 = new Uint8ClampedArray(v14, -1073741824, 2742);
v31.byteOffset -= 2742;
const v33 = new URIError();
class C34 {
    constructor(a36, a37, a38, a39) {
        this.constructor = URIError;
        const v40 = this.constructor;
        try { new v40(v33, v40, a39); } catch (e) {}
        for (let v42 = 0; v42 < 5; v42++) {
            v42--;
            v33[v42] = a39;
        }
    }
}
new C34(v33, C34, C34, URIError);
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    eval();
    function F53(a55) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const o57 = {
};
