function f0() {
    class C4 {
        #valueOf(a6, a7, a8) {
        }
    }
    function F9(a11) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return F9;
    const o25 = {
        "type": "setMonth",
        [f0](a13, a14, a15) {
        },
        "b": "setMonth",
        ..."setMonth",
        "h": "setMonth",
        3: 205120823,
        __proto__: "setMonth",
        [205120823]: 205120823,
        ["setMonth"]: 95.41316489098813,
        [205120823](a17, a18) {
            a18[15] = this;
            let v19;
            try { v19 = new a18(this, a17); } catch (e) {}
            try { new v19(a17, v19, "setMonth", v19, v19); } catch (e) {}
            const t25 = 205120823;
            delete t25?.g;
            /CqI(a[bc]d?)?/vdiy;
            /9qa|bc\bK/vdms;
            return /\x01/gudms;
        },
    };
    return o25;
}
f0();
f0();
f0();
new BigInt64Array(16);
function f34(a35, a36, a37, a38) {
    return f0;
}
const v40 = [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
try { v40.group(BigInt64Array); } catch (e) {}
new Int16Array(30);
new Int8Array(628786973);
function f47(a48, a49, a50, a51) {
    function F52(a54, a55, a56, a57) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v58 = new F52();
    const v59 = new F52(f47, f47, F52, v58);
    v59 in v58;
    return f47;
}
new Uint32Array(41);
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    const t57 = "byteOffset";
    t57[4] = Float64Array;
    var a = ~this;
}
class C69 {
}
new C69();
ReferenceError.captureStackTrace(C69);
const v74 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
function f75(a76, a77, a78) {
    return a77;
}
f75(v74);
class C81 {
    #valueOf(a83, a84) {
        return a84;
    }
    #b = 6;
}
const v85 = new C81();
const v86 = new C81();
class C87 {
}
const t80 = (41).constructor;
t80(41);
C87.toExponential(C87);
function F93(a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    a95 % a95;
    this.constructor;
}
new F93(479072.8146426424, 479072.8146426424);
new BigInt64Array(1158, BigInt64Array, v86);
new BigInt64Array();
const v105 = [v85];
class C106 {
    constructor(a108, a109, a110) {
        function f111(a112, a113, a114) {
            v105.copyWithin();
            [Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849];
            new Int32Array(this);
            ([1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164]).concat();
            try {
                function f123() {
                    0 < 10;
                    for (let v129 = 0; v129 < 5; v129++) {
                    }
                    return this;
                }
                %PrepareFunctionForOptimization(F64);
                [];
                f111(252859902);
            } catch(e132) {
            }
            return -(this >> 252859902);
        }
        f111(this, this);
    }
}
class C136 extends C106 {
}
new C136();
const v139 = new Uint8Array(Uint8Array);
const o140 = {
    ...v139,
};
o140[2];
