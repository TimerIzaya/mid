const v0 = [];
const v2 = new WeakSet();
const v3 = [127,0,-1124945753,2,1073741824,536870887,1583440332];
const v4 = [-635389668,268435440,-2147483649,-2147483647,-268435456,9,-1145746103,-2147483647,586817588];
function f5(a6) {
    const v8 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
    return v8;
}
v4[Symbol.toPrimitive] = f5;
const v11 = [9223372036854775807,2147483647,4096,-4294967297,0];
v11.toString = Symbol;
function f12(a13, a14, a15) {
    Object.defineProperty(a15, "toString", { writable: true, configurable: true, value: Symbol });
    const o26 = {
        __proto__: v4,
        ...a14,
        [a15]: a15,
        "e": v4,
        [v4]: v2,
        ...v11,
        ...a15,
        1830633379: v2,
        [a14](a17, a18) {
            const v22 = 9007199254740990 % this;
            this % this;
            Math.sin(v22);
            9007199254740990 ^ 268435440;
            return a14;
        },
    };
    return o26;
}
f12(v11, v11, v4);
const v28 = f12(v4, v3, v11);
const v29 = f12(v4, v0, v0);
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v28;
    } catch(e35) {
    }
}
new F30(v4, v28, v3);
const v37 = new F30(v0, v29, v11);
new F30(v0, v29, v37);
[51956,6,-57811,-1086433376,65535,-9007199254740992,7,1073741824,-8];
[536870888,-65535,129,1073741824,129,4294967296];
[2147483648,-9223372036854775808,4096,1024,28318];
const o47 = {
    "b": 129,
};
const v54 = o47.b;
let {...v55} = v54;
const v56 = (a57, a58, a59) => {
    var h = v54;
    return a59;
};
