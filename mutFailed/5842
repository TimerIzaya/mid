const v1 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
v1[4294967295] = -48557n;
class C2 {
}
const v3 = new C2();
for (let v4 = 0; v4 < 25; v4++) {
    v1[4294967295] = v3;
}
const v7 = [2.590653476287674,0.2574699055928811,-Infinity,1000000000000.0,1000000000.0,0.4669284713647919,920.9239513005555];
const v8 = [0.15991410243904547,1.5628005619569484e+308,1.7976931348623157e+308,0.48696895435749243,0.09772068277449986,1e-15];
const v9 = [1000000000000.0,-1.0278387615840018e+308,-1.6345716074465387e+307,1000000.0,1e-15,219.48158775231695,-985.398808525328,5.0,1000000000.0,-2.0];
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = a14;
    try {
        this.d = a12;
    } catch(e15) {
    }
    try {
        function F17(a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
            a19 % a19;
            a20 >>> this;
            const v23 = this.constructor;
            try { new v23(0.8735699512350641); } catch (e) {}
            this.c = a19;
            this.g = a20;
        }
        this.a = a12;
    } catch(e25) {
    }
}
const v26 = new F10(v9, v8, v8);
function f27() {
    return v9;
}
function f28(a29) {
    let v30 = -1024;
    function F31(a33, a34, a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v37 = new F31(v30, v30, F31, F31);
    const v38 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v39 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
    function F41(a43, a44) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v45 = new F41();
    class C46 {
    }
    const v48 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v49 = [601759695];
    function f50(a51, a52, a53, a54) {
        function f55() {
            let v58 = Float64Array;
            v58 = a52;
            const v59 = v38.length;
            try {
                v38.forEach(v58);
            } catch(e61) {
            }
            const v62 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const v64 = Symbol.toPrimitive;
            const o70 = {
                toString(a66, a67) {
                    const v68 = a54 && v58;
                    a66 *= v64;
                    v68 <= v62;
                    return F41;
                },
            };
            const o91 = {
                "c": -4294967297n,
                [536870889n](a73, a74) {
                },
                "c": v49,
                valueOf(a76, a77) {
                },
                [-4294967297n](a79, a80, a81, a82) {
                },
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v48,
                ...v37,
                [v64]() {
                },
                "type": C46,
                ..."Vre",
                valueOf(a85, a86) {
                    return Symbol;
                },
                ..."Vre",
                4: "Vre",
                toString(a88, a89, a90) {
                    return a88;
                },
                5: -4294967295,
                6: -268435456,
            };
            new Float32Array(1334);
            v30 %= -268435456;
            new Uint32Array(v39, v59, v64);
            v45 - f55;
            try {
                new Float64Array(127);
            } catch(e100) {
            }
            new Float64Array(3);
            new Uint16Array(2);
        }
        const v107 = f55();
        %OptimizeFunctionOnNextCall(f55);
        return v107;
    }
}
Object.defineProperty(v26, "length", { writable: true, get: f27, set: f28 });
const v108 = new F10(v7, v9, v7);
const v109 = new F10(v7, v9, v7);
v109.toString = f27;
function f110(a111, a112) {
    a112.length = a112;
    const o131 = {
        "b": 1636747852n,
        "e": v108,
        __proto__: a112,
        ...v8,
        "a": a111,
        m(a114, a115, a116) {
            try { v109["toString"](v26, "toString", a115, this, 1636747852n); } catch (e) {}
            return v9;
        },
        "d": v26,
        "g": a111,
        [v109]: -48557n,
        ...v8,
        "c": 536870889n,
        p(a120, a121) {
            for (const v122 in v9) {
            }
            return 1636747852n;
        },
        "c": v9,
        "arguments": v8,
        6: a112,
        [f110](a124, a125, a126) {
        },
        set d(a128) {
            this["cos"]();
        },
    };
    o131.length = a112;
    return o131;
}
const v133 = f110(v7, f110(v8, v26));
function f134() {
    return v7;
}
function f135(a136) {
    function F137(a139, a140) {
        if (!new.target) { throw 'must be called with new'; }
        const v141 = this.constructor;
        try { new v141(); } catch (e) {}
        ~a140;
    }
    new F137();
}
Object.defineProperty(v133, "length", { writable: true, configurable: true, get: f134, set: f135 });
f110(v8, v26);
[-63777];
[1500467925,1634586866,0,9007199254740992,1073741825,0,8];
Math.log1p();
function f150() {
    return f150;
}
class C151 extends f150 {
}
class C152 extends C151 {
}
function f154(a155, a156, a157, a158) {
    try { a155(); } catch (e) {}
    a156 & a156;
    const v161 = 3 | C152;
    a155 / (v161 * v161);
    const v164 = a156 < a155;
    const o168 = {
        n(a166, a167) {
            return v164;
        },
    };
    return a157;
}
[-12];
const v172 = new Int32Array(497);
("undefined").localeCompare("undefined", v133, "undefined");
function f176() {
    return f176;
}
Date.UTC(f176, f176, "string");
const v182 = new Int16Array(916);
v172[3] = v182;
