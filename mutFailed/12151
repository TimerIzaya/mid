function f2(a3, a4) {
    a4?.e;
    const v8 = new Uint8ClampedArray(3016);
    try { Float32Array.apply(3016, v8); } catch (e) {}
    return Uint16Array;
}
Uint16Array[Symbol.toPrimitive] = f2;
const v13 = new Uint16Array(70);
function f16(a17) {
    const v18 = [];
    function F19(a21, a22, a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        a21.strike();
        const v26 = this.constructor;
        try { new v26(a24, v18, a22, a24); } catch (e) {}
        a22[2];
    }
    return f2;
}
Uint16Array.toString = f16;
const v29 = new Uint16Array(8);
const v32 = new BigUint64Array(6);
let v33;
try { v33 = v32.toLocaleString(); } catch (e) {}
function f34(a35, a36, a37, a38) {
    a35 >> a35;
    a37 ^ a37;
    const o46 = {
        __proto__: v29,
        ...v29,
        "d": a37,
        [Uint16Array](a42, a43) {
            %VerifyType(BigUint64Array);
            try {
                super.p(a35, a37, a43);
            } catch(e45) {
            }
            return 6;
        },
        3: a37,
    };
    o46[2] = o46;
    return o46;
}
f34(6, 6, 8, v29);
const v49 = f34(8, 70, 8, f34(6, 70, 70, v13));
-9200 - -9200;
class C57 {
    set h(a59) {
        function F60(a62, a63) {
            if (!new.target) { throw 'must be called with new'; }
            const v64 = this.constructor;
            v64.caller;
            try { new v64(this, F60, F60); } catch (e) {}
        }
        new F60(F60, F60);
        new F60();
        a59[-12] = -9200;
        0 instanceof a59;
        129 !== this;
        let v71 = ~-9200;
        v71 = 129;
        const t61 = this[5];
        const v73 = delete t61?.[12];
        try {
        } catch(e74) {
        }
        const v77 = new Int8Array(520);
        for (let v78 = 0; v78 < 5; v78++) {
            v77.indexOf(v78);
        }
        super.g = v73;
    }
    h;
    6;
    #a;
    f = -4;
    8;
    [-12];
}
const v80 = C57?.constructor;
try { new v80(-4); } catch (e) {}
const v82 = new C57();
Object.defineProperty(v82, "g", { configurable: true, enumerable: true, value: v33 });
v82.g = v82;
const v83 = new C57();
try { v83.toString(); } catch (e) {}
const v85 = new C57();
gc();
function F88(a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e92) {
    }
}
try { F88(v49, -9200); } catch (e) {}
class C94 extends C57 {
    static {
    }
}
const o96 = {
};
function f97() {
    return v85;
}
function f98(a99) {
    const v100 = f97();
    try { v100.b(); } catch (e) {}
    const v102 = v100?.b;
    try { v102(); } catch (e) {}
}
Object.defineProperty(o96, "h", { configurable: true, enumerable: true, get: f97, set: f98 });
o96.h = o96;
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
try {
    function f107() {
    }
} catch(e108) {
}
const o109 = {
};
try {
    const o110 = {
    };
} catch(e111) {
    function f112(a113, a114, a115, a116) {
        const o120 = {
            n(a118, a119) {
            },
        };
    }
}
try {
    const o121 = {
    };
    o121.h = o121;
} catch(e122) {
}
try {
} catch(e123) {
    function f124(a125, a126, a127, a128) {
    }
}
