const v0 = [-5.0,-1.040673896147469e+308,1000000000.0];
const v1 = [5.0,-1000.0,1000000000.0,-400700.2218884039,-1000000000.0,2.220446049250313e-16,-1000000000.0,0.7105172094139578,1000.0,1000000000000.0];
const v2 = [Infinity,933.5614094045759,-3.0,-186126.4290432596,-1e-15,-5.656387397508096,-2.220446049250313e-16,813.2043253406332,2.2250738585072014e-308,-4.0];
const v4 = new Map();
let v6 = ("bigint").codePointAt("bigint");
v6--;
function f8(a9, a10) {
    return a10(v6);
}
~-1000000.0;
let v14 = 65535;
v14 | v14;
v14--;
function f17() {
    try { new Array(v4); } catch (e) {}
    const v20 = Array();
    v20[3] = v14;
    return v20.pop();
}
f17.arguments = f17;
try { f17(); } catch (e) {}
-3.821031000459406e+307 * -3.821031000459406e+307;
new BigUint64Array(208);
const v29 = new Uint16Array(Uint16Array);
Int32Array.h = Int32Array;
function f31() {
    let v33 = 1000000000000.0;
    v33--;
    const o38 = {
        "e": Uint16Array,
        __proto__: 3.4890473589784586e+307,
        "g": 12,
        o(a37) {
            return v29;
        },
        ...v33,
    };
    const v39 = o38?.e;
    try { new v39(o38, o38, o38); } catch (e) {}
    try { new v39(o38, v33, o38); } catch (e) {}
    return Int32Array;
}
const v42 = f31();
try { new v42(v42, Uint16Array, Uint16Array); } catch (e) {}
-5.0;
4046 << 4046;
const v50 = new BigInt64Array(4046);
try { v50.every(Int32Array); } catch (e) {}
function f52(a53, a54) {
    a53++;
    function F56(a58) {
        if (!new.target) { throw 'must be called with new'; }
        const v59 = this?.constructor;
        try { new v59(); } catch (e) {}
    }
    class C61 extends F56 {
    }
    C61.length = C61;
    C61.prototype = C61;
    const v62 = new C61();
    const v63 = v62?.__defineGetter__;
    try { new v63(a53, F56); } catch (e) {}
    try { v62.hasOwnProperty(Map); } catch (e) {}
    const v66 = v62.constructor;
    v66.e = v66;
    const o67 = {
    };
    o67.b = o67;
    o67.h = o67;
    for (const v68 in o67) {
        let v69;
        try { v69 = v68.strike(); } catch (e) {}
        try { v69.blink(); } catch (e) {}
    }
    let o71 = {
    };
    o71.h = o71;
    try {
        const o73 = {
        };
        o73.d = o73;
        o73.g = Float32Array;
    } catch(e74) {
    }
    [,...o71] = v50;
    return 4046;
}
f52();
function F76(a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
    a79[7] = a79;
    try { a78.toSpliced(F76, BigUint64Array); } catch (e) {}
    let v81;
    try { v81 = a79.freeze(); } catch (e) {}
    const v82 = v81?.__lookupSetter__;
    try { new v82(F76); } catch (e) {}
    try {
        this.e = a79;
    } catch(e84) {
    }
    150 | 150;
    150 >> 150;
    const o88 = {
        "maxByteLength": 150,
    };
    o88.maxByteLength;
    function f91() {
        return Int8Array;
    }
    try {
        this.c = a78;
    } catch(e92) {
    }
}
new F76(v1, v2);
const v94 = new F76(v1, v1);
v94.e = v94;
const v95 = new F76(v0, v1);
v95.length = v95;
const o107 = {
    __proto__: v50,
    "arguments": v0,
    [4046]: 208,
    [v0](a97, a98, a99) {
    },
    m(a101) {
        a101[3594];
        gc.caller;
        const o105 = {
        };
        o105.c = o105;
        return gc(o105);
    },
};
o107[4046];
const v109 = o107[4046];
v109 << v109;
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const o112 = {
};
const v114 = new Proxy(Uint32Array, o112);
try { new v114(Uint16Array, 5.0, Uint16Array); } catch (e) {}
o107["o"](o107, Uint32Array, "o", "o", v114);
