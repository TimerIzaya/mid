const v2 = new Float32Array(129);
v2.fuck(v2, "function");
const o10 = {
    set d(a6) {
        for (let v7 = 0; v7 < 25; v7++) {
        }
        try { this["cos"](); } catch (e) {}
    },
};
class C11 {
    constructor(a13) {
        o10.d = a13;
    }
}
new C11();
new BigInt64Array(15);
const v19 = ("I").localeCompare();
function F20() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -65536;
    } catch(e23) {
    }
    try {
        this.b = -65536;
    } catch(e24) {
    }
    try {
        this.e = -65536;
    } catch(e25) {
    }
}
const v28 = new BigUint64Array(9);
const v32 = new Float64Array();
let {...v33} = v32;
const v35 = new Float32Array();
new Uint8Array(v35, Uint8Array, Uint8Array);
new Int16Array(4096);
class C39 {
}
const v40 = new C39();
v40[-2];
function f42() {
    const o44 = {
        get c() {
            return this;
        },
    };
    return o44;
}
class C45 extends f42 {
    #toString(a47, a48, a49, a50) {
    }
}
new C45();
new Uint16Array(12);
new Int16Array(1582);
const o64 = {
    0: "1ya",
    162: "1ya",
    "d": v28,
    "execution": v19,
    "type": "function",
    ["I"](a60, a61, a62) {
        super[12];
    },
};
