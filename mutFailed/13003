const v5 = new Int16Array(2);
new BigUint64Array(3149);
new Int32Array(2);
function f13() {
    const v15 = new Uint8ClampedArray(Uint8ClampedArray, f13, Uint8ClampedArray);
    v15[7] = 43464885;
    v15[-1] = 10;
    return v15;
}
f13();
%OptimizeFunctionOnNextCall(f13);
new Float64Array(255);
class C21 extends Float64Array {
    constructor(a23, a24) {
        super(a23, 2, a23);
        super.byteLength = v5;
        super["c"] = Float64Array;
    }
    get c() {
        function f26(a27, a28, a29) {
            const o30 = {
                [a29]: "c",
                __proto__: "c",
                5: this,
            };
            return o30;
        }
        f26(3149, 255, 2);
        f26(3149, 255, 3149);
        class C33 {
            constructor(a35, a36) {
                const o38 = {
                };
                gc(o38);
            }
        }
        f26(2, 2, 255);
        class C42 {
            constructor(a44) {
                const v45 = this.constructor;
                try { new v45(); } catch (e) {}
                ("valueOf").localeCompare();
            }
        }
        const v48 = new C42();
        v48.constructor;
        return Float64Array;
    }
}
new Float32Array();
const v53 = new Map();
v53.delete();
new C21(2, "-12");
new C21(2, "-12");
new C21(2, "c");
const v58 = /[\ca]/ms;
function f61(a62, a63) {
    const o86 = {
        get h() {
            function F65(a67, a68, a69) {
                if (!new.target) { throw 'must be called with new'; }
                class C71 {
                }
                const v72 = new C71();
                const v73 = new C71();
                const v74 = new C71();
                function F75(a77, a78, a79, a80) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v81 = this.constructor;
                    try { new v81(Date, Date, a77, Date); } catch (e) {}
                    a78[2147483648] = a78;
                    a80[2147483648] = a80;
                }
                new F75(C71, v73, v72, v73);
                new F75(v73, v73, v74, v72);
            }
            new F65();
            return a63;
        },
        [a63]: 4,
        2778757984: a62,
        "h": 4,
    };
    return 4;
}
f61(f61, f61);
const v89 = new Map();
function f90(a91, a92, a93, a94) {
    a93.arguments = a93;
    a91[3];
    a93.caller = a93;
    const o102 = {
        n(a97, a98, a99, a100) {
            for (let v101 = 0; v101 < 10; v101++) {
            }
        },
        16: a91,
        ...v89,
    };
    return o102;
}
f61(v58, -65535);
