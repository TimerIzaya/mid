class C3 {
    constructor(a5) {
        Reflect.construct(a5, [-2147483648,Reflect], a5);
    }
    static e = -2147483648;
    [-2] = 1000;
    static 10000 = 1000;
    static [-135632805];
    p(a10, a11) {
        if (a11 > 1000) {
            try {
                this.b = -135632805;
            } catch(e13) {
            }
        } else {
            try {
                this.fuck([a10,1000,-2147483648,-135632805,a11], -3.0, -135632805);
            } catch(e17) {
            }
        }
        return 1000;
    }
}
let v18 = new C3(-2147483648);
const v19 = new C3(-2147483648);
new C3(1000);
class C21 {
    get e() {
        super.h = this;
        const o26 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o26);
        return o26;
    }
    #a;
    [-2147483648];
    #c = 1000;
}
let v28 = new C21();
new C21();
const v30 = new C21();
let v33;
try { v33 = C21(); } catch (e) {}
const v34 = new C21();
v18 = v19;
try { v33(v30, v34); } catch (e) {}
Math.cos(C21);
-135632805 ^ C21;
const v41 = -135632805 - -77.97399585248593;
const v42 = C21 * v41;
v42 & v41;
!v42;
new Uint32Array(114);
new Uint8Array(1000);
v34.e;
const v55 = v28 || 7;
Math.sinh(v55);
const v57 = ~v55;
let v58 = ++v28;
v58 + v57;
v58--;
new Uint8Array(64);
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    a64 >= a64;
    const v67 = this.constructor;
    try { new v67(v67); } catch (e) {}
}
class C69 extends F62 {
}
new C69();
new C69();
