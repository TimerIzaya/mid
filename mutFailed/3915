const v3 = [-18343,10,-9223372036854775808,7,-2,1266834198];
[65536,8,12,-2];
const v5 = [431667931];
class C6 {
    e;
    5 = -65536n;
    constructor(a8, a9, a10, a11) {
        v5[-2] %= a11;
        a11 && this;
    }
    1 = -65536n;
    [-4n] = v5;
    static b = v3;
}
const v16 = new C6(v5, -65536n, -65536n, -381137624n);
new C6(v3, -4n, -65536n, -65536n);
const v18 = new C6(v3, -4n, -4n, -4n);
function f19() {
    return v5;
}
class C20 extends C6 {
    o(a22, a23, a24) {
        for (const v25 in this) {
            try { new a24(a23, C20, v25, a24, -381137624n); } catch (e) {}
        }
        +this;
        const o31 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o31);
        try {
            v3.map(a23);
        } catch(e34) {
        }
        return v18;
    }
    constructor(a36, a37, a38, a39) {
        let v35 = this;
        super(v3, a38, a37, a37);
        v35 = a39;
        function F40(a42, a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a43;
            } catch(e45) {
            }
            try {
                this.g = -381137624n;
            } catch(e46) {
            }
        }
        new F40(-381137624n, -381137624n, a38);
        new F40(-65536n, a38, a38);
        new F40(a38, a38, a38);
    }
}
new C20(v16, -4n, -381137624n, C20);
const v51 = new C20(v18, -65536n, -65536n, v18);
new C20(C20, -4n, -381137624n, v51);
const v55 = new Uint8ClampedArray(995);
for (let v57 = 0; v57 < 32; v57++) {
    C6["p" + v57] = v57;
}
const v60 = new Int8Array(v55);
const v61 = v60.copyWithin;
try { v55.some(v61); } catch (e) {}
