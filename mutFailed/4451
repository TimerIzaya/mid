let v0 = 10;
Float64Array.e = Float64Array;
const v2 = new Float64Array(v0);
let v3 = 3692;
const v4 = v2.constructor;
v4.e = v4;
function F5(a7, a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const v12 = new Int32Array(257);
    function f13(a14, a15, a16, a17) {
        let v19 = new Map();
        [...v19] = v12;
        let [...v20] = v12;
    }
    f13();
}
v3--;
const v24 = new Int8Array(v3);
const v27 = new Uint8Array(1063);
function f28(a29) {
    try { v4(a29, a29, a29, v3); } catch (e) {}
    v0 %= v4;
    return Float64Array;
}
v27.valueOf = f28;
v27[103] = v27;
-9223372036854775807 / -9223372036854775807;
function f35(a36, a37) {
    a37--;
    a36--;
    const v40 = a37 * a37;
    class C41 extends Uint8Array {
        h = v40;
        static [-2] = v0;
    }
    const v42 = C41?.from;
    try { new v42(-9223372036854775807); } catch (e) {}
    const v44 = new C41();
    try { v44.findLastIndex(a36); } catch (e) {}
    const v46 = new C41();
    v46.constructor = f28;
    const v47 = v46?.constructor;
    try { new v47(); } catch (e) {}
    new C41();
    const o60 = {
        "c": a37,
        [v27](a51, a52, a53) {
            try { v24.join(a36); } catch (e) {}
            this[268435441];
            v2.byteOffset;
            this[a53] >>= a36;
            const v57 = [a53];
            const v58 = [v57];
            [v57,v58,v58,v27,this];
            return a52;
        },
        "g": 9007199254740991,
        "d": a36,
    };
    o60.b = -9223372036854775807;
    o60.c = o60;
    return o60;
}
f35.length = f35;
f35(v3, 9007199254740991);
f35(v3, 9007199254740991).c;
const v64 = f35(1063, -9223372036854775807);
Object.defineProperty(v64, "b", { configurable: true, value: 0 });
v64.b = v64;
v64.d = v64;
const v65 = [2.220446049250313e-16,4.688311165693396,-4.0];
v65.toString = f35;
for (let v66 = 0; v66 < 25; v66++) {
    const o68 = {
        __proto__: v65,
        [v65]() {
        },
    };
}
v65[8];
const v70 = [0.0,Infinity];
v70[1] = v70;
try { v70.find(v24); } catch (e) {}
