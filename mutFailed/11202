function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 1073741825;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
new F0();
const v7 = [286977509,536870889,-380982641,1073741825,-14496,-9223372036854775807];
const v8 = [64918,-21903,65536,-65537,-9007199254740991,268435440];
v8.undefined = v5;
const v9 = [11287,256];
class C16 {
}
function f17(a18, a19) {
    const v23 = new Uint32Array(381);
    const v24 = new Float32Array(v23);
    return v24;
}
C16.toString = f17;
const v25 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
v25.constructor = f17;
function f26(a27, a28, a29, a30) {
    const v31 = a29?.constructor;
    const v32 = /(?:a*)+q(?<a>.)/guds;
    v32.unit = a27;
    v32.dotAll = v32;
    function f33(a34) {
        const v35 = v25.constructor;
        try { v35.isArray(v32); } catch (e) {}
        a34.constructor.$2.replaceAll(C16, a27);
        return a34;
    }
    for (let [i69, i70] = (() => {
            const v41 = [];
            function f42() {
                let [] = [];
                return 0;
            }
            v41[Symbol.toPrimitive] = f42;
            Object.defineProperty(v9, v41, { configurable: true, get: f33 });
            0 && v41;
            v41.length >>= 536870912;
            v7.toLocaleString(f33, v32, a27, ...v8, ..."toString", -2147483648);
            function f48(a49, a50) {
                return a29;
            }
            for (let i52 = 0; i52 < 6; i52++) {
                v8[a28];
                v32["exec"]("exec");
            }
            v32.constructor;
            const o63 = {
            };
            const v65 = [-1000.0,1000000.0,2.220446049250313e-16,614071.3005355855,-1.0,2.220446049250313e-16];
            v65[301] = v65;
            v65[301] = -536870912;
            const o66 = {
            };
            new Proxy(v65, o66);
            return [0, 10];
        })();
        (() => {
            const v71 = i69 < i70;
            !v71;
            return v71;
        })();
        (() => {
            i70--;
            const v77 = Symbol.toPrimitive;
            const o84 = {
                [v77]() {
                    v77["isArray"]();
                },
                [v77]() {
                    const o83 = {
                        next() {
                            return v32;
                        },
                    };
                },
            };
        })()) {
        for (let v87 = 0; v87 < 10; v87++) {
            f33(v32);
            const v89 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
            let v90 = [601759695];
            function f91() {
                const o97 = {
                    ...v89,
                    get b() {
                        v31.__proto__;
                        const v94 = v90++;
                        try {
                            new f33(v94);
                        } catch(e96) {
                        }
                        return v87;
                    },
                    "c": v87,
                };
                return v90;
            }
            class C98 {
                #a;
                valueOf(a100, a101) {
                }
                toString(a103) {
                }
                static f;
            }
            const v104 = new C98();
            class C107 extends C98 {
                #n(a109, a110, a111, a112) {
                    super[403343340n];
                }
                static #toString(a115, a116) {
                    v104[-2126520711n] = this;
                }
            }
        }
        [196330.99080480286,-1000000000.0,5.0,-1000000.0,-1.3661500326728674e+308,-735361.45302493,0.07703356362627845];
        [1000000.0,-2.2250738585072014e-308,-5.423333572838769,-2.2250738585072014e-308,-1000000000.0,0.14308021560425055,1000000000000.0];
    }
    function f121() {
    }
    return f121;
}
for (let v122 = 0; v122 < 10; v122++) {
    try {
        v7.length = 9007199254740991;
    } catch(e123) {
    }
    f26();
}
%OptimizeFunctionOnNextCall(f26);
f26();
