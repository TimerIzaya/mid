const v2 = new BigInt64Array(127);
159 >>> 159;
let v6;
try { v6 = new Uint32Array(159, Uint32Array, 159); } catch (e) {}
let v7;
try { v7 = v6.slice(127, v2); } catch (e) {}
new Uint32Array(159);
BigUint64Array.name = BigUint64Array;
const v11 = new BigUint64Array(v7);
function f12(a13, a14) {
    let v15 = a13 % a13;
    v15--;
    a13 % a13;
    const o26 = {
        "d": BigUint64Array,
        [BigUint64Array]: a13,
        ...v2,
        "b": a13,
        __proto__: v2,
        ...v2,
        [a14](a19, a20, a21, a22) {
            try {
                try { v11.set(v2, a13); } catch (e) {}
            } finally {
                delete v11[v2];
                try {
                    this.valueOf = a22;
                } catch(e25) {
                }
            }
            return a20;
        },
    };
    try { o26.indexOf(v6); } catch (e) {}
    o26[4];
    return o26;
}
f12(9, 9);
const v30 = f12(127, 9);
v30[69];
const v32 = f12(127, 127);
try { v11.codePointAt(v30); } catch (e) {}
let v35;
try { v35 = ("sticky").blink(); } catch (e) {}
try { v35.trimStart(); } catch (e) {}
let v38;
try { v38 = ("p").toWellFormed(); } catch (e) {}
127 == v38;
[-4294967295];
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(BigUint64Array); } catch (e) {}
    this.h = this;
}
v35.e = F42;
const v45 = new F42();
const v46 = new F42();
v46.f = v46;
v46.b = v46;
const o48 = {
    "h": v46,
    6: v46,
    128: undefined,
    "e": v32,
    "e": v45,
};
o48.h = o48;
