const v0 = [7,255,7,1073741823,-4294967296,16,5,-9,6];
const v1 = [536870888,8,4294967297,-232870428,-17219,1798527655,12,-42721,-34453261];
const v2 = [-9007199254740991,6,-30226,751555147,1];
const v3 = [v2,v0,v2];
const v4 = [v2,v3,v2,v2];
const v5 = [v0];
class C9 {
    constructor(a11, a12, a13) {
        v5[a11] = v1;
        try { this.o(a13, 65536, a12); } catch (e) {}
    }
    #f = 880.3135134132974;
    static 256 = v2;
    c = v2;
    static #h = v5;
    #d = 880.3135134132974;
}
new C9(880.3135134132974, 5.0, v3);
const v19 = new C9(880.3135134132974, 4.569490902243087, v0);
new C9(880.3135134132974, 5.0, v4);
function f30(a31, a32, a33, a34) {
    function f35() {
        let v37 = "n";
        const v38 = Math.expm1(v3);
        const v39 = Math.tanh(v37);
        const o40 = {
            [v39]: v38,
        };
        const o41 = {
        };
        for (let v43 = 0; v43 < 5; v43++) {
            for (let v44 = 0; v44 < 500; v44++) {
                let v45 = undefined;
                const v47 = v45++;
                v47 << v47;
                v37 &&= Uint8ClampedArray;
            }
        }
        return 3454;
    }
    f35();
    a31();
    %OptimizeFunctionOnNextCall(f35);
    const v52 = [1073741824,1073741823,1376142744,1073741825];
    try {
        v52.forEach(a34);
    } catch(e54) {
        e54.stack = e54;
    }
    return v19;
}
for (let v55 = 0; v55 < 5; v55++) {
    f30(v55, v55, v55, v55);
}
