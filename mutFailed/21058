function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(a5, this); } catch (e) {}
    a5 ^ a5;
    a6 ^ a6;
    try {
        this.f = a5;
    } catch(e10) {
    }
}
const t10 = 11n;
new t10(-1629307300n, 11n);
new F3(-1629307300n, 11n);
new F3(11n, 11n);
let v15 = 1073741823n;
v15--;
new Array(11n);
141 - 141;
try { new Uint8ClampedArray(Array, 1231, 141); } catch (e) {}
new Uint8ClampedArray(141);
const t20 = 1231;
const v28 = new t20(128);
try { v28.copyWithin(-1629307300n, 11n); } catch (e) {}
768 < F3;
const v33 = new Float64Array(768);
Uint8Array.valueOf = Array;
class C35 {
    constructor(a37, a38) {
        const v39 = this?.constructor;
        try { new v39(v33, a38); } catch (e) {}
        const v41 = `
            v41 >> v41;
        `;
        eval.name;
        eval(v41);
    }
}
new C35();
const v47 = new C35();
const v48 = v47?.__defineSetter__;
try { new v48(v47, 128); } catch (e) {}
