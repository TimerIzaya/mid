function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = f0;
    } catch(e3) {
    }
}
const v4 = new F1();
const v5 = new F1();
new F1();
class C7 {
    static p(a9) {
        const v11 = Symbol.iterator;
        const o26 = {
            [v11]() {
                let v13 = 10;
                const o19 = {
                    next() {
                        v13--;
                        const v17 = v13 == 0;
                        const o18 = {
                            "done": v17,
                            "value": v13,
                        };
                        return o18;
                    },
                };
                const v20 = [1,4294967296,-9007199254740992,4,-4294967295,-9,-4294967297,255,536870888,255];
                const v21 = [v20,v20,v20];
                Array(1102693041).slice(v21, v20);
                return o19;
            },
        };
        return f0;
    }
}
const v27 = new C7();
const v28 = new C7();
const v29 = new C7();
function f30(a31, a32) {
    const o45 = {
        "c": v27,
        "f": f30,
        __proto__: v29,
        [v27]: v29,
        "h": f0,
        "a": v4,
        "g": a32,
        "d": v29,
        "h": v4,
        /*
        __proto__: v29,
        */
        [a31]: v29,
        set e(a34) {
            let v33 = this;
            Math.min(1000);
            const v40 = v33++;
            v33 || -1000000.0;
            Math.sign(-1000000.0);
            -v40;
            -1000000.0 + 1000;
        },
    };
    return o45;
}
new C7(f30(v5, v27), f30, f0, v27, v4, v29);
b[Symbol.unscopables];
f30(v27, f30(v28, v28));
class C57 {
}
function F58(a60) {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = this.constructor;
    Object.defineProperty(v27, 2, { writable: true, enumerable: true, set: f30 });
    new Int16Array(5);
    new Uint8Array(512);
    new Float64Array(4096);
    v61.bind();
    try { new v61(); } catch (e) {}
}
new F58();
new F58();
const v76 = new C57();
const v81 = 536870912n << 536870912n;
-v81;
try { v76.getUint16(-16, undefined, 16, 6, v81); } catch (e) {}
