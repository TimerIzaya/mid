new Uint8ClampedArray(168);
new Uint32Array(168);
new BigInt64Array(255);
[-479524.77828418225,1000000.0,-415921.2852071272,196.1346861973284,-4.190660983439576,2.0,2.220446049250313e-16,0.570716208757033];
[-5.0,-3.642385805642836,-1000000000.0];
[-1.7976931348623157e+308,-5.450934447902398e+307,-1000.0,-1000000000000.0,2.2250738585072014e-308];
const t3 = 384;
const v14 = new t3(384);
new Int32Array(13);
new Float64Array(512);
function f21() {
}
function f22() {
    const o46 = {
        "b": f21,
        [f21]: f21,
        valueOf() {
            let v25 = -v14;
            v25--;
            const t18 = /a\Sc?/giy;
            t18.valueOf = f21;
            try {
                f21();
            } catch(e29) {
                Symbol("bZ");
                const v33 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
                class C34 {
                    constructor(a36, a37, a38, a39) {
                        const v40 = this?.constructor;
                        try { new v40(v33, a38, a38); } catch (e) {}
                        a37 >>> a37;
                        0.061410412759498656 >>> 0.061410412759498656;
                    }
                }
            }
            try {
                this.valueOf = f21;
            } catch(e45) {
            }
            return f21;
        },
    };
    return o46;
}
f22();
const v48 = f22();
const v49 = v48?.b;
try { new v49(); } catch (e) {}
new Uint8Array(268435440);
function F54() {
    if (!new.target) { throw 'must be called with new'; }
}
class C56 extends F54 {
}
Date[-22872n] = Date;
const v60 = ("function").length;
const v61 = f22();
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this?.constructor;
    try { new v66(a64, a64); } catch (e) {}
    new Uint16Array(v60);
    [];
    const o71 = {
        ...F62,
    };
    try {
        this.b = a65;
    } catch(e72) {
    }
    try {
        this.c = a64;
    } catch(e73) {
    }
}
const v74 = new F62(v61, v14);
new F62(v48, v74);
new F62(v61, v74);
-6n * -6n;
function f82(a83, a84) {
    Math.atan2(Math, f82);
    return f82;
}
new Promise(f82);
1713234876 === 1713234876;
function f91(a92, a93) {
}
f91();
f91(-1748, 1713234876);
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    const v100 = this.constructor;
    v100.f = v100;
    function f104() {
        return f104;
    }
}
