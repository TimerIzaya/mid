function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this?.constructor;
    try { new v14(a12, a13, a12); } catch (e) {}
    a11 - a11;
    a13 * a13;
    try {
        this.f = a11;
    } catch(e18) {
    }
    try {
        this.c = -2n;
    } catch(e19) {
    }
}
new F9(1000000.0, 7.559689826868887, 1000000.0);
new F9(7.559689826868887, 7.559689826868887, -113.9176065145133);
new F9(-113.9176065145133, 7.559689826868887, -113.9176065145133);
class C24 extends Date {
}
const v25 = new C24();
v25.toGMTString();
const v27 = [155533.8602852358,2.0];
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.__lookupGetter__;
    try { new v31(); } catch (e) {}
    19793 ^ 19793;
    -2.0 - -2.0;
    function f39() {
        return -2.220446049250313e-16;
    }
    f39.length = f39;
    4 >> 4;
    const v43 = new Int8Array(4);
    try { v43.reduce(4); } catch (e) {}
    8 - 8;
    for (const v48 in "1024") {
    }
    class C49 {
    }
    let v50;
    try { v50 = new C49(); } catch (e) {}
    try { v50.toString(); } catch (e) {}
    ("1073741823").trimRight()[8];
    const v56 = [];
    function f57(a58, a59) {
        class C60 {
        }
        5.0 / -2.220446049250313e-16;
        new Uint8Array(257);
        class C70 extends -23525 {
            constructor(a72, a73, a74) {
                super();
            }
        }
        Math.exp();
        Math.log(-23525);
        function f78() {
            return f78;
        }
    }
    f57.length;
    v56.constructor = f57;
    const v80 = new Float32Array(8);
    const v82 = /abc?/gvmy;
    v82.b = v82;
    try { v82.toString(); } catch (e) {}
    v82.exec("Q8F");
    const v85 = /(x)(x)(x)\1/uis;
    try { v85.compile(F29, 7.559689826868887); } catch (e) {}
    function f87(a88, a89, a90, a91) {
        const o98 = {
            2: a90,
            __proto__: a91,
            [v85](a93, a94, a95, a96) {
                super.test();
            },
        };
        o98[2] = o98;
        const v99 = o98[2];
        v99.caller = v99;
        return a88;
    }
    const v100 = f87();
    const v101 = f87();
    215 / 215;
    function F104() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try { new F104(); } catch (e) {}
    let v108 = 2;
    v108--;
    v108 >>> v108;
    const v111 = Math.cos(v108);
    v111 + v111;
    try { new BigUint64Array(C24, BigUint64Array, BigUint64Array); } catch (e) {}
    try { BigUint64Array(v100, v101, -2.220446049250313e-16); } catch (e) {}
    new BigUint64Array(215);
    class C122 {
        #c = "toUpperCase";
        get a() {
            const v124 = this << "toUpperCase";
            const v125 = v124 ^ v124;
            let v126;
            try { v126 = v125(v125, this, v125, v125, v124, this); } catch (e) {}
            v126[v125] <<= 1.1922093890401552e+308;
            return "Tx";
        }
        static b;
    }
    try { new C122(); } catch (e) {}
    new C122();
    new C122();
    function f132(a133, a134, a135) {
    }
    f132.arguments = f132;
    class C136 {
    }
    function F137(a139, a140, a141) {
        if (!new.target) { throw 'must be called with new'; }
        const v142 = this.constructor;
        try { new v142(a141, C136); } catch (e) {}
    }
    F137.arguments = F137;
    for (const v146 of Array(19793)) {
        v27[658291203] = null;
        Math.e = Math;
        Math.g = Math;
        let v149 = Math.cbrt(19793);
        v149--;
        const v151 = 0.4890055133608564 || 0.4890055133608564;
        v151 + v151;
    }
    const v153 = [];
    v153.g = v153;
    const v154 = [C24,C24];
    try { v154.fill(); } catch (e) {}
    const v156 = [v153,v153,v153,v153];
    let v157;
    try { v157 = v156.entries(); } catch (e) {}
    const v158 = v157?.__defineGetter__;
    try { new v158(v80, -4.709175952514134e+307); } catch (e) {}
}
F29.b = F29;
new F29();
new F29();
