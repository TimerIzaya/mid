function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a5;
        try {
            this.e = this;
        } catch(e7) {
        }
        try {
            ("h").includes("h");
        } catch(e9) {
        }
    } catch(e10) {
    }
    try {
        this.d = "h";
        new URIError();
        const v14 = new Date();
        v14.getHours();
    } catch(e16) {
    }
    try {
        const v17 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
        v17[2] = v17;
        const v20 = new Uint32Array(186);
        const v24 = new Float64Array(186, 186, 16);
        const v25 = [Float64Array,v24];
        if (Float64Array > v20) {
            new Uint32Array(v25);
        } else {
            function F28(a30, a31, a32) {
                if (!new.target) { throw 'must be called with new'; }
            }
        }
        this.h = "f";
    } catch(e33) {
        const v34 = e33?.c;
        const o38 = {
            valueOf() {
                try { ("f").replaceAll("8", e33); } catch (e) {}
                return "8";
            },
        };
        let v39 = this[6];
        v39 = v34;
        [4.0,0.0,6.660003619388945,-5.200394779544495,41099.688752186834,1.0,4.908649616953603,3.0];
        return typeof a5 != "string";
        function f44(a45, a46, a47, a48) {
            arguments.toString();
            return f44;
        }
        [0.6757438029416167,1000000000000.0];
        [-1000000000000.0,-959172.5528190484,0.8380825089549492];
        const v53 = [];
        for (let v54 = 0; v54 < 5; v54++) {
            "p" || v54;
            v53["f"] = v54;
        }
    }
}
const t60 = "f";
t60["8"] ||= F3;
"f" - "h";
const v58 = ("f")[9];
let v61 = -4294967297n;
let v62 = v61++;
const v64 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v65 = [601759695];
const v66 = [1073741824,1073741823,1376142744,1073741825];
function f68(a69, a70, a71, a72) {
    const v73 = a71 | f68;
    arguments[2] = arguments;
    function f75() {
        const v77 = ("Vre").toLocaleUpperCase;
        try { v77(v77, v61, a71, v66); } catch (e) {}
        const v79 = ("Vre").fixed();
        const t76 = "Vre";
        t76[1] = v79;
        const v80 = v79.codePointAt();
        let v82 = -268435456;
        const v83 = v82--;
        const o97 = {
            "c": v61,
            [522675525n](a85, a86) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v65,
            [v80]: -1547267477n,
            __proto__: a71,
            "d": v83,
            "e": -4294967295,
            "h": -128,
            valueOf(a88, a89) {
                return v79;
            },
            "e": v73,
            "e": v82,
            "maxByteLength": -4294967295,
            "arguments": v64,
            ...v65,
            "type": "Vre",
            ..."Vre",
            valueOf(a91, a92) {
                return v62;
            },
            ..."Vre",
            4: "Vre",
            "c": v82,
            "type": "Vre",
            "type": "Vre",
            toString(a94, a95, a96) {
                return a95;
            },
            5: -4294967295,
            6: v82,
        };
        o97.length;
        o97[5] = arguments;
        return o97.valueOf();
    }
    f75();
    %OptimizeFunctionOnNextCall(f75);
    return v61;
}
for (let v101 = 0; v101 < 5; v101++) {
    f68(v65, v101, v101);
}
const v103 = [v58,v58];
const v104 = ("f").slice;
("aZ4O").normalize();
const v108 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v110 = new Uint32Array(v108, 522675525n, v108, "aZ4O");
const v111 = v62--;
const v112 = [601759695];
const v113 = [1073741824,1073741823,1376142744,1073741825];
function f115(a116, a117, a118, a119) {
    const v120 = a116?.constructor;
    try { v120(); } catch (e) {}
    function f122() {
        try { ("Vre").charAt(4096); } catch (e) {}
        const v125 = ("Vre").codePointAt();
        v125 ^ v125;
        let v127 = isFinite;
        v127 = a117;
        b = v108;
        try {
            v113.forEach();
        } catch(e129) {
        }
        const o140 = {
            "c": v62,
            valueOf(a131, a132) {
                return v110;
            },
            1073741824: v110,
            [v62](a134, a135, a136, a137) {
                eval(a135);
            },
        };
        return v62;
    }
    f122();
    const v144 = new Int32Array(1024);
    const v145 = v144[3];
    v145 + v145;
    1024 * v145;
    for (let v148 = 0; v148 < 5; v148++) {
    }
    %OptimizeFunctionOnNextCall(f122);
    try { v113["find"](..."find", a119, ...v112, ...v113); } catch (e) {}
    return f115;
}
f115(v111, Uint32Array, 522675525n, v62);
let v153 = 522675525n * -65535n;
v153--;
new F3("8", Reflect.apply(v104, "f", v103));
new F3("8", "h");
new F3("f", "h");
(522675525n).asin();
