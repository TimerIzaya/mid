class C3 {
    get e() {
        const v5 = super.g;
        super.a -= v5;
        new Array(13);
        return v5;
    }
    6;
    static #a;
    static [-1];
    static #f = 255;
}
const v9 = new C3();
new C3();
const v11 = new C3();
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v11;
    } catch(e21) {
    }
    try {
        this.a = a18;
    } catch(e22) {
    }
    try {
        this.g = C3;
    } catch(e23) {
    }
}
new F15(-65535, v11, 1073741825, 65536);
new F15(255, C3, 4, -65535);
new F15(65536, v9, 65536, 4);
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = F27;
    this.a = 43806;
    this.h = 43806;
    this.c = 43806;
}
function f30() {
    function f31() {
        const v32 = [];
        v32[6] = v32;
        const o35 = {
            set b(a34) {
            },
        };
        return 255;
    }
    return f31;
}
F27.toString = f30;
new F27();
const v37 = new F27();
([0.6757774703824373,0.7659452606332188]).join(F27);
const v40 = [-1000000000000.0,0.42720131076488843,-2.2250738585072014e-308];
const v41 = [1.0,-880481.6395920017];
2974 & 2974;
const v45 = new Uint8Array(2974, Uint8Array, F15, 4);
v45.valueOf = f30;
v45[730] = v45;
let v46 = 10;
const v47 = v46--;
const v49 = new Float64Array(v46);
v49[8];
let v51;
try { v51 = v49.entries(); } catch (e) {}
try { v51.next(); } catch (e) {}
Float64Array.name;
const v56 = new Float64Array(9);
v56[1];
function f59() {
    const o110 = {
        m(a62) {
            const v63 = this?.__defineGetter__;
            try { new v63(this, F27); } catch (e) {}
            Object.defineProperty(this, "h", { writable: true, configurable: true, value: v41 });
            const v65 = this?.__defineSetter__;
            try { new v65(v46, v46); } catch (e) {}
            a62.f = a62;
            let v67;
            try { v67 = a62.next(); } catch (e) {}
            function f68() {
                return f30;
            }
            function f69(a70) {
                const o72 = {
                };
                gc(o72);
            }
            Object.defineProperty(v67, "next", { configurable: true, get: f68, set: f69 });
            try { v67.bind(9); } catch (e) {}
            a62.c = a62;
            a62.h = a62;
            const o75 = {
            };
            o75.h = 65536;
            o75.h = o75;
            o75.h = o75;
            o75.h = o75;
            o75.h = o75;
            function f76(a77, a78, a79) {
            }
            try { f76(128, 128, 128, v46, v49, Float64Array); } catch (e) {}
            const v82 = f76.length;
            f76.caller = f76;
            const v85 = Math?.expm1;
            try { new v85(this); } catch (e) {}
            const v88 = 1667070567 >> 1667070567;
            -(v88 - v88);
            class C91 {
                o(a93, a94, a95, a96) {
                }
            }
            let v97;
            try { v97 = new C91(); } catch (e) {}
            const v98 = v97?.__defineGetter__;
            try { new v98(-65535, v40); } catch (e) {}
            const v100 = C91.name;
            const v101 = v100?.italics;
            try { new v101(); } catch (e) {}
            3938 ^ 3938;
            3938 - v47;
            try { Int8Array(v82, v100, Math); } catch (e) {}
            const v108 = new Int8Array(3938);
            let v109 = 3;
            [...v109] = v108;
        },
    };
    o110.c = -65535;
    try { o110.m(Float64Array); } catch (e) {}
    function f112(a113) {
        function F114(a116, a117) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = a116;
        }
        return Float64Array;
    }
    o110.next = f112;
    o110.m(o110);
}
f59.length = f59;
f59(v37, v47, v40);
f59();
