const v0 = [-2147483649,-128,10000,9007199254740990,-9007199254740990,5,-1201102174,-1774799735,46598];
const v1 = [-51770,-1,268435439,-30520,-12115];
[-536870912,15];
const v3 = [895432365,-2147483648,-4294967297,9007199254740990,1,65537,2147483648,8];
[2074231348,14,5,45439,536870889,16];
const v5 = [-6421,-63432,2,15,-874059389];
v5[4];
29652 << 29652;
function f11(a12, a13) {
    const o33 = {
        o(a15, a16, a17) {
            try { this.push(a16, 29652, this, a15, v1, v5); } catch (e) {}
            function F19(a21, a22, a23) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.c = a15;
                } catch(e24) {
                    f11(v5, -4294967297);
                    %PrepareFunctionForOptimization(f11);
                    f11(v5, -4294967297);
                    f11(v5, -4294967297);
                    %OptimizeMaglevOnNextCall(f11);
                    f11(v5, -4294967297);
                }
                try {
                    this.unicode = v3;
                } catch(e29) {
                }
            }
            new F19(-4294967297, a13, a12);
            new F19(v1, -4294967297, 29652);
            new F19(v3, a15, a12);
            return v3;
        },
    };
    return o33;
}
const v34 = f11(29652, -4294967297);
const v35 = (65535)?.o;
try { new v35(v3, v3, v34); } catch (e) {}
f11(-4294967297, 29652);
f11(29652, v1, 65535, -4294967297, v0);
v1 * 536870912n;
-4294967296 - -4294967296;
-4294967296 >>> -4294967296;
Uint16Array.f = Uint16Array;
2 / 2;
