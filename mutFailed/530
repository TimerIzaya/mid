Int8Array.e = Int8Array;
const v5 = new Int8Array(0);
-0;
let v9;
try { v9 = new Int32Array(Int32Array, v5, 255); } catch (e) {}
const v10 = new Int32Array(0);
try { new v9(); } catch (e) {}
v9 = v10;
Reflect.construct(Int8Array, [-268435456], Int8Array);
new Float64Array(3027);
let v19 = 1762035708;
v19--;
const o77 = {
    valueOf(a24, a25, a26) {
        super.g;
        new Uint32Array(3532);
        new Uint16Array(256);
        new Uint8ClampedArray(7);
        function f37(a38) {
            const o39 = {
            };
            try {
                o39.h = a38;
            } catch(e40) {
            }
            try {
                const o41 = {
                };
                o41.h = a38;
                o41.g = a26;
            } catch(e42) {
            }
            try {
                const o43 = {
                };
                o43.h = a38;
                o43.g = a26;
                o43.c = 0;
            } catch(e44) {
            }
            try {
                const o45 = {
                };
                o45.h = a38;
                o45.g = a26;
                o45.c = a38;
            } catch(e46) {
            }
            for (let v49 = 0; v49 < 100; v49++) {
            }
            return this;
        }
        Worker(f37);
        ("toString").match();
        class C55 {
        }
        const v56 = new C55();
        class C58 {
            constructor(a60, a61, a62) {
                function f63(a64, a65) {
                    this.f;
                    [Uint16Array];
                    [a61];
                    [a61];
                    return a64;
                }
                this[Symbol.toPrimitive] = f63;
                a61[4] = v56;
                for (let v73 = 0; v73 < 25; v73++) {
                }
            }
        }
        const v75 = new C58(Int8Array, Uint32Array);
        new C58(v75, C55);
        return Worker;
    },
};
-1024 === -1024;
-7.166123285147479 - -7.166123285147479;
