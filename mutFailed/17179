const v0 = [];
const v2 = new Date();
function f3() {
    return v0;
}
[-1000000000.0,651.6828389521231,-8.48562772176722];
[5.972935022619126e+307,1.0];
[3.0];
const v7 = [7.635738996596185];
try { v7.flat(); } catch (e) {}
[676003.3076571615,-1000000.0,0.6560201008219437,-1000000.0,-4.0,-4.0,1000000000.0,-727.9827090597857];
[757.4790443118229,1000.0,-2.0,2.2250738585072014e-308,2.2250738585072014e-308,1000000.0];
try { ("m").trimRight(); } catch (e) {}
let v16 = 4.0;
v16 / v16;
new Date();
v16 **= v16;
-818878.473853753 << -818878.473853753;
const o27 = {
    set d(a24) {
        this["cos"]();
    },
};
class C28 {
    constructor(a30) {
        o27.d = a30;
    }
}
try { C28("undefined"); } catch (e) {}
const v33 = new WeakSet();
const v35 = new Map();
try { v35.get(-818878.473853753); } catch (e) {}
-719616954n ^ -719616954n;
let v40 = -8n;
v40--;
class C42 {
    e;
    a;
    static {
        let v46 = 0;
        v46--;
        for (let v49 = 0; v49 < 50; v49++) {
            v49 < v49;
            class C51 extends Date {
            }
            const v52 = [601759695];
            try { v52.push(this); } catch (e) {}
            [1073741824,1073741823,1376142744,1073741825];
            function F56(a58, a59) {
                if (!new.target) { throw 'must be called with new'; }
                this.name = this;
                this.a = a59;
            }
            F56.prototype = F56;
            const v60 = new F56(522675525n);
            v60.length;
            new F56(522675525n);
            for (let v63 = 0; v63 < 10; v63++) {
            }
            v49++;
        }
    }
}
try { C42.bind(-719616954n); } catch (e) {}
const v66 = new C42(v33, -8.576381465737261e+307);
new C42(v66, -818878.473853753, v66, -11n);
new C42(v40, v16, v35, -11n);
function f69() {
    return f69;
}
-4 != -4;
9007199254740991 + 9007199254740991;
class C78 {
    static #valueOf(a80, a81, a82) {
    }
    set e(a84) {
    }
}
const v85 = new C78();
v85.e = v85;
const t80 = [];
t80.valueOf = f69;
%PrepareFunctionForOptimization(f69);
const v92 = new Uint32Array(9);
try { v92.find(v2); } catch (e) {}
v33[4] = 5;
try {
} catch(e95) {
}
try { v85.o(v85, 5); } catch (e) {}
