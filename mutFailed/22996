function f0() {
}
const v1 = [8046,-2147483649,1268501360];
const v2 = [256,9007199254740990,9007199254740992];
const v3 = [-2147483649,9007199254740991,129,4,-465788692,9007199254740992,536870889,7,4294967295];
try { v3.map(f0); } catch (e) {}
class C5 extends f0 {
    static 185 = f0;
    static p(a7, a8) {
        this[a8];
        const v10 = v1.length;
        function F11(a13, a14, a15, a16) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a7;
            } catch(e17) {
            }
            try {
                this.c = v10;
            } catch(e18) {
            }
            try {
                this.f = v1;
            } catch(e19) {
            }
        }
        new F11(v2, v1, v10, a7);
        new F11(v3, a8, a7, v3);
        new F11(a7, a7, a7, this);
        return a8;
    }
}
try { new C5(); } catch (e) {}
new C5();
const v25 = new C5();
const v26 = v25?.constructor;
try { new v26(); } catch (e) {}
const v28 = new C5();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
const v33 = new Uint8ClampedArray(5);
try { new Float32Array(2891, 2891, v1); } catch (e) {}
new Float32Array(2891);
new Int16Array(109);
-5.0 != -5.0;
class C45 {
    constructor(a47) {
        try { this.toLocaleString(); } catch (e) {}
        a47.d = a47;
        ("buffer")["search"](..."buffer", ..."search", ..."search", a47, ..."search", 52021);
        arguments[0] = arguments;
        const v54 = new Uint32Array(3120, Uint32Array);
        v54[302] = v54;
        3016 >> 3016;
        try { new Uint8ClampedArray(2891, v1, v33); } catch (e) {}
        const v59 = new Uint8ClampedArray(3016);
        try { Float32Array.apply(3016, v59); } catch (e) {}
        super.d = arguments;
    }
    static h;
    static #a;
    [-5.0] = -5.0;
    #g = "buffer";
    static #c;
    static #e = C45;
}
C45.e = C45;
const v62 = new C45(C45);
const v63 = new C45(v62);
const v64 = new C45(v63);
v64.a = v64;
new Date();
new BigInt64Array(129);
12 - 12;
new Int8Array(12);
const v76 = new Uint32Array(1024);
try { v76.reduce(109); } catch (e) {}
const v78 = /1xyz{1,}?/gims;
const v79 = /h\p{gc=Nd}/vdy;
try { v79.exec(v64); } catch (e) {}
const v81 = /\xf0\x9f\x92\xa9a*/us;
class C85 {
    static {
        this.name = this;
        this[Symbol.hasInstance];
    }
    #p() {
        let v91;
        try { v91 = this.p(undefined, this, this, this, this); } catch (e) {}
        const v93 = new Float32Array(Float32Array);
        const v95 = new Int8Array(v93, v91, -23596);
        v95.buffer;
        try {
            v91.#p(undefined, v91, v91, undefined);
        } catch(e98) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v99 = new C85();
v99.c;
const v101 = new C85();
const v102 = new C85();
v102.c;
function f104(a105) {
    const o113 = {
        15: a105,
        toString(a107, a108) {
            super.h = a108;
            try { C85.stringify(a105, a105, this); } catch (e) {}
            try {
                C85.c = v99;
            } catch(e110) {
            }
            const v112 = [1000,1000,1000,1000,1000];
            for (let i = 0; i < 5; i++) {
                Object.defineProperty(v112, 130, { value: 1000 });
            }
            return a108;
        },
        2147483647: undefined,
        __proto__: v101,
        "c": a105,
        ...a105,
        "f": a105,
    };
    const v114 = o113?.constructor;
    try { new v114(); } catch (e) {}
    return o113;
}
const v116 = f104(v76);
f104(v102);
const v118 = f104(v116);
v118[306] = v118;
for (let i120 = 0; i120 < 5; i120++) {
    try {
    } catch(e126) {
    }
}
function F128(a130, a131, a132, a133) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(a130); } catch (e) {}
    a130.a = a130;
    a131 != a131;
    a132 % a132;
}
const v137 = new F128(v81, 1, -1263139894, F128);
const v138 = new F128(v78, v81, -23596, v137);
const v139 = new F128(v79, F128, -23596, 1);
const v140 = v139?.constructor;
try { new v140(v116, v139, 1, v116); } catch (e) {}
const v142 = v139 | F128;
let v143;
try { v143 = v138(v81, v142, v142); } catch (e) {}
if (v143) {
} else {
}
