function f0() {
    let v1 = -35687;
    const o12 = {
        5: -769031854,
        [v1]: -769031854,
        "f": v1,
        4048: f0,
        [-769031854](a5, a6) {
            -1171628975 != (v1 = a5);
            super.a;
            return -1957263069;
        },
    };
    return o12;
}
const v13 = f0();
const v14 = f0();
f0();
function F16(a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a18;
    } catch(e19) {
    }
}
let v20;
try { v20 = v13(v13); } catch (e) {}
const v21 = new F16(v14);
new F16(v14);
new F16(v14);
class C24 extends F16 {
    [f0] = v13;
    static n(a26, a27) {
        const v28 = a26[a26];
        const v30 = Symbol.toStringTag;
        v28[v30] = v30;
        return F16;
    }
    #d = f0;
    #c;
    f;
    #f;
}
const v31 = C24?.constructor;
let v32;
try { v32 = new v31(F16); } catch (e) {}
v32.d = v32;
const v33 = new C24();
const v34 = v33?.constructor;
try { new v34(); } catch (e) {}
let v36;
try { v36 = new v34(); } catch (e) {}
v36.h = v36;
const v37 = new v21();
const v38 = new v37();
v38.h;
v38.b = v38;
512 + 512;
const v43 = new BigUint64Array(512);
try { v43.entries(); } catch (e) {}
const v46 = new v20();
const v47 = v46?.entries;
try { new v47(); } catch (e) {}
try { v46.entries(); } catch (e) {}
const v50 = v43.includes(v46);
!v50;
v50 || v50;
!F16;
