0 >>> 0;
const v6 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v8 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v9 = [601759695];
0.728710559133114 >> -4294967297n;
try {
    v8.includes(231903325);
} catch(e12) {
}
const v13 = [1073741824,1073741823,1376142744,1073741825];
function f14(a15, a16, a17, a18) {
    function f19() {
        try { ("Vre").codePointAt(); } catch (e) {}
        let v22 = Float64Array;
        v22 = a16;
        b = v9;
        v6.length;
        try {
            v13.forEach(a16);
        } catch(e25) {
        }
        const o36 = {
            "c": -4294967297n,
            "c": v9,
            valueOf(a27, a28) {
                return a27;
            },
            [-4294967297n](a30, a31, a32, a33) {
                eval();
            },
            "arguments": v8,
            256: a18,
        };
    }
    f19();
    %OptimizeFunctionOnNextCall(f19);
    return f14;
}
f14(0, -4294967297n, v8, 0);
let v40 = 2.220446049250313e-16;
v40--;
2.0 << 2.0;
v8 >>> v8;
Float32Array.bind();
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this.constructor;
    try { new v55(154, a54, 154, a52); } catch (e) {}
    -a52;
    a54 <= a54;
}
const v59 = new F49(154, 129, 129, 154);
v59.constructor;
const t52 = [-0.685155357392599,5.0];
t52.length &= 1;
const v69 = 3409 - 3409;
const v71 = new Uint8Array(4096);
v71.includes(v69);
class C74 {
    toString(a76) {
        const v77 = this?.constructor;
        try { new v77(); } catch (e) {}
        const t62 = super["bigint"];
        t62[9] = 0;
    }
}
const v81 = new C74();
const v82 = [v81,v81];
v82[1] = v82;
try {
    v82.length = v81;
    function F83() {
        if (!new.target) { throw 'must be called with new'; }
        this.h = 0;
    }
    class C86 extends F83 {
        #b;
        constructor(a88) {
            super();
            delete this.h;
            super.h = this;
            /\1\2(a(?:\1(b\1\2))\2)\1()l/udm;
        }
    }
} catch(e91) {
    e91.message = e91;
}
