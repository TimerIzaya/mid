const v0 = [];
class C1 {
    static {
        let v2 = this;
        try { v0(v2, v0, v2); } catch (e) {}
        const v5 = Symbol.isConcatSpreadable;
        v2[v5];
        v5 % v2;
        const v11 = v5 >>> v2;
        try { v0.p(undefined, v0, v0, v0, v0); } catch (e) {}
        const o14 = {
        };
        function f15() {
            const o18 = {
                get c() {
                    super.m();
                },
            };
        }
        const v20 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v22 = new Uint32Array();
        let v23 = -4294967297n;
        const v24 = v23--;
        const v25 = [601759695];
        function f27(a28, a29, a30, a31) {
            a28.constructor = f15;
            const v32 = a28.constructor;
            try { new v32(); } catch (e) {}
            arguments.length;
            function f36() {
                ("Vre").charAt();
                let v39;
                try { v39 = ("Vre").codePointAt(); } catch (e) {}
                let v40 = Float64Array;
                v40 = a29;
                let v41 = v20.length;
                v41++;
                const o61 = {
                    "c": v23,
                    "a": v39,
                    [v24](a44, a45) {
                    },
                    [v24](a47, a48, a49, a50) {
                        eval();
                    },
                    "c": v25,
                    valueOf(a54, a55) {
                    },
                    1073741824: v22,
                    [v23](a57, a58, a59, a60) {
                    },
                    "arguments": 5,
                    256: a31,
                };
            }
            f36();
            const v64 = Array();
            try { v64.findLast(); } catch (e) {}
            v64.unshift();
            const v68 = new Int8Array();
            const t60 = v68.buffer;
            t60.constructor = f15;
            const v71 = new Int32Array();
            v71[3];
            for (let v73 = 0; v73 < 5; v73++) {
            }
            %OptimizeFunctionOnNextCall(f36);
            let [v74] = v68;
            function F75(a77, a78, a79, a80) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F75();
            new F75(v11, undefined);
            try { v0["find"](..."find", a31, ...v25, ...v0, ...522675525n); } catch (e) {}
        }
        f27(v22);
        Math.fround(v0);
        v2++;
        +v2;
        Math.max(v2);
    }
}
new C1();
new C1();
new C1();
new Float32Array(1);
new Int16Array(13);
new BigUint64Array(0);
const o109 = {
    "type": "function",
};
const v112 = new Float64Array(200);
try { Set.apply(1000, v112); } catch (e) {}
try {
    BigInt(132.432626643787);
} catch(e119) {
}
