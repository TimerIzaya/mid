function f0() {
}
function f1() {
    function f2(a3) {
        const v5 = new Date();
        return v5;
    }
    return f2;
}
function f6(a7) {
    f1();
}
Object.defineProperty(f0, "toString", { configurable: true, enumerable: true, get: f1, set: f6 });
function f9() {
    const o25 = {
        __proto__: f0,
        get f() {
            const v11 = super[this];
            super[v11] = f0;
            Math.hypot(Symbol, 2.220446049250313e-16, 2.220446049250313e-16);
            function F17(a19) {
                if (!new.target) { throw 'must be called with new'; }
                const v20 = this.constructor;
                try { new v20("toString"); } catch (e) {}
                a19[5];
            }
            f0 ^ this;
            super[this];
            return v11;
        },
        [f0]: f0,
        "g": f0,
        "b": f0,
        "d": f0,
    };
    return o25;
}
const v26 = f9();
const v27 = f9();
const v28 = f9();
function f32(a33, a34, a35, a36) {
    const o52 = {
        toString(a38, a39, a40) {
            throw f9;
            "256" << v28;
            const v45 = 10 - 10;
            const v46 = a34 - 2.220446049250313e-16;
            Math.asin(v46);
            const v48 = v45 ** v46;
            v48 * a34;
            Math.atan(v48);
            Math.acosh(v46);
            return a39;
        },
    };
    return o52;
}
f32(v28, v26, v27, "256");
f32(v27, v27, v26, "5eoW");
f32(v28, v26, v27, "9");
const o58 = {
    "maxByteLength": 257,
};
const v60 = new ArrayBuffer(203, o58);
v60.slice();
