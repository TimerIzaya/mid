const v5 = new Int16Array(38);
try {
    v5.buffer = -7;
} catch(e8) {
}
const v11 = Reflect.construct(Int16Array, [Reflect,-7,38], Int16Array);
BigUint64Array.g = BigUint64Array;
const v12 = new BigUint64Array(9);
try {
    v12.toString();
} catch(e19) {
}
new Uint32Array(9);
try { ("64").link(-7); } catch (e) {}
const v25 = [1.479450712344466];
try { v25.entries(); } catch (e) {}
v25.join();
for (let v28 = 0; v28 < 25; v28++) {
    -v28;
    const v30 = ("64").__proto__;
    try { v30.small(); } catch (e) {}
    with (Reflect) {
        v11 == h;
        v12[Symbol.matchAll] = "boolean";
    }
}
