const v2 = new Int32Array(1);
const v5 = new Uint8Array(4096);
const v8 = new Uint8Array(127);
function f9(a10, a11, a12, a13) {
    const o22 = {
        "h": a12,
        [Uint8Array](a15, a16, a17, a18) {
            new Set();
            try { v5.reduceRight(Uint8Array, a18); } catch (e) {}
            return v2;
        },
        ...v8,
        ...v5,
        "e": a13,
        512: v2,
        "a": a13,
        [127]: a12,
        "b": a12,
        "f": a10,
    };
    return o22;
}
const v23 = f9(1, 1, 127, 127);
f9(1, 127, 1, 127);
f9(1, 127, 4096, 127);
const v28 = new Array(5);
const v31 = new Int8Array(1);
new Uint8Array(64);
new Uint8Array(0);
class C38 {
}
function f39(a40) {
    return a40;
}
class C41 extends Uint8Array {
    static [C41];
    d;
    g;
}
const v43 = new WeakMap();
class C44 extends C38 {
    static 1 = v43;
    10000;
}
new Int8Array();
let v51 = 1.09639412395692e+308;
const v52 = v51++;
Math.log2(1073741824);
const v54 = v23 ** v51;
Math.cbrt(v52);
const o56 = {
    "execution": "async",
    "type": "minor",
};
gc(o56);
const t54 = "minor";
t54[C44] = C38;
try {
    o56.type = v54;
} catch(e58) {
}
v43.h |= 1073741824;
new Date();
try {
    C41.fuck(v28, v51, v31, -65536);
} catch(e63) {
}
gc();
