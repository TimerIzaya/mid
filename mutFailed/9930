const v0 = [129,-7,-7,9];
const v1 = [536870887,-536870912,9007199254740992];
const v2 = [-65536,4,2147483647,16,9007199254740991];
let v4;
try { v4 = ("boolean").bold(); } catch (e) {}
const t5 = "iterator";
t5[1] = v1;
try { ("function").padEnd("iterator"); } catch (e) {}
const v10 = new Array(6);
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    const v16 = a15?.constructor;
    try { new v16("boolean", "boolean", v1); } catch (e) {}
    a13[3] = a13;
    try { a15.reverse(); } catch (e) {}
    try {
        this.d = a15;
    } catch(e19) {
    }
}
new F11("boolean", v10, v2);
new F11(v4.d, v10, v0);
new F11("iterator", v1, v2);
const v24 = /m+/gudimsy;
try { v24.toString(); } catch (e) {}
const v26 = [];
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    const v29 = this.constructor;
    try { new v29(); } catch (e) {}
    let v31;
    try { v31 = this.valueOf(); } catch (e) {}
    v31.length = v31;
    try {
        this.d = v26;
    } catch(e32) {
        const v34 = new Set();
        class C35 {
            static {
                ("boolean")["charCodeAt"](F27, Array, ..."charCodeAt", F27);
            }
            static [Set] = "boolean";
            [v34];
        }
        function f39(a40) {
            return a40;
        }
    }
}
new F27();
new F27();
