const v0 = [];
class C1 {
    static #a;
    static set h(a3) {
        let v4 = 0;
        do {
            try {
                this.#a = this;
            } catch(e5) {
            }
            v4++;
        } while (v4 < 2)
    }
}
const v9 = new C1();
const v10 = new C1();
const v11 = new C1();
function f12() {
    return v10;
}
const v13 = [v0,v9,v11];
const v14 = [v9,v9,C1];
[f12,v14,v14,C1,v13];
v10[256] = v14;
try {
    C1.f = C1;
} catch(e19) {
}
class C21 extends f12 {
    static #p(a23, a24, a25) {
        try {
            f12();
        } catch(e27) {
        }
        return a25;
    }
    #o(a29, a30, a31, a32) {
        try {
            v0.f = this;
        } catch(e36) {
        }
        return a29;
    }
    3958;
    #e = v0;
    g;
    370;
    static a = v13;
}
const v37 = new C21();
new C21();
new C21();
class C40 {
}
const v41 = new C40();
const v43 = ReferenceError(v41);
try { h(v11, "w", v43, f12, "symbol"); } catch (e) {}
delete h?.[v41];
try {
    C40.a = v37;
} catch(e46) {
}
ReferenceError();
