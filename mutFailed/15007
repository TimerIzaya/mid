function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    const v11 = this?.constructor;
    try { new v11(this, this); } catch (e) {}
    try {
        this.c = 15;
    } catch(e13) {
    }
}
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = a17;
    } catch(e19) {
    }
    try {
        this.d = -1390270626;
        Math.cos(0.8497483139616006);
        const v25 = new Uint32Array(5);
        const v27 = [601759695];
        let v28;
        try { v28 = a16(); } catch (e) {}
        const o39 = {
            "c": -4294967297n,
            "c": v27,
            valueOf(a30, a31) {
                return a31;
            },
            1073741824: v25,
            [-4294967297n](a33, a34, a35, a36) {
                eval(v28);
            },
            "arguments": 5,
            256: -12,
        };
    } catch(e40) {
    }
    try {
        this.a = 536870888;
    } catch(e41) {
    }
}
const v42 = new F7(536870888, 6, -1390270626);
const v43 = new F14(-12, -9007199254740992, 14);
const v44 = new F14(-9007199254740992, 14, -12);
function F45(a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = new BigInt64Array(2255);
    try { Uint16Array.from(v52); } catch (e) {}
    try {
        this.b = a47;
    } catch(e55) {
    }
    try {
        this.d = v43;
    } catch(e56) {
    }
}
function F58() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
    } catch(e61) {
        e61 instanceof F7;
    }
}
new F45(v43, -1390270626, v44);
new F45(v43, F45, v42);
new F45(v42, 536870888, 6);
const v67 = new F58(Uint8ClampedArray, Uint8ClampedArray);
class C70 {
}
class C71 extends 14 {
    m(a73, a74, a75) {
        for (let [v76,v77] of a73) {
        }
    }
}
let v85 = v67 & -2;
v85++;
Math.acosh(v85);
