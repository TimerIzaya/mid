function F1() {
    if (!new.target) { throw 'must be called with new'; }
    function f3(a4) {
        new F1();
    }
    Object.defineProperty(this, "a", { set: f3 });
    1191742690 > 1191742690;
    try {
        this.a = 1191742690;
    } catch(e8) {
    }
}
class C11 {
    static #n(a13, a14) {
        try {
            this.#n(this, a13);
        } catch(e16) {
        }
        return 1024;
    }
    #valueOf(a18, a19) {
        a19 && a18;
        %VerifyType(a19);
        return a18;
    }
    1 = 10;
    static #e = 1024;
}
const v21 = new C11();
new C11();
const v23 = new C11();
const v24 = v23[F1];
let v25 = v24?.[268435440];
const v27 = new Map();
try {
    const o28 = {
    };
    v27.forEach(v24, o28);
} catch(e30) {
}
new Date();
const v39 = new Float64Array();
("p").lastIndexOf(v39);
const v47 = new Float32Array(Float32Array);
v47[Symbol.species][Symbol.iterator];
for (let v54 = 0; v54 < 25; v54++) {
    function f55(a56, a57, a58, a59) {
        a56[0] = a56;
        a57 <= a57;
        const v62 = [-848370.7489683867,1.7976931348623157e+308,-0.0,Infinity,-939644.2877334312,709.4714121839102,1000000.0,-607265.92864471,-1000000000.0,2.2250738585072014e-308];
        try { v62.entries(); } catch (e) {}
        const v64 = [];
        class C65 {
            constructor(a67, a68, a69) {
                function f70(a71, a72, a73) {
                    v64.copyWithin();
                    try {
                        f70(-268435456, 0.6683462416314783, [-268435456]);
                    } catch(e79) {
                    }
                    const v80 = this >> -268435456;
                    v80 >> this;
                    return -v80;
                }
                f70(this, this, a67);
            }
        }
        const v84 = arguments?.__lookupGetter__;
        try { v84(v84, f55, a57, arguments); } catch (e) {}
        try { undefined(); } catch (e) {}
        const v89 = new Int8Array();
        const o90 = {
            ...v89,
        };
        new Int8Array(v47);
        "find" == "find";
        return v47;
    }
    if (v21 >= 34376) {
        try {
            const o96 = {
            };
            f55(f55, o96, 4.4659673118611127e+307, 3927);
        } catch(e99) {
        }
    } else {
        v25 = v39;
    }
    for (let v100 = 0; v100 < 10; v100++) {
        f55(v47, v54);
    }
}
