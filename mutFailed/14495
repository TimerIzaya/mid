const v0 = [32626,1073741825,-9007199254740990,-2,-1152351288,12,191122401,-14,-1809423990];
const v1 = [1073741825];
const v2 = [-56689,1451,-128,2069390106];
function f3(a4, a5) {
    a4[0];
    try { a5.toString(); } catch (e) {}
    const o12 = {
        [a5]: a5,
        "d": v1,
        ...v0,
        set c(a9) {
            super[a];
        },
        84: a4,
        536870889: a5,
        __proto__: v0,
    };
    return o12;
}
const v16 = f3(f3(f3(v1, v1), v2), v2)[10];
1073741823 | v16;
const v21 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f22(a23, a24, a25, a26) {
    function f27() {
        -4294967295 >>> -4294967295;
        let v30 = Float64Array;
        v30.toString();
        v30 = a24;
        const v32 = v21.length;
        const v33 = v32 >>> v32;
        v33 / v33;
        const o39 = {
            toString(a36, a37) {
                a26 && v30;
                return a24;
            },
        };
        o39.toString();
        let v41 = -268435456;
        v41--;
        const o43 = {
            "e": -4294967295,
            "e": v41,
        };
        v16.e;
        return a24;
    }
    f27.length = f27;
    const v45 = f27();
    %OptimizeFunctionOnNextCall(f27);
    return v45;
}
const v46 = f22();
f22(v46, v46, f22, v21);
f22();
class C52 {
    constructor(a54, a55) {
        try { this.constructor(C52, a54); } catch (e) {}
        function f57(a58) {
            function f60(a61) {
                return a61;
            }
            this.onmessage = f60;
        }
        try { f57(f57); } catch (e) {}
        try { ("function").toLocaleLowerCase(); } catch (e) {}
        const o66 = {
            "type": "function",
        };
        const v67 = new Worker(f57, o66);
        try { v67.terminateAndWait(); } catch (e) {}
    }
}
C52.a = C52;
const v69 = new C52();
try { v69.hasOwnProperty(v69); } catch (e) {}
new C52();
const v72 = new C52();
const v73 = v72?.onmessage;
try { new v73(f22); } catch (e) {}
new Uint8Array();
const o76 = {
};
