function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 14120n;
    } catch(e6) {
        const v8 = [];
        let v10 = -1024;
        const v11 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v12 = 0; v12 < 5; v12++) {
            function f13() {
                Array().unshift();
                try {
                    v11.forEach(Float64Array);
                } catch(e18) {
                }
                const v20 = [];
                function F21(a23) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                class C24 extends F21 {
                }
                const v25 = new C24();
                const o32 = {
                    set g(a27) {
                    },
                    [v20](a29, a30, a31) {
                    },
                };
                for (const v33 in o32) {
                    try { v8.flat(4096); } catch (e) {}
                    v25.valueOf(v33);
                }
                v10 %= -268435456;
            }
            f13();
            %OptimizeFunctionOnNextCall(f13);
        }
    }
}
const v37 = new F3(4294967295n);
const v38 = new F3(4294967295n);
new F3(-4294967295n);
class C43 {
    constructor(a45, a46, a47, a48) {
        for (let [v49] of a45) {
            try { this.o(v49, 8, v37); } catch (e) {}
            try {
                this.__proto__ = this;
            } catch(e51) {
            }
        }
    }
    5;
    static #b;
    static #n(a53, a54, a55) {
    }
    #a = 8;
    static 128 = 8;
}
new C43(v38, F3, v37, 14120n);
const v61 = new C43(C43, 8, v38, 4294967295n);
new C43(11360, v61, v37, 4294967295n);
class C64 extends Date {
}
const v67 = new Uint16Array(1024);
v67[7] = v67;
function f68(a69) {
    const v70 = /jP?/vs;
    const v71 = /l/dsy;
    const v73 = Math.round();
    async function f74(a75, a76, a77) {
        try { a75.acosh(v70); } catch (e) {}
        try { a76(v70, v70, v71); } catch (e) {}
        await v73;
        return f74;
    }
}
function F81(a83, a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    const v87 = this.constructor;
    try { new v87(); } catch (e) {}
    this.d = f68;
    const v89 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v92 = new Uint32Array();
    const v94 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v95 = [601759695];
    const v96 = [1073741824,1073741823,1376142744,1073741825];
    v96[1] = v96;
    function f98(a99, a100, a101, a102) {
        function f103() {
            let v105 = Float64Array;
            v105 = a100;
            b = v95;
            const v106 = v89.length;
            try {
                v96.forEach(a100);
            } catch(e108) {
                e108.name;
            }
            const v110 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const v112 = Symbol.toPrimitive;
            const o116 = {
                toString(a114, a115) {
                    a114 *= v112;
                },
            };
            const o141 = {
                "c": -4294967297n,
                [522675525n](a119, a120) {
                },
                "c": v95,
                valueOf(a122, a123) {
                },
                [v106](a125) {
                },
                [-1]: 2684,
                1073741824: v92,
                "maxByteLength": -268435456,
                "b": -4294967295,
                "arguments": v110,
                [-4294967297n](a127, a128, a129, a130) {
                    class C132 extends Date {
                        static get c() {
                            eval();
                        }
                    }
                    for (let v136 = 0; v136 < 5; v136++) {
                    }
                },
                "e": -4294967295,
                "e": -268435456,
                "arguments": v94,
                set b(a138) {
                },
                256: a102,
                m(a140) {
                },
                ...v95,
            };
        }
        f103();
        eval("");
        %OptimizeFunctionOnNextCall(f103);
    }
}
++f68;
new F81();
new Date();
const v150 = [];
const v151 = [v150];
class C153 extends Map {
}
const v154 = new C153();
const v155 = new C153(v151);
const v156 = new C153(v155);
const v158 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v160 = new Uint32Array(v150);
const v162 = [601759695];
const v163 = [1073741824,1073741823,1376142744,1073741825];
function f165(a166, a167, a168, a169) {
    a166.toLocaleString();
    const v171 = a166.constructor;
    function f172() {
        return v162["pop"]();
    }
    f172();
    let v176;
    try { v176 = v171(); } catch (e) {}
    try { v171(); } catch (e) {}
    for (let v178 = 0; v178 < 5; v178++) {
        v160["p" + v178] = v178;
    }
    const v182 = arguments.length;
    Object.defineProperty(v154, "e", { configurable: true, enumerable: true, value: f165 });
    v155["toString"](a168, ...v156, BigUint64Array, ..."toString", a167);
    const v186 = Symbol.toStringTag;
    v155[v186] = v186;
    function f187() {
        const v190 = ("Vre").charAt().lastIndexOf();
        const v191 = ("Vre").codePointAt(v182);
        v191 - v191;
        v191 ^ v191;
        let v194 = Float64Array;
        v194 = a167;
        let v195 = v158.length;
        v195++;
        try {
            v163.forEach();
        } catch(e198) {
            e198.stack = e198;
        }
        const o211 = {
            "c": -4294967297n,
            "EPSILON": v162,
            valueOf(a200, a201) {
                return BigUint64Array;
            },
            1073741824: v160,
            [-4294967297n](a203, a204, a205, a206) {
                eval();
            },
            o(a210) {
                return v190;
            },
            256: a169,
        };
        return v154;
    }
    f187();
    const v214 = Array(v176);
    let v215;
    try { v215 = v214.findLast(Symbol, v158); } catch (e) {}
    v214.unshift();
    Int8Array.of().join(Array);
    const v220 = new Int8Array();
    v220.c = v220;
    const v221 = v220.buffer;
    v221.maxByteLength;
    v221.slice(v182, a169);
    try { Int32Array("toString", v215, v182); } catch (e) {}
    const v226 = new Int32Array(Symbol, v182, a169);
    const v227 = v226[3];
    v227 + v227;
    let v230;
    try { v230 = v163["find"](..."find", a169, ...v162, ...v163, ...522675525n); } catch (e) {}
    return v230;
}
f165(v160);
new F81();
