const v2 = new Uint16Array(15);
const v6 = new Int8Array(15);
const v9 = new Int32Array(10);
function f12(a13, a14, a15) {
    const o16 = {
        ...v6,
        814452916: 129,
        "f": v9,
        ...v9,
        __proto__: a14,
        [a14]: Float64Array,
    };
    return f12;
}
const v17 = new Float64Array(256);
const v20 = new Int32Array(230);
class C21 extends Uint16Array {
    static b = Uint16Array;
    static set a(a23) {
        try {
            v20.d = a23;
        } catch(e24) {
        }
    }
    static #d;
    #n(a26) {
        const o28 = {
            "execution": "sync",
        };
    }
    #toString(a30, a31, a32) {
        const v33 = this.buffer;
        const v38 = !2147483649;
        Math.cos(-0.0);
        const v40 = Int8Array || v38;
        Math.log1p(129);
        Math.atan(a32);
        Math.cbrt(Int8Array);
        Int8Array ^ v40;
        v33[v2] = v33;
        const v46 = [this,a30];
        const t40 = Array(15);
        t40[2147483648] <<= 15;
        const o52 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o52);
        return Reflect.construct(Int32Array, v46, Float64Array);
    }
    set f(a56) {
        const v57 = v17.__proto__;
        const v62 = new Set();
        function F63(a65, a66) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = v62;
            try {
                const v67 = v62[this];
                try {
                    new F63(v67);
                } catch(e69) {
                }
            } catch(e70) {
            }
        }
        Math.sinh(257 & v57);
        v57 || v57;
        const v74 = v57 || v57;
        -257;
        v74 >> v74;
    }
}
new C21();
new C21();
const v79 = new C21();
%VerifyType((v79 >= v2 ? v79 : v2) instanceof Int8Array);
Object.defineProperty(v2, 268435456, { enumerable: true, get: f12 });
new Map();
function F85() {
    if (!new.target) { throw 'must be called with new'; }
    const v88 = -(-7);
    v88 ** v88;
}
function F90(a92, a93) {
    if (!new.target) { throw 'must be called with new'; }
    const v94 = this.constructor;
    try { new v94(F85, a92, F85, v94); } catch (e) {}
    new F85();
}
const v97 = /foo(?<=bar)baz/s;
const t90 = /ZMq/vy;
t90[Symbol.species] = v97;
new F90();
const o102 = {
};
