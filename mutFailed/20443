function f0() {
    const v5 = 10 << 10;
    function f6() {
        for (let v7 = 0; v7 < 5; v7++) {
            v7 & f6;
        }
        return f6;
    }
    f6[Symbol.toPrimitive] = f6;
    f6();
    const o18 = {
        "h": "number",
        ["replaceAll"]: -1.3391878620518586e+308,
        ..."replaceAll",
        ["number"]: "number",
        "e": -1.3391878620518586e+308,
        "f": -1.3391878620518586e+308,
        o(a13) {
        },
        "f": 10,
        __proto__: "number",
        toString(a15, a16, a17) {
            return v5;
        },
        "c": "replaceAll",
        /*
        __proto__: "number",
        */
        "b": "replaceAll",
        ..."number",
        "a": "replaceAll",
        ..."number",
        "g": -1.3391878620518586e+308,
        [-1.3391878620518586e+308]: -1.3391878620518586e+308,
        "d": -1.3391878620518586e+308,
    };
    return o18;
}
const v19 = f0();
new Uint8Array(268435440);
const v26 = [Uint8Array,0];
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e32) {
    }
}
function f33(a34, a35) {
    function f37(a38) {
        return a34 ^ a35;
    }
    this.onmessage = f37;
}
const o42 = {
    "type": "function",
};
o42.arguments = F28;
new Worker(f33, o42);
new BigInt64Array(2147483649);
const o47 = {
    "arguments": v26,
    "type": "function",
};
f0();
const v49 = f0();
const v50 = [v49,f0,f0,v49];
[v19,v50,v50,v49,v49];
[v19,v49];
new Int32Array(3703);
new Int32Array(7);
class C60 {
}
class C61 {
    static #a = C60;
    static {
    }
}
new Int8Array();
function F67(a69) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f0;
    const v70 = this?.constructor;
    try { new v70("toString"); } catch (e) {}
    a69[5];
}
new F67("toString");
new BigInt64Array(2185);
new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
[[]];
