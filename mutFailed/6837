const v0 = [-1.0];
Object.defineProperty(v0, 7, { writable: true, configurable: true, value: v0 });
const v1 = [-2.4006529591729686,-797.9572729457966,-1.7976931348623157e+308,-2.2250738585072014e-308];
v1[7] = v0;
const v2 = [1000.0,-789717.8131863867,1.3998999098993553e+308,-1000000000000.0,-1.338730659976497e+308,223312.96248885663,-2.0,0.08789144014620809,0.0,1.2293107879950824];
function f3() {
    Math.fround();
    Math.ceil();
    return Math;
}
v2.toString = f3;
function f7(a8) {
    a8[7] = a8;
    const o20 = {
        11: v2,
        "c": a8,
        ...a8,
        __proto__: v2,
        ...v2,
        [v2](a10) {
            new Float64Array(89);
            new Uint32Array(1);
            const v19 = new BigUint64Array(2705);
            return v19;
        },
    };
    o20[0];
    return o20;
}
const v22 = f7?.constructor;
try { new v22(v2); } catch (e) {}
const v24 = f7(v2);
const v25 = f7(v1);
v25.toString = f7;
const v26 = f7(v0);
function f27(a28, a29, a30) {
    const v31 = a28?.filter;
    try { new v31(a28); } catch (e) {}
    const o40 = {
        [v25](a34, a35) {
            a35 ||= a35;
            let v36;
            try { v36 = a28(a35, this, this, a34, v0); } catch (e) {}
            try {
                const o37 = {
                };
                v25.fuck(v36, v25, f7, o37);
            } catch(e39) {
            }
            return v24;
        },
        112: a29,
        7: a30,
        "f": a30,
    };
    return o40;
}
f27(v0, v24, v0);
f27(v1, v26, v2)[112];
f27(v24, v24, v1);
const v46 = new Map();
try { v46.forEach(v2); } catch (e) {}
[1000000000.0,0.5862539335295323,0.5597483213227774,-1000000.0,-3.0,-3.0,-614972.1916769096,-Infinity];
const v50 = ([-7.770964501688567e+307,-3.0,-2.0,1000.0,2.220446049250313e-16,5.341188966171874e+307,-2.220446049250313e-16,-3.0,1000.0])?.filter;
try { new v50(v24); } catch (e) {}
[-2.220446049250313e-16,-Infinity,-1.100634047348919,-1e-15,-4.008159040612802];
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    a55.constructor = f7;
    const v57 = a55?.constructor;
    try { new v57(a55); } catch (e) {}
    a56.arguments;
}
const v60 = new F53(F53, F53);
v60.f = v60;
Math.asinh(~v60);
