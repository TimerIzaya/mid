const v2 = new Uint8Array(9);
v2[10000] = 9;
const v6 = new Array(868);
v6[Array] = v6;
const v8 = new Int32Array(64);
let v12 = 512;
Math.ceil(2.220446049250313e-16);
const v16 = -15 ^ Uint8Array;
const v17 = v12 ^ 2.220446049250313e-16;
Math.sinh(-15);
v8[Uint8Array / v12] = Uint8Array;
const v21 = v6[Reflect];
v12 = 64;
try { Array(v16, v17, ...v21, v21); } catch (e) {}
new Uint8Array(9);
function f27() {
    Reflect.construct(Uint8Array, [Reflect], v21);
    return arguments;
}
f27(9);
try {
    const o36 = {
        valueOf() {
            super.e = v2;
            %VerifyType(9);
            return 64;
        },
    };
    new Map("268435441");
} catch(e38) {
}
