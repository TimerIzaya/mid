class C3 {
    constructor(a5, a6) {
        function f7(a8) {
            const v11 = new BigInt64Array(3768);
            let o12 = {
            };
            [,...o12] = v11;
            return BigInt64Array;
        }
        this[Symbol.toPrimitive] = f7;
        this[546508306] = this;
        a6 + a6;
        a5[-14233] = 8.45083107656204;
        try { Math.exp(a5); } catch (e) {}
        -1e-15 / -1e-15;
        let v22 = a5 && (-128 >> a6);
        v22 & v22;
        v22++;
    }
    [-1000000.0] = 8.45083107656204;
    546508306 = 8.45083107656204;
    b;
}
C3.e = C3;
const v25 = new C3(C3, -14233);
const v26 = new C3(v25, v25);
new C3(v26, v26);
class C28 {
    static #h = v26;
    #e = -1000000.0;
    static 9;
    static #f;
    [v26] = v25;
    #g;
    [8.45083107656204];
    get g() {
        try {
            C3.e;
        } catch(e31) {
            ++C3;
            Math.log(255);
            --e31;
            Math.sinh(-C3);
        }
        return this;
    }
}
new C28();
new C28();
new C28();
const v43 = [-1170871325,5,1,-8,16962,127,536870887,1797638862];
function f44(a45) {
    function F47(a49, a50, a51, a52) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v53 = 0; v53 < 100; v53++) {
            const o56 = {
                valueOf(a55) {
                    return v53;
                },
            };
            function f57(a58, a59, a60) {
                const o67 = {
                    toString(a62, a63, a64) {
                        super[a60];
                        return a59;
                    },
                    "a": o56,
                    "arguments": v43,
                    2: undefined,
                    get d() {
                        return F47;
                    },
                };
                return a58;
            }
            const v68 = f57(f57, undefined, F47);
            f57(undefined, v68, v68);
        }
    }
    return undefined;
}
v43.constructor = f44;
try { v43.concat(-1000000.0); } catch (e) {}
const v71 = [-12,-3,-15067,6,1670347149,-16,6,2,-4096,-2130];
try { v71.entries(); } catch (e) {}
([-4294967295,2147483648,4294967296])[1];
let v76 = 16;
v76--;
const v78 = Array(v76);
const o79 = {
    ...v78,
};
