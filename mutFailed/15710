new BigInt64Array(236);
const v5 = new Int8Array(2121);
const v8 = new BigInt64Array(82);
function f9(a10, a11, a12) {
    const o22 = {
        get h() {
            v5[this] %= a12;
            try {
                v5.buffer = BigInt64Array;
                const v16 = new Int16Array(16);
                v16.buffer;
                ([601759695]).includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
            } catch(e21) {
            }
            return a12;
        },
        "c": v8,
        "d": Int8Array,
    };
    return o22;
}
f9(236, 236, 82, 236, 82, 2121);
f9(2121, 82, 2121);
f9(82, 82, 236);
const v30 = ["string"];
class C34 {
    constructor(a36, a37) {
        const o51 = {
            84: arguments,
        };
    }
}
class C59 {
    constructor(a61, a62) {
    }
}
function f63(a64) {
    f63[7] = a64();
}
const o73 = {
    "arguments": v30,
    "type": "function",
};
new Worker(f63, o73);
new C59();
new C59();
const o81 = {
};
const t48 = null;
t48.valueOf = o81;
class C84 {
    static {
        this[Symbol.hasInstance];
    }
    #p() {
        let v90;
        try { v90 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v90.#p(undefined, v90, v90, undefined);
        } catch(e92) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
const v93 = new C84();
const v94 = new C84();
function f95(a96) {
    const o102 = {
        15: a96,
        toString(a98, a99) {
            super.h = a99;
            try { C84.stringify(a96, a96, this); } catch (e) {}
            try {
                C84.c = v93;
            } catch(e101) {
            }
            return a99;
        },
        2147483647: undefined,
        __proto__: v94,
        "c": a96,
        ...a96,
        "f": a96,
    };
    return o102;
}
for (let v104 = 0; v104 < 25; v104++) {
}
for (let v106 = 0; v106 < 5; v106++) {
    for (let i112 = 0, i113 = 10; i112 < i113; i112++, i113--) {
    }
    for (const v123 of "m") {
    }
}
