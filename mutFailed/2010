class C3 {
    [9] = -7;
    2147483648 = -7;
    #e = -7;
    #n(a5, a6) {
        let v4 = this;
        v4 <<= v4;
        return v4;
    }
    c = 9;
    [268435440] = 268435440;
    2147483649;
    [-7];
}
let v7 = new C3();
const v8 = new C3();
function f9() {
    function F10() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v12 = new F10();
    const v13 = new F10();
    function f16(a17) {
        return v8;
    }
    class C18 extends f16 {
        [v13] = "E";
        [v12] = -14n;
        268435441 = -14n;
    }
    return 9;
}
v8[Symbol.species] = f9;
let v25 = 51156;
const v26 = --v25;
Math.sign(v25);
++v7;
v26 ^ +-7;
Math.log1p(-7);
const v32 = new C3();
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    function f39(a40, a41) {
        class C42 {
        }
        return -65537;
    }
    this.toString = f39;
    try {
        new WeakSet();
        -268435440;
        Math.tan(-1162108574);
        const v50 = -618513.9023313043;
        v50 << 618513.9023313043;
        Math.abs(v50);
        this.f = v8;
    } catch(e53) {
    }
    try {
        this.a = a36;
    } catch(e54) {
    }
    try {
        this.b = a35;
    } catch(e55) {
    }
}
F33.toString = Symbol;
const v56 = new F33(9, v32, v32, 9);
const v57 = new F33(268435440, C3, v8, -7);
C3[v57] **= -7;
v7 >> F33;
const v62 = --v7;
const v63 = v62 + v62;
Math.exp(v63);
Math.sin(v62);
!v63;
const v67 = Math.max(v7);
try {
    v56.toString = v67;
} catch(e68) {
}
v8[Symbol.species];
Math.imul(1000, 1000);
new F33(-7, v8, v32, 9);
const v75 = new BigInt64Array();
v75.copyWithin(-9223372036854775808);
