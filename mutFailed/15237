class C3 {
    static o(a5, a6) {
        function f7(a8) {
            function f10(a11) {
                Float64Array();
                /(\P{scx=Greek})/imy;
                return Int16Array;
            }
            return a6;
        }
        a5.valueOf = f7;
        a5 %= -2.2250738585072014e-308;
        function F18(a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            this.b = a5;
            try {
                this.b = a5;
            } catch(e22) {
            }
            try {
                this.d = a5;
            } catch(e23) {
            }
            class C24 {
            }
            const v25 = new C24();
            if (v25) {
            }
        }
        new F18(-2.2250738585072014e-308, -2.2250738585072014e-308);
        new F18(-2.2250738585072014e-308, a6);
        const v28 = new F18(this, -2.2250738585072014e-308);
        return v28;
    }
}
function f29(a30) {
    function F31() {
        if (!new.target) { throw 'must be called with new'; }
    }
    return -2.2250738585072014e-308;
}
C3.toString = f29;
const v33 = new C3();
const v34 = new C3();
Object.defineProperty(v34, "toString", { writable: true, configurable: true, value: f29 });
try { v34.toString(2.2250738585072014e-308, 2.2250738585072014e-308, v33); } catch (e) {}
function f40(a41) {
    const v43 = new Float32Array();
    function f44(a45, a46, a47, a48) {
        a45[1];
        a46--;
        a45[0] = a45;
        a46 <= a46;
        arguments[1] = arguments;
        const v53 = arguments?.__lookupGetter__;
        try { v53.constructor(v43, a47, 9, f44); } catch (e) {}
        let v55;
        try { v55 = v53(v53, f44, a46); } catch (e) {}
        return v55;
    }
    for (let v56 = 0; v56 < 10; v56++) {
        f44(v43);
    }
    return f44;
}
Math[Symbol.toPrimitive] = f40;
let v60 = 14750;
Math.asin(9);
v60--;
9 & v60;
~v33;
Math.imul(v60, 9);
-v33;
const v68 = Math.max(1000000000.0);
let v69 = 0;
v69++;
function f71() {
    Object.defineProperty(ArrayBuffer, "valueOf", { writable: true, enumerable: true, value: f29 });
    const v73 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    new Int8Array(v73);
    return f71;
}
f71();
%OptimizeFunctionOnNextCall(f71);
try { v68(); } catch (e) {}
C3["o"](C3, 9, "o", "o", "o");
new BigInt64Array();
new Int32Array(1024);
new Uint16Array(2541);
function f91() {
    let v92 = -65535;
    v92 * v92;
    const o138 = {
        next() {
            v92--;
        },
        m(a97) {
            a97.f = a97;
            a97.f = a97;
            try { a97.next(f91); } catch (e) {}
            a97.c = a97;
            a97.h = a97;
            const o99 = {
            };
            o99.h = a97;
            o99.h = o99;
            o99.h = o99;
            function f100(a101, a102, a103) {
                return a101;
            }
            f100.caller = f100;
            try {
                o99.e = v92;
            } catch(e104) {
                const v108 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v108, o99);
            }
            try {
                const o110 = {
                };
                o110.h = o110;
            } catch(e111) {
            }
            const v113 = Math?.expm1;
            try { new v113(f100); } catch (e) {}
            try { Math.expm1(128); } catch (e) {}
            let v116 = -9007199254740991;
            v116++;
            const v118 = v116 >> v116;
            v118 - v118;
            class C120 {
                o(a122, a123, a124, a125) {
                }
            }
            const v126 = C120.name;
            try { v126.codePointAt(Math); } catch (e) {}
            const v130 = new Int8Array(3938);
            let v131 = 3;
            let v132 = 0;
            v132++;
            for (let i = 0; i < 5; i++) {
                [...v131] = v130;
                v132++;
            }
            const o135 = {
            };
            try {
                const o136 = {
                };
            } catch(e137) {
            }
        },
    };
    o138.m(o138);
    const v142 = new Float32Array();
    const t155 = "nt";
    return delete t155[v142];
}
f91();
new BigUint64Array(7);
for (let v148 = 0; v148 < 5; v148++) {
    class C149 {
    }
    for (let v150 = 0; v150 < 5; v150++) {
        v150 > v150;
    }
}
new Uint16Array(3);
new C3();
const v155 = new WeakMap();
v155.set([v155,v155,v155]);
const v159 = new BigInt64Array(980);
v159.includes(980);
function f161() {
    return C3;
}
[13,16,-9,14,268435440];
[-717798507,-1215724324,1024,-1181496028,129,2];
[7];
new BigUint64Array();
new BigUint64Array();
const v173 = new BigInt64Array(4046);
function f175(a176, a177) {
    const v178 = [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
    v178.valueOf = f161;
    const v179 = [1073741824,-46456,536870888];
    function f180() {
        return f161;
    }
    function f181(a182) {
        a182 &&= a182;
    }
    Object.defineProperty(v179, "valueOf", { writable: true, configurable: true, get: f180, set: f181 });
    function f184() {
        return Symbol;
    }
    Object.defineProperty(Math, "toString", { configurable: true, get: f184 });
    let v185 = v178 | v179;
    Math.exp(v185);
    let o187 = {
    };
    v185 = 115;
    Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array);
    for (let v192 = 0; v192 < 5; v192++) {
        function f193() {
            const v195 = Math.atan(Math);
            return v195 - v195;
        }
        f193();
        %OptimizeFunctionOnNextCall(f193);
    }
    new Int32Array(9);
    new Float64Array(0);
    new Uint32Array(3305);
    [,...o187] = v173;
}
f175();
