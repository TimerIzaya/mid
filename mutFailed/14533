const v2 = new Uint16Array(3377);
4096 > 4096;
const v6 = new Uint8ClampedArray(4096);
let v7;
try { v7 = v6.slice(v2, v6); } catch (e) {}
const v10 = BigInt64Array.BYTES_PER_ELEMENT;
new BigInt64Array(538);
class C12 extends Uint16Array {
    3592150906;
    [v7];
}
new C12();
new C12();
new C12();
/[\c!]/dms;
/Slv3/gdiy;
function f18(a19, a20, a21, a22) {
    let v23;
    try { v23 = v10(a22, a22); } catch (e) {}
    try {
        new Uint16Array(a22, -536870912, -887647723);
    } catch(e27) {
    }
    return v23;
}
f18(v2, 4096, 3377, v7);
/\P{Any}/vi;
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.constructor;
    let v36;
    try { v36 = new v35(); } catch (e) {}
    this.e = v36;
}
function f37() {
    for (let v38 = 0; v38 < 5; v38++) {
        new F30();
    }
    return F30;
}
%PrepareFunctionForOptimization(f37);
f37();
%OptimizeFunctionOnNextCall(f37);
f37();
