class C3 {
    static #b;
    #p(a5, a6) {
        try {
            super.m(this, a6, this);
        } catch(e8) {
        }
        this < 257;
        this[129] -= 10000;
        return a5;
    }
    5;
    static d;
    static 646 = 2;
    static g = 257;
}
const v10 = new C3();
const v11 = new C3();
const t18 = 257;
const v12 = new t18();
const v13 = [10000,v12,257,v12];
const v14 = [v11,v12,2];
const v16 = [10000,v10,[10000,257,C3,v14]];
const v17 = [v13,2,v11];
[v17,v14,v17,10000,v17];
class C19 {
    [v11] = v16;
    p(a21, a22) {
        try {
            v13.length = 7;
        } catch(e24) {
        }
        return a21;
    }
    static #a = 10000;
    static #h = v17;
    g;
    74 = v11;
    #g;
}
new C19();
new C19();
new C19();
function F28() {
    if (!new.target) { throw 'must be called with new'; }
}
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    function f38() {
        const o45 = {
            "e": -4294967295,
            ..."Vre",
            valueOf(a43, a44) {
            },
            ..."Vre",
            "c": a37,
            5: -4294967295,
            6: -268435456,
        };
    }
    f38();
    %OptimizeFunctionOnNextCall(f38);
    let v48;
    try { v48 = v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
    v48 <= a36;
}
const v52 = new BigInt64Array(3216);
const v55 = [155533.8602852358,2.0];
function F57() {
    if (!new.target) { throw 'must be called with new'; }
    const v61 = Array(19793);
    for (const v62 of v61) {
        v55[658291203] = null;
        Math.cbrt(v61);
        Math.exp(0.4890055133608564 || 0.4890055133608564);
    }
    const v68 = [19793,19793,19793,19793];
    [v68,v68];
    [Array,Array,Array,Array];
    Uint16Array >= Uint16Array;
}
new F57();
new F57();
const v76 = new BigUint64Array(4096);
f33(v30, 10000, false, 10000);
f33(v76, 3331, v52, 3216);
%PrepareFunctionForOptimization(f33);
ReferenceError.captureStackTrace(F28);
