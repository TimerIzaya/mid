class C3 {
    static a;
    #h = "R5ag";
    valueOf(a5) {
        const t4 = "R5ag";
        t4[7] = a5;
        let v6;
        try { v6 = new a5(a5, "n", a5, this, this); } catch (e) {}
        a5 >>> v6;
        return v6;
    }
    static 851 = -1.0;
    static {
        let v9;
        try {
        const t0 = -1.0;
        v9 = new t0(this, this, ...-1.0, ..."R5ag");
        } catch (e) {}
        v9[1] = -1.0;
    }
    e = "R5ag";
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
function f13() {
    return C3;
}
function F14(a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a16;
    } catch(e19) {
    }
}
new F14(v11, v12, v11);
const v21 = new F14(v12, v10, v10);
new F14(v10, f13, v12);
class C23 extends f13 {
    o(a25, a26, a27) {
        try {
            super.sinh(a25, v12, this);
        } catch(e29) {
        }
        try {
            this.fuck(-38347n, -38347n, v10, 5.1787980311987845);
        } catch(e33) {
        }
        return a25;
    }
    #f = -1.0;
}
new C23();
new C23();
new C23();
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this.constructor;
    try { new v43(); } catch (e) {}
    typeof Float32Array;
}
const v47 = new F37();
new v21(F37, v47, F37, v47);
