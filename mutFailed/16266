const v0 = [-469.9445637083646,-947.5850780593182,4.0,-1.0,-5.0];
const v1 = [271288.482879892,-3.0,2.0,-4.82263651788712,Infinity,8.24778350705661,560587.797855342];
[1.1253683477168317e+308,-1.229675468927788e+308,911729.6658214049,-1000000000000.0,5.0,1.3263334476361015e+308,0.940239117754121,0.8228969517821313,Infinity];
function f3(a4) {
    const o12 = {
        "d": v1,
        "f": v0,
        m(a6, a7) {
            try { new a6(a4, a7, a7, a4, v0); } catch (e) {}
            const o9 = {
            };
            new Proxy(v0, o9);
            return a6;
        },
        "e": a4,
    };
    return a4;
}
const v13 = v1(v1);
const v14 = f3(v0);
f3.f;
const v16 = f3(v0);
const v17 = [v16];
[f3,v17,f3];
const v19 = [v14];
class C20 extends f3 {
    static e = v16;
    8 = v16;
    toString(a22, a23, a24, a25) {
        f3(a25);
        Reflect.construct(a24, [v16,v17,f3], a24);
        return v17;
    }
    static a = v19;
    [v13] = v14;
}
new C20();
const v31 = new C20();
const v32 = new v13();
const v33 = v32[8];
const v34 = [];
try { v34.toSpliced(v34, v31); } catch (e) {}
function f36(a37, a38, a39, a40) {
    try { a37.constructor(v17); } catch (e) {}
    try { a39.findLast(a40); } catch (e) {}
    a40 - a40;
    function f44() {
        return f36;
    }
    class C45 extends v33 {
    }
    const v46 = new C45();
    v46.arguments;
    const v48 = v46.toString();
    for (let i = 0; i < 5; i++) {
        ["object",v48,"object",v34];
    }
    return a39;
}
for (let v51 = 0; v51 < 5; v51++) {
    v51 % v51;
    f36(f36, f36, v34, v51);
}
%OptimizeFunctionOnNextCall(f36);
const v54 = f36();
try { v54.strike(); } catch (e) {}
