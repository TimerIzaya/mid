function F1() {
    if (!new.target) { throw 'must be called with new'; }
}
let v3 = "string";
class C7 extends F1 {
    set h(a9) {
        function f12(a13, a14) {
            const o15 = {
                [a13]: a14,
                [a14]: -65537,
                65536: -65537,
            };
            return -65537;
        }
        f12(9223372036854775807, 9223372036854775807);
        ({"h":v3,} = this);
        class C18 extends Date {
        }
        const v19 = [-8,127,65535];
        const v20 = [7,2147483648,1073741824,-1427988041,2,9];
        const v21 = [-1000000000000.0,-2.0,1000000000000.0,0.901537490064662,-1.7976931348623157e+308,-385.3512032399924];
        const v22 = [-1e-15,0.20747719464528913,-5.0];
        function F23(a25, a26) {
            if (!new.target) { throw 'must be called with new'; }
            const v27 = this.constructor;
            try { new v27(v21); } catch (e) {}
            a25[5] = a25;
            for (const v29 of v20) {
                let v30 = delete v19?.length;
                Math.min(v30);
                --v30;
                Math.acos(v22 * v30);
            }
        }
    }
}
const v37 = new Date();
const v38 = [v37,v37,Date,v37];
const v39 = [v38];
[Date,v37,v39];
let v44 = -6n;
const v45 = v44--;
const o53 = {
    [v45](a47, a48, a49, a50) {
        eval(a47);
    },
};
const v57 = [v38,"gZ",-15];
let v59 = -56632;
Math.log10("gZ");
-8217 * v59;
"gZ" + "gZ";
v59--;
const v66 = ["PI",v57,v57];
const v67 = [64,"PI",v39];
class C68 extends Date {
    #e;
    set e(a70) {
        const v72 = Symbol.iterator;
        const o78 = {
            [v72]() {
                let v74 = 10;
                const o77 = {
                    next() {
                        v74--;
                        return -15;
                    },
                };
            },
        };
    }
    [v37] = -15;
    static #a;
    a = v3;
    [-1] = "PI";
    #f = "sw";
    static [v3] = 8;
    constructor(a80, a81) {
        try {
            this.fuck(a81, "function");
        } catch(e84) {
        }
    }
    static get e() {
        try {
            v67.#e = "PI";
        } catch(e86) {
        }
        return "PI";
    }
    static get g() {
        this !== this;
        try {
            const t93 = "PI";
            t93.#e = v66;
        } catch(e89) {
        }
        return v67;
    }
}
new C68();
new C68();
new C68();
function F93(a95, a96, a97) {
    if (!new.target) { throw 'must be called with new'; }
    function F98(a100, a101, a102, a103) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v104 = new F98();
    const v107 = new BigInt64Array(4046);
    function f108(a109, a110) {
        Object.defineProperty(v104, v104, { configurable: true, enumerable: true, get: f108 });
        let o112 = {
            get e() {
                return a95;
            },
        };
        [,...o112] = v107;
        return a109;
    }
    f108();
}
new F93(F93, F93, F93);
function f115(a116, a117, a118) {
    const o126 = {
        toString(a120, a121, a122) {
            a117 < this;
            return super[a118];
        },
        get d() {
            return this;
        },
    };
    return o126;
}
f115(f115, f115(), f115);
new F93();
