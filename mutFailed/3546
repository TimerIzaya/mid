function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f3() {
        return -9007199254740992n;
    }
    class C4 {
    }
    new C4();
    try {
        this.c = 1073741823;
    } catch(e7) {
    }
    const o8 = {
    };
    class C9 {
    }
    const v11 = new Set();
    function F12(a14, a15) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a14;
        } catch(e16) {
        }
        try {
        } catch(e17) {
        }
        v11[this];
        try {
            new F12(a15, v11);
        } catch(e20) {
        }
    }
    function f21() {
    }
    const v22 = [601759695];
    const v23 = [1073741824,1073741823,1376142744,1073741825];
    function f25(a26, a27, a28, a29) {
        function f31() {
            return 522675525n;
        }
        f21();
        const v34 = new Int8Array();
        v34.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f31);
        let v39;
        try { v39 = v23["find"](..."find", a29, ...v22, ...v23, ...522675525n); } catch (e) {}
        v39 <= a28;
        return arguments;
    }
}
new F0();
new F0();
new F0();
Array(-2100809975);
const v50 = [-Infinity,-1000000.0,-964229.7889241329];
const v51 = [1000.0,7.013617100191173,-351.0818852767976,0.6726521994945021,0.0654548428416345,0.0,357.95756141696074,-114535.71398965968];
const v52 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
const v53 = [v52];
[v50,v51,v53,v53,v52];
new Float32Array(4);
new Uint32Array(2);
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
}
const v70 = new F64(F64, F64, F64, F64);
for (let v71 = 0; v71 < 25; v71++) {
    v70["p" + v71] = v71;
}
class C75 {
    constructor(a77, a78) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
}
new C75();
function f82(a83) {
    const o87 = {
        __proto__: 2,
        ...a83,
        p(a85, a86) {
            return a86;
        },
    };
    return o87;
}
%OptimizeFunctionOnNextCall(f82);
new Uint8Array(0);
function F89(a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    const t90 = Array(11);
    t90[212] -= 3774;
    const v97 = (4096).constructor;
    try { new v97(this); } catch (e) {}
    a92++;
    this.g = a91;
}
new F89();
const t98 = F89.constructor;
new t98();
