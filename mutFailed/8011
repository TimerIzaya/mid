const v0 = [];
function f4(a5) {
    const o23 = {
        __proto__: v0,
        "f": -10n,
        set constructor(a7) {
            super.b = this;
            new BigInt64Array(243);
            new Int16Array(10);
            try {
                v0.valueOf = a7;
            } catch(e15) {
            }
            const o19 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o19);
            new Uint16Array(1);
        },
    };
    return o23;
}
f4(268435456n);
const v25 = f4(25477n);
const v26 = f4(-10n);
let v29 = 2;
const v30 = [-1558038614,-38212,-1558038614,v26];
const v31 = [v30,-1558038614,v0,268435456n,25477n];
[v31,v31];
const v34 = new BigUint64Array();
const v37 = [588238.1771407782,0.8486066695974275,1000000000000.0,-506296.48394393414,-864.44977696432];
const v39 = new Uint32Array();
let v40 = -4294967297n;
const v41 = v40--;
const v42 = [601759695];
const v43 = [1073741824,1073741823,1376142744,1073741825];
function f45(a46, a47, a48, a49) {
    const v50 = a46?.constructor;
    try { new v50(a46, a49, v43); } catch (e) {}
    const v53 = arguments.length;
    function f54() {
        try { ("Vre").charAt(4096); } catch (e) {}
        let v57;
        try { v57 = ("Vre").codePointAt(v37); } catch (e) {}
        v57 ^ v57;
        let v59 = Float64Array;
        v59 = a47;
        b = v37;
        let v60 = v37.length;
        const v61 = v60++;
        try {
            v43.some(a47);
            const t52 = "Vre";
            t52[2] = a47;
            const v63 = v25 ^ v61;
            v63[6] = v0;
            v29 = v63;
            v30["copyWithin"](v53, -38212, v63);
        } catch(e66) {
        }
        const o77 = {
            "c": v40,
            "c": v42,
            valueOf(a68, a69) {
                return a68;
            },
            1073741824: v39,
            [v40](a71, a72, a73, a74) {
                eval();
            },
            "arguments": 5,
            256: a49,
        };
        o77[256];
    }
    f54();
    const v81 = Array();
    try { v81.findLast(v34); } catch (e) {}
    v81.unshift();
    try { Int8Array.keys(); } catch (e) {}
    const v86 = new Int8Array();
    const v89 = v86.buffer.slice(2147483648);
    const v92 = new URIError(1024);
    const v93 = v92[3];
    v93 + v93;
    let v96 = 9;
    Math.sinh(v96);
    Math.trunc(Uint32Array);
    Math.log2(v89);
    const v100 = --v96;
    Math.imul(v96, v41);
    Math.sin(v100);
    Math.random();
    1024 * v93;
    for (let v105 = 0; v105 < 5; v105++) {
    }
    %OptimizeFunctionOnNextCall(f54);
    try { v43["find"](..."find", a49, ...v42, ...v43, ...522675525n); } catch (e) {}
}
for (let v108 = 0; v108 < 10; v108++) {
    f45(v39);
}
%OptimizeFunctionOnNextCall(f45);
f45(5, v34, 522675525n, f45);
