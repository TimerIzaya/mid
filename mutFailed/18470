new Int16Array(1463);
const v5 = new BigInt64Array(255);
function f6(a7, a8, a9, a10) {
    function f11() {
        const o15 = {
            valueOf(a13, a14) {
                return f6;
            },
        };
        o15.valueOf();
        return a10;
    }
    f11();
    f11();
    return f6;
}
f6();
f6();
%VerifyType(BigInt64Array);
let v23;
try { v23 = v5.lastIndexOf(BigInt64Array, 255); } catch (e) {}
[1011221217,-18707,49098,-1100679592,-576820440,1000,16,-65537,1444417524,1287822863];
[257,10000,127,9007199254740991,-5];
function f26() {
    const v27 = [f26];
    function f28(a29) {
        return a29;
    }
    v27.constructor = f28;
    const v30 = v27.constructor;
    v30(v30, f28);
    return f26;
}
%OptimizeFunctionOnNextCall(f26);
[-2147483648,0,56372,-12,6];
new BigUint64Array(256);
[-1.023531552628413e+308];
[-7.397161648351686e+307,-8.419237172624334e+307,7.0208953979793e+307,-1000.0,-457715.16216204385,-2.0,0.5447936528901711,1.7976931348623157e+308,1.0719609513602376e+308];
[-3.5270961269298517,3.0,-633.6270950106135,-520.7430372323607,-45547.36514125683];
function f37() {
    return v5;
}
function F38() {
    if (!new.target) { throw 'must be called with new'; }
}
const v40 = new F38();
const v41 = new F38();
class C42 extends F38 {
    static {
        try {
        } catch(e44) {
        }
    }
    [v41];
    constructor(a46) {
    }
    [v5];
    static 2147483648;
    4;
}
const o47 = {
};
new Int16Array(Int16Array);
new Int16Array(6);
const v53 = new C42();
v53.hasOwnProperty(v40);
const v55 = async (a56, a57, a58) => {
    new Date(Date);
    function f61(a62) {
        return a62;
    }
    const o65 = {
        "type": "function",
    };
    new Worker(f61, o65);
    try {
        new F38();
    } catch(e68) {
    }
    await v23;
    return a57;
};
const v70 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v72 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v73 = [601759695];
const v74 = [1073741824,1073741823,1376142744,1073741825];
function f76(a77, a78, a79, a80) {
    function f81() {
        let v84 = Float64Array;
        v84 = a78;
        b = v73;
        v70.length;
        try {
            v74.forEach(v84);
        } catch(e87) {
        }
        const v88 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v90 = Symbol.toPrimitive;
        const o97 = {
            toString(a92, a93) {
                const v94 = a80 && v84;
                function f95() {
                    a92 *= v90;
                    return v84;
                }
                return v94 <= v88;
            },
        };
        const o118 = {
            "c": -4294967297n,
            [522675525n](a100, a101) {
            },
            "c": v73,
            valueOf(a103, a104) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a106, a107, a108, a109) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v72,
            ...v73,
            "type": "Vre",
            ..."Vre",
            valueOf(a112, a113) {
                return a113;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a115, a116, a117) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f81();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f81);
    try { v74["find"]("find", a80, v73, v74, 522675525n); } catch (e) {}
}
for (let v124 = 0; v124 < 10; v124++) {
    f76();
}
