function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 12;
    } catch(e3) {
    }
    try {
        this.c = 12;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
class C11 extends F0 {
    #h;
    #valueOf(a13, a14, a15) {
        try {
            a14.h = v5;
        } catch(e16) {
            function f17() {
                for (let v18 = 0; v18 < 5; v18++) {
                    "p" + v18;
                }
                class C23 {
                }
                function F27(a29) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v30 = a14.constructor;
                    try { new v30(); } catch (e) {}
                    this.g = -1517929768;
                    this.g = -1;
                    this.h = a29;
                }
                const o33 = {
                    "b": -1000000.0,
                    "h": -1540034480,
                };
            }
            f17();
        }
        return 536870912;
    }
    static #c = 100910865;
    [v5] = v6;
    [F0] = v5;
    static [v7] = v6;
}
const v35 = new C11();
const v38 = Symbol.keyFor(v35());
function f40() {
    return "function";
}
const v41 = new C11();
new C11();
class C43 {
    static g;
    static {
        for (let v45 = 0; v45 < 25; v45++) {
            const v46 = [601759695];
            const v47 = [1073741824,1073741823,1376142744,1073741825];
            function f49(a50, a51, a52, a53) {
                try { new a50(); } catch (e) {}
                a52 << a52;
                function f57() {
                    return a50;
                }
                const v59 = new Int8Array();
                const v62 = BigUint64Array * this;
                v62 - v62;
                Number.isNaN(v62 ** v62);
                function f67(a68, a69) {
                }
                try { f67(); } catch (e) {}
                const v72 = v59.buffer.__defineGetter__;
                try { v72(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f57);
                let v75;
                try { v75 = v47["find"](..."find", a53, ...v46); } catch (e) {}
                const o76 = {
                };
                v75 <= o76;
            }
            for (let v78 = 0; v78 < 5; v78++) {
                f49(this, v78, v78);
            }
        }
    }
    static set a(a81) {
        for (const v82 of v38) {
            super.e = v82;
        }
        super.b = v41;
    }
    [F0] = 536870912;
    2147483649 = v38;
    static h = v6;
    3058268856 = C43;
}
new C43();
new C43();
new C43();
function F87() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v89 = 0; v89 < 1000; v89++) {
        const v91 = new F87();
        const v92 = /8[\cA]v/uisy;
        function f93(a94, a95) {
            const v96 = [v92];
            v91.set(v96, v96);
            return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
        }
        const v104 = ("p" + v89).fontcolor();
        let v105;
        try { v105 = v104.trimLeft(this); } catch (e) {}
        v105[12];
    }
}
new F87();
new F87();
