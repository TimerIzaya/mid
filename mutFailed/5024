new BigInt64Array(1);
function f5() {
    const o13 = {
        "d": 268435440,
        "a": 4.0,
        __proto__: "cJ",
        "f": "cJ",
        ..."cJ",
        8: f5,
        "g": 268435440,
        "e": f5,
        "h": "cJ",
        valueOf(a10) {
            const o11 = {
                __proto__: this,
                2261555780: "cJ",
            };
            super.a;
            return this;
        },
        "c": "cJ",
    };
}
const v14 = f5();
const v15 = f5();
const v16 = f5();
const v17 = [v16,v14,v15,v15];
const v18 = [];
const v19 = [v16,v18,v18,v17];
const v20 = [65535];
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a24;
}
new F21(v17, v20, v19);
const v27 = new Int8Array(2208);
1000 >>> 1000;
const v31 = new Uint32Array(2208);
try { v31.entries(); } catch (e) {}
231 - 231;
const v36 = [-554.3883745381902,874.2208688504531,0.0,1.7976931348623157e+308,1e-15];
v36[8] ^= -297927.3051276769;
F21[v36];
new Int8Array(268435456);
231 >>> 231;
const v42 = 231 ^ 231;
v42 >> v42;
try { Int16Array.bind(1000); } catch (e) {}
const v46 = new Int16Array(1000);
v46[287];
const v48 = [18033,-49027,5,45146,-9223372036854775807,9007199254740991,-9,1168383796];
try { v48.toSorted(v27); } catch (e) {}
const v50 = [-345581139,-644369738,-50263];
v50[1];
try { v50.groupToMap(v50); } catch (e) {}
const t55 = "Bl4";
t55[0] = "Bl4";
const v56 = new BigUint64Array(4096);
v56[3408] = v46;
[8,-2147483648];
9232 / 9232;
let v61 = -309618242;
v61--;
function F63() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F63();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e68) {
    }
}
const v69 = v61--;
Symbol.toPrimitive;
new Float64Array();
class C75 extends Map {
}
new C75();
v69 + v69;
Array(9);
v48.length = 3;
