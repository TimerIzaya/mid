function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -9;
    } catch(e3) {
    }
    try {
        this.h = -9;
    } catch(e4) {
    }
    try {
        this.b = -9;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
function f9() {
    return v8;
}
"boolean" == "boolean";
new Uint16Array(2);
const v20 = 1692 ^ 9007199254740991;
v20.toFixed();
Math.atan(Math);
v8.e = f9;
const v24 = /(?:a*)+q(?<a>.)/guds;
for (let v25 = 0; v25 < 50; v25++) {
    f9(v24);
}
const v29 = new Array(9);
const v32 = new Float64Array(5);
new Float64Array(v32);
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    a41[1][1];
}
class C45 extends Date {
}
for (let v46 = 0; v46 < 10; v46++) {
    new C45();
}
const v48 = new Float32Array(6);
const v49 = v48.fill();
("getPrototypeOf").blink();
class C53 {
    ["getPrototypeOf"] = -1.7976931348623157e+308;
}
class C54 extends C53 {
    static {
        class C59 {
            static c = -1000.0;
            static e = 2.0;
            constructor(a61, a62) {
                let v63;
                try { v63 = a61(4.0, 2.0, a61); } catch (e) {}
                const v64 = a61 >>> v63;
                super.g = -1000.0;
                this[0] = v64;
                [-2147483648,-42816,65536,-42352];
                [9223372036854775807,113733823,-2147483648,3717,8,9223372036854775807,-670111099,4,2147483648];
                [-3,-6649,0,-128];
                super[a62] = this;
                try { this["raw"](); } catch (e) {}
            }
            #b;
            o(a71) {
                let v70 = this;
                +64;
                2.0 && 64;
                !2.0;
                v70++;
                ~64;
                Math.max(2.0);
                return 4.0;
            }
            #g = -1000.0;
            static b;
            static #f;
        }
        const v82 = new C59(4.0, 4.0);
        const v84 = new Map();
        C59["oHn4N"] = 9;
        let v86 = 1.0;
        let v87 = v86 > 4.0;
        if (v87) {
            [C59,v87,...v86] = v84;
        } else {
            const v88 = [-1000000.0];
            [v82];
            [v88];
        }
    }
    65537 = v49;
    ["getPrototypeOf"] = C53;
}
new C54();
const v92 = /i3kKxyz{0,1}?/gdiy;
const v93 = /h\P{sc=Greek}\P{gc=Decimal_Number}a\S+/guim;
const v94 = [1.065613492561098e+308];
const v98 = Uint8ClampedArray(512);
new Uint8ClampedArray(798, ...v98, Date, ...v94, ...v98);
const v100 = /exyz?/gvdmsy;
function f101(a102, a103, a104) {
    const o111 = {
        "f": a103,
        "d": a103,
        "h": a103,
        set a(a106) {
            super.d <<= a106;
            Array(9);
        },
        5: v93,
        [v92]: v6,
        [a104]: a104,
        6: a104,
        "b": v93,
    };
    return o111;
}
f101(v92, v93, v6);
f101(v93, v92, v7);
f101(v100, v92, v8);
function F115() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        for (const v120 of Array(19793)) {
        }
        let v121 = -9223372036854775808n;
        v121 %= 45725n;
    } catch(e123) {
    }
}
try { v29(v29); } catch (e) {}
([-11,65536,65537])[1428717040];
"p" + v20;
new F115();
function F131(a133, a134) {
    if (!new.target) { throw 'must be called with new'; }
    const v136 = this.valueOf().constructor;
    try { new v136(v136, v136, v136, a134); } catch (e) {}
    F131 instanceof BigInt64Array;
}
