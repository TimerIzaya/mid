function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 1475928224;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v7 = [-1000000.0,-2.0,0.7940062623406634,2.2250738585072014e-308,175040.77477615396,-2.220446049250313e-16,2.220446049250313e-16];
let v8 = [-767.256341869061,1000000.0,750.259096554601,-4.1392288583032294e+307,-1000000000.0,0.28373572911420397];
-v8;
const v10 = delete v6?.c;
const v14 = [-1000000000.0,-1.0,1000000000.0,0.7381945036706961,2.220446049250313e-16,1.0,-530.0133386888629,1e-15];
let v15;
try { v15 = v14.copyWithin(v6, v7); } catch (e) {}
function f16(a17, a18) {
    try { a17.__defineGetter__(a17, a18); } catch (e) {}
    const o28 = {
        __proto__: a18,
        "a": a17,
        [a18](a21, a22, a23, a24) {
            return v8;
        },
        "e": v7,
        "f": a17,
        "c": v14,
        "h": v14,
        "d": v5,
    };
    try { o28.reduceRight(v8); } catch (e) {}
    return o28;
}
const v30 = f16?.constructor;
try { new v30(v4); } catch (e) {}
f16.f = f16;
const v32 = f16(v8, v7);
v32.f = v32;
const v33 = f16(v14, v7);
let v34 = v6 < 36028;
[...v34] = v8;
Object.defineProperty(v33, "b", { writable: true, configurable: true, enumerable: true, get: f16, set: f16 });
v8 = v15;
try {
    v33.__proto__ = v33;
} catch(e35) {
}
f16(v7, v7);
[1024,61524,9007199254740990,-65536,1000,2147483648];
const v38 = [-2147483647,-8487,10000,-9223372036854775807,4096,13];
try { v38.every(v7); } catch (e) {}
[65535,-642086551,-7844];
function f41() {
    const o42 = {
    };
    return o42;
}
const v43 = f41();
v43.c = v43;
try {
    v32.d = v8;
} catch(e44) {
}
[v8,...v7,v10];
const v46 = f41();
v46.g = v46;
v46.e = v46;
for (let v47 = 0; v47 < 25; v47++) {
    v47 - v47;
    const v49 = [601759695];
    let v50 = v49[0];
    v50--;
    const v52 = [1073741824,1073741823,1376142744,1073741825];
    function f53(a54, a55, a56, a57) {
        a54.f = a54;
        const v58 = a55?.e;
        try { new v58(); } catch (e) {}
        a54[4] = a54;
        a55[4] = a55;
        const v62 = 536870887 % 536870887;
        v62 === v62;
        BigUint64Array * 536870887;
        try { ("find").indexOf(BigUint64Array); } catch (e) {}
        let v67;
        try { v67 = ("find").toWellFormed(); } catch (e) {}
        try { v67.padStart(a57); } catch (e) {}
        try { v52["find"](..."find", a57, ...v49, ...v52); } catch (e) {}
        return v47;
    }
    f53.e = f53;
    for (let v70 = 0; v70 < 5; v70++) {
        v70 & v70;
        f53(v43, v46);
    }
}
