[];
const v3 = new Int8Array(538);
[2.2250738585072014e-308,-6.761667665083264,0.6003860698638425,61.300020136922285,-9.879370271949206e+306,-1.7976931348623157e+308,1000000.0,2.0];
[-2.2250738585072014e-308,799288.4560141552,1000000000.0,0.32829718503442973,-489.2761550618372,-978309.2988076281,2.0,1000000.0,0.8206277722854147];
const v6 = [747173.9911379125,-5.0,0.08451158372855971,2.0,3.0,-271.2784168292875,-3.0];
try {
    v6.toString();
} catch(e8) {
}
new Float32Array(3709);
new Int32Array(2);
new Uint8ClampedArray(-7, v3, v3);
new Uint8ClampedArray(-9223372036854775808);
const v23 = new Float64Array(4);
function f26() {
}
function F27(a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
}
const v32 = [3,64525,-14917];
[967459484,657690363,4294967297,-11];
function f34(a35, a36, a37) {
    const o48 = {
        p(a39, a40, a41) {
            function f42(a43, a44, a45) {
            }
            f42(a39, a37, a36);
            f42(2880, a39, a36, 2880);
            return this;
        },
    };
    for (let v49 = 0; v49 < 25; v49++) {
        function f50() {
            return v49;
        }
        const v51 = [601759695];
        const v52 = [1073741824,1073741823,1376142744,1073741825];
        function f53(a54, a55, a56, a57) {
            f50();
            try { v52["find"]("find", a57, v51); } catch (e) {}
        }
        for (let v61 = 0; v61 < 10; v61++) {
            f53(v61, v61, v52, f53);
        }
    }
    return o48;
}
f34();
const v64 = f34();
f34();
f34();
try { v23.values(); } catch (e) {}
v64[v32];
try {
    v6.length = 3709;
} catch(e69) {
}
class C70 {
}
new Int32Array(1024);
f26();
%PrepareFunctionForOptimization(f26);
f26();
f26();
%OptimizeMaglevOnNextCall(f26);
f26();
