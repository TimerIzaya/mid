const t0 = 255;
const v2 = new t0(255);
new Uint16Array(2262);
try { Array(255); } catch (e) {}
const v9 = Array(4087);
v9[483] = Array;
for (const v10 of v9) {
}
1 & 1;
const v14 = new BigInt64Array(1);
function f15(a16, a17) {
    const o36 = {
        "f": v14,
        "b": a16,
        [a16]: BigInt64Array,
        "a": 2262,
        "g": a17,
        set c(a19) {
            v2.byteLength;
            a19 <<= this;
            v14[a17];
            const v23 = Symbol.iterator;
            const o35 = {
                [v23]() {
                    let v25 = 10;
                    const o31 = {
                        next() {
                            v25--;
                            const v29 = v25 == 0;
                            const o30 = {
                                "done": v29,
                                "value": v25,
                            };
                            return o30;
                        },
                    };
                    let v32 = Boolean;
                    return v32--;
                    class C34 {
                    }
                    C34.name = C34;
                    return o31;
                },
            };
        },
    };
    o36[255] = o36;
    return o36;
}
f15(255, 1)[255];
f15(255, 2262);
f15(1, 2262);
function F41() {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = -(-7);
    v44 ** v44;
}
F41.arguments = F41;
class C48 {
    #c = "toUpperCase";
    get a() {
        const v50 = this << "toUpperCase";
        const v51 = v50 ^ v50;
        let v52;
        try { v52 = v51(v51, this, v51, v51, v50, this); } catch (e) {}
        v52[v51] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
try { C48.toString(); } catch (e) {}
const t71 = 4087;
const v55 = new t71();
const v56 = new C48();
const v57 = v56?.toLocaleString;
try { new v57(); } catch (e) {}
function f59(a60) {
    const o61 = {
    };
    o61.c = o61;
    return o61[213];
}
try { f59(2262); } catch (e) {}
f59(f59);
f59();
new C48();
[v55,"toUpperCase",C48];
function f68() {
    function f69(a70, a71) {
        return a70;
    }
    f69.then = f69;
    return Promise.resolve(f69);
}
%PrepareFunctionForOptimization(f68);
f68();
%OptimizeFunctionOnNextCall(f68);
f68();
const v76 = [C48];
try { v76.fill(Array); } catch (e) {}
const v78 = [v55];
v78[0] = v78;
let v79 = -4n;
v79--;
const v82 = 35530n & 35530n;
v82 ^ v82;
try { Float64Array(35530n, "toUpperCase"); } catch (e) {}
