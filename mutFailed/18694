const v0 = [3.0,-3.0,-5.0,0.5336798534635558,884010.3692623642,4.0,-2.0];
new Uint16Array(Uint16Array);
const v5 = new Int8Array(268435456);
const v7 = Number(Number);
try { v7.isExtensible(v5); } catch (e) {}
const v9 = [2.0,4.0,0.2318386799739517,0.20073339141269086,Infinity,602508.0464364833,-4.0,-112.51623886425091,Infinity];
const v10 = [-1000000000000.0,-Infinity,3.1289907623717212,55146.89378362126,0.9976605259349742,NaN,1000000000000.0,0.8794016035665457,-3.0,232.7380664620946];
function f11(a12) {
    const o23 = {
        3: v0,
        valueOf(a14, a15) {
            throw a15;
            +a12;
            const v20 = -(-13);
            a15--;
            v20 % a12;
            return v20;
        },
        "h": v9,
        [a12]: a12,
        [v0]: v0,
    };
    return o23;
}
const v24 = f11(v10);
const v25 = f11(v10);
const v26 = f11(v10);
const v27 = [-2147483647,65535,-65535,-519,129,257,-54281];
[360704697,11,9740];
const v29 = [9007199254740991,-15516,1073741823,65536,-371536265];
const v31 = [v29,[v24,v0,v29],v0];
const v32 = [v31,v31];
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v27;
    } catch(e37) {
        function f38() {
            if (f38 <= v24) {
                function f40() {
                    return v29;
                }
            } else {
                try { v32.entries(); } catch (e) {}
            }
            const v42 = /Cs[\cz]*/vi;
            v42.toString(a35, f38, v42, v42, f38);
            return a35;
        }
        f38();
        f38(this, v32);
    }
    const v48 = new Uint8ClampedArray(Date);
    const v49 = Date >> a35;
    function f50() {
        return v0;
    }
    v48.byteOffset ^= v49;
    Uint8ClampedArray[4] = v48;
    const o52 = {
    };
    try {
        o52.f = a36;
    } catch(e53) {
    }
}
new F33(v26, v25);
new F33(v26, v24);
new F33(v25, v25);
const v59 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
const v60 = [601759695];
try { v29["find"](..."find", -1148418937, ...v60); } catch (e) {}
const o63 = {
};
v59.toLocaleString();
for (let i68 = 0, i69 = 10;
    (() => {
        const v70 = i68 >= i69;
        class C71 extends Date {
            #n(a73) {
                const o75 = {
                    "execution": "sync",
                };
            }
        }
        return v70;
    })();
    i69++) {
    class C81 {
        constructor(a83, a84) {
            function f85(a86) {
                return v5;
            }
            const o89 = {
                "type": "function",
            };
            new Worker(f85, o89);
        }
    }
}
