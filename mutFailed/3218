const v2 = new BigInt64Array(221);
let v3 = 10;
const v4 = v3++;
const v6 = Float64Array.length;
const v7 = new Float64Array(v3);
const v8 = v7?.constructor;
let v9;
try { v9 = new v8(v7, v2, Float64Array); } catch (e) {}
const v12 = new Float64Array(3);
let v13 = -12;
function f19() {
    const o34 = {
        m(a21) {
            3938 & 3938;
            try {
                v2.__proto__ = v9;
            } catch(e24) {
            }
            for (let v25 = 0; v25 < 100; v25++) {
                f19();
            }
            Int8Array.name = Int8Array;
            const v28 = new Int8Array(3938);
            let v29 = 3;
            let v30 = 0;
            v30 >> v30;
            for (let i = 0; i < 5; i++) {
                [...v29] = v28;
                v30++;
            }
            const o33 = {
            };
            o33.h = o33;
        },
    };
    o34.m(o34, o34, o34, f19, f19);
    return o34;
}
const v36 = f19();
const v37 = v36?.m;
v4 || v37;
const v40 = new Set();
Object.defineProperty(v40, v13, { configurable: true, get: f19 });
v36[1221482845] <<= 3;
try { new v37(v2); } catch (e) {}
v13 /= v6;
delete v7?.byteLength;
v12.__proto__;
4096n <= Float32Array;
f19();
try {
const t0 = 6;
t0(6, 6);
} catch (e) {}
