let v2 = "repeat";
class C3 {
    get h() {
        function F5(a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a8;
            } catch(e9) {
            }
            try {
                this.c = a7;
                const v11 = new Int16Array(Int16Array, Int16Array, Int16Array);
                return v11["subarray"]();
            } catch(e14) {
            }
        }
        new F5("bigint", "cT");
        new F5(this, "cT");
        const v17 = new F5(this, v2);
        return v17;
    }
}
new C3();
new C3();
const t24 = "cT";
const v20 = new t24();
class C21 extends C3 {
    static #valueOf(a23, a24, a25, a26) {
        class C28 {
        }
        const v29 = C28.constructor;
        const v31 = new Uint8ClampedArray();
        class C32 {
            constructor(a34, a35, a36, a37) {
                const v38 = this.constructor;
                try { new v38(a35, v29, 42853, a35); } catch (e) {}
                for (let v40 = 0; v40 < 5; v40++) {
                    ~a36 >>> v40;
                    v31[v40] = a37;
                }
            }
        }
        a24 | this;
        ([-3,2147483648,127,18127,7,5]).toLocaleString();
        ([NaN,52.65298068517177,-4.0])["includes"](-6, -9223372036854775807);
        v2 /= "cT";
        a26.__proto__;
        super.h;
        new Date();
        const t49 = ("bigint").constructor;
        new t49();
        const v59 = new a26();
        function F60(a62, a63) {
            if (!new.target) { throw 'must be called with new'; }
            a63--;
            const v65 = a62?.constructor;
            (-9223372036854775807).MAX_SAFE_INTEGER;
            new v65();
            const v68 = this.constructor;
            try { v68(a62, v59); } catch (e) {}
        }
        const v71 = ("-9223372036854775808").normalize("NFC");
        function F73(a75, a76, a77, a78) {
            if (!new.target) { throw 'must be called with new'; }
            const v79 = this.constructor;
            try { new v79(154, a78, 154, a76); } catch (e) {}
            if (a75) {
                typeof F73;
            } else {
                try {
                } catch(e82) {
                }
            }
        }
        new F73();
        return v71;
    }
    static h = v20;
}
new C21();
new C21();
new C21();
function f87() {
    let v88 = 946.0676210033328;
    function F89() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v91 = 0; v91 < 500; v91++) {
            ("p" + v91).fontcolor().trimLeft()[12].substring();
            this || (this * this);
        }
    }
    new F89();
    v88++;
    const o102 = {
        __proto__: v88,
    };
    return f87;
}
%PrepareFunctionForOptimization(f87);
f87();
%OptimizeFunctionOnNextCall(v2);
f87();
