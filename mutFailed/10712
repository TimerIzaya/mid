const v0 = [2.2250738585072014e-308,7.197673966898019,0.0,-1000000000.0];
const v1 = [-1000000000000.0,839147.4310416477,-4.627530135001607,-1.7593040080045148e+308,7.6289912357811005,2.2250738585072014e-308,1.4708959922391636e+308,-1000.0,NaN];
const v2 = [Infinity,-1.0,-84.2936261041109];
let v5 = -1073741824;
({"length":v5,} = v0);
const v6 = v2 << 3;
let v7 = Symbol;
const v8 = v7.isConcatSpreadable;
v7.unscopables &= v5;
try { v0.shift(); } catch (e) {}
-3;
let v12 = -4294967296;
const v14 = -1e-15 & v1;
v14 * v14;
v12++;
+v14;
v0[v8] = v1;
async function f20(a21, a22, a23, a24) {
    ({"c":v7,"length":a23,} = a23);
    v12 ^ v7;
    await v6;
    return a23;
}
f20(v14, -1246832858, v0, v14);
function f29() {
    return v5;
}
let v31 = "7";
const o34 = {
    "maxByteLength": 2147483647,
};
const v36 = new SharedArrayBuffer(9, o34);
class C38 extends Int8Array {
    f;
}
new C38();
new C38();
new C38();
new Int8Array(v36);
v31 = "dfth";
new f29();
const v48 = (-1246832858) ** -1246832858;
Math.clz32(v36);
Math.abs(1272601327);
-1246832858 - v48;
Math.expm1(v0);
v0 >> (-1246832858 / v36);
new Date(..."undefined");
