const v0 = [];
function f1() {
    const o9 = {
        "e": v0,
        "h": v0,
        "a": v0,
        "b": v0,
        p() {
            const v3 = super.d;
            super[v3] = v0;
            return v3;
        },
        o(a5) {
            const o7 = {
            };
            return gc(o7);
        },
        3158430996: v0,
        3: v0,
        2: v0,
    };
    return o9;
}
f1();
f1();
f1();
function F13() {
    if (!new.target) { throw 'must be called with new'; }
    function f15(a16) {
        for (let i = 0; i < 10; i++) {
            ["object"];
        }
    }
    Object.defineProperty(this, "c", { enumerable: true, set: f15 });
    this.c = -28191;
}
/a{1,2}?[t(x)(x)(x)\3*]?/udmy;
/(?:a{5,1000000}){3,1000000}/gvis;
/\ud808\udf45*/vdims;
new BigInt64Array(3394);
new f1();
function f29(a30, a31) {
    return f29;
}
function f32(a33, a34, a35) {
    const o38 = {
        get e() {
            try {
            } catch(e37) {
            }
        },
    };
}
new Uint8ClampedArray(0);
new Uint8ClampedArray(145);
class C43 {
}
const v44 = new C43();
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1073741824;
    } catch(e48) {
    }
    try {
        this.f = 1073741824;
        const v49 = [-1.5645136499685964e+308,-4.455146091404086e+307,-6.885938370216613,-Infinity];
        const v50 = [-8.594679214373069e+306,-1000.0];
        const v51 = [-1.0,-3.0,1000000000000.0,0.4992460480015034,-1000000000000.0,-1.7976931348623157e+308,0.8138769867150808];
        try {
        const t0 = 1073741824;
        t0(F45, v49, v51, 1073741824, F45);
        } catch (e) {}
        [1073741824,this,1073741824,v50];
        [this,v49,[v51,F45,v50],F45];
        function F57() {
            if (!new.target) { throw 'must be called with new'; }
            function F59(a61, a62) {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C63 {
                static get g() {
                    super.subarray();
                }
            }
        }
    } catch(e66) {
    }
}
const v67 = v44.constructor;
let v68;
try { v68 = v67(v67, C43); } catch (e) {}
function f69() {
    const v71 = ("D")[0];
    try { v71.substring(v68); } catch (e) {}
    return v68;
}
%PrepareFunctionForOptimization(f69);
f69();
%OptimizeFunctionOnNextCall(f69);
f69();
