const v0 = [-1261041181];
const v1 = [-2147483647];
let v2 = [242176628,-1706133877,-2147483649,907356906,9,6,5];
function f3(a4, a5) {
    try { a5.group(a5); } catch (e) {}
    const o12 = {
        "b": a5,
        set b(a8) {
        },
        "arguments": v2,
        [v0]: a4,
        __proto__: v0,
        [a4](a10) {
            v2 = v0;
            super[v1] = this;
            v1.__proto__;
            return v1;
        },
        "g": a4,
        [a4]: a4,
        "h": v1,
        ...a5,
        ...v2,
    };
    return o12;
}
const v13 = f3(v0, v2);
v13.b = v13;
const v14 = f3(v2, v1);
v14[4] = v14;
const v15 = f3(v0, v0);
class C16 extends f3 {
    o(a18, a19, a20, a21) {
        a21 ** v0;
        try {
            v13.__proto__ = a21;
        } catch(e23) {
        }
        return a21;
    }
    e = f3;
    [v14] = f3;
    c = v13;
}
C16.prototype;
const v26 = new v13();
new C16();
const v28 = v15.undefined;
new C16();
[-1000000000000.0,3.0];
const v31 = [-792.7681716705628,1.3481276002483665e+308,-2.2250738585072014e-308,0.47182949008122355,-2.220446049250313e-16];
try { v31.findLastIndex(v28); } catch (e) {}
const v33 = [0.0,4.0,-0.0,0.5528390119844933,1.134864118375931e+308,1000000000000.0,1.0,3.786635842455522e+307,0.37329279364971324];
v33[3] = v33;
function f34() {
}
class C35 {
    o(a37, a38) {
        for (const v40 of "bigint") {
        }
        f34();
    }
}
try { new C35(); } catch (e) {}
new C35();
const v44 = new C35();
try { v44.constructor(); } catch (e) {}
const v46 = v44?.constructor;
let v47;
try { v47 = new v46(); } catch (e) {}
const v48 = v47?.constructor;
try { new v48(); } catch (e) {}
/(x)(x)(x)\1/uis;
const v51 = [f34];
try { v51.reduce(f34); } catch (e) {}
try { v51.map(v2); } catch (e) {}
const v54 = [f34,v51,C35];
try { v54.toString(); } catch (e) {}
let v56;
try { v56 = v2.shift(); } catch (e) {}
v56.arguments = v56;
try { new Float32Array(v26, v13, v44); } catch (e) {}
function F60() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(Float32Array); } catch (e) {}
    try { Symbol.keyFor(this); } catch (e) {}
    const o65 = {
    };
}
const o66 = {
};
o66.g = o66;
o66.h = o66;
new Float32Array(260330366);
new F60();
Float64Array.g = Float64Array;
new Float64Array();
const v75 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
v31[5];
const v77 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
v77.g = v77;
class C78 {
}
C78.length;
C78.g = C78;
const v80 = new C78(v75, 659.0540372978887);
const v81 = v80?.constructor;
try { new v81(); } catch (e) {}
const t108 = "valueOf";
t108[6] = "valueOf";
("valueOf").localeCompare();
new Float32Array();
