const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v0;
    } catch(e3) {
    }
    try {
        this.h = v0;
        try {
            this.fuck(v0, 0.49435060840545286);
        } catch(e6) {
        }
    } catch(e7) {
    }
    try {
        this.c = v0;
    } catch(e8) {
    }
}
const v9 = new F1();
function f10() {
    let v11 = -1;
    const o14 = {
        set b(a13) {
            v11 <<= v11;
        },
    };
    return v0;
}
v9[Symbol.toPrimitive] = f10;
const v17 = new F1();
const v18 = new F1();
class C19 {
    static h;
    static #e = F1;
    constructor(a21) {
        this.length = C19;
        super.h;
        try {
            this.#e %= a21;
        } catch(e23) {
            e23.constructor = Symbol;
            const v24 = e23?.constructor;
            try { new v24(C19); } catch (e) {}
        }
    }
    [v9];
}
const v28 = Array(670);
const v29 = v28?.findIndex;
try { new v29(v17); } catch (e) {}
function f31(a32, a33, a34, a35) {
    return arguments;
}
const v37 = new C19(v17);
v37.length = v28;
v37.length = v37;
new C19(v18);
new C19(v9);
65537 * 65537;
try { ("m").padEnd(670); } catch (e) {}
try { ("Ut0RN").codePointAt("Ut0RN"); } catch (e) {}
139837843 ^ 139837843;
9 >> 9;
function F63(a65) {
    if (!new.target) { throw 'must be called with new'; }
    0 / 0;
}
F63.arguments = F63;
