new WeakMap();
new WeakSet();
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v9 = new Int16Array(512);
const v13 = [1.7754312477895002e+308,-5.222433190075309,-1.7976931348623157e+308,7.946171059355148,0.40414902234327965,1000.0,-103405.77967821865,-Infinity,NaN,1.7976931348623157e+308];
const v14 = [0.22970466031530812,NaN,NaN,Infinity];
try { v14.copyWithin(512, v9); } catch (e) {}
class C16 {
    constructor(a18, a19) {
        super["fround"] = v14;
    }
}
const v20 = new C16();
v20.a = v20;
function f21(a22) {
    return f21;
}
f21.d = f21;
v14[10000] = v13;
const v25 = [v20];
const o26 = {
    "arguments": v25,
    "type": "function",
};
const v27 = o26?.__lookupSetter__;
try { new v27(64); } catch (e) {}
const v29 = new Worker(f21, o26);
try { v29.terminateAndWait(); } catch (e) {}
const v31 = new Int16Array(64);
v31[28];
new Int16Array(2);
try { new BigUint64Array(v13, v9, BigUint64Array); } catch (e) {}
class C38 extends BigUint64Array {
}
C38.e = C38;
("c").normalize();
