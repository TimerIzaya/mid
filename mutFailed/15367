new Uint8Array(1003);
new BigInt64Array(127);
new BigUint64Array(2875);
[];
const v14 = new Date();
v14.toLocaleDateString();
const o24 = {
    [null]() {
        try { this.null(this, null); } catch (e) {}
        const v20 = Array(Array);
        for (let v21 = 0; v21 < 5; v21++) {
            const v22 = v21 || v20;
            v22 ** v22;
        }
    },
};
const v29 = 2.2250738585072014e-308 | 2.2250738585072014e-308;
v29 == v29;
const v36 = [335610671n,0.3352975315574327,-319.91710284458327,15n];
function f37(a38) {
    function F39() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
Object.defineProperty(v36, "g", { writable: true, configurable: true, enumerable: true, set: f37 });
v36.g = v36;
const v41 = [2.2250738585072014e-308];
try { v41.entries(); } catch (e) {}
const v43 = [v41,0.3352975315574327];
v43[0] = v43;
[15,3,-9066,-7];
const v46 = ([1,-1643840771,4,1111495904,-9007199254740992,-268435456,255,-403790861,268435439])?.filter;
v46[0] = v46;
try { v46(490.5202885889528); } catch (e) {}
try { new v46(2.2250738585072014e-308); } catch (e) {}
[21431,50,2015939235,-30775,-9223372036854775808,4294967296,15,-5512,-1711043381];
501822767n ^ 501822767n;
const v52 = 501822767n > 501822767n;
v52 || v52;
function f55() {
    return 501822767n;
}
16 / 16;
new Uint8ClampedArray();
new BigUint64Array(4);
try { new Uint32Array(v46, v46, v46); } catch (e) {}
const v65 = new Uint32Array();
Object.defineProperty(v65, "b", { value: -319.91710284458327 });
v65.b = v65;
class C68 {
    b = "c";
    static {
        try { this.toString(); } catch (e) {}
        this.e = this;
        function F71(a73, a74) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            this.constructor;
        }
    }
    static #h;
    268435439;
}
const v77 = new C68();
v77[268435439];
const v79 = new C68();
v79[268435439] = v79;
try { new Date(335610671n, 0.3352975315574327, 0.3352975315574327, 0.3352975315574327, 335610671n, 335610671n, Date); } catch (e) {}
Uint32Array.e = Uint32Array;
const v83 = new Uint32Array(Uint32Array, Uint32Array);
function f84(a85, a86) {
    const v88 = Symbol.hasInstance;
    v79[v88] = v88;
    return a85;
}
v83[Symbol.toPrimitive] = f84;
for (let v91 = 0; v91 < 5; v91++) {
    v83[v91] = v65;
}
2.220446049250313e-16 >>> 2.220446049250313e-16;
2.220446049250313e-16 | 2.220446049250313e-16;
-788.7260290236088 / -788.7260290236088;
-788.7260290236088 + -788.7260290236088;
const v99 = [2.220446049250313e-16,1.7976931348623157e+308];
function f100(a101, a102, a103, a104) {
    v36[1428717040];
    return a104;
}
new WeakMap();
/8[\cA]v/uisy;
try { v99.with(v83, C68); } catch (e) {}
[-788.7260290236088,C68];
class C112 {
}
const v113 = new C112(C112);
const v114 = v113?.constructor;
try { new v114(); } catch (e) {}
for (let v116 = 0; v116 < 10; v116++) {
    async function f117(a118, a119, a120) {
        -a119;
        a120 % a120;
        ~a119;
        const v126 = [1073741824,1073741823,1376142744,1073741825];
        try { v126.entries(); } catch (e) {}
        function F128() {
            if (!new.target) { throw 'must be called with new'; }
            for (let v130 = 0; v130 < 1000; v130++) {
                const v133 = ("p" + v130).fontcolor();
                let v134;
                try { v134 = v133.trimLeft(this); } catch (e) {}
                v134[12];
            }
        }
        new F128();
        function f137(a138, a139, a140, a141) {
            function f142() {
                function f143(a144, a145) {
                }
                const o146 = {
                };
                const o153 = {
                    toString(a148, a149) {
                        function f150() {
                        }
                        const o151 = {
                        };
                        function f152() {
                        }
                    },
                };
            }
        }
        for (let v154 = 0; v154 < 10; v154++) {
        }
        const o155 = {
        };
    }
    f117(-788.7260290236088, -1000000000.0, -1000000000.0);
}
