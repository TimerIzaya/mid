function f0() {
}
const v1 = [f0,f0];
function f2() {
    return f0;
}
Object.defineProperty(v1, "toString", { get: f2 });
const v3 = [v1,f0,v1];
v1.length ^= v1;
let v4;
try { v4 = v1.unshift(f0, f0, f0, ...f0, ...v1); } catch (e) {}
for (let v5 = 0; v5 < 100; v5++) {
    f0();
}
const v7 = [v1,v1,v3];
const v9 = [-3.740442198741426e+307,4.0,2.2250738585072014e-308,-1000000000000.0,-Infinity];
const v10 = [1.2230720274611035e+308,5.0,Infinity,-1.7976931348623157e+308];
function f11() {
    function f12(a13) {
        function F14(a16, a17, a18) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = a17;
        }
        return f2;
    }
    return f12;
}
Object.defineProperty(v10, "valueOf", { configurable: true, enumerable: true, get: f11 });
try { v10.keys(); } catch (e) {}
const v20 = [Infinity];
let v21;
try { v21 = v20.with(v10, undefined); } catch (e) {}
const v24 = new Uint8ClampedArray(14);
const v25 = v24?.findLastIndex;
v25[v25] = v3;
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v25;
    } catch(e32) {
    }
    try {
        this.d = v4;
    } catch(e33) {
    }
}
const v34 = new F26(v10, v25, v20, v20);
new F26(v9, v3, v4, v20);
new F26(v21, v1, v7, v20);
try { new v25(undefined); } catch (e) {}
v24[2];
try {
    v3.with(14, /let*/gdisy);
} catch(e42) {
}
const v44 = new Uint8ClampedArray(98);
function f45(a46) {
    Object.defineProperty(a46, a46, { set: f11 });
    class C47 {
    }
    const v48 = new C47();
    return v48;
}
v44.valueOf = f45;
v44[79] = v44;
new Uint8Array(1000);
class C52 {
}
const v53 = new C52();
function f54() {
    return f2;
}
function f55(a56) {
    try {
        v34.fuck(undefined, F26, -1000000000000.0);
    } catch(e60) {
    }
}
Object.defineProperty(v53, "constructor", { enumerable: true, get: f54, set: f55 });
function f61(a62, a63) {
    function f65(a66, a67) {
        return f65;
    }
    try { f65(v53, Uint8ClampedArray); } catch (e) {}
    ("function")[7];
    const o72 = {
        "type": "function",
    };
    o72.arguments = v10;
    new Worker(f65, o72);
}
const v74 = v53.constructor;
v74.prototype = v74;
const v75 = [];
v75.toString = f61;
const v76 = v75.toString();
try { Math.expm1(v76); } catch (e) {}
Math.acosh(1073741825);
