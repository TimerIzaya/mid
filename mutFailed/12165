[-9223372036854775808,-7,-65537,7,4];
[-49404,-9020];
[-11,268435456,13];
new WeakSet();
new BigUint64Array(3806);
new Int8Array(0);
new Int8Array(1485);
const v14 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v15 = 0; v15 < 5; v15++) {
    function f16() {
        let v18 = Float64Array;
        v18 = -4294967295;
        try {
            v14.forEach(v18);
        } catch(e20) {
            class C22 {
                static #c = "bigint";
                static valueOf(a24) {
                    this.#c = "bigint";
                }
            }
        }
        const o29 = {
            toString(a26, a27) {
                v15 && v18;
                return -4294967295;
            },
        };
        class C33 {
            static #a = 5n;
            [3n];
            static c = 3n;
        }
        const v34 = new C33();
        const v35 = new C33();
        const v36 = new C33();
        v36[Symbol.toPrimitive] = f16;
        function F39(a41, a42, a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a42;
            Object.defineProperty(a44, Symbol.toPrimitive, { value: Symbol });
            this.e = a44;
            this.c = a44;
        }
        const v47 = new F39(41372n, v36, v34, v36);
        const v48 = new F39(v36, v36, v34, v36);
        const v49 = new F39(v36, v35, 41372n, v47);
        class C50 {
            a = v48;
            static #c;
            static #e = C33;
            static [v36];
            h = v49;
            #f;
            6 = v47;
        }
        new C50();
        return v14;
    }
    function f53() {
        return Int8Array;
    }
    Object.defineProperty(Int32Array, 0, { writable: true, configurable: true, enumerable: true, get: f53 });
    const v55 = new Float64Array(v15);
    v55["toLocaleString"](Int32Array, v15);
    f16();
    %OptimizeFunctionOnNextCall(f16);
}
