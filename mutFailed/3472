-1057299749n <= -1057299749n;
let v5 = -15n;
v5++;
const v9 = 6 << 6;
v9 + v9;
const v11 = Array(6);
try { v11.findLast(6n); } catch (e) {}
new Date();
const o17 = {
};
v5.e = o17;
let v18 = 549;
v18++;
const v21 = new BigUint64Array(v18);
try { v21.filter(); } catch (e) {}
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    a27--;
    v18 << a26;
    try {
        function F30() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 9007199254740991;
        }
        try { new F30(); } catch (e) {}
        F30.arguments;
        const v36 = a27 && delete F30?.[3189];
        v36 || v36;
        this.e = 1000n;
    } catch(e38) {
    }
    try {
        this.g = o17;
    } catch(e39) {
    }
    try {
        const v42 = new Float64Array();
        const v43 = ("p").lastIndexOf(v42);
        let v44 = v43 * v43;
        v44++;
        a25[1];
        this.f = -1233715429n;
    } catch(e47) {
        [5];
        let v51 = -9007199254740992;
        Math.log10(v51);
        ++v51;
    }
}
const v54 = new F23(65536n, 1000n, 65536n);
const v55 = v54.g;
v55 * v55;
const v57 = new F23(-1057299749n, v5, v5);
new v57(6n, 6n, 6n);
const v59 = [505845.9046423428,566975.3933640176,0.3070372791967264,0.18203639370491953,-701.9688853983366,-1000000000.0];
let v60;
try { v60 = v59.join(v57); } catch (e) {}
v60[36];
[0.11941674459299145,3.0,2.0,217885.1786966785,-1.3962420777219362e+308,-501339.882959694,-373206.2386464173,8.307560752529884e+307,-3.2378818803504057];
[6.076102636358326e+307,3.0];
function F65() {
    if (!new.target) { throw 'must be called with new'; }
    const v67 = this?.constructor;
    v67.length;
    try { new v67(); } catch (e) {}
}
const v71 = new F65();
function f73(a74, a75) {
    const o77 = {
        get d() {
        },
    };
}
f73(v71, "8Yr");
class C79 extends Int8Array {
    8;
    static n(a81, a82) {
        const v83 = super.d;
        try { v83(); } catch (e) {}
        return a81;
    }
}
