[64,-4294967296,757972089,-14956,6];
[11,-2147483648,-4096,-10994,-598086058];
[-11,-4096,23158,-902018757];
new Uint8ClampedArray(127);
const v14 = Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
new Int32Array(9);
function f19(a20, a21, a22) {
    const v23 = a22 >>> a22;
    (v23 - v23) - a20[1];
    return 160;
}
const v28 = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
class C29 {
    constructor(a31, a32) {
        let {...v33} = v28;
    }
}
new Uint16Array(1);
let v37 = new Uint8ClampedArray(10);
class C38 {
    static {
    }
}
const o41 = {
};
class C42 {
    constructor(a44, a45) {
    }
}
const v47 = new C42();
function f48(a49, a50) {
    let [v51,v52,v53] = "function";
    v37++;
    return v14;
}
v47[Symbol.toPrimitive] = f48;
v47 << -1557853178;
eval();
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
        this.a = 1022873702;
    } catch(e64) {
    }
}
new F61();
function F67(a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "b", { writable: true, configurable: true, enumerable: true, value: v37 });
    Math.exp(-Infinity);
    function F74(a76) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C77 extends F74 {
        valueOf(a79, a80, a81, a82) {
        }
    }
    const v83 = new C77();
    v83.valueOf = f48;
    try { v83.valueOf("function"); } catch (e) {}
    this.h = F67;
    try {
        this.b = "function";
    } catch(e85) {
    }
    try {
        this.h = "function";
    } catch(e86) {
    }
}
const v87 = new F67();
new F67();
new F67("function", v87);
const v92 = new Float32Array();
class C93 {
    set d(a95) {
    }
    3120 = C42;
    constructor(a97) {
        const v98 = (a99, a100, a101, a102) => {
            this[536870887] = a97;
            return a102;
        };
    }
    static #m(a104, a105, a106) {
    }
    static {
        for (let v108 = 0; v108 < 10; v108++) {
            function f109() {
                return v108;
            }
            const v110 = [601759695];
            const v111 = [1073741824,1073741823,1376142744,1073741825];
            function f113(a114, a115, a116, a117) {
                function f119() {
                    return a114;
                }
                f109();
                const v122 = new Int8Array();
                function f123(a124, a125) {
                    return a124;
                }
                f123(f123(v111, v92));
                v122.buffer.slice(2147483648);
                %OptimizeFunctionOnNextCall(f119);
                let v132;
                try { v132 = v111["find"](..."find", a117, ...v110, ...v111, ...522675525n); } catch (e) {}
                v132 <= a116;
                return arguments;
            }
            for (let v134 = 0; v134 < 10; v134++) {
                f113();
            }
        }
    }
}
