function F0() {
    if (!new.target) { throw 'must be called with new'; }
    for (let i4 = 0, i5 = 10;
        (() => {
            const v6 = i4 < i5;
            let v7 = 3375;
            const v8 = v7++;
            v8 / v8;
            const v11 = new BigUint64Array(v7);
            let [v12,,v13,...v14] = v11;
            return v6;
        })();
        i4++) {
    }
    try {
        this.a = 268435440;
    } catch(e21) {
    }
    try {
        this.b = 268435440;
    } catch(e22) {
    }
    try {
        this.f = 268435440;
    } catch(e23) {
    }
}
const v24 = new F0();
const v25 = new F0();
const v26 = new F0();
const v27 = [v26];
const v28 = [v24,v26,v26,F0,v24];
const v29 = [v28];
const v33 = Symbol.iterator;
const t34 = "string";
t34[v33] = v33;
([-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1]).pop();
class C38 extends F0 {
    constructor(a40, a41, a42) {
        super();
        const v44 = v29["forEach"](v24, a42);
        super.g = a40;
        try { v28.slice(v44, v44); } catch (e) {}
        try { ("forEach").startsWith("forEach", v44); } catch (e) {}
        v28 % "a";
    }
    static #g;
    static ["a"] = v25;
    a;
    230;
    #f = v26;
}
function F49(a51) {
    if (!new.target) { throw 'must be called with new'; }
}
new Date();
try {
    v26 % 257;
} catch(e56) {
}
new C38(v29, v27, v28);
new C38(v29, v29, v28);
new C38(v29, v29, v28);
const v63 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F64(a66, a67, a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    v63.__proto__.push(F64, a66, a66);
}
new F64();
