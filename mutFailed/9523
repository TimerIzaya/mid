const v0 = /ia\nb\bc((((.).).).)/dimsy;
const v1 = /a*b/guimy;
/EMr/vdy;
const v3 = [v1];
[v1];
const v6 = new WeakMap();
const v8 = new Int8Array();
const v10 = new Uint16Array();
[[v6,v10["values"](...v8, Int8Array, ..."values"),[]]];
[v0,v3,v0,v3];
function f18(a19, a20) {
    return f18;
}
[f18.prototype];
new Map();
[6,268435439,-536870912,-53755,-65537,536870912,-1073741824];
[-28386,64,-256,-11506];
[-4294967296,65535,9007199254740992,-128,2,-2,5,7];
function f27(a28, a29, a30, a31) {
    const v32 = /(?:a*)+q(?<a>.)/guds;
    function f33(a34) {
        a34.dotAll;
        a34.hasIndices = a34;
        Worker(f18);
        const v38 = [-7.264687027014153e+307];
        function F40(a42, a43, a44, a45) {
            if (!new.target) { throw 'must be called with new'; }
            const v46 = this?.__defineGetter__;
            try { v46(undefined, undefined); } catch (e) {}
            try { a42.unshift(a43); } catch (e) {}
            a44 != a44;
            let v50;
            try { v50 = a42.toSpliced(a43, a43); } catch (e) {}
            const v51 = v50?.__defineSetter__;
            try { v51(); } catch (e) {}
        }
        new F40(v38);
        const v54 = a34?.constructor;
        v54.$_;
        v54.lastParen;
        const o63 = {
            get d() {
                const v59 = new Float64Array(Float64Array, Float64Array, Float64Array);
                function f60() {
                    v59.length = 0;
                    return 0;
                }
                f60();
            },
        };
        return v54;
    }
    for (let [i67, i68] = (() => {
            let v64 = 0;
            v64++;
            return [v64, 10];
        })();
        (() => {
            const v69 = i67 < i68;
            v69 || v69;
            return v69;
        })();
        i68--) {
        for (let v76 = 0; v76 < 25; v76++) {
            function F77(a79) {
                if (!new.target) { throw 'must be called with new'; }
                const v80 = [-0.685155357392599,5.0];
                function F81(a83, a84, a85, a86) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v87 = this.constructor;
                    try { new v87(a84, F77, v87); } catch (e) {}
                    v80.length &= 1;
                }
                new F81();
            }
            f33(v32);
        }
    }
    return f27;
}
for (let v92 = 0; v92 < 10; v92++) {
    f27();
}
%OptimizeFunctionOnNextCall(f27);
f27();
