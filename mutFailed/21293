let v4 = 0.5433457639760597;
/[O(?:a+)+0J[x\dz]+]/gvdy;
const v7 = /\u0060/gvdmy;
const v8 = /D/gviy;
class C9 {
    6353277 = C9;
    static e;
    static f;
    7 = "function";
    a = "dFP";
    #c = -2.0;
    static ["function"];
    n(a11, a12) {
        v7.multiline ||= -2.0;
        a12 = "9oS11";
        const v14 = v8 <= -2.0 ? v8 : -2.0;
        ({"f":v4,} = v14);
        ~v4;
        this[a11];
        return v14;
    }
    static [-2.0];
    static d = "dFP";
}
new C9();
new C9();
new C9();
[-96.69376802872296,-1.1688092340658848e+308,5.421894641568482e+307,1000000.0,-1.6913642214273233e+308,NaN,8.187111251567471e+307,894.5818298294412];
[149729.22560246964,0.6666818574898814,-1e-15,920072.3227025957,955.814183445968,Infinity];
[0.6839914595817987,0.7190408093134953];
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    function f27(a28, a29) {
        function f31(a32) {
            this[1073741823] = a32;
        }
        this.onmessage = f31;
        delete C9?.f;
        a25 = -2.0;
    }
    const v36 = [a26,a25];
    const o37 = {
        "arguments": v36,
        "type": "function",
    };
    new Worker(f27, o37);
    const v39 = this.constructor;
    v39.bind(F23, a25, v39, a25);
    try { new v39(); } catch (e) {}
    a26 / a26;
}
new F23();
new F23();
