new Uint8Array(5);
new Uint8Array(3435);
new BigUint64Array(1);
function F15(a17) {
    if (!new.target) { throw 'must be called with new'; }
}
const v18 = new F15(F15);
gc.arguments = gc;
const v20 = gc();
let v21 = -1024;
const v22 = v21--;
function F23(a25, a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
}
const v29 = new F23(v20, v18, v18, v22);
const v30 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
}
class C35 {
}
let v36 = -4294967297n;
const v37 = v36--;
const v38 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
for (let v40 = 0; v40 < 5; v40++) {
    function f41() {
        let v43 = Float64Array;
        Array[0] = v37;
        const v45 = Array();
        v45[1] = v40;
        function f46() {
        }
        function f47(a48) {
        }
        Object.defineProperty(v45, 0, { configurable: true, enumerable: true, get: f46, set: f47 });
        const v49 = v45.unshift(v21);
        const v51 = new Set();
        function F52(a54, a55) {
            if (!new.target) { throw 'must be called with new'; }
            F52(a55, v51);
        }
        v43 = F23;
        const v57 = v30.length;
        const v58 = v57 >>> v57;
        try {
            v58.forEach();
        } catch(e60) {
        }
        const v61 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        Symbol.unscopables;
        class C64 {
        }
        const v65 = new C64();
        try {
            v65.__proto__ = F31;
            const v66 = ["Vre"];
            class C67 {
            }
            function* f68(a69, a70) {
                yield* v66;
                return "Vre";
            }
        } catch(e71) {
        }
        const v72 = Symbol.toPrimitive;
        try {
            Symbol();
        } catch(e74) {
        }
        try { new Symbol(); } catch (e) {}
        const o82 = {
            toString(a78, a79) {
                const v80 = v40 && v43;
                a78 *= v72;
                return v80 <= v61;
            },
        };
        const o104 = {
            "c": v36,
            [522675525n](a85, a86) {
            },
            valueOf(a88, a89) {
                return a89;
            },
            [v36](a91, a92, a93, a94) {
            },
            "e": -268435456,
            "arguments": v38,
            ...v29,
            [v72]() {
            },
            "type": C35,
            ..."Vre",
            valueOf(a97, a98) {
                return v37;
            },
            ..."Vre",
            get h() {
                return f41;
            },
            4: "Vre",
            toString(a101, a102, a103) {
                return this;
            },
        };
        new Float32Array(Array, v49, v57);
        new Float64Array(v49);
        const v110 = new Uint16Array();
        const v111 = v110?.entries;
        try { new v111("Vre", v111, v111, v111); } catch (e) {}
        return f47;
    }
    f41();
    %OptimizeFunctionOnNextCall(f41);
}
