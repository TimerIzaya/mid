[];
const v1 = /xyz{1,32}?/udsy;
/eiG+/vimsy;
const v3 = /Ba\P{sc=Greek}/gudim;
class C4 {
    #d;
    static toString(a6) {
        function F7(a9, a10) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a9;
            } catch(e11) {
            }
            try {
                this.h = v1;
            } catch(e12) {
            }
        }
        new F7(v1, a6);
        new F7(a6, a6);
        const v15 = new F7(v1, v3);
        return v15;
    }
}
const v16 = new C4();
const v17 = new C4();
let v18 = new C4();
class C19 extends C4 {
    e = v3;
    #toString(a21, a22, a23, a24) {
        this[this] >>>= a23;
        v18 = v16;
        try { a23(v16, a22, v16, a24, a23); } catch (e) {}
        for (let v26 = 0; v26 < 32; v26++) {
            v16["p" + v26] = v26;
        }
        return a24;
    }
}
new C19();
new C19();
new C19();
function f33(a34) {
    v18[536870912] = v17;
    const v35 = [];
    function f36(a37) {
        try {
            v35.some();
        } catch(e39) {
            e39.stack;
        }
        return a37;
    }
    f36(f36);
    v35.toString = f36;
    return a34;
}
Float64Array[Symbol.iterator] = f33;
const v44 = new Float64Array(Float64Array, Float64Array, Float64Array);
const v49 = [Int8Array];
v44[138.3846677150391] = 1000000000.0;
v49.length += 172;
