[5.0];
const v1 = [-1.7976931348623157e+308,-0.0,-Infinity,-3.190059912872913,912.0478784904526,0.6453522452964389,24574.3516569637,-3.0];
[5.0];
new Map();
const v5 = [-4.056079634698109,0.0,0.2740990223499047,-Infinity];
[-352986.74970516574,4.538953027955328e+307,672677.4463277324,-Infinity,0.7910670579810156];
[-3.310248254882097e+307,5.0,1.0,-1e-15,435.91165592860534,-2.2250738585072014e-308,171.34186443900148,8.229014902072905];
new Uint32Array(34);
const v13 = new Uint16Array(512);
const v16 = new Uint32Array(5);
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this.constructor;
    try { new v23(); } catch (e) {}
    typeof Float32Array;
}
Uint8Array[1] = Uint32Array;
const v29 = new Uint8Array(Uint8Array);
function f30(a31, a32, a33, a34) {
    const v35 = a32++;
    v35 << a33;
    const o37 = {
        ...v29,
    };
    function f38() {
        function f39(a40) {
            Object.defineProperty(v16, "e", { get: f30 });
            try { v1.copyWithin(4294967297, a31, a33); } catch (e) {}
            [-4.6651132009221925,2.2250738585072014e-308,0.16881729862090555];
            [-981931.592531242,-80.63028098669167,0.0];
            [1000000000.0,4.1715225887635313e+307,-721.0364249648802,-3.0,0.4302941061283043];
            return a34;
        }
        return f39;
    }
    Symbol.toPrimitive;
    Object.defineProperty(o37, a34, { configurable: true, enumerable: true, get: f38 });
    o37[2] = o37;
    const v51 = o37[2];
    v51[v13.toPrimitive] = f38;
    v51[1] = 4294967295;
    const v54 = v51[2];
    v5[Symbol.toPrimitive] = Symbol;
    v54[2] = v35;
    v51 >>> v51;
    return v51;
}
for (let v58 = 0; v58 < 500; v58++) {
    Uint8Array(v58, f30, v58);
}
const v60 = new F17();
new F17(F17, v60, F17, v60);
