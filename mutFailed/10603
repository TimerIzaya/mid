function f0() {
    2.2250738585072014e-308 ^ 2.2250738585072014e-308;
    const v6 = 2.2250738585072014e-308 != f0 ? 2.2250738585072014e-308 : f0;
    ("Fgp")[8];
    const v8 = f0();
    const o32 = {
        "a": 2.2250738585072014e-308,
        get g() {
            let v9 = this;
            const v13 = Math.sqrt("Fgp");
            Math.fround(-1);
            const o15 = {
            };
            const v16 = [-10,54545,2005744164,-1038396756,-1914419652,268435456,-13,129,28425,1000];
            const v18 = new f0();
            for (let v19 = 0; v19 < 32; v19++) {
                const t16 = "Fgp";
                t16["p" + v19] = v19;
            }
            function f22(a23, a24) {
                a24[v16] = a24;
                return a24;
            }
            Object.defineProperty(v18, Symbol.toPrimitive, { value: f22 });
            -1 + (-1 & -1);
            (-918.588283962077) ** v9;
            v9++;
            return Math.tanh(v13);
        },
        "e": v8,
        "f": f0,
        [f0]: f0,
        "b": "Fgp",
        "h": v6,
    };
    const v35 = new BigInt64Array();
    function f36() {
        const v38 = v35[undefined] instanceof f36;
        const o39 = {
        };
        v35.h = o39;
        o39.h = v38;
        return o39;
    }
    const o40 = {
        "apply": f36,
    };
    return undefined;
}
const v41 = f0();
const v42 = f0();
const v43 = f0();
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = f0;
    try {
        this.e = a46;
    } catch(e48) {
    }
    const o50 = {
    };
    o50.d = o50;
    o50.b = "string";
}
new F44(v43, v43);
async function* f52(a53, a54, a55) {
    return a54;
}
const v56 = f52();
class C57 {
}
const v58 = new C57();
function f59() {
    f0 !== v56 ? f0 : v56;
    return v42;
}
v58.constructor = f59;
v58.constructor;
const v63 = new F44(v42, v41);
new F44(v41, v41);
[F44,v41];
[F44,[v41,v63],v43,v41,v42];
for (let v71 = 0; v71 < 5; v71++) {
    function f72() {
        const v74 = ("1073741824").constructor;
        v74().replaceAll().toLowerCase();
        return v74;
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
}
