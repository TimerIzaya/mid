class C2 {
    constructor(a4, a5, a6, a7) {
        function f8(a9) {
            Uint8Array.prototype = Uint8Array;
            const v12 = new Uint8Array(165);
            v12[113] = v12;
            return a6;
        }
        a4[Symbol.toPrimitive] = f8;
        new Uint16Array(4294967295);
        function F18(a20, a21, a22) {
            if (!new.target) { throw 'must be called with new'; }
            const v23 = this.MAX_VALUE;
            try { new v23(Uint16Array); } catch (e) {}
            a20 * a20;
            this.d = a20;
        }
        new F18(a4, a7, Uint16Array);
    }
}
function f27(a28) {
    let v29;
    try { v29 = a28.some(); } catch (e) {}
    new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
    return v29;
}
C2.valueOf = f27;
const v33 = new C2(C2, C2, C2, C2);
function f34() {
    C2.constructor;
    return C2[v33];
}
v33.toString = f34;
new C2(v33, v33, v33, v33);
const v40 = [0.0,-8.175012286916044,1.7976931348623157e+308];
async function f42(a43, a44) {
    'use strict';
    a44[9] = v40;
    return -21133.120743932668;
}
function f52(a53) {
    class C54 {
        set d(a56) {
        }
    }
    return C54;
}
BigUint64Array.toString = f52;
const v57 = BigUint64Array.toString();
async function f58(a59, a60, a61) {
    await v57;
    const v63 = [601759695];
    function F64() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v66 = 0; v66 < 1000; v66++) {
            ("p" && v66).fontcolor();
        }
    }
    new F64();
    resizable = v63;
}
new Map();
function f72() {
    function f74(a75, a76) {
        const o78 = {
            [8.946504243780264e+307]: a76,
            get g() {
                return a76;
            },
        };
        return o78;
    }
    return f72;
}
class C79 extends f72 {
}
const v80 = new C79();
const v82 = new Date(v80);
v82.setUTCMinutes(f72, v82, Date);
