const v2 = new Float32Array(3558);
for (let i5 = 0; i5 < 0; i5++) {
    new Float32Array(i5, 2218);
}
new Uint8Array(2218);
new Uint16Array(255);
let v19 = [-3.0];
const v20 = [5.0,-872.4889692335445,-2.220446049250313e-16,1.0414092172325481e+308,1.7976931348623157e+308];
const v21 = [-2.2250738585072014e-308,0.4807583852026508];
new Float32Array(1275099829);
const v25 = 621616231 | v19;
const v26 = v19 - 621616231;
Math.exp(v19);
const v28 = --v19;
Math.round(v26);
Math.clz32(v28);
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = Float32Array;
        try { a37.min(a36, v2, a37); } catch (e) {}
        [128,268435441];
        [-624013859,-7,9];
        [-43440932,-4294967295,268435441,65535,-1,-8,3350,268435439,1355143234];
        try {
            const o42 = {
            };
            this.fuck(a34, -41447, a37, o42);
        } catch(e44) {
        }
    } catch(e45) {
    }
}
new F32(3558, 3558, 2218, 3558);
new F32(1275099829, 255, 255, -41447);
new F32(2218, 2218, -41447, -42727);
const v51 = new BigInt64Array(243);
if (621616231 < 621616231) {
    try {
    const t0 = 3558;
    t0(-41447, -42727, Uint8Array, -41447, v21);
    } catch (e) {}
    Math.sign(v25);
    Math.pow(-1, 0.004353061019060744);
    -1 | !v20;
    Math.sign(-1);
    Math.tanh(v20);
} else {
    const o65 = {
        "maxByteLength": 4096,
    };
    const v67 = new SharedArrayBuffer(42, o65);
    new BigUint64Array(v67);
}
try { Uint8Array.from(v51); } catch (e) {}
