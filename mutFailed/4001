new BigInt64Array(482);
new Uint16Array(10);
new BigInt64Array(383);
new Array(7);
function f15() {
}
Object.defineProperty(f15, "valueOf", { writable: true, configurable: true, enumerable: true, value: f15 });
function f16() {
    return f15;
}
-520531413 >> -520531413;
-65536n + -65536n;
Map.prototype;
const v27 = new Map();
try { v27.set(Map, 512n); } catch (e) {}
try { new BigInt64Array(-9513n, f15, -9513n); } catch (e) {}
const v32 = new BigInt64Array(0);
let v33 = 1024;
let v34 = v33--;
v34++;
const v38 = Symbol.toPrimitive;
Int32Array[v38] = Array;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v33);
const v42 = -9513n != 1;
v42 || v42;
if (v42) {
    try {
        new BigInt64Array(127);
    } catch(e46) {
    }
} else {
    var h = v42;
}
5 ^ 5;
const v53 = new BigUint64Array(5);
Object.defineProperty(v53, "a", { writable: true, configurable: true, enumerable: true, value: v38 });
let v54;
try { v54 = v53.join(v33); } catch (e) {}
try { v54.replace(Int32Array, f15); } catch (e) {}
Int32Array.length;
-f15;
try {
    v32.f = 0;
} catch(e60) {
}
const v61 = new Int32Array(1);
v61.valueOf = Symbol;
v61[0];
v61[0] = v61;
new Int8Array(12);
const v66 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v70 = f16();
const v74 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v75 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
let v76;
try { v76 = v75.join(-65536n); } catch (e) {}
function F77(a79, a80, a81) {
    if (!new.target) { throw 'must be called with new'; }
    this[65536] = this;
    const v82 = this?.__lookupGetter__;
    try { new v82(12); } catch (e) {}
    a80 + a80;
    try { a81.find(a79); } catch (e) {}
    try {
        this.d = a79;
    } catch(e86) {
    }
    const v88 = new Uint8Array();
    const v91 = new Uint32Array(104);
    for (const v92 in v91) {
        104 in v88;
        typeof Uint8Array;
    }
    try {
        this.b = a81;
    } catch(e95) {
    }
}
F77.constructor = v70;
const v96 = F77?.constructor;
v96.length = v96;
let v97;
try { v97 = new v96(12); } catch (e) {}
v97.arguments;
const v99 = new F77(Int32Array, 12, v74);
try { new v76(v99, -94307986); } catch (e) {}
try {
    v53.a = -520531413;
} catch(e101) {
}
const v102 = new F77(v74, 5, v75);
v102.length;
const v104 = new F77(v66, 12, v66);
v104[65536];
const o107 = {
};
for (let v108 = 0; v108 < 25; v108++) {
}
