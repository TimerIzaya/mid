[6.404284455855496,0.7428964543008001,5.344508062773441,-4.0,3.028522142069477,-Infinity,0.29725708495618897,-986.7697249375824,-392260.9725753743];
([0.4391347154580403,257.99749453941945,-9.996237582361703,-2.2250738585072014e-308,2.0,0.22007729464719739]).b;
const o3 = {
};
o3[Symbol.toPrimitive] = Symbol;
const v6 = [2.2250738585072014e-308];
for (let v8 in [-65535,536870889,4096]) {
    v8--;
    Math.log10(v8);
    v8 ** 1000000000000.0;
}
[-3.406940446713923e+307,-2.0,-369.59143030141934,1000000000000.0,1.0,5.0,5.0,-1000000.0,-1000000000.0];
function f18() {
    return v6;
}
const t15 = "match";
const v20 = new t15();
function f21(a22, a23, a24) {
    const o25 = {
        ...a24,
        268435441: v20,
    };
    return o25;
}
new Map();
[-182.54585172349016,-744814.6116697663,707.4271078878844,0.3745296493084167,-1.0176312853084863e+308,0.35206970436187623,1000000.0,-0.2671460338898761,411.92963567666425];
[-1000000000.0,-1.6523409058342313,2.220446049250313e-16,-1.7976931348623157e+308];
[-4.0];
class C30 {
}
const v31 = new C30();
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    a35--;
    const v37 = a34?.constructor;
    v37.MAX_SAFE_INTEGER;
    new v37();
    const v40 = this.constructor;
    try { v40(a34, v31); } catch (e) {}
}
const v43 = new Uint8ClampedArray();
for (const v46 in [[v43,v43],v43]) {
}
const v47 = [];
function f48(a49, a50, a51) {
    v47.copyWithin();
    try {
        f48(-268435456, 0.6683462416314783, [-268435456]);
    } catch(e57) {
    }
    const v58 = "string" >> -268435456;
    v58 >> "string";
    return -v58;
}
