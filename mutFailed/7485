function f2(a3, a4, a5) {
    const o7 = {
        [a5]: a4,
        "g": 65536n,
        get a() {
            return a3;
        },
        "a": a5,
    };
    return f2;
}
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    a12--;
    try {
        this.b = a12;
    } catch(e15) {
    }
}
const v16 = new F10(-12n, 1073741824n);
const v17 = new F10(1073741824n, -12n);
const v18 = new F10(-2n, 1073741824n);
const v19 = v18?.__defineSetter__;
try { new v19(-12n, -12n); } catch (e) {}
function F21(a23, a24, a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    a23 === a23;
    try {
        this.h = v16;
    } catch(e28) {
    }
}
try { new F21(1073741824n, v17, v16, v17); } catch (e) {}
const v30 = new F21(-2n, -12n, F10, -12n);
v30.h = v30;
new F21(1073741824n, -12n, v30, -2n);
new F21(-12n, 1073741824n, F21, -12n);
function f34(a35, a36) {
    const o37 = {
        ...a35,
    };
    o37.d;
    return f34;
}
f34.d = f34;
%PrepareFunctionForOptimization(f34);
const t46 = f34();
t46(f34);
%OptimizeFunctionOnNextCall(f34);
f34();
Float32Array.e = Float32Array;
new Float32Array(822);
2930 << 2930;
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v47 = new Uint8ClampedArray(2930);
256 & 256;
const v51 = new BigUint64Array(256);
const v52 = [];
class C53 {
    static get b() {
        const v57 = new Uint32Array();
        const o58 = {
        };
        v57[o58] |= 64;
        try {
            super.getOwnPropertyNames();
        } catch(e60) {
        }
        return v52;
    }
    constructor() {
        const v62 = this?.constructor;
        try { new v62(); } catch (e) {}
        this[v52] = this;
        this[v52] %= this;
    }
    static e;
    [v52];
}
try { new v51(); } catch (e) {}
const v65 = new C53();
const v66 = v65?.__defineSetter__;
try { new v66(v65, Uint8ClampedArray); } catch (e) {}
const v68 = new C53();
v47.length;
class C76 {
    constructor(a78) {
        function f79(a80, a81) {
            a80[5];
        }
        f79(v52);
        f79(v52);
        f79(a78);
    }
    [-9] = v68;
    4294967296;
    5;
}
try { new C76(); } catch (e) {}
new C76();
function f89() {
    Math.max(4.0, 4.0);
    return 4.0;
}
f89();
const v93 = new C76();
new C76();
4294967296 !== v93;
const v96 = v65 << 65535;
v96 + v96;
const v100 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v102 = [601759695];
function f104(a105, a106, a107, a108) {
    function f109() {
        try {
            v100.forEach(a106);
        } catch(e113) {
        }
        const v114 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o120 = {
            toString(a116, a117) {
                (a108 && a106) <= v114;
                return a107;
            },
        };
        const o140 = {
            "c": -4294967297n,
            [522675525n](a123, a124) {
            },
            "c": v102,
            valueOf(a126, a127) {
                return a127;
            },
            [-4294967297n](a129, a130, a131, a132) {
            },
            "maxByteLength": -4294967295,
            "arguments": v52,
            ..."Vre",
            valueOf(a134, a135) {
                return a134;
            },
            ..."Vre",
            4: "Vre",
            "type": "Vre",
            toString(a137, a138, a139) {
                return a139;
            },
            5: -4294967295,
            6: -268435456,
        };
        return a105;
    }
    f109();
    %OptimizeFunctionOnNextCall(f109);
    return v102;
}
for (let v142 = 0; v142 < 5; v142++) {
    f104(v142, v142, v102, v142);
}
const o145 = {
    "execution": "async",
    "type": "major",
};
gc(o145);
const t163 = -9;
t163[9] = -124726096;
this.fuck(this, this, this, this, this);
function f150(a151, a152, a153, a154) {
    return this;
}
8342 >> 8342;
