const v3 = [159145102];
const v4 = [159145102];
const v5 = [159145102,268435456,256,v3,v4];
for (const v9 of Array(4087)) {
}
function f13(a14, a15, a16) {
    function f17() {
        return Array;
    }
    Object.defineProperty(a16, "toString", { get: f17 });
    const o25 = {
        [159145102](a19, a20, a21, a22) {
            try {
                super.valueOf(this);
            } catch(e24) {
            }
            return a19;
        },
        [4096]: v3,
        __proto__: v3,
        "g": 4096,
        [v3]: a16,
    };
    return o25;
}
f13(v4, 256, v4);
f13(v4, 268435456, v5);
f13(v4, 256, v3);
new Array(5);
BigInt64Array.BYTES_PER_ELEMENT;
const v38 = new BigInt64Array(257);
let v39;
try { v39 = v38.join(64); } catch (e) {}
257 != 1590;
new BigInt64Array(1590);
BigInt64Array.name = BigInt64Array;
new BigInt64Array(9);
("boolean").split("toString");
new Uint16Array(257, 58091);
536870888 / 536870888;
function f58() {
    return -2147483648;
}
function F59(a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this?.constructor;
    try { new v62(a61); } catch (e) {}
    try {
        this.h = -9223372036854775807;
    } catch(e65) {
    }
    try {
        this.f = 145253519;
    } catch(e66) {
    }
}
new F59();
-65106n ^ -65106n;
Int8Array.d = v39;
Int8Array.d = Int8Array;
const v73 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
const v74 = /[(?:a*)*]/u;
switch (v73) {
    default:
        let v75;
        try { v75 = v73(); } catch (e) {}
        try { v75(); } catch (e) {}
        break;
    case v74:
}
const o77 = {
    "execution": "async",
};
o77.type = v3;
o77.execution;
const v82 = new Uint8ClampedArray(5);
new Float32Array(v82);
gc(o77);
