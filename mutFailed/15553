function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    function f3(a4) {
        delete a4[1073741824];
    }
    Object.defineProperty(this, "b", { configurable: true, enumerable: true, set: f3 });
    try {
        this.b = f0;
    } catch(e6) {
    }
    const o7 = {
    };
    ("by").normalize();
    [-3.942521664036782e+307,-3.942521664036782e+307,[]];
}
const v13 = new F1();
const v14 = new F1();
const v15 = new F1();
class C16 extends f0 {
    static n(a18, a19) {
        for (let v20 = 0; v20 < 32; v20++) {
            const v22 = "p" + v20;
            v20++;
            (~9007199254740990).asin(2.220446049250313e-16);
            this[v22] = v20;
        }
        function f30(a31, a32) {
            arguments[0] = arguments;
            return a32;
        }
        f30(undefined);
        return F1;
    }
    3097891556 = v14;
    static #e;
}
new C16();
const v36 = new v15();
new Date();
Math.g = Math;
class C41 {
    static [376363416];
    static {
        this.b = f0;
        super.b = this;
        let {...v43} = v15;
    }
}
new C16();
const v45 = [F1];
const o50 = {
    "h": true,
    ...true,
    get c() {
        return this;
    },
    set d(a49) {
    },
    "d": true,
};
[[v13,v45,v36],v15,v45];
const v54 = new Uint8ClampedArray();
class C55 {
    constructor(a57, a58, a59, a60) {
        function f61(a62, a63) {
            const v66 = new Float64Array(216);
            const v68 = new Uint8Array(v66);
            return v68;
        }
        this.constructor = f61;
        const v69 = this.constructor;
        try { new v69(a59, a60, a57, v69); } catch (e) {}
        for (let v71 = 0; v71 < 5; v71++) {
            function f73(a74, a75, a76) {
                const v77 = a76 >>> a76;
                const v78 = v77 - v77;
                a74[1];
                v78 - v36;
                return this;
            }
            v54[v71] = a60;
        }
    }
}
new C55(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray, C55);
