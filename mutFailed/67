const v1 = new Set(Set, Set);
const v4 = new Int8Array(7);
let v5;
try { v5 = v4.fill(v1); } catch (e) {}
65 * 65;
try { new Float32Array(7, 7, Int8Array); } catch (e) {}
const v10 = new Float32Array(7);
try { v10.slice(v10, Set, v5, v10); } catch (e) {}
let v14;
try { v14 = new Float64Array(Float64Array, Int8Array, v4); } catch (e) {}
try { v14.indexOf(v4); } catch (e) {}
new Float64Array(162);
const v17 = [958211.7665748822,-229250.6681847315,5.78374620458602,-822852.7176184042,-1000000000000.0,0.6093489871936428,-0.0,-636.195794077345,583.8754422663048];
try { v17.unshift(Set); } catch (e) {}
const v19 = [-1e-15,-839696.9760532192,0.27138614316895715,-Infinity,4.0,2.2250738585072014e-308];
try { v19.toString(); } catch (e) {}
[0.7743836742323178,149.203303358139,-1.577392255316542e+308,-8.447357962404514,5.0,1.7976931348623157e+308];
try {
const t0 = 65;
t0(Set);
} catch (e) {}
("boolean").normalize()[3];
