let v0 = 6;
Uint8ClampedArray.d = Uint8ClampedArray;
const v8 = new Uint8ClampedArray(2);
const v9 = v8?.constructor;
const o12 = {
    set g(a11) {
    },
};
v0--;
let v14;
try { v14 = new v9(Uint8ClampedArray, -1073741824, 512); } catch (e) {}
new BigInt64Array(v0);
function f18(a19, a20, a21, a22) {
    this.printErr(this, this, a19, this, a21);
    const v26 = new Int32Array(a20, a19, a21);
    try {
        const t16 = null;
        t16.valueOf = v26;
    } catch(e28) {
        e28.message.search();
    }
    return a22;
}
const v33 = new BigInt64Array(128);
try { v33.toSorted(v33); } catch (e) {}
function f35(a36, a37, a38, a39) {
    a36.d = Int8Array;
    const v41 = new Int8Array();
    const v42 = v41.buffer;
    Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
    class C46 extends Uint8Array {
    }
    v42.g = v42;
    return Int8Array;
}
%PrepareFunctionForOptimization(v14);
f35();
%OptimizeFunctionOnNextCall(f35);
const v48 = f35();
try { v48.of(); } catch (e) {}
