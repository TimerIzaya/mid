new Uint8ClampedArray(8);
const v8 = new Uint32Array(1160);
new Float32Array(132);
const v14 = new Int16Array(7);
new Uint32Array(503);
new BigUint64Array(3007);
const v21 = [];
const v22 = [Int16Array];
class C24 extends Map {
}
const v25 = new v21();
const v26 = new C24(v22);
const v27 = new C24(v26);
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v31 = new Uint32Array(v26, v21);
let v32 = -4294967297n;
v32--;
const v34 = [601759695];
const v35 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    const v41 = a37.constructor;
    v34["pop"]();
    try { v41(v41); } catch (e) {}
    try { v41(); } catch (e) {}
    const v47 = arguments.length;
    Object.defineProperty(v25, "e", { configurable: true, enumerable: true, value: f36 });
    v26["toString"](a39, ...v27, arguments, ..."toString", a38, v47);
    function f50() {
        const v52 = ("Vre").charAt();
        try { v52.lastIndexOf(); } catch (e) {}
        ("Vre").codePointAt();
        Uint8ClampedArray.length;
        try {
            v35.forEach();
        } catch(e57) {
        }
        const o70 = {
            "c": v32,
            "EPSILON": v14,
            valueOf(a59, a60) {
                return a37;
            },
            1073741824: v31,
            [v32](a62, a63, a64, a65) {
                eval();
            },
            o(a69) {
                return v32;
            },
            256: a40,
        };
        return a38;
    }
    f50();
    const v73 = Array();
    try { v73.findLast(f36); } catch (e) {}
    let v76;
    try { v76 = v8.of(); } catch (e) {}
    try { v76.join(a38); } catch (e) {}
    for (let v78 = 0; v78 < 5; v78++) {
    }
    try { v35["find"](..."find", a40, ...v34, ...v35); } catch (e) {}
    return "find";
}
for (let v81 = 0; v81 < 10; v81++) {
    f36(v31);
}
%OptimizeFunctionOnNextCall(f36);
f36(v34);
