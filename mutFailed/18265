const v2 = new Int16Array(2594);
new SyntaxError(5);
const v8 = new Uint8Array(1024);
function f12() {
    const o13 = {
    };
    o13.e = SyntaxError;
    o13.d = o13;
    return o13;
}
try { new f12(); } catch (e) {}
function f15(a16, a17, a18) {
    function f20(a21) {
        f12();
        %PrepareFunctionForOptimization(f12);
        f12();
        f12();
        %OptimizeMaglevOnNextCall(f12);
        f12();
    }
    this.onmessage = f20;
    v8[10] = a16;
    try {
        v2.with(-139824521, /lRs6/gudis);
    } catch(e29) {
    }
}
f15[Symbol.toPrimitive] = SyntaxError;
const v34 = [ArrayBuffer,"function","function"];
const o35 = {
    "arguments": v34,
    "type": "function",
};
new ArrayBuffer(f15, o35);
const v37 = f12();
v37[4] = v37;
const v38 = f12();
v38.e = v38;
for (let v39 = 0; v39 < 25; v39++) {
    v39 - v39;
    const v41 = [601759695];
    try { v41.map(v39); } catch (e) {}
    const v43 = [1073741824,1073741823,1376142744,1073741825];
    function f44(a45, a46, a47, a48) {
        a45[4] = o35;
        a46.d = a46;
        a45[4] = a45;
        a46[4] = a46;
        -(BigUint64Array * 536870887);
        try { ("find").isWellFormed("find"); } catch (e) {}
        try { v43["find"](..."find", a48, ...v41, ...v43); } catch (e) {}
        return v39;
    }
    for (let v56 = 0; v56 < 5; v56++) {
        f44(v37, v38);
    }
}
