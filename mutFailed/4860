function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 2;
    } catch(e3) {
    }
    try {
        this.h = 2;
    } catch(e4) {
    }
    try {
        let v5 = F0 in this;
        let v6;
        try { v6 = this.m(v5, 2, v5); } catch (e) {}
        const v7 = delete this[2469];
        v7 && v7;
        v5 = v6;
        this.b = 2;
    } catch(e12) {
    }
    2 ** this;
    const v15 = this.h?.[F0];
    const v16 = [F0];
    v16[0] = v16;
    const v17 = [v16,F0,v15];
    try { v17.toLocaleString(); } catch (e) {}
    [F0,v16,v15];
}
function f20(a21, a22) {
    return ([927716.746385878]).indexOf;
}
F0[Symbol.toPrimitive] = f20;
const v27 = new F0();
const v28 = new F0();
const v29 = new F0();
class C30 extends F0 {
    47 = v27;
    static [v29];
    n(a32) {
        this[a32] = v28;
        this[v28] >>>= this;
        try {
            super.getUTCDate(this, this, v27, a32, v27);
        } catch(e34) {
        }
        return a32;
    }
}
C30.name;
const v36 = new C30();
v36.length = v36;
let v37 = new C30();
v37[Symbol.toPrimitive] = Symbol;
v37[47];
new C30();
let v44 = -4096;
v44++;
const v47 = v44 % v44;
-(~-4294967296);
Math.log10(v47);
+-4294967296;
--v37;
const v53 = Math.exp(v44);
v53 * v53;
try { Float64Array.from(v36); } catch (e) {}
const v61 = new Float64Array(1000);
v61.includes(5);
