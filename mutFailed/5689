class C3 {
    constructor(a5) {
        try {
            this.f = a5;
        } catch(e6) {
        }
        const o7 = {
        };
        Math.log1p(1842642860 % !o7);
        Reflect.construct(a5, [a5,Reflect,Reflect], a5);
    }
    valueOf(a17) {
        const o18 = {
        };
        try {
            o18.f = this;
        } catch(e19) {
        }
        try {
            const o20 = {
            };
            o20.f = this;
            o20.g = a17;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.f = this;
            o22.g = a17;
            o22.d = a17;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.f = this;
            o24.g = a17;
            o24.e = 0.07974897152253235;
        } catch(e25) {
        }
        return 0.6297051633365477;
    }
}
new C3(536870889);
const v27 = new C3(C3);
const v28 = new C3(v27);
function f32(a33, a34) {
    const o53 = {
        81: a33,
        "a": 536870889,
        "c": 256,
        "h": v28,
        1: a33,
        __proto__: C3,
        set d(a36) {
            for (let i39 = 0, i40 = 10; i39 < i40; i39++, i40--) {
                const o51 = {
                    "execution": "async",
                    "type": "major",
                };
                gc(o51);
            }
        },
    };
    return o53;
}
f32(256, 256);
f32(536870889, 256);
f32(536870889, 256);
([Float32Array])["concat"]().pop();
