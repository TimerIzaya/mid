function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -450695926;
    } catch(e3) {
    }
    try {
        this.c = -450695926;
    } catch(e4) {
    }
    try {
        function f5() {
        }
        const v7 = new Uint8Array();
        function f8(a9, a10, a11, a12) {
            const v13 = a11 ^ a11;
            const o17 = {
                "b": a9,
                "c": a12,
                ...v7,
                n(a15, a16) {
                    return v13;
                },
            };
            return v13;
        }
        this.a = -450695926;
    } catch(e18) {
    }
}
new F0();
new F0();
new F0();
-0.0 + -0.0;
const v24 = [12];
v24.toLocaleString();
class C28 {
    ["getPrototypeOf"] = -1.7976931348623157e+308;
}
class C29 extends C28 {
    ["getPrototypeOf"] = C28;
}
const v30 = new C29();
v30.getPrototypeOf;
-43330n / -43330n;
[8];
class C38 {
}
class C39 extends C38 {
}
function f41(a42, a43, a44, a45) {
    arguments[2] = arguments;
    arguments[7];
    return a42;
}
f41();
let v54 = 93776225;
v54--;
for (let i59 = 0, i60 = 10; i59 < i60; i60--) {
}
-(-12);
function f69(a70, a71, a72, a73) {
    arguments[2] = arguments;
    arguments[7];
    return a70;
}
for (let i80 = 0, i81 = 10; i80 < i81; i81--) {
    for (let v88 = 0; v88 < 5; v88++) {
    }
}
-16 - -16;
class C92 {
    constructor(a94, a95, a96) {
    }
}
const v99 = new Float32Array(99);
for (const v100 of v99) {
    function F101(a103, a104) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v100;
    }
    new F101();
}
const v107 = -4294967295 << -12;
const v109 = new Int32Array();
v109[3];
const v112 = new BigInt64Array();
const v113 = `
    var c = v112;
`;
new Int32Array(8);
new Int16Array(186);
eval(v113);
v107 & v107;
const v124 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
new Int8Array(v124);
const v128 = new v30();
const v129 = new v30();
let v131 = -65536n;
function f132(a133, a134, a135) {
    let v136;
    try {
    const t0 = -12;
    v136 = t0(a134);
    } catch (e) {}
    v136 = a135;
    v131 >>= a135;
    v128[10] = 1n;
    v129.f;
    return v131;
}
function f138() {
}
f138.toString = f138;
function F139(a141, a142) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f138;
    this.a = f138;
}
const v147 = !(369263011 ^ "grow");
function f148() {
    v24["pop"]() <= v147;
    return 369263011;
}
f148();
