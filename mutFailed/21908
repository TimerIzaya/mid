class C3 {
    2 = -2147483648;
    static {
        this[3411];
        this[12];
        class C9 {
            static [12825];
            static #b;
            static [2.0];
        }
    }
    static c;
    static #a;
    static f;
}
new C3();
const v13 = new C3();
new v13();
const v29 = new Uint8ClampedArray(16);
v29[10] = v29;
const v31 = -1322;
new Uint8ClampedArray(1322);
const v34 = (-1.0)[315];
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 28246561n;
        class C41 {
        }
        const v42 = new C41();
        const o49 = {
            valueOf(a44, a45, a46, a47) {
                const o48 = {
                    ["6"]: v42,
                };
                return "6";
            },
        };
        return o49;
    } catch(e50) {
    }
    try {
        for (let i53 = 0; i53 < 6;) {
            const t43 = -15n;
            var c = t43(this, a37);
        }
        this.b = a40;
    } catch(e62) {
    }
}
new F35(1073741824n, 1073741824n, 257n, "6");
const v64 = new F35(1073741824n, 257n, 257n, v31);
const v65 = new F35(v34, 257n, 257n, "536870889");
new BigUint64Array(6);
function f70() {
    for (let i72 = 0; i72 < 1;) {
        function F77(a79, a80, a81) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
    return f70;
}
-2147483648 >>> 3768;
const v85 = new BigInt64Array(4046);
v85[123];
-115;
function f90(a91, a92) {
    a91++;
    a92 + a92;
    const v95 = a91++;
    v95 >> v95;
    try {
        v64.toString = a92;
    } catch(e97) {
    }
    Object.defineProperty(v65, v65, { configurable: true, enumerable: true, get: f90 });
    let o99 = {
        "d": a91,
        ...a91,
        get e() {
            return a92;
        },
    };
    ("29753").replaceAll("29753", "b").split("b");
    for (let v104 = 0; v104 < 25; v104++) {
        class C105 {
            constructor(a107) {
                function f108() {
                    return a107;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f108 });
            }
        }
        new C105(v104);
        new C105();
    }
    [,...o99] = v85;
    a92[4046];
    const o114 = {
        "maxByteLength": 3035,
    };
    try {
        o114.f = 3.0;
    } catch(e116) {
    }
    new ArrayBuffer();
    new Float32Array();
    return 115;
}
f90(4046, 3768);
try { Uint8ClampedArray.bind(f90); } catch (e) {}
