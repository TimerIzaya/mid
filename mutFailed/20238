new Uint8ClampedArray(1000);
new BigInt64Array(15);
new Uint32Array(9);
[-2.2250738585072014e-308,-2.220446049250313e-16];
const v10 = [1000000000000.0];
const v11 = [4.352858389693176e+307];
const v12 = [9,v11,Uint32Array];
v12?.groupToMap;
try { new v11(Uint8ClampedArray); } catch (e) {}
const v15 = [Uint8ClampedArray,v12,v11];
[v10];
let v17;
try { v17 = v15.includes(Uint8ClampedArray); } catch (e) {}
new BigUint64Array();
const o29 = {
    [v17](a22, a23, a24) {
        class C26 {
            #d = 4096;
            static {
                v11.#d;
            }
        }
    },
};
o29.h = o29;
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = a34.constructor;
    const v37 = /[a-zA-Z0-9]/gvisy;
    const v38 = /abc?/gvmy;
    v38.e = v38;
    v38[-2] ^= v37;
    v38.exec("Q8F");
    const v41 = new Int16Array();
    try { v41.copyWithin(this, v41); } catch (e) {}
    const v43 = v41.lastIndexOf(F31, v35);
    v43 % v43;
    const v45 = v43 ^ v43;
    try { new v35(this, a33); } catch (e) {}
    new Uint32Array(v45);
    for (let v50 = 0; v50 < 5; v50++) {
    }
}
new v17();
const t44 = v11.constructor;
new t44();
