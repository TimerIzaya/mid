const v0 = [1000000.0,1000000000000.0,5.0,0.9447379733221478,-3.0,-5.0,3.2399130490457573,-4.1842626646044924e+307,-1000000.0,0.8019102810694261];
const v1 = [-2,1024];
function F2(a4, a5, a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v10 = 0; v10 < 100; v10++) {
        const o14 = {
            6: undefined,
            "d": undefined,
            [268435439n]: 2105444095n,
            __proto__: v1,
            "g": undefined,
            "b": 2105444095n,
            "arguments": this,
            valueOf(a13) {
            },
        };
        o14[1] = o14;
    }
}
const v15 = [-190.6881820584456,4.0,-403288.82604751445,-Infinity,720160.1702206514,-1000.0];
const v16 = /(J5a{0,1}?)/y;
const v17 = [601759695];
const v18 = [1073741824,1073741823,1376142744,1073741825];
function f19(a20, a21, a22, a23) {
    ~a21;
    try { a20(); } catch (e) {}
    const v26 = a22 << a22;
    v26 % v26;
    function f28() {
    }
    const v30 = new Int8Array();
    BigUint64Array.length;
    const v34 = BigUint64Array * 536870887;
    let v35 = v34 - v34;
    v35++;
    v34 ** v34;
    try { Number(v16); } catch (e) {}
    const v41 = v30.buffer.__defineGetter__;
    try { v41(); } catch (e) {}
    try { v18["find"](..."find", a23, ...v17); } catch (e) {}
}
for (let v45 = 0; v45 < 5; v45++) {
    f19(v15);
}
[-944082.4531253156,0.5291925217561074,-0.703011429178801,Infinity,-2.2250738585072014e-308,-4.0,0.8812643406633843,-0.0,1.397644216866956,0.2643402907023763];
const v48 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
const v49 = new v1();
for (let v50 = 0; v50 < 25; v50++) {
    v48[4294967295] = v49;
}
function f51() {
    return v0;
}
try { f51(); } catch (e) {}
function f56(a57, a58) {
    const o61 = {
        set d(a60) {
        },
        "a": a57,
    };
    const v64 = new Int8Array(268435456);
    return v64;
}
try { f56(15135); } catch (e) {}
f56(925.1427495594241);
function F69(a71) {
    if (!new.target) { throw 'must be called with new'; }
    a71 / a71;
    const v73 = this.constructor;
    v73.caller = v73;
    try { new v73(3n); } catch (e) {}
}
class C77 {
    toString(a79) {
        const t74 = super["bigint"];
        t74[9] = 0;
    }
}
function f85() {
    const v87 = f51(-5.0);
    function f88(a89, a90, a91, a92) {
        const o93 = {
            [f51]: a91,
            "c": v87,
            ...a92,
        };
        return f88;
    }
    return "toStringTag";
}
/7\P{Any}/vims;
/[^(?:ab)+BQx]/ims;
/jT(?:a{5,1000000}){3,1000000}+/dsy;
("29753").replaceAll("29753");
