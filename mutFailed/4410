class C3 {
}
const v4 = new C3();
const v5 = v4.__lookupGetter__;
try { v5(); } catch (e) {}
class C7 {
    set d(a9) {
        a9 + a9;
        const v11 = [-729574.8782662717,NaN,NaN,1.4631545214551755e+308,771.103726894627,54.21198698191802];
        const v12 = [4294967297,9007199254740990,-536870912,-2,-39056,1073741823,-4096,536870889];
        class C13 {
            1073741823 = v12;
            static #d;
            6;
            static 1224847725;
            [v11];
        }
        new C13();
        super.d = this;
    }
    static g = 512;
    [-30729];
    constructor(a16) {
        ("YFo3C").localeCompare(a16, "YFo3C");
    }
    static 1;
    a;
    static {
        do {
        } while ((() => {
                const v21 = 0 < 0;
                /9f8\xf0\x9f\x92\xa9/diy["compile"]();
                return v21;
            })())
    }
    d = C7;
    static #f = "YFo3C";
    2147483649;
    static 4096;
}
new C7();
new C7();
new C7();
const v33 = new Set();
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    class C38 {
    }
    const v41 = new BigUint64Array(64);
    v41["copyWithin"]();
    try {
        class C45 extends Set {
        }
        function F46(a48, a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
        }
        this.d = a36;
    } catch(e51) {
        for (let [v52,v53] of a36) {
        }
        0 < 3;
        function f57(a58) {
            return a58;
        }
    }
    try {
        const v59 = v33[this];
        function f60() {
            return f60;
        }
        const o61 = {
            __proto__: f60,
            "e": f60,
        };
        ([WeakSet,WeakSet])[1];
        new F34(v59, -268435456n);
    } catch(e66) {
    }
}
new F34();
new F34();
new F34();
