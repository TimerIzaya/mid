function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F0;
    try {
        this.h = -2;
    } catch(e3) {
    }
    try {
        this.c = -2;
    } catch(e4) {
    }
    try {
        this.f = -2;
    } catch(e5) {
    }
}
new F0();
const v7 = new F0();
new F0();
const v11 = new Uint32Array(16);
const v14 = new Int8Array(2);
v14[Int8Array] = v14;
new Float64Array(571);
const v20 = new Uint8Array(10);
const v23 = new Float64Array(2713);
const v26 = new Int32Array(16);
const v29 = new Uint8Array(9);
function F30(a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v29;
    } catch(e35) {
    }
    try {
        this.e = v26;
        const v44 = new Uint8ClampedArray(16);
        v44[10] = v44;
        const v46 = -1322;
        v44["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v20);
        } catch(e48) {
        }
        const v50 = new Uint8ClampedArray(1322);
        let v51 = v50[315];
        function F52(a54, a55, a56, a57) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = this;
            try {
                this.a = "536870889";
            } catch(e58) {
            }
            try {
                this.b = a57;
            } catch(e59) {
            }
        }
        new F52(1073741824n, 1073741824n, 257n, "6");
        const v61 = new F52(1073741824n, 257n, 257n, v46);
        const v62 = new F52(v51, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 >>> 3768;
        const v70 = new BigInt64Array(4046);
        v70[123];
        -115;
        function f75(a76, a77) {
            a76++;
            a77 + a77;
            const v80 = a76++;
            v80 >> v80;
            try {
                v61.toString = a77;
            } catch(e82) {
            }
            Object.defineProperty(v62, v62, { configurable: true, enumerable: true, get: f75 });
            let o84 = {
                "d": a76,
                ...a76,
                get e() {
                    return a77;
                },
            };
            [,...o84] = v70;
            a77[4046];
            const o88 = {
                "maxByteLength": 3035,
            };
            o88.n = v62;
            const v90 = v51--;
            v50[v90] ||= v90;
            try { o88.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f75(4046, 3768);
        try { Uint8ClampedArray.bind(f75); } catch (e) {}
    } catch(e99) {
    }
}
new F30(9, 16, 16);
new F30(16, 2, 2);
new Uint16Array(1527);
new Uint8Array(16);
let v110;
try { v110 = v23(); } catch (e) {}
v110[10] = v11;
new Uint8Array(v7, 128, 2);
Uint8Array > 10;
try {
    v23.__proto__ = v11;
} catch(e113) {
}
new Float32Array(128);
new BigInt64Array(3);
new Int16Array(124);
const v124 = new Int16Array(2);
v124.lastIndexOf(2.220446049250313e-16);
