const v2 = new BigInt64Array(2211);
function f5() {
    function f6() {
        const o7 = {
        };
        new Proxy(v2, o7);
        return 0;
    }
    return f6;
}
Object.defineProperty(Int8Array, "toString", { get: f5 });
const v11 = [601759695];
const v12 = [1073741824,1073741823,1376142744,1073741825];
function f13(a14, a15, a16, a17) {
    -a14;
    a16[3] + 2;
    try { v12["58572"](..."58572", a17, ...v11); } catch (e) {}
}
for (let v23 = 0; v23 < 10; v23++) {
    f13(v23, v23, v12);
}
try { new Int8Array(0, 2211, Int8Array); } catch (e) {}
new Int8Array(0);
const v29 = new Uint8Array(2024);
const t24 = "9007199254740992";
t24["255"] &= 7;
function f34() {
    return f13;
}
Object.defineProperty(Int8Array, Symbol.toPrimitive, { writable: true, configurable: true, get: f34 });
class C38 extends Int8Array {
    [12];
}
try { new C38(); } catch (e) {}
try { ("caller").anchor(Int8Array); } catch (e) {}
/(a\1)*/gvdm;
const v45 = /\p{General_Category=Decimal_Number}/uimy;
v45.d = v45;
/va\n/dis;
const v47 = [0.5056701084838725,-61629.798017403926,NaN,864.4381894698445,2.220446049250313e-16,783231.8077183717];
try { v47.some(v29); } catch (e) {}
function f49() {
    const v52 = new Int32Array(257);
    return v52;
}
f49.caller = f49;
const v54 = Symbol.toPrimitive;
function F55() {
    if (!new.target) { throw 'must be called with new'; }
}
new F55();
try { ("unregister")["valueOf"](); } catch (e) {}
Object.defineProperty(v47, v54, { enumerable: true, value: f49 });
const v61 = [5,4142,11,268435456,11,-30743,4096,268435440,1753297073];
function f62() {
    Int8Array.b = Int8Array;
    gc();
    Object.defineProperty(v61, 1, { writable: true, enumerable: true, value: v61 });
    return Int8Array;
}
f62();
f62();
const v69 = new BigUint64Array();
const o73 = {
    set e(a71) {
        return;
    },
};
v69.BYTES_PER_ELEMENT;
function F75(a77, a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    function f81() {
        const o83 = {
            ..."255",
        };
        const v84 = [o83,o83,o83,o83];
        function f85() {
            return v84;
        }
        return this;
    }
    a77[Symbol.toPrimitive] = f81;
    function f88() {
        function f89(a90) {
            try {
                a80.valueOf = f62;
            } catch(e91) {
            }
            return v29;
        }
        return f89;
    }
    function f92(a93) {
        this[0];
    }
    Object.defineProperty(a79, "valueOf", { configurable: true, enumerable: true, get: f88, set: f92 });
    a77 >>> a77;
    try { new a79(a79, a79, 2024, a79); } catch (e) {}
    a80.name;
    try {
        v69[16] = v47;
    } catch(e98) {
        e98.b = e98;
    }
}
F75[Symbol.toPrimitive] = f34;
const v104 = new Int16Array([4]);
v104.h = 2211;
v104.h = Int8Array;
new F75(16, 16, F75, F75);
