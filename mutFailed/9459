class C3 {
    c = 4294967295;
    [628945641] = -61763;
    [-61763] = 628945641;
    [C3];
    #c = -61763;
    [4294967295];
    8 = 4294967295;
    #b = 4294967295;
    static toString(a5) {
        try {
            this.fuck(628945641, -740.5003509106145, undefined, -1e-15);
            let v11 = Math.tan(4294967295);
            v11--;
            return 3454;
        } catch(e14) {
        }
        return 628945641;
    }
}
try { new C3(); } catch (e) {}
const v16 = new C3();
const v17 = new C3();
const v18 = new C3();
Set.length;
const v24 = new Set();
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.constructor;
    let v32;
    try { v32 = new v31(v18, a29, a29, a28); } catch (e) {}
    a27[628945641];
    a29 - a29;
    const o35 = {
    };
    const v37 = new Proxy(this, o35);
    try { a28(v37, this, v32, v37, a30); } catch (e) {}
    try {
        this.e = -61763;
    } catch(e39) {
    }
    try {
        this.d = v16;
    } catch(e40) {
    }
    try {
        this.h = -61763;
    } catch(e41) {
    }
}
const v42 = new F25(v16, -2.2250738585072014e-308, 628945641, 4294967295);
v42.length = v42;
const v43 = new F25(v16, -2.2250738585072014e-308, 628945641, -61763);
v43.g = v43;
new F25(v17, -4.0, 628945641, 4294967295);
try { Math.clz32(v24); } catch (e) {}
Math.atan(+-1.0406565190769766e+308);
