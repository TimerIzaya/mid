class C3 {
    static m(a5, a6) {
        let v7 = Worker;
        try {
            const t4 = "a";
            t4.length = v7;
        } catch(e8) {
        }
        Math.cos(v7);
        Math.log("setDate");
        -601987968 | 739.0005489620194;
        Math.expm1(v7);
        "setDate" | 739.0005489620194;
        ++v7;
        Math.expm1("setDate");
        return "a";
    }
}
new C3();
const t19 = "setTime";
const v20 = new t19();
const v21 = new C3();
function f22(a23, a24, a25, a26) {
    const o37 = {
        set b(a28) {
            +536870912;
            +v21;
            Math.hypot(v21);
            -a26;
            536870912 >> a24;
            v21 % 536870912;
        },
        [a24]: a26,
        127: a25,
        "e": "setTime",
        [v20]: C3,
    };
    return o37;
}
f22("setDate", C3, "setTime", f22);
f22(v21, f22(v20, f22, v20, f22), "a", f22);
[9];
[-9223372036854775807,8,-2147483648,26932];
[-40491,-2130384602,5];
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(); } catch (e) {}
    try {
    } catch(e47) {
    }
    function F48() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v50 = new F48();
    const v51 = v50?.__defineSetter__;
    try { v51(); } catch (e) {}
    function f53(a54, a55) {
        const o56 = {
        };
        return o56;
    }
    const v57 = f53(v51, f53);
    function f58() {
        return f58;
    }
    const v61 = new Float32Array(218);
    for (const v62 of v61) {
        v62 >>> v62;
        Object.defineProperty(v57, Float32Array, { configurable: true, enumerable: true, get: f53, set: f58 });
    }
}
new F44();
new F44();
new F44();
