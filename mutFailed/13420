let v0 = [-256,65535,-9647];
const v1 = [268435456,-17760,1615669486,-22834,-12631];
let v2 = [14874,221267999,-4294967296,268435440,-42141,-15499,23630,30668,-65535,-52037];
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a12;
    } catch(e13) {
    }
}
new F9(v1, v1);
const v15 = new F9(v0, v0);
const v16 = new F9(v2, v0);
class C17 {
    static set d(a19) {
        v2 = v0;
        try {
            super.toString(a19, this);
        } catch(e21) {
        }
    }
    static #b;
    constructor(a23, a24) {
        try {
            this.b = 5;
        } catch(e25) {
        }
    }
    f = 0.08605194147545714;
}
new C17(v15, 0.08605194147545714);
new C17(v2, 69.42478215202664);
v0 ^= v0;
Math.exp(-65536);
const v31 = ++F9;
Math.floor(5);
Math.pow(-65536, C17);
const v34 = 5 & 5;
5 | 5;
v31 + v34;
new C17(C17, 69.42478215202664);
/5*/gi;
const v40 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v41 = [601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    function f50() {
        const o67 = {
            "c": -4294967297n,
            [522675525n](a55, a56) {
            },
            "c": v41,
            valueOf(a58, a59) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v40,
            ...v41,
            "type": "Vre",
            ..."Vre",
            valueOf(a61, a62) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": a45,
            "type": "Vre",
            toString(a64, a65, a66) {
                return a45;
            },
            5: 5,
            6: -268435456,
            __proto__: arguments,
            ...v1,
            "h": v16,
            "a": C17,
            [arguments]: v42,
        };
    }
    f50();
    const v70 = new Int8Array();
    v70.buffer;
    a46.slice(2147483648);
    %OptimizeFunctionOnNextCall(f50);
    let v75;
    try { v75 = v42["find"](..."find", a48, ...v41, ...v42, ...522675525n); } catch (e) {}
    v75 <= a47;
    return arguments;
}
const v79 = new BigInt64Array();
const v83 = new BigUint64Array();
for (let v84 = 0; v84 < 10; v84++) {
    f44(v41, v84, false);
}
%OptimizeFunctionOnNextCall(f44);
f44(v83, 3331, v79, 3216);
