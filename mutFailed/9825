function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 7798;
    } catch(e3) {
        const o4 = {
        };
        const v7 = new Int32Array(Symbol);
        v7[3];
    }
    try {
        this.c = 7798;
    } catch(e9) {
    }
}
const v10 = new F0();
const v11 = new F0();
const v12 = new F0();
const v15 = -Infinity;
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = F0;
    } catch(e22) {
    }
    try {
        this.a = v10;
        const v23 = (a24, a25, a26, a27) => {
            v11[536870887] = -178.26245653531964;
            return a27;
        };
        function f28() {
            return f28;
        }
        for (let i31 = 0, i32 = 10;
            (() => {
                const v33 = i31 < i32;
                class C34 {
                }
                C34[Symbol.toPrimitive] = f28;
                const v39 = new BigUint64Array(3375);
                let [v40,,v41,...v42] = v39;
                return v33;
            })();
            i31++) {
        }
    } catch(e48) {
    }
    try {
        this.e = a21;
    } catch(e49) {
    }
}
new F16(-178.26245653531964, v12, F0, 477299.5994903061);
new F16(v15, v10, v10, v15);
new F16(477299.5994903061, v11, v10, v15);
const t56 = 1;
new t56(1);
new Int16Array(4);
new Int32Array(2828);
function f65() {
    return 129;
}
class C67 {
    constructor(a69, a70) {
        a69?.h;
        super.g;
        const v73 = this.constructor;
        try { new v73(a69); } catch (e) {}
        Math.atan2(this, this);
    }
}
new C67(-2);
const o79 = {
    [f65]() {
    },
};
Int32Array.iterator;
const o86 = {
    [F0]() {
    },
};
