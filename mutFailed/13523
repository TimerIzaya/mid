new Map(5);
19220291 + 19220291;
Uint8Array.prototype = Uint8Array;
new Uint8Array(19220291);
17 - 17;
const v10 = new Int16Array(17);
function f11() {
    return v10;
}
[1954867951,2,536870887,-26539,26881];
[9223372036854775807,2,1975941789,0,1855687834,-1951400948];
[58947,65535,9007199254740992,9007199254740990,-40006,1,1073741824,8,5];
class C16 {
    toString(a18, a19, a20) {
        const v21 = this?.constructor;
        try { new v21(); } catch (e) {}
        const o23 = {
        };
        o23.c = o23;
        o23.g = "f";
        const o24 = {
        };
        o24.c = o24;
        const o25 = {
        };
        o25.g = o25;
        o25.g = "f";
    }
}
C16.d = C16;
const v26 = new C16();
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v29 = 0; v29 < 1000; v29++) {
        ("p").length;
        const v32 = "p" + v29;
        const v33 = v32.fontcolor("f", "p", v32, 17);
        v33[15];
        let v35 = v33.localeCompare(v26);
        const v36 = v35--;
        v36 >> v36;
    }
    function f38() {
        const o42 = {
            ...1.0,
            set b(a41) {
            },
        };
        o42.b = o42;
        return o42;
    }
    for (let v43 = 0; v43 < 5; v43++) {
        f38();
        %OptimizeFunctionOnNextCall(f38);
    }
}
try { F27(); } catch (e) {}
const v46 = new F27();
const v47 = v46?.g;
try { new v47(v47, Int16Array); } catch (e) {}
const v49 = new F27();
try { v49.toLocaleString(); } catch (e) {}
