function f0() {
    const o6 = {
        __proto__: "log",
        "e": 9007199254740992,
        10: 1120921315,
        get h() {
            [] = "log";
            try {
                const t8 = "log";
                t8.__proto__ = this;
            } catch(e5) {
            }
            return 1120921315;
        },
        ..."log",
        "h": 1120921315,
        ..."log",
    };
    return o6;
}
let v7 = f0();
const v8 = f0();
let v9 = f0();
class C13 extends f0 {
    o(a15, a16, a17, a18) {
        v9 = a15;
        f0 >> "undefined";
        ("setUTCMonth")[1966];
        return a15;
    }
    n(a22, a23, a24) {
        v7 = v8;
        const v27 = new Uint16Array(128);
        v27.constructor;
        try {
            v8.b = undefined;
        } catch(e32) {
        }
        new Uint8Array(54);
        const v36 = new Int8Array(554);
        return v36;
    }
}
C13.length;
new C13();
new C13();
const v40 = new C13();
v40.h = v40;
const v41 = [2.2250738585072014e-308,297.95918544300343,-1.7976931348623157e+308];
try { v41.group(v41); } catch (e) {}
[2.0,-1000000000.0,4.0,1.7976931348623157e+308,2.220446049250313e-16,-1000000000.0];
[1000000.0,6.952940190616378,3.0];
const v47 = ("string")?.slice;
try { new v47("setUTCMonth", "setUTCMonth"); } catch (e) {}
class C51 {
    static 7;
    static [-1] = "string";
    #n(a53) {
        a53 = this;
        a53.e >>>= -35417;
        const o57 = {
            "type": "sync",
            "execution": "sync",
            "type": "major",
        };
        gc(o57);
        return this;
    }
}
const v59 = new C51();
const v60 = v59?.constructor;
try { new v60(); } catch (e) {}
try { new Array(v40); } catch (e) {}
const v66 = Array();
const v67 = Array();
class C69 {
    static 9 = 9.187362692894364;
}
try { C69.call(v66); } catch (e) {}
for (const v71 in C69) {
    v71 == v71;
}
class C73 {
    #e;
    static {
        try { new this(); } catch (e) {}
        function f76(a77, a78) {
            return a77;
        }
        const o85 = {
            o(a80) {
                try { this.o(this); } catch (e) {}
                const o83 = {
                };
                return gc(o83);
            },
        };
        const o87 = {
        };
        try { new Proxy(v7, f76); } catch (e) {}
        const v90 = new Proxy(Uint32Array, o87);
        try { new v90(v90, Array, f76); } catch (e) {}
        const t102 = "o";
        t102[0] = "o";
        o85["o"](o85, Uint32Array, "o", "o", v90);
        const v94 = super[this];
        try { v94.join(-4096, -4096, v94); } catch (e) {}
        const o96 = {
        };
        o96.h = o96;
        [/LD/vds,1000.0];
    }
    m(a101, a102) {
        this - this;
        Math.asin();
        return this;
        const o107 = {
        };
        const o113 = {
            [Infinity]: -0.0,
            [-16]: Infinity,
            "h": -16,
            ...-0.0,
            "c": Infinity,
            "e": -0.0,
        };
        const o114 = {
        };
        const v116 = new Proxy(Uint8Array, o114);
        v116.d = v116;
        new Proxy(this, o107);
        class C122 {
        }
        function f123() {
            class C125 {
            }
            new C125();
            const v127 = new C125();
            [C122,C125];
            [257828.6336153492,v127];
            class C130 extends C51 {
            }
            function f131(a132, a133) {
                return -4096;
            }
            Set.toString = f131;
            Set.constructor(Set);
            v67.constructor;
        }
        const v137 = "string" && -4096;
        function F138() {
            if (!new.target) { throw 'must be called with new'; }
        }
        1073741824 & 1073741824;
        const v144 = new Float32Array(2306);
        v144.reverse();
        +a102;
        Math.sqrt(v137);
        a101--;
    }
}
C73.name = C73;
const v150 = new WeakSet();
try { v150.add(-4096); } catch (e) {}
class C153 extends v150.constructor {
}
try { C153.call(C13); } catch (e) {}
class C155 {
}
C155.length;
function F157(a159, a160) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v161 = 0; v161 < 32; v161++) {
}
