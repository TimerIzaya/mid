function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        let v3;
        try { v3 = this(); } catch (e) {}
        try {
            const v4 = /(x)(x)(x)\1*/gus;
            const o5 = {
            };
            this.fuck(v4, o5, v4, /foo(?<!bar)baz/vds);
        } catch(e8) {
        }
        return v3;
    }
    this[Symbol.toPrimitive] = f2;
    try {
        this.c = 4294967295;
    } catch(e12) {
    }
    try {
        this.f = 4294967295;
    } catch(e13) {
    }
    const v15 = [9007199254740992,-12,-65536,21712,-1,-65536,-152029754,536,-4,1193126662];
    function f16() {
        return f2;
    }
    Object.defineProperty(v15, Symbol.toPrimitive, { writable: true, configurable: true, get: f16 });
    const o19 = {
        [v15]: undefined,
    };
}
function f21() {
    return WeakMap;
}
f21();
%OptimizeFunctionOnNextCall(f21);
const v23 = new F0();
new F0();
new F0();
[4294967297];
const v27 = [10089,4507,1073741823,-4294967296,65536,8,-9007199254740990,-65537,-2147483648,1349952786];
v27[8] = v27;
const v28 = [536870888];
v28[0] = v28;
const v30 = [9007199254740991];
v30.h = v30;
[-524240990,9007199254740991];
const v32 = [943396895,536870887,1375146273,0];
class C33 {
    #valueOf(a35, a36, a37, a38) {
        function f39(a40, a41, a42) {
            /4H/gvisy.compile(/[m]/gvdimsy);
            new Int16Array(Int16Array);
            const o48 = {
            };
            new Proxy(a42, o48);
            return a40;
        }
        f39(v28, a35, v27);
        return a35;
    }
    static [v23];
    #b = v32;
}
const v52 = new C33();
const v53 = v52?.constructor;
try { new v53(); } catch (e) {}
268435441n << 268435441n;
Math.atan2(-0.0, -0.0);
const v60 = new C33();
function f61(a62, a63) {
    class C65 {
    }
    function f66(a67, a68) {
        function f69(a70) {
            return arguments;
        }
        const v72 = f69(f66, a67, a67, a68);
        const o73 = {
            ...v72,
        };
        return o73;
    }
    f66();
    f66(-1000000000.0, C65);
    return Math;
}
v60.constructor = f61;
const v76 = v60?.constructor;
try { new v76(); } catch (e) {}
const v78 = new C33();
function f79(a80) {
    function F82(a84, a85) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = a85;
    }
    return v78;
}
v78.constructor = f79;
const v86 = v78?.constructor;
try { new v86(); } catch (e) {}
const v90 = new Uint8Array(1);
Float32Array.name = Float32Array;
Float32Array.from(v90)[0];
