const v0 = [];
function f1() {
    const o15 = {
        [v0]: v0,
        [v0]() {
            try { new v0(v0); } catch (e) {}
            return this;
        },
        m() {
            268435441n << 268435441n;
            const v8 = new BigUint64Array();
            const v9 = /anVXYFzN(x)(x)(x)\3/gvdms;
            try { v8.reduceRight(v9); } catch (e) {}
            return super[this];
        },
    };
    return o15;
}
f1();
const v17 = f1();
f1();
[-1.717944933994452e+308];
const v20 = [0.2311438210908171,-0.0,680.8715937517468];
[-1000000000000.0,-4.0,0.8189300628541715,1e-15,-162.2789922780379,1.7976931348623157e+308,1000000000.0];
const v23 = new Date();
let v28 = 0;
for (let i = 0; i < 5; i++) {
    v28 < v28;
    v28++;
}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
    const o36 = {
    };
    this.e = 19793;
    const o37 = {
    };
    v23.e = 19793;
    o37.h = Int8Array;
    const v38 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
    const v42 = v38.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
    new Uint8ClampedArray(v38);
    const o45 = {
    };
    o45.h = 58;
    const o58 = {
        "execution": "async",
        set e(a51) {
            let {"a":v52,"e":v53,"execution":v54,} = this;
            try {
                new Int32Array(v54, 53099, 53099);
            } catch(e57) {
            }
        },
        "type": "major",
    };
    o58?.constructor;
    const v60 = Array(19793);
    for (const v61 of v60) {
    }
    const v62 = [v60,v60,v60,v60];
    new this();
    const v65 = [];
    try { v65.sort(Array); } catch (e) {}
    v42.length;
    let [v68,v69] = Int32Array;
    v17.b += 58;
    try {
        v0.a = v20;
    } catch(e70) {
    }
    [[v62,v62,v62]] >= Uint16Array;
}
new F33();
