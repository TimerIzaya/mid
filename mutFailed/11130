(65536).constructor;
try { eval(4294967297, eval); } catch (e) {}
function f6() {
    return f6;
}
const v7 = f6.arguments;
function f8() {
    for (let v9 = 0; v9 < 5; v9++) {
        const v13 = Array(36862, v7, v9 & v9);
        v13[2] = v13;
    }
    return v7;
}
f8(-3757, eval);
class C16 {
    constructor(a18, a19) {
        a18 == a18;
        a18 == a18;
        try {
            a19.toString = a18;
        } catch(e25) {
            e25.message = e25;
            e25.e = e25;
        }
    }
    [65536];
    static g;
}
try { C16.bind(-3757); } catch (e) {}
try { C16.call(65536); } catch (e) {}
const v28 = new C16("split", C16);
v28[65536] = v28;
const v29 = new C16(v28, "split");
v29[65536];
const v31 = new C16(v29, "split");
Symbol("bZ");
const v36 = new Uint8ClampedArray(65536);
const v38 = new AggregateError(v36);
v38.lastIndexOf();
v31[65536];
~2;
const v44 = new Uint8ClampedArray(2);
v44.e = v44;
function f46(a47, a48, a49, a50) {
    const o55 = {
        [f46](a52, a53, a54) {
        },
    };
    return a50;
}
512 / 512;
const v58 = new Int32Array(512);
v58[487] = v58;
119 == 119;
BigUint64Array.e = BigUint64Array;
new BigUint64Array(119);
const v65 = new Float32Array(14);
try { v65.entries(); } catch (e) {}
Uint8ClampedArray.b = Uint8ClampedArray;
const v68 = new Uint8ClampedArray(v65);
v68[5] = v68;
const v69 = [-6.672391061426152e+307];
try { DataView.call(DataView); } catch (e) {}
function f72() {
    -(~v69["pop"]());
    return DataView;
}
%PrepareFunctionForOptimization(f72);
