const v0 = [-8.20674845578064e+307,9.060980314933055,-8.010022639704955,1.7976931348623157e+308,-1000.0,927289.167363785,0.5241569283903429];
const v1 = [NaN,8.707974874389211e+307,-7.770729871501861e+307,9.915787669879737,-4.766229843667949,1.322799673901326e+308,-Infinity,487.14616438345365,-1000000000000.0,-7.815501521290923e+307];
const v2 = [-1e-15,2.2250738585072014e-308];
const v3 = /K[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]/vdis;
const v4 = /\xf0\x9f\x92\xa9/guds;
const v5 = /(a{z})/gy;
const v6 = [v1];
const v7 = [v6,v4,v6];
[v6,v2,v7];
for (let v9 = 0; v9 < 32; v9++) {
    v7["p" + v9] = v9;
}
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = v0;
    } catch(e18) {
    }
    try {
        v2.b = a16;
    } catch(e19) {
    }
    try {
        this.h = a17;
    } catch(e20) {
    }
    const v22 = new Map();
    const v23 = a14 instanceof a17;
    try { a17(...v7, v0, v2, this, v23, this); } catch (e) {}
    try {
        v22.length = 0;
    } catch(e26) {
    }
}
const v27 = new F12(v5, v3, v1, v5);
new F12(v5, v4, v0, v4);
const v29 = new F12(v5, v4, v27, v4);
function f30() {
    return v27;
}
function f31() {
    const v35 = new Int16Array(41);
    v35.fill(725);
    return v29;
}
new Uint8ClampedArray([1,17,[Uint8ClampedArray,Uint8ClampedArray]]);
