new Int32Array(16);
new Float64Array(3087);
new Float64Array(4);
const v13 = new WeakMap();
const v15 = new WeakSet();
class C16 {
    #c;
    static #n(a18) {
        try { a18(this, this, a18); } catch (e) {}
        try {
            const v20 = [-9223372036854775808];
            function F21(a23) {
                if (!new.target) { throw 'must be called with new'; }
                let v24;
                try { v24 = a23.groupToMap(a23, F21, v20, this, F21); } catch (e) {}
                try {
                    this.d = v20;
                } catch(e25) {
                    e25 = v24;
                    /\ud808\udf45*/guimy;
                    /Dd(x)(x)(x)\3/gvdis;
                    const v28 = /Ca\P{scx=Greek}\xf0\x9f\x92\xa9?/ud;
                    e25 < v28 ? e25 : v28;
                    for (let v31 = 0; v31 < 5; v31++) {
                    }
                    v13[129] = e25;
                    new Uint16Array(7);
                    new Int16Array(154);
                    new Int8Array(129);
                    const o44 = {
                    };
                    for (let i = 0; i < 5; i++) {
                        v20[v20];
                    }
                }
            }
            try { ("number").match(F21); } catch (e) {}
            const o48 = {
            };
            const v50 = new Uint8Array(Uint8Array, Uint8Array);
            v50[Math.atan2(-988.8649474800335, 10000)] = 10000;
            new WeakSet(o48);
        } catch(e56) {
        }
        return v15;
    }
    static e = WeakSet;
    [WeakSet];
    static #b;
}
new C16();
const v58 = new C16();
const v59 = new C16();
const v60 = [C16];
[WeakSet];
const v62 = [v60];
const v63 = [WeakSet,v62,v62,v15];
const v64 = [v63,C16,WeakSet,v62,v63];
const v68 = ([Float32Array])["concat"]();
v68.includes(Float32Array);
[v64,v58,v62,v58,v15];
Float32Array[2147483648] = Float32Array;
const v71 = /(?:a*)+q(?<a>.)/guds;
function f72(a73) {
    a73.dotAll;
    a73.hasIndices = a73;
    const v75 = a73?.constructor;
    v75.$_;
    v75.lastParen;
    const o79 = {
        get d() {
        },
    };
    return v75;
}
for (let [i83, i84] = (() => {
        let v80 = 0;
        v80++;
        return [v80, 10];
    })();
    (() => {
        const v85 = i83 < i84;
        v85 || v85;
        return v85;
    })();
    i84--, v63[i84], Reflect.construct(f72, [i84], v68), v71 > v59) {
    for (let v97 = 0; v97 < 25; v97++) {
    }
}
class C99 extends Array {
}
