function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -2121814044;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
[7.027906040583218,-4.315230000433658,-1000000.0,-1000.0,0.8604419330065782,7.579957339074049,2.0];
[2.2250738585072014e-308,1.968588344131941e+307,1000000000.0,-8.880740478666961e+307,-1000.0];
[1000000000000.0];
function f11(a12, a13, a14, a15) {
    function f17(a18) {
        return arguments;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f17 });
    arguments.toString(a13, f11, f11);
    function f20() {
        ("Vre").fixed().normalize();
        let v24 = -268435456;
        const v25 = v24--;
        v25 << v25;
        return a14;
    }
    f20();
    %OptimizeFunctionOnNextCall(f20);
    return arguments;
}
for (let v28 = 0; v28 < 5; v28++) {
    const t31 = f11().toString;
    t31(f11, v28, f11, f11);
}
const v36 = new BigUint64Array(1384);
const o39 = {
};
const v42 = new Float64Array(257);
v42.lastIndexOf(4);
new Uint8ClampedArray(8);
7 * 7;
const t40 = v36.constructor;
t40(2799);
Int8Array.prototype;
let v54;
try { v54 = Float32Array.from(F0); } catch (e) {}
v54.call();
function f56() {
    new Int8Array(1073741823);
    class C60 {
        #valueOf(a62, a63, a64, a65) {
        }
    }
    const o69 = {
        valueOf(a67, a68) {
        },
    };
}
f56();
new Float32Array(7);
for (let i74 = 0, i75 = 10;
    (() => {
        i75--;
        const v77 = i74 < i75;
        let v78 = 3375;
        v78 >>> v78;
        const v80 = v78++;
        v80 >> v80;
        const v82 = v80 / v80;
        v82 >>> v82;
        const v85 = new BigUint64Array(v78);
        const v87 = new WeakMap();
        const v88 = /8[\cA]v/uisy;
        function f89(a90, a91) {
            const v92 = [a90,a90,a90,a90,a90];
            v87.set(v92, v92);
        }
        v88[Symbol.toPrimitive] = f89;
        const v96 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
        try {
            v96.length = v88;
        } catch(e97) {
        }
        try { v85.forEach(v36); } catch (e) {}
        let [v99,,v100,...v101] = v85;
        v99 * v99;
        return v77;
    })();
    (() => {
        const v105 = i74++;
        v105 === v105;
    })()) {
}
