const v3 = [65535,568937742,-282020070,-31773,26122,65537,0];
const v4 = [56189,-9007199254740990,315521957,14,-8];
const v5 = [-2147483649,-536870912];
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(v4, this, a8, v4); } catch (e) {}
    a8 ^ a8;
    try { a10.includes(v3); } catch (e) {}
    a11 >> a11;
    try {
        this.b = 2054989926;
    } catch(e16) {
    }
    try {
        this.f = 268435440;
    } catch(e17) {
    }
    try {
        a10.h = a11;
    } catch(e18) {
    }
}
F6.a = F6;
const v19 = new F6(-4096, v3, v3, 2054989926);
const v20 = new F6(-4096, v4, v4, 268435440);
const v21 = v19?.constructor;
let v22;
try { v22 = new v21(v4, -4096, v19, v19); } catch (e) {}
new F6(2054989926, v4, v5, 2054989926);
[-4096,10000,1073741824,41532,1020098667,-424669523,-9007199254740992,-4294967295,13,4];
[1,9007199254740991,1000,-163580737,-776075972,-5944];
const v26 = [-39005];
[5.508273651940138e+307,-1000000000.0,2.2250738585072014e-308,-4.0,-1.5483016612737757e+308];
const v28 = [NaN,-2.933899647514922];
try { v28.copyWithin(F6, F6); } catch (e) {}
const v30 = [-7.494475570211794,-778.0433709204584,-69445.97660698812,-558166.5155380843];
try { v30.map(v26); } catch (e) {}
class C32 {
}
const v33 = new C32();
let v34;
try { v34 = v33.toString(); } catch (e) {}
for (const v36 of `match${v33}-20124`) {
    const v37 = v5.strike();
    v37[174] = v37;
    try {
        new v22(v36, v20, v34, -10n);
    } catch(e40) {
    }
    v26.codePointAt(v36);
    try { v21(); } catch (e) {}
    new BigUint64Array(3536);
    new Uint16Array(257);
    new Float32Array(1782);
}
