function f0() {
    const o10 = {
        ["hasInstance"]: "hasInstance",
        "e": "hasInstance",
        [131033.11368847382]: f0,
        "f": "hasInstance",
        o(a5) {
            const v6 = this[1960];
            v6?.[-1];
            try {
                v6.length = 1;
            } catch(e9) {
            }
            return -1000000000.0;
        },
    };
    o10.b = 131033.11368847382;
    return f0;
}
const t19 = f0();
t19();
f0();
[2147483649,-6,4294967297,65536];
const v15 = [-12532,2147210863,339605526];
const v16 = [-1961964699,536870912,-13,-455292639,9401,-8,43968,3];
class C17 {
}
const v18 = new C17();
const v21 = new Int16Array(C17);
class C26 {
    constructor(a28, a29, a30) {
        function f31(a32, a33) {
            return a32;
        }
        this[Symbol.toPrimitive] = f31;
        a29[4] = v18;
        for (let v36 = 0; v36 < 25; v36++) {
        }
    }
}
new C26(v18, v21);
new C26(Int8Array, Uint32Array);
new C26(v18, C17);
v16[7] = v16;
new Uint8Array(2762);
-5;
new v15(5);
12 + 12;
new BigInt64Array(12);
1439 !== 1439;
const v58 = (a59, a60, a61, a62) => {
    function F63(a65, a66, a67, a68) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return Int8Array;
};
1073741825n ^ 1073741825n;
function F72(a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = this?.constructor;
    try { new v77(Int16Array, BigInt64Array, Float32Array); } catch (e) {}
    return arguments;
}
F72.arguments = F72;
const v80 = new F72();
v80.h = v80;
let {...v81} = v80;
const v82 = v81?.__defineSetter__;
try { new v82(2762, 2762); } catch (e) {}
