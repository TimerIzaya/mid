function f0() {
    let v3 = 2.220446049250313e-16;
    v3--;
    const o10 = {
        "h": 0.7917415214385148,
        "f": 0.7917415214385148,
        __proto__: "246362616",
        p(a6) {
            super[v3] = a6;
            const v7 = ("246362616")[3448];
            super.d = v7;
            try {
                ("246362616").includes(v7);
            } catch(e9) {
            }
            return this;
        },
        [v3]: v3,
        ..."246362616",
    };
    o10.f = o10;
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
function f14() {
    return v13;
}
function f15(a16) {
    const v18 = new Set();
    function F19(a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a21;
        } catch(e23) {
            for (let [v24,v25] of a21) {
                try {
                } catch(e26) {
                }
            }
        }
        try {
        } catch(e27) {
        }
        const v28 = v18[this];
        try {
            new F19(v28);
        } catch(e30) {
        }
    }
    new F19();
}
Object.defineProperty(v13, 2147483647, { writable: true, get: f14, set: f15 });
v13[1];
v13[2147483647] = v13;
false || false;
-9007199254740992n ^ -9007199254740992n;
-9223372036854775808n ^ -9223372036854775808n;
-728778275n << -728778275n;
[16,-6869,1782294206,6];
const v42 = [256,255,16,1134057866,42465,9223372036854775807,33212,-1,127];
const v43 = [-938049078];
try { v43.map(v43); } catch (e) {}
const v45 = [v43];
let v46;
try { v46 = v45.sort(v12, v42); } catch (e) {}
const v47 = [-9223372036854775808n,-728778275n,v45];
const v48 = [v45,v12,-9223372036854775808n,v43,v43];
try { v48.fill(v47); } catch (e) {}
class C50 {
    #n(a52, a53) {
        const v54 = super.h;
        let v55;
        try { v55 = v54(a52, a52, v12, f0); } catch (e) {}
        return v55;
    }
    static #g = false;
    set f(a57) {
        switch (v42) {
            default:
                Object.defineProperty(v13, 65537, { writable: true, configurable: true, get: f0, set: f0 });
                break;
        }
        try {
            new f0(this);
        } catch(e59) {
        }
    }
}
try { new C50(); } catch (e) {}
const v61 = new C50();
const v62 = new C50();
new C50();
for (let v64 = 0; v64 < 5; v64++) {
    function f65() {
        ("number").slice();
        return f65;
    }
    let v68;
    try { v68 = f65(v62, v46, v61); } catch (e) {}
    try { v68(); } catch (e) {}
    f65();
    %OptimizeFunctionOnNextCall(f65);
}
