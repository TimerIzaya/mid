new Float32Array(173);
class C4 {
}
function f5() {
    return f5;
}
const v6 = [1.4598948242971485e+307,5.0,202.50817195072136];
Object.defineProperty(v6, v6, { enumerable: true, set: f5 });
new BigUint64Array(127);
[BigInt64Array,BigInt64Array];
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this.constructor;
    try { new v17(); } catch (e) {}
    typeof Float32Array;
}
new F11();
new BigInt64Array(512);
/70/gvdimsy;
const o26 = {
};
o26.g = Float32Array;
5.0 / -2.220446049250313e-16;
/[(?<a>.)\k<a>]/gvmsy;
for (let v33 = 0; v33 < 10; v33++) {
    const t25 = "f";
    t25[1073741824] = 4294967296;
}
/oK((ab|cde)\1\p{gc=Nd}a+b|c[\0]+)*/udi;
const v35 = [];
class C36 {
    static get b() {
        try {
            super.getOwnPropertyNames();
        } catch(e39) {
        }
        return v35;
    }
    constructor() {
        this[v35] = this;
        this[v35] %= this;
    }
    static e;
    [v35];
}
const v41 = new C36();
const v42 = new C36();
const v49 = new WeakMap();
function f50(a51) {
    return v49;
}
class C53 {
    [-9] = v42;
    4294967296;
    5;
}
new C53();
const v55 = new C53();
new C53();
4294967296 !== v55;
new BigInt64Array();
function F60() {
    if (!new.target) { throw 'must be called with new'; }
}
const v63 = new F60();
let v65 = "-46707";
class C66 {
    #b = v63;
    constructor(a68, a69) {
        this.#b <<= "object";
    }
}
const v71 = new C66();
v65 >>>= v71;
v41 << 65535;
const o76 = {
    "execution": "async",
    "type": "major",
};
gc(o76);
const t79 = -9;
t79[9] = -124726096;
