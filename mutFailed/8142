function f0() {
    const v3 = new Uint8ClampedArray(3);
    class C4 {
        constructor(a6, a7, a8, a9) {
            const v10 = this.constructor;
            try { new v10(3, a9, this, this); } catch (e) {}
            for (let v12 = 0; v12 < 5; v12++) {
                v3[v12] = a9;
            }
        }
    }
}
let v13 = 7;
const v15 = new BigUint64Array(v13);
const v18 = new Uint32Array(512);
const v22 = ["function",/xEz\xe2\x81\xa3/gumy];
const o28 = {
    valueOf() {
        try { this.b(); } catch (e) {}
        [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
    },
    set b(a27) {
        v13 <<= v13;
    },
    "arguments": v22,
    "length": "function",
};
new Worker(f0, o28);
const v32 = new Int32Array(13);
class C33 extends f0 {
    static 8 = 512;
    static get f() {
        const v35 = `
        `;
        eval();
    }
    static set a(a39) {
        super.a >>= 13;
        try {
            super.toString();
        } catch(e41) {
        }
    }
    static set c(a43) {
        try {
            this.__proto__ = this;
        } catch(e44) {
        }
    }
    static #a = v32;
}
const v45 = new C33();
new C33();
class C48 {
    #m(a50, a51, a52) {
        for (const v53 in this) {
            (delete this?.h).__proto__;
        }
    }
}
Symbol.toPrimitive;
-((-1.4618325192014402e+308) ** -724330360);
const v61 = new C33();
function F62(a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a65 <<= Uint32Array;
        try { this["o"]("o", "o", this, "o", "o"); } catch (e) {}
        v15 || this;
        new BigUint64Array(6);
        new Uint16Array(2015);
        new Uint16Array(256);
        let v79 = 1073741824;
        class C81 {
            constructor(a83) {
                [a83,v79] = "boolean";
            }
        }
        const v84 = new C81(C81);
        function f85(a86, a87, a88) {
            a86[22] = a86;
            const o89 = {
                ...a88,
                2: v84,
                268435439: C81,
            };
            return o89;
        }
        new Int8Array(127);
        this.b = 512;
    } catch(e92) {
    }
    try {
        this.c = v61;
    } catch(e93) {
    }
}
const v94 = new F62(v32, C33, v18);
const v95 = new F62(v32, v15, v61);
new F62(v45, v95, v94);
const v99 = new Int8Array(520);
const v101 = new Uint8ClampedArray();
const v102 = v101.toReversed();
const v104 = [v102,v102];
ReferenceError.apply(v99.includes, v99, v104);
