const v3 = [];
function f4(a5) {
    try {
        v3.some();
    } catch(e7) {
        e7.stack;
    }
    return a5;
}
const v11 = new Uint32Array(108);
const v14 = new BigInt64Array(2439);
new Float64Array(66);
class C18 {
    b;
    e = Float64Array;
    static get a() {
        let v21 = 0;
        ("128").fontsize();
        const o29 = {
            "e": 12,
            "type": "128",
            "b": v21,
            [v3]: v3,
            __proto__: 3.4890473589784586e+307,
            "g": 12,
            o(a28) {
                return a28;
            },
            ...1000000000000.0,
        };
        return o29;
        do {
            delete this[this];
            try { v11.forEach(h); } catch (e) {}
            delete this[9];
            v21++;
        } while ((() => {
                const o35 = {
                };
                class C39 {
                    [-4.0] = -7.645692469523979;
                    constructor(a41, a42) {
                        const v43 = this?.constructor;
                        try { new v43(1.0126260068434707e+308, C39); } catch (e) {}
                        a41 != a41;
                        try {
                            this.length = 2;
                        } catch(e47) {
                        }
                    }
                    #m(a49) {
                        const v50 = super.b;
                        Math.abs(v50);
                        let v54 = -2147483648 / -2147483648;
                        const v55 = ++v54;
                        v54 || v50;
                        Math.log10(-2147483648);
                        Math.atan2(-2147483648, -2147483648);
                        !v55;
                        return 1.0126260068434707e+308;
                    }
                }
                new C39(-7.645692469523979, C39);
                return v21 < 9;
            })())
        return h;
    }
}
new C18();
const v65 = new Uint8ClampedArray(2664);
v65[0] = "asIntN" / "number";
new C18();
new C18();
class C74 {
    static 166415147 = -682086.146287106;
    [-682086.146287106] = -65537;
    ["bFUZL"];
    a;
    static #b = -65537;
}
C74[166415147] = C74;
const v75 = new C74();
function f76(a77, a78) {
    const o79 = {
    };
    try {
        o79.d = a77;
    } catch(e80) {
    }
    try {
        const o81 = {
        };
        o81.d = a77;
        o81.h = -682086.146287106;
    } catch(e82) {
    }
    try {
        const o83 = {
        };
        o83.d = a77;
        o83.h = -682086.146287106;
        o83.a = a77;
    } catch(e84) {
    }
    try {
        const o85 = {
        };
        o85.d = a77;
        o85.h = -682086.146287106;
        o85.e = BigInt64Array;
    } catch(e86) {
    }
    return o79;
}
v75.toString = f76;
const v87 = new C74();
v87.bFUZL;
const v89 = new C74();
v89.a;
const v92 = new Date();
const v94 = Promise.reject();
128 == 128;
const v97 = v75.__proto__;
const o100 = {
    "maxByteLength": 536870887,
};
new SharedArrayBuffer();
new Uint8ClampedArray();
Int16Array[2] = v14;
Int16Array.from(Int16Array);
new Int16Array(128);
let v108 = 7;
v108--;
Int8Array << v75;
function F112(a114, a115, a116, a117) {
    if (!new.target) { throw 'must be called with new'; }
    const v118 = this.constructor;
    try { new v118(v94, Promise, C74); } catch (e) {}
    a116.bFUZL;
}
const v121 = new F112(v97, v87, v75, v92);
function f122() {
    return 128;
}
function f123(a124) {
    try { a124.from(v75, f76, a124); } catch (e) {}
}
Object.defineProperty(v121, "f", { writable: true, get: f122, set: f123 });
v121?.f;
function f127() {
}
