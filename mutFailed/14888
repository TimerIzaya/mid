const v2 = new BigInt64Array(16);
function f5() {
    return "trimStart";
}
BigUint64Array.valueOf = f5;
const v9 = new BigUint64Array(3695);
let v10;
try { v10 = v9.toLocaleString(); } catch (e) {}
1078 > 1078;
const v14 = new Float32Array(1078);
v14[604];
class C16 {
    m(a18, a19) {
        new Set();
        return 1078;
    }
    constructor(a23, a24) {
        function f25(a26) {
            Object.defineProperty(v2, a26, { writable: true, configurable: true, get: f5, set: f5 });
            const v27 = [0.5690334337241484,-1.0,-Infinity,-6.831251836501173,-5.039519767346096,-2.0,0.6826335106801482,1000000000000.0];
            try { v27(); } catch (e) {}
            return Float32Array;
        }
        Object.defineProperty(a23, "valueOf", { enumerable: true, value: f25 });
        a23 >= a23;
        a24 >> a24;
        const v31 = v9[5];
        v31 * v31;
        const o33 = {
        };
        o33.e = o33;
        o33.h = C16;
        try {
            o33.h = v31;
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.e = o35;
            o35.h = o35;
            o35.h = v31;
            o35.g = a24;
        } catch(e36) {
        }
        try {
            const o37 = {
            };
            o37.h = v31;
            o37.g = a24;
            o37.a = 1078;
        } catch(e38) {
        }
        try {
            const o39 = {
            };
            o39.d = o39;
            o39.h = v31;
            o39.g = a24;
            o39.d = 3695;
        } catch(e40) {
        }
    }
}
Object.defineProperty(C16, "d", { configurable: true, enumerable: true, value: 16 });
const v41 = new C16(1078, 16);
function f42() {
    function f43(a44) {
        function f45(a46, a47, a48, a49) {
            function f50() {
                const v52 = Math.expm1(a47);
                const v53 = Math.tanh(Math);
                const o54 = {
                    [v53]: v52,
                };
                return o54;
            }
            f50();
            eval(a47);
            %OptimizeFunctionOnNextCall(f50);
            return f45;
        }
        return v10;
    }
    return f43;
}
Object.defineProperty(v41, "constructor", { writable: true, enumerable: true, get: f42 });
const v58 = v41?.constructor;
function f59() {
    return BigInt64Array;
}
Object.defineProperty(v58, "d", { writable: true, configurable: true, enumerable: true, get: f59 });
try { new v58(BigUint64Array, 1078); } catch (e) {}
const v61 = new C16(BigUint64Array, 16);
new C16(v61, 3695);
function F65() {
    if (!new.target) { throw 'must be called with new'; }
}
const v67 = new F65();
const v68 = v67?.__defineGetter__;
try { new v68(C16, C16); } catch (e) {}
function f70(a71) {
    C16.d;
    function F73(a75, a76) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f78(a79, a80, a81, a82) {
        Uint8Array / a79;
        a80 < F73;
        const o88 = {
            n(a86, a87) {
                return 3695;
            },
        };
        return 3695;
    }
    f78.name;
    return 1078;
}
const v91 = Symbol.toPrimitive;
Symbol.for(v91.description);
v67[v91] = f70;
function f95(a96) {
    return 1000.0;
}
v67.toString = f95;
Array[1000] = Symbol;
Array[1000] = Symbol;
Array[v67] = 731894.5693476209;
