const v0 = [];
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    const v3 = this === v0;
    let [] = v0;
    this.g ^= v3;
    const v4 = this[-1];
    function f9(a10, a11, a12, a13) {
        const v20 = new BigInt64Array(257);
        function f22() {
            const o31 = {
                "e": -4294967295,
                ...v0,
                84: arguments,
                ..."Vre",
                set b(a26) {
                },
                ["Vre"](a28, a29) {
                    super[f22];
                },
            };
            return v20;
        }
        2147483648 ^ 2147483648;
        const v39 = new Int32Array(Symbol);
        v39[492];
        v39[3];
        return "find";
    }
    f9(7.589647165982214, 1073741825n, 522675525n, 411585671n);
    try {
        v4.valueOf = v4;
    } catch(e44) {
    }
    try {
        class C45 {
        }
        const v47 = new WeakMap();
        class C48 extends C45 {
            static 1 = v47;
            10000;
        }
        this.d = v0;
    } catch(e49) {
        ("h").split(65535);
        class C54 extends BigInt64Array {
        }
    }
    try {
        this.a = v0;
    } catch(e55) {
    }
    try {
        this.c = v0;
    } catch(e56) {
    }
}
const v57 = new F1();
const v58 = new F1();
new F1();
class C60 extends F1 {
    static get g() {
        try { v58["getUint32"](this, this); } catch (e) {}
        %VerifyType(this);
        let [v64,v65,v66] = v0;
        return v65;
    }
    ownKeys(a68) {
        let v70 = 0;
        while (v70 < 1) {
            let v75 = 128;
            let v76 = 492517.88266910124;
            const v77 = v76--;
            for (let i79 = 0; i79 < 9; i79++) {
                i79 + EvalError;
            }
            Math.round(v77);
            ++v75;
            v70++;
        }
        return a68;
    }
}
new C60();
const v93 = new C60();
new C60();
class C95 extends F1 {
    constructor(a97, a98, a99) {
        try {
            a98.#a;
        } catch(e101) {
        }
    }
    toString(a103, a104, a105, a106) {
        try { v0.forEach(a105); } catch (e) {}
        this.a;
        super.a = v0;
        const o111 = {
            "execution": "async",
            "type": "minor",
        };
        let v112;
        try { v112 = this.indexOf(a103); } catch (e) {}
        try { v58.fromCharCode(); } catch (e) {}
        const v120 = Symbol.unscopables;
        const o122 = {
        };
        try {
            o122.f = -9223372036854775808;
        } catch(e123) {
        }
        a104[v120] = a106;
        return v112;
    }
    static 1024 = v93;
    4;
    3801;
    static a;
}
const v124 = new C95();
const v125 = new C95();
new C95();
class C127 extends C60 {
    get b() {
        function* f129(a130, a131, a132, a133) {
            let {"b":v134,"d":v135,...v136} = a133;
            268435441 / F1;
            Math.cos(this);
            Math.round(-2.220446049250313e-16);
            const v143 = this && -2.220446049250313e-16;
            Math.tan(v124);
            Math.acosh(v143);
            const v146 = F1 >> 268435441;
            yield* v0;
            return v146;
        }
        256 !== 6;
        class C150 {
            set b(a152) {
                gc();
            }
        }
        return f129(this, v93, this, v125);
    }
}
new C127();
const v157 = new C127();
new C127();
let v160 = 0;
do {
    try { v93(v93, v93, v58, v57, v157); } catch (e) {}
    v160++;
    const t151 = "g";
    t151[0] &&= 0;
    -51320 >> -51320;
    const v167 = this.DataView;
    try { new v167(); } catch (e) {}
} while (v160 < 8)
Math.log2(0);
