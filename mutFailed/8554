let v0 = [9007199254740991,-9,10000,127,3,-1530162875,-833884721,6,-25361049,15];
const v1 = [536870887,843979888,-1073741824,698838935,-128];
function f2() {
    v0.with(v0, ...v0, v0, ...v0, ...v1, ...v0);
    class C6 {
        get b() {
            this in this;
            try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
            return this;
        }
        static #n(a11, a12) {
            function f13(a14) {
                return a12;
            }
            class C15 extends f13 {
                ["toStringTag"] = a12;
                static #e;
                #h = f13;
            }
            return "toStringTag";
        }
    }
    const v16 = new C6();
    return v16;
}
v1.toString = f2;
const v17 = [200387720,-9223372036854775808,-8,-13,-27891,4,-1];
const v18 = [v17,v17];
function f19() {
    return v18;
}
function f20(a21) {
    function f22(a23, a24, a25) {
        try { a23(); } catch (e) {}
        return a23;
    }
}
Object.defineProperty(v18, 62, { configurable: true, get: f19, set: f20 });
%VerifyType(v17);
v18.length |= v1;
v18[62] &= v17;
let v28 = "valueOf";
let v30 = [v18,v0,v0,v1,v17];
[v0,v30,v30] = v1;
let v32 = -4294967297;
let v33 = 1000;
[v33,v32,v28,...v33] = "y";
[v30,v1,v30,v1];
class C35 {
    static [v30] = v17;
    valueOf(a37, a38, a39) {
        try {
            super.round(v17, v17, a37);
        } catch(e41) {
        }
        return a39;
    }
    static a;
    c;
    h = v30;
}
new C35();
new C35();
new C35();
new BigUint64Array(1);
new Int8Array(62);
new Int32Array(7);
Uint8ClampedArray[Symbol.toPrimitive] = Date;
function F59(a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
}
const v64 = new F59(3011, Uint8ClampedArray, F59);
v64.constructor = Date;
const t73 = v64.constructor;
new t73(v64, Uint8ClampedArray, 3011);
class C67 {
    [Int8Array] = F59;
    static 2932;
}
new C67();
new C67();
new C67();
