const o3 = {
    "d": 3.0,
    "c": -5,
};
-129;
class C6 {
    constructor(a8) {
        try {
            const v12 = new Uint8Array([749138.7740098275,-413.55890355139604,-2.0,5.0,4.0,1.7976931348623157e+308,1.0,5.956393081352694]);
            try { v12.set(this); } catch (e) {}
            new v12();
            for (let v15 = 0; v15 < 5; v15++) {
                const o19 = {
                    set b(a17) {
                        this.b;
                    },
                };
                o19.b = o19;
                o19.b = o19;
            }
            this.fuck(a8, a8, -1035578814);
        } catch(e21) {
        }
    }
    m(a23) {
        this[5.0] |= 3.0;
        class C25 extends Set {
            #m(a27, a28) {
                let [v30,v31,,v32] = this;
            }
        }
        return 5.0 in a23;
    }
}
try { new C6(C6); } catch (e) {}
C6[180]?.[3.0];
const v37 = [1e-15,-974.533070719644,-4.2822354042999803e+307,-4.284500498034716e+307,-5.0,-1000000.0,-7.058756700701954,5.34295489156429];
try { v37.copyWithin(o3, o3); } catch (e) {}
const v39 = [-3.0,245636.03820230137,-703.1197966687857,-1000.0,0.322402200487797,-140876.73447502195,172.09245911080006,-720596.8623655108,9.663938375374348e+307,0.9708512931268509];
function f40() {
    const o41 = {
    };
    const v43 = new Proxy(o3, o41);
    return v43;
}
v39.toString = f40;
try { v39.with(v39, v39); } catch (e) {}
[9.267302318203075];
const v46 = new C6(C6);
new C6(129);
Uint8ClampedArray[Symbol.iterator] = f40;
Uint8ClampedArray[1] = 14;
new Float32Array(Uint8ClampedArray);
new C6(129);
127 + 127;
try { ("boolean").matchAll(v46); } catch (e) {}
for (let i = 0; i < 5; i++) {
    gc.arguments = gc;
    const o63 = {
    };
    o63.type = gc;
    o63.g = o63;
    gc(o63);
}
try { new Float64Array(Float64Array, Float64Array, Float64Array); } catch (e) {}
function f69(a70) {
    return "m";
}
Uint16Array[Symbol.iterator] = f69;
const v76 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
const v77 = new Uint8ClampedArray(v76, Uint16Array, Uint8ClampedArray);
const o78 = {
};
o78.h = o78;
new C6(v77, o78);
URIError(Float64Array);
