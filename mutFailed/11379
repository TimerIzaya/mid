function f0() {
    const o19 = {
        [1000000000000.0]: 1000000000000.0,
        o(a5) {
            return a5;
        },
        o(a7) {
            gc();
            return this;
        },
        get d() {
            const t11 = "n";
            t11[this] = 1000000000000.0;
            const v11 = "n" && 1000000000000.0;
            %VerifyType(this);
            Math.sin(-4294967295);
            const o17 = {
                "maxByteLength": 1814769353,
            };
            this[Symbol.match] = v11;
            return "n";
        },
        "b": 1000000000000.0,
    };
    o19.d = o19;
    return o19;
}
f0.clear = f0;
try { f0.clear(f0, Map); } catch (e) {}
class C24 {
    #c = "toUpperCase";
    get a() {
        const v26 = this << "toUpperCase";
        const v27 = v26 ^ v26;
        let v28;
        try { v28 = v27(v27, this, v27, v27, v26, this); } catch (e) {}
        v28[v27] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
const v30 = f0();
const v31 = f0();
const v32 = f0();
class C33 {
    static 3126473932;
    o(a35, a36) {
        a35 >>> v31;
        try {
            v31.fuck(true, true, "boolean", f0);
        } catch(e41) {
        }
        return this;
    }
}
let v42;
try { v42 = C33(); } catch (e) {}
const v43 = new C33();
function f44(a45, a46) {
    function f47(a48, a49, a50, a51) {
        return f47.arguments;
    }
    f47(f47, f47, f47, f47);
    %OptimizeFunctionOnNextCall(f47);
    return v32;
}
v43.constructor = f44;
const v54 = v43?.constructor;
try { new v54(); } catch (e) {}
const v56 = new C33();
const v57 = new C33();
function F58(a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "e", { writable: true, configurable: true, value: a60 });
    a61.length = f0;
    a61.length = a61;
    try {
        this.e = f0;
    } catch(e62) {
    }
    const v64 = new Int8Array();
    try { v64.find(); } catch (e) {}
    ArrayBuffer.valueOf = f0;
    const v67 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    new Int8Array(v67);
    try {
        this.b = a61;
    } catch(e70) {
    }
}
const v71 = new F58(v43, C33);
v71.toString = f44;
const v72 = [-1.3667473485475811e+308,1.7976931348623157e+308,5.0,-3.583919688173468e+307,-1.5320462342133301e+308,-414873.4859108749,286122.8434793174,866.7395286670867,-1000.0,-742782.9714922046];
const o77 = {
    __proto__: v72,
    [v71](a74, a75, a76) {
    },
};
const v78 = new F58(v30, C33);
new F58(v56, v78);
class C80 {
}
function F81() {
    if (!new.target) { throw 'must be called with new'; }
}
let v85;
try { v85 = Uint32Array.apply(F81); } catch (e) {}
function F86(a88, a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    const v92 = a89.constructor;
    const v94 = new Set();
    const v95 = v94.keys;
    let v96;
    try { v96 = v95(f0, v92, 3228, a88); } catch (e) {}
    function F97(a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e101) {
        }
        try {
            this.h = v94;
        } catch(e102) {
        }
        try {
            const v103 = v94[this];
            try {
                new F97(v103, -268435456n);
            } catch(e106) {
            }
        } catch(e107) {
        }
        switch (3228) {
            case v96:
                v92[5] = v85;
                break;
        }
    }
    new F97();
    new F97();
    new F97(a89, a90);
}
const v111 = new C80();
const v112 = new C80();
try { v112.isPrototypeOf(C80); } catch (e) {}
const v114 = [v112,v111];
v114[2] = v30;
function F115(a117, a118, a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a117, 1, { configurable: true, value: v42 });
    a117[1];
    a117.unshift(v111);
}
const v123 = F115?.constructor;
try { new v123(v78); } catch (e) {}
const v125 = new F115(v114);
v125.constructor = f0;
const v126 = v125?.constructor;
try { new v126(v78, v78, v71, v57); } catch (e) {}
const v128 = new F115(v114);
const v129 = v128?.__defineGetter__;
try { new v129(v111, v78); } catch (e) {}
