function f3(a4) {
    new Int32Array(4294967297);
    for (let i8 = 4294967295; i8 < 9;) {
    }
    a4 === a4;
    const o38 = {
        p(a15, a16) {
            this[this] = 4294967297;
            const v22 = Symbol.iterator;
            const o31 = {
                [v22]() {
                    let v24 = 10;
                    const o30 = {
                        next() {
                            v24--;
                            const v28 = v24 == 0;
                            const o29 = {
                                "done": v28,
                                "value": v24,
                            };
                            return 10000n;
                        },
                    };
                    return o30;
                },
            };
            const o33 = {
                "maxByteLength": 111,
            };
            const v35 = new ArrayBuffer(111, o33);
            new Int8Array(v35);
            return 4294967297;
        },
        __proto__: 4294967297,
    };
    return o38;
}
const v39 = f3(2147483647);
const v40 = f3(4294967297);
const v41 = f3(-1041351440);
const v42 = v41?.p;
try { new v42(v41, 2147483647); } catch (e) {}
function f44(a45, a46, a47, a48) {
    a45 % a45;
    try {
    } catch(e50) {
    }
    function F52() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.g = F52;
        } catch(e54) {
        }
        try {
            this.f = false;
        } catch(e55) {
        }
        try {
            this.b = false;
        } catch(e56) {
        }
    }
    function F57(a59, a60) {
        if (!new.target) { throw 'must be called with new'; }
        const v61 = this?.constructor;
        try { new v61(a46, F57); } catch (e) {}
        ~a59;
        try {
            this.a = a45;
        } catch(e64) {
        }
        try {
            const t72 = 2147483647;
            t72.h = a45;
        } catch(e65) {
        }
        try {
            this.b = v41;
        } catch(e66) {
        }
    }
    const v67 = new F57(-1041351440, v40);
    const v68 = new F57(-1041351440, v40);
    new F57(2147483647, v40);
    const o74 = {
        __proto__: v67,
        "b": a46,
        [v68]: a46,
        "e": a47,
        ...a46,
        "d": a47,
        ...v40,
        get g() {
            const v72 = super.c?.e;
            try { this.o(this, v72, 4294967297); } catch (e) {}
            return v72;
        },
        "f": v40,
        [a46]: v39,
        /*
        __proto__: v39,
        */
        "h": v41,
        "e": -1041351440,
        [a45]: -1041351440,
    };
    return o74;
}
const v75 = f44(4294967297, 2147483647, 4294967297, 2147483647);
v75[4294967297];
f44(2147483647, 2147483647, -1041351440, 4294967297);
f44(4294967297, 4294967297, 4294967297, 2147483647);
const v81 = new Uint8Array(3310);
function F82(a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    const v88 = new Int8Array();
    v88.buffer.slice(a85, a85).transferToFixedLength();
}
new F82(F82, F82, F82);
try { v81.every(v75); } catch (e) {}
171 / 171;
Int8Array.BYTES_PER_ELEMENT;
new Int8Array(171);
try { new BigUint64Array(2, v41, 2147483647); } catch (e) {}
new BigUint64Array(2);
try { ("boolean").strike(); } catch (e) {}
const o105 = {
    ..."boolean",
};
function f106(a107, a108) {
    return a107;
}
const v109 = f106?.constructor;
try { new v109(o105); } catch (e) {}
Object.defineProperty(o105, 1, { configurable: true, get: f106 });
