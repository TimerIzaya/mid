class C3 {
    #n(a5, a6) {
        try { ("subarray").trimEnd(); } catch (e) {}
        let v9 = 4;
        let v10 = a6 % v9;
        a5 && v10;
        --v10;
        v9--;
        return a6;
    }
}
new C3();
new C3();
new C3();
[36495,-15];
[-8];
[-1238895943,129,1073741823,-3,2147483648];
function f20() {
    const o23 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o23;
}
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this?.constructor;
    try { new v26(); } catch (e) {}
}
const v28 = new F24();
const v29 = v28?.constructor;
let v30;
try { v30 = v29(); } catch (e) {}
v28.length;
const o35 = {
    "type": "function",
};
const v36 = new Worker(Date, o35);
v36.getMessage();
const v38 = new F24();
const v39 = [v38,v38,v38,v38,v38];
const v42 = new Uint32Array(1000);
const v43 = delete v39.length;
("cbrt").toLocaleUpperCase(v30, v43, v39);
try { v43["cbrt"](v42, Uint32Array, v28); } catch (e) {}
f20();
f20();
const v49 = f20();
Number.isNaN(NaN);
65537 >> 65537;
536870912 + 536870912;
const v61 = [-42643,-2,-327102325,-1073741824,5];
function f62(a63, a64) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
class C67 {
}
function f68(a69, a70, a71, a72) {
    function f74() {
        return a72;
    }
    ("number").slice([a69,a69]);
    %OptimizeFunctionOnNextCall(f74);
    function F78() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F78();
    return arguments;
}
for (let v81 = 0; v81 < 10; v81++) {
    f68(f68, f68, v81, v81);
}
class C84 {
}
const v85 = new C84();
function f86(a87, a88) {
    let v89 = a87.BYTES_PER_ELEMENT;
    v89++;
    class C91 {
    }
    const v92 = C91.length;
    v92 !== v92;
    try { ("0x2I").sup(); } catch (e) {}
    class C97 {
    }
    try { C97(); } catch (e) {}
    const v99 = C97?.call;
    v99.length;
    try { v99(null); } catch (e) {}
    class C102 extends C97 {
        constructor(a104, a105, a106, a107) {
        }
    }
    C102.e = C102;
    try { C102(NaN, v85, NaN, v49); } catch (e) {}
    const v109 = a88?.propertyIsEnumerable;
    try { v109(C97); } catch (e) {}
    let v111;
    try { v111 = v109(); } catch (e) {}
    class C112 {
    }
    C112.name = C112;
    try { C112.call(); } catch (e) {}
    const v114 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v114.includes(v111); } catch (e) {}
    class C116 {
    }
    try { C116(); } catch (e) {}
    try { C116.apply(1.7976931348623157e+308, f86); } catch (e) {}
    undefined.toPrimitive;
    undefined.b = undefined;
    C116[undefined.species] = v114;
    const v122 = [];
    try { v122.findLast(1.7976931348623157e+308); } catch (e) {}
    function f125(a126, a127) {
        const o128 = {
            "f": a127,
            [a126]: -12,
        };
        return o128;
    }
    try { f125.toString(); } catch (e) {}
    let v130;
    try { v130 = v122.with(v122, v122); } catch (e) {}
    const v132 = new Float64Array(v122, v130);
    const v133 = new Float64Array(v132, a87, v130);
    v133.values().next();
    return v133;
}
f86.name;
f86.length = f86;
%PrepareFunctionForOptimization(f86);
f86(Uint16Array, v85).length;
%OptimizeFunctionOnNextCall(f86);
f86(v85, v85);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v143 = undefined;
const o144 = {
    __proto__: undefined,
};
o144.h = o144;
v143 = v61;
let v146;
try { v146 = BigInt64Array(4.0, v143); } catch (e) {}
try { v146.lastIndexOf(BigInt64Array); } catch (e) {}
