const o1 = {
};
const v5 = Number.isNaN([-1.0] * "delete");
let v8;
try { v8 = Int32Array.of(); } catch (e) {}
const v9 = new Int32Array(3239);
new Float64Array(v9);
const v12 = /foo(?<=bar)baz/s;
const t8 = /ZMq/vy;
t8[(3239).species] = v12;
class C18 {
    set h(a20) {
        super.f = -9;
        a20 >>>= "toString" >= -9;
        const t13 = "toString";
        const v22 = delete t13?.length;
        try { v22(...v22, v22, this, this); } catch (e) {}
    }
    static [-9] = -9;
    static #f;
    1073741825 = "delete";
    ["delete"] = "toString";
}
C18.name = C18;
const v24 = new C18();
v24[1073741825] = v24;
new C18();
new v24();
0.972577095117499 | 0.972577095117499;
Set.name = Set;
const v30 = new Set();
function F31(a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a33;
    } catch(e35) {
    }
    try {
    } catch(e36) {
    }
    v30[this];
    try {
        new F31(a34, v5);
    } catch(e39) {
    }
}
let v40 = 0.37530096594839424;
v40--;
WeakSet.name;
new WeakSet();
function F46() {
    if (!new.target) { throw 'must be called with new'; }
}
[F46];
try { new Float32Array(-9, Float32Array, o1); } catch (e) {}
try { Map(); } catch (e) {}
let v58 = "max";
class C59 {
    set a(a61) {
        v58 = this;
        const o62 = {
        };
        o62.g = v58;
        const o63 = {
        };
        o63.g = v58;
        const o64 = {
        };
        o64.g = v58;
        function f65(a66, a67) {
            const o68 = {
                ...a66,
            };
            return f65;
        }
        %PrepareFunctionForOptimization(f65);
        const o69 = {
        };
        o69.g = v58;
    }
}
new C59();
6 >>> 6;
const v74 = new BigInt64Array(6);
let v75 = 256;
v75++;
function f78() {
    return 2720;
}
f78.valueOf = f78;
function F79(a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
    const v83 = this.constructor;
    try { new v83(a81, v75); } catch (e) {}
    let v85 = -a81;
    v85--;
    v83.h = f78;
}
const v87 = new v8();
class C88 extends F79 {
    #h;
    3120 = F79;
    #g = v87;
    valueOf(a90, a91, a92) {
    }
    [v87] = v75;
}
new C88();
const o102 = {
    get d() {
        this[0] /= 4294967296;
        let v98 = -908890636;
        return Math.log(this & --v98);
    },
};
o102.d;
try {
    v74.findLast(F46);
} catch(e105) {
    e105 >>> e105;
    new Uint8ClampedArray(129);
    [-4.0,-3.0,-7.745906537435259,-1.2266228113922306e+308,-Infinity,-2.0,-2.0,1e-15,-694511.6819848374,-2.0] ^ "-792442332";
}
