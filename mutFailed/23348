let v0 = "f";
const v8 = new BigInt64Array(424);
"a" >>> v8;
[] = "a";
const v12 = +-31385;
const v14 = new BigUint64Array();
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v17 = 0;
        v17 * v17;
        for (let i = 0; i < 5; i++) {
            v14.entries();
            v17++ ^ this;
            v17 < 5;
        }
        new F15();
    } catch(e25) {
    }
}
new F15();
-v12;
const v28 = v8 / v12;
const v29 = v0++;
const v30 = v8 % v28;
Math.atanh("a");
!v29;
new Int32Array(5);
const v38 = new Int8Array(247);
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this.constructor;
    let v46;
    try { v46 = new v45(v45, a44); } catch (e) {}
    const v47 = typeof v46;
    const o49 = {
    };
    v47 === "symbol";
}
const v51 = new F39();
new F39(F39, F39, v51, v51);
function f53() {
    const o55 = {
        get c() {
        },
    };
    function f56(a57, a58, a59) {
        let v62 = -560274064;
        Math.atan2(v62, v62);
        ~v38;
        Math.round(v30);
        Math.acos(v62);
        ++v62;
        Math.tanh(v30);
        return Math.exp(-2.220446049250313e-16);
    }
    f56(o55, v28, o55);
}
const v76 = new BigUint64Array(10);
for (const v78 in v76) {
    new Float64Array(2147483647);
}
f53();
const v81 = `
    v38[268435439] = BigInt64Array;
    Int8Array in v76;
    Reflect.construct(f53, [], Reflect);
`;
eval(v81);
