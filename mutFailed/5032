function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 754;
    } catch(e3) {
    }
    try {
        this.g = 754;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
const v7 = new F0();
const v8 = [v6,F0];
const v9 = [v7,v8,v7,v8,F0];
const v10 = [v6,v8,v8];
function f11() {
    return v10;
}
class C16 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
const v22 = [-1000000000000.0,Infinity,1.0,-Infinity,1.7976931348623157e+308,5.968300367511291e+307,-2.220446049250313e-16,-3.0,9.510254036543073e+307,5.0];
v22.g = v22;
const v23 = [1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
[-131.14557671807358,v22,v22,1e-15];
const v28 = [4.0,0.2037963153987472];
try { v28.findIndex(v9); } catch (e) {}
[v23,-131.14557671807358,4.0];
const v31 = [0.0,-1000.0,2.557943047142931];
const v32 = [-2.2250738585072014e-308,1e-15,0.0,-3.0,2.220446049250313e-16,1000000000000.0,-386.72889766700735,4.359327317391378];
v32[3] = v32;
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
~-1000000000.0;
for (let v39 = 0; v39 < 5; v39++) {
    try {
        v31.valueOf = v39;
    } catch(e40) {
    }
}
2147483647 >>> 2147483647;
~20655;
const v49 = [256,54026];
try { ("forEach").toUpperCase(); } catch (e) {}
try { Math.expm1(v9); } catch (e) {}
const v54 = -2 | -2;
!-2;
Math.hypot(v49);
~135.68951961804942;
try { gc(); } catch (e) {}
const o64 = {
    "execution": "async",
    "type": "minor",
};
try { Int16Array.call(-131.14557671807358); } catch (e) {}
new Float32Array(v54);
for (let [v69,...v70] of "log1p") {
}
for (let [i74, i75] = (() => {
        10 >> 10;
        return [0, 10];
    })();
    i74 < i75;
    i74++) {
}
const v84 = new Int16Array(2183);
const v88 = ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
const o93 = {
    [v88](a90) {
    },
    set b(a92) {
    },
};
new Uint8Array(255);
Int16Array.f = Int16Array;
const v97 = new Int16Array(8);
try { parseFloat(Uint8Array); } catch (e) {}
function f100(a101) {
    return f100;
}
const v103 = [1.0,141599.63044947106,730.845463907873,1000000.0,-4.2811873669589365e+307,0.0,3.0];
try { v103.forEach(-5n); } catch (e) {}
async function f105(a106, a107, a108) {
    delete v97[-1000000000.0];
    let [v110,v111,...v112] = v84;
    v84[5];
    await v111;
}
const v115 = parseFloat("minor");
v115 & v115;
