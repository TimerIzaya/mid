class C3 {
    static {
        const t2 = 0.5612490327146098;
        t2[2] = this;
        super[965.857395492762];
        [-1502393009,-2,512,268435441,2,11454];
        [16,-536870912,128,1622564390,-4];
        [10,-4294967296,48584,-1872977668];
    }
    129;
    #h;
    176 = 0.5612490327146098;
    1073741825;
}
new C3();
new C3();
const v11 = new C3();
class C12 extends C3 {
    constructor(a14, a15) {
        super();
        for (let v16 = 0; v16 < 32; v16++) {
            v11["p" + v16] = v16;
        }
    }
    static f;
    static #h = 0.3425213948644915;
    static #g;
}
new C12(0.5612490327146098, 0.3425213948644915);
new C12(0.5612490327146098, 965.857395492762);
new C12(965.857395492762, 0.5612490327146098);
class C22 {
    static {
        for (let i26 = 0, i27 = 10;
            i26 < i27;
            (() => {
                function f31() {
                    const v32 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
                    const o33 = {
                        __proto__: v32,
                    };
                    new Date();
                    return f31;
                }
                const v36 = [601759695];
                const v37 = [1073741824,1073741823,1376142744,1073741825];
                function f39(a40, a41, a42, a43) {
                    function F44() {
                        if (!new.target) { throw 'must be called with new'; }
                        this.c = 1163987790;
                    }
                    const v47 = new F44();
                    const o48 = {
                        __proto__: v47,
                        "c": v47,
                    };
                    function f50() {
                        return a40;
                    }
                    f31();
                    const v53 = new Int8Array();
                    function f54(a55, a56) {
                        return i27;
                    }
                    f54(f54(v37, C22));
                    v53.buffer.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f50);
                    let v63;
                    try { v63 = v37["find"](..."find", a43, ...v36, ...v37, ...522675525n); } catch (e) {}
                    v63 <= a42;
                    return arguments;
                }
                for (let v65 = 0; v65 < 10; v65++) {
                    f39();
                }
                i26++;
            })()) {
        }
    }
}
