class C3 {
    static #o(a5) {
        return -3.0;
    }
    ["function"] = "maxByteLength";
    static ["maxByteLength"] = "Pc";
    6;
    static 9 = "function";
    #d;
}
const v9 = new C3();
const v10 = new C3();
const v11 = new C3();
/l/vdmy;
/HT(?:ab)+/gvdm;
const v14 = /Nxn\P{Decimal_Number}/gumsy;
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a17;
    } catch(e21) {
        const v23 = new Map();
        v23.values();
        let v25 = [601759695];
        v25++;
    }
}
new F15("maxByteLength", "maxByteLength", "Pc", "Pc");
const v28 = new F15(v14, v10, "maxByteLength", v11);
new F15(v28, v11, v9, "function");
const v31 = [];
new Uint16Array(93);
for (let v35 = 0; v35 < 5; v35++) {
    let v38 = -2147483649 * v35;
    ++v38;
    Math.tan(v38);
}
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
}
const v47 = new F41();
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = 47398;
}
new F48();
const v52 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
class C53 {
}
const v54 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v55 = [601759695];
for (let v56 = 0; v56 < 5; v56++) {
    function f57() {
        const v60 = Array();
        v60.unshift();
        try {
            v52.forEach(Float64Array);
        } catch(e63) {
        }
        const o64 = {
            "c": v55,
            "arguments": v54,
            ...v47,
            "type": C53,
        };
        const v65 = [];
        v65[Symbol.toPrimitive] = Array;
        function f68() {
        }
        v65[Symbol.toPrimitive] = f68;
        function F71(a73) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C74 extends F71 {
            valueOf(a76, a77, a78, a79) {
                super[this] = F71;
            }
            [v14] = v60;
            constructor(a81, a82, a83, a84) {
                if (v31) {
                }
            }
        }
        const v85 = new C74();
        Object.defineProperty(v85, Symbol.toPrimitive, { value: Symbol });
        const o90 = {
            set g(a89) {
            },
        };
        for (const v91 in o90) {
            let v92;
            try { v92 = v31.flat(4096); } catch (e) {}
            Object.defineProperty(v92, 1, { enumerable: true, value: v91 });
            v92[1];
            new C53();
            v85.valueOf(v91);
        }
        return Array;
    }
    f57();
    %OptimizeFunctionOnNextCall(f57);
}
let {...v98} = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
for (let v99 = 0; v99 < 5; v99++) {
    Math.atan2(-268435456, v99);
}
