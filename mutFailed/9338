const v1 = new WeakMap();
class C2 {
    static valueOf(a4) {
        v1[v1] = a4 >>> (a4 == WeakMap);
        let v7;
        try { v7 = a4(a4); } catch (e) {}
        return v7;
    }
    [WeakMap];
    [v1];
    [-2] = v1;
    static #c = WeakMap;
}
const v8 = new C2();
new C2();
const v10 = new C2();
function f14(a15, a16, a17, a18) {
    const o25 = {
        "c": WeakMap,
        "b": v8,
        "a": 2147483647,
        "f": a16,
        [a17](a20, a21) {
            super.b;
            %VerifyType(a20);
            super[a15] = this;
            try {
                C2.length = 1;
            } catch(e24) {
            }
            return WeakMap;
        },
    };
    return o25;
}
f14(C2, 9, f14(C2, 5, v10, 9), 9);
f14(9, 2147483647, v1, 9);
function f32() {
    function F34(a36) {
        if (!new.target) { throw 'must be called with new'; }
        const v37 = this.constructor;
        v37.e = v37;
        let v38;
        try { v38 = new v37(); } catch (e) {}
        v38.g = -1;
    }
    new F34();
    const v40 = new F34(-1);
    class C41 extends F34 {
        [-1];
    }
    new C41();
    return v40;
}
%PrepareFunctionForOptimization(f14);
f32();
%OptimizeFunctionOnNextCall(f32);
f32();
