const v0 = /(a)\1(?:a+)?(a)*/ums;
const v1 = /((?:a+){0,0}(?<!a))/vsy;
const v2 = /((?:ab))/dimsy;
class C3 {
    [v0];
    p(a5) {
        try {
            v1.length = 0;
        } catch(e7) {
        }
        return v0;
    }
    constructor(a9, a10) {
        class C11 {
            #c = this;
            static [v1] = a10;
        }
        new C11();
        new C11();
        new C11();
    }
}
const v17 = new Uint8Array(2098);
const v20 = new BigUint64Array(1024);
new Int32Array(9);
let v24 = new C3(v1, v1);
const v25 = new C3(v0, v1);
new C3(v1, v1);
class C27 {
    static get a() {
        return v24;
    }
    static get d() {
        v1 && v25;
        let v34;
        try { v34 = C3(v0, v2); } catch (e) {}
        v24 &&= v34;
        return C3;
    }
    [v1];
    3 = v1;
}
const v35 = new C27();
const v36 = new C27();
const v38 = Symbol.isConcatSpreadable;
v20[v38] = v38;
const t46 = -536870912;
const v42 = new t46();
Math.tan(-1);
function f46(a47, a48) {
    v25[v17] = v35;
    try {
        a48.__proto__ = a48;
    } catch(e50) {
    }
    const o62 = {
        ...a47,
        "e": v25,
        "c": v0,
        "f": a48,
        "a": a48,
        valueOf(a52, a53, a54) {
            a48 != v24;
            return a48;
        },
    };
    return o62;
}
f46(v35, f46(C27, v36));
f46(v42, v24);
parseFloat(parseFloat);
