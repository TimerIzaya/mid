function f0() {
}
Float32Array[Symbol.toPrimitive] = f0;
const v5 = new Float32Array(158);
1 + 1;
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v9 = new Float32Array(1);
try { v9.join(1); } catch (e) {}
let v13;
try { v13 = Uint8ClampedArray.of(); } catch (e) {}
try { v13.reduceRight(f0); } catch (e) {}
const v15 = new Uint8ClampedArray(5);
const v16 = [v15,v9,f0];
const v17 = [1,v16];
const v18 = [v5,Float32Array,1,1,Uint8ClampedArray];
try { v18.includes(v17); } catch (e) {}
[270.07576096564276,0.35158689768604534,139665.58605434536,-1000000.0];
const v21 = [0.7833459590352528,4.0,-1000000.0,1e-15,0.45717647938760564,3.0];
const v22 = [0.1859229711807484,Infinity,-803805.5340516508];
BigUint64Array.prototype;
new BigUint64Array();
Float32Array.prototype = Float32Array;
const v28 = v18 !== v16;
v28 || v28;
if (v28) {
    v22[Float32Array];
} else {
    for (let v31 = 0; v31 < 32; v31++) {
        v21["p" + v31] = v31;
    }
}
let v35;
try { v35 = ("string").fixed(); } catch (e) {}
try { v35.italics(); } catch (e) {}
class C37 {
    static 7;
}
C37.name;
C37[7] = C37;
try { new WeakMap(); } catch (e) {}
WeakMap.e = Float32Array;
WeakMap.e = WeakMap;
const v41 = v15.constructor;
v41.length;
let v43;
try { v43 = new v41(Float32Array, f0, v18); } catch (e) {}
v43[1];
class C45 extends v41 {
    f;
    static f;
}
try { C45(); } catch (e) {}
C45.length = C45;
new C45();
const v48 = new WeakMap();
const v49 = v48?.has;
try { new v49(v43); } catch (e) {}
const o53 = {
    get c() {
        v48.get();
    },
};
o53.f = o53;
class C54 {
}
const o55 = {
};
o55.e = o55;
o55.h = o55;
try {
    o55.d = C45;
} catch(e56) {
}
try {
    const o57 = {
    };
    o57.h = o57;
    o57.d = -4096;
    o57.d = C45;
    o57.h = Uint8ClampedArray;
} catch(e58) {
}
try {
    const o59 = {
    };
    o59.c = o59;
    o59.d = C45;
    o59.h = Uint8ClampedArray;
    o59.a = f0;
} catch(e60) {
}
try {
    const o61 = {
    };
    o61.a = f0;
    o61.d = C45;
    o61.h = Uint8ClampedArray;
    o61.a = 158;
} catch(e62) {
}
class C63 {
    static {
        this.prototype = this;
        try { this(); } catch (e) {}
    }
}
const v66 = C63.length;
v66 + v66;
const o73 = {
    o(a69) {
        const o71 = {
        };
        o71.type = o71;
        gc(o71);
    },
};
const v74 = o73?.__lookupGetter__;
try { new v74(v21); } catch (e) {}
o73["o"]();
-21383n * -21383n;
new WeakSet();
