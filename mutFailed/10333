function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    try {
        this.c = 536870889;
    } catch(e3) {
    }
    try {
        this.e = 536870889;
    } catch(e4) {
    }
}
new F0();
new F0();
new F0();
8 >> 8;
new Float64Array(8);
const v14 = new Int16Array(4096);
v14[880];
BigInt64Array.length;
new BigInt64Array(979);
/a*b|c[13{z}E]/di;
/z(?:a+)*/gui;
/F/vms;
Math.g = Math;
const v25 = Math.round();
for (let v26 = 0; v26 < 10; v26++) {
    async function f27(a28, a29, a30) {
        const v31 = a28 ** f27;
        v31 >>> v31;
        4096 * 4096;
        try { BigInt64Array(v31); } catch (e) {}
        new BigInt64Array(4096);
        (4096)[1087];
        for (let i = 0; i < 5; i++) {
            class C39 {
            }
            for (let v40 = 0; v40 < 5; v40++) {
            }
        }
        const v41 = await v25;
        v41 - v41;
    }
    function f43() {
        return f27;
    }
    Object.defineProperty(f27, "valueOf", { writable: true, enumerable: true, get: f43 });
    f27();
}
