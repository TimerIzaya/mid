class C3 {
    static {
        super[this];
    }
    h;
    set d(a7) {
        this[a7] &&= -2;
    }
    [-2] = -2;
    static 3;
    static {
        try {
        const t0 = -2;
        new t0(this, this);
        } catch (e) {}
        const o13 = {
            "execution": "async",
            "type": "major",
        };
        new Int8Array(3787);
        function f17() {
            return f17;
        }
        function f18(a19) {
            const v20 = a19?.constructor;
            let v21;
            try { v21 = v20(a19, f17); } catch (e) {}
            const o23 = {
                get d() {
                    return this;
                },
            };
            return v21;
        }
        gc(o13);
    }
}
new C3();
new C3();
new C3();
for (let i29 = 0; i29 < 1; i29++) {
}
new Uint8Array(9);
new Float32Array(3316);
new BigUint64Array(199);
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    let v64 = 9;
    const v65 = v64++;
    function f66() {
        const o69 = {
            [536870887]: 4294967296,
        };
        function f70() {
            for (let [i73, i74] = (() => {
                    switch (f70) {
                    }
                    return [0, 10];
                })();
                i74 << i74, i73 < i74;
                i73++, i74--) {
            }
            return 268435439;
        }
        %OptimizeFunctionOnNextCall(f70);
        const o90 = {
            [-4294967297n](a84, a85, a86, a87) {
                eval(a84);
            },
        };
        const v93 = v64 ** v64;
        Math.sqrt();
        9007199254740991 * v93;
        return v65;
    }
    function f96() {
        const o97 = {
        };
        return o97;
    }
    f66();
    %OptimizeFunctionOnNextCall(f66);
    class C104 {
        static {
            super[this];
        }
    }
}
new Float64Array(-2);
const v110 = -Infinity;
const o111 = {
    "a": v110,
    "d": v110,
};
class C113 extends o111.constructor {
}
new BigUint64Array();
new BigUint64Array(1448);
function f117(a118, a119, a120) {
}
([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(f117);
gc();
