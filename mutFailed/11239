const v2 = new Uint8Array(16);
let v3 = 10;
v3--;
function f6() {
    function f7(a8, a9, a10, a11) {
        function f13() {
            return arguments;
        }
        const v15 = new Int8Array();
        v15.buffer;
        %OptimizeFunctionOnNextCall(f13);
        ("find").codePointAt(f7);
        return arguments;
    }
    return f7();
}
Uint8ClampedArray.toString = f6;
Uint8ClampedArray.name;
new Uint8ClampedArray(v3);
let v22 = 3;
const v23 = v22 - v22;
v23 !== v23;
const v26 = new Int32Array(v22);
v26[1] = v26;
let v28 = [v26];
v28[Symbol.toPrimitive] = f6;
const v31 = v28++;
const v32 = v31 - v31;
v32 + v32;
const v35 = new Uint32Array();
const v36 = [1711596310];
let v37;
try { v37 = v36.lastIndexOf(Uint8ClampedArray); } catch (e) {}
v37--;
v36[9] = v35;
-(-26066141n);
~1881815799n;
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    a45 % a45;
    a47--;
    a48 / a48;
    a45 - a45;
    a46 !== a46;
    let v54 = a46 - a46;
    v54--;
    try {
        function f56(a57, a58) {
        }
        try { Set.bind(Set); } catch (e) {}
        const t50 = "-1073741824";
        t50[6] = "-1073741824";
        const t52 = "-1073741824";
        t52[8] = "-1073741824";
        class C62 extends Set {
        }
        try { new C62(); } catch (e) {}
        const v64 = new C62();
        v64[Symbol.toPrimitive] = f56;
        try { v64.has("-1073741824"); } catch (e) {}
        let v68;
        try { v68 = v64.has(Set); } catch (e) {}
        v68 && v68;
        !v68;
        const v71 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        let v72;
        try { v72 = v71.indexOf(v71); } catch (e) {}
        -v72;
        v72 % v72;
        const v75 = [601759695];
        const v76 = [1073741824,1073741823,1376142744,1073741825];
        522675525n < 522675525n;
        const v79 = 522675525n + 522675525n;
        v79 + v79;
        function f81(a82, a83, a84, a85) {
            a83 ^ a83;
            const v87 = a82 >>> a82;
            v87 - v87;
            a84.e = a84;
            -a82;
            a83 !== a83;
            a85[8] = a85;
            const v91 = a84--;
            v91 >>> v91;
            function f94() {
                return f56;
            }
            function f95(a96) {
                function F97(a99, a100, a101, a102) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                new F97();
            }
            Object.defineProperty(arguments, "toString", { writable: true, configurable: true, get: f94, set: f95 });
            const v104 = arguments[3];
            try { v104.at(a85); } catch (e) {}
            arguments[1] = arguments;
            function f106() {
                const v108 = ("Vre")?.constructor;
                try { v108.fromCodePoint(a83); } catch (e) {}
                let v110;
                try { v110 = v108(v64); } catch (e) {}
                v110[6];
                v110[5];
                let v114 = -268435456;
                v114--;
                const o119 = {
                    "e": -4294967295,
                    ...v71,
                    ..."Vre",
                    "c": a85,
                    "f": "-1073741824",
                    84: arguments,
                    ..."Vre",
                    valueOf(a117, a118) {
                        return a82;
                    },
                    ..."Vre",
                    4: "Vre",
                    "c": v114,
                    5: -4294967295,
                    6: v114,
                };
                o119[6] = o119;
            }
            try { f106(); } catch (e) {}
            f106();
            %OptimizeFunctionOnNextCall(arguments);
            try { ("find").blink(); } catch (e) {}
            let v124;
            try { v124 = v76["find"](..."find", a85, ...v75, ...v76, ...522675525n); } catch (e) {}
            const v125 = v124 <= a84;
            const v126 = v125 || v125;
            v126 && v126;
            !(!v126);
        }
        const v130 = f81?.toString;
        try { new v130(); } catch (e) {}
        try { f81(a48, a48, C62, a48); } catch (e) {}
        f81.e = f81;
        BigUint64Array.prototype = BigUint64Array;
        try { new BigUint64Array(1881815799n, v54, 1881815799n); } catch (e) {}
        for (let v135 = 0; v135 < 10; v135++) {
            f81(v135, v135, BigUint64Array, "-1073741824");
        }
        this.b = a46;
    } catch(e137) {
    }
    try {
        this.f = a46;
    } catch(e138) {
    }
    class C140 {
        static 9 = 9.187362692894364;
    }
    C140[9] = C140;
    let v141;
    try { v141 = new C140(); } catch (e) {}
    function f142(a143) {
        function F144() {
            if (!new.target) { throw 'must be called with new'; }
            const v146 = this?.__lookupGetter__;
            try { new v146(this); } catch (e) {}
        }
        new F144();
        return v35;
    }
    Object.defineProperty(v141, "constructor", { configurable: true, enumerable: true, value: f142 });
    const v149 = v141?.constructor;
    try { new v149(); } catch (e) {}
    const v151 = v22++;
    v151 + v151;
    const v153 = v151 != v151;
    v153 || v153;
    const v155 = -v151;
    const v156 = v155 + v155;
    v156 >> v156;
    try {
        this.d = a48;
    } catch(e158) {
    }
}
new F43(16, 16, 16, -26066141n);
class C160 {
}
try { C160.bind(F43); } catch (e) {}
const v162 = new C160();
v162.constructor = Symbol;
const v163 = v162?.constructor;
try { new v163(); } catch (e) {}
const v165 = v162?.constructor;
let v166;
try { v166 = new v165(); } catch (e) {}
function f167() {
    function f168(a169) {
        let [,v170] = v2;
        v26.buffer;
        return v170;
    }
    return f168;
}
function f172(a173) {
    for (let v174 = 0; v174 < 100; v174++) {
        f167();
    }
}
Object.defineProperty(v166, "constructor", { configurable: true, enumerable: true, get: f167, set: f172 });
const v176 = v166?.constructor;
try { new v176(); } catch (e) {}
function f178(a179, a180) {
    const v181 = a180?.constructor;
    try { new v181(); } catch (e) {}
    const v183 = a180?.constructor;
    try { new v183(); } catch (e) {}
    const v185 = a180?.__lookupGetter__;
    const v186 = v185?.toString;
    try { new v186(); } catch (e) {}
    a180?.constructor;
    return v185;
}
const v190 = f178(Uint16Array, v162);
v190.length;
const v192 = v190?.constructor;
try { new v192(Uint8ClampedArray); } catch (e) {}
try { new v192(v3); } catch (e) {}
try { new v190(v28); } catch (e) {}
f178();
const v197 = new F43(16, 16, v3, 268435440n);
const v198 = v197.b;
v198 & v198;
const v200 = new F43(16, v22, 16, -26066141n);
v200.b;
v200.b;
const v205 = new Uint8Array(6);
v205.valueOf = f167;
v205[1] = v205;
const v206 = v205[1];
v206 << v206;
new Int8Array(v205);
