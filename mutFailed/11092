const v2 = new Float64Array(183);
const v5 = new BigInt64Array(3367);
const v8 = new Float64Array(403);
class C12 extends BigInt64Array {
    constructor(a14, a15, a16, a17) {
        super(v8, a14, 183);
        %VerifyType(a14);
        let v18;
        try { v18 = v8.at(a15); } catch (e) {}
        v2 * a16;
        v18 = -11n;
        try {
            this.reverse();
        } catch(e21) {
        }
    }
    [-871600458n];
    static #h = v8;
}
new C12(183, v5, v5, 183);
new C12(403, C12, 183, 183);
new C12(3367, v2, v2, 183);
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v28 = [601759695];
function f30(a31, a32, a33, a34) {
    function f35() {
        try {
            v25.forEach(a32);
        } catch(e39) {
        }
        const v40 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o46 = {
            toString(a42, a43) {
                (a34 && a32) <= v40;
                return a33;
            },
        };
        const o66 = {
            "c": -4294967297n,
            [522675525n](a49, a50) {
            },
            "c": v28,
            valueOf(a52, a53) {
                return a53;
            },
            [-4294967297n](a55, a56, a57, a58) {
            },
            "maxByteLength": -268435456,
            "arguments": v27,
            ..."Vre",
            valueOf(a60, a61) {
                return a60;
            },
            ...-11n,
            4: 403,
            "type": "Vre",
            toString(a63, a64, a65) {
                return a65;
            },
            5: -4294967295,
            6: -268435456,
        };
        return a31;
    }
    f35();
    %OptimizeFunctionOnNextCall(f35);
    return v28;
}
for (let v68 = 0; v68 < 5; v68++) {
    f30(v68, v68, v28, v68);
}
