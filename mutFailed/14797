const v0 = [-2147483649,2147483649,-1024,-14,-606,9007199254740991,10000,-128,1024];
const v1 = [-536870912,42160,-46937,27988,-9007199254740990,2147483649,16];
[10,-319903302,-9007199254740992,-2016563053];
function f6(a7, a8) {
    const o17 = {
        get g() {
            return -14;
        },
        "g": a8,
        "b": v0,
        "c": a8,
        ...v1,
        toString(a14, a15, a16) {
            super[a16] = v1;
            return a14;
        },
        ...a7,
    };
    return o17;
}
f6(v0, -27870);
f6(v1, 39110);
f6(v1, -27870);
class C28 extends Map {
}
const v29 = new C28();
const v30 = new C28();
const v31 = new C28();
const v35 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v37 = new Uint32Array(5);
let v38 = -4294967297n;
v38--;
const v40 = [601759695];
const v41 = [1073741824,1073741823,1376142744,1073741825];
function f43(a44, a45, a46, a47) {
    let v48;
    try { v48 = a44.toLocaleString(); } catch (e) {}
    const v49 = a44?.constructor;
    let v50;
    try { v50 = v49(); } catch (e) {}
    try { v49(); } catch (e) {}
    const v53 = arguments.length;
    Object.defineProperty(v29, "e", { configurable: true, enumerable: true, value: f43 });
    const v55 = v30["entries"](a46, ...v31, BigUint64Array, ..."entries", a45, v53, v50, ...v48, v49);
    const v57 = Symbol.toStringTag;
    v30[v57] = v57;
    function f58() {
        let v60;
        try { v60 = ("Vre").charAt(4096); } catch (e) {}
        try { v60.lastIndexOf(f58); } catch (e) {}
        let v62;
        try { v62 = ("Vre").codePointAt(v35); } catch (e) {}
        v62 - v62;
        v62 ^ v62;
        let v65 = Float64Array;
        v65 = a45;
        let v66 = v35.length;
        v66++;
        try {
            v41.forEach(a45);
        } catch(e69) {
            e69.stack = e69;
        }
        const o80 = {
            "c": v38,
            "c": v40,
            valueOf(a71, a72) {
                return a72;
            },
            1073741824: v37,
            [v38](a74, a75, a76, a77) {
                eval(v50);
            },
            "arguments": 5,
            256: a47,
        };
        o80[256];
    }
    f58();
    const v84 = Array();
    let v85;
    try { v85 = v84.findLast(f43, v37); } catch (e) {}
    v84.unshift("entries", v55, "entries", v85);
    let v88;
    try { v88 = Date.of(); } catch (e) {}
    try { v88.join(v49); } catch (e) {}
    const v90 = new Date(v40);
    v90.c = v90;
    const v91 = v90.buffer;
    v91.maxByteLength;
    const v93 = v91.slice(v49);
    try { Int32Array(v93, arguments, v38); } catch (e) {}
    function f96(a97, a98, a99, a100) {
        return v29;
    }
    const v101 = new Int32Array();
    const v102 = v101[3];
    v102 + v102;
    for (let v104 = 0; v104 < 5; v104++) {
    }
    %OptimizeFunctionOnNextCall(f58);
    try { v41["find"](..."find", a47, ...v40, ...v41, ...522675525n); } catch (e) {}
    return v49;
}
for (let v107 = 0; v107 < 10; v107++) {
    f43(v37);
}
%OptimizeFunctionOnNextCall(f43);
f43();
