function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = this;
    } catch(e7) {
    }
    try {
        this.e = -51474;
    } catch(e8) {
    }
    try {
        this.d = -256;
    } catch(e9) {
    }
}
new F3(-51474, -703538225);
const v11 = new F3(-703538225, -51474);
new F3(-703538225, -703538225);
new gc(13);
new Uint32Array(3);
new Uint8Array(11);
for (let v22 = 0; v22 < 5; v22++) {
    function f23() {
        const v27 = new Float32Array(Float32Array);
        for (let v28 = 0; v28 < 25; v28++) {
            function f29(a30, a31, a32, a33) {
                F3[1073741824];
                for (let v35 = 0; v35 < 5; v35++) {
                }
                a31--;
                a30[0] = v28;
                const v38 = arguments?.__lookupGetter__;
                let v39;
                try { v39 = v38.constructor(f29, v38, v38); } catch (e) {}
                new Float32Array(v28, v39, a31);
                const v42 = new Int32Array();
                const v43 = v42;
                a30.fill(...v43);
                return Float32Array;
            }
            for (let v45 = 0; v45 < 10; v45++) {
                f29(v27);
            }
        }
        for (let v47 = 0; v47 < 5; v47++) {
            const t45 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
            t45[3] = f23;
            const v52 = new v11(3375);
            let [v53,,v54,...v55] = v52;
            v47++;
        }
    }
    f23();
}
