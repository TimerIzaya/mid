class C3 {
    [-7n] = 35939n;
    constructor(a5) {
        try {
            this.fuck(this, -7n, /[^a+?]/vdisy, this);
        } catch(e8) {
        }
    }
    static [35939n];
    static [-7n];
    #g = 9071n;
}
new C3(-7n);
new C3(9071n);
new WeakSet();
1 + 1;
127 << 127;
new Uint32Array(127);
new Int8Array(11);
Uint8Array.b = Uint8Array;
const v32 = [512,2147483649,-4294967296,4455,2147483648,-5];
try { v32.groupToMap(Uint32Array); } catch (e) {}
[24297,1073741824,201397439];
const v36 = ([-1595056961])?.find;
try { new v36(127); } catch (e) {}
const v38 = new Uint32Array(256);
const v40 = -2;
try {
    v38.length = 2;
} catch(e41) {
}
const t31 = 5n;
new t31(64);
-2183;
Int16Array.g = Int16Array;
const v52 = new Int16Array(2183);
new Uint8Array(255);
~8;
const v59 = new Int16Array(8);
parseFloat.d = parseFloat;
async function f61(a62, a63, a64) {
    let v65 = a63 >> a63;
    v65++;
    delete v59[-56898];
    let [v68,v69,...v70] = v52;
    v68 >> v68;
    let v72 = v52[5];
    v72--;
    v32.length;
    f61++;
    try { Math.atan2(Math, Uint8Array); } catch (e) {}
    14 ^ Uint8Array;
    const v80 = -v40;
    v80 - v80;
    const v82 = [601759695];
    function f83(a84, a85, a86, a87) {
        arguments[4] = arguments;
        return a86;
    }
    f83(v82);
    Math.log(v80);
    Math.pow(14, 14);
    await v69;
    for (let v95 = 0; v95 < 10; v95++) {
        const t64 = "-4294967296";
        t64[Symbol.match] = Symbol;
    }
    return Uint8Array;
}
new C3(9071n);
new BigUint64Array(1024);
new Uint8Array(194);
new Uint16Array(64);
function F108() {
    if (!new.target) { throw 'must be called with new'; }
}
const t76 = [Uint8Array];
t76[536870912] = Int16Array;
(2).constructor;
Uint32Array();
const v115 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
const o116 = {
    __proto__: v115,
};
try { o116.group(F108); } catch (e) {}
