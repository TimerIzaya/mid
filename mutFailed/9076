/o[G]/udimsy;
/0o/gv;
/(?:ab)|cde*/gudisy;
function f8(a9) {
    const v10 = [];
    const o11 = {
        __proto__: v10,
    };
    return 64;
}
Uint16Array.valueOf = f8;
new Uint16Array(64);
new Uint32Array(10);
new Float32Array(2149);
function f22() {
    return 536870887n;
}
try { f22(f22, 2149); } catch (e) {}
let v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
const v26 = v24++;
function f27(a28, a29, a30, a31) {
    function f32() {
        b = v24;
        const o33 = {
            "c": v24,
        };
        return o33;
    }
    f32();
    %OptimizeFunctionOnNextCall(f32);
    try { v25["find"](..."find", a31, ...v24); } catch (e) {}
    return v25;
}
for (let v37 = 0; v37 < 10; v37++) {
    f27(v37, v24, v26, v37);
}
%OptimizeFunctionOnNextCall(f27);
f27(5, 5, Float32Array);
new Map();
24560 ^ 24560;
function F52() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    Date(Date, undefined);
    const v60 = Array(19793);
    for (const v61 of v60) {
    }
    const v62 = [v60,v60,v60,v60];
    v62.toString = f22;
    const v64 = new BigUint64Array();
    v64.constructor = f22;
    v64.constructor;
    const v67 = [[v62,v62,v62]];
    Object.defineProperty(v67, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f8 });
    v67.toSorted(v67);
    v67 >= Uint16Array;
}
new F52();
new F52();
class C76 {
    constructor(a78) {
        try {
        } catch(e79) {
        }
        try {
        } catch(e80) {
        }
        for (const v81 of "bigint") {
        }
    }
}
C76.name;
class C83 extends C76 {
}
new C83();
const o85 = {
};
