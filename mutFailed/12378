const v0 = [];
function f1() {
    const o15 = {
        "g": v0,
        p() {
            const v3 = this[this];
            Math.exp(new.target);
            const v9 = ~-65022;
            this & v3;
            const v11 = !-65022;
            -0.3003139863880051 || this;
            -v11;
            Math.log1p(new.target);
            return v9;
        },
    };
    return o15;
}
const v16 = f1();
const v17 = f1();
const v18 = f1();
function f25() {
    return f25;
}
const v26 = f25();
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = f25.constructor;
    try { v31(this, v26); } catch (e) {}
}
new F27();
function f34(a35, a36, a37) {
    const o55 = {
        "f": 45991454,
        "b": a36,
        toString(a39, a40, a41, a42) {
            const v43 = [45991454,a41,a35,this,a42];
            [a37,a41];
            [this,v16];
            function f48() {
                const v51 = Array(4087, -2.220446049250313e-16);
                v51[4037] = v51;
                return Array;
            }
            %OptimizeFunctionOnNextCall(f48);
            const v52 = [a40,a37,v43,-61346,v43];
            Reflect.apply(a37.p, this, v52);
            return a37;
        },
        "h": a37,
    };
    return o55;
}
f34(v18, v18, v16);
f34(1919813201n, v18, v16);
f34(45991454, v17, v16);
function f59() {
    return f59;
}
Object.defineProperty([f59], 512, { value: f59 });
new Int8Array(-45057);
const v64 = new Int8Array();
try {
    v64.length = 415075273;
} catch(e66) {
}
