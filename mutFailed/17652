let v0 = 178.30102528902762;
const v3 = [3.132532207120242e+307,-716883.3781295349];
[v3];
const v5 = [v3,v0];
let v8 = 0;
do {
    v3[v8] = 3.132532207120242e+307;
    v0 = -716883.3781295349;
    v5.length ||= 2147483647;
    v8++;
} while (v8 < 3)
const v13 = /f(ab|cde)\1/gvdsy;
v13.b = v13;
const v14 = /P(?:a*)+/vims;
const v15 = /\cj\cJ\ci\cI\ck\cKfoo(?!bar)baz(ab|cde)\1/gviy;
[0,2660,-107636500,4294967296];
const v17 = [-2,-8,8,4096,-11,41814];
[16,1073741824,10000,-12,32963,-197774186,257,30459,1188131266,3];
for (let v19 = 0; v19 < 5; v19++) {
    v3["reduce"](3.132532207120242e+307, "reduce");
    2147483647 > v15;
    ("z").normalize("NFD");
    function f26() {
        function f27(a28, a29, a30) {
            return a30;
        }
        const v31 = f27?.apply;
        try { new v31(v14, v17); } catch (e) {}
        try { ("function").sub(); } catch (e) {}
        const o36 = {
            "type": "function",
        };
        const v37 = new Worker(f27, o36);
        v37.terminateAndWait();
        v37.terminate();
        return o36;
    }
    try { f26.apply(v15, f26); } catch (e) {}
    const v41 = f26();
    v41.d = v41;
    %OptimizeFunctionOnNextCall(f26);
}
