const v0 = [40020,2,65537,2147483649,-1469,268435439,9];
[9007199254740990,536870889];
[9,-14295,1073741825,15];
let v3 = 1250;
BigInt64Array.e = BigInt64Array;
new BigInt64Array(v3);
let v6 = 3451;
v6--;
Float64Array.e = Float64Array;
const v9 = new Float64Array(v6);
64 + 64;
try { Int32Array.of(); } catch (e) {}
new Int32Array(64);
const v15 = [];
try { v15.forEach(64); } catch (e) {}
try { v15.findLast(v9); } catch (e) {}
const v18 = [-6.786788220284745e+307,3.0441372838377454,0.16607240252493405,9.1870148243921,-1.1724672307306477e+307,-1.3233810423722777e+308,0.3268930863961368];
const v19 = [1.1232876344345233e+308,1.0,3.0,-1.7976931348623157e+308,892.6991223982873,1000000.0,0.1500507613745743,8.371259043064821,1e-15,-192.2897093527156];
try { v19.map(v18); } catch (e) {}
let v21;
try { v21 = v19.with(64, Int32Array); } catch (e) {}
const v22 = [1000000.0,2.0511322290964932e+307];
try { v22.sort(v9); } catch (e) {}
v22[1] = v22;
try { v22.entries(); } catch (e) {}
function f25(a26, a27) {
    try { a26.findIndex(f25); } catch (e) {}
    try { a27.toReversed(); } catch (e) {}
    const v30 = a26?.values;
    v30.d = v30;
    try { new v30(); } catch (e) {}
    try { a27.findLast(a26); } catch (e) {}
    let v33;
    try { v33 = a26.push(v0); } catch (e) {}
    v33 - v33;
}
const v35 = f25(v19, v15);
v21(v22, v18);
f25(v15, v18);
%VerifyType(v35);
const v39 = v22 || v35;
try { v39.copyWithin(v3, v39); } catch (e) {}
let v41;
try { v41 = v39.group(v39); } catch (e) {}
f25(v15, v15);
try { v39["asinh"](); } catch (e) {}
try {
    try { ("deleteProperty").toLocaleLowerCase(); } catch (e) {}
    const v47 = ("deleteProperty")[6];
    try { v47.sub(); } catch (e) {}
    try { v47.repeat(v41); } catch (e) {}
    v3--;
    ("-6").indexOf("deleteProperty", 5);
} catch(e53) {
}
