const v1 = [];
v1[6] = 4294967295;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.hasOwnProperty();
    const v8 = this.constructor;
    try { new v8(); } catch (e) {}
}
new F3();
const v13 = new Int16Array(Int16Array, Int16Array, Int16Array);
const v15 = new Int32Array();
v13[v15 / v13];
class C19 {
    constructor(a21, a22) {
        const t14 = "2147483647";
        t14["o"] -= "2147483647";
        ("KCmm").__proto__;
    }
    #o(a25, a26) {
        let v27;
        try { v27 = ("2147483647").charAt(a26); } catch (e) {}
        (759956410).__defineGetter__;
        ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
        Object.defineProperty(a26, a26, { writable: true, configurable: true, value: v27 });
        return a25;
    }
    g;
    /*
    constructor(a34, a35, a36, a37) {
        const o43 = {
            "maxByteLength": 2240,
        };
        const v45 = new ArrayBuffer(2240, a35);
        new Uint8ClampedArray(v45);
        this[268435456];
        v1 && this;
        try {
            v1.length = v1;
        } catch(e50) {
        }
    }
    */
}
new C19("o", "o");
const v52 = new C19("KCmm", "KCmm");
new C19("o", "2147483647");
function F54(a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a57;
    } catch(e59) {
    }
    try {
        this.h = a58;
    } catch(e60) {
    }
    try {
        class C61 {
        }
        const v62 = new C61();
        v62.f = v62;
        const v65 = new F3(F3, 15);
        class C66 extends F3 {
            [1073741823n];
            c = v65;
        }
        new C66();
        this.c = v52;
    } catch(e68) {
    }
    const v70 = new Float32Array();
    try { v70.entries(); } catch (e) {}
    const o74 = {
        "execution": "async",
        "type": "minor",
    };
}
new F54("2147483647", "KCmm", "o");
new F54(F54, "KCmm", "KCmm");
new F54("o", "o", "2147483647");
Reflect.preventExtensions(Reflect);
function f81() {
    return f81;
}
function f82(a83, a84) {
    a84.then = f81;
    return a84;
}
("D")[0].lastIndexOf("D");
