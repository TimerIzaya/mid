new BigInt64Array(1);
new Float64Array(255);
-6;
new Int32Array(6);
9 === 9;
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    a17 == a17;
    a18.caller = a18;
    a19 >>> a19;
}
const v23 = new F15(164140152, F15, 164140152, 164140152);
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        const v28 = ("Vre").strike();
        v28[11] = v28;
        !v28.link().includes(164140152);
        const v33 = Array();
        const v35 = v33.unshift(v23, v25, F15, v25, v33.pop());
        v35 === v35;
        const v38 = new Set();
        try { v38.add(522675525n); } catch (e) {}
        const v40 = v38.add();
        try { v40.add(Array); } catch (e) {}
        v40.entries();
        class C43 {
        }
        const v44 = new C43();
        v44?.constructor;
        try {
        const t0 = 1838360403;
        new t0();
        } catch (e) {}
        const v47 = v44.hasOwnProperty(v25);
        v47 || v47;
    }
    try { f26(); } catch (e) {}
    v25();
    %OptimizeFunctionOnNextCall(f26);
}
