const v0 = [128,-39462,268435441,536870887];
[-1,4294967296];
const v2 = [7,7,-2147483648];
[1,-4294967296,-2,534434863,-9007199254740992,9,-4096];
try { v2.toString(); } catch (e) {}
const v5 = [4,-7];
try { v5.toReversed(); } catch (e) {}
const v7 = [37153,-11,-388621807,3,-9223372036854775808,108511910];
v7[4] = v7;
for (let [i11, i12] = (() => {
        v0 & 0;
        return [0, 10];
    })();
    i11 < i12;
    (() => {
        i12 !== i12;
        const v17 = i11++;
        v17 >> v17;
    })()) {
}
function f21() {
    return v7;
}
class C25 {
    [1.7976931348623157e+308] = 23354;
    #h;
    1;
    [23354];
    [-4.055130549492246];
}
C25.prototype;
const v27 = new C25();
for (const v28 in v27) {
    Math.g = Math;
    -(-536870912);
}
new Int16Array(14);
255 - 255;
Uint16Array.g = Uint16Array;
new Uint16Array(255);
const t40 = 14;
new t40(3915);
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    typeof arguments;
    0 < 6;
    function f52() {
        let v54;
        try { v54 = new Set(); } catch (e) {}
        const v55 = new Set();
        const v56 = v55.add(0);
        try { v56.forEach(); } catch (e) {}
        const v58 = v56.entries();
        v58?.next;
        try { new v54(); } catch (e) {}
        v58.next();
        return v7;
    }
    const t58 = 0;
    t58();
    let v64 = Date.parse(-73245.82270792685);
    v64--;
    Int16Array.c = Int16Array;
    const v67 = new Int16Array();
    try { v67.entries(); } catch (e) {}
    gc();
}
const v70 = new F43();
const v71 = v70?.toLocaleString;
try { new v71(); } catch (e) {}
