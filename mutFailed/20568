function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 127;
    } catch(e3) {
    }
    try {
        this.c = 127;
    } catch(e4) {
    }
    try {
        this.f = 127;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
class C9 {
    [v7];
    c;
    toString(a11, a12) {
        return 77132706n;
    }
    constructor(a17, a18) {
        let v16 = this;
        let v19 = undefined;
        const v20 = v19++;
        const v21 = v20 >> v20;
        v21 >>> v21;
        class C23 {
            constructor(a25) {
                function f26() {
                    return f26;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f26 });
            }
        }
        const v27 = new C23();
        new C23(v27.length(v27, C23));
        v16 >>>= a17;
        let v30;
        try { v30 = a18.asin(); } catch (e) {}
        super.a >>>= v30;
    }
    static 1 = v6;
}
const v31 = new C9(v6, v8);
const v32 = new C9(F0, v7);
const v33 = new C9(F0, v8);
const v34 = [v31,v33,v33,v8];
[v7,[v33,v34,v32,v34,v32],C9,v8,v31];
function f37() {
    return v7;
}
const o40 = {
    "f": -1.883023285666516,
};
let v41 = 0;
while (v41 < 0) {
    for (let v44 = 0; v44 < 5; v44++) {
    }
    v41++;
}
const v52 = [-5,null,536870889,-1055048739,-1055048739];
[536870889];
[v52,-1055048739,v52,536870889];
[-9.735515399340533e+307,163470.27825054666,8.355421851275215e+307,-7.141423016921272e+307,-486.05440736004505,1.6461069750642172e+308,1000.0,-1e-15];
[-394794.8057064981,379960.7389405947,2.220446049250313e-16,-3.0,-8.57088526932401,0.0];
[913972.2113151569,-1000000.0,-837.2084454107498,-9.199548421707273e+307,-1000000000.0,0.0];
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F64;
    this.c = this;
    try {
        this.c = 19793;
        try { Array.of(); } catch (e) {}
        const v69 = Array(19793);
        try { v69.map(this); } catch (e) {}
        for (const v71 of v69) {
        }
        const v72 = [];
        const v74 = Symbol.toPrimitive;
        v72[v74] = Array;
        const v75 = [v72,v72,v72];
        try { Symbol.apply(Symbol, v74); } catch (e) {}
        v75[Symbol.toPrimitive] = Symbol;
        [v75,v75];
        Uint16Array.toString = Array;
    } catch(e81) {
    }
    try {
        this.b = 19793;
    } catch(e82) {
    }
}
new F64();
class C84 {
    set b(a86) {
    }
}
function f88(a89, a90, a91, a92) {
    const o96 = {
        toString(a94, a95) {
        },
    };
}
const v97 = f88(Date);
try { v97.toString(); } catch (e) {}
