const v0 = [];
const v2 = new Set();
WeakSet.e = WeakSet;
const v4 = new WeakSet();
const v5 = [v4,Set,v0,v4,v4];
try { v5.toSorted(v0); } catch (e) {}
const v7 = [v2];
try { v7.entries(); } catch (e) {}
[WeakSet];
const v10 = [NaN,1.0,-4.0,1000000000.0,827302.9601655083,523.5841555031411,6.863171781269658e+307,3.0,0.39493927922954664];
const v11 = [1.0,6.104408535970247];
try { v11.entries(); } catch (e) {}
[0.17461994210112652,-2.0,0.4335349147749983,-81.27558364075367,2.220446049250313e-16,0.3248727925438124,-1.1742383990905362e+308];
WeakSet > Set;
const v15 = new Set(v10);
v15[3];
v0 >= v5 ? v0 : v5;
function f20() {
    new Int8Array(1073741823);
    return f20;
}
for (const v26 of v2) {
    v26 - v26;
}
v0.copyWithin(...v11, Set, WeakSet, ...v0, ...v5);
[-9.673588883237583,3.3413618425870897e+307,1.7976931348623157e+308,Infinity,Infinity,0.26482886000537575,9.607886944516125,2.2250738585072014e-308];
[1000000.0,155.03892632248244,-1.6264738624969652,-1000000000.0];
[0.42982278741793156];
-2 == -2;
let v33 = -65537;
let v34 = v33++;
v34--;
256 / 256;
let v38 = 12;
v38--;
new BigUint64Array(-34380);
const v44 = new Uint32Array(256);
let v45 = v44.indexOf(v33);
v45--;
