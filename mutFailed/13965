function f3(a4, a5) {
    const o12 = {
        "e": a5,
        set d(a7) {
            let v8;
            try { v8 = this.unregister(this, a7, this, a4, this); } catch (e) {}
            try {
                this.fuck(1858349873n, v8, "NEGATIVE_INFINITY");
            } catch(e11) {
            }
        },
        "c": 1859483433n,
        "d": 1859483433n,
        "h": -13n,
    };
    class C13 {
    }
    Object.defineProperty(o12, a5, { configurable: true, enumerable: true, get: f3, set: f3 });
    C13 = o12;
    for (let v14 = 0; v14 < 32; v14++) {
        o12["p" + v14] = v14;
    }
    const v17 = new C13();
    let v18 = 6;
    v18 = 1664606158;
    const v20 = [];
    const v21 = o12.constructor;
    try { new v21(v20); } catch (e) {}
    class C23 extends C13 {
        constructor(a25, a26, a27, a28) {
            if (v17) {
            }
        }
    }
    return o12;
}
const v29 = f3(1859483433n, 1859483433n);
const v30 = f3(1859483433n, -13n);
const v31 = f3(1858349873n, 1858349873n);
class C32 extends f3 {
    static #f;
    constructor(a34, a35, a36, a37) {
        super(a34, a35);
        a35 &&= 1858349873n;
        const o49 = {
            "execution": "async",
            ..."async",
            "execution": "async",
            "b": "minor",
            "g": this,
            [v31](a42, a43, a44, a45) {
                [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
            },
            "type": "minor",
        };
        gc(o49);
        const v51 = [];
        const v53 = v51.entries;
        let v54;
        try { v54 = new v53(v53, v51, v53, v53, null); } catch (e) {}
        v54 = null;
    }
}
const v55 = new C32(f3, 1858349873n, C32, v29);
const v56 = new C32(v30, 1858349873n, v30, v29);
const v57 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f60(a61, a62, a63) {
    return a63;
}
f60(-4294967297n, v57, -4294967297n);
const v66 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v67 = [601759695];
const v68 = [1073741824,1073741823,1376142744,1073741825];
function f70(a71, a72, a73, a74) {
    function f75() {
        ("Vre").codePointAt("Vre");
        const v79 = v57.length;
        try {
            v68.forEach(a72);
        } catch(e81) {
        }
        const v82 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o88 = {
            toString(a84, a85) {
                return (a74 && a72) <= v82;
            },
        };
        const o102 = {
            [522675525n](a91, a92) {
            },
            "c": v67,
            [v79](a94) {
            },
            [-1]: 2684,
            "b": -4294967295,
            [-4294967297n](a96, a97, a98, a99) {
            },
            "arguments": v66,
            set b(a101) {
            },
            256: a74,
            ...v67,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
        };
        return v67;
    }
    f75();
    %OptimizeFunctionOnNextCall(f75);
    return -4294967297n;
}
for (let v104 = 0; v104 < 5; v104++) {
    f70(v104, 2684, f70, 2684);
}
const v106 = new C32(-13n, 1858349873n, v56, v56);
function F107(a109, a110, a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a112;
    } catch(e113) {
    }
}
new F107(1858349873n, 1858349873n, v106, v55);
new F107(-13n, 1858349873n, v30, v56);
new F107(-13n, -13n, v31, v56);
function F117(a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    const v121 = this.constructor;
    try { new v121(this); } catch (e) {}
    a120++;
    this.g = a119;
}
const v124 = new F117();
const v126 = new Set();
v126.__proto__;
const v129 = new BigUint64Array();
try { v129.toLocaleLowerCase(v31, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
try { ("NFKD").localeCompare(v31); } catch (e) {}
const v134 = [1,1238552536,268435440,129,512];
const v136 = new Date();
v136.setUTCMonth(v134, -1073741824);
const t144 = v124.constructor;
new t144();
