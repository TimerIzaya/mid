-2.220446049250313e-16 & -2.220446049250313e-16;
const v5 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
const v6 = [604.4479109019192,-2.220446049250313e-16,0.3083488057663979,0.3083488057663979];
const v7 = [0.3083488057663979,0.3083488057663979,0.3083488057663979,0.3083488057663979];
class C8 {
}
function F9() {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F9(); } catch (e) {}
function f12() {
    const v14 = ([f12]).constructor;
    class C15 extends v14 {
    }
    const v16 = new C15();
    return v16.reverse().findIndex(v14);
}
const v19 = new C8(v5, v5);
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
const v22 = C8.__lookupSetter__;
v22.d = v22;
for (let v23 = 0; v23 < 5; v23++) {
    const v24 = [v23,v23];
    v24[1] = v24;
    parseInt(v24.toSpliced());
}
const v28 = new C8(v6, v7);
const v29 = v28.constructor;
new v29(604.4479109019192, 0.3083488057663979);
try { v7.isPrototypeOf(v7); } catch (e) {}
const v32 = new Date();
try { v32.setFullYear(v7, v7, v29); } catch (e) {}
let v34 = 4294967297;
const v35 = v34++;
-4 % -4;
127 | 127;
function f40() {
    return 127;
}
function f41() {
    return v34;
}
const o43 = {
    ...v35,
    get h() {
        return this;
    },
};
new Uint32Array(5);
new BigInt64Array(255);
try { new Float64Array(o43, o43, o43); } catch (e) {}
new Float64Array(10);
class C55 {
    static [C55];
}
try { C55(); } catch (e) {}
