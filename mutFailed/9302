const v0 = /oXPc/is;
function f1(a2) {
    const o5 = {
        "maxByteLength": 79,
    };
    const v7 = new SharedArrayBuffer(16, o5);
    new BigInt64Array(v7);
    return v0;
}
v0.toString = f1;
const v10 = /\1(a)/guds;
const v11 = /a[bc]d\x60at(?:ab)|cde+/gvdmsy;
function f15() {
    return "symbol";
}
function f16() {
    return "getUTCFullYear";
}
function f17(a18, a19) {
    const o26 = {
        "g": "getUTCFullYear",
        __proto__: v0,
        [v0](a21, a22, a23, a24) {
            switch (f16) {
                default:
                    super[this];
                    break;
            }
            return a19;
        },
        "a": "bigint",
        "f": v10,
        "b": "getUTCFullYear",
        "d": a19,
        6: a18,
    };
    return a19;
}
f17("getUTCFullYear", v11);
const v28 = f17("symbol", v0);
f16("bigint", v11);
-Infinity;
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    let v40;
    try { v40 = new v39(v39, a38); } catch (e) {}
    const v41 = typeof v40;
    const o43 = {
    };
    v41 === "symbol";
}
const v45 = new F33();
new F33(F33, F33, v45, v45);
function f47() {
    const o49 = {
        get c() {
        },
    };
}
new BigUint64Array(10);
for (const v56 in v28) {
    new Float64Array(2147483647);
}
f47();
