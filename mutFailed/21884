new WeakMap();
class C2 extends WeakMap {
    static p(a4, a5) {
        let v9 = ~(+9007199254740990);
        const v10 = --v9;
        a5 / a5;
        Math.imul(9007199254740990, 9007199254740990);
        Math.log10(v10);
        v9 / v9;
        return this;
    }
}
new C2();
const v16 = new C2();
new C2();
const v19 = [];
let v20 = 10;
for ((() => {
        for (let v21 = 0; v21 < 5; v21++) {
        }
    })();
    v20--;
    ) {
}
const o23 = {
};
function f24(a25, a26) {
    try {
        v16.h = a25;
    } catch(e27) {
    }
    return C2;
}
o23.toString = f24;
const v28 = o23 > v19;
try { v28(); } catch (e) {}
new Uint16Array(3626);
new Float32Array(0);
new BigInt64Array(6);
const v39 = 1073741824 & 1073741824;
const v40 = [6.621588498634488e+307,1.0,3.0,-5.0,-1.7976931348623157e+308,-1.7976931348623157e+308,257.7405098162435,-136018.55674827856];
v40.constructor = f24;
const v41 = [v40,v40];
v40.concat(v41, v41, true, v39);
