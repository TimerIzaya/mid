class C3 {
    constructor(a5) {
        function f6() {
            try {
                C3.__proto__ = this;
            } catch(e7) {
            }
            return this;
        }
        this.toString = f6;
        try { new a5(this); } catch (e) {}
    }
    static #f;
    [-1000000000000.0] = "__proto__";
    static [-1000000000000.0];
    static get h() {
        const t16 = "__proto__";
        t16[7] = 64n;
        new Int8Array(8);
        new BigUint64Array(16);
        new BigUint64Array(151);
        return Int8Array;
    }
}
try { new C3(7); } catch (e) {}
const v23 = new C3("__proto__");
const v24 = v23?.constructor;
try { new v24(C3); } catch (e) {}
const v26 = new C3("__proto__");
function f27(a28) {
    [-1.323896793102815,9.338513447436597e+307,0.014285579637667634,5.235910330196911e+307,-0.0];
    [-1.7976931348623157e+308,-99.91587231722599,0.9240093825019841,-11.748506763178852,0.8191757744164001,0.08426468020545042,-2.8872321926148565,0.8335918997936207,0.15700118932561846];
    [3.0,3.0,1.7976931348623157e+308,-3.0,0.4801587853076119,-1000000000.0,4.863132621607188e+307];
    return v26;
}
v26.constructor = f27;
const v32 = v26?.constructor;
function f33() {
    return f27;
}
function f34(a35) {
    class C37 extends Set {
    }
}
Object.defineProperty(v32, "toString", { writable: true, get: f33, set: f34 });
let v38;
try { v38 = new v32(v26); } catch (e) {}
const v39 = new C3(7);
860.9460622033121 << 860.9460622033121;
const v44 = [v26,-9.07376770365427e+306,7,C3];
try { v44.reduce(v38); } catch (e) {}
const v46 = [860.9460622033121,v44];
[-9.07376770365427e+306,860.9460622033121,v44,v39];
const v48 = [0.9164132649727676,-1e-15,-298869.86276894016,2.2250738585072014e-308];
const v49 = [Infinity,-1000000000000.0,-0.0];
[-3.0,3.0,1.7976931348623157e+308,0.3583279612614233,-2.220446049250313e-16,424420.1304924686,-1.3599192956546453];
-1000;
const v54 = new Uint8Array(1000);
257 !== 257;
try { BigUint64Array.from(v49); } catch (e) {}
Array();
try { new Array(-9.07376770365427e+306); } catch (e) {}
Array(1000);
const v65 = new BigUint64Array(257);
const v66 = Uint8Array in v65;
!v66;
const v68 = v66 && v66;
try {
    v65.d = v54;
} catch(e69) {
}
4 - v46;
const v73 = new Float32Array(4);
v73[3] = v68;
4096 >> 4096;
Uint8Array.e = -9.07376770365427e+306;
Uint8Array.e = Uint8Array;
new Uint8Array(4096);
141 >> 141;
Float32Array.name;
new Float32Array(141);
7 / 7;
const v85 = 7 + 7;
try { new BigInt64Array("__proto__", v85, 1000); } catch (e) {}
const v89 = 5 + 5;
v89 % v89;
new Uint16Array(5);
function f93() {
    return f93;
}
new BigInt64Array(7);
let v95 = -2n;
v95 - v95;
v95--;
function f100() {
    return 536870887n;
}
try { v68(); } catch (e) {}
let v102;
try { v102 = f100(); } catch (e) {}
v102 * v102;
v102 * v102;
Map.prototype;
new Map();
-2 >> -2;
let v112 = 24560 ^ 24560;
v112--;
const v115 = -1000000000000.0 >>> -1000000000000.0;
v115 >> v115;
Uint8Array.prototype = Uint8Array;
function F122() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    const v127 = Date();
    try { v127.small(); } catch (e) {}
    try { Array.from(v44); } catch (e) {}
    const v132 = Array(19793);
    v132[17862] = this;
    for (const v133 of v132) {
    }
    try {
    } catch(e134) {
    }
    try { new Uint16Array(v127, v127, Uint16Array); } catch (e) {}
}
const v137 = new F122();
v137.constructor = Array;
const v138 = v137?.constructor;
try { new v138(); } catch (e) {}
const v140 = v137?.constructor;
try { v140.bind(591114.0785999324); } catch (e) {}
try { new v140(); } catch (e) {}
function F143(a145, a146, a147) {
    if (!new.target) { throw 'must be called with new'; }
    const v148 = this?.__defineGetter__;
    try { new v148(v65, v65); } catch (e) {}
}
class C151 {
    constructor(a153) {
        try {
        } catch(e154) {
        }
        try {
        } catch(e155) {
        }
        for (const v156 of C3) {
        }
    }
}
const v157 = C151?.constructor;
try { new v157(v73); } catch (e) {}
class C159 extends C151 {
}
const o160 = {
};
o160.e = v48;
o160.e = o160;
