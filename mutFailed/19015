const v0 = [1e-15,0.10356094534306803,-2.2250738585072014e-308,1.7976931348623157e+308,-2.0,1.2057929540116166e+308,-9.359865969651278,1e-15];
[1e-15,620011.9416299218,5.0,-2.220446049250313e-16];
function f2(a3, a4, a5, a6) {
    try { a4(); } catch (e) {}
    const v9 = undefined >> undefined;
    const v11 = new Set();
    const v12 = v11.add();
    const v15 = typeof v9 === "symbol";
    return [v12,v15,v15];
}
const v17 = [0.3298886270952417,-1.0,3.529313779199981,1000000000.0,Infinity,219.90925928448723];
2540 <= 2540;
const v21 = new Uint8ClampedArray(2540);
1443 >>> 1443;
const v25 = new Int16Array(1443);
try { Uint16Array(1443, v17, v25); } catch (e) {}
const v29 = new Uint16Array(127);
const v30 = [v29,v21,Uint8ClampedArray,v0,v17];
-429.3290910931888 + -429.3290910931888;
const v34 = new Date(-429.3290910931888);
try { v34.toTimeString(); } catch (e) {}
function F36() {
    if (!new.target) { throw 'must be called with new'; }
}
try { F36.bind(Int16Array); } catch (e) {}
let v39 = "string";
class C40 extends F36 {
    set h(a42) {
        ({"h":v39,} = this);
    }
}
[1443,v29];
[v25];
const v45 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
function f46() {
    const v48 = ("stack").trimStart();
    for (let v49 = 0; v49 < 5; v49++) {
        function f50() {
            v48.length;
            return v48;
        }
        f50.call();
        %OptimizeFunctionOnNextCall(f50);
    }
    return v25;
}
v45[Symbol.toPrimitive] = f46;
function f55(a56, a57) {
    const o58 = {
        __proto__: v45,
    };
    o58.toString = f46;
    try { o58.pop(); } catch (e) {}
    return o58;
}
const v60 = f55();
try { v60.flatMap(v30); } catch (e) {}
v60.group(f55);
class C63 {
}
C63.name = C63;
class C64 extends C63 {
}
function F65(a67) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f2;
    const v68 = this?.constructor;
    try { new v68(); } catch (e) {}
}
class C70 extends F65 {
}
const v71 = new C70();
v71.constructor;
