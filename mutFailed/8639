const v1 = new Set();
const v4 = new Uint16Array(4294967295);
try { Int32Array(7, Float32Array, Int32Array); } catch (e) {}
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this?.constructor;
    try { new v14(Uint16Array, a13, a13); } catch (e) {}
    a11 * a11;
    a13++;
    this.d = a11;
    try {
        this.description = v4;
    } catch(e18) {
    }
    try {
        this.g = Int32Array;
    } catch(e19) {
    }
}
const v20 = [5.0];
Uint16Array.strike();
const v23 = new Int32Array(7);
new Float64Array(v23);
const v26 = [0.0,-0.0,-1.765133650837652e+307,453504.53771551163,190.69551100276817];
const v27 = [453049.1118020974,-1000000.0,1.7976931348623157e+308,9.834223413256137,-2.0,2.2250738585072014e-308,-0.0];
new Uint8ClampedArray();
const o31 = {
    "type": "async",
};
class C32 extends Set {
    [v27];
    static get c() {
        function F34(a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a38;
            } catch(e39) {
            }
            try {
                class C40 {
                }
                C40.constructor;
                const v43 = new Int16Array();
                let [,,...v44] = v43;
                this.g = a38;
            } catch(e45) {
            }
            class C46 {
                toString(a48, a49, a50, a51) {
                    try { this["throw"](); } catch (e) {}
                    let v55 = 512;
                    v55++;
                    const v58 = new Uint8ClampedArray(v55);
                    v58[18];
                    new Uint8ClampedArray(798, ...v58, eval(a50));
                }
                constructor(a64, a65) {
                    for (let i = 0; i < 5; i++) {
                        this[this];
                    }
                }
            }
        }
        new F34(v27, this, F34);
        new F34(v20, v20, F34);
        new F34(v20, v27, v1);
        return F34;
    }
}
new Uint32Array(Uint32Array);
class C72 {
    static {
    }
}
new C32();
new C32();
const v76 = new C32();
class C77 extends Set {
    [v20];
    static #d;
    static {
        let v79;
        try { v79 = this(Set); } catch (e) {}
        v79 / v79;
        const v81 = v1.__proto__;
        v1.__proto__;
        super.size >>= v81;
        for (let v83 = 0; v83 < 32; v83++) {
            const v85 = "p" + v83;
            const v86 = [0.00952483356421907,-3.0,2.220446049250313e-16];
            function f87() {
                return v86;
            }
            class C88 extends f87 {
                a;
            }
            v76[v85] = v83;
        }
        try { this.o(); } catch (e) {}
    }
    4;
    2672175 = v26;
    268435440 = v26;
    static #e;
    static #f = v20;
    2357027302;
}
new C77();
new C77();
new C77();
const v95 = new BigUint64Array(4);
v95.reverse();
