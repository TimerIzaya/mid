const v0 = [];
let v3 = 4294967295n;
function f4(a5, a6) {
    const o20 = {
        5: 7n,
        [v0]: a6,
        [a6](a8, a9, a10, a11) {
            Math.pow(0.7995951869964694, a6);
            1 >>> -2147483648;
            Math.fround(-2147483648);
            --a6;
            return -2147483648;
        },
        "c": a5,
        [a5]: a6,
    };
    function F21(a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        const o30 = {
            set d(a26) {
                this.cos = a26;
                for (let v27 = 0; v27 < 25; v27++) {
                }
                try { this["cos"](); } catch (e) {}
            },
        };
        class C31 {
            constructor(a33) {
                o30.d = a33;
            }
        }
        new C31();
    }
    new F21();
    return o20;
}
const v36 = f4(7n, 7n);
const v37 = f4(v3, v3);
const v38 = f4(v3, v3);
class C39 {
    static #b;
    static {
        Object.defineProperty(this, "b", { writable: true, enumerable: true, get: f4 });
        v3 = super[v38];
    }
    constructor(a43, a44, a45, a46) {
        const o47 = {
            "preventExtensions": f4,
            "set": f4,
        };
        new Proxy(v37, o47);
    }
    [255n] = v0;
}
const v50 = new C39(v36, v3, f4, v3);
new C39(v37, v38, v50, v50);
new C39(v37, v38, v36, v37);
new Uint8Array(1024);
new Int16Array(2);
new Float64Array(129);
new BigUint64Array(2147483647);
