new Uint8Array(127);
new Float64Array(16);
new BigInt64Array(3479);
class C17 {
    static 3143;
    static ["-2"];
    #f = "-2";
    static #a;
    #c;
    #valueOf(a19, a20) {
        const v21 = a20 == a20;
        v21 ? a20 : a20;
        const v23 = ["-2",this,"setMonth",a19,"-2"];
        [v23,v23,this,this];
        [v21,"-2","4X",a19];
        return a19;
    }
    10 = "4X";
    #g = "-2";
}
new C17();
new C17();
new C17();
try { new WeakSet(); } catch (e) {}
new WeakSet();
[1,17,[Uint8ClampedArray,Uint8ClampedArray]];
-536870912 ^ -536870912;
[-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
[35577,123452243,-2,65305,268435441,11,-58686];
const v43 = [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
new Int16Array(64);
new Uint16Array(-128);
try { v43.sort("-2"); } catch (e) {}
([-5,2147483649,-4294967295,1,8,-4331,52354,15231])["unshift"]();
const v54 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const o55 = {
    ...v54,
};
6 | 6;
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v68 = this.constructor;
    try { new v68(); } catch (e) {}
}
new F62();
[/8[\cA]v/uisy];
function f73(a74, a75, a76, a77) {
    const v80 = (~9007199254740990).constructor;
    v80(v80).toFixed();
    for (const v84 in "1024") {
    }
    return f73;
}
new F62();
class C87 {
    constructor(a89) {
        const v90 = this.constructor;
        return 268435440;
        this.f = 4;
        new F62([65537,1073741825,7841,-12,13], [1073741823,4294967295], WeakSet);
        v90.d = v90;
        try { new v90(); } catch (e) {}
        ("size").c;
        const v100 = ("unshift").blink()[28];
        v100.strike();
        const v102 = new WeakSet();
        const v103 = v102.getPrototypeOf;
        let v104;
        try { v104 = v103(); } catch (e) {}
        const v105 = v104?.constructor;
        try { v105.call(v100); } catch (e) {}
        const v107 = ("size").g;
        ("size").length;
        let v109 = v107?.[7];
        [...v109] = "size";
        /a\bc/vd;
    }
}
function f111(a112, a113, a114) {
}
const o115 = {
};
class C116 {
    static #n(a118) {
    }
}
new C116();
new C116();
("1866165091").normalize();
8 & 8;
9007199254740991n * 9007199254740991n;
let v127 = Int16Array;
try {
} catch(e128) {
}
v127 = v127;
