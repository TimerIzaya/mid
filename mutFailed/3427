const v3 = [-607571187,-10112];
[65535];
const v5 = [4294967296,-57202,256,48562,333990054];
const v6 = v5[4];
v5 > v5;
try {
    v5.length = 1957281702;
} catch(e8) {
    const o9 = {
    };
    const v12 = new Uint8ClampedArray(3);
    for (let v13 = 0; v13 < 5; v13++) {
        v12[v13] = 1957281702;
    }
}
true || true;
const v18 = [1,40880,1,-65535,3109,268435456,0,-47552,1073741823];
const v20 = new BigUint64Array();
let v21;
try { v21 = v18.map(v20); } catch (e) {}
for (let [v23,...v24] of 65536) {
}
try { Uint32Array.apply(2, v5); } catch (e) {}
new Uint32Array(2);
Symbol.iterator;
function f29() {
    return f29;
}
const v32 = new Uint16Array(11);
try {
    f29.forEach(v32);
} catch(e35) {
}
try {
const t0 = 65536n;
t0(v3);
} catch (e) {}
6 - 6;
new Uint8ClampedArray(6);
new v21();
new Float32Array();
Array(3).unshift(3, v32);
const v49 = [-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297];
v49?.filter;
function F52(a54, a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this.constructor;
    try { new v58(154, a57, 154, a55); } catch (e) {}
    -a55;
    a57 <= a57;
}
try { new v6(Uint8ClampedArray); } catch (e) {}
const v64 = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
async function f67(a68, a69) {
    'use strict';
    a69[9] = v64;
    return -21133.120743932668;
}
f67("h", -21133.120743932668);
new Int16Array(v49);
