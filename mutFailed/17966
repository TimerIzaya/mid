const v2 = new Float32Array(1024);
268435441n << 268435441n;
new v2();
const t3 = Array(1000);
t3.length |= 113;
new Float32Array(1000);
new Uint8Array(2233);
function f16() {
    return 2233;
}
new Float64Array(512);
1399 | 1399;
function f23() {
    Math.cos(Math);
    return Math;
}
%PrepareFunctionForOptimization(f23);
new Float32Array(1399);
try { WeakMap.apply(Int32Array, Date); } catch (e) {}
AggregateError.captureStackTrace(AggregateError, 257);
new Int8Array(5);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    new Uint8ClampedArray(112);
    const v47 = 512 ^ 512;
    Math.tan(~10 >>> v47);
    Math.atan2(10, v47);
}
function f52(a53, a54) {
    function f55() {
    }
    const v59 = new Uint8Array(/(u4(?:a?)*)/gudimsy, f55);
    const v61 = new Uint32Array();
    for (let v62 = 0; v62 < 625; v62++) {
        const o70 = {
            ...v59,
            n(a66, a67) {
                v61[Uint8Array] = v61;
            },
            "b": 64,
            "maxByteLength": 10000,
            "g": Uint8Array,
            toString(a69) {
            },
        };
    }
    const o71 = {
    };
}
async function f73(a74, a75) {
    const t50 = [155533.8602852358,2.0];
    t50[658291203] = null;
    ~-4294967295;
    function F80() {
        if (!new.target) { throw 'must be called with new'; }
    }
    /2a\sc/uds;
    f52();
    const v86 = new BigInt64Array();
    const v87 = [-1.7976931348623157e+308];
    function f88(a89, a90, a91, a92) {
        const o98 = {
            toString(a94, a95, a96) {
                a91[a90] = a89;
                return 255n;
            },
        };
        return o98;
    }
    f88(v86, 129, v87);
}
f73(F39, 4294967296);
