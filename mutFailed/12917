const v5 = new Map();
function f6() {
    Array.__proto__ = this;
    return this;
}
v5[Symbol.toPrimitive] = f6;
function f11(a12, a13) {
    a12[Symbol.toPrimitive] = f6;
    a13.toString = Symbol;
    const o21 = {
        "a": a13,
        [a12]: v5,
        [v5]: Map,
        ...v5,
        "b": a12,
        [a13]: Map,
        "h": a12,
        146: v5,
        valueOf(a17) {
            this || this;
            this.__proto__;
            new Map(this);
            return this;
        },
    };
    return o21;
}
f11(v5, f11);
-1n + -1n;
class C24 {
    static set f(a26) {
        super.e;
        function F28() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v32 = new Uint8ClampedArray();
        const v34 = new Float32Array();
        for (let v35 = 0; v35 < 25; v35++) {
            Float32Array[6] = v32;
            v34[v35];
        }
    }
    m(a38, a39) {
        const v40 = [a38,a38,7n,420843800n];
        [null,420843800n];
        const v42 = [v40,a39,v40,a39,a39];
        const v44 = new Uint8Array();
        for (let v45 = 0; v45 < 5; v45++) {
            function f46() {
                v44.__proto__;
                return v45;
            }
            f46();
            %OptimizeFunctionOnNextCall(f46);
        }
        return v42;
    }
    static #a = null;
    #c = 7n;
}
const v49 = new C24();
new C24();
new C24();
function f52() {
    return v49;
}
try { f52.bind(C24); } catch (e) {}
function f54() {
    return C24;
}
try { ("f").trim(); } catch (e) {}
const t71 = "n";
t71[0] = "n";
for (let v59 = 0; v59 < 5; v59++) {
    function f60() {
        for (let [i63, i64] = (() => {
                switch (f60) {
                }
                return [0, 10];
            })();
            (() => {
                i63 - i63;
                const v66 = i64 << i64;
                v66 << v66;
                return i63 < i64;
            })();
            i63 | i63, i63++, i64--) {
        }
        return v59;
    }
    f60();
    %OptimizeFunctionOnNextCall(f60);
}
