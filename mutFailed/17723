function f3(a4, a5) {
    const o45 = {
        "e": a5,
        "a": a5,
        "g": -4294967296,
        get b() {
            new Uint8ClampedArray(4);
            new BigUint64Array(4096);
            a5?.[4];
            f3(2147483649, 2147483649);
            %PrepareFunctionForOptimization(f3);
            f3(2147483649, 2147483649);
            f3(2147483649, 2147483649);
            %OptimizeFunctionOnNextCall(f3);
            f3(2147483649, 1598169247);
            new Float32Array(911);
            [9223372036854775807,65536,-5,954251139,-2147483648,-53319,-2147483647,1,-25360];
            const v30 = 1940694780n ^ 1940694780n;
            function F33(a35, a36) {
                if (!new.target) { throw 'must be called with new'; }
                const v37 = this.constructor;
                try { new v37(); } catch (e) {}
                -a35;
            }
            new F33(Float32Array, v30);
            class C41 extends F33 {
                3120 = 31346;
            }
            const v42 = new C41();
            new v42();
            new C41();
            return 1598169247;
        },
    };
    return o45;
}
const v46 = f3(-4294967296, f3);
const v47 = f3(2147483649, 1598169247);
class C49 extends f3(1598169247, v47) {
    #m(a51, a52, a53, a54) {
        super[-4294967296] = f3;
        delete v47[1598169247];
        const v58 = Symbol.hasInstance;
        async function f59(a60, a61, a62) {
            'use strict';
            a53?.f;
            await v58;
            return a53;
        }
        f59(a54, a54, Symbol);
        return a53[v58];
    }
    static b = 2147483649;
}
new C49();
new C49();
new C49();
const v72 = new Uint8Array();
v72[Symbol.isConcatSpreadable] = BigInt64Array;
const v76 = Array();
const v77 = Array();
v77[Symbol.isConcatSpreadable] = v46;
v77["concat"](v76, v72);
