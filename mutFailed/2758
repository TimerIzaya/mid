const v8 = new Int8Array(4);
new BigUint64Array(7);
const v14 = new Int8Array(10);
class C15 {
    o(a17, a18, a19) {
        this[this];
        return Int8Array;
    }
    static [C15];
}
const v21 = new C15();
const v22 = [];
const v24 = new Array(7);
class C25 {
    [Array] = v22;
    static {
        function F27(a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                Int8Array.b = a30;
            } catch(e31) {
            }
            for (const v32 in v22) {
                try {
                    C25.__proto__ = C15;
                } catch(e33) {
                }
            }
        }
        new F27(v24, this);
        new F27(v24, F27);
        new F27(v8, v24);
    }
}
new C25();
const v38 = new Int8Array();
let v41;
try { v41 = v14.o(C25, v38, -1n, v24); } catch (e) {}
try {
    const t39 = "7MU";
    t39.valueOf = v41;
} catch(e42) {
}
const v43 = `match${v21}-20124`;
C25.constructor;
function* f46(a47, a48, a49, a50) {
    return a48;
}
for (const v51 of v43) {
}
