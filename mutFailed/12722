class C3 {
    static 0 = "unicode";
    static get c() {
        let v5;
        try {
        const t0 = "string";
        v5 = t0("unicode", this);
        } catch (e) {}
        const v6 = -9.53857025218742 / this;
        v6 instanceof v5;
        function f9() {
            Reflect.construct(Symbol, [Reflect,Reflect,Reflect,Reflect,Reflect]);
            return f9;
        }
        /[wxyz{93}a(?=bbb|bb)c]/udmsy;
        v5 % v6;
        Math.log("unicode");
        -1000000.0 >> "unicode";
        Math.random();
        -1000000.0 >> -4096;
        return -4096 ^ v5;
    }
}
function f29(a30, a31) {
    for (const v33 in "1024") {
    }
    return a31;
}
C3.toString = f29;
try { new C3(); } catch (e) {}
const v35 = new C3();
v35[Symbol.toPrimitive] = f29;
const v41 = new Uint16Array(9);
v41.includes(9223372036854775807);
const v43 = new C3();
function f44(a45, a46) {
    const v48 = Symbol.toPrimitive;
    const o52 = {
        toString(a50, a51) {
            a50 *= v48;
            return v48;
        },
    };
    return a45;
}
v43.constructor = f44;
function F53(a55, a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    const v59 = this.constructor;
    v59.prototype = v59;
}
function F60(a62) {
    if (!new.target) { throw 'must be called with new'; }
    const v63 = this.constructor;
    try { new v63(); } catch (e) {}
    new BigInt64Array();
}
new F60();
const v68 = v43?.constructor;
try { new v68(); } catch (e) {}
const v70 = new C3();
try { v70.propertyIsEnumerable(C3); } catch (e) {}
function f72(a73, a74, a75) {
    function f76() {
        function F77() {
            if (!new.target) { throw 'must be called with new'; }
        }
        return F77;
    }
    a74[Symbol.toPrimitive] = f76;
    const v81 = a74?.constructor;
    try { new v81(a73); } catch (e) {}
    const o92 = {
        3: C3,
        __proto__: a74,
        ...a74,
        ...v35,
        "c": "string",
        set g(a84) {
            const o87 = {
                "maxByteLength": 129,
            };
            const v89 = new ArrayBuffer(129, o87);
            new BigUint64Array(v89);
        },
    };
    o92[Symbol.toPrimitive] = f44;
    const v95 = [];
    function f96(a97) {
        new Uint8Array(3308);
        const v103 = new Int8Array(4);
        new Uint16Array(4);
        return v103;
    }
    v95.toString = f96;
    new Int8Array([v95]);
    ["function"];
    return o92;
}
const v112 = f72(C3, C3, C3);
const v113 = f72(v35, C3, v35);
v113.toString = f72;
v113.f = v113;
const v114 = f72(v113, "string", v43);
v114[3];
class C116 {
    [v114] = v70;
    m(a118) {
    }
    m(a120, a121) {
        const v122 = [];
        function f123(a124) {
            try {
                v122.some(a124);
            } catch(e126) {
                e126.stack;
            }
        }
        v122.toString = f123;
        new Int8Array(v122);
        for (const v130 of "unicode") {
            const o131 = {
            };
            new Proxy(v112, o131);
        }
        let [...v134] = "unicode";
        const v135 = [601759695];
        const v136 = [1073741824,1073741823,1376142744,1073741825];
        function f137(a138, a139, a140, a141) {
            Math.cos(-1073741824);
            try { v136["find"](..."find", a141, ...v135, ...v136); } catch (e) {}
            return 9223372036854775807;
        }
        f137();
        return v112;
    }
    b;
    [v35] = v43;
}
const v148 = new C116();
v148.h = F53;
v148.h = v148;
new C116();
new C116();
const v151 = [1073741824,1073741823,1376142744,1073741825];
try { v151.lastIndexOf(v43); } catch (e) {}
function f153(a154, a155, a156, a157) {
    try { v151["find"](..."find"); } catch (e) {}
    return a157;
}
for (let v160 = 0; v160 < 10; v160++) {
    f153();
}
%OptimizeFunctionOnNextCall(f153);
const v162 = f153(v151, f153, f153, f153);
try { v162(v70, v151, v43, v43); } catch (e) {}
