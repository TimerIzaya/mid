const v4 = [["4294967296"],"h"];
const v5 = ["h",v4,"h",v4,"h"];
let v9;
try { v9 = v4.flatMap(6, 6); } catch (e) {}
function f11(a12, a13) {
    a13 - a13;
    function F15() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.f = 14;
        } catch(e18) {
        }
        try {
            14 ^ 14;
            try {
                new F15();
            } catch(e21) {
            }
            this.a = 14;
        } catch(e22) {
        }
        try {
            this.h = 14;
        } catch(e23) {
        }
    }
    const v24 = new F15();
    const v25 = new F15();
    class C26 extends F15 {
        valueOf(a28) {
            const o32 = {
                "execution": "sync",
                "type": "minor",
            };
            gc(o32);
            return gc;
        }
        e = v25;
        #d;
    }
    function f35(a36, a37) {
        const o46 = {
            [a37](a39, a40, a41, a42) {
            },
            n(a44, a45) {
            },
        };
    }
    f35(f35(v24, C26), Float32Array);
    return f35;
}
Math.toString = f11;
let v50 = -1e-15;
v50++;
--v9;
const v53 = !6;
const v54 = Math.random();
~v53;
function F59(a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this.constructor;
    try { new v64(); } catch (e) {}
    this.h = -6.336273045214518e+306;
    this.g = -1.7976931348623157e+308;
}
const v67 = new Uint16Array();
function f69() {
    let v72 = 257828.6336153492;
    v72--;
    class C75 {
        static #m(a77) {
        }
    }
    const v78 = new C75();
    [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
    new C75();
    const v81 = new C75();
    const v82 = [v81];
    new BigUint64Array(2141);
    try { v82.map(v67); } catch (e) {}
    const v86 = [];
    v86.constructor = f11;
    for (let i88 = 0; i88 < 2; i88++) {
        new F59(undefined, v78, undefined);
    }
    class C96 extends C75 {
    }
    C96.prototype = C96;
    const v97 = v86.constructor;
    !v97.isArray();
    class C100 extends v97 {
    }
}
%PrepareFunctionForOptimization(f69);
f69();
%OptimizeFunctionOnNextCall(f69);
f69();
new Date();
for (let v110 = 0; v110 < 5; v110++) {
    function f111() {
        function f113() {
            const v115 = new BigUint64Array();
            return v115;
        }
        Math.valueOf = f113;
        try {
            Math.tan(128);
        } catch(e119) {
        }
        Number.isNaN(Math.fround(Math));
        return f111;
    }
    f111();
    const v124 = v5[v54];
    try { v124.setFloat32(v124, v124, v124, 6, f111); } catch (e) {}
    try {
        new Date("S");
    } catch(e128) {
    }
    %OptimizeFunctionOnNextCall(f111);
}
