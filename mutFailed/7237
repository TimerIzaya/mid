let v1 = "DPl2n";
function f2() {
    const v4 = ("Vre").toLocaleUpperCase;
    let v5;
    try { v5 = new v4(); } catch (e) {}
    return v5;
}
f2();
const v8 = [256,634478244,1000];
const v9 = [-4,-1,128,3,-1];
const v10 = [-12,-4294967295];
function f11() {
    return "o";
}
class C12 extends f11 {
    #a = f11;
    static m(a14, a15) {
        v1 *= a14;
        function F16(a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C20 {
        }
        const v21 = new C20();
        try {
            v21.__proto__ = F16;
        } catch(e22) {
        }
        a14 = "1493120436";
        Object.defineProperty("o", 160, { configurable: true, enumerable: true, get: f11 });
        v10[Symbol.replace] = v1;
        v8.__proto__;
        try {
            const v28 = new Int8Array(127);
            const v30 = new WeakSet();
            for (const v31 in v28) {
                v30[v31] = v31;
            }
            Symbol.match = C12;
        } catch(e32) {
        }
        return v9;
    }
    constructor(a34, a35) {
    }
    ["o"] = f11;
    15 = "1493120436";
}
new C12();
const v37 = new C12();
try { v37.o(); } catch (e) {}
new C12();
function f40() {
    return v37;
}
let v41 = 4;
v41 - v41;
let v43 = v41--;
v43--;
const v46 = new Uint32Array(v41);
try { v46.find(Uint32Array); } catch (e) {}
v46.fill();
