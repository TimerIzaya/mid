const v0 = [65537,9223372036854775807,-15,1112077541,4096,268435440];
[9007199254740992];
const v2 = [64,-17517,0,9007199254740992,-9,4294967295,-10939834,1024,16241,-4294967295];
2147483647n % 2147483647n;
const v6 = 60776189n / 60776189n;
const v10 = 103544.93625586643 >>> 2147483647n;
1000000000.0 - 1000000000.0;
function f14(a15, a16, a17) {
    try { a16.toString(); } catch (e) {}
    const o52 = {
        "e": -256n,
        [60776189n]: a16,
        "f": 1000000000.0,
        [v2](a20, a21, a22, a23) {
            let v24 = 0;
            while ((() => {
                    v10[1] = Float64Array;
                    ["object"];
                    const o41 = {
                        [a15](a30, a31, a32, a33) {
                            function f34(a35, a36) {
                            }
                            return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
                        },
                        set b(a39) {
                            try {
                            } catch(e40) {
                            }
                        },
                    };
                    return v24 === 5;
                })()) {
                this[536870887];
                Math.cbrt(536870887, 0.2576870416993229);
                Math.random(2140273639 % v6);
                v24++;
            }
            return 1000000000.0;
        },
    };
    return o52;
}
const v53 = f14(60776189n, v2, 2147483647n);
v53[60776189] = v53;
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    const v60 = this?.constructor;
    try { new v60(this, this); } catch (e) {}
    try {
        this.c = 15;
    } catch(e62) {
    }
}
const v63 = new F56(F56, 15);
class C64 extends F56 {
    [1073741823n];
    c = v63;
}
const v65 = f14(2147483647n, v2, v53);
f14(2147483647n, v0, -256n);
function F67() {
    if (!new.target) { throw 'must be called with new'; }
    const v69 = this?.constructor;
    try { new v69(); } catch (e) {}
    try {
        this.a = 4;
    } catch(e72) {
    }
    try {
        this.f = 4;
    } catch(e73) {
    }
    try {
        this.g = 103544.93625586643;
    } catch(e74) {
    }
}
const v75 = new F67();
const v76 = new F67();
v76.f;
const v78 = new F67();
const v79 = [155533.8602852358,2.0];
for (const v83 of Array()) {
    v79[658291203] = null;
}
class C84 {
    set g(a86) {
        class C87 {
            static 128 = v75;
            #b;
        }
        new C87(0.2576870416993229);
        new C87();
        new C87();
    }
    static o(a92) {
        a92 % this;
        return super.d;
    }
}
new C84();
let v96 = new C84();
new C84();
[-607177.2196757733,9.867882161988646,-0.0,3.0,-676012.8801316076,1e-15,1000000000000.0];
[3.0,633532.0914372578,0.8220211022589221,-Infinity,Infinity];
const v100 = [-2.2250738585072014e-308];
try { new Float32Array(0.2576870416993229, 0.2576870416993229, v65); } catch (e) {}
const v104 = new Float32Array(59);
try { v104.find(v75); } catch (e) {}
const v108 = Int32Array?.constructor;
try { new v108(v78); } catch (e) {}
new Int32Array(10);
const v112 = new Int32Array(128);
v112[72];
[1.7976931348623157e+308,1.1709134723669872e+308,-0.0,1.0,3.0,-5.0,367.2989632960466,661.7758659107592];
const v115 = [-288943.075893088,-5.305261585320875,193686.0922863416,8.005740932944335,2.220446049250313e-16,-833.0196519212178,0.7064019879043599,-1000000000000.0];
for (const v116 in v104) {
}
const v117 = v115[v75];
([4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886]).toLocaleString();
--v96;
function F122() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new Int32Array(F122, this, -302142025);
        /Ckza\Wb?/vis;
        /((?=.)1a{}[(?<=a)a{1,2}?a(?=b)*])/gms;
        /Ma\W+/gudm;
        this.b = -302142025;
    } catch(e130) {
    }
}
try { v117(v115, Float32Array, F67, v100); } catch (e) {}
