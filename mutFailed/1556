const v0 = /(a\1)v\u{12345}\u{23456}/gvdim;
const v1 = /a\Bb/vds;
const v2 = /t/gi;
const v3 = [v2,v0,v2];
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a10;
    } catch(e11) {
    }
}
const o15 = {
    [F7](a13, a14) {
    },
    ..."sync",
    "type": "major",
    "c": F7,
    "execution": "sync",
    "type": "major",
};
gc(o15);
const v17 = [v1,v0,v3,v3,v2];
[v1,v1,v2];
class C19 {
}
const v20 = [727957804,7,49072,-63418,-4,-52120,127,1273312700,-128];
function f21() {
    return v20;
}
class C22 {
}
const v23 = new C22();
class C24 extends f21 {
}
const v25 = new C24();
const v27 = [Reflect,Reflect,Reflect,Reflect,Reflect];
const v29 = Reflect.apply(v25.concat, v23, v27);
function f30() {
    return v27;
}
const v32 = [4.0,-1.7976931348623157e+308];
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
}
const v38 = new F33(F33, v32, F33);
new F33(o15, v38, v38);
const v43 = new Int32Array(Int32Array);
let {...v44} = v43;
const t48 = "major";
t48[108] /= -1e-15;
for (let v48 = 0; v48 < 32; v48++) {
    v1["p" + v48] = v48;
}
class C51 {
    4259938026;
}
new v29();
function F56(a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    a59 - a59;
    const v61 = this.constructor;
    v61.name = v61;
    const v63 = new a59(a59);
    const v64 = v63.lastIndexOf(F56, a58);
    v64 ^ v64;
    try { new v61(v17, a58); } catch (e) {}
}
const v67 = new F56();
const t68 = v67.constructor;
new t68();
