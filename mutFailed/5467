class C2 {
    static {
        this.length;
        try {
            const t4 = null;
            t4.valueOf = this;
        } catch(e5) {
            const v6 = e5.stack;
            try { v6.concat("s"); } catch (e) {}
        }
    }
}
const o10 = {
    "type": "function",
};
class C11 {
    constructor(a13, a14) {
    }
}
try { new C11(C2, "function"); } catch (e) {}
const v17 = new C11();
const v19 = v17 << -1557853178;
v19 !== v19;
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try { a24.blink(); } catch (e) {}
    this.h = F22;
    try {
        this.b = "function";
    } catch(e27) {
    }
    try {
        this.h = "function";
    } catch(e28) {
    }
}
F22.d = C11;
const v29 = new F22("function", "s");
new F22("function", "object");
new F22("function", "object");
const v34 = new Float32Array(4096);
Uint8Array.name = Uint8Array;
const v37 = new v34(2337);
try { v37.slice(v19, o10); } catch (e) {}
0 / 0;
try { Uint32Array.bind("object"); } catch (e) {}
const v43 = new Uint32Array(0);
try { v43.sort(v29); } catch (e) {}
let v46;
try { v46 = new BigInt64Array(v43, v34, 2337); } catch (e) {}
const v48 = new BigInt64Array(128);
-11907 === -11907;
v48.indexOf(-11907, 4294967296);
class C54 {
    set d(a56) {
    }
    static #m(a58, a59, a60) {
    }
    static {
        this.length;
        for (let [i66, i67] = (() => {
                10 | 10;
                return [0, 10];
            })();
            i67 >= i67, i66 < i67;
            (() => {
                i66 !== i66;
                function f73() {
                    return f73;
                }
                const v74 = f73?.__defineSetter__;
                try { new v74(128, 128); } catch (e) {}
                const v76 = [601759695];
                const v77 = [1073741824,1073741823,1376142744,1073741825];
                function f79(a80, a81, a82, a83) {
                    function f85() {
                        return a80;
                    }
                    const v86 = f73();
                    try { v86(); } catch (e) {}
                    const v89 = new Int8Array();
                    function f90(a91, a92) {
                        const v93 = a91?.groupToMap;
                        try { new v93(i66); } catch (e) {}
                        return BigInt64Array;
                    }
                    f90(f90(v77, v34));
                    v89.buffer.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f85);
                    let v101;
                    try { v101 = v77["find"](..."find", a83, ...v76, ...v77, ...522675525n); } catch (e) {}
                    v101 <= a82;
                    return arguments;
                }
                for (let v103 = 0; v103 < 10; v103++) {
                    v103 - v103;
                    const v105 = f79();
                    try { v105.propertyIsEnumerable(Uint8Array); } catch (e) {}
                }
                i66++;
            })()) {
        }
    }
}
try { C54(); } catch (e) {}
function F111(a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    a114.e = a114;
}
const v115 = new F111(F111, F111);
v115?.constructor;
try { new v46(128, v37); } catch (e) {}
function F118(a120, a121) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new F118();
    } catch(e126) {
    }
}
let v127;
try {
const t0 = 1073741825;
v127 = t0();
} catch (e) {}
v127?.[126349911];
