gc();
let v4 = 0;
while (v4 < 6) {
    v4++;
}
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -65537;
    } catch(e13) {
    }
    try {
        const t12 = 10000;
        t12.match = -65537;
    } catch(e14) {
        return a11;
        const v16 = new Set();
        function f17(a18) {
            const o23 = {
                o(a20, a21) {
                    super[a18];
                },
            };
        }
        f17(v16);
    }
    try {
        this.b = a12;
    } catch(e25) {
    }
}
new F9(-627972261, 10000);
const v27 = new F9(-627972261, 10000);
function f28(a29) {
    function F30(a32) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v33 = new F30(F30);
    try {
        function f34(a35, a36, a37) {
            let v38 = 0;
            do {
                const o39 = {
                };
                o39.h = v33;
                const o40 = {
                };
                v38++;
            } while (v38 < 7)
            return f34(a37, v33);
        }
        f34();
    } catch(e46) {
    }
    return a29;
}
const t56 = -627972261;
t56();
new F9(-627972261, -627972261);
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    10000 - a52;
    const v54 = this.constructor;
    v54.name = v54;
    const v56 = new Int16Array(a52);
    const v57 = v56.lastIndexOf(F49, a51);
    v57 ^ v57;
    try { new v54(this, a51); } catch (e) {}
}
new F49();
new Date();
class C63 extends F9 {
    #m(a65, a66, a67) {
        const o71 = {
        };
        try {
            o71.h = -4096;
        } catch(e72) {
        }
        try {
            const o73 = {
            };
            o73.h = -4096;
            function f76(a77) {
                const o78 = {
                    ...a77,
                    9: 255,
                    5: 65536,
                    536870889: a77,
                    6: a77,
                    [a77]: a77,
                };
                return o78;
            }
            o73.byteLength = v27;
        } catch(e79) {
        }
        try {
            const o80 = {
            };
            o80.h = -4096;
            o80.global = v27;
            o80.g = -65537;
        } catch(e81) {
        }
        try {
            const o82 = {
            };
            o82.h = -4096;
            o82.d = v27;
            o82.g = -4096;
        } catch(e83) {
        }
        return o71;
    }
}
const v84 = new C63();
new C63();
new C63(-627972261, C63, v84);
const v87 = [Infinity,2.2250738585072014e-308,-9.73859520784204e+307,6.018050590208222];
const t120 = (873814092).constructor;
t120(v87).toExponential();
