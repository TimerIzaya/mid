new Float64Array(1000);
new Int32Array(16);
new BigInt64Array(2742);
function f18() {
    const o21 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o21;
}
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = this?.constructor;
    try { new v24(); } catch (e) {}
}
const v26 = new F22();
const v27 = v26?.constructor;
let v28;
try { v28 = v27(); } catch (e) {}
v26.length;
const v30 = new F22();
const v31 = [v30,v30,v30,v30,v30];
const v34 = new Uint32Array(1000);
const v35 = delete v31.length;
("cbrt").toLocaleUpperCase(v28, v35);
try { v35["cbrt"](v34, Uint32Array, v26); } catch (e) {}
f18();
f18();
const v41 = f18();
Number.isNaN(NaN);
65537 >> 65537;
const v50 = 536870912 + 536870912;
const v53 = [-42643,-2,-327102325,-1073741824,5];
function f54(a55, a56) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
Symbol.b = Symbol;
class C60 {
}
const v61 = new C60();
v61.BYTES_PER_ELEMENT = v50;
function f62(a63, a64) {
    function f65() {
        return 4.0;
    }
    function f66(a67) {
        function F68() {
            if (!new.target) { throw 'must be called with new'; }
            const v70 = this.constructor;
            try { new v70(); } catch (e) {}
            let v72 = -128;
            v72--;
            this.g = v72;
        }
        new F68();
    }
    Object.defineProperty(a63, "BYTES_PER_ELEMENT", { configurable: true, enumerable: true, get: f65, set: f66 });
    let v75 = a63.BYTES_PER_ELEMENT;
    v75++;
    class C77 {
    }
    const v78 = C77.length;
    v78 !== v78;
    try { ("0x2I").sup(); } catch (e) {}
    class C83 {
    }
    C83[Symbol.toPrimitive] = Number;
    try { C83(); } catch (e) {}
    const v87 = C83?.call;
    v87.length;
    try { v87(null); } catch (e) {}
    class C90 extends C83 {
        constructor(a92, a93, a94, a95) {
        }
    }
    C90.e = C90;
    try { C90(NaN, v61, NaN, v41); } catch (e) {}
    const v97 = a64?.propertyIsEnumerable;
    try { v97(C83); } catch (e) {}
    let v99;
    try { v99 = v97(); } catch (e) {}
    class C100 {
    }
    C100.name = C100;
    try { C100.call(); } catch (e) {}
    const v102 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v102.includes(v99); } catch (e) {}
    class C104 {
    }
    try { C104(); } catch (e) {}
    try { C104.apply(1.7976931348623157e+308, f62); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C104[Symbol.replace] = v102;
    const v110 = [];
    v110.toString = Symbol;
    try { v110.findLast(1.7976931348623157e+308); } catch (e) {}
    function f113(a114, a115) {
        const o116 = {
            "f": a115,
            [a114]: -12,
        };
        return o116;
    }
    try { f113.toString(); } catch (e) {}
    let v118;
    try { v118 = v110.with(v110, v110); } catch (e) {}
    const v120 = new Float64Array(v110, v118);
    const v121 = new Float64Array(v120, a63, v118);
    v121.values().next();
    return v121;
}
f62.name;
f62.length = f62;
%PrepareFunctionForOptimization(f62);
f62(Uint16Array, v61).length;
%OptimizeFunctionOnNextCall(f62);
f62(v61, v61);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v131 = undefined;
const o132 = {
    __proto__: undefined,
};
o132.h = 1000;
o132.h = o132;
v131 = v53;
let v134;
try { v134 = BigInt64Array(4.0, v131); } catch (e) {}
try { v134.lastIndexOf(BigInt64Array); } catch (e) {}
