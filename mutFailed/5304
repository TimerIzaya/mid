new Uint16Array(212);
new Float64Array(16);
new Uint8Array(2478);
const v9 = [1000000000000.0,1000000.0,1.0,2.0,0.12387979675249217,NaN,-1000000000000.0,2.220446049250313e-16];
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    const v16 = this?.constructor;
    try { new v16(this, a13, this, this); } catch (e) {}
    try { a13.toString(); } catch (e) {}
    a14++;
    a15 >> a15;
    [-48550.861763252644,0.9741629380021758,-2.0,5.0,0.0,9.550440224838109,-759349.387046625,1e-15,-716.166433089257];
    [-1000000.0,-2.0,593.8866544050784,0.208936607803352,-1e-15,-1000000000000.0,6.506436847772548e+307];
    const v23 = [344.64861552632146,-4.0,1000000.0,642514.606934905,0.1807180632123203,0.10752618873097497,983.7839603476882,1000.0,1e-15];
    try {
        v23.e = v23;
    } catch(e24) {
    }
    try {
    } catch(e25) {
    }
}
[-9.443882053575477,4.0,-1.0,9.862069423838154,9.01633634929636e+307,1000000000.0];
[7.656513949862294,-1.4192538086782133e+308,-1000.0,0.9110669796981462,-1.7976931348623157e+308,NaN,-496123.3433532539,-1000000000000.0];
class C31 {
    static #o(a33) {
        this.g **= -1e-15;
        try {
            ("-2147483648").normalize();
        } catch(e35) {
        }
        return 268435456;
    }
    a = -1e-15;
    static 27 = 268435456;
    static f;
}
let v36;
try { v36 = new C31(); } catch (e) {}
v36.a = v36;
const v37 = new C31();
v37.a = v37;
new C31();
const v39 = new C31();
function f40(a41, a42) {
    return v9.constructor;
    return a42;
}
v39.toString = f40;
8 - 8;
8 - 8;
let v50 = -15;
v50 | v50;
const v53 = 344.61638667171496 | 344.61638667171496;
const v54 = 344.61638667171496 & -11;
v54 << v53;
Math.sqrt(-11);
const v57 = Math.floor(v54);
const v58 = v57 + v57;
const v59 = v50--;
const v60 = v59 >> v59;
const v61 = new Int32Array(8);
try { v61.constructor(v39, -1e-15, 8); } catch (e) {}
new Uint32Array(2950);
const v66 = [NaN,3.0];
v66["-2147483648"](-483497369);
function f69() {
    const v70 = [];
    v70[6] = v70;
    const o73 = {
        set b(a72) {
        },
    };
    return v66;
}
for (let v74 = 0; v74 < 5; v74++) {
    f69();
    %OptimizeFunctionOnNextCall(f69);
}
Array.prototype;
const v82 = new Uint8Array(10);
try { v82.reduce(129); } catch (e) {}
const v84 = 28 | 28;
const v86 = new Uint32Array(28);
Object.defineProperty(v86, "valueOf", { writable: true, value: f40 });
v86[0] = v86;
let v87 = 0;
let v88 = -56850;
v88++;
const v91 = 1.1408591040999836e+308 >>> v58;
class C92 {
    #b = v87;
    g = 1.1408591040999836e+308;
    static {
        function F94(a96) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v97 = new F94();
        const v98 = v97.g;
        const v101 = new Uint16Array(209);
        v101[145] = v98;
        let v102;
        try { v102 = new this(); } catch (e) {}
        v102.e = v102;
        this.e = this;
        try { Math.tan(Math); } catch (e) {}
        let v106 = 44149;
        -v106;
        v106--;
        const v109 = v87++;
        const v110 = v109 & v109;
        let v111 = -v109;
        v111++;
        let v113 = ~v87;
        const v114 = 2066950223 - v91;
        Math[Symbol.toPrimitive] = v87;
        try {
            super.test(Uint32Array, v114, v60);
            const v121 = new Int8Array(770);
            new Uint8ClampedArray(v121);
        } catch(e123) {
        }
        v113--;
        Math.log10(v106);
        const v126 = v106 + v87;
        v126 + v110;
        v126 >> v126;
        const v129 = Math.fround(v109);
        v129 >> v129;
    }
}
let v131;
try { v131 = new C92(); } catch (e) {}
Object.defineProperty(v131, "d", { writable: true, enumerable: true, value: v36 });
v131.d = v131;
const v132 = new C92();
v132.g;
v132.g;
const v135 = new C92();
const v136 = v135?.__defineGetter__;
v136.constructor = f40;
try { v136.constructor(v39); } catch (e) {}
try { new v136(v84, C92); } catch (e) {}
const o145 = {
    "execution": "async",
    set e(a143) {
        try {
        } catch(e144) {
        }
    },
};
o145.type = -1e-15;
gc(o145);
