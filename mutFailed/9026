const v0 = [-9.542397459459826,-1e-15,-3.0];
const v1 = [0.4494465215529403,-274984.6069092436,NaN,4.0,0.8818476751967934];
const v2 = [-5.0,584974.3827929033,-449750.1313429604,-224613.57877127687,-4.4800098634650743e+307,1000000000000.0,-283796.13876827725,0.0,-694.7673099491913,0.013178129478269907];
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v6 = 0; v6 < 32; v6++) {
        "p" + v6;
    }
}
const v9 = [0.0,1000.0,2.2250738585072014e-308,-7.579669032342973,1000000.0,-3.320832778713115e+307,-418604.6270540977,-1e-15];
const v10 = [-762139.197196924,-275.1292235605123,0.1637483311740212,0.7397911943313851,-1.7976931348623157e+308,-1000000000.0];
const v11 = [1.7133273154388284,649165.7143808734,-2.0,-1.7976931348623157e+308];
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v11;
    } catch(e16) {
    }
    try {
        this.d = a14;
    } catch(e17) {
        function f18() {
            return v9;
        }
        class C19 {
        }
    }
    let v20 = 0;
    while (v20 < 8) {
        a15 !== this;
        v20++;
    }
    try {
        this.g = a15;
    } catch(e25) {
    }
}
new F12(null, v9);
const v27 = new F12(null, v0);
const v28 = new F12(v10, v2);
v28.g;
[null,v28];
const v31 = [v10,v11,v11,v27];
const v32 = [v11,v31];
const v33 = [-25552.232795396703,-1e-15,-4.0,4.0,-1000000000.0,Infinity,5.418706939384283e+306,3.0,-5.0,1.7434284636811316e+308];
try { v33.push(v1); } catch (e) {}
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
function f39(a40, a41, a42) {
    return a42;
}
let v44;
try { v44 = new Worker(); } catch (e) {}
const v46 = [Worker,F35,v33];
let v47;
try { v47 = v46.values(); } catch (e) {}
const o48 = {
    "arguments": v46,
    "type": "function",
};
try {
    const o49 = {
    };
} catch(e50) {
}
v44[v10] = v32;
function f51() {
    return v11;
}
Reflect.construct(v47, [v2,Reflect,null], F35);
const v55 = new Worker(f39, o48);
const v56 = v55?.constructor;
new Uint8Array(268435440);
function f60() {
    -v31;
    return v10;
}
try { new v56(); } catch (e) {}
