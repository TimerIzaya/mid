function f0() {
    const o4 = {
        [-11]: -11,
        "a": -641275335,
        ...743.2874701315181,
        "b": -11,
        "f": -11,
        ...-11,
        ...-11,
        536870889: 743.2874701315181,
        ...743.2874701315181,
        "c": -641275335,
        "d": -11,
        "g": -11,
        ...743.2874701315181,
        "h": -11,
    };
    return o4;
}
const v5 = f0();
let v6 = f0();
const v7 = f0();
const v10 = new Uint16Array(4096);
new Int32Array(512);
function f16() {
    function f17(a18, a19) {
        512 < 1000;
        for (const v21 in v6) {
        }
        return Float32Array;
    }
    return f17;
}
Object.defineProperty(Float32Array, "toString", { writable: true, configurable: true, get: f16 });
new Float32Array(1000);
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "e", { writable: true, configurable: true, enumerable: true, value: a26 });
    function f28(a29, a30) {
        'use strict';
        a30.h;
        try {
            new Int32Array(this, 4096);
        } catch(e33) {
        }
        return a25;
    }
    f28(a27, a26);
    try {
        this.e = a25;
    } catch(e35) {
    }
}
const v36 = new F23(v7, v5, v6);
new F23(v6, v5, v36);
new F23(v7, v5, 512);
function f40() {
    return Array;
}
f40.toString = f0;
v10.__proto__;
const v42 = v6[Float32Array];
let v43 = v10.__proto__;
v43 = v42;
v6 = v5;
f40.valueOf = f0;
const v45 = new Date(f40);
function F46(a48) {
    if (!new.target) { throw 'must be called with new'; }
    this.valueOf(Array, v45, v45);
}
class C50 extends F46 {
    valueOf(a52, a53, a54, a55) {
        a54.setMilliseconds();
    }
}
const o57 = {
    "c": F46,
    "e": F46,
};
let v60 = 5824;
const v61 = -v60;
Math.min(9);
Math.log10(v61);
const v64 = --v60;
(9 >> 9) / 9;
v64 && 4096;
new C50();
