function f2() {
    /[8(?:ab|cde)(nx7)]/vdiy;
    /a\u0060rf?/dim;
    return /uolsH[\11]/is;
}
Int16Array.toString = f2;
const v6 = new Int16Array(129);
function f7(a8, a9) {
    class C12 {
        static {
            for (let v14 = 0; v14 < 25; v14++) {
                function f15() {
                    return C12;
                }
                const v16 = [601759695];
                const v17 = [1073741824,1073741823,1376142744,1073741825];
                function f19(a20, a21, a22, a23) {
                    function f25() {
                        return a20;
                    }
                    const v26 = f15();
                    const v28 = new Int8Array();
                    const v31 = new Uint32Array(4);
                    [v31];
                    const v35 = BigUint64Array * 536870887;
                    v35 ** v35;
                    function f37(a38, a39) {
                        return v26;
                    }
                    f37();
                    const v41 = v28.buffer;
                    Object.defineProperty(v41, "constructor", { writable: true, configurable: true, value: Date });
                    new Int8Array();
                    v41.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f25);
                    let v46;
                    try { v46 = v17["find"](..."find", a23, ...v16, ...v17, ...522675525n); } catch (e) {}
                    Symbol("find");
                    const v50 = new Uint8ClampedArray();
                    const o51 = {
                        ...v50,
                    };
                    v46 <= a22;
                    return arguments;
                }
                for (let v53 = 0; v53 < 5; v53++) {
                    f19(this, v53, v53, v53);
                }
            }
        }
    }
    return Date;
}
v6[Symbol.toPrimitive] = f7;
new Uint8ClampedArray(1570);
Int16Array.toString = f7;
new Int16Array(256);
const v63 = [v6,v6,Int16Array,Int16Array];
const v64 = [v63];
const v65 = [v6];
new Uint32Array(2394);
new Float64Array(257);
v63[Symbol.toStringTag];
new BigInt64Array(3168);
let [v81] = v65;
v64 << 129;
[-2.0,-1.9930082887777218e+307,4.0];
[777715.2772666493,1000.0,1000.0,-7.619801654318874e+307,1.05524478136805e+308,0.21201235441782762,-1e-15];
[-4.085615306721269,-3.0,9.904883709937973,-Infinity,1.7976931348623157e+308,0.4863107317280847,1000000000000.0,0.0,-1000000000000.0];
[1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0];
class C93 {
    constructor(a95) {
        ("valueOf").localeCompare(a95, "valueOf");
    }
}
new C93();
