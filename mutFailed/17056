const v0 = [-1000.0,-2.0,5.961382190818547,-4.0];
const v1 = [-1.4035743291399286e+308,-8.96084188497725,-1000000000.0,-5.0,292.4299123900678,0.17521274257913677,Infinity,7.512789472766762];
function F2() {
    if (!new.target) { throw 'must be called with new'; }
}
let v4 = "string";
class C8 extends F2 {
    set h(a10) {
        ({"h":v4,} = this);
    }
}
const v12 = [0.9509104022598943,NaN,1000000000000.0,0.0,-840411.8258219493,0.415319750054005,-80341.82650404517];
class C16 {
    get d() {
        return Reflect.construct(48758n, [], this);
    }
    valueOf(a22, a23, a24, a25) {
        let v21 = this;
        v21 ||= v21;
        [-169999.62410955736,515562.9939330786,3.0,-603.0667395547473,-1.0,-2.0,-1000000000.0,-215.42694281692104];
        [4.0,NaN,-2.2250738585072014e-308,-1000000.0,-9.100584420464493,-705.450490784636,0.6100163502762332,1.1739730600702529e+308,Infinity];
        [-917635.9887123978,-805626.7959165613,-5.0,0.6830765694619851];
        return a23;
    }
}
const v29 = new C16();
const v30 = new C16();
const t27 = "Et8A";
new t27();
function f32(a33, a34, a35) {
    const o42 = {
        __proto__: v0,
        [v29]: v30,
        set e(a37) {
            const v39 = [C16,a34,a34];
            const v40 = Reflect.construct(a37, v39, C16);
            let v41;
            try { v41 = new v40(a34, a35, Reflect, a34, ...v39, a37); } catch (e) {}
            v12[1073741825] >>>= v41;
        },
        [v30]: a35,
        [a34]: v29,
    };
    return a33;
}
v4(v12, 48758n, 48758n);
f32(v12, 10000n, -65535n);
f32(v1, -65535n, -65535n);
const v47 = /Cs[\cz]*/vi;
class C49 {
    static {
    }
}
for (let v51 = 0; v51 < 25; v51++) {
    [601759695];
    const v53 = [1073741824,1073741823,1376142744,1073741825];
    function f55(a56, a57, a58, a59) {
        for (let v62 = 0; v62 < 5; v62++) {
            v62 < 2;
            try {
                arguments.g = v62;
            } catch(e65) {
            }
            v62++;
        }
        function f67() {
            return a56;
        }
        const v69 = new Int8Array();
        function f70(a71, a72) {
        }
        f70();
        const v74 = v69.buffer;
        Object.defineProperty(v74, "constructor", { writable: true, configurable: true, value: Date });
        46598 / v47;
        -v51;
        Math.log1p(46598);
        v74.slice();
        try { v53["find"](); } catch (e) {}
    }
    for (let v84 = 0; v84 < 5; v84++) {
        f55();
    }
}
