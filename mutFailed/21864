const v2 = new Int16Array();
const v3 = v2[1];
const o4 = {
    [v3]: v3,
};
const v6 = new Int16Array(3);
const v9 = Array(2433);
-1000 ** 0.544190430081408;
Int8Array.e = Int8Array;
const v16 = new Int8Array(86);
function f19(a20, a21) {
    function f23(a24) {
        let {"b":v25,"f":v26,"g":v27,...v28} = Reflect;
        return v25;
    }
    this.onmessage = f23;
    return f19;
}
new Uint8ClampedArray(8);
function f31(a32, a33, a34, a35) {
    a32 * a32;
    a34 >> a34;
    const o53 = {
        "d": v16,
        "c": v6,
        __proto__: a32,
        ...v6,
        set b(a39) {
            try {
                class C41 {
                    constructor(a43) {
                        const v44 = this.constructor;
                        try { new v44(); } catch (e) {}
                        ("size").c;
                        const v47 = ("size").g;
                        ("size").length;
                        let v49 = v47?.[7];
                        [...v49] = "size";
                        /a\bc/vd;
                    }
                }
                new C41();
                v16.byteOffset = a35;
            } catch(e52) {
            }
        },
    };
    return o53;
}
f31.name;
f31(3, 86, 8, 8);
const v56 = f31(Uint8ClampedArray, 3, 8, 3);
v56[2] = v56;
f31(v16, 3, 86, 3);
function f58(a59, a60, a61, a62) {
    const v65 = new Date(a59);
    const v67 = new Set();
    const v68 = v67.add(v65);
    let [v69,,...v70] = v67;
    const v71 = v69?.setFullYear;
    try { new v71(v67, v56, f31); } catch (e) {}
    let v73;
    try { v73 = v70.findLast(); } catch (e) {}
    const v74 = v69.setUTCHours(v68, Float64Array, v70);
    function f75(a76, a77) {
    }
    class C78 {
        constructor(a80, a81, a82, a83) {
            a83.match(a82);
        }
    }
    v74 % v74;
    try { Number.parseInt(a62, 86); } catch (e) {}
    const o91 = {
        ...f75,
        "a": Set,
        "a": v9,
        n(a89, a90) {
            return this;
        },
        __proto__: v67,
    };
    try { o91.add(v67); } catch (e) {}
    function f93() {
        return v73;
    }
    const v94 = f93();
    class C95 extends f93 {
    }
    const v97 = new Int32Array(v94);
    v97.BYTES_PER_ELEMENT = v97;
    Number.isNaN(v74);
    const v99 = v69.setUTCFullYear(v97, f58, f58, v69);
    v99 - v99;
    return v99;
}
for (let v101 = 0; v101 < 25; v101++) {
    function f102() {
        return f102;
    }
    const o103 = {
        __proto__: f102,
        "e": f102,
    };
    const v104 = [1073741824,1073741823,1376142744,1073741825];
    for (let v105 = 0; v105 < 5; v105++) {
        v105 / v105;
        const v107 = v104.toSorted(f58);
        try { v107.fill(v104); } catch (e) {}
    }
}
