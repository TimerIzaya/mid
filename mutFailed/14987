function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 16;
    } catch(e3) {
    }
}
new F0();
new F0();
new F0();
[5.0,-Infinity];
[0.11381005767727492,-1000000000000.0,-1.075303732478104e+308,0.11746616422355971,-7.906114895549861,-1000000000.0,-4.0,0.6921862619355819,4.0,2.0];
[-1000000000000.0,1.7976931348623157e+308,4.0,-3.0,-102.35239204978348,996616.4496593943,1000.0,1.1735557331532478e+308];
[];
const v16 = new Float64Array(2402);
v16[2367] = v16;
v16[22] = v16;
const v19 = new Uint8ClampedArray(480);
try { v19.find(2402); } catch (e) {}
const v22 = -1;
new Uint32Array(1);
-1073741824 - -1073741824;
-1073741824 >> -1073741824;
const v30 = [];
try { Float64Array.some(Uint32Array); } catch (e) {}
const v32 = [v30];
class C34 extends v16 {
}
C34.length;
const v36 = ("fround").length;
const v37 = v36 >> v36;
const v38 = new C34();
const v39 = [2.220446049250313e-16,0.4676436969349189,1.5179111745363469e+308,-1000.0,-2.220446049250313e-16,-1000000000000.0,4.0,4.587029279807309,-0.0];
class C43 extends Int32Array {
    [Set] = true;
    [v39];
}
new C43();
let v45;
try { v45 = v38.get(v30); } catch (e) {}
const v46 = new C34(v32);
const v47 = new C34(v46);
v47.size = v47;
const v50 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v52 = Uint32Array.name;
try { v52.trimRight(v45); } catch (e) {}
const v54 = new Uint32Array();
v37.g = [601759695];
const v57 = [1073741824,1073741823,1376142744,1073741825];
function f59(a60, a61, a62, a63) {
    try { a60.toLocaleString(); } catch (e) {}
    const v65 = a60?.constructor;
    v65.prototype = v65;
    let v66;
    try { v66 = v65(); } catch (e) {}
    try { v65(); } catch (e) {}
    arguments[0];
    const v70 = arguments.length;
    -v70;
    Object.defineProperty(v38, "e", { configurable: true, enumerable: true, value: f59 });
    const v73 = v46["entries"](a62, ...v47, BigUint64Array, ..."entries", a61, v70);
    const v75 = new Float32Array();
    try { v75.subarray(Uint8ClampedArray, v22); } catch (e) {}
    new BigUint64Array();
    const v80 = new Date();
    v80.setSeconds(v80, "jFd1");
    const v82 = v75?.entries;
    try { new v82(); } catch (e) {}
    try { v73.codePointAt(v32); } catch (e) {}
    class C86 {
    }
    C86.e = C86;
    class C87 {
    }
    const v88 = C87.d;
    try { v88.anchor(v88); } catch (e) {}
    Symbol.match = Symbol;
    const v91 = Symbol.toStringTag;
    v46[v91] = v91;
    function f92() {
        let v94;
        try { v94 = ("Vre").charCodeAt(4096); } catch (e) {}
        let v95;
        try { v95 = v94.lastIndexOf("Vre", a60); } catch (e) {}
        const v96 = v95 !== v95;
        v96 || v96;
        let v98;
        try { v98 = ("Vre").codePointAt(v50); } catch (e) {}
        const v99 = v98 - v98;
        v99 !== v99;
        v98 ^ v98;
        let v102 = Float64Array;
        try { v102(v94, v96, f59); } catch (e) {}
        let v104;
        try { v104 = v102.from("e"); } catch (e) {}
        const t95 = [-3.0];
        t95.length >>>= 213;
        const v109 = new Uint8ClampedArray(129);
        try { v104.with(-4294967297n, -4294967297n); } catch (e) {}
        v102 = a61;
        let v111 = v50.length;
        v111 | v111;
        new Int8Array();
        const o115 = {
        };
        class C116 {
            constructor(a118, a119, a120) {
                for (let v121 = 0; v121 < 5; v121++) {
                    function f123() {
                        const o131 = {
                            [-4294967297n](a125, a126, a127, a128) {
                                eval(C116);
                            },
                        };
                        return f123;
                    }
                    f123();
                    %OptimizeFunctionOnNextCall(f123);
                }
            }
        }
        const v133 = v111++;
        function F134(a136, a137, a138) {
            if (!new.target) { throw 'must be called with new'; }
            const v139 = this.constructor;
            try { new v139(v109, a138, v94); } catch (e) {}
            this.e = a138;
        }
        class C141 {
        }
        let v142;
        try { v142 = C141(); } catch (e) {}
        for (let v143 = 0; v143 < 5; v143++) {
            new F134(undefined, v142);
        }
        try {
        } catch(e146) {
        }
        const o174 = {
            9: v99,
            ..."e",
            n(a148, a149) {
                return a149;
            },
            m(a151) {
                return v133;
            },
            m(a153) {
                return Map;
            },
            [f92]() {
            },
            ["entries"](a156, a157) {
            },
            valueOf(a159, a160) {
                return a159;
            },
            get h() {
                return v50;
            },
            [v57](a163, a164, a165) {
            },
            "toPrimitive": v66,
            get f() {
                return this;
            },
            [-4294967297n](a168, a169, a170, a171) {
                eval(a170);
            },
        };
        return v46;
    }
    function f175() {
        function F177() {
            if (!new.target) { throw 'must be called with new'; }
            const v179 = this.constructor;
            try {
            const t0 = 1073741823;
            t0(v179, v179);
            } catch (e) {}
            try { new v179(); } catch (e) {}
        }
        new F177();
        new Int8Array(1073741823);
        return 1073741823;
    }
    try { new f92(); } catch (e) {}
    const v186 = f92();
    try { v186.get(a61); } catch (e) {}
    const v189 = Array();
    try { v189.findLast(f59); } catch (e) {}
    function f191(a192, a193, a194, a195) {
    }
    const o196 = {
    };
    for (let v197 = 0; v197 < 5; v197++) {
    }
}
for (let v198 = 0; v198 < 10; v198++) {
    f59(v54);
}
