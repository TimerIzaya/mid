const v1 = new Map();
function f2(a3) {
    const v4 = [798019179,-9007199254740992,-8195,-4294967297,1420574578,9007199254740991,-1493424054,-2147483649,8,47842];
    new Float32Array(v4);
    return v4;
}
v1[Symbol.toPrimitive] = f2;
function f11() {
    return Int8Array;
}
v1[v1];
let v13;
try { v13 = v1.has(0); } catch (e) {}
const v14 = new Int8Array(0);
v14.finally = v13;
const v17 = new BigInt64Array(451);
let v18;
try { v18 = v17.keys(); } catch (e) {}
const v20 = 512 - 512;
new Int32Array(512);
function f23() {
    return v14;
}
const v24 = v17[13];
try {
    v24.length = 1;
} catch(e26) {
}
f23.name = f23;
const v27 = [-3,257];
class C28 extends f23 {
    static #n(a30, a31, a32) {
        Object.defineProperty(v27, 10, { writable: true, configurable: true, enumerable: true, set: f23 });
    }
}
const v33 = new C28();
let v34;
try { v34 = v33(); } catch (e) {}
try { v33.finally(v27, f23, f23); } catch (e) {}
try {
    f11();
} catch(e37) {
}
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a40;
    try {
        this.e = a41;
    } catch(e44) {
    }
    try {
        this.f = v20;
    } catch(e45) {
    }
}
const v46 = new F38(v24, v14, 1, v34);
const v47 = new F38(v46, v14, 512, v18);
new F38(v47, 0, v13, 451);
