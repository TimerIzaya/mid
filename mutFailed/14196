let v0 = [];
function f1() {
    const o11 = {
        "f": v0,
        __proto__: v0,
        [v0]: v0,
        ...v0,
        "h": v0,
        [v0]() {
            let v3 = 0;
            do {
                %VerifyType(v3);
                -v0;
                v3++;
            } while ((() => {
                    f1 += f1;
                    v0 >>>= f1;
                    const v6 = [v3,this,f1,f1,this];
                    const v7 = [f1,v0,f1,this];
                    [v7,v7,v6,v3,v7];
                    return v3 < v0;
                })())
            return this;
        },
    };
    return o11;
}
const v12 = f1();
const v13 = f1();
const v14 = f1();
const t27 = 0 >> 0;
const v18 = new t27(0);
232 & 232;
new BigUint64Array(232);
Uint8Array.h = Uint8Array;
new Uint8Array(1073);
function f26(a27, a28, a29, a30) {
    new Int8Array(a29);
    let v34 = 2528;
    v34--;
    const v37 = new Int32Array(v34);
    v37[Symbol.replace];
    /(?<!a)/gm;
    /Kpj4x/vdi;
    /(a\s[\11])/ms;
    v37[0] %= -1073741824;
    const v44 = Uint8Array.buffer;
    try { v44.slice(Int8Array, -1073741824); } catch (e) {}
    return v14;
}
try { f26(v13, Float64Array, v12, 0); } catch (e) {}
%PrepareFunctionForOptimization(f26);
v18();
%OptimizeFunctionOnNextCall(f26);
f26();
