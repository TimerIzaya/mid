function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -368745744;
    } catch(e3) {
    }
    try {
        this.e = F0;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
const v10 = new Int32Array(512);
let v11;
try { v11 = v10.slice(v10, Int32Array); } catch (e) {}
v11 = F0;
let [] = v10;
let v12;
try { v12 = v5.p(v11, 512, 512); } catch (e) {}
v7.a;
let {"a":v14,"c":v15,"g":v16,} = v7;
const v19 = new BigInt64Array(0);
const v20 = v19?.constructor;
try { new v20(Int32Array, BigInt64Array, F0); } catch (e) {}
let v24;
try { v24 = Float64Array.from(v6); } catch (e) {}
new Float64Array(2207);
v12[1558];
class C27 {
    #n(a29) {
    }
}
C27.name = C27;
const v34 = new BigInt64Array(4046);
v34[1868];
function f37(a38, a39) {
    const o40 = {
    };
    o40.h = o40;
    [,...a38] = v34;
    (512 > 512) && 0;
}
f37();
if (v24) {
    v15 - BigInt64Array;
} else {
}
const v50 = BigUint64Array.UTC;
try { v50(); } catch (e) {}
