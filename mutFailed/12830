const v8 = new Float64Array(62);
const v11 = new Uint8Array(9);
const v14 = new Float32Array(8);
let [v16,v17] = v11;
const v18 = new Uint8Array(2147483648, -65537, 1073741824);
let v19;
try { v19 = new v17(...-65537, ...v18, 135526585, 62, v16); } catch (e) {}
v14[Uint8Array] = v19;
const v21 = [[v11,-16,62,"m",v8],v11];
const v22 = [9];
class C23 {
}
const v24 = new C23();
Object.defineProperty(v22, "b", { enumerable: true, value: v24 });
new Map();
const v27 = delete v21?.length;
try {
    v27.b = v17;
} catch(e28) {
}
const v29 = new C23();
const v30 = new C23();
function f31() {
}
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try { a36.valueOf(); } catch (e) {}
    a37.e = a37;
    const v39 = this?.constructor;
    let v40;
    try { v40 = new v39(v29, a36, a34); } catch (e) {}
    a36[0];
    try { a37.toLocaleString(); } catch (e) {}
    try {
        this.d = f31;
    } catch(e43) {
        C23[[11,-268435456,-2147483648,9007199254740991,-2,536870889,-51277,-9809]] = v40;
    }
}
new F32("m", C23, v30, C23);
new F32(v24, v29, "m", v24);
for (const v47 of v16) {
    Reflect.construct(C23, [], f31);
}
