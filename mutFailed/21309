function f3() {
    return -16;
}
const v4 = [1630331771,1630331771,f3];
let v5;
try { v5 = v4.map(1630331771); } catch (e) {}
[v5,1630331771,[v4,1630331771,f3,v4,-16]];
let v10;
try { v10 = new Uint32Array(f3, 4096, 988620502); } catch (e) {}
const v11 = new Uint32Array(v10);
let v12;
try { v12 = v11.entries(); } catch (e) {}
new BigUint64Array(v10);
153 + 153;
new Float32Array(153);
function f20(a21, a22, a23, a24) {
    const v27 = (~9007199254740990).constructor;
    v27.MIN_SAFE_INTEGER;
    function f29() {
        function f30(a31, a32, a33, a34) {
            return f30.arguments;
        }
        return f30;
    }
    try { f29.__proto__(); } catch (e) {}
    v27.valueOf = f29;
    function f37() {
        try { Math.random(); } catch (e) {}
        Math.cos(-197199362);
        return 9007199254740990;
    }
    Object.defineProperty(v27, "toString", { configurable: true, value: v5 });
    const v43 = v27(v27).toFixed();
    let v44;
    try { v44 = v43.replaceAll(f29, v43); } catch (e) {}
    ("1024").length;
    for (const v47 in "1024") {
    }
    return v44;
}
for (let v48 = 0; v48 < 5; v48++) {
    v12();
}
%OptimizeFunctionOnNextCall(v10);
f20(f20, f20, f20, f20);
