new Uint16Array(1000);
let v3 = 4;
new Int32Array(v3);
const v7 = [0.8307152163010869,1.0,0.0];
v7.length = 1000;
v7 instanceof -24894;
const v10 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
new Int32Array(v10, 10);
new Uint8ClampedArray(64);
const v17 = [6,4096,-256,15,-20434,-949964981,2147483647,65536,-1,8];
const v18 = [107684052,65537,268435440,1,-2147483647,4294967295,1819451504];
const v19 = [-41763];
function f20(a21, a22, a23) {
    const o36 = {
        get c() {
            const v25 = v19[2818];
            [-6.4054008449454924,0.0,-1000000.0,750964.4298542561,-2.0,4.0];
            [0.930784320119549,2.0,613.3980570065628,1.6843243213058828e+308,1.0,-3.0,1000000.0,3.7382945196119284,221.86514698122596];
            [-3.0,-2.0];
            return v25;
        },
        [Uint16Array]: Uint16Array,
        get e() {
            try { Int32Array(this, 1000, a23); } catch (e) {}
            function f31() {
                return f31;
            }
            const v32 = [-268435456,2,9007199254740992,0];
            const v33 = [2147483649,1024,-128,-256];
            v33["join"](...v32, ...v33);
            v3 = 64;
            return 64;
        },
    };
    return o36;
}
f20(v17, v19, 64);
f20(v18, v19, v3);
f20(v18, v18, 1000);
function f40() {
}
const v43 = new Date();
v43.setUTCFullYear(v43, 1.148427520173608e+308, 1.148427520173608e+308);
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v49 = 0; v49 < 5; v49++) {
    }
    const v50 = this.constructor;
    const o55 = {
        "maxByteLength": 2119,
    };
    new SharedArrayBuffer(255, o55);
    const t52 = "9007199254740992";
    t52["255"] &= 7;
    const v61 = new Set();
    function F62(a64, a65) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a64;
        } catch(e66) {
            for (let [v67,v68] of a64) {
            }
        }
        try {
            this.h = v61;
        } catch(e69) {
        }
        try {
            v61[this];
            ([WeakSet,WeakSet,WeakSet]).copyWithin();
            function f74(a75, a76, a77) {
                return f74;
            }
            try {
                new F62();
            } catch(e79) {
            }
            this.b = Set;
        } catch(e80) {
        }
    }
    const v82 = new Float32Array(2);
    v82[1] = v82;
    Math.atan2(-Infinity, 536870887);
    const v87 = [1984879050,0,-8575,7,1073741825];
    function f88(a89, a90, a91, a92) {
        return ("Vre").constructor.fromCharCode(v87);
    }
    for (let v96 = 0; v96 < 10; v96++) {
        f88(v96, f88, v96, v96);
    }
    try { new v50(); } catch (e) {}
}
new F45();
