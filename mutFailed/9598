const v2 = -Infinity;
class C3 {
    #b = 271.93056315147214;
    static m(a5, a6) {
        const v7 = this[9];
        let v8;
        try { v8 = this.sqrt(this, v7, a6); } catch (e) {}
        try {
            a5.#b = v8;
        } catch(e9) {
        }
        return this;
    }
    f;
    [v2] = v2;
}
C3.length = C3;
const v10 = C3?.call;
try { new v10(271.93056315147214); } catch (e) {}
const v12 = new C3();
const v13 = new C3();
const v14 = v13?.__defineSetter__;
let v15;
try { v15 = new v14(v12, v2); } catch (e) {}
const v16 = new v15();
-2.0 / v13;
1000000000000.0 & 1000000000000.0;
~(1000000000000.0 | 1000000000000.0);
function f25() {
    const o30 = {
        toString(a28) {
            class C29 {
                static [this] = a28;
            }
            return C29;
        },
    };
    return Map;
}
Map[Symbol.iterator] = f25;
new Map();
let v36;
try { v36 = Uint8Array.from(Map); } catch (e) {}
let v37;
try { v37 = v36.lastIndexOf(v16); } catch (e) {}
const v38 = new Uint8Array(v37);
try { Int32Array.from(Int32Array); } catch (e) {}
const v41 = new Int32Array(v38);
v41[0] = v41;
