/xyz{1,}E4((\xed\xa0\x80))\x02/guisy;
const v4 = /[\ca]Blqp+/gvy;
const v5 = /d1J/gudmsy;
const v7 = new Map();
class C8 {
    static m(a10, a11) {
        try {
            super.toString(this, this, 10000n, a11, v4);
        } catch(e13) {
        }
        return 10000n;
    }
    static p(a15, a16) {
        this[v7];
        new Float64Array(7);
        new Int16Array(2619);
        new BigUint64Array(1);
        return Float64Array;
    }
}
new C8();
const v28 = new v5();
const v29 = new C8();
class C30 {
    [v29];
    static #p(a32, a33, a34) {
        let v31 = this;
        v31 = a32;
        let v35 = 0;
        do {
            %VerifyType(10000n);
            function F36(a38, a39, a40) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a38;
                } catch(e41) {
                }
                try {
                    this.c = -65537n;
                } catch(e42) {
                }
                try {
                    this.a = v28;
                } catch(e43) {
                }
            }
            new F36(a32, v4, 10000n);
            new F36(a33, a33, a34);
            new F36(v5, v28, 10000n);
            v35++;
        } while (v35 < 10)
        return v5;
    }
}
new v4();
new C30();
new C30();
const v54 = [2.220446049250313e-16,4.688311165693396,-4.0];
const v55 = [12];
const v56 = v55.constructor;
const v59 = Symbol.isConcatSpreadable;
const v60 = Array(v54, 12, v56);
Object.defineProperty(v60, 83, { configurable: true, enumerable: true, value: v55 });
v60[267] = v59;
v60["concat"]();
