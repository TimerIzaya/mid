const v3 = [1073741824,255,-93221804,1,268435440];
v3.length = 512;
const o5 = {
    "type": v3,
};
class C7 {
    2960;
    ["symbol"];
    static m(a9, a10) {
        try {
            const t10 = "symbol";
            t10.e = "N";
        } catch(e11) {
        }
        try {
            a10.substring(1787954471);
            class C15 extends Int32Array {
            }
            function F17(a19, a20) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    const v21 = Math.max();
                    v21 & v21;
                    new F17();
                } catch(e24) {
                }
            }
        } catch(e25) {
        }
        const o28 = {
            __proto__: null,
            valueOf() {
                return this;
            },
        };
        return this;
    }
}
const v29 = [1073741824,255,-93221804,1,268435440];
v29["concat"]([Uint32Array]);
const v34 = new C7();
const t41 = "concat";
new t41();
new C7();
[4.0,0.0,-8.005646771725598,-2.0];
const v38 = [1e-15,-710.3101146847259,0.9452480877743454,-2.220446049250313e-16];
const v39 = [-1.1299150799263618e+308,Infinity,-945214.0046405926,-5.959398101682694];
function F40(a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a42;
    } catch(e45) {
    }
}
const v46 = new F40("number", "number", v38);
const v47 = new F40("number", v46, v38);
const v48 = new F40(v47, v34, v39);
const v49 = [601759695];
const v50 = [1073741824,1073741823,1376142744,1073741825];
function f51(a52, a53, a54, a55) {
    const v57 = new Int8Array();
    v57.buffer.slice(a52, 512);
    const v62 = new Date(a54);
    try { v62.setMilliseconds(v29); } catch (e) {}
    try { v50["find"](..."find", a55, ...v49, ...v50); } catch (e) {}
    return v50;
}
class C66 {
}
const v69 = new Float32Array(1024);
function f70() {
    ("1073741823").trimRight();
    return "1073741823";
}
v48();
v69.includes(C66, 1024);
