function f0() {
}
class C1 {
    static #p(a3, a4) {
    }
    #h;
}
const v5 = new C1();
class C6 extends f0 {
    129 = f0;
    static p() {
        const v9 = new WeakMap();
        try {
            v9.b = v9;
            function F10(a12, a13) {
                if (!new.target) { throw 'must be called with new'; }
            }
            new C6();
            function f15() {
                const o21 = {
                    [1836424012](a18, a19, a20) {
                    },
                    "e": C1,
                    "e": 1836424012,
                    6: 1836424012,
                };
                Date.parse(-73245.82270792685);
                class C25 {
                    static #m(a27) {
                    }
                    set d(a29) {
                        this.#m();
                    }
                    constructor(a32) {
                        function f33() {
                            return this;
                        }
                        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f33 });
                    }
                }
                let v34 = 0;
                v34++;
                const v36 = new F10(v34);
                [v36,v36,v36,v36,v36];
                return F10;
            }
            v9();
            v5();
            f15();
        } catch(e41) {
        }
        return f0;
    }
    #p() {
        Math.cosh(Math);
        class C45 {
        }
        for (let v46 = 0; v46 < 100; v46++) {
        }
        try {
        } catch(e47) {
        }
    }
    610 = f0;
    [f0] = f0;
}
new C1();
let v49 = Uint8Array;
class C50 {
}
const v51 = new C50();
function f53() {
    const v56 = v49--;
    Math.min();
    v49 ** 6;
    -4294967296 >>> v51;
    return v56 - v51;
}
for (let v61 = 0; v61 < 5; v61++) {
    v49();
    %OptimizeFunctionOnNextCall(f53);
}
new C6();
new C6();
const v68 = new Date();
v68.getFullYear();
f0?.apply;
function f71(a72, a73, a74, a75) {
    return Reflect.construct(Uint8ClampedArray, []);
}
const v84 = [];
function f85() {
    const v87 = -v84 && v51;
    -v87;
    return v87;
}
f85();
%OptimizeFunctionOnNextCall(f85);
function f90() {
    return v5;
}
const v91 = [];
v91[0] = v91;
new BigInt64Array(v91);
