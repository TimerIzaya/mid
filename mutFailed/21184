const v2 = new BigInt64Array(257);
new Float32Array(3);
const v7 = [257,257,257];
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
}
new F8(257, 257, v7, v7);
this[256] = BigUint64Array;
try { new Uint16Array(BigInt64Array, 9, Uint16Array); } catch (e) {}
new Uint16Array(9);
const v23 = new BigUint64Array(2029);
new Int16Array([10,829820207,16,-4294967296,-9007199254740992,-65535,-2147483648,1024]);
const v27 = [101.2980265931285,-1.7177856293756712e+307,-1000000.0,-8.49664044843577];
const o28 = {
    __proto__: v27,
};
new Int8Array(6);
64 ^ 64;
async function f34(a35, a36, a37) {
    return a35;
}
const v38 = [];
class C39 {
    constructor() {
        super.f >>= this;
    }
    static #o() {
        super[v38];
        super.a;
        return v38;
    }
}
C39();
Uint32Array.g = Uint32Array;
const v46 = new Uint32Array(64);
try { v46.with(v23, v2); } catch (e) {}
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v52 = [9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648];
        const v56 = new Int32Array(512);
        new Uint32Array(v56);
        try { ("function").strike(); } catch (e) {}
        ["function",v52];
        class C62 extends String {
            6 = String;
        }
        "Vre" * -1.632556010913421e+308;
        new F48();
    } catch(e67) {
    }
}
new F48();
