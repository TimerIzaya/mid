const v3 = [65537n,-17001n];
const v5 = [-268435456n,[65537n],v3];
function f6() {
    return -17001n;
}
class C7 {
    set e(a9) {
        a9 <= 65537n;
        [-1.5216458828263529e+308,0.5110487320488007,1e-15,-1.2848390061380066e+308,-469.4777344751333];
        [1000.0];
        [-1000000000000.0,2.0,-7.165186377685043,-1000000000000.0,447915.35253179725,-1000000000.0,-3.0,2.220446049250313e-16,-1.0];
    }
    #f = 65537n;
    3708478240 = -268435456n;
    static #d;
    #h = v5;
}
const v14 = new C7();
new v14();
new C7();
const v17 = /(J5a{0,1}?)/y;
class C18 {
    static {
        for (let v20 = 0; v20 < 25; v20++) {
            [601759695];
            const v22 = [1073741824,1073741823,1376142744,1073741825];
            function f23(a24, a25, a26, a27) {
                ~a25;
                try { a24(); } catch (e) {}
                a26 % (a26 << a26);
                function f32() {
                    return a24;
                }
                const v34 = new Int8Array();
                BigUint64Array.length;
                const v38 = BigUint64Array * 536870887;
                v38 - v38;
                v20++;
                const v41 = v38 ** v38;
                try { Number(v17); } catch (e) {}
                Number.isNaN(v41);
                const v46 = v34.buffer.__defineGetter__;
                try { v46(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f32);
                let v49;
                try { v49 = v22["find"](..."find", a27, ...v22); } catch (e) {}
                return v49;
            }
            for (let v50 = 0; v50 < 5; v50++) {
                f23(this, v50);
            }
        }
    }
}
