const v5 = new Int16Array("m");
new Uint8ClampedArray(128);
new Int16Array(305);
let v11 = 10;
for (let i = 0; i < 10; i++) {
    v11--;
    let v14 = v11 << v11;
    --v14;
    let v16 = --v14;
    let v17 = ++v16;
    Math.cos(++v17);
}
const v22 = new Uint8ClampedArray(1584);
function f23() {
    return v5;
}
new BigUint64Array(128);
new Int16Array(10);
const v36 = Math.round();
async function f37(a38, a39, a40) {
    a40 >>> a40;
    Number.isNaN(await v36);
    const v46 = [0.8307152163010869,1.0,0.0];
    v46[2] = v46;
    v46.length = 128;
    %VerifyType(v46 instanceof -24894);
    return f37;
}
let v48;
try { v48 = f37(-788.7260290236088, -1000000000.0, v11); } catch (e) {}
const v49 = f37(Math, "b", v22);
try { v49.hasOwnProperty(-788.7260290236088); } catch (e) {}
new v48(512);
for (let v52 = 0; v52 < 100; v52++) {
    const v54 = [601759695];
    const v55 = [1073741824,1073741823,1376142744,1073741825];
    let v58;
    try { v58 = v55[v52](..."find", Math, ...v54, ...v55, ...522675525n); } catch (e) {}
    v58 <= v52;
    Math.random();
}
const o66 = {
    [-206.79565552697056]: 352693014,
    get g() {
    },
    "g": -206.79565552697056,
};
