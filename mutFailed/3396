new Set();
function f3(a4, a5) {
    return a5;
}
let v7 = "-45155";
function f8() {
    return f8;
}
const v9 = f8();
var b = -2147483649n;
class C11 {
    constructor(a13, a14) {
        for (let i = 0; i < 10; i++) {
            this[this];
        }
    }
    m(a17, a18) {
        v7 = a18;
        function f19() {
            return v7;
        }
        return v7;
    }
    static d = v7;
    [-55801.39760616061];
    static #f = -55801.39760616061;
    static #a = "-935140924";
    #p(a21, a22, a23, a24) {
    }
    toString(a26, a27) {
        const v28 = this.constructor;
        new v28(a27, v28, this, v28, v9);
        -this;
    }
}
const v31 = new C11(C11, C11);
const v32 = [536870887,-42204,-17288903,-3,9007199254740991,7];
function f33(a34, a35) {
    return a34;
}
f33(v32);
const v37 = new C11();
const v38 = new C11(v31, C11, v7);
function f39(a40, a41, a42) {
    const o49 = {
        p(a44, a45) {
            for (const v46 in a40) {
                try {
                    super.split(a41, a40, v46);
                } catch(e48) {
                }
            }
            return C11;
        },
        [a41]: C11,
        __proto__: v31,
    };
    return o49;
}
f39(C11, v31, v37);
f39(v31, C11, v37, v38, f39);
f39(v38, v31, v31);
const o54 = {
    ..."boolean",
};
function f55(a56, a57) {
    for (let v58 = 0; v58 < 5; v58++) {
        %OptimizeFunctionOnNextCall(v58);
    }
    function F60(a62, a63) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e64) {
        }
        try {
            Math.clz32();
            new F60();
        } catch(e67) {
        }
    }
    new F60();
    return a56;
}
const o69 = {
};
new Uint32Array(381);
Object.defineProperty(o54, 1, { configurable: true, get: f55 });
