const v0 = [-2147483648,4,-1211390040,-24959,1684627259,2147483649,-9223372036854775808];
v0.g = v0;
const v1 = [3];
function f2() {
    return v1;
}
function f3(a4) {
    const v7 = new Uint8Array(165);
    v7.lastIndexOf();
}
Object.defineProperty(v1, "g", { writable: true, enumerable: true, get: f2, set: f3 });
const v9 = [-56432,6,-9007199254740990,0,25264];
function f10(a11, a12) {
    a12[Symbol.toPrimitive] = f10;
    try { a12.sort(v9); } catch (e) {}
    a12.g = a12;
    const o27 = {
        [v9]: a12,
        "e": v1,
        ...a11,
        set g(a17) {
            for (const v18 in a11) {
                const o19 = {
                };
                try {
                    o19.h = v0;
                } catch(e20) {
                }
                try {
                    const o21 = {
                    };
                    o21.h = v0;
                    o21.e = a17;
                } catch(e22) {
                }
                try {
                    const o23 = {
                    };
                    o23.h = v0;
                    o23.e = a17;
                    o23.a = a17;
                } catch(e24) {
                }
                try {
                    const o25 = {
                    };
                    o25.h = v0;
                    o25.e = a17;
                    o25.a = this;
                } catch(e26) {
                }
            }
        },
    };
    o27[0];
    return o27;
}
f10.length = f10;
const v29 = f10(v1, v1);
v29[0] = v29;
const v30 = f10(v0, v0);
v30.toString = f2;
v30[4] = v30;
v30.g;
f10(v0, v9).g;
[-9007199254740991,-56908,5,1746704733,-2147483647,10,67];
[-2112014943,-393,11,129,-2046636718];
const v36 = [6,1000,127,536870889,4294967297];
v36[1] = v36;
let v37 = -128;
v37--;
const v39 = v37 ^ v37;
v39 + v39;
v39 - v39;
let v42 = -10;
v42++;
const v47 = new Uint8ClampedArray(231);
v47[185] = v47;
v47[101] = v47;
const v49 = ("reverse")[2];
try { v49.charCodeAt(v37); } catch (e) {}
const v51 = v47["reverse"]();
v51.valueOf = f3;
v51[185];
try { v51.slice(v51, v30); } catch (e) {}
