function f2() {
    return f2;
}
class C3 extends f2 {
    constructor(a5) {
        super();
        for (let v6 = 0; v6 < 5; v6++) {
            const v8 = "p" + v6;
            class C9 {
            }
            new C9();
            [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
            try {
                const v14 = Array(19793);
                for (const v15 of v14) {
                    function f16() {
                        return f16;
                    }
                    /{}(x)(x)(x)\4*a{0}a|b/msy;
                }
                [v14,v14,v14];
                [v6] >= Uint16Array;
            } catch(e22) {
            }
            this[v8] = v6;
        }
    }
}
const v23 = new Uint16Array(547);
new Uint16Array(10);
const v29 = new Int8Array(3730);
class C30 extends Uint16Array {
    toString(a32, a33, a34, a35) {
        try {
            v29.__proto__ = v23;
            const v36 = [4294967296,17929,1024,-1,2247,-1507953290,-4,-4096,-1382902055,268435456];
            try { v36.groupToMap(v36); } catch (e) {}
            let v38 = 0;
            const v39 = v38++;
            v39 - v39;
        } catch(e41) {
        }
        return a32;
    }
    constructor(a44, a45) {
    }
    [10];
    a;
}
function f49() {
}
const v50 = f49();
const v51 = /(?<!a)/vdmsy;
const v53 = [1073741824,1073741823,1376142744,1073741825];
function f54(a55, a56, a57, a58) {
    function f60() {
        return f54;
    }
    let v61;
    try { v61 = v53.findIndex(a57, v51); } catch (e) {}
    try {
        v50.d = v53;
    } catch(e62) {
    }
    for (let v63 = 0; v63 < 5; v63++) {
        v51["p" + v63] = v63;
    }
    const v67 = new Int8Array();
    function f68(a69, a70) {
    }
    const v71 = f68(v61, Int8Array);
    const v72 = v67.buffer;
    try { v72.slice(a55, a56); } catch (e) {}
    Object.defineProperty(v72, "constructor", { writable: true, configurable: true, value: Date });
    try { v53["find"](); } catch (e) {}
    const o76 = {
        [v71]: v67,
        "g": v61,
        [f68]: f60,
    };
    return arguments;
}
f54(v50, f54, f54, v53);
new C30();
new C30();
new C30();
function f82(a83, a84, a85, a86) {
    const v88 = new Float32Array(2);
    const v89 = [10,-9007199254740991,512,7];
    function f90(a91) {
        const o92 = {
            ...v89,
        };
        return f90;
    }
    v88[1] = v88;
    const v94 = new Int32Array();
    function F95(a97, a98, a99, a100) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v101 = new F95(v89, v89, v94, 2);
    v101.constructor;
    Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[-3.942521664036782e+307,-3.942521664036782e+307,-3.942521664036782e+307]]);
    const v108 = v88;
    v94.fill();
}
for (let v110 = 0; v110 < 625; v110++) {
    f82();
}
