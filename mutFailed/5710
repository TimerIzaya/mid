let v2 = "7";
class C3 {
    constructor(a5) {
        this.h = this;
        a5[5];
        try {
            this.f = a5;
        } catch(e7) {
        }
    }
    get h() {
        try { new v2(this, this, this, this, this, ..."WCV"); } catch (e) {}
        this[268435441];
        try {
            ("number").toUpperCase();
        } catch(e12) {
        }
        return this;
    }
}
try { new C3(C3); } catch (e) {}
new C3("number");
new C3(v2);
const v16 = new C3(v2);
function F17(a19, a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(this, "number", this, F17); } catch (e) {}
    const v25 = a20?.fontsize;
    try { new v25(C3); } catch (e) {}
    const v27 = a21?.constructor;
    try { new v27(C3); } catch (e) {}
    try {
        this.c = a19;
    } catch(e29) {
    }
    try {
        this.f = v16;
    } catch(e30) {
    }
    try {
        this.h = a22;
        const v31 = [1199929892,-268435456,202122251,-9,1000];
        try { v31.unshift(v31); } catch (e) {}
        [10000,11655,268435439,-327885053,64,-2147483648,536870912,536870912];
        [268435441,384438925];
        Reflect.construct(a22, [v31,a22,this], F17);
    } catch(e38) {
    }
}
const v39 = new F17("number", "WCV", v16, "WCV");
new F17(v2, "WCV", v39, v2);
const v41 = new F17("WCV", "number", v16, "WCV");
v41.c = v41;
class C42 {
    valueOf(a44, a45, a46, a47) {
        let v49 = 512;
        const v51 = +-1;
        const v52 = v49--;
        const v53 = ++v2;
        v51 / v2;
        Math.acos(v53);
        ~v52;
        return v53;
    }
}
C42.prototype = C42;
const v57 = new C42();
const v58 = new C42();
try { v58.valueOf(C3, C3, C3, v39); } catch (e) {}
const o60 = {
    __proto__: v16,
    [v58]: v57,
};
o60[v39] = v2;
const v61 = new C42();
const v62 = v61?.constructor;
try { new v62(); } catch (e) {}
const v65 = new Date();
const v66 = v65?.setHours;
try { new v66(C3, C3, v61, C42); } catch (e) {}
function f68(a69) {
    return Date;
}
const v72 = [v65];
const o73 = {
    "arguments": v72,
    "type": "function",
};
const v74 = o73?.__lookupSetter__;
try { new v74(v65); } catch (e) {}
const v76 = new Worker(f68, o73);
try { v76.getMessage(); } catch (e) {}
