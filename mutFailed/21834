const v0 = [3.5152553680887195e+307,-1.0,-1000000000000.0,536978.8651505061];
class C1 {
}
const v4 = ([Uint32Array]).toString();
const v5 = [-9.778580910692911,1e-15,NaN,-1e-15];
const v6 = [1.5780793289253796e+308,980.9241324146278,-1000000000.0,0.1865641471903362,-5.6207577579959045,2.0,-1000.0,3.0,-146098.38976281858,-1000.0];
class C11 {
}
C11.constructor;
const v13 = [-536870912,-65537,10,-9007199254740990,-11,46376,2,6];
let {...v14} = v13;
class C16 {
    static #valueOf(a18, a19, a20) {
        v0[236];
        return v5;
    }
    static h;
    static 4294967296;
    constructor(a23) {
        "atan2" ** v4;
    }
    o(a27, a28) {
        new Float32Array(299);
        const o32 = {
        };
        let v34 = new Proxy(v5, o32);
        ++v34;
        try {
            this.toString = a27;
        } catch(e36) {
        }
        return v6;
    }
}
new C16();
const t35 = [1073741824,255,-93221804,1,268435440];
t35.length = 512;
function F41(a43) {
    if (!new.target) { throw 'must be called with new'; }
}
Date.parse(-73245.82270792685);
const v47 = async (a48, a49, a50) => {
    return v4;
};
new C16();
const o52 = {
};
try {
    Symbol.hasInstance;
    class C55 {
        toString(a57, a58, a59) {
            const o60 = {
            };
            const o61 = {
            };
            const t55 = (-64209).constructor;
            t55(3n);
            const v69 = new BigInt64Array(0);
            try {
                v69.f = 0;
            } catch(e70) {
            }
            function f71(a72, a73, a74) {
                return a74;
            }
            Int16Array[0] = 8;
        }
    }
    for (let v76 = 0; v76 < 1000; v76++) {
        "p" + v76;
    }
} catch(e79) {
}
new v13();
function f81() {
    class C83 {
        static {
            for (const v86 in this) {
            }
            C83.constructor;
            Symbol.keyFor(Symbol());
            gc();
        }
    }
    function f95() {
        for (let v97 = 0; v97 < 5; v97++) {
            const v100 = new Uint8ClampedArray(1000);
            const o102 = {
                ...v100,
                get h() {
                    return this;
                },
            };
        }
        const o120 = {
            m(a104, a105) {
                new Uint8Array(268435440);
                let v111 = new Int32Array(245);
                v111++;
                return a105;
            },
            "b": 5,
            "done": -12,
            m(a114, a115, a116, a117) {
                ("ignoreCase").normalize();
                return this;
            },
        };
        return f95;
    }
    const o121 = {
    };
    return "caller";
}
("boolean").split("toString");
function f125() {
    function F126(a128) {
        if (!new.target) { throw 'must be called with new'; }
        const v129 = this.constructor;
        v129.prototype;
        try { new v129(); } catch (e) {}
    }
    const v132 = new F126(f125);
    new F126(v132);
    return f125;
}
f125();
f125();
/\p{Changes_When_NFKC_Casefolded}/guis;
