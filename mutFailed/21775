let v0 = 255;
function f2() {
    const v7 = v0 + 77.95700650248591;
    -256 >> v7;
    Math.sin(77.95700650248591);
    const v10 = ~-256;
    !v7;
    v0 >> -256;
    !v10;
    return 256;
}
Float64Array.toString = f2;
const v14 = new Float64Array(v0);
const v19 = --f2;
1024 || (v19 << v19);
new Float32Array(4);
Float64Array[Symbol.toPrimitive] = f2;
const v27 = new Float64Array(1367);
v27[Symbol.toPrimitive] = Symbol;
class C30 {
    static #b = Float32Array;
    get d() {
        [v0] = v14;
        try {
            this.e = 1367;
        } catch(e32) {
        }
        new Date();
        Date();
        try {
            Symbol.#b;
        } catch(e38) {
        }
        return this;
    }
    static a;
    [1367];
    [Float64Array];
    static [v27] = Float64Array;
}
new C30();
new C30();
new C30();
const v44 = new Int32Array(7);
new Uint16Array(v44);
