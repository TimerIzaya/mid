let v1 = Uint8ClampedArray;
const v2 = new v1(14);
3 & 3;
const v6 = new Uint32Array(3);
v6.length = v6;
Uint32Array || 3;
Math.tanh(1.367325326241982);
Math.cosh(1.367325326241982);
const v15 = v1 - 65537;
v1++;
v15 / -5;
try { new Uint16Array(3, v1, 3); } catch (e) {}
const v20 = new Uint16Array(257);
256 >>> 256;
const v24 = new BigInt64Array(256);
for (let [v26] of v20) {
    const v28 = [];
    Reflect.apply(v6.toSorted, v20, v28);
}
const v32 = new BigUint64Array(2);
const v33 = v32[1];
v33 - v33;
const v37 = new Float32Array(2032);
const v39 = 536870889 + 536870889;
v39 % v39;
function F41(a43, a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = a46 === a46;
    const v48 = this?.hasOwnProperty;
    try { new v48(F41); } catch (e) {}
    a44 - a44;
    a46 - a46;
    const v52 = v2.constructor;
    v52.f = v52;
    let v53 = 0;
    while (v53 < 1) {
        try {
            const v56 = /(3(?<!))/gudimsy;
            const v57 = [v48,2,v47,v33,v37];
            this.fuck(v56, v57, v57);
        } catch(e59) {
        }
        v53++;
    }
    try { new v52(); } catch (e) {}
    try { Float32Array.from(BigInt64Array); } catch (e) {}
    const v64 = typeof Float32Array;
    v64[5];
    v64[7];
}
const v67 = F41.prototype;
const v68 = new F41(F41, 14, F41, 536870889);
const v69 = v68?.constructor;
try { new v69(2, v67, v68, v67); } catch (e) {}
const v71 = new F41();
const v72 = v71?.constructor;
try { new v72(v39, v24, F41, BigInt64Array); } catch (e) {}
