function f0() {
}
new Uint16Array(9);
let v7;
try { v7 = Worker(); } catch (e) {}
const v8 = new WeakSet();
function f9(a10, a11) {
    const o41 = {
        "g": 9,
        m() {
            Math.log1p(2.220446049250313e-16);
            for (let i17 = 0; i17 < 10;) {
            }
            const v25 = new Uint8Array(Uint8Array, Uint8Array);
            v25[Math.atan2(-988.8649474800335, 10000)] = 10000;
            const o31 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o31);
        },
        [v8]: a10,
        6: a11,
        536870889: f0,
        "e": null,
        ...a11,
        ...a11,
        [a11](a34, a35, a36) {
            f0();
            %PrepareFunctionForOptimization(f0);
            f0();
            f0();
            %OptimizeMaglevOnNextCall(f0);
            f0();
            return null;
        },
    };
    return o41;
}
const v42 = f9(WeakSet, f0);
f9(v42, v42);
f9(v42, f0);
class C45 {
}
const v46 = new C45();
v46.b;
const v50 = v42.constructor;
try {
    v7 % 257;
} catch(e53) {
    ("gV9")["toLowerCase"](v50, ...-5.0, ...v46);
}
class C56 extends WeakSet {
    #g = f9;
    set b(a58) {
    }
    #valueOf(a60, a61, a62, a63) {
    }
    constructor(a65, a66, a67) {
        function f68(a69, a70, a71) {
            try {
            } catch(e72) {
            }
        }
    }
    p(a74, a75, a76) {
        const v79 = 1117009999 << 1117009999;
        const v80 = a74 - a74;
        Math.expm1(1117009999);
        1117009999 ^ v79;
        v80 | (a74 / v80);
        return 1117009999;
    }
}
new C56();
new C56();
new C56();
for (let v88 = 0; v88 < 5; v88++) {
    function f89() {
        for (let [i105, i106] = (() => {
                let v91 = 10;
                let v92 = undefined;
                v92++;
                const v95 = 1922 % 1922;
                const v96 = v95 == v95;
                const v97 = v91++;
                const v99 = new Int8Array();
                let v100;
                try { v100 = v99.entries(); } catch (e) {}
                let v101;
                try { v101 = v100.next(); } catch (e) {}
                const v103 = ("c")?.search;
                try { new v103(v101, v96, v91, v97); } catch (e) {}
                return [0, v91];
            })();
            i105 < i106;
            (() => {
                const v110 = i105++;
                function f111() {
                    return f111;
                }
                const v112 = [237.40427484073666,938352.7862596414];
                function f113(a114) {
                }
                v112.toString = f113;
                v110 >> v110;
            })()) {
        }
        function F118(a120, a121, a122, a123) {
            if (!new.target) { throw 'must be called with new'; }
            ~a121;
            a123 | a123;
            const v126 = this.constructor;
            try { new v126(); } catch (e) {}
            typeof Float32Array;
        }
        new F118();
        return v88;
    }
    f89();
    %OptimizeFunctionOnNextCall(f89);
}
