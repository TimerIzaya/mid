const v4 = new Uint16Array([34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449]);
const t1 = "-1100026571";
t1.e = v4;
function F5(a7, a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
}
class C11 {
    constructor(a13) {
        let v12 = this;
        try {
            --v12;
        } catch(e15) {
            try { ("h").toString(v12, e15, "-1100026571", "-1100026571"); } catch (e) {}
        } finally {
            super[v12];
        }
    }
    static [-16] = -16;
    static 65535 = "-1100026571";
    /*
    constructor(a19) {
        const v20 = this.constructor;
        try { new v20(a19, this); } catch (e) {}
        ("-1100026571")["search"](..."-1100026571", ..."search", ..."search", a19, ..."search");
    }
    */
    static #h = "-1100026571";
    [C11];
}
const v24 = new C11("-1100026571");
new C11(v24);
function f26() {
}
class C27 extends f26 {
    constructor(a29, a30, a31) {
        super();
        super.f = a29;
    }
}
new C27();
new C11("-1100026571");
-256n >> -256n;
function f36() {
    const o41 = {
        8: 0.043152456200264866,
        get a() {
            Math.acos(0.043152456200264866);
        },
    };
    return o41;
}
f36(-256n);
let v48 = [-5.034735835956977e+307,-385.25474675985527];
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v54 = C27.valueOf().constructor;
    try { new v54(); } catch (e) {}
    Math.imul(--v48);
    +this;
}
new F49();
new F49();
new BigUint64Array(64);
new BigUint64Array(129);
new C11(3);
class C71 {
}
function f72(a73, a74) {
    function f75(a76) {
        return arguments;
    }
    const v78 = f75(f72, a73, a73, a74);
    const o79 = {
        ...v78,
    };
    return o79;
}
f72();
f72(-1000000000.0, C71);
