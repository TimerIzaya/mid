function f0() {
}
function f1() {
    return f0;
}
function f2(a3) {
    const o7 = {
        "execution": "sync",
        "type": "major",
    };
    gc(o7);
}
Object.defineProperty(f0, "toString", { writable: true, enumerable: true, get: f1, set: f2 });
const v9 = [14,3,-1877742083,-2,9];
Object.defineProperty(v9, "toString", { configurable: true, value: f1 });
[268435441,1000,1024,9007199254740991,9007199254740990,6];
const v11 = [53964,2069530343];
v11[1] = v11;
class C15 extends f0 {
    static #p(a17, a18, a19) {
        function f20(a21) {
            return a17;
        }
        class C22 extends f20 {
            static f = -3.0;
            g = f20;
            static #d = f20;
        }
        return a18;
    }
    static [v9] = 2.0;
    static b;
    [-3.0];
}
try { new C15(); } catch (e) {}
const v24 = new C15();
function f25() {
    function f26() {
        return f26;
    }
    const o29 = {
        "type": "function",
    };
    new Worker(f26, o29);
    return C15;
}
v24.toString = f25;
const v31 = v24?.__defineSetter__;
try { new v31(2.0, v11); } catch (e) {}
const v33 = new C15();
const v34 = v33?.__defineSetter__;
try { new v34(v9, v33); } catch (e) {}
new C15(-3.0, v11, v33);
[-2.0,-0.635440237673599,1e-15,5.0];
[-4.0,-7.388569013205625e+307];
[643085.9448496967,4.0];
const v42 = String?.constructor;
try { new v42(f0); } catch (e) {}
const v44 = new String();
function f45() {
    try {
        C15.fuck("by7F", "by7F", "by7F", "by7F");
    } catch(e48) {
    }
    return f0;
}
v44.toString = f45;
try { v44.split(NaN, v24); } catch (e) {}
for (let v50 = 0; v50 < 25; v50++) {
}
Float32Array in v44;
