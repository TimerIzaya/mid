new Uint32Array(4);
Uint16Array.length;
const v6 = new Uint16Array(16);
v6[1];
3856 | 3856;
Object.defineProperty(Int16Array, 16, { configurable: true, enumerable: true, value: 512n ^ 512n });
Math.sinh(0);
const v17 = new BigUint64Array(3856);
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(); } catch (e) {}
    a21 ^ a21;
    try {
        this.h = 4;
    } catch(e25) {
    }
    try {
        this.d = a21;
    } catch(e26) {
    }
    try {
        this.c = a21;
    } catch(e27) {
    }
    const v30 = new Float64Array();
    ("with").lastIndexOf(v30);
    function f32() {
        gc();
        return Int8Array;
    }
}
new F18(3856, 16, 3856);
new F18(3856, 3856, 16);
const v38 = new F18(4, 3856, v17);
v38.h;
const v43 = [257,257,257,55852,2];
function f44(a45) {
    function f47(a48) {
        v43["entries"]();
    }
    this.onmessage = f47;
    return f47;
}
let v54 = new Infinity(1024);
const v56 = v17.constructor;
try { new v56(); } catch (e) {}
([NaN,52.65298068517177,-4.0])["includes"](-6, -9223372036854775807);
new Infinity(628786973);
v54 %= v54;
