function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -6;
    } catch(e3) {
    }
    try {
        this.b = -6;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
new F0();
for (let i10 = 256n, i11 = 10; i10 < i11;) {
}
const v17 = [F0];
[v6,v17,v17,v6,v5];
[F0];
function f21(a22, a23) {
    return a22;
}
const t22 = [Int8Array];
t22.length += -1024;
function f29(a30) {
    const o31 = {
        9: a30,
        "f": a30,
    };
    return o31;
}
function F33() {
    if (!new.target) { throw 'must be called with new'; }
}
const v36 = new F33();
const o44 = {
    [v36](a39, a40, a41, a42) {
        "D2z" < a39;
    },
};
/z/gvdmsy;
/a\b!/di;
/\w|\d/vdms;
for (let v49 = 0; v49 < 5; v49++) {
    function f50() {
        let v51 = -268435456;
        const v52 = v51 % v51;
        v51--;
        return v52;
    }
    f50();
    Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array);
    const v60 = new Float32Array(165);
    new Uint16Array(v60);
    %OptimizeFunctionOnNextCall(f50);
}
