const v1 = new Map();
function f6() {
    const v8 = ([f6]).constructor;
    try { new v8(42836n); } catch (e) {}
    class C10 extends f6 {
    }
    new C10();
    const v12 = v1.fill();
    try { v12.map(); } catch (e) {}
    return f6;
}
const v14 = f6();
let v17 = 129;
v17--;
new Int16Array(v17);
new Float64Array(3849);
function f26(a27, a28, a29, a30) {
    const v31 = ++f26;
    const v32 = v31 >>> v31;
    v31 * v31;
    const v34 = a28--;
    const o35 = {
    };
    const v36 = o35[2];
    try { v36.hasOwnProperty(v34); } catch (e) {}
    return v32;
}
try { f26(f6, f6, Int16Array, Int16Array); } catch (e) {}
const v39 = new Uint32Array(f26);
v39[200];
const v43 = new Float32Array(Float32Array, Float32Array, Float32Array);
v43[2] = v43;
new f6();
let v47;
try { v47 = ("-9007199254740990").toWellFormed(); } catch (e) {}
const o51 = {
    get a() {
        eval("-9007199254740990");
        return 6;
    },
};
const v52 = o51?.__defineSetter__;
let v53;
try { v53 = new v52(Float32Array, v17); } catch (e) {}
const v56 = new BigInt64Array(10);
try { v56.reduce(o51); } catch (e) {}
function f58() {
    return f58;
}
class C59 extends f58 {
    constructor(a61, a62, a63, a64) {
        new Float32Array();
        Math.pow(-2.220446049250313e-16, 9906);
        const v72 = [a62];
        Reflect.apply(v43.toLocaleString, v56, v72);
        return f6;
        Float32Array.bind();
        class C77 {
        }
        [C77,C77];
    }
}
try {
    const v79 = f58("-9007199254740990", "-9007199254740990");
    class C81 extends v14 {
        [v17];
    }
    [v79];
    try {
        const v85 = new BigUint64Array(4);
        try { v53.slice(Float64Array, BigUint64Array); } catch (e) {}
        const v87 = [v85];
        try { v87.find(536870887); } catch (e) {}
    } catch(e89) {
    }
    new C59(Int8Array, v47);
} catch(e91) {
}
