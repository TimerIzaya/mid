[-1024];
const v1 = [-9007199254740992,12708,2147483648,42345,-1024];
[2147483649,-7,-20856,512,16,2108446516,-9,-265449880,-9007199254740990,-4];
const o9 = {
    ["8"](a7, a8) {
    },
};
const o18 = {
    get a() {
        eval("-9007199254740990");
        return 6;
    },
};
new Int32Array(175);
function f21() {
    ("number").slice();
    return f21;
}
f21();
%OptimizeFunctionOnNextCall(f21);
new v1(209);
const v29 = new f21(0);
class C33 {
    static #a;
    static n(a35, a36) {
        const v37 = super.d;
        new BigUint64Array();
        new Int16Array(7);
        try { v37(); } catch (e) {}
        return a35;
    }
    [1];
    static [v29] = 255;
    [255];
    f = -65536;
}
const v44 = new C33();
new C33();
const v46 = new C33();
function F47(a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    try { new v52(this, F47, a51); } catch (e) {}
    a49.c = a49;
    const v54 = a51?.constructor;
    try { new v54(); } catch (e) {}
    this.b = a51;
}
let v57 = -65536n;
let v59;
try { v59 = v44.m(10000n, 10000n, 10000n, 1); } catch (e) {}
function f60(a61, a62, a63) {
    let v64;
    try { v64 = v59(a62); } catch (e) {}
    v64 = a63;
    v57 >>= a61;
    v44[10] = 1n;
    return v46.f;
}
const v67 = new BigUint64Array();
try { v67.toLocaleLowerCase(o9, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
try { ("NFKD").localeCompare(o9); } catch (e) {}
f60(255, 255, 1n);
