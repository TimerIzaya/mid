new Uint8Array(248);
const v5 = new Uint8Array(0);
const v8 = new BigInt64Array(1000);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    new Int32Array(2129);
    new Uint32Array(3);
    new Uint16Array(151);
    try {
        this.b = a13;
    } catch(e24) {
    }
    try {
        this.c = Uint8Array;
    } catch(e25) {
    }
    try {
        this.g = a14;
    } catch(e26) {
    }
}
new F9(1000, 1000, 248, 1000);
function f31(a32, a33, a34, a35) {
    function f36() {
        return a34;
    }
    let v37 = f36.bind(a34, f31, a33, f31);
    v37 ^= Uint8Array;
    arguments & a32;
    try {
        v8.buffer = a35;
    } catch(e40) {
    }
    v37.e = v37;
    return a34;
}
new f31(0, v5, 0, 0);
const o44 = {
    "maxByteLength": 151,
};
const v46 = new SharedArrayBuffer(151, o44);
new BigInt64Array(v46);
for (let v49 = 0; v49 < 10; v49++) {
    f31();
}
class C52 {
}
function f54() {
    return f54;
}
class C55 extends f54 {
}
class C56 extends C55 {
}
function f59(a60, a61, a62, a63) {
    try { a60(); } catch (e) {}
    a61 & a61;
    const v66 = 3 | C56;
    v66 * v66;
    const v68 = a60 / a60;
    const v69 = a61 < a61;
    const o73 = {
        n(a71, a72) {
            return v69;
        },
    };
    return v68;
}
for (let v74 = 0; v74 < 500; v74++) {
    f59(Uint8Array);
}
const v76 = [536870887,-60324,23228695,26098,13,2];
class C77 {
}
const o80 = {
    "maxByteLength": 671,
};
const v82 = new SharedArrayBuffer(671, o80);
new Float64Array(v82);
const v85 = new C77();
v85.isPrototypeOf(v76);
let v89 = undefined;
const o90 = {
};
v89 = o90;
new F9(1000, 0, 0, 248);
new F9(248, 1000, 248, 0);
Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
