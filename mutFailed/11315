[567.8120644686305,9.332905726294087e+307,-0.0,481.53138203617095,-1.403751931676323e+307,2.2250738585072014e-308,2.0,267.4629357865151];
[-1000.0,4.0,3.0,-61871.6474951884,-9.000633678066785,Infinity,0.0,1e-15,1000000000000.0];
const v5 = [-354507.7100208225,-9.439766909322502e+307,3.0,0.40636159501459646,-1.7976931348623157e+308,677356.3622511954,-2.2250738585072014e-308,1000000000.0,2.2250738585072014e-308,1.1904417478017845e+308];
for (const v10 in Array(176726687)) {
}
const o12 = {
    __proto__: v5,
    "h": Array,
    128: 13n,
};
const v13 = new BigInt64Array(10);
try { v13.set(4754n); } catch (e) {}
function f15() {
    ("cJ")[1];
    const o24 = {
        "d": 268435440,
        "a": 4.0,
        __proto__: "cJ",
        "f": "cJ",
        ..."cJ",
        8: f15,
        "g": 268435440,
        "e": f15,
        "h": "cJ",
        valueOf(a21) {
            const o22 = {
                __proto__: this,
                2261555780: "cJ",
            };
            super.a;
            return this;
        },
        "c": "cJ",
    };
}
f15();
const v27 = [-20096,4294967296,-65537,-2];
try { v27.with(f15, Array); } catch (e) {}
const v29 = [-1947047520];
try { v29.toString(); } catch (e) {}
const v31 = [v29,v29,v29,v27];
try { v31.sort(176726687); } catch (e) {}
const v33 = [v31];
try { v33.toLocaleString(); } catch (e) {}
const v36 = v27["slice"](v33);
const v38 = new Int8Array(2750);
const v40 = new f15();
try { v40.constructor(); } catch (e) {}
new Array(10);
try { Math.sin(Math); } catch (e) {}
-16 != -16;
2 * 2;
const v50 = 2 / v36;
Math.tanh(2);
-16 << v50;
new BigInt64Array(2);
const v55 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v56 = 0; v56 < 5; v56++) {
    function f57() {
        try {
            v55.forEach();
        } catch(e59) {
            const v61 = e59.constructor().constructor;
            try { v61.apply(v56, v38); } catch (e) {}
            let v63 = v61.stackTraceLimit;
            v63--;
            for (let v65 = 0; v65 < 5; v65++) {
                try { Math.expm1(Math); } catch (e) {}
                let v69 = -2147483649 * v65;
                v69 >>> v69;
                ++v69;
                Math.tan(v69);
            }
        }
        return v56;
    }
    const v73 = (-3.5803594842793937e+307).call();
    v73 + v73;
    %OptimizeFunctionOnNextCall(f57);
}
