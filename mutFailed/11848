let v0 = [-1.0,-257.4300723222036,0.3352251494801649];
function f1(a2) {
    a2.a >>= a2;
    ({"a":v0,"e":v0,} = a2);
    return a2;
}
v0[Symbol.toPrimitive] = f1;
const v5 = [-479866.03331195645,-1000000.0,1000000000000.0,112.92439341674276,0.6652332491643822,1000.0,-2.2250738585072014e-308];
const v6 = [346823.08568278025,-11.208454072710197,4.498540472671265e+306,2.427085815843439];
const v7 = [v6,v6,v5,v6,v0];
const v8 = [v0,v6];
[v8,v6];
class C10 {
    static {
        const v13 = Symbol.iterator;
        const o28 = {
            [v13]() {
                let v15 = 10;
                const o27 = {
                    next() {
                        v15--;
                        const v19 = v15 == 0;
                        const o20 = {
                            "done": v19,
                            "value": v15,
                        };
                        return o20;
                    },
                    set h(a22) {
                        super.d;
                    },
                };
                return o27;
            },
        };
    }
}
new C10();
const v30 = new C10();
new C10();
v6[Symbol.iterator] = C10;
[1.5799464201291037e+308,-1000000000.0];
[-1000.0,-1.0];
const v36 = [-1000.0];
v36.valueOf = Symbol;
class C37 {
    static #c;
    static {
        const v40 = Symbol.isConcatSpreadable;
        v5[v40] = v40;
        v8[0] = this;
        try { v40.setMonth(this, v40, v30, v7, v5); } catch (e) {}
    }
    static set d(a44) {
        for (const v45 of v8) {
        }
        try {
            v0.#c;
        } catch(e48) {
        }
    }
}
new C37();
new C37();
new BigUint64Array(239);
new Float64Array(64);
const v59 = new BigInt64Array(2481);
new C37();
Symbol(8n);
v36[233] %= 2481;
let v67 = v59[v0];
v67 = 2481;
let v72 = -(1320802372 >>> v36);
const v73 = (-1670546382) ** 1320802372;
-1670546382 & v72;
++v72;
Math.log1p(v73);
const o86 = {
    get g() {
        return this;
    },
    set g(a85) {
    },
};
