function F0() {
    if (!new.target) { throw 'must be called with new'; }
    class C3 {
    }
    const v4 = new C3();
    const v5 = v4?.constructor;
    try { new v5(); } catch (e) {}
    const v7 = [v4,v4,v4,v4,v4];
    class C8 {
    }
    new C8();
    class C11 extends BigInt64Array {
    }
    class C12 extends C3 {
        static #o(a14, a15) {
        }
        constructor(a17, a18, a19, a20) {
            let v21 = 0;
            do {
                let v23 = 30918;
                const v24 = v23--;
                let v25 = v7 ^ v7;
                Math.random();
                Math.exp(v7);
                v24 >> v7;
                Math.ceil(v24);
                ++v25;
                v21++;
            } while (v21 < 2)
        }
        [v4];
    }
    const v34 = new C12();
    const v35 = v34?.constructor;
    try { new v35(); } catch (e) {}
    try { v34.m(v7); } catch (e) {}
    try {
        this.c = 9;
    } catch(e38) {
    }
    const v40 = new Int8Array();
    function f42(a43, a44, a45, a46) {
        v40.c = a44;
        return 248;
    }
    try {
        const o50 = {
            [null]() {
                super.b;
            },
            "f": null,
        };
        try { o50.null(); } catch (e) {}
        this.f = 9;
    } catch(e52) {
        eval();
        function f55(a56) {
            return -9007199254740991;
        }
    }
    try {
        this.b = 9;
        const v59 = ReferenceError(ReferenceError);
        v59.stack = v59;
        Math.log1p(2.220446049250313e-16);
    } catch(e63) {
    }
    const v64 = [-1000.0,1000000000.0];
    const v65 = [0.0,-605.6883350474525,-2.2250738585072014e-308,2.8064173070154015e+307,-0.0,NaN,-1.7976931348623157e+308,-1.7976931348623157e+308,1.1567619127528594,2.2250738585072014e-308];
    function f69(a70, a71) {
        const o72 = {
            [33062n]: 8n,
            __proto__: v65,
            [37369]: a71,
            [a70]: a70,
            ...a70,
            5: v64,
            ...v64,
        };
        return o72;
    }
    f69.arguments = f69;
}
const v73 = new F0();
const v74 = new F0();
const v75 = new F0();
const v76 = [v73,v73,F0];
[v76,v75,F0];
[v75];
-(-13);
const v83 = v74?.constructor;
const t87 = "h";
t87[0] = "h";
const v85 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
const v86 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
class C87 {
    constructor(a89, a90) {
        super[v86] = v85;
    }
}
new C87(v85, v86);
("h").split()[0];
-11 + -11;
const v96 = -11 || v76;
[255];
const v98 = [15946,8238,-1024,-268435456,268435439,4294967295,-60061,1026983827,1,-16];
try { v98.reduceRight(v83); } catch (e) {}
const v100 = [40387,65536,9223372036854775807,-9007199254740991,665693237,-2,11,-2147483648];
const v101 = [-9007199254740991,536870888,52691,-1,-128,-196204265,0];
try { v101.lastIndexOf(v96); } catch (e) {}
function F104(a106, a107, a108, a109) {
    if (!new.target) { throw 'must be called with new'; }
    const v110 = this.constructor;
    try { new v110(); } catch (e) {}
    typeof Float32Array;
}
new Uint32Array(v100);
class C115 {
}
try { C115.toString(); } catch (e) {}
new C115();
function F118(a120, a121, a122, a123) {
    if (!new.target) { throw 'must be called with new'; }
}
const v124 = new F118(F118, F118, F118, F118);
const v125 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v125[1] = v125;
class C126 {
}
const v128 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v129 = [601759695];
function f131(a132, a133, a134, a135) {
    a135 & a135;
    function f137() {
        try {
            v125.forEach(a133);
        } catch(e141) {
        }
        const v142 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v144 = Symbol.toPrimitive;
        Symbol.for(v144.description);
        const o152 = {
            toString(a148, a149) {
                const v150 = a135 && a133;
                a148 *= v144;
                return v150 <= v142;
            },
        };
        const o172 = {
            "c": -4294967297n,
            [522675525n](a155, a156) {
            },
            "c": v129,
            valueOf(a158, a159) {
                return -4294967295;
            },
            [-4294967297n](a161, a162, a163, a164) {
            },
            "maxByteLength": -4294967295,
            "arguments": v128,
            ...v124,
            "type": C126,
            ..."Vre",
            valueOf(a166, a167) {
                return this;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            toString(a169, a170, a171) {
                return v142;
            },
            5: -4294967295,
            6: -268435456,
        };
        o172[5] = o172;
    }
    f137();
    %OptimizeFunctionOnNextCall(f137);
    return f137;
}
for (let v174 = 0; v174 < 10; v174++) {
    f131(v174, v128, v125, v174);
}
Symbol.prototype = Symbol;
Symbol.toPrimitive;
