function f0() {
}
function f1() {
    const o39 = {
        set d(a3) {
            let v4 = 0;
            delete a3?.c;
            const v9 = new Int16Array(Int16Array, Int16Array, Int16Array);
            const v11 = v9["subarray"]();
            function f12() {
                return v11;
            }
            new Int8Array(257);
            class C15 {
            }
            new C15();
            function F17(a19, a20) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    class C22 extends [this,this,this,this,this] {
                    }
                } catch(e23) {
                }
            }
            new Uint32Array(9);
            new Uint8ClampedArray(3502);
            do {
                ~(-512);
                Math.sqrt(a3);
                v4++;
            } while (v4 < 2)
        },
    };
    return o39;
}
const v40 = f1();
f1();
const v42 = f1();
const v44 = v40 != v42 ? v40 : v42;
for (let v45 = 0; v45 < 32; v45++) {
    v44["p" + v45] = v45;
}
class C51 {
    toString(a53, a54, a55) {
        a55.d;
        [1073741825,-43802,-1506422079,-564204086,-536870912];
        [-65536,-65535,285661318,-1];
        [536870889,-6,9007199254740992,5,64,-9007199254740992,35698,268435440,-1032534015,2147483648];
        return -1032349407n;
    }
    d;
    #c;
    static 1819 = v42;
    static #d = f1;
}
new C51();
new C51();
new C51();
class C63 {
}
const v64 = new C63();
let v65 = 591114.0785999324;
v65++;
const v67 = [v65,v65];
function F69() {
    if (!new.target) { throw 'must be called with new'; }
    let v71;
    try { v71 = this.toString(this, F69, F69, this); } catch (e) {}
    const v72 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    try { Date.toString(F69, 9223372036854775807); } catch (e) {}
    Date(v65);
    typeof v71 === "boolean";
    f1();
    %PrepareFunctionForOptimization(f1);
    function f83() {
        const t75 = [];
        t75[6] = 4294967295;
        new Int32Array();
        const o98 = {
            get b() {
                return Int32Array;
            },
            "c": f83,
            toString(a91, a92, a93) {
                return this;
            },
            4294967295: Uint8ClampedArray,
            m(a95) {
                return 4294967295;
            },
            "h": 9007199254740991,
            ...1.0,
            set b(a97) {
            },
        };
    }
    %OptimizeFunctionOnNextCall(f83);
    f1();
    function f100() {
        gc();
        return Int8Array;
    }
    f1();
    %OptimizeFunctionOnNextCall(f1);
    f1();
    Uint32Array[0] = Uint32Array;
    let v108;
    try { v108 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    const t109 = /QK/gvdimy;
    t109.__proto__ = length;
    const v112 = new Int8Array(Int8Array);
    v112.buffer;
    const v114 = new Uint32Array(5);
    try { v114.reduce(Date); } catch (e) {}
    const v118 = new Set(v67);
    const v119 = v118?.add;
    try { new v119(v108); } catch (e) {}
    let v122;
    try { v122 = ("delete").blink(4); } catch (e) {}
    v122[4] = v122;
    const v123 = v118["delete"](839612.5677247904);
    new Uint32Array(2684, 2684, 2684);
    new Int16Array(4);
    v123 || v123;
    const v131 = 839612.5677247904 || v123;
    const v132 = v131 && v131;
    const o134 = {
    };
    o134.b = v72;
    o134.b = o134;
    o134.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    let v138;
    try { v138 = ("getPrototypeOf").blink(); } catch (e) {}
    let v139;
    try { v139 = v138.strike(v65); } catch (e) {}
    class C141 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C142 extends C141 {
        ["getPrototypeOf"] = C141;
    }
    C142.e = v114;
    try { new C142(); } catch (e) {}
    C142.e = C142;
    const v144 = new C142();
    function f145(a146) {
        new Date(-4.0);
        return C142;
    }
    v144.constructor = f145;
    const v150 = v144?.getPrototypeOf;
    try { new v150(); } catch (e) {}
    v144.constructor;
    try { new v64(F69, v132); } catch (e) {}
    const v154 = Array(19793);
    for (const v155 of v154) {
    }
    const v156 = [v154,v154,v154,v154,v154];
    let v157;
    try { v157 = v156.includes(839612.5677247904); } catch (e) {}
    v157 && v157;
    BigUint64Array.e = BigUint64Array;
    try { v139.reduceRight(v67); } catch (e) {}
    for (let v161 = 0; v161 < 5; v161++) {
    }
}
new F69();
new F69();
