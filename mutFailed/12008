function f5() {
    function f6() {
        for (const v10 of Array(4087)) {
        }
        return 4087;
    }
    f6();
    return -3.2247449234850395e+307;
}
BigUint64Array.toString = f5;
const v12 = new BigUint64Array(4096);
v12.constructor = f5;
let v13;
try { v13 = v12.slice(BigUint64Array, v12); } catch (e) {}
new Float64Array(89);
function f19(a20) {
    a20 <= a20 ? a20 : a20;
    return a20;
}
Object.defineProperty(Float64Array, Symbol.toPrimitive, { configurable: true, value: f19 });
const v25 = new Float64Array(3272);
const v26 = [Float64Array,v25,v25,v25];
const v27 = [v26,BigUint64Array,v26];
function f28(a29) {
    const v31 = new Date();
    return [v31];
}
v27[Symbol.toPrimitive] = f28;
[3272,Float64Array,89];
const v37 = new Map();
-2 / -2;
let v42 = -1000000000000.0;
v42++;
591114.0785999324 != 591114.0785999324;
let v47 = undefined;
const o55 = {
    ...v37,
    ...v37,
    __proto__: v37,
    [24560](a49, a50, a51) {
        super[591114.0785999324];
        v47 = Map;
    },
};
v47 = o55;
[v37];
function F58() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = this;
    const v60 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    v60[6] = v60;
    const v63 = new Date();
    const v64 = v63?.setFullYear;
    let v65;
    try { v65 = new v64(v12, v13, this); } catch (e) {}
    const o67 = {
    };
    o67.h = o67;
    o67.e = 9223372036854775807;
    Array.prototype = Array;
    const v69 = Array(v65);
    try { v69.push(v25); } catch (e) {}
    for (const v71 of v69) {
    }
    const v72 = [v69,v69,v27,v69,v69];
    v72[Symbol.toPrimitive] = Symbol;
    BigUint64Array.toString = Array;
    const v76 = new BigUint64Array();
    256 << 256;
    [];
    for (let v80 = 0; v80 < 50; v80++) {
    }
    const v81 = [v72,v72,v72];
    try { v81.slice(v76, v69); } catch (e) {}
    const v83 = [v81];
    Object.defineProperty(v83, "toString", { writable: true, configurable: true, enumerable: true, value: f19 });
    function f85() {
        function f86(a87) {
            const o89 = {
                "maxByteLength": 1293466293,
            };
            return -2147483647;
        }
        return f86;
    }
    function f90(a91) {
        function f92() {
            let v93 = -268435456;
            const v94 = v93 % v93;
            v93--;
            return v94;
        }
    }
    Object.defineProperty(Uint16Array, "valueOf", { enumerable: true, get: f85, set: f90 });
    v83 >= Uint16Array;
}
new F58();
const v98 = new F58();
v98.d = v98;
