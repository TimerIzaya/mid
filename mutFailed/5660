new Int8Array(379);
const v5 = new Uint8Array(127);
new Uint32Array(1994);
class C9 {
    f;
    static get d() {
        function f11() {
            class C12 {
            }
            new C12();
            new Int8Array();
            return Uint32Array;
        }
        new Float64Array([-65536,-432658450,256]);
        function F19(a21) {
            if (!new.target) { throw 'must be called with new'; }
            const v22 = this.constructor;
            try { new v22(a21); } catch (e) {}
            class C25 {
                [10000] = 10000;
                static toString(a27) {
                }
            }
            new C25();
            try {
                257 % 257;
            } catch(e31) {
            }
        }
        try {
            v5.valueOf = f11;
        } catch(e32) {
        }
        return Uint32Array;
    }
    static valueOf(a34, a35) {
        super[127] = 127;
    }
    toString(a37, a38) {
        -this;
    }
    [Uint32Array] = C9;
    static f = 127;
}
C9.constructor;
([]).length;
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    this * a46;
    const v48 = this.constructor;
    2 >= 2;
    try { new v48(this); } catch (e) {}
}
new C9();
const v53 = new F43();
new v53();
try { BigInt64Array(BigInt64Array); } catch (e) {}
