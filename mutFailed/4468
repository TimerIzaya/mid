function f2() {
}
Reflect.construct(BigUint64Array, [], Float32Array);
("async").lastIndexOf();
const v12 = new Int16Array(195);
Math.expm1(195, Math, v12);
Math.tan(-11);
const v17 = [-256,13351,5138,2,-4294967295,1000,268435440];
class C18 {
    constructor(a20, a21) {
        for (const v22 in this) {
        }
        Math.atan2(v17, 195);
    }
}
class C26 {
    toString(a28) {
        this[Symbol.species];
        class C32 {
            static {
                this < this;
            }
        }
        function F38(a40, a41) {
            if (!new.target) { throw 'must be called with new'; }
            function f42() {
                try { a41.localeCompare(this); } catch (e) {}
            }
            Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f2 });
        }
        const v47 = new F38(F38, F38);
        class C48 {
            static [v47];
        }
        return 129;
    }
    [-11] = -176586986;
    static #h = -11;
}
new C26();
class C51 {
    #d = 4096;
    static {
        try {
            this.#d;
        } catch(e54) {
        }
    }
}
new C26();
new C26();
class C60 {
    static ["a"];
    static #valueOf(a62, a63) {
        536870912n << 536870912n;
        Math.hypot([256,54026]);
        const o72 = {
            "execution": "sync",
            "type": "a",
        };
        gc(o72);
        function f76(a77) {
            const v81 = 1073741824 ** 5;
            Math.clz32(2089625166);
            2089625166 >> v81;
        }
        this.onmessage = f76;
        return a63;
    }
}
new C60();
new C60();
new C60();
const v91 = new Map();
function f92(a93) {
    const o100 = {
        __proto__: v91,
        "f": v91,
        ...v91,
        [v91]: -6n,
        [-6n](a95, a96, a97, a98) {
            delete v91?.size;
        },
    };
    return a93;
}
const v101 = f92(v91);
const v102 = f92(52504n);
const v103 = [v102,v17];
const v105 = new WeakSet();
function f106(a107) {
    const o111 = {
        "g": v105,
        "h": a107,
        __proto__: a107,
        "a": v105,
        "f": WeakSet,
        m(a109, a110) {
            return a109;
        },
    };
    return o111;
}
try { v102.m(v101, Map); } catch (e) {}
let v114 = -2.220446049250313e-16;
++v114;
const v116 = [];
try {
    v103.d = v116;
} catch(e117) {
}
Math.sin(v102);
~v101;
