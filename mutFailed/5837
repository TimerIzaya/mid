[-1624472321,64,9007199254740991];
[-61536,-4096,-27052,536870889,-4,-2147483649,-346335554];
class C2 {
    #n() {
    }
}
([1.479450712344466]).join();
[-1552608645,-9007199254740992,-9];
class C7 {
    static #p(a9) {
        this.#p();
    }
}
parseInt([-5.034735835956977e+307,-385.25474675985527]);
const v20 = new BigUint64Array();
v20.lastIndexOf();
("number").repeat(901460568);
const v27 = [Float64Array];
for (let v28 = 0; v28 < 5; v28++) {
    v27.length = 2;
}
[,,,,,];
const t21 = [155533.8602852358,2.0];
t21[658291203] = null;
function f33() {
    return 127;
}
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    a39 >>> a39;
    try {
        a39 *= this;
        const v41 = 901460568 in this;
        const v44 = 0 <= 0;
        const v46 = new Int8Array(0);
        for (const v48 in v46) {
            0 ^ v44;
            Object.defineProperty(this, this, { writable: true, configurable: true, enumerable: true, value: v41 });
            this[129] = v48;
        }
        new BigUint64Array(10);
        128 !== 128;
    } catch(e55) {
    }
}
const v56 = [-292.83735349768153,1000000.0,-Infinity];
new gc();
const o63 = {
    [-206.79565552697056]: 352693014,
    get g() {
    },
    "g": -206.79565552697056,
};
class C65 extends Uint8Array {
    constructor(a67, a68) {
        Symbol.toPrimitive;
        const v74 = new Int8Array(9);
        v74.indexOf(-9);
        const v77 = new Date();
        const v79 = new BigUint64Array();
        v79[v77] = v77;
        a67[1] = Float64Array;
        super(a67);
    }
}
new C65(v56);
