class C3 {
    get h() {
        return this;
    }
    static #p(a7) {
        if (a7) {
            try {
                super.toString(a7, a7, this);
            } catch(e9) {
            }
        } else {
        }
        return this;
    }
}
new C3();
const v14 = new C3();
const v15 = new C3();
class C16 extends C3 {
    constructor(a18, a19, a20) {
        super();
        const o24 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o24);
    }
}
const v26 = new C16(v15, v15, C3);
const v27 = new v14("b", v26, C3);
new C16(C3, v15, v15);
const v29 = [-128,-204399241,1126169676,-39466,-37076,268435456,9223372036854775807,536870888,15798,-1632967117];
const o32 = {
    get c() {
        return v29;
    },
    get d() {
        return v29;
    },
};
/5*/gi;
const v35 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v36 = [601759695];
const v37 = [1073741824,1073741823,1376142744,1073741825];
function f39(a40, a41, a42, a43) {
    function f45() {
        const o62 = {
            "c": -4294967297n,
            [522675525n](a50, a51) {
            },
            "c": v36,
            valueOf(a53, a54) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v35,
            ...v36,
            "type": "Vre",
            ..."Vre",
            valueOf(a56, a57) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": a43,
            toString(a59, a60, a61) {
                return a42;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f45();
    new Int8Array();
    v27.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f45);
    let v70;
    try { v70 = v37["find"](..."find", a43, ...v36, ...v37, ...522675525n); } catch (e) {}
    v70 <= a42;
    return arguments;
}
const v74 = new BigInt64Array();
const v78 = new BigUint64Array();
for (let v79 = 0; v79 < 10; v79++) {
    f39(v36, v79, false);
}
%OptimizeFunctionOnNextCall(f39);
f39(v78, 3331, v74, 3216);
