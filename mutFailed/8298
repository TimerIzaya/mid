let v0 = 14235n;
const v5 = new Int8Array(127);
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
v5[65536];
v0 = -13n;
v5["toReversed"]();
-13n * v5;
const v12 = new Uint16Array(3720);
~64;
new Uint32Array(64);
202 + 202;
const v20 = new Uint8ClampedArray(202);
v20[140] = v20;
new BigUint64Array(2864);
210 >> 210;
try { new BigUint64Array(210, Uint32Array, Uint32Array); } catch (e) {}
new BigUint64Array(210);
Set.name = Set;
const v30 = new Set();
try { v30.add(64); } catch (e) {}
const v34 = new Uint16Array(116);
v34[98] = v34;
Int16Array.name = Int16Array;
const v37 = new Int16Array(512);
try { v37.slice(Uint32Array, v37); } catch (e) {}
const v41 = new Int32Array(9);
try { v41.findIndex(116); } catch (e) {}
class C46 {
}
C46.length;
function F48(a50, a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
}
const v54 = new F48();
const v55 = new F48(v54, F48, F48, v54);
try { v55.valueOf(); } catch (e) {}
const v57 = [7,128];
const v58 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v59 = v58[4];
v59 % v59;
v59 | v59;
const v62 = [40213,422333454,47387,65536,-51830];
v62[2] = v62;
0 - 0;
8 - 8;
gc.prototype;
try { gc(); } catch (e) {}
gc();
const v74 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
1 >> 1;
v74.length = 1;
const v77 = /xyz{1,32}?/gusy;
class C78 {
    268435440 = v77;
}
try { C78.bind(v12); } catch (e) {}
new BigInt64Array();
let v83;
try { v83 = ("boolean").repeat(1000000.0); } catch (e) {}
const t59 = "toString";
t59[6] = "toString";
"toString" == "toString";
let [,...v87] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
try { v87.values(); } catch (e) {}
function f89() {
    const o93 = {
        ...1.0,
        set b(a92) {
        },
    };
    return o93;
}
f89();
("boolean").split("toString");
-256 & -256;
const v98 = 8 < "boolean";
v98 && v98;
const v101 = new Uint8ClampedArray();
try { v101.lastIndexOf(v83); } catch (e) {}
try { v101.reduceRight(v101); } catch (e) {}
let v105 = ("I").localeCompare();
v105--;
const v107 = -256 >> -256;
v107 - v107;
function f109(a110, a111) {
    const v112 = a111++;
    a111--;
    const v116 = new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
    try { v116.toSorted(v83); } catch (e) {}
    class C118 {
        a = 2864;
        [1] = 1000000.0;
        static ["I"] = v112;
        d;
        2147483647;
        static {
            this < this;
        }
    }
    C118.length = C118;
    a110 | a110;
    const o162 = {
        "c": 15135,
        "a": 15135,
        "d": a110,
        __proto__: a111,
        "g": -1628878962,
        "type": "boolean",
        "a": a110,
        set b(a123) {
        },
        "g": 15135,
        "b": a111,
        get f() {
            super[1000000.0] = this;
            Math.exp(-359.60295377780096);
            const v128 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
            [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v128,v128]];
            try {
                new Int8Array(9);
                function f135() {
                    return f135;
                }
                new Uint16Array();
                !0.8843420658768774;
                function F139() {
                    if (!new.target) { throw 'must be called with new'; }
                    let v141 = 0;
                    while (v141 < 0) {
                        v20.length;
                        v141++;
                    }
                }
                const v147 = new F139();
                const o155 = {
                    [v147](a150, a151, a152, a153) {
                        "D2z" < a150;
                    },
                };
                const o157 = {
                    [f135]() {
                    },
                };
                [o157];
                v58.copyWithin(8, -268435456, -256);
            } catch(e161) {
            }
            return this;
        },
    };
    o162.f = o162;
    o162.g = o162;
    return o162;
}
let v163;
try { v163 = f109(15135, 15135); } catch (e) {}
v163[1000000];
f109(925.1427495594241, v57);
f109(317008.8127941969, -4);
const v167 = f109(1000000.0, v58);
v167.f = v167;
268435441n ^ 268435441n;
268435441n - 268435441n;
const v172 = new BigUint64Array();
const v173 = v172?.keys;
try { new v173(); } catch (e) {}
v172[2445191368] = 268435441n;
