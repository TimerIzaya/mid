const v0 = [NaN,4.0,2.0,-1000.0,-9.229677881010065e+307];
const v1 = [2.0,0.6125571451601017];
const v2 = [-1000.0,0.5396175330087792,9.801555132021105e+307,717.2606818594672,-1.6614317621681352,2.250230816388831e+307,579849.5384092885];
const v3 = [-1000000.0,2.9314265325879045];
class C4 {
    [v2];
    static #c = v0;
    [v1];
}
const v5 = new C4();
const v6 = new C4();
const v7 = new C4();
const v8 = [560817.6456316521,5.0,-819.4319039495758,860.7476122440924,-1e-15,-888.7769886232229,4.199152563407969];
let v9;
try { v9 = v8.sort(v2); } catch (e) {}
[-602161.6343679546,-348929.36991687585,-1e-15];
11 >>> 11;
const v14 = new Float32Array(11);
-28;
const v18 = new Uint8ClampedArray(28);
const v21 = new Uint16Array(1741);
v14[v5] ^= 11;
let v23;
try { v23 = v3.filter(v9, v7); } catch (e) {}
v8[3] = v8;
v6[536870888];
const v26 = 1912778775 !== 1912778775;
const v28 = delete v3[v3];
v28 || v28;
v14[v3] = v28;
try { Math.expm1(v26); } catch (e) {}
Reflect.construct(Map, [v18], Uint8ClampedArray);
try { v23(); } catch (e) {}
v5[1741];
-(-1986989808);
-1986989808 / -1986989808;
const v40 = +-1986989808;
let v41 = -1986989808 | v40;
v41 - v41;
const v43 = Math.sqrt(v21);
v43 ^ v43;
const v45 = ++v41;
v45 !== v45;
Math.acosh(v40);
Number.isNaN(Math.log10(v40));
let v51 = v8 >>> v45;
v51++;
-(-1334391447);
function F55(a57) {
    if (!new.target) { throw 'must be called with new'; }
    -(a57++);
    this.h = a57;
}
const v60 = new F55(-2);
5 - 5;
let v64;
try { v64 = new Uint32Array(1912778775, 5, v43); } catch (e) {}
try { v64.slice(v41, Uint16Array); } catch (e) {}
let v68;
try { v68 = new Uint16Array(11, v41, Uint16Array); } catch (e) {}
try { v68.join(Math); } catch (e) {}
Int32Array.d = Int32Array;
with (v60) {
    h = Uint16Array;
}
