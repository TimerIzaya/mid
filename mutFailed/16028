[1.0,647867.2261514349,1.7976931348623157e+308];
const v4 = [1.591820794060685e+308,1.0,-0.0,1.6096052647937964e+308];
const v5 = [-5.0,1.278351716849708e+308,4.0];
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v13 = 0; v13 < 5; v13++) {
    }
    const v14 = this.constructor;
    const t7 = "9007199254740992";
    t7["255"] &= 7;
    const v20 = new a12(2);
    v20[1] = v20;
    try { new v14(); } catch (e) {}
}
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o26 = {
            ...a25,
            "b": v4,
            "a": v5,
        };
        this.g = a24;
    } catch(e27) {
        new Uint8Array(1829);
        const v31 = [];
        function f32() {
            return v31;
        }
        class C33 extends f32 {
        }
    }
    try {
        Object.defineProperty(Int8Array, "e", { configurable: true, enumerable: true, value: a25 });
        Int8Array.e = Int8Array;
        const v38 = new Float64Array(231);
        v38.fill();
        function f40() {
            return ("D")[0];
        }
        %PrepareFunctionForOptimization(f40);
        f40();
        %OptimizeFunctionOnNextCall(f40);
        f40();
        new Int8Array(3938);
        const v46 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        let v48;
        try { v48 = a24.codePointAt(v46); } catch (e) {}
        v48 - v48;
        v48.b = a25;
        try {
            const o53 = {
            };
            new Int8Array(o53);
        } catch(e55) {
        }
    } catch(e56) {
    }
    try {
        this.h = a24;
    } catch(e57) {
    }
}
const v58 = new F22(-2.2399742887717426, v4);
new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
536870912n << 536870912n;
let v63 = 2;
v63++;
new F22(-1n, v4);
new F22(F22, v4);
const v67 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
function f68(a69) {
    return v4;
    let v70;
    try { v70 = v58.isInteger(v63, F22, a69, a69); } catch (e) {}
    return v70;
}
v67[Symbol.toPrimitive] = f68;
for (let v73 = 0; v73 < 5; v73++) {
    function f75() {
        function f76(a77, a78) {
            return f75;
        }
        function f79(a80, a81) {
            a80?.[a80];
            const o83 = {
            };
            return o83;
        }
        f76.then = f79;
        const v85 = Promise.resolve(f76);
        new Promise(f76);
        v85.constructor;
        try { new f76(-30285); } catch (e) {}
        return v85;
    }
    f75();
    v67 | v73;
}
