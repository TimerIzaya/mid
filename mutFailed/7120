let v0 = -2n;
[0.027366262126847563,2.220446049250313e-16,-4.051281908837236e+307,-2.2250738585072014e-308];
const v7 = [1e-15,0.0,7.78404083690214,156048.09229129972,775.952724858824,213597.91409169487,-Infinity,2.0];
const v8 = [3.0,0.6262080401982161,879.6020987977249];
function f9() {
    return v8;
}
f9();
v7[248] ^= -26018n;
const t9 = -26018n;
t9[8] = v7;
v0 = -26018n;
try {
    new f9();
} catch(e12) {
}
new Int32Array(129);
const v18 = new Uint16Array(257);
new Uint16Array(3);
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    class C24 {
    }
    for (let i27 = 0, i28 = 10;
        i27++, i27 < i28;
        (() => {
            const v33 = [601759695];
            const v34 = [1073741824,1073741823,1376142744,1073741825];
            const v36 = Array?.constructor;
            try { v36(); } catch (e) {}
            for (const v40 of Array(4087)) {
            }
            function f41(a42, a43, a44, a45) {
                a45 - a45;
                function f47() {
                    return a42;
                }
                function f48(a49, a50) {
                    return a49;
                }
                try { f48(); } catch (e) {}
                const v52 = f48(v34, C24);
                try { v52.toString(); } catch (e) {}
                try { v34["find"](..."find", a45, ...v33, ...v34); } catch (e) {}
                return C24;
            }
            for (let v56 = 0; v56 < 10; v56++) {
                let v57;
                try { v57 = v18.some(Array, v56); } catch (e) {}
                v57[1] = v57;
                try {
                    v57.length = 1000;
                } catch(e59) {
                }
                f41(v56, f41, i27);
            }
        })()) {
        const v65 = new Uint32Array(186);
        const v70 = new Float64Array(186, 186, 16);
        const v71 = [Float64Array,v70];
        class C72 {
            constructor(a74, a75) {
                if (Float64Array > v65) {
                    new Uint32Array(v71);
                } else {
                    function F78(a80, a81, a82) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                }
            }
        }
        new C72(Float64Array, 15);
    }
}
const v84 = new F22();
const t75 = v84.constructor;
new t75();
