const v5 = [1.3808279426227658e+308,1.3808279426227658e+308,BigInt64Array,-2.1176133474752756,1362];
const v7 = [-2.1176133474752756,[v5],-2.1176133474752756,-2.1176133474752756,v5];
const v9 = new Map();
new BigInt64Array(1362);
const t4 = [];
delete t4[1073741824];
const v13 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
const v14 = /(?:a*)+q(?<a>.)/guds;
function f15(a16) {
    v13.constructor.isArray(v14);
    return a16;
}
for (let i21 = 0, i22 = 10; i21 < i22; i22--) {
    f15(v14);
}
const v32 = new Uint32Array(7);
new Uint8ClampedArray(64);
class C36 {
    #g = v32;
    static p(a38, a39) {
        const v40 = [1073741824,1073741823,1376142744,1073741825];
        function f41(a42, a43, a44, a45) {
            try { v40["find"](); } catch (e) {}
            return v40;
        }
        this[Symbol.species] = C36;
        return 7;
    }
    [BigInt64Array];
    constructor(a51, a52, a53) {
        64 || -437.2083197803569;
        v32[7];
    }
    static #n(a57, a58) {
    }
    /*
    constructor(a60) {
        const v61 = this.constructor;
        try { new v61(); } catch (e) {}
        const v64 = new Float32Array();
        v64.entries();
    }
    */
    static [Uint32Array];
    static g = Uint32Array;
    #f;
    static #e;
    static [v9];
    static #c = -437.2083197803569;
    static #b = v13;
    e = v5;
    [1362] = v7;
    #a = 64;
    [Uint8ClampedArray];
    static #b;
    static #d;
    static 65537;
}
const v66 = new C36(-437.2083197803569, 1.3808279426227658e+308, 1362);
new C36(-437.2083197803569, v66, 7);
new C36(-437.2083197803569, Uint8ClampedArray, 64);
const v69 = [-268435456,2,9007199254740992,0];
const v70 = [2147483649,1024,-128,-256];
v70[2] = v70;
v70["join"](v69);
