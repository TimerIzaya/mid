const v1 = [-1e-15,-2.0,4.0];
const v2 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
v2.a = v1;
const v3 = [-5.0,-2.0,-1.5942587568933252e+308,1.0730723170600494e+307,0.0,-2.2250738585072014e-308,-446.9921213911738];
class C4 {
    [v3] = v2;
    static #c;
    #o(a6, a7) {
        Symbol.search;
        let v10;
        try { v10 = a6(...v3, ...v2, a7, C4, ...this); } catch (e) {}
        try {
            v10.#c;
        } catch(e12) {
        }
    }
    set e(a14) {
        this[this] = v1;
        SharedArrayBuffer();
        Uint8ClampedArray();
    }
}
const v21 = new C4();
new Uint8Array(16);
new Uint8ClampedArray(6);
try {
    v2.a = 1191742690;
} catch(e30) {
}
new Uint8ClampedArray(1024);
v21.constructor;
const v34 = (a35, a36, a37, a38) => {
    'use strict';
    return a35;
};
if (v3 == 255) {
    const o43 = {
        "maxByteLength": 2060605322,
    };
    const v45 = new SharedArrayBuffer(9, o43);
    new Int32Array(v45);
} else {
    const o50 = {
        "maxByteLength": 1939,
    };
    const v52 = new ArrayBuffer(2, o50);
    new Int8Array(v52);
}
const v56 = new Float64Array(255);
const v58 = Symbol.toPrimitive;
v56[v58] = v34;
v56.b = Uint8ClampedArray;
const v59 = C4?.constructor;
try { new v59(v56); } catch (e) {}
for (let v63 = 0; v63 < 5; v63++) {
    [10];
    const v69 = new Int8Array(3816);
    for (const v70 of "some") {
        const v71 = v69[1];
        let [,,,...v72] = v69;
        const o73 = {
        };
        o73.a = 3816;
        o73.a = v71;
        const o74 = {
        };
        o74.a = v71;
    }
    function f76() {
        return f76;
    }
    const o79 = {
        "type": "function",
    };
    o79.arguments = v58;
    new Worker(f76, o79);
}
