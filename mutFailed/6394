/ymdG(\2)(\1)/vis;
/83(\1a)/s;
/l(v1D{z})/m;
new Uint8Array(183);
new Int16Array(14);
new undefined(512);
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v17 = 0; v17 < 25; v17++) {
    v16["p" + v17] = v17;
}
const v21 = [601759695];
const v22 = [1073741824,1073741823,1376142744,1073741825];
function f23(a24, a25, a26, a27) {
    function f28() {
        ("Vre")["concat"]("concat", a27);
        let v33 = Float64Array;
        v33 = a25;
        v16.length;
        try {
            v22.forEach();
        } catch(e36) {
        }
        Symbol.toPrimitive;
        const o43 = {
            toString(a40, a41) {
                a27 && v33;
                return this;
            },
        };
        const o44 = {
        };
        new Proxy(Uint8ClampedArray, o44, Proxy, 512);
        o43[16] = a24;
        const o52 = {
            [-4294967297n](a48, a49, a50, a51) {
            },
            ...v21,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f23;
    }
    f28();
    %OptimizeFunctionOnNextCall(f28);
    return -4294967297n;
}
for (let v54 = 0; v54 < 10; v54++) {
    f23();
}
%OptimizeFunctionOnNextCall(f23);
f23();
