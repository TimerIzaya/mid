const v0 = [];
const v1 = [387087.75447523757,1.7976931348623157e+308,-868.4216401905778,2.1303949340212025,6.363307610326775,-92089.20121816488,-198.86274141142815];
[525194.5215581332,Infinity,947.88128870132,1000.0,0.11239019108330994,Infinity,0.40325732261229563,900273.6441613145,-0.0];
const v3 = [-898.6293688129621,-112.11922657195578,1.2319564380514938e+308,-2.220446049250313e-16,3.0,104.8416342064479,0.29310687276236125,-873343.3689023607,915394.752398452];
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { a6.findLast(this); } catch (e) {}
    try {
        this.h = a6;
    } catch(e8) {
    }
}
F4.arguments = F4;
const v9 = new F4(v0);
v9.h;
new F4(v3);
new F4(v1);
const v15 = new Uint8ClampedArray(3016);
const v18 = new Uint32Array(128);
new Float32Array(10);
const v22 = [-1000000.0,-3.1923473210656557,-1.721355656202141e+308,4.0,0.3955838142797843,-3.0,1.1463753586867827e+308];
try { v22.fill(v15); } catch (e) {}
function f24(a25) {
    a25[3] = a25;
    const o26 = {
    };
    o26[213] = v22;
    const v27 = o26[213];
    try { v27.splice(o26, v18); } catch (e) {}
    return v27;
}
Uint8ClampedArray.caller = f24;
%PrepareFunctionForOptimization(f24);
f24(v22);
%OptimizeFunctionOnNextCall(f24);
f24(v22);
