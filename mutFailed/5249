function f2() {
    return 256;
}
const v4 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
v4.__proto__ = v4;
new Int16Array(Int16Array);
const v9 = new Int8Array(0);
try { v9.lastIndexOf(16); } catch (e) {}
Uint8Array.e = Uint8Array;
const v13 = new Uint8Array(257);
const v15 = [[Int16Array,v13,16,16,16]];
[Int8Array,v9,v15];
2.2250738585072014e-308 + 2.2250738585072014e-308;
let v23 = 135.68951961804942;
v23++;
const v27 = new Int16Array(2183);
Uint8Array.e = 2.2250738585072014e-308;
Uint8Array.e = Uint8Array;
new Uint8Array(255);
class C32 {
}
new C32();
function f34() {
    const t23 = [];
    t23[6] = 4294967295;
    const o39 = {
        set b(a38) {
        },
        "arguments": v15,
    };
    return o39;
}
f34();
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v42 = new Int16Array(8);
try { parseFloat(16); } catch (e) {}
async function f45(a46, a47, a48) {
    a47 >>> a47;
    a48 ^ a48;
    const v51 = delete v42[-1000000000.0];
    v51 && v51;
    let [v53,v54,...v55] = v27;
    try { v55.toLocaleString(); } catch (e) {}
    let v57 = v27[5];
    v57--;
    await v54;
    return Uint8Array;
}
f45(8, 8, 948737.12760097);
try { Math.abs(Math); } catch (e) {}
const v64 = +-36313;
let v65 = -36313 + v23;
v65--;
v64 || (v23 / v65);
