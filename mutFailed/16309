Int8Array[1] = Int8Array;
const v2 = new Int8Array(10);
210 === 210;
function f6(a7, a8) {
    const v10 = ([16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9]).keys();
    function f11(a12, a13) {
        const o14 = {
            "g": v10,
        };
        return o14;
    }
    return 210;
}
Int32Array.valueOf = f6;
const v15 = new Int32Array(210);
try { v15.join(10); } catch (e) {}
try { new Float32Array(Int8Array, v15, 10); } catch (e) {}
const v20 = new Float32Array(5);
v20[Symbol.toPrimitive] = f6;
try { v20.slice(210, Int32Array); } catch (e) {}
/(\xed\xb0\x80)\x01/vdim;
const v25 = /}/gims;
Object.defineProperty(v25, "g", { value: v25 });
const v26 = /1*/udisy;
v26.toString = Symbol;
class C27 {
    constructor(a29, a30, a31, a32) {
        function f33() {
            return a30;
        }
        function f34(a35) {
            const v38 = ~a31;
            Math.sin(1000);
            Math.max(1000);
            Math.round(v38);
        }
        Object.defineProperty(this, "g", { enumerable: true, get: f33, set: f34 });
        function f42() {
            return f6;
        }
        function f43(a44) {
        }
        Object.defineProperty(a29, Symbol.toPrimitive, { enumerable: true, get: f42, set: f43 });
        a32.toString = f42;
        try { this.propertyIsEnumerable(a30); } catch (e) {}
        a29.g = a29;
        a30 >>> a30;
        a31 >>> a31;
        a32 >>> a32;
        v26[v26] = this;
        a29[v20];
    }
    static #toString(a54, a55, a56) {
        if (5 != a56) {
            let v61 = a55 - -12;
            Math.asin(v61);
            const v63 = -31324;
            Math.log(v63);
            ++v61;
            Math.floor(v63);
        } else {
            try {
                super.o(210, 210);
            } catch(e68) {
            }
        }
        return v2;
    }
}
new C27(v25, 5, 10, 210);
const v70 = new C27(v25, 5, 210, Int32Array);
Object.defineProperty(v70, "g", { writable: true, configurable: true, value: 210 });
new C27(v70, 10, 5, v25);
for (let v73 = 0; v73 < 5; v73++) {
    function f74() {
        const v76 = Array();
        v76[3] = v76;
        try { v76.findLast(v20); } catch (e) {}
        v76[3] = 65535;
        const v78 = v76.pop();
        v78 > v78;
        return v78;
    }
    let v80 = f74();
    v80--;
    %OptimizeFunctionOnNextCall(f74);
}
