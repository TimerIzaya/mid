new Int8Array(4077);
new Uint8ClampedArray(10);
new BigInt64Array(801);
new Map();
class C14 {
}
const v17 = C14(4087);
for (const v18 of v17) {
}
const v19 = new C14();
new Array();
new Array();
function f22() {
    return f22;
}
function F23(a25, a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
}
function f29(a30, a31, a32, a33) {
    const o41 = {
        get f() {
            const v36 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
            const o38 = {
                valueOf() {
                    return a32;
                },
            };
            v36.length = o38;
            new a31();
            return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
        },
        ...a31,
    };
    return o41;
}
const v42 = f29();
[-1.7976931348623157e+308,-613.7550152041111] ^ -1264607604;
class C47 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
const v50 = f29();
class C51 extends f29 {
    constructor(a53, a54, a55) {
        super(v19, Int8Array);
        const v56 = new this();
        for (let v57 = 0; v57 < 25; v57++) {
            v56["p" + v57] = v57;
            [Uint8ClampedArray,Uint8ClampedArray];
            const v62 = v17.includes;
            try { v62(); } catch (e) {}
            const v66 = new BigInt64Array(2325);
            for (const v67 in v66) {
            }
        }
    }
}
new C51();
const v69 = new C51(v42, v42, C14);
new C51(v50, v50, v69);
