const v0 = [-4294967295,-4294967295,-11,1073741824,-9223372036854775807,44572,-5953];
const v1 = [-3,11492,1901,-1488780647,-2147483648,-23778,9007199254740991,-2182];
const v2 = [-6,128,536870887,-7,512,5,64,-1369336406];
class C3 {
    #n(a5) {
        a5 %= a5;
        try {
            super.toString(v0);
        } catch(e7) {
        }
        super.e = v2 ** this;
        return this;
    }
    static toString(a10) {
        const v11 = delete a10?.length;
        try {
            v1.indexOf(v11, -6);
        } catch(e15) {
        }
        return this;
    }
}
new C3();
new C3();
const o20 = {
    get a() {
        return this;
    },
};
o20.a = "byteLength";
const v21 = new C3();
class C25 extends C3 {
    static #g = v1;
    static #m(a27, a28, a29, a30) {
        with (C3) {
            const v32 = this ^ e;
            try {
                v21.#g *= v32;
            } catch(e33) {
                for (let v34 = 0; v34 < 25; v34++) {
                    v1["p" + v34] = v34;
                }
            }
        }
        const v37 = [];
        let v38;
        try { v38 = v37.with(v37); } catch (e) {}
        const v40 = new Float64Array(v37, v38);
        const v41 = new Float64Array(v40, -32961n, v38);
        v41.values();
        return this;
    }
    5;
    #f = -1068270859n;
    static [-2] = v1;
}
new C25();
new C25();
new C25();
new Float64Array(1000);
function f50() {
    return f50;
}
class C51 extends f50 {
}
const v52 = new C51();
new Date(v52);
new BigUint64Array(4057);
new Uint8ClampedArray(128);
const v62 = new Uint16Array(2);
new Uint32Array(v62);
