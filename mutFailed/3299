!false;
class C5 {
    constructor(a7, a8) {
        a7--;
        !a8;
        a7?.h;
        super.g;
        9007199254740990 !== 9007199254740990;
        const v17 = this?.constructor;
        v17.length = v17;
        try { new v17(a7, a8); } catch (e) {}
        a7++;
        a8 <= a8;
        Math.sign(16);
        const v24 = Math.atan2(this, this);
        v24 / v24;
        16 % !this;
    }
    d = -7;
    static 3;
    static [false];
    static 3151884785;
}
try { new C5(false, false); } catch (e) {}
let v29;
try { v29 = new C5(-2, false); } catch (e) {}
const v30 = new C5(-1602984247, -2);
new C5(-2, -1602984247);
const v32 = new C5(-1602984247, false);
v32.c = v32;
let v35 = -65537;
v35 >>> v35;
v35 = -536870912;
const v37 = [false,-2,v29,C5];
const v38 = [v30];
[v38,false,false,v38];
let v40;
try { v40 = v29(v32, C5, v37, v35); } catch (e) {}
4 + 4;
-355912112 + -355912112;
try {
    v38.valueOf = v40;
} catch(e50) {
}
v32[-355912112] = v38;
36002 & 36002;
const v55 = Promise.reject(Promise);
let v60 = 0.29489550717955537;
v60++;
let v63 = 1.1660447917673544e+308;
v63++;
function F68(a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = this?.constructor;
    try { new v72(a70, Promise); } catch (e) {}
}
F68.prototype;
const v75 = new F68(512, 10000);
const v76 = new F68();
const v77 = v76?.constructor;
try { new v77("o", "o"); } catch (e) {}
try { Uint32Array("-3", 8, v76); } catch (e) {}
const v81 = new Uint32Array(v55, 36002, 4);
([v76,v75,v81[v60]])[2];
