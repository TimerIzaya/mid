const v0 = [256,255,-16,257];
const v1 = [-41640,1918071405,64,-65537,16,129];
[268435456,7,-2,9007199254740991,-50815,-9007199254740992,965021288];
const v5 = new Int8Array(0);
241 - 241;
function f9() {
    try { v5(Int8Array, v1); } catch (e) {}
    class C12 {
        toString(a14) {
            const t9 = super["bigint"];
            t9[9] = 0;
        }
    }
    return Uint16Array;
}
const v18 = Symbol.iterator;
Uint16Array[v18] = f9;
const v19 = new Uint16Array(241);
try { v19.filter(v0); } catch (e) {}
219 >>> 219;
try { new BigInt64Array(Uint16Array, 241, 0); } catch (e) {}
const v25 = new BigInt64Array(219);
v25[101];
1 & 1;
new Uint16Array(1);
new Int16Array(12);
new Float32Array(0);
class C37 {
    static toString(a39, a40) {
        this.d = this;
        const v42 = super[a40];
        try {
            delete this[v42];
            this[C37];
        } catch(e45) {
        }
    }
}
C37.undefined = v18;
const v46 = new C37();
v46[Symbol.iterator] = f9;
const v50 = new Uint8ClampedArray(v46, C37, C37);
function f51() {
    function f52(a53, a54) {
        const v55 = v46.constructor;
        function f56(a57) {
            delete v19[7];
        }
        Object.defineProperty(v55, "d", { configurable: true, enumerable: true, set: f56 });
        try { v55(); } catch (e) {}
        return v55 + v55;
    }
    return f52;
}
Object.defineProperty(v50, "valueOf", { get: f51 });
v50[5] = v50;
