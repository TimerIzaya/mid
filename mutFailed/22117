const v0 = /[\11a]/dms;
const v1 = /e+/vms;
const v2 = /Ro/gumy;
Uint16Array[1] = Uint16Array;
new v1(Uint16Array, Uint16Array, Uint16Array);
const v6 = new Uint16Array();
try { v6.reduceRight(v0); } catch (e) {}
function f8(a9) {
    const o41 = {
        ...a9,
        p(a11) {
            v1 >> v0;
            new BigUint64Array(3098);
            new Uint16Array(v2);
            return BigUint64Array;
            function f21() {
                return f21;
            }
            const v22 = [601759695];
            const v23 = [1073741824,1073741823,1376142744,1073741825];
            function F24(a26) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v27 = new F24();
            function f28(a29, a30, a31, a32) {
                try { v23[f21](..."find", a32, ...v22, ...v23); } catch (e) {}
                const v37 = 487.07055082283114 >>> 487.07055082283114;
                const v38 = -v27;
                v37 && -6;
                return v38;
            }
            new Float64Array(25);
            return a9;
        },
    };
    return o41;
}
const v42 = f8(v2);
const v43 = f8(v1);
const v44 = f8(v2);
class C47 {
    constructor(a49, a50) {
        const v51 = this.constructor;
        try { new v51(a50, a50, v51, this, v51); } catch (e) {}
        this[-2147483648] >>>= -7;
        for (let v53 = 0; v53 < 5; v53++) {
        }
    }
}
new C47(-2147483648, -7);
[v1,[f8,v43,[v44,f8,f8]],v42,v44,v42];
function f58() {
    return v1;
}
const o64 = {
    "maxByteLength": 1468,
};
function f66(a67, a68) {
    return a67;
}
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
}
F69.toString = f58;
const v74 = new Int8Array();
const v75 = v74.buffer;
v75.constructor = f58;
try { v75.slice(F69, F69); } catch (e) {}
const v77 = new ArrayBuffer(2, o64);
const v79 = new Int8Array(v77);
[-4096,13,16,6] + v79;
