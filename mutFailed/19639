[-536870912,-459675655,242513042,10000,2,-2147483648,-536870912,268435441];
const v1 = [1885667114,256,-36368,-4294967296];
const v2 = [17636];
class C3 {
    static #toString(a5) {
        try {
            const o7 = {
            };
            v2.concat(v1, "6", o7);
        } catch(e9) {
        }
        return this;
    }
}
new C3();
const v11 = new C3();
new C3();
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f18(a19) {
    const v21 = new Set();
    return v21;
}
Uint32Array.constructor = f18;
const v22 = new Uint32Array();
let v23 = -4294967297n;
const v24 = v23--;
const v25 = [601759695];
const v26 = [1073741824,1073741823,1376142744,1073741825];
function f27(a28, a29, a30, a31) {
    const v32 = a28.constructor;
    let v33;
    try { v33 = v32(); } catch (e) {}
    v33.constructor = f18;
    const v34 = v33?.constructor;
    function f35() {
        function f36(a37) {
            v34[a37] = v26;
            return undefined ^ undefined;
        }
        return f36;
    }
    function f40(a41) {
        65537 < 4096n;
    }
    Object.defineProperty(v34, "toString", { writable: true, enumerable: true, get: f35, set: f40 });
    let v45;
    try { v45 = v34(f27, a28, v16, Uint32Array, v32); } catch (e) {}
    function f46() {
        const v48 = ("Vre").charAt(v45);
        v48.blink();
        let v50;
        try { v50 = ("Vre").codePointAt(v16); } catch (e) {}
        v50 % v50;
        let v52 = Float64Array;
        v52 = a29;
        b = v16;
        let v53 = v16.length;
        v53++;
        try {
            v26.forEach(a29);
        } catch(e56) {
            e56.message = e56;
        }
        const o67 = {
            "c": v23,
            valueOf(a58, a59) {
                return v33;
            },
            1073741824: v22,
            [v23](a61, a62, a63, a64) {
                eval(v48);
            },
        };
        return v26;
    }
    f46();
    const v70 = Array(v34);
    try { v70.findLast(); } catch (e) {}
    const v73 = Int8Array.of();
    let v74;
    try { v74 = v73.every(v73, a28, v73, a29, Array); } catch (e) {}
    const v75 = new Int8Array(v74);
    const v76 = v75.buffer;
    function f77() {
        return ("deleteProperty").replace("deleteProperty");
    }
    v76.constructor = f77;
    const v80 = v76.slice();
    v80.constructor = f77;
    const v81 = v80.constructor;
    v81[0] = v74;
    try { v81(v80, v74, v24, v73, a28); } catch (e) {}
    const v84 = new Int32Array(v81, v32, v32);
    v84.lastIndexOf(a28, a30);
    try { v26["find"](..."find", a31, ...v25, ...v26); } catch (e) {}
    return v23;
}
function f88(a89) {
    class C90 {
    }
    const v91 = new C90();
    function f92(a93, a94) {
        const o95 = {
            [a94]: v91,
        };
        return o95;
    }
    f92();
    return v11;
}
f27.toString = f88;
for (let v97 = 0; v97 < 10; v97++) {
    f27(v22);
}
%OptimizeFunctionOnNextCall(f27);
f27(Uint32Array);
