const v1 = new Map();
[1e-15,-1.0,5.538302414576455,9.171897562017236e+307,-1000000.0,0.5098774449469251,2.2250738585072014e-308,0.0942000102793763];
const v6 = [];
function f7() {
    arguments[2] = arguments;
    return v1;
}
v6.toString = f7;
const v10 = new Date();
v10.valueOf = f7;
const v11 = v10.setMilliseconds(v10);
([v6]).with(v6, v11).toLocaleString();
[-734630.5459816158,1.0,NaN,0.4055080380058681,-4.0,-8.900578498071823e+307,-613.9822621388151,851.7164260157467,4.0];
const v16 = [2.6501608480939115e+307,6.333389279432663e+307,358307.89557846566,-3.0,2.0,-347.4678079958171,5.0];
function f17() {
    return v16;
}
function F26() {
    if (!new.target) { throw 'must be called with new'; }
}
function f28(a29, a30) {
    function f31() {
    }
    const v35 = new Uint8Array(/(u4(?:a?)*)/gudimsy, f31);
    const v37 = new Uint32Array();
    for (let v38 = 0; v38 < 625; v38++) {
        const o46 = {
            ...v35,
            n(a42, a43) {
                v37[Uint8Array] = v37;
            },
            "b": 64,
            "maxByteLength": 10000,
            "g": Uint8Array,
            toString(a45) {
            },
        };
    }
    const o47 = {
    };
}
async function f49(a50, a51) {
    function F52() {
        if (!new.target) { throw 'must be called with new'; }
    }
    /2a\sc/uds;
    f28();
}
f49(F26, 4294967296);
