function f3(a4, a5) {
    const o13 = {
        "a": "toString",
        "c": a4,
        __proto__: "toString",
        get f() {
            [56531,268435441,-8,-11,518534635,-4294967297,0,-4294967296,39018,15];
            [-1073741824,-2140158839,54785,-2,-536870912,268435440];
            const v9 = [-65537,33641,2];
            a5[Symbol.iterator];
            return v9;
        },
        "e": "p",
        "d": "exp",
        ["p"]: "toString",
    };
    return o13;
}
const v14 = f3("exp", "exp");
const v15 = f3("exp", "exp");
function f16() {
    return f3;
}
function f17(a18) {
    for (let v19 = 0; v19 < 32; v19++) {
        const t25 = "exp";
        t25["p" + v19] = v19;
    }
}
Object.defineProperty(v15, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f16, set: f17 });
const v24 = f3("toString", "exp");
v24[-21993] = f3;
const v25 = [-21993];
v25[Symbol.toPrimitive] = Symbol;
const v28 = [1073741823,-990538055];
v28.toString = f3;
const v29 = [64,9,3,14];
class C30 {
    static b = "p";
    static get h() {
        try {
            new f3("p", "toString");
        } catch(e33) {
        }
        f3 / this;
        super.c = v14;
        return v15;
    }
    c;
    #c;
    ["p"];
    g = v14;
    [v15];
}
const v35 = new C30();
const v36 = new C30();
const v37 = new C30();
class C38 extends f3 {
    constructor(a40, a41, a42) {
        a40[-21993] = a42;
        super("exp", "p");
        a40[a42] = v35;
        try {
            super.getBigInt64(v37, "toString");
        } catch(e44) {
        }
    }
    static [C30] = v14;
    static {
        this[-21993] = Symbol;
        function f46(a47, a48, a49) {
            const o50 = {
                4: this,
            };
            return o50;
        }
        f46(v37, v29, f46(v37, v25, v37));
        f46(v37, v29, v36);
    }
}
C38[-21993] = v28;
new C38(v24, v35, v25);
new C38(C38, v28, v28);
new C38(C38, f3, v25);
const v57 = [-10,255];
const v59 = new Uint8ClampedArray();
v59[Symbol.toPrimitive] = f16;
v57 * v59;
