class C3 {
    static h;
    536870888;
    [536870887] = -9223372036854775808;
    p(a5, a6) {
        const v8 = Symbol.toPrimitive;
        const o13 = {
            [v8]() {
                super[a5] = this;
                return 536870887;
            },
        };
        return this;
    }
}
const v14 = new C3();
const v15 = new C3(C3, "49882", v14);
const v16 = new C3();
class C17 {
    static 536870912 = 536870887;
    static 4 = C3;
    #e;
    constructor(a19, a20, a21) {
        v15[536870887] = this;
        a20[8] = v15;
        a20 *= v14;
        try { a21(a21, ...536870887, -9223372036854775808, C3, a21); } catch (e) {}
        try {
            ("49882").#e;
        } catch(e25) {
        }
    }
}
const v26 = new C17(v14, C17, -9223372036854775808);
const v27 = new C17(v16, v16, v26);
new C17(v14, C3, "49882");
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = v27;
    } catch(e33) {
    }
    try {
        this.h = v27;
        /a\s/gudiy;
        const v35 = /(?:a+)+/d;
        /[j]/gimy;
        v35[Symbol.toPrimitive] = "49882";
    } catch(e39) {
    }
}
const v40 = new F29(v26, v15);
new F29(v40, C3, v40, v16, v15);
new F29(C17, v14);
function f43() {
    const v44 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v45 = 0; v45 < 5; v45++) {
        function f46() {
            try {
                v44.forEach();
            } catch(e48) {
            }
            return f46;
        }
        f46.f = f46;
        f46();
        %OptimizeFunctionOnNextCall(f46);
    }
    return v44;
}
const v51 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f52(a53, a54) {
    %PrepareFunctionForOptimization(f43);
    f43();
    %OptimizeFunctionOnNextCall(f43);
}
const v57 = Symbol.toPrimitive;
v51[v57] = f52;
function f58(a59, a60) {
    return 36002;
}
const v62 = new BigInt64Array(f58, 36002, v15, v57);
v62[v51] += 36002;
