const v0 = [0.3213678973000357,-2.565210772893187];
const v1 = [-11215.732416763669,-5.882844461287244e+307,-Infinity];
const v2 = [2.220446049250313e-16,690.454090514319,-3.0,-1000000000000.0,-1.0,1.7976931348623157e+308];
const v3 = [v1,v0,v2,v0];
const v4 = [v2];
const v5 = [v4,v0,v3,v3];
let v7 = 2n;
const v8 = v7--;
858410351 % 858410351;
class C14 {
    constructor(a16, a17, a18) {
        a16 * a16;
        try { a17.slice(a18, v5); } catch (e) {}
        try {
            a17.length;
        } finally {
            const v23 = Symbol.iterator;
            const o32 = {
                [v23]() {
                    let v25 = 10;
                    const o31 = {
                        next() {
                            v25--;
                            const v29 = v25 == 0;
                            const o30 = {
                                "done": v29,
                                "value": v25,
                            };
                            return o30;
                        },
                    };
                    return o31;
                },
            };
            o32.g = o32;
        }
    }
}
const v33 = new C14(-15n, v5, v7);
const v34 = v33?.__defineSetter__;
try { new v34(v2, v33); } catch (e) {}
new C14(-7n, v0, -7n);
const v37 = new C14(v7, v4, -15n);
const v38 = v37?.__defineGetter__;
try { new v38(v7, -15n); } catch (e) {}
const v40 = [0.47824713134662633,2.220446049250313e-16,-9.797613346398723e+307,0.14587813425734808,6.423532022566405,-2.0,-4.0,-1.7976931348623157e+308,-2.2250738585072014e-308];
let v41;
try { v41 = v40.flatMap(v7); } catch (e) {}
const v42 = [876791.8893125723,0.1531084303107526,-332997.3667867497,1000.0,-1.6511274474663988,1000000000000.0,1.0088774434203867,-2.2250738585072014e-308];
class C43 {
    static {
        this.name;
    }
}
const v46 = new C43();
const v47 = v46?.constructor;
try { new v47(); } catch (e) {}
const v50 = new WeakSet();
[2147483647,-877437627];
function F52(a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    try { a54.entries(); } catch (e) {}
    try { a55.delete(a55); } catch (e) {}
}
new F52(v42, v50);
function F59() {
    if (!new.target) { throw 'must be called with new'; }
    const v63 = Date.toString();
    const v64 = v63[23];
    C43[5];
    Date(257);
    const o69 = {
        "maxByteLength": 162,
    };
    const v71 = new ArrayBuffer(162, o69);
    new Int32Array(v71);
    const v74 = v64.trimRight;
    const v75 = v74.length;
    const v76 = v74.toString;
    v76.name = v76;
    let v77;
    try { v77 = new v76(); } catch (e) {}
    let v78;
    try { v78 = v74(); } catch (e) {}
    const v79 = v63.replaceAll();
    v79[30] = v79;
    const v81 = new Uint32Array(Uint32Array);
    v81[2] = v81;
    const v82 = v81[7];
    v82 * v82;
    const v85 = new Set();
    const v86 = v85.add();
    try { v86.add(Date); } catch (e) {}
    let v88;
    try { v88 = v86.keys(); } catch (e) {}
    try { v88.next(); } catch (e) {}
    const v90 = v85.add;
    try { v90.toString(); } catch (e) {}
    const v93 = 2664 ^ 2664;
    const v95 = new BigUint64Array(2664);
    try { new BigInt64Array(v3, v7, 56617); } catch (e) {}
    const v98 = new BigInt64Array(2664);
    v98.set(v95);
    let v100;
    try { v100 = v90(); } catch (e) {}
    const v102 = v85["delete"]();
    v102 || v102;
    const v104 = v102 || v102;
    v104 && v104;
    const v106 = v104 || v104;
    v106 || v106;
    const v108 = v106 && v106;
    v108 && v108;
    const v110 = v104 && v104;
    const v111 = v110 || v110;
    v111 || v111;
    const v113 = v111 || v111;
    !(v113 && v113);
    19793 - 19793;
    const o118 = {
    };
    Array.prototype = Array;
    const v120 = new Array(Array);
    const v121 = v120[0];
    let v122;
    try { v122 = v121.isArray(v7); } catch (e) {}
    Array >= F59 ? Array : F59;
    v41 = v95;
    v120[293] -= v47;
    try { v75(v93, Date, v77, v8, v122); } catch (e) {}
    const v127 = ("getPrototypeOf").blink(this, F59, "getPrototypeOf", v82, v111);
    v127[19] = v127;
    const v128 = v127[28];
    try { v128.trimLeft(); } catch (e) {}
    const v130 = v128.strike();
    v130.split(v130, v108)[0];
    const v133 = v127.strike();
    const v134 = v133.search;
    try { v134(v1); } catch (e) {}
    try { v134.call(v78, v128, Uint32Array, v100, v134); } catch (e) {}
    const v137 = v133.replace();
    try { v137.substring(Uint32Array, Uint32Array); } catch (e) {}
    v137[11] = v137;
    class C139 {
    }
    const v140 = new C139();
    const v141 = v140.hasOwnProperty;
    try { v141(); } catch (e) {}
    class C143 extends C139 {
        ["getPrototypeOf"] = C139;
    }
    const v144 = new C143();
    const v145 = v144?.getPrototypeOf;
    try { new v145(); } catch (e) {}
    const t154 = v144.constructor;
    new t154();
    const v149 = v144.constructor;
    v149.name;
    new v149();
    const v152 = new C143();
    const v153 = v152?.constructor;
    try { new v153(); } catch (e) {}
    const v155 = v152.constructor;
    try { v155(); } catch (e) {}
    const t164 = v152.getPrototypeOf;
    new t164();
    BigUint64Array.BYTES_PER_ELEMENT;
    const v161 = BigUint64Array.of();
    try { v161.entries(); } catch (e) {}
    const v163 = v161.entries();
    try { v163.next(); } catch (e) {}
    const v165 = v161.entries();
    try { v165.next(); } catch (e) {}
    const v168 = Uint8Array.length;
    v168 + v168;
    const v170 = new C143();
    const v171 = v170.getPrototypeOf;
    v171.length = v171;
    const v172 = new v171();
    const v173 = v172.getPrototypeOf;
    v173 % v173;
    const v175 = v170.getPrototypeOf;
    try { new v175(); } catch (e) {}
    new v175();
    const v178 = new v175();
    v178.getPrototypeOf = v178;
    const v179 = new C143();
    const v180 = v179?.getPrototypeOf;
    try { new v180(); } catch (e) {}
    const t189 = v179.getPrototypeOf;
    const v183 = new t189();
    try { v183.propertyIsEnumerable("delete"); } catch (e) {}
    const v185 = v179.getPrototypeOf;
    const v186 = new v185();
    const v187 = v186?.constructor;
    try { new v187(); } catch (e) {}
    v186.getPrototypeOf = v178;
    try { v185(v179, v183, Set, v178); } catch (e) {}
    for (const v191 of Array(19793)) {
    }
}
new F59();
