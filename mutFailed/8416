new Uint8Array(225);
new Float32Array(512);
const v14 = new Float32Array(255);
function F18(a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this.constructor;
    try { new v21(-143547321); } catch (e) {}
    a20 - a20;
    this.g = -1517929768;
    try {
        this.g = -1;
    } catch(e24) {
    }
    try {
        this.h = a20;
        class C25 {
        }
        const v26 = new C25();
        function f27(a28, a29, a30) {
            return v26 == v14 ? v26 : v14;
        }
    } catch(e33) {
    }
}
try { F18.bind(-143547321); } catch (e) {}
const v35 = new F18(-1);
const v36 = new F18(-143547321);
v36.d = v36;
new F18(-1);
class C38 extends F18 {
    static set e(a40) {
        this > a40;
    }
    #f;
    constructor(a43, a44) {
        try {
            ("d").#a;
        } catch(e46) {
        }
    }
    #p(a48, a49) {
        const v50 = a48?.[32];
        Object.defineProperty(v36, v35, { writable: true, configurable: true, value: F18 });
        return v50;
    }
    [-1];
    static {
        let v53;
        try { v53 = this["n"](-1517929768); } catch (e) {}
        const o54 = {
        };
        const o55 = {
            "c": v35,
            ...v53,
            65537: o54,
            __proto__: this,
            "a": this,
            "g": this,
            ...this,
        };
    }
}
try { C38(); } catch (e) {}
new C38();
const v58 = new C38();
v58.g;
new C38();
const v62 = new Map();
function f63(a64, a65, a66, a67) {
    a64 >>> a64;
    a67--;
    const o92 = {
        "c": -143547321,
        toString(a71, a72, a73, a74) {
            let v70 = this;
            class C76 {
                constructor(a78, a79, a80) {
                    const v81 = a80.concat();
                    v81[1] = v81;
                }
            }
            const v84 = new Set();
            try {
                v14.h = v84;
            } catch(e85) {
            }
            a72 << -1557853178;
            let v87 = v70++;
            Math.log2(v87);
            const v89 = v87++;
            Math.pow(v87, -1557853178);
            F18 ^ v89;
            return a74;
        },
        "b": v58,
    };
    try { o92.toString(v62, a64, v36, v36); } catch (e) {}
    return o92;
}
f63(-1517929768, -1517929768, F18, -1);
const v95 = f63(-1517929768, -143547321, F18, -1517929768);
v95.f;
f63(-1517929768, -1517929768, v95);
("HEkWL").localeCompare("isArray", "isArray");
