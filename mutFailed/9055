function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 64;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
Set.f = Set;
try { Set.bind(F0); } catch (e) {}
const v9 = new Set();
900687537 + 900687537;
let v13 = -10;
[v13,v5,v9,v13,v6];
const v15 = [v5,v9,v9];
try { v15.map(v6); } catch (e) {}
v15.g = v15;
const v17 = [268435456,268435456,v15,268435456];
class C18 {
    static #m(a20) {
    }
    static {
        this.e = this;
        const v25 = v13++;
        -v25;
        ~v13;
        Math.log10(44149);
        const v29 = 44149 + v13;
        v29 >> v29;
        Math.fround(v25);
    }
    8;
    3496684483 = F0;
    o(a33, a34, a35) {
        try {
            const v36 = [2.220446049250313e-16,4.688311165693396,-4.0];
            for (let v37 = 0; v37 < 25; v37++) {
            }
            function F38() {
                if (!new.target) { throw 'must be called with new'; }
                function F40() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v42 = new F40();
                const v43 = v42.__defineSetter__;
                try { v43(); } catch (e) {}
                function f45(a46, a47) {
                    const o48 = {
                    };
                    return o48;
                }
                const v49 = f45();
                function f50() {
                }
                const v53 = new Float32Array();
                for (const v54 of v53) {
                    Object.defineProperty(v49, Float32Array, { configurable: true, enumerable: true, get: f45, set: f50 });
                }
            }
            new F38();
            v36[8];
            [0.0,Infinity];
            super.getOwnPropertySymbols(v4, v9, this);
        } catch(e59) {
        }
        6 >>> 1;
        new Int32Array(1);
        let [] = v17;
        a33[v15] = v5;
        return this;
    }
    [F0];
    static #h;
    static #f = v15;
    [900687537];
    constructor(a67, a68, a69, a70) {
        const t78 = this.constructor;
        t78();
        a68 >>> a68;
        -0.0 >>> -0.0;
    }
}
const v76 = C18?.bind;
try { new v76(v13); } catch (e) {}
const v78 = new C18();
const v79 = [-6.672391061426152e+307];
function f80() {
    v17.splice(v79, f80, v79);
    v79["pop"]();
    const v86 = new Float32Array(64);
    for (let v87 = 0; v87 < 5; v87++) {
        Array(36862);
    }
    v86.toSorted();
    return f80;
}
new C18();
const v93 = new C18();
v93[8] = v93;
function F94(a96, a97) {
    if (!new.target) { throw 'must be called with new'; }
    const v98 = this?.__lookupGetter__;
    try { new v98(a97); } catch (e) {}
}
F94.f = F94;
F94.d = F94;
const v100 = new F94();
const v101 = v100?.constructor;
let v102;
try { v102 = new v101(v78, v100); } catch (e) {}
v102.e = v102;
function f108(a109, a110, a111, a112) {
    const o117 = {
        [a111](a114, a115, a116) {
            switch (a109) {
                default:
                    break;
            }
        },
    };
    return a112;
}
10 * 10;
const v120 = v100.constructor;
v120.name;
class C122 extends v120 {
}
C122.arguments;
let v124;
try { v124 = new C122(); } catch (e) {}
const v125 = v124?.constructor;
try { new v125(); } catch (e) {}
