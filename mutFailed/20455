const v0 = [];
const v2 = new Map();
-(-24568);
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this?.__defineGetter__;
    try { new v13(Map, F7); } catch (e) {}
    -a11;
    a12 & a12;
    try {
        this.b = a10;
    } catch(e17) {
    }
    try {
        this.d = a12;
    } catch(e18) {
    }
    try {
        this.c = a10;
    } catch(e19) {
    }
}
new F7(v0, F7, 8, 8);
const v21 = new F7(1429121328, -24568, 8, 8);
new F7(-24568, v21, 8, -24568);
[29284,414581343,-65537,512,1000];
const v24 = [54908640,-23486];
v24[1] = v24;
[23327,257,268435441];
4096 >> 4096;
Int16Array.a = Int16Array;
const v29 = new Int16Array(4096);
class C30 {
    constructor(a32, a33, a34, a35) {
        try { new a35(this, v2, a34, v2); } catch (e) {}
        let [v37,v38,,...v39] = a35;
        -v37;
        v38 + v38;
        try {
            class C42 {
                #n(a44, a45, a46, a47) {
                    super[this] = this;
                }
            }
            try { new C42(); } catch (e) {}
        } catch(e49) {
        }
    }
}
try { new C30(v21, v0, v0, 4096); } catch (e) {}
const v51 = new C30(v29, 4096, Int16Array, C30);
const v52 = v51?.constructor;
try { new v52(F7, C30, C30, C30); } catch (e) {}
new C30(C30, 4096, 4096, C30);
