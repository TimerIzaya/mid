const v2 = new Int8Array(129);
const v5 = new v2(3917);
new Uint8ClampedArray(110);
[-15,2147483648,-1640899095,257,-268435456,1724817845,-9,-9007199254740990,536870888];
const v10 = [-268435456,1787,-9223372036854775807,-346575825,1,512,6,536870887];
[-4294967297,-9];
class C12 {
    static #valueOf(a14, a15, a16) {
        a16 ^ this;
        const v18 = [];
        const v19 = [v18,v18,v18,v18,v18];
        try { v18.reduce(v19); } catch (e) {}
        class C22 {
            static g = -897042.7196709883;
            static #b;
        }
        const v23 = new C22();
        [v23];
        const v26 = [155533.8602852358,2.0];
        function F28() {
            if (!new.target) { throw 'must be called with new'; }
            for (const v33 of Array(19793)) {
                v26[658291203] = null;
                Math.cbrt(19793);
                Math.exp(0.4890055133608564 || 0.4890055133608564);
            }
            const v39 = [19793,this,19793,19793];
            [v39,v39];
            [Array,Array,Array,19793] >= Uint16Array;
        }
        new F28();
        new F28();
        a15["unshift"](3917, 129);
        return v10;
    }
    #a;
    g = v10;
    constructor(a48, a49) {
        a49.length;
        try {
            a48.#valueOf(v2, v5, this);
        } catch(e52) {
        }
    }
}
new C12(v2, 3917);
new C12(Uint8ClampedArray, 129);
new C12(110, 129);
for (let v56 = 0; v56 < 25; v56++) {
}
Math.LOG10E = Math;
