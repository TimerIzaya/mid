function f0() {
}
const v1 = [8.458893134590319];
function f2(a3, a4) {
    return "isExtensible";
}
Object.defineProperty(v1, Symbol.toPrimitive, { configurable: true, value: f2 });
Object.defineProperty(v1, "toString", { writable: true, value: f0 });
[-1000000.0];
const v11 = [-602.2515924582815,-1.0092437661771722e+308,4.0,703.9005891542743,0.0,0.0];
class C12 {
    #valueOf(a14, a15) {
        try {
            new f0();
        } catch(e17) {
        }
        return a15;
    }
    #h;
    #c = v1;
    [v1] = v11;
    static [-1] = v1;
}
new C12();
new C12();
new C12();
const v25 = new Date();
v25.setUTCFullYear();
const v28 = new Set();
v28[Symbol.toPrimitive] = Symbol;
const v31 = v28.add(v25);
v31.valueOf = Date;
let [v32,,...v33] = v28;
v32.setUTCHours(v31);
