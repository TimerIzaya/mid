function F0() {
    if (!new.target) { throw 'must be called with new'; }
    class C2 {
    }
    for (let i5 = 0, i6 = 10;
        i5 < i6;
        (() => {
            const v10 = [601759695];
            const v11 = [1073741824,1073741823,1376142744,1073741825];
            function f13(a14, a15, a16, a17) {
                function f18() {
                    return a14;
                }
                function f19(a20, a21) {
                    return i5;
                }
                f19(v11, C2);
                try { v11["find"](..."find", a17, ...v10, ...v11, ...522675525n); } catch (e) {}
                return a16;
            }
            for (let v25 = 0; v25 < 10; v25++) {
                f13(v25, f13, i5, v25);
            }
            i5++;
        })()) {
    }
    try {
        function F31() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const o34 = {
            "maxByteLength": 3952309630,
        };
        this.h = 33670;
    } catch(e35) {
    }
    try {
        this.c = 33670;
    } catch(e36) {
    }
    Array(4096);
    -9513n != 1;
    try {
        this.g = 33670;
    } catch(e43) {
        function F44() {
            if (!new.target) { throw 'must be called with new'; }
            for (const v49 of Array(19793)) {
            }
            const v51 = new Uint32Array(Uint32Array);
            for (let v52 = 0; v52 < 5; v52++) {
                v51[v52] = this;
            }
        }
        new F44();
    }
}
new F0();
new F0();
function f56(a57) {
    return F0;
}
function f58() {
    const o59 = {
    };
    const v60 = o59.constructor;
    for (let v61 = 0; v61 < 25; v61++) {
        function f62() {
            return f62;
        }
        function f63(a64, a65, a66, a67) {
            const v68 = a65();
            new a66();
            a65.freeze();
            const v71 = a67 + a67;
            function f72() {
                return v68;
            }
            const v73 = f72.length;
            const v74 = -v73;
            const v76 = f62().constructor;
            let v77;
            try { v77 = v76(); } catch (e) {}
            const v78 = v77.bind(v74, v76);
            function f79() {
                return v77;
            }
            const v80 = f79();
            try { v80.null(); } catch (e) {}
            f79();
            v78.bind();
            const v84 = typeof f72;
            v84.italics(v84);
            const v87 = new Int8Array();
            v87.entries().next(v73);
            const v92 = ("find").blink("find", v87, v61).replaceAll;
            try { v92(f63, v71); } catch (e) {}
        }
        for (let v94 = 0; v94 < 5; v94++) {
            f63(v94, v60, v60);
        }
    }
}
f58();
new F0();
new Float64Array(5);
new Uint16Array(128);
function f104(a105, a106) {
    return a105;
}
f58 *= Symbol.toPrimitive;
new Uint32Array(3302);
for (let v112 = 0; v112 < 5; v112++) {
    function f113() {
        try {
            BigUint64Array * 536870887;
        } catch(e117) {
        }
        return BigUint64Array;
    }
    f113();
    %OptimizeFunctionOnNextCall(f113);
}
