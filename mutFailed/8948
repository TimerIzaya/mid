new Uint8ClampedArray(2);
new Float64Array(5);
new Uint8Array(257);
new Uint32Array(5);
new BigInt64Array(9);
new BigUint64Array(10);
class C21 {
    constructor(a23) {
        function f24() {
            function f25(a26) {
                let v28 = Float64Array;
                return v28 = -4294967295;
            }
            return f25;
        }
        function f29(a30) {
            function F31(a33, a34, a35) {
                if (!new.target) { throw 'must be called with new'; }
            }
        }
        Object.defineProperty(this, "valueOf", { enumerable: true, get: f24, set: f29 });
        Object.defineProperty(a23, "valueOf", { configurable: true, enumerable: true, value: f29 });
        this[1762774961] = this;
        a23 % a23;
        function f37() {
            return a23;
        }
        try { f37.bind(this); } catch (e) {}
    }
    static [-1e-15] = 1000.0;
    ["name"] = -1e-15;
    f;
    [-1e-15];
    a;
    1762774961 = -1e-15;
    static ["name"];
}
C21.e = C21;
const v39 = new C21(1000.0);
function f40(a41) {
    function F42(a44, a45, a46) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = a46;
        } catch(e47) {
        }
        try {
            this.f = 257;
        } catch(e48) {
        }
    }
    new F42(5, a41, 2);
    new F42(a41, 9, 5);
    new F42(a41, a41, 10);
    return 5;
}
Object.defineProperty(v39, "toString", { configurable: true, value: f40 });
const v52 = new C21(v39);
const v53 = v52?.__lookupSetter__;
try { new v53("name"); } catch (e) {}
new C21(-1e-15);
try { new WeakSet(); } catch (e) {}
new WeakSet();
new Set();
let v62 = undefined;
const o63 = {
};
o63.c = o63;
v62 = o63;
function F64() {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this.constructor;
    try { new v66(); } catch (e) {}
    let v68 = -128;
    v68--;
    this.g = v68;
}
new F64();
new Uint8Array();
