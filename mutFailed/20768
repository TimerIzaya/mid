const v0 = [];
function F1(a3, a4) {
    if (!new.target) { throw 'must be called with new'; }
}
class C5 {
}
const v6 = new C5();
let v8 = Uint16Array;
function f9(a10, a11) {
    try { v6.log2(); } catch (e) {}
    v6[a11] = C5;
    return v6;
}
v8.toString = f9;
new v8(2);
Float32Array.toString = f9;
new Float32Array(1024);
const v19 = new Float32Array(107);
class C20 {
    b = v8;
    static [Float32Array];
    [107] = v0;
    o(a22, a23, a24, a25) {
        return 107;
    }
    #m(a27, a28) {
        let [v30,v31,,v32] = this;
    }
    constructor(a34, a35, a36, a37) {
        let v33 = this;
        const v42 = -(--v8);
        v33--;
        Math.tanh(v42);
    }
    static [-2] = Float32Array;
    #d = v19;
    [2];
}
class C45 {
    static set f(a47) {
        while (0 < 5) {
        }
    }
}
new C20(1024, 1024, 107, v8);
new C20(2, 107, v8, 1024);
const v57 = new C20(2, 1024, 1024, 107);
function f58() {
    return v57;
}
try {
    Array(-2119616940);
} catch(e62) {
}
