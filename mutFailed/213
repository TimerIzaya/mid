[7,65537,356317368,0,-9007199254740992];
const v1 = [-4294967295,-13];
function f2() {
    new Uint8ClampedArray(Date);
    return Date;
}
v1[Symbol.toPrimitive] = f2;
[-925152019,-9223372036854775808,-4294967295,-5,1073741824,6,-536870912,536870888,-9007199254740992,-468263647];
[-7.955650851178797,719.7443501235152];
const v10 = [1.7976931348623157e+308,-482768.16335022345];
function f11(a12) {
    const v14 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    const v16 = new Uint8ClampedArray(v14, Uint16Array, Uint8ClampedArray);
    return v16;
}
v10.toString = f11;
[-1e-15,-338329.79718767887,1.1942833403719957e+308,3.0,Infinity,4.0,1000.0,-2.220446049250313e-16,387.2383393698922];
new Int16Array(64);
const v31 = Promise.reject(Promise);
function f33(a34, a35, a36) {
    function f37() {
        return f33;
    }
    Object.defineProperty(a36, "toString", { get: f37 });
    const o38 = {
        [a36]: a34,
        "e": 8,
        "c": a35,
    };
    return o38;
}
f33(v10, -1704973223, v1);
f33(8, 4, v10);
f33(36002, Promise, v1);
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
}
const v55 = new F51(512, 10000);
const v56 = new F51();
function f59(a60, a61) {
    const o62 = {
        ...a60,
    };
    return a61;
}
%PrepareFunctionForOptimization(f59);
f59("65536");
const v64 = new Uint32Array(v31, 36002, 4);
([v56,v55,v64[0.29489550717955537]])[2];
new Int32Array(74);
new BigUint64Array(80);
Math.cos(-1073741824);
class C77 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
