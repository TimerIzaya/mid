for (let i5 = 0, i6 = 10;
    (() => {
        eval();
        const v9 = i5 < i6;
        const v12 = new BigUint64Array(3375);
        let [v13,,v14,...v15] = v12;
        v13--;
        return v9;
    })();
    i5++) {
}
2.0 >> 2.0;
268435456 * 268435456;
class C33 {
    2;
    constructor(a35, a36, a37, a38) {
        let v40 = 268435439;
        v40--;
    }
    /*
    constructor(a44, a45) {
        a45 + a45;
        this[2044880298] = this;
        try {
            this.e = 4;
            const v48 = new Date();
            v48.setUTCMonth(2015);
            new Uint32Array(381);
        } catch(e54) {
        }
    }
    */
    #n(a56, a57) {
        delete this[-1.7976931348623157e+308];
        super[2.0];
        const o63 = {
            "execution": "sync",
            "type": "minor",
        };
        return gc(o63);
    }
}
try { C33.constructor(268435456); } catch (e) {}
const v66 = new C33(2.0, -256n);
v66[2044880298] = v66;
const v67 = new C33(9007199254740992, -256n);
new C33(-11n, 64n);
const v71 = ("m")[0];
class C72 {
}
function f73(a74) {
    function f75() {
        return -11n;
    }
    return a74;
}
C72[Symbol.toPrimitive] = f73;
let v78;
try { v78 = new C72(); } catch (e) {}
const v79 = new C72(v78);
try { v79.toString(); } catch (e) {}
for (let v81 = 0; v81 < 250; v81++) {
    const v83 = "p" + v81;
    v83.fontcolor("9007199254740991", "p", v83, v67).localeCompare(C72);
}
const v86 = new C72(255, v71, C72);
v86.constructor = Symbol;
const v87 = v86?.constructor;
try { new v87(); } catch (e) {}
const v89 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v90 = [601759695];
const v91 = [1073741824,1073741823,1376142744,1073741825];
function f93(a94, a95, a96, a97) {
    a94[522675525] = a96;
    const v99 = arguments?.__lookupGetter__;
    try { new v99(255); } catch (e) {}
    function f101() {
        const o110 = {
            "e": -4294967295,
            ...v89,
            84: arguments,
            ..."Vre",
            set b(a105) {
            },
            ["Vre"](a107, a108) {
                super[f101];
            },
        };
        return a94;
    }
    class C112 extends Float32Array {
        constructor(a114, a115, a116) {
        }
    }
    try { new C112(a97, a94, a97); } catch (e) {}
    f101();
    %OptimizeFunctionOnNextCall(f101);
    ("find")[2];
    let v121;
    try { v121 = v91[a96](..."find", a97, ...v90, ...v91, ...522675525n); } catch (e) {}
    v121 <= a96;
    return arguments;
}
for (let v123 = 0; v123 < 10; v123++) {
    f93();
}
%OptimizeFunctionOnNextCall(f93);
for (const v125 in v86) {
    const t108 = Int32Array(v125);
    t108[3] = 9007199254740991;
    v79.p("m");
}
f93(v91, f93, 522675525n);
