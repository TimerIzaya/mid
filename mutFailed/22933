const v0 = [-491586.63316087937,3.0,0.7106253017748685,0.844283730834892,-410589.23748565034];
const v1 = [8.90572354082388e+307,1.0226327959111299e+306];
let v2 = [-Infinity,873.6192909974197,Infinity];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(v2, this); } catch (e) {}
    try { a6.group(v1); } catch (e) {}
    try {
        this.h = a6;
    } catch(e9) {
    }
}
let v10 = new F3(v1, v1);
let v11;
try { v11 = v10.hasOwnProperty(v2); } catch (e) {}
const v12 = new F3(v0, v2);
const v13 = new F3(v2, v2);
let v15 = 2934 & 2934;
try { new BigInt64Array(BigInt64Array, v12, v13); } catch (e) {}
new BigInt64Array(2934);
let v19 = v10.h;
({"e":v19,"g":v2,"length":v15,...v10} = v1);
try { v13.setUint16(BigInt64Array, v2, BigInt64Array); } catch (e) {}
v19 instanceof v11;
new BigInt64Array(11);
const v30 = new Int8Array(2024);
v30[1751] = v30;
function F31() {
    if (!new.target) { throw 'must be called with new'; }
}
1000 - 1000;
Array(1000).indexOf();
