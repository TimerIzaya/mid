function f0() {
    const o10 = {
        __proto__: 4.28955607867637,
        get d() {
            this[16] = -2.0;
            -2.0 in this;
            const v6 = this[100];
            for (let v7 = 0; v7 < 32; v7++) {
                v6["p" + v7] = v7;
            }
            return -2.0;
        },
        "a": 4.28955607867637,
    };
    function f11() {
        return f0;
    }
    function f12(a13) {
        Object.defineProperty(a13, a13, { writable: true, configurable: true, enumerable: true, set: f11 });
    }
    Object.defineProperty(o10, Symbol.toPrimitive, { configurable: true, get: f11, set: f12 });
    return o10;
}
f0();
const v17 = f0();
const v18 = f0();
class C22 {
    #m(a24, a25, a26) {
        f0();
        %PrepareFunctionForOptimization(f0);
        f0();
        f0();
        %OptimizeFunctionOnNextCall(f0);
        f0();
        return f0;
    }
    static [v17] = -838361874n;
    [-838361874n];
    0 = v18;
    static #h = 30907n;
}
new C22();
new C22();
new C22();
new BigInt64Array(8);
new Uint8ClampedArray(2105);
new Float32Array(118);
const v44 = [1.0663730977141727e+308,NaN,-1.1534060997380896e+308,-9.26829361922416e+307];
["function",/xEz\xe2\x81\xa3/gumy];
class C48 {
}
const v49 = new C48();
ReferenceError(v49);
const v52 = [0.3588640203078587,-1e-15,0.5938791097479088,-1000000000.0];
v44.constructor;
function f54(a55, a56) {
    return Math.tanh("1");
}
%PrepareFunctionForOptimization(f54);
const v60 = [5.453486096719857];
function F61(a63) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "d", { configurable: true, value: this });
    try { this.push(F61); } catch (e) {}
    try {
        this.d = a63;
    } catch(e65) {
        let v67 = new Date();
        v67 **= v67;
    }
}
new F61(v44);
new F61(v52);
const v71 = new F61(v60);
v71.a = v71;
let v73 = 2086125797;
v73++;
const o76 = {
};
Math.cos(-1567809689);
256 === 256;
Uint16Array[Symbol.iterator] = f54;
const v85 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v85);
function f88() {
}
class C89 extends f88 {
}
new C89();
function f92(a93, a94) {
    const o95 = {
    };
    return o95;
}
const v96 = new Set();
function F97(a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o106 = {
            o(a102) {
                const o104 = {
                };
                return gc(o104);
            },
        };
        this.d = a99;
    } catch(e107) {
        for (let [v108,v109] of a99) {
        }
    }
    const t110 = 4294967296;
    t110.h = v96;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v116 = [WeakSet];
        v116[4294967296] = 8;
        const v117 = new F97();
        this.b = v116;
        const v119 = new Map();
        v116[4294967296] = Set;
        const v120 = [v117];
        const v121 = [v120,v120,v117,v119];
        [-256n,v121,-41535,v119,v121];
    } catch(e123) {
    }
}
F97.arguments;
new F97();
