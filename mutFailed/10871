class C3 {
    set a(a5) {
        function f6() {
            return "valueOf";
        }
        const v8 = new WeakSet();
        const t6 = [[WeakSet,WeakSet,WeakSet,WeakSet],v8];
        t6[65537] *= ("1073741823").trimRight();
    }
    static {
        super.e *= 1.0;
        "undefined" instanceof "valueOf";
    }
    constructor(a16) {
        super[a16];
        try {
            const t16 = "valueOf";
            t16.toString = a16;
        } catch(e18) {
        }
    }
}
new C3(1.0);
new C3(C3);
new C3("undefined");
class C28 extends C3 {
    get b() {
        this.a &&= 1.0;
        try {
            super.then();
            [[2.220446049250313e-16,1000000.0,-832083.505850983,0.4718386381385684,1000.0,-5.0,9.814259698721895e+307,-659970.7982908424,-5.0]];
            const o34 = {
                get e() {
                    return this;
                },
            };
            function f35() {
                return o34;
            }
            Object.defineProperty(o34, Symbol.toPrimitive, { enumerable: true, get: f35 });
        } catch(e38) {
        }
        return 5.0;
    }
    n(a40, a41, a42) {
        function F43(a45, a46) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = 1000000000.0;
            } catch(e47) {
            }
            try {
                this.b = 4n;
            } catch(e48) {
            }
            try {
                this.f = a42;
            } catch(e49) {
            }
        }
        const v50 = new F43(a41, a40);
        new F43(4n, this);
        new F43(2n, v50);
        return F43;
    }
}
new C28();
new C28();
new C28();
function f63() {
    return 3.0;
}
const v64 = [1000000.0,1000000.0,1000000.0];
class C65 extends f63 {
    [-1] = v64;
    static get c() {
    }
    m(a68) {
    }
    set e(a70) {
    }
    static get h() {
    }
}
0 * 0;
try { ("boolean").trimEnd(); } catch (e) {}
"valueOf" < "valueOf";
"p" + 0;
function F95() {
    if (!new.target) { throw 'must be called with new'; }
}
new F95();
class C101 {
    constructor(a103) {
    }
}
const v105 = new Int8Array(C101);
v105.reverse();
