const v0 = [268435456,-65537,1];
const v1 = [-43246,-343618265,13,2,4096,-9223372036854775807];
const v2 = [15,-65537,18143,2108537987,1701580831];
let v3 = [1617863512,-536870912,30833,-12267,1532714845,-9007199254740990,65536,-2];
try { v3.toSorted(v3); } catch (e) {}
[65536,-9223372036854775808,-1244953926,-22407,459,14];
const v6 = [8,10,33385];
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try { a10.fill(this); } catch (e) {}
    try {
        this.g = a9;
    } catch(e12) {
    }
    try {
        this.d = v1;
    } catch(e13) {
    }
    v3[4] %= a10;
    try { a10(...v1, ...this, this, ...v1, a9); } catch (e) {}
    this[460] = v1;
    delete v0?.length;
    v6["shift"]();
}
const v18 = new F7(v2, v6);
new F7(v18, v1);
new F7(v3, v2);
try { new Float32Array(F7, v3, Float32Array); } catch (e) {}
new Float32Array(13);
10 << 10;
const v28 = new Float64Array(10);
v28[1];
const v32 = new Float64Array(6);
v32[5];
v18[Symbol.match];
[] = v3++;
class C39 {
    toString(a41) {
        const v42 = this?.constructor;
        try { new v42(); } catch (e) {}
        const t40 = super["bigint"];
        t40[9] = 0;
    }
}
const v46 = new C39();
const v47 = [v46,v46];
v1[1];
try {
    v47.length = v46;
} catch(e49) {
}
