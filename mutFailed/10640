function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -11;
    } catch(e3) {
    }
}
new F0();
new F0();
const v6 = new F0();
const v7 = v6?.constructor;
let v8;
try { v8 = new v7(); } catch (e) {}
let v9 = -12n;
v9++;
-9007199254740992n + -9007199254740992n;
const v16 = new Int16Array(138);
v16[59] = v16;
const v19 = new Float64Array(6);
v19[2] = v19;
3944 | 3944;
new Uint8Array(3944);
function F25(a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
}
let v30;
try { v30 = F25(F25, Map, F25); } catch (e) {}
class C31 {
    static get g() {
        const v33 = (a34, a35) => {
            'use strict';
            try {
                a34.a = this;
            } catch(e36) {
            }
            return a35;
        };
        try {
            var a = super.subarray();
        } catch(e38) {
        }
    }
}
C31.length = C31;
const v39 = new Map();
for (const v42 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
    try { ("NFKC").indexOf(326.9924986537749); } catch (e) {}
    const v46 = ("-2").normalize("NFKC");
    v46[1] = v46;
}
const v49 = ~-1000.0;
v49 >>> v49;
const v51 = -1000.0 & -1000.0;
try { Map.bind(v30); } catch (e) {}
new Map();
let v56 = WeakMap.length;
--v56;
class C58 extends WeakMap {
    536870887;
}
try { new Int32Array(6, v49, Int32Array); } catch (e) {}
const v62 = new v16(2917);
try { v62.reduce(WeakMap); } catch (e) {}
const v66 = ("lastIndexOf")[7];
try { v66.charAt(v39); } catch (e) {}
const v68 = v62["lastIndexOf"](10);
const v69 = v68 + v68;
v69 - v69;
const v73 = -1.7976931348623157e+308 - -1.7976931348623157e+308;
try { ("bigint").anchor(v73, v51, v8); } catch (e) {}
const v76 = ("lastIndexOf").localeCompare("lastIndexOf", "bigint", "lastIndexOf");
const v77 = v76 + v76;
gc.length = gc;
const v79 = gc();
536870887n - 536870887n;
const v82 = [-1.5424212036356715e+308];
try { v82.flat(); } catch (e) {}
v82[536870887n] = v82;
-2.0 >>> -2.0;
256 >>> 256;
const v91 = 256 !== 6;
!(v91 || v91);
try {
    const t83 = null;
    t83.valueOf = v62;
} catch(e95) {
    e95.message;
    const v97 = e95.stack;
    let v98;
    try { v98 = v97.anchor(v77); } catch (e) {}
    const v99 = e95.message;
    try { v99.strike(); } catch (e) {}
    const v101 = v99?.toLocaleUpperCase;
    try { new v101(v98, v62, e95); } catch (e) {}
    e95.stack;
}
-2.0;
const v108 = v39.size;
v108 | v108;
C58[3438438303] |= 2.0;
let v111 = 0 - 0;
v111++;
new Uint8Array(0);
let v115 = 3723;
v115--;
Float32Array.prototype = Float32Array;
const v118 = new Float32Array(v115);
~3245;
Float32Array.name;
Float32Array.d = Float32Array;
const v123 = new Float32Array(3245);
try { Math.acos(1.6302485159507752e+308, v8, Math, Uint8Array); } catch (e) {}
try { Math.imul(-2.0, -2.0); } catch (e) {}
Math.atan2(-0.0, 2.0);
function F128(a130, a131) {
    if (!new.target) { throw 'must be called with new'; }
    const v132 = this?.constructor;
    try { new v132(this, 6); } catch (e) {}
    let v134;
    try { v134 = this.isPrototypeOf(2917); } catch (e) {}
    !v134;
}
F128.arguments = F128;
const v136 = new F128();
const v137 = v136?.constructor;
let v138;
try { v138 = new v137(C58, "bigint"); } catch (e) {}
try { v138.isPrototypeOf(v138); } catch (e) {}
Map * v138;
try {
    const v144 = [v123,Float32Array,"shift",v39,v82];
    try { v144.with(v115, v115); } catch (e) {}
    try { ("atanh").big(); } catch (e) {}
    const v148 = new F128(v144, "atanh");
    v148.length;
} catch(e150) {
}
const v151 = new C31(-63366, v136);
const v152 = v151?.constructor;
try { new v152(); } catch (e) {}
function F154(a156, a157) {
    if (!new.target) { throw 'must be called with new'; }
    const v158 = a156?.constructor;
    try { new v158(null); } catch (e) {}
    try { new a157(null, 16); } catch (e) {}
    this.h = a157;
}
const v161 = new F154(F154, F154);
const v162 = v161?.constructor;
try { new v162(v118, v118); } catch (e) {}
const v164 = v161?.constructor;
let v165;
try { v165 = new v164(v136, v79); } catch (e) {}
v165.h;
!(delete v161.h);
