function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 512n;
    } catch(e7) {
    }
    try {
        this.e = 757881126n;
    } catch(e8) {
    }
}
new F3(129n, 129n);
const v10 = new F3(757881126n, 129n);
const v11 = new F3(129n, v10);
class C13 {
    static #d = 512n;
    p(a15, a16) {
        let v17;
        try { v17 = this.o(757881126n, v11, v10, F3, undefined); } catch (e) {}
        try {
            this.h = v17;
        } catch(e18) {
        }
        return undefined;
    }
    [v11];
}
const v21 = [Int16Array,Int16Array,Int16Array,Int16Array];
const v22 = [v21];
class C24 extends Map {
}
const v25 = [-554799.8407135659,-2.220446049250313e-16,731041.3668807968,-0.0,0.12359094160643747,-1000.0,-1e-15,-5.0,314.0545280433057];
function f26(a27, a28) {
    v25.length = 0;
    return a27;
}
const v30 = new C24();
const v31 = new C24(v22);
const v32 = new C24(v31);
const v36 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v38 = new Uint32Array();
const v40 = [601759695];
const v41 = [1073741824,1073741823,1376142744,1073741825];
function f43(a44, a45, a46, a47) {
    try { a44.toLocaleString(); } catch (e) {}
    const v49 = a44?.constructor;
    try { v49(); } catch (e) {}
    try { v49(); } catch (e) {}
    const v53 = arguments.length;
    Object.defineProperty(v30, "e", { configurable: true, enumerable: true, value: f43 });
    const v55 = v31["entries"](a46, ...v32, BigUint64Array, ..."entries", a45, v53);
    new Float32Array(5, 5, v53);
    class C59 {
    }
    class C60 {
    }
    const v62 = Symbol.toStringTag;
    v31[v62] = v62;
    function f63() {
        let v65;
        try { v65 = ("Vre").charAt(4096); } catch (e) {}
        try { v65.lastIndexOf("Vre", a44); } catch (e) {}
        let v67;
        try { v67 = ("Vre").codePointAt(v36); } catch (e) {}
        class C68 {
        }
        const v69 = new C68();
        function f70(a71) {
            return a71;
        }
        v67 - v67;
        v67 ^ v67;
        let v74 = Float64Array;
        v74 = a45;
        let v75 = v69.length;
        v75++;
        try {
            v41.forEach(a45);
        } catch(e78) {
            e78.stack = e78;
        }
        const o96 = {
            268435439: v40,
            ..."e",
            m(a80) {
                return C60;
            },
            "c": -4294967297n,
            "EPSILON": v40,
            valueOf(a82, a83) {
                return Uint32Array;
            },
            1073741824: v38,
            "arguments": v21,
            get h() {
                return v65;
            },
            [v41](a86, a87, a88) {
            },
            [-4294967297n](a90, a91, a92, a93) {
                eval();
            },
            "arguments": 5,
        };
        return Int16Array;
    }
    f63();
    const v99 = Array();
    let v100;
    try { v100 = v99.findLast(f43); } catch (e) {}
    v99.unshift("entries", v55, "entries", v100);
    let v103;
    try { v103 = Int8Array.of(); } catch (e) {}
    try { v103.join(v49); } catch (e) {}
    const v105 = new Int8Array(v40);
    v105.c = "e";
    const v107 = v105.buffer.slice(v49);
    try { Int32Array(v107, arguments, -4294967297n); } catch (e) {}
    function f110(a111, a112, a113, a114) {
        return C59;
    }
    const v115 = new Int32Array();
    const v116 = v115[3];
    v116 + v116;
    for (let v118 = 0; v118 < 5; v118++) {
    }
    try { v41["find"](..."find", a47, ...v40, ...v41, ...522675525n); } catch (e) {}
    return v115;
}
for (let v121 = 0; v121 < 10; v121++) {
    f43(v38);
}
%OptimizeFunctionOnNextCall(f43);
f43();
new v31();
new C13();
new C13();
new Float32Array();
new Uint8Array(4096);
function F137() {
    if (!new.target) { throw 'must be called with new'; }
    const v142 = Array(19793);
    for (const v143 of v142) {
    }
    [[v142,v142,v142,v142]];
    ("function").normalize();
    const v149 = new Set();
    v149.values();
    [] >= Uint16Array;
}
class C154 {
}
class C155 extends C154 {
}
const o156 = {
};
