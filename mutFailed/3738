const v2 = new Uint8Array(0);
const v5 = new Uint8Array(2114);
new Int8Array(5);
const v9 = [-1.0,-646.4926944671334,0.4436313389815526];
const v10 = [v9,v9,2114];
const v11 = [Uint8Array,v2,v10];
[v5];
const v15 = [Uint32Array];
try { v15.find(Worker); } catch (e) {}
const o18 = {
    get c() {
        return this;
    },
};
v2[15] %= 5;
2114 && 0;
const v20 = [-1e-15,-735933.0078641742];
[-1000000.0,1000.0,-1000000.0,1.3716837001611104,-1.2147415579793935e+308];
function f25() {
}
for (const v26 of v20) {
    function f27() {
    }
    f27();
    for (let v32 = 0; v32 < 32; v32++) {
        v9["p" + v32] = v32;
    }
}
f25();
class C36 extends f25 {
    constructor(a38) {
        super();
        for (let v39 = 0; v39 < 5; v39++) {
            super.valueOf();
        }
    }
}
new Int8Array();
o18 & v10;
Object.defineProperty(v11, "b", { value: v10 });
const v43 = C36[129];
delete v11[v43];
try { v43(); } catch (e) {}
new v43();
new C36();
