const v0 = [11,65536];
const v1 = [-268435456,25753,-171,-3];
function f2() {
}
function f3() {
    const o7 = {
        "b": f2,
        valueOf() {
            try { this.b(); } catch (e) {}
            [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
        },
    };
    try { o7.b(); } catch (e) {}
    return o7;
}
const v9 = [2147483647,-11,6,38125,-1944079346,-4294967295,-8,-59089,65537,0];
let v10 = -1.0;
class C14 {
    m(a16, a17, a18) {
        ~v9;
        const v20 = a16[0.6298469576205732];
        let v21;
        try { v21 = new a17(this, v10, v20); } catch (e) {}
        return v21;
    }
    static #e = v1;
    static get b() {
        let v23;
        try { v23 = v0(v1, this); } catch (e) {}
        try { new v23(v0, v23, -1.0, v23); } catch (e) {}
        v10 %= v23;
        function F27(a29, a30) {
            if (!new.target) { throw 'must be called with new'; }
            function f32(a33, a34) {
                NaN !== NaN;
                class C37 {
                }
                try { C37.apply(1.7976931348623157e+308); } catch (e) {}
                const v40 = new Float64Array();
                return v40.values().next();
            }
            %PrepareFunctionForOptimization(f32);
            f32();
            %OptimizeFunctionOnNextCall(f32);
            f32();
        }
        new F27();
        return 257n;
    }
}
const t50 = -1.0;
new t50();
new C14();
const v49 = new C14();
[v49];
[v0,v0];
[0.6298469576205732,v1];
const o57 = {
    toString(a55, a56) {
        Object.defineProperty("-884841883", a55, { configurable: true, value: a56 });
        return "-884841883";
    },
};
try { ("").lastIndexOf(o57); } catch (e) {}
