function f0() {
}
function F1() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v3 = /T/udims;
        function f4(a5) {
            Float32Array();
            return v3;
        }
        v3.toString = v3;
        const v8 = /\P{sc=Greek}/uims;
        const v10 = new Date();
        try { v10.setFullYear(v8, v3); } catch (e) {}
        this.h = f0;
    } catch(e12) {
    }
    f0();
    %PrepareFunctionForOptimization(f0);
    f0();
    f0();
    %OptimizeMaglevOnNextCall(f0);
    f0();
    try {
        this.c = f0;
    } catch(e20) {
    }
}
new F1();
const v22 = new F1();
const v23 = new F1();
const v27 = [12289];
const v28 = [v27,v23];
const v29 = [3,v28,f0];
function f30() {
    return 12289;
}
[-2,-935,-128,-2147483647,1073741823];
const o32 = {
};
new Proxy(F1, o32);
function f35() {
    return v22;
}
[-4096,268435440,-1148572711,396423547,-16,-42890,4,2063069669,-1024];
[8,-42422,-65535];
const v38 = [-768400.1657361139];
class C39 {
}
new v28();
const v41 = new C39();
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    -v27;
    const v48 = f35();
    try { v29.lastIndexOf(a46, v48); } catch (e) {}
    const v52 = C39.iterator;
    const o61 = {
        [v52]() {
            const o60 = {
                next() {
                    let v55 = this;
                    v55--;
                    const v58 = 10 == 0;
                    const o59 = {
                        "done": v58,
                        "value": 10,
                    };
                    return F1;
                },
            };
            return o60;
        },
    };
    const v62 = this.constructor;
    try { new v62(a45, a46); } catch (e) {}
    -a44;
    C39 | a46;
    try {
        this.e = v41;
    } catch(e66) {
        a46 - v38;
    }
}
const v68 = new F42();
const t85 = v68.constructor;
new t85();
