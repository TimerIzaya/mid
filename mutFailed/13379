new Uint16Array(256);
const v4 = 0 / 0;
const v6 = new Float64Array(0);
const v9 = new Uint8Array(127);
function f10() {
    return Uint16Array;
}
try { f10(); } catch (e) {}
try { new Array(Uint16Array); } catch (e) {}
3 != 3;
const v16 = new Array(3);
const v20 = new Map();
const v21 = v20?.constructor;
let v22;
try { v22 = new v21(); } catch (e) {}
new Map();
function f25(a26, a27, a28, a29) {
    const o30 = {
    };
    o30.h = o30;
    return o30;
}
const v31 = f25(v22, "m");
const v32 = v31?.__lookupGetter__;
try { new v32(v16); } catch (e) {}
const v34 = f25("m", "m");
try { v34.h(v6, v9, v9, v20); } catch (e) {}
-1073741824 + -1073741824;
let v39 = 129;
v39++;
new Float32Array(v39);
let v45;
try { v45 = new BigInt64Array(v34, 16, Map); } catch (e) {}
v45?.entries;
try { new v4(); } catch (e) {}
new BigInt64Array();
let v50 = ~-4294967297n;
v50--;
const v53 = [601759695];
try { v53.sort(); } catch (e) {}
const v55 = [1073741824,1073741823,1376142744,1073741825];
function f56(a57, a58, a59, a60) {
    let v62 = new Date();
    v62 /= v62;
    v55[10000];
    const o66 = {
        "maxByteLength": 2123830897,
    };
    const v68 = new SharedArrayBuffer(2611, o66);
    new Int16Array(v68);
    function f72() {
        -(-268435456 + -268435456);
    }
    f72.prototype = f72;
    const v76 = f72();
    try { new Int8Array(v76, a60, v22); } catch (e) {}
    const v79 = new Int8Array();
    v79.buffer;
    %OptimizeFunctionOnNextCall(f72);
    let v82;
    try { v82 = ("find").strike(); } catch (e) {}
    v82[17];
    try {
    } catch(e84) {
    }
    const o85 = {
    };
    o85.g = -4294967297n;
    const o86 = {
    };
    Array.h = o86;
    o86.g = -4294967297n;
    v82.d = v31;
}
let v87;
try { v87 = f56.bind(v9); } catch (e) {}
v87();
%PrepareFunctionForOptimization(f56);
f56();
%OptimizeFunctionOnNextCall(f56);
f56();
