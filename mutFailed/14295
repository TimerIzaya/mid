const v2 = new Float32Array(5);
const v5 = new Float64Array(128);
new Uint8Array(1);
class C12 extends Float64Array {
    [v5];
    constructor(a14, a15, a16, a17) {
        super(128, a17);
        class C20 {
            static toString(a22, a23) {
                const v25 = super[a23];
                try {
                    delete this[v25];
                    this[C20];
                } catch(e28) {
                }
            }
        }
        const v29 = new C20();
        new Uint8ClampedArray(v29, C20, C20);
        const o34 = {
            "execution": "async",
            "type": "minor",
        };
        EvalError(o34);
        let v40 = +(a17++);
        v40 >> v40;
        Math.asin(a17);
        +v40;
        ++v40;
    }
}
const v45 = new C12(5, Float64Array, 1, 128);
new C12(5, "string", 1, 1);
new C12(5, "function", 5, 1);
v2 ^ "function";
const t34 = "function";
t34[Float64Array] = v45;
new Map();
new Int16Array(-4294967295);
function f59(a60, a61, a62) {
}
const v63 = f59(512, 512, 14);
class C66 {
    static {
        for (let v68 = 0; v68 < 25; v68++) {
            const v69 = [601759695];
            const v70 = [1073741824,1073741823,1376142744,1073741825];
            for (let v71 = 0; v71 < 5; v71++) {
                try { new v63(C66); } catch (e) {}
                function f75() {
                    return this;
                }
                const v77 = new Int8Array();
                const v80 = [-2.2250738585072014e-308,1000000000.0,-1000000.0,-5.35444382765176,-Infinity,-6.958558613950346e+307,0.5201979093805401,2.58784763194331,-1e-15];
                const o81 = {
                    __proto__: v80,
                };
                o81.indexOf(-4294967297);
                const v84 = BigUint64Array * 19439;
                const v85 = v84 - v84;
                v68 ** v84;
                Number.isNaN(v85);
                const v90 = /ha$\P{Decimal_Number}+/vdisy.constructor;
                v90.$7;
                function f92(a93, a94) {
                }
                %VerifyType("function");
                Date[v90] = f59;
                [-892604085,-1359639310,-4201,8,536870912,5];
                [2735,-268435456,2147483648,4294967295,4096,7,-536870912,-1763008061];
                [-1419001300,-128,-6,-4294967295,3,9,-2,65537,13];
                f92();
                const v99 = v77.buffer;
                v99.__defineGetter__;
                Object.defineProperty(v99, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f75);
                try { v70["find"](..."find", undefined, ...v69); } catch (e) {}
                const o103 = {
                };
            }
        }
    }
}
