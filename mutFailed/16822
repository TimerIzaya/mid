const v4 = new Set();
const t1 = Array();
t1[0] = 0.6486308944701847;
const v8 = [-2,1024];
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v17 = 0; v17 < 100; v17++) {
        const o21 = {
            6: undefined,
            "d": undefined,
            [268435439n]: 2105444095n,
            __proto__: v8,
            "g": undefined,
            "b": 2105444095n,
            "arguments": this,
            valueOf(a20) {
            },
        };
        o21[1] = o21;
    }
}
const v28 = new Float64Array();
function f29() {
    for (let v30 = 0; v30 < 5; v30++) {
        for (let v31 = 0; v31 < 5; v31++) {
            let v33;
            try { v33 = Math.exp(v28); } catch (e) {}
            v33 *= Symbol.toPrimitive;
            function f36(a37, a38, a39, a40) {
                for (let v41 = 0; v41 < 5; v41++) {
                    (2136873598).constructor.parseFloat(f36);
                }
                return f36;
            }
            for (let v45 = 0; v45 < 5; v45++) {
                f36(f36, f36, v45, v45);
            }
            v33 = f29;
            const o47 = {
            };
            try {
                o47.c = f29;
            } catch(e48) {
            }
            try {
                function f49(a50, a51) {
                    const o52 = {
                    };
                    return o52;
                }
                const v53 = f49(f49, f49);
                function f54(a55) {
                    v53[213];
                    return a55;
                }
                f54(f49);
                %OptimizeFunctionOnNextCall(f54);
                const o58 = {
                };
                o58.c = f29;
                o58.h = v30;
            } catch(e59) {
            }
            try {
                const o60 = {
                };
                o60.c = f29;
                o60.h = v30;
                o60.f = v30;
            } catch(e61) {
            }
            try {
                const o62 = {
                };
                o62.c = f29;
                o62.h = v30;
                o62.f = Math;
            } catch(e63) {
            }
            v33 >>> v33;
        }
    }
    return Float64Array;
}
f29();
%OptimizeFunctionOnNextCall(f29);
f29();
for (let v71 = 0; v71 < 5; v71++) {
    function f72() {
        const v73 = [];
        try {
            const v74 = [];
            let v75 = 10;
            for (let i77 = 0;
                (() => {
                    const v79 = i77 < 6;
                    const v83 = new Uint16Array(8);
                    v83.fill(-383.07613008959197);
                    return v79;
                })();
                i77++) {
                f29();
                %PrepareFunctionForOptimization(f29);
                f29();
                f29();
                %OptimizeFunctionOnNextCall(f29);
                f29();
            }
            for ((() => {
                    for (let v93 = 0; v93 < 5; v93++) {
                    }
                })();
                (() => {
                    const v94 = v75--;
                    /c(?:ab)|cde/vdmy.exec();
                    const o100 = {
                        set e(a98) {
                        },
                        get e() {
                            return this;
                        },
                    };
                    return v94;
                })();
                ) {
            }
            const o101 = {
            };
            const v102 = o101 > v74;
            try { v102(); } catch (e) {}
            v73.some();
        } catch(e105) {
            function F107(a109, a110) {
                if (!new.target) { throw 'must be called with new'; }
            }
            function f112(a113, a114, a115, a116) {
                Uint8Array / a113;
                a114 < F107;
                const o122 = {
                    n(a120, a121) {
                        return v71;
                    },
                };
                return v71;
            }
            for (let v123 = 0; v123 < 500; v123++) {
                const v124 = f112();
                const v125 = v4[-3.0];
                v71 = v124;
                eval(v125);
                var d = 11n;
            }
            eval(e105);
        }
        return f72;
    }
    f72();
    class C130 {
    }
    new C130();
    const v133 = new Uint8Array(Uint8Array);
    const o134 = {
        ...v133,
    };
    o134[2] = o134;
    %OptimizeFunctionOnNextCall(f72);
}
