let v0 = [1309477043];
const v1 = [2,127,11,1170109796,12,-11001];
v1[6] = v1;
const v2 = [1970017668,9007199254740991,-5393,4294967296,1602998105,-61208];
30001 >> 30001;
({"length":v0,} = v2);
v2[724517555] = 9007199254740991;
v2.length;
v0 in v1;
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this?.constructor;
    try { new v15(v2, a13, a14); } catch (e) {}
    try {
        v1.c = a14;
    } catch(e17) {
    }
}
const v18 = new F10(30001, F10, v2);
v18.length = v18;
new F10(9007199254740991, v2, v0);
new F10(9007199254740991, v18, v2);
const v21 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v23 = new Int16Array(v21, Int16Array, Int16Array);
const v24 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = new Uint32Array(2684, 2684, 2684);
const v29 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
const v32 = v1[3];
function f34(a35, a36, a37, a38) {
    function f39() {
        let v43;
        try { v43 = new Int32Array(v21, a38, v23); } catch (e) {}
        try { v43.filter(a35); } catch (e) {}
        const v45 = new Int32Array();
        let v46;
        try { v46 = v45.entries(); } catch (e) {}
        const v47 = [-0.685155357392599,5.0];
        let v49 = -4294967295;
        v49--;
        let v52;
        try { v52 = new Float64Array(a36, a36, Float64Array); } catch (e) {}
        v52 = a36;
        b = v30;
        const v53 = v47.length;
        v53 != v53;
        try {
            v31.forEach(a36, v24);
        } catch(e56) {
            e56.c = e56;
            e56.name = e56;
            try { Float32Array.bind(v47); } catch (e) {}
            Float32Array[2] = a35;
            const v59 = new Float32Array(Float32Array, Float32Array, Float32Array);
            function f60() {
                return v21;
            }
            try { v46(); } catch (e) {}
            Object.defineProperty(v59, "h", { configurable: true, enumerable: true, get: f60 });
        }
        Symbol.toPrimitive;
        const o67 = {
            toString(a65, a66) {
                return -4294967297n;
            },
        };
        -268435456 - -268435456;
        const o82 = {
            [522675525n](a71, a72) {
            },
            [v53](a74) {
            },
            [-1]: 2684,
            1073741824: v27,
            "maxByteLength": -268435456,
            "b": v49,
            [-4294967297n](a76, a77, a78, a79) {
                eval();
            },
            "arguments": v29,
            256: a38,
            ...v30,
            ..."Vre",
            4: "Vre",
            "type": "Vre",
        };
        return a36;
    }
    f39.prototype = f39;
    f39()[6];
    eval();
    %OptimizeFunctionOnNextCall(f39);
}
for (let v87 = 0; v87 < 5; v87++) {
    v32();
}
