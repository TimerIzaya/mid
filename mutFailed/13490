function f0() {
    const o16 = {
        9: "byteLength",
        "d": "byteLength",
        4: "byteLength",
        "e": 1135542061,
        "f": "byteLength",
        "g": 1135542061,
        o(a5, a6) {
            this[-9.078253798305205] = this;
            new Int8Array(5);
            new a6(189);
            new Float64Array(230);
            return 189;
        },
    };
    return o16;
}
const v17 = f0();
const v18 = v17();
const v19 = f0();
v19[9] = v19;
try { ("b").replaceAll(f0, v18); } catch (e) {}
("1U8S")[1];
let v25 = 128;
v25++;
new Float32Array(v17);
255 - 255;
try { new Uint8Array(v18, Uint8Array, v25); } catch (e) {}
new Uint8Array(255);
Int32Array.length = Int32Array;
const v36 = new Int32Array(152);
v36[144] = v36;
for (let v37 = 0; v37 < 25; v37++) {
    const v38 = v37 % v37;
    v38 >>> v38;
    const v40 = [601759695];
    try { v40.entries(); } catch (e) {}
    const v42 = [1073741824,1073741823,1376142744,1073741825];
    try { v42.map(v38); } catch (e) {}
    v42[0] = v42;
    function f44(a45, a46, a47, a48) {
        function f49() {
            return a47;
        }
        try { v42["find"](..."find", a48, ...v40); } catch (e) {}
        const v53 = BigInt64Array.constructor;
        v53.name;
        const v55 = v53.call(f49);
        try { v55(); } catch (e) {}
        v55.caller = v55;
        return a47;
    }
    f44.arguments = f44;
    for (let v57 = 0; v57 < 10; v57++) {
        f44();
    }
}
