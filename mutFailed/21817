const v2 = new Uint16Array(1);
let v4 = typeof v2;
const v5 = v4?.slice;
try { new v5(128, 128); } catch (e) {}
const v8 = v2 === "undefined";
const t4 = "undefined";
t4[7] >>>= 128;
let v9;
try { v9 = new v5(v4, v4, v2, Uint16Array); } catch (e) {}
let v10;
try { v10 = new v9("undefined", v9, v5, "undefined", 128); } catch (e) {}
let v11;
try { v11 = v10(128, "undefined", v10); } catch (e) {}
v4 = v10;
v2[6] = v9;
const v12 = -"undefined";
v12 + v12;
const v15 = new Int32Array(1);
new Float64Array(256);
const v19 = [-1000000000.0,1.7944923022769181,0.7532568261299492,320.11393831046485,-7.575933866584766,2.077486821725695e+307,0.3414218324116042,-1.5515873043245419e+308,586.4566844461083];
const v20 = v19?.groupToMap;
try { new v20(v15); } catch (e) {}
const v22 = [-349.5447144293229];
let v23;
try { v23 = v22.flatMap(Int32Array); } catch (e) {}
[5.0,2.220446049250313e-16,-414.97360295686894,5.0,-2.0,-Infinity];
v23 - v9;
try { v5(v9, 1, v11, ...v19); } catch (e) {}
0.579579311646856 - 0.579579311646856;
-v4;
function f39() {
    return -45095n;
}
v23[v8] = v23;
class C44 {
    constructor(a46, a47) {
        const v48 = this?.constructor;
        try { new v48(f39, a47); } catch (e) {}
        a46 * a46;
        try { Symbol.toString(); } catch (e) {}
        v15[Symbol.isConcatSpreadable];
    }
    static #m(a56, a57, a58) {
    }
    /*
    constructor(a60, a61, a62, a63) {
        --a63;
        try {
            this.#m();
        } catch(e66) {
        }
    }
    */
}
const v67 = C44?.apply;
try { new v67(v2, v15); } catch (e) {}
const v69 = new C44(9007199254740991n, 64n, 22453n, -45095n);
v69.length = v69;
const v72 = new BigUint64Array(10);
v72["filter"](f39)[5];
