new Float32Array(255);
const v8 = new Int16Array(512);
new Int16Array(64);
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    class C16 {
        constructor(a18, a19) {
            512 * this;
            super.f;
            super[a19];
        }
    }
    function f23(a24) {
        function f25(a26, a27, a28) {
            const o36 = {
                toString(a30, a31, a32) {
                    a27 < this;
                    return super[a28];
                },
                get d() {
                    return this;
                },
            };
            return o36;
        }
        return 64;
    }
    C16[Symbol.match] = f23;
    const v39 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
    function f40(a41) {
        const v42 = [];
        function f43(a44) {
            const o48 = {
                ...v42,
                ...v42,
                "f": a44,
                set c(a46) {
                    a44[this != a46] <<= a46;
                },
            };
            return o48;
        }
        f43(f43);
        %OptimizeFunctionOnNextCall(f43);
        return v8;
    }
    v39.constructor = f40;
    function f50(a51, a52, a53, a54) {
        const v55 = /(?:a*)+q(?<a>.)/guds;
        v55.dotAll = v55;
        function f56(a57) {
            const v58 = v39.constructor;
            try { v58.isArray(v55); } catch (e) {}
            a57.constructor.$2.replaceAll(C16, a51);
            return a52;
        }
        for (let [i68, i69] = (() => {
                function f64(a65, a66) {
                    return a53;
                }
                return [0, 10];
            })();
            (() => {
                const v70 = i68 < i69;
                !v70;
                return v70;
            })();
            (() => {
                i69--;
                const v76 = Symbol.toPrimitive;
                const o80 = {
                    [v76]() {
                        v76["isArray"]();
                    },
                };
            })()) {
            for (let v83 = 0; v83 < 10; v83++) {
                f56(v55);
                function f85() {
                    const o86 = {
                        "c": v83,
                    };
                    return v83;
                }
            }
        }
        return a15;
    }
    for (let v87 = 0; v87 < 10; v87++) {
        f50();
    }
    %OptimizeFunctionOnNextCall(f50);
    f50();
}
new F12(F12, F12);
