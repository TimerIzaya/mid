function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(4294967295n); } catch (e) {}
    a5++;
    try {
        this.b = 4294967295n;
    } catch(e9) {
    }
    try {
        this.d = 4294967295n;
    } catch(e10) {
    }
}
new F3(4294967295n);
const v12 = new F3(-268435456n);
v12.b = v12;
new F3(-268435456n);
-1073741824 << -1073741824;
const v18 = [-9007199254740991,1582124927,-1073741824];
try { v18.values(); } catch (e) {}
try { v18.sort(-268435456n); } catch (e) {}
[128];
const v22 = [930648790,-654948403,1884956869,11,-9223372036854775807,1073741824,39907];
let v23;
try { v23 = v22.includes(268435441); } catch (e) {}
v23 || v23;
[1515135179,-23275,4121,929684005,-9223372036854775808,-16,-16,-10,-64832,-5];
const v26 = [9,2147483648,1085263044,1,536870889,257,5,-40205,1073741824,1024];
const v27 = v26[7];
v27 - v27;
const v29 = [1073741823,-4294967295,-65536,-15,-4294967296,16,1628746781,16,1499844526,-15374];
function f30() {
}
try { f30(); } catch (e) {}
try { Date.now(); } catch (e) {}
let v34;
try { v34 = new Date(v22, v22, v29, v22, v22, v29, -1073741824); } catch (e) {}
try { v34.setUTCMinutes(v27, v18, v27); } catch (e) {}
const v36 = new Date();
const v37 = v36?.setFullYear;
try { new v37(v36, v36, -1073741824); } catch (e) {}
let v39 = 2;
v39 >>> v39;
v39 >>> v39;
-(v39--);
Float64Array.prototype = Float64Array;
const v45 = new Float64Array(v39);
3845 >>> 3845;
3845 + 3845;
try { new Uint32Array(-1908542035, v26, v22); } catch (e) {}
const v51 = new Uint32Array(3845);
new Int32Array(4096);
const v56 = Array.name;
try { v56.strike(); } catch (e) {}
3 & 3;
const v60 = new Array(3);
let v61;
try { v61 = v60.copyWithin(Float64Array, v45); } catch (e) {}
v61.length = v61;
const v65 = ("h").split()[0];
try { v65.toUpperCase(); } catch (e) {}
try { v65.strike(); } catch (e) {}
const o105 = {
    [null]() {
        try { this.hasOwnProperty(v34); } catch (e) {}
        super.b;
        const v72 = [];
        try { v72.findLast(0.3083488057663979); } catch (e) {}
        const v74 = [0.3083488057663979,0.3083488057663979,0.3083488057663979];
        class C75 {
            constructor(a77, a78) {
                const v79 = this?.__lookupGetter__;
                try { new v79(-14n); } catch (e) {}
                let v81;
                try { v81 = this.hasOwnProperty(0.3083488057663979); } catch (e) {}
                v81 && v81;
                try { this.propertyIsEnumerable(v74); } catch (e) {}
                const v84 = a78[2];
                const v85 = v84 >>> v84;
                v85 >>> v85;
                let v87 = v84 - v84;
                v87--;
                const v89 = /W(jy2)/udy;
                try { v89.test(v89); } catch (e) {}
                const v92 = new Uint8Array();
                for (let v93 = 0; v93 < 500; v93++) {
                    v93 % v93;
                    const o98 = {
                        ...v92,
                        n(a96, a97) {
                        },
                    };
                }
                for (let v99 = 0; v99 < 5; v99++) {
                }
            }
        }
        const v100 = new C75(v72, v74);
        const v101 = v100?.__lookupGetter__;
        try { new v101(4294967295n); } catch (e) {}
        const v103 = v100?.constructor;
        try { new v103(4096, 4096); } catch (e) {}
    },
};
const v106 = o105?.null;
try { new v106(); } catch (e) {}
const v108 = o105?.__lookupSetter__;
try { new v108(o105); } catch (e) {}
function f110() {
    return 4096;
}
const v111 = f110?.constructor;
try { new v111(v12); } catch (e) {}
let v113;
try { v113 = f110.toString(); } catch (e) {}
try { v113.fixed(); } catch (e) {}
function f115(a116) {
    f110();
    %PrepareFunctionForOptimization(f110);
    f110();
    f110();
    %OptimizeMaglevOnNextCall(f110);
    const v120 = f110();
    v120 * v120;
}
let v122;
try { v122 = new f115(v51); } catch (e) {}
try { v122.constructor(v56); } catch (e) {}
Object.defineProperty(o105, "b", { enumerable: true, get: f110, set: f115 });
o105.null();
o105.null();
