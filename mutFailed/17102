new Uint16Array(2983);
new Uint16Array(218);
Math.log10(8);
for (let [v9,v10] of Math) {
}
new Int32Array(1207);
const v19 = new Uint8Array(1000);
const v22 = new Date();
v22.setUTCMilliseconds(285215976);
(512n)?.constructor;
Array();
Array(1000);
const v32 = new BigUint64Array(257);
const v33 = Uint8Array in v32;
v33 && v33;
try {
    v32.d = v19;
} catch(e35) {
}
new Float64Array([-9223372036854775808,-12]);
const v41 = Array.constructor;
try { new v41(9007199254740992n); } catch (e) {}
const v43 = new Float32Array(4);
v43[3] = v43;
Uint8Array.e = Uint8Array;
new Uint8Array(4096);
Float32Array.name;
new Float32Array(141);
7 + 7;
5 + 5;
new Uint16Array(5);
function f58() {
    return f58;
}
new BigInt64Array(7);
let v60 = -2n;
v60--;
function f64() {
    return 536870887n;
}
const v66 = new Set();
let [v67,,...v68] = v66;
function f69(a70, a71) {
    return f69;
}
new Promise(f69);
try { f64(); } catch (e) {}
let v75;
try { v75 = f64(); } catch (e) {}
v75 * v75;
Map.prototype;
new Map();
24560 ^ 24560;
-1000000000000.0 >>> -1000000000000.0;
Uint8Array.prototype = Uint8Array;
function F91() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    const v96 = Date();
    try { v96.small(); } catch (e) {}
    for (const v101 of Array(19793)) {
    }
    try {
    } catch(e102) {
    }
}
const v104 = new F91();
const v105 = v104?.constructor;
try { new v105(); } catch (e) {}
function F107(a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    const v112 = this?.__defineGetter__;
    try { new v112(v32, v32); } catch (e) {}
}
class C115 {
    constructor(a117) {
        try {
        } catch(e118) {
        }
        try {
        } catch(e119) {
        }
        for (const v120 of "bigint") {
        }
    }
}
class C121 extends C115 {
}
new Int16Array();
function f126() {
}
function f127(a128) {
    const v129 = 1024 <= 3585;
    v129 || v129;
    return f126;
}
const o131 = {
};
