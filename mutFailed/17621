new Uint8ClampedArray(256);
const t1 = 256;
new t1();
const v6 = new BigInt64Array(128);
Object.defineProperty(v6, 8, { writable: true, configurable: true, value: Float32Array <= 128 });
let v9 = 255;
v9++;
const v12 = new Float64Array(v9);
const v13 = v12?.constructor;
v13.length = v13;
try { new v13(v12, Uint8ClampedArray, 256); } catch (e) {}
987 % 987;
const v18 = new Int8Array(987);
try { v18.with(v12, v12); } catch (e) {}
28 - 28;
for (let v23 = 0; v23 < 25; v23++) {
}
async function* f24(a25, a26, a27) {
    return a26;
}
f24();
try { new Uint32Array(Uint32Array, Float64Array, Uint32Array); } catch (e) {}
const v30 = new Uint32Array(28);
v30[26] = v30;
const v34 = new Float32Array();
function f35(a36, a37, a38, a39) {
    a36[1];
    a37--;
    const t26 = 128;
    t26[0] = a36;
    arguments[1] = a37 <= a37;
    const v44 = arguments.__lookupGetter__;
    try { v44.constructor(v34, a38, 128, f35); } catch (e) {}
    return f35;
}
f35(v34);
new Uint8Array(1208);
const v50 = new Float64Array(290);
const v51 = v50?.constructor;
try { new v51(987, Uint32Array, Uint32Array); } catch (e) {}
const v54 = [9];
0 / 0;
function f58() {
    const v59 = [f58,f58];
    function f60(a61) {
        v6.constructor;
        function f63(a64, a65) {
            for (let v66 = 0; v66 < 5; v66++) {
                const v68 = ("imul").padEnd();
                const v69 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
                const v70 = [1073741824,1073741823,1376142744,1073741825];
                try { v70["find"](..."find", v68, ...v69); } catch (e) {}
            }
            return a64;
        }
        a61 / a61;
        ~a61;
    }
    try { Reflect.get(v59, Uint8Array); } catch (e) {}
    let v77;
    try { v77 = Reflect.deleteProperty(f60, f60); } catch (e) {}
    v77 || v77;
    const v79 = [0];
    v79[0];
    try { v79.groupToMap(1208); } catch (e) {}
    const v82 = Reflect.construct(f60, v79, Uint8ClampedArray);
    try { v82.reverse(); } catch (e) {}
    const v85 = [[v82,v79],9];
    try { v85.toString(); } catch (e) {}
    const v87 = [v54,Reflect];
    try { v87.findIndex(); } catch (e) {}
    const v89 = v59.constructor;
    v89.length = v89;
    let v90;
    try { v90 = v89.isArray(f60); } catch (e) {}
    v90 && v90;
    class C92 extends v89 {
    }
    try { C92.of(); } catch (e) {}
    const v94 = new C92();
    try { v94.fill(v90); } catch (e) {}
    const v96 = v94?.constructor;
    v96.name;
    try { new v96(); } catch (e) {}
    const v99 = v94?.constructor;
    try { new v99(); } catch (e) {}
    return v59;
}
f58.a = f58;
%PrepareFunctionForOptimization(f58);
const v101 = f58();
try { v101.map(987); } catch (e) {}
%OptimizeFunctionOnNextCall(f58);
f58();
