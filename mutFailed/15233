const v1 = new Set();
const v3 = new Map();
try { v3.values(); } catch (e) {}
new Set();
const v7 = v3?.forEach;
try { new v7(v3); } catch (e) {}
new Float32Array(1000);
const v13 = v3 % 11;
function f15() {
    function f16(a17, a18) {
        return ("getBigInt64").normalize();
    }
    return f16;
}
Object.defineProperty(Uint32Array, Symbol.iterator, { writable: true, configurable: true, get: f15 });
new Uint32Array(11);
const v26 = new Uint8Array(1713);
const v27 = v26[1571];
try { v13.apply(11, Set); } catch (e) {}
new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
new Float64Array(3341);
const v35 = new Int8Array();
const o36 = {
    __proto__: v1,
    "g": v27,
    ...Map,
    2147483647: v35,
};
