function f0() {
}
const v4 = [1073741825,8,1073741825,1073741825];
let v5;
try { v5 = v4.map(v4); } catch (e) {}
const v6 = [v4,v5];
let v7;
try { v7 = v6.pop(); } catch (e) {}
v7 /= [v6,8,v6,f0];
try {
    v5.e = v4;
} catch(e9) {
}
try { v4.fill(v7); } catch (e) {}
const v11 = [442159.5614401933,2.220446049250313e-16,-1e-15,932050.6194367213,2.0,-1000.0,-6.210557657314555e+307,1000000.0,5.0,-4.0];
const v12 = [-1000000.0,-9.356840594602635e+307,-2.0,0.4962527164789631,-4.935525669571328,Infinity,1e-15,-Infinity];
const v13 = [1000000000.0,2.0,-2.0,2.0,2.220446049250313e-16,1.0,0.437948882841514,0.42726418449620096];
let v14;
try { v14 = v13.map(v11); } catch (e) {}
let v15;
try { v15 = v13.reduce(v14); } catch (e) {}
const v17 = ~128;
new Uint32Array(128);
const v21 = 1607385320 >>> 583;
let v23;
try { v23 = new Int8Array(f0, v12, 583); } catch (e) {}
try { v23.entries(); } catch (e) {}
Int8Array.name = Int8Array;
const v25 = new Int8Array(583);
v25[269] = v25;
const v27 = 3542 * 3542;
Int32Array.e = Int32Array;
const v29 = new Int32Array(3542);
let v30 = 2799;
v30 >> v30;
const o32 = {
    "h": v25,
    "d": v17,
    "a": v15,
};
v30--;
BigUint64Array.d = BigUint64Array;
const v35 = new BigUint64Array(v27);
const o36 = {
};
o36.e = o36;
let {"b":v37,"byteLength":v38,"length":v39,} = v35;
try {
    new Uint32Array(v29, 1060721645);
} catch(e42) {
}
const v43 = v23.constructor;
try { v43.create(v43, v12); } catch (e) {}
v21.length = v43;
const v45 = v43(v30);
try { v45.hasOwnProperty(v45); } catch (e) {}
try { v45.toExponential(v12); } catch (e) {}
const v48 = v45.toExponential(v23);
try { v48.trimRight(); } catch (e) {}
let v50;
try { v50 = v48.slice(v35, v15); } catch (e) {}
try { v50.anchor(BigUint64Array); } catch (e) {}
try { v48.strike(); } catch (e) {}
