let v6;
try { v6 = (1000000000.0).n(1000000000.0, 1000000000.0); } catch (e) {}
const v8 = Symbol.asyncIterator;
v6[v8] = 1000000000000.0;
v8 | 0.8498847081560137;
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
const v16 = [-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f20() {
    let v22 = 1000000000000.0;
    const v23 = v22--;
    -v23;
    class C28 {
        constructor(a30) {
            const v32 = new Float32Array();
            try { v32.entries(); } catch (e) {}
            const v34 = new Uint16Array(12, -4294967296, v23);
            const v35 = new Float32Array(v34, -4294967296, 268435439, v22, v34);
            try { new C28(v35, a30, v34, v22, Float32Array); } catch (e) {}
            v16[-1];
            v32[9];
            v16.__proto__;
            try { v8.asUintN(-4294967296, C28); } catch (e) {}
        }
    }
    try { new C28(12); } catch (e) {}
    const v42 = new C28(257828.6336153492);
    function F43() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C46 extends F43 {
    }
    class C48 extends C46 {
        set d(a50) {
            super.d = this;
        }
    }
    const v54 = new C28();
    const v55 = new C28(-4294967296);
    const v56 = [v55,C28];
    [257828.6336153492,v55,v42,v55,v56];
    const v58 = [v55];
    class C59 extends C28 {
        static valueOf(a61, a62) {
            a61?.[v6];
            return a62;
        }
        [v42];
    }
    const v65 = new C59();
    const v66 = v58.constructor;
    try { v66.isArray(v58); } catch (e) {}
    class C68 extends v66 {
    }
    C68.a = C68;
    const v69 = new C68();
    const v70 = v69?.constructor;
    try { new v70(); } catch (e) {}
    Object.defineProperty(v69, 65537, { value: v54 });
    try { v65.m(v56); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f20);
f20();
%OptimizeFunctionOnNextCall(f20);
f20();
