const v2 = new Float32Array(2802);
const v5 = new BigUint64Array(0);
function F8(a10, a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    new Float32Array([49197,268435456,-12,-5156,35920,-45892,-667,536870888,65537,-12]);
}
new Uint16Array(144);
class C18 extends Uint16Array {
    static d = v5;
    static get f() {
        return 1584952362;
    }
    static #e = Uint16Array;
    static e;
    static a;
    p(a24, a25, a26, a27) {
        return Float32Array;
    }
    #c = BigUint64Array;
}
new C18();
new C18();
new C18();
const v36 = [-11,65536,65537];
function f37(a38, a39, a40, a41) {
    v36[1428717040];
    return a41;
}
f37();
const v44 = new Int8Array(1159);
function f45(a46, a47) {
    a47(f45);
    return f45;
}
new Promise(f45);
const v52 = new Uint8ClampedArray();
try {
    new Map("268435441");
} catch(e56) {
}
for (const v57 in v5) {
    const v58 = v44[1];
    const v59 = (0)[2];
    Date.parse(1159);
    function f62(a63, a64, a65, a66) {
        const v69 = new BigInt64Array(4046);
        let o70 = {
        };
        Math.acosh();
        [,...o70] = v69;
        return f62;
    }
    try { v52[v44](...v59, v58, ..."forEach"); } catch (e) {}
}
const v75 = [];
class C76 {
    g = C76;
    #e = v75;
}
~(v2 >>> 257n);
