const v6 = new Int8Array(770);
new Uint8ClampedArray(v6);
const v8 = [393312.26591337775,2.2250738585072014e-308,1.0];
const v9 = [-116.0850270135312,517232.113651362,1000000.0,0.22567266674197206];
const v10 = [-2.0,-1000000.0,5.701536794513791,-113238.88096298208,1.7976931348623157e+308,-133973.81009313627,8.865553651895084,0.6622898768127096,1000000.0];
const v11 = [4096];
[v11,v11,v9,v11];
const v13 = [v10,v8,4096,v11];
try { (208).getTime(-12n, -25237); } catch (e) {}
const v24 = new Float64Array(64);
function f25(a26, a27, a28) {
    return v24;
}
const v29 = new BigUint64Array(208);
Object.defineProperty(v29, "constructor", { value: f25 });
const o32 = {
    "f": "k",
    get f() {
        return this;
    },
};
function f33(a34, a35) {
    (-1).filter(a34);
    return f33;
}
function f38() {
}
([]).constructor;
Math.log10("f");
new Promise(v13);
