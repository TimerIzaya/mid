const v0 = [-469.9445637083646,-947.5850780593182,4.0,-1.0,-5.0];
const v1 = [271288.482879892,-3.0,2.0,-4.82263651788712,Infinity,8.24778350705661,560587.797855342];
[1.1253683477168317e+308,-1.229675468927788e+308,911729.6658214049,-1000000000000.0,5.0,1.3263334476361015e+308,0.940239117754121,0.8228969517821313,Infinity];
function f3(a4) {
    const o25 = {
        "d": v1,
        "f": v0,
        m(a6, a7) {
            try { new a6(a4, a7, a7, a4, v0); } catch (e) {}
            const o9 = {
            };
            for (let v10 = 0; v10 < 5; v10++) {
                Math.atan2(536870912, v10);
            }
            new Proxy(v0, o9);
            const v17 = new Uint16Array();
            v17[877];
            function f19() {
                new Int8Array(1073741823);
            }
            f19();
            f19();
            return a6;
        },
        "e": a4,
    };
    return a4;
}
const v26 = f3(v1);
const v27 = f3(v0);
v27.f;
const v29 = f3(v0);
const v30 = [v29];
[f3,v30,f3];
const v32 = [v27];
class C33 {
    static p(a35) {
    }
}
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this?.constructor;
    try { new v42(a38, a38); } catch (e) {}
    try { a39.isPrototypeOf(C33); } catch (e) {}
}
F36?.bind;
class C46 extends f3 {
    static e = v29;
    8 = v29;
    toString(a48, a49, a50, a51) {
        f3(a51);
        Reflect.construct(a50, [v29,v30,f3], a50);
        return v30;
    }
    static a = v32;
    constructor(a57, a58, a59) {
        a58.#a;
    }
    o(a62, a63, a64, a65) {
    }
    [v26] = v27;
}
new C46();
const v67 = new C46();
const v68 = new C46();
v68[8];
const v70 = [];
try { v70.toSpliced(v67, v67); } catch (e) {}
function f72(a73, a74, a75, a76) {
    try { a73.constructor(v30); } catch (e) {}
    try { a75.findLast(a76); } catch (e) {}
    a76 - a76;
    function f80(a81, a82, a83, a84) {
        arguments[2] = arguments;
        function f86() {
            const o87 = {
                __proto__: a83,
            };
            o87[0] = o87;
            return f80;
        }
        const v88 = f86();
        %OptimizeFunctionOnNextCall(f86);
        return v88;
    }
    function f89() {
        return f72;
    }
    class C90 extends f89 {
    }
    const v91 = new C90();
    v91.arguments;
    const v93 = v91.toString();
    for (let i = 0; i < 5; i++) {
        ["object",v93,"object",v70];
    }
    return a75;
}
for (let v96 = 0; v96 < 5; v96++) {
    v96 % v96;
    const o105 = {
        get a() {
            class C99 {
                constructor(a101, a102) {
                }
            }
            eval();
        },
    };
    f72(f72, f72, v70, v96);
}
%OptimizeFunctionOnNextCall(f72);
const v107 = f72();
try { v107.strike(); } catch (e) {}
