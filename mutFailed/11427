const v0 = [];
[-806.8740960751977,-428422.70579250227,-754.6797945565986,-1.0,4.2181254534703056e+307,-2.2250738585072014e-308,-5.981275600631255,-0.46248025066662635,0.6395499666035118,2.2250738585072014e-308];
const v2 = [1000000000000.0];
const v3 = [8.17440508534063,124.11868583604405,3.9642876834744903e+307,1000000.0,1000000000.0,8.731571999361819,-Infinity,1.0,-3.0,1000.0];
const v4 = [1603842647,-1868583948,14,-60702];
const v5 = v4?.groupToMap;
try { new v5(v3); } catch (e) {}
v4[1];
const v8 = [9];
try { v8.entries(); } catch (e) {}
const v10 = [-9007199254740991,64,736774964,-15049,65536,-65535,617326416,4294967295,3];
[v4,v10,v2,v10];
const v13 = [v8,v4,[v2,v0,v3,v2,v10],v10];
try { v13.toLocaleString(); } catch (e) {}
Map.prototype = Map;
const v16 = new Map();
try { v16.set(v10, v10); } catch (e) {}
function f18() {
    for (let v19 = 0; v19 < 5; v19++) {
        for (let v20 = 0; v20 < 5; v20++) {
            v20 + v20;
            Math.atanh(v20);
        }
    }
    return f18;
}
f18.arguments = f18;
f18();
%OptimizeFunctionOnNextCall(f18);
class C25 {
    #m(a27, a28) {
    }
    [-1];
}
const v29 = new C25();
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
class C32 {
    2 = v29;
}
try { new C32(); } catch (e) {}
const v34 = new C32();
v34[2] = v34;
function f35(a36, a37) {
    return f35;
}
try { new Worker(); } catch (e) {}
const v41 = [v34];
const o42 = {
    "arguments": v41,
    "type": "function",
};
o42.arguments = o42;
new Worker(f35, o42);
f18();
