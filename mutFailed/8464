"e" | ["e","e","e","e","e"];
let v6 = 8n;
v6++;
[v6] > v6;
new Int8Array(13);
const o14 = {
};
new Map(o14);
for (let i = 0; i < 25; i++) {
    new Uint8ClampedArray(129);
}
new Int32Array(512);
parseInt([-5.034735835956977e+307,-385.25474675985527], 127);
const t12 = [-1000000000000.0,-745.022234874873,-157924.67004693323,0.1181125914541652,-2.2250738585072014e-308,-956050.8340573441,3.0];
t12.p21 = undefined;
new BigInt64Array(7);
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
}
const o44 = {
};
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 9007199254740991;
}
new F45();
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -128n;
    } catch(e55) {
    }
}
const v56 = new F49(-29857n, 512, 512, -128n);
new F49(9007199254740992n, v56, 13, -25043n);
new F49(1073741824n, 9007199254740992n, 512, -29857n);
const v61 = new Uint32Array(4);
new Float64Array(v61);
let v64 = new F40();
function f65(a66, a67, a68, a69) {
    let v70;
    try { v70 = a67.apply(a69, a67); } catch (e) {}
    return v70;
}
%OptimizeFunctionOnNextCall(f65);
class C71 {
    constructor(a73, a74, a75) {
        ({"c":v64,...v64} = a74);
    }
}
