function f0() {
}
const v1 = [];
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    const v5 = this.constructor;
    try { new v5(); } catch (e) {}
    a4 % a4;
    try {
        this.c = v1;
    } catch(e8) {
        -Infinity;
        const o10 = {
        };
        o10.constructor;
    }
}
let v12 = 990169.2784993502;
1.0997072278366782e+308 / 1.0997072278366782e+308;
const v17 = new Map();
class C18 {
    o(a20, a21, a22, a23) {
        class C24 {
        }
    }
    static {
        const v26 = this.name;
        function F30(a32, a33) {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = this?.constructor;
            try { new v34(0.29489550717955537, a32); } catch (e) {}
            try { this.constructor(0.6822080711934364, this); } catch (e) {}
            try {
                this.f = 3.0;
            } catch(e37) {
            }
        }
        this.toString().lastIndexOf(v26);
    }
    static #valueOf(a41, a42, a43) {
        v12 -= a42;
        Object.defineProperty(v17, 1353982516, { writable: true, get: f0 });
        a42.h >>= a41;
        let v44;
        try { v44 = v17.values(); } catch (e) {}
        try {
            new Uint8ClampedArray(995);
            const v50 = new BigUint64Array(255);
            v50.buffer;
            v44.__proto__ = v44;
        } catch(e52) {
        }
        return Map;
    }
    static toString(a54, a55) {
        const v57 = super[a55];
        try {
            delete this[v57];
            this[v12];
        } catch(e60) {
        }
    }
    2 = v12;
    static #c = -30725.980492511764;
    static a;
}
new C18();
new C18();
new C18();
const v66 = [];
const v67 = [0n,0n,0n,0n];
function F68(a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = this?.constructor;
    try { new v72(v67, this); } catch (e) {}
    a71 ^ a71;
    this.b = v66;
}
new F68();
0 + 0;
4.358213919619994 / 4.358213919619994;
class C84 {
    #n(a86, a87, a88, a89) {
        super[this] = this;
    }
}
const t86 = (2136873598).constructor;
const v92 = new t86();
const v93 = v92?.constructor;
try { new v93(-30725.980492511764); } catch (e) {}
try { v92.toFixed(1030); } catch (e) {}
