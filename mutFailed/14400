const v0 = [0.43059375751373663,-910194.6826075858,-1.7976931348623157e+308,5.0,0.8254689289757148,0.19730866417905157];
const v1 = [-1.1210559017181097e+308,0.4662125620705868];
const v2 = [1000000000000.0,586.9142070592266,1.0224608783688343e+308,0.013389575275177257,-337.5035051976183,1.0,763740.196809435,0.004733733532072737,-1000000000000.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    function f6() {
        return v1;
    }
    function f7(a8) {
        ([16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9]).keys();
    }
    Object.defineProperty(this, "find", { writable: true, configurable: true, get: f6, set: f7 });
    a5[3] = a5;
    try {
        this.a = v2;
    } catch(e11) {
    }
    try {
        this.f = v2;
    } catch(e12) {
    }
}
new F3(v0);
let v14 = new F3(v1);
function f15() {
    return v1;
}
Object.defineProperty(v14, "find", { writable: true, configurable: true, enumerable: true, get: f15 });
const v16 = new F3(v1);
v16.toString = f15;
v16.a;
function f18(a19, a20) {
    Object.defineProperty(a19, "find", { configurable: true, enumerable: true, value: f18 });
    a20.find = v2;
    try { a19.find(a19); } catch (e) {}
    const o29 = {
        10: a20,
        [v16]: v0,
        set g(a23) {
            ++v14;
            this + a19;
        },
        536870889: v2,
    };
    o29[536870889];
    return o29;
}
const v31 = f18(v0, v1);
f18(v16, v1);
f18(v14, v14);
const v36 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v36.toString = f15;
try { v36.map(F3); } catch (e) {}
const v38 = [601759695];
const v39 = [1073741824,1073741823,1376142744,1073741825];
try { v39.toLocaleString(); } catch (e) {}
function f42(a43, a44, a45, a46) {
    arguments.b = arguments;
    const v48 = arguments?.constructor;
    try { new v48(a46); } catch (e) {}
    function f50() {
        -4294967295 & -4294967295;
        const o68 = {
            "c": -4294967297n,
            [522675525n](a56, a57) {
                try {
                } finally {
                }
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v38,
            valueOf(a59, a60) {
                return a45;
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v36,
            ...v38,
            "type": "Vre",
            ..."Vre",
            valueOf(a62, a63) {
                return a43;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a65, a66, a67) {
                return a43;
            },
            5: -4294967295,
            6: -268435456,
        };
        return "Vre";
    }
    f50();
    const v71 = new Int8Array();
    try { v71.toSorted(f18); } catch (e) {}
    v71.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f50);
    let v77;
    try { v77 = v39["find"](..."find", a46, ...v38, ...v39, ...522675525n); } catch (e) {}
    const v78 = v77 <= a45;
    v78 || v78;
    return arguments;
}
try { f42(-128, v31, v36, v39); } catch (e) {}
for (let v81 = 0; v81 < 5; v81++) {
    const v82 = f42();
    v82.b = v82;
    v82.b = v82;
}
%PrepareFunctionForOptimization(f42);
f42();
%OptimizeFunctionOnNextCall(f42);
f42();
