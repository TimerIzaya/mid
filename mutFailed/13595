function F0() {
    if (!new.target) { throw 'must be called with new'; }
    new BigInt64Array(1);
    F0.length;
    const v8 = new Int16Array();
    v8.reverse();
    try {
        this.f = 422803835;
    } catch(e10) {
    }
    try {
        this.d = 422803835;
    } catch(e11) {
    }
}
const v12 = new F0();
const v13 = new F0();
const v14 = new F0(F0, v12, v13);
const v15 = /(?:a?)*/udsy;
function f16() {
    const o22 = {
        ["536870889"]: "toString",
        set e(a20) {
        },
        get e() {
            return "536870889";
        },
    };
    return o22;
}
v15[Symbol.toPrimitive] = f16;
/f\p{Nd}\u{12345}\u{23456}+/gvs;
/\P{gc=Decimal_Number}/guy;
class C30 extends F0 {
    constructor(a32, a33) {
        super();
        super[v15] = v13;
    }
    #d;
    static g;
    #c;
    g = -1135271330;
}
new C30(v12, v12);
const v39 = new C30(v12, v12);
new C30(v14, v13, C30, -1135271330, v39);
class C44 {
    #b = 26507;
    static [26507];
    static get a() {
        super[this] = 26507;
        new BigUint64Array();
        new Float32Array(165);
        try {
            arguments.#b <<= arguments;
        } catch(e53) {
        }
        return SharedArrayBuffer;
    }
}
const v54 = new C44(-9007199254740991, C30, C44);
const v55 = v54?.constructor;
v55.name = v55;
let v56;
try { v56 = new v55(); } catch (e) {}
v56.constructor = Symbol;
const v57 = v56?.constructor;
try { new v57(); } catch (e) {}
new C44();
const v60 = new C44();
try { v60.constructor(); } catch (e) {}
const v62 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
try { v62.findLastIndex(C44); } catch (e) {}
[-9007199254740991,22341,65537];
const v65 = [9007199254740990,2147483647,-9223372036854775808];
const v67 = new Date();
const v68 = v67?.getHours;
try { new v68(); } catch (e) {}
let v70;
try { v70 = v67.setUTCSeconds(v62, v60); } catch (e) {}
v70++;
for (let v72 = 0; v72 < 5; v72++) {
    const v77 = new BigInt64Array(4046);
    let v78 = undefined;
    const v79 = v78++;
    v79 + v79;
    %VerifyType(4046);
    v60[v65];
    v60[undefined] = v67;
    try {
        v77.g = v78;
    } catch(e82) {
    }
    const v83 = v79 >> v79;
    v83 >> v83;
    const v85 = v83 >>> v83;
    let v86 = v85 % v85;
    v86--;
    const o88 = {
    };
    o88.e = o88;
    for (let i91 = 0, i92 = 10; i91 < i92; i91++) {
    }
}
