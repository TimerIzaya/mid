try { ("7").split("590017353", 268435440n); } catch (e) {}
-4294967295n >> -4294967295n;
const v14 = [-1000000000000.0,1.7976931348623157e+308];
const v15 = [-101318.64412347216,-7.678683405596393e+307,338.64564227005417];
try { v15.copyWithin(v14, v14); } catch (e) {}
[-679011.7675603079,-1.0,-2.220446049250313e-16,-1e-15,3.147462357179253e+307];
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -2147483647;
    } catch(e21) {
    }
}
F18.caller = F18;
const v22 = new F18();
const v23 = new F18();
const v24 = new F18();
function F25(a27) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = this?.constructor;
    try { new v28("o"); } catch (e) {}
    const v30 = a27?.constructor;
    try { new v30(); } catch (e) {}
    let v32;
    try { v32 = new v30(); } catch (e) {}
    v32.e;
    try {
        this.g = a27;
    } catch(e34) {
    }
}
F25.arguments;
const v37 = Symbol.iterator;
const o46 = {
    [v37]() {
        let v39 = 10;
        const o45 = {
            next() {
                v39--;
                const v43 = v39 == 0;
                const o44 = {
                    "done": v43,
                    "value": v39,
                };
                return o44;
            },
        };
        return o45;
    },
};
o46.c = o46;
const v47 = new F25(v24);
v47.g;
const v49 = new F25(v23, v47);
v49.length;
function f51() {
    return F25;
}
let v52 = f51.prototype;
try { v52.isPrototypeOf(v22); } catch (e) {}
Math[256];
128 >>> 128;
let v59;
try { v59 = new BigInt64Array(v24, BigInt64Array, v49); } catch (e) {}
try { v59.entries(); } catch (e) {}
const v61 = new BigInt64Array(128);
v61[28] = v61;
Uint16Array.length;
new Uint16Array(3171);
let v66 = 9;
new Uint16Array(v66);
let v69 = 7;
let v70 = v69--;
v70++;
function f74(a75, a76) {
    v66 = a76;
}
try { Promise.all(v37); } catch (e) {}
new Promise(f74);
const v80 = f51++;
Math.cbrt(v80);
Math.asin(v80);
const v83 = new F25(v23);
v83[v49] = 128;
v52 &&= Uint16Array;
const v86 = new Int16Array(5);
try { v86.join(f51); } catch (e) {}
new Int32Array(11);
287 * 287;
new BigInt64Array(287);
function F95(a97, a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(v37, Symbol, 54393); } catch (e) {}
    a99.c = a99;
    const v101 = this?.__lookupGetter__;
    try { new v101(Uint16Array); } catch (e) {}
    a98.a = a98;
    try {
        this.a = v47;
        try { new Symbol(); } catch (e) {}
        const v105 = Symbol.split;
        Symbol.unscopables = Symbol;
        Symbol.for(v105.description);
        v83[v105];
        const v110 = typeof a99;
        v110[0] = v110;
        ("Qhn")[0];
        v110 === "Qhn";
    } catch(e114) {
    }
    try {
        this.c = v24;
    } catch(e115) {
    }
}
F95.arguments;
F95.arguments = F95;
new F95(v47, v24, v22);
new F95(v47, v23, v24);
new F95(v47, v24, v22);
[65536,616125741,39049,129];
([536870888,2147483649])[1];
[1723484275,-249128090];
[];
class C125 {
    constructor(a127) {
        const v128 = this?.constructor;
        try { new v128(a127); } catch (e) {}
        const v130 = this.constructor;
        v130.e = v130;
        const v132 = new WeakSet();
        try { v132.delete(this); } catch (e) {}
        try { v132.add(a127); } catch (e) {}
        for (let v135 = 0; v135 < 5; v135++) {
            const v136 = v135 >>> v135;
            v136 >> v136;
        }
        a127++;
    }
}
C125.prototype = C125;
new C125();
new C125(C125);
