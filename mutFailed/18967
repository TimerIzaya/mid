const v2 = new Uint8ClampedArray(10);
const v5 = new Uint32Array(10);
function f6() {
    return v2[Symbol.match];
}
v5[Symbol.toPrimitive] = f6;
new Int8Array(185);
function f15(a16, a17, a18) {
    const o26 = {
        [a17](a20, a21, a22) {
            try { Uint32Array(a20, a20, a20); } catch (e) {}
            try {
                v5.length = 3229886930;
            } catch(e25) {
            }
            return this;
        },
        [v5]: v2,
        [185]: a16,
        "d": a18,
        "c": Int8Array,
        12: a17,
        "g": a18,
        ...v5,
    };
    return o26;
}
f15(185, 185, 10);
f15(10, 10, 10);
f15(10, 10, 10);
class C33 {
    static #o(a35) {
        this.g **= -1e-15;
        try {
            ("-2147483648").normalize();
        } catch(e37) {
        }
        return 268435456;
    }
    a = -1e-15;
    static 27 = 268435456;
    static f;
}
let v38;
try { v38 = new C33(); } catch (e) {}
v38.a = v38;
const v39 = new C33();
v39.a = v39;
new C33();
const v41 = new C33();
8 - 8;
8 - 8;
function f47(a48) {
    const v51 = new Float32Array(9);
    function f52(a53, a54, a55, a56) {
        const v57 = a54 >>> a54;
        v57 >>> v57;
        const v60 = new Int8Array();
        v60.entries().next();
        function f63(a64, a65) {
            a64.arguments = a64;
            return f63;
        }
        const v66 = f63(f63);
        class C68 extends Date {
        }
        const v69 = new C68();
        v69.getDay();
        return v66;
    }
    f52(9, Float32Array, v51, f52);
    return -1e-15;
}
Math[Symbol.toPrimitive] = f47;
let v75 = -15;
v75 | v75;
const v78 = 344.61638667171496 | 344.61638667171496;
const v79 = 344.61638667171496 & -11;
v79 << v78;
Math.sqrt(-11);
const v82 = Math.floor(v79);
const v83 = v82 + v82;
const v84 = v75--;
v84 >> v84;
const v86 = new Int32Array(8);
function f87() {
    return f15;
}
Object.defineProperty(v86, "constructor", { writable: true, get: f87 });
try { v86.constructor(v41, -1e-15, 8); } catch (e) {}
new Uint32Array(2950);
const v93 = 28 | 28;
const v95 = new Uint32Array(28);
function f96() {
    function f97() {
        %VerifyType(Uint32Array);
        let v99 = -1024n;
        v99 = 0n;
        return 0n;
    }
    return f97;
}
Object.defineProperty(v95, Symbol.toPrimitive, { writable: true, get: f96 });
v95[0] = v95;
let v102 = 0;
let v103 = -56850;
v103++;
1.1408591040999836e+308 >>> v83;
class C107 {
    #b = v102;
    g = 1.1408591040999836e+308;
    static {
        let v109;
        try { v109 = new this(); } catch (e) {}
        v109.e = v109;
        this.e = this;
        try { Math.tan(Math); } catch (e) {}
        let v113 = 44149;
        -v113;
        v113--;
        const v116 = v102++;
        const v117 = v116 & v116;
        let v118 = -v116;
        v118++;
        let v120 = ~v102;
        v120--;
        Math.log10(v113);
        const v123 = v113 + v102;
        v123 + v117;
        v123 >> v123;
        const v126 = Math.fround(v116);
        v126 >> v126;
    }
}
let v128;
try { v128 = new C107(); } catch (e) {}
v128.d = v128;
const v129 = new C107();
v129.g;
v129.g;
const v132 = new C107();
const v133 = v132?.__defineGetter__;
try { v133.constructor(v41); } catch (e) {}
try { new v133(v93, C107); } catch (e) {}
const o142 = {
    "execution": "async",
    set e(a140) {
        try {
        } catch(e141) {
        }
    },
};
gc(o142);
