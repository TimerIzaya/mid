function f0() {
}
const v3 = new BigUint64Array(251);
const v6 = new Int32Array(16);
new Uint8Array(3417);
class C10 {
    constructor(a12, a13, a14) {
        const v18 = [65537,268435441,63298,-5,1235122603];
        const v19 = [128,215394418];
        let v20;
        try { v20 = v19.entries(); } catch (e) {}
        const v21 = [-2,-4294967296,4294967297];
        function F22(a24, a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            const v28 = this.constructor;
            try { v28(1024, 1024, v18); } catch (e) {}
        }
        const v30 = new F22(-714582153, F22, -714582153, v19);
        v30.length;
        const v32 = new F22(9, v30, 9, v21);
        v32.b = v32;
        const v33 = new F22(1024, v32, v21, v21);
        let v41;
        try { v41 = ("string").trimStart(); } catch (e) {}
        let v42 = -1;
        -35417 - -35417;
        class C45 {
        }
        function f46(a47, a48, a49, a50) {
            return v33;
        }
        f46(-9007199254740991, v41);
        v20[v32] ||= ([1024,19026,1125846339]).length;
        const o58 = {
            set b(a57) {
                v42 <<= v42;
            },
        };
        function f59() {
            return a14;
        }
        super.b;
        a13 === this ? a13 : this;
        new f59();
        const o66 = {
            "maxByteLength": 444677045,
        };
        const v68 = new ArrayBuffer(10, o66);
        new BigInt64Array(v68);
    }
}
const v71 = new C10(251, 16, 3417);
new C10(v71, 3417, 3417);
const v73 = new C10(251, 3417, 251);
[251,v73,v71];
[BigUint64Array,Int32Array,C10,v3];
[v6,16];
const v77 = [];
const v78 = [v77];
class C80 extends Map {
    constructor(a82, a83) {
        super(v78);
    }
}
const v84 = new C80(v77, v78);
const v85 = new C80(v78, v84);
const v86 = new C80(v85, v84);
const v90 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v92 = new Uint32Array();
let v93 = -4294967297n;
const v94 = v93--;
const v95 = [601759695];
const v96 = [1073741824,1073741823,1376142744,1073741825];
function f98(a99, a100, a101, a102) {
    try { a99.toLocaleString(); } catch (e) {}
    const v104 = a99?.constructor;
    try { v104(); } catch (e) {}
    try { v104(); } catch (e) {}
    const v108 = arguments.length;
    Object.defineProperty(v84, "e", { configurable: true, enumerable: true, value: f98 });
    const v110 = v85["entries"](a101, ...v86, BigUint64Array, ..."entries", a100, v108);
    const v112 = Symbol.toStringTag;
    v85[v112] = v112;
    function f113() {
        let v115;
        try { v115 = ("Vre").charAt(4096); } catch (e) {}
        try { v115.lastIndexOf(); } catch (e) {}
        let v117;
        try { v117 = ("Vre").codePointAt(v90); } catch (e) {}
        v117 - v117;
        v117 ^ v117;
        let v120 = Float64Array;
        v120 = a100;
        let v121 = v90.length;
        v121++;
        try {
            v96.forEach(a100);
        } catch(e124) {
            e124.stack = e124;
        }
        const o135 = {
            "c": v93,
            "EPSILON": v95,
            valueOf(a126, a127) {
                return a126;
            },
            1073741824: v92,
            [v93](a129, a130, a131, a132) {
                eval();
            },
            "arguments": 5,
            256: a102,
        };
        return v121;
    }
    f113();
    const v138 = Array();
    let v139;
    try { v139 = v138.findLast(f98, v92); } catch (e) {}
    v138.unshift("entries", v110, "entries", v139);
    let v142;
    try { v142 = Int8Array.of(); } catch (e) {}
    try { v142.join(v104); } catch (e) {}
    const v144 = new Int8Array(v95);
    v144.c = v144;
    const v145 = v144.buffer;
    v145.maxByteLength;
    const v147 = v145.slice(v104);
    try { Int32Array(v147, arguments, v93); } catch (e) {}
    function f150(a151, a152, a153, a154) {
        return a154;
    }
    const v155 = new Int32Array();
    const v156 = v155[3];
    v156 + v156;
    for (let v158 = 0; v158 < 5; v158++) {
    }
    %OptimizeFunctionOnNextCall(f113);
    try { v96["find"](..."find", a102, ...v95, ...v96, ...522675525n); } catch (e) {}
    return a99;
}
for (let v161 = 0; v161 < 10; v161++) {
    f98(v92);
}
%OptimizeFunctionOnNextCall(f98);
f98(v95, v77, v94, f98);
