new Uint16Array(15);
new Uint32Array(188);
new Int32Array(3);
eval();
const v11 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
function F12(a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    const v16 = this.constructor;
    try { new v16(this, a15); } catch (e) {}
    this.c = a14;
}
const v18 = new F12();
const v20 = new Uint8Array(v11, v18, 15);
v11[6] = v20;
/voL*/uimy;
const v23 = /IR(?<!a)/uisy;
/a{1,2}?T\cAwihe(?:a?)*/vsy;
for (let v25 = 0; v25 < 5; v25++) {
    function f26() {
        for (let [i34, i35] = (() => {
                v23.decodeURIComponent([-2.216170140955498,-2.2250738585072014e-308,-643865.3403199288,NaN]);
                Promise.reject(Promise);
                v25 < 3;
                return [0, 10];
            })();
            i34 < i35;
            (() => {
                const v39 = i34++;
                v39 >> v39;
            })()) {
        }
        const v43 = [1000000000.0,1.0,1.33700765354115,3.759383313252208,0.7953224416766568,9.060355110242564e+307,1.7976931348623157e+308,1.7976931348623157e+308,2.220446049250313e-16];
        function F44(a46, a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            const v49 = this.constructor;
            try { new v49(a47, a46, a48); } catch (e) {}
            a48 + a48;
            try {
                this.b = v43;
            } catch(e52) {
            }
        }
        class C53 extends F44 {
            512 = v43;
        }
        return v25;
    }
    f26();
    %OptimizeFunctionOnNextCall(f26);
}
