const v2 = new BigUint64Array(64);
const v5 = new Uint8ClampedArray(7);
v5[4] = v5;
64 === 64;
try {
    v5.byteOffset = 64;
} catch(e8) {
}
v5[v2];
const v11 = new BigInt64Array(64);
try { Set.call(Set); } catch (e) {}
const v17 = new Set();
class C18 extends Set {
    static {
        try { new this(); } catch (e) {}
        const v22 = Symbol.matchAll;
        const v23 = v11[v22];
        try {
            new Set(Symbol);
            function F25(a27, a28, a29, a30) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = v22;
                } catch(e31) {
                }
            }
            new F25(this, 64, Symbol, 64);
            new F25("4294967297", 64, v17, 7);
            new F25("4294967297", 64, F25, v23);
            const t29 = "from";
            t29.f = v2;
        } catch(e35) {
            e35.b = e35;
        }
    }
    #f = v2;
    static get d() {
        let v39 = 2.497891570660336e+307;
        this / BigInt64Array;
        const v41 = -this;
        try {
            ("from").#f;
        } catch(e43) {
        }
        this.a **= 7;
        const v44 = ~10;
        --v39;
        10 && v39;
        v44 && v41;
        Math.acos(10);
        return v11;
    }
}
const v49 = new C18();
try { v49.has(7); } catch (e) {}
const v51 = new C18();
const v52 = v51?.constructor;
try { new v52(); } catch (e) {}
let v54;
try { v54 = v2.reduceRight(7, v51); } catch (e) {}
"from" instanceof Uint8ClampedArray;
const v56 = [-9,-633101055,-14449,59330,-301669945,-9223372036854775808,1073741824,-19919];
try { v56.reduceRight(v5); } catch (e) {}
[13,127,-850585954,-6,104337222,-256,-1];
const v59 = [46939,-9223372036854775807,9,7,-2147483649,976168763,-128];
try { v59.map(BigUint64Array); } catch (e) {}
new C18();
[578582648,-1423555019,-1199201626,268435440,296];
const v63 = /jP?/vs;
v63.d = v63;
try { ("-2143873431").codePointAt(v51); } catch (e) {}
try { ("-2").blink(); } catch (e) {}
new Float32Array(1899);
class C71 {
}
/l/dsy;
const v74 = /L(?:ab)+/udsy;
v74.g = v74;
/vElk/gsy;
try { Math.expm1(Math); } catch (e) {}
const v78 = Math.round();
for (let v79 = 0; v79 < 10; v79++) {
    async function f80(a81, a82, a83) {
        a81 >>> a81;
        try { a82.bind(a83); } catch (e) {}
        a81.acosh(v63);
        a82();
        await v78;
        return f80;
    }
    const v89 = f80?.constructor;
    try { new v89(1899); } catch (e) {}
    const v91 = v89(v79);
    function f92() {
        const t94 = ("match").__proto__;
        t94[1478] = f92;
        C71["match"] = v91;
        f80 *= v91;
        function f95() {
            return Float32Array;
        }
        return "match";
    }
    f92();
    f80(64, f80);
    Float32Array <= Set;
    v54 = "-2143873431";
    Map.d = Map;
    const v100 = new Map();
    v100[3] = "4294967297";
    const o102 = {
    };
}
