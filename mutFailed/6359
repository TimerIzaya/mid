const v5 = new Array(4096);
const v8 = new BigUint64Array(309);
new BigUint64Array(309);
const v14 = new Uint8Array(256);
let v15 = 591114.0785999324;
v15++;
const v18 = [v15,v15,v15];
function F20() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toString(this, F20, F20, this); } catch (e) {}
    const v23 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    let v26;
    try { v26 = Date.toString(F20, 9223372036854775807); } catch (e) {}
    Date();
    let v30;
    try { v30 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
    for (const v31 of v8) {
        v14 >> v26;
        let v35 = -58005;
        Math.asinh("cs4i1");
        const v37 = v35++;
        v37 & "cs4i1";
        Math.acos(v35);
        2173 && v31;
        "cs4i1" && v37;
        Math.sign(v35);
    }
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    const v43 = new Uint32Array(5);
    let v44;
    try { v44 = v43.reduce(Date); } catch (e) {}
    const v47 = new Set(v18);
    const v48 = v47?.add;
    let v49;
    try { v49 = new v48(v30); } catch (e) {}
    if (v14 < v49) {
        Object.defineProperty(v44, 15, { configurable: true, enumerable: true, get: Array });
    } else {
        new Uint8ClampedArray(14);
        ("minor").fontcolor([]);
        function f58(a59, a60) {
            a60.constructor(a60);
            return f58;
        }
        new Promise(f58);
        const o68 = {
            toString() {
                super[this];
                return this;
            },
            ...v23,
            n() {
                return this;
            },
        };
        new Uint16Array(5);
        new Int8Array(1476);
        const v74 = new Int8Array();
        v74.buffer;
        const o79 = {
            set e(a77) {
            },
            get e() {
                return this;
            },
        };
    }
    let v81;
    try { v81 = ("delete").blink(); } catch (e) {}
    v81[4] = v81;
    const v82 = v47["delete"](839612.5677247904);
    v82 || v82;
    const v84 = v82 || v82;
    const v85 = v84 && v84;
    const o87 = {
    };
    o87.b = o87;
    %OptimizeFunctionOnNextCall(Date);
    (839612.5677247904).apply(Float32Array);
    try {
    } catch(e90) {
        eval("");
    }
    o87.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    let v98;
    try { v98 = ("getPrototypeOf").blink(); } catch (e) {}
    try { v98.strike(v15); } catch (e) {}
    class C101 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C102 extends C101 {
        ["getPrototypeOf"] = C101;
    }
    try { new C102(); } catch (e) {}
    C102.e = C102;
    const v104 = new C102();
    const v105 = v104?.getPrototypeOf;
    try { new v105(); } catch (e) {}
    const v107 = v104.constructor;
    try { new v107(F20, v85); } catch (e) {}
    const v109 = Array(19793);
    for (const v110 of v109) {
    }
    const v113 = Math.tan(-1);
    const v116 = new Uint8Array(127);
    v116.indexOf(v113);
    const v118 = [v109,v109,v109,v109,v109];
    let v119;
    try { v119 = v118.includes(v49); } catch (e) {}
    v119 && v119;
    BigUint64Array.e = BigUint64Array;
    const v122 = new BigUint64Array();
    try { v122.reduceRight(v18); } catch (e) {}
    for (let v124 = 0; v124 < 5; v124++) {
        v124 >> v124;
    }
    [[v118,v118,v118]];
}
new F20();
new Uint8Array();
const v131 = new BigInt64Array();
function f132() {
    const v133 = [-1947047520];
    [v133,v133,v133,v5];
    const v136 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
    function f137(a138, a139) {
        return a139;
    }
    const v141 = new Promise(f137);
    v141[v136] += 36002;
    const v143 = v131[undefined] instanceof f132;
    const o144 = {
    };
    o144.g = o144;
    const o145 = {
    };
    o145.h = o145;
    try {
        const o146 = {
        };
        v131.h = o146;
        new Float32Array(1000);
        const o150 = {
        };
        o146.a = v15;
        o146.h = v143;
    } catch(e151) {
    }
    -12n << -12n;
    return undefined;
}
%PrepareFunctionForOptimization(f132);
const o154 = {
    "apply": f132,
};
const t156 = o154.apply;
new t156();
%OptimizeFunctionOnNextCall(f132);
f132();
