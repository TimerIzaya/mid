class C3 {
    static #a;
    #valueOf(a5, a6, a7, a8) {
    }
    toString(a10, a11, a12, a13) {
        const v17 = new Uint8ClampedArray();
        Math.floor(-6 / -6);
        new Uint8ClampedArray(798, ...v17, eval());
    }
    static get e() {
        const o26 = {
        };
        new Proxy(this, o26);
        const v30 = Symbol.asyncIterator;
        o26[v30];
        return v30;
    }
    constructor(a33) {
        this.b = this;
        let v35 = 62436;
        v35++;
        let v39 = NaN >> NaN;
        v39--;
        const v41 = a33--;
        const v42 = ~v35;
        v42 + v42;
        v41 && NaN;
        const v45 = -NaN;
        v45 >>> v45;
    }
    static g;
    toString(a48) {
        const v49 = this ^ this;
        v49 * v49;
        class C53 extends Array {
            10 = 134;
        }
        new C53();
        this.e;
        const v56 = this?.constructor;
        try { new v56(1000.0); } catch (e) {}
        a48--;
        try {
            true || true;
            true && true;
            this.fuck(true, a48, -1e-15);
        } catch(e64) {
            e64.message;
        }
        return C3;
    }
    [-65536];
    static d = -65536;
    e;
}
C3.prototype = C3;
const v66 = new C3();
v66.e;
const v68 = new C3();
async function* f70(a71, a72) {
    return Date;
}
f70(-65536, Date);
const v74 = v68?.constructor;
try { new v74(v66); } catch (e) {}
const v76 = new C3();
try { Reflect.construct(1000.0, 1000.0); } catch (e) {}
const v79 = [1000.0];
let v80 = v68.toString;
v80.name = v80;
v80.length = v80;
const v81 = Reflect.apply(v80, v76, v79);
try { new v81(v80); } catch (e) {}
v80 ^= v80;
class C83 {
    set h(a85) {
    }
    b;
}
[1000.0,v76,v76];
const v87 = [-65536];
try { v87.push(Reflect); } catch (e) {}
const v89 = [v87,v66,v76,v76];
try { v89.entries(); } catch (e) {}
try { v89.toString(); } catch (e) {}
1024n <= 1024n;
new SharedArrayBuffer();
function f101() {
    return 3585;
}
class C102 extends f101 {
    toString(a104, a105) {
        this.constructor(a104);
        -this;
    }
}
const v108 = new C102();
function f109(a110) {
    return 1024 <= 3585 ? 1024 : 3585;
}
v108.constructor = f109;
function f114() {
    return f114;
}
const v117 = new Uint32Array(2091);
for (const v119 in v117[0]) {
}
const v121 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
const v122 = /[(?:a*)*]/u;
v122.e = v122;
v122.dotAll;
switch (v121) {
    default:
        let v124;
        try { v124 = v121(); } catch (e) {}
        try { v124(); } catch (e) {}
        break;
    case v122:
}
