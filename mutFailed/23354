const v2 = new Uint16Array(-2147483649);
new Float32Array(64);
const v8 = new Float64Array(2543);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        F9.a = v8;
    } catch(e14) {
    }
    try {
        this.sticky = a12;
    } catch(e15) {
    }
    try {
        this.d = -2147483649;
    } catch(e16) {
    }
}
new F9(2543, -2147483649, -2147483649);
new F9(2543, 64, 64);
new F9(2543, -2147483649, 2543);
let v22 = new Float32Array(8);
new Uint8Array(2377);
new Int16Array(127);
new BigUint64Array(3768);
const v34 = new BigInt64Array(4046);
const v37 = new Int8Array(3768, Float32Array, Float32Array, 2543);
function f38(a39, a40) {
    v22++;
    let o50 = {
        get d() {
            this[115] /= 4046;
            let v44 = -908890636;
            return Math.log(this & --v44);
        },
        "d": a39,
        ...Int16Array,
        get e() {
            this.d;
            return a40;
        },
        __proto__: v37,
        ...Float32Array,
        ...BigUint64Array,
        536870888: BigInt64Array,
    };
    [,...o50] = v34;
    a40?.[4046];
    const o54 = {
        "maxByteLength": 3035,
    };
    const v56 = new ArrayBuffer(512, o54);
    new Float32Array(v56);
    return a39;
}
f38(115, 3768);
f38(4046, 3768, f38, 64, v22);
const v61 = f38(4046, 4046);
v61 + v61;
const v64 = (115)?.UTC;
try { new v64(v64, 4046, 4046, Date, BigUint64Array, BigUint64Array, Date); } catch (e) {}
Uint8ClampedArray.length = Uint8ClampedArray;
const v67 = new Uint8ClampedArray(Date, v2);
v67[2];
