const v1 = /a\W/guims;
function f2() {
    delete arguments.callee;
    return v1;
}
const v5 = /(a)\u0034/gvis;
const v6 = /((x)(x)(x)\3*Hb)/uds;
v6.b = v6;
const v7 = [v5,v1,v1,v1,v6];
const v8 = [v7,v7,v1,false,v1];
try { v8.includes(v8); } catch (e) {}
const v10 = [v8,false,false];
v10[2] = v10;
const v13 = new Float64Array();
const v15 = new BigInt64Array();
try {
    v13.reduce(v15);
} catch(e17) {
}
const v20 = [-4294967295];
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(); } catch (e) {}
}
class C25 {
    #toString(a27, a28, a29) {
    }
}
class C31 extends Set {
}
const v32 = new F21();
const v33 = v32.h;
new Uint16Array(9);
const v39 = [-504863.1885363821,-248378.80818527355,-147.11467188198264,-1.7039705769992093e+308];
for (let v40 = 0; v40 < 5; v40++) {
    v39 | v40;
}
function f42() {
    return f42;
}
const v44 = new Map();
v44.set(f42);
v44.constructor = f42;
const v46 = v44.constructor;
v46.e = v33;
const t46 = -1712539376n;
new t46(2417);
new Float32Array(4061);
const v51 = new F21();
try { v51.isPrototypeOf(-1712539376n); } catch (e) {}
const o54 = {
};
class C56 extends Array {
}
const v57 = new Float32Array();
v57.concat(o54);
const o65 = {
    get h() {
        return this;
    },
    5: 4061,
    "arguments": v20,
    "h": 50026n,
    6: v51,
    set b(a61) {
        function f62(a63) {
            return f62;
        }
        class C64 extends v46 {
        }
    },
    128: undefined,
    "e": v20,
    "e": v32,
};
