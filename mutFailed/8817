function F3(a5, a6, a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    try { new v9(v9, v9); } catch (e) {}
    typeof Float32Array;
}
class C13 {
    268435456;
    constructor(a15, a16) {
        let v14 = this;
        const v19 = new Date();
        const o20 = {
            __proto__: Date,
            [3.0]: v19,
        };
        new Int16Array(o20);
        v14 ^= "b";
        try {
            a15.dotAll = "replace";
        } catch(e23) {
        }
    }
    m(a25, a26) {
        try {
            super.findLast(this, this, "replace", "h");
        } catch(e31) {
        }
        return a25;
    }
}
new C13("b", "b");
let v33 = new C13("replace", "h");
const v34 = new C13("h", "h");
class C35 extends C13 {
    static ["b"];
    [v34];
    static {
        new C13("h", "h");
        const o41 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o41);
    }
}
new C35();
const t46 = "h";
new t46();
new C35();
v33 &= -2.0;
[4.150176177212824];
const v52 = new BigUint64Array(10);
try {
    Object.defineProperty(v52, 0, { writable: true, value: v34 });
} catch(e54) {
}
const v57 = [];
const v58 = [v57,v57,v57,v57];
const v59 = [v57,v58,v58,v58];
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
}
new Uint8Array(4714);
const v67 = -Infinity;
Math.exp(v67);
v59.length = v67;
