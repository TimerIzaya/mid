function f0() {
}
this.f = 1n;
const o7 = {
    ...this,
};
Array[2147483648] = Array;
class C10 extends Array {
    2 = 64;
}
try {
    this.f = Uint16Array;
} catch(e14) {
}
try {
    const v17 = new Int32Array(12);
    for (const v18 in v17) {
    }
} catch(e19) {
}
new Uint16Array(16);
new Uint16Array(2281);
new Uint32Array(48);
[5.0,-1000000000000.0];
[-3.4570322798414105e+307,169.39416483428454,-2.0,-1000.0,5.0,1.0,14338.693316202844,-1000000.0,955.167973693761,0.5696151956948133];
[-2.0,-2.0];
new Float64Array();
function f36(a37, a38, a39, a40) {
    a38.valueOf = f36;
    ("find").substr(a38);
    return f36;
}
f36[Symbol.toPrimitive] = f36;
f36();
const v46 = f36();
v46.toString = Symbol;
f36(v46, f36, v46, v46);
Array[2147483648] = 48;
new Array();
Date.valueOf = v46;
const o55 = {
    "type": "function",
};
const v56 = [-9007199254740990,49004,536870889,1000,257,65536,-9007199254740990,-9007199254740992];
v56.toString = f0;
const v57 = [v56];
try { v57.toLocaleString(v57); } catch (e) {}
const v59 = new Date();
Array[2147483648] = v59;
Date > "undefined" ? Date : "undefined";
let v62 = 0;
do {
    const v63 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function f65() {
        const v67 = -4294967295 != -4294967295;
        v67 && v67;
        const v69 = v63.length;
        const v71 = !(v69 < v69);
        v71 && v71;
        const o80 = {
            [-4294967297n](a74, a75, a76, a77) {
                eval();
            },
        };
        return -256;
    }
    f65();
    const o85 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o85);
    const v88 = /a\sHa*?/v?.toString;
    try { new v88(); } catch (e) {}
    for (let i = 0; i < 5; i++) {
        const o91 = {
        };
        gc(o91);
    }
    v62++;
} while (v62 < 2)
const v98 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
function f100(a101, a102, a103, a104) {
    const v105 = Symbol.toPrimitive;
    Object.defineProperty(a101, v105, { configurable: true, enumerable: true, value: f100 });
    const o118 = {
        toString(a107, a108) {
            function f109() {
                return a101;
                -3.0 | -9007199254740992;
                return 6;
            }
            a107.valueOf = f109;
            const v113 = a101 && Float64Array;
            v113[Symbol.toPrimitive] = f109;
            function f116() {
                a107 *= v105;
                return Float64Array;
            }
            Object.defineProperty(v113, "valueOf", { value: f116 });
            v113 <= v98;
            return this;
        },
    };
    return o118;
}
const v119 = f100(Date);
try { v119.toString(f100, v98); } catch (e) {}
