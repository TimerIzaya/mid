const v0 = [9,514,45344,97155779];
const v1 = [2471,-9223372036854775807,-1362037118,51850562,-9007199254740990,16,64,0,-44328];
[-19438,4];
v0.constructor;
new v1();
const v8 = new Uint32Array(3);
class C9 {
    constructor(a11, a12, a13, a14) {
        for (let v15 = 0; v15 < 5; v15++) {
            v8[v15] = a14;
        }
    }
}
new Uint8Array(1000);
async function* f21(a22, a23) {
    return 1000;
}
const o25 = {
    "b": 256,
};
const o30 = {
    [1000](a28, a29) {
    },
    __proto__: o25,
    ...o25,
    "b": 9007199254740991,
};
new Int16Array(6);
new Int16Array(259);
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = this.constructor;
    const v43 = /[a-zA-Z0-9]/gvisy;
    const v44 = /abc?/gvmy;
    v44[-2] ^= v43;
    v44.exec("Q8F");
    const v47 = new Int16Array();
    const v48 = v47.lastIndexOf(F37, a39);
    v48 ^ v48;
    try { new v41(this, a39); } catch (e) {}
    new Uint32Array(127);
    for (let v54 = 0; v54 < 5; v54++) {
    }
}
const v55 = new F37();
v55.constructor;
function f58(a59) {
    const o63 = {
        "execution": "async",
    };
    gc();
}
const v68 = new Uint8ClampedArray(4);
const v70 = new Int8Array(v68);
v70.lastIndexOf();
Math.tan(9007199254740992);
