function f0() {
}
f0.fill = f0;
try { ("number").valueOf(); } catch (e) {}
let v7 = -1e-15;
v7--;
class C9 extends f0 {
    h;
    ["all"];
    static #valueOf(a11, a12, a13) {
        let v15 = 8;
        v15 ^ v15;
        Math.imul(-436440.05230958306, a12);
        -(++v15);
        v15 + -436440.05230958306;
        return a12;
    }
    ["number"] = v7;
    g = 915035.2099434601;
}
new f0();
new C9();
new C9();
class C25 extends f0 {
    12;
    static {
        this.length = this;
        this.fill = this;
        const v29 = typeof this === "undefined";
        v29 || v29;
        function f31() {
            return "undefined";
        }
        try {
            super.fill("undefined");
        } catch(e33) {
        }
    }
    1157349175;
    2 = "number";
}
const v34 = new C25();
v34[2];
const v36 = new C25();
try { v36.constructor(); } catch (e) {}
new C25();
const v39 = [9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
v39[2] = v39;
const v41 = new Uint8Array(v39);
v41[0] = v41;
