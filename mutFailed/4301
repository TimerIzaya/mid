const v0 = [0.3420140861781603,-1000000.0,1000.0,-711672.2586364608,-2.2250738585072014e-308];
function f1(a2, a3) {
    const v5 = ("p").strike("p", "p", "p", "p");
    v5.search(v5);
    return "p";
}
v0[Symbol.toPrimitive] = f1;
const v9 = [-Infinity,0.5810969901208564,-1e-15,-9.122862348172557,-2.424418414200415e+305,1.7976931348623157e+308];
v9.toString = Symbol;
const v10 = [0.6881726154870714,2.0,253584.02039047913,0.69560146492659];
function f11() {
    return Symbol;
}
Object.defineProperty(v10, "toString", { get: f11 });
Object.defineProperty(Date, "toString", { value: f11 });
try { new Date(Date, v10, v0, v9, Date, v10, v0); } catch (e) {}
new Date();
const v17 = new Uint32Array(129);
v17[116];
new Uint8ClampedArray(3862);
1564 >>> 1564;
128 >= 128;
const v27 = new BigInt64Array(128);
function f28() {
    function F29(a31) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return v10;
}
v27.toString = f28;
const v33 = new Uint16Array();
v33.valueOf = f28;
v27 > v33;
new Float64Array(1564);
-24894 / -24894;
const v39 = [0.8307152163010869,1.0,0.0];
1494907924 >>> 1494907924;
v39.length = 1494907924;
%VerifyType(v39 instanceof -24894);
