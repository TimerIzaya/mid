const v0 = [];
class C1 {
    454916003;
    static #valueOf() {
        try {
            this.#valueOf(this, v0, v0, this);
        } catch(e4) {
        }
        return v0;
    }
    p() {
        new Int8Array(6);
        const v11 = new Uint8ClampedArray(16);
        new BigInt64Array(2498);
        return v11;
    }
}
const v15 = new C1();
const v16 = new C1();
const v17 = new C1();
function f18(a19, a20) {
    a19[454916003];
    a20[454916003];
    const o30 = {
        [a20](a24, a25, a26) {
            delete C1[2147483648];
            v17[980907997];
            try { a26(v15, a25, v0, a19, v15); } catch (e) {}
            return v16;
        },
        "b": v16,
        268435439: v0,
        __proto__: v16,
        3: C1,
        "a": v0,
        "f": C1,
        "c": v0,
    };
    return o30;
}
f18(v16, v16);
const v32 = f18(v15, v17);
v32[454916003] = v32;
[v17,v17(v15, v32)];
const v37 = ([f18,v17,[v0,v16,v16]])?.findIndex;
try { new v37(f18); } catch (e) {}
[257,-268435456,9929,3,908474310,1000,65537,5];
[5,-6,8,-12,-1,268435456,49283,-1073741824];
[9007199254740990,-4294967297,255,59714];
try { Math.imul(v0, Math); } catch (e) {}
const v44 = Math.round();
for (let v45 = 0; v45 < 10; v45++) {
    async function f46(a47, a48, a49) {
        try { a47.round(v16); } catch (e) {}
        await a47;
        return f46;
    }
    f46.length;
    f46(Math, f46, v44);
    const o55 = {
    };
    gc(o55);
}
