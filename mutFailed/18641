class C3 {
    static valueOf(a5) {
        let v6;
        try { v6 = ("toString").localeCompare("toString", "127"); } catch (e) {}
        const v7 = v6 || "stack";
        try { this.toSpliced("toString", "127"); } catch (e) {}
        try { v7(this, this, a5, "stack"); } catch (e) {}
        a5 = "stack";
        Math.expm1(v6);
        const v13 = v6 << "127";
        Math.hypot(v6);
        const v15 = Math.imul(v13, 0);
        Math.atanh(0);
        return v15;
    }
}
new C3();
const v18 = new C3();
const v19 = new C3();
const v20 = /a*/dms;
/4a\nb\bc/gvis;
const v22 = /(x)(x)(x)\1/gumsy;
class C23 {
    static {
        const o25 = {
        };
        new Proxy("127", o25);
    }
    #g = v19;
    constructor(a29, a30, a31) {
        super.f = "stack";
        a30 instanceof C3;
        const v35 = new Uint8Array(64);
        const v37 = new Uint16Array(v35);
        const v39 = new Uint16Array(3327);
        const v40 = v39.join(v37);
        try { v40.concat(); } catch (e) {}
        const v42 = ("toString")[10000];
        v42 >= this ? v42 : this;
        let v47 = 0.4666556655531985;
        Math.atanh(9007199254740992);
        let v49 = v47 - 9007199254740992;
        Math.max(v49);
        Math.imul(v49, v18);
        --v49;
        v47++;
    }
}
new C23(v22, v22, v20);
new C23("127", v18, v20);
new C23(C23, v22, v20);
function F57() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 1073741825;
}
const v60 = new F57();
new F57();
const v62 = new F57();
function f63(a64) {
    const o65 = {
        __proto__: v60,
        "execution": "toString",
        "a": F57,
    };
    o65.g;
    return o65;
}
f63(v62);
new Map();
function F70() {
    if (!new.target) { throw 'must be called with new'; }
}
const v72 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
const o73 = {
    __proto__: v72,
};
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = Date;
    try {
        for (let i = 0; i < 5; i++) {
        }
        new F75();
    } catch(e80) {
    }
}
const v81 = new F70();
function F82(a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
}
const v86 = new F82(v60, F82);
const t91 = v86.constructor;
new t91();
const v91 = [f63,f63,f63];
function F93() {
    if (!new.target) { throw 'must be called with new'; }
    9223372036854775807 < 9223372036854775807;
    const v98 = Date.toString(F93);
    const v100 = v98[23]?.trimRight;
    try { new v100(); } catch (e) {}
    v98.replaceAll(v81, -37859n);
    const v104 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v104[2] = v104;
    const v105 = v104[2];
    new Uint16Array(Uint16Array);
    %OptimizeFunctionOnNextCall(Date);
    ([4,4]).concat(4);
    v105 * v105;
    const v112 = [];
    function f113() {
        return v112;
    }
    let v115 = new Uint8ClampedArray(4);
    const v118 = 14 - 14;
    let v119 = BigUint64Array;
    class C120 {
        static c = 4;
        static e;
        constructor(a122, a123, a124) {
            const v125 = this?.constructor;
            try { new v125(v118, a123, C120); } catch (e) {}
            a122 % a122;
            let v128;
            try { v128 = a123.indexOf(Uint8Array); } catch (e) {}
            v128 << v128;
            a124 + a124;
            try { Math.expm1(v112); } catch (e) {}
            try { Math.sign(f113); } catch (e) {}
            let v135 = 1073741824;
            const v136 = v135--;
            v136 | v136;
            let v138 = --v115;
            v138--;
            v138--;
            let v141 = ~Infinity;
            const v142 = v141--;
            v142 + v142;
            --v135;
            -Infinity;
            v141++;
            --v119;
        }
    }
    new Int32Array(512);
    function f152() {
        class C153 {
        }
        const v154 = new C153();
        const v155 = [v154,v154,v154,v154,v154];
        const v156 = [f152,f152];
        class C157 extends C153 {
            [v154];
        }
        const v158 = new C157();
        v156.constructor;
        try { v158.m(v155); } catch (e) {}
        return f152;
    }
    f152();
    const v162 = new Set(v91);
    try { v162.add(v162); } catch (e) {}
    const v164 = v162.add;
    v164.f = v164;
    try { v164(v104); } catch (e) {}
    const v168 = new Uint8ClampedArray(995);
    new Int8Array(v168);
    try { ("delete").localeCompare(v162); } catch (e) {}
    const v173 = v162["delete"](839612.5677247904);
    const v174 = v173 || v173;
    v174 && v174;
    const v176 = v174 || v174;
    const v177 = v176 && v176;
    const v178 = v174 && v174;
    const v179 = v178 || v178;
    v179 || v179;
    const o182 = {
    };
    o182.b = o182;
    try { new Array(Array); } catch (e) {}
    try { Array(9223372036854775807); } catch (e) {}
    const v187 = ("getPrototypeOf").blink();
    const v188 = v187[28];
    const v189 = v188.strike();
    try { v189.split(v189, v177); } catch (e) {}
    v189[4] = v189;
    const v191 = v187.strike(591114.0785999324);
    const v192 = v191?.search;
    try { new v192(v104); } catch (e) {}
    const v194 = v191.replace(19793, v86);
    v194[11] = v194;
    class C196 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    try { new C196(); } catch (e) {}
    class C198 extends C196 {
        ["getPrototypeOf"] = C196;
    }
    new C198();
    const v200 = new C198();
    try { v200.getPrototypeOf(); } catch (e) {}
    const t200 = v200.constructor;
    new t200();
    const v204 = new C198();
    try { v204.getPrototypeOf(); } catch (e) {}
    const v206 = v204.getPrototypeOf;
    v206.length = v206;
    const v208 = BigUint64Array.of();
    try { v208.entries(); } catch (e) {}
    new BigUint64Array();
    new Int8Array();
    Uint8Array.length;
    const v215 = new C198();
    const v216 = v215.getPrototypeOf;
    try { v216.toString(); } catch (e) {}
    const v218 = new v216();
    v218.getPrototypeOf;
    const v220 = v215.getPrototypeOf;
    try { new v220(); } catch (e) {}
    let v222;
    try { v222 = new v220(); } catch (e) {}
    v222.getPrototypeOf = v222;
    const v223 = new C198();
    const v224 = v223?.getPrototypeOf;
    try { new v224(); } catch (e) {}
    const v226 = v223.getPrototypeOf;
    let v227;
    try { v227 = new v226(); } catch (e) {}
    v227.getPrototypeOf = v227;
    try { v226(); } catch (e) {}
    let v229;
    try { v229 = new v226(); } catch (e) {}
    v229.getPrototypeOf;
    try { v229.propertyIsEnumerable(v194); } catch (e) {}
    const v232 = v229?.constructor;
    try { v232.call(v188); } catch (e) {}
    let v234;
    try { v234 = new v232(v187, this, 4); } catch (e) {}
    v234.getPrototypeOf;
    const v236 = v234.getPrototypeOf;
    v236 >>> v236;
    try { v234.constructor(); } catch (e) {}
    const v239 = v223.constructor;
    let v240;
    try { v240 = new v239(F93, v178); } catch (e) {}
    v240?.constructor;
    v240?.getPrototypeOf;
    for (const v244 of Array(19793)) {
    }
}
new F93();
new F93();
