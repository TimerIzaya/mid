function f0() {
    class C2 {
        static {
            try {
                const t4 = null;
                t4.valueOf = C2;
            } catch(e4) {
            }
        }
    }
}
const v7 = new Uint16Array(3);
new Uint16Array(127);
function F13(a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    a15[4294967295] = a15;
}
const v19 = 9007199254740991n * Uint16Array;
v19 & v19;
new Uint8Array(64);
function f22(a23, a24) {
    function F25(a27, a28) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = a28;
        } catch(e29) {
            function f31() {
                for (let i33 = 0, i34 = 3;
                    (() => {
                        class C35 extends f31 {
                        }
                        i33 < 3;
                        return a24;
                    })();
                    i33 % i33, i33++) {
                }
                return f31;
            }
        }
        try {
            this.g = v7;
        } catch(e43) {
            const v46 = new BigInt64Array(3995);
            const v47 = new BigInt64Array();
            v46.indexOf(v47);
        }
        try {
            this.e = a24;
        } catch(e49) {
        }
    }
    new F25(a23, 3);
    new F25(64, a23);
    new F25(127, 64);
    return 3;
}
f22(127, f22);
class C54 extends Uint16Array {
    n(a56, a57) {
        const o58 = {
            "apply": f0,
            "isExtensible": f0,
            "setPrototypeOf": f0,
        };
        new Proxy(this, o58);
        return 64;
    }
    static 2 = Uint16Array;
}
new C54();
new C54();
new C54();
const v66 = new Uint16Array(3);
v66.reverse();
