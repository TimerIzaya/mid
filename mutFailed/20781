function f3() {
    return 61534;
}
class C4 extends f3 {
    valueOf(a6, a7) {
        const o16 = {
            [C4](a9, a10) {
            },
            o(a12) {
            },
            set e(a14) {
                return;
            },
        };
        try {
            o16.e = this;
        } catch(e17) {
        }
        try {
            const o18 = {
            };
            o18.e = this;
            const o21 = {
                "maxByteLength": 1293466293,
            };
            const v23 = new SharedArrayBuffer(1796, o21);
            function f25(a26, a27, a28, a29) {
                function f31(a32, a33) {
                    for (let [i37, i38] = (() => {
                            0 + 0;
                            return [0, 10];
                        })();
                        i37 < i38;
                        i37++) {
                    }
                    return a33;
                }
                arguments.constructor = f31;
                const t38 = arguments.constructor;
                t38();
                const v47 = new Uint32Array(a29, a29);
                v47[1];
                const v49 = [f25,f25,f25];
                [v49,[v49,v49,v49,v49]];
                Object.defineProperty(v49, "d", { writable: true, configurable: true, enumerable: true, value: Uint32Array });
                return v23;
            }
            o18.h = a7;
        } catch(e52) {
            new Uint8Array(127);
            new Int32Array(Int32Array);
            new BigUint64Array(1);
        }
        try {
            const o62 = {
            };
            o62.resizable = this;
            o62.h = a7;
            for (const v63 of C4) {
                [];
                Reflect.construct(f3, o62, a7);
            }
            o62.b = this;
        } catch(e67) {
            class C68 {
            }
            const v71 = new Uint8ClampedArray();
            Float32Array in v71;
        }
        try {
            const o73 = {
            };
            o73.e = this;
            o73.h = a7;
            o73.b = 38460;
        } catch(e74) {
        }
        return a6;
    }
}
const v75 = new C4(C4, 38460, 2009889284);
delete v75[8];
[-2.220446049250313e-16,-1000000000.0];
[1e-15];
[2.0,-1.3488549694395757e+308,5.0,0.6103610812839407,-0.0];
const t81 = -353.5437646605493;
new t81();
new C4();
([-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574]).slice();
let v87 = 0;
while ((() => {
        const v89 = v87 < 10;
        v89 || v89;
        return v89;
    })()) {
    for (let v91 = 0; v91 < 5; v91++) {
        "n" + v91;
    }
    v87++;
}
[-1000000000000.0,2.220446049250313e-16,4.0,3.8859827841223573e+307,0.0,-6.630813564277586,-707.5871256952014,-240.76572686108295,-1000.0];
[183.7662304708458,-696068.4339402176,1000.0,-0.0,852.4945403529862,2.0];
[5.928485461014931,-3.5278071672211535,-3.0,-1000000000000.0];
const o102 = {
    "maxByteLength": 10000,
};
const v104 = new ArrayBuffer(3471, o102);
-15 >> 8798;
const v111 = new Int32Array(127);
v111.toSorted();
const v113 = new Uint8Array(v104);
v113[938] = v113;
const o114 = {
};
gc(o114);
