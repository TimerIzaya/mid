const v5 = [Infinity,-1e-15,-5.383093003658099,-232599.5850816276];
v5.length = 64;
function f7() {
    function f8(a9, a10) {
        try { a9.n(a10, v5, 64, 1000.0, a9); } catch (e) {}
        new Date(..."undefined");
        return -575.1676567650243;
    }
    return f8;
}
Object.defineProperty(Math, Symbol.toPrimitive, { get: f7 });
Math.tan(4.0);
try { ("P").codePointAt(-1.599497644402461e+308); } catch (e) {}
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 4.0;
    a25 >> a25;
    a26 - a26;
    a25 ^ a25;
    a26 - a26;
    try {
        this.c = a25;
    } catch(e31) {
    }
}
const v32 = new F23(-1.599497644402461e+308, -1.599497644402461e+308);
v32.constructor = Symbol;
const v33 = v32?.constructor;
try { new v33(1000.0, Math); } catch (e) {}
const v35 = new F23(-575.1676567650243, -575.1676567650243);
v35[Symbol.toPrimitive] = Symbol;
const v38 = v35?.constructor;
let v39;
try { v39 = new v38(v35, "setUint16"); } catch (e) {}
v39.c = v39;
const v40 = new F23(1000.0, -575.1676567650243);
v40.c = v40;
const v42 = ([-1.599497644402461e+308,false,1000.0,"setUint16","P"])[1];
v42 || v42;
[[v32,"toString"],-1.599497644402461e+308,v35];
Int16Array.name;
new Int16Array(253);
function f52(a53) {
    Math.acos(1);
    return Math;
}
BigUint64Array[Symbol.toPrimitive] = f52;
new BigUint64Array(2994);
127 - 127;
Int8Array.e = Int8Array;
const v63 = new Int8Array(127);
v63[91] = v63;
try { v63.toSorted("toString"); } catch (e) {}
try { ("b").fontsize("toString"); } catch (e) {}
let v67;
try { v67 = ("b").toWellFormed(); } catch (e) {}
try { v67.fontcolor(BigUint64Array); } catch (e) {}
const t57 = "setYear";
t57[6] = "setYear";
for (let v70 = 0; v70 < 25; v70++) {
    v70 ^ v70;
}
const v73 = Math.asin();
v73 - v73;
function f75() {
    const o78 = {
        get b() {
            super[this] = this;
            return f75;
        },
        ..."b",
    };
    return o78;
}
class C80 {
}
C80.name = C80;
class C81 extends C80 {
    [false] = false;
    get f() {
        for (const v84 of this()) {
        }
        class C85 {
            set h(a87) {
            }
            b;
        }
        try { C85(); } catch (e) {}
    }
}
try { ("stringify").trimLeft(); } catch (e) {}
Math.atan2(9, 5);
127 >> 127;
const v98 = new Int8Array(127);
const v100 = new WeakSet();
for (const v101 in v98) {
    v101[0] = v101;
    v100[v101] = v101;
}
