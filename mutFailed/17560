class C3 {
    static #c = 25909;
    static get a() {
        function f5() {
            function f7(a8) {
                C3[Symbol.toStringTag];
            }
            this.onmessage = f7;
            const o12 = {
                "isExtensible": f7,
            };
            new Proxy(this, o12);
        }
        const v17 = [];
        const o18 = {
            "arguments": v17,
            "type": "function",
        };
        const v19 = new Worker(f5, o18);
        const o20 = {
        };
        try {
            o20.f = this;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.f = this;
            for (let v23 = 0; v23 < 32; v23++) {
                o22["p" + v23] = v23;
            }
            o22.e = this;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            o27.f = this;
            this.b;
            const o32 = {
            };
            try {
                o32.f = o20;
            } catch(e33) {
            }
            try {
                const o34 = {
                };
                o34.f = o20;
                o34.h = -1426098895;
            } catch(e35) {
            }
            try {
                const o36 = {
                };
                o36.f = o20;
                o36.h = -1426098895;
                o36.e = o27;
            } catch(e37) {
            }
            try {
                const o38 = {
                };
                o38.f = o20;
                o38.h = -1426098895;
                o38.b = v19;
            } catch(e39) {
            }
            o27.e = 25909;
            o27.d = this;
        } catch(e40) {
        }
        try {
            let o41 = {
            };
            o41.f = this;
            o41.e = this;
            const v42 = f5();
            super.d &&= 256;
            o41 = this;
            o41 ^= o20;
            try {
                super.asin("function", this, o41, o18, v42);
            } catch(e44) {
            }
            o41.g = this;
        } catch(e45) {
        }
        return o20;
    }
    p(a47) {
        super[this];
        return 256;
    }
    static [C3] = C3;
}
new C3();
new C3();
const v51 = new C3();
[16,-4294967297,6,-964090017,-2,-65537];
const v53 = [-9223372036854775808,4294967296,-268435456,4096,30054,618994789,-65536,13,1619132208];
[184791.33719420154,-2.220446049250313e-16];
[5.0,-8.518540808193055e+307,-Infinity,1000000000000.0,4.0,0.9517088715881594];
/Ee+/gsy;
Int8Array.b = v53;
function f59() {
    gc();
    return Int8Array;
}
%PrepareFunctionForOptimization(f59);
f59();
const v66 = new Uint8ClampedArray(14);
const v67 = v66?.constructor;
try { new v67(v51, 256, 25909); } catch (e) {}
Uint32Array.length;
const v72 = new Uint32Array(9);
Int32Array.d = Int32Array;
const v75 = new Int32Array(129);
function f78(a79, a80, a81, a82) {
    a80--;
    a80 | a80;
    const v85 = a79 / a79;
    const v86 = a80 < a80;
    let v87 = a81 >>> a81;
    v87++;
    const o92 = {
        "b": 14,
        "c": a82,
        n(a90, a91) {
            return v86;
        },
    };
    return v85;
}
try { f78.toString(); } catch (e) {}
for (let v94 = 0; v94 < 625; v94++) {
    let v96 = -4;
    const v99 = v96 - v75;
    v99 - v99;
    v96--;
    (v72 >>> v99) || -3.076513032512258;
    f78(Uint8Array, 2);
}
