function f0() {
    const v5 = new Uint16Array(821);
    new Uint8Array(v5);
    const o22 = {
        "e": -4,
        set a(a10) {
            const v11 = a10++;
            let v12;
            try { v12 = new a10(this, v11, this); } catch (e) {}
            v12 <= 2.220446049250313e-16;
            const v16 = [];
            [v16,v16,v16,v16,v16];
        },
        get h() {
            try {
                ("toPrimitive").padStart(-141157056);
            } catch(e21) {
            }
            return "toPrimitive";
        },
    };
    return o22;
}
const v23 = f0();
const v24 = f0();
const v25 = f0();
9n in v23;
Math.asin(v24);
Math.asin(v25);
const v34 = Math.atanh(v25);
Math.trunc(v24);
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -4294967296n;
    } catch(e42) {
        const t36 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
        t36.length = 1;
        async function f45(a46, a47, a48) {
            return a46;
        }
    }
    function F49(a51) {
        if (!new.target) { throw 'must be called with new'; }
    }
    F49.arguments = F49;
    const o57 = {
        get a() {
            eval("-9007199254740990");
            return 6;
        },
    };
}
const v58 = new F37(v24, v23, v24);
const v60 = 4294967296n * 4294967296n;
v60 | v60;
function f62(a63, a64) {
}
const v65 = new F37(v23, 9n, v25);
new F37(v25, -268435456n, v24);
const v72 = new Uint32Array(65536);
const v75 = new Date(Uint32Array);
v75.getSeconds();
const t62 = 824983.4173693366 === v58 ? 824983.4173693366 : v58;
t62[6] &= -3.0;
let v79 = f62(-4294967296n, v34);
let v82 = 257;
f0 + v79;
Math.abs(v65);
--v79;
Math.sinh(f0);
v82++;
Math.cos(v79);
const v90 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
parseInt(v90);
for (const v93 in v72) {
    v90.escape();
}
