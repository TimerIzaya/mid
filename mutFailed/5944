const v0 = /tda+/gvimy;
const v1 = /T(?=)/vds;
/(^xyz{93})/guy;
const v3 = [679.0401583227665,0.5501524089392024,-1000000000000.0,-2.2250738585072014e-308,1.7976931348623157e+308,209.2995698393438,-1.0,-1000000000.0];
let v4;
try { v4 = v3.includes(v0); } catch (e) {}
const v5 = !v4;
([-2.0,-4.0,-2.0,-8.970643486236485,-2.0,NaN])[3];
const v8 = [3.0,Infinity,5.054134632420524,2.2250738585072014e-308,5.0,-6.686024920619316e+307];
let v10;
try { v10 = ("xg").fixed(); } catch (e) {}
let v13;
try { v13 = ("MIN_VALUE").blink(); } catch (e) {}
try { ("object").substring(v4, v4); } catch (e) {}
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    function f23() {
        throw v3;
        new Date();
        return v1;
    }
    a21.constructor = f23;
    const v26 = a21?.constructor;
    let v27;
    try { v27 = new v26(); } catch (e) {}
    a21 === a21;
    const v29 = this.constructor;
    try { new v29(v27, v29, v29); } catch (e) {}
}
F18.arguments = F18;
function f31() {
    class C32 {
    }
    C32.prototype;
    let v34;
    try { v34 = new v0(); } catch (e) {}
    try { v34.toString(); } catch (e) {}
    const v36 = new C32();
    try { v36.hasOwnProperty(v8); } catch (e) {}
    v36.constructor = f31;
    for (let v38 = 0; v38 < 5; v38++) {
        const v40 = new F18(undefined, v36);
        const v41 = v13?.constructor;
        try { new v41(v40, v36, v3); } catch (e) {}
        v40.length = v34;
        v40.length = v40;
    }
}
v5.arguments = f31;
%PrepareFunctionForOptimization(f31);
v10();
%OptimizeFunctionOnNextCall(f31);
f31();
