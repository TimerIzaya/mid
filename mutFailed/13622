new Array(940);
const v5 = new Uint8ClampedArray();
class C6 {
    constructor(a8, a9, a10, a11) {
        const v12 = this.constructor;
        try { new v12(a10, a11, a8, v12); } catch (e) {}
        for (let v14 = 0; v14 < 5; v14++) {
            v5[v14] = a11;
        }
    }
}
class C17 {
    constructor(a19, a20, a21) {
        const v22 = a21.concat();
        v22[1] = v22;
    }
    toString(a24) {
        super[this];
    }
    static #g = 4096;
    p(a27, a28) {
        new Float32Array(7);
        const v38 = new Int8Array(1159);
        v38[2];
        const o40 = {
            "execution": "async",
            "type": "major",
        };
        gc(o40);
        return -925387725;
    }
}
new C17();
new C17();
new C17();
new Set();
const v47 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v48 = /\c4a.[(x)(x)(x)\4*(x)(x)(x)\3*]/gmy;
("by").normalize();
const o53 = {
    "maxByteLength": 2736188941,
};
const v55 = new SharedArrayBuffer(4, o53);
new Uint16Array(v55);
const v58 = /G(a)\1a+8?/vdimsy;
const v59 = [Infinity];
try { v59.pop(); } catch (e) {}
const v61 = [2.2250738585072014e-308,1.949684848262672,4.0];
try { v61.push(v47); } catch (e) {}
const v64 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0])?.toStringTag;
let v65;
try { v65 = new v64(); } catch (e) {}
let v66 = -198895178;
v66 | v66;
24356 % 24356;
class C70 {
    static #n(a72, a73) {
        function F74(a76, a77, a78, a79) {
            if (!new.target) { throw 'must be called with new'; }
        }
        v58[243] -= v65;
        ++v66;
        F74(v48);
    }
}
