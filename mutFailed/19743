let v1 = 51555.49196345825;
class C3 {
    static m(a5, a6) {
        let v4 = this;
        ({"e":v1,"f":v4,"g":a5,} = v4);
        return v4;
    }
    ["-526292321"] = 695.867604488815;
    p(a8, a9) {
        try {
            this.fuck("-526292321", v1, a8);
        } catch(e11) {
        }
        return this.f;
    }
    constructor(a14) {
        gc();
        function f17() {
            class C18 {
            }
            new C18();
            return C18;
        }
        %PrepareFunctionForOptimization(f17);
        f17();
        %OptimizeFunctionOnNextCall(f17);
    }
}
const v21 = new C3();
const v22 = new C3();
new C3();
("function").normalize();
let v28 = [-5.034735835956977e+307,-385.25474675985527];
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this.valueOf().constructor;
    try { new v34(); } catch (e) {}
    --v28;
    Math.imul();
}
new F29("-526292321");
const v44 = [];
const v45 = /a\q5(?:(?=a))a\11\P{gc=Decimal_Number}/gis;
const v48 = Promise.reject(Promise);
v48.then(v48);
const v52 = new Promise(v1);
try {
    v52.e = v28;
} catch(e53) {
}
const v54 = Array(2433);
const v55 = v54.concat(v54);
-10 ^ -10;
function f58() {
    const v60 = Symbol.toPrimitive;
    class C63 {
        #g = 5483n;
        #e = 5483n;
        #d = 9n;
        c = 9n;
        8;
    }
    const v64 = new C63();
    c = v64;
    const v65 = v60.description;
    const o66 = {
    };
    const v67 = v65.constructor;
    let v68;
    try { v68 = v67.raw(o66); } catch (e) {}
    return v68;
}
f58();
%OptimizeFunctionOnNextCall(f58);
function f70(a71, a72, a73, a74) {
    function f78() {
        return 3.5885237423067196;
    }
    function f80(a81) {
        try {
            new f78();
        } catch(e83) {
        }
    }
    this.onmessage = f80;
    function F84(a86) {
        if (!new.target) { throw 'must be called with new'; }
        a86 ^ a86;
        const v88 = this.constructor;
        v88.c = v88;
        try { new v88(3n); } catch (e) {}
    }
    const v91 = new BigInt64Array(4046);
    let v92 = undefined;
    const v93 = v92++;
    const v94 = v93 + v93;
    const v95 = v93 >> v93;
    const v96 = v95 >>> v95;
    for (let v97 = 0; v97 < 5; v97++) {
    }
    const v98 = v44.constructor;
    try { v98(); } catch (e) {}
    new F84(-3286);
    function F101(a103, a104, a105) {
        if (!new.target) { throw 'must be called with new'; }
        this.f = v45;
    }
    const v106 = new F101(v94, 4096, v96);
    const v110 = new Int8Array(8);
    const v112 = [v110];
    Reflect.construct(Uint16Array, v112);
    v106.f = v106;
    let v114;
    try { v114 = a72.n("-526292321"); } catch (e) {}
    Reflect.construct(f78, [], F84);
    v114 **= F29;
    new F101(a72, v93);
    let o121 = {
        get b() {
            return f80;
        },
        "c": v112,
        get e() {
            return v55;
        },
    };
    [,...o121] = v91;
    return v45;
}
for (let v122 = 0; v122 < 5; v122++) {
    f70();
}
Int32Array.bind(Int32Array, Int32Array, Int32Array);
%OptimizeFunctionOnNextCall(f58);
const v129 = new Uint32Array(16);
v129.length = 1073741824;
class C130 {
}
const o131 = {
    __proto__: C130,
};
try { v21.p(Uint32Array, "I1", F29); } catch (e) {}
Object.defineProperty(v22, f70, { configurable: true, set: f70 });
const v134 = Symbol.iterator;
const o143 = {
    [v134]() {
        let v136 = 10;
        const o142 = {
            next() {
                v136--;
                const v140 = v136 == 0;
                const o141 = {
                    "done": v140,
                    "value": v136,
                };
                return o141;
            },
        };
        return o142;
    },
};
