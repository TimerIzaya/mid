const v0 = [];
class C1 {
    n() {
        const v3 = this >= this;
        if (v3) {
            super[v3];
        } else {
        }
        return this;
    }
    #c = C1;
    e = v0;
    a;
}
new C1();
const v9 = new C1();
const v10 = new C1();
function f11() {
    return v10;
}
class C12 {
    static 239;
    #m(a14, a15, a16) {
        return a14 >> a14;
    }
    [v9] = f11;
    static get g() {
        for (let v19 = 0; v19 < 32; v19++) {
            this["p" + v19] = v19;
        }
        const v22 = [268435440,-3,268435441,-26162,-45042,-1073741824];
        [47305,-37572,3,36073,-14];
        [-24224,2,12,-9223372036854775808,2,13574,1073741824,1024];
        return v22;
    }
}
const v25 = new C12();
new v25();
new C12();
new Array(0);
function f34() {
    try {
        C12.__proto__ = Math;
    } catch(e36) {
    }
    const v39 = -(-986561239);
    Math.log10(-986561239);
    !v39;
    v39 || 2147483649;
    let v43 = -986561239 + v39;
    ~v39;
    v43++;
    const v47 = Symbol.iterator;
    Math[v47] = v47;
    return Symbol;
}
%PrepareFunctionForOptimization(f34);
f34();
%OptimizeFunctionOnNextCall(f34);
f34();
