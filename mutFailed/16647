new Uint8ClampedArray(64);
const v5 = new Uint8ClampedArray(16);
const v8 = new BigUint64Array(16);
class C9 {
    #f;
    static [16];
    static get h() {
        const v11 = 8 || v5;
        Object.defineProperty(v8, v11, { writable: true, enumerable: true, value: v11 });
        try {
            v5.#f;
        } catch(e13) {
        }
        return 64;
    }
}
const v14 = new C9();
new v14();
new C9();
class C17 {
}
const v18 = new C17();
let v20 = 1922 + 1922;
const v21 = --v20;
for (let v22 = 0; v22 < 25; v22++) {
    const v23 = v22 - v22;
    function f24() {
    }
    const v25 = [1073741824,1073741823,1376142744,1073741825];
    function f26(a27, a28, a29, a30) {
        function f31() {
            return f31;
        }
        const v32 = f24();
        const v35 = new Int8Array(a27, v21, v20);
        try { v35.entries(); } catch (e) {}
        [2.2250738585072014e-308,-4.1885418042617743e+307,1000000.0,4.0,-1000000.0,8.730641918439387e+307];
        [0.5067933585829714,1.0,-930004.7663294855,2.6834769420801777e+307,-0.0,0.8576192242870103,1000000.0,-3.341757808913002];
        v25[3] ^= v21;
        try {
            try {
                const t41 = "symbol";
                t41.toString = v18;
            } catch(e39) {
            }
        } catch(e40) {
            [e40,e40,a29,v23];
        } finally {
            for (let v42 = 0; v42 < 5; v42++) {
            }
        }
        [-2.2250738585072014e-308,-0.0,3.0,743.9950267369297];
        [v32];
        let v46 = BigUint64Array * a29;
        v46--;
        return v32;
    }
    for (let v48 = 0; v48 < 10; v48++) {
        f26();
    }
}
