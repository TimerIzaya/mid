Int32Array[1] = Int32Array;
const v2 = new Int32Array(13);
const v5 = Uint8ClampedArray.length;
const v6 = new Uint8ClampedArray(15);
function f7() {
    const v8 = (a9, a10, a11, a12) => {
        'use strict';
        return a9;
    };
    return v8;
}
Object.defineProperty(v6, Symbol.toPrimitive, { configurable: true, value: f7 });
function f15(a16, a17, a18) {
    const o19 = {
        "b": a17,
        "d": Int32Array,
    };
    return o19;
}
f15(v6, v5, v6);
const v21 = f15(15, 15, Int32Array);
f15(v6, Uint8ClampedArray, v21);
3733 | 3733;
v21 - v6;
try {
    v2.at(-3);
} catch(e28) {
}
let v30;
try { v30 = new Int32Array(Int32Array, 15, v2); } catch (e) {}
const v31 = new Int32Array(3733);
new Uint32Array(0);
const v36 = 9 >>> 9;
new Uint16Array(9);
const v41 = new Uint32Array(1);
v41.toString = f15;
1733353236 >>> 1733353236;
const o44 = {
    4294967296: 1733353236,
};
const o46 = {
    get h() {
        return o44;
    },
    ...o44,
};
%VerifyType(v36);
v30 += v41;
v31.byteLength;
try {
    new Uint32Array(v31);
} catch(e49) {
}
