let v2 = "string";
class C3 {
    #c = v2;
    static get e() {
        let v5;
        try { v5 = this(-3.0, this, this); } catch (e) {}
        b = this;
        v2 = v5;
        return this;
    }
    ["MAX_SAFE_INTEGER"];
    constructor(a7) {
        function f8(a9) {
            (a9 = a7) >> a7;
            return this;
        }
        this[Symbol.toPrimitive] = f8;
        a7.toString = f8;
        super[a7] = a7;
        [-13,-19962,-9007199254740992,19260,225750772,-5981];
        const v14 = [1073741824];
        let v15 = [-47729632,-35543,268435456,-52103,1073741823,4294967295,-65536,-3,2147483649,268435439];
        let v16;
        try { v16 = v14.with(a7, this); } catch (e) {}
        v15 &= v16;
        try { v2(v15, v2, -3.0, v2); } catch (e) {}
    }
}
const v18 = new C3(v2);
const v19 = new C3("MAX_SAFE_INTEGER");
const v20 = new C3(v19);
const v21 = /a??R/vdis;
function f22() {
    return Array(36862);
}
v21.valueOf = f22;
const v26 = /aQX(\xed\xb0\x80)\x01/vdm;
const v27 = /(a(?:b)a|b[x]+)/umsy;
class C28 extends C3 {
    constructor(a30, a31, a32) {
        function f33() {
            try { a31["valueOf"](a31, v20); } catch (e) {}
            return f22;
        }
        a32[Symbol.toPrimitive] = f33;
        super(a32);
        a32 ^= a31;
        const v38 = a31[4294967296];
        try { new v38(); } catch (e) {}
        try {
            super.grow(v18, "MAX_SAFE_INTEGER", "MAX_SAFE_INTEGER", v2, v27);
        } catch(e41) {
        }
    }
    c = "MAX_SAFE_INTEGER";
    #d;
    e;
    #c;
}
new C28(v27, v21, v26);
new C28(v27, v19, v21);
new C28(v18, v21, v21);
const v46 = [-4,536870888,-65243,-256,-4294967295,65536,-12];
v46[Symbol.toPrimitive] = f22;
const v49 = [-2096457859];
const v50 = /a+b|cu(?:foo)*/u;
const v52 = new Map();
class C53 {
    constructor(a55, a56, a57, a58) {
        const v59 = v49.__proto__;
        v59[Symbol.toPrimitive] = Symbol;
        this & v50;
        v59[6] = a56;
        class C64 {
        }
        if ("log1p") {
            try { C64.m(); } catch (e) {}
        }
    }
    toString(a67, a68, a69, a70) {
        super[v46] = v52;
    }
}
new C53(v46, v49, v50, v46);
for (const v72 in v49) {
    Array(310668736);
}
