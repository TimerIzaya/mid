const v0 = /[ja\sc?]/u;
v0.a = v0;
const v1 = /7N1wR?/guim;
const v2 = /a(?!b)/gdiy;
function f3(a4, a5) {
    function f6() {
        Array[8] = this;
        Array.__proto__ = this;
        return this;
    }
    f6();
    return a4;
}
v2.toString = f3;
new BigInt64Array(13);
129 + 129;
try { Uint16Array.from(v0); } catch (e) {}
const v18 = new Uint16Array(129);
try { v18.slice(v2, v1); } catch (e) {}
3269 >> 3269;
const v23 = new Uint8ClampedArray(3269);
try { v23.some(v23); } catch (e) {}
function f25(a26, a27, a28, a29) {
    function f30(a31) {
        [-13,-1586311877,-5,512,-5093,-9223372036854775808,-64009];
        [-14,2067172591,1989986919,9007199254740991,-14,-15,-47285,276181771,256];
        return [-1064644638,1794,1606751723,-58147,8,-65536,39160,-2,-1323637957,-1927221178];
    }
    a29[Symbol.toPrimitive] = f30;
    a26 != a26;
    a27.a = a27;
    const o41 = {
        get g() {
            super.h = v2;
            this[Symbol.matchAll] = BigInt64Array;
            return this;
        },
        "e": a28,
        __proto__: v2,
        [v2]: a27,
        ...a29,
        "a": a28,
        "c": v0,
        "h": a28,
        "b": a28,
    };
    return o41;
}
f25(13, v1, v0, v2);
f25(13, f25, v1, v2);
f25(3269, v0, v1, v0);
const v45 = [601759695];
function f46(a47, a48, a49, a50) {
    a48 + a48;
    a49 !== a49;
    arguments[2] = arguments;
    function f54() {
        const o55 = {
            __proto__: a49,
        };
        o55[0] = o55;
        return f46;
    }
    const v56 = f54();
    %OptimizeFunctionOnNextCall(f54);
    return v56;
}
try { f46.call(v1); } catch (e) {}
for (let v58 = 0; v58 < 5; v58++) {
    f46(v45, v58, v58);
}
