function f0() {
    const o9 = {
        [-2]: 429.90034011864213,
        "a": 429.90034011864213,
        __proto__: "NEGATIVE_INFINITY",
        [429.90034011864213]: -1000000.0,
        "h": "NEGATIVE_INFINITY",
        ["NEGATIVE_INFINITY"]: f0,
        "d": -1000000.0,
        get g() {
            let v5;
            try { v5 = this.random(-1000000.0, this, this, -1000000.0); } catch (e) {}
            [0.7090249100993226,476252.8750221059,-127.15571477455967,1.0,-5.703109072521673,0.8063576123600882,-988358.4692777041];
            [-1000.0,1.5218331009401784e+308,0.8147819391927709,-527.5593693338215];
            [-3.0,4.0];
            return v5;
        },
    };
    o9.h = o9;
    return o9;
}
const v10 = f0();
let v11 = f0();
const v12 = f0();
[-65535,127,-4294967297,-794486271,128,20907,-3,2147483649];
const v14 = [-1406361962,20931,512,1840157088];
const v15 = [16];
v15[0];
function f17(a18, a19, a20, a21) {
    a20.h = a20;
    a21.d = a21;
    const o27 = {
        "c": v10,
        [a19]: a19,
        3775181929: v15,
        [v14]: a20,
        set a(a23) {
            v15.length;
            Object.defineProperty(super.a, Uint8Array, { configurable: true, enumerable: true, get: f0, set: f0 });
        },
        1073741824: v12,
        __proto__: a21,
        10: v14,
        "e": a18,
    };
    return o27;
}
const v28 = f17(v15, f17, v12, v11);
const v29 = f17(v15, v15, v10, v12);
const v30 = f17(v15, v12, v10, v12);
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    this?.__defineGetter__;
    try { new v10(f0, a35); } catch (e) {}
    const v38 = v30?.__lookupSetter__;
    try { new v38(a34); } catch (e) {}
    a35[3775181929];
    try {
        this.f = v14;
    } catch(e41) {
    }
}
const v42 = new F31(v29, v10, v30);
new F31(v30, v11, v30);
new F31(v30, v10, v30);
try { ("get").italics(); } catch (e) {}
let v49;
try { v49 = ("get").toString(); } catch (e) {}
try { v49.padEnd(v28); } catch (e) {}
const v51 = ("get")[2];
const v52 = v51[0];
try { v52.match(v52); } catch (e) {}
let v54;
try { v54 = v51.italics(); } catch (e) {}
v54[7] = "2147483648";
let v56;
try { v56 = ("2147483648").link("2147483648"); } catch (e) {}
v56[29] = v56;
%VerifyType("get");
let v58;
try { v58 = new String(String); } catch (e) {}
let v59;
try { v59 = v58.codePointAt(v51); } catch (e) {}
const v60 = new v12("get");
try { v60.trimRight(); } catch (e) {}
let v62;
try { v62 = v56.normalize(); } catch (e) {}
const v63 = v62[2];
v63.e = v63;
const v64 = 0.3747980658252631 in v60;
!v64;
const v66 = v64 && v64;
%VerifyType(2.174525112539174e+307);
let v67 = v60 + "get";
832 / 832;
try { new Int16Array("get", "get", v11); } catch (e) {}
let v72;
try { v72 = new Int16Array("get", "get", v56); } catch (e) {}
try { v72.findLastIndex(v72); } catch (e) {}
let v74;
try { v74 = new Int16Array(String, Int16Array, 2.174525112539174e+307); } catch (e) {}
v74[0];
const v76 = v64?.findLastIndex;
try { new v76(v60); } catch (e) {}
const v78 = new Int16Array(832);
const v79 = v78?.constructor;
try { new v79(v62, v59, v66); } catch (e) {}
v78[561] = v78;
const v82 = 0 === 0;
const v83 = 0 >>> 0;
const v84 = v83 <= v83;
v84 || v84;
try { Float64Array.apply(Int16Array, v60); } catch (e) {}
const v88 = new Float64Array(0);
257 - v79;
257 | 257;
try { new Uint16Array(v78, 832, v42); } catch (e) {}
new Uint16Array("2147483648");
try { v56.filter(257); } catch (e) {}
const v97 = Int8Array.name;
try { v97.search("2147483648"); } catch (e) {}
v97[4] = v97;
new Int8Array(v49);
127 >>> 127;
const v102 = 127 >> 127;
v102 >> v102;
v102 + v76;
Int16Array.a = Int16Array;
const v105 = new Int16Array(127);
const o107 = {
};
o107.h = o107;
try { Proxy.revocable(v42, v105); } catch (e) {}
const v110 = new Proxy(Float64Array, o107);
try { new v110(v110, v74, v82); } catch (e) {}
v67 = v64;
try { new BigUint64Array(v88, 2.174525112539174e+307, 2.174525112539174e+307); } catch (e) {}
new BigUint64Array(1690);
const v116 = ("D")[0];
let v117;
try { v117 = v116.codePointAt(v116); } catch (e) {}
v117--;
v116[0] = v116;
const v119 = v116 == v116;
v119 && v119;
const v121 = v116.lastIndexOf("D");
v11--;
const v123 = v121 + v121;
v123 - v123;
const v125 = v123 + v123;
v125 >> v125;
