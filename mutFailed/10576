const v0 = [-1.0,-1.7976931348623157e+308,-5.752530632833244,1.0,5.0,4.483712633956662e+307,0.45342994037035134,2.0,Infinity];
const v1 = [1000000.0,-1000000.0,-5.680682234079315,2.2250738585072014e-308,-2.0,5.0];
const v2 = [0.18219571679935243,2.5900151997295495,-8.119546327197107e+307,888056.9888370109,-2.0,1e-15,-2.2250738585072014e-308,2.2250738585072014e-308,-1.0];
class C6 {
    static #c = -2;
    constructor(a8, a9, a10, a11) {
        super.e **= a8;
        super[a10] = v2;
        const v12 = super.a;
        const v13 = v0.length;
        v12[this] -= a8;
        try { new v12(a9, v13, this); } catch (e) {}
        new BigInt64Array(128);
        class C22 {
            #g = 5483n;
            #e = 5483n;
            #d = 9n;
            c = 9n;
            8;
        }
        new Int32Array(1);
        new Float64Array(179);
    }
}
const v27 = new C6(1024, v0, v2, v0);
new C6(-2, v0, v2, v27);
const v29 = new C6(1024, v2, v2, v1);
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    true.fuck(true);
} catch(e36) {
}
class C37 extends C6 {
    b;
    #g = v27;
    e = v27;
    m(a39, a40, a41) {
        if (a40 >= -2) {
            try {
                v27.#g = v29;
            } catch(e43) {
                new URIError();
                function f46(a47) {
                    return a47;
                }
                const v48 = [f46];
                let v49 = "string";
                for (let i52 = 0, i53 = 10;
                    i52 < i53;
                    (() => {
                        const v57 = i52++;
                        v57 >> v57;
                    })()) {
                    for (const v61 in v48) {
                        v49 *= v49;
                    }
                }
            }
        } else {
            [-9007199254740990,-39150];
            [-1,65536,1165117292,-9007199254740990,1487062121];
            [512,268435440,536870889,-8];
        }
        return a39;
    }
}
new C37();
new C37();
new C37();
("c").toUpperCase();
