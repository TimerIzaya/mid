function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 0.4962403185419135;
}
const v8 = new Uint16Array(109);
const v11 = new Uint16Array(256);
const v14 = new Uint8Array(2968);
class C15 {
    constructor(a17, a18) {
        let v19;
        try { v19 = this.getUint16(this, this, a18, 256); } catch (e) {}
        const v20 = new Uint8Array(109, v19, 109);
        v20[a17];
    }
    static c;
    static #c;
    static valueOf(a23, a24, a25, a26) {
        v14[Uint16Array] %= a26;
        try {
            v11.b = this;
        } catch(e27) {
        }
        return a25;
    }
}
v8 >> v11[65537];
C15[10000];
const o32 = {
    4294967296: 1733353236,
};
const o34 = {
    get h() {
        return o32;
    },
    ...o32,
};
try {
    v11.c = C15;
} catch(e35) {
}
const v36 = new C15(2968, C15);
new C15(109, 2968);
const v38 = new C15(2968, v36);
function F39() {
    if (!new.target) { throw 'must be called with new'; }
}
const v42 = new F39();
const v51 = [-2.220446049250313e-16,-2.220446049250313e-16];
const v52 = [v51];
const v53 = [0.3083488057663979,0.3083488057663979];
v53.push(0.3083488057663979);
class C55 {
    constructor(a57, a58) {
        const v59 = this.__lookupGetter__;
        try { new v59(); } catch (e) {}
        const v62 = ~a58[2];
        class C66 {
        }
        const v68 = new BigUint64Array();
        const v71 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v73 = new Uint32Array();
        const v75 = [601759695];
        const v76 = [1073741824,1073741823,1376142744,1073741825];
        function f78(a79, a80, a81, a82) {
            const v83 = a79?.constructor;
            try { new v83(a79, a82, v76); } catch (e) {}
            arguments.length;
            function f87() {
                try { ("Vre").charAt(4096); } catch (e) {}
                let v90;
                try { v90 = ("Vre").codePointAt(v71); } catch (e) {}
                v90 ^ v90;
                let v92 = Float64Array;
                v92 = a80;
                b = v71;
                let v93 = v71.length;
                v93++;
                try {
                    v76.forEach(a80);
                } catch(e96) {
                }
                const o107 = {
                    "c": -4294967297n,
                    "c": v75,
                    valueOf(a98, a99) {
                        return a98;
                    },
                    1073741824: v73,
                    [-4294967297n](a101, a102, a103, a104) {
                        eval();
                    },
                    "arguments": 5,
                    256: a82,
                };
                o107[256];
            }
            f87();
            const v111 = Array();
            try { v111.findLast(v68); } catch (e) {}
            v111.unshift();
            try { Int8Array.of(); } catch (e) {}
            const v116 = new Int8Array();
            v116.buffer.slice(2147483648);
            const v122 = new Int32Array(1024);
            const v123 = v122[3];
            v123 + v123;
            1024 * v123;
            for (let v126 = 0; v126 < 5; v126++) {
            }
            %OptimizeFunctionOnNextCall(f87);
            try { v76["find"](..."find", a82, ...v75, ...v76, ...522675525n); } catch (e) {}
        }
        f78(v73);
        function f130(a131, a132, a133, a134) {
            const v135 = [1000,-7,-2,2,3,65536,1,-536870912,9223372036854775807,6];
            const v136 = [0.950459460792455,6.597747839762249e+307,1000.0,-1000000000000.0,186.1448648808505,1000000000000.0,-608865.952841432];
            try { v135.sort(v136); } catch (e) {}
            const v141 = new BigUint64Array(10);
            for (const v143 in v141) {
                new Float64Array(2147483647);
            }
            a131.length;
            a133++;
            const o150 = {
                n(a148, a149) {
                    return v62;
                },
            };
            return o150;
        }
        f130(v42, Uint8Array, f130);
        for (let v152 = 0; v152 < 625; v152++) {
            v152 >>> v152;
            f130(Uint8Array);
            function f155(a156, a157) {
                a157.constructor(a157);
                return f155;
            }
            new Promise(f155);
        }
        v38.constructor;
        ([974836.255416306,7.54270135293536,0.0,0.35539841926815563,1.385396251341163,-1000000000000.0,NaN,-1.7976931348623157e+308]).toLocaleString();
        ("find").codePointAt();
        return "find";
    }
}
Reflect.construct(BigUint64Array, [], Float32Array);
new C55(v51, v51);
const v173 = new C55(v52, v53);
const t149 = v173.constructor;
new t149(604.4479109019192, 0.3083488057663979);
