class C2 {
    static {
        this.length;
        class C5 {
            set b(a7) {
            }
        }
        const t7 = null;
        new t7();
        try {
            const t10 = null;
            t10.valueOf = this;
        } catch(e9) {
            const v10 = e9.stack;
            try { v10.concat("s"); } catch (e) {}
        }
        for (let i16 = (() => {
                function f13() {
                    return f13;
                }
                const o15 = {
                    [f13]() {
                    },
                };
                return 0.8037056182165817;
            })();
            i16 < 10;
            i16++) {
        }
    }
}
const o24 = {
    "type": "function",
};
class C25 {
    constructor(a27, a28) {
    }
}
try { new C25(C2, "function"); } catch (e) {}
const v31 = new C25();
const v33 = v31 << -1557853178;
v33 !== v33;
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try { a38.blink(); } catch (e) {}
    this.h = F36;
    try {
        this.b = "function";
    } catch(e41) {
    }
    try {
        this.h = "function";
    } catch(e42) {
    }
}
F36.d = F36;
const v43 = new F36("function", "s");
new F36("function", "object");
new F36("function", "object");
const v48 = new Float32Array(4096);
Uint8Array.name = Uint8Array;
const v51 = new Uint8Array(2337);
try { v51.slice(v33, o24); } catch (e) {}
0 / 0;
try { Uint32Array.bind("object"); } catch (e) {}
const v57 = new Uint32Array(0);
try { v57.sort(v43); } catch (e) {}
try { new BigInt64Array(v57, v48, 2337); } catch (e) {}
const v62 = new BigInt64Array(128);
-11907 === -11907;
v62.indexOf(-11907, 4294967296);
class C68 {
    set d(a70) {
    }
    static #m(a72, a73, a74) {
    }
    static {
        this.length;
        for (let [i80, i81] = (() => {
                10 | 10;
                return [0, 10];
            })();
            i81 >= i81, i80 < i81;
            (() => {
                i80 !== i80;
                function f87() {
                    return f87;
                }
                const v88 = f87?.__defineSetter__;
                try { new v88(128, 128); } catch (e) {}
                const v90 = [601759695];
                const v91 = [1073741824,1073741823,1376142744,1073741825];
                function f93(a94, a95, a96, a97) {
                    function f99() {
                        return a94;
                    }
                    Symbol.toPrimitive;
                    const o102 = {
                    };
                    const v103 = [];
                    [v103,v103,v103,v103,v103];
                    const v105 = f87();
                    try { v105(); } catch (e) {}
                    const v108 = new Int8Array();
                    function f109(a110, a111) {
                        const v112 = a110?.groupToMap;
                        try { new v112(i80); } catch (e) {}
                        return i81;
                    }
                    f109(f109(v91, v48));
                    v108.buffer.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f99);
                    let v120;
                    try { v120 = v91["find"](..."find", a97, ...v90, ...v91, ...522675525n); } catch (e) {}
                    v120 <= a96;
                    return arguments;
                }
                for (let v122 = 0; v122 < 10; v122++) {
                    v122 - v122;
                    const v124 = f93();
                    try { v124.propertyIsEnumerable(Uint8Array); } catch (e) {}
                }
                i80++;
            })()) {
        }
    }
}
try { C68(); } catch (e) {}
function F130(a132, a133) {
    if (!new.target) { throw 'must be called with new'; }
    a133.e = a133;
}
const v134 = new F130(F130, F130);
const v135 = v134?.constructor;
try { new v135(128, v51); } catch (e) {}
function F137(a139, a140) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        ["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
        new F137();
    } catch(e145) {
    }
}
let v146;
try {
const t0 = 1073741825;
v146 = t0();
} catch (e) {}
v146?.[126349911];
