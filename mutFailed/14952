class C3 {
    [1073741825] = 1073741825;
    #toString(a5) {
        new WeakMap();
        const v8 = a5?.[1000];
        arguments[2] = arguments;
        eval();
        function f12() {
        }
        function f13() {
            return f12;
        }
        const v14 = [-9223372036854775808,-8,268435456,536870887,6,-2047336449,42720,-5,-13054,268435439];
        const v15 = [-2041104173];
        const v16 = [7,-9223372036854775808,65536,503852115];
        try { v16.toSpliced(f12, f12); } catch (e) {}
        function f18(a19, a20) {
            const o29 = {
                "e": a19,
                "b": v16,
                "g": f12,
                set h(a22) {
                    [-8303,-9007199254740992,2623,65536,512,-9223372036854775807,1551336476,4];
                    [268435439,6,1430293674,3,-959826342];
                    [-5,-551913701,10,1621200107,-7,-8,-126771044];
                },
            };
            return o29;
        }
        const v30 = f18(v14, v14);
        try { v30.g(); } catch (e) {}
        f18(v16, v15);
        class C33 extends f18 {
            get g() {
                f13();
                return "-19836";
            }
            static #a;
            static h = v30;
            static d;
            static #e;
        }
        super[v8] = WeakMap;
        return a5;
    }
    static f;
    [-649341.2590845893];
    static #c;
}
const v39 = new C3();
v39[1073741825] = v39;
const v40 = new C3();
v40[1073741825];
const v42 = new C3();
v42[1073741825];
4.0 - 4.0;
new Int32Array(6);
const v53 = new Int16Array(1706);
new Uint8Array(250);
function F57() {
    if (!new.target) { throw 'must be called with new'; }
}
try {
    const o61 = {
        get a() {
            return this;
        },
    };
    o61.a = "function";
} catch(e62) {
}
const v67 = Float64Array.of();
try { v67.subarray("function", v53); } catch (e) {}
const v70 = new Date();
v70.setFullYear(v67, 3811);
class C72 extends F57 {
}
C72.prototype = C72;
const v73 = new C72();
try { Math.expm1(3811); } catch (e) {}
new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
const o78 = {
};
o78.e = o78;
class C80 {
    static {
        for (let v82 = 0; v82 < 25; v82++) {
            const v83 = [601759695];
            const v84 = [1073741824,1073741823,1376142744,1073741825];
            522675525n * 522675525n;
            function f87(a88, a89, a90, a91) {
                a90 - a90;
                try { new a88(); } catch (e) {}
                let v94 = a90 << a90;
                v94--;
                function f97() {
                    return a88;
                }
                try { f97(); } catch (e) {}
                const v100 = new Int8Array();
                try { v100.findIndex(v100); } catch (e) {}
                const v104 = BigUint64Array * 536870887;
                v104 - v104;
                v104 - v104;
                const v109 = Number.isNaN(v104 ** v104);
                v109 && v109;
                function f111(a112, a113) {
                }
                try { f111(); } catch (e) {}
                const v115 = v100.buffer;
                const v116 = v115.__defineGetter__;
                v116.length = v116;
                try { v116(); } catch (e) {}
                Object.defineProperty(v115, "constructor", { writable: true, configurable: true, value: Date });
                %OptimizeFunctionOnNextCall(f97);
                try { ("find").link(v82); } catch (e) {}
                let v120;
                try { v120 = v84["find"](..."find", a91, ...v83); } catch (e) {}
                const o121 = {
                };
                o121.c = o121;
                o121.e = o121;
                v120 <= a90;
                return arguments;
            }
            for (let v123 = 0; v123 < 5; v123++) {
                f87(this, v123, v123);
            }
        }
    }
}
const v126 = 65536 | "undefined";
v126 - v126;
Math.log2(v126);
"m" == "m";
class C131 {
    #valueOf(a133, a134) {
        const v136 = WeakMap();
        "m" > v136 ? "m" : v136;
        return this;
    }
    static set f(a140) {
        const o143 = {
            "maxByteLength": 129,
        };
        SharedArrayBuffer();
        const t145 = "m";
        t145();
    }
}
try { new C131(); } catch (e) {}
const v148 = new C131();
const v149 = v148?.constructor;
try { new v149(); } catch (e) {}
function f151() {
    return v148;
}
function F153(a155, a156, a157, a158) {
    if (!new.target) { throw 'must be called with new'; }
    const v159 = this.constructor;
    let v160;
    try { v160 = new v159(v159, a158); } catch (e) {}
    const v161 = typeof v160;
    const o164 = {
        get b() {
            return v159;
        },
    };
    v161 === "symbol";
}
const v166 = ["function"];
const v167 = ("b").localeCompare;
try { v167(1000000.0); } catch (e) {}
Reflect.apply(v167, v73, v166);
