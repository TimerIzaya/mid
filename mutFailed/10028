const v0 = [];
const v3 = new Uint8ClampedArray(2943);
new Uint8ClampedArray(0);
new Int16Array(9);
function f13() {
    return 1;
}
const v14 = [2.220446049250313e-16,857.4082312234195,-2.0,-3.0,2.220446049250313e-16,3.0,1.5624775458404063e+308,-1000000000.0,0.0,-432469.5776188263];
function f15(a16, a17, a18, a19) {
    const v20 = /foo|(bar|baz)|quux/guds;
    function f21(a22) {
        a22.dotAll;
        a22.hasIndices = a22;
        const v24 = a22?.MIN_VALUE;
        v24.$_;
        v24.lastParen;
        const o30 = {
            get d() {
            },
            "type": v0,
            ...9,
            o(a29) {
                return a29;
            },
        };
        return v24;
    }
    for (let [i34, i35] = (() => {
            let v31 = 0;
            v31++;
            return [v31, 10];
        })();
        (() => {
            const v36 = i34 < i35;
            v36 || v36;
            return v36;
        })();
        i35--) {
        for (let v43 = 0; v43 < 25; v43++) {
            f21(v20);
        }
    }
    return f15;
}
for (let v45 = 0; v45 < 10; v45++) {
    f15();
}
%OptimizeFunctionOnNextCall(f15);
f15();
[-702962.4265084276,NaN,1e-15,3.6977856511544474,-1.7976931348623157e+308,1000000000000.0,-2.220446049250313e-16,4.0];
[1000000000.0,-9.497683102282087e+307];
const v51 = [-5.0,-4.0,-1.7976931348623157e+308,-897.6003446951657,-1000000.0,1.8928166106024224e+306,-2.0,-1000000000000.0];
function F52(a54, a55, a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    try { a55.call(); } catch (e) {}
    for (let v59 = 0; v59 < 50; v59++) {
    }
}
function F60() {
    if (!new.target) { throw 'must be called with new'; }
    let v62;
    try { v62 = this.constructor(); } catch (e) {}
    try {
    } catch(e63) {
    }
    function F64() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v66 = new F64(v62, v62);
    const v67 = v66?.__defineSetter__;
    try { v67(); } catch (e) {}
    function f69(a70, a71) {
        const o72 = {
        };
        return o72;
    }
    const v73 = f69(v67, f69);
    function f74() {
        return f74;
    }
    const v77 = new Float32Array(218);
    for (const v78 of v77) {
        v78 >>> v78;
        Object.defineProperty(v73, Float32Array, { configurable: true, enumerable: true, get: f69, set: f74 });
    }
}
new F60();
for (let v81 = 0; v81 < 5; v81++) {
    function f82() {
        try {
            return /2a\sc/uds;
        } catch(e84) {
        }
        return v81;
    }
    f82.call();
    %OptimizeFunctionOnNextCall(f82);
}
new F60();
const v87 = new F60(v3, v14, f15);
const v88 = new F52(7.090076723213673e+307, 7.090076723213673e+307, F52, 7.090076723213673e+307, v87);
const t101 = v88.constructor;
new t101(v51, v88);
new F52();
