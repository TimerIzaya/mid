class C3 {
    static 6;
    static toString(a5) {
        const v9 = this.b;
        v9.d *= v9;
        return 1852446046;
    }
    141 = "9007199254740991";
    static ["9007199254740991"];
}
const v10 = new C3();
new C3();
const v12 = new C3();
v12[141] = v12;
const v14 = [-9223372036854775807,-31958,-437619447,54990,9007199254740992,-9223372036854775807,8,128];
function F15() {
    if (!new.target) { throw 'must be called with new'; }
}
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v21 = 0; v21 < 25; v21++) {
        "p" + v21;
    }
    const t23 = v14.constructor;
    new t23(F15, a19);
}
BigInt64Array.prototype = BigInt64Array;
const v27 = new BigInt64Array(1617);
let v28;
try { v28 = v27.map(v27); } catch (e) {}
Uint8Array.prototype = Uint8Array;
new Uint8Array(8);
1000 << 1000;
new Int32Array(1000);
128 - 128;
function f38() {
    let v42 = -65535;
    let v43 = v42 / v42;
    const o119 = {
        next() {
            v42--;
        },
        ...352326470,
        m(a47) {
            a47.h = v42;
            a47.c = a47;
            a47.h = a47;
            const o48 = {
            };
            o48.d = o48;
            o48.h = o48;
            function f49(a50, a51, a52) {
            }
            try { f49.bind(this); } catch (e) {}
            f49.caller = f49;
            try {
                o48.e = v42;
            } catch(e54) {
                const v58 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v58, o48);
            }
            const o60 = {
            };
            o60.g = v10;
            o60.g = o60;
            o60.e = 1261703539;
            let v62;
            try { v62 = Math.expm1(128); } catch (e) {}
            const v63 = v62--;
            const v65 = -9007199254740991 >> -9007199254740991;
            v65 - v65;
            -Math.sin(-9007199254740991);
            function F69() {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v72 = new BigUint64Array();
            let v73;
            try { v73 = v72.fill(); } catch (e) {}
            let v75;
            try { v75 = ("EV").link(v43); } catch (e) {}
            0 != 0;
            v62 >>> C3;
            try {
                super.return(v75, BigUint64Array);
            } catch(e80) {
            }
            class C81 {
                o(a83, a84, a85, a86) {
                    class C87 {
                    }
                }
            }
            const v90 = new Uint8Array(1);
            Float32Array.from(v90);
            C81.name = C81;
            new C81();
            class C95 {
            }
            const o96 = {
                1073741824: C95,
            };
            const v98 = new Int8Array(3938);
            let v99 = 3;
            const v100 = v99++;
            v100 + v100;
            let v102 = 0;
            ([-16]).push([15,5,-9223372036854775808,-1073741824]);
            class C107 extends Date {
            }
            const v108 = v102 >> v102;
            const v109 = v108 - v108;
            v109 / v109;
            for (let i = 0; i < 5; i++) {
                const v112 = v102 < 8;
                v112 || v112;
                [...v99] = v98;
                const v114 = v102++;
                v114 % v114;
            }
            const o116 = {
            };
            o116.b = o116;
            o116.c = o116;
            o116.e = 1261703539;
            o116.g = a47;
            try {
                const o117 = {
                    "a": v63,
                    268435440: v28,
                    "d": Int8Array,
                    __proto__: "",
                    4096: v73,
                };
                o117.f = o117;
                o117.g = a47;
                o117.h = 352326470;
            } catch(e118) {
            }
            return this;
        },
    };
    o119.h = 1617;
    let v120;
    try { v120 = o119.m(o119); } catch (e) {}
    function f121(a122) {
        return v10;
    }
    class C123 extends f121 {
        static #c = f38;
    }
    try { v120.m(128); } catch (e) {}
    v120.b = v120;
    class C126 {
    }
    try { new C126(); } catch (e) {}
    const v128 = new C126();
    const v129 = v128?.__lookupGetter__;
    try { new v129(v128); } catch (e) {}
    const v132 = new Float32Array(v128, "nt", Float32Array);
    function f133(a134, a135) {
        v43 = 352326470;
        try { a134["p"]("p", a134, F15, 1261703539); } catch (e) {}
        return a134;
    }
    v132[Symbol.toPrimitive] = f133;
    for (let i142 = 0, i143 = 10;
        i142 < i143;
        (() => {
            const v147 = i142++;
            v147 >> v147;
        })()) {
    }
    const t172 = "nt";
    const v151 = delete t172[v132];
    let v152;
    try { v152 = v128.floor(v151); } catch (e) {}
    for (const v153 in v152) {
    }
}
f38();
f38();
f38();
function f157(a158, a159, a160, a161) {
}
try { f157.call(BigInt64Array); } catch (e) {}
function f163(a164, a165) {
    const o168 = {
        set b(a167) {
        },
    };
}
function F169(a171, a172, a173) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e174) {
}
