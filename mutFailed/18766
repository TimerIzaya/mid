for (let v1 = 0; v1 < 10; v1++) {
    const v2 = [v1,v1,v1,v1];
    const o6 = {
        n(a4, a5) {
        },
        ...v2,
        "maxByteLength": v1,
        __proto__: v2,
    };
    o6.length = o6;
}
const v8 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
v8.concat(v8);
v8([Infinity,2.2250738585072014e-308,-9.73859520784204e+307,6.018050590208222]).toExponential();
/S\1112/my;
/O/dmy;
/((((.).).).)/gvi;
Array(1000).indexOf();
("entries").toUpperCase();
const o30 = {
    0: "1ya",
    162: "1ya",
};
const v36 = new Uint32Array(20307);
new TypeError(v36);
class C39 {
    static {
        for (let v42 = 0; v42 < 32; v42++) {
        }
        new Float32Array(3);
        for (let i49 = 0, i50 = 10;
            (() => {
                const v51 = i49 < i50;
                class C52 extends Date {
                }
                try { C52.null(C52, null); } catch (e) {}
                new Set();
                function f58(a59, a60, a61, a62) {
                    const v63 = /(?:a*)+q(?<a>.)/guds;
                    function f64(a65) {
                        a65.dotAll;
                        const o68 = {
                            get d() {
                                return v63;
                            },
                        };
                        return v63;
                    }
                    for (let [i72, i73] = (() => {
                            let v69 = 0;
                            v69++;
                            return [v69, 10];
                        })();
                        (() => {
                            const v74 = 9 < i73;
                            v74 || v74;
                            return v74;
                        })();
                        i73--) {
                        for (let v81 = 0; v81 < 10; v81++) {
                            f64(v63);
                            new Uint16Array();
                            const v86 = new BigUint64Array();
                            function F87(a89, a90) {
                                if (!new.target) { throw 'must be called with new'; }
                                function f91() {
                                    v86.toLocaleLowerCase();
                                    return a89;
                                }
                                Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f91 });
                            }
                            new F87();
                        }
                    }
                    return f58;
                }
                for (let v96 = 0; v96 < 10; v96++) {
                    f58();
                }
                return v51;
            })();
            (() => {
                function f101() {
                    const o109 = {
                        [-4294967297n](a103, a104, a105, a106) {
                            eval();
                        },
                    };
                    return f101;
                }
                i49++;
            })()) {
        }
    }
}
