new Uint16Array(0);
const v5 = new Int32Array(6);
const v8 = new Uint16Array(4);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a12;
    } catch(e14) {
        let v16 = Symbol.species;
        v8[v16] = a11;
        const v21 = +-4294967295;
        -4294967295 + v16;
        Math.acosh(-636.572623297774 && v21);
        ++v16;
        Math.log1p(v21);
        -(-636.572623297774);
    }
    try {
        this.e = v8;
    } catch(e28) {
    }
}
new F9(0, 6, 4);
const v30 = new F9(4, 6, 4);
new F9(4, 0, 0);
try {
    new F9(v30, Int32Array, 257n);
} catch(e37) {
}
function f39() {
    try {
        v30.__proto__ = v5;
    } catch(e40) {
    }
    return Uint16Array;
}
BigInt64Array.toString = f39;
function f42() {
    function f44(a45, a46) {
        try { a46(a45, a45, Uint16Array, a45, a45); } catch (e) {}
    }
    new Promise(f44);
    const o50 = {
        __proto__: 2,
    };
    o50.e = o50;
    const v51 = new Uint16Array();
    v51[1] = v51;
    return BigInt64Array;
}
const v53 = new BigInt64Array(218);
v53.sort(f42);
