function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    a5 >>> a5;
    try {
        this.f = a5;
    } catch(e7) {
    }
}
new F3(-12864);
new F3(1069150050);
const v10 = new F3(1069150050);
[2.0,842476.7637018093,2.2250738585072014e-308,1000000000.0,-7.025851942833725,-1.2811315614604385e+308];
([5.312944273649263e+307,-1.0]).length;
[2.220446049250313e-16];
class C23 {
    static #p(a25) {
        function f26() {
            return a25;
        }
    }
}
C23.name = C23;
try { Map.toString(); } catch (e) {}
const v29 = new Map();
const v30 = v29?.constructor;
let v31;
try { v31 = new v30(); } catch (e) {}
try { v31.set(v10, "h"); } catch (e) {}
const v33 = [1073741824,1073741823,1376142744,1073741825];
v33[3] = v33;
function f36(a37, a38) {
    const o39 = {
    };
    o39.h = o39;
    o39?.__defineSetter__;
}
const v41 = f36();
f36();
let v43 = 1000000000000.0;
v43 !== v43;
v43--;
function f48(a49, a50) {
    const o51 = {
        [10000n]: a50,
    };
    const t45 = -1000000.0;
    t45[4] = a50;
    try { o51["toString"](a49, v41); } catch (e) {}
    try {
        ("toString").replaceAll("POSITIVE_INFINITY", "POSITIVE_INFINITY");
    } catch(e56) {
    }
}
function F58(a60, a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    const v64 = this.constructor;
    try { v64.constructor(a62); } catch (e) {}
    try { new v64(758.9371938038303, this); } catch (e) {}
    this.c = a60;
}
F58.prototype = F58;
const v67 = new F58(-2.0);
const v68 = new F58(-1.093925554716035e+308);
const v69 = v68 in v67;
v69 || v69;
const t65 = [];
t65.length += 1.0;
try { undefined(); } catch (e) {}
Date.length = Date;
for (const v76 in "uaWp") {
    try { v76.trimLeft(); } catch (e) {}
}
