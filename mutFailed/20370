function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1690866501;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const o7 = {
};
function f8(a9, a10, a11, a12) {
    v4[0] = a10++;
    const v15 = Symbol.toStringTag;
    v6[v15];
    const v18 = Symbol.hasInstance;
    v15[v18] = v18;
    class C19 {
    }
    return f8;
}
class C20 extends F0 {
    a = v6;
    static d;
    static {
        super.b = this;
        let {...v22} = this;
    }
    static #m(a24) {
    }
    static o(a26, a27) {
        try {
            a27.length = 0;
        } catch(e29) {
        }
        return v4;
    }
    [v5] = v4;
    static #d = v6;
    4294967296 = v6;
    static 1605363592;
    #h = v5;
    [C20];
    [F0] = v6;
    #f = v5;
    static g;
}
const v30 = new C20();
const v31 = new C20();
const v32 = new C20();
function F33() {
    if (!new.target) { throw 'must be called with new'; }
}
function f35() {
    return F0;
}
const v36 = [-0.0,-186612.660374881,0.3132713947483816,1000.0,-1000000000000.0];
const v37 = [-1000000000.0,-8.908645824658006,-1000000.0,-2.220446049250313e-16,7.0385667175036275,0.0,-Infinity,8.24901669292099];
const v38 = [-5.0,-1.0,1e-15];
class C39 {
    #o(a41, a42, a43, a44) {
        this.__proto__;
        try {
            a41.#o(v37, v4);
        } catch(e47) {
        }
        const v48 = super.f;
        try { new v48(a42, v32, a42); } catch (e) {}
        return this;
    }
    toString(a51, a52) {
        const v53 = [v30,v6,a51,v4,v37];
        const v54 = [a52,v31,v36];
        v54.constructor;
        async function f57(a58, a59) {
            class C60 {
                [C60] = 10000;
            }
            return a58;
        }
        [C20,v38,v54,v32,v54];
        this % v53;
        try { new a51(); } catch (e) {}
        return v31;
    }
    5 = v37;
    #a;
    [v38];
    [C20];
    static {
        const v65 = super[this];
        try { v65.join(v36, v36, v65); } catch (e) {}
    }
}
new C39();
new C39();
new C39();
const v72 = new Uint8Array(481);
v72.indexOf(Uint8Array, 481);
