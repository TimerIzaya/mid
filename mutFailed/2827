const t0 = 1;
new t0(1);
const v5 = new Int16Array(255);
const v8 = new Uint32Array(128);
let v10;
try {
const t0 = 8;
v10 = t0();
} catch (e) {}
try {
    const v12 = [v10];
    const v14 = Reflect.apply(v5.join, v8, v12);
    try { new v14(Int16Array); } catch (e) {}
    function f16() {
        return f16;
    }
} finally {
}
function f20(a21, a22, a23) {
    const v27 = new Uint8ClampedArray(Uint8ClampedArray);
    const t20 = 1;
    const v30 = new t20(64);
    try { v27(-85357.59116785484, ...v30, 64, 46, -3.383486186086852e+307, ...v27); } catch (e) {}
    const o36 = {
        set e(a35) {
        },
    };
    o36.e;
    return Int8Array;
}
f20(f20, f20(f20, f20, f20), f20);
