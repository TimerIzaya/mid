let v1 = "e";
class C3 {
    static 3 = 2.220446049250313e-16;
    set b(a5) {
        const o6 = {
            ...a5,
        };
        function F7(a9) {
            if (!new.target) { throw 'must be called with new'; }
            const v10 = this.constructor;
            v10.bind();
            try { new v10(); } catch (e) {}
        }
        v1.length in this;
    }
    o(a16) {
        let v17;
        try { v17 = a16(a16, this, 2.220446049250313e-16); } catch (e) {}
        try {
            this.f = 4;
        } catch(e19) {
        }
        let v20;
        try { v20 = this.n(this, this, this); } catch (e) {}
        const v21 = a16 != v20;
        try { v17(v21, v21, this, ...v1, v21); } catch (e) {}
        return v20;
    }
}
function f23(a24) {
    class C25 {
    }
    return C25;
}
Object.defineProperty(C3, "valueOf", { writable: true, value: f23 });
new C3();
new C3();
const v28 = new C3();
class C29 extends C3 {
    #c;
    static {
        function f31() {
            return f23;
        }
        Object.defineProperty(this, "valueOf", { configurable: true, enumerable: true, get: v28 });
        for (let i33 = 0;
            (() => {
                "p" + i33;
                function F37(a39) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.constructor.arguments;
                    function f42() {
                        return f42;
                    }
                    const v43 = f42.arguments;
                    function f44() {
                        for (let v45 = 0; v45 < 5; v45++) {
                            const v49 = Array(36862, v43, v45 & v45);
                            v49[2] = v49;
                        }
                        return v43;
                    }
                    %PrepareFunctionForOptimization(f44);
                    f44();
                    %OptimizeFunctionOnNextCall(f44);
                    f44();
                }
                return i33 < 1;
            })();
            (() => {
                i33++;
                0 - 0;
                new Map();
                class C59 {
                }
                new C59();
            })()) {
            try { i33(i33); } catch (e) {}
            v1 /= this;
        }
    }
}
new C29();
new C29();
new C29();
new BigUint64Array(10);
new Float32Array(0);
new Int8Array(4);
function f75() {
    const v77 = ("D")[0];
    return v77.concat(v77);
}
const v79 = f75();
const v80 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
function f82(a83, a84, a85) {
    const v87 = [Array,a85];
    return Reflect.apply(v80.filter, v79, v87);
}
f82();
%PrepareFunctionForOptimization(f75);
f75();
%OptimizeFunctionOnNextCall(f75);
f75();
