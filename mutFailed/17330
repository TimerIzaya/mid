const v1 = [];
function F2() {
    if (!new.target) { throw 'must be called with new'; }
    const v4 = this.constructor;
    try { new v4(); } catch (e) {}
    try {
        this.d = v1;
    } catch(e6) {
        const v8 = new Set();
        v8[v8];
        function f10(a11) {
            return f10;
        }
    }
}
[-431885543,536870888,268435441];
const v15 = [1073741824,2147483648,1073741824];
[-1073741824,3];
class C20 {
    static b = 15216;
    get f() {
        delete v15[v15[this]];
        const o27 = {
            "execution": "async",
            "type": "major",
        };
        gc(o27);
        return -9007199254740990;
    }
}
new C20();
new C20();
const v32 = new Int32Array(-2, -2);
function f33(a34, a35, a36, a37) {
    const v38 = a34 >> a35;
    a35 | a36;
    for (let v40 = 0; v40 < 1000; v40++) {
        v32["p" + -2] = v40;
    }
    return v38;
}
f33();
new C20();
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "b", { enumerable: true, value: this });
    this.b = 1;
    ([-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135]).fill();
    Array(176726687);
}
const v55 = new F45();
v55[1629] = 0.002350346548077198;
for (let v56 = 0; v56 < 5; v56++) {
    function f57() {
        for (let i60 = 0, i61 = 10;
            i60 < i61;
            (() => {
                const v65 = i60++;
                v65 >> v65;
            })()) {
        }
    }
    f57();
    %OptimizeFunctionOnNextCall(f57);
}
new F45();
const v71 = new F45();
class C75 extends F45 {
    constructor(a77, a78, a79, a80) {
        -a80;
        const v83 = new Uint8ClampedArray();
        class C84 {
            constructor(a86, a87, a88, a89) {
                const v90 = this.constructor;
                try { new v90(v83); } catch (e) {}
                for (let v92 = 0; v92 < 5; v92++) {
                    ~v92;
                    v83[v92] = a89;
                }
            }
        }
        new C84();
        super();
        a77[1629] = a77;
    }
}
new C75(v71, v55, C75, "10");
new C75(v55);
[];
const v104 = new Int8Array(1024);
Reflect.construct(Uint8Array, [v104]);
const o109 = {
};
function f110(a111, a112, a113, a114) {
    class C116 extends Date {
    }
    const v117 = new C116();
    v117.getDay();
    return f110;
}
for (let v119 = 0; v119 < 10; v119++) {
    f110(v119, v119, v119, v119);
}
const o121 = {
};
4.0 - 4.0;
const v125 = new Uint8Array();
function f126(a127, a128, a129, a130) {
    const v131 = a129 ^ a129;
    const o135 = {
        "b": a127,
        ...v125,
        n(a133, a134) {
            return v131;
        },
    };
    return f126;
}
function F137(a139, a140, a141, a142) {
    if (!new.target) { throw 'must be called with new'; }
}
function f143(a144) {
}
class C145 extends f143 {
}
