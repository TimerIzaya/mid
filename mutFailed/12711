function f3() {
    const o11 = {
        m(a5, a6, a7, a8) {
            a8[Symbol.toStringTag] = a8;
            return a8;
        },
    };
    try { o11.m(o11); } catch (e) {}
    return "function";
}
const v13 = ("n")[708];
try {
    const t12 = "isConcatSpreadable";
    t12.toString = v13;
} catch(e14) {
}
let v16 = 164140152;
v16--;
function F18(a20, a21, a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = this?.constructor;
    try { new v24(a20, "isConcatSpreadable", a20, "isConcatSpreadable"); } catch (e) {}
    a20 * a20;
}
const v27 = new F18(v16, F18, v16, v16);
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v29 = 0; v29 < 5; v29++) {
    function f31() {
        try {
            v28.forEach();
        } catch(e33) {
            const v34 = e33?.constructor;
            try { new v34(v27); } catch (e) {}
            v34();
        }
        const v37 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v38 = v37.push(v37);
        v38--;
        const o45 = {
            toString(a41, a42) {
                (undefined && undefined) <= v37;
                return "isConcatSpreadable";
            },
        };
        try { o45.toString(o45, f31); } catch (e) {}
        return v28;
    }
    f31();
    %OptimizeFunctionOnNextCall(f31);
}
const v51 = new BigInt64Array();
class C52 {
    static {
        this.name = this;
        do {
        } while ((() => {
                let v55 = 0;
                v55++;
                return 0 < v55;
            })())
    }
}
try { new C52(); } catch (e) {}
1000000000000.0 - 1000000000000.0;
const v63 = ["function",1.0,1000000000000.0,1000000000000.0];
const v64 = [v63,-598429165,1.0,"function"];
class C65 {
}
try { C65(); } catch (e) {}
function f67(a68, a69, a70, a71) {
    a71 ^ 4046;
    const v75 = new BigInt64Array(4046);
    let o76 = {
    };
    [,...o76] = v75;
    return BigInt64Array;
}
f67.length = f67;
[v64,v63,v64,-724569.3765008149,14057];
Uint8Array.name;
const v81 = new Uint8Array(481);
v81[149] = v81;
function f82() {
    const t83 = ("match").__proto__;
    t83[1478] = f82;
    return "match";
}
let v85 = 56885;
v85--;
class C89 {
    static [0];
    static #b;
    static [2.0];
}
new Int32Array(v85);
const v94 = [-256,13351,5138,2,-4294967295,1000,268435440];
class C95 {
    constructor(a97, a98) {
        Math.atan2(v94);
    }
}
try { C95.bind(v51); } catch (e) {}
const v101 = [14057];
try { v101.forEach(0); } catch (e) {}
const v103 = Reflect.construct(Int32Array, v101);
v103[3948] = v103;
