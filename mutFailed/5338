const v2 = new Int16Array(3);
Int32Array.d = Int32Array;
const v5 = new Int32Array(1490);
16 * 16;
const v9 = new Uint8ClampedArray(16);
function f10(a11, a12, a13) {
    a13 >> a13;
    a11[Int32Array] = a13;
    v9.byteOffset >>= 16;
    v9[a11];
    v2.__proto__.BYTES_PER_ELEMENT;
    try { ("valueOf").repeat("valueOf"); } catch (e) {}
    try { a12["valueOf"](16, "valueOf", a12); } catch (e) {}
    const o28 = {
        [Int32Array](a22, a23, a24, a25) {
            v5[268435441] = a24;
            delete v5?.byteLength;
            let v27;
            try { v27 = v2.set(v2); } catch (e) {}
            v2[a11] = v27;
            return Uint8ClampedArray;
        },
        6: a11,
        "e": a13,
        [Uint8ClampedArray]: 16,
    };
    return o28;
}
const v29 = f10(16, 1490, 16);
v29.e = v29;
const v30 = f10(1490, 1490, 1490);
f10(3, 1490, 1490);
const v33 = new Promise();
function f34() {
    return f34;
}
const v35 = [1000000.0,0.15414713105528732,-125.94819788184554,0.0890497980789231,-Infinity,-2.2250738585072014e-308];
try { v35.flatMap(v5, v9); } catch (e) {}
const v37 = [-5.317200505083752e+307,2.23862305457169,-202.48024689685315];
v37[1];
[0.24599629796442457,816.8667638419447,7.775119959893686,-7.987250572653691e+307,-9.515190563859957,789.6146808600188,1000000000.0,1.1956116725979315e+308];
const v41 = [4.0];
[-136610.02069804212,1e-15,-1.7976931348623157e+308,418152.6315640665];
const v43 = [-Infinity,-7.7732554202046655,-1e-15,0.18301443884178836,-5.169395965185913,-5.0,-462312.7108134299,0.2688947327766197];
try { v33["entries"](...461471.53518758505, v37, f34, ...v33); } catch (e) {}
try { v41.some(a, 536870887); } catch (e) {}
function f49(a50) {
    return a50;
}
const v51 = f49?.constructor;
try { new v51(v30, v33, v43, 3); } catch (e) {}
class C53 extends f49 {
    static b;
}
