function f0() {
    try {
        const t2 = 8;
        t2.h = f0;
    } catch(e3) {
    }
    function f7(a8, a9) {
        const o12 = {
            set b(a11) {
            },
        };
        return o12;
    }
    const o24 = {
        "e": 64,
        [8](a15) {
            return 64;
        },
        "b": 64,
        ...8,
        "h": 64,
        toString(a20, a21) {
            let v22;
            try { v22 = a21(a21, a20, 1.7976931348623157e+308, this, 64); } catch (e) {}
            try { v22(v22, a21); } catch (e) {}
            return 1.7976931348623157e+308;
        },
    };
    return o24;
}
const v25 = f0();
f0();
f0();
const v29 = new Date();
const v30 = v29?.setFullYear;
class C31 {
}
"p" + -7;
try { new v30(f0, v29, v25); } catch (e) {}
const v36 = [-1148633342,-1418432247,1000,12435,268435441,9223372036854775807,512,6];
try { v36.map(f0); } catch (e) {}
([268435456,-1024,1669,-9007199254740992,-4294967295,-2,1073741825])[2];
v25 ^ [1816964233,1861715766,128,1024,-536870912];
f0();
64 === 64;
const v46 = new Int8Array(64);
v46[4] = v46;
let v47 = 7;
v47--;
function F51(a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a54;
    } catch(e55) {
    }
}
const v56 = new F51(15, 257);
const v57 = /[MrN]/gudi;
const v58 = /(x)(x)(x)\2/gvdisy;
try {
const t0 = 15;
t0("p", v57, v58, v58, v56);
} catch (e) {}
new BigUint64Array(v30);
for (let v64 = 0; v64 < 5; v64++) {
    const o68 = {
        set b(a66) {
            Date.b;
        },
    };
    o68.b = o68;
    o68.b = o68;
}
new Float32Array(4);
for (let v70 = 0; v70 < 5; v70++) {
    -v70;
    function f72() {
        let v74 = ("Vre").codePointAt(v70);
        v74--;
        let v76 = v74 * v74;
        v76--;
        return v76 / v76;
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
}
new Float32Array(2);
function F85(a87, a88, a89) {
    if (!new.target) { throw 'must be called with new'; }
    a88.toString();
}
new F85("p", 7n);
