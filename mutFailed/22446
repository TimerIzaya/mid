const v6 = [-1,-1620417029,31730,127,47162,268435456];
const v7 = [9,-2009643334,38110,1073741823,1073741825];
try { v7.reduce(-11223); } catch (e) {}
const v9 = [14,1421466473,-8];
const v11 = new Set();
class C12 extends Set {
    #o(a14, a15) {
        const o23 = {
            [-65535n](a17, a18, a19, a20) {
                eval();
            },
            ...-11223,
        };
        try {
            o23.c = v6;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            o25.c = v6;
            o25.b = a14;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            o27.c = v6;
            o27.b = a14;
            o27.g = 1073741824n;
        } catch(e28) {
        }
        try {
            const o29 = {
            };
            o29.c = v6;
            o29.b = a14;
            o29.e = a15;
        } catch(e30) {
        }
        const v33 = [[Int16Array,Int16Array,Int16Array,Int16Array]];
        class C35 extends Map {
        }
        const v36 = new C35(v33);
        const v37 = new Int16Array(v36);
        function f39(a40, a41, a42, a43) {
            const v46 = v36["entries"](a42, ...v37, BigUint64Array).next();
            const v47 = v46.__lookupGetter__;
            try { v47(v46); } catch (e) {}
            return a41;
        }
        for (let v49 = 0; v49 < 10; v49++) {
            f39();
        }
        %OptimizeFunctionOnNextCall(f39);
        f39();
        return v9;
    }
}
new C12();
new C12();
(+v11).sup();
let v57 = ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
v57++;
new C12();
const t65 = [[]];
const v62 = delete t65[0];
v62 && v62;
