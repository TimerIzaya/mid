class C3 {
    static p(a5) {
        const t2 = super.g;
        delete t2?.[205];
        typeof 1024n === "boolean";
        return 9007199254740991n;
    }
    static 1166;
    e;
    static g;
}
try { new C3(); } catch (e) {}
try { C3.toString(); } catch (e) {}
const v16 = new C3();
v16.e = v16;
const v17 = new C3();
const v18 = new C3();
try { v17["W"](2.220446049250313e-16, 30492, 30492); } catch (e) {}
const t18 = -1000000000000.0;
new t18(30492);
function f23() {
}
class C24 extends f23 {
}
const v25 = new C24();
class C26 extends C24 {
    #b = v25;
    constructor(a28, a29) {
        super();
        let v30 = 0;
        for (let i = 0; i < 5; i++) {
            v30 < 7;
            try {
                v25.#b;
            } catch(e34) {
            }
            v30++;
        }
    }
}
const v36 = new C26();
new C26(v36, C24);
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    a40++;
    a41.a = a41;
    const v45 = this?.propertyIsEnumerable;
    try { v45(v45); } catch (e) {}
    try { new v45(F38); } catch (e) {}
    const v48 = a41?.constructor;
    const v49 = v48?.__defineSetter__;
    try { new v49(-18594, v45); } catch (e) {}
    try { new v48(); } catch (e) {}
    a43.e;
    const v53 = [0.0,-1000.0,2.557943047142931];
    for (let v54 = 0; v54 < 5; v54++) {
        v53.valueOf = v54;
    }
    new BigInt64Array();
    try {
        this.f = a41;
    } catch(e57) {
    }
    try {
        this.c = C3;
    } catch(e58) {
    }
}
try { F38.toString(); } catch (e) {}
const v60 = new F38(-18594, v18, v17, v17);
const v61 = new F38(v60, v17, v18, v16);
v61.e = v61;
const v62 = new F38(v17, v17, v17, v17);
const v63 = v62.f;
v63.b = v63;
function f64(a65, a66, a67, a68) {
    const v69 = a65?.constructor;
    try { new v69(v61, a66, a65, a68); } catch (e) {}
    const v71 = a65?.c;
    try { new v71(); } catch (e) {}
    a67.h = a67;
    const o88 = {
        536870888: a66,
        [a67]: a67,
        [a66](a74, a75) {
            const v79 = v16.e;
            const o80 = {
            };
            try {
                o80.f = v79;
            } catch(e81) {
            }
            try {
                const o82 = {
                };
                o82.f = v79;
                o82.d = v62;
            } catch(e83) {
            }
            try {
                const o84 = {
                };
                o84.f = v79;
                o84.d = v62;
                o84.e = v79;
            } catch(e85) {
            }
            try {
                const o86 = {
                };
                o86.f = v79;
                o86.d = v62;
                o86.g = 0;
            } catch(e87) {
            }
            return a65;
        },
    };
    o88[536870888];
    return o88;
}
const v90 = f64(v62, v62, v60, f64);
v90[536870888] = v90;
const v91 = f64(v61, C3, v60, v60);
const v92 = f64(v91, v91, v61, v91);
v92[536870888];
const v94 = [0,1593815803];
[16,536870889,-536870912,-2,-30389,604649447,-65537];
let v96 = 9223372036854775807;
9007199254740992 >>> 9007199254740992;
let v100 = Array;
let v101 = 1049;
v101++;
const v103 = v100(v101);
try { v103.reduce(v92); } catch (e) {}
class C105 extends v100 {
    n(a107, a108) {
    }
    #p(a110, a111, a112, a113) {
        super.m();
    }
    o(a116, a117) {
        for (const v119 of "bigint") {
        }
        f23();
    }
    static #a = 65536;
    #d;
    static [v103] = v94;
    static {
        for (let v125 = 0; v125 < 32; v125++) {
        }
    }
}
function f127() {
    for (const v131 of Array(4087, Array, Array)) {
    }
    return f127;
}
%PrepareFunctionForOptimization(f127);
try { C105.of(); } catch (e) {}
C105.prototype;
v96 = 65536;
Number.isNaN(++v100);
Symbol.e = Symbol;
new C105();
class C140 extends BigInt64Array {
}
new gc();
const v143 = new C105();
try { v143.findLastIndex(v92); } catch (e) {}
let v145;
try { v145 = v143.concat(v16); } catch (e) {}
v145[0];
1000000000.0 - 1000000000.0;
const v151 = v94;
[-2.575460385290415e+307,0.8947674897012107,3.791183925828106,1000000000000.0,431.3443950365104,-1.5895387754722096e+308,0.6612248920706111,2.2250738585072014e-308,-0.0];
const v153 = [-9.578589124662172e+307,0.5803164764357316,1e-15];
class C155 extends Uint8Array {
}
class C156 {
    static #p(a158) {
        return a158;
    }
}
new C156();
1000000000.0 * v153;
let v161 = 8551;
v161++;
