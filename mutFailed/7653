class C3 {
    static #e;
    static [C3];
    static [2.0];
    #n(a5, a6) {
        try { new a5(this); } catch (e) {}
        return 10;
    }
    static f;
    [7];
    88 = 2.0;
}
const v11 = new C3();
v11[88];
const v14 = new Float64Array(Float64Array);
const v15 = v14?.constructor;
let v16;
try { v16 = new v15(v11, 2.0, -2.0); } catch (e) {}
try {
    const o17 = {
    };
} catch(e18) {
}
const v19 = new C3();
v19[88] = v19;
function f20() {
    const o24 = {
        ...1.0,
        set b(a23) {
        },
    };
    return o24;
}
const v25 = f20();
class C26 {
}
const v27 = C26?.__lookupGetter__;
let v28;
try { v28 = new v27(C3); } catch (e) {}
const v31 = new Uint32Array(C26, 7, 7);
try { v31.entries(); } catch (e) {}
function f33(a34, a35, a36, a37) {
    const v38 = a34?.constructor;
    try { new v38(v28); } catch (e) {}
    a34.g = v31;
    let v40 = a36 % a36;
    v40--;
    const o48 = {
        "b": a34,
        ...-2.0,
        o(a43, a44) {
            return this;
        },
        5: 7,
        n(a46, a47) {
            v31[a34] = v31;
            return a34;
        },
    };
    const v49 = o48?.b;
    try { new v49(a34, a37, a34); } catch (e) {}
    const v51 = v25.b;
    try { v51(a36, v40); } catch (e) {}
    try { Int8Array(f33, Int8Array, C3); } catch (e) {}
    const v56 = new Int8Array();
    let v57;
    try { v57 = v56.slice(C26); } catch (e) {}
    const v58 = v57?.set;
    try { new v58(o48); } catch (e) {}
    new Date(..."undefined");
    return v57;
}
f33(Uint8Array);
function f65(a66, a67, a68, a69) {
    const o80 = {
        toString(a71, a72) {
            const v75 = new Int32Array(1024);
            for (const v76 of v75) {
                new SharedArrayBuffer();
                SharedArrayBuffer.e = v16;
                [1539012200,f65];
            }
        },
    };
    return o80;
}
new C3();
const t87 = 2.0;
t87.a = 2.0;
const v83 = [748666.7832804511,3.0];
class C85 extends Float64Array {
    [v83];
}
new C85();
try { ("async").match("async"); } catch (e) {}
const o88 = {
    "execution": v27,
};
const v89 = [-1.5529887870333795e+308,-748.1650295275717,0.9205726241487137,1.0,-1000.0,-3.1477078363151474,2.220446049250313e-16,Infinity];
function f90() {
    return v89;
}
const v93 = new Int16Array(v11);
try { v93.findLast(v14); } catch (e) {}
try { new BigUint64Array(BigUint64Array, C26, C26); } catch (e) {}
function f98() {
    const v99 = [f98,f98,f98,f98];
    class C101 extends v99.constructor {
    }
    const v102 = new C101();
    const v103 = v102.constructor;
    const v104 = v103.bind();
    try { v104(v104, v99, f98, v104, v103); } catch (e) {}
    return C101;
}
new BigUint64Array(C3);
class C109 {
}
C109.name = C109;
function f110(a111, a112) {
    class C113 {
    }
}
new Float32Array(2);
const v117 = ([]).length;
function F119() {
    if (!new.target) { throw 'must be called with new'; }
}
F119.caller = F119;
class C121 {
}
C121.length;
class C123 extends C121 {
}
try { C123.call(Float32Array); } catch (e) {}
Math.log10(v117);
