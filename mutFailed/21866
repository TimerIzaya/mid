const v4 = new Int8Array();
for (const v5 in v4) {
}
const v6 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v7 = [601759695];
const v8 = [1073741824,1073741823,1376142744,1073741825];
function f10(a11, a12, a13, a14) {
    function f16() {
        const o25 = {
            "e": -4294967295,
            ...v6,
            84: arguments,
            ..."Vre",
            set b(a20) {
            },
            ["Vre"](a22, a23) {
                super[f16];
            },
        };
        return a11;
    }
    class C27 extends Float32Array {
        constructor(a29, a30, a31) {
        }
    }
    f16();
    %OptimizeFunctionOnNextCall(f16);
    let v34;
    try { v34 = v8[a13](..."find", a14, ...v7, ...v8, ...522675525n); } catch (e) {}
    v34 <= a13;
    return arguments;
}
try { f10(964598.6714444079, 964598.6714444079, 964598.6714444079, v7); } catch (e) {}
let v39 = 5;
-9 >>> -9;
const v42 = [-2.220446049250313e-16,-1.2960362069804638,1000000.0];
const v43 = [-1.4967617591971738,2.0,-2.2250738585072014e-308,0.30325345191391684,-1000000000.0,-471.48827446067276,0.4054223816062078,-3.1156994274492186e+307,1000.0];
try { v43.map(1.0); } catch (e) {}
const v46 = Symbol.species;
v42[v46] = 8.580387257773513;
~268435440;
Uint8Array.length;
const v51 = new Uint8Array(268435440);
v46.description = 964598.6714444079;
v39 = -15;
const v54 = new Int8Array(8);
const v55 = [v54];
995 | 995;
const v59 = new Uint8ClampedArray(995);
const v61 = new Int8Array(v59);
const v62 = v61.copyWithin;
v62.name = v62;
for (let v63 = 0; v63 < 32; v63++) {
    v42[-2] = -9 << v63;
    const v65 = v43[v46];
    try {
        v65.__proto__ = v65;
    } catch(e66) {
        e66.g = e66;
    }
    const v68 = new Uint8ClampedArray();
    v68.byteOffset;
    const v70 = /c(?:ab)|cde/vdmy;
    Math.sin(v70.exec());
    const v75 = "object" + v63;
    const v76 = v75?.trim;
    let v77;
    try { v77 = new v76(); } catch (e) {}
    let {"c":v78,"d":v79,} = v77;
    try { new v77(v75, v78, v51, v70); } catch (e) {}
    const v82 = [];
    Reflect.apply(v4.toString, v77, v82);
    v43[v75] = v63;
}
const v85 = [1000000.0,69.5407062634481,-1e-15,NaN];
function F86(a88, a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a88;
}
const v92 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
class C94 {
    static #e;
    m(a96, a97, a98, a99) {
        v92.#e;
        a97.#e = -1;
    }
}
let v102 = 0;
v102 & v102;
do {
    break;
    v85[Symbol.asyncIterator] = v42;
    v102++;
} while (v102 < 9)
const v111 = Uint8ClampedArray.name;
const v112 = new Uint8ClampedArray(995);
new Int8Array(v112);
const v116 = new Int16Array(3);
Int8Array.e = Int8Array;
const v119 = new Int8Array(86);
new Uint8ClampedArray(8);
function f123(a124, a125, a126, a127) {
    a124 * a124;
    a126 >> a126;
    const o134 = {
        "d": v119,
        "c": v116,
        __proto__: a124,
        ...v116,
        set b(a131) {
            try {
                v119.byteOffset = a127;
            } catch(e132) {
                switch (e132) {
                    case this:
                        f123(this, v111, v85, v51);
                        break;
                }
            }
        },
    };
    return o134;
}
v55[Symbol.hasInstance];
let [v139,v140,v141,v142] = v7;
f123.name;
f123(3, 86, 8, 8);
const v145 = f123(Uint8ClampedArray, 3, 8, 3);
v145[2] = v145;
f123(v119, 3, 86, 3);
function f147(a148, a149, a150, a151) {
    const v154 = new Date(a148);
    const v156 = new Set();
    const v157 = v156.add(v154);
    let [v158,,...v159] = v156;
    const v160 = v158?.setFullYear;
    try { new v160(v156, v145, f123); } catch (e) {}
    let v162;
    try { v162 = v159.findLast(); } catch (e) {}
    const v163 = v158.setUTCHours(v157, Float64Array, v159);
    v163 % v163;
    try { Number.parseInt(a151, 86); } catch (e) {}
    const o167 = {
        __proto__: v156,
    };
    try { o167.add(v156); } catch (e) {}
    function f169() {
        return v162;
    }
    const v170 = f169();
    class C171 extends f169 {
    }
    const v173 = new Int32Array(v170);
    v173.BYTES_PER_ELEMENT = v173;
    Number.isNaN(v163);
    const v175 = v158.setUTCFullYear(v173, f147, f147, v158);
    v175 - v175;
    return v175;
}
for (let v177 = 0; v177 < 25; v177++) {
    const v178 = [1073741824,1073741823,1376142744,1073741825];
    for (let v179 = 0; v179 < 5; v179++) {
        v179 / v179;
        const v181 = v178.toSorted(f147);
        try { v181.fill(v178); } catch (e) {}
    }
}
