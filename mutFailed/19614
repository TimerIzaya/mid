const v0 = [257,-2147483649,0];
[806708344,-128,9,7,1514143929,1967254376];
[-868692135,-41843,12,-525202295];
const v3 = [536870887,-1314597871,1247685076,1007727974,268435456,2147483649];
[-644778719,37573,-1332496471,-14231,-48693,1073741824,16,65535,4096,-1];
const v5 = [-2,4];
class C6 {
    static {
        v0 && v0;
        const v10 = new gc();
        Array(1000).indexOf();
        const v15 = this[0];
        class C16 {
        }
        v10.constructor;
        class C18 {
            e;
        }
        const v19 = new C18();
        v19.__defineSetter__;
        try { v15(v3); } catch (e) {}
        class C24 {
            static {
                function f26() {
                    return this;
                }
                function f27(a28) {
                    return f27;
                }
                Object.defineProperty(this, 256, { configurable: true, get: f26, set: f27 });
            }
            static [256];
        }
        const o30 = {
            "maxByteLength": 3516,
        };
        let v33 = new Int8Array(1024);
        v33 %= v33;
        const t38 = [1073741823,64,-192774235];
        t38.length = 127;
        const v37 = new SharedArrayBuffer(3516, o30);
        new BigUint64Array(v37);
    }
    e;
    o(a41, a42, a43, a44) {
    }
    constructor(a46, a47, a48) {
        for (let v49 = 0; v49 < 83; v49++) {
            for (let v50 = 0; v50 < 32; v50++) {
                function f52() {
                    ("c").toLowerCase();
                    return 1864489360;
                }
            }
            Object.defineProperty(v3, "e", { enumerable: true, value: super[1000] });
        }
    }
}
const v58 = new C6();
const v59 = new C6();
const v60 = new C6();
[C6,v5,v60,v59,v3];
[v60,v58,v0,v5];
[v3];
new Date();
function f66(a67) {
}
const v68 = f66(f66);
f66();
new Set();
function F72(a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
}
new F72(v68);
for (let v78 = 0; v78 < 25; v78++) {
    const v79 = [601759695];
    const v80 = [1073741824,1073741823,1376142744,1073741825];
    function f81(a82, a83, a84, a85) {
        try { v80["find"](..."find", a85, ...v79); } catch (e) {}
        const v88 = [Set];
        [v88,v88,v78];
        v79 || f66;
    }
    for (let v91 = 0; v91 < 5; v91++) {
        function f92() {
            return f92;
        }
        const v95 = new Uint16Array(2785);
        v95.fill();
        f81();
    }
}
