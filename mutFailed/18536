Int32Array[1] = "valueOf";
const v3 = new Int32Array(Int32Array, Int32Array, Int32Array);
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
}
const v8 = new F4(Int32Array, v3);
function f9(a10) {
    let v11;
    try { v11 = v8.resize(v3, F4, Int32Array, a10); } catch (e) {}
    v3.length |= v11;
    return v11;
}
const v12 = f9();
f9();
class C15 {
    static m(a17) {
        try { new a17(-2003687489, -14194, "valueOf"); } catch (e) {}
        const v19 = super.d;
        try {
            const v21 = new Int16Array(Int16Array, Int16Array, Int16Array);
            return v21["subarray"]();
            const t21 = "valueOf";
            t21.__proto__ = v19;
        } catch(e24) {
        }
        new Date(512);
        function F28(a30) {
            if (!new.target) { throw 'must be called with new'; }
            const v31 = this.constructor;
            v31.bind();
            try { new v31(); } catch (e) {}
        }
        return "valueOf";
    }
    [-14194];
    static h = "valueOf";
    #b = -2003687489;
    1073741824;
    124041754 = -14194;
}
new C15();
new C15();
new C15();
new Float64Array(9);
new Int16Array(65);
new Uint8Array(0);
const v46 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
const v47 = [-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757];
v47.toJSON = v3;
const v48 = [v47,v46,v46];
v48.toJSON = v12;
function f49(a50, a51) {
    return a50;
}
const v54 = [v48];
const o55 = {
    "arguments": v54,
    "type": "function",
};
function f57() {
    return 2147483648n;
}
const v58 = [];
function f60() {
    return Array;
}
Object.defineProperty(Array, "toString", { writable: true, configurable: true, enumerable: true, get: f60 });
const v62 = new Array(228);
class C63 {
    [Array] = v58;
    static {
        function F65(a67, a68) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a68;
            } catch(e69) {
            }
        }
        const v70 = new F65(v62, this);
        new F65(Array, F65);
        new F65(v70, v62);
    }
}
new C63();
new Worker(f49, o55);
