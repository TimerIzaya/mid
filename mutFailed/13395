const v0 = [];
let v1 = -14;
const v4 = [-8284];
const v5 = [v1,v0,v4,-15,v4];
[-8284,v0,v5,v5];
class C7 {
    get e() {
        let v9 = 0;
        -9223372036854775808 << -9223372036854775808;
        try { v4.toString(); } catch (e) {}
        super(-9223372036854775808);
        function f13(a14, a15, a16, a17) {
            arguments[2] = arguments;
            function f19() {
                Math.max(a16);
                +a14;
                return Math.ceil(a14);
            }
            f19();
            %OptimizeFunctionOnNextCall(f19);
            return f13;
        }
        while (v9 < 10) {
            Math.max(14);
            v1--;
            Math.trunc(v9);
            Math.sign(14);
            -555.3012915720933;
            v9++;
        }
        return this;
    }
}
new C7();
new C7();
const v38 = new C7();
/(?:a+)+/um;
const v40 = [601759695];
const v41 = [1073741824,1073741823,1376142744,1073741825];
function f42(a43, a44, a45, a46) {
    try { v41["find"](..."find", ...a46, ...v40); } catch (e) {}
    return -8284;
}
const v49 = /^xxx$((((.).).).)(foo(?<=bar)baz)/gudsy;
/{z}/gdi;
const v51 = /EyL9/uim;
const v52 = [-1300791131,33477,0,5,-48254,14,4294967295,545422795];
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = [gc,v51];
    Reflect.apply(v52.push, v51, v57);
    new Uint8Array(268435440);
    function f63() {
        const o64 = {
        };
        return o64;
    }
    const v65 = f63();
    class C68 {
    }
    const v69 = new C68();
    function f70(a71, a72) {
        a71.BYTES_PER_ELEMENT;
        class C74 {
        }
        C74.length;
        try { ("0x2I").sup(); } catch (e) {}
        class C79 {
        }
        const v80 = C79?.call;
        try { new v80(null); } catch (e) {}
        class C82 extends C79 {
        }
        try { new C82(NaN, v69, NaN, v65); } catch (e) {}
        const v84 = a72?.propertyIsEnumerable;
        try { v84(); } catch (e) {}
        class C86 {
        }
        try { C86.call(C79); } catch (e) {}
        const v88 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
        class C89 {
        }
        try { C89.apply(1.7976931348623157e+308, f70); } catch (e) {}
        Symbol.b = Symbol;
        C89[Symbol.replace] = v88;
        const v93 = [];
        let v94;
        try { v94 = v93.with(v93); } catch (e) {}
        const v96 = new Float64Array(v93, v94);
        const v97 = new Float64Array(v96, a71, v94);
        const v98 = v97.values();
        try { v98.next(); } catch (e) {}
        return v97;
    }
}
new F53();
let v101 = v49 - -15;
v101 += v1;
try {
    v52.valueOf = v38;
} catch(e102) {
}
