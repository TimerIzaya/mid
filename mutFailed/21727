function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        try { this.toISOString(this, F0, this, 10, 10); } catch (e) {}
        const o4 = {
        };
        new Proxy(this, o4);
        this.c = 10;
    } catch(e7) {
        this[e7];
        new Date();
        let {"c":v11,"e":v12,...v13} = this;
        function f14() {
            return v11;
        }
    }
}
const v15 = new F0();
new F0();
new F0();
[-1.4925749037348153e+308,-Infinity,600366.2998360114,0.42217962569875433,0.015191808668305384,1000000000000.0,0.3123709201400371,378606.12992026075,3.0,1000000.0];
[-1000000.0,0.3403489787073254];
[-2.0,0.2716084952177181,213731.51881926903,0.5054980865220109,1000000000000.0,0.2940958121855065,0.11288189279825545,1.434268019184378e+308,0.4284155033691276];
let v21 = 1286;
new Uint8Array(v21);
let v25 = Int16Array;
let v27 = v15 ^ v25--;
v21 <<= v21;
v27 &&= 64;
const v29 = Symbol.iterator;
const o38 = {
    [v29]() {
        let v31 = 10;
        const o37 = {
            next() {
                v31--;
                const v35 = v31 == 0;
                const o36 = {
                    "done": v35,
                    "value": v31,
                };
                return o36;
            },
        };
        return o37;
    },
};
new v25(64);
new Uint8Array(9);
function F46(a48) {
    if (!new.target) { throw 'must be called with new'; }
    let v49;
    try { v49 = this.constructor(); } catch (e) {}
    const v50 = this.constructor;
    try { new v50(); } catch (e) {}
    try {
        a48 - -1024;
    } catch(e54) {
        ("gV9")["toLowerCase"](v50, ...8.318311894005703, ...v49);
    }
}
new F46(F46);
new F46();
