function f0() {
    const v1 = [601759695];
    const v2 = [1073741824,1073741823,1376142744,1073741825];
    function f3(a4, a5, a6, a7) {
        function f8() {
            v2.forEach(a5);
        }
        new Int8Array();
        for (let v12 = 0; v12 < 5; v12++) {
        }
        try { v2["find"](..."find", a7, ...v1, ...v2); } catch (e) {}
    }
    class C16 extends f0 {
    }
    new C16();
    const o19 = {
    };
    gc(o19);
    const o28 = {
        1: 4096,
        __proto__: -22743,
        [-1000000.0]: -22743,
        "a": -22743,
        "b": 4096,
        get d() {
            const v24 = this[120];
            super.d = 4096;
            %VerifyType(4096);
            return v24;
        },
    };
    return o28;
}
f0();
f0();
f0();
const v32 = [1.7976931348623157e+308];
[-1e-15,-961755.3781158333,-5.508503472351118e+307,-1000000000.0,1000000000.0];
[NaN,-2.2250738585072014e-308,-1000000.0,2.220446049250313e-16];
new BigUint64Array(7);
new Uint16Array(10);
new Uint8Array(16);
const v44 = [-9223372036854775808];
[1000,9007199254740990,4,-4294967296,-1911934186,5,-1686];
new Uint8ClampedArray(5);
function F49(a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this?.constructor;
    let v54;
    try { v54 = new v53(this, a52); } catch (e) {}
    this.c = v54;
}
const v55 = [-16,-2,-56243,65535,268435439,17491,-65535,4294967296];
const v60 = new Date(-9223372036854775807);
v60.setTime(-9223372036854775807);
function f62() {
    const o65 = {
        ..."Vre",
        get a() {
            return f62;
        },
    };
    return o65[5];
}
const v68 = [-65535n,-65535n,-10n];
[v68,-10n,-65535n];
const v70 = [v55,-10n,v55,-57761n];
[-10n,-10n,-10n];
const v72 = [v70,-57761n,v44,v68,-65535n];
[v72,v70,v72,v68];
const v74 = [3.836595330454784e+307,-1.1402235194805368e+308];
const v75 = [991.721527488573,-290835.2265090322];
try {
    v74.length = 16;
} catch(e77) {
}
[-1.0,-1000000.0,-6.453134415503834e+307,-2.2250738585072014e-308,1e-15,-228003.00463890494,1.9400411482062907,-197.7029619198281,Infinity];
const v80 = /(?:a*)+q(?<a>.)/guds;
function f81(a82) {
    const o86 = {
        set b(a84) {
        },
        get d() {
            return a82;
        },
        __proto__: v80,
    };
    return o86;
}
f81(v80);
const v88 = new WeakMap();
const v93 = ("-1723624938").slice(9, "g").normalize();
try { v93.substring(v75, WeakMap); } catch (e) {}
class C95 {
    constructor(a97, a98) {
        a98.sup(v93, a97);
        BigUint64Array.toLocaleLowerCase();
    }
}
const v101 = [v75,v88];
[v88];
const v103 = [v68,v88];
try { v103.pop(); } catch (e) {}
const v105 = /(x)(x)(x)\1/uis;
function f106(a107, a108, a109, a110) {
    const o117 = {
        4294967295: v101,
        [v105](a112, a113, a114, a115) {
            super.test();
        },
    };
    return a108;
}
class C119 {
}
[295968041,[-1024,536870889,65536,65536]];
const o123 = {
    "arguments": v32,
    "type": "-1723624938",
};
-65535n <= -8298n;
8.438590633230234e+306 / 8.438590633230234e+306;
const t120 = [-936145422,536870912,127,257,-36772,-15984,2];
t120.length = 6;
const v133 = [];
function f134() {
    gc(256);
    function* f139(a140) {
        yield [9007199254740990,-4294967296,-1205995130,-12581,9];
        return -1.7570084557226905e+308;
    }
    const o154 = {
        toString() {
            function F144() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    let v146 = 0;
                    do {
                        v146++;
                    } while (v146 < 5)
                    new F144();
                } catch(e151) {
                }
            }
            super[this];
            return this;
        },
        ...v133,
        n() {
            return this;
        },
    };
}
f134();
f134();
f134.caller;
function f159() {
    function f160(a161) {
        try {
            const o162 = {
            };
        } catch(e163) {
        }
    }
    try {
    } catch(e164) {
    }
}
gc();
const v168 = new Uint8Array(165);
const v169 = v168.lastIndexOf();
v169 | v169;
const v172 = (a173, a174, a175, a176) => {
    function F177(a179, a180, a181, a182) {
        if (!new.target) { throw 'must be called with new'; }
    }
};
try { v172(Uint8Array, v169, 7, 8.438590633230234e+306); } catch (e) {}
