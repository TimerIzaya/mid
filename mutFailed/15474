const v2 = new Float64Array(239);
const v4 = [5,5];
const v6 = 9007199254740991n * 9007199254740991n;
v6 * v6;
const v8 = [];
function f9(a10, a11, a12) {
    v8.copyWithin();
    try {
        f9(-268435456, 0.6683462416314783, [-268435456]);
    } catch(e18) {
    }
    const v19 = v2 >> -268435456;
    v19 >> v2;
    return -v19;
}
const v22 = v4.concat(5);
class C23 {
}
new Int8Array(1);
new BigUint64Array(2290);
new BigInt64Array(1073741824);
const v36 = new BigInt64Array();
let v37 = -9223372036854775808;
v36.copyWithin(v37);
const v39 = new Uint32Array(3);
new Uint8Array(0);
new Uint8Array(1);
function f46(a47, a48, a49, a50) {
    const v51 = a48 >>> a48;
    const v52 = v51 >>> v51;
    for (let v54 = 0; v54 < 5; v54++) {
        function f55() {
            let v58 = Math.acosh(-14);
            v58--;
            const v60 = Math.atanh(-14);
            const v62 = ~(v60 >> v60);
            return v62 != v62;
        }
        f55();
        %OptimizeFunctionOnNextCall(f55);
    }
    const v65 = v52 != a47;
    for (let v66 = 0; v66 < 5; v66++) {
    }
    const v68 = Math.max(a48);
    const v69 = v68 - v68;
    const v71 = new ArrayBuffer();
    v71.transfer();
    function f73(a74, a75, a76, a77) {
        const v78 = /(?:a*)+q(?<a>.)/guds;
        for (let [i85, i86] = (() => {
                const v81 = [497658199,-1,2147483647,-16,9,-4294967297,-180329643];
                v81.group(Symbol);
                const o83 = {
                    __proto__: v81,
                };
                return [0, 10];
            })();
            i85 < i86;
            v37--) {
            for (let v93 = 0; v93 < 5; v93++) {
                const v94 = a76.constructor;
                try { v94(v78, v78); } catch (e) {}
                v22.constructor;
                a49.constructor;
                [i86,i86,i86,i86,i86] > 8n;
            }
        }
        return a74;
    }
    for (let v101 = 0; v101 < 10; v101++) {
        f73(v101, v22, v101, f73);
    }
    const v103 = [];
    function F104() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = v103;
        } catch(e106) {
        }
    }
    const v107 = new F104();
    const o116 = {
        "h": v107,
        199: v68,
        "b": F104,
        "a": v103,
        n(a109, a110, a111) {
            try {
            } catch(e115) {
            }
        },
    };
    const o117 = {
    };
    o117.b = v65;
    const o118 = {
    };
    const v122 = new Set([2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614]);
    function F123(a125, a126) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.e = a125;
        } catch(e127) {
            for (let [v128,v129] of a125) {
            }
        }
        try {
            const t108 = v122[this];
            let v131 = delete t108?.d;
            v131 = a125;
            Math.clz32();
            Math.acos(this);
            Math.max(255);
            new F123();
        } catch(e138) {
        }
    }
    o118.a = v69;
    o118.a = v69;
}
for (let v139 = 0; v139 < 5; v139++) {
    f46(v139, v139);
}
%OptimizeFunctionOnNextCall(v39);
f46();
try {
} catch(e142) {
}
for (let v143 = 0; v143 < 5; v143++) {
    function f144() {
        const v147 = Array().unshift();
        try {
        } catch(e148) {
        }
        const o149 = {
        };
        const v151 = [];
        try { v151.filter(v147); } catch (e) {}
        function f153() {
        }
        function F155(a157) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C158 extends F155 {
            valueOf(a160, a161, a162, a163) {
                const v164 = this?.constructor;
                try { new v164(); } catch (e) {}
            }
        }
        const v166 = new C158();
        try { v166.constructor(); } catch (e) {}
        const o174 = {
            set g(a169) {
            },
            [v151](a171, a172, a173) {
            },
        };
        for (const v175 in o174) {
            try { ("function").endsWith(v143); } catch (e) {}
            try { v166.valueOf(v175); } catch (e) {}
        }
        const v181 = [];
        const v182 = [-2.0,272822757,"function"];
        v182.toString = Symbol;
        const o183 = {
            __proto__: v182,
        };
        v181[o183] &= 272822757;
    }
    try { f144(); } catch (e) {}
    f144();
    %OptimizeFunctionOnNextCall(f144);
}
