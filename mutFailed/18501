function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -4294967297n;
    } catch(e6) {
    }
    try {
        this.b = -4294967297n;
    } catch(e7) {
    }
    try {
        this.d = a5;
    } catch(e8) {
    }
}
new F3(852906053n);
new F3(-29505098n);
new F3(-4294967297n);
class C14 extends Date {
}
const v15 = new C14();
const v16 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v19 = new Uint32Array(v16, 2684);
const v21 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v22 = [601759695];
const v26 = v16.length;
const v27 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
const o44 = {
    [522675525n](a30, a31) {
    },
    "c": v22,
    valueOf(a33, a34) {
    },
    [v26](a36) {
    },
    [-1]: 2684,
    1073741824: v19,
    "maxByteLength": -268435456,
    "b": -4294967295,
    "arguments": v27,
    [-4294967297n](a38, a39, a40, a41) {
        eval();
    },
    "e": -4294967295,
    "e": -268435456,
    "arguments": v21,
    256: v15,
    ...v22,
    "type": "Vre",
    ..."Vre",
    4: "Vre",
    "c": -268435456,
    "type": "Vre",
    "type": "Vre",
    6: -268435456,
};
new Map();
[512,-10,-128,7839,5];
[-1,-9007199254740991,16];
[-9223372036854775807,536870889];
const v49 = [1000000000.0,1e-15,-475442.9521069585,-2.2250738585072014e-308,4.0,2.220446049250313e-16,0.9351529823179695,NaN];
const v50 = [1.7976931348623157e+308,-642666.9818654677,-1000000000000.0];
class C53 {
    constructor(a55, a56, a57) {
        const v59 = [a57,-4294967295];
        Reflect.apply(a57.includes, v50, v59);
    }
}
new C53(-1024, v49, v49);
const v63 = [1,-1643840771,4,1111495904,-9007199254740992,-268435456,255,-403790861,268435439];
function f64() {
    return Date;
}
Object.defineProperty(v63, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f64 });
async function f67(a68, a69, a70) {
    try { a69.groupToMap(a68); } catch (e) {}
    const v72 = ~a69;
    for (let v73 = 0; v73 < 250; v73++) {
    }
    return v72;
}
f67(f67, v63);
