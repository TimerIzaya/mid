function f0() {
}
/(a)/gmsy;
const v8 = /foo[z]*/uimsy;
const v9 = /([a-b-c]?)/gm;
class C10 extends f0 {
    static #m(a12, a13) {
        f0();
        delete v8[94];
        return a12;
    }
    p(a17, a18) {
        let v19 = 8n;
        v19++;
        let [,...v22] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
        new Float32Array(Uint8ClampedArray);
        [-4294967295,10000,-256,-5592,64158,-1794764266,65535,2147483649,5,755298661];
        [256,-7,6,536870912,1917190684,10,0,-2147483649,1073741823,2903];
        [65535];
        return -4;
    }
    [-1792170762] = -324700293;
    n(a30) {
    }
    constructor(a32, a33) {
        function f34(a35, a36, a37, a38) {
            return arguments;
        }
        for (let v40 = 0; v40 < 5; v40++) {
            const v41 = f34();
            v41[1] = v41;
        }
    }
    [f0] = v9;
}
new C10();
new C10();
new C10();
const v47 = new Int8Array(520);
const v49 = new Uint8ClampedArray();
const v50 = v49.toReversed();
class C51 {
}
const v53 = new Int32Array();
let {...v54} = v53;
const v56 = [-6.741855211610779,553.594505585577,1.0637276618206825e+308];
class C57 {
    static [v56];
}
v56.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
for (let v62 = 0; v62 < 57; v62++) {
    try { v47.indexOf(v62); } catch (e) {}
    try {
        new f0();
    } catch(e65) {
    }
}
const v66 = [v50,v50];
Reflect.apply(v47.includes, v47, v66);
