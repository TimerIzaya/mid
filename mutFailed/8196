const v2 = new Uint16Array(Uint16Array);
const v5 = new Uint16Array(256);
const v8 = new Uint8Array(2968);
class C9 {
    constructor(a11, a12) {
        let v13;
        try { v13 = a11.getUint16(this, this, a12, 256); } catch (e) {}
        const v14 = new Uint8Array(109, v13, 109);
        v14[a11];
    }
    static c;
    static #c;
    static valueOf(a17, a18, a19, a20) {
        v8[Uint16Array] %= a20;
        try {
            v5.b = this;
        } catch(e21) {
        }
        return a19;
    }
}
v2 >> v5[65537];
C9[10000];
try {
    v5.c = C9;
} catch(e25) {
}
const v26 = new C9(2968, C9);
new C9(109, 2968);
new C9(2968, v26);
function F29() {
    if (!new.target) { throw 'must be called with new'; }
}
const v32 = new F29();
const v41 = [-2.220446049250313e-16,-2.220446049250313e-16];
const v42 = [v41];
const v43 = [0.3083488057663979,0.3083488057663979];
F29.push(0.3083488057663979);
class C45 {
    constructor(a47, a48) {
        const v49 = this.__lookupGetter__;
        try { new v49(); } catch (e) {}
        a48[2];
        const v52 = ~v42;
        function f56(a57, a58, a59, a60) {
            a57.length;
            a59++;
            const o66 = {
                n(a64, a65) {
                    return v52;
                },
            };
            return o66;
        }
        f56(v32, Uint8Array, f56);
        for (let v68 = 0; v68 < 625; v68++) {
            v68 >>> v68;
            f56(Uint8Array);
        }
    }
}
new C45(v41, v41);
const v73 = new C45(v42, v43);
const t63 = v73.constructor;
new t63(604.4479109019192, 0.3083488057663979);
