let v0 = -2;
class C3 {
    [16593];
    set g(a5) {
        let v6;
        try { v6 = a5(v0, v0, -128, this, -128); } catch (e) {}
        9007199254740991n * 9007199254740991n;
        const o10 = {
            "type": "function",
        };
        v6[-128] ^= 16593;
        v0 = 16593;
        class C12 {
            static n(a14, a15) {
            }
            static [16593];
        }
        const v16 = new C12();
        function f17() {
            return f17;
        }
        const o19 = {
            ..."function",
            [v16]: "function",
            "e": C12,
            ...C12,
            "d": f17,
            get f() {
                C12[3] >>= 9;
                return "function";
            },
        };
        new Int32Array(1024);
        return 8;
        class C24 {
        }
        const v25 = new C24();
        with (v25) {
            try { ("function").startsWith(h); } catch (e) {}
        }
        new BigInt64Array(8);
        new Uint8ClampedArray(7);
    }
}
function f33(a34, a35, a36, a37) {
    const v38 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
    const v39 = /QK/gvdimy;
    with (v38) {
        v39.__proto__ = length;
    }
    const v42 = new Int8Array();
    for (const v43 in v42) {
    }
    function F44(a46) {
        if (!new.target) { throw 'must be called with new'; }
        this.h = a46;
    }
    new F44();
}
for (let v48 = 0; v48 < 10; v48++) {
    f33();
}
new C3();
new C3();
new C3();
new Float32Array(4);
let v58 = -2.0;
v58++;
Math.log1p(v58);
function f61() {
    let v62 = -4294967295;
    const o64 = {
        get a() {
            v62 %= v62;
            return f61;
        },
    };
    return f61;
}
new Float32Array(3138);
new Float32Array(8);
const v72 = new WeakMap();
v72.set(Uint16Array);
