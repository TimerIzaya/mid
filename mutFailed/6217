class C3 {
    constructor(a5, a6) {
        /[x]d[^(?:a+){0,0}]?/gvim;
        /M/gudsy;
        /f\p{General_Category=Decimal_Number}a|b+/gum;
    }
    toString(a11, a12) {
        const t7 = "number";
        t7[a12] = this;
        let v13 = 0;
        do {
            let v14;
            try { v14 = a12(-968954084); } catch (e) {}
            try { v14(v14, v14, v13, this); } catch (e) {}
            const v17 = new Map();
            function f18(a19) {
                return a19;
            }
            Object.defineProperty(v17, "g", { configurable: true, enumerable: true, get: f18, set: f18 });
            Math.log1p();
            v13++;
        } while (v13 < 6)
        return v13;
    }
}
new C3(1000000000000.0, C3);
const v26 = new C3("number", 1000000000000.0);
new C3("number", v26);
/(?<=)/guimy;
/[a-zA-Z0-9]/gvdims;
/a??a{0}foo(?<=bar)baz+/vim;
new Array(5);
[0.4011189249997249];
[-0.6837508401846577,-1.7976931348623157e+308];
[-195141.55497202475,0.0452235209359082];
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f43() {
    let v45 = 1000000000000.0;
    const v46 = v45--;
    -v46;
    class C51 {
        constructor(a53) {
            const v55 = new Float32Array();
            try { v55.entries(); } catch (e) {}
            const v57 = new Uint16Array(12, -4294967296, v46);
            new Float32Array(v57, -4294967296, 268435439, v45, v57);
        }
    }
    try { new C51(12); } catch (e) {}
    const v60 = new C51(257828.6336153492);
    const v61 = new C51();
    const v62 = new C51(-4294967296);
    const v63 = [v62,C51];
    [257828.6336153492,v62,v60,v62,v63];
    const v65 = [v62];
    class C66 extends C51 {
        [v60];
    }
    const v67 = new C66();
    const v68 = v65.constructor;
    try { v68.isArray(v65); } catch (e) {}
    class C70 extends v68 {
    }
    C70.a = C70;
    const v71 = new C70();
    const v72 = v71?.constructor;
    try { new v72(); } catch (e) {}
    Object.defineProperty(v71, 65537, { value: v61 });
    try { v67.m(v63); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f43);
f43();
%OptimizeFunctionOnNextCall(f43);
f43();
