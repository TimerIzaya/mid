const v0 = [];
function F1(a3, a4) {
    if (!new.target) { throw 'must be called with new'; }
    function f5() {
        new Int8Array(628786973);
        return F1;
    }
    this.constructor = f5;
    const v9 = this.constructor;
    try { v9(); } catch (e) {}
}
new F1();
-(7 + 7);
Float64Array.e = Float64Array;
new Float64Array(7);
const v23 = 3 >> 3;
v23 | v23;
const v26 = new Int8Array(3);
let v27;
try { v27 = v26.set(v26); } catch (e) {}
const v29 = 256 ^ 256;
const v31 = new Float64Array(256);
const v33 = ~1657;
v33 / v33;
class C36 {
    constructor(a38, a39) {
        a39[2];
        /W(jy2)/udy;
        const v43 = new Uint8Array();
        for (let v44 = 0; v44 < 500; v44++) {
            const o48 = {
                ...v43,
                n(a46, a47) {
                },
            };
        }
        for (let v49 = 0; v49 < 5; v49++) {
            v0["p" + v49] = v49;
        }
    }
}
class C52 extends C36 {
    o(a54, a55, a56, a57) {
    }
    constructor(a59, a60) {
        function f61() {
            function f63(a64) {
                a64 !== v0;
            }
            this.onmessage = f63;
        }
        const v69 = [];
        const o70 = {
            "arguments": v69,
            "type": "function",
        };
        new Worker(f61, o70);
    }
}
C52.prototype = C52;
%OptimizeFunctionOnNextCall(-103268057);
const v72 = /ORS+/gvds;
const o77 = {
    m(a74) {
        super[-4.0] = delete v72[2];
        return -4.0;
    },
};
let v78;
try { v78 = C52.hasOwnProperty(v31); } catch (e) {}
v78 || v78;
const v80 = new C52();
const v81 = v80?.constructor;
try { new v81(); } catch (e) {}
const v83 = v80?.constructor;
try { v83.call(Uint16Array); } catch (e) {}
try { new v83(); } catch (e) {}
const v88 = new Uint8Array(2);
Uint32Array.e = Uint32Array;
const v90 = new Uint32Array(C52);
function f91(a92, a93, a94, a95) {
    let v96;
    try { v96 = a92.apply(); } catch (e) {}
    const v97 = new a92(a95, a93, v80);
    try { v97.subarray(a95, v96); } catch (e) {}
    try { v97.find(256); } catch (e) {}
    const o106 = {
        "a": v27,
        "maxByteLength": v29,
        "b": v0,
        n(a101, a102) {
            return 1657;
        },
        "b": a92,
        ...v88,
        n(a104, a105) {
            v90[a92] = v90;
            return a105;
        },
    };
    o106[1] = o106;
    return a92;
}
try { f91(2, -1073741824, v31, v31); } catch (e) {}
for (let v108 = 0; v108 < 500; v108++) {
    v108 + v108;
    f91(Uint8Array);
}
const v111 = new Uint16Array(1657);
const v112 = v111.reverse();
try { v112.with(v112, v111); } catch (e) {}
