const v0 = /[^\P{sc=Greek}a|bc*]/gvdm;
const v1 = /(?:foo)/vdisy;
const v2 = /Wj*/udms;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v1;
    } catch(e7) {
    }
}
Object.defineProperty(v2, v1, { writable: true, enumerable: true, value: v0 });
[v1,[v2,v1,v1,F3],F3,F3];
const v10 = [v2,v0,v2];
new F3(v1, v1);
const v15 = new F3(v0, v2);
new F3(v1, F3);
[268435441,2147483649,268435441,-3,65537,-59618,2147483648,268435441,50611];
const v21 = [-11,-1,1895993725];
const v22 = [2147483648,398372201,-15,-9,29206,256,203796818,-4294967296];
const v24 = new Float64Array(Float64Array, Float64Array, Float64Array);
let v26 = 0;
do {
    try { new Float64Array(...-93886419n, 1.7976931348623157e+308, ...v21, v26); } catch (e) {}
    try { v10.unshift(); } catch (e) {}
    v26++;
} while (v26 < 9)
const v34 = [172,v10];
const v35 = [1.7976931348623157e+308,1000000000.0];
[v34,v26,v22];
v15[v35] = 1000000000.0;
const v39 = [Int8Array];
v24[138.3846677150391] = 1000000000.0;
v39.length += 172;
