const v0 = [-1000000.0,2.2250738585072014e-308,0.04883761306750556,-2.0,0.8660103760560895,-1000000000000.0];
[5.0];
const v2 = [-Infinity,1.7976931348623157e+308,0.9415288291898899,-2.2250738585072014e-308,-1e-15];
const v5 = new Map();
const v6 = Map.delete(v5);
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = Date;
}
const v13 = new F7();
const v14 = v13.c;
new v14(v6, Map);
class C16 {
    static 8;
    #p(a18, a19) {
        for (let v20 = 0; v20 < 32; v20++) {
            v2["p" + v20] = v20;
        }
        return a19;
    }
    65537;
    static 256 = v2;
}
const v23 = C16.name;
if (v5 !== v13) {
    v23[256] **= v14;
} else {
    Math.trunc(v13);
    --C16;
    Math.atan(19898);
    4096 && v13;
    Math.atanh(C16);
}
const v33 = new C16();
const v34 = new C16();
v34[65537];
const v36 = new C16();
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = this?.constructor;
    try { new v41(v33, C16); } catch (e) {}
    a39[65537] = a39;
    try {
        this.d = a40;
    } catch(e43) {
    }
}
try { new F37(v34, v36); } catch (e) {}
new F37(v36, v33);
new F37(v33, v33);
const v47 = new F37(v0, v34);
const v48 = v47?.constructor;
try { new v48(C16, C16); } catch (e) {}
function f50(a51, a52, a53, a54) {
    return arguments;
}
for (let v56 = 0; v56 < 5; v56++) {
    const v57 = f50(v56, v56);
    v57[1] = v57;
}
