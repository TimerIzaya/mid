class C3 {
    n(a5) {
        C3.f >>>= 959.2496414044847;
        this[959.2496414044847] = a5;
        const o8 = {
            "maxByteLength": 129,
        };
        const v10 = new ArrayBuffer(129, o8);
        new Int16Array(v10);
        let v13;
        try { v13 = a5.now(this, 959.2496414044847, this, this, this); } catch (e) {}
        try {
            this.toString = v13;
        } catch(e14) {
        }
        959.2496414044847 >> 959.2496414044847;
        Math.random();
        +1073741825;
        const v22 = -48690 >>> 1000000.0;
        v22 ** 601375.3180661858;
        Math.ceil(v22);
        return 959.2496414044847;
    }
}
C3.name = C3;
C3.name = C3;
let v25;
try { v25 = new C3(); } catch (e) {}
const v26 = v25?.constructor;
let v27;
try { v27 = new v26(); } catch (e) {}
new C3();
try {
    v25.valueOf = v25;
} catch(e29) {
}
let v32;
try { v32 = Uint16Array(1000000.0, 959.2496414044847, 1); } catch (e) {}
const v33 = new Uint16Array(1);
const v34 = v33?.with;
const v35 = v34?.constructor;
try { new v35(v32); } catch (e) {}
try { new v34(C3, 1); } catch (e) {}
Int16Array.d = Int16Array;
new Int16Array(2);
Float32Array.length;
const v44 = new Float32Array(256);
const v45 = v44[98];
v45 * v45;
const v47 = new C3();
try { v47.n(v25); } catch (e) {}
new C3();
Uint8ClampedArray.g = Uint8ClampedArray;
const v52 = new Uint8ClampedArray(2140);
try { v52.with(v44, v44); } catch (e) {}
10 / 10;
Float32Array.name = Float32Array;
const v57 = new Float32Array(10);
const v58 = v57?.findLastIndex;
v58.name = v58;
let v59;
try { v59 = new v58(NaN); } catch (e) {}
let v62;
try { v62 = new BigUint64Array(10, BigUint64Array, Float32Array); } catch (e) {}
try { v62.findIndex(v27); } catch (e) {}
const v64 = v62[8];
v64 / v64;
const v66 = new BigUint64Array(2);
v66[1];
function f69(a70) {
    return f69;
}
try { f69(Float32Array); } catch (e) {}
const v72 = f69(undefined);
const v73 = v72?.__lookupSetter__;
try { new v73(v59); } catch (e) {}
try { v72(BigUint64Array); } catch (e) {}
function f76() {
    return f76;
}
f76.caller;
const v79 = ([v72,,]).group(f76);
v79.b = v79;
v79.h = v79;
