function f0() {
}
const v1 = [0.0,917951.0073290537,0.07274470522231724,Infinity,0.5914391861815239,1.5732521724887612e+308,-1.4400979978660108e+307,-9.524771575988321,1000000000.0,Infinity];
[5.175162380398203e+305,-7.00517330225475,-0.0,-5.0,-714211.7623311304,-4.0];
[-1000000000.0,-3.0,642609.22225468,-1e-15,-2.2250738585072014e-308,NaN,2.220446049250313e-16,-4.891209495300708];
function f5(a6, a7) {
    a7 >> a7;
    const v9 = -256 >>> a7;
    v9 / v9;
    return -256;
}
function f11() {
    function f12(a13) {
        return a13;
    }
    [f12];
    try {
    } catch(e15) {
    }
    return v1;
}
new BigUint64Array(2);
const v20 = [-1024,536870889,65536,65536];
function f21(a22, a23) {
    return a22;
}
const v26 = [295968041,v20];
const o27 = {
    "arguments": v26,
    "type": "function",
};
new Worker(f21, o27);
new Int16Array(4096);
new Uint8ClampedArray(4096);
function f37() {
    return f21;
}
function f38(a39) {
    try {
        v26.findLastIndex(f11);
    } catch(e41) {
    }
}
Object.defineProperty(Date, "valueOf", { enumerable: true, get: f37, set: f38 });
const v42 = new Date(Date);
class C43 {
    static #e;
    constructor(a45, a46) {
        try {
            a46.#e = Date;
        } catch(e47) {
        }
    }
}
new C43(v42, v42);
function f49() {
    Math.cos(Math);
    class C51 {
        constructor(a53) {
        }
    }
    C51[Symbol.iterator] = f21;
    new Int8Array(C51);
    return Math;
}
%PrepareFunctionForOptimization(f49);
const v58 = f49();
const v60 = new Uint32Array();
v58.g = v60;
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    const v63 = this.constructor;
    let v65 = -16n;
    function f66() {
        v65 *= -1911645276n;
        return F61;
    }
    f66();
    new v63(f66, f66());
}
%OptimizeFunctionOnNextCall(f49);
f49();
