function f0() {
}
f0.toString = f0;
const v5 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
const v6 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
function f7() {
    196 * 196;
    function f10() {
        let v11 = 1000000000000.0;
        v11--;
        class C15 {
            constructor(a17) {
                const v18 = this.constructor;
                try { new v18(a17, f10); } catch (e) {}
                new Uint16Array(12, -4294967296);
            }
        }
        const v21 = new C15();
        new C15(-4294967296);
        class C23 extends C15 {
            [v21];
        }
        new C23();
    }
    return v6;
}
v6.constructor = f7;
try { v6.concat(v5); } catch (e) {}
const o28 = {
    "execution": "async",
    "type": "minor",
};
new Float64Array(196);
const v33 = new Float64Array(129);
new BigUint64Array(129);
const v37 = /a$\P{Decimal_Number}/gvdims;
function f39(a40, a41, a42, a43) {
    function f44() {
        const o53 = {
            valueOf(a46, a47) {
                return this;
            },
            [-4294967297n](a49, a50, a51, a52) {
            },
        };
        return a42;
    }
    f44();
    for (let i57 = 0, i58 = 10; i57 < i58; i58--) {
        for (let v65 = 0; v65 < 25; v65++) {
            v37.hasIndices = v37;
        }
    }
    const v68 = new Int32Array(1024);
    1024 * v68[3];
    for (let v71 = 0; v71 < 5; v71++) {
        class C72 {
        }
    }
    return a42;
}
for (let v73 = 0; v73 < 10; v73++) {
    f39(v73, v73, -4294967297n, v37);
}
%OptimizeFunctionOnNextCall(f39);
function f75(a76, a77, a78) {
    const o79 = {
        [f0]: a77,
        ...v37,
    };
    return o79;
}
f75(f75, 129, 129);
f75(10, -9007199254740991, v37);
f75(v33, 10, Float64Array);
function F84(a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
    function f88(a89) {
        const v90 = [601759695];
        function f91(a92, a93, a94, a95) {
            arguments[2] = arguments;
            function f97() {
                const o98 = {
                    __proto__: a94,
                };
                return arguments;
            }
            f97();
            gc();
            return v90;
        }
        f91(v90, -19353, -19353);
    }
    Object.defineProperty(a86, "e", { writable: true, configurable: true, enumerable: true, set: f88 });
    a86.e = a86;
    const v103 = this?.constructor;
    try { new v103(this); } catch (e) {}
    this.c = a86;
}
new F84(F84, F84);
new BigInt64Array(1091060517);
f39();
