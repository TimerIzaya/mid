const v1 = [];
function f2(a3) {
    try {
        a3.h = v1;
    } catch(e4) {
    }
    return 5;
}
v1.toString = f2;
const v5 = [0.3012804967226079,85204.01188321039,653.7200248137515,0.7021499874307531,803753.7144966745,852811.0132933464,-9.957521439166277e+307,-2.2210475327078026e+307];
const v6 = [0.16312007947772267];
const v7 = [NaN,-1e-15];
v7[Symbol.toPrimitive] = f2;
let v10;
try { v10 = v7.push(v5); } catch (e) {}
class C11 {
    [5] = v7;
    static 3516;
    #h;
    static 0 = 5;
    constructor(a13, a14) {
    }
    static [v5] = v6;
    static 13;
    static #c = v1;
}
let v15;
try { v15 = new C11(v5, v7); } catch (e) {}
const v17 = /8\x01/guis;
function f18() {
    return Symbol;
}
function f19(a20) {
    function F21(a23, a24) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = a23;
        } catch(e25) {
        }
        try {
            this.c = a23;
        } catch(e26) {
        }
    }
    new F21(v7, v15);
    new F21(v7, v15);
    new F21(v15, v10);
}
Object.defineProperty(v17, "toString", { writable: true, configurable: true, get: f18, set: f19 });
v17.ignoreCase = v17;
function f30(a31) {
    a31.toString = f18;
    try { a31.compile(v7, v1); } catch (e) {}
    const o35 = {
        n(a34) {
            return a34;
        },
        [a31]: a31,
    };
    try { o35.n(v17); } catch (e) {}
    return a31;
}
f30(v17);
new Uint8ClampedArray(5);
new Uint32Array(1000);
try { ("9007199254740991").toLocaleLowerCase(); } catch (e) {}
function f48(a49, a50, a51, a52) {
    a49 - a49;
    a50 - a50;
    a51--;
    const o58 = {
        get b() {
            a52[3] = "-26733";
            for (let v57 = 0; v57 < 24; v57++) {
            }
            return a50;
        },
        "e": a52,
        "f": 1073741825,
        "a": 1073741825,
    };
    try { o58.isPrototypeOf(o58); } catch (e) {}
    return o58;
}
f48(257, 1535195999, 1535195999, "9007199254740991");
let v61;
try { v61 = v17(1535195999); } catch (e) {}
("-26733")[v61];
let v65 = 0;
v65 >>> v65;
const v67 = v65++;
v67 ^ v67;
const o71 = {
    [9007199254740992n]: -43292n,
};
new Uint8Array(1000);
const t96 = "symbol";
t96[1] = "symbol";
function f76() {
    return 1000;
}
Int32Array.bind(Int32Array, Int32Array, Int32Array);
